BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x30028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x2000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x2000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x2fff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x24f0
  Size        : 0x11d
  MaxSize     : 0x120
  Offset      : 0x24f0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x10, %rsp
    00000010: 	testl	%edi, %edi
    00000012: 	jle	.Ltmp1 # Offset: 18
    00000018: 	leal	-0x1(%rdi), %eax
    0000001b: 	movl	%edi, %r13d
    0000001e: 	movq	%rsi, %r14
    00000021: 	movq	%rsi, %rbx
    00000024: 	leaq	0x8(%rsi,%rax,8), %r12
    00000029: 	leaq	DATAat0x2b180(%rip), %rbp
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x2b166(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	movsd	DATAat0x2b620(%rip), %xmm0
.Ltmp5:
    0000006c: 	movsd	%xmm0, 0x8(%rsp)
    00000072: 	callq	_Z15testComplexTypeISt7complexIiEEvd # Offset: 114
    00000077: 	movsd	0x8(%rsp), %xmm0
    0000007d: 	callq	_Z15testComplexTypeISt7complexIlEEvd # Offset: 125
    00000082: 	movl	iterations(%rip), %edx
    00000088: 	movsd	0x8(%rsp), %xmm0
    0000008e: 	movl	%edx, %eax
    00000090: 	shrl	$0x1f, %eax
    00000093: 	addl	%edx, %eax
    00000095: 	sarl	%eax
    00000097: 	movl	%eax, iterations(%rip)
    0000009d: 	callq	_Z15testComplexTypeISt7complexIfEEvd # Offset: 157
    000000a2: 	movsd	0x8(%rsp), %xmm0
    000000a8: 	callq	_Z15testComplexTypeISt7complexIdEEvd # Offset: 168
    000000ad: 	addq	$0x10, %rsp
    000000b1: 	xorl	%eax, %eax
    000000b3: 	popq	%rbx
    000000b4: 	popq	%rbp
    000000b5: 	popq	%r12
    000000b7: 	popq	%r13
    000000b9: 	popq	%r14
    000000bb: 	retq # Offset: 187
.Ltmp3:
    000000bc: 	movq	0x8(%r14), %rdi
    000000c0: 	movl	$0xa, %edx
    000000c5: 	xorl	%esi, %esi
    000000c7: 	callq	strtol@PLT # Offset: 199
    000000cc: 	movl	%eax, iterations(%rip)
    000000d2: 	cmpl	$0x2, %r13d
    000000d6: 	jle	.Ltmp4 # Offset: 214
    000000d8: 	movq	0x10(%r14), %rdi
    000000dc: 	xorl	%esi, %esi
    000000de: 	callq	strtod@PLT # Offset: 222
    000000e3: 	movsd	%xmm0, init_value(%rip)
    000000eb: 	cmpl	$0x3, %r13d
    000000ef: 	jle	.Ltmp4 # Offset: 239
    000000f5: 	movq	0x18(%r14), %rdi
    000000f9: 	xorl	%esi, %esi
    000000fb: 	callq	strtod@PLT # Offset: 251
    00000100: 	jmp	.Ltmp5 # Offset: 256
.Ltmp1:
    00000105: 	leaq	DATAat0x2b166(%rip), %rsi
    0000010c: 	movl	$0x1, %edi
    00000111: 	xorl	%eax, %eax
    00000113: 	callq	__printf_chk@PLT # Offset: 275
    00000118: 	jmp	.Ltmp4 # Offset: 280
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x26f0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x26f0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x2ffe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x2720
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2720
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp6 # Offset: 17
    00000013: 	movq	DATAat0x2ffe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp6 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp6:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2750
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2750
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp7 # Offset: 34
    00000024: 	movq	DATAat0x2fff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp7 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x2790
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2790
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp8 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp9 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp9:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp8:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x27d0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x27d0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/complex_type.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x27e0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x27e0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp10 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp11 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp12 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp14:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp13 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp12:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp14 # Offset: 131
    00000085: 	jmp	.Ltmp15 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp11:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp15:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp14 # Offset: 192
.Ltmp13:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp10:
    000000c7: 	leaq	DATAat0x2b008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x28c0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x28c0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp16 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp17 # Offset: 38
.Ltmp16:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp18 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp17:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp18:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x2b038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x2960
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2960
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp19 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp20 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp21:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp21 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp34:
    00000069: 	leaq	DATAat0x2b182(%rip), %rbp
    00000070: 	leaq	DATAat0x2b058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x2b098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp22 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x2b630(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x2b0c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x2b628(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp23 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp27:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp24 # Offset: 244
    000000fa: 	movq	DATAat0x2b618(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp28:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x2b618(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp25 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp25:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x2b167(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x2b630(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp26 # Offset: 398
.Ltmp23:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp27 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp28 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp24:
    000001c8: 	movq	DATAat0x2b620(%rip), %rsi
    000001cf: 	movq	DATAat0x2b618(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp25 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp26:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp22 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp29 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp30:
    00000210: 	addq	$0x10, %rax
.Ltmp29:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp30 # Offset: 542
.Ltmp35:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x2b0f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp31 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp32 # Offset: 592
.Ltmp31:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp19:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp32:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp33:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp33 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x2b142(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp19 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp20:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp34 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp22:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp35 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2c90
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2c90
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp36 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp37 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp38:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp38 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp43:
    0000006a: 	leaq	DATAat0x2b182(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x2b120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x2b168(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x2b182(%rip), %r8
    000000a1: 	leaq	DATAat0x2b156(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp39 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp40:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x2b167(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp40 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp39 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp41 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp42:
    00000140: 	addq	$0x10, %rax
.Ltmp41:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp42 # Offset: 334
.Ltmp44:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x2b0f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp36:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp37:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp43 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp39:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp44 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2e40
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2e40
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2e60
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2e60
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2ea0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2ea0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2ed0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2ed0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2f00
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2f00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2f30
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2f30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2f60
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2f90
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2f90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2fc0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2fc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2ff0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2ff0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3020
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3020
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3050
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3050
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x3080
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3080
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x30b0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x30b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x30f0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x30f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x3120
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3150
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3180
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x31b0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x31b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x31e0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x31e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x3210
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3210
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3240
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3240
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x3270
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3270
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x32a0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x32a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x32d0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x32d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameISt7complexIfEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x3300
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3300
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameISt7complexIfEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x656c706d, 0x18(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movabsq	$0x6f635f74616f6c66, %rcx
    0000001c: 	movq	%rdx, (%rdi)
    0000001f: 	movq	%rcx, 0x10(%rdi)
    00000023: 	movb	$0x78, 0x1c(%rdi)
    00000027: 	movq	$0xd, 0x8(%rdi)
    0000002f: 	movb	$0x0, 0x1d(%rdi)
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameISt7complexIfEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameISt7complexIdEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x3340
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x3340
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameISt7complexIdEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1e(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x635f656c62756f64, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x7865, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movl	$0x6c706d6f, 0x18(%rdi)
    0000002c: 	movw	%dx, 0x1c(%rdi)
    00000030: 	movq	$0xe, 0x8(%rdi)
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameISt7complexIdEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameISt7complexIiEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x3380
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3380
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameISt7complexIiEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x656c706d, 0x18(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movabsq	$0x6f635f3233746e69, %rcx
    0000001c: 	movq	%rdx, (%rdi)
    0000001f: 	movq	%rcx, 0x10(%rdi)
    00000023: 	movb	$0x78, 0x1c(%rdi)
    00000027: 	movq	$0xd, 0x8(%rdi)
    0000002f: 	movb	$0x0, 0x1d(%rdi)
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameISt7complexIiEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameISt7complexIlEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x33c0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x33c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameISt7complexIlEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x656c706d, 0x18(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movabsq	$0x6f635f3436746e69, %rcx
    0000001c: 	movq	%rdx, (%rdi)
    0000001f: 	movq	%rcx, 0x10(%rdi)
    00000023: 	movb	$0x78, 0x1c(%rdi)
    00000027: 	movq	$0xd, 0x8(%rdi)
    0000002f: 	movb	$0x0, 0x1d(%rdi)
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameISt7complexIlEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1
                _ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/complex_type.cpp/1
  Number      : 43
  State       : disassembled
  Address     : 0x3400
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x3400
  Section     : .text
  Orc Section : .local.text._ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	movq	%rsi, %rcx
    00000003: 	movq	%rdi, %rdx
    00000006: 	movq	%rdi, %rax
    00000009: 	negq	%rcx
    0000000c: 	cmovsq	%rsi, %rcx
    00000010: 	negq	%rdx
    00000013: 	cmovsq	%rdi, %rdx
    00000017: 	cmpq	%rdx, %rcx
    0000001a: 	jg	.Ltmp45 # Offset: 26
    0000001c: 	testq	%rdi, %rdi
    0000001f: 	jne	.Ltmp46 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp46:
    00000028: 	movq	%rdx, %rcx
.Ltmp45:
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	pxor	%xmm2, %xmm2
    00000033: 	pxor	%xmm1, %xmm1
    00000037: 	cqto
    00000039: 	idivq	%rcx
    0000003c: 	cvtsi2sd	%rcx, %xmm1
    00000041: 	movq	%rax, %rdi
    00000044: 	movq	%rsi, %rax
    00000047: 	cqto
    00000049: 	imulq	%rdi, %rdi
    0000004d: 	idivq	%rcx
    00000050: 	movq	%rax, %rsi
    00000053: 	imulq	%rax, %rsi
    00000057: 	addq	%rsi, %rdi
    0000005a: 	cvtsi2sd	%rdi, %xmm0
    0000005f: 	ucomisd	%xmm0, %xmm2
    00000063: 	ja	.Ltmp47 # Offset: 99
    00000065: 	sqrtsd	%xmm0, %xmm0
    00000069: 	mulsd	%xmm0, %xmm1
    0000006d: 	cvttsd2si	%xmm1, %rax
    00000072: 	retq # Offset: 114
.Ltmp47:
    00000073: 	subq	$0x18, %rsp
    00000077: 	movsd	%xmm1, 0x8(%rsp)
    0000007d: 	callq	sqrt@PLT # Offset: 125
    00000082: 	movsd	0x8(%rsp), %xmm1
    00000088: 	addq	$0x18, %rsp
    0000008c: 	mulsd	%xmm0, %xmm1
    00000090: 	cvttsd2si	%xmm1, %rax
    00000095: 	retq # Offset: 149
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1(*2)"

Binary Function "_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1
                _ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/complex_type.cpp/1
  Number      : 44
  State       : disassembled
  Address     : 0x34a0
  Size        : 0x7f
  MaxSize     : 0x80
  Offset      : 0x34a0
  Section     : .text
  Orc Section : .local.text._ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	movl	%esi, %ecx
    00000002: 	movl	%edi, %edx
    00000004: 	movl	%edi, %eax
    00000006: 	negl	%ecx
    00000008: 	cmovsl	%esi, %ecx
    0000000b: 	negl	%edx
    0000000d: 	cmovsl	%edi, %edx
    00000010: 	cmpl	%edx, %ecx
    00000012: 	jg	.Ltmp48 # Offset: 18
    00000014: 	testl	%edi, %edi
    00000016: 	jne	.Ltmp49 # Offset: 22
    00000018: 	retq # Offset: 24
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp49:
    00000020: 	movl	%edx, %ecx
.Ltmp48:
    00000022: 	pxor	%xmm0, %xmm0
    00000026: 	pxor	%xmm2, %xmm2
    0000002a: 	pxor	%xmm1, %xmm1
    0000002e: 	cltd
    0000002f: 	idivl	%ecx
    00000031: 	cvtsi2sd	%ecx, %xmm1
    00000035: 	movl	%eax, %edi
    00000037: 	movl	%esi, %eax
    00000039: 	cltd
    0000003a: 	imull	%edi, %edi
    0000003d: 	idivl	%ecx
    0000003f: 	movl	%eax, %esi
    00000041: 	imull	%eax, %esi
    00000044: 	addl	%esi, %edi
    00000046: 	cvtsi2sd	%edi, %xmm0
    0000004a: 	ucomisd	%xmm0, %xmm2
    0000004e: 	ja	.Ltmp50 # Offset: 78
    00000050: 	sqrtsd	%xmm0, %xmm0
    00000054: 	mulsd	%xmm0, %xmm1
    00000058: 	cvttsd2si	%xmm1, %eax
    0000005c: 	retq # Offset: 92
.Ltmp50:
    0000005d: 	subq	$0x18, %rsp
    00000061: 	movsd	%xmm1, 0x8(%rsp)
    00000067: 	callq	sqrt@PLT # Offset: 103
    0000006c: 	movsd	0x8(%rsp), %xmm1
    00000072: 	addq	$0x18, %rsp
    00000076: 	mulsd	%xmm0, %xmm1
    0000007a: 	cvttsd2si	%xmm1, %eax
    0000007e: 	retq # Offset: 126
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 45
  State       : disassembled
  Address     : 0x3520
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x3520
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp51 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp54:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp53:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp52 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp53 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp54 # Offset: 142
.Ltmp51:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp55 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp56 # Offset: 164
.Ltmp59:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp57 # Offset: 177
.Ltmp58:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp56 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp58 # Offset: 214
.Ltmp57:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp59 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp60 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp62:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp61 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp61:
    0000010a: 	addq	$0x20, %r13
.Ltmp56:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp62 # Offset: 275
.Ltmp60:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp63 # Offset: 283
.Ltmp69:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp64 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp65:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp65 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp64:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp52:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp53 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp54 # Offset: 389
    0000018b: 	jmp	.Ltmp51 # Offset: 395
.Ltmp55:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp60 # Offset: 405
.Ltmp68:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp66 # Offset: 422
.Ltmp67:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp60 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp67 # Offset: 463
.Ltmp66:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp68 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp69 # Offset: 482
.Ltmp63:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x3720
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x3720
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp70 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp71 # Offset: 63
.Ltmp70:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp72 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp73 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp77:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp74 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp75 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp73:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp76 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp77 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp72:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp78:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp77 # Offset: 248
.Ltmp71:
    000000fd: 	leaq	DATAat0x2b008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp74:
    00000109: 	leaq	DATAat0x2b184(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp75:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp76:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp78 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp79 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp79:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3870
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x3870
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp80 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp83:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp82:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp81 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp82 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp83 # Offset: 142
.Ltmp80:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp84 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp85 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp87:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp86 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp87 # Offset: 215
.Ltmp85:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp88 # Offset: 222
.Ltmp90:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp89 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp90 # Offset: 263
.Ltmp88:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp91 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp92:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp92 # Offset: 324
.Ltmp91:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp81:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp82 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp83 # Offset: 397
    00000193: 	jmp	.Ltmp80 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp89:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp90 # Offset: 425
    000001af: 	jmp	.Ltmp88 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp86:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp87 # Offset: 449
    000001c7: 	jmp	.Ltmp85 # Offset: 455
.Ltmp84:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp88 # Offset: 465
.Ltmp95:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp93 # Offset: 482
.Ltmp94:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp88 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp94 # Offset: 523
.Ltmp93:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp95 # Offset: 534
    00000218: 	jmp	.Ltmp88 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x3a90
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x3a90
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp96 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp97 # Offset: 152
.Ltmp108:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp98 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp99 # Offset: 204
.Ltmp98:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp100 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp101 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp103:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp102 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp101:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp103 # Offset: 339
    00000155: 	jmp	.Ltmp104 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp105 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp106 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp107 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp107:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp110:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp108 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp100:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp104:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp103 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp105:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp109 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp110 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp110 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp109:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp110 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp110 # Offset: 696
.Ltmp99:
    000002bd: 	leaq	DATAat0x2b008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp106:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp111 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp111:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp96:
    000002e0: 	leaq	DATAat0x2b1a0(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp102:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3dc0
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x3dc0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	0x30(%rdi), %rbx
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x8(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	movq	0x40(%rdi), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp112 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %r13
    00000044: 	movq	%r13, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp113 # Offset: 74
    0000004c: 	testq	%r13, %r13
    0000004f: 	je	.Ltmp114 # Offset: 79
.Ltmp113:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp115 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp116 # Offset: 99
    00000069: 	movzbl	(%r13), %eax
    0000006e: 	movb	%al, 0x10(%rbx)
.Ltmp118:
    00000071: 	movq	%r12, 0x8(%rbx)
    00000075: 	movb	$0x0, (%rdi,%r12)
    0000007a: 	addq	$0x20, 0x30(%rbp)
    0000007f: 	movq	0x8(%rsp), %rax
    00000084: 	subq	%fs:0x28, %rax
    0000008d: 	jne	.Ltmp117 # Offset: 141
    0000008f: 	addq	$0x18, %rsp
    00000093: 	popq	%rbx
    00000094: 	popq	%rbp
    00000095: 	popq	%r12
    00000097: 	popq	%r13
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp115:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp119:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%r13, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp118 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp112:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp117 # Offset: 222
    000000e0: 	addq	$0x18, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 234
    000000ef: 	nop # Size: 1
.Ltmp116:
    000000f0: 	testq	%r12, %r12
    000000f3: 	je	.Ltmp118 # Offset: 243
    000000f9: 	jmp	.Ltmp119 # Offset: 249
.Ltmp114:
    000000fb: 	leaq	DATAat0x2b008(%rip), %rdi
    00000102: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 258
.Ltmp117:
    00000107: 	callq	__stack_chk_fail@PLT # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_"

Binary Function "_Z13test_constantISt7complexIfE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3ed0
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0x3ed0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp120 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	pxor	%xmm7, %xmm7
    0000004f: 	movl	%ebx, %r14d
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm3, %xmm3
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm7
    0000006d: 	movaps	DATAat0x2b700(%rip), %xmm6
    00000074: 	movss	%xmm7, 0x8(%rsp)
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movaps	DATAat0x2b6f0(%rip), %xmm7
    00000084: 	shlq	$0x5, %rax
    00000088: 	leaq	0x20(%r12,%rax), %r15
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp127:
    00000090: 	movaps	%xmm3, %xmm5
    00000093: 	movaps	%xmm3, %xmm4
    00000096: 	testl	%ebx, %ebx
    00000098: 	jle	.Ltmp121 # Offset: 152
    0000009e: 	cmpl	$0x2, 0xc(%rsp)
    000000a3: 	jbe	.Ltmp122 # Offset: 163
    000000a9: 	movq	%r12, %rax
    000000ac: 	movaps	%xmm3, %xmm5
    000000af: 	movaps	%xmm3, %xmm4
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp123:
    000000b8: 	movups	(%rax), %xmm0
    000000bb: 	movups	0x10(%rax), %xmm2
    000000bf: 	addq	$0x20, %rax
    000000c3: 	movaps	%xmm0, %xmm1
    000000c6: 	shufps	$0xdd, %xmm2, %xmm0
    000000ca: 	addps	%xmm6, %xmm0
    000000cd: 	shufps	$0x88, %xmm2, %xmm1
    000000d1: 	addps	%xmm7, %xmm1
    000000d4: 	addss	%xmm1, %xmm4
    000000d8: 	movaps	%xmm1, %xmm2
    000000db: 	shufps	$0x55, %xmm1, %xmm2
    000000df: 	addss	%xmm4, %xmm2
    000000e3: 	movaps	%xmm1, %xmm4
    000000e6: 	unpckhps	%xmm1, %xmm4
    000000e9: 	shufps	$0xff, %xmm1, %xmm1
    000000ed: 	addss	%xmm2, %xmm4
    000000f1: 	movaps	%xmm0, %xmm2
    000000f4: 	addss	%xmm5, %xmm2
    000000f8: 	movaps	%xmm0, %xmm5
    000000fb: 	unpckhps	%xmm0, %xmm5
    000000fe: 	addss	%xmm1, %xmm4
    00000102: 	movaps	%xmm0, %xmm1
    00000105: 	shufps	$0x55, %xmm0, %xmm1
    00000109: 	addss	%xmm2, %xmm1
    0000010d: 	shufps	$0xff, %xmm0, %xmm0
    00000111: 	addss	%xmm1, %xmm5
    00000115: 	addss	%xmm0, %xmm5
    00000119: 	cmpq	%r15, %rax
    0000011c: 	jne	.Ltmp123 # Offset: 284
    0000011e: 	movl	%r14d, %eax
    00000121: 	cmpl	%ebx, %r14d
    00000124: 	je	.Ltmp121 # Offset: 292
.Ltmp135:
    00000126: 	movq	DATAat0x2b638(%rip), %xmm2
    0000012e: 	movl	%ebx, %edx
    00000130: 	unpcklps	%xmm5, %xmm4
    00000133: 	subl	%eax, %edx
    00000135: 	leaq	(%r12,%rax,8), %rax
    00000139: 	movq	(%rax), %xmm0
    0000013d: 	addps	%xmm2, %xmm0
    00000140: 	addps	%xmm4, %xmm0
    00000143: 	cmpl	$0x1, %edx
    00000146: 	je	.Ltmp124 # Offset: 326
    00000148: 	movq	0x8(%rax), %xmm1
    0000014d: 	addps	%xmm2, %xmm1
    00000150: 	addps	%xmm1, %xmm0
    00000153: 	cmpl	$0x2, %edx
    00000156: 	je	.Ltmp124 # Offset: 342
    00000158: 	movq	0x10(%rax), %xmm1
    0000015d: 	addps	%xmm2, %xmm1
    00000160: 	addps	%xmm1, %xmm0
.Ltmp124:
    00000163: 	movaps	%xmm0, %xmm4
    00000166: 	shufps	$0xe5, %xmm0, %xmm0
    0000016a: 	movaps	%xmm0, %xmm5
.Ltmp121:
    0000016d: 	movss	DATAat0x2b6f0(%rip), %xmm8
    00000176: 	addss	0x8(%rsp), %xmm8
    0000017d: 	movss	DATAat0x2b900(%rip), %xmm1
    00000185: 	mulss	%xmm8, %xmm1
    0000018a: 	movaps	%xmm8, %xmm0
    0000018e: 	mulss	%xmm3, %xmm0
    00000192: 	addss	DATAat0x2b904(%rip), %xmm0
    0000019a: 	ucomiss	%xmm0, %xmm1
    0000019d: 	jp	.Ltmp125 # Offset: 413
.Ltmp139:
    000001a3: 	subss	%xmm0, %xmm5
    000001a7: 	subss	%xmm1, %xmm4
    000001ab: 	movss	%xmm5, 0x24(%rsp)
    000001b1: 	movss	%xmm4, 0x20(%rsp)
    000001b7: 	movq	0x20(%rsp), %xmm0
    000001bd: 	callq	cabsf@PLT # Offset: 445
    000001c2: 	movss	DATAat0x2b908(%rip), %xmm3
    000001ca: 	movaps	DATAat0x2b6f0(%rip), %xmm7
    000001d1: 	movaps	DATAat0x2b700(%rip), %xmm6
    000001d8: 	comiss	%xmm0, %xmm3
    000001db: 	pxor	%xmm3, %xmm3
    000001df: 	jbe	.Ltmp126 # Offset: 479
    000001e5: 	addl	$0x1, %ebp
    000001e8: 	cmpl	%r13d, %ebp
    000001eb: 	jl	.Ltmp127 # Offset: 491
.Ltmp120:
    000001f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001ff: 	subq	$0x20, %rax
    00000203: 	cmpq	%rax, %rbx
    00000206: 	je	.Ltmp128 # Offset: 518
    0000020c: 	movq	0x10(%rsp), %rax
    00000211: 	leaq	0x10(%rbx), %rdi
    00000215: 	movq	%rdi, (%rbx)
    00000218: 	movq	(%rax), %rbp
    0000021b: 	movq	0x8(%rax), %r12
    0000021f: 	movq	%rbp, %rax
    00000222: 	addq	%r12, %rax
    00000225: 	je	.Ltmp129 # Offset: 549
    00000227: 	testq	%rbp, %rbp
    0000022a: 	je	.Ltmp130 # Offset: 554
.Ltmp129:
    00000230: 	movq	%r12, 0x30(%rsp)
    00000235: 	cmpq	$0xf, %r12
    00000239: 	ja	.Ltmp131 # Offset: 569
    0000023f: 	cmpq	$0x1, %r12
    00000243: 	jne	.Ltmp132 # Offset: 579
    00000249: 	movzbl	(%rbp), %eax
    0000024d: 	movb	%al, 0x10(%rbx)
.Ltmp136:
    00000250: 	movq	%r12, 0x8(%rbx)
    00000254: 	movb	$0x0, (%rdi,%r12)
    00000259: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000260: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000267: 	addq	$0x20, %rax
    0000026b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000272: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000279: 	je	.Ltmp133 # Offset: 633
.Ltmp137:
    0000027f: 	movq	-0x20(%rax), %rbp
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	movq	%rax, end_time(%rip)
    0000028f: 	movq	0x38(%rsp), %rdx
    00000294: 	subq	%fs:0x28, %rdx
    0000029d: 	jne	.Ltmp134 # Offset: 669
    000002a3: 	subq	start_time(%rip), %rax
    000002aa: 	pxor	%xmm0, %xmm0
    000002ae: 	movq	%rbp, %rdi
    000002b1: 	cvtsi2sd	%rax, %xmm0
    000002b6: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002be: 	addq	$0x48, %rsp
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp126:
    000002d8: 	movl	current_test(%rip), %edx
    000002de: 	movl	$0x1, %edi
    000002e3: 	xorl	%eax, %eax
    000002e5: 	addl	$0x1, %ebp
    000002e8: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r13d
    000002fb: 	cmpl	%r13d, %ebp
    000002fe: 	jge	.Ltmp120 # Offset: 766
    00000304: 	pxor	%xmm6, %xmm6
    00000308: 	movaps	DATAat0x2b6f0(%rip), %xmm7
    0000030f: 	pxor	%xmm3, %xmm3
    00000313: 	cvtsd2ss	init_value(%rip), %xmm6
    0000031b: 	movss	%xmm6, 0x8(%rsp)
    00000321: 	movaps	DATAat0x2b700(%rip), %xmm6
    00000328: 	jmp	.Ltmp127 # Offset: 808
.Ltmp122:
    0000032d: 	xorl	%eax, %eax
    0000032f: 	movaps	%xmm3, %xmm5
    00000332: 	movaps	%xmm3, %xmm4
    00000335: 	jmp	.Ltmp135 # Offset: 821
.Ltmp131:
    0000033a: 	movq	%rbx, %rdi
    0000033d: 	leaq	0x30(%rsp), %rsi
    00000342: 	xorl	%edx, %edx
    00000344: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 836
    00000349: 	movq	%rax, (%rbx)
    0000034c: 	movq	%rax, %rdi
    0000034f: 	movq	0x30(%rsp), %rax
    00000354: 	movq	%rax, 0x10(%rbx)
.Ltmp138:
    00000358: 	movq	%r12, %rdx
    0000035b: 	movq	%rbp, %rsi
    0000035e: 	callq	memcpy@PLT # Offset: 862
    00000363: 	movq	0x30(%rsp), %r12
    00000368: 	movq	(%rbx), %rdi
    0000036b: 	jmp	.Ltmp136 # Offset: 875
.Ltmp128:
    00000370: 	movq	0x10(%rsp), %rsi
    00000375: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 892
    00000381: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000388: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000396: 	jne	.Ltmp137 # Offset: 918
.Ltmp133:
    0000039c: 	movq	-0x8(%rdx), %rax
    000003a0: 	addq	$0x200, %rax
    000003a6: 	jmp	.Ltmp137 # Offset: 934
.Ltmp132:
    000003ab: 	testq	%r12, %r12
    000003ae: 	je	.Ltmp136 # Offset: 942
    000003b4: 	jmp	.Ltmp138 # Offset: 948
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp125:
    000003c0: 	movss	DATAat0x2b700(%rip), %xmm1
    000003c8: 	movaps	%xmm8, %xmm0
    000003cc: 	movss	DATAat0x2b900(%rip), %xmm2
    000003d4: 	movss	%xmm4, 0x1c(%rsp)
    000003da: 	movss	%xmm5, 0x18(%rsp)
    000003e0: 	callq	__mulsc3@PLT # Offset: 992
    000003e5: 	movss	0x1c(%rsp), %xmm4
    000003eb: 	movss	0x18(%rsp), %xmm5
    000003f1: 	movq	%xmm0, 0x28(%rsp)
    000003f7: 	movss	0x28(%rsp), %xmm1
    000003fd: 	movss	0x2c(%rsp), %xmm0
    00000403: 	jmp	.Ltmp139 # Offset: 1027
.Ltmp134:
    00000408: 	callq	__stack_chk_fail@PLT # Offset: 1032
.Ltmp130:
    0000040d: 	leaq	DATAat0x2b008(%rip), %rdi
    00000414: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1044
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x42f0
  Size        : 0x323
  MaxSize     : 0x330
  Offset      : 0x42f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp140 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm3
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	movapd	DATAat0x2b710(%rip), %xmm5
    0000005b: 	xorl	%ebx, %ebx
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000068: 	leaq	0x10(%r12,%rax), %r14
    0000006d: 	movsd	%xmm3, (%rsp)
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp145:
    00000078: 	pxor	%xmm4, %xmm4
    0000007c: 	movq	%r12, %rax
    0000007f: 	pxor	%xmm1, %xmm1
    00000083: 	movapd	%xmm4, %xmm6
    00000087: 	testl	%r13d, %r13d
    0000008a: 	jle	.Ltmp141 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp142:
    00000090: 	movupd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addpd	%xmm5, %xmm0
    0000009c: 	addpd	%xmm0, %xmm1
    000000a0: 	cmpq	%r14, %rax
    000000a3: 	jne	.Ltmp142 # Offset: 163
    000000a5: 	movapd	%xmm1, %xmm6
    000000a9: 	unpckhpd	%xmm1, %xmm1
    000000ad: 	movapd	%xmm1, %xmm4
.Ltmp141:
    000000b1: 	movsd	(%rsp), %xmm0
    000000b6: 	subsd	DATAat0x2b640(%rip), %xmm0
    000000be: 	pxor	%xmm7, %xmm7
    000000c2: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000ca: 	movapd	%xmm7, %xmm1
    000000ce: 	mulsd	%xmm0, %xmm2
    000000d2: 	mulsd	%xmm0, %xmm1
    000000d6: 	subsd	DATAat0x2b650(%rip), %xmm1
    000000de: 	addsd	%xmm7, %xmm2
    000000e2: 	ucomisd	%xmm1, %xmm2
    000000e6: 	jp	.Ltmp143 # Offset: 230
.Ltmp156:
    000000ec: 	subsd	%xmm2, %xmm6
    000000f0: 	subsd	%xmm1, %xmm4
    000000f4: 	movapd	%xmm6, %xmm0
    000000f8: 	movapd	%xmm4, %xmm1
    000000fc: 	callq	cabs@PLT # Offset: 252
    00000101: 	movsd	DATAat0x2b658(%rip), %xmm3
    00000109: 	movapd	DATAat0x2b710(%rip), %xmm5
    00000111: 	comisd	%xmm0, %xmm3
    00000115: 	jbe	.Ltmp144 # Offset: 277
    0000011b: 	addl	$0x1, %ebx
    0000011e: 	cmpl	%ebp, %ebx
    00000120: 	jl	.Ltmp145 # Offset: 288
.Ltmp140:
    00000126: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000012d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000134: 	subq	$0x20, %rax
    00000138: 	cmpq	%rax, %rbx
    0000013b: 	je	.Ltmp146 # Offset: 315
    00000141: 	movq	0x8(%rsp), %rax
    00000146: 	leaq	0x10(%rbx), %rdi
    0000014a: 	movq	%rdi, (%rbx)
    0000014d: 	movq	(%rax), %rbp
    00000150: 	movq	0x8(%rax), %r12
    00000154: 	movq	%rbp, %rax
    00000157: 	addq	%r12, %rax
    0000015a: 	je	.Ltmp147 # Offset: 346
    0000015c: 	testq	%rbp, %rbp
    0000015f: 	je	.Ltmp148 # Offset: 351
.Ltmp147:
    00000165: 	movq	%r12, 0x20(%rsp)
    0000016a: 	cmpq	$0xf, %r12
    0000016e: 	ja	.Ltmp149 # Offset: 366
    00000174: 	cmpq	$0x1, %r12
    00000178: 	jne	.Ltmp150 # Offset: 376
    0000017e: 	movzbl	(%rbp), %eax
    00000182: 	movb	%al, 0x10(%rbx)
.Ltmp153:
    00000185: 	movq	%r12, 0x8(%rbx)
    00000189: 	movb	$0x0, (%rdi,%r12)
    0000018e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000019c: 	addq	$0x20, %rax
    000001a0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001a7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001ae: 	je	.Ltmp151 # Offset: 430
.Ltmp154:
    000001b4: 	movq	-0x20(%rax), %rbp
    000001b8: 	callq	clock@PLT # Offset: 440
    000001bd: 	movq	%rax, end_time(%rip)
    000001c4: 	movq	0x28(%rsp), %rdx
    000001c9: 	subq	%fs:0x28, %rdx
    000001d2: 	jne	.Ltmp152 # Offset: 466
    000001d8: 	subq	start_time(%rip), %rax
    000001df: 	pxor	%xmm0, %xmm0
    000001e3: 	movq	%rbp, %rdi
    000001e6: 	cvtsi2sd	%rax, %xmm0
    000001eb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001f3: 	addq	$0x38, %rsp
    000001f7: 	popq	%rbx
    000001f8: 	popq	%rbp
    000001f9: 	popq	%r12
    000001fb: 	popq	%r13
    000001fd: 	popq	%r14
    000001ff: 	popq	%r15
    00000201: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 513
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp144:
    00000210: 	movl	current_test(%rip), %edx
    00000216: 	movq	%r15, %rsi
    00000219: 	movl	$0x1, %edi
    0000021e: 	xorl	%eax, %eax
    00000220: 	addl	$0x1, %ebx
    00000223: 	callq	__printf_chk@PLT # Offset: 547
    00000228: 	movl	iterations(%rip), %ebp
    0000022e: 	cmpl	%ebp, %ebx
    00000230: 	jge	.Ltmp140 # Offset: 560
    00000236: 	movsd	init_value(%rip), %xmm7
    0000023e: 	movapd	DATAat0x2b710(%rip), %xmm5
    00000246: 	movsd	%xmm7, (%rsp)
    0000024b: 	jmp	.Ltmp145 # Offset: 587
.Ltmp149:
    00000250: 	movq	%rbx, %rdi
    00000253: 	leaq	0x20(%rsp), %rsi
    00000258: 	xorl	%edx, %edx
    0000025a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 602
    0000025f: 	movq	%rax, (%rbx)
    00000262: 	movq	%rax, %rdi
    00000265: 	movq	0x20(%rsp), %rax
    0000026a: 	movq	%rax, 0x10(%rbx)
.Ltmp155:
    0000026e: 	movq	%r12, %rdx
    00000271: 	movq	%rbp, %rsi
    00000274: 	callq	memcpy@PLT # Offset: 628
    00000279: 	movq	0x20(%rsp), %r12
    0000027e: 	movq	(%rbx), %rdi
    00000281: 	jmp	.Ltmp153 # Offset: 641
.Ltmp146:
    00000286: 	movq	0x8(%rsp), %rsi
    0000028b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000292: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 658
    00000297: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000029e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ac: 	jne	.Ltmp154 # Offset: 684
.Ltmp151:
    000002b2: 	movq	-0x8(%rdx), %rax
    000002b6: 	addq	$0x200, %rax
    000002bc: 	jmp	.Ltmp154 # Offset: 700
.Ltmp150:
    000002c1: 	testq	%r12, %r12
    000002c4: 	je	.Ltmp153 # Offset: 708
    000002ca: 	jmp	.Ltmp155 # Offset: 714
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp143:
    000002d0: 	movq	DATAat0x2b648(%rip), %rax
    000002d7: 	pxor	%xmm3, %xmm3
    000002db: 	movsd	%xmm4, 0x18(%rsp)
    000002e1: 	movsd	%xmm6, 0x10(%rsp)
    000002e7: 	movq	%rax, %xmm2
    000002ec: 	movq	DATAat0x2b718(%rip), %rax
    000002f3: 	movq	%rax, %xmm1
    000002f8: 	callq	__muldc3@PLT # Offset: 760
    000002fd: 	movsd	0x18(%rsp), %xmm4
    00000303: 	movsd	0x10(%rsp), %xmm6
    00000309: 	movapd	%xmm0, %xmm2
    0000030d: 	jmp	.Ltmp156 # Offset: 781
.Ltmp152:
    00000312: 	callq	__stack_chk_fail@PLT # Offset: 786
.Ltmp148:
    00000317: 	leaq	DATAat0x2b008(%rip), %rdi
    0000031e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 798
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x4620
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0x4620
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp157 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	pxor	%xmm7, %xmm7
    0000004f: 	movl	%ebx, %r14d
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm3, %xmm3
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm7
    0000006d: 	movaps	DATAat0x2b720(%rip), %xmm6
    00000074: 	movss	%xmm7, 0x8(%rsp)
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movaps	DATAat0x2b700(%rip), %xmm7
    00000084: 	shlq	$0x5, %rax
    00000088: 	leaq	0x20(%r12,%rax), %r15
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp164:
    00000090: 	movaps	%xmm3, %xmm5
    00000093: 	movaps	%xmm3, %xmm4
    00000096: 	testl	%ebx, %ebx
    00000098: 	jle	.Ltmp158 # Offset: 152
    0000009e: 	cmpl	$0x2, 0xc(%rsp)
    000000a3: 	jbe	.Ltmp159 # Offset: 163
    000000a9: 	movq	%r12, %rax
    000000ac: 	movaps	%xmm3, %xmm5
    000000af: 	movaps	%xmm3, %xmm4
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp160:
    000000b8: 	movups	(%rax), %xmm0
    000000bb: 	movups	0x10(%rax), %xmm2
    000000bf: 	addq	$0x20, %rax
    000000c3: 	movaps	%xmm0, %xmm1
    000000c6: 	shufps	$0xdd, %xmm2, %xmm0
    000000ca: 	addps	%xmm6, %xmm0
    000000cd: 	shufps	$0x88, %xmm2, %xmm1
    000000d1: 	addps	%xmm7, %xmm1
    000000d4: 	addss	%xmm1, %xmm4
    000000d8: 	movaps	%xmm1, %xmm2
    000000db: 	shufps	$0x55, %xmm1, %xmm2
    000000df: 	addss	%xmm4, %xmm2
    000000e3: 	movaps	%xmm1, %xmm4
    000000e6: 	unpckhps	%xmm1, %xmm4
    000000e9: 	shufps	$0xff, %xmm1, %xmm1
    000000ed: 	addss	%xmm2, %xmm4
    000000f1: 	movaps	%xmm0, %xmm2
    000000f4: 	addss	%xmm5, %xmm2
    000000f8: 	movaps	%xmm0, %xmm5
    000000fb: 	unpckhps	%xmm0, %xmm5
    000000fe: 	addss	%xmm1, %xmm4
    00000102: 	movaps	%xmm0, %xmm1
    00000105: 	shufps	$0x55, %xmm0, %xmm1
    00000109: 	addss	%xmm2, %xmm1
    0000010d: 	shufps	$0xff, %xmm0, %xmm0
    00000111: 	addss	%xmm1, %xmm5
    00000115: 	addss	%xmm0, %xmm5
    00000119: 	cmpq	%r15, %rax
    0000011c: 	jne	.Ltmp160 # Offset: 284
    0000011e: 	movl	%r14d, %eax
    00000121: 	cmpl	%ebx, %r14d
    00000124: 	je	.Ltmp158 # Offset: 292
.Ltmp172:
    00000126: 	movq	DATAat0x2b660(%rip), %xmm2
    0000012e: 	movl	%ebx, %edx
    00000130: 	unpcklps	%xmm5, %xmm4
    00000133: 	subl	%eax, %edx
    00000135: 	leaq	(%r12,%rax,8), %rax
    00000139: 	movq	(%rax), %xmm0
    0000013d: 	addps	%xmm2, %xmm0
    00000140: 	addps	%xmm4, %xmm0
    00000143: 	cmpl	$0x1, %edx
    00000146: 	je	.Ltmp161 # Offset: 326
    00000148: 	movq	0x8(%rax), %xmm1
    0000014d: 	addps	%xmm2, %xmm1
    00000150: 	addps	%xmm1, %xmm0
    00000153: 	cmpl	$0x2, %edx
    00000156: 	je	.Ltmp161 # Offset: 342
    00000158: 	movq	0x10(%rax), %xmm1
    0000015d: 	addps	%xmm2, %xmm1
    00000160: 	addps	%xmm1, %xmm0
.Ltmp161:
    00000163: 	movaps	%xmm0, %xmm4
    00000166: 	shufps	$0xe5, %xmm0, %xmm0
    0000016a: 	movaps	%xmm0, %xmm5
.Ltmp158:
    0000016d: 	movss	DATAat0x2b700(%rip), %xmm8
    00000176: 	addss	0x8(%rsp), %xmm8
    0000017d: 	movss	DATAat0x2b900(%rip), %xmm1
    00000185: 	mulss	%xmm8, %xmm1
    0000018a: 	movaps	%xmm8, %xmm0
    0000018e: 	mulss	%xmm3, %xmm0
    00000192: 	addss	DATAat0x2b90c(%rip), %xmm0
    0000019a: 	ucomiss	%xmm0, %xmm1
    0000019d: 	jp	.Ltmp162 # Offset: 413
.Ltmp176:
    000001a3: 	subss	%xmm0, %xmm5
    000001a7: 	subss	%xmm1, %xmm4
    000001ab: 	movss	%xmm5, 0x24(%rsp)
    000001b1: 	movss	%xmm4, 0x20(%rsp)
    000001b7: 	movq	0x20(%rsp), %xmm0
    000001bd: 	callq	cabsf@PLT # Offset: 445
    000001c2: 	movss	DATAat0x2b908(%rip), %xmm3
    000001ca: 	movaps	DATAat0x2b700(%rip), %xmm7
    000001d1: 	movaps	DATAat0x2b720(%rip), %xmm6
    000001d8: 	comiss	%xmm0, %xmm3
    000001db: 	pxor	%xmm3, %xmm3
    000001df: 	jbe	.Ltmp163 # Offset: 479
    000001e5: 	addl	$0x1, %ebp
    000001e8: 	cmpl	%r13d, %ebp
    000001eb: 	jl	.Ltmp164 # Offset: 491
.Ltmp157:
    000001f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001ff: 	subq	$0x20, %rax
    00000203: 	cmpq	%rax, %rbx
    00000206: 	je	.Ltmp165 # Offset: 518
    0000020c: 	movq	0x10(%rsp), %rax
    00000211: 	leaq	0x10(%rbx), %rdi
    00000215: 	movq	%rdi, (%rbx)
    00000218: 	movq	(%rax), %rbp
    0000021b: 	movq	0x8(%rax), %r12
    0000021f: 	movq	%rbp, %rax
    00000222: 	addq	%r12, %rax
    00000225: 	je	.Ltmp166 # Offset: 549
    00000227: 	testq	%rbp, %rbp
    0000022a: 	je	.Ltmp167 # Offset: 554
.Ltmp166:
    00000230: 	movq	%r12, 0x30(%rsp)
    00000235: 	cmpq	$0xf, %r12
    00000239: 	ja	.Ltmp168 # Offset: 569
    0000023f: 	cmpq	$0x1, %r12
    00000243: 	jne	.Ltmp169 # Offset: 579
    00000249: 	movzbl	(%rbp), %eax
    0000024d: 	movb	%al, 0x10(%rbx)
.Ltmp173:
    00000250: 	movq	%r12, 0x8(%rbx)
    00000254: 	movb	$0x0, (%rdi,%r12)
    00000259: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000260: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000267: 	addq	$0x20, %rax
    0000026b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000272: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000279: 	je	.Ltmp170 # Offset: 633
.Ltmp174:
    0000027f: 	movq	-0x20(%rax), %rbp
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	movq	%rax, end_time(%rip)
    0000028f: 	movq	0x38(%rsp), %rdx
    00000294: 	subq	%fs:0x28, %rdx
    0000029d: 	jne	.Ltmp171 # Offset: 669
    000002a3: 	subq	start_time(%rip), %rax
    000002aa: 	pxor	%xmm0, %xmm0
    000002ae: 	movq	%rbp, %rdi
    000002b1: 	cvtsi2sd	%rax, %xmm0
    000002b6: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002be: 	addq	$0x48, %rsp
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp163:
    000002d8: 	movl	current_test(%rip), %edx
    000002de: 	movl	$0x1, %edi
    000002e3: 	xorl	%eax, %eax
    000002e5: 	addl	$0x1, %ebp
    000002e8: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r13d
    000002fb: 	cmpl	%r13d, %ebp
    000002fe: 	jge	.Ltmp157 # Offset: 766
    00000304: 	pxor	%xmm6, %xmm6
    00000308: 	movaps	DATAat0x2b700(%rip), %xmm7
    0000030f: 	pxor	%xmm3, %xmm3
    00000313: 	cvtsd2ss	init_value(%rip), %xmm6
    0000031b: 	movss	%xmm6, 0x8(%rsp)
    00000321: 	movaps	DATAat0x2b720(%rip), %xmm6
    00000328: 	jmp	.Ltmp164 # Offset: 808
.Ltmp159:
    0000032d: 	xorl	%eax, %eax
    0000032f: 	movaps	%xmm3, %xmm5
    00000332: 	movaps	%xmm3, %xmm4
    00000335: 	jmp	.Ltmp172 # Offset: 821
.Ltmp168:
    0000033a: 	movq	%rbx, %rdi
    0000033d: 	leaq	0x30(%rsp), %rsi
    00000342: 	xorl	%edx, %edx
    00000344: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 836
    00000349: 	movq	%rax, (%rbx)
    0000034c: 	movq	%rax, %rdi
    0000034f: 	movq	0x30(%rsp), %rax
    00000354: 	movq	%rax, 0x10(%rbx)
.Ltmp175:
    00000358: 	movq	%r12, %rdx
    0000035b: 	movq	%rbp, %rsi
    0000035e: 	callq	memcpy@PLT # Offset: 862
    00000363: 	movq	0x30(%rsp), %r12
    00000368: 	movq	(%rbx), %rdi
    0000036b: 	jmp	.Ltmp173 # Offset: 875
.Ltmp165:
    00000370: 	movq	0x10(%rsp), %rsi
    00000375: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 892
    00000381: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000388: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000396: 	jne	.Ltmp174 # Offset: 918
.Ltmp170:
    0000039c: 	movq	-0x8(%rdx), %rax
    000003a0: 	addq	$0x200, %rax
    000003a6: 	jmp	.Ltmp174 # Offset: 934
.Ltmp169:
    000003ab: 	testq	%r12, %r12
    000003ae: 	je	.Ltmp173 # Offset: 942
    000003b4: 	jmp	.Ltmp175 # Offset: 948
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp162:
    000003c0: 	movss	DATAat0x2b720(%rip), %xmm1
    000003c8: 	movaps	%xmm8, %xmm0
    000003cc: 	movss	DATAat0x2b900(%rip), %xmm2
    000003d4: 	movss	%xmm4, 0x1c(%rsp)
    000003da: 	movss	%xmm5, 0x18(%rsp)
    000003e0: 	callq	__mulsc3@PLT # Offset: 992
    000003e5: 	movss	0x1c(%rsp), %xmm4
    000003eb: 	movss	0x18(%rsp), %xmm5
    000003f1: 	movq	%xmm0, 0x28(%rsp)
    000003f7: 	movss	0x28(%rsp), %xmm1
    000003fd: 	movss	0x2c(%rsp), %xmm0
    00000403: 	jmp	.Ltmp176 # Offset: 1027
.Ltmp171:
    00000408: 	callq	__stack_chk_fail@PLT # Offset: 1032
.Ltmp167:
    0000040d: 	leaq	DATAat0x2b008(%rip), %rdi
    00000414: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1044
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE20custom_subtract_selfIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4a40
  Size        : 0x3df
  MaxSize     : 0x3e0
  Offset      : 0x4a40
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE20custom_subtract_selfIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp177 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	movl	%ebx, %r14d
    0000004e: 	pxor	%xmm6, %xmm6
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm1, %xmm1
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm6
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x5, %rax
    00000074: 	leaq	0x20(%r12,%rax), %r15
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp184:
    00000080: 	movaps	%xmm1, %xmm5
    00000083: 	movaps	%xmm1, %xmm4
    00000086: 	testl	%ebx, %ebx
    00000088: 	jle	.Ltmp178 # Offset: 136
    0000008e: 	cmpl	$0x2, 0xc(%rsp)
    00000093: 	jbe	.Ltmp179 # Offset: 147
    00000099: 	movq	%r12, %rax
    0000009c: 	movaps	%xmm1, %xmm5
    0000009f: 	movaps	%xmm1, %xmm4
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp180:
    000000a8: 	movups	(%rax), %xmm0
    000000ab: 	movups	0x10(%rax), %xmm7
    000000af: 	addq	$0x20, %rax
    000000b3: 	movaps	%xmm0, %xmm2
    000000b6: 	shufps	$0xdd, %xmm7, %xmm0
    000000ba: 	subps	%xmm0, %xmm0
    000000bd: 	shufps	$0x88, %xmm7, %xmm2
    000000c1: 	subps	%xmm2, %xmm2
    000000c4: 	addss	%xmm2, %xmm4
    000000c8: 	movaps	%xmm2, %xmm3
    000000cb: 	shufps	$0x55, %xmm2, %xmm3
    000000cf: 	addss	%xmm4, %xmm3
    000000d3: 	movaps	%xmm2, %xmm4
    000000d6: 	unpckhps	%xmm2, %xmm4
    000000d9: 	shufps	$0xff, %xmm2, %xmm2
    000000dd: 	addss	%xmm3, %xmm4
    000000e1: 	movaps	%xmm0, %xmm3
    000000e4: 	addss	%xmm5, %xmm3
    000000e8: 	movaps	%xmm0, %xmm5
    000000eb: 	unpckhps	%xmm0, %xmm5
    000000ee: 	addss	%xmm2, %xmm4
    000000f2: 	movaps	%xmm0, %xmm2
    000000f5: 	shufps	$0x55, %xmm0, %xmm2
    000000f9: 	addss	%xmm3, %xmm2
    000000fd: 	shufps	$0xff, %xmm0, %xmm0
    00000101: 	addss	%xmm2, %xmm5
    00000105: 	addss	%xmm0, %xmm5
    00000109: 	cmpq	%r15, %rax
    0000010c: 	jne	.Ltmp180 # Offset: 268
    0000010e: 	movl	%r14d, %eax
    00000111: 	cmpl	%ebx, %r14d
    00000114: 	je	.Ltmp178 # Offset: 276
.Ltmp192:
    00000116: 	movl	%ebx, %edx
    00000118: 	unpcklps	%xmm5, %xmm4
    0000011b: 	subl	%eax, %edx
    0000011d: 	leaq	(%r12,%rax,8), %rax
    00000121: 	movq	(%rax), %xmm0
    00000125: 	subps	%xmm0, %xmm0
    00000128: 	addps	%xmm4, %xmm0
    0000012b: 	cmpl	$0x1, %edx
    0000012e: 	je	.Ltmp181 # Offset: 302
    00000130: 	movq	0x8(%rax), %xmm2
    00000135: 	subps	%xmm2, %xmm2
    00000138: 	addps	%xmm2, %xmm0
    0000013b: 	cmpl	$0x2, %edx
    0000013e: 	je	.Ltmp181 # Offset: 318
    00000140: 	movq	0x10(%rax), %xmm2
    00000145: 	subps	%xmm2, %xmm2
    00000148: 	addps	%xmm2, %xmm0
.Ltmp181:
    0000014b: 	movaps	%xmm0, %xmm4
    0000014e: 	shufps	$0xe5, %xmm0, %xmm0
    00000152: 	movaps	%xmm0, %xmm5
.Ltmp178:
    00000155: 	movaps	%xmm6, %xmm7
    00000158: 	movss	DATAat0x2b900(%rip), %xmm2
    00000160: 	subss	%xmm6, %xmm7
    00000164: 	mulss	%xmm7, %xmm2
    00000168: 	movaps	%xmm7, %xmm0
    0000016b: 	mulss	%xmm1, %xmm0
    0000016f: 	addss	%xmm1, %xmm0
    00000173: 	ucomiss	%xmm0, %xmm2
    00000176: 	jp	.Ltmp182 # Offset: 374
.Ltmp196:
    0000017c: 	subss	%xmm0, %xmm5
    00000180: 	subss	%xmm2, %xmm4
    00000184: 	movss	%xmm6, 0x8(%rsp)
    0000018a: 	movss	%xmm4, 0x20(%rsp)
    00000190: 	movss	%xmm5, 0x24(%rsp)
    00000196: 	movq	0x20(%rsp), %xmm0
    0000019c: 	callq	cabsf@PLT # Offset: 412
    000001a1: 	movss	DATAat0x2b908(%rip), %xmm6
    000001a9: 	pxor	%xmm1, %xmm1
    000001ad: 	comiss	%xmm0, %xmm6
    000001b0: 	movss	0x8(%rsp), %xmm6
    000001b6: 	jbe	.Ltmp183 # Offset: 438
    000001bc: 	addl	$0x1, %ebp
    000001bf: 	cmpl	%r13d, %ebp
    000001c2: 	jl	.Ltmp184 # Offset: 450
.Ltmp177:
    000001c8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d6: 	subq	$0x20, %rax
    000001da: 	cmpq	%rax, %rbx
    000001dd: 	je	.Ltmp185 # Offset: 477
    000001e3: 	movq	0x10(%rsp), %rax
    000001e8: 	leaq	0x10(%rbx), %rdi
    000001ec: 	movq	%rdi, (%rbx)
    000001ef: 	movq	(%rax), %rbp
    000001f2: 	movq	0x8(%rax), %r12
    000001f6: 	movq	%rbp, %rax
    000001f9: 	addq	%r12, %rax
    000001fc: 	je	.Ltmp186 # Offset: 508
    000001fe: 	testq	%rbp, %rbp
    00000201: 	je	.Ltmp187 # Offset: 513
.Ltmp186:
    00000207: 	movq	%r12, 0x30(%rsp)
    0000020c: 	cmpq	$0xf, %r12
    00000210: 	ja	.Ltmp188 # Offset: 528
    00000216: 	cmpq	$0x1, %r12
    0000021a: 	jne	.Ltmp189 # Offset: 538
    00000220: 	movzbl	(%rbp), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp193:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp190 # Offset: 592
.Ltmp194:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x38(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp191 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000295: 	addq	$0x48, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp183:
    000002b0: 	movl	current_test(%rip), %edx
    000002b6: 	movl	$0x1, %edi
    000002bb: 	xorl	%eax, %eax
    000002bd: 	addl	$0x1, %ebp
    000002c0: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002c7: 	callq	__printf_chk@PLT # Offset: 711
    000002cc: 	movl	iterations(%rip), %r13d
    000002d3: 	cmpl	%r13d, %ebp
    000002d6: 	jge	.Ltmp177 # Offset: 726
    000002dc: 	pxor	%xmm6, %xmm6
    000002e0: 	pxor	%xmm1, %xmm1
    000002e4: 	cvtsd2ss	init_value(%rip), %xmm6
    000002ec: 	jmp	.Ltmp184 # Offset: 748
.Ltmp179:
    000002f1: 	xorl	%eax, %eax
    000002f3: 	movaps	%xmm1, %xmm5
    000002f6: 	movaps	%xmm1, %xmm4
    000002f9: 	jmp	.Ltmp192 # Offset: 761
.Ltmp188:
    000002fe: 	movq	%rbx, %rdi
    00000301: 	leaq	0x30(%rsp), %rsi
    00000306: 	xorl	%edx, %edx
    00000308: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 776
    0000030d: 	movq	%rax, (%rbx)
    00000310: 	movq	%rax, %rdi
    00000313: 	movq	0x30(%rsp), %rax
    00000318: 	movq	%rax, 0x10(%rbx)
.Ltmp195:
    0000031c: 	movq	%r12, %rdx
    0000031f: 	movq	%rbp, %rsi
    00000322: 	callq	memcpy@PLT # Offset: 802
    00000327: 	movq	0x30(%rsp), %r12
    0000032c: 	movq	(%rbx), %rdi
    0000032f: 	jmp	.Ltmp193 # Offset: 815
.Ltmp185:
    00000334: 	movq	0x10(%rsp), %rsi
    00000339: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000340: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 832
    00000345: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000034c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000353: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000035a: 	jne	.Ltmp194 # Offset: 858
.Ltmp190:
    00000360: 	movq	-0x8(%rdx), %rax
    00000364: 	addq	$0x200, %rax
    0000036a: 	jmp	.Ltmp194 # Offset: 874
.Ltmp189:
    0000036f: 	testq	%r12, %r12
    00000372: 	je	.Ltmp193 # Offset: 882
    00000378: 	jmp	.Ltmp195 # Offset: 888
    0000037a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp182:
    00000380: 	movss	DATAat0x2b900(%rip), %xmm2
    00000388: 	movaps	%xmm7, %xmm0
    0000038b: 	movaps	%xmm1, %xmm3
    0000038e: 	movss	%xmm6, 0x1c(%rsp)
    00000394: 	movss	%xmm4, 0x18(%rsp)
    0000039a: 	movss	%xmm5, 0x8(%rsp)
    000003a0: 	callq	__mulsc3@PLT # Offset: 928
    000003a5: 	movss	0x1c(%rsp), %xmm6
    000003ab: 	movss	0x18(%rsp), %xmm4
    000003b1: 	movq	%xmm0, 0x28(%rsp)
    000003b7: 	movss	0x8(%rsp), %xmm5
    000003bd: 	movss	0x28(%rsp), %xmm2
    000003c3: 	movss	0x2c(%rsp), %xmm0
    000003c9: 	jmp	.Ltmp196 # Offset: 969
.Ltmp191:
    000003ce: 	callq	__stack_chk_fail@PLT # Offset: 974
.Ltmp187:
    000003d3: 	leaq	DATAat0x2b008(%rip), %rdi
    000003da: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 986
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE20custom_subtract_selfIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x4e20
  Size        : 0x313
  MaxSize     : 0x320
  Offset      : 0x4e20
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp197 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm3
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	movapd	DATAat0x2b730(%rip), %xmm5
    0000005b: 	xorl	%ebx, %ebx
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000068: 	leaq	0x10(%r12,%rax), %r14
    0000006d: 	movsd	%xmm3, (%rsp)
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp202:
    00000078: 	pxor	%xmm4, %xmm4
    0000007c: 	movq	%r12, %rax
    0000007f: 	pxor	%xmm1, %xmm1
    00000083: 	movapd	%xmm4, %xmm6
    00000087: 	testl	%r13d, %r13d
    0000008a: 	jle	.Ltmp198 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp199:
    00000090: 	movupd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addpd	%xmm5, %xmm0
    0000009c: 	addpd	%xmm0, %xmm1
    000000a0: 	cmpq	%r14, %rax
    000000a3: 	jne	.Ltmp199 # Offset: 163
    000000a5: 	movapd	%xmm1, %xmm6
    000000a9: 	unpckhpd	%xmm1, %xmm1
    000000ad: 	movapd	%xmm1, %xmm4
.Ltmp198:
    000000b1: 	movsd	DATAat0x2b730(%rip), %xmm0
    000000b9: 	addsd	(%rsp), %xmm0
    000000be: 	pxor	%xmm1, %xmm1
    000000c2: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000ca: 	mulsd	%xmm0, %xmm2
    000000ce: 	mulsd	%xmm0, %xmm1
    000000d2: 	addsd	DATAat0x2b668(%rip), %xmm1
    000000da: 	ucomisd	%xmm1, %xmm2
    000000de: 	jp	.Ltmp200 # Offset: 222
.Ltmp213:
    000000e4: 	subsd	%xmm2, %xmm6
    000000e8: 	subsd	%xmm1, %xmm4
    000000ec: 	movapd	%xmm6, %xmm0
    000000f0: 	movapd	%xmm4, %xmm1
    000000f4: 	callq	cabs@PLT # Offset: 244
    000000f9: 	movsd	DATAat0x2b658(%rip), %xmm3
    00000101: 	movapd	DATAat0x2b730(%rip), %xmm5
    00000109: 	comisd	%xmm0, %xmm3
    0000010d: 	jbe	.Ltmp201 # Offset: 269
    00000113: 	addl	$0x1, %ebx
    00000116: 	cmpl	%ebp, %ebx
    00000118: 	jl	.Ltmp202 # Offset: 280
.Ltmp197:
    0000011e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000125: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000012c: 	subq	$0x20, %rax
    00000130: 	cmpq	%rax, %rbx
    00000133: 	je	.Ltmp203 # Offset: 307
    00000139: 	movq	0x8(%rsp), %rax
    0000013e: 	leaq	0x10(%rbx), %rdi
    00000142: 	movq	%rdi, (%rbx)
    00000145: 	movq	(%rax), %rbp
    00000148: 	movq	0x8(%rax), %r12
    0000014c: 	movq	%rbp, %rax
    0000014f: 	addq	%r12, %rax
    00000152: 	je	.Ltmp204 # Offset: 338
    00000154: 	testq	%rbp, %rbp
    00000157: 	je	.Ltmp205 # Offset: 343
.Ltmp204:
    0000015d: 	movq	%r12, 0x20(%rsp)
    00000162: 	cmpq	$0xf, %r12
    00000166: 	ja	.Ltmp206 # Offset: 358
    0000016c: 	cmpq	$0x1, %r12
    00000170: 	jne	.Ltmp207 # Offset: 368
    00000176: 	movzbl	(%rbp), %eax
    0000017a: 	movb	%al, 0x10(%rbx)
.Ltmp210:
    0000017d: 	movq	%r12, 0x8(%rbx)
    00000181: 	movb	$0x0, (%rdi,%r12)
    00000186: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000194: 	addq	$0x20, %rax
    00000198: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a6: 	je	.Ltmp208 # Offset: 422
.Ltmp211:
    000001ac: 	movq	-0x20(%rax), %rbp
    000001b0: 	callq	clock@PLT # Offset: 432
    000001b5: 	movq	%rax, end_time(%rip)
    000001bc: 	movq	0x28(%rsp), %rdx
    000001c1: 	subq	%fs:0x28, %rdx
    000001ca: 	jne	.Ltmp209 # Offset: 458
    000001d0: 	subq	start_time(%rip), %rax
    000001d7: 	pxor	%xmm0, %xmm0
    000001db: 	movq	%rbp, %rdi
    000001de: 	cvtsi2sd	%rax, %xmm0
    000001e3: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001eb: 	addq	$0x38, %rsp
    000001ef: 	popq	%rbx
    000001f0: 	popq	%rbp
    000001f1: 	popq	%r12
    000001f3: 	popq	%r13
    000001f5: 	popq	%r14
    000001f7: 	popq	%r15
    000001f9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp201:
    00000200: 	movl	current_test(%rip), %edx
    00000206: 	movq	%r15, %rsi
    00000209: 	movl	$0x1, %edi
    0000020e: 	xorl	%eax, %eax
    00000210: 	addl	$0x1, %ebx
    00000213: 	callq	__printf_chk@PLT # Offset: 531
    00000218: 	movl	iterations(%rip), %ebp
    0000021e: 	cmpl	%ebp, %ebx
    00000220: 	jge	.Ltmp197 # Offset: 544
    00000226: 	movsd	init_value(%rip), %xmm7
    0000022e: 	movapd	DATAat0x2b730(%rip), %xmm5
    00000236: 	movsd	%xmm7, (%rsp)
    0000023b: 	jmp	.Ltmp202 # Offset: 571
.Ltmp206:
    00000240: 	movq	%rbx, %rdi
    00000243: 	leaq	0x20(%rsp), %rsi
    00000248: 	xorl	%edx, %edx
    0000024a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 586
    0000024f: 	movq	%rax, (%rbx)
    00000252: 	movq	%rax, %rdi
    00000255: 	movq	0x20(%rsp), %rax
    0000025a: 	movq	%rax, 0x10(%rbx)
.Ltmp212:
    0000025e: 	movq	%r12, %rdx
    00000261: 	movq	%rbp, %rsi
    00000264: 	callq	memcpy@PLT # Offset: 612
    00000269: 	movq	0x20(%rsp), %r12
    0000026e: 	movq	(%rbx), %rdi
    00000271: 	jmp	.Ltmp210 # Offset: 625
.Ltmp203:
    00000276: 	movq	0x8(%rsp), %rsi
    0000027b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000282: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 642
    00000287: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000295: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029c: 	jne	.Ltmp211 # Offset: 668
.Ltmp208:
    000002a2: 	movq	-0x8(%rdx), %rax
    000002a6: 	addq	$0x200, %rax
    000002ac: 	jmp	.Ltmp211 # Offset: 684
.Ltmp207:
    000002b1: 	testq	%r12, %r12
    000002b4: 	je	.Ltmp210 # Offset: 692
    000002ba: 	jmp	.Ltmp212 # Offset: 698
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp200:
    000002c0: 	movq	DATAat0x2b648(%rip), %rax
    000002c7: 	pxor	%xmm3, %xmm3
    000002cb: 	movsd	%xmm4, 0x18(%rsp)
    000002d1: 	movsd	%xmm6, 0x10(%rsp)
    000002d7: 	movq	%rax, %xmm2
    000002dc: 	movq	DATAat0x2b738(%rip), %rax
    000002e3: 	movq	%rax, %xmm1
    000002e8: 	callq	__muldc3@PLT # Offset: 744
    000002ed: 	movsd	0x18(%rsp), %xmm4
    000002f3: 	movsd	0x10(%rsp), %xmm6
    000002f9: 	movapd	%xmm0, %xmm2
    000002fd: 	jmp	.Ltmp213 # Offset: 765
.Ltmp209:
    00000302: 	callq	__stack_chk_fail@PLT # Offset: 770
.Ltmp205:
    00000307: 	leaq	DATAat0x2b008(%rip), %rdi
    0000030e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 782
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x5140
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0x5140
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp214 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	pxor	%xmm7, %xmm7
    0000004f: 	movl	%ebx, %r14d
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm3, %xmm3
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm7
    0000006d: 	movaps	DATAat0x2b720(%rip), %xmm6
    00000074: 	movss	%xmm7, 0x8(%rsp)
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movaps	DATAat0x2b700(%rip), %xmm7
    00000084: 	shlq	$0x5, %rax
    00000088: 	leaq	0x20(%r12,%rax), %r15
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp221:
    00000090: 	movaps	%xmm3, %xmm5
    00000093: 	movaps	%xmm3, %xmm4
    00000096: 	testl	%ebx, %ebx
    00000098: 	jle	.Ltmp215 # Offset: 152
    0000009e: 	cmpl	$0x2, 0xc(%rsp)
    000000a3: 	jbe	.Ltmp216 # Offset: 163
    000000a9: 	movq	%r12, %rax
    000000ac: 	movaps	%xmm3, %xmm5
    000000af: 	movaps	%xmm3, %xmm4
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp217:
    000000b8: 	movups	(%rax), %xmm0
    000000bb: 	movups	0x10(%rax), %xmm2
    000000bf: 	addq	$0x20, %rax
    000000c3: 	movaps	%xmm0, %xmm1
    000000c6: 	shufps	$0xdd, %xmm2, %xmm0
    000000ca: 	addps	%xmm6, %xmm0
    000000cd: 	shufps	$0x88, %xmm2, %xmm1
    000000d1: 	addps	%xmm7, %xmm1
    000000d4: 	addss	%xmm1, %xmm4
    000000d8: 	movaps	%xmm1, %xmm2
    000000db: 	shufps	$0x55, %xmm1, %xmm2
    000000df: 	addss	%xmm4, %xmm2
    000000e3: 	movaps	%xmm1, %xmm4
    000000e6: 	unpckhps	%xmm1, %xmm4
    000000e9: 	shufps	$0xff, %xmm1, %xmm1
    000000ed: 	addss	%xmm2, %xmm4
    000000f1: 	movaps	%xmm0, %xmm2
    000000f4: 	addss	%xmm5, %xmm2
    000000f8: 	movaps	%xmm0, %xmm5
    000000fb: 	unpckhps	%xmm0, %xmm5
    000000fe: 	addss	%xmm1, %xmm4
    00000102: 	movaps	%xmm0, %xmm1
    00000105: 	shufps	$0x55, %xmm0, %xmm1
    00000109: 	addss	%xmm2, %xmm1
    0000010d: 	shufps	$0xff, %xmm0, %xmm0
    00000111: 	addss	%xmm1, %xmm5
    00000115: 	addss	%xmm0, %xmm5
    00000119: 	cmpq	%r15, %rax
    0000011c: 	jne	.Ltmp217 # Offset: 284
    0000011e: 	movl	%r14d, %eax
    00000121: 	cmpl	%ebx, %r14d
    00000124: 	je	.Ltmp215 # Offset: 292
.Ltmp229:
    00000126: 	movq	DATAat0x2b660(%rip), %xmm2
    0000012e: 	movl	%ebx, %edx
    00000130: 	unpcklps	%xmm5, %xmm4
    00000133: 	subl	%eax, %edx
    00000135: 	leaq	(%r12,%rax,8), %rax
    00000139: 	movq	(%rax), %xmm0
    0000013d: 	addps	%xmm2, %xmm0
    00000140: 	addps	%xmm4, %xmm0
    00000143: 	cmpl	$0x1, %edx
    00000146: 	je	.Ltmp218 # Offset: 326
    00000148: 	movq	0x8(%rax), %xmm1
    0000014d: 	addps	%xmm2, %xmm1
    00000150: 	addps	%xmm1, %xmm0
    00000153: 	cmpl	$0x2, %edx
    00000156: 	je	.Ltmp218 # Offset: 342
    00000158: 	movq	0x10(%rax), %xmm1
    0000015d: 	addps	%xmm2, %xmm1
    00000160: 	addps	%xmm1, %xmm0
.Ltmp218:
    00000163: 	movaps	%xmm0, %xmm4
    00000166: 	shufps	$0xe5, %xmm0, %xmm0
    0000016a: 	movaps	%xmm0, %xmm5
.Ltmp215:
    0000016d: 	movss	DATAat0x2b700(%rip), %xmm8
    00000176: 	addss	0x8(%rsp), %xmm8
    0000017d: 	movss	DATAat0x2b900(%rip), %xmm1
    00000185: 	mulss	%xmm8, %xmm1
    0000018a: 	movaps	%xmm8, %xmm0
    0000018e: 	mulss	%xmm3, %xmm0
    00000192: 	addss	DATAat0x2b90c(%rip), %xmm0
    0000019a: 	ucomiss	%xmm0, %xmm1
    0000019d: 	jp	.Ltmp219 # Offset: 413
.Ltmp233:
    000001a3: 	subss	%xmm0, %xmm5
    000001a7: 	subss	%xmm1, %xmm4
    000001ab: 	movss	%xmm5, 0x24(%rsp)
    000001b1: 	movss	%xmm4, 0x20(%rsp)
    000001b7: 	movq	0x20(%rsp), %xmm0
    000001bd: 	callq	cabsf@PLT # Offset: 445
    000001c2: 	movss	DATAat0x2b908(%rip), %xmm3
    000001ca: 	movaps	DATAat0x2b700(%rip), %xmm7
    000001d1: 	movaps	DATAat0x2b720(%rip), %xmm6
    000001d8: 	comiss	%xmm0, %xmm3
    000001db: 	pxor	%xmm3, %xmm3
    000001df: 	jbe	.Ltmp220 # Offset: 479
    000001e5: 	addl	$0x1, %ebp
    000001e8: 	cmpl	%r13d, %ebp
    000001eb: 	jl	.Ltmp221 # Offset: 491
.Ltmp214:
    000001f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001ff: 	subq	$0x20, %rax
    00000203: 	cmpq	%rax, %rbx
    00000206: 	je	.Ltmp222 # Offset: 518
    0000020c: 	movq	0x10(%rsp), %rax
    00000211: 	leaq	0x10(%rbx), %rdi
    00000215: 	movq	%rdi, (%rbx)
    00000218: 	movq	(%rax), %rbp
    0000021b: 	movq	0x8(%rax), %r12
    0000021f: 	movq	%rbp, %rax
    00000222: 	addq	%r12, %rax
    00000225: 	je	.Ltmp223 # Offset: 549
    00000227: 	testq	%rbp, %rbp
    0000022a: 	je	.Ltmp224 # Offset: 554
.Ltmp223:
    00000230: 	movq	%r12, 0x30(%rsp)
    00000235: 	cmpq	$0xf, %r12
    00000239: 	ja	.Ltmp225 # Offset: 569
    0000023f: 	cmpq	$0x1, %r12
    00000243: 	jne	.Ltmp226 # Offset: 579
    00000249: 	movzbl	(%rbp), %eax
    0000024d: 	movb	%al, 0x10(%rbx)
.Ltmp230:
    00000250: 	movq	%r12, 0x8(%rbx)
    00000254: 	movb	$0x0, (%rdi,%r12)
    00000259: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000260: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000267: 	addq	$0x20, %rax
    0000026b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000272: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000279: 	je	.Ltmp227 # Offset: 633
.Ltmp231:
    0000027f: 	movq	-0x20(%rax), %rbp
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	movq	%rax, end_time(%rip)
    0000028f: 	movq	0x38(%rsp), %rdx
    00000294: 	subq	%fs:0x28, %rdx
    0000029d: 	jne	.Ltmp228 # Offset: 669
    000002a3: 	subq	start_time(%rip), %rax
    000002aa: 	pxor	%xmm0, %xmm0
    000002ae: 	movq	%rbp, %rdi
    000002b1: 	cvtsi2sd	%rax, %xmm0
    000002b6: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002be: 	addq	$0x48, %rsp
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp220:
    000002d8: 	movl	current_test(%rip), %edx
    000002de: 	movl	$0x1, %edi
    000002e3: 	xorl	%eax, %eax
    000002e5: 	addl	$0x1, %ebp
    000002e8: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r13d
    000002fb: 	cmpl	%r13d, %ebp
    000002fe: 	jge	.Ltmp214 # Offset: 766
    00000304: 	pxor	%xmm6, %xmm6
    00000308: 	movaps	DATAat0x2b700(%rip), %xmm7
    0000030f: 	pxor	%xmm3, %xmm3
    00000313: 	cvtsd2ss	init_value(%rip), %xmm6
    0000031b: 	movss	%xmm6, 0x8(%rsp)
    00000321: 	movaps	DATAat0x2b720(%rip), %xmm6
    00000328: 	jmp	.Ltmp221 # Offset: 808
.Ltmp216:
    0000032d: 	xorl	%eax, %eax
    0000032f: 	movaps	%xmm3, %xmm5
    00000332: 	movaps	%xmm3, %xmm4
    00000335: 	jmp	.Ltmp229 # Offset: 821
.Ltmp225:
    0000033a: 	movq	%rbx, %rdi
    0000033d: 	leaq	0x30(%rsp), %rsi
    00000342: 	xorl	%edx, %edx
    00000344: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 836
    00000349: 	movq	%rax, (%rbx)
    0000034c: 	movq	%rax, %rdi
    0000034f: 	movq	0x30(%rsp), %rax
    00000354: 	movq	%rax, 0x10(%rbx)
.Ltmp232:
    00000358: 	movq	%r12, %rdx
    0000035b: 	movq	%rbp, %rsi
    0000035e: 	callq	memcpy@PLT # Offset: 862
    00000363: 	movq	0x30(%rsp), %r12
    00000368: 	movq	(%rbx), %rdi
    0000036b: 	jmp	.Ltmp230 # Offset: 875
.Ltmp222:
    00000370: 	movq	0x10(%rsp), %rsi
    00000375: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 892
    00000381: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000388: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000396: 	jne	.Ltmp231 # Offset: 918
.Ltmp227:
    0000039c: 	movq	-0x8(%rdx), %rax
    000003a0: 	addq	$0x200, %rax
    000003a6: 	jmp	.Ltmp231 # Offset: 934
.Ltmp226:
    000003ab: 	testq	%r12, %r12
    000003ae: 	je	.Ltmp230 # Offset: 942
    000003b4: 	jmp	.Ltmp232 # Offset: 948
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp219:
    000003c0: 	movss	DATAat0x2b720(%rip), %xmm1
    000003c8: 	movaps	%xmm8, %xmm0
    000003cc: 	movss	DATAat0x2b900(%rip), %xmm2
    000003d4: 	movss	%xmm4, 0x1c(%rsp)
    000003da: 	movss	%xmm5, 0x18(%rsp)
    000003e0: 	callq	__mulsc3@PLT # Offset: 992
    000003e5: 	movss	0x1c(%rsp), %xmm4
    000003eb: 	movss	0x18(%rsp), %xmm5
    000003f1: 	movq	%xmm0, 0x28(%rsp)
    000003f7: 	movss	0x28(%rsp), %xmm1
    000003fd: 	movss	0x2c(%rsp), %xmm0
    00000403: 	jmp	.Ltmp233 # Offset: 1027
.Ltmp228:
    00000408: 	callq	__stack_chk_fail@PLT # Offset: 1032
.Ltmp224:
    0000040d: 	leaq	DATAat0x2b008(%rip), %rdi
    00000414: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1044
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x5560
  Size        : 0x313
  MaxSize     : 0x320
  Offset      : 0x5560
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp234 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm3
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	movapd	DATAat0x2b740(%rip), %xmm5
    0000005b: 	xorl	%ebx, %ebx
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000068: 	leaq	0x10(%r12,%rax), %r14
    0000006d: 	movsd	%xmm3, (%rsp)
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp239:
    00000078: 	pxor	%xmm4, %xmm4
    0000007c: 	movq	%r12, %rax
    0000007f: 	pxor	%xmm1, %xmm1
    00000083: 	movapd	%xmm4, %xmm6
    00000087: 	testl	%r13d, %r13d
    0000008a: 	jle	.Ltmp235 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp236:
    00000090: 	movupd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addpd	%xmm5, %xmm0
    0000009c: 	addpd	%xmm0, %xmm1
    000000a0: 	cmpq	%r14, %rax
    000000a3: 	jne	.Ltmp236 # Offset: 163
    000000a5: 	movapd	%xmm1, %xmm6
    000000a9: 	unpckhpd	%xmm1, %xmm1
    000000ad: 	movapd	%xmm1, %xmm4
.Ltmp235:
    000000b1: 	movsd	DATAat0x2b740(%rip), %xmm0
    000000b9: 	addsd	(%rsp), %xmm0
    000000be: 	pxor	%xmm1, %xmm1
    000000c2: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000ca: 	mulsd	%xmm0, %xmm2
    000000ce: 	mulsd	%xmm0, %xmm1
    000000d2: 	addsd	DATAat0x2b670(%rip), %xmm1
    000000da: 	ucomisd	%xmm1, %xmm2
    000000de: 	jp	.Ltmp237 # Offset: 222
.Ltmp250:
    000000e4: 	subsd	%xmm2, %xmm6
    000000e8: 	subsd	%xmm1, %xmm4
    000000ec: 	movapd	%xmm6, %xmm0
    000000f0: 	movapd	%xmm4, %xmm1
    000000f4: 	callq	cabs@PLT # Offset: 244
    000000f9: 	movsd	DATAat0x2b658(%rip), %xmm3
    00000101: 	movapd	DATAat0x2b740(%rip), %xmm5
    00000109: 	comisd	%xmm0, %xmm3
    0000010d: 	jbe	.Ltmp238 # Offset: 269
    00000113: 	addl	$0x1, %ebx
    00000116: 	cmpl	%ebp, %ebx
    00000118: 	jl	.Ltmp239 # Offset: 280
.Ltmp234:
    0000011e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000125: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000012c: 	subq	$0x20, %rax
    00000130: 	cmpq	%rax, %rbx
    00000133: 	je	.Ltmp240 # Offset: 307
    00000139: 	movq	0x8(%rsp), %rax
    0000013e: 	leaq	0x10(%rbx), %rdi
    00000142: 	movq	%rdi, (%rbx)
    00000145: 	movq	(%rax), %rbp
    00000148: 	movq	0x8(%rax), %r12
    0000014c: 	movq	%rbp, %rax
    0000014f: 	addq	%r12, %rax
    00000152: 	je	.Ltmp241 # Offset: 338
    00000154: 	testq	%rbp, %rbp
    00000157: 	je	.Ltmp242 # Offset: 343
.Ltmp241:
    0000015d: 	movq	%r12, 0x20(%rsp)
    00000162: 	cmpq	$0xf, %r12
    00000166: 	ja	.Ltmp243 # Offset: 358
    0000016c: 	cmpq	$0x1, %r12
    00000170: 	jne	.Ltmp244 # Offset: 368
    00000176: 	movzbl	(%rbp), %eax
    0000017a: 	movb	%al, 0x10(%rbx)
.Ltmp247:
    0000017d: 	movq	%r12, 0x8(%rbx)
    00000181: 	movb	$0x0, (%rdi,%r12)
    00000186: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000194: 	addq	$0x20, %rax
    00000198: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a6: 	je	.Ltmp245 # Offset: 422
.Ltmp248:
    000001ac: 	movq	-0x20(%rax), %rbp
    000001b0: 	callq	clock@PLT # Offset: 432
    000001b5: 	movq	%rax, end_time(%rip)
    000001bc: 	movq	0x28(%rsp), %rdx
    000001c1: 	subq	%fs:0x28, %rdx
    000001ca: 	jne	.Ltmp246 # Offset: 458
    000001d0: 	subq	start_time(%rip), %rax
    000001d7: 	pxor	%xmm0, %xmm0
    000001db: 	movq	%rbp, %rdi
    000001de: 	cvtsi2sd	%rax, %xmm0
    000001e3: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001eb: 	addq	$0x38, %rsp
    000001ef: 	popq	%rbx
    000001f0: 	popq	%rbp
    000001f1: 	popq	%r12
    000001f3: 	popq	%r13
    000001f5: 	popq	%r14
    000001f7: 	popq	%r15
    000001f9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp238:
    00000200: 	movl	current_test(%rip), %edx
    00000206: 	movq	%r15, %rsi
    00000209: 	movl	$0x1, %edi
    0000020e: 	xorl	%eax, %eax
    00000210: 	addl	$0x1, %ebx
    00000213: 	callq	__printf_chk@PLT # Offset: 531
    00000218: 	movl	iterations(%rip), %ebp
    0000021e: 	cmpl	%ebp, %ebx
    00000220: 	jge	.Ltmp234 # Offset: 544
    00000226: 	movsd	init_value(%rip), %xmm7
    0000022e: 	movapd	DATAat0x2b740(%rip), %xmm5
    00000236: 	movsd	%xmm7, (%rsp)
    0000023b: 	jmp	.Ltmp239 # Offset: 571
.Ltmp243:
    00000240: 	movq	%rbx, %rdi
    00000243: 	leaq	0x20(%rsp), %rsi
    00000248: 	xorl	%edx, %edx
    0000024a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 586
    0000024f: 	movq	%rax, (%rbx)
    00000252: 	movq	%rax, %rdi
    00000255: 	movq	0x20(%rsp), %rax
    0000025a: 	movq	%rax, 0x10(%rbx)
.Ltmp249:
    0000025e: 	movq	%r12, %rdx
    00000261: 	movq	%rbp, %rsi
    00000264: 	callq	memcpy@PLT # Offset: 612
    00000269: 	movq	0x20(%rsp), %r12
    0000026e: 	movq	(%rbx), %rdi
    00000271: 	jmp	.Ltmp247 # Offset: 625
.Ltmp240:
    00000276: 	movq	0x8(%rsp), %rsi
    0000027b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000282: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 642
    00000287: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000295: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029c: 	jne	.Ltmp248 # Offset: 668
.Ltmp245:
    000002a2: 	movq	-0x8(%rdx), %rax
    000002a6: 	addq	$0x200, %rax
    000002ac: 	jmp	.Ltmp248 # Offset: 684
.Ltmp244:
    000002b1: 	testq	%r12, %r12
    000002b4: 	je	.Ltmp247 # Offset: 692
    000002ba: 	jmp	.Ltmp249 # Offset: 698
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp237:
    000002c0: 	movq	DATAat0x2b648(%rip), %rax
    000002c7: 	pxor	%xmm3, %xmm3
    000002cb: 	movsd	%xmm4, 0x18(%rsp)
    000002d1: 	movsd	%xmm6, 0x10(%rsp)
    000002d7: 	movq	%rax, %xmm2
    000002dc: 	movq	DATAat0x2b730(%rip), %rax
    000002e3: 	movq	%rax, %xmm1
    000002e8: 	callq	__muldc3@PLT # Offset: 744
    000002ed: 	movsd	0x18(%rsp), %xmm4
    000002f3: 	movsd	0x10(%rsp), %xmm6
    000002f9: 	movapd	%xmm0, %xmm2
    000002fd: 	jmp	.Ltmp250 # Offset: 765
.Ltmp246:
    00000302: 	callq	__stack_chk_fail@PLT # Offset: 770
.Ltmp242:
    00000307: 	leaq	DATAat0x2b008(%rip), %rdi
    0000030e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 782
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x5880
  Size        : 0x2fb
  MaxSize     : 0x300
  Offset      : 0x5880
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp251 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm7
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	xorl	%ebx, %ebx
    00000055: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%r12,%rax), %r14
    00000065: 	movsd	%xmm7, (%rsp)
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp256:
    00000070: 	pxor	%xmm1, %xmm1
    00000074: 	pxor	%xmm4, %xmm4
    00000078: 	movq	%r12, %rax
    0000007b: 	movapd	%xmm1, %xmm2
    0000007f: 	movapd	%xmm4, %xmm5
    00000083: 	testl	%r13d, %r13d
    00000086: 	jle	.Ltmp252 # Offset: 134
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp253:
    00000090: 	movupd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addpd	%xmm2, %xmm0
    0000009c: 	addpd	%xmm0, %xmm1
    000000a0: 	cmpq	%r14, %rax
    000000a3: 	jne	.Ltmp253 # Offset: 163
    000000a5: 	movapd	%xmm1, %xmm5
    000000a9: 	unpckhpd	%xmm1, %xmm1
    000000ad: 	movapd	%xmm1, %xmm4
.Ltmp252:
    000000b1: 	pxor	%xmm0, %xmm0
    000000b5: 	addsd	(%rsp), %xmm0
    000000ba: 	pxor	%xmm1, %xmm1
    000000be: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000c6: 	pxor	%xmm7, %xmm7
    000000ca: 	mulsd	%xmm0, %xmm1
    000000ce: 	mulsd	%xmm0, %xmm2
    000000d2: 	addsd	%xmm7, %xmm1
    000000d6: 	ucomisd	%xmm1, %xmm2
    000000da: 	jp	.Ltmp254 # Offset: 218
.Ltmp267:
    000000e0: 	subsd	%xmm2, %xmm5
    000000e4: 	subsd	%xmm1, %xmm4
    000000e8: 	movapd	%xmm5, %xmm0
    000000ec: 	movapd	%xmm4, %xmm1
    000000f0: 	callq	cabs@PLT # Offset: 240
    000000f5: 	movsd	DATAat0x2b658(%rip), %xmm3
    000000fd: 	comisd	%xmm0, %xmm3
    00000101: 	jbe	.Ltmp255 # Offset: 257
    00000107: 	addl	$0x1, %ebx
    0000010a: 	cmpl	%ebp, %ebx
    0000010c: 	jl	.Ltmp256 # Offset: 268
.Ltmp251:
    00000112: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000119: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000120: 	subq	$0x20, %rax
    00000124: 	cmpq	%rax, %rbx
    00000127: 	je	.Ltmp257 # Offset: 295
    0000012d: 	movq	0x8(%rsp), %rax
    00000132: 	leaq	0x10(%rbx), %rdi
    00000136: 	movq	%rdi, (%rbx)
    00000139: 	movq	(%rax), %rbp
    0000013c: 	movq	0x8(%rax), %r12
    00000140: 	movq	%rbp, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp258 # Offset: 326
    00000148: 	testq	%rbp, %rbp
    0000014b: 	je	.Ltmp259 # Offset: 331
.Ltmp258:
    00000151: 	movq	%r12, 0x20(%rsp)
    00000156: 	cmpq	$0xf, %r12
    0000015a: 	ja	.Ltmp260 # Offset: 346
    00000160: 	cmpq	$0x1, %r12
    00000164: 	jne	.Ltmp261 # Offset: 356
    0000016a: 	movzbl	(%rbp), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp264:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp262 # Offset: 410
.Ltmp265:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x28(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp263 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001df: 	addq	$0x38, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	popq	%r14
    000001eb: 	popq	%r15
    000001ed: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp255:
    000001f8: 	movl	current_test(%rip), %edx
    000001fe: 	movq	%r15, %rsi
    00000201: 	movl	$0x1, %edi
    00000206: 	xorl	%eax, %eax
    00000208: 	addl	$0x1, %ebx
    0000020b: 	callq	__printf_chk@PLT # Offset: 523
    00000210: 	movl	iterations(%rip), %ebp
    00000216: 	cmpl	%ebp, %ebx
    00000218: 	jge	.Ltmp251 # Offset: 536
    0000021e: 	movsd	init_value(%rip), %xmm6
    00000226: 	movsd	%xmm6, (%rsp)
    0000022b: 	jmp	.Ltmp256 # Offset: 555
.Ltmp260:
    00000230: 	movq	%rbx, %rdi
    00000233: 	leaq	0x20(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%rbx)
    00000242: 	movq	%rax, %rdi
    00000245: 	movq	0x20(%rsp), %rax
    0000024a: 	movq	%rax, 0x10(%rbx)
.Ltmp266:
    0000024e: 	movq	%r12, %rdx
    00000251: 	movq	%rbp, %rsi
    00000254: 	callq	memcpy@PLT # Offset: 596
    00000259: 	movq	0x20(%rsp), %r12
    0000025e: 	movq	(%rbx), %rdi
    00000261: 	jmp	.Ltmp264 # Offset: 609
.Ltmp257:
    00000266: 	movq	0x8(%rsp), %rsi
    0000026b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000272: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 626
    00000277: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000285: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028c: 	jne	.Ltmp265 # Offset: 652
.Ltmp262:
    00000292: 	movq	-0x8(%rdx), %rax
    00000296: 	addq	$0x200, %rax
    0000029c: 	jmp	.Ltmp265 # Offset: 668
.Ltmp261:
    000002a1: 	testq	%r12, %r12
    000002a4: 	je	.Ltmp264 # Offset: 676
    000002aa: 	jmp	.Ltmp266 # Offset: 682
    000002ac: 	nopl	(%rax) # Size: 4
.Ltmp254:
    000002b0: 	movq	DATAat0x2b648(%rip), %rax
    000002b7: 	pxor	%xmm3, %xmm3
    000002bb: 	movsd	%xmm4, 0x18(%rsp)
    000002c1: 	movapd	%xmm3, %xmm1
    000002c5: 	movsd	%xmm5, 0x10(%rsp)
    000002cb: 	movq	%rax, %xmm2
    000002d0: 	callq	__muldc3@PLT # Offset: 720
    000002d5: 	movsd	0x18(%rsp), %xmm4
    000002db: 	movsd	0x10(%rsp), %xmm5
    000002e1: 	movapd	%xmm0, %xmm2
    000002e5: 	jmp	.Ltmp267 # Offset: 741
.Ltmp263:
    000002ea: 	callq	__stack_chk_fail@PLT # Offset: 746
.Ltmp259:
    000002ef: 	leaq	DATAat0x2b008(%rip), %rdi
    000002f6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 758
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE17custom_times_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x5b80
  Size        : 0x3ac
  MaxSize     : 0x3b0
  Offset      : 0x5b80
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE17custom_times_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x38(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp268 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm6
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	xorl	%ebx, %ebx
    00000055: 	pxor	%xmm3, %xmm3
    00000059: 	shlq	$0x4, %rax
    0000005d: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000064: 	leaq	0x10(%r12,%rax), %r14
    00000069: 	movsd	%xmm6, 0x8(%rsp)
    0000006f: 	nop # Size: 1
.Ltmp275:
    00000070: 	movq	%r12, %rax
    00000073: 	movapd	%xmm3, %xmm6
    00000077: 	movapd	%xmm3, %xmm5
    0000007b: 	testl	%r13d, %r13d
    0000007e: 	jle	.Ltmp269 # Offset: 126
.Ltmp271:
    00000080: 	movsd	(%rax), %xmm7
    00000084: 	movsd	0x8(%rax), %xmm1
    00000089: 	movapd	%xmm7, %xmm2
    0000008d: 	movapd	%xmm1, %xmm0
    00000091: 	mulsd	%xmm3, %xmm2
    00000095: 	mulsd	%xmm3, %xmm0
    00000099: 	movapd	%xmm2, %xmm4
    0000009d: 	subsd	%xmm0, %xmm4
    000000a1: 	addsd	%xmm2, %xmm0
    000000a5: 	ucomisd	%xmm4, %xmm0
    000000a9: 	jp	.Ltmp270 # Offset: 169
    000000af: 	addq	$0x10, %rax
    000000b3: 	addsd	%xmm4, %xmm5
    000000b7: 	addsd	%xmm0, %xmm6
    000000bb: 	cmpq	%r14, %rax
    000000be: 	jne	.Ltmp271 # Offset: 190
.Ltmp269:
    000000c0: 	movsd	0x8(%rsp), %xmm4
    000000c6: 	mulsd	%xmm3, %xmm4
    000000ca: 	movapd	%xmm4, %xmm1
    000000ce: 	addsd	%xmm3, %xmm1
    000000d2: 	ucomisd	%xmm1, %xmm4
    000000d6: 	jp	.Ltmp272 # Offset: 214
.Ltmp288:
    000000dc: 	movsd	DATAat0x2b648(%rip), %xmm0
    000000e4: 	movapd	%xmm1, %xmm2
    000000e8: 	movsd	DATAat0x2b648(%rip), %xmm7
    000000f0: 	mulsd	%xmm3, %xmm2
    000000f4: 	mulsd	%xmm4, %xmm0
    000000f8: 	mulsd	%xmm1, %xmm7
    000000fc: 	subsd	%xmm2, %xmm0
    00000100: 	movapd	%xmm4, %xmm2
    00000104: 	mulsd	%xmm3, %xmm2
    00000108: 	addsd	%xmm7, %xmm2
    0000010c: 	ucomisd	%xmm2, %xmm0
    00000110: 	jp	.Ltmp273 # Offset: 272
.Ltmp287:
    00000116: 	subsd	%xmm0, %xmm5
    0000011a: 	subsd	%xmm2, %xmm6
    0000011e: 	movapd	%xmm5, %xmm0
    00000122: 	movapd	%xmm6, %xmm1
    00000126: 	callq	cabs@PLT # Offset: 294
    0000012b: 	movsd	DATAat0x2b658(%rip), %xmm5
    00000133: 	pxor	%xmm3, %xmm3
    00000137: 	comisd	%xmm0, %xmm5
    0000013b: 	jbe	.Ltmp274 # Offset: 315
    00000141: 	addl	$0x1, %ebx
    00000144: 	cmpl	%ebp, %ebx
    00000146: 	jl	.Ltmp275 # Offset: 326
.Ltmp268:
    0000014c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000153: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000015a: 	subq	$0x20, %rax
    0000015e: 	cmpq	%rax, %rbx
    00000161: 	je	.Ltmp276 # Offset: 353
    00000167: 	movq	0x10(%rsp), %rax
    0000016c: 	leaq	0x10(%rbx), %rdi
    00000170: 	movq	%rdi, (%rbx)
    00000173: 	movq	(%rax), %rbp
    00000176: 	movq	0x8(%rax), %r12
    0000017a: 	movq	%rbp, %rax
    0000017d: 	addq	%r12, %rax
    00000180: 	je	.Ltmp277 # Offset: 384
    00000182: 	testq	%rbp, %rbp
    00000185: 	je	.Ltmp278 # Offset: 389
.Ltmp277:
    0000018b: 	movq	%r12, 0x30(%rsp)
    00000190: 	cmpq	$0xf, %r12
    00000194: 	ja	.Ltmp279 # Offset: 404
    0000019a: 	cmpq	$0x1, %r12
    0000019e: 	jne	.Ltmp280 # Offset: 414
    000001a4: 	movzbl	(%rbp), %eax
    000001a8: 	movb	%al, 0x10(%rbx)
.Ltmp283:
    000001ab: 	movq	%r12, 0x8(%rbx)
    000001af: 	movb	$0x0, (%rdi,%r12)
    000001b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001bb: 	addq	$0x20, %rax
    000001bf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp285:
    000001c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001d4: 	je	.Ltmp281 # Offset: 468
.Ltmp284:
    000001da: 	movq	-0x20(%rax), %rbp
    000001de: 	callq	clock@PLT # Offset: 478
    000001e3: 	movq	%rax, end_time(%rip)
    000001ea: 	movq	0x38(%rsp), %rdx
    000001ef: 	subq	%fs:0x28, %rdx
    000001f8: 	jne	.Ltmp282 # Offset: 504
    000001fe: 	subq	start_time(%rip), %rax
    00000205: 	pxor	%xmm0, %xmm0
    00000209: 	movq	%rbp, %rdi
    0000020c: 	cvtsi2sd	%rax, %xmm0
    00000211: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000219: 	addq	$0x48, %rsp
    0000021d: 	popq	%rbx
    0000021e: 	popq	%rbp
    0000021f: 	popq	%r12
    00000221: 	popq	%r13
    00000223: 	popq	%r14
    00000225: 	popq	%r15
    00000227: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp274:
    00000230: 	movl	current_test(%rip), %edx
    00000236: 	movq	%r15, %rsi
    00000239: 	movl	$0x1, %edi
    0000023e: 	xorl	%eax, %eax
    00000240: 	addl	$0x1, %ebx
    00000243: 	callq	__printf_chk@PLT # Offset: 579
    00000248: 	movl	iterations(%rip), %ebp
    0000024e: 	cmpl	%ebp, %ebx
    00000250: 	jge	.Ltmp268 # Offset: 592
    00000256: 	movsd	init_value(%rip), %xmm6
    0000025e: 	pxor	%xmm3, %xmm3
    00000262: 	movsd	%xmm6, 0x8(%rsp)
    00000268: 	jmp	.Ltmp275 # Offset: 616
.Ltmp279:
    0000026d: 	movq	%rbx, %rdi
    00000270: 	leaq	0x30(%rsp), %rsi
    00000275: 	xorl	%edx, %edx
    00000277: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 631
    0000027c: 	movq	%rax, (%rbx)
    0000027f: 	movq	%rax, %rdi
    00000282: 	movq	0x30(%rsp), %rax
    00000287: 	movq	%rax, 0x10(%rbx)
.Ltmp286:
    0000028b: 	movq	%r12, %rdx
    0000028e: 	movq	%rbp, %rsi
    00000291: 	callq	memcpy@PLT # Offset: 657
    00000296: 	movq	0x30(%rsp), %r12
    0000029b: 	movq	(%rbx), %rdi
    0000029e: 	jmp	.Ltmp283 # Offset: 670
.Ltmp281:
    000002a3: 	movq	-0x8(%rdx), %rax
    000002a7: 	addq	$0x200, %rax
    000002ad: 	jmp	.Ltmp284 # Offset: 685
.Ltmp276:
    000002b2: 	movq	0x10(%rsp), %rsi
    000002b7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002be: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 702
    000002c3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ca: 	jmp	.Ltmp285 # Offset: 714
.Ltmp280:
    000002cf: 	testq	%r12, %r12
    000002d2: 	je	.Ltmp283 # Offset: 722
    000002d8: 	jmp	.Ltmp286 # Offset: 728
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp270:
    000002e0: 	movapd	%xmm3, %xmm2
    000002e4: 	movapd	%xmm7, %xmm0
    000002e8: 	movq	%rax, 0x18(%rsp)
    000002ed: 	movsd	%xmm5, 0x28(%rsp)
    000002f3: 	movsd	%xmm6, 0x20(%rsp)
    000002f9: 	callq	__muldc3@PLT # Offset: 761
    000002fe: 	movq	0x18(%rsp), %rax
    00000303: 	movsd	0x28(%rsp), %xmm5
    00000309: 	pxor	%xmm3, %xmm3
    0000030d: 	movsd	0x20(%rsp), %xmm6
    00000313: 	addq	$0x10, %rax
    00000317: 	addsd	%xmm0, %xmm5
    0000031b: 	cmpq	%rax, %r14
    0000031e: 	addsd	%xmm1, %xmm6
    00000322: 	jne	.Ltmp271 # Offset: 802
    00000328: 	jmp	.Ltmp269 # Offset: 808
.Ltmp273:
    0000032d: 	movq	DATAat0x2b648(%rip), %rax
    00000334: 	movapd	%xmm4, %xmm0
    00000338: 	movsd	%xmm5, 0x20(%rsp)
    0000033e: 	movsd	%xmm6, 0x18(%rsp)
    00000344: 	movq	%rax, %xmm2
    00000349: 	callq	__muldc3@PLT # Offset: 841
    0000034e: 	movsd	0x20(%rsp), %xmm5
    00000354: 	movsd	0x18(%rsp), %xmm6
    0000035a: 	movapd	%xmm1, %xmm2
    0000035e: 	jmp	.Ltmp287 # Offset: 862
.Ltmp272:
    00000363: 	movsd	0x8(%rsp), %xmm0
    00000369: 	movapd	%xmm3, %xmm2
    0000036d: 	movapd	%xmm3, %xmm1
    00000371: 	movsd	%xmm5, 0x20(%rsp)
    00000377: 	movsd	%xmm6, 0x18(%rsp)
    0000037d: 	callq	__muldc3@PLT # Offset: 893
    00000382: 	movsd	0x20(%rsp), %xmm5
    00000388: 	movsd	0x18(%rsp), %xmm6
    0000038e: 	pxor	%xmm3, %xmm3
    00000392: 	movapd	%xmm0, %xmm4
    00000396: 	jmp	.Ltmp288 # Offset: 918
.Ltmp282:
    0000039b: 	callq	__stack_chk_fail@PLT # Offset: 923
.Ltmp278:
    000003a0: 	leaq	DATAat0x2b008(%rip), %rdi
    000003a7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 935
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE17custom_times_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x5f30
  Size        : 0x45b
  MaxSize     : 0x460
  Offset      : 0x5f30
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x48(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp289 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	pxor	%xmm10, %xmm10
    00000050: 	pxor	%xmm9, %xmm9
    00000055: 	xorl	%ebx, %ebx
    00000057: 	movss	DATAat0x2b750(%rip), %xmm8
    00000060: 	movss	DATAat0x2b760(%rip), %xmm7
    00000068: 	leaq	0x8(%r12,%rax,8), %r14
    0000006d: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000074: 	cvtsd2ss	init_value(%rip), %xmm10
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp296:
    00000080: 	movq	%r12, %rax
    00000083: 	movaps	%xmm9, %xmm5
    00000087: 	movaps	%xmm9, %xmm6
    0000008b: 	testl	%r13d, %r13d
    0000008e: 	jle	.Ltmp290 # Offset: 142
.Ltmp292:
    00000090: 	movss	(%rax), %xmm4
    00000094: 	movss	0x4(%rax), %xmm1
    00000099: 	movaps	%xmm4, %xmm2
    0000009c: 	movaps	%xmm1, %xmm0
    0000009f: 	movaps	%xmm4, %xmm3
    000000a2: 	mulss	%xmm7, %xmm0
    000000a6: 	mulss	%xmm8, %xmm2
    000000ab: 	mulss	%xmm7, %xmm3
    000000af: 	subss	%xmm0, %xmm2
    000000b3: 	movaps	%xmm1, %xmm0
    000000b6: 	mulss	%xmm8, %xmm0
    000000bb: 	addss	%xmm3, %xmm0
    000000bf: 	ucomiss	%xmm2, %xmm0
    000000c2: 	jp	.Ltmp291 # Offset: 194
    000000c8: 	addq	$0x8, %rax
    000000cc: 	addss	%xmm2, %xmm6
    000000d0: 	addss	%xmm0, %xmm5
    000000d4: 	cmpq	%r14, %rax
    000000d7: 	jne	.Ltmp292 # Offset: 215
.Ltmp290:
    000000d9: 	movaps	%xmm10, %xmm4
    000000dd: 	movaps	%xmm10, %xmm1
    000000e1: 	mulss	%xmm8, %xmm4
    000000e6: 	mulss	%xmm7, %xmm1
    000000ea: 	addss	%xmm9, %xmm4
    000000ef: 	ucomiss	%xmm4, %xmm1
    000000f2: 	jp	.Ltmp293 # Offset: 242
.Ltmp309:
    000000f8: 	movss	DATAat0x2b900(%rip), %xmm2
    00000100: 	movaps	%xmm1, %xmm0
    00000103: 	movss	DATAat0x2b900(%rip), %xmm3
    0000010b: 	mulss	%xmm9, %xmm0
    00000110: 	mulss	%xmm4, %xmm2
    00000114: 	mulss	%xmm1, %xmm3
    00000118: 	subss	%xmm0, %xmm2
    0000011c: 	movaps	%xmm4, %xmm0
    0000011f: 	mulss	%xmm9, %xmm0
    00000124: 	addss	%xmm3, %xmm0
    00000128: 	ucomiss	%xmm0, %xmm2
    0000012b: 	jp	.Ltmp294 # Offset: 299
.Ltmp308:
    00000131: 	subss	%xmm0, %xmm5
    00000135: 	subss	%xmm2, %xmm6
    00000139: 	movss	%xmm10, (%rsp)
    0000013f: 	movss	%xmm5, 0x24(%rsp)
    00000145: 	movss	%xmm6, 0x20(%rsp)
    0000014b: 	movq	0x20(%rsp), %xmm0
    00000151: 	callq	cabsf@PLT # Offset: 337
    00000156: 	movss	(%rsp), %xmm10
    0000015c: 	pxor	%xmm9, %xmm9
    00000161: 	movss	DATAat0x2b908(%rip), %xmm5
    00000169: 	movss	DATAat0x2b750(%rip), %xmm8
    00000172: 	movss	DATAat0x2b760(%rip), %xmm7
    0000017a: 	comiss	%xmm0, %xmm5
    0000017d: 	jbe	.Ltmp295 # Offset: 381
    00000183: 	addl	$0x1, %ebx
    00000186: 	cmpl	%ebp, %ebx
    00000188: 	jl	.Ltmp296 # Offset: 392
.Ltmp289:
    0000018e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019c: 	subq	$0x20, %rax
    000001a0: 	cmpq	%rax, %rbx
    000001a3: 	je	.Ltmp297 # Offset: 419
    000001a9: 	movq	0x8(%rsp), %rax
    000001ae: 	leaq	0x10(%rbx), %rdi
    000001b2: 	movq	%rdi, (%rbx)
    000001b5: 	movq	(%rax), %rbp
    000001b8: 	movq	0x8(%rax), %r12
    000001bc: 	movq	%rbp, %rax
    000001bf: 	addq	%r12, %rax
    000001c2: 	je	.Ltmp298 # Offset: 450
    000001c4: 	testq	%rbp, %rbp
    000001c7: 	je	.Ltmp299 # Offset: 455
.Ltmp298:
    000001cd: 	movq	%r12, 0x40(%rsp)
    000001d2: 	cmpq	$0xf, %r12
    000001d6: 	ja	.Ltmp300 # Offset: 470
    000001dc: 	cmpq	$0x1, %r12
    000001e0: 	jne	.Ltmp301 # Offset: 480
    000001e6: 	movzbl	(%rbp), %eax
    000001ea: 	movb	%al, 0x10(%rbx)
.Ltmp304:
    000001ed: 	movq	%r12, 0x8(%rbx)
    000001f1: 	movb	$0x0, (%rdi,%r12)
    000001f6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fd: 	addq	$0x20, %rax
    00000201: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp306:
    00000208: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	je	.Ltmp302 # Offset: 534
.Ltmp305:
    0000021c: 	movq	-0x20(%rax), %rbp
    00000220: 	callq	clock@PLT # Offset: 544
    00000225: 	movq	%rax, end_time(%rip)
    0000022c: 	movq	0x48(%rsp), %rdx
    00000231: 	subq	%fs:0x28, %rdx
    0000023a: 	jne	.Ltmp303 # Offset: 570
    00000240: 	subq	start_time(%rip), %rax
    00000247: 	pxor	%xmm0, %xmm0
    0000024b: 	movq	%rbp, %rdi
    0000024e: 	cvtsi2sd	%rax, %xmm0
    00000253: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000025b: 	addq	$0x58, %rsp
    0000025f: 	popq	%rbx
    00000260: 	popq	%rbp
    00000261: 	popq	%r12
    00000263: 	popq	%r13
    00000265: 	popq	%r14
    00000267: 	popq	%r15
    00000269: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 617
    0000026e: 	nop # Size: 2
.Ltmp295:
    00000270: 	movl	current_test(%rip), %edx
    00000276: 	movq	%r15, %rsi
    00000279: 	movl	$0x1, %edi
    0000027e: 	xorl	%eax, %eax
    00000280: 	addl	$0x1, %ebx
    00000283: 	callq	__printf_chk@PLT # Offset: 643
    00000288: 	movl	iterations(%rip), %ebp
    0000028e: 	cmpl	%ebp, %ebx
    00000290: 	jge	.Ltmp289 # Offset: 656
    00000296: 	pxor	%xmm10, %xmm10
    0000029b: 	movss	DATAat0x2b760(%rip), %xmm7
    000002a3: 	pxor	%xmm9, %xmm9
    000002a8: 	movss	DATAat0x2b750(%rip), %xmm8
    000002b1: 	cvtsd2ss	init_value(%rip), %xmm10
    000002ba: 	jmp	.Ltmp296 # Offset: 698
.Ltmp300:
    000002bf: 	movq	%rbx, %rdi
    000002c2: 	leaq	0x40(%rsp), %rsi
    000002c7: 	xorl	%edx, %edx
    000002c9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 713
    000002ce: 	movq	%rax, (%rbx)
    000002d1: 	movq	%rax, %rdi
    000002d4: 	movq	0x40(%rsp), %rax
    000002d9: 	movq	%rax, 0x10(%rbx)
.Ltmp307:
    000002dd: 	movq	%r12, %rdx
    000002e0: 	movq	%rbp, %rsi
    000002e3: 	callq	memcpy@PLT # Offset: 739
    000002e8: 	movq	0x40(%rsp), %r12
    000002ed: 	movq	(%rbx), %rdi
    000002f0: 	jmp	.Ltmp304 # Offset: 752
.Ltmp302:
    000002f5: 	movq	-0x8(%rdx), %rax
    000002f9: 	addq	$0x200, %rax
    000002ff: 	jmp	.Ltmp305 # Offset: 767
.Ltmp297:
    00000304: 	movq	0x8(%rsp), %rsi
    00000309: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000310: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 784
    00000315: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000031c: 	jmp	.Ltmp306 # Offset: 796
.Ltmp301:
    00000321: 	testq	%r12, %r12
    00000324: 	je	.Ltmp304 # Offset: 804
    0000032a: 	jmp	.Ltmp307 # Offset: 810
    0000032c: 	nopl	(%rax) # Size: 4
.Ltmp291:
    00000330: 	movaps	%xmm7, %xmm3
    00000333: 	movaps	%xmm8, %xmm2
    00000337: 	movaps	%xmm4, %xmm0
    0000033a: 	movq	%rax, (%rsp)
    0000033e: 	movss	%xmm10, 0x1c(%rsp)
    00000345: 	movss	%xmm6, 0x18(%rsp)
    0000034b: 	movss	%xmm5, 0x14(%rsp)
    00000351: 	callq	__mulsc3@PLT # Offset: 849
    00000356: 	movq	(%rsp), %rax
    0000035a: 	movss	0x18(%rsp), %xmm6
    00000360: 	pxor	%xmm9, %xmm9
    00000365: 	movq	%xmm0, 0x38(%rsp)
    0000036b: 	movss	0x14(%rsp), %xmm5
    00000371: 	addss	0x38(%rsp), %xmm6
    00000377: 	addq	$0x8, %rax
    0000037b: 	addss	0x3c(%rsp), %xmm5
    00000381: 	movss	DATAat0x2b750(%rip), %xmm8
    0000038a: 	cmpq	%rax, %r14
    0000038d: 	movss	DATAat0x2b760(%rip), %xmm7
    00000395: 	movss	0x1c(%rsp), %xmm10
    0000039c: 	jne	.Ltmp292 # Offset: 924
    000003a2: 	jmp	.Ltmp290 # Offset: 930
.Ltmp294:
    000003a7: 	movss	DATAat0x2b900(%rip), %xmm2
    000003af: 	movaps	%xmm4, %xmm0
    000003b2: 	movaps	%xmm9, %xmm3
    000003b6: 	movss	%xmm10, 0x18(%rsp)
    000003bd: 	movss	%xmm6, 0x14(%rsp)
    000003c3: 	movss	%xmm5, (%rsp)
    000003c8: 	callq	__mulsc3@PLT # Offset: 968
    000003cd: 	movss	0x14(%rsp), %xmm6
    000003d3: 	movss	(%rsp), %xmm5
    000003d8: 	movq	%xmm0, 0x28(%rsp)
    000003de: 	movss	0x18(%rsp), %xmm10
    000003e5: 	movss	0x28(%rsp), %xmm2
    000003eb: 	movss	0x2c(%rsp), %xmm0
    000003f1: 	jmp	.Ltmp308 # Offset: 1009
.Ltmp293:
    000003f6: 	movaps	%xmm9, %xmm1
    000003fa: 	movaps	%xmm10, %xmm0
    000003fe: 	movaps	%xmm7, %xmm3
    00000401: 	movss	%xmm6, 0x18(%rsp)
    00000407: 	movaps	%xmm8, %xmm2
    0000040b: 	movss	%xmm5, 0x14(%rsp)
    00000411: 	movss	%xmm10, (%rsp)
    00000417: 	callq	__mulsc3@PLT # Offset: 1047
    0000041c: 	movss	0x18(%rsp), %xmm6
    00000422: 	movss	0x14(%rsp), %xmm5
    00000428: 	pxor	%xmm9, %xmm9
    0000042d: 	movq	%xmm0, 0x30(%rsp)
    00000433: 	movss	(%rsp), %xmm10
    00000439: 	movss	0x30(%rsp), %xmm4
    0000043f: 	movss	0x34(%rsp), %xmm1
    00000445: 	jmp	.Ltmp309 # Offset: 1093
.Ltmp303:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
.Ltmp299:
    0000044f: 	leaq	DATAat0x2b008(%rip), %rdi
    00000456: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1110
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x6390
  Size        : 0x46f
  MaxSize     : 0x470
  Offset      : 0x6390
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x38(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp310 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	xorl	%ebx, %ebx
    0000004d: 	movsd	DATAat0x2b710(%rip), %xmm8
    00000056: 	movsd	DATAat0x2b718(%rip), %xmm7
    0000005e: 	shlq	$0x4, %rax
    00000062: 	pxor	%xmm9, %xmm9
    00000067: 	movsd	init_value(%rip), %xmm10
    00000070: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000077: 	leaq	0x10(%r12,%rax), %r14
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp317:
    00000080: 	movq	%r12, %rax
    00000083: 	movapd	%xmm9, %xmm6
    00000088: 	movapd	%xmm9, %xmm5
    0000008d: 	testl	%r13d, %r13d
    00000090: 	jle	.Ltmp311 # Offset: 144
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp313:
    00000098: 	movsd	(%rax), %xmm4
    0000009c: 	movsd	0x8(%rax), %xmm1
    000000a1: 	movapd	%xmm4, %xmm2
    000000a5: 	movapd	%xmm1, %xmm0
    000000a9: 	movapd	%xmm4, %xmm3
    000000ad: 	mulsd	%xmm7, %xmm0
    000000b1: 	mulsd	%xmm8, %xmm2
    000000b6: 	mulsd	%xmm7, %xmm3
    000000ba: 	subsd	%xmm0, %xmm2
    000000be: 	movapd	%xmm1, %xmm0
    000000c2: 	mulsd	%xmm8, %xmm0
    000000c7: 	addsd	%xmm3, %xmm0
    000000cb: 	ucomisd	%xmm2, %xmm0
    000000cf: 	jp	.Ltmp312 # Offset: 207
    000000d5: 	addq	$0x10, %rax
    000000d9: 	addsd	%xmm2, %xmm5
    000000dd: 	addsd	%xmm0, %xmm6
    000000e1: 	cmpq	%r14, %rax
    000000e4: 	jne	.Ltmp313 # Offset: 228
.Ltmp311:
    000000e6: 	movapd	%xmm10, %xmm4
    000000eb: 	movapd	%xmm10, %xmm1
    000000f0: 	mulsd	%xmm8, %xmm4
    000000f5: 	mulsd	%xmm7, %xmm1
    000000f9: 	addsd	%xmm9, %xmm4
    000000fe: 	ucomisd	%xmm4, %xmm1
    00000102: 	jp	.Ltmp314 # Offset: 258
.Ltmp330:
    00000108: 	movsd	DATAat0x2b648(%rip), %xmm0
    00000110: 	movapd	%xmm1, %xmm2
    00000114: 	movsd	DATAat0x2b648(%rip), %xmm3
    0000011c: 	mulsd	%xmm9, %xmm2
    00000121: 	mulsd	%xmm4, %xmm0
    00000125: 	mulsd	%xmm1, %xmm3
    00000129: 	subsd	%xmm2, %xmm0
    0000012d: 	movapd	%xmm4, %xmm2
    00000131: 	mulsd	%xmm9, %xmm2
    00000136: 	addsd	%xmm3, %xmm2
    0000013a: 	ucomisd	%xmm2, %xmm0
    0000013e: 	jp	.Ltmp315 # Offset: 318
.Ltmp329:
    00000144: 	subsd	%xmm0, %xmm5
    00000148: 	subsd	%xmm2, %xmm6
    0000014c: 	movsd	%xmm10, 0x8(%rsp)
    00000153: 	movapd	%xmm5, %xmm0
    00000157: 	movapd	%xmm6, %xmm1
    0000015b: 	callq	cabs@PLT # Offset: 347
    00000160: 	movsd	DATAat0x2b658(%rip), %xmm5
    00000168: 	pxor	%xmm9, %xmm9
    0000016d: 	movq	DATAat0x2b710(%rip), %rax
    00000174: 	movsd	0x8(%rsp), %xmm10
    0000017b: 	comisd	%xmm0, %xmm5
    0000017f: 	movq	%rax, %xmm8
    00000184: 	movq	DATAat0x2b718(%rip), %rax
    0000018b: 	movq	%rax, %xmm7
    00000190: 	jbe	.Ltmp316 # Offset: 400
    00000196: 	addl	$0x1, %ebx
    00000199: 	cmpl	%ebp, %ebx
    0000019b: 	jl	.Ltmp317 # Offset: 411
.Ltmp310:
    000001a1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001a8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001af: 	subq	$0x20, %rax
    000001b3: 	cmpq	%rax, %rbx
    000001b6: 	je	.Ltmp318 # Offset: 438
    000001bc: 	movq	0x10(%rsp), %rax
    000001c1: 	leaq	0x10(%rbx), %rdi
    000001c5: 	movq	%rdi, (%rbx)
    000001c8: 	movq	(%rax), %rbp
    000001cb: 	movq	0x8(%rax), %r12
    000001cf: 	movq	%rbp, %rax
    000001d2: 	addq	%r12, %rax
    000001d5: 	je	.Ltmp319 # Offset: 469
    000001d7: 	testq	%rbp, %rbp
    000001da: 	je	.Ltmp320 # Offset: 474
.Ltmp319:
    000001e0: 	movq	%r12, 0x30(%rsp)
    000001e5: 	cmpq	$0xf, %r12
    000001e9: 	ja	.Ltmp321 # Offset: 489
    000001ef: 	cmpq	$0x1, %r12
    000001f3: 	jne	.Ltmp322 # Offset: 499
    000001f9: 	movzbl	(%rbp), %eax
    000001fd: 	movb	%al, 0x10(%rbx)
.Ltmp325:
    00000200: 	movq	%r12, 0x8(%rbx)
    00000204: 	movb	$0x0, (%rdi,%r12)
    00000209: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000210: 	addq	$0x20, %rax
    00000214: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp327:
    0000021b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000222: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000229: 	je	.Ltmp323 # Offset: 553
.Ltmp326:
    0000022f: 	movq	-0x20(%rax), %rbp
    00000233: 	callq	clock@PLT # Offset: 563
    00000238: 	movq	%rax, end_time(%rip)
    0000023f: 	movq	0x38(%rsp), %rdx
    00000244: 	subq	%fs:0x28, %rdx
    0000024d: 	jne	.Ltmp324 # Offset: 589
    00000253: 	subq	start_time(%rip), %rax
    0000025a: 	pxor	%xmm0, %xmm0
    0000025e: 	movq	%rbp, %rdi
    00000261: 	cvtsi2sd	%rax, %xmm0
    00000266: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000026e: 	addq	$0x48, %rsp
    00000272: 	popq	%rbx
    00000273: 	popq	%rbp
    00000274: 	popq	%r12
    00000276: 	popq	%r13
    00000278: 	popq	%r14
    0000027a: 	popq	%r15
    0000027c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 636
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp316:
    00000288: 	movl	current_test(%rip), %edx
    0000028e: 	movq	%r15, %rsi
    00000291: 	movl	$0x1, %edi
    00000296: 	xorl	%eax, %eax
    00000298: 	addl	$0x1, %ebx
    0000029b: 	callq	__printf_chk@PLT # Offset: 667
    000002a0: 	movl	iterations(%rip), %ebp
    000002a6: 	cmpl	%ebp, %ebx
    000002a8: 	jge	.Ltmp310 # Offset: 680
    000002ae: 	movq	DATAat0x2b710(%rip), %rax
    000002b5: 	pxor	%xmm9, %xmm9
    000002ba: 	movsd	init_value(%rip), %xmm10
    000002c3: 	movq	%rax, %xmm8
    000002c8: 	movq	DATAat0x2b718(%rip), %rax
    000002cf: 	movq	%rax, %xmm7
    000002d4: 	jmp	.Ltmp317 # Offset: 724
.Ltmp321:
    000002d9: 	movq	%rbx, %rdi
    000002dc: 	leaq	0x30(%rsp), %rsi
    000002e1: 	xorl	%edx, %edx
    000002e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 739
    000002e8: 	movq	%rax, (%rbx)
    000002eb: 	movq	%rax, %rdi
    000002ee: 	movq	0x30(%rsp), %rax
    000002f3: 	movq	%rax, 0x10(%rbx)
.Ltmp328:
    000002f7: 	movq	%r12, %rdx
    000002fa: 	movq	%rbp, %rsi
    000002fd: 	callq	memcpy@PLT # Offset: 765
    00000302: 	movq	0x30(%rsp), %r12
    00000307: 	movq	(%rbx), %rdi
    0000030a: 	jmp	.Ltmp325 # Offset: 778
.Ltmp323:
    0000030f: 	movq	-0x8(%rdx), %rax
    00000313: 	addq	$0x200, %rax
    00000319: 	jmp	.Ltmp326 # Offset: 793
.Ltmp318:
    0000031e: 	movq	0x10(%rsp), %rsi
    00000323: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000032a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 810
    0000032f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000336: 	jmp	.Ltmp327 # Offset: 822
.Ltmp322:
    0000033b: 	testq	%r12, %r12
    0000033e: 	je	.Ltmp325 # Offset: 830
    00000344: 	jmp	.Ltmp328 # Offset: 836
    00000346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp312:
    00000350: 	movapd	%xmm7, %xmm3
    00000354: 	movapd	%xmm8, %xmm2
    00000359: 	movapd	%xmm4, %xmm0
    0000035d: 	movq	%rax, 0x8(%rsp)
    00000362: 	movsd	%xmm10, 0x28(%rsp)
    00000369: 	movsd	%xmm5, 0x20(%rsp)
    0000036f: 	movsd	%xmm6, 0x18(%rsp)
    00000375: 	callq	__muldc3@PLT # Offset: 885
    0000037a: 	movq	0x8(%rsp), %rax
    0000037f: 	pxor	%xmm9, %xmm9
    00000384: 	movq	DATAat0x2b710(%rip), %rcx
    0000038b: 	movsd	0x20(%rsp), %xmm5
    00000391: 	movsd	0x18(%rsp), %xmm6
    00000397: 	addq	$0x10, %rax
    0000039b: 	movq	%rcx, %xmm8
    000003a0: 	movq	DATAat0x2b718(%rip), %rcx
    000003a7: 	movsd	0x28(%rsp), %xmm10
    000003ae: 	cmpq	%rax, %r14
    000003b1: 	addsd	%xmm0, %xmm5
    000003b5: 	addsd	%xmm1, %xmm6
    000003b9: 	movq	%rcx, %xmm7
    000003be: 	jne	.Ltmp313 # Offset: 958
    000003c4: 	jmp	.Ltmp311 # Offset: 964
.Ltmp315:
    000003c9: 	movq	DATAat0x2b648(%rip), %rax
    000003d0: 	movapd	%xmm9, %xmm3
    000003d5: 	movapd	%xmm4, %xmm0
    000003d9: 	movsd	%xmm10, 0x20(%rsp)
    000003e0: 	movsd	%xmm5, 0x18(%rsp)
    000003e6: 	movq	%rax, %xmm2
    000003eb: 	movsd	%xmm6, 0x8(%rsp)
    000003f1: 	callq	__muldc3@PLT # Offset: 1009
    000003f6: 	movsd	0x20(%rsp), %xmm10
    000003fd: 	movsd	0x18(%rsp), %xmm5
    00000403: 	movsd	0x8(%rsp), %xmm6
    00000409: 	movapd	%xmm1, %xmm2
    0000040d: 	jmp	.Ltmp329 # Offset: 1037
.Ltmp314:
    00000412: 	movapd	%xmm10, %xmm0
    00000417: 	movapd	%xmm9, %xmm1
    0000041c: 	movapd	%xmm7, %xmm3
    00000420: 	movsd	%xmm5, 0x20(%rsp)
    00000426: 	movapd	%xmm8, %xmm2
    0000042b: 	movsd	%xmm6, 0x18(%rsp)
    00000431: 	movsd	%xmm10, 0x8(%rsp)
    00000438: 	callq	__muldc3@PLT # Offset: 1080
    0000043d: 	movsd	0x20(%rsp), %xmm5
    00000443: 	movsd	0x18(%rsp), %xmm6
    00000449: 	pxor	%xmm9, %xmm9
    0000044e: 	movsd	0x8(%rsp), %xmm10
    00000455: 	movapd	%xmm0, %xmm4
    00000459: 	jmp	.Ltmp330 # Offset: 1113
.Ltmp324:
    0000045e: 	callq	__stack_chk_fail@PLT # Offset: 1118
.Ltmp320:
    00000463: 	leaq	DATAat0x2b008(%rip), %rdi
    0000046a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1130
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x6800
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0x6800
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp331 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	pxor	%xmm7, %xmm7
    0000004f: 	movl	%ebx, %r14d
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm3, %xmm3
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm7
    0000006d: 	movaps	DATAat0x2b760(%rip), %xmm6
    00000074: 	movss	%xmm7, 0x8(%rsp)
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movaps	DATAat0x2b750(%rip), %xmm7
    00000084: 	shlq	$0x5, %rax
    00000088: 	leaq	0x20(%r12,%rax), %r15
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp338:
    00000090: 	movaps	%xmm3, %xmm5
    00000093: 	movaps	%xmm3, %xmm4
    00000096: 	testl	%ebx, %ebx
    00000098: 	jle	.Ltmp332 # Offset: 152
    0000009e: 	cmpl	$0x2, 0xc(%rsp)
    000000a3: 	jbe	.Ltmp333 # Offset: 163
    000000a9: 	movq	%r12, %rax
    000000ac: 	movaps	%xmm3, %xmm5
    000000af: 	movaps	%xmm3, %xmm4
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp334:
    000000b8: 	movups	(%rax), %xmm0
    000000bb: 	movups	0x10(%rax), %xmm2
    000000bf: 	addq	$0x20, %rax
    000000c3: 	movaps	%xmm0, %xmm1
    000000c6: 	shufps	$0xdd, %xmm2, %xmm0
    000000ca: 	addps	%xmm6, %xmm0
    000000cd: 	shufps	$0x88, %xmm2, %xmm1
    000000d1: 	addps	%xmm7, %xmm1
    000000d4: 	addss	%xmm1, %xmm4
    000000d8: 	movaps	%xmm1, %xmm2
    000000db: 	shufps	$0x55, %xmm1, %xmm2
    000000df: 	addss	%xmm4, %xmm2
    000000e3: 	movaps	%xmm1, %xmm4
    000000e6: 	unpckhps	%xmm1, %xmm4
    000000e9: 	shufps	$0xff, %xmm1, %xmm1
    000000ed: 	addss	%xmm2, %xmm4
    000000f1: 	movaps	%xmm0, %xmm2
    000000f4: 	addss	%xmm5, %xmm2
    000000f8: 	movaps	%xmm0, %xmm5
    000000fb: 	unpckhps	%xmm0, %xmm5
    000000fe: 	addss	%xmm1, %xmm4
    00000102: 	movaps	%xmm0, %xmm1
    00000105: 	shufps	$0x55, %xmm0, %xmm1
    00000109: 	addss	%xmm2, %xmm1
    0000010d: 	shufps	$0xff, %xmm0, %xmm0
    00000111: 	addss	%xmm1, %xmm5
    00000115: 	addss	%xmm0, %xmm5
    00000119: 	cmpq	%r15, %rax
    0000011c: 	jne	.Ltmp334 # Offset: 284
    0000011e: 	movl	%r14d, %eax
    00000121: 	cmpl	%ebx, %r14d
    00000124: 	je	.Ltmp332 # Offset: 292
.Ltmp346:
    00000126: 	movq	DATAat0x2b678(%rip), %xmm2
    0000012e: 	movl	%ebx, %edx
    00000130: 	unpcklps	%xmm5, %xmm4
    00000133: 	subl	%eax, %edx
    00000135: 	leaq	(%r12,%rax,8), %rax
    00000139: 	movq	(%rax), %xmm0
    0000013d: 	addps	%xmm2, %xmm0
    00000140: 	addps	%xmm4, %xmm0
    00000143: 	cmpl	$0x1, %edx
    00000146: 	je	.Ltmp335 # Offset: 326
    00000148: 	movq	0x8(%rax), %xmm1
    0000014d: 	addps	%xmm2, %xmm1
    00000150: 	addps	%xmm1, %xmm0
    00000153: 	cmpl	$0x2, %edx
    00000156: 	je	.Ltmp335 # Offset: 342
    00000158: 	movq	0x10(%rax), %xmm1
    0000015d: 	addps	%xmm2, %xmm1
    00000160: 	addps	%xmm1, %xmm0
.Ltmp335:
    00000163: 	movaps	%xmm0, %xmm4
    00000166: 	shufps	$0xe5, %xmm0, %xmm0
    0000016a: 	movaps	%xmm0, %xmm5
.Ltmp332:
    0000016d: 	movss	0x8(%rsp), %xmm8
    00000174: 	movss	DATAat0x2b900(%rip), %xmm1
    0000017c: 	subss	DATAat0x2b910(%rip), %xmm8
    00000185: 	mulss	%xmm8, %xmm1
    0000018a: 	movaps	%xmm8, %xmm0
    0000018e: 	mulss	%xmm3, %xmm0
    00000192: 	subss	DATAat0x2b914(%rip), %xmm0
    0000019a: 	addss	%xmm3, %xmm1
    0000019e: 	ucomiss	%xmm0, %xmm1
    000001a1: 	jp	.Ltmp336 # Offset: 417
.Ltmp350:
    000001a7: 	subss	%xmm0, %xmm5
    000001ab: 	subss	%xmm1, %xmm4
    000001af: 	movss	%xmm5, 0x24(%rsp)
    000001b5: 	movss	%xmm4, 0x20(%rsp)
    000001bb: 	movq	0x20(%rsp), %xmm0
    000001c1: 	callq	cabsf@PLT # Offset: 449
    000001c6: 	movss	DATAat0x2b908(%rip), %xmm3
    000001ce: 	movaps	DATAat0x2b750(%rip), %xmm7
    000001d5: 	movaps	DATAat0x2b760(%rip), %xmm6
    000001dc: 	comiss	%xmm0, %xmm3
    000001df: 	pxor	%xmm3, %xmm3
    000001e3: 	jbe	.Ltmp337 # Offset: 483
    000001e9: 	addl	$0x1, %ebp
    000001ec: 	cmpl	%r13d, %ebp
    000001ef: 	jl	.Ltmp338 # Offset: 495
.Ltmp331:
    000001f5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000203: 	subq	$0x20, %rax
    00000207: 	cmpq	%rax, %rbx
    0000020a: 	je	.Ltmp339 # Offset: 522
    00000210: 	movq	0x10(%rsp), %rax
    00000215: 	leaq	0x10(%rbx), %rdi
    00000219: 	movq	%rdi, (%rbx)
    0000021c: 	movq	(%rax), %rbp
    0000021f: 	movq	0x8(%rax), %r12
    00000223: 	movq	%rbp, %rax
    00000226: 	addq	%r12, %rax
    00000229: 	je	.Ltmp340 # Offset: 553
    0000022b: 	testq	%rbp, %rbp
    0000022e: 	je	.Ltmp341 # Offset: 558
.Ltmp340:
    00000234: 	movq	%r12, 0x30(%rsp)
    00000239: 	cmpq	$0xf, %r12
    0000023d: 	ja	.Ltmp342 # Offset: 573
    00000243: 	cmpq	$0x1, %r12
    00000247: 	jne	.Ltmp343 # Offset: 583
    0000024d: 	movzbl	(%rbp), %eax
    00000251: 	movb	%al, 0x10(%rbx)
.Ltmp347:
    00000254: 	movq	%r12, 0x8(%rbx)
    00000258: 	movb	$0x0, (%rdi,%r12)
    0000025d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000264: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026b: 	addq	$0x20, %rax
    0000026f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000276: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000027d: 	je	.Ltmp344 # Offset: 637
.Ltmp348:
    00000283: 	movq	-0x20(%rax), %rbp
    00000287: 	callq	clock@PLT # Offset: 647
    0000028c: 	movq	%rax, end_time(%rip)
    00000293: 	movq	0x38(%rsp), %rdx
    00000298: 	subq	%fs:0x28, %rdx
    000002a1: 	jne	.Ltmp345 # Offset: 673
    000002a7: 	subq	start_time(%rip), %rax
    000002ae: 	pxor	%xmm0, %xmm0
    000002b2: 	movq	%rbp, %rdi
    000002b5: 	cvtsi2sd	%rax, %xmm0
    000002ba: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002c2: 	addq	$0x48, %rsp
    000002c6: 	popq	%rbx
    000002c7: 	popq	%rbp
    000002c8: 	popq	%r12
    000002ca: 	popq	%r13
    000002cc: 	popq	%r14
    000002ce: 	popq	%r15
    000002d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 720
    000002d5: 	nopl	(%rax) # Size: 3
.Ltmp337:
    000002d8: 	movl	current_test(%rip), %edx
    000002de: 	movl	$0x1, %edi
    000002e3: 	xorl	%eax, %eax
    000002e5: 	addl	$0x1, %ebp
    000002e8: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r13d
    000002fb: 	cmpl	%r13d, %ebp
    000002fe: 	jge	.Ltmp331 # Offset: 766
    00000304: 	pxor	%xmm6, %xmm6
    00000308: 	movaps	DATAat0x2b750(%rip), %xmm7
    0000030f: 	pxor	%xmm3, %xmm3
    00000313: 	cvtsd2ss	init_value(%rip), %xmm6
    0000031b: 	movss	%xmm6, 0x8(%rsp)
    00000321: 	movaps	DATAat0x2b760(%rip), %xmm6
    00000328: 	jmp	.Ltmp338 # Offset: 808
.Ltmp333:
    0000032d: 	xorl	%eax, %eax
    0000032f: 	movaps	%xmm3, %xmm5
    00000332: 	movaps	%xmm3, %xmm4
    00000335: 	jmp	.Ltmp346 # Offset: 821
.Ltmp342:
    0000033a: 	movq	%rbx, %rdi
    0000033d: 	leaq	0x30(%rsp), %rsi
    00000342: 	xorl	%edx, %edx
    00000344: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 836
    00000349: 	movq	%rax, (%rbx)
    0000034c: 	movq	%rax, %rdi
    0000034f: 	movq	0x30(%rsp), %rax
    00000354: 	movq	%rax, 0x10(%rbx)
.Ltmp349:
    00000358: 	movq	%r12, %rdx
    0000035b: 	movq	%rbp, %rsi
    0000035e: 	callq	memcpy@PLT # Offset: 862
    00000363: 	movq	0x30(%rsp), %r12
    00000368: 	movq	(%rbx), %rdi
    0000036b: 	jmp	.Ltmp347 # Offset: 875
.Ltmp339:
    00000370: 	movq	0x10(%rsp), %rsi
    00000375: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 892
    00000381: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000388: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000396: 	jne	.Ltmp348 # Offset: 918
.Ltmp344:
    0000039c: 	movq	-0x8(%rdx), %rax
    000003a0: 	addq	$0x200, %rax
    000003a6: 	jmp	.Ltmp348 # Offset: 934
.Ltmp343:
    000003ab: 	testq	%r12, %r12
    000003ae: 	je	.Ltmp347 # Offset: 942
    000003b4: 	jmp	.Ltmp349 # Offset: 948
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp336:
    000003c0: 	movss	DATAat0x2b760(%rip), %xmm1
    000003c8: 	movaps	%xmm8, %xmm0
    000003cc: 	movss	DATAat0x2b900(%rip), %xmm2
    000003d4: 	movss	%xmm4, 0x1c(%rsp)
    000003da: 	movss	%xmm5, 0x18(%rsp)
    000003e0: 	callq	__mulsc3@PLT # Offset: 992
    000003e5: 	movss	0x1c(%rsp), %xmm4
    000003eb: 	movss	0x18(%rsp), %xmm5
    000003f1: 	movq	%xmm0, 0x28(%rsp)
    000003f7: 	movss	0x28(%rsp), %xmm1
    000003fd: 	movss	0x2c(%rsp), %xmm0
    00000403: 	jmp	.Ltmp350 # Offset: 1027
.Ltmp345:
    00000408: 	callq	__stack_chk_fail@PLT # Offset: 1032
.Ltmp341:
    0000040d: 	leaq	DATAat0x2b008(%rip), %rdi
    00000414: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1044
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x6c20
  Size        : 0x3e8
  MaxSize     : 0x3f0
  Offset      : 0x6c20
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x38(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp351 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	movsd	init_value(%rip), %xmm7
    00000053: 	xorl	%ebx, %ebx
    00000055: 	pxor	%xmm3, %xmm3
    00000059: 	shlq	$0x4, %rax
    0000005d: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000064: 	leaq	0x10(%r12,%rax), %r14
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp358:
    00000070: 	movq	%r12, %rax
    00000073: 	movapd	%xmm3, %xmm6
    00000077: 	movapd	%xmm3, %xmm5
    0000007b: 	testl	%r13d, %r13d
    0000007e: 	jle	.Ltmp352 # Offset: 126
.Ltmp354:
    00000080: 	movsd	0x8(%rax), %xmm1
    00000085: 	movsd	(%rax), %xmm4
    00000089: 	movapd	%xmm1, %xmm0
    0000008d: 	movapd	%xmm4, %xmm2
    00000091: 	mulsd	%xmm3, %xmm0
    00000095: 	subsd	%xmm0, %xmm2
    00000099: 	movapd	%xmm4, %xmm0
    0000009d: 	mulsd	%xmm3, %xmm0
    000000a1: 	addsd	%xmm1, %xmm0
    000000a5: 	ucomisd	%xmm2, %xmm0
    000000a9: 	jp	.Ltmp353 # Offset: 169
    000000af: 	addq	$0x10, %rax
    000000b3: 	addsd	%xmm2, %xmm5
    000000b7: 	addsd	%xmm0, %xmm6
    000000bb: 	cmpq	%r14, %rax
    000000be: 	jne	.Ltmp354 # Offset: 190
.Ltmp352:
    000000c0: 	movapd	%xmm7, %xmm4
    000000c4: 	movapd	%xmm7, %xmm8
    000000c9: 	mulsd	%xmm3, %xmm4
    000000cd: 	movapd	%xmm4, %xmm1
    000000d1: 	addsd	%xmm3, %xmm1
    000000d5: 	ucomisd	%xmm1, %xmm7
    000000d9: 	jp	.Ltmp355 # Offset: 217
.Ltmp371:
    000000df: 	movsd	DATAat0x2b648(%rip), %xmm0
    000000e7: 	movapd	%xmm1, %xmm2
    000000eb: 	mulsd	%xmm3, %xmm2
    000000ef: 	mulsd	%xmm8, %xmm0
    000000f4: 	subsd	%xmm2, %xmm0
    000000f8: 	movsd	DATAat0x2b648(%rip), %xmm2
    00000100: 	mulsd	%xmm1, %xmm2
    00000104: 	addsd	%xmm4, %xmm2
    00000108: 	ucomisd	%xmm2, %xmm0
    0000010c: 	jp	.Ltmp356 # Offset: 268
.Ltmp370:
    00000112: 	subsd	%xmm0, %xmm5
    00000116: 	subsd	%xmm2, %xmm6
    0000011a: 	movsd	%xmm7, 0x8(%rsp)
    00000120: 	movapd	%xmm5, %xmm0
    00000124: 	movapd	%xmm6, %xmm1
    00000128: 	callq	cabs@PLT # Offset: 296
    0000012d: 	movsd	DATAat0x2b658(%rip), %xmm7
    00000135: 	pxor	%xmm3, %xmm3
    00000139: 	comisd	%xmm0, %xmm7
    0000013d: 	movsd	0x8(%rsp), %xmm7
    00000143: 	jbe	.Ltmp357 # Offset: 323
    00000149: 	addl	$0x1, %ebx
    0000014c: 	cmpl	%ebp, %ebx
    0000014e: 	jl	.Ltmp358 # Offset: 334
.Ltmp351:
    00000154: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000015b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000162: 	subq	$0x20, %rax
    00000166: 	cmpq	%rax, %rbx
    00000169: 	je	.Ltmp359 # Offset: 361
    0000016f: 	movq	0x10(%rsp), %rax
    00000174: 	leaq	0x10(%rbx), %rdi
    00000178: 	movq	%rdi, (%rbx)
    0000017b: 	movq	(%rax), %rbp
    0000017e: 	movq	0x8(%rax), %r12
    00000182: 	movq	%rbp, %rax
    00000185: 	addq	%r12, %rax
    00000188: 	je	.Ltmp360 # Offset: 392
    0000018a: 	testq	%rbp, %rbp
    0000018d: 	je	.Ltmp361 # Offset: 397
.Ltmp360:
    00000193: 	movq	%r12, 0x30(%rsp)
    00000198: 	cmpq	$0xf, %r12
    0000019c: 	ja	.Ltmp362 # Offset: 412
    000001a2: 	cmpq	$0x1, %r12
    000001a6: 	jne	.Ltmp363 # Offset: 422
    000001ac: 	movzbl	(%rbp), %eax
    000001b0: 	movb	%al, 0x10(%rbx)
.Ltmp366:
    000001b3: 	movq	%r12, 0x8(%rbx)
    000001b7: 	movb	$0x0, (%rdi,%r12)
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c3: 	addq	$0x20, %rax
    000001c7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp368:
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	je	.Ltmp364 # Offset: 476
.Ltmp367:
    000001e2: 	movq	-0x20(%rax), %rbp
    000001e6: 	callq	clock@PLT # Offset: 486
    000001eb: 	movq	%rax, end_time(%rip)
    000001f2: 	movq	0x38(%rsp), %rdx
    000001f7: 	subq	%fs:0x28, %rdx
    00000200: 	jne	.Ltmp365 # Offset: 512
    00000206: 	subq	start_time(%rip), %rax
    0000020d: 	pxor	%xmm0, %xmm0
    00000211: 	movq	%rbp, %rdi
    00000214: 	cvtsi2sd	%rax, %xmm0
    00000219: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000221: 	addq	$0x48, %rsp
    00000225: 	popq	%rbx
    00000226: 	popq	%rbp
    00000227: 	popq	%r12
    00000229: 	popq	%r13
    0000022b: 	popq	%r14
    0000022d: 	popq	%r15
    0000022f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 559
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp357:
    00000238: 	movl	current_test(%rip), %edx
    0000023e: 	movq	%r15, %rsi
    00000241: 	movl	$0x1, %edi
    00000246: 	xorl	%eax, %eax
    00000248: 	addl	$0x1, %ebx
    0000024b: 	callq	__printf_chk@PLT # Offset: 587
    00000250: 	movl	iterations(%rip), %ebp
    00000256: 	cmpl	%ebp, %ebx
    00000258: 	jge	.Ltmp351 # Offset: 600
    0000025e: 	movsd	init_value(%rip), %xmm7
    00000266: 	pxor	%xmm3, %xmm3
    0000026a: 	jmp	.Ltmp358 # Offset: 618
.Ltmp362:
    0000026f: 	movq	%rbx, %rdi
    00000272: 	leaq	0x30(%rsp), %rsi
    00000277: 	xorl	%edx, %edx
    00000279: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 633
    0000027e: 	movq	%rax, (%rbx)
    00000281: 	movq	%rax, %rdi
    00000284: 	movq	0x30(%rsp), %rax
    00000289: 	movq	%rax, 0x10(%rbx)
.Ltmp369:
    0000028d: 	movq	%r12, %rdx
    00000290: 	movq	%rbp, %rsi
    00000293: 	callq	memcpy@PLT # Offset: 659
    00000298: 	movq	0x30(%rsp), %r12
    0000029d: 	movq	(%rbx), %rdi
    000002a0: 	jmp	.Ltmp366 # Offset: 672
.Ltmp364:
    000002a5: 	movq	-0x8(%rdx), %rax
    000002a9: 	addq	$0x200, %rax
    000002af: 	jmp	.Ltmp367 # Offset: 687
.Ltmp359:
    000002b4: 	movq	0x10(%rsp), %rsi
    000002b9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002c0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 704
    000002c5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002cc: 	jmp	.Ltmp368 # Offset: 716
.Ltmp363:
    000002d1: 	testq	%r12, %r12
    000002d4: 	je	.Ltmp366 # Offset: 724
    000002da: 	jmp	.Ltmp369 # Offset: 730
    000002dc: 	nopl	(%rax) # Size: 4
.Ltmp353:
    000002e0: 	movq	%rax, 0x8(%rsp)
    000002e5: 	movq	DATAat0x2b620(%rip), %rax
    000002ec: 	movapd	%xmm4, %xmm0
    000002f0: 	movsd	%xmm7, 0x28(%rsp)
    000002f6: 	movq	%rax, %xmm2
    000002fb: 	movsd	%xmm5, 0x20(%rsp)
    00000301: 	movsd	%xmm6, 0x18(%rsp)
    00000307: 	callq	__muldc3@PLT # Offset: 775
    0000030c: 	movq	0x8(%rsp), %rax
    00000311: 	pxor	%xmm3, %xmm3
    00000315: 	movsd	0x20(%rsp), %xmm5
    0000031b: 	movsd	0x18(%rsp), %xmm6
    00000321: 	movsd	0x28(%rsp), %xmm7
    00000327: 	addq	$0x10, %rax
    0000032b: 	addsd	%xmm0, %xmm5
    0000032f: 	cmpq	%rax, %r14
    00000332: 	addsd	%xmm1, %xmm6
    00000336: 	jne	.Ltmp354 # Offset: 822
    0000033c: 	jmp	.Ltmp352 # Offset: 828
.Ltmp356:
    00000341: 	movq	DATAat0x2b648(%rip), %rax
    00000348: 	movapd	%xmm8, %xmm0
    0000034d: 	movsd	%xmm7, 0x20(%rsp)
    00000353: 	movsd	%xmm5, 0x18(%rsp)
    00000359: 	movq	%rax, %xmm2
    0000035e: 	movsd	%xmm6, 0x8(%rsp)
    00000364: 	callq	__muldc3@PLT # Offset: 868
    00000369: 	movsd	0x20(%rsp), %xmm7
    0000036f: 	movsd	0x18(%rsp), %xmm5
    00000375: 	movsd	0x8(%rsp), %xmm6
    0000037b: 	movapd	%xmm1, %xmm2
    0000037f: 	jmp	.Ltmp370 # Offset: 895
.Ltmp355:
    00000384: 	movq	DATAat0x2b620(%rip), %rax
    0000038b: 	movapd	%xmm7, %xmm0
    0000038f: 	movapd	%xmm3, %xmm1
    00000393: 	movsd	%xmm5, 0x20(%rsp)
    00000399: 	movsd	%xmm6, 0x18(%rsp)
    0000039f: 	movq	%rax, %xmm2
    000003a4: 	movsd	%xmm7, 0x8(%rsp)
    000003aa: 	callq	__muldc3@PLT # Offset: 938
    000003af: 	pxor	%xmm3, %xmm3
    000003b3: 	movsd	0x20(%rsp), %xmm5
    000003b9: 	movsd	0x18(%rsp), %xmm6
    000003bf: 	movapd	%xmm0, %xmm4
    000003c3: 	movsd	0x8(%rsp), %xmm7
    000003c9: 	movapd	%xmm0, %xmm8
    000003ce: 	mulsd	%xmm3, %xmm4
    000003d2: 	jmp	.Ltmp371 # Offset: 978
.Ltmp365:
    000003d7: 	callq	__stack_chk_fail@PLT # Offset: 983
.Ltmp361:
    000003dc: 	leaq	DATAat0x2b008(%rip), %rdi
    000003e3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 995
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x7010
  Size        : 0x37c
  MaxSize     : 0x380
  Offset      : 0x7010
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x48(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r12d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r12d, %r12d
    00000043: 	jle	.Ltmp372 # Offset: 67
    00000049: 	leal	-0x1(%r14), %eax
    0000004d: 	pxor	%xmm7, %xmm7
    00000051: 	xorl	%ebp, %ebp
    00000053: 	cvtsd2ss	init_value(%rip), %xmm7
    0000005b: 	leaq	0x8(%r13,%rax,8), %rbx
    00000060: 	movss	%xmm7, 0x14(%rsp)
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp377:
    00000070: 	movl	$0x0, 0xc(%rsp)
    00000078: 	movq	%r13, %r15
    0000007b: 	movl	$0x0, 0x10(%rsp)
    00000083: 	testl	%r14d, %r14d
    00000086: 	jle	.Ltmp373 # Offset: 134
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp374:
    00000090: 	movss	0x4(%r15), %xmm1
    00000096: 	movss	(%r15), %xmm0
    0000009b: 	addq	$0x8, %r15
    0000009f: 	movss	DATAat0x2b780(%rip), %xmm3
    000000a7: 	movss	DATAat0x2b770(%rip), %xmm2
    000000af: 	callq	__divsc3@PLT # Offset: 175
    000000b4: 	movss	0x10(%rsp), %xmm5
    000000ba: 	movss	0xc(%rsp), %xmm6
    000000c0: 	movq	%xmm0, 0x38(%rsp)
    000000c6: 	addss	0x38(%rsp), %xmm5
    000000cc: 	addss	0x3c(%rsp), %xmm6
    000000d2: 	movss	%xmm5, 0x10(%rsp)
    000000d8: 	movss	%xmm6, 0xc(%rsp)
    000000de: 	cmpq	%r15, %rbx
    000000e1: 	jne	.Ltmp374 # Offset: 225
.Ltmp373:
    000000e3: 	movss	0x14(%rsp), %xmm0
    000000e9: 	movss	DATAat0x2b780(%rip), %xmm3
    000000f1: 	pxor	%xmm1, %xmm1
    000000f5: 	movss	DATAat0x2b770(%rip), %xmm2
    000000fd: 	callq	__divsc3@PLT # Offset: 253
    00000102: 	movss	DATAat0x2b900(%rip), %xmm2
    0000010a: 	movss	DATAat0x2b900(%rip), %xmm3
    00000112: 	movq	%xmm0, 0x30(%rsp)
    00000118: 	movss	0x30(%rsp), %xmm4
    0000011e: 	pxor	%xmm0, %xmm0
    00000122: 	movss	0x34(%rsp), %xmm1
    00000128: 	mulss	%xmm4, %xmm2
    0000012c: 	mulss	%xmm1, %xmm0
    00000130: 	mulss	%xmm1, %xmm3
    00000134: 	subss	%xmm0, %xmm2
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	mulss	%xmm4, %xmm0
    00000140: 	addss	%xmm3, %xmm0
    00000144: 	ucomiss	%xmm0, %xmm2
    00000147: 	jp	.Ltmp375 # Offset: 327
.Ltmp388:
    0000014d: 	movss	0x10(%rsp), %xmm3
    00000153: 	movss	0xc(%rsp), %xmm1
    00000159: 	subss	%xmm2, %xmm3
    0000015d: 	subss	%xmm0, %xmm1
    00000161: 	movss	%xmm3, 0x20(%rsp)
    00000167: 	movss	%xmm1, 0x24(%rsp)
    0000016d: 	movq	0x20(%rsp), %xmm0
    00000173: 	callq	cabsf@PLT # Offset: 371
    00000178: 	movss	DATAat0x2b908(%rip), %xmm7
    00000180: 	comiss	%xmm0, %xmm7
    00000183: 	jbe	.Ltmp376 # Offset: 387
    00000189: 	addl	$0x1, %ebp
    0000018c: 	cmpl	%r12d, %ebp
    0000018f: 	jl	.Ltmp377 # Offset: 399
.Ltmp372:
    00000195: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000019c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001a3: 	subq	$0x20, %rax
    000001a7: 	cmpq	%rax, %rbx
    000001aa: 	je	.Ltmp378 # Offset: 426
    000001b0: 	movq	0x18(%rsp), %rax
    000001b5: 	leaq	0x10(%rbx), %rdi
    000001b9: 	movq	%rdi, (%rbx)
    000001bc: 	movq	(%rax), %rbp
    000001bf: 	movq	0x8(%rax), %r12
    000001c3: 	movq	%rbp, %rax
    000001c6: 	addq	%r12, %rax
    000001c9: 	je	.Ltmp379 # Offset: 457
    000001cb: 	testq	%rbp, %rbp
    000001ce: 	je	.Ltmp380 # Offset: 462
.Ltmp379:
    000001d4: 	movq	%r12, 0x40(%rsp)
    000001d9: 	cmpq	$0xf, %r12
    000001dd: 	ja	.Ltmp381 # Offset: 477
    000001e3: 	cmpq	$0x1, %r12
    000001e7: 	jne	.Ltmp382 # Offset: 487
    000001ed: 	movzbl	(%rbp), %eax
    000001f1: 	movb	%al, 0x10(%rbx)
.Ltmp385:
    000001f4: 	movq	%r12, 0x8(%rbx)
    000001f8: 	movb	$0x0, (%rdi,%r12)
    000001fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000204: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020b: 	addq	$0x20, %rax
    0000020f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000216: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000021d: 	je	.Ltmp383 # Offset: 541
.Ltmp386:
    00000223: 	movq	-0x20(%rax), %rbp
    00000227: 	callq	clock@PLT # Offset: 551
    0000022c: 	movq	%rax, end_time(%rip)
    00000233: 	movq	0x48(%rsp), %rdx
    00000238: 	subq	%fs:0x28, %rdx
    00000241: 	jne	.Ltmp384 # Offset: 577
    00000247: 	subq	start_time(%rip), %rax
    0000024e: 	pxor	%xmm0, %xmm0
    00000252: 	movq	%rbp, %rdi
    00000255: 	cvtsi2sd	%rax, %xmm0
    0000025a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000262: 	addq	$0x58, %rsp
    00000266: 	popq	%rbx
    00000267: 	popq	%rbp
    00000268: 	popq	%r12
    0000026a: 	popq	%r13
    0000026c: 	popq	%r14
    0000026e: 	popq	%r15
    00000270: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 624
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp376:
    00000278: 	movl	current_test(%rip), %edx
    0000027e: 	movl	$0x1, %edi
    00000283: 	xorl	%eax, %eax
    00000285: 	addl	$0x1, %ebp
    00000288: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000028f: 	callq	__printf_chk@PLT # Offset: 655
    00000294: 	movl	iterations(%rip), %r12d
    0000029b: 	cmpl	%r12d, %ebp
    0000029e: 	jge	.Ltmp372 # Offset: 670
    000002a4: 	pxor	%xmm7, %xmm7
    000002a8: 	cvtsd2ss	init_value(%rip), %xmm7
    000002b0: 	movss	%xmm7, 0x14(%rsp)
    000002b6: 	jmp	.Ltmp377 # Offset: 694
.Ltmp381:
    000002bb: 	movq	%rbx, %rdi
    000002be: 	leaq	0x40(%rsp), %rsi
    000002c3: 	xorl	%edx, %edx
    000002c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 709
    000002ca: 	movq	%rax, (%rbx)
    000002cd: 	movq	%rax, %rdi
    000002d0: 	movq	0x40(%rsp), %rax
    000002d5: 	movq	%rax, 0x10(%rbx)
.Ltmp387:
    000002d9: 	movq	%r12, %rdx
    000002dc: 	movq	%rbp, %rsi
    000002df: 	callq	memcpy@PLT # Offset: 735
    000002e4: 	movq	0x40(%rsp), %r12
    000002e9: 	movq	(%rbx), %rdi
    000002ec: 	jmp	.Ltmp385 # Offset: 748
.Ltmp378:
    000002f1: 	movq	0x18(%rsp), %rsi
    000002f6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002fd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 765
    00000302: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000309: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000310: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000317: 	jne	.Ltmp386 # Offset: 791
.Ltmp383:
    0000031d: 	movq	-0x8(%rdx), %rax
    00000321: 	addq	$0x200, %rax
    00000327: 	jmp	.Ltmp386 # Offset: 807
.Ltmp382:
    0000032c: 	testq	%r12, %r12
    0000032f: 	je	.Ltmp385 # Offset: 815
    00000335: 	jmp	.Ltmp387 # Offset: 821
    00000337: 	nopw	(%rax,%rax) # Size: 9
.Ltmp375:
    00000340: 	movss	DATAat0x2b900(%rip), %xmm2
    00000348: 	movaps	%xmm4, %xmm0
    0000034b: 	pxor	%xmm3, %xmm3
    0000034f: 	callq	__mulsc3@PLT # Offset: 847
    00000354: 	movq	%xmm0, 0x28(%rsp)
    0000035a: 	movss	0x28(%rsp), %xmm2
    00000360: 	movss	0x2c(%rsp), %xmm0
    00000366: 	jmp	.Ltmp388 # Offset: 870
.Ltmp384:
    0000036b: 	callq	__stack_chk_fail@PLT # Offset: 875
.Ltmp380:
    00000370: 	leaq	DATAat0x2b008(%rip), %rdi
    00000377: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 887
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x7390
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0x7390
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp389 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	pxor	%xmm7, %xmm7
    0000004f: 	movl	%ebx, %r14d
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm3, %xmm3
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm7
    0000006d: 	movaps	DATAat0x2b780(%rip), %xmm6
    00000074: 	movss	%xmm7, 0x8(%rsp)
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movaps	DATAat0x2b770(%rip), %xmm7
    00000084: 	shlq	$0x5, %rax
    00000088: 	leaq	0x20(%r12,%rax), %r15
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp396:
    00000090: 	movaps	%xmm3, %xmm5
    00000093: 	movaps	%xmm3, %xmm4
    00000096: 	testl	%ebx, %ebx
    00000098: 	jle	.Ltmp390 # Offset: 152
    0000009e: 	cmpl	$0x2, 0xc(%rsp)
    000000a3: 	jbe	.Ltmp391 # Offset: 163
    000000a9: 	movq	%r12, %rax
    000000ac: 	movaps	%xmm3, %xmm5
    000000af: 	movaps	%xmm3, %xmm4
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp392:
    000000b8: 	movups	(%rax), %xmm0
    000000bb: 	movups	0x10(%rax), %xmm2
    000000bf: 	addq	$0x20, %rax
    000000c3: 	movaps	%xmm0, %xmm1
    000000c6: 	shufps	$0xdd, %xmm2, %xmm0
    000000ca: 	addps	%xmm6, %xmm0
    000000cd: 	shufps	$0x88, %xmm2, %xmm1
    000000d1: 	addps	%xmm7, %xmm1
    000000d4: 	addss	%xmm1, %xmm4
    000000d8: 	movaps	%xmm1, %xmm2
    000000db: 	shufps	$0x55, %xmm1, %xmm2
    000000df: 	addss	%xmm4, %xmm2
    000000e3: 	movaps	%xmm1, %xmm4
    000000e6: 	unpckhps	%xmm1, %xmm4
    000000e9: 	shufps	$0xff, %xmm1, %xmm1
    000000ed: 	addss	%xmm2, %xmm4
    000000f1: 	movaps	%xmm0, %xmm2
    000000f4: 	addss	%xmm5, %xmm2
    000000f8: 	movaps	%xmm0, %xmm5
    000000fb: 	unpckhps	%xmm0, %xmm5
    000000fe: 	addss	%xmm1, %xmm4
    00000102: 	movaps	%xmm0, %xmm1
    00000105: 	shufps	$0x55, %xmm0, %xmm1
    00000109: 	addss	%xmm2, %xmm1
    0000010d: 	shufps	$0xff, %xmm0, %xmm0
    00000111: 	addss	%xmm1, %xmm5
    00000115: 	addss	%xmm0, %xmm5
    00000119: 	cmpq	%r15, %rax
    0000011c: 	jne	.Ltmp392 # Offset: 284
    0000011e: 	movl	%r14d, %eax
    00000121: 	cmpl	%ebx, %r14d
    00000124: 	je	.Ltmp390 # Offset: 292
.Ltmp404:
    00000126: 	movq	DATAat0x2b680(%rip), %xmm2
    0000012e: 	movl	%ebx, %edx
    00000130: 	unpcklps	%xmm5, %xmm4
    00000133: 	subl	%eax, %edx
    00000135: 	leaq	(%r12,%rax,8), %rax
    00000139: 	movq	(%rax), %xmm0
    0000013d: 	addps	%xmm2, %xmm0
    00000140: 	addps	%xmm4, %xmm0
    00000143: 	cmpl	$0x1, %edx
    00000146: 	je	.Ltmp393 # Offset: 326
    00000148: 	movq	0x8(%rax), %xmm1
    0000014d: 	addps	%xmm2, %xmm1
    00000150: 	addps	%xmm1, %xmm0
    00000153: 	cmpl	$0x2, %edx
    00000156: 	je	.Ltmp393 # Offset: 342
    00000158: 	movq	0x10(%rax), %xmm1
    0000015d: 	addps	%xmm2, %xmm1
    00000160: 	addps	%xmm1, %xmm0
.Ltmp393:
    00000163: 	movaps	%xmm0, %xmm4
    00000166: 	shufps	$0xe5, %xmm0, %xmm0
    0000016a: 	movaps	%xmm0, %xmm5
.Ltmp390:
    0000016d: 	movss	0x8(%rsp), %xmm8
    00000174: 	movss	DATAat0x2b900(%rip), %xmm1
    0000017c: 	subss	DATAat0x2b918(%rip), %xmm8
    00000185: 	mulss	%xmm8, %xmm1
    0000018a: 	movaps	%xmm8, %xmm0
    0000018e: 	mulss	%xmm3, %xmm0
    00000192: 	subss	DATAat0x2b91c(%rip), %xmm0
    0000019a: 	addss	%xmm3, %xmm1
    0000019e: 	ucomiss	%xmm0, %xmm1
    000001a1: 	jp	.Ltmp394 # Offset: 417
.Ltmp408:
    000001a7: 	subss	%xmm0, %xmm5
    000001ab: 	subss	%xmm1, %xmm4
    000001af: 	movss	%xmm5, 0x24(%rsp)
    000001b5: 	movss	%xmm4, 0x20(%rsp)
    000001bb: 	movq	0x20(%rsp), %xmm0
    000001c1: 	callq	cabsf@PLT # Offset: 449
    000001c6: 	movss	DATAat0x2b908(%rip), %xmm3
    000001ce: 	movaps	DATAat0x2b770(%rip), %xmm7
    000001d5: 	movaps	DATAat0x2b780(%rip), %xmm6
    000001dc: 	comiss	%xmm0, %xmm3
    000001df: 	pxor	%xmm3, %xmm3
    000001e3: 	jbe	.Ltmp395 # Offset: 483
    000001e9: 	addl	$0x1, %ebp
    000001ec: 	cmpl	%r13d, %ebp
    000001ef: 	jl	.Ltmp396 # Offset: 495
.Ltmp389:
    000001f5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000203: 	subq	$0x20, %rax
    00000207: 	cmpq	%rax, %rbx
    0000020a: 	je	.Ltmp397 # Offset: 522
    00000210: 	movq	0x10(%rsp), %rax
    00000215: 	leaq	0x10(%rbx), %rdi
    00000219: 	movq	%rdi, (%rbx)
    0000021c: 	movq	(%rax), %rbp
    0000021f: 	movq	0x8(%rax), %r12
    00000223: 	movq	%rbp, %rax
    00000226: 	addq	%r12, %rax
    00000229: 	je	.Ltmp398 # Offset: 553
    0000022b: 	testq	%rbp, %rbp
    0000022e: 	je	.Ltmp399 # Offset: 558
.Ltmp398:
    00000234: 	movq	%r12, 0x30(%rsp)
    00000239: 	cmpq	$0xf, %r12
    0000023d: 	ja	.Ltmp400 # Offset: 573
    00000243: 	cmpq	$0x1, %r12
    00000247: 	jne	.Ltmp401 # Offset: 583
    0000024d: 	movzbl	(%rbp), %eax
    00000251: 	movb	%al, 0x10(%rbx)
.Ltmp405:
    00000254: 	movq	%r12, 0x8(%rbx)
    00000258: 	movb	$0x0, (%rdi,%r12)
    0000025d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000264: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026b: 	addq	$0x20, %rax
    0000026f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000276: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000027d: 	je	.Ltmp402 # Offset: 637
.Ltmp406:
    00000283: 	movq	-0x20(%rax), %rbp
    00000287: 	callq	clock@PLT # Offset: 647
    0000028c: 	movq	%rax, end_time(%rip)
    00000293: 	movq	0x38(%rsp), %rdx
    00000298: 	subq	%fs:0x28, %rdx
    000002a1: 	jne	.Ltmp403 # Offset: 673
    000002a7: 	subq	start_time(%rip), %rax
    000002ae: 	pxor	%xmm0, %xmm0
    000002b2: 	movq	%rbp, %rdi
    000002b5: 	cvtsi2sd	%rax, %xmm0
    000002ba: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002c2: 	addq	$0x48, %rsp
    000002c6: 	popq	%rbx
    000002c7: 	popq	%rbp
    000002c8: 	popq	%r12
    000002ca: 	popq	%r13
    000002cc: 	popq	%r14
    000002ce: 	popq	%r15
    000002d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 720
    000002d5: 	nopl	(%rax) # Size: 3
.Ltmp395:
    000002d8: 	movl	current_test(%rip), %edx
    000002de: 	movl	$0x1, %edi
    000002e3: 	xorl	%eax, %eax
    000002e5: 	addl	$0x1, %ebp
    000002e8: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r13d
    000002fb: 	cmpl	%r13d, %ebp
    000002fe: 	jge	.Ltmp389 # Offset: 766
    00000304: 	pxor	%xmm6, %xmm6
    00000308: 	movaps	DATAat0x2b770(%rip), %xmm7
    0000030f: 	pxor	%xmm3, %xmm3
    00000313: 	cvtsd2ss	init_value(%rip), %xmm6
    0000031b: 	movss	%xmm6, 0x8(%rsp)
    00000321: 	movaps	DATAat0x2b780(%rip), %xmm6
    00000328: 	jmp	.Ltmp396 # Offset: 808
.Ltmp391:
    0000032d: 	xorl	%eax, %eax
    0000032f: 	movaps	%xmm3, %xmm5
    00000332: 	movaps	%xmm3, %xmm4
    00000335: 	jmp	.Ltmp404 # Offset: 821
.Ltmp400:
    0000033a: 	movq	%rbx, %rdi
    0000033d: 	leaq	0x30(%rsp), %rsi
    00000342: 	xorl	%edx, %edx
    00000344: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 836
    00000349: 	movq	%rax, (%rbx)
    0000034c: 	movq	%rax, %rdi
    0000034f: 	movq	0x30(%rsp), %rax
    00000354: 	movq	%rax, 0x10(%rbx)
.Ltmp407:
    00000358: 	movq	%r12, %rdx
    0000035b: 	movq	%rbp, %rsi
    0000035e: 	callq	memcpy@PLT # Offset: 862
    00000363: 	movq	0x30(%rsp), %r12
    00000368: 	movq	(%rbx), %rdi
    0000036b: 	jmp	.Ltmp405 # Offset: 875
.Ltmp397:
    00000370: 	movq	0x10(%rsp), %rsi
    00000375: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 892
    00000381: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000388: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000396: 	jne	.Ltmp406 # Offset: 918
.Ltmp402:
    0000039c: 	movq	-0x8(%rdx), %rax
    000003a0: 	addq	$0x200, %rax
    000003a6: 	jmp	.Ltmp406 # Offset: 934
.Ltmp401:
    000003ab: 	testq	%r12, %r12
    000003ae: 	je	.Ltmp405 # Offset: 942
    000003b4: 	jmp	.Ltmp407 # Offset: 948
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp394:
    000003c0: 	movss	DATAat0x2b780(%rip), %xmm1
    000003c8: 	movaps	%xmm8, %xmm0
    000003cc: 	movss	DATAat0x2b900(%rip), %xmm2
    000003d4: 	movss	%xmm4, 0x1c(%rsp)
    000003da: 	movss	%xmm5, 0x18(%rsp)
    000003e0: 	callq	__mulsc3@PLT # Offset: 992
    000003e5: 	movss	0x1c(%rsp), %xmm4
    000003eb: 	movss	0x18(%rsp), %xmm5
    000003f1: 	movq	%xmm0, 0x28(%rsp)
    000003f7: 	movss	0x28(%rsp), %xmm1
    000003fd: 	movss	0x2c(%rsp), %xmm0
    00000403: 	jmp	.Ltmp408 # Offset: 1027
.Ltmp403:
    00000408: 	callq	__stack_chk_fail@PLT # Offset: 1032
.Ltmp399:
    0000040d: 	leaq	DATAat0x2b008(%rip), %rdi
    00000414: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1044
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x77b0
  Size        : 0x323
  MaxSize     : 0x330
  Offset      : 0x77b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp409 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm3
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	movapd	DATAat0x2b790(%rip), %xmm5
    0000005b: 	xorl	%ebx, %ebx
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000068: 	leaq	0x10(%r12,%rax), %r14
    0000006d: 	movsd	%xmm3, (%rsp)
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp414:
    00000078: 	pxor	%xmm4, %xmm4
    0000007c: 	movq	%r12, %rax
    0000007f: 	pxor	%xmm1, %xmm1
    00000083: 	movapd	%xmm4, %xmm6
    00000087: 	testl	%r13d, %r13d
    0000008a: 	jle	.Ltmp410 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp411:
    00000090: 	movupd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addpd	%xmm5, %xmm0
    0000009c: 	addpd	%xmm0, %xmm1
    000000a0: 	cmpq	%r14, %rax
    000000a3: 	jne	.Ltmp411 # Offset: 163
    000000a5: 	movapd	%xmm1, %xmm6
    000000a9: 	unpckhpd	%xmm1, %xmm1
    000000ad: 	movapd	%xmm1, %xmm4
.Ltmp410:
    000000b1: 	movsd	(%rsp), %xmm0
    000000b6: 	subsd	DATAat0x2b730(%rip), %xmm0
    000000be: 	pxor	%xmm7, %xmm7
    000000c2: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000ca: 	movapd	%xmm7, %xmm1
    000000ce: 	mulsd	%xmm0, %xmm2
    000000d2: 	mulsd	%xmm0, %xmm1
    000000d6: 	subsd	DATAat0x2b668(%rip), %xmm1
    000000de: 	addsd	%xmm7, %xmm2
    000000e2: 	ucomisd	%xmm1, %xmm2
    000000e6: 	jp	.Ltmp412 # Offset: 230
.Ltmp425:
    000000ec: 	subsd	%xmm2, %xmm6
    000000f0: 	subsd	%xmm1, %xmm4
    000000f4: 	movapd	%xmm6, %xmm0
    000000f8: 	movapd	%xmm4, %xmm1
    000000fc: 	callq	cabs@PLT # Offset: 252
    00000101: 	movsd	DATAat0x2b658(%rip), %xmm3
    00000109: 	movapd	DATAat0x2b790(%rip), %xmm5
    00000111: 	comisd	%xmm0, %xmm3
    00000115: 	jbe	.Ltmp413 # Offset: 277
    0000011b: 	addl	$0x1, %ebx
    0000011e: 	cmpl	%ebp, %ebx
    00000120: 	jl	.Ltmp414 # Offset: 288
.Ltmp409:
    00000126: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000012d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000134: 	subq	$0x20, %rax
    00000138: 	cmpq	%rax, %rbx
    0000013b: 	je	.Ltmp415 # Offset: 315
    00000141: 	movq	0x8(%rsp), %rax
    00000146: 	leaq	0x10(%rbx), %rdi
    0000014a: 	movq	%rdi, (%rbx)
    0000014d: 	movq	(%rax), %rbp
    00000150: 	movq	0x8(%rax), %r12
    00000154: 	movq	%rbp, %rax
    00000157: 	addq	%r12, %rax
    0000015a: 	je	.Ltmp416 # Offset: 346
    0000015c: 	testq	%rbp, %rbp
    0000015f: 	je	.Ltmp417 # Offset: 351
.Ltmp416:
    00000165: 	movq	%r12, 0x20(%rsp)
    0000016a: 	cmpq	$0xf, %r12
    0000016e: 	ja	.Ltmp418 # Offset: 366
    00000174: 	cmpq	$0x1, %r12
    00000178: 	jne	.Ltmp419 # Offset: 376
    0000017e: 	movzbl	(%rbp), %eax
    00000182: 	movb	%al, 0x10(%rbx)
.Ltmp422:
    00000185: 	movq	%r12, 0x8(%rbx)
    00000189: 	movb	$0x0, (%rdi,%r12)
    0000018e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000019c: 	addq	$0x20, %rax
    000001a0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001a7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001ae: 	je	.Ltmp420 # Offset: 430
.Ltmp423:
    000001b4: 	movq	-0x20(%rax), %rbp
    000001b8: 	callq	clock@PLT # Offset: 440
    000001bd: 	movq	%rax, end_time(%rip)
    000001c4: 	movq	0x28(%rsp), %rdx
    000001c9: 	subq	%fs:0x28, %rdx
    000001d2: 	jne	.Ltmp421 # Offset: 466
    000001d8: 	subq	start_time(%rip), %rax
    000001df: 	pxor	%xmm0, %xmm0
    000001e3: 	movq	%rbp, %rdi
    000001e6: 	cvtsi2sd	%rax, %xmm0
    000001eb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001f3: 	addq	$0x38, %rsp
    000001f7: 	popq	%rbx
    000001f8: 	popq	%rbp
    000001f9: 	popq	%r12
    000001fb: 	popq	%r13
    000001fd: 	popq	%r14
    000001ff: 	popq	%r15
    00000201: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 513
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp413:
    00000210: 	movl	current_test(%rip), %edx
    00000216: 	movq	%r15, %rsi
    00000219: 	movl	$0x1, %edi
    0000021e: 	xorl	%eax, %eax
    00000220: 	addl	$0x1, %ebx
    00000223: 	callq	__printf_chk@PLT # Offset: 547
    00000228: 	movl	iterations(%rip), %ebp
    0000022e: 	cmpl	%ebp, %ebx
    00000230: 	jge	.Ltmp409 # Offset: 560
    00000236: 	movsd	init_value(%rip), %xmm7
    0000023e: 	movapd	DATAat0x2b790(%rip), %xmm5
    00000246: 	movsd	%xmm7, (%rsp)
    0000024b: 	jmp	.Ltmp414 # Offset: 587
.Ltmp418:
    00000250: 	movq	%rbx, %rdi
    00000253: 	leaq	0x20(%rsp), %rsi
    00000258: 	xorl	%edx, %edx
    0000025a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 602
    0000025f: 	movq	%rax, (%rbx)
    00000262: 	movq	%rax, %rdi
    00000265: 	movq	0x20(%rsp), %rax
    0000026a: 	movq	%rax, 0x10(%rbx)
.Ltmp424:
    0000026e: 	movq	%r12, %rdx
    00000271: 	movq	%rbp, %rsi
    00000274: 	callq	memcpy@PLT # Offset: 628
    00000279: 	movq	0x20(%rsp), %r12
    0000027e: 	movq	(%rbx), %rdi
    00000281: 	jmp	.Ltmp422 # Offset: 641
.Ltmp415:
    00000286: 	movq	0x8(%rsp), %rsi
    0000028b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000292: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 658
    00000297: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000029e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ac: 	jne	.Ltmp423 # Offset: 684
.Ltmp420:
    000002b2: 	movq	-0x8(%rdx), %rax
    000002b6: 	addq	$0x200, %rax
    000002bc: 	jmp	.Ltmp423 # Offset: 700
.Ltmp419:
    000002c1: 	testq	%r12, %r12
    000002c4: 	je	.Ltmp422 # Offset: 708
    000002ca: 	jmp	.Ltmp424 # Offset: 714
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp412:
    000002d0: 	movq	DATAat0x2b648(%rip), %rax
    000002d7: 	pxor	%xmm3, %xmm3
    000002db: 	movsd	%xmm4, 0x18(%rsp)
    000002e1: 	movsd	%xmm6, 0x10(%rsp)
    000002e7: 	movq	%rax, %xmm2
    000002ec: 	movq	DATAat0x2b798(%rip), %rax
    000002f3: 	movq	%rax, %xmm1
    000002f8: 	callq	__muldc3@PLT # Offset: 760
    000002fd: 	movsd	0x18(%rsp), %xmm4
    00000303: 	movsd	0x10(%rsp), %xmm6
    00000309: 	movapd	%xmm0, %xmm2
    0000030d: 	jmp	.Ltmp425 # Offset: 781
.Ltmp421:
    00000312: 	callq	__stack_chk_fail@PLT # Offset: 786
.Ltmp417:
    00000317: 	leaq	DATAat0x2b008(%rip), %rdi
    0000031e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 798
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x7ae0
  Size        : 0x45b
  MaxSize     : 0x460
  Offset      : 0x7ae0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x48(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp426 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	pxor	%xmm10, %xmm10
    00000050: 	pxor	%xmm9, %xmm9
    00000055: 	xorl	%ebx, %ebx
    00000057: 	movss	DATAat0x2b750(%rip), %xmm8
    00000060: 	movss	DATAat0x2b760(%rip), %xmm7
    00000068: 	leaq	0x8(%r12,%rax,8), %r14
    0000006d: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000074: 	cvtsd2ss	init_value(%rip), %xmm10
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp433:
    00000080: 	movq	%r12, %rax
    00000083: 	movaps	%xmm9, %xmm5
    00000087: 	movaps	%xmm9, %xmm6
    0000008b: 	testl	%r13d, %r13d
    0000008e: 	jle	.Ltmp427 # Offset: 142
.Ltmp429:
    00000090: 	movss	(%rax), %xmm4
    00000094: 	movss	0x4(%rax), %xmm1
    00000099: 	movaps	%xmm4, %xmm2
    0000009c: 	movaps	%xmm1, %xmm0
    0000009f: 	movaps	%xmm4, %xmm3
    000000a2: 	mulss	%xmm7, %xmm0
    000000a6: 	mulss	%xmm8, %xmm2
    000000ab: 	mulss	%xmm7, %xmm3
    000000af: 	subss	%xmm0, %xmm2
    000000b3: 	movaps	%xmm1, %xmm0
    000000b6: 	mulss	%xmm8, %xmm0
    000000bb: 	addss	%xmm3, %xmm0
    000000bf: 	ucomiss	%xmm2, %xmm0
    000000c2: 	jp	.Ltmp428 # Offset: 194
    000000c8: 	addq	$0x8, %rax
    000000cc: 	addss	%xmm2, %xmm6
    000000d0: 	addss	%xmm0, %xmm5
    000000d4: 	cmpq	%r14, %rax
    000000d7: 	jne	.Ltmp429 # Offset: 215
.Ltmp427:
    000000d9: 	movaps	%xmm10, %xmm4
    000000dd: 	movaps	%xmm10, %xmm1
    000000e1: 	mulss	%xmm8, %xmm4
    000000e6: 	mulss	%xmm7, %xmm1
    000000ea: 	addss	%xmm9, %xmm4
    000000ef: 	ucomiss	%xmm4, %xmm1
    000000f2: 	jp	.Ltmp430 # Offset: 242
.Ltmp446:
    000000f8: 	movss	DATAat0x2b900(%rip), %xmm2
    00000100: 	movaps	%xmm1, %xmm0
    00000103: 	movss	DATAat0x2b900(%rip), %xmm3
    0000010b: 	mulss	%xmm9, %xmm0
    00000110: 	mulss	%xmm4, %xmm2
    00000114: 	mulss	%xmm1, %xmm3
    00000118: 	subss	%xmm0, %xmm2
    0000011c: 	movaps	%xmm4, %xmm0
    0000011f: 	mulss	%xmm9, %xmm0
    00000124: 	addss	%xmm3, %xmm0
    00000128: 	ucomiss	%xmm0, %xmm2
    0000012b: 	jp	.Ltmp431 # Offset: 299
.Ltmp445:
    00000131: 	subss	%xmm0, %xmm5
    00000135: 	subss	%xmm2, %xmm6
    00000139: 	movss	%xmm10, (%rsp)
    0000013f: 	movss	%xmm5, 0x24(%rsp)
    00000145: 	movss	%xmm6, 0x20(%rsp)
    0000014b: 	movq	0x20(%rsp), %xmm0
    00000151: 	callq	cabsf@PLT # Offset: 337
    00000156: 	movss	(%rsp), %xmm10
    0000015c: 	pxor	%xmm9, %xmm9
    00000161: 	movss	DATAat0x2b908(%rip), %xmm5
    00000169: 	movss	DATAat0x2b750(%rip), %xmm8
    00000172: 	movss	DATAat0x2b760(%rip), %xmm7
    0000017a: 	comiss	%xmm0, %xmm5
    0000017d: 	jbe	.Ltmp432 # Offset: 381
    00000183: 	addl	$0x1, %ebx
    00000186: 	cmpl	%ebp, %ebx
    00000188: 	jl	.Ltmp433 # Offset: 392
.Ltmp426:
    0000018e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019c: 	subq	$0x20, %rax
    000001a0: 	cmpq	%rax, %rbx
    000001a3: 	je	.Ltmp434 # Offset: 419
    000001a9: 	movq	0x8(%rsp), %rax
    000001ae: 	leaq	0x10(%rbx), %rdi
    000001b2: 	movq	%rdi, (%rbx)
    000001b5: 	movq	(%rax), %rbp
    000001b8: 	movq	0x8(%rax), %r12
    000001bc: 	movq	%rbp, %rax
    000001bf: 	addq	%r12, %rax
    000001c2: 	je	.Ltmp435 # Offset: 450
    000001c4: 	testq	%rbp, %rbp
    000001c7: 	je	.Ltmp436 # Offset: 455
.Ltmp435:
    000001cd: 	movq	%r12, 0x40(%rsp)
    000001d2: 	cmpq	$0xf, %r12
    000001d6: 	ja	.Ltmp437 # Offset: 470
    000001dc: 	cmpq	$0x1, %r12
    000001e0: 	jne	.Ltmp438 # Offset: 480
    000001e6: 	movzbl	(%rbp), %eax
    000001ea: 	movb	%al, 0x10(%rbx)
.Ltmp441:
    000001ed: 	movq	%r12, 0x8(%rbx)
    000001f1: 	movb	$0x0, (%rdi,%r12)
    000001f6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fd: 	addq	$0x20, %rax
    00000201: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp443:
    00000208: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	je	.Ltmp439 # Offset: 534
.Ltmp442:
    0000021c: 	movq	-0x20(%rax), %rbp
    00000220: 	callq	clock@PLT # Offset: 544
    00000225: 	movq	%rax, end_time(%rip)
    0000022c: 	movq	0x48(%rsp), %rdx
    00000231: 	subq	%fs:0x28, %rdx
    0000023a: 	jne	.Ltmp440 # Offset: 570
    00000240: 	subq	start_time(%rip), %rax
    00000247: 	pxor	%xmm0, %xmm0
    0000024b: 	movq	%rbp, %rdi
    0000024e: 	cvtsi2sd	%rax, %xmm0
    00000253: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000025b: 	addq	$0x58, %rsp
    0000025f: 	popq	%rbx
    00000260: 	popq	%rbp
    00000261: 	popq	%r12
    00000263: 	popq	%r13
    00000265: 	popq	%r14
    00000267: 	popq	%r15
    00000269: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 617
    0000026e: 	nop # Size: 2
.Ltmp432:
    00000270: 	movl	current_test(%rip), %edx
    00000276: 	movq	%r15, %rsi
    00000279: 	movl	$0x1, %edi
    0000027e: 	xorl	%eax, %eax
    00000280: 	addl	$0x1, %ebx
    00000283: 	callq	__printf_chk@PLT # Offset: 643
    00000288: 	movl	iterations(%rip), %ebp
    0000028e: 	cmpl	%ebp, %ebx
    00000290: 	jge	.Ltmp426 # Offset: 656
    00000296: 	pxor	%xmm10, %xmm10
    0000029b: 	movss	DATAat0x2b760(%rip), %xmm7
    000002a3: 	pxor	%xmm9, %xmm9
    000002a8: 	movss	DATAat0x2b750(%rip), %xmm8
    000002b1: 	cvtsd2ss	init_value(%rip), %xmm10
    000002ba: 	jmp	.Ltmp433 # Offset: 698
.Ltmp437:
    000002bf: 	movq	%rbx, %rdi
    000002c2: 	leaq	0x40(%rsp), %rsi
    000002c7: 	xorl	%edx, %edx
    000002c9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 713
    000002ce: 	movq	%rax, (%rbx)
    000002d1: 	movq	%rax, %rdi
    000002d4: 	movq	0x40(%rsp), %rax
    000002d9: 	movq	%rax, 0x10(%rbx)
.Ltmp444:
    000002dd: 	movq	%r12, %rdx
    000002e0: 	movq	%rbp, %rsi
    000002e3: 	callq	memcpy@PLT # Offset: 739
    000002e8: 	movq	0x40(%rsp), %r12
    000002ed: 	movq	(%rbx), %rdi
    000002f0: 	jmp	.Ltmp441 # Offset: 752
.Ltmp439:
    000002f5: 	movq	-0x8(%rdx), %rax
    000002f9: 	addq	$0x200, %rax
    000002ff: 	jmp	.Ltmp442 # Offset: 767
.Ltmp434:
    00000304: 	movq	0x8(%rsp), %rsi
    00000309: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000310: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 784
    00000315: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000031c: 	jmp	.Ltmp443 # Offset: 796
.Ltmp438:
    00000321: 	testq	%r12, %r12
    00000324: 	je	.Ltmp441 # Offset: 804
    0000032a: 	jmp	.Ltmp444 # Offset: 810
    0000032c: 	nopl	(%rax) # Size: 4
.Ltmp428:
    00000330: 	movaps	%xmm7, %xmm3
    00000333: 	movaps	%xmm8, %xmm2
    00000337: 	movaps	%xmm4, %xmm0
    0000033a: 	movq	%rax, (%rsp)
    0000033e: 	movss	%xmm10, 0x1c(%rsp)
    00000345: 	movss	%xmm6, 0x18(%rsp)
    0000034b: 	movss	%xmm5, 0x14(%rsp)
    00000351: 	callq	__mulsc3@PLT # Offset: 849
    00000356: 	movq	(%rsp), %rax
    0000035a: 	movss	0x18(%rsp), %xmm6
    00000360: 	pxor	%xmm9, %xmm9
    00000365: 	movq	%xmm0, 0x38(%rsp)
    0000036b: 	movss	0x14(%rsp), %xmm5
    00000371: 	addss	0x38(%rsp), %xmm6
    00000377: 	addq	$0x8, %rax
    0000037b: 	addss	0x3c(%rsp), %xmm5
    00000381: 	movss	DATAat0x2b750(%rip), %xmm8
    0000038a: 	cmpq	%rax, %r14
    0000038d: 	movss	DATAat0x2b760(%rip), %xmm7
    00000395: 	movss	0x1c(%rsp), %xmm10
    0000039c: 	jne	.Ltmp429 # Offset: 924
    000003a2: 	jmp	.Ltmp427 # Offset: 930
.Ltmp431:
    000003a7: 	movss	DATAat0x2b900(%rip), %xmm2
    000003af: 	movaps	%xmm4, %xmm0
    000003b2: 	movaps	%xmm9, %xmm3
    000003b6: 	movss	%xmm10, 0x18(%rsp)
    000003bd: 	movss	%xmm6, 0x14(%rsp)
    000003c3: 	movss	%xmm5, (%rsp)
    000003c8: 	callq	__mulsc3@PLT # Offset: 968
    000003cd: 	movss	0x14(%rsp), %xmm6
    000003d3: 	movss	(%rsp), %xmm5
    000003d8: 	movq	%xmm0, 0x28(%rsp)
    000003de: 	movss	0x18(%rsp), %xmm10
    000003e5: 	movss	0x28(%rsp), %xmm2
    000003eb: 	movss	0x2c(%rsp), %xmm0
    000003f1: 	jmp	.Ltmp445 # Offset: 1009
.Ltmp430:
    000003f6: 	movaps	%xmm9, %xmm1
    000003fa: 	movaps	%xmm10, %xmm0
    000003fe: 	movaps	%xmm7, %xmm3
    00000401: 	movss	%xmm6, 0x18(%rsp)
    00000407: 	movaps	%xmm8, %xmm2
    0000040b: 	movss	%xmm5, 0x14(%rsp)
    00000411: 	movss	%xmm10, (%rsp)
    00000417: 	callq	__mulsc3@PLT # Offset: 1047
    0000041c: 	movss	0x18(%rsp), %xmm6
    00000422: 	movss	0x14(%rsp), %xmm5
    00000428: 	pxor	%xmm9, %xmm9
    0000042d: 	movq	%xmm0, 0x30(%rsp)
    00000433: 	movss	(%rsp), %xmm10
    00000439: 	movss	0x30(%rsp), %xmm4
    0000043f: 	movss	0x34(%rsp), %xmm1
    00000445: 	jmp	.Ltmp446 # Offset: 1093
.Ltmp440:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
.Ltmp436:
    0000044f: 	leaq	DATAat0x2b008(%rip), %rdi
    00000456: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1110
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x7f40
  Size        : 0x343
  MaxSize     : 0x350
  Offset      : 0x7f40
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r12d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r12d, %r12d
    00000043: 	jle	.Ltmp447 # Offset: 67
    00000049: 	movsd	init_value(%rip), %xmm7
    00000051: 	leal	-0x1(%r14), %eax
    00000055: 	xorl	%ebp, %ebp
    00000057: 	shlq	$0x4, %rax
    0000005b: 	leaq	0x10(%r13,%rax), %rbx
    00000060: 	movsd	%xmm7, 0x10(%rsp)
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp452:
    00000070: 	movq	$0x0, (%rsp)
    00000078: 	movq	%r13, %r15
    0000007b: 	movq	$0x0, 0x8(%rsp)
    00000084: 	testl	%r14d, %r14d
    00000087: 	jle	.Ltmp448 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp449:
    00000090: 	movq	DATAat0x2b838(%rip), %rax
    00000097: 	movsd	0x8(%r15), %xmm1
    0000009d: 	addq	$0x10, %r15
    000000a1: 	movsd	-0x10(%r15), %xmm0
    000000a7: 	movq	%rax, %xmm3
    000000ac: 	movq	DATAat0x2b830(%rip), %rax
    000000b3: 	movq	%rax, %xmm2
    000000b8: 	callq	__divdc3@PLT # Offset: 184
    000000bd: 	addsd	0x8(%rsp), %xmm0
    000000c3: 	addsd	(%rsp), %xmm1
    000000c8: 	movsd	%xmm0, 0x8(%rsp)
    000000ce: 	movsd	%xmm1, (%rsp)
    000000d3: 	cmpq	%r15, %rbx
    000000d6: 	jne	.Ltmp449 # Offset: 214
.Ltmp448:
    000000d8: 	movq	DATAat0x2b838(%rip), %rax
    000000df: 	movsd	0x10(%rsp), %xmm0
    000000e5: 	pxor	%xmm1, %xmm1
    000000e9: 	movq	%rax, %xmm3
    000000ee: 	movq	DATAat0x2b830(%rip), %rax
    000000f5: 	movq	%rax, %xmm2
    000000fa: 	callq	__divdc3@PLT # Offset: 250
    000000ff: 	movsd	DATAat0x2b648(%rip), %xmm3
    00000107: 	pxor	%xmm2, %xmm2
    0000010b: 	movsd	DATAat0x2b648(%rip), %xmm4
    00000113: 	mulsd	%xmm1, %xmm2
    00000117: 	mulsd	%xmm0, %xmm3
    0000011b: 	mulsd	%xmm1, %xmm4
    0000011f: 	subsd	%xmm2, %xmm3
    00000123: 	pxor	%xmm2, %xmm2
    00000127: 	mulsd	%xmm0, %xmm2
    0000012b: 	addsd	%xmm4, %xmm2
    0000012f: 	ucomisd	%xmm2, %xmm3
    00000133: 	jp	.Ltmp450 # Offset: 307
.Ltmp463:
    00000139: 	movsd	0x8(%rsp), %xmm0
    0000013f: 	movsd	(%rsp), %xmm1
    00000144: 	subsd	%xmm3, %xmm0
    00000148: 	subsd	%xmm2, %xmm1
    0000014c: 	callq	cabs@PLT # Offset: 332
    00000151: 	movsd	DATAat0x2b658(%rip), %xmm7
    00000159: 	comisd	%xmm0, %xmm7
    0000015d: 	jbe	.Ltmp451 # Offset: 349
    00000163: 	addl	$0x1, %ebp
    00000166: 	cmpl	%r12d, %ebp
    00000169: 	jl	.Ltmp452 # Offset: 361
.Ltmp447:
    0000016f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000017d: 	subq	$0x20, %rax
    00000181: 	cmpq	%rax, %rbx
    00000184: 	je	.Ltmp453 # Offset: 388
    0000018a: 	movq	0x18(%rsp), %rax
    0000018f: 	leaq	0x10(%rbx), %rdi
    00000193: 	movq	%rdi, (%rbx)
    00000196: 	movq	(%rax), %rbp
    00000199: 	movq	0x8(%rax), %r12
    0000019d: 	movq	%rbp, %rax
    000001a0: 	addq	%r12, %rax
    000001a3: 	je	.Ltmp454 # Offset: 419
    000001a5: 	testq	%rbp, %rbp
    000001a8: 	je	.Ltmp455 # Offset: 424
.Ltmp454:
    000001ae: 	movq	%r12, 0x20(%rsp)
    000001b3: 	cmpq	$0xf, %r12
    000001b7: 	ja	.Ltmp456 # Offset: 439
    000001bd: 	cmpq	$0x1, %r12
    000001c1: 	jne	.Ltmp457 # Offset: 449
    000001c7: 	movzbl	(%rbp), %eax
    000001cb: 	movb	%al, 0x10(%rbx)
.Ltmp460:
    000001ce: 	movq	%r12, 0x8(%rbx)
    000001d2: 	movb	$0x0, (%rdi,%r12)
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e5: 	addq	$0x20, %rax
    000001e9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f0: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001f7: 	je	.Ltmp458 # Offset: 503
.Ltmp461:
    000001fd: 	movq	-0x20(%rax), %rbp
    00000201: 	callq	clock@PLT # Offset: 513
    00000206: 	movq	%rax, end_time(%rip)
    0000020d: 	movq	0x28(%rsp), %rdx
    00000212: 	subq	%fs:0x28, %rdx
    0000021b: 	jne	.Ltmp459 # Offset: 539
    00000221: 	subq	start_time(%rip), %rax
    00000228: 	pxor	%xmm0, %xmm0
    0000022c: 	movq	%rbp, %rdi
    0000022f: 	cvtsi2sd	%rax, %xmm0
    00000234: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000023c: 	addq	$0x38, %rsp
    00000240: 	popq	%rbx
    00000241: 	popq	%rbp
    00000242: 	popq	%r12
    00000244: 	popq	%r13
    00000246: 	popq	%r14
    00000248: 	popq	%r15
    0000024a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 586
    0000024f: 	nop # Size: 1
.Ltmp451:
    00000250: 	movl	current_test(%rip), %edx
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	addl	$0x1, %ebp
    00000260: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00000267: 	callq	__printf_chk@PLT # Offset: 615
    0000026c: 	movl	iterations(%rip), %r12d
    00000273: 	cmpl	%r12d, %ebp
    00000276: 	jge	.Ltmp447 # Offset: 630
    0000027c: 	movsd	init_value(%rip), %xmm7
    00000284: 	movsd	%xmm7, 0x10(%rsp)
    0000028a: 	jmp	.Ltmp452 # Offset: 650
.Ltmp456:
    0000028f: 	movq	%rbx, %rdi
    00000292: 	leaq	0x20(%rsp), %rsi
    00000297: 	xorl	%edx, %edx
    00000299: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 665
    0000029e: 	movq	%rax, (%rbx)
    000002a1: 	movq	%rax, %rdi
    000002a4: 	movq	0x20(%rsp), %rax
    000002a9: 	movq	%rax, 0x10(%rbx)
.Ltmp462:
    000002ad: 	movq	%r12, %rdx
    000002b0: 	movq	%rbp, %rsi
    000002b3: 	callq	memcpy@PLT # Offset: 691
    000002b8: 	movq	0x20(%rsp), %r12
    000002bd: 	movq	(%rbx), %rdi
    000002c0: 	jmp	.Ltmp460 # Offset: 704
.Ltmp453:
    000002c5: 	movq	0x18(%rsp), %rsi
    000002ca: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002d1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 721
    000002d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002eb: 	jne	.Ltmp461 # Offset: 747
.Ltmp458:
    000002f1: 	movq	-0x8(%rdx), %rax
    000002f5: 	addq	$0x200, %rax
    000002fb: 	jmp	.Ltmp461 # Offset: 763
.Ltmp457:
    00000300: 	testq	%r12, %r12
    00000303: 	je	.Ltmp460 # Offset: 771
    00000309: 	jmp	.Ltmp462 # Offset: 777
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp450:
    00000310: 	movq	DATAat0x2b648(%rip), %rax
    00000317: 	pxor	%xmm3, %xmm3
    0000031b: 	movq	%rax, %xmm2
    00000320: 	callq	__muldc3@PLT # Offset: 800
    00000325: 	movapd	%xmm0, %xmm3
    00000329: 	movapd	%xmm1, %xmm2
    0000032d: 	jmp	.Ltmp463 # Offset: 813
.Ltmp459:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
.Ltmp455:
    00000337: 	leaq	DATAat0x2b008(%rip), %rdi
    0000033e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 830
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x8290
  Size        : 0x48d
  MaxSize     : 0x490
  Offset      : 0x8290
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp464 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	pxor	%xmm6, %xmm6
    0000004f: 	movl	%ebx, %r14d
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	cvtsd2ss	init_value(%rip), %xmm6
    00000062: 	movaps	DATAat0x2b7a0(%rip), %xmm8
    0000006a: 	shrl	$0x2, %eax
    0000006d: 	andl	$-0x4, %r14d
    00000071: 	pxor	%xmm3, %xmm3
    00000075: 	movss	%xmm6, 0x8(%rsp)
    0000007b: 	subl	$0x1, %eax
    0000007e: 	movaps	DATAat0x2b7b0(%rip), %xmm7
    00000085: 	movaps	DATAat0x2b7c0(%rip), %xmm6
    0000008c: 	shlq	$0x5, %rax
    00000090: 	movaps	DATAat0x2b7d0(%rip), %xmm5
    00000097: 	leaq	0x20(%r12,%rax), %r15
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp471:
    000000a0: 	movaps	%xmm3, %xmm9
    000000a4: 	movaps	%xmm3, %xmm11
    000000a8: 	testl	%ebx, %ebx
    000000aa: 	jle	.Ltmp465 # Offset: 170
    000000b0: 	cmpl	$0x2, 0xc(%rsp)
    000000b5: 	jbe	.Ltmp466 # Offset: 181
    000000bb: 	movq	%r12, %rax
    000000be: 	movaps	%xmm3, %xmm9
    000000c2: 	movaps	%xmm3, %xmm11
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp467:
    000000d0: 	movups	(%rax), %xmm0
    000000d3: 	movups	0x10(%rax), %xmm4
    000000d7: 	addq	$0x20, %rax
    000000db: 	movaps	%xmm0, %xmm1
    000000de: 	shufps	$0xdd, %xmm4, %xmm0
    000000e2: 	addps	%xmm6, %xmm0
    000000e5: 	shufps	$0x88, %xmm4, %xmm1
    000000e9: 	addps	%xmm8, %xmm1
    000000ed: 	addps	%xmm5, %xmm0
    000000f0: 	addps	%xmm7, %xmm1
    000000f3: 	movaps	%xmm1, %xmm4
    000000f6: 	movaps	%xmm1, %xmm2
    000000f9: 	addss	%xmm11, %xmm4
    000000fe: 	shufps	$0x55, %xmm1, %xmm2
    00000102: 	movaps	%xmm1, %xmm11
    00000106: 	unpckhps	%xmm1, %xmm11
    0000010a: 	shufps	$0xff, %xmm1, %xmm1
    0000010e: 	addss	%xmm4, %xmm2
    00000112: 	addss	%xmm2, %xmm11
    00000117: 	movaps	%xmm0, %xmm2
    0000011a: 	addss	%xmm9, %xmm2
    0000011f: 	movaps	%xmm0, %xmm9
    00000123: 	unpckhps	%xmm0, %xmm9
    00000127: 	addss	%xmm1, %xmm11
    0000012c: 	movaps	%xmm0, %xmm1
    0000012f: 	shufps	$0x55, %xmm0, %xmm1
    00000133: 	addss	%xmm2, %xmm1
    00000137: 	shufps	$0xff, %xmm0, %xmm0
    0000013b: 	addss	%xmm1, %xmm9
    00000140: 	addss	%xmm0, %xmm9
    00000145: 	cmpq	%rax, %r15
    00000148: 	jne	.Ltmp467 # Offset: 328
    0000014a: 	movl	%r14d, %eax
    0000014d: 	cmpl	%ebx, %r14d
    00000150: 	je	.Ltmp465 # Offset: 336
.Ltmp479:
    00000152: 	movq	DATAat0x2b688(%rip), %xmm10
    0000015b: 	movl	%ebx, %edx
    0000015d: 	movaps	%xmm11, %xmm4
    00000161: 	movq	DATAat0x2b690(%rip), %xmm2
    00000169: 	subl	%eax, %edx
    0000016b: 	leaq	(%r12,%rax,8), %rax
    0000016f: 	unpcklps	%xmm9, %xmm4
    00000173: 	movq	(%rax), %xmm0
    00000177: 	addps	%xmm10, %xmm0
    0000017b: 	addps	%xmm2, %xmm0
    0000017e: 	addps	%xmm0, %xmm4
    00000181: 	cmpl	$0x1, %edx
    00000184: 	je	.Ltmp468 # Offset: 388
    00000186: 	movq	0x8(%rax), %xmm1
    0000018b: 	addps	%xmm10, %xmm1
    0000018f: 	addps	%xmm2, %xmm1
    00000192: 	addps	%xmm1, %xmm4
    00000195: 	cmpl	$0x2, %edx
    00000198: 	je	.Ltmp468 # Offset: 408
    0000019a: 	movq	0x10(%rax), %xmm1
    0000019f: 	addps	%xmm10, %xmm1
    000001a3: 	addps	%xmm2, %xmm1
    000001a6: 	addps	%xmm1, %xmm4
.Ltmp468:
    000001a9: 	movaps	%xmm4, %xmm11
    000001ad: 	shufps	$0xe5, %xmm4, %xmm4
    000001b1: 	movaps	%xmm4, %xmm9
.Ltmp465:
    000001b5: 	movss	DATAat0x2b7a0(%rip), %xmm10
    000001be: 	addss	0x8(%rsp), %xmm10
    000001c5: 	subss	DATAat0x2b920(%rip), %xmm10
    000001ce: 	movss	DATAat0x2b900(%rip), %xmm1
    000001d6: 	mulss	%xmm10, %xmm1
    000001db: 	movaps	%xmm10, %xmm0
    000001df: 	mulss	%xmm3, %xmm0
    000001e3: 	subss	DATAat0x2b924(%rip), %xmm0
    000001eb: 	addss	%xmm3, %xmm1
    000001ef: 	ucomiss	%xmm0, %xmm1
    000001f2: 	jp	.Ltmp469 # Offset: 498
.Ltmp483:
    000001f8: 	movaps	%xmm11, %xmm4
    000001fc: 	subss	%xmm0, %xmm9
    00000201: 	subss	%xmm1, %xmm4
    00000205: 	movss	%xmm9, 0x24(%rsp)
    0000020c: 	movss	%xmm4, 0x20(%rsp)
    00000212: 	movq	0x20(%rsp), %xmm0
    00000218: 	callq	cabsf@PLT # Offset: 536
    0000021d: 	movss	DATAat0x2b908(%rip), %xmm3
    00000225: 	movaps	DATAat0x2b7a0(%rip), %xmm8
    0000022d: 	movaps	DATAat0x2b7b0(%rip), %xmm7
    00000234: 	movaps	DATAat0x2b7c0(%rip), %xmm6
    0000023b: 	comiss	%xmm0, %xmm3
    0000023e: 	movaps	DATAat0x2b7d0(%rip), %xmm5
    00000245: 	pxor	%xmm3, %xmm3
    00000249: 	jbe	.Ltmp470 # Offset: 585
    0000024f: 	addl	$0x1, %ebp
    00000252: 	cmpl	%r13d, %ebp
    00000255: 	jl	.Ltmp471 # Offset: 597
.Ltmp464:
    0000025b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000262: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000269: 	subq	$0x20, %rax
    0000026d: 	cmpq	%rax, %rbx
    00000270: 	je	.Ltmp472 # Offset: 624
    00000276: 	movq	0x10(%rsp), %rax
    0000027b: 	leaq	0x10(%rbx), %rdi
    0000027f: 	movq	%rdi, (%rbx)
    00000282: 	movq	(%rax), %rbp
    00000285: 	movq	0x8(%rax), %r12
    00000289: 	movq	%rbp, %rax
    0000028c: 	addq	%r12, %rax
    0000028f: 	je	.Ltmp473 # Offset: 655
    00000291: 	testq	%rbp, %rbp
    00000294: 	je	.Ltmp474 # Offset: 660
.Ltmp473:
    0000029a: 	movq	%r12, 0x30(%rsp)
    0000029f: 	cmpq	$0xf, %r12
    000002a3: 	ja	.Ltmp475 # Offset: 675
    000002a9: 	cmpq	$0x1, %r12
    000002ad: 	jne	.Ltmp476 # Offset: 685
    000002b3: 	movzbl	(%rbp), %eax
    000002b7: 	movb	%al, 0x10(%rbx)
.Ltmp480:
    000002ba: 	movq	%r12, 0x8(%rbx)
    000002be: 	movb	$0x0, (%rdi,%r12)
    000002c3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ca: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d1: 	addq	$0x20, %rax
    000002d5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002dc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002e3: 	je	.Ltmp477 # Offset: 739
.Ltmp481:
    000002e9: 	movq	-0x20(%rax), %rbp
    000002ed: 	callq	clock@PLT # Offset: 749
    000002f2: 	movq	%rax, end_time(%rip)
    000002f9: 	movq	0x38(%rsp), %rdx
    000002fe: 	subq	%fs:0x28, %rdx
    00000307: 	jne	.Ltmp478 # Offset: 775
    0000030d: 	subq	start_time(%rip), %rax
    00000314: 	pxor	%xmm0, %xmm0
    00000318: 	movq	%rbp, %rdi
    0000031b: 	cvtsi2sd	%rax, %xmm0
    00000320: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000328: 	addq	$0x48, %rsp
    0000032c: 	popq	%rbx
    0000032d: 	popq	%rbp
    0000032e: 	popq	%r12
    00000330: 	popq	%r13
    00000332: 	popq	%r14
    00000334: 	popq	%r15
    00000336: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 822
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp470:
    00000340: 	movl	current_test(%rip), %edx
    00000346: 	movl	$0x1, %edi
    0000034b: 	xorl	%eax, %eax
    0000034d: 	addl	$0x1, %ebp
    00000350: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00000357: 	callq	__printf_chk@PLT # Offset: 855
    0000035c: 	movl	iterations(%rip), %r13d
    00000363: 	cmpl	%r13d, %ebp
    00000366: 	jge	.Ltmp464 # Offset: 870
    0000036c: 	pxor	%xmm5, %xmm5
    00000370: 	movaps	DATAat0x2b7a0(%rip), %xmm8
    00000378: 	pxor	%xmm3, %xmm3
    0000037c: 	movaps	DATAat0x2b7b0(%rip), %xmm7
    00000383: 	cvtsd2ss	init_value(%rip), %xmm5
    0000038b: 	movaps	DATAat0x2b7c0(%rip), %xmm6
    00000392: 	movss	%xmm5, 0x8(%rsp)
    00000398: 	movaps	DATAat0x2b7d0(%rip), %xmm5
    0000039f: 	jmp	.Ltmp471 # Offset: 927
.Ltmp466:
    000003a4: 	xorl	%eax, %eax
    000003a6: 	movaps	%xmm3, %xmm9
    000003aa: 	movaps	%xmm3, %xmm11
    000003ae: 	jmp	.Ltmp479 # Offset: 942
.Ltmp475:
    000003b3: 	movq	%rbx, %rdi
    000003b6: 	leaq	0x30(%rsp), %rsi
    000003bb: 	xorl	%edx, %edx
    000003bd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 957
    000003c2: 	movq	%rax, (%rbx)
    000003c5: 	movq	%rax, %rdi
    000003c8: 	movq	0x30(%rsp), %rax
    000003cd: 	movq	%rax, 0x10(%rbx)
.Ltmp482:
    000003d1: 	movq	%r12, %rdx
    000003d4: 	movq	%rbp, %rsi
    000003d7: 	callq	memcpy@PLT # Offset: 983
    000003dc: 	movq	0x30(%rsp), %r12
    000003e1: 	movq	(%rbx), %rdi
    000003e4: 	jmp	.Ltmp480 # Offset: 996
.Ltmp472:
    000003e9: 	movq	0x10(%rsp), %rsi
    000003ee: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003f5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1013
    000003fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000401: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000408: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000040f: 	jne	.Ltmp481 # Offset: 1039
.Ltmp477:
    00000415: 	movq	-0x8(%rdx), %rax
    00000419: 	addq	$0x200, %rax
    0000041f: 	jmp	.Ltmp481 # Offset: 1055
.Ltmp476:
    00000424: 	testq	%r12, %r12
    00000427: 	je	.Ltmp480 # Offset: 1063
    0000042d: 	jmp	.Ltmp482 # Offset: 1069
    0000042f: 	nop # Size: 1
.Ltmp469:
    00000430: 	movss	DATAat0x2b928(%rip), %xmm1
    00000438: 	movss	DATAat0x2b900(%rip), %xmm2
    00000440: 	movaps	%xmm10, %xmm0
    00000444: 	movss	%xmm11, 0x1c(%rsp)
    0000044b: 	movss	%xmm9, 0x18(%rsp)
    00000452: 	callq	__mulsc3@PLT # Offset: 1106
    00000457: 	movss	0x1c(%rsp), %xmm11
    0000045e: 	movss	0x18(%rsp), %xmm9
    00000465: 	movq	%xmm0, 0x28(%rsp)
    0000046b: 	movss	0x28(%rsp), %xmm1
    00000471: 	movss	0x2c(%rsp), %xmm0
    00000477: 	jmp	.Ltmp483 # Offset: 1143
.Ltmp478:
    0000047c: 	callq	__stack_chk_fail@PLT # Offset: 1148
.Ltmp474:
    00000481: 	leaq	DATAat0x2b008(%rip), %rdi
    00000488: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1160
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x8720
  Size        : 0x343
  MaxSize     : 0x350
  Offset      : 0x8720
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp484 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm7
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	xorl	%ebx, %ebx
    00000055: 	movapd	DATAat0x2b7e0(%rip), %xmm6
    0000005d: 	shlq	$0x4, %rax
    00000061: 	movapd	DATAat0x2b7f0(%rip), %xmm5
    00000069: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000070: 	leaq	0x10(%r12,%rax), %r14
    00000075: 	movsd	%xmm7, (%rsp)
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp489:
    00000080: 	pxor	%xmm4, %xmm4
    00000084: 	movq	%r12, %rax
    00000087: 	pxor	%xmm1, %xmm1
    0000008b: 	movapd	%xmm4, %xmm7
    0000008f: 	testl	%r13d, %r13d
    00000092: 	jle	.Ltmp485 # Offset: 146
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp486:
    00000098: 	movupd	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	addpd	%xmm6, %xmm0
    000000a4: 	addpd	%xmm5, %xmm0
    000000a8: 	addpd	%xmm0, %xmm1
    000000ac: 	cmpq	%r14, %rax
    000000af: 	jne	.Ltmp486 # Offset: 175
    000000b1: 	movapd	%xmm1, %xmm7
    000000b5: 	unpckhpd	%xmm1, %xmm1
    000000b9: 	movapd	%xmm1, %xmm4
.Ltmp485:
    000000bd: 	movsd	DATAat0x2b7e0(%rip), %xmm0
    000000c5: 	addsd	(%rsp), %xmm0
    000000ca: 	pxor	%xmm3, %xmm3
    000000ce: 	subsd	DATAat0x2b698(%rip), %xmm0
    000000d6: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000de: 	movapd	%xmm3, %xmm1
    000000e2: 	mulsd	%xmm0, %xmm2
    000000e6: 	mulsd	%xmm0, %xmm1
    000000ea: 	subsd	DATAat0x2b6a0(%rip), %xmm1
    000000f2: 	addsd	%xmm3, %xmm2
    000000f6: 	ucomisd	%xmm1, %xmm2
    000000fa: 	jp	.Ltmp487 # Offset: 250
.Ltmp500:
    00000100: 	subsd	%xmm2, %xmm7
    00000104: 	subsd	%xmm1, %xmm4
    00000108: 	movapd	%xmm7, %xmm0
    0000010c: 	movapd	%xmm4, %xmm1
    00000110: 	callq	cabs@PLT # Offset: 272
    00000115: 	movsd	DATAat0x2b658(%rip), %xmm3
    0000011d: 	movapd	DATAat0x2b7e0(%rip), %xmm6
    00000125: 	movapd	DATAat0x2b7f0(%rip), %xmm5
    0000012d: 	comisd	%xmm0, %xmm3
    00000131: 	jbe	.Ltmp488 # Offset: 305
    00000137: 	addl	$0x1, %ebx
    0000013a: 	cmpl	%ebp, %ebx
    0000013c: 	jl	.Ltmp489 # Offset: 316
.Ltmp484:
    00000142: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000149: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000150: 	subq	$0x20, %rax
    00000154: 	cmpq	%rax, %rbx
    00000157: 	je	.Ltmp490 # Offset: 343
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	leaq	0x10(%rbx), %rdi
    00000166: 	movq	%rdi, (%rbx)
    00000169: 	movq	(%rax), %rbp
    0000016c: 	movq	0x8(%rax), %r12
    00000170: 	movq	%rbp, %rax
    00000173: 	addq	%r12, %rax
    00000176: 	je	.Ltmp491 # Offset: 374
    00000178: 	testq	%rbp, %rbp
    0000017b: 	je	.Ltmp492 # Offset: 379
.Ltmp491:
    00000181: 	movq	%r12, 0x20(%rsp)
    00000186: 	cmpq	$0xf, %r12
    0000018a: 	ja	.Ltmp493 # Offset: 394
    00000190: 	cmpq	$0x1, %r12
    00000194: 	jne	.Ltmp494 # Offset: 404
    0000019a: 	movzbl	(%rbp), %eax
    0000019e: 	movb	%al, 0x10(%rbx)
.Ltmp497:
    000001a1: 	movq	%r12, 0x8(%rbx)
    000001a5: 	movb	$0x0, (%rdi,%r12)
    000001aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001b1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001b8: 	addq	$0x20, %rax
    000001bc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001c3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001ca: 	je	.Ltmp495 # Offset: 458
.Ltmp498:
    000001d0: 	movq	-0x20(%rax), %rbp
    000001d4: 	callq	clock@PLT # Offset: 468
    000001d9: 	movq	%rax, end_time(%rip)
    000001e0: 	movq	0x28(%rsp), %rdx
    000001e5: 	subq	%fs:0x28, %rdx
    000001ee: 	jne	.Ltmp496 # Offset: 494
    000001f4: 	subq	start_time(%rip), %rax
    000001fb: 	pxor	%xmm0, %xmm0
    000001ff: 	movq	%rbp, %rdi
    00000202: 	cvtsi2sd	%rax, %xmm0
    00000207: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000020f: 	addq	$0x38, %rsp
    00000213: 	popq	%rbx
    00000214: 	popq	%rbp
    00000215: 	popq	%r12
    00000217: 	popq	%r13
    00000219: 	popq	%r14
    0000021b: 	popq	%r15
    0000021d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp488:
    00000228: 	movl	current_test(%rip), %edx
    0000022e: 	movq	%r15, %rsi
    00000231: 	movl	$0x1, %edi
    00000236: 	xorl	%eax, %eax
    00000238: 	addl	$0x1, %ebx
    0000023b: 	callq	__printf_chk@PLT # Offset: 571
    00000240: 	movl	iterations(%rip), %ebp
    00000246: 	cmpl	%ebp, %ebx
    00000248: 	jge	.Ltmp484 # Offset: 584
    0000024e: 	movsd	init_value(%rip), %xmm4
    00000256: 	movapd	DATAat0x2b7e0(%rip), %xmm6
    0000025e: 	movapd	DATAat0x2b7f0(%rip), %xmm5
    00000266: 	movsd	%xmm4, (%rsp)
    0000026b: 	jmp	.Ltmp489 # Offset: 619
.Ltmp493:
    00000270: 	movq	%rbx, %rdi
    00000273: 	leaq	0x20(%rsp), %rsi
    00000278: 	xorl	%edx, %edx
    0000027a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 634
    0000027f: 	movq	%rax, (%rbx)
    00000282: 	movq	%rax, %rdi
    00000285: 	movq	0x20(%rsp), %rax
    0000028a: 	movq	%rax, 0x10(%rbx)
.Ltmp499:
    0000028e: 	movq	%r12, %rdx
    00000291: 	movq	%rbp, %rsi
    00000294: 	callq	memcpy@PLT # Offset: 660
    00000299: 	movq	0x20(%rsp), %r12
    0000029e: 	movq	(%rbx), %rdi
    000002a1: 	jmp	.Ltmp497 # Offset: 673
.Ltmp490:
    000002a6: 	movq	0x8(%rsp), %rsi
    000002ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 690
    000002b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002be: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002cc: 	jne	.Ltmp498 # Offset: 716
.Ltmp495:
    000002d2: 	movq	-0x8(%rdx), %rax
    000002d6: 	addq	$0x200, %rax
    000002dc: 	jmp	.Ltmp498 # Offset: 732
.Ltmp494:
    000002e1: 	testq	%r12, %r12
    000002e4: 	je	.Ltmp497 # Offset: 740
    000002ea: 	jmp	.Ltmp499 # Offset: 746
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp487:
    000002f0: 	movq	DATAat0x2b648(%rip), %rax
    000002f7: 	pxor	%xmm3, %xmm3
    000002fb: 	movsd	%xmm7, 0x18(%rsp)
    00000301: 	movsd	%xmm4, 0x10(%rsp)
    00000307: 	movq	%rax, %xmm2
    0000030c: 	movq	DATAat0x2b6a8(%rip), %rax
    00000313: 	movq	%rax, %xmm1
    00000318: 	callq	__muldc3@PLT # Offset: 792
    0000031d: 	movsd	0x18(%rsp), %xmm7
    00000323: 	movsd	0x10(%rsp), %xmm4
    00000329: 	movapd	%xmm0, %xmm2
    0000032d: 	jmp	.Ltmp500 # Offset: 813
.Ltmp496:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
.Ltmp492:
    00000337: 	leaq	DATAat0x2b008(%rip), %rdi
    0000033e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 830
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x8a70
  Size        : 0x3b8
  MaxSize     : 0x3c0
  Offset      : 0x8a70
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x38(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r13d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r13d, %r13d
    00000042: 	jle	.Ltmp501 # Offset: 66
    00000048: 	leal	-0x1(%rbx), %eax
    0000004b: 	movl	%ebx, %r14d
    0000004e: 	pxor	%xmm7, %xmm7
    00000052: 	xorl	%ebp, %ebp
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%ebx, %eax
    0000005a: 	andl	$-0x4, %r14d
    0000005e: 	pxor	%xmm3, %xmm3
    00000062: 	shrl	$0x2, %eax
    00000065: 	cvtsd2ss	init_value(%rip), %xmm7
    0000006d: 	movss	%xmm7, 0x8(%rsp)
    00000073: 	subl	$0x1, %eax
    00000076: 	shlq	$0x5, %rax
    0000007a: 	leaq	0x20(%r12,%rax), %r15
    0000007f: 	nop # Size: 1
.Ltmp508:
    00000080: 	movaps	%xmm3, %xmm5
    00000083: 	movaps	%xmm3, %xmm4
    00000086: 	testl	%ebx, %ebx
    00000088: 	jle	.Ltmp502 # Offset: 136
    0000008e: 	cmpl	$0x2, 0xc(%rsp)
    00000093: 	jbe	.Ltmp503 # Offset: 147
    00000099: 	movq	%r12, %rax
    0000009c: 	movaps	%xmm3, %xmm5
    0000009f: 	movaps	%xmm3, %xmm4
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp504:
    000000a8: 	movups	(%rax), %xmm1
    000000ab: 	movups	0x10(%rax), %xmm0
    000000af: 	addq	$0x20, %rax
    000000b3: 	subss	%xmm1, %xmm4
    000000b7: 	movaps	%xmm1, %xmm2
    000000ba: 	unpckhps	%xmm1, %xmm2
    000000bd: 	subss	%xmm2, %xmm4
    000000c1: 	movaps	%xmm0, %xmm2
    000000c4: 	unpckhps	%xmm0, %xmm2
    000000c7: 	subss	%xmm0, %xmm4
    000000cb: 	subss	%xmm2, %xmm4
    000000cf: 	movaps	%xmm1, %xmm2
    000000d2: 	shufps	$0x55, %xmm1, %xmm2
    000000d6: 	subss	%xmm2, %xmm5
    000000da: 	shufps	$0xff, %xmm1, %xmm1
    000000de: 	subss	%xmm1, %xmm5
    000000e2: 	movaps	%xmm0, %xmm1
    000000e5: 	shufps	$0x55, %xmm0, %xmm1
    000000e9: 	shufps	$0xff, %xmm0, %xmm0
    000000ed: 	subss	%xmm1, %xmm5
    000000f1: 	subss	%xmm0, %xmm5
    000000f5: 	cmpq	%r15, %rax
    000000f8: 	jne	.Ltmp504 # Offset: 248
    000000fa: 	movl	%r14d, %eax
    000000fd: 	cmpl	%ebx, %r14d
    00000100: 	je	.Ltmp502 # Offset: 256
.Ltmp516:
    00000102: 	movl	%ebx, %edx
    00000104: 	movaps	%xmm4, %xmm0
    00000107: 	subl	%eax, %edx
    00000109: 	leaq	(%r12,%rax,8), %rax
    0000010d: 	unpcklps	%xmm5, %xmm0
    00000110: 	movq	(%rax), %xmm1
    00000114: 	subps	%xmm1, %xmm0
    00000117: 	cmpl	$0x1, %edx
    0000011a: 	je	.Ltmp505 # Offset: 282
    0000011c: 	movq	0x8(%rax), %xmm1
    00000121: 	subps	%xmm1, %xmm0
    00000124: 	cmpl	$0x2, %edx
    00000127: 	je	.Ltmp505 # Offset: 295
    00000129: 	movq	0x10(%rax), %xmm1
    0000012e: 	subps	%xmm1, %xmm0
.Ltmp505:
    00000131: 	movaps	%xmm0, %xmm4
    00000134: 	shufps	$0xe5, %xmm0, %xmm0
    00000138: 	movaps	%xmm0, %xmm5
.Ltmp502:
    0000013b: 	movss	0x8(%rsp), %xmm6
    00000141: 	movss	DATAat0x2b900(%rip), %xmm0
    00000149: 	xorps	DATAat0x2b800(%rip), %xmm6
    00000150: 	mulss	%xmm6, %xmm0
    00000154: 	movaps	%xmm6, %xmm1
    00000157: 	mulss	%xmm3, %xmm1
    0000015b: 	addss	%xmm3, %xmm0
    0000015f: 	ucomiss	%xmm0, %xmm1
    00000162: 	jp	.Ltmp506 # Offset: 354
.Ltmp520:
    00000168: 	subss	%xmm0, %xmm4
    0000016c: 	subss	%xmm1, %xmm5
    00000170: 	movss	%xmm4, 0x20(%rsp)
    00000176: 	movss	%xmm5, 0x24(%rsp)
    0000017c: 	movq	0x20(%rsp), %xmm0
    00000182: 	callq	cabsf@PLT # Offset: 386
    00000187: 	movss	DATAat0x2b908(%rip), %xmm7
    0000018f: 	pxor	%xmm3, %xmm3
    00000193: 	comiss	%xmm0, %xmm7
    00000196: 	jbe	.Ltmp507 # Offset: 406
    0000019c: 	addl	$0x1, %ebp
    0000019f: 	cmpl	%r13d, %ebp
    000001a2: 	jl	.Ltmp508 # Offset: 418
.Ltmp501:
    000001a8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001af: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001b6: 	subq	$0x20, %rax
    000001ba: 	cmpq	%rax, %rbx
    000001bd: 	je	.Ltmp509 # Offset: 445
    000001c3: 	movq	0x10(%rsp), %rax
    000001c8: 	leaq	0x10(%rbx), %rdi
    000001cc: 	movq	%rdi, (%rbx)
    000001cf: 	movq	(%rax), %rbp
    000001d2: 	movq	0x8(%rax), %r12
    000001d6: 	movq	%rbp, %rax
    000001d9: 	addq	%r12, %rax
    000001dc: 	je	.Ltmp510 # Offset: 476
    000001de: 	testq	%rbp, %rbp
    000001e1: 	je	.Ltmp511 # Offset: 481
.Ltmp510:
    000001e7: 	movq	%r12, 0x30(%rsp)
    000001ec: 	cmpq	$0xf, %r12
    000001f0: 	ja	.Ltmp512 # Offset: 496
    000001f6: 	cmpq	$0x1, %r12
    000001fa: 	jne	.Ltmp513 # Offset: 506
    00000200: 	movzbl	(%rbp), %eax
    00000204: 	movb	%al, 0x10(%rbx)
.Ltmp517:
    00000207: 	movq	%r12, 0x8(%rbx)
    0000020b: 	movb	$0x0, (%rdi,%r12)
    00000210: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000217: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021e: 	addq	$0x20, %rax
    00000222: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000229: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000230: 	je	.Ltmp514 # Offset: 560
.Ltmp518:
    00000236: 	movq	-0x20(%rax), %rbp
    0000023a: 	callq	clock@PLT # Offset: 570
    0000023f: 	movq	%rax, end_time(%rip)
    00000246: 	movq	0x38(%rsp), %rdx
    0000024b: 	subq	%fs:0x28, %rdx
    00000254: 	jne	.Ltmp515 # Offset: 596
    0000025a: 	subq	start_time(%rip), %rax
    00000261: 	pxor	%xmm0, %xmm0
    00000265: 	movq	%rbp, %rdi
    00000268: 	cvtsi2sd	%rax, %xmm0
    0000026d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000275: 	addq	$0x48, %rsp
    00000279: 	popq	%rbx
    0000027a: 	popq	%rbp
    0000027b: 	popq	%r12
    0000027d: 	popq	%r13
    0000027f: 	popq	%r14
    00000281: 	popq	%r15
    00000283: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 643
    00000288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp507:
    00000290: 	movl	current_test(%rip), %edx
    00000296: 	movl	$0x1, %edi
    0000029b: 	xorl	%eax, %eax
    0000029d: 	addl	$0x1, %ebp
    000002a0: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002a7: 	callq	__printf_chk@PLT # Offset: 679
    000002ac: 	movl	iterations(%rip), %r13d
    000002b3: 	cmpl	%r13d, %ebp
    000002b6: 	jge	.Ltmp501 # Offset: 694
    000002bc: 	pxor	%xmm7, %xmm7
    000002c0: 	pxor	%xmm3, %xmm3
    000002c4: 	cvtsd2ss	init_value(%rip), %xmm7
    000002cc: 	movss	%xmm7, 0x8(%rsp)
    000002d2: 	jmp	.Ltmp508 # Offset: 722
.Ltmp503:
    000002d7: 	xorl	%eax, %eax
    000002d9: 	movaps	%xmm3, %xmm5
    000002dc: 	movaps	%xmm3, %xmm4
    000002df: 	jmp	.Ltmp516 # Offset: 735
.Ltmp512:
    000002e4: 	movq	%rbx, %rdi
    000002e7: 	leaq	0x30(%rsp), %rsi
    000002ec: 	xorl	%edx, %edx
    000002ee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 750
    000002f3: 	movq	%rax, (%rbx)
    000002f6: 	movq	%rax, %rdi
    000002f9: 	movq	0x30(%rsp), %rax
    000002fe: 	movq	%rax, 0x10(%rbx)
.Ltmp519:
    00000302: 	movq	%r12, %rdx
    00000305: 	movq	%rbp, %rsi
    00000308: 	callq	memcpy@PLT # Offset: 776
    0000030d: 	movq	0x30(%rsp), %r12
    00000312: 	movq	(%rbx), %rdi
    00000315: 	jmp	.Ltmp517 # Offset: 789
.Ltmp509:
    0000031a: 	movq	0x10(%rsp), %rsi
    0000031f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000326: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 806
    0000032b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000332: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000339: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000340: 	jne	.Ltmp518 # Offset: 832
.Ltmp514:
    00000346: 	movq	-0x8(%rdx), %rax
    0000034a: 	addq	$0x200, %rax
    00000350: 	jmp	.Ltmp518 # Offset: 848
.Ltmp513:
    00000355: 	testq	%r12, %r12
    00000358: 	je	.Ltmp517 # Offset: 856
    0000035e: 	jmp	.Ltmp519 # Offset: 862
.Ltmp506:
    00000360: 	movss	DATAat0x2b800(%rip), %xmm1
    00000368: 	movaps	%xmm6, %xmm0
    0000036b: 	movss	DATAat0x2b900(%rip), %xmm2
    00000373: 	movss	%xmm4, 0x1c(%rsp)
    00000379: 	movss	%xmm5, 0x18(%rsp)
    0000037f: 	callq	__mulsc3@PLT # Offset: 895
    00000384: 	movss	0x1c(%rsp), %xmm4
    0000038a: 	movss	0x18(%rsp), %xmm5
    00000390: 	movq	%xmm0, 0x28(%rsp)
    00000396: 	movss	0x28(%rsp), %xmm0
    0000039c: 	movss	0x2c(%rsp), %xmm1
    000003a2: 	jmp	.Ltmp520 # Offset: 930
.Ltmp515:
    000003a7: 	callq	__stack_chk_fail@PLT # Offset: 935
.Ltmp511:
    000003ac: 	leaq	DATAat0x2b008(%rip), %rdi
    000003b3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 947
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x8e30
  Size        : 0x2fb
  MaxSize     : 0x300
  Offset      : 0x8e30
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp521 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm3
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	xorl	%ebx, %ebx
    00000055: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%r12,%rax), %r14
    00000065: 	movsd	%xmm3, (%rsp)
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp526:
    00000070: 	pxor	%xmm4, %xmm4
    00000074: 	movq	%r12, %rax
    00000077: 	pxor	%xmm1, %xmm1
    0000007b: 	movapd	%xmm4, %xmm5
    0000007f: 	testl	%r13d, %r13d
    00000082: 	jle	.Ltmp522 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp523:
    00000088: 	movupd	(%rax), %xmm6
    0000008c: 	addq	$0x10, %rax
    00000090: 	subpd	%xmm6, %xmm1
    00000094: 	cmpq	%r14, %rax
    00000097: 	jne	.Ltmp523 # Offset: 151
    00000099: 	movapd	%xmm1, %xmm5
    0000009d: 	unpckhpd	%xmm1, %xmm1
    000000a1: 	movapd	%xmm1, %xmm4
.Ltmp522:
    000000a5: 	movsd	(%rsp), %xmm0
    000000aa: 	movsd	DATAat0x2b648(%rip), %xmm2
    000000b2: 	pxor	%xmm1, %xmm1
    000000b6: 	pxor	%xmm7, %xmm7
    000000ba: 	xorpd	DATAat0x2b810(%rip), %xmm0
    000000c2: 	mulsd	%xmm0, %xmm2
    000000c6: 	mulsd	%xmm0, %xmm1
    000000ca: 	addsd	%xmm7, %xmm2
    000000ce: 	ucomisd	%xmm2, %xmm1
    000000d2: 	jp	.Ltmp524 # Offset: 210
.Ltmp537:
    000000d8: 	subsd	%xmm2, %xmm5
    000000dc: 	subsd	%xmm1, %xmm4
    000000e0: 	movapd	%xmm5, %xmm0
    000000e4: 	movapd	%xmm4, %xmm1
    000000e8: 	callq	cabs@PLT # Offset: 232
    000000ed: 	movsd	DATAat0x2b658(%rip), %xmm3
    000000f5: 	comisd	%xmm0, %xmm3
    000000f9: 	jbe	.Ltmp525 # Offset: 249
    000000ff: 	addl	$0x1, %ebx
    00000102: 	cmpl	%ebp, %ebx
    00000104: 	jl	.Ltmp526 # Offset: 260
.Ltmp521:
    0000010a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000111: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000118: 	subq	$0x20, %rax
    0000011c: 	cmpq	%rax, %rbx
    0000011f: 	je	.Ltmp527 # Offset: 287
    00000125: 	movq	0x8(%rsp), %rax
    0000012a: 	leaq	0x10(%rbx), %rdi
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rax), %rbp
    00000134: 	movq	0x8(%rax), %r12
    00000138: 	movq	%rbp, %rax
    0000013b: 	addq	%r12, %rax
    0000013e: 	je	.Ltmp528 # Offset: 318
    00000140: 	testq	%rbp, %rbp
    00000143: 	je	.Ltmp529 # Offset: 323
.Ltmp528:
    00000149: 	movq	%r12, 0x20(%rsp)
    0000014e: 	cmpq	$0xf, %r12
    00000152: 	ja	.Ltmp530 # Offset: 338
    00000158: 	cmpq	$0x1, %r12
    0000015c: 	jne	.Ltmp531 # Offset: 348
    00000162: 	movzbl	(%rbp), %eax
    00000166: 	movb	%al, 0x10(%rbx)
.Ltmp534:
    00000169: 	movq	%r12, 0x8(%rbx)
    0000016d: 	movb	$0x0, (%rdi,%r12)
    00000172: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000179: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000180: 	addq	$0x20, %rax
    00000184: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000018b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000192: 	je	.Ltmp532 # Offset: 402
.Ltmp535:
    00000198: 	movq	-0x20(%rax), %rbp
    0000019c: 	callq	clock@PLT # Offset: 412
    000001a1: 	movq	%rax, end_time(%rip)
    000001a8: 	movq	0x28(%rsp), %rdx
    000001ad: 	subq	%fs:0x28, %rdx
    000001b6: 	jne	.Ltmp533 # Offset: 438
    000001bc: 	subq	start_time(%rip), %rax
    000001c3: 	pxor	%xmm0, %xmm0
    000001c7: 	movq	%rbp, %rdi
    000001ca: 	cvtsi2sd	%rax, %xmm0
    000001cf: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001d7: 	addq	$0x38, %rsp
    000001db: 	popq	%rbx
    000001dc: 	popq	%rbp
    000001dd: 	popq	%r12
    000001df: 	popq	%r13
    000001e1: 	popq	%r14
    000001e3: 	popq	%r15
    000001e5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 485
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp525:
    000001f0: 	movl	current_test(%rip), %edx
    000001f6: 	movq	%r15, %rsi
    000001f9: 	movl	$0x1, %edi
    000001fe: 	xorl	%eax, %eax
    00000200: 	addl	$0x1, %ebx
    00000203: 	callq	__printf_chk@PLT # Offset: 515
    00000208: 	movl	iterations(%rip), %ebp
    0000020e: 	cmpl	%ebp, %ebx
    00000210: 	jge	.Ltmp521 # Offset: 528
    00000216: 	movsd	init_value(%rip), %xmm7
    0000021e: 	movsd	%xmm7, (%rsp)
    00000223: 	jmp	.Ltmp526 # Offset: 547
.Ltmp530:
    00000228: 	movq	%rbx, %rdi
    0000022b: 	leaq	0x20(%rsp), %rsi
    00000230: 	xorl	%edx, %edx
    00000232: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 562
    00000237: 	movq	%rax, (%rbx)
    0000023a: 	movq	%rax, %rdi
    0000023d: 	movq	0x20(%rsp), %rax
    00000242: 	movq	%rax, 0x10(%rbx)
.Ltmp536:
    00000246: 	movq	%r12, %rdx
    00000249: 	movq	%rbp, %rsi
    0000024c: 	callq	memcpy@PLT # Offset: 588
    00000251: 	movq	0x20(%rsp), %r12
    00000256: 	movq	(%rbx), %rdi
    00000259: 	jmp	.Ltmp534 # Offset: 601
.Ltmp527:
    0000025e: 	movq	0x8(%rsp), %rsi
    00000263: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000026a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 618
    0000026f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000276: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000027d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000284: 	jne	.Ltmp535 # Offset: 644
.Ltmp532:
    0000028a: 	movq	-0x8(%rdx), %rax
    0000028e: 	addq	$0x200, %rax
    00000294: 	jmp	.Ltmp535 # Offset: 660
.Ltmp531:
    00000299: 	testq	%r12, %r12
    0000029c: 	je	.Ltmp534 # Offset: 668
    000002a2: 	jmp	.Ltmp536 # Offset: 674
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp524:
    000002a8: 	movq	DATAat0x2b648(%rip), %rax
    000002af: 	pxor	%xmm3, %xmm3
    000002b3: 	movsd	%xmm4, 0x18(%rsp)
    000002b9: 	movsd	%xmm5, 0x10(%rsp)
    000002bf: 	movq	%rax, %xmm2
    000002c4: 	movq	DATAat0x2b810(%rip), %rax
    000002cb: 	movq	%rax, %xmm1
    000002d0: 	callq	__muldc3@PLT # Offset: 720
    000002d5: 	movsd	0x18(%rsp), %xmm4
    000002db: 	movsd	0x10(%rsp), %xmm5
    000002e1: 	movapd	%xmm0, %xmm2
    000002e5: 	jmp	.Ltmp537 # Offset: 741
.Ltmp533:
    000002ea: 	callq	__stack_chk_fail@PLT # Offset: 746
.Ltmp529:
    000002ef: 	leaq	DATAat0x2b008(%rip), %rdi
    000002f6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 758
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x9130
  Size        : 0x427
  MaxSize     : 0x430
  Offset      : 0x9130
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x38(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp538 # Offset: 65
    00000047: 	movsd	init_value(%rip), %xmm7
    0000004f: 	leal	-0x1(%r13), %eax
    00000053: 	xorl	%ebx, %ebx
    00000055: 	pxor	%xmm3, %xmm3
    00000059: 	shlq	$0x4, %rax
    0000005d: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000064: 	movq	DATAat0x2b810(%rip), %xmm8
    0000006d: 	leaq	0x10(%r12,%rax), %r14
    00000072: 	movsd	%xmm7, 0x8(%rsp)
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp545:
    00000080: 	movq	%r12, %rax
    00000083: 	movapd	%xmm3, %xmm7
    00000087: 	movapd	%xmm3, %xmm6
    0000008b: 	testl	%r13d, %r13d
    0000008e: 	jle	.Ltmp539 # Offset: 142
.Ltmp541:
    00000090: 	movsd	0x8(%rax), %xmm0
    00000095: 	movapd	%xmm3, %xmm4
    00000099: 	movsd	(%rax), %xmm2
    0000009d: 	addsd	%xmm3, %xmm0
    000000a1: 	addsd	%xmm3, %xmm2
    000000a5: 	subsd	%xmm0, %xmm4
    000000a9: 	movapd	%xmm3, %xmm0
    000000ad: 	subsd	%xmm2, %xmm0
    000000b1: 	movapd	%xmm4, %xmm1
    000000b5: 	xorpd	%xmm8, %xmm1
    000000ba: 	xorpd	%xmm8, %xmm0
    000000bf: 	movapd	%xmm1, %xmm2
    000000c3: 	movapd	%xmm0, %xmm5
    000000c7: 	mulsd	%xmm3, %xmm2
    000000cb: 	subsd	%xmm2, %xmm5
    000000cf: 	movapd	%xmm0, %xmm2
    000000d3: 	mulsd	%xmm3, %xmm2
    000000d7: 	subsd	%xmm4, %xmm2
    000000db: 	ucomisd	%xmm5, %xmm2
    000000df: 	jp	.Ltmp540 # Offset: 223
    000000e5: 	addq	$0x10, %rax
    000000e9: 	addsd	%xmm5, %xmm6
    000000ed: 	addsd	%xmm2, %xmm7
    000000f1: 	cmpq	%r14, %rax
    000000f4: 	jne	.Ltmp541 # Offset: 244
.Ltmp539:
    000000f6: 	movsd	0x8(%rsp), %xmm1
    000000fc: 	movapd	%xmm3, %xmm0
    00000100: 	movapd	%xmm3, %xmm4
    00000104: 	addsd	%xmm3, %xmm1
    00000108: 	subsd	%xmm1, %xmm0
    0000010c: 	movapd	%xmm0, %xmm5
    00000110: 	subsd	%xmm0, %xmm4
    00000114: 	xorpd	%xmm8, %xmm5
    00000119: 	movapd	%xmm5, %xmm1
    0000011d: 	mulsd	%xmm3, %xmm1
    00000121: 	ucomisd	%xmm1, %xmm4
    00000125: 	jp	.Ltmp542 # Offset: 293
.Ltmp558:
    0000012b: 	movsd	DATAat0x2b648(%rip), %xmm0
    00000133: 	movapd	%xmm1, %xmm2
    00000137: 	movsd	DATAat0x2b648(%rip), %xmm5
    0000013f: 	mulsd	%xmm3, %xmm2
    00000143: 	mulsd	%xmm4, %xmm0
    00000147: 	mulsd	%xmm1, %xmm5
    0000014b: 	subsd	%xmm2, %xmm0
    0000014f: 	movapd	%xmm4, %xmm2
    00000153: 	mulsd	%xmm3, %xmm2
    00000157: 	addsd	%xmm5, %xmm2
    0000015b: 	ucomisd	%xmm2, %xmm0
    0000015f: 	jp	.Ltmp543 # Offset: 351
.Ltmp557:
    00000165: 	subsd	%xmm0, %xmm6
    00000169: 	subsd	%xmm2, %xmm7
    0000016d: 	movapd	%xmm6, %xmm0
    00000171: 	movapd	%xmm7, %xmm1
    00000175: 	callq	cabs@PLT # Offset: 373
    0000017a: 	movsd	DATAat0x2b658(%rip), %xmm6
    00000182: 	pxor	%xmm3, %xmm3
    00000186: 	movq	DATAat0x2b810(%rip), %xmm8
    0000018f: 	comisd	%xmm0, %xmm6
    00000193: 	jbe	.Ltmp544 # Offset: 403
    00000199: 	addl	$0x1, %ebx
    0000019c: 	cmpl	%ebp, %ebx
    0000019e: 	jl	.Ltmp545 # Offset: 414
.Ltmp538:
    000001a4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001ab: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001b2: 	subq	$0x20, %rax
    000001b6: 	cmpq	%rax, %rbx
    000001b9: 	je	.Ltmp546 # Offset: 441
    000001bf: 	movq	0x10(%rsp), %rax
    000001c4: 	leaq	0x10(%rbx), %rdi
    000001c8: 	movq	%rdi, (%rbx)
    000001cb: 	movq	(%rax), %rbp
    000001ce: 	movq	0x8(%rax), %r12
    000001d2: 	movq	%rbp, %rax
    000001d5: 	addq	%r12, %rax
    000001d8: 	je	.Ltmp547 # Offset: 472
    000001da: 	testq	%rbp, %rbp
    000001dd: 	je	.Ltmp548 # Offset: 477
.Ltmp547:
    000001e3: 	movq	%r12, 0x30(%rsp)
    000001e8: 	cmpq	$0xf, %r12
    000001ec: 	ja	.Ltmp549 # Offset: 492
    000001f2: 	cmpq	$0x1, %r12
    000001f6: 	jne	.Ltmp550 # Offset: 502
    000001fc: 	movzbl	(%rbp), %eax
    00000200: 	movb	%al, 0x10(%rbx)
.Ltmp553:
    00000203: 	movq	%r12, 0x8(%rbx)
    00000207: 	movb	$0x0, (%rdi,%r12)
    0000020c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000213: 	addq	$0x20, %rax
    00000217: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp555:
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022c: 	je	.Ltmp551 # Offset: 556
.Ltmp554:
    00000232: 	movq	-0x20(%rax), %rbp
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	movq	%rax, end_time(%rip)
    00000242: 	movq	0x38(%rsp), %rdx
    00000247: 	subq	%fs:0x28, %rdx
    00000250: 	jne	.Ltmp552 # Offset: 592
    00000256: 	subq	start_time(%rip), %rax
    0000025d: 	pxor	%xmm0, %xmm0
    00000261: 	movq	%rbp, %rdi
    00000264: 	cvtsi2sd	%rax, %xmm0
    00000269: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000271: 	addq	$0x48, %rsp
    00000275: 	popq	%rbx
    00000276: 	popq	%rbp
    00000277: 	popq	%r12
    00000279: 	popq	%r13
    0000027b: 	popq	%r14
    0000027d: 	popq	%r15
    0000027f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 639
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp544:
    00000288: 	movl	current_test(%rip), %edx
    0000028e: 	movq	%r15, %rsi
    00000291: 	movl	$0x1, %edi
    00000296: 	xorl	%eax, %eax
    00000298: 	addl	$0x1, %ebx
    0000029b: 	callq	__printf_chk@PLT # Offset: 667
    000002a0: 	movl	iterations(%rip), %ebp
    000002a6: 	cmpl	%ebp, %ebx
    000002a8: 	jge	.Ltmp538 # Offset: 680
    000002ae: 	movsd	init_value(%rip), %xmm7
    000002b6: 	pxor	%xmm3, %xmm3
    000002ba: 	movq	DATAat0x2b810(%rip), %xmm8
    000002c3: 	movsd	%xmm7, 0x8(%rsp)
    000002c9: 	jmp	.Ltmp545 # Offset: 713
.Ltmp549:
    000002ce: 	movq	%rbx, %rdi
    000002d1: 	leaq	0x30(%rsp), %rsi
    000002d6: 	xorl	%edx, %edx
    000002d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 728
    000002dd: 	movq	%rax, (%rbx)
    000002e0: 	movq	%rax, %rdi
    000002e3: 	movq	0x30(%rsp), %rax
    000002e8: 	movq	%rax, 0x10(%rbx)
.Ltmp556:
    000002ec: 	movq	%r12, %rdx
    000002ef: 	movq	%rbp, %rsi
    000002f2: 	callq	memcpy@PLT # Offset: 754
    000002f7: 	movq	0x30(%rsp), %r12
    000002fc: 	movq	(%rbx), %rdi
    000002ff: 	jmp	.Ltmp553 # Offset: 767
.Ltmp551:
    00000304: 	movq	-0x8(%rdx), %rax
    00000308: 	addq	$0x200, %rax
    0000030e: 	jmp	.Ltmp554 # Offset: 782
.Ltmp546:
    00000313: 	movq	0x10(%rsp), %rsi
    00000318: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000031f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 799
    00000324: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032b: 	jmp	.Ltmp555 # Offset: 811
.Ltmp550:
    00000330: 	testq	%r12, %r12
    00000333: 	je	.Ltmp553 # Offset: 819
    00000339: 	jmp	.Ltmp556 # Offset: 825
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp540:
    00000340: 	movq	%rax, 0x18(%rsp)
    00000345: 	movq	DATAat0x2b620(%rip), %rax
    0000034c: 	movsd	%xmm6, 0x28(%rsp)
    00000352: 	movq	%rax, %xmm2
    00000357: 	movsd	%xmm7, 0x20(%rsp)
    0000035d: 	callq	__muldc3@PLT # Offset: 861
    00000362: 	movq	0x18(%rsp), %rax
    00000367: 	movsd	0x28(%rsp), %xmm6
    0000036d: 	pxor	%xmm3, %xmm3
    00000371: 	movq	DATAat0x2b810(%rip), %xmm8
    0000037a: 	movsd	0x20(%rsp), %xmm7
    00000380: 	addq	$0x10, %rax
    00000384: 	addsd	%xmm0, %xmm6
    00000388: 	cmpq	%rax, %r14
    0000038b: 	addsd	%xmm1, %xmm7
    0000038f: 	jne	.Ltmp541 # Offset: 911
    00000395: 	jmp	.Ltmp539 # Offset: 917
.Ltmp543:
    0000039a: 	movq	DATAat0x2b648(%rip), %rax
    000003a1: 	movapd	%xmm4, %xmm0
    000003a5: 	movsd	%xmm6, 0x20(%rsp)
    000003ab: 	movsd	%xmm7, 0x18(%rsp)
    000003b1: 	movq	%rax, %xmm2
    000003b6: 	callq	__muldc3@PLT # Offset: 950
    000003bb: 	movsd	0x20(%rsp), %xmm6
    000003c1: 	movsd	0x18(%rsp), %xmm7
    000003c7: 	movapd	%xmm1, %xmm2
    000003cb: 	jmp	.Ltmp557 # Offset: 971
.Ltmp542:
    000003d0: 	movq	DATAat0x2b620(%rip), %rax
    000003d7: 	movapd	%xmm5, %xmm0
    000003db: 	movsd	%xmm6, 0x20(%rsp)
    000003e1: 	movsd	%xmm7, 0x18(%rsp)
    000003e7: 	movq	%rax, %xmm2
    000003ec: 	movq	DATAat0x2b810(%rip), %rax
    000003f3: 	movq	%rax, %xmm1
    000003f8: 	callq	__muldc3@PLT # Offset: 1016
    000003fd: 	movsd	0x20(%rsp), %xmm6
    00000403: 	movsd	0x18(%rsp), %xmm7
    00000409: 	pxor	%xmm3, %xmm3
    0000040d: 	movapd	%xmm0, %xmm4
    00000411: 	jmp	.Ltmp558 # Offset: 1041
.Ltmp552:
    00000416: 	callq	__stack_chk_fail@PLT # Offset: 1046
.Ltmp548:
    0000041b: 	leaq	DATAat0x2b008(%rip), %rdi
    00000422: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1058
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x9560
  Size        : 0x43b
  MaxSize     : 0x440
  Offset      : 0x9560
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x48(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp559 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	pxor	%xmm7, %xmm7
    0000004f: 	pxor	%xmm3, %xmm3
    00000053: 	xorl	%ebx, %ebx
    00000055: 	cvtsd2ss	init_value(%rip), %xmm7
    0000005d: 	leaq	0x8(%r12,%rax,8), %r14
    00000062: 	movss	DATAat0x2b800(%rip), %xmm8
    0000006b: 	movss	%xmm7, 0x4(%rsp)
    00000071: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp566:
    00000080: 	movq	%r12, %rax
    00000083: 	movaps	%xmm3, %xmm6
    00000086: 	movaps	%xmm3, %xmm7
    00000089: 	testl	%r13d, %r13d
    0000008c: 	jle	.Ltmp560 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp562:
    00000090: 	movss	0x4(%rax), %xmm0
    00000095: 	movaps	%xmm3, %xmm4
    00000098: 	movss	(%rax), %xmm2
    0000009c: 	addss	%xmm3, %xmm0
    000000a0: 	addss	%xmm3, %xmm2
    000000a4: 	subss	%xmm0, %xmm4
    000000a8: 	movaps	%xmm3, %xmm0
    000000ab: 	subss	%xmm2, %xmm0
    000000af: 	movaps	%xmm4, %xmm1
    000000b2: 	xorps	%xmm8, %xmm1
    000000b6: 	xorps	%xmm8, %xmm0
    000000ba: 	movaps	%xmm1, %xmm2
    000000bd: 	movaps	%xmm0, %xmm5
    000000c0: 	mulss	%xmm3, %xmm2
    000000c4: 	subss	%xmm2, %xmm5
    000000c8: 	movaps	%xmm0, %xmm2
    000000cb: 	mulss	%xmm3, %xmm2
    000000cf: 	subss	%xmm4, %xmm2
    000000d3: 	ucomiss	%xmm5, %xmm2
    000000d6: 	jp	.Ltmp561 # Offset: 214
    000000dc: 	addq	$0x8, %rax
    000000e0: 	addss	%xmm5, %xmm7
    000000e4: 	addss	%xmm2, %xmm6
    000000e8: 	cmpq	%r14, %rax
    000000eb: 	jne	.Ltmp562 # Offset: 235
.Ltmp560:
    000000ed: 	movss	0x4(%rsp), %xmm1
    000000f3: 	movaps	%xmm3, %xmm0
    000000f6: 	movaps	%xmm3, %xmm4
    000000f9: 	addss	%xmm3, %xmm1
    000000fd: 	subss	%xmm1, %xmm0
    00000101: 	movaps	%xmm0, %xmm5
    00000104: 	subss	%xmm0, %xmm4
    00000108: 	xorps	%xmm8, %xmm5
    0000010c: 	movaps	%xmm5, %xmm1
    0000010f: 	mulss	%xmm3, %xmm1
    00000113: 	ucomiss	%xmm1, %xmm4
    00000116: 	jp	.Ltmp563 # Offset: 278
.Ltmp579:
    0000011c: 	movss	DATAat0x2b900(%rip), %xmm2
    00000124: 	movaps	%xmm1, %xmm0
    00000127: 	movss	DATAat0x2b900(%rip), %xmm5
    0000012f: 	mulss	%xmm3, %xmm0
    00000133: 	mulss	%xmm4, %xmm2
    00000137: 	mulss	%xmm1, %xmm5
    0000013b: 	subss	%xmm0, %xmm2
    0000013f: 	movaps	%xmm4, %xmm0
    00000142: 	mulss	%xmm3, %xmm0
    00000146: 	addss	%xmm5, %xmm0
    0000014a: 	ucomiss	%xmm0, %xmm2
    0000014d: 	jp	.Ltmp564 # Offset: 333
.Ltmp578:
    00000153: 	subss	%xmm0, %xmm6
    00000157: 	subss	%xmm2, %xmm7
    0000015b: 	movss	%xmm6, 0x24(%rsp)
    00000161: 	movss	%xmm7, 0x20(%rsp)
    00000167: 	movq	0x20(%rsp), %xmm0
    0000016d: 	callq	cabsf@PLT # Offset: 365
    00000172: 	movss	DATAat0x2b908(%rip), %xmm6
    0000017a: 	pxor	%xmm3, %xmm3
    0000017e: 	movss	DATAat0x2b800(%rip), %xmm8
    00000187: 	comiss	%xmm0, %xmm6
    0000018a: 	jbe	.Ltmp565 # Offset: 394
    00000190: 	addl	$0x1, %ebx
    00000193: 	cmpl	%ebp, %ebx
    00000195: 	jl	.Ltmp566 # Offset: 405
.Ltmp559:
    0000019b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001a2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001a9: 	subq	$0x20, %rax
    000001ad: 	cmpq	%rax, %rbx
    000001b0: 	je	.Ltmp567 # Offset: 432
    000001b6: 	movq	0x8(%rsp), %rax
    000001bb: 	leaq	0x10(%rbx), %rdi
    000001bf: 	movq	%rdi, (%rbx)
    000001c2: 	movq	(%rax), %rbp
    000001c5: 	movq	0x8(%rax), %r12
    000001c9: 	movq	%rbp, %rax
    000001cc: 	addq	%r12, %rax
    000001cf: 	je	.Ltmp568 # Offset: 463
    000001d1: 	testq	%rbp, %rbp
    000001d4: 	je	.Ltmp569 # Offset: 468
.Ltmp568:
    000001da: 	movq	%r12, 0x40(%rsp)
    000001df: 	cmpq	$0xf, %r12
    000001e3: 	ja	.Ltmp570 # Offset: 483
    000001e9: 	cmpq	$0x1, %r12
    000001ed: 	jne	.Ltmp571 # Offset: 493
    000001f3: 	movzbl	(%rbp), %eax
    000001f7: 	movb	%al, 0x10(%rbx)
.Ltmp574:
    000001fa: 	movq	%r12, 0x8(%rbx)
    000001fe: 	movb	$0x0, (%rdi,%r12)
    00000203: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020a: 	addq	$0x20, %rax
    0000020e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp576:
    00000215: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000223: 	je	.Ltmp572 # Offset: 547
.Ltmp575:
    00000229: 	movq	-0x20(%rax), %rbp
    0000022d: 	callq	clock@PLT # Offset: 557
    00000232: 	movq	%rax, end_time(%rip)
    00000239: 	movq	0x48(%rsp), %rdx
    0000023e: 	subq	%fs:0x28, %rdx
    00000247: 	jne	.Ltmp573 # Offset: 583
    0000024d: 	subq	start_time(%rip), %rax
    00000254: 	pxor	%xmm0, %xmm0
    00000258: 	movq	%rbp, %rdi
    0000025b: 	cvtsi2sd	%rax, %xmm0
    00000260: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000268: 	addq	$0x58, %rsp
    0000026c: 	popq	%rbx
    0000026d: 	popq	%rbp
    0000026e: 	popq	%r12
    00000270: 	popq	%r13
    00000272: 	popq	%r14
    00000274: 	popq	%r15
    00000276: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 630
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp565:
    00000280: 	movl	current_test(%rip), %edx
    00000286: 	movq	%r15, %rsi
    00000289: 	movl	$0x1, %edi
    0000028e: 	xorl	%eax, %eax
    00000290: 	addl	$0x1, %ebx
    00000293: 	callq	__printf_chk@PLT # Offset: 659
    00000298: 	movl	iterations(%rip), %ebp
    0000029e: 	cmpl	%ebp, %ebx
    000002a0: 	jge	.Ltmp559 # Offset: 672
    000002a6: 	pxor	%xmm7, %xmm7
    000002aa: 	pxor	%xmm3, %xmm3
    000002ae: 	movss	DATAat0x2b800(%rip), %xmm8
    000002b7: 	cvtsd2ss	init_value(%rip), %xmm7
    000002bf: 	movss	%xmm7, 0x4(%rsp)
    000002c5: 	jmp	.Ltmp566 # Offset: 709
.Ltmp570:
    000002ca: 	movq	%rbx, %rdi
    000002cd: 	leaq	0x40(%rsp), %rsi
    000002d2: 	xorl	%edx, %edx
    000002d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 724
    000002d9: 	movq	%rax, (%rbx)
    000002dc: 	movq	%rax, %rdi
    000002df: 	movq	0x40(%rsp), %rax
    000002e4: 	movq	%rax, 0x10(%rbx)
.Ltmp577:
    000002e8: 	movq	%r12, %rdx
    000002eb: 	movq	%rbp, %rsi
    000002ee: 	callq	memcpy@PLT # Offset: 750
    000002f3: 	movq	0x40(%rsp), %r12
    000002f8: 	movq	(%rbx), %rdi
    000002fb: 	jmp	.Ltmp574 # Offset: 763
.Ltmp572:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp575 # Offset: 778
.Ltmp567:
    0000030f: 	movq	0x8(%rsp), %rsi
    00000314: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000031b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 795
    00000320: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000327: 	jmp	.Ltmp576 # Offset: 807
.Ltmp571:
    0000032c: 	testq	%r12, %r12
    0000032f: 	je	.Ltmp574 # Offset: 815
    00000335: 	jmp	.Ltmp577 # Offset: 821
    00000337: 	nopw	(%rax,%rax) # Size: 9
.Ltmp561:
    00000340: 	movss	DATAat0x2b92c(%rip), %xmm2
    00000348: 	movq	%rax, 0x10(%rsp)
    0000034d: 	movss	%xmm7, 0x1c(%rsp)
    00000353: 	movss	%xmm6, 0x18(%rsp)
    00000359: 	callq	__mulsc3@PLT # Offset: 857
    0000035e: 	movq	0x10(%rsp), %rax
    00000363: 	movss	0x1c(%rsp), %xmm7
    00000369: 	pxor	%xmm3, %xmm3
    0000036d: 	movq	%xmm0, 0x38(%rsp)
    00000373: 	movss	0x18(%rsp), %xmm6
    00000379: 	addss	0x38(%rsp), %xmm7
    0000037f: 	movss	DATAat0x2b800(%rip), %xmm8
    00000388: 	addq	$0x8, %rax
    0000038c: 	addss	0x3c(%rsp), %xmm6
    00000392: 	cmpq	%rax, %r14
    00000395: 	jne	.Ltmp562 # Offset: 917
    0000039b: 	jmp	.Ltmp560 # Offset: 923
.Ltmp564:
    000003a0: 	movss	DATAat0x2b900(%rip), %xmm2
    000003a8: 	movaps	%xmm4, %xmm0
    000003ab: 	movss	%xmm7, 0x18(%rsp)
    000003b1: 	movss	%xmm6, 0x10(%rsp)
    000003b7: 	callq	__mulsc3@PLT # Offset: 951
    000003bc: 	movss	0x18(%rsp), %xmm7
    000003c2: 	movss	0x10(%rsp), %xmm6
    000003c8: 	movq	%xmm0, 0x28(%rsp)
    000003ce: 	movss	0x28(%rsp), %xmm2
    000003d4: 	movss	0x2c(%rsp), %xmm0
    000003da: 	jmp	.Ltmp578 # Offset: 986
.Ltmp563:
    000003df: 	movss	DATAat0x2b800(%rip), %xmm1
    000003e7: 	movaps	%xmm5, %xmm0
    000003ea: 	movss	DATAat0x2b92c(%rip), %xmm2
    000003f2: 	movss	%xmm7, 0x18(%rsp)
    000003f8: 	movss	%xmm6, 0x10(%rsp)
    000003fe: 	callq	__mulsc3@PLT # Offset: 1022
    00000403: 	movss	0x18(%rsp), %xmm7
    00000409: 	movss	0x10(%rsp), %xmm6
    0000040f: 	pxor	%xmm3, %xmm3
    00000413: 	movq	%xmm0, 0x30(%rsp)
    00000419: 	movss	0x30(%rsp), %xmm4
    0000041f: 	movss	0x34(%rsp), %xmm1
    00000425: 	jmp	.Ltmp579 # Offset: 1061
.Ltmp573:
    0000042a: 	callq	__stack_chk_fail@PLT # Offset: 1066
.Ltmp569:
    0000042f: 	leaq	DATAat0x2b008(%rip), %rdi
    00000436: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1078
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIfE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x99a0
  Size        : 0x4ad
  MaxSize     : 0x4b0
  Offset      : 0x99a0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIfE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x58(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp580 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	pxor	%xmm9, %xmm9
    00000050: 	pxor	%xmm3, %xmm3
    00000054: 	xorl	%ebx, %ebx
    00000056: 	leaq	0x8(%r12,%rax,8), %r14
    0000005b: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000062: 	movss	DATAat0x2b800(%rip), %xmm8
    0000006b: 	cvtsd2ss	init_value(%rip), %xmm9
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp587:
    00000078: 	movq	%r12, %rax
    0000007b: 	movaps	%xmm3, %xmm7
    0000007e: 	movaps	%xmm3, %xmm6
    00000081: 	testl	%r13d, %r13d
    00000084: 	jle	.Ltmp581 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp583:
    00000090: 	movss	0x4(%rax), %xmm4
    00000095: 	movss	(%rax), %xmm5
    00000099: 	movaps	%xmm3, %xmm10
    0000009d: 	movaps	%xmm4, %xmm0
    000000a0: 	movaps	%xmm5, %xmm2
    000000a3: 	addss	%xmm3, %xmm0
    000000a7: 	addss	%xmm3, %xmm2
    000000ab: 	subss	%xmm0, %xmm10
    000000b0: 	movaps	%xmm3, %xmm0
    000000b3: 	subss	%xmm2, %xmm0
    000000b7: 	movaps	%xmm10, %xmm1
    000000bb: 	xorps	%xmm8, %xmm1
    000000bf: 	xorps	%xmm8, %xmm0
    000000c3: 	movaps	%xmm1, %xmm2
    000000c6: 	movaps	%xmm0, %xmm11
    000000ca: 	mulss	%xmm3, %xmm2
    000000ce: 	subss	%xmm2, %xmm11
    000000d3: 	movaps	%xmm0, %xmm2
    000000d6: 	mulss	%xmm3, %xmm2
    000000da: 	subss	%xmm10, %xmm2
    000000df: 	ucomiss	%xmm11, %xmm2
    000000e3: 	jp	.Ltmp582 # Offset: 227
    000000e9: 	subss	%xmm11, %xmm5
    000000ee: 	subss	%xmm2, %xmm4
    000000f2: 	addq	$0x8, %rax
    000000f6: 	addss	%xmm5, %xmm6
    000000fa: 	addss	%xmm4, %xmm7
    000000fe: 	cmpq	%r14, %rax
    00000101: 	jne	.Ltmp583 # Offset: 257
.Ltmp581:
    00000103: 	movaps	%xmm9, %xmm0
    00000107: 	movaps	%xmm3, %xmm2
    0000010a: 	movaps	%xmm3, %xmm1
    0000010d: 	addss	%xmm3, %xmm0
    00000111: 	subss	%xmm0, %xmm2
    00000115: 	movaps	%xmm2, %xmm4
    00000118: 	subss	%xmm2, %xmm1
    0000011c: 	xorps	%xmm8, %xmm4
    00000120: 	movaps	%xmm4, %xmm0
    00000123: 	mulss	%xmm3, %xmm0
    00000127: 	ucomiss	%xmm0, %xmm1
    0000012a: 	jp	.Ltmp584 # Offset: 298
.Ltmp600:
    00000130: 	movaps	%xmm9, %xmm4
    00000134: 	movss	DATAat0x2b900(%rip), %xmm2
    0000013c: 	movss	DATAat0x2b900(%rip), %xmm5
    00000144: 	subss	%xmm1, %xmm4
    00000148: 	movaps	%xmm3, %xmm1
    0000014b: 	subss	%xmm0, %xmm1
    0000014f: 	mulss	%xmm4, %xmm2
    00000153: 	mulss	%xmm1, %xmm5
    00000157: 	movaps	%xmm1, %xmm0
    0000015a: 	mulss	%xmm3, %xmm0
    0000015e: 	subss	%xmm0, %xmm2
    00000162: 	movaps	%xmm4, %xmm0
    00000165: 	mulss	%xmm3, %xmm0
    00000169: 	addss	%xmm5, %xmm0
    0000016d: 	ucomiss	%xmm0, %xmm2
    00000170: 	jp	.Ltmp585 # Offset: 368
.Ltmp599:
    00000176: 	subss	%xmm2, %xmm6
    0000017a: 	subss	%xmm0, %xmm7
    0000017e: 	movss	%xmm9, 0x8(%rsp)
    00000185: 	movss	%xmm6, 0x30(%rsp)
    0000018b: 	movss	%xmm7, 0x34(%rsp)
    00000191: 	movq	0x30(%rsp), %xmm0
    00000197: 	callq	cabsf@PLT # Offset: 407
    0000019c: 	movss	0x8(%rsp), %xmm9
    000001a3: 	pxor	%xmm3, %xmm3
    000001a7: 	movss	DATAat0x2b908(%rip), %xmm6
    000001af: 	movss	DATAat0x2b800(%rip), %xmm8
    000001b8: 	comiss	%xmm0, %xmm6
    000001bb: 	jbe	.Ltmp586 # Offset: 443
    000001c1: 	addl	$0x1, %ebx
    000001c4: 	cmpl	%ebp, %ebx
    000001c6: 	jl	.Ltmp587 # Offset: 454
.Ltmp580:
    000001cc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001da: 	subq	$0x20, %rax
    000001de: 	cmpq	%rax, %rbx
    000001e1: 	je	.Ltmp588 # Offset: 481
    000001e7: 	movq	0x10(%rsp), %rax
    000001ec: 	leaq	0x10(%rbx), %rdi
    000001f0: 	movq	%rdi, (%rbx)
    000001f3: 	movq	(%rax), %rbp
    000001f6: 	movq	0x8(%rax), %r12
    000001fa: 	movq	%rbp, %rax
    000001fd: 	addq	%r12, %rax
    00000200: 	je	.Ltmp589 # Offset: 512
    00000202: 	testq	%rbp, %rbp
    00000205: 	je	.Ltmp590 # Offset: 517
.Ltmp589:
    0000020b: 	movq	%r12, 0x50(%rsp)
    00000210: 	cmpq	$0xf, %r12
    00000214: 	ja	.Ltmp591 # Offset: 532
    0000021a: 	cmpq	$0x1, %r12
    0000021e: 	jne	.Ltmp592 # Offset: 542
    00000224: 	movzbl	(%rbp), %eax
    00000228: 	movb	%al, 0x10(%rbx)
.Ltmp595:
    0000022b: 	movq	%r12, 0x8(%rbx)
    0000022f: 	movb	$0x0, (%rdi,%r12)
    00000234: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023b: 	addq	$0x20, %rax
    0000023f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp597:
    00000246: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000254: 	je	.Ltmp593 # Offset: 596
.Ltmp596:
    0000025a: 	movq	-0x20(%rax), %rbp
    0000025e: 	callq	clock@PLT # Offset: 606
    00000263: 	movq	%rax, end_time(%rip)
    0000026a: 	movq	0x58(%rsp), %rdx
    0000026f: 	subq	%fs:0x28, %rdx
    00000278: 	jne	.Ltmp594 # Offset: 632
    0000027e: 	subq	start_time(%rip), %rax
    00000285: 	pxor	%xmm0, %xmm0
    00000289: 	movq	%rbp, %rdi
    0000028c: 	cvtsi2sd	%rax, %xmm0
    00000291: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000299: 	addq	$0x68, %rsp
    0000029d: 	popq	%rbx
    0000029e: 	popq	%rbp
    0000029f: 	popq	%r12
    000002a1: 	popq	%r13
    000002a3: 	popq	%r14
    000002a5: 	popq	%r15
    000002a7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 679
    000002ac: 	nopl	(%rax) # Size: 4
.Ltmp586:
    000002b0: 	movl	current_test(%rip), %edx
    000002b6: 	movq	%r15, %rsi
    000002b9: 	movl	$0x1, %edi
    000002be: 	xorl	%eax, %eax
    000002c0: 	addl	$0x1, %ebx
    000002c3: 	callq	__printf_chk@PLT # Offset: 707
    000002c8: 	movl	iterations(%rip), %ebp
    000002ce: 	cmpl	%ebp, %ebx
    000002d0: 	jge	.Ltmp580 # Offset: 720
    000002d6: 	pxor	%xmm9, %xmm9
    000002db: 	pxor	%xmm3, %xmm3
    000002df: 	movss	DATAat0x2b800(%rip), %xmm8
    000002e8: 	cvtsd2ss	init_value(%rip), %xmm9
    000002f1: 	jmp	.Ltmp587 # Offset: 753
.Ltmp591:
    000002f6: 	movq	%rbx, %rdi
    000002f9: 	leaq	0x50(%rsp), %rsi
    000002fe: 	xorl	%edx, %edx
    00000300: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 768
    00000305: 	movq	%rax, (%rbx)
    00000308: 	movq	%rax, %rdi
    0000030b: 	movq	0x50(%rsp), %rax
    00000310: 	movq	%rax, 0x10(%rbx)
.Ltmp598:
    00000314: 	movq	%r12, %rdx
    00000317: 	movq	%rbp, %rsi
    0000031a: 	callq	memcpy@PLT # Offset: 794
    0000031f: 	movq	0x50(%rsp), %r12
    00000324: 	movq	(%rbx), %rdi
    00000327: 	jmp	.Ltmp595 # Offset: 807
.Ltmp593:
    0000032c: 	movq	-0x8(%rdx), %rax
    00000330: 	addq	$0x200, %rax
    00000336: 	jmp	.Ltmp596 # Offset: 822
.Ltmp588:
    0000033b: 	movq	0x10(%rsp), %rsi
    00000340: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000347: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 839
    0000034c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000353: 	jmp	.Ltmp597 # Offset: 851
.Ltmp592:
    00000358: 	testq	%r12, %r12
    0000035b: 	je	.Ltmp595 # Offset: 859
    00000361: 	jmp	.Ltmp598 # Offset: 865
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp582:
    00000368: 	movss	DATAat0x2b92c(%rip), %xmm2
    00000370: 	movq	%rax, 0x8(%rsp)
    00000375: 	movss	%xmm9, 0x2c(%rsp)
    0000037c: 	movss	%xmm5, 0x28(%rsp)
    00000382: 	movss	%xmm4, 0x24(%rsp)
    00000388: 	movss	%xmm7, 0x20(%rsp)
    0000038e: 	movss	%xmm6, 0x1c(%rsp)
    00000394: 	callq	__mulsc3@PLT # Offset: 916
    00000399: 	movq	0x8(%rsp), %rax
    0000039e: 	pxor	%xmm3, %xmm3
    000003a2: 	movss	0x28(%rsp), %xmm5
    000003a8: 	movq	%xmm0, 0x48(%rsp)
    000003ae: 	movss	0x24(%rsp), %xmm4
    000003b4: 	subss	0x48(%rsp), %xmm5
    000003ba: 	movss	DATAat0x2b800(%rip), %xmm8
    000003c3: 	subss	0x4c(%rsp), %xmm4
    000003c9: 	movss	0x1c(%rsp), %xmm6
    000003cf: 	addq	$0x8, %rax
    000003d3: 	movss	0x20(%rsp), %xmm7
    000003d9: 	cmpq	%rax, %r14
    000003dc: 	movss	0x2c(%rsp), %xmm9
    000003e3: 	addss	%xmm5, %xmm6
    000003e7: 	addss	%xmm4, %xmm7
    000003eb: 	jne	.Ltmp583 # Offset: 1003
    000003f1: 	jmp	.Ltmp581 # Offset: 1009
.Ltmp585:
    000003f6: 	movss	DATAat0x2b900(%rip), %xmm2
    000003fe: 	movaps	%xmm4, %xmm0
    00000401: 	movss	%xmm9, 0x20(%rsp)
    00000408: 	movss	%xmm7, 0x1c(%rsp)
    0000040e: 	movss	%xmm6, 0x8(%rsp)
    00000414: 	callq	__mulsc3@PLT # Offset: 1044
    00000419: 	movss	0x20(%rsp), %xmm9
    00000420: 	movss	0x1c(%rsp), %xmm7
    00000426: 	movq	%xmm0, 0x38(%rsp)
    0000042c: 	movss	0x8(%rsp), %xmm6
    00000432: 	movss	0x38(%rsp), %xmm2
    00000438: 	movss	0x3c(%rsp), %xmm0
    0000043e: 	jmp	.Ltmp599 # Offset: 1086
.Ltmp584:
    00000443: 	movss	DATAat0x2b800(%rip), %xmm1
    0000044b: 	movaps	%xmm4, %xmm0
    0000044e: 	movss	DATAat0x2b92c(%rip), %xmm2
    00000456: 	movss	%xmm9, 0x20(%rsp)
    0000045d: 	movss	%xmm7, 0x1c(%rsp)
    00000463: 	movss	%xmm6, 0x8(%rsp)
    00000469: 	callq	__mulsc3@PLT # Offset: 1129
    0000046e: 	movss	0x20(%rsp), %xmm9
    00000475: 	movss	0x1c(%rsp), %xmm7
    0000047b: 	pxor	%xmm3, %xmm3
    0000047f: 	movq	%xmm0, 0x40(%rsp)
    00000485: 	movss	0x8(%rsp), %xmm6
    0000048b: 	movss	0x40(%rsp), %xmm1
    00000491: 	movss	0x44(%rsp), %xmm0
    00000497: 	jmp	.Ltmp600 # Offset: 1175
.Ltmp594:
    0000049c: 	callq	__stack_chk_fail@PLT # Offset: 1180
.Ltmp590:
    000004a1: 	leaq	DATAat0x2b008(%rip), %rdi
    000004a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1192
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIfE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_CSE_halfoptISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x9e50
  Size        : 0x56d
  MaxSize     : 0x570
  Offset      : 0x9e50
  Section     : .text
  Orc Section : .local.text._Z16test_CSE_halfoptISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	movq	%xmm0, 0x58(%rsp)
    0000001e: 	movss	0x58(%rsp), %xmm2
    00000024: 	movss	0x5c(%rsp), %xmm3
    0000002a: 	movq	%rdx, 0x18(%rsp)
    0000002f: 	movss	%xmm2, 0x4(%rsp)
    00000035: 	movss	%xmm3, (%rsp)
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, 0x68(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	callq	clock@PLT # Offset: 74
    0000004f: 	movss	(%rsp), %xmm3
    00000054: 	movl	iterations(%rip), %r12d
    0000005b: 	movq	%rax, start_time(%rip)
    00000062: 	movss	0x4(%rsp), %xmm2
    00000068: 	testl	%r12d, %r12d
    0000006b: 	jle	.Ltmp601 # Offset: 107
    00000071: 	movss	0xc(%rbp), %xmm7
    00000076: 	leal	-0x2(%r13), %eax
    0000007a: 	xorl	%ebx, %ebx
    0000007c: 	movss	(%rbp), %xmm12
    00000082: 	movss	0x4(%rbp), %xmm11
    00000088: 	movss	0x8(%rbp), %xmm13
    0000008e: 	leaq	0x10(%rbp,%rax,8), %r14
    00000093: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000009a: 	movss	%xmm7, (%rsp)
    0000009f: 	nop # Size: 1
.Ltmp608:
    000000a0: 	movaps	%xmm12, %xmm5
    000000a4: 	movaps	%xmm11, %xmm1
    000000a8: 	subss	(%rsp), %xmm1
    000000ad: 	subss	%xmm13, %xmm5
    000000b2: 	movaps	%xmm2, %xmm4
    000000b5: 	movaps	%xmm3, %xmm0
    000000b8: 	movaps	%xmm3, %xmm6
    000000bb: 	movaps	%xmm12, %xmm8
    000000bf: 	movaps	%xmm11, %xmm9
    000000c3: 	mulss	%xmm1, %xmm0
    000000c7: 	mulss	%xmm5, %xmm4
    000000cb: 	mulss	%xmm5, %xmm6
    000000cf: 	subss	%xmm0, %xmm4
    000000d3: 	movaps	%xmm2, %xmm0
    000000d6: 	mulss	%xmm1, %xmm0
    000000da: 	addss	%xmm6, %xmm0
    000000de: 	ucomiss	%xmm0, %xmm4
    000000e1: 	jp	.Ltmp602 # Offset: 225
.Ltmp619:
    000000e7: 	addss	%xmm4, %xmm4
    000000eb: 	movaps	%xmm12, %xmm5
    000000ef: 	pxor	%xmm7, %xmm7
    000000f3: 	addss	%xmm0, %xmm0
    000000f7: 	addss	%xmm4, %xmm5
    000000fb: 	addss	%xmm13, %xmm4
    00000100: 	addss	%xmm7, %xmm5
    00000104: 	subss	%xmm4, %xmm5
    00000108: 	movaps	%xmm11, %xmm4
    0000010c: 	addss	%xmm0, %xmm4
    00000110: 	addss	(%rsp), %xmm0
    00000115: 	addss	%xmm7, %xmm4
    00000119: 	subss	%xmm0, %xmm4
    0000011d: 	cmpl	$0x1, %r13d
    00000121: 	jle	.Ltmp603 # Offset: 289
    00000127: 	leaq	0x8(%rbp), %rax
    0000012b: 	jmp	.Ltmp604 # Offset: 299
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp606:
    00000130: 	movaps	%xmm7, %xmm8
    00000134: 	movaps	%xmm6, %xmm9
.Ltmp604:
    00000138: 	movss	(%rax), %xmm7
    0000013c: 	movaps	%xmm8, %xmm0
    00000140: 	movaps	%xmm9, %xmm1
    00000144: 	movaps	%xmm2, %xmm14
    00000148: 	movss	0x4(%rax), %xmm6
    0000014d: 	movaps	%xmm3, %xmm10
    00000151: 	movaps	%xmm3, %xmm15
    00000155: 	subss	%xmm7, %xmm0
    00000159: 	subss	%xmm6, %xmm1
    0000015d: 	mulss	%xmm0, %xmm14
    00000162: 	mulss	%xmm1, %xmm10
    00000167: 	mulss	%xmm0, %xmm15
    0000016c: 	subss	%xmm10, %xmm14
    00000171: 	movaps	%xmm2, %xmm10
    00000175: 	mulss	%xmm1, %xmm10
    0000017a: 	addss	%xmm15, %xmm10
    0000017f: 	ucomiss	%xmm14, %xmm10
    00000183: 	jp	.Ltmp605 # Offset: 387
    00000189: 	addss	%xmm14, %xmm14
    0000018e: 	addss	%xmm10, %xmm10
    00000193: 	addq	$0x8, %rax
    00000197: 	addss	%xmm14, %xmm8
    0000019c: 	addss	%xmm10, %xmm9
    000001a1: 	addss	%xmm7, %xmm14
    000001a6: 	addss	%xmm6, %xmm10
    000001ab: 	addss	%xmm8, %xmm5
    000001b0: 	addss	%xmm9, %xmm4
    000001b5: 	subss	%xmm14, %xmm5
    000001ba: 	subss	%xmm10, %xmm4
    000001bf: 	cmpq	%r14, %rax
    000001c2: 	jne	.Ltmp606 # Offset: 450
.Ltmp603:
    000001c8: 	movss	%xmm5, 0x40(%rsp)
    000001ce: 	movss	%xmm4, 0x44(%rsp)
    000001d4: 	movq	0x40(%rsp), %xmm0
    000001da: 	movss	%xmm13, 0x20(%rsp)
    000001e1: 	movss	%xmm11, 0x10(%rsp)
    000001e8: 	movss	%xmm12, 0xc(%rsp)
    000001ef: 	movss	%xmm3, 0x8(%rsp)
    000001f5: 	movss	%xmm2, 0x4(%rsp)
    000001fb: 	callq	cabsf@PLT # Offset: 507
    00000200: 	movss	DATAat0x2b908(%rip), %xmm2
    00000208: 	movss	0x8(%rsp), %xmm3
    0000020e: 	movss	0xc(%rsp), %xmm12
    00000215: 	movss	0x10(%rsp), %xmm11
    0000021c: 	comiss	%xmm0, %xmm2
    0000021f: 	movss	0x20(%rsp), %xmm13
    00000226: 	movss	0x4(%rsp), %xmm2
    0000022c: 	jbe	.Ltmp607 # Offset: 556
    00000232: 	addl	$0x1, %ebx
    00000235: 	cmpl	%r12d, %ebx
    00000238: 	jl	.Ltmp608 # Offset: 568
.Ltmp601:
    0000023e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000245: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000024c: 	subq	$0x20, %rax
    00000250: 	cmpq	%rax, %rbx
    00000253: 	je	.Ltmp609 # Offset: 595
    00000259: 	movq	0x18(%rsp), %rax
    0000025e: 	leaq	0x10(%rbx), %rdi
    00000262: 	movq	%rdi, (%rbx)
    00000265: 	movq	(%rax), %rbp
    00000268: 	movq	0x8(%rax), %r12
    0000026c: 	movq	%rbp, %rax
    0000026f: 	addq	%r12, %rax
    00000272: 	je	.Ltmp610 # Offset: 626
    00000274: 	testq	%rbp, %rbp
    00000277: 	je	.Ltmp611 # Offset: 631
.Ltmp610:
    0000027d: 	movq	%r12, 0x60(%rsp)
    00000282: 	cmpq	$0xf, %r12
    00000286: 	ja	.Ltmp612 # Offset: 646
    0000028c: 	cmpq	$0x1, %r12
    00000290: 	jne	.Ltmp613 # Offset: 656
    00000296: 	movzbl	(%rbp), %eax
    0000029a: 	movb	%al, 0x10(%rbx)
.Ltmp616:
    0000029d: 	movq	%r12, 0x8(%rbx)
    000002a1: 	movb	$0x0, (%rdi,%r12)
    000002a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002b4: 	addq	$0x20, %rax
    000002b8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002bf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002c6: 	je	.Ltmp614 # Offset: 710
.Ltmp617:
    000002cc: 	movq	-0x20(%rax), %rbp
    000002d0: 	callq	clock@PLT # Offset: 720
    000002d5: 	movq	%rax, end_time(%rip)
    000002dc: 	movq	0x68(%rsp), %rdx
    000002e1: 	subq	%fs:0x28, %rdx
    000002ea: 	jne	.Ltmp615 # Offset: 746
    000002f0: 	subq	start_time(%rip), %rax
    000002f7: 	pxor	%xmm0, %xmm0
    000002fb: 	movq	%rbp, %rdi
    000002fe: 	cvtsi2sd	%rax, %xmm0
    00000303: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000030b: 	addq	$0x78, %rsp
    0000030f: 	popq	%rbx
    00000310: 	popq	%rbp
    00000311: 	popq	%r12
    00000313: 	popq	%r13
    00000315: 	popq	%r14
    00000317: 	popq	%r15
    00000319: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 793
    0000031e: 	nop # Size: 2
.Ltmp607:
    00000320: 	movl	current_test(%rip), %edx
    00000326: 	movq	%r15, %rsi
    00000329: 	movl	$0x1, %edi
    0000032e: 	xorl	%eax, %eax
    00000330: 	addl	$0x1, %ebx
    00000333: 	callq	__printf_chk@PLT # Offset: 819
    00000338: 	movl	iterations(%rip), %r12d
    0000033f: 	cmpl	%r12d, %ebx
    00000342: 	jge	.Ltmp601 # Offset: 834
    00000348: 	movss	0xc(%rbp), %xmm3
    0000034d: 	movss	(%rbp), %xmm12
    00000353: 	movss	0x4(%rbp), %xmm11
    00000359: 	movss	0x8(%rbp), %xmm13
    0000035f: 	movss	%xmm3, (%rsp)
    00000364: 	movss	0x4(%rsp), %xmm2
    0000036a: 	movss	0x8(%rsp), %xmm3
    00000370: 	jmp	.Ltmp608 # Offset: 880
.Ltmp612:
    00000375: 	movq	%rbx, %rdi
    00000378: 	leaq	0x60(%rsp), %rsi
    0000037d: 	xorl	%edx, %edx
    0000037f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 895
    00000384: 	movq	%rax, (%rbx)
    00000387: 	movq	%rax, %rdi
    0000038a: 	movq	0x60(%rsp), %rax
    0000038f: 	movq	%rax, 0x10(%rbx)
.Ltmp618:
    00000393: 	movq	%r12, %rdx
    00000396: 	movq	%rbp, %rsi
    00000399: 	callq	memcpy@PLT # Offset: 921
    0000039e: 	movq	0x60(%rsp), %r12
    000003a3: 	movq	(%rbx), %rdi
    000003a6: 	jmp	.Ltmp616 # Offset: 934
.Ltmp609:
    000003ab: 	movq	0x18(%rsp), %rsi
    000003b0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003b7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 951
    000003bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003c3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003ca: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003d1: 	jne	.Ltmp617 # Offset: 977
.Ltmp614:
    000003d7: 	movq	-0x8(%rdx), %rax
    000003db: 	addq	$0x200, %rax
    000003e1: 	jmp	.Ltmp617 # Offset: 993
.Ltmp613:
    000003e6: 	testq	%r12, %r12
    000003e9: 	je	.Ltmp616 # Offset: 1001
    000003ef: 	jmp	.Ltmp618 # Offset: 1007
    000003f1: 	nopl	(%rax) # Size: 7
.Ltmp605:
    000003f8: 	movq	%rax, 0x10(%rsp)
    000003fd: 	movss	%xmm13, 0x3c(%rsp)
    00000404: 	movss	%xmm11, 0x38(%rsp)
    0000040b: 	movss	%xmm12, 0x34(%rsp)
    00000412: 	movss	%xmm5, 0x30(%rsp)
    00000418: 	movss	%xmm4, 0x2c(%rsp)
    0000041e: 	movss	%xmm7, 0x28(%rsp)
    00000424: 	movss	%xmm6, 0x24(%rsp)
    0000042a: 	movss	%xmm9, 0x20(%rsp)
    00000431: 	movss	%xmm8, 0xc(%rsp)
    00000438: 	movss	%xmm3, 0x8(%rsp)
    0000043e: 	movss	%xmm2, 0x4(%rsp)
    00000444: 	callq	__mulsc3@PLT # Offset: 1092
    00000449: 	movss	0x30(%rsp), %xmm5
    0000044f: 	movq	0x10(%rsp), %rax
    00000454: 	movq	%xmm0, 0x48(%rsp)
    0000045a: 	movss	0x48(%rsp), %xmm1
    00000460: 	movss	0x4c(%rsp), %xmm0
    00000466: 	movss	0x28(%rsp), %xmm7
    0000046c: 	movss	0x2c(%rsp), %xmm4
    00000472: 	addq	$0x8, %rax
    00000476: 	addss	%xmm1, %xmm1
    0000047a: 	addss	%xmm0, %xmm0
    0000047e: 	cmpq	%rax, %r14
    00000481: 	movss	0xc(%rsp), %xmm8
    00000488: 	movss	0x20(%rsp), %xmm9
    0000048f: 	movss	0x24(%rsp), %xmm6
    00000495: 	movss	0x4(%rsp), %xmm2
    0000049b: 	movss	0x8(%rsp), %xmm3
    000004a1: 	addss	%xmm1, %xmm8
    000004a6: 	addss	%xmm0, %xmm9
    000004ab: 	movss	0x34(%rsp), %xmm12
    000004b2: 	movss	0x38(%rsp), %xmm11
    000004b9: 	addss	%xmm7, %xmm1
    000004bd: 	addss	%xmm6, %xmm0
    000004c1: 	movss	0x3c(%rsp), %xmm13
    000004c8: 	addss	%xmm8, %xmm5
    000004cd: 	addss	%xmm9, %xmm4
    000004d2: 	subss	%xmm1, %xmm5
    000004d6: 	subss	%xmm0, %xmm4
    000004da: 	jne	.Ltmp606 # Offset: 1242
    000004e0: 	jmp	.Ltmp603 # Offset: 1248
.Ltmp602:
    000004e5: 	movaps	%xmm5, %xmm0
    000004e8: 	movss	%xmm13, 0x28(%rsp)
    000004ef: 	movss	%xmm11, 0x24(%rsp)
    000004f6: 	movss	%xmm12, 0x20(%rsp)
    000004fd: 	movss	%xmm11, 0x10(%rsp)
    00000504: 	movss	%xmm12, 0xc(%rsp)
    0000050b: 	movss	%xmm3, 0x8(%rsp)
    00000511: 	movss	%xmm2, 0x4(%rsp)
    00000517: 	callq	__mulsc3@PLT # Offset: 1303
    0000051c: 	movss	0x24(%rsp), %xmm11
    00000523: 	movss	0x20(%rsp), %xmm12
    0000052a: 	movq	%xmm0, 0x50(%rsp)
    00000530: 	movss	0x28(%rsp), %xmm13
    00000537: 	movss	0x50(%rsp), %xmm4
    0000053d: 	movss	0x54(%rsp), %xmm0
    00000543: 	movss	0x8(%rsp), %xmm3
    00000549: 	movaps	%xmm11, %xmm9
    0000054d: 	movaps	%xmm12, %xmm8
    00000551: 	movss	0x4(%rsp), %xmm2
    00000557: 	jmp	.Ltmp619 # Offset: 1367
.Ltmp615:
    0000055c: 	callq	__stack_chk_fail@PLT # Offset: 1372
.Ltmp611:
    00000561: 	leaq	DATAat0x2b008(%rip), %rdi
    00000568: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1384
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_CSE_halfoptISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_CSE_halfoptISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0xa3c0
  Size        : 0x558
  MaxSize     : 0x560
  Offset      : 0xa3c0
  Section     : .text
  Orc Section : .local.text._Z16test_CSE_halfoptISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x88, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	movsd	%xmm0, 0x8(%rsp)
    00000026: 	movsd	%xmm1, (%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movsd	(%rsp), %xmm3
    00000045: 	movl	iterations(%rip), %r12d
    0000004c: 	movq	%rax, start_time(%rip)
    00000053: 	movsd	0x8(%rsp), %xmm2
    00000059: 	testl	%r12d, %r12d
    0000005c: 	jle	.Ltmp620 # Offset: 92
    00000062: 	movsd	0x18(%rbp), %xmm7
    00000067: 	leal	-0x2(%r13), %eax
    0000006b: 	xorl	%ebx, %ebx
    0000006d: 	movsd	(%rbp), %xmm12
    00000073: 	shlq	$0x4, %rax
    00000077: 	movsd	0x8(%rbp), %xmm11
    0000007d: 	movsd	0x10(%rbp), %xmm13
    00000083: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000008a: 	leaq	0x20(%rbp,%rax), %r14
    0000008f: 	movsd	%xmm7, (%rsp)
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp627:
    00000098: 	movapd	%xmm12, %xmm0
    0000009d: 	movapd	%xmm11, %xmm5
    000000a2: 	subsd	(%rsp), %xmm5
    000000a7: 	subsd	%xmm13, %xmm0
    000000ac: 	movapd	%xmm2, %xmm4
    000000b0: 	movapd	%xmm3, %xmm1
    000000b4: 	movapd	%xmm3, %xmm6
    000000b8: 	movapd	%xmm12, %xmm8
    000000bd: 	movapd	%xmm11, %xmm9
    000000c2: 	mulsd	%xmm5, %xmm1
    000000c6: 	mulsd	%xmm0, %xmm4
    000000ca: 	mulsd	%xmm0, %xmm6
    000000ce: 	subsd	%xmm1, %xmm4
    000000d2: 	movapd	%xmm2, %xmm1
    000000d6: 	mulsd	%xmm5, %xmm1
    000000da: 	addsd	%xmm6, %xmm1
    000000de: 	ucomisd	%xmm1, %xmm4
    000000e2: 	jp	.Ltmp621 # Offset: 226
.Ltmp638:
    000000e8: 	addsd	%xmm4, %xmm4
    000000ec: 	movapd	%xmm12, %xmm5
    000000f1: 	pxor	%xmm7, %xmm7
    000000f5: 	addsd	%xmm1, %xmm1
    000000f9: 	addsd	%xmm4, %xmm5
    000000fd: 	addsd	%xmm13, %xmm4
    00000102: 	addsd	%xmm7, %xmm5
    00000106: 	subsd	%xmm4, %xmm5
    0000010a: 	movapd	%xmm11, %xmm4
    0000010f: 	addsd	%xmm1, %xmm4
    00000113: 	addsd	(%rsp), %xmm1
    00000118: 	addsd	%xmm7, %xmm4
    0000011c: 	subsd	%xmm1, %xmm4
    00000120: 	cmpl	$0x1, %r13d
    00000124: 	jle	.Ltmp622 # Offset: 292
    0000012a: 	leaq	0x10(%rbp), %rax
    0000012e: 	jmp	.Ltmp623 # Offset: 302
.Ltmp625:
    00000130: 	movapd	%xmm7, %xmm8
    00000135: 	movapd	%xmm6, %xmm9
.Ltmp623:
    0000013a: 	movsd	(%rax), %xmm7
    0000013e: 	movsd	0x8(%rax), %xmm6
    00000143: 	movapd	%xmm8, %xmm0
    00000148: 	movapd	%xmm9, %xmm1
    0000014d: 	movapd	%xmm2, %xmm14
    00000152: 	movapd	%xmm3, %xmm10
    00000157: 	movapd	%xmm3, %xmm15
    0000015c: 	subsd	%xmm7, %xmm0
    00000160: 	subsd	%xmm6, %xmm1
    00000164: 	mulsd	%xmm0, %xmm14
    00000169: 	mulsd	%xmm1, %xmm10
    0000016e: 	mulsd	%xmm0, %xmm15
    00000173: 	subsd	%xmm10, %xmm14
    00000178: 	movapd	%xmm2, %xmm10
    0000017d: 	mulsd	%xmm1, %xmm10
    00000182: 	addsd	%xmm15, %xmm10
    00000187: 	ucomisd	%xmm14, %xmm10
    0000018c: 	jp	.Ltmp624 # Offset: 396
    00000192: 	addsd	%xmm14, %xmm14
    00000197: 	addsd	%xmm10, %xmm10
    0000019c: 	addq	$0x10, %rax
    000001a0: 	addsd	%xmm14, %xmm8
    000001a5: 	addsd	%xmm10, %xmm9
    000001aa: 	addsd	%xmm7, %xmm14
    000001af: 	addsd	%xmm6, %xmm10
    000001b4: 	addsd	%xmm8, %xmm5
    000001b9: 	addsd	%xmm9, %xmm4
    000001be: 	subsd	%xmm14, %xmm5
    000001c3: 	subsd	%xmm10, %xmm4
    000001c8: 	cmpq	%r14, %rax
    000001cb: 	jne	.Ltmp625 # Offset: 459
.Ltmp622:
    000001d1: 	movapd	%xmm5, %xmm0
    000001d5: 	movapd	%xmm4, %xmm1
    000001d9: 	movsd	%xmm13, 0x28(%rsp)
    000001e0: 	movsd	%xmm11, 0x20(%rsp)
    000001e7: 	movsd	%xmm12, 0x18(%rsp)
    000001ee: 	movsd	%xmm3, 0x10(%rsp)
    000001f4: 	movsd	%xmm2, 0x8(%rsp)
    000001fa: 	callq	cabs@PLT # Offset: 506
    000001ff: 	movsd	DATAat0x2b658(%rip), %xmm2
    00000207: 	movsd	0x10(%rsp), %xmm3
    0000020d: 	movsd	0x18(%rsp), %xmm12
    00000214: 	movsd	0x20(%rsp), %xmm11
    0000021b: 	comisd	%xmm0, %xmm2
    0000021f: 	movsd	0x28(%rsp), %xmm13
    00000226: 	movsd	0x8(%rsp), %xmm2
    0000022c: 	jbe	.Ltmp626 # Offset: 556
    00000232: 	addl	$0x1, %ebx
    00000235: 	cmpl	%r12d, %ebx
    00000238: 	jl	.Ltmp627 # Offset: 568
.Ltmp620:
    0000023e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000245: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000024c: 	subq	$0x20, %rax
    00000250: 	cmpq	%rax, %rbx
    00000253: 	je	.Ltmp628 # Offset: 595
    00000259: 	movq	0x30(%rsp), %rax
    0000025e: 	leaq	0x10(%rbx), %rdi
    00000262: 	movq	%rdi, (%rbx)
    00000265: 	movq	(%rax), %rbp
    00000268: 	movq	0x8(%rax), %r12
    0000026c: 	movq	%rbp, %rax
    0000026f: 	addq	%r12, %rax
    00000272: 	je	.Ltmp629 # Offset: 626
    00000274: 	testq	%rbp, %rbp
    00000277: 	je	.Ltmp630 # Offset: 631
.Ltmp629:
    0000027d: 	movq	%r12, 0x70(%rsp)
    00000282: 	cmpq	$0xf, %r12
    00000286: 	ja	.Ltmp631 # Offset: 646
    0000028c: 	cmpq	$0x1, %r12
    00000290: 	jne	.Ltmp632 # Offset: 656
    00000296: 	movzbl	(%rbp), %eax
    0000029a: 	movb	%al, 0x10(%rbx)
.Ltmp635:
    0000029d: 	movq	%r12, 0x8(%rbx)
    000002a1: 	movb	$0x0, (%rdi,%r12)
    000002a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002b4: 	addq	$0x20, %rax
    000002b8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002bf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002c6: 	je	.Ltmp633 # Offset: 710
.Ltmp636:
    000002cc: 	movq	-0x20(%rax), %rbp
    000002d0: 	callq	clock@PLT # Offset: 720
    000002d5: 	movq	%rax, end_time(%rip)
    000002dc: 	movq	0x78(%rsp), %rdx
    000002e1: 	subq	%fs:0x28, %rdx
    000002ea: 	jne	.Ltmp634 # Offset: 746
    000002f0: 	subq	start_time(%rip), %rax
    000002f7: 	pxor	%xmm0, %xmm0
    000002fb: 	movq	%rbp, %rdi
    000002fe: 	cvtsi2sd	%rax, %xmm0
    00000303: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000030b: 	addq	$0x88, %rsp
    00000312: 	popq	%rbx
    00000313: 	popq	%rbp
    00000314: 	popq	%r12
    00000316: 	popq	%r13
    00000318: 	popq	%r14
    0000031a: 	popq	%r15
    0000031c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 796
    00000321: 	nopl	(%rax) # Size: 7
.Ltmp626:
    00000328: 	movl	current_test(%rip), %edx
    0000032e: 	movq	%r15, %rsi
    00000331: 	movl	$0x1, %edi
    00000336: 	xorl	%eax, %eax
    00000338: 	addl	$0x1, %ebx
    0000033b: 	callq	__printf_chk@PLT # Offset: 827
    00000340: 	movl	iterations(%rip), %r12d
    00000347: 	cmpl	%r12d, %ebx
    0000034a: 	jge	.Ltmp620 # Offset: 842
    00000350: 	movsd	0x18(%rbp), %xmm3
    00000355: 	movsd	(%rbp), %xmm12
    0000035b: 	movsd	0x8(%rbp), %xmm11
    00000361: 	movsd	0x10(%rbp), %xmm13
    00000367: 	movsd	%xmm3, (%rsp)
    0000036c: 	movsd	0x8(%rsp), %xmm2
    00000372: 	movsd	0x10(%rsp), %xmm3
    00000378: 	jmp	.Ltmp627 # Offset: 888
.Ltmp631:
    0000037d: 	movq	%rbx, %rdi
    00000380: 	leaq	0x70(%rsp), %rsi
    00000385: 	xorl	%edx, %edx
    00000387: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 903
    0000038c: 	movq	%rax, (%rbx)
    0000038f: 	movq	%rax, %rdi
    00000392: 	movq	0x70(%rsp), %rax
    00000397: 	movq	%rax, 0x10(%rbx)
.Ltmp637:
    0000039b: 	movq	%r12, %rdx
    0000039e: 	movq	%rbp, %rsi
    000003a1: 	callq	memcpy@PLT # Offset: 929
    000003a6: 	movq	0x70(%rsp), %r12
    000003ab: 	movq	(%rbx), %rdi
    000003ae: 	jmp	.Ltmp635 # Offset: 942
.Ltmp628:
    000003b3: 	movq	0x30(%rsp), %rsi
    000003b8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003bf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 959
    000003c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003cb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003d9: 	jne	.Ltmp636 # Offset: 985
.Ltmp633:
    000003df: 	movq	-0x8(%rdx), %rax
    000003e3: 	addq	$0x200, %rax
    000003e9: 	jmp	.Ltmp636 # Offset: 1001
.Ltmp632:
    000003ee: 	testq	%r12, %r12
    000003f1: 	je	.Ltmp635 # Offset: 1009
    000003f7: 	jmp	.Ltmp637 # Offset: 1015
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp624:
    00000400: 	movq	%rax, 0x20(%rsp)
    00000405: 	movsd	%xmm13, 0x68(%rsp)
    0000040c: 	movsd	%xmm11, 0x60(%rsp)
    00000413: 	movsd	%xmm12, 0x58(%rsp)
    0000041a: 	movsd	%xmm5, 0x50(%rsp)
    00000420: 	movsd	%xmm4, 0x48(%rsp)
    00000426: 	movsd	%xmm7, 0x40(%rsp)
    0000042c: 	movsd	%xmm6, 0x38(%rsp)
    00000432: 	movsd	%xmm9, 0x28(%rsp)
    00000439: 	movsd	%xmm8, 0x18(%rsp)
    00000440: 	movsd	%xmm3, 0x10(%rsp)
    00000446: 	movsd	%xmm2, 0x8(%rsp)
    0000044c: 	callq	__muldc3@PLT # Offset: 1100
    00000451: 	movsd	0x50(%rsp), %xmm5
    00000457: 	movq	0x20(%rsp), %rax
    0000045c: 	addsd	%xmm0, %xmm0
    00000460: 	addsd	%xmm1, %xmm1
    00000464: 	movsd	0x18(%rsp), %xmm8
    0000046b: 	movsd	0x28(%rsp), %xmm9
    00000472: 	movsd	0x40(%rsp), %xmm7
    00000478: 	movsd	0x48(%rsp), %xmm4
    0000047e: 	addq	$0x10, %rax
    00000482: 	movsd	0x38(%rsp), %xmm6
    00000488: 	cmpq	%rax, %r14
    0000048b: 	movsd	0x8(%rsp), %xmm2
    00000491: 	addsd	%xmm0, %xmm8
    00000496: 	addsd	%xmm1, %xmm9
    0000049b: 	movsd	0x10(%rsp), %xmm3
    000004a1: 	movsd	0x58(%rsp), %xmm12
    000004a8: 	addsd	%xmm7, %xmm0
    000004ac: 	addsd	%xmm6, %xmm1
    000004b0: 	movsd	0x60(%rsp), %xmm11
    000004b7: 	movsd	0x68(%rsp), %xmm13
    000004be: 	addsd	%xmm8, %xmm5
    000004c3: 	addsd	%xmm9, %xmm4
    000004c8: 	subsd	%xmm0, %xmm5
    000004cc: 	subsd	%xmm1, %xmm4
    000004d0: 	jne	.Ltmp625 # Offset: 1232
    000004d6: 	jmp	.Ltmp622 # Offset: 1238
.Ltmp621:
    000004db: 	movapd	%xmm5, %xmm1
    000004df: 	movsd	%xmm13, 0x40(%rsp)
    000004e6: 	movsd	%xmm11, 0x38(%rsp)
    000004ed: 	movsd	%xmm12, 0x28(%rsp)
    000004f4: 	movsd	%xmm11, 0x20(%rsp)
    000004fb: 	movsd	%xmm12, 0x18(%rsp)
    00000502: 	movsd	%xmm3, 0x10(%rsp)
    00000508: 	movsd	%xmm2, 0x8(%rsp)
    0000050e: 	callq	__muldc3@PLT # Offset: 1294
    00000513: 	movsd	0x38(%rsp), %xmm11
    0000051a: 	movsd	0x28(%rsp), %xmm12
    00000521: 	movsd	0x10(%rsp), %xmm3
    00000527: 	movsd	0x40(%rsp), %xmm13
    0000052e: 	movapd	%xmm0, %xmm4
    00000532: 	movsd	0x8(%rsp), %xmm2
    00000538: 	movapd	%xmm11, %xmm9
    0000053d: 	movapd	%xmm12, %xmm8
    00000542: 	jmp	.Ltmp638 # Offset: 1346
.Ltmp634:
    00000547: 	callq	__stack_chk_fail@PLT # Offset: 1351
.Ltmp630:
    0000054c: 	leaq	DATAat0x2b008(%rip), %rdi
    00000553: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1363
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_CSE_halfoptISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIdE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0xa920
  Size        : 0x4a5
  MaxSize     : 0x4b0
  Offset      : 0xa920
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIdE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x48(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ebp
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%ebp, %ebp
    00000041: 	jle	.Ltmp639 # Offset: 65
    00000047: 	leal	-0x1(%r13), %eax
    0000004b: 	pxor	%xmm3, %xmm3
    0000004f: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000056: 	xorl	%ebx, %ebx
    00000058: 	movq	DATAat0x2b810(%rip), %xmm8
    00000061: 	shlq	$0x4, %rax
    00000065: 	movsd	init_value(%rip), %xmm9
    0000006e: 	leaq	0x10(%r12,%rax), %r14
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp646:
    00000078: 	movq	%r12, %rax
    0000007b: 	movapd	%xmm3, %xmm7
    0000007f: 	movapd	%xmm3, %xmm6
    00000083: 	testl	%r13d, %r13d
    00000086: 	jle	.Ltmp640 # Offset: 134
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp642:
    00000090: 	movsd	0x8(%rax), %xmm4
    00000095: 	movsd	(%rax), %xmm5
    00000099: 	movapd	%xmm3, %xmm10
    0000009e: 	movapd	%xmm4, %xmm0
    000000a2: 	movapd	%xmm5, %xmm2
    000000a6: 	addsd	%xmm3, %xmm0
    000000aa: 	addsd	%xmm3, %xmm2
    000000ae: 	subsd	%xmm0, %xmm10
    000000b3: 	movapd	%xmm3, %xmm0
    000000b7: 	subsd	%xmm2, %xmm0
    000000bb: 	movapd	%xmm10, %xmm1
    000000c0: 	xorpd	%xmm8, %xmm1
    000000c5: 	xorpd	%xmm8, %xmm0
    000000ca: 	movapd	%xmm1, %xmm2
    000000ce: 	movapd	%xmm0, %xmm11
    000000d3: 	mulsd	%xmm3, %xmm2
    000000d7: 	subsd	%xmm2, %xmm11
    000000dc: 	movapd	%xmm0, %xmm2
    000000e0: 	mulsd	%xmm3, %xmm2
    000000e4: 	subsd	%xmm10, %xmm2
    000000e9: 	ucomisd	%xmm11, %xmm2
    000000ee: 	jp	.Ltmp641 # Offset: 238
    000000f4: 	subsd	%xmm11, %xmm5
    000000f9: 	subsd	%xmm2, %xmm4
    000000fd: 	addq	$0x10, %rax
    00000101: 	addsd	%xmm5, %xmm6
    00000105: 	addsd	%xmm4, %xmm7
    00000109: 	cmpq	%r14, %rax
    0000010c: 	jne	.Ltmp642 # Offset: 268
.Ltmp640:
    0000010e: 	movapd	%xmm9, %xmm0
    00000113: 	movapd	%xmm3, %xmm1
    00000117: 	movapd	%xmm3, %xmm2
    0000011b: 	addsd	%xmm3, %xmm0
    0000011f: 	subsd	%xmm0, %xmm1
    00000123: 	movapd	%xmm1, %xmm4
    00000127: 	subsd	%xmm1, %xmm2
    0000012b: 	xorpd	%xmm8, %xmm4
    00000130: 	movapd	%xmm4, %xmm0
    00000134: 	mulsd	%xmm3, %xmm0
    00000138: 	ucomisd	%xmm0, %xmm2
    0000013c: 	jp	.Ltmp643 # Offset: 316
.Ltmp659:
    00000142: 	movapd	%xmm3, %xmm1
    00000146: 	movapd	%xmm9, %xmm4
    0000014b: 	movsd	DATAat0x2b648(%rip), %xmm5
    00000153: 	subsd	%xmm0, %xmm1
    00000157: 	subsd	%xmm2, %xmm4
    0000015b: 	movsd	DATAat0x2b648(%rip), %xmm0
    00000163: 	mulsd	%xmm4, %xmm0
    00000167: 	movapd	%xmm1, %xmm2
    0000016b: 	mulsd	%xmm3, %xmm2
    0000016f: 	mulsd	%xmm1, %xmm5
    00000173: 	subsd	%xmm2, %xmm0
    00000177: 	movapd	%xmm4, %xmm2
    0000017b: 	mulsd	%xmm3, %xmm2
    0000017f: 	addsd	%xmm5, %xmm2
    00000183: 	ucomisd	%xmm2, %xmm0
    00000187: 	jp	.Ltmp644 # Offset: 391
.Ltmp658:
    0000018d: 	subsd	%xmm0, %xmm6
    00000191: 	subsd	%xmm2, %xmm7
    00000195: 	movsd	%xmm9, 0x8(%rsp)
    0000019c: 	movapd	%xmm6, %xmm0
    000001a0: 	movapd	%xmm7, %xmm1
    000001a4: 	callq	cabs@PLT # Offset: 420
    000001a9: 	movsd	0x8(%rsp), %xmm9
    000001b0: 	pxor	%xmm3, %xmm3
    000001b4: 	movsd	DATAat0x2b658(%rip), %xmm6
    000001bc: 	movq	DATAat0x2b810(%rip), %xmm8
    000001c5: 	comisd	%xmm0, %xmm6
    000001c9: 	jbe	.Ltmp645 # Offset: 457
    000001cf: 	addl	$0x1, %ebx
    000001d2: 	cmpl	%ebp, %ebx
    000001d4: 	jl	.Ltmp646 # Offset: 468
.Ltmp639:
    000001da: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e8: 	subq	$0x20, %rax
    000001ec: 	cmpq	%rax, %rbx
    000001ef: 	je	.Ltmp647 # Offset: 495
    000001f5: 	movq	0x10(%rsp), %rax
    000001fa: 	leaq	0x10(%rbx), %rdi
    000001fe: 	movq	%rdi, (%rbx)
    00000201: 	movq	(%rax), %rbp
    00000204: 	movq	0x8(%rax), %r12
    00000208: 	movq	%rbp, %rax
    0000020b: 	addq	%r12, %rax
    0000020e: 	je	.Ltmp648 # Offset: 526
    00000210: 	testq	%rbp, %rbp
    00000213: 	je	.Ltmp649 # Offset: 531
.Ltmp648:
    00000219: 	movq	%r12, 0x40(%rsp)
    0000021e: 	cmpq	$0xf, %r12
    00000222: 	ja	.Ltmp650 # Offset: 546
    00000228: 	cmpq	$0x1, %r12
    0000022c: 	jne	.Ltmp651 # Offset: 556
    00000232: 	movzbl	(%rbp), %eax
    00000236: 	movb	%al, 0x10(%rbx)
.Ltmp654:
    00000239: 	movq	%r12, 0x8(%rbx)
    0000023d: 	movb	$0x0, (%rdi,%r12)
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000249: 	addq	$0x20, %rax
    0000024d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp656:
    00000254: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000262: 	je	.Ltmp652 # Offset: 610
.Ltmp655:
    00000268: 	movq	-0x20(%rax), %rbp
    0000026c: 	callq	clock@PLT # Offset: 620
    00000271: 	movq	%rax, end_time(%rip)
    00000278: 	movq	0x48(%rsp), %rdx
    0000027d: 	subq	%fs:0x28, %rdx
    00000286: 	jne	.Ltmp653 # Offset: 646
    0000028c: 	subq	start_time(%rip), %rax
    00000293: 	pxor	%xmm0, %xmm0
    00000297: 	movq	%rbp, %rdi
    0000029a: 	cvtsi2sd	%rax, %xmm0
    0000029f: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002a7: 	addq	$0x58, %rsp
    000002ab: 	popq	%rbx
    000002ac: 	popq	%rbp
    000002ad: 	popq	%r12
    000002af: 	popq	%r13
    000002b1: 	popq	%r14
    000002b3: 	popq	%r15
    000002b5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 693
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp645:
    000002c0: 	movl	current_test(%rip), %edx
    000002c6: 	movq	%r15, %rsi
    000002c9: 	movl	$0x1, %edi
    000002ce: 	xorl	%eax, %eax
    000002d0: 	addl	$0x1, %ebx
    000002d3: 	callq	__printf_chk@PLT # Offset: 723
    000002d8: 	movl	iterations(%rip), %ebp
    000002de: 	cmpl	%ebp, %ebx
    000002e0: 	jge	.Ltmp639 # Offset: 736
    000002e6: 	movsd	init_value(%rip), %xmm9
    000002ef: 	pxor	%xmm3, %xmm3
    000002f3: 	movq	DATAat0x2b810(%rip), %xmm8
    000002fc: 	jmp	.Ltmp646 # Offset: 764
.Ltmp650:
    00000301: 	movq	%rbx, %rdi
    00000304: 	leaq	0x40(%rsp), %rsi
    00000309: 	xorl	%edx, %edx
    0000030b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 779
    00000310: 	movq	%rax, (%rbx)
    00000313: 	movq	%rax, %rdi
    00000316: 	movq	0x40(%rsp), %rax
    0000031b: 	movq	%rax, 0x10(%rbx)
.Ltmp657:
    0000031f: 	movq	%r12, %rdx
    00000322: 	movq	%rbp, %rsi
    00000325: 	callq	memcpy@PLT # Offset: 805
    0000032a: 	movq	0x40(%rsp), %r12
    0000032f: 	movq	(%rbx), %rdi
    00000332: 	jmp	.Ltmp654 # Offset: 818
.Ltmp652:
    00000337: 	movq	-0x8(%rdx), %rax
    0000033b: 	addq	$0x200, %rax
    00000341: 	jmp	.Ltmp655 # Offset: 833
.Ltmp647:
    00000346: 	movq	0x10(%rsp), %rsi
    0000034b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000352: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 850
    00000357: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000035e: 	jmp	.Ltmp656 # Offset: 862
.Ltmp651:
    00000363: 	testq	%r12, %r12
    00000366: 	je	.Ltmp654 # Offset: 870
    0000036c: 	jmp	.Ltmp657 # Offset: 876
    0000036e: 	nop # Size: 2
.Ltmp641:
    00000370: 	movq	%rax, 0x8(%rsp)
    00000375: 	movq	DATAat0x2b620(%rip), %rax
    0000037c: 	movsd	%xmm9, 0x38(%rsp)
    00000383: 	movq	%rax, %xmm2
    00000388: 	movsd	%xmm5, 0x30(%rsp)
    0000038e: 	movsd	%xmm4, 0x28(%rsp)
    00000394: 	movsd	%xmm7, 0x20(%rsp)
    0000039a: 	movsd	%xmm6, 0x18(%rsp)
    000003a0: 	callq	__muldc3@PLT # Offset: 928
    000003a5: 	movsd	0x30(%rsp), %xmm5
    000003ab: 	movq	0x8(%rsp), %rax
    000003b0: 	pxor	%xmm3, %xmm3
    000003b4: 	movsd	0x28(%rsp), %xmm4
    000003ba: 	movsd	0x18(%rsp), %xmm6
    000003c0: 	subsd	%xmm0, %xmm5
    000003c4: 	movsd	0x20(%rsp), %xmm7
    000003ca: 	addq	$0x10, %rax
    000003ce: 	movq	DATAat0x2b810(%rip), %xmm8
    000003d7: 	subsd	%xmm1, %xmm4
    000003db: 	cmpq	%rax, %r14
    000003de: 	movsd	0x38(%rsp), %xmm9
    000003e5: 	addsd	%xmm5, %xmm6
    000003e9: 	addsd	%xmm4, %xmm7
    000003ed: 	jne	.Ltmp642 # Offset: 1005
    000003f3: 	jmp	.Ltmp640 # Offset: 1011
.Ltmp644:
    000003f8: 	movq	DATAat0x2b648(%rip), %rax
    000003ff: 	movapd	%xmm4, %xmm0
    00000403: 	movsd	%xmm9, 0x20(%rsp)
    0000040a: 	movsd	%xmm7, 0x18(%rsp)
    00000410: 	movq	%rax, %xmm2
    00000415: 	movsd	%xmm6, 0x8(%rsp)
    0000041b: 	callq	__muldc3@PLT # Offset: 1051
    00000420: 	movsd	0x20(%rsp), %xmm9
    00000427: 	movsd	0x18(%rsp), %xmm7
    0000042d: 	movsd	0x8(%rsp), %xmm6
    00000433: 	movapd	%xmm1, %xmm2
    00000437: 	jmp	.Ltmp658 # Offset: 1079
.Ltmp643:
    0000043c: 	movq	DATAat0x2b620(%rip), %rax
    00000443: 	movapd	%xmm4, %xmm0
    00000447: 	movsd	%xmm9, 0x20(%rsp)
    0000044e: 	movsd	%xmm7, 0x18(%rsp)
    00000454: 	movq	%rax, %xmm2
    00000459: 	movq	DATAat0x2b810(%rip), %rax
    00000460: 	movsd	%xmm6, 0x8(%rsp)
    00000466: 	movq	%rax, %xmm1
    0000046b: 	callq	__muldc3@PLT # Offset: 1131
    00000470: 	movsd	0x20(%rsp), %xmm9
    00000477: 	movsd	0x18(%rsp), %xmm7
    0000047d: 	pxor	%xmm3, %xmm3
    00000481: 	movapd	%xmm0, %xmm2
    00000485: 	movsd	0x8(%rsp), %xmm6
    0000048b: 	movapd	%xmm1, %xmm0
    0000048f: 	jmp	.Ltmp659 # Offset: 1167
.Ltmp653:
    00000494: 	callq	__stack_chk_fail@PLT # Offset: 1172
.Ltmp649:
    00000499: 	leaq	DATAat0x2b008(%rip), %rdi
    000004a0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1184
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIdE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z8test_CSEISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0xadd0
  Size        : 0x5aa
  MaxSize     : 0x5b0
  Offset      : 0xadd0
  Section     : .text
  Orc Section : .local.text._Z8test_CSEISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x88, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	movsd	%xmm0, 0x8(%rsp)
    00000026: 	movsd	%xmm1, (%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movl	iterations(%rip), %r12d
    00000047: 	movsd	(%rsp), %xmm11
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movsd	0x8(%rsp), %xmm10
    0000005b: 	testl	%r12d, %r12d
    0000005e: 	jle	.Ltmp660 # Offset: 94
    00000064: 	movsd	0x18(%rbp), %xmm7
    00000069: 	leal	-0x2(%r13), %eax
    0000006d: 	xorl	%ebx, %ebx
    0000006f: 	movsd	(%rbp), %xmm13
    00000075: 	shlq	$0x4, %rax
    00000079: 	movsd	0x8(%rbp), %xmm12
    0000007f: 	movsd	0x10(%rbp), %xmm14
    00000085: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000008c: 	leaq	0x20(%rbp,%rax), %r14
    00000091: 	movsd	%xmm7, (%rsp)
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp667:
    000000a0: 	movapd	%xmm13, %xmm2
    000000a5: 	movapd	%xmm12, %xmm3
    000000aa: 	subsd	(%rsp), %xmm3
    000000af: 	subsd	%xmm14, %xmm2
    000000b4: 	movapd	%xmm10, %xmm0
    000000b9: 	movapd	%xmm11, %xmm1
    000000be: 	movapd	%xmm10, %xmm4
    000000c3: 	movapd	%xmm13, %xmm8
    000000c8: 	movapd	%xmm12, %xmm9
    000000cd: 	mulsd	%xmm3, %xmm1
    000000d1: 	mulsd	%xmm2, %xmm0
    000000d5: 	mulsd	%xmm3, %xmm4
    000000d9: 	subsd	%xmm1, %xmm0
    000000dd: 	movapd	%xmm11, %xmm1
    000000e2: 	mulsd	%xmm2, %xmm1
    000000e6: 	addsd	%xmm4, %xmm1
    000000ea: 	ucomisd	%xmm1, %xmm0
    000000ee: 	jp	.Ltmp661 # Offset: 238
.Ltmp678:
    000000f4: 	movapd	%xmm13, %xmm5
    000000f9: 	movapd	%xmm14, %xmm2
    000000fe: 	pxor	%xmm7, %xmm7
    00000102: 	addsd	%xmm0, %xmm5
    00000106: 	addsd	%xmm0, %xmm2
    0000010a: 	movapd	%xmm12, %xmm4
    0000010f: 	addsd	%xmm1, %xmm4
    00000113: 	addsd	%xmm0, %xmm5
    00000117: 	addsd	%xmm2, %xmm0
    0000011b: 	addsd	%xmm1, %xmm4
    0000011f: 	addsd	%xmm7, %xmm5
    00000123: 	addsd	%xmm7, %xmm4
    00000127: 	subsd	%xmm0, %xmm5
    0000012b: 	movsd	(%rsp), %xmm0
    00000130: 	addsd	%xmm1, %xmm0
    00000134: 	addsd	%xmm0, %xmm1
    00000138: 	subsd	%xmm1, %xmm4
    0000013c: 	cmpl	$0x1, %r13d
    00000140: 	jle	.Ltmp662 # Offset: 320
    00000146: 	leaq	0x10(%rbp), %rax
    0000014a: 	jmp	.Ltmp663 # Offset: 330
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp665:
    00000150: 	movapd	%xmm7, %xmm8
    00000155: 	movapd	%xmm6, %xmm9
.Ltmp663:
    0000015a: 	movsd	(%rax), %xmm7
    0000015e: 	movsd	0x8(%rax), %xmm6
    00000163: 	movapd	%xmm8, %xmm2
    00000168: 	movapd	%xmm9, %xmm3
    0000016d: 	movapd	%xmm10, %xmm1
    00000172: 	movapd	%xmm11, %xmm0
    00000177: 	movapd	%xmm10, %xmm15
    0000017c: 	subsd	%xmm7, %xmm2
    00000180: 	subsd	%xmm6, %xmm3
    00000184: 	mulsd	%xmm2, %xmm1
    00000188: 	mulsd	%xmm3, %xmm0
    0000018c: 	mulsd	%xmm3, %xmm15
    00000191: 	subsd	%xmm0, %xmm1
    00000195: 	movapd	%xmm11, %xmm0
    0000019a: 	mulsd	%xmm2, %xmm0
    0000019e: 	addsd	%xmm15, %xmm0
    000001a3: 	ucomisd	%xmm1, %xmm0
    000001a7: 	jp	.Ltmp664 # Offset: 423
    000001ad: 	movapd	%xmm8, %xmm2
    000001b2: 	addq	$0x10, %rax
    000001b6: 	addsd	%xmm1, %xmm2
    000001ba: 	addsd	%xmm1, %xmm2
    000001be: 	addsd	%xmm2, %xmm5
    000001c2: 	movapd	%xmm1, %xmm2
    000001c6: 	addsd	%xmm7, %xmm2
    000001ca: 	addsd	%xmm2, %xmm1
    000001ce: 	subsd	%xmm1, %xmm5
    000001d2: 	movapd	%xmm9, %xmm1
    000001d7: 	addsd	%xmm0, %xmm1
    000001db: 	addsd	%xmm0, %xmm1
    000001df: 	addsd	%xmm1, %xmm4
    000001e3: 	movapd	%xmm0, %xmm1
    000001e7: 	addsd	%xmm6, %xmm1
    000001eb: 	addsd	%xmm1, %xmm0
    000001ef: 	subsd	%xmm0, %xmm4
    000001f3: 	cmpq	%r14, %rax
    000001f6: 	jne	.Ltmp665 # Offset: 502
.Ltmp662:
    000001fc: 	movapd	%xmm5, %xmm0
    00000200: 	movapd	%xmm4, %xmm1
    00000204: 	movsd	%xmm13, 0x28(%rsp)
    0000020b: 	movsd	%xmm14, 0x20(%rsp)
    00000212: 	movsd	%xmm12, 0x18(%rsp)
    00000219: 	movsd	%xmm11, 0x10(%rsp)
    00000220: 	movsd	%xmm10, 0x8(%rsp)
    00000227: 	callq	cabs@PLT # Offset: 551
    0000022c: 	movsd	DATAat0x2b658(%rip), %xmm7
    00000234: 	movsd	0x8(%rsp), %xmm10
    0000023b: 	movsd	0x10(%rsp), %xmm11
    00000242: 	movsd	0x18(%rsp), %xmm12
    00000249: 	comisd	%xmm0, %xmm7
    0000024d: 	movsd	0x20(%rsp), %xmm14
    00000254: 	movsd	0x28(%rsp), %xmm13
    0000025b: 	jbe	.Ltmp666 # Offset: 603
    00000261: 	addl	$0x1, %ebx
    00000264: 	cmpl	%r12d, %ebx
    00000267: 	jl	.Ltmp667 # Offset: 615
.Ltmp660:
    0000026d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000027b: 	subq	$0x20, %rax
    0000027f: 	cmpq	%rax, %rbx
    00000282: 	je	.Ltmp668 # Offset: 642
    00000288: 	movq	0x30(%rsp), %rax
    0000028d: 	leaq	0x10(%rbx), %rdi
    00000291: 	movq	%rdi, (%rbx)
    00000294: 	movq	(%rax), %rbp
    00000297: 	movq	0x8(%rax), %r12
    0000029b: 	movq	%rbp, %rax
    0000029e: 	addq	%r12, %rax
    000002a1: 	je	.Ltmp669 # Offset: 673
    000002a3: 	testq	%rbp, %rbp
    000002a6: 	je	.Ltmp670 # Offset: 678
.Ltmp669:
    000002ac: 	movq	%r12, 0x70(%rsp)
    000002b1: 	cmpq	$0xf, %r12
    000002b5: 	ja	.Ltmp671 # Offset: 693
    000002bb: 	cmpq	$0x1, %r12
    000002bf: 	jne	.Ltmp672 # Offset: 703
    000002c5: 	movzbl	(%rbp), %eax
    000002c9: 	movb	%al, 0x10(%rbx)
.Ltmp675:
    000002cc: 	movq	%r12, 0x8(%rbx)
    000002d0: 	movb	$0x0, (%rdi,%r12)
    000002d5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e3: 	addq	$0x20, %rax
    000002e7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ee: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f5: 	je	.Ltmp673 # Offset: 757
.Ltmp676:
    000002fb: 	movq	-0x20(%rax), %rbp
    000002ff: 	callq	clock@PLT # Offset: 767
    00000304: 	movq	%rax, end_time(%rip)
    0000030b: 	movq	0x78(%rsp), %rdx
    00000310: 	subq	%fs:0x28, %rdx
    00000319: 	jne	.Ltmp674 # Offset: 793
    0000031f: 	subq	start_time(%rip), %rax
    00000326: 	pxor	%xmm0, %xmm0
    0000032a: 	movq	%rbp, %rdi
    0000032d: 	cvtsi2sd	%rax, %xmm0
    00000332: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000033a: 	addq	$0x88, %rsp
    00000341: 	popq	%rbx
    00000342: 	popq	%rbp
    00000343: 	popq	%r12
    00000345: 	popq	%r13
    00000347: 	popq	%r14
    00000349: 	popq	%r15
    0000034b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 843
.Ltmp666:
    00000350: 	movl	current_test(%rip), %edx
    00000356: 	movq	%r15, %rsi
    00000359: 	movl	$0x1, %edi
    0000035e: 	xorl	%eax, %eax
    00000360: 	addl	$0x1, %ebx
    00000363: 	callq	__printf_chk@PLT # Offset: 867
    00000368: 	movl	iterations(%rip), %r12d
    0000036f: 	cmpl	%r12d, %ebx
    00000372: 	jge	.Ltmp660 # Offset: 882
    00000378: 	movsd	0x18(%rbp), %xmm6
    0000037d: 	movsd	(%rbp), %xmm13
    00000383: 	movsd	0x8(%rbp), %xmm12
    00000389: 	movsd	0x10(%rbp), %xmm14
    0000038f: 	movsd	0x8(%rsp), %xmm10
    00000396: 	movsd	0x10(%rsp), %xmm11
    0000039d: 	movsd	%xmm6, (%rsp)
    000003a2: 	jmp	.Ltmp667 # Offset: 930
.Ltmp671:
    000003a7: 	movq	%rbx, %rdi
    000003aa: 	leaq	0x70(%rsp), %rsi
    000003af: 	xorl	%edx, %edx
    000003b1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 945
    000003b6: 	movq	%rax, (%rbx)
    000003b9: 	movq	%rax, %rdi
    000003bc: 	movq	0x70(%rsp), %rax
    000003c1: 	movq	%rax, 0x10(%rbx)
.Ltmp677:
    000003c5: 	movq	%r12, %rdx
    000003c8: 	movq	%rbp, %rsi
    000003cb: 	callq	memcpy@PLT # Offset: 971
    000003d0: 	movq	0x70(%rsp), %r12
    000003d5: 	movq	(%rbx), %rdi
    000003d8: 	jmp	.Ltmp675 # Offset: 984
.Ltmp668:
    000003dd: 	movq	0x30(%rsp), %rsi
    000003e2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1001
    000003ee: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003fc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000403: 	jne	.Ltmp676 # Offset: 1027
.Ltmp673:
    00000409: 	movq	-0x8(%rdx), %rax
    0000040d: 	addq	$0x200, %rax
    00000413: 	jmp	.Ltmp676 # Offset: 1043
.Ltmp672:
    00000418: 	testq	%r12, %r12
    0000041b: 	je	.Ltmp675 # Offset: 1051
    00000421: 	jmp	.Ltmp677 # Offset: 1057
    00000423: 	nopl	(%rax,%rax) # Size: 5
.Ltmp664:
    00000428: 	movapd	%xmm11, %xmm1
    0000042d: 	movapd	%xmm10, %xmm0
    00000432: 	movq	%rax, 0x20(%rsp)
    00000437: 	movsd	%xmm13, 0x68(%rsp)
    0000043e: 	movsd	%xmm14, 0x60(%rsp)
    00000445: 	movsd	%xmm12, 0x58(%rsp)
    0000044c: 	movsd	%xmm5, 0x50(%rsp)
    00000452: 	movsd	%xmm4, 0x48(%rsp)
    00000458: 	movsd	%xmm7, 0x40(%rsp)
    0000045e: 	movsd	%xmm6, 0x38(%rsp)
    00000464: 	movsd	%xmm9, 0x28(%rsp)
    0000046b: 	movsd	%xmm8, 0x18(%rsp)
    00000472: 	movsd	%xmm11, 0x10(%rsp)
    00000479: 	movsd	%xmm10, 0x8(%rsp)
    00000480: 	callq	__muldc3@PLT # Offset: 1152
    00000485: 	movsd	0x50(%rsp), %xmm5
    0000048b: 	movsd	0x18(%rsp), %xmm8
    00000492: 	movsd	0x40(%rsp), %xmm7
    00000498: 	movsd	0x28(%rsp), %xmm9
    0000049f: 	movapd	%xmm8, %xmm2
    000004a4: 	movsd	0x48(%rsp), %xmm4
    000004aa: 	movsd	0x38(%rsp), %xmm6
    000004b0: 	addsd	%xmm0, %xmm2
    000004b4: 	movq	0x20(%rsp), %rax
    000004b9: 	movsd	0x8(%rsp), %xmm10
    000004c0: 	movsd	0x10(%rsp), %xmm11
    000004c7: 	movsd	0x58(%rsp), %xmm12
    000004ce: 	addq	$0x10, %rax
    000004d2: 	movsd	0x60(%rsp), %xmm14
    000004d9: 	movsd	0x68(%rsp), %xmm13
    000004e0: 	addsd	%xmm0, %xmm2
    000004e4: 	cmpq	%rax, %r14
    000004e7: 	addsd	%xmm2, %xmm5
    000004eb: 	movapd	%xmm0, %xmm2
    000004ef: 	addsd	%xmm7, %xmm2
    000004f3: 	addsd	%xmm2, %xmm0
    000004f7: 	subsd	%xmm0, %xmm5
    000004fb: 	movapd	%xmm9, %xmm0
    00000500: 	addsd	%xmm1, %xmm0
    00000504: 	addsd	%xmm1, %xmm0
    00000508: 	addsd	%xmm0, %xmm4
    0000050c: 	movapd	%xmm1, %xmm0
    00000510: 	addsd	%xmm6, %xmm0
    00000514: 	addsd	%xmm1, %xmm0
    00000518: 	subsd	%xmm0, %xmm4
    0000051c: 	jne	.Ltmp665 # Offset: 1308
    00000522: 	jmp	.Ltmp662 # Offset: 1314
.Ltmp661:
    00000527: 	movapd	%xmm11, %xmm1
    0000052c: 	movapd	%xmm10, %xmm0
    00000531: 	movsd	%xmm13, 0x40(%rsp)
    00000538: 	movsd	%xmm14, 0x38(%rsp)
    0000053f: 	movsd	%xmm12, 0x28(%rsp)
    00000546: 	movsd	%xmm12, 0x20(%rsp)
    0000054d: 	movsd	%xmm13, 0x18(%rsp)
    00000554: 	movsd	%xmm11, 0x10(%rsp)
    0000055b: 	movsd	%xmm10, 0x8(%rsp)
    00000562: 	callq	__muldc3@PLT # Offset: 1378
    00000567: 	movsd	0x40(%rsp), %xmm13
    0000056e: 	movsd	0x28(%rsp), %xmm12
    00000575: 	movsd	0x38(%rsp), %xmm14
    0000057c: 	movsd	0x10(%rsp), %xmm11
    00000583: 	movsd	0x8(%rsp), %xmm10
    0000058a: 	movapd	%xmm12, %xmm9
    0000058f: 	movapd	%xmm13, %xmm8
    00000594: 	jmp	.Ltmp678 # Offset: 1428
.Ltmp674:
    00000599: 	callq	__stack_chk_fail@PLT # Offset: 1433
.Ltmp670:
    0000059e: 	leaq	DATAat0x2b008(%rip), %rdi
    000005a5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1445
DWARF CFI Instructions:
    <empty>
End of Function "_Z8test_CSEISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z8test_CSEISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0xb380
  Size        : 0x5bb
  MaxSize     : 0x5c0
  Offset      : 0xb380
  Section     : .text
  Orc Section : .local.text._Z8test_CSEISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	movq	%xmm0, 0x58(%rsp)
    0000001e: 	movss	0x58(%rsp), %xmm11
    00000025: 	movss	0x5c(%rsp), %xmm1
    0000002b: 	movq	%rdx, 0x18(%rsp)
    00000030: 	movss	%xmm11, 0x4(%rsp)
    00000037: 	movss	%xmm1, (%rsp)
    0000003c: 	movq	%fs:0x28, %rax
    00000045: 	movq	%rax, 0x68(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movl	iterations(%rip), %r12d
    00000058: 	movss	(%rsp), %xmm1
    0000005d: 	movq	%rax, start_time(%rip)
    00000064: 	movss	0x4(%rsp), %xmm11
    0000006b: 	testl	%r12d, %r12d
    0000006e: 	jle	.Ltmp679 # Offset: 110
    00000074: 	movss	0xc(%rbp), %xmm7
    00000079: 	leal	-0x2(%r13), %eax
    0000007d: 	xorl	%ebx, %ebx
    0000007f: 	movss	(%rbp), %xmm13
    00000085: 	movss	0x4(%rbp), %xmm12
    0000008b: 	movss	0x8(%rbp), %xmm14
    00000091: 	leaq	0x10(%rbp,%rax,8), %r14
    00000096: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000009d: 	movss	%xmm7, (%rsp)
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp686:
    000000a8: 	movaps	%xmm13, %xmm2
    000000ac: 	movaps	%xmm12, %xmm3
    000000b0: 	subss	(%rsp), %xmm3
    000000b5: 	subss	%xmm14, %xmm2
    000000ba: 	movaps	%xmm11, %xmm4
    000000be: 	movaps	%xmm1, %xmm0
    000000c1: 	movaps	%xmm11, %xmm5
    000000c5: 	movaps	%xmm13, %xmm9
    000000c9: 	movaps	%xmm12, %xmm10
    000000cd: 	mulss	%xmm3, %xmm0
    000000d1: 	mulss	%xmm2, %xmm4
    000000d5: 	mulss	%xmm3, %xmm5
    000000d9: 	subss	%xmm0, %xmm4
    000000dd: 	movaps	%xmm1, %xmm0
    000000e0: 	mulss	%xmm2, %xmm0
    000000e4: 	addss	%xmm5, %xmm0
    000000e8: 	ucomiss	%xmm0, %xmm4
    000000eb: 	jp	.Ltmp680 # Offset: 235
.Ltmp697:
    000000f1: 	movaps	%xmm13, %xmm5
    000000f5: 	movaps	%xmm14, %xmm2
    000000f9: 	pxor	%xmm7, %xmm7
    000000fd: 	addss	%xmm4, %xmm5
    00000101: 	addss	%xmm4, %xmm2
    00000105: 	addss	%xmm4, %xmm5
    00000109: 	addss	%xmm2, %xmm4
    0000010d: 	movss	(%rsp), %xmm2
    00000112: 	addss	%xmm0, %xmm2
    00000116: 	addss	%xmm7, %xmm5
    0000011a: 	subss	%xmm4, %xmm5
    0000011e: 	movaps	%xmm12, %xmm4
    00000122: 	addss	%xmm0, %xmm4
    00000126: 	addss	%xmm0, %xmm4
    0000012a: 	addss	%xmm2, %xmm0
    0000012e: 	addss	%xmm7, %xmm4
    00000132: 	subss	%xmm0, %xmm4
    00000136: 	cmpl	$0x1, %r13d
    0000013a: 	jle	.Ltmp681 # Offset: 314
    00000140: 	leaq	0x8(%rbp), %rax
    00000144: 	jmp	.Ltmp682 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp684:
    00000150: 	movaps	%xmm8, %xmm9
    00000154: 	movaps	%xmm7, %xmm10
.Ltmp682:
    00000158: 	movss	(%rax), %xmm8
    0000015d: 	movaps	%xmm9, %xmm2
    00000161: 	movaps	%xmm10, %xmm3
    00000165: 	movaps	%xmm1, %xmm0
    00000168: 	movss	0x4(%rax), %xmm7
    0000016d: 	movaps	%xmm11, %xmm6
    00000171: 	movaps	%xmm11, %xmm15
    00000175: 	subss	%xmm8, %xmm2
    0000017a: 	subss	%xmm7, %xmm3
    0000017e: 	mulss	%xmm2, %xmm6
    00000182: 	mulss	%xmm3, %xmm0
    00000186: 	mulss	%xmm3, %xmm15
    0000018b: 	subss	%xmm0, %xmm6
    0000018f: 	movaps	%xmm1, %xmm0
    00000192: 	mulss	%xmm2, %xmm0
    00000196: 	addss	%xmm15, %xmm0
    0000019b: 	ucomiss	%xmm6, %xmm0
    0000019e: 	jp	.Ltmp683 # Offset: 414
    000001a4: 	movaps	%xmm9, %xmm2
    000001a8: 	addq	$0x8, %rax
    000001ac: 	addss	%xmm6, %xmm2
    000001b0: 	addss	%xmm6, %xmm2
    000001b4: 	addss	%xmm2, %xmm5
    000001b8: 	movaps	%xmm6, %xmm2
    000001bb: 	addss	%xmm8, %xmm2
    000001c0: 	addss	%xmm2, %xmm6
    000001c4: 	movaps	%xmm10, %xmm2
    000001c8: 	addss	%xmm0, %xmm2
    000001cc: 	subss	%xmm6, %xmm5
    000001d0: 	addss	%xmm0, %xmm2
    000001d4: 	addss	%xmm2, %xmm4
    000001d8: 	movaps	%xmm0, %xmm2
    000001db: 	addss	%xmm7, %xmm2
    000001df: 	addss	%xmm2, %xmm0
    000001e3: 	subss	%xmm0, %xmm4
    000001e7: 	cmpq	%r14, %rax
    000001ea: 	jne	.Ltmp684 # Offset: 490
.Ltmp681:
    000001f0: 	movss	%xmm5, 0x40(%rsp)
    000001f6: 	movss	%xmm4, 0x44(%rsp)
    000001fc: 	movq	0x40(%rsp), %xmm0
    00000202: 	movss	%xmm13, 0x20(%rsp)
    00000209: 	movss	%xmm14, 0x10(%rsp)
    00000210: 	movss	%xmm12, 0xc(%rsp)
    00000217: 	movss	%xmm1, 0x8(%rsp)
    0000021d: 	movss	%xmm11, 0x4(%rsp)
    00000224: 	callq	cabsf@PLT # Offset: 548
    00000229: 	movss	DATAat0x2b908(%rip), %xmm1
    00000231: 	movss	0x4(%rsp), %xmm11
    00000238: 	movss	0xc(%rsp), %xmm12
    0000023f: 	movss	0x10(%rsp), %xmm14
    00000246: 	comiss	%xmm0, %xmm1
    00000249: 	movss	0x20(%rsp), %xmm13
    00000250: 	movss	0x8(%rsp), %xmm1
    00000256: 	jbe	.Ltmp685 # Offset: 598
    0000025c: 	addl	$0x1, %ebx
    0000025f: 	cmpl	%r12d, %ebx
    00000262: 	jl	.Ltmp686 # Offset: 610
.Ltmp679:
    00000268: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000026f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000276: 	subq	$0x20, %rax
    0000027a: 	cmpq	%rax, %rbx
    0000027d: 	je	.Ltmp687 # Offset: 637
    00000283: 	movq	0x18(%rsp), %rax
    00000288: 	leaq	0x10(%rbx), %rdi
    0000028c: 	movq	%rdi, (%rbx)
    0000028f: 	movq	(%rax), %rbp
    00000292: 	movq	0x8(%rax), %r12
    00000296: 	movq	%rbp, %rax
    00000299: 	addq	%r12, %rax
    0000029c: 	je	.Ltmp688 # Offset: 668
    0000029e: 	testq	%rbp, %rbp
    000002a1: 	je	.Ltmp689 # Offset: 673
.Ltmp688:
    000002a7: 	movq	%r12, 0x60(%rsp)
    000002ac: 	cmpq	$0xf, %r12
    000002b0: 	ja	.Ltmp690 # Offset: 688
    000002b6: 	cmpq	$0x1, %r12
    000002ba: 	jne	.Ltmp691 # Offset: 698
    000002c0: 	movzbl	(%rbp), %eax
    000002c4: 	movb	%al, 0x10(%rbx)
.Ltmp694:
    000002c7: 	movq	%r12, 0x8(%rbx)
    000002cb: 	movb	$0x0, (%rdi,%r12)
    000002d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002de: 	addq	$0x20, %rax
    000002e2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f0: 	je	.Ltmp692 # Offset: 752
.Ltmp695:
    000002f6: 	movq	-0x20(%rax), %rbp
    000002fa: 	callq	clock@PLT # Offset: 762
    000002ff: 	movq	%rax, end_time(%rip)
    00000306: 	movq	0x68(%rsp), %rdx
    0000030b: 	subq	%fs:0x28, %rdx
    00000314: 	jne	.Ltmp693 # Offset: 788
    0000031a: 	subq	start_time(%rip), %rax
    00000321: 	pxor	%xmm0, %xmm0
    00000325: 	movq	%rbp, %rdi
    00000328: 	cvtsi2sd	%rax, %xmm0
    0000032d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000335: 	addq	$0x78, %rsp
    00000339: 	popq	%rbx
    0000033a: 	popq	%rbp
    0000033b: 	popq	%r12
    0000033d: 	popq	%r13
    0000033f: 	popq	%r14
    00000341: 	popq	%r15
    00000343: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 835
    00000348: 	nopl	(%rax,%rax) # Size: 8
.Ltmp685:
    00000350: 	movl	current_test(%rip), %edx
    00000356: 	movq	%r15, %rsi
    00000359: 	movl	$0x1, %edi
    0000035e: 	xorl	%eax, %eax
    00000360: 	addl	$0x1, %ebx
    00000363: 	callq	__printf_chk@PLT # Offset: 867
    00000368: 	movl	iterations(%rip), %r12d
    0000036f: 	cmpl	%r12d, %ebx
    00000372: 	jge	.Ltmp679 # Offset: 882
    00000378: 	movss	0xc(%rbp), %xmm1
    0000037d: 	movss	(%rbp), %xmm13
    00000383: 	movss	0x4(%rbp), %xmm12
    00000389: 	movss	0x8(%rbp), %xmm14
    0000038f: 	movss	%xmm1, (%rsp)
    00000394: 	movss	0x4(%rsp), %xmm11
    0000039b: 	movss	0x8(%rsp), %xmm1
    000003a1: 	jmp	.Ltmp686 # Offset: 929
.Ltmp690:
    000003a6: 	movq	%rbx, %rdi
    000003a9: 	leaq	0x60(%rsp), %rsi
    000003ae: 	xorl	%edx, %edx
    000003b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 944
    000003b5: 	movq	%rax, (%rbx)
    000003b8: 	movq	%rax, %rdi
    000003bb: 	movq	0x60(%rsp), %rax
    000003c0: 	movq	%rax, 0x10(%rbx)
.Ltmp696:
    000003c4: 	movq	%r12, %rdx
    000003c7: 	movq	%rbp, %rsi
    000003ca: 	callq	memcpy@PLT # Offset: 970
    000003cf: 	movq	0x60(%rsp), %r12
    000003d4: 	movq	(%rbx), %rdi
    000003d7: 	jmp	.Ltmp694 # Offset: 983
.Ltmp687:
    000003dc: 	movq	0x18(%rsp), %rsi
    000003e1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1000
    000003ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000402: 	jne	.Ltmp695 # Offset: 1026
.Ltmp692:
    00000408: 	movq	-0x8(%rdx), %rax
    0000040c: 	addq	$0x200, %rax
    00000412: 	jmp	.Ltmp695 # Offset: 1042
.Ltmp691:
    00000417: 	testq	%r12, %r12
    0000041a: 	je	.Ltmp694 # Offset: 1050
    00000420: 	jmp	.Ltmp696 # Offset: 1056
    00000422: 	nopw	(%rax,%rax) # Size: 6
.Ltmp683:
    00000428: 	movaps	%xmm11, %xmm0
    0000042c: 	movq	%rax, 0x10(%rsp)
    00000431: 	movss	%xmm13, 0x3c(%rsp)
    00000438: 	movss	%xmm14, 0x38(%rsp)
    0000043f: 	movss	%xmm12, 0x34(%rsp)
    00000446: 	movss	%xmm5, 0x30(%rsp)
    0000044c: 	movss	%xmm4, 0x2c(%rsp)
    00000452: 	movss	%xmm8, 0x28(%rsp)
    00000459: 	movss	%xmm7, 0x24(%rsp)
    0000045f: 	movss	%xmm10, 0x20(%rsp)
    00000466: 	movss	%xmm9, 0xc(%rsp)
    0000046d: 	movss	%xmm1, 0x8(%rsp)
    00000473: 	movss	%xmm11, 0x4(%rsp)
    0000047a: 	callq	__mulsc3@PLT # Offset: 1146
    0000047f: 	movss	0x30(%rsp), %xmm5
    00000485: 	movss	0xc(%rsp), %xmm9
    0000048c: 	movq	%xmm0, 0x48(%rsp)
    00000492: 	movss	0x48(%rsp), %xmm3
    00000498: 	movss	0x28(%rsp), %xmm8
    0000049f: 	movaps	%xmm9, %xmm0
    000004a3: 	movss	0x20(%rsp), %xmm10
    000004aa: 	movss	0x4c(%rsp), %xmm2
    000004b0: 	addss	%xmm3, %xmm0
    000004b4: 	movss	0x2c(%rsp), %xmm4
    000004ba: 	movss	0x24(%rsp), %xmm7
    000004c0: 	movq	0x10(%rsp), %rax
    000004c5: 	movss	0x4(%rsp), %xmm11
    000004cc: 	movss	0x8(%rsp), %xmm1
    000004d2: 	movss	0x34(%rsp), %xmm12
    000004d9: 	addss	%xmm3, %xmm0
    000004dd: 	addq	$0x8, %rax
    000004e1: 	movss	0x38(%rsp), %xmm14
    000004e8: 	movss	0x3c(%rsp), %xmm13
    000004ef: 	cmpq	%rax, %r14
    000004f2: 	addss	%xmm0, %xmm5
    000004f6: 	movaps	%xmm3, %xmm0
    000004f9: 	addss	%xmm8, %xmm0
    000004fe: 	addss	%xmm3, %xmm0
    00000502: 	subss	%xmm0, %xmm5
    00000506: 	movaps	%xmm10, %xmm0
    0000050a: 	addss	%xmm2, %xmm0
    0000050e: 	addss	%xmm2, %xmm0
    00000512: 	addss	%xmm0, %xmm4
    00000516: 	movaps	%xmm2, %xmm0
    00000519: 	addss	%xmm7, %xmm0
    0000051d: 	addss	%xmm2, %xmm0
    00000521: 	subss	%xmm0, %xmm4
    00000525: 	jne	.Ltmp684 # Offset: 1317
    0000052b: 	jmp	.Ltmp681 # Offset: 1323
.Ltmp680:
    00000530: 	movaps	%xmm11, %xmm0
    00000534: 	movss	%xmm13, 0x28(%rsp)
    0000053b: 	movss	%xmm14, 0x24(%rsp)
    00000542: 	movss	%xmm12, 0x20(%rsp)
    00000549: 	movss	%xmm12, 0x10(%rsp)
    00000550: 	movss	%xmm13, 0xc(%rsp)
    00000557: 	movss	%xmm1, 0x8(%rsp)
    0000055d: 	movss	%xmm11, 0x4(%rsp)
    00000564: 	callq	__mulsc3@PLT # Offset: 1380
    00000569: 	movss	0x28(%rsp), %xmm13
    00000570: 	movss	0x20(%rsp), %xmm12
    00000577: 	movq	%xmm0, 0x50(%rsp)
    0000057d: 	movss	0x24(%rsp), %xmm14
    00000584: 	movss	0x50(%rsp), %xmm4
    0000058a: 	movss	0x54(%rsp), %xmm0
    00000590: 	movss	0x8(%rsp), %xmm1
    00000596: 	movaps	%xmm12, %xmm10
    0000059a: 	movaps	%xmm13, %xmm9
    0000059e: 	movss	0x4(%rsp), %xmm11
    000005a5: 	jmp	.Ltmp697 # Offset: 1445
.Ltmp693:
    000005aa: 	callq	__stack_chk_fail@PLT # Offset: 1450
.Ltmp689:
    000005af: 	leaq	DATAat0x2b008(%rip), %rdi
    000005b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1462
DWARF CFI Instructions:
    <empty>
End of Function "_Z8test_CSEISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2ISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0xb940
  Size        : 0x584
  MaxSize     : 0x590
  Offset      : 0xb940
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2ISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x88, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	movsd	%xmm0, 0x8(%rsp)
    00000026: 	movsd	%xmm1, (%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movl	iterations(%rip), %r12d
    00000047: 	movsd	(%rsp), %xmm11
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movsd	0x8(%rsp), %xmm10
    0000005b: 	testl	%r12d, %r12d
    0000005e: 	jle	.Ltmp698 # Offset: 94
    00000064: 	movsd	0x18(%rbp), %xmm7
    00000069: 	leal	-0x2(%r13), %eax
    0000006d: 	xorl	%ebx, %ebx
    0000006f: 	movsd	(%rbp), %xmm13
    00000075: 	shlq	$0x4, %rax
    00000079: 	movsd	0x8(%rbp), %xmm12
    0000007f: 	movsd	0x10(%rbp), %xmm14
    00000085: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000008c: 	leaq	0x20(%rbp,%rax), %r14
    00000091: 	movsd	%xmm7, (%rsp)
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp704:
    000000a0: 	movapd	%xmm13, %xmm2
    000000a5: 	movapd	%xmm12, %xmm3
    000000aa: 	subsd	(%rsp), %xmm3
    000000af: 	subsd	%xmm14, %xmm2
    000000b4: 	movapd	%xmm10, %xmm0
    000000b9: 	movapd	%xmm11, %xmm1
    000000be: 	movapd	%xmm10, %xmm4
    000000c3: 	movapd	%xmm13, %xmm8
    000000c8: 	movapd	%xmm12, %xmm9
    000000cd: 	mulsd	%xmm3, %xmm1
    000000d1: 	mulsd	%xmm2, %xmm0
    000000d5: 	mulsd	%xmm3, %xmm4
    000000d9: 	subsd	%xmm1, %xmm0
    000000dd: 	movapd	%xmm11, %xmm1
    000000e2: 	mulsd	%xmm2, %xmm1
    000000e6: 	addsd	%xmm4, %xmm1
    000000ea: 	ucomisd	%xmm1, %xmm0
    000000ee: 	jp	.Ltmp699 # Offset: 238
.Ltmp716:
    000000f4: 	movapd	%xmm13, %xmm4
    000000f9: 	movapd	%xmm14, %xmm3
    000000fe: 	pxor	%xmm5, %xmm5
    00000102: 	addsd	%xmm0, %xmm4
    00000106: 	addsd	%xmm0, %xmm3
    0000010a: 	movapd	%xmm12, %xmm2
    0000010f: 	addsd	%xmm1, %xmm2
    00000113: 	addsd	%xmm0, %xmm4
    00000117: 	addsd	%xmm0, %xmm3
    0000011b: 	movsd	(%rsp), %xmm0
    00000120: 	addsd	%xmm1, %xmm2
    00000124: 	addsd	%xmm1, %xmm0
    00000128: 	addsd	%xmm4, %xmm5
    0000012c: 	addsd	%xmm1, %xmm0
    00000130: 	subsd	%xmm3, %xmm5
    00000134: 	addsd	%xmm4, %xmm5
    00000138: 	pxor	%xmm4, %xmm4
    0000013c: 	addsd	%xmm2, %xmm4
    00000140: 	subsd	%xmm3, %xmm5
    00000144: 	subsd	%xmm0, %xmm4
    00000148: 	addsd	%xmm2, %xmm4
    0000014c: 	subsd	%xmm0, %xmm4
    00000150: 	cmpl	$0x1, %r13d
    00000154: 	jle	.Ltmp700 # Offset: 340
    0000015a: 	leaq	0x10(%rbp), %rax
    0000015e: 	nop # Size: 2
.Ltmp702:
    00000160: 	movapd	%xmm8, %xmm7
    00000165: 	movapd	%xmm9, %xmm6
    0000016a: 	movsd	(%rax), %xmm8
    0000016f: 	movsd	0x8(%rax), %xmm9
    00000175: 	movapd	%xmm7, %xmm2
    00000179: 	movapd	%xmm6, %xmm3
    0000017d: 	movapd	%xmm10, %xmm15
    00000182: 	subsd	%xmm8, %xmm2
    00000187: 	subsd	%xmm9, %xmm3
    0000018c: 	movapd	%xmm11, %xmm0
    00000191: 	movapd	%xmm11, %xmm1
    00000196: 	mulsd	%xmm3, %xmm0
    0000019a: 	mulsd	%xmm2, %xmm15
    0000019f: 	mulsd	%xmm2, %xmm1
    000001a3: 	subsd	%xmm0, %xmm15
    000001a8: 	movapd	%xmm10, %xmm0
    000001ad: 	mulsd	%xmm3, %xmm0
    000001b1: 	addsd	%xmm1, %xmm0
    000001b5: 	ucomisd	%xmm15, %xmm0
    000001ba: 	jp	.Ltmp701 # Offset: 442
.Ltmp715:
    000001c0: 	addsd	%xmm0, %xmm6
    000001c4: 	addsd	%xmm15, %xmm7
    000001c9: 	movapd	%xmm0, %xmm2
    000001cd: 	addq	$0x10, %rax
    000001d1: 	movapd	%xmm15, %xmm1
    000001d6: 	addsd	%xmm9, %xmm2
    000001db: 	addsd	%xmm8, %xmm1
    000001e0: 	addsd	%xmm0, %xmm6
    000001e4: 	addsd	%xmm15, %xmm7
    000001e9: 	addsd	%xmm2, %xmm0
    000001ed: 	addsd	%xmm15, %xmm1
    000001f2: 	addsd	%xmm7, %xmm5
    000001f6: 	addsd	%xmm6, %xmm4
    000001fa: 	subsd	%xmm1, %xmm5
    000001fe: 	subsd	%xmm0, %xmm4
    00000202: 	addsd	%xmm7, %xmm5
    00000206: 	addsd	%xmm6, %xmm4
    0000020a: 	subsd	%xmm1, %xmm5
    0000020e: 	subsd	%xmm0, %xmm4
    00000212: 	cmpq	%r14, %rax
    00000215: 	jne	.Ltmp702 # Offset: 533
.Ltmp700:
    0000021b: 	movapd	%xmm5, %xmm0
    0000021f: 	movapd	%xmm4, %xmm1
    00000223: 	movsd	%xmm14, 0x28(%rsp)
    0000022a: 	movsd	%xmm12, 0x20(%rsp)
    00000231: 	movsd	%xmm13, 0x18(%rsp)
    00000238: 	movsd	%xmm11, 0x10(%rsp)
    0000023f: 	movsd	%xmm10, 0x8(%rsp)
    00000246: 	callq	cabs@PLT # Offset: 582
    0000024b: 	movsd	DATAat0x2b658(%rip), %xmm3
    00000253: 	movsd	0x8(%rsp), %xmm10
    0000025a: 	movsd	0x10(%rsp), %xmm11
    00000261: 	movsd	0x18(%rsp), %xmm13
    00000268: 	comisd	%xmm0, %xmm3
    0000026c: 	movsd	0x20(%rsp), %xmm12
    00000273: 	movsd	0x28(%rsp), %xmm14
    0000027a: 	jbe	.Ltmp703 # Offset: 634
    00000280: 	addl	$0x1, %ebx
    00000283: 	cmpl	%r12d, %ebx
    00000286: 	jl	.Ltmp704 # Offset: 646
.Ltmp698:
    0000028c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000293: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000029a: 	subq	$0x20, %rax
    0000029e: 	cmpq	%rax, %rbx
    000002a1: 	je	.Ltmp705 # Offset: 673
    000002a7: 	movq	0x30(%rsp), %rax
    000002ac: 	leaq	0x10(%rbx), %rdi
    000002b0: 	movq	%rdi, (%rbx)
    000002b3: 	movq	(%rax), %rbp
    000002b6: 	movq	0x8(%rax), %r12
    000002ba: 	movq	%rbp, %rax
    000002bd: 	addq	%r12, %rax
    000002c0: 	je	.Ltmp706 # Offset: 704
    000002c2: 	testq	%rbp, %rbp
    000002c5: 	je	.Ltmp707 # Offset: 709
.Ltmp706:
    000002cb: 	movq	%r12, 0x70(%rsp)
    000002d0: 	cmpq	$0xf, %r12
    000002d4: 	ja	.Ltmp708 # Offset: 724
    000002da: 	cmpq	$0x1, %r12
    000002de: 	jne	.Ltmp709 # Offset: 734
    000002e4: 	movzbl	(%rbp), %eax
    000002e8: 	movb	%al, 0x10(%rbx)
.Ltmp712:
    000002eb: 	movq	%r12, 0x8(%rbx)
    000002ef: 	movb	$0x0, (%rdi,%r12)
    000002f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000302: 	addq	$0x20, %rax
    00000306: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000314: 	je	.Ltmp710 # Offset: 788
.Ltmp713:
    0000031a: 	movq	-0x20(%rax), %rbp
    0000031e: 	callq	clock@PLT # Offset: 798
    00000323: 	movq	%rax, end_time(%rip)
    0000032a: 	movq	0x78(%rsp), %rdx
    0000032f: 	subq	%fs:0x28, %rdx
    00000338: 	jne	.Ltmp711 # Offset: 824
    0000033e: 	subq	start_time(%rip), %rax
    00000345: 	pxor	%xmm0, %xmm0
    00000349: 	movq	%rbp, %rdi
    0000034c: 	cvtsi2sd	%rax, %xmm0
    00000351: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000359: 	addq	$0x88, %rsp
    00000360: 	popq	%rbx
    00000361: 	popq	%rbp
    00000362: 	popq	%r12
    00000364: 	popq	%r13
    00000366: 	popq	%r14
    00000368: 	popq	%r15
    0000036a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 874
    0000036f: 	nop # Size: 1
.Ltmp703:
    00000370: 	movl	current_test(%rip), %edx
    00000376: 	movq	%r15, %rsi
    00000379: 	movl	$0x1, %edi
    0000037e: 	xorl	%eax, %eax
    00000380: 	addl	$0x1, %ebx
    00000383: 	callq	__printf_chk@PLT # Offset: 899
    00000388: 	movl	iterations(%rip), %r12d
    0000038f: 	cmpl	%r12d, %ebx
    00000392: 	jge	.Ltmp698 # Offset: 914
    00000398: 	movsd	0x18(%rbp), %xmm3
    0000039d: 	movsd	(%rbp), %xmm13
    000003a3: 	movsd	0x8(%rbp), %xmm12
    000003a9: 	movsd	0x10(%rbp), %xmm14
    000003af: 	movsd	0x8(%rsp), %xmm10
    000003b6: 	movsd	0x10(%rsp), %xmm11
    000003bd: 	movsd	%xmm3, (%rsp)
    000003c2: 	jmp	.Ltmp704 # Offset: 962
.Ltmp708:
    000003c7: 	movq	%rbx, %rdi
    000003ca: 	leaq	0x70(%rsp), %rsi
    000003cf: 	xorl	%edx, %edx
    000003d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 977
    000003d6: 	movq	%rax, (%rbx)
    000003d9: 	movq	%rax, %rdi
    000003dc: 	movq	0x70(%rsp), %rax
    000003e1: 	movq	%rax, 0x10(%rbx)
.Ltmp714:
    000003e5: 	movq	%r12, %rdx
    000003e8: 	movq	%rbp, %rsi
    000003eb: 	callq	memcpy@PLT # Offset: 1003
    000003f0: 	movq	0x70(%rsp), %r12
    000003f5: 	movq	(%rbx), %rdi
    000003f8: 	jmp	.Ltmp712 # Offset: 1016
.Ltmp705:
    000003fd: 	movq	0x30(%rsp), %rsi
    00000402: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000409: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1033
    0000040e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000415: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000041c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000423: 	jne	.Ltmp713 # Offset: 1059
.Ltmp710:
    00000429: 	movq	-0x8(%rdx), %rax
    0000042d: 	addq	$0x200, %rax
    00000433: 	jmp	.Ltmp713 # Offset: 1075
.Ltmp709:
    00000438: 	testq	%r12, %r12
    0000043b: 	je	.Ltmp712 # Offset: 1083
    00000441: 	jmp	.Ltmp714 # Offset: 1089
    00000443: 	nopl	(%rax,%rax) # Size: 5
.Ltmp701:
    00000448: 	movapd	%xmm10, %xmm0
    0000044d: 	movapd	%xmm11, %xmm1
    00000452: 	movq	%rax, 0x18(%rsp)
    00000457: 	movsd	%xmm14, 0x68(%rsp)
    0000045e: 	movsd	%xmm12, 0x60(%rsp)
    00000465: 	movsd	%xmm13, 0x58(%rsp)
    0000046c: 	movsd	%xmm9, 0x50(%rsp)
    00000473: 	movsd	%xmm5, 0x48(%rsp)
    00000479: 	movsd	%xmm4, 0x40(%rsp)
    0000047f: 	movsd	%xmm8, 0x38(%rsp)
    00000486: 	movsd	%xmm6, 0x28(%rsp)
    0000048c: 	movsd	%xmm7, 0x20(%rsp)
    00000492: 	movsd	%xmm11, 0x10(%rsp)
    00000499: 	movsd	%xmm10, 0x8(%rsp)
    000004a0: 	callq	__muldc3@PLT # Offset: 1184
    000004a5: 	movsd	0x68(%rsp), %xmm14
    000004ac: 	movsd	0x60(%rsp), %xmm12
    000004b3: 	movapd	%xmm0, %xmm15
    000004b8: 	movsd	0x48(%rsp), %xmm5
    000004be: 	movapd	%xmm1, %xmm0
    000004c2: 	movsd	0x58(%rsp), %xmm13
    000004c9: 	movsd	0x50(%rsp), %xmm9
    000004d0: 	movsd	0x40(%rsp), %xmm4
    000004d6: 	movsd	0x38(%rsp), %xmm8
    000004dd: 	movsd	0x28(%rsp), %xmm6
    000004e3: 	movsd	0x20(%rsp), %xmm7
    000004e9: 	movq	0x18(%rsp), %rax
    000004ee: 	movsd	0x10(%rsp), %xmm11
    000004f5: 	movsd	0x8(%rsp), %xmm10
    000004fc: 	jmp	.Ltmp715 # Offset: 1276
.Ltmp699:
    00000501: 	movapd	%xmm11, %xmm1
    00000506: 	movapd	%xmm10, %xmm0
    0000050b: 	movsd	%xmm14, 0x40(%rsp)
    00000512: 	movsd	%xmm12, 0x38(%rsp)
    00000519: 	movsd	%xmm13, 0x28(%rsp)
    00000520: 	movsd	%xmm12, 0x20(%rsp)
    00000527: 	movsd	%xmm13, 0x18(%rsp)
    0000052e: 	movsd	%xmm11, 0x10(%rsp)
    00000535: 	movsd	%xmm10, 0x8(%rsp)
    0000053c: 	callq	__muldc3@PLT # Offset: 1340
    00000541: 	movsd	0x38(%rsp), %xmm12
    00000548: 	movsd	0x28(%rsp), %xmm13
    0000054f: 	movsd	0x40(%rsp), %xmm14
    00000556: 	movsd	0x10(%rsp), %xmm11
    0000055d: 	movsd	0x8(%rsp), %xmm10
    00000564: 	movapd	%xmm12, %xmm9
    00000569: 	movapd	%xmm13, %xmm8
    0000056e: 	jmp	.Ltmp716 # Offset: 1390
.Ltmp711:
    00000573: 	callq	__stack_chk_fail@PLT # Offset: 1395
.Ltmp707:
    00000578: 	leaq	DATAat0x2b008(%rip), %rdi
    0000057f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1407
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2ISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15testComplexTypeISt7complexIdEEvd" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xbed0
  Size        : 0x62ac
  MaxSize     : 0x62b0
  Offset      : 0xbed0
  Section     : .text
  Orc Section : .local.text._Z15testComplexTypeISt7complexIdEEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x1f000(%rsp), %r11
.Ltmp717:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp717 # Offset: 37
    00000027: 	subq	$0x618, %rsp
    0000002e: 	xorl	%esi, %esi
    00000030: 	movl	$0x1f400, %edx
    00000035: 	leaq	0x200(%rsp), %rbp
    0000003d: 	movsd	%xmm0, 0x10(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0x1f608(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	movq	%rbp, %rdi
    00000059: 	callq	memset@PLT # Offset: 89
    0000005e: 	movsd	0x10(%rsp), %xmm7
    00000064: 	movsd	DATAat0x2b620(%rip), %xmm6
    0000006c: 	movsd	DATAat0x2b7e8(%rip), %xmm0
    00000074: 	addsd	%xmm7, %xmm6
    00000078: 	movapd	%xmm7, %xmm1
    0000007c: 	addsd	%xmm7, %xmm1
    00000080: 	mulsd	%xmm6, %xmm0
    00000084: 	movsd	%xmm6, 0x40(%rsp)
    0000008a: 	movapd	%xmm1, %xmm5
    0000008e: 	movsd	DATAat0x2b7e8(%rip), %xmm1
    00000096: 	mulsd	%xmm7, %xmm1
    0000009a: 	subsd	%xmm0, %xmm5
    0000009e: 	movapd	%xmm6, %xmm0
    000000a2: 	addsd	%xmm6, %xmm0
    000000a6: 	movsd	DATAat0x2b7e0(%rip), %xmm6
    000000ae: 	movsd	%xmm5, 0x60(%rsp)
    000000b4: 	addsd	%xmm0, %xmm1
    000000b8: 	movsd	%xmm6, 0x70(%rsp)
    000000be: 	movsd	%xmm1, 0x80(%rsp)
    000000c7: 	ucomisd	%xmm5, %xmm1
    000000cb: 	jp	.Ltmp718 # Offset: 203
    000000d1: 	movapd	%xmm7, %xmm2
    000000d5: 	movapd	%xmm5, %xmm0
.Ltmp1105:
    000000d9: 	movsd	0x40(%rsp), %xmm6
    000000df: 	addsd	DATAat0x2b6b0(%rip), %xmm6
    000000e7: 	leaq	0x1f600(%rsp), %rbx
    000000ef: 	movsd	0x80(%rsp), %xmm1
    000000f8: 	addsd	0x70(%rsp), %xmm2
    000000fe: 	movapd	%xmm6, %xmm3
    00000102: 	movsd	%xmm6, 0x68(%rsp)
    00000108: 	movsd	%xmm2, 0x50(%rsp)
    0000010e: 	callq	__divdc3@PLT # Offset: 270
    00000113: 	addsd	0x10(%rsp), %xmm0
    00000119: 	addsd	0x40(%rsp), %xmm1
    0000011f: 	movq	%rbp, %rax
    00000122: 	movsd	%xmm0, 0x48(%rsp)
    00000128: 	movq	init_value(%rip), %xmm0
    00000130: 	movsd	%xmm1, 0x58(%rsp)
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp719:
    00000140: 	movaps	%xmm0, (%rax)
    00000143: 	addq	$0x20, %rax
    00000147: 	movaps	%xmm0, -0x10(%rax)
    0000014b: 	cmpq	%rbx, %rax
    0000014e: 	jne	.Ltmp719 # Offset: 334
    00000150: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    00000158: 	leaq	0x130(%rsp), %rax
    00000160: 	leaq	0x120(%rsp), %r15
    00000168: 	movl	$0x6c706d6f, 0x138(%rsp)
    00000173: 	movq	%rax, 0xc0(%rsp)
    0000017b: 	leaq	0x100(%rsp), %rsi
    00000183: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000018a: 	movq	%rax, 0x120(%rsp)
    00000192: 	leaq	0x1e0(%rsp), %r14
    0000019a: 	movabsq	$0x635f656c62756f64, %rax
    000001a4: 	movaps	%xmm6, 0x100(%rsp)
    000001ac: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    000001b4: 	movq	%rax, 0x130(%rsp)
    000001bc: 	movl	$0x7865, %eax
    000001c1: 	movq	%r15, 0xb0(%rsp)
    000001c9: 	movw	%ax, 0x13c(%rsp)
    000001d1: 	movq	$0xe, 0x128(%rsp)
    000001dd: 	movb	$0x0, 0x13e(%rsp)
    000001e5: 	movaps	%xmm6, 0x110(%rsp)
    000001ed: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 493
    000001f2: 	leaq	DATAat0x2b561(%rip), %rdx
    000001f9: 	movq	%r15, %rsi
    000001fc: 	movq	%r14, %rdi
    000001ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 511
    00000204: 	callq	clock@PLT # Offset: 516
    00000209: 	movl	iterations(%rip), %edx
    0000020f: 	movq	%rax, start_time(%rip)
    00000216: 	testl	%edx, %edx
    00000218: 	jle	.Ltmp720 # Offset: 536
    0000021e: 	pxor	%xmm6, %xmm6
    00000222: 	xorl	%r12d, %r12d
    00000225: 	leaq	DATAat0x2b1d0(%rip), %r13
    0000022c: 	movsd	%xmm6, (%rsp)
    00000231: 	movsd	DATAat0x2b6b8(%rip), %xmm6
    00000239: 	movsd	%xmm6, 0x18(%rsp)
    0000023f: 	movq	DATAat0x2b820(%rip), %xmm6
    00000247: 	movaps	%xmm6, 0x20(%rsp)
    0000024c: 	movsd	DATAat0x2b658(%rip), %xmm6
    00000254: 	movsd	%xmm6, 0x8(%rsp)
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp723:
    00000260: 	movsd	0x70(%rsp), %xmm1
    00000266: 	movl	$0x1f40, %eax
    0000026b: 	pxor	%xmm0, %xmm0
    0000026f: 	nop # Size: 1
.Ltmp721:
    00000270: 	addsd	%xmm1, %xmm0
    00000274: 	subl	$0x1, %eax
    00000277: 	jne	.Ltmp721 # Offset: 631
    00000279: 	subsd	0x18(%rsp), %xmm0
    0000027f: 	movsd	0x8(%rsp), %xmm6
    00000285: 	andpd	0x20(%rsp), %xmm0
    0000028b: 	comisd	%xmm0, %xmm6
    0000028f: 	jbe	.Ltmp722 # Offset: 655
.Ltmp1018:
    00000295: 	addl	$0x1, %r12d
    00000299: 	cmpl	%edx, %r12d
    0000029c: 	jl	.Ltmp723 # Offset: 668
.Ltmp720:
    0000029e: 	movq	%r14, %rsi
    000002a1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002a8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 680
    000002ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002b4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c2: 	je	.Ltmp724 # Offset: 706
.Ltmp1019:
    000002c8: 	movq	-0x20(%rax), %r12
    000002cc: 	callq	clock@PLT # Offset: 716
    000002d1: 	pxor	%xmm0, %xmm0
    000002d5: 	movq	%rax, end_time(%rip)
    000002dc: 	movq	%r12, %rdi
    000002df: 	subq	start_time(%rip), %rax
    000002e6: 	cvtsi2sd	%rax, %xmm0
    000002eb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002f3: 	callq	_Z13record_resultdPKc # Offset: 755
    000002f8: 	movq	0x1e0(%rsp), %rdi
    00000300: 	leaq	0x1f0(%rsp), %rax
    00000308: 	movq	%rax, 0x88(%rsp)
    00000310: 	cmpq	%rax, %rdi
    00000313: 	je	.Ltmp725 # Offset: 787
    00000315: 	movq	0x1f0(%rsp), %rax
    0000031d: 	leaq	0x1(%rax), %rsi
    00000321: 	callq	_ZdlPvm@PLT # Offset: 801
.Ltmp725:
    00000326: 	movq	0xb0(%rsp), %rsi
    0000032e: 	leaq	DATAat0x2b1e0(%rip), %rdx
    00000335: 	movq	%r14, %rdi
    00000338: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 824
    0000033d: 	callq	clock@PLT # Offset: 829
    00000342: 	movl	iterations(%rip), %edx
    00000348: 	movq	%rax, start_time(%rip)
    0000034f: 	testl	%edx, %edx
    00000351: 	jle	.Ltmp726 # Offset: 849
    00000353: 	pxor	%xmm6, %xmm6
    00000357: 	xorl	%r12d, %r12d
    0000035a: 	leaq	DATAat0x2b1d0(%rip), %r13
    00000361: 	movsd	%xmm6, (%rsp)
    00000366: 	movq	DATAat0x2b820(%rip), %xmm6
    0000036e: 	movaps	%xmm6, 0x20(%rsp)
    00000373: 	movsd	DATAat0x2b658(%rip), %xmm6
    0000037b: 	movsd	%xmm6, 0x8(%rsp)
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp729:
    00000388: 	movl	$0x1f40, %eax
    0000038d: 	pxor	%xmm0, %xmm0
    00000391: 	nopl	(%rax) # Size: 7
.Ltmp727:
    00000398: 	addsd	DATAat0x2b7e8(%rip), %xmm0
    000003a0: 	subl	$0x1, %eax
    000003a3: 	jne	.Ltmp727 # Offset: 931
    000003a5: 	subsd	DATAat0x2b6c0(%rip), %xmm0
    000003ad: 	movsd	0x8(%rsp), %xmm6
    000003b3: 	andpd	0x20(%rsp), %xmm0
    000003b9: 	comisd	%xmm0, %xmm6
    000003bd: 	jbe	.Ltmp728 # Offset: 957
.Ltmp1017:
    000003c3: 	addl	$0x1, %r12d
    000003c7: 	cmpl	%edx, %r12d
    000003ca: 	jl	.Ltmp729 # Offset: 970
.Ltmp726:
    000003cc: 	movq	%r14, %rsi
    000003cf: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003d6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 982
    000003db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003e9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f0: 	je	.Ltmp730 # Offset: 1008
.Ltmp1052:
    000003f6: 	movq	-0x20(%rax), %r12
    000003fa: 	callq	clock@PLT # Offset: 1018
    000003ff: 	pxor	%xmm0, %xmm0
    00000403: 	movq	%rax, end_time(%rip)
    0000040a: 	movq	%r12, %rdi
    0000040d: 	subq	start_time(%rip), %rax
    00000414: 	cvtsi2sd	%rax, %xmm0
    00000419: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000421: 	callq	_Z13record_resultdPKc # Offset: 1057
    00000426: 	movq	0x1e0(%rsp), %rdi
    0000042e: 	cmpq	0x88(%rsp), %rdi
    00000436: 	je	.Ltmp731 # Offset: 1078
    00000438: 	movq	0x1f0(%rsp), %rax
    00000440: 	leaq	0x1(%rax), %rsi
    00000444: 	callq	_ZdlPvm@PLT # Offset: 1092
.Ltmp731:
    00000449: 	movq	0xb0(%rsp), %rsi
    00000451: 	leaq	DATAat0x2b1ef(%rip), %rdx
    00000458: 	movq	%r14, %rdi
    0000045b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1115
    00000460: 	callq	clock@PLT # Offset: 1120
    00000465: 	movl	iterations(%rip), %edx
    0000046b: 	movq	%rax, start_time(%rip)
    00000472: 	testl	%edx, %edx
    00000474: 	jle	.Ltmp732 # Offset: 1140
    0000047a: 	movq	DATAat0x2b820(%rip), %xmm6
    00000482: 	pxor	%xmm5, %xmm5
    00000486: 	xorl	%r12d, %r12d
    00000489: 	leaq	DATAat0x2b1d0(%rip), %r13
    00000490: 	movsd	%xmm5, (%rsp)
    00000495: 	movsd	DATAat0x2b658(%rip), %xmm5
    0000049d: 	movaps	%xmm6, 0x20(%rsp)
    000004a2: 	movsd	DATAat0x2b648(%rip), %xmm6
    000004aa: 	movsd	%xmm5, 0x8(%rsp)
    000004b0: 	movsd	%xmm6, 0x18(%rsp)
    000004b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp735:
    000004c0: 	movl	$0x1f40, %eax
    000004c5: 	pxor	%xmm0, %xmm0
    000004c9: 	nopl	(%rax) # Size: 7
.Ltmp733:
    000004d0: 	addsd	DATAat0x2b620(%rip), %xmm0
    000004d8: 	subl	$0x1, %eax
    000004db: 	jne	.Ltmp733 # Offset: 1243
    000004dd: 	subsd	0x18(%rsp), %xmm0
    000004e3: 	movsd	0x8(%rsp), %xmm7
    000004e9: 	andpd	0x20(%rsp), %xmm0
    000004ef: 	comisd	%xmm0, %xmm7
    000004f3: 	jbe	.Ltmp734 # Offset: 1267
.Ltmp1016:
    000004f9: 	addl	$0x1, %r12d
    000004fd: 	cmpl	%edx, %r12d
    00000500: 	jl	.Ltmp735 # Offset: 1280
.Ltmp732:
    00000502: 	movq	%r14, %rsi
    00000505: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000050c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1292
    00000511: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000518: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000051f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000526: 	je	.Ltmp736 # Offset: 1318
.Ltmp1051:
    0000052c: 	movq	-0x20(%rax), %r12
    00000530: 	callq	clock@PLT # Offset: 1328
    00000535: 	pxor	%xmm0, %xmm0
    00000539: 	movq	%rax, end_time(%rip)
    00000540: 	movq	%r12, %rdi
    00000543: 	subq	start_time(%rip), %rax
    0000054a: 	cvtsi2sd	%rax, %xmm0
    0000054f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000557: 	callq	_Z13record_resultdPKc # Offset: 1367
    0000055c: 	movq	0x1e0(%rsp), %rdi
    00000564: 	cmpq	0x88(%rsp), %rdi
    0000056c: 	je	.Ltmp737 # Offset: 1388
    0000056e: 	movq	0x1f0(%rsp), %rax
    00000576: 	leaq	0x1(%rax), %rsi
    0000057a: 	callq	_ZdlPvm@PLT # Offset: 1402
.Ltmp737:
    0000057f: 	movq	0xb0(%rsp), %rsi
    00000587: 	leaq	DATAat0x2b203(%rip), %rdx
    0000058e: 	movq	%r14, %rdi
    00000591: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1425
    00000596: 	callq	clock@PLT # Offset: 1430
    0000059b: 	movl	iterations(%rip), %edx
    000005a1: 	movq	%rax, start_time(%rip)
    000005a8: 	testl	%edx, %edx
    000005aa: 	jle	.Ltmp738 # Offset: 1450
    000005ac: 	movq	DATAat0x2b820(%rip), %xmm7
    000005b4: 	movsd	DATAat0x2b658(%rip), %xmm6
    000005bc: 	pxor	%xmm5, %xmm5
    000005c0: 	xorl	%r12d, %r12d
    000005c3: 	movsd	%xmm5, (%rsp)
    000005c8: 	leaq	DATAat0x2b1d0(%rip), %r13
    000005cf: 	movaps	%xmm7, 0x20(%rsp)
    000005d4: 	movsd	%xmm6, 0x8(%rsp)
    000005da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp741:
    000005e0: 	movl	$0x1f40, %eax
    000005e5: 	pxor	%xmm0, %xmm0
    000005e9: 	nopl	(%rax) # Size: 7
.Ltmp739:
    000005f0: 	addsd	DATAat0x2b6c8(%rip), %xmm0
    000005f8: 	subl	$0x1, %eax
    000005fb: 	jne	.Ltmp739 # Offset: 1531
    000005fd: 	subsd	DATAat0x2b6d0(%rip), %xmm0
    00000605: 	movsd	0x8(%rsp), %xmm7
    0000060b: 	andpd	0x20(%rsp), %xmm0
    00000611: 	comisd	%xmm0, %xmm7
    00000615: 	jbe	.Ltmp740 # Offset: 1557
.Ltmp1015:
    0000061b: 	addl	$0x1, %r12d
    0000061f: 	cmpl	%edx, %r12d
    00000622: 	jl	.Ltmp741 # Offset: 1570
.Ltmp738:
    00000624: 	movq	%r14, %rsi
    00000627: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000062e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1582
    00000633: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000063a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000641: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000648: 	je	.Ltmp742 # Offset: 1608
.Ltmp1050:
    0000064e: 	movq	-0x20(%rax), %r12
    00000652: 	callq	clock@PLT # Offset: 1618
    00000657: 	pxor	%xmm0, %xmm0
    0000065b: 	movq	%rax, end_time(%rip)
    00000662: 	movq	%r12, %rdi
    00000665: 	subq	start_time(%rip), %rax
    0000066c: 	cvtsi2sd	%rax, %xmm0
    00000671: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000679: 	callq	_Z13record_resultdPKc # Offset: 1657
    0000067e: 	movq	0x1e0(%rsp), %rdi
    00000686: 	cmpq	0x88(%rsp), %rdi
    0000068e: 	je	.Ltmp743 # Offset: 1678
    00000690: 	movq	0x1f0(%rsp), %rax
    00000698: 	leaq	0x1(%rax), %rsi
    0000069c: 	callq	_ZdlPvm@PLT # Offset: 1692
.Ltmp743:
    000006a1: 	movq	0xb0(%rsp), %rsi
    000006a9: 	leaq	DATAat0x2b217(%rip), %rdx
    000006b0: 	movq	%r14, %rdi
    000006b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1715
    000006b8: 	callq	clock@PLT # Offset: 1720
    000006bd: 	movl	iterations(%rip), %edx
    000006c3: 	movq	%rax, start_time(%rip)
    000006ca: 	testl	%edx, %edx
    000006cc: 	jle	.Ltmp744 # Offset: 1740
    000006d2: 	pxor	%xmm5, %xmm5
    000006d6: 	movsd	DATAat0x2b6b8(%rip), %xmm7
    000006de: 	xorl	%r12d, %r12d
    000006e1: 	movq	DATAat0x2b820(%rip), %xmm6
    000006e9: 	movsd	%xmm5, (%rsp)
    000006ee: 	movsd	DATAat0x2b658(%rip), %xmm5
    000006f6: 	leaq	DATAat0x2b1d0(%rip), %r13
    000006fd: 	movsd	%xmm7, 0x18(%rsp)
    00000703: 	movaps	%xmm6, 0x20(%rsp)
    00000708: 	movsd	%xmm5, 0x8(%rsp)
    0000070e: 	nop # Size: 2
.Ltmp747:
    00000710: 	movsd	0x70(%rsp), %xmm1
    00000716: 	movl	$0x1f40, %eax
    0000071b: 	pxor	%xmm0, %xmm0
    0000071f: 	nop # Size: 1
.Ltmp745:
    00000720: 	addsd	%xmm1, %xmm0
    00000724: 	subl	$0x1, %eax
    00000727: 	jne	.Ltmp745 # Offset: 1831
    00000729: 	subsd	0x18(%rsp), %xmm0
    0000072f: 	movsd	0x8(%rsp), %xmm6
    00000735: 	andpd	0x20(%rsp), %xmm0
    0000073b: 	comisd	%xmm0, %xmm6
    0000073f: 	jbe	.Ltmp746 # Offset: 1855
.Ltmp1014:
    00000745: 	addl	$0x1, %r12d
    00000749: 	cmpl	%edx, %r12d
    0000074c: 	jl	.Ltmp747 # Offset: 1868
.Ltmp744:
    0000074e: 	movq	%r14, %rsi
    00000751: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000758: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1880
    0000075d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000764: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000076b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000772: 	je	.Ltmp748 # Offset: 1906
.Ltmp1049:
    00000778: 	movq	-0x20(%rax), %r12
    0000077c: 	callq	clock@PLT # Offset: 1916
    00000781: 	pxor	%xmm0, %xmm0
    00000785: 	movq	%rax, end_time(%rip)
    0000078c: 	movq	%r12, %rdi
    0000078f: 	subq	start_time(%rip), %rax
    00000796: 	cvtsi2sd	%rax, %xmm0
    0000079b: 	divsd	DATAat0x2b628(%rip), %xmm0
    000007a3: 	callq	_Z13record_resultdPKc # Offset: 1955
    000007a8: 	movq	0x1e0(%rsp), %rdi
    000007b0: 	cmpq	0x88(%rsp), %rdi
    000007b8: 	je	.Ltmp749 # Offset: 1976
    000007ba: 	movq	0x1f0(%rsp), %rax
    000007c2: 	leaq	0x1(%rax), %rsi
    000007c6: 	callq	_ZdlPvm@PLT # Offset: 1990
.Ltmp749:
    000007cb: 	movq	0xb0(%rsp), %rsi
    000007d3: 	leaq	DATAat0x2b229(%rip), %rdx
    000007da: 	movq	%r14, %rdi
    000007dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2013
    000007e2: 	callq	clock@PLT # Offset: 2018
    000007e7: 	movq	%r14, %rsi
    000007ea: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000007f1: 	movq	%rax, start_time(%rip)
    000007f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2040
    000007fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000804: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000080b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000812: 	je	.Ltmp750 # Offset: 2066
.Ltmp1048:
    00000818: 	movq	-0x20(%rax), %r12
    0000081c: 	callq	clock@PLT # Offset: 2076
    00000821: 	pxor	%xmm0, %xmm0
    00000825: 	movq	%rax, end_time(%rip)
    0000082c: 	movq	%r12, %rdi
    0000082f: 	subq	start_time(%rip), %rax
    00000836: 	cvtsi2sd	%rax, %xmm0
    0000083b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000843: 	callq	_Z13record_resultdPKc # Offset: 2115
    00000848: 	movq	0x1e0(%rsp), %rdi
    00000850: 	cmpq	0x88(%rsp), %rdi
    00000858: 	je	.Ltmp751 # Offset: 2136
    0000085a: 	movq	0x1f0(%rsp), %rax
    00000862: 	leaq	0x1(%rax), %rsi
    00000866: 	callq	_ZdlPvm@PLT # Offset: 2150
.Ltmp751:
    0000086b: 	movq	0xb0(%rsp), %rsi
    00000873: 	leaq	DATAat0x2b23a(%rip), %rdx
    0000087a: 	movq	%r14, %rdi
    0000087d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2173
    00000882: 	callq	clock@PLT # Offset: 2178
    00000887: 	movl	iterations(%rip), %edx
    0000088d: 	movq	%rax, start_time(%rip)
    00000894: 	testl	%edx, %edx
    00000896: 	jle	.Ltmp752 # Offset: 2198
    0000089c: 	pxor	%xmm7, %xmm7
    000008a0: 	movq	DATAat0x2b820(%rip), %xmm6
    000008a8: 	xorl	%r12d, %r12d
    000008ab: 	movsd	DATAat0x2b658(%rip), %xmm5
    000008b3: 	movsd	%xmm7, (%rsp)
    000008b8: 	movsd	DATAat0x2b648(%rip), %xmm7
    000008c0: 	leaq	DATAat0x2b1d0(%rip), %r13
    000008c7: 	movaps	%xmm6, 0x20(%rsp)
    000008cc: 	movsd	%xmm5, 0x8(%rsp)
    000008d2: 	movsd	%xmm7, 0x18(%rsp)
    000008d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp755:
    000008e0: 	movl	$0x1f40, %eax
    000008e5: 	pxor	%xmm0, %xmm0
    000008e9: 	nopl	(%rax) # Size: 7
.Ltmp753:
    000008f0: 	addsd	DATAat0x2b620(%rip), %xmm0
    000008f8: 	subl	$0x1, %eax
    000008fb: 	jne	.Ltmp753 # Offset: 2299
    000008fd: 	subsd	0x18(%rsp), %xmm0
    00000903: 	movsd	0x8(%rsp), %xmm7
    00000909: 	andpd	0x20(%rsp), %xmm0
    0000090f: 	comisd	%xmm0, %xmm7
    00000913: 	jbe	.Ltmp754 # Offset: 2323
.Ltmp1013:
    00000919: 	addl	$0x1, %r12d
    0000091d: 	cmpl	%edx, %r12d
    00000920: 	jl	.Ltmp755 # Offset: 2336
.Ltmp752:
    00000922: 	movq	%r14, %rsi
    00000925: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000092c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2348
    00000931: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000938: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000093f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000946: 	je	.Ltmp756 # Offset: 2374
.Ltmp1047:
    0000094c: 	movq	-0x20(%rax), %r12
    00000950: 	callq	clock@PLT # Offset: 2384
    00000955: 	pxor	%xmm0, %xmm0
    00000959: 	movq	%rax, end_time(%rip)
    00000960: 	movq	%r12, %rdi
    00000963: 	subq	start_time(%rip), %rax
    0000096a: 	cvtsi2sd	%rax, %xmm0
    0000096f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000977: 	callq	_Z13record_resultdPKc # Offset: 2423
    0000097c: 	movq	0x1e0(%rsp), %rdi
    00000984: 	cmpq	0x88(%rsp), %rdi
    0000098c: 	je	.Ltmp757 # Offset: 2444
    0000098e: 	movq	0x1f0(%rsp), %rax
    00000996: 	leaq	0x1(%rax), %rsi
    0000099a: 	callq	_ZdlPvm@PLT # Offset: 2458
.Ltmp757:
    0000099f: 	movq	0xb0(%rsp), %r15
    000009a7: 	leaq	0x140(%rsp), %rdi
    000009af: 	leaq	DATAat0x2b24e(%rip), %rdx
    000009b6: 	movq	%r15, %rsi
    000009b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2489
    000009be: 	movl	iterations(%rip), %edx
    000009c4: 	xorl	%r8d, %r8d
    000009c7: 	xorl	%ecx, %ecx
    000009c9: 	movl	$0x1f40, %esi
    000009ce: 	movq	0x140(%rsp), %rdi
    000009d6: 	callq	_Z9summarizePKciiii # Offset: 2518
    000009db: 	leaq	DATAat0x2b267(%rip), %rdx
    000009e2: 	movq	%r15, %rsi
    000009e5: 	movq	%r14, %rdi
    000009e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2536
    000009ed: 	callq	clock@PLT # Offset: 2541
    000009f2: 	movl	iterations(%rip), %r13d
    000009f9: 	movq	%rax, start_time(%rip)
    00000a00: 	testl	%r13d, %r13d
    00000a03: 	jle	.Ltmp758 # Offset: 2563
    00000a09: 	movsd	DATAat0x2b658(%rip), %xmm5
    00000a11: 	movsd	DATAat0x2b648(%rip), %xmm7
    00000a19: 	pxor	%xmm6, %xmm6
    00000a1d: 	xorl	%r12d, %r12d
    00000a20: 	movsd	%xmm6, (%rsp)
    00000a25: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000a2c: 	movsd	%xmm5, 0x8(%rsp)
    00000a32: 	movsd	%xmm7, 0x18(%rsp)
    00000a38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp762:
    00000a40: 	movq	%rbp, %rax
    00000a43: 	pxor	%xmm1, %xmm1
    00000a47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp759:
    00000a50: 	movapd	DATAat0x2b730(%rip), %xmm0
    00000a58: 	addpd	(%rax), %xmm0
    00000a5c: 	addq	$0x10, %rax
    00000a60: 	addpd	%xmm0, %xmm1
    00000a64: 	cmpq	%rax, %rbx
    00000a67: 	jne	.Ltmp759 # Offset: 2663
    00000a69: 	movsd	DATAat0x2b730(%rip), %xmm6
    00000a71: 	addsd	init_value(%rip), %xmm6
    00000a79: 	movapd	%xmm1, %xmm5
    00000a7d: 	unpckhpd	%xmm1, %xmm1
    00000a81: 	movsd	0x18(%rsp), %xmm0
    00000a87: 	movapd	%xmm1, %xmm4
    00000a8b: 	movsd	(%rsp), %xmm1
    00000a90: 	mulsd	%xmm6, %xmm0
    00000a94: 	mulsd	%xmm6, %xmm1
    00000a98: 	addsd	DATAat0x2b668(%rip), %xmm1
    00000aa0: 	ucomisd	%xmm1, %xmm0
    00000aa4: 	jp	.Ltmp760 # Offset: 2724
.Ltmp1099:
    00000aaa: 	subsd	%xmm0, %xmm5
    00000aae: 	subsd	%xmm1, %xmm4
    00000ab2: 	movapd	%xmm5, %xmm0
    00000ab6: 	movapd	%xmm4, %xmm1
    00000aba: 	callq	cabs@PLT # Offset: 2746
    00000abf: 	movsd	0x8(%rsp), %xmm6
    00000ac5: 	comisd	%xmm0, %xmm6
    00000ac9: 	jbe	.Ltmp761 # Offset: 2761
.Ltmp1012:
    00000acf: 	addl	$0x1, %r12d
    00000ad3: 	cmpl	%r13d, %r12d
    00000ad6: 	jl	.Ltmp762 # Offset: 2774
.Ltmp758:
    00000adc: 	movq	%r14, %rsi
    00000adf: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000ae6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2790
    00000aeb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000af2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000af9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b00: 	je	.Ltmp763 # Offset: 2816
.Ltmp1046:
    00000b06: 	movq	-0x20(%rax), %r12
    00000b0a: 	callq	clock@PLT # Offset: 2826
    00000b0f: 	pxor	%xmm0, %xmm0
    00000b13: 	movq	%rax, end_time(%rip)
    00000b1a: 	movq	%r12, %rdi
    00000b1d: 	subq	start_time(%rip), %rax
    00000b24: 	cvtsi2sd	%rax, %xmm0
    00000b29: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000b31: 	callq	_Z13record_resultdPKc # Offset: 2865
    00000b36: 	movq	0x1e0(%rsp), %rdi
    00000b3e: 	cmpq	0x88(%rsp), %rdi
    00000b46: 	je	.Ltmp764 # Offset: 2886
    00000b48: 	movq	0x1f0(%rsp), %rax
    00000b50: 	leaq	0x1(%rax), %rsi
    00000b54: 	callq	_ZdlPvm@PLT # Offset: 2900
.Ltmp764:
    00000b59: 	movq	0xb0(%rsp), %rsi
    00000b61: 	leaq	DATAat0x2b275(%rip), %rdx
    00000b68: 	movq	%r14, %rdi
    00000b6b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2923
    00000b70: 	movq	%r14, %rdx
    00000b73: 	movl	$0x1f40, %esi
    00000b78: 	movq	%rbp, %rdi
    00000b7b: 	callq	_Z13test_constantISt7complexIdE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2939
    00000b80: 	movq	0x1e0(%rsp), %rdi
    00000b88: 	cmpq	0x88(%rsp), %rdi
    00000b90: 	je	.Ltmp765 # Offset: 2960
    00000b92: 	movq	0x1f0(%rsp), %rax
    00000b9a: 	leaq	0x1(%rax), %rsi
    00000b9e: 	callq	_ZdlPvm@PLT # Offset: 2974
.Ltmp765:
    00000ba3: 	movq	0xb0(%rsp), %rsi
    00000bab: 	leaq	DATAat0x2b28d(%rip), %rdx
    00000bb2: 	movq	%r14, %rdi
    00000bb5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2997
    00000bba: 	movq	%r14, %rdx
    00000bbd: 	movl	$0x1f40, %esi
    00000bc2: 	movq	%rbp, %rdi
    00000bc5: 	callq	_Z13test_constantISt7complexIdE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3013
    00000bca: 	movq	0x1e0(%rsp), %rdi
    00000bd2: 	cmpq	0x88(%rsp), %rdi
    00000bda: 	je	.Ltmp766 # Offset: 3034
    00000bdc: 	movq	0x1f0(%rsp), %rax
    00000be4: 	leaq	0x1(%rax), %rsi
    00000be8: 	callq	_ZdlPvm@PLT # Offset: 3048
.Ltmp766:
    00000bed: 	movq	0xb0(%rsp), %rsi
    00000bf5: 	leaq	DATAat0x2b2a0(%rip), %rdx
    00000bfc: 	movq	%r14, %rdi
    00000bff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3071
    00000c04: 	movq	%r14, %rdx
    00000c07: 	movl	$0x1f40, %esi
    00000c0c: 	movq	%rbp, %rdi
    00000c0f: 	callq	_Z13test_constantISt7complexIdE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3087
    00000c14: 	movq	0x1e0(%rsp), %rdi
    00000c1c: 	cmpq	0x88(%rsp), %rdi
    00000c24: 	je	.Ltmp767 # Offset: 3108
    00000c26: 	movq	0x1f0(%rsp), %rax
    00000c2e: 	leaq	0x1(%rax), %rsi
    00000c32: 	callq	_ZdlPvm@PLT # Offset: 3122
.Ltmp767:
    00000c37: 	movq	0xb0(%rsp), %rsi
    00000c3f: 	leaq	DATAat0x2b2bd(%rip), %rdx
    00000c46: 	movq	%r14, %rdi
    00000c49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3145
    00000c4e: 	callq	clock@PLT # Offset: 3150
    00000c53: 	movl	iterations(%rip), %r13d
    00000c5a: 	movq	%rax, start_time(%rip)
    00000c61: 	testl	%r13d, %r13d
    00000c64: 	jle	.Ltmp768 # Offset: 3172
    00000c6a: 	movsd	DATAat0x2b658(%rip), %xmm5
    00000c72: 	movsd	DATAat0x2b648(%rip), %xmm7
    00000c7a: 	pxor	%xmm6, %xmm6
    00000c7e: 	xorl	%r12d, %r12d
    00000c81: 	movsd	%xmm6, (%rsp)
    00000c86: 	movsd	%xmm5, 0x8(%rsp)
    00000c8c: 	movsd	%xmm7, 0x18(%rsp)
    00000c92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp774:
    00000c98: 	movsd	(%rsp), %xmm5
    00000c9d: 	movq	%rbp, %r15
    00000ca0: 	movapd	%xmm5, %xmm6
    00000ca4: 	nopl	(%rax) # Size: 4
.Ltmp770:
    00000ca8: 	movsd	(%r15), %xmm4
    00000cad: 	movsd	0x8(%r15), %xmm1
    00000cb3: 	movsd	DATAat0x2b710(%rip), %xmm2
    00000cbb: 	movsd	DATAat0x2b718(%rip), %xmm0
    00000cc3: 	movsd	DATAat0x2b718(%rip), %xmm3
    00000ccb: 	mulsd	%xmm1, %xmm0
    00000ccf: 	mulsd	%xmm4, %xmm2
    00000cd3: 	mulsd	%xmm4, %xmm3
    00000cd7: 	subsd	%xmm0, %xmm2
    00000cdb: 	movsd	DATAat0x2b710(%rip), %xmm0
    00000ce3: 	mulsd	%xmm1, %xmm0
    00000ce7: 	addsd	%xmm3, %xmm0
    00000ceb: 	ucomisd	%xmm2, %xmm0
    00000cef: 	jp	.Ltmp769 # Offset: 3311
    00000cf5: 	addq	$0x10, %r15
    00000cf9: 	addsd	%xmm2, %xmm5
    00000cfd: 	addsd	%xmm0, %xmm6
    00000d01: 	cmpq	%rbx, %r15
    00000d04: 	jne	.Ltmp770 # Offset: 3332
.Ltmp1058:
    00000d06: 	movsd	init_value(%rip), %xmm4
    00000d0e: 	movsd	DATAat0x2b718(%rip), %xmm1
    00000d16: 	movsd	DATAat0x2b710(%rip), %xmm0
    00000d1e: 	mulsd	%xmm4, %xmm1
    00000d22: 	mulsd	%xmm4, %xmm0
    00000d26: 	addsd	(%rsp), %xmm0
    00000d2b: 	ucomisd	%xmm0, %xmm1
    00000d2f: 	jp	.Ltmp771 # Offset: 3375
.Ltmp1096:
    00000d35: 	movsd	(%rsp), %xmm7
    00000d3a: 	movsd	0x18(%rsp), %xmm13
    00000d41: 	movapd	%xmm7, %xmm2
    00000d45: 	movapd	%xmm13, %xmm3
    00000d4a: 	mulsd	%xmm1, %xmm2
    00000d4e: 	mulsd	%xmm0, %xmm3
    00000d52: 	mulsd	%xmm0, %xmm7
    00000d56: 	subsd	%xmm2, %xmm3
    00000d5a: 	movapd	%xmm13, %xmm2
    00000d5f: 	mulsd	%xmm1, %xmm2
    00000d63: 	addsd	%xmm7, %xmm2
    00000d67: 	ucomisd	%xmm2, %xmm3
    00000d6b: 	jp	.Ltmp772 # Offset: 3435
.Ltmp1095:
    00000d71: 	subsd	%xmm2, %xmm6
    00000d75: 	subsd	%xmm3, %xmm5
    00000d79: 	movapd	%xmm6, %xmm1
    00000d7d: 	movapd	%xmm5, %xmm0
    00000d81: 	callq	cabs@PLT # Offset: 3457
    00000d86: 	movsd	0x8(%rsp), %xmm6
    00000d8c: 	comisd	%xmm0, %xmm6
    00000d90: 	jbe	.Ltmp773 # Offset: 3472
.Ltmp1011:
    00000d96: 	addl	$0x1, %r12d
    00000d9a: 	cmpl	%r13d, %r12d
    00000d9d: 	jl	.Ltmp774 # Offset: 3485
.Ltmp768:
    00000da3: 	movq	%r14, %rsi
    00000da6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000dad: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3501
    00000db2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000db9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000dc0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dc7: 	je	.Ltmp775 # Offset: 3527
.Ltmp1045:
    00000dcd: 	movq	-0x20(%rax), %r12
    00000dd1: 	callq	clock@PLT # Offset: 3537
    00000dd6: 	pxor	%xmm0, %xmm0
    00000dda: 	movq	%rax, end_time(%rip)
    00000de1: 	movq	%r12, %rdi
    00000de4: 	subq	start_time(%rip), %rax
    00000deb: 	cvtsi2sd	%rax, %xmm0
    00000df0: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000df8: 	callq	_Z13record_resultdPKc # Offset: 3576
    00000dfd: 	movq	0x1e0(%rsp), %rdi
    00000e05: 	cmpq	0x88(%rsp), %rdi
    00000e0d: 	je	.Ltmp776 # Offset: 3597
    00000e0f: 	movq	0x1f0(%rsp), %rax
    00000e17: 	leaq	0x1(%rax), %rsi
    00000e1b: 	callq	_ZdlPvm@PLT # Offset: 3611
.Ltmp776:
    00000e20: 	movq	0xb0(%rsp), %rsi
    00000e28: 	leaq	DATAat0x2b2d0(%rip), %rdx
    00000e2f: 	movq	%r14, %rdi
    00000e32: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3634
    00000e37: 	movq	%r14, %rdx
    00000e3a: 	movl	$0x1f40, %esi
    00000e3f: 	movq	%rbp, %rdi
    00000e42: 	callq	_Z13test_constantISt7complexIdE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3650
    00000e47: 	movq	0x1e0(%rsp), %rdi
    00000e4f: 	cmpq	0x88(%rsp), %rdi
    00000e57: 	je	.Ltmp777 # Offset: 3671
    00000e59: 	movq	0x1f0(%rsp), %rax
    00000e61: 	leaq	0x1(%rax), %rsi
    00000e65: 	callq	_ZdlPvm@PLT # Offset: 3685
.Ltmp777:
    00000e6a: 	movq	0xb0(%rsp), %rsi
    00000e72: 	leaq	DATAat0x2b570(%rip), %rdx
    00000e79: 	movq	%r14, %rdi
    00000e7c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3708
    00000e81: 	movq	%r14, %rdx
    00000e84: 	movl	$0x1f40, %esi
    00000e89: 	movq	%rbp, %rdi
    00000e8c: 	callq	_Z13test_constantISt7complexIdE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3724
    00000e91: 	movq	0x1e0(%rsp), %rdi
    00000e99: 	cmpq	0x88(%rsp), %rdi
    00000ea1: 	je	.Ltmp778 # Offset: 3745
    00000ea3: 	movq	0x1f0(%rsp), %rax
    00000eab: 	leaq	0x1(%rax), %rsi
    00000eaf: 	callq	_ZdlPvm@PLT # Offset: 3759
.Ltmp778:
    00000eb4: 	movq	0xb0(%rsp), %rsi
    00000ebc: 	leaq	DATAat0x2b2ee(%rip), %rdx
    00000ec3: 	movq	%r14, %rdi
    00000ec6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3782
    00000ecb: 	callq	clock@PLT # Offset: 3787
    00000ed0: 	movl	iterations(%rip), %r13d
    00000ed7: 	movq	%rax, start_time(%rip)
    00000ede: 	testl	%r13d, %r13d
    00000ee1: 	jle	.Ltmp779 # Offset: 3809
    00000ee7: 	movsd	DATAat0x2b658(%rip), %xmm5
    00000eef: 	movsd	DATAat0x2b648(%rip), %xmm7
    00000ef7: 	pxor	%xmm6, %xmm6
    00000efb: 	xorl	%r12d, %r12d
    00000efe: 	movsd	%xmm6, (%rsp)
    00000f03: 	movsd	%xmm5, 0x8(%rsp)
    00000f09: 	movsd	%xmm7, 0x18(%rsp)
    00000f0f: 	nop # Size: 1
.Ltmp783:
    00000f10: 	movsd	(%rsp), %xmm6
    00000f15: 	movq	%rbp, %r15
    00000f18: 	movsd	%xmm6, 0x20(%rsp)
    00000f1e: 	movsd	%xmm6, 0x30(%rsp)
    00000f24: 	nopl	(%rax) # Size: 4
.Ltmp780:
    00000f28: 	movq	DATAat0x2b7e8(%rip), %rax
    00000f2f: 	movsd	0x8(%r15), %xmm1
    00000f35: 	addq	$0x10, %r15
    00000f39: 	movsd	-0x10(%r15), %xmm0
    00000f3f: 	movsd	0x70(%rsp), %xmm2
    00000f45: 	movq	%rax, %xmm3
    00000f4a: 	callq	__divdc3@PLT # Offset: 3914
    00000f4f: 	addsd	0x30(%rsp), %xmm0
    00000f55: 	addsd	0x20(%rsp), %xmm1
    00000f5b: 	movsd	%xmm0, 0x30(%rsp)
    00000f61: 	movsd	%xmm1, 0x20(%rsp)
    00000f67: 	cmpq	%r15, %rbx
    00000f6a: 	jne	.Ltmp780 # Offset: 3946
    00000f6c: 	movq	DATAat0x2b7e8(%rip), %rax
    00000f73: 	movsd	init_value(%rip), %xmm0
    00000f7b: 	pxor	%xmm1, %xmm1
    00000f7f: 	movsd	0x70(%rsp), %xmm2
    00000f85: 	movq	%rax, %xmm3
    00000f8a: 	callq	__divdc3@PLT # Offset: 3978
    00000f8f: 	movsd	0x18(%rsp), %xmm6
    00000f95: 	movsd	(%rsp), %xmm7
    00000f9a: 	movapd	%xmm6, %xmm3
    00000f9e: 	movapd	%xmm7, %xmm2
    00000fa2: 	mulsd	%xmm1, %xmm2
    00000fa6: 	mulsd	%xmm0, %xmm3
    00000faa: 	mulsd	%xmm0, %xmm7
    00000fae: 	mulsd	%xmm1, %xmm6
    00000fb2: 	subsd	%xmm2, %xmm3
    00000fb6: 	movapd	%xmm7, %xmm2
    00000fba: 	addsd	%xmm6, %xmm2
    00000fbe: 	ucomisd	%xmm2, %xmm3
    00000fc2: 	jp	.Ltmp781 # Offset: 4034
.Ltmp1098:
    00000fc8: 	movsd	0x30(%rsp), %xmm0
    00000fce: 	movsd	0x20(%rsp), %xmm1
    00000fd4: 	subsd	%xmm3, %xmm0
    00000fd8: 	subsd	%xmm2, %xmm1
    00000fdc: 	callq	cabs@PLT # Offset: 4060
    00000fe1: 	movsd	0x8(%rsp), %xmm7
    00000fe7: 	comisd	%xmm0, %xmm7
    00000feb: 	jbe	.Ltmp782 # Offset: 4075
.Ltmp1010:
    00000ff1: 	addl	$0x1, %r12d
    00000ff5: 	cmpl	%r13d, %r12d
    00000ff8: 	jl	.Ltmp783 # Offset: 4088
.Ltmp779:
    00000ffe: 	movq	%r14, %rsi
    00001001: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001008: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4104
    0000100d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001014: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000101b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001022: 	je	.Ltmp784 # Offset: 4130
.Ltmp1044:
    00001028: 	movq	-0x20(%rax), %r12
    0000102c: 	callq	clock@PLT # Offset: 4140
    00001031: 	pxor	%xmm0, %xmm0
    00001035: 	movq	%rax, end_time(%rip)
    0000103c: 	movq	%r12, %rdi
    0000103f: 	subq	start_time(%rip), %rax
    00001046: 	cvtsi2sd	%rax, %xmm0
    0000104b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001053: 	callq	_Z13record_resultdPKc # Offset: 4179
    00001058: 	movq	0x1e0(%rsp), %rdi
    00001060: 	cmpq	0x88(%rsp), %rdi
    00001068: 	je	.Ltmp785 # Offset: 4200
    0000106a: 	movq	0x1f0(%rsp), %rax
    00001072: 	leaq	0x1(%rax), %rsi
    00001076: 	callq	_ZdlPvm@PLT # Offset: 4214
.Ltmp785:
    0000107b: 	movq	0xb0(%rsp), %rsi
    00001083: 	leaq	DATAat0x2b2ff(%rip), %rdx
    0000108a: 	movq	%r14, %rdi
    0000108d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4237
    00001092: 	movq	%r14, %rdx
    00001095: 	movl	$0x1f40, %esi
    0000109a: 	movq	%rbp, %rdi
    0000109d: 	callq	_Z13test_constantISt7complexIdE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4253
    000010a2: 	movq	0x1e0(%rsp), %rdi
    000010aa: 	cmpq	0x88(%rsp), %rdi
    000010b2: 	je	.Ltmp786 # Offset: 4274
    000010b4: 	movq	0x1f0(%rsp), %rax
    000010bc: 	leaq	0x1(%rax), %rsi
    000010c0: 	callq	_ZdlPvm@PLT # Offset: 4288
.Ltmp786:
    000010c5: 	movq	0xb0(%rsp), %rsi
    000010cd: 	leaq	DATAat0x2b31a(%rip), %rdx
    000010d4: 	movq	%r14, %rdi
    000010d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4311
    000010dc: 	callq	clock@PLT # Offset: 4316
    000010e1: 	movl	iterations(%rip), %r13d
    000010e8: 	movq	%rax, start_time(%rip)
    000010ef: 	testl	%r13d, %r13d
    000010f2: 	jle	.Ltmp787 # Offset: 4338
    000010f8: 	movsd	DATAat0x2b658(%rip), %xmm5
    00001100: 	movsd	DATAat0x2b648(%rip), %xmm7
    00001108: 	pxor	%xmm6, %xmm6
    0000110c: 	xorl	%r12d, %r12d
    0000110f: 	movsd	%xmm6, (%rsp)
    00001114: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000111b: 	movsd	%xmm5, 0x8(%rsp)
    00001121: 	movsd	%xmm7, 0x18(%rsp)
    00001127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp791:
    00001130: 	movq	%rbp, %rax
    00001133: 	pxor	%xmm1, %xmm1
    00001137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp788:
    00001140: 	movapd	DATAat0x2b830(%rip), %xmm0
    00001148: 	addpd	(%rax), %xmm0
    0000114c: 	addq	$0x10, %rax
    00001150: 	addpd	%xmm0, %xmm1
    00001154: 	cmpq	%rax, %rbx
    00001157: 	jne	.Ltmp788 # Offset: 4439
    00001159: 	movsd	0x18(%rsp), %xmm2
    0000115f: 	movsd	init_value(%rip), %xmm5
    00001167: 	movapd	%xmm1, %xmm6
    0000116b: 	unpckhpd	%xmm1, %xmm1
    0000116f: 	subsd	DATAat0x2b6d8(%rip), %xmm5
    00001177: 	movsd	(%rsp), %xmm7
    0000117c: 	movapd	%xmm1, %xmm4
    00001180: 	mulsd	%xmm5, %xmm2
    00001184: 	addsd	%xmm7, %xmm2
    00001188: 	mulsd	%xmm5, %xmm7
    0000118c: 	movapd	%xmm7, %xmm1
    00001190: 	subsd	DATAat0x2b6e0(%rip), %xmm1
    00001198: 	ucomisd	%xmm1, %xmm2
    0000119c: 	jp	.Ltmp789 # Offset: 4508
.Ltmp1097:
    000011a2: 	subsd	%xmm2, %xmm6
    000011a6: 	subsd	%xmm1, %xmm4
    000011aa: 	movapd	%xmm6, %xmm0
    000011ae: 	movapd	%xmm4, %xmm1
    000011b2: 	callq	cabs@PLT # Offset: 4530
    000011b7: 	movsd	0x8(%rsp), %xmm6
    000011bd: 	comisd	%xmm0, %xmm6
    000011c1: 	jbe	.Ltmp790 # Offset: 4545
.Ltmp1009:
    000011c7: 	addl	$0x1, %r12d
    000011cb: 	cmpl	%r13d, %r12d
    000011ce: 	jl	.Ltmp791 # Offset: 4558
.Ltmp787:
    000011d4: 	movq	%r14, %rsi
    000011d7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011de: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4574
    000011e3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011ea: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000011f1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000011f8: 	je	.Ltmp792 # Offset: 4600
.Ltmp1043:
    000011fe: 	movq	-0x20(%rax), %r12
    00001202: 	callq	clock@PLT # Offset: 4610
    00001207: 	pxor	%xmm0, %xmm0
    0000120b: 	movq	%rax, end_time(%rip)
    00001212: 	movq	%r12, %rdi
    00001215: 	subq	start_time(%rip), %rax
    0000121c: 	cvtsi2sd	%rax, %xmm0
    00001221: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001229: 	callq	_Z13record_resultdPKc # Offset: 4649
    0000122e: 	movq	0x1e0(%rsp), %rdi
    00001236: 	cmpq	0x88(%rsp), %rdi
    0000123e: 	je	.Ltmp793 # Offset: 4670
    00001240: 	movq	0x1f0(%rsp), %rax
    00001248: 	leaq	0x1(%rax), %rsi
    0000124c: 	callq	_ZdlPvm@PLT # Offset: 4684
.Ltmp793:
    00001251: 	movq	0xb0(%rsp), %rsi
    00001259: 	leaq	DATAat0x2b336(%rip), %rdx
    00001260: 	movq	%r14, %rdi
    00001263: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4707
    00001268: 	movq	%r14, %rdx
    0000126b: 	movl	$0x1f40, %esi
    00001270: 	movq	%rbp, %rdi
    00001273: 	callq	_Z13test_constantISt7complexIdE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4723
    00001278: 	movq	0x1e0(%rsp), %rdi
    00001280: 	cmpq	0x88(%rsp), %rdi
    00001288: 	je	.Ltmp794 # Offset: 4744
    0000128a: 	movq	0x1f0(%rsp), %rax
    00001292: 	leaq	0x1(%rax), %rsi
    00001296: 	callq	_ZdlPvm@PLT # Offset: 4758
.Ltmp794:
    0000129b: 	movq	0xb0(%rsp), %r15
    000012a3: 	leaq	0x160(%rsp), %rdi
    000012ab: 	leaq	DATAat0x2b255(%rip), %rdx
    000012b2: 	movq	%r15, %rsi
    000012b5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4789
    000012ba: 	movl	iterations(%rip), %edx
    000012c0: 	xorl	%r8d, %r8d
    000012c3: 	xorl	%ecx, %ecx
    000012c5: 	movl	$0x1f40, %esi
    000012ca: 	movq	0x160(%rsp), %rdi
    000012d2: 	callq	_Z9summarizePKciiii # Offset: 4818
    000012d7: 	leaq	DATAat0x2b34f(%rip), %rdx
    000012de: 	movq	%r15, %rsi
    000012e1: 	movq	%r14, %rdi
    000012e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4836
    000012e9: 	callq	clock@PLT # Offset: 4841
    000012ee: 	movl	iterations(%rip), %r13d
    000012f5: 	movq	%rax, start_time(%rip)
    000012fc: 	testl	%r13d, %r13d
    000012ff: 	jle	.Ltmp795 # Offset: 4863
    00001305: 	movsd	0x40(%rsp), %xmm6
    0000130b: 	pxor	%xmm3, %xmm3
    0000130f: 	xorl	%r12d, %r12d
    00001312: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001319: 	movsd	%xmm3, (%rsp)
    0000131e: 	movapd	%xmm6, %xmm7
    00001322: 	addsd	%xmm3, %xmm7
    00001326: 	movsd	%xmm7, 0x90(%rsp)
    0000132f: 	movapd	%xmm7, %xmm5
    00001333: 	mulsd	%xmm3, %xmm5
    00001337: 	movsd	%xmm5, 0x30(%rsp)
    0000133d: 	movsd	DATAat0x2b648(%rip), %xmm5
    00001345: 	mulsd	%xmm5, %xmm7
    00001349: 	movsd	%xmm5, 0x18(%rsp)
    0000134f: 	movsd	DATAat0x2b658(%rip), %xmm5
    00001357: 	movsd	%xmm5, 0x8(%rsp)
    0000135d: 	movsd	%xmm7, 0x70(%rsp)
    00001363: 	movsd	0x10(%rsp), %xmm7
    00001369: 	unpcklpd	%xmm6, %xmm7
    0000136d: 	movaps	%xmm7, 0x20(%rsp)
    00001372: 	nopw	(%rax,%rax) # Size: 6
.Ltmp799:
    00001378: 	movapd	0x20(%rsp), %xmm2
    0000137e: 	movq	%rbp, %rax
    00001381: 	pxor	%xmm1, %xmm1
    00001385: 	nopl	(%rax) # Size: 3
.Ltmp796:
    00001388: 	movapd	(%rax), %xmm0
    0000138c: 	addq	$0x10, %rax
    00001390: 	addpd	%xmm2, %xmm0
    00001394: 	addpd	%xmm0, %xmm1
    00001398: 	cmpq	%rbx, %rax
    0000139b: 	jne	.Ltmp796 # Offset: 5019
    0000139d: 	movsd	0x10(%rsp), %xmm0
    000013a3: 	movapd	%xmm1, %xmm5
    000013a7: 	unpckhpd	%xmm1, %xmm1
    000013ab: 	addsd	init_value(%rip), %xmm0
    000013b3: 	movsd	0x18(%rsp), %xmm2
    000013b9: 	movapd	%xmm1, %xmm4
    000013bd: 	movsd	(%rsp), %xmm1
    000013c2: 	mulsd	%xmm0, %xmm2
    000013c6: 	mulsd	%xmm0, %xmm1
    000013ca: 	subsd	0x30(%rsp), %xmm2
    000013d0: 	addsd	0x70(%rsp), %xmm1
    000013d6: 	ucomisd	%xmm1, %xmm2
    000013da: 	jp	.Ltmp797 # Offset: 5082
.Ltmp1094:
    000013e0: 	subsd	%xmm2, %xmm5
    000013e4: 	subsd	%xmm1, %xmm4
    000013e8: 	movapd	%xmm5, %xmm0
    000013ec: 	movapd	%xmm4, %xmm1
    000013f0: 	callq	cabs@PLT # Offset: 5104
    000013f5: 	movsd	0x8(%rsp), %xmm7
    000013fb: 	comisd	%xmm0, %xmm7
    000013ff: 	jbe	.Ltmp798 # Offset: 5119
.Ltmp1008:
    00001405: 	addl	$0x1, %r12d
    00001409: 	cmpl	%r13d, %r12d
    0000140c: 	jl	.Ltmp799 # Offset: 5132
.Ltmp795:
    00001412: 	movq	%r14, %rsi
    00001415: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000141c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5148
    00001421: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001428: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000142f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001436: 	je	.Ltmp800 # Offset: 5174
.Ltmp1042:
    0000143c: 	movq	-0x20(%rax), %r12
    00001440: 	callq	clock@PLT # Offset: 5184
    00001445: 	pxor	%xmm0, %xmm0
    00001449: 	movq	%rax, end_time(%rip)
    00001450: 	movq	%r12, %rdi
    00001453: 	subq	start_time(%rip), %rax
    0000145a: 	cvtsi2sd	%rax, %xmm0
    0000145f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001467: 	callq	_Z13record_resultdPKc # Offset: 5223
    0000146c: 	movq	0x1e0(%rsp), %rdi
    00001474: 	cmpq	0x88(%rsp), %rdi
    0000147c: 	je	.Ltmp801 # Offset: 5244
    0000147e: 	movq	0x1f0(%rsp), %rax
    00001486: 	leaq	0x1(%rax), %rsi
    0000148a: 	callq	_ZdlPvm@PLT # Offset: 5258
.Ltmp801:
    0000148f: 	movq	0xb0(%rsp), %rsi
    00001497: 	leaq	DATAat0x2b35d(%rip), %rdx
    0000149e: 	movq	%r14, %rdi
    000014a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5281
    000014a6: 	callq	clock@PLT # Offset: 5286
    000014ab: 	movl	iterations(%rip), %r13d
    000014b2: 	movq	%rax, start_time(%rip)
    000014b9: 	testl	%r13d, %r13d
    000014bc: 	jle	.Ltmp802 # Offset: 5308
    000014c2: 	movsd	0x40(%rsp), %xmm0
    000014c8: 	pxor	%xmm7, %xmm7
    000014cc: 	addsd	0x80(%rsp), %xmm0
    000014d5: 	xorl	%r12d, %r12d
    000014d8: 	addsd	0x68(%rsp), %xmm0
    000014de: 	movapd	%xmm7, %xmm6
    000014e2: 	addsd	0x58(%rsp), %xmm0
    000014e8: 	movsd	%xmm7, (%rsp)
    000014ed: 	leaq	DATAat0x2b1d0(%rip), %r15
    000014f4: 	addsd	%xmm0, %xmm6
    000014f8: 	movsd	%xmm6, 0xb8(%rsp)
    00001501: 	movapd	%xmm6, %xmm5
    00001505: 	mulsd	%xmm7, %xmm5
    00001509: 	movsd	DATAat0x2b648(%rip), %xmm7
    00001511: 	mulsd	%xmm7, %xmm6
    00001515: 	movsd	%xmm7, 0x18(%rsp)
    0000151b: 	movsd	%xmm5, 0x20(%rsp)
    00001521: 	movsd	DATAat0x2b658(%rip), %xmm5
    00001529: 	movsd	%xmm6, 0x30(%rsp)
    0000152f: 	movapd	%xmm0, %xmm6
    00001533: 	movsd	0x10(%rsp), %xmm0
    00001539: 	addsd	0x60(%rsp), %xmm0
    0000153f: 	addsd	0x50(%rsp), %xmm0
    00001545: 	addsd	0x48(%rsp), %xmm0
    0000154b: 	unpcklpd	%xmm6, %xmm6
    0000154f: 	movsd	%xmm5, 0x8(%rsp)
    00001555: 	movaps	%xmm6, 0xa0(%rsp)
    0000155d: 	movapd	%xmm0, %xmm7
    00001561: 	movsd	%xmm0, 0x70(%rsp)
    00001567: 	unpcklpd	%xmm7, %xmm7
    0000156b: 	movaps	%xmm7, 0x90(%rsp)
    00001573: 	nopl	(%rax,%rax) # Size: 5
.Ltmp806:
    00001578: 	movsd	(%rsp), %xmm4
    0000157d: 	movq	%rbp, %rax
    00001580: 	movapd	0x90(%rsp), %xmm3
    00001589: 	movapd	0xa0(%rsp), %xmm6
    00001592: 	movapd	%xmm4, %xmm5
    00001596: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp803:
    000015a0: 	movapd	(%rax), %xmm1
    000015a4: 	movapd	0x10(%rax), %xmm0
    000015a9: 	addq	$0x20, %rax
    000015ad: 	movlpd	-0x18(%rax), %xmm0
    000015b2: 	movhpd	-0x10(%rax), %xmm1
    000015b7: 	addpd	%xmm3, %xmm1
    000015bb: 	addpd	%xmm6, %xmm0
    000015bf: 	addsd	%xmm1, %xmm4
    000015c3: 	addsd	%xmm0, %xmm5
    000015c7: 	unpckhpd	%xmm1, %xmm1
    000015cb: 	unpckhpd	%xmm0, %xmm0
    000015cf: 	addsd	%xmm1, %xmm4
    000015d3: 	addsd	%xmm0, %xmm5
    000015d7: 	cmpq	%rax, %rbx
    000015da: 	jne	.Ltmp803 # Offset: 5594
    000015dc: 	movsd	0x70(%rsp), %xmm6
    000015e2: 	addsd	init_value(%rip), %xmm6
    000015ea: 	movsd	0x18(%rsp), %xmm0
    000015f0: 	movsd	(%rsp), %xmm1
    000015f5: 	mulsd	%xmm6, %xmm0
    000015f9: 	mulsd	%xmm6, %xmm1
    000015fd: 	subsd	0x20(%rsp), %xmm0
    00001603: 	addsd	0x30(%rsp), %xmm1
    00001609: 	ucomisd	%xmm1, %xmm0
    0000160d: 	jp	.Ltmp804 # Offset: 5645
.Ltmp1080:
    00001613: 	subsd	%xmm0, %xmm4
    00001617: 	subsd	%xmm1, %xmm5
    0000161b: 	movapd	%xmm4, %xmm0
    0000161f: 	movapd	%xmm5, %xmm1
    00001623: 	callq	cabs@PLT # Offset: 5667
    00001628: 	movsd	0x8(%rsp), %xmm6
    0000162e: 	comisd	%xmm0, %xmm6
    00001632: 	jbe	.Ltmp805 # Offset: 5682
.Ltmp1007:
    00001638: 	addl	$0x1, %r12d
    0000163c: 	cmpl	%r13d, %r12d
    0000163f: 	jl	.Ltmp806 # Offset: 5695
.Ltmp802:
    00001645: 	movq	%r14, %rsi
    00001648: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000164f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5711
    00001654: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000165b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001662: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001669: 	je	.Ltmp807 # Offset: 5737
.Ltmp1041:
    0000166f: 	movq	-0x20(%rax), %r12
    00001673: 	callq	clock@PLT # Offset: 5747
    00001678: 	pxor	%xmm0, %xmm0
    0000167c: 	movq	%rax, end_time(%rip)
    00001683: 	movq	%r12, %rdi
    00001686: 	subq	start_time(%rip), %rax
    0000168d: 	cvtsi2sd	%rax, %xmm0
    00001692: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000169a: 	callq	_Z13record_resultdPKc # Offset: 5786
    0000169f: 	movq	0x1e0(%rsp), %rdi
    000016a7: 	cmpq	0x88(%rsp), %rdi
    000016af: 	je	.Ltmp808 # Offset: 5807
    000016b1: 	movq	0x1f0(%rsp), %rax
    000016b9: 	leaq	0x1(%rax), %rsi
    000016bd: 	callq	_ZdlPvm@PLT # Offset: 5821
.Ltmp808:
    000016c2: 	movq	0xb0(%rsp), %rsi
    000016ca: 	leaq	DATAat0x2b375(%rip), %rdx
    000016d1: 	movq	%r14, %rdi
    000016d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5844
    000016d9: 	callq	clock@PLT # Offset: 5849
    000016de: 	movl	iterations(%rip), %r13d
    000016e5: 	movq	%rax, start_time(%rip)
    000016ec: 	testl	%r13d, %r13d
    000016ef: 	jle	.Ltmp809 # Offset: 5871
    000016f5: 	movsd	0x40(%rsp), %xmm3
    000016fb: 	pxor	%xmm5, %xmm5
    000016ff: 	movsd	0x68(%rsp), %xmm2
    00001705: 	xorl	%r12d, %r12d
    00001708: 	movsd	0x80(%rsp), %xmm4
    00001711: 	movsd	0x58(%rsp), %xmm1
    00001717: 	movsd	%xmm5, (%rsp)
    0000171c: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001723: 	movapd	%xmm3, %xmm0
    00001727: 	addsd	%xmm5, %xmm0
    0000172b: 	addsd	%xmm4, %xmm0
    0000172f: 	addsd	%xmm2, %xmm0
    00001733: 	addsd	%xmm1, %xmm0
    00001737: 	movapd	%xmm0, %xmm7
    0000173b: 	movapd	%xmm0, %xmm6
    0000173f: 	movsd	%xmm0, 0xc8(%rsp)
    00001748: 	mulsd	%xmm5, %xmm7
    0000174c: 	movsd	%xmm7, 0xa0(%rsp)
    00001755: 	movsd	DATAat0x2b648(%rip), %xmm7
    0000175d: 	mulsd	%xmm7, %xmm6
    00001761: 	movsd	%xmm7, 0x18(%rsp)
    00001767: 	movsd	DATAat0x2b658(%rip), %xmm7
    0000176f: 	movsd	%xmm7, 0x8(%rsp)
    00001775: 	movsd	0x50(%rsp), %xmm7
    0000177b: 	unpcklpd	%xmm2, %xmm7
    0000177f: 	movsd	%xmm6, 0xb8(%rsp)
    00001788: 	movsd	0x10(%rsp), %xmm6
    0000178e: 	movaps	%xmm7, 0x90(%rsp)
    00001796: 	movsd	0x48(%rsp), %xmm7
    0000179c: 	unpcklpd	%xmm3, %xmm6
    000017a0: 	movaps	%xmm6, 0x20(%rsp)
    000017a5: 	movsd	0x60(%rsp), %xmm6
    000017ab: 	unpcklpd	%xmm1, %xmm7
    000017af: 	movaps	%xmm7, 0x30(%rsp)
    000017b4: 	unpcklpd	%xmm4, %xmm6
    000017b8: 	movaps	%xmm6, 0x70(%rsp)
    000017bd: 	nopl	(%rax) # Size: 3
.Ltmp813:
    000017c0: 	movapd	0x30(%rsp), %xmm2
    000017c6: 	movapd	0x70(%rsp), %xmm3
    000017cc: 	movq	%rbp, %rax
    000017cf: 	pxor	%xmm1, %xmm1
    000017d3: 	movapd	0x90(%rsp), %xmm4
    000017dc: 	movapd	0x20(%rsp), %xmm5
    000017e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp810:
    000017e8: 	movapd	(%rax), %xmm0
    000017ec: 	addq	$0x10, %rax
    000017f0: 	addpd	%xmm5, %xmm0
    000017f4: 	addpd	%xmm3, %xmm0
    000017f8: 	addpd	%xmm4, %xmm0
    000017fc: 	addpd	%xmm2, %xmm0
    00001800: 	addpd	%xmm0, %xmm1
    00001804: 	cmpq	%rbx, %rax
    00001807: 	jne	.Ltmp810 # Offset: 6151
    00001809: 	movsd	0x10(%rsp), %xmm0
    0000180f: 	movapd	%xmm1, %xmm5
    00001813: 	unpckhpd	%xmm1, %xmm1
    00001817: 	addsd	init_value(%rip), %xmm0
    0000181f: 	addsd	0x60(%rsp), %xmm0
    00001825: 	addsd	0x50(%rsp), %xmm0
    0000182b: 	movapd	%xmm1, %xmm4
    0000182f: 	addsd	0x48(%rsp), %xmm0
    00001835: 	movsd	0x18(%rsp), %xmm2
    0000183b: 	movsd	(%rsp), %xmm1
    00001840: 	mulsd	%xmm0, %xmm2
    00001844: 	subsd	0xa0(%rsp), %xmm2
    0000184d: 	mulsd	%xmm0, %xmm1
    00001851: 	addsd	0xb8(%rsp), %xmm1
    0000185a: 	ucomisd	%xmm1, %xmm2
    0000185e: 	jp	.Ltmp811 # Offset: 6238
.Ltmp1079:
    00001864: 	subsd	%xmm2, %xmm5
    00001868: 	subsd	%xmm1, %xmm4
    0000186c: 	movapd	%xmm5, %xmm0
    00001870: 	movapd	%xmm4, %xmm1
    00001874: 	callq	cabs@PLT # Offset: 6260
    00001879: 	movsd	0x8(%rsp), %xmm6
    0000187f: 	comisd	%xmm0, %xmm6
    00001883: 	jbe	.Ltmp812 # Offset: 6275
.Ltmp1006:
    00001889: 	addl	$0x1, %r12d
    0000188d: 	cmpl	%r13d, %r12d
    00001890: 	jl	.Ltmp813 # Offset: 6288
.Ltmp809:
    00001896: 	movq	%r14, %rsi
    00001899: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000018a0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6304
    000018a5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000018ac: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000018b3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000018ba: 	je	.Ltmp814 # Offset: 6330
.Ltmp1040:
    000018c0: 	movq	-0x20(%rax), %r12
    000018c4: 	callq	clock@PLT # Offset: 6340
    000018c9: 	pxor	%xmm0, %xmm0
    000018cd: 	movq	%rax, end_time(%rip)
    000018d4: 	movq	%r12, %rdi
    000018d7: 	subq	start_time(%rip), %rax
    000018de: 	cvtsi2sd	%rax, %xmm0
    000018e3: 	divsd	DATAat0x2b628(%rip), %xmm0
    000018eb: 	callq	_Z13record_resultdPKc # Offset: 6379
    000018f0: 	movq	0x1e0(%rsp), %rdi
    000018f8: 	cmpq	0x88(%rsp), %rdi
    00001900: 	je	.Ltmp815 # Offset: 6400
    00001902: 	movq	0x1f0(%rsp), %rax
    0000190a: 	leaq	0x1(%rax), %rsi
    0000190e: 	callq	_ZdlPvm@PLT # Offset: 6414
.Ltmp815:
    00001913: 	movq	0xb0(%rsp), %rsi
    0000191b: 	leaq	DATAat0x2b38e(%rip), %rdx
    00001922: 	movq	%r14, %rdi
    00001925: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6437
    0000192a: 	callq	clock@PLT # Offset: 6442
    0000192f: 	movl	iterations(%rip), %r13d
    00001936: 	movq	%rax, start_time(%rip)
    0000193d: 	testl	%r13d, %r13d
    00001940: 	jle	.Ltmp816 # Offset: 6464
    00001946: 	pxor	%xmm7, %xmm7
    0000194a: 	movsd	0x40(%rsp), %xmm3
    00001950: 	xorl	%r12d, %r12d
    00001953: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000195a: 	movapd	%xmm7, %xmm6
    0000195e: 	movsd	%xmm7, (%rsp)
    00001963: 	subsd	%xmm3, %xmm6
    00001967: 	movsd	%xmm6, 0x90(%rsp)
    00001970: 	movapd	%xmm6, %xmm5
    00001974: 	mulsd	%xmm7, %xmm5
    00001978: 	movsd	DATAat0x2b648(%rip), %xmm7
    00001980: 	mulsd	%xmm7, %xmm6
    00001984: 	movsd	%xmm7, 0x18(%rsp)
    0000198a: 	movsd	%xmm5, 0x30(%rsp)
    00001990: 	movsd	%xmm6, 0x70(%rsp)
    00001996: 	movsd	DATAat0x2b658(%rip), %xmm6
    0000199e: 	movsd	%xmm6, 0x8(%rsp)
    000019a4: 	movsd	0x10(%rsp), %xmm6
    000019aa: 	unpcklpd	%xmm3, %xmm6
    000019ae: 	movaps	%xmm6, 0x20(%rsp)
    000019b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp820:
    000019b8: 	movapd	0x20(%rsp), %xmm2
    000019be: 	movq	%rbp, %rax
    000019c1: 	pxor	%xmm1, %xmm1
    000019c5: 	nopl	(%rax) # Size: 3
.Ltmp817:
    000019c8: 	movapd	(%rax), %xmm0
    000019cc: 	addq	$0x10, %rax
    000019d0: 	subpd	%xmm2, %xmm0
    000019d4: 	addpd	%xmm0, %xmm1
    000019d8: 	cmpq	%rax, %rbx
    000019db: 	jne	.Ltmp817 # Offset: 6619
    000019dd: 	movsd	init_value(%rip), %xmm5
    000019e5: 	movapd	%xmm1, %xmm6
    000019e9: 	unpckhpd	%xmm1, %xmm1
    000019ed: 	subsd	0x10(%rsp), %xmm5
    000019f3: 	movsd	0x18(%rsp), %xmm2
    000019f9: 	movapd	%xmm1, %xmm4
    000019fd: 	movsd	(%rsp), %xmm1
    00001a02: 	mulsd	%xmm5, %xmm2
    00001a06: 	mulsd	%xmm5, %xmm1
    00001a0a: 	subsd	0x30(%rsp), %xmm2
    00001a10: 	addsd	0x70(%rsp), %xmm1
    00001a16: 	ucomisd	%xmm2, %xmm1
    00001a1a: 	jp	.Ltmp818 # Offset: 6682
.Ltmp1077:
    00001a20: 	subsd	%xmm2, %xmm6
    00001a24: 	subsd	%xmm1, %xmm4
    00001a28: 	movapd	%xmm6, %xmm0
    00001a2c: 	movapd	%xmm4, %xmm1
    00001a30: 	callq	cabs@PLT # Offset: 6704
    00001a35: 	movsd	0x8(%rsp), %xmm6
    00001a3b: 	comisd	%xmm0, %xmm6
    00001a3f: 	jbe	.Ltmp819 # Offset: 6719
.Ltmp1005:
    00001a45: 	addl	$0x1, %r12d
    00001a49: 	cmpl	%r13d, %r12d
    00001a4c: 	jl	.Ltmp820 # Offset: 6732
.Ltmp816:
    00001a52: 	movq	%r14, %rsi
    00001a55: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a5c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6748
    00001a61: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a68: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001a6f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a76: 	je	.Ltmp821 # Offset: 6774
.Ltmp1039:
    00001a7c: 	movq	-0x20(%rax), %r12
    00001a80: 	callq	clock@PLT # Offset: 6784
    00001a85: 	pxor	%xmm0, %xmm0
    00001a89: 	movq	%rax, end_time(%rip)
    00001a90: 	movq	%r12, %rdi
    00001a93: 	subq	start_time(%rip), %rax
    00001a9a: 	cvtsi2sd	%rax, %xmm0
    00001a9f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001aa7: 	callq	_Z13record_resultdPKc # Offset: 6823
    00001aac: 	movq	0x1e0(%rsp), %rdi
    00001ab4: 	cmpq	0x88(%rsp), %rdi
    00001abc: 	je	.Ltmp822 # Offset: 6844
    00001abe: 	movq	0x1f0(%rsp), %rax
    00001ac6: 	leaq	0x1(%rax), %rsi
    00001aca: 	callq	_ZdlPvm@PLT # Offset: 6858
.Ltmp822:
    00001acf: 	movq	0xb0(%rsp), %rsi
    00001ad7: 	leaq	DATAat0x2b3a1(%rip), %rdx
    00001ade: 	movq	%r14, %rdi
    00001ae1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6881
    00001ae6: 	callq	clock@PLT # Offset: 6886
    00001aeb: 	movl	iterations(%rip), %r13d
    00001af2: 	movq	%rax, start_time(%rip)
    00001af9: 	testl	%r13d, %r13d
    00001afc: 	jle	.Ltmp823 # Offset: 6908
    00001b02: 	movsd	0x40(%rsp), %xmm1
    00001b08: 	pxor	%xmm7, %xmm7
    00001b0c: 	movsd	0x10(%rsp), %xmm0
    00001b12: 	xorl	%r12d, %r12d
    00001b15: 	movapd	%xmm7, %xmm6
    00001b19: 	movsd	%xmm7, (%rsp)
    00001b1e: 	addsd	0x80(%rsp), %xmm1
    00001b27: 	addsd	0x68(%rsp), %xmm1
    00001b2d: 	addsd	0x58(%rsp), %xmm1
    00001b33: 	addsd	0x60(%rsp), %xmm0
    00001b39: 	addsd	0x50(%rsp), %xmm0
    00001b3f: 	addsd	0x48(%rsp), %xmm0
    00001b45: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001b4c: 	subsd	%xmm1, %xmm6
    00001b50: 	movsd	%xmm0, 0x20(%rsp)
    00001b56: 	movsd	%xmm6, 0xb8(%rsp)
    00001b5f: 	movapd	%xmm6, %xmm5
    00001b63: 	mulsd	%xmm7, %xmm5
    00001b67: 	movsd	DATAat0x2b648(%rip), %xmm7
    00001b6f: 	mulsd	%xmm7, %xmm6
    00001b73: 	movsd	%xmm7, 0x18(%rsp)
    00001b79: 	movapd	%xmm1, %xmm7
    00001b7d: 	unpcklpd	%xmm7, %xmm7
    00001b81: 	movaps	%xmm7, 0xa0(%rsp)
    00001b89: 	movsd	%xmm5, 0x30(%rsp)
    00001b8f: 	movsd	DATAat0x2b658(%rip), %xmm5
    00001b97: 	movsd	%xmm6, 0x70(%rsp)
    00001b9d: 	movapd	%xmm0, %xmm6
    00001ba1: 	unpcklpd	%xmm6, %xmm6
    00001ba5: 	movsd	%xmm5, 0x8(%rsp)
    00001bab: 	movaps	%xmm6, 0x90(%rsp)
    00001bb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp827:
    00001bb8: 	movsd	(%rsp), %xmm4
    00001bbd: 	movq	%rbp, %rax
    00001bc0: 	movapd	0x90(%rsp), %xmm3
    00001bc9: 	movapd	0xa0(%rsp), %xmm6
    00001bd2: 	movapd	%xmm4, %xmm5
    00001bd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp824:
    00001be0: 	movapd	(%rax), %xmm1
    00001be4: 	movapd	0x10(%rax), %xmm0
    00001be9: 	addq	$0x20, %rax
    00001bed: 	movlpd	-0x18(%rax), %xmm0
    00001bf2: 	movhpd	-0x10(%rax), %xmm1
    00001bf7: 	subpd	%xmm3, %xmm1
    00001bfb: 	subpd	%xmm6, %xmm0
    00001bff: 	addsd	%xmm1, %xmm4
    00001c03: 	addsd	%xmm0, %xmm5
    00001c07: 	unpckhpd	%xmm1, %xmm1
    00001c0b: 	unpckhpd	%xmm0, %xmm0
    00001c0f: 	addsd	%xmm1, %xmm4
    00001c13: 	addsd	%xmm0, %xmm5
    00001c17: 	cmpq	%rax, %rbx
    00001c1a: 	jne	.Ltmp824 # Offset: 7194
    00001c1c: 	movsd	init_value(%rip), %xmm0
    00001c24: 	subsd	0x20(%rsp), %xmm0
    00001c2a: 	movsd	0x18(%rsp), %xmm2
    00001c30: 	movsd	(%rsp), %xmm1
    00001c35: 	mulsd	%xmm0, %xmm2
    00001c39: 	mulsd	%xmm0, %xmm1
    00001c3d: 	subsd	0x30(%rsp), %xmm2
    00001c43: 	addsd	0x70(%rsp), %xmm1
    00001c49: 	ucomisd	%xmm2, %xmm1
    00001c4d: 	jp	.Ltmp825 # Offset: 7245
.Ltmp1078:
    00001c53: 	subsd	%xmm2, %xmm4
    00001c57: 	subsd	%xmm1, %xmm5
    00001c5b: 	movapd	%xmm4, %xmm0
    00001c5f: 	movapd	%xmm5, %xmm1
    00001c63: 	callq	cabs@PLT # Offset: 7267
    00001c68: 	movsd	0x8(%rsp), %xmm6
    00001c6e: 	comisd	%xmm0, %xmm6
    00001c72: 	jbe	.Ltmp826 # Offset: 7282
.Ltmp1004:
    00001c78: 	addl	$0x1, %r12d
    00001c7c: 	cmpl	%r13d, %r12d
    00001c7f: 	jl	.Ltmp827 # Offset: 7295
.Ltmp823:
    00001c85: 	movq	%r14, %rsi
    00001c88: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001c8f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7311
    00001c94: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c9b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001ca2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001ca9: 	je	.Ltmp828 # Offset: 7337
.Ltmp1038:
    00001caf: 	movq	-0x20(%rax), %r12
    00001cb3: 	callq	clock@PLT # Offset: 7347
    00001cb8: 	pxor	%xmm0, %xmm0
    00001cbc: 	movq	%rax, end_time(%rip)
    00001cc3: 	movq	%r12, %rdi
    00001cc6: 	subq	start_time(%rip), %rax
    00001ccd: 	cvtsi2sd	%rax, %xmm0
    00001cd2: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001cda: 	callq	_Z13record_resultdPKc # Offset: 7386
    00001cdf: 	movq	0x1e0(%rsp), %rdi
    00001ce7: 	cmpq	0x88(%rsp), %rdi
    00001cef: 	je	.Ltmp829 # Offset: 7407
    00001cf1: 	movq	0x1f0(%rsp), %rax
    00001cf9: 	leaq	0x1(%rax), %rsi
    00001cfd: 	callq	_ZdlPvm@PLT # Offset: 7421
.Ltmp829:
    00001d02: 	movq	0xb0(%rsp), %rsi
    00001d0a: 	leaq	DATAat0x2b3be(%rip), %rdx
    00001d11: 	movq	%r14, %rdi
    00001d14: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7444
    00001d19: 	callq	clock@PLT # Offset: 7449
    00001d1e: 	movl	iterations(%rip), %r13d
    00001d25: 	movq	%rax, start_time(%rip)
    00001d2c: 	testl	%r13d, %r13d
    00001d2f: 	jle	.Ltmp830 # Offset: 7471
    00001d35: 	pxor	%xmm5, %xmm5
    00001d39: 	movsd	0x40(%rsp), %xmm3
    00001d3f: 	movsd	0x68(%rsp), %xmm2
    00001d45: 	xorl	%r12d, %r12d
    00001d48: 	movapd	%xmm5, %xmm0
    00001d4c: 	movsd	0x58(%rsp), %xmm1
    00001d52: 	movsd	0x80(%rsp), %xmm4
    00001d5b: 	movsd	%xmm5, (%rsp)
    00001d60: 	subsd	%xmm3, %xmm0
    00001d64: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001d6b: 	subsd	%xmm4, %xmm0
    00001d6f: 	subsd	%xmm2, %xmm0
    00001d73: 	subsd	%xmm1, %xmm0
    00001d77: 	movapd	%xmm0, %xmm7
    00001d7b: 	movapd	%xmm0, %xmm6
    00001d7f: 	movsd	%xmm0, 0xc8(%rsp)
    00001d88: 	mulsd	%xmm5, %xmm7
    00001d8c: 	movsd	DATAat0x2b648(%rip), %xmm5
    00001d94: 	mulsd	%xmm5, %xmm6
    00001d98: 	movsd	%xmm5, 0x18(%rsp)
    00001d9e: 	movsd	%xmm7, 0xa0(%rsp)
    00001da7: 	movsd	DATAat0x2b658(%rip), %xmm7
    00001daf: 	movsd	%xmm6, 0xb8(%rsp)
    00001db8: 	movsd	0x50(%rsp), %xmm6
    00001dbe: 	movsd	%xmm7, 0x8(%rsp)
    00001dc4: 	movsd	0x10(%rsp), %xmm7
    00001dca: 	unpcklpd	%xmm2, %xmm6
    00001dce: 	unpcklpd	%xmm3, %xmm7
    00001dd2: 	movaps	%xmm6, 0x90(%rsp)
    00001dda: 	movsd	0x48(%rsp), %xmm6
    00001de0: 	movaps	%xmm7, 0x20(%rsp)
    00001de5: 	movsd	0x60(%rsp), %xmm7
    00001deb: 	unpcklpd	%xmm1, %xmm6
    00001def: 	unpcklpd	%xmm4, %xmm7
    00001df3: 	movaps	%xmm6, 0x30(%rsp)
    00001df8: 	movaps	%xmm7, 0x70(%rsp)
    00001dfd: 	nopl	(%rax) # Size: 3
.Ltmp834:
    00001e00: 	movapd	0x30(%rsp), %xmm2
    00001e06: 	movapd	0x70(%rsp), %xmm3
    00001e0c: 	movq	%rbp, %rax
    00001e0f: 	pxor	%xmm1, %xmm1
    00001e13: 	movapd	0x90(%rsp), %xmm4
    00001e1c: 	movapd	0x20(%rsp), %xmm5
    00001e22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp831:
    00001e28: 	movapd	(%rax), %xmm0
    00001e2c: 	addq	$0x10, %rax
    00001e30: 	subpd	%xmm5, %xmm0
    00001e34: 	subpd	%xmm3, %xmm0
    00001e38: 	subpd	%xmm4, %xmm0
    00001e3c: 	subpd	%xmm2, %xmm0
    00001e40: 	addpd	%xmm0, %xmm1
    00001e44: 	cmpq	%rax, %rbx
    00001e47: 	jne	.Ltmp831 # Offset: 7751
    00001e49: 	movsd	init_value(%rip), %xmm0
    00001e51: 	movapd	%xmm1, %xmm5
    00001e55: 	unpckhpd	%xmm1, %xmm1
    00001e59: 	subsd	0x10(%rsp), %xmm0
    00001e5f: 	subsd	0x60(%rsp), %xmm0
    00001e65: 	subsd	0x50(%rsp), %xmm0
    00001e6b: 	movapd	%xmm1, %xmm4
    00001e6f: 	subsd	0x48(%rsp), %xmm0
    00001e75: 	movsd	0x18(%rsp), %xmm2
    00001e7b: 	movsd	(%rsp), %xmm1
    00001e80: 	mulsd	%xmm0, %xmm2
    00001e84: 	subsd	0xa0(%rsp), %xmm2
    00001e8d: 	mulsd	%xmm0, %xmm1
    00001e91: 	addsd	0xb8(%rsp), %xmm1
    00001e9a: 	ucomisd	%xmm2, %xmm1
    00001e9e: 	jp	.Ltmp832 # Offset: 7838
.Ltmp1067:
    00001ea4: 	subsd	%xmm2, %xmm5
    00001ea8: 	subsd	%xmm1, %xmm4
    00001eac: 	movapd	%xmm5, %xmm0
    00001eb0: 	movapd	%xmm4, %xmm1
    00001eb4: 	callq	cabs@PLT # Offset: 7860
    00001eb9: 	movsd	0x8(%rsp), %xmm7
    00001ebf: 	comisd	%xmm0, %xmm7
    00001ec3: 	jbe	.Ltmp833 # Offset: 7875
.Ltmp1003:
    00001ec9: 	addl	$0x1, %r12d
    00001ecd: 	cmpl	%r13d, %r12d
    00001ed0: 	jl	.Ltmp834 # Offset: 7888
.Ltmp830:
    00001ed6: 	movq	%r14, %rsi
    00001ed9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ee0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7904
    00001ee5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001eec: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001ef3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001efa: 	je	.Ltmp835 # Offset: 7930
.Ltmp1037:
    00001f00: 	movq	-0x20(%rax), %r12
    00001f04: 	callq	clock@PLT # Offset: 7940
    00001f09: 	pxor	%xmm0, %xmm0
    00001f0d: 	movq	%rax, end_time(%rip)
    00001f14: 	movq	%r12, %rdi
    00001f17: 	subq	start_time(%rip), %rax
    00001f1e: 	cvtsi2sd	%rax, %xmm0
    00001f23: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001f2b: 	callq	_Z13record_resultdPKc # Offset: 7979
    00001f30: 	movq	0x1e0(%rsp), %rdi
    00001f38: 	cmpq	0x88(%rsp), %rdi
    00001f40: 	je	.Ltmp836 # Offset: 8000
    00001f42: 	movq	0x1f0(%rsp), %rax
    00001f4a: 	leaq	0x1(%rax), %rsi
    00001f4e: 	callq	_ZdlPvm@PLT # Offset: 8014
.Ltmp836:
    00001f53: 	movq	0xb0(%rsp), %rsi
    00001f5b: 	leaq	DATAat0x2b3dc(%rip), %rdx
    00001f62: 	movq	%r14, %rdi
    00001f65: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8037
    00001f6a: 	callq	clock@PLT # Offset: 8042
    00001f6f: 	movl	iterations(%rip), %r13d
    00001f76: 	movq	%rax, start_time(%rip)
    00001f7d: 	testl	%r13d, %r13d
    00001f80: 	jle	.Ltmp837 # Offset: 8064
    00001f86: 	movsd	0x40(%rsp), %xmm6
    00001f8c: 	pxor	%xmm7, %xmm7
    00001f90: 	xorl	%r12d, %r12d
    00001f93: 	movsd	DATAat0x2b648(%rip), %xmm5
    00001f9b: 	movsd	%xmm7, (%rsp)
    00001fa0: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001fa7: 	mulsd	%xmm7, %xmm6
    00001fab: 	movsd	%xmm5, 0x18(%rsp)
    00001fb1: 	movsd	%xmm6, 0x30(%rsp)
    00001fb7: 	movsd	0x10(%rsp), %xmm6
    00001fbd: 	mulsd	%xmm7, %xmm6
    00001fc1: 	movsd	%xmm6, 0x20(%rsp)
    00001fc7: 	movsd	DATAat0x2b658(%rip), %xmm6
    00001fcf: 	movsd	%xmm6, 0x8(%rsp)
    00001fd5: 	nopl	(%rax) # Size: 3
.Ltmp843:
    00001fd8: 	movsd	(%rsp), %xmm5
    00001fdd: 	movsd	0x40(%rsp), %xmm3
    00001fe3: 	movq	%rbp, %rax
    00001fe6: 	movsd	0x10(%rsp), %xmm2
    00001fec: 	movapd	%xmm5, %xmm6
.Ltmp839:
    00001ff0: 	movsd	(%rax), %xmm7
    00001ff4: 	movsd	0x8(%rax), %xmm1
    00001ff9: 	movapd	%xmm2, %xmm4
    00001ffd: 	movapd	%xmm3, %xmm0
    00002001: 	movapd	%xmm3, %xmm8
    00002006: 	mulsd	%xmm1, %xmm0
    0000200a: 	mulsd	%xmm7, %xmm4
    0000200e: 	mulsd	%xmm7, %xmm8
    00002013: 	subsd	%xmm0, %xmm4
    00002017: 	movapd	%xmm2, %xmm0
    0000201b: 	mulsd	%xmm1, %xmm0
    0000201f: 	addsd	%xmm8, %xmm0
    00002024: 	ucomisd	%xmm4, %xmm0
    00002028: 	jp	.Ltmp838 # Offset: 8232
    0000202e: 	addq	$0x10, %rax
    00002032: 	addsd	%xmm4, %xmm5
    00002036: 	addsd	%xmm0, %xmm6
    0000203a: 	cmpq	%rax, %rbx
    0000203d: 	jne	.Ltmp839 # Offset: 8253
.Ltmp1059:
    0000203f: 	movsd	init_value(%rip), %xmm2
    00002047: 	movsd	0x10(%rsp), %xmm0
    0000204d: 	movsd	0x40(%rsp), %xmm1
    00002053: 	mulsd	%xmm2, %xmm0
    00002057: 	mulsd	%xmm2, %xmm1
    0000205b: 	subsd	0x30(%rsp), %xmm0
    00002061: 	addsd	0x20(%rsp), %xmm1
    00002067: 	ucomisd	%xmm1, %xmm0
    0000206b: 	jp	.Ltmp840 # Offset: 8299
.Ltmp1072:
    00002071: 	movsd	(%rsp), %xmm7
    00002076: 	movsd	0x18(%rsp), %xmm4
    0000207c: 	movapd	%xmm7, %xmm2
    00002080: 	movapd	%xmm4, %xmm3
    00002084: 	mulsd	%xmm1, %xmm2
    00002088: 	mulsd	%xmm0, %xmm3
    0000208c: 	mulsd	%xmm0, %xmm7
    00002090: 	mulsd	%xmm1, %xmm4
    00002094: 	subsd	%xmm2, %xmm3
    00002098: 	movapd	%xmm7, %xmm2
    0000209c: 	addsd	%xmm4, %xmm2
    000020a0: 	ucomisd	%xmm2, %xmm3
    000020a4: 	jp	.Ltmp841 # Offset: 8356
.Ltmp1071:
    000020aa: 	subsd	%xmm2, %xmm6
    000020ae: 	subsd	%xmm3, %xmm5
    000020b2: 	movapd	%xmm6, %xmm1
    000020b6: 	movapd	%xmm5, %xmm0
    000020ba: 	callq	cabs@PLT # Offset: 8378
    000020bf: 	movsd	0x8(%rsp), %xmm6
    000020c5: 	comisd	%xmm0, %xmm6
    000020c9: 	jbe	.Ltmp842 # Offset: 8393
.Ltmp1002:
    000020cf: 	addl	$0x1, %r12d
    000020d3: 	cmpl	%r13d, %r12d
    000020d6: 	jl	.Ltmp843 # Offset: 8406
.Ltmp837:
    000020dc: 	movq	%r14, %rsi
    000020df: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000020e6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8422
    000020eb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000020f2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000020f9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002100: 	je	.Ltmp844 # Offset: 8448
.Ltmp1036:
    00002106: 	movq	-0x20(%rax), %r12
    0000210a: 	callq	clock@PLT # Offset: 8458
    0000210f: 	pxor	%xmm0, %xmm0
    00002113: 	movq	%rax, end_time(%rip)
    0000211a: 	movq	%r12, %rdi
    0000211d: 	subq	start_time(%rip), %rax
    00002124: 	cvtsi2sd	%rax, %xmm0
    00002129: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002131: 	callq	_Z13record_resultdPKc # Offset: 8497
    00002136: 	movq	0x1e0(%rsp), %rdi
    0000213e: 	cmpq	0x88(%rsp), %rdi
    00002146: 	je	.Ltmp845 # Offset: 8518
    00002148: 	movq	0x1f0(%rsp), %rax
    00002150: 	leaq	0x1(%rax), %rsi
    00002154: 	callq	_ZdlPvm@PLT # Offset: 8532
.Ltmp845:
    00002159: 	movq	0xb0(%rsp), %rsi
    00002161: 	leaq	DATAat0x2b3ef(%rip), %rdx
    00002168: 	movq	%r14, %rdi
    0000216b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8555
    00002170: 	callq	clock@PLT # Offset: 8560
    00002175: 	movl	iterations(%rip), %r13d
    0000217c: 	movq	%rax, start_time(%rip)
    00002183: 	testl	%r13d, %r13d
    00002186: 	jle	.Ltmp846 # Offset: 8582
    0000218c: 	movsd	0x40(%rsp), %xmm7
    00002192: 	movsd	0x10(%rsp), %xmm5
    00002198: 	xorl	%r12d, %r12d
    0000219b: 	leaq	DATAat0x2b1d0(%rip), %r15
    000021a2: 	movsd	0x80(%rsp), %xmm6
    000021ab: 	movsd	0x60(%rsp), %xmm3
    000021b1: 	movapd	%xmm7, %xmm1
    000021b5: 	movapd	%xmm5, %xmm0
    000021b9: 	mulsd	%xmm6, %xmm1
    000021bd: 	mulsd	%xmm3, %xmm0
    000021c1: 	mulsd	%xmm6, %xmm5
    000021c5: 	movsd	DATAat0x2b658(%rip), %xmm6
    000021cd: 	mulsd	%xmm3, %xmm7
    000021d1: 	movsd	%xmm6, 0x8(%rsp)
    000021d7: 	subsd	%xmm1, %xmm0
    000021db: 	movsd	%xmm0, 0x20(%rsp)
    000021e1: 	movapd	%xmm5, %xmm0
    000021e5: 	movsd	DATAat0x2b648(%rip), %xmm5
    000021ed: 	addsd	%xmm7, %xmm0
    000021f1: 	pxor	%xmm7, %xmm7
    000021f5: 	movsd	%xmm7, (%rsp)
    000021fa: 	movsd	%xmm5, 0x18(%rsp)
    00002200: 	movsd	%xmm0, 0x30(%rsp)
    00002206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp855:
    00002210: 	movsd	(%rsp), %xmm8
    00002216: 	movsd	0x50(%rsp), %xmm10
    0000221d: 	movq	%rbp, %rax
    00002220: 	movsd	0x58(%rsp), %xmm11
    00002227: 	movsd	0x48(%rsp), %xmm12
    0000222e: 	movsd	0x68(%rsp), %xmm13
    00002235: 	movsd	0x20(%rsp), %xmm14
    0000223c: 	movapd	%xmm8, %xmm9
    00002241: 	movsd	0x30(%rsp), %xmm15
    00002248: 	nopl	(%rax,%rax) # Size: 8
.Ltmp851:
    00002250: 	ucomisd	%xmm15, %xmm14
    00002255: 	movsd	(%rax), %xmm6
    00002259: 	movsd	0x8(%rax), %xmm7
    0000225e: 	jp	.Ltmp847 # Offset: 8798
    00002264: 	movapd	%xmm15, %xmm3
    00002269: 	movapd	%xmm14, %xmm2
.Ltmp1062:
    0000226e: 	movapd	%xmm13, %xmm1
    00002273: 	movapd	%xmm10, %xmm0
    00002278: 	movapd	%xmm10, %xmm4
    0000227d: 	mulsd	%xmm3, %xmm1
    00002281: 	mulsd	%xmm2, %xmm0
    00002285: 	mulsd	%xmm3, %xmm4
    00002289: 	subsd	%xmm1, %xmm0
    0000228d: 	movapd	%xmm13, %xmm1
    00002292: 	mulsd	%xmm2, %xmm1
    00002296: 	addsd	%xmm4, %xmm1
    0000229a: 	ucomisd	%xmm0, %xmm1
    0000229e: 	jp	.Ltmp848 # Offset: 8862
.Ltmp1061:
    000022a4: 	movapd	%xmm11, %xmm2
    000022a9: 	movapd	%xmm12, %xmm4
    000022ae: 	movapd	%xmm11, %xmm5
    000022b3: 	mulsd	%xmm1, %xmm2
    000022b7: 	mulsd	%xmm0, %xmm4
    000022bb: 	mulsd	%xmm0, %xmm5
    000022bf: 	subsd	%xmm2, %xmm4
    000022c3: 	movapd	%xmm12, %xmm2
    000022c8: 	mulsd	%xmm1, %xmm2
    000022cc: 	addsd	%xmm2, %xmm5
    000022d0: 	ucomisd	%xmm4, %xmm5
    000022d4: 	jp	.Ltmp849 # Offset: 8916
.Ltmp1064:
    000022da: 	movapd	%xmm5, %xmm0
    000022de: 	movapd	%xmm4, %xmm1
    000022e2: 	movapd	%xmm5, %xmm2
    000022e6: 	mulsd	%xmm7, %xmm0
    000022ea: 	mulsd	%xmm6, %xmm1
    000022ee: 	mulsd	%xmm6, %xmm2
    000022f2: 	subsd	%xmm0, %xmm1
    000022f6: 	movapd	%xmm4, %xmm0
    000022fa: 	mulsd	%xmm7, %xmm0
    000022fe: 	addsd	%xmm2, %xmm0
    00002302: 	ucomisd	%xmm1, %xmm0
    00002306: 	jp	.Ltmp850 # Offset: 8966
    0000230c: 	addq	$0x10, %rax
    00002310: 	addsd	%xmm1, %xmm8
    00002315: 	addsd	%xmm0, %xmm9
    0000231a: 	cmpq	%rbx, %rax
    0000231d: 	jne	.Ltmp851 # Offset: 8989
.Ltmp1063:
    00002323: 	movsd	init_value(%rip), %xmm2
    0000232b: 	movsd	(%rsp), %xmm7
    00002330: 	movapd	%xmm2, %xmm6
    00002334: 	movapd	%xmm7, %xmm0
    00002338: 	mulsd	%xmm5, %xmm0
    0000233c: 	mulsd	%xmm4, %xmm6
    00002340: 	mulsd	%xmm4, %xmm7
    00002344: 	subsd	%xmm0, %xmm6
    00002348: 	movapd	%xmm2, %xmm0
    0000234c: 	mulsd	%xmm5, %xmm0
    00002350: 	movapd	%xmm7, %xmm1
    00002354: 	addsd	%xmm0, %xmm1
    00002358: 	ucomisd	%xmm1, %xmm6
    0000235c: 	jp	.Ltmp852 # Offset: 9052
.Ltmp1066:
    00002362: 	movsd	(%rsp), %xmm7
    00002367: 	movsd	0x18(%rsp), %xmm5
    0000236d: 	movapd	%xmm7, %xmm2
    00002371: 	movapd	%xmm5, %xmm0
    00002375: 	mulsd	%xmm1, %xmm2
    00002379: 	mulsd	%xmm6, %xmm0
    0000237d: 	mulsd	%xmm6, %xmm7
    00002381: 	mulsd	%xmm1, %xmm5
    00002385: 	subsd	%xmm2, %xmm0
    00002389: 	movapd	%xmm7, %xmm2
    0000238d: 	addsd	%xmm5, %xmm2
    00002391: 	ucomisd	%xmm2, %xmm0
    00002395: 	jp	.Ltmp853 # Offset: 9109
.Ltmp1065:
    0000239b: 	subsd	%xmm0, %xmm8
    000023a0: 	movapd	%xmm9, %xmm1
    000023a5: 	subsd	%xmm2, %xmm1
    000023a9: 	movapd	%xmm8, %xmm0
    000023ae: 	callq	cabs@PLT # Offset: 9134
    000023b3: 	movsd	0x8(%rsp), %xmm6
    000023b9: 	comisd	%xmm0, %xmm6
    000023bd: 	jbe	.Ltmp854 # Offset: 9149
.Ltmp1001:
    000023c3: 	addl	$0x1, %r12d
    000023c7: 	cmpl	%r13d, %r12d
    000023ca: 	jl	.Ltmp855 # Offset: 9162
.Ltmp846:
    000023d0: 	movq	%r14, %rsi
    000023d3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000023da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9178
    000023df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000023e6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000023ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000023f4: 	je	.Ltmp856 # Offset: 9204
.Ltmp1035:
    000023fa: 	movq	-0x20(%rax), %r12
    000023fe: 	callq	clock@PLT # Offset: 9214
    00002403: 	pxor	%xmm0, %xmm0
    00002407: 	movq	%rax, end_time(%rip)
    0000240e: 	movq	%r12, %rdi
    00002411: 	subq	start_time(%rip), %rax
    00002418: 	cvtsi2sd	%rax, %xmm0
    0000241d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002425: 	callq	_Z13record_resultdPKc # Offset: 9253
    0000242a: 	movq	0x1e0(%rsp), %rdi
    00002432: 	cmpq	0x88(%rsp), %rdi
    0000243a: 	je	.Ltmp857 # Offset: 9274
    0000243c: 	movq	0x1f0(%rsp), %rax
    00002444: 	leaq	0x1(%rax), %rsi
    00002448: 	callq	_ZdlPvm@PLT # Offset: 9288
.Ltmp857:
    0000244d: 	movq	0xb0(%rsp), %rsi
    00002455: 	leaq	DATAat0x2b590(%rip), %rdx
    0000245c: 	movq	%r14, %rdi
    0000245f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9311
    00002464: 	callq	clock@PLT # Offset: 9316
    00002469: 	movl	iterations(%rip), %r13d
    00002470: 	movq	%rax, start_time(%rip)
    00002477: 	testl	%r13d, %r13d
    0000247a: 	jle	.Ltmp858 # Offset: 9338
    00002480: 	movsd	0x40(%rsp), %xmm6
    00002486: 	movsd	0x10(%rsp), %xmm7
    0000248c: 	xorl	%r12d, %r12d
    0000248f: 	movsd	0x80(%rsp), %xmm5
    00002498: 	movsd	0x60(%rsp), %xmm3
    0000249e: 	movapd	%xmm6, %xmm1
    000024a2: 	movapd	%xmm7, %xmm0
    000024a6: 	mulsd	%xmm5, %xmm1
    000024aa: 	mulsd	%xmm3, %xmm0
    000024ae: 	mulsd	%xmm5, %xmm7
    000024b2: 	movsd	DATAat0x2b648(%rip), %xmm5
    000024ba: 	mulsd	%xmm3, %xmm6
    000024be: 	movsd	%xmm5, 0x18(%rsp)
    000024c4: 	subsd	%xmm1, %xmm0
    000024c8: 	movsd	%xmm0, 0x20(%rsp)
    000024ce: 	movapd	%xmm7, %xmm0
    000024d2: 	pxor	%xmm7, %xmm7
    000024d6: 	addsd	%xmm6, %xmm0
    000024da: 	movsd	DATAat0x2b658(%rip), %xmm6
    000024e2: 	movsd	%xmm7, (%rsp)
    000024e7: 	movsd	%xmm6, 0x8(%rsp)
    000024ed: 	movsd	%xmm0, 0x30(%rsp)
    000024f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp865:
    000024f8: 	movsd	0x20(%rsp), %xmm5
    000024fe: 	movsd	0x30(%rsp), %xmm4
    00002504: 	ucomisd	%xmm4, %xmm5
    00002508: 	jp	.Ltmp859 # Offset: 9480
    0000250e: 	movsd	0x68(%rsp), %xmm6
    00002514: 	movsd	0x50(%rsp), %xmm7
    0000251a: 	movq	%rbp, %r15
    0000251d: 	movsd	0x58(%rsp), %xmm10
    00002524: 	movsd	0x48(%rsp), %xmm11
    0000252b: 	movapd	%xmm6, %xmm0
    0000252f: 	movapd	%xmm7, %xmm9
    00002534: 	mulsd	%xmm5, %xmm6
    00002538: 	mulsd	%xmm4, %xmm0
    0000253c: 	mulsd	%xmm5, %xmm9
    00002541: 	mulsd	%xmm4, %xmm7
    00002545: 	movapd	%xmm6, %xmm8
    0000254a: 	movsd	(%rsp), %xmm6
    0000254f: 	subsd	%xmm0, %xmm9
    00002554: 	addsd	%xmm7, %xmm8
    00002559: 	movapd	%xmm6, %xmm7
    0000255d: 	nopl	(%rax) # Size: 3
.Ltmp862:
    00002560: 	ucomisd	%xmm9, %xmm8
    00002565: 	movsd	(%r15), %xmm5
    0000256a: 	movsd	0x8(%r15), %xmm4
    00002570: 	jp	.Ltmp860 # Offset: 9584
    00002576: 	movapd	%xmm8, %xmm3
    0000257b: 	movapd	%xmm9, %xmm2
.Ltmp1060:
    00002580: 	movapd	%xmm10, %xmm1
    00002585: 	movapd	%xmm11, %xmm0
    0000258a: 	movapd	%xmm11, %xmm12
    0000258f: 	mulsd	%xmm3, %xmm1
    00002593: 	mulsd	%xmm2, %xmm0
    00002597: 	mulsd	%xmm3, %xmm12
    0000259c: 	subsd	%xmm1, %xmm0
    000025a0: 	movapd	%xmm10, %xmm1
    000025a5: 	mulsd	%xmm2, %xmm1
    000025a9: 	addsd	%xmm12, %xmm1
    000025ae: 	ucomisd	%xmm0, %xmm1
    000025b2: 	jp	.Ltmp861 # Offset: 9650
    000025b8: 	addsd	%xmm0, %xmm5
    000025bc: 	addsd	%xmm1, %xmm4
    000025c0: 	addq	$0x10, %r15
    000025c4: 	addsd	%xmm5, %xmm6
    000025c8: 	addsd	%xmm4, %xmm7
    000025cc: 	cmpq	%rbx, %r15
    000025cf: 	jne	.Ltmp862 # Offset: 9679
.Ltmp1053:
    000025d1: 	movsd	(%rsp), %xmm5
    000025d6: 	addsd	init_value(%rip), %xmm0
    000025de: 	movsd	0x18(%rsp), %xmm4
    000025e4: 	addsd	%xmm5, %xmm1
    000025e8: 	movapd	%xmm5, %xmm2
    000025ec: 	mulsd	%xmm0, %xmm5
    000025f0: 	movapd	%xmm4, %xmm3
    000025f4: 	mulsd	%xmm0, %xmm3
    000025f8: 	mulsd	%xmm1, %xmm2
    000025fc: 	mulsd	%xmm1, %xmm4
    00002600: 	subsd	%xmm2, %xmm3
    00002604: 	movapd	%xmm5, %xmm2
    00002608: 	addsd	%xmm4, %xmm2
    0000260c: 	ucomisd	%xmm2, %xmm3
    00002610: 	jp	.Ltmp863 # Offset: 9744
.Ltmp1093:
    00002616: 	subsd	%xmm3, %xmm6
    0000261a: 	subsd	%xmm2, %xmm7
    0000261e: 	movapd	%xmm6, %xmm0
    00002622: 	movapd	%xmm7, %xmm1
    00002626: 	callq	cabs@PLT # Offset: 9766
    0000262b: 	movsd	0x8(%rsp), %xmm6
    00002631: 	comisd	%xmm0, %xmm6
    00002635: 	jbe	.Ltmp864 # Offset: 9781
.Ltmp1000:
    0000263b: 	addl	$0x1, %r12d
    0000263f: 	cmpl	%r13d, %r12d
    00002642: 	jl	.Ltmp865 # Offset: 9794
.Ltmp858:
    00002648: 	movq	%r14, %rsi
    0000264b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002652: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9810
    00002657: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000265e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002665: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000266c: 	je	.Ltmp866 # Offset: 9836
.Ltmp1034:
    00002672: 	movq	-0x20(%rax), %r12
    00002676: 	callq	clock@PLT # Offset: 9846
    0000267b: 	pxor	%xmm0, %xmm0
    0000267f: 	movq	%rax, end_time(%rip)
    00002686: 	movq	%r12, %rdi
    00002689: 	subq	start_time(%rip), %rax
    00002690: 	cvtsi2sd	%rax, %xmm0
    00002695: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000269d: 	callq	_Z13record_resultdPKc # Offset: 9885
    000026a2: 	movq	0x1e0(%rsp), %rdi
    000026aa: 	cmpq	0x88(%rsp), %rdi
    000026b2: 	je	.Ltmp867 # Offset: 9906
    000026b4: 	movq	0x1f0(%rsp), %rax
    000026bc: 	leaq	0x1(%rax), %rsi
    000026c0: 	callq	_ZdlPvm@PLT # Offset: 9920
.Ltmp867:
    000026c5: 	movq	0xb0(%rsp), %rsi
    000026cd: 	leaq	DATAat0x2b5b0(%rip), %rdx
    000026d4: 	movq	%r14, %rdi
    000026d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9943
    000026dc: 	callq	clock@PLT # Offset: 9948
    000026e1: 	movl	iterations(%rip), %r13d
    000026e8: 	movq	%rax, start_time(%rip)
    000026ef: 	testl	%r13d, %r13d
    000026f2: 	jle	.Ltmp868 # Offset: 9970
    000026f8: 	movsd	0x40(%rsp), %xmm7
    000026fe: 	pxor	%xmm6, %xmm6
    00002702: 	xorl	%r12d, %r12d
    00002705: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000270c: 	movsd	%xmm6, (%rsp)
    00002711: 	mulsd	%xmm6, %xmm7
    00002715: 	movsd	%xmm7, 0x20(%rsp)
    0000271b: 	movsd	0x10(%rsp), %xmm7
    00002721: 	mulsd	%xmm6, %xmm7
    00002725: 	movsd	DATAat0x2b648(%rip), %xmm6
    0000272d: 	movsd	%xmm6, 0x18(%rsp)
    00002733: 	movsd	%xmm7, 0x30(%rsp)
    00002739: 	movsd	DATAat0x2b658(%rip), %xmm7
    00002741: 	movsd	%xmm7, 0x8(%rsp)
    00002747: 	nopw	(%rax,%rax) # Size: 9
.Ltmp880:
    00002750: 	movsd	(%rsp), %xmm4
    00002755: 	movsd	0x40(%rsp), %xmm6
    0000275b: 	movq	%rbp, %rax
    0000275e: 	movsd	0x50(%rsp), %xmm7
    00002764: 	movsd	0x58(%rsp), %xmm9
    0000276b: 	movsd	0x80(%rsp), %xmm8
    00002775: 	movsd	0x60(%rsp), %xmm10
    0000277c: 	movapd	%xmm4, %xmm5
    00002780: 	movsd	0x48(%rsp), %xmm11
    00002787: 	movsd	0x68(%rsp), %xmm12
    0000278e: 	movsd	0x10(%rsp), %xmm13
    00002795: 	nopl	(%rax) # Size: 3
.Ltmp873:
    00002798: 	movsd	(%rax), %xmm15
    0000279d: 	movsd	0x8(%rax), %xmm1
    000027a2: 	movapd	%xmm13, %xmm0
    000027a7: 	movapd	%xmm6, %xmm2
    000027ab: 	movapd	%xmm13, %xmm14
    000027b0: 	mulsd	%xmm1, %xmm2
    000027b4: 	mulsd	%xmm15, %xmm0
    000027b9: 	mulsd	%xmm1, %xmm14
    000027be: 	subsd	%xmm2, %xmm0
    000027c2: 	movapd	%xmm6, %xmm2
    000027c6: 	mulsd	%xmm15, %xmm2
    000027cb: 	addsd	%xmm2, %xmm14
    000027d0: 	ucomisd	%xmm0, %xmm14
    000027d5: 	jp	.Ltmp869 # Offset: 10197
.Ltmp1057:
    000027db: 	movapd	%xmm8, %xmm1
    000027e0: 	movapd	%xmm10, %xmm2
    000027e5: 	movapd	%xmm8, %xmm3
    000027ea: 	mulsd	%xmm14, %xmm1
    000027ef: 	mulsd	%xmm0, %xmm2
    000027f3: 	mulsd	%xmm0, %xmm3
    000027f7: 	subsd	%xmm1, %xmm2
    000027fb: 	movapd	%xmm10, %xmm1
    00002800: 	mulsd	%xmm14, %xmm1
    00002805: 	addsd	%xmm1, %xmm3
    00002809: 	ucomisd	%xmm2, %xmm3
    0000280d: 	jp	.Ltmp870 # Offset: 10253
.Ltmp1056:
    00002813: 	movapd	%xmm12, %xmm1
    00002818: 	movapd	%xmm7, %xmm0
    0000281c: 	movapd	%xmm7, %xmm14
    00002821: 	mulsd	%xmm3, %xmm1
    00002825: 	mulsd	%xmm2, %xmm0
    00002829: 	mulsd	%xmm3, %xmm14
    0000282e: 	subsd	%xmm1, %xmm0
    00002832: 	movapd	%xmm12, %xmm1
    00002837: 	mulsd	%xmm2, %xmm1
    0000283b: 	addsd	%xmm14, %xmm1
    00002840: 	ucomisd	%xmm0, %xmm1
    00002844: 	jp	.Ltmp871 # Offset: 10308
.Ltmp1055:
    0000284a: 	movapd	%xmm9, %xmm2
    0000284f: 	movapd	%xmm11, %xmm3
    00002854: 	movapd	%xmm11, %xmm14
    00002859: 	mulsd	%xmm1, %xmm2
    0000285d: 	mulsd	%xmm0, %xmm3
    00002861: 	mulsd	%xmm1, %xmm14
    00002866: 	subsd	%xmm2, %xmm3
    0000286a: 	movapd	%xmm9, %xmm2
    0000286f: 	mulsd	%xmm0, %xmm2
    00002873: 	addsd	%xmm14, %xmm2
    00002878: 	ucomisd	%xmm3, %xmm2
    0000287c: 	jp	.Ltmp872 # Offset: 10364
    00002882: 	addq	$0x10, %rax
    00002886: 	addsd	%xmm3, %xmm4
    0000288a: 	addsd	%xmm2, %xmm5
    0000288e: 	cmpq	%rax, %rbx
    00002891: 	jne	.Ltmp873 # Offset: 10385
.Ltmp1054:
    00002897: 	movsd	init_value(%rip), %xmm0
    0000289f: 	movsd	0x10(%rsp), %xmm2
    000028a5: 	movsd	0x40(%rsp), %xmm3
    000028ab: 	mulsd	%xmm0, %xmm2
    000028af: 	mulsd	%xmm0, %xmm3
    000028b3: 	subsd	0x20(%rsp), %xmm2
    000028b9: 	addsd	0x30(%rsp), %xmm3
    000028bf: 	ucomisd	%xmm3, %xmm2
    000028c3: 	jp	.Ltmp874 # Offset: 10435
.Ltmp1076:
    000028c9: 	movsd	0x80(%rsp), %xmm6
    000028d2: 	movsd	0x60(%rsp), %xmm7
    000028d8: 	movapd	%xmm6, %xmm1
    000028dc: 	movapd	%xmm7, %xmm0
    000028e0: 	mulsd	%xmm3, %xmm1
    000028e4: 	mulsd	%xmm2, %xmm0
    000028e8: 	mulsd	%xmm3, %xmm7
    000028ec: 	mulsd	%xmm2, %xmm6
    000028f0: 	subsd	%xmm1, %xmm0
    000028f4: 	movapd	%xmm7, %xmm1
    000028f8: 	addsd	%xmm6, %xmm1
    000028fc: 	ucomisd	%xmm1, %xmm0
    00002900: 	jp	.Ltmp875 # Offset: 10496
.Ltmp1075:
    00002906: 	movsd	0x68(%rsp), %xmm6
    0000290c: 	movsd	0x50(%rsp), %xmm7
    00002912: 	movapd	%xmm6, %xmm3
    00002916: 	movapd	%xmm7, %xmm2
    0000291a: 	mulsd	%xmm1, %xmm3
    0000291e: 	mulsd	%xmm0, %xmm2
    00002922: 	mulsd	%xmm1, %xmm7
    00002926: 	mulsd	%xmm0, %xmm6
    0000292a: 	subsd	%xmm3, %xmm2
    0000292e: 	movapd	%xmm7, %xmm3
    00002932: 	addsd	%xmm6, %xmm3
    00002936: 	ucomisd	%xmm3, %xmm2
    0000293a: 	jp	.Ltmp876 # Offset: 10554
.Ltmp1074:
    00002940: 	movsd	0x58(%rsp), %xmm6
    00002946: 	movsd	0x48(%rsp), %xmm7
    0000294c: 	movapd	%xmm6, %xmm1
    00002950: 	movapd	%xmm7, %xmm0
    00002954: 	mulsd	%xmm3, %xmm1
    00002958: 	mulsd	%xmm2, %xmm0
    0000295c: 	mulsd	%xmm3, %xmm7
    00002960: 	mulsd	%xmm2, %xmm6
    00002964: 	subsd	%xmm1, %xmm0
    00002968: 	movapd	%xmm7, %xmm1
    0000296c: 	addsd	%xmm6, %xmm1
    00002970: 	ucomisd	%xmm1, %xmm0
    00002974: 	jp	.Ltmp877 # Offset: 10612
.Ltmp1073:
    0000297a: 	movsd	(%rsp), %xmm7
    0000297f: 	movsd	0x18(%rsp), %xmm6
    00002985: 	movapd	%xmm7, %xmm2
    00002989: 	movapd	%xmm6, %xmm3
    0000298d: 	mulsd	%xmm1, %xmm2
    00002991: 	mulsd	%xmm0, %xmm3
    00002995: 	mulsd	%xmm0, %xmm7
    00002999: 	mulsd	%xmm1, %xmm6
    0000299d: 	subsd	%xmm2, %xmm3
    000029a1: 	movapd	%xmm7, %xmm2
    000029a5: 	addsd	%xmm6, %xmm2
    000029a9: 	ucomisd	%xmm2, %xmm3
    000029ad: 	jp	.Ltmp878 # Offset: 10669
.Ltmp1081:
    000029b3: 	subsd	%xmm3, %xmm4
    000029b7: 	subsd	%xmm2, %xmm5
    000029bb: 	movapd	%xmm4, %xmm0
    000029bf: 	movapd	%xmm5, %xmm1
    000029c3: 	callq	cabs@PLT # Offset: 10691
    000029c8: 	movsd	0x8(%rsp), %xmm7
    000029ce: 	comisd	%xmm0, %xmm7
    000029d2: 	jbe	.Ltmp879 # Offset: 10706
.Ltmp999:
    000029d8: 	addl	$0x1, %r12d
    000029dc: 	cmpl	%r13d, %r12d
    000029df: 	jl	.Ltmp880 # Offset: 10719
.Ltmp868:
    000029e5: 	movq	%r14, %rsi
    000029e8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000029ef: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10735
    000029f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000029fb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002a02: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002a09: 	je	.Ltmp881 # Offset: 10761
.Ltmp1033:
    00002a0f: 	movq	-0x20(%rax), %r12
    00002a13: 	callq	clock@PLT # Offset: 10771
    00002a18: 	pxor	%xmm0, %xmm0
    00002a1c: 	movq	%rax, end_time(%rip)
    00002a23: 	movq	%r12, %rdi
    00002a26: 	subq	start_time(%rip), %rax
    00002a2d: 	cvtsi2sd	%rax, %xmm0
    00002a32: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002a3a: 	callq	_Z13record_resultdPKc # Offset: 10810
    00002a3f: 	movq	0x1e0(%rsp), %rdi
    00002a47: 	cmpq	0x88(%rsp), %rdi
    00002a4f: 	je	.Ltmp882 # Offset: 10831
    00002a51: 	movq	0x1f0(%rsp), %rax
    00002a59: 	leaq	0x1(%rax), %rsi
    00002a5d: 	callq	_ZdlPvm@PLT # Offset: 10845
.Ltmp882:
    00002a62: 	movq	0xb0(%rsp), %rsi
    00002a6a: 	leaq	DATAat0x2b40d(%rip), %rdx
    00002a71: 	movq	%r14, %rdi
    00002a74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10868
    00002a79: 	callq	clock@PLT # Offset: 10873
    00002a7e: 	movl	iterations(%rip), %r13d
    00002a85: 	movq	%rax, start_time(%rip)
    00002a8c: 	testl	%r13d, %r13d
    00002a8f: 	jle	.Ltmp883 # Offset: 10895
    00002a95: 	movsd	DATAat0x2b658(%rip), %xmm7
    00002a9d: 	movsd	DATAat0x2b648(%rip), %xmm6
    00002aa5: 	pxor	%xmm5, %xmm5
    00002aa9: 	xorl	%r12d, %r12d
    00002aac: 	movsd	%xmm5, (%rsp)
    00002ab1: 	movsd	%xmm7, 0x8(%rsp)
    00002ab7: 	movsd	%xmm6, 0x18(%rsp)
    00002abd: 	nopl	(%rax) # Size: 3
.Ltmp887:
    00002ac0: 	movsd	(%rsp), %xmm6
    00002ac5: 	movq	%rbp, %r15
    00002ac8: 	movsd	%xmm6, 0x30(%rsp)
    00002ace: 	movsd	%xmm6, 0x20(%rsp)
    00002ad4: 	nopl	(%rax) # Size: 4
.Ltmp884:
    00002ad8: 	movsd	0x8(%r15), %xmm1
    00002ade: 	movsd	(%r15), %xmm0
    00002ae3: 	addq	$0x10, %r15
    00002ae7: 	movsd	0x40(%rsp), %xmm3
    00002aed: 	movsd	0x10(%rsp), %xmm2
    00002af3: 	callq	__divdc3@PLT # Offset: 10995
    00002af8: 	addsd	0x20(%rsp), %xmm0
    00002afe: 	addsd	0x30(%rsp), %xmm1
    00002b04: 	movsd	%xmm0, 0x20(%rsp)
    00002b0a: 	movsd	%xmm1, 0x30(%rsp)
    00002b10: 	cmpq	%rbx, %r15
    00002b13: 	jne	.Ltmp884 # Offset: 11027
    00002b15: 	movsd	0x40(%rsp), %xmm3
    00002b1b: 	movsd	init_value(%rip), %xmm0
    00002b23: 	pxor	%xmm1, %xmm1
    00002b27: 	movsd	0x10(%rsp), %xmm2
    00002b2d: 	callq	__divdc3@PLT # Offset: 11053
    00002b32: 	movsd	0x18(%rsp), %xmm6
    00002b38: 	movsd	(%rsp), %xmm7
    00002b3d: 	movapd	%xmm6, %xmm3
    00002b41: 	movapd	%xmm7, %xmm2
    00002b45: 	mulsd	%xmm1, %xmm2
    00002b49: 	mulsd	%xmm0, %xmm3
    00002b4d: 	mulsd	%xmm0, %xmm7
    00002b51: 	mulsd	%xmm1, %xmm6
    00002b55: 	subsd	%xmm2, %xmm3
    00002b59: 	movapd	%xmm7, %xmm2
    00002b5d: 	addsd	%xmm6, %xmm2
    00002b61: 	ucomisd	%xmm2, %xmm3
    00002b65: 	jp	.Ltmp885 # Offset: 11109
.Ltmp1100:
    00002b6b: 	movsd	0x20(%rsp), %xmm0
    00002b71: 	movsd	0x30(%rsp), %xmm1
    00002b77: 	subsd	%xmm3, %xmm0
    00002b7b: 	subsd	%xmm2, %xmm1
    00002b7f: 	callq	cabs@PLT # Offset: 11135
    00002b84: 	movsd	0x8(%rsp), %xmm6
    00002b8a: 	comisd	%xmm0, %xmm6
    00002b8e: 	jbe	.Ltmp886 # Offset: 11150
.Ltmp998:
    00002b94: 	addl	$0x1, %r12d
    00002b98: 	cmpl	%r13d, %r12d
    00002b9b: 	jl	.Ltmp887 # Offset: 11163
.Ltmp883:
    00002ba1: 	movq	%r14, %rsi
    00002ba4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002bab: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11179
    00002bb0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002bb7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002bbe: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002bc5: 	je	.Ltmp888 # Offset: 11205
.Ltmp1032:
    00002bcb: 	movq	-0x20(%rax), %r12
    00002bcf: 	callq	clock@PLT # Offset: 11215
    00002bd4: 	pxor	%xmm0, %xmm0
    00002bd8: 	movq	%rax, end_time(%rip)
    00002bdf: 	movq	%r12, %rdi
    00002be2: 	subq	start_time(%rip), %rax
    00002be9: 	cvtsi2sd	%rax, %xmm0
    00002bee: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002bf6: 	callq	_Z13record_resultdPKc # Offset: 11254
    00002bfb: 	movq	0x1e0(%rsp), %rdi
    00002c03: 	cmpq	0x88(%rsp), %rdi
    00002c0b: 	je	.Ltmp889 # Offset: 11275
    00002c0d: 	movq	0x1f0(%rsp), %rax
    00002c15: 	leaq	0x1(%rax), %rsi
    00002c19: 	callq	_ZdlPvm@PLT # Offset: 11289
.Ltmp889:
    00002c1e: 	movq	0xb0(%rsp), %rsi
    00002c26: 	leaq	DATAat0x2b41e(%rip), %rdx
    00002c2d: 	movq	%r14, %rdi
    00002c30: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11312
    00002c35: 	callq	clock@PLT # Offset: 11317
    00002c3a: 	movl	iterations(%rip), %r13d
    00002c41: 	movq	%rax, start_time(%rip)
    00002c48: 	testl	%r13d, %r13d
    00002c4b: 	jle	.Ltmp890 # Offset: 11339
    00002c51: 	movsd	DATAat0x2b658(%rip), %xmm7
    00002c59: 	movsd	DATAat0x2b648(%rip), %xmm6
    00002c61: 	pxor	%xmm5, %xmm5
    00002c65: 	xorl	%r12d, %r12d
    00002c68: 	movsd	%xmm5, (%rsp)
    00002c6d: 	movsd	%xmm7, 0x8(%rsp)
    00002c73: 	movsd	%xmm6, 0x18(%rsp)
    00002c79: 	nopl	(%rax) # Size: 7
.Ltmp894:
    00002c80: 	movsd	(%rsp), %xmm6
    00002c85: 	movq	%rbp, %r15
    00002c88: 	movsd	%xmm6, 0x30(%rsp)
    00002c8e: 	movsd	%xmm6, 0x20(%rsp)
    00002c94: 	nopl	(%rax) # Size: 4
.Ltmp891:
    00002c98: 	movsd	0x8(%r15), %xmm1
    00002c9e: 	movsd	(%r15), %xmm0
    00002ca3: 	addq	$0x10, %r15
    00002ca7: 	movsd	0x40(%rsp), %xmm3
    00002cad: 	movsd	0x10(%rsp), %xmm2
    00002cb3: 	callq	__divdc3@PLT # Offset: 11443
    00002cb8: 	movsd	0x60(%rsp), %xmm2
    00002cbe: 	movsd	0x80(%rsp), %xmm3
    00002cc7: 	callq	__divdc3@PLT # Offset: 11463
    00002ccc: 	movsd	0x68(%rsp), %xmm3
    00002cd2: 	movsd	0x50(%rsp), %xmm2
    00002cd8: 	callq	__divdc3@PLT # Offset: 11480
    00002cdd: 	movsd	0x58(%rsp), %xmm3
    00002ce3: 	movsd	0x48(%rsp), %xmm2
    00002ce9: 	callq	__divdc3@PLT # Offset: 11497
    00002cee: 	addsd	0x20(%rsp), %xmm0
    00002cf4: 	addsd	0x30(%rsp), %xmm1
    00002cfa: 	movsd	%xmm0, 0x20(%rsp)
    00002d00: 	movsd	%xmm1, 0x30(%rsp)
    00002d06: 	cmpq	%rbx, %r15
    00002d09: 	jne	.Ltmp891 # Offset: 11529
    00002d0b: 	movsd	0x40(%rsp), %xmm3
    00002d11: 	movsd	init_value(%rip), %xmm0
    00002d19: 	pxor	%xmm1, %xmm1
    00002d1d: 	movsd	0x10(%rsp), %xmm2
    00002d23: 	callq	__divdc3@PLT # Offset: 11555
    00002d28: 	movsd	0x60(%rsp), %xmm2
    00002d2e: 	movsd	0x80(%rsp), %xmm3
    00002d37: 	callq	__divdc3@PLT # Offset: 11575
    00002d3c: 	movsd	0x68(%rsp), %xmm3
    00002d42: 	movsd	0x50(%rsp), %xmm2
    00002d48: 	callq	__divdc3@PLT # Offset: 11592
    00002d4d: 	movsd	0x58(%rsp), %xmm3
    00002d53: 	movsd	0x48(%rsp), %xmm2
    00002d59: 	callq	__divdc3@PLT # Offset: 11609
    00002d5e: 	movsd	0x18(%rsp), %xmm6
    00002d64: 	movsd	(%rsp), %xmm7
    00002d69: 	movapd	%xmm6, %xmm3
    00002d6d: 	movapd	%xmm7, %xmm2
    00002d71: 	mulsd	%xmm1, %xmm2
    00002d75: 	mulsd	%xmm0, %xmm3
    00002d79: 	mulsd	%xmm0, %xmm7
    00002d7d: 	mulsd	%xmm1, %xmm6
    00002d81: 	subsd	%xmm2, %xmm3
    00002d85: 	movapd	%xmm7, %xmm2
    00002d89: 	addsd	%xmm6, %xmm2
    00002d8d: 	ucomisd	%xmm2, %xmm3
    00002d91: 	jp	.Ltmp892 # Offset: 11665
.Ltmp1083:
    00002d97: 	movsd	0x20(%rsp), %xmm0
    00002d9d: 	movsd	0x30(%rsp), %xmm1
    00002da3: 	subsd	%xmm3, %xmm0
    00002da7: 	subsd	%xmm2, %xmm1
    00002dab: 	callq	cabs@PLT # Offset: 11691
    00002db0: 	movsd	0x8(%rsp), %xmm7
    00002db6: 	comisd	%xmm0, %xmm7
    00002dba: 	jbe	.Ltmp893 # Offset: 11706
.Ltmp997:
    00002dc0: 	addl	$0x1, %r12d
    00002dc4: 	cmpl	%r13d, %r12d
    00002dc7: 	jl	.Ltmp894 # Offset: 11719
.Ltmp890:
    00002dcd: 	movq	%r14, %rsi
    00002dd0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002dd7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11735
    00002ddc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002de3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002dea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002df1: 	je	.Ltmp895 # Offset: 11761
.Ltmp1031:
    00002df7: 	movq	-0x20(%rax), %r12
    00002dfb: 	callq	clock@PLT # Offset: 11771
    00002e00: 	pxor	%xmm0, %xmm0
    00002e04: 	movq	%rax, end_time(%rip)
    00002e0b: 	movq	%r12, %rdi
    00002e0e: 	subq	start_time(%rip), %rax
    00002e15: 	cvtsi2sd	%rax, %xmm0
    00002e1a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002e22: 	callq	_Z13record_resultdPKc # Offset: 11810
    00002e27: 	movq	0x1e0(%rsp), %rdi
    00002e2f: 	cmpq	0x88(%rsp), %rdi
    00002e37: 	je	.Ltmp896 # Offset: 11831
    00002e39: 	movq	0x1f0(%rsp), %rax
    00002e41: 	leaq	0x1(%rax), %rsi
    00002e45: 	callq	_ZdlPvm@PLT # Offset: 11845
.Ltmp896:
    00002e4a: 	movq	0xb0(%rsp), %rsi
    00002e52: 	leaq	DATAat0x2b439(%rip), %rdx
    00002e59: 	movq	%r14, %rdi
    00002e5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11868
    00002e61: 	callq	clock@PLT # Offset: 11873
    00002e66: 	movl	iterations(%rip), %r13d
    00002e6d: 	movq	%rax, start_time(%rip)
    00002e74: 	testl	%r13d, %r13d
    00002e77: 	jle	.Ltmp897 # Offset: 11895
    00002e7d: 	movsd	0x40(%rsp), %xmm1
    00002e83: 	movsd	0x10(%rsp), %xmm0
    00002e89: 	xorl	%r12d, %r12d
    00002e8c: 	leaq	DATAat0x2b1d0(%rip), %r15
    00002e93: 	movsd	0x80(%rsp), %xmm3
    00002e9c: 	movsd	0x60(%rsp), %xmm2
    00002ea2: 	callq	__divdc3@PLT # Offset: 11938
    00002ea7: 	movsd	0x68(%rsp), %xmm3
    00002ead: 	movsd	0x50(%rsp), %xmm2
    00002eb3: 	callq	__divdc3@PLT # Offset: 11955
    00002eb8: 	movsd	0x58(%rsp), %xmm3
    00002ebe: 	movsd	0x48(%rsp), %xmm2
    00002ec4: 	callq	__divdc3@PLT # Offset: 11972
    00002ec9: 	pxor	%xmm7, %xmm7
    00002ecd: 	movapd	%xmm7, %xmm6
    00002ed1: 	movsd	%xmm7, (%rsp)
    00002ed6: 	addsd	%xmm1, %xmm6
    00002eda: 	movsd	%xmm0, 0x70(%rsp)
    00002ee0: 	movsd	%xmm6, 0xa0(%rsp)
    00002ee9: 	movapd	%xmm6, %xmm5
    00002eed: 	mulsd	%xmm7, %xmm5
    00002ef1: 	movsd	DATAat0x2b648(%rip), %xmm7
    00002ef9: 	mulsd	%xmm7, %xmm6
    00002efd: 	movsd	%xmm7, 0x18(%rsp)
    00002f03: 	movsd	%xmm5, 0x20(%rsp)
    00002f09: 	movsd	DATAat0x2b658(%rip), %xmm5
    00002f11: 	movsd	%xmm5, 0x8(%rsp)
    00002f17: 	movapd	%xmm0, %xmm5
    00002f1b: 	unpcklpd	%xmm1, %xmm5
    00002f1f: 	movsd	%xmm6, 0x30(%rsp)
    00002f25: 	movaps	%xmm5, 0x90(%rsp)
    00002f2d: 	nopl	(%rax) # Size: 3
.Ltmp901:
    00002f30: 	movapd	0x90(%rsp), %xmm2
    00002f39: 	movq	%rbp, %rax
    00002f3c: 	pxor	%xmm1, %xmm1
.Ltmp898:
    00002f40: 	movapd	(%rax), %xmm0
    00002f44: 	addq	$0x10, %rax
    00002f48: 	addpd	%xmm2, %xmm0
    00002f4c: 	addpd	%xmm0, %xmm1
    00002f50: 	cmpq	%rbx, %rax
    00002f53: 	jne	.Ltmp898 # Offset: 12115
    00002f55: 	movsd	0x70(%rsp), %xmm0
    00002f5b: 	movapd	%xmm1, %xmm5
    00002f5f: 	unpckhpd	%xmm1, %xmm1
    00002f63: 	addsd	init_value(%rip), %xmm0
    00002f6b: 	movsd	0x18(%rsp), %xmm2
    00002f71: 	movapd	%xmm1, %xmm4
    00002f75: 	movsd	(%rsp), %xmm1
    00002f7a: 	mulsd	%xmm0, %xmm2
    00002f7e: 	mulsd	%xmm0, %xmm1
    00002f82: 	subsd	0x20(%rsp), %xmm2
    00002f88: 	addsd	0x30(%rsp), %xmm1
    00002f8e: 	ucomisd	%xmm1, %xmm2
    00002f92: 	jp	.Ltmp899 # Offset: 12178
.Ltmp1082:
    00002f98: 	subsd	%xmm2, %xmm5
    00002f9c: 	subsd	%xmm1, %xmm4
    00002fa0: 	movapd	%xmm5, %xmm0
    00002fa4: 	movapd	%xmm4, %xmm1
    00002fa8: 	callq	cabs@PLT # Offset: 12200
    00002fad: 	movsd	0x8(%rsp), %xmm6
    00002fb3: 	comisd	%xmm0, %xmm6
    00002fb7: 	jbe	.Ltmp900 # Offset: 12215
.Ltmp996:
    00002fbd: 	addl	$0x1, %r12d
    00002fc1: 	cmpl	%r13d, %r12d
    00002fc4: 	jl	.Ltmp901 # Offset: 12228
.Ltmp897:
    00002fca: 	movq	%r14, %rsi
    00002fcd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002fd4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12244
    00002fd9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002fe0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002fe7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002fee: 	je	.Ltmp902 # Offset: 12270
.Ltmp1030:
    00002ff4: 	movq	-0x20(%rax), %r12
    00002ff8: 	callq	clock@PLT # Offset: 12280
    00002ffd: 	pxor	%xmm0, %xmm0
    00003001: 	movq	%rax, end_time(%rip)
    00003008: 	movq	%r12, %rdi
    0000300b: 	subq	start_time(%rip), %rax
    00003012: 	cvtsi2sd	%rax, %xmm0
    00003017: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000301f: 	callq	_Z13record_resultdPKc # Offset: 12319
    00003024: 	movq	0x1e0(%rsp), %rdi
    0000302c: 	cmpq	0x88(%rsp), %rdi
    00003034: 	je	.Ltmp903 # Offset: 12340
    00003036: 	movq	0x1f0(%rsp), %rax
    0000303e: 	leaq	0x1(%rax), %rsi
    00003042: 	callq	_ZdlPvm@PLT # Offset: 12354
.Ltmp903:
    00003047: 	movq	0xb0(%rsp), %rsi
    0000304f: 	leaq	DATAat0x2b455(%rip), %rdx
    00003056: 	movq	%r14, %rdi
    00003059: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12377
    0000305e: 	callq	clock@PLT # Offset: 12382
    00003063: 	movl	iterations(%rip), %r13d
    0000306a: 	movq	%rax, start_time(%rip)
    00003071: 	testl	%r13d, %r13d
    00003074: 	jle	.Ltmp904 # Offset: 12404
    0000307a: 	movsd	0x50(%rsp), %xmm6
    00003080: 	movsd	0x68(%rsp), %xmm5
    00003086: 	xorl	%r12d, %r12d
    00003089: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003090: 	movsd	0x80(%rsp), %xmm7
    00003099: 	movsd	0x60(%rsp), %xmm3
    0000309f: 	movapd	%xmm6, %xmm0
    000030a3: 	mulsd	%xmm3, %xmm0
    000030a7: 	movapd	%xmm7, %xmm1
    000030ab: 	mulsd	%xmm5, %xmm1
    000030af: 	mulsd	%xmm3, %xmm5
    000030b3: 	mulsd	%xmm7, %xmm6
    000030b7: 	pxor	%xmm7, %xmm7
    000030bb: 	movsd	%xmm7, (%rsp)
    000030c0: 	subsd	%xmm1, %xmm0
    000030c4: 	movsd	%xmm0, 0x20(%rsp)
    000030ca: 	movapd	%xmm5, %xmm0
    000030ce: 	movsd	DATAat0x2b648(%rip), %xmm5
    000030d6: 	addsd	%xmm6, %xmm0
    000030da: 	movsd	DATAat0x2b658(%rip), %xmm6
    000030e2: 	movsd	%xmm5, 0x18(%rsp)
    000030e8: 	movsd	%xmm6, 0x8(%rsp)
    000030ee: 	movsd	%xmm0, 0x30(%rsp)
    000030f4: 	nopl	(%rax) # Size: 4
.Ltmp909:
    000030f8: 	movsd	0x20(%rsp), %xmm0
    000030fe: 	movsd	0x30(%rsp), %xmm1
    00003104: 	ucomisd	%xmm1, %xmm0
    00003108: 	jp	.Ltmp905 # Offset: 12552
    0000310e: 	movsd	0x58(%rsp), %xmm3
    00003114: 	movsd	0x48(%rsp), %xmm2
    0000311a: 	callq	__divdc3@PLT # Offset: 12570
    0000311f: 	movsd	0x40(%rsp), %xmm3
    00003125: 	movsd	(%rsp), %xmm4
    0000312a: 	movq	%rbp, %rax
    0000312d: 	movapd	%xmm0, %xmm2
    00003131: 	movsd	0x10(%rsp), %xmm0
    00003137: 	subsd	%xmm1, %xmm3
    0000313b: 	movapd	%xmm4, %xmm5
    0000313f: 	subsd	%xmm2, %xmm0
    00003143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp906:
    00003148: 	movsd	(%rax), %xmm1
    0000314c: 	addq	$0x10, %rax
    00003150: 	addsd	%xmm0, %xmm1
    00003154: 	addsd	%xmm1, %xmm4
    00003158: 	movsd	-0x8(%rax), %xmm1
    0000315d: 	addsd	%xmm3, %xmm1
    00003161: 	addsd	%xmm1, %xmm5
    00003165: 	cmpq	%rax, %rbx
    00003168: 	jne	.Ltmp906 # Offset: 12648
.Ltmp1103:
    0000316a: 	movsd	(%rsp), %xmm6
    0000316f: 	addsd	init_value(%rip), %xmm0
    00003177: 	movsd	0x18(%rsp), %xmm7
    0000317d: 	addsd	%xmm6, %xmm3
    00003181: 	movapd	%xmm6, %xmm2
    00003185: 	mulsd	%xmm0, %xmm6
    00003189: 	movapd	%xmm3, %xmm1
    0000318d: 	movapd	%xmm7, %xmm3
    00003191: 	mulsd	%xmm1, %xmm2
    00003195: 	mulsd	%xmm0, %xmm3
    00003199: 	subsd	%xmm2, %xmm3
    0000319d: 	movapd	%xmm6, %xmm2
    000031a1: 	movapd	%xmm7, %xmm6
    000031a5: 	mulsd	%xmm1, %xmm6
    000031a9: 	addsd	%xmm6, %xmm2
    000031ad: 	ucomisd	%xmm2, %xmm3
    000031b1: 	jp	.Ltmp907 # Offset: 12721
.Ltmp1101:
    000031b7: 	subsd	%xmm3, %xmm4
    000031bb: 	subsd	%xmm2, %xmm5
    000031bf: 	movapd	%xmm4, %xmm0
    000031c3: 	movapd	%xmm5, %xmm1
    000031c7: 	callq	cabs@PLT # Offset: 12743
    000031cc: 	movsd	0x8(%rsp), %xmm7
    000031d2: 	comisd	%xmm0, %xmm7
    000031d6: 	jbe	.Ltmp908 # Offset: 12758
.Ltmp995:
    000031dc: 	addl	$0x1, %r12d
    000031e0: 	cmpl	%r13d, %r12d
    000031e3: 	jl	.Ltmp909 # Offset: 12771
.Ltmp904:
    000031e9: 	movq	%r14, %rsi
    000031ec: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000031f3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12787
    000031f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000031ff: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003206: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000320d: 	je	.Ltmp910 # Offset: 12813
.Ltmp1029:
    00003213: 	movq	-0x20(%rax), %r12
    00003217: 	callq	clock@PLT # Offset: 12823
    0000321c: 	pxor	%xmm0, %xmm0
    00003220: 	movq	%rax, end_time(%rip)
    00003227: 	movq	%r12, %rdi
    0000322a: 	subq	start_time(%rip), %rax
    00003231: 	cvtsi2sd	%rax, %xmm0
    00003236: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000323e: 	callq	_Z13record_resultdPKc # Offset: 12862
    00003243: 	movq	0x1e0(%rsp), %rdi
    0000324b: 	cmpq	0x88(%rsp), %rdi
    00003253: 	je	.Ltmp911 # Offset: 12883
    00003255: 	movq	0x1f0(%rsp), %rax
    0000325d: 	leaq	0x1(%rax), %rsi
    00003261: 	callq	_ZdlPvm@PLT # Offset: 12897
.Ltmp911:
    00003266: 	movq	0xb0(%rsp), %rsi
    0000326e: 	leaq	DATAat0x2b46e(%rip), %rdx
    00003275: 	movq	%r14, %rdi
    00003278: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12920
    0000327d: 	callq	clock@PLT # Offset: 12925
    00003282: 	movl	iterations(%rip), %r13d
    00003289: 	movq	%rax, start_time(%rip)
    00003290: 	testl	%r13d, %r13d
    00003293: 	jle	.Ltmp912 # Offset: 12947
    00003299: 	movsd	0x50(%rsp), %xmm7
    0000329f: 	movsd	0x68(%rsp), %xmm5
    000032a5: 	xorl	%r12d, %r12d
    000032a8: 	leaq	DATAat0x2b1d0(%rip), %r15
    000032af: 	movsd	0x80(%rsp), %xmm6
    000032b8: 	movsd	0x60(%rsp), %xmm3
    000032be: 	movapd	%xmm7, %xmm0
    000032c2: 	mulsd	%xmm3, %xmm0
    000032c6: 	movapd	%xmm6, %xmm1
    000032ca: 	mulsd	%xmm5, %xmm1
    000032ce: 	mulsd	%xmm3, %xmm5
    000032d2: 	mulsd	%xmm6, %xmm7
    000032d6: 	movsd	DATAat0x2b658(%rip), %xmm6
    000032de: 	movsd	%xmm6, 0x8(%rsp)
    000032e4: 	subsd	%xmm1, %xmm0
    000032e8: 	movsd	%xmm0, 0x20(%rsp)
    000032ee: 	movapd	%xmm5, %xmm0
    000032f2: 	movsd	DATAat0x2b648(%rip), %xmm5
    000032fa: 	addsd	%xmm7, %xmm0
    000032fe: 	pxor	%xmm7, %xmm7
    00003302: 	movsd	%xmm7, (%rsp)
    00003307: 	movsd	%xmm5, 0x18(%rsp)
    0000330d: 	movsd	%xmm0, 0x30(%rsp)
    00003313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp917:
    00003318: 	movsd	0x20(%rsp), %xmm0
    0000331e: 	movsd	0x30(%rsp), %xmm1
    00003324: 	ucomisd	%xmm1, %xmm0
    00003328: 	jp	.Ltmp913 # Offset: 13096
    0000332e: 	movsd	0x58(%rsp), %xmm3
    00003334: 	movsd	0x48(%rsp), %xmm2
    0000333a: 	callq	__divdc3@PLT # Offset: 13114
    0000333f: 	movsd	(%rsp), %xmm4
    00003344: 	movsd	0x40(%rsp), %xmm7
    0000334a: 	movq	%rbp, %rax
    0000334d: 	movsd	0x10(%rsp), %xmm8
    00003354: 	movapd	%xmm0, %xmm6
    00003358: 	movapd	%xmm1, %xmm3
    0000335c: 	movapd	%xmm4, %xmm5
.Ltmp914:
    00003360: 	movsd	(%rax), %xmm2
    00003364: 	addq	$0x10, %rax
    00003368: 	addsd	%xmm8, %xmm2
    0000336d: 	subsd	%xmm0, %xmm2
    00003371: 	addsd	%xmm2, %xmm4
    00003375: 	movsd	-0x8(%rax), %xmm2
    0000337a: 	addsd	%xmm7, %xmm2
    0000337e: 	subsd	%xmm1, %xmm2
    00003382: 	addsd	%xmm2, %xmm5
    00003386: 	cmpq	%rbx, %rax
    00003389: 	jne	.Ltmp914 # Offset: 13193
.Ltmp1086:
    0000338b: 	movsd	(%rsp), %xmm7
    00003390: 	movsd	0x40(%rsp), %xmm1
    00003396: 	movsd	0x10(%rsp), %xmm0
    0000339c: 	addsd	init_value(%rip), %xmm0
    000033a4: 	addsd	%xmm7, %xmm1
    000033a8: 	movapd	%xmm7, %xmm2
    000033ac: 	subsd	%xmm6, %xmm0
    000033b0: 	movsd	0x18(%rsp), %xmm6
    000033b6: 	subsd	%xmm3, %xmm1
    000033ba: 	movapd	%xmm6, %xmm3
    000033be: 	mulsd	%xmm0, %xmm3
    000033c2: 	mulsd	%xmm1, %xmm2
    000033c6: 	mulsd	%xmm0, %xmm7
    000033ca: 	mulsd	%xmm1, %xmm6
    000033ce: 	subsd	%xmm2, %xmm3
    000033d2: 	movapd	%xmm7, %xmm2
    000033d6: 	addsd	%xmm6, %xmm2
    000033da: 	ucomisd	%xmm2, %xmm3
    000033de: 	jp	.Ltmp915 # Offset: 13278
.Ltmp1084:
    000033e4: 	subsd	%xmm3, %xmm4
    000033e8: 	subsd	%xmm2, %xmm5
    000033ec: 	movapd	%xmm4, %xmm0
    000033f0: 	movapd	%xmm5, %xmm1
    000033f4: 	callq	cabs@PLT # Offset: 13300
    000033f9: 	movsd	0x8(%rsp), %xmm6
    000033ff: 	comisd	%xmm0, %xmm6
    00003403: 	jbe	.Ltmp916 # Offset: 13315
.Ltmp994:
    00003409: 	addl	$0x1, %r12d
    0000340d: 	cmpl	%r13d, %r12d
    00003410: 	jl	.Ltmp917 # Offset: 13328
.Ltmp912:
    00003416: 	movq	%r14, %rsi
    00003419: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003420: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13344
    00003425: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000342c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003433: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000343a: 	je	.Ltmp918 # Offset: 13370
.Ltmp1028:
    00003440: 	movq	-0x20(%rax), %r12
    00003444: 	callq	clock@PLT # Offset: 13380
    00003449: 	pxor	%xmm0, %xmm0
    0000344d: 	movq	%rax, end_time(%rip)
    00003454: 	movq	%r12, %rdi
    00003457: 	subq	start_time(%rip), %rax
    0000345e: 	cvtsi2sd	%rax, %xmm0
    00003463: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000346b: 	callq	_Z13record_resultdPKc # Offset: 13419
    00003470: 	movq	0x1e0(%rsp), %rdi
    00003478: 	cmpq	0x88(%rsp), %rdi
    00003480: 	je	.Ltmp919 # Offset: 13440
    00003482: 	movq	0x1f0(%rsp), %rax
    0000348a: 	leaq	0x1(%rax), %rsi
    0000348e: 	callq	_ZdlPvm@PLT # Offset: 13454
.Ltmp919:
    00003493: 	movq	0xb0(%rsp), %r15
    0000349b: 	leaq	0x180(%rsp), %rdi
    000034a3: 	leaq	DATAat0x2b488(%rip), %rdx
    000034aa: 	movq	%r15, %rsi
    000034ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13485
    000034b2: 	movl	iterations(%rip), %edx
    000034b8: 	xorl	%r8d, %r8d
    000034bb: 	xorl	%ecx, %ecx
    000034bd: 	movl	$0x1f40, %esi
    000034c2: 	movq	0x180(%rsp), %rdi
    000034ca: 	callq	_Z9summarizePKciiii # Offset: 13514
    000034cf: 	leaq	DATAat0x2b499(%rip), %rdx
    000034d6: 	movq	%r15, %rsi
    000034d9: 	movq	%r14, %rdi
    000034dc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13532
    000034e1: 	callq	clock@PLT # Offset: 13537
    000034e6: 	movl	iterations(%rip), %r13d
    000034ed: 	movq	%rax, start_time(%rip)
    000034f4: 	testl	%r13d, %r13d
    000034f7: 	jle	.Ltmp920 # Offset: 13559
    000034fd: 	movsd	DATAat0x2b658(%rip), %xmm7
    00003505: 	xorl	%r12d, %r12d
    00003508: 	leaq	0x210(%rsp), %r15
    00003510: 	movsd	%xmm7, 0x8(%rsp)
    00003516: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp923:
    00003520: 	movapd	0x200(%rsp), %xmm2
    00003529: 	pxor	%xmm0, %xmm0
    0000352d: 	movq	%r15, %rax
    00003530: 	movapd	%xmm2, %xmm1
    00003534: 	subpd	0x210(%rsp), %xmm1
    0000353d: 	addpd	%xmm0, %xmm1
    00003541: 	nopl	(%rax) # Size: 7
.Ltmp921:
    00003548: 	movapd	%xmm2, %xmm0
    0000354c: 	movapd	(%rax), %xmm2
    00003550: 	addq	$0x10, %rax
    00003554: 	subpd	%xmm2, %xmm0
    00003558: 	addpd	%xmm0, %xmm1
    0000355c: 	cmpq	%rax, %rbx
    0000355f: 	jne	.Ltmp921 # Offset: 13663
    00003561: 	movapd	%xmm1, %xmm0
    00003565: 	unpckhpd	%xmm1, %xmm1
    00003569: 	callq	cabs@PLT # Offset: 13673
    0000356e: 	movsd	0x8(%rsp), %xmm7
    00003574: 	comisd	%xmm0, %xmm7
    00003578: 	jbe	.Ltmp922 # Offset: 13688
.Ltmp993:
    0000357e: 	addl	$0x1, %r12d
    00003582: 	cmpl	%r13d, %r12d
    00003585: 	jl	.Ltmp923 # Offset: 13701
.Ltmp920:
    00003587: 	movq	%r14, %rsi
    0000358a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003591: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13713
    00003596: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000359d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000035a4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000035ab: 	je	.Ltmp924 # Offset: 13739
.Ltmp1027:
    000035b1: 	movq	-0x20(%rax), %r12
    000035b5: 	callq	clock@PLT # Offset: 13749
    000035ba: 	pxor	%xmm0, %xmm0
    000035be: 	movq	%rax, end_time(%rip)
    000035c5: 	movq	%r12, %rdi
    000035c8: 	subq	start_time(%rip), %rax
    000035cf: 	cvtsi2sd	%rax, %xmm0
    000035d4: 	divsd	DATAat0x2b628(%rip), %xmm0
    000035dc: 	callq	_Z13record_resultdPKc # Offset: 13788
    000035e1: 	movq	0x1e0(%rsp), %rdi
    000035e9: 	cmpq	0x88(%rsp), %rdi
    000035f1: 	je	.Ltmp925 # Offset: 13809
    000035f3: 	movq	0x1f0(%rsp), %rax
    000035fb: 	leaq	0x1(%rax), %rsi
    000035ff: 	callq	_ZdlPvm@PLT # Offset: 13823
.Ltmp925:
    00003604: 	movq	0xb0(%rsp), %rsi
    0000360c: 	leaq	DATAat0x2b4a2(%rip), %rdx
    00003613: 	movq	%r14, %rdi
    00003616: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13846
    0000361b: 	movsd	0x10(%rsp), %xmm0
    00003621: 	movq	%r14, %rdx
    00003624: 	movl	$0x1f40, %esi
    00003629: 	movq	%rbp, %rdi
    0000362c: 	movsd	0x40(%rsp), %xmm1
    00003632: 	callq	_Z16test_CSE_halfoptISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13874
    00003637: 	movq	0x1e0(%rsp), %rdi
    0000363f: 	cmpq	0x88(%rsp), %rdi
    00003647: 	je	.Ltmp926 # Offset: 13895
    00003649: 	movq	0x1f0(%rsp), %rax
    00003651: 	leaq	0x1(%rax), %rsi
    00003655: 	callq	_ZdlPvm@PLT # Offset: 13909
.Ltmp926:
    0000365a: 	leaq	DATAat0x2b4b0(%rip), %r12
    00003661: 	movq	0xb0(%rsp), %rsi
    00003669: 	movq	%r14, %rdi
    0000366c: 	movq	%r12, %rdx
    0000366f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13935
    00003674: 	movsd	0x10(%rsp), %xmm0
    0000367a: 	movq	%r14, %rdx
    0000367d: 	movl	$0x1f40, %esi
    00003682: 	movq	%rbp, %rdi
    00003685: 	movsd	0x40(%rsp), %xmm1
    0000368b: 	callq	_Z8test_CSEISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13963
    00003690: 	movq	0x1e0(%rsp), %rdi
    00003698: 	cmpq	0x88(%rsp), %rdi
    000036a0: 	je	.Ltmp927 # Offset: 13984
    000036a2: 	movq	0x1f0(%rsp), %rax
    000036aa: 	leaq	0x1(%rax), %rsi
    000036ae: 	callq	_ZdlPvm@PLT # Offset: 13998
.Ltmp927:
    000036b3: 	movq	0xb0(%rsp), %rsi
    000036bb: 	leaq	DATAat0x2b4b5(%rip), %rdx
    000036c2: 	movq	%r14, %rdi
    000036c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14021
    000036ca: 	movsd	0x10(%rsp), %xmm0
    000036d0: 	movq	%r14, %rdx
    000036d3: 	movl	$0x1f40, %esi
    000036d8: 	movq	%rbp, %rdi
    000036db: 	movsd	0x40(%rsp), %xmm1
    000036e1: 	callq	_Z9test_CSE2ISt7complexIdE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14049
    000036e6: 	movq	0x1e0(%rsp), %rdi
    000036ee: 	cmpq	0x88(%rsp), %rdi
    000036f6: 	je	.Ltmp928 # Offset: 14070
    000036f8: 	movq	0x1f0(%rsp), %rax
    00003700: 	leaq	0x1(%rax), %rsi
    00003704: 	callq	_ZdlPvm@PLT # Offset: 14084
.Ltmp928:
    00003709: 	movq	0xb0(%rsp), %r15
    00003711: 	leaq	0x1a0(%rsp), %rdi
    00003719: 	movq	%r12, %rdx
    0000371c: 	movq	%r15, %rsi
    0000371f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14111
    00003724: 	movl	iterations(%rip), %edx
    0000372a: 	xorl	%r8d, %r8d
    0000372d: 	xorl	%ecx, %ecx
    0000372f: 	movl	$0x1f40, %esi
    00003734: 	movq	0x1a0(%rsp), %rdi
    0000373c: 	callq	_Z9summarizePKciiii # Offset: 14140
    00003741: 	leaq	DATAat0x2b4bc(%rip), %rdx
    00003748: 	movq	%r15, %rsi
    0000374b: 	movq	%r14, %rdi
    0000374e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14158
    00003753: 	callq	clock@PLT # Offset: 14163
    00003758: 	movl	iterations(%rip), %r13d
    0000375f: 	movq	%rax, start_time(%rip)
    00003766: 	testl	%r13d, %r13d
    00003769: 	jle	.Ltmp929 # Offset: 14185
    0000376f: 	movsd	DATAat0x2b658(%rip), %xmm5
    00003777: 	movsd	DATAat0x2b648(%rip), %xmm7
    0000377f: 	pxor	%xmm6, %xmm6
    00003783: 	xorl	%r12d, %r12d
    00003786: 	movsd	%xmm6, (%rsp)
    0000378b: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003792: 	movsd	%xmm5, 0x8(%rsp)
    00003798: 	movsd	%xmm7, 0x18(%rsp)
    0000379e: 	nop # Size: 2
.Ltmp933:
    000037a0: 	movq	%rbp, %rax
    000037a3: 	pxor	%xmm1, %xmm1
    000037a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp930:
    000037b0: 	addpd	(%rax), %xmm1
    000037b4: 	addq	$0x10, %rax
    000037b8: 	cmpq	%rbx, %rax
    000037bb: 	jne	.Ltmp930 # Offset: 14267
    000037bd: 	movsd	(%rsp), %xmm7
    000037c2: 	movapd	%xmm1, %xmm5
    000037c6: 	unpckhpd	%xmm1, %xmm1
    000037ca: 	movsd	init_value(%rip), %xmm6
    000037d2: 	movapd	%xmm1, %xmm4
    000037d6: 	movsd	0x18(%rsp), %xmm0
    000037dc: 	movapd	%xmm7, %xmm1
    000037e0: 	mulsd	%xmm6, %xmm1
    000037e4: 	mulsd	%xmm6, %xmm0
    000037e8: 	addsd	%xmm7, %xmm1
    000037ec: 	ucomisd	%xmm1, %xmm0
    000037f0: 	jp	.Ltmp931 # Offset: 14320
.Ltmp1088:
    000037f6: 	subsd	%xmm0, %xmm5
    000037fa: 	subsd	%xmm1, %xmm4
    000037fe: 	movapd	%xmm5, %xmm0
    00003802: 	movapd	%xmm4, %xmm1
    00003806: 	callq	cabs@PLT # Offset: 14342
    0000380b: 	movsd	0x8(%rsp), %xmm6
    00003811: 	comisd	%xmm0, %xmm6
    00003815: 	jbe	.Ltmp932 # Offset: 14357
.Ltmp992:
    0000381b: 	addl	$0x1, %r12d
    0000381f: 	cmpl	%r13d, %r12d
    00003822: 	jl	.Ltmp933 # Offset: 14370
.Ltmp929:
    00003828: 	movq	%r14, %rsi
    0000382b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003832: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14386
    00003837: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000383e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003845: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000384c: 	je	.Ltmp934 # Offset: 14412
.Ltmp1026:
    00003852: 	movq	-0x20(%rax), %r12
    00003856: 	callq	clock@PLT # Offset: 14422
    0000385b: 	pxor	%xmm0, %xmm0
    0000385f: 	movq	%rax, end_time(%rip)
    00003866: 	movq	%r12, %rdi
    00003869: 	subq	start_time(%rip), %rax
    00003870: 	cvtsi2sd	%rax, %xmm0
    00003875: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000387d: 	callq	_Z13record_resultdPKc # Offset: 14461
    00003882: 	movq	0x1e0(%rsp), %rdi
    0000388a: 	cmpq	0x88(%rsp), %rdi
    00003892: 	je	.Ltmp935 # Offset: 14482
    00003894: 	movq	0x1f0(%rsp), %rax
    0000389c: 	leaq	0x1(%rax), %rsi
    000038a0: 	callq	_ZdlPvm@PLT # Offset: 14496
.Ltmp935:
    000038a5: 	movq	0xb0(%rsp), %rsi
    000038ad: 	leaq	DATAat0x2b4c2(%rip), %rdx
    000038b4: 	movq	%r14, %rdi
    000038b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14519
    000038bc: 	movq	%r14, %rdx
    000038bf: 	movl	$0x1f40, %esi
    000038c4: 	movq	%rbp, %rdi
    000038c7: 	callq	_Z13test_constantISt7complexIdE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14535
    000038cc: 	movq	0x1e0(%rsp), %rdi
    000038d4: 	cmpq	0x88(%rsp), %rdi
    000038dc: 	je	.Ltmp936 # Offset: 14556
    000038de: 	movq	0x1f0(%rsp), %rax
    000038e6: 	leaq	0x1(%rax), %rsi
    000038ea: 	callq	_ZdlPvm@PLT # Offset: 14570
.Ltmp936:
    000038ef: 	movq	0xb0(%rsp), %rsi
    000038f7: 	leaq	DATAat0x2b4cc(%rip), %rdx
    000038fe: 	movq	%r14, %rdi
    00003901: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14593
    00003906: 	callq	clock@PLT # Offset: 14598
    0000390b: 	movl	iterations(%rip), %r13d
    00003912: 	movq	%rax, start_time(%rip)
    00003919: 	testl	%r13d, %r13d
    0000391c: 	jle	.Ltmp937 # Offset: 14620
    00003922: 	movsd	DATAat0x2b658(%rip), %xmm5
    0000392a: 	movsd	DATAat0x2b648(%rip), %xmm7
    00003932: 	pxor	%xmm6, %xmm6
    00003936: 	xorl	%r12d, %r12d
    00003939: 	movsd	%xmm6, (%rsp)
    0000393e: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003945: 	movsd	%xmm5, 0x8(%rsp)
    0000394b: 	movsd	%xmm7, 0x18(%rsp)
    00003951: 	nopl	(%rax) # Size: 7
.Ltmp941:
    00003958: 	movq	%rbp, %rax
    0000395b: 	pxor	%xmm1, %xmm1
    0000395f: 	nop # Size: 1
.Ltmp938:
    00003960: 	addpd	(%rax), %xmm1
    00003964: 	addq	$0x10, %rax
    00003968: 	cmpq	%rax, %rbx
    0000396b: 	jne	.Ltmp938 # Offset: 14699
    0000396d: 	movsd	(%rsp), %xmm7
    00003972: 	movapd	%xmm1, %xmm5
    00003976: 	unpckhpd	%xmm1, %xmm1
    0000397a: 	movsd	init_value(%rip), %xmm6
    00003982: 	movapd	%xmm1, %xmm4
    00003986: 	movsd	0x18(%rsp), %xmm0
    0000398c: 	movapd	%xmm7, %xmm1
    00003990: 	mulsd	%xmm6, %xmm1
    00003994: 	mulsd	%xmm6, %xmm0
    00003998: 	addsd	%xmm7, %xmm1
    0000399c: 	ucomisd	%xmm1, %xmm0
    000039a0: 	jp	.Ltmp939 # Offset: 14752
.Ltmp1087:
    000039a6: 	subsd	%xmm0, %xmm5
    000039aa: 	subsd	%xmm1, %xmm4
    000039ae: 	movapd	%xmm5, %xmm0
    000039b2: 	movapd	%xmm4, %xmm1
    000039b6: 	callq	cabs@PLT # Offset: 14774
    000039bb: 	movsd	0x8(%rsp), %xmm7
    000039c1: 	comisd	%xmm0, %xmm7
    000039c5: 	jbe	.Ltmp940 # Offset: 14789
.Ltmp991:
    000039cb: 	addl	$0x1, %r12d
    000039cf: 	cmpl	%r13d, %r12d
    000039d2: 	jl	.Ltmp941 # Offset: 14802
.Ltmp937:
    000039d8: 	movq	%r14, %rsi
    000039db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000039e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14818
    000039e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000039ee: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000039f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000039fc: 	je	.Ltmp942 # Offset: 14844
.Ltmp1025:
    00003a02: 	movq	-0x20(%rax), %r12
    00003a06: 	callq	clock@PLT # Offset: 14854
    00003a0b: 	pxor	%xmm0, %xmm0
    00003a0f: 	movq	%rax, end_time(%rip)
    00003a16: 	movq	%r12, %rdi
    00003a19: 	subq	start_time(%rip), %rax
    00003a20: 	cvtsi2sd	%rax, %xmm0
    00003a25: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003a2d: 	callq	_Z13record_resultdPKc # Offset: 14893
    00003a32: 	movq	0x1e0(%rsp), %rdi
    00003a3a: 	cmpq	0x88(%rsp), %rdi
    00003a42: 	je	.Ltmp943 # Offset: 14914
    00003a44: 	movq	0x1f0(%rsp), %rax
    00003a4c: 	leaq	0x1(%rax), %rsi
    00003a50: 	callq	_ZdlPvm@PLT # Offset: 14928
.Ltmp943:
    00003a55: 	movq	0xb0(%rsp), %rsi
    00003a5d: 	leaq	DATAat0x2b4db(%rip), %rdx
    00003a64: 	movq	%r14, %rdi
    00003a67: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14951
    00003a6c: 	movq	%r14, %rdx
    00003a6f: 	movl	$0x1f40, %esi
    00003a74: 	movq	%rbp, %rdi
    00003a77: 	callq	_Z13test_constantISt7complexIdE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14967
    00003a7c: 	movq	0x1e0(%rsp), %rdi
    00003a84: 	cmpq	0x88(%rsp), %rdi
    00003a8c: 	je	.Ltmp944 # Offset: 14988
    00003a8e: 	movq	0x1f0(%rsp), %rax
    00003a96: 	leaq	0x1(%rax), %rsi
    00003a9a: 	callq	_ZdlPvm@PLT # Offset: 15002
.Ltmp944:
    00003a9f: 	movq	0xb0(%rsp), %rsi
    00003aa7: 	leaq	DATAat0x2b4e3(%rip), %rdx
    00003aae: 	movq	%r14, %rdi
    00003ab1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15025
    00003ab6: 	callq	clock@PLT # Offset: 15030
    00003abb: 	movl	iterations(%rip), %r13d
    00003ac2: 	movq	%rax, start_time(%rip)
    00003ac9: 	testl	%r13d, %r13d
    00003acc: 	jle	.Ltmp945 # Offset: 15052
    00003ad2: 	movsd	DATAat0x2b658(%rip), %xmm5
    00003ada: 	movsd	DATAat0x2b648(%rip), %xmm7
    00003ae2: 	pxor	%xmm6, %xmm6
    00003ae6: 	xorl	%r12d, %r12d
    00003ae9: 	movsd	%xmm6, (%rsp)
    00003aee: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003af5: 	movsd	%xmm5, 0x8(%rsp)
    00003afb: 	movsd	%xmm7, 0x18(%rsp)
    00003b01: 	nopl	(%rax) # Size: 7
.Ltmp949:
    00003b08: 	movq	%rbp, %rax
    00003b0b: 	pxor	%xmm1, %xmm1
    00003b0f: 	nop # Size: 1
.Ltmp946:
    00003b10: 	addpd	(%rax), %xmm1
    00003b14: 	addq	$0x10, %rax
    00003b18: 	cmpq	%rax, %rbx
    00003b1b: 	jne	.Ltmp946 # Offset: 15131
    00003b1d: 	movsd	(%rsp), %xmm7
    00003b22: 	movapd	%xmm1, %xmm5
    00003b26: 	unpckhpd	%xmm1, %xmm1
    00003b2a: 	movsd	init_value(%rip), %xmm6
    00003b32: 	movapd	%xmm1, %xmm4
    00003b36: 	movsd	0x18(%rsp), %xmm0
    00003b3c: 	movapd	%xmm7, %xmm1
    00003b40: 	mulsd	%xmm6, %xmm1
    00003b44: 	mulsd	%xmm6, %xmm0
    00003b48: 	addsd	%xmm7, %xmm1
    00003b4c: 	ucomisd	%xmm1, %xmm0
    00003b50: 	jp	.Ltmp947 # Offset: 15184
.Ltmp1090:
    00003b56: 	subsd	%xmm0, %xmm5
    00003b5a: 	subsd	%xmm1, %xmm4
    00003b5e: 	movapd	%xmm5, %xmm0
    00003b62: 	movapd	%xmm4, %xmm1
    00003b66: 	callq	cabs@PLT # Offset: 15206
    00003b6b: 	movsd	0x8(%rsp), %xmm6
    00003b71: 	comisd	%xmm0, %xmm6
    00003b75: 	jbe	.Ltmp948 # Offset: 15221
.Ltmp990:
    00003b7b: 	addl	$0x1, %r12d
    00003b7f: 	cmpl	%r13d, %r12d
    00003b82: 	jl	.Ltmp949 # Offset: 15234
.Ltmp945:
    00003b88: 	movq	%r14, %rsi
    00003b8b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003b92: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15250
    00003b97: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003b9e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003ba5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003bac: 	je	.Ltmp950 # Offset: 15276
.Ltmp1024:
    00003bb2: 	movq	-0x20(%rax), %r12
    00003bb6: 	callq	clock@PLT # Offset: 15286
    00003bbb: 	pxor	%xmm0, %xmm0
    00003bbf: 	movq	%rax, end_time(%rip)
    00003bc6: 	movq	%r12, %rdi
    00003bc9: 	subq	start_time(%rip), %rax
    00003bd0: 	cvtsi2sd	%rax, %xmm0
    00003bd5: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003bdd: 	callq	_Z13record_resultdPKc # Offset: 15325
    00003be2: 	movq	0x1e0(%rsp), %rdi
    00003bea: 	cmpq	0x88(%rsp), %rdi
    00003bf2: 	je	.Ltmp951 # Offset: 15346
    00003bf4: 	movq	0x1f0(%rsp), %rax
    00003bfc: 	leaq	0x1(%rax), %rsi
    00003c00: 	callq	_ZdlPvm@PLT # Offset: 15360
.Ltmp951:
    00003c05: 	movq	0xb0(%rsp), %rsi
    00003c0d: 	leaq	DATAat0x2b4f1(%rip), %rdx
    00003c14: 	movq	%r14, %rdi
    00003c17: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15383
    00003c1c: 	callq	clock@PLT # Offset: 15388
    00003c21: 	movl	iterations(%rip), %r13d
    00003c28: 	movq	%rax, start_time(%rip)
    00003c2f: 	testl	%r13d, %r13d
    00003c32: 	jle	.Ltmp952 # Offset: 15410
    00003c38: 	movsd	DATAat0x2b658(%rip), %xmm5
    00003c40: 	movsd	DATAat0x2b648(%rip), %xmm7
    00003c48: 	pxor	%xmm6, %xmm6
    00003c4c: 	xorl	%r12d, %r12d
    00003c4f: 	movsd	%xmm6, (%rsp)
    00003c54: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003c5b: 	movsd	%xmm5, 0x8(%rsp)
    00003c61: 	movsd	%xmm7, 0x18(%rsp)
    00003c67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp956:
    00003c70: 	pxor	%xmm1, %xmm1
    00003c74: 	movq	%rbp, %rax
    00003c77: 	movapd	%xmm1, %xmm2
    00003c7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp953:
    00003c80: 	movapd	%xmm2, %xmm0
    00003c84: 	subpd	(%rax), %xmm0
    00003c88: 	addq	$0x10, %rax
    00003c8c: 	addpd	%xmm0, %xmm1
    00003c90: 	cmpq	%rbx, %rax
    00003c93: 	jne	.Ltmp953 # Offset: 15507
    00003c95: 	movsd	(%rsp), %xmm7
    00003c9a: 	movapd	%xmm1, %xmm5
    00003c9e: 	unpckhpd	%xmm1, %xmm1
    00003ca2: 	movsd	0x18(%rsp), %xmm0
    00003ca8: 	movapd	%xmm1, %xmm4
    00003cac: 	movapd	%xmm7, %xmm6
    00003cb0: 	subsd	init_value(%rip), %xmm6
    00003cb8: 	movapd	%xmm7, %xmm1
    00003cbc: 	mulsd	%xmm6, %xmm1
    00003cc0: 	mulsd	%xmm6, %xmm0
    00003cc4: 	addsd	%xmm7, %xmm1
    00003cc8: 	ucomisd	%xmm1, %xmm0
    00003ccc: 	jp	.Ltmp954 # Offset: 15564
.Ltmp1091:
    00003cd2: 	subsd	%xmm0, %xmm5
    00003cd6: 	subsd	%xmm1, %xmm4
    00003cda: 	movapd	%xmm5, %xmm0
    00003cde: 	movapd	%xmm4, %xmm1
    00003ce2: 	callq	cabs@PLT # Offset: 15586
    00003ce7: 	movsd	0x8(%rsp), %xmm7
    00003ced: 	comisd	%xmm0, %xmm7
    00003cf1: 	jbe	.Ltmp955 # Offset: 15601
.Ltmp989:
    00003cf7: 	addl	$0x1, %r12d
    00003cfb: 	cmpl	%r13d, %r12d
    00003cfe: 	jl	.Ltmp956 # Offset: 15614
.Ltmp952:
    00003d04: 	movq	%r14, %rsi
    00003d07: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d0e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15630
    00003d13: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003d1a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003d21: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003d28: 	je	.Ltmp957 # Offset: 15656
.Ltmp1023:
    00003d2e: 	movq	-0x20(%rax), %r12
    00003d32: 	callq	clock@PLT # Offset: 15666
    00003d37: 	pxor	%xmm0, %xmm0
    00003d3b: 	movq	%rax, end_time(%rip)
    00003d42: 	movq	%r12, %rdi
    00003d45: 	subq	start_time(%rip), %rax
    00003d4c: 	cvtsi2sd	%rax, %xmm0
    00003d51: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003d59: 	callq	_Z13record_resultdPKc # Offset: 15705
    00003d5e: 	movq	0x1e0(%rsp), %rdi
    00003d66: 	cmpq	0x88(%rsp), %rdi
    00003d6e: 	je	.Ltmp958 # Offset: 15726
    00003d70: 	movq	0x1f0(%rsp), %rax
    00003d78: 	leaq	0x1(%rax), %rsi
    00003d7c: 	callq	_ZdlPvm@PLT # Offset: 15740
.Ltmp958:
    00003d81: 	movq	0xb0(%rsp), %rsi
    00003d89: 	leaq	DATAat0x2b4fd(%rip), %rdx
    00003d90: 	movq	%r14, %rdi
    00003d93: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15763
    00003d98: 	movq	%r14, %rdx
    00003d9b: 	movl	$0x1f40, %esi
    00003da0: 	movq	%rbp, %rdi
    00003da3: 	callq	_Z13test_constantISt7complexIdE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15779
    00003da8: 	movq	0x1e0(%rsp), %rdi
    00003db0: 	cmpq	0x88(%rsp), %rdi
    00003db8: 	je	.Ltmp959 # Offset: 15800
    00003dba: 	movq	0x1f0(%rsp), %rax
    00003dc2: 	leaq	0x1(%rax), %rsi
    00003dc6: 	callq	_ZdlPvm@PLT # Offset: 15814
.Ltmp959:
    00003dcb: 	movq	0xb0(%rsp), %rsi
    00003dd3: 	leaq	DATAat0x2b508(%rip), %rdx
    00003dda: 	movq	%r14, %rdi
    00003ddd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15837
    00003de2: 	callq	clock@PLT # Offset: 15842
    00003de7: 	movl	iterations(%rip), %r13d
    00003dee: 	movq	%rax, start_time(%rip)
    00003df5: 	testl	%r13d, %r13d
    00003df8: 	jle	.Ltmp960 # Offset: 15864
    00003dfe: 	movsd	DATAat0x2b658(%rip), %xmm5
    00003e06: 	movsd	DATAat0x2b648(%rip), %xmm7
    00003e0e: 	pxor	%xmm6, %xmm6
    00003e12: 	xorl	%r12d, %r12d
    00003e15: 	movsd	%xmm6, (%rsp)
    00003e1a: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003e21: 	movsd	%xmm5, 0x8(%rsp)
    00003e27: 	movsd	%xmm7, 0x18(%rsp)
    00003e2d: 	nopl	(%rax) # Size: 3
.Ltmp964:
    00003e30: 	movq	%rbp, %rax
    00003e33: 	pxor	%xmm1, %xmm1
    00003e37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp961:
    00003e40: 	addpd	(%rax), %xmm1
    00003e44: 	addq	$0x10, %rax
    00003e48: 	cmpq	%rax, %rbx
    00003e4b: 	jne	.Ltmp961 # Offset: 15947
    00003e4d: 	movsd	(%rsp), %xmm7
    00003e52: 	movapd	%xmm1, %xmm5
    00003e56: 	unpckhpd	%xmm1, %xmm1
    00003e5a: 	movsd	init_value(%rip), %xmm6
    00003e62: 	movapd	%xmm1, %xmm4
    00003e66: 	movsd	0x18(%rsp), %xmm0
    00003e6c: 	movapd	%xmm7, %xmm1
    00003e70: 	mulsd	%xmm6, %xmm1
    00003e74: 	mulsd	%xmm6, %xmm0
    00003e78: 	addsd	%xmm7, %xmm1
    00003e7c: 	ucomisd	%xmm1, %xmm0
    00003e80: 	jp	.Ltmp962 # Offset: 16000
.Ltmp1089:
    00003e86: 	subsd	%xmm0, %xmm5
    00003e8a: 	subsd	%xmm1, %xmm4
    00003e8e: 	movapd	%xmm5, %xmm0
    00003e92: 	movapd	%xmm4, %xmm1
    00003e96: 	callq	cabs@PLT # Offset: 16022
    00003e9b: 	movsd	0x8(%rsp), %xmm6
    00003ea1: 	comisd	%xmm0, %xmm6
    00003ea5: 	jbe	.Ltmp963 # Offset: 16037
.Ltmp988:
    00003eab: 	addl	$0x1, %r12d
    00003eaf: 	cmpl	%r13d, %r12d
    00003eb2: 	jl	.Ltmp964 # Offset: 16050
.Ltmp960:
    00003eb8: 	movq	%r14, %rsi
    00003ebb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003ec2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16066
    00003ec7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003ece: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003ed5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003edc: 	je	.Ltmp965 # Offset: 16092
.Ltmp1022:
    00003ee2: 	movq	-0x20(%rax), %r12
    00003ee6: 	callq	clock@PLT # Offset: 16102
    00003eeb: 	pxor	%xmm0, %xmm0
    00003eef: 	movq	%rax, end_time(%rip)
    00003ef6: 	movq	%r12, %rdi
    00003ef9: 	subq	start_time(%rip), %rax
    00003f00: 	cvtsi2sd	%rax, %xmm0
    00003f05: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003f0d: 	callq	_Z13record_resultdPKc # Offset: 16141
    00003f12: 	movq	0x1e0(%rsp), %rdi
    00003f1a: 	cmpq	0x88(%rsp), %rdi
    00003f22: 	je	.Ltmp966 # Offset: 16162
    00003f24: 	movq	0x1f0(%rsp), %rax
    00003f2c: 	leaq	0x1(%rax), %rsi
    00003f30: 	callq	_ZdlPvm@PLT # Offset: 16176
.Ltmp966:
    00003f35: 	movq	0xb0(%rsp), %rsi
    00003f3d: 	leaq	DATAat0x2b517(%rip), %rdx
    00003f44: 	movq	%r14, %rdi
    00003f47: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16199
    00003f4c: 	movq	%r14, %rdx
    00003f4f: 	movl	$0x1f40, %esi
    00003f54: 	movq	%rbp, %rdi
    00003f57: 	callq	_Z13test_constantISt7complexIdE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16215
    00003f5c: 	movq	0x1e0(%rsp), %rdi
    00003f64: 	cmpq	0x88(%rsp), %rdi
    00003f6c: 	je	.Ltmp967 # Offset: 16236
    00003f6e: 	movq	0x1f0(%rsp), %rax
    00003f76: 	leaq	0x1(%rax), %rsi
    00003f7a: 	callq	_ZdlPvm@PLT # Offset: 16250
.Ltmp967:
    00003f7f: 	movq	0xb0(%rsp), %r15
    00003f87: 	leaq	0x1c0(%rsp), %rdi
    00003f8f: 	leaq	DATAat0x2b526(%rip), %rdx
    00003f96: 	movq	%r15, %rsi
    00003f99: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16281
    00003f9e: 	movl	iterations(%rip), %edx
    00003fa4: 	xorl	%r8d, %r8d
    00003fa7: 	xorl	%ecx, %ecx
    00003fa9: 	movl	$0x1f40, %esi
    00003fae: 	movq	0x1c0(%rsp), %rdi
    00003fb6: 	callq	_Z9summarizePKciiii # Offset: 16310
    00003fbb: 	leaq	DATAat0x2b4c6(%rip), %rdx
    00003fc2: 	movq	%r15, %rsi
    00003fc5: 	movq	%r14, %rdi
    00003fc8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16328
    00003fcd: 	callq	clock@PLT # Offset: 16333
    00003fd2: 	movq	%r14, %rsi
    00003fd5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003fdc: 	movq	%rax, start_time(%rip)
    00003fe3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16355
    00003fe8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003fef: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003ff6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003ffd: 	je	.Ltmp968 # Offset: 16381
.Ltmp1021:
    00004003: 	movq	-0x20(%rax), %r12
    00004007: 	callq	clock@PLT # Offset: 16391
    0000400c: 	pxor	%xmm0, %xmm0
    00004010: 	movq	%rax, end_time(%rip)
    00004017: 	movq	%r12, %rdi
    0000401a: 	subq	start_time(%rip), %rax
    00004021: 	cvtsi2sd	%rax, %xmm0
    00004026: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000402e: 	callq	_Z13record_resultdPKc # Offset: 16430
    00004033: 	movq	0x1e0(%rsp), %rdi
    0000403b: 	cmpq	0x88(%rsp), %rdi
    00004043: 	je	.Ltmp969 # Offset: 16451
    00004045: 	movq	0x1f0(%rsp), %rax
    0000404d: 	leaq	0x1(%rax), %rsi
    00004051: 	callq	_ZdlPvm@PLT # Offset: 16465
.Ltmp969:
    00004056: 	movq	0xb0(%rsp), %rsi
    0000405e: 	leaq	DATAat0x2b540(%rip), %rdx
    00004065: 	movq	%r14, %rdi
    00004068: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16488
    0000406d: 	movq	%r14, %rdx
    00004070: 	movl	$0x1f40, %esi
    00004075: 	movq	%rbp, %rdi
    00004078: 	callq	_Z13test_constantISt7complexIdE17custom_times_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16504
    0000407d: 	movq	0x1e0(%rsp), %rdi
    00004085: 	cmpq	0x88(%rsp), %rdi
    0000408d: 	je	.Ltmp970 # Offset: 16525
    0000408f: 	movq	0x1f0(%rsp), %rax
    00004097: 	leaq	0x1(%rax), %rsi
    0000409b: 	callq	_ZdlPvm@PLT # Offset: 16539
.Ltmp970:
    000040a0: 	movq	0xb0(%rsp), %rsi
    000040a8: 	leaq	DATAat0x2b54c(%rip), %rdx
    000040af: 	movq	%r14, %rdi
    000040b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16562
    000040b7: 	callq	clock@PLT # Offset: 16567
    000040bc: 	movl	iterations(%rip), %r13d
    000040c3: 	movq	%rax, start_time(%rip)
    000040ca: 	testl	%r13d, %r13d
    000040cd: 	jle	.Ltmp971 # Offset: 16589
    000040d3: 	movsd	DATAat0x2b658(%rip), %xmm5
    000040db: 	movsd	DATAat0x2b648(%rip), %xmm7
    000040e3: 	pxor	%xmm6, %xmm6
    000040e7: 	xorl	%r12d, %r12d
    000040ea: 	movsd	%xmm6, (%rsp)
    000040ef: 	leaq	DATAat0x2b1d0(%rip), %r15
    000040f6: 	movsd	%xmm5, 0x8(%rsp)
    000040fc: 	movsd	%xmm7, 0x18(%rsp)
    00004102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp975:
    00004108: 	movq	%rbp, %rax
    0000410b: 	pxor	%xmm1, %xmm1
    0000410f: 	nop # Size: 1
.Ltmp972:
    00004110: 	movapd	(%rax), %xmm0
    00004114: 	addq	$0x10, %rax
    00004118: 	subpd	%xmm0, %xmm0
    0000411c: 	addpd	%xmm0, %xmm1
    00004120: 	cmpq	%rbx, %rax
    00004123: 	jne	.Ltmp972 # Offset: 16675
    00004125: 	movsd	(%rsp), %xmm7
    0000412a: 	movapd	%xmm1, %xmm6
    0000412e: 	unpckhpd	%xmm1, %xmm1
    00004132: 	movsd	init_value(%rip), %xmm5
    0000413a: 	movapd	%xmm1, %xmm4
    0000413e: 	movsd	0x18(%rsp), %xmm0
    00004144: 	subsd	%xmm5, %xmm5
    00004148: 	movapd	%xmm7, %xmm1
    0000414c: 	mulsd	%xmm5, %xmm1
    00004150: 	mulsd	%xmm5, %xmm0
    00004154: 	addsd	%xmm7, %xmm1
    00004158: 	ucomisd	%xmm1, %xmm0
    0000415c: 	jp	.Ltmp973 # Offset: 16732
.Ltmp1092:
    00004162: 	subsd	%xmm0, %xmm6
    00004166: 	subsd	%xmm1, %xmm4
    0000416a: 	movapd	%xmm6, %xmm0
    0000416e: 	movapd	%xmm4, %xmm1
    00004172: 	callq	cabs@PLT # Offset: 16754
    00004177: 	movsd	0x8(%rsp), %xmm7
    0000417d: 	comisd	%xmm0, %xmm7
    00004181: 	jbe	.Ltmp974 # Offset: 16769
.Ltmp987:
    00004187: 	addl	$0x1, %r12d
    0000418b: 	cmpl	%r13d, %r12d
    0000418e: 	jl	.Ltmp975 # Offset: 16782
.Ltmp971:
    00004194: 	movq	%r14, %rsi
    00004197: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000419e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16798
    000041a3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000041aa: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000041b1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000041b8: 	je	.Ltmp976 # Offset: 16824
.Ltmp1020:
    000041be: 	movq	-0x20(%rax), %r12
    000041c2: 	callq	clock@PLT # Offset: 16834
    000041c7: 	pxor	%xmm0, %xmm0
    000041cb: 	movq	%rax, end_time(%rip)
    000041d2: 	movq	%r12, %rdi
    000041d5: 	subq	start_time(%rip), %rax
    000041dc: 	cvtsi2sd	%rax, %xmm0
    000041e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000041e9: 	callq	_Z13record_resultdPKc # Offset: 16873
    000041ee: 	movq	0x1e0(%rsp), %rdi
    000041f6: 	cmpq	0x88(%rsp), %rdi
    000041fe: 	je	.Ltmp977 # Offset: 16894
    00004200: 	movq	0x1f0(%rsp), %rax
    00004208: 	leaq	0x1(%rax), %rsi
    0000420c: 	callq	_ZdlPvm@PLT # Offset: 16908
.Ltmp977:
    00004211: 	movq	0xb0(%rsp), %rsi
    00004219: 	leaq	DATAat0x2b55b(%rip), %rdx
    00004220: 	movq	%r14, %rdi
    00004223: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16931
    00004228: 	movq	%r14, %rdx
    0000422b: 	movl	$0x1f40, %esi
    00004230: 	movq	%rbp, %rdi
    00004233: 	callq	_Z13test_constantISt7complexIdE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16947
    00004238: 	movq	0x1e0(%rsp), %rdi
    00004240: 	cmpq	0x88(%rsp), %rdi
    00004248: 	je	.Ltmp978 # Offset: 16968
    0000424a: 	movq	0x1f0(%rsp), %rax
    00004252: 	leaq	0x1(%rax), %rsi
    00004256: 	callq	_ZdlPvm@PLT # Offset: 16982
.Ltmp978:
    0000425b: 	movq	0xb0(%rsp), %rsi
    00004263: 	leaq	DATAat0x2b5d0(%rip), %rdx
    0000426a: 	movq	%r14, %rdi
    0000426d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17005
    00004272: 	movl	iterations(%rip), %edx
    00004278: 	xorl	%r8d, %r8d
    0000427b: 	xorl	%ecx, %ecx
    0000427d: 	movl	$0x1f40, %esi
    00004282: 	movq	0x1e0(%rsp), %rdi
    0000428a: 	callq	_Z9summarizePKciiii # Offset: 17034
    0000428f: 	movq	0x1e0(%rsp), %rdi
    00004297: 	cmpq	0x88(%rsp), %rdi
    0000429f: 	je	.Ltmp979 # Offset: 17055
    000042a1: 	movq	0x1f0(%rsp), %rax
    000042a9: 	leaq	0x1(%rax), %rsi
    000042ad: 	callq	_ZdlPvm@PLT # Offset: 17069
.Ltmp979:
    000042b2: 	movq	0x1c0(%rsp), %rdi
    000042ba: 	leaq	0x1d0(%rsp), %rax
    000042c2: 	cmpq	%rax, %rdi
    000042c5: 	je	.Ltmp980 # Offset: 17093
    000042c7: 	movq	0x1d0(%rsp), %rax
    000042cf: 	leaq	0x1(%rax), %rsi
    000042d3: 	callq	_ZdlPvm@PLT # Offset: 17107
.Ltmp980:
    000042d8: 	movq	0x1a0(%rsp), %rdi
    000042e0: 	leaq	0x1b0(%rsp), %rax
    000042e8: 	cmpq	%rax, %rdi
    000042eb: 	je	.Ltmp981 # Offset: 17131
    000042ed: 	movq	0x1b0(%rsp), %rax
    000042f5: 	leaq	0x1(%rax), %rsi
    000042f9: 	callq	_ZdlPvm@PLT # Offset: 17145
.Ltmp981:
    000042fe: 	movq	0x180(%rsp), %rdi
    00004306: 	leaq	0x190(%rsp), %rax
    0000430e: 	cmpq	%rax, %rdi
    00004311: 	je	.Ltmp982 # Offset: 17169
    00004313: 	movq	0x190(%rsp), %rax
    0000431b: 	leaq	0x1(%rax), %rsi
    0000431f: 	callq	_ZdlPvm@PLT # Offset: 17183
.Ltmp982:
    00004324: 	movq	0x160(%rsp), %rdi
    0000432c: 	leaq	0x170(%rsp), %rax
    00004334: 	cmpq	%rax, %rdi
    00004337: 	je	.Ltmp983 # Offset: 17207
    00004339: 	movq	0x170(%rsp), %rax
    00004341: 	leaq	0x1(%rax), %rsi
    00004345: 	callq	_ZdlPvm@PLT # Offset: 17221
.Ltmp983:
    0000434a: 	movq	0x140(%rsp), %rdi
    00004352: 	leaq	0x150(%rsp), %rax
    0000435a: 	cmpq	%rax, %rdi
    0000435d: 	je	.Ltmp984 # Offset: 17245
    0000435f: 	movq	0x150(%rsp), %rax
    00004367: 	leaq	0x1(%rax), %rsi
    0000436b: 	callq	_ZdlPvm@PLT # Offset: 17259
.Ltmp984:
    00004370: 	movq	0x120(%rsp), %rdi
    00004378: 	cmpq	0xc0(%rsp), %rdi
    00004380: 	je	.Ltmp985 # Offset: 17280
    00004382: 	movq	0x130(%rsp), %rax
    0000438a: 	leaq	0x1(%rax), %rsi
    0000438e: 	callq	_ZdlPvm@PLT # Offset: 17294
.Ltmp985:
    00004393: 	movq	0x1f608(%rsp), %rax
    0000439b: 	subq	%fs:0x28, %rax
    000043a4: 	jne	.Ltmp986 # Offset: 17316
    000043aa: 	addq	$0x1f618, %rsp
    000043b1: 	popq	%rbx
    000043b2: 	popq	%rbp
    000043b3: 	popq	%r12
    000043b5: 	popq	%r13
    000043b7: 	popq	%r14
    000043b9: 	popq	%r15
    000043bb: 	retq # Offset: 17339
    000043bc: 	nopl	(%rax) # Size: 4
.Ltmp974:
    000043c0: 	movl	current_test(%rip), %edx
    000043c6: 	movq	%r15, %rsi
    000043c9: 	movl	$0x1, %edi
    000043ce: 	xorl	%eax, %eax
    000043d0: 	callq	__printf_chk@PLT # Offset: 17360
    000043d5: 	movl	iterations(%rip), %r13d
    000043dc: 	jmp	.Ltmp987 # Offset: 17372
    000043e1: 	nopl	(%rax) # Size: 7
.Ltmp963:
    000043e8: 	movl	current_test(%rip), %edx
    000043ee: 	movq	%r15, %rsi
    000043f1: 	movl	$0x1, %edi
    000043f6: 	xorl	%eax, %eax
    000043f8: 	callq	__printf_chk@PLT # Offset: 17400
    000043fd: 	movl	iterations(%rip), %r13d
    00004404: 	jmp	.Ltmp988 # Offset: 17412
    00004409: 	nopl	(%rax) # Size: 7
.Ltmp955:
    00004410: 	movl	current_test(%rip), %edx
    00004416: 	movq	%r15, %rsi
    00004419: 	movl	$0x1, %edi
    0000441e: 	xorl	%eax, %eax
    00004420: 	callq	__printf_chk@PLT # Offset: 17440
    00004425: 	movl	iterations(%rip), %r13d
    0000442c: 	jmp	.Ltmp989 # Offset: 17452
    00004431: 	nopl	(%rax) # Size: 7
.Ltmp948:
    00004438: 	movl	current_test(%rip), %edx
    0000443e: 	movq	%r15, %rsi
    00004441: 	movl	$0x1, %edi
    00004446: 	xorl	%eax, %eax
    00004448: 	callq	__printf_chk@PLT # Offset: 17480
    0000444d: 	movl	iterations(%rip), %r13d
    00004454: 	jmp	.Ltmp990 # Offset: 17492
    00004459: 	nopl	(%rax) # Size: 7
.Ltmp940:
    00004460: 	movl	current_test(%rip), %edx
    00004466: 	movq	%r15, %rsi
    00004469: 	movl	$0x1, %edi
    0000446e: 	xorl	%eax, %eax
    00004470: 	callq	__printf_chk@PLT # Offset: 17520
    00004475: 	movl	iterations(%rip), %r13d
    0000447c: 	jmp	.Ltmp991 # Offset: 17532
    00004481: 	nopl	(%rax) # Size: 7
.Ltmp932:
    00004488: 	movl	current_test(%rip), %edx
    0000448e: 	movq	%r15, %rsi
    00004491: 	movl	$0x1, %edi
    00004496: 	xorl	%eax, %eax
    00004498: 	callq	__printf_chk@PLT # Offset: 17560
    0000449d: 	movl	iterations(%rip), %r13d
    000044a4: 	jmp	.Ltmp992 # Offset: 17572
    000044a9: 	nopl	(%rax) # Size: 7
.Ltmp922:
    000044b0: 	movl	current_test(%rip), %edx
    000044b6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000044bd: 	movl	$0x1, %edi
    000044c2: 	xorl	%eax, %eax
    000044c4: 	callq	__printf_chk@PLT # Offset: 17604
    000044c9: 	movl	iterations(%rip), %r13d
    000044d0: 	jmp	.Ltmp993 # Offset: 17616
    000044d5: 	nopl	(%rax) # Size: 3
.Ltmp916:
    000044d8: 	movl	current_test(%rip), %edx
    000044de: 	movq	%r15, %rsi
    000044e1: 	movl	$0x1, %edi
    000044e6: 	xorl	%eax, %eax
    000044e8: 	callq	__printf_chk@PLT # Offset: 17640
    000044ed: 	movl	iterations(%rip), %r13d
    000044f4: 	jmp	.Ltmp994 # Offset: 17652
    000044f9: 	nopl	(%rax) # Size: 7
.Ltmp908:
    00004500: 	movl	current_test(%rip), %edx
    00004506: 	movq	%r15, %rsi
    00004509: 	movl	$0x1, %edi
    0000450e: 	xorl	%eax, %eax
    00004510: 	callq	__printf_chk@PLT # Offset: 17680
    00004515: 	movl	iterations(%rip), %r13d
    0000451c: 	jmp	.Ltmp995 # Offset: 17692
    00004521: 	nopl	(%rax) # Size: 7
.Ltmp900:
    00004528: 	movl	current_test(%rip), %edx
    0000452e: 	movq	%r15, %rsi
    00004531: 	movl	$0x1, %edi
    00004536: 	xorl	%eax, %eax
    00004538: 	callq	__printf_chk@PLT # Offset: 17720
    0000453d: 	movl	iterations(%rip), %r13d
    00004544: 	jmp	.Ltmp996 # Offset: 17732
    00004549: 	nopl	(%rax) # Size: 7
.Ltmp893:
    00004550: 	movl	current_test(%rip), %edx
    00004556: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000455d: 	movl	$0x1, %edi
    00004562: 	xorl	%eax, %eax
    00004564: 	callq	__printf_chk@PLT # Offset: 17764
    00004569: 	movl	iterations(%rip), %r13d
    00004570: 	jmp	.Ltmp997 # Offset: 17776
    00004575: 	nopl	(%rax) # Size: 3
.Ltmp886:
    00004578: 	movl	current_test(%rip), %edx
    0000457e: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00004585: 	movl	$0x1, %edi
    0000458a: 	xorl	%eax, %eax
    0000458c: 	callq	__printf_chk@PLT # Offset: 17804
    00004591: 	movl	iterations(%rip), %r13d
    00004598: 	jmp	.Ltmp998 # Offset: 17816
    0000459d: 	nopl	(%rax) # Size: 3
.Ltmp879:
    000045a0: 	movl	current_test(%rip), %edx
    000045a6: 	movq	%r15, %rsi
    000045a9: 	movl	$0x1, %edi
    000045ae: 	xorl	%eax, %eax
    000045b0: 	callq	__printf_chk@PLT # Offset: 17840
    000045b5: 	movl	iterations(%rip), %r13d
    000045bc: 	jmp	.Ltmp999 # Offset: 17852
    000045c1: 	nopl	(%rax) # Size: 7
.Ltmp864:
    000045c8: 	movl	current_test(%rip), %edx
    000045ce: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000045d5: 	movl	$0x1, %edi
    000045da: 	xorl	%eax, %eax
    000045dc: 	callq	__printf_chk@PLT # Offset: 17884
    000045e1: 	movl	iterations(%rip), %r13d
    000045e8: 	jmp	.Ltmp1000 # Offset: 17896
    000045ed: 	nopl	(%rax) # Size: 3
.Ltmp854:
    000045f0: 	movl	current_test(%rip), %edx
    000045f6: 	movq	%r15, %rsi
    000045f9: 	movl	$0x1, %edi
    000045fe: 	xorl	%eax, %eax
    00004600: 	callq	__printf_chk@PLT # Offset: 17920
    00004605: 	movl	iterations(%rip), %r13d
    0000460c: 	jmp	.Ltmp1001 # Offset: 17932
    00004611: 	nopl	(%rax) # Size: 7
.Ltmp842:
    00004618: 	movl	current_test(%rip), %edx
    0000461e: 	movq	%r15, %rsi
    00004621: 	movl	$0x1, %edi
    00004626: 	xorl	%eax, %eax
    00004628: 	callq	__printf_chk@PLT # Offset: 17960
    0000462d: 	movl	iterations(%rip), %r13d
    00004634: 	jmp	.Ltmp1002 # Offset: 17972
    00004639: 	nopl	(%rax) # Size: 7
.Ltmp833:
    00004640: 	movl	current_test(%rip), %edx
    00004646: 	movq	%r15, %rsi
    00004649: 	movl	$0x1, %edi
    0000464e: 	xorl	%eax, %eax
    00004650: 	callq	__printf_chk@PLT # Offset: 18000
    00004655: 	movl	iterations(%rip), %r13d
    0000465c: 	jmp	.Ltmp1003 # Offset: 18012
    00004661: 	nopl	(%rax) # Size: 7
.Ltmp826:
    00004668: 	movl	current_test(%rip), %edx
    0000466e: 	movq	%r15, %rsi
    00004671: 	movl	$0x1, %edi
    00004676: 	xorl	%eax, %eax
    00004678: 	callq	__printf_chk@PLT # Offset: 18040
    0000467d: 	movl	iterations(%rip), %r13d
    00004684: 	jmp	.Ltmp1004 # Offset: 18052
    00004689: 	nopl	(%rax) # Size: 7
.Ltmp819:
    00004690: 	movl	current_test(%rip), %edx
    00004696: 	movq	%r15, %rsi
    00004699: 	movl	$0x1, %edi
    0000469e: 	xorl	%eax, %eax
    000046a0: 	callq	__printf_chk@PLT # Offset: 18080
    000046a5: 	movl	iterations(%rip), %r13d
    000046ac: 	jmp	.Ltmp1005 # Offset: 18092
    000046b1: 	nopl	(%rax) # Size: 7
.Ltmp812:
    000046b8: 	movl	current_test(%rip), %edx
    000046be: 	movq	%r15, %rsi
    000046c1: 	movl	$0x1, %edi
    000046c6: 	xorl	%eax, %eax
    000046c8: 	callq	__printf_chk@PLT # Offset: 18120
    000046cd: 	movl	iterations(%rip), %r13d
    000046d4: 	jmp	.Ltmp1006 # Offset: 18132
    000046d9: 	nopl	(%rax) # Size: 7
.Ltmp805:
    000046e0: 	movl	current_test(%rip), %edx
    000046e6: 	movq	%r15, %rsi
    000046e9: 	movl	$0x1, %edi
    000046ee: 	xorl	%eax, %eax
    000046f0: 	callq	__printf_chk@PLT # Offset: 18160
    000046f5: 	movl	iterations(%rip), %r13d
    000046fc: 	jmp	.Ltmp1007 # Offset: 18172
    00004701: 	nopl	(%rax) # Size: 7
.Ltmp798:
    00004708: 	movl	current_test(%rip), %edx
    0000470e: 	movq	%r15, %rsi
    00004711: 	movl	$0x1, %edi
    00004716: 	xorl	%eax, %eax
    00004718: 	callq	__printf_chk@PLT # Offset: 18200
    0000471d: 	movl	iterations(%rip), %r13d
    00004724: 	jmp	.Ltmp1008 # Offset: 18212
    00004729: 	nopl	(%rax) # Size: 7
.Ltmp790:
    00004730: 	movl	current_test(%rip), %edx
    00004736: 	movq	%r15, %rsi
    00004739: 	movl	$0x1, %edi
    0000473e: 	xorl	%eax, %eax
    00004740: 	callq	__printf_chk@PLT # Offset: 18240
    00004745: 	movl	iterations(%rip), %r13d
    0000474c: 	jmp	.Ltmp1009 # Offset: 18252
    00004751: 	nopl	(%rax) # Size: 7
.Ltmp782:
    00004758: 	movl	current_test(%rip), %edx
    0000475e: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00004765: 	movl	$0x1, %edi
    0000476a: 	xorl	%eax, %eax
    0000476c: 	callq	__printf_chk@PLT # Offset: 18284
    00004771: 	movl	iterations(%rip), %r13d
    00004778: 	jmp	.Ltmp1010 # Offset: 18296
    0000477d: 	nopl	(%rax) # Size: 3
.Ltmp773:
    00004780: 	movl	current_test(%rip), %edx
    00004786: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000478d: 	movl	$0x1, %edi
    00004792: 	xorl	%eax, %eax
    00004794: 	callq	__printf_chk@PLT # Offset: 18324
    00004799: 	movl	iterations(%rip), %r13d
    000047a0: 	jmp	.Ltmp1011 # Offset: 18336
    000047a5: 	nopl	(%rax) # Size: 3
.Ltmp761:
    000047a8: 	movl	current_test(%rip), %edx
    000047ae: 	movq	%r15, %rsi
    000047b1: 	movl	$0x1, %edi
    000047b6: 	xorl	%eax, %eax
    000047b8: 	callq	__printf_chk@PLT # Offset: 18360
    000047bd: 	movl	iterations(%rip), %r13d
    000047c4: 	jmp	.Ltmp1012 # Offset: 18372
    000047c9: 	nopl	(%rax) # Size: 7
.Ltmp754:
    000047d0: 	movl	current_test(%rip), %edx
    000047d6: 	movq	%r13, %rsi
    000047d9: 	movl	$0x1, %edi
    000047de: 	xorl	%eax, %eax
    000047e0: 	callq	__printf_chk@PLT # Offset: 18400
    000047e5: 	movl	iterations(%rip), %edx
    000047eb: 	jmp	.Ltmp1013 # Offset: 18411
.Ltmp746:
    000047f0: 	movl	current_test(%rip), %edx
    000047f6: 	movq	%r13, %rsi
    000047f9: 	movl	$0x1, %edi
    000047fe: 	xorl	%eax, %eax
    00004800: 	callq	__printf_chk@PLT # Offset: 18432
    00004805: 	movl	iterations(%rip), %edx
    0000480b: 	jmp	.Ltmp1014 # Offset: 18443
.Ltmp740:
    00004810: 	movl	current_test(%rip), %edx
    00004816: 	movq	%r13, %rsi
    00004819: 	movl	$0x1, %edi
    0000481e: 	xorl	%eax, %eax
    00004820: 	callq	__printf_chk@PLT # Offset: 18464
    00004825: 	movl	iterations(%rip), %edx
    0000482b: 	jmp	.Ltmp1015 # Offset: 18475
.Ltmp734:
    00004830: 	movl	current_test(%rip), %edx
    00004836: 	movq	%r13, %rsi
    00004839: 	movl	$0x1, %edi
    0000483e: 	xorl	%eax, %eax
    00004840: 	callq	__printf_chk@PLT # Offset: 18496
    00004845: 	movl	iterations(%rip), %edx
    0000484b: 	jmp	.Ltmp1016 # Offset: 18507
.Ltmp728:
    00004850: 	movl	current_test(%rip), %edx
    00004856: 	movq	%r13, %rsi
    00004859: 	movl	$0x1, %edi
    0000485e: 	xorl	%eax, %eax
    00004860: 	callq	__printf_chk@PLT # Offset: 18528
    00004865: 	movl	iterations(%rip), %edx
    0000486b: 	jmp	.Ltmp1017 # Offset: 18539
.Ltmp722:
    00004870: 	movl	current_test(%rip), %edx
    00004876: 	movq	%r13, %rsi
    00004879: 	movl	$0x1, %edi
    0000487e: 	xorl	%eax, %eax
    00004880: 	callq	__printf_chk@PLT # Offset: 18560
    00004885: 	movl	iterations(%rip), %edx
    0000488b: 	jmp	.Ltmp1018 # Offset: 18571
.Ltmp724:
    00004890: 	movq	-0x8(%rdx), %rax
    00004894: 	addq	$0x200, %rax
    0000489a: 	jmp	.Ltmp1019 # Offset: 18586
.Ltmp976:
    0000489f: 	movq	-0x8(%rdx), %rax
    000048a3: 	addq	$0x200, %rax
    000048a9: 	jmp	.Ltmp1020 # Offset: 18601
.Ltmp968:
    000048ae: 	movq	-0x8(%rdx), %rax
    000048b2: 	addq	$0x200, %rax
    000048b8: 	jmp	.Ltmp1021 # Offset: 18616
.Ltmp965:
    000048bd: 	movq	-0x8(%rdx), %rax
    000048c1: 	addq	$0x200, %rax
    000048c7: 	jmp	.Ltmp1022 # Offset: 18631
.Ltmp957:
    000048cc: 	movq	-0x8(%rdx), %rax
    000048d0: 	addq	$0x200, %rax
    000048d6: 	jmp	.Ltmp1023 # Offset: 18646
.Ltmp950:
    000048db: 	movq	-0x8(%rdx), %rax
    000048df: 	addq	$0x200, %rax
    000048e5: 	jmp	.Ltmp1024 # Offset: 18661
.Ltmp942:
    000048ea: 	movq	-0x8(%rdx), %rax
    000048ee: 	addq	$0x200, %rax
    000048f4: 	jmp	.Ltmp1025 # Offset: 18676
.Ltmp934:
    000048f9: 	movq	-0x8(%rdx), %rax
    000048fd: 	addq	$0x200, %rax
    00004903: 	jmp	.Ltmp1026 # Offset: 18691
.Ltmp924:
    00004908: 	movq	-0x8(%rdx), %rax
    0000490c: 	addq	$0x200, %rax
    00004912: 	jmp	.Ltmp1027 # Offset: 18706
.Ltmp918:
    00004917: 	movq	-0x8(%rdx), %rax
    0000491b: 	addq	$0x200, %rax
    00004921: 	jmp	.Ltmp1028 # Offset: 18721
.Ltmp910:
    00004926: 	movq	-0x8(%rdx), %rax
    0000492a: 	addq	$0x200, %rax
    00004930: 	jmp	.Ltmp1029 # Offset: 18736
.Ltmp902:
    00004935: 	movq	-0x8(%rdx), %rax
    00004939: 	addq	$0x200, %rax
    0000493f: 	jmp	.Ltmp1030 # Offset: 18751
.Ltmp895:
    00004944: 	movq	-0x8(%rdx), %rax
    00004948: 	addq	$0x200, %rax
    0000494e: 	jmp	.Ltmp1031 # Offset: 18766
.Ltmp888:
    00004953: 	movq	-0x8(%rdx), %rax
    00004957: 	addq	$0x200, %rax
    0000495d: 	jmp	.Ltmp1032 # Offset: 18781
.Ltmp881:
    00004962: 	movq	-0x8(%rdx), %rax
    00004966: 	addq	$0x200, %rax
    0000496c: 	jmp	.Ltmp1033 # Offset: 18796
.Ltmp866:
    00004971: 	movq	-0x8(%rdx), %rax
    00004975: 	addq	$0x200, %rax
    0000497b: 	jmp	.Ltmp1034 # Offset: 18811
.Ltmp856:
    00004980: 	movq	-0x8(%rdx), %rax
    00004984: 	addq	$0x200, %rax
    0000498a: 	jmp	.Ltmp1035 # Offset: 18826
.Ltmp844:
    0000498f: 	movq	-0x8(%rdx), %rax
    00004993: 	addq	$0x200, %rax
    00004999: 	jmp	.Ltmp1036 # Offset: 18841
.Ltmp835:
    0000499e: 	movq	-0x8(%rdx), %rax
    000049a2: 	addq	$0x200, %rax
    000049a8: 	jmp	.Ltmp1037 # Offset: 18856
.Ltmp828:
    000049ad: 	movq	-0x8(%rdx), %rax
    000049b1: 	addq	$0x200, %rax
    000049b7: 	jmp	.Ltmp1038 # Offset: 18871
.Ltmp821:
    000049bc: 	movq	-0x8(%rdx), %rax
    000049c0: 	addq	$0x200, %rax
    000049c6: 	jmp	.Ltmp1039 # Offset: 18886
.Ltmp814:
    000049cb: 	movq	-0x8(%rdx), %rax
    000049cf: 	addq	$0x200, %rax
    000049d5: 	jmp	.Ltmp1040 # Offset: 18901
.Ltmp807:
    000049da: 	movq	-0x8(%rdx), %rax
    000049de: 	addq	$0x200, %rax
    000049e4: 	jmp	.Ltmp1041 # Offset: 18916
.Ltmp800:
    000049e9: 	movq	-0x8(%rdx), %rax
    000049ed: 	addq	$0x200, %rax
    000049f3: 	jmp	.Ltmp1042 # Offset: 18931
.Ltmp792:
    000049f8: 	movq	-0x8(%rdx), %rax
    000049fc: 	addq	$0x200, %rax
    00004a02: 	jmp	.Ltmp1043 # Offset: 18946
.Ltmp784:
    00004a07: 	movq	-0x8(%rdx), %rax
    00004a0b: 	addq	$0x200, %rax
    00004a11: 	jmp	.Ltmp1044 # Offset: 18961
.Ltmp775:
    00004a16: 	movq	-0x8(%rdx), %rax
    00004a1a: 	addq	$0x200, %rax
    00004a20: 	jmp	.Ltmp1045 # Offset: 18976
.Ltmp763:
    00004a25: 	movq	-0x8(%rdx), %rax
    00004a29: 	addq	$0x200, %rax
    00004a2f: 	jmp	.Ltmp1046 # Offset: 18991
.Ltmp756:
    00004a34: 	movq	-0x8(%rdx), %rax
    00004a38: 	addq	$0x200, %rax
    00004a3e: 	jmp	.Ltmp1047 # Offset: 19006
.Ltmp750:
    00004a43: 	movq	-0x8(%rdx), %rax
    00004a47: 	addq	$0x200, %rax
    00004a4d: 	jmp	.Ltmp1048 # Offset: 19021
.Ltmp748:
    00004a52: 	movq	-0x8(%rdx), %rax
    00004a56: 	addq	$0x200, %rax
    00004a5c: 	jmp	.Ltmp1049 # Offset: 19036
.Ltmp742:
    00004a61: 	movq	-0x8(%rdx), %rax
    00004a65: 	addq	$0x200, %rax
    00004a6b: 	jmp	.Ltmp1050 # Offset: 19051
.Ltmp736:
    00004a70: 	movq	-0x8(%rdx), %rax
    00004a74: 	addq	$0x200, %rax
    00004a7a: 	jmp	.Ltmp1051 # Offset: 19066
.Ltmp730:
    00004a7f: 	movq	-0x8(%rdx), %rax
    00004a83: 	addq	$0x200, %rax
    00004a89: 	jmp	.Ltmp1052 # Offset: 19081
.Ltmp861:
    00004a8e: 	movapd	%xmm10, %xmm1
    00004a93: 	movapd	%xmm11, %xmm0
    00004a98: 	movsd	%xmm9, 0xe0(%rsp)
    00004aa2: 	addq	$0x10, %r15
    00004aa6: 	movsd	%xmm8, 0xd8(%rsp)
    00004ab0: 	movsd	%xmm6, 0xd0(%rsp)
    00004ab9: 	movsd	%xmm7, 0xc8(%rsp)
    00004ac2: 	movsd	%xmm5, 0xb8(%rsp)
    00004acb: 	movsd	%xmm4, 0xa0(%rsp)
    00004ad4: 	movsd	%xmm10, 0x90(%rsp)
    00004ade: 	movsd	%xmm11, 0x70(%rsp)
    00004ae5: 	callq	__muldc3@PLT # Offset: 19173
    00004aea: 	cmpq	%r15, %rbx
    00004aed: 	movsd	0x70(%rsp), %xmm11
    00004af4: 	movsd	0xb8(%rsp), %xmm5
    00004afd: 	movsd	0xa0(%rsp), %xmm4
    00004b06: 	movsd	0xd0(%rsp), %xmm6
    00004b0f: 	movsd	0xc8(%rsp), %xmm7
    00004b18: 	addsd	%xmm0, %xmm5
    00004b1c: 	movsd	0x90(%rsp), %xmm10
    00004b26: 	movsd	0xd8(%rsp), %xmm8
    00004b30: 	addsd	%xmm1, %xmm4
    00004b34: 	movsd	0xe0(%rsp), %xmm9
    00004b3e: 	addsd	%xmm5, %xmm6
    00004b42: 	addsd	%xmm4, %xmm7
    00004b46: 	jne	.Ltmp862 # Offset: 19270
    00004b4c: 	jmp	.Ltmp1053 # Offset: 19276
.Ltmp872:
    00004b51: 	movapd	%xmm1, %xmm3
    00004b55: 	movapd	%xmm0, %xmm2
    00004b59: 	movapd	%xmm9, %xmm1
    00004b5e: 	movq	%rax, 0xe0(%rsp)
    00004b66: 	movapd	%xmm11, %xmm0
    00004b6b: 	movsd	%xmm11, 0x70(%rsp)
    00004b72: 	movsd	%xmm13, 0xf8(%rsp)
    00004b7c: 	movsd	%xmm4, 0xf0(%rsp)
    00004b85: 	movsd	%xmm5, 0xe8(%rsp)
    00004b8e: 	movsd	%xmm12, 0xd8(%rsp)
    00004b98: 	movsd	%xmm10, 0xd0(%rsp)
    00004ba2: 	movsd	%xmm8, 0xc8(%rsp)
    00004bac: 	movsd	%xmm7, 0xb8(%rsp)
    00004bb5: 	movsd	%xmm6, 0xa0(%rsp)
    00004bbe: 	movsd	%xmm9, 0x90(%rsp)
    00004bc8: 	callq	__muldc3@PLT # Offset: 19400
    00004bcd: 	movq	0xe0(%rsp), %rax
    00004bd5: 	movsd	0xf0(%rsp), %xmm4
    00004bde: 	movsd	0xe8(%rsp), %xmm5
    00004be7: 	movsd	0x70(%rsp), %xmm11
    00004bee: 	addq	$0x10, %rax
    00004bf2: 	addsd	%xmm0, %xmm4
    00004bf6: 	movsd	0x90(%rsp), %xmm9
    00004c00: 	movsd	0xa0(%rsp), %xmm6
    00004c09: 	movsd	0xb8(%rsp), %xmm7
    00004c12: 	cmpq	%rax, %rbx
    00004c15: 	addsd	%xmm1, %xmm5
    00004c19: 	movsd	0xc8(%rsp), %xmm8
    00004c23: 	movsd	0xd0(%rsp), %xmm10
    00004c2d: 	movsd	0xd8(%rsp), %xmm12
    00004c37: 	movsd	0xf8(%rsp), %xmm13
    00004c41: 	jne	.Ltmp873 # Offset: 19521
    00004c47: 	jmp	.Ltmp1054 # Offset: 19527
.Ltmp871:
    00004c4c: 	movapd	%xmm12, %xmm1
    00004c51: 	movapd	%xmm7, %xmm0
    00004c55: 	movq	%rax, 0xe0(%rsp)
    00004c5d: 	movsd	%xmm13, 0xf8(%rsp)
    00004c67: 	movsd	%xmm4, 0xf0(%rsp)
    00004c70: 	movsd	%xmm5, 0xe8(%rsp)
    00004c79: 	movsd	%xmm11, 0xd8(%rsp)
    00004c83: 	movsd	%xmm10, 0xd0(%rsp)
    00004c8d: 	movsd	%xmm9, 0xc8(%rsp)
    00004c97: 	movsd	%xmm8, 0xb8(%rsp)
    00004ca1: 	movsd	%xmm6, 0xa0(%rsp)
    00004caa: 	movsd	%xmm12, 0x90(%rsp)
    00004cb4: 	movsd	%xmm7, 0x70(%rsp)
    00004cba: 	callq	__muldc3@PLT # Offset: 19642
    00004cbf: 	movq	0xe0(%rsp), %rax
    00004cc7: 	movsd	0xf8(%rsp), %xmm13
    00004cd1: 	movsd	0xf0(%rsp), %xmm4
    00004cda: 	movsd	0x70(%rsp), %xmm7
    00004ce0: 	movsd	0xe8(%rsp), %xmm5
    00004ce9: 	movsd	0xd8(%rsp), %xmm11
    00004cf3: 	movsd	0xd0(%rsp), %xmm10
    00004cfd: 	movsd	0xc8(%rsp), %xmm9
    00004d07: 	movsd	0xb8(%rsp), %xmm8
    00004d11: 	movsd	0xa0(%rsp), %xmm6
    00004d1a: 	movsd	0x90(%rsp), %xmm12
    00004d24: 	jmp	.Ltmp1055 # Offset: 19748
.Ltmp870:
    00004d29: 	movapd	%xmm0, %xmm2
    00004d2d: 	movapd	%xmm8, %xmm1
    00004d32: 	movapd	%xmm10, %xmm0
    00004d37: 	movq	%rax, 0xe0(%rsp)
    00004d3f: 	movapd	%xmm14, %xmm3
    00004d44: 	movsd	%xmm10, 0x70(%rsp)
    00004d4b: 	movsd	%xmm13, 0xf8(%rsp)
    00004d55: 	movsd	%xmm4, 0xf0(%rsp)
    00004d5e: 	movsd	%xmm5, 0xe8(%rsp)
    00004d67: 	movsd	%xmm12, 0xd8(%rsp)
    00004d71: 	movsd	%xmm11, 0xd0(%rsp)
    00004d7b: 	movsd	%xmm9, 0xc8(%rsp)
    00004d85: 	movsd	%xmm7, 0xb8(%rsp)
    00004d8e: 	movsd	%xmm6, 0xa0(%rsp)
    00004d97: 	movsd	%xmm8, 0x90(%rsp)
    00004da1: 	callq	__muldc3@PLT # Offset: 19873
    00004da6: 	movq	0xe0(%rsp), %rax
    00004dae: 	movsd	0xf8(%rsp), %xmm13
    00004db8: 	movsd	0xf0(%rsp), %xmm4
    00004dc1: 	movapd	%xmm0, %xmm2
    00004dc5: 	movsd	0xe8(%rsp), %xmm5
    00004dce: 	movapd	%xmm1, %xmm3
    00004dd2: 	movsd	0xb8(%rsp), %xmm7
    00004ddb: 	movsd	0x70(%rsp), %xmm10
    00004de2: 	movsd	0xd8(%rsp), %xmm12
    00004dec: 	movsd	0xd0(%rsp), %xmm11
    00004df6: 	movsd	0xc8(%rsp), %xmm9
    00004e00: 	movsd	0xa0(%rsp), %xmm6
    00004e09: 	movsd	0x90(%rsp), %xmm8
    00004e13: 	jmp	.Ltmp1056 # Offset: 19987
.Ltmp869:
    00004e18: 	movapd	%xmm6, %xmm3
    00004e1c: 	movapd	%xmm13, %xmm2
    00004e21: 	movapd	%xmm15, %xmm0
    00004e26: 	movq	%rax, 0xe8(%rsp)
    00004e2e: 	movsd	%xmm4, 0xf8(%rsp)
    00004e37: 	movsd	%xmm5, 0xf0(%rsp)
    00004e40: 	movsd	%xmm12, 0xe0(%rsp)
    00004e4a: 	movsd	%xmm11, 0xd8(%rsp)
    00004e54: 	movsd	%xmm10, 0xd0(%rsp)
    00004e5e: 	movsd	%xmm9, 0xc8(%rsp)
    00004e68: 	movsd	%xmm8, 0xb8(%rsp)
    00004e72: 	movsd	%xmm7, 0xa0(%rsp)
    00004e7b: 	movsd	%xmm6, 0x90(%rsp)
    00004e84: 	movsd	%xmm13, 0x70(%rsp)
    00004e8b: 	callq	__muldc3@PLT # Offset: 20107
    00004e90: 	movq	0xe8(%rsp), %rax
    00004e98: 	movsd	0xf8(%rsp), %xmm4
    00004ea1: 	movsd	0xf0(%rsp), %xmm5
    00004eaa: 	movapd	%xmm1, %xmm14
    00004eaf: 	movsd	0xe0(%rsp), %xmm12
    00004eb9: 	movsd	0xd8(%rsp), %xmm11
    00004ec3: 	movsd	0xd0(%rsp), %xmm10
    00004ecd: 	movsd	0xa0(%rsp), %xmm7
    00004ed6: 	movsd	0x70(%rsp), %xmm13
    00004edd: 	movsd	0xc8(%rsp), %xmm9
    00004ee7: 	movsd	0xb8(%rsp), %xmm8
    00004ef1: 	movsd	0x90(%rsp), %xmm6
    00004efa: 	jmp	.Ltmp1057 # Offset: 20218
.Ltmp769:
    00004eff: 	movq	DATAat0x2b718(%rip), %rax
    00004f06: 	movapd	%xmm4, %xmm0
    00004f0a: 	movsd	%xmm5, 0x30(%rsp)
    00004f10: 	addq	$0x10, %r15
    00004f14: 	movsd	%xmm6, 0x20(%rsp)
    00004f1a: 	movq	%rax, %xmm3
    00004f1f: 	movq	DATAat0x2b710(%rip), %rax
    00004f26: 	movq	%rax, %xmm2
    00004f2b: 	callq	__muldc3@PLT # Offset: 20267
    00004f30: 	movsd	0x30(%rsp), %xmm5
    00004f36: 	movsd	0x20(%rsp), %xmm6
    00004f3c: 	addsd	%xmm0, %xmm5
    00004f40: 	addsd	%xmm1, %xmm6
    00004f44: 	cmpq	%r15, %rbx
    00004f47: 	jne	.Ltmp770 # Offset: 20295
    00004f4d: 	jmp	.Ltmp1058 # Offset: 20301
.Ltmp838:
    00004f52: 	movapd	%xmm7, %xmm0
    00004f56: 	movsd	%xmm2, 0x70(%rsp)
    00004f5c: 	movq	%rax, 0xa0(%rsp)
    00004f64: 	movsd	%xmm5, 0xc8(%rsp)
    00004f6d: 	movsd	%xmm6, 0xb8(%rsp)
    00004f76: 	movsd	%xmm3, 0x90(%rsp)
    00004f7f: 	callq	__muldc3@PLT # Offset: 20351
    00004f84: 	movq	0xa0(%rsp), %rax
    00004f8c: 	movsd	0xc8(%rsp), %xmm5
    00004f95: 	movsd	0xb8(%rsp), %xmm6
    00004f9e: 	movsd	0x70(%rsp), %xmm2
    00004fa4: 	addq	$0x10, %rax
    00004fa8: 	addsd	%xmm0, %xmm5
    00004fac: 	movsd	0x90(%rsp), %xmm3
    00004fb5: 	cmpq	%rax, %rbx
    00004fb8: 	addsd	%xmm1, %xmm6
    00004fbc: 	jne	.Ltmp839 # Offset: 20412
    00004fc2: 	jmp	.Ltmp1059 # Offset: 20418
.Ltmp860:
    00004fc7: 	movsd	0x30(%rsp), %xmm3
    00004fcd: 	movsd	0x20(%rsp), %xmm2
    00004fd3: 	movsd	%xmm9, 0xe0(%rsp)
    00004fdd: 	movsd	0x68(%rsp), %xmm1
    00004fe3: 	movsd	0x50(%rsp), %xmm0
    00004fe9: 	movsd	%xmm8, 0xd8(%rsp)
    00004ff3: 	movsd	%xmm6, 0xd0(%rsp)
    00004ffc: 	movsd	%xmm7, 0xc8(%rsp)
    00005005: 	movsd	%xmm11, 0xb8(%rsp)
    0000500f: 	movsd	%xmm10, 0xa0(%rsp)
    00005019: 	movsd	%xmm5, 0x90(%rsp)
    00005022: 	movsd	%xmm4, 0x70(%rsp)
    00005028: 	callq	__muldc3@PLT # Offset: 20520
    0000502d: 	movsd	0x70(%rsp), %xmm4
    00005033: 	movsd	0x90(%rsp), %xmm5
    0000503c: 	movsd	0xa0(%rsp), %xmm10
    00005046: 	movapd	%xmm0, %xmm2
    0000504a: 	movsd	0xb8(%rsp), %xmm11
    00005054: 	movapd	%xmm1, %xmm3
    00005058: 	movsd	0xc8(%rsp), %xmm7
    00005061: 	movsd	0xd0(%rsp), %xmm6
    0000506a: 	movsd	0xd8(%rsp), %xmm8
    00005074: 	movsd	0xe0(%rsp), %xmm9
    0000507e: 	jmp	.Ltmp1060 # Offset: 20606
.Ltmp848:
    00005083: 	movapd	%xmm13, %xmm1
    00005088: 	movapd	%xmm10, %xmm0
    0000508d: 	movq	%rax, 0xc8(%rsp)
    00005095: 	movsd	%xmm8, 0xf8(%rsp)
    0000509f: 	movsd	%xmm9, 0xf0(%rsp)
    000050a9: 	movsd	%xmm15, 0xe8(%rsp)
    000050b3: 	movsd	%xmm14, 0xe0(%rsp)
    000050bd: 	movsd	%xmm12, 0xd8(%rsp)
    000050c7: 	movsd	%xmm11, 0xd0(%rsp)
    000050d1: 	movsd	%xmm6, 0xb8(%rsp)
    000050da: 	movsd	%xmm7, 0xa0(%rsp)
    000050e3: 	movsd	%xmm13, 0x90(%rsp)
    000050ed: 	movsd	%xmm10, 0x70(%rsp)
    000050f4: 	callq	__muldc3@PLT # Offset: 20724
    000050f9: 	movq	0xc8(%rsp), %rax
    00005101: 	movsd	0xf8(%rsp), %xmm8
    0000510b: 	movsd	0xf0(%rsp), %xmm9
    00005115: 	movsd	0xe8(%rsp), %xmm15
    0000511f: 	movsd	0xb8(%rsp), %xmm6
    00005128: 	movsd	0x70(%rsp), %xmm10
    0000512f: 	movsd	0xe0(%rsp), %xmm14
    00005139: 	movsd	0xd8(%rsp), %xmm12
    00005143: 	movsd	0xd0(%rsp), %xmm11
    0000514d: 	movsd	0xa0(%rsp), %xmm7
    00005156: 	movsd	0x90(%rsp), %xmm13
    00005160: 	jmp	.Ltmp1061 # Offset: 20832
.Ltmp847:
    00005165: 	movsd	0x80(%rsp), %xmm3
    0000516e: 	movsd	0x60(%rsp), %xmm2
    00005174: 	movq	%rax, 0xb8(%rsp)
    0000517c: 	movsd	0x40(%rsp), %xmm1
    00005182: 	movsd	0x10(%rsp), %xmm0
    00005188: 	movsd	%xmm8, 0xf8(%rsp)
    00005192: 	movsd	%xmm9, 0xf0(%rsp)
    0000519c: 	movsd	%xmm15, 0xe8(%rsp)
    000051a6: 	movsd	%xmm14, 0xe0(%rsp)
    000051b0: 	movsd	%xmm13, 0xd8(%rsp)
    000051ba: 	movsd	%xmm12, 0xd0(%rsp)
    000051c4: 	movsd	%xmm11, 0xc8(%rsp)
    000051ce: 	movsd	%xmm10, 0xa0(%rsp)
    000051d8: 	movsd	%xmm6, 0x90(%rsp)
    000051e1: 	movsd	%xmm7, 0x70(%rsp)
    000051e7: 	callq	__muldc3@PLT # Offset: 20967
    000051ec: 	movsd	0x70(%rsp), %xmm7
    000051f2: 	movsd	0x90(%rsp), %xmm6
    000051fb: 	movq	0xb8(%rsp), %rax
    00005203: 	movapd	%xmm0, %xmm2
    00005207: 	movsd	0xa0(%rsp), %xmm10
    00005211: 	movapd	%xmm1, %xmm3
    00005215: 	movsd	0xc8(%rsp), %xmm11
    0000521f: 	movsd	0xd0(%rsp), %xmm12
    00005229: 	movsd	0xd8(%rsp), %xmm13
    00005233: 	movsd	0xe0(%rsp), %xmm14
    0000523d: 	movsd	0xe8(%rsp), %xmm15
    00005247: 	movsd	0xf0(%rsp), %xmm9
    00005251: 	movsd	0xf8(%rsp), %xmm8
    0000525b: 	jmp	.Ltmp1062 # Offset: 21083
.Ltmp850:
    00005260: 	movapd	%xmm5, %xmm3
    00005264: 	movapd	%xmm4, %xmm2
    00005268: 	movapd	%xmm7, %xmm1
    0000526c: 	movq	%rax, 0xb8(%rsp)
    00005274: 	movapd	%xmm6, %xmm0
    00005278: 	movsd	%xmm4, 0x70(%rsp)
    0000527e: 	movsd	%xmm8, 0xf8(%rsp)
    00005288: 	movsd	%xmm9, 0xf0(%rsp)
    00005292: 	movsd	%xmm15, 0xe8(%rsp)
    0000529c: 	movsd	%xmm14, 0xe0(%rsp)
    000052a6: 	movsd	%xmm13, 0xd8(%rsp)
    000052b0: 	movsd	%xmm12, 0xd0(%rsp)
    000052ba: 	movsd	%xmm11, 0xc8(%rsp)
    000052c4: 	movsd	%xmm10, 0xa0(%rsp)
    000052ce: 	movsd	%xmm5, 0x90(%rsp)
    000052d7: 	callq	__muldc3@PLT # Offset: 21207
    000052dc: 	movq	0xb8(%rsp), %rax
    000052e4: 	movsd	0xf8(%rsp), %xmm8
    000052ee: 	movsd	0xf0(%rsp), %xmm9
    000052f8: 	movsd	0x70(%rsp), %xmm4
    000052fe: 	addq	$0x10, %rax
    00005302: 	addsd	%xmm0, %xmm8
    00005307: 	movsd	0x90(%rsp), %xmm5
    00005310: 	movsd	0xa0(%rsp), %xmm10
    0000531a: 	cmpq	%rax, %rbx
    0000531d: 	addsd	%xmm1, %xmm9
    00005322: 	movsd	0xc8(%rsp), %xmm11
    0000532c: 	movsd	0xd0(%rsp), %xmm12
    00005336: 	movsd	0xd8(%rsp), %xmm13
    00005340: 	movsd	0xe0(%rsp), %xmm14
    0000534a: 	movsd	0xe8(%rsp), %xmm15
    00005354: 	jne	.Ltmp851 # Offset: 21332
    0000535a: 	jmp	.Ltmp1063 # Offset: 21338
.Ltmp849:
    0000535f: 	movapd	%xmm1, %xmm3
    00005363: 	movapd	%xmm0, %xmm2
    00005367: 	movapd	%xmm11, %xmm1
    0000536c: 	movq	%rax, 0xd0(%rsp)
    00005374: 	movapd	%xmm12, %xmm0
    00005379: 	movsd	%xmm8, 0xf8(%rsp)
    00005383: 	movsd	%xmm9, 0xf0(%rsp)
    0000538d: 	movsd	%xmm15, 0xe8(%rsp)
    00005397: 	movsd	%xmm14, 0xe0(%rsp)
    000053a1: 	movsd	%xmm13, 0xd8(%rsp)
    000053ab: 	movsd	%xmm10, 0xc8(%rsp)
    000053b5: 	movsd	%xmm6, 0xb8(%rsp)
    000053be: 	movsd	%xmm7, 0xa0(%rsp)
    000053c7: 	movsd	%xmm11, 0x90(%rsp)
    000053d1: 	movsd	%xmm12, 0x70(%rsp)
    000053d8: 	callq	__muldc3@PLT # Offset: 21464
    000053dd: 	movq	0xd0(%rsp), %rax
    000053e5: 	movsd	0xf8(%rsp), %xmm8
    000053ef: 	movsd	0xf0(%rsp), %xmm9
    000053f9: 	movapd	%xmm0, %xmm4
    000053fd: 	movsd	0xe8(%rsp), %xmm15
    00005407: 	movapd	%xmm1, %xmm5
    0000540b: 	movsd	0xb8(%rsp), %xmm6
    00005414: 	movsd	0x70(%rsp), %xmm12
    0000541b: 	movsd	0xe0(%rsp), %xmm14
    00005425: 	movsd	0xd8(%rsp), %xmm13
    0000542f: 	movsd	0xc8(%rsp), %xmm10
    00005439: 	movsd	0xa0(%rsp), %xmm7
    00005442: 	movsd	0x90(%rsp), %xmm11
    0000544c: 	jmp	.Ltmp1064 # Offset: 21580
.Ltmp853:
    00005451: 	movsd	0x18(%rsp), %xmm2
    00005457: 	pxor	%xmm3, %xmm3
    0000545b: 	movapd	%xmm6, %xmm0
    0000545f: 	movsd	%xmm8, 0x90(%rsp)
    00005469: 	movsd	%xmm9, 0x70(%rsp)
    00005470: 	callq	__muldc3@PLT # Offset: 21616
    00005475: 	movsd	0x70(%rsp), %xmm9
    0000547c: 	movsd	0x90(%rsp), %xmm8
    00005486: 	movapd	%xmm1, %xmm2
    0000548a: 	jmp	.Ltmp1065 # Offset: 21642
.Ltmp852:
    0000548f: 	movapd	%xmm4, %xmm0
    00005493: 	pxor	%xmm3, %xmm3
    00005497: 	movapd	%xmm5, %xmm1
    0000549b: 	movsd	%xmm8, 0x90(%rsp)
    000054a5: 	movsd	%xmm9, 0x70(%rsp)
    000054ac: 	callq	__muldc3@PLT # Offset: 21676
    000054b1: 	movsd	0x70(%rsp), %xmm9
    000054b8: 	movsd	0x90(%rsp), %xmm8
    000054c2: 	movapd	%xmm0, %xmm6
    000054c6: 	jmp	.Ltmp1066 # Offset: 21702
.Ltmp832:
    000054cb: 	movsd	0x18(%rsp), %xmm2
    000054d1: 	pxor	%xmm3, %xmm3
    000054d5: 	movsd	0xc8(%rsp), %xmm1
    000054de: 	movsd	%xmm5, 0xd8(%rsp)
    000054e7: 	movsd	%xmm4, 0xd0(%rsp)
    000054f0: 	callq	__muldc3@PLT # Offset: 21744
    000054f5: 	movsd	0xd8(%rsp), %xmm5
    000054fe: 	movsd	0xd0(%rsp), %xmm4
    00005507: 	movapd	%xmm0, %xmm2
    0000550b: 	jmp	.Ltmp1067 # Offset: 21771
.Ltmp859:
    00005510: 	movsd	0x10(%rsp), %xmm0
    00005516: 	movsd	0x40(%rsp), %xmm1
    0000551c: 	movq	%rbp, %r15
    0000551f: 	movsd	0x80(%rsp), %xmm3
    00005528: 	movsd	0x60(%rsp), %xmm2
    0000552e: 	callq	__muldc3@PLT # Offset: 21806
    00005533: 	movsd	0x50(%rsp), %xmm6
    00005539: 	movsd	0x68(%rsp), %xmm7
    0000553f: 	movapd	%xmm1, %xmm4
    00005543: 	movapd	%xmm0, %xmm5
    00005547: 	movsd	%xmm5, 0xc8(%rsp)
    00005550: 	movapd	%xmm6, %xmm1
    00005554: 	movsd	%xmm4, 0xd0(%rsp)
    0000555d: 	mulsd	%xmm0, %xmm1
    00005561: 	movapd	%xmm7, %xmm0
    00005565: 	mulsd	%xmm4, %xmm0
    00005569: 	mulsd	%xmm5, %xmm7
    0000556d: 	mulsd	%xmm4, %xmm6
    00005571: 	subsd	%xmm0, %xmm1
    00005575: 	movsd	%xmm1, 0x90(%rsp)
    0000557e: 	movapd	%xmm7, %xmm1
    00005582: 	addsd	%xmm6, %xmm1
    00005586: 	movsd	(%rsp), %xmm6
    0000558b: 	movapd	%xmm6, %xmm7
    0000558f: 	movsd	%xmm1, 0x70(%rsp)
.Ltmp1070:
    00005595: 	movsd	(%r15), %xmm5
    0000559a: 	movsd	%xmm5, 0xb8(%rsp)
    000055a3: 	movsd	0x8(%r15), %xmm5
    000055a9: 	movsd	%xmm5, 0xa0(%rsp)
    000055b2: 	movsd	0x70(%rsp), %xmm5
    000055b8: 	ucomisd	0x90(%rsp), %xmm5
    000055c1: 	jp	.Ltmp1068 # Offset: 21953
    000055c7: 	movsd	0x90(%rsp), %xmm2
    000055d0: 	movapd	%xmm5, %xmm3
.Ltmp1104:
    000055d4: 	movsd	0x58(%rsp), %xmm5
    000055da: 	movsd	0x48(%rsp), %xmm4
    000055e0: 	movapd	%xmm5, %xmm1
    000055e4: 	movapd	%xmm4, %xmm0
    000055e8: 	mulsd	%xmm3, %xmm1
    000055ec: 	mulsd	%xmm2, %xmm0
    000055f0: 	mulsd	%xmm3, %xmm4
    000055f4: 	mulsd	%xmm2, %xmm5
    000055f8: 	subsd	%xmm1, %xmm0
    000055fc: 	movapd	%xmm4, %xmm1
    00005600: 	addsd	%xmm5, %xmm1
    00005604: 	ucomisd	%xmm0, %xmm1
    00005608: 	jp	.Ltmp1069 # Offset: 22024
    0000560e: 	movsd	0xb8(%rsp), %xmm2
    00005617: 	addq	$0x10, %r15
    0000561b: 	addsd	%xmm0, %xmm2
    0000561f: 	addsd	%xmm2, %xmm6
    00005623: 	movsd	0xa0(%rsp), %xmm2
    0000562c: 	addsd	%xmm1, %xmm2
    00005630: 	addsd	%xmm2, %xmm7
    00005634: 	cmpq	%rbx, %r15
    00005637: 	jne	.Ltmp1070 # Offset: 22071
    0000563d: 	jmp	.Ltmp1053 # Offset: 22077
.Ltmp841:
    00005642: 	movsd	0x18(%rsp), %xmm2
    00005648: 	pxor	%xmm3, %xmm3
    0000564c: 	movsd	%xmm6, 0x70(%rsp)
    00005652: 	movsd	%xmm5, 0x90(%rsp)
    0000565b: 	callq	__muldc3@PLT # Offset: 22107
    00005660: 	movsd	0x70(%rsp), %xmm6
    00005666: 	movsd	0x90(%rsp), %xmm5
    0000566f: 	movapd	%xmm0, %xmm3
    00005673: 	movapd	%xmm1, %xmm2
    00005677: 	jmp	.Ltmp1071 # Offset: 22135
.Ltmp840:
    0000567c: 	movsd	0x40(%rsp), %xmm1
    00005682: 	movsd	0x10(%rsp), %xmm0
    00005688: 	pxor	%xmm3, %xmm3
    0000568c: 	movsd	%xmm5, 0x90(%rsp)
    00005695: 	movsd	%xmm6, 0x70(%rsp)
    0000569b: 	callq	__muldc3@PLT # Offset: 22171
    000056a0: 	movsd	0x70(%rsp), %xmm6
    000056a6: 	movsd	0x90(%rsp), %xmm5
    000056af: 	jmp	.Ltmp1072 # Offset: 22191
.Ltmp877:
    000056b4: 	movsd	0x58(%rsp), %xmm1
    000056ba: 	movsd	0x48(%rsp), %xmm0
    000056c0: 	movsd	%xmm4, 0x90(%rsp)
    000056c9: 	movsd	%xmm5, 0x70(%rsp)
    000056cf: 	callq	__muldc3@PLT # Offset: 22223
    000056d4: 	movsd	0x70(%rsp), %xmm5
    000056da: 	movsd	0x90(%rsp), %xmm4
    000056e3: 	jmp	.Ltmp1073 # Offset: 22243
.Ltmp876:
    000056e8: 	movapd	%xmm1, %xmm3
    000056ec: 	movapd	%xmm0, %xmm2
    000056f0: 	movsd	0x68(%rsp), %xmm1
    000056f6: 	movsd	0x50(%rsp), %xmm0
    000056fc: 	movsd	%xmm4, 0x90(%rsp)
    00005705: 	movsd	%xmm5, 0x70(%rsp)
    0000570b: 	callq	__muldc3@PLT # Offset: 22283
    00005710: 	movsd	0x70(%rsp), %xmm5
    00005716: 	movsd	0x90(%rsp), %xmm4
    0000571f: 	movapd	%xmm0, %xmm2
    00005723: 	movapd	%xmm1, %xmm3
    00005727: 	jmp	.Ltmp1074 # Offset: 22311
.Ltmp875:
    0000572c: 	movsd	0x80(%rsp), %xmm1
    00005735: 	movsd	0x60(%rsp), %xmm0
    0000573b: 	movsd	%xmm4, 0x90(%rsp)
    00005744: 	movsd	%xmm5, 0x70(%rsp)
    0000574a: 	callq	__muldc3@PLT # Offset: 22346
    0000574f: 	movsd	0x70(%rsp), %xmm5
    00005755: 	movsd	0x90(%rsp), %xmm4
    0000575e: 	jmp	.Ltmp1075 # Offset: 22366
.Ltmp874:
    00005763: 	movapd	%xmm0, %xmm2
    00005767: 	movsd	0x40(%rsp), %xmm1
    0000576d: 	movsd	0x10(%rsp), %xmm0
    00005773: 	pxor	%xmm3, %xmm3
    00005777: 	movsd	%xmm4, 0x90(%rsp)
    00005780: 	movsd	%xmm5, 0x70(%rsp)
    00005786: 	callq	__muldc3@PLT # Offset: 22406
    0000578b: 	movsd	0x70(%rsp), %xmm5
    00005791: 	movsd	0x90(%rsp), %xmm4
    0000579a: 	movapd	%xmm0, %xmm2
    0000579e: 	movapd	%xmm1, %xmm3
    000057a2: 	jmp	.Ltmp1076 # Offset: 22434
.Ltmp818:
    000057a7: 	movsd	0x18(%rsp), %xmm2
    000057ad: 	movapd	%xmm5, %xmm0
    000057b1: 	pxor	%xmm3, %xmm3
    000057b5: 	movsd	0x90(%rsp), %xmm1
    000057be: 	movsd	%xmm6, 0xb8(%rsp)
    000057c7: 	movsd	%xmm4, 0xa0(%rsp)
    000057d0: 	callq	__muldc3@PLT # Offset: 22480
    000057d5: 	movsd	0xb8(%rsp), %xmm6
    000057de: 	movsd	0xa0(%rsp), %xmm4
    000057e7: 	movapd	%xmm0, %xmm2
    000057eb: 	jmp	.Ltmp1077 # Offset: 22507
.Ltmp825:
    000057f0: 	movsd	0x18(%rsp), %xmm2
    000057f6: 	pxor	%xmm3, %xmm3
    000057fa: 	movsd	0xb8(%rsp), %xmm1
    00005803: 	movsd	%xmm5, 0xd0(%rsp)
    0000580c: 	movsd	%xmm4, 0xc8(%rsp)
    00005815: 	callq	__muldc3@PLT # Offset: 22549
    0000581a: 	movsd	0xd0(%rsp), %xmm5
    00005823: 	movsd	0xc8(%rsp), %xmm4
    0000582c: 	movapd	%xmm0, %xmm2
    00005830: 	jmp	.Ltmp1078 # Offset: 22576
.Ltmp811:
    00005835: 	movsd	0x18(%rsp), %xmm2
    0000583b: 	pxor	%xmm3, %xmm3
    0000583f: 	movsd	0xc8(%rsp), %xmm1
    00005848: 	movsd	%xmm5, 0xd8(%rsp)
    00005851: 	movsd	%xmm4, 0xd0(%rsp)
    0000585a: 	callq	__muldc3@PLT # Offset: 22618
    0000585f: 	movsd	0xd8(%rsp), %xmm5
    00005868: 	movsd	0xd0(%rsp), %xmm4
    00005871: 	movapd	%xmm0, %xmm2
    00005875: 	jmp	.Ltmp1079 # Offset: 22645
.Ltmp804:
    0000587a: 	movsd	0x18(%rsp), %xmm2
    00005880: 	pxor	%xmm3, %xmm3
    00005884: 	movapd	%xmm6, %xmm0
    00005888: 	movsd	0xb8(%rsp), %xmm1
    00005891: 	movsd	%xmm4, 0xd0(%rsp)
    0000589a: 	movsd	%xmm5, 0xc8(%rsp)
    000058a3: 	callq	__muldc3@PLT # Offset: 22691
    000058a8: 	movsd	0xd0(%rsp), %xmm4
    000058b1: 	movsd	0xc8(%rsp), %xmm5
    000058ba: 	jmp	.Ltmp1080 # Offset: 22714
.Ltmp878:
    000058bf: 	movsd	0x18(%rsp), %xmm2
    000058c5: 	pxor	%xmm3, %xmm3
    000058c9: 	movsd	%xmm5, 0x70(%rsp)
    000058cf: 	movsd	%xmm4, 0x90(%rsp)
    000058d8: 	callq	__muldc3@PLT # Offset: 22744
    000058dd: 	movsd	0x70(%rsp), %xmm5
    000058e3: 	movsd	0x90(%rsp), %xmm4
    000058ec: 	movapd	%xmm0, %xmm3
    000058f0: 	movapd	%xmm1, %xmm2
    000058f4: 	jmp	.Ltmp1081 # Offset: 22772
.Ltmp899:
    000058f9: 	movsd	0x18(%rsp), %xmm2
    000058ff: 	pxor	%xmm3, %xmm3
    00005903: 	movsd	0xa0(%rsp), %xmm1
    0000590c: 	movsd	%xmm5, 0xc8(%rsp)
    00005915: 	movsd	%xmm4, 0xb8(%rsp)
    0000591e: 	callq	__muldc3@PLT # Offset: 22814
    00005923: 	movsd	0xc8(%rsp), %xmm5
    0000592c: 	movsd	0xb8(%rsp), %xmm4
    00005935: 	movapd	%xmm0, %xmm2
    00005939: 	jmp	.Ltmp1082 # Offset: 22841
.Ltmp892:
    0000593e: 	movsd	0x18(%rsp), %xmm2
    00005944: 	pxor	%xmm3, %xmm3
    00005948: 	callq	__muldc3@PLT # Offset: 22856
    0000594d: 	movapd	%xmm0, %xmm3
    00005951: 	movapd	%xmm1, %xmm2
    00005955: 	jmp	.Ltmp1083 # Offset: 22869
.Ltmp915:
    0000595a: 	movsd	0x18(%rsp), %xmm2
    00005960: 	pxor	%xmm3, %xmm3
    00005964: 	movsd	%xmm5, 0x70(%rsp)
    0000596a: 	movsd	%xmm4, 0x90(%rsp)
    00005973: 	callq	__muldc3@PLT # Offset: 22899
    00005978: 	movsd	0x70(%rsp), %xmm5
    0000597e: 	movsd	0x90(%rsp), %xmm4
    00005987: 	movapd	%xmm0, %xmm3
    0000598b: 	movapd	%xmm1, %xmm2
    0000598f: 	jmp	.Ltmp1084 # Offset: 22927
.Ltmp913:
    00005994: 	movsd	0x80(%rsp), %xmm1
    0000599d: 	movsd	0x60(%rsp), %xmm0
    000059a3: 	movsd	0x68(%rsp), %xmm3
    000059a9: 	movsd	0x50(%rsp), %xmm2
    000059af: 	callq	__muldc3@PLT # Offset: 22959
    000059b4: 	movsd	0x58(%rsp), %xmm3
    000059ba: 	movsd	0x48(%rsp), %xmm2
    000059c0: 	callq	__divdc3@PLT # Offset: 22976
    000059c5: 	movsd	(%rsp), %xmm4
    000059ca: 	movq	%rbp, %rax
    000059cd: 	movapd	%xmm0, %xmm6
    000059d1: 	movapd	%xmm1, %xmm3
    000059d5: 	movapd	%xmm4, %xmm5
.Ltmp1085:
    000059d9: 	movsd	0x10(%rsp), %xmm2
    000059df: 	addsd	(%rax), %xmm2
    000059e3: 	addq	$0x10, %rax
    000059e7: 	subsd	%xmm0, %xmm2
    000059eb: 	addsd	%xmm2, %xmm4
    000059ef: 	movsd	0x40(%rsp), %xmm2
    000059f5: 	addsd	-0x8(%rax), %xmm2
    000059fa: 	subsd	%xmm1, %xmm2
    000059fe: 	addsd	%xmm2, %xmm5
    00005a02: 	cmpq	%rbx, %rax
    00005a05: 	jne	.Ltmp1085 # Offset: 23045
    00005a07: 	jmp	.Ltmp1086 # Offset: 23047
.Ltmp939:
    00005a0c: 	movsd	0x18(%rsp), %xmm2
    00005a12: 	movapd	%xmm7, %xmm3
    00005a16: 	movapd	%xmm7, %xmm1
    00005a1a: 	movapd	%xmm6, %xmm0
    00005a1e: 	movsd	%xmm5, 0x40(%rsp)
    00005a24: 	movsd	%xmm4, 0x10(%rsp)
    00005a2a: 	callq	__muldc3@PLT # Offset: 23082
    00005a2f: 	movsd	0x40(%rsp), %xmm5
    00005a35: 	movsd	0x10(%rsp), %xmm4
    00005a3b: 	jmp	.Ltmp1087 # Offset: 23099
.Ltmp931:
    00005a40: 	movsd	0x18(%rsp), %xmm2
    00005a46: 	movapd	%xmm7, %xmm3
    00005a4a: 	movapd	%xmm7, %xmm1
    00005a4e: 	movapd	%xmm6, %xmm0
    00005a52: 	movsd	%xmm5, 0x40(%rsp)
    00005a58: 	movsd	%xmm4, 0x10(%rsp)
    00005a5e: 	callq	__muldc3@PLT # Offset: 23134
    00005a63: 	movsd	0x40(%rsp), %xmm5
    00005a69: 	movsd	0x10(%rsp), %xmm4
    00005a6f: 	jmp	.Ltmp1088 # Offset: 23151
.Ltmp962:
    00005a74: 	movsd	0x18(%rsp), %xmm2
    00005a7a: 	movapd	%xmm7, %xmm3
    00005a7e: 	movapd	%xmm7, %xmm1
    00005a82: 	movapd	%xmm6, %xmm0
    00005a86: 	movsd	%xmm5, 0x40(%rsp)
    00005a8c: 	movsd	%xmm4, 0x10(%rsp)
    00005a92: 	callq	__muldc3@PLT # Offset: 23186
    00005a97: 	movsd	0x40(%rsp), %xmm5
    00005a9d: 	movsd	0x10(%rsp), %xmm4
    00005aa3: 	jmp	.Ltmp1089 # Offset: 23203
.Ltmp947:
    00005aa8: 	movsd	0x18(%rsp), %xmm2
    00005aae: 	movapd	%xmm7, %xmm3
    00005ab2: 	movapd	%xmm7, %xmm1
    00005ab6: 	movapd	%xmm6, %xmm0
    00005aba: 	movsd	%xmm5, 0x40(%rsp)
    00005ac0: 	movsd	%xmm4, 0x10(%rsp)
    00005ac6: 	callq	__muldc3@PLT # Offset: 23238
    00005acb: 	movsd	0x40(%rsp), %xmm5
    00005ad1: 	movsd	0x10(%rsp), %xmm4
    00005ad7: 	jmp	.Ltmp1090 # Offset: 23255
.Ltmp954:
    00005adc: 	movsd	0x18(%rsp), %xmm2
    00005ae2: 	movapd	%xmm7, %xmm3
    00005ae6: 	movapd	%xmm7, %xmm1
    00005aea: 	movapd	%xmm6, %xmm0
    00005aee: 	movsd	%xmm5, 0x40(%rsp)
    00005af4: 	movsd	%xmm4, 0x10(%rsp)
    00005afa: 	callq	__muldc3@PLT # Offset: 23290
    00005aff: 	movsd	0x40(%rsp), %xmm5
    00005b05: 	movsd	0x10(%rsp), %xmm4
    00005b0b: 	jmp	.Ltmp1091 # Offset: 23307
.Ltmp973:
    00005b10: 	movsd	0x18(%rsp), %xmm2
    00005b16: 	movapd	%xmm7, %xmm3
    00005b1a: 	movapd	%xmm7, %xmm1
    00005b1e: 	movapd	%xmm5, %xmm0
    00005b22: 	movsd	%xmm6, 0x40(%rsp)
    00005b28: 	movsd	%xmm4, 0x10(%rsp)
    00005b2e: 	callq	__muldc3@PLT # Offset: 23342
    00005b33: 	movsd	0x40(%rsp), %xmm6
    00005b39: 	movsd	0x10(%rsp), %xmm4
    00005b3f: 	jmp	.Ltmp1092 # Offset: 23359
.Ltmp863:
    00005b44: 	movsd	0x18(%rsp), %xmm2
    00005b4a: 	pxor	%xmm3, %xmm3
    00005b4e: 	movsd	%xmm7, 0x70(%rsp)
    00005b54: 	movsd	%xmm6, 0x90(%rsp)
    00005b5d: 	callq	__muldc3@PLT # Offset: 23389
    00005b62: 	movsd	0x70(%rsp), %xmm7
    00005b68: 	movsd	0x90(%rsp), %xmm6
    00005b71: 	movapd	%xmm0, %xmm3
    00005b75: 	movapd	%xmm1, %xmm2
    00005b79: 	jmp	.Ltmp1093 # Offset: 23417
.Ltmp797:
    00005b7e: 	movsd	0x18(%rsp), %xmm2
    00005b84: 	pxor	%xmm3, %xmm3
    00005b88: 	movsd	0x90(%rsp), %xmm1
    00005b91: 	movsd	%xmm5, 0xb8(%rsp)
    00005b9a: 	movsd	%xmm4, 0xa0(%rsp)
    00005ba3: 	callq	__muldc3@PLT # Offset: 23459
    00005ba8: 	movsd	0xb8(%rsp), %xmm5
    00005bb1: 	movsd	0xa0(%rsp), %xmm4
    00005bba: 	movapd	%xmm0, %xmm2
    00005bbe: 	jmp	.Ltmp1094 # Offset: 23486
.Ltmp772:
    00005bc3: 	pxor	%xmm3, %xmm3
    00005bc7: 	movapd	%xmm13, %xmm2
    00005bcc: 	movsd	%xmm5, 0x30(%rsp)
    00005bd2: 	movsd	%xmm6, 0x20(%rsp)
    00005bd8: 	callq	__muldc3@PLT # Offset: 23512
    00005bdd: 	movsd	0x30(%rsp), %xmm5
    00005be3: 	movsd	0x20(%rsp), %xmm6
    00005be9: 	movapd	%xmm0, %xmm3
    00005bed: 	movapd	%xmm1, %xmm2
    00005bf1: 	jmp	.Ltmp1095 # Offset: 23537
.Ltmp771:
    00005bf6: 	movq	DATAat0x2b718(%rip), %rax
    00005bfd: 	pxor	%xmm1, %xmm1
    00005c01: 	movapd	%xmm4, %xmm0
    00005c05: 	movsd	%xmm5, 0x30(%rsp)
    00005c0b: 	movsd	%xmm6, 0x20(%rsp)
    00005c11: 	movq	%rax, %xmm3
    00005c16: 	movq	DATAat0x2b710(%rip), %rax
    00005c1d: 	movq	%rax, %xmm2
    00005c22: 	callq	__muldc3@PLT # Offset: 23586
    00005c27: 	movsd	0x30(%rsp), %xmm5
    00005c2d: 	movsd	0x20(%rsp), %xmm6
    00005c33: 	jmp	.Ltmp1096 # Offset: 23603
.Ltmp789:
    00005c38: 	movq	DATAat0x2b838(%rip), %rax
    00005c3f: 	movsd	0x18(%rsp), %xmm2
    00005c45: 	movapd	%xmm5, %xmm0
    00005c49: 	pxor	%xmm3, %xmm3
    00005c4d: 	movsd	%xmm6, 0x30(%rsp)
    00005c53: 	movq	%rax, %xmm1
    00005c58: 	movsd	%xmm4, 0x20(%rsp)
    00005c5e: 	callq	__muldc3@PLT # Offset: 23646
    00005c63: 	movsd	0x30(%rsp), %xmm6
    00005c69: 	movsd	0x20(%rsp), %xmm4
    00005c6f: 	movapd	%xmm0, %xmm2
    00005c73: 	jmp	.Ltmp1097 # Offset: 23667
.Ltmp781:
    00005c78: 	movsd	0x18(%rsp), %xmm2
    00005c7e: 	pxor	%xmm3, %xmm3
    00005c82: 	callq	__muldc3@PLT # Offset: 23682
    00005c87: 	movapd	%xmm0, %xmm3
    00005c8b: 	movapd	%xmm1, %xmm2
    00005c8f: 	jmp	.Ltmp1098 # Offset: 23695
.Ltmp760:
    00005c94: 	movq	DATAat0x2b738(%rip), %rax
    00005c9b: 	movsd	0x18(%rsp), %xmm2
    00005ca1: 	pxor	%xmm3, %xmm3
    00005ca5: 	movapd	%xmm6, %xmm0
    00005ca9: 	movsd	%xmm5, 0x30(%rsp)
    00005caf: 	movq	%rax, %xmm1
    00005cb4: 	movsd	%xmm4, 0x20(%rsp)
    00005cba: 	callq	__muldc3@PLT # Offset: 23738
    00005cbf: 	movsd	0x30(%rsp), %xmm5
    00005cc5: 	movsd	0x20(%rsp), %xmm4
    00005ccb: 	jmp	.Ltmp1099 # Offset: 23755
.Ltmp885:
    00005cd0: 	movsd	0x18(%rsp), %xmm2
    00005cd6: 	pxor	%xmm3, %xmm3
    00005cda: 	callq	__muldc3@PLT # Offset: 23770
    00005cdf: 	movapd	%xmm0, %xmm3
    00005ce3: 	movapd	%xmm1, %xmm2
    00005ce7: 	jmp	.Ltmp1100 # Offset: 23783
.Ltmp907:
    00005cec: 	pxor	%xmm3, %xmm3
    00005cf0: 	movapd	%xmm7, %xmm2
    00005cf4: 	movsd	%xmm5, 0x70(%rsp)
    00005cfa: 	movsd	%xmm4, 0x90(%rsp)
    00005d03: 	callq	__muldc3@PLT # Offset: 23811
    00005d08: 	movsd	0x70(%rsp), %xmm5
    00005d0e: 	movsd	0x90(%rsp), %xmm4
    00005d17: 	movapd	%xmm0, %xmm3
    00005d1b: 	movapd	%xmm1, %xmm2
    00005d1f: 	jmp	.Ltmp1101 # Offset: 23839
.Ltmp905:
    00005d24: 	movsd	0x60(%rsp), %xmm0
    00005d2a: 	movsd	0x68(%rsp), %xmm3
    00005d30: 	movsd	0x80(%rsp), %xmm1
    00005d39: 	movsd	0x50(%rsp), %xmm2
    00005d3f: 	callq	__muldc3@PLT # Offset: 23871
    00005d44: 	movsd	0x58(%rsp), %xmm3
    00005d4a: 	movsd	0x48(%rsp), %xmm2
    00005d50: 	callq	__divdc3@PLT # Offset: 23888
    00005d55: 	movsd	0x40(%rsp), %xmm3
    00005d5b: 	movsd	(%rsp), %xmm4
    00005d60: 	movq	%rbp, %rax
    00005d63: 	movapd	%xmm0, %xmm2
    00005d67: 	movsd	0x10(%rsp), %xmm0
    00005d6d: 	subsd	%xmm1, %xmm3
    00005d71: 	movapd	%xmm4, %xmm5
    00005d75: 	subsd	%xmm2, %xmm0
.Ltmp1102:
    00005d79: 	movsd	(%rax), %xmm1
    00005d7d: 	addq	$0x10, %rax
    00005d81: 	addsd	%xmm0, %xmm1
    00005d85: 	addsd	%xmm1, %xmm4
    00005d89: 	movsd	-0x8(%rax), %xmm1
    00005d8e: 	addsd	%xmm3, %xmm1
    00005d92: 	addsd	%xmm1, %xmm5
    00005d96: 	cmpq	%rax, %rbx
    00005d99: 	jne	.Ltmp1102 # Offset: 23961
    00005d9b: 	jmp	.Ltmp1103 # Offset: 23963
.Ltmp1069:
    00005da0: 	movsd	0x58(%rsp), %xmm1
    00005da6: 	movsd	0x48(%rsp), %xmm0
    00005dac: 	movsd	%xmm6, 0xe0(%rsp)
    00005db5: 	addq	$0x10, %r15
    00005db9: 	movsd	%xmm7, 0xd8(%rsp)
    00005dc2: 	callq	__muldc3@PLT # Offset: 24002
    00005dc7: 	movsd	0xb8(%rsp), %xmm2
    00005dd0: 	movsd	0xe0(%rsp), %xmm6
    00005dd9: 	movsd	0xd8(%rsp), %xmm7
    00005de2: 	addsd	%xmm0, %xmm2
    00005de6: 	addsd	%xmm2, %xmm6
    00005dea: 	movsd	0xa0(%rsp), %xmm2
    00005df3: 	addsd	%xmm1, %xmm2
    00005df7: 	addsd	%xmm2, %xmm7
    00005dfb: 	cmpq	%rbx, %r15
    00005dfe: 	jne	.Ltmp1070 # Offset: 24062
    00005e04: 	jmp	.Ltmp1053 # Offset: 24068
.Ltmp1068:
    00005e09: 	movsd	0xd0(%rsp), %xmm3
    00005e12: 	movsd	0x68(%rsp), %xmm1
    00005e18: 	movsd	%xmm6, 0xe0(%rsp)
    00005e21: 	movsd	0xc8(%rsp), %xmm2
    00005e2a: 	movsd	0x50(%rsp), %xmm0
    00005e30: 	movsd	%xmm7, 0xd8(%rsp)
    00005e39: 	callq	__muldc3@PLT # Offset: 24121
    00005e3e: 	movsd	0xd8(%rsp), %xmm7
    00005e47: 	movsd	0xe0(%rsp), %xmm6
    00005e50: 	movapd	%xmm0, %xmm2
    00005e54: 	movapd	%xmm1, %xmm3
    00005e58: 	jmp	.Ltmp1104 # Offset: 24152
.Ltmp718:
    00005e5d: 	movsd	0x40(%rsp), %xmm1
    00005e63: 	movq	DATAat0x2b7e8(%rip), %rax
    00005e6a: 	movapd	%xmm6, %xmm2
    00005e6e: 	movsd	0x10(%rsp), %xmm0
    00005e74: 	movq	%rax, %xmm3
    00005e79: 	callq	__muldc3@PLT # Offset: 24185
    00005e7e: 	movsd	0x10(%rsp), %xmm2
    00005e84: 	movsd	%xmm0, 0x60(%rsp)
    00005e8a: 	movsd	%xmm1, 0x80(%rsp)
    00005e93: 	jmp	.Ltmp1105 # Offset: 24211
.Ltmp986:
    00005e98: 	callq	__stack_chk_fail@PLT # Offset: 24216
    00005e9d: 	endbr64
.Ltmp1108:
    00005ea1: 	movq	%rax, %rbx
    00005ea4: 	jmp	.Ltmp1106 # Offset: 24228
    00005ea9: 	endbr64
.Ltmp1109:
    00005ead: 	movq	%rax, %rbx
    00005eb0: 	jmp	.Ltmp1107 # Offset: 24240
    00005eb2: 	endbr64
    00005eb6: 	jmp	.Ltmp1108 # Offset: 24246
    00005eb8: 	endbr64
    00005ebc: 	jmp	.Ltmp1109 # Offset: 24252
    00005ebe: 	endbr64
    00005ec2: 	jmp	.Ltmp1109 # Offset: 24258
    00005ec4: 	endbr64
    00005ec8: 	movq	%rax, %rbx
    00005ecb: 	jmp	.Ltmp1110 # Offset: 24267
.Ltmp1107:
    00005ecd: 	movq	0x1e0(%rsp), %rdi
    00005ed5: 	cmpq	0x88(%rsp), %rdi
    00005edd: 	je	.Ltmp1110 # Offset: 24285
    00005edf: 	movq	0x1f0(%rsp), %rax
    00005ee7: 	leaq	0x1(%rax), %rsi
    00005eeb: 	callq	_ZdlPvm@PLT # Offset: 24299
.Ltmp1110:
    00005ef0: 	movq	0x140(%rsp), %rdi
    00005ef8: 	leaq	0x150(%rsp), %rax
    00005f00: 	cmpq	%rax, %rdi
    00005f03: 	je	.Ltmp1111 # Offset: 24323
    00005f05: 	movq	0x150(%rsp), %rax
    00005f0d: 	leaq	0x1(%rax), %rsi
    00005f11: 	callq	_ZdlPvm@PLT # Offset: 24337
.Ltmp1111:
    00005f16: 	movq	0x120(%rsp), %rdi
    00005f1e: 	cmpq	0xc0(%rsp), %rdi
    00005f26: 	je	.Ltmp1112 # Offset: 24358
    00005f28: 	movq	0x130(%rsp), %rax
    00005f30: 	leaq	0x1(%rax), %rsi
    00005f34: 	callq	_ZdlPvm@PLT # Offset: 24372
.Ltmp1112:
    00005f39: 	movq	%rbx, %rdi
    00005f3c: 	callq	_Unwind_Resume@PLT # Offset: 24380
.Ltmp1106:
    00005f41: 	movq	0x1e0(%rsp), %rdi
    00005f49: 	cmpq	0x88(%rsp), %rdi
    00005f51: 	je	.Ltmp1111 # Offset: 24401
.Ltmp1125:
    00005f53: 	movq	0x1f0(%rsp), %rax
    00005f5b: 	leaq	0x1(%rax), %rsi
    00005f5f: 	callq	_ZdlPvm@PLT # Offset: 24415
    00005f64: 	jmp	.Ltmp1111 # Offset: 24420
    00005f66: 	endbr64
    00005f6a: 	jmp	.Ltmp1108 # Offset: 24426
    00005f6f: 	endbr64
    00005f73: 	jmp	.Ltmp1108 # Offset: 24435
    00005f78: 	endbr64
    00005f7c: 	jmp	.Ltmp1108 # Offset: 24444
    00005f81: 	endbr64
    00005f85: 	movq	%rax, %rbx
    00005f88: 	jmp	.Ltmp1113 # Offset: 24456
    00005f8d: 	endbr64
.Ltmp1120:
    00005f91: 	movq	%rax, %rbx
    00005f94: 	jmp	.Ltmp1114 # Offset: 24468
    00005f99: 	endbr64
    00005f9d: 	jmp	.Ltmp1109 # Offset: 24477
    00005fa2: 	endbr64
.Ltmp1121:
    00005fa6: 	movq	%rax, %rbx
    00005fa9: 	jmp	.Ltmp1115 # Offset: 24489
    00005fab: 	endbr64
.Ltmp1122:
    00005faf: 	movq	%rax, %rbx
    00005fb2: 	jmp	.Ltmp1116 # Offset: 24498
.Ltmp1115:
    00005fb7: 	movq	0x1e0(%rsp), %rdi
    00005fbf: 	cmpq	0x88(%rsp), %rdi
    00005fc7: 	je	.Ltmp1117 # Offset: 24519
    00005fc9: 	movq	0x1f0(%rsp), %rax
    00005fd1: 	leaq	0x1(%rax), %rsi
    00005fd5: 	callq	_ZdlPvm@PLT # Offset: 24533
.Ltmp1117:
    00005fda: 	movq	0x1c0(%rsp), %rdi
    00005fe2: 	leaq	0x1d0(%rsp), %rax
    00005fea: 	cmpq	%rax, %rdi
    00005fed: 	je	.Ltmp1118 # Offset: 24557
    00005fef: 	movq	0x1d0(%rsp), %rax
    00005ff7: 	leaq	0x1(%rax), %rsi
    00005ffb: 	callq	_ZdlPvm@PLT # Offset: 24571
.Ltmp1118:
    00006000: 	movq	0x1a0(%rsp), %rdi
    00006008: 	leaq	0x1b0(%rsp), %rax
    00006010: 	cmpq	%rax, %rdi
    00006013: 	je	.Ltmp1119 # Offset: 24595
    00006015: 	movq	0x1b0(%rsp), %rax
    0000601d: 	leaq	0x1(%rax), %rsi
    00006021: 	callq	_ZdlPvm@PLT # Offset: 24609
.Ltmp1119:
    00006026: 	movq	0x180(%rsp), %rdi
    0000602e: 	leaq	0x190(%rsp), %rax
    00006036: 	cmpq	%rax, %rdi
    00006039: 	je	.Ltmp1113 # Offset: 24633
    0000603b: 	movq	0x190(%rsp), %rax
    00006043: 	leaq	0x1(%rax), %rsi
    00006047: 	callq	_ZdlPvm@PLT # Offset: 24647
.Ltmp1113:
    0000604c: 	movq	0x160(%rsp), %rdi
    00006054: 	leaq	0x170(%rsp), %rax
    0000605c: 	cmpq	%rax, %rdi
    0000605f: 	je	.Ltmp1110 # Offset: 24671
    00006065: 	movq	0x170(%rsp), %rax
    0000606d: 	leaq	0x1(%rax), %rsi
    00006071: 	callq	_ZdlPvm@PLT # Offset: 24689
    00006076: 	jmp	.Ltmp1110 # Offset: 24694
.Ltmp1116:
    0000607b: 	movq	0x1e0(%rsp), %rdi
    00006083: 	cmpq	0x88(%rsp), %rdi
    0000608b: 	je	.Ltmp1118 # Offset: 24715
    00006091: 	movq	0x1f0(%rsp), %rax
    00006099: 	leaq	0x1(%rax), %rsi
    0000609d: 	callq	_ZdlPvm@PLT # Offset: 24733
    000060a2: 	jmp	.Ltmp1118 # Offset: 24738
    000060a7: 	endbr64
    000060ab: 	jmp	.Ltmp1109 # Offset: 24747
    000060b0: 	endbr64
    000060b4: 	jmp	.Ltmp1120 # Offset: 24756
    000060b9: 	endbr64
    000060bd: 	jmp	.Ltmp1121 # Offset: 24765
    000060c2: 	endbr64
    000060c6: 	movq	%rax, %rbx
    000060c9: 	jmp	.Ltmp1117 # Offset: 24777
    000060ce: 	endbr64
    000060d2: 	jmp	.Ltmp1120 # Offset: 24786
    000060d7: 	endbr64
    000060db: 	jmp	.Ltmp1120 # Offset: 24795
    000060e0: 	endbr64
    000060e4: 	jmp	.Ltmp1108 # Offset: 24804
    000060e9: 	endbr64
    000060ed: 	jmp	.Ltmp1122 # Offset: 24813
    000060f2: 	endbr64
    000060f6: 	jmp	.Ltmp1109 # Offset: 24822
    000060fb: 	endbr64
    000060ff: 	jmp	.Ltmp1109 # Offset: 24831
    00006104: 	endbr64
    00006108: 	jmp	.Ltmp1109 # Offset: 24840
.Ltmp1114:
    0000610d: 	movq	0x1e0(%rsp), %rdi
    00006115: 	cmpq	0x88(%rsp), %rdi
    0000611d: 	je	.Ltmp1113 # Offset: 24861
    00006123: 	movq	0x1f0(%rsp), %rax
    0000612b: 	leaq	0x1(%rax), %rsi
    0000612f: 	callq	_ZdlPvm@PLT # Offset: 24879
    00006134: 	jmp	.Ltmp1113 # Offset: 24884
    00006139: 	endbr64
.Ltmp1126:
    0000613d: 	movq	%rax, %rbx
    00006140: 	jmp	.Ltmp1123 # Offset: 24896
    00006142: 	endbr64
    00006146: 	movq	%rax, %rbx
    00006149: 	jmp	.Ltmp1119 # Offset: 24905
    0000614e: 	endbr64
    00006152: 	movq	%rax, %rbx
    00006155: 	jmp	.Ltmp1124 # Offset: 24917
    00006157: 	endbr64
    0000615b: 	jmp	.Ltmp1121 # Offset: 24923
.Ltmp1123:
    00006160: 	movq	0x1e0(%rsp), %rdi
    00006168: 	cmpq	0x88(%rsp), %rdi
    00006170: 	je	.Ltmp1119 # Offset: 24944
    00006176: 	movq	0x1f0(%rsp), %rax
    0000617e: 	leaq	0x1(%rax), %rsi
    00006182: 	callq	_ZdlPvm@PLT # Offset: 24962
    00006187: 	jmp	.Ltmp1119 # Offset: 24967
.Ltmp1124:
    0000618c: 	movq	0x1e0(%rsp), %rdi
    00006194: 	leaq	0x1f0(%rsp), %rax
    0000619c: 	cmpq	%rax, %rdi
    0000619f: 	jne	.Ltmp1125 # Offset: 24991
    000061a5: 	jmp	.Ltmp1111 # Offset: 24997
    000061aa: 	endbr64
    000061ae: 	jmp	.Ltmp1120 # Offset: 25006
    000061b3: 	endbr64
    000061b7: 	movq	%rax, %rbx
    000061ba: 	jmp	.Ltmp1111 # Offset: 25018
    000061bf: 	endbr64
    000061c3: 	movq	%rax, %rbx
    000061c6: 	jmp	.Ltmp1118 # Offset: 25030
    000061cb: 	endbr64
    000061cf: 	jmp	.Ltmp1122 # Offset: 25039
    000061d4: 	endbr64
    000061d8: 	jmp	.Ltmp1120 # Offset: 25048
    000061dd: 	endbr64
    000061e1: 	jmp	.Ltmp1120 # Offset: 25057
    000061e6: 	endbr64
    000061ea: 	jmp	.Ltmp1120 # Offset: 25066
    000061ef: 	endbr64
    000061f3: 	jmp	.Ltmp1120 # Offset: 25075
    000061f8: 	endbr64
    000061fc: 	jmp	.Ltmp1120 # Offset: 25084
    00006201: 	endbr64
    00006205: 	jmp	.Ltmp1120 # Offset: 25093
    0000620a: 	endbr64
    0000620e: 	jmp	.Ltmp1120 # Offset: 25102
    00006213: 	endbr64
    00006217: 	jmp	.Ltmp1120 # Offset: 25111
    0000621c: 	endbr64
    00006220: 	jmp	.Ltmp1126 # Offset: 25120
    00006225: 	endbr64
    00006229: 	jmp	.Ltmp1120 # Offset: 25129
    0000622e: 	endbr64
    00006232: 	jmp	.Ltmp1126 # Offset: 25138
    00006237: 	endbr64
    0000623b: 	jmp	.Ltmp1126 # Offset: 25147
    00006240: 	endbr64
    00006244: 	jmp	.Ltmp1120 # Offset: 25156
    00006249: 	endbr64
    0000624d: 	jmp	.Ltmp1122 # Offset: 25165
    00006252: 	endbr64
    00006256: 	jmp	.Ltmp1122 # Offset: 25174
    0000625b: 	endbr64
    0000625f: 	jmp	.Ltmp1121 # Offset: 25183
    00006264: 	endbr64
    00006268: 	jmp	.Ltmp1122 # Offset: 25192
    0000626d: 	endbr64
    00006271: 	jmp	.Ltmp1122 # Offset: 25201
    00006276: 	endbr64
    0000627a: 	jmp	.Ltmp1122 # Offset: 25210
    0000627f: 	endbr64
    00006283: 	jmp	.Ltmp1122 # Offset: 25219
    00006288: 	endbr64
    0000628c: 	jmp	.Ltmp1121 # Offset: 25228
    00006291: 	endbr64
    00006295: 	jmp	.Ltmp1109 # Offset: 25237
    0000629a: 	endbr64
    0000629e: 	jmp	.Ltmp1109 # Offset: 25246
    000062a3: 	endbr64
    000062a7: 	jmp	.Ltmp1109 # Offset: 25255
DWARF CFI Instructions:
    <empty>
End of Function "_Z15testComplexTypeISt7complexIdEEvd"

Binary Function "_Z9test_CSE2ISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x12180
  Size        : 0x58f
  MaxSize     : 0x590
  Offset      : 0x12180
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2ISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	movq	%xmm0, 0x58(%rsp)
    0000001e: 	movss	0x58(%rsp), %xmm11
    00000025: 	movss	0x5c(%rsp), %xmm1
    0000002b: 	movq	%rdx, 0x18(%rsp)
    00000030: 	movss	%xmm11, 0x4(%rsp)
    00000037: 	movss	%xmm1, (%rsp)
    0000003c: 	movq	%fs:0x28, %rax
    00000045: 	movq	%rax, 0x68(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movl	iterations(%rip), %r12d
    00000058: 	movss	(%rsp), %xmm1
    0000005d: 	movq	%rax, start_time(%rip)
    00000064: 	movss	0x4(%rsp), %xmm11
    0000006b: 	testl	%r12d, %r12d
    0000006e: 	jle	.Ltmp1127 # Offset: 110
    00000074: 	movss	0xc(%rbp), %xmm7
    00000079: 	leal	-0x2(%r13), %eax
    0000007d: 	xorl	%ebx, %ebx
    0000007f: 	movss	(%rbp), %xmm13
    00000085: 	movss	0x4(%rbp), %xmm12
    0000008b: 	movss	0x8(%rbp), %xmm14
    00000091: 	leaq	0x10(%rbp,%rax,8), %r14
    00000096: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000009d: 	movss	%xmm7, (%rsp)
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1133:
    000000a8: 	movaps	%xmm13, %xmm2
    000000ac: 	movaps	%xmm12, %xmm3
    000000b0: 	subss	(%rsp), %xmm3
    000000b5: 	subss	%xmm14, %xmm2
    000000ba: 	movaps	%xmm11, %xmm6
    000000be: 	movaps	%xmm1, %xmm0
    000000c1: 	movaps	%xmm11, %xmm4
    000000c5: 	movaps	%xmm13, %xmm9
    000000c9: 	movaps	%xmm12, %xmm10
    000000cd: 	mulss	%xmm3, %xmm0
    000000d1: 	mulss	%xmm2, %xmm6
    000000d5: 	mulss	%xmm3, %xmm4
    000000d9: 	subss	%xmm0, %xmm6
    000000dd: 	movaps	%xmm1, %xmm0
    000000e0: 	mulss	%xmm2, %xmm0
    000000e4: 	addss	%xmm4, %xmm0
    000000e8: 	ucomiss	%xmm0, %xmm6
    000000eb: 	jp	.Ltmp1128 # Offset: 235
.Ltmp1145:
    000000f1: 	movaps	%xmm13, %xmm4
    000000f5: 	movss	(%rsp), %xmm5
    000000fa: 	movaps	%xmm12, %xmm2
    000000fe: 	movaps	%xmm14, %xmm3
    00000102: 	addss	%xmm6, %xmm4
    00000106: 	addss	%xmm0, %xmm2
    0000010a: 	addss	%xmm0, %xmm5
    0000010e: 	addss	%xmm6, %xmm3
    00000112: 	addss	%xmm6, %xmm4
    00000116: 	addss	%xmm0, %xmm2
    0000011a: 	addss	%xmm5, %xmm0
    0000011e: 	pxor	%xmm5, %xmm5
    00000122: 	addss	%xmm6, %xmm3
    00000126: 	addss	%xmm4, %xmm5
    0000012a: 	subss	%xmm3, %xmm5
    0000012e: 	addss	%xmm4, %xmm5
    00000132: 	pxor	%xmm4, %xmm4
    00000136: 	addss	%xmm2, %xmm4
    0000013a: 	subss	%xmm3, %xmm5
    0000013e: 	subss	%xmm0, %xmm4
    00000142: 	addss	%xmm2, %xmm4
    00000146: 	subss	%xmm0, %xmm4
    0000014a: 	cmpl	$0x1, %r13d
    0000014e: 	jle	.Ltmp1129 # Offset: 334
    00000154: 	leaq	0x8(%rbp), %rax
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1131:
    00000160: 	movaps	%xmm9, %xmm8
    00000164: 	movaps	%xmm10, %xmm7
    00000168: 	movss	(%rax), %xmm9
    0000016d: 	movaps	%xmm11, %xmm6
    00000171: 	movss	0x4(%rax), %xmm10
    00000177: 	movaps	%xmm8, %xmm2
    0000017b: 	movaps	%xmm7, %xmm3
    0000017e: 	movaps	%xmm1, %xmm0
    00000181: 	subss	%xmm9, %xmm2
    00000186: 	movaps	%xmm1, %xmm15
    0000018a: 	subss	%xmm10, %xmm3
    0000018f: 	mulss	%xmm2, %xmm6
    00000193: 	mulss	%xmm3, %xmm0
    00000197: 	mulss	%xmm2, %xmm15
    0000019c: 	subss	%xmm0, %xmm6
    000001a0: 	movaps	%xmm11, %xmm0
    000001a4: 	mulss	%xmm3, %xmm0
    000001a8: 	addss	%xmm15, %xmm0
    000001ad: 	ucomiss	%xmm6, %xmm0
    000001b0: 	jp	.Ltmp1130 # Offset: 432
.Ltmp1144:
    000001b6: 	addss	%xmm0, %xmm7
    000001ba: 	addss	%xmm6, %xmm8
    000001bf: 	movaps	%xmm0, %xmm3
    000001c2: 	addq	$0x8, %rax
    000001c6: 	movaps	%xmm6, %xmm2
    000001c9: 	addss	%xmm10, %xmm3
    000001ce: 	addss	%xmm9, %xmm2
    000001d3: 	addss	%xmm0, %xmm7
    000001d7: 	addss	%xmm6, %xmm8
    000001dc: 	addss	%xmm3, %xmm0
    000001e0: 	addss	%xmm6, %xmm2
    000001e4: 	addss	%xmm8, %xmm5
    000001e9: 	addss	%xmm7, %xmm4
    000001ed: 	subss	%xmm2, %xmm5
    000001f1: 	subss	%xmm0, %xmm4
    000001f5: 	addss	%xmm8, %xmm5
    000001fa: 	addss	%xmm7, %xmm4
    000001fe: 	subss	%xmm2, %xmm5
    00000202: 	subss	%xmm0, %xmm4
    00000206: 	cmpq	%r14, %rax
    00000209: 	jne	.Ltmp1131 # Offset: 521
.Ltmp1129:
    0000020f: 	movss	%xmm5, 0x40(%rsp)
    00000215: 	movss	%xmm4, 0x44(%rsp)
    0000021b: 	movq	0x40(%rsp), %xmm0
    00000221: 	movss	%xmm14, 0x20(%rsp)
    00000228: 	movss	%xmm12, 0x14(%rsp)
    0000022f: 	movss	%xmm13, 0x8(%rsp)
    00000236: 	movss	%xmm1, 0x10(%rsp)
    0000023c: 	movss	%xmm11, 0x4(%rsp)
    00000243: 	callq	cabsf@PLT # Offset: 579
    00000248: 	movss	DATAat0x2b908(%rip), %xmm1
    00000250: 	movss	0x4(%rsp), %xmm11
    00000257: 	movss	0x8(%rsp), %xmm13
    0000025e: 	movss	0x14(%rsp), %xmm12
    00000265: 	comiss	%xmm0, %xmm1
    00000268: 	movss	0x20(%rsp), %xmm14
    0000026f: 	movss	0x10(%rsp), %xmm1
    00000275: 	jbe	.Ltmp1132 # Offset: 629
    0000027b: 	addl	$0x1, %ebx
    0000027e: 	cmpl	%r12d, %ebx
    00000281: 	jl	.Ltmp1133 # Offset: 641
.Ltmp1127:
    00000287: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000028e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000295: 	subq	$0x20, %rax
    00000299: 	cmpq	%rax, %rbx
    0000029c: 	je	.Ltmp1134 # Offset: 668
    000002a2: 	movq	0x18(%rsp), %rax
    000002a7: 	leaq	0x10(%rbx), %rdi
    000002ab: 	movq	%rdi, (%rbx)
    000002ae: 	movq	(%rax), %rbp
    000002b1: 	movq	0x8(%rax), %r12
    000002b5: 	movq	%rbp, %rax
    000002b8: 	addq	%r12, %rax
    000002bb: 	je	.Ltmp1135 # Offset: 699
    000002bd: 	testq	%rbp, %rbp
    000002c0: 	je	.Ltmp1136 # Offset: 704
.Ltmp1135:
    000002c6: 	movq	%r12, 0x60(%rsp)
    000002cb: 	cmpq	$0xf, %r12
    000002cf: 	ja	.Ltmp1137 # Offset: 719
    000002d5: 	cmpq	$0x1, %r12
    000002d9: 	jne	.Ltmp1138 # Offset: 729
    000002df: 	movzbl	(%rbp), %eax
    000002e3: 	movb	%al, 0x10(%rbx)
.Ltmp1141:
    000002e6: 	movq	%r12, 0x8(%rbx)
    000002ea: 	movb	$0x0, (%rdi,%r12)
    000002ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002f6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fd: 	addq	$0x20, %rax
    00000301: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000308: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000030f: 	je	.Ltmp1139 # Offset: 783
.Ltmp1142:
    00000315: 	movq	-0x20(%rax), %rbp
    00000319: 	callq	clock@PLT # Offset: 793
    0000031e: 	movq	%rax, end_time(%rip)
    00000325: 	movq	0x68(%rsp), %rdx
    0000032a: 	subq	%fs:0x28, %rdx
    00000333: 	jne	.Ltmp1140 # Offset: 819
    00000339: 	subq	start_time(%rip), %rax
    00000340: 	pxor	%xmm0, %xmm0
    00000344: 	movq	%rbp, %rdi
    00000347: 	cvtsi2sd	%rax, %xmm0
    0000034c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000354: 	addq	$0x78, %rsp
    00000358: 	popq	%rbx
    00000359: 	popq	%rbp
    0000035a: 	popq	%r12
    0000035c: 	popq	%r13
    0000035e: 	popq	%r14
    00000360: 	popq	%r15
    00000362: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 866
    00000367: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1132:
    00000370: 	movl	current_test(%rip), %edx
    00000376: 	movq	%r15, %rsi
    00000379: 	movl	$0x1, %edi
    0000037e: 	xorl	%eax, %eax
    00000380: 	addl	$0x1, %ebx
    00000383: 	callq	__printf_chk@PLT # Offset: 899
    00000388: 	movl	iterations(%rip), %r12d
    0000038f: 	cmpl	%r12d, %ebx
    00000392: 	jge	.Ltmp1127 # Offset: 914
    00000398: 	movss	0xc(%rbp), %xmm1
    0000039d: 	movss	(%rbp), %xmm13
    000003a3: 	movss	0x4(%rbp), %xmm12
    000003a9: 	movss	0x8(%rbp), %xmm14
    000003af: 	movss	%xmm1, (%rsp)
    000003b4: 	movss	0x4(%rsp), %xmm11
    000003bb: 	movss	0x10(%rsp), %xmm1
    000003c1: 	jmp	.Ltmp1133 # Offset: 961
.Ltmp1137:
    000003c6: 	movq	%rbx, %rdi
    000003c9: 	leaq	0x60(%rsp), %rsi
    000003ce: 	xorl	%edx, %edx
    000003d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 976
    000003d5: 	movq	%rax, (%rbx)
    000003d8: 	movq	%rax, %rdi
    000003db: 	movq	0x60(%rsp), %rax
    000003e0: 	movq	%rax, 0x10(%rbx)
.Ltmp1143:
    000003e4: 	movq	%r12, %rdx
    000003e7: 	movq	%rbp, %rsi
    000003ea: 	callq	memcpy@PLT # Offset: 1002
    000003ef: 	movq	0x60(%rsp), %r12
    000003f4: 	movq	(%rbx), %rdi
    000003f7: 	jmp	.Ltmp1141 # Offset: 1015
.Ltmp1134:
    000003fc: 	movq	0x18(%rsp), %rsi
    00000401: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000408: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1032
    0000040d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000414: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000041b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000422: 	jne	.Ltmp1142 # Offset: 1058
.Ltmp1139:
    00000428: 	movq	-0x8(%rdx), %rax
    0000042c: 	addq	$0x200, %rax
    00000432: 	jmp	.Ltmp1142 # Offset: 1074
.Ltmp1138:
    00000437: 	testq	%r12, %r12
    0000043a: 	je	.Ltmp1141 # Offset: 1082
    00000440: 	jmp	.Ltmp1143 # Offset: 1088
    00000442: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1130:
    00000448: 	movaps	%xmm11, %xmm0
    0000044c: 	movq	%rax, 0x8(%rsp)
    00000451: 	movss	%xmm14, 0x3c(%rsp)
    00000458: 	movss	%xmm12, 0x38(%rsp)
    0000045f: 	movss	%xmm13, 0x34(%rsp)
    00000466: 	movss	%xmm10, 0x30(%rsp)
    0000046d: 	movss	%xmm5, 0x2c(%rsp)
    00000473: 	movss	%xmm4, 0x28(%rsp)
    00000479: 	movss	%xmm9, 0x24(%rsp)
    00000480: 	movss	%xmm7, 0x20(%rsp)
    00000486: 	movss	%xmm8, 0x14(%rsp)
    0000048d: 	movss	%xmm1, 0x10(%rsp)
    00000493: 	movss	%xmm11, 0x4(%rsp)
    0000049a: 	callq	__mulsc3@PLT # Offset: 1178
    0000049f: 	movss	0x3c(%rsp), %xmm14
    000004a6: 	movss	0x38(%rsp), %xmm12
    000004ad: 	movq	%xmm0, 0x48(%rsp)
    000004b3: 	movss	0x34(%rsp), %xmm13
    000004ba: 	movss	0x48(%rsp), %xmm6
    000004c0: 	movss	0x4c(%rsp), %xmm0
    000004c6: 	movss	0x30(%rsp), %xmm10
    000004cd: 	movss	0x2c(%rsp), %xmm5
    000004d3: 	movss	0x28(%rsp), %xmm4
    000004d9: 	movss	0x24(%rsp), %xmm9
    000004e0: 	movss	0x20(%rsp), %xmm7
    000004e6: 	movss	0x14(%rsp), %xmm8
    000004ed: 	movq	0x8(%rsp), %rax
    000004f2: 	movss	0x10(%rsp), %xmm1
    000004f8: 	movss	0x4(%rsp), %xmm11
    000004ff: 	jmp	.Ltmp1144 # Offset: 1279
.Ltmp1128:
    00000504: 	movaps	%xmm11, %xmm0
    00000508: 	movss	%xmm14, 0x28(%rsp)
    0000050f: 	movss	%xmm12, 0x24(%rsp)
    00000516: 	movss	%xmm13, 0x20(%rsp)
    0000051d: 	movss	%xmm12, 0x14(%rsp)
    00000524: 	movss	%xmm13, 0x8(%rsp)
    0000052b: 	movss	%xmm1, 0x10(%rsp)
    00000531: 	movss	%xmm11, 0x4(%rsp)
    00000538: 	callq	__mulsc3@PLT # Offset: 1336
    0000053d: 	movss	0x24(%rsp), %xmm12
    00000544: 	movss	0x20(%rsp), %xmm13
    0000054b: 	movq	%xmm0, 0x50(%rsp)
    00000551: 	movss	0x28(%rsp), %xmm14
    00000558: 	movss	0x50(%rsp), %xmm6
    0000055e: 	movss	0x54(%rsp), %xmm0
    00000564: 	movss	0x10(%rsp), %xmm1
    0000056a: 	movaps	%xmm12, %xmm10
    0000056e: 	movaps	%xmm13, %xmm9
    00000572: 	movss	0x4(%rsp), %xmm11
    00000579: 	jmp	.Ltmp1145 # Offset: 1401
.Ltmp1140:
    0000057e: 	callq	__stack_chk_fail@PLT # Offset: 1406
.Ltmp1136:
    00000583: 	leaq	DATAat0x2b008(%rip), %rdi
    0000058a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1418
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2ISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15testComplexTypeISt7complexIfEEvd" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x12710
  Size        : 0x6f14
  MaxSize     : 0x6f20
  Offset      : 0x12710
  Section     : .text
  Orc Section : .local.text._Z15testComplexTypeISt7complexIfEEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1146:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1146 # Offset: 37
    00000027: 	subq	$0xf28, %rsp
    0000002e: 	xorl	%esi, %esi
    00000030: 	movl	$0xfa00, %edx
    00000035: 	leaq	0x510(%rsp), %rbp
    0000003d: 	movsd	%xmm0, (%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0xff18(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movq	%rbp, %rdi
    00000058: 	callq	memset@PLT # Offset: 88
    0000005d: 	movsd	(%rsp), %xmm0
    00000062: 	pxor	%xmm6, %xmm6
    00000066: 	movsd	DATAat0x2b620(%rip), %xmm1
    0000006e: 	pxor	%xmm3, %xmm3
    00000072: 	addsd	%xmm0, %xmm1
    00000076: 	cvtsd2ss	%xmm0, %xmm3
    0000007a: 	movss	DATAat0x2b7c0(%rip), %xmm0
    00000082: 	movss	%xmm3, 0xc(%rsp)
    00000088: 	cvtsd2ss	%xmm1, %xmm6
    0000008c: 	movaps	%xmm3, %xmm1
    0000008f: 	movss	%xmm6, 0x30(%rsp)
    00000095: 	addss	%xmm3, %xmm1
    00000099: 	mulss	%xmm6, %xmm0
    0000009d: 	movaps	%xmm1, %xmm7
    000000a0: 	movss	DATAat0x2b7c0(%rip), %xmm1
    000000a8: 	mulss	%xmm3, %xmm1
    000000ac: 	subss	%xmm0, %xmm7
    000000b0: 	movaps	%xmm6, %xmm0
    000000b3: 	addss	%xmm6, %xmm0
    000000b7: 	movss	%xmm7, 0x48(%rsp)
    000000bd: 	addss	%xmm0, %xmm1
    000000c1: 	movss	%xmm1, 0xc8(%rsp)
    000000ca: 	ucomiss	%xmm7, %xmm1
    000000cd: 	jp	.Ltmp1147 # Offset: 205
.Ltmp1539:
    000000d3: 	movss	0x30(%rsp), %xmm7
    000000d9: 	movss	0x48(%rsp), %xmm0
    000000df: 	leaq	0xff10(%rsp), %rbx
    000000e7: 	addss	DATAat0x2b930(%rip), %xmm7
    000000ef: 	movss	DATAat0x2b7a0(%rip), %xmm2
    000000f7: 	movss	0xc8(%rsp), %xmm1
    00000100: 	addss	0xc(%rsp), %xmm2
    00000106: 	movaps	%xmm7, %xmm3
    00000109: 	movss	%xmm7, 0x4c(%rsp)
    0000010f: 	movss	%xmm2, 0x40(%rsp)
    00000115: 	callq	__divsc3@PLT # Offset: 277
    0000011a: 	movss	0x30(%rsp), %xmm7
    00000120: 	movss	0xc(%rsp), %xmm3
    00000126: 	movq	%rbp, %rax
    00000129: 	movq	%xmm0, 0x400(%rsp)
    00000132: 	pxor	%xmm0, %xmm0
    00000136: 	addss	0x404(%rsp), %xmm7
    0000013f: 	addss	0x400(%rsp), %xmm3
    00000148: 	cvtsd2ss	init_value(%rip), %xmm0
    00000150: 	movss	%xmm7, 0x44(%rsp)
    00000156: 	pxor	%xmm7, %xmm7
    0000015a: 	unpcklps	%xmm7, %xmm0
    0000015d: 	movss	%xmm3, 0x3c(%rsp)
    00000163: 	movlhps	%xmm0, %xmm0
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1148:
    00000170: 	movaps	%xmm0, (%rax)
    00000173: 	addq	$0x20, %rax
    00000177: 	movaps	%xmm0, -0x10(%rax)
    0000017b: 	cmpq	%rbx, %rax
    0000017e: 	jne	.Ltmp1148 # Offset: 382
    00000180: 	leaq	0x440(%rsp), %rax
    00000188: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm3
    00000190: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    00000198: 	leaq	0x430(%rsp), %r15
    000001a0: 	movq	%rax, 0xd0(%rsp)
    000001a8: 	leaq	0x410(%rsp), %rsi
    000001b0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001b7: 	movq	%rax, 0x430(%rsp)
    000001bf: 	leaq	0x4f0(%rsp), %r12
    000001c7: 	movabsq	$0x6f635f74616f6c66, %rax
    000001d1: 	movq	%r15, 0x58(%rsp)
    000001d6: 	movq	%rax, 0x440(%rsp)
    000001de: 	movl	$0x656c706d, 0x448(%rsp)
    000001e9: 	movb	$0x78, 0x44c(%rsp)
    000001f1: 	movq	$0xd, 0x438(%rsp)
    000001fd: 	movb	$0x0, 0x44d(%rsp)
    00000205: 	movaps	%xmm3, 0x410(%rsp)
    0000020d: 	movaps	%xmm7, 0x420(%rsp)
    00000215: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 533
    0000021a: 	leaq	DATAat0x2b561(%rip), %rdx
    00000221: 	movq	%r15, %rsi
    00000224: 	movq	%r12, %rdi
    00000227: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 551
    0000022c: 	callq	clock@PLT # Offset: 556
    00000231: 	movl	iterations(%rip), %edx
    00000237: 	movq	%rax, start_time(%rip)
    0000023e: 	testl	%edx, %edx
    00000240: 	jle	.Ltmp1149 # Offset: 576
    00000242: 	pxor	%xmm6, %xmm6
    00000246: 	movss	DATAat0x2b934(%rip), %xmm3
    0000024e: 	xorl	%r13d, %r13d
    00000251: 	movss	DATAat0x2b840(%rip), %xmm7
    00000259: 	movss	%xmm6, (%rsp)
    0000025e: 	movss	DATAat0x2b908(%rip), %xmm6
    00000266: 	leaq	DATAat0x2b1d0(%rip), %r14
    0000026d: 	movss	%xmm3, 0x38(%rsp)
    00000273: 	movaps	%xmm7, 0x10(%rsp)
    00000278: 	movss	%xmm6, 0x8(%rsp)
    0000027e: 	nop # Size: 2
.Ltmp1152:
    00000280: 	movl	$0x1f40, %eax
    00000285: 	pxor	%xmm0, %xmm0
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp1150:
    00000290: 	addss	DATAat0x2b7a0(%rip), %xmm0
    00000298: 	subl	$0x1, %eax
    0000029b: 	jne	.Ltmp1150 # Offset: 667
    0000029d: 	subss	0x38(%rsp), %xmm0
    000002a3: 	movss	0x8(%rsp), %xmm7
    000002a9: 	andps	0x10(%rsp), %xmm0
    000002ae: 	comiss	%xmm0, %xmm7
    000002b1: 	jbe	.Ltmp1151 # Offset: 689
.Ltmp1449:
    000002b7: 	addl	$0x1, %r13d
    000002bb: 	cmpl	%edx, %r13d
    000002be: 	jl	.Ltmp1152 # Offset: 702
.Ltmp1149:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 714
    000002cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	je	.Ltmp1153 # Offset: 740
.Ltmp1450:
    000002ea: 	movq	-0x20(%rax), %r13
    000002ee: 	callq	clock@PLT # Offset: 750
    000002f3: 	pxor	%xmm0, %xmm0
    000002f7: 	movq	%rax, end_time(%rip)
    000002fe: 	movq	%r13, %rdi
    00000301: 	subq	start_time(%rip), %rax
    00000308: 	cvtsi2sd	%rax, %xmm0
    0000030d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000315: 	callq	_Z13record_resultdPKc # Offset: 789
    0000031a: 	movq	0x4f0(%rsp), %rdi
    00000322: 	leaq	0x500(%rsp), %rax
    0000032a: 	movq	%rax, 0x50(%rsp)
    0000032f: 	cmpq	%rax, %rdi
    00000332: 	je	.Ltmp1154 # Offset: 818
    00000334: 	movq	0x500(%rsp), %rax
    0000033c: 	leaq	0x1(%rax), %rsi
    00000340: 	callq	_ZdlPvm@PLT # Offset: 832
.Ltmp1154:
    00000345: 	movq	0x58(%rsp), %rsi
    0000034a: 	leaq	DATAat0x2b1e0(%rip), %rdx
    00000351: 	movq	%r12, %rdi
    00000354: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 852
    00000359: 	callq	clock@PLT # Offset: 857
    0000035e: 	movl	iterations(%rip), %edx
    00000364: 	movq	%rax, start_time(%rip)
    0000036b: 	testl	%edx, %edx
    0000036d: 	jle	.Ltmp1155 # Offset: 877
    0000036f: 	movss	DATAat0x2b908(%rip), %xmm6
    00000377: 	pxor	%xmm3, %xmm3
    0000037b: 	xorl	%r13d, %r13d
    0000037e: 	movss	DATAat0x2b840(%rip), %xmm7
    00000386: 	movss	%xmm3, (%rsp)
    0000038b: 	leaq	DATAat0x2b1d0(%rip), %r14
    00000392: 	movaps	%xmm7, 0x10(%rsp)
    00000397: 	movss	%xmm6, 0x8(%rsp)
    0000039d: 	nopl	(%rax) # Size: 3
.Ltmp1158:
    000003a0: 	movl	$0x1f40, %eax
    000003a5: 	pxor	%xmm0, %xmm0
    000003a9: 	nopl	(%rax) # Size: 7
.Ltmp1156:
    000003b0: 	addss	DATAat0x2b7c0(%rip), %xmm0
    000003b8: 	subl	$0x1, %eax
    000003bb: 	jne	.Ltmp1156 # Offset: 955
    000003bd: 	subss	DATAat0x2b938(%rip), %xmm0
    000003c5: 	movss	0x8(%rsp), %xmm7
    000003cb: 	andps	0x10(%rsp), %xmm0
    000003d0: 	comiss	%xmm0, %xmm7
    000003d3: 	jbe	.Ltmp1157 # Offset: 979
.Ltmp1448:
    000003d9: 	addl	$0x1, %r13d
    000003dd: 	cmpl	%edx, %r13d
    000003e0: 	jl	.Ltmp1158 # Offset: 992
.Ltmp1155:
    000003e2: 	movq	%r12, %rsi
    000003e5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1004
    000003f1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000406: 	je	.Ltmp1159 # Offset: 1030
.Ltmp1483:
    0000040c: 	movq	-0x20(%rax), %r13
    00000410: 	callq	clock@PLT # Offset: 1040
    00000415: 	pxor	%xmm0, %xmm0
    00000419: 	movq	%rax, end_time(%rip)
    00000420: 	movq	%r13, %rdi
    00000423: 	subq	start_time(%rip), %rax
    0000042a: 	cvtsi2sd	%rax, %xmm0
    0000042f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000437: 	callq	_Z13record_resultdPKc # Offset: 1079
    0000043c: 	movq	0x4f0(%rsp), %rdi
    00000444: 	cmpq	0x50(%rsp), %rdi
    00000449: 	je	.Ltmp1160 # Offset: 1097
    0000044b: 	movq	0x500(%rsp), %rax
    00000453: 	leaq	0x1(%rax), %rsi
    00000457: 	callq	_ZdlPvm@PLT # Offset: 1111
.Ltmp1160:
    0000045c: 	movq	0x58(%rsp), %rsi
    00000461: 	leaq	DATAat0x2b1ef(%rip), %rdx
    00000468: 	movq	%r12, %rdi
    0000046b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1131
    00000470: 	callq	clock@PLT # Offset: 1136
    00000475: 	movl	iterations(%rip), %edx
    0000047b: 	movq	%rax, start_time(%rip)
    00000482: 	testl	%edx, %edx
    00000484: 	jle	.Ltmp1161 # Offset: 1156
    0000048a: 	pxor	%xmm3, %xmm3
    0000048e: 	movss	DATAat0x2b840(%rip), %xmm7
    00000496: 	xorl	%r13d, %r13d
    00000499: 	movss	DATAat0x2b908(%rip), %xmm6
    000004a1: 	movss	%xmm3, (%rsp)
    000004a6: 	movss	DATAat0x2b92c(%rip), %xmm3
    000004ae: 	leaq	DATAat0x2b1d0(%rip), %r14
    000004b5: 	movaps	%xmm7, 0x10(%rsp)
    000004ba: 	movss	DATAat0x2b900(%rip), %xmm7
    000004c2: 	movss	%xmm6, 0x8(%rsp)
    000004c8: 	movss	%xmm3, 0x20(%rsp)
    000004ce: 	movss	%xmm7, 0x38(%rsp)
    000004d4: 	nopl	(%rax) # Size: 4
.Ltmp1164:
    000004d8: 	movss	0x20(%rsp), %xmm1
    000004de: 	movl	$0x1f40, %eax
    000004e3: 	pxor	%xmm0, %xmm0
    000004e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1162:
    000004f0: 	addss	%xmm1, %xmm0
    000004f4: 	subl	$0x1, %eax
    000004f7: 	jne	.Ltmp1162 # Offset: 1271
    000004f9: 	subss	0x38(%rsp), %xmm0
    000004ff: 	movss	0x8(%rsp), %xmm7
    00000505: 	andps	0x10(%rsp), %xmm0
    0000050a: 	comiss	%xmm0, %xmm7
    0000050d: 	jbe	.Ltmp1163 # Offset: 1293
.Ltmp1447:
    00000513: 	addl	$0x1, %r13d
    00000517: 	cmpl	%edx, %r13d
    0000051a: 	jl	.Ltmp1164 # Offset: 1306
.Ltmp1161:
    0000051c: 	movq	%r12, %rsi
    0000051f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000526: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1318
    0000052b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000532: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000539: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000540: 	je	.Ltmp1165 # Offset: 1344
.Ltmp1482:
    00000546: 	movq	-0x20(%rax), %r13
    0000054a: 	callq	clock@PLT # Offset: 1354
    0000054f: 	pxor	%xmm0, %xmm0
    00000553: 	movq	%rax, end_time(%rip)
    0000055a: 	movq	%r13, %rdi
    0000055d: 	subq	start_time(%rip), %rax
    00000564: 	cvtsi2sd	%rax, %xmm0
    00000569: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000571: 	callq	_Z13record_resultdPKc # Offset: 1393
    00000576: 	movq	0x4f0(%rsp), %rdi
    0000057e: 	cmpq	0x50(%rsp), %rdi
    00000583: 	je	.Ltmp1166 # Offset: 1411
    00000585: 	movq	0x500(%rsp), %rax
    0000058d: 	leaq	0x1(%rax), %rsi
    00000591: 	callq	_ZdlPvm@PLT # Offset: 1425
.Ltmp1166:
    00000596: 	movq	0x58(%rsp), %rsi
    0000059b: 	leaq	DATAat0x2b203(%rip), %rdx
    000005a2: 	movq	%r12, %rdi
    000005a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1445
    000005aa: 	callq	clock@PLT # Offset: 1450
    000005af: 	movl	iterations(%rip), %edx
    000005b5: 	movq	%rax, start_time(%rip)
    000005bc: 	testl	%edx, %edx
    000005be: 	jle	.Ltmp1167 # Offset: 1470
    000005c0: 	movss	DATAat0x2b908(%rip), %xmm7
    000005c8: 	pxor	%xmm6, %xmm6
    000005cc: 	xorl	%r13d, %r13d
    000005cf: 	movss	DATAat0x2b840(%rip), %xmm3
    000005d7: 	movss	%xmm6, (%rsp)
    000005dc: 	leaq	DATAat0x2b1d0(%rip), %r14
    000005e3: 	movaps	%xmm3, 0x10(%rsp)
    000005e8: 	movss	%xmm7, 0x8(%rsp)
    000005ee: 	nop # Size: 2
.Ltmp1170:
    000005f0: 	movl	$0x1f40, %eax
    000005f5: 	pxor	%xmm0, %xmm0
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp1168:
    00000600: 	addss	DATAat0x2b93c(%rip), %xmm0
    00000608: 	subl	$0x1, %eax
    0000060b: 	jne	.Ltmp1168 # Offset: 1547
    0000060d: 	subss	DATAat0x2b940(%rip), %xmm0
    00000615: 	movss	0x8(%rsp), %xmm7
    0000061b: 	andps	0x10(%rsp), %xmm0
    00000620: 	comiss	%xmm0, %xmm7
    00000623: 	jbe	.Ltmp1169 # Offset: 1571
.Ltmp1446:
    00000629: 	addl	$0x1, %r13d
    0000062d: 	cmpl	%edx, %r13d
    00000630: 	jl	.Ltmp1170 # Offset: 1584
.Ltmp1167:
    00000632: 	movq	%r12, %rsi
    00000635: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000063c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1596
    00000641: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000648: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000064f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000656: 	je	.Ltmp1171 # Offset: 1622
.Ltmp1481:
    0000065c: 	movq	-0x20(%rax), %r13
    00000660: 	callq	clock@PLT # Offset: 1632
    00000665: 	pxor	%xmm0, %xmm0
    00000669: 	movq	%rax, end_time(%rip)
    00000670: 	movq	%r13, %rdi
    00000673: 	subq	start_time(%rip), %rax
    0000067a: 	cvtsi2sd	%rax, %xmm0
    0000067f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000687: 	callq	_Z13record_resultdPKc # Offset: 1671
    0000068c: 	movq	0x4f0(%rsp), %rdi
    00000694: 	cmpq	0x50(%rsp), %rdi
    00000699: 	je	.Ltmp1172 # Offset: 1689
    0000069b: 	movq	0x500(%rsp), %rax
    000006a3: 	leaq	0x1(%rax), %rsi
    000006a7: 	callq	_ZdlPvm@PLT # Offset: 1703
.Ltmp1172:
    000006ac: 	movq	0x58(%rsp), %rsi
    000006b1: 	leaq	DATAat0x2b217(%rip), %rdx
    000006b8: 	movq	%r12, %rdi
    000006bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1723
    000006c0: 	callq	clock@PLT # Offset: 1728
    000006c5: 	movl	iterations(%rip), %edx
    000006cb: 	movq	%rax, start_time(%rip)
    000006d2: 	testl	%edx, %edx
    000006d4: 	jle	.Ltmp1173 # Offset: 1748
    000006da: 	pxor	%xmm6, %xmm6
    000006de: 	movss	DATAat0x2b934(%rip), %xmm3
    000006e6: 	xorl	%r13d, %r13d
    000006e9: 	movss	DATAat0x2b840(%rip), %xmm7
    000006f1: 	movss	%xmm6, (%rsp)
    000006f6: 	movss	DATAat0x2b908(%rip), %xmm6
    000006fe: 	leaq	DATAat0x2b1d0(%rip), %r14
    00000705: 	movss	%xmm3, 0x38(%rsp)
    0000070b: 	movaps	%xmm7, 0x10(%rsp)
    00000710: 	movss	%xmm6, 0x8(%rsp)
    00000716: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1176:
    00000720: 	movl	$0x1f40, %eax
    00000725: 	pxor	%xmm0, %xmm0
    00000729: 	nopl	(%rax) # Size: 7
.Ltmp1174:
    00000730: 	addss	DATAat0x2b7a0(%rip), %xmm0
    00000738: 	subl	$0x1, %eax
    0000073b: 	jne	.Ltmp1174 # Offset: 1851
    0000073d: 	subss	0x38(%rsp), %xmm0
    00000743: 	movss	0x8(%rsp), %xmm7
    00000749: 	andps	0x10(%rsp), %xmm0
    0000074e: 	comiss	%xmm0, %xmm7
    00000751: 	jbe	.Ltmp1175 # Offset: 1873
.Ltmp1445:
    00000757: 	addl	$0x1, %r13d
    0000075b: 	cmpl	%edx, %r13d
    0000075e: 	jl	.Ltmp1176 # Offset: 1886
.Ltmp1173:
    00000760: 	movq	%r12, %rsi
    00000763: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000076a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1898
    0000076f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000776: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000077d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000784: 	je	.Ltmp1177 # Offset: 1924
.Ltmp1480:
    0000078a: 	movq	-0x20(%rax), %r13
    0000078e: 	callq	clock@PLT # Offset: 1934
    00000793: 	pxor	%xmm0, %xmm0
    00000797: 	movq	%rax, end_time(%rip)
    0000079e: 	movq	%r13, %rdi
    000007a1: 	subq	start_time(%rip), %rax
    000007a8: 	cvtsi2sd	%rax, %xmm0
    000007ad: 	divsd	DATAat0x2b628(%rip), %xmm0
    000007b5: 	callq	_Z13record_resultdPKc # Offset: 1973
    000007ba: 	movq	0x4f0(%rsp), %rdi
    000007c2: 	cmpq	0x50(%rsp), %rdi
    000007c7: 	je	.Ltmp1178 # Offset: 1991
    000007c9: 	movq	0x500(%rsp), %rax
    000007d1: 	leaq	0x1(%rax), %rsi
    000007d5: 	callq	_ZdlPvm@PLT # Offset: 2005
.Ltmp1178:
    000007da: 	movq	0x58(%rsp), %rsi
    000007df: 	leaq	DATAat0x2b229(%rip), %rdx
    000007e6: 	movq	%r12, %rdi
    000007e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2025
    000007ee: 	callq	clock@PLT # Offset: 2030
    000007f3: 	movq	%r12, %rsi
    000007f6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000007fd: 	movq	%rax, start_time(%rip)
    00000804: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2052
    00000809: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000810: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000817: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000081e: 	je	.Ltmp1179 # Offset: 2078
.Ltmp1479:
    00000824: 	movq	-0x20(%rax), %r13
    00000828: 	callq	clock@PLT # Offset: 2088
    0000082d: 	pxor	%xmm0, %xmm0
    00000831: 	movq	%rax, end_time(%rip)
    00000838: 	movq	%r13, %rdi
    0000083b: 	subq	start_time(%rip), %rax
    00000842: 	cvtsi2sd	%rax, %xmm0
    00000847: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000084f: 	callq	_Z13record_resultdPKc # Offset: 2127
    00000854: 	movq	0x4f0(%rsp), %rdi
    0000085c: 	cmpq	0x50(%rsp), %rdi
    00000861: 	je	.Ltmp1180 # Offset: 2145
    00000863: 	movq	0x500(%rsp), %rax
    0000086b: 	leaq	0x1(%rax), %rsi
    0000086f: 	callq	_ZdlPvm@PLT # Offset: 2159
.Ltmp1180:
    00000874: 	movq	0x58(%rsp), %rsi
    00000879: 	leaq	DATAat0x2b23a(%rip), %rdx
    00000880: 	movq	%r12, %rdi
    00000883: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2179
    00000888: 	callq	clock@PLT # Offset: 2184
    0000088d: 	movl	iterations(%rip), %edx
    00000893: 	movq	%rax, start_time(%rip)
    0000089a: 	testl	%edx, %edx
    0000089c: 	jle	.Ltmp1181 # Offset: 2204
    000008a2: 	pxor	%xmm3, %xmm3
    000008a6: 	movss	DATAat0x2b840(%rip), %xmm7
    000008ae: 	xorl	%r13d, %r13d
    000008b1: 	movss	DATAat0x2b908(%rip), %xmm6
    000008b9: 	movss	%xmm3, (%rsp)
    000008be: 	movss	DATAat0x2b92c(%rip), %xmm3
    000008c6: 	leaq	DATAat0x2b1d0(%rip), %r14
    000008cd: 	movaps	%xmm7, 0x10(%rsp)
    000008d2: 	movss	DATAat0x2b900(%rip), %xmm7
    000008da: 	movss	%xmm6, 0x8(%rsp)
    000008e0: 	movss	%xmm3, 0x20(%rsp)
    000008e6: 	movss	%xmm7, 0x38(%rsp)
    000008ec: 	nopl	(%rax) # Size: 4
.Ltmp1184:
    000008f0: 	movss	0x20(%rsp), %xmm1
    000008f6: 	movl	$0x1f40, %eax
    000008fb: 	pxor	%xmm0, %xmm0
    000008ff: 	nop # Size: 1
.Ltmp1182:
    00000900: 	addss	%xmm1, %xmm0
    00000904: 	subl	$0x1, %eax
    00000907: 	jne	.Ltmp1182 # Offset: 2311
    00000909: 	subss	0x38(%rsp), %xmm0
    0000090f: 	movss	0x8(%rsp), %xmm7
    00000915: 	andps	0x10(%rsp), %xmm0
    0000091a: 	comiss	%xmm0, %xmm7
    0000091d: 	jbe	.Ltmp1183 # Offset: 2333
.Ltmp1444:
    00000923: 	addl	$0x1, %r13d
    00000927: 	cmpl	%edx, %r13d
    0000092a: 	jl	.Ltmp1184 # Offset: 2346
.Ltmp1181:
    0000092c: 	movq	%r12, %rsi
    0000092f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000936: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2358
    0000093b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000942: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000949: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000950: 	je	.Ltmp1185 # Offset: 2384
.Ltmp1478:
    00000956: 	movq	-0x20(%rax), %r13
    0000095a: 	callq	clock@PLT # Offset: 2394
    0000095f: 	pxor	%xmm0, %xmm0
    00000963: 	movq	%rax, end_time(%rip)
    0000096a: 	movq	%r13, %rdi
    0000096d: 	subq	start_time(%rip), %rax
    00000974: 	cvtsi2sd	%rax, %xmm0
    00000979: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000981: 	callq	_Z13record_resultdPKc # Offset: 2433
    00000986: 	movq	0x4f0(%rsp), %rdi
    0000098e: 	cmpq	0x50(%rsp), %rdi
    00000993: 	je	.Ltmp1186 # Offset: 2451
    00000995: 	movq	0x500(%rsp), %rax
    0000099d: 	leaq	0x1(%rax), %rsi
    000009a1: 	callq	_ZdlPvm@PLT # Offset: 2465
.Ltmp1186:
    000009a6: 	movq	0x58(%rsp), %r15
    000009ab: 	leaq	0x450(%rsp), %rdi
    000009b3: 	leaq	DATAat0x2b24e(%rip), %rdx
    000009ba: 	movq	%r15, %rsi
    000009bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2493
    000009c2: 	movl	iterations(%rip), %edx
    000009c8: 	xorl	%r8d, %r8d
    000009cb: 	xorl	%ecx, %ecx
    000009cd: 	movl	$0x1f40, %esi
    000009d2: 	movq	0x450(%rsp), %rdi
    000009da: 	callq	_Z9summarizePKciiii # Offset: 2522
    000009df: 	leaq	DATAat0x2b267(%rip), %rdx
    000009e6: 	movq	%r15, %rsi
    000009e9: 	movq	%r12, %rdi
    000009ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2540
    000009f1: 	movq	%r12, %rdx
    000009f4: 	movl	$0x1f40, %esi
    000009f9: 	movq	%rbp, %rdi
    000009fc: 	callq	_Z13test_constantISt7complexIfE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2556
    00000a01: 	movq	0x4f0(%rsp), %rdi
    00000a09: 	cmpq	0x50(%rsp), %rdi
    00000a0e: 	je	.Ltmp1187 # Offset: 2574
    00000a10: 	movq	0x500(%rsp), %rax
    00000a18: 	leaq	0x1(%rax), %rsi
    00000a1c: 	callq	_ZdlPvm@PLT # Offset: 2588
.Ltmp1187:
    00000a21: 	movq	0x58(%rsp), %rsi
    00000a26: 	leaq	DATAat0x2b275(%rip), %rdx
    00000a2d: 	movq	%r12, %rdi
    00000a30: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2608
    00000a35: 	movq	%r12, %rdx
    00000a38: 	movl	$0x1f40, %esi
    00000a3d: 	movq	%rbp, %rdi
    00000a40: 	callq	_Z13test_constantISt7complexIfE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2624
    00000a45: 	movq	0x4f0(%rsp), %rdi
    00000a4d: 	cmpq	0x50(%rsp), %rdi
    00000a52: 	je	.Ltmp1188 # Offset: 2642
    00000a54: 	movq	0x500(%rsp), %rax
    00000a5c: 	leaq	0x1(%rax), %rsi
    00000a60: 	callq	_ZdlPvm@PLT # Offset: 2656
.Ltmp1188:
    00000a65: 	movq	0x58(%rsp), %rsi
    00000a6a: 	leaq	DATAat0x2b28d(%rip), %rdx
    00000a71: 	movq	%r12, %rdi
    00000a74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2676
    00000a79: 	callq	clock@PLT # Offset: 2681
    00000a7e: 	movl	iterations(%rip), %r14d
    00000a85: 	movq	%rax, start_time(%rip)
    00000a8c: 	testl	%r14d, %r14d
    00000a8f: 	jle	.Ltmp1189 # Offset: 2703
    00000a95: 	movss	DATAat0x2b908(%rip), %xmm3
    00000a9d: 	movss	DATAat0x2b900(%rip), %xmm7
    00000aa5: 	pxor	%xmm6, %xmm6
    00000aa9: 	xorl	%r13d, %r13d
    00000aac: 	movss	%xmm6, (%rsp)
    00000ab1: 	leaq	DATAat0x2b1d0(%rip), %r15
    00000ab8: 	movss	%xmm3, 0x8(%rsp)
    00000abe: 	movss	%xmm7, 0x38(%rsp)
    00000ac4: 	nopl	(%rax) # Size: 4
.Ltmp1193:
    00000ac8: 	movss	(%rsp), %xmm5
    00000acd: 	movq	%rbp, %rax
    00000ad0: 	movaps	%xmm5, %xmm4
    00000ad3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1190:
    00000ad8: 	movaps	(%rax), %xmm0
    00000adb: 	addq	$0x20, %rax
    00000adf: 	movaps	%xmm0, %xmm1
    00000ae2: 	shufps	$0x88, -0x10(%rax), %xmm1
    00000ae7: 	addps	DATAat0x2b850(%rip), %xmm1
    00000aee: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00000af3: 	addps	DATAat0x2b860(%rip), %xmm0
    00000afa: 	movaps	%xmm1, %xmm3
    00000afd: 	movaps	%xmm1, %xmm2
    00000b00: 	addss	%xmm5, %xmm3
    00000b04: 	shufps	$0x55, %xmm1, %xmm2
    00000b08: 	movaps	%xmm1, %xmm5
    00000b0b: 	unpckhps	%xmm1, %xmm5
    00000b0e: 	shufps	$0xff, %xmm1, %xmm1
    00000b12: 	addss	%xmm3, %xmm2
    00000b16: 	addss	%xmm2, %xmm5
    00000b1a: 	movaps	%xmm0, %xmm2
    00000b1d: 	addss	%xmm4, %xmm2
    00000b21: 	movaps	%xmm0, %xmm4
    00000b24: 	unpckhps	%xmm0, %xmm4
    00000b27: 	addss	%xmm1, %xmm5
    00000b2b: 	movaps	%xmm0, %xmm1
    00000b2e: 	shufps	$0x55, %xmm0, %xmm1
    00000b32: 	addss	%xmm2, %xmm1
    00000b36: 	shufps	$0xff, %xmm0, %xmm0
    00000b3a: 	addss	%xmm1, %xmm4
    00000b3e: 	addss	%xmm0, %xmm4
    00000b42: 	cmpq	%rbx, %rax
    00000b45: 	jne	.Ltmp1190 # Offset: 2885
    00000b47: 	pxor	%xmm0, %xmm0
    00000b4b: 	movss	0x38(%rsp), %xmm2
    00000b51: 	movss	(%rsp), %xmm7
    00000b56: 	cvtsd2ss	init_value(%rip), %xmm0
    00000b5e: 	subss	DATAat0x2b700(%rip), %xmm0
    00000b66: 	mulss	%xmm0, %xmm2
    00000b6a: 	addss	%xmm7, %xmm2
    00000b6e: 	mulss	%xmm0, %xmm7
    00000b72: 	movaps	%xmm7, %xmm1
    00000b75: 	subss	DATAat0x2b90c(%rip), %xmm1
    00000b7d: 	ucomiss	%xmm2, %xmm1
    00000b80: 	jp	.Ltmp1191 # Offset: 2944
.Ltmp1525:
    00000b86: 	subss	%xmm2, %xmm5
    00000b8a: 	subss	%xmm1, %xmm4
    00000b8e: 	movss	%xmm5, 0x3f0(%rsp)
    00000b97: 	movss	%xmm4, 0x3f4(%rsp)
    00000ba0: 	movq	0x3f0(%rsp), %xmm0
    00000ba9: 	callq	cabsf@PLT # Offset: 2985
    00000bae: 	movss	0x8(%rsp), %xmm7
    00000bb4: 	comiss	%xmm0, %xmm7
    00000bb7: 	jbe	.Ltmp1192 # Offset: 2999
.Ltmp1443:
    00000bbd: 	addl	$0x1, %r13d
    00000bc1: 	cmpl	%r14d, %r13d
    00000bc4: 	jl	.Ltmp1193 # Offset: 3012
.Ltmp1189:
    00000bca: 	movq	%r12, %rsi
    00000bcd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000bd4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3028
    00000bd9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000be0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000be7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bee: 	je	.Ltmp1194 # Offset: 3054
.Ltmp1477:
    00000bf4: 	movq	-0x20(%rax), %r13
    00000bf8: 	callq	clock@PLT # Offset: 3064
    00000bfd: 	pxor	%xmm0, %xmm0
    00000c01: 	movq	%rax, end_time(%rip)
    00000c08: 	movq	%r13, %rdi
    00000c0b: 	subq	start_time(%rip), %rax
    00000c12: 	cvtsi2sd	%rax, %xmm0
    00000c17: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000c1f: 	callq	_Z13record_resultdPKc # Offset: 3103
    00000c24: 	movq	0x4f0(%rsp), %rdi
    00000c2c: 	cmpq	0x50(%rsp), %rdi
    00000c31: 	je	.Ltmp1195 # Offset: 3121
    00000c33: 	movq	0x500(%rsp), %rax
    00000c3b: 	leaq	0x1(%rax), %rsi
    00000c3f: 	callq	_ZdlPvm@PLT # Offset: 3135
.Ltmp1195:
    00000c44: 	movq	0x58(%rsp), %rsi
    00000c49: 	leaq	DATAat0x2b2a0(%rip), %rdx
    00000c50: 	movq	%r12, %rdi
    00000c53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3155
    00000c58: 	movq	%r12, %rdx
    00000c5b: 	movl	$0x1f40, %esi
    00000c60: 	movq	%rbp, %rdi
    00000c63: 	callq	_Z13test_constantISt7complexIfE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3171
    00000c68: 	movq	0x4f0(%rsp), %rdi
    00000c70: 	cmpq	0x50(%rsp), %rdi
    00000c75: 	je	.Ltmp1196 # Offset: 3189
    00000c77: 	movq	0x500(%rsp), %rax
    00000c7f: 	leaq	0x1(%rax), %rsi
    00000c83: 	callq	_ZdlPvm@PLT # Offset: 3203
.Ltmp1196:
    00000c88: 	movq	0x58(%rsp), %rsi
    00000c8d: 	leaq	DATAat0x2b2bd(%rip), %rdx
    00000c94: 	movq	%r12, %rdi
    00000c97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3223
    00000c9c: 	movq	%r12, %rdx
    00000c9f: 	movl	$0x1f40, %esi
    00000ca4: 	movq	%rbp, %rdi
    00000ca7: 	callq	_Z13test_constantISt7complexIfE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3239
    00000cac: 	movq	0x4f0(%rsp), %rdi
    00000cb4: 	cmpq	0x50(%rsp), %rdi
    00000cb9: 	je	.Ltmp1197 # Offset: 3257
    00000cbb: 	movq	0x500(%rsp), %rax
    00000cc3: 	leaq	0x1(%rax), %rsi
    00000cc7: 	callq	_ZdlPvm@PLT # Offset: 3271
.Ltmp1197:
    00000ccc: 	movq	0x58(%rsp), %rsi
    00000cd1: 	leaq	DATAat0x2b2d0(%rip), %rdx
    00000cd8: 	movq	%r12, %rdi
    00000cdb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3291
    00000ce0: 	movq	%r12, %rdx
    00000ce3: 	movl	$0x1f40, %esi
    00000ce8: 	movq	%rbp, %rdi
    00000ceb: 	callq	_Z13test_constantISt7complexIfE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3307
    00000cf0: 	movq	0x4f0(%rsp), %rdi
    00000cf8: 	cmpq	0x50(%rsp), %rdi
    00000cfd: 	je	.Ltmp1198 # Offset: 3325
    00000cff: 	movq	0x500(%rsp), %rax
    00000d07: 	leaq	0x1(%rax), %rsi
    00000d0b: 	callq	_ZdlPvm@PLT # Offset: 3339
.Ltmp1198:
    00000d10: 	movq	0x58(%rsp), %rsi
    00000d15: 	leaq	DATAat0x2b570(%rip), %rdx
    00000d1c: 	movq	%r12, %rdi
    00000d1f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3359
    00000d24: 	movq	%r12, %rdx
    00000d27: 	movl	$0x1f40, %esi
    00000d2c: 	movq	%rbp, %rdi
    00000d2f: 	callq	_Z13test_constantISt7complexIfE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3375
    00000d34: 	movq	0x4f0(%rsp), %rdi
    00000d3c: 	cmpq	0x50(%rsp), %rdi
    00000d41: 	je	.Ltmp1199 # Offset: 3393
    00000d43: 	movq	0x500(%rsp), %rax
    00000d4b: 	leaq	0x1(%rax), %rsi
    00000d4f: 	callq	_ZdlPvm@PLT # Offset: 3407
.Ltmp1199:
    00000d54: 	movq	0x58(%rsp), %rsi
    00000d59: 	leaq	DATAat0x2b2ee(%rip), %rdx
    00000d60: 	movq	%r12, %rdi
    00000d63: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3427
    00000d68: 	callq	clock@PLT # Offset: 3432
    00000d6d: 	movl	iterations(%rip), %r14d
    00000d74: 	movq	%rax, start_time(%rip)
    00000d7b: 	testl	%r14d, %r14d
    00000d7e: 	jle	.Ltmp1200 # Offset: 3454
    00000d84: 	movss	DATAat0x2b908(%rip), %xmm3
    00000d8c: 	movss	DATAat0x2b900(%rip), %xmm7
    00000d94: 	pxor	%xmm6, %xmm6
    00000d98: 	xorl	%r13d, %r13d
    00000d9b: 	movss	%xmm6, (%rsp)
    00000da0: 	movss	%xmm3, 0x8(%rsp)
    00000da6: 	movss	%xmm7, 0x38(%rsp)
    00000dac: 	nopl	(%rax) # Size: 4
.Ltmp1204:
    00000db0: 	movss	(%rsp), %xmm7
    00000db5: 	movq	%rbp, %r15
    00000db8: 	movss	%xmm7, 0x10(%rsp)
    00000dbe: 	movss	%xmm7, 0x20(%rsp)
    00000dc4: 	nopl	(%rax) # Size: 4
.Ltmp1201:
    00000dc8: 	movss	0x4(%r15), %xmm1
    00000dce: 	movss	(%r15), %xmm0
    00000dd3: 	addq	$0x8, %r15
    00000dd7: 	movss	DATAat0x2b7c0(%rip), %xmm3
    00000ddf: 	movss	DATAat0x2b7a0(%rip), %xmm2
    00000de7: 	callq	__divsc3@PLT # Offset: 3559
    00000dec: 	movss	0x20(%rsp), %xmm7
    00000df2: 	movq	%xmm0, 0x3e8(%rsp)
    00000dfb: 	addss	0x3e8(%rsp), %xmm7
    00000e04: 	movss	%xmm7, 0x20(%rsp)
    00000e0a: 	movss	0x10(%rsp), %xmm7
    00000e10: 	addss	0x3ec(%rsp), %xmm7
    00000e19: 	movss	%xmm7, 0x10(%rsp)
    00000e1f: 	cmpq	%rbx, %r15
    00000e22: 	jne	.Ltmp1201 # Offset: 3618
    00000e24: 	movss	DATAat0x2b7a0(%rip), %xmm2
    00000e2c: 	movss	DATAat0x2b7c0(%rip), %xmm3
    00000e34: 	pxor	%xmm1, %xmm1
    00000e38: 	pxor	%xmm0, %xmm0
    00000e3c: 	cvtsd2ss	init_value(%rip), %xmm0
    00000e44: 	callq	__divsc3@PLT # Offset: 3652
    00000e49: 	movss	0x38(%rsp), %xmm7
    00000e4f: 	movss	(%rsp), %xmm6
    00000e54: 	movq	%xmm0, 0x3e0(%rsp)
    00000e5d: 	movss	0x3e0(%rsp), %xmm4
    00000e66: 	movss	0x3e4(%rsp), %xmm1
    00000e6f: 	movaps	%xmm7, %xmm0
    00000e72: 	movaps	%xmm6, %xmm2
    00000e75: 	mulss	%xmm1, %xmm2
    00000e79: 	mulss	%xmm4, %xmm0
    00000e7d: 	mulss	%xmm1, %xmm7
    00000e81: 	mulss	%xmm4, %xmm6
    00000e85: 	subss	%xmm2, %xmm0
    00000e89: 	movaps	%xmm7, %xmm2
    00000e8c: 	addss	%xmm6, %xmm2
    00000e90: 	ucomiss	%xmm2, %xmm0
    00000e93: 	jp	.Ltmp1202 # Offset: 3731
.Ltmp1531:
    00000e99: 	movss	0x20(%rsp), %xmm1
    00000e9f: 	subss	%xmm0, %xmm1
    00000ea3: 	movss	0x10(%rsp), %xmm0
    00000ea9: 	subss	%xmm2, %xmm0
    00000ead: 	movss	%xmm1, 0x3d0(%rsp)
    00000eb6: 	movss	%xmm0, 0x3d4(%rsp)
    00000ebf: 	movq	0x3d0(%rsp), %xmm0
    00000ec8: 	callq	cabsf@PLT # Offset: 3784
    00000ecd: 	movss	0x8(%rsp), %xmm7
    00000ed3: 	comiss	%xmm0, %xmm7
    00000ed6: 	jbe	.Ltmp1203 # Offset: 3798
.Ltmp1442:
    00000edc: 	addl	$0x1, %r13d
    00000ee0: 	cmpl	%r14d, %r13d
    00000ee3: 	jl	.Ltmp1204 # Offset: 3811
.Ltmp1200:
    00000ee9: 	movq	%r12, %rsi
    00000eec: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000ef3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3827
    00000ef8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000eff: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f06: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f0d: 	je	.Ltmp1205 # Offset: 3853
.Ltmp1476:
    00000f13: 	movq	-0x20(%rax), %r13
    00000f17: 	callq	clock@PLT # Offset: 3863
    00000f1c: 	pxor	%xmm0, %xmm0
    00000f20: 	movq	%rax, end_time(%rip)
    00000f27: 	movq	%r13, %rdi
    00000f2a: 	subq	start_time(%rip), %rax
    00000f31: 	cvtsi2sd	%rax, %xmm0
    00000f36: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000f3e: 	callq	_Z13record_resultdPKc # Offset: 3902
    00000f43: 	movq	0x4f0(%rsp), %rdi
    00000f4b: 	cmpq	0x50(%rsp), %rdi
    00000f50: 	je	.Ltmp1206 # Offset: 3920
    00000f52: 	movq	0x500(%rsp), %rax
    00000f5a: 	leaq	0x1(%rax), %rsi
    00000f5e: 	callq	_ZdlPvm@PLT # Offset: 3934
.Ltmp1206:
    00000f63: 	movq	0x58(%rsp), %rsi
    00000f68: 	leaq	DATAat0x2b2ff(%rip), %rdx
    00000f6f: 	movq	%r12, %rdi
    00000f72: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3954
    00000f77: 	movq	%r12, %rdx
    00000f7a: 	movl	$0x1f40, %esi
    00000f7f: 	movq	%rbp, %rdi
    00000f82: 	callq	_Z13test_constantISt7complexIfE32complex_multiple_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3970
    00000f87: 	movq	0x4f0(%rsp), %rdi
    00000f8f: 	cmpq	0x50(%rsp), %rdi
    00000f94: 	je	.Ltmp1207 # Offset: 3988
    00000f96: 	movq	0x500(%rsp), %rax
    00000f9e: 	leaq	0x1(%rax), %rsi
    00000fa2: 	callq	_ZdlPvm@PLT # Offset: 4002
.Ltmp1207:
    00000fa7: 	movq	0x58(%rsp), %rsi
    00000fac: 	leaq	DATAat0x2b31a(%rip), %rdx
    00000fb3: 	movq	%r12, %rdi
    00000fb6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4022
    00000fbb: 	movq	%r12, %rdx
    00000fbe: 	movl	$0x1f40, %esi
    00000fc3: 	movq	%rbp, %rdi
    00000fc6: 	callq	_Z13test_constantISt7complexIfE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4038
    00000fcb: 	movq	0x4f0(%rsp), %rdi
    00000fd3: 	cmpq	0x50(%rsp), %rdi
    00000fd8: 	je	.Ltmp1208 # Offset: 4056
    00000fda: 	movq	0x500(%rsp), %rax
    00000fe2: 	leaq	0x1(%rax), %rsi
    00000fe6: 	callq	_ZdlPvm@PLT # Offset: 4070
.Ltmp1208:
    00000feb: 	movq	0x58(%rsp), %rsi
    00000ff0: 	leaq	DATAat0x2b336(%rip), %rdx
    00000ff7: 	movq	%r12, %rdi
    00000ffa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4090
    00000fff: 	movq	%r12, %rdx
    00001002: 	movl	$0x1f40, %esi
    00001007: 	movq	%rbp, %rdi
    0000100a: 	callq	_Z13test_constantISt7complexIfE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4106
    0000100f: 	movq	0x4f0(%rsp), %rdi
    00001017: 	cmpq	0x50(%rsp), %rdi
    0000101c: 	je	.Ltmp1209 # Offset: 4124
    0000101e: 	movq	0x500(%rsp), %rax
    00001026: 	leaq	0x1(%rax), %rsi
    0000102a: 	callq	_ZdlPvm@PLT # Offset: 4138
.Ltmp1209:
    0000102f: 	movq	0x58(%rsp), %r15
    00001034: 	leaq	0x470(%rsp), %rdi
    0000103c: 	leaq	DATAat0x2b255(%rip), %rdx
    00001043: 	movq	%r15, %rsi
    00001046: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4166
    0000104b: 	movl	iterations(%rip), %edx
    00001051: 	xorl	%r8d, %r8d
    00001054: 	xorl	%ecx, %ecx
    00001056: 	movl	$0x1f40, %esi
    0000105b: 	movq	0x470(%rsp), %rdi
    00001063: 	callq	_Z9summarizePKciiii # Offset: 4195
    00001068: 	leaq	DATAat0x2b34f(%rip), %rdx
    0000106f: 	movq	%r15, %rsi
    00001072: 	movq	%r12, %rdi
    00001075: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4213
    0000107a: 	callq	clock@PLT # Offset: 4218
    0000107f: 	movl	iterations(%rip), %r14d
    00001086: 	movq	%rax, start_time(%rip)
    0000108d: 	testl	%r14d, %r14d
    00001090: 	jle	.Ltmp1210 # Offset: 4240
    00001096: 	movss	0x30(%rsp), %xmm3
    0000109c: 	pxor	%xmm5, %xmm5
    000010a0: 	xorl	%r13d, %r13d
    000010a3: 	leaq	DATAat0x2b1d0(%rip), %r15
    000010aa: 	movss	%xmm5, (%rsp)
    000010af: 	movaps	%xmm3, %xmm6
    000010b2: 	addss	%xmm5, %xmm6
    000010b6: 	movss	%xmm6, 0x80(%rsp)
    000010bf: 	movaps	%xmm6, %xmm7
    000010c2: 	mulss	%xmm5, %xmm7
    000010c6: 	movss	%xmm7, 0x70(%rsp)
    000010cc: 	movss	DATAat0x2b900(%rip), %xmm7
    000010d4: 	mulss	%xmm7, %xmm6
    000010d8: 	movss	%xmm7, 0x38(%rsp)
    000010de: 	movss	0xc(%rsp), %xmm7
    000010e4: 	shufps	$0x0, %xmm7, %xmm7
    000010e8: 	movaps	%xmm7, 0x20(%rsp)
    000010ed: 	movss	%xmm6, 0x60(%rsp)
    000010f3: 	movss	DATAat0x2b908(%rip), %xmm6
    000010fb: 	movss	%xmm6, 0x8(%rsp)
    00001101: 	movaps	%xmm3, %xmm6
    00001104: 	shufps	$0x0, %xmm6, %xmm6
    00001108: 	movaps	%xmm6, 0x10(%rsp)
    0000110d: 	nopl	(%rax) # Size: 3
.Ltmp1214:
    00001110: 	movss	(%rsp), %xmm5
    00001115: 	movaps	0x10(%rsp), %xmm2
    0000111a: 	movq	%rbp, %rax
    0000111d: 	movaps	0x20(%rsp), %xmm3
    00001122: 	movaps	%xmm5, %xmm4
    00001125: 	nopl	(%rax) # Size: 3
.Ltmp1211:
    00001128: 	movaps	(%rax), %xmm0
    0000112b: 	addq	$0x20, %rax
    0000112f: 	movaps	%xmm0, %xmm1
    00001132: 	shufps	$0x88, -0x10(%rax), %xmm1
    00001137: 	addps	%xmm3, %xmm1
    0000113a: 	shufps	$0xdd, -0x10(%rax), %xmm0
    0000113f: 	addps	%xmm2, %xmm0
    00001142: 	addss	%xmm1, %xmm5
    00001146: 	movaps	%xmm1, %xmm6
    00001149: 	shufps	$0x55, %xmm1, %xmm6
    0000114d: 	addss	%xmm0, %xmm4
    00001151: 	addss	%xmm5, %xmm6
    00001155: 	movaps	%xmm1, %xmm5
    00001158: 	unpckhps	%xmm1, %xmm5
    0000115b: 	shufps	$0xff, %xmm1, %xmm1
    0000115f: 	addss	%xmm6, %xmm5
    00001163: 	addss	%xmm1, %xmm5
    00001167: 	movaps	%xmm0, %xmm1
    0000116a: 	shufps	$0x55, %xmm0, %xmm1
    0000116e: 	addss	%xmm4, %xmm1
    00001172: 	movaps	%xmm0, %xmm4
    00001175: 	unpckhps	%xmm0, %xmm4
    00001178: 	shufps	$0xff, %xmm0, %xmm0
    0000117c: 	addss	%xmm1, %xmm4
    00001180: 	addss	%xmm0, %xmm4
    00001184: 	cmpq	%rbx, %rax
    00001187: 	jne	.Ltmp1211 # Offset: 4487
    00001189: 	pxor	%xmm0, %xmm0
    0000118d: 	movss	0x38(%rsp), %xmm2
    00001193: 	movss	(%rsp), %xmm1
    00001198: 	cvtsd2ss	init_value(%rip), %xmm0
    000011a0: 	addss	0xc(%rsp), %xmm0
    000011a6: 	mulss	%xmm0, %xmm2
    000011aa: 	mulss	%xmm0, %xmm1
    000011ae: 	subss	0x70(%rsp), %xmm2
    000011b4: 	addss	0x60(%rsp), %xmm1
    000011ba: 	ucomiss	%xmm2, %xmm1
    000011bd: 	jp	.Ltmp1212 # Offset: 4541
.Ltmp1536:
    000011c3: 	subss	%xmm2, %xmm5
    000011c7: 	subss	%xmm1, %xmm4
    000011cb: 	movss	%xmm5, 0x3c0(%rsp)
    000011d4: 	movss	%xmm4, 0x3c4(%rsp)
    000011dd: 	movq	0x3c0(%rsp), %xmm0
    000011e6: 	callq	cabsf@PLT # Offset: 4582
    000011eb: 	movss	0x8(%rsp), %xmm7
    000011f1: 	comiss	%xmm0, %xmm7
    000011f4: 	jbe	.Ltmp1213 # Offset: 4596
.Ltmp1441:
    000011fa: 	addl	$0x1, %r13d
    000011fe: 	cmpl	%r14d, %r13d
    00001201: 	jl	.Ltmp1214 # Offset: 4609
.Ltmp1210:
    00001207: 	movq	%r12, %rsi
    0000120a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001211: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4625
    00001216: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000121d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000122b: 	je	.Ltmp1215 # Offset: 4651
.Ltmp1475:
    00001231: 	movq	-0x20(%rax), %r13
    00001235: 	callq	clock@PLT # Offset: 4661
    0000123a: 	pxor	%xmm0, %xmm0
    0000123e: 	movq	%rax, end_time(%rip)
    00001245: 	movq	%r13, %rdi
    00001248: 	subq	start_time(%rip), %rax
    0000124f: 	cvtsi2sd	%rax, %xmm0
    00001254: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000125c: 	callq	_Z13record_resultdPKc # Offset: 4700
    00001261: 	movq	0x4f0(%rsp), %rdi
    00001269: 	cmpq	0x50(%rsp), %rdi
    0000126e: 	je	.Ltmp1216 # Offset: 4718
    00001270: 	movq	0x500(%rsp), %rax
    00001278: 	leaq	0x1(%rax), %rsi
    0000127c: 	callq	_ZdlPvm@PLT # Offset: 4732
.Ltmp1216:
    00001281: 	movq	0x58(%rsp), %rsi
    00001286: 	leaq	DATAat0x2b35d(%rip), %rdx
    0000128d: 	movq	%r12, %rdi
    00001290: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4752
    00001295: 	callq	clock@PLT # Offset: 4757
    0000129a: 	movl	iterations(%rip), %r14d
    000012a1: 	movq	%rax, start_time(%rip)
    000012a8: 	testl	%r14d, %r14d
    000012ab: 	jle	.Ltmp1217 # Offset: 4779
    000012b1: 	movss	0x30(%rsp), %xmm0
    000012b7: 	pxor	%xmm7, %xmm7
    000012bb: 	addss	0xc8(%rsp), %xmm0
    000012c4: 	xorl	%r13d, %r13d
    000012c7: 	addss	0x4c(%rsp), %xmm0
    000012cd: 	addss	0x44(%rsp), %xmm0
    000012d3: 	movaps	%xmm7, %xmm3
    000012d6: 	movss	%xmm7, (%rsp)
    000012db: 	leaq	DATAat0x2b1d0(%rip), %r15
    000012e2: 	addss	%xmm0, %xmm3
    000012e6: 	movss	%xmm3, 0x90(%rsp)
    000012ef: 	movaps	%xmm3, %xmm6
    000012f2: 	mulss	%xmm7, %xmm6
    000012f6: 	movaps	%xmm0, %xmm7
    000012f9: 	movss	0xc(%rsp), %xmm0
    000012ff: 	addss	0x48(%rsp), %xmm0
    00001305: 	addss	0x40(%rsp), %xmm0
    0000130b: 	addss	0x3c(%rsp), %xmm0
    00001311: 	shufps	$0x0, %xmm7, %xmm7
    00001315: 	movaps	%xmm7, 0x80(%rsp)
    0000131d: 	movss	%xmm0, 0x60(%rsp)
    00001323: 	movss	%xmm6, 0x10(%rsp)
    00001329: 	movss	DATAat0x2b900(%rip), %xmm6
    00001331: 	mulss	%xmm6, %xmm3
    00001335: 	movss	%xmm6, 0x38(%rsp)
    0000133b: 	movaps	%xmm0, %xmm6
    0000133e: 	shufps	$0x0, %xmm6, %xmm6
    00001342: 	movaps	%xmm6, 0x70(%rsp)
    00001347: 	movss	%xmm3, 0x20(%rsp)
    0000134d: 	movss	DATAat0x2b908(%rip), %xmm3
    00001355: 	movss	%xmm3, 0x8(%rsp)
    0000135b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1221:
    00001360: 	movss	(%rsp), %xmm5
    00001365: 	movaps	0x70(%rsp), %xmm2
    0000136a: 	movq	%rbp, %rax
    0000136d: 	movaps	0x80(%rsp), %xmm3
    00001375: 	movaps	%xmm5, %xmm4
    00001378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1218:
    00001380: 	movaps	(%rax), %xmm0
    00001383: 	addq	$0x20, %rax
    00001387: 	movaps	%xmm0, %xmm1
    0000138a: 	shufps	$0x88, -0x10(%rax), %xmm1
    0000138f: 	addps	%xmm2, %xmm1
    00001392: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00001397: 	addps	%xmm3, %xmm0
    0000139a: 	addss	%xmm1, %xmm5
    0000139e: 	movaps	%xmm1, %xmm6
    000013a1: 	shufps	$0x55, %xmm1, %xmm6
    000013a5: 	addss	%xmm0, %xmm4
    000013a9: 	addss	%xmm5, %xmm6
    000013ad: 	movaps	%xmm1, %xmm5
    000013b0: 	unpckhps	%xmm1, %xmm5
    000013b3: 	shufps	$0xff, %xmm1, %xmm1
    000013b7: 	addss	%xmm6, %xmm5
    000013bb: 	addss	%xmm1, %xmm5
    000013bf: 	movaps	%xmm0, %xmm1
    000013c2: 	shufps	$0x55, %xmm0, %xmm1
    000013c6: 	addss	%xmm4, %xmm1
    000013ca: 	movaps	%xmm0, %xmm4
    000013cd: 	unpckhps	%xmm0, %xmm4
    000013d0: 	shufps	$0xff, %xmm0, %xmm0
    000013d4: 	addss	%xmm1, %xmm4
    000013d8: 	addss	%xmm0, %xmm4
    000013dc: 	cmpq	%rbx, %rax
    000013df: 	jne	.Ltmp1218 # Offset: 5087
    000013e1: 	pxor	%xmm0, %xmm0
    000013e5: 	movss	0x38(%rsp), %xmm2
    000013eb: 	movss	(%rsp), %xmm1
    000013f0: 	cvtsd2ss	init_value(%rip), %xmm0
    000013f8: 	addss	0x60(%rsp), %xmm0
    000013fe: 	mulss	%xmm0, %xmm2
    00001402: 	mulss	%xmm0, %xmm1
    00001406: 	subss	0x10(%rsp), %xmm2
    0000140c: 	addss	0x20(%rsp), %xmm1
    00001412: 	ucomiss	%xmm1, %xmm2
    00001415: 	jp	.Ltmp1219 # Offset: 5141
.Ltmp1511:
    0000141b: 	subss	%xmm2, %xmm5
    0000141f: 	subss	%xmm1, %xmm4
    00001423: 	movss	%xmm5, 0x3b0(%rsp)
    0000142c: 	movss	%xmm4, 0x3b4(%rsp)
    00001435: 	movq	0x3b0(%rsp), %xmm0
    0000143e: 	callq	cabsf@PLT # Offset: 5182
    00001443: 	movss	0x8(%rsp), %xmm7
    00001449: 	comiss	%xmm0, %xmm7
    0000144c: 	jbe	.Ltmp1220 # Offset: 5196
.Ltmp1440:
    00001452: 	addl	$0x1, %r13d
    00001456: 	cmpl	%r14d, %r13d
    00001459: 	jl	.Ltmp1221 # Offset: 5209
.Ltmp1217:
    0000145f: 	movq	%r12, %rsi
    00001462: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001469: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5225
    0000146e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001475: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000147c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001483: 	je	.Ltmp1222 # Offset: 5251
.Ltmp1474:
    00001489: 	movq	-0x20(%rax), %r13
    0000148d: 	callq	clock@PLT # Offset: 5261
    00001492: 	pxor	%xmm0, %xmm0
    00001496: 	movq	%rax, end_time(%rip)
    0000149d: 	movq	%r13, %rdi
    000014a0: 	subq	start_time(%rip), %rax
    000014a7: 	cvtsi2sd	%rax, %xmm0
    000014ac: 	divsd	DATAat0x2b628(%rip), %xmm0
    000014b4: 	callq	_Z13record_resultdPKc # Offset: 5300
    000014b9: 	movq	0x4f0(%rsp), %rdi
    000014c1: 	cmpq	0x50(%rsp), %rdi
    000014c6: 	je	.Ltmp1223 # Offset: 5318
    000014c8: 	movq	0x500(%rsp), %rax
    000014d0: 	leaq	0x1(%rax), %rsi
    000014d4: 	callq	_ZdlPvm@PLT # Offset: 5332
.Ltmp1223:
    000014d9: 	movq	0x58(%rsp), %rsi
    000014de: 	leaq	DATAat0x2b375(%rip), %rdx
    000014e5: 	movq	%r12, %rdi
    000014e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5352
    000014ed: 	callq	clock@PLT # Offset: 5357
    000014f2: 	movl	iterations(%rip), %r14d
    000014f9: 	movq	%rax, start_time(%rip)
    00001500: 	testl	%r14d, %r14d
    00001503: 	jle	.Ltmp1224 # Offset: 5379
    00001509: 	movss	0x30(%rsp), %xmm5
    0000150f: 	pxor	%xmm6, %xmm6
    00001513: 	movss	0x4c(%rsp), %xmm2
    00001519: 	xorl	%r13d, %r13d
    0000151c: 	movss	0xc8(%rsp), %xmm4
    00001525: 	movss	0x44(%rsp), %xmm1
    0000152b: 	movss	%xmm6, (%rsp)
    00001530: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001537: 	movaps	%xmm5, %xmm0
    0000153a: 	addss	%xmm6, %xmm0
    0000153e: 	addss	%xmm4, %xmm0
    00001542: 	addss	%xmm2, %xmm0
    00001546: 	addss	%xmm1, %xmm0
    0000154a: 	movss	%xmm0, 0xd8(%rsp)
    00001553: 	movaps	%xmm0, %xmm7
    00001556: 	movaps	%xmm0, %xmm3
    00001559: 	mulss	%xmm6, %xmm7
    0000155d: 	movss	DATAat0x2b900(%rip), %xmm6
    00001565: 	mulss	%xmm6, %xmm3
    00001569: 	movss	%xmm6, 0x38(%rsp)
    0000156f: 	movss	0x48(%rsp), %xmm6
    00001575: 	shufps	$0x0, %xmm6, %xmm6
    00001579: 	movaps	%xmm6, 0x70(%rsp)
    0000157e: 	movaps	%xmm2, %xmm6
    00001581: 	movss	%xmm7, 0xcc(%rsp)
    0000158a: 	shufps	$0x0, %xmm6, %xmm6
    0000158e: 	movss	DATAat0x2b908(%rip), %xmm7
    00001596: 	movaps	%xmm6, 0x90(%rsp)
    0000159e: 	movss	%xmm3, 0xc0(%rsp)
    000015a7: 	movss	0xc(%rsp), %xmm3
    000015ad: 	movss	%xmm7, 0x8(%rsp)
    000015b3: 	movaps	%xmm5, %xmm7
    000015b6: 	shufps	$0x0, %xmm3, %xmm3
    000015ba: 	shufps	$0x0, %xmm7, %xmm7
    000015be: 	movaps	%xmm3, 0x20(%rsp)
    000015c3: 	movaps	%xmm4, %xmm3
    000015c6: 	movaps	%xmm7, 0x10(%rsp)
    000015cb: 	movss	0x40(%rsp), %xmm7
    000015d1: 	shufps	$0x0, %xmm3, %xmm3
    000015d5: 	movaps	%xmm3, 0xb0(%rsp)
    000015dd: 	movss	0x3c(%rsp), %xmm3
    000015e3: 	shufps	$0x0, %xmm7, %xmm7
    000015e7: 	movaps	%xmm7, 0xa0(%rsp)
    000015ef: 	movaps	%xmm1, %xmm7
    000015f2: 	shufps	$0x0, %xmm3, %xmm3
    000015f6: 	shufps	$0x0, %xmm7, %xmm7
    000015fa: 	movaps	%xmm3, 0x80(%rsp)
    00001602: 	movaps	%xmm7, 0x60(%rsp)
    00001607: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1228:
    00001610: 	movss	(%rsp), %xmm5
    00001615: 	movaps	0x60(%rsp), %xmm2
    0000161a: 	movq	%rbp, %rax
    0000161d: 	movaps	0x70(%rsp), %xmm3
    00001622: 	movaps	0x80(%rsp), %xmm6
    0000162a: 	movaps	0x10(%rsp), %xmm8
    00001630: 	movaps	0x20(%rsp), %xmm9
    00001636: 	movaps	%xmm5, %xmm4
    00001639: 	movaps	0x90(%rsp), %xmm7
    00001641: 	movaps	0xa0(%rsp), %xmm10
    0000164a: 	movaps	0xb0(%rsp), %xmm11
    00001653: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1225:
    00001658: 	movaps	(%rax), %xmm0
    0000165b: 	addq	$0x20, %rax
    0000165f: 	movaps	%xmm0, %xmm1
    00001662: 	shufps	$0x88, -0x10(%rax), %xmm1
    00001667: 	addps	%xmm9, %xmm1
    0000166b: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00001670: 	addps	%xmm8, %xmm0
    00001674: 	addps	%xmm3, %xmm1
    00001677: 	addps	%xmm11, %xmm0
    0000167b: 	addps	%xmm10, %xmm1
    0000167f: 	addps	%xmm7, %xmm0
    00001682: 	addps	%xmm6, %xmm1
    00001685: 	addps	%xmm2, %xmm0
    00001688: 	addss	%xmm1, %xmm5
    0000168c: 	movaps	%xmm1, %xmm12
    00001690: 	shufps	$0x55, %xmm1, %xmm12
    00001695: 	addss	%xmm0, %xmm4
    00001699: 	addss	%xmm5, %xmm12
    0000169e: 	movaps	%xmm1, %xmm5
    000016a1: 	unpckhps	%xmm1, %xmm5
    000016a4: 	shufps	$0xff, %xmm1, %xmm1
    000016a8: 	addss	%xmm12, %xmm5
    000016ad: 	addss	%xmm1, %xmm5
    000016b1: 	movaps	%xmm0, %xmm1
    000016b4: 	shufps	$0x55, %xmm0, %xmm1
    000016b8: 	addss	%xmm4, %xmm1
    000016bc: 	movaps	%xmm0, %xmm4
    000016bf: 	unpckhps	%xmm0, %xmm4
    000016c2: 	shufps	$0xff, %xmm0, %xmm0
    000016c6: 	addss	%xmm1, %xmm4
    000016ca: 	addss	%xmm0, %xmm4
    000016ce: 	cmpq	%rbx, %rax
    000016d1: 	jne	.Ltmp1225 # Offset: 5841
    000016d3: 	pxor	%xmm0, %xmm0
    000016d7: 	movss	0x38(%rsp), %xmm2
    000016dd: 	movss	(%rsp), %xmm1
    000016e2: 	cvtsd2ss	init_value(%rip), %xmm0
    000016ea: 	addss	0xc(%rsp), %xmm0
    000016f0: 	addss	0x48(%rsp), %xmm0
    000016f6: 	addss	0x40(%rsp), %xmm0
    000016fc: 	addss	0x3c(%rsp), %xmm0
    00001702: 	mulss	%xmm0, %xmm2
    00001706: 	subss	0xcc(%rsp), %xmm2
    0000170f: 	mulss	%xmm0, %xmm1
    00001713: 	addss	0xc0(%rsp), %xmm1
    0000171c: 	ucomiss	%xmm1, %xmm2
    0000171f: 	jp	.Ltmp1226 # Offset: 5919
.Ltmp1535:
    00001725: 	subss	%xmm2, %xmm5
    00001729: 	subss	%xmm1, %xmm4
    0000172d: 	movss	%xmm5, 0x3a0(%rsp)
    00001736: 	movss	%xmm4, 0x3a4(%rsp)
    0000173f: 	movq	0x3a0(%rsp), %xmm0
    00001748: 	callq	cabsf@PLT # Offset: 5960
    0000174d: 	movss	0x8(%rsp), %xmm6
    00001753: 	comiss	%xmm0, %xmm6
    00001756: 	jbe	.Ltmp1227 # Offset: 5974
.Ltmp1439:
    0000175c: 	addl	$0x1, %r13d
    00001760: 	cmpl	%r14d, %r13d
    00001763: 	jl	.Ltmp1228 # Offset: 5987
.Ltmp1224:
    00001769: 	movq	%r12, %rsi
    0000176c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001773: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6003
    00001778: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000177f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001786: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000178d: 	je	.Ltmp1229 # Offset: 6029
.Ltmp1473:
    00001793: 	movq	-0x20(%rax), %r13
    00001797: 	callq	clock@PLT # Offset: 6039
    0000179c: 	pxor	%xmm0, %xmm0
    000017a0: 	movq	%rax, end_time(%rip)
    000017a7: 	movq	%r13, %rdi
    000017aa: 	subq	start_time(%rip), %rax
    000017b1: 	cvtsi2sd	%rax, %xmm0
    000017b6: 	divsd	DATAat0x2b628(%rip), %xmm0
    000017be: 	callq	_Z13record_resultdPKc # Offset: 6078
    000017c3: 	movq	0x4f0(%rsp), %rdi
    000017cb: 	cmpq	0x50(%rsp), %rdi
    000017d0: 	je	.Ltmp1230 # Offset: 6096
    000017d2: 	movq	0x500(%rsp), %rax
    000017da: 	leaq	0x1(%rax), %rsi
    000017de: 	callq	_ZdlPvm@PLT # Offset: 6110
.Ltmp1230:
    000017e3: 	movq	0x58(%rsp), %rsi
    000017e8: 	leaq	DATAat0x2b38e(%rip), %rdx
    000017ef: 	movq	%r12, %rdi
    000017f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6130
    000017f7: 	callq	clock@PLT # Offset: 6135
    000017fc: 	movl	iterations(%rip), %r14d
    00001803: 	movq	%rax, start_time(%rip)
    0000180a: 	testl	%r14d, %r14d
    0000180d: 	jle	.Ltmp1231 # Offset: 6157
    00001813: 	pxor	%xmm3, %xmm3
    00001817: 	movss	0x30(%rsp), %xmm5
    0000181d: 	xorl	%r13d, %r13d
    00001820: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001827: 	movaps	%xmm3, %xmm7
    0000182a: 	movss	%xmm3, (%rsp)
    0000182f: 	subss	%xmm5, %xmm7
    00001833: 	movss	%xmm7, 0x80(%rsp)
    0000183c: 	movaps	%xmm7, %xmm6
    0000183f: 	mulss	%xmm3, %xmm6
    00001843: 	movaps	%xmm5, %xmm3
    00001846: 	shufps	$0x0, %xmm3, %xmm3
    0000184a: 	movaps	%xmm3, 0x10(%rsp)
    0000184f: 	movss	%xmm6, 0x60(%rsp)
    00001855: 	movss	DATAat0x2b900(%rip), %xmm6
    0000185d: 	mulss	%xmm6, %xmm7
    00001861: 	movss	%xmm6, 0x38(%rsp)
    00001867: 	movss	DATAat0x2b908(%rip), %xmm6
    0000186f: 	movss	%xmm6, 0x8(%rsp)
    00001875: 	movss	0xc(%rsp), %xmm6
    0000187b: 	shufps	$0x0, %xmm6, %xmm6
    0000187f: 	movaps	%xmm6, 0x20(%rsp)
    00001884: 	movss	%xmm7, 0x70(%rsp)
    0000188a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1235:
    00001890: 	movss	(%rsp), %xmm5
    00001895: 	movaps	0x10(%rsp), %xmm2
    0000189a: 	movq	%rbp, %rax
    0000189d: 	movaps	0x20(%rsp), %xmm3
    000018a2: 	movaps	%xmm5, %xmm4
    000018a5: 	nopl	(%rax) # Size: 3
.Ltmp1232:
    000018a8: 	movaps	(%rax), %xmm0
    000018ab: 	addq	$0x20, %rax
    000018af: 	movaps	%xmm0, %xmm1
    000018b2: 	shufps	$0x88, -0x10(%rax), %xmm1
    000018b7: 	subps	%xmm3, %xmm1
    000018ba: 	shufps	$0xdd, -0x10(%rax), %xmm0
    000018bf: 	subps	%xmm2, %xmm0
    000018c2: 	addss	%xmm1, %xmm5
    000018c6: 	movaps	%xmm1, %xmm6
    000018c9: 	shufps	$0x55, %xmm1, %xmm6
    000018cd: 	addss	%xmm0, %xmm4
    000018d1: 	addss	%xmm5, %xmm6
    000018d5: 	movaps	%xmm1, %xmm5
    000018d8: 	unpckhps	%xmm1, %xmm5
    000018db: 	shufps	$0xff, %xmm1, %xmm1
    000018df: 	addss	%xmm6, %xmm5
    000018e3: 	addss	%xmm1, %xmm5
    000018e7: 	movaps	%xmm0, %xmm1
    000018ea: 	shufps	$0x55, %xmm0, %xmm1
    000018ee: 	addss	%xmm4, %xmm1
    000018f2: 	movaps	%xmm0, %xmm4
    000018f5: 	unpckhps	%xmm0, %xmm4
    000018f8: 	shufps	$0xff, %xmm0, %xmm0
    000018fc: 	addss	%xmm1, %xmm4
    00001900: 	addss	%xmm0, %xmm4
    00001904: 	cmpq	%rbx, %rax
    00001907: 	jne	.Ltmp1232 # Offset: 6407
    00001909: 	pxor	%xmm0, %xmm0
    0000190d: 	movss	0x38(%rsp), %xmm2
    00001913: 	movss	(%rsp), %xmm1
    00001918: 	cvtsd2ss	init_value(%rip), %xmm0
    00001920: 	subss	0xc(%rsp), %xmm0
    00001926: 	mulss	%xmm0, %xmm2
    0000192a: 	mulss	%xmm0, %xmm1
    0000192e: 	subss	0x60(%rsp), %xmm2
    00001934: 	addss	0x70(%rsp), %xmm1
    0000193a: 	ucomiss	%xmm1, %xmm2
    0000193d: 	jp	.Ltmp1233 # Offset: 6461
.Ltmp1513:
    00001943: 	subss	%xmm2, %xmm5
    00001947: 	subss	%xmm1, %xmm4
    0000194b: 	movss	%xmm5, 0x390(%rsp)
    00001954: 	movss	%xmm4, 0x394(%rsp)
    0000195d: 	movq	0x390(%rsp), %xmm0
    00001966: 	callq	cabsf@PLT # Offset: 6502
    0000196b: 	movss	0x8(%rsp), %xmm6
    00001971: 	comiss	%xmm0, %xmm6
    00001974: 	jbe	.Ltmp1234 # Offset: 6516
.Ltmp1438:
    0000197a: 	addl	$0x1, %r13d
    0000197e: 	cmpl	%r14d, %r13d
    00001981: 	jl	.Ltmp1235 # Offset: 6529
.Ltmp1231:
    00001987: 	movq	%r12, %rsi
    0000198a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001991: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6545
    00001996: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000199d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000019a4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000019ab: 	je	.Ltmp1236 # Offset: 6571
.Ltmp1472:
    000019b1: 	movq	-0x20(%rax), %r13
    000019b5: 	callq	clock@PLT # Offset: 6581
    000019ba: 	pxor	%xmm0, %xmm0
    000019be: 	movq	%rax, end_time(%rip)
    000019c5: 	movq	%r13, %rdi
    000019c8: 	subq	start_time(%rip), %rax
    000019cf: 	cvtsi2sd	%rax, %xmm0
    000019d4: 	divsd	DATAat0x2b628(%rip), %xmm0
    000019dc: 	callq	_Z13record_resultdPKc # Offset: 6620
    000019e1: 	movq	0x4f0(%rsp), %rdi
    000019e9: 	cmpq	0x50(%rsp), %rdi
    000019ee: 	je	.Ltmp1237 # Offset: 6638
    000019f0: 	movq	0x500(%rsp), %rax
    000019f8: 	leaq	0x1(%rax), %rsi
    000019fc: 	callq	_ZdlPvm@PLT # Offset: 6652
.Ltmp1237:
    00001a01: 	movq	0x58(%rsp), %rsi
    00001a06: 	leaq	DATAat0x2b3a1(%rip), %rdx
    00001a0d: 	movq	%r12, %rdi
    00001a10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6672
    00001a15: 	callq	clock@PLT # Offset: 6677
    00001a1a: 	movl	iterations(%rip), %r14d
    00001a21: 	movq	%rax, start_time(%rip)
    00001a28: 	testl	%r14d, %r14d
    00001a2b: 	jle	.Ltmp1238 # Offset: 6699
    00001a31: 	movss	0x30(%rsp), %xmm1
    00001a37: 	pxor	%xmm7, %xmm7
    00001a3b: 	movss	0xc(%rsp), %xmm0
    00001a41: 	xorl	%r13d, %r13d
    00001a44: 	movaps	%xmm7, %xmm3
    00001a47: 	movss	%xmm7, (%rsp)
    00001a4c: 	addss	0xc8(%rsp), %xmm1
    00001a55: 	addss	0x4c(%rsp), %xmm1
    00001a5b: 	addss	0x44(%rsp), %xmm1
    00001a61: 	addss	0x48(%rsp), %xmm0
    00001a67: 	addss	0x40(%rsp), %xmm0
    00001a6d: 	addss	0x3c(%rsp), %xmm0
    00001a73: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001a7a: 	subss	%xmm1, %xmm3
    00001a7e: 	movss	%xmm0, 0x60(%rsp)
    00001a84: 	movss	%xmm3, 0x90(%rsp)
    00001a8d: 	movaps	%xmm3, %xmm6
    00001a90: 	mulss	%xmm7, %xmm6
    00001a94: 	movss	DATAat0x2b900(%rip), %xmm7
    00001a9c: 	mulss	%xmm7, %xmm3
    00001aa0: 	movss	%xmm7, 0x38(%rsp)
    00001aa6: 	movaps	%xmm1, %xmm7
    00001aa9: 	shufps	$0x0, %xmm7, %xmm7
    00001aad: 	movaps	%xmm7, 0x80(%rsp)
    00001ab5: 	movss	%xmm6, 0x10(%rsp)
    00001abb: 	movaps	%xmm0, %xmm6
    00001abe: 	shufps	$0x0, %xmm6, %xmm6
    00001ac2: 	movaps	%xmm6, 0x70(%rsp)
    00001ac7: 	movss	%xmm3, 0x20(%rsp)
    00001acd: 	movss	DATAat0x2b908(%rip), %xmm3
    00001ad5: 	movss	%xmm3, 0x8(%rsp)
    00001adb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1242:
    00001ae0: 	movss	(%rsp), %xmm5
    00001ae5: 	movaps	0x70(%rsp), %xmm2
    00001aea: 	movq	%rbp, %rax
    00001aed: 	movaps	0x80(%rsp), %xmm3
    00001af5: 	movaps	%xmm5, %xmm4
    00001af8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1239:
    00001b00: 	movaps	(%rax), %xmm0
    00001b03: 	addq	$0x20, %rax
    00001b07: 	movaps	%xmm0, %xmm1
    00001b0a: 	shufps	$0x88, -0x10(%rax), %xmm1
    00001b0f: 	subps	%xmm2, %xmm1
    00001b12: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00001b17: 	subps	%xmm3, %xmm0
    00001b1a: 	addss	%xmm1, %xmm5
    00001b1e: 	movaps	%xmm1, %xmm6
    00001b21: 	shufps	$0x55, %xmm1, %xmm6
    00001b25: 	addss	%xmm0, %xmm4
    00001b29: 	addss	%xmm5, %xmm6
    00001b2d: 	movaps	%xmm1, %xmm5
    00001b30: 	unpckhps	%xmm1, %xmm5
    00001b33: 	shufps	$0xff, %xmm1, %xmm1
    00001b37: 	addss	%xmm6, %xmm5
    00001b3b: 	addss	%xmm1, %xmm5
    00001b3f: 	movaps	%xmm0, %xmm1
    00001b42: 	shufps	$0x55, %xmm0, %xmm1
    00001b46: 	addss	%xmm4, %xmm1
    00001b4a: 	movaps	%xmm0, %xmm4
    00001b4d: 	unpckhps	%xmm0, %xmm4
    00001b50: 	shufps	$0xff, %xmm0, %xmm0
    00001b54: 	addss	%xmm1, %xmm4
    00001b58: 	addss	%xmm0, %xmm4
    00001b5c: 	cmpq	%rbx, %rax
    00001b5f: 	jne	.Ltmp1239 # Offset: 7007
    00001b61: 	pxor	%xmm0, %xmm0
    00001b65: 	movss	0x38(%rsp), %xmm2
    00001b6b: 	movss	(%rsp), %xmm1
    00001b70: 	cvtsd2ss	init_value(%rip), %xmm0
    00001b78: 	subss	0x60(%rsp), %xmm0
    00001b7e: 	mulss	%xmm0, %xmm2
    00001b82: 	mulss	%xmm0, %xmm1
    00001b86: 	subss	0x10(%rsp), %xmm2
    00001b8c: 	addss	0x20(%rsp), %xmm1
    00001b92: 	ucomiss	%xmm1, %xmm2
    00001b95: 	jp	.Ltmp1240 # Offset: 7061
.Ltmp1512:
    00001b9b: 	subss	%xmm2, %xmm5
    00001b9f: 	subss	%xmm1, %xmm4
    00001ba3: 	movss	%xmm5, 0x380(%rsp)
    00001bac: 	movss	%xmm4, 0x384(%rsp)
    00001bb5: 	movq	0x380(%rsp), %xmm0
    00001bbe: 	callq	cabsf@PLT # Offset: 7102
    00001bc3: 	movss	0x8(%rsp), %xmm6
    00001bc9: 	comiss	%xmm0, %xmm6
    00001bcc: 	jbe	.Ltmp1241 # Offset: 7116
.Ltmp1437:
    00001bd2: 	addl	$0x1, %r13d
    00001bd6: 	cmpl	%r14d, %r13d
    00001bd9: 	jl	.Ltmp1242 # Offset: 7129
.Ltmp1238:
    00001bdf: 	movq	%r12, %rsi
    00001be2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001be9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7145
    00001bee: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001bf5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001bfc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c03: 	je	.Ltmp1243 # Offset: 7171
.Ltmp1471:
    00001c09: 	movq	-0x20(%rax), %r13
    00001c0d: 	callq	clock@PLT # Offset: 7181
    00001c12: 	pxor	%xmm0, %xmm0
    00001c16: 	movq	%rax, end_time(%rip)
    00001c1d: 	movq	%r13, %rdi
    00001c20: 	subq	start_time(%rip), %rax
    00001c27: 	cvtsi2sd	%rax, %xmm0
    00001c2c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001c34: 	callq	_Z13record_resultdPKc # Offset: 7220
    00001c39: 	movq	0x4f0(%rsp), %rdi
    00001c41: 	cmpq	0x50(%rsp), %rdi
    00001c46: 	je	.Ltmp1244 # Offset: 7238
    00001c48: 	movq	0x500(%rsp), %rax
    00001c50: 	leaq	0x1(%rax), %rsi
    00001c54: 	callq	_ZdlPvm@PLT # Offset: 7252
.Ltmp1244:
    00001c59: 	movq	0x58(%rsp), %rsi
    00001c5e: 	leaq	DATAat0x2b3be(%rip), %rdx
    00001c65: 	movq	%r12, %rdi
    00001c68: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7272
    00001c6d: 	callq	clock@PLT # Offset: 7277
    00001c72: 	movl	iterations(%rip), %r14d
    00001c79: 	movq	%rax, start_time(%rip)
    00001c80: 	testl	%r14d, %r14d
    00001c83: 	jle	.Ltmp1245 # Offset: 7299
    00001c89: 	pxor	%xmm6, %xmm6
    00001c8d: 	movss	0x30(%rsp), %xmm5
    00001c93: 	movss	0x4c(%rsp), %xmm2
    00001c99: 	xorl	%r13d, %r13d
    00001c9c: 	movaps	%xmm6, %xmm0
    00001c9f: 	movss	0x44(%rsp), %xmm1
    00001ca5: 	movss	0xc8(%rsp), %xmm4
    00001cae: 	movss	%xmm6, (%rsp)
    00001cb3: 	subss	%xmm5, %xmm0
    00001cb7: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001cbe: 	subss	%xmm4, %xmm0
    00001cc2: 	subss	%xmm2, %xmm0
    00001cc6: 	subss	%xmm1, %xmm0
    00001cca: 	movss	%xmm0, 0xd8(%rsp)
    00001cd3: 	movaps	%xmm0, %xmm3
    00001cd6: 	movaps	%xmm0, %xmm7
    00001cd9: 	mulss	%xmm6, %xmm3
    00001cdd: 	movss	0x3c(%rsp), %xmm6
    00001ce3: 	shufps	$0x0, %xmm6, %xmm6
    00001ce7: 	movaps	%xmm6, 0x80(%rsp)
    00001cef: 	movss	%xmm3, 0xc0(%rsp)
    00001cf8: 	movss	DATAat0x2b900(%rip), %xmm3
    00001d00: 	mulss	%xmm3, %xmm7
    00001d04: 	movss	%xmm3, 0x38(%rsp)
    00001d0a: 	movss	0xc(%rsp), %xmm3
    00001d10: 	shufps	$0x0, %xmm3, %xmm3
    00001d14: 	movaps	%xmm3, 0x20(%rsp)
    00001d19: 	movss	0x48(%rsp), %xmm3
    00001d1f: 	shufps	$0x0, %xmm3, %xmm3
    00001d23: 	movaps	%xmm3, 0x70(%rsp)
    00001d28: 	movss	0x40(%rsp), %xmm3
    00001d2e: 	movss	%xmm7, 0xcc(%rsp)
    00001d37: 	movss	DATAat0x2b908(%rip), %xmm7
    00001d3f: 	shufps	$0x0, %xmm3, %xmm3
    00001d43: 	movaps	%xmm3, 0xa0(%rsp)
    00001d4b: 	movaps	%xmm1, %xmm3
    00001d4e: 	movss	%xmm7, 0x8(%rsp)
    00001d54: 	movaps	%xmm5, %xmm7
    00001d57: 	shufps	$0x0, %xmm3, %xmm3
    00001d5b: 	shufps	$0x0, %xmm7, %xmm7
    00001d5f: 	movaps	%xmm7, 0x10(%rsp)
    00001d64: 	movaps	%xmm4, %xmm7
    00001d67: 	shufps	$0x0, %xmm7, %xmm7
    00001d6b: 	movaps	%xmm7, 0xb0(%rsp)
    00001d73: 	movaps	%xmm2, %xmm7
    00001d76: 	shufps	$0x0, %xmm7, %xmm7
    00001d7a: 	movaps	%xmm3, 0x60(%rsp)
    00001d7f: 	movaps	%xmm7, 0x90(%rsp)
    00001d87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1249:
    00001d90: 	movss	(%rsp), %xmm5
    00001d95: 	movaps	0x60(%rsp), %xmm2
    00001d9a: 	movq	%rbp, %rax
    00001d9d: 	movaps	0x70(%rsp), %xmm3
    00001da2: 	movaps	0x80(%rsp), %xmm6
    00001daa: 	movaps	0x10(%rsp), %xmm8
    00001db0: 	movaps	0x20(%rsp), %xmm9
    00001db6: 	movaps	%xmm5, %xmm4
    00001db9: 	movaps	0x90(%rsp), %xmm7
    00001dc1: 	movaps	0xa0(%rsp), %xmm10
    00001dca: 	movaps	0xb0(%rsp), %xmm11
    00001dd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1246:
    00001dd8: 	movaps	(%rax), %xmm0
    00001ddb: 	addq	$0x20, %rax
    00001ddf: 	movaps	%xmm0, %xmm1
    00001de2: 	shufps	$0x88, -0x10(%rax), %xmm1
    00001de7: 	subps	%xmm9, %xmm1
    00001deb: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00001df0: 	subps	%xmm8, %xmm0
    00001df4: 	subps	%xmm3, %xmm1
    00001df7: 	subps	%xmm11, %xmm0
    00001dfb: 	subps	%xmm10, %xmm1
    00001dff: 	subps	%xmm7, %xmm0
    00001e02: 	subps	%xmm6, %xmm1
    00001e05: 	subps	%xmm2, %xmm0
    00001e08: 	addss	%xmm1, %xmm5
    00001e0c: 	movaps	%xmm1, %xmm12
    00001e10: 	shufps	$0x55, %xmm1, %xmm12
    00001e15: 	addss	%xmm0, %xmm4
    00001e19: 	addss	%xmm5, %xmm12
    00001e1e: 	movaps	%xmm1, %xmm5
    00001e21: 	unpckhps	%xmm1, %xmm5
    00001e24: 	shufps	$0xff, %xmm1, %xmm1
    00001e28: 	addss	%xmm12, %xmm5
    00001e2d: 	addss	%xmm1, %xmm5
    00001e31: 	movaps	%xmm0, %xmm1
    00001e34: 	shufps	$0x55, %xmm0, %xmm1
    00001e38: 	addss	%xmm4, %xmm1
    00001e3c: 	movaps	%xmm0, %xmm4
    00001e3f: 	unpckhps	%xmm0, %xmm4
    00001e42: 	shufps	$0xff, %xmm0, %xmm0
    00001e46: 	addss	%xmm1, %xmm4
    00001e4a: 	addss	%xmm0, %xmm4
    00001e4e: 	cmpq	%rbx, %rax
    00001e51: 	jne	.Ltmp1246 # Offset: 7761
    00001e53: 	pxor	%xmm0, %xmm0
    00001e57: 	movss	0x38(%rsp), %xmm2
    00001e5d: 	movss	(%rsp), %xmm1
    00001e62: 	cvtsd2ss	init_value(%rip), %xmm0
    00001e6a: 	subss	0xc(%rsp), %xmm0
    00001e70: 	subss	0x48(%rsp), %xmm0
    00001e76: 	subss	0x40(%rsp), %xmm0
    00001e7c: 	subss	0x3c(%rsp), %xmm0
    00001e82: 	mulss	%xmm0, %xmm2
    00001e86: 	subss	0xc0(%rsp), %xmm2
    00001e8f: 	mulss	%xmm0, %xmm1
    00001e93: 	addss	0xcc(%rsp), %xmm1
    00001e9c: 	ucomiss	%xmm2, %xmm1
    00001e9f: 	jp	.Ltmp1247 # Offset: 7839
.Ltmp1534:
    00001ea5: 	subss	%xmm2, %xmm5
    00001ea9: 	subss	%xmm1, %xmm4
    00001ead: 	movss	%xmm5, 0x370(%rsp)
    00001eb6: 	movss	%xmm4, 0x374(%rsp)
    00001ebf: 	movq	0x370(%rsp), %xmm0
    00001ec8: 	callq	cabsf@PLT # Offset: 7880
    00001ecd: 	movss	0x8(%rsp), %xmm3
    00001ed3: 	comiss	%xmm0, %xmm3
    00001ed6: 	jbe	.Ltmp1248 # Offset: 7894
.Ltmp1436:
    00001edc: 	addl	$0x1, %r13d
    00001ee0: 	cmpl	%r14d, %r13d
    00001ee3: 	jl	.Ltmp1249 # Offset: 7907
.Ltmp1245:
    00001ee9: 	movq	%r12, %rsi
    00001eec: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ef3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7923
    00001ef8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001eff: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001f06: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001f0d: 	je	.Ltmp1250 # Offset: 7949
.Ltmp1470:
    00001f13: 	movq	-0x20(%rax), %r13
    00001f17: 	callq	clock@PLT # Offset: 7959
    00001f1c: 	pxor	%xmm0, %xmm0
    00001f20: 	movq	%rax, end_time(%rip)
    00001f27: 	movq	%r13, %rdi
    00001f2a: 	subq	start_time(%rip), %rax
    00001f31: 	cvtsi2sd	%rax, %xmm0
    00001f36: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001f3e: 	callq	_Z13record_resultdPKc # Offset: 7998
    00001f43: 	movq	0x4f0(%rsp), %rdi
    00001f4b: 	cmpq	0x50(%rsp), %rdi
    00001f50: 	je	.Ltmp1251 # Offset: 8016
    00001f52: 	movq	0x500(%rsp), %rax
    00001f5a: 	leaq	0x1(%rax), %rsi
    00001f5e: 	callq	_ZdlPvm@PLT # Offset: 8030
.Ltmp1251:
    00001f63: 	movq	0x58(%rsp), %rsi
    00001f68: 	leaq	DATAat0x2b3dc(%rip), %rdx
    00001f6f: 	movq	%r12, %rdi
    00001f72: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8050
    00001f77: 	callq	clock@PLT # Offset: 8055
    00001f7c: 	movl	iterations(%rip), %r14d
    00001f83: 	movq	%rax, start_time(%rip)
    00001f8a: 	testl	%r14d, %r14d
    00001f8d: 	jle	.Ltmp1252 # Offset: 8077
    00001f93: 	movss	0x30(%rsp), %xmm6
    00001f99: 	pxor	%xmm3, %xmm3
    00001f9d: 	movss	0xc(%rsp), %xmm7
    00001fa3: 	xorl	%r13d, %r13d
    00001fa6: 	movss	%xmm3, (%rsp)
    00001fab: 	leaq	DATAat0x2b1d0(%rip), %r15
    00001fb2: 	mulss	%xmm3, %xmm6
    00001fb6: 	mulss	%xmm3, %xmm7
    00001fba: 	movss	DATAat0x2b900(%rip), %xmm3
    00001fc2: 	movss	%xmm3, 0x38(%rsp)
    00001fc8: 	movss	%xmm6, 0x20(%rsp)
    00001fce: 	movss	DATAat0x2b908(%rip), %xmm6
    00001fd6: 	movss	%xmm7, 0x10(%rsp)
    00001fdc: 	movss	%xmm6, 0x8(%rsp)
    00001fe2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1258:
    00001fe8: 	movss	(%rsp), %xmm6
    00001fed: 	movss	0x30(%rsp), %xmm3
    00001ff3: 	movq	%rbp, %rax
    00001ff6: 	movss	0xc(%rsp), %xmm2
    00001ffc: 	movaps	%xmm6, %xmm5
    00001fff: 	nop # Size: 1
.Ltmp1254:
    00002000: 	movss	(%rax), %xmm7
    00002004: 	movss	0x4(%rax), %xmm1
    00002009: 	movaps	%xmm2, %xmm4
    0000200c: 	movaps	%xmm3, %xmm0
    0000200f: 	movaps	%xmm3, %xmm8
    00002013: 	mulss	%xmm1, %xmm0
    00002017: 	mulss	%xmm7, %xmm4
    0000201b: 	mulss	%xmm7, %xmm8
    00002020: 	subss	%xmm0, %xmm4
    00002024: 	movaps	%xmm2, %xmm0
    00002027: 	mulss	%xmm1, %xmm0
    0000202b: 	addss	%xmm8, %xmm0
    00002030: 	ucomiss	%xmm4, %xmm0
    00002033: 	jp	.Ltmp1253 # Offset: 8243
    00002039: 	addq	$0x8, %rax
    0000203d: 	addss	%xmm4, %xmm6
    00002041: 	addss	%xmm0, %xmm5
    00002045: 	cmpq	%rbx, %rax
    00002048: 	jne	.Ltmp1254 # Offset: 8264
.Ltmp1490:
    0000204a: 	movss	0xc(%rsp), %xmm0
    00002050: 	movss	0x30(%rsp), %xmm1
    00002056: 	pxor	%xmm2, %xmm2
    0000205a: 	cvtsd2ss	init_value(%rip), %xmm2
    00002062: 	mulss	%xmm2, %xmm0
    00002066: 	mulss	%xmm2, %xmm1
    0000206a: 	subss	0x20(%rsp), %xmm0
    00002070: 	addss	0x10(%rsp), %xmm1
    00002076: 	ucomiss	%xmm0, %xmm1
    00002079: 	jp	.Ltmp1255 # Offset: 8313
.Ltmp1508:
    0000207f: 	movss	(%rsp), %xmm7
    00002084: 	movss	0x38(%rsp), %xmm13
    0000208b: 	movaps	%xmm7, %xmm2
    0000208e: 	movaps	%xmm13, %xmm3
    00002092: 	mulss	%xmm1, %xmm2
    00002096: 	mulss	%xmm0, %xmm3
    0000209a: 	mulss	%xmm0, %xmm7
    0000209e: 	subss	%xmm2, %xmm3
    000020a2: 	movaps	%xmm13, %xmm2
    000020a6: 	mulss	%xmm1, %xmm2
    000020aa: 	addss	%xmm7, %xmm2
    000020ae: 	ucomiss	%xmm3, %xmm2
    000020b1: 	jp	.Ltmp1256 # Offset: 8369
.Ltmp1507:
    000020b7: 	subss	%xmm3, %xmm6
    000020bb: 	subss	%xmm2, %xmm5
    000020bf: 	movss	%xmm6, 0x350(%rsp)
    000020c8: 	movss	%xmm5, 0x354(%rsp)
    000020d1: 	movq	0x350(%rsp), %xmm0
    000020da: 	callq	cabsf@PLT # Offset: 8410
    000020df: 	movss	0x8(%rsp), %xmm6
    000020e5: 	comiss	%xmm0, %xmm6
    000020e8: 	jbe	.Ltmp1257 # Offset: 8424
.Ltmp1435:
    000020ee: 	addl	$0x1, %r13d
    000020f2: 	cmpl	%r14d, %r13d
    000020f5: 	jl	.Ltmp1258 # Offset: 8437
.Ltmp1252:
    000020fb: 	movq	%r12, %rsi
    000020fe: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002105: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8453
    0000210a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002111: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002118: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000211f: 	je	.Ltmp1259 # Offset: 8479
.Ltmp1469:
    00002125: 	movq	-0x20(%rax), %r13
    00002129: 	callq	clock@PLT # Offset: 8489
    0000212e: 	pxor	%xmm0, %xmm0
    00002132: 	movq	%rax, end_time(%rip)
    00002139: 	movq	%r13, %rdi
    0000213c: 	subq	start_time(%rip), %rax
    00002143: 	cvtsi2sd	%rax, %xmm0
    00002148: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002150: 	callq	_Z13record_resultdPKc # Offset: 8528
    00002155: 	movq	0x4f0(%rsp), %rdi
    0000215d: 	cmpq	0x50(%rsp), %rdi
    00002162: 	je	.Ltmp1260 # Offset: 8546
    00002164: 	movq	0x500(%rsp), %rax
    0000216c: 	leaq	0x1(%rax), %rsi
    00002170: 	callq	_ZdlPvm@PLT # Offset: 8560
.Ltmp1260:
    00002175: 	movq	0x58(%rsp), %rsi
    0000217a: 	leaq	DATAat0x2b3ef(%rip), %rdx
    00002181: 	movq	%r12, %rdi
    00002184: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8580
    00002189: 	callq	clock@PLT # Offset: 8585
    0000218e: 	movl	iterations(%rip), %r14d
    00002195: 	movq	%rax, start_time(%rip)
    0000219c: 	testl	%r14d, %r14d
    0000219f: 	jle	.Ltmp1261 # Offset: 8607
    000021a5: 	movss	0x30(%rsp), %xmm7
    000021ab: 	movss	0xc(%rsp), %xmm6
    000021b1: 	xorl	%r13d, %r13d
    000021b4: 	leaq	DATAat0x2b1d0(%rip), %r15
    000021bb: 	movss	0xc8(%rsp), %xmm3
    000021c4: 	movss	0x48(%rsp), %xmm5
    000021ca: 	movaps	%xmm7, %xmm1
    000021cd: 	movaps	%xmm6, %xmm0
    000021d0: 	mulss	%xmm3, %xmm1
    000021d4: 	mulss	%xmm5, %xmm0
    000021d8: 	mulss	%xmm5, %xmm7
    000021dc: 	mulss	%xmm3, %xmm6
    000021e0: 	movss	DATAat0x2b900(%rip), %xmm3
    000021e8: 	movss	%xmm3, 0x38(%rsp)
    000021ee: 	subss	%xmm1, %xmm0
    000021f2: 	movss	%xmm0, 0x20(%rsp)
    000021f8: 	movaps	%xmm7, %xmm0
    000021fb: 	pxor	%xmm7, %xmm7
    000021ff: 	addss	%xmm6, %xmm0
    00002203: 	movss	DATAat0x2b908(%rip), %xmm6
    0000220b: 	movss	%xmm7, (%rsp)
    00002210: 	movss	%xmm6, 0x8(%rsp)
    00002216: 	movss	%xmm0, 0x10(%rsp)
    0000221c: 	nopl	(%rax) # Size: 4
.Ltmp1270:
    00002220: 	movss	(%rsp), %xmm8
    00002226: 	movss	0x40(%rsp), %xmm10
    0000222d: 	movq	%rbp, %rax
    00002230: 	movss	0x44(%rsp), %xmm11
    00002237: 	movss	0x3c(%rsp), %xmm12
    0000223e: 	movss	0x4c(%rsp), %xmm13
    00002245: 	movss	0x10(%rsp), %xmm14
    0000224c: 	movaps	%xmm8, %xmm7
    00002250: 	movss	0x20(%rsp), %xmm15
    00002257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1266:
    00002260: 	ucomiss	%xmm15, %xmm14
    00002264: 	movss	(%rax), %xmm5
    00002268: 	movss	0x4(%rax), %xmm6
    0000226d: 	jp	.Ltmp1262 # Offset: 8813
    00002273: 	movaps	%xmm14, %xmm3
    00002277: 	movaps	%xmm15, %xmm2
.Ltmp1494:
    0000227b: 	movaps	%xmm13, %xmm1
    0000227f: 	movaps	%xmm10, %xmm0
    00002283: 	movaps	%xmm10, %xmm4
    00002287: 	mulss	%xmm3, %xmm1
    0000228b: 	mulss	%xmm2, %xmm0
    0000228f: 	mulss	%xmm3, %xmm4
    00002293: 	subss	%xmm1, %xmm0
    00002297: 	movaps	%xmm13, %xmm1
    0000229b: 	mulss	%xmm2, %xmm1
    0000229f: 	addss	%xmm4, %xmm1
    000022a3: 	ucomiss	%xmm0, %xmm1
    000022a6: 	jp	.Ltmp1263 # Offset: 8870
.Ltmp1493:
    000022ac: 	movaps	%xmm11, %xmm2
    000022b0: 	movaps	%xmm12, %xmm9
    000022b4: 	movaps	%xmm11, %xmm4
    000022b8: 	mulss	%xmm1, %xmm2
    000022bc: 	mulss	%xmm0, %xmm9
    000022c1: 	mulss	%xmm0, %xmm4
    000022c5: 	subss	%xmm2, %xmm9
    000022ca: 	movaps	%xmm12, %xmm2
    000022ce: 	mulss	%xmm1, %xmm2
    000022d2: 	addss	%xmm2, %xmm4
    000022d6: 	ucomiss	%xmm9, %xmm4
    000022da: 	jp	.Ltmp1264 # Offset: 8922
.Ltmp1492:
    000022e0: 	movaps	%xmm4, %xmm0
    000022e3: 	movaps	%xmm9, %xmm1
    000022e7: 	movaps	%xmm4, %xmm2
    000022ea: 	mulss	%xmm6, %xmm0
    000022ee: 	mulss	%xmm5, %xmm1
    000022f2: 	mulss	%xmm5, %xmm2
    000022f6: 	subss	%xmm0, %xmm1
    000022fa: 	movaps	%xmm9, %xmm0
    000022fe: 	mulss	%xmm6, %xmm0
    00002302: 	addss	%xmm2, %xmm0
    00002306: 	ucomiss	%xmm1, %xmm0
    00002309: 	jp	.Ltmp1265 # Offset: 8969
    0000230f: 	addq	$0x8, %rax
    00002313: 	addss	%xmm1, %xmm8
    00002318: 	addss	%xmm0, %xmm7
    0000231c: 	cmpq	%rbx, %rax
    0000231f: 	jne	.Ltmp1266 # Offset: 8991
.Ltmp1491:
    00002325: 	movss	(%rsp), %xmm6
    0000232a: 	pxor	%xmm2, %xmm2
    0000232e: 	cvtsd2ss	init_value(%rip), %xmm2
    00002336: 	movaps	%xmm2, %xmm5
    00002339: 	mulss	%xmm9, %xmm5
    0000233e: 	movaps	%xmm6, %xmm0
    00002341: 	mulss	%xmm4, %xmm0
    00002345: 	mulss	%xmm9, %xmm6
    0000234a: 	subss	%xmm0, %xmm5
    0000234e: 	movaps	%xmm2, %xmm0
    00002351: 	mulss	%xmm4, %xmm0
    00002355: 	movaps	%xmm6, %xmm1
    00002358: 	addss	%xmm0, %xmm1
    0000235c: 	ucomiss	%xmm1, %xmm5
    0000235f: 	jp	.Ltmp1267 # Offset: 9055
.Ltmp1533:
    00002365: 	movss	(%rsp), %xmm6
    0000236a: 	movss	0x38(%rsp), %xmm3
    00002370: 	movaps	%xmm6, %xmm0
    00002373: 	movaps	%xmm3, %xmm2
    00002376: 	mulss	%xmm1, %xmm0
    0000237a: 	mulss	%xmm5, %xmm2
    0000237e: 	mulss	%xmm5, %xmm6
    00002382: 	mulss	%xmm1, %xmm3
    00002386: 	subss	%xmm0, %xmm2
    0000238a: 	movaps	%xmm6, %xmm0
    0000238d: 	addss	%xmm3, %xmm0
    00002391: 	ucomiss	%xmm0, %xmm2
    00002394: 	jp	.Ltmp1268 # Offset: 9108
.Ltmp1532:
    0000239a: 	subss	%xmm0, %xmm7
    0000239e: 	subss	%xmm2, %xmm8
    000023a3: 	movss	%xmm7, 0x31c(%rsp)
    000023ac: 	movss	%xmm8, 0x318(%rsp)
    000023b6: 	movq	0x318(%rsp), %xmm0
    000023bf: 	callq	cabsf@PLT # Offset: 9151
    000023c4: 	movss	0x8(%rsp), %xmm7
    000023ca: 	comiss	%xmm0, %xmm7
    000023cd: 	jbe	.Ltmp1269 # Offset: 9165
.Ltmp1434:
    000023d3: 	addl	$0x1, %r13d
    000023d7: 	cmpl	%r14d, %r13d
    000023da: 	jl	.Ltmp1270 # Offset: 9178
.Ltmp1261:
    000023e0: 	movq	%r12, %rsi
    000023e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000023ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9194
    000023ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000023f6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000023fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002404: 	je	.Ltmp1271 # Offset: 9220
.Ltmp1468:
    0000240a: 	movq	-0x20(%rax), %r13
    0000240e: 	callq	clock@PLT # Offset: 9230
    00002413: 	pxor	%xmm0, %xmm0
    00002417: 	movq	%rax, end_time(%rip)
    0000241e: 	movq	%r13, %rdi
    00002421: 	subq	start_time(%rip), %rax
    00002428: 	cvtsi2sd	%rax, %xmm0
    0000242d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002435: 	callq	_Z13record_resultdPKc # Offset: 9269
    0000243a: 	movq	0x4f0(%rsp), %rdi
    00002442: 	cmpq	0x50(%rsp), %rdi
    00002447: 	je	.Ltmp1272 # Offset: 9287
    00002449: 	movq	0x500(%rsp), %rax
    00002451: 	leaq	0x1(%rax), %rsi
    00002455: 	callq	_ZdlPvm@PLT # Offset: 9301
.Ltmp1272:
    0000245a: 	movq	0x58(%rsp), %rsi
    0000245f: 	leaq	DATAat0x2b590(%rip), %rdx
    00002466: 	movq	%r12, %rdi
    00002469: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9321
    0000246e: 	callq	clock@PLT # Offset: 9326
    00002473: 	movl	iterations(%rip), %r14d
    0000247a: 	movq	%rax, start_time(%rip)
    00002481: 	testl	%r14d, %r14d
    00002484: 	jle	.Ltmp1273 # Offset: 9348
    0000248a: 	movss	0x30(%rsp), %xmm3
    00002490: 	movss	0xc(%rsp), %xmm7
    00002496: 	xorl	%r13d, %r13d
    00002499: 	leaq	DATAat0x2b1d0(%rip), %r15
    000024a0: 	movss	0xc8(%rsp), %xmm6
    000024a9: 	movss	0x48(%rsp), %xmm5
    000024af: 	movaps	%xmm3, %xmm1
    000024b2: 	movaps	%xmm7, %xmm0
    000024b5: 	mulss	%xmm6, %xmm1
    000024b9: 	mulss	%xmm5, %xmm0
    000024bd: 	mulss	%xmm6, %xmm7
    000024c1: 	movss	DATAat0x2b908(%rip), %xmm6
    000024c9: 	mulss	%xmm5, %xmm3
    000024cd: 	movss	%xmm6, 0x8(%rsp)
    000024d3: 	subss	%xmm1, %xmm0
    000024d7: 	movss	%xmm0, 0x10(%rsp)
    000024dd: 	movaps	%xmm7, %xmm0
    000024e0: 	pxor	%xmm7, %xmm7
    000024e4: 	addss	%xmm3, %xmm0
    000024e8: 	movss	DATAat0x2b900(%rip), %xmm3
    000024f0: 	movss	%xmm7, (%rsp)
    000024f5: 	movss	%xmm3, 0x38(%rsp)
    000024fb: 	movss	%xmm0, 0x20(%rsp)
    00002501: 	nopl	(%rax) # Size: 7
.Ltmp1280:
    00002508: 	movss	0x10(%rsp), %xmm3
    0000250e: 	movss	0x20(%rsp), %xmm5
    00002514: 	ucomiss	%xmm5, %xmm3
    00002517: 	jp	.Ltmp1274 # Offset: 9495
    0000251d: 	movss	0x4c(%rsp), %xmm7
    00002523: 	movss	0x40(%rsp), %xmm6
    00002529: 	movq	%rbp, %rax
    0000252c: 	movss	(%rsp), %xmm9
    00002532: 	movss	0x44(%rsp), %xmm11
    00002539: 	movaps	%xmm7, %xmm0
    0000253c: 	movaps	%xmm6, %xmm10
    00002540: 	movss	0x3c(%rsp), %xmm12
    00002547: 	mulss	%xmm5, %xmm0
    0000254b: 	movaps	%xmm9, %xmm8
    0000254f: 	mulss	%xmm3, %xmm10
    00002554: 	mulss	%xmm5, %xmm6
    00002558: 	mulss	%xmm3, %xmm7
    0000255c: 	subss	%xmm0, %xmm10
    00002561: 	addss	%xmm6, %xmm7
    00002565: 	nopl	(%rax) # Size: 3
.Ltmp1277:
    00002568: 	ucomiss	%xmm10, %xmm7
    0000256c: 	movss	(%rax), %xmm6
    00002570: 	movss	0x4(%rax), %xmm5
    00002575: 	jp	.Ltmp1275 # Offset: 9589
    0000257b: 	movaps	%xmm7, %xmm3
    0000257e: 	movaps	%xmm10, %xmm2
.Ltmp1496:
    00002582: 	movaps	%xmm11, %xmm0
    00002586: 	movaps	%xmm12, %xmm4
    0000258a: 	movaps	%xmm11, %xmm1
    0000258e: 	mulss	%xmm3, %xmm0
    00002592: 	mulss	%xmm2, %xmm4
    00002596: 	mulss	%xmm2, %xmm1
    0000259a: 	subss	%xmm0, %xmm4
    0000259e: 	movaps	%xmm12, %xmm0
    000025a2: 	mulss	%xmm3, %xmm0
    000025a6: 	addss	%xmm0, %xmm1
    000025aa: 	ucomiss	%xmm4, %xmm1
    000025ad: 	jp	.Ltmp1276 # Offset: 9645
    000025b3: 	addss	%xmm4, %xmm6
    000025b7: 	addss	%xmm1, %xmm5
    000025bb: 	addq	$0x8, %rax
    000025bf: 	addss	%xmm6, %xmm9
    000025c4: 	addss	%xmm5, %xmm8
    000025c9: 	cmpq	%rbx, %rax
    000025cc: 	jne	.Ltmp1277 # Offset: 9676
.Ltmp1495:
    000025ce: 	movss	(%rsp), %xmm7
    000025d3: 	pxor	%xmm0, %xmm0
    000025d7: 	movss	0x38(%rsp), %xmm6
    000025dd: 	cvtsd2ss	init_value(%rip), %xmm0
    000025e5: 	addss	%xmm4, %xmm0
    000025e9: 	addss	%xmm7, %xmm1
    000025ed: 	movaps	%xmm6, %xmm3
    000025f0: 	movaps	%xmm7, %xmm2
    000025f3: 	mulss	%xmm0, %xmm3
    000025f7: 	mulss	%xmm1, %xmm2
    000025fb: 	mulss	%xmm0, %xmm7
    000025ff: 	mulss	%xmm1, %xmm6
    00002603: 	subss	%xmm2, %xmm3
    00002607: 	movaps	%xmm7, %xmm2
    0000260a: 	addss	%xmm6, %xmm2
    0000260e: 	ucomiss	%xmm2, %xmm3
    00002611: 	jp	.Ltmp1278 # Offset: 9745
.Ltmp1500:
    00002617: 	subss	%xmm3, %xmm9
    0000261c: 	subss	%xmm2, %xmm8
    00002621: 	movss	%xmm9, 0x2e0(%rsp)
    0000262b: 	movss	%xmm8, 0x2e4(%rsp)
    00002635: 	movq	0x2e0(%rsp), %xmm0
    0000263e: 	callq	cabsf@PLT # Offset: 9790
    00002643: 	movss	0x8(%rsp), %xmm6
    00002649: 	comiss	%xmm0, %xmm6
    0000264c: 	jbe	.Ltmp1279 # Offset: 9804
.Ltmp1433:
    00002652: 	addl	$0x1, %r13d
    00002656: 	cmpl	%r14d, %r13d
    00002659: 	jl	.Ltmp1280 # Offset: 9817
.Ltmp1273:
    0000265f: 	movq	%r12, %rsi
    00002662: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002669: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9833
    0000266e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002675: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000267c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002683: 	je	.Ltmp1281 # Offset: 9859
.Ltmp1467:
    00002689: 	movq	-0x20(%rax), %r13
    0000268d: 	callq	clock@PLT # Offset: 9869
    00002692: 	pxor	%xmm0, %xmm0
    00002696: 	movq	%rax, end_time(%rip)
    0000269d: 	movq	%r13, %rdi
    000026a0: 	subq	start_time(%rip), %rax
    000026a7: 	cvtsi2sd	%rax, %xmm0
    000026ac: 	divsd	DATAat0x2b628(%rip), %xmm0
    000026b4: 	callq	_Z13record_resultdPKc # Offset: 9908
    000026b9: 	movq	0x4f0(%rsp), %rdi
    000026c1: 	cmpq	0x50(%rsp), %rdi
    000026c6: 	je	.Ltmp1282 # Offset: 9926
    000026c8: 	movq	0x500(%rsp), %rax
    000026d0: 	leaq	0x1(%rax), %rsi
    000026d4: 	callq	_ZdlPvm@PLT # Offset: 9940
.Ltmp1282:
    000026d9: 	movq	0x58(%rsp), %rsi
    000026de: 	leaq	DATAat0x2b5b0(%rip), %rdx
    000026e5: 	movq	%r12, %rdi
    000026e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9960
    000026ed: 	callq	clock@PLT # Offset: 9965
    000026f2: 	movl	iterations(%rip), %r14d
    000026f9: 	movq	%rax, start_time(%rip)
    00002700: 	testl	%r14d, %r14d
    00002703: 	jle	.Ltmp1283 # Offset: 9987
    00002709: 	movss	0xc(%rsp), %xmm6
    0000270f: 	pxor	%xmm7, %xmm7
    00002713: 	movss	0x30(%rsp), %xmm3
    00002719: 	xorl	%r13d, %r13d
    0000271c: 	movss	%xmm7, (%rsp)
    00002721: 	leaq	DATAat0x2b1d0(%rip), %r15
    00002728: 	mulss	%xmm7, %xmm6
    0000272c: 	mulss	%xmm7, %xmm3
    00002730: 	movss	DATAat0x2b908(%rip), %xmm7
    00002738: 	movss	%xmm7, 0x8(%rsp)
    0000273e: 	movss	%xmm6, 0x20(%rsp)
    00002744: 	movss	DATAat0x2b900(%rip), %xmm6
    0000274c: 	movss	%xmm3, 0x10(%rsp)
    00002752: 	movss	%xmm6, 0x38(%rsp)
    00002758: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1295:
    00002760: 	movss	(%rsp), %xmm5
    00002765: 	movss	0x30(%rsp), %xmm6
    0000276b: 	movq	%rbp, %rax
    0000276e: 	movss	0xc(%rsp), %xmm7
    00002774: 	movss	0x40(%rsp), %xmm8
    0000277b: 	movss	0xc8(%rsp), %xmm9
    00002785: 	movss	0x44(%rsp), %xmm10
    0000278c: 	movaps	%xmm5, %xmm4
    0000278f: 	movss	0x48(%rsp), %xmm11
    00002796: 	movss	0x3c(%rsp), %xmm12
    0000279d: 	movss	0x4c(%rsp), %xmm13
    000027a4: 	nopl	(%rax) # Size: 4
.Ltmp1288:
    000027a8: 	movss	(%rax), %xmm15
    000027ad: 	movss	0x4(%rax), %xmm1
    000027b2: 	movaps	%xmm7, %xmm0
    000027b5: 	movaps	%xmm6, %xmm2
    000027b8: 	movaps	%xmm7, %xmm14
    000027bc: 	mulss	%xmm1, %xmm2
    000027c0: 	mulss	%xmm15, %xmm0
    000027c5: 	mulss	%xmm1, %xmm14
    000027ca: 	subss	%xmm2, %xmm0
    000027ce: 	movaps	%xmm6, %xmm2
    000027d1: 	mulss	%xmm15, %xmm2
    000027d6: 	addss	%xmm2, %xmm14
    000027db: 	ucomiss	%xmm0, %xmm14
    000027df: 	jp	.Ltmp1284 # Offset: 10207
.Ltmp1487:
    000027e5: 	movaps	%xmm9, %xmm1
    000027e9: 	movaps	%xmm11, %xmm2
    000027ed: 	movaps	%xmm9, %xmm3
    000027f1: 	mulss	%xmm14, %xmm1
    000027f6: 	mulss	%xmm0, %xmm2
    000027fa: 	mulss	%xmm0, %xmm3
    000027fe: 	subss	%xmm1, %xmm2
    00002802: 	movaps	%xmm11, %xmm1
    00002806: 	mulss	%xmm14, %xmm1
    0000280b: 	addss	%xmm1, %xmm3
    0000280f: 	ucomiss	%xmm2, %xmm3
    00002812: 	jp	.Ltmp1285 # Offset: 10258
.Ltmp1486:
    00002818: 	movaps	%xmm13, %xmm1
    0000281c: 	movaps	%xmm8, %xmm0
    00002820: 	movaps	%xmm8, %xmm14
    00002824: 	mulss	%xmm3, %xmm1
    00002828: 	mulss	%xmm2, %xmm0
    0000282c: 	mulss	%xmm3, %xmm14
    00002831: 	subss	%xmm1, %xmm0
    00002835: 	movaps	%xmm13, %xmm1
    00002839: 	mulss	%xmm2, %xmm1
    0000283d: 	addss	%xmm14, %xmm1
    00002842: 	ucomiss	%xmm0, %xmm1
    00002845: 	jp	.Ltmp1286 # Offset: 10309
.Ltmp1489:
    0000284b: 	movaps	%xmm10, %xmm2
    0000284f: 	movaps	%xmm12, %xmm3
    00002853: 	movaps	%xmm12, %xmm14
    00002857: 	mulss	%xmm1, %xmm2
    0000285b: 	mulss	%xmm0, %xmm3
    0000285f: 	mulss	%xmm1, %xmm14
    00002864: 	subss	%xmm2, %xmm3
    00002868: 	movaps	%xmm10, %xmm2
    0000286c: 	mulss	%xmm0, %xmm2
    00002870: 	addss	%xmm14, %xmm2
    00002875: 	ucomiss	%xmm3, %xmm2
    00002878: 	jp	.Ltmp1287 # Offset: 10360
    0000287e: 	addq	$0x8, %rax
    00002882: 	addss	%xmm3, %xmm5
    00002886: 	addss	%xmm2, %xmm4
    0000288a: 	cmpq	%rbx, %rax
    0000288d: 	jne	.Ltmp1288 # Offset: 10381
.Ltmp1488:
    00002893: 	movss	0xc(%rsp), %xmm2
    00002899: 	movss	0x30(%rsp), %xmm3
    0000289f: 	pxor	%xmm0, %xmm0
    000028a3: 	cvtsd2ss	init_value(%rip), %xmm0
    000028ab: 	mulss	%xmm0, %xmm2
    000028af: 	mulss	%xmm0, %xmm3
    000028b3: 	subss	0x10(%rsp), %xmm2
    000028b9: 	addss	0x20(%rsp), %xmm3
    000028bf: 	ucomiss	%xmm3, %xmm2
    000028c2: 	jp	.Ltmp1289 # Offset: 10434
.Ltmp1510:
    000028c8: 	movss	0xc8(%rsp), %xmm7
    000028d1: 	movss	0x48(%rsp), %xmm13
    000028d8: 	movaps	%xmm7, %xmm1
    000028db: 	movaps	%xmm13, %xmm0
    000028df: 	mulss	%xmm3, %xmm1
    000028e3: 	mulss	%xmm2, %xmm0
    000028e7: 	mulss	%xmm2, %xmm7
    000028eb: 	subss	%xmm1, %xmm0
    000028ef: 	movaps	%xmm13, %xmm1
    000028f3: 	mulss	%xmm3, %xmm1
    000028f7: 	addss	%xmm7, %xmm1
    000028fb: 	ucomiss	%xmm1, %xmm0
    000028fe: 	jp	.Ltmp1290 # Offset: 10494
.Ltmp1509:
    00002904: 	movss	0x4c(%rsp), %xmm7
    0000290a: 	movss	0x40(%rsp), %xmm13
    00002911: 	movaps	%xmm7, %xmm3
    00002914: 	movaps	%xmm13, %xmm2
    00002918: 	mulss	%xmm1, %xmm3
    0000291c: 	mulss	%xmm0, %xmm2
    00002920: 	mulss	%xmm0, %xmm7
    00002924: 	subss	%xmm3, %xmm2
    00002928: 	movaps	%xmm13, %xmm3
    0000292c: 	mulss	%xmm1, %xmm3
    00002930: 	addss	%xmm7, %xmm3
    00002934: 	ucomiss	%xmm3, %xmm2
    00002937: 	jp	.Ltmp1291 # Offset: 10551
.Ltmp1530:
    0000293d: 	movss	0x44(%rsp), %xmm7
    00002943: 	movss	0x3c(%rsp), %xmm15
    0000294a: 	movaps	%xmm7, %xmm1
    0000294d: 	movaps	%xmm15, %xmm0
    00002951: 	mulss	%xmm3, %xmm1
    00002955: 	mulss	%xmm2, %xmm0
    00002959: 	mulss	%xmm2, %xmm7
    0000295d: 	subss	%xmm1, %xmm0
    00002961: 	movaps	%xmm15, %xmm1
    00002965: 	mulss	%xmm3, %xmm1
    00002969: 	addss	%xmm7, %xmm1
    0000296d: 	ucomiss	%xmm1, %xmm0
    00002970: 	jp	.Ltmp1292 # Offset: 10608
.Ltmp1529:
    00002976: 	movss	(%rsp), %xmm7
    0000297b: 	movss	0x38(%rsp), %xmm6
    00002981: 	movaps	%xmm7, %xmm2
    00002984: 	movaps	%xmm6, %xmm3
    00002987: 	mulss	%xmm1, %xmm2
    0000298b: 	mulss	%xmm0, %xmm3
    0000298f: 	mulss	%xmm0, %xmm7
    00002993: 	mulss	%xmm1, %xmm6
    00002997: 	subss	%xmm2, %xmm3
    0000299b: 	movaps	%xmm7, %xmm2
    0000299e: 	addss	%xmm6, %xmm2
    000029a2: 	ucomiss	%xmm2, %xmm3
    000029a5: 	jp	.Ltmp1293 # Offset: 10661
.Ltmp1528:
    000029ab: 	subss	%xmm3, %xmm5
    000029af: 	subss	%xmm2, %xmm4
    000029b3: 	movss	%xmm5, 0x290(%rsp)
    000029bc: 	movss	%xmm4, 0x294(%rsp)
    000029c5: 	movq	0x290(%rsp), %xmm0
    000029ce: 	callq	cabsf@PLT # Offset: 10702
    000029d3: 	movss	0x8(%rsp), %xmm6
    000029d9: 	comiss	%xmm0, %xmm6
    000029dc: 	jbe	.Ltmp1294 # Offset: 10716
.Ltmp1432:
    000029e2: 	addl	$0x1, %r13d
    000029e6: 	cmpl	%r14d, %r13d
    000029e9: 	jl	.Ltmp1295 # Offset: 10729
.Ltmp1283:
    000029ef: 	movq	%r12, %rsi
    000029f2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000029f9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10745
    000029fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002a05: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002a0c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002a13: 	je	.Ltmp1296 # Offset: 10771
.Ltmp1466:
    00002a19: 	movq	-0x20(%rax), %r13
    00002a1d: 	callq	clock@PLT # Offset: 10781
    00002a22: 	pxor	%xmm0, %xmm0
    00002a26: 	movq	%rax, end_time(%rip)
    00002a2d: 	movq	%r13, %rdi
    00002a30: 	subq	start_time(%rip), %rax
    00002a37: 	cvtsi2sd	%rax, %xmm0
    00002a3c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002a44: 	callq	_Z13record_resultdPKc # Offset: 10820
    00002a49: 	movq	0x4f0(%rsp), %rdi
    00002a51: 	cmpq	0x50(%rsp), %rdi
    00002a56: 	je	.Ltmp1297 # Offset: 10838
    00002a58: 	movq	0x500(%rsp), %rax
    00002a60: 	leaq	0x1(%rax), %rsi
    00002a64: 	callq	_ZdlPvm@PLT # Offset: 10852
.Ltmp1297:
    00002a69: 	movq	0x58(%rsp), %rsi
    00002a6e: 	leaq	DATAat0x2b40d(%rip), %rdx
    00002a75: 	movq	%r12, %rdi
    00002a78: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10872
    00002a7d: 	callq	clock@PLT # Offset: 10877
    00002a82: 	movl	iterations(%rip), %r14d
    00002a89: 	movq	%rax, start_time(%rip)
    00002a90: 	testl	%r14d, %r14d
    00002a93: 	jle	.Ltmp1298 # Offset: 10899
    00002a99: 	movss	DATAat0x2b908(%rip), %xmm7
    00002aa1: 	movss	DATAat0x2b900(%rip), %xmm6
    00002aa9: 	pxor	%xmm3, %xmm3
    00002aad: 	xorl	%r13d, %r13d
    00002ab0: 	movss	%xmm3, (%rsp)
    00002ab5: 	movss	%xmm7, 0x8(%rsp)
    00002abb: 	movss	%xmm6, 0x38(%rsp)
    00002ac1: 	nopl	(%rax) # Size: 7
.Ltmp1302:
    00002ac8: 	movss	(%rsp), %xmm7
    00002acd: 	movq	%rbp, %r15
    00002ad0: 	movss	%xmm7, 0x20(%rsp)
    00002ad6: 	movss	%xmm7, 0x10(%rsp)
    00002adc: 	nopl	(%rax) # Size: 4
.Ltmp1299:
    00002ae0: 	movss	0x4(%r15), %xmm1
    00002ae6: 	movss	(%r15), %xmm0
    00002aeb: 	addq	$0x8, %r15
    00002aef: 	movss	0x30(%rsp), %xmm3
    00002af5: 	movss	0xc(%rsp), %xmm2
    00002afb: 	callq	__divsc3@PLT # Offset: 11003
    00002b00: 	movss	0x10(%rsp), %xmm7
    00002b06: 	movq	%xmm0, 0x288(%rsp)
    00002b0f: 	addss	0x288(%rsp), %xmm7
    00002b18: 	movss	%xmm7, 0x10(%rsp)
    00002b1e: 	movss	0x20(%rsp), %xmm7
    00002b24: 	addss	0x28c(%rsp), %xmm7
    00002b2d: 	movss	%xmm7, 0x20(%rsp)
    00002b33: 	cmpq	%rbx, %r15
    00002b36: 	jne	.Ltmp1299 # Offset: 11062
    00002b38: 	movss	0xc(%rsp), %xmm2
    00002b3e: 	movss	0x30(%rsp), %xmm3
    00002b44: 	pxor	%xmm1, %xmm1
    00002b48: 	pxor	%xmm0, %xmm0
    00002b4c: 	cvtsd2ss	init_value(%rip), %xmm0
    00002b54: 	callq	__divsc3@PLT # Offset: 11092
    00002b59: 	movss	0x38(%rsp), %xmm7
    00002b5f: 	movss	(%rsp), %xmm6
    00002b64: 	movq	%xmm0, 0x280(%rsp)
    00002b6d: 	movss	0x280(%rsp), %xmm4
    00002b76: 	movss	0x284(%rsp), %xmm1
    00002b7f: 	movaps	%xmm7, %xmm0
    00002b82: 	movaps	%xmm6, %xmm2
    00002b85: 	mulss	%xmm1, %xmm2
    00002b89: 	mulss	%xmm4, %xmm0
    00002b8d: 	mulss	%xmm4, %xmm6
    00002b91: 	mulss	%xmm1, %xmm7
    00002b95: 	subss	%xmm2, %xmm0
    00002b99: 	movaps	%xmm6, %xmm2
    00002b9c: 	addss	%xmm7, %xmm2
    00002ba0: 	ucomiss	%xmm2, %xmm0
    00002ba3: 	jp	.Ltmp1300 # Offset: 11171
.Ltmp1506:
    00002ba9: 	movss	0x10(%rsp), %xmm1
    00002baf: 	subss	%xmm0, %xmm1
    00002bb3: 	movss	0x20(%rsp), %xmm0
    00002bb9: 	subss	%xmm2, %xmm0
    00002bbd: 	movss	%xmm1, 0x270(%rsp)
    00002bc6: 	movss	%xmm0, 0x274(%rsp)
    00002bcf: 	movq	0x270(%rsp), %xmm0
    00002bd8: 	callq	cabsf@PLT # Offset: 11224
    00002bdd: 	movss	0x8(%rsp), %xmm3
    00002be3: 	comiss	%xmm0, %xmm3
    00002be6: 	jbe	.Ltmp1301 # Offset: 11238
.Ltmp1431:
    00002bec: 	addl	$0x1, %r13d
    00002bf0: 	cmpl	%r14d, %r13d
    00002bf3: 	jl	.Ltmp1302 # Offset: 11251
.Ltmp1298:
    00002bf9: 	movq	%r12, %rsi
    00002bfc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002c03: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11267
    00002c08: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002c0f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002c16: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002c1d: 	je	.Ltmp1303 # Offset: 11293
.Ltmp1465:
    00002c23: 	movq	-0x20(%rax), %r13
    00002c27: 	callq	clock@PLT # Offset: 11303
    00002c2c: 	pxor	%xmm0, %xmm0
    00002c30: 	movq	%rax, end_time(%rip)
    00002c37: 	movq	%r13, %rdi
    00002c3a: 	subq	start_time(%rip), %rax
    00002c41: 	cvtsi2sd	%rax, %xmm0
    00002c46: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002c4e: 	callq	_Z13record_resultdPKc # Offset: 11342
    00002c53: 	movq	0x4f0(%rsp), %rdi
    00002c5b: 	cmpq	0x50(%rsp), %rdi
    00002c60: 	je	.Ltmp1304 # Offset: 11360
    00002c62: 	movq	0x500(%rsp), %rax
    00002c6a: 	leaq	0x1(%rax), %rsi
    00002c6e: 	callq	_ZdlPvm@PLT # Offset: 11374
.Ltmp1304:
    00002c73: 	movq	0x58(%rsp), %rsi
    00002c78: 	leaq	DATAat0x2b41e(%rip), %rdx
    00002c7f: 	movq	%r12, %rdi
    00002c82: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11394
    00002c87: 	callq	clock@PLT # Offset: 11399
    00002c8c: 	movl	iterations(%rip), %r14d
    00002c93: 	movq	%rax, start_time(%rip)
    00002c9a: 	testl	%r14d, %r14d
    00002c9d: 	jle	.Ltmp1305 # Offset: 11421
    00002ca3: 	movss	DATAat0x2b908(%rip), %xmm7
    00002cab: 	movss	DATAat0x2b900(%rip), %xmm6
    00002cb3: 	pxor	%xmm3, %xmm3
    00002cb7: 	xorl	%r13d, %r13d
    00002cba: 	movss	%xmm3, (%rsp)
    00002cbf: 	movss	%xmm7, 0x8(%rsp)
    00002cc5: 	movss	%xmm6, 0x38(%rsp)
    00002ccb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1309:
    00002cd0: 	movss	(%rsp), %xmm7
    00002cd5: 	movq	%rbp, %r15
    00002cd8: 	movss	%xmm7, 0x20(%rsp)
    00002cde: 	movss	%xmm7, 0x10(%rsp)
    00002ce4: 	nopl	(%rax) # Size: 4
.Ltmp1306:
    00002ce8: 	movss	0x4(%r15), %xmm1
    00002cee: 	movss	(%r15), %xmm0
    00002cf3: 	addq	$0x8, %r15
    00002cf7: 	movss	0x30(%rsp), %xmm3
    00002cfd: 	movss	0xc(%rsp), %xmm2
    00002d03: 	callq	__divsc3@PLT # Offset: 11523
    00002d08: 	movss	0x48(%rsp), %xmm2
    00002d0e: 	movss	0xc8(%rsp), %xmm3
    00002d17: 	movq	%xmm0, 0x268(%rsp)
    00002d20: 	movss	0x268(%rsp), %xmm0
    00002d29: 	movss	0x26c(%rsp), %xmm1
    00002d32: 	callq	__divsc3@PLT # Offset: 11570
    00002d37: 	movss	0x4c(%rsp), %xmm3
    00002d3d: 	movss	0x40(%rsp), %xmm2
    00002d43: 	movq	%xmm0, 0x260(%rsp)
    00002d4c: 	movss	0x260(%rsp), %xmm0
    00002d55: 	movss	0x264(%rsp), %xmm1
    00002d5e: 	callq	__divsc3@PLT # Offset: 11614
    00002d63: 	movss	0x44(%rsp), %xmm3
    00002d69: 	movss	0x3c(%rsp), %xmm2
    00002d6f: 	movq	%xmm0, 0x258(%rsp)
    00002d78: 	movss	0x258(%rsp), %xmm0
    00002d81: 	movss	0x25c(%rsp), %xmm1
    00002d8a: 	callq	__divsc3@PLT # Offset: 11658
    00002d8f: 	movss	0x10(%rsp), %xmm7
    00002d95: 	movq	%xmm0, 0x250(%rsp)
    00002d9e: 	addss	0x250(%rsp), %xmm7
    00002da7: 	movss	%xmm7, 0x10(%rsp)
    00002dad: 	movss	0x20(%rsp), %xmm7
    00002db3: 	addss	0x254(%rsp), %xmm7
    00002dbc: 	movss	%xmm7, 0x20(%rsp)
    00002dc2: 	cmpq	%rbx, %r15
    00002dc5: 	jne	.Ltmp1306 # Offset: 11717
    00002dcb: 	movss	0x30(%rsp), %xmm3
    00002dd1: 	movss	0xc(%rsp), %xmm2
    00002dd7: 	pxor	%xmm1, %xmm1
    00002ddb: 	pxor	%xmm0, %xmm0
    00002ddf: 	cvtsd2ss	init_value(%rip), %xmm0
    00002de7: 	callq	__divsc3@PLT # Offset: 11751
    00002dec: 	movss	0x48(%rsp), %xmm2
    00002df2: 	movss	0xc8(%rsp), %xmm3
    00002dfb: 	movq	%xmm0, 0x248(%rsp)
    00002e04: 	movss	0x248(%rsp), %xmm0
    00002e0d: 	movss	0x24c(%rsp), %xmm1
    00002e16: 	callq	__divsc3@PLT # Offset: 11798
    00002e1b: 	movss	0x4c(%rsp), %xmm3
    00002e21: 	movss	0x40(%rsp), %xmm2
    00002e27: 	movq	%xmm0, 0x240(%rsp)
    00002e30: 	movss	0x240(%rsp), %xmm0
    00002e39: 	movss	0x244(%rsp), %xmm1
    00002e42: 	callq	__divsc3@PLT # Offset: 11842
    00002e47: 	movss	0x44(%rsp), %xmm3
    00002e4d: 	movss	0x3c(%rsp), %xmm2
    00002e53: 	movq	%xmm0, 0x238(%rsp)
    00002e5c: 	movss	0x238(%rsp), %xmm0
    00002e65: 	movss	0x23c(%rsp), %xmm1
    00002e6e: 	callq	__divsc3@PLT # Offset: 11886
    00002e73: 	movss	0x38(%rsp), %xmm7
    00002e79: 	movss	(%rsp), %xmm3
    00002e7e: 	movq	%xmm0, 0x230(%rsp)
    00002e87: 	movss	0x230(%rsp), %xmm4
    00002e90: 	movss	0x234(%rsp), %xmm1
    00002e99: 	movaps	%xmm7, %xmm0
    00002e9c: 	movaps	%xmm3, %xmm2
    00002e9f: 	mulss	%xmm1, %xmm2
    00002ea3: 	mulss	%xmm4, %xmm0
    00002ea7: 	mulss	%xmm4, %xmm3
    00002eab: 	mulss	%xmm1, %xmm7
    00002eaf: 	subss	%xmm2, %xmm0
    00002eb3: 	movaps	%xmm3, %xmm2
    00002eb6: 	addss	%xmm7, %xmm2
    00002eba: 	ucomiss	%xmm2, %xmm0
    00002ebd: 	jp	.Ltmp1307 # Offset: 11965
.Ltmp1526:
    00002ec3: 	movss	0x10(%rsp), %xmm1
    00002ec9: 	subss	%xmm0, %xmm1
    00002ecd: 	movss	0x20(%rsp), %xmm0
    00002ed3: 	subss	%xmm2, %xmm0
    00002ed7: 	movss	%xmm1, 0x220(%rsp)
    00002ee0: 	movss	%xmm0, 0x224(%rsp)
    00002ee9: 	movq	0x220(%rsp), %xmm0
    00002ef2: 	callq	cabsf@PLT # Offset: 12018
    00002ef7: 	movss	0x8(%rsp), %xmm7
    00002efd: 	comiss	%xmm0, %xmm7
    00002f00: 	jbe	.Ltmp1308 # Offset: 12032
.Ltmp1430:
    00002f06: 	addl	$0x1, %r13d
    00002f0a: 	cmpl	%r14d, %r13d
    00002f0d: 	jl	.Ltmp1309 # Offset: 12045
.Ltmp1305:
    00002f13: 	movq	%r12, %rsi
    00002f16: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002f1d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12061
    00002f22: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002f29: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002f30: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002f37: 	je	.Ltmp1310 # Offset: 12087
.Ltmp1464:
    00002f3d: 	movq	-0x20(%rax), %r13
    00002f41: 	callq	clock@PLT # Offset: 12097
    00002f46: 	pxor	%xmm0, %xmm0
    00002f4a: 	movq	%rax, end_time(%rip)
    00002f51: 	movq	%r13, %rdi
    00002f54: 	subq	start_time(%rip), %rax
    00002f5b: 	cvtsi2sd	%rax, %xmm0
    00002f60: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002f68: 	callq	_Z13record_resultdPKc # Offset: 12136
    00002f6d: 	movq	0x4f0(%rsp), %rdi
    00002f75: 	cmpq	0x50(%rsp), %rdi
    00002f7a: 	je	.Ltmp1311 # Offset: 12154
    00002f7c: 	movq	0x500(%rsp), %rax
    00002f84: 	leaq	0x1(%rax), %rsi
    00002f88: 	callq	_ZdlPvm@PLT # Offset: 12168
.Ltmp1311:
    00002f8d: 	movq	0x58(%rsp), %rsi
    00002f92: 	leaq	DATAat0x2b439(%rip), %rdx
    00002f99: 	movq	%r12, %rdi
    00002f9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12188
    00002fa1: 	callq	clock@PLT # Offset: 12193
    00002fa6: 	movl	iterations(%rip), %r14d
    00002fad: 	movq	%rax, start_time(%rip)
    00002fb4: 	testl	%r14d, %r14d
    00002fb7: 	jle	.Ltmp1312 # Offset: 12215
    00002fbd: 	movss	0xc(%rsp), %xmm0
    00002fc3: 	movss	0x48(%rsp), %xmm2
    00002fc9: 	xorl	%r13d, %r13d
    00002fcc: 	leaq	DATAat0x2b1d0(%rip), %r15
    00002fd3: 	movss	0xc8(%rsp), %xmm3
    00002fdc: 	movss	0x30(%rsp), %xmm1
    00002fe2: 	callq	__divsc3@PLT # Offset: 12258
    00002fe7: 	movss	0x4c(%rsp), %xmm3
    00002fed: 	movss	0x40(%rsp), %xmm2
    00002ff3: 	movq	%xmm0, 0x218(%rsp)
    00002ffc: 	movss	0x218(%rsp), %xmm0
    00003005: 	movss	0x21c(%rsp), %xmm1
    0000300e: 	callq	__divsc3@PLT # Offset: 12302
    00003013: 	movss	0x44(%rsp), %xmm3
    00003019: 	movss	0x3c(%rsp), %xmm2
    0000301f: 	movq	%xmm0, 0x210(%rsp)
    00003028: 	movss	0x210(%rsp), %xmm0
    00003031: 	movss	0x214(%rsp), %xmm1
    0000303a: 	callq	__divsc3@PLT # Offset: 12346
    0000303f: 	pxor	%xmm7, %xmm7
    00003043: 	movq	%xmm0, 0x208(%rsp)
    0000304c: 	movaps	%xmm7, %xmm6
    0000304f: 	movss	0x20c(%rsp), %xmm0
    00003058: 	movss	0x208(%rsp), %xmm5
    00003061: 	movss	%xmm7, (%rsp)
    00003066: 	addss	%xmm0, %xmm6
    0000306a: 	movss	%xmm5, 0x10(%rsp)
    00003070: 	movss	%xmm6, 0x90(%rsp)
    00003079: 	movaps	%xmm6, %xmm3
    0000307c: 	mulss	%xmm7, %xmm3
    00003080: 	movss	DATAat0x2b900(%rip), %xmm7
    00003088: 	mulss	%xmm7, %xmm6
    0000308c: 	movss	%xmm7, 0x38(%rsp)
    00003092: 	movss	%xmm3, 0x20(%rsp)
    00003098: 	movss	DATAat0x2b908(%rip), %xmm3
    000030a0: 	movss	%xmm6, 0x60(%rsp)
    000030a6: 	movaps	%xmm5, %xmm6
    000030a9: 	movss	%xmm3, 0x8(%rsp)
    000030af: 	movaps	%xmm0, %xmm3
    000030b2: 	shufps	$0x0, %xmm6, %xmm6
    000030b6: 	shufps	$0x0, %xmm3, %xmm3
    000030ba: 	movaps	%xmm6, 0x70(%rsp)
    000030bf: 	movaps	%xmm3, 0x80(%rsp)
    000030c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1316:
    000030d0: 	movss	(%rsp), %xmm5
    000030d5: 	movaps	0x70(%rsp), %xmm2
    000030da: 	movq	%rbp, %rax
    000030dd: 	movaps	0x80(%rsp), %xmm3
    000030e5: 	movaps	%xmm5, %xmm4
    000030e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1313:
    000030f0: 	movaps	(%rax), %xmm0
    000030f3: 	addq	$0x20, %rax
    000030f7: 	movaps	%xmm0, %xmm1
    000030fa: 	shufps	$0x88, -0x10(%rax), %xmm1
    000030ff: 	addps	%xmm2, %xmm1
    00003102: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00003107: 	addps	%xmm3, %xmm0
    0000310a: 	addss	%xmm1, %xmm5
    0000310e: 	movaps	%xmm1, %xmm6
    00003111: 	shufps	$0x55, %xmm1, %xmm6
    00003115: 	addss	%xmm0, %xmm4
    00003119: 	addss	%xmm5, %xmm6
    0000311d: 	movaps	%xmm1, %xmm5
    00003120: 	unpckhps	%xmm1, %xmm5
    00003123: 	shufps	$0xff, %xmm1, %xmm1
    00003127: 	addss	%xmm6, %xmm5
    0000312b: 	addss	%xmm1, %xmm5
    0000312f: 	movaps	%xmm0, %xmm1
    00003132: 	shufps	$0x55, %xmm0, %xmm1
    00003136: 	addss	%xmm4, %xmm1
    0000313a: 	movaps	%xmm0, %xmm4
    0000313d: 	unpckhps	%xmm0, %xmm4
    00003140: 	shufps	$0xff, %xmm0, %xmm0
    00003144: 	addss	%xmm1, %xmm4
    00003148: 	addss	%xmm0, %xmm4
    0000314c: 	cmpq	%rbx, %rax
    0000314f: 	jne	.Ltmp1313 # Offset: 12623
    00003151: 	pxor	%xmm0, %xmm0
    00003155: 	movss	0x38(%rsp), %xmm2
    0000315b: 	movss	(%rsp), %xmm1
    00003160: 	cvtsd2ss	init_value(%rip), %xmm0
    00003168: 	addss	0x10(%rsp), %xmm0
    0000316e: 	mulss	%xmm0, %xmm2
    00003172: 	mulss	%xmm0, %xmm1
    00003176: 	subss	0x20(%rsp), %xmm2
    0000317c: 	addss	0x60(%rsp), %xmm1
    00003182: 	ucomiss	%xmm1, %xmm2
    00003185: 	jp	.Ltmp1314 # Offset: 12677
.Ltmp1527:
    0000318b: 	subss	%xmm2, %xmm5
    0000318f: 	subss	%xmm1, %xmm4
    00003193: 	movss	%xmm5, 0x1f8(%rsp)
    0000319c: 	movss	%xmm4, 0x1fc(%rsp)
    000031a5: 	movq	0x1f8(%rsp), %xmm0
    000031ae: 	callq	cabsf@PLT # Offset: 12718
    000031b3: 	movss	0x8(%rsp), %xmm6
    000031b9: 	comiss	%xmm0, %xmm6
    000031bc: 	jbe	.Ltmp1315 # Offset: 12732
.Ltmp1429:
    000031c2: 	addl	$0x1, %r13d
    000031c6: 	cmpl	%r14d, %r13d
    000031c9: 	jl	.Ltmp1316 # Offset: 12745
.Ltmp1312:
    000031cf: 	movq	%r12, %rsi
    000031d2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000031d9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12761
    000031de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000031e5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000031ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000031f3: 	je	.Ltmp1317 # Offset: 12787
.Ltmp1463:
    000031f9: 	movq	-0x20(%rax), %r13
    000031fd: 	callq	clock@PLT # Offset: 12797
    00003202: 	pxor	%xmm0, %xmm0
    00003206: 	movq	%rax, end_time(%rip)
    0000320d: 	movq	%r13, %rdi
    00003210: 	subq	start_time(%rip), %rax
    00003217: 	cvtsi2sd	%rax, %xmm0
    0000321c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003224: 	callq	_Z13record_resultdPKc # Offset: 12836
    00003229: 	movq	0x4f0(%rsp), %rdi
    00003231: 	cmpq	0x50(%rsp), %rdi
    00003236: 	je	.Ltmp1318 # Offset: 12854
    00003238: 	movq	0x500(%rsp), %rax
    00003240: 	leaq	0x1(%rax), %rsi
    00003244: 	callq	_ZdlPvm@PLT # Offset: 12868
.Ltmp1318:
    00003249: 	movq	0x58(%rsp), %rsi
    0000324e: 	leaq	DATAat0x2b455(%rip), %rdx
    00003255: 	movq	%r12, %rdi
    00003258: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12888
    0000325d: 	callq	clock@PLT # Offset: 12893
    00003262: 	movl	iterations(%rip), %r14d
    00003269: 	movq	%rax, start_time(%rip)
    00003270: 	testl	%r14d, %r14d
    00003273: 	jle	.Ltmp1319 # Offset: 12915
    00003279: 	movss	0x40(%rsp), %xmm7
    0000327f: 	movss	0x4c(%rsp), %xmm3
    00003285: 	xorl	%r13d, %r13d
    00003288: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000328f: 	movss	0xc8(%rsp), %xmm6
    00003298: 	movss	0x48(%rsp), %xmm5
    0000329e: 	movaps	%xmm7, %xmm0
    000032a1: 	mulss	%xmm5, %xmm0
    000032a5: 	movaps	%xmm6, %xmm1
    000032a8: 	mulss	%xmm3, %xmm1
    000032ac: 	mulss	%xmm5, %xmm3
    000032b0: 	mulss	%xmm6, %xmm7
    000032b4: 	movss	DATAat0x2b908(%rip), %xmm6
    000032bc: 	movss	%xmm6, 0x8(%rsp)
    000032c2: 	subss	%xmm1, %xmm0
    000032c6: 	movss	%xmm0, 0x10(%rsp)
    000032cc: 	movaps	%xmm3, %xmm0
    000032cf: 	movss	DATAat0x2b900(%rip), %xmm3
    000032d7: 	addss	%xmm7, %xmm0
    000032db: 	pxor	%xmm7, %xmm7
    000032df: 	movss	%xmm7, (%rsp)
    000032e4: 	movss	%xmm3, 0x38(%rsp)
    000032ea: 	movss	%xmm0, 0x20(%rsp)
.Ltmp1324:
    000032f0: 	movss	0x10(%rsp), %xmm0
    000032f6: 	movss	0x20(%rsp), %xmm1
    000032fc: 	ucomiss	%xmm1, %xmm0
    000032ff: 	jp	.Ltmp1320 # Offset: 13055
    00003305: 	movss	0x3c(%rsp), %xmm2
    0000330b: 	movss	0x44(%rsp), %xmm3
    00003311: 	callq	__divsc3@PLT # Offset: 13073
    00003316: 	movss	0xc(%rsp), %xmm2
    0000331c: 	movss	(%rsp), %xmm5
    00003321: 	movq	%rbp, %rax
    00003324: 	movq	%xmm0, 0x1f0(%rsp)
    0000332d: 	movss	0x30(%rsp), %xmm1
    00003333: 	subss	0x1f0(%rsp), %xmm2
    0000333c: 	subss	0x1f4(%rsp), %xmm1
    00003345: 	movaps	%xmm5, %xmm4
    00003348: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1321:
    00003350: 	movss	(%rax), %xmm0
    00003354: 	addq	$0x8, %rax
    00003358: 	addss	%xmm2, %xmm0
    0000335c: 	addss	%xmm0, %xmm5
    00003360: 	movss	-0x4(%rax), %xmm0
    00003365: 	addss	%xmm1, %xmm0
    00003369: 	addss	%xmm0, %xmm4
    0000336d: 	cmpq	%rbx, %rax
    00003370: 	jne	.Ltmp1321 # Offset: 13168
.Ltmp1503:
    00003372: 	movss	(%rsp), %xmm7
    00003377: 	pxor	%xmm0, %xmm0
    0000337b: 	movss	0x38(%rsp), %xmm6
    00003381: 	cvtsd2ss	init_value(%rip), %xmm0
    00003389: 	addss	%xmm2, %xmm0
    0000338d: 	addss	%xmm7, %xmm1
    00003391: 	movaps	%xmm6, %xmm3
    00003394: 	movaps	%xmm7, %xmm2
    00003397: 	mulss	%xmm0, %xmm3
    0000339b: 	mulss	%xmm1, %xmm2
    0000339f: 	mulss	%xmm0, %xmm7
    000033a3: 	mulss	%xmm1, %xmm6
    000033a7: 	subss	%xmm2, %xmm3
    000033ab: 	movaps	%xmm7, %xmm2
    000033ae: 	addss	%xmm6, %xmm2
    000033b2: 	ucomiss	%xmm2, %xmm3
    000033b5: 	jp	.Ltmp1322 # Offset: 13237
.Ltmp1501:
    000033bb: 	subss	%xmm3, %xmm5
    000033bf: 	subss	%xmm2, %xmm4
    000033c3: 	movss	%xmm5, 0x1d0(%rsp)
    000033cc: 	movss	%xmm4, 0x1d4(%rsp)
    000033d5: 	movq	0x1d0(%rsp), %xmm0
    000033de: 	callq	cabsf@PLT # Offset: 13278
    000033e3: 	movss	0x8(%rsp), %xmm3
    000033e9: 	comiss	%xmm0, %xmm3
    000033ec: 	jbe	.Ltmp1323 # Offset: 13292
.Ltmp1428:
    000033f2: 	addl	$0x1, %r13d
    000033f6: 	cmpl	%r14d, %r13d
    000033f9: 	jl	.Ltmp1324 # Offset: 13305
.Ltmp1319:
    000033ff: 	movq	%r12, %rsi
    00003402: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003409: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13321
    0000340e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003415: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000341c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003423: 	je	.Ltmp1325 # Offset: 13347
.Ltmp1462:
    00003429: 	movq	-0x20(%rax), %r13
    0000342d: 	callq	clock@PLT # Offset: 13357
    00003432: 	pxor	%xmm0, %xmm0
    00003436: 	movq	%rax, end_time(%rip)
    0000343d: 	movq	%r13, %rdi
    00003440: 	subq	start_time(%rip), %rax
    00003447: 	cvtsi2sd	%rax, %xmm0
    0000344c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003454: 	callq	_Z13record_resultdPKc # Offset: 13396
    00003459: 	movq	0x4f0(%rsp), %rdi
    00003461: 	cmpq	0x50(%rsp), %rdi
    00003466: 	je	.Ltmp1326 # Offset: 13414
    00003468: 	movq	0x500(%rsp), %rax
    00003470: 	leaq	0x1(%rax), %rsi
    00003474: 	callq	_ZdlPvm@PLT # Offset: 13428
.Ltmp1326:
    00003479: 	movq	0x58(%rsp), %rsi
    0000347e: 	leaq	DATAat0x2b46e(%rip), %rdx
    00003485: 	movq	%r12, %rdi
    00003488: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13448
    0000348d: 	callq	clock@PLT # Offset: 13453
    00003492: 	movl	iterations(%rip), %r14d
    00003499: 	movq	%rax, start_time(%rip)
    000034a0: 	testl	%r14d, %r14d
    000034a3: 	jle	.Ltmp1327 # Offset: 13475
    000034a9: 	movss	0x40(%rsp), %xmm6
    000034af: 	movss	0x4c(%rsp), %xmm3
    000034b5: 	xorl	%r13d, %r13d
    000034b8: 	leaq	DATAat0x2b1d0(%rip), %r15
    000034bf: 	movss	0xc8(%rsp), %xmm7
    000034c8: 	movss	0x48(%rsp), %xmm5
    000034ce: 	movaps	%xmm6, %xmm0
    000034d1: 	mulss	%xmm5, %xmm0
    000034d5: 	movaps	%xmm7, %xmm1
    000034d8: 	mulss	%xmm3, %xmm1
    000034dc: 	mulss	%xmm5, %xmm3
    000034e0: 	mulss	%xmm7, %xmm6
    000034e4: 	pxor	%xmm7, %xmm7
    000034e8: 	movss	%xmm7, (%rsp)
    000034ed: 	subss	%xmm1, %xmm0
    000034f1: 	movss	%xmm0, 0x10(%rsp)
    000034f7: 	movaps	%xmm3, %xmm0
    000034fa: 	movss	DATAat0x2b900(%rip), %xmm3
    00003502: 	addss	%xmm6, %xmm0
    00003506: 	movss	DATAat0x2b908(%rip), %xmm6
    0000350e: 	movss	%xmm3, 0x38(%rsp)
    00003514: 	movss	%xmm6, 0x8(%rsp)
    0000351a: 	movss	%xmm0, 0x20(%rsp)
.Ltmp1332:
    00003520: 	movss	0x10(%rsp), %xmm0
    00003526: 	movss	0x20(%rsp), %xmm1
    0000352c: 	ucomiss	%xmm1, %xmm0
    0000352f: 	jp	.Ltmp1328 # Offset: 13615
    00003535: 	movss	0x44(%rsp), %xmm3
    0000353b: 	movss	0x3c(%rsp), %xmm2
    00003541: 	callq	__divsc3@PLT # Offset: 13633
    00003546: 	movss	(%rsp), %xmm5
    0000354b: 	movss	0x30(%rsp), %xmm7
    00003551: 	movq	%rbp, %rax
    00003554: 	movq	%xmm0, 0x1c8(%rsp)
    0000355d: 	movss	0xc(%rsp), %xmm8
    00003564: 	movss	0x1c8(%rsp), %xmm2
    0000356d: 	movss	0x1cc(%rsp), %xmm1
    00003576: 	movaps	%xmm5, %xmm4
    00003579: 	movaps	%xmm2, %xmm6
    0000357c: 	movaps	%xmm1, %xmm3
    0000357f: 	nop # Size: 1
.Ltmp1329:
    00003580: 	movss	(%rax), %xmm0
    00003584: 	addq	$0x8, %rax
    00003588: 	addss	%xmm8, %xmm0
    0000358d: 	subss	%xmm2, %xmm0
    00003591: 	addss	%xmm0, %xmm5
    00003595: 	movss	-0x4(%rax), %xmm0
    0000359a: 	addss	%xmm7, %xmm0
    0000359e: 	subss	%xmm1, %xmm0
    000035a2: 	addss	%xmm0, %xmm4
    000035a6: 	cmpq	%rbx, %rax
    000035a9: 	jne	.Ltmp1329 # Offset: 13737
.Ltmp1516:
    000035ab: 	movss	(%rsp), %xmm7
    000035b0: 	movss	0x30(%rsp), %xmm1
    000035b6: 	pxor	%xmm0, %xmm0
    000035ba: 	cvtsd2ss	init_value(%rip), %xmm0
    000035c2: 	addss	0xc(%rsp), %xmm0
    000035c8: 	addss	%xmm7, %xmm1
    000035cc: 	movaps	%xmm7, %xmm2
    000035cf: 	subss	%xmm6, %xmm0
    000035d3: 	movss	0x38(%rsp), %xmm6
    000035d9: 	subss	%xmm3, %xmm1
    000035dd: 	movaps	%xmm6, %xmm3
    000035e0: 	mulss	%xmm0, %xmm3
    000035e4: 	mulss	%xmm1, %xmm2
    000035e8: 	mulss	%xmm0, %xmm7
    000035ec: 	mulss	%xmm1, %xmm6
    000035f0: 	subss	%xmm2, %xmm3
    000035f4: 	movaps	%xmm7, %xmm2
    000035f7: 	addss	%xmm6, %xmm2
    000035fb: 	ucomiss	%xmm2, %xmm3
    000035fe: 	jp	.Ltmp1330 # Offset: 13822
.Ltmp1514:
    00003604: 	subss	%xmm3, %xmm5
    00003608: 	subss	%xmm2, %xmm4
    0000360c: 	movss	%xmm5, 0x1a8(%rsp)
    00003615: 	movss	%xmm4, 0x1ac(%rsp)
    0000361e: 	movq	0x1a8(%rsp), %xmm0
    00003627: 	callq	cabsf@PLT # Offset: 13863
    0000362c: 	movss	0x8(%rsp), %xmm6
    00003632: 	comiss	%xmm0, %xmm6
    00003635: 	jbe	.Ltmp1331 # Offset: 13877
.Ltmp1427:
    0000363b: 	addl	$0x1, %r13d
    0000363f: 	cmpl	%r14d, %r13d
    00003642: 	jl	.Ltmp1332 # Offset: 13890
.Ltmp1327:
    00003648: 	movq	%r12, %rsi
    0000364b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003652: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13906
    00003657: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000365e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003665: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000366c: 	je	.Ltmp1333 # Offset: 13932
.Ltmp1461:
    00003672: 	movq	-0x20(%rax), %r13
    00003676: 	callq	clock@PLT # Offset: 13942
    0000367b: 	pxor	%xmm0, %xmm0
    0000367f: 	movq	%rax, end_time(%rip)
    00003686: 	movq	%r13, %rdi
    00003689: 	subq	start_time(%rip), %rax
    00003690: 	cvtsi2sd	%rax, %xmm0
    00003695: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000369d: 	callq	_Z13record_resultdPKc # Offset: 13981
    000036a2: 	movq	0x4f0(%rsp), %rdi
    000036aa: 	cmpq	0x50(%rsp), %rdi
    000036af: 	je	.Ltmp1334 # Offset: 13999
    000036b1: 	movq	0x500(%rsp), %rax
    000036b9: 	leaq	0x1(%rax), %rsi
    000036bd: 	callq	_ZdlPvm@PLT # Offset: 14013
.Ltmp1334:
    000036c2: 	movq	0x58(%rsp), %r15
    000036c7: 	leaq	0x490(%rsp), %rdi
    000036cf: 	leaq	DATAat0x2b488(%rip), %rdx
    000036d6: 	movq	%r15, %rsi
    000036d9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14041
    000036de: 	movl	iterations(%rip), %edx
    000036e4: 	xorl	%r8d, %r8d
    000036e7: 	xorl	%ecx, %ecx
    000036e9: 	movl	$0x1f40, %esi
    000036ee: 	movq	0x490(%rsp), %rdi
    000036f6: 	callq	_Z9summarizePKciiii # Offset: 14070
    000036fb: 	leaq	DATAat0x2b499(%rip), %rdx
    00003702: 	movq	%r15, %rsi
    00003705: 	movq	%r12, %rdi
    00003708: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14088
    0000370d: 	callq	clock@PLT # Offset: 14093
    00003712: 	movl	iterations(%rip), %r15d
    00003719: 	movq	%rax, start_time(%rip)
    00003720: 	testl	%r15d, %r15d
    00003723: 	jle	.Ltmp1335 # Offset: 14115
    00003729: 	leaq	0x518(%rsp), %rax
    00003731: 	movss	DATAat0x2b908(%rip), %xmm7
    00003739: 	xorl	%r14d, %r14d
    0000373c: 	leaq	0xf9e8(%rbp), %r13
    00003743: 	movq	%rax, (%rsp)
    00003747: 	movss	%xmm7, 0x8(%rsp)
    0000374d: 	nopl	(%rax) # Size: 3
.Ltmp1338:
    00003750: 	movq	0x518(%rsp), %xmm0
    00003759: 	movq	(%rsp), %rax
    0000375d: 	movq	0x510(%rsp), %xmm1
    00003766: 	subps	%xmm0, %xmm1
    00003769: 	xorps	%xmm0, %xmm0
    0000376c: 	addps	%xmm0, %xmm1
    0000376f: 	movaps	%xmm1, %xmm4
    00003772: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1336:
    00003778: 	movups	(%rax), %xmm3
    0000377b: 	movaps	-0x8(%rax), %xmm2
    0000377f: 	addq	$0x20, %rax
    00003783: 	movups	-0x10(%rax), %xmm7
    00003787: 	movaps	%xmm3, %xmm1
    0000378a: 	movaps	%xmm2, %xmm0
    0000378d: 	shufps	$0x88, -0x18(%rax), %xmm0
    00003792: 	shufps	$0xdd, -0x18(%rax), %xmm2
    00003797: 	shufps	$0x88, %xmm7, %xmm1
    0000379b: 	subps	%xmm1, %xmm0
    0000379e: 	shufps	$0xdd, %xmm7, %xmm3
    000037a2: 	subps	%xmm3, %xmm2
    000037a5: 	movaps	%xmm0, %xmm1
    000037a8: 	movaps	%xmm0, %xmm3
    000037ab: 	unpcklps	%xmm2, %xmm1
    000037ae: 	shufps	$0x55, %xmm0, %xmm3
    000037b2: 	unpckhps	%xmm2, %xmm0
    000037b5: 	addps	%xmm4, %xmm1
    000037b8: 	movaps	%xmm2, %xmm4
    000037bb: 	shufps	$0x55, %xmm2, %xmm4
    000037bf: 	unpcklps	%xmm4, %xmm3
    000037c2: 	movaps	%xmm0, %xmm2
    000037c5: 	shufps	$0xd4, %xmm0, %xmm2
    000037c9: 	shufps	$0xde, %xmm0, %xmm0
    000037cd: 	movdqa	%xmm0, %xmm4
    000037d1: 	addps	%xmm3, %xmm1
    000037d4: 	addps	%xmm2, %xmm1
    000037d7: 	addps	%xmm1, %xmm4
    000037da: 	cmpq	%rax, %r13
    000037dd: 	jne	.Ltmp1336 # Offset: 14301
    000037df: 	movq	0xfef8(%rsp), %xmm2
    000037e8: 	movaps	%xmm4, %xmm1
    000037eb: 	movq	0xfef0(%rsp), %xmm0
    000037f4: 	subps	%xmm2, %xmm0
    000037f7: 	addps	%xmm0, %xmm1
    000037fa: 	movq	0xff00(%rsp), %xmm0
    00003803: 	subps	%xmm0, %xmm2
    00003806: 	addps	%xmm1, %xmm2
    00003809: 	movq	0xff08(%rsp), %xmm1
    00003812: 	subps	%xmm1, %xmm0
    00003815: 	addps	%xmm2, %xmm0
    00003818: 	movss	%xmm0, 0x1a0(%rsp)
    00003821: 	shufps	$0xe5, %xmm0, %xmm0
    00003825: 	movss	%xmm0, 0x1a4(%rsp)
    0000382e: 	movq	0x1a0(%rsp), %xmm0
    00003837: 	callq	cabsf@PLT # Offset: 14391
    0000383c: 	movss	0x8(%rsp), %xmm3
    00003842: 	comiss	%xmm0, %xmm3
    00003845: 	jbe	.Ltmp1337 # Offset: 14405
.Ltmp1426:
    0000384b: 	addl	$0x1, %r14d
    0000384f: 	cmpl	%r15d, %r14d
    00003852: 	jl	.Ltmp1338 # Offset: 14418
.Ltmp1335:
    00003858: 	movq	%r12, %rsi
    0000385b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003862: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14434
    00003867: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000386e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003875: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000387c: 	je	.Ltmp1339 # Offset: 14460
.Ltmp1460:
    00003882: 	movq	-0x20(%rax), %r13
    00003886: 	callq	clock@PLT # Offset: 14470
    0000388b: 	pxor	%xmm0, %xmm0
    0000388f: 	movq	%rax, end_time(%rip)
    00003896: 	movq	%r13, %rdi
    00003899: 	subq	start_time(%rip), %rax
    000038a0: 	cvtsi2sd	%rax, %xmm0
    000038a5: 	divsd	DATAat0x2b628(%rip), %xmm0
    000038ad: 	callq	_Z13record_resultdPKc # Offset: 14509
    000038b2: 	movq	0x4f0(%rsp), %rdi
    000038ba: 	cmpq	0x50(%rsp), %rdi
    000038bf: 	je	.Ltmp1340 # Offset: 14527
    000038c1: 	movq	0x500(%rsp), %rax
    000038c9: 	leaq	0x1(%rax), %rsi
    000038cd: 	callq	_ZdlPvm@PLT # Offset: 14541
.Ltmp1340:
    000038d2: 	movq	0x58(%rsp), %rsi
    000038d7: 	leaq	DATAat0x2b4a2(%rip), %rdx
    000038de: 	movq	%r12, %rdi
    000038e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14561
    000038e6: 	movss	0xc(%rsp), %xmm6
    000038ec: 	movq	%r12, %rdx
    000038ef: 	movl	$0x1f40, %esi
    000038f4: 	movq	%rbp, %rdi
    000038f7: 	movss	0x30(%rsp), %xmm3
    000038fd: 	movss	%xmm6, 0x198(%rsp)
    00003906: 	movss	%xmm3, 0x19c(%rsp)
    0000390f: 	movq	0x198(%rsp), %xmm0
    00003918: 	callq	_Z16test_CSE_halfoptISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14616
    0000391d: 	movq	0x4f0(%rsp), %rdi
    00003925: 	cmpq	0x50(%rsp), %rdi
    0000392a: 	je	.Ltmp1341 # Offset: 14634
    0000392c: 	movq	0x500(%rsp), %rax
    00003934: 	leaq	0x1(%rax), %rsi
    00003938: 	callq	_ZdlPvm@PLT # Offset: 14648
.Ltmp1341:
    0000393d: 	leaq	DATAat0x2b4b0(%rip), %r13
    00003944: 	movq	0x58(%rsp), %rsi
    00003949: 	movq	%r12, %rdi
    0000394c: 	movq	%r13, %rdx
    0000394f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14671
    00003954: 	movss	0xc(%rsp), %xmm7
    0000395a: 	movq	%r12, %rdx
    0000395d: 	movl	$0x1f40, %esi
    00003962: 	movq	%rbp, %rdi
    00003965: 	movss	0x30(%rsp), %xmm6
    0000396b: 	movss	%xmm7, 0x190(%rsp)
    00003974: 	movss	%xmm6, 0x194(%rsp)
    0000397d: 	movq	0x190(%rsp), %xmm0
    00003986: 	callq	_Z8test_CSEISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14726
    0000398b: 	movq	0x4f0(%rsp), %rdi
    00003993: 	cmpq	0x50(%rsp), %rdi
    00003998: 	je	.Ltmp1342 # Offset: 14744
    0000399a: 	movq	0x500(%rsp), %rax
    000039a2: 	leaq	0x1(%rax), %rsi
    000039a6: 	callq	_ZdlPvm@PLT # Offset: 14758
.Ltmp1342:
    000039ab: 	movq	0x58(%rsp), %rsi
    000039b0: 	leaq	DATAat0x2b4b5(%rip), %rdx
    000039b7: 	movq	%r12, %rdi
    000039ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14778
    000039bf: 	movss	0xc(%rsp), %xmm3
    000039c5: 	movq	%r12, %rdx
    000039c8: 	movl	$0x1f40, %esi
    000039cd: 	movq	%rbp, %rdi
    000039d0: 	movss	0x30(%rsp), %xmm7
    000039d6: 	movss	%xmm3, 0x188(%rsp)
    000039df: 	movss	%xmm7, 0x18c(%rsp)
    000039e8: 	movq	0x188(%rsp), %xmm0
    000039f1: 	callq	_Z9test_CSE2ISt7complexIfE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14833
    000039f6: 	movq	0x4f0(%rsp), %rdi
    000039fe: 	cmpq	0x50(%rsp), %rdi
    00003a03: 	je	.Ltmp1343 # Offset: 14851
    00003a05: 	movq	0x500(%rsp), %rax
    00003a0d: 	leaq	0x1(%rax), %rsi
    00003a11: 	callq	_ZdlPvm@PLT # Offset: 14865
.Ltmp1343:
    00003a16: 	movq	0x58(%rsp), %r15
    00003a1b: 	leaq	0x4b0(%rsp), %rdi
    00003a23: 	movq	%r13, %rdx
    00003a26: 	movq	%r15, %rsi
    00003a29: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14889
    00003a2e: 	movl	iterations(%rip), %edx
    00003a34: 	xorl	%r8d, %r8d
    00003a37: 	xorl	%ecx, %ecx
    00003a39: 	movl	$0x1f40, %esi
    00003a3e: 	movq	0x4b0(%rsp), %rdi
    00003a46: 	callq	_Z9summarizePKciiii # Offset: 14918
    00003a4b: 	leaq	DATAat0x2b4bc(%rip), %rdx
    00003a52: 	movq	%r15, %rsi
    00003a55: 	movq	%r12, %rdi
    00003a58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14936
    00003a5d: 	callq	clock@PLT # Offset: 14941
    00003a62: 	movl	iterations(%rip), %r14d
    00003a69: 	movq	%rax, start_time(%rip)
    00003a70: 	testl	%r14d, %r14d
    00003a73: 	jle	.Ltmp1344 # Offset: 14963
    00003a79: 	movss	DATAat0x2b908(%rip), %xmm3
    00003a81: 	movss	DATAat0x2b900(%rip), %xmm7
    00003a89: 	pxor	%xmm6, %xmm6
    00003a8d: 	xorl	%r13d, %r13d
    00003a90: 	movss	%xmm6, (%rsp)
    00003a95: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003a9c: 	movss	%xmm3, 0x8(%rsp)
    00003aa2: 	movss	%xmm7, 0x38(%rsp)
    00003aa8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1348:
    00003ab0: 	movss	(%rsp), %xmm5
    00003ab5: 	movq	%rbp, %rax
    00003ab8: 	movaps	%xmm5, %xmm4
    00003abb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1345:
    00003ac0: 	movaps	(%rax), %xmm0
    00003ac3: 	movaps	0x10(%rax), %xmm1
    00003ac7: 	addq	$0x20, %rax
    00003acb: 	addss	%xmm0, %xmm5
    00003acf: 	movaps	%xmm0, %xmm2
    00003ad2: 	unpckhps	%xmm0, %xmm2
    00003ad5: 	addss	%xmm5, %xmm2
    00003ad9: 	movaps	%xmm1, %xmm5
    00003adc: 	addss	%xmm2, %xmm5
    00003ae0: 	movaps	%xmm1, %xmm2
    00003ae3: 	unpckhps	%xmm1, %xmm2
    00003ae6: 	addss	%xmm2, %xmm5
    00003aea: 	movaps	%xmm0, %xmm2
    00003aed: 	shufps	$0x55, %xmm0, %xmm2
    00003af1: 	addss	%xmm2, %xmm4
    00003af5: 	shufps	$0xff, %xmm0, %xmm0
    00003af9: 	addss	%xmm4, %xmm0
    00003afd: 	movaps	%xmm1, %xmm4
    00003b00: 	shufps	$0x55, %xmm1, %xmm4
    00003b04: 	shufps	$0xff, %xmm1, %xmm1
    00003b08: 	addss	%xmm0, %xmm4
    00003b0c: 	addss	%xmm1, %xmm4
    00003b10: 	cmpq	%rbx, %rax
    00003b13: 	jne	.Ltmp1345 # Offset: 15123
    00003b15: 	movss	(%rsp), %xmm7
    00003b1a: 	pxor	%xmm6, %xmm6
    00003b1e: 	movss	0x38(%rsp), %xmm1
    00003b24: 	cvtsd2ss	init_value(%rip), %xmm6
    00003b2c: 	mulss	%xmm6, %xmm1
    00003b30: 	movaps	%xmm7, %xmm0
    00003b33: 	mulss	%xmm6, %xmm0
    00003b37: 	addss	%xmm7, %xmm0
    00003b3b: 	ucomiss	%xmm0, %xmm1
    00003b3e: 	jp	.Ltmp1346 # Offset: 15166
.Ltmp1521:
    00003b44: 	subss	%xmm0, %xmm4
    00003b48: 	subss	%xmm1, %xmm5
    00003b4c: 	movss	%xmm4, 0x17c(%rsp)
    00003b55: 	movss	%xmm5, 0x178(%rsp)
    00003b5e: 	movq	0x178(%rsp), %xmm0
    00003b67: 	callq	cabsf@PLT # Offset: 15207
    00003b6c: 	movss	0x8(%rsp), %xmm7
    00003b72: 	comiss	%xmm0, %xmm7
    00003b75: 	jbe	.Ltmp1347 # Offset: 15221
.Ltmp1425:
    00003b7b: 	addl	$0x1, %r13d
    00003b7f: 	cmpl	%r14d, %r13d
    00003b82: 	jl	.Ltmp1348 # Offset: 15234
.Ltmp1344:
    00003b88: 	movq	%r12, %rsi
    00003b8b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003b92: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15250
    00003b97: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003b9e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003ba5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003bac: 	je	.Ltmp1349 # Offset: 15276
.Ltmp1459:
    00003bb2: 	movq	-0x20(%rax), %r13
    00003bb6: 	callq	clock@PLT # Offset: 15286
    00003bbb: 	pxor	%xmm0, %xmm0
    00003bbf: 	movq	%rax, end_time(%rip)
    00003bc6: 	movq	%r13, %rdi
    00003bc9: 	subq	start_time(%rip), %rax
    00003bd0: 	cvtsi2sd	%rax, %xmm0
    00003bd5: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003bdd: 	callq	_Z13record_resultdPKc # Offset: 15325
    00003be2: 	movq	0x4f0(%rsp), %rdi
    00003bea: 	cmpq	0x50(%rsp), %rdi
    00003bef: 	je	.Ltmp1350 # Offset: 15343
    00003bf1: 	movq	0x500(%rsp), %rax
    00003bf9: 	leaq	0x1(%rax), %rsi
    00003bfd: 	callq	_ZdlPvm@PLT # Offset: 15357
.Ltmp1350:
    00003c02: 	movq	0x58(%rsp), %rsi
    00003c07: 	leaq	DATAat0x2b4c2(%rip), %rdx
    00003c0e: 	movq	%r12, %rdi
    00003c11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15377
    00003c16: 	callq	clock@PLT # Offset: 15382
    00003c1b: 	movl	iterations(%rip), %r14d
    00003c22: 	movq	%rax, start_time(%rip)
    00003c29: 	testl	%r14d, %r14d
    00003c2c: 	jle	.Ltmp1351 # Offset: 15404
    00003c32: 	movss	DATAat0x2b908(%rip), %xmm3
    00003c3a: 	movss	DATAat0x2b900(%rip), %xmm7
    00003c42: 	pxor	%xmm6, %xmm6
    00003c46: 	xorl	%r13d, %r13d
    00003c49: 	movss	%xmm6, (%rsp)
    00003c4e: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003c55: 	movss	%xmm3, 0x8(%rsp)
    00003c5b: 	movss	%xmm7, 0x38(%rsp)
    00003c61: 	nopl	(%rax) # Size: 7
.Ltmp1355:
    00003c68: 	movss	(%rsp), %xmm5
    00003c6d: 	movq	%rbp, %rax
    00003c70: 	movaps	%xmm5, %xmm4
    00003c73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1352:
    00003c78: 	movaps	(%rax), %xmm0
    00003c7b: 	pxor	%xmm7, %xmm7
    00003c7f: 	addq	$0x20, %rax
    00003c83: 	movaps	%xmm0, %xmm1
    00003c86: 	shufps	$0x88, -0x10(%rax), %xmm1
    00003c8b: 	addps	%xmm7, %xmm1
    00003c8e: 	shufps	$0xdd, -0x10(%rax), %xmm0
    00003c93: 	addps	%xmm7, %xmm0
    00003c96: 	movaps	%xmm1, %xmm3
    00003c99: 	movaps	%xmm1, %xmm2
    00003c9c: 	addss	%xmm5, %xmm3
    00003ca0: 	shufps	$0x55, %xmm1, %xmm2
    00003ca4: 	movaps	%xmm1, %xmm5
    00003ca7: 	unpckhps	%xmm1, %xmm5
    00003caa: 	shufps	$0xff, %xmm1, %xmm1
    00003cae: 	addss	%xmm3, %xmm2
    00003cb2: 	addss	%xmm2, %xmm5
    00003cb6: 	movaps	%xmm0, %xmm2
    00003cb9: 	addss	%xmm4, %xmm2
    00003cbd: 	movaps	%xmm0, %xmm4
    00003cc0: 	unpckhps	%xmm0, %xmm4
    00003cc3: 	addss	%xmm1, %xmm5
    00003cc7: 	movaps	%xmm0, %xmm1
    00003cca: 	shufps	$0x55, %xmm0, %xmm1
    00003cce: 	addss	%xmm2, %xmm1
    00003cd2: 	shufps	$0xff, %xmm0, %xmm0
    00003cd6: 	addss	%xmm1, %xmm4
    00003cda: 	addss	%xmm0, %xmm4
    00003cde: 	cmpq	%rbx, %rax
    00003ce1: 	jne	.Ltmp1352 # Offset: 15585
    00003ce3: 	movss	(%rsp), %xmm7
    00003ce8: 	pxor	%xmm0, %xmm0
    00003cec: 	movss	0x38(%rsp), %xmm2
    00003cf2: 	cvtsd2ss	init_value(%rip), %xmm0
    00003cfa: 	addss	%xmm7, %xmm0
    00003cfe: 	movaps	%xmm7, %xmm1
    00003d01: 	mulss	%xmm0, %xmm1
    00003d05: 	mulss	%xmm0, %xmm2
    00003d09: 	addss	%xmm7, %xmm1
    00003d0d: 	ucomiss	%xmm1, %xmm2
    00003d10: 	jp	.Ltmp1353 # Offset: 15632
.Ltmp1523:
    00003d16: 	subss	%xmm2, %xmm5
    00003d1a: 	subss	%xmm1, %xmm4
    00003d1e: 	movss	%xmm5, 0x168(%rsp)
    00003d27: 	movss	%xmm4, 0x16c(%rsp)
    00003d30: 	movq	0x168(%rsp), %xmm0
    00003d39: 	callq	cabsf@PLT # Offset: 15673
    00003d3e: 	movss	0x8(%rsp), %xmm6
    00003d44: 	comiss	%xmm0, %xmm6
    00003d47: 	jbe	.Ltmp1354 # Offset: 15687
.Ltmp1424:
    00003d4d: 	addl	$0x1, %r13d
    00003d51: 	cmpl	%r14d, %r13d
    00003d54: 	jl	.Ltmp1355 # Offset: 15700
.Ltmp1351:
    00003d5a: 	movq	%r12, %rsi
    00003d5d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d64: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15716
    00003d69: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003d70: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003d77: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003d7e: 	je	.Ltmp1356 # Offset: 15742
.Ltmp1458:
    00003d84: 	movq	-0x20(%rax), %r13
    00003d88: 	callq	clock@PLT # Offset: 15752
    00003d8d: 	pxor	%xmm0, %xmm0
    00003d91: 	movq	%rax, end_time(%rip)
    00003d98: 	movq	%r13, %rdi
    00003d9b: 	subq	start_time(%rip), %rax
    00003da2: 	cvtsi2sd	%rax, %xmm0
    00003da7: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003daf: 	callq	_Z13record_resultdPKc # Offset: 15791
    00003db4: 	movq	0x4f0(%rsp), %rdi
    00003dbc: 	cmpq	0x50(%rsp), %rdi
    00003dc1: 	je	.Ltmp1357 # Offset: 15809
    00003dc3: 	movq	0x500(%rsp), %rax
    00003dcb: 	leaq	0x1(%rax), %rsi
    00003dcf: 	callq	_ZdlPvm@PLT # Offset: 15823
.Ltmp1357:
    00003dd4: 	movq	0x58(%rsp), %rsi
    00003dd9: 	leaq	DATAat0x2b4cc(%rip), %rdx
    00003de0: 	movq	%r12, %rdi
    00003de3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15843
    00003de8: 	callq	clock@PLT # Offset: 15848
    00003ded: 	movl	iterations(%rip), %r14d
    00003df4: 	movq	%rax, start_time(%rip)
    00003dfb: 	testl	%r14d, %r14d
    00003dfe: 	jle	.Ltmp1358 # Offset: 15870
    00003e04: 	movss	DATAat0x2b908(%rip), %xmm3
    00003e0c: 	movss	DATAat0x2b900(%rip), %xmm7
    00003e14: 	pxor	%xmm6, %xmm6
    00003e18: 	xorl	%r13d, %r13d
    00003e1b: 	movss	%xmm6, (%rsp)
    00003e20: 	leaq	DATAat0x2b1d0(%rip), %r15
    00003e27: 	movss	%xmm3, 0x8(%rsp)
    00003e2d: 	movss	%xmm7, 0x38(%rsp)
    00003e33: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1362:
    00003e38: 	movss	(%rsp), %xmm5
    00003e3d: 	movq	%rbp, %rax
    00003e40: 	movaps	%xmm5, %xmm4
    00003e43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1359:
    00003e48: 	movaps	(%rax), %xmm0
    00003e4b: 	movaps	0x10(%rax), %xmm1
    00003e4f: 	addq	$0x20, %rax
    00003e53: 	addss	%xmm0, %xmm5
    00003e57: 	movaps	%xmm0, %xmm2
    00003e5a: 	unpckhps	%xmm0, %xmm2
    00003e5d: 	addss	%xmm5, %xmm2
    00003e61: 	movaps	%xmm1, %xmm5
    00003e64: 	addss	%xmm2, %xmm5
    00003e68: 	movaps	%xmm1, %xmm2
    00003e6b: 	unpckhps	%xmm1, %xmm2
    00003e6e: 	addss	%xmm2, %xmm5
    00003e72: 	movaps	%xmm0, %xmm2
    00003e75: 	shufps	$0x55, %xmm0, %xmm2
    00003e79: 	addss	%xmm2, %xmm4
    00003e7d: 	shufps	$0xff, %xmm0, %xmm0
    00003e81: 	addss	%xmm4, %xmm0
    00003e85: 	movaps	%xmm1, %xmm4
    00003e88: 	shufps	$0x55, %xmm1, %xmm4
    00003e8c: 	shufps	$0xff, %xmm1, %xmm1
    00003e90: 	addss	%xmm0, %xmm4
    00003e94: 	addss	%xmm1, %xmm4
    00003e98: 	cmpq	%rbx, %rax
    00003e9b: 	jne	.Ltmp1359 # Offset: 16027
    00003e9d: 	movss	(%rsp), %xmm7
    00003ea2: 	pxor	%xmm6, %xmm6
    00003ea6: 	movss	0x38(%rsp), %xmm1
    00003eac: 	cvtsd2ss	init_value(%rip), %xmm6
    00003eb4: 	mulss	%xmm6, %xmm1
    00003eb8: 	movaps	%xmm7, %xmm0
    00003ebb: 	mulss	%xmm6, %xmm0
    00003ebf: 	addss	%xmm7, %xmm0
    00003ec3: 	ucomiss	%xmm0, %xmm1
    00003ec6: 	jp	.Ltmp1360 # Offset: 16070
.Ltmp1520:
    00003ecc: 	subss	%xmm0, %xmm4
    00003ed0: 	subss	%xmm1, %xmm5
    00003ed4: 	movss	%xmm4, 0x15c(%rsp)
    00003edd: 	movss	%xmm5, 0x158(%rsp)
    00003ee6: 	movq	0x158(%rsp), %xmm0
    00003eef: 	callq	cabsf@PLT # Offset: 16111
    00003ef4: 	movss	0x8(%rsp), %xmm3
    00003efa: 	comiss	%xmm0, %xmm3
    00003efd: 	jbe	.Ltmp1361 # Offset: 16125
.Ltmp1423:
    00003f03: 	addl	$0x1, %r13d
    00003f07: 	cmpl	%r14d, %r13d
    00003f0a: 	jl	.Ltmp1362 # Offset: 16138
.Ltmp1358:
    00003f10: 	movq	%r12, %rsi
    00003f13: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003f1a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16154
    00003f1f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003f26: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003f2d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003f34: 	je	.Ltmp1363 # Offset: 16180
.Ltmp1457:
    00003f3a: 	movq	-0x20(%rax), %r13
    00003f3e: 	callq	clock@PLT # Offset: 16190
    00003f43: 	pxor	%xmm0, %xmm0
    00003f47: 	movq	%rax, end_time(%rip)
    00003f4e: 	movq	%r13, %rdi
    00003f51: 	subq	start_time(%rip), %rax
    00003f58: 	cvtsi2sd	%rax, %xmm0
    00003f5d: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003f65: 	callq	_Z13record_resultdPKc # Offset: 16229
    00003f6a: 	movq	0x4f0(%rsp), %rdi
    00003f72: 	cmpq	0x50(%rsp), %rdi
    00003f77: 	je	.Ltmp1364 # Offset: 16247
    00003f79: 	movq	0x500(%rsp), %rax
    00003f81: 	leaq	0x1(%rax), %rsi
    00003f85: 	callq	_ZdlPvm@PLT # Offset: 16261
.Ltmp1364:
    00003f8a: 	movq	0x58(%rsp), %rsi
    00003f8f: 	leaq	DATAat0x2b4db(%rip), %rdx
    00003f96: 	movq	%r12, %rdi
    00003f99: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16281
    00003f9e: 	movq	%r12, %rdx
    00003fa1: 	movl	$0x1f40, %esi
    00003fa6: 	movq	%rbp, %rdi
    00003fa9: 	callq	_Z13test_constantISt7complexIfE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16297
    00003fae: 	movq	0x4f0(%rsp), %rdi
    00003fb6: 	cmpq	0x50(%rsp), %rdi
    00003fbb: 	je	.Ltmp1365 # Offset: 16315
    00003fbd: 	movq	0x500(%rsp), %rax
    00003fc5: 	leaq	0x1(%rax), %rsi
    00003fc9: 	callq	_ZdlPvm@PLT # Offset: 16329
.Ltmp1365:
    00003fce: 	movq	0x58(%rsp), %rsi
    00003fd3: 	leaq	DATAat0x2b4e3(%rip), %rdx
    00003fda: 	movq	%r12, %rdi
    00003fdd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16349
    00003fe2: 	callq	clock@PLT # Offset: 16354
    00003fe7: 	movl	iterations(%rip), %r14d
    00003fee: 	movq	%rax, start_time(%rip)
    00003ff5: 	testl	%r14d, %r14d
    00003ff8: 	jle	.Ltmp1366 # Offset: 16376
    00003ffe: 	movss	DATAat0x2b908(%rip), %xmm3
    00004006: 	movss	DATAat0x2b900(%rip), %xmm7
    0000400e: 	pxor	%xmm6, %xmm6
    00004012: 	xorl	%r13d, %r13d
    00004015: 	movss	%xmm6, (%rsp)
    0000401a: 	leaq	DATAat0x2b1d0(%rip), %r15
    00004021: 	movss	%xmm3, 0x8(%rsp)
    00004027: 	movss	%xmm7, 0x38(%rsp)
    0000402d: 	nopl	(%rax) # Size: 3
.Ltmp1370:
    00004030: 	movss	(%rsp), %xmm5
    00004035: 	movq	%rbp, %rax
    00004038: 	movaps	%xmm5, %xmm4
    0000403b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1367:
    00004040: 	movaps	(%rax), %xmm0
    00004043: 	movaps	0x10(%rax), %xmm1
    00004047: 	addq	$0x20, %rax
    0000404b: 	addss	%xmm0, %xmm5
    0000404f: 	movaps	%xmm0, %xmm2
    00004052: 	unpckhps	%xmm0, %xmm2
    00004055: 	addss	%xmm5, %xmm2
    00004059: 	movaps	%xmm1, %xmm5
    0000405c: 	addss	%xmm2, %xmm5
    00004060: 	movaps	%xmm1, %xmm2
    00004063: 	unpckhps	%xmm1, %xmm2
    00004066: 	addss	%xmm2, %xmm5
    0000406a: 	movaps	%xmm0, %xmm2
    0000406d: 	shufps	$0x55, %xmm0, %xmm2
    00004071: 	addss	%xmm2, %xmm4
    00004075: 	shufps	$0xff, %xmm0, %xmm0
    00004079: 	addss	%xmm4, %xmm0
    0000407d: 	movaps	%xmm1, %xmm4
    00004080: 	shufps	$0x55, %xmm1, %xmm4
    00004084: 	shufps	$0xff, %xmm1, %xmm1
    00004088: 	addss	%xmm0, %xmm4
    0000408c: 	addss	%xmm1, %xmm4
    00004090: 	cmpq	%rbx, %rax
    00004093: 	jne	.Ltmp1367 # Offset: 16531
    00004095: 	movss	(%rsp), %xmm7
    0000409a: 	pxor	%xmm6, %xmm6
    0000409e: 	movss	0x38(%rsp), %xmm1
    000040a4: 	cvtsd2ss	init_value(%rip), %xmm6
    000040ac: 	mulss	%xmm6, %xmm1
    000040b0: 	movaps	%xmm7, %xmm0
    000040b3: 	mulss	%xmm6, %xmm0
    000040b7: 	addss	%xmm7, %xmm0
    000040bb: 	ucomiss	%xmm0, %xmm1
    000040be: 	jp	.Ltmp1368 # Offset: 16574
.Ltmp1524:
    000040c4: 	subss	%xmm0, %xmm4
    000040c8: 	subss	%xmm1, %xmm5
    000040cc: 	movss	%xmm4, 0x14c(%rsp)
    000040d5: 	movss	%xmm5, 0x148(%rsp)
    000040de: 	movq	0x148(%rsp), %xmm0
    000040e7: 	callq	cabsf@PLT # Offset: 16615
    000040ec: 	movss	0x8(%rsp), %xmm7
    000040f2: 	comiss	%xmm0, %xmm7
    000040f5: 	jbe	.Ltmp1369 # Offset: 16629
.Ltmp1422:
    000040fb: 	addl	$0x1, %r13d
    000040ff: 	cmpl	%r14d, %r13d
    00004102: 	jl	.Ltmp1370 # Offset: 16642
.Ltmp1366:
    00004108: 	movq	%r12, %rsi
    0000410b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004112: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16658
    00004117: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000411e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00004125: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000412c: 	je	.Ltmp1371 # Offset: 16684
.Ltmp1456:
    00004132: 	movq	-0x20(%rax), %r13
    00004136: 	callq	clock@PLT # Offset: 16694
    0000413b: 	pxor	%xmm0, %xmm0
    0000413f: 	movq	%rax, end_time(%rip)
    00004146: 	movq	%r13, %rdi
    00004149: 	subq	start_time(%rip), %rax
    00004150: 	cvtsi2sd	%rax, %xmm0
    00004155: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000415d: 	callq	_Z13record_resultdPKc # Offset: 16733
    00004162: 	movq	0x4f0(%rsp), %rdi
    0000416a: 	cmpq	0x50(%rsp), %rdi
    0000416f: 	je	.Ltmp1372 # Offset: 16751
    00004171: 	movq	0x500(%rsp), %rax
    00004179: 	leaq	0x1(%rax), %rsi
    0000417d: 	callq	_ZdlPvm@PLT # Offset: 16765
.Ltmp1372:
    00004182: 	movq	0x58(%rsp), %rsi
    00004187: 	leaq	DATAat0x2b4f1(%rip), %rdx
    0000418e: 	movq	%r12, %rdi
    00004191: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16785
    00004196: 	callq	clock@PLT # Offset: 16790
    0000419b: 	movl	iterations(%rip), %r14d
    000041a2: 	movq	%rax, start_time(%rip)
    000041a9: 	testl	%r14d, %r14d
    000041ac: 	jle	.Ltmp1373 # Offset: 16812
    000041b2: 	movss	DATAat0x2b908(%rip), %xmm3
    000041ba: 	movss	DATAat0x2b900(%rip), %xmm7
    000041c2: 	pxor	%xmm6, %xmm6
    000041c6: 	xorl	%r13d, %r13d
    000041c9: 	movss	%xmm6, (%rsp)
    000041ce: 	leaq	DATAat0x2b1d0(%rip), %r15
    000041d5: 	movss	%xmm3, 0x8(%rsp)
    000041db: 	movss	%xmm7, 0x38(%rsp)
    000041e1: 	nopl	(%rax) # Size: 7
.Ltmp1377:
    000041e8: 	movss	(%rsp), %xmm5
    000041ed: 	movq	%rbp, %rax
    000041f0: 	movaps	%xmm5, %xmm4
    000041f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1374:
    000041f8: 	movaps	(%rax), %xmm0
    000041fb: 	pxor	%xmm1, %xmm1
    000041ff: 	addq	$0x20, %rax
    00004203: 	movaps	%xmm0, %xmm2
    00004206: 	shufps	$0x88, -0x10(%rax), %xmm2
    0000420b: 	subps	%xmm2, %xmm1
    0000420e: 	movaps	%xmm0, %xmm2
    00004211: 	pxor	%xmm0, %xmm0
    00004215: 	shufps	$0xdd, -0x10(%rax), %xmm2
    0000421a: 	subps	%xmm2, %xmm0
    0000421d: 	movaps	%xmm1, %xmm3
    00004220: 	movaps	%xmm1, %xmm2
    00004223: 	addss	%xmm5, %xmm3
    00004227: 	shufps	$0x55, %xmm1, %xmm2
    0000422b: 	movaps	%xmm1, %xmm5
    0000422e: 	unpckhps	%xmm1, %xmm5
    00004231: 	shufps	$0xff, %xmm1, %xmm1
    00004235: 	addss	%xmm3, %xmm2
    00004239: 	addss	%xmm2, %xmm5
    0000423d: 	movaps	%xmm0, %xmm2
    00004240: 	addss	%xmm4, %xmm2
    00004244: 	movaps	%xmm0, %xmm4
    00004247: 	unpckhps	%xmm0, %xmm4
    0000424a: 	addss	%xmm1, %xmm5
    0000424e: 	movaps	%xmm0, %xmm1
    00004251: 	shufps	$0x55, %xmm0, %xmm1
    00004255: 	addss	%xmm2, %xmm1
    00004259: 	shufps	$0xff, %xmm0, %xmm0
    0000425d: 	addss	%xmm1, %xmm4
    00004261: 	addss	%xmm0, %xmm4
    00004265: 	cmpq	%rbx, %rax
    00004268: 	jne	.Ltmp1374 # Offset: 17000
    0000426a: 	movss	(%rsp), %xmm7
    0000426f: 	pxor	%xmm0, %xmm0
    00004273: 	movss	0x38(%rsp), %xmm1
    00004279: 	cvtsd2ss	init_value(%rip), %xmm0
    00004281: 	movaps	%xmm7, %xmm6
    00004284: 	subss	%xmm0, %xmm6
    00004288: 	movaps	%xmm7, %xmm0
    0000428b: 	mulss	%xmm6, %xmm0
    0000428f: 	mulss	%xmm6, %xmm1
    00004293: 	addss	%xmm7, %xmm0
    00004297: 	ucomiss	%xmm0, %xmm1
    0000429a: 	jp	.Ltmp1375 # Offset: 17050
.Ltmp1522:
    000042a0: 	subss	%xmm0, %xmm4
    000042a4: 	subss	%xmm1, %xmm5
    000042a8: 	movss	%xmm4, 0x13c(%rsp)
    000042b1: 	movss	%xmm5, 0x138(%rsp)
    000042ba: 	movq	0x138(%rsp), %xmm0
    000042c3: 	callq	cabsf@PLT # Offset: 17091
    000042c8: 	movss	0x8(%rsp), %xmm6
    000042ce: 	comiss	%xmm0, %xmm6
    000042d1: 	jbe	.Ltmp1376 # Offset: 17105
.Ltmp1421:
    000042d7: 	addl	$0x1, %r13d
    000042db: 	cmpl	%r14d, %r13d
    000042de: 	jl	.Ltmp1377 # Offset: 17118
.Ltmp1373:
    000042e4: 	movq	%r12, %rsi
    000042e7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000042ee: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 17134
    000042f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000042fa: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00004301: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00004308: 	je	.Ltmp1378 # Offset: 17160
.Ltmp1455:
    0000430e: 	movq	-0x20(%rax), %r13
    00004312: 	callq	clock@PLT # Offset: 17170
    00004317: 	pxor	%xmm0, %xmm0
    0000431b: 	movq	%rax, end_time(%rip)
    00004322: 	movq	%r13, %rdi
    00004325: 	subq	start_time(%rip), %rax
    0000432c: 	cvtsi2sd	%rax, %xmm0
    00004331: 	divsd	DATAat0x2b628(%rip), %xmm0
    00004339: 	callq	_Z13record_resultdPKc # Offset: 17209
    0000433e: 	movq	0x4f0(%rsp), %rdi
    00004346: 	cmpq	0x50(%rsp), %rdi
    0000434b: 	je	.Ltmp1379 # Offset: 17227
    0000434d: 	movq	0x500(%rsp), %rax
    00004355: 	leaq	0x1(%rax), %rsi
    00004359: 	callq	_ZdlPvm@PLT # Offset: 17241
.Ltmp1379:
    0000435e: 	movq	0x58(%rsp), %rsi
    00004363: 	leaq	DATAat0x2b4fd(%rip), %rdx
    0000436a: 	movq	%r12, %rdi
    0000436d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17261
    00004372: 	callq	clock@PLT # Offset: 17266
    00004377: 	movl	iterations(%rip), %r14d
    0000437e: 	movq	%rax, start_time(%rip)
    00004385: 	testl	%r14d, %r14d
    00004388: 	jle	.Ltmp1380 # Offset: 17288
    0000438e: 	movss	DATAat0x2b908(%rip), %xmm3
    00004396: 	movss	DATAat0x2b900(%rip), %xmm7
    0000439e: 	pxor	%xmm6, %xmm6
    000043a2: 	xorl	%r13d, %r13d
    000043a5: 	movss	%xmm6, (%rsp)
    000043aa: 	leaq	DATAat0x2b1d0(%rip), %r15
    000043b1: 	movss	%xmm3, 0x8(%rsp)
    000043b7: 	movss	%xmm7, 0x38(%rsp)
    000043bd: 	nopl	(%rax) # Size: 3
.Ltmp1386:
    000043c0: 	movss	(%rsp), %xmm3
    000043c5: 	movq	%rbp, %rax
    000043c8: 	movaps	%xmm3, %xmm5
    000043cb: 	movaps	%xmm3, %xmm6
    000043ce: 	nop # Size: 2
.Ltmp1382:
    000043d0: 	movss	0x4(%rax), %xmm1
    000043d5: 	movss	(%rax), %xmm4
    000043d9: 	movaps	%xmm1, %xmm0
    000043dc: 	movaps	%xmm4, %xmm2
    000043df: 	mulss	%xmm3, %xmm0
    000043e3: 	subss	%xmm0, %xmm2
    000043e7: 	movaps	%xmm4, %xmm0
    000043ea: 	mulss	%xmm3, %xmm0
    000043ee: 	addss	%xmm1, %xmm0
    000043f2: 	ucomiss	%xmm2, %xmm0
    000043f5: 	jp	.Ltmp1381 # Offset: 17397
    000043fb: 	addq	$0x8, %rax
    000043ff: 	addss	%xmm2, %xmm6
    00004403: 	addss	%xmm0, %xmm5
    00004407: 	cmpq	%rbx, %rax
    0000440a: 	jne	.Ltmp1382 # Offset: 17418
.Ltmp1484:
    0000440c: 	movss	(%rsp), %xmm7
    00004411: 	pxor	%xmm4, %xmm4
    00004415: 	cvtsd2ss	init_value(%rip), %xmm4
    0000441d: 	movaps	%xmm7, %xmm3
    00004420: 	mulss	%xmm4, %xmm3
    00004424: 	addss	%xmm3, %xmm7
    00004428: 	ucomiss	%xmm7, %xmm4
    0000442b: 	movaps	%xmm7, %xmm1
    0000442e: 	jp	.Ltmp1383 # Offset: 17454
.Ltmp1505:
    00004434: 	movss	0x38(%rsp), %xmm7
    0000443a: 	movss	(%rsp), %xmm2
    0000443f: 	mulss	%xmm1, %xmm2
    00004443: 	movaps	%xmm7, %xmm0
    00004446: 	mulss	%xmm4, %xmm0
    0000444a: 	mulss	%xmm1, %xmm7
    0000444e: 	subss	%xmm2, %xmm0
    00004452: 	movaps	%xmm7, %xmm2
    00004455: 	addss	%xmm3, %xmm2
    00004459: 	ucomiss	%xmm2, %xmm0
    0000445c: 	jp	.Ltmp1384 # Offset: 17500
.Ltmp1504:
    00004462: 	subss	%xmm0, %xmm6
    00004466: 	subss	%xmm2, %xmm5
    0000446a: 	movss	%xmm6, 0x118(%rsp)
    00004473: 	movss	%xmm5, 0x11c(%rsp)
    0000447c: 	movq	0x118(%rsp), %xmm0
    00004485: 	callq	cabsf@PLT # Offset: 17541
    0000448a: 	movss	0x8(%rsp), %xmm3
    00004490: 	comiss	%xmm0, %xmm3
    00004493: 	jbe	.Ltmp1385 # Offset: 17555
.Ltmp1420:
    00004499: 	addl	$0x1, %r13d
    0000449d: 	cmpl	%r14d, %r13d
    000044a0: 	jl	.Ltmp1386 # Offset: 17568
.Ltmp1380:
    000044a6: 	movq	%r12, %rsi
    000044a9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000044b0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 17584
    000044b5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000044bc: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000044c3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000044ca: 	je	.Ltmp1387 # Offset: 17610
.Ltmp1454:
    000044d0: 	movq	-0x20(%rax), %r13
    000044d4: 	callq	clock@PLT # Offset: 17620
    000044d9: 	pxor	%xmm0, %xmm0
    000044dd: 	movq	%rax, end_time(%rip)
    000044e4: 	movq	%r13, %rdi
    000044e7: 	subq	start_time(%rip), %rax
    000044ee: 	cvtsi2sd	%rax, %xmm0
    000044f3: 	divsd	DATAat0x2b628(%rip), %xmm0
    000044fb: 	callq	_Z13record_resultdPKc # Offset: 17659
    00004500: 	movq	0x4f0(%rsp), %rdi
    00004508: 	cmpq	0x50(%rsp), %rdi
    0000450d: 	je	.Ltmp1388 # Offset: 17677
    0000450f: 	movq	0x500(%rsp), %rax
    00004517: 	leaq	0x1(%rax), %rsi
    0000451b: 	callq	_ZdlPvm@PLT # Offset: 17691
.Ltmp1388:
    00004520: 	movq	0x58(%rsp), %rsi
    00004525: 	leaq	DATAat0x2b508(%rip), %rdx
    0000452c: 	movq	%r12, %rdi
    0000452f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17711
    00004534: 	callq	clock@PLT # Offset: 17716
    00004539: 	movl	iterations(%rip), %r14d
    00004540: 	movq	%rax, start_time(%rip)
    00004547: 	testl	%r14d, %r14d
    0000454a: 	jle	.Ltmp1389 # Offset: 17738
    00004550: 	movss	DATAat0x2b908(%rip), %xmm3
    00004558: 	movss	DATAat0x2b900(%rip), %xmm7
    00004560: 	pxor	%xmm6, %xmm6
    00004564: 	xorl	%r13d, %r13d
    00004567: 	movss	%xmm6, (%rsp)
    0000456c: 	leaq	DATAat0x2b1d0(%rip), %r15
    00004573: 	movss	%xmm3, 0x8(%rsp)
    00004579: 	movss	%xmm7, 0x38(%rsp)
    0000457f: 	nop # Size: 1
.Ltmp1393:
    00004580: 	movss	(%rsp), %xmm5
    00004585: 	movq	%rbp, %rax
    00004588: 	movaps	%xmm5, %xmm4
    0000458b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1390:
    00004590: 	movaps	(%rax), %xmm0
    00004593: 	movaps	0x10(%rax), %xmm1
    00004597: 	addq	$0x20, %rax
    0000459b: 	addss	%xmm0, %xmm5
    0000459f: 	movaps	%xmm0, %xmm2
    000045a2: 	unpckhps	%xmm0, %xmm2
    000045a5: 	addss	%xmm5, %xmm2
    000045a9: 	movaps	%xmm1, %xmm5
    000045ac: 	addss	%xmm2, %xmm5
    000045b0: 	movaps	%xmm1, %xmm2
    000045b3: 	unpckhps	%xmm1, %xmm2
    000045b6: 	addss	%xmm2, %xmm5
    000045ba: 	movaps	%xmm0, %xmm2
    000045bd: 	shufps	$0x55, %xmm0, %xmm2
    000045c1: 	addss	%xmm2, %xmm4
    000045c5: 	shufps	$0xff, %xmm0, %xmm0
    000045c9: 	addss	%xmm4, %xmm0
    000045cd: 	movaps	%xmm1, %xmm4
    000045d0: 	shufps	$0x55, %xmm1, %xmm4
    000045d4: 	shufps	$0xff, %xmm1, %xmm1
    000045d8: 	addss	%xmm0, %xmm4
    000045dc: 	addss	%xmm1, %xmm4
    000045e0: 	cmpq	%rbx, %rax
    000045e3: 	jne	.Ltmp1390 # Offset: 17891
    000045e5: 	movss	(%rsp), %xmm7
    000045ea: 	pxor	%xmm6, %xmm6
    000045ee: 	movss	0x38(%rsp), %xmm1
    000045f4: 	cvtsd2ss	init_value(%rip), %xmm6
    000045fc: 	mulss	%xmm6, %xmm1
    00004600: 	movaps	%xmm7, %xmm0
    00004603: 	mulss	%xmm6, %xmm0
    00004607: 	addss	%xmm7, %xmm0
    0000460b: 	ucomiss	%xmm0, %xmm1
    0000460e: 	jp	.Ltmp1391 # Offset: 17934
.Ltmp1519:
    00004614: 	subss	%xmm0, %xmm4
    00004618: 	subss	%xmm1, %xmm5
    0000461c: 	movss	%xmm4, 0x10c(%rsp)
    00004625: 	movss	%xmm5, 0x108(%rsp)
    0000462e: 	movq	0x108(%rsp), %xmm0
    00004637: 	callq	cabsf@PLT # Offset: 17975
    0000463c: 	movss	0x8(%rsp), %xmm7
    00004642: 	comiss	%xmm0, %xmm7
    00004645: 	jbe	.Ltmp1392 # Offset: 17989
.Ltmp1419:
    0000464b: 	addl	$0x1, %r13d
    0000464f: 	cmpl	%r14d, %r13d
    00004652: 	jl	.Ltmp1393 # Offset: 18002
.Ltmp1389:
    00004658: 	movq	%r12, %rsi
    0000465b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004662: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 18018
    00004667: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000466e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00004675: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000467c: 	je	.Ltmp1394 # Offset: 18044
.Ltmp1453:
    00004682: 	movq	-0x20(%rax), %r13
    00004686: 	callq	clock@PLT # Offset: 18054
    0000468b: 	pxor	%xmm0, %xmm0
    0000468f: 	movq	%rax, end_time(%rip)
    00004696: 	movq	%r13, %rdi
    00004699: 	subq	start_time(%rip), %rax
    000046a0: 	cvtsi2sd	%rax, %xmm0
    000046a5: 	divsd	DATAat0x2b628(%rip), %xmm0
    000046ad: 	callq	_Z13record_resultdPKc # Offset: 18093
    000046b2: 	movq	0x4f0(%rsp), %rdi
    000046ba: 	cmpq	0x50(%rsp), %rdi
    000046bf: 	je	.Ltmp1395 # Offset: 18111
    000046c1: 	movq	0x500(%rsp), %rax
    000046c9: 	leaq	0x1(%rax), %rsi
    000046cd: 	callq	_ZdlPvm@PLT # Offset: 18125
.Ltmp1395:
    000046d2: 	movq	0x58(%rsp), %rsi
    000046d7: 	leaq	DATAat0x2b517(%rip), %rdx
    000046de: 	movq	%r12, %rdi
    000046e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 18145
    000046e6: 	movq	%r12, %rdx
    000046e9: 	movl	$0x1f40, %esi
    000046ee: 	movq	%rbp, %rdi
    000046f1: 	callq	_Z13test_constantISt7complexIfE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 18161
    000046f6: 	movq	0x4f0(%rsp), %rdi
    000046fe: 	cmpq	0x50(%rsp), %rdi
    00004703: 	je	.Ltmp1396 # Offset: 18179
    00004705: 	movq	0x500(%rsp), %rax
    0000470d: 	leaq	0x1(%rax), %rsi
    00004711: 	callq	_ZdlPvm@PLT # Offset: 18193
.Ltmp1396:
    00004716: 	movq	0x58(%rsp), %r15
    0000471b: 	leaq	0x4d0(%rsp), %rdi
    00004723: 	leaq	DATAat0x2b526(%rip), %rdx
    0000472a: 	movq	%r15, %rsi
    0000472d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 18221
    00004732: 	movl	iterations(%rip), %edx
    00004738: 	xorl	%r8d, %r8d
    0000473b: 	xorl	%ecx, %ecx
    0000473d: 	movl	$0x1f40, %esi
    00004742: 	movq	0x4d0(%rsp), %rdi
    0000474a: 	callq	_Z9summarizePKciiii # Offset: 18250
    0000474f: 	leaq	DATAat0x2b4c6(%rip), %rdx
    00004756: 	movq	%r15, %rsi
    00004759: 	movq	%r12, %rdi
    0000475c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 18268
    00004761: 	callq	clock@PLT # Offset: 18273
    00004766: 	movq	%r12, %rsi
    00004769: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004770: 	movq	%rax, start_time(%rip)
    00004777: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 18295
    0000477c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00004783: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000478a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00004791: 	je	.Ltmp1397 # Offset: 18321
.Ltmp1452:
    00004797: 	movq	-0x20(%rax), %r13
    0000479b: 	callq	clock@PLT # Offset: 18331
    000047a0: 	pxor	%xmm0, %xmm0
    000047a4: 	movq	%rax, end_time(%rip)
    000047ab: 	movq	%r13, %rdi
    000047ae: 	subq	start_time(%rip), %rax
    000047b5: 	cvtsi2sd	%rax, %xmm0
    000047ba: 	divsd	DATAat0x2b628(%rip), %xmm0
    000047c2: 	callq	_Z13record_resultdPKc # Offset: 18370
    000047c7: 	movq	0x4f0(%rsp), %rdi
    000047cf: 	cmpq	0x50(%rsp), %rdi
    000047d4: 	je	.Ltmp1398 # Offset: 18388
    000047d6: 	movq	0x500(%rsp), %rax
    000047de: 	leaq	0x1(%rax), %rsi
    000047e2: 	callq	_ZdlPvm@PLT # Offset: 18402
.Ltmp1398:
    000047e7: 	movq	0x58(%rsp), %rsi
    000047ec: 	leaq	DATAat0x2b540(%rip), %rdx
    000047f3: 	movq	%r12, %rdi
    000047f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 18422
    000047fb: 	callq	clock@PLT # Offset: 18427
    00004800: 	movl	iterations(%rip), %r14d
    00004807: 	movq	%rax, start_time(%rip)
    0000480e: 	testl	%r14d, %r14d
    00004811: 	jle	.Ltmp1399 # Offset: 18449
    00004817: 	movss	DATAat0x2b908(%rip), %xmm3
    0000481f: 	movss	DATAat0x2b900(%rip), %xmm7
    00004827: 	pxor	%xmm6, %xmm6
    0000482b: 	xorl	%r13d, %r13d
    0000482e: 	movss	%xmm6, (%rsp)
    00004833: 	leaq	DATAat0x2b1d0(%rip), %r15
    0000483a: 	movss	%xmm3, 0x8(%rsp)
    00004840: 	movss	%xmm7, 0x38(%rsp)
    00004846: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1405:
    00004850: 	movss	(%rsp), %xmm2
    00004855: 	movq	%rbp, %rax
    00004858: 	movaps	%xmm2, %xmm4
    0000485b: 	movaps	%xmm2, %xmm5
    0000485e: 	nop # Size: 2
.Ltmp1401:
    00004860: 	movss	(%rax), %xmm8
    00004865: 	movss	0x4(%rax), %xmm1
    0000486a: 	movaps	%xmm8, %xmm6
    0000486e: 	movaps	%xmm1, %xmm0
    00004871: 	mulss	%xmm2, %xmm6
    00004875: 	mulss	%xmm2, %xmm0
    00004879: 	movaps	%xmm6, %xmm7
    0000487c: 	subss	%xmm0, %xmm7
    00004880: 	addss	%xmm6, %xmm0
    00004884: 	ucomiss	%xmm7, %xmm0
    00004887: 	jp	.Ltmp1400 # Offset: 18567
    0000488d: 	addq	$0x8, %rax
    00004891: 	addss	%xmm7, %xmm5
    00004895: 	addss	%xmm0, %xmm4
    00004899: 	cmpq	%rbx, %rax
    0000489c: 	jne	.Ltmp1401 # Offset: 18588
.Ltmp1485:
    0000489e: 	movss	(%rsp), %xmm7
    000048a3: 	pxor	%xmm0, %xmm0
    000048a7: 	cvtsd2ss	init_value(%rip), %xmm0
    000048af: 	movaps	%xmm7, %xmm6
    000048b2: 	mulss	%xmm0, %xmm6
    000048b6: 	addss	%xmm6, %xmm7
    000048ba: 	ucomiss	%xmm7, %xmm6
    000048bd: 	movaps	%xmm7, %xmm1
    000048c0: 	jp	.Ltmp1402 # Offset: 18624
.Ltmp1518:
    000048c6: 	movss	(%rsp), %xmm7
    000048cb: 	movss	0x38(%rsp), %xmm3
    000048d1: 	movaps	%xmm7, %xmm0
    000048d4: 	movaps	%xmm3, %xmm2
    000048d7: 	mulss	%xmm1, %xmm0
    000048db: 	mulss	%xmm6, %xmm2
    000048df: 	mulss	%xmm6, %xmm7
    000048e3: 	mulss	%xmm1, %xmm3
    000048e7: 	subss	%xmm0, %xmm2
    000048eb: 	movaps	%xmm7, %xmm0
    000048ee: 	addss	%xmm3, %xmm0
    000048f2: 	ucomiss	%xmm0, %xmm2
    000048f5: 	jp	.Ltmp1403 # Offset: 18677
.Ltmp1517:
    000048fb: 	subss	%xmm0, %xmm4
    000048ff: 	subss	%xmm2, %xmm5
    00004903: 	movss	%xmm4, 0xec(%rsp)
    0000490c: 	movss	%xmm5, 0xe8(%rsp)
    00004915: 	movq	0xe8(%rsp), %xmm0
    0000491e: 	callq	cabsf@PLT # Offset: 18718
    00004923: 	movss	0x8(%rsp), %xmm6
    00004929: 	comiss	%xmm0, %xmm6
    0000492c: 	jbe	.Ltmp1404 # Offset: 18732
.Ltmp1418:
    00004932: 	addl	$0x1, %r13d
    00004936: 	cmpl	%r14d, %r13d
    00004939: 	jl	.Ltmp1405 # Offset: 18745
.Ltmp1399:
    0000493f: 	movq	%r12, %rsi
    00004942: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004949: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 18761
    0000494e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00004955: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000495c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00004963: 	je	.Ltmp1406 # Offset: 18787
.Ltmp1451:
    00004969: 	movq	-0x20(%rax), %r13
    0000496d: 	callq	clock@PLT # Offset: 18797
    00004972: 	pxor	%xmm0, %xmm0
    00004976: 	movq	%rax, end_time(%rip)
    0000497d: 	movq	%r13, %rdi
    00004980: 	subq	start_time(%rip), %rax
    00004987: 	cvtsi2sd	%rax, %xmm0
    0000498c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00004994: 	callq	_Z13record_resultdPKc # Offset: 18836
    00004999: 	movq	0x4f0(%rsp), %rdi
    000049a1: 	cmpq	0x50(%rsp), %rdi
    000049a6: 	je	.Ltmp1407 # Offset: 18854
    000049a8: 	movq	0x500(%rsp), %rax
    000049b0: 	leaq	0x1(%rax), %rsi
    000049b4: 	callq	_ZdlPvm@PLT # Offset: 18868
.Ltmp1407:
    000049b9: 	movq	0x58(%rsp), %rsi
    000049be: 	leaq	DATAat0x2b54c(%rip), %rdx
    000049c5: 	movq	%r12, %rdi
    000049c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 18888
    000049cd: 	movq	%r12, %rdx
    000049d0: 	movl	$0x1f40, %esi
    000049d5: 	movq	%rbp, %rdi
    000049d8: 	callq	_Z13test_constantISt7complexIfE20custom_subtract_selfIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 18904
    000049dd: 	movq	0x4f0(%rsp), %rdi
    000049e5: 	cmpq	0x50(%rsp), %rdi
    000049ea: 	je	.Ltmp1408 # Offset: 18922
    000049ec: 	movq	0x500(%rsp), %rax
    000049f4: 	leaq	0x1(%rax), %rsi
    000049f8: 	callq	_ZdlPvm@PLT # Offset: 18936
.Ltmp1408:
    000049fd: 	movq	0x58(%rsp), %rsi
    00004a02: 	leaq	DATAat0x2b55b(%rip), %rdx
    00004a09: 	movq	%r12, %rdi
    00004a0c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 18956
    00004a11: 	movq	%r12, %rdx
    00004a14: 	movl	$0x1f40, %esi
    00004a19: 	movq	%rbp, %rdi
    00004a1c: 	callq	_Z13test_constantISt7complexIfE29custom_algebra_mixed_constantIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 18972
    00004a21: 	movq	0x4f0(%rsp), %rdi
    00004a29: 	cmpq	0x50(%rsp), %rdi
    00004a2e: 	je	.Ltmp1409 # Offset: 18990
    00004a30: 	movq	0x500(%rsp), %rax
    00004a38: 	leaq	0x1(%rax), %rsi
    00004a3c: 	callq	_ZdlPvm@PLT # Offset: 19004
.Ltmp1409:
    00004a41: 	movq	0x58(%rsp), %rsi
    00004a46: 	leaq	DATAat0x2b5d0(%rip), %rdx
    00004a4d: 	movq	%r12, %rdi
    00004a50: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 19024
    00004a55: 	movl	iterations(%rip), %edx
    00004a5b: 	xorl	%r8d, %r8d
    00004a5e: 	xorl	%ecx, %ecx
    00004a60: 	movl	$0x1f40, %esi
    00004a65: 	movq	0x4f0(%rsp), %rdi
    00004a6d: 	callq	_Z9summarizePKciiii # Offset: 19053
    00004a72: 	movq	0x4f0(%rsp), %rdi
    00004a7a: 	cmpq	0x50(%rsp), %rdi
    00004a7f: 	je	.Ltmp1410 # Offset: 19071
    00004a81: 	movq	0x500(%rsp), %rax
    00004a89: 	leaq	0x1(%rax), %rsi
    00004a8d: 	callq	_ZdlPvm@PLT # Offset: 19085
.Ltmp1410:
    00004a92: 	movq	0x4d0(%rsp), %rdi
    00004a9a: 	leaq	0x4e0(%rsp), %rax
    00004aa2: 	cmpq	%rax, %rdi
    00004aa5: 	je	.Ltmp1411 # Offset: 19109
    00004aa7: 	movq	0x4e0(%rsp), %rax
    00004aaf: 	leaq	0x1(%rax), %rsi
    00004ab3: 	callq	_ZdlPvm@PLT # Offset: 19123
.Ltmp1411:
    00004ab8: 	movq	0x4b0(%rsp), %rdi
    00004ac0: 	leaq	0x4c0(%rsp), %rax
    00004ac8: 	cmpq	%rax, %rdi
    00004acb: 	je	.Ltmp1412 # Offset: 19147
    00004acd: 	movq	0x4c0(%rsp), %rax
    00004ad5: 	leaq	0x1(%rax), %rsi
    00004ad9: 	callq	_ZdlPvm@PLT # Offset: 19161
.Ltmp1412:
    00004ade: 	movq	0x490(%rsp), %rdi
    00004ae6: 	leaq	0x4a0(%rsp), %rax
    00004aee: 	cmpq	%rax, %rdi
    00004af1: 	je	.Ltmp1413 # Offset: 19185
    00004af3: 	movq	0x4a0(%rsp), %rax
    00004afb: 	leaq	0x1(%rax), %rsi
    00004aff: 	callq	_ZdlPvm@PLT # Offset: 19199
.Ltmp1413:
    00004b04: 	movq	0x470(%rsp), %rdi
    00004b0c: 	leaq	0x480(%rsp), %rax
    00004b14: 	cmpq	%rax, %rdi
    00004b17: 	je	.Ltmp1414 # Offset: 19223
    00004b19: 	movq	0x480(%rsp), %rax
    00004b21: 	leaq	0x1(%rax), %rsi
    00004b25: 	callq	_ZdlPvm@PLT # Offset: 19237
.Ltmp1414:
    00004b2a: 	movq	0x450(%rsp), %rdi
    00004b32: 	leaq	0x460(%rsp), %rax
    00004b3a: 	cmpq	%rax, %rdi
    00004b3d: 	je	.Ltmp1415 # Offset: 19261
    00004b3f: 	movq	0x460(%rsp), %rax
    00004b47: 	leaq	0x1(%rax), %rsi
    00004b4b: 	callq	_ZdlPvm@PLT # Offset: 19275
.Ltmp1415:
    00004b50: 	movq	0x430(%rsp), %rdi
    00004b58: 	cmpq	0xd0(%rsp), %rdi
    00004b60: 	je	.Ltmp1416 # Offset: 19296
    00004b62: 	movq	0x440(%rsp), %rax
    00004b6a: 	leaq	0x1(%rax), %rsi
    00004b6e: 	callq	_ZdlPvm@PLT # Offset: 19310
.Ltmp1416:
    00004b73: 	movq	0xff18(%rsp), %rax
    00004b7b: 	subq	%fs:0x28, %rax
    00004b84: 	jne	.Ltmp1417 # Offset: 19332
    00004b8a: 	addq	$0xff28, %rsp
    00004b91: 	popq	%rbx
    00004b92: 	popq	%rbp
    00004b93: 	popq	%r12
    00004b95: 	popq	%r13
    00004b97: 	popq	%r14
    00004b99: 	popq	%r15
    00004b9b: 	retq # Offset: 19355
    00004b9c: 	nopl	(%rax) # Size: 4
.Ltmp1404:
    00004ba0: 	movl	current_test(%rip), %edx
    00004ba6: 	movq	%r15, %rsi
    00004ba9: 	movl	$0x1, %edi
    00004bae: 	xorl	%eax, %eax
    00004bb0: 	callq	__printf_chk@PLT # Offset: 19376
    00004bb5: 	movl	iterations(%rip), %r14d
    00004bbc: 	jmp	.Ltmp1418 # Offset: 19388
    00004bc1: 	nopl	(%rax) # Size: 7
.Ltmp1392:
    00004bc8: 	movl	current_test(%rip), %edx
    00004bce: 	movq	%r15, %rsi
    00004bd1: 	movl	$0x1, %edi
    00004bd6: 	xorl	%eax, %eax
    00004bd8: 	callq	__printf_chk@PLT # Offset: 19416
    00004bdd: 	movl	iterations(%rip), %r14d
    00004be4: 	jmp	.Ltmp1419 # Offset: 19428
    00004be9: 	nopl	(%rax) # Size: 7
.Ltmp1385:
    00004bf0: 	movl	current_test(%rip), %edx
    00004bf6: 	movq	%r15, %rsi
    00004bf9: 	movl	$0x1, %edi
    00004bfe: 	xorl	%eax, %eax
    00004c00: 	callq	__printf_chk@PLT # Offset: 19456
    00004c05: 	movl	iterations(%rip), %r14d
    00004c0c: 	jmp	.Ltmp1420 # Offset: 19468
    00004c11: 	nopl	(%rax) # Size: 7
.Ltmp1376:
    00004c18: 	movl	current_test(%rip), %edx
    00004c1e: 	movq	%r15, %rsi
    00004c21: 	movl	$0x1, %edi
    00004c26: 	xorl	%eax, %eax
    00004c28: 	callq	__printf_chk@PLT # Offset: 19496
    00004c2d: 	movl	iterations(%rip), %r14d
    00004c34: 	jmp	.Ltmp1421 # Offset: 19508
    00004c39: 	nopl	(%rax) # Size: 7
.Ltmp1369:
    00004c40: 	movl	current_test(%rip), %edx
    00004c46: 	movq	%r15, %rsi
    00004c49: 	movl	$0x1, %edi
    00004c4e: 	xorl	%eax, %eax
    00004c50: 	callq	__printf_chk@PLT # Offset: 19536
    00004c55: 	movl	iterations(%rip), %r14d
    00004c5c: 	jmp	.Ltmp1422 # Offset: 19548
    00004c61: 	nopl	(%rax) # Size: 7
.Ltmp1361:
    00004c68: 	movl	current_test(%rip), %edx
    00004c6e: 	movq	%r15, %rsi
    00004c71: 	movl	$0x1, %edi
    00004c76: 	xorl	%eax, %eax
    00004c78: 	callq	__printf_chk@PLT # Offset: 19576
    00004c7d: 	movl	iterations(%rip), %r14d
    00004c84: 	jmp	.Ltmp1423 # Offset: 19588
    00004c89: 	nopl	(%rax) # Size: 7
.Ltmp1354:
    00004c90: 	movl	current_test(%rip), %edx
    00004c96: 	movq	%r15, %rsi
    00004c99: 	movl	$0x1, %edi
    00004c9e: 	xorl	%eax, %eax
    00004ca0: 	callq	__printf_chk@PLT # Offset: 19616
    00004ca5: 	movl	iterations(%rip), %r14d
    00004cac: 	jmp	.Ltmp1424 # Offset: 19628
    00004cb1: 	nopl	(%rax) # Size: 7
.Ltmp1347:
    00004cb8: 	movl	current_test(%rip), %edx
    00004cbe: 	movq	%r15, %rsi
    00004cc1: 	movl	$0x1, %edi
    00004cc6: 	xorl	%eax, %eax
    00004cc8: 	callq	__printf_chk@PLT # Offset: 19656
    00004ccd: 	movl	iterations(%rip), %r14d
    00004cd4: 	jmp	.Ltmp1425 # Offset: 19668
    00004cd9: 	nopl	(%rax) # Size: 7
.Ltmp1337:
    00004ce0: 	movl	current_test(%rip), %edx
    00004ce6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00004ced: 	movl	$0x1, %edi
    00004cf2: 	xorl	%eax, %eax
    00004cf4: 	callq	__printf_chk@PLT # Offset: 19700
    00004cf9: 	movl	iterations(%rip), %r15d
    00004d00: 	jmp	.Ltmp1426 # Offset: 19712
    00004d05: 	nopl	(%rax) # Size: 3
.Ltmp1331:
    00004d08: 	movl	current_test(%rip), %edx
    00004d0e: 	movq	%r15, %rsi
    00004d11: 	movl	$0x1, %edi
    00004d16: 	xorl	%eax, %eax
    00004d18: 	callq	__printf_chk@PLT # Offset: 19736
    00004d1d: 	movl	iterations(%rip), %r14d
    00004d24: 	jmp	.Ltmp1427 # Offset: 19748
    00004d29: 	nopl	(%rax) # Size: 7
.Ltmp1323:
    00004d30: 	movl	current_test(%rip), %edx
    00004d36: 	movq	%r15, %rsi
    00004d39: 	movl	$0x1, %edi
    00004d3e: 	xorl	%eax, %eax
    00004d40: 	callq	__printf_chk@PLT # Offset: 19776
    00004d45: 	movl	iterations(%rip), %r14d
    00004d4c: 	jmp	.Ltmp1428 # Offset: 19788
    00004d51: 	nopl	(%rax) # Size: 7
.Ltmp1315:
    00004d58: 	movl	current_test(%rip), %edx
    00004d5e: 	movq	%r15, %rsi
    00004d61: 	movl	$0x1, %edi
    00004d66: 	xorl	%eax, %eax
    00004d68: 	callq	__printf_chk@PLT # Offset: 19816
    00004d6d: 	movl	iterations(%rip), %r14d
    00004d74: 	jmp	.Ltmp1429 # Offset: 19828
    00004d79: 	nopl	(%rax) # Size: 7
.Ltmp1308:
    00004d80: 	movl	current_test(%rip), %edx
    00004d86: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00004d8d: 	movl	$0x1, %edi
    00004d92: 	xorl	%eax, %eax
    00004d94: 	callq	__printf_chk@PLT # Offset: 19860
    00004d99: 	movl	iterations(%rip), %r14d
    00004da0: 	jmp	.Ltmp1430 # Offset: 19872
    00004da5: 	nopl	(%rax) # Size: 3
.Ltmp1301:
    00004da8: 	movl	current_test(%rip), %edx
    00004dae: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00004db5: 	movl	$0x1, %edi
    00004dba: 	xorl	%eax, %eax
    00004dbc: 	callq	__printf_chk@PLT # Offset: 19900
    00004dc1: 	movl	iterations(%rip), %r14d
    00004dc8: 	jmp	.Ltmp1431 # Offset: 19912
    00004dcd: 	nopl	(%rax) # Size: 3
.Ltmp1294:
    00004dd0: 	movl	current_test(%rip), %edx
    00004dd6: 	movq	%r15, %rsi
    00004dd9: 	movl	$0x1, %edi
    00004dde: 	xorl	%eax, %eax
    00004de0: 	callq	__printf_chk@PLT # Offset: 19936
    00004de5: 	movl	iterations(%rip), %r14d
    00004dec: 	jmp	.Ltmp1432 # Offset: 19948
    00004df1: 	nopl	(%rax) # Size: 7
.Ltmp1279:
    00004df8: 	movl	current_test(%rip), %edx
    00004dfe: 	movq	%r15, %rsi
    00004e01: 	movl	$0x1, %edi
    00004e06: 	xorl	%eax, %eax
    00004e08: 	callq	__printf_chk@PLT # Offset: 19976
    00004e0d: 	movl	iterations(%rip), %r14d
    00004e14: 	jmp	.Ltmp1433 # Offset: 19988
    00004e19: 	nopl	(%rax) # Size: 7
.Ltmp1269:
    00004e20: 	movl	current_test(%rip), %edx
    00004e26: 	movq	%r15, %rsi
    00004e29: 	movl	$0x1, %edi
    00004e2e: 	xorl	%eax, %eax
    00004e30: 	callq	__printf_chk@PLT # Offset: 20016
    00004e35: 	movl	iterations(%rip), %r14d
    00004e3c: 	jmp	.Ltmp1434 # Offset: 20028
    00004e41: 	nopl	(%rax) # Size: 7
.Ltmp1257:
    00004e48: 	movl	current_test(%rip), %edx
    00004e4e: 	movq	%r15, %rsi
    00004e51: 	movl	$0x1, %edi
    00004e56: 	xorl	%eax, %eax
    00004e58: 	callq	__printf_chk@PLT # Offset: 20056
    00004e5d: 	movl	iterations(%rip), %r14d
    00004e64: 	jmp	.Ltmp1435 # Offset: 20068
    00004e69: 	nopl	(%rax) # Size: 7
.Ltmp1248:
    00004e70: 	movl	current_test(%rip), %edx
    00004e76: 	movq	%r15, %rsi
    00004e79: 	movl	$0x1, %edi
    00004e7e: 	xorl	%eax, %eax
    00004e80: 	callq	__printf_chk@PLT # Offset: 20096
    00004e85: 	movl	iterations(%rip), %r14d
    00004e8c: 	jmp	.Ltmp1436 # Offset: 20108
    00004e91: 	nopl	(%rax) # Size: 7
.Ltmp1241:
    00004e98: 	movl	current_test(%rip), %edx
    00004e9e: 	movq	%r15, %rsi
    00004ea1: 	movl	$0x1, %edi
    00004ea6: 	xorl	%eax, %eax
    00004ea8: 	callq	__printf_chk@PLT # Offset: 20136
    00004ead: 	movl	iterations(%rip), %r14d
    00004eb4: 	jmp	.Ltmp1437 # Offset: 20148
    00004eb9: 	nopl	(%rax) # Size: 7
.Ltmp1234:
    00004ec0: 	movl	current_test(%rip), %edx
    00004ec6: 	movq	%r15, %rsi
    00004ec9: 	movl	$0x1, %edi
    00004ece: 	xorl	%eax, %eax
    00004ed0: 	callq	__printf_chk@PLT # Offset: 20176
    00004ed5: 	movl	iterations(%rip), %r14d
    00004edc: 	jmp	.Ltmp1438 # Offset: 20188
    00004ee1: 	nopl	(%rax) # Size: 7
.Ltmp1227:
    00004ee8: 	movl	current_test(%rip), %edx
    00004eee: 	movq	%r15, %rsi
    00004ef1: 	movl	$0x1, %edi
    00004ef6: 	xorl	%eax, %eax
    00004ef8: 	callq	__printf_chk@PLT # Offset: 20216
    00004efd: 	movl	iterations(%rip), %r14d
    00004f04: 	jmp	.Ltmp1439 # Offset: 20228
    00004f09: 	nopl	(%rax) # Size: 7
.Ltmp1220:
    00004f10: 	movl	current_test(%rip), %edx
    00004f16: 	movq	%r15, %rsi
    00004f19: 	movl	$0x1, %edi
    00004f1e: 	xorl	%eax, %eax
    00004f20: 	callq	__printf_chk@PLT # Offset: 20256
    00004f25: 	movl	iterations(%rip), %r14d
    00004f2c: 	jmp	.Ltmp1440 # Offset: 20268
    00004f31: 	nopl	(%rax) # Size: 7
.Ltmp1213:
    00004f38: 	movl	current_test(%rip), %edx
    00004f3e: 	movq	%r15, %rsi
    00004f41: 	movl	$0x1, %edi
    00004f46: 	xorl	%eax, %eax
    00004f48: 	callq	__printf_chk@PLT # Offset: 20296
    00004f4d: 	movl	iterations(%rip), %r14d
    00004f54: 	jmp	.Ltmp1441 # Offset: 20308
    00004f59: 	nopl	(%rax) # Size: 7
.Ltmp1203:
    00004f60: 	movl	current_test(%rip), %edx
    00004f66: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00004f6d: 	movl	$0x1, %edi
    00004f72: 	xorl	%eax, %eax
    00004f74: 	callq	__printf_chk@PLT # Offset: 20340
    00004f79: 	movl	iterations(%rip), %r14d
    00004f80: 	jmp	.Ltmp1442 # Offset: 20352
    00004f85: 	nopl	(%rax) # Size: 3
.Ltmp1192:
    00004f88: 	movl	current_test(%rip), %edx
    00004f8e: 	movq	%r15, %rsi
    00004f91: 	movl	$0x1, %edi
    00004f96: 	xorl	%eax, %eax
    00004f98: 	callq	__printf_chk@PLT # Offset: 20376
    00004f9d: 	movl	iterations(%rip), %r14d
    00004fa4: 	jmp	.Ltmp1443 # Offset: 20388
    00004fa9: 	nopl	(%rax) # Size: 7
.Ltmp1183:
    00004fb0: 	movl	current_test(%rip), %edx
    00004fb6: 	movq	%r14, %rsi
    00004fb9: 	movl	$0x1, %edi
    00004fbe: 	xorl	%eax, %eax
    00004fc0: 	callq	__printf_chk@PLT # Offset: 20416
    00004fc5: 	movl	iterations(%rip), %edx
    00004fcb: 	jmp	.Ltmp1444 # Offset: 20427
.Ltmp1175:
    00004fd0: 	movl	current_test(%rip), %edx
    00004fd6: 	movq	%r14, %rsi
    00004fd9: 	movl	$0x1, %edi
    00004fde: 	xorl	%eax, %eax
    00004fe0: 	callq	__printf_chk@PLT # Offset: 20448
    00004fe5: 	movl	iterations(%rip), %edx
    00004feb: 	jmp	.Ltmp1445 # Offset: 20459
.Ltmp1169:
    00004ff0: 	movl	current_test(%rip), %edx
    00004ff6: 	movq	%r14, %rsi
    00004ff9: 	movl	$0x1, %edi
    00004ffe: 	xorl	%eax, %eax
    00005000: 	callq	__printf_chk@PLT # Offset: 20480
    00005005: 	movl	iterations(%rip), %edx
    0000500b: 	jmp	.Ltmp1446 # Offset: 20491
.Ltmp1163:
    00005010: 	movl	current_test(%rip), %edx
    00005016: 	movq	%r14, %rsi
    00005019: 	movl	$0x1, %edi
    0000501e: 	xorl	%eax, %eax
    00005020: 	callq	__printf_chk@PLT # Offset: 20512
    00005025: 	movl	iterations(%rip), %edx
    0000502b: 	jmp	.Ltmp1447 # Offset: 20523
.Ltmp1157:
    00005030: 	movl	current_test(%rip), %edx
    00005036: 	movq	%r14, %rsi
    00005039: 	movl	$0x1, %edi
    0000503e: 	xorl	%eax, %eax
    00005040: 	callq	__printf_chk@PLT # Offset: 20544
    00005045: 	movl	iterations(%rip), %edx
    0000504b: 	jmp	.Ltmp1448 # Offset: 20555
.Ltmp1151:
    00005050: 	movl	current_test(%rip), %edx
    00005056: 	movq	%r14, %rsi
    00005059: 	movl	$0x1, %edi
    0000505e: 	xorl	%eax, %eax
    00005060: 	callq	__printf_chk@PLT # Offset: 20576
    00005065: 	movl	iterations(%rip), %edx
    0000506b: 	jmp	.Ltmp1449 # Offset: 20587
.Ltmp1153:
    00005070: 	movq	-0x8(%rdx), %rax
    00005074: 	addq	$0x200, %rax
    0000507a: 	jmp	.Ltmp1450 # Offset: 20602
.Ltmp1406:
    0000507f: 	movq	-0x8(%rdx), %rax
    00005083: 	addq	$0x200, %rax
    00005089: 	jmp	.Ltmp1451 # Offset: 20617
.Ltmp1397:
    0000508e: 	movq	-0x8(%rdx), %rax
    00005092: 	addq	$0x200, %rax
    00005098: 	jmp	.Ltmp1452 # Offset: 20632
.Ltmp1394:
    0000509d: 	movq	-0x8(%rdx), %rax
    000050a1: 	addq	$0x200, %rax
    000050a7: 	jmp	.Ltmp1453 # Offset: 20647
.Ltmp1387:
    000050ac: 	movq	-0x8(%rdx), %rax
    000050b0: 	addq	$0x200, %rax
    000050b6: 	jmp	.Ltmp1454 # Offset: 20662
.Ltmp1378:
    000050bb: 	movq	-0x8(%rdx), %rax
    000050bf: 	addq	$0x200, %rax
    000050c5: 	jmp	.Ltmp1455 # Offset: 20677
.Ltmp1371:
    000050ca: 	movq	-0x8(%rdx), %rax
    000050ce: 	addq	$0x200, %rax
    000050d4: 	jmp	.Ltmp1456 # Offset: 20692
.Ltmp1363:
    000050d9: 	movq	-0x8(%rdx), %rax
    000050dd: 	addq	$0x200, %rax
    000050e3: 	jmp	.Ltmp1457 # Offset: 20707
.Ltmp1356:
    000050e8: 	movq	-0x8(%rdx), %rax
    000050ec: 	addq	$0x200, %rax
    000050f2: 	jmp	.Ltmp1458 # Offset: 20722
.Ltmp1349:
    000050f7: 	movq	-0x8(%rdx), %rax
    000050fb: 	addq	$0x200, %rax
    00005101: 	jmp	.Ltmp1459 # Offset: 20737
.Ltmp1339:
    00005106: 	movq	-0x8(%rdx), %rax
    0000510a: 	addq	$0x200, %rax
    00005110: 	jmp	.Ltmp1460 # Offset: 20752
.Ltmp1333:
    00005115: 	movq	-0x8(%rdx), %rax
    00005119: 	addq	$0x200, %rax
    0000511f: 	jmp	.Ltmp1461 # Offset: 20767
.Ltmp1325:
    00005124: 	movq	-0x8(%rdx), %rax
    00005128: 	addq	$0x200, %rax
    0000512e: 	jmp	.Ltmp1462 # Offset: 20782
.Ltmp1317:
    00005133: 	movq	-0x8(%rdx), %rax
    00005137: 	addq	$0x200, %rax
    0000513d: 	jmp	.Ltmp1463 # Offset: 20797
.Ltmp1310:
    00005142: 	movq	-0x8(%rdx), %rax
    00005146: 	addq	$0x200, %rax
    0000514c: 	jmp	.Ltmp1464 # Offset: 20812
.Ltmp1303:
    00005151: 	movq	-0x8(%rdx), %rax
    00005155: 	addq	$0x200, %rax
    0000515b: 	jmp	.Ltmp1465 # Offset: 20827
.Ltmp1296:
    00005160: 	movq	-0x8(%rdx), %rax
    00005164: 	addq	$0x200, %rax
    0000516a: 	jmp	.Ltmp1466 # Offset: 20842
.Ltmp1281:
    0000516f: 	movq	-0x8(%rdx), %rax
    00005173: 	addq	$0x200, %rax
    00005179: 	jmp	.Ltmp1467 # Offset: 20857
.Ltmp1271:
    0000517e: 	movq	-0x8(%rdx), %rax
    00005182: 	addq	$0x200, %rax
    00005188: 	jmp	.Ltmp1468 # Offset: 20872
.Ltmp1259:
    0000518d: 	movq	-0x8(%rdx), %rax
    00005191: 	addq	$0x200, %rax
    00005197: 	jmp	.Ltmp1469 # Offset: 20887
.Ltmp1250:
    0000519c: 	movq	-0x8(%rdx), %rax
    000051a0: 	addq	$0x200, %rax
    000051a6: 	jmp	.Ltmp1470 # Offset: 20902
.Ltmp1243:
    000051ab: 	movq	-0x8(%rdx), %rax
    000051af: 	addq	$0x200, %rax
    000051b5: 	jmp	.Ltmp1471 # Offset: 20917
.Ltmp1236:
    000051ba: 	movq	-0x8(%rdx), %rax
    000051be: 	addq	$0x200, %rax
    000051c4: 	jmp	.Ltmp1472 # Offset: 20932
.Ltmp1229:
    000051c9: 	movq	-0x8(%rdx), %rax
    000051cd: 	addq	$0x200, %rax
    000051d3: 	jmp	.Ltmp1473 # Offset: 20947
.Ltmp1222:
    000051d8: 	movq	-0x8(%rdx), %rax
    000051dc: 	addq	$0x200, %rax
    000051e2: 	jmp	.Ltmp1474 # Offset: 20962
.Ltmp1215:
    000051e7: 	movq	-0x8(%rdx), %rax
    000051eb: 	addq	$0x200, %rax
    000051f1: 	jmp	.Ltmp1475 # Offset: 20977
.Ltmp1205:
    000051f6: 	movq	-0x8(%rdx), %rax
    000051fa: 	addq	$0x200, %rax
    00005200: 	jmp	.Ltmp1476 # Offset: 20992
.Ltmp1194:
    00005205: 	movq	-0x8(%rdx), %rax
    00005209: 	addq	$0x200, %rax
    0000520f: 	jmp	.Ltmp1477 # Offset: 21007
.Ltmp1185:
    00005214: 	movq	-0x8(%rdx), %rax
    00005218: 	addq	$0x200, %rax
    0000521e: 	jmp	.Ltmp1478 # Offset: 21022
.Ltmp1179:
    00005223: 	movq	-0x8(%rdx), %rax
    00005227: 	addq	$0x200, %rax
    0000522d: 	jmp	.Ltmp1479 # Offset: 21037
.Ltmp1177:
    00005232: 	movq	-0x8(%rdx), %rax
    00005236: 	addq	$0x200, %rax
    0000523c: 	jmp	.Ltmp1480 # Offset: 21052
.Ltmp1171:
    00005241: 	movq	-0x8(%rdx), %rax
    00005245: 	addq	$0x200, %rax
    0000524b: 	jmp	.Ltmp1481 # Offset: 21067
.Ltmp1165:
    00005250: 	movq	-0x8(%rdx), %rax
    00005254: 	addq	$0x200, %rax
    0000525a: 	jmp	.Ltmp1482 # Offset: 21082
.Ltmp1159:
    0000525f: 	movq	-0x8(%rdx), %rax
    00005263: 	addq	$0x200, %rax
    00005269: 	jmp	.Ltmp1483 # Offset: 21097
.Ltmp1381:
    0000526e: 	movss	DATAat0x2b92c(%rip), %xmm2
    00005276: 	movaps	%xmm4, %xmm0
    00005279: 	movq	%rax, 0x20(%rsp)
    0000527e: 	movss	%xmm5, 0x10(%rsp)
    00005284: 	movss	%xmm6, 0x30(%rsp)
    0000528a: 	movss	%xmm3, 0xc(%rsp)
    00005290: 	callq	__mulsc3@PLT # Offset: 21136
    00005295: 	movq	0x20(%rsp), %rax
    0000529a: 	movss	0x30(%rsp), %xmm6
    000052a0: 	movq	%xmm0, 0x130(%rsp)
    000052a9: 	movss	0x10(%rsp), %xmm5
    000052af: 	addss	0x130(%rsp), %xmm6
    000052b8: 	addq	$0x8, %rax
    000052bc: 	movss	0xc(%rsp), %xmm3
    000052c2: 	addss	0x134(%rsp), %xmm5
    000052cb: 	cmpq	%rbx, %rax
    000052ce: 	jne	.Ltmp1382 # Offset: 21198
    000052d4: 	jmp	.Ltmp1484 # Offset: 21204
.Ltmp1400:
    000052d9: 	movaps	%xmm2, %xmm3
    000052dc: 	movaps	%xmm8, %xmm0
    000052e0: 	movq	%rax, 0x30(%rsp)
    000052e5: 	movss	%xmm5, 0x20(%rsp)
    000052eb: 	movss	%xmm4, 0x10(%rsp)
    000052f1: 	movss	%xmm2, 0xc(%rsp)
    000052f7: 	callq	__mulsc3@PLT # Offset: 21239
    000052fc: 	movq	0x30(%rsp), %rax
    00005301: 	movss	0x20(%rsp), %xmm5
    00005307: 	movq	%xmm0, 0x100(%rsp)
    00005310: 	movss	0x10(%rsp), %xmm4
    00005316: 	addss	0x100(%rsp), %xmm5
    0000531f: 	addq	$0x8, %rax
    00005323: 	movss	0xc(%rsp), %xmm2
    00005329: 	addss	0x104(%rsp), %xmm4
    00005332: 	cmpq	%rbx, %rax
    00005335: 	jne	.Ltmp1401 # Offset: 21301
    0000533b: 	jmp	.Ltmp1485 # Offset: 21307
.Ltmp1285:
    00005340: 	movaps	%xmm0, %xmm2
    00005343: 	movaps	%xmm14, %xmm3
    00005347: 	movaps	%xmm11, %xmm0
    0000534b: 	movq	%rax, 0xb0(%rsp)
    00005353: 	movaps	%xmm9, %xmm1
    00005357: 	movss	%xmm4, 0xe0(%rsp)
    00005360: 	movss	%xmm5, 0xdc(%rsp)
    00005369: 	movss	%xmm13, 0xd8(%rsp)
    00005373: 	movss	%xmm12, 0xcc(%rsp)
    0000537d: 	movss	%xmm10, 0xc0(%rsp)
    00005387: 	movss	%xmm8, 0xa0(%rsp)
    00005391: 	movss	%xmm7, 0x90(%rsp)
    0000539a: 	movss	%xmm6, 0x80(%rsp)
    000053a3: 	movss	%xmm9, 0x70(%rsp)
    000053aa: 	movss	%xmm11, 0x60(%rsp)
    000053b1: 	callq	__mulsc3@PLT # Offset: 21425
    000053b6: 	movq	0xb0(%rsp), %rax
    000053be: 	movss	0xe0(%rsp), %xmm4
    000053c7: 	movss	0xdc(%rsp), %xmm5
    000053d0: 	movq	%xmm0, 0x2d0(%rsp)
    000053d9: 	movss	0xd8(%rsp), %xmm13
    000053e3: 	movss	0x2d0(%rsp), %xmm2
    000053ec: 	movss	0x2d4(%rsp), %xmm3
    000053f5: 	movss	0x90(%rsp), %xmm7
    000053fe: 	movss	0x70(%rsp), %xmm9
    00005405: 	movss	0x80(%rsp), %xmm6
    0000540e: 	movss	0x60(%rsp), %xmm11
    00005415: 	movss	0xcc(%rsp), %xmm12
    0000541f: 	movss	0xc0(%rsp), %xmm10
    00005429: 	movss	0xa0(%rsp), %xmm8
    00005433: 	jmp	.Ltmp1486 # Offset: 21555
.Ltmp1284:
    00005438: 	movaps	%xmm15, %xmm0
    0000543c: 	movaps	%xmm6, %xmm3
    0000543f: 	movaps	%xmm7, %xmm2
    00005442: 	movss	%xmm6, 0x70(%rsp)
    00005448: 	movq	%rax, 0xa0(%rsp)
    00005450: 	movss	%xmm4, 0xe0(%rsp)
    00005459: 	movss	%xmm5, 0xdc(%rsp)
    00005462: 	movss	%xmm13, 0xd8(%rsp)
    0000546c: 	movss	%xmm12, 0xcc(%rsp)
    00005476: 	movss	%xmm11, 0xc0(%rsp)
    00005480: 	movss	%xmm10, 0xb0(%rsp)
    0000548a: 	movss	%xmm9, 0x90(%rsp)
    00005494: 	movss	%xmm8, 0x80(%rsp)
    0000549e: 	movss	%xmm7, 0x60(%rsp)
    000054a4: 	callq	__mulsc3@PLT # Offset: 21668
    000054a9: 	movq	0xa0(%rsp), %rax
    000054b1: 	movss	0xe0(%rsp), %xmm4
    000054ba: 	movq	%xmm0, 0x2d8(%rsp)
    000054c3: 	movss	0x70(%rsp), %xmm6
    000054c9: 	movss	0x2d8(%rsp), %xmm0
    000054d2: 	movss	0x2dc(%rsp), %xmm14
    000054dc: 	movss	0x60(%rsp), %xmm7
    000054e2: 	movss	0xdc(%rsp), %xmm5
    000054eb: 	movss	0xd8(%rsp), %xmm13
    000054f5: 	movss	0xcc(%rsp), %xmm12
    000054ff: 	movss	0xc0(%rsp), %xmm11
    00005509: 	movss	0xb0(%rsp), %xmm10
    00005513: 	movss	0x90(%rsp), %xmm9
    0000551d: 	movss	0x80(%rsp), %xmm8
    00005527: 	jmp	.Ltmp1487 # Offset: 21799
.Ltmp1287:
    0000552c: 	movaps	%xmm1, %xmm3
    0000552f: 	movaps	%xmm0, %xmm2
    00005532: 	movaps	%xmm10, %xmm1
    00005536: 	movq	%rax, 0xc0(%rsp)
    0000553e: 	movaps	%xmm12, %xmm0
    00005542: 	movss	%xmm4, 0xe0(%rsp)
    0000554b: 	movss	%xmm5, 0xdc(%rsp)
    00005554: 	movss	%xmm13, 0xd8(%rsp)
    0000555e: 	movss	%xmm11, 0xcc(%rsp)
    00005568: 	movss	%xmm9, 0xb0(%rsp)
    00005572: 	movss	%xmm8, 0xa0(%rsp)
    0000557c: 	movss	%xmm7, 0x90(%rsp)
    00005585: 	movss	%xmm6, 0x80(%rsp)
    0000558e: 	movss	%xmm10, 0x70(%rsp)
    00005595: 	movss	%xmm12, 0x60(%rsp)
    0000559c: 	callq	__mulsc3@PLT # Offset: 21916
    000055a1: 	movq	0xc0(%rsp), %rax
    000055a9: 	movss	0xdc(%rsp), %xmm5
    000055b2: 	movss	0xe0(%rsp), %xmm4
    000055bb: 	movss	0x60(%rsp), %xmm12
    000055c2: 	movq	%xmm0, 0x2c0(%rsp)
    000055cb: 	addq	$0x8, %rax
    000055cf: 	movss	0x70(%rsp), %xmm10
    000055d6: 	addss	0x2c0(%rsp), %xmm5
    000055df: 	addss	0x2c4(%rsp), %xmm4
    000055e8: 	cmpq	%rbx, %rax
    000055eb: 	movss	0x80(%rsp), %xmm6
    000055f4: 	movss	0x90(%rsp), %xmm7
    000055fd: 	movss	0xa0(%rsp), %xmm8
    00005607: 	movss	0xb0(%rsp), %xmm9
    00005611: 	movss	0xcc(%rsp), %xmm11
    0000561b: 	movss	0xd8(%rsp), %xmm13
    00005625: 	jne	.Ltmp1288 # Offset: 22053
    0000562b: 	jmp	.Ltmp1488 # Offset: 22059
.Ltmp1286:
    00005630: 	movaps	%xmm8, %xmm0
    00005634: 	movaps	%xmm13, %xmm1
    00005638: 	movq	%rax, 0xb0(%rsp)
    00005640: 	movss	%xmm4, 0xe0(%rsp)
    00005649: 	movss	%xmm5, 0xdc(%rsp)
    00005652: 	movss	%xmm12, 0xd8(%rsp)
    0000565c: 	movss	%xmm11, 0xcc(%rsp)
    00005666: 	movss	%xmm10, 0xc0(%rsp)
    00005670: 	movss	%xmm9, 0xa0(%rsp)
    0000567a: 	movss	%xmm7, 0x90(%rsp)
    00005683: 	movss	%xmm6, 0x80(%rsp)
    0000568c: 	movss	%xmm13, 0x70(%rsp)
    00005693: 	movss	%xmm8, 0x60(%rsp)
    0000569a: 	callq	__mulsc3@PLT # Offset: 22170
    0000569f: 	movq	0xb0(%rsp), %rax
    000056a7: 	movss	0xe0(%rsp), %xmm4
    000056b0: 	movss	0xdc(%rsp), %xmm5
    000056b9: 	movq	%xmm0, 0x2c8(%rsp)
    000056c2: 	movss	0xd8(%rsp), %xmm12
    000056cc: 	movss	0x2c8(%rsp), %xmm0
    000056d5: 	movss	0x2cc(%rsp), %xmm1
    000056de: 	movss	0x90(%rsp), %xmm7
    000056e7: 	movss	0x70(%rsp), %xmm13
    000056ee: 	movss	0x80(%rsp), %xmm6
    000056f7: 	movss	0x60(%rsp), %xmm8
    000056fe: 	movss	0xcc(%rsp), %xmm11
    00005708: 	movss	0xc0(%rsp), %xmm10
    00005712: 	movss	0xa0(%rsp), %xmm9
    0000571c: 	jmp	.Ltmp1489 # Offset: 22300
.Ltmp1253:
    00005721: 	movaps	%xmm7, %xmm0
    00005724: 	movss	%xmm3, 0x70(%rsp)
    0000572a: 	movq	%rax, 0x80(%rsp)
    00005732: 	movss	%xmm6, 0xa0(%rsp)
    0000573b: 	movss	%xmm5, 0x90(%rsp)
    00005744: 	movss	%xmm2, 0x60(%rsp)
    0000574a: 	callq	__mulsc3@PLT # Offset: 22346
    0000574f: 	movq	0x80(%rsp), %rax
    00005757: 	movss	0xa0(%rsp), %xmm6
    00005760: 	movq	%xmm0, 0x368(%rsp)
    00005769: 	movss	0x60(%rsp), %xmm2
    0000576f: 	movss	0x90(%rsp), %xmm5
    00005778: 	addq	$0x8, %rax
    0000577c: 	movss	0x70(%rsp), %xmm3
    00005782: 	addss	0x368(%rsp), %xmm6
    0000578b: 	addss	0x36c(%rsp), %xmm5
    00005794: 	cmpq	%rbx, %rax
    00005797: 	jne	.Ltmp1254 # Offset: 22423
    0000579d: 	jmp	.Ltmp1490 # Offset: 22429
.Ltmp1265:
    000057a2: 	movaps	%xmm4, %xmm3
    000057a5: 	movaps	%xmm9, %xmm2
    000057a9: 	movaps	%xmm5, %xmm0
    000057ac: 	movss	%xmm4, 0x70(%rsp)
    000057b2: 	movaps	%xmm6, %xmm1
    000057b5: 	movss	%xmm9, 0x60(%rsp)
    000057bc: 	movq	%rax, 0xe0(%rsp)
    000057c4: 	movss	%xmm8, 0xdc(%rsp)
    000057ce: 	movss	%xmm7, 0xd8(%rsp)
    000057d7: 	movss	%xmm15, 0xcc(%rsp)
    000057e1: 	movss	%xmm14, 0xc0(%rsp)
    000057eb: 	movss	%xmm13, 0xb0(%rsp)
    000057f5: 	movss	%xmm12, 0xa0(%rsp)
    000057ff: 	movss	%xmm11, 0x90(%rsp)
    00005809: 	movss	%xmm10, 0x80(%rsp)
    00005813: 	callq	__mulsc3@PLT # Offset: 22547
    00005818: 	movq	0xe0(%rsp), %rax
    00005820: 	movss	0xdc(%rsp), %xmm8
    0000582a: 	movq	%xmm0, 0x330(%rsp)
    00005833: 	movss	0x60(%rsp), %xmm9
    0000583a: 	movss	0xd8(%rsp), %xmm7
    00005843: 	addq	$0x8, %rax
    00005847: 	movss	0x70(%rsp), %xmm4
    0000584d: 	addss	0x330(%rsp), %xmm8
    00005857: 	addss	0x334(%rsp), %xmm7
    00005860: 	cmpq	%rbx, %rax
    00005863: 	movss	0x80(%rsp), %xmm10
    0000586d: 	movss	0x90(%rsp), %xmm11
    00005877: 	movss	0xa0(%rsp), %xmm12
    00005881: 	movss	0xb0(%rsp), %xmm13
    0000588b: 	movss	0xc0(%rsp), %xmm14
    00005895: 	movss	0xcc(%rsp), %xmm15
    0000589f: 	jne	.Ltmp1266 # Offset: 22687
    000058a5: 	jmp	.Ltmp1491 # Offset: 22693
.Ltmp1264:
    000058aa: 	movaps	%xmm1, %xmm3
    000058ad: 	movaps	%xmm0, %xmm2
    000058b0: 	movaps	%xmm11, %xmm1
    000058b4: 	movq	%rax, 0xe0(%rsp)
    000058bc: 	movaps	%xmm12, %xmm0
    000058c0: 	movss	%xmm8, 0xdc(%rsp)
    000058ca: 	movss	%xmm7, 0xd8(%rsp)
    000058d3: 	movss	%xmm15, 0xcc(%rsp)
    000058dd: 	movss	%xmm14, 0xc0(%rsp)
    000058e7: 	movss	%xmm13, 0xb0(%rsp)
    000058f1: 	movss	%xmm10, 0xa0(%rsp)
    000058fb: 	movss	%xmm5, 0x90(%rsp)
    00005904: 	movss	%xmm6, 0x80(%rsp)
    0000590d: 	movss	%xmm11, 0x70(%rsp)
    00005914: 	movss	%xmm12, 0x60(%rsp)
    0000591b: 	callq	__mulsc3@PLT # Offset: 22811
    00005920: 	movq	0xe0(%rsp), %rax
    00005928: 	movss	0xdc(%rsp), %xmm8
    00005932: 	movss	0xd8(%rsp), %xmm7
    0000593b: 	movq	%xmm0, 0x338(%rsp)
    00005944: 	movss	0xcc(%rsp), %xmm15
    0000594e: 	movss	0x33c(%rsp), %xmm4
    00005957: 	movss	0x338(%rsp), %xmm9
    00005961: 	movss	0x90(%rsp), %xmm5
    0000596a: 	movss	0x70(%rsp), %xmm11
    00005971: 	movss	0x80(%rsp), %xmm6
    0000597a: 	movss	0x60(%rsp), %xmm12
    00005981: 	movss	0xc0(%rsp), %xmm14
    0000598b: 	movss	0xb0(%rsp), %xmm13
    00005995: 	movss	0xa0(%rsp), %xmm10
    0000599f: 	jmp	.Ltmp1492 # Offset: 22943
.Ltmp1263:
    000059a4: 	movaps	%xmm10, %xmm0
    000059a8: 	movaps	%xmm13, %xmm1
    000059ac: 	movq	%rax, 0xe0(%rsp)
    000059b4: 	movss	%xmm8, 0xdc(%rsp)
    000059be: 	movss	%xmm7, 0xd8(%rsp)
    000059c7: 	movss	%xmm15, 0xcc(%rsp)
    000059d1: 	movss	%xmm14, 0xc0(%rsp)
    000059db: 	movss	%xmm12, 0xb0(%rsp)
    000059e5: 	movss	%xmm11, 0xa0(%rsp)
    000059ef: 	movss	%xmm5, 0x90(%rsp)
    000059f8: 	movss	%xmm6, 0x80(%rsp)
    00005a01: 	movss	%xmm13, 0x70(%rsp)
    00005a08: 	movss	%xmm10, 0x60(%rsp)
    00005a0f: 	callq	__mulsc3@PLT # Offset: 23055
    00005a14: 	movq	0xe0(%rsp), %rax
    00005a1c: 	movss	0xdc(%rsp), %xmm8
    00005a26: 	movss	0xd8(%rsp), %xmm7
    00005a2f: 	movq	%xmm0, 0x340(%rsp)
    00005a38: 	movss	0xcc(%rsp), %xmm15
    00005a42: 	movss	0x340(%rsp), %xmm0
    00005a4b: 	movss	0x344(%rsp), %xmm1
    00005a54: 	movss	0x90(%rsp), %xmm5
    00005a5d: 	movss	0x70(%rsp), %xmm13
    00005a64: 	movss	0x80(%rsp), %xmm6
    00005a6d: 	movss	0x60(%rsp), %xmm10
    00005a74: 	movss	0xc0(%rsp), %xmm14
    00005a7e: 	movss	0xb0(%rsp), %xmm12
    00005a88: 	movss	0xa0(%rsp), %xmm11
    00005a92: 	jmp	.Ltmp1493 # Offset: 23186
.Ltmp1262:
    00005a97: 	movss	0xc8(%rsp), %xmm3
    00005aa0: 	movss	0x48(%rsp), %xmm2
    00005aa6: 	movq	%rax, 0xe0(%rsp)
    00005aae: 	movss	0xc(%rsp), %xmm0
    00005ab4: 	movss	0x30(%rsp), %xmm1
    00005aba: 	movss	%xmm8, 0xdc(%rsp)
    00005ac4: 	movss	%xmm7, 0xd8(%rsp)
    00005acd: 	movss	%xmm15, 0xcc(%rsp)
    00005ad7: 	movss	%xmm14, 0xc0(%rsp)
    00005ae1: 	movss	%xmm13, 0xb0(%rsp)
    00005aeb: 	movss	%xmm12, 0xa0(%rsp)
    00005af5: 	movss	%xmm11, 0x90(%rsp)
    00005aff: 	movss	%xmm10, 0x80(%rsp)
    00005b09: 	movss	%xmm5, 0x70(%rsp)
    00005b0f: 	movss	%xmm6, 0x60(%rsp)
    00005b15: 	callq	__mulsc3@PLT # Offset: 23317
    00005b1a: 	movss	0x60(%rsp), %xmm6
    00005b20: 	movss	0x70(%rsp), %xmm5
    00005b26: 	movq	%xmm0, 0x348(%rsp)
    00005b2f: 	movss	0x80(%rsp), %xmm10
    00005b39: 	movss	0x348(%rsp), %xmm2
    00005b42: 	movss	0x34c(%rsp), %xmm3
    00005b4b: 	movss	0x90(%rsp), %xmm11
    00005b55: 	movss	0xa0(%rsp), %xmm12
    00005b5f: 	movss	0xb0(%rsp), %xmm13
    00005b69: 	movss	0xc0(%rsp), %xmm14
    00005b73: 	movss	0xcc(%rsp), %xmm15
    00005b7d: 	movss	0xd8(%rsp), %xmm7
    00005b86: 	movq	0xe0(%rsp), %rax
    00005b8e: 	movss	0xdc(%rsp), %xmm8
    00005b98: 	jmp	.Ltmp1494 # Offset: 23448
.Ltmp1276:
    00005b9d: 	movaps	%xmm11, %xmm1
    00005ba1: 	movaps	%xmm12, %xmm0
    00005ba5: 	movq	%rax, 0xa0(%rsp)
    00005bad: 	movss	%xmm10, 0xd8(%rsp)
    00005bb7: 	movss	%xmm7, 0xcc(%rsp)
    00005bc0: 	movss	%xmm8, 0xc0(%rsp)
    00005bca: 	movss	%xmm9, 0xb0(%rsp)
    00005bd4: 	movss	%xmm6, 0x90(%rsp)
    00005bdd: 	movss	%xmm5, 0x80(%rsp)
    00005be6: 	movss	%xmm11, 0x70(%rsp)
    00005bed: 	movss	%xmm12, 0x60(%rsp)
    00005bf4: 	callq	__mulsc3@PLT # Offset: 23540
    00005bf9: 	movq	0xa0(%rsp), %rax
    00005c01: 	movss	0x90(%rsp), %xmm6
    00005c0a: 	movss	0x80(%rsp), %xmm5
    00005c13: 	movq	%xmm0, 0x308(%rsp)
    00005c1c: 	movss	0x308(%rsp), %xmm4
    00005c25: 	movss	0x30c(%rsp), %xmm1
    00005c2e: 	addq	$0x8, %rax
    00005c32: 	movss	0xb0(%rsp), %xmm9
    00005c3c: 	addss	%xmm4, %xmm6
    00005c40: 	cmpq	%rbx, %rax
    00005c43: 	movss	0xc0(%rsp), %xmm8
    00005c4d: 	movss	0x60(%rsp), %xmm12
    00005c54: 	addss	%xmm1, %xmm5
    00005c58: 	movss	0x70(%rsp), %xmm11
    00005c5f: 	movss	0xcc(%rsp), %xmm7
    00005c68: 	movss	0xd8(%rsp), %xmm10
    00005c72: 	addss	%xmm6, %xmm9
    00005c77: 	addss	%xmm5, %xmm8
    00005c7c: 	jne	.Ltmp1277 # Offset: 23676
    00005c82: 	jmp	.Ltmp1495 # Offset: 23682
.Ltmp1275:
    00005c87: 	movss	0x20(%rsp), %xmm3
    00005c8d: 	movss	0x10(%rsp), %xmm2
    00005c93: 	movq	%rax, 0xa0(%rsp)
    00005c9b: 	movss	0x40(%rsp), %xmm0
    00005ca1: 	movss	0x4c(%rsp), %xmm1
    00005ca7: 	movss	%xmm10, 0xd8(%rsp)
    00005cb1: 	movss	%xmm7, 0xcc(%rsp)
    00005cba: 	movss	%xmm8, 0xc0(%rsp)
    00005cc4: 	movss	%xmm9, 0xb0(%rsp)
    00005cce: 	movss	%xmm12, 0x90(%rsp)
    00005cd8: 	movss	%xmm11, 0x80(%rsp)
    00005ce2: 	movss	%xmm6, 0x70(%rsp)
    00005ce8: 	movss	%xmm5, 0x60(%rsp)
    00005cee: 	callq	__mulsc3@PLT # Offset: 23790
    00005cf3: 	movss	0x60(%rsp), %xmm5
    00005cf9: 	movss	0x70(%rsp), %xmm6
    00005cff: 	movq	%xmm0, 0x310(%rsp)
    00005d08: 	movq	0xa0(%rsp), %rax
    00005d10: 	movss	0x310(%rsp), %xmm2
    00005d19: 	movss	0x314(%rsp), %xmm3
    00005d22: 	movss	0x80(%rsp), %xmm11
    00005d2c: 	movss	0x90(%rsp), %xmm12
    00005d36: 	movss	0xb0(%rsp), %xmm9
    00005d40: 	movss	0xc0(%rsp), %xmm8
    00005d4a: 	movss	0xcc(%rsp), %xmm7
    00005d53: 	movss	0xd8(%rsp), %xmm10
    00005d5d: 	jmp	.Ltmp1496 # Offset: 23901
.Ltmp1274:
    00005d62: 	movss	0xc(%rsp), %xmm0
    00005d68: 	movss	0x30(%rsp), %xmm1
    00005d6e: 	movss	0xc8(%rsp), %xmm3
    00005d77: 	movss	0x48(%rsp), %xmm2
    00005d7d: 	callq	__mulsc3@PLT # Offset: 23933
    00005d82: 	movss	0x40(%rsp), %xmm3
    00005d88: 	movss	0x4c(%rsp), %xmm7
    00005d8e: 	movq	%rbp, 0xa0(%rsp)
    00005d96: 	movq	%xmm0, 0x300(%rsp)
    00005d9f: 	movss	(%rsp), %xmm9
    00005da5: 	movss	0x300(%rsp), %xmm6
    00005dae: 	movss	0x304(%rsp), %xmm5
    00005db7: 	movaps	%xmm3, %xmm1
    00005dba: 	movaps	%xmm7, %xmm0
    00005dbd: 	mulss	%xmm6, %xmm1
    00005dc1: 	movaps	%xmm9, %xmm8
    00005dc5: 	movss	%xmm6, 0xb0(%rsp)
    00005dce: 	movss	%xmm5, 0xc0(%rsp)
    00005dd7: 	mulss	%xmm5, %xmm0
    00005ddb: 	mulss	%xmm6, %xmm7
    00005ddf: 	mulss	%xmm5, %xmm3
    00005de3: 	subss	%xmm0, %xmm1
    00005de7: 	movss	%xmm1, 0x70(%rsp)
    00005ded: 	movaps	%xmm7, %xmm1
    00005df0: 	addss	%xmm3, %xmm1
    00005df4: 	movss	%xmm1, 0x60(%rsp)
.Ltmp1499:
    00005dfa: 	movss	(%rbp), %xmm6
    00005dff: 	movss	%xmm6, 0x90(%rsp)
    00005e08: 	movss	0x4(%rbp), %xmm6
    00005e0d: 	movss	%xmm6, 0x80(%rsp)
    00005e16: 	movss	0x60(%rsp), %xmm6
    00005e1c: 	ucomiss	0x70(%rsp), %xmm6
    00005e21: 	jp	.Ltmp1497 # Offset: 24097
    00005e27: 	movss	0x70(%rsp), %xmm2
    00005e2d: 	movaps	%xmm6, %xmm3
.Ltmp1538:
    00005e30: 	movss	0x44(%rsp), %xmm6
    00005e36: 	movss	0x3c(%rsp), %xmm7
    00005e3c: 	movaps	%xmm6, %xmm0
    00005e3f: 	movaps	%xmm7, %xmm4
    00005e42: 	mulss	%xmm2, %xmm6
    00005e46: 	mulss	%xmm3, %xmm0
    00005e4a: 	mulss	%xmm2, %xmm4
    00005e4e: 	mulss	%xmm3, %xmm7
    00005e52: 	movaps	%xmm6, %xmm1
    00005e55: 	subss	%xmm0, %xmm4
    00005e59: 	addss	%xmm7, %xmm1
    00005e5d: 	ucomiss	%xmm4, %xmm1
    00005e60: 	jp	.Ltmp1498 # Offset: 24160
    00005e66: 	movss	0x90(%rsp), %xmm0
    00005e6f: 	addq	$0x8, %rbp
    00005e73: 	addss	%xmm4, %xmm0
    00005e77: 	addss	%xmm0, %xmm9
    00005e7c: 	movss	0x80(%rsp), %xmm0
    00005e85: 	addss	%xmm1, %xmm0
    00005e89: 	addss	%xmm0, %xmm8
    00005e8e: 	cmpq	%rbx, %rbp
    00005e91: 	jne	.Ltmp1499 # Offset: 24209
.Ltmp1537:
    00005e97: 	movq	0xa0(%rsp), %rbp
    00005e9f: 	jmp	.Ltmp1495 # Offset: 24223
.Ltmp1278:
    00005ea4: 	movss	0x38(%rsp), %xmm2
    00005eaa: 	pxor	%xmm3, %xmm3
    00005eae: 	movss	%xmm8, 0x70(%rsp)
    00005eb5: 	movss	%xmm9, 0x60(%rsp)
    00005ebc: 	callq	__mulsc3@PLT # Offset: 24252
    00005ec1: 	movss	0x70(%rsp), %xmm8
    00005ec8: 	movss	0x60(%rsp), %xmm9
    00005ecf: 	movq	%xmm0, 0x2e8(%rsp)
    00005ed8: 	movss	0x2e8(%rsp), %xmm3
    00005ee1: 	movss	0x2ec(%rsp), %xmm2
    00005eea: 	jmp	.Ltmp1500 # Offset: 24298
.Ltmp1322:
    00005eef: 	movss	0x38(%rsp), %xmm2
    00005ef5: 	pxor	%xmm3, %xmm3
    00005ef9: 	movss	%xmm5, 0x70(%rsp)
    00005eff: 	movss	%xmm4, 0x60(%rsp)
    00005f05: 	callq	__mulsc3@PLT # Offset: 24325
    00005f0a: 	movss	0x70(%rsp), %xmm5
    00005f10: 	movss	0x60(%rsp), %xmm4
    00005f16: 	movq	%xmm0, 0x1d8(%rsp)
    00005f1f: 	movss	0x1d8(%rsp), %xmm3
    00005f28: 	movss	0x1dc(%rsp), %xmm2
    00005f31: 	jmp	.Ltmp1501 # Offset: 24369
.Ltmp1320:
    00005f36: 	movss	0x48(%rsp), %xmm0
    00005f3c: 	movss	0x4c(%rsp), %xmm3
    00005f42: 	movss	0xc8(%rsp), %xmm1
    00005f4b: 	movss	0x40(%rsp), %xmm2
    00005f51: 	callq	__mulsc3@PLT # Offset: 24401
    00005f56: 	movss	0x3c(%rsp), %xmm2
    00005f5c: 	movss	0x44(%rsp), %xmm3
    00005f62: 	movq	%xmm0, 0x1e8(%rsp)
    00005f6b: 	movss	0x1ec(%rsp), %xmm1
    00005f74: 	movss	0x1e8(%rsp), %xmm0
    00005f7d: 	callq	__divsc3@PLT # Offset: 24445
    00005f82: 	movss	0xc(%rsp), %xmm2
    00005f88: 	movss	(%rsp), %xmm5
    00005f8d: 	movq	%rbp, %rax
    00005f90: 	movq	%xmm0, 0x1e0(%rsp)
    00005f99: 	movss	0x30(%rsp), %xmm1
    00005f9f: 	subss	0x1e0(%rsp), %xmm2
    00005fa8: 	subss	0x1e4(%rsp), %xmm1
    00005fb1: 	movaps	%xmm5, %xmm4
.Ltmp1502:
    00005fb4: 	movss	(%rax), %xmm0
    00005fb8: 	addq	$0x8, %rax
    00005fbc: 	addss	%xmm2, %xmm0
    00005fc0: 	addss	%xmm0, %xmm5
    00005fc4: 	movss	-0x4(%rax), %xmm0
    00005fc9: 	addss	%xmm1, %xmm0
    00005fcd: 	addss	%xmm0, %xmm4
    00005fd1: 	cmpq	%rbx, %rax
    00005fd4: 	jne	.Ltmp1502 # Offset: 24532
    00005fd6: 	jmp	.Ltmp1503 # Offset: 24534
.Ltmp1384:
    00005fdb: 	movss	0x38(%rsp), %xmm2
    00005fe1: 	movaps	%xmm4, %xmm0
    00005fe4: 	pxor	%xmm3, %xmm3
    00005fe8: 	movss	%xmm5, 0x30(%rsp)
    00005fee: 	movss	%xmm6, 0xc(%rsp)
    00005ff4: 	callq	__mulsc3@PLT # Offset: 24564
    00005ff9: 	movss	0x30(%rsp), %xmm5
    00005fff: 	movss	0xc(%rsp), %xmm6
    00006005: 	movq	%xmm0, 0x120(%rsp)
    0000600e: 	movss	0x120(%rsp), %xmm0
    00006017: 	movss	0x124(%rsp), %xmm2
    00006020: 	jmp	.Ltmp1504 # Offset: 24608
.Ltmp1383:
    00006025: 	movss	(%rsp), %xmm3
    0000602a: 	movaps	%xmm4, %xmm0
    0000602d: 	movss	DATAat0x2b92c(%rip), %xmm2
    00006035: 	movss	%xmm5, 0x30(%rsp)
    0000603b: 	movss	%xmm6, 0xc(%rsp)
    00006041: 	movaps	%xmm3, %xmm1
    00006044: 	callq	__mulsc3@PLT # Offset: 24644
    00006049: 	movss	(%rsp), %xmm3
    0000604e: 	movss	0x30(%rsp), %xmm5
    00006054: 	movq	%xmm0, 0x128(%rsp)
    0000605d: 	movss	0xc(%rsp), %xmm6
    00006063: 	movss	0x128(%rsp), %xmm4
    0000606c: 	movss	0x12c(%rsp), %xmm1
    00006075: 	mulss	%xmm4, %xmm3
    00006079: 	jmp	.Ltmp1505 # Offset: 24697
.Ltmp1300:
    0000607e: 	movss	0x38(%rsp), %xmm2
    00006084: 	movaps	%xmm4, %xmm0
    00006087: 	pxor	%xmm3, %xmm3
    0000608b: 	callq	__mulsc3@PLT # Offset: 24715
    00006090: 	movq	%xmm0, 0x278(%rsp)
    00006099: 	movss	0x278(%rsp), %xmm0
    000060a2: 	movss	0x27c(%rsp), %xmm2
    000060ab: 	jmp	.Ltmp1506 # Offset: 24747
.Ltmp1256:
    000060b0: 	pxor	%xmm3, %xmm3
    000060b4: 	movaps	%xmm13, %xmm2
    000060b8: 	movss	%xmm6, 0x70(%rsp)
    000060be: 	movss	%xmm5, 0x60(%rsp)
    000060c4: 	callq	__mulsc3@PLT # Offset: 24772
    000060c9: 	movss	0x70(%rsp), %xmm6
    000060cf: 	movss	0x60(%rsp), %xmm5
    000060d5: 	movq	%xmm0, 0x358(%rsp)
    000060de: 	movss	0x358(%rsp), %xmm3
    000060e7: 	movss	0x35c(%rsp), %xmm2
    000060f0: 	jmp	.Ltmp1507 # Offset: 24816
.Ltmp1255:
    000060f5: 	movss	0xc(%rsp), %xmm0
    000060fb: 	movss	0x30(%rsp), %xmm1
    00006101: 	pxor	%xmm3, %xmm3
    00006105: 	movss	%xmm6, 0x70(%rsp)
    0000610b: 	movss	%xmm5, 0x60(%rsp)
    00006111: 	callq	__mulsc3@PLT # Offset: 24849
    00006116: 	movss	0x70(%rsp), %xmm6
    0000611c: 	movss	0x60(%rsp), %xmm5
    00006122: 	movq	%xmm0, 0x360(%rsp)
    0000612b: 	movss	0x360(%rsp), %xmm0
    00006134: 	movss	0x364(%rsp), %xmm1
    0000613d: 	jmp	.Ltmp1508 # Offset: 24893
.Ltmp1290:
    00006142: 	movss	0xc8(%rsp), %xmm1
    0000614b: 	movaps	%xmm13, %xmm0
    0000614f: 	movss	%xmm4, 0x70(%rsp)
    00006155: 	movss	%xmm5, 0x60(%rsp)
    0000615b: 	callq	__mulsc3@PLT # Offset: 24923
    00006160: 	movss	0x70(%rsp), %xmm4
    00006166: 	movss	0x60(%rsp), %xmm5
    0000616c: 	movq	%xmm0, 0x2b0(%rsp)
    00006175: 	movss	0x2b0(%rsp), %xmm0
    0000617e: 	movss	0x2b4(%rsp), %xmm1
    00006187: 	jmp	.Ltmp1509 # Offset: 24967
.Ltmp1289:
    0000618c: 	movaps	%xmm0, %xmm2
    0000618f: 	movss	0x30(%rsp), %xmm1
    00006195: 	pxor	%xmm3, %xmm3
    00006199: 	movss	0xc(%rsp), %xmm0
    0000619f: 	movss	%xmm4, 0x70(%rsp)
    000061a5: 	movss	%xmm5, 0x60(%rsp)
    000061ab: 	callq	__mulsc3@PLT # Offset: 25003
    000061b0: 	movss	0x70(%rsp), %xmm4
    000061b6: 	movss	0x60(%rsp), %xmm5
    000061bc: 	movq	%xmm0, 0x2b8(%rsp)
    000061c5: 	movss	0x2b8(%rsp), %xmm2
    000061ce: 	movss	0x2bc(%rsp), %xmm3
    000061d7: 	jmp	.Ltmp1510 # Offset: 25047
.Ltmp1219:
    000061dc: 	movss	0x38(%rsp), %xmm2
    000061e2: 	pxor	%xmm3, %xmm3
    000061e6: 	movss	0x90(%rsp), %xmm1
    000061ef: 	movss	%xmm4, 0xb0(%rsp)
    000061f8: 	movss	%xmm5, 0xa0(%rsp)
    00006201: 	callq	__mulsc3@PLT # Offset: 25089
    00006206: 	movss	0xb0(%rsp), %xmm4
    0000620f: 	movss	0xa0(%rsp), %xmm5
    00006218: 	movq	%xmm0, 0x3b8(%rsp)
    00006221: 	movss	0x3b8(%rsp), %xmm2
    0000622a: 	movss	0x3bc(%rsp), %xmm1
    00006233: 	jmp	.Ltmp1511 # Offset: 25139
.Ltmp1240:
    00006238: 	movss	0x38(%rsp), %xmm2
    0000623e: 	pxor	%xmm3, %xmm3
    00006242: 	movss	0x90(%rsp), %xmm1
    0000624b: 	movss	%xmm4, 0xb0(%rsp)
    00006254: 	movss	%xmm5, 0xa0(%rsp)
    0000625d: 	callq	__mulsc3@PLT # Offset: 25181
    00006262: 	movss	0xb0(%rsp), %xmm4
    0000626b: 	movss	0xa0(%rsp), %xmm5
    00006274: 	movq	%xmm0, 0x388(%rsp)
    0000627d: 	movss	0x388(%rsp), %xmm2
    00006286: 	movss	0x38c(%rsp), %xmm1
    0000628f: 	jmp	.Ltmp1512 # Offset: 25231
.Ltmp1233:
    00006294: 	movss	0x38(%rsp), %xmm2
    0000629a: 	pxor	%xmm3, %xmm3
    0000629e: 	movss	0x80(%rsp), %xmm1
    000062a7: 	movss	%xmm4, 0xa0(%rsp)
    000062b0: 	movss	%xmm5, 0x90(%rsp)
    000062b9: 	callq	__mulsc3@PLT # Offset: 25273
    000062be: 	movss	0xa0(%rsp), %xmm4
    000062c7: 	movss	0x90(%rsp), %xmm5
    000062d0: 	movq	%xmm0, 0x398(%rsp)
    000062d9: 	movss	0x398(%rsp), %xmm2
    000062e2: 	movss	0x39c(%rsp), %xmm1
    000062eb: 	jmp	.Ltmp1513 # Offset: 25323
.Ltmp1330:
    000062f0: 	movss	0x38(%rsp), %xmm2
    000062f6: 	pxor	%xmm3, %xmm3
    000062fa: 	movss	%xmm5, 0x70(%rsp)
    00006300: 	movss	%xmm4, 0x60(%rsp)
    00006306: 	callq	__mulsc3@PLT # Offset: 25350
    0000630b: 	movss	0x70(%rsp), %xmm5
    00006311: 	movss	0x60(%rsp), %xmm4
    00006317: 	movq	%xmm0, 0x1b0(%rsp)
    00006320: 	movss	0x1b0(%rsp), %xmm3
    00006329: 	movss	0x1b4(%rsp), %xmm2
    00006332: 	jmp	.Ltmp1514 # Offset: 25394
.Ltmp1328:
    00006337: 	movss	0x48(%rsp), %xmm0
    0000633d: 	movss	0x4c(%rsp), %xmm3
    00006343: 	movss	0xc8(%rsp), %xmm1
    0000634c: 	movss	0x40(%rsp), %xmm2
    00006352: 	callq	__mulsc3@PLT # Offset: 25426
    00006357: 	movss	0x44(%rsp), %xmm3
    0000635d: 	movss	0x3c(%rsp), %xmm2
    00006363: 	movq	%xmm0, 0x1c0(%rsp)
    0000636c: 	movss	0x1c4(%rsp), %xmm1
    00006375: 	movss	0x1c0(%rsp), %xmm0
    0000637e: 	callq	__divsc3@PLT # Offset: 25470
    00006383: 	movss	(%rsp), %xmm5
    00006388: 	movq	%rbp, %rax
    0000638b: 	movq	%xmm0, 0x1b8(%rsp)
    00006394: 	movss	0x1b8(%rsp), %xmm2
    0000639d: 	movss	0x1bc(%rsp), %xmm1
    000063a6: 	movaps	%xmm5, %xmm4
    000063a9: 	movaps	%xmm2, %xmm6
    000063ac: 	movaps	%xmm1, %xmm3
.Ltmp1515:
    000063af: 	movss	0xc(%rsp), %xmm0
    000063b5: 	addss	(%rax), %xmm0
    000063b9: 	addq	$0x8, %rax
    000063bd: 	subss	%xmm2, %xmm0
    000063c1: 	addss	%xmm0, %xmm5
    000063c5: 	movss	0x30(%rsp), %xmm0
    000063cb: 	addss	-0x4(%rax), %xmm0
    000063d0: 	subss	%xmm1, %xmm0
    000063d4: 	addss	%xmm0, %xmm4
    000063d8: 	cmpq	%rbx, %rax
    000063db: 	jne	.Ltmp1515 # Offset: 25563
    000063dd: 	jmp	.Ltmp1516 # Offset: 25565
.Ltmp1403:
    000063e2: 	movss	0x38(%rsp), %xmm2
    000063e8: 	movaps	%xmm6, %xmm0
    000063eb: 	pxor	%xmm3, %xmm3
    000063ef: 	movss	%xmm5, 0x30(%rsp)
    000063f5: 	movss	%xmm4, 0xc(%rsp)
    000063fb: 	callq	__mulsc3@PLT # Offset: 25595
    00006400: 	movss	0x30(%rsp), %xmm5
    00006406: 	movss	0xc(%rsp), %xmm4
    0000640c: 	movq	%xmm0, 0xf0(%rsp)
    00006415: 	movss	0xf0(%rsp), %xmm2
    0000641e: 	movss	0xf4(%rsp), %xmm0
    00006427: 	jmp	.Ltmp1517 # Offset: 25639
.Ltmp1402:
    0000642c: 	movss	(%rsp), %xmm2
    00006431: 	movss	%xmm5, 0x30(%rsp)
    00006437: 	movss	%xmm4, 0xc(%rsp)
    0000643d: 	movaps	%xmm2, %xmm1
    00006440: 	movaps	%xmm2, %xmm3
    00006443: 	callq	__mulsc3@PLT # Offset: 25667
    00006448: 	movss	0x30(%rsp), %xmm5
    0000644e: 	movss	0xc(%rsp), %xmm4
    00006454: 	movq	%xmm0, 0xf8(%rsp)
    0000645d: 	movss	0xf8(%rsp), %xmm6
    00006466: 	movss	0xfc(%rsp), %xmm1
    0000646f: 	jmp	.Ltmp1518 # Offset: 25711
.Ltmp1391:
    00006474: 	movss	0x38(%rsp), %xmm2
    0000647a: 	movaps	%xmm6, %xmm0
    0000647d: 	movaps	%xmm7, %xmm1
    00006480: 	movaps	%xmm7, %xmm3
    00006483: 	movss	%xmm4, 0x30(%rsp)
    00006489: 	movss	%xmm5, 0xc(%rsp)
    0000648f: 	callq	__mulsc3@PLT # Offset: 25743
    00006494: 	movss	0x30(%rsp), %xmm4
    0000649a: 	movss	0xc(%rsp), %xmm5
    000064a0: 	movq	%xmm0, 0x110(%rsp)
    000064a9: 	movss	0x110(%rsp), %xmm1
    000064b2: 	movss	0x114(%rsp), %xmm0
    000064bb: 	jmp	.Ltmp1519 # Offset: 25787
.Ltmp1360:
    000064c0: 	movss	0x38(%rsp), %xmm2
    000064c6: 	movaps	%xmm6, %xmm0
    000064c9: 	movaps	%xmm7, %xmm1
    000064cc: 	movaps	%xmm7, %xmm3
    000064cf: 	movss	%xmm4, 0x30(%rsp)
    000064d5: 	movss	%xmm5, 0xc(%rsp)
    000064db: 	callq	__mulsc3@PLT # Offset: 25819
    000064e0: 	movss	0x30(%rsp), %xmm4
    000064e6: 	movss	0xc(%rsp), %xmm5
    000064ec: 	movq	%xmm0, 0x160(%rsp)
    000064f5: 	movss	0x160(%rsp), %xmm1
    000064fe: 	movss	0x164(%rsp), %xmm0
    00006507: 	jmp	.Ltmp1520 # Offset: 25863
.Ltmp1346:
    0000650c: 	movss	0x38(%rsp), %xmm2
    00006512: 	movaps	%xmm6, %xmm0
    00006515: 	movaps	%xmm7, %xmm1
    00006518: 	movaps	%xmm7, %xmm3
    0000651b: 	movss	%xmm4, 0x30(%rsp)
    00006521: 	movss	%xmm5, 0xc(%rsp)
    00006527: 	callq	__mulsc3@PLT # Offset: 25895
    0000652c: 	movss	0x30(%rsp), %xmm4
    00006532: 	movss	0xc(%rsp), %xmm5
    00006538: 	movq	%xmm0, 0x180(%rsp)
    00006541: 	movss	0x180(%rsp), %xmm1
    0000654a: 	movss	0x184(%rsp), %xmm0
    00006553: 	jmp	.Ltmp1521 # Offset: 25939
.Ltmp1375:
    00006558: 	movss	0x38(%rsp), %xmm2
    0000655e: 	movaps	%xmm6, %xmm0
    00006561: 	movaps	%xmm7, %xmm1
    00006564: 	movaps	%xmm7, %xmm3
    00006567: 	movss	%xmm4, 0x30(%rsp)
    0000656d: 	movss	%xmm5, 0xc(%rsp)
    00006573: 	callq	__mulsc3@PLT # Offset: 25971
    00006578: 	movss	0x30(%rsp), %xmm4
    0000657e: 	movss	0xc(%rsp), %xmm5
    00006584: 	movq	%xmm0, 0x140(%rsp)
    0000658d: 	movss	0x140(%rsp), %xmm1
    00006596: 	movss	0x144(%rsp), %xmm0
    0000659f: 	jmp	.Ltmp1522 # Offset: 26015
.Ltmp1353:
    000065a4: 	movss	0x38(%rsp), %xmm2
    000065aa: 	movaps	%xmm7, %xmm1
    000065ad: 	movaps	%xmm7, %xmm3
    000065b0: 	movss	%xmm4, 0x30(%rsp)
    000065b6: 	movss	%xmm5, 0xc(%rsp)
    000065bc: 	callq	__mulsc3@PLT # Offset: 26044
    000065c1: 	movss	0x30(%rsp), %xmm4
    000065c7: 	movss	0xc(%rsp), %xmm5
    000065cd: 	movq	%xmm0, 0x170(%rsp)
    000065d6: 	movss	0x170(%rsp), %xmm2
    000065df: 	movss	0x174(%rsp), %xmm1
    000065e8: 	jmp	.Ltmp1523 # Offset: 26088
.Ltmp1368:
    000065ed: 	movss	0x38(%rsp), %xmm2
    000065f3: 	movaps	%xmm6, %xmm0
    000065f6: 	movaps	%xmm7, %xmm1
    000065f9: 	movaps	%xmm7, %xmm3
    000065fc: 	movss	%xmm4, 0x30(%rsp)
    00006602: 	movss	%xmm5, 0xc(%rsp)
    00006608: 	callq	__mulsc3@PLT # Offset: 26120
    0000660d: 	movss	0x30(%rsp), %xmm4
    00006613: 	movss	0xc(%rsp), %xmm5
    00006619: 	movq	%xmm0, 0x150(%rsp)
    00006622: 	movss	0x150(%rsp), %xmm1
    0000662b: 	movss	0x154(%rsp), %xmm0
    00006634: 	jmp	.Ltmp1524 # Offset: 26164
.Ltmp1191:
    00006639: 	movss	0x38(%rsp), %xmm2
    0000663f: 	pxor	%xmm3, %xmm3
    00006643: 	movss	DATAat0x2b860(%rip), %xmm1
    0000664b: 	movss	%xmm4, 0x20(%rsp)
    00006651: 	movss	%xmm5, 0x10(%rsp)
    00006657: 	callq	__mulsc3@PLT # Offset: 26199
    0000665c: 	movss	0x20(%rsp), %xmm4
    00006662: 	movss	0x10(%rsp), %xmm5
    00006668: 	movq	%xmm0, 0x3f8(%rsp)
    00006671: 	movss	0x3f8(%rsp), %xmm2
    0000667a: 	movss	0x3fc(%rsp), %xmm1
    00006683: 	jmp	.Ltmp1525 # Offset: 26243
.Ltmp1307:
    00006688: 	movss	0x38(%rsp), %xmm2
    0000668e: 	movaps	%xmm4, %xmm0
    00006691: 	pxor	%xmm3, %xmm3
    00006695: 	callq	__mulsc3@PLT # Offset: 26261
    0000669a: 	movq	%xmm0, 0x228(%rsp)
    000066a3: 	movss	0x228(%rsp), %xmm0
    000066ac: 	movss	0x22c(%rsp), %xmm2
    000066b5: 	jmp	.Ltmp1526 # Offset: 26293
.Ltmp1314:
    000066ba: 	movss	0x38(%rsp), %xmm2
    000066c0: 	pxor	%xmm3, %xmm3
    000066c4: 	movss	0x90(%rsp), %xmm1
    000066cd: 	movss	%xmm4, 0xb0(%rsp)
    000066d6: 	movss	%xmm5, 0xa0(%rsp)
    000066df: 	callq	__mulsc3@PLT # Offset: 26335
    000066e4: 	movss	0xb0(%rsp), %xmm4
    000066ed: 	movss	0xa0(%rsp), %xmm5
    000066f6: 	movq	%xmm0, 0x200(%rsp)
    000066ff: 	movss	0x200(%rsp), %xmm2
    00006708: 	movss	0x204(%rsp), %xmm1
    00006711: 	jmp	.Ltmp1527 # Offset: 26385
.Ltmp1293:
    00006716: 	movss	0x38(%rsp), %xmm2
    0000671c: 	pxor	%xmm3, %xmm3
    00006720: 	movss	%xmm4, 0x70(%rsp)
    00006726: 	movss	%xmm5, 0x60(%rsp)
    0000672c: 	callq	__mulsc3@PLT # Offset: 26412
    00006731: 	movss	0x70(%rsp), %xmm4
    00006737: 	movss	0x60(%rsp), %xmm5
    0000673d: 	movq	%xmm0, 0x298(%rsp)
    00006746: 	movss	0x298(%rsp), %xmm3
    0000674f: 	movss	0x29c(%rsp), %xmm2
    00006758: 	jmp	.Ltmp1528 # Offset: 26456
.Ltmp1292:
    0000675d: 	movss	0x44(%rsp), %xmm1
    00006763: 	movaps	%xmm15, %xmm0
    00006767: 	movss	%xmm4, 0x70(%rsp)
    0000676d: 	movss	%xmm5, 0x60(%rsp)
    00006773: 	callq	__mulsc3@PLT # Offset: 26483
    00006778: 	movss	0x70(%rsp), %xmm4
    0000677e: 	movss	0x60(%rsp), %xmm5
    00006784: 	movq	%xmm0, 0x2a0(%rsp)
    0000678d: 	movss	0x2a0(%rsp), %xmm0
    00006796: 	movss	0x2a4(%rsp), %xmm1
    0000679f: 	jmp	.Ltmp1529 # Offset: 26527
.Ltmp1291:
    000067a4: 	movaps	%xmm1, %xmm3
    000067a7: 	movss	0x4c(%rsp), %xmm1
    000067ad: 	movaps	%xmm0, %xmm2
    000067b0: 	movaps	%xmm13, %xmm0
    000067b4: 	movss	%xmm4, 0x70(%rsp)
    000067ba: 	movss	%xmm5, 0x60(%rsp)
    000067c0: 	callq	__mulsc3@PLT # Offset: 26560
    000067c5: 	movss	0x70(%rsp), %xmm4
    000067cb: 	movss	0x60(%rsp), %xmm5
    000067d1: 	movq	%xmm0, 0x2a8(%rsp)
    000067da: 	movss	0x2a8(%rsp), %xmm2
    000067e3: 	movss	0x2ac(%rsp), %xmm3
    000067ec: 	jmp	.Ltmp1530 # Offset: 26604
.Ltmp1202:
    000067f1: 	movss	0x38(%rsp), %xmm2
    000067f7: 	movaps	%xmm4, %xmm0
    000067fa: 	pxor	%xmm3, %xmm3
    000067fe: 	callq	__mulsc3@PLT # Offset: 26622
    00006803: 	movq	%xmm0, 0x3d8(%rsp)
    0000680c: 	movss	0x3d8(%rsp), %xmm0
    00006815: 	movss	0x3dc(%rsp), %xmm2
    0000681e: 	jmp	.Ltmp1531 # Offset: 26654
.Ltmp1268:
    00006823: 	movss	0x38(%rsp), %xmm2
    00006829: 	movaps	%xmm5, %xmm0
    0000682c: 	pxor	%xmm3, %xmm3
    00006830: 	movss	%xmm8, 0x70(%rsp)
    00006837: 	movss	%xmm7, 0x60(%rsp)
    0000683d: 	callq	__mulsc3@PLT # Offset: 26685
    00006842: 	movss	0x70(%rsp), %xmm8
    00006849: 	movss	0x60(%rsp), %xmm7
    0000684f: 	movq	%xmm0, 0x320(%rsp)
    00006858: 	movss	0x320(%rsp), %xmm2
    00006861: 	movss	0x324(%rsp), %xmm0
    0000686a: 	jmp	.Ltmp1532 # Offset: 26730
.Ltmp1267:
    0000686f: 	movaps	%xmm4, %xmm1
    00006872: 	movaps	%xmm9, %xmm0
    00006876: 	pxor	%xmm3, %xmm3
    0000687a: 	movss	%xmm8, 0x70(%rsp)
    00006881: 	movss	%xmm7, 0x60(%rsp)
    00006887: 	callq	__mulsc3@PLT # Offset: 26759
    0000688c: 	movss	0x70(%rsp), %xmm8
    00006893: 	movss	0x60(%rsp), %xmm7
    00006899: 	movq	%xmm0, 0x328(%rsp)
    000068a2: 	movss	0x328(%rsp), %xmm5
    000068ab: 	movss	0x32c(%rsp), %xmm1
    000068b4: 	jmp	.Ltmp1533 # Offset: 26804
.Ltmp1247:
    000068b9: 	movss	0x38(%rsp), %xmm2
    000068bf: 	pxor	%xmm3, %xmm3
    000068c3: 	movss	0xd8(%rsp), %xmm1
    000068cc: 	movss	%xmm5, 0xe0(%rsp)
    000068d5: 	movss	%xmm4, 0xdc(%rsp)
    000068de: 	callq	__mulsc3@PLT # Offset: 26846
    000068e3: 	movss	0xe0(%rsp), %xmm5
    000068ec: 	movss	0xdc(%rsp), %xmm4
    000068f5: 	movq	%xmm0, 0x378(%rsp)
    000068fe: 	movss	0x378(%rsp), %xmm2
    00006907: 	movss	0x37c(%rsp), %xmm1
    00006910: 	jmp	.Ltmp1534 # Offset: 26896
.Ltmp1226:
    00006915: 	movss	0x38(%rsp), %xmm2
    0000691b: 	pxor	%xmm3, %xmm3
    0000691f: 	movss	0xd8(%rsp), %xmm1
    00006928: 	movss	%xmm5, 0xe0(%rsp)
    00006931: 	movss	%xmm4, 0xdc(%rsp)
    0000693a: 	callq	__mulsc3@PLT # Offset: 26938
    0000693f: 	movss	0xe0(%rsp), %xmm5
    00006948: 	movss	0xdc(%rsp), %xmm4
    00006951: 	movq	%xmm0, 0x3a8(%rsp)
    0000695a: 	movss	0x3a8(%rsp), %xmm2
    00006963: 	movss	0x3ac(%rsp), %xmm1
    0000696c: 	jmp	.Ltmp1535 # Offset: 26988
.Ltmp1212:
    00006971: 	movss	0x38(%rsp), %xmm2
    00006977: 	pxor	%xmm3, %xmm3
    0000697b: 	movss	0x80(%rsp), %xmm1
    00006984: 	movss	%xmm4, 0xa0(%rsp)
    0000698d: 	movss	%xmm5, 0x90(%rsp)
    00006996: 	callq	__mulsc3@PLT # Offset: 27030
    0000699b: 	movss	0xa0(%rsp), %xmm4
    000069a4: 	movss	0x90(%rsp), %xmm5
    000069ad: 	movq	%xmm0, 0x3c8(%rsp)
    000069b6: 	movss	0x3c8(%rsp), %xmm2
    000069bf: 	movss	0x3cc(%rsp), %xmm1
    000069c8: 	jmp	.Ltmp1536 # Offset: 27080
.Ltmp1498:
    000069cd: 	movss	0x3c(%rsp), %xmm0
    000069d3: 	movss	0x44(%rsp), %xmm1
    000069d9: 	movss	%xmm8, 0xd8(%rsp)
    000069e3: 	addq	$0x8, %rbp
    000069e7: 	movss	%xmm9, 0xcc(%rsp)
    000069f1: 	callq	__mulsc3@PLT # Offset: 27121
    000069f6: 	movss	0xcc(%rsp), %xmm9
    00006a00: 	movss	0xd8(%rsp), %xmm8
    00006a0a: 	movq	%xmm0, 0x2f0(%rsp)
    00006a13: 	movss	0x90(%rsp), %xmm0
    00006a1c: 	movss	0x2f0(%rsp), %xmm4
    00006a25: 	movss	0x2f4(%rsp), %xmm1
    00006a2e: 	addss	%xmm4, %xmm0
    00006a32: 	addss	%xmm0, %xmm9
    00006a37: 	movss	0x80(%rsp), %xmm0
    00006a40: 	addss	%xmm1, %xmm0
    00006a44: 	addss	%xmm0, %xmm8
    00006a49: 	cmpq	%rbp, %rbx
    00006a4c: 	jne	.Ltmp1499 # Offset: 27212
    00006a52: 	jmp	.Ltmp1537 # Offset: 27218
.Ltmp1497:
    00006a57: 	movss	0xc0(%rsp), %xmm3
    00006a60: 	movss	0x40(%rsp), %xmm0
    00006a66: 	movss	%xmm8, 0xd8(%rsp)
    00006a70: 	movss	0xb0(%rsp), %xmm2
    00006a79: 	movss	0x4c(%rsp), %xmm1
    00006a7f: 	movss	%xmm9, 0xcc(%rsp)
    00006a89: 	callq	__mulsc3@PLT # Offset: 27273
    00006a8e: 	movss	0xcc(%rsp), %xmm9
    00006a98: 	movss	0xd8(%rsp), %xmm8
    00006aa2: 	movq	%xmm0, 0x2f8(%rsp)
    00006aab: 	movss	0x2f8(%rsp), %xmm2
    00006ab4: 	movss	0x2fc(%rsp), %xmm3
    00006abd: 	jmp	.Ltmp1538 # Offset: 27325
.Ltmp1147:
    00006ac2: 	movss	0xc(%rsp), %xmm0
    00006ac8: 	movss	DATAat0x2b7c0(%rip), %xmm3
    00006ad0: 	movaps	%xmm6, %xmm1
    00006ad3: 	movss	DATAat0x2b7a0(%rip), %xmm2
    00006adb: 	callq	__mulsc3@PLT # Offset: 27355
    00006ae0: 	movq	%xmm0, 0x408(%rsp)
    00006ae9: 	movss	0x408(%rsp), %xmm6
    00006af2: 	movss	%xmm6, 0x48(%rsp)
    00006af8: 	movss	0x40c(%rsp), %xmm6
    00006b01: 	movss	%xmm6, 0xc8(%rsp)
    00006b0a: 	jmp	.Ltmp1539 # Offset: 27402
.Ltmp1417:
    00006b0f: 	callq	__stack_chk_fail@PLT # Offset: 27407
    00006b14: 	endbr64
.Ltmp1554:
    00006b18: 	movq	%rax, %rbx
    00006b1b: 	jmp	.Ltmp1540 # Offset: 27419
    00006b1d: 	endbr64
.Ltmp1552:
    00006b21: 	movq	%rax, %rbx
    00006b24: 	jmp	.Ltmp1541 # Offset: 27428
    00006b29: 	endbr64
.Ltmp1549:
    00006b2d: 	movq	%rax, %rbx
    00006b30: 	jmp	.Ltmp1542 # Offset: 27440
    00006b35: 	endbr64
.Ltmp1544:
    00006b39: 	movq	%rax, %rbx
    00006b3c: 	jmp	.Ltmp1543 # Offset: 27452
    00006b41: 	endbr64
    00006b45: 	jmp	.Ltmp1544 # Offset: 27461
    00006b47: 	endbr64
    00006b4b: 	jmp	.Ltmp1544 # Offset: 27467
    00006b4d: 	endbr64
    00006b51: 	movq	%rax, %rbx
    00006b54: 	jmp	.Ltmp1545 # Offset: 27476
.Ltmp1540:
    00006b56: 	movq	0x4f0(%rsp), %rdi
    00006b5e: 	cmpq	0x50(%rsp), %rdi
    00006b63: 	je	.Ltmp1546 # Offset: 27491
    00006b65: 	movq	0x500(%rsp), %rax
    00006b6d: 	leaq	0x1(%rax), %rsi
    00006b71: 	callq	_ZdlPvm@PLT # Offset: 27505
.Ltmp1546:
    00006b76: 	movq	0x470(%rsp), %rdi
    00006b7e: 	leaq	0x480(%rsp), %rax
    00006b86: 	cmpq	%rax, %rdi
    00006b89: 	je	.Ltmp1545 # Offset: 27529
    00006b8b: 	movq	0x480(%rsp), %rax
    00006b93: 	leaq	0x1(%rax), %rsi
    00006b97: 	callq	_ZdlPvm@PLT # Offset: 27543
.Ltmp1545:
    00006b9c: 	movq	0x450(%rsp), %rdi
    00006ba4: 	leaq	0x460(%rsp), %rax
    00006bac: 	cmpq	%rax, %rdi
    00006baf: 	je	.Ltmp1547 # Offset: 27567
    00006bb1: 	movq	0x460(%rsp), %rax
    00006bb9: 	leaq	0x1(%rax), %rsi
    00006bbd: 	callq	_ZdlPvm@PLT # Offset: 27581
.Ltmp1547:
    00006bc2: 	movq	0x430(%rsp), %rdi
    00006bca: 	cmpq	0xd0(%rsp), %rdi
    00006bd2: 	je	.Ltmp1548 # Offset: 27602
    00006bd4: 	movq	0x440(%rsp), %rax
    00006bdc: 	leaq	0x1(%rax), %rsi
    00006be0: 	callq	_ZdlPvm@PLT # Offset: 27616
.Ltmp1548:
    00006be5: 	movq	%rbx, %rdi
    00006be8: 	callq	_Unwind_Resume@PLT # Offset: 27624
.Ltmp1542:
    00006bed: 	movq	0x4f0(%rsp), %rdi
    00006bf5: 	cmpq	0x50(%rsp), %rdi
    00006bfa: 	je	.Ltmp1547 # Offset: 27642
.Ltmp1560:
    00006bfc: 	movq	0x500(%rsp), %rax
    00006c04: 	leaq	0x1(%rax), %rsi
    00006c08: 	callq	_ZdlPvm@PLT # Offset: 27656
    00006c0d: 	jmp	.Ltmp1547 # Offset: 27661
    00006c0f: 	endbr64
    00006c13: 	jmp	.Ltmp1549 # Offset: 27667
    00006c18: 	endbr64
    00006c1c: 	jmp	.Ltmp1544 # Offset: 27676
.Ltmp1541:
    00006c21: 	movq	0x4f0(%rsp), %rdi
    00006c29: 	cmpq	0x50(%rsp), %rdi
    00006c2e: 	je	.Ltmp1550 # Offset: 27694
    00006c30: 	movq	0x500(%rsp), %rax
    00006c38: 	leaq	0x1(%rax), %rsi
    00006c3c: 	callq	_ZdlPvm@PLT # Offset: 27708
.Ltmp1550:
    00006c41: 	movq	0x4b0(%rsp), %rdi
    00006c49: 	leaq	0x4c0(%rsp), %rax
    00006c51: 	cmpq	%rax, %rdi
    00006c54: 	je	.Ltmp1551 # Offset: 27732
    00006c56: 	movq	0x4c0(%rsp), %rax
    00006c5e: 	leaq	0x1(%rax), %rsi
    00006c62: 	callq	_ZdlPvm@PLT # Offset: 27746
.Ltmp1551:
    00006c67: 	movq	0x490(%rsp), %rdi
    00006c6f: 	leaq	0x4a0(%rsp), %rax
    00006c77: 	cmpq	%rax, %rdi
    00006c7a: 	je	.Ltmp1546 # Offset: 27770
    00006c80: 	movq	0x4a0(%rsp), %rax
    00006c88: 	leaq	0x1(%rax), %rsi
    00006c8c: 	callq	_ZdlPvm@PLT # Offset: 27788
    00006c91: 	jmp	.Ltmp1546 # Offset: 27793
.Ltmp1543:
    00006c96: 	movq	0x4f0(%rsp), %rdi
    00006c9e: 	cmpq	0x50(%rsp), %rdi
    00006ca3: 	je	.Ltmp1545 # Offset: 27811
    00006ca9: 	movq	0x500(%rsp), %rax
    00006cb1: 	leaq	0x1(%rax), %rsi
    00006cb5: 	callq	_ZdlPvm@PLT # Offset: 27829
    00006cba: 	jmp	.Ltmp1545 # Offset: 27834
    00006cbf: 	endbr64
    00006cc3: 	jmp	.Ltmp1552 # Offset: 27843
    00006cc8: 	endbr64
    00006ccc: 	jmp	.Ltmp1552 # Offset: 27852
    00006cd1: 	endbr64
    00006cd5: 	jmp	.Ltmp1549 # Offset: 27861
    00006cda: 	endbr64
    00006cde: 	jmp	.Ltmp1549 # Offset: 27870
    00006ce3: 	endbr64
.Ltmp1555:
    00006ce7: 	movq	%rax, %rbx
    00006cea: 	jmp	.Ltmp1553 # Offset: 27882
    00006cec: 	endbr64
    00006cf0: 	jmp	.Ltmp1554 # Offset: 27888
    00006cf5: 	endbr64
    00006cf9: 	jmp	.Ltmp1555 # Offset: 27897
    00006cfb: 	endbr64
    00006cff: 	movq	%rax, %rbx
    00006d02: 	jmp	.Ltmp1551 # Offset: 27906
.Ltmp1553:
    00006d07: 	movq	0x4f0(%rsp), %rdi
    00006d0f: 	cmpq	0x50(%rsp), %rdi
    00006d14: 	je	.Ltmp1551 # Offset: 27924
    00006d1a: 	movq	0x500(%rsp), %rax
    00006d22: 	leaq	0x1(%rax), %rsi
    00006d26: 	callq	_ZdlPvm@PLT # Offset: 27942
    00006d2b: 	jmp	.Ltmp1551 # Offset: 27947
    00006d30: 	endbr64
    00006d34: 	jmp	.Ltmp1544 # Offset: 27956
    00006d39: 	endbr64
    00006d3d: 	jmp	.Ltmp1549 # Offset: 27965
    00006d42: 	endbr64
    00006d46: 	jmp	.Ltmp1554 # Offset: 27974
    00006d4b: 	endbr64
    00006d4f: 	jmp	.Ltmp1554 # Offset: 27983
    00006d54: 	endbr64
    00006d58: 	jmp	.Ltmp1554 # Offset: 27992
    00006d5d: 	endbr64
    00006d61: 	jmp	.Ltmp1554 # Offset: 28001
    00006d66: 	endbr64
    00006d6a: 	jmp	.Ltmp1549 # Offset: 28010
    00006d6f: 	endbr64
.Ltmp1557:
    00006d73: 	movq	%rax, %rbx
    00006d76: 	jmp	.Ltmp1556 # Offset: 28022
    00006d7b: 	endbr64
    00006d7f: 	jmp	.Ltmp1554 # Offset: 28031
    00006d84: 	endbr64
    00006d88: 	jmp	.Ltmp1554 # Offset: 28040
    00006d8d: 	endbr64
    00006d91: 	jmp	.Ltmp1554 # Offset: 28049
    00006d96: 	endbr64
    00006d9a: 	jmp	.Ltmp1554 # Offset: 28058
    00006d9f: 	endbr64
    00006da3: 	jmp	.Ltmp1554 # Offset: 28067
    00006da8: 	endbr64
    00006dac: 	jmp	.Ltmp1554 # Offset: 28076
    00006db1: 	endbr64
    00006db5: 	jmp	.Ltmp1544 # Offset: 28085
    00006dba: 	endbr64
    00006dbe: 	jmp	.Ltmp1544 # Offset: 28094
    00006dc3: 	endbr64
    00006dc7: 	jmp	.Ltmp1544 # Offset: 28103
    00006dcc: 	endbr64
    00006dd0: 	jmp	.Ltmp1552 # Offset: 28112
    00006dd5: 	endbr64
    00006dd9: 	jmp	.Ltmp1552 # Offset: 28121
    00006dde: 	endbr64
    00006de2: 	jmp	.Ltmp1552 # Offset: 28130
    00006de7: 	endbr64
    00006deb: 	movq	%rax, %rbx
    00006dee: 	jmp	.Ltmp1550 # Offset: 28142
    00006df3: 	endbr64
    00006df7: 	jmp	.Ltmp1554 # Offset: 28151
    00006dfc: 	endbr64
    00006e00: 	jmp	.Ltmp1544 # Offset: 28160
    00006e05: 	endbr64
    00006e09: 	jmp	.Ltmp1544 # Offset: 28169
    00006e0e: 	endbr64
    00006e12: 	jmp	.Ltmp1544 # Offset: 28178
    00006e17: 	endbr64
    00006e1b: 	jmp	.Ltmp1554 # Offset: 28187
    00006e20: 	endbr64
    00006e24: 	jmp	.Ltmp1552 # Offset: 28196
    00006e29: 	endbr64
    00006e2d: 	jmp	.Ltmp1555 # Offset: 28205
    00006e32: 	endbr64
    00006e36: 	jmp	.Ltmp1555 # Offset: 28214
    00006e3b: 	endbr64
    00006e3f: 	jmp	.Ltmp1552 # Offset: 28223
    00006e44: 	endbr64
    00006e48: 	jmp	.Ltmp1552 # Offset: 28232
    00006e4d: 	endbr64
    00006e51: 	jmp	.Ltmp1557 # Offset: 28241
    00006e56: 	endbr64
    00006e5a: 	movq	%rax, %rbx
    00006e5d: 	jmp	.Ltmp1558 # Offset: 28253
    00006e5f: 	endbr64
    00006e63: 	movq	%rax, %rbx
    00006e66: 	jmp	.Ltmp1559 # Offset: 28262
    00006e6b: 	endbr64
    00006e6f: 	movq	%rax, %rbx
    00006e72: 	jmp	.Ltmp1546 # Offset: 28274
    00006e77: 	endbr64
    00006e7b: 	jmp	.Ltmp1557 # Offset: 28283
    00006e80: 	endbr64
    00006e84: 	jmp	.Ltmp1557 # Offset: 28292
    00006e89: 	endbr64
    00006e8d: 	jmp	.Ltmp1557 # Offset: 28301
.Ltmp1556:
    00006e92: 	movq	0x4f0(%rsp), %rdi
    00006e9a: 	cmpq	0x50(%rsp), %rdi
    00006e9f: 	je	.Ltmp1558 # Offset: 28319
    00006ea1: 	movq	0x500(%rsp), %rax
    00006ea9: 	leaq	0x1(%rax), %rsi
    00006ead: 	callq	_ZdlPvm@PLT # Offset: 28333
.Ltmp1558:
    00006eb2: 	movq	0x4d0(%rsp), %rdi
    00006eba: 	leaq	0x4e0(%rsp), %rax
    00006ec2: 	cmpq	%rax, %rdi
    00006ec5: 	je	.Ltmp1550 # Offset: 28357
    00006ecb: 	movq	0x4e0(%rsp), %rax
    00006ed3: 	leaq	0x1(%rax), %rsi
    00006ed7: 	callq	_ZdlPvm@PLT # Offset: 28375
    00006edc: 	jmp	.Ltmp1550 # Offset: 28380
    00006ee1: 	endbr64
    00006ee5: 	jmp	.Ltmp1554 # Offset: 28389
    00006eea: 	endbr64
    00006eee: 	movq	%rax, %rbx
    00006ef1: 	jmp	.Ltmp1547 # Offset: 28401
.Ltmp1559:
    00006ef6: 	movq	0x4f0(%rsp), %rdi
    00006efe: 	leaq	0x500(%rsp), %rax
    00006f06: 	cmpq	%rax, %rdi
    00006f09: 	jne	.Ltmp1560 # Offset: 28425
    00006f0f: 	jmp	.Ltmp1547 # Offset: 28431
DWARF CFI Instructions:
    <empty>
End of Function "_Z15testComplexTypeISt7complexIfEEvd"

Binary Function "_Z13test_constantISt7complexIlE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x19630
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x19630
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1561 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1566:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1562 # Offset: 122
.Ltmp1563:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1563 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1564 # Offset: 186
.Ltmp1577:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1565 # Offset: 195
.Ltmp1576:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1575:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1566 # Offset: 214
.Ltmp1561:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1567 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1568 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1569 # Offset: 269
.Ltmp1568:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1570 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1571 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1578:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1572 # Offset: 349
.Ltmp1579:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1573 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1565:
    000001b8: 	movq	%rdx, %r8
.Ltmp1564:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1574 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1581:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1575 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1576 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1562:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1577 # Offset: 578
.Ltmp1570:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1580:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1578 # Offset: 632
.Ltmp1567:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1579 # Offset: 673
.Ltmp1572:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1579 # Offset: 689
.Ltmp1571:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1578 # Offset: 697
    000002bf: 	jmp	.Ltmp1580 # Offset: 703
.Ltmp1573:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1569:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1574:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1581 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x19930
  Size        : 0x33e
  MaxSize     : 0x340
  Offset      : 0x19930
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %esi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%esi, %esi
    00000041: 	jle	.Ltmp1582 # Offset: 65
    00000047: 	movl	%r14d, %eax
    0000004a: 	movl	%r14d, %ebp
    0000004d: 	leaq	DATAat0x2b1d0(%rip), %rbx
    00000054: 	xorl	%r15d, %r15d
    00000057: 	shrl	%eax
    00000059: 	andl	$-0x2, %ebp
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r12,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1589:
    00000070: 	cvttsd2si	init_value(%rip), %edi
    00000078: 	imull	$0x1f40, %edi, %edi
    0000007e: 	testl	%r14d, %r14d
    00000081: 	jle	.Ltmp1583 # Offset: 129
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	je	.Ltmp1584 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm0, %xmm0
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1585:
    000000a0: 	movdqu	(%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddd	%xmm2, %xmm0
    000000ac: 	cmpq	%rax, %r13
    000000af: 	jne	.Ltmp1585 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	movd	%xmm0, %eax
    000000b9: 	punpckhdq	%xmm0, %xmm1
    000000bd: 	movd	%xmm1, %edx
    000000c1: 	pshufd	$0xff, %xmm0, %xmm1
    000000c6: 	pshufd	$0x55, %xmm0, %xmm0
    000000cb: 	addl	%eax, %edx
    000000cd: 	movd	%xmm1, %ecx
    000000d1: 	movd	%xmm0, %eax
    000000d5: 	addl	%eax, %ecx
    000000d7: 	movslq	%ebp, %rax
    000000da: 	cmpl	%r14d, %ebp
    000000dd: 	je	.Ltmp1586 # Offset: 221
.Ltmp1601:
    000000df: 	leaq	(%r12,%rax,8), %rax
    000000e3: 	addl	(%rax), %edx
    000000e5: 	addl	0x4(%rax), %ecx
.Ltmp1586:
    000000e8: 	subl	%edi, %edx
    000000ea: 	movl	%ecx, %edi
    000000ec: 	negl	%edi
    000000ee: 	movl	%edx, %eax
    000000f0: 	cmovsl	%ecx, %edi
    000000f3: 	negl	%eax
    000000f5: 	cmovsl	%edx, %eax
    000000f8: 	cmpl	%eax, %edi
    000000fa: 	jg	.Ltmp1587 # Offset: 250
.Ltmp1600:
    00000100: 	testl	%eax, %eax
    00000102: 	jne	.Ltmp1588 # Offset: 258
.Ltmp1599:
    00000108: 	movl	iterations(%rip), %esi
.Ltmp1598:
    0000010e: 	addl	$0x1, %r15d
    00000112: 	cmpl	%esi, %r15d
    00000115: 	jl	.Ltmp1589 # Offset: 277
.Ltmp1582:
    0000011b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000129: 	subq	$0x20, %rax
    0000012d: 	cmpq	%rax, %rbx
    00000130: 	je	.Ltmp1590 # Offset: 304
    00000136: 	movq	0x8(%rsp), %rax
    0000013b: 	leaq	0x10(%rbx), %rdi
    0000013f: 	movq	%rdi, (%rbx)
    00000142: 	movq	(%rax), %r13
    00000145: 	movq	0x8(%rax), %r12
    00000149: 	movq	%r13, %rax
    0000014c: 	addq	%r12, %rax
    0000014f: 	je	.Ltmp1591 # Offset: 335
    00000151: 	testq	%r13, %r13
    00000154: 	je	.Ltmp1592 # Offset: 340
.Ltmp1591:
    0000015a: 	movq	%r12, 0x20(%rsp)
    0000015f: 	cmpq	$0xf, %r12
    00000163: 	ja	.Ltmp1593 # Offset: 355
    00000169: 	cmpq	$0x1, %r12
    0000016d: 	jne	.Ltmp1594 # Offset: 365
    00000173: 	movzbl	(%r13), %eax
    00000178: 	movb	%al, 0x10(%rbx)
.Ltmp1602:
    0000017b: 	movq	%r12, 0x8(%rbx)
    0000017f: 	movb	$0x0, (%rdi,%r12)
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000192: 	addq	$0x20, %rax
    00000196: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a4: 	je	.Ltmp1595 # Offset: 420
.Ltmp1603:
    000001aa: 	movq	-0x20(%rax), %rbp
    000001ae: 	callq	clock@PLT # Offset: 430
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	0x28(%rsp), %rdx
    000001bf: 	subq	%fs:0x28, %rdx
    000001c8: 	jne	.Ltmp1596 # Offset: 456
    000001ce: 	subq	start_time(%rip), %rax
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	cvtsi2sd	%rax, %xmm0
    000001e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001e9: 	addq	$0x38, %rsp
    000001ed: 	popq	%rbx
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1588:
    00000200: 	movl	%eax, %edi
.Ltmp1587:
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	pxor	%xmm3, %xmm3
    0000020a: 	pxor	%xmm1, %xmm1
    0000020e: 	movl	%edx, %eax
    00000210: 	cltd
    00000211: 	cvtsi2sd	%edi, %xmm1
    00000215: 	idivl	%edi
    00000217: 	movl	%eax, %r9d
    0000021a: 	movl	%ecx, %eax
    0000021c: 	cltd
    0000021d: 	idivl	%edi
    0000021f: 	movl	%r9d, %edx
    00000222: 	imull	%r9d, %edx
    00000226: 	imull	%eax, %eax
    00000229: 	addl	%eax, %edx
    0000022b: 	cvtsi2sd	%edx, %xmm0
    0000022f: 	ucomisd	%xmm0, %xmm3
    00000233: 	ja	.Ltmp1597 # Offset: 563
    00000239: 	sqrtsd	%xmm0, %xmm0
.Ltmp1605:
    0000023d: 	mulsd	%xmm0, %xmm1
    00000241: 	cvttsd2si	%xmm1, %eax
    00000245: 	testl	%eax, %eax
    00000247: 	jle	.Ltmp1598 # Offset: 583
    0000024d: 	movl	current_test(%rip), %edx
    00000253: 	movq	%rbx, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	callq	__printf_chk@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1599 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1583:
    00000270: 	movl	%edi, %edx
    00000272: 	movl	%edi, %eax
    00000274: 	negl	%edx
    00000276: 	negl	%eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	xorl	%ecx, %ecx
    0000027d: 	jmp	.Ltmp1600 # Offset: 637
.Ltmp1584:
    00000282: 	xorl	%edx, %edx
    00000284: 	xorl	%ecx, %ecx
    00000286: 	xorl	%eax, %eax
    00000288: 	jmp	.Ltmp1601 # Offset: 648
.Ltmp1593:
    0000028d: 	movq	%rbx, %rdi
    00000290: 	leaq	0x20(%rsp), %rsi
    00000295: 	xorl	%edx, %edx
    00000297: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 663
    0000029c: 	movq	%rax, (%rbx)
    0000029f: 	movq	%rax, %rdi
    000002a2: 	movq	0x20(%rsp), %rax
    000002a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1604:
    000002ab: 	movq	%r12, %rdx
    000002ae: 	movq	%r13, %rsi
    000002b1: 	callq	memcpy@PLT # Offset: 689
    000002b6: 	movq	0x20(%rsp), %r12
    000002bb: 	movq	(%rbx), %rdi
    000002be: 	jmp	.Ltmp1602 # Offset: 702
.Ltmp1590:
    000002c3: 	movq	0x8(%rsp), %rsi
    000002c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	jne	.Ltmp1603 # Offset: 745
.Ltmp1595:
    000002ef: 	movq	-0x8(%rdx), %rax
    000002f3: 	addq	$0x200, %rax
    000002f9: 	jmp	.Ltmp1603 # Offset: 761
.Ltmp1594:
    000002fe: 	testq	%r12, %r12
    00000301: 	je	.Ltmp1602 # Offset: 769
    00000307: 	jmp	.Ltmp1604 # Offset: 775
.Ltmp1596:
    00000309: 	callq	__stack_chk_fail@PLT # Offset: 777
.Ltmp1592:
    0000030e: 	leaq	DATAat0x2b008(%rip), %rdi
    00000315: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1597:
    00000320: 	movl	%esi, 0x1c(%rsp)
    00000324: 	movsd	%xmm1, 0x10(%rsp)
    0000032a: 	callq	sqrt@PLT # Offset: 810
    0000032f: 	movl	0x1c(%rsp), %esi
    00000333: 	movsd	0x10(%rsp), %xmm1
    00000339: 	jmp	.Ltmp1605 # Offset: 825
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x19c70
  Size        : 0x33e
  MaxSize     : 0x340
  Offset      : 0x19c70
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %esi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%esi, %esi
    00000041: 	jle	.Ltmp1606 # Offset: 65
    00000047: 	movl	%r14d, %eax
    0000004a: 	movl	%r14d, %ebp
    0000004d: 	leaq	DATAat0x2b1d0(%rip), %rbx
    00000054: 	xorl	%r15d, %r15d
    00000057: 	shrl	%eax
    00000059: 	andl	$-0x2, %ebp
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r12,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1613:
    00000070: 	cvttsd2si	init_value(%rip), %edi
    00000078: 	imull	$0x1f40, %edi, %edi
    0000007e: 	testl	%r14d, %r14d
    00000081: 	jle	.Ltmp1607 # Offset: 129
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	je	.Ltmp1608 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm0, %xmm0
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1609:
    000000a0: 	movdqu	(%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddd	%xmm2, %xmm0
    000000ac: 	cmpq	%rax, %r13
    000000af: 	jne	.Ltmp1609 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	movd	%xmm0, %eax
    000000b9: 	punpckhdq	%xmm0, %xmm1
    000000bd: 	movd	%xmm1, %edx
    000000c1: 	pshufd	$0xff, %xmm0, %xmm1
    000000c6: 	pshufd	$0x55, %xmm0, %xmm0
    000000cb: 	addl	%eax, %edx
    000000cd: 	movd	%xmm1, %ecx
    000000d1: 	movd	%xmm0, %eax
    000000d5: 	addl	%eax, %ecx
    000000d7: 	movslq	%ebp, %rax
    000000da: 	cmpl	%r14d, %ebp
    000000dd: 	je	.Ltmp1610 # Offset: 221
.Ltmp1625:
    000000df: 	leaq	(%r12,%rax,8), %rax
    000000e3: 	addl	(%rax), %edx
    000000e5: 	addl	0x4(%rax), %ecx
.Ltmp1610:
    000000e8: 	subl	%edi, %edx
    000000ea: 	movl	%ecx, %edi
    000000ec: 	negl	%edi
    000000ee: 	movl	%edx, %eax
    000000f0: 	cmovsl	%ecx, %edi
    000000f3: 	negl	%eax
    000000f5: 	cmovsl	%edx, %eax
    000000f8: 	cmpl	%eax, %edi
    000000fa: 	jg	.Ltmp1611 # Offset: 250
.Ltmp1624:
    00000100: 	testl	%eax, %eax
    00000102: 	jne	.Ltmp1612 # Offset: 258
.Ltmp1623:
    00000108: 	movl	iterations(%rip), %esi
.Ltmp1622:
    0000010e: 	addl	$0x1, %r15d
    00000112: 	cmpl	%esi, %r15d
    00000115: 	jl	.Ltmp1613 # Offset: 277
.Ltmp1606:
    0000011b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000129: 	subq	$0x20, %rax
    0000012d: 	cmpq	%rax, %rbx
    00000130: 	je	.Ltmp1614 # Offset: 304
    00000136: 	movq	0x8(%rsp), %rax
    0000013b: 	leaq	0x10(%rbx), %rdi
    0000013f: 	movq	%rdi, (%rbx)
    00000142: 	movq	(%rax), %r13
    00000145: 	movq	0x8(%rax), %r12
    00000149: 	movq	%r13, %rax
    0000014c: 	addq	%r12, %rax
    0000014f: 	je	.Ltmp1615 # Offset: 335
    00000151: 	testq	%r13, %r13
    00000154: 	je	.Ltmp1616 # Offset: 340
.Ltmp1615:
    0000015a: 	movq	%r12, 0x20(%rsp)
    0000015f: 	cmpq	$0xf, %r12
    00000163: 	ja	.Ltmp1617 # Offset: 355
    00000169: 	cmpq	$0x1, %r12
    0000016d: 	jne	.Ltmp1618 # Offset: 365
    00000173: 	movzbl	(%r13), %eax
    00000178: 	movb	%al, 0x10(%rbx)
.Ltmp1626:
    0000017b: 	movq	%r12, 0x8(%rbx)
    0000017f: 	movb	$0x0, (%rdi,%r12)
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000192: 	addq	$0x20, %rax
    00000196: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a4: 	je	.Ltmp1619 # Offset: 420
.Ltmp1627:
    000001aa: 	movq	-0x20(%rax), %rbp
    000001ae: 	callq	clock@PLT # Offset: 430
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	0x28(%rsp), %rdx
    000001bf: 	subq	%fs:0x28, %rdx
    000001c8: 	jne	.Ltmp1620 # Offset: 456
    000001ce: 	subq	start_time(%rip), %rax
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	cvtsi2sd	%rax, %xmm0
    000001e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001e9: 	addq	$0x38, %rsp
    000001ed: 	popq	%rbx
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1612:
    00000200: 	movl	%eax, %edi
.Ltmp1611:
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	pxor	%xmm3, %xmm3
    0000020a: 	pxor	%xmm1, %xmm1
    0000020e: 	movl	%edx, %eax
    00000210: 	cltd
    00000211: 	cvtsi2sd	%edi, %xmm1
    00000215: 	idivl	%edi
    00000217: 	movl	%eax, %r9d
    0000021a: 	movl	%ecx, %eax
    0000021c: 	cltd
    0000021d: 	idivl	%edi
    0000021f: 	movl	%r9d, %edx
    00000222: 	imull	%r9d, %edx
    00000226: 	imull	%eax, %eax
    00000229: 	addl	%eax, %edx
    0000022b: 	cvtsi2sd	%edx, %xmm0
    0000022f: 	ucomisd	%xmm0, %xmm3
    00000233: 	ja	.Ltmp1621 # Offset: 563
    00000239: 	sqrtsd	%xmm0, %xmm0
.Ltmp1629:
    0000023d: 	mulsd	%xmm0, %xmm1
    00000241: 	cvttsd2si	%xmm1, %eax
    00000245: 	testl	%eax, %eax
    00000247: 	jle	.Ltmp1622 # Offset: 583
    0000024d: 	movl	current_test(%rip), %edx
    00000253: 	movq	%rbx, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	callq	__printf_chk@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1623 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1607:
    00000270: 	movl	%edi, %edx
    00000272: 	movl	%edi, %eax
    00000274: 	negl	%edx
    00000276: 	negl	%eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	xorl	%ecx, %ecx
    0000027d: 	jmp	.Ltmp1624 # Offset: 637
.Ltmp1608:
    00000282: 	xorl	%edx, %edx
    00000284: 	xorl	%ecx, %ecx
    00000286: 	xorl	%eax, %eax
    00000288: 	jmp	.Ltmp1625 # Offset: 648
.Ltmp1617:
    0000028d: 	movq	%rbx, %rdi
    00000290: 	leaq	0x20(%rsp), %rsi
    00000295: 	xorl	%edx, %edx
    00000297: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 663
    0000029c: 	movq	%rax, (%rbx)
    0000029f: 	movq	%rax, %rdi
    000002a2: 	movq	0x20(%rsp), %rax
    000002a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1628:
    000002ab: 	movq	%r12, %rdx
    000002ae: 	movq	%r13, %rsi
    000002b1: 	callq	memcpy@PLT # Offset: 689
    000002b6: 	movq	0x20(%rsp), %r12
    000002bb: 	movq	(%rbx), %rdi
    000002be: 	jmp	.Ltmp1626 # Offset: 702
.Ltmp1614:
    000002c3: 	movq	0x8(%rsp), %rsi
    000002c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	jne	.Ltmp1627 # Offset: 745
.Ltmp1619:
    000002ef: 	movq	-0x8(%rdx), %rax
    000002f3: 	addq	$0x200, %rax
    000002f9: 	jmp	.Ltmp1627 # Offset: 761
.Ltmp1618:
    000002fe: 	testq	%r12, %r12
    00000301: 	je	.Ltmp1626 # Offset: 769
    00000307: 	jmp	.Ltmp1628 # Offset: 775
.Ltmp1620:
    00000309: 	callq	__stack_chk_fail@PLT # Offset: 777
.Ltmp1616:
    0000030e: 	leaq	DATAat0x2b008(%rip), %rdi
    00000315: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1621:
    00000320: 	movl	%esi, 0x1c(%rsp)
    00000324: 	movsd	%xmm1, 0x10(%rsp)
    0000032a: 	callq	sqrt@PLT # Offset: 810
    0000032f: 	movl	0x1c(%rsp), %esi
    00000333: 	movsd	0x10(%rsp), %xmm1
    00000339: 	jmp	.Ltmp1629 # Offset: 825
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x19fb0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x19fb0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1630 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1635:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1631 # Offset: 122
.Ltmp1632:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1632 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1633 # Offset: 186
.Ltmp1646:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1634 # Offset: 195
.Ltmp1645:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1644:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1635 # Offset: 214
.Ltmp1630:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1636 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1637 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1638 # Offset: 269
.Ltmp1637:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1639 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1640 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1647:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1641 # Offset: 349
.Ltmp1648:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1642 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1634:
    000001b8: 	movq	%rdx, %r8
.Ltmp1633:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1643 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1650:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1644 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1645 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1631:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1646 # Offset: 578
.Ltmp1639:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1649:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1647 # Offset: 632
.Ltmp1636:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1648 # Offset: 673
.Ltmp1641:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1648 # Offset: 689
.Ltmp1640:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1647 # Offset: 697
    000002bf: 	jmp	.Ltmp1649 # Offset: 703
.Ltmp1642:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1638:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1643:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1650 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x1a2b0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1a2b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1651 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1656:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1652 # Offset: 122
.Ltmp1653:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1653 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1654 # Offset: 186
.Ltmp1667:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1655 # Offset: 195
.Ltmp1666:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1665:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1656 # Offset: 214
.Ltmp1651:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1657 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1658 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1659 # Offset: 269
.Ltmp1658:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1660 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1661 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1668:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1662 # Offset: 349
.Ltmp1669:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1663 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1655:
    000001b8: 	movq	%rdx, %r8
.Ltmp1654:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1664 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1671:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1665 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1666 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1652:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1667 # Offset: 578
.Ltmp1660:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1670:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1668 # Offset: 632
.Ltmp1657:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1669 # Offset: 673
.Ltmp1662:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1669 # Offset: 689
.Ltmp1661:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1668 # Offset: 697
    000002bf: 	jmp	.Ltmp1670 # Offset: 703
.Ltmp1663:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1659:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1664:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1671 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x1a5b0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1a5b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1672 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1677:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1673 # Offset: 122
.Ltmp1674:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1674 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1675 # Offset: 186
.Ltmp1688:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1676 # Offset: 195
.Ltmp1687:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1686:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1677 # Offset: 214
.Ltmp1672:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1678 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1679 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1680 # Offset: 269
.Ltmp1679:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1681 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1682 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1689:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1683 # Offset: 349
.Ltmp1690:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1684 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1676:
    000001b8: 	movq	%rdx, %r8
.Ltmp1675:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1685 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1692:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1686 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1687 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1673:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1688 # Offset: 578
.Ltmp1681:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1691:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1689 # Offset: 632
.Ltmp1678:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1690 # Offset: 673
.Ltmp1683:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1690 # Offset: 689
.Ltmp1682:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1689 # Offset: 697
    000002bf: 	jmp	.Ltmp1691 # Offset: 703
.Ltmp1684:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1680:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1685:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1692 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x1a8b0
  Size        : 0x33e
  MaxSize     : 0x340
  Offset      : 0x1a8b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %esi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%esi, %esi
    00000041: 	jle	.Ltmp1693 # Offset: 65
    00000047: 	movl	%r14d, %eax
    0000004a: 	movl	%r14d, %ebp
    0000004d: 	leaq	DATAat0x2b1d0(%rip), %rbx
    00000054: 	xorl	%r15d, %r15d
    00000057: 	shrl	%eax
    00000059: 	andl	$-0x2, %ebp
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r12,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1700:
    00000070: 	cvttsd2si	init_value(%rip), %edi
    00000078: 	imull	$0x1f40, %edi, %edi
    0000007e: 	testl	%r14d, %r14d
    00000081: 	jle	.Ltmp1694 # Offset: 129
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	je	.Ltmp1695 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm0, %xmm0
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1696:
    000000a0: 	movdqu	(%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddd	%xmm2, %xmm0
    000000ac: 	cmpq	%rax, %r13
    000000af: 	jne	.Ltmp1696 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	movd	%xmm0, %eax
    000000b9: 	punpckhdq	%xmm0, %xmm1
    000000bd: 	movd	%xmm1, %edx
    000000c1: 	pshufd	$0xff, %xmm0, %xmm1
    000000c6: 	pshufd	$0x55, %xmm0, %xmm0
    000000cb: 	addl	%eax, %edx
    000000cd: 	movd	%xmm1, %ecx
    000000d1: 	movd	%xmm0, %eax
    000000d5: 	addl	%eax, %ecx
    000000d7: 	movslq	%ebp, %rax
    000000da: 	cmpl	%r14d, %ebp
    000000dd: 	je	.Ltmp1697 # Offset: 221
.Ltmp1712:
    000000df: 	leaq	(%r12,%rax,8), %rax
    000000e3: 	addl	(%rax), %edx
    000000e5: 	addl	0x4(%rax), %ecx
.Ltmp1697:
    000000e8: 	subl	%edi, %edx
    000000ea: 	movl	%ecx, %edi
    000000ec: 	negl	%edi
    000000ee: 	movl	%edx, %eax
    000000f0: 	cmovsl	%ecx, %edi
    000000f3: 	negl	%eax
    000000f5: 	cmovsl	%edx, %eax
    000000f8: 	cmpl	%eax, %edi
    000000fa: 	jg	.Ltmp1698 # Offset: 250
.Ltmp1711:
    00000100: 	testl	%eax, %eax
    00000102: 	jne	.Ltmp1699 # Offset: 258
.Ltmp1710:
    00000108: 	movl	iterations(%rip), %esi
.Ltmp1709:
    0000010e: 	addl	$0x1, %r15d
    00000112: 	cmpl	%esi, %r15d
    00000115: 	jl	.Ltmp1700 # Offset: 277
.Ltmp1693:
    0000011b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000129: 	subq	$0x20, %rax
    0000012d: 	cmpq	%rax, %rbx
    00000130: 	je	.Ltmp1701 # Offset: 304
    00000136: 	movq	0x8(%rsp), %rax
    0000013b: 	leaq	0x10(%rbx), %rdi
    0000013f: 	movq	%rdi, (%rbx)
    00000142: 	movq	(%rax), %r13
    00000145: 	movq	0x8(%rax), %r12
    00000149: 	movq	%r13, %rax
    0000014c: 	addq	%r12, %rax
    0000014f: 	je	.Ltmp1702 # Offset: 335
    00000151: 	testq	%r13, %r13
    00000154: 	je	.Ltmp1703 # Offset: 340
.Ltmp1702:
    0000015a: 	movq	%r12, 0x20(%rsp)
    0000015f: 	cmpq	$0xf, %r12
    00000163: 	ja	.Ltmp1704 # Offset: 355
    00000169: 	cmpq	$0x1, %r12
    0000016d: 	jne	.Ltmp1705 # Offset: 365
    00000173: 	movzbl	(%r13), %eax
    00000178: 	movb	%al, 0x10(%rbx)
.Ltmp1713:
    0000017b: 	movq	%r12, 0x8(%rbx)
    0000017f: 	movb	$0x0, (%rdi,%r12)
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000192: 	addq	$0x20, %rax
    00000196: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a4: 	je	.Ltmp1706 # Offset: 420
.Ltmp1714:
    000001aa: 	movq	-0x20(%rax), %rbp
    000001ae: 	callq	clock@PLT # Offset: 430
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	0x28(%rsp), %rdx
    000001bf: 	subq	%fs:0x28, %rdx
    000001c8: 	jne	.Ltmp1707 # Offset: 456
    000001ce: 	subq	start_time(%rip), %rax
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	cvtsi2sd	%rax, %xmm0
    000001e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001e9: 	addq	$0x38, %rsp
    000001ed: 	popq	%rbx
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1699:
    00000200: 	movl	%eax, %edi
.Ltmp1698:
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	pxor	%xmm3, %xmm3
    0000020a: 	pxor	%xmm1, %xmm1
    0000020e: 	movl	%edx, %eax
    00000210: 	cltd
    00000211: 	cvtsi2sd	%edi, %xmm1
    00000215: 	idivl	%edi
    00000217: 	movl	%eax, %r9d
    0000021a: 	movl	%ecx, %eax
    0000021c: 	cltd
    0000021d: 	idivl	%edi
    0000021f: 	movl	%r9d, %edx
    00000222: 	imull	%r9d, %edx
    00000226: 	imull	%eax, %eax
    00000229: 	addl	%eax, %edx
    0000022b: 	cvtsi2sd	%edx, %xmm0
    0000022f: 	ucomisd	%xmm0, %xmm3
    00000233: 	ja	.Ltmp1708 # Offset: 563
    00000239: 	sqrtsd	%xmm0, %xmm0
.Ltmp1716:
    0000023d: 	mulsd	%xmm0, %xmm1
    00000241: 	cvttsd2si	%xmm1, %eax
    00000245: 	testl	%eax, %eax
    00000247: 	jle	.Ltmp1709 # Offset: 583
    0000024d: 	movl	current_test(%rip), %edx
    00000253: 	movq	%rbx, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	callq	__printf_chk@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1710 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1694:
    00000270: 	movl	%edi, %edx
    00000272: 	movl	%edi, %eax
    00000274: 	negl	%edx
    00000276: 	negl	%eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	xorl	%ecx, %ecx
    0000027d: 	jmp	.Ltmp1711 # Offset: 637
.Ltmp1695:
    00000282: 	xorl	%edx, %edx
    00000284: 	xorl	%ecx, %ecx
    00000286: 	xorl	%eax, %eax
    00000288: 	jmp	.Ltmp1712 # Offset: 648
.Ltmp1704:
    0000028d: 	movq	%rbx, %rdi
    00000290: 	leaq	0x20(%rsp), %rsi
    00000295: 	xorl	%edx, %edx
    00000297: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 663
    0000029c: 	movq	%rax, (%rbx)
    0000029f: 	movq	%rax, %rdi
    000002a2: 	movq	0x20(%rsp), %rax
    000002a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1715:
    000002ab: 	movq	%r12, %rdx
    000002ae: 	movq	%r13, %rsi
    000002b1: 	callq	memcpy@PLT # Offset: 689
    000002b6: 	movq	0x20(%rsp), %r12
    000002bb: 	movq	(%rbx), %rdi
    000002be: 	jmp	.Ltmp1713 # Offset: 702
.Ltmp1701:
    000002c3: 	movq	0x8(%rsp), %rsi
    000002c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	jne	.Ltmp1714 # Offset: 745
.Ltmp1706:
    000002ef: 	movq	-0x8(%rdx), %rax
    000002f3: 	addq	$0x200, %rax
    000002f9: 	jmp	.Ltmp1714 # Offset: 761
.Ltmp1705:
    000002fe: 	testq	%r12, %r12
    00000301: 	je	.Ltmp1713 # Offset: 769
    00000307: 	jmp	.Ltmp1715 # Offset: 775
.Ltmp1707:
    00000309: 	callq	__stack_chk_fail@PLT # Offset: 777
.Ltmp1703:
    0000030e: 	leaq	DATAat0x2b008(%rip), %rdi
    00000315: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1708:
    00000320: 	movl	%esi, 0x1c(%rsp)
    00000324: 	movsd	%xmm1, 0x10(%rsp)
    0000032a: 	callq	sqrt@PLT # Offset: 810
    0000032f: 	movl	0x1c(%rsp), %esi
    00000333: 	movsd	0x10(%rsp), %xmm1
    00000339: 	jmp	.Ltmp1716 # Offset: 825
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE15custom_sub_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x1abf0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1abf0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE15custom_sub_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1717 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1722:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1718 # Offset: 122
.Ltmp1719:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1719 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1720 # Offset: 186
.Ltmp1733:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1721 # Offset: 195
.Ltmp1732:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1731:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1722 # Offset: 214
.Ltmp1717:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1723 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1724 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1725 # Offset: 269
.Ltmp1724:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1726 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1727 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1734:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1728 # Offset: 349
.Ltmp1735:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1729 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1721:
    000001b8: 	movq	%rdx, %r8
.Ltmp1720:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1730 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1737:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1731 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1732 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1718:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1733 # Offset: 578
.Ltmp1726:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1736:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1734 # Offset: 632
.Ltmp1723:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1735 # Offset: 673
.Ltmp1728:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1735 # Offset: 689
.Ltmp1727:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1734 # Offset: 697
    000002bf: 	jmp	.Ltmp1736 # Offset: 703
.Ltmp1729:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1725:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1730:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1737 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE15custom_sub_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE15custom_identityIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x1aef0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1aef0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE15custom_identityIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1738 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1743:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1739 # Offset: 122
.Ltmp1740:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1740 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1741 # Offset: 186
.Ltmp1754:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1742 # Offset: 195
.Ltmp1753:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1752:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1743 # Offset: 214
.Ltmp1738:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1744 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1745 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1746 # Offset: 269
.Ltmp1745:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1747 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1748 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1755:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1749 # Offset: 349
.Ltmp1756:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1750 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1742:
    000001b8: 	movq	%rdx, %r8
.Ltmp1741:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1751 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1758:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1752 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1753 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1739:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1754 # Offset: 578
.Ltmp1747:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1757:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1755 # Offset: 632
.Ltmp1744:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1756 # Offset: 673
.Ltmp1749:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1756 # Offset: 689
.Ltmp1748:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1755 # Offset: 697
    000002bf: 	jmp	.Ltmp1757 # Offset: 703
.Ltmp1750:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1746:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1751:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1758 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE15custom_identityIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x1b1f0
  Size        : 0x33e
  MaxSize     : 0x340
  Offset      : 0x1b1f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %esi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%esi, %esi
    00000041: 	jle	.Ltmp1759 # Offset: 65
    00000047: 	movl	%r14d, %eax
    0000004a: 	movl	%r14d, %ebp
    0000004d: 	leaq	DATAat0x2b1d0(%rip), %rbx
    00000054: 	xorl	%r15d, %r15d
    00000057: 	shrl	%eax
    00000059: 	andl	$-0x2, %ebp
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r12,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1766:
    00000070: 	cvttsd2si	init_value(%rip), %edi
    00000078: 	imull	$0x1f40, %edi, %edi
    0000007e: 	testl	%r14d, %r14d
    00000081: 	jle	.Ltmp1760 # Offset: 129
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	je	.Ltmp1761 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm0, %xmm0
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1762:
    000000a0: 	movdqu	(%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddd	%xmm2, %xmm0
    000000ac: 	cmpq	%rax, %r13
    000000af: 	jne	.Ltmp1762 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	movd	%xmm0, %eax
    000000b9: 	punpckhdq	%xmm0, %xmm1
    000000bd: 	movd	%xmm1, %edx
    000000c1: 	pshufd	$0xff, %xmm0, %xmm1
    000000c6: 	pshufd	$0x55, %xmm0, %xmm0
    000000cb: 	addl	%eax, %edx
    000000cd: 	movd	%xmm1, %ecx
    000000d1: 	movd	%xmm0, %eax
    000000d5: 	addl	%eax, %ecx
    000000d7: 	movslq	%ebp, %rax
    000000da: 	cmpl	%r14d, %ebp
    000000dd: 	je	.Ltmp1763 # Offset: 221
.Ltmp1778:
    000000df: 	leaq	(%r12,%rax,8), %rax
    000000e3: 	addl	(%rax), %edx
    000000e5: 	addl	0x4(%rax), %ecx
.Ltmp1763:
    000000e8: 	subl	%edi, %edx
    000000ea: 	movl	%ecx, %edi
    000000ec: 	negl	%edi
    000000ee: 	movl	%edx, %eax
    000000f0: 	cmovsl	%ecx, %edi
    000000f3: 	negl	%eax
    000000f5: 	cmovsl	%edx, %eax
    000000f8: 	cmpl	%eax, %edi
    000000fa: 	jg	.Ltmp1764 # Offset: 250
.Ltmp1777:
    00000100: 	testl	%eax, %eax
    00000102: 	jne	.Ltmp1765 # Offset: 258
.Ltmp1776:
    00000108: 	movl	iterations(%rip), %esi
.Ltmp1775:
    0000010e: 	addl	$0x1, %r15d
    00000112: 	cmpl	%esi, %r15d
    00000115: 	jl	.Ltmp1766 # Offset: 277
.Ltmp1759:
    0000011b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000129: 	subq	$0x20, %rax
    0000012d: 	cmpq	%rax, %rbx
    00000130: 	je	.Ltmp1767 # Offset: 304
    00000136: 	movq	0x8(%rsp), %rax
    0000013b: 	leaq	0x10(%rbx), %rdi
    0000013f: 	movq	%rdi, (%rbx)
    00000142: 	movq	(%rax), %r13
    00000145: 	movq	0x8(%rax), %r12
    00000149: 	movq	%r13, %rax
    0000014c: 	addq	%r12, %rax
    0000014f: 	je	.Ltmp1768 # Offset: 335
    00000151: 	testq	%r13, %r13
    00000154: 	je	.Ltmp1769 # Offset: 340
.Ltmp1768:
    0000015a: 	movq	%r12, 0x20(%rsp)
    0000015f: 	cmpq	$0xf, %r12
    00000163: 	ja	.Ltmp1770 # Offset: 355
    00000169: 	cmpq	$0x1, %r12
    0000016d: 	jne	.Ltmp1771 # Offset: 365
    00000173: 	movzbl	(%r13), %eax
    00000178: 	movb	%al, 0x10(%rbx)
.Ltmp1779:
    0000017b: 	movq	%r12, 0x8(%rbx)
    0000017f: 	movb	$0x0, (%rdi,%r12)
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000192: 	addq	$0x20, %rax
    00000196: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a4: 	je	.Ltmp1772 # Offset: 420
.Ltmp1780:
    000001aa: 	movq	-0x20(%rax), %rbp
    000001ae: 	callq	clock@PLT # Offset: 430
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	0x28(%rsp), %rdx
    000001bf: 	subq	%fs:0x28, %rdx
    000001c8: 	jne	.Ltmp1773 # Offset: 456
    000001ce: 	subq	start_time(%rip), %rax
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	cvtsi2sd	%rax, %xmm0
    000001e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001e9: 	addq	$0x38, %rsp
    000001ed: 	popq	%rbx
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1765:
    00000200: 	movl	%eax, %edi
.Ltmp1764:
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	pxor	%xmm3, %xmm3
    0000020a: 	pxor	%xmm1, %xmm1
    0000020e: 	movl	%edx, %eax
    00000210: 	cltd
    00000211: 	cvtsi2sd	%edi, %xmm1
    00000215: 	idivl	%edi
    00000217: 	movl	%eax, %r9d
    0000021a: 	movl	%ecx, %eax
    0000021c: 	cltd
    0000021d: 	idivl	%edi
    0000021f: 	movl	%r9d, %edx
    00000222: 	imull	%r9d, %edx
    00000226: 	imull	%eax, %eax
    00000229: 	addl	%eax, %edx
    0000022b: 	cvtsi2sd	%edx, %xmm0
    0000022f: 	ucomisd	%xmm0, %xmm3
    00000233: 	ja	.Ltmp1774 # Offset: 563
    00000239: 	sqrtsd	%xmm0, %xmm0
.Ltmp1782:
    0000023d: 	mulsd	%xmm0, %xmm1
    00000241: 	cvttsd2si	%xmm1, %eax
    00000245: 	testl	%eax, %eax
    00000247: 	jle	.Ltmp1775 # Offset: 583
    0000024d: 	movl	current_test(%rip), %edx
    00000253: 	movq	%rbx, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	callq	__printf_chk@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1776 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1760:
    00000270: 	movl	%edi, %edx
    00000272: 	movl	%edi, %eax
    00000274: 	negl	%edx
    00000276: 	negl	%eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	xorl	%ecx, %ecx
    0000027d: 	jmp	.Ltmp1777 # Offset: 637
.Ltmp1761:
    00000282: 	xorl	%edx, %edx
    00000284: 	xorl	%ecx, %ecx
    00000286: 	xorl	%eax, %eax
    00000288: 	jmp	.Ltmp1778 # Offset: 648
.Ltmp1770:
    0000028d: 	movq	%rbx, %rdi
    00000290: 	leaq	0x20(%rsp), %rsi
    00000295: 	xorl	%edx, %edx
    00000297: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 663
    0000029c: 	movq	%rax, (%rbx)
    0000029f: 	movq	%rax, %rdi
    000002a2: 	movq	0x20(%rsp), %rax
    000002a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1781:
    000002ab: 	movq	%r12, %rdx
    000002ae: 	movq	%r13, %rsi
    000002b1: 	callq	memcpy@PLT # Offset: 689
    000002b6: 	movq	0x20(%rsp), %r12
    000002bb: 	movq	(%rbx), %rdi
    000002be: 	jmp	.Ltmp1779 # Offset: 702
.Ltmp1767:
    000002c3: 	movq	0x8(%rsp), %rsi
    000002c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	jne	.Ltmp1780 # Offset: 745
.Ltmp1772:
    000002ef: 	movq	-0x8(%rdx), %rax
    000002f3: 	addq	$0x200, %rax
    000002f9: 	jmp	.Ltmp1780 # Offset: 761
.Ltmp1771:
    000002fe: 	testq	%r12, %r12
    00000301: 	je	.Ltmp1779 # Offset: 769
    00000307: 	jmp	.Ltmp1781 # Offset: 775
.Ltmp1773:
    00000309: 	callq	__stack_chk_fail@PLT # Offset: 777
.Ltmp1769:
    0000030e: 	leaq	DATAat0x2b008(%rip), %rdi
    00000315: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1774:
    00000320: 	movl	%esi, 0x1c(%rsp)
    00000324: 	movsd	%xmm1, 0x10(%rsp)
    0000032a: 	callq	sqrt@PLT # Offset: 810
    0000032f: 	movl	0x1c(%rsp), %esi
    00000333: 	movsd	0x10(%rsp), %xmm1
    00000339: 	jmp	.Ltmp1782 # Offset: 825
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x1b530
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1b530
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1783 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1788:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1784 # Offset: 122
.Ltmp1785:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1785 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1786 # Offset: 186
.Ltmp1799:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1787 # Offset: 195
.Ltmp1798:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1797:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1788 # Offset: 214
.Ltmp1783:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1789 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1790 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1791 # Offset: 269
.Ltmp1790:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1792 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1793 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1800:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1794 # Offset: 349
.Ltmp1801:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1795 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1787:
    000001b8: 	movq	%rdx, %r8
.Ltmp1786:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1796 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1803:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1797 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1798 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1784:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1799 # Offset: 578
.Ltmp1792:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1802:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1800 # Offset: 632
.Ltmp1789:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1801 # Offset: 673
.Ltmp1794:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1801 # Offset: 689
.Ltmp1793:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1800 # Offset: 697
    000002bf: 	jmp	.Ltmp1802 # Offset: 703
.Ltmp1795:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1791:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1796:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1803 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x1b830
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1b830
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1804 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1809:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1805 # Offset: 122
.Ltmp1806:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1806 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1807 # Offset: 186
.Ltmp1820:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1808 # Offset: 195
.Ltmp1819:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1818:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1809 # Offset: 214
.Ltmp1804:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1810 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1811 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1812 # Offset: 269
.Ltmp1811:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1813 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1814 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1821:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1815 # Offset: 349
.Ltmp1822:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1816 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1808:
    000001b8: 	movq	%rdx, %r8
.Ltmp1807:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1817 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1824:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1818 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1819 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1805:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1820 # Offset: 578
.Ltmp1813:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1823:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1821 # Offset: 632
.Ltmp1810:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1822 # Offset: 673
.Ltmp1815:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1822 # Offset: 689
.Ltmp1814:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1821 # Offset: 697
    000002bf: 	jmp	.Ltmp1823 # Offset: 703
.Ltmp1816:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1812:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1817:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1824 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x1bb30
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1bb30
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1825 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1830:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1826 # Offset: 122
.Ltmp1827:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1827 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1828 # Offset: 186
.Ltmp1841:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1829 # Offset: 195
.Ltmp1840:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1839:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1830 # Offset: 214
.Ltmp1825:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1831 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1832 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1833 # Offset: 269
.Ltmp1832:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1834 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1835 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1842:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1836 # Offset: 349
.Ltmp1843:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1837 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1829:
    000001b8: 	movq	%rdx, %r8
.Ltmp1828:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1838 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1845:
    000001fa: 	mulsd	%xmm0, %xmm1
    000001fe: 	cvttsd2si	%xmm1, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1839 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1840 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1826:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1841 # Offset: 578
.Ltmp1834:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1844:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1842 # Offset: 632
.Ltmp1831:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1843 # Offset: 673
.Ltmp1836:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1843 # Offset: 689
.Ltmp1835:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1842 # Offset: 697
    000002bf: 	jmp	.Ltmp1844 # Offset: 703
.Ltmp1837:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1833:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1838:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1845 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x1be30
  Size        : 0x33e
  MaxSize     : 0x340
  Offset      : 0x1be30
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %esi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%esi, %esi
    00000041: 	jle	.Ltmp1846 # Offset: 65
    00000047: 	movl	%r14d, %eax
    0000004a: 	movl	%r14d, %ebp
    0000004d: 	leaq	DATAat0x2b1d0(%rip), %rbx
    00000054: 	xorl	%r15d, %r15d
    00000057: 	shrl	%eax
    00000059: 	andl	$-0x2, %ebp
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r12,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1853:
    00000070: 	cvttsd2si	init_value(%rip), %edi
    00000078: 	imull	$0xffffe0c0, %edi, %edi
    0000007e: 	testl	%r14d, %r14d
    00000081: 	jle	.Ltmp1847 # Offset: 129
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	je	.Ltmp1848 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm0, %xmm0
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1849:
    000000a0: 	movdqu	(%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	psubd	%xmm2, %xmm0
    000000ac: 	cmpq	%rax, %r13
    000000af: 	jne	.Ltmp1849 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	movd	%xmm0, %eax
    000000b9: 	punpckhdq	%xmm0, %xmm1
    000000bd: 	movd	%xmm1, %edx
    000000c1: 	pshufd	$0xff, %xmm0, %xmm1
    000000c6: 	pshufd	$0x55, %xmm0, %xmm0
    000000cb: 	addl	%eax, %edx
    000000cd: 	movd	%xmm1, %ecx
    000000d1: 	movd	%xmm0, %eax
    000000d5: 	addl	%eax, %ecx
    000000d7: 	movslq	%ebp, %rax
    000000da: 	cmpl	%r14d, %ebp
    000000dd: 	je	.Ltmp1850 # Offset: 221
.Ltmp1865:
    000000df: 	leaq	(%r12,%rax,8), %rax
    000000e3: 	subl	(%rax), %edx
    000000e5: 	subl	0x4(%rax), %ecx
.Ltmp1850:
    000000e8: 	subl	%edi, %edx
    000000ea: 	movl	%ecx, %edi
    000000ec: 	negl	%edi
    000000ee: 	movl	%edx, %eax
    000000f0: 	cmovsl	%ecx, %edi
    000000f3: 	negl	%eax
    000000f5: 	cmovsl	%edx, %eax
    000000f8: 	cmpl	%eax, %edi
    000000fa: 	jg	.Ltmp1851 # Offset: 250
.Ltmp1864:
    00000100: 	testl	%eax, %eax
    00000102: 	jne	.Ltmp1852 # Offset: 258
.Ltmp1863:
    00000108: 	movl	iterations(%rip), %esi
.Ltmp1862:
    0000010e: 	addl	$0x1, %r15d
    00000112: 	cmpl	%esi, %r15d
    00000115: 	jl	.Ltmp1853 # Offset: 277
.Ltmp1846:
    0000011b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000129: 	subq	$0x20, %rax
    0000012d: 	cmpq	%rax, %rbx
    00000130: 	je	.Ltmp1854 # Offset: 304
    00000136: 	movq	0x8(%rsp), %rax
    0000013b: 	leaq	0x10(%rbx), %rdi
    0000013f: 	movq	%rdi, (%rbx)
    00000142: 	movq	(%rax), %r13
    00000145: 	movq	0x8(%rax), %r12
    00000149: 	movq	%r13, %rax
    0000014c: 	addq	%r12, %rax
    0000014f: 	je	.Ltmp1855 # Offset: 335
    00000151: 	testq	%r13, %r13
    00000154: 	je	.Ltmp1856 # Offset: 340
.Ltmp1855:
    0000015a: 	movq	%r12, 0x20(%rsp)
    0000015f: 	cmpq	$0xf, %r12
    00000163: 	ja	.Ltmp1857 # Offset: 355
    00000169: 	cmpq	$0x1, %r12
    0000016d: 	jne	.Ltmp1858 # Offset: 365
    00000173: 	movzbl	(%r13), %eax
    00000178: 	movb	%al, 0x10(%rbx)
.Ltmp1866:
    0000017b: 	movq	%r12, 0x8(%rbx)
    0000017f: 	movb	$0x0, (%rdi,%r12)
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000192: 	addq	$0x20, %rax
    00000196: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a4: 	je	.Ltmp1859 # Offset: 420
.Ltmp1867:
    000001aa: 	movq	-0x20(%rax), %rbp
    000001ae: 	callq	clock@PLT # Offset: 430
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	0x28(%rsp), %rdx
    000001bf: 	subq	%fs:0x28, %rdx
    000001c8: 	jne	.Ltmp1860 # Offset: 456
    000001ce: 	subq	start_time(%rip), %rax
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	cvtsi2sd	%rax, %xmm0
    000001e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001e9: 	addq	$0x38, %rsp
    000001ed: 	popq	%rbx
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1852:
    00000200: 	movl	%eax, %edi
.Ltmp1851:
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	pxor	%xmm3, %xmm3
    0000020a: 	pxor	%xmm1, %xmm1
    0000020e: 	movl	%edx, %eax
    00000210: 	cltd
    00000211: 	cvtsi2sd	%edi, %xmm1
    00000215: 	idivl	%edi
    00000217: 	movl	%eax, %r9d
    0000021a: 	movl	%ecx, %eax
    0000021c: 	cltd
    0000021d: 	idivl	%edi
    0000021f: 	movl	%r9d, %edx
    00000222: 	imull	%r9d, %edx
    00000226: 	imull	%eax, %eax
    00000229: 	addl	%eax, %edx
    0000022b: 	cvtsi2sd	%edx, %xmm0
    0000022f: 	ucomisd	%xmm0, %xmm3
    00000233: 	ja	.Ltmp1861 # Offset: 563
    00000239: 	sqrtsd	%xmm0, %xmm0
.Ltmp1869:
    0000023d: 	mulsd	%xmm1, %xmm0
    00000241: 	cvttsd2si	%xmm0, %eax
    00000245: 	testl	%eax, %eax
    00000247: 	jle	.Ltmp1862 # Offset: 583
    0000024d: 	movl	current_test(%rip), %edx
    00000253: 	movq	%rbx, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	callq	__printf_chk@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1863 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1847:
    00000270: 	movl	%edi, %edx
    00000272: 	movl	%edi, %eax
    00000274: 	negl	%edx
    00000276: 	negl	%eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	xorl	%ecx, %ecx
    0000027d: 	jmp	.Ltmp1864 # Offset: 637
.Ltmp1848:
    00000282: 	xorl	%edx, %edx
    00000284: 	xorl	%ecx, %ecx
    00000286: 	xorl	%eax, %eax
    00000288: 	jmp	.Ltmp1865 # Offset: 648
.Ltmp1857:
    0000028d: 	movq	%rbx, %rdi
    00000290: 	leaq	0x20(%rsp), %rsi
    00000295: 	xorl	%edx, %edx
    00000297: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 663
    0000029c: 	movq	%rax, (%rbx)
    0000029f: 	movq	%rax, %rdi
    000002a2: 	movq	0x20(%rsp), %rax
    000002a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1868:
    000002ab: 	movq	%r12, %rdx
    000002ae: 	movq	%r13, %rsi
    000002b1: 	callq	memcpy@PLT # Offset: 689
    000002b6: 	movq	0x20(%rsp), %r12
    000002bb: 	movq	(%rbx), %rdi
    000002be: 	jmp	.Ltmp1866 # Offset: 702
.Ltmp1854:
    000002c3: 	movq	0x8(%rsp), %rsi
    000002c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	jne	.Ltmp1867 # Offset: 745
.Ltmp1859:
    000002ef: 	movq	-0x8(%rdx), %rax
    000002f3: 	addq	$0x200, %rax
    000002f9: 	jmp	.Ltmp1867 # Offset: 761
.Ltmp1858:
    000002fe: 	testq	%r12, %r12
    00000301: 	je	.Ltmp1866 # Offset: 769
    00000307: 	jmp	.Ltmp1868 # Offset: 775
.Ltmp1860:
    00000309: 	callq	__stack_chk_fail@PLT # Offset: 777
.Ltmp1856:
    0000030e: 	leaq	DATAat0x2b008(%rip), %rdi
    00000315: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1861:
    00000320: 	movl	%esi, 0x1c(%rsp)
    00000324: 	movsd	%xmm1, 0x10(%rsp)
    0000032a: 	callq	sqrt@PLT # Offset: 810
    0000032f: 	movl	0x1c(%rsp), %esi
    00000333: 	movsd	0x10(%rsp), %xmm1
    00000339: 	jmp	.Ltmp1869 # Offset: 825
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x1c170
  Size        : 0x33e
  MaxSize     : 0x340
  Offset      : 0x1c170
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %esi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%esi, %esi
    00000041: 	jle	.Ltmp1870 # Offset: 65
    00000047: 	movl	%r14d, %eax
    0000004a: 	movl	%r14d, %ebp
    0000004d: 	leaq	DATAat0x2b1d0(%rip), %rbx
    00000054: 	xorl	%r15d, %r15d
    00000057: 	shrl	%eax
    00000059: 	andl	$-0x2, %ebp
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r12,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1877:
    00000070: 	cvttsd2si	init_value(%rip), %edi
    00000078: 	imull	$0xffffe0c0, %edi, %edi
    0000007e: 	testl	%r14d, %r14d
    00000081: 	jle	.Ltmp1871 # Offset: 129
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	je	.Ltmp1872 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm0, %xmm0
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1873:
    000000a0: 	movdqu	(%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	psubd	%xmm2, %xmm0
    000000ac: 	cmpq	%rax, %r13
    000000af: 	jne	.Ltmp1873 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	movd	%xmm0, %eax
    000000b9: 	punpckhdq	%xmm0, %xmm1
    000000bd: 	movd	%xmm1, %edx
    000000c1: 	pshufd	$0xff, %xmm0, %xmm1
    000000c6: 	pshufd	$0x55, %xmm0, %xmm0
    000000cb: 	addl	%eax, %edx
    000000cd: 	movd	%xmm1, %ecx
    000000d1: 	movd	%xmm0, %eax
    000000d5: 	addl	%eax, %ecx
    000000d7: 	movslq	%ebp, %rax
    000000da: 	cmpl	%r14d, %ebp
    000000dd: 	je	.Ltmp1874 # Offset: 221
.Ltmp1889:
    000000df: 	leaq	(%r12,%rax,8), %rax
    000000e3: 	subl	(%rax), %edx
    000000e5: 	subl	0x4(%rax), %ecx
.Ltmp1874:
    000000e8: 	subl	%edi, %edx
    000000ea: 	movl	%ecx, %edi
    000000ec: 	negl	%edi
    000000ee: 	movl	%edx, %eax
    000000f0: 	cmovsl	%ecx, %edi
    000000f3: 	negl	%eax
    000000f5: 	cmovsl	%edx, %eax
    000000f8: 	cmpl	%eax, %edi
    000000fa: 	jg	.Ltmp1875 # Offset: 250
.Ltmp1888:
    00000100: 	testl	%eax, %eax
    00000102: 	jne	.Ltmp1876 # Offset: 258
.Ltmp1887:
    00000108: 	movl	iterations(%rip), %esi
.Ltmp1886:
    0000010e: 	addl	$0x1, %r15d
    00000112: 	cmpl	%esi, %r15d
    00000115: 	jl	.Ltmp1877 # Offset: 277
.Ltmp1870:
    0000011b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000129: 	subq	$0x20, %rax
    0000012d: 	cmpq	%rax, %rbx
    00000130: 	je	.Ltmp1878 # Offset: 304
    00000136: 	movq	0x8(%rsp), %rax
    0000013b: 	leaq	0x10(%rbx), %rdi
    0000013f: 	movq	%rdi, (%rbx)
    00000142: 	movq	(%rax), %r13
    00000145: 	movq	0x8(%rax), %r12
    00000149: 	movq	%r13, %rax
    0000014c: 	addq	%r12, %rax
    0000014f: 	je	.Ltmp1879 # Offset: 335
    00000151: 	testq	%r13, %r13
    00000154: 	je	.Ltmp1880 # Offset: 340
.Ltmp1879:
    0000015a: 	movq	%r12, 0x20(%rsp)
    0000015f: 	cmpq	$0xf, %r12
    00000163: 	ja	.Ltmp1881 # Offset: 355
    00000169: 	cmpq	$0x1, %r12
    0000016d: 	jne	.Ltmp1882 # Offset: 365
    00000173: 	movzbl	(%r13), %eax
    00000178: 	movb	%al, 0x10(%rbx)
.Ltmp1890:
    0000017b: 	movq	%r12, 0x8(%rbx)
    0000017f: 	movb	$0x0, (%rdi,%r12)
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000192: 	addq	$0x20, %rax
    00000196: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000019d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a4: 	je	.Ltmp1883 # Offset: 420
.Ltmp1891:
    000001aa: 	movq	-0x20(%rax), %rbp
    000001ae: 	callq	clock@PLT # Offset: 430
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	0x28(%rsp), %rdx
    000001bf: 	subq	%fs:0x28, %rdx
    000001c8: 	jne	.Ltmp1884 # Offset: 456
    000001ce: 	subq	start_time(%rip), %rax
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	cvtsi2sd	%rax, %xmm0
    000001e1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001e9: 	addq	$0x38, %rsp
    000001ed: 	popq	%rbx
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1876:
    00000200: 	movl	%eax, %edi
.Ltmp1875:
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	pxor	%xmm3, %xmm3
    0000020a: 	pxor	%xmm1, %xmm1
    0000020e: 	movl	%edx, %eax
    00000210: 	cltd
    00000211: 	cvtsi2sd	%edi, %xmm1
    00000215: 	idivl	%edi
    00000217: 	movl	%eax, %r9d
    0000021a: 	movl	%ecx, %eax
    0000021c: 	cltd
    0000021d: 	idivl	%edi
    0000021f: 	movl	%r9d, %edx
    00000222: 	imull	%r9d, %edx
    00000226: 	imull	%eax, %eax
    00000229: 	addl	%eax, %edx
    0000022b: 	cvtsi2sd	%edx, %xmm0
    0000022f: 	ucomisd	%xmm0, %xmm3
    00000233: 	ja	.Ltmp1885 # Offset: 563
    00000239: 	sqrtsd	%xmm0, %xmm0
.Ltmp1893:
    0000023d: 	mulsd	%xmm1, %xmm0
    00000241: 	cvttsd2si	%xmm0, %eax
    00000245: 	testl	%eax, %eax
    00000247: 	jle	.Ltmp1886 # Offset: 583
    0000024d: 	movl	current_test(%rip), %edx
    00000253: 	movq	%rbx, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	callq	__printf_chk@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1887 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1871:
    00000270: 	movl	%edi, %edx
    00000272: 	movl	%edi, %eax
    00000274: 	negl	%edx
    00000276: 	negl	%eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	xorl	%ecx, %ecx
    0000027d: 	jmp	.Ltmp1888 # Offset: 637
.Ltmp1872:
    00000282: 	xorl	%edx, %edx
    00000284: 	xorl	%ecx, %ecx
    00000286: 	xorl	%eax, %eax
    00000288: 	jmp	.Ltmp1889 # Offset: 648
.Ltmp1881:
    0000028d: 	movq	%rbx, %rdi
    00000290: 	leaq	0x20(%rsp), %rsi
    00000295: 	xorl	%edx, %edx
    00000297: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 663
    0000029c: 	movq	%rax, (%rbx)
    0000029f: 	movq	%rax, %rdi
    000002a2: 	movq	0x20(%rsp), %rax
    000002a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1892:
    000002ab: 	movq	%r12, %rdx
    000002ae: 	movq	%r13, %rsi
    000002b1: 	callq	memcpy@PLT # Offset: 689
    000002b6: 	movq	0x20(%rsp), %r12
    000002bb: 	movq	(%rbx), %rdi
    000002be: 	jmp	.Ltmp1890 # Offset: 702
.Ltmp1878:
    000002c3: 	movq	0x8(%rsp), %rsi
    000002c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	jne	.Ltmp1891 # Offset: 745
.Ltmp1883:
    000002ef: 	movq	-0x8(%rdx), %rax
    000002f3: 	addq	$0x200, %rax
    000002f9: 	jmp	.Ltmp1891 # Offset: 761
.Ltmp1882:
    000002fe: 	testq	%r12, %r12
    00000301: 	je	.Ltmp1890 # Offset: 769
    00000307: 	jmp	.Ltmp1892 # Offset: 775
.Ltmp1884:
    00000309: 	callq	__stack_chk_fail@PLT # Offset: 777
.Ltmp1880:
    0000030e: 	leaq	DATAat0x2b008(%rip), %rdi
    00000315: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1885:
    00000320: 	movl	%esi, 0x1c(%rsp)
    00000324: 	movsd	%xmm1, 0x10(%rsp)
    0000032a: 	callq	sqrt@PLT # Offset: 810
    0000032f: 	movl	0x1c(%rsp), %esi
    00000333: 	movsd	0x10(%rsp), %xmm1
    00000339: 	jmp	.Ltmp1893 # Offset: 825
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x1c4b0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1c4b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1894 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1899:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$-0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1895 # Offset: 122
.Ltmp1896:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	psubq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1896 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1897 # Offset: 186
.Ltmp1910:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1898 # Offset: 195
.Ltmp1909:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1908:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1899 # Offset: 214
.Ltmp1894:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1900 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1901 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1902 # Offset: 269
.Ltmp1901:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1903 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1904 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1911:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1905 # Offset: 349
.Ltmp1912:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1906 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1898:
    000001b8: 	movq	%rdx, %r8
.Ltmp1897:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1907 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1914:
    000001fa: 	mulsd	%xmm1, %xmm0
    000001fe: 	cvttsd2si	%xmm0, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1908 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1909 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1895:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1910 # Offset: 578
.Ltmp1903:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1913:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1911 # Offset: 632
.Ltmp1900:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1912 # Offset: 673
.Ltmp1905:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1912 # Offset: 689
.Ltmp1904:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1911 # Offset: 697
    000002bf: 	jmp	.Ltmp1913 # Offset: 703
.Ltmp1906:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1902:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1907:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1914 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x1c7b0
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x1c7b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %esi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%esi, %esi
    0000003f: 	jle	.Ltmp1915 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1920:
    00000060: 	cvttsd2si	init_value(%rip), %rcx
    00000069: 	movq	%rbx, %rax
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	imulq	$-0x1f40, %rcx, %rcx
    00000077: 	testl	%r15d, %r15d
    0000007a: 	jle	.Ltmp1916 # Offset: 122
.Ltmp1917:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	psubq	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	jne	.Ltmp1917 # Offset: 143
    00000091: 	movhlps	%xmm0, %xmm3
    00000094: 	movq	%xmm0, %rax
    00000099: 	subq	%rcx, %rax
    0000009c: 	movq	%xmm3, %r8
    000000a1: 	movq	%xmm3, %rdi
    000000a6: 	negq	%r8
    000000a9: 	movq	%rax, %rdx
    000000ac: 	cmovsq	%rdi, %r8
    000000b0: 	negq	%rdx
    000000b3: 	cmovsq	%rax, %rdx
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jg	.Ltmp1918 # Offset: 186
.Ltmp1931:
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	jne	.Ltmp1919 # Offset: 195
.Ltmp1930:
    000000c9: 	movl	iterations(%rip), %esi
.Ltmp1929:
    000000cf: 	addl	$0x1, %r14d
    000000d3: 	cmpl	%esi, %r14d
    000000d6: 	jl	.Ltmp1920 # Offset: 214
.Ltmp1915:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp1921 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp1922 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp1923 # Offset: 269
.Ltmp1922:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp1924 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp1925 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp1932:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp1926 # Offset: 349
.Ltmp1933:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp1927 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1919:
    000001b8: 	movq	%rdx, %r8
.Ltmp1918:
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	pxor	%xmm4, %xmm4
    000001c3: 	pxor	%xmm1, %xmm1
    000001c7: 	cqto
    000001c9: 	idivq	%r8
    000001cc: 	cvtsi2sd	%r8, %xmm1
    000001d1: 	movq	%rax, %rcx
    000001d4: 	movq	%rdi, %rax
    000001d7: 	cqto
    000001d9: 	imulq	%rcx, %rcx
    000001dd: 	idivq	%r8
    000001e0: 	imulq	%rax, %rax
    000001e4: 	addq	%rax, %rcx
    000001e7: 	cvtsi2sd	%rcx, %xmm0
    000001ec: 	ucomisd	%xmm0, %xmm4
    000001f0: 	ja	.Ltmp1928 # Offset: 496
    000001f6: 	sqrtsd	%xmm0, %xmm0
.Ltmp1935:
    000001fa: 	mulsd	%xmm1, %xmm0
    000001fe: 	cvttsd2si	%xmm0, %rax
    00000203: 	testq	%rax, %rax
    00000206: 	jle	.Ltmp1929 # Offset: 518
    0000020c: 	movl	current_test(%rip), %edx
    00000212: 	movq	%r12, %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
    00000221: 	jmp	.Ltmp1930 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1916:
    00000230: 	movq	%rcx, %rax
    00000233: 	movq	%rcx, %rdx
    00000236: 	negq	%rax
    00000239: 	negq	%rdx
    0000023c: 	cmovsq	%rcx, %rdx
    00000240: 	xorl	%edi, %edi
    00000242: 	jmp	.Ltmp1931 # Offset: 578
.Ltmp1924:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1934:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1932 # Offset: 632
.Ltmp1921:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1933 # Offset: 673
.Ltmp1926:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1933 # Offset: 689
.Ltmp1925:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1932 # Offset: 697
    000002bf: 	jmp	.Ltmp1934 # Offset: 703
.Ltmp1927:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1923:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1928:
    000002d8: 	movl	%esi, 0xc(%rsp)
    000002dc: 	movsd	%xmm1, (%rsp)
    000002e1: 	callq	sqrt@PLT # Offset: 737
    000002e6: 	movl	0xc(%rsp), %esi
    000002ea: 	movsd	(%rsp), %xmm1
    000002ef: 	jmp	.Ltmp1935 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x1cab0
  Size        : 0x324
  MaxSize     : 0x330
  Offset      : 0x1cab0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp1936 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	movdqa	DATAat0x2b870(%rip), %xmm2
    00000051: 	xorl	%r14d, %r14d
    00000054: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%rbx,%rax), %r13
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1941:
    00000068: 	movq	%rbx, %rax
    0000006b: 	pxor	%xmm1, %xmm1
    0000006f: 	testl	%r15d, %r15d
    00000072: 	jle	.Ltmp1937 # Offset: 114
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1938:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	paddq	%xmm0, %xmm1
    00000090: 	cmpq	%rax, %r13
    00000093: 	jne	.Ltmp1938 # Offset: 147
    00000095: 	movhlps	%xmm1, %xmm3
    00000098: 	movq	%xmm1, %rax
    0000009d: 	movq	%xmm3, %rcx
    000000a2: 	subq	$0x1b580, %rcx
    000000a9: 	movq	%rcx, %r8
    000000ac: 	negq	%r8
    000000af: 	cmovsq	%rcx, %r8
.Ltmp1951:
    000000b3: 	cvttsd2si	init_value(%rip), %rdx
    000000bc: 	addq	$0xa, %rdx
    000000c0: 	imulq	$0x1f40, %rdx, %rdx
    000000c7: 	subq	%rdx, %rax
    000000ca: 	movq	%rax, %rdx
    000000cd: 	negq	%rdx
    000000d0: 	cmovsq	%rax, %rdx
    000000d4: 	cmpq	%r8, %rdx
    000000d7: 	jl	.Ltmp1939 # Offset: 215
    000000dd: 	testq	%rax, %rax
    000000e0: 	jne	.Ltmp1940 # Offset: 224
    000000e6: 	movl	iterations(%rip), %edi
.Ltmp1950:
    000000ec: 	addl	$0x1, %r14d
    000000f0: 	cmpl	%edi, %r14d
    000000f3: 	jl	.Ltmp1941 # Offset: 243
.Ltmp1936:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp1942 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp1943 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp1944 # Offset: 302
.Ltmp1943:
    00000134: 	movq	%r12, 0x10(%rsp)
    00000139: 	cmpq	$0xf, %r12
    0000013d: 	ja	.Ltmp1945 # Offset: 317
    00000143: 	cmpq	$0x1, %r12
    00000147: 	jne	.Ltmp1946 # Offset: 327
    0000014d: 	movzbl	(%r13), %eax
    00000152: 	movb	%al, 0x10(%rbx)
.Ltmp1952:
    00000155: 	movq	%r12, 0x8(%rbx)
    00000159: 	movb	$0x0, (%rdi,%r12)
    0000015e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000165: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016c: 	addq	$0x20, %rax
    00000170: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000177: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017e: 	je	.Ltmp1947 # Offset: 382
.Ltmp1953:
    00000184: 	movq	-0x20(%rax), %rbp
    00000188: 	callq	clock@PLT # Offset: 392
    0000018d: 	movq	%rax, end_time(%rip)
    00000194: 	movq	0x18(%rsp), %rdx
    00000199: 	subq	%fs:0x28, %rdx
    000001a2: 	jne	.Ltmp1948 # Offset: 418
    000001a8: 	subq	start_time(%rip), %rax
    000001af: 	pxor	%xmm0, %xmm0
    000001b3: 	movq	%rbp, %rdi
    000001b6: 	cvtsi2sd	%rax, %xmm0
    000001bb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c3: 	addq	$0x28, %rsp
    000001c7: 	popq	%rbx
    000001c8: 	popq	%rbp
    000001c9: 	popq	%r12
    000001cb: 	popq	%r13
    000001cd: 	popq	%r14
    000001cf: 	popq	%r15
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1940:
    000001e0: 	movq	%rdx, %r8
.Ltmp1939:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm4, %xmm4
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	cqto
    000001f1: 	idivq	%r8
    000001f4: 	cvtsi2sd	%r8, %xmm1
    000001f9: 	movq	%rax, %rsi
    000001fc: 	movq	%rcx, %rax
    000001ff: 	cqto
    00000201: 	imulq	%rsi, %rsi
    00000205: 	idivq	%r8
    00000208: 	imulq	%rax, %rax
    0000020c: 	addq	%rax, %rsi
    0000020f: 	cvtsi2sd	%rsi, %xmm0
    00000214: 	ucomisd	%xmm0, %xmm4
    00000218: 	ja	.Ltmp1949 # Offset: 536
    0000021e: 	sqrtsd	%xmm0, %xmm0
.Ltmp1955:
    00000222: 	mulsd	%xmm0, %xmm1
    00000226: 	cvttsd2si	%xmm1, %rax
    0000022b: 	testq	%rax, %rax
    0000022e: 	jle	.Ltmp1950 # Offset: 558
    00000234: 	movl	current_test(%rip), %edx
    0000023a: 	movl	$0x1, %edi
    0000023f: 	movq	%r12, %rsi
    00000242: 	xorl	%eax, %eax
    00000244: 	callq	__printf_chk@PLT # Offset: 580
    00000249: 	movl	iterations(%rip), %edi
    0000024f: 	movdqa	DATAat0x2b870(%rip), %xmm2
    00000257: 	jmp	.Ltmp1950 # Offset: 599
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp1937:
    00000260: 	movl	$0x1b580, %r8d
    00000266: 	movq	$-0x1b580, %rcx
    0000026d: 	xorl	%eax, %eax
    0000026f: 	jmp	.Ltmp1951 # Offset: 623
.Ltmp1945:
    00000274: 	movq	%rbx, %rdi
    00000277: 	leaq	0x10(%rsp), %rsi
    0000027c: 	xorl	%edx, %edx
    0000027e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 638
    00000283: 	movq	%rax, (%rbx)
    00000286: 	movq	%rax, %rdi
    00000289: 	movq	0x10(%rsp), %rax
    0000028e: 	movq	%rax, 0x10(%rbx)
.Ltmp1954:
    00000292: 	movq	%r12, %rdx
    00000295: 	movq	%r13, %rsi
    00000298: 	callq	memcpy@PLT # Offset: 664
    0000029d: 	movq	0x10(%rsp), %r12
    000002a2: 	movq	(%rbx), %rdi
    000002a5: 	jmp	.Ltmp1952 # Offset: 677
.Ltmp1942:
    000002aa: 	movq	%rbp, %rsi
    000002ad: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 692
    000002b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002c0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ce: 	jne	.Ltmp1953 # Offset: 718
.Ltmp1947:
    000002d4: 	movq	-0x8(%rdx), %rax
    000002d8: 	addq	$0x200, %rax
    000002de: 	jmp	.Ltmp1953 # Offset: 734
.Ltmp1946:
    000002e3: 	testq	%r12, %r12
    000002e6: 	je	.Ltmp1952 # Offset: 742
    000002ec: 	jmp	.Ltmp1954 # Offset: 748
.Ltmp1948:
    000002ee: 	callq	__stack_chk_fail@PLT # Offset: 750
.Ltmp1944:
    000002f3: 	leaq	DATAat0x2b008(%rip), %rdi
    000002fa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 762
    000002ff: 	nop # Size: 1
.Ltmp1949:
    00000300: 	movl	%edi, 0xc(%rsp)
    00000304: 	movsd	%xmm1, (%rsp)
    00000309: 	callq	sqrt@PLT # Offset: 777
    0000030e: 	movl	0xc(%rsp), %edi
    00000312: 	movsd	(%rsp), %xmm1
    00000317: 	movdqa	DATAat0x2b870(%rip), %xmm2
    0000031f: 	jmp	.Ltmp1955 # Offset: 799
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x1cde0
  Size        : 0x324
  MaxSize     : 0x330
  Offset      : 0x1cde0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp1956 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	movdqa	DATAat0x2b870(%rip), %xmm2
    00000051: 	xorl	%r14d, %r14d
    00000054: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%rbx,%rax), %r13
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1961:
    00000068: 	movq	%rbx, %rax
    0000006b: 	pxor	%xmm1, %xmm1
    0000006f: 	testl	%r15d, %r15d
    00000072: 	jle	.Ltmp1957 # Offset: 114
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1958:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	paddq	%xmm0, %xmm1
    00000090: 	cmpq	%rax, %r13
    00000093: 	jne	.Ltmp1958 # Offset: 147
    00000095: 	movhlps	%xmm1, %xmm3
    00000098: 	movq	%xmm1, %rax
    0000009d: 	movq	%xmm3, %rcx
    000000a2: 	subq	$0x1b580, %rcx
    000000a9: 	movq	%rcx, %r8
    000000ac: 	negq	%r8
    000000af: 	cmovsq	%rcx, %r8
.Ltmp1971:
    000000b3: 	cvttsd2si	init_value(%rip), %rdx
    000000bc: 	addq	$0xa, %rdx
    000000c0: 	imulq	$0x1f40, %rdx, %rdx
    000000c7: 	subq	%rdx, %rax
    000000ca: 	movq	%rax, %rdx
    000000cd: 	negq	%rdx
    000000d0: 	cmovsq	%rax, %rdx
    000000d4: 	cmpq	%r8, %rdx
    000000d7: 	jl	.Ltmp1959 # Offset: 215
    000000dd: 	testq	%rax, %rax
    000000e0: 	jne	.Ltmp1960 # Offset: 224
    000000e6: 	movl	iterations(%rip), %edi
.Ltmp1970:
    000000ec: 	addl	$0x1, %r14d
    000000f0: 	cmpl	%edi, %r14d
    000000f3: 	jl	.Ltmp1961 # Offset: 243
.Ltmp1956:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp1962 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp1963 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp1964 # Offset: 302
.Ltmp1963:
    00000134: 	movq	%r12, 0x10(%rsp)
    00000139: 	cmpq	$0xf, %r12
    0000013d: 	ja	.Ltmp1965 # Offset: 317
    00000143: 	cmpq	$0x1, %r12
    00000147: 	jne	.Ltmp1966 # Offset: 327
    0000014d: 	movzbl	(%r13), %eax
    00000152: 	movb	%al, 0x10(%rbx)
.Ltmp1972:
    00000155: 	movq	%r12, 0x8(%rbx)
    00000159: 	movb	$0x0, (%rdi,%r12)
    0000015e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000165: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016c: 	addq	$0x20, %rax
    00000170: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000177: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017e: 	je	.Ltmp1967 # Offset: 382
.Ltmp1973:
    00000184: 	movq	-0x20(%rax), %rbp
    00000188: 	callq	clock@PLT # Offset: 392
    0000018d: 	movq	%rax, end_time(%rip)
    00000194: 	movq	0x18(%rsp), %rdx
    00000199: 	subq	%fs:0x28, %rdx
    000001a2: 	jne	.Ltmp1968 # Offset: 418
    000001a8: 	subq	start_time(%rip), %rax
    000001af: 	pxor	%xmm0, %xmm0
    000001b3: 	movq	%rbp, %rdi
    000001b6: 	cvtsi2sd	%rax, %xmm0
    000001bb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c3: 	addq	$0x28, %rsp
    000001c7: 	popq	%rbx
    000001c8: 	popq	%rbp
    000001c9: 	popq	%r12
    000001cb: 	popq	%r13
    000001cd: 	popq	%r14
    000001cf: 	popq	%r15
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1960:
    000001e0: 	movq	%rdx, %r8
.Ltmp1959:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm4, %xmm4
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	cqto
    000001f1: 	idivq	%r8
    000001f4: 	cvtsi2sd	%r8, %xmm1
    000001f9: 	movq	%rax, %rsi
    000001fc: 	movq	%rcx, %rax
    000001ff: 	cqto
    00000201: 	imulq	%rsi, %rsi
    00000205: 	idivq	%r8
    00000208: 	imulq	%rax, %rax
    0000020c: 	addq	%rax, %rsi
    0000020f: 	cvtsi2sd	%rsi, %xmm0
    00000214: 	ucomisd	%xmm0, %xmm4
    00000218: 	ja	.Ltmp1969 # Offset: 536
    0000021e: 	sqrtsd	%xmm0, %xmm0
.Ltmp1975:
    00000222: 	mulsd	%xmm0, %xmm1
    00000226: 	cvttsd2si	%xmm1, %rax
    0000022b: 	testq	%rax, %rax
    0000022e: 	jle	.Ltmp1970 # Offset: 558
    00000234: 	movl	current_test(%rip), %edx
    0000023a: 	movl	$0x1, %edi
    0000023f: 	movq	%r12, %rsi
    00000242: 	xorl	%eax, %eax
    00000244: 	callq	__printf_chk@PLT # Offset: 580
    00000249: 	movl	iterations(%rip), %edi
    0000024f: 	movdqa	DATAat0x2b870(%rip), %xmm2
    00000257: 	jmp	.Ltmp1970 # Offset: 599
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp1957:
    00000260: 	movl	$0x1b580, %r8d
    00000266: 	movq	$-0x1b580, %rcx
    0000026d: 	xorl	%eax, %eax
    0000026f: 	jmp	.Ltmp1971 # Offset: 623
.Ltmp1965:
    00000274: 	movq	%rbx, %rdi
    00000277: 	leaq	0x10(%rsp), %rsi
    0000027c: 	xorl	%edx, %edx
    0000027e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 638
    00000283: 	movq	%rax, (%rbx)
    00000286: 	movq	%rax, %rdi
    00000289: 	movq	0x10(%rsp), %rax
    0000028e: 	movq	%rax, 0x10(%rbx)
.Ltmp1974:
    00000292: 	movq	%r12, %rdx
    00000295: 	movq	%r13, %rsi
    00000298: 	callq	memcpy@PLT # Offset: 664
    0000029d: 	movq	0x10(%rsp), %r12
    000002a2: 	movq	(%rbx), %rdi
    000002a5: 	jmp	.Ltmp1972 # Offset: 677
.Ltmp1962:
    000002aa: 	movq	%rbp, %rsi
    000002ad: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 692
    000002b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002c0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ce: 	jne	.Ltmp1973 # Offset: 718
.Ltmp1967:
    000002d4: 	movq	-0x8(%rdx), %rax
    000002d8: 	addq	$0x200, %rax
    000002de: 	jmp	.Ltmp1973 # Offset: 734
.Ltmp1966:
    000002e3: 	testq	%r12, %r12
    000002e6: 	je	.Ltmp1972 # Offset: 742
    000002ec: 	jmp	.Ltmp1974 # Offset: 748
.Ltmp1968:
    000002ee: 	callq	__stack_chk_fail@PLT # Offset: 750
.Ltmp1964:
    000002f3: 	leaq	DATAat0x2b008(%rip), %rdi
    000002fa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 762
    000002ff: 	nop # Size: 1
.Ltmp1969:
    00000300: 	movl	%edi, 0xc(%rsp)
    00000304: 	movsd	%xmm1, (%rsp)
    00000309: 	callq	sqrt@PLT # Offset: 777
    0000030e: 	movl	0xc(%rsp), %edi
    00000312: 	movsd	(%rsp), %xmm1
    00000317: 	movdqa	DATAat0x2b870(%rip), %xmm2
    0000031f: 	jmp	.Ltmp1975 # Offset: 799
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z13test_constantISt7complexIiE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z13test_constantISt7complexIiE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 103
  State       : disassembled
  Address     : 0x1d110
  Size        : 0x2f6
  MaxSize     : 0x300
  Offset      : 0x1d110
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x18(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %r15d
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	testl	%r15d, %r15d
    0000003a: 	jle	.Ltmp1976 # Offset: 58
    00000040: 	movdqa	DATAat0x2b880(%rip), %xmm2
    00000048: 	xorl	%r14d, %r14d
    0000004b: 	leaq	0xfa00(%rbx), %r13
    00000052: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1980:
    00000060: 	movq	%rbx, %rax
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1977:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	addq	$0x10, %rax
    00000078: 	paddd	%xmm2, %xmm0
    0000007c: 	paddd	%xmm0, %xmm1
    00000080: 	cmpq	%rax, %r13
    00000083: 	jne	.Ltmp1977 # Offset: 131
    00000085: 	movdqa	%xmm1, %xmm0
    00000089: 	movd	%xmm1, %edx
    0000008d: 	punpckhdq	%xmm1, %xmm0
    00000091: 	movd	%xmm0, %eax
    00000095: 	pshufd	$0xff, %xmm1, %xmm0
    0000009a: 	pshufd	$0x55, %xmm1, %xmm1
    0000009f: 	addl	%edx, %eax
    000000a1: 	cvttsd2si	init_value(%rip), %edx
    000000a9: 	movd	%xmm0, %ecx
    000000ad: 	subl	$0xb9, %edx
    000000b3: 	imull	$0x1f40, %edx, %edx
    000000b9: 	subl	%edx, %eax
    000000bb: 	movd	%xmm1, %edx
    000000bf: 	leal	0x15f900(%rcx,%rdx), %esi
    000000c6: 	movl	%eax, %edx
    000000c8: 	movl	%esi, %edi
    000000ca: 	negl	%edi
    000000cc: 	cmovsl	%esi, %edi
    000000cf: 	negl	%edx
    000000d1: 	cmovsl	%eax, %edx
    000000d4: 	cmpl	%edx, %edi
    000000d6: 	jg	.Ltmp1978 # Offset: 214
    000000dc: 	testl	%eax, %eax
    000000de: 	jne	.Ltmp1979 # Offset: 222
    000000e4: 	movl	iterations(%rip), %r15d
.Ltmp1989:
    000000eb: 	addl	$0x1, %r14d
    000000ef: 	cmpl	%r15d, %r14d
    000000f2: 	jl	.Ltmp1980 # Offset: 242
.Ltmp1976:
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp1981 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%rbp), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%rbp), %r13
    00000122: 	movq	%r13, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp1982 # Offset: 296
    0000012a: 	testq	%r13, %r13
    0000012d: 	je	.Ltmp1983 # Offset: 301
.Ltmp1982:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp1984 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp1985 # Offset: 326
    0000014c: 	movzbl	(%r13), %eax
    00000151: 	movb	%al, 0x10(%rbx)
.Ltmp1990:
    00000154: 	movq	%r12, 0x8(%rbx)
    00000158: 	movb	$0x0, (%rdi,%r12)
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000164: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016b: 	addq	$0x20, %rax
    0000016f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000176: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017d: 	je	.Ltmp1986 # Offset: 381
.Ltmp1991:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	movq	%rax, end_time(%rip)
    00000193: 	movq	0x18(%rsp), %rdx
    00000198: 	subq	%fs:0x28, %rdx
    000001a1: 	jne	.Ltmp1987 # Offset: 417
    000001a7: 	subq	start_time(%rip), %rax
    000001ae: 	pxor	%xmm0, %xmm0
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	cvtsi2sd	%rax, %xmm0
    000001ba: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c2: 	addq	$0x28, %rsp
    000001c6: 	popq	%rbx
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	popq	%r14
    000001ce: 	popq	%r15
    000001d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1979:
    000001d8: 	movl	%edx, %edi
.Ltmp1978:
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	pxor	%xmm3, %xmm3
    000001e2: 	pxor	%xmm1, %xmm1
    000001e6: 	cltd
    000001e7: 	idivl	%edi
    000001e9: 	cvtsi2sd	%edi, %xmm1
    000001ed: 	movl	%eax, %ecx
    000001ef: 	movl	%esi, %eax
    000001f1: 	cltd
    000001f2: 	imull	%ecx, %ecx
    000001f5: 	idivl	%edi
    000001f7: 	imull	%eax, %eax
    000001fa: 	addl	%eax, %ecx
    000001fc: 	cvtsi2sd	%ecx, %xmm0
    00000200: 	ucomisd	%xmm0, %xmm3
    00000204: 	ja	.Ltmp1988 # Offset: 516
    0000020a: 	sqrtsd	%xmm0, %xmm0
.Ltmp1993:
    0000020e: 	mulsd	%xmm0, %xmm1
    00000212: 	cvttsd2si	%xmm1, %eax
    00000216: 	testl	%eax, %eax
    00000218: 	jle	.Ltmp1989 # Offset: 536
    0000021e: 	movl	current_test(%rip), %edx
    00000224: 	movq	%r12, %rsi
    00000227: 	movl	$0x1, %edi
    0000022c: 	xorl	%eax, %eax
    0000022e: 	callq	__printf_chk@PLT # Offset: 558
    00000233: 	movl	iterations(%rip), %r15d
    0000023a: 	movdqa	DATAat0x2b880(%rip), %xmm2
    00000242: 	jmp	.Ltmp1989 # Offset: 578
.Ltmp1984:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1992:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1990 # Offset: 632
.Ltmp1981:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp1991 # Offset: 673
.Ltmp1986:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp1991 # Offset: 689
.Ltmp1985:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp1990 # Offset: 697
    000002bf: 	jmp	.Ltmp1992 # Offset: 703
.Ltmp1987:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp1983:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1988:
    000002d8: 	movsd	%xmm1, 0x8(%rsp)
    000002de: 	callq	sqrt@PLT # Offset: 734
    000002e3: 	movdqa	DATAat0x2b880(%rip), %xmm2
    000002eb: 	movsd	0x8(%rsp), %xmm1
    000002f1: 	jmp	.Ltmp1993 # Offset: 753
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z13test_constantISt7complexIlE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x1d410
  Size        : 0x324
  MaxSize     : 0x330
  Offset      : 0x1d410
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp1994 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	movdqa	DATAat0x2b890(%rip), %xmm2
    00000051: 	xorl	%r14d, %r14d
    00000054: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%rbx,%rax), %r13
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1999:
    00000068: 	movq	%rbx, %rax
    0000006b: 	pxor	%xmm1, %xmm1
    0000006f: 	testl	%r15d, %r15d
    00000072: 	jle	.Ltmp1995 # Offset: 114
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1996:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	paddq	%xmm0, %xmm1
    00000090: 	cmpq	%rax, %r13
    00000093: 	jne	.Ltmp1996 # Offset: 147
    00000095: 	movhlps	%xmm1, %xmm3
    00000098: 	movq	%xmm1, %rax
    0000009d: 	movq	%xmm3, %rcx
    000000a2: 	subq	$0x13880, %rcx
    000000a9: 	movq	%rcx, %r8
    000000ac: 	negq	%r8
    000000af: 	cmovsq	%rcx, %r8
.Ltmp2009:
    000000b3: 	cvttsd2si	init_value(%rip), %rdx
    000000bc: 	addq	$0x8, %rdx
    000000c0: 	imulq	$0x1f40, %rdx, %rdx
    000000c7: 	subq	%rdx, %rax
    000000ca: 	movq	%rax, %rdx
    000000cd: 	negq	%rdx
    000000d0: 	cmovsq	%rax, %rdx
    000000d4: 	cmpq	%r8, %rdx
    000000d7: 	jl	.Ltmp1997 # Offset: 215
    000000dd: 	testq	%rax, %rax
    000000e0: 	jne	.Ltmp1998 # Offset: 224
    000000e6: 	movl	iterations(%rip), %edi
.Ltmp2008:
    000000ec: 	addl	$0x1, %r14d
    000000f0: 	cmpl	%edi, %r14d
    000000f3: 	jl	.Ltmp1999 # Offset: 243
.Ltmp1994:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp2000 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp2001 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp2002 # Offset: 302
.Ltmp2001:
    00000134: 	movq	%r12, 0x10(%rsp)
    00000139: 	cmpq	$0xf, %r12
    0000013d: 	ja	.Ltmp2003 # Offset: 317
    00000143: 	cmpq	$0x1, %r12
    00000147: 	jne	.Ltmp2004 # Offset: 327
    0000014d: 	movzbl	(%r13), %eax
    00000152: 	movb	%al, 0x10(%rbx)
.Ltmp2010:
    00000155: 	movq	%r12, 0x8(%rbx)
    00000159: 	movb	$0x0, (%rdi,%r12)
    0000015e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000165: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016c: 	addq	$0x20, %rax
    00000170: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000177: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017e: 	je	.Ltmp2005 # Offset: 382
.Ltmp2011:
    00000184: 	movq	-0x20(%rax), %rbp
    00000188: 	callq	clock@PLT # Offset: 392
    0000018d: 	movq	%rax, end_time(%rip)
    00000194: 	movq	0x18(%rsp), %rdx
    00000199: 	subq	%fs:0x28, %rdx
    000001a2: 	jne	.Ltmp2006 # Offset: 418
    000001a8: 	subq	start_time(%rip), %rax
    000001af: 	pxor	%xmm0, %xmm0
    000001b3: 	movq	%rbp, %rdi
    000001b6: 	cvtsi2sd	%rax, %xmm0
    000001bb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c3: 	addq	$0x28, %rsp
    000001c7: 	popq	%rbx
    000001c8: 	popq	%rbp
    000001c9: 	popq	%r12
    000001cb: 	popq	%r13
    000001cd: 	popq	%r14
    000001cf: 	popq	%r15
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1998:
    000001e0: 	movq	%rdx, %r8
.Ltmp1997:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm4, %xmm4
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	cqto
    000001f1: 	idivq	%r8
    000001f4: 	cvtsi2sd	%r8, %xmm1
    000001f9: 	movq	%rax, %rsi
    000001fc: 	movq	%rcx, %rax
    000001ff: 	cqto
    00000201: 	imulq	%rsi, %rsi
    00000205: 	idivq	%r8
    00000208: 	imulq	%rax, %rax
    0000020c: 	addq	%rax, %rsi
    0000020f: 	cvtsi2sd	%rsi, %xmm0
    00000214: 	ucomisd	%xmm0, %xmm4
    00000218: 	ja	.Ltmp2007 # Offset: 536
    0000021e: 	sqrtsd	%xmm0, %xmm0
.Ltmp2013:
    00000222: 	mulsd	%xmm0, %xmm1
    00000226: 	cvttsd2si	%xmm1, %rax
    0000022b: 	testq	%rax, %rax
    0000022e: 	jle	.Ltmp2008 # Offset: 558
    00000234: 	movl	current_test(%rip), %edx
    0000023a: 	movl	$0x1, %edi
    0000023f: 	movq	%r12, %rsi
    00000242: 	xorl	%eax, %eax
    00000244: 	callq	__printf_chk@PLT # Offset: 580
    00000249: 	movl	iterations(%rip), %edi
    0000024f: 	movdqa	DATAat0x2b890(%rip), %xmm2
    00000257: 	jmp	.Ltmp2008 # Offset: 599
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp1995:
    00000260: 	movl	$0x13880, %r8d
    00000266: 	movq	$-0x13880, %rcx
    0000026d: 	xorl	%eax, %eax
    0000026f: 	jmp	.Ltmp2009 # Offset: 623
.Ltmp2003:
    00000274: 	movq	%rbx, %rdi
    00000277: 	leaq	0x10(%rsp), %rsi
    0000027c: 	xorl	%edx, %edx
    0000027e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 638
    00000283: 	movq	%rax, (%rbx)
    00000286: 	movq	%rax, %rdi
    00000289: 	movq	0x10(%rsp), %rax
    0000028e: 	movq	%rax, 0x10(%rbx)
.Ltmp2012:
    00000292: 	movq	%r12, %rdx
    00000295: 	movq	%r13, %rsi
    00000298: 	callq	memcpy@PLT # Offset: 664
    0000029d: 	movq	0x10(%rsp), %r12
    000002a2: 	movq	(%rbx), %rdi
    000002a5: 	jmp	.Ltmp2010 # Offset: 677
.Ltmp2000:
    000002aa: 	movq	%rbp, %rsi
    000002ad: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 692
    000002b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002c0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ce: 	jne	.Ltmp2011 # Offset: 718
.Ltmp2005:
    000002d4: 	movq	-0x8(%rdx), %rax
    000002d8: 	addq	$0x200, %rax
    000002de: 	jmp	.Ltmp2011 # Offset: 734
.Ltmp2004:
    000002e3: 	testq	%r12, %r12
    000002e6: 	je	.Ltmp2010 # Offset: 742
    000002ec: 	jmp	.Ltmp2012 # Offset: 748
.Ltmp2006:
    000002ee: 	callq	__stack_chk_fail@PLT # Offset: 750
.Ltmp2002:
    000002f3: 	leaq	DATAat0x2b008(%rip), %rdi
    000002fa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 762
    000002ff: 	nop # Size: 1
.Ltmp2007:
    00000300: 	movl	%edi, 0xc(%rsp)
    00000304: 	movsd	%xmm1, (%rsp)
    00000309: 	callq	sqrt@PLT # Offset: 777
    0000030e: 	movl	0xc(%rsp), %edi
    00000312: 	movsd	(%rsp), %xmm1
    00000317: 	movdqa	DATAat0x2b890(%rip), %xmm2
    0000031f: 	jmp	.Ltmp2013 # Offset: 799
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z13test_constantISt7complexIiE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z13test_constantISt7complexIiE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 105
  State       : disassembled
  Address     : 0x1d740
  Size        : 0x2f6
  MaxSize     : 0x300
  Offset      : 0x1d740
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x18(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %r15d
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	testl	%r15d, %r15d
    0000003a: 	jle	.Ltmp2014 # Offset: 58
    00000040: 	movdqa	DATAat0x2b8a0(%rip), %xmm2
    00000048: 	xorl	%r14d, %r14d
    0000004b: 	leaq	0xfa00(%rbx), %r13
    00000052: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp2018:
    00000060: 	movq	%rbx, %rax
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2015:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	addq	$0x10, %rax
    00000078: 	paddd	%xmm2, %xmm0
    0000007c: 	paddd	%xmm0, %xmm1
    00000080: 	cmpq	%rax, %r13
    00000083: 	jne	.Ltmp2015 # Offset: 131
    00000085: 	movdqa	%xmm1, %xmm0
    00000089: 	movd	%xmm1, %edx
    0000008d: 	punpckhdq	%xmm1, %xmm0
    00000091: 	movd	%xmm0, %eax
    00000095: 	pshufd	$0xff, %xmm1, %xmm0
    0000009a: 	pshufd	$0x55, %xmm1, %xmm1
    0000009f: 	addl	%edx, %eax
    000000a1: 	cvttsd2si	init_value(%rip), %edx
    000000a9: 	movd	%xmm0, %ecx
    000000ad: 	subl	$0xa, %edx
    000000b0: 	imull	$0x1f40, %edx, %edx
    000000b6: 	subl	%edx, %eax
    000000b8: 	movd	%xmm1, %edx
    000000bc: 	leal	0x1b580(%rcx,%rdx), %esi
    000000c3: 	movl	%eax, %edx
    000000c5: 	movl	%esi, %edi
    000000c7: 	negl	%edi
    000000c9: 	cmovsl	%esi, %edi
    000000cc: 	negl	%edx
    000000ce: 	cmovsl	%eax, %edx
    000000d1: 	cmpl	%edx, %edi
    000000d3: 	jg	.Ltmp2016 # Offset: 211
    000000d9: 	testl	%eax, %eax
    000000db: 	jne	.Ltmp2017 # Offset: 219
    000000e1: 	movl	iterations(%rip), %r15d
.Ltmp2027:
    000000e8: 	addl	$0x1, %r14d
    000000ec: 	cmpl	%r15d, %r14d
    000000ef: 	jl	.Ltmp2018 # Offset: 239
.Ltmp2014:
    000000f5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000103: 	subq	$0x20, %rax
    00000107: 	cmpq	%rax, %rbx
    0000010a: 	je	.Ltmp2019 # Offset: 266
    00000110: 	leaq	0x10(%rbx), %rdi
    00000114: 	movq	0x8(%rbp), %r12
    00000118: 	movq	%rdi, (%rbx)
    0000011b: 	movq	(%rbp), %r13
    0000011f: 	movq	%r13, %rax
    00000122: 	addq	%r12, %rax
    00000125: 	je	.Ltmp2020 # Offset: 293
    00000127: 	testq	%r13, %r13
    0000012a: 	je	.Ltmp2021 # Offset: 298
.Ltmp2020:
    00000130: 	movq	%r12, 0x10(%rsp)
    00000135: 	cmpq	$0xf, %r12
    00000139: 	ja	.Ltmp2022 # Offset: 313
    0000013f: 	cmpq	$0x1, %r12
    00000143: 	jne	.Ltmp2023 # Offset: 323
    00000149: 	movzbl	(%r13), %eax
    0000014e: 	movb	%al, 0x10(%rbx)
.Ltmp2028:
    00000151: 	movq	%r12, 0x8(%rbx)
    00000155: 	movb	$0x0, (%rdi,%r12)
    0000015a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000161: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000168: 	addq	$0x20, %rax
    0000016c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000173: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017a: 	je	.Ltmp2024 # Offset: 378
.Ltmp2029:
    00000180: 	movq	-0x20(%rax), %rbp
    00000184: 	callq	clock@PLT # Offset: 388
    00000189: 	movq	%rax, end_time(%rip)
    00000190: 	movq	0x18(%rsp), %rdx
    00000195: 	subq	%fs:0x28, %rdx
    0000019e: 	jne	.Ltmp2025 # Offset: 414
    000001a4: 	subq	start_time(%rip), %rax
    000001ab: 	pxor	%xmm0, %xmm0
    000001af: 	movq	%rbp, %rdi
    000001b2: 	cvtsi2sd	%rax, %xmm0
    000001b7: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001bf: 	addq	$0x28, %rsp
    000001c3: 	popq	%rbx
    000001c4: 	popq	%rbp
    000001c5: 	popq	%r12
    000001c7: 	popq	%r13
    000001c9: 	popq	%r14
    000001cb: 	popq	%r15
    000001cd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2017:
    000001d8: 	movl	%edx, %edi
.Ltmp2016:
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	pxor	%xmm3, %xmm3
    000001e2: 	pxor	%xmm1, %xmm1
    000001e6: 	cltd
    000001e7: 	idivl	%edi
    000001e9: 	cvtsi2sd	%edi, %xmm1
    000001ed: 	movl	%eax, %ecx
    000001ef: 	movl	%esi, %eax
    000001f1: 	cltd
    000001f2: 	imull	%ecx, %ecx
    000001f5: 	idivl	%edi
    000001f7: 	imull	%eax, %eax
    000001fa: 	addl	%eax, %ecx
    000001fc: 	cvtsi2sd	%ecx, %xmm0
    00000200: 	ucomisd	%xmm0, %xmm3
    00000204: 	ja	.Ltmp2026 # Offset: 516
    0000020a: 	sqrtsd	%xmm0, %xmm0
.Ltmp2031:
    0000020e: 	mulsd	%xmm0, %xmm1
    00000212: 	cvttsd2si	%xmm1, %eax
    00000216: 	testl	%eax, %eax
    00000218: 	jle	.Ltmp2027 # Offset: 536
    0000021e: 	movl	current_test(%rip), %edx
    00000224: 	movq	%r12, %rsi
    00000227: 	movl	$0x1, %edi
    0000022c: 	xorl	%eax, %eax
    0000022e: 	callq	__printf_chk@PLT # Offset: 558
    00000233: 	movl	iterations(%rip), %r15d
    0000023a: 	movdqa	DATAat0x2b8a0(%rip), %xmm2
    00000242: 	jmp	.Ltmp2027 # Offset: 578
.Ltmp2022:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp2030:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp2028 # Offset: 632
.Ltmp2019:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp2029 # Offset: 673
.Ltmp2024:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp2029 # Offset: 689
.Ltmp2023:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp2028 # Offset: 697
    000002bf: 	jmp	.Ltmp2030 # Offset: 703
.Ltmp2025:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp2021:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2026:
    000002d8: 	movsd	%xmm1, 0x8(%rsp)
    000002de: 	callq	sqrt@PLT # Offset: 734
    000002e3: 	movdqa	DATAat0x2b8a0(%rip), %xmm2
    000002eb: 	movsd	0x8(%rsp), %xmm1
    000002f1: 	jmp	.Ltmp2031 # Offset: 753
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z13test_constantISt7complexIiE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z13test_constantISt7complexIiE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z13test_constantISt7complexIiE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 106
  State       : disassembled
  Address     : 0x1da40
  Size        : 0x2f6
  MaxSize     : 0x300
  Offset      : 0x1da40
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x18(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %r15d
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	testl	%r15d, %r15d
    0000003a: 	jle	.Ltmp2032 # Offset: 58
    00000040: 	movdqa	DATAat0x2b8b0(%rip), %xmm2
    00000048: 	xorl	%r14d, %r14d
    0000004b: 	leaq	0xfa00(%rbx), %r13
    00000052: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp2036:
    00000060: 	movq	%rbx, %rax
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2033:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	addq	$0x10, %rax
    00000078: 	paddd	%xmm2, %xmm0
    0000007c: 	paddd	%xmm0, %xmm1
    00000080: 	cmpq	%rax, %r13
    00000083: 	jne	.Ltmp2033 # Offset: 131
    00000085: 	movdqa	%xmm1, %xmm0
    00000089: 	movd	%xmm1, %edx
    0000008d: 	punpckhdq	%xmm1, %xmm0
    00000091: 	movd	%xmm0, %eax
    00000095: 	pshufd	$0xff, %xmm1, %xmm0
    0000009a: 	pshufd	$0x55, %xmm1, %xmm1
    0000009f: 	addl	%edx, %eax
    000000a1: 	cvttsd2si	init_value(%rip), %edx
    000000a9: 	movd	%xmm0, %ecx
    000000ad: 	addl	$0xa, %edx
    000000b0: 	imull	$0x1f40, %edx, %edx
    000000b6: 	subl	%edx, %eax
    000000b8: 	movd	%xmm1, %edx
    000000bc: 	leal	-0x1b580(%rcx,%rdx), %esi
    000000c3: 	movl	%eax, %edx
    000000c5: 	movl	%esi, %edi
    000000c7: 	negl	%edi
    000000c9: 	cmovsl	%esi, %edi
    000000cc: 	negl	%edx
    000000ce: 	cmovsl	%eax, %edx
    000000d1: 	cmpl	%edx, %edi
    000000d3: 	jg	.Ltmp2034 # Offset: 211
    000000d9: 	testl	%eax, %eax
    000000db: 	jne	.Ltmp2035 # Offset: 219
    000000e1: 	movl	iterations(%rip), %r15d
.Ltmp2045:
    000000e8: 	addl	$0x1, %r14d
    000000ec: 	cmpl	%r15d, %r14d
    000000ef: 	jl	.Ltmp2036 # Offset: 239
.Ltmp2032:
    000000f5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000103: 	subq	$0x20, %rax
    00000107: 	cmpq	%rax, %rbx
    0000010a: 	je	.Ltmp2037 # Offset: 266
    00000110: 	leaq	0x10(%rbx), %rdi
    00000114: 	movq	0x8(%rbp), %r12
    00000118: 	movq	%rdi, (%rbx)
    0000011b: 	movq	(%rbp), %r13
    0000011f: 	movq	%r13, %rax
    00000122: 	addq	%r12, %rax
    00000125: 	je	.Ltmp2038 # Offset: 293
    00000127: 	testq	%r13, %r13
    0000012a: 	je	.Ltmp2039 # Offset: 298
.Ltmp2038:
    00000130: 	movq	%r12, 0x10(%rsp)
    00000135: 	cmpq	$0xf, %r12
    00000139: 	ja	.Ltmp2040 # Offset: 313
    0000013f: 	cmpq	$0x1, %r12
    00000143: 	jne	.Ltmp2041 # Offset: 323
    00000149: 	movzbl	(%r13), %eax
    0000014e: 	movb	%al, 0x10(%rbx)
.Ltmp2046:
    00000151: 	movq	%r12, 0x8(%rbx)
    00000155: 	movb	$0x0, (%rdi,%r12)
    0000015a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000161: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000168: 	addq	$0x20, %rax
    0000016c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000173: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017a: 	je	.Ltmp2042 # Offset: 378
.Ltmp2047:
    00000180: 	movq	-0x20(%rax), %rbp
    00000184: 	callq	clock@PLT # Offset: 388
    00000189: 	movq	%rax, end_time(%rip)
    00000190: 	movq	0x18(%rsp), %rdx
    00000195: 	subq	%fs:0x28, %rdx
    0000019e: 	jne	.Ltmp2043 # Offset: 414
    000001a4: 	subq	start_time(%rip), %rax
    000001ab: 	pxor	%xmm0, %xmm0
    000001af: 	movq	%rbp, %rdi
    000001b2: 	cvtsi2sd	%rax, %xmm0
    000001b7: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001bf: 	addq	$0x28, %rsp
    000001c3: 	popq	%rbx
    000001c4: 	popq	%rbp
    000001c5: 	popq	%r12
    000001c7: 	popq	%r13
    000001c9: 	popq	%r14
    000001cb: 	popq	%r15
    000001cd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2035:
    000001d8: 	movl	%edx, %edi
.Ltmp2034:
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	pxor	%xmm3, %xmm3
    000001e2: 	pxor	%xmm1, %xmm1
    000001e6: 	cltd
    000001e7: 	idivl	%edi
    000001e9: 	cvtsi2sd	%edi, %xmm1
    000001ed: 	movl	%eax, %ecx
    000001ef: 	movl	%esi, %eax
    000001f1: 	cltd
    000001f2: 	imull	%ecx, %ecx
    000001f5: 	idivl	%edi
    000001f7: 	imull	%eax, %eax
    000001fa: 	addl	%eax, %ecx
    000001fc: 	cvtsi2sd	%ecx, %xmm0
    00000200: 	ucomisd	%xmm0, %xmm3
    00000204: 	ja	.Ltmp2044 # Offset: 516
    0000020a: 	sqrtsd	%xmm0, %xmm0
.Ltmp2049:
    0000020e: 	mulsd	%xmm0, %xmm1
    00000212: 	cvttsd2si	%xmm1, %eax
    00000216: 	testl	%eax, %eax
    00000218: 	jle	.Ltmp2045 # Offset: 536
    0000021e: 	movl	current_test(%rip), %edx
    00000224: 	movq	%r12, %rsi
    00000227: 	movl	$0x1, %edi
    0000022c: 	xorl	%eax, %eax
    0000022e: 	callq	__printf_chk@PLT # Offset: 558
    00000233: 	movl	iterations(%rip), %r15d
    0000023a: 	movdqa	DATAat0x2b8b0(%rip), %xmm2
    00000242: 	jmp	.Ltmp2045 # Offset: 578
.Ltmp2040:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp2048:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%r13, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp2046 # Offset: 632
.Ltmp2037:
    0000027d: 	movq	%rbp, %rsi
    00000280: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000287: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	jne	.Ltmp2047 # Offset: 673
.Ltmp2042:
    000002a7: 	movq	-0x8(%rdx), %rax
    000002ab: 	addq	$0x200, %rax
    000002b1: 	jmp	.Ltmp2047 # Offset: 689
.Ltmp2041:
    000002b6: 	testq	%r12, %r12
    000002b9: 	je	.Ltmp2046 # Offset: 697
    000002bf: 	jmp	.Ltmp2048 # Offset: 703
.Ltmp2043:
    000002c1: 	callq	__stack_chk_fail@PLT # Offset: 705
.Ltmp2039:
    000002c6: 	leaq	DATAat0x2b008(%rip), %rdi
    000002cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2044:
    000002d8: 	movsd	%xmm1, 0x8(%rsp)
    000002de: 	callq	sqrt@PLT # Offset: 734
    000002e3: 	movdqa	DATAat0x2b8b0(%rip), %xmm2
    000002eb: 	movsd	0x8(%rsp), %xmm1
    000002f1: 	jmp	.Ltmp2049 # Offset: 753
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z13test_constantISt7complexIlE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x1dd40
  Size        : 0x324
  MaxSize     : 0x330
  Offset      : 0x1dd40
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp2050 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	movdqa	DATAat0x2b8c0(%rip), %xmm2
    00000051: 	xorl	%r14d, %r14d
    00000054: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%rbx,%rax), %r13
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp2055:
    00000068: 	movq	%rbx, %rax
    0000006b: 	pxor	%xmm1, %xmm1
    0000006f: 	testl	%r15d, %r15d
    00000072: 	jle	.Ltmp2051 # Offset: 114
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2052:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	paddq	%xmm0, %xmm1
    00000090: 	cmpq	%rax, %r13
    00000093: 	jne	.Ltmp2052 # Offset: 147
    00000095: 	movhlps	%xmm1, %xmm3
    00000098: 	movq	%xmm1, %rax
    0000009d: 	movq	%xmm3, %rcx
    000000a2: 	addq	$0x1b580, %rcx
    000000a9: 	movq	%rcx, %r8
    000000ac: 	negq	%r8
    000000af: 	cmovsq	%rcx, %r8
.Ltmp2065:
    000000b3: 	cvttsd2si	init_value(%rip), %rdx
    000000bc: 	subq	$0xa, %rdx
    000000c0: 	imulq	$0x1f40, %rdx, %rdx
    000000c7: 	subq	%rdx, %rax
    000000ca: 	movq	%rax, %rdx
    000000cd: 	negq	%rdx
    000000d0: 	cmovsq	%rax, %rdx
    000000d4: 	cmpq	%r8, %rdx
    000000d7: 	jl	.Ltmp2053 # Offset: 215
    000000dd: 	testq	%rax, %rax
    000000e0: 	jne	.Ltmp2054 # Offset: 224
    000000e6: 	movl	iterations(%rip), %edi
.Ltmp2064:
    000000ec: 	addl	$0x1, %r14d
    000000f0: 	cmpl	%edi, %r14d
    000000f3: 	jl	.Ltmp2055 # Offset: 243
.Ltmp2050:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp2056 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp2057 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp2058 # Offset: 302
.Ltmp2057:
    00000134: 	movq	%r12, 0x10(%rsp)
    00000139: 	cmpq	$0xf, %r12
    0000013d: 	ja	.Ltmp2059 # Offset: 317
    00000143: 	cmpq	$0x1, %r12
    00000147: 	jne	.Ltmp2060 # Offset: 327
    0000014d: 	movzbl	(%r13), %eax
    00000152: 	movb	%al, 0x10(%rbx)
.Ltmp2066:
    00000155: 	movq	%r12, 0x8(%rbx)
    00000159: 	movb	$0x0, (%rdi,%r12)
    0000015e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000165: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016c: 	addq	$0x20, %rax
    00000170: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000177: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017e: 	je	.Ltmp2061 # Offset: 382
.Ltmp2067:
    00000184: 	movq	-0x20(%rax), %rbp
    00000188: 	callq	clock@PLT # Offset: 392
    0000018d: 	movq	%rax, end_time(%rip)
    00000194: 	movq	0x18(%rsp), %rdx
    00000199: 	subq	%fs:0x28, %rdx
    000001a2: 	jne	.Ltmp2062 # Offset: 418
    000001a8: 	subq	start_time(%rip), %rax
    000001af: 	pxor	%xmm0, %xmm0
    000001b3: 	movq	%rbp, %rdi
    000001b6: 	cvtsi2sd	%rax, %xmm0
    000001bb: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c3: 	addq	$0x28, %rsp
    000001c7: 	popq	%rbx
    000001c8: 	popq	%rbp
    000001c9: 	popq	%r12
    000001cb: 	popq	%r13
    000001cd: 	popq	%r14
    000001cf: 	popq	%r15
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2054:
    000001e0: 	movq	%rdx, %r8
.Ltmp2053:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm4, %xmm4
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	cqto
    000001f1: 	idivq	%r8
    000001f4: 	cvtsi2sd	%r8, %xmm1
    000001f9: 	movq	%rax, %rsi
    000001fc: 	movq	%rcx, %rax
    000001ff: 	cqto
    00000201: 	imulq	%rsi, %rsi
    00000205: 	idivq	%r8
    00000208: 	imulq	%rax, %rax
    0000020c: 	addq	%rax, %rsi
    0000020f: 	cvtsi2sd	%rsi, %xmm0
    00000214: 	ucomisd	%xmm0, %xmm4
    00000218: 	ja	.Ltmp2063 # Offset: 536
    0000021e: 	sqrtsd	%xmm0, %xmm0
.Ltmp2069:
    00000222: 	mulsd	%xmm0, %xmm1
    00000226: 	cvttsd2si	%xmm1, %rax
    0000022b: 	testq	%rax, %rax
    0000022e: 	jle	.Ltmp2064 # Offset: 558
    00000234: 	movl	current_test(%rip), %edx
    0000023a: 	movl	$0x1, %edi
    0000023f: 	movq	%r12, %rsi
    00000242: 	xorl	%eax, %eax
    00000244: 	callq	__printf_chk@PLT # Offset: 580
    00000249: 	movl	iterations(%rip), %edi
    0000024f: 	movdqa	DATAat0x2b8c0(%rip), %xmm2
    00000257: 	jmp	.Ltmp2064 # Offset: 599
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp2051:
    00000260: 	movl	$0x1b580, %r8d
    00000266: 	movl	$0x1b580, %ecx
    0000026b: 	xorl	%eax, %eax
    0000026d: 	jmp	.Ltmp2065 # Offset: 621
.Ltmp2059:
    00000272: 	movq	%rbx, %rdi
    00000275: 	leaq	0x10(%rsp), %rsi
    0000027a: 	xorl	%edx, %edx
    0000027c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 636
    00000281: 	movq	%rax, (%rbx)
    00000284: 	movq	%rax, %rdi
    00000287: 	movq	0x10(%rsp), %rax
    0000028c: 	movq	%rax, 0x10(%rbx)
.Ltmp2068:
    00000290: 	movq	%r12, %rdx
    00000293: 	movq	%r13, %rsi
    00000296: 	callq	memcpy@PLT # Offset: 662
    0000029b: 	movq	0x10(%rsp), %r12
    000002a0: 	movq	(%rbx), %rdi
    000002a3: 	jmp	.Ltmp2066 # Offset: 675
.Ltmp2056:
    000002a8: 	movq	%rbp, %rsi
    000002ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 690
    000002b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002be: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002cc: 	jne	.Ltmp2067 # Offset: 716
.Ltmp2061:
    000002d2: 	movq	-0x8(%rdx), %rax
    000002d6: 	addq	$0x200, %rax
    000002dc: 	jmp	.Ltmp2067 # Offset: 732
.Ltmp2060:
    000002e1: 	testq	%r12, %r12
    000002e4: 	je	.Ltmp2066 # Offset: 740
    000002ea: 	jmp	.Ltmp2068 # Offset: 746
.Ltmp2062:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
.Ltmp2058:
    000002f1: 	leaq	DATAat0x2b008(%rip), %rdi
    000002f8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 760
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp2063:
    00000300: 	movl	%edi, 0xc(%rsp)
    00000304: 	movsd	%xmm1, (%rsp)
    00000309: 	callq	sqrt@PLT # Offset: 777
    0000030e: 	movl	0xc(%rsp), %edi
    00000312: 	movsd	(%rsp), %xmm1
    00000317: 	movdqa	DATAat0x2b8c0(%rip), %xmm2
    0000031f: 	jmp	.Ltmp2069 # Offset: 799
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x1e070
  Size        : 0x324
  MaxSize     : 0x330
  Offset      : 0x1e070
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp2070 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	movdqa	DATAat0x2b8d0(%rip), %xmm2
    00000051: 	xorl	%r14d, %r14d
    00000054: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%rbx,%rax), %r13
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp2075:
    00000068: 	movq	%rbx, %rax
    0000006b: 	pxor	%xmm1, %xmm1
    0000006f: 	testl	%r15d, %r15d
    00000072: 	jle	.Ltmp2071 # Offset: 114
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2072:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	paddq	%xmm2, %xmm0
    0000008c: 	paddq	%xmm0, %xmm1
    00000090: 	cmpq	%rax, %r13
    00000093: 	jne	.Ltmp2072 # Offset: 147
    00000095: 	movhlps	%xmm1, %xmm3
    00000098: 	movq	%xmm1, %rax
    0000009d: 	movq	%xmm3, %rcx
    000000a2: 	addq	$0x15f900, %rcx
    000000a9: 	movq	%rcx, %r8
    000000ac: 	negq	%r8
    000000af: 	cmovsq	%rcx, %r8
.Ltmp2085:
    000000b3: 	cvttsd2si	init_value(%rip), %rdx
    000000bc: 	subq	$0xb9, %rdx
    000000c3: 	imulq	$0x1f40, %rdx, %rdx
    000000ca: 	subq	%rdx, %rax
    000000cd: 	movq	%rax, %rdx
    000000d0: 	negq	%rdx
    000000d3: 	cmovsq	%rax, %rdx
    000000d7: 	cmpq	%r8, %rdx
    000000da: 	jl	.Ltmp2073 # Offset: 218
    000000e0: 	testq	%rax, %rax
    000000e3: 	jne	.Ltmp2074 # Offset: 227
    000000e9: 	movl	iterations(%rip), %edi
.Ltmp2084:
    000000ef: 	addl	$0x1, %r14d
    000000f3: 	cmpl	%edi, %r14d
    000000f6: 	jl	.Ltmp2075 # Offset: 246
.Ltmp2070:
    000000fc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000103: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010a: 	subq	$0x20, %rax
    0000010e: 	cmpq	%rax, %rbx
    00000111: 	je	.Ltmp2076 # Offset: 273
    00000117: 	leaq	0x10(%rbx), %rdi
    0000011b: 	movq	0x8(%rbp), %r12
    0000011f: 	movq	%rdi, (%rbx)
    00000122: 	movq	(%rbp), %r13
    00000126: 	movq	%r13, %rax
    00000129: 	addq	%r12, %rax
    0000012c: 	je	.Ltmp2077 # Offset: 300
    0000012e: 	testq	%r13, %r13
    00000131: 	je	.Ltmp2078 # Offset: 305
.Ltmp2077:
    00000137: 	movq	%r12, 0x10(%rsp)
    0000013c: 	cmpq	$0xf, %r12
    00000140: 	ja	.Ltmp2079 # Offset: 320
    00000146: 	cmpq	$0x1, %r12
    0000014a: 	jne	.Ltmp2080 # Offset: 330
    00000150: 	movzbl	(%r13), %eax
    00000155: 	movb	%al, 0x10(%rbx)
.Ltmp2086:
    00000158: 	movq	%r12, 0x8(%rbx)
    0000015c: 	movb	$0x0, (%rdi,%r12)
    00000161: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000168: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016f: 	addq	$0x20, %rax
    00000173: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000181: 	je	.Ltmp2081 # Offset: 385
.Ltmp2087:
    00000187: 	movq	-0x20(%rax), %rbp
    0000018b: 	callq	clock@PLT # Offset: 395
    00000190: 	movq	%rax, end_time(%rip)
    00000197: 	movq	0x18(%rsp), %rdx
    0000019c: 	subq	%fs:0x28, %rdx
    000001a5: 	jne	.Ltmp2082 # Offset: 421
    000001ab: 	subq	start_time(%rip), %rax
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	%rbp, %rdi
    000001b9: 	cvtsi2sd	%rax, %xmm0
    000001be: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c6: 	addq	$0x28, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	popq	%r14
    000001d2: 	popq	%r15
    000001d4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp2074:
    000001e0: 	movq	%rdx, %r8
.Ltmp2073:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm4, %xmm4
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	cqto
    000001f1: 	idivq	%r8
    000001f4: 	cvtsi2sd	%r8, %xmm1
    000001f9: 	movq	%rax, %rsi
    000001fc: 	movq	%rcx, %rax
    000001ff: 	cqto
    00000201: 	imulq	%rsi, %rsi
    00000205: 	idivq	%r8
    00000208: 	imulq	%rax, %rax
    0000020c: 	addq	%rax, %rsi
    0000020f: 	cvtsi2sd	%rsi, %xmm0
    00000214: 	ucomisd	%xmm0, %xmm4
    00000218: 	ja	.Ltmp2083 # Offset: 536
    0000021e: 	sqrtsd	%xmm0, %xmm0
.Ltmp2089:
    00000222: 	mulsd	%xmm0, %xmm1
    00000226: 	cvttsd2si	%xmm1, %rax
    0000022b: 	testq	%rax, %rax
    0000022e: 	jle	.Ltmp2084 # Offset: 558
    00000234: 	movl	current_test(%rip), %edx
    0000023a: 	movl	$0x1, %edi
    0000023f: 	movq	%r12, %rsi
    00000242: 	xorl	%eax, %eax
    00000244: 	callq	__printf_chk@PLT # Offset: 580
    00000249: 	movl	iterations(%rip), %edi
    0000024f: 	movdqa	DATAat0x2b8d0(%rip), %xmm2
    00000257: 	jmp	.Ltmp2084 # Offset: 599
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp2071:
    00000260: 	movl	$0x15f900, %r8d
    00000266: 	movl	$0x15f900, %ecx
    0000026b: 	xorl	%eax, %eax
    0000026d: 	jmp	.Ltmp2085 # Offset: 621
.Ltmp2079:
    00000272: 	movq	%rbx, %rdi
    00000275: 	leaq	0x10(%rsp), %rsi
    0000027a: 	xorl	%edx, %edx
    0000027c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 636
    00000281: 	movq	%rax, (%rbx)
    00000284: 	movq	%rax, %rdi
    00000287: 	movq	0x10(%rsp), %rax
    0000028c: 	movq	%rax, 0x10(%rbx)
.Ltmp2088:
    00000290: 	movq	%r12, %rdx
    00000293: 	movq	%r13, %rsi
    00000296: 	callq	memcpy@PLT # Offset: 662
    0000029b: 	movq	0x10(%rsp), %r12
    000002a0: 	movq	(%rbx), %rdi
    000002a3: 	jmp	.Ltmp2086 # Offset: 675
.Ltmp2076:
    000002a8: 	movq	%rbp, %rsi
    000002ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 690
    000002b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002be: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002cc: 	jne	.Ltmp2087 # Offset: 716
.Ltmp2081:
    000002d2: 	movq	-0x8(%rdx), %rax
    000002d6: 	addq	$0x200, %rax
    000002dc: 	jmp	.Ltmp2087 # Offset: 732
.Ltmp2080:
    000002e1: 	testq	%r12, %r12
    000002e4: 	je	.Ltmp2086 # Offset: 740
    000002ea: 	jmp	.Ltmp2088 # Offset: 746
.Ltmp2082:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
.Ltmp2078:
    000002f1: 	leaq	DATAat0x2b008(%rip), %rdi
    000002f8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 760
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp2083:
    00000300: 	movl	%edi, 0xc(%rsp)
    00000304: 	movsd	%xmm1, (%rsp)
    00000309: 	callq	sqrt@PLT # Offset: 777
    0000030e: 	movl	0xc(%rsp), %edi
    00000312: 	movsd	(%rsp), %xmm1
    00000317: 	movdqa	DATAat0x2b8d0(%rip), %xmm2
    0000031f: 	jmp	.Ltmp2089 # Offset: 799
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z13test_constantISt7complexIiE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z13test_constantISt7complexIiE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 109
  State       : disassembled
  Address     : 0x1e3a0
  Size        : 0x38a
  MaxSize     : 0x390
  Offset      : 0x1e3a0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x18(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %r15d
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	testl	%r15d, %r15d
    0000003a: 	jle	.Ltmp2090 # Offset: 58
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	0xfa00(%rbx), %r13
    0000004a: 	pxor	%xmm6, %xmm6
    0000004e: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2094:
    00000058: 	pxor	%xmm7, %xmm7
    0000005c: 	movq	%rbx, %rax
    0000005f: 	movdqa	%xmm7, %xmm5
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2091:
    00000068: 	movdqu	(%rax), %xmm1
    0000006c: 	movdqu	0x10(%rax), %xmm4
    00000071: 	addq	$0x20, %rax
    00000075: 	movdqa	%xmm1, %xmm0
    00000079: 	shufps	$0xdd, %xmm4, %xmm1
    0000007d: 	shufps	$0x88, %xmm4, %xmm0
    00000081: 	movdqa	%xmm0, %xmm4
    00000085: 	pslld	$0x1, %xmm4
    0000008a: 	paddd	%xmm0, %xmm4
    0000008e: 	movdqa	%xmm4, %xmm3
    00000092: 	pslld	$0x3, %xmm3
    00000097: 	psubd	%xmm0, %xmm3
    0000009b: 	pslld	$0x3, %xmm3
    000000a0: 	paddd	%xmm0, %xmm3
    000000a4: 	movdqa	%xmm1, %xmm0
    000000a8: 	pslld	$0x1, %xmm0
    000000ad: 	paddd	%xmm1, %xmm0
    000000b1: 	movdqa	%xmm0, %xmm2
    000000b5: 	pslld	$0x4, %xmm2
    000000ba: 	psubd	%xmm0, %xmm2
    000000be: 	pslld	$0x3, %xmm0
    000000c3: 	psubd	%xmm1, %xmm0
    000000c7: 	pslld	$0x2, %xmm2
    000000cc: 	pslld	$0x3, %xmm0
    000000d1: 	psubd	%xmm3, %xmm2
    000000d5: 	paddd	%xmm1, %xmm0
    000000d9: 	movdqa	%xmm4, %xmm1
    000000dd: 	paddd	%xmm2, %xmm5
    000000e1: 	pslld	$0x4, %xmm1
    000000e6: 	movdqa	%xmm6, %xmm2
    000000ea: 	psubd	%xmm4, %xmm1
    000000ee: 	pslld	$0x2, %xmm1
    000000f3: 	psubd	%xmm1, %xmm2
    000000f7: 	psubd	%xmm0, %xmm2
    000000fb: 	paddd	%xmm2, %xmm7
    000000ff: 	cmpq	%rax, %r13
    00000102: 	jne	.Ltmp2091 # Offset: 258
    00000108: 	movdqa	%xmm7, %xmm0
    0000010c: 	cvttsd2si	init_value(%rip), %ecx
    00000114: 	psrldq	$0x8, %xmm0
    00000119: 	paddd	%xmm0, %xmm7
    0000011d: 	movdqa	%xmm5, %xmm0
    00000121: 	psrldq	$0x8, %xmm0
    00000126: 	imull	$0xffe96ac0, %ecx, %edx
    0000012c: 	paddd	%xmm0, %xmm5
    00000130: 	movdqa	%xmm5, %xmm0
    00000134: 	imull	$0xffea0700, %ecx, %ecx
    0000013a: 	psrldq	$0x4, %xmm0
    0000013f: 	paddd	%xmm0, %xmm5
    00000143: 	movdqa	%xmm7, %xmm0
    00000147: 	psrldq	$0x4, %xmm0
    0000014c: 	movd	%xmm5, %eax
    00000150: 	paddd	%xmm0, %xmm7
    00000154: 	subl	%edx, %eax
    00000156: 	movd	%xmm7, %esi
    0000015a: 	movl	%eax, %edx
    0000015c: 	subl	%ecx, %esi
    0000015e: 	movl	%esi, %edi
    00000160: 	negl	%edi
    00000162: 	cmovsl	%esi, %edi
    00000165: 	negl	%edx
    00000167: 	cmovsl	%eax, %edx
    0000016a: 	cmpl	%edx, %edi
    0000016c: 	jg	.Ltmp2092 # Offset: 364
    00000172: 	testl	%eax, %eax
    00000174: 	jne	.Ltmp2093 # Offset: 372
    0000017a: 	movl	iterations(%rip), %r15d
.Ltmp2103:
    00000181: 	addl	$0x1, %r14d
    00000185: 	cmpl	%r15d, %r14d
    00000188: 	jl	.Ltmp2094 # Offset: 392
.Ltmp2090:
    0000018e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019c: 	subq	$0x20, %rax
    000001a0: 	cmpq	%rax, %rbx
    000001a3: 	je	.Ltmp2095 # Offset: 419
    000001a9: 	leaq	0x10(%rbx), %rdi
    000001ad: 	movq	0x8(%rbp), %r12
    000001b1: 	movq	%rdi, (%rbx)
    000001b4: 	movq	(%rbp), %r13
    000001b8: 	movq	%r13, %rax
    000001bb: 	addq	%r12, %rax
    000001be: 	je	.Ltmp2096 # Offset: 446
    000001c0: 	testq	%r13, %r13
    000001c3: 	je	.Ltmp2097 # Offset: 451
.Ltmp2096:
    000001c9: 	movq	%r12, 0x10(%rsp)
    000001ce: 	cmpq	$0xf, %r12
    000001d2: 	ja	.Ltmp2098 # Offset: 466
    000001d8: 	cmpq	$0x1, %r12
    000001dc: 	jne	.Ltmp2099 # Offset: 476
    000001e2: 	movzbl	(%r13), %eax
    000001e7: 	movb	%al, 0x10(%rbx)
.Ltmp2104:
    000001ea: 	movq	%r12, 0x8(%rbx)
    000001ee: 	movb	$0x0, (%rdi,%r12)
    000001f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000201: 	addq	$0x20, %rax
    00000205: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000213: 	je	.Ltmp2100 # Offset: 531
.Ltmp2105:
    00000219: 	movq	-0x20(%rax), %rbp
    0000021d: 	callq	clock@PLT # Offset: 541
    00000222: 	movq	%rax, end_time(%rip)
    00000229: 	movq	0x18(%rsp), %rdx
    0000022e: 	subq	%fs:0x28, %rdx
    00000237: 	jne	.Ltmp2101 # Offset: 567
    0000023d: 	subq	start_time(%rip), %rax
    00000244: 	pxor	%xmm0, %xmm0
    00000248: 	movq	%rbp, %rdi
    0000024b: 	cvtsi2sd	%rax, %xmm0
    00000250: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000258: 	addq	$0x28, %rsp
    0000025c: 	popq	%rbx
    0000025d: 	popq	%rbp
    0000025e: 	popq	%r12
    00000260: 	popq	%r13
    00000262: 	popq	%r14
    00000264: 	popq	%r15
    00000266: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 614
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2093:
    00000270: 	movl	%edx, %edi
.Ltmp2092:
    00000272: 	pxor	%xmm0, %xmm0
    00000276: 	pxor	%xmm5, %xmm5
    0000027a: 	pxor	%xmm1, %xmm1
    0000027e: 	cltd
    0000027f: 	idivl	%edi
    00000281: 	cvtsi2sd	%edi, %xmm1
    00000285: 	movl	%eax, %ecx
    00000287: 	movl	%esi, %eax
    00000289: 	cltd
    0000028a: 	imull	%ecx, %ecx
    0000028d: 	idivl	%edi
    0000028f: 	imull	%eax, %eax
    00000292: 	addl	%eax, %ecx
    00000294: 	cvtsi2sd	%ecx, %xmm0
    00000298: 	ucomisd	%xmm0, %xmm5
    0000029c: 	ja	.Ltmp2102 # Offset: 668
    000002a2: 	sqrtsd	%xmm0, %xmm0
.Ltmp2107:
    000002a6: 	mulsd	%xmm1, %xmm0
    000002aa: 	cvttsd2si	%xmm0, %eax
    000002ae: 	testl	%eax, %eax
    000002b0: 	jle	.Ltmp2103 # Offset: 688
    000002b6: 	movl	current_test(%rip), %edx
    000002bc: 	movq	%r12, %rsi
    000002bf: 	movl	$0x1, %edi
    000002c4: 	xorl	%eax, %eax
    000002c6: 	callq	__printf_chk@PLT # Offset: 710
    000002cb: 	movl	iterations(%rip), %r15d
    000002d2: 	pxor	%xmm6, %xmm6
    000002d6: 	jmp	.Ltmp2103 # Offset: 726
.Ltmp2098:
    000002db: 	movq	%rbx, %rdi
    000002de: 	leaq	0x10(%rsp), %rsi
    000002e3: 	xorl	%edx, %edx
    000002e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 741
    000002ea: 	movq	%rax, (%rbx)
    000002ed: 	movq	%rax, %rdi
    000002f0: 	movq	0x10(%rsp), %rax
    000002f5: 	movq	%rax, 0x10(%rbx)
.Ltmp2106:
    000002f9: 	movq	%r12, %rdx
    000002fc: 	movq	%r13, %rsi
    000002ff: 	callq	memcpy@PLT # Offset: 767
    00000304: 	movq	0x10(%rsp), %r12
    00000309: 	movq	(%rbx), %rdi
    0000030c: 	jmp	.Ltmp2104 # Offset: 780
.Ltmp2095:
    00000311: 	movq	%rbp, %rsi
    00000314: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000031b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 795
    00000320: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000327: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000032e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000335: 	jne	.Ltmp2105 # Offset: 821
.Ltmp2100:
    0000033b: 	movq	-0x8(%rdx), %rax
    0000033f: 	addq	$0x200, %rax
    00000345: 	jmp	.Ltmp2105 # Offset: 837
.Ltmp2099:
    0000034a: 	testq	%r12, %r12
    0000034d: 	je	.Ltmp2104 # Offset: 845
    00000353: 	jmp	.Ltmp2106 # Offset: 851
.Ltmp2101:
    00000355: 	callq	__stack_chk_fail@PLT # Offset: 853
.Ltmp2097:
    0000035a: 	leaq	DATAat0x2b008(%rip), %rdi
    00000361: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 865
    00000366: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2102:
    00000370: 	movsd	%xmm1, 0x8(%rsp)
    00000376: 	callq	sqrt@PLT # Offset: 886
    0000037b: 	movsd	0x8(%rsp), %xmm1
    00000381: 	pxor	%xmm6, %xmm6
    00000385: 	jmp	.Ltmp2107 # Offset: 901
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z13test_constantISt7complexIiE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z13test_constantISt7complexIiE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z13test_constantISt7complexIiE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 110
  State       : disassembled
  Address     : 0x1e730
  Size        : 0x38a
  MaxSize     : 0x390
  Offset      : 0x1e730
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x18(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %r15d
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	testl	%r15d, %r15d
    0000003a: 	jle	.Ltmp2108 # Offset: 58
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	0xfa00(%rbx), %r13
    0000004a: 	pxor	%xmm6, %xmm6
    0000004e: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2112:
    00000058: 	pxor	%xmm7, %xmm7
    0000005c: 	movq	%rbx, %rax
    0000005f: 	movdqa	%xmm7, %xmm5
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2109:
    00000068: 	movdqu	(%rax), %xmm1
    0000006c: 	movdqu	0x10(%rax), %xmm4
    00000071: 	addq	$0x20, %rax
    00000075: 	movdqa	%xmm1, %xmm0
    00000079: 	shufps	$0xdd, %xmm4, %xmm1
    0000007d: 	shufps	$0x88, %xmm4, %xmm0
    00000081: 	movdqa	%xmm0, %xmm4
    00000085: 	pslld	$0x1, %xmm4
    0000008a: 	paddd	%xmm0, %xmm4
    0000008e: 	movdqa	%xmm4, %xmm3
    00000092: 	pslld	$0x3, %xmm3
    00000097: 	psubd	%xmm0, %xmm3
    0000009b: 	pslld	$0x3, %xmm3
    000000a0: 	paddd	%xmm0, %xmm3
    000000a4: 	movdqa	%xmm1, %xmm0
    000000a8: 	pslld	$0x1, %xmm0
    000000ad: 	paddd	%xmm1, %xmm0
    000000b1: 	movdqa	%xmm0, %xmm2
    000000b5: 	pslld	$0x4, %xmm2
    000000ba: 	psubd	%xmm0, %xmm2
    000000be: 	pslld	$0x3, %xmm0
    000000c3: 	psubd	%xmm1, %xmm0
    000000c7: 	pslld	$0x2, %xmm2
    000000cc: 	pslld	$0x3, %xmm0
    000000d1: 	psubd	%xmm3, %xmm2
    000000d5: 	paddd	%xmm1, %xmm0
    000000d9: 	movdqa	%xmm4, %xmm1
    000000dd: 	paddd	%xmm2, %xmm5
    000000e1: 	pslld	$0x4, %xmm1
    000000e6: 	movdqa	%xmm6, %xmm2
    000000ea: 	psubd	%xmm4, %xmm1
    000000ee: 	pslld	$0x2, %xmm1
    000000f3: 	psubd	%xmm1, %xmm2
    000000f7: 	psubd	%xmm0, %xmm2
    000000fb: 	paddd	%xmm2, %xmm7
    000000ff: 	cmpq	%rax, %r13
    00000102: 	jne	.Ltmp2109 # Offset: 258
    00000108: 	movdqa	%xmm7, %xmm0
    0000010c: 	cvttsd2si	init_value(%rip), %ecx
    00000114: 	psrldq	$0x8, %xmm0
    00000119: 	paddd	%xmm0, %xmm7
    0000011d: 	movdqa	%xmm5, %xmm0
    00000121: 	psrldq	$0x8, %xmm0
    00000126: 	imull	$0xffe96ac0, %ecx, %edx
    0000012c: 	paddd	%xmm0, %xmm5
    00000130: 	movdqa	%xmm5, %xmm0
    00000134: 	imull	$0xffea0700, %ecx, %ecx
    0000013a: 	psrldq	$0x4, %xmm0
    0000013f: 	paddd	%xmm0, %xmm5
    00000143: 	movdqa	%xmm7, %xmm0
    00000147: 	psrldq	$0x4, %xmm0
    0000014c: 	movd	%xmm5, %eax
    00000150: 	paddd	%xmm0, %xmm7
    00000154: 	subl	%edx, %eax
    00000156: 	movd	%xmm7, %esi
    0000015a: 	movl	%eax, %edx
    0000015c: 	subl	%ecx, %esi
    0000015e: 	movl	%esi, %edi
    00000160: 	negl	%edi
    00000162: 	cmovsl	%esi, %edi
    00000165: 	negl	%edx
    00000167: 	cmovsl	%eax, %edx
    0000016a: 	cmpl	%edx, %edi
    0000016c: 	jg	.Ltmp2110 # Offset: 364
    00000172: 	testl	%eax, %eax
    00000174: 	jne	.Ltmp2111 # Offset: 372
    0000017a: 	movl	iterations(%rip), %r15d
.Ltmp2121:
    00000181: 	addl	$0x1, %r14d
    00000185: 	cmpl	%r15d, %r14d
    00000188: 	jl	.Ltmp2112 # Offset: 392
.Ltmp2108:
    0000018e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019c: 	subq	$0x20, %rax
    000001a0: 	cmpq	%rax, %rbx
    000001a3: 	je	.Ltmp2113 # Offset: 419
    000001a9: 	leaq	0x10(%rbx), %rdi
    000001ad: 	movq	0x8(%rbp), %r12
    000001b1: 	movq	%rdi, (%rbx)
    000001b4: 	movq	(%rbp), %r13
    000001b8: 	movq	%r13, %rax
    000001bb: 	addq	%r12, %rax
    000001be: 	je	.Ltmp2114 # Offset: 446
    000001c0: 	testq	%r13, %r13
    000001c3: 	je	.Ltmp2115 # Offset: 451
.Ltmp2114:
    000001c9: 	movq	%r12, 0x10(%rsp)
    000001ce: 	cmpq	$0xf, %r12
    000001d2: 	ja	.Ltmp2116 # Offset: 466
    000001d8: 	cmpq	$0x1, %r12
    000001dc: 	jne	.Ltmp2117 # Offset: 476
    000001e2: 	movzbl	(%r13), %eax
    000001e7: 	movb	%al, 0x10(%rbx)
.Ltmp2122:
    000001ea: 	movq	%r12, 0x8(%rbx)
    000001ee: 	movb	$0x0, (%rdi,%r12)
    000001f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000201: 	addq	$0x20, %rax
    00000205: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000213: 	je	.Ltmp2118 # Offset: 531
.Ltmp2123:
    00000219: 	movq	-0x20(%rax), %rbp
    0000021d: 	callq	clock@PLT # Offset: 541
    00000222: 	movq	%rax, end_time(%rip)
    00000229: 	movq	0x18(%rsp), %rdx
    0000022e: 	subq	%fs:0x28, %rdx
    00000237: 	jne	.Ltmp2119 # Offset: 567
    0000023d: 	subq	start_time(%rip), %rax
    00000244: 	pxor	%xmm0, %xmm0
    00000248: 	movq	%rbp, %rdi
    0000024b: 	cvtsi2sd	%rax, %xmm0
    00000250: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000258: 	addq	$0x28, %rsp
    0000025c: 	popq	%rbx
    0000025d: 	popq	%rbp
    0000025e: 	popq	%r12
    00000260: 	popq	%r13
    00000262: 	popq	%r14
    00000264: 	popq	%r15
    00000266: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 614
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2111:
    00000270: 	movl	%edx, %edi
.Ltmp2110:
    00000272: 	pxor	%xmm0, %xmm0
    00000276: 	pxor	%xmm5, %xmm5
    0000027a: 	pxor	%xmm1, %xmm1
    0000027e: 	cltd
    0000027f: 	idivl	%edi
    00000281: 	cvtsi2sd	%edi, %xmm1
    00000285: 	movl	%eax, %ecx
    00000287: 	movl	%esi, %eax
    00000289: 	cltd
    0000028a: 	imull	%ecx, %ecx
    0000028d: 	idivl	%edi
    0000028f: 	imull	%eax, %eax
    00000292: 	addl	%eax, %ecx
    00000294: 	cvtsi2sd	%ecx, %xmm0
    00000298: 	ucomisd	%xmm0, %xmm5
    0000029c: 	ja	.Ltmp2120 # Offset: 668
    000002a2: 	sqrtsd	%xmm0, %xmm0
.Ltmp2125:
    000002a6: 	mulsd	%xmm1, %xmm0
    000002aa: 	cvttsd2si	%xmm0, %eax
    000002ae: 	testl	%eax, %eax
    000002b0: 	jle	.Ltmp2121 # Offset: 688
    000002b6: 	movl	current_test(%rip), %edx
    000002bc: 	movq	%r12, %rsi
    000002bf: 	movl	$0x1, %edi
    000002c4: 	xorl	%eax, %eax
    000002c6: 	callq	__printf_chk@PLT # Offset: 710
    000002cb: 	movl	iterations(%rip), %r15d
    000002d2: 	pxor	%xmm6, %xmm6
    000002d6: 	jmp	.Ltmp2121 # Offset: 726
.Ltmp2116:
    000002db: 	movq	%rbx, %rdi
    000002de: 	leaq	0x10(%rsp), %rsi
    000002e3: 	xorl	%edx, %edx
    000002e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 741
    000002ea: 	movq	%rax, (%rbx)
    000002ed: 	movq	%rax, %rdi
    000002f0: 	movq	0x10(%rsp), %rax
    000002f5: 	movq	%rax, 0x10(%rbx)
.Ltmp2124:
    000002f9: 	movq	%r12, %rdx
    000002fc: 	movq	%r13, %rsi
    000002ff: 	callq	memcpy@PLT # Offset: 767
    00000304: 	movq	0x10(%rsp), %r12
    00000309: 	movq	(%rbx), %rdi
    0000030c: 	jmp	.Ltmp2122 # Offset: 780
.Ltmp2113:
    00000311: 	movq	%rbp, %rsi
    00000314: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000031b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 795
    00000320: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000327: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000032e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000335: 	jne	.Ltmp2123 # Offset: 821
.Ltmp2118:
    0000033b: 	movq	-0x8(%rdx), %rax
    0000033f: 	addq	$0x200, %rax
    00000345: 	jmp	.Ltmp2123 # Offset: 837
.Ltmp2117:
    0000034a: 	testq	%r12, %r12
    0000034d: 	je	.Ltmp2122 # Offset: 845
    00000353: 	jmp	.Ltmp2124 # Offset: 851
.Ltmp2119:
    00000355: 	callq	__stack_chk_fail@PLT # Offset: 853
.Ltmp2115:
    0000035a: 	leaq	DATAat0x2b008(%rip), %rdi
    00000361: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 865
    00000366: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2120:
    00000370: 	movsd	%xmm1, 0x8(%rsp)
    00000376: 	callq	sqrt@PLT # Offset: 886
    0000037b: 	movsd	0x8(%rsp), %xmm1
    00000381: 	pxor	%xmm6, %xmm6
    00000385: 	jmp	.Ltmp2125 # Offset: 901
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z13test_constantISt7complexIlE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x1eac0
  Size        : 0x2fc
  MaxSize     : 0x300
  Offset      : 0x1eac0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp2126 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp2131:
    00000060: 	movq	%rbx, %rcx
    00000063: 	xorl	%r8d, %r8d
    00000066: 	xorl	%r9d, %r9d
    00000069: 	testl	%r15d, %r15d
    0000006c: 	jle	.Ltmp2127 # Offset: 108
    0000006e: 	nop # Size: 2
.Ltmp2128:
    00000070: 	movq	(%rcx), %rdx
    00000073: 	movq	0x8(%rcx), %rsi
    00000077: 	addq	$0x10, %rcx
    0000007b: 	imulq	$-0xb9, %rdx, %rax
    00000082: 	imulq	$-0xb4, %rsi, %r10
    00000089: 	imulq	$-0xb4, %rdx, %rdx
    00000090: 	imulq	$-0xb9, %rsi, %rsi
    00000097: 	subq	%r10, %rax
    0000009a: 	addq	%rax, %r8
    0000009d: 	addq	%rsi, %rdx
    000000a0: 	addq	%rdx, %r9
    000000a3: 	cmpq	%rcx, %r13
    000000a6: 	jne	.Ltmp2128 # Offset: 166
.Ltmp2127:
    000000a8: 	cvttsd2si	init_value(%rip), %rax
    000000b1: 	imulq	$-0x169540, %rax, %rdx
    000000b8: 	imulq	$-0x15f900, %rax, %rax
    000000bf: 	subq	%rdx, %r8
    000000c2: 	subq	%rax, %r9
    000000c5: 	movq	%r8, %rax
    000000c8: 	movq	%r9, %rcx
    000000cb: 	negq	%rcx
    000000ce: 	cmovsq	%r9, %rcx
    000000d2: 	negq	%rax
    000000d5: 	cmovsq	%r8, %rax
    000000d9: 	cmpq	%rax, %rcx
    000000dc: 	jg	.Ltmp2129 # Offset: 220
    000000e2: 	testq	%r8, %r8
    000000e5: 	jne	.Ltmp2130 # Offset: 229
.Ltmp2141:
    000000eb: 	movl	iterations(%rip), %edi
.Ltmp2140:
    000000f1: 	addl	$0x1, %r14d
    000000f5: 	cmpl	%edi, %r14d
    000000f8: 	jl	.Ltmp2131 # Offset: 248
.Ltmp2126:
    000000fe: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010c: 	subq	$0x20, %rax
    00000110: 	cmpq	%rax, %rbx
    00000113: 	je	.Ltmp2132 # Offset: 275
    00000119: 	leaq	0x10(%rbx), %rdi
    0000011d: 	movq	0x8(%rbp), %r12
    00000121: 	movq	%rdi, (%rbx)
    00000124: 	movq	(%rbp), %r13
    00000128: 	movq	%r13, %rax
    0000012b: 	addq	%r12, %rax
    0000012e: 	je	.Ltmp2133 # Offset: 302
    00000130: 	testq	%r13, %r13
    00000133: 	je	.Ltmp2134 # Offset: 307
.Ltmp2133:
    00000139: 	movq	%r12, 0x10(%rsp)
    0000013e: 	cmpq	$0xf, %r12
    00000142: 	ja	.Ltmp2135 # Offset: 322
    00000148: 	cmpq	$0x1, %r12
    0000014c: 	jne	.Ltmp2136 # Offset: 332
    00000152: 	movzbl	(%r13), %eax
    00000157: 	movb	%al, 0x10(%rbx)
.Ltmp2142:
    0000015a: 	movq	%r12, 0x8(%rbx)
    0000015e: 	movb	$0x0, (%rdi,%r12)
    00000163: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000171: 	addq	$0x20, %rax
    00000175: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000183: 	je	.Ltmp2137 # Offset: 387
.Ltmp2143:
    00000189: 	movq	-0x20(%rax), %rbp
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	movq	%rax, end_time(%rip)
    00000199: 	movq	0x18(%rsp), %rdx
    0000019e: 	subq	%fs:0x28, %rdx
    000001a7: 	jne	.Ltmp2138 # Offset: 423
    000001ad: 	subq	start_time(%rip), %rax
    000001b4: 	pxor	%xmm0, %xmm0
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	cvtsi2sd	%rax, %xmm0
    000001c0: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c8: 	addq	$0x28, %rsp
    000001cc: 	popq	%rbx
    000001cd: 	popq	%rbp
    000001ce: 	popq	%r12
    000001d0: 	popq	%r13
    000001d2: 	popq	%r14
    000001d4: 	popq	%r15
    000001d6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 470
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2130:
    000001e0: 	movq	%rax, %rcx
.Ltmp2129:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm2, %xmm2
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	movq	%r8, %rax
    000001f2: 	cqto
    000001f4: 	cvtsi2sd	%rcx, %xmm1
    000001f9: 	idivq	%rcx
    000001fc: 	movq	%rax, %r8
    000001ff: 	movq	%r9, %rax
    00000202: 	cqto
    00000204: 	imulq	%r8, %r8
    00000208: 	idivq	%rcx
    0000020b: 	movq	%rax, %r9
    0000020e: 	imulq	%rax, %r9
    00000212: 	addq	%r9, %r8
    00000215: 	cvtsi2sd	%r8, %xmm0
    0000021a: 	ucomisd	%xmm0, %xmm2
    0000021e: 	ja	.Ltmp2139 # Offset: 542
    00000224: 	sqrtsd	%xmm0, %xmm0
.Ltmp2145:
    00000228: 	mulsd	%xmm1, %xmm0
    0000022c: 	cvttsd2si	%xmm0, %rax
    00000231: 	testq	%rax, %rax
    00000234: 	jle	.Ltmp2140 # Offset: 564
    0000023a: 	movl	current_test(%rip), %edx
    00000240: 	movq	%r12, %rsi
    00000243: 	movl	$0x1, %edi
    00000248: 	xorl	%eax, %eax
    0000024a: 	callq	__printf_chk@PLT # Offset: 586
    0000024f: 	jmp	.Ltmp2141 # Offset: 591
.Ltmp2135:
    00000254: 	movq	%rbx, %rdi
    00000257: 	leaq	0x10(%rsp), %rsi
    0000025c: 	xorl	%edx, %edx
    0000025e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 606
    00000263: 	movq	%rax, (%rbx)
    00000266: 	movq	%rax, %rdi
    00000269: 	movq	0x10(%rsp), %rax
    0000026e: 	movq	%rax, 0x10(%rbx)
.Ltmp2144:
    00000272: 	movq	%r12, %rdx
    00000275: 	movq	%r13, %rsi
    00000278: 	callq	memcpy@PLT # Offset: 632
    0000027d: 	movq	0x10(%rsp), %r12
    00000282: 	movq	(%rbx), %rdi
    00000285: 	jmp	.Ltmp2142 # Offset: 645
.Ltmp2132:
    0000028a: 	movq	%rbp, %rsi
    0000028d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000294: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 660
    00000299: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ae: 	jne	.Ltmp2143 # Offset: 686
.Ltmp2137:
    000002b4: 	movq	-0x8(%rdx), %rax
    000002b8: 	addq	$0x200, %rax
    000002be: 	jmp	.Ltmp2143 # Offset: 702
.Ltmp2136:
    000002c3: 	testq	%r12, %r12
    000002c6: 	je	.Ltmp2142 # Offset: 710
    000002cc: 	jmp	.Ltmp2144 # Offset: 716
.Ltmp2138:
    000002ce: 	callq	__stack_chk_fail@PLT # Offset: 718
.Ltmp2134:
    000002d3: 	leaq	DATAat0x2b008(%rip), %rdi
    000002da: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 730
    000002df: 	nop # Size: 1
.Ltmp2139:
    000002e0: 	movl	%edi, 0xc(%rsp)
    000002e4: 	movsd	%xmm1, (%rsp)
    000002e9: 	callq	sqrt@PLT # Offset: 745
    000002ee: 	movl	0xc(%rsp), %edi
    000002f2: 	movsd	(%rsp), %xmm1
    000002f7: 	jmp	.Ltmp2145 # Offset: 759
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIlE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x1edc0
  Size        : 0x2fc
  MaxSize     : 0x300
  Offset      : 0x1edc0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp2146 # Offset: 63
    00000045: 	leal	-0x1(%r15), %eax
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000053: 	shlq	$0x4, %rax
    00000057: 	leaq	0x10(%rbx,%rax), %r13
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp2151:
    00000060: 	movq	%rbx, %rcx
    00000063: 	xorl	%r8d, %r8d
    00000066: 	xorl	%r9d, %r9d
    00000069: 	testl	%r15d, %r15d
    0000006c: 	jle	.Ltmp2147 # Offset: 108
    0000006e: 	nop # Size: 2
.Ltmp2148:
    00000070: 	movq	(%rcx), %rdx
    00000073: 	movq	0x8(%rcx), %rsi
    00000077: 	addq	$0x10, %rcx
    0000007b: 	imulq	$-0xb9, %rdx, %rax
    00000082: 	imulq	$-0xb4, %rsi, %r10
    00000089: 	imulq	$-0xb4, %rdx, %rdx
    00000090: 	imulq	$-0xb9, %rsi, %rsi
    00000097: 	subq	%r10, %rax
    0000009a: 	addq	%rax, %r8
    0000009d: 	addq	%rsi, %rdx
    000000a0: 	addq	%rdx, %r9
    000000a3: 	cmpq	%rcx, %r13
    000000a6: 	jne	.Ltmp2148 # Offset: 166
.Ltmp2147:
    000000a8: 	cvttsd2si	init_value(%rip), %rax
    000000b1: 	imulq	$-0x169540, %rax, %rdx
    000000b8: 	imulq	$-0x15f900, %rax, %rax
    000000bf: 	subq	%rdx, %r8
    000000c2: 	subq	%rax, %r9
    000000c5: 	movq	%r8, %rax
    000000c8: 	movq	%r9, %rcx
    000000cb: 	negq	%rcx
    000000ce: 	cmovsq	%r9, %rcx
    000000d2: 	negq	%rax
    000000d5: 	cmovsq	%r8, %rax
    000000d9: 	cmpq	%rax, %rcx
    000000dc: 	jg	.Ltmp2149 # Offset: 220
    000000e2: 	testq	%r8, %r8
    000000e5: 	jne	.Ltmp2150 # Offset: 229
.Ltmp2161:
    000000eb: 	movl	iterations(%rip), %edi
.Ltmp2160:
    000000f1: 	addl	$0x1, %r14d
    000000f5: 	cmpl	%edi, %r14d
    000000f8: 	jl	.Ltmp2151 # Offset: 248
.Ltmp2146:
    000000fe: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010c: 	subq	$0x20, %rax
    00000110: 	cmpq	%rax, %rbx
    00000113: 	je	.Ltmp2152 # Offset: 275
    00000119: 	leaq	0x10(%rbx), %rdi
    0000011d: 	movq	0x8(%rbp), %r12
    00000121: 	movq	%rdi, (%rbx)
    00000124: 	movq	(%rbp), %r13
    00000128: 	movq	%r13, %rax
    0000012b: 	addq	%r12, %rax
    0000012e: 	je	.Ltmp2153 # Offset: 302
    00000130: 	testq	%r13, %r13
    00000133: 	je	.Ltmp2154 # Offset: 307
.Ltmp2153:
    00000139: 	movq	%r12, 0x10(%rsp)
    0000013e: 	cmpq	$0xf, %r12
    00000142: 	ja	.Ltmp2155 # Offset: 322
    00000148: 	cmpq	$0x1, %r12
    0000014c: 	jne	.Ltmp2156 # Offset: 332
    00000152: 	movzbl	(%r13), %eax
    00000157: 	movb	%al, 0x10(%rbx)
.Ltmp2162:
    0000015a: 	movq	%r12, 0x8(%rbx)
    0000015e: 	movb	$0x0, (%rdi,%r12)
    00000163: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000171: 	addq	$0x20, %rax
    00000175: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000183: 	je	.Ltmp2157 # Offset: 387
.Ltmp2163:
    00000189: 	movq	-0x20(%rax), %rbp
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	movq	%rax, end_time(%rip)
    00000199: 	movq	0x18(%rsp), %rdx
    0000019e: 	subq	%fs:0x28, %rdx
    000001a7: 	jne	.Ltmp2158 # Offset: 423
    000001ad: 	subq	start_time(%rip), %rax
    000001b4: 	pxor	%xmm0, %xmm0
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	cvtsi2sd	%rax, %xmm0
    000001c0: 	divsd	DATAat0x2b628(%rip), %xmm0
    000001c8: 	addq	$0x28, %rsp
    000001cc: 	popq	%rbx
    000001cd: 	popq	%rbp
    000001ce: 	popq	%r12
    000001d0: 	popq	%r13
    000001d2: 	popq	%r14
    000001d4: 	popq	%r15
    000001d6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 470
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2150:
    000001e0: 	movq	%rax, %rcx
.Ltmp2149:
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm2, %xmm2
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	movq	%r8, %rax
    000001f2: 	cqto
    000001f4: 	cvtsi2sd	%rcx, %xmm1
    000001f9: 	idivq	%rcx
    000001fc: 	movq	%rax, %r8
    000001ff: 	movq	%r9, %rax
    00000202: 	cqto
    00000204: 	imulq	%r8, %r8
    00000208: 	idivq	%rcx
    0000020b: 	movq	%rax, %r9
    0000020e: 	imulq	%rax, %r9
    00000212: 	addq	%r9, %r8
    00000215: 	cvtsi2sd	%r8, %xmm0
    0000021a: 	ucomisd	%xmm0, %xmm2
    0000021e: 	ja	.Ltmp2159 # Offset: 542
    00000224: 	sqrtsd	%xmm0, %xmm0
.Ltmp2165:
    00000228: 	mulsd	%xmm1, %xmm0
    0000022c: 	cvttsd2si	%xmm0, %rax
    00000231: 	testq	%rax, %rax
    00000234: 	jle	.Ltmp2160 # Offset: 564
    0000023a: 	movl	current_test(%rip), %edx
    00000240: 	movq	%r12, %rsi
    00000243: 	movl	$0x1, %edi
    00000248: 	xorl	%eax, %eax
    0000024a: 	callq	__printf_chk@PLT # Offset: 586
    0000024f: 	jmp	.Ltmp2161 # Offset: 591
.Ltmp2155:
    00000254: 	movq	%rbx, %rdi
    00000257: 	leaq	0x10(%rsp), %rsi
    0000025c: 	xorl	%edx, %edx
    0000025e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 606
    00000263: 	movq	%rax, (%rbx)
    00000266: 	movq	%rax, %rdi
    00000269: 	movq	0x10(%rsp), %rax
    0000026e: 	movq	%rax, 0x10(%rbx)
.Ltmp2164:
    00000272: 	movq	%r12, %rdx
    00000275: 	movq	%r13, %rsi
    00000278: 	callq	memcpy@PLT # Offset: 632
    0000027d: 	movq	0x10(%rsp), %r12
    00000282: 	movq	(%rbx), %rdi
    00000285: 	jmp	.Ltmp2162 # Offset: 645
.Ltmp2152:
    0000028a: 	movq	%rbp, %rsi
    0000028d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000294: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 660
    00000299: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ae: 	jne	.Ltmp2163 # Offset: 686
.Ltmp2157:
    000002b4: 	movq	-0x8(%rdx), %rax
    000002b8: 	addq	$0x200, %rax
    000002be: 	jmp	.Ltmp2163 # Offset: 702
.Ltmp2156:
    000002c3: 	testq	%r12, %r12
    000002c6: 	je	.Ltmp2162 # Offset: 710
    000002cc: 	jmp	.Ltmp2164 # Offset: 716
.Ltmp2158:
    000002ce: 	callq	__stack_chk_fail@PLT # Offset: 718
.Ltmp2154:
    000002d3: 	leaq	DATAat0x2b008(%rip), %rdi
    000002da: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 730
    000002df: 	nop # Size: 1
.Ltmp2159:
    000002e0: 	movl	%edi, 0xc(%rsp)
    000002e4: 	movsd	%xmm1, (%rsp)
    000002e9: 	callq	sqrt@PLT # Offset: 745
    000002ee: 	movl	0xc(%rsp), %edi
    000002f2: 	movsd	(%rsp), %xmm1
    000002f7: 	jmp	.Ltmp2165 # Offset: 759
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_constantISt7complexIiE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z13test_constantISt7complexIiE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z13test_constantISt7complexIiE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 113
  State       : disassembled
  Address     : 0x1f0c0
  Size        : 0x48b
  MaxSize     : 0x490
  Offset      : 0x1f0c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIiE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x28(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %r15d
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	testl	%r15d, %r15d
    0000003a: 	jle	.Ltmp2166 # Offset: 58
    00000040: 	movdqa	DATAat0x2b8e0(%rip), %xmm2
    00000048: 	pxor	%xmm4, %xmm4
    0000004c: 	xorl	%r14d, %r14d
    0000004f: 	leaq	0xfa00(%rbx), %r13
    00000056: 	movdqa	%xmm4, %xmm5
    0000005a: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000061: 	pcmpgtd	%xmm2, %xmm5
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp2170:
    00000068: 	pxor	%xmm6, %xmm6
    0000006c: 	movq	%rbx, %rax
    0000006f: 	movdqa	%xmm6, %xmm3
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2167:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqu	0x10(%rax), %xmm7
    00000081: 	movdqa	%xmm5, %xmm9
    00000086: 	movdqa	%xmm5, %xmm10
    0000008b: 	addq	$0x20, %rax
    0000008f: 	movdqa	%xmm0, %xmm8
    00000094: 	shufps	$0xdd, %xmm7, %xmm0
    00000098: 	shufps	$0x88, %xmm7, %xmm8
    0000009d: 	movdqa	%xmm0, %xmm7
    000000a1: 	movdqa	%xmm8, %xmm1
    000000a6: 	pslld	$0x1, %xmm7
    000000ab: 	pslld	$0x1, %xmm1
    000000b0: 	paddd	%xmm7, %xmm0
    000000b4: 	paddd	%xmm1, %xmm0
    000000b8: 	paddd	%xmm8, %xmm1
    000000bd: 	movdqa	%xmm4, %xmm8
    000000c2: 	psubd	%xmm1, %xmm7
    000000c6: 	movdqa	%xmm0, %xmm1
    000000ca: 	punpckldq	%xmm0, %xmm1
    000000ce: 	pcmpgtd	%xmm1, %xmm8
    000000d3: 	pmuludq	%xmm1, %xmm9
    000000d8: 	pmuludq	%xmm2, %xmm1
    000000dc: 	pmuludq	%xmm2, %xmm8
    000000e1: 	paddq	%xmm9, %xmm8
    000000e6: 	movdqa	%xmm4, %xmm9
    000000eb: 	psllq	$0x20, %xmm8
    000000f1: 	paddq	%xmm8, %xmm1
    000000f6: 	movdqa	%xmm0, %xmm8
    000000fb: 	punpckhdq	%xmm0, %xmm8
    00000100: 	psrad	$0x1f, %xmm0
    00000105: 	pcmpgtd	%xmm8, %xmm9
    0000010a: 	pmuludq	%xmm8, %xmm10
    0000010f: 	pmuludq	%xmm2, %xmm8
    00000114: 	pmuludq	%xmm2, %xmm9
    00000119: 	paddq	%xmm10, %xmm9
    0000011e: 	psllq	$0x20, %xmm9
    00000124: 	paddq	%xmm9, %xmm8
    00000129: 	movdqa	%xmm5, %xmm9
    0000012e: 	shufps	$0xdd, %xmm8, %xmm1
    00000133: 	psrad	$0x2, %xmm1
    00000138: 	movdqa	%xmm5, %xmm8
    0000013d: 	psubd	%xmm0, %xmm1
    00000141: 	movdqa	%xmm7, %xmm0
    00000145: 	punpckldq	%xmm7, %xmm0
    00000149: 	paddd	%xmm1, %xmm3
    0000014d: 	movdqa	%xmm4, %xmm1
    00000151: 	pcmpgtd	%xmm0, %xmm1
    00000155: 	pmuludq	%xmm0, %xmm8
    0000015a: 	pmuludq	%xmm2, %xmm0
    0000015e: 	pmuludq	%xmm2, %xmm1
    00000162: 	paddq	%xmm8, %xmm1
    00000167: 	movdqa	%xmm4, %xmm8
    0000016c: 	psllq	$0x20, %xmm1
    00000171: 	paddq	%xmm1, %xmm0
    00000175: 	movdqa	%xmm7, %xmm1
    00000179: 	punpckhdq	%xmm7, %xmm1
    0000017d: 	psrad	$0x1f, %xmm7
    00000182: 	pcmpgtd	%xmm1, %xmm8
    00000187: 	pmuludq	%xmm1, %xmm9
    0000018c: 	pmuludq	%xmm2, %xmm1
    00000190: 	pmuludq	%xmm2, %xmm8
    00000195: 	paddq	%xmm9, %xmm8
    0000019a: 	psllq	$0x20, %xmm8
    000001a0: 	paddq	%xmm8, %xmm1
    000001a5: 	shufps	$0xdd, %xmm1, %xmm0
    000001a9: 	psrad	$0x2, %xmm0
    000001ae: 	psubd	%xmm7, %xmm0
    000001b2: 	paddd	%xmm0, %xmm6
    000001b6: 	cmpq	%rax, %r13
    000001b9: 	jne	.Ltmp2167 # Offset: 441
    000001bf: 	cvttsd2si	init_value(%rip), %esi
    000001c7: 	movdqa	%xmm6, %xmm0
    000001cb: 	psrldq	$0x8, %xmm0
    000001d0: 	paddd	%xmm0, %xmm6
    000001d4: 	movdqa	%xmm3, %xmm0
    000001d8: 	psrldq	$0x8, %xmm0
    000001dd: 	leal	(%rsi,%rsi), %ecx
    000001e0: 	paddd	%xmm0, %xmm3
    000001e4: 	movslq	%ecx, %rdx
    000001e7: 	movl	%ecx, %edi
    000001e9: 	movdqa	%xmm3, %xmm0
    000001ed: 	addl	%esi, %ecx
    000001ef: 	negl	%ecx
    000001f1: 	imulq	$0x4ec4ec4f, %rdx, %rdx
    000001f8: 	sarl	$0x1f, %edi
    000001fb: 	movslq	%ecx, %rsi
    000001fe: 	psrldq	$0x4, %xmm0
    00000203: 	sarl	$0x1f, %ecx
    00000206: 	imulq	$0x4ec4ec4f, %rsi, %rsi
    0000020d: 	paddd	%xmm0, %xmm3
    00000211: 	movdqa	%xmm6, %xmm0
    00000215: 	sarq	$0x22, %rdx
    00000219: 	psrldq	$0x4, %xmm0
    0000021e: 	movd	%xmm3, %eax
    00000222: 	subl	%edi, %edx
    00000224: 	paddd	%xmm0, %xmm6
    00000228: 	sarq	$0x22, %rsi
    0000022c: 	imull	$0x1f40, %edx, %edx
    00000232: 	subl	%ecx, %esi
    00000234: 	imull	$0x1f40, %esi, %ecx
    0000023a: 	movd	%xmm6, %esi
    0000023e: 	subl	%edx, %eax
    00000240: 	movl	%eax, %edx
    00000242: 	subl	%ecx, %esi
    00000244: 	movl	%esi, %edi
    00000246: 	negl	%edi
    00000248: 	cmovsl	%esi, %edi
    0000024b: 	negl	%edx
    0000024d: 	cmovsl	%eax, %edx
    00000250: 	cmpl	%edx, %edi
    00000252: 	jg	.Ltmp2168 # Offset: 594
    00000258: 	testl	%eax, %eax
    0000025a: 	jne	.Ltmp2169 # Offset: 602
    00000260: 	movl	iterations(%rip), %r15d
.Ltmp2179:
    00000267: 	addl	$0x1, %r14d
    0000026b: 	cmpl	%r15d, %r14d
    0000026e: 	jl	.Ltmp2170 # Offset: 622
.Ltmp2166:
    00000274: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000027b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000282: 	subq	$0x20, %rax
    00000286: 	cmpq	%rax, %rbx
    00000289: 	je	.Ltmp2171 # Offset: 649
    0000028f: 	leaq	0x10(%rbx), %rdi
    00000293: 	movq	0x8(%rbp), %r12
    00000297: 	movq	%rdi, (%rbx)
    0000029a: 	movq	(%rbp), %r13
    0000029e: 	movq	%r13, %rax
    000002a1: 	addq	%r12, %rax
    000002a4: 	je	.Ltmp2172 # Offset: 676
    000002a6: 	testq	%r13, %r13
    000002a9: 	je	.Ltmp2173 # Offset: 681
.Ltmp2172:
    000002af: 	movq	%r12, 0x20(%rsp)
    000002b4: 	cmpq	$0xf, %r12
    000002b8: 	ja	.Ltmp2174 # Offset: 696
    000002be: 	cmpq	$0x1, %r12
    000002c2: 	jne	.Ltmp2175 # Offset: 706
    000002c8: 	movzbl	(%r13), %eax
    000002cd: 	movb	%al, 0x10(%rbx)
.Ltmp2180:
    000002d0: 	movq	%r12, 0x8(%rbx)
    000002d4: 	movb	$0x0, (%rdi,%r12)
    000002d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e7: 	addq	$0x20, %rax
    000002eb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f9: 	je	.Ltmp2176 # Offset: 761
.Ltmp2181:
    000002ff: 	movq	-0x20(%rax), %rbp
    00000303: 	callq	clock@PLT # Offset: 771
    00000308: 	movq	%rax, end_time(%rip)
    0000030f: 	movq	0x28(%rsp), %rdx
    00000314: 	subq	%fs:0x28, %rdx
    0000031d: 	jne	.Ltmp2177 # Offset: 797
    00000323: 	subq	start_time(%rip), %rax
    0000032a: 	pxor	%xmm0, %xmm0
    0000032e: 	movq	%rbp, %rdi
    00000331: 	cvtsi2sd	%rax, %xmm0
    00000336: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000033e: 	addq	$0x38, %rsp
    00000342: 	popq	%rbx
    00000343: 	popq	%rbp
    00000344: 	popq	%r12
    00000346: 	popq	%r13
    00000348: 	popq	%r14
    0000034a: 	popq	%r15
    0000034c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 844
    00000351: 	nopl	(%rax) # Size: 7
.Ltmp2169:
    00000358: 	movl	%edx, %edi
.Ltmp2168:
    0000035a: 	pxor	%xmm0, %xmm0
    0000035e: 	pxor	%xmm3, %xmm3
    00000362: 	pxor	%xmm1, %xmm1
    00000366: 	cltd
    00000367: 	idivl	%edi
    00000369: 	cvtsi2sd	%edi, %xmm1
    0000036d: 	movl	%eax, %ecx
    0000036f: 	movl	%esi, %eax
    00000371: 	cltd
    00000372: 	imull	%ecx, %ecx
    00000375: 	idivl	%edi
    00000377: 	imull	%eax, %eax
    0000037a: 	addl	%eax, %ecx
    0000037c: 	cvtsi2sd	%ecx, %xmm0
    00000380: 	ucomisd	%xmm0, %xmm3
    00000384: 	ja	.Ltmp2178 # Offset: 900
    0000038a: 	sqrtsd	%xmm0, %xmm0
.Ltmp2183:
    0000038e: 	mulsd	%xmm0, %xmm1
    00000392: 	cvttsd2si	%xmm1, %eax
    00000396: 	testl	%eax, %eax
    00000398: 	jle	.Ltmp2179 # Offset: 920
    0000039e: 	movl	current_test(%rip), %edx
    000003a4: 	movq	%r12, %rsi
    000003a7: 	movl	$0x1, %edi
    000003ac: 	xorl	%eax, %eax
    000003ae: 	movaps	%xmm5, (%rsp)
    000003b2: 	callq	__printf_chk@PLT # Offset: 946
    000003b7: 	movl	iterations(%rip), %r15d
    000003be: 	movdqa	(%rsp), %xmm5
    000003c3: 	pxor	%xmm4, %xmm4
    000003c7: 	movdqa	DATAat0x2b8e0(%rip), %xmm2
    000003cf: 	jmp	.Ltmp2179 # Offset: 975
.Ltmp2174:
    000003d4: 	movq	%rbx, %rdi
    000003d7: 	leaq	0x20(%rsp), %rsi
    000003dc: 	xorl	%edx, %edx
    000003de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 990
    000003e3: 	movq	%rax, (%rbx)
    000003e6: 	movq	%rax, %rdi
    000003e9: 	movq	0x20(%rsp), %rax
    000003ee: 	movq	%rax, 0x10(%rbx)
.Ltmp2182:
    000003f2: 	movq	%r12, %rdx
    000003f5: 	movq	%r13, %rsi
    000003f8: 	callq	memcpy@PLT # Offset: 1016
    000003fd: 	movq	0x20(%rsp), %r12
    00000402: 	movq	(%rbx), %rdi
    00000405: 	jmp	.Ltmp2180 # Offset: 1029
.Ltmp2171:
    0000040a: 	movq	%rbp, %rsi
    0000040d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000414: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1044
    00000419: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000420: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000427: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000042e: 	jne	.Ltmp2181 # Offset: 1070
.Ltmp2176:
    00000434: 	movq	-0x8(%rdx), %rax
    00000438: 	addq	$0x200, %rax
    0000043e: 	jmp	.Ltmp2181 # Offset: 1086
.Ltmp2175:
    00000443: 	testq	%r12, %r12
    00000446: 	je	.Ltmp2180 # Offset: 1094
    0000044c: 	jmp	.Ltmp2182 # Offset: 1100
.Ltmp2177:
    0000044e: 	callq	__stack_chk_fail@PLT # Offset: 1102
.Ltmp2173:
    00000453: 	leaq	DATAat0x2b008(%rip), %rdi
    0000045a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1114
    0000045f: 	nop # Size: 1
.Ltmp2178:
    00000460: 	movaps	%xmm5, 0x10(%rsp)
    00000465: 	movsd	%xmm1, (%rsp)
    0000046a: 	callq	sqrt@PLT # Offset: 1130
    0000046f: 	movdqa	0x10(%rsp), %xmm5
    00000475: 	movsd	(%rsp), %xmm1
    0000047a: 	pxor	%xmm4, %xmm4
    0000047e: 	movdqa	DATAat0x2b8e0(%rip), %xmm2
    00000486: 	jmp	.Ltmp2183 # Offset: 1158
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIiE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z13test_constantISt7complexIlE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x1f550
  Size        : 0x356
  MaxSize     : 0x360
  Offset      : 0x1f550
  Section     : .text
  Orc Section : .local.text._Z13test_constantISt7complexIlE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, (%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x18(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %r15d
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	testl	%r15d, %r15d
    00000042: 	jle	.Ltmp2184 # Offset: 66
    00000048: 	leal	-0x1(%r14), %eax
    0000004c: 	xorl	%r13d, %r13d
    0000004f: 	movabsq	$0x4ec4ec4ec4ec4ec5, %rbp
    00000059: 	shlq	$0x4, %rax
    0000005d: 	leaq	0x10(%rbx,%rax), %r12
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2189:
    00000068: 	movq	%rbx, %rdi
    0000006b: 	xorl	%r8d, %r8d
    0000006e: 	xorl	%r9d, %r9d
    00000071: 	testl	%r14d, %r14d
    00000074: 	jle	.Ltmp2185 # Offset: 116
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2186:
    00000080: 	movq	0x8(%rdi), %rcx
    00000084: 	movq	(%rdi), %r11
    00000087: 	addq	$0x10, %rdi
    0000008b: 	leaq	(%rcx,%rcx), %rsi
    0000008f: 	leaq	(%r11,%r11), %r10
    00000093: 	addq	%rsi, %rcx
    00000096: 	addq	%r10, %rcx
    00000099: 	addq	%r11, %r10
    0000009c: 	movq	%rcx, %rax
    0000009f: 	subq	%r10, %rsi
    000000a2: 	sarq	$0x3f, %rcx
    000000a6: 	imulq	%rbp
    000000a9: 	movq	%rsi, %rax
    000000ac: 	sarq	$0x3f, %rsi
    000000b0: 	sarq	$0x2, %rdx
    000000b4: 	subq	%rcx, %rdx
    000000b7: 	addq	%rdx, %r8
    000000ba: 	imulq	%rbp
    000000bd: 	sarq	$0x2, %rdx
    000000c1: 	subq	%rsi, %rdx
    000000c4: 	addq	%rdx, %r9
    000000c7: 	cmpq	%rdi, %r12
    000000ca: 	jne	.Ltmp2186 # Offset: 202
.Ltmp2185:
    000000cc: 	cvttsd2si	init_value(%rip), %rsi
    000000d5: 	leaq	(%rsi,%rsi), %rcx
    000000d9: 	movq	%rcx, %rax
    000000dc: 	imulq	%rbp
    000000df: 	movq	%rcx, %rax
    000000e2: 	addq	%rsi, %rcx
    000000e5: 	sarq	$0x3f, %rax
    000000e9: 	negq	%rcx
    000000ec: 	sarq	$0x2, %rdx
    000000f0: 	subq	%rax, %rdx
    000000f3: 	movq	%rcx, %rax
    000000f6: 	sarq	$0x3f, %rcx
    000000fa: 	imulq	$0x1f40, %rdx, %rdx
    00000101: 	subq	%rdx, %r8
    00000104: 	imulq	%rbp
    00000107: 	movq	%r8, %rax
    0000010a: 	sarq	$0x2, %rdx
    0000010e: 	subq	%rcx, %rdx
    00000111: 	imulq	$0x1f40, %rdx, %rdx
    00000118: 	subq	%rdx, %r9
    0000011b: 	movq	%r9, %rcx
    0000011e: 	negq	%rcx
    00000121: 	cmovsq	%r9, %rcx
    00000125: 	negq	%rax
    00000128: 	cmovsq	%r8, %rax
    0000012c: 	cmpq	%rax, %rcx
    0000012f: 	jg	.Ltmp2187 # Offset: 303
    00000135: 	testq	%r8, %r8
    00000138: 	jne	.Ltmp2188 # Offset: 312
.Ltmp2199:
    0000013e: 	movl	iterations(%rip), %r15d
.Ltmp2198:
    00000145: 	addl	$0x1, %r13d
    00000149: 	cmpl	%r15d, %r13d
    0000014c: 	jl	.Ltmp2189 # Offset: 332
.Ltmp2184:
    00000152: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000159: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000160: 	subq	$0x20, %rax
    00000164: 	cmpq	%rax, %rbx
    00000167: 	je	.Ltmp2190 # Offset: 359
    0000016d: 	movq	(%rsp), %rax
    00000171: 	leaq	0x10(%rbx), %rdi
    00000175: 	movq	%rdi, (%rbx)
    00000178: 	movq	(%rax), %rbp
    0000017b: 	movq	0x8(%rax), %r12
    0000017f: 	movq	%rbp, %rax
    00000182: 	addq	%r12, %rax
    00000185: 	je	.Ltmp2191 # Offset: 389
    00000187: 	testq	%rbp, %rbp
    0000018a: 	je	.Ltmp2192 # Offset: 394
.Ltmp2191:
    00000190: 	movq	%r12, 0x10(%rsp)
    00000195: 	cmpq	$0xf, %r12
    00000199: 	ja	.Ltmp2193 # Offset: 409
    0000019f: 	cmpq	$0x1, %r12
    000001a3: 	jne	.Ltmp2194 # Offset: 419
    000001a9: 	movzbl	(%rbp), %eax
    000001ad: 	movb	%al, 0x10(%rbx)
.Ltmp2200:
    000001b0: 	movq	%r12, 0x8(%rbx)
    000001b4: 	movb	$0x0, (%rdi,%r12)
    000001b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c7: 	addq	$0x20, %rax
    000001cb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d9: 	je	.Ltmp2195 # Offset: 473
.Ltmp2201:
    000001df: 	movq	-0x20(%rax), %rbp
    000001e3: 	callq	clock@PLT # Offset: 483
    000001e8: 	movq	%rax, end_time(%rip)
    000001ef: 	movq	0x18(%rsp), %rdx
    000001f4: 	subq	%fs:0x28, %rdx
    000001fd: 	jne	.Ltmp2196 # Offset: 509
    00000203: 	subq	start_time(%rip), %rax
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	%rbp, %rdi
    00000211: 	cvtsi2sd	%rax, %xmm0
    00000216: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000021e: 	addq	$0x28, %rsp
    00000222: 	popq	%rbx
    00000223: 	popq	%rbp
    00000224: 	popq	%r12
    00000226: 	popq	%r13
    00000228: 	popq	%r14
    0000022a: 	popq	%r15
    0000022c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp2188:
    00000238: 	movq	%rax, %rcx
.Ltmp2187:
    0000023b: 	pxor	%xmm0, %xmm0
    0000023f: 	pxor	%xmm2, %xmm2
    00000243: 	pxor	%xmm1, %xmm1
    00000247: 	movq	%r8, %rax
    0000024a: 	cqto
    0000024c: 	cvtsi2sd	%rcx, %xmm1
    00000251: 	idivq	%rcx
    00000254: 	movq	%rax, %r8
    00000257: 	movq	%r9, %rax
    0000025a: 	cqto
    0000025c: 	imulq	%r8, %r8
    00000260: 	idivq	%rcx
    00000263: 	movq	%rax, %r9
    00000266: 	imulq	%rax, %r9
    0000026a: 	addq	%r9, %r8
    0000026d: 	cvtsi2sd	%r8, %xmm0
    00000272: 	ucomisd	%xmm0, %xmm2
    00000276: 	ja	.Ltmp2197 # Offset: 630
    0000027c: 	sqrtsd	%xmm0, %xmm0
.Ltmp2203:
    00000280: 	mulsd	%xmm1, %xmm0
    00000284: 	cvttsd2si	%xmm0, %rax
    00000289: 	testq	%rax, %rax
    0000028c: 	jle	.Ltmp2198 # Offset: 652
    00000292: 	movl	current_test(%rip), %edx
    00000298: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000029f: 	movl	$0x1, %edi
    000002a4: 	xorl	%eax, %eax
    000002a6: 	callq	__printf_chk@PLT # Offset: 678
    000002ab: 	jmp	.Ltmp2199 # Offset: 683
.Ltmp2193:
    000002b0: 	movq	%rbx, %rdi
    000002b3: 	leaq	0x10(%rsp), %rsi
    000002b8: 	xorl	%edx, %edx
    000002ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 698
    000002bf: 	movq	%rax, (%rbx)
    000002c2: 	movq	%rax, %rdi
    000002c5: 	movq	0x10(%rsp), %rax
    000002ca: 	movq	%rax, 0x10(%rbx)
.Ltmp2202:
    000002ce: 	movq	%r12, %rdx
    000002d1: 	movq	%rbp, %rsi
    000002d4: 	callq	memcpy@PLT # Offset: 724
    000002d9: 	movq	0x10(%rsp), %r12
    000002de: 	movq	(%rbx), %rdi
    000002e1: 	jmp	.Ltmp2200 # Offset: 737
.Ltmp2190:
    000002e6: 	movq	(%rsp), %rsi
    000002ea: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 753
    000002f6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002fd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000304: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000030b: 	jne	.Ltmp2201 # Offset: 779
.Ltmp2195:
    00000311: 	movq	-0x8(%rdx), %rax
    00000315: 	addq	$0x200, %rax
    0000031b: 	jmp	.Ltmp2201 # Offset: 795
.Ltmp2194:
    00000320: 	testq	%r12, %r12
    00000323: 	je	.Ltmp2200 # Offset: 803
    00000329: 	jmp	.Ltmp2202 # Offset: 809
.Ltmp2196:
    0000032b: 	callq	__stack_chk_fail@PLT # Offset: 811
.Ltmp2192:
    00000330: 	leaq	DATAat0x2b008(%rip), %rdi
    00000337: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 823
    0000033c: 	nopl	(%rax) # Size: 4
.Ltmp2197:
    00000340: 	movsd	%xmm1, 0x8(%rsp)
    00000346: 	callq	sqrt@PLT # Offset: 838
    0000034b: 	movsd	0x8(%rsp), %xmm1
    00000351: 	jmp	.Ltmp2203 # Offset: 849
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantISt7complexIlE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z8test_CSEISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x1f8b0
  Size        : 0x336
  MaxSize     : 0x340
  Offset      : 0x1f8b0
  Section     : .text
  Orc Section : .local.text._Z8test_CSEISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x38, %rsp
    0000001b: 	movl	%esi, 0xc(%rsp)
    0000001f: 	movq	%r8, 0x10(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x28(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x8(%rsp)
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp2204 # Offset: 76
    00000052: 	movl	0xc(%rsp), %eax
    00000056: 	movl	$0x0, 0x4(%rsp)
    0000005e: 	subl	$0x2, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x20(%rbp,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2209:
    00000070: 	movq	(%rbp), %r9
    00000074: 	movq	0x8(%rbp), %r10
    00000078: 	movq	%r9, %rax
    0000007b: 	movq	%r10, %rcx
    0000007e: 	subq	0x10(%rbp), %rax
    00000082: 	subq	0x18(%rbp), %rcx
    00000086: 	cmpl	$0x1, 0xc(%rsp)
    0000008b: 	jle	.Ltmp2205 # Offset: 139
    0000008d: 	leaq	0x10(%rbp), %rsi
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp2206:
    00000098: 	movq	%r9, %r14
    0000009b: 	movq	%r10, %r11
    0000009e: 	movq	(%rsi), %r9
    000000a1: 	movq	0x8(%rsi), %r10
    000000a5: 	movq	%r14, %r8
    000000a8: 	movq	%r11, %rdx
    000000ab: 	addq	$0x10, %rsi
    000000af: 	subq	%r9, %r8
    000000b2: 	subq	%r10, %rdx
    000000b5: 	movq	%r8, %rdi
    000000b8: 	imulq	%r12, %r8
    000000bc: 	movq	%rdx, %r15
    000000bf: 	imulq	%rbx, %rdi
    000000c3: 	imulq	%r12, %r15
    000000c7: 	imulq	%rbx, %rdx
    000000cb: 	subq	%r15, %rdi
    000000ce: 	addq	%r8, %rdx
    000000d1: 	leaq	(%r14,%rdi,2), %r8
    000000d5: 	leaq	(%r9,%rdi,2), %rdi
    000000d9: 	addq	%r8, %rax
    000000dc: 	subq	%rdi, %rax
    000000df: 	leaq	(%r11,%rdx,2), %rdi
    000000e3: 	leaq	(%r10,%rdx,2), %rdx
    000000e7: 	addq	%rdi, %rcx
    000000ea: 	subq	%rdx, %rcx
    000000ed: 	cmpq	%rsi, %r13
    000000f0: 	jne	.Ltmp2206 # Offset: 240
.Ltmp2205:
    000000f2: 	movq	%rcx, %rdi
    000000f5: 	movq	%rax, %rdx
    000000f8: 	negq	%rdi
    000000fb: 	cmovsq	%rcx, %rdi
    000000ff: 	negq	%rdx
    00000102: 	cmovsq	%rax, %rdx
    00000106: 	cmpq	%rdx, %rdi
    00000109: 	jg	.Ltmp2207 # Offset: 265
    0000010f: 	testq	%rax, %rax
    00000112: 	jne	.Ltmp2208 # Offset: 274
.Ltmp2219:
    00000118: 	movl	iterations(%rip), %eax
    0000011e: 	movl	%eax, 0x8(%rsp)
.Ltmp2218:
    00000122: 	addl	$0x1, 0x4(%rsp)
    00000127: 	movl	0x4(%rsp), %eax
    0000012b: 	cmpl	0x8(%rsp), %eax
    0000012f: 	jl	.Ltmp2209 # Offset: 303
.Ltmp2204:
    00000135: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000013c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000143: 	subq	$0x20, %rax
    00000147: 	cmpq	%rax, %rbx
    0000014a: 	je	.Ltmp2210 # Offset: 330
    00000150: 	movq	0x10(%rsp), %rax
    00000155: 	leaq	0x10(%rbx), %rdi
    00000159: 	movq	%rdi, (%rbx)
    0000015c: 	movq	(%rax), %rbp
    0000015f: 	movq	0x8(%rax), %r12
    00000163: 	movq	%rbp, %rax
    00000166: 	addq	%r12, %rax
    00000169: 	je	.Ltmp2211 # Offset: 361
    0000016b: 	testq	%rbp, %rbp
    0000016e: 	je	.Ltmp2212 # Offset: 366
.Ltmp2211:
    00000174: 	movq	%r12, 0x20(%rsp)
    00000179: 	cmpq	$0xf, %r12
    0000017d: 	ja	.Ltmp2213 # Offset: 381
    00000183: 	cmpq	$0x1, %r12
    00000187: 	jne	.Ltmp2214 # Offset: 391
    0000018d: 	movzbl	(%rbp), %eax
    00000191: 	movb	%al, 0x10(%rbx)
.Ltmp2220:
    00000194: 	movq	%r12, 0x8(%rbx)
    00000198: 	movb	$0x0, (%rdi,%r12)
    0000019d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ab: 	addq	$0x20, %rax
    000001af: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001b6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001bd: 	je	.Ltmp2215 # Offset: 445
.Ltmp2221:
    000001c3: 	movq	-0x20(%rax), %rbp
    000001c7: 	callq	clock@PLT # Offset: 455
    000001cc: 	movq	%rax, end_time(%rip)
    000001d3: 	movq	0x28(%rsp), %rdx
    000001d8: 	subq	%fs:0x28, %rdx
    000001e1: 	jne	.Ltmp2216 # Offset: 481
    000001e7: 	subq	start_time(%rip), %rax
    000001ee: 	pxor	%xmm0, %xmm0
    000001f2: 	movq	%rbp, %rdi
    000001f5: 	cvtsi2sd	%rax, %xmm0
    000001fa: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000202: 	addq	$0x38, %rsp
    00000206: 	popq	%rbx
    00000207: 	popq	%rbp
    00000208: 	popq	%r12
    0000020a: 	popq	%r13
    0000020c: 	popq	%r14
    0000020e: 	popq	%r15
    00000210: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 528
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp2208:
    00000218: 	movq	%rdx, %rdi
.Ltmp2207:
    0000021b: 	pxor	%xmm0, %xmm0
    0000021f: 	pxor	%xmm2, %xmm2
    00000223: 	pxor	%xmm1, %xmm1
    00000227: 	cqto
    00000229: 	idivq	%rdi
    0000022c: 	cvtsi2sd	%rdi, %xmm1
    00000231: 	movq	%rax, %rsi
    00000234: 	movq	%rcx, %rax
    00000237: 	cqto
    00000239: 	imulq	%rsi, %rsi
    0000023d: 	idivq	%rdi
    00000240: 	imulq	%rax, %rax
    00000244: 	addq	%rax, %rsi
    00000247: 	cvtsi2sd	%rsi, %xmm0
    0000024c: 	ucomisd	%xmm0, %xmm2
    00000250: 	ja	.Ltmp2217 # Offset: 592
    00000256: 	sqrtsd	%xmm0, %xmm0
.Ltmp2223:
    0000025a: 	mulsd	%xmm1, %xmm0
    0000025e: 	cvttsd2si	%xmm0, %rax
    00000263: 	testq	%rax, %rax
    00000266: 	jle	.Ltmp2218 # Offset: 614
    0000026c: 	movl	current_test(%rip), %edx
    00000272: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00000279: 	movl	$0x1, %edi
    0000027e: 	xorl	%eax, %eax
    00000280: 	callq	__printf_chk@PLT # Offset: 640
    00000285: 	jmp	.Ltmp2219 # Offset: 645
.Ltmp2213:
    0000028a: 	movq	%rbx, %rdi
    0000028d: 	leaq	0x20(%rsp), %rsi
    00000292: 	xorl	%edx, %edx
    00000294: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 660
    00000299: 	movq	%rax, (%rbx)
    0000029c: 	movq	%rax, %rdi
    0000029f: 	movq	0x20(%rsp), %rax
    000002a4: 	movq	%rax, 0x10(%rbx)
.Ltmp2222:
    000002a8: 	movq	%r12, %rdx
    000002ab: 	movq	%rbp, %rsi
    000002ae: 	callq	memcpy@PLT # Offset: 686
    000002b3: 	movq	0x20(%rsp), %r12
    000002b8: 	movq	(%rbx), %rdi
    000002bb: 	jmp	.Ltmp2220 # Offset: 699
.Ltmp2210:
    000002c0: 	movq	0x10(%rsp), %rsi
    000002c5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 716
    000002d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e6: 	jne	.Ltmp2221 # Offset: 742
.Ltmp2215:
    000002ec: 	movq	-0x8(%rdx), %rax
    000002f0: 	addq	$0x200, %rax
    000002f6: 	jmp	.Ltmp2221 # Offset: 758
.Ltmp2214:
    000002fb: 	testq	%r12, %r12
    000002fe: 	je	.Ltmp2220 # Offset: 766
    00000304: 	jmp	.Ltmp2222 # Offset: 772
.Ltmp2216:
    00000306: 	callq	__stack_chk_fail@PLT # Offset: 774
.Ltmp2212:
    0000030b: 	leaq	DATAat0x2b008(%rip), %rdi
    00000312: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 786
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2217:
    00000320: 	movsd	%xmm1, 0x18(%rsp)
    00000326: 	callq	sqrt@PLT # Offset: 806
    0000032b: 	movsd	0x18(%rsp), %xmm1
    00000331: 	jmp	.Ltmp2223 # Offset: 817
DWARF CFI Instructions:
    <empty>
End of Function "_Z8test_CSEISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2ISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x1fbf0
  Size        : 0x376
  MaxSize     : 0x380
  Offset      : 0x1fbf0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2ISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x38, %rsp
    0000001b: 	movl	%esi, 0xc(%rsp)
    0000001f: 	movq	%r8, 0x10(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x28(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x8(%rsp)
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp2224 # Offset: 76
    00000052: 	movl	0xc(%rsp), %eax
    00000056: 	movl	$0x0, 0x4(%rsp)
    0000005e: 	subl	$0x2, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x20(%rbp,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2229:
    00000070: 	movq	(%rbp), %r9
    00000074: 	movq	0x8(%rbp), %r10
    00000078: 	movq	0x10(%rbp), %r11
    0000007c: 	movq	0x18(%rbp), %r8
    00000080: 	movq	%r9, %rcx
    00000083: 	movq	%r10, %rdi
    00000086: 	subq	%r11, %rcx
    00000089: 	subq	%r8, %rdi
    0000008c: 	movq	%rcx, %rsi
    0000008f: 	movq	%rdi, %rax
    00000092: 	movq	%rdi, %rdx
    00000095: 	imulq	%r12, %rax
    00000099: 	imulq	%rbx, %rsi
    0000009d: 	imulq	%rbx, %rdx
    000000a1: 	subq	%rax, %rsi
    000000a4: 	movq	%rcx, %rax
    000000a7: 	imulq	%r12, %rax
    000000ab: 	addq	%rax, %rdx
    000000ae: 	leaq	(%r9,%rsi,2), %rax
    000000b2: 	addq	%rcx, %rax
    000000b5: 	leaq	(%r11,%rsi,2), %rcx
    000000b9: 	subq	%rcx, %rax
    000000bc: 	leaq	(%r10,%rdx,2), %rcx
    000000c0: 	leaq	(%r8,%rdx,2), %rdx
    000000c4: 	addq	%rdi, %rcx
    000000c7: 	subq	%rdx, %rcx
    000000ca: 	cmpl	$0x1, 0xc(%rsp)
    000000cf: 	jle	.Ltmp2225 # Offset: 207
    000000d1: 	leaq	0x10(%rbp), %rsi
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp2226:
    000000d8: 	movq	%r9, %r14
    000000db: 	movq	%r10, %r11
    000000de: 	movq	(%rsi), %r9
    000000e1: 	movq	0x8(%rsi), %r10
    000000e5: 	movq	%r14, %r8
    000000e8: 	movq	%r11, %rdx
    000000eb: 	addq	$0x10, %rsi
    000000ef: 	subq	%r9, %r8
    000000f2: 	subq	%r10, %rdx
    000000f5: 	movq	%r8, %rdi
    000000f8: 	imulq	%r12, %r8
    000000fc: 	movq	%rdx, %r15
    000000ff: 	imulq	%rbx, %rdi
    00000103: 	imulq	%r12, %r15
    00000107: 	imulq	%rbx, %rdx
    0000010b: 	subq	%r15, %rdi
    0000010e: 	addq	%r8, %rdx
    00000111: 	leaq	(%r14,%rdi,2), %r14
    00000115: 	leaq	(%r9,%rdi,2), %rdi
    00000119: 	leaq	(%r11,%rdx,2), %r8
    0000011d: 	leaq	(%rax,%r14,2), %rax
    00000121: 	leaq	(%r10,%rdx,2), %rdx
    00000125: 	leaq	(%rcx,%r8,2), %rcx
    00000129: 	subq	%rdi, %rax
    0000012c: 	subq	%rdx, %rcx
    0000012f: 	subq	%rdi, %rax
    00000132: 	subq	%rdx, %rcx
    00000135: 	cmpq	%rsi, %r13
    00000138: 	jne	.Ltmp2226 # Offset: 312
.Ltmp2225:
    0000013a: 	movq	%rcx, %rdi
    0000013d: 	movq	%rax, %rdx
    00000140: 	negq	%rdi
    00000143: 	cmovsq	%rcx, %rdi
    00000147: 	negq	%rdx
    0000014a: 	cmovsq	%rax, %rdx
    0000014e: 	cmpq	%rdx, %rdi
    00000151: 	jg	.Ltmp2227 # Offset: 337
    00000157: 	testq	%rax, %rax
    0000015a: 	jne	.Ltmp2228 # Offset: 346
.Ltmp2239:
    00000160: 	movl	iterations(%rip), %eax
    00000166: 	movl	%eax, 0x8(%rsp)
.Ltmp2238:
    0000016a: 	addl	$0x1, 0x4(%rsp)
    0000016f: 	movl	0x4(%rsp), %eax
    00000173: 	cmpl	0x8(%rsp), %eax
    00000177: 	jl	.Ltmp2229 # Offset: 375
.Ltmp2224:
    0000017d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000018b: 	subq	$0x20, %rax
    0000018f: 	cmpq	%rax, %rbx
    00000192: 	je	.Ltmp2230 # Offset: 402
    00000198: 	movq	0x10(%rsp), %rax
    0000019d: 	leaq	0x10(%rbx), %rdi
    000001a1: 	movq	%rdi, (%rbx)
    000001a4: 	movq	(%rax), %rbp
    000001a7: 	movq	0x8(%rax), %r12
    000001ab: 	movq	%rbp, %rax
    000001ae: 	addq	%r12, %rax
    000001b1: 	je	.Ltmp2231 # Offset: 433
    000001b3: 	testq	%rbp, %rbp
    000001b6: 	je	.Ltmp2232 # Offset: 438
.Ltmp2231:
    000001bc: 	movq	%r12, 0x20(%rsp)
    000001c1: 	cmpq	$0xf, %r12
    000001c5: 	ja	.Ltmp2233 # Offset: 453
    000001cb: 	cmpq	$0x1, %r12
    000001cf: 	jne	.Ltmp2234 # Offset: 463
    000001d5: 	movzbl	(%rbp), %eax
    000001d9: 	movb	%al, 0x10(%rbx)
.Ltmp2240:
    000001dc: 	movq	%r12, 0x8(%rbx)
    000001e0: 	movb	$0x0, (%rdi,%r12)
    000001e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f3: 	addq	$0x20, %rax
    000001f7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fe: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000205: 	je	.Ltmp2235 # Offset: 517
.Ltmp2241:
    0000020b: 	movq	-0x20(%rax), %rbp
    0000020f: 	callq	clock@PLT # Offset: 527
    00000214: 	movq	%rax, end_time(%rip)
    0000021b: 	movq	0x28(%rsp), %rdx
    00000220: 	subq	%fs:0x28, %rdx
    00000229: 	jne	.Ltmp2236 # Offset: 553
    0000022f: 	subq	start_time(%rip), %rax
    00000236: 	pxor	%xmm0, %xmm0
    0000023a: 	movq	%rbp, %rdi
    0000023d: 	cvtsi2sd	%rax, %xmm0
    00000242: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000024a: 	addq	$0x38, %rsp
    0000024e: 	popq	%rbx
    0000024f: 	popq	%rbp
    00000250: 	popq	%r12
    00000252: 	popq	%r13
    00000254: 	popq	%r14
    00000256: 	popq	%r15
    00000258: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 600
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp2228:
    00000260: 	movq	%rdx, %rdi
.Ltmp2227:
    00000263: 	pxor	%xmm0, %xmm0
    00000267: 	pxor	%xmm2, %xmm2
    0000026b: 	pxor	%xmm1, %xmm1
    0000026f: 	cqto
    00000271: 	idivq	%rdi
    00000274: 	cvtsi2sd	%rdi, %xmm1
    00000279: 	movq	%rax, %rsi
    0000027c: 	movq	%rcx, %rax
    0000027f: 	cqto
    00000281: 	imulq	%rsi, %rsi
    00000285: 	idivq	%rdi
    00000288: 	imulq	%rax, %rax
    0000028c: 	addq	%rax, %rsi
    0000028f: 	cvtsi2sd	%rsi, %xmm0
    00000294: 	ucomisd	%xmm0, %xmm2
    00000298: 	ja	.Ltmp2237 # Offset: 664
    0000029e: 	sqrtsd	%xmm0, %xmm0
.Ltmp2243:
    000002a2: 	mulsd	%xmm1, %xmm0
    000002a6: 	cvttsd2si	%xmm0, %rax
    000002ab: 	testq	%rax, %rax
    000002ae: 	jle	.Ltmp2238 # Offset: 686
    000002b4: 	movl	current_test(%rip), %edx
    000002ba: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000002c1: 	movl	$0x1, %edi
    000002c6: 	xorl	%eax, %eax
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	jmp	.Ltmp2239 # Offset: 717
.Ltmp2233:
    000002d2: 	movq	%rbx, %rdi
    000002d5: 	leaq	0x20(%rsp), %rsi
    000002da: 	xorl	%edx, %edx
    000002dc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 732
    000002e1: 	movq	%rax, (%rbx)
    000002e4: 	movq	%rax, %rdi
    000002e7: 	movq	0x20(%rsp), %rax
    000002ec: 	movq	%rax, 0x10(%rbx)
.Ltmp2242:
    000002f0: 	movq	%r12, %rdx
    000002f3: 	movq	%rbp, %rsi
    000002f6: 	callq	memcpy@PLT # Offset: 758
    000002fb: 	movq	0x20(%rsp), %r12
    00000300: 	movq	(%rbx), %rdi
    00000303: 	jmp	.Ltmp2240 # Offset: 771
.Ltmp2230:
    00000308: 	movq	0x10(%rsp), %rsi
    0000030d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000314: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 788
    00000319: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000320: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000327: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000032e: 	jne	.Ltmp2241 # Offset: 814
.Ltmp2235:
    00000334: 	movq	-0x8(%rdx), %rax
    00000338: 	addq	$0x200, %rax
    0000033e: 	jmp	.Ltmp2241 # Offset: 830
.Ltmp2234:
    00000343: 	testq	%r12, %r12
    00000346: 	je	.Ltmp2240 # Offset: 838
    0000034c: 	jmp	.Ltmp2242 # Offset: 844
.Ltmp2236:
    0000034e: 	callq	__stack_chk_fail@PLT # Offset: 846
.Ltmp2232:
    00000353: 	leaq	DATAat0x2b008(%rip), %rdi
    0000035a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 858
    0000035f: 	nop # Size: 1
.Ltmp2237:
    00000360: 	movsd	%xmm1, 0x18(%rsp)
    00000366: 	callq	sqrt@PLT # Offset: 870
    0000036b: 	movsd	0x18(%rsp), %xmm1
    00000371: 	jmp	.Ltmp2243 # Offset: 881
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2ISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 117
  State       : disassembled
  Address     : 0x1ff70
  Size        : 0x36f
  MaxSize     : 0x370
  Offset      : 0x1ff70
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%r8, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x48, %rsp
    0000001d: 	movq	%r9, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x38(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2244 # Offset: 70
    0000004c: 	movq	%r15, %rcx
    0000004f: 	movq	%r14, %rdx
    00000052: 	movl	%r15d, %eax
    00000055: 	sarq	$0x20, %rcx
    00000059: 	sarq	$0x20, %rdx
    0000005d: 	imull	%r14d, %eax
    00000061: 	movl	%ecx, %esi
    00000063: 	imull	%r14d, %ecx
    00000067: 	xorl	%r14d, %r14d
    0000006a: 	imull	%edx, %esi
    0000006d: 	imull	%r15d, %edx
    00000071: 	subl	%esi, %eax
    00000073: 	movq	%r13, %rsi
    00000076: 	addl	%ecx, %edx
    00000078: 	sarq	$0x20, %rsi
    0000007c: 	movl	%eax, %ecx
    0000007e: 	movl	%edx, %edi
    00000080: 	imull	%r13d, %ecx
    00000084: 	imull	%r13d, %edx
    00000088: 	leaq	0xfa00(%rbx), %r13
    0000008f: 	imull	%esi, %edi
    00000092: 	imull	%esi, %eax
    00000095: 	subl	%edi, %ecx
    00000097: 	addl	%edx, %eax
    00000099: 	movq	%r12, %rdx
    0000009c: 	movl	%ecx, %r15d
    0000009f: 	sarq	$0x20, %rdx
    000000a3: 	imull	%r12d, %r15d
    000000a7: 	movl	%eax, %esi
    000000a9: 	imull	%edx, %esi
    000000ac: 	imull	%r12d, %eax
    000000b0: 	leaq	DATAat0x2b1d0(%rip), %r12
    000000b7: 	imull	%edx, %ecx
    000000ba: 	subl	%esi, %r15d
    000000bd: 	movd	%r15d, %xmm2
    000000c2: 	addl	%ecx, %eax
    000000c4: 	movd	%eax, %xmm4
    000000c8: 	imull	$0x1f40, %eax, %ebp
    000000ce: 	punpckldq	%xmm4, %xmm2
    000000d2: 	punpcklqdq	%xmm2, %xmm2
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2248:
    000000e0: 	movq	%rbx, %rax
    000000e3: 	pxor	%xmm1, %xmm1
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2245:
    000000f0: 	movdqu	(%rax), %xmm0
    000000f4: 	addq	$0x10, %rax
    000000f8: 	paddd	%xmm2, %xmm0
    000000fc: 	paddd	%xmm0, %xmm1
    00000100: 	cmpq	%r13, %rax
    00000103: 	jne	.Ltmp2245 # Offset: 259
    00000105: 	movdqa	%xmm1, %xmm0
    00000109: 	movd	%xmm1, %edx
    0000010d: 	punpckhdq	%xmm1, %xmm0
    00000111: 	movd	%xmm0, %eax
    00000115: 	pshufd	$0xff, %xmm1, %xmm0
    0000011a: 	pshufd	$0x55, %xmm1, %xmm1
    0000011f: 	addl	%edx, %eax
    00000121: 	cvttsd2si	init_value(%rip), %edx
    00000129: 	movd	%xmm0, %ecx
    0000012d: 	addl	%r15d, %edx
    00000130: 	imull	$0x1f40, %edx, %edx
    00000136: 	subl	%edx, %eax
    00000138: 	movd	%xmm1, %edx
    0000013c: 	addl	%edx, %ecx
    0000013e: 	movl	%eax, %edx
    00000140: 	subl	%ebp, %ecx
    00000142: 	movl	%ecx, %edi
    00000144: 	negl	%edi
    00000146: 	cmovsl	%ecx, %edi
    00000149: 	negl	%edx
    0000014b: 	cmovsl	%eax, %edx
    0000014e: 	cmpl	%edx, %edi
    00000150: 	jg	.Ltmp2246 # Offset: 336
    00000156: 	testl	%eax, %eax
    00000158: 	jne	.Ltmp2247 # Offset: 344
.Ltmp2257:
    0000015e: 	addl	$0x1, %r14d
    00000162: 	cmpl	iterations(%rip), %r14d
    00000169: 	jl	.Ltmp2248 # Offset: 361
.Ltmp2244:
    0000016f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000017d: 	subq	$0x20, %rax
    00000181: 	cmpq	%rax, %rbx
    00000184: 	je	.Ltmp2249 # Offset: 388
    0000018a: 	movq	0x18(%rsp), %rax
    0000018f: 	leaq	0x10(%rbx), %rdi
    00000193: 	movq	%rdi, (%rbx)
    00000196: 	movq	(%rax), %r13
    00000199: 	movq	0x8(%rax), %r12
    0000019d: 	movq	%r13, %rax
    000001a0: 	addq	%r12, %rax
    000001a3: 	je	.Ltmp2250 # Offset: 419
    000001a5: 	testq	%r13, %r13
    000001a8: 	je	.Ltmp2251 # Offset: 424
.Ltmp2250:
    000001ae: 	movq	%r12, 0x30(%rsp)
    000001b3: 	cmpq	$0xf, %r12
    000001b7: 	ja	.Ltmp2252 # Offset: 439
    000001bd: 	cmpq	$0x1, %r12
    000001c1: 	jne	.Ltmp2253 # Offset: 449
    000001c7: 	movzbl	(%r13), %eax
    000001cc: 	movb	%al, 0x10(%rbx)
.Ltmp2258:
    000001cf: 	movq	%r12, 0x8(%rbx)
    000001d3: 	movb	$0x0, (%rdi,%r12)
    000001d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e6: 	addq	$0x20, %rax
    000001ea: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001f8: 	je	.Ltmp2254 # Offset: 504
.Ltmp2259:
    000001fe: 	movq	-0x20(%rax), %rbp
    00000202: 	callq	clock@PLT # Offset: 514
    00000207: 	movq	%rax, end_time(%rip)
    0000020e: 	movq	0x38(%rsp), %rdx
    00000213: 	subq	%fs:0x28, %rdx
    0000021c: 	jne	.Ltmp2255 # Offset: 540
    00000222: 	subq	start_time(%rip), %rax
    00000229: 	pxor	%xmm0, %xmm0
    0000022d: 	movq	%rbp, %rdi
    00000230: 	cvtsi2sd	%rax, %xmm0
    00000235: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000023d: 	addq	$0x48, %rsp
    00000241: 	popq	%rbx
    00000242: 	popq	%rbp
    00000243: 	popq	%r12
    00000245: 	popq	%r13
    00000247: 	popq	%r14
    00000249: 	popq	%r15
    0000024b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 587
.Ltmp2247:
    00000250: 	movl	%edx, %edi
.Ltmp2246:
    00000252: 	pxor	%xmm0, %xmm0
    00000256: 	pxor	%xmm3, %xmm3
    0000025a: 	pxor	%xmm1, %xmm1
    0000025e: 	cltd
    0000025f: 	idivl	%edi
    00000261: 	cvtsi2sd	%edi, %xmm1
    00000265: 	movl	%eax, %esi
    00000267: 	movl	%ecx, %eax
    00000269: 	cltd
    0000026a: 	imull	%esi, %esi
    0000026d: 	idivl	%edi
    0000026f: 	imull	%eax, %eax
    00000272: 	addl	%eax, %esi
    00000274: 	cvtsi2sd	%esi, %xmm0
    00000278: 	ucomisd	%xmm0, %xmm3
    0000027c: 	ja	.Ltmp2256 # Offset: 636
    00000282: 	sqrtsd	%xmm0, %xmm0
.Ltmp2261:
    00000286: 	mulsd	%xmm0, %xmm1
    0000028a: 	cvttsd2si	%xmm1, %eax
    0000028e: 	testl	%eax, %eax
    00000290: 	jle	.Ltmp2257 # Offset: 656
    00000296: 	movl	current_test(%rip), %edx
    0000029c: 	movq	%r12, %rsi
    0000029f: 	movl	$0x1, %edi
    000002a4: 	xorl	%eax, %eax
    000002a6: 	movaps	%xmm2, (%rsp)
    000002aa: 	callq	__printf_chk@PLT # Offset: 682
    000002af: 	movdqa	(%rsp), %xmm2
    000002b4: 	jmp	.Ltmp2257 # Offset: 692
.Ltmp2252:
    000002b9: 	movq	%rbx, %rdi
    000002bc: 	leaq	0x30(%rsp), %rsi
    000002c1: 	xorl	%edx, %edx
    000002c3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 707
    000002c8: 	movq	%rax, (%rbx)
    000002cb: 	movq	%rax, %rdi
    000002ce: 	movq	0x30(%rsp), %rax
    000002d3: 	movq	%rax, 0x10(%rbx)
.Ltmp2260:
    000002d7: 	movq	%r12, %rdx
    000002da: 	movq	%r13, %rsi
    000002dd: 	callq	memcpy@PLT # Offset: 733
    000002e2: 	movq	0x30(%rsp), %r12
    000002e7: 	movq	(%rbx), %rdi
    000002ea: 	jmp	.Ltmp2258 # Offset: 746
.Ltmp2249:
    000002ef: 	movq	0x18(%rsp), %rsi
    000002f4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002fb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 763
    00000300: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000307: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000315: 	jne	.Ltmp2259 # Offset: 789
.Ltmp2254:
    0000031b: 	movq	-0x8(%rdx), %rax
    0000031f: 	addq	$0x200, %rax
    00000325: 	jmp	.Ltmp2259 # Offset: 805
.Ltmp2253:
    0000032a: 	testq	%r12, %r12
    0000032d: 	je	.Ltmp2258 # Offset: 813
    00000333: 	jmp	.Ltmp2260 # Offset: 819
.Ltmp2255:
    00000335: 	callq	__stack_chk_fail@PLT # Offset: 821
.Ltmp2251:
    0000033a: 	leaq	DATAat0x2b008(%rip), %rdi
    00000341: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 833
    00000346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2256:
    00000350: 	movaps	%xmm2, 0x20(%rsp)
    00000355: 	movsd	%xmm1, (%rsp)
    0000035a: 	callq	sqrt@PLT # Offset: 858
    0000035f: 	movdqa	0x20(%rsp), %xmm2
    00000365: 	movsd	(%rsp), %xmm1
    0000036a: 	jmp	.Ltmp2261 # Offset: 874
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z14test_variable4ISt7complexIiE31custom_mixed_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE31custom_mixed_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE31custom_mixed_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 118
  State       : disassembled
  Address     : 0x202e0
  Size        : 0x3c2
  MaxSize     : 0x3d0
  Offset      : 0x202e0
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE31custom_mixed_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%r9, 0x28(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x48(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2262 # Offset: 70
    0000004c: 	movq	%r15, %rax
    0000004f: 	movq	%r14, %rsi
    00000052: 	movq	%r13, %r9
    00000055: 	movl	%r15d, %ecx
    00000058: 	sarq	$0x20, %rax
    0000005c: 	sarq	$0x20, %rsi
    00000060: 	imull	%r14d, %ecx
    00000064: 	movl	%r13d, %r8d
    00000067: 	movl	%eax, %edx
    00000069: 	imull	%r14d, %eax
    0000006d: 	sarq	$0x20, %r9
    00000071: 	movl	%r12d, %ebp
    00000074: 	imull	%esi, %edx
    00000077: 	sarq	$0x20, %r12
    0000007b: 	movd	%ebp, %xmm3
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	imull	%r15d, %esi
    00000086: 	movd	%r12d, %xmm5
    0000008b: 	imull	%r13d, %r8d
    0000008f: 	punpckldq	%xmm5, %xmm3
    00000093: 	subl	%edx, %ecx
    00000095: 	punpcklqdq	%xmm3, %xmm3
    00000099: 	addl	%eax, %esi
    0000009b: 	movl	%r9d, %eax
    0000009e: 	movl	%ecx, %edx
    000000a0: 	imull	%r9d, %eax
    000000a4: 	imull	%r9d, %edx
    000000a8: 	imull	%r13d, %ecx
    000000ac: 	addl	%eax, %r8d
    000000af: 	movl	%esi, %eax
    000000b1: 	imull	%r13d, %eax
    000000b5: 	leaq	0xfa00(%rbx), %r13
    000000bc: 	imull	%r9d, %esi
    000000c0: 	subl	%edx, %eax
    000000c2: 	cltd
    000000c3: 	leal	(%rcx,%rsi), %r15d
    000000c7: 	movl	%r12d, %ecx
    000000ca: 	idivl	%r8d
    000000cd: 	leaq	DATAat0x2b1d0(%rip), %r12
    000000d4: 	movl	%eax, %edi
    000000d6: 	movl	%r15d, %eax
    000000d9: 	cltd
    000000da: 	subl	%edi, %ecx
    000000dc: 	movd	%edi, %xmm6
    000000e0: 	idivl	%r8d
    000000e3: 	imull	$0x1f40, %ecx, %ecx
    000000e9: 	movd	%eax, %xmm2
    000000ed: 	movl	%eax, %r15d
    000000f0: 	punpckldq	%xmm6, %xmm2
    000000f4: 	punpcklqdq	%xmm2, %xmm2
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2266:
    00000100: 	movq	%rbx, %rdx
    00000103: 	pxor	%xmm1, %xmm1
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2263:
    00000110: 	movdqu	(%rdx), %xmm0
    00000114: 	addq	$0x10, %rdx
    00000118: 	paddd	%xmm3, %xmm0
    0000011c: 	psubd	%xmm2, %xmm0
    00000120: 	paddd	%xmm0, %xmm1
    00000124: 	cmpq	%r13, %rdx
    00000127: 	jne	.Ltmp2263 # Offset: 295
    00000129: 	movdqa	%xmm1, %xmm0
    0000012d: 	movd	%xmm1, %edx
    00000131: 	punpckhdq	%xmm1, %xmm0
    00000135: 	movd	%xmm0, %eax
    00000139: 	pshufd	$0xff, %xmm1, %xmm0
    0000013e: 	pshufd	$0x55, %xmm1, %xmm1
    00000143: 	addl	%edx, %eax
    00000145: 	cvttsd2si	init_value(%rip), %edx
    0000014d: 	movd	%xmm0, %esi
    00000151: 	addl	%ebp, %edx
    00000153: 	subl	%r15d, %edx
    00000156: 	imull	$0x1f40, %edx, %edx
    0000015c: 	subl	%edx, %eax
    0000015e: 	movd	%xmm1, %edx
    00000162: 	addl	%edx, %esi
    00000164: 	movl	%eax, %edx
    00000166: 	subl	%ecx, %esi
    00000168: 	movl	%esi, %edi
    0000016a: 	negl	%edi
    0000016c: 	cmovsl	%esi, %edi
    0000016f: 	negl	%edx
    00000171: 	cmovsl	%eax, %edx
    00000174: 	cmpl	%edx, %edi
    00000176: 	jg	.Ltmp2264 # Offset: 374
    0000017c: 	testl	%eax, %eax
    0000017e: 	jne	.Ltmp2265 # Offset: 382
.Ltmp2275:
    00000184: 	addl	$0x1, %r14d
    00000188: 	cmpl	iterations(%rip), %r14d
    0000018f: 	jl	.Ltmp2266 # Offset: 399
.Ltmp2262:
    00000195: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000019c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001a3: 	subq	$0x20, %rax
    000001a7: 	cmpq	%rax, %rbx
    000001aa: 	je	.Ltmp2267 # Offset: 426
    000001b0: 	movq	0x28(%rsp), %rax
    000001b5: 	leaq	0x10(%rbx), %rdi
    000001b9: 	movq	%rdi, (%rbx)
    000001bc: 	movq	(%rax), %r13
    000001bf: 	movq	0x8(%rax), %r12
    000001c3: 	movq	%r13, %rax
    000001c6: 	addq	%r12, %rax
    000001c9: 	je	.Ltmp2268 # Offset: 457
    000001cb: 	testq	%r13, %r13
    000001ce: 	je	.Ltmp2269 # Offset: 462
.Ltmp2268:
    000001d4: 	movq	%r12, 0x40(%rsp)
    000001d9: 	cmpq	$0xf, %r12
    000001dd: 	ja	.Ltmp2270 # Offset: 477
    000001e3: 	cmpq	$0x1, %r12
    000001e7: 	jne	.Ltmp2271 # Offset: 487
    000001ed: 	movzbl	(%r13), %eax
    000001f2: 	movb	%al, 0x10(%rbx)
.Ltmp2276:
    000001f5: 	movq	%r12, 0x8(%rbx)
    000001f9: 	movb	$0x0, (%rdi,%r12)
    000001fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000205: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020c: 	addq	$0x20, %rax
    00000210: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000217: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000021e: 	je	.Ltmp2272 # Offset: 542
.Ltmp2277:
    00000224: 	movq	-0x20(%rax), %rbp
    00000228: 	callq	clock@PLT # Offset: 552
    0000022d: 	movq	%rax, end_time(%rip)
    00000234: 	movq	0x48(%rsp), %rdx
    00000239: 	subq	%fs:0x28, %rdx
    00000242: 	jne	.Ltmp2273 # Offset: 578
    00000248: 	subq	start_time(%rip), %rax
    0000024f: 	pxor	%xmm0, %xmm0
    00000253: 	movq	%rbp, %rdi
    00000256: 	cvtsi2sd	%rax, %xmm0
    0000025b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000263: 	addq	$0x58, %rsp
    00000267: 	popq	%rbx
    00000268: 	popq	%rbp
    00000269: 	popq	%r12
    0000026b: 	popq	%r13
    0000026d: 	popq	%r14
    0000026f: 	popq	%r15
    00000271: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 625
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2265:
    00000280: 	movl	%edx, %edi
.Ltmp2264:
    00000282: 	pxor	%xmm0, %xmm0
    00000286: 	pxor	%xmm4, %xmm4
    0000028a: 	pxor	%xmm1, %xmm1
    0000028e: 	cltd
    0000028f: 	idivl	%edi
    00000291: 	cvtsi2sd	%edi, %xmm1
    00000295: 	movl	%eax, %r9d
    00000298: 	movl	%esi, %eax
    0000029a: 	cltd
    0000029b: 	idivl	%edi
    0000029d: 	movl	%eax, %esi
    0000029f: 	movl	%r9d, %eax
    000002a2: 	imull	%r9d, %eax
    000002a6: 	imull	%esi, %esi
    000002a9: 	addl	%esi, %eax
    000002ab: 	cvtsi2sd	%eax, %xmm0
    000002af: 	ucomisd	%xmm0, %xmm4
    000002b3: 	ja	.Ltmp2274 # Offset: 691
    000002b9: 	sqrtsd	%xmm0, %xmm0
.Ltmp2279:
    000002bd: 	mulsd	%xmm0, %xmm1
    000002c1: 	cvttsd2si	%xmm1, %eax
    000002c5: 	testl	%eax, %eax
    000002c7: 	jle	.Ltmp2275 # Offset: 711
    000002cd: 	movl	current_test(%rip), %edx
    000002d3: 	movq	%r12, %rsi
    000002d6: 	movl	$0x1, %edi
    000002db: 	xorl	%eax, %eax
    000002dd: 	movl	%ecx, 0x20(%rsp)
    000002e1: 	movaps	%xmm3, 0x10(%rsp)
    000002e6: 	movaps	%xmm2, (%rsp)
    000002ea: 	callq	__printf_chk@PLT # Offset: 746
    000002ef: 	movdqa	0x10(%rsp), %xmm3
    000002f5: 	movdqa	(%rsp), %xmm2
    000002fa: 	movl	0x20(%rsp), %ecx
    000002fe: 	jmp	.Ltmp2275 # Offset: 766
.Ltmp2270:
    00000303: 	movq	%rbx, %rdi
    00000306: 	leaq	0x40(%rsp), %rsi
    0000030b: 	xorl	%edx, %edx
    0000030d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 781
    00000312: 	movq	%rax, (%rbx)
    00000315: 	movq	%rax, %rdi
    00000318: 	movq	0x40(%rsp), %rax
    0000031d: 	movq	%rax, 0x10(%rbx)
.Ltmp2278:
    00000321: 	movq	%r12, %rdx
    00000324: 	movq	%r13, %rsi
    00000327: 	callq	memcpy@PLT # Offset: 807
    0000032c: 	movq	0x40(%rsp), %r12
    00000331: 	movq	(%rbx), %rdi
    00000334: 	jmp	.Ltmp2276 # Offset: 820
.Ltmp2267:
    00000339: 	movq	0x28(%rsp), %rsi
    0000033e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000345: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 837
    0000034a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000351: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000358: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000035f: 	jne	.Ltmp2277 # Offset: 863
.Ltmp2272:
    00000365: 	movq	-0x8(%rdx), %rax
    00000369: 	addq	$0x200, %rax
    0000036f: 	jmp	.Ltmp2277 # Offset: 879
.Ltmp2271:
    00000374: 	testq	%r12, %r12
    00000377: 	je	.Ltmp2276 # Offset: 887
    0000037d: 	jmp	.Ltmp2278 # Offset: 893
.Ltmp2273:
    0000037f: 	callq	__stack_chk_fail@PLT # Offset: 895
.Ltmp2269:
    00000384: 	leaq	DATAat0x2b008(%rip), %rdi
    0000038b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 907
.Ltmp2274:
    00000390: 	movl	%ecx, (%rsp)
    00000393: 	movaps	%xmm3, 0x30(%rsp)
    00000398: 	movaps	%xmm2, 0x10(%rsp)
    0000039d: 	movsd	%xmm1, 0x20(%rsp)
    000003a3: 	callq	sqrt@PLT # Offset: 931
    000003a8: 	movdqa	0x30(%rsp), %xmm3
    000003ae: 	movl	(%rsp), %ecx
    000003b1: 	movdqa	0x10(%rsp), %xmm2
    000003b7: 	movsd	0x20(%rsp), %xmm1
    000003bd: 	jmp	.Ltmp2279 # Offset: 957
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE31custom_mixed_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z14test_variable4ISt7complexIiE30custom_mixed_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE30custom_mixed_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE30custom_mixed_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 119
  State       : disassembled
  Address     : 0x206b0
  Size        : 0x36f
  MaxSize     : 0x370
  Offset      : 0x206b0
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE30custom_mixed_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x48, %rsp
    0000001d: 	movq	%r9, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x38(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2280 # Offset: 70
    0000004c: 	movq	%r15, %rax
    0000004f: 	movq	%r14, %rcx
    00000052: 	movq	%r13, %r8
    00000055: 	movl	%r15d, %edi
    00000058: 	sarq	$0x20, %rax
    0000005c: 	sarq	$0x20, %rcx
    00000060: 	imull	%r14d, %edi
    00000064: 	movl	%r13d, %esi
    00000067: 	movl	%eax, %edx
    00000069: 	imull	%r14d, %eax
    0000006d: 	sarq	$0x20, %r8
    00000071: 	xorl	%r14d, %r14d
    00000074: 	imull	%ecx, %edx
    00000077: 	imull	%r15d, %ecx
    0000007b: 	movl	%r12d, %r15d
    0000007e: 	sarq	$0x20, %r12
    00000082: 	imull	%r13d, %esi
    00000086: 	subl	%edx, %edi
    00000088: 	addl	%eax, %ecx
    0000008a: 	movl	%r8d, %eax
    0000008d: 	imull	%r8d, %eax
    00000091: 	movl	%ecx, %edx
    00000093: 	imull	%r8d, %edx
    00000097: 	addl	%eax, %esi
    00000099: 	movl	%edi, %eax
    0000009b: 	imull	%r13d, %eax
    0000009f: 	imull	%r8d, %edi
    000000a3: 	addl	%edx, %eax
    000000a5: 	cltd
    000000a6: 	idivl	%esi
    000000a8: 	subl	%eax, %r15d
    000000ab: 	movl	%ecx, %eax
    000000ad: 	imull	%r13d, %eax
    000000b1: 	movd	%r15d, %xmm2
    000000b6: 	leaq	0xfa00(%rbx), %r13
    000000bd: 	subl	%edi, %eax
    000000bf: 	cltd
    000000c0: 	idivl	%esi
    000000c2: 	subl	%eax, %r12d
    000000c5: 	movd	%r12d, %xmm4
    000000ca: 	imull	$0x1f40, %r12d, %ebp
    000000d1: 	leaq	DATAat0x2b1d0(%rip), %r12
    000000d8: 	punpckldq	%xmm4, %xmm2
    000000dc: 	punpcklqdq	%xmm2, %xmm2
.Ltmp2284:
    000000e0: 	movq	%rbx, %rax
    000000e3: 	pxor	%xmm1, %xmm1
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2281:
    000000f0: 	movdqu	(%rax), %xmm0
    000000f4: 	addq	$0x10, %rax
    000000f8: 	paddd	%xmm2, %xmm0
    000000fc: 	paddd	%xmm0, %xmm1
    00000100: 	cmpq	%r13, %rax
    00000103: 	jne	.Ltmp2281 # Offset: 259
    00000105: 	movdqa	%xmm1, %xmm0
    00000109: 	movd	%xmm1, %edx
    0000010d: 	punpckhdq	%xmm1, %xmm0
    00000111: 	movd	%xmm0, %eax
    00000115: 	pshufd	$0xff, %xmm1, %xmm0
    0000011a: 	pshufd	$0x55, %xmm1, %xmm1
    0000011f: 	addl	%edx, %eax
    00000121: 	cvttsd2si	init_value(%rip), %edx
    00000129: 	movd	%xmm0, %ecx
    0000012d: 	addl	%r15d, %edx
    00000130: 	imull	$0x1f40, %edx, %edx
    00000136: 	subl	%edx, %eax
    00000138: 	movd	%xmm1, %edx
    0000013c: 	addl	%edx, %ecx
    0000013e: 	movl	%eax, %edx
    00000140: 	subl	%ebp, %ecx
    00000142: 	movl	%ecx, %edi
    00000144: 	negl	%edi
    00000146: 	cmovsl	%ecx, %edi
    00000149: 	negl	%edx
    0000014b: 	cmovsl	%eax, %edx
    0000014e: 	cmpl	%edx, %edi
    00000150: 	jg	.Ltmp2282 # Offset: 336
    00000156: 	testl	%eax, %eax
    00000158: 	jne	.Ltmp2283 # Offset: 344
.Ltmp2293:
    0000015e: 	addl	$0x1, %r14d
    00000162: 	cmpl	iterations(%rip), %r14d
    00000169: 	jl	.Ltmp2284 # Offset: 361
.Ltmp2280:
    0000016f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000017d: 	subq	$0x20, %rax
    00000181: 	cmpq	%rax, %rbx
    00000184: 	je	.Ltmp2285 # Offset: 388
    0000018a: 	movq	0x18(%rsp), %rax
    0000018f: 	leaq	0x10(%rbx), %rdi
    00000193: 	movq	%rdi, (%rbx)
    00000196: 	movq	(%rax), %r13
    00000199: 	movq	0x8(%rax), %r12
    0000019d: 	movq	%r13, %rax
    000001a0: 	addq	%r12, %rax
    000001a3: 	je	.Ltmp2286 # Offset: 419
    000001a5: 	testq	%r13, %r13
    000001a8: 	je	.Ltmp2287 # Offset: 424
.Ltmp2286:
    000001ae: 	movq	%r12, 0x30(%rsp)
    000001b3: 	cmpq	$0xf, %r12
    000001b7: 	ja	.Ltmp2288 # Offset: 439
    000001bd: 	cmpq	$0x1, %r12
    000001c1: 	jne	.Ltmp2289 # Offset: 449
    000001c7: 	movzbl	(%r13), %eax
    000001cc: 	movb	%al, 0x10(%rbx)
.Ltmp2294:
    000001cf: 	movq	%r12, 0x8(%rbx)
    000001d3: 	movb	$0x0, (%rdi,%r12)
    000001d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e6: 	addq	$0x20, %rax
    000001ea: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001f8: 	je	.Ltmp2290 # Offset: 504
.Ltmp2295:
    000001fe: 	movq	-0x20(%rax), %rbp
    00000202: 	callq	clock@PLT # Offset: 514
    00000207: 	movq	%rax, end_time(%rip)
    0000020e: 	movq	0x38(%rsp), %rdx
    00000213: 	subq	%fs:0x28, %rdx
    0000021c: 	jne	.Ltmp2291 # Offset: 540
    00000222: 	subq	start_time(%rip), %rax
    00000229: 	pxor	%xmm0, %xmm0
    0000022d: 	movq	%rbp, %rdi
    00000230: 	cvtsi2sd	%rax, %xmm0
    00000235: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000023d: 	addq	$0x48, %rsp
    00000241: 	popq	%rbx
    00000242: 	popq	%rbp
    00000243: 	popq	%r12
    00000245: 	popq	%r13
    00000247: 	popq	%r14
    00000249: 	popq	%r15
    0000024b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 587
.Ltmp2283:
    00000250: 	movl	%edx, %edi
.Ltmp2282:
    00000252: 	pxor	%xmm0, %xmm0
    00000256: 	pxor	%xmm3, %xmm3
    0000025a: 	pxor	%xmm1, %xmm1
    0000025e: 	cltd
    0000025f: 	idivl	%edi
    00000261: 	cvtsi2sd	%edi, %xmm1
    00000265: 	movl	%eax, %esi
    00000267: 	movl	%ecx, %eax
    00000269: 	cltd
    0000026a: 	imull	%esi, %esi
    0000026d: 	idivl	%edi
    0000026f: 	imull	%eax, %eax
    00000272: 	addl	%eax, %esi
    00000274: 	cvtsi2sd	%esi, %xmm0
    00000278: 	ucomisd	%xmm0, %xmm3
    0000027c: 	ja	.Ltmp2292 # Offset: 636
    00000282: 	sqrtsd	%xmm0, %xmm0
.Ltmp2297:
    00000286: 	mulsd	%xmm0, %xmm1
    0000028a: 	cvttsd2si	%xmm1, %eax
    0000028e: 	testl	%eax, %eax
    00000290: 	jle	.Ltmp2293 # Offset: 656
    00000296: 	movl	current_test(%rip), %edx
    0000029c: 	movq	%r12, %rsi
    0000029f: 	movl	$0x1, %edi
    000002a4: 	xorl	%eax, %eax
    000002a6: 	movaps	%xmm2, (%rsp)
    000002aa: 	callq	__printf_chk@PLT # Offset: 682
    000002af: 	movdqa	(%rsp), %xmm2
    000002b4: 	jmp	.Ltmp2293 # Offset: 692
.Ltmp2288:
    000002b9: 	movq	%rbx, %rdi
    000002bc: 	leaq	0x30(%rsp), %rsi
    000002c1: 	xorl	%edx, %edx
    000002c3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 707
    000002c8: 	movq	%rax, (%rbx)
    000002cb: 	movq	%rax, %rdi
    000002ce: 	movq	0x30(%rsp), %rax
    000002d3: 	movq	%rax, 0x10(%rbx)
.Ltmp2296:
    000002d7: 	movq	%r12, %rdx
    000002da: 	movq	%r13, %rsi
    000002dd: 	callq	memcpy@PLT # Offset: 733
    000002e2: 	movq	0x30(%rsp), %r12
    000002e7: 	movq	(%rbx), %rdi
    000002ea: 	jmp	.Ltmp2294 # Offset: 746
.Ltmp2285:
    000002ef: 	movq	0x18(%rsp), %rsi
    000002f4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002fb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 763
    00000300: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000307: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000315: 	jne	.Ltmp2295 # Offset: 789
.Ltmp2290:
    0000031b: 	movq	-0x8(%rdx), %rax
    0000031f: 	addq	$0x200, %rax
    00000325: 	jmp	.Ltmp2295 # Offset: 805
.Ltmp2289:
    0000032a: 	testq	%r12, %r12
    0000032d: 	je	.Ltmp2294 # Offset: 813
    00000333: 	jmp	.Ltmp2296 # Offset: 819
.Ltmp2291:
    00000335: 	callq	__stack_chk_fail@PLT # Offset: 821
.Ltmp2287:
    0000033a: 	leaq	DATAat0x2b008(%rip), %rdi
    00000341: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 833
    00000346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2292:
    00000350: 	movaps	%xmm2, 0x20(%rsp)
    00000355: 	movsd	%xmm1, (%rsp)
    0000035a: 	callq	sqrt@PLT # Offset: 858
    0000035f: 	movdqa	0x20(%rsp), %xmm2
    00000365: 	movsd	(%rsp), %xmm1
    0000036a: 	jmp	.Ltmp2297 # Offset: 874
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE30custom_mixed_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z14test_variable4ISt7complexIiE33custom_multiply_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE33custom_multiply_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE33custom_multiply_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 120
  State       : disassembled
  Address     : 0x20a20
  Size        : 0x490
  MaxSize     : 0x490
  Offset      : 0x20a20
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE33custom_multiply_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%r8, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x78, %rsp
    0000001d: 	movq	%r9, 0x48(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x68(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2298 # Offset: 70
    0000004c: 	movq	%r15, %rcx
    0000004f: 	movq	%r14, %rdx
    00000052: 	movl	%r15d, %eax
    00000055: 	sarq	$0x20, %rcx
    00000059: 	sarq	$0x20, %rdx
    0000005d: 	imull	%r14d, %eax
    00000061: 	movl	%ecx, %esi
    00000063: 	imull	%r14d, %ecx
    00000067: 	xorl	%r14d, %r14d
    0000006a: 	imull	%edx, %esi
    0000006d: 	imull	%r15d, %edx
    00000071: 	subl	%esi, %eax
    00000073: 	addl	%ecx, %edx
    00000075: 	movq	%r13, %rcx
    00000078: 	movl	%eax, %r15d
    0000007b: 	sarq	$0x20, %rcx
    0000007f: 	imull	%r13d, %r15d
    00000083: 	movl	%edx, %esi
    00000085: 	imull	%ecx, %esi
    00000088: 	imull	%r13d, %edx
    0000008c: 	leaq	0xfa00(%rbx), %r13
    00000093: 	imull	%ecx, %eax
    00000096: 	subl	%esi, %r15d
    00000099: 	movl	%r15d, %r9d
    0000009c: 	addl	%edx, %eax
    0000009e: 	imull	%r12d, %r9d
    000000a2: 	movq	%r12, %rdx
    000000a5: 	sarq	$0x20, %rdx
    000000a9: 	movl	%eax, %ecx
    000000ab: 	imull	%edx, %ecx
    000000ae: 	imull	%r12d, %eax
    000000b2: 	leaq	DATAat0x2b1d0(%rip), %r12
    000000b9: 	imull	%edx, %r15d
    000000bd: 	subl	%ecx, %r9d
    000000c0: 	movd	%r9d, %xmm4
    000000c5: 	movl	%r9d, %ebp
    000000c8: 	addl	%eax, %r15d
    000000cb: 	pshufd	$0x0, %xmm4, %xmm5
    000000d0: 	movd	%r15d, %xmm4
    000000d5: 	movdqa	%xmm5, %xmm7
    000000d9: 	pshufd	$0x0, %xmm4, %xmm4
    000000de: 	psrlq	$0x20, %xmm7
    000000e3: 	movdqa	%xmm4, %xmm6
    000000e7: 	psrlq	$0x20, %xmm6
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp2302:
    000000f0: 	pxor	%xmm8, %xmm8
    000000f5: 	movq	%rbx, %rax
    000000f8: 	movdqa	%xmm8, %xmm3
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp2299:
    00000100: 	movdqu	(%rax), %xmm0
    00000104: 	movdqu	0x10(%rax), %xmm2
    00000109: 	movdqa	%xmm5, %xmm11
    0000010e: 	movdqa	%xmm7, %xmm9
    00000113: 	movdqa	%xmm4, %xmm10
    00000118: 	movdqa	%xmm6, %xmm12
    0000011d: 	addq	$0x20, %rax
    00000121: 	movdqa	%xmm0, %xmm1
    00000125: 	shufps	$0xdd, %xmm2, %xmm0
    00000129: 	pmuludq	%xmm0, %xmm10
    0000012e: 	shufps	$0x88, %xmm2, %xmm1
    00000132: 	movdqa	%xmm1, %xmm2
    00000136: 	pmuludq	%xmm1, %xmm11
    0000013b: 	psrlq	$0x20, %xmm2
    00000140: 	pmuludq	%xmm4, %xmm1
    00000144: 	pmuludq	%xmm2, %xmm9
    00000149: 	pmuludq	%xmm6, %xmm2
    0000014d: 	pshufd	$0x8, %xmm10, %xmm10
    00000153: 	pshufd	$0x8, %xmm11, %xmm11
    00000159: 	pshufd	$0x8, %xmm1, %xmm1
    0000015e: 	pshufd	$0x8, %xmm9, %xmm9
    00000164: 	pshufd	$0x8, %xmm2, %xmm2
    00000169: 	punpckldq	%xmm9, %xmm11
    0000016e: 	movdqa	%xmm0, %xmm9
    00000173: 	punpckldq	%xmm2, %xmm1
    00000177: 	psrlq	$0x20, %xmm9
    0000017d: 	pmuludq	%xmm5, %xmm0
    00000181: 	pmuludq	%xmm9, %xmm12
    00000186: 	pmuludq	%xmm7, %xmm9
    0000018b: 	pshufd	$0x8, %xmm0, %xmm0
    00000190: 	pshufd	$0x8, %xmm12, %xmm12
    00000196: 	pshufd	$0x8, %xmm9, %xmm9
    0000019c: 	punpckldq	%xmm12, %xmm10
    000001a1: 	punpckldq	%xmm9, %xmm0
    000001a6: 	psubd	%xmm10, %xmm11
    000001ab: 	paddd	%xmm1, %xmm0
    000001af: 	paddd	%xmm11, %xmm3
    000001b4: 	paddd	%xmm0, %xmm8
    000001b9: 	cmpq	%rax, %r13
    000001bc: 	jne	.Ltmp2299 # Offset: 444
    000001c2: 	cvttsd2si	init_value(%rip), %edx
    000001ca: 	movdqa	%xmm8, %xmm0
    000001cf: 	psrldq	$0x8, %xmm0
    000001d4: 	paddd	%xmm0, %xmm8
    000001d9: 	movdqa	%xmm3, %xmm0
    000001dd: 	psrldq	$0x8, %xmm0
    000001e2: 	movl	%edx, %ecx
    000001e4: 	imull	%r15d, %edx
    000001e8: 	paddd	%xmm0, %xmm3
    000001ec: 	imull	%ebp, %ecx
    000001ef: 	movdqa	%xmm3, %xmm0
    000001f3: 	psrldq	$0x4, %xmm0
    000001f8: 	imull	$0x1f40, %edx, %edx
    000001fe: 	paddd	%xmm0, %xmm3
    00000202: 	movdqa	%xmm8, %xmm0
    00000207: 	imull	$0x1f40, %ecx, %ecx
    0000020d: 	psrldq	$0x4, %xmm0
    00000212: 	movd	%xmm3, %eax
    00000216: 	paddd	%xmm0, %xmm8
    0000021b: 	subl	%ecx, %eax
    0000021d: 	movd	%xmm8, %ecx
    00000222: 	subl	%edx, %ecx
    00000224: 	movl	%eax, %edx
    00000226: 	movl	%ecx, %edi
    00000228: 	negl	%edi
    0000022a: 	cmovsl	%ecx, %edi
    0000022d: 	negl	%edx
    0000022f: 	cmovsl	%eax, %edx
    00000232: 	cmpl	%edx, %edi
    00000234: 	jg	.Ltmp2300 # Offset: 564
    0000023a: 	testl	%eax, %eax
    0000023c: 	jne	.Ltmp2301 # Offset: 572
.Ltmp2311:
    00000242: 	addl	$0x1, %r14d
    00000246: 	cmpl	iterations(%rip), %r14d
    0000024d: 	jl	.Ltmp2302 # Offset: 589
.Ltmp2298:
    00000253: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000025a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000261: 	subq	$0x20, %rax
    00000265: 	cmpq	%rax, %rbx
    00000268: 	je	.Ltmp2303 # Offset: 616
    0000026e: 	movq	0x48(%rsp), %rax
    00000273: 	leaq	0x10(%rbx), %rdi
    00000277: 	movq	%rdi, (%rbx)
    0000027a: 	movq	(%rax), %r13
    0000027d: 	movq	0x8(%rax), %r12
    00000281: 	movq	%r13, %rax
    00000284: 	addq	%r12, %rax
    00000287: 	je	.Ltmp2304 # Offset: 647
    00000289: 	testq	%r13, %r13
    0000028c: 	je	.Ltmp2305 # Offset: 652
.Ltmp2304:
    00000292: 	movq	%r12, 0x60(%rsp)
    00000297: 	cmpq	$0xf, %r12
    0000029b: 	ja	.Ltmp2306 # Offset: 667
    000002a1: 	cmpq	$0x1, %r12
    000002a5: 	jne	.Ltmp2307 # Offset: 677
    000002ab: 	movzbl	(%r13), %eax
    000002b0: 	movb	%al, 0x10(%rbx)
.Ltmp2312:
    000002b3: 	movq	%r12, 0x8(%rbx)
    000002b7: 	movb	$0x0, (%rdi,%r12)
    000002bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002c3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ca: 	addq	$0x20, %rax
    000002ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002d5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002dc: 	je	.Ltmp2308 # Offset: 732
.Ltmp2313:
    000002e2: 	movq	-0x20(%rax), %rbp
    000002e6: 	callq	clock@PLT # Offset: 742
    000002eb: 	movq	%rax, end_time(%rip)
    000002f2: 	movq	0x68(%rsp), %rdx
    000002f7: 	subq	%fs:0x28, %rdx
    00000300: 	jne	.Ltmp2309 # Offset: 768
    00000306: 	subq	start_time(%rip), %rax
    0000030d: 	pxor	%xmm0, %xmm0
    00000311: 	movq	%rbp, %rdi
    00000314: 	cvtsi2sd	%rax, %xmm0
    00000319: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000321: 	addq	$0x78, %rsp
    00000325: 	popq	%rbx
    00000326: 	popq	%rbp
    00000327: 	popq	%r12
    00000329: 	popq	%r13
    0000032b: 	popq	%r14
    0000032d: 	popq	%r15
    0000032f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 815
    00000334: 	nopl	(%rax) # Size: 4
.Ltmp2301:
    00000338: 	movl	%edx, %edi
.Ltmp2300:
    0000033a: 	pxor	%xmm0, %xmm0
    0000033e: 	pxor	%xmm3, %xmm3
    00000342: 	pxor	%xmm1, %xmm1
    00000346: 	cltd
    00000347: 	idivl	%edi
    00000349: 	cvtsi2sd	%edi, %xmm1
    0000034d: 	movl	%eax, %esi
    0000034f: 	movl	%ecx, %eax
    00000351: 	cltd
    00000352: 	imull	%esi, %esi
    00000355: 	idivl	%edi
    00000357: 	imull	%eax, %eax
    0000035a: 	addl	%eax, %esi
    0000035c: 	cvtsi2sd	%esi, %xmm0
    00000360: 	ucomisd	%xmm0, %xmm3
    00000364: 	ja	.Ltmp2310 # Offset: 868
    0000036a: 	sqrtsd	%xmm0, %xmm0
.Ltmp2315:
    0000036e: 	mulsd	%xmm0, %xmm1
    00000372: 	cvttsd2si	%xmm1, %eax
    00000376: 	testl	%eax, %eax
    00000378: 	jle	.Ltmp2311 # Offset: 888
    0000037e: 	movl	current_test(%rip), %edx
    00000384: 	movq	%r12, %rsi
    00000387: 	movl	$0x1, %edi
    0000038c: 	xorl	%eax, %eax
    0000038e: 	movaps	%xmm4, 0x30(%rsp)
    00000393: 	movaps	%xmm5, 0x20(%rsp)
    00000398: 	movaps	%xmm7, 0x10(%rsp)
    0000039d: 	movaps	%xmm6, (%rsp)
    000003a1: 	callq	__printf_chk@PLT # Offset: 929
    000003a6: 	movdqa	0x30(%rsp), %xmm4
    000003ac: 	movdqa	0x20(%rsp), %xmm5
    000003b2: 	movdqa	0x10(%rsp), %xmm7
    000003b8: 	movdqa	(%rsp), %xmm6
    000003bd: 	jmp	.Ltmp2311 # Offset: 957
.Ltmp2306:
    000003c2: 	movq	%rbx, %rdi
    000003c5: 	leaq	0x60(%rsp), %rsi
    000003ca: 	xorl	%edx, %edx
    000003cc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 972
    000003d1: 	movq	%rax, (%rbx)
    000003d4: 	movq	%rax, %rdi
    000003d7: 	movq	0x60(%rsp), %rax
    000003dc: 	movq	%rax, 0x10(%rbx)
.Ltmp2314:
    000003e0: 	movq	%r12, %rdx
    000003e3: 	movq	%r13, %rsi
    000003e6: 	callq	memcpy@PLT # Offset: 998
    000003eb: 	movq	0x60(%rsp), %r12
    000003f0: 	movq	(%rbx), %rdi
    000003f3: 	jmp	.Ltmp2312 # Offset: 1011
.Ltmp2303:
    000003f8: 	movq	0x48(%rsp), %rsi
    000003fd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000404: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1028
    00000409: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000410: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000417: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000041e: 	jne	.Ltmp2313 # Offset: 1054
.Ltmp2308:
    00000424: 	movq	-0x8(%rdx), %rax
    00000428: 	addq	$0x200, %rax
    0000042e: 	jmp	.Ltmp2313 # Offset: 1070
.Ltmp2307:
    00000433: 	testq	%r12, %r12
    00000436: 	je	.Ltmp2312 # Offset: 1078
    0000043c: 	jmp	.Ltmp2314 # Offset: 1084
.Ltmp2309:
    0000043e: 	callq	__stack_chk_fail@PLT # Offset: 1086
.Ltmp2305:
    00000443: 	leaq	DATAat0x2b008(%rip), %rdi
    0000044a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1098
    0000044f: 	nop # Size: 1
.Ltmp2310:
    00000450: 	movaps	%xmm4, 0x50(%rsp)
    00000455: 	movaps	%xmm5, 0x30(%rsp)
    0000045a: 	movaps	%xmm7, 0x20(%rsp)
    0000045f: 	movaps	%xmm6, 0x10(%rsp)
    00000464: 	movsd	%xmm1, (%rsp)
    00000469: 	callq	sqrt@PLT # Offset: 1129
    0000046e: 	movdqa	0x50(%rsp), %xmm4
    00000474: 	movsd	(%rsp), %xmm1
    00000479: 	movdqa	0x30(%rsp), %xmm5
    0000047f: 	movdqa	0x20(%rsp), %xmm7
    00000485: 	movdqa	0x10(%rsp), %xmm6
    0000048b: 	jmp	.Ltmp2315 # Offset: 1163
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE33custom_multiply_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable3IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable3IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable3IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 121
  State       : disassembled
  Address     : 0x20eb0
  Size        : 0x7bb
  MaxSize     : 0x7c0
  Offset      : 0x20eb0
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable3IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%r8, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0xf8, %rsp
    00000020: 	movq	%r9, 0xc8(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0xe8(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2316 # Offset: 79
    00000055: 	movl	%r15d, %r10d
    00000058: 	movl	%ebx, %r11d
    0000005b: 	shrq	$0x20, %r15
    0000005f: 	movl	%r13d, %r9d
    00000062: 	shrq	$0x20, %rbx
    00000066: 	movd	%r10d, %xmm7
    0000006b: 	shrq	$0x20, %r13
    0000006f: 	movl	%r12d, %ecx
    00000072: 	movd	%ebx, %xmm6
    00000076: 	pshufd	$0x0, %xmm7, %xmm5
    0000007b: 	movd	%r15d, %xmm7
    00000080: 	xorl	%ebp, %ebp
    00000082: 	pshufd	$0x0, %xmm6, %xmm3
    00000087: 	movd	%r11d, %xmm4
    0000008c: 	pshufd	$0x0, %xmm7, %xmm6
    00000091: 	movq	%r14, %rax
    00000094: 	movd	%r9d, %xmm7
    00000099: 	pshufd	$0x0, %xmm4, %xmm4
    0000009e: 	movaps	%xmm6, (%rsp)
    000000a2: 	shrq	$0x20, %r12
    000000a6: 	pshufd	$0x0, %xmm7, %xmm6
    000000ab: 	movd	%r13d, %xmm7
    000000b0: 	movaps	%xmm4, 0x70(%rsp)
    000000b5: 	movl	%r12d, %r8d
    000000b8: 	psrlq	$0x20, %xmm4
    000000bd: 	movaps	%xmm6, 0x10(%rsp)
    000000c2: 	pshufd	$0x0, %xmm7, %xmm6
    000000c7: 	movd	%ecx, %xmm7
    000000cb: 	movaps	%xmm6, 0x20(%rsp)
    000000d0: 	pshufd	$0x0, %xmm7, %xmm6
    000000d5: 	movd	%r12d, %xmm7
    000000da: 	movl	%r10d, %r12d
    000000dd: 	movaps	%xmm4, 0x60(%rsp)
    000000e2: 	movdqa	%xmm3, %xmm4
    000000e6: 	movaps	%xmm6, 0x30(%rsp)
    000000eb: 	psrlq	$0x20, %xmm4
    000000f0: 	pshufd	$0x0, %xmm7, %xmm6
    000000f5: 	movl	%ebx, 0x9c(%rsp)
    000000fc: 	leaq	0xfa00(%r14), %rbx
    00000103: 	movl	%r13d, %r14d
    00000106: 	movl	%r9d, %r13d
    00000109: 	movaps	%xmm3, 0x80(%rsp)
    00000111: 	movq	%rax, %r9
    00000114: 	movaps	%xmm6, 0x40(%rsp)
    00000119: 	movaps	%xmm4, 0x50(%rsp)
    0000011e: 	nop # Size: 2
.Ltmp2320:
    00000120: 	movdqa	(%rsp), %xmm10
    00000126: 	movdqa	0x10(%rsp), %xmm9
    0000012d: 	pxor	%xmm4, %xmm4
    00000131: 	movdqa	%xmm5, %xmm11
    00000136: 	movdqa	0x20(%rsp), %xmm8
    0000013d: 	movdqa	0x30(%rsp), %xmm7
    00000143: 	movq	%r9, %rax
    00000146: 	movdqa	%xmm4, %xmm3
    0000014a: 	movdqa	0x40(%rsp), %xmm6
    00000150: 	psrlq	$0x20, %xmm11
    00000156: 	psrlq	$0x20, %xmm10
    0000015c: 	psrlq	$0x20, %xmm9
    00000162: 	psrlq	$0x20, %xmm8
    00000168: 	psrlq	$0x20, %xmm7
    0000016d: 	psrlq	$0x20, %xmm6
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2317:
    00000178: 	movdqu	(%rax), %xmm0
    0000017c: 	movdqu	0x10(%rax), %xmm1
    00000181: 	addq	$0x20, %rax
    00000185: 	movdqa	0x60(%rsp), %xmm13
    0000018c: 	movdqa	0x80(%rsp), %xmm14
    00000196: 	movdqa	%xmm0, %xmm2
    0000019a: 	shufps	$0xdd, %xmm1, %xmm0
    0000019e: 	movdqa	%xmm0, %xmm15
    000001a3: 	shufps	$0x88, %xmm1, %xmm2
    000001a7: 	movdqa	0x70(%rsp), %xmm1
    000001ad: 	movdqa	%xmm2, %xmm12
    000001b2: 	psrlq	$0x20, %xmm15
    000001b8: 	psrlq	$0x20, %xmm12
    000001be: 	pmuludq	%xmm0, %xmm14
    000001c3: 	pmuludq	0x70(%rsp), %xmm0
    000001c9: 	pshufd	$0x8, %xmm0, %xmm0
    000001ce: 	pmuludq	%xmm2, %xmm1
    000001d2: 	pmuludq	%xmm12, %xmm13
    000001d7: 	pmuludq	0x50(%rsp), %xmm12
    000001de: 	pmuludq	0x80(%rsp), %xmm2
    000001e7: 	pshufd	$0x8, %xmm12, %xmm12
    000001ed: 	pshufd	$0x8, %xmm2, %xmm2
    000001f2: 	punpckldq	%xmm12, %xmm2
    000001f7: 	pshufd	$0x8, %xmm14, %xmm14
    000001fd: 	pshufd	$0x8, %xmm13, %xmm13
    00000203: 	pshufd	$0x8, %xmm1, %xmm1
    00000208: 	punpckldq	%xmm13, %xmm1
    0000020d: 	movdqa	%xmm15, %xmm13
    00000212: 	movdqa	0x50(%rsp), %xmm15
    00000219: 	pmuludq	%xmm13, %xmm15
    0000021e: 	pmuludq	0x60(%rsp), %xmm13
    00000225: 	pshufd	$0x8, %xmm13, %xmm13
    0000022b: 	punpckldq	%xmm13, %xmm0
    00000230: 	movdqa	%xmm11, %xmm13
    00000235: 	paddd	%xmm2, %xmm0
    00000239: 	movdqa	%xmm5, %xmm2
    0000023d: 	pshufd	$0x8, %xmm15, %xmm15
    00000243: 	punpckldq	%xmm15, %xmm14
    00000248: 	movdqa	%xmm10, %xmm15
    0000024d: 	psubd	%xmm14, %xmm1
    00000252: 	movdqa	(%rsp), %xmm14
    00000258: 	movdqa	%xmm1, %xmm12
    0000025d: 	pmuludq	%xmm1, %xmm2
    00000261: 	pmuludq	(%rsp), %xmm1
    00000266: 	pshufd	$0x8, %xmm1, %xmm1
    0000026b: 	psrlq	$0x20, %xmm12
    00000271: 	pmuludq	%xmm0, %xmm14
    00000276: 	pmuludq	%xmm12, %xmm13
    0000027b: 	pmuludq	%xmm10, %xmm12
    00000280: 	pshufd	$0x8, %xmm2, %xmm2
    00000285: 	pshufd	$0x8, %xmm14, %xmm14
    0000028b: 	pshufd	$0x8, %xmm13, %xmm13
    00000291: 	pshufd	$0x8, %xmm12, %xmm12
    00000297: 	punpckldq	%xmm13, %xmm2
    0000029c: 	movdqa	%xmm0, %xmm13
    000002a1: 	punpckldq	%xmm12, %xmm1
    000002a6: 	psrlq	$0x20, %xmm13
    000002ac: 	pmuludq	%xmm5, %xmm0
    000002b0: 	pmuludq	%xmm13, %xmm15
    000002b5: 	pmuludq	%xmm11, %xmm13
    000002ba: 	pshufd	$0x8, %xmm0, %xmm0
    000002bf: 	pshufd	$0x8, %xmm15, %xmm15
    000002c5: 	pshufd	$0x8, %xmm13, %xmm13
    000002cb: 	punpckldq	%xmm15, %xmm14
    000002d0: 	punpckldq	%xmm13, %xmm0
    000002d5: 	movdqa	%xmm9, %xmm13
    000002da: 	psubd	%xmm14, %xmm2
    000002df: 	paddd	%xmm1, %xmm0
    000002e3: 	movdqa	0x10(%rsp), %xmm1
    000002e9: 	movdqa	0x20(%rsp), %xmm14
    000002f0: 	movdqa	%xmm2, %xmm12
    000002f5: 	movdqa	%xmm8, %xmm15
    000002fa: 	psrlq	$0x20, %xmm12
    00000300: 	pmuludq	%xmm2, %xmm1
    00000304: 	pmuludq	0x20(%rsp), %xmm2
    0000030a: 	pshufd	$0x8, %xmm2, %xmm2
    0000030f: 	pmuludq	%xmm12, %xmm13
    00000314: 	pmuludq	%xmm0, %xmm14
    00000319: 	pmuludq	%xmm8, %xmm12
    0000031e: 	pshufd	$0x8, %xmm1, %xmm1
    00000323: 	pshufd	$0x8, %xmm13, %xmm13
    00000329: 	pshufd	$0x8, %xmm14, %xmm14
    0000032f: 	punpckldq	%xmm13, %xmm1
    00000334: 	movdqa	%xmm0, %xmm13
    00000339: 	pshufd	$0x8, %xmm12, %xmm12
    0000033f: 	pmuludq	0x10(%rsp), %xmm0
    00000345: 	psrlq	$0x20, %xmm13
    0000034b: 	pshufd	$0x8, %xmm0, %xmm0
    00000350: 	punpckldq	%xmm12, %xmm2
    00000355: 	pmuludq	%xmm13, %xmm15
    0000035a: 	pmuludq	%xmm9, %xmm13
    0000035f: 	pshufd	$0x8, %xmm15, %xmm15
    00000365: 	pshufd	$0x8, %xmm13, %xmm13
    0000036b: 	punpckldq	%xmm15, %xmm14
    00000370: 	punpckldq	%xmm13, %xmm0
    00000375: 	movdqa	%xmm7, %xmm13
    0000037a: 	psubd	%xmm14, %xmm1
    0000037f: 	paddd	%xmm2, %xmm0
    00000383: 	movdqa	0x30(%rsp), %xmm2
    00000389: 	movdqa	0x40(%rsp), %xmm14
    00000390: 	movdqa	%xmm1, %xmm12
    00000395: 	movdqa	%xmm6, %xmm15
    0000039a: 	psrlq	$0x20, %xmm12
    000003a0: 	pmuludq	%xmm1, %xmm2
    000003a4: 	pmuludq	0x40(%rsp), %xmm1
    000003aa: 	pshufd	$0x8, %xmm1, %xmm1
    000003af: 	pmuludq	%xmm12, %xmm13
    000003b4: 	pmuludq	%xmm0, %xmm14
    000003b9: 	pmuludq	%xmm6, %xmm12
    000003be: 	pshufd	$0x8, %xmm2, %xmm2
    000003c3: 	pshufd	$0x8, %xmm13, %xmm13
    000003c9: 	pshufd	$0x8, %xmm14, %xmm14
    000003cf: 	punpckldq	%xmm13, %xmm2
    000003d4: 	movdqa	%xmm0, %xmm13
    000003d9: 	pshufd	$0x8, %xmm12, %xmm12
    000003df: 	pmuludq	0x30(%rsp), %xmm0
    000003e5: 	psrlq	$0x20, %xmm13
    000003eb: 	pshufd	$0x8, %xmm0, %xmm0
    000003f0: 	punpckldq	%xmm12, %xmm1
    000003f5: 	pmuludq	%xmm13, %xmm15
    000003fa: 	pmuludq	%xmm7, %xmm13
    000003ff: 	pshufd	$0x8, %xmm15, %xmm15
    00000405: 	pshufd	$0x8, %xmm13, %xmm13
    0000040b: 	punpckldq	%xmm15, %xmm14
    00000410: 	punpckldq	%xmm13, %xmm0
    00000415: 	psubd	%xmm14, %xmm2
    0000041a: 	paddd	%xmm1, %xmm0
    0000041e: 	paddd	%xmm2, %xmm3
    00000422: 	paddd	%xmm0, %xmm4
    00000426: 	cmpq	%rax, %rbx
    00000429: 	jne	.Ltmp2317 # Offset: 1065
    0000042f: 	cvttsd2si	init_value(%rip), %esi
    00000437: 	movdqa	%xmm3, %xmm1
    0000043b: 	movdqa	%xmm4, %xmm0
    0000043f: 	psrldq	$0x8, %xmm1
    00000444: 	psrldq	$0x8, %xmm0
    00000449: 	paddd	%xmm1, %xmm3
    0000044d: 	paddd	%xmm4, %xmm0
    00000451: 	movdqa	%xmm3, %xmm1
    00000455: 	movl	%esi, %eax
    00000457: 	imull	0x9c(%rsp), %esi
    0000045f: 	imull	%r11d, %eax
    00000463: 	psrldq	$0x4, %xmm1
    00000468: 	paddd	%xmm1, %xmm3
    0000046c: 	movdqa	%xmm0, %xmm1
    00000470: 	movl	%esi, %edi
    00000472: 	imull	%r12d, %esi
    00000476: 	imull	%r15d, %edi
    0000047a: 	psrldq	$0x4, %xmm1
    0000047f: 	movl	%eax, %edx
    00000481: 	imull	%r12d, %edx
    00000485: 	paddd	%xmm1, %xmm0
    00000489: 	imull	%r15d, %eax
    0000048d: 	subl	%edi, %edx
    0000048f: 	addl	%esi, %eax
    00000491: 	movl	%edx, %edi
    00000493: 	movl	%eax, %esi
    00000495: 	imull	%r13d, %edi
    00000499: 	imull	%r14d, %esi
    0000049d: 	imull	%r13d, %eax
    000004a1: 	imull	%r14d, %edx
    000004a5: 	subl	%esi, %edi
    000004a7: 	movl	%edi, %esi
    000004a9: 	imull	%r8d, %edi
    000004ad: 	addl	%eax, %edx
    000004af: 	imull	%ecx, %esi
    000004b2: 	movd	%xmm3, %eax
    000004b6: 	movl	%edx, %r10d
    000004b9: 	imull	%ecx, %edx
    000004bc: 	imull	%r8d, %r10d
    000004c0: 	addl	%edx, %edi
    000004c2: 	subl	%r10d, %esi
    000004c5: 	imull	$0x1f40, %edi, %edi
    000004cb: 	imull	$0x1f40, %esi, %esi
    000004d1: 	subl	%esi, %eax
    000004d3: 	movd	%xmm0, %esi
    000004d7: 	subl	%edi, %esi
    000004d9: 	movl	%eax, %edx
    000004db: 	movl	%esi, %edi
    000004dd: 	negl	%edi
    000004df: 	cmovsl	%esi, %edi
    000004e2: 	negl	%edx
    000004e4: 	cmovsl	%eax, %edx
    000004e7: 	cmpl	%edx, %edi
    000004e9: 	jg	.Ltmp2318 # Offset: 1257
    000004ef: 	testl	%eax, %eax
    000004f1: 	jne	.Ltmp2319 # Offset: 1265
.Ltmp2329:
    000004f7: 	addl	$0x1, %ebp
    000004fa: 	cmpl	iterations(%rip), %ebp
    00000500: 	jl	.Ltmp2320 # Offset: 1280
.Ltmp2316:
    00000506: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000050d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000514: 	subq	$0x20, %rax
    00000518: 	cmpq	%rax, %rbx
    0000051b: 	je	.Ltmp2321 # Offset: 1307
    00000521: 	movq	0xc8(%rsp), %rax
    00000529: 	leaq	0x10(%rbx), %rdi
    0000052d: 	movq	%rdi, (%rbx)
    00000530: 	movq	(%rax), %rbp
    00000533: 	movq	0x8(%rax), %r12
    00000537: 	movq	%rbp, %rax
    0000053a: 	addq	%r12, %rax
    0000053d: 	je	.Ltmp2322 # Offset: 1341
    0000053f: 	testq	%rbp, %rbp
    00000542: 	je	.Ltmp2323 # Offset: 1346
.Ltmp2322:
    00000548: 	movq	%r12, 0xe0(%rsp)
    00000550: 	cmpq	$0xf, %r12
    00000554: 	ja	.Ltmp2324 # Offset: 1364
    0000055a: 	cmpq	$0x1, %r12
    0000055e: 	jne	.Ltmp2325 # Offset: 1374
    00000564: 	movzbl	(%rbp), %eax
    00000568: 	movb	%al, 0x10(%rbx)
.Ltmp2330:
    0000056b: 	movq	%r12, 0x8(%rbx)
    0000056f: 	movb	$0x0, (%rdi,%r12)
    00000574: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000057b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000582: 	addq	$0x20, %rax
    00000586: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000058d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000594: 	je	.Ltmp2326 # Offset: 1428
.Ltmp2331:
    0000059a: 	movq	-0x20(%rax), %rbp
    0000059e: 	callq	clock@PLT # Offset: 1438
    000005a3: 	movq	%rax, end_time(%rip)
    000005aa: 	movq	0xe8(%rsp), %rdx
    000005b2: 	subq	%fs:0x28, %rdx
    000005bb: 	jne	.Ltmp2327 # Offset: 1467
    000005c1: 	subq	start_time(%rip), %rax
    000005c8: 	pxor	%xmm0, %xmm0
    000005cc: 	movq	%rbp, %rdi
    000005cf: 	cvtsi2sd	%rax, %xmm0
    000005d4: 	divsd	DATAat0x2b628(%rip), %xmm0
    000005dc: 	addq	$0xf8, %rsp
    000005e3: 	popq	%rbx
    000005e4: 	popq	%rbp
    000005e5: 	popq	%r12
    000005e7: 	popq	%r13
    000005e9: 	popq	%r14
    000005eb: 	popq	%r15
    000005ed: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1517
    000005f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2319:
    000005f8: 	movl	%edx, %edi
.Ltmp2318:
    000005fa: 	pxor	%xmm0, %xmm0
    000005fe: 	pxor	%xmm4, %xmm4
    00000602: 	pxor	%xmm1, %xmm1
    00000606: 	cltd
    00000607: 	idivl	%edi
    00000609: 	cvtsi2sd	%edi, %xmm1
    0000060d: 	movl	%eax, %r10d
    00000610: 	movl	%esi, %eax
    00000612: 	cltd
    00000613: 	idivl	%edi
    00000615: 	movl	%eax, %esi
    00000617: 	movl	%r10d, %eax
    0000061a: 	imull	%r10d, %eax
    0000061e: 	imull	%esi, %esi
    00000621: 	addl	%esi, %eax
    00000623: 	cvtsi2sd	%eax, %xmm0
    00000627: 	ucomisd	%xmm0, %xmm4
    0000062b: 	ja	.Ltmp2328 # Offset: 1579
    00000631: 	sqrtsd	%xmm0, %xmm0
.Ltmp2333:
    00000635: 	mulsd	%xmm0, %xmm1
    00000639: 	cvttsd2si	%xmm1, %eax
    0000063d: 	testl	%eax, %eax
    0000063f: 	jle	.Ltmp2329 # Offset: 1599
    00000645: 	movl	current_test(%rip), %edx
    0000064b: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00000652: 	movl	$0x1, %edi
    00000657: 	xorl	%eax, %eax
    00000659: 	movq	%r9, 0xc0(%rsp)
    00000661: 	movl	%r8d, 0xac(%rsp)
    00000669: 	movl	%ecx, 0xa8(%rsp)
    00000670: 	movl	%r11d, 0xa0(%rsp)
    00000678: 	movaps	%xmm5, 0xb0(%rsp)
    00000680: 	callq	__printf_chk@PLT # Offset: 1664
    00000685: 	movq	0xc0(%rsp), %r9
    0000068d: 	movdqa	0xb0(%rsp), %xmm5
    00000696: 	movl	0xac(%rsp), %r8d
    0000069e: 	movl	0xa8(%rsp), %ecx
    000006a5: 	movl	0xa0(%rsp), %r11d
    000006ad: 	jmp	.Ltmp2329 # Offset: 1709
.Ltmp2324:
    000006b2: 	movq	%rbx, %rdi
    000006b5: 	leaq	0xe0(%rsp), %rsi
    000006bd: 	xorl	%edx, %edx
    000006bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1727
    000006c4: 	movq	%rax, (%rbx)
    000006c7: 	movq	%rax, %rdi
    000006ca: 	movq	0xe0(%rsp), %rax
    000006d2: 	movq	%rax, 0x10(%rbx)
.Ltmp2332:
    000006d6: 	movq	%r12, %rdx
    000006d9: 	movq	%rbp, %rsi
    000006dc: 	callq	memcpy@PLT # Offset: 1756
    000006e1: 	movq	0xe0(%rsp), %r12
    000006e9: 	movq	(%rbx), %rdi
    000006ec: 	jmp	.Ltmp2330 # Offset: 1772
.Ltmp2321:
    000006f1: 	movq	0xc8(%rsp), %rsi
    000006f9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000700: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1792
    00000705: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000070c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000713: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000071a: 	jne	.Ltmp2331 # Offset: 1818
.Ltmp2326:
    00000720: 	movq	-0x8(%rdx), %rax
    00000724: 	addq	$0x200, %rax
    0000072a: 	jmp	.Ltmp2331 # Offset: 1834
.Ltmp2325:
    0000072f: 	testq	%r12, %r12
    00000732: 	je	.Ltmp2330 # Offset: 1842
    00000738: 	jmp	.Ltmp2332 # Offset: 1848
.Ltmp2327:
    0000073a: 	callq	__stack_chk_fail@PLT # Offset: 1850
.Ltmp2323:
    0000073f: 	leaq	DATAat0x2b008(%rip), %rdi
    00000746: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1862
    0000074b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2328:
    00000750: 	movq	%r9, 0xb0(%rsp)
    00000758: 	movl	%r8d, 0xc0(%rsp)
    00000760: 	movl	%ecx, 0xac(%rsp)
    00000767: 	movl	%r11d, 0xa8(%rsp)
    0000076f: 	movaps	%xmm5, 0xd0(%rsp)
    00000777: 	movsd	%xmm1, 0xa0(%rsp)
    00000780: 	callq	sqrt@PLT # Offset: 1920
    00000785: 	movq	0xb0(%rsp), %r9
    0000078d: 	movdqa	0xd0(%rsp), %xmm5
    00000796: 	movl	0xc0(%rsp), %r8d
    0000079e: 	movl	0xac(%rsp), %ecx
    000007a5: 	movl	0xa8(%rsp), %r11d
    000007ad: 	movsd	0xa0(%rsp), %xmm1
    000007b6: 	jmp	.Ltmp2333 # Offset: 1974
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable3IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z14test_variable4ISt7complexIiE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 122
  State       : disassembled
  Address     : 0x21670
  Size        : 0x3cf
  MaxSize     : 0x3d0
  Offset      : 0x21670
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x48, %rsp
    0000001d: 	movq	%r9, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x38(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2334 # Offset: 70
    0000004c: 	movq	%r12, %rcx
    0000004f: 	movl	%r12d, %eax
    00000052: 	movq	%r15, %rsi
    00000055: 	movl	%r15d, %edx
    00000058: 	sarq	$0x20, %rcx
    0000005c: 	imull	%r12d, %eax
    00000060: 	sarq	$0x20, %rsi
    00000064: 	movq	%r14, %r9
    00000067: 	movl	%ecx, %r8d
    0000006a: 	imull	%ecx, %edx
    0000006d: 	sarq	$0x20, %r9
    00000071: 	imull	%ecx, %r8d
    00000075: 	addl	%eax, %r8d
    00000078: 	movl	%r12d, %eax
    0000007b: 	imull	%esi, %eax
    0000007e: 	subl	%edx, %eax
    00000080: 	cltd
    00000081: 	idivl	%r8d
    00000084: 	movl	%ecx, %edx
    00000086: 	imull	%esi, %edx
    00000089: 	movl	%r12d, %esi
    0000008c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000093: 	imull	%r15d, %esi
    00000097: 	movl	%eax, %edi
    00000099: 	leal	(%rdx,%rsi), %eax
    0000009c: 	cltd
    0000009d: 	idivl	%r8d
    000000a0: 	movl	%r14d, %r8d
    000000a3: 	imull	%r14d, %r8d
    000000a7: 	movl	%eax, %ecx
    000000a9: 	movl	%r9d, %eax
    000000ac: 	imull	%r9d, %eax
    000000b0: 	movl	%ecx, %edx
    000000b2: 	imull	%r9d, %edx
    000000b6: 	imull	%r14d, %ecx
    000000ba: 	addl	%eax, %r8d
    000000bd: 	movl	%edi, %eax
    000000bf: 	imull	%r14d, %eax
    000000c3: 	imull	%r9d, %edi
    000000c7: 	movq	%r13, %r9
    000000ca: 	sarq	$0x20, %r9
    000000ce: 	subl	%edx, %eax
    000000d0: 	cltd
    000000d1: 	addl	%edi, %ecx
    000000d3: 	idivl	%r8d
    000000d6: 	movl	%eax, %esi
    000000d8: 	movl	%ecx, %eax
    000000da: 	cltd
    000000db: 	idivl	%r8d
    000000de: 	movl	%r13d, %r8d
    000000e1: 	imull	%r13d, %r8d
    000000e5: 	movl	%eax, %ecx
    000000e7: 	movl	%r9d, %eax
    000000ea: 	imull	%r9d, %eax
    000000ee: 	movl	%ecx, %edx
    000000f0: 	addl	%eax, %r8d
    000000f3: 	movl	%esi, %eax
    000000f5: 	imull	%r13d, %eax
    000000f9: 	xorl	%r15d, %r15d
    000000fc: 	imull	%r9d, %edx
    00000100: 	imull	%r13d, %ecx
    00000104: 	leaq	0xfa00(%rbx), %r13
    0000010b: 	imull	%r9d, %esi
    0000010f: 	subl	%edx, %eax
    00000111: 	cltd
    00000112: 	idivl	%r8d
    00000115: 	leal	(%rcx,%rsi), %r14d
    00000119: 	movl	%eax, %edi
    0000011b: 	movl	%r14d, %eax
    0000011e: 	cltd
    0000011f: 	imull	$0x1f40, %edi, %ebp
    00000125: 	movd	%edi, %xmm4
    00000129: 	idivl	%r8d
    0000012c: 	movd	%eax, %xmm2
    00000130: 	movl	%eax, %r14d
    00000133: 	punpckldq	%xmm4, %xmm2
    00000137: 	punpcklqdq	%xmm2, %xmm2
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2338:
    00000140: 	movq	%rbx, %rdx
    00000143: 	pxor	%xmm1, %xmm1
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2335:
    00000150: 	movdqu	(%rdx), %xmm0
    00000154: 	addq	$0x10, %rdx
    00000158: 	paddd	%xmm2, %xmm0
    0000015c: 	paddd	%xmm0, %xmm1
    00000160: 	cmpq	%r13, %rdx
    00000163: 	jne	.Ltmp2335 # Offset: 355
    00000165: 	movdqa	%xmm1, %xmm0
    00000169: 	movd	%xmm1, %edx
    0000016d: 	punpckhdq	%xmm1, %xmm0
    00000171: 	movd	%xmm0, %eax
    00000175: 	pshufd	$0xff, %xmm1, %xmm0
    0000017a: 	pshufd	$0x55, %xmm1, %xmm1
    0000017f: 	addl	%edx, %eax
    00000181: 	cvttsd2si	init_value(%rip), %edx
    00000189: 	movd	%xmm0, %ecx
    0000018d: 	addl	%r14d, %edx
    00000190: 	imull	$0x1f40, %edx, %edx
    00000196: 	subl	%edx, %eax
    00000198: 	movd	%xmm1, %edx
    0000019c: 	addl	%edx, %ecx
    0000019e: 	movl	%eax, %edx
    000001a0: 	subl	%ebp, %ecx
    000001a2: 	movl	%ecx, %edi
    000001a4: 	negl	%edi
    000001a6: 	cmovsl	%ecx, %edi
    000001a9: 	negl	%edx
    000001ab: 	cmovsl	%eax, %edx
    000001ae: 	cmpl	%edx, %edi
    000001b0: 	jg	.Ltmp2336 # Offset: 432
    000001b6: 	testl	%eax, %eax
    000001b8: 	jne	.Ltmp2337 # Offset: 440
.Ltmp2347:
    000001be: 	addl	$0x1, %r15d
    000001c2: 	cmpl	iterations(%rip), %r15d
    000001c9: 	jl	.Ltmp2338 # Offset: 457
.Ltmp2334:
    000001cf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001dd: 	subq	$0x20, %rax
    000001e1: 	cmpq	%rax, %rbx
    000001e4: 	je	.Ltmp2339 # Offset: 484
    000001ea: 	movq	0x18(%rsp), %rax
    000001ef: 	leaq	0x10(%rbx), %rdi
    000001f3: 	movq	%rdi, (%rbx)
    000001f6: 	movq	(%rax), %r13
    000001f9: 	movq	0x8(%rax), %r12
    000001fd: 	movq	%r13, %rax
    00000200: 	addq	%r12, %rax
    00000203: 	je	.Ltmp2340 # Offset: 515
    00000205: 	testq	%r13, %r13
    00000208: 	je	.Ltmp2341 # Offset: 520
.Ltmp2340:
    0000020e: 	movq	%r12, 0x30(%rsp)
    00000213: 	cmpq	$0xf, %r12
    00000217: 	ja	.Ltmp2342 # Offset: 535
    0000021d: 	cmpq	$0x1, %r12
    00000221: 	jne	.Ltmp2343 # Offset: 545
    00000227: 	movzbl	(%r13), %eax
    0000022c: 	movb	%al, 0x10(%rbx)
.Ltmp2348:
    0000022f: 	movq	%r12, 0x8(%rbx)
    00000233: 	movb	$0x0, (%rdi,%r12)
    00000238: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000246: 	addq	$0x20, %rax
    0000024a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000251: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000258: 	je	.Ltmp2344 # Offset: 600
.Ltmp2349:
    0000025e: 	movq	-0x20(%rax), %rbp
    00000262: 	callq	clock@PLT # Offset: 610
    00000267: 	movq	%rax, end_time(%rip)
    0000026e: 	movq	0x38(%rsp), %rdx
    00000273: 	subq	%fs:0x28, %rdx
    0000027c: 	jne	.Ltmp2345 # Offset: 636
    00000282: 	subq	start_time(%rip), %rax
    00000289: 	pxor	%xmm0, %xmm0
    0000028d: 	movq	%rbp, %rdi
    00000290: 	cvtsi2sd	%rax, %xmm0
    00000295: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000029d: 	addq	$0x48, %rsp
    000002a1: 	popq	%rbx
    000002a2: 	popq	%rbp
    000002a3: 	popq	%r12
    000002a5: 	popq	%r13
    000002a7: 	popq	%r14
    000002a9: 	popq	%r15
    000002ab: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 683
.Ltmp2337:
    000002b0: 	movl	%edx, %edi
.Ltmp2336:
    000002b2: 	pxor	%xmm0, %xmm0
    000002b6: 	pxor	%xmm3, %xmm3
    000002ba: 	pxor	%xmm1, %xmm1
    000002be: 	cltd
    000002bf: 	idivl	%edi
    000002c1: 	cvtsi2sd	%edi, %xmm1
    000002c5: 	movl	%eax, %esi
    000002c7: 	movl	%ecx, %eax
    000002c9: 	cltd
    000002ca: 	imull	%esi, %esi
    000002cd: 	idivl	%edi
    000002cf: 	imull	%eax, %eax
    000002d2: 	addl	%eax, %esi
    000002d4: 	cvtsi2sd	%esi, %xmm0
    000002d8: 	ucomisd	%xmm0, %xmm3
    000002dc: 	ja	.Ltmp2346 # Offset: 732
    000002e2: 	sqrtsd	%xmm0, %xmm0
.Ltmp2351:
    000002e6: 	mulsd	%xmm0, %xmm1
    000002ea: 	cvttsd2si	%xmm1, %eax
    000002ee: 	testl	%eax, %eax
    000002f0: 	jle	.Ltmp2347 # Offset: 752
    000002f6: 	movl	current_test(%rip), %edx
    000002fc: 	movq	%r12, %rsi
    000002ff: 	movl	$0x1, %edi
    00000304: 	xorl	%eax, %eax
    00000306: 	movaps	%xmm2, (%rsp)
    0000030a: 	callq	__printf_chk@PLT # Offset: 778
    0000030f: 	movdqa	(%rsp), %xmm2
    00000314: 	jmp	.Ltmp2347 # Offset: 788
.Ltmp2342:
    00000319: 	movq	%rbx, %rdi
    0000031c: 	leaq	0x30(%rsp), %rsi
    00000321: 	xorl	%edx, %edx
    00000323: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 803
    00000328: 	movq	%rax, (%rbx)
    0000032b: 	movq	%rax, %rdi
    0000032e: 	movq	0x30(%rsp), %rax
    00000333: 	movq	%rax, 0x10(%rbx)
.Ltmp2350:
    00000337: 	movq	%r12, %rdx
    0000033a: 	movq	%r13, %rsi
    0000033d: 	callq	memcpy@PLT # Offset: 829
    00000342: 	movq	0x30(%rsp), %r12
    00000347: 	movq	(%rbx), %rdi
    0000034a: 	jmp	.Ltmp2348 # Offset: 842
.Ltmp2339:
    0000034f: 	movq	0x18(%rsp), %rsi
    00000354: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000035b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 859
    00000360: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000367: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000036e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000375: 	jne	.Ltmp2349 # Offset: 885
.Ltmp2344:
    0000037b: 	movq	-0x8(%rdx), %rax
    0000037f: 	addq	$0x200, %rax
    00000385: 	jmp	.Ltmp2349 # Offset: 901
.Ltmp2343:
    0000038a: 	testq	%r12, %r12
    0000038d: 	je	.Ltmp2348 # Offset: 909
    00000393: 	jmp	.Ltmp2350 # Offset: 915
.Ltmp2345:
    00000395: 	callq	__stack_chk_fail@PLT # Offset: 917
.Ltmp2341:
    0000039a: 	leaq	DATAat0x2b008(%rip), %rdi
    000003a1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 929
    000003a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2346:
    000003b0: 	movaps	%xmm2, 0x20(%rsp)
    000003b5: 	movsd	%xmm1, (%rsp)
    000003ba: 	callq	sqrt@PLT # Offset: 954
    000003bf: 	movdqa	0x20(%rsp), %xmm2
    000003c5: 	movsd	(%rsp), %xmm1
    000003ca: 	jmp	.Ltmp2351 # Offset: 970
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z14test_variable4ISt7complexIlE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x21a40
  Size        : 0x439
  MaxSize     : 0x440
  Offset      : 0x21a40
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIlE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%r8, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x58, %rsp
    0000001b: 	movq	%rcx, 0x30(%rsp)
    00000020: 	movq	0xb0(%rsp), %rax
    00000028: 	movq	0x90(%rsp), %rcx
    00000030: 	movq	0x98(%rsp), %r11
    00000038: 	movq	%rdx, 0x38(%rsp)
    0000003d: 	movq	%r9, 0x20(%rsp)
    00000042: 	movq	0xa0(%rsp), %rbx
    0000004a: 	movq	%rcx, (%rsp)
    0000004e: 	movq	0xa8(%rsp), %r15
    00000056: 	movq	%r11, 0x10(%rsp)
    0000005b: 	movq	%rax, 0x18(%rsp)
    00000060: 	movq	%fs:0x28, %rax
    00000069: 	movq	%rax, 0x48(%rsp)
    0000006e: 	xorl	%eax, %eax
    00000070: 	callq	clock@PLT # Offset: 112
    00000075: 	movl	iterations(%rip), %ebp
    0000007b: 	movq	%rax, start_time(%rip)
    00000082: 	testl	%ebp, %ebp
    00000084: 	jle	.Ltmp2352 # Offset: 132
    0000008a: 	movq	0x20(%rsp), %r9
    0000008f: 	movq	%r12, %rdx
    00000092: 	movq	0x38(%rsp), %rdi
    00000097: 	imulq	%r12, %rdx
    0000009b: 	movq	0x30(%rsp), %r10
    000000a0: 	movq	(%rsp), %rcx
    000000a4: 	movq	%r9, %rax
    000000a7: 	movq	0x10(%rsp), %r11
    000000ac: 	imulq	%r9, %rax
    000000b0: 	leaq	(%rdx,%rax), %r8
    000000b4: 	movq	%r12, %rax
    000000b7: 	movq	%rdi, %rdx
    000000ba: 	imulq	%r9, %rdx
    000000be: 	imulq	%r10, %rax
    000000c2: 	imulq	%rdi, %r12
    000000c6: 	imulq	%r10, %r9
    000000ca: 	subq	%rdx, %rax
    000000cd: 	cqto
    000000cf: 	idivq	%r8
    000000d2: 	movq	%rax, %rsi
    000000d5: 	leaq	(%r12,%r9), %rax
    000000d9: 	movq	%rcx, %r9
    000000dc: 	cqto
    000000de: 	imulq	%rcx, %r9
    000000e2: 	idivq	%r8
    000000e5: 	movq	%r11, %rdx
    000000e8: 	movq	%r15, %r8
    000000eb: 	movq	%rax, %r10
    000000ee: 	movq	%r11, %rax
    000000f1: 	imulq	%r11, %rax
    000000f5: 	imulq	%r10, %rdx
    000000f9: 	imulq	%rsi, %r11
    000000fd: 	addq	%rax, %r9
    00000100: 	movq	%rcx, %rax
    00000103: 	imulq	%rsi, %rax
    00000107: 	imulq	%r10, %rcx
    0000010b: 	movq	%rbx, %r10
    0000010e: 	imulq	%rbx, %r10
    00000112: 	subq	%rdx, %rax
    00000115: 	cqto
    00000117: 	addq	%r11, %rcx
    0000011a: 	idivq	%r9
    0000011d: 	movq	%rax, %rdi
    00000120: 	movq	%rcx, %rax
    00000123: 	cqto
    00000125: 	idivq	%r9
    00000128: 	movq	%r15, %rdx
    0000012b: 	movq	%rax, %rcx
    0000012e: 	movq	%r15, %rax
    00000131: 	imulq	%r15, %rax
    00000135: 	imulq	%rcx, %rdx
    00000139: 	addq	%rax, %r10
    0000013c: 	movq	%rbx, %rax
    0000013f: 	imulq	%rdi, %rax
    00000143: 	subq	%rdx, %rax
    00000146: 	cqto
    00000148: 	idivq	%r10
    0000014b: 	imulq	%rcx, %rbx
    0000014f: 	imulq	%rdi, %r8
    00000153: 	movq	%rax, %rsi
    00000156: 	leaq	(%rbx,%r8), %rax
    0000015a: 	xorl	%ebx, %ebx
    0000015c: 	cqto
    0000015e: 	movq	%rsi, %xmm5
    00000163: 	idivq	%r10
    00000166: 	imulq	$0x1f40, %rsi, %r10
    0000016d: 	movq	%rax, %r15
    00000170: 	leal	-0x1(%r14), %eax
    00000174: 	shlq	$0x4, %rax
    00000178: 	movq	%r15, %xmm2
    0000017d: 	leaq	0x10(%r13,%rax), %r12
    00000182: 	punpcklqdq	%xmm5, %xmm2
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2357:
    00000190: 	movq	%r13, %rdx
    00000193: 	pxor	%xmm1, %xmm1
    00000197: 	xorl	%eax, %eax
    00000199: 	xorl	%ecx, %ecx
    0000019b: 	testl	%r14d, %r14d
    0000019e: 	jle	.Ltmp2353 # Offset: 414
.Ltmp2354:
    000001a0: 	movdqu	(%rdx), %xmm0
    000001a4: 	addq	$0x10, %rdx
    000001a8: 	paddq	%xmm2, %xmm0
    000001ac: 	paddq	%xmm0, %xmm1
    000001b0: 	cmpq	%rdx, %r12
    000001b3: 	jne	.Ltmp2354 # Offset: 435
    000001b5: 	movhlps	%xmm1, %xmm3
    000001b8: 	movq	%xmm1, %rax
    000001bd: 	movq	%xmm3, %rcx
.Ltmp2353:
    000001c2: 	cvttsd2si	init_value(%rip), %rdx
    000001cb: 	subq	%r10, %rcx
    000001ce: 	movq	%rcx, %rsi
    000001d1: 	addq	%r15, %rdx
    000001d4: 	imulq	$0x1f40, %rdx, %rdx
    000001db: 	subq	%rdx, %rax
    000001de: 	negq	%rsi
    000001e1: 	movq	%rax, %rdx
    000001e4: 	cmovsq	%rcx, %rsi
    000001e8: 	negq	%rdx
    000001eb: 	cmovsq	%rax, %rdx
    000001ef: 	cmpq	%rdx, %rsi
    000001f2: 	jg	.Ltmp2355 # Offset: 498
    000001f8: 	testq	%rax, %rax
    000001fb: 	jne	.Ltmp2356 # Offset: 507
    00000201: 	movl	iterations(%rip), %ebp
.Ltmp2366:
    00000207: 	addl	$0x1, %ebx
    0000020a: 	cmpl	%ebp, %ebx
    0000020c: 	jl	.Ltmp2357 # Offset: 524
.Ltmp2352:
    0000020e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000215: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021c: 	subq	$0x20, %rax
    00000220: 	cmpq	%rax, %rbx
    00000223: 	je	.Ltmp2358 # Offset: 547
    00000229: 	movq	0x18(%rsp), %rax
    0000022e: 	leaq	0x10(%rbx), %rdi
    00000232: 	movq	%rdi, (%rbx)
    00000235: 	movq	(%rax), %rbp
    00000238: 	movq	0x8(%rax), %r12
    0000023c: 	movq	%rbp, %rax
    0000023f: 	addq	%r12, %rax
    00000242: 	je	.Ltmp2359 # Offset: 578
    00000244: 	testq	%rbp, %rbp
    00000247: 	je	.Ltmp2360 # Offset: 583
.Ltmp2359:
    0000024d: 	movq	%r12, 0x40(%rsp)
    00000252: 	cmpq	$0xf, %r12
    00000256: 	ja	.Ltmp2361 # Offset: 598
    0000025c: 	cmpq	$0x1, %r12
    00000260: 	jne	.Ltmp2362 # Offset: 608
    00000266: 	movzbl	(%rbp), %eax
    0000026a: 	movb	%al, 0x10(%rbx)
.Ltmp2367:
    0000026d: 	movq	%r12, 0x8(%rbx)
    00000271: 	movb	$0x0, (%rdi,%r12)
    00000276: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000284: 	addq	$0x20, %rax
    00000288: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000296: 	je	.Ltmp2363 # Offset: 662
.Ltmp2368:
    0000029c: 	movq	-0x20(%rax), %rbp
    000002a0: 	callq	clock@PLT # Offset: 672
    000002a5: 	movq	%rax, end_time(%rip)
    000002ac: 	movq	0x48(%rsp), %rdx
    000002b1: 	subq	%fs:0x28, %rdx
    000002ba: 	jne	.Ltmp2364 # Offset: 698
    000002c0: 	subq	start_time(%rip), %rax
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	movq	%rbp, %rdi
    000002ce: 	cvtsi2sd	%rax, %xmm0
    000002d3: 	divsd	DATAat0x2b628(%rip), %xmm0
    000002db: 	addq	$0x58, %rsp
    000002df: 	popq	%rbx
    000002e0: 	popq	%rbp
    000002e1: 	popq	%r12
    000002e3: 	popq	%r13
    000002e5: 	popq	%r14
    000002e7: 	popq	%r15
    000002e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp2356:
    000002f0: 	movq	%rdx, %rsi
.Ltmp2355:
    000002f3: 	pxor	%xmm0, %xmm0
    000002f7: 	pxor	%xmm4, %xmm4
    000002fb: 	pxor	%xmm1, %xmm1
    000002ff: 	cqto
    00000301: 	idivq	%rsi
    00000304: 	cvtsi2sd	%rsi, %xmm1
    00000309: 	movq	%rax, %rdi
    0000030c: 	movq	%rcx, %rax
    0000030f: 	cqto
    00000311: 	idivq	%rsi
    00000314: 	movq	%rax, %rcx
    00000317: 	movq	%rdi, %rax
    0000031a: 	imulq	%rdi, %rax
    0000031e: 	imulq	%rcx, %rcx
    00000322: 	addq	%rcx, %rax
    00000325: 	cvtsi2sd	%rax, %xmm0
    0000032a: 	ucomisd	%xmm0, %xmm4
    0000032e: 	ja	.Ltmp2365 # Offset: 814
    00000334: 	sqrtsd	%xmm0, %xmm0
.Ltmp2370:
    00000338: 	mulsd	%xmm0, %xmm1
    0000033c: 	cvttsd2si	%xmm1, %rax
    00000341: 	testq	%rax, %rax
    00000344: 	jle	.Ltmp2366 # Offset: 836
    0000034a: 	movl	current_test(%rip), %edx
    00000350: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00000357: 	movl	$0x1, %edi
    0000035c: 	xorl	%eax, %eax
    0000035e: 	movq	%r10, 0x10(%rsp)
    00000363: 	movaps	%xmm2, (%rsp)
    00000367: 	callq	__printf_chk@PLT # Offset: 871
    0000036c: 	movl	iterations(%rip), %ebp
    00000372: 	movdqa	(%rsp), %xmm2
    00000377: 	movq	0x10(%rsp), %r10
    0000037c: 	jmp	.Ltmp2366 # Offset: 892
.Ltmp2361:
    00000381: 	movq	%rbx, %rdi
    00000384: 	leaq	0x40(%rsp), %rsi
    00000389: 	xorl	%edx, %edx
    0000038b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 907
    00000390: 	movq	%rax, (%rbx)
    00000393: 	movq	%rax, %rdi
    00000396: 	movq	0x40(%rsp), %rax
    0000039b: 	movq	%rax, 0x10(%rbx)
.Ltmp2369:
    0000039f: 	movq	%r12, %rdx
    000003a2: 	movq	%rbp, %rsi
    000003a5: 	callq	memcpy@PLT # Offset: 933
    000003aa: 	movq	0x40(%rsp), %r12
    000003af: 	movq	(%rbx), %rdi
    000003b2: 	jmp	.Ltmp2367 # Offset: 946
.Ltmp2358:
    000003b7: 	movq	0x18(%rsp), %rsi
    000003bc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003c3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 963
    000003c8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003cf: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003d6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003dd: 	jne	.Ltmp2368 # Offset: 989
.Ltmp2363:
    000003e3: 	movq	-0x8(%rdx), %rax
    000003e7: 	addq	$0x200, %rax
    000003ed: 	jmp	.Ltmp2368 # Offset: 1005
.Ltmp2362:
    000003f2: 	testq	%r12, %r12
    000003f5: 	je	.Ltmp2367 # Offset: 1013
    000003fb: 	jmp	.Ltmp2369 # Offset: 1019
.Ltmp2364:
    000003fd: 	callq	__stack_chk_fail@PLT # Offset: 1021
.Ltmp2360:
    00000402: 	leaq	DATAat0x2b008(%rip), %rdi
    00000409: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1033
    0000040e: 	nop # Size: 2
.Ltmp2365:
    00000410: 	movq	%r10, (%rsp)
    00000414: 	movaps	%xmm2, 0x20(%rsp)
    00000419: 	movsd	%xmm1, 0x10(%rsp)
    0000041f: 	callq	sqrt@PLT # Offset: 1055
    00000424: 	movdqa	0x20(%rsp), %xmm2
    0000042a: 	movq	(%rsp), %r10
    0000042e: 	movsd	0x10(%rsp), %xmm1
    00000434: 	jmp	.Ltmp2370 # Offset: 1076
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIlE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_variable4ISt7complexIlE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x21e80
  Size        : 0x550
  MaxSize     : 0x550
  Offset      : 0x21e80
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIlE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%r8, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%r9, %rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	movq	0xd0(%rsp), %r10
    00000020: 	movq	%rdi, 0x38(%rsp)
    00000025: 	movl	%esi, 0x44(%rsp)
    00000029: 	movq	0xb0(%rsp), %r13
    00000031: 	movq	%r10, 0x50(%rsp)
    00000036: 	movq	0xb8(%rsp), %r15
    0000003e: 	movq	%rdx, (%rsp)
    00000042: 	movq	0xc0(%rsp), %r14
    0000004a: 	movq	%rcx, 0x8(%rsp)
    0000004f: 	movq	0xc8(%rsp), %r12
    00000057: 	movq	%fs:0x28, %rax
    00000060: 	movq	%rax, 0x68(%rsp)
    00000065: 	xorl	%eax, %eax
    00000067: 	callq	clock@PLT # Offset: 103
    0000006c: 	movl	iterations(%rip), %r10d
    00000073: 	movq	%rax, start_time(%rip)
    0000007a: 	movl	%r10d, 0x40(%rsp)
    0000007f: 	testl	%r10d, %r10d
    00000082: 	jle	.Ltmp2371 # Offset: 130
    00000088: 	movq	(%rsp), %rax
    0000008c: 	movq	0x8(%rsp), %rcx
    00000091: 	movl	$0x0, 0x34(%rsp)
    00000099: 	movq	0x38(%rsp), %rdi
    0000009e: 	movq	%rax, %rdx
    000000a1: 	imulq	%rax, %rdx
    000000a5: 	movq	%rcx, %rax
    000000a8: 	imulq	%rcx, %rax
    000000ac: 	leaq	(%rdx,%rax), %rcx
    000000b0: 	movq	%rbp, %rdx
    000000b3: 	movq	%rbx, %rax
    000000b6: 	imulq	%rbp, %rdx
    000000ba: 	movq	%rcx, 0x10(%rsp)
    000000bf: 	imulq	%rbx, %rax
    000000c3: 	leaq	(%rdx,%rax), %rcx
    000000c7: 	movq	%r13, %rdx
    000000ca: 	movq	%r15, %rax
    000000cd: 	imulq	%r13, %rdx
    000000d1: 	movq	%rcx, 0x18(%rsp)
    000000d6: 	imulq	%r15, %rax
    000000da: 	leaq	(%rdx,%rax), %r8
    000000de: 	movq	%r14, %rdx
    000000e1: 	movq	%r12, %rax
    000000e4: 	imulq	%r12, %rax
    000000e8: 	imulq	%r14, %rdx
    000000ec: 	leaq	(%rdx,%rax), %rcx
    000000f0: 	movl	0x44(%rsp), %eax
    000000f4: 	movq	%rcx, 0x20(%rsp)
    000000f9: 	subl	$0x1, %eax
    000000fc: 	shlq	$0x4, %rax
    00000100: 	leaq	0x10(%rdi,%rax), %rax
    00000105: 	movq	%rax, 0x28(%rsp)
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2376:
    00000110: 	movl	0x44(%rsp), %eax
    00000114: 	movq	0x38(%rsp), %rdi
    00000119: 	xorl	%r9d, %r9d
    0000011c: 	xorl	%r10d, %r10d
    0000011f: 	testl	%eax, %eax
    00000121: 	jle	.Ltmp2372 # Offset: 289
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2373:
    00000130: 	movq	(%rdi), %rcx
    00000133: 	movq	0x8(%rdi), %rsi
    00000137: 	movq	(%rsp), %rax
    0000013b: 	movq	0x8(%rsp), %rdx
    00000140: 	imulq	%rsi, %rax
    00000144: 	imulq	%rcx, %rdx
    00000148: 	imulq	0x8(%rsp), %rsi
    0000014e: 	imulq	(%rsp), %rcx
    00000153: 	subq	%rdx, %rax
    00000156: 	cqto
    00000158: 	idivq	0x10(%rsp)
    0000015d: 	addq	%rsi, %rcx
    00000160: 	movq	%rax, %r11
    00000163: 	movq	%rcx, %rax
    00000166: 	cqto
    00000168: 	idivq	0x10(%rsp)
    0000016d: 	movq	%rax, %rcx
    00000170: 	movq	%r11, %rax
    00000173: 	movq	%rcx, %rdx
    00000176: 	imulq	%rbp, %rax
    0000017a: 	imulq	%rbx, %rdx
    0000017e: 	imulq	%rbx, %r11
    00000182: 	imulq	%rbp, %rcx
    00000186: 	subq	%rdx, %rax
    00000189: 	cqto
    0000018b: 	idivq	0x18(%rsp)
    00000190: 	addq	%r11, %rcx
    00000193: 	movq	%rax, %rsi
    00000196: 	movq	%rcx, %rax
    00000199: 	cqto
    0000019b: 	idivq	0x18(%rsp)
    000001a0: 	movq	%rax, %rcx
    000001a3: 	movq	%rsi, %rax
    000001a6: 	movq	%rcx, %rdx
    000001a9: 	imulq	%r13, %rax
    000001ad: 	imulq	%r15, %rdx
    000001b1: 	imulq	%r15, %rsi
    000001b5: 	imulq	%r13, %rcx
    000001b9: 	subq	%rdx, %rax
    000001bc: 	cqto
    000001be: 	idivq	%r8
    000001c1: 	addq	%rsi, %rcx
    000001c4: 	movq	0x20(%rsp), %rsi
    000001c9: 	movq	%rax, %r11
    000001cc: 	movq	%rcx, %rax
    000001cf: 	cqto
    000001d1: 	idivq	%r8
    000001d4: 	movq	%r11, %rdx
    000001d7: 	imulq	%r12, %rdx
    000001db: 	movq	%rax, %rcx
    000001de: 	imulq	%r14, %rax
    000001e2: 	addq	%rdx, %rax
    000001e5: 	imulq	%r12, %rcx
    000001e9: 	addq	$0x10, %rdi
    000001ed: 	cqto
    000001ef: 	idivq	%rsi
    000001f2: 	addq	%rax, %r9
    000001f5: 	movq	%r11, %rax
    000001f8: 	imulq	%r14, %rax
    000001fc: 	subq	%rcx, %rax
    000001ff: 	cqto
    00000201: 	idivq	%rsi
    00000204: 	addq	%rax, %r10
    00000207: 	cmpq	%rdi, 0x28(%rsp)
    0000020c: 	jne	.Ltmp2373 # Offset: 524
.Ltmp2372:
    00000212: 	cvttsd2si	init_value(%rip), %rcx
    0000021b: 	movq	0x8(%rsp), %rax
    00000220: 	movq	0x10(%rsp), %rsi
    00000225: 	movq	0x18(%rsp), %r11
    0000022a: 	imulq	%rcx, %rax
    0000022e: 	imulq	(%rsp), %rcx
    00000233: 	negq	%rax
    00000236: 	cqto
    00000238: 	idivq	%rsi
    0000023b: 	movq	%rax, %rdi
    0000023e: 	movq	%rcx, %rax
    00000241: 	cqto
    00000243: 	idivq	%rsi
    00000246: 	movq	%rax, %rcx
    00000249: 	movq	%rdi, %rax
    0000024c: 	movq	%rcx, %rdx
    0000024f: 	imulq	%rbp, %rax
    00000253: 	imulq	%rbx, %rdx
    00000257: 	imulq	%rbx, %rdi
    0000025b: 	imulq	%rbp, %rcx
    0000025f: 	subq	%rdx, %rax
    00000262: 	cqto
    00000264: 	idivq	%r11
    00000267: 	addq	%rdi, %rcx
    0000026a: 	movq	%rax, %rsi
    0000026d: 	movq	%rcx, %rax
    00000270: 	cqto
    00000272: 	idivq	%r11
    00000275: 	movq	%rax, %rcx
    00000278: 	movq	%rsi, %rax
    0000027b: 	movq	%rcx, %rdx
    0000027e: 	imulq	%r13, %rax
    00000282: 	imulq	%r15, %rdx
    00000286: 	imulq	%r15, %rsi
    0000028a: 	imulq	%r13, %rcx
    0000028e: 	subq	%rdx, %rax
    00000291: 	cqto
    00000293: 	idivq	%r8
    00000296: 	addq	%rsi, %rcx
    00000299: 	movq	0x20(%rsp), %rsi
    0000029e: 	movq	%rax, %rdi
    000002a1: 	movq	%rcx, %rax
    000002a4: 	cqto
    000002a6: 	idivq	%r8
    000002a9: 	movq	%rdi, %rdx
    000002ac: 	imulq	%r12, %rdx
    000002b0: 	movq	%rax, %rcx
    000002b3: 	imulq	%r14, %rax
    000002b7: 	addq	%rdx, %rax
    000002ba: 	cqto
    000002bc: 	idivq	%rsi
    000002bf: 	imulq	$0x1f40, %rax, %rax
    000002c6: 	imulq	%r12, %rcx
    000002ca: 	subq	%rax, %r9
    000002cd: 	movq	%rdi, %rax
    000002d0: 	imulq	%r14, %rax
    000002d4: 	subq	%rcx, %rax
    000002d7: 	cqto
    000002d9: 	idivq	%rsi
    000002dc: 	imulq	$0x1f40, %rax, %rax
    000002e3: 	subq	%rax, %r10
    000002e6: 	movq	%r9, %rax
    000002e9: 	movq	%r10, %rcx
    000002ec: 	negq	%rcx
    000002ef: 	cmovsq	%r10, %rcx
    000002f3: 	negq	%rax
    000002f6: 	cmovsq	%r9, %rax
    000002fa: 	cmpq	%rax, %rcx
    000002fd: 	jg	.Ltmp2374 # Offset: 765
    00000303: 	testq	%r9, %r9
    00000306: 	jne	.Ltmp2375 # Offset: 774
    0000030c: 	movl	iterations(%rip), %eax
    00000312: 	movl	%eax, 0x40(%rsp)
.Ltmp2385:
    00000316: 	addl	$0x1, 0x34(%rsp)
    0000031b: 	movl	0x34(%rsp), %eax
    0000031f: 	cmpl	0x40(%rsp), %eax
    00000323: 	jl	.Ltmp2376 # Offset: 803
.Ltmp2371:
    00000329: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000330: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000337: 	subq	$0x20, %rax
    0000033b: 	cmpq	%rax, %rbx
    0000033e: 	je	.Ltmp2377 # Offset: 830
    00000344: 	movq	0x50(%rsp), %rax
    00000349: 	leaq	0x10(%rbx), %rdi
    0000034d: 	movq	%rdi, (%rbx)
    00000350: 	movq	(%rax), %rbp
    00000353: 	movq	0x8(%rax), %r12
    00000357: 	movq	%rbp, %rax
    0000035a: 	addq	%r12, %rax
    0000035d: 	je	.Ltmp2378 # Offset: 861
    0000035f: 	testq	%rbp, %rbp
    00000362: 	je	.Ltmp2379 # Offset: 866
.Ltmp2378:
    00000368: 	movq	%r12, 0x60(%rsp)
    0000036d: 	cmpq	$0xf, %r12
    00000371: 	ja	.Ltmp2380 # Offset: 881
    00000377: 	cmpq	$0x1, %r12
    0000037b: 	jne	.Ltmp2381 # Offset: 891
    00000381: 	movzbl	(%rbp), %eax
    00000385: 	movb	%al, 0x10(%rbx)
.Ltmp2386:
    00000388: 	movq	%r12, 0x8(%rbx)
    0000038c: 	movb	$0x0, (%rdi,%r12)
    00000391: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000398: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039f: 	addq	$0x20, %rax
    000003a3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003aa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003b1: 	je	.Ltmp2382 # Offset: 945
.Ltmp2387:
    000003b7: 	movq	-0x20(%rax), %rbp
    000003bb: 	callq	clock@PLT # Offset: 955
    000003c0: 	movq	%rax, end_time(%rip)
    000003c7: 	movq	0x68(%rsp), %rdx
    000003cc: 	subq	%fs:0x28, %rdx
    000003d5: 	jne	.Ltmp2383 # Offset: 981
    000003db: 	subq	start_time(%rip), %rax
    000003e2: 	pxor	%xmm0, %xmm0
    000003e6: 	movq	%rbp, %rdi
    000003e9: 	cvtsi2sd	%rax, %xmm0
    000003ee: 	divsd	DATAat0x2b628(%rip), %xmm0
    000003f6: 	addq	$0x78, %rsp
    000003fa: 	popq	%rbx
    000003fb: 	popq	%rbp
    000003fc: 	popq	%r12
    000003fe: 	popq	%r13
    00000400: 	popq	%r14
    00000402: 	popq	%r15
    00000404: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1028
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp2375:
    00000410: 	movq	%rax, %rcx
.Ltmp2374:
    00000413: 	pxor	%xmm0, %xmm0
    00000417: 	pxor	%xmm2, %xmm2
    0000041b: 	pxor	%xmm1, %xmm1
    0000041f: 	movq	%r9, %rax
    00000422: 	cqto
    00000424: 	cvtsi2sd	%rcx, %xmm1
    00000429: 	idivq	%rcx
    0000042c: 	movq	%rax, %r9
    0000042f: 	movq	%r10, %rax
    00000432: 	cqto
    00000434: 	imulq	%r9, %r9
    00000438: 	idivq	%rcx
    0000043b: 	movq	%rax, %r10
    0000043e: 	imulq	%rax, %r10
    00000442: 	addq	%r10, %r9
    00000445: 	cvtsi2sd	%r9, %xmm0
    0000044a: 	ucomisd	%xmm0, %xmm2
    0000044e: 	ja	.Ltmp2384 # Offset: 1102
    00000454: 	sqrtsd	%xmm0, %xmm0
.Ltmp2389:
    00000458: 	mulsd	%xmm1, %xmm0
    0000045c: 	cvttsd2si	%xmm0, %rax
    00000461: 	testq	%rax, %rax
    00000464: 	jle	.Ltmp2385 # Offset: 1124
    0000046a: 	movl	current_test(%rip), %edx
    00000470: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00000477: 	movl	$0x1, %edi
    0000047c: 	xorl	%eax, %eax
    0000047e: 	movq	%r8, 0x48(%rsp)
    00000483: 	callq	__printf_chk@PLT # Offset: 1155
    00000488: 	movl	iterations(%rip), %eax
    0000048e: 	movq	0x48(%rsp), %r8
    00000493: 	movl	%eax, 0x40(%rsp)
    00000497: 	jmp	.Ltmp2385 # Offset: 1175
.Ltmp2380:
    0000049c: 	movq	%rbx, %rdi
    0000049f: 	leaq	0x60(%rsp), %rsi
    000004a4: 	xorl	%edx, %edx
    000004a6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1190
    000004ab: 	movq	%rax, (%rbx)
    000004ae: 	movq	%rax, %rdi
    000004b1: 	movq	0x60(%rsp), %rax
    000004b6: 	movq	%rax, 0x10(%rbx)
.Ltmp2388:
    000004ba: 	movq	%r12, %rdx
    000004bd: 	movq	%rbp, %rsi
    000004c0: 	callq	memcpy@PLT # Offset: 1216
    000004c5: 	movq	0x60(%rsp), %r12
    000004ca: 	movq	(%rbx), %rdi
    000004cd: 	jmp	.Ltmp2386 # Offset: 1229
.Ltmp2377:
    000004d2: 	movq	0x50(%rsp), %rsi
    000004d7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004de: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1246
    000004e3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004ea: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004f1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004f8: 	jne	.Ltmp2387 # Offset: 1272
.Ltmp2382:
    000004fe: 	movq	-0x8(%rdx), %rax
    00000502: 	addq	$0x200, %rax
    00000508: 	jmp	.Ltmp2387 # Offset: 1288
.Ltmp2381:
    0000050d: 	testq	%r12, %r12
    00000510: 	je	.Ltmp2386 # Offset: 1296
    00000516: 	jmp	.Ltmp2388 # Offset: 1302
.Ltmp2383:
    00000518: 	callq	__stack_chk_fail@PLT # Offset: 1304
.Ltmp2379:
    0000051d: 	leaq	DATAat0x2b008(%rip), %rdi
    00000524: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1316
    00000529: 	nopl	(%rax) # Size: 7
.Ltmp2384:
    00000530: 	movq	%r8, 0x58(%rsp)
    00000535: 	movsd	%xmm1, 0x48(%rsp)
    0000053b: 	callq	sqrt@PLT # Offset: 1339
    00000540: 	movq	0x58(%rsp), %r8
    00000545: 	movsd	0x48(%rsp), %xmm1
    0000054b: 	jmp	.Ltmp2389 # Offset: 1355
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIlE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15testComplexTypeISt7complexIlEEvd" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x223d0
  Size        : 0x37b3
  MaxSize     : 0x37c0
  Offset      : 0x223d0
  Section     : .text
  Orc Section : .local.text._Z15testComplexTypeISt7complexIlEEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	leaq	-0x1f000(%rsp), %r11
.Ltmp2390:
    00000019: 	subq	$0x1000, %rsp
    00000020: 	orq	$0x0, (%rsp)
    00000025: 	cmpq	%r11, %rsp
    00000028: 	jne	.Ltmp2390 # Offset: 40
    0000002a: 	subq	$0x5d8, %rsp
    00000031: 	movl	$0x1f400, %edx
    00000036: 	xorl	%esi, %esi
    00000038: 	leaq	-0x1f440(%rbp), %r13
    0000003f: 	movsd	%xmm0, -0x1f550(%rbp)
    00000047: 	movq	%fs:0x28, %rax
    00000050: 	movq	%rax, -0x38(%rbp)
    00000054: 	xorl	%eax, %eax
    00000056: 	movq	%r13, %rdi
    00000059: 	movq	%r13, -0x1f560(%rbp)
    00000060: 	callq	memset@PLT # Offset: 96
    00000065: 	movsd	-0x1f550(%rbp), %xmm0
    0000006d: 	movsd	DATAat0x2b620(%rip), %xmm1
    00000075: 	cvttsd2si	%xmm0, %r14
    0000007a: 	addsd	%xmm0, %xmm1
    0000007e: 	cvttsd2si	%xmm1, %r15
    00000083: 	leaq	(%r14,%r14), %rax
    00000087: 	leaq	0x2(%r14), %rsi
    0000008b: 	movq	%rax, %r10
    0000008e: 	addq	%r14, %rax
    00000091: 	movq	%rsi, %rbx
    00000094: 	movq	%rsi, -0x1f570(%rbp)
    0000009b: 	leaq	(%r15,%r15), %rdx
    0000009f: 	leaq	0x4(%r15), %r9
    000000a3: 	leaq	(%rdx,%r15), %rcx
    000000a7: 	leaq	(%rax,%rdx), %rdi
    000000ab: 	movq	%r9, %rdx
    000000ae: 	movq	%r9, %rax
    000000b1: 	subq	%rcx, %r10
    000000b4: 	imulq	%rdi, %rdx
    000000b8: 	movq	%rsi, %rcx
    000000bb: 	movq	%r9, -0x1f5d0(%rbp)
    000000c2: 	imulq	%r10, %rbx
    000000c6: 	movq	%r10, -0x1f5c0(%rbp)
    000000cd: 	imulq	%r9, %rax
    000000d1: 	movq	%rdi, -0x1f5d8(%rbp)
    000000d8: 	imulq	%rsi, %rcx
    000000dc: 	movq	%rdx, -0x1f5e8(%rbp)
    000000e3: 	movq	%rbx, -0x1f5e0(%rbp)
    000000ea: 	addq	%rdx, %rbx
    000000ed: 	imulq	%rdi, %rsi
    000000f1: 	imulq	%r10, %r9
    000000f5: 	movq	%r14, %r10
    000000f8: 	addq	%rax, %rcx
    000000fb: 	movq	%rbx, %rax
    000000fe: 	leaq	-0x40(%rbp), %rbx
    00000102: 	movq	%r10, %rdi
    00000105: 	cqto
    00000107: 	movq	%rsi, -0x1f5f0(%rbp)
    0000010e: 	idivq	%rcx
    00000111: 	movq	%r9, -0x1f5f8(%rbp)
    00000118: 	subq	%r9, %rsi
    0000011b: 	leaq	(%rax,%r14), %r14
    0000011f: 	movq	%rsi, %rax
    00000122: 	cqto
    00000124: 	idivq	%rcx
    00000127: 	cvttsd2si	init_value(%rip), %rdx
    00000130: 	movq	%rdx, %xmm0
    00000135: 	addq	%r15, %rax
    00000138: 	movq	%rax, -0x1f5c8(%rbp)
    0000013f: 	movq	%r13, %rax
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2391:
    00000148: 	movaps	%xmm0, (%rax)
    0000014b: 	addq	$0x20, %rax
    0000014f: 	movaps	%xmm0, -0x10(%rax)
    00000153: 	cmpq	%rbx, %rax
    00000156: 	jne	.Ltmp2391 # Offset: 342
    00000158: 	leaq	-0x1f520(%rbp), %r13
    0000015f: 	movq	%rdi, -0x1f558(%rbp)
    00000166: 	leaq	DATAat0x2b5f6(%rip), %rsi
    0000016d: 	movq	%r13, %rdi
    00000170: 	movq	%r13, -0x1f5b8(%rbp)
    00000177: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 375
    0000017c: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm5
    00000184: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    0000018c: 	leaq	-0x1f540(%rbp), %rsi
    00000193: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000019a: 	movaps	%xmm5, -0x1f540(%rbp)
    000001a1: 	movaps	%xmm7, -0x1f530(%rbp)
    000001a8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 424
    000001ad: 	leaq	-0x1f460(%rbp), %rax
    000001b4: 	leaq	DATAat0x2b561(%rip), %rdx
    000001bb: 	movq	%r13, %rsi
    000001be: 	movq	%rax, %rdi
    000001c1: 	movq	%rax, -0x1f5a8(%rbp)
    000001c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 456
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	movl	iterations(%rip), %r9d
    000001d9: 	xorl	%r12d, %r12d
    000001dc: 	leaq	DATAat0x2b1d0(%rip), %r13
    000001e3: 	movq	%rax, start_time(%rip)
    000001ea: 	testl	%r9d, %r9d
    000001ed: 	jg	.Ltmp2392 # Offset: 493
    000001ef: 	jmp	.Ltmp2393 # Offset: 495
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2394:
    000001f8: 	addl	$0x1, %r12d
    000001fc: 	cmpl	iterations(%rip), %r12d
    00000203: 	jge	.Ltmp2393 # Offset: 515
.Ltmp2392:
    00000205: 	xorl	%esi, %esi
    00000207: 	xorl	%edi, %edi
    00000209: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 521
    0000020e: 	testq	%rax, %rax
    00000211: 	jle	.Ltmp2394 # Offset: 529
    00000213: 	movl	current_test(%rip), %edx
    00000219: 	movq	%r13, %rsi
    0000021c: 	movl	$0x1, %edi
    00000221: 	xorl	%eax, %eax
    00000223: 	callq	__printf_chk@PLT # Offset: 547
    00000228: 	addl	$0x1, %r12d
    0000022c: 	cmpl	iterations(%rip), %r12d
    00000233: 	jl	.Ltmp2392 # Offset: 563
.Ltmp2393:
    00000235: 	movq	-0x1f5a8(%rbp), %rsi
    0000023c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000243: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 579
    00000248: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000256: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000025d: 	je	.Ltmp2395 # Offset: 605
.Ltmp2580:
    00000263: 	movq	-0x20(%rax), %r12
    00000267: 	callq	clock@PLT # Offset: 615
    0000026c: 	pxor	%xmm0, %xmm0
    00000270: 	movq	%rax, end_time(%rip)
    00000277: 	movq	%r12, %rdi
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	cvtsi2sd	%rax, %xmm0
    00000286: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000028e: 	callq	_Z13record_resultdPKc # Offset: 654
    00000293: 	movq	-0x1f460(%rbp), %rdi
    0000029a: 	leaq	-0x1f450(%rbp), %rax
    000002a1: 	movq	%rax, -0x1f5b0(%rbp)
    000002a8: 	cmpq	%rax, %rdi
    000002ab: 	je	.Ltmp2396 # Offset: 683
    000002ad: 	movq	-0x1f450(%rbp), %rax
    000002b4: 	leaq	0x1(%rax), %rsi
    000002b8: 	callq	_ZdlPvm@PLT # Offset: 696
.Ltmp2396:
    000002bd: 	movq	-0x1f5b8(%rbp), %rsi
    000002c4: 	movq	-0x1f5a8(%rbp), %rdi
    000002cb: 	leaq	DATAat0x2b1e0(%rip), %rdx
    000002d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 722
    000002d7: 	callq	clock@PLT # Offset: 727
    000002dc: 	movl	iterations(%rip), %r8d
    000002e3: 	xorl	%r12d, %r12d
    000002e6: 	leaq	DATAat0x2b1d0(%rip), %r13
    000002ed: 	movq	%rax, start_time(%rip)
    000002f4: 	testl	%r8d, %r8d
    000002f7: 	jg	.Ltmp2397 # Offset: 759
    000002f9: 	jmp	.Ltmp2398 # Offset: 761
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2399:
    00000300: 	addl	$0x1, %r12d
    00000304: 	cmpl	iterations(%rip), %r12d
    0000030b: 	jge	.Ltmp2398 # Offset: 779
.Ltmp2397:
    0000030d: 	xorl	%esi, %esi
    0000030f: 	xorl	%edi, %edi
    00000311: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 785
    00000316: 	testq	%rax, %rax
    00000319: 	jle	.Ltmp2399 # Offset: 793
    0000031b: 	movl	current_test(%rip), %edx
    00000321: 	movq	%r13, %rsi
    00000324: 	movl	$0x1, %edi
    00000329: 	xorl	%eax, %eax
    0000032b: 	callq	__printf_chk@PLT # Offset: 811
    00000330: 	addl	$0x1, %r12d
    00000334: 	cmpl	iterations(%rip), %r12d
    0000033b: 	jl	.Ltmp2397 # Offset: 827
.Ltmp2398:
    0000033d: 	movq	-0x1f5a8(%rbp), %rsi
    00000344: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000034b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 843
    00000350: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000357: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000035e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000365: 	je	.Ltmp2400 # Offset: 869
.Ltmp2606:
    0000036b: 	movq	-0x20(%rax), %r12
    0000036f: 	callq	clock@PLT # Offset: 879
    00000374: 	pxor	%xmm0, %xmm0
    00000378: 	movq	%rax, end_time(%rip)
    0000037f: 	movq	%r12, %rdi
    00000382: 	subq	start_time(%rip), %rax
    00000389: 	cvtsi2sd	%rax, %xmm0
    0000038e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000396: 	callq	_Z13record_resultdPKc # Offset: 918
    0000039b: 	movq	-0x1f460(%rbp), %rdi
    000003a2: 	cmpq	-0x1f5b0(%rbp), %rdi
    000003a9: 	je	.Ltmp2401 # Offset: 937
    000003ab: 	movq	-0x1f450(%rbp), %rax
    000003b2: 	leaq	0x1(%rax), %rsi
    000003b6: 	callq	_ZdlPvm@PLT # Offset: 950
.Ltmp2401:
    000003bb: 	movq	-0x1f5b8(%rbp), %rsi
    000003c2: 	movq	-0x1f5a8(%rbp), %rdi
    000003c9: 	leaq	DATAat0x2b1ef(%rip), %rdx
    000003d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 976
    000003d5: 	callq	clock@PLT # Offset: 981
    000003da: 	movl	iterations(%rip), %edi
    000003e0: 	xorl	%r12d, %r12d
    000003e3: 	leaq	DATAat0x2b1d0(%rip), %r13
    000003ea: 	movq	%rax, start_time(%rip)
    000003f1: 	testl	%edi, %edi
    000003f3: 	jg	.Ltmp2402 # Offset: 1011
    000003f5: 	jmp	.Ltmp2403 # Offset: 1013
    000003f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2404:
    00000400: 	addl	$0x1, %r12d
    00000404: 	cmpl	iterations(%rip), %r12d
    0000040b: 	jge	.Ltmp2403 # Offset: 1035
.Ltmp2402:
    0000040d: 	xorl	%esi, %esi
    0000040f: 	xorl	%edi, %edi
    00000411: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 1041
    00000416: 	testq	%rax, %rax
    00000419: 	jle	.Ltmp2404 # Offset: 1049
    0000041b: 	movl	current_test(%rip), %edx
    00000421: 	movq	%r13, %rsi
    00000424: 	movl	$0x1, %edi
    00000429: 	xorl	%eax, %eax
    0000042b: 	callq	__printf_chk@PLT # Offset: 1067
    00000430: 	addl	$0x1, %r12d
    00000434: 	cmpl	iterations(%rip), %r12d
    0000043b: 	jl	.Ltmp2402 # Offset: 1083
.Ltmp2403:
    0000043d: 	movq	-0x1f5a8(%rbp), %rsi
    00000444: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000044b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1099
    00000450: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000457: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000045e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000465: 	je	.Ltmp2405 # Offset: 1125
.Ltmp2605:
    0000046b: 	movq	-0x20(%rax), %r12
    0000046f: 	callq	clock@PLT # Offset: 1135
    00000474: 	pxor	%xmm0, %xmm0
    00000478: 	movq	%rax, end_time(%rip)
    0000047f: 	movq	%r12, %rdi
    00000482: 	subq	start_time(%rip), %rax
    00000489: 	cvtsi2sd	%rax, %xmm0
    0000048e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000496: 	callq	_Z13record_resultdPKc # Offset: 1174
    0000049b: 	movq	-0x1f460(%rbp), %rdi
    000004a2: 	cmpq	-0x1f5b0(%rbp), %rdi
    000004a9: 	je	.Ltmp2406 # Offset: 1193
    000004ab: 	movq	-0x1f450(%rbp), %rax
    000004b2: 	leaq	0x1(%rax), %rsi
    000004b6: 	callq	_ZdlPvm@PLT # Offset: 1206
.Ltmp2406:
    000004bb: 	movq	-0x1f5b8(%rbp), %rsi
    000004c2: 	movq	-0x1f5a8(%rbp), %rdi
    000004c9: 	leaq	DATAat0x2b203(%rip), %rdx
    000004d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1232
    000004d5: 	callq	clock@PLT # Offset: 1237
    000004da: 	movl	iterations(%rip), %esi
    000004e0: 	xorl	%r12d, %r12d
    000004e3: 	leaq	DATAat0x2b1d0(%rip), %r13
    000004ea: 	movq	%rax, start_time(%rip)
    000004f1: 	testl	%esi, %esi
    000004f3: 	jg	.Ltmp2407 # Offset: 1267
    000004f5: 	jmp	.Ltmp2408 # Offset: 1269
    000004f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2409:
    00000500: 	addl	$0x1, %r12d
    00000504: 	cmpl	iterations(%rip), %r12d
    0000050b: 	jge	.Ltmp2408 # Offset: 1291
.Ltmp2407:
    0000050d: 	xorl	%esi, %esi
    0000050f: 	xorl	%edi, %edi
    00000511: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 1297
    00000516: 	testq	%rax, %rax
    00000519: 	jle	.Ltmp2409 # Offset: 1305
    0000051b: 	movl	current_test(%rip), %edx
    00000521: 	movq	%r13, %rsi
    00000524: 	movl	$0x1, %edi
    00000529: 	xorl	%eax, %eax
    0000052b: 	callq	__printf_chk@PLT # Offset: 1323
    00000530: 	addl	$0x1, %r12d
    00000534: 	cmpl	iterations(%rip), %r12d
    0000053b: 	jl	.Ltmp2407 # Offset: 1339
.Ltmp2408:
    0000053d: 	movq	-0x1f5a8(%rbp), %rsi
    00000544: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000054b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1355
    00000550: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000557: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000055e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000565: 	je	.Ltmp2410 # Offset: 1381
.Ltmp2604:
    0000056b: 	movq	-0x20(%rax), %r12
    0000056f: 	callq	clock@PLT # Offset: 1391
    00000574: 	pxor	%xmm0, %xmm0
    00000578: 	movq	%rax, end_time(%rip)
    0000057f: 	movq	%r12, %rdi
    00000582: 	subq	start_time(%rip), %rax
    00000589: 	cvtsi2sd	%rax, %xmm0
    0000058e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000596: 	callq	_Z13record_resultdPKc # Offset: 1430
    0000059b: 	movq	-0x1f460(%rbp), %rdi
    000005a2: 	cmpq	-0x1f5b0(%rbp), %rdi
    000005a9: 	je	.Ltmp2411 # Offset: 1449
    000005ab: 	movq	-0x1f450(%rbp), %rax
    000005b2: 	leaq	0x1(%rax), %rsi
    000005b6: 	callq	_ZdlPvm@PLT # Offset: 1462
.Ltmp2411:
    000005bb: 	movq	-0x1f5b8(%rbp), %rsi
    000005c2: 	movq	-0x1f5a8(%rbp), %rdi
    000005c9: 	leaq	DATAat0x2b217(%rip), %rdx
    000005d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1488
    000005d5: 	callq	clock@PLT # Offset: 1493
    000005da: 	movl	iterations(%rip), %ecx
    000005e0: 	xorl	%r12d, %r12d
    000005e3: 	leaq	DATAat0x2b1d0(%rip), %r13
    000005ea: 	movq	%rax, start_time(%rip)
    000005f1: 	testl	%ecx, %ecx
    000005f3: 	jg	.Ltmp2412 # Offset: 1523
    000005f5: 	jmp	.Ltmp2413 # Offset: 1525
    000005f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2414:
    00000600: 	addl	$0x1, %r12d
    00000604: 	cmpl	iterations(%rip), %r12d
    0000060b: 	jge	.Ltmp2413 # Offset: 1547
.Ltmp2412:
    0000060d: 	xorl	%esi, %esi
    0000060f: 	xorl	%edi, %edi
    00000611: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 1553
    00000616: 	testq	%rax, %rax
    00000619: 	jle	.Ltmp2414 # Offset: 1561
    0000061b: 	movl	current_test(%rip), %edx
    00000621: 	movq	%r13, %rsi
    00000624: 	movl	$0x1, %edi
    00000629: 	xorl	%eax, %eax
    0000062b: 	callq	__printf_chk@PLT # Offset: 1579
    00000630: 	addl	$0x1, %r12d
    00000634: 	cmpl	iterations(%rip), %r12d
    0000063b: 	jl	.Ltmp2412 # Offset: 1595
.Ltmp2413:
    0000063d: 	movq	-0x1f5a8(%rbp), %rsi
    00000644: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000064b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1611
    00000650: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000657: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000065e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000665: 	je	.Ltmp2415 # Offset: 1637
.Ltmp2603:
    0000066b: 	movq	-0x20(%rax), %r12
    0000066f: 	callq	clock@PLT # Offset: 1647
    00000674: 	pxor	%xmm0, %xmm0
    00000678: 	movq	%rax, end_time(%rip)
    0000067f: 	movq	%r12, %rdi
    00000682: 	subq	start_time(%rip), %rax
    00000689: 	cvtsi2sd	%rax, %xmm0
    0000068e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000696: 	callq	_Z13record_resultdPKc # Offset: 1686
    0000069b: 	movq	-0x1f460(%rbp), %rdi
    000006a2: 	cmpq	-0x1f5b0(%rbp), %rdi
    000006a9: 	je	.Ltmp2416 # Offset: 1705
    000006ab: 	movq	-0x1f450(%rbp), %rax
    000006b2: 	leaq	0x1(%rax), %rsi
    000006b6: 	callq	_ZdlPvm@PLT # Offset: 1718
.Ltmp2416:
    000006bb: 	movq	-0x1f5a8(%rbp), %r13
    000006c2: 	movq	-0x1f5b8(%rbp), %rsi
    000006c9: 	leaq	DATAat0x2b229(%rip), %rdx
    000006d0: 	movq	%r13, %rdi
    000006d3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1747
    000006d8: 	callq	clock@PLT # Offset: 1752
    000006dd: 	movq	%r13, %rsi
    000006e0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000006e7: 	movq	%rax, start_time(%rip)
    000006ee: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1774
    000006f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006fa: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000701: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000708: 	je	.Ltmp2417 # Offset: 1800
.Ltmp2602:
    0000070e: 	movq	-0x20(%rax), %r12
    00000712: 	callq	clock@PLT # Offset: 1810
    00000717: 	pxor	%xmm0, %xmm0
    0000071b: 	movq	%rax, end_time(%rip)
    00000722: 	movq	%r12, %rdi
    00000725: 	subq	start_time(%rip), %rax
    0000072c: 	cvtsi2sd	%rax, %xmm0
    00000731: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000739: 	callq	_Z13record_resultdPKc # Offset: 1849
    0000073e: 	movq	-0x1f460(%rbp), %rdi
    00000745: 	cmpq	-0x1f5b0(%rbp), %rdi
    0000074c: 	je	.Ltmp2418 # Offset: 1868
    0000074e: 	movq	-0x1f450(%rbp), %rax
    00000755: 	leaq	0x1(%rax), %rsi
    00000759: 	callq	_ZdlPvm@PLT # Offset: 1881
.Ltmp2418:
    0000075e: 	movq	-0x1f5b8(%rbp), %rsi
    00000765: 	movq	-0x1f5a8(%rbp), %rdi
    0000076c: 	leaq	DATAat0x2b23a(%rip), %rdx
    00000773: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1907
    00000778: 	callq	clock@PLT # Offset: 1912
    0000077d: 	movl	iterations(%rip), %edx
    00000783: 	xorl	%r12d, %r12d
    00000786: 	leaq	DATAat0x2b1d0(%rip), %r13
    0000078d: 	movq	%rax, start_time(%rip)
    00000794: 	testl	%edx, %edx
    00000796: 	jg	.Ltmp2419 # Offset: 1942
    00000798: 	jmp	.Ltmp2420 # Offset: 1944
    0000079a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2421:
    000007a0: 	addl	$0x1, %r12d
    000007a4: 	cmpl	iterations(%rip), %r12d
    000007ab: 	jge	.Ltmp2420 # Offset: 1963
.Ltmp2419:
    000007ad: 	xorl	%esi, %esi
    000007af: 	xorl	%edi, %edi
    000007b1: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 1969
    000007b6: 	testq	%rax, %rax
    000007b9: 	jle	.Ltmp2421 # Offset: 1977
    000007bb: 	movl	current_test(%rip), %edx
    000007c1: 	movq	%r13, %rsi
    000007c4: 	movl	$0x1, %edi
    000007c9: 	xorl	%eax, %eax
    000007cb: 	callq	__printf_chk@PLT # Offset: 1995
    000007d0: 	addl	$0x1, %r12d
    000007d4: 	cmpl	iterations(%rip), %r12d
    000007db: 	jl	.Ltmp2419 # Offset: 2011
.Ltmp2420:
    000007dd: 	movq	-0x1f5a8(%rbp), %rsi
    000007e4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000007eb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2027
    000007f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007f7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007fe: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000805: 	je	.Ltmp2422 # Offset: 2053
.Ltmp2601:
    0000080b: 	movq	-0x20(%rax), %r12
    0000080f: 	callq	clock@PLT # Offset: 2063
    00000814: 	pxor	%xmm0, %xmm0
    00000818: 	movq	%rax, end_time(%rip)
    0000081f: 	movq	%r12, %rdi
    00000822: 	subq	start_time(%rip), %rax
    00000829: 	cvtsi2sd	%rax, %xmm0
    0000082e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000836: 	callq	_Z13record_resultdPKc # Offset: 2102
    0000083b: 	movq	-0x1f460(%rbp), %rdi
    00000842: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000849: 	je	.Ltmp2423 # Offset: 2121
    0000084b: 	movq	-0x1f450(%rbp), %rax
    00000852: 	leaq	0x1(%rax), %rsi
    00000856: 	callq	_ZdlPvm@PLT # Offset: 2134
.Ltmp2423:
    0000085b: 	movq	-0x1f5b8(%rbp), %r13
    00000862: 	leaq	-0x1f500(%rbp), %rdi
    00000869: 	leaq	DATAat0x2b24e(%rip), %rdx
    00000870: 	movq	%r13, %rsi
    00000873: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2163
    00000878: 	movl	iterations(%rip), %edx
    0000087e: 	xorl	%r8d, %r8d
    00000881: 	xorl	%ecx, %ecx
    00000883: 	movl	$0x1f40, %esi
    00000888: 	movq	-0x1f500(%rbp), %rdi
    0000088f: 	callq	_Z9summarizePKciiii # Offset: 2191
    00000894: 	movq	%r13, %rsi
    00000897: 	movq	-0x1f5a8(%rbp), %r13
    0000089e: 	leaq	DATAat0x2b267(%rip), %rdx
    000008a5: 	movq	%r13, %rdi
    000008a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2216
    000008ad: 	movq	-0x1f560(%rbp), %rdi
    000008b4: 	movq	%r13, %rdx
    000008b7: 	movl	$0x1f40, %esi
    000008bc: 	callq	_Z13test_constantISt7complexIlE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2236
    000008c1: 	movq	-0x1f460(%rbp), %rdi
    000008c8: 	cmpq	-0x1f5b0(%rbp), %rdi
    000008cf: 	je	.Ltmp2424 # Offset: 2255
    000008d1: 	movq	-0x1f450(%rbp), %rax
    000008d8: 	leaq	0x1(%rax), %rsi
    000008dc: 	callq	_ZdlPvm@PLT # Offset: 2268
.Ltmp2424:
    000008e1: 	movq	-0x1f5a8(%rbp), %r13
    000008e8: 	movq	-0x1f5b8(%rbp), %rsi
    000008ef: 	leaq	DATAat0x2b275(%rip), %rdx
    000008f6: 	movq	%r13, %rdi
    000008f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2297
    000008fe: 	movq	-0x1f560(%rbp), %rdi
    00000905: 	movq	%r13, %rdx
    00000908: 	movl	$0x1f40, %esi
    0000090d: 	callq	_Z13test_constantISt7complexIlE29complex_multiple_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2317
    00000912: 	movq	-0x1f460(%rbp), %rdi
    00000919: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000920: 	je	.Ltmp2425 # Offset: 2336
    00000922: 	movq	-0x1f450(%rbp), %rax
    00000929: 	leaq	0x1(%rax), %rsi
    0000092d: 	callq	_ZdlPvm@PLT # Offset: 2349
.Ltmp2425:
    00000932: 	movq	-0x1f5a8(%rbp), %r13
    00000939: 	movq	-0x1f5b8(%rbp), %rsi
    00000940: 	leaq	DATAat0x2b28d(%rip), %rdx
    00000947: 	movq	%r13, %rdi
    0000094a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2378
    0000094f: 	movq	-0x1f560(%rbp), %rdi
    00000956: 	movq	%r13, %rdx
    00000959: 	movl	$0x1f40, %esi
    0000095e: 	callq	_Z13test_constantISt7complexIlE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2398
    00000963: 	movq	-0x1f460(%rbp), %rdi
    0000096a: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000971: 	je	.Ltmp2426 # Offset: 2417
    00000973: 	movq	-0x1f450(%rbp), %rax
    0000097a: 	leaq	0x1(%rax), %rsi
    0000097e: 	callq	_ZdlPvm@PLT # Offset: 2430
.Ltmp2426:
    00000983: 	movq	-0x1f5a8(%rbp), %r13
    0000098a: 	movq	-0x1f5b8(%rbp), %rsi
    00000991: 	leaq	DATAat0x2b2a0(%rip), %rdx
    00000998: 	movq	%r13, %rdi
    0000099b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2459
    000009a0: 	movq	-0x1f560(%rbp), %rdi
    000009a7: 	movq	%r13, %rdx
    000009aa: 	movl	$0x1f40, %esi
    000009af: 	callq	_Z13test_constantISt7complexIlE29complex_multiple_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2479
    000009b4: 	movq	-0x1f460(%rbp), %rdi
    000009bb: 	cmpq	-0x1f5b0(%rbp), %rdi
    000009c2: 	je	.Ltmp2427 # Offset: 2498
    000009c4: 	movq	-0x1f450(%rbp), %rax
    000009cb: 	leaq	0x1(%rax), %rsi
    000009cf: 	callq	_ZdlPvm@PLT # Offset: 2511
.Ltmp2427:
    000009d4: 	movq	-0x1f5a8(%rbp), %r13
    000009db: 	movq	-0x1f5b8(%rbp), %rsi
    000009e2: 	leaq	DATAat0x2b2bd(%rip), %rdx
    000009e9: 	movq	%r13, %rdi
    000009ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2540
    000009f1: 	movq	-0x1f560(%rbp), %rdi
    000009f8: 	movq	%r13, %rdx
    000009fb: 	movl	$0x1f40, %esi
    00000a00: 	callq	_Z13test_constantISt7complexIlE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2560
    00000a05: 	movq	-0x1f460(%rbp), %rdi
    00000a0c: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000a13: 	je	.Ltmp2428 # Offset: 2579
    00000a15: 	movq	-0x1f450(%rbp), %rax
    00000a1c: 	leaq	0x1(%rax), %rsi
    00000a20: 	callq	_ZdlPvm@PLT # Offset: 2592
.Ltmp2428:
    00000a25: 	movq	-0x1f5a8(%rbp), %r13
    00000a2c: 	movq	-0x1f5b8(%rbp), %rsi
    00000a33: 	leaq	DATAat0x2b2d0(%rip), %rdx
    00000a3a: 	movq	%r13, %rdi
    00000a3d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2621
    00000a42: 	movq	-0x1f560(%rbp), %rdi
    00000a49: 	movq	%r13, %rdx
    00000a4c: 	movl	$0x1f40, %esi
    00000a51: 	callq	_Z13test_constantISt7complexIlE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2641
    00000a56: 	movq	-0x1f460(%rbp), %rdi
    00000a5d: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000a64: 	je	.Ltmp2429 # Offset: 2660
    00000a66: 	movq	-0x1f450(%rbp), %rax
    00000a6d: 	leaq	0x1(%rax), %rsi
    00000a71: 	callq	_ZdlPvm@PLT # Offset: 2673
.Ltmp2429:
    00000a76: 	movq	-0x1f5a8(%rbp), %r13
    00000a7d: 	movq	-0x1f5b8(%rbp), %rsi
    00000a84: 	leaq	DATAat0x2b570(%rip), %rdx
    00000a8b: 	movq	%r13, %rdi
    00000a8e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2702
    00000a93: 	movq	-0x1f560(%rbp), %rdi
    00000a9a: 	movq	%r13, %rdx
    00000a9d: 	movl	$0x1f40, %esi
    00000aa2: 	callq	_Z13test_constantISt7complexIlE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2722
    00000aa7: 	movq	-0x1f460(%rbp), %rdi
    00000aae: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000ab5: 	je	.Ltmp2430 # Offset: 2741
    00000ab7: 	movq	-0x1f450(%rbp), %rax
    00000abe: 	leaq	0x1(%rax), %rsi
    00000ac2: 	callq	_ZdlPvm@PLT # Offset: 2754
.Ltmp2430:
    00000ac7: 	movq	-0x1f5a8(%rbp), %r13
    00000ace: 	movq	-0x1f5b8(%rbp), %rsi
    00000ad5: 	leaq	DATAat0x2b2ee(%rip), %rdx
    00000adc: 	movq	%r13, %rdi
    00000adf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2783
    00000ae4: 	movq	-0x1f560(%rbp), %rdi
    00000aeb: 	movq	%r13, %rdx
    00000aee: 	movl	$0x1f40, %esi
    00000af3: 	callq	_Z13test_constantISt7complexIlE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2803
    00000af8: 	movq	-0x1f460(%rbp), %rdi
    00000aff: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000b06: 	je	.Ltmp2431 # Offset: 2822
    00000b08: 	movq	-0x1f450(%rbp), %rax
    00000b0f: 	leaq	0x1(%rax), %rsi
    00000b13: 	callq	_ZdlPvm@PLT # Offset: 2835
.Ltmp2431:
    00000b18: 	movq	-0x1f5b8(%rbp), %rsi
    00000b1f: 	movq	-0x1f5a8(%rbp), %rdi
    00000b26: 	leaq	DATAat0x2b2ff(%rip), %rdx
    00000b2d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2861
    00000b32: 	callq	clock@PLT # Offset: 2866
    00000b37: 	movq	%rax, start_time(%rip)
    00000b3e: 	movl	iterations(%rip), %eax
    00000b44: 	testl	%eax, %eax
    00000b46: 	jle	.Ltmp2432 # Offset: 2886
    00000b48: 	ud2
.Ltmp2432:
    00000b4a: 	movq	-0x1f5a8(%rbp), %rsi
    00000b51: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000b58: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2904
    00000b5d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b64: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000b6b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b72: 	je	.Ltmp2433 # Offset: 2930
.Ltmp2600:
    00000b78: 	movq	-0x20(%rax), %r12
    00000b7c: 	callq	clock@PLT # Offset: 2940
    00000b81: 	pxor	%xmm0, %xmm0
    00000b85: 	movq	%rax, end_time(%rip)
    00000b8c: 	movq	%r12, %rdi
    00000b8f: 	subq	start_time(%rip), %rax
    00000b96: 	cvtsi2sd	%rax, %xmm0
    00000b9b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000ba3: 	callq	_Z13record_resultdPKc # Offset: 2979
    00000ba8: 	movq	-0x1f460(%rbp), %rdi
    00000baf: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000bb6: 	je	.Ltmp2434 # Offset: 2998
    00000bb8: 	movq	-0x1f450(%rbp), %rax
    00000bbf: 	leaq	0x1(%rax), %rsi
    00000bc3: 	callq	_ZdlPvm@PLT # Offset: 3011
.Ltmp2434:
    00000bc8: 	movq	-0x1f5a8(%rbp), %r13
    00000bcf: 	movq	-0x1f5b8(%rbp), %rsi
    00000bd6: 	leaq	DATAat0x2b31a(%rip), %rdx
    00000bdd: 	movq	%r13, %rdi
    00000be0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3040
    00000be5: 	movq	-0x1f560(%rbp), %rdi
    00000bec: 	movq	%r13, %rdx
    00000bef: 	movl	$0x1f40, %esi
    00000bf4: 	callq	_Z13test_constantISt7complexIlE33complex_multiple_constant_divide2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3060
    00000bf9: 	movq	-0x1f460(%rbp), %rdi
    00000c00: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000c07: 	je	.Ltmp2435 # Offset: 3079
    00000c09: 	movq	-0x1f450(%rbp), %rax
    00000c10: 	leaq	0x1(%rax), %rsi
    00000c14: 	callq	_ZdlPvm@PLT # Offset: 3092
.Ltmp2435:
    00000c19: 	movq	-0x1f5a8(%rbp), %r13
    00000c20: 	movq	-0x1f5b8(%rbp), %rsi
    00000c27: 	leaq	DATAat0x2b336(%rip), %rdx
    00000c2e: 	movq	%r13, %rdi
    00000c31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3121
    00000c36: 	movq	-0x1f560(%rbp), %rdi
    00000c3d: 	movq	%r13, %rdx
    00000c40: 	movl	$0x1f40, %esi
    00000c45: 	callq	_Z13test_constantISt7complexIlE31complex_multiple_constant_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3141
    00000c4a: 	movq	-0x1f460(%rbp), %rdi
    00000c51: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000c58: 	je	.Ltmp2436 # Offset: 3160
    00000c5a: 	movq	-0x1f450(%rbp), %rax
    00000c61: 	leaq	0x1(%rax), %rsi
    00000c65: 	callq	_ZdlPvm@PLT # Offset: 3173
.Ltmp2436:
    00000c6a: 	movq	-0x1f5b8(%rbp), %r13
    00000c71: 	leaq	-0x1f4e0(%rbp), %rdi
    00000c78: 	leaq	DATAat0x2b255(%rip), %rdx
    00000c7f: 	movq	%r13, %rsi
    00000c82: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3202
    00000c87: 	movl	iterations(%rip), %edx
    00000c8d: 	xorl	%r8d, %r8d
    00000c90: 	xorl	%ecx, %ecx
    00000c92: 	movl	$0x1f40, %esi
    00000c97: 	movq	-0x1f4e0(%rbp), %rdi
    00000c9e: 	callq	_Z9summarizePKciiii # Offset: 3230
    00000ca3: 	movq	-0x1f5a8(%rbp), %rdi
    00000caa: 	leaq	DATAat0x2b34f(%rip), %rdx
    00000cb1: 	movq	%r13, %rsi
    00000cb4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3252
    00000cb9: 	callq	clock@PLT # Offset: 3257
    00000cbe: 	movq	%rax, start_time(%rip)
    00000cc5: 	movl	iterations(%rip), %eax
    00000ccb: 	testl	%eax, %eax
    00000ccd: 	jle	.Ltmp2437 # Offset: 3277
    00000cd3: 	movq	%r15, %xmm7
    00000cd8: 	imulq	$0x1f40, %r15, %r13
    00000cdf: 	xorl	%r12d, %r12d
    00000ce2: 	movq	-0x1f558(%rbp), %xmm6
    00000cea: 	punpcklqdq	%xmm7, %xmm6
    00000cee: 	movaps	%xmm6, -0x1f550(%rbp)
    00000cf5: 	nopl	(%rax) # Size: 3
.Ltmp2440:
    00000cf8: 	movq	-0x1f560(%rbp), %rax
    00000cff: 	movq	-0x1f558(%rbp), %rsi
    00000d06: 	pxor	%xmm0, %xmm0
    00000d0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2438:
    00000d10: 	movdqa	-0x1f550(%rbp), %xmm1
    00000d18: 	paddq	(%rax), %xmm1
    00000d1c: 	addq	$0x10, %rax
    00000d20: 	paddq	%xmm1, %xmm0
    00000d24: 	cmpq	%rbx, %rax
    00000d27: 	jne	.Ltmp2438 # Offset: 3367
    00000d29: 	cvttsd2si	init_value(%rip), %rax
    00000d32: 	movq	%rsi, %rcx
    00000d35: 	movhlps	%xmm0, %xmm7
    00000d38: 	movq	%rsi, -0x1f558(%rbp)
    00000d3f: 	movq	%xmm0, %rdi
    00000d44: 	movq	%xmm7, %rsi
    00000d49: 	subq	%r13, %rsi
    00000d4c: 	addq	%rcx, %rax
    00000d4f: 	imulq	$0x1f40, %rax, %rax
    00000d56: 	subq	%rax, %rdi
    00000d59: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 3417
    00000d5e: 	testq	%rax, %rax
    00000d61: 	jg	.Ltmp2439 # Offset: 3425
.Ltmp2579:
    00000d67: 	addl	$0x1, %r12d
    00000d6b: 	cmpl	iterations(%rip), %r12d
    00000d72: 	jl	.Ltmp2440 # Offset: 3442
.Ltmp2437:
    00000d74: 	movq	-0x1f5a8(%rbp), %rsi
    00000d7b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000d82: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3458
    00000d87: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d8e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000d95: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d9c: 	je	.Ltmp2441 # Offset: 3484
.Ltmp2599:
    00000da2: 	movq	-0x20(%rax), %r12
    00000da6: 	callq	clock@PLT # Offset: 3494
    00000dab: 	pxor	%xmm0, %xmm0
    00000daf: 	movq	%rax, end_time(%rip)
    00000db6: 	movq	%r12, %rdi
    00000db9: 	subq	start_time(%rip), %rax
    00000dc0: 	cvtsi2sd	%rax, %xmm0
    00000dc5: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000dcd: 	callq	_Z13record_resultdPKc # Offset: 3533
    00000dd2: 	movq	-0x1f460(%rbp), %rdi
    00000dd9: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000de0: 	je	.Ltmp2442 # Offset: 3552
    00000de2: 	movq	-0x1f450(%rbp), %rax
    00000de9: 	leaq	0x1(%rax), %rsi
    00000ded: 	callq	_ZdlPvm@PLT # Offset: 3565
.Ltmp2442:
    00000df2: 	movq	-0x1f5b8(%rbp), %rsi
    00000df9: 	movq	-0x1f5a8(%rbp), %rdi
    00000e00: 	leaq	DATAat0x2b35d(%rip), %rdx
    00000e07: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3591
    00000e0c: 	callq	clock@PLT # Offset: 3596
    00000e11: 	movq	%rax, start_time(%rip)
    00000e18: 	movl	iterations(%rip), %eax
    00000e1e: 	testl	%eax, %eax
    00000e20: 	jle	.Ltmp2443 # Offset: 3616
    00000e26: 	movq	-0x1f5d8(%rbp), %rax
    00000e2d: 	movq	-0x1f558(%rbp), %r13
    00000e34: 	xorl	%r12d, %r12d
    00000e37: 	addq	-0x1f5c0(%rbp), %r13
    00000e3e: 	addq	-0x1f570(%rbp), %r13
    00000e45: 	addq	%r15, %rax
    00000e48: 	addq	-0x1f5d0(%rbp), %rax
    00000e4f: 	addq	%r14, %r13
    00000e52: 	addq	-0x1f5c8(%rbp), %rax
    00000e59: 	imulq	$0x1f40, %rax, %rdi
    00000e60: 	movq	%r13, %xmm2
    00000e65: 	movq	%rax, %xmm5
    00000e6a: 	punpcklqdq	%xmm5, %xmm2
    00000e6e: 	movaps	%xmm2, -0x1f550(%rbp)
    00000e75: 	movq	%rdi, -0x1f580(%rbp)
    00000e7c: 	nopl	(%rax) # Size: 4
.Ltmp2446:
    00000e80: 	movq	-0x1f560(%rbp), %rax
    00000e87: 	movq	-0x1f558(%rbp), %rcx
    00000e8e: 	pxor	%xmm0, %xmm0
    00000e92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2444:
    00000e98: 	movdqa	-0x1f550(%rbp), %xmm1
    00000ea0: 	paddq	(%rax), %xmm1
    00000ea4: 	addq	$0x10, %rax
    00000ea8: 	paddq	%xmm1, %xmm0
    00000eac: 	cmpq	%rbx, %rax
    00000eaf: 	jne	.Ltmp2444 # Offset: 3759
    00000eb1: 	movhlps	%xmm0, %xmm7
    00000eb4: 	movq	%xmm0, %rdi
    00000eb9: 	movq	%rcx, -0x1f558(%rbp)
    00000ec0: 	cvttsd2si	init_value(%rip), %rax
    00000ec9: 	movq	%xmm7, %rsi
    00000ece: 	subq	-0x1f580(%rbp), %rsi
    00000ed5: 	addq	%r13, %rax
    00000ed8: 	imulq	$0x1f40, %rax, %rax
    00000edf: 	subq	%rax, %rdi
    00000ee2: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 3810
    00000ee7: 	testq	%rax, %rax
    00000eea: 	jg	.Ltmp2445 # Offset: 3818
.Ltmp2578:
    00000ef0: 	addl	$0x1, %r12d
    00000ef4: 	cmpl	iterations(%rip), %r12d
    00000efb: 	jl	.Ltmp2446 # Offset: 3835
.Ltmp2443:
    00000efd: 	movq	-0x1f5a8(%rbp), %rsi
    00000f04: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000f0b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3851
    00000f10: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000f17: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f1e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f25: 	je	.Ltmp2447 # Offset: 3877
.Ltmp2598:
    00000f2b: 	movq	-0x20(%rax), %r12
    00000f2f: 	callq	clock@PLT # Offset: 3887
    00000f34: 	pxor	%xmm0, %xmm0
    00000f38: 	movq	%rax, end_time(%rip)
    00000f3f: 	movq	%r12, %rdi
    00000f42: 	subq	start_time(%rip), %rax
    00000f49: 	cvtsi2sd	%rax, %xmm0
    00000f4e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000f56: 	callq	_Z13record_resultdPKc # Offset: 3926
    00000f5b: 	movq	-0x1f460(%rbp), %rdi
    00000f62: 	cmpq	-0x1f5b0(%rbp), %rdi
    00000f69: 	je	.Ltmp2448 # Offset: 3945
    00000f6b: 	movq	-0x1f450(%rbp), %rax
    00000f72: 	leaq	0x1(%rax), %rsi
    00000f76: 	callq	_ZdlPvm@PLT # Offset: 3958
.Ltmp2448:
    00000f7b: 	movq	-0x1f5b8(%rbp), %rsi
    00000f82: 	movq	-0x1f5a8(%rbp), %rdi
    00000f89: 	leaq	DATAat0x2b375(%rip), %rdx
    00000f90: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3984
    00000f95: 	callq	clock@PLT # Offset: 3989
    00000f9a: 	movq	%rax, start_time(%rip)
    00000fa1: 	movl	iterations(%rip), %eax
    00000fa7: 	testl	%eax, %eax
    00000fa9: 	jle	.Ltmp2449 # Offset: 4009
    00000faf: 	movq	-0x1f5d8(%rbp), %rax
    00000fb6: 	movq	%r15, %xmm2
    00000fbb: 	xorl	%r12d, %r12d
    00000fbe: 	movq	-0x1f558(%rbp), %xmm6
    00000fc6: 	movq	-0x1f570(%rbp), %xmm4
    00000fce: 	movq	%r14, %xmm3
    00000fd3: 	movq	-0x1f5c0(%rbp), %xmm5
    00000fdb: 	leaq	(%r15,%rax), %r13
    00000fdf: 	addq	-0x1f5d0(%rbp), %r13
    00000fe6: 	punpcklqdq	%xmm2, %xmm6
    00000fea: 	addq	-0x1f5c8(%rbp), %r13
    00000ff1: 	imulq	$0x1f40, %r13, %r13
    00000ff8: 	movhps	-0x1f5c8(%rbp), %xmm3
    00000fff: 	movhps	-0x1f5d0(%rbp), %xmm4
    00001006: 	movaps	%xmm6, -0x1f550(%rbp)
    0000100d: 	movhps	-0x1f5d8(%rbp), %xmm5
    00001014: 	movaps	%xmm3, -0x1f580(%rbp)
    0000101b: 	movaps	%xmm4, -0x1f590(%rbp)
    00001022: 	movaps	%xmm5, -0x1f5a0(%rbp)
    00001029: 	nopl	(%rax) # Size: 7
.Ltmp2452:
    00001030: 	movq	-0x1f560(%rbp), %rax
    00001037: 	movq	-0x1f558(%rbp), %rdi
    0000103e: 	pxor	%xmm1, %xmm1
    00001042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2450:
    00001048: 	movdqa	-0x1f550(%rbp), %xmm0
    00001050: 	paddq	(%rax), %xmm0
    00001054: 	addq	$0x10, %rax
    00001058: 	paddq	-0x1f5a0(%rbp), %xmm0
    00001060: 	paddq	-0x1f590(%rbp), %xmm0
    00001068: 	paddq	-0x1f580(%rbp), %xmm0
    00001070: 	paddq	%xmm0, %xmm1
    00001074: 	cmpq	%rax, %rbx
    00001077: 	jne	.Ltmp2450 # Offset: 4215
    00001079: 	cvttsd2si	init_value(%rip), %rax
    00001082: 	movq	%rdi, %rcx
    00001085: 	movhlps	%xmm1, %xmm7
    00001088: 	movq	%rdi, -0x1f558(%rbp)
    0000108f: 	movq	%xmm7, %rsi
    00001094: 	movq	%xmm1, %rdi
    00001099: 	subq	%r13, %rsi
    0000109c: 	addq	%rcx, %rax
    0000109f: 	addq	-0x1f5c0(%rbp), %rax
    000010a6: 	addq	-0x1f570(%rbp), %rax
    000010ad: 	addq	%r14, %rax
    000010b0: 	imulq	$0x1f40, %rax, %rax
    000010b7: 	subq	%rax, %rdi
    000010ba: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 4282
    000010bf: 	testq	%rax, %rax
    000010c2: 	jg	.Ltmp2451 # Offset: 4290
.Ltmp2577:
    000010c8: 	addl	$0x1, %r12d
    000010cc: 	cmpl	iterations(%rip), %r12d
    000010d3: 	jl	.Ltmp2452 # Offset: 4307
.Ltmp2449:
    000010d9: 	movq	-0x1f5a8(%rbp), %rsi
    000010e0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000010e7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4327
    000010ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010f3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000010fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001101: 	je	.Ltmp2453 # Offset: 4353
.Ltmp2597:
    00001107: 	movq	-0x20(%rax), %r12
    0000110b: 	callq	clock@PLT # Offset: 4363
    00001110: 	pxor	%xmm0, %xmm0
    00001114: 	movq	%rax, end_time(%rip)
    0000111b: 	movq	%r12, %rdi
    0000111e: 	subq	start_time(%rip), %rax
    00001125: 	cvtsi2sd	%rax, %xmm0
    0000112a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001132: 	callq	_Z13record_resultdPKc # Offset: 4402
    00001137: 	movq	-0x1f460(%rbp), %rdi
    0000113e: 	cmpq	-0x1f5b0(%rbp), %rdi
    00001145: 	je	.Ltmp2454 # Offset: 4421
    00001147: 	movq	-0x1f450(%rbp), %rax
    0000114e: 	leaq	0x1(%rax), %rsi
    00001152: 	callq	_ZdlPvm@PLT # Offset: 4434
.Ltmp2454:
    00001157: 	movq	-0x1f5b8(%rbp), %rsi
    0000115e: 	movq	-0x1f5a8(%rbp), %rdi
    00001165: 	leaq	DATAat0x2b38e(%rip), %rdx
    0000116c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4460
    00001171: 	callq	clock@PLT # Offset: 4465
    00001176: 	movq	%rax, start_time(%rip)
    0000117d: 	movl	iterations(%rip), %eax
    00001183: 	testl	%eax, %eax
    00001185: 	jle	.Ltmp2455 # Offset: 4485
    0000118b: 	movq	%r15, %xmm6
    00001190: 	imulq	$-0x1f40, %r15, %r13
    00001197: 	xorl	%r12d, %r12d
    0000119a: 	movq	-0x1f558(%rbp), %xmm2
    000011a2: 	punpcklqdq	%xmm6, %xmm2
    000011a6: 	movaps	%xmm2, -0x1f550(%rbp)
    000011ad: 	nopl	(%rax) # Size: 3
.Ltmp2458:
    000011b0: 	movq	-0x1f560(%rbp), %rax
    000011b7: 	movq	-0x1f558(%rbp), %rsi
    000011be: 	pxor	%xmm0, %xmm0
    000011c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2456:
    000011c8: 	paddq	(%rax), %xmm0
    000011cc: 	addq	$0x10, %rax
    000011d0: 	psubq	-0x1f550(%rbp), %xmm0
    000011d8: 	cmpq	%rbx, %rax
    000011db: 	jne	.Ltmp2456 # Offset: 4571
    000011dd: 	cvttsd2si	init_value(%rip), %rax
    000011e6: 	movq	%rsi, %rcx
    000011e9: 	movhlps	%xmm0, %xmm7
    000011ec: 	movq	%rsi, -0x1f558(%rbp)
    000011f3: 	movq	%xmm0, %rdi
    000011f8: 	movq	%xmm7, %rsi
    000011fd: 	subq	%r13, %rsi
    00001200: 	subq	%rcx, %rax
    00001203: 	imulq	$0x1f40, %rax, %rax
    0000120a: 	subq	%rax, %rdi
    0000120d: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 4621
    00001212: 	testq	%rax, %rax
    00001215: 	jg	.Ltmp2457 # Offset: 4629
.Ltmp2576:
    0000121b: 	addl	$0x1, %r12d
    0000121f: 	cmpl	iterations(%rip), %r12d
    00001226: 	jl	.Ltmp2458 # Offset: 4646
.Ltmp2455:
    00001228: 	movq	-0x1f5a8(%rbp), %rsi
    0000122f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001236: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4662
    0000123b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001242: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001249: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001250: 	je	.Ltmp2459 # Offset: 4688
.Ltmp2596:
    00001256: 	movq	-0x20(%rax), %r12
    0000125a: 	callq	clock@PLT # Offset: 4698
    0000125f: 	pxor	%xmm0, %xmm0
    00001263: 	movq	%rax, end_time(%rip)
    0000126a: 	movq	%r12, %rdi
    0000126d: 	subq	start_time(%rip), %rax
    00001274: 	cvtsi2sd	%rax, %xmm0
    00001279: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001281: 	callq	_Z13record_resultdPKc # Offset: 4737
    00001286: 	movq	-0x1f460(%rbp), %rdi
    0000128d: 	cmpq	-0x1f5b0(%rbp), %rdi
    00001294: 	je	.Ltmp2460 # Offset: 4756
    00001296: 	movq	-0x1f450(%rbp), %rax
    0000129d: 	leaq	0x1(%rax), %rsi
    000012a1: 	callq	_ZdlPvm@PLT # Offset: 4769
.Ltmp2460:
    000012a6: 	movq	-0x1f5b8(%rbp), %rsi
    000012ad: 	movq	-0x1f5a8(%rbp), %rdi
    000012b4: 	leaq	DATAat0x2b3a1(%rip), %rdx
    000012bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4795
    000012c0: 	callq	clock@PLT # Offset: 4800
    000012c5: 	movl	iterations(%rip), %r13d
    000012cc: 	movq	%rax, start_time(%rip)
    000012d3: 	testl	%r13d, %r13d
    000012d6: 	jle	.Ltmp2461 # Offset: 4822
    000012dc: 	movq	-0x1f5d8(%rbp), %rax
    000012e3: 	movq	-0x1f558(%rbp), %r13
    000012ea: 	xorl	%r12d, %r12d
    000012ed: 	addq	-0x1f5c0(%rbp), %r13
    000012f4: 	addq	-0x1f570(%rbp), %r13
    000012fb: 	addq	%r15, %rax
    000012fe: 	addq	-0x1f5d0(%rbp), %rax
    00001305: 	addq	%r14, %r13
    00001308: 	addq	-0x1f5c8(%rbp), %rax
    0000130f: 	imulq	$-0x1f40, %rax, %rsi
    00001316: 	movq	%r13, %xmm6
    0000131b: 	movq	%rax, %xmm3
    00001320: 	punpcklqdq	%xmm3, %xmm6
    00001324: 	movaps	%xmm6, -0x1f550(%rbp)
    0000132b: 	movq	%rsi, -0x1f580(%rbp)
    00001332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2464:
    00001338: 	movq	-0x1f560(%rbp), %rax
    0000133f: 	movq	-0x1f558(%rbp), %rcx
    00001346: 	pxor	%xmm0, %xmm0
    0000134a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2462:
    00001350: 	paddq	(%rax), %xmm0
    00001354: 	addq	$0x10, %rax
    00001358: 	psubq	-0x1f550(%rbp), %xmm0
    00001360: 	cmpq	%rbx, %rax
    00001363: 	jne	.Ltmp2462 # Offset: 4963
    00001365: 	movhlps	%xmm0, %xmm7
    00001368: 	movq	%xmm0, %rdi
    0000136d: 	movq	%rcx, -0x1f558(%rbp)
    00001374: 	cvttsd2si	init_value(%rip), %rax
    0000137d: 	movq	%xmm7, %rsi
    00001382: 	subq	-0x1f580(%rbp), %rsi
    00001389: 	subq	%r13, %rax
    0000138c: 	imulq	$0x1f40, %rax, %rax
    00001393: 	subq	%rax, %rdi
    00001396: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 5014
    0000139b: 	testq	%rax, %rax
    0000139e: 	jg	.Ltmp2463 # Offset: 5022
.Ltmp2575:
    000013a4: 	addl	$0x1, %r12d
    000013a8: 	cmpl	iterations(%rip), %r12d
    000013af: 	jl	.Ltmp2464 # Offset: 5039
.Ltmp2461:
    000013b1: 	movq	-0x1f5a8(%rbp), %rsi
    000013b8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013bf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5055
    000013c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013cb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000013d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000013d9: 	je	.Ltmp2465 # Offset: 5081
.Ltmp2595:
    000013df: 	movq	-0x20(%rax), %r12
    000013e3: 	callq	clock@PLT # Offset: 5091
    000013e8: 	pxor	%xmm0, %xmm0
    000013ec: 	movq	%rax, end_time(%rip)
    000013f3: 	movq	%r12, %rdi
    000013f6: 	subq	start_time(%rip), %rax
    000013fd: 	cvtsi2sd	%rax, %xmm0
    00001402: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000140a: 	callq	_Z13record_resultdPKc # Offset: 5130
    0000140f: 	movq	-0x1f460(%rbp), %rdi
    00001416: 	cmpq	-0x1f5b0(%rbp), %rdi
    0000141d: 	je	.Ltmp2466 # Offset: 5149
    0000141f: 	movq	-0x1f450(%rbp), %rax
    00001426: 	leaq	0x1(%rax), %rsi
    0000142a: 	callq	_ZdlPvm@PLT # Offset: 5162
.Ltmp2466:
    0000142f: 	movq	-0x1f5b8(%rbp), %rsi
    00001436: 	movq	-0x1f5a8(%rbp), %rdi
    0000143d: 	leaq	DATAat0x2b3be(%rip), %rdx
    00001444: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5188
    00001449: 	callq	clock@PLT # Offset: 5193
    0000144e: 	movl	iterations(%rip), %r12d
    00001455: 	movq	%rax, start_time(%rip)
    0000145c: 	testl	%r12d, %r12d
    0000145f: 	jle	.Ltmp2467 # Offset: 5215
    00001465: 	movq	-0x1f558(%rbp), %xmm3
    0000146d: 	movq	%r15, %r13
    00001470: 	xorl	%r12d, %r12d
    00001473: 	movq	%r15, %xmm4
    00001478: 	movq	-0x1f570(%rbp), %xmm5
    00001480: 	negq	%r13
    00001483: 	subq	-0x1f5d8(%rbp), %r13
    0000148a: 	movq	-0x1f5c0(%rbp), %xmm2
    00001492: 	subq	-0x1f5d0(%rbp), %r13
    00001499: 	punpcklqdq	%xmm4, %xmm3
    0000149d: 	movq	%r14, %xmm4
    000014a2: 	subq	-0x1f5c8(%rbp), %r13
    000014a9: 	movhps	-0x1f5c8(%rbp), %xmm4
    000014b0: 	movhps	-0x1f5d0(%rbp), %xmm5
    000014b7: 	movaps	%xmm3, -0x1f550(%rbp)
    000014be: 	imulq	$0x1f40, %r13, %r13
    000014c5: 	movhps	-0x1f5d8(%rbp), %xmm2
    000014cc: 	movaps	%xmm4, -0x1f580(%rbp)
    000014d3: 	movaps	%xmm5, -0x1f590(%rbp)
    000014da: 	movaps	%xmm2, -0x1f5a0(%rbp)
    000014e1: 	nopl	(%rax) # Size: 7
.Ltmp2470:
    000014e8: 	movq	-0x1f560(%rbp), %rax
    000014ef: 	movq	-0x1f558(%rbp), %rdi
    000014f6: 	pxor	%xmm1, %xmm1
    000014fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2468:
    00001500: 	movdqa	(%rax), %xmm0
    00001504: 	psubq	-0x1f550(%rbp), %xmm0
    0000150c: 	addq	$0x10, %rax
    00001510: 	psubq	-0x1f5a0(%rbp), %xmm0
    00001518: 	psubq	-0x1f590(%rbp), %xmm0
    00001520: 	psubq	-0x1f580(%rbp), %xmm0
    00001528: 	paddq	%xmm0, %xmm1
    0000152c: 	cmpq	%rax, %rbx
    0000152f: 	jne	.Ltmp2468 # Offset: 5423
    00001531: 	cvttsd2si	init_value(%rip), %rax
    0000153a: 	movq	%rdi, %rcx
    0000153d: 	movhlps	%xmm1, %xmm7
    00001540: 	movq	%rdi, -0x1f558(%rbp)
    00001547: 	movq	%xmm7, %rsi
    0000154c: 	movq	%xmm1, %rdi
    00001551: 	subq	%r13, %rsi
    00001554: 	subq	%rcx, %rax
    00001557: 	subq	-0x1f5c0(%rbp), %rax
    0000155e: 	subq	-0x1f570(%rbp), %rax
    00001565: 	subq	%r14, %rax
    00001568: 	imulq	$0x1f40, %rax, %rax
    0000156f: 	subq	%rax, %rdi
    00001572: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 5490
    00001577: 	testq	%rax, %rax
    0000157a: 	jg	.Ltmp2469 # Offset: 5498
.Ltmp2574:
    00001580: 	addl	$0x1, %r12d
    00001584: 	cmpl	iterations(%rip), %r12d
    0000158b: 	jl	.Ltmp2470 # Offset: 5515
.Ltmp2467:
    00001591: 	movq	-0x1f5a8(%rbp), %rsi
    00001598: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000159f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5535
    000015a4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000015ab: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000015b2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000015b9: 	je	.Ltmp2471 # Offset: 5561
.Ltmp2594:
    000015bf: 	movq	-0x20(%rax), %r12
    000015c3: 	callq	clock@PLT # Offset: 5571
    000015c8: 	pxor	%xmm0, %xmm0
    000015cc: 	movq	%rax, end_time(%rip)
    000015d3: 	movq	%r12, %rdi
    000015d6: 	subq	start_time(%rip), %rax
    000015dd: 	cvtsi2sd	%rax, %xmm0
    000015e2: 	divsd	DATAat0x2b628(%rip), %xmm0
    000015ea: 	callq	_Z13record_resultdPKc # Offset: 5610
    000015ef: 	movq	-0x1f460(%rbp), %rdi
    000015f6: 	cmpq	-0x1f5b0(%rbp), %rdi
    000015fd: 	je	.Ltmp2472 # Offset: 5629
    000015ff: 	movq	-0x1f450(%rbp), %rax
    00001606: 	leaq	0x1(%rax), %rsi
    0000160a: 	callq	_ZdlPvm@PLT # Offset: 5642
.Ltmp2472:
    0000160f: 	movq	-0x1f5b8(%rbp), %rsi
    00001616: 	movq	-0x1f5a8(%rbp), %rdi
    0000161d: 	leaq	DATAat0x2b3dc(%rip), %rdx
    00001624: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5668
    00001629: 	callq	clock@PLT # Offset: 5673
    0000162e: 	movl	iterations(%rip), %r11d
    00001635: 	xorl	%r12d, %r12d
    00001638: 	leaq	DATAat0x2b1d0(%rip), %r13
    0000163f: 	movq	%rax, start_time(%rip)
    00001646: 	testl	%r11d, %r11d
    00001649: 	jle	.Ltmp2473 # Offset: 5705
    0000164f: 	nop # Size: 1
.Ltmp2476:
    00001650: 	movq	-0x1f560(%rbp), %rdx
    00001657: 	movq	-0x1f558(%rbp), %r10
    0000165e: 	xorl	%esi, %esi
    00001660: 	xorl	%edi, %edi
    00001662: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2474:
    00001668: 	movq	(%rdx), %rax
    0000166b: 	movq	0x8(%rdx), %rcx
    0000166f: 	movq	%r10, %r8
    00001672: 	movq	%r15, %r9
    00001675: 	addq	$0x10, %rdx
    00001679: 	imulq	%rax, %r8
    0000167d: 	imulq	%rcx, %r9
    00001681: 	imulq	%r15, %rax
    00001685: 	imulq	%r10, %rcx
    00001689: 	subq	%r9, %r8
    0000168c: 	addq	%r8, %rdi
    0000168f: 	addq	%rcx, %rax
    00001692: 	addq	%rax, %rsi
    00001695: 	cmpq	%rbx, %rdx
    00001698: 	jne	.Ltmp2474 # Offset: 5784
    0000169a: 	cvttsd2si	init_value(%rip), %rax
    000016a3: 	movq	%r15, %rdx
    000016a6: 	movq	%r10, -0x1f558(%rbp)
    000016ad: 	imulq	%rax, %rdx
    000016b1: 	imulq	%r10, %rax
    000016b5: 	imulq	$0x1f40, %rdx, %rdx
    000016bc: 	imulq	$0x1f40, %rax, %rax
    000016c3: 	subq	%rdx, %rsi
    000016c6: 	subq	%rax, %rdi
    000016c9: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 5833
    000016ce: 	testq	%rax, %rax
    000016d1: 	jg	.Ltmp2475 # Offset: 5841
.Ltmp2573:
    000016d7: 	addl	$0x1, %r12d
    000016db: 	cmpl	iterations(%rip), %r12d
    000016e2: 	jl	.Ltmp2476 # Offset: 5858
.Ltmp2473:
    000016e8: 	movq	-0x1f5a8(%rbp), %rsi
    000016ef: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016f6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5878
    000016fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001702: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001709: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001710: 	je	.Ltmp2477 # Offset: 5904
.Ltmp2593:
    00001716: 	movq	-0x20(%rax), %r12
    0000171a: 	callq	clock@PLT # Offset: 5914
    0000171f: 	pxor	%xmm0, %xmm0
    00001723: 	movq	%rax, end_time(%rip)
    0000172a: 	movq	%r12, %rdi
    0000172d: 	subq	start_time(%rip), %rax
    00001734: 	cvtsi2sd	%rax, %xmm0
    00001739: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001741: 	callq	_Z13record_resultdPKc # Offset: 5953
    00001746: 	movq	-0x1f460(%rbp), %rdi
    0000174d: 	cmpq	-0x1f5b0(%rbp), %rdi
    00001754: 	je	.Ltmp2478 # Offset: 5972
    00001756: 	movq	-0x1f450(%rbp), %rax
    0000175d: 	leaq	0x1(%rax), %rsi
    00001761: 	callq	_ZdlPvm@PLT # Offset: 5985
.Ltmp2478:
    00001766: 	movq	-0x1f5b8(%rbp), %rsi
    0000176d: 	movq	-0x1f5a8(%rbp), %rdi
    00001774: 	leaq	DATAat0x2b3ef(%rip), %rdx
    0000177b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6011
    00001780: 	callq	clock@PLT # Offset: 6016
    00001785: 	movq	-0x1f5d8(%rbp), %rsi
    0000178c: 	movl	iterations(%rip), %r10d
    00001793: 	movq	%rax, start_time(%rip)
    0000179a: 	movq	-0x1f5c0(%rbp), %rax
    000017a1: 	leaq	(%rax,%rax), %rdi
    000017a5: 	shlq	$0x2, %rax
    000017a9: 	movq	%rdi, -0x1f580(%rbp)
    000017b0: 	leaq	(,%rsi,4), %rdi
    000017b8: 	addq	%rsi, %rsi
    000017bb: 	movq	%rdi, -0x1f590(%rbp)
    000017c2: 	movq	%rsi, -0x1f5a0(%rbp)
    000017c9: 	movq	%rax, -0x1f600(%rbp)
    000017d0: 	testl	%r10d, %r10d
    000017d3: 	jle	.Ltmp2479 # Offset: 6099
    000017d9: 	movq	-0x1f570(%rbp), %rdi
    000017e0: 	movq	-0x1f5d0(%rbp), %rsi
    000017e7: 	movq	%r14, %r13
    000017ea: 	movl	$0x0, -0x1f550(%rbp)
    000017f4: 	movq	-0x1f5e0(%rbp), %rax
    000017fb: 	movq	-0x1f5e8(%rbp), %rdx
    00001802: 	subq	-0x1f580(%rbp), %rax
    00001809: 	subq	-0x1f590(%rbp), %rdx
    00001810: 	movq	%rdi, %r12
    00001813: 	subq	%rdx, %rax
    00001816: 	movq	-0x1f5f8(%rbp), %rcx
    0000181d: 	movq	-0x1f5f0(%rbp), %rdx
    00001824: 	subq	-0x1f600(%rbp), %rcx
    0000182b: 	imulq	%rax, %r12
    0000182f: 	subq	-0x1f5a0(%rbp), %rdx
    00001836: 	addq	%rcx, %rdx
    00001839: 	imulq	%rsi, %rax
    0000183d: 	movq	%rsi, %rcx
    00001840: 	imulq	%rdx, %rcx
    00001844: 	imulq	%rdi, %rdx
    00001848: 	movq	-0x1f5c8(%rbp), %rdi
    0000184f: 	subq	%rcx, %r12
    00001852: 	addq	%rdx, %rax
    00001855: 	imulq	%r12, %r13
    00001859: 	movq	%rdi, %rdx
    0000185c: 	imulq	%rax, %rdx
    00001860: 	imulq	%rdi, %r12
    00001864: 	imulq	%r14, %rax
    00001868: 	subq	%rdx, %r13
    0000186b: 	addq	%rax, %r12
    0000186e: 	nop # Size: 2
.Ltmp2482:
    00001870: 	movq	-0x1f560(%rbp), %rdx
    00001877: 	movq	-0x1f558(%rbp), %r10
    0000187e: 	xorl	%esi, %esi
    00001880: 	xorl	%edi, %edi
    00001882: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2480:
    00001888: 	movq	(%rdx), %rax
    0000188b: 	movq	0x8(%rdx), %rcx
    0000188f: 	movq	%r13, %r8
    00001892: 	movq	%r12, %r9
    00001895: 	addq	$0x10, %rdx
    00001899: 	imulq	%rax, %r8
    0000189d: 	imulq	%rcx, %r9
    000018a1: 	imulq	%r12, %rax
    000018a5: 	imulq	%r13, %rcx
    000018a9: 	subq	%r9, %r8
    000018ac: 	addq	%r8, %rdi
    000018af: 	addq	%rcx, %rax
    000018b2: 	addq	%rax, %rsi
    000018b5: 	cmpq	%rdx, %rbx
    000018b8: 	jne	.Ltmp2480 # Offset: 6328
    000018ba: 	cvttsd2si	init_value(%rip), %rax
    000018c3: 	movq	%r12, %rdx
    000018c6: 	movq	%r10, -0x1f558(%rbp)
    000018cd: 	imulq	%rax, %rdx
    000018d1: 	imulq	%r13, %rax
    000018d5: 	imulq	$0x1f40, %rdx, %rdx
    000018dc: 	imulq	$0x1f40, %rax, %rax
    000018e3: 	subq	%rdx, %rsi
    000018e6: 	subq	%rax, %rdi
    000018e9: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 6377
    000018ee: 	testq	%rax, %rax
    000018f1: 	jg	.Ltmp2481 # Offset: 6385
.Ltmp2572:
    000018f7: 	addl	$0x1, -0x1f550(%rbp)
    000018fe: 	movl	-0x1f550(%rbp), %eax
    00001904: 	cmpl	iterations(%rip), %eax
    0000190a: 	jl	.Ltmp2482 # Offset: 6410
.Ltmp2479:
    00001910: 	movq	-0x1f5a8(%rbp), %rsi
    00001917: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000191e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6430
    00001923: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000192a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001931: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001938: 	je	.Ltmp2483 # Offset: 6456
.Ltmp2592:
    0000193e: 	movq	-0x20(%rax), %r12
    00001942: 	callq	clock@PLT # Offset: 6466
    00001947: 	pxor	%xmm0, %xmm0
    0000194b: 	movq	%rax, end_time(%rip)
    00001952: 	movq	%r12, %rdi
    00001955: 	subq	start_time(%rip), %rax
    0000195c: 	cvtsi2sd	%rax, %xmm0
    00001961: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001969: 	callq	_Z13record_resultdPKc # Offset: 6505
    0000196e: 	movq	-0x1f460(%rbp), %rdi
    00001975: 	cmpq	-0x1f5b0(%rbp), %rdi
    0000197c: 	je	.Ltmp2484 # Offset: 6524
    0000197e: 	movq	-0x1f450(%rbp), %rax
    00001985: 	leaq	0x1(%rax), %rsi
    00001989: 	callq	_ZdlPvm@PLT # Offset: 6537
.Ltmp2484:
    0000198e: 	movq	-0x1f5b8(%rbp), %rsi
    00001995: 	movq	-0x1f5a8(%rbp), %rdi
    0000199c: 	leaq	DATAat0x2b590(%rip), %rdx
    000019a3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6563
    000019a8: 	callq	clock@PLT # Offset: 6568
    000019ad: 	movl	iterations(%rip), %r9d
    000019b4: 	movq	%rax, start_time(%rip)
    000019bb: 	testl	%r9d, %r9d
    000019be: 	jle	.Ltmp2485 # Offset: 6590
    000019c4: 	movq	-0x1f570(%rbp), %rdi
    000019cb: 	movq	-0x1f5d0(%rbp), %r9
    000019d2: 	movq	%r14, %r13
    000019d5: 	xorl	%r12d, %r12d
    000019d8: 	movq	-0x1f5e0(%rbp), %rax
    000019df: 	movq	-0x1f5e8(%rbp), %rdx
    000019e6: 	subq	-0x1f580(%rbp), %rax
    000019ed: 	subq	-0x1f590(%rbp), %rdx
    000019f4: 	movq	%r9, %rsi
    000019f7: 	subq	%rdx, %rax
    000019fa: 	movq	-0x1f5f0(%rbp), %rcx
    00001a01: 	movq	-0x1f5f8(%rbp), %rdx
    00001a08: 	subq	-0x1f5a0(%rbp), %rcx
    00001a0f: 	subq	-0x1f600(%rbp), %rdx
    00001a16: 	addq	%rdx, %rcx
    00001a19: 	movq	%rdi, %rdx
    00001a1c: 	imulq	%rax, %rdx
    00001a20: 	imulq	%rcx, %rsi
    00001a24: 	imulq	%r9, %rax
    00001a28: 	imulq	%rdi, %rcx
    00001a2c: 	movq	-0x1f5c8(%rbp), %rdi
    00001a33: 	subq	%rsi, %rdx
    00001a36: 	imulq	%rdx, %r13
    00001a3a: 	addq	%rcx, %rax
    00001a3d: 	imulq	%rdi, %rdx
    00001a41: 	movq	%rdi, %rcx
    00001a44: 	imulq	%rax, %rcx
    00001a48: 	imulq	%r14, %rax
    00001a4c: 	subq	%rcx, %r13
    00001a4f: 	addq	%rdx, %rax
    00001a52: 	movq	%r13, %xmm6
    00001a57: 	imulq	$0x1f40, %rax, %rdi
    00001a5e: 	movq	%rax, %xmm7
    00001a63: 	punpcklqdq	%xmm7, %xmm6
    00001a67: 	movaps	%xmm6, -0x1f550(%rbp)
    00001a6e: 	movq	%rdi, -0x1f580(%rbp)
    00001a75: 	nopl	(%rax) # Size: 3
.Ltmp2488:
    00001a78: 	movq	-0x1f560(%rbp), %rax
    00001a7f: 	movq	-0x1f558(%rbp), %rsi
    00001a86: 	pxor	%xmm0, %xmm0
    00001a8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2486:
    00001a90: 	movdqa	-0x1f550(%rbp), %xmm1
    00001a98: 	paddq	(%rax), %xmm1
    00001a9c: 	addq	$0x10, %rax
    00001aa0: 	paddq	%xmm1, %xmm0
    00001aa4: 	cmpq	%rax, %rbx
    00001aa7: 	jne	.Ltmp2486 # Offset: 6823
    00001aa9: 	movhlps	%xmm0, %xmm7
    00001aac: 	movq	%xmm0, %rdi
    00001ab1: 	movq	%rsi, -0x1f558(%rbp)
    00001ab8: 	cvttsd2si	init_value(%rip), %rax
    00001ac1: 	movq	%xmm7, %rsi
    00001ac6: 	subq	-0x1f580(%rbp), %rsi
    00001acd: 	addq	%r13, %rax
    00001ad0: 	imulq	$0x1f40, %rax, %rax
    00001ad7: 	subq	%rax, %rdi
    00001ada: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 6874
    00001adf: 	testq	%rax, %rax
    00001ae2: 	jg	.Ltmp2487 # Offset: 6882
.Ltmp2571:
    00001ae8: 	addl	$0x1, %r12d
    00001aec: 	cmpl	iterations(%rip), %r12d
    00001af3: 	jl	.Ltmp2488 # Offset: 6899
.Ltmp2485:
    00001af5: 	movq	-0x1f5a8(%rbp), %rsi
    00001afc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b03: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6915
    00001b08: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b0f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001b16: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b1d: 	je	.Ltmp2489 # Offset: 6941
.Ltmp2591:
    00001b23: 	movq	-0x20(%rax), %r12
    00001b27: 	callq	clock@PLT # Offset: 6951
    00001b2c: 	pxor	%xmm0, %xmm0
    00001b30: 	movq	%rax, end_time(%rip)
    00001b37: 	movq	%r12, %rdi
    00001b3a: 	subq	start_time(%rip), %rax
    00001b41: 	cvtsi2sd	%rax, %xmm0
    00001b46: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001b4e: 	callq	_Z13record_resultdPKc # Offset: 6990
    00001b53: 	movq	-0x1f460(%rbp), %rdi
    00001b5a: 	cmpq	-0x1f5b0(%rbp), %rdi
    00001b61: 	je	.Ltmp2490 # Offset: 7009
    00001b63: 	movq	-0x1f450(%rbp), %rax
    00001b6a: 	leaq	0x1(%rax), %rsi
    00001b6e: 	callq	_ZdlPvm@PLT # Offset: 7022
.Ltmp2490:
    00001b73: 	movq	-0x1f5b8(%rbp), %rsi
    00001b7a: 	movq	-0x1f5a8(%rbp), %rdi
    00001b81: 	leaq	DATAat0x2b5b0(%rip), %rdx
    00001b88: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7048
    00001b8d: 	callq	clock@PLT # Offset: 7053
    00001b92: 	movl	iterations(%rip), %r8d
    00001b99: 	xorl	%r12d, %r12d
    00001b9c: 	leaq	DATAat0x2b1d0(%rip), %r13
    00001ba3: 	movq	%rax, start_time(%rip)
    00001baa: 	testl	%r8d, %r8d
    00001bad: 	jle	.Ltmp2491 # Offset: 7085
    00001bb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2494:
    00001bb8: 	movq	-0x1f558(%rbp), %rax
    00001bbf: 	movl	%r12d, -0x1f590(%rbp)
    00001bc6: 	xorl	%esi, %esi
    00001bc8: 	xorl	%edi, %edi
    00001bca: 	movq	%rbx, -0x1f580(%rbp)
    00001bd1: 	movq	-0x1f560(%rbp), %rcx
    00001bd8: 	movq	%rax, -0x1f550(%rbp)
    00001bdf: 	movq	-0x1f5d0(%rbp), %r8
    00001be6: 	movq	-0x1f5c0(%rbp), %r9
    00001bed: 	movq	-0x1f5d8(%rbp), %r10
    00001bf4: 	movq	-0x1f5c8(%rbp), %rbx
    00001bfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2492:
    00001c00: 	movq	(%rcx), %rax
    00001c03: 	movq	0x8(%rcx), %rdx
    00001c07: 	movq	%r15, %r12
    00001c0a: 	addq	$0x10, %rcx
    00001c0e: 	movq	-0x1f550(%rbp), %r11
    00001c15: 	imulq	%rdx, %r12
    00001c19: 	imulq	%rax, %r11
    00001c1d: 	imulq	-0x1f550(%rbp), %rdx
    00001c25: 	imulq	%r15, %rax
    00001c29: 	subq	%r12, %r11
    00001c2c: 	movq	%r9, %r12
    00001c2f: 	imulq	%r11, %r12
    00001c33: 	addq	%rdx, %rax
    00001c36: 	imulq	%r10, %r11
    00001c3a: 	movq	%r10, %rdx
    00001c3d: 	imulq	%rax, %rdx
    00001c41: 	imulq	%r9, %rax
    00001c45: 	subq	%rdx, %r12
    00001c48: 	movq	-0x1f570(%rbp), %rdx
    00001c4f: 	addq	%rax, %r11
    00001c52: 	movq	%r8, %rax
    00001c55: 	imulq	%r11, %rax
    00001c59: 	imulq	%r12, %rdx
    00001c5d: 	imulq	-0x1f570(%rbp), %r11
    00001c65: 	imulq	%r8, %r12
    00001c69: 	subq	%rax, %rdx
    00001c6c: 	leaq	(%r12,%r11), %rax
    00001c70: 	movq	%r14, %r11
    00001c73: 	movq	%rbx, %r12
    00001c76: 	imulq	%rdx, %r11
    00001c7a: 	imulq	%rax, %r12
    00001c7e: 	imulq	%rbx, %rdx
    00001c82: 	imulq	%r14, %rax
    00001c86: 	subq	%r12, %r11
    00001c89: 	addq	%r11, %rdi
    00001c8c: 	addq	%rax, %rdx
    00001c8f: 	addq	%rdx, %rsi
    00001c92: 	cmpq	-0x1f580(%rbp), %rcx
    00001c99: 	jne	.Ltmp2492 # Offset: 7321
    00001c9f: 	cvttsd2si	init_value(%rip), %rcx
    00001ca8: 	movq	-0x1f550(%rbp), %rax
    00001caf: 	movq	-0x1f5d8(%rbp), %r10
    00001cb6: 	movl	-0x1f590(%rbp), %r12d
    00001cbd: 	movq	%rax, -0x1f558(%rbp)
    00001cc4: 	movq	-0x1f580(%rbp), %rbx
    00001ccb: 	movq	%r10, %r9
    00001cce: 	imulq	%rcx, %rax
    00001cd2: 	imulq	%r15, %rcx
    00001cd6: 	movq	%rax, %rdx
    00001cd9: 	movq	-0x1f5c0(%rbp), %rax
    00001ce0: 	imulq	%rcx, %r9
    00001ce4: 	movq	%rax, %r8
    00001ce7: 	imulq	%rax, %rcx
    00001ceb: 	movq	-0x1f570(%rbp), %rax
    00001cf2: 	imulq	%rdx, %r8
    00001cf6: 	imulq	%r10, %rdx
    00001cfa: 	movq	-0x1f5d0(%rbp), %r10
    00001d01: 	subq	%r9, %r8
    00001d04: 	movq	%r10, %r9
    00001d07: 	addq	%rcx, %rdx
    00001d0a: 	movq	%rax, %rcx
    00001d0d: 	imulq	%r8, %rcx
    00001d11: 	imulq	%rdx, %r9
    00001d15: 	imulq	%r10, %r8
    00001d19: 	movq	-0x1f5c8(%rbp), %r10
    00001d20: 	imulq	%rax, %rdx
    00001d24: 	subq	%r9, %rcx
    00001d27: 	leaq	(%r8,%rdx), %rax
    00001d2b: 	movq	%r10, %rdx
    00001d2e: 	movq	%r14, %r8
    00001d31: 	imulq	%rcx, %rdx
    00001d35: 	imulq	%rax, %r8
    00001d39: 	imulq	%r14, %rcx
    00001d3d: 	imulq	%r10, %rax
    00001d41: 	addq	%r8, %rdx
    00001d44: 	imulq	$0x1f40, %rdx, %rdx
    00001d4b: 	subq	%rdx, %rsi
    00001d4e: 	movq	%rcx, %rdx
    00001d51: 	subq	%rax, %rdx
    00001d54: 	imulq	$0x1f40, %rdx, %rax
    00001d5b: 	subq	%rax, %rdi
    00001d5e: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 7518
    00001d63: 	testq	%rax, %rax
    00001d66: 	jg	.Ltmp2493 # Offset: 7526
.Ltmp2570:
    00001d6c: 	addl	$0x1, %r12d
    00001d70: 	cmpl	iterations(%rip), %r12d
    00001d77: 	jl	.Ltmp2494 # Offset: 7543
.Ltmp2491:
    00001d7d: 	movq	-0x1f5a8(%rbp), %rsi
    00001d84: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001d8b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7563
    00001d90: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001d97: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001d9e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001da5: 	je	.Ltmp2495 # Offset: 7589
.Ltmp2590:
    00001dab: 	movq	-0x20(%rax), %r12
    00001daf: 	callq	clock@PLT # Offset: 7599
    00001db4: 	pxor	%xmm0, %xmm0
    00001db8: 	movq	%rax, end_time(%rip)
    00001dbf: 	movq	%r12, %rdi
    00001dc2: 	subq	start_time(%rip), %rax
    00001dc9: 	cvtsi2sd	%rax, %xmm0
    00001dce: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001dd6: 	callq	_Z13record_resultdPKc # Offset: 7638
    00001ddb: 	movq	-0x1f460(%rbp), %rdi
    00001de2: 	cmpq	-0x1f5b0(%rbp), %rdi
    00001de9: 	je	.Ltmp2496 # Offset: 7657
    00001deb: 	movq	-0x1f450(%rbp), %rax
    00001df2: 	leaq	0x1(%rax), %rsi
    00001df6: 	callq	_ZdlPvm@PLT # Offset: 7670
.Ltmp2496:
    00001dfb: 	movq	-0x1f5b8(%rbp), %rsi
    00001e02: 	movq	-0x1f5a8(%rbp), %rdi
    00001e09: 	leaq	DATAat0x2b40d(%rip), %rdx
    00001e10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7696
    00001e15: 	callq	clock@PLT # Offset: 7701
    00001e1a: 	movl	iterations(%rip), %edi
    00001e20: 	movq	%rax, start_time(%rip)
    00001e27: 	testl	%edi, %edi
    00001e29: 	jle	.Ltmp2497 # Offset: 7721
    00001e2f: 	movq	-0x1f558(%rbp), %rax
    00001e36: 	xorl	%r13d, %r13d
    00001e39: 	movq	%rax, %r12
    00001e3c: 	imulq	%rax, %r12
    00001e40: 	movq	%r15, %rax
    00001e43: 	imulq	%r15, %rax
    00001e47: 	addq	%rax, %r12
    00001e4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2500:
    00001e50: 	movq	-0x1f560(%rbp), %rsi
    00001e57: 	movq	-0x1f558(%rbp), %r10
    00001e5e: 	xorl	%r8d, %r8d
    00001e61: 	xorl	%edi, %edi
    00001e63: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2498:
    00001e68: 	movq	(%rsi), %r9
    00001e6b: 	movq	0x8(%rsi), %rcx
    00001e6f: 	movq	%r10, %rax
    00001e72: 	movq	%r15, %rdx
    00001e75: 	addq	$0x10, %rsi
    00001e79: 	imulq	%r9, %rax
    00001e7d: 	imulq	%rcx, %rdx
    00001e81: 	imulq	%r15, %r9
    00001e85: 	addq	%rdx, %rax
    00001e88: 	cqto
    00001e8a: 	idivq	%r12
    00001e8d: 	addq	%rax, %rdi
    00001e90: 	movq	%rcx, %rax
    00001e93: 	imulq	%r10, %rax
    00001e97: 	subq	%r9, %rax
    00001e9a: 	cqto
    00001e9c: 	idivq	%r12
    00001e9f: 	addq	%rax, %r8
    00001ea2: 	cmpq	%rbx, %rsi
    00001ea5: 	jne	.Ltmp2498 # Offset: 7845
    00001ea7: 	cvttsd2si	init_value(%rip), %rcx
    00001eb0: 	movq	%r15, %rax
    00001eb3: 	movq	%r8, %rsi
    00001eb6: 	movq	%r10, -0x1f558(%rbp)
    00001ebd: 	imulq	%rcx, %rax
    00001ec1: 	negq	%rax
    00001ec4: 	cqto
    00001ec6: 	idivq	%r12
    00001ec9: 	imulq	$0x1f40, %rax, %rax
    00001ed0: 	subq	%rax, %rsi
    00001ed3: 	movq	%rcx, %rax
    00001ed6: 	imulq	%r10, %rax
    00001eda: 	cqto
    00001edc: 	idivq	%r12
    00001edf: 	imulq	$0x1f40, %rax, %rax
    00001ee6: 	subq	%rax, %rdi
    00001ee9: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 7913
    00001eee: 	testq	%rax, %rax
    00001ef1: 	jg	.Ltmp2499 # Offset: 7921
.Ltmp2569:
    00001ef7: 	addl	$0x1, %r13d
    00001efb: 	cmpl	iterations(%rip), %r13d
    00001f02: 	jl	.Ltmp2500 # Offset: 7938
.Ltmp2497:
    00001f08: 	movq	-0x1f5a8(%rbp), %rsi
    00001f0f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f16: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7958
    00001f1b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001f22: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001f29: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001f30: 	je	.Ltmp2501 # Offset: 7984
.Ltmp2589:
    00001f36: 	movq	-0x20(%rax), %r12
    00001f3a: 	callq	clock@PLT # Offset: 7994
    00001f3f: 	pxor	%xmm0, %xmm0
    00001f43: 	movq	%rax, end_time(%rip)
    00001f4a: 	movq	%r12, %rdi
    00001f4d: 	subq	start_time(%rip), %rax
    00001f54: 	cvtsi2sd	%rax, %xmm0
    00001f59: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001f61: 	callq	_Z13record_resultdPKc # Offset: 8033
    00001f66: 	movq	-0x1f460(%rbp), %rdi
    00001f6d: 	cmpq	-0x1f5b0(%rbp), %rdi
    00001f74: 	je	.Ltmp2502 # Offset: 8052
    00001f76: 	movq	-0x1f450(%rbp), %rax
    00001f7d: 	leaq	0x1(%rax), %rsi
    00001f81: 	callq	_ZdlPvm@PLT # Offset: 8065
.Ltmp2502:
    00001f86: 	movq	-0x1f5a8(%rbp), %r13
    00001f8d: 	movq	-0x1f5b8(%rbp), %rsi
    00001f94: 	leaq	DATAat0x2b41e(%rip), %rdx
    00001f9b: 	movq	%r13, %rdi
    00001f9e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8094
    00001fa3: 	movq	%r15, %xmm5
    00001fa8: 	subq	$0x8, %rsp
    00001fac: 	movq	-0x1f558(%rbp), %xmm2
    00001fb4: 	movq	-0x1f570(%rbp), %xmm4
    00001fbc: 	movq	-0x1f5c0(%rbp), %xmm3
    00001fc4: 	pushq	%r13
    00001fc6: 	movl	$0x1f40, %esi
    00001fcb: 	punpcklqdq	%xmm5, %xmm2
    00001fcf: 	movq	%r14, %xmm5
    00001fd4: 	movhps	-0x1f5d0(%rbp), %xmm4
    00001fdb: 	movq	-0x1f560(%rbp), %rdi
    00001fe2: 	movhps	-0x1f5c8(%rbp), %xmm5
    00001fe9: 	movaps	%xmm4, -0x1f570(%rbp)
    00001ff0: 	movhps	-0x1f5d8(%rbp), %xmm3
    00001ff7: 	movaps	%xmm5, -0x1f590(%rbp)
    00001ffe: 	pushq	-0x1f588(%rbp)
    00002004: 	pushq	-0x1f590(%rbp)
    0000200a: 	pushq	-0x1f568(%rbp)
    00002010: 	pushq	-0x1f570(%rbp)
    00002016: 	movaps	%xmm2, -0x1f580(%rbp)
    0000201d: 	movq	-0x1f580(%rbp), %rdx
    00002024: 	movaps	%xmm3, -0x1f550(%rbp)
    0000202b: 	movq	-0x1f578(%rbp), %rcx
    00002032: 	movq	-0x1f550(%rbp), %r8
    00002039: 	movq	-0x1f548(%rbp), %r9
    00002040: 	callq	_Z14test_variable4ISt7complexIlE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8256
    00002045: 	movq	-0x1f460(%rbp), %rdi
    0000204c: 	addq	$0x30, %rsp
    00002050: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002057: 	je	.Ltmp2503 # Offset: 8279
    00002059: 	movq	-0x1f450(%rbp), %rax
    00002060: 	leaq	0x1(%rax), %rsi
    00002064: 	callq	_ZdlPvm@PLT # Offset: 8292
.Ltmp2503:
    00002069: 	movq	-0x1f5a8(%rbp), %r13
    00002070: 	movq	-0x1f5b8(%rbp), %rsi
    00002077: 	leaq	DATAat0x2b439(%rip), %rdx
    0000207e: 	movq	%r13, %rdi
    00002081: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8321
    00002086: 	subq	$0x8, %rsp
    0000208a: 	movq	-0x1f550(%rbp), %r8
    00002091: 	movq	-0x1f548(%rbp), %r9
    00002098: 	movl	$0x1f40, %esi
    0000209d: 	movq	-0x1f580(%rbp), %rdx
    000020a4: 	movq	-0x1f578(%rbp), %rcx
    000020ab: 	pushq	%r13
    000020ad: 	pushq	-0x1f588(%rbp)
    000020b3: 	movq	-0x1f560(%rbp), %rdi
    000020ba: 	pushq	-0x1f590(%rbp)
    000020c0: 	pushq	-0x1f568(%rbp)
    000020c6: 	pushq	-0x1f570(%rbp)
    000020cc: 	callq	_Z14test_variable4ISt7complexIlE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8396
    000020d1: 	movq	-0x1f460(%rbp), %rdi
    000020d8: 	addq	$0x30, %rsp
    000020dc: 	cmpq	-0x1f5b0(%rbp), %rdi
    000020e3: 	je	.Ltmp2504 # Offset: 8419
    000020e5: 	movq	-0x1f450(%rbp), %rax
    000020ec: 	leaq	0x1(%rax), %rsi
    000020f0: 	callq	_ZdlPvm@PLT # Offset: 8432
.Ltmp2504:
    000020f5: 	movq	-0x1f5b8(%rbp), %rsi
    000020fc: 	movq	-0x1f5a8(%rbp), %rdi
    00002103: 	leaq	DATAat0x2b455(%rip), %rdx
    0000210a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8458
    0000210f: 	callq	clock@PLT # Offset: 8463
    00002114: 	movl	iterations(%rip), %esi
    0000211a: 	movq	%rax, start_time(%rip)
    00002121: 	testl	%esi, %esi
    00002123: 	jle	.Ltmp2505 # Offset: 8483
    00002129: 	movq	-0x1f5c8(%rbp), %r10
    00002130: 	movq	%r14, %rsi
    00002133: 	movq	-0x1f5e0(%rbp), %rdi
    0000213a: 	xorl	%r12d, %r12d
    0000213d: 	imulq	%r14, %rsi
    00002141: 	subq	-0x1f5e8(%rbp), %rdi
    00002148: 	movq	-0x1f5f0(%rbp), %rcx
    0000214f: 	movq	%r10, %rax
    00002152: 	addq	-0x1f5f8(%rbp), %rcx
    00002159: 	movq	%r10, %rdx
    0000215c: 	movq	-0x1f558(%rbp), %r9
    00002163: 	imulq	%r10, %rax
    00002167: 	imulq	%rcx, %rdx
    0000216b: 	addq	%rax, %rsi
    0000216e: 	movq	%r14, %rax
    00002171: 	imulq	%rdi, %rax
    00002175: 	imulq	%r10, %rdi
    00002179: 	addq	%rdx, %rax
    0000217c: 	cqto
    0000217e: 	idivq	%rsi
    00002181: 	subq	%rax, %r9
    00002184: 	movq	%rcx, %rax
    00002187: 	imulq	%r14, %rax
    0000218b: 	movq	%r9, %xmm3
    00002190: 	movq	%r9, -0x1f570(%rbp)
    00002197: 	subq	%rdi, %rax
    0000219a: 	cqto
    0000219c: 	idivq	%rsi
    0000219f: 	movq	%r15, %rdx
    000021a2: 	subq	%rax, %rdx
    000021a5: 	movq	%rdx, %xmm2
    000021aa: 	imulq	$0x1f40, %rdx, %r13
    000021b1: 	punpcklqdq	%xmm2, %xmm3
    000021b5: 	movaps	%xmm3, -0x1f550(%rbp)
    000021bc: 	nopl	(%rax) # Size: 4
.Ltmp2508:
    000021c0: 	movq	-0x1f560(%rbp), %rax
    000021c7: 	movq	-0x1f558(%rbp), %rcx
    000021ce: 	pxor	%xmm0, %xmm0
    000021d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2506:
    000021d8: 	movdqa	-0x1f550(%rbp), %xmm1
    000021e0: 	paddq	(%rax), %xmm1
    000021e4: 	addq	$0x10, %rax
    000021e8: 	paddq	%xmm1, %xmm0
    000021ec: 	cmpq	%rax, %rbx
    000021ef: 	jne	.Ltmp2506 # Offset: 8687
    000021f1: 	movhlps	%xmm0, %xmm7
    000021f4: 	movq	%xmm0, %rdi
    000021f9: 	movq	%rcx, -0x1f558(%rbp)
    00002200: 	cvttsd2si	init_value(%rip), %rax
    00002209: 	addq	-0x1f570(%rbp), %rax
    00002210: 	movq	%xmm7, %rsi
    00002215: 	imulq	$0x1f40, %rax, %rax
    0000221c: 	subq	%r13, %rsi
    0000221f: 	subq	%rax, %rdi
    00002222: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 8738
    00002227: 	testq	%rax, %rax
    0000222a: 	jg	.Ltmp2507 # Offset: 8746
.Ltmp2568:
    00002230: 	addl	$0x1, %r12d
    00002234: 	cmpl	iterations(%rip), %r12d
    0000223b: 	jl	.Ltmp2508 # Offset: 8763
.Ltmp2505:
    0000223d: 	movq	-0x1f5a8(%rbp), %rsi
    00002244: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000224b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8779
    00002250: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002257: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000225e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002265: 	je	.Ltmp2509 # Offset: 8805
.Ltmp2588:
    0000226b: 	movq	-0x20(%rax), %r12
    0000226f: 	callq	clock@PLT # Offset: 8815
    00002274: 	pxor	%xmm0, %xmm0
    00002278: 	movq	%rax, end_time(%rip)
    0000227f: 	movq	%r12, %rdi
    00002282: 	subq	start_time(%rip), %rax
    00002289: 	cvtsi2sd	%rax, %xmm0
    0000228e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002296: 	callq	_Z13record_resultdPKc # Offset: 8854
    0000229b: 	movq	-0x1f460(%rbp), %rdi
    000022a2: 	cmpq	-0x1f5b0(%rbp), %rdi
    000022a9: 	je	.Ltmp2510 # Offset: 8873
    000022ab: 	movq	-0x1f450(%rbp), %rax
    000022b2: 	leaq	0x1(%rax), %rsi
    000022b6: 	callq	_ZdlPvm@PLT # Offset: 8886
.Ltmp2510:
    000022bb: 	movq	-0x1f5b8(%rbp), %rsi
    000022c2: 	movq	-0x1f5a8(%rbp), %rdi
    000022c9: 	leaq	DATAat0x2b46e(%rip), %rdx
    000022d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8912
    000022d5: 	callq	clock@PLT # Offset: 8917
    000022da: 	movl	iterations(%rip), %ecx
    000022e0: 	movq	%rax, start_time(%rip)
    000022e7: 	testl	%ecx, %ecx
    000022e9: 	jle	.Ltmp2511 # Offset: 8937
    000022ef: 	movq	-0x1f5c8(%rbp), %r10
    000022f6: 	movq	%r14, %rsi
    000022f9: 	xorl	%r13d, %r13d
    000022fc: 	movq	-0x1f5e0(%rbp), %r8
    00002303: 	imulq	%r14, %rsi
    00002307: 	subq	-0x1f5e8(%rbp), %r8
    0000230e: 	movq	-0x1f5f0(%rbp), %rdi
    00002315: 	movq	%r10, %rax
    00002318: 	addq	-0x1f5f8(%rbp), %rdi
    0000231f: 	movq	%r10, %rdx
    00002322: 	imulq	%r10, %rax
    00002326: 	imulq	%r8, %rdx
    0000232a: 	addq	%rax, %rsi
    0000232d: 	movq	%r14, %rax
    00002330: 	imulq	%rdi, %rax
    00002334: 	imulq	%r8, %r14
    00002338: 	subq	%rdx, %rax
    0000233b: 	cqto
    0000233d: 	movq	%r14, %r12
    00002340: 	movq	%r15, %r14
    00002343: 	idivq	%rsi
    00002346: 	movq	%r10, %rdx
    00002349: 	imulq	%rdi, %rdx
    0000234d: 	addq	%rdx, %r12
    00002350: 	movq	%rax, %rcx
    00002353: 	movq	%r12, %rax
    00002356: 	cqto
    00002358: 	subq	%rcx, %r14
    0000235b: 	movq	%rcx, %xmm5
    00002360: 	idivq	%rsi
    00002363: 	imulq	$0x1f40, %r14, %r14
    0000236a: 	movq	%rax, %xmm4
    0000236f: 	movq	%rax, %r12
    00002372: 	punpcklqdq	%xmm5, %xmm4
    00002376: 	movaps	%xmm4, -0x1f550(%rbp)
    0000237d: 	nopl	(%rax) # Size: 3
.Ltmp2514:
    00002380: 	movq	-0x1f560(%rbp), %rax
    00002387: 	movq	-0x1f558(%rbp), %rdi
    0000238e: 	pxor	%xmm1, %xmm1
    00002392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2512:
    00002398: 	movdqa	-0x1f580(%rbp), %xmm0
    000023a0: 	paddq	(%rax), %xmm0
    000023a4: 	addq	$0x10, %rax
    000023a8: 	psubq	-0x1f550(%rbp), %xmm0
    000023b0: 	paddq	%xmm0, %xmm1
    000023b4: 	cmpq	%rbx, %rax
    000023b7: 	jne	.Ltmp2512 # Offset: 9143
    000023b9: 	cvttsd2si	init_value(%rip), %rax
    000023c2: 	movq	%rdi, %rcx
    000023c5: 	movhlps	%xmm1, %xmm2
    000023c8: 	movq	%rdi, -0x1f558(%rbp)
    000023cf: 	movq	%xmm2, %rsi
    000023d4: 	movq	%xmm1, %rdi
    000023d9: 	subq	%r14, %rsi
    000023dc: 	addq	%rcx, %rax
    000023df: 	subq	%r12, %rax
    000023e2: 	imulq	$0x1f40, %rax, %rax
    000023e9: 	subq	%rax, %rdi
    000023ec: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 9196
    000023f1: 	testq	%rax, %rax
    000023f4: 	jg	.Ltmp2513 # Offset: 9204
.Ltmp2567:
    000023fa: 	addl	$0x1, %r13d
    000023fe: 	cmpl	iterations(%rip), %r13d
    00002405: 	jl	.Ltmp2514 # Offset: 9221
.Ltmp2511:
    0000240b: 	movq	-0x1f5a8(%rbp), %rsi
    00002412: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002419: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9241
    0000241e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002425: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000242c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002433: 	je	.Ltmp2515 # Offset: 9267
.Ltmp2587:
    00002439: 	movq	-0x20(%rax), %r12
    0000243d: 	callq	clock@PLT # Offset: 9277
    00002442: 	pxor	%xmm0, %xmm0
    00002446: 	movq	%rax, end_time(%rip)
    0000244d: 	movq	%r12, %rdi
    00002450: 	subq	start_time(%rip), %rax
    00002457: 	cvtsi2sd	%rax, %xmm0
    0000245c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002464: 	callq	_Z13record_resultdPKc # Offset: 9316
    00002469: 	movq	-0x1f460(%rbp), %rdi
    00002470: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002477: 	je	.Ltmp2516 # Offset: 9335
    00002479: 	movq	-0x1f450(%rbp), %rax
    00002480: 	leaq	0x1(%rax), %rsi
    00002484: 	callq	_ZdlPvm@PLT # Offset: 9348
.Ltmp2516:
    00002489: 	movq	-0x1f5b8(%rbp), %r14
    00002490: 	leaq	-0x1f4c0(%rbp), %rdi
    00002497: 	leaq	DATAat0x2b488(%rip), %rdx
    0000249e: 	movq	%r14, %rsi
    000024a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9377
    000024a6: 	movl	iterations(%rip), %edx
    000024ac: 	xorl	%r8d, %r8d
    000024af: 	xorl	%ecx, %ecx
    000024b1: 	movl	$0x1f40, %esi
    000024b6: 	movq	-0x1f4c0(%rbp), %rdi
    000024bd: 	callq	_Z9summarizePKciiii # Offset: 9405
    000024c2: 	movq	-0x1f5a8(%rbp), %rdi
    000024c9: 	leaq	DATAat0x2b499(%rip), %rdx
    000024d0: 	movq	%r14, %rsi
    000024d3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9427
    000024d8: 	callq	clock@PLT # Offset: 9432
    000024dd: 	movl	iterations(%rip), %edx
    000024e3: 	xorl	%r12d, %r12d
    000024e6: 	leaq	DATAat0x2b1d0(%rip), %r14
    000024ed: 	movq	%rax, start_time(%rip)
    000024f4: 	leaq	-0x1f430(%rbp), %rax
    000024fb: 	movq	%rax, -0x1f570(%rbp)
    00002502: 	testl	%edx, %edx
    00002504: 	jle	.Ltmp2517 # Offset: 9476
    00002506: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2520:
    00002510: 	movdqa	-0x1f440(%rbp), %xmm1
    00002518: 	movq	-0x1f570(%rbp), %rax
    0000251f: 	movq	-0x1f558(%rbp), %rsi
    00002526: 	movdqa	%xmm1, %xmm2
    0000252a: 	psubq	-0x1f430(%rbp), %xmm2
    00002532: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2518:
    00002538: 	movdqa	%xmm1, %xmm0
    0000253c: 	movdqa	(%rax), %xmm1
    00002540: 	addq	$0x10, %rax
    00002544: 	psubq	%xmm1, %xmm0
    00002548: 	paddq	%xmm0, %xmm2
    0000254c: 	cmpq	%rbx, %rax
    0000254f: 	jne	.Ltmp2518 # Offset: 9551
    00002551: 	movhlps	%xmm2, %xmm7
    00002554: 	movq	%rsi, -0x1f558(%rbp)
    0000255b: 	movq	%xmm2, %rdi
    00002560: 	movq	%xmm7, %rsi
    00002565: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 9573
    0000256a: 	testq	%rax, %rax
    0000256d: 	jg	.Ltmp2519 # Offset: 9581
.Ltmp2566:
    00002573: 	addl	$0x1, %r12d
    00002577: 	cmpl	iterations(%rip), %r12d
    0000257e: 	jl	.Ltmp2520 # Offset: 9598
.Ltmp2517:
    00002580: 	movq	-0x1f5a8(%rbp), %rsi
    00002587: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000258e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9614
    00002593: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000259a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000025a1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000025a8: 	je	.Ltmp2521 # Offset: 9640
.Ltmp2586:
    000025ae: 	movq	-0x20(%rax), %r12
    000025b2: 	callq	clock@PLT # Offset: 9650
    000025b7: 	pxor	%xmm0, %xmm0
    000025bb: 	movq	%rax, end_time(%rip)
    000025c2: 	movq	%r12, %rdi
    000025c5: 	subq	start_time(%rip), %rax
    000025cc: 	cvtsi2sd	%rax, %xmm0
    000025d1: 	divsd	DATAat0x2b628(%rip), %xmm0
    000025d9: 	callq	_Z13record_resultdPKc # Offset: 9689
    000025de: 	movq	-0x1f460(%rbp), %rdi
    000025e5: 	cmpq	-0x1f5b0(%rbp), %rdi
    000025ec: 	je	.Ltmp2522 # Offset: 9708
    000025ee: 	movq	-0x1f450(%rbp), %rax
    000025f5: 	leaq	0x1(%rax), %rsi
    000025f9: 	callq	_ZdlPvm@PLT # Offset: 9721
.Ltmp2522:
    000025fe: 	movq	-0x1f5b8(%rbp), %rsi
    00002605: 	movq	-0x1f5a8(%rbp), %rdi
    0000260c: 	leaq	DATAat0x2b4a2(%rip), %rdx
    00002613: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9747
    00002618: 	callq	clock@PLT # Offset: 9752
    0000261d: 	xorl	%r12d, %r12d
    00002620: 	movq	%rax, start_time(%rip)
    00002627: 	leaq	-0x1f430(%rbp), %rax
    0000262e: 	movq	%rax, -0x1f570(%rbp)
    00002635: 	movl	iterations(%rip), %eax
    0000263b: 	testl	%eax, %eax
    0000263d: 	jle	.Ltmp2523 # Offset: 9789
    00002643: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2526:
    00002648: 	movq	-0x1f558(%rbp), %rax
    0000264f: 	movq	-0x1f440(%rbp), %r14
    00002656: 	movq	-0x1f438(%rbp), %r11
    0000265d: 	movq	-0x1f570(%rbp), %r9
    00002664: 	movq	%rax, -0x1f550(%rbp)
    0000266b: 	movq	%r14, %r8
    0000266e: 	subq	-0x1f430(%rbp), %r8
    00002675: 	movq	%r11, %rsi
    00002678: 	subq	-0x1f428(%rbp), %rsi
    0000267f: 	nop # Size: 1
.Ltmp2524:
    00002680: 	movq	%r14, %rdi
    00002683: 	movq	%r11, %rcx
    00002686: 	movq	(%r9), %r14
    00002689: 	movq	0x8(%r9), %r11
    0000268d: 	movq	%rdi, %r10
    00002690: 	movq	%rcx, %rax
    00002693: 	movq	-0x1f550(%rbp), %rdx
    0000269a: 	movq	%r15, %r13
    0000269d: 	subq	%r14, %r10
    000026a0: 	subq	%r11, %rax
    000026a3: 	addq	$0x10, %r9
    000026a7: 	imulq	%r10, %rdx
    000026ab: 	imulq	%rax, %r13
    000026af: 	imulq	%r15, %r10
    000026b3: 	imulq	-0x1f550(%rbp), %rax
    000026bb: 	subq	%r13, %rdx
    000026be: 	addq	%rdx, %rdx
    000026c1: 	addq	%r10, %rax
    000026c4: 	addq	%rdx, %rdi
    000026c7: 	addq	%r14, %rdx
    000026ca: 	addq	%rax, %rax
    000026cd: 	addq	%rdi, %r8
    000026d0: 	addq	%rax, %rcx
    000026d3: 	addq	%r11, %rax
    000026d6: 	subq	%rdx, %r8
    000026d9: 	addq	%rcx, %rsi
    000026dc: 	subq	%rax, %rsi
    000026df: 	cmpq	%rbx, %r9
    000026e2: 	jne	.Ltmp2524 # Offset: 9954
    000026e4: 	movq	-0x1f550(%rbp), %rax
    000026eb: 	movq	%r8, %rdi
    000026ee: 	movq	%rax, -0x1f558(%rbp)
    000026f5: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 9973
    000026fa: 	testq	%rax, %rax
    000026fd: 	jg	.Ltmp2525 # Offset: 9981
.Ltmp2565:
    00002703: 	addl	$0x1, %r12d
    00002707: 	cmpl	iterations(%rip), %r12d
    0000270e: 	jl	.Ltmp2526 # Offset: 9998
.Ltmp2523:
    00002714: 	movq	-0x1f5a8(%rbp), %rsi
    0000271b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002722: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10018
    00002727: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000272e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002735: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000273c: 	je	.Ltmp2527 # Offset: 10044
.Ltmp2585:
    00002742: 	movq	-0x20(%rax), %rbx
    00002746: 	callq	clock@PLT # Offset: 10054
    0000274b: 	pxor	%xmm0, %xmm0
    0000274f: 	movq	%rax, end_time(%rip)
    00002756: 	movq	%rbx, %rdi
    00002759: 	subq	start_time(%rip), %rax
    00002760: 	cvtsi2sd	%rax, %xmm0
    00002765: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000276d: 	callq	_Z13record_resultdPKc # Offset: 10093
    00002772: 	movq	-0x1f460(%rbp), %rdi
    00002779: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002780: 	je	.Ltmp2528 # Offset: 10112
    00002782: 	movq	-0x1f450(%rbp), %rax
    00002789: 	leaq	0x1(%rax), %rsi
    0000278d: 	callq	_ZdlPvm@PLT # Offset: 10125
.Ltmp2528:
    00002792: 	movq	-0x1f5a8(%rbp), %rbx
    00002799: 	leaq	DATAat0x2b4b0(%rip), %r12
    000027a0: 	movq	-0x1f5b8(%rbp), %rsi
    000027a7: 	movq	%r12, %rdx
    000027aa: 	movq	%rbx, %rdi
    000027ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10157
    000027b2: 	movq	-0x1f580(%rbp), %rdx
    000027b9: 	movq	-0x1f578(%rbp), %rcx
    000027c0: 	movq	%rbx, %r8
    000027c3: 	movl	$0x1f40, %esi
    000027c8: 	movq	-0x1f560(%rbp), %rdi
    000027cf: 	callq	_Z8test_CSEISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10191
    000027d4: 	movq	-0x1f460(%rbp), %rdi
    000027db: 	cmpq	-0x1f5b0(%rbp), %rdi
    000027e2: 	je	.Ltmp2529 # Offset: 10210
    000027e4: 	movq	-0x1f450(%rbp), %rax
    000027eb: 	leaq	0x1(%rax), %rsi
    000027ef: 	callq	_ZdlPvm@PLT # Offset: 10223
.Ltmp2529:
    000027f4: 	movq	-0x1f5a8(%rbp), %rbx
    000027fb: 	movq	-0x1f5b8(%rbp), %rsi
    00002802: 	leaq	DATAat0x2b4b5(%rip), %rdx
    00002809: 	movq	%rbx, %rdi
    0000280c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10252
    00002811: 	movq	-0x1f580(%rbp), %rdx
    00002818: 	movq	-0x1f578(%rbp), %rcx
    0000281f: 	movq	%rbx, %r8
    00002822: 	movl	$0x1f40, %esi
    00002827: 	movq	-0x1f560(%rbp), %rdi
    0000282e: 	callq	_Z9test_CSE2ISt7complexIlE11custom_cse1IS1_EEvPT_iS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10286
    00002833: 	movq	-0x1f460(%rbp), %rdi
    0000283a: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002841: 	je	.Ltmp2530 # Offset: 10305
    00002843: 	movq	-0x1f450(%rbp), %rax
    0000284a: 	leaq	0x1(%rax), %rsi
    0000284e: 	callq	_ZdlPvm@PLT # Offset: 10318
.Ltmp2530:
    00002853: 	movq	-0x1f5b8(%rbp), %rbx
    0000285a: 	leaq	-0x1f4a0(%rbp), %rdi
    00002861: 	movq	%r12, %rdx
    00002864: 	movq	%rbx, %rsi
    00002867: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10343
    0000286c: 	movl	iterations(%rip), %edx
    00002872: 	xorl	%r8d, %r8d
    00002875: 	xorl	%ecx, %ecx
    00002877: 	movl	$0x1f40, %esi
    0000287c: 	movq	-0x1f4a0(%rbp), %rdi
    00002883: 	callq	_Z9summarizePKciiii # Offset: 10371
    00002888: 	movq	%rbx, %rsi
    0000288b: 	movq	-0x1f5a8(%rbp), %rbx
    00002892: 	leaq	DATAat0x2b4bc(%rip), %rdx
    00002899: 	movq	%rbx, %rdi
    0000289c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10396
    000028a1: 	movq	-0x1f560(%rbp), %rdi
    000028a8: 	movq	%rbx, %rdx
    000028ab: 	movl	$0x1f40, %esi
    000028b0: 	callq	_Z13test_constantISt7complexIlE15custom_identityIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10416
    000028b5: 	movq	-0x1f460(%rbp), %rdi
    000028bc: 	cmpq	-0x1f5b0(%rbp), %rdi
    000028c3: 	je	.Ltmp2531 # Offset: 10435
    000028c5: 	movq	-0x1f450(%rbp), %rax
    000028cc: 	leaq	0x1(%rax), %rsi
    000028d0: 	callq	_ZdlPvm@PLT # Offset: 10448
.Ltmp2531:
    000028d5: 	movq	-0x1f5a8(%rbp), %rbx
    000028dc: 	movq	-0x1f5b8(%rbp), %rsi
    000028e3: 	leaq	DATAat0x2b4c2(%rip), %rdx
    000028ea: 	movq	%rbx, %rdi
    000028ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10477
    000028f2: 	movq	-0x1f560(%rbp), %rdi
    000028f9: 	movq	%rbx, %rdx
    000028fc: 	movl	$0x1f40, %esi
    00002901: 	callq	_Z13test_constantISt7complexIlE15custom_add_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10497
    00002906: 	movq	-0x1f460(%rbp), %rdi
    0000290d: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002914: 	je	.Ltmp2532 # Offset: 10516
    00002916: 	movq	-0x1f450(%rbp), %rax
    0000291d: 	leaq	0x1(%rax), %rsi
    00002921: 	callq	_ZdlPvm@PLT # Offset: 10529
.Ltmp2532:
    00002926: 	movq	-0x1f5a8(%rbp), %rbx
    0000292d: 	movq	-0x1f5b8(%rbp), %rsi
    00002934: 	leaq	DATAat0x2b4cc(%rip), %rdx
    0000293b: 	movq	%rbx, %rdi
    0000293e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10558
    00002943: 	movq	-0x1f560(%rbp), %rdi
    0000294a: 	movq	%rbx, %rdx
    0000294d: 	movl	$0x1f40, %esi
    00002952: 	callq	_Z13test_constantISt7complexIlE15custom_sub_zeroIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10578
    00002957: 	movq	-0x1f460(%rbp), %rdi
    0000295e: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002965: 	je	.Ltmp2533 # Offset: 10597
    00002967: 	movq	-0x1f450(%rbp), %rax
    0000296e: 	leaq	0x1(%rax), %rsi
    00002972: 	callq	_ZdlPvm@PLT # Offset: 10610
.Ltmp2533:
    00002977: 	movq	-0x1f5a8(%rbp), %rbx
    0000297e: 	movq	-0x1f5b8(%rbp), %rsi
    00002985: 	leaq	DATAat0x2b4db(%rip), %rdx
    0000298c: 	movq	%rbx, %rdi
    0000298f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10639
    00002994: 	movq	-0x1f560(%rbp), %rdi
    0000299b: 	movq	%rbx, %rdx
    0000299e: 	movl	$0x1f40, %esi
    000029a3: 	callq	_Z13test_constantISt7complexIlE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10659
    000029a8: 	movq	-0x1f460(%rbp), %rdi
    000029af: 	cmpq	-0x1f5b0(%rbp), %rdi
    000029b6: 	je	.Ltmp2534 # Offset: 10678
    000029b8: 	movq	-0x1f450(%rbp), %rax
    000029bf: 	leaq	0x1(%rax), %rsi
    000029c3: 	callq	_ZdlPvm@PLT # Offset: 10691
.Ltmp2534:
    000029c8: 	movq	-0x1f5a8(%rbp), %rbx
    000029cf: 	movq	-0x1f5b8(%rbp), %rsi
    000029d6: 	leaq	DATAat0x2b4e3(%rip), %rdx
    000029dd: 	movq	%rbx, %rdi
    000029e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10720
    000029e5: 	movq	-0x1f560(%rbp), %rdi
    000029ec: 	movq	%rbx, %rdx
    000029ef: 	movl	$0x1f40, %esi
    000029f4: 	callq	_Z13test_constantISt7complexIlE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10740
    000029f9: 	movq	-0x1f460(%rbp), %rdi
    00002a00: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002a07: 	je	.Ltmp2535 # Offset: 10759
    00002a09: 	movq	-0x1f450(%rbp), %rax
    00002a10: 	leaq	0x1(%rax), %rsi
    00002a14: 	callq	_ZdlPvm@PLT # Offset: 10772
.Ltmp2535:
    00002a19: 	movq	-0x1f5a8(%rbp), %rbx
    00002a20: 	movq	-0x1f5b8(%rbp), %rsi
    00002a27: 	leaq	DATAat0x2b4f1(%rip), %rdx
    00002a2e: 	movq	%rbx, %rdi
    00002a31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10801
    00002a36: 	movq	-0x1f560(%rbp), %rdi
    00002a3d: 	movq	%rbx, %rdx
    00002a40: 	movl	$0x1f40, %esi
    00002a45: 	callq	_Z13test_constantISt7complexIlE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10821
    00002a4a: 	movq	-0x1f460(%rbp), %rdi
    00002a51: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002a58: 	je	.Ltmp2536 # Offset: 10840
    00002a5a: 	movq	-0x1f450(%rbp), %rax
    00002a61: 	leaq	0x1(%rax), %rsi
    00002a65: 	callq	_ZdlPvm@PLT # Offset: 10853
.Ltmp2536:
    00002a6a: 	movq	-0x1f5a8(%rbp), %rbx
    00002a71: 	movq	-0x1f5b8(%rbp), %rsi
    00002a78: 	leaq	DATAat0x2b4fd(%rip), %rdx
    00002a7f: 	movq	%rbx, %rdi
    00002a82: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10882
    00002a87: 	movq	-0x1f560(%rbp), %rdi
    00002a8e: 	movq	%rbx, %rdx
    00002a91: 	movl	$0x1f40, %esi
    00002a96: 	callq	_Z13test_constantISt7complexIlE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10902
    00002a9b: 	movq	-0x1f460(%rbp), %rdi
    00002aa2: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002aa9: 	je	.Ltmp2537 # Offset: 10921
    00002aab: 	movq	-0x1f450(%rbp), %rax
    00002ab2: 	leaq	0x1(%rax), %rsi
    00002ab6: 	callq	_ZdlPvm@PLT # Offset: 10934
.Ltmp2537:
    00002abb: 	movq	-0x1f5a8(%rbp), %rbx
    00002ac2: 	movq	-0x1f5b8(%rbp), %rsi
    00002ac9: 	leaq	DATAat0x2b508(%rip), %rdx
    00002ad0: 	movq	%rbx, %rdi
    00002ad3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10963
    00002ad8: 	movq	-0x1f560(%rbp), %rdi
    00002adf: 	movq	%rbx, %rdx
    00002ae2: 	movl	$0x1f40, %esi
    00002ae7: 	callq	_Z13test_constantISt7complexIlE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10983
    00002aec: 	movq	-0x1f460(%rbp), %rdi
    00002af3: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002afa: 	je	.Ltmp2538 # Offset: 11002
    00002afc: 	movq	-0x1f450(%rbp), %rax
    00002b03: 	leaq	0x1(%rax), %rsi
    00002b07: 	callq	_ZdlPvm@PLT # Offset: 11015
.Ltmp2538:
    00002b0c: 	movq	-0x1f5a8(%rbp), %rbx
    00002b13: 	movq	-0x1f5b8(%rbp), %rsi
    00002b1a: 	leaq	DATAat0x2b517(%rip), %rdx
    00002b21: 	movq	%rbx, %rdi
    00002b24: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11044
    00002b29: 	movq	-0x1f560(%rbp), %rdi
    00002b30: 	movq	%rbx, %rdx
    00002b33: 	movl	$0x1f40, %esi
    00002b38: 	callq	_Z13test_constantISt7complexIlE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11064
    00002b3d: 	movq	-0x1f460(%rbp), %rdi
    00002b44: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002b4b: 	je	.Ltmp2539 # Offset: 11083
    00002b4d: 	movq	-0x1f450(%rbp), %rax
    00002b54: 	leaq	0x1(%rax), %rsi
    00002b58: 	callq	_ZdlPvm@PLT # Offset: 11096
.Ltmp2539:
    00002b5d: 	movq	-0x1f5b8(%rbp), %rbx
    00002b64: 	leaq	-0x1f480(%rbp), %rdi
    00002b6b: 	leaq	DATAat0x2b526(%rip), %rdx
    00002b72: 	movq	%rbx, %rsi
    00002b75: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11125
    00002b7a: 	movl	iterations(%rip), %edx
    00002b80: 	xorl	%r8d, %r8d
    00002b83: 	xorl	%ecx, %ecx
    00002b85: 	movl	$0x1f40, %esi
    00002b8a: 	movq	-0x1f480(%rbp), %rdi
    00002b91: 	callq	_Z9summarizePKciiii # Offset: 11153
    00002b96: 	movq	-0x1f5a8(%rbp), %rdi
    00002b9d: 	leaq	DATAat0x2b4c6(%rip), %rdx
    00002ba4: 	movq	%rbx, %rsi
    00002ba7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11175
    00002bac: 	callq	clock@PLT # Offset: 11180
    00002bb1: 	xorl	%ebx, %ebx
    00002bb3: 	leaq	DATAat0x2b1d0(%rip), %r12
    00002bba: 	movq	%rax, start_time(%rip)
    00002bc1: 	movl	iterations(%rip), %eax
    00002bc7: 	movl	%eax, %r14d
    00002bca: 	testl	%eax, %eax
    00002bcc: 	jg	.Ltmp2540 # Offset: 11212
    00002bce: 	jmp	.Ltmp2541 # Offset: 11214
.Ltmp2542:
    00002bd0: 	addl	$0x1, %ebx
    00002bd3: 	cmpl	%r14d, %ebx
    00002bd6: 	jge	.Ltmp2541 # Offset: 11222
.Ltmp2540:
    00002bd8: 	xorl	%esi, %esi
    00002bda: 	xorl	%edi, %edi
    00002bdc: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 11228
    00002be1: 	testq	%rax, %rax
    00002be4: 	jle	.Ltmp2542 # Offset: 11236
    00002be6: 	movl	current_test(%rip), %edx
    00002bec: 	movq	%r12, %rsi
    00002bef: 	movl	$0x1, %edi
    00002bf4: 	xorl	%eax, %eax
    00002bf6: 	callq	__printf_chk@PLT # Offset: 11254
    00002bfb: 	movl	iterations(%rip), %r14d
    00002c02: 	addl	$0x1, %ebx
    00002c05: 	cmpl	%r14d, %ebx
    00002c08: 	jl	.Ltmp2540 # Offset: 11272
.Ltmp2541:
    00002c0a: 	movq	-0x1f5a8(%rbp), %rsi
    00002c11: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002c18: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11288
    00002c1d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002c24: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002c2b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002c32: 	je	.Ltmp2543 # Offset: 11314
.Ltmp2584:
    00002c38: 	movq	-0x20(%rax), %rbx
    00002c3c: 	callq	clock@PLT # Offset: 11324
    00002c41: 	pxor	%xmm0, %xmm0
    00002c45: 	movq	%rax, end_time(%rip)
    00002c4c: 	movq	%rbx, %rdi
    00002c4f: 	subq	start_time(%rip), %rax
    00002c56: 	cvtsi2sd	%rax, %xmm0
    00002c5b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002c63: 	callq	_Z13record_resultdPKc # Offset: 11363
    00002c68: 	movq	-0x1f460(%rbp), %rdi
    00002c6f: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002c76: 	je	.Ltmp2544 # Offset: 11382
    00002c78: 	movq	-0x1f450(%rbp), %rax
    00002c7f: 	leaq	0x1(%rax), %rsi
    00002c83: 	callq	_ZdlPvm@PLT # Offset: 11395
.Ltmp2544:
    00002c88: 	movq	-0x1f5b8(%rbp), %rsi
    00002c8f: 	movq	-0x1f5a8(%rbp), %rdi
    00002c96: 	leaq	DATAat0x2b540(%rip), %rdx
    00002c9d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11421
    00002ca2: 	callq	clock@PLT # Offset: 11426
    00002ca7: 	xorl	%ebx, %ebx
    00002ca9: 	leaq	DATAat0x2b1d0(%rip), %r12
    00002cb0: 	movq	%rax, start_time(%rip)
    00002cb7: 	movl	iterations(%rip), %eax
    00002cbd: 	movl	%eax, %r14d
    00002cc0: 	testl	%eax, %eax
    00002cc2: 	jg	.Ltmp2545 # Offset: 11458
    00002cc4: 	jmp	.Ltmp2546 # Offset: 11460
    00002cc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2547:
    00002cd0: 	addl	$0x1, %ebx
    00002cd3: 	cmpl	%r14d, %ebx
    00002cd6: 	jge	.Ltmp2546 # Offset: 11478
.Ltmp2545:
    00002cd8: 	xorl	%esi, %esi
    00002cda: 	xorl	%edi, %edi
    00002cdc: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 11484
    00002ce1: 	testq	%rax, %rax
    00002ce4: 	jle	.Ltmp2547 # Offset: 11492
    00002ce6: 	movl	current_test(%rip), %edx
    00002cec: 	movq	%r12, %rsi
    00002cef: 	movl	$0x1, %edi
    00002cf4: 	xorl	%eax, %eax
    00002cf6: 	callq	__printf_chk@PLT # Offset: 11510
    00002cfb: 	movl	iterations(%rip), %r14d
    00002d02: 	addl	$0x1, %ebx
    00002d05: 	cmpl	%r14d, %ebx
    00002d08: 	jl	.Ltmp2545 # Offset: 11528
.Ltmp2546:
    00002d0a: 	movq	-0x1f5a8(%rbp), %rsi
    00002d11: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002d18: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11544
    00002d1d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002d24: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002d2b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002d32: 	je	.Ltmp2548 # Offset: 11570
.Ltmp2583:
    00002d38: 	movq	-0x20(%rax), %rbx
    00002d3c: 	callq	clock@PLT # Offset: 11580
    00002d41: 	pxor	%xmm0, %xmm0
    00002d45: 	movq	%rax, end_time(%rip)
    00002d4c: 	movq	%rbx, %rdi
    00002d4f: 	subq	start_time(%rip), %rax
    00002d56: 	cvtsi2sd	%rax, %xmm0
    00002d5b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002d63: 	callq	_Z13record_resultdPKc # Offset: 11619
    00002d68: 	movq	-0x1f460(%rbp), %rdi
    00002d6f: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002d76: 	je	.Ltmp2549 # Offset: 11638
    00002d78: 	movq	-0x1f450(%rbp), %rax
    00002d7f: 	leaq	0x1(%rax), %rsi
    00002d83: 	callq	_ZdlPvm@PLT # Offset: 11651
.Ltmp2549:
    00002d88: 	movq	-0x1f5b8(%rbp), %rsi
    00002d8f: 	movq	-0x1f5a8(%rbp), %rdi
    00002d96: 	leaq	DATAat0x2b54c(%rip), %rdx
    00002d9d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11677
    00002da2: 	callq	clock@PLT # Offset: 11682
    00002da7: 	xorl	%ebx, %ebx
    00002da9: 	leaq	DATAat0x2b1d0(%rip), %r12
    00002db0: 	movq	%rax, start_time(%rip)
    00002db7: 	movl	iterations(%rip), %eax
    00002dbd: 	movl	%eax, %r14d
    00002dc0: 	testl	%eax, %eax
    00002dc2: 	jg	.Ltmp2550 # Offset: 11714
    00002dc4: 	jmp	.Ltmp2551 # Offset: 11716
    00002dc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2552:
    00002dd0: 	addl	$0x1, %ebx
    00002dd3: 	cmpl	%r14d, %ebx
    00002dd6: 	jge	.Ltmp2551 # Offset: 11734
.Ltmp2550:
    00002dd8: 	xorl	%esi, %esi
    00002dda: 	xorl	%edi, %edi
    00002ddc: 	callq	"_ZSt13__complex_absIlET_RKSt7complexIS0_E.isra.0/1" # Offset: 11740
    00002de1: 	testq	%rax, %rax
    00002de4: 	jle	.Ltmp2552 # Offset: 11748
    00002de6: 	movl	current_test(%rip), %edx
    00002dec: 	movq	%r12, %rsi
    00002def: 	movl	$0x1, %edi
    00002df4: 	xorl	%eax, %eax
    00002df6: 	callq	__printf_chk@PLT # Offset: 11766
    00002dfb: 	movl	iterations(%rip), %r14d
    00002e02: 	addl	$0x1, %ebx
    00002e05: 	cmpl	%r14d, %ebx
    00002e08: 	jl	.Ltmp2550 # Offset: 11784
.Ltmp2551:
    00002e0a: 	movq	-0x1f5a8(%rbp), %rsi
    00002e11: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002e18: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11800
    00002e1d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002e24: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002e2b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002e32: 	je	.Ltmp2553 # Offset: 11826
.Ltmp2582:
    00002e38: 	movq	-0x20(%rax), %rbx
    00002e3c: 	callq	clock@PLT # Offset: 11836
    00002e41: 	pxor	%xmm0, %xmm0
    00002e45: 	movq	%rax, end_time(%rip)
    00002e4c: 	movq	%rbx, %rdi
    00002e4f: 	subq	start_time(%rip), %rax
    00002e56: 	cvtsi2sd	%rax, %xmm0
    00002e5b: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002e63: 	callq	_Z13record_resultdPKc # Offset: 11875
    00002e68: 	movq	-0x1f460(%rbp), %rdi
    00002e6f: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002e76: 	je	.Ltmp2554 # Offset: 11894
    00002e78: 	movq	-0x1f450(%rbp), %rax
    00002e7f: 	leaq	0x1(%rax), %rsi
    00002e83: 	callq	_ZdlPvm@PLT # Offset: 11907
.Ltmp2554:
    00002e88: 	movq	-0x1f5a8(%rbp), %rbx
    00002e8f: 	movq	-0x1f5b8(%rbp), %rsi
    00002e96: 	leaq	DATAat0x2b55b(%rip), %rdx
    00002e9d: 	movq	%rbx, %rdi
    00002ea0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11936
    00002ea5: 	callq	clock@PLT # Offset: 11941
    00002eaa: 	movq	%rbx, %rsi
    00002ead: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002eb4: 	movq	%rax, start_time(%rip)
    00002ebb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11963
    00002ec0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002ec7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002ece: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002ed5: 	je	.Ltmp2555 # Offset: 11989
.Ltmp2581:
    00002edb: 	movq	-0x20(%rax), %rbx
    00002edf: 	callq	clock@PLT # Offset: 11999
    00002ee4: 	pxor	%xmm0, %xmm0
    00002ee8: 	movq	%rax, end_time(%rip)
    00002eef: 	movq	%rbx, %rdi
    00002ef2: 	subq	start_time(%rip), %rax
    00002ef9: 	cvtsi2sd	%rax, %xmm0
    00002efe: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002f06: 	callq	_Z13record_resultdPKc # Offset: 12038
    00002f0b: 	movq	-0x1f460(%rbp), %rdi
    00002f12: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002f19: 	je	.Ltmp2556 # Offset: 12057
    00002f1b: 	movq	-0x1f450(%rbp), %rax
    00002f22: 	leaq	0x1(%rax), %rsi
    00002f26: 	callq	_ZdlPvm@PLT # Offset: 12070
.Ltmp2556:
    00002f2b: 	movq	-0x1f5b8(%rbp), %rsi
    00002f32: 	movq	-0x1f5a8(%rbp), %rdi
    00002f39: 	leaq	DATAat0x2b5d0(%rip), %rdx
    00002f40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12096
    00002f45: 	movl	iterations(%rip), %edx
    00002f4b: 	xorl	%r8d, %r8d
    00002f4e: 	xorl	%ecx, %ecx
    00002f50: 	movl	$0x1f40, %esi
    00002f55: 	movq	-0x1f460(%rbp), %rdi
    00002f5c: 	callq	_Z9summarizePKciiii # Offset: 12124
    00002f61: 	movq	-0x1f460(%rbp), %rdi
    00002f68: 	cmpq	-0x1f5b0(%rbp), %rdi
    00002f6f: 	je	.Ltmp2557 # Offset: 12143
    00002f71: 	movq	-0x1f450(%rbp), %rax
    00002f78: 	leaq	0x1(%rax), %rsi
    00002f7c: 	callq	_ZdlPvm@PLT # Offset: 12156
.Ltmp2557:
    00002f81: 	movq	-0x1f480(%rbp), %rdi
    00002f88: 	leaq	-0x1f470(%rbp), %rax
    00002f8f: 	cmpq	%rax, %rdi
    00002f92: 	je	.Ltmp2558 # Offset: 12178
    00002f94: 	movq	-0x1f470(%rbp), %rax
    00002f9b: 	leaq	0x1(%rax), %rsi
    00002f9f: 	callq	_ZdlPvm@PLT # Offset: 12191
.Ltmp2558:
    00002fa4: 	movq	-0x1f4a0(%rbp), %rdi
    00002fab: 	leaq	-0x1f490(%rbp), %rax
    00002fb2: 	cmpq	%rax, %rdi
    00002fb5: 	je	.Ltmp2559 # Offset: 12213
    00002fb7: 	movq	-0x1f490(%rbp), %rax
    00002fbe: 	leaq	0x1(%rax), %rsi
    00002fc2: 	callq	_ZdlPvm@PLT # Offset: 12226
.Ltmp2559:
    00002fc7: 	movq	-0x1f4c0(%rbp), %rdi
    00002fce: 	leaq	-0x1f4b0(%rbp), %rax
    00002fd5: 	cmpq	%rax, %rdi
    00002fd8: 	je	.Ltmp2560 # Offset: 12248
    00002fda: 	movq	-0x1f4b0(%rbp), %rax
    00002fe1: 	leaq	0x1(%rax), %rsi
    00002fe5: 	callq	_ZdlPvm@PLT # Offset: 12261
.Ltmp2560:
    00002fea: 	movq	-0x1f4e0(%rbp), %rdi
    00002ff1: 	leaq	-0x1f4d0(%rbp), %rax
    00002ff8: 	cmpq	%rax, %rdi
    00002ffb: 	je	.Ltmp2561 # Offset: 12283
    00002ffd: 	movq	-0x1f4d0(%rbp), %rax
    00003004: 	leaq	0x1(%rax), %rsi
    00003008: 	callq	_ZdlPvm@PLT # Offset: 12296
.Ltmp2561:
    0000300d: 	movq	-0x1f500(%rbp), %rdi
    00003014: 	leaq	-0x1f4f0(%rbp), %rax
    0000301b: 	cmpq	%rax, %rdi
    0000301e: 	je	.Ltmp2562 # Offset: 12318
    00003020: 	movq	-0x1f4f0(%rbp), %rax
    00003027: 	leaq	0x1(%rax), %rsi
    0000302b: 	callq	_ZdlPvm@PLT # Offset: 12331
.Ltmp2562:
    00003030: 	movq	-0x1f520(%rbp), %rdi
    00003037: 	leaq	-0x1f510(%rbp), %rax
    0000303e: 	cmpq	%rax, %rdi
    00003041: 	je	.Ltmp2563 # Offset: 12353
    00003043: 	movq	-0x1f510(%rbp), %rax
    0000304a: 	leaq	0x1(%rax), %rsi
    0000304e: 	callq	_ZdlPvm@PLT # Offset: 12366
.Ltmp2563:
    00003053: 	movq	-0x38(%rbp), %rax
    00003057: 	subq	%fs:0x28, %rax
    00003060: 	jne	.Ltmp2564 # Offset: 12384
    00003066: 	leaq	-0x28(%rbp), %rsp
    0000306a: 	popq	%rbx
    0000306b: 	popq	%r12
    0000306d: 	popq	%r13
    0000306f: 	popq	%r14
    00003071: 	popq	%r15
    00003073: 	popq	%rbp
    00003074: 	retq # Offset: 12404
    00003075: 	nopl	(%rax) # Size: 3
.Ltmp2525:
    00003078: 	movl	current_test(%rip), %edx
    0000307e: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00003085: 	movl	$0x1, %edi
    0000308a: 	xorl	%eax, %eax
    0000308c: 	callq	__printf_chk@PLT # Offset: 12428
    00003091: 	jmp	.Ltmp2565 # Offset: 12433
    00003096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2519:
    000030a0: 	movl	current_test(%rip), %edx
    000030a6: 	movq	%r14, %rsi
    000030a9: 	movl	$0x1, %edi
    000030ae: 	xorl	%eax, %eax
    000030b0: 	callq	__printf_chk@PLT # Offset: 12464
    000030b5: 	jmp	.Ltmp2566 # Offset: 12469
    000030ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2513:
    000030c0: 	movl	current_test(%rip), %edx
    000030c6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000030cd: 	movl	$0x1, %edi
    000030d2: 	xorl	%eax, %eax
    000030d4: 	callq	__printf_chk@PLT # Offset: 12500
    000030d9: 	jmp	.Ltmp2567 # Offset: 12505
    000030de: 	nop # Size: 2
.Ltmp2507:
    000030e0: 	movl	current_test(%rip), %edx
    000030e6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000030ed: 	movl	$0x1, %edi
    000030f2: 	xorl	%eax, %eax
    000030f4: 	callq	__printf_chk@PLT # Offset: 12532
    000030f9: 	jmp	.Ltmp2568 # Offset: 12537
    000030fe: 	nop # Size: 2
.Ltmp2499:
    00003100: 	movl	current_test(%rip), %edx
    00003106: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000310d: 	movl	$0x1, %edi
    00003112: 	xorl	%eax, %eax
    00003114: 	callq	__printf_chk@PLT # Offset: 12564
    00003119: 	jmp	.Ltmp2569 # Offset: 12569
    0000311e: 	nop # Size: 2
.Ltmp2493:
    00003120: 	movl	current_test(%rip), %edx
    00003126: 	movq	%r13, %rsi
    00003129: 	movl	$0x1, %edi
    0000312e: 	xorl	%eax, %eax
    00003130: 	callq	__printf_chk@PLT # Offset: 12592
    00003135: 	jmp	.Ltmp2570 # Offset: 12597
    0000313a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2487:
    00003140: 	movl	current_test(%rip), %edx
    00003146: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000314d: 	movl	$0x1, %edi
    00003152: 	xorl	%eax, %eax
    00003154: 	callq	__printf_chk@PLT # Offset: 12628
    00003159: 	jmp	.Ltmp2571 # Offset: 12633
    0000315e: 	nop # Size: 2
.Ltmp2481:
    00003160: 	movl	current_test(%rip), %edx
    00003166: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000316d: 	movl	$0x1, %edi
    00003172: 	xorl	%eax, %eax
    00003174: 	callq	__printf_chk@PLT # Offset: 12660
    00003179: 	jmp	.Ltmp2572 # Offset: 12665
    0000317e: 	nop # Size: 2
.Ltmp2475:
    00003180: 	movl	current_test(%rip), %edx
    00003186: 	movq	%r13, %rsi
    00003189: 	movl	$0x1, %edi
    0000318e: 	xorl	%eax, %eax
    00003190: 	callq	__printf_chk@PLT # Offset: 12688
    00003195: 	jmp	.Ltmp2573 # Offset: 12693
    0000319a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2469:
    000031a0: 	movl	current_test(%rip), %edx
    000031a6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000031ad: 	movl	$0x1, %edi
    000031b2: 	xorl	%eax, %eax
    000031b4: 	callq	__printf_chk@PLT # Offset: 12724
    000031b9: 	jmp	.Ltmp2574 # Offset: 12729
    000031be: 	nop # Size: 2
.Ltmp2463:
    000031c0: 	movl	current_test(%rip), %edx
    000031c6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000031cd: 	movl	$0x1, %edi
    000031d2: 	xorl	%eax, %eax
    000031d4: 	callq	__printf_chk@PLT # Offset: 12756
    000031d9: 	jmp	.Ltmp2575 # Offset: 12761
    000031de: 	nop # Size: 2
.Ltmp2457:
    000031e0: 	movl	current_test(%rip), %edx
    000031e6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000031ed: 	movl	$0x1, %edi
    000031f2: 	xorl	%eax, %eax
    000031f4: 	callq	__printf_chk@PLT # Offset: 12788
    000031f9: 	jmp	.Ltmp2576 # Offset: 12793
    000031fe: 	nop # Size: 2
.Ltmp2451:
    00003200: 	movl	current_test(%rip), %edx
    00003206: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000320d: 	movl	$0x1, %edi
    00003212: 	xorl	%eax, %eax
    00003214: 	callq	__printf_chk@PLT # Offset: 12820
    00003219: 	jmp	.Ltmp2577 # Offset: 12825
    0000321e: 	nop # Size: 2
.Ltmp2445:
    00003220: 	movl	current_test(%rip), %edx
    00003226: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000322d: 	movl	$0x1, %edi
    00003232: 	xorl	%eax, %eax
    00003234: 	callq	__printf_chk@PLT # Offset: 12852
    00003239: 	jmp	.Ltmp2578 # Offset: 12857
    0000323e: 	nop # Size: 2
.Ltmp2439:
    00003240: 	movl	current_test(%rip), %edx
    00003246: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000324d: 	movl	$0x1, %edi
    00003252: 	xorl	%eax, %eax
    00003254: 	callq	__printf_chk@PLT # Offset: 12884
    00003259: 	jmp	.Ltmp2579 # Offset: 12889
.Ltmp2395:
    0000325e: 	movq	-0x8(%rdx), %rax
    00003262: 	addq	$0x200, %rax
    00003268: 	jmp	.Ltmp2580 # Offset: 12904
.Ltmp2555:
    0000326d: 	movq	-0x8(%rdx), %rax
    00003271: 	addq	$0x200, %rax
    00003277: 	jmp	.Ltmp2581 # Offset: 12919
.Ltmp2553:
    0000327c: 	movq	-0x8(%rdx), %rax
    00003280: 	addq	$0x200, %rax
    00003286: 	jmp	.Ltmp2582 # Offset: 12934
.Ltmp2548:
    0000328b: 	movq	-0x8(%rdx), %rax
    0000328f: 	addq	$0x200, %rax
    00003295: 	jmp	.Ltmp2583 # Offset: 12949
.Ltmp2543:
    0000329a: 	movq	-0x8(%rdx), %rax
    0000329e: 	addq	$0x200, %rax
    000032a4: 	jmp	.Ltmp2584 # Offset: 12964
.Ltmp2527:
    000032a9: 	movq	-0x8(%rdx), %rax
    000032ad: 	addq	$0x200, %rax
    000032b3: 	jmp	.Ltmp2585 # Offset: 12979
.Ltmp2521:
    000032b8: 	movq	-0x8(%rdx), %rax
    000032bc: 	addq	$0x200, %rax
    000032c2: 	jmp	.Ltmp2586 # Offset: 12994
.Ltmp2515:
    000032c7: 	movq	-0x8(%rdx), %rax
    000032cb: 	addq	$0x200, %rax
    000032d1: 	jmp	.Ltmp2587 # Offset: 13009
.Ltmp2509:
    000032d6: 	movq	-0x8(%rdx), %rax
    000032da: 	addq	$0x200, %rax
    000032e0: 	jmp	.Ltmp2588 # Offset: 13024
.Ltmp2501:
    000032e5: 	movq	-0x8(%rdx), %rax
    000032e9: 	addq	$0x200, %rax
    000032ef: 	jmp	.Ltmp2589 # Offset: 13039
.Ltmp2495:
    000032f4: 	movq	-0x8(%rdx), %rax
    000032f8: 	addq	$0x200, %rax
    000032fe: 	jmp	.Ltmp2590 # Offset: 13054
.Ltmp2489:
    00003303: 	movq	-0x8(%rdx), %rax
    00003307: 	addq	$0x200, %rax
    0000330d: 	jmp	.Ltmp2591 # Offset: 13069
.Ltmp2483:
    00003312: 	movq	-0x8(%rdx), %rax
    00003316: 	addq	$0x200, %rax
    0000331c: 	jmp	.Ltmp2592 # Offset: 13084
.Ltmp2477:
    00003321: 	movq	-0x8(%rdx), %rax
    00003325: 	addq	$0x200, %rax
    0000332b: 	jmp	.Ltmp2593 # Offset: 13099
.Ltmp2471:
    00003330: 	movq	-0x8(%rdx), %rax
    00003334: 	addq	$0x200, %rax
    0000333a: 	jmp	.Ltmp2594 # Offset: 13114
.Ltmp2465:
    0000333f: 	movq	-0x8(%rdx), %rax
    00003343: 	addq	$0x200, %rax
    00003349: 	jmp	.Ltmp2595 # Offset: 13129
.Ltmp2459:
    0000334e: 	movq	-0x8(%rdx), %rax
    00003352: 	addq	$0x200, %rax
    00003358: 	jmp	.Ltmp2596 # Offset: 13144
.Ltmp2453:
    0000335d: 	movq	-0x8(%rdx), %rax
    00003361: 	addq	$0x200, %rax
    00003367: 	jmp	.Ltmp2597 # Offset: 13159
.Ltmp2447:
    0000336c: 	movq	-0x8(%rdx), %rax
    00003370: 	addq	$0x200, %rax
    00003376: 	jmp	.Ltmp2598 # Offset: 13174
.Ltmp2441:
    0000337b: 	movq	-0x8(%rdx), %rax
    0000337f: 	addq	$0x200, %rax
    00003385: 	jmp	.Ltmp2599 # Offset: 13189
.Ltmp2433:
    0000338a: 	movq	-0x8(%rdx), %rax
    0000338e: 	addq	$0x200, %rax
    00003394: 	jmp	.Ltmp2600 # Offset: 13204
.Ltmp2422:
    00003399: 	movq	-0x8(%rdx), %rax
    0000339d: 	addq	$0x200, %rax
    000033a3: 	jmp	.Ltmp2601 # Offset: 13219
.Ltmp2417:
    000033a8: 	movq	-0x8(%rdx), %rax
    000033ac: 	addq	$0x200, %rax
    000033b2: 	jmp	.Ltmp2602 # Offset: 13234
.Ltmp2415:
    000033b7: 	movq	-0x8(%rdx), %rax
    000033bb: 	addq	$0x200, %rax
    000033c1: 	jmp	.Ltmp2603 # Offset: 13249
.Ltmp2410:
    000033c6: 	movq	-0x8(%rdx), %rax
    000033ca: 	addq	$0x200, %rax
    000033d0: 	jmp	.Ltmp2604 # Offset: 13264
.Ltmp2405:
    000033d5: 	movq	-0x8(%rdx), %rax
    000033d9: 	addq	$0x200, %rax
    000033df: 	jmp	.Ltmp2605 # Offset: 13279
.Ltmp2400:
    000033e4: 	movq	-0x8(%rdx), %rax
    000033e8: 	addq	$0x200, %rax
    000033ee: 	jmp	.Ltmp2606 # Offset: 13294
.Ltmp2564:
    000033f3: 	callq	__stack_chk_fail@PLT # Offset: 13299
    000033f8: 	endbr64
.Ltmp2623:
    000033fc: 	movq	%rax, %rbx
    000033ff: 	jmp	.Ltmp2607 # Offset: 13311
    00003404: 	endbr64
.Ltmp2610:
    00003408: 	movq	%rax, %rbx
    0000340b: 	jmp	.Ltmp2608 # Offset: 13323
    0000340d: 	endbr64
.Ltmp2611:
    00003411: 	movq	%rax, %rbx
    00003414: 	jmp	.Ltmp2609 # Offset: 13332
    00003419: 	endbr64
    0000341d: 	jmp	.Ltmp2610 # Offset: 13341
    0000341f: 	endbr64
    00003423: 	jmp	.Ltmp2611 # Offset: 13347
    00003425: 	endbr64
    00003429: 	jmp	.Ltmp2611 # Offset: 13353
    0000342b: 	endbr64
    0000342f: 	jmp	.Ltmp2611 # Offset: 13359
    00003431: 	endbr64
    00003435: 	jmp	.Ltmp2610 # Offset: 13365
    00003437: 	endbr64
    0000343b: 	movq	%rax, %rbx
    0000343e: 	jmp	.Ltmp2612 # Offset: 13374
.Ltmp2608:
    00003440: 	movq	-0x1f460(%rbp), %rdi
    00003447: 	cmpq	-0x1f5b0(%rbp), %rdi
    0000344e: 	je	.Ltmp2612 # Offset: 13390
    00003450: 	movq	-0x1f450(%rbp), %rax
    00003457: 	leaq	0x1(%rax), %rsi
    0000345b: 	callq	_ZdlPvm@PLT # Offset: 13403
.Ltmp2612:
    00003460: 	movq	-0x1f500(%rbp), %rdi
    00003467: 	leaq	-0x1f4f0(%rbp), %rax
    0000346e: 	cmpq	%rax, %rdi
    00003471: 	je	.Ltmp2613 # Offset: 13425
    00003473: 	movq	-0x1f4f0(%rbp), %rax
    0000347a: 	leaq	0x1(%rax), %rsi
    0000347e: 	callq	_ZdlPvm@PLT # Offset: 13438
.Ltmp2613:
    00003483: 	movq	-0x1f520(%rbp), %rdi
    0000348a: 	leaq	-0x1f510(%rbp), %rax
    00003491: 	cmpq	%rax, %rdi
    00003494: 	je	.Ltmp2614 # Offset: 13460
    00003496: 	movq	-0x1f510(%rbp), %rax
    0000349d: 	leaq	0x1(%rax), %rsi
    000034a1: 	callq	_ZdlPvm@PLT # Offset: 13473
.Ltmp2614:
    000034a6: 	movq	%rbx, %rdi
    000034a9: 	callq	_Unwind_Resume@PLT # Offset: 13481
.Ltmp2609:
    000034ae: 	movq	-0x1f460(%rbp), %rdi
    000034b5: 	cmpq	-0x1f5b0(%rbp), %rdi
    000034bc: 	je	.Ltmp2613 # Offset: 13500
.Ltmp2622:
    000034be: 	movq	-0x1f450(%rbp), %rax
    000034c5: 	leaq	0x1(%rax), %rsi
    000034c9: 	callq	_ZdlPvm@PLT # Offset: 13513
    000034ce: 	jmp	.Ltmp2613 # Offset: 13518
.Ltmp2607:
    000034d0: 	movq	-0x1f460(%rbp), %rdi
    000034d7: 	cmpq	-0x1f5b0(%rbp), %rdi
    000034de: 	je	.Ltmp2615 # Offset: 13534
    000034e0: 	movq	-0x1f450(%rbp), %rax
    000034e7: 	leaq	0x1(%rax), %rsi
    000034eb: 	callq	_ZdlPvm@PLT # Offset: 13547
.Ltmp2615:
    000034f0: 	movq	-0x1f480(%rbp), %rdi
    000034f7: 	leaq	-0x1f470(%rbp), %rax
    000034fe: 	cmpq	%rax, %rdi
    00003501: 	je	.Ltmp2616 # Offset: 13569
    00003503: 	movq	-0x1f470(%rbp), %rax
    0000350a: 	leaq	0x1(%rax), %rsi
    0000350e: 	callq	_ZdlPvm@PLT # Offset: 13582
.Ltmp2616:
    00003513: 	movq	-0x1f4a0(%rbp), %rdi
    0000351a: 	leaq	-0x1f490(%rbp), %rax
    00003521: 	cmpq	%rax, %rdi
    00003524: 	je	.Ltmp2617 # Offset: 13604
    00003526: 	movq	-0x1f490(%rbp), %rax
    0000352d: 	leaq	0x1(%rax), %rsi
    00003531: 	callq	_ZdlPvm@PLT # Offset: 13617
.Ltmp2617:
    00003536: 	movq	-0x1f4c0(%rbp), %rdi
    0000353d: 	leaq	-0x1f4b0(%rbp), %rax
    00003544: 	cmpq	%rax, %rdi
    00003547: 	je	.Ltmp2618 # Offset: 13639
    00003549: 	movq	-0x1f4b0(%rbp), %rax
    00003550: 	leaq	0x1(%rax), %rsi
    00003554: 	callq	_ZdlPvm@PLT # Offset: 13652
.Ltmp2618:
    00003559: 	movq	-0x1f4e0(%rbp), %rdi
    00003560: 	leaq	-0x1f4d0(%rbp), %rax
    00003567: 	cmpq	%rax, %rdi
    0000356a: 	je	.Ltmp2612 # Offset: 13674
    00003570: 	movq	-0x1f4d0(%rbp), %rax
    00003577: 	leaq	0x1(%rax), %rsi
    0000357b: 	callq	_ZdlPvm@PLT # Offset: 13691
    00003580: 	jmp	.Ltmp2612 # Offset: 13696
    00003585: 	endbr64
.Ltmp2620:
    00003589: 	movq	%rax, %rbx
    0000358c: 	jmp	.Ltmp2619 # Offset: 13708
    0000358e: 	endbr64
    00003592: 	jmp	.Ltmp2610 # Offset: 13714
    00003597: 	endbr64
    0000359b: 	jmp	.Ltmp2610 # Offset: 13723
    000035a0: 	endbr64
    000035a4: 	jmp	.Ltmp2610 # Offset: 13732
.Ltmp2619:
    000035a9: 	movq	-0x1f460(%rbp), %rdi
    000035b0: 	cmpq	-0x1f5b0(%rbp), %rdi
    000035b7: 	je	.Ltmp2618 # Offset: 13751
    000035b9: 	movq	-0x1f450(%rbp), %rax
    000035c0: 	leaq	0x1(%rax), %rsi
    000035c4: 	callq	_ZdlPvm@PLT # Offset: 13764
    000035c9: 	jmp	.Ltmp2618 # Offset: 13769
    000035cb: 	endbr64
    000035cf: 	jmp	.Ltmp2610 # Offset: 13775
    000035d4: 	endbr64
    000035d8: 	jmp	.Ltmp2610 # Offset: 13784
    000035dd: 	endbr64
    000035e1: 	jmp	.Ltmp2610 # Offset: 13793
    000035e6: 	endbr64
    000035ea: 	jmp	.Ltmp2610 # Offset: 13802
    000035ef: 	endbr64
    000035f3: 	jmp	.Ltmp2620 # Offset: 13811
    000035f5: 	endbr64
    000035f9: 	jmp	.Ltmp2620 # Offset: 13817
    000035fb: 	endbr64
    000035ff: 	movq	%rax, %rbx
    00003602: 	jmp	.Ltmp2618 # Offset: 13826
    00003607: 	endbr64
    0000360b: 	jmp	.Ltmp2610 # Offset: 13835
    00003610: 	endbr64
    00003614: 	jmp	.Ltmp2620 # Offset: 13844
    00003619: 	endbr64
    0000361d: 	jmp	.Ltmp2620 # Offset: 13853
    00003622: 	endbr64
    00003626: 	jmp	.Ltmp2620 # Offset: 13862
    0000362b: 	endbr64
    0000362f: 	jmp	.Ltmp2620 # Offset: 13871
    00003634: 	endbr64
    00003638: 	jmp	.Ltmp2611 # Offset: 13880
    0000363d: 	endbr64
    00003641: 	jmp	.Ltmp2611 # Offset: 13889
    00003646: 	endbr64
    0000364a: 	movq	%rax, %rbx
    0000364d: 	jmp	.Ltmp2621 # Offset: 13901
    0000364f: 	endbr64
    00003653: 	movq	%rax, %rbx
    00003656: 	jmp	.Ltmp2613 # Offset: 13910
.Ltmp2621:
    0000365b: 	movq	-0x1f460(%rbp), %rdi
    00003662: 	leaq	-0x1f450(%rbp), %rax
    00003669: 	cmpq	%rax, %rdi
    0000366c: 	jne	.Ltmp2622 # Offset: 13932
    00003672: 	jmp	.Ltmp2613 # Offset: 13938
    00003677: 	endbr64
    0000367b: 	jmp	.Ltmp2623 # Offset: 13947
    00003680: 	endbr64
    00003684: 	jmp	.Ltmp2623 # Offset: 13956
    00003689: 	endbr64
    0000368d: 	jmp	.Ltmp2623 # Offset: 13965
    00003692: 	endbr64
    00003696: 	jmp	.Ltmp2623 # Offset: 13974
    0000369b: 	endbr64
    0000369f: 	movq	%rax, %rbx
    000036a2: 	jmp	.Ltmp2615 # Offset: 13986
    000036a7: 	endbr64
.Ltmp2625:
    000036ab: 	movq	%rax, %rbx
    000036ae: 	jmp	.Ltmp2624 # Offset: 13998
    000036b0: 	endbr64
    000036b4: 	jmp	.Ltmp2625 # Offset: 14004
    000036b6: 	endbr64
    000036ba: 	jmp	.Ltmp2625 # Offset: 14010
    000036bc: 	endbr64
    000036c0: 	jmp	.Ltmp2625 # Offset: 14016
    000036c2: 	endbr64
    000036c6: 	jmp	.Ltmp2625 # Offset: 14022
    000036c8: 	endbr64
    000036cc: 	jmp	.Ltmp2625 # Offset: 14028
    000036ce: 	endbr64
    000036d2: 	jmp	.Ltmp2625 # Offset: 14034
.Ltmp2624:
    000036d4: 	movq	-0x1f460(%rbp), %rdi
    000036db: 	cmpq	-0x1f5b0(%rbp), %rdi
    000036e2: 	je	.Ltmp2616 # Offset: 14050
    000036e8: 	movq	-0x1f450(%rbp), %rax
    000036ef: 	leaq	0x1(%rax), %rsi
    000036f3: 	callq	_ZdlPvm@PLT # Offset: 14067
    000036f8: 	jmp	.Ltmp2616 # Offset: 14072
    000036fd: 	endbr64
    00003701: 	jmp	.Ltmp2620 # Offset: 14081
    00003706: 	endbr64
    0000370a: 	jmp	.Ltmp2620 # Offset: 14090
    0000370f: 	endbr64
    00003713: 	jmp	.Ltmp2620 # Offset: 14099
    00003718: 	endbr64
    0000371c: 	jmp	.Ltmp2620 # Offset: 14108
    00003721: 	endbr64
    00003725: 	jmp	.Ltmp2620 # Offset: 14117
    0000372a: 	endbr64
    0000372e: 	jmp	.Ltmp2625 # Offset: 14126
    00003733: 	endbr64
    00003737: 	jmp	.Ltmp2625 # Offset: 14135
    0000373c: 	endbr64
    00003740: 	movq	%rax, %rbx
    00003743: 	jmp	.Ltmp2616 # Offset: 14147
    00003748: 	endbr64
.Ltmp2627:
    0000374c: 	movq	%rax, %rbx
    0000374f: 	jmp	.Ltmp2626 # Offset: 14159
    00003751: 	endbr64
    00003755: 	jmp	.Ltmp2627 # Offset: 14165
    00003757: 	endbr64
    0000375b: 	jmp	.Ltmp2620 # Offset: 14171
    00003760: 	endbr64
    00003764: 	jmp	.Ltmp2620 # Offset: 14180
    00003769: 	endbr64
    0000376d: 	jmp	.Ltmp2620 # Offset: 14189
    00003772: 	endbr64
    00003776: 	jmp	.Ltmp2627 # Offset: 14198
    00003778: 	endbr64
    0000377c: 	movq	%rax, %rbx
    0000377f: 	jmp	.Ltmp2617 # Offset: 14207
    00003784: 	endbr64
    00003788: 	jmp	.Ltmp2627 # Offset: 14216
.Ltmp2626:
    0000378a: 	movq	-0x1f460(%rbp), %rdi
    00003791: 	cmpq	-0x1f5b0(%rbp), %rdi
    00003798: 	je	.Ltmp2617 # Offset: 14232
    0000379e: 	movq	-0x1f450(%rbp), %rax
    000037a5: 	leaq	0x1(%rax), %rsi
    000037a9: 	callq	_ZdlPvm@PLT # Offset: 14249
    000037ae: 	jmp	.Ltmp2617 # Offset: 14254
DWARF CFI Instructions:
    <empty>
End of Function "_Z15testComplexTypeISt7complexIlEEvd"

Binary Function "_Z14test_variable4ISt7complexIiE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z14test_variable4ISt7complexIiE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z14test_variable4ISt7complexIiE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/complex_type.cpp/1
  Number      : 126
  State       : disassembled
  Address     : 0x25b90
  Size        : 0x490
  MaxSize     : 0x490
  Offset      : 0x25b90
  Section     : .text
  Orc Section : .local.text._Z14test_variable4ISt7complexIiE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rcx, %rbx
    00000013: 	subq	$0x58, %rsp
    00000017: 	movq	%r8, (%rsp)
    0000001b: 	movq	%rdi, 0x20(%rsp)
    00000020: 	movq	%r9, 0x30(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x48(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	(%rsp), %r8
    0000003e: 	movq	%rax, start_time(%rip)
    00000045: 	movl	iterations(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp2628 # Offset: 77
    00000053: 	movq	%r12, %rax
    00000056: 	movl	%r12d, (%rsp)
    0000005a: 	imull	%r12d, %r12d
    0000005e: 	movl	%ebp, %r15d
    00000061: 	sarq	$0x20, %rax
    00000065: 	movl	%ebx, %r13d
    00000068: 	movl	$0x0, 0x38(%rsp)
    00000070: 	movl	%eax, 0x8(%rsp)
    00000074: 	imull	%eax, %eax
    00000077: 	addl	%r12d, %eax
    0000007a: 	movl	%eax, 0xc(%rsp)
    0000007e: 	movq	%rbp, %rax
    00000081: 	imull	%ebp, %ebp
    00000084: 	sarq	$0x20, %rax
    00000088: 	movl	%eax, %r14d
    0000008b: 	imull	%eax, %eax
    0000008e: 	addl	%ebp, %eax
    00000090: 	movl	%r8d, %ebp
    00000093: 	movl	%eax, 0x10(%rsp)
    00000097: 	movq	%rbx, %rax
    0000009a: 	imull	%ebx, %ebx
    0000009d: 	sarq	$0x20, %rax
    000000a1: 	movl	%eax, %r12d
    000000a4: 	imull	%eax, %eax
    000000a7: 	addl	%ebx, %eax
    000000a9: 	movl	%eax, 0x14(%rsp)
    000000ad: 	movq	%r8, %rax
    000000b0: 	imull	%r8d, %r8d
    000000b4: 	sarq	$0x20, %rax
    000000b8: 	movl	%eax, %ebx
    000000ba: 	imull	%eax, %eax
    000000bd: 	leal	(%r8,%rax), %r9d
    000000c1: 	movq	0x20(%rsp), %rax
    000000c6: 	movl	%r9d, %r8d
    000000c9: 	addq	$0xfa00, %rax
    000000cf: 	movq	%rax, 0x18(%rsp)
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp2632:
    000000d8: 	movq	0x20(%rsp), %rdi
    000000dd: 	xorl	%r10d, %r10d
    000000e0: 	xorl	%r9d, %r9d
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2629:
    000000e8: 	movl	(%rdi), %ecx
    000000ea: 	movl	0x4(%rdi), %esi
    000000ed: 	movl	(%rsp), %eax
    000000f0: 	movl	0x8(%rsp), %edx
    000000f4: 	imull	%esi, %eax
    000000f7: 	imull	%ecx, %edx
    000000fa: 	imull	0x8(%rsp), %esi
    000000ff: 	imull	(%rsp), %ecx
    00000103: 	subl	%edx, %eax
    00000105: 	cltd
    00000106: 	idivl	0xc(%rsp)
    0000010a: 	addl	%esi, %ecx
    0000010c: 	movl	%eax, %r11d
    0000010f: 	movl	%ecx, %eax
    00000111: 	cltd
    00000112: 	idivl	0xc(%rsp)
    00000116: 	movl	%eax, %ecx
    00000118: 	movl	%r11d, %eax
    0000011b: 	movl	%ecx, %edx
    0000011d: 	imull	%r15d, %eax
    00000121: 	imull	%r14d, %edx
    00000125: 	imull	%r14d, %r11d
    00000129: 	imull	%r15d, %ecx
    0000012d: 	subl	%edx, %eax
    0000012f: 	cltd
    00000130: 	idivl	0x10(%rsp)
    00000134: 	addl	%r11d, %ecx
    00000137: 	movl	%eax, %esi
    00000139: 	movl	%ecx, %eax
    0000013b: 	cltd
    0000013c: 	idivl	0x10(%rsp)
    00000140: 	movl	%eax, %ecx
    00000142: 	movl	%esi, %eax
    00000144: 	movl	%ecx, %edx
    00000146: 	imull	%r13d, %eax
    0000014a: 	imull	%r12d, %edx
    0000014e: 	imull	%r13d, %ecx
    00000152: 	imull	%r12d, %esi
    00000156: 	subl	%edx, %eax
    00000158: 	cltd
    00000159: 	idivl	0x14(%rsp)
    0000015d: 	addl	%esi, %ecx
    0000015f: 	movl	%eax, %r11d
    00000162: 	movl	%ecx, %eax
    00000164: 	cltd
    00000165: 	idivl	0x14(%rsp)
    00000169: 	movl	%r11d, %edx
    0000016c: 	imull	%ebx, %edx
    0000016f: 	movl	%eax, %ecx
    00000171: 	imull	%ebp, %eax
    00000174: 	addl	%edx, %eax
    00000176: 	imull	%ebx, %ecx
    00000179: 	addq	$0x8, %rdi
    0000017d: 	cltd
    0000017e: 	idivl	%r8d
    00000181: 	addl	%eax, %r9d
    00000184: 	movl	%r11d, %eax
    00000187: 	imull	%ebp, %eax
    0000018a: 	subl	%ecx, %eax
    0000018c: 	cltd
    0000018d: 	idivl	%r8d
    00000190: 	addl	%eax, %r10d
    00000193: 	cmpq	%rdi, 0x18(%rsp)
    00000198: 	jne	.Ltmp2629 # Offset: 408
    0000019e: 	cvttsd2si	init_value(%rip), %ecx
    000001a6: 	movl	0x8(%rsp), %eax
    000001aa: 	movl	0xc(%rsp), %esi
    000001ae: 	movl	0x10(%rsp), %r11d
    000001b3: 	imull	%ecx, %eax
    000001b6: 	imull	(%rsp), %ecx
    000001ba: 	negl	%eax
    000001bc: 	cltd
    000001bd: 	idivl	%esi
    000001bf: 	movl	%eax, %edi
    000001c1: 	movl	%ecx, %eax
    000001c3: 	cltd
    000001c4: 	idivl	%esi
    000001c6: 	movl	%eax, %ecx
    000001c8: 	movl	%edi, %eax
    000001ca: 	movl	%ecx, %edx
    000001cc: 	imull	%r15d, %eax
    000001d0: 	imull	%r14d, %edx
    000001d4: 	imull	%r14d, %edi
    000001d8: 	imull	%r15d, %ecx
    000001dc: 	subl	%edx, %eax
    000001de: 	cltd
    000001df: 	idivl	%r11d
    000001e2: 	addl	%edi, %ecx
    000001e4: 	movl	%eax, %esi
    000001e6: 	movl	%ecx, %eax
    000001e8: 	cltd
    000001e9: 	idivl	%r11d
    000001ec: 	movl	0x14(%rsp), %r11d
    000001f1: 	movl	%eax, %ecx
    000001f3: 	movl	%esi, %eax
    000001f5: 	movl	%ecx, %edx
    000001f7: 	imull	%r13d, %eax
    000001fb: 	imull	%r12d, %edx
    000001ff: 	imull	%r13d, %ecx
    00000203: 	imull	%r12d, %esi
    00000207: 	subl	%edx, %eax
    00000209: 	cltd
    0000020a: 	idivl	%r11d
    0000020d: 	addl	%esi, %ecx
    0000020f: 	movl	%eax, %edi
    00000211: 	movl	%ecx, %eax
    00000213: 	cltd
    00000214: 	idivl	%r11d
    00000217: 	movl	%edi, %edx
    00000219: 	imull	%ebx, %edx
    0000021c: 	movl	%eax, %ecx
    0000021e: 	imull	%ebp, %eax
    00000221: 	addl	%edx, %eax
    00000223: 	cltd
    00000224: 	idivl	%r8d
    00000227: 	imull	$0x1f40, %eax, %eax
    0000022d: 	imull	%ebx, %ecx
    00000230: 	subl	%eax, %r9d
    00000233: 	movl	%edi, %eax
    00000235: 	imull	%ebp, %eax
    00000238: 	subl	%ecx, %eax
    0000023a: 	cltd
    0000023b: 	idivl	%r8d
    0000023e: 	imull	$0x1f40, %eax, %eax
    00000244: 	subl	%eax, %r10d
    00000247: 	movl	%r9d, %eax
    0000024a: 	movl	%r10d, %ecx
    0000024d: 	negl	%ecx
    0000024f: 	cmovsl	%r10d, %ecx
    00000253: 	negl	%eax
    00000255: 	cmovsl	%r9d, %eax
    00000259: 	cmpl	%eax, %ecx
    0000025b: 	jg	.Ltmp2630 # Offset: 603
    00000261: 	testl	%r9d, %r9d
    00000264: 	jne	.Ltmp2631 # Offset: 612
.Ltmp2641:
    0000026a: 	addl	$0x1, 0x38(%rsp)
    0000026f: 	movl	0x38(%rsp), %eax
    00000273: 	cmpl	iterations(%rip), %eax
    00000279: 	jl	.Ltmp2632 # Offset: 633
.Ltmp2628:
    0000027f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000028d: 	subq	$0x20, %rax
    00000291: 	cmpq	%rax, %rbx
    00000294: 	je	.Ltmp2633 # Offset: 660
    0000029a: 	movq	0x30(%rsp), %rax
    0000029f: 	leaq	0x10(%rbx), %rdi
    000002a3: 	movq	%rdi, (%rbx)
    000002a6: 	movq	(%rax), %rbp
    000002a9: 	movq	0x8(%rax), %r12
    000002ad: 	movq	%rbp, %rax
    000002b0: 	addq	%r12, %rax
    000002b3: 	je	.Ltmp2634 # Offset: 691
    000002b5: 	testq	%rbp, %rbp
    000002b8: 	je	.Ltmp2635 # Offset: 696
.Ltmp2634:
    000002be: 	movq	%r12, 0x40(%rsp)
    000002c3: 	cmpq	$0xf, %r12
    000002c7: 	ja	.Ltmp2636 # Offset: 711
    000002cd: 	cmpq	$0x1, %r12
    000002d1: 	jne	.Ltmp2637 # Offset: 721
    000002d7: 	movzbl	(%rbp), %eax
    000002db: 	movb	%al, 0x10(%rbx)
.Ltmp2642:
    000002de: 	movq	%r12, 0x8(%rbx)
    000002e2: 	movb	$0x0, (%rdi,%r12)
    000002e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ee: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f5: 	addq	$0x20, %rax
    000002f9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000300: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000307: 	je	.Ltmp2638 # Offset: 775
.Ltmp2643:
    0000030d: 	movq	-0x20(%rax), %rbp
    00000311: 	callq	clock@PLT # Offset: 785
    00000316: 	movq	%rax, end_time(%rip)
    0000031d: 	movq	0x48(%rsp), %rdx
    00000322: 	subq	%fs:0x28, %rdx
    0000032b: 	jne	.Ltmp2639 # Offset: 811
    00000331: 	subq	start_time(%rip), %rax
    00000338: 	pxor	%xmm0, %xmm0
    0000033c: 	movq	%rbp, %rdi
    0000033f: 	cvtsi2sd	%rax, %xmm0
    00000344: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000034c: 	addq	$0x58, %rsp
    00000350: 	popq	%rbx
    00000351: 	popq	%rbp
    00000352: 	popq	%r12
    00000354: 	popq	%r13
    00000356: 	popq	%r14
    00000358: 	popq	%r15
    0000035a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 858
    0000035f: 	nop # Size: 1
.Ltmp2631:
    00000360: 	movl	%eax, %ecx
.Ltmp2630:
    00000362: 	pxor	%xmm0, %xmm0
    00000366: 	pxor	%xmm2, %xmm2
    0000036a: 	pxor	%xmm1, %xmm1
    0000036e: 	movl	%r9d, %eax
    00000371: 	cltd
    00000372: 	cvtsi2sd	%ecx, %xmm1
    00000376: 	idivl	%ecx
    00000378: 	movl	%eax, %r9d
    0000037b: 	movl	%r10d, %eax
    0000037e: 	cltd
    0000037f: 	imull	%r9d, %r9d
    00000383: 	idivl	%ecx
    00000385: 	movl	%eax, %r10d
    00000388: 	imull	%eax, %r10d
    0000038c: 	addl	%r10d, %r9d
    0000038f: 	cvtsi2sd	%r9d, %xmm0
    00000394: 	ucomisd	%xmm0, %xmm2
    00000398: 	ja	.Ltmp2640 # Offset: 920
    0000039e: 	sqrtsd	%xmm0, %xmm0
.Ltmp2645:
    000003a2: 	mulsd	%xmm1, %xmm0
    000003a6: 	cvttsd2si	%xmm0, %eax
    000003aa: 	testl	%eax, %eax
    000003ac: 	jle	.Ltmp2641 # Offset: 940
    000003b2: 	movl	current_test(%rip), %edx
    000003b8: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000003bf: 	movl	$0x1, %edi
    000003c4: 	xorl	%eax, %eax
    000003c6: 	movl	%r8d, 0x28(%rsp)
    000003cb: 	callq	__printf_chk@PLT # Offset: 971
    000003d0: 	movl	0x28(%rsp), %r8d
    000003d5: 	jmp	.Ltmp2641 # Offset: 981
.Ltmp2636:
    000003da: 	movq	%rbx, %rdi
    000003dd: 	leaq	0x40(%rsp), %rsi
    000003e2: 	xorl	%edx, %edx
    000003e4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 996
    000003e9: 	movq	%rax, (%rbx)
    000003ec: 	movq	%rax, %rdi
    000003ef: 	movq	0x40(%rsp), %rax
    000003f4: 	movq	%rax, 0x10(%rbx)
.Ltmp2644:
    000003f8: 	movq	%r12, %rdx
    000003fb: 	movq	%rbp, %rsi
    000003fe: 	callq	memcpy@PLT # Offset: 1022
    00000403: 	movq	0x40(%rsp), %r12
    00000408: 	movq	(%rbx), %rdi
    0000040b: 	jmp	.Ltmp2642 # Offset: 1035
.Ltmp2633:
    00000410: 	movq	0x30(%rsp), %rsi
    00000415: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000041c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1052
    00000421: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000428: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000042f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000436: 	jne	.Ltmp2643 # Offset: 1078
.Ltmp2638:
    0000043c: 	movq	-0x8(%rdx), %rax
    00000440: 	addq	$0x200, %rax
    00000446: 	jmp	.Ltmp2643 # Offset: 1094
.Ltmp2637:
    0000044b: 	testq	%r12, %r12
    0000044e: 	je	.Ltmp2642 # Offset: 1102
    00000454: 	jmp	.Ltmp2644 # Offset: 1108
.Ltmp2639:
    00000456: 	callq	__stack_chk_fail@PLT # Offset: 1110
.Ltmp2635:
    0000045b: 	leaq	DATAat0x2b008(%rip), %rdi
    00000462: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1122
    00000467: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2640:
    00000470: 	movl	%r8d, 0x3c(%rsp)
    00000475: 	movsd	%xmm1, 0x28(%rsp)
    0000047b: 	callq	sqrt@PLT # Offset: 1147
    00000480: 	movl	0x3c(%rsp), %r8d
    00000485: 	movsd	0x28(%rsp), %xmm1
    0000048b: 	jmp	.Ltmp2645 # Offset: 1163
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable4ISt7complexIiE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z15testComplexTypeISt7complexIiEEvd" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x26020
  Size        : 0x3fea
  MaxSize     : 0x3fea
  Offset      : 0x26020
  Section     : .text
  Orc Section : .local.text._Z15testComplexTypeISt7complexIiEEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp2646:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2646 # Offset: 37
    00000027: 	subq	$0xbb8, %rsp
    0000002e: 	movl	$0xfa00, %edx
    00000033: 	xorl	%esi, %esi
    00000035: 	leaq	0x1a0(%rsp), %rbp
    0000003d: 	movsd	%xmm0, (%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0xfba8(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movq	%rbp, %rdi
    00000058: 	movq	%rbp, 0x10(%rsp)
    0000005d: 	callq	memset@PLT # Offset: 93
    00000062: 	movsd	(%rsp), %xmm0
    00000067: 	movsd	DATAat0x2b620(%rip), %xmm1
    0000006f: 	cvttsd2si	%xmm0, %r14d
    00000074: 	addsd	%xmm0, %xmm1
    00000078: 	cvttsd2si	%xmm1, %r15d
    0000007d: 	leal	(%r14,%r14), %eax
    00000081: 	leal	0x2(%r14), %ebx
    00000085: 	movl	%eax, %r11d
    00000088: 	addl	%r14d, %eax
    0000008b: 	movl	%ebx, 0x84(%rsp)
    00000092: 	leal	(%r15,%r15), %edx
    00000096: 	leal	0x4(%r15), %esi
    0000009a: 	leal	(%rdx,%r15), %ecx
    0000009e: 	leal	(%rax,%rdx), %edi
    000000a1: 	movl	%esi, %eax
    000000a3: 	movl	%esi, %edx
    000000a5: 	subl	%ecx, %r11d
    000000a8: 	imull	%esi, %eax
    000000ab: 	movl	%ebx, %ecx
    000000ad: 	movl	%esi, 0x70(%rsp)
    000000b1: 	imull	%ebx, %ecx
    000000b4: 	movl	%r11d, 0x88(%rsp)
    000000bc: 	imull	%edi, %edx
    000000bf: 	movl	%edi, 0x8c(%rsp)
    000000c6: 	addl	%eax, %ecx
    000000c8: 	movl	%ebx, %eax
    000000ca: 	imull	%r11d, %eax
    000000ce: 	imull	%edi, %ebx
    000000d1: 	addl	%edx, %eax
    000000d3: 	cltd
    000000d4: 	idivl	%ecx
    000000d6: 	movl	%esi, %edx
    000000d8: 	imull	%r11d, %edx
    000000dc: 	addl	%r14d, %eax
    000000df: 	movl	%eax, 0x58(%rsp)
    000000e3: 	movl	%ebx, %eax
    000000e5: 	leaq	0xfba0(%rsp), %rbx
    000000ed: 	subl	%edx, %eax
    000000ef: 	cltd
    000000f0: 	idivl	%ecx
    000000f2: 	cvttsd2si	init_value(%rip), %edx
    000000fa: 	movd	%edx, %xmm0
    000000fe: 	punpcklqdq	%xmm0, %xmm0
    00000102: 	addl	%r15d, %eax
    00000105: 	movl	%eax, 0x60(%rsp)
    00000109: 	movq	%rbp, %rax
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp2647:
    00000110: 	movaps	%xmm0, (%rax)
    00000113: 	addq	$0x20, %rax
    00000117: 	movaps	%xmm0, -0x10(%rax)
    0000011b: 	cmpq	%rax, %rbx
    0000011e: 	jne	.Ltmp2647 # Offset: 286
    00000120: 	leaq	0xc0(%rsp), %rbp
    00000128: 	leaq	DATAat0x2b604(%rip), %rsi
    0000012f: 	movq	%rbp, %rdi
    00000132: 	movq	%rbp, 0x50(%rsp)
    00000137: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 311
    0000013c: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm3
    00000144: 	leaq	0xa0(%rsp), %rsi
    0000014c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000153: 	movaps	%xmm3, 0xa0(%rsp)
    0000015b: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm3
    00000163: 	movaps	%xmm3, 0xb0(%rsp)
    0000016b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 363
    00000170: 	leaq	0x180(%rsp), %rax
    00000178: 	leaq	DATAat0x2b561(%rip), %rdx
    0000017f: 	movq	%rbp, %rsi
    00000182: 	movq	%rax, %rdi
    00000185: 	movq	%rax, 0x18(%rsp)
    0000018a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 394
    0000018f: 	callq	clock@PLT # Offset: 399
    00000194: 	movl	iterations(%rip), %r13d
    0000019b: 	xorl	%ebp, %ebp
    0000019d: 	leaq	DATAat0x2b1d0(%rip), %r12
    000001a4: 	movq	%rax, start_time(%rip)
    000001ab: 	testl	%r13d, %r13d
    000001ae: 	jg	.Ltmp2648 # Offset: 430
    000001b0: 	jmp	.Ltmp2649 # Offset: 432
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2650:
    000001b8: 	addl	$0x1, %ebp
    000001bb: 	cmpl	iterations(%rip), %ebp
    000001c1: 	jge	.Ltmp2649 # Offset: 449
.Ltmp2648:
    000001c3: 	xorl	%esi, %esi
    000001c5: 	xorl	%edi, %edi
    000001c7: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 455
    000001cc: 	testl	%eax, %eax
    000001ce: 	jle	.Ltmp2650 # Offset: 462
    000001d0: 	movl	current_test(%rip), %edx
    000001d6: 	movq	%r12, %rsi
    000001d9: 	movl	$0x1, %edi
    000001de: 	xorl	%eax, %eax
    000001e0: 	callq	__printf_chk@PLT # Offset: 480
    000001e5: 	addl	$0x1, %ebp
    000001e8: 	cmpl	iterations(%rip), %ebp
    000001ee: 	jl	.Ltmp2648 # Offset: 494
.Ltmp2649:
    000001f0: 	movq	0x18(%rsp), %rsi
    000001f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 508
    00000201: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000208: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	je	.Ltmp2651 # Offset: 534
.Ltmp2863:
    0000021c: 	movq	-0x20(%rax), %rbp
    00000220: 	callq	clock@PLT # Offset: 544
    00000225: 	pxor	%xmm0, %xmm0
    00000229: 	movq	%rax, end_time(%rip)
    00000230: 	movq	%rbp, %rdi
    00000233: 	subq	start_time(%rip), %rax
    0000023a: 	cvtsi2sd	%rax, %xmm0
    0000023f: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000247: 	callq	_Z13record_resultdPKc # Offset: 583
    0000024c: 	movq	0x180(%rsp), %rdi
    00000254: 	leaq	0x190(%rsp), %rax
    0000025c: 	movq	%rax, 0x20(%rsp)
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp2652 # Offset: 612
    00000266: 	movq	0x190(%rsp), %rax
    0000026e: 	leaq	0x1(%rax), %rsi
    00000272: 	callq	_ZdlPvm@PLT # Offset: 626
.Ltmp2652:
    00000277: 	movq	0x50(%rsp), %rsi
    0000027c: 	movq	0x18(%rsp), %rdi
    00000281: 	leaq	DATAat0x2b1e0(%rip), %rdx
    00000288: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 648
    0000028d: 	callq	clock@PLT # Offset: 653
    00000292: 	movl	iterations(%rip), %r11d
    00000299: 	xorl	%ebp, %ebp
    0000029b: 	leaq	DATAat0x2b1d0(%rip), %r12
    000002a2: 	movq	%rax, start_time(%rip)
    000002a9: 	testl	%r11d, %r11d
    000002ac: 	jg	.Ltmp2653 # Offset: 684
    000002ae: 	jmp	.Ltmp2654 # Offset: 686
.Ltmp2655:
    000002b0: 	addl	$0x1, %ebp
    000002b3: 	cmpl	iterations(%rip), %ebp
    000002b9: 	jge	.Ltmp2654 # Offset: 697
.Ltmp2653:
    000002bb: 	xorl	%esi, %esi
    000002bd: 	xorl	%edi, %edi
    000002bf: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 703
    000002c4: 	testl	%eax, %eax
    000002c6: 	jle	.Ltmp2655 # Offset: 710
    000002c8: 	movl	current_test(%rip), %edx
    000002ce: 	movq	%r12, %rsi
    000002d1: 	movl	$0x1, %edi
    000002d6: 	xorl	%eax, %eax
    000002d8: 	callq	__printf_chk@PLT # Offset: 728
    000002dd: 	addl	$0x1, %ebp
    000002e0: 	cmpl	iterations(%rip), %ebp
    000002e6: 	jl	.Ltmp2653 # Offset: 742
.Ltmp2654:
    000002e8: 	movq	0x18(%rsp), %rsi
    000002ed: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 756
    000002f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000300: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000307: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000030e: 	je	.Ltmp2656 # Offset: 782
.Ltmp2893:
    00000314: 	movq	-0x20(%rax), %rbp
    00000318: 	callq	clock@PLT # Offset: 792
    0000031d: 	pxor	%xmm0, %xmm0
    00000321: 	movq	%rax, end_time(%rip)
    00000328: 	movq	%rbp, %rdi
    0000032b: 	subq	start_time(%rip), %rax
    00000332: 	cvtsi2sd	%rax, %xmm0
    00000337: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000033f: 	callq	_Z13record_resultdPKc # Offset: 831
    00000344: 	movq	0x180(%rsp), %rdi
    0000034c: 	cmpq	0x20(%rsp), %rdi
    00000351: 	je	.Ltmp2657 # Offset: 849
    00000353: 	movq	0x190(%rsp), %rax
    0000035b: 	leaq	0x1(%rax), %rsi
    0000035f: 	callq	_ZdlPvm@PLT # Offset: 863
.Ltmp2657:
    00000364: 	movq	0x50(%rsp), %rsi
    00000369: 	movq	0x18(%rsp), %rdi
    0000036e: 	leaq	DATAat0x2b1ef(%rip), %rdx
    00000375: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 885
    0000037a: 	callq	clock@PLT # Offset: 890
    0000037f: 	movl	iterations(%rip), %r10d
    00000386: 	xorl	%ebp, %ebp
    00000388: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000038f: 	movq	%rax, start_time(%rip)
    00000396: 	testl	%r10d, %r10d
    00000399: 	jg	.Ltmp2658 # Offset: 921
    0000039b: 	jmp	.Ltmp2659 # Offset: 923
    0000039d: 	nopl	(%rax) # Size: 3
.Ltmp2660:
    000003a0: 	addl	$0x1, %ebp
    000003a3: 	cmpl	iterations(%rip), %ebp
    000003a9: 	jge	.Ltmp2659 # Offset: 937
.Ltmp2658:
    000003ab: 	xorl	%esi, %esi
    000003ad: 	xorl	%edi, %edi
    000003af: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 943
    000003b4: 	testl	%eax, %eax
    000003b6: 	jle	.Ltmp2660 # Offset: 950
    000003b8: 	movl	current_test(%rip), %edx
    000003be: 	movq	%r12, %rsi
    000003c1: 	movl	$0x1, %edi
    000003c6: 	xorl	%eax, %eax
    000003c8: 	callq	__printf_chk@PLT # Offset: 968
    000003cd: 	addl	$0x1, %ebp
    000003d0: 	cmpl	iterations(%rip), %ebp
    000003d6: 	jl	.Ltmp2658 # Offset: 982
.Ltmp2659:
    000003d8: 	movq	0x18(%rsp), %rsi
    000003dd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 996
    000003e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003fe: 	je	.Ltmp2661 # Offset: 1022
.Ltmp2892:
    00000404: 	movq	-0x20(%rax), %rbp
    00000408: 	callq	clock@PLT # Offset: 1032
    0000040d: 	pxor	%xmm0, %xmm0
    00000411: 	movq	%rax, end_time(%rip)
    00000418: 	movq	%rbp, %rdi
    0000041b: 	subq	start_time(%rip), %rax
    00000422: 	cvtsi2sd	%rax, %xmm0
    00000427: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000042f: 	callq	_Z13record_resultdPKc # Offset: 1071
    00000434: 	movq	0x180(%rsp), %rdi
    0000043c: 	cmpq	0x20(%rsp), %rdi
    00000441: 	je	.Ltmp2662 # Offset: 1089
    00000443: 	movq	0x190(%rsp), %rax
    0000044b: 	leaq	0x1(%rax), %rsi
    0000044f: 	callq	_ZdlPvm@PLT # Offset: 1103
.Ltmp2662:
    00000454: 	movq	0x50(%rsp), %rsi
    00000459: 	movq	0x18(%rsp), %rdi
    0000045e: 	leaq	DATAat0x2b203(%rip), %rdx
    00000465: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1125
    0000046a: 	callq	clock@PLT # Offset: 1130
    0000046f: 	movl	iterations(%rip), %r9d
    00000476: 	xorl	%ebp, %ebp
    00000478: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000047f: 	movq	%rax, start_time(%rip)
    00000486: 	testl	%r9d, %r9d
    00000489: 	jg	.Ltmp2663 # Offset: 1161
    0000048b: 	jmp	.Ltmp2664 # Offset: 1163
    0000048d: 	nopl	(%rax) # Size: 3
.Ltmp2665:
    00000490: 	addl	$0x1, %ebp
    00000493: 	cmpl	iterations(%rip), %ebp
    00000499: 	jge	.Ltmp2664 # Offset: 1177
.Ltmp2663:
    0000049b: 	xorl	%esi, %esi
    0000049d: 	xorl	%edi, %edi
    0000049f: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 1183
    000004a4: 	testl	%eax, %eax
    000004a6: 	jle	.Ltmp2665 # Offset: 1190
    000004a8: 	movl	current_test(%rip), %edx
    000004ae: 	movq	%r12, %rsi
    000004b1: 	movl	$0x1, %edi
    000004b6: 	xorl	%eax, %eax
    000004b8: 	callq	__printf_chk@PLT # Offset: 1208
    000004bd: 	addl	$0x1, %ebp
    000004c0: 	cmpl	iterations(%rip), %ebp
    000004c6: 	jl	.Ltmp2663 # Offset: 1222
.Ltmp2664:
    000004c8: 	movq	0x18(%rsp), %rsi
    000004cd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004d4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1236
    000004d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004e0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004e7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004ee: 	je	.Ltmp2666 # Offset: 1262
.Ltmp2891:
    000004f4: 	movq	-0x20(%rax), %rbp
    000004f8: 	callq	clock@PLT # Offset: 1272
    000004fd: 	pxor	%xmm0, %xmm0
    00000501: 	movq	%rax, end_time(%rip)
    00000508: 	movq	%rbp, %rdi
    0000050b: 	subq	start_time(%rip), %rax
    00000512: 	cvtsi2sd	%rax, %xmm0
    00000517: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000051f: 	callq	_Z13record_resultdPKc # Offset: 1311
    00000524: 	movq	0x180(%rsp), %rdi
    0000052c: 	cmpq	0x20(%rsp), %rdi
    00000531: 	je	.Ltmp2667 # Offset: 1329
    00000533: 	movq	0x190(%rsp), %rax
    0000053b: 	leaq	0x1(%rax), %rsi
    0000053f: 	callq	_ZdlPvm@PLT # Offset: 1343
.Ltmp2667:
    00000544: 	movq	0x50(%rsp), %rsi
    00000549: 	movq	0x18(%rsp), %rdi
    0000054e: 	leaq	DATAat0x2b217(%rip), %rdx
    00000555: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1365
    0000055a: 	callq	clock@PLT # Offset: 1370
    0000055f: 	movl	iterations(%rip), %r8d
    00000566: 	xorl	%ebp, %ebp
    00000568: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000056f: 	movq	%rax, start_time(%rip)
    00000576: 	testl	%r8d, %r8d
    00000579: 	jg	.Ltmp2668 # Offset: 1401
    0000057b: 	jmp	.Ltmp2669 # Offset: 1403
    0000057d: 	nopl	(%rax) # Size: 3
.Ltmp2670:
    00000580: 	addl	$0x1, %ebp
    00000583: 	cmpl	iterations(%rip), %ebp
    00000589: 	jge	.Ltmp2669 # Offset: 1417
.Ltmp2668:
    0000058b: 	xorl	%esi, %esi
    0000058d: 	xorl	%edi, %edi
    0000058f: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 1423
    00000594: 	testl	%eax, %eax
    00000596: 	jle	.Ltmp2670 # Offset: 1430
    00000598: 	movl	current_test(%rip), %edx
    0000059e: 	movq	%r12, %rsi
    000005a1: 	movl	$0x1, %edi
    000005a6: 	xorl	%eax, %eax
    000005a8: 	callq	__printf_chk@PLT # Offset: 1448
    000005ad: 	addl	$0x1, %ebp
    000005b0: 	cmpl	iterations(%rip), %ebp
    000005b6: 	jl	.Ltmp2668 # Offset: 1462
.Ltmp2669:
    000005b8: 	movq	0x18(%rsp), %rsi
    000005bd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000005c4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1476
    000005c9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005d0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005d7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005de: 	je	.Ltmp2671 # Offset: 1502
.Ltmp2890:
    000005e4: 	movq	-0x20(%rax), %rbp
    000005e8: 	callq	clock@PLT # Offset: 1512
    000005ed: 	pxor	%xmm0, %xmm0
    000005f1: 	movq	%rax, end_time(%rip)
    000005f8: 	movq	%rbp, %rdi
    000005fb: 	subq	start_time(%rip), %rax
    00000602: 	cvtsi2sd	%rax, %xmm0
    00000607: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000060f: 	callq	_Z13record_resultdPKc # Offset: 1551
    00000614: 	movq	0x180(%rsp), %rdi
    0000061c: 	cmpq	0x20(%rsp), %rdi
    00000621: 	je	.Ltmp2672 # Offset: 1569
    00000623: 	movq	0x190(%rsp), %rax
    0000062b: 	leaq	0x1(%rax), %rsi
    0000062f: 	callq	_ZdlPvm@PLT # Offset: 1583
.Ltmp2672:
    00000634: 	movq	0x50(%rsp), %rsi
    00000639: 	movq	0x18(%rsp), %rdi
    0000063e: 	leaq	DATAat0x2b229(%rip), %rdx
    00000645: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1605
    0000064a: 	callq	clock@PLT # Offset: 1610
    0000064f: 	movl	iterations(%rip), %r12d
    00000656: 	xorl	%ebp, %ebp
    00000658: 	leaq	DATAat0x2b1d0(%rip), %r13
    0000065f: 	movq	%rax, start_time(%rip)
    00000666: 	testl	%r12d, %r12d
    00000669: 	jg	.Ltmp2673 # Offset: 1641
    0000066b: 	jmp	.Ltmp2674 # Offset: 1643
    0000066d: 	nopl	(%rax) # Size: 3
.Ltmp2675:
    00000670: 	addl	$0x1, %ebp
    00000673: 	cmpl	%r12d, %ebp
    00000676: 	jge	.Ltmp2674 # Offset: 1654
.Ltmp2673:
    00000678: 	xorl	%esi, %esi
    0000067a: 	xorl	%edi, %edi
    0000067c: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 1660
    00000681: 	testl	%eax, %eax
    00000683: 	jle	.Ltmp2675 # Offset: 1667
    00000685: 	movl	current_test(%rip), %edx
    0000068b: 	movq	%r13, %rsi
    0000068e: 	movl	$0x1, %edi
    00000693: 	xorl	%eax, %eax
    00000695: 	callq	__printf_chk@PLT # Offset: 1685
    0000069a: 	movl	iterations(%rip), %r12d
    000006a1: 	addl	$0x1, %ebp
    000006a4: 	cmpl	%r12d, %ebp
    000006a7: 	jl	.Ltmp2673 # Offset: 1703
.Ltmp2674:
    000006a9: 	movq	0x18(%rsp), %rsi
    000006ae: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000006b5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1717
    000006ba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006c1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000006c8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006cf: 	je	.Ltmp2676 # Offset: 1743
.Ltmp2889:
    000006d5: 	movq	-0x20(%rax), %rbp
    000006d9: 	callq	clock@PLT # Offset: 1753
    000006de: 	pxor	%xmm0, %xmm0
    000006e2: 	movq	%rax, end_time(%rip)
    000006e9: 	movq	%rbp, %rdi
    000006ec: 	subq	start_time(%rip), %rax
    000006f3: 	cvtsi2sd	%rax, %xmm0
    000006f8: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000700: 	callq	_Z13record_resultdPKc # Offset: 1792
    00000705: 	movq	0x180(%rsp), %rdi
    0000070d: 	cmpq	0x20(%rsp), %rdi
    00000712: 	je	.Ltmp2677 # Offset: 1810
    00000714: 	movq	0x190(%rsp), %rax
    0000071c: 	leaq	0x1(%rax), %rsi
    00000720: 	callq	_ZdlPvm@PLT # Offset: 1824
.Ltmp2677:
    00000725: 	movq	0x50(%rsp), %rsi
    0000072a: 	movq	0x18(%rsp), %rdi
    0000072f: 	leaq	DATAat0x2b23a(%rip), %rdx
    00000736: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1846
    0000073b: 	callq	clock@PLT # Offset: 1851
    00000740: 	movl	iterations(%rip), %edi
    00000746: 	xorl	%ebp, %ebp
    00000748: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000074f: 	movq	%rax, start_time(%rip)
    00000756: 	testl	%edi, %edi
    00000758: 	jg	.Ltmp2678 # Offset: 1880
    0000075a: 	jmp	.Ltmp2679 # Offset: 1882
    0000075c: 	nopl	(%rax) # Size: 4
.Ltmp2680:
    00000760: 	addl	$0x1, %ebp
    00000763: 	cmpl	iterations(%rip), %ebp
    00000769: 	jge	.Ltmp2679 # Offset: 1897
.Ltmp2678:
    0000076b: 	xorl	%esi, %esi
    0000076d: 	xorl	%edi, %edi
    0000076f: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 1903
    00000774: 	testl	%eax, %eax
    00000776: 	jle	.Ltmp2680 # Offset: 1910
    00000778: 	movl	current_test(%rip), %edx
    0000077e: 	movq	%r12, %rsi
    00000781: 	movl	$0x1, %edi
    00000786: 	xorl	%eax, %eax
    00000788: 	callq	__printf_chk@PLT # Offset: 1928
    0000078d: 	addl	$0x1, %ebp
    00000790: 	cmpl	iterations(%rip), %ebp
    00000796: 	jl	.Ltmp2678 # Offset: 1942
.Ltmp2679:
    00000798: 	movq	0x18(%rsp), %rsi
    0000079d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000007a4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1956
    000007a9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007b0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007b7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007be: 	je	.Ltmp2681 # Offset: 1982
.Ltmp2888:
    000007c4: 	movq	-0x20(%rax), %rbp
    000007c8: 	callq	clock@PLT # Offset: 1992
    000007cd: 	pxor	%xmm0, %xmm0
    000007d1: 	movq	%rax, end_time(%rip)
    000007d8: 	movq	%rbp, %rdi
    000007db: 	subq	start_time(%rip), %rax
    000007e2: 	cvtsi2sd	%rax, %xmm0
    000007e7: 	divsd	DATAat0x2b628(%rip), %xmm0
    000007ef: 	callq	_Z13record_resultdPKc # Offset: 2031
    000007f4: 	movq	0x180(%rsp), %rdi
    000007fc: 	cmpq	0x20(%rsp), %rdi
    00000801: 	je	.Ltmp2682 # Offset: 2049
    00000803: 	movq	0x190(%rsp), %rax
    0000080b: 	leaq	0x1(%rax), %rsi
    0000080f: 	callq	_ZdlPvm@PLT # Offset: 2063
.Ltmp2682:
    00000814: 	movq	0x50(%rsp), %rbp
    00000819: 	leaq	0xe0(%rsp), %rdi
    00000821: 	leaq	DATAat0x2b24e(%rip), %rdx
    00000828: 	movq	%rbp, %rsi
    0000082b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2091
    00000830: 	movl	iterations(%rip), %edx
    00000836: 	xorl	%r8d, %r8d
    00000839: 	xorl	%ecx, %ecx
    0000083b: 	movl	$0x1f40, %esi
    00000840: 	movq	0xe0(%rsp), %rdi
    00000848: 	callq	_Z9summarizePKciiii # Offset: 2120
    0000084d: 	movq	%rbp, %rsi
    00000850: 	movq	0x18(%rsp), %rbp
    00000855: 	leaq	DATAat0x2b267(%rip), %rdx
    0000085c: 	movq	%rbp, %rdi
    0000085f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2143
    00000864: 	movq	0x10(%rsp), %rdi
    00000869: 	movq	%rbp, %rsi
    0000086c: 	callq	"_Z13test_constantISt7complexIiE20complex_constant_addIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2156
    00000871: 	movq	0x180(%rsp), %rdi
    00000879: 	cmpq	0x20(%rsp), %rdi
    0000087e: 	je	.Ltmp2683 # Offset: 2174
    00000880: 	movq	0x190(%rsp), %rax
    00000888: 	leaq	0x1(%rax), %rsi
    0000088c: 	callq	_ZdlPvm@PLT # Offset: 2188
.Ltmp2683:
    00000891: 	movq	0x50(%rsp), %rsi
    00000896: 	movq	0x18(%rsp), %rdi
    0000089b: 	leaq	DATAat0x2b275(%rip), %rdx
    000008a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2210
    000008a7: 	callq	clock@PLT # Offset: 2215
    000008ac: 	movl	iterations(%rip), %esi
    000008b2: 	xorl	%ebp, %ebp
    000008b4: 	leaq	DATAat0x2b1d0(%rip), %r12
    000008bb: 	movq	%rax, start_time(%rip)
    000008c2: 	testl	%esi, %esi
    000008c4: 	jle	.Ltmp2684 # Offset: 2244
    000008ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2687:
    000008d0: 	movq	0x10(%rsp), %rax
    000008d5: 	pxor	%xmm0, %xmm0
    000008d9: 	nopl	(%rax) # Size: 7
.Ltmp2685:
    000008e0: 	movdqa	DATAat0x2b8b0(%rip), %xmm1
    000008e8: 	paddd	(%rax), %xmm1
    000008ec: 	addq	$0x10, %rax
    000008f0: 	paddd	%xmm1, %xmm0
    000008f4: 	cmpq	%rax, %rbx
    000008f7: 	jne	.Ltmp2685 # Offset: 2295
    000008f9: 	pshufd	$0xff, %xmm0, %xmm1
    000008fe: 	movd	%xmm1, %edx
    00000902: 	pshufd	$0x55, %xmm0, %xmm1
    00000907: 	movd	%xmm1, %eax
    0000090b: 	movdqa	%xmm0, %xmm1
    0000090f: 	punpckhdq	%xmm0, %xmm1
    00000913: 	leal	-0x1b580(%rdx,%rax), %esi
    0000091a: 	movd	%xmm0, %eax
    0000091e: 	movd	%xmm1, %edi
    00000922: 	addl	%eax, %edi
    00000924: 	cvttsd2si	init_value(%rip), %eax
    0000092c: 	addl	$0xa, %eax
    0000092f: 	imull	$0x1f40, %eax, %eax
    00000935: 	subl	%eax, %edi
    00000937: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 2359
    0000093c: 	testl	%eax, %eax
    0000093e: 	jg	.Ltmp2686 # Offset: 2366
.Ltmp2703:
    00000944: 	addl	$0x1, %ebp
    00000947: 	cmpl	iterations(%rip), %ebp
    0000094d: 	jl	.Ltmp2687 # Offset: 2381
.Ltmp2684:
    0000094f: 	movq	0x18(%rsp), %rsi
    00000954: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000095b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2395
    00000960: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000967: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000096e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000975: 	je	.Ltmp2688 # Offset: 2421
.Ltmp2887:
    0000097b: 	movq	-0x20(%rax), %rbp
    0000097f: 	callq	clock@PLT # Offset: 2431
    00000984: 	pxor	%xmm0, %xmm0
    00000988: 	movq	%rax, end_time(%rip)
    0000098f: 	movq	%rbp, %rdi
    00000992: 	subq	start_time(%rip), %rax
    00000999: 	cvtsi2sd	%rax, %xmm0
    0000099e: 	divsd	DATAat0x2b628(%rip), %xmm0
    000009a6: 	callq	_Z13record_resultdPKc # Offset: 2470
    000009ab: 	movq	0x180(%rsp), %rdi
    000009b3: 	cmpq	0x20(%rsp), %rdi
    000009b8: 	je	.Ltmp2689 # Offset: 2488
    000009ba: 	movq	0x190(%rsp), %rax
    000009c2: 	leaq	0x1(%rax), %rsi
    000009c6: 	callq	_ZdlPvm@PLT # Offset: 2502
.Ltmp2689:
    000009cb: 	movq	0x18(%rsp), %rbp
    000009d0: 	movq	0x50(%rsp), %rsi
    000009d5: 	leaq	DATAat0x2b28d(%rip), %rdx
    000009dc: 	movq	%rbp, %rdi
    000009df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2527
    000009e4: 	movq	0x10(%rsp), %rdi
    000009e9: 	movq	%rbp, %rsi
    000009ec: 	callq	"_Z13test_constantISt7complexIiE20complex_constant_subIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2540
    000009f1: 	movq	0x180(%rsp), %rdi
    000009f9: 	cmpq	0x20(%rsp), %rdi
    000009fe: 	je	.Ltmp2690 # Offset: 2558
    00000a00: 	movq	0x190(%rsp), %rax
    00000a08: 	leaq	0x1(%rax), %rsi
    00000a0c: 	callq	_ZdlPvm@PLT # Offset: 2572
.Ltmp2690:
    00000a11: 	movq	0x50(%rsp), %rsi
    00000a16: 	movq	0x18(%rsp), %rdi
    00000a1b: 	leaq	DATAat0x2b2a0(%rip), %rdx
    00000a22: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2594
    00000a27: 	callq	clock@PLT # Offset: 2599
    00000a2c: 	movl	iterations(%rip), %ecx
    00000a32: 	xorl	%ebp, %ebp
    00000a34: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000a3b: 	movq	%rax, start_time(%rip)
    00000a42: 	testl	%ecx, %ecx
    00000a44: 	jle	.Ltmp2691 # Offset: 2628
    00000a4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2694:
    00000a50: 	movq	0x10(%rsp), %rax
    00000a55: 	pxor	%xmm0, %xmm0
    00000a59: 	nopl	(%rax) # Size: 7
.Ltmp2692:
    00000a60: 	movdqa	DATAat0x2b8f0(%rip), %xmm1
    00000a68: 	paddd	(%rax), %xmm1
    00000a6c: 	addq	$0x10, %rax
    00000a70: 	paddd	%xmm1, %xmm0
    00000a74: 	cmpq	%rax, %rbx
    00000a77: 	jne	.Ltmp2692 # Offset: 2679
    00000a79: 	pshufd	$0xff, %xmm0, %xmm1
    00000a7e: 	movd	%xmm1, %edx
    00000a82: 	pshufd	$0x55, %xmm0, %xmm1
    00000a87: 	movd	%xmm1, %eax
    00000a8b: 	movdqa	%xmm0, %xmm1
    00000a8f: 	punpckhdq	%xmm0, %xmm1
    00000a93: 	leal	-0x13880(%rdx,%rax), %esi
    00000a9a: 	movd	%xmm0, %eax
    00000a9e: 	movd	%xmm1, %edi
    00000aa2: 	addl	%eax, %edi
    00000aa4: 	cvttsd2si	init_value(%rip), %eax
    00000aac: 	addl	$0x8, %eax
    00000aaf: 	imull	$0x1f40, %eax, %eax
    00000ab5: 	subl	%eax, %edi
    00000ab7: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 2743
    00000abc: 	testl	%eax, %eax
    00000abe: 	jg	.Ltmp2693 # Offset: 2750
.Ltmp2702:
    00000ac4: 	addl	$0x1, %ebp
    00000ac7: 	cmpl	iterations(%rip), %ebp
    00000acd: 	jl	.Ltmp2694 # Offset: 2765
.Ltmp2691:
    00000acf: 	movq	0x18(%rsp), %rsi
    00000ad4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000adb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2779
    00000ae0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ae7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000aee: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000af5: 	je	.Ltmp2695 # Offset: 2805
.Ltmp2886:
    00000afb: 	movq	-0x20(%rax), %rbp
    00000aff: 	callq	clock@PLT # Offset: 2815
    00000b04: 	pxor	%xmm0, %xmm0
    00000b08: 	movq	%rax, end_time(%rip)
    00000b0f: 	movq	%rbp, %rdi
    00000b12: 	subq	start_time(%rip), %rax
    00000b19: 	cvtsi2sd	%rax, %xmm0
    00000b1e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000b26: 	callq	_Z13record_resultdPKc # Offset: 2854
    00000b2b: 	movq	0x180(%rsp), %rdi
    00000b33: 	cmpq	0x20(%rsp), %rdi
    00000b38: 	je	.Ltmp2696 # Offset: 2872
    00000b3a: 	movq	0x190(%rsp), %rax
    00000b42: 	leaq	0x1(%rax), %rsi
    00000b46: 	callq	_ZdlPvm@PLT # Offset: 2886
.Ltmp2696:
    00000b4b: 	movq	0x18(%rsp), %rbp
    00000b50: 	movq	0x50(%rsp), %rsi
    00000b55: 	leaq	DATAat0x2b2bd(%rip), %rdx
    00000b5c: 	movq	%rbp, %rdi
    00000b5f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2911
    00000b64: 	movq	0x10(%rsp), %rdi
    00000b69: 	movq	%rbp, %rsi
    00000b6c: 	callq	"_Z13test_constantISt7complexIiE25complex_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2924
    00000b71: 	movq	0x180(%rsp), %rdi
    00000b79: 	cmpq	0x20(%rsp), %rdi
    00000b7e: 	je	.Ltmp2697 # Offset: 2942
    00000b80: 	movq	0x190(%rsp), %rax
    00000b88: 	leaq	0x1(%rax), %rsi
    00000b8c: 	callq	_ZdlPvm@PLT # Offset: 2956
.Ltmp2697:
    00000b91: 	movq	0x18(%rsp), %rbp
    00000b96: 	movq	0x50(%rsp), %rsi
    00000b9b: 	leaq	DATAat0x2b2d0(%rip), %rdx
    00000ba2: 	movq	%rbp, %rdi
    00000ba5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2981
    00000baa: 	movq	0x10(%rsp), %rdi
    00000baf: 	movq	%rbp, %rsi
    00000bb2: 	callq	"_Z13test_constantISt7complexIiE34complex_multiple_constant_multiplyIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2994
    00000bb7: 	movq	0x180(%rsp), %rdi
    00000bbf: 	cmpq	0x20(%rsp), %rdi
    00000bc4: 	je	.Ltmp2698 # Offset: 3012
    00000bc6: 	movq	0x190(%rsp), %rax
    00000bce: 	leaq	0x1(%rax), %rsi
    00000bd2: 	callq	_ZdlPvm@PLT # Offset: 3026
.Ltmp2698:
    00000bd7: 	movq	0x18(%rsp), %rbp
    00000bdc: 	movq	0x50(%rsp), %rsi
    00000be1: 	leaq	DATAat0x2b570(%rip), %rdx
    00000be8: 	movq	%rbp, %rdi
    00000beb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3051
    00000bf0: 	movq	0x10(%rsp), %rdi
    00000bf5: 	movq	%rbp, %rsi
    00000bf8: 	callq	"_Z13test_constantISt7complexIiE35complex_multiple_constant_multiply2IS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3064
    00000bfd: 	movq	0x180(%rsp), %rdi
    00000c05: 	cmpq	0x20(%rsp), %rdi
    00000c0a: 	je	.Ltmp2699 # Offset: 3082
    00000c0c: 	movq	0x190(%rsp), %rax
    00000c14: 	leaq	0x1(%rax), %rsi
    00000c18: 	callq	_ZdlPvm@PLT # Offset: 3096
.Ltmp2699:
    00000c1d: 	movq	0x18(%rsp), %rbp
    00000c22: 	movq	0x50(%rsp), %rsi
    00000c27: 	leaq	DATAat0x2b2ee(%rip), %rdx
    00000c2e: 	movq	%rbp, %rdi
    00000c31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3121
    00000c36: 	movq	0x10(%rsp), %rdi
    00000c3b: 	movq	%rbp, %rsi
    00000c3e: 	callq	"_Z13test_constantISt7complexIiE23complex_constant_divideIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3134
    00000c43: 	movq	0x180(%rsp), %rdi
    00000c4b: 	cmpq	0x20(%rsp), %rdi
    00000c50: 	je	.Ltmp2700 # Offset: 3152
    00000c52: 	movq	0x190(%rsp), %rax
    00000c5a: 	leaq	0x1(%rax), %rsi
    00000c5e: 	callq	_ZdlPvm@PLT # Offset: 3166
.Ltmp2700:
    00000c63: 	movq	0x50(%rsp), %rsi
    00000c68: 	movq	0x18(%rsp), %rdi
    00000c6d: 	leaq	DATAat0x2b2ff(%rip), %rdx
    00000c74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3188
    00000c79: 	callq	clock@PLT # Offset: 3193
    00000c7e: 	movl	iterations(%rip), %edx
    00000c84: 	movq	%rax, start_time(%rip)
    00000c8b: 	testl	%edx, %edx
    00000c8d: 	jle	.Ltmp2701 # Offset: 3213
    00000c8f: 	ud2
    00000c91: 	nopl	(%rax) # Size: 7
.Ltmp2693:
    00000c98: 	movl	current_test(%rip), %edx
    00000c9e: 	movq	%r12, %rsi
    00000ca1: 	movl	$0x1, %edi
    00000ca6: 	xorl	%eax, %eax
    00000ca8: 	callq	__printf_chk@PLT # Offset: 3240
    00000cad: 	jmp	.Ltmp2702 # Offset: 3245
    00000cb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2686:
    00000cb8: 	movl	current_test(%rip), %edx
    00000cbe: 	movq	%r12, %rsi
    00000cc1: 	movl	$0x1, %edi
    00000cc6: 	xorl	%eax, %eax
    00000cc8: 	callq	__printf_chk@PLT # Offset: 3272
    00000ccd: 	jmp	.Ltmp2703 # Offset: 3277
.Ltmp2701:
    00000cd2: 	movq	0x18(%rsp), %rsi
    00000cd7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000cde: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3294
    00000ce3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000cea: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000cf1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000cf8: 	je	.Ltmp2704 # Offset: 3320
.Ltmp2885:
    00000cfe: 	movq	-0x20(%rax), %rbp
    00000d02: 	callq	clock@PLT # Offset: 3330
    00000d07: 	pxor	%xmm0, %xmm0
    00000d0b: 	movq	%rax, end_time(%rip)
    00000d12: 	movq	%rbp, %rdi
    00000d15: 	subq	start_time(%rip), %rax
    00000d1c: 	cvtsi2sd	%rax, %xmm0
    00000d21: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000d29: 	callq	_Z13record_resultdPKc # Offset: 3369
    00000d2e: 	movq	0x180(%rsp), %rdi
    00000d36: 	cmpq	0x20(%rsp), %rdi
    00000d3b: 	je	.Ltmp2705 # Offset: 3387
    00000d3d: 	movq	0x190(%rsp), %rax
    00000d45: 	leaq	0x1(%rax), %rsi
    00000d49: 	callq	_ZdlPvm@PLT # Offset: 3401
.Ltmp2705:
    00000d4e: 	movq	0x50(%rsp), %rsi
    00000d53: 	movq	0x18(%rsp), %rdi
    00000d58: 	leaq	DATAat0x2b31a(%rip), %rdx
    00000d5f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3423
    00000d64: 	callq	clock@PLT # Offset: 3428
    00000d69: 	xorl	%ebp, %ebp
    00000d6b: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000d72: 	movq	%rax, start_time(%rip)
    00000d79: 	movl	iterations(%rip), %eax
    00000d7f: 	testl	%eax, %eax
    00000d81: 	jle	.Ltmp2706 # Offset: 3457
    00000d83: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2709:
    00000d88: 	movq	0x10(%rsp), %rax
    00000d8d: 	pxor	%xmm0, %xmm0
    00000d91: 	nopl	(%rax) # Size: 7
.Ltmp2707:
    00000d98: 	paddd	(%rax), %xmm0
    00000d9c: 	addq	$0x10, %rax
    00000da0: 	cmpq	%rax, %rbx
    00000da3: 	jne	.Ltmp2707 # Offset: 3491
    00000da5: 	pshufd	$0xff, %xmm0, %xmm1
    00000daa: 	movd	%xmm1, %esi
    00000dae: 	pshufd	$0x55, %xmm0, %xmm1
    00000db3: 	movd	%xmm1, %eax
    00000db7: 	movdqa	%xmm0, %xmm1
    00000dbb: 	punpckhdq	%xmm0, %xmm1
    00000dbf: 	addl	%eax, %esi
    00000dc1: 	movd	%xmm0, %eax
    00000dc5: 	movd	%xmm1, %edi
    00000dc9: 	addl	%eax, %edi
    00000dcb: 	cvttsd2si	init_value(%rip), %eax
    00000dd3: 	imull	$0x1f40, %eax, %eax
    00000dd9: 	subl	%eax, %edi
    00000ddb: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 3547
    00000de0: 	testl	%eax, %eax
    00000de2: 	jg	.Ltmp2708 # Offset: 3554
.Ltmp2862:
    00000de8: 	addl	$0x1, %ebp
    00000deb: 	cmpl	iterations(%rip), %ebp
    00000df1: 	jl	.Ltmp2709 # Offset: 3569
.Ltmp2706:
    00000df3: 	movq	0x18(%rsp), %rsi
    00000df8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000dff: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3583
    00000e04: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e0b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000e12: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e19: 	je	.Ltmp2710 # Offset: 3609
.Ltmp2884:
    00000e1f: 	movq	-0x20(%rax), %rbp
    00000e23: 	callq	clock@PLT # Offset: 3619
    00000e28: 	pxor	%xmm0, %xmm0
    00000e2c: 	movq	%rax, end_time(%rip)
    00000e33: 	movq	%rbp, %rdi
    00000e36: 	subq	start_time(%rip), %rax
    00000e3d: 	cvtsi2sd	%rax, %xmm0
    00000e42: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000e4a: 	callq	_Z13record_resultdPKc # Offset: 3658
    00000e4f: 	movq	0x180(%rsp), %rdi
    00000e57: 	cmpq	0x20(%rsp), %rdi
    00000e5c: 	je	.Ltmp2711 # Offset: 3676
    00000e5e: 	movq	0x190(%rsp), %rax
    00000e66: 	leaq	0x1(%rax), %rsi
    00000e6a: 	callq	_ZdlPvm@PLT # Offset: 3690
.Ltmp2711:
    00000e6f: 	movq	0x50(%rsp), %rsi
    00000e74: 	movq	0x18(%rsp), %rdi
    00000e79: 	leaq	DATAat0x2b336(%rip), %rdx
    00000e80: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3712
    00000e85: 	callq	clock@PLT # Offset: 3717
    00000e8a: 	xorl	%ebp, %ebp
    00000e8c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00000e93: 	movq	%rax, start_time(%rip)
    00000e9a: 	movl	iterations(%rip), %eax
    00000ea0: 	testl	%eax, %eax
    00000ea2: 	jle	.Ltmp2712 # Offset: 3746
    00000ea4: 	nopl	(%rax) # Size: 4
.Ltmp2715:
    00000ea8: 	movq	0x10(%rsp), %rax
    00000ead: 	pxor	%xmm0, %xmm0
    00000eb1: 	nopl	(%rax) # Size: 7
.Ltmp2713:
    00000eb8: 	paddd	(%rax), %xmm0
    00000ebc: 	addq	$0x10, %rax
    00000ec0: 	cmpq	%rax, %rbx
    00000ec3: 	jne	.Ltmp2713 # Offset: 3779
    00000ec5: 	pshufd	$0xff, %xmm0, %xmm1
    00000eca: 	movd	%xmm1, %esi
    00000ece: 	pshufd	$0x55, %xmm0, %xmm1
    00000ed3: 	movd	%xmm1, %eax
    00000ed7: 	movdqa	%xmm0, %xmm1
    00000edb: 	punpckhdq	%xmm0, %xmm1
    00000edf: 	addl	%eax, %esi
    00000ee1: 	movd	%xmm0, %eax
    00000ee5: 	movd	%xmm1, %edi
    00000ee9: 	addl	%eax, %edi
    00000eeb: 	cvttsd2si	init_value(%rip), %eax
    00000ef3: 	imull	$0x1f40, %eax, %eax
    00000ef9: 	subl	%eax, %edi
    00000efb: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 3835
    00000f00: 	testl	%eax, %eax
    00000f02: 	jg	.Ltmp2714 # Offset: 3842
.Ltmp2861:
    00000f08: 	addl	$0x1, %ebp
    00000f0b: 	cmpl	iterations(%rip), %ebp
    00000f11: 	jl	.Ltmp2715 # Offset: 3857
.Ltmp2712:
    00000f13: 	movq	0x18(%rsp), %rsi
    00000f18: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000f1f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3871
    00000f24: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000f2b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f32: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f39: 	je	.Ltmp2716 # Offset: 3897
.Ltmp2883:
    00000f3f: 	movq	-0x20(%rax), %rbp
    00000f43: 	callq	clock@PLT # Offset: 3907
    00000f48: 	pxor	%xmm0, %xmm0
    00000f4c: 	movq	%rax, end_time(%rip)
    00000f53: 	movq	%rbp, %rdi
    00000f56: 	subq	start_time(%rip), %rax
    00000f5d: 	cvtsi2sd	%rax, %xmm0
    00000f62: 	divsd	DATAat0x2b628(%rip), %xmm0
    00000f6a: 	callq	_Z13record_resultdPKc # Offset: 3946
    00000f6f: 	movq	0x180(%rsp), %rdi
    00000f77: 	cmpq	0x20(%rsp), %rdi
    00000f7c: 	je	.Ltmp2717 # Offset: 3964
    00000f7e: 	movq	0x190(%rsp), %rax
    00000f86: 	leaq	0x1(%rax), %rsi
    00000f8a: 	callq	_ZdlPvm@PLT # Offset: 3978
.Ltmp2717:
    00000f8f: 	movq	0x50(%rsp), %rbp
    00000f94: 	leaq	0x100(%rsp), %rdi
    00000f9c: 	leaq	DATAat0x2b255(%rip), %rdx
    00000fa3: 	movq	%rbp, %rsi
    00000fa6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4006
    00000fab: 	movl	iterations(%rip), %edx
    00000fb1: 	xorl	%r8d, %r8d
    00000fb4: 	xorl	%ecx, %ecx
    00000fb6: 	movl	$0x1f40, %esi
    00000fbb: 	movq	0x100(%rsp), %rdi
    00000fc3: 	callq	_Z9summarizePKciiii # Offset: 4035
    00000fc8: 	movq	0x18(%rsp), %rdi
    00000fcd: 	leaq	DATAat0x2b34f(%rip), %rdx
    00000fd4: 	movq	%rbp, %rsi
    00000fd7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4055
    00000fdc: 	callq	clock@PLT # Offset: 4060
    00000fe1: 	movq	%rax, start_time(%rip)
    00000fe8: 	movl	iterations(%rip), %eax
    00000fee: 	testl	%eax, %eax
    00000ff0: 	jle	.Ltmp2718 # Offset: 4080
    00000ff6: 	movd	%r14d, %xmm3
    00000ffb: 	movd	%r15d, %xmm5
    00001000: 	leaq	DATAat0x2b1d0(%rip), %r13
    00001007: 	xorl	%ebp, %ebp
    00001009: 	imull	$0x1f40, %r15d, %r12d
    00001010: 	punpckldq	%xmm5, %xmm3
    00001014: 	movq	%xmm3, (%rsp)
    00001019: 	nopl	(%rax) # Size: 7
.Ltmp2721:
    00001020: 	movq	(%rsp), %xmm2
    00001025: 	movq	0x10(%rsp), %rax
    0000102a: 	pxor	%xmm0, %xmm0
    0000102e: 	punpcklqdq	%xmm2, %xmm2
    00001032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2719:
    00001038: 	movdqa	(%rax), %xmm1
    0000103c: 	addq	$0x10, %rax
    00001040: 	paddd	%xmm2, %xmm1
    00001044: 	paddd	%xmm1, %xmm0
    00001048: 	cmpq	%rax, %rbx
    0000104b: 	jne	.Ltmp2719 # Offset: 4171
    0000104d: 	pshufd	$0xff, %xmm0, %xmm1
    00001052: 	movd	%xmm1, %esi
    00001056: 	pshufd	$0x55, %xmm0, %xmm1
    0000105b: 	movd	%xmm1, %eax
    0000105f: 	movdqa	%xmm0, %xmm1
    00001063: 	punpckhdq	%xmm0, %xmm1
    00001067: 	addl	%eax, %esi
    00001069: 	movd	%xmm0, %eax
    0000106d: 	movd	%xmm1, %edi
    00001071: 	subl	%r12d, %esi
    00001074: 	addl	%eax, %edi
    00001076: 	cvttsd2si	init_value(%rip), %eax
    0000107e: 	addl	%r14d, %eax
    00001081: 	imull	$0x1f40, %eax, %eax
    00001087: 	subl	%eax, %edi
    00001089: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 4233
    0000108e: 	testl	%eax, %eax
    00001090: 	jg	.Ltmp2720 # Offset: 4240
.Ltmp2860:
    00001096: 	addl	$0x1, %ebp
    00001099: 	cmpl	iterations(%rip), %ebp
    0000109f: 	jl	.Ltmp2721 # Offset: 4255
.Ltmp2718:
    000010a5: 	movq	0x18(%rsp), %rsi
    000010aa: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000010b1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4273
    000010b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010bd: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000010c4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000010cb: 	je	.Ltmp2722 # Offset: 4299
.Ltmp2882:
    000010d1: 	movq	-0x20(%rax), %rbp
    000010d5: 	callq	clock@PLT # Offset: 4309
    000010da: 	pxor	%xmm0, %xmm0
    000010de: 	movq	%rax, end_time(%rip)
    000010e5: 	movq	%rbp, %rdi
    000010e8: 	subq	start_time(%rip), %rax
    000010ef: 	cvtsi2sd	%rax, %xmm0
    000010f4: 	divsd	DATAat0x2b628(%rip), %xmm0
    000010fc: 	callq	_Z13record_resultdPKc # Offset: 4348
    00001101: 	movq	0x180(%rsp), %rdi
    00001109: 	cmpq	0x20(%rsp), %rdi
    0000110e: 	je	.Ltmp2723 # Offset: 4366
    00001110: 	movq	0x190(%rsp), %rax
    00001118: 	leaq	0x1(%rax), %rsi
    0000111c: 	callq	_ZdlPvm@PLT # Offset: 4380
.Ltmp2723:
    00001121: 	movq	0x50(%rsp), %rsi
    00001126: 	movq	0x18(%rsp), %rdi
    0000112b: 	leaq	DATAat0x2b35d(%rip), %rdx
    00001132: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4402
    00001137: 	callq	clock@PLT # Offset: 4407
    0000113c: 	movq	%rax, start_time(%rip)
    00001143: 	movl	iterations(%rip), %eax
    00001149: 	testl	%eax, %eax
    0000114b: 	jle	.Ltmp2724 # Offset: 4427
    00001151: 	movl	0x8c(%rsp), %eax
    00001158: 	movl	0x88(%rsp), %ecx
    0000115f: 	xorl	%ebp, %ebp
    00001161: 	addl	%r15d, %eax
    00001164: 	leal	(%r14,%rcx), %r12d
    00001168: 	addl	0x70(%rsp), %eax
    0000116c: 	addl	0x84(%rsp), %r12d
    00001174: 	addl	0x60(%rsp), %eax
    00001178: 	addl	0x58(%rsp), %r12d
    0000117d: 	movd	%r12d, %xmm3
    00001182: 	imull	$0x1f40, %eax, %r13d
    00001189: 	movd	%eax, %xmm5
    0000118d: 	punpckldq	%xmm5, %xmm3
    00001191: 	movq	%xmm3, (%rsp)
    00001196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2727:
    000011a0: 	movq	(%rsp), %xmm2
    000011a5: 	movq	0x10(%rsp), %rax
    000011aa: 	pxor	%xmm0, %xmm0
    000011ae: 	punpcklqdq	%xmm2, %xmm2
    000011b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2725:
    000011b8: 	movdqa	(%rax), %xmm1
    000011bc: 	addq	$0x10, %rax
    000011c0: 	paddd	%xmm2, %xmm1
    000011c4: 	paddd	%xmm1, %xmm0
    000011c8: 	cmpq	%rax, %rbx
    000011cb: 	jne	.Ltmp2725 # Offset: 4555
    000011cd: 	pshufd	$0xff, %xmm0, %xmm1
    000011d2: 	movd	%xmm1, %esi
    000011d6: 	pshufd	$0x55, %xmm0, %xmm1
    000011db: 	movd	%xmm1, %eax
    000011df: 	movdqa	%xmm0, %xmm1
    000011e3: 	punpckhdq	%xmm0, %xmm1
    000011e7: 	addl	%eax, %esi
    000011e9: 	movd	%xmm0, %eax
    000011ed: 	movd	%xmm1, %edi
    000011f1: 	subl	%r13d, %esi
    000011f4: 	addl	%eax, %edi
    000011f6: 	cvttsd2si	init_value(%rip), %eax
    000011fe: 	addl	%r12d, %eax
    00001201: 	imull	$0x1f40, %eax, %eax
    00001207: 	subl	%eax, %edi
    00001209: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 4617
    0000120e: 	testl	%eax, %eax
    00001210: 	jg	.Ltmp2726 # Offset: 4624
.Ltmp2859:
    00001216: 	addl	$0x1, %ebp
    00001219: 	cmpl	iterations(%rip), %ebp
    0000121f: 	jl	.Ltmp2727 # Offset: 4639
.Ltmp2724:
    00001225: 	movq	0x18(%rsp), %rsi
    0000122a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001231: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4657
    00001236: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000123d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001244: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000124b: 	je	.Ltmp2728 # Offset: 4683
.Ltmp2881:
    00001251: 	movq	-0x20(%rax), %rbp
    00001255: 	callq	clock@PLT # Offset: 4693
    0000125a: 	pxor	%xmm0, %xmm0
    0000125e: 	movq	%rax, end_time(%rip)
    00001265: 	movq	%rbp, %rdi
    00001268: 	subq	start_time(%rip), %rax
    0000126f: 	cvtsi2sd	%rax, %xmm0
    00001274: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000127c: 	callq	_Z13record_resultdPKc # Offset: 4732
    00001281: 	movq	0x180(%rsp), %rdi
    00001289: 	cmpq	0x20(%rsp), %rdi
    0000128e: 	je	.Ltmp2729 # Offset: 4750
    00001290: 	movq	0x190(%rsp), %rax
    00001298: 	leaq	0x1(%rax), %rsi
    0000129c: 	callq	_ZdlPvm@PLT # Offset: 4764
.Ltmp2729:
    000012a1: 	movq	0x50(%rsp), %rsi
    000012a6: 	movq	0x18(%rsp), %rdi
    000012ab: 	leaq	DATAat0x2b375(%rip), %rdx
    000012b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4786
    000012b7: 	callq	clock@PLT # Offset: 4791
    000012bc: 	movq	%rax, start_time(%rip)
    000012c3: 	movl	iterations(%rip), %eax
    000012c9: 	testl	%eax, %eax
    000012cb: 	jle	.Ltmp2730 # Offset: 4811
    000012d1: 	movd	%r15d, %xmm5
    000012d6: 	movd	%r14d, %xmm3
    000012db: 	movl	0x60(%rsp), %ecx
    000012df: 	xorl	%ebp, %ebp
    000012e1: 	punpckldq	%xmm5, %xmm3
    000012e5: 	movl	0x8c(%rsp), %eax
    000012ec: 	movl	0x70(%rsp), %edx
    000012f0: 	leaq	DATAat0x2b1d0(%rip), %r13
    000012f7: 	movq	%xmm3, (%rsp)
    000012fc: 	movd	0x58(%rsp), %xmm3
    00001302: 	movd	%ecx, %xmm5
    00001306: 	leal	(%r15,%rax), %r12d
    0000130a: 	punpckldq	%xmm5, %xmm3
    0000130e: 	movd	%edx, %xmm5
    00001312: 	addl	%edx, %r12d
    00001315: 	movq	%xmm3, 0x28(%rsp)
    0000131b: 	addl	%ecx, %r12d
    0000131e: 	movd	0x84(%rsp), %xmm3
    00001327: 	imull	$0x1f40, %r12d, %r12d
    0000132e: 	punpckldq	%xmm5, %xmm3
    00001332: 	movd	%eax, %xmm5
    00001336: 	movq	%xmm3, 0x30(%rsp)
    0000133c: 	movd	0x88(%rsp), %xmm3
    00001345: 	punpckldq	%xmm5, %xmm3
    00001349: 	movq	%xmm3, 0x40(%rsp)
    0000134f: 	nop # Size: 1
.Ltmp2733:
    00001350: 	movq	0x28(%rsp), %xmm5
    00001356: 	movq	(%rsp), %xmm2
    0000135b: 	pxor	%xmm1, %xmm1
    0000135f: 	movq	0x30(%rsp), %xmm4
    00001365: 	movq	0x40(%rsp), %xmm3
    0000136b: 	movq	0x10(%rsp), %rax
    00001370: 	punpcklqdq	%xmm5, %xmm5
    00001374: 	punpcklqdq	%xmm2, %xmm2
    00001378: 	punpcklqdq	%xmm4, %xmm4
    0000137c: 	punpcklqdq	%xmm3, %xmm3
.Ltmp2731:
    00001380: 	movdqa	(%rax), %xmm0
    00001384: 	addq	$0x10, %rax
    00001388: 	paddd	%xmm2, %xmm0
    0000138c: 	paddd	%xmm3, %xmm0
    00001390: 	paddd	%xmm4, %xmm0
    00001394: 	paddd	%xmm5, %xmm0
    00001398: 	paddd	%xmm0, %xmm1
    0000139c: 	cmpq	%rax, %rbx
    0000139f: 	jne	.Ltmp2731 # Offset: 5023
    000013a1: 	pshufd	$0xff, %xmm1, %xmm0
    000013a6: 	movd	%xmm0, %esi
    000013aa: 	pshufd	$0x55, %xmm1, %xmm0
    000013af: 	movd	%xmm0, %eax
    000013b3: 	movdqa	%xmm1, %xmm0
    000013b7: 	punpckhdq	%xmm1, %xmm0
    000013bb: 	addl	%eax, %esi
    000013bd: 	movd	%xmm1, %eax
    000013c1: 	movd	%xmm0, %edi
    000013c5: 	subl	%r12d, %esi
    000013c8: 	addl	%eax, %edi
    000013ca: 	cvttsd2si	init_value(%rip), %eax
    000013d2: 	addl	%r14d, %eax
    000013d5: 	addl	0x88(%rsp), %eax
    000013dc: 	addl	0x84(%rsp), %eax
    000013e3: 	addl	0x58(%rsp), %eax
    000013e7: 	imull	$0x1f40, %eax, %eax
    000013ed: 	subl	%eax, %edi
    000013ef: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 5103
    000013f4: 	testl	%eax, %eax
    000013f6: 	jg	.Ltmp2732 # Offset: 5110
.Ltmp2858:
    000013fc: 	addl	$0x1, %ebp
    000013ff: 	cmpl	iterations(%rip), %ebp
    00001405: 	jl	.Ltmp2733 # Offset: 5125
.Ltmp2730:
    0000140b: 	movq	0x18(%rsp), %rsi
    00001410: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001417: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5143
    0000141c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001423: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000142a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001431: 	je	.Ltmp2734 # Offset: 5169
.Ltmp2880:
    00001437: 	movq	-0x20(%rax), %rbp
    0000143b: 	callq	clock@PLT # Offset: 5179
    00001440: 	pxor	%xmm0, %xmm0
    00001444: 	movq	%rax, end_time(%rip)
    0000144b: 	movq	%rbp, %rdi
    0000144e: 	subq	start_time(%rip), %rax
    00001455: 	cvtsi2sd	%rax, %xmm0
    0000145a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001462: 	callq	_Z13record_resultdPKc # Offset: 5218
    00001467: 	movq	0x180(%rsp), %rdi
    0000146f: 	cmpq	0x20(%rsp), %rdi
    00001474: 	je	.Ltmp2735 # Offset: 5236
    00001476: 	movq	0x190(%rsp), %rax
    0000147e: 	leaq	0x1(%rax), %rsi
    00001482: 	callq	_ZdlPvm@PLT # Offset: 5250
.Ltmp2735:
    00001487: 	movq	0x50(%rsp), %rsi
    0000148c: 	movq	0x18(%rsp), %rdi
    00001491: 	leaq	DATAat0x2b38e(%rip), %rdx
    00001498: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5272
    0000149d: 	callq	clock@PLT # Offset: 5277
    000014a2: 	movl	iterations(%rip), %r13d
    000014a9: 	movq	%rax, start_time(%rip)
    000014b0: 	testl	%r13d, %r13d
    000014b3: 	jle	.Ltmp2736 # Offset: 5299
    000014b9: 	movd	%r14d, %xmm3
    000014be: 	movd	%r15d, %xmm5
    000014c3: 	leaq	DATAat0x2b1d0(%rip), %r13
    000014ca: 	xorl	%ebp, %ebp
    000014cc: 	imull	$0xffffe0c0, %r15d, %r12d
    000014d3: 	punpckldq	%xmm5, %xmm3
    000014d7: 	movq	%xmm3, (%rsp)
    000014dc: 	nopl	(%rax) # Size: 4
.Ltmp2739:
    000014e0: 	movq	(%rsp), %xmm1
    000014e5: 	movq	0x10(%rsp), %rax
    000014ea: 	pxor	%xmm0, %xmm0
    000014ee: 	punpcklqdq	%xmm1, %xmm1
    000014f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2737:
    000014f8: 	paddd	(%rax), %xmm0
    000014fc: 	addq	$0x10, %rax
    00001500: 	psubd	%xmm1, %xmm0
    00001504: 	cmpq	%rax, %rbx
    00001507: 	jne	.Ltmp2737 # Offset: 5383
    00001509: 	pshufd	$0xff, %xmm0, %xmm1
    0000150e: 	movd	%xmm1, %esi
    00001512: 	pshufd	$0x55, %xmm0, %xmm1
    00001517: 	movd	%xmm1, %eax
    0000151b: 	movdqa	%xmm0, %xmm1
    0000151f: 	punpckhdq	%xmm0, %xmm1
    00001523: 	addl	%eax, %esi
    00001525: 	movd	%xmm0, %eax
    00001529: 	movd	%xmm1, %edi
    0000152d: 	subl	%r12d, %esi
    00001530: 	addl	%eax, %edi
    00001532: 	cvttsd2si	init_value(%rip), %eax
    0000153a: 	subl	%r14d, %eax
    0000153d: 	imull	$0x1f40, %eax, %eax
    00001543: 	subl	%eax, %edi
    00001545: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 5445
    0000154a: 	testl	%eax, %eax
    0000154c: 	jg	.Ltmp2738 # Offset: 5452
.Ltmp2857:
    00001552: 	addl	$0x1, %ebp
    00001555: 	cmpl	iterations(%rip), %ebp
    0000155b: 	jl	.Ltmp2739 # Offset: 5467
.Ltmp2736:
    0000155d: 	movq	0x18(%rsp), %rsi
    00001562: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001569: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5481
    0000156e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001575: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000157c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001583: 	je	.Ltmp2740 # Offset: 5507
.Ltmp2879:
    00001589: 	movq	-0x20(%rax), %rbp
    0000158d: 	callq	clock@PLT # Offset: 5517
    00001592: 	pxor	%xmm0, %xmm0
    00001596: 	movq	%rax, end_time(%rip)
    0000159d: 	movq	%rbp, %rdi
    000015a0: 	subq	start_time(%rip), %rax
    000015a7: 	cvtsi2sd	%rax, %xmm0
    000015ac: 	divsd	DATAat0x2b628(%rip), %xmm0
    000015b4: 	callq	_Z13record_resultdPKc # Offset: 5556
    000015b9: 	movq	0x180(%rsp), %rdi
    000015c1: 	cmpq	0x20(%rsp), %rdi
    000015c6: 	je	.Ltmp2741 # Offset: 5574
    000015c8: 	movq	0x190(%rsp), %rax
    000015d0: 	leaq	0x1(%rax), %rsi
    000015d4: 	callq	_ZdlPvm@PLT # Offset: 5588
.Ltmp2741:
    000015d9: 	movq	0x50(%rsp), %rsi
    000015de: 	movq	0x18(%rsp), %rdi
    000015e3: 	leaq	DATAat0x2b3a1(%rip), %rdx
    000015ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5610
    000015ef: 	callq	clock@PLT # Offset: 5615
    000015f4: 	movl	iterations(%rip), %r12d
    000015fb: 	movq	%rax, start_time(%rip)
    00001602: 	testl	%r12d, %r12d
    00001605: 	jle	.Ltmp2742 # Offset: 5637
    0000160b: 	movl	0x8c(%rsp), %eax
    00001612: 	movl	0x88(%rsp), %ecx
    00001619: 	xorl	%ebp, %ebp
    0000161b: 	addl	%r15d, %eax
    0000161e: 	leal	(%r14,%rcx), %r12d
    00001622: 	addl	0x70(%rsp), %eax
    00001626: 	addl	0x84(%rsp), %r12d
    0000162e: 	addl	0x60(%rsp), %eax
    00001632: 	addl	0x58(%rsp), %r12d
    00001637: 	movd	%r12d, %xmm3
    0000163c: 	imull	$0xffffe0c0, %eax, %r13d
    00001643: 	movd	%eax, %xmm5
    00001647: 	punpckldq	%xmm5, %xmm3
    0000164b: 	movq	%xmm3, (%rsp)
.Ltmp2745:
    00001650: 	movq	(%rsp), %xmm1
    00001655: 	movq	0x10(%rsp), %rax
    0000165a: 	pxor	%xmm0, %xmm0
    0000165e: 	punpcklqdq	%xmm1, %xmm1
    00001662: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2743:
    00001668: 	paddd	(%rax), %xmm0
    0000166c: 	addq	$0x10, %rax
    00001670: 	psubd	%xmm1, %xmm0
    00001674: 	cmpq	%rax, %rbx
    00001677: 	jne	.Ltmp2743 # Offset: 5751
    00001679: 	pshufd	$0xff, %xmm0, %xmm1
    0000167e: 	movd	%xmm1, %esi
    00001682: 	pshufd	$0x55, %xmm0, %xmm1
    00001687: 	movd	%xmm1, %eax
    0000168b: 	movdqa	%xmm0, %xmm1
    0000168f: 	punpckhdq	%xmm0, %xmm1
    00001693: 	addl	%eax, %esi
    00001695: 	movd	%xmm0, %eax
    00001699: 	movd	%xmm1, %edi
    0000169d: 	subl	%r13d, %esi
    000016a0: 	addl	%eax, %edi
    000016a2: 	cvttsd2si	init_value(%rip), %eax
    000016aa: 	subl	%r12d, %eax
    000016ad: 	imull	$0x1f40, %eax, %eax
    000016b3: 	subl	%eax, %edi
    000016b5: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 5813
    000016ba: 	testl	%eax, %eax
    000016bc: 	jg	.Ltmp2744 # Offset: 5820
.Ltmp2856:
    000016c2: 	addl	$0x1, %ebp
    000016c5: 	cmpl	iterations(%rip), %ebp
    000016cb: 	jl	.Ltmp2745 # Offset: 5835
.Ltmp2742:
    000016cd: 	movq	0x18(%rsp), %rsi
    000016d2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016d9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5849
    000016de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016e5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000016ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016f3: 	je	.Ltmp2746 # Offset: 5875
.Ltmp2878:
    000016f9: 	movq	-0x20(%rax), %rbp
    000016fd: 	callq	clock@PLT # Offset: 5885
    00001702: 	pxor	%xmm0, %xmm0
    00001706: 	movq	%rax, end_time(%rip)
    0000170d: 	movq	%rbp, %rdi
    00001710: 	subq	start_time(%rip), %rax
    00001717: 	cvtsi2sd	%rax, %xmm0
    0000171c: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001724: 	callq	_Z13record_resultdPKc # Offset: 5924
    00001729: 	movq	0x180(%rsp), %rdi
    00001731: 	cmpq	0x20(%rsp), %rdi
    00001736: 	je	.Ltmp2747 # Offset: 5942
    00001738: 	movq	0x190(%rsp), %rax
    00001740: 	leaq	0x1(%rax), %rsi
    00001744: 	callq	_ZdlPvm@PLT # Offset: 5956
.Ltmp2747:
    00001749: 	movq	0x50(%rsp), %rsi
    0000174e: 	movq	0x18(%rsp), %rdi
    00001753: 	leaq	DATAat0x2b3be(%rip), %rdx
    0000175a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5978
    0000175f: 	callq	clock@PLT # Offset: 5983
    00001764: 	movl	iterations(%rip), %ebp
    0000176a: 	movq	%rax, start_time(%rip)
    00001771: 	testl	%ebp, %ebp
    00001773: 	jle	.Ltmp2748 # Offset: 6003
    00001779: 	movd	%r15d, %xmm5
    0000177e: 	movd	%r14d, %xmm3
    00001783: 	movl	0x60(%rsp), %eax
    00001787: 	xorl	%ebp, %ebp
    00001789: 	punpckldq	%xmm5, %xmm3
    0000178d: 	movl	0x8c(%rsp), %edx
    00001794: 	movl	0x70(%rsp), %ecx
    00001798: 	movl	%r15d, %r12d
    0000179b: 	movq	%xmm3, (%rsp)
    000017a0: 	movd	0x58(%rsp), %xmm3
    000017a6: 	movd	%eax, %xmm5
    000017aa: 	negl	%r12d
    000017ad: 	subl	%edx, %r12d
    000017b0: 	leaq	DATAat0x2b1d0(%rip), %r13
    000017b7: 	punpckldq	%xmm5, %xmm3
    000017bb: 	movd	%ecx, %xmm5
    000017bf: 	subl	%ecx, %r12d
    000017c2: 	movq	%xmm3, 0x28(%rsp)
    000017c8: 	subl	%eax, %r12d
    000017cb: 	movd	0x84(%rsp), %xmm3
    000017d4: 	imull	$0x1f40, %r12d, %r12d
    000017db: 	punpckldq	%xmm5, %xmm3
    000017df: 	movd	%edx, %xmm5
    000017e3: 	movq	%xmm3, 0x30(%rsp)
    000017e9: 	movd	0x88(%rsp), %xmm3
    000017f2: 	punpckldq	%xmm5, %xmm3
    000017f6: 	movq	%xmm3, 0x40(%rsp)
    000017fc: 	nopl	(%rax) # Size: 4
.Ltmp2751:
    00001800: 	movq	(%rsp), %xmm5
    00001805: 	movq	0x10(%rsp), %rax
    0000180a: 	pxor	%xmm1, %xmm1
    0000180e: 	movq	0x40(%rsp), %xmm4
    00001814: 	movq	0x30(%rsp), %xmm3
    0000181a: 	movq	0x28(%rsp), %xmm2
    00001820: 	punpcklqdq	%xmm5, %xmm5
    00001824: 	punpcklqdq	%xmm4, %xmm4
    00001828: 	punpcklqdq	%xmm3, %xmm3
    0000182c: 	punpcklqdq	%xmm2, %xmm2
.Ltmp2749:
    00001830: 	movdqa	(%rax), %xmm0
    00001834: 	addq	$0x10, %rax
    00001838: 	psubd	%xmm5, %xmm0
    0000183c: 	psubd	%xmm4, %xmm0
    00001840: 	psubd	%xmm3, %xmm0
    00001844: 	psubd	%xmm2, %xmm0
    00001848: 	paddd	%xmm0, %xmm1
    0000184c: 	cmpq	%rax, %rbx
    0000184f: 	jne	.Ltmp2749 # Offset: 6223
    00001851: 	pshufd	$0xff, %xmm1, %xmm0
    00001856: 	movd	%xmm0, %esi
    0000185a: 	pshufd	$0x55, %xmm1, %xmm0
    0000185f: 	movd	%xmm0, %eax
    00001863: 	movdqa	%xmm1, %xmm0
    00001867: 	punpckhdq	%xmm1, %xmm0
    0000186b: 	addl	%eax, %esi
    0000186d: 	movd	%xmm1, %eax
    00001871: 	movd	%xmm0, %edi
    00001875: 	subl	%r12d, %esi
    00001878: 	addl	%eax, %edi
    0000187a: 	cvttsd2si	init_value(%rip), %eax
    00001882: 	subl	%r14d, %eax
    00001885: 	subl	0x88(%rsp), %eax
    0000188c: 	subl	0x84(%rsp), %eax
    00001893: 	subl	0x58(%rsp), %eax
    00001897: 	imull	$0x1f40, %eax, %eax
    0000189d: 	subl	%eax, %edi
    0000189f: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 6303
    000018a4: 	testl	%eax, %eax
    000018a6: 	jg	.Ltmp2750 # Offset: 6310
.Ltmp2855:
    000018ac: 	addl	$0x1, %ebp
    000018af: 	cmpl	iterations(%rip), %ebp
    000018b5: 	jl	.Ltmp2751 # Offset: 6325
.Ltmp2748:
    000018bb: 	movq	0x18(%rsp), %rsi
    000018c0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000018c7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6343
    000018cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000018d3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000018da: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000018e1: 	je	.Ltmp2752 # Offset: 6369
.Ltmp2877:
    000018e7: 	movq	-0x20(%rax), %rbp
    000018eb: 	callq	clock@PLT # Offset: 6379
    000018f0: 	pxor	%xmm0, %xmm0
    000018f4: 	movq	%rax, end_time(%rip)
    000018fb: 	movq	%rbp, %rdi
    000018fe: 	subq	start_time(%rip), %rax
    00001905: 	cvtsi2sd	%rax, %xmm0
    0000190a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001912: 	callq	_Z13record_resultdPKc # Offset: 6418
    00001917: 	movq	0x180(%rsp), %rdi
    0000191f: 	cmpq	0x20(%rsp), %rdi
    00001924: 	je	.Ltmp2753 # Offset: 6436
    00001926: 	movq	0x190(%rsp), %rax
    0000192e: 	leaq	0x1(%rax), %rsi
    00001932: 	callq	_ZdlPvm@PLT # Offset: 6450
.Ltmp2753:
    00001937: 	movq	0x50(%rsp), %rsi
    0000193c: 	movq	0x18(%rsp), %rdi
    00001941: 	leaq	DATAat0x2b3dc(%rip), %rdx
    00001948: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6472
    0000194d: 	callq	clock@PLT # Offset: 6477
    00001952: 	movd	%r14d, %xmm3
    00001957: 	xorl	%ebp, %ebp
    00001959: 	movl	iterations(%rip), %r11d
    00001960: 	pshufd	$0x0, %xmm3, %xmm3
    00001965: 	movq	%rax, start_time(%rip)
    0000196c: 	leaq	DATAat0x2b1d0(%rip), %r12
    00001973: 	movaps	%xmm3, 0x40(%rsp)
    00001978: 	movd	%r15d, %xmm3
    0000197d: 	pshufd	$0x0, %xmm3, %xmm3
    00001982: 	movaps	%xmm3, 0x30(%rsp)
    00001987: 	testl	%r11d, %r11d
    0000198a: 	jle	.Ltmp2754 # Offset: 6538
.Ltmp2757:
    00001990: 	movdqa	0x40(%rsp), %xmm8
    00001997: 	movdqa	0x30(%rsp), %xmm7
    0000199d: 	pxor	%xmm4, %xmm4
    000019a1: 	movq	0x10(%rsp), %rax
    000019a6: 	movdqa	%xmm4, %xmm3
    000019aa: 	movdqa	%xmm8, %xmm6
    000019af: 	movdqa	%xmm7, %xmm5
    000019b3: 	psrlq	$0x20, %xmm6
    000019b8: 	psrlq	$0x20, %xmm5
    000019bd: 	nopl	(%rax) # Size: 3
.Ltmp2755:
    000019c0: 	movdqa	(%rax), %xmm0
    000019c4: 	movdqa	%xmm8, %xmm11
    000019c9: 	movdqa	%xmm6, %xmm9
    000019ce: 	movdqa	%xmm7, %xmm10
    000019d3: 	movdqa	%xmm5, %xmm12
    000019d8: 	addq	$0x20, %rax
    000019dc: 	movdqa	%xmm0, %xmm1
    000019e0: 	shufps	$0x88, -0x10(%rax), %xmm1
    000019e5: 	movdqa	%xmm1, %xmm2
    000019e9: 	shufps	$0xdd, -0x10(%rax), %xmm0
    000019ee: 	psrlq	$0x20, %xmm2
    000019f3: 	pmuludq	%xmm1, %xmm11
    000019f8: 	pmuludq	%xmm2, %xmm9
    000019fd: 	pmuludq	%xmm0, %xmm10
    00001a02: 	pmuludq	%xmm7, %xmm1
    00001a06: 	pmuludq	%xmm5, %xmm2
    00001a0a: 	pshufd	$0x8, %xmm11, %xmm11
    00001a10: 	pshufd	$0x8, %xmm9, %xmm9
    00001a16: 	pshufd	$0x8, %xmm10, %xmm10
    00001a1c: 	punpckldq	%xmm9, %xmm11
    00001a21: 	movdqa	%xmm0, %xmm9
    00001a26: 	pshufd	$0x8, %xmm1, %xmm1
    00001a2b: 	psrlq	$0x20, %xmm9
    00001a31: 	pmuludq	%xmm8, %xmm0
    00001a36: 	pshufd	$0x8, %xmm2, %xmm2
    00001a3b: 	pmuludq	%xmm9, %xmm12
    00001a40: 	pmuludq	%xmm6, %xmm9
    00001a45: 	punpckldq	%xmm2, %xmm1
    00001a49: 	pshufd	$0x8, %xmm0, %xmm0
    00001a4e: 	pshufd	$0x8, %xmm12, %xmm12
    00001a54: 	pshufd	$0x8, %xmm9, %xmm9
    00001a5a: 	punpckldq	%xmm12, %xmm10
    00001a5f: 	punpckldq	%xmm9, %xmm0
    00001a64: 	psubd	%xmm10, %xmm11
    00001a69: 	paddd	%xmm1, %xmm0
    00001a6d: 	paddd	%xmm11, %xmm3
    00001a72: 	paddd	%xmm0, %xmm4
    00001a76: 	cmpq	%rax, %rbx
    00001a79: 	jne	.Ltmp2755 # Offset: 6777
    00001a7f: 	cvttsd2si	init_value(%rip), %eax
    00001a87: 	movdqa	%xmm4, %xmm0
    00001a8b: 	movl	%r15d, %edx
    00001a8e: 	psrldq	$0x8, %xmm0
    00001a93: 	paddd	%xmm0, %xmm4
    00001a97: 	movdqa	%xmm3, %xmm0
    00001a9b: 	psrldq	$0x8, %xmm0
    00001aa0: 	imull	%eax, %edx
    00001aa3: 	paddd	%xmm0, %xmm3
    00001aa7: 	movdqa	%xmm4, %xmm0
    00001aab: 	imull	%r14d, %eax
    00001aaf: 	psrldq	$0x4, %xmm0
    00001ab4: 	paddd	%xmm0, %xmm4
    00001ab8: 	movdqa	%xmm3, %xmm0
    00001abc: 	imull	$0x1f40, %edx, %edx
    00001ac2: 	psrldq	$0x4, %xmm0
    00001ac7: 	movd	%xmm4, %esi
    00001acb: 	imull	$0x1f40, %eax, %eax
    00001ad1: 	paddd	%xmm0, %xmm3
    00001ad5: 	movd	%xmm3, %edi
    00001ad9: 	subl	%edx, %esi
    00001adb: 	subl	%eax, %edi
    00001add: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 6877
    00001ae2: 	testl	%eax, %eax
    00001ae4: 	jg	.Ltmp2756 # Offset: 6884
.Ltmp2854:
    00001aea: 	addl	$0x1, %ebp
    00001aed: 	cmpl	iterations(%rip), %ebp
    00001af3: 	jl	.Ltmp2757 # Offset: 6899
.Ltmp2754:
    00001af9: 	movq	0x18(%rsp), %rsi
    00001afe: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b05: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6917
    00001b0a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b11: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001b18: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b1f: 	je	.Ltmp2758 # Offset: 6943
.Ltmp2876:
    00001b25: 	movq	-0x20(%rax), %rbp
    00001b29: 	callq	clock@PLT # Offset: 6953
    00001b2e: 	pxor	%xmm0, %xmm0
    00001b32: 	movq	%rax, end_time(%rip)
    00001b39: 	movq	%rbp, %rdi
    00001b3c: 	subq	start_time(%rip), %rax
    00001b43: 	cvtsi2sd	%rax, %xmm0
    00001b48: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001b50: 	callq	_Z13record_resultdPKc # Offset: 6992
    00001b55: 	movq	0x180(%rsp), %rdi
    00001b5d: 	cmpq	0x20(%rsp), %rdi
    00001b62: 	je	.Ltmp2759 # Offset: 7010
    00001b64: 	movq	0x190(%rsp), %rax
    00001b6c: 	leaq	0x1(%rax), %rsi
    00001b70: 	callq	_ZdlPvm@PLT # Offset: 7024
.Ltmp2759:
    00001b75: 	movq	0x18(%rsp), %rbp
    00001b7a: 	movq	0x50(%rsp), %rsi
    00001b7f: 	leaq	DATAat0x2b3ef(%rip), %rdx
    00001b86: 	movq	%rbp, %rdi
    00001b89: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7049
    00001b8e: 	movd	%r15d, %xmm5
    00001b93: 	movd	%r14d, %xmm3
    00001b98: 	movq	0x10(%rsp), %rdi
    00001b9d: 	movq	%rbp, %r9
    00001ba0: 	punpckldq	%xmm5, %xmm3
    00001ba4: 	movd	0x8c(%rsp), %xmm5
    00001bad: 	movq	%xmm3, %rsi
    00001bb2: 	movq	%xmm3, (%rsp)
    00001bb7: 	movd	0x88(%rsp), %xmm3
    00001bc0: 	punpckldq	%xmm5, %xmm3
    00001bc4: 	movd	0x70(%rsp), %xmm5
    00001bca: 	movq	%xmm3, %rdx
    00001bcf: 	movq	%xmm3, 0x28(%rsp)
    00001bd5: 	movd	0x84(%rsp), %xmm3
    00001bde: 	punpckldq	%xmm5, %xmm3
    00001be2: 	movd	0x60(%rsp), %xmm5
    00001be8: 	movq	%xmm3, %rcx
    00001bed: 	movq	%xmm3, 0x30(%rsp)
    00001bf3: 	movd	0x58(%rsp), %xmm3
    00001bf9: 	punpckldq	%xmm5, %xmm3
    00001bfd: 	movq	%xmm3, %r8
    00001c02: 	movq	%xmm3, %r13
    00001c07: 	callq	"_Z14test_variable4ISt7complexIiE33custom_multiply_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7175
    00001c0c: 	movq	0x180(%rsp), %rdi
    00001c14: 	cmpq	0x20(%rsp), %rdi
    00001c19: 	je	.Ltmp2760 # Offset: 7193
    00001c1b: 	movq	0x190(%rsp), %rax
    00001c23: 	leaq	0x1(%rax), %rsi
    00001c27: 	callq	_ZdlPvm@PLT # Offset: 7207
.Ltmp2760:
    00001c2c: 	movq	0x18(%rsp), %rbp
    00001c31: 	movq	0x50(%rsp), %rsi
    00001c36: 	leaq	DATAat0x2b590(%rip), %rdx
    00001c3d: 	movq	%rbp, %rdi
    00001c40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7232
    00001c45: 	movq	0x30(%rsp), %rcx
    00001c4a: 	movq	0x28(%rsp), %rdx
    00001c4f: 	movq	%rbp, %r9
    00001c52: 	movq	%r13, %r8
    00001c55: 	movq	(%rsp), %rsi
    00001c59: 	movq	0x10(%rsp), %rdi
    00001c5e: 	callq	"_Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7262
    00001c63: 	movq	0x180(%rsp), %rdi
    00001c6b: 	cmpq	0x20(%rsp), %rdi
    00001c70: 	je	.Ltmp2761 # Offset: 7280
    00001c72: 	movq	0x190(%rsp), %rax
    00001c7a: 	leaq	0x1(%rax), %rsi
    00001c7e: 	callq	_ZdlPvm@PLT # Offset: 7294
.Ltmp2761:
    00001c83: 	movq	0x18(%rsp), %rbp
    00001c88: 	movq	0x50(%rsp), %rsi
    00001c8d: 	leaq	DATAat0x2b5b0(%rip), %rdx
    00001c94: 	movq	%rbp, %rdi
    00001c97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7319
    00001c9c: 	movq	0x30(%rsp), %rcx
    00001ca1: 	movq	0x28(%rsp), %rdx
    00001ca6: 	movq	%rbp, %r9
    00001ca9: 	movq	%r13, %r8
    00001cac: 	movq	(%rsp), %rsi
    00001cb0: 	movq	0x10(%rsp), %rdi
    00001cb5: 	callq	"_Z14test_variable4ISt7complexIiE34custom_multiply_multiple_variable3IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7349
    00001cba: 	movq	0x180(%rsp), %rdi
    00001cc2: 	cmpq	0x20(%rsp), %rdi
    00001cc7: 	je	.Ltmp2762 # Offset: 7367
    00001cc9: 	movq	0x190(%rsp), %rax
    00001cd1: 	leaq	0x1(%rax), %rsi
    00001cd5: 	callq	_ZdlPvm@PLT # Offset: 7381
.Ltmp2762:
    00001cda: 	movq	0x50(%rsp), %rsi
    00001cdf: 	movq	0x18(%rsp), %rdi
    00001ce4: 	leaq	DATAat0x2b40d(%rip), %rdx
    00001ceb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7403
    00001cf0: 	callq	clock@PLT # Offset: 7408
    00001cf5: 	movl	iterations(%rip), %r10d
    00001cfc: 	movq	%rax, start_time(%rip)
    00001d03: 	testl	%r10d, %r10d
    00001d06: 	jle	.Ltmp2763 # Offset: 7430
    00001d0c: 	movl	%r14d, %ebp
    00001d0f: 	movl	%r15d, %eax
    00001d12: 	xorl	%r12d, %r12d
    00001d15: 	imull	%r14d, %ebp
    00001d19: 	imull	%r15d, %eax
    00001d1d: 	addl	%eax, %ebp
    00001d1f: 	nop # Size: 1
.Ltmp2766:
    00001d20: 	movq	0x10(%rsp), %rsi
    00001d25: 	xorl	%r8d, %r8d
    00001d28: 	xorl	%edi, %edi
    00001d2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2764:
    00001d30: 	movl	(%rsi), %r9d
    00001d33: 	movl	0x4(%rsi), %ecx
    00001d36: 	movl	%r14d, %eax
    00001d39: 	movl	%r15d, %edx
    00001d3c: 	addq	$0x8, %rsi
    00001d40: 	imull	%r9d, %eax
    00001d44: 	imull	%ecx, %edx
    00001d47: 	imull	%r15d, %r9d
    00001d4b: 	addl	%edx, %eax
    00001d4d: 	cltd
    00001d4e: 	idivl	%ebp
    00001d50: 	addl	%eax, %edi
    00001d52: 	movl	%ecx, %eax
    00001d54: 	imull	%r14d, %eax
    00001d58: 	subl	%r9d, %eax
    00001d5b: 	cltd
    00001d5c: 	idivl	%ebp
    00001d5e: 	addl	%eax, %r8d
    00001d61: 	cmpq	%rsi, %rbx
    00001d64: 	jne	.Ltmp2764 # Offset: 7524
    00001d66: 	cvttsd2si	init_value(%rip), %ecx
    00001d6e: 	movl	%r15d, %eax
    00001d71: 	movl	%r8d, %esi
    00001d74: 	imull	%ecx, %eax
    00001d77: 	negl	%eax
    00001d79: 	cltd
    00001d7a: 	idivl	%ebp
    00001d7c: 	imull	$0x1f40, %eax, %eax
    00001d82: 	subl	%eax, %esi
    00001d84: 	movl	%ecx, %eax
    00001d86: 	imull	%r14d, %eax
    00001d8a: 	cltd
    00001d8b: 	idivl	%ebp
    00001d8d: 	imull	$0x1f40, %eax, %eax
    00001d93: 	subl	%eax, %edi
    00001d95: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 7573
    00001d9a: 	testl	%eax, %eax
    00001d9c: 	jg	.Ltmp2765 # Offset: 7580
.Ltmp2853:
    00001da2: 	addl	$0x1, %r12d
    00001da6: 	cmpl	iterations(%rip), %r12d
    00001dad: 	jl	.Ltmp2766 # Offset: 7597
.Ltmp2763:
    00001db3: 	movq	0x18(%rsp), %rsi
    00001db8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001dbf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7615
    00001dc4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001dcb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001dd2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001dd9: 	je	.Ltmp2767 # Offset: 7641
.Ltmp2875:
    00001ddf: 	movq	-0x20(%rax), %rbp
    00001de3: 	callq	clock@PLT # Offset: 7651
    00001de8: 	pxor	%xmm0, %xmm0
    00001dec: 	movq	%rax, end_time(%rip)
    00001df3: 	movq	%rbp, %rdi
    00001df6: 	subq	start_time(%rip), %rax
    00001dfd: 	cvtsi2sd	%rax, %xmm0
    00001e02: 	divsd	DATAat0x2b628(%rip), %xmm0
    00001e0a: 	callq	_Z13record_resultdPKc # Offset: 7690
    00001e0f: 	movq	0x180(%rsp), %rdi
    00001e17: 	cmpq	0x20(%rsp), %rdi
    00001e1c: 	je	.Ltmp2768 # Offset: 7708
    00001e1e: 	movq	0x190(%rsp), %rax
    00001e26: 	leaq	0x1(%rax), %rsi
    00001e2a: 	callq	_ZdlPvm@PLT # Offset: 7722
.Ltmp2768:
    00001e2f: 	movq	0x18(%rsp), %rbp
    00001e34: 	movq	0x50(%rsp), %rsi
    00001e39: 	leaq	DATAat0x2b41e(%rip), %rdx
    00001e40: 	movq	%rbp, %rdi
    00001e43: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7747
    00001e48: 	movq	0x30(%rsp), %rcx
    00001e4d: 	movq	0x28(%rsp), %rdx
    00001e52: 	movq	%rbp, %r9
    00001e55: 	movq	%r13, %r8
    00001e58: 	movq	(%rsp), %rsi
    00001e5c: 	movq	0x10(%rsp), %rdi
    00001e61: 	callq	"_Z14test_variable4ISt7complexIiE31custom_divide_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7777
    00001e66: 	movq	0x180(%rsp), %rdi
    00001e6e: 	cmpq	0x20(%rsp), %rdi
    00001e73: 	je	.Ltmp2769 # Offset: 7795
    00001e75: 	movq	0x190(%rsp), %rax
    00001e7d: 	leaq	0x1(%rax), %rsi
    00001e81: 	callq	_ZdlPvm@PLT # Offset: 7809
.Ltmp2769:
    00001e86: 	movq	0x18(%rsp), %rbp
    00001e8b: 	movq	0x50(%rsp), %rsi
    00001e90: 	leaq	DATAat0x2b439(%rip), %rdx
    00001e97: 	movq	%rbp, %rdi
    00001e9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7834
    00001e9f: 	movq	0x30(%rsp), %rcx
    00001ea4: 	movq	0x28(%rsp), %rdx
    00001ea9: 	movq	%rbp, %r9
    00001eac: 	movq	%r13, %r8
    00001eaf: 	movq	(%rsp), %rsi
    00001eb3: 	movq	0x10(%rsp), %rdi
    00001eb8: 	callq	"_Z14test_variable4ISt7complexIiE32custom_divide_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7864
    00001ebd: 	movq	0x180(%rsp), %rdi
    00001ec5: 	cmpq	0x20(%rsp), %rdi
    00001eca: 	je	.Ltmp2770 # Offset: 7882
    00001ecc: 	movq	0x190(%rsp), %rax
    00001ed4: 	leaq	0x1(%rax), %rsi
    00001ed8: 	callq	_ZdlPvm@PLT # Offset: 7896
.Ltmp2770:
    00001edd: 	movq	0x18(%rsp), %rbp
    00001ee2: 	movq	0x50(%rsp), %rsi
    00001ee7: 	leaq	DATAat0x2b455(%rip), %rdx
    00001eee: 	movq	%rbp, %rdi
    00001ef1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7921
    00001ef6: 	movq	0x30(%rsp), %rcx
    00001efb: 	movq	0x28(%rsp), %rdx
    00001f00: 	movq	%rbp, %r9
    00001f03: 	movq	%r13, %r8
    00001f06: 	movq	(%rsp), %rsi
    00001f0a: 	movq	0x10(%rsp), %rdi
    00001f0f: 	callq	"_Z14test_variable4ISt7complexIiE30custom_mixed_multiple_variableIS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7951
    00001f14: 	movq	0x180(%rsp), %rdi
    00001f1c: 	cmpq	0x20(%rsp), %rdi
    00001f21: 	je	.Ltmp2771 # Offset: 7969
    00001f23: 	movq	0x190(%rsp), %rax
    00001f2b: 	leaq	0x1(%rax), %rsi
    00001f2f: 	callq	_ZdlPvm@PLT # Offset: 7983
.Ltmp2771:
    00001f34: 	movq	0x18(%rsp), %rbp
    00001f39: 	movq	0x50(%rsp), %rsi
    00001f3e: 	leaq	DATAat0x2b46e(%rip), %rdx
    00001f45: 	movq	%rbp, %rdi
    00001f48: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8008
    00001f4d: 	movq	0x30(%rsp), %rcx
    00001f52: 	movq	0x28(%rsp), %rdx
    00001f57: 	movq	%rbp, %r9
    00001f5a: 	movq	%r13, %r8
    00001f5d: 	movq	(%rsp), %rsi
    00001f61: 	movq	0x10(%rsp), %rdi
    00001f66: 	callq	"_Z14test_variable4ISt7complexIiE31custom_mixed_multiple_variable2IS1_EEvPT_iS4_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8038
    00001f6b: 	movq	0x180(%rsp), %rdi
    00001f73: 	cmpq	0x20(%rsp), %rdi
    00001f78: 	je	.Ltmp2772 # Offset: 8056
    00001f7a: 	movq	0x190(%rsp), %rax
    00001f82: 	leaq	0x1(%rax), %rsi
    00001f86: 	callq	_ZdlPvm@PLT # Offset: 8070
.Ltmp2772:
    00001f8b: 	movq	0x50(%rsp), %rbp
    00001f90: 	leaq	0x120(%rsp), %rdi
    00001f98: 	leaq	DATAat0x2b488(%rip), %rdx
    00001f9f: 	movq	%rbp, %rsi
    00001fa2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8098
    00001fa7: 	movl	iterations(%rip), %edx
    00001fad: 	xorl	%r8d, %r8d
    00001fb0: 	xorl	%ecx, %ecx
    00001fb2: 	movl	$0x1f40, %esi
    00001fb7: 	movq	0x120(%rsp), %rdi
    00001fbf: 	callq	_Z9summarizePKciiii # Offset: 8127
    00001fc4: 	movq	0x18(%rsp), %rdi
    00001fc9: 	leaq	DATAat0x2b499(%rip), %rdx
    00001fd0: 	movq	%rbp, %rsi
    00001fd3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8147
    00001fd8: 	callq	clock@PLT # Offset: 8152
    00001fdd: 	movl	iterations(%rip), %r9d
    00001fe4: 	xorl	%r12d, %r12d
    00001fe7: 	leaq	DATAat0x2b1d0(%rip), %r13
    00001fee: 	movq	%rax, start_time(%rip)
    00001ff5: 	movq	0x10(%rsp), %rax
    00001ffa: 	leaq	0xf9f0(%rax), %rbp
    00002001: 	testl	%r9d, %r9d
    00002004: 	jle	.Ltmp2773 # Offset: 8196
    0000200a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2776:
    00002010: 	movl	0x1a0(%rsp), %eax
    00002017: 	subl	0x1a8(%rsp), %eax
    0000201e: 	movd	%eax, %xmm0
    00002022: 	movl	0x1a4(%rsp), %eax
    00002029: 	subl	0x1ac(%rsp), %eax
    00002030: 	movd	%eax, %xmm3
    00002034: 	movq	0x10(%rsp), %rax
    00002039: 	punpckldq	%xmm3, %xmm0
    0000203d: 	movq	%xmm0, %xmm0
    00002041: 	nopl	(%rax) # Size: 7
.Ltmp2774:
    00002048: 	paddd	(%rax), %xmm0
    0000204c: 	movdqu	0x8(%rax), %xmm3
    00002051: 	addq	$0x10, %rax
    00002055: 	psubd	%xmm3, %xmm0
    00002059: 	cmpq	%rax, %rbp
    0000205c: 	jne	.Ltmp2774 # Offset: 8284
    0000205e: 	pshufd	$0xff, %xmm0, %xmm1
    00002063: 	movl	0xfb94(%rsp), %esi
    0000206a: 	subl	0xfb9c(%rsp), %esi
    00002071: 	movd	%xmm1, %eax
    00002075: 	pshufd	$0x55, %xmm0, %xmm1
    0000207a: 	movl	0xfb90(%rsp), %edi
    00002081: 	subl	0xfb98(%rsp), %edi
    00002088: 	movd	%xmm1, %edx
    0000208c: 	movdqa	%xmm0, %xmm1
    00002090: 	addl	%edx, %eax
    00002092: 	punpckhdq	%xmm0, %xmm1
    00002096: 	addl	%eax, %esi
    00002098: 	movd	%xmm1, %edx
    0000209c: 	movd	%xmm0, %eax
    000020a0: 	addl	%edx, %eax
    000020a2: 	addl	%eax, %edi
    000020a4: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 8356
    000020a9: 	testl	%eax, %eax
    000020ab: 	jg	.Ltmp2775 # Offset: 8363
.Ltmp2852:
    000020b1: 	addl	$0x1, %r12d
    000020b5: 	cmpl	iterations(%rip), %r12d
    000020bc: 	jl	.Ltmp2776 # Offset: 8380
.Ltmp2773:
    000020c2: 	movq	0x18(%rsp), %rsi
    000020c7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000020ce: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8398
    000020d3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000020da: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000020e1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000020e8: 	je	.Ltmp2777 # Offset: 8424
.Ltmp2874:
    000020ee: 	movq	-0x20(%rax), %rbp
    000020f2: 	callq	clock@PLT # Offset: 8434
    000020f7: 	pxor	%xmm0, %xmm0
    000020fb: 	movq	%rax, end_time(%rip)
    00002102: 	movq	%rbp, %rdi
    00002105: 	subq	start_time(%rip), %rax
    0000210c: 	cvtsi2sd	%rax, %xmm0
    00002111: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002119: 	callq	_Z13record_resultdPKc # Offset: 8473
    0000211e: 	movq	0x180(%rsp), %rdi
    00002126: 	cmpq	0x20(%rsp), %rdi
    0000212b: 	je	.Ltmp2778 # Offset: 8491
    0000212d: 	movq	0x190(%rsp), %rax
    00002135: 	leaq	0x1(%rax), %rsi
    00002139: 	callq	_ZdlPvm@PLT # Offset: 8505
.Ltmp2778:
    0000213e: 	movq	0x50(%rsp), %rsi
    00002143: 	movq	0x18(%rsp), %rdi
    00002148: 	leaq	DATAat0x2b4a2(%rip), %rdx
    0000214f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8527
    00002154: 	callq	clock@PLT # Offset: 8532
    00002159: 	movl	iterations(%rip), %r8d
    00002160: 	movq	%rax, start_time(%rip)
    00002167: 	testl	%r8d, %r8d
    0000216a: 	jle	.Ltmp2779 # Offset: 8554
    00002170: 	leaq	0x1a8(%rsp), %rax
    00002178: 	movd	%r14d, %xmm3
    0000217d: 	movd	%r15d, %xmm5
    00002182: 	movl	$0x0, 0x84(%rsp)
    0000218d: 	movq	%rax, 0x58(%rsp)
    00002192: 	movq	0x10(%rsp), %rax
    00002197: 	pshufd	$0x0, %xmm3, %xmm3
    0000219c: 	pshufd	$0x0, %xmm5, %xmm5
    000021a1: 	movaps	%xmm3, 0x40(%rsp)
    000021a6: 	psrlq	$0x20, %xmm3
    000021ab: 	addq	$0xf9e8, %rax
    000021b1: 	movaps	%xmm3, 0x60(%rsp)
    000021b6: 	movdqa	%xmm5, %xmm3
    000021ba: 	movq	%rax, 0x28(%rsp)
    000021bf: 	psrlq	$0x20, %xmm3
    000021c4: 	movaps	%xmm5, 0x30(%rsp)
    000021c9: 	movaps	%xmm3, (%rsp)
    000021cd: 	nopl	(%rax) # Size: 3
.Ltmp2782:
    000021d0: 	movl	0x1a0(%rsp), %eax
    000021d7: 	pxor	%xmm3, %xmm3
    000021db: 	subl	0x1a8(%rsp), %eax
    000021e2: 	movl	%eax, 0x88(%rsp)
    000021e9: 	movq	0x28(%rsp), %r12
    000021ee: 	movdqa	%xmm3, %xmm6
    000021f2: 	movq	0x58(%rsp), %rax
    000021f7: 	movdqa	0x60(%rsp), %xmm13
    000021fe: 	movdqa	0x30(%rsp), %xmm14
    00002205: 	movdqa	0x40(%rsp), %xmm15
    0000220c: 	movl	0x1a4(%rsp), %r13d
    00002214: 	subl	0x1ac(%rsp), %r13d
    0000221c: 	nopl	(%rax) # Size: 4
.Ltmp2780:
    00002220: 	movdqa	-0x8(%rax), %xmm2
    00002225: 	movdqu	(%rax), %xmm9
    0000222a: 	movdqa	%xmm15, %xmm1
    0000222f: 	movdqa	%xmm13, %xmm7
    00002234: 	movdqu	0x10(%rax), %xmm4
    00002239: 	movdqa	(%rsp), %xmm11
    0000223f: 	movdqa	%xmm14, %xmm10
    00002244: 	addq	$0x20, %rax
    00002248: 	movdqa	%xmm2, %xmm5
    0000224c: 	movdqa	%xmm9, %xmm12
    00002251: 	shufps	$0x88, -0x18(%rax), %xmm5
    00002256: 	movdqa	%xmm5, %xmm0
    0000225a: 	shufps	$0x88, %xmm4, %xmm12
    0000225f: 	psubd	%xmm12, %xmm0
    00002264: 	shufps	$0xdd, %xmm4, %xmm9
    00002269: 	shufps	$0xdd, -0x18(%rax), %xmm2
    0000226e: 	movdqa	%xmm0, %xmm8
    00002273: 	pmuludq	%xmm0, %xmm1
    00002277: 	movdqa	%xmm2, %xmm4
    0000227b: 	psrlq	$0x20, %xmm8
    00002281: 	pmuludq	%xmm14, %xmm0
    00002286: 	psubd	%xmm9, %xmm4
    0000228b: 	pmuludq	%xmm8, %xmm7
    00002290: 	pmuludq	%xmm4, %xmm10
    00002295: 	pmuludq	(%rsp), %xmm8
    0000229b: 	pshufd	$0x8, %xmm8, %xmm8
    000022a1: 	pshufd	$0x8, %xmm1, %xmm1
    000022a6: 	pshufd	$0x8, %xmm0, %xmm0
    000022ab: 	pshufd	$0x8, %xmm7, %xmm7
    000022b0: 	pshufd	$0x8, %xmm10, %xmm10
    000022b6: 	punpckldq	%xmm8, %xmm0
    000022bb: 	punpckldq	%xmm7, %xmm1
    000022bf: 	movdqa	%xmm4, %xmm7
    000022c3: 	psrlq	$0x20, %xmm7
    000022c8: 	pmuludq	%xmm15, %xmm4
    000022cd: 	pmuludq	%xmm7, %xmm11
    000022d2: 	pmuludq	%xmm13, %xmm7
    000022d7: 	pshufd	$0x8, %xmm4, %xmm4
    000022dc: 	pshufd	$0x8, %xmm11, %xmm11
    000022e2: 	pshufd	$0x8, %xmm7, %xmm7
    000022e7: 	punpckldq	%xmm11, %xmm10
    000022ec: 	punpckldq	%xmm7, %xmm4
    000022f0: 	psubd	%xmm10, %xmm1
    000022f5: 	paddd	%xmm4, %xmm0
    000022f9: 	pslld	$0x1, %xmm1
    000022fe: 	pslld	$0x1, %xmm0
    00002303: 	paddd	%xmm1, %xmm5
    00002307: 	paddd	%xmm0, %xmm2
    0000230b: 	paddd	%xmm6, %xmm5
    0000230f: 	paddd	%xmm3, %xmm2
    00002313: 	paddd	%xmm12, %xmm1
    00002318: 	movdqa	%xmm5, %xmm6
    0000231c: 	paddd	%xmm9, %xmm0
    00002321: 	movdqa	%xmm2, %xmm3
    00002325: 	psubd	%xmm1, %xmm6
    00002329: 	psubd	%xmm0, %xmm3
    0000232d: 	cmpq	%r12, %rax
    00002330: 	jne	.Ltmp2780 # Offset: 9008
    00002336: 	movl	0xfb8c(%rsp), %esi
    0000233d: 	movl	%r14d, %r10d
    00002340: 	movl	%r15d, %ecx
    00002343: 	movl	%r14d, %r9d
    00002346: 	movl	0xfb84(%rsp), %eax
    0000234d: 	movl	%r15d, %r8d
    00002350: 	movdqa	%xmm3, %xmm0
    00002354: 	movl	0xfb80(%rsp), %edx
    0000235b: 	subl	0xfb88(%rsp), %edx
    00002362: 	psrldq	$0x8, %xmm0
    00002367: 	movq	%r12, 0x28(%rsp)
    0000236c: 	movl	%r15d, %r12d
    0000236f: 	subl	%esi, %eax
    00002371: 	imull	%edx, %r10d
    00002375: 	paddd	%xmm0, %xmm3
    00002379: 	movl	0xfb90(%rsp), %ebp
    00002380: 	imull	%eax, %ecx
    00002383: 	movl	0xfb88(%rsp), %edi
    0000238a: 	movdqa	%xmm6, %xmm0
    0000238e: 	imull	%r14d, %eax
    00002392: 	psrldq	$0x8, %xmm0
    00002397: 	imull	%r15d, %edx
    0000239b: 	subl	%ebp, %edi
    0000239d: 	paddd	%xmm0, %xmm6
    000023a1: 	subl	%ecx, %r10d
    000023a4: 	movl	0xfb94(%rsp), %ecx
    000023ab: 	imull	%edi, %r9d
    000023af: 	movdqa	%xmm3, %xmm0
    000023b3: 	imull	%r15d, %edi
    000023b7: 	psrldq	$0x4, %xmm0
    000023bc: 	addl	%r10d, %r10d
    000023bf: 	addl	%eax, %edx
    000023c1: 	movl	%esi, %eax
    000023c3: 	paddd	%xmm0, %xmm3
    000023c7: 	movl	%ecx, %r11d
    000023ca: 	subl	%ecx, %eax
    000023cc: 	subl	0xfb9c(%rsp), %r11d
    000023d4: 	movdqa	%xmm6, %xmm0
    000023d8: 	addl	%edx, %edx
    000023da: 	imull	%eax, %r8d
    000023de: 	psrldq	$0x4, %xmm0
    000023e3: 	imull	%r14d, %eax
    000023e7: 	paddd	%xmm0, %xmm6
    000023eb: 	imull	%r11d, %r12d
    000023ef: 	subl	%r8d, %r9d
    000023f2: 	imull	%r14d, %r11d
    000023f6: 	movl	%r14d, %r8d
    000023f9: 	addl	%edi, %eax
    000023fb: 	movl	%ebp, %edi
    000023fd: 	subl	0xfb98(%rsp), %edi
    00002404: 	addl	%r9d, %r9d
    00002407: 	imull	%edi, %r8d
    0000240b: 	addl	%eax, %eax
    0000240d: 	imull	%r15d, %edi
    00002411: 	subl	%r12d, %r8d
    00002414: 	addl	%r11d, %edi
    00002417: 	movd	%xmm3, %r11d
    0000241c: 	addl	%r8d, %r8d
    0000241f: 	addl	%r13d, %r11d
    00002422: 	movl	0xfb84(%rsp), %r13d
    0000242a: 	addl	%edi, %edi
    0000242c: 	addl	%edx, %r13d
    0000242f: 	addl	%r11d, %r13d
    00002432: 	addl	%esi, %edx
    00002434: 	addl	%eax, %esi
    00002436: 	addl	%ecx, %eax
    00002438: 	subl	%edx, %r13d
    0000243b: 	addl	%edi, %ecx
    0000243d: 	addl	%r13d, %esi
    00002440: 	subl	%eax, %esi
    00002442: 	movl	0xfb9c(%rsp), %eax
    00002449: 	addl	%esi, %ecx
    0000244b: 	addl	%edi, %eax
    0000244d: 	movd	%xmm6, %edi
    00002451: 	addl	0x88(%rsp), %edi
    00002458: 	subl	%eax, %ecx
    0000245a: 	movl	0xfb80(%rsp), %eax
    00002461: 	movl	%ecx, %esi
    00002463: 	addl	%r10d, %eax
    00002466: 	addl	0xfb88(%rsp), %r10d
    0000246e: 	addl	%eax, %edi
    00002470: 	movl	0xfb88(%rsp), %eax
    00002477: 	subl	%r10d, %edi
    0000247a: 	addl	%r9d, %eax
    0000247d: 	addl	%ebp, %r9d
    00002480: 	addl	%eax, %edi
    00002482: 	leal	(%rbp,%r8), %eax
    00002487: 	addl	0xfb98(%rsp), %r8d
    0000248f: 	subl	%r9d, %edi
    00002492: 	addl	%eax, %edi
    00002494: 	subl	%r8d, %edi
    00002497: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 9367
    0000249c: 	testl	%eax, %eax
    0000249e: 	jg	.Ltmp2781 # Offset: 9374
.Ltmp2851:
    000024a4: 	addl	$0x1, 0x84(%rsp)
    000024ac: 	movl	0x84(%rsp), %eax
    000024b3: 	cmpl	iterations(%rip), %eax
    000024b9: 	jl	.Ltmp2782 # Offset: 9401
.Ltmp2779:
    000024bf: 	movq	0x18(%rsp), %rsi
    000024c4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000024cb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9419
    000024d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000024d7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000024de: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000024e5: 	je	.Ltmp2783 # Offset: 9445
.Ltmp2873:
    000024eb: 	movq	-0x20(%rax), %rbp
    000024ef: 	callq	clock@PLT # Offset: 9455
    000024f4: 	pxor	%xmm0, %xmm0
    000024f8: 	movq	%rax, end_time(%rip)
    000024ff: 	movq	%rbp, %rdi
    00002502: 	subq	start_time(%rip), %rax
    00002509: 	cvtsi2sd	%rax, %xmm0
    0000250e: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002516: 	callq	_Z13record_resultdPKc # Offset: 9494
    0000251b: 	movq	0x180(%rsp), %rdi
    00002523: 	cmpq	0x20(%rsp), %rdi
    00002528: 	je	.Ltmp2784 # Offset: 9512
    0000252a: 	movq	0x190(%rsp), %rax
    00002532: 	leaq	0x1(%rax), %rsi
    00002536: 	callq	_ZdlPvm@PLT # Offset: 9526
.Ltmp2784:
    0000253b: 	movq	0x50(%rsp), %rsi
    00002540: 	movq	0x18(%rsp), %rdi
    00002545: 	leaq	DATAat0x2b4b0(%rip), %rdx
    0000254c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9548
    00002551: 	callq	clock@PLT # Offset: 9553
    00002556: 	movl	iterations(%rip), %edi
    0000255c: 	movq	%rax, start_time(%rip)
    00002563: 	testl	%edi, %edi
    00002565: 	jle	.Ltmp2785 # Offset: 9573
    0000256b: 	leaq	0x1a8(%rsp), %rax
    00002573: 	movd	%r14d, %xmm3
    00002578: 	movd	%r15d, %xmm5
    0000257d: 	movl	$0x0, 0x84(%rsp)
    00002588: 	movq	%rax, 0x58(%rsp)
    0000258d: 	movq	0x10(%rsp), %rax
    00002592: 	pshufd	$0x0, %xmm3, %xmm3
    00002597: 	pshufd	$0x0, %xmm5, %xmm5
    0000259c: 	movaps	%xmm3, 0x40(%rsp)
    000025a1: 	psrlq	$0x20, %xmm3
    000025a6: 	addq	$0xf9e8, %rax
    000025ac: 	movaps	%xmm3, 0x70(%rsp)
    000025b1: 	movdqa	%xmm5, %xmm3
    000025b5: 	movq	%rax, 0x28(%rsp)
    000025ba: 	psrlq	$0x20, %xmm3
    000025bf: 	movaps	%xmm5, 0x30(%rsp)
    000025c4: 	movaps	%xmm3, (%rsp)
    000025c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2788:
    000025d0: 	movl	0x1a0(%rsp), %eax
    000025d7: 	pxor	%xmm3, %xmm3
    000025db: 	subl	0x1a8(%rsp), %eax
    000025e2: 	movl	%eax, 0x88(%rsp)
    000025e9: 	movq	0x28(%rsp), %r12
    000025ee: 	movdqa	%xmm3, %xmm4
    000025f2: 	movl	0x1a4(%rsp), %eax
    000025f9: 	subl	0x1ac(%rsp), %eax
    00002600: 	movl	%eax, 0x60(%rsp)
    00002604: 	movdqa	0x70(%rsp), %xmm13
    0000260b: 	movq	0x58(%rsp), %rax
    00002610: 	movdqa	0x30(%rsp), %xmm14
    00002617: 	movdqa	0x40(%rsp), %xmm15
    0000261e: 	nop # Size: 2
.Ltmp2786:
    00002620: 	movdqu	(%rax), %xmm5
    00002624: 	movdqu	0x10(%rax), %xmm6
    00002629: 	movdqa	%xmm15, %xmm2
    0000262e: 	movdqa	%xmm13, %xmm9
    00002633: 	movdqa	-0x8(%rax), %xmm1
    00002638: 	movdqa	(%rsp), %xmm12
    0000263e: 	movdqa	%xmm14, %xmm11
    00002643: 	addq	$0x20, %rax
    00002647: 	movdqa	%xmm5, %xmm8
    0000264c: 	shufps	$0xdd, %xmm6, %xmm5
    00002650: 	shufps	$0x88, %xmm6, %xmm8
    00002655: 	movdqa	%xmm1, %xmm7
    00002659: 	shufps	$0x88, -0x18(%rax), %xmm7
    0000265e: 	movdqa	%xmm7, %xmm6
    00002662: 	psubd	%xmm8, %xmm6
    00002667: 	shufps	$0xdd, -0x18(%rax), %xmm1
    0000266c: 	movdqa	%xmm1, %xmm0
    00002670: 	movdqa	%xmm6, %xmm10
    00002675: 	pmuludq	%xmm6, %xmm2
    00002679: 	psubd	%xmm5, %xmm0
    0000267d: 	psrlq	$0x20, %xmm10
    00002683: 	pmuludq	%xmm0, %xmm11
    00002688: 	pmuludq	%xmm10, %xmm9
    0000268d: 	pmuludq	%xmm14, %xmm6
    00002692: 	pmuludq	(%rsp), %xmm10
    00002698: 	pshufd	$0x8, %xmm10, %xmm10
    0000269e: 	pshufd	$0x8, %xmm2, %xmm2
    000026a3: 	pshufd	$0x8, %xmm11, %xmm11
    000026a9: 	pshufd	$0x8, %xmm9, %xmm9
    000026af: 	pshufd	$0x8, %xmm6, %xmm6
    000026b4: 	punpckldq	%xmm9, %xmm2
    000026b9: 	movdqa	%xmm0, %xmm9
    000026be: 	punpckldq	%xmm10, %xmm6
    000026c3: 	psrlq	$0x20, %xmm9
    000026c9: 	pmuludq	%xmm15, %xmm0
    000026ce: 	pmuludq	%xmm9, %xmm12
    000026d3: 	pmuludq	%xmm13, %xmm9
    000026d8: 	pshufd	$0x8, %xmm0, %xmm0
    000026dd: 	pshufd	$0x8, %xmm12, %xmm12
    000026e3: 	pshufd	$0x8, %xmm9, %xmm9
    000026e9: 	punpckldq	%xmm12, %xmm11
    000026ee: 	punpckldq	%xmm9, %xmm0
    000026f3: 	psubd	%xmm11, %xmm2
    000026f8: 	paddd	%xmm6, %xmm0
    000026fc: 	paddd	%xmm2, %xmm7
    00002700: 	paddd	%xmm0, %xmm1
    00002704: 	paddd	%xmm2, %xmm7
    00002708: 	paddd	%xmm0, %xmm1
    0000270c: 	paddd	%xmm4, %xmm7
    00002710: 	paddd	%xmm2, %xmm8
    00002715: 	paddd	%xmm3, %xmm1
    00002719: 	paddd	%xmm0, %xmm5
    0000271d: 	movdqa	%xmm7, %xmm4
    00002721: 	paddd	%xmm2, %xmm8
    00002726: 	paddd	%xmm0, %xmm5
    0000272a: 	movdqa	%xmm1, %xmm3
    0000272e: 	psubd	%xmm8, %xmm4
    00002733: 	psubd	%xmm5, %xmm3
    00002737: 	cmpq	%r12, %rax
    0000273a: 	jne	.Ltmp2786 # Offset: 10042
    00002740: 	movl	0xfb80(%rsp), %edi
    00002747: 	movl	%r14d, %ebp
    0000274a: 	movl	%r15d, %edx
    0000274d: 	movl	%r14d, %r10d
    00002750: 	movl	0xfb88(%rsp), %r11d
    00002758: 	movdqa	%xmm3, %xmm0
    0000275c: 	movl	%r14d, %r8d
    0000275f: 	movl	0xfb8c(%rsp), %r13d
    00002767: 	movl	0xfb84(%rsp), %eax
    0000276e: 	psrldq	$0x8, %xmm0
    00002773: 	movq	%r12, 0x28(%rsp)
    00002778: 	subl	%r11d, %edi
    0000277b: 	movl	0xfb90(%rsp), %r9d
    00002783: 	movl	%r13d, %esi
    00002786: 	paddd	%xmm0, %xmm3
    0000278a: 	subl	%r13d, %eax
    0000278d: 	imull	%edi, %ebp
    00002790: 	subl	0xfb94(%rsp), %esi
    00002797: 	imull	%eax, %edx
    0000279a: 	movl	%r9d, %ecx
    0000279d: 	subl	0xfb98(%rsp), %ecx
    000027a4: 	imull	%r14d, %eax
    000027a8: 	movdqa	%xmm4, %xmm0
    000027ac: 	imull	%r15d, %edi
    000027b0: 	psrldq	$0x8, %xmm0
    000027b5: 	subl	%edx, %ebp
    000027b7: 	imull	%ecx, %r8d
    000027bb: 	paddd	%xmm0, %xmm4
    000027bf: 	movl	%r15d, %edx
    000027c2: 	imull	%esi, %edx
    000027c5: 	movdqa	%xmm3, %xmm0
    000027c9: 	imull	%r14d, %esi
    000027cd: 	psrldq	$0x4, %xmm0
    000027d2: 	addl	%eax, %edi
    000027d4: 	movl	%r11d, %eax
    000027d7: 	subl	%r9d, %eax
    000027da: 	imull	%r15d, %ecx
    000027de: 	paddd	%xmm0, %xmm3
    000027e2: 	imull	%eax, %r10d
    000027e6: 	movdqa	%xmm4, %xmm0
    000027ea: 	imull	%r15d, %eax
    000027ee: 	psrldq	$0x4, %xmm0
    000027f3: 	paddd	%xmm0, %xmm4
    000027f7: 	subl	%edx, %r10d
    000027fa: 	movl	%r15d, %edx
    000027fd: 	addl	%eax, %esi
    000027ff: 	movl	0xfb94(%rsp), %eax
    00002806: 	subl	0xfb9c(%rsp), %eax
    0000280d: 	imull	%eax, %edx
    00002810: 	imull	%r14d, %eax
    00002814: 	subl	%edx, %r8d
    00002817: 	movl	0xfb84(%rsp), %edx
    0000281e: 	addl	%eax, %ecx
    00002820: 	movd	%xmm3, %eax
    00002824: 	addl	0x60(%rsp), %eax
    00002828: 	leal	(%rdx,%rdi,2), %edx
    0000282b: 	addl	%eax, %edx
    0000282d: 	leal	(%r13,%rdi,2), %eax
    00002832: 	movl	0x88(%rsp), %edi
    00002839: 	subl	%eax, %edx
    0000283b: 	leal	(%r13,%rsi,2), %eax
    00002840: 	addl	%edx, %eax
    00002842: 	movl	0xfb94(%rsp), %edx
    00002849: 	leal	(%rdx,%rsi,2), %edx
    0000284c: 	subl	%edx, %eax
    0000284e: 	movl	0xfb94(%rsp), %edx
    00002855: 	leal	(%rdx,%rcx,2), %edx
    00002858: 	addl	%edx, %eax
    0000285a: 	movl	0xfb9c(%rsp), %edx
    00002861: 	leal	(%rdx,%rcx,2), %edx
    00002864: 	subl	%edx, %eax
    00002866: 	movd	%xmm4, %edx
    0000286a: 	movl	%eax, %esi
    0000286c: 	movl	0xfb80(%rsp), %eax
    00002873: 	addl	%edx, %edi
    00002875: 	leal	(%rax,%rbp,2), %edx
    00002878: 	movl	0xfb98(%rsp), %eax
    0000287f: 	addl	%edx, %edi
    00002881: 	leal	(%r11,%rbp,2), %edx
    00002885: 	subl	%edx, %edi
    00002887: 	leal	(%r11,%r10,2), %edx
    0000288b: 	addl	%edx, %edi
    0000288d: 	leal	(%r9,%r10,2), %edx
    00002891: 	subl	%edx, %edi
    00002893: 	leal	(%r9,%r8,2), %edx
    00002897: 	addl	%edx, %edi
    00002899: 	leal	(%rax,%r8,2), %edx
    0000289d: 	subl	%edx, %edi
    0000289f: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 10399
    000028a4: 	testl	%eax, %eax
    000028a6: 	jg	.Ltmp2787 # Offset: 10406
.Ltmp2850:
    000028ac: 	addl	$0x1, 0x84(%rsp)
    000028b4: 	movl	0x84(%rsp), %eax
    000028bb: 	cmpl	iterations(%rip), %eax
    000028c1: 	jl	.Ltmp2788 # Offset: 10433
.Ltmp2785:
    000028c7: 	movq	0x18(%rsp), %rsi
    000028cc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000028d3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10451
    000028d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000028df: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000028e6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000028ed: 	je	.Ltmp2789 # Offset: 10477
.Ltmp2872:
    000028f3: 	movq	-0x20(%rax), %rbp
    000028f7: 	callq	clock@PLT # Offset: 10487
    000028fc: 	pxor	%xmm0, %xmm0
    00002900: 	movq	%rax, end_time(%rip)
    00002907: 	movq	%rbp, %rdi
    0000290a: 	subq	start_time(%rip), %rax
    00002911: 	cvtsi2sd	%rax, %xmm0
    00002916: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000291e: 	callq	_Z13record_resultdPKc # Offset: 10526
    00002923: 	movq	0x180(%rsp), %rdi
    0000292b: 	cmpq	0x20(%rsp), %rdi
    00002930: 	je	.Ltmp2790 # Offset: 10544
    00002932: 	movq	0x190(%rsp), %rax
    0000293a: 	leaq	0x1(%rax), %rsi
    0000293e: 	callq	_ZdlPvm@PLT # Offset: 10558
.Ltmp2790:
    00002943: 	movq	0x50(%rsp), %rsi
    00002948: 	movq	0x18(%rsp), %rdi
    0000294d: 	leaq	DATAat0x2b4b5(%rip), %rdx
    00002954: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10580
    00002959: 	callq	clock@PLT # Offset: 10585
    0000295e: 	movl	iterations(%rip), %esi
    00002964: 	movq	%rax, start_time(%rip)
    0000296b: 	testl	%esi, %esi
    0000296d: 	jle	.Ltmp2791 # Offset: 10605
    00002973: 	leaq	0x1a8(%rsp), %rax
    0000297b: 	movd	%r14d, %xmm3
    00002980: 	movd	%r15d, %xmm5
    00002985: 	movl	$0x0, 0x84(%rsp)
    00002990: 	movq	%rax, 0x58(%rsp)
    00002995: 	movq	0x10(%rsp), %rax
    0000299a: 	pshufd	$0x0, %xmm3, %xmm3
    0000299f: 	pshufd	$0x0, %xmm5, %xmm5
    000029a4: 	movaps	%xmm3, 0x40(%rsp)
    000029a9: 	psrlq	$0x20, %xmm3
    000029ae: 	addq	$0xf9e8, %rax
    000029b4: 	movaps	%xmm3, 0x90(%rsp)
    000029bc: 	movdqa	%xmm5, %xmm3
    000029c0: 	movq	%rax, 0x28(%rsp)
    000029c5: 	psrlq	$0x20, %xmm3
    000029ca: 	movaps	%xmm5, 0x30(%rsp)
    000029cf: 	movaps	%xmm3, (%rsp)
    000029d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2794:
    000029d8: 	movl	0x1a0(%rsp), %esi
    000029df: 	movl	%r14d, %edx
    000029e2: 	movl	%r15d, %eax
    000029e5: 	movl	%r15d, %r11d
    000029e8: 	movl	0x1ac(%rsp), %edi
    000029ef: 	movl	0x1a4(%rsp), %r9d
    000029f7: 	pxor	%xmm5, %xmm5
    000029fb: 	movl	0x1a8(%rsp), %r10d
    00002a03: 	movl	%esi, %r8d
    00002a06: 	movq	0x28(%rsp), %r12
    00002a0b: 	movdqa	%xmm5, %xmm2
    00002a0f: 	movl	%r9d, %ecx
    00002a12: 	movdqa	0x30(%rsp), %xmm14
    00002a19: 	movdqa	0x90(%rsp), %xmm13
    00002a23: 	subl	%r10d, %r8d
    00002a26: 	subl	%edi, %ecx
    00002a28: 	movdqa	0x40(%rsp), %xmm15
    00002a2f: 	imull	%ecx, %eax
    00002a32: 	imull	%r8d, %edx
    00002a36: 	imull	%r8d, %r11d
    00002a3a: 	subl	%eax, %edx
    00002a3c: 	movl	%r14d, %eax
    00002a3f: 	imull	%ecx, %eax
    00002a42: 	leal	(%rsi,%rdx,2), %esi
    00002a45: 	addl	%r8d, %esi
    00002a48: 	leal	(%r10,%rdx,2), %edx
    00002a4c: 	subl	%edx, %esi
    00002a4e: 	addl	%r11d, %eax
    00002a51: 	movl	%esi, 0x60(%rsp)
    00002a55: 	leal	(%r9,%rax,2), %edx
    00002a59: 	leal	(%rdi,%rax,2), %eax
    00002a5c: 	addl	%ecx, %edx
    00002a5e: 	subl	%eax, %edx
    00002a60: 	movq	0x58(%rsp), %rax
    00002a65: 	movl	%edx, 0x70(%rsp)
    00002a69: 	nopl	(%rax) # Size: 7
.Ltmp2792:
    00002a70: 	movdqu	(%rax), %xmm1
    00002a74: 	movdqu	0x10(%rax), %xmm6
    00002a79: 	movdqa	%xmm15, %xmm4
    00002a7e: 	movdqa	%xmm13, %xmm9
    00002a83: 	movdqa	-0x8(%rax), %xmm3
    00002a88: 	movdqa	(%rsp), %xmm12
    00002a8e: 	movdqa	%xmm14, %xmm11
    00002a93: 	addq	$0x20, %rax
    00002a97: 	movdqa	%xmm1, %xmm7
    00002a9b: 	shufps	$0xdd, %xmm6, %xmm1
    00002a9f: 	shufps	$0x88, %xmm6, %xmm7
    00002aa3: 	movdqa	%xmm3, %xmm8
    00002aa8: 	shufps	$0x88, -0x18(%rax), %xmm8
    00002aae: 	movdqa	%xmm8, %xmm6
    00002ab3: 	psubd	%xmm7, %xmm6
    00002ab7: 	shufps	$0xdd, -0x18(%rax), %xmm3
    00002abc: 	movdqa	%xmm3, %xmm0
    00002ac0: 	movdqa	%xmm6, %xmm10
    00002ac5: 	pmuludq	%xmm6, %xmm4
    00002ac9: 	psubd	%xmm1, %xmm0
    00002acd: 	psrlq	$0x20, %xmm10
    00002ad3: 	pmuludq	%xmm0, %xmm11
    00002ad8: 	pmuludq	%xmm10, %xmm9
    00002add: 	pmuludq	%xmm14, %xmm6
    00002ae2: 	pmuludq	(%rsp), %xmm10
    00002ae8: 	pshufd	$0x8, %xmm10, %xmm10
    00002aee: 	pshufd	$0x8, %xmm4, %xmm4
    00002af3: 	pshufd	$0x8, %xmm11, %xmm11
    00002af9: 	pshufd	$0x8, %xmm9, %xmm9
    00002aff: 	pshufd	$0x8, %xmm6, %xmm6
    00002b04: 	punpckldq	%xmm9, %xmm4
    00002b09: 	movdqa	%xmm0, %xmm9
    00002b0e: 	punpckldq	%xmm10, %xmm6
    00002b13: 	psrlq	$0x20, %xmm9
    00002b19: 	pmuludq	%xmm15, %xmm0
    00002b1e: 	pmuludq	%xmm9, %xmm12
    00002b23: 	pmuludq	%xmm13, %xmm9
    00002b28: 	pshufd	$0x8, %xmm0, %xmm0
    00002b2d: 	pshufd	$0x8, %xmm12, %xmm12
    00002b33: 	pshufd	$0x8, %xmm9, %xmm9
    00002b39: 	punpckldq	%xmm12, %xmm11
    00002b3e: 	punpckldq	%xmm9, %xmm0
    00002b43: 	psubd	%xmm11, %xmm4
    00002b48: 	paddd	%xmm6, %xmm0
    00002b4c: 	paddd	%xmm4, %xmm8
    00002b51: 	paddd	%xmm0, %xmm3
    00002b55: 	paddd	%xmm4, %xmm8
    00002b5a: 	paddd	%xmm0, %xmm3
    00002b5e: 	paddd	%xmm4, %xmm7
    00002b62: 	paddd	%xmm0, %xmm1
    00002b66: 	paddd	%xmm4, %xmm7
    00002b6a: 	paddd	%xmm0, %xmm1
    00002b6e: 	paddd	%xmm8, %xmm2
    00002b73: 	paddd	%xmm3, %xmm5
    00002b77: 	psubd	%xmm7, %xmm2
    00002b7b: 	psubd	%xmm1, %xmm5
    00002b7f: 	paddd	%xmm8, %xmm2
    00002b84: 	paddd	%xmm3, %xmm5
    00002b88: 	psubd	%xmm7, %xmm2
    00002b8c: 	psubd	%xmm1, %xmm5
    00002b90: 	cmpq	%r12, %rax
    00002b93: 	jne	.Ltmp2792 # Offset: 11155
    00002b99: 	movl	0xfb84(%rsp), %esi
    00002ba0: 	movl	%r14d, %ecx
    00002ba3: 	movl	%r15d, %r10d
    00002ba6: 	movl	%r15d, %ebp
    00002ba9: 	movl	0xfb8c(%rsp), %edi
    00002bb0: 	movq	%r12, 0x28(%rsp)
    00002bb5: 	movdqa	%xmm5, %xmm0
    00002bb9: 	movl	0xfb80(%rsp), %r9d
    00002bc1: 	movl	0xfb88(%rsp), %r8d
    00002bc9: 	movl	%esi, %edx
    00002bcb: 	psrldq	$0x8, %xmm0
    00002bd0: 	subl	%edi, %edx
    00002bd2: 	paddd	%xmm0, %xmm5
    00002bd6: 	movdqa	%xmm2, %xmm0
    00002bda: 	imull	%edx, %r10d
    00002bde: 	psrldq	$0x8, %xmm0
    00002be3: 	movl	%r9d, %eax
    00002be6: 	subl	%r8d, %eax
    00002be9: 	imull	%r14d, %edx
    00002bed: 	paddd	%xmm0, %xmm2
    00002bf1: 	imull	%eax, %ecx
    00002bf4: 	movdqa	%xmm5, %xmm0
    00002bf8: 	imull	%r15d, %eax
    00002bfc: 	psrldq	$0x4, %xmm0
    00002c01: 	paddd	%xmm0, %xmm5
    00002c05: 	movdqa	%xmm2, %xmm0
    00002c09: 	subl	%r10d, %ecx
    00002c0c: 	psrldq	$0x4, %xmm0
    00002c11: 	addl	%edx, %eax
    00002c13: 	leal	(%r9,%rcx,2), %r11d
    00002c17: 	leal	(%r8,%rcx,2), %r10d
    00002c1b: 	movl	%r8d, %r9d
    00002c1e: 	movl	0xfb94(%rsp), %ecx
    00002c25: 	leal	(%rsi,%rax,2), %r12d
    00002c29: 	leal	(%rdi,%rax,2), %r13d
    00002c2d: 	movl	%edi, %eax
    00002c2f: 	movl	0xfb90(%rsp), %esi
    00002c36: 	movl	%r14d, %edx
    00002c39: 	movl	%r12d, 0x8c(%rsp)
    00002c41: 	paddd	%xmm0, %xmm2
    00002c45: 	subl	%ecx, %eax
    00002c47: 	subl	%esi, %r9d
    00002c4a: 	imull	%eax, %ebp
    00002c4d: 	imull	%r9d, %edx
    00002c51: 	imull	%r14d, %eax
    00002c55: 	imull	%r15d, %r9d
    00002c59: 	subl	%ebp, %edx
    00002c5b: 	addl	%r9d, %eax
    00002c5e: 	leal	(%r8,%rdx,2), %r9d
    00002c62: 	leal	(%rsi,%rdx,2), %r8d
    00002c66: 	movl	%r14d, %edx
    00002c69: 	leal	(%rcx,%rax,2), %ebp
    00002c6c: 	leal	(%rdi,%rax,2), %edi
    00002c6f: 	movl	%esi, %eax
    00002c71: 	subl	0xfb98(%rsp), %eax
    00002c78: 	movl	%edi, 0x88(%rsp)
    00002c7f: 	movl	%eax, %edi
    00002c81: 	movl	%ecx, %eax
    00002c83: 	subl	0xfb9c(%rsp), %eax
    00002c8a: 	imull	%edi, %edx
    00002c8d: 	imull	%r15d, %edi
    00002c91: 	movl	%edx, %r12d
    00002c94: 	movl	%r15d, %edx
    00002c97: 	imull	%eax, %edx
    00002c9a: 	imull	%r14d, %eax
    00002c9e: 	subl	%edx, %r12d
    00002ca1: 	addl	%edi, %eax
    00002ca3: 	movl	0xfb98(%rsp), %edi
    00002caa: 	leal	(%rsi,%r12,2), %esi
    00002cae: 	leal	(%rcx,%rax,2), %ecx
    00002cb1: 	leal	(%rdi,%r12,2), %edx
    00002cb5: 	movl	0xfb9c(%rsp), %edi
    00002cbc: 	movl	0x8c(%rsp), %r12d
    00002cc4: 	leal	(%rdi,%rax,2), %edi
    00002cc7: 	movd	%xmm5, %eax
    00002ccb: 	addl	0x70(%rsp), %eax
    00002ccf: 	addl	%r12d, %eax
    00002cd2: 	subl	%r13d, %eax
    00002cd5: 	addl	%r12d, %eax
    00002cd8: 	subl	%r13d, %eax
    00002cdb: 	movl	0x88(%rsp), %r13d
    00002ce3: 	addl	%r13d, %eax
    00002ce6: 	subl	%ebp, %eax
    00002ce8: 	addl	%r13d, %eax
    00002ceb: 	subl	%ebp, %eax
    00002ced: 	addl	%ecx, %eax
    00002cef: 	subl	%edi, %eax
    00002cf1: 	leal	(%rax,%rcx), %ebp
    00002cf4: 	subl	%edi, %ebp
    00002cf6: 	movd	%xmm2, %edi
    00002cfa: 	addl	0x60(%rsp), %edi
    00002cfe: 	addl	%r11d, %edi
    00002d01: 	subl	%r10d, %edi
    00002d04: 	addl	%r11d, %edi
    00002d07: 	subl	%r10d, %edi
    00002d0a: 	addl	%r9d, %edi
    00002d0d: 	subl	%r8d, %edi
    00002d10: 	addl	%r9d, %edi
    00002d13: 	subl	%r8d, %edi
    00002d16: 	addl	%esi, %edi
    00002d18: 	subl	%edx, %edi
    00002d1a: 	addl	%esi, %edi
    00002d1c: 	movl	%ebp, %esi
    00002d1e: 	subl	%edx, %edi
    00002d20: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 11552
    00002d25: 	testl	%eax, %eax
    00002d27: 	jg	.Ltmp2793 # Offset: 11559
.Ltmp2849:
    00002d2d: 	addl	$0x1, 0x84(%rsp)
    00002d35: 	movl	0x84(%rsp), %eax
    00002d3c: 	cmpl	iterations(%rip), %eax
    00002d42: 	jl	.Ltmp2794 # Offset: 11586
.Ltmp2791:
    00002d48: 	movq	0x18(%rsp), %rsi
    00002d4d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002d54: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11604
    00002d59: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002d60: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002d67: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002d6e: 	je	.Ltmp2795 # Offset: 11630
.Ltmp2871:
    00002d74: 	movq	-0x20(%rax), %rbp
    00002d78: 	callq	clock@PLT # Offset: 11640
    00002d7d: 	pxor	%xmm0, %xmm0
    00002d81: 	movq	%rax, end_time(%rip)
    00002d88: 	movq	%rbp, %rdi
    00002d8b: 	subq	start_time(%rip), %rax
    00002d92: 	cvtsi2sd	%rax, %xmm0
    00002d97: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002d9f: 	callq	_Z13record_resultdPKc # Offset: 11679
    00002da4: 	movq	0x180(%rsp), %rdi
    00002dac: 	cmpq	0x20(%rsp), %rdi
    00002db1: 	je	.Ltmp2796 # Offset: 11697
    00002db3: 	movq	0x190(%rsp), %rax
    00002dbb: 	leaq	0x1(%rax), %rsi
    00002dbf: 	callq	_ZdlPvm@PLT # Offset: 11711
.Ltmp2796:
    00002dc4: 	movq	0x50(%rsp), %r15
    00002dc9: 	leaq	0x140(%rsp), %rdi
    00002dd1: 	leaq	DATAat0x2b4b0(%rip), %rdx
    00002dd8: 	movq	%r15, %rsi
    00002ddb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11739
    00002de0: 	movl	iterations(%rip), %edx
    00002de6: 	xorl	%r8d, %r8d
    00002de9: 	xorl	%ecx, %ecx
    00002deb: 	movl	$0x1f40, %esi
    00002df0: 	movq	0x140(%rsp), %rdi
    00002df8: 	callq	_Z9summarizePKciiii # Offset: 11768
    00002dfd: 	movq	0x18(%rsp), %rdi
    00002e02: 	leaq	DATAat0x2b4bc(%rip), %rdx
    00002e09: 	movq	%r15, %rsi
    00002e0c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11788
    00002e11: 	callq	clock@PLT # Offset: 11793
    00002e16: 	movl	iterations(%rip), %ecx
    00002e1c: 	xorl	%ebp, %ebp
    00002e1e: 	leaq	DATAat0x2b1d0(%rip), %r12
    00002e25: 	movq	%rax, start_time(%rip)
    00002e2c: 	testl	%ecx, %ecx
    00002e2e: 	jle	.Ltmp2797 # Offset: 11822
.Ltmp2800:
    00002e30: 	movq	0x10(%rsp), %rax
    00002e35: 	pxor	%xmm0, %xmm0
    00002e39: 	nopl	(%rax) # Size: 7
.Ltmp2798:
    00002e40: 	paddd	(%rax), %xmm0
    00002e44: 	addq	$0x10, %rax
    00002e48: 	cmpq	%rax, %rbx
    00002e4b: 	jne	.Ltmp2798 # Offset: 11851
    00002e4d: 	pshufd	$0xff, %xmm0, %xmm1
    00002e52: 	movd	%xmm1, %esi
    00002e56: 	pshufd	$0x55, %xmm0, %xmm1
    00002e5b: 	movd	%xmm1, %eax
    00002e5f: 	movdqa	%xmm0, %xmm1
    00002e63: 	punpckhdq	%xmm0, %xmm1
    00002e67: 	addl	%eax, %esi
    00002e69: 	movd	%xmm0, %eax
    00002e6d: 	movd	%xmm1, %edi
    00002e71: 	addl	%eax, %edi
    00002e73: 	cvttsd2si	init_value(%rip), %eax
    00002e7b: 	imull	$0x1f40, %eax, %eax
    00002e81: 	subl	%eax, %edi
    00002e83: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 11907
    00002e88: 	testl	%eax, %eax
    00002e8a: 	jg	.Ltmp2799 # Offset: 11914
.Ltmp2848:
    00002e90: 	addl	$0x1, %ebp
    00002e93: 	cmpl	iterations(%rip), %ebp
    00002e99: 	jl	.Ltmp2800 # Offset: 11929
.Ltmp2797:
    00002e9b: 	movq	0x18(%rsp), %rsi
    00002ea0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002ea7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11943
    00002eac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002eb3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002eba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002ec1: 	je	.Ltmp2801 # Offset: 11969
.Ltmp2870:
    00002ec7: 	movq	-0x20(%rax), %rbp
    00002ecb: 	callq	clock@PLT # Offset: 11979
    00002ed0: 	pxor	%xmm0, %xmm0
    00002ed4: 	movq	%rax, end_time(%rip)
    00002edb: 	movq	%rbp, %rdi
    00002ede: 	subq	start_time(%rip), %rax
    00002ee5: 	cvtsi2sd	%rax, %xmm0
    00002eea: 	divsd	DATAat0x2b628(%rip), %xmm0
    00002ef2: 	callq	_Z13record_resultdPKc # Offset: 12018
    00002ef7: 	movq	0x180(%rsp), %rdi
    00002eff: 	cmpq	0x20(%rsp), %rdi
    00002f04: 	je	.Ltmp2802 # Offset: 12036
    00002f06: 	movq	0x190(%rsp), %rax
    00002f0e: 	leaq	0x1(%rax), %rsi
    00002f12: 	callq	_ZdlPvm@PLT # Offset: 12050
.Ltmp2802:
    00002f17: 	movq	0x50(%rsp), %rsi
    00002f1c: 	movq	0x18(%rsp), %rdi
    00002f21: 	leaq	DATAat0x2b4c2(%rip), %rdx
    00002f28: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12072
    00002f2d: 	callq	clock@PLT # Offset: 12077
    00002f32: 	movl	iterations(%rip), %edx
    00002f38: 	xorl	%ebp, %ebp
    00002f3a: 	leaq	DATAat0x2b1d0(%rip), %r12
    00002f41: 	movq	%rax, start_time(%rip)
    00002f48: 	testl	%edx, %edx
    00002f4a: 	jle	.Ltmp2803 # Offset: 12106
    00002f4c: 	nopl	(%rax) # Size: 4
.Ltmp2806:
    00002f50: 	movq	0x10(%rsp), %rax
    00002f55: 	pxor	%xmm0, %xmm0
    00002f59: 	nopl	(%rax) # Size: 7
.Ltmp2804:
    00002f60: 	paddd	(%rax), %xmm0
    00002f64: 	addq	$0x10, %rax
    00002f68: 	cmpq	%rax, %rbx
    00002f6b: 	jne	.Ltmp2804 # Offset: 12139
    00002f6d: 	pshufd	$0xff, %xmm0, %xmm1
    00002f72: 	movd	%xmm1, %esi
    00002f76: 	pshufd	$0x55, %xmm0, %xmm1
    00002f7b: 	movd	%xmm1, %eax
    00002f7f: 	movdqa	%xmm0, %xmm1
    00002f83: 	punpckhdq	%xmm0, %xmm1
    00002f87: 	addl	%eax, %esi
    00002f89: 	movd	%xmm0, %eax
    00002f8d: 	movd	%xmm1, %edi
    00002f91: 	addl	%eax, %edi
    00002f93: 	cvttsd2si	init_value(%rip), %eax
    00002f9b: 	imull	$0x1f40, %eax, %eax
    00002fa1: 	subl	%eax, %edi
    00002fa3: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 12195
    00002fa8: 	testl	%eax, %eax
    00002faa: 	jg	.Ltmp2805 # Offset: 12202
.Ltmp2847:
    00002fb0: 	addl	$0x1, %ebp
    00002fb3: 	cmpl	iterations(%rip), %ebp
    00002fb9: 	jl	.Ltmp2806 # Offset: 12217
.Ltmp2803:
    00002fbb: 	movq	0x18(%rsp), %rsi
    00002fc0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002fc7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12231
    00002fcc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002fd3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002fda: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002fe1: 	je	.Ltmp2807 # Offset: 12257
.Ltmp2869:
    00002fe7: 	movq	-0x20(%rax), %rbp
    00002feb: 	callq	clock@PLT # Offset: 12267
    00002ff0: 	pxor	%xmm0, %xmm0
    00002ff4: 	movq	%rax, end_time(%rip)
    00002ffb: 	movq	%rbp, %rdi
    00002ffe: 	subq	start_time(%rip), %rax
    00003005: 	cvtsi2sd	%rax, %xmm0
    0000300a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003012: 	callq	_Z13record_resultdPKc # Offset: 12306
    00003017: 	movq	0x180(%rsp), %rdi
    0000301f: 	cmpq	0x20(%rsp), %rdi
    00003024: 	je	.Ltmp2808 # Offset: 12324
    00003026: 	movq	0x190(%rsp), %rax
    0000302e: 	leaq	0x1(%rax), %rsi
    00003032: 	callq	_ZdlPvm@PLT # Offset: 12338
.Ltmp2808:
    00003037: 	movq	0x50(%rsp), %rsi
    0000303c: 	movq	0x18(%rsp), %rdi
    00003041: 	leaq	DATAat0x2b4cc(%rip), %rdx
    00003048: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12360
    0000304d: 	callq	clock@PLT # Offset: 12365
    00003052: 	xorl	%ebp, %ebp
    00003054: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000305b: 	movq	%rax, start_time(%rip)
    00003062: 	movl	iterations(%rip), %eax
    00003068: 	testl	%eax, %eax
    0000306a: 	jle	.Ltmp2809 # Offset: 12394
    0000306c: 	nopl	(%rax) # Size: 4
.Ltmp2812:
    00003070: 	movq	0x10(%rsp), %rax
    00003075: 	pxor	%xmm0, %xmm0
    00003079: 	nopl	(%rax) # Size: 7
.Ltmp2810:
    00003080: 	paddd	(%rax), %xmm0
    00003084: 	addq	$0x10, %rax
    00003088: 	cmpq	%rax, %rbx
    0000308b: 	jne	.Ltmp2810 # Offset: 12427
    0000308d: 	pshufd	$0xff, %xmm0, %xmm1
    00003092: 	movd	%xmm1, %esi
    00003096: 	pshufd	$0x55, %xmm0, %xmm1
    0000309b: 	movd	%xmm1, %eax
    0000309f: 	movdqa	%xmm0, %xmm1
    000030a3: 	punpckhdq	%xmm0, %xmm1
    000030a7: 	addl	%eax, %esi
    000030a9: 	movd	%xmm0, %eax
    000030ad: 	movd	%xmm1, %edi
    000030b1: 	addl	%eax, %edi
    000030b3: 	cvttsd2si	init_value(%rip), %eax
    000030bb: 	imull	$0x1f40, %eax, %eax
    000030c1: 	subl	%eax, %edi
    000030c3: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 12483
    000030c8: 	testl	%eax, %eax
    000030ca: 	jg	.Ltmp2811 # Offset: 12490
.Ltmp2846:
    000030d0: 	addl	$0x1, %ebp
    000030d3: 	cmpl	iterations(%rip), %ebp
    000030d9: 	jl	.Ltmp2812 # Offset: 12505
.Ltmp2809:
    000030db: 	movq	0x18(%rsp), %rsi
    000030e0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000030e7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12519
    000030ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000030f3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000030fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003101: 	je	.Ltmp2813 # Offset: 12545
.Ltmp2868:
    00003107: 	movq	-0x20(%rax), %rbp
    0000310b: 	callq	clock@PLT # Offset: 12555
    00003110: 	pxor	%xmm0, %xmm0
    00003114: 	movq	%rax, end_time(%rip)
    0000311b: 	movq	%rbp, %rdi
    0000311e: 	subq	start_time(%rip), %rax
    00003125: 	cvtsi2sd	%rax, %xmm0
    0000312a: 	divsd	DATAat0x2b628(%rip), %xmm0
    00003132: 	callq	_Z13record_resultdPKc # Offset: 12594
    00003137: 	movq	0x180(%rsp), %rdi
    0000313f: 	cmpq	0x20(%rsp), %rdi
    00003144: 	je	.Ltmp2814 # Offset: 12612
    00003146: 	movq	0x190(%rsp), %rax
    0000314e: 	leaq	0x1(%rax), %rsi
    00003152: 	callq	_ZdlPvm@PLT # Offset: 12626
.Ltmp2814:
    00003157: 	movq	0x18(%rsp), %rbx
    0000315c: 	movq	0x50(%rsp), %rsi
    00003161: 	leaq	DATAat0x2b4db(%rip), %rdx
    00003168: 	movq	%rbx, %rdi
    0000316b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12651
    00003170: 	movq	0x10(%rsp), %rdi
    00003175: 	movq	%rbx, %rdx
    00003178: 	movl	$0x1f40, %esi
    0000317d: 	callq	_Z13test_constantISt7complexIiE13custom_negateIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12669
    00003182: 	movq	0x180(%rsp), %rdi
    0000318a: 	cmpq	0x20(%rsp), %rdi
    0000318f: 	je	.Ltmp2815 # Offset: 12687
    00003191: 	movq	0x190(%rsp), %rax
    00003199: 	leaq	0x1(%rax), %rsi
    0000319d: 	callq	_ZdlPvm@PLT # Offset: 12701
.Ltmp2815:
    000031a2: 	movq	0x18(%rsp), %rbx
    000031a7: 	movq	0x50(%rsp), %rsi
    000031ac: 	leaq	DATAat0x2b4e3(%rip), %rdx
    000031b3: 	movq	%rbx, %rdi
    000031b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12726
    000031bb: 	movq	0x10(%rsp), %rdi
    000031c0: 	movq	%rbx, %rdx
    000031c3: 	movl	$0x1f40, %esi
    000031c8: 	callq	_Z13test_constantISt7complexIiE19custom_negate_twiceIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12744
    000031cd: 	movq	0x180(%rsp), %rdi
    000031d5: 	cmpq	0x20(%rsp), %rdi
    000031da: 	je	.Ltmp2816 # Offset: 12762
    000031dc: 	movq	0x190(%rsp), %rax
    000031e4: 	leaq	0x1(%rax), %rsi
    000031e8: 	callq	_ZdlPvm@PLT # Offset: 12776
.Ltmp2816:
    000031ed: 	movq	0x18(%rsp), %rbx
    000031f2: 	movq	0x50(%rsp), %rsi
    000031f7: 	leaq	DATAat0x2b4f1(%rip), %rdx
    000031fe: 	movq	%rbx, %rdi
    00003201: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12801
    00003206: 	movq	0x10(%rsp), %rdi
    0000320b: 	movq	%rbx, %rdx
    0000320e: 	movl	$0x1f40, %esi
    00003213: 	callq	_Z13test_constantISt7complexIiE17custom_zero_minusIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12819
    00003218: 	movq	0x180(%rsp), %rdi
    00003220: 	cmpq	0x20(%rsp), %rdi
    00003225: 	je	.Ltmp2817 # Offset: 12837
    00003227: 	movq	0x190(%rsp), %rax
    0000322f: 	leaq	0x1(%rax), %rsi
    00003233: 	callq	_ZdlPvm@PLT # Offset: 12851
.Ltmp2817:
    00003238: 	movq	0x18(%rsp), %rbx
    0000323d: 	movq	0x50(%rsp), %rsi
    00003242: 	leaq	DATAat0x2b4fd(%rip), %rdx
    00003249: 	movq	%rbx, %rdi
    0000324c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12876
    00003251: 	movq	0x10(%rsp), %rdi
    00003256: 	movq	%rbx, %rdx
    00003259: 	movl	$0x1f40, %esi
    0000325e: 	callq	_Z13test_constantISt7complexIiE16custom_times_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12894
    00003263: 	movq	0x180(%rsp), %rdi
    0000326b: 	cmpq	0x20(%rsp), %rdi
    00003270: 	je	.Ltmp2818 # Offset: 12912
    00003272: 	movq	0x190(%rsp), %rax
    0000327a: 	leaq	0x1(%rax), %rsi
    0000327e: 	callq	_ZdlPvm@PLT # Offset: 12926
.Ltmp2818:
    00003283: 	movq	0x18(%rsp), %rbx
    00003288: 	movq	0x50(%rsp), %rsi
    0000328d: 	leaq	DATAat0x2b508(%rip), %rdx
    00003294: 	movq	%rbx, %rdi
    00003297: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12951
    0000329c: 	movq	0x10(%rsp), %rdi
    000032a1: 	movq	%rbx, %rdx
    000032a4: 	movl	$0x1f40, %esi
    000032a9: 	callq	_Z13test_constantISt7complexIiE19custom_divideby_oneIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12969
    000032ae: 	movq	0x180(%rsp), %rdi
    000032b6: 	cmpq	0x20(%rsp), %rdi
    000032bb: 	je	.Ltmp2819 # Offset: 12987
    000032bd: 	movq	0x190(%rsp), %rax
    000032c5: 	leaq	0x1(%rax), %rsi
    000032c9: 	callq	_ZdlPvm@PLT # Offset: 13001
.Ltmp2819:
    000032ce: 	movq	0x18(%rsp), %rbx
    000032d3: 	movq	0x50(%rsp), %rsi
    000032d8: 	leaq	DATAat0x2b517(%rip), %rdx
    000032df: 	movq	%rbx, %rdi
    000032e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13026
    000032e7: 	movq	0x10(%rsp), %rdi
    000032ec: 	movq	%rbx, %rdx
    000032ef: 	movl	$0x1f40, %esi
    000032f4: 	callq	_Z13test_constantISt7complexIiE20custom_algebra_mixedIS1_EEvPT_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13044
    000032f9: 	movq	0x180(%rsp), %rdi
    00003301: 	cmpq	0x20(%rsp), %rdi
    00003306: 	je	.Ltmp2820 # Offset: 13062
    00003308: 	movq	0x190(%rsp), %rax
    00003310: 	leaq	0x1(%rax), %rsi
    00003314: 	callq	_ZdlPvm@PLT # Offset: 13076
.Ltmp2820:
    00003319: 	movq	0x50(%rsp), %rbx
    0000331e: 	leaq	0x160(%rsp), %rdi
    00003326: 	leaq	DATAat0x2b526(%rip), %rdx
    0000332d: 	movq	%rbx, %rsi
    00003330: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13104
    00003335: 	movl	iterations(%rip), %edx
    0000333b: 	xorl	%r8d, %r8d
    0000333e: 	xorl	%ecx, %ecx
    00003340: 	movl	$0x1f40, %esi
    00003345: 	movq	0x160(%rsp), %rdi
    0000334d: 	callq	_Z9summarizePKciiii # Offset: 13133
    00003352: 	movq	0x18(%rsp), %rdi
    00003357: 	leaq	DATAat0x2b4c6(%rip), %rdx
    0000335e: 	movq	%rbx, %rsi
    00003361: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13153
    00003366: 	callq	clock@PLT # Offset: 13158
    0000336b: 	movl	iterations(%rip), %ebp
    00003371: 	xorl	%ebx, %ebx
    00003373: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000337a: 	movq	%rax, start_time(%rip)
    00003381: 	testl	%ebp, %ebp
    00003383: 	jg	.Ltmp2821 # Offset: 13187
    00003385: 	jmp	.Ltmp2822 # Offset: 13189
    00003387: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2823:
    00003390: 	addl	$0x1, %ebx
    00003393: 	cmpl	%ebp, %ebx
    00003395: 	jge	.Ltmp2822 # Offset: 13205
.Ltmp2821:
    00003397: 	xorl	%esi, %esi
    00003399: 	xorl	%edi, %edi
    0000339b: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 13211
    000033a0: 	testl	%eax, %eax
    000033a2: 	jle	.Ltmp2823 # Offset: 13218
    000033a4: 	movl	current_test(%rip), %edx
    000033aa: 	movq	%r12, %rsi
    000033ad: 	movl	$0x1, %edi
    000033b2: 	xorl	%eax, %eax
    000033b4: 	callq	__printf_chk@PLT # Offset: 13236
    000033b9: 	movl	iterations(%rip), %ebp
    000033bf: 	addl	$0x1, %ebx
    000033c2: 	cmpl	%ebp, %ebx
    000033c4: 	jl	.Ltmp2821 # Offset: 13252
.Ltmp2822:
    000033c6: 	movq	0x18(%rsp), %rsi
    000033cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000033d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13266
    000033d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000033de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000033e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000033ec: 	je	.Ltmp2824 # Offset: 13292
.Ltmp2867:
    000033f2: 	movq	-0x20(%rax), %rbp
    000033f6: 	callq	clock@PLT # Offset: 13302
    000033fb: 	pxor	%xmm0, %xmm0
    000033ff: 	movq	%rax, end_time(%rip)
    00003406: 	movq	%rbp, %rdi
    00003409: 	subq	start_time(%rip), %rax
    00003410: 	cvtsi2sd	%rax, %xmm0
    00003415: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000341d: 	callq	_Z13record_resultdPKc # Offset: 13341
    00003422: 	movq	0x180(%rsp), %rdi
    0000342a: 	cmpq	0x20(%rsp), %rdi
    0000342f: 	je	.Ltmp2825 # Offset: 13359
    00003431: 	movq	0x190(%rsp), %rax
    00003439: 	leaq	0x1(%rax), %rsi
    0000343d: 	callq	_ZdlPvm@PLT # Offset: 13373
.Ltmp2825:
    00003442: 	movq	0x50(%rsp), %rsi
    00003447: 	movq	0x18(%rsp), %rdi
    0000344c: 	leaq	DATAat0x2b540(%rip), %rdx
    00003453: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13395
    00003458: 	callq	clock@PLT # Offset: 13400
    0000345d: 	movl	iterations(%rip), %ebp
    00003463: 	xorl	%ebx, %ebx
    00003465: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000346c: 	movq	%rax, start_time(%rip)
    00003473: 	testl	%ebp, %ebp
    00003475: 	jg	.Ltmp2826 # Offset: 13429
    00003477: 	jmp	.Ltmp2827 # Offset: 13431
    00003479: 	nopl	(%rax) # Size: 7
.Ltmp2828:
    00003480: 	addl	$0x1, %ebx
    00003483: 	cmpl	%ebp, %ebx
    00003485: 	jge	.Ltmp2827 # Offset: 13445
.Ltmp2826:
    00003487: 	xorl	%esi, %esi
    00003489: 	xorl	%edi, %edi
    0000348b: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 13451
    00003490: 	testl	%eax, %eax
    00003492: 	jle	.Ltmp2828 # Offset: 13458
    00003494: 	movl	current_test(%rip), %edx
    0000349a: 	movq	%r12, %rsi
    0000349d: 	movl	$0x1, %edi
    000034a2: 	xorl	%eax, %eax
    000034a4: 	callq	__printf_chk@PLT # Offset: 13476
    000034a9: 	movl	iterations(%rip), %ebp
    000034af: 	addl	$0x1, %ebx
    000034b2: 	cmpl	%ebp, %ebx
    000034b4: 	jl	.Ltmp2826 # Offset: 13492
.Ltmp2827:
    000034b6: 	movq	0x18(%rsp), %rsi
    000034bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000034c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13506
    000034c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000034ce: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000034d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000034dc: 	je	.Ltmp2829 # Offset: 13532
.Ltmp2866:
    000034e2: 	movq	-0x20(%rax), %rbp
    000034e6: 	callq	clock@PLT # Offset: 13542
    000034eb: 	pxor	%xmm0, %xmm0
    000034ef: 	movq	%rax, end_time(%rip)
    000034f6: 	movq	%rbp, %rdi
    000034f9: 	subq	start_time(%rip), %rax
    00003500: 	cvtsi2sd	%rax, %xmm0
    00003505: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000350d: 	callq	_Z13record_resultdPKc # Offset: 13581
    00003512: 	movq	0x180(%rsp), %rdi
    0000351a: 	cmpq	0x20(%rsp), %rdi
    0000351f: 	je	.Ltmp2830 # Offset: 13599
    00003521: 	movq	0x190(%rsp), %rax
    00003529: 	leaq	0x1(%rax), %rsi
    0000352d: 	callq	_ZdlPvm@PLT # Offset: 13613
.Ltmp2830:
    00003532: 	movq	0x50(%rsp), %rsi
    00003537: 	movq	0x18(%rsp), %rdi
    0000353c: 	leaq	DATAat0x2b54c(%rip), %rdx
    00003543: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13635
    00003548: 	callq	clock@PLT # Offset: 13640
    0000354d: 	movl	iterations(%rip), %ebp
    00003553: 	xorl	%ebx, %ebx
    00003555: 	leaq	DATAat0x2b1d0(%rip), %r12
    0000355c: 	movq	%rax, start_time(%rip)
    00003563: 	testl	%ebp, %ebp
    00003565: 	jg	.Ltmp2831 # Offset: 13669
    00003567: 	jmp	.Ltmp2832 # Offset: 13671
    00003569: 	nopl	(%rax) # Size: 7
.Ltmp2833:
    00003570: 	addl	$0x1, %ebx
    00003573: 	cmpl	%ebp, %ebx
    00003575: 	jge	.Ltmp2832 # Offset: 13685
.Ltmp2831:
    00003577: 	xorl	%esi, %esi
    00003579: 	xorl	%edi, %edi
    0000357b: 	callq	"_ZSt13__complex_absIiET_RKSt7complexIS0_E.isra.0/1" # Offset: 13691
    00003580: 	testl	%eax, %eax
    00003582: 	jle	.Ltmp2833 # Offset: 13698
    00003584: 	movl	current_test(%rip), %edx
    0000358a: 	movq	%r12, %rsi
    0000358d: 	movl	$0x1, %edi
    00003592: 	xorl	%eax, %eax
    00003594: 	callq	__printf_chk@PLT # Offset: 13716
    00003599: 	movl	iterations(%rip), %ebp
    0000359f: 	addl	$0x1, %ebx
    000035a2: 	cmpl	%ebp, %ebx
    000035a4: 	jl	.Ltmp2831 # Offset: 13732
.Ltmp2832:
    000035a6: 	movq	0x18(%rsp), %rsi
    000035ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000035b2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13746
    000035b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000035be: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000035c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000035cc: 	je	.Ltmp2834 # Offset: 13772
.Ltmp2865:
    000035d2: 	movq	-0x20(%rax), %rbp
    000035d6: 	callq	clock@PLT # Offset: 13782
    000035db: 	pxor	%xmm0, %xmm0
    000035df: 	movq	%rax, end_time(%rip)
    000035e6: 	movq	%rbp, %rdi
    000035e9: 	subq	start_time(%rip), %rax
    000035f0: 	cvtsi2sd	%rax, %xmm0
    000035f5: 	divsd	DATAat0x2b628(%rip), %xmm0
    000035fd: 	callq	_Z13record_resultdPKc # Offset: 13821
    00003602: 	movq	0x180(%rsp), %rdi
    0000360a: 	cmpq	0x20(%rsp), %rdi
    0000360f: 	je	.Ltmp2835 # Offset: 13839
    00003611: 	movq	0x190(%rsp), %rax
    00003619: 	leaq	0x1(%rax), %rsi
    0000361d: 	callq	_ZdlPvm@PLT # Offset: 13853
.Ltmp2835:
    00003622: 	movq	0x18(%rsp), %rbx
    00003627: 	movq	0x50(%rsp), %rsi
    0000362c: 	leaq	DATAat0x2b55b(%rip), %rdx
    00003633: 	movq	%rbx, %rdi
    00003636: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13878
    0000363b: 	callq	clock@PLT # Offset: 13883
    00003640: 	movq	%rbx, %rsi
    00003643: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000364a: 	movq	%rax, start_time(%rip)
    00003651: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13905
    00003656: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000365d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003664: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000366b: 	je	.Ltmp2836 # Offset: 13931
.Ltmp2864:
    00003671: 	movq	-0x20(%rax), %rbp
    00003675: 	callq	clock@PLT # Offset: 13941
    0000367a: 	pxor	%xmm0, %xmm0
    0000367e: 	movq	%rax, end_time(%rip)
    00003685: 	movq	%rbp, %rdi
    00003688: 	subq	start_time(%rip), %rax
    0000368f: 	cvtsi2sd	%rax, %xmm0
    00003694: 	divsd	DATAat0x2b628(%rip), %xmm0
    0000369c: 	callq	_Z13record_resultdPKc # Offset: 13980
    000036a1: 	movq	0x180(%rsp), %rdi
    000036a9: 	cmpq	0x20(%rsp), %rdi
    000036ae: 	je	.Ltmp2837 # Offset: 13998
    000036b0: 	movq	0x190(%rsp), %rax
    000036b8: 	leaq	0x1(%rax), %rsi
    000036bc: 	callq	_ZdlPvm@PLT # Offset: 14012
.Ltmp2837:
    000036c1: 	movq	0x50(%rsp), %rsi
    000036c6: 	movq	0x18(%rsp), %rdi
    000036cb: 	leaq	DATAat0x2b5d0(%rip), %rdx
    000036d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14034
    000036d7: 	movl	iterations(%rip), %edx
    000036dd: 	xorl	%r8d, %r8d
    000036e0: 	xorl	%ecx, %ecx
    000036e2: 	movl	$0x1f40, %esi
    000036e7: 	movq	0x180(%rsp), %rdi
    000036ef: 	callq	_Z9summarizePKciiii # Offset: 14063
    000036f4: 	movq	0x180(%rsp), %rdi
    000036fc: 	cmpq	0x20(%rsp), %rdi
    00003701: 	je	.Ltmp2838 # Offset: 14081
    00003703: 	movq	0x190(%rsp), %rax
    0000370b: 	leaq	0x1(%rax), %rsi
    0000370f: 	callq	_ZdlPvm@PLT # Offset: 14095
.Ltmp2838:
    00003714: 	movq	0x160(%rsp), %rdi
    0000371c: 	leaq	0x170(%rsp), %rax
    00003724: 	cmpq	%rax, %rdi
    00003727: 	je	.Ltmp2839 # Offset: 14119
    00003729: 	movq	0x170(%rsp), %rax
    00003731: 	leaq	0x1(%rax), %rsi
    00003735: 	callq	_ZdlPvm@PLT # Offset: 14133
.Ltmp2839:
    0000373a: 	movq	0x140(%rsp), %rdi
    00003742: 	leaq	0x150(%rsp), %rax
    0000374a: 	cmpq	%rax, %rdi
    0000374d: 	je	.Ltmp2840 # Offset: 14157
    0000374f: 	movq	0x150(%rsp), %rax
    00003757: 	leaq	0x1(%rax), %rsi
    0000375b: 	callq	_ZdlPvm@PLT # Offset: 14171
.Ltmp2840:
    00003760: 	movq	0x120(%rsp), %rdi
    00003768: 	leaq	0x130(%rsp), %rax
    00003770: 	cmpq	%rax, %rdi
    00003773: 	je	.Ltmp2841 # Offset: 14195
    00003775: 	movq	0x130(%rsp), %rax
    0000377d: 	leaq	0x1(%rax), %rsi
    00003781: 	callq	_ZdlPvm@PLT # Offset: 14209
.Ltmp2841:
    00003786: 	movq	0x100(%rsp), %rdi
    0000378e: 	leaq	0x110(%rsp), %rax
    00003796: 	cmpq	%rax, %rdi
    00003799: 	je	.Ltmp2842 # Offset: 14233
    0000379b: 	movq	0x110(%rsp), %rax
    000037a3: 	leaq	0x1(%rax), %rsi
    000037a7: 	callq	_ZdlPvm@PLT # Offset: 14247
.Ltmp2842:
    000037ac: 	movq	0xe0(%rsp), %rdi
    000037b4: 	leaq	0xf0(%rsp), %rax
    000037bc: 	cmpq	%rax, %rdi
    000037bf: 	je	.Ltmp2843 # Offset: 14271
    000037c1: 	movq	0xf0(%rsp), %rax
    000037c9: 	leaq	0x1(%rax), %rsi
    000037cd: 	callq	_ZdlPvm@PLT # Offset: 14285
.Ltmp2843:
    000037d2: 	movq	0xc0(%rsp), %rdi
    000037da: 	leaq	0xd0(%rsp), %rax
    000037e2: 	cmpq	%rax, %rdi
    000037e5: 	je	.Ltmp2844 # Offset: 14309
    000037e7: 	movq	0xd0(%rsp), %rax
    000037ef: 	leaq	0x1(%rax), %rsi
    000037f3: 	callq	_ZdlPvm@PLT # Offset: 14323
.Ltmp2844:
    000037f8: 	movq	0xfba8(%rsp), %rax
    00003800: 	subq	%fs:0x28, %rax
    00003809: 	jne	.Ltmp2845 # Offset: 14345
    0000380f: 	addq	$0xfbb8, %rsp
    00003816: 	popq	%rbx
    00003817: 	popq	%rbp
    00003818: 	popq	%r12
    0000381a: 	popq	%r13
    0000381c: 	popq	%r14
    0000381e: 	popq	%r15
    00003820: 	retq # Offset: 14368
    00003821: 	nopl	(%rax) # Size: 7
.Ltmp2811:
    00003828: 	movl	current_test(%rip), %edx
    0000382e: 	movq	%r12, %rsi
    00003831: 	movl	$0x1, %edi
    00003836: 	xorl	%eax, %eax
    00003838: 	callq	__printf_chk@PLT # Offset: 14392
    0000383d: 	jmp	.Ltmp2846 # Offset: 14397
    00003842: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2805:
    00003848: 	movl	current_test(%rip), %edx
    0000384e: 	movq	%r12, %rsi
    00003851: 	movl	$0x1, %edi
    00003856: 	xorl	%eax, %eax
    00003858: 	callq	__printf_chk@PLT # Offset: 14424
    0000385d: 	jmp	.Ltmp2847 # Offset: 14429
    00003862: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2799:
    00003868: 	movl	current_test(%rip), %edx
    0000386e: 	movq	%r12, %rsi
    00003871: 	movl	$0x1, %edi
    00003876: 	xorl	%eax, %eax
    00003878: 	callq	__printf_chk@PLT # Offset: 14456
    0000387d: 	jmp	.Ltmp2848 # Offset: 14461
    00003882: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2793:
    00003888: 	movl	current_test(%rip), %edx
    0000388e: 	leaq	DATAat0x2b1d0(%rip), %rsi
    00003895: 	movl	$0x1, %edi
    0000389a: 	xorl	%eax, %eax
    0000389c: 	callq	__printf_chk@PLT # Offset: 14492
    000038a1: 	jmp	.Ltmp2849 # Offset: 14497
    000038a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2787:
    000038b0: 	movl	current_test(%rip), %edx
    000038b6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000038bd: 	movl	$0x1, %edi
    000038c2: 	xorl	%eax, %eax
    000038c4: 	callq	__printf_chk@PLT # Offset: 14532
    000038c9: 	jmp	.Ltmp2850 # Offset: 14537
    000038ce: 	nop # Size: 2
.Ltmp2781:
    000038d0: 	movl	current_test(%rip), %edx
    000038d6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000038dd: 	movl	$0x1, %edi
    000038e2: 	xorl	%eax, %eax
    000038e4: 	callq	__printf_chk@PLT # Offset: 14564
    000038e9: 	jmp	.Ltmp2851 # Offset: 14569
    000038ee: 	nop # Size: 2
.Ltmp2775:
    000038f0: 	movl	current_test(%rip), %edx
    000038f6: 	movq	%r13, %rsi
    000038f9: 	movl	$0x1, %edi
    000038fe: 	xorl	%eax, %eax
    00003900: 	callq	__printf_chk@PLT # Offset: 14592
    00003905: 	jmp	.Ltmp2852 # Offset: 14597
    0000390a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2765:
    00003910: 	movl	current_test(%rip), %edx
    00003916: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000391d: 	movl	$0x1, %edi
    00003922: 	xorl	%eax, %eax
    00003924: 	callq	__printf_chk@PLT # Offset: 14628
    00003929: 	jmp	.Ltmp2853 # Offset: 14633
    0000392e: 	nop # Size: 2
.Ltmp2756:
    00003930: 	movl	current_test(%rip), %edx
    00003936: 	movq	%r12, %rsi
    00003939: 	movl	$0x1, %edi
    0000393e: 	xorl	%eax, %eax
    00003940: 	callq	__printf_chk@PLT # Offset: 14656
    00003945: 	jmp	.Ltmp2854 # Offset: 14661
    0000394a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2750:
    00003950: 	movl	current_test(%rip), %edx
    00003956: 	movq	%r13, %rsi
    00003959: 	movl	$0x1, %edi
    0000395e: 	xorl	%eax, %eax
    00003960: 	callq	__printf_chk@PLT # Offset: 14688
    00003965: 	jmp	.Ltmp2855 # Offset: 14693
    0000396a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2744:
    00003970: 	movl	current_test(%rip), %edx
    00003976: 	leaq	DATAat0x2b1d0(%rip), %rsi
    0000397d: 	movl	$0x1, %edi
    00003982: 	xorl	%eax, %eax
    00003984: 	callq	__printf_chk@PLT # Offset: 14724
    00003989: 	jmp	.Ltmp2856 # Offset: 14729
    0000398e: 	nop # Size: 2
.Ltmp2738:
    00003990: 	movl	current_test(%rip), %edx
    00003996: 	movq	%r13, %rsi
    00003999: 	movl	$0x1, %edi
    0000399e: 	xorl	%eax, %eax
    000039a0: 	callq	__printf_chk@PLT # Offset: 14752
    000039a5: 	jmp	.Ltmp2857 # Offset: 14757
    000039aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2732:
    000039b0: 	movl	current_test(%rip), %edx
    000039b6: 	movq	%r13, %rsi
    000039b9: 	movl	$0x1, %edi
    000039be: 	xorl	%eax, %eax
    000039c0: 	callq	__printf_chk@PLT # Offset: 14784
    000039c5: 	jmp	.Ltmp2858 # Offset: 14789
    000039ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2726:
    000039d0: 	movl	current_test(%rip), %edx
    000039d6: 	leaq	DATAat0x2b1d0(%rip), %rsi
    000039dd: 	movl	$0x1, %edi
    000039e2: 	xorl	%eax, %eax
    000039e4: 	callq	__printf_chk@PLT # Offset: 14820
    000039e9: 	jmp	.Ltmp2859 # Offset: 14825
    000039ee: 	nop # Size: 2
.Ltmp2720:
    000039f0: 	movl	current_test(%rip), %edx
    000039f6: 	movq	%r13, %rsi
    000039f9: 	movl	$0x1, %edi
    000039fe: 	xorl	%eax, %eax
    00003a00: 	callq	__printf_chk@PLT # Offset: 14848
    00003a05: 	jmp	.Ltmp2860 # Offset: 14853
    00003a0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2714:
    00003a10: 	movl	current_test(%rip), %edx
    00003a16: 	movq	%r12, %rsi
    00003a19: 	movl	$0x1, %edi
    00003a1e: 	xorl	%eax, %eax
    00003a20: 	callq	__printf_chk@PLT # Offset: 14880
    00003a25: 	jmp	.Ltmp2861 # Offset: 14885
    00003a2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2708:
    00003a30: 	movl	current_test(%rip), %edx
    00003a36: 	movq	%r12, %rsi
    00003a39: 	movl	$0x1, %edi
    00003a3e: 	xorl	%eax, %eax
    00003a40: 	callq	__printf_chk@PLT # Offset: 14912
    00003a45: 	jmp	.Ltmp2862 # Offset: 14917
.Ltmp2651:
    00003a4a: 	movq	-0x8(%rdx), %rax
    00003a4e: 	addq	$0x200, %rax
    00003a54: 	jmp	.Ltmp2863 # Offset: 14932
.Ltmp2836:
    00003a59: 	movq	-0x8(%rdx), %rax
    00003a5d: 	addq	$0x200, %rax
    00003a63: 	jmp	.Ltmp2864 # Offset: 14947
.Ltmp2834:
    00003a68: 	movq	-0x8(%rdx), %rax
    00003a6c: 	addq	$0x200, %rax
    00003a72: 	jmp	.Ltmp2865 # Offset: 14962
.Ltmp2829:
    00003a77: 	movq	-0x8(%rdx), %rax
    00003a7b: 	addq	$0x200, %rax
    00003a81: 	jmp	.Ltmp2866 # Offset: 14977
.Ltmp2824:
    00003a86: 	movq	-0x8(%rdx), %rax
    00003a8a: 	addq	$0x200, %rax
    00003a90: 	jmp	.Ltmp2867 # Offset: 14992
.Ltmp2813:
    00003a95: 	movq	-0x8(%rdx), %rax
    00003a99: 	addq	$0x200, %rax
    00003a9f: 	jmp	.Ltmp2868 # Offset: 15007
.Ltmp2807:
    00003aa4: 	movq	-0x8(%rdx), %rax
    00003aa8: 	addq	$0x200, %rax
    00003aae: 	jmp	.Ltmp2869 # Offset: 15022
.Ltmp2801:
    00003ab3: 	movq	-0x8(%rdx), %rax
    00003ab7: 	addq	$0x200, %rax
    00003abd: 	jmp	.Ltmp2870 # Offset: 15037
.Ltmp2795:
    00003ac2: 	movq	-0x8(%rdx), %rax
    00003ac6: 	addq	$0x200, %rax
    00003acc: 	jmp	.Ltmp2871 # Offset: 15052
.Ltmp2789:
    00003ad1: 	movq	-0x8(%rdx), %rax
    00003ad5: 	addq	$0x200, %rax
    00003adb: 	jmp	.Ltmp2872 # Offset: 15067
.Ltmp2783:
    00003ae0: 	movq	-0x8(%rdx), %rax
    00003ae4: 	addq	$0x200, %rax
    00003aea: 	jmp	.Ltmp2873 # Offset: 15082
.Ltmp2777:
    00003aef: 	movq	-0x8(%rdx), %rax
    00003af3: 	addq	$0x200, %rax
    00003af9: 	jmp	.Ltmp2874 # Offset: 15097
.Ltmp2767:
    00003afe: 	movq	-0x8(%rdx), %rax
    00003b02: 	addq	$0x200, %rax
    00003b08: 	jmp	.Ltmp2875 # Offset: 15112
.Ltmp2758:
    00003b0d: 	movq	-0x8(%rdx), %rax
    00003b11: 	addq	$0x200, %rax
    00003b17: 	jmp	.Ltmp2876 # Offset: 15127
.Ltmp2752:
    00003b1c: 	movq	-0x8(%rdx), %rax
    00003b20: 	addq	$0x200, %rax
    00003b26: 	jmp	.Ltmp2877 # Offset: 15142
.Ltmp2746:
    00003b2b: 	movq	-0x8(%rdx), %rax
    00003b2f: 	addq	$0x200, %rax
    00003b35: 	jmp	.Ltmp2878 # Offset: 15157
.Ltmp2740:
    00003b3a: 	movq	-0x8(%rdx), %rax
    00003b3e: 	addq	$0x200, %rax
    00003b44: 	jmp	.Ltmp2879 # Offset: 15172
.Ltmp2734:
    00003b49: 	movq	-0x8(%rdx), %rax
    00003b4d: 	addq	$0x200, %rax
    00003b53: 	jmp	.Ltmp2880 # Offset: 15187
.Ltmp2728:
    00003b58: 	movq	-0x8(%rdx), %rax
    00003b5c: 	addq	$0x200, %rax
    00003b62: 	jmp	.Ltmp2881 # Offset: 15202
.Ltmp2722:
    00003b67: 	movq	-0x8(%rdx), %rax
    00003b6b: 	addq	$0x200, %rax
    00003b71: 	jmp	.Ltmp2882 # Offset: 15217
.Ltmp2716:
    00003b76: 	movq	-0x8(%rdx), %rax
    00003b7a: 	addq	$0x200, %rax
    00003b80: 	jmp	.Ltmp2883 # Offset: 15232
.Ltmp2710:
    00003b85: 	movq	-0x8(%rdx), %rax
    00003b89: 	addq	$0x200, %rax
    00003b8f: 	jmp	.Ltmp2884 # Offset: 15247
.Ltmp2704:
    00003b94: 	movq	-0x8(%rdx), %rax
    00003b98: 	addq	$0x200, %rax
    00003b9e: 	jmp	.Ltmp2885 # Offset: 15262
.Ltmp2695:
    00003ba3: 	movq	-0x8(%rdx), %rax
    00003ba7: 	addq	$0x200, %rax
    00003bad: 	jmp	.Ltmp2886 # Offset: 15277
.Ltmp2688:
    00003bb2: 	movq	-0x8(%rdx), %rax
    00003bb6: 	addq	$0x200, %rax
    00003bbc: 	jmp	.Ltmp2887 # Offset: 15292
.Ltmp2681:
    00003bc1: 	movq	-0x8(%rdx), %rax
    00003bc5: 	addq	$0x200, %rax
    00003bcb: 	jmp	.Ltmp2888 # Offset: 15307
.Ltmp2676:
    00003bd0: 	movq	-0x8(%rdx), %rax
    00003bd4: 	addq	$0x200, %rax
    00003bda: 	jmp	.Ltmp2889 # Offset: 15322
.Ltmp2671:
    00003bdf: 	movq	-0x8(%rdx), %rax
    00003be3: 	addq	$0x200, %rax
    00003be9: 	jmp	.Ltmp2890 # Offset: 15337
.Ltmp2666:
    00003bee: 	movq	-0x8(%rdx), %rax
    00003bf2: 	addq	$0x200, %rax
    00003bf8: 	jmp	.Ltmp2891 # Offset: 15352
.Ltmp2661:
    00003bfd: 	movq	-0x8(%rdx), %rax
    00003c01: 	addq	$0x200, %rax
    00003c07: 	jmp	.Ltmp2892 # Offset: 15367
.Ltmp2656:
    00003c0c: 	movq	-0x8(%rdx), %rax
    00003c10: 	addq	$0x200, %rax
    00003c16: 	jmp	.Ltmp2893 # Offset: 15382
.Ltmp2845:
    00003c1b: 	callq	__stack_chk_fail@PLT # Offset: 15387
    00003c20: 	endbr64
.Ltmp2912:
    00003c24: 	movq	%rax, %rbx
    00003c27: 	jmp	.Ltmp2894 # Offset: 15399
    00003c2c: 	endbr64
.Ltmp2897:
    00003c30: 	movq	%rax, %rbx
    00003c33: 	jmp	.Ltmp2895 # Offset: 15411
    00003c35: 	endbr64
.Ltmp2898:
    00003c39: 	movq	%rax, %rbx
    00003c3c: 	jmp	.Ltmp2896 # Offset: 15420
    00003c41: 	endbr64
    00003c45: 	jmp	.Ltmp2897 # Offset: 15429
    00003c47: 	endbr64
    00003c4b: 	jmp	.Ltmp2898 # Offset: 15435
    00003c4d: 	endbr64
    00003c51: 	jmp	.Ltmp2898 # Offset: 15441
    00003c53: 	endbr64
    00003c57: 	jmp	.Ltmp2898 # Offset: 15447
    00003c59: 	endbr64
    00003c5d: 	jmp	.Ltmp2897 # Offset: 15453
    00003c5f: 	endbr64
    00003c63: 	movq	%rax, %rbx
    00003c66: 	jmp	.Ltmp2899 # Offset: 15462
.Ltmp2895:
    00003c68: 	movq	0x180(%rsp), %rdi
    00003c70: 	cmpq	0x20(%rsp), %rdi
    00003c75: 	je	.Ltmp2899 # Offset: 15477
    00003c77: 	movq	0x190(%rsp), %rax
    00003c7f: 	leaq	0x1(%rax), %rsi
    00003c83: 	callq	_ZdlPvm@PLT # Offset: 15491
.Ltmp2899:
    00003c88: 	movq	0xe0(%rsp), %rdi
    00003c90: 	leaq	0xf0(%rsp), %rax
    00003c98: 	cmpq	%rax, %rdi
    00003c9b: 	je	.Ltmp2900 # Offset: 15515
    00003c9d: 	movq	0xf0(%rsp), %rax
    00003ca5: 	leaq	0x1(%rax), %rsi
    00003ca9: 	callq	_ZdlPvm@PLT # Offset: 15529
.Ltmp2900:
    00003cae: 	movq	0xc0(%rsp), %rdi
    00003cb6: 	leaq	0xd0(%rsp), %rax
    00003cbe: 	cmpq	%rax, %rdi
    00003cc1: 	je	.Ltmp2901 # Offset: 15553
    00003cc3: 	movq	0xd0(%rsp), %rax
    00003ccb: 	leaq	0x1(%rax), %rsi
    00003ccf: 	callq	_ZdlPvm@PLT # Offset: 15567
.Ltmp2901:
    00003cd4: 	movq	%rbx, %rdi
    00003cd7: 	callq	_Unwind_Resume@PLT # Offset: 15575
.Ltmp2896:
    00003cdc: 	movq	0x180(%rsp), %rdi
    00003ce4: 	cmpq	0x20(%rsp), %rdi
    00003ce9: 	je	.Ltmp2900 # Offset: 15593
.Ltmp2909:
    00003ceb: 	movq	0x190(%rsp), %rax
    00003cf3: 	leaq	0x1(%rax), %rsi
    00003cf7: 	callq	_ZdlPvm@PLT # Offset: 15607
    00003cfc: 	jmp	.Ltmp2900 # Offset: 15612
.Ltmp2894:
    00003cfe: 	movq	0x180(%rsp), %rdi
    00003d06: 	cmpq	0x20(%rsp), %rdi
    00003d0b: 	je	.Ltmp2902 # Offset: 15627
    00003d0d: 	movq	0x190(%rsp), %rax
    00003d15: 	leaq	0x1(%rax), %rsi
    00003d19: 	callq	_ZdlPvm@PLT # Offset: 15641
.Ltmp2902:
    00003d1e: 	movq	0x160(%rsp), %rdi
    00003d26: 	leaq	0x170(%rsp), %rax
    00003d2e: 	cmpq	%rax, %rdi
    00003d31: 	je	.Ltmp2903 # Offset: 15665
    00003d33: 	movq	0x170(%rsp), %rax
    00003d3b: 	leaq	0x1(%rax), %rsi
    00003d3f: 	callq	_ZdlPvm@PLT # Offset: 15679
.Ltmp2903:
    00003d44: 	movq	0x140(%rsp), %rdi
    00003d4c: 	leaq	0x150(%rsp), %rax
    00003d54: 	cmpq	%rax, %rdi
    00003d57: 	je	.Ltmp2904 # Offset: 15703
    00003d59: 	movq	0x150(%rsp), %rax
    00003d61: 	leaq	0x1(%rax), %rsi
    00003d65: 	callq	_ZdlPvm@PLT # Offset: 15717
.Ltmp2904:
    00003d6a: 	movq	0x120(%rsp), %rdi
    00003d72: 	leaq	0x130(%rsp), %rax
    00003d7a: 	cmpq	%rax, %rdi
    00003d7d: 	je	.Ltmp2905 # Offset: 15741
    00003d7f: 	movq	0x130(%rsp), %rax
    00003d87: 	leaq	0x1(%rax), %rsi
    00003d8b: 	callq	_ZdlPvm@PLT # Offset: 15755
.Ltmp2905:
    00003d90: 	movq	0x100(%rsp), %rdi
    00003d98: 	leaq	0x110(%rsp), %rax
    00003da0: 	cmpq	%rax, %rdi
    00003da3: 	je	.Ltmp2899 # Offset: 15779
    00003da9: 	movq	0x110(%rsp), %rax
    00003db1: 	leaq	0x1(%rax), %rsi
    00003db5: 	callq	_ZdlPvm@PLT # Offset: 15797
    00003dba: 	jmp	.Ltmp2899 # Offset: 15802
    00003dbf: 	endbr64
    00003dc3: 	jmp	.Ltmp2897 # Offset: 15811
    00003dc8: 	endbr64
    00003dcc: 	jmp	.Ltmp2897 # Offset: 15820
    00003dd1: 	endbr64
    00003dd5: 	jmp	.Ltmp2897 # Offset: 15829
    00003dda: 	endbr64
    00003dde: 	jmp	.Ltmp2897 # Offset: 15838
    00003de3: 	endbr64
    00003de7: 	jmp	.Ltmp2897 # Offset: 15847
    00003dec: 	endbr64
    00003df0: 	jmp	.Ltmp2897 # Offset: 15856
    00003df5: 	endbr64
    00003df9: 	jmp	.Ltmp2897 # Offset: 15865
    00003dfe: 	endbr64
    00003e02: 	jmp	.Ltmp2897 # Offset: 15874
    00003e07: 	endbr64
.Ltmp2907:
    00003e0b: 	movq	%rax, %rbx
    00003e0e: 	jmp	.Ltmp2906 # Offset: 15886
    00003e10: 	endbr64
    00003e14: 	jmp	.Ltmp2907 # Offset: 15892
    00003e16: 	endbr64
    00003e1a: 	jmp	.Ltmp2907 # Offset: 15898
    00003e1c: 	endbr64
    00003e20: 	jmp	.Ltmp2907 # Offset: 15904
.Ltmp2906:
    00003e22: 	movq	0x180(%rsp), %rdi
    00003e2a: 	cmpq	0x20(%rsp), %rdi
    00003e2f: 	je	.Ltmp2905 # Offset: 15919
    00003e35: 	movq	0x190(%rsp), %rax
    00003e3d: 	leaq	0x1(%rax), %rsi
    00003e41: 	callq	_ZdlPvm@PLT # Offset: 15937
    00003e46: 	jmp	.Ltmp2905 # Offset: 15942
    00003e4b: 	endbr64
    00003e4f: 	jmp	.Ltmp2907 # Offset: 15951
    00003e51: 	endbr64
    00003e55: 	jmp	.Ltmp2907 # Offset: 15957
    00003e57: 	endbr64
    00003e5b: 	jmp	.Ltmp2907 # Offset: 15963
    00003e5d: 	endbr64
    00003e61: 	movq	%rax, %rbx
    00003e64: 	jmp	.Ltmp2905 # Offset: 15972
    00003e69: 	endbr64
    00003e6d: 	jmp	.Ltmp2898 # Offset: 15981
    00003e72: 	endbr64
    00003e76: 	jmp	.Ltmp2898 # Offset: 15990
    00003e7b: 	endbr64
    00003e7f: 	movq	%rax, %rbx
    00003e82: 	jmp	.Ltmp2908 # Offset: 16002
    00003e84: 	endbr64
    00003e88: 	movq	%rax, %rbx
    00003e8b: 	jmp	.Ltmp2900 # Offset: 16011
.Ltmp2908:
    00003e90: 	movq	0x180(%rsp), %rdi
    00003e98: 	leaq	0x190(%rsp), %rax
    00003ea0: 	cmpq	%rax, %rdi
    00003ea3: 	jne	.Ltmp2909 # Offset: 16035
    00003ea9: 	jmp	.Ltmp2900 # Offset: 16041
    00003eae: 	endbr64
.Ltmp2911:
    00003eb2: 	movq	%rax, %rbx
    00003eb5: 	jmp	.Ltmp2910 # Offset: 16053
    00003eb7: 	endbr64
    00003ebb: 	jmp	.Ltmp2911 # Offset: 16059
    00003ebd: 	endbr64
    00003ec1: 	jmp	.Ltmp2911 # Offset: 16065
    00003ec3: 	endbr64
    00003ec7: 	jmp	.Ltmp2911 # Offset: 16071
.Ltmp2910:
    00003ec9: 	movq	0x180(%rsp), %rdi
    00003ed1: 	cmpq	0x20(%rsp), %rdi
    00003ed6: 	je	.Ltmp2903 # Offset: 16086
    00003edc: 	movq	0x190(%rsp), %rax
    00003ee4: 	leaq	0x1(%rax), %rsi
    00003ee8: 	callq	_ZdlPvm@PLT # Offset: 16104
    00003eed: 	jmp	.Ltmp2903 # Offset: 16109
    00003ef2: 	endbr64
    00003ef6: 	jmp	.Ltmp2912 # Offset: 16118
    00003efb: 	endbr64
    00003eff: 	movq	%rax, %rbx
    00003f02: 	jmp	.Ltmp2902 # Offset: 16130
    00003f07: 	endbr64
    00003f0b: 	jmp	.Ltmp2911 # Offset: 16139
    00003f0d: 	endbr64
    00003f11: 	jmp	.Ltmp2911 # Offset: 16145
    00003f13: 	endbr64
    00003f17: 	jmp	.Ltmp2911 # Offset: 16151
    00003f19: 	endbr64
    00003f1d: 	jmp	.Ltmp2912 # Offset: 16157
    00003f22: 	endbr64
    00003f26: 	jmp	.Ltmp2912 # Offset: 16166
    00003f2b: 	endbr64
    00003f2f: 	jmp	.Ltmp2912 # Offset: 16175
    00003f34: 	endbr64
.Ltmp2914:
    00003f38: 	movq	%rax, %rbx
    00003f3b: 	jmp	.Ltmp2913 # Offset: 16187
    00003f3d: 	endbr64
    00003f41: 	jmp	.Ltmp2907 # Offset: 16193
    00003f46: 	endbr64
    00003f4a: 	jmp	.Ltmp2907 # Offset: 16202
    00003f4f: 	endbr64
    00003f53: 	jmp	.Ltmp2907 # Offset: 16211
.Ltmp2913:
    00003f58: 	movq	0x180(%rsp), %rdi
    00003f60: 	cmpq	0x20(%rsp), %rdi
    00003f65: 	je	.Ltmp2904 # Offset: 16229
    00003f6b: 	movq	0x190(%rsp), %rax
    00003f73: 	leaq	0x1(%rax), %rsi
    00003f77: 	callq	_ZdlPvm@PLT # Offset: 16247
    00003f7c: 	jmp	.Ltmp2904 # Offset: 16252
    00003f81: 	endbr64
    00003f85: 	jmp	.Ltmp2914 # Offset: 16261
    00003f87: 	endbr64
    00003f8b: 	movq	%rax, %rbx
    00003f8e: 	jmp	.Ltmp2904 # Offset: 16270
    00003f93: 	endbr64
    00003f97: 	jmp	.Ltmp2907 # Offset: 16279
    00003f9c: 	endbr64
    00003fa0: 	jmp	.Ltmp2914 # Offset: 16288
    00003fa2: 	endbr64
    00003fa6: 	jmp	.Ltmp2911 # Offset: 16294
    00003fab: 	endbr64
    00003faf: 	jmp	.Ltmp2914 # Offset: 16303
    00003fb1: 	endbr64
    00003fb5: 	jmp	.Ltmp2911 # Offset: 16309
    00003fba: 	endbr64
    00003fbe: 	movq	%rax, %rbx
    00003fc1: 	jmp	.Ltmp2903 # Offset: 16321
    00003fc6: 	endbr64
    00003fca: 	jmp	.Ltmp2907 # Offset: 16330
    00003fcf: 	endbr64
    00003fd3: 	jmp	.Ltmp2907 # Offset: 16339
    00003fd8: 	endbr64
    00003fdc: 	jmp	.Ltmp2907 # Offset: 16348
    00003fe1: 	endbr64
    00003fe5: 	jmp	.Ltmp2907 # Offset: 16357
DWARF CFI Instructions:
    <empty>
End of Function "_Z15testComplexTypeISt7complexIiEEvd"

Binary Function "_fini" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x2a00c
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x2a00c
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 129 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2555 instructions were shortened
BOLT-INFO: removed 302 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 124 out of 164 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x204e40
