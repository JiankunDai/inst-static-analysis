BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x10028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x2000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x2000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0xfff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x2490
  Size        : 0xcf
  MaxSize     : 0xd0
  Offset      : 0x2490
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0xd150(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%rbx, %r12
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0xd136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	movl	iterations(%rip), %eax
    0000006a: 	addl	$0x1, %eax
    0000006d: 	andl	$-0x2, %eax
    00000070: 	movl	%eax, iterations(%rip)
    00000076: 	callq	_Z11TestOneTypeIdEvv # Offset: 118
    0000007b: 	popq	%rbx
    0000007c: 	xorl	%eax, %eax
    0000007e: 	popq	%rbp
    0000007f: 	popq	%r12
    00000081: 	popq	%r13
    00000083: 	popq	%r14
    00000085: 	retq # Offset: 133
.Ltmp3:
    00000086: 	movq	0x8(%r14), %rdi
    0000008a: 	movl	$0xa, %edx
    0000008f: 	xorl	%esi, %esi
    00000091: 	callq	strtol@PLT # Offset: 145
    00000096: 	movl	%eax, iterations(%rip)
    0000009c: 	cmpl	$0x2, %r13d
    000000a0: 	jle	.Ltmp4 # Offset: 160
    000000a2: 	movq	0x10(%r14), %rdi
    000000a6: 	movl	$0xa, %edx
    000000ab: 	xorl	%esi, %esi
    000000ad: 	callq	strtol@PLT # Offset: 173
    000000b2: 	movl	%eax, init_value(%rip)
    000000b8: 	jmp	.Ltmp4 # Offset: 184
.Ltmp1:
    000000ba: 	leaq	DATAat0xd136(%rip), %rsi
    000000c1: 	movl	$0x1, %edi
    000000c6: 	xorl	%eax, %eax
    000000c8: 	callq	__printf_chk@PLT # Offset: 200
    000000cd: 	jmp	.Ltmp4 # Offset: 205
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x2640
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2640
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0xffe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x2670
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2670
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0xffe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x26a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x26a0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0xfff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x26e0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x26e0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x2720
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x2720
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1
                _ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/rotate_sequence.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x2730
  Size        : 0x3f2
  MaxSize     : 0x400
  Offset      : 0x2730
  Section     : .text
  Orc Section : .local.text._ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	movq	%rdi, %rcx
    00000003: 	cmpq	%rsi, %rdi
    00000006: 	je	.Ltmp9 # Offset: 6
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	cmpq	%rdx, %rsi
    00000012: 	je	.Ltmp10 # Offset: 18
    00000018: 	movq	%rdx, %rax
    0000001b: 	pushq	%r12
    0000001d: 	subq	%rcx, %rsi
    00000020: 	subq	%rdi, %rdx
    00000023: 	subq	%rcx, %rax
    00000026: 	pushq	%rbp
    00000027: 	sarq	$0x3, %rsi
    0000002b: 	movq	%rcx, %rbp
    0000002e: 	pushq	%rbx
    0000002f: 	sarq	$0x3, %rax
    00000033: 	leaq	(%rcx,%rdx), %rbx
    00000037: 	movq	%rax, %r8
    0000003a: 	subq	%rsi, %r8
    0000003d: 	subq	$0x10, %rsp
    00000041: 	cmpq	%r8, %rsi
    00000044: 	je	.Ltmp11 # Offset: 68
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp25:
    00000050: 	movq	%rax, %rdi
    00000053: 	subq	%rsi, %rdi
    00000056: 	cmpq	%rdi, %rsi
    00000059: 	jge	.Ltmp12 # Offset: 89
.Ltmp19:
    0000005f: 	cmpq	$0x1, %rsi
    00000063: 	je	.Ltmp13 # Offset: 99
    00000069: 	leaq	(,%rsi,8), %rcx
    00000071: 	leaq	(%rbp,%rcx), %rdx
    00000076: 	testq	%rdi, %rdi
    00000079: 	jle	.Ltmp14 # Offset: 121
    0000007f: 	addq	$0x10, %rcx
    00000083: 	leaq	0x10(%rbp), %r8
    00000087: 	testq	%rcx, %rcx
    0000008a: 	setle	%cl
    0000008d: 	cmpq	%r8, %rdx
    00000090: 	setae	%r8b
    00000094: 	orb	%r8b, %cl
    00000097: 	je	.Ltmp15 # Offset: 151
    0000009d: 	leaq	-0x1(%rdi), %rcx
    000000a1: 	cmpq	$0x1, %rcx
    000000a5: 	jbe	.Ltmp15 # Offset: 165
    000000ab: 	movq	%rdi, %r9
    000000ae: 	xorl	%ecx, %ecx
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	shrq	%r9
    000000b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp16:
    000000c0: 	movupd	(%rbp,%rcx), %xmm0
    000000c6: 	movupd	(%rdx,%rcx), %xmm2
    000000cb: 	addq	$0x1, %r8
    000000cf: 	movups	%xmm2, (%rbp,%rcx)
    000000d4: 	movups	%xmm0, (%rdx,%rcx)
    000000d8: 	addq	$0x10, %rcx
    000000dc: 	cmpq	%r8, %r9
    000000df: 	jne	.Ltmp16 # Offset: 223
    000000e1: 	movq	%rdi, %r9
    000000e4: 	andq	$-0x2, %r9
    000000e8: 	leaq	(,%r9,8), %rcx
    000000f0: 	leaq	(%rbp,%rcx), %r8
    000000f5: 	addq	%rcx, %rdx
    000000f8: 	cmpq	%r9, %rdi
    000000fb: 	je	.Ltmp17 # Offset: 251
    000000fd: 	movsd	(%r8), %xmm0
    00000102: 	movsd	(%rdx), %xmm1
    00000106: 	movsd	%xmm1, (%r8)
    0000010b: 	movsd	%xmm0, (%rdx)
.Ltmp17:
    0000010f: 	leaq	(%rbp,%rdi,8), %rbp
.Ltmp14:
    00000114: 	cqto
    00000116: 	idivq	%rsi
    00000119: 	testq	%rdx, %rdx
    0000011c: 	je	.Ltmp18 # Offset: 284
    00000122: 	movq	%rsi, %rax
    00000125: 	subq	%rdx, %rsi
    00000128: 	movq	%rax, %rdi
    0000012b: 	subq	%rsi, %rdi
    0000012e: 	cmpq	%rdi, %rsi
    00000131: 	jl	.Ltmp19 # Offset: 305
.Ltmp12:
    00000137: 	leaq	(,%rax,8), %rdx
    0000013f: 	leaq	(%rbp,%rdx), %r10
    00000144: 	cmpq	$0x1, %rdi
    00000148: 	je	.Ltmp20 # Offset: 328
    0000014e: 	leaq	(,%rdi,8), %rcx
    00000156: 	movq	%r10, %r9
    00000159: 	subq	%rcx, %r9
    0000015c: 	testq	%rsi, %rsi
    0000015f: 	jle	.Ltmp21 # Offset: 351
    00000165: 	movq	%rdx, %r12
    00000168: 	leaq	-0x10(%rdx), %r8
    0000016c: 	subq	%rcx, %r12
    0000016f: 	cmpq	%r8, %r12
    00000172: 	leaq	-0x10(%r12), %r11
    00000177: 	setle	%cl
    0000017a: 	cmpq	%r11, %rdx
    0000017d: 	setle	%dl
    00000180: 	orb	%dl, %cl
    00000182: 	je	.Ltmp22 # Offset: 386
    00000188: 	leaq	-0x1(%rsi), %rdx
    0000018c: 	cmpq	$0x1, %rdx
    00000190: 	jbe	.Ltmp22 # Offset: 400
    00000196: 	movq	%rsi, %r12
    00000199: 	addq	%rbp, %r11
    0000019c: 	addq	%rbp, %r8
    0000019f: 	xorl	%ecx, %ecx
    000001a1: 	shrq	%r12
    000001a4: 	xorl	%edx, %edx
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp23:
    000001b0: 	movupd	(%r11,%rcx), %xmm0
    000001b6: 	movupd	(%r8,%rcx), %xmm3
    000001bc: 	addq	$0x1, %rdx
    000001c0: 	movups	%xmm3, (%r11,%rcx)
    000001c5: 	movups	%xmm0, (%r8,%rcx)
    000001ca: 	subq	$0x10, %rcx
    000001ce: 	cmpq	%rdx, %r12
    000001d1: 	jne	.Ltmp23 # Offset: 465
    000001d3: 	movq	%rsi, %rdx
    000001d6: 	andq	$-0x2, %rdx
    000001da: 	movq	%rdx, %rcx
    000001dd: 	negq	%rcx
    000001e0: 	shlq	$0x3, %rcx
    000001e4: 	cmpq	%rdx, %rsi
    000001e7: 	je	.Ltmp24 # Offset: 487
    000001e9: 	subq	$0x8, %rcx
    000001ed: 	leaq	(%r9,%rcx), %rdx
    000001f1: 	addq	%r10, %rcx
    000001f4: 	movsd	(%rdx), %xmm0
    000001f8: 	movsd	(%rcx), %xmm1
    000001fc: 	movsd	%xmm1, (%rdx)
    00000200: 	movsd	%xmm0, (%rcx)
.Ltmp24:
    00000204: 	negq	%rsi
    00000207: 	leaq	(%r9,%rsi,8), %rbp
.Ltmp28:
    0000020b: 	cqto
    0000020d: 	idivq	%rdi
    00000210: 	movq	%rdx, %rsi
    00000213: 	testq	%rdx, %rdx
    00000216: 	je	.Ltmp18 # Offset: 534
    0000021c: 	movq	%rdi, %rax
    0000021f: 	jmp	.Ltmp25 # Offset: 543
.Ltmp10:
    00000224: 	movq	%rcx, %rax
    00000227: 	retq # Offset: 551
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp22:
    00000230: 	movq	$-0x8, %rdx
    00000237: 	xorl	%ecx, %ecx
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp26:
    00000240: 	movsd	(%r9,%rdx), %xmm0
    00000246: 	movsd	(%r10,%rdx), %xmm1
    0000024c: 	addq	$0x1, %rcx
    00000250: 	movsd	%xmm1, (%r9,%rdx)
    00000256: 	movsd	%xmm0, (%r10,%rdx)
    0000025c: 	subq	$0x8, %rdx
    00000260: 	cmpq	%rcx, %rsi
    00000263: 	jne	.Ltmp26 # Offset: 611
    00000265: 	jmp	.Ltmp24 # Offset: 613
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp15:
    00000270: 	xorl	%ecx, %ecx
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp27:
    00000278: 	movsd	(%rbp,%rcx,8), %xmm0
    0000027e: 	movsd	(%rdx,%rcx,8), %xmm1
    00000283: 	movsd	%xmm1, (%rbp,%rcx,8)
    00000289: 	movsd	%xmm0, (%rdx,%rcx,8)
    0000028e: 	addq	$0x1, %rcx
    00000292: 	cmpq	%rcx, %rdi
    00000295: 	jne	.Ltmp27 # Offset: 661
    00000297: 	jmp	.Ltmp17 # Offset: 663
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp21:
    000002a0: 	movq	%r9, %rbp
    000002a3: 	jmp	.Ltmp28 # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp9:
    000002b0: 	movq	%rdx, %rax
    000002b3: 	retq # Offset: 691
.Ltmp11:
    000002b4: 	leaq	0xf(%rcx), %rax
    000002b8: 	leaq	-0x8(%rdi), %rdx
    000002bc: 	subq	%rdi, %rax
    000002bf: 	subq	%rcx, %rdx
    000002c2: 	cmpq	$0x1e, %rax
    000002c6: 	jbe	.Ltmp29 # Offset: 710
    000002cc: 	cmpq	$0x8, %rdx
    000002d0: 	jbe	.Ltmp29 # Offset: 720
    000002d6: 	shrq	$0x3, %rdx
    000002da: 	xorl	%eax, %eax
    000002dc: 	addq	$0x1, %rdx
    000002e0: 	movq	%rdx, %rsi
    000002e3: 	shrq	%rsi
    000002e6: 	shlq	$0x4, %rsi
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp30:
    000002f0: 	movupd	(%rcx,%rax), %xmm0
    000002f5: 	movupd	(%rdi,%rax), %xmm4
    000002fa: 	movups	%xmm4, (%rcx,%rax)
    000002fe: 	movups	%xmm0, (%rdi,%rax)
    00000302: 	addq	$0x10, %rax
    00000306: 	cmpq	%rax, %rsi
    00000309: 	jne	.Ltmp30 # Offset: 777
    0000030b: 	movq	%rdx, %rsi
    0000030e: 	andq	$-0x2, %rsi
    00000312: 	leaq	(,%rsi,8), %rax
    0000031a: 	addq	%rax, %rcx
    0000031d: 	addq	%rdi, %rax
    00000320: 	cmpq	%rsi, %rdx
    00000323: 	je	.Ltmp31 # Offset: 803
    00000325: 	movsd	(%rcx), %xmm0
    00000329: 	movsd	(%rax), %xmm1
    0000032d: 	movsd	%xmm1, (%rcx)
    00000331: 	movsd	%xmm0, (%rax)
.Ltmp31:
    00000335: 	movq	%rdi, %rax
.Ltmp33:
    00000338: 	addq	$0x10, %rsp
    0000033c: 	popq	%rbx
    0000033d: 	popq	%rbp
    0000033e: 	popq	%r12
    00000340: 	retq # Offset: 832
.Ltmp18:
    00000341: 	addq	$0x10, %rsp
    00000345: 	movq	%rbx, %rax
    00000348: 	popq	%rbx
    00000349: 	popq	%rbp
    0000034a: 	popq	%r12
    0000034c: 	retq # Offset: 844
.Ltmp20:
    0000034d: 	leaq	-0x8(%r10), %rax
    00000351: 	movsd	-0x8(%r10), %xmm0
    00000357: 	cmpq	%rax, %rbp
    0000035a: 	je	.Ltmp32 # Offset: 858
    0000035c: 	subq	%rbp, %rax
    0000035f: 	movq	%r10, %rdi
    00000362: 	movq	%rbp, %rsi
    00000365: 	movsd	%xmm0, 0x8(%rsp)
    0000036b: 	movq	%rax, %rdx
    0000036e: 	subq	%rax, %rdi
    00000371: 	callq	memmove@PLT # Offset: 881
    00000376: 	movsd	0x8(%rsp), %xmm0
.Ltmp32:
    0000037c: 	movsd	%xmm0, (%rbp)
    00000381: 	movq	%rbx, %rax
    00000384: 	jmp	.Ltmp33 # Offset: 900
.Ltmp13:
    00000386: 	shlq	$0x3, %rax
    0000038a: 	leaq	0x8(%rbp), %rsi
    0000038e: 	movsd	(%rbp), %xmm0
    00000393: 	leaq	(%rbp,%rax), %r12
    00000398: 	cmpq	%rsi, %r12
    0000039b: 	je	.Ltmp34 # Offset: 923
    0000039d: 	leaq	-0x8(%rax), %rdx
    000003a1: 	movq	%rbp, %rdi
    000003a4: 	movsd	%xmm0, 0x8(%rsp)
    000003aa: 	callq	memmove@PLT # Offset: 938
    000003af: 	movsd	0x8(%rsp), %xmm0
.Ltmp34:
    000003b5: 	movsd	%xmm0, -0x8(%r12)
    000003bc: 	movq	%rbx, %rax
    000003bf: 	jmp	.Ltmp33 # Offset: 959
.Ltmp29:
    000003c4: 	movq	%rdi, %rdx
    000003c7: 	xorl	%eax, %eax
    000003c9: 	subq	%rcx, %rdx
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp35:
    000003d0: 	movsd	(%rcx,%rax), %xmm0
    000003d5: 	movsd	(%rdi,%rax), %xmm1
    000003da: 	movsd	%xmm1, (%rcx,%rax)
    000003df: 	movsd	%xmm0, (%rdi,%rax)
    000003e4: 	addq	$0x8, %rax
    000003e8: 	cmpq	%rdx, %rax
    000003eb: 	jne	.Ltmp35 # Offset: 1003
    000003ed: 	jmp	.Ltmp31 # Offset: 1005
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1(*2)"

Binary Function "_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1
                _ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/rotate_sequence.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x2b30
  Size        : 0x129
  MaxSize     : 0x130
  Offset      : 0x2b30
  Section     : .text
  Orc Section : .local.text._ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	movq	%rdi, %r8
    00000003: 	movq	%rsi, %r9
    00000006: 	movq	%rdx, %rax
    00000009: 	cmpq	%rsi, %rdi
    0000000c: 	je	.Ltmp36 # Offset: 12
    0000000e: 	cmpq	%rdx, %rsi
    00000011: 	je	.Ltmp37 # Offset: 17
    00000013: 	movq	%rsi, %rcx
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp39:
    00000020: 	movq	0x8(%rcx), %rcx
    00000024: 	cmpq	%rdi, %rcx
    00000027: 	je	.Ltmp38 # Offset: 39
    00000029: 	movsd	0x10(%rcx), %xmm1
    0000002e: 	movsd	0x10(%rdi), %xmm0
    00000033: 	movsd	%xmm1, 0x10(%rdi)
    00000038: 	movq	(%rdi), %rdi
    0000003b: 	movsd	%xmm0, 0x10(%rcx)
    00000040: 	cmpq	%rdi, %rcx
    00000043: 	jne	.Ltmp39 # Offset: 67
.Ltmp38:
    00000045: 	movq	%rsi, %rcx
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp41:
    00000050: 	movq	0x8(%rdx), %rdx
    00000054: 	cmpq	%rcx, %rdx
    00000057: 	je	.Ltmp40 # Offset: 87
    00000059: 	movsd	0x10(%rdx), %xmm1
    0000005e: 	movsd	0x10(%rcx), %xmm0
    00000063: 	movsd	%xmm1, 0x10(%rcx)
    00000068: 	movq	(%rcx), %rcx
    0000006b: 	movsd	%xmm0, 0x10(%rdx)
    00000070: 	cmpq	%rcx, %rdx
    00000073: 	jne	.Ltmp41 # Offset: 115
    00000075: 	jmp	.Ltmp40 # Offset: 117
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp37:
    00000080: 	movq	%rdi, %rax
.Ltmp36:
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp43:
    00000088: 	cmpq	%rax, %rsi
    0000008b: 	je	.Ltmp42 # Offset: 139
.Ltmp40:
    0000008d: 	movq	0x8(%rax), %rax
    00000091: 	movsd	0x10(%r8), %xmm0
    00000097: 	movsd	0x10(%rax), %xmm1
    0000009c: 	movsd	%xmm1, 0x10(%r8)
    000000a2: 	movq	(%r8), %r8
    000000a5: 	movsd	%xmm0, 0x10(%rax)
    000000aa: 	cmpq	%r8, %rsi
    000000ad: 	jne	.Ltmp43 # Offset: 173
    000000af: 	cmpq	%rax, %rsi
    000000b2: 	je	.Ltmp36 # Offset: 178
    000000b4: 	movq	%rax, %rdx
    000000b7: 	jmp	.Ltmp44 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp46:
    000000c0: 	movsd	0x10(%rdx), %xmm1
    000000c5: 	movsd	0x10(%r9), %xmm0
    000000cb: 	movsd	%xmm1, 0x10(%r9)
    000000d1: 	movq	(%r9), %r9
    000000d4: 	movsd	%xmm0, 0x10(%rdx)
    000000d9: 	cmpq	%r9, %rdx
    000000dc: 	je	.Ltmp45 # Offset: 220
.Ltmp44:
    000000de: 	movq	0x8(%rdx), %rdx
    000000e2: 	cmpq	%r9, %rdx
    000000e5: 	jne	.Ltmp46 # Offset: 229
    000000e7: 	retq # Offset: 231
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp42:
    000000f0: 	movq	%r8, %rdx
    000000f3: 	jmp	.Ltmp47 # Offset: 243
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp49:
    000000f8: 	movsd	0x10(%rax), %xmm1
    000000fd: 	movsd	0x10(%rdx), %xmm0
    00000102: 	movsd	%xmm1, 0x10(%rdx)
    00000107: 	movq	(%rdx), %rdx
    0000010a: 	movsd	%xmm0, 0x10(%rax)
    0000010f: 	cmpq	%rdx, %rax
    00000112: 	je	.Ltmp48 # Offset: 274
.Ltmp47:
    00000114: 	movq	0x8(%rax), %rax
    00000118: 	cmpq	%rax, %rdx
    0000011b: 	jne	.Ltmp49 # Offset: 283
.Ltmp48:
    0000011d: 	movq	%r8, %rax
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp45:
    00000128: 	retq # Offset: 296
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x2c60
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x2c60
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp50 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp51 # Offset: 38
.Ltmp50:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp52 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp51:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp52:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0xd008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2d00
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2d00
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp53 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp54 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp55:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp55 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp68:
    00000069: 	leaq	DATAat0xd152(%rip), %rbp
    00000070: 	leaq	DATAat0xd028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0xd068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp56 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0xd4a0(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0xd098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0xd498(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp57 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp61:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp58 # Offset: 244
    000000fa: 	movq	DATAat0xd488(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp62:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0xd488(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp59 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp59:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0xd137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0xd4a0(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp60 # Offset: 398
.Ltmp57:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp61 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp62 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp58:
    000001c8: 	movq	DATAat0xd490(%rip), %rsi
    000001cf: 	movq	DATAat0xd488(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp59 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp60:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp56 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp63 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp64:
    00000210: 	addq	$0x10, %rax
.Ltmp63:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp64 # Offset: 542
.Ltmp69:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0xd0c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp65 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp66 # Offset: 592
.Ltmp65:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp53:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp66:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp67:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp67 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0xd112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp53 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp54:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp68 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp56:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp69 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x3030
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x3030
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp70 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp71 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp72:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp72 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp77:
    0000006a: 	leaq	DATAat0xd152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0xd0f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0xd138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0xd152(%rip), %r8
    000000a1: 	leaq	DATAat0xd126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp73 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp74:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0xd137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp74 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp73 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp75 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp76:
    00000140: 	addq	$0x10, %rax
.Ltmp75:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp76 # Offset: 334
.Ltmp78:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0xd0c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp70:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp71:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp77 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp73:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp78 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x31e0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x31e0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x3200
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3200
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0xd498(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x3240
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x3240
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x3250
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x3250
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x32a0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x32a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x32f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x32f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x3320
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3320
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x3350
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3350
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x3380
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3380
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x33b0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x33e0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x33e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x3410
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3410
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x3440
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3440
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x3470
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3470
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x34a0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x34a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x34d0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x34d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3500
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x3500
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x3540
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3540
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x3570
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3570
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x35a0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x35a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x35d0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x35d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x3600
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3600
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x3630
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3630
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x3660
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3660
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x3690
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3690
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x36c0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x36c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x36f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x36f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x3720
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3720
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z18gries_mills_rotateISt18_Fwd_list_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x3750
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x3750
  Section     : .text
  Orc Section : .local.text._Z18gries_mills_rotateISt18_Fwd_list_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rsi
    00000007: 	je	.Ltmp79 # Offset: 7
    00000009: 	cmpq	%rsi, %rdi
    0000000c: 	je	.Ltmp79 # Offset: 12
    0000000e: 	movq	%rsi, %rax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp81:
    00000018: 	movsd	0x8(%rdi), %xmm0
    0000001d: 	movsd	0x8(%rsi), %xmm1
    00000022: 	movsd	%xmm1, 0x8(%rdi)
    00000027: 	movq	(%rdi), %rdi
    0000002a: 	movsd	%xmm0, 0x8(%rsi)
    0000002f: 	movq	(%rsi), %rsi
    00000032: 	cmpq	%rdx, %rsi
    00000035: 	je	.Ltmp80 # Offset: 53
    00000037: 	cmpq	%rax, %rdi
    0000003a: 	cmoveq	%rsi, %rax
    0000003e: 	jmp	.Ltmp81 # Offset: 62
.Ltmp80:
    00000040: 	cmpq	%rax, %rdi
    00000043: 	je	.Ltmp79 # Offset: 67
    00000045: 	movq	%rax, %rsi
    00000048: 	jmp	.Ltmp81 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp79:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z18gries_mills_rotateISt18_Fwd_list_iteratorIdEEvT_S2_S2_"

Binary Function "_Z18gries_mills_rotateISt14_List_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x37b0
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x37b0
  Section     : .text
  Orc Section : .local.text._Z18gries_mills_rotateISt14_List_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rsi
    00000007: 	je	.Ltmp82 # Offset: 7
    00000009: 	cmpq	%rsi, %rdi
    0000000c: 	je	.Ltmp82 # Offset: 12
    0000000e: 	movq	%rsi, %rax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp84:
    00000018: 	movsd	0x10(%rdi), %xmm0
    0000001d: 	movsd	0x10(%rsi), %xmm1
    00000022: 	movsd	%xmm1, 0x10(%rdi)
    00000027: 	movq	(%rdi), %rdi
    0000002a: 	movsd	%xmm0, 0x10(%rsi)
    0000002f: 	movq	(%rsi), %rsi
    00000032: 	cmpq	%rdx, %rsi
    00000035: 	je	.Ltmp83 # Offset: 53
    00000037: 	cmpq	%rax, %rdi
    0000003a: 	cmoveq	%rsi, %rax
    0000003e: 	jmp	.Ltmp84 # Offset: 62
.Ltmp83:
    00000040: 	cmpq	%rax, %rdi
    00000043: 	je	.Ltmp82 # Offset: 67
    00000045: 	movq	%rax, %rsi
    00000048: 	jmp	.Ltmp84 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp82:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z18gries_mills_rotateISt14_List_iteratorIdEEvT_S2_S2_"

Binary Function "_Z20three_reverse_rotateISt14_List_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x3810
  Size        : 0xb0
  MaxSize     : 0xb0
  Offset      : 0x3810
  Section     : .text
  Orc Section : .local.text._Z20three_reverse_rotateISt14_List_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp85 # Offset: 10
    00000010: 	movq	%rdx, %rax
    00000013: 	cmpq	%rdx, %rsi
    00000016: 	je	.Ltmp85 # Offset: 22
    0000001c: 	movq	%rsi, %rcx
    0000001f: 	movq	%rdi, %r9
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp87:
    00000028: 	movq	0x8(%rcx), %rcx
    0000002c: 	cmpq	%r9, %rcx
    0000002f: 	je	.Ltmp86 # Offset: 47
    00000031: 	movsd	0x10(%rcx), %xmm1
    00000036: 	movsd	0x10(%r9), %xmm0
    0000003c: 	movsd	%xmm1, 0x10(%r9)
    00000042: 	movq	(%r9), %r9
    00000045: 	movsd	%xmm0, 0x10(%rcx)
    0000004a: 	cmpq	%r9, %rcx
    0000004d: 	jne	.Ltmp87 # Offset: 77
.Ltmp86:
    0000004f: 	movq	%rdx, %rcx
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp89:
    00000058: 	movq	0x8(%rcx), %rcx
    0000005c: 	cmpq	%rsi, %rcx
    0000005f: 	je	.Ltmp88 # Offset: 95
    00000061: 	movsd	0x10(%rcx), %xmm1
    00000066: 	movsd	0x10(%rsi), %xmm0
    0000006b: 	movsd	%xmm1, 0x10(%rsi)
    00000070: 	movq	(%rsi), %rsi
    00000073: 	movsd	%xmm0, 0x10(%rcx)
    00000078: 	cmpq	%rsi, %rcx
    0000007b: 	jne	.Ltmp89 # Offset: 123
.Ltmp88:
    0000007d: 	cmpq	%rdx, %rdi
    00000080: 	jne	.Ltmp90 # Offset: 128
    00000082: 	jmp	.Ltmp85 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp91:
    00000088: 	movsd	0x10(%rax), %xmm1
    0000008d: 	movsd	0x10(%r8), %xmm0
    00000093: 	movsd	%xmm1, 0x10(%r8)
    00000099: 	movq	(%r8), %r8
    0000009c: 	movsd	%xmm0, 0x10(%rax)
    000000a1: 	cmpq	%r8, %rax
    000000a4: 	je	.Ltmp85 # Offset: 164
.Ltmp90:
    000000a6: 	movq	0x8(%rax), %rax
    000000aa: 	cmpq	%r8, %rax
    000000ad: 	jne	.Ltmp91 # Offset: 173
.Ltmp85:
    000000af: 	retq # Offset: 175
DWARF CFI Instructions:
    <empty>
End of Function "_Z20three_reverse_rotateISt14_List_iteratorIdEEvT_S2_S2_"

Binary Function "_Z18gries_mills_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x38c0
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x38c0
  Section     : .text
  Orc Section : .local.text._Z18gries_mills_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rsi
    00000007: 	je	.Ltmp92 # Offset: 7
    00000009: 	cmpq	%rsi, %rdi
    0000000c: 	je	.Ltmp92 # Offset: 12
    0000000e: 	movq	%rsi, %rax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp94:
    00000018: 	movsd	(%rdi), %xmm0
    0000001c: 	movsd	(%rsi), %xmm1
    00000020: 	addq	$0x8, %rsi
    00000024: 	addq	$0x8, %rdi
    00000028: 	movsd	%xmm1, -0x8(%rdi)
    0000002d: 	movsd	%xmm0, -0x8(%rsi)
    00000032: 	cmpq	%rdx, %rsi
    00000035: 	je	.Ltmp93 # Offset: 53
    00000037: 	cmpq	%rax, %rdi
    0000003a: 	cmoveq	%rsi, %rax
    0000003e: 	jmp	.Ltmp94 # Offset: 62
.Ltmp93:
    00000040: 	cmpq	%rax, %rdi
    00000043: 	je	.Ltmp92 # Offset: 67
    00000045: 	movq	%rax, %rsi
    00000048: 	jmp	.Ltmp94 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp92:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z18gries_mills_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_"

Binary Function "_Z20three_reverse_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3920
  Size        : 0x2f1
  MaxSize     : 0x300
  Offset      : 0x3920
  Section     : .text
  Orc Section : .local.text._Z20three_reverse_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp95 # Offset: 7
    0000000d: 	movq	%rsi, %rcx
    00000010: 	cmpq	%rdx, %rsi
    00000013: 	je	.Ltmp95 # Offset: 19
    00000019: 	leaq	-0x8(%rsi), %r8
    0000001d: 	pushq	%rbx
    0000001e: 	cmpq	%r8, %rdi
    00000021: 	jae	.Ltmp96 # Offset: 33
    00000027: 	leaq	-0x9(%rsi), %rsi
    0000002b: 	movq	%rcx, %r11
    0000002e: 	movq	%rdi, %rax
    00000031: 	subq	%rdi, %rsi
    00000034: 	movq	%rsi, %r10
    00000037: 	shrq	$0x4, %r10
    0000003b: 	addq	$0x1, %r10
    0000003f: 	leaq	(,%r10,8), %r9
    00000047: 	subq	%r9, %r11
    0000004a: 	leaq	(%rdi,%r9), %rbx
    0000004e: 	cmpq	%r11, %rbx
    00000051: 	setbe	%r9b
    00000055: 	cmpq	%rcx, %rdi
    00000058: 	setae	%r11b
    0000005c: 	orb	%r11b, %r9b
    0000005f: 	je	.Ltmp97 # Offset: 95
    00000065: 	cmpq	$0x1f, %rsi
    00000069: 	jbe	.Ltmp97 # Offset: 105
    0000006f: 	movq	%r10, %r9
    00000072: 	leaq	-0x10(%rcx), %rsi
    00000076: 	shrq	%r9
    00000079: 	shlq	$0x4, %r9
    0000007d: 	addq	%rdi, %r9
.Ltmp98:
    00000080: 	movupd	(%rsi), %xmm1
    00000084: 	movupd	(%rax), %xmm0
    00000088: 	addq	$0x10, %rax
    0000008c: 	subq	$0x10, %rsi
    00000090: 	shufpd	$0x1, %xmm1, %xmm1
    00000095: 	shufpd	$0x1, %xmm0, %xmm0
    0000009a: 	movups	%xmm1, -0x10(%rax)
    0000009e: 	movups	%xmm0, 0x10(%rsi)
    000000a2: 	cmpq	%rax, %r9
    000000a5: 	jne	.Ltmp98 # Offset: 165
    000000a7: 	movq	%r10, %r9
    000000aa: 	movq	%r8, %rsi
    000000ad: 	andq	$-0x2, %r9
    000000b1: 	leaq	(,%r9,8), %r11
    000000b9: 	leaq	(%rdi,%r11), %rax
    000000bd: 	subq	%r11, %rsi
    000000c0: 	cmpq	%r9, %r10
    000000c3: 	je	.Ltmp96 # Offset: 195
    000000c5: 	movsd	(%rax), %xmm0
    000000c9: 	movsd	(%rsi), %xmm1
    000000cd: 	movsd	%xmm1, (%rax)
    000000d1: 	movsd	%xmm0, (%rsi)
.Ltmp96:
    000000d5: 	leaq	-0x8(%rdx), %r8
    000000d9: 	cmpq	%r8, %rcx
    000000dc: 	jae	.Ltmp99 # Offset: 220
    000000e2: 	leaq	-0x9(%rdx), %rsi
    000000e6: 	movq	%rdx, %r11
    000000e9: 	movq	%rcx, %rax
    000000ec: 	subq	%rcx, %rsi
    000000ef: 	movq	%rsi, %r10
    000000f2: 	shrq	$0x4, %r10
    000000f6: 	addq	$0x1, %r10
    000000fa: 	leaq	(,%r10,8), %r9
    00000102: 	subq	%r9, %r11
    00000105: 	leaq	(%rcx,%r9), %rbx
    00000109: 	cmpq	%r11, %rbx
    0000010c: 	setbe	%r9b
    00000110: 	cmpq	%rdx, %rcx
    00000113: 	setae	%r11b
    00000117: 	orb	%r11b, %r9b
    0000011a: 	je	.Ltmp100 # Offset: 282
    00000120: 	cmpq	$0x1f, %rsi
    00000124: 	jbe	.Ltmp100 # Offset: 292
    0000012a: 	movq	%r10, %r9
    0000012d: 	leaq	-0x10(%rdx), %rsi
    00000131: 	shrq	%r9
    00000134: 	shlq	$0x4, %r9
    00000138: 	addq	%rcx, %r9
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp101:
    00000140: 	movupd	(%rsi), %xmm1
    00000144: 	movupd	(%rax), %xmm0
    00000148: 	addq	$0x10, %rax
    0000014c: 	subq	$0x10, %rsi
    00000150: 	shufpd	$0x1, %xmm1, %xmm1
    00000155: 	shufpd	$0x1, %xmm0, %xmm0
    0000015a: 	movups	%xmm1, -0x10(%rax)
    0000015e: 	movups	%xmm0, 0x10(%rsi)
    00000162: 	cmpq	%rax, %r9
    00000165: 	jne	.Ltmp101 # Offset: 357
    00000167: 	movq	%r10, %rax
    0000016a: 	movq	%r8, %rsi
    0000016d: 	andq	$-0x2, %rax
    00000171: 	leaq	(,%rax,8), %r9
    00000179: 	addq	%r9, %rcx
    0000017c: 	subq	%r9, %rsi
    0000017f: 	cmpq	%rax, %r10
    00000182: 	je	.Ltmp99 # Offset: 386
    00000184: 	movsd	(%rcx), %xmm0
    00000188: 	movsd	(%rsi), %xmm1
    0000018c: 	movsd	%xmm1, (%rcx)
    00000190: 	movsd	%xmm0, (%rsi)
.Ltmp99:
    00000194: 	cmpq	%rdx, %rdi
    00000197: 	je	.Ltmp102 # Offset: 407
    0000019d: 	cmpq	%r8, %rdi
    000001a0: 	jae	.Ltmp102 # Offset: 416
    000001a6: 	leaq	-0x9(%rdx), %rax
    000001aa: 	movq	%rdx, %r10
    000001ad: 	movq	%rdi, %rcx
    000001b0: 	subq	%rdi, %rax
    000001b3: 	movq	%rax, %rsi
    000001b6: 	shrq	$0x4, %rsi
    000001ba: 	addq	$0x1, %rsi
    000001be: 	leaq	(,%rsi,8), %r9
    000001c6: 	subq	%r9, %r10
    000001c9: 	leaq	(%rdi,%r9), %r11
    000001cd: 	cmpq	%r10, %r11
    000001d0: 	setbe	%r9b
    000001d4: 	cmpq	%rdx, %rdi
    000001d7: 	setae	%r10b
    000001db: 	orb	%r10b, %r9b
    000001de: 	je	.Ltmp103 # Offset: 478
    000001e4: 	cmpq	$0x1f, %rax
    000001e8: 	jbe	.Ltmp103 # Offset: 488
    000001ee: 	leaq	-0x10(%rdx), %rax
    000001f2: 	movq	%rsi, %rdx
    000001f5: 	shrq	%rdx
    000001f8: 	shlq	$0x4, %rdx
    000001fc: 	addq	%rdi, %rdx
    000001ff: 	nop # Size: 1
.Ltmp104:
    00000200: 	movupd	(%rax), %xmm1
    00000204: 	movupd	(%rcx), %xmm0
    00000208: 	addq	$0x10, %rcx
    0000020c: 	subq	$0x10, %rax
    00000210: 	shufpd	$0x1, %xmm1, %xmm1
    00000215: 	shufpd	$0x1, %xmm0, %xmm0
    0000021a: 	movups	%xmm1, -0x10(%rcx)
    0000021e: 	movups	%xmm0, 0x10(%rax)
    00000222: 	cmpq	%rdx, %rcx
    00000225: 	jne	.Ltmp104 # Offset: 549
    00000227: 	movq	%rsi, %rdx
    0000022a: 	movq	%r8, %rax
    0000022d: 	andq	$-0x2, %rdx
    00000231: 	leaq	(,%rdx,8), %rcx
    00000239: 	addq	%rcx, %rdi
    0000023c: 	subq	%rcx, %rax
    0000023f: 	cmpq	%rdx, %rsi
    00000242: 	je	.Ltmp102 # Offset: 578
    00000244: 	movsd	(%rdi), %xmm0
    00000248: 	movsd	(%rax), %xmm1
    0000024c: 	movsd	%xmm1, (%rdi)
    00000250: 	movsd	%xmm0, (%rax)
.Ltmp102:
    00000254: 	popq	%rbx
    00000255: 	retq # Offset: 597
    00000256: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp100:
    00000260: 	movq	%r8, %rcx
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp105:
    00000268: 	movsd	(%rax), %xmm0
    0000026c: 	movsd	(%rcx), %xmm1
    00000270: 	addq	$0x8, %rax
    00000274: 	subq	$0x8, %rcx
    00000278: 	movsd	%xmm1, -0x8(%rax)
    0000027d: 	movsd	%xmm0, 0x8(%rcx)
    00000282: 	cmpq	%rcx, %rax
    00000285: 	jb	.Ltmp105 # Offset: 645
    00000287: 	jmp	.Ltmp99 # Offset: 647
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp97:
    00000290: 	movq	%r8, %rsi
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp106:
    00000298: 	movsd	(%rax), %xmm0
    0000029c: 	movsd	(%rsi), %xmm1
    000002a0: 	addq	$0x8, %rax
    000002a4: 	subq	$0x8, %rsi
    000002a8: 	movsd	%xmm1, -0x8(%rax)
    000002ad: 	movsd	%xmm0, 0x8(%rsi)
    000002b2: 	cmpq	%rax, %rsi
    000002b5: 	ja	.Ltmp106 # Offset: 693
    000002b7: 	jmp	.Ltmp96 # Offset: 695
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp95:
    000002c0: 	retq # Offset: 704
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp103:
    000002c8: 	movq	%r8, %rax
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp107:
    000002d0: 	movsd	(%rcx), %xmm0
    000002d4: 	movsd	(%rax), %xmm1
    000002d8: 	addq	$0x8, %rcx
    000002dc: 	subq	$0x8, %rax
    000002e0: 	movsd	%xmm1, -0x8(%rcx)
    000002e5: 	movsd	%xmm0, 0x8(%rax)
    000002ea: 	cmpq	%rax, %rcx
    000002ed: 	jb	.Ltmp107 # Offset: 749
    000002ef: 	popq	%rbx
    000002f0: 	retq # Offset: 752
DWARF CFI Instructions:
    <empty>
End of Function "_Z20three_reverse_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_"

Binary Function "_Z16gcd_cycle_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x3c20
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0x3c20
  Section     : .text
  Orc Section : .local.text._Z16gcd_cycle_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %r10
    0000000a: 	movq	%rdx, %rdi
    0000000d: 	cmpq	%rdx, %rsi
    00000010: 	je	.Ltmp108 # Offset: 16
    00000016: 	cmpq	%rsi, %rcx
    00000019: 	je	.Ltmp108 # Offset: 25
    0000001f: 	movq	%rsi, %r8
    00000022: 	movq	%rdx, %rsi
    00000025: 	subq	%r10, %rsi
    00000028: 	subq	%rcx, %r8
    0000002b: 	movq	%rsi, %r9
    0000002e: 	movq	%r8, %rax
    00000031: 	subq	%r8, %rdi
    00000034: 	sarq	$0x3, %r9
    00000038: 	sarq	$0x3, %rax
    0000003c: 	movq	%r9, %rdx
    0000003f: 	cmpq	%r8, %rsi
    00000042: 	je	.Ltmp109 # Offset: 66
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp110:
    00000048: 	movq	%rdx, %rsi
    0000004b: 	cqto
    0000004d: 	idivq	%rsi
    00000050: 	movq	%rsi, %rax
    00000053: 	testq	%rdx, %rdx
    00000056: 	jne	.Ltmp110 # Offset: 86
    00000058: 	leaq	(%rcx,%rsi,8), %r10
    0000005c: 	cmpq	%r10, %rcx
    0000005f: 	jae	.Ltmp108 # Offset: 95
    00000061: 	negq	%r9
    00000064: 	movq	%rcx, %rsi
    00000067: 	shlq	$0x3, %r9
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp115:
    00000070: 	movsd	(%rsi), %xmm1
    00000074: 	leaq	(%r8,%rsi), %rax
    00000078: 	movq	%rsi, %rcx
    0000007b: 	jmp	.Ltmp111 # Offset: 123
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp113:
    00000080: 	leaq	(%rax,%r9), %rdx
    00000084: 	cmpq	%rdx, %rsi
    00000087: 	je	.Ltmp112 # Offset: 135
.Ltmp114:
    00000089: 	movq	%rax, %rcx
    0000008c: 	movq	%rdx, %rax
.Ltmp111:
    0000008f: 	movsd	(%rax), %xmm0
    00000093: 	movsd	%xmm0, (%rcx)
    00000097: 	cmpq	%rax, %rdi
    0000009a: 	jbe	.Ltmp113 # Offset: 154
    0000009c: 	leaq	(%rax,%r8), %rdx
    000000a0: 	cmpq	%rdx, %rsi
    000000a3: 	jne	.Ltmp114 # Offset: 163
.Ltmp112:
    000000a5: 	addq	$0x8, %rsi
    000000a9: 	movsd	%xmm1, (%rax)
    000000ad: 	cmpq	%rsi, %r10
    000000b0: 	ja	.Ltmp115 # Offset: 176
.Ltmp108:
    000000b2: 	retq # Offset: 178
.Ltmp109:
    000000b3: 	leaq	0xf(%rcx), %rax
    000000b7: 	leaq	-0x8(%r10), %rdx
    000000bb: 	subq	%r10, %rax
    000000be: 	subq	%rcx, %rdx
    000000c1: 	cmpq	$0x1e, %rax
    000000c5: 	jbe	.Ltmp116 # Offset: 197
    000000c7: 	cmpq	$0x8, %rdx
    000000cb: 	jbe	.Ltmp116 # Offset: 203
    000000cd: 	shrq	$0x3, %rdx
    000000d1: 	xorl	%eax, %eax
    000000d3: 	addq	$0x1, %rdx
    000000d7: 	movq	%rdx, %rsi
    000000da: 	shrq	%rsi
    000000dd: 	shlq	$0x4, %rsi
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp117:
    000000e8: 	movupd	(%rcx,%rax), %xmm0
    000000ed: 	movupd	(%r10,%rax), %xmm2
    000000f3: 	movups	%xmm2, (%rcx,%rax)
    000000f7: 	movups	%xmm0, (%r10,%rax)
    000000fc: 	addq	$0x10, %rax
    00000100: 	cmpq	%rax, %rsi
    00000103: 	jne	.Ltmp117 # Offset: 259
    00000105: 	movq	%rdx, %rsi
    00000108: 	andq	$-0x2, %rsi
    0000010c: 	leaq	(,%rsi,8), %rax
    00000114: 	addq	%rax, %rcx
    00000117: 	addq	%r10, %rax
    0000011a: 	cmpq	%rsi, %rdx
    0000011d: 	je	.Ltmp108 # Offset: 285
    0000011f: 	movsd	(%rcx), %xmm0
    00000123: 	movsd	(%rax), %xmm1
    00000127: 	movsd	%xmm1, (%rcx)
    0000012b: 	movsd	%xmm0, (%rax)
    0000012f: 	retq # Offset: 303
.Ltmp116:
    00000130: 	movq	%r10, %rdx
    00000133: 	xorl	%eax, %eax
    00000135: 	subq	%rcx, %rdx
.Ltmp118:
    00000138: 	movsd	(%rcx,%rax), %xmm0
    0000013d: 	movsd	(%r10,%rax), %xmm1
    00000143: 	movsd	%xmm1, (%rcx,%rax)
    00000148: 	movsd	%xmm0, (%r10,%rax)
    0000014e: 	addq	$0x8, %rax
    00000152: 	cmpq	%rdx, %rax
    00000155: 	jne	.Ltmp118 # Offset: 341
    00000157: 	retq # Offset: 343
DWARF CFI Instructions:
    <empty>
End of Function "_Z16gcd_cycle_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_"

Binary Function "_Z34gries_mills_rotate_counted_wrapperIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3d80
  Size        : 0x13b
  MaxSize     : 0x140
  Offset      : 0x3d80
  Section     : .text
  Orc Section : .local.text._Z34gries_mills_rotate_counted_wrapperIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp119 # Offset: 10
    00000010: 	cmpq	%rsi, %rdx
    00000013: 	je	.Ltmp119 # Offset: 19
    00000019: 	movq	%rcx, %r8
    0000001c: 	subq	%rcx, %rdx
    0000001f: 	pushq	%rbp
    00000020: 	movq	%rdi, %rsi
    00000023: 	subq	%rdi, %r8
    00000026: 	sarq	$0x3, %rdx
    0000002a: 	pushq	%rbx
    0000002b: 	xorl	%r9d, %r9d
    0000002e: 	sarq	$0x3, %r8
    00000032: 	movq	%rcx, %rbx
    00000035: 	leaq	(%rdx,%r8), %r11
    00000039: 	movq	%r8, %r10
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp125:
    00000040: 	movq	%r10, %rdi
    00000043: 	movq	%r11, %rax
    00000046: 	subq	%r9, %rdi
    00000049: 	subq	%r8, %rax
    0000004c: 	cmpq	%rax, %rdi
    0000004f: 	cmovaq	%rax, %rdi
    00000053: 	testq	%rdi, %rdi
    00000056: 	je	.Ltmp120 # Offset: 86
    0000005c: 	leaq	0xf(%rsi), %rax
    00000060: 	subq	%rcx, %rax
    00000063: 	cmpq	$0x1e, %rax
    00000067: 	jbe	.Ltmp121 # Offset: 103
    0000006d: 	leaq	-0x1(%rdi), %rax
    00000071: 	cmpq	$0x1, %rax
    00000075: 	jbe	.Ltmp121 # Offset: 117
    0000007b: 	movq	%rdi, %rbp
    0000007e: 	xorl	%eax, %eax
    00000080: 	xorl	%edx, %edx
    00000082: 	shrq	%rbp
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp122:
    00000088: 	movupd	(%rsi,%rax), %xmm0
    0000008d: 	movupd	(%rcx,%rax), %xmm2
    00000092: 	addq	$0x1, %rdx
    00000096: 	movups	%xmm2, (%rsi,%rax)
    0000009a: 	movups	%xmm0, (%rcx,%rax)
    0000009e: 	addq	$0x10, %rax
    000000a2: 	cmpq	%rdx, %rbp
    000000a5: 	jne	.Ltmp122 # Offset: 165
    000000a7: 	movq	%rdi, %rbp
    000000aa: 	andq	$-0x2, %rbp
    000000ae: 	leaq	(,%rbp,8), %rax
    000000b6: 	leaq	(%rsi,%rax), %rdx
    000000ba: 	addq	%rcx, %rax
    000000bd: 	cmpq	%rbp, %rdi
    000000c0: 	je	.Ltmp123 # Offset: 192
    000000c2: 	movsd	(%rdx), %xmm0
    000000c6: 	movsd	(%rax), %xmm1
    000000ca: 	movsd	%xmm1, (%rdx)
    000000ce: 	movsd	%xmm0, (%rax)
.Ltmp123:
    000000d2: 	leaq	(,%rdi,8), %rax
    000000da: 	addq	%rax, %rsi
    000000dd: 	addq	%rax, %rcx
.Ltmp120:
    000000e0: 	addq	%rdi, %r8
    000000e3: 	addq	%rdi, %r9
    000000e6: 	cmpq	%r8, %r11
    000000e9: 	je	.Ltmp124 # Offset: 233
    000000eb: 	cmpq	%r9, %r10
    000000ee: 	jne	.Ltmp125 # Offset: 238
    000000f4: 	movq	%rcx, %rbx
    000000f7: 	movq	%r8, %r10
    000000fa: 	jmp	.Ltmp125 # Offset: 250
    000000ff: 	nop # Size: 1
.Ltmp124:
    00000100: 	cmpq	%r9, %r10
    00000103: 	je	.Ltmp126 # Offset: 259
    00000105: 	movq	%rbx, %rcx
    00000108: 	movq	%r10, %r8
    0000010b: 	jmp	.Ltmp125 # Offset: 267
.Ltmp121:
    00000110: 	xorl	%eax, %eax
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp127:
    00000118: 	movsd	(%rsi,%rax,8), %xmm0
    0000011d: 	movsd	(%rcx,%rax,8), %xmm1
    00000122: 	movsd	%xmm1, (%rsi,%rax,8)
    00000127: 	movsd	%xmm0, (%rcx,%rax,8)
    0000012c: 	addq	$0x1, %rax
    00000130: 	cmpq	%rax, %rdi
    00000133: 	jne	.Ltmp127 # Offset: 307
    00000135: 	jmp	.Ltmp123 # Offset: 309
.Ltmp126:
    00000137: 	popq	%rbx
    00000138: 	popq	%rbp
    00000139: 	retq # Offset: 313
.Ltmp119:
    0000013a: 	retq # Offset: 314
DWARF CFI Instructions:
    <empty>
End of Function "_Z34gries_mills_rotate_counted_wrapperIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_"

Binary Function "_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/rotate_sequence.cpp/1
  Number      : 50
  State       : disassembled
  Address     : 0x3ec0
  Size        : 0x121
  MaxSize     : 0x130
  Offset      : 0x3ec0
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %rbx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movq	%rax, %r10
    0000000e: 	movq	%rsi, %rdi
    00000011: 	movq	%rdx, %r11
    00000014: 	andl	$0x1, %ebx
    00000017: 	shrq	$0x3f, %r10
    0000001b: 	addq	%rax, %r10
    0000001e: 	sarq	%r10
    00000021: 	cmpq	%r10, %rsi
    00000024: 	jl	.Ltmp128 # Offset: 36
    00000026: 	jmp	.Ltmp129 # Offset: 38
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp131:
    00000030: 	movq	%rdx, %rsi
.Ltmp128:
    00000033: 	leaq	0x1(%rsi), %rax
    00000037: 	leaq	(%rax,%rax), %rdx
    0000003b: 	shlq	$0x4, %rax
    0000003f: 	leaq	-0x1(%rdx), %r8
    00000043: 	addq	%rcx, %rax
    00000046: 	leaq	(%rcx,%r8,8), %r9
    0000004a: 	movsd	(%rax), %xmm1
    0000004e: 	movsd	(%r9), %xmm2
    00000053: 	comisd	%xmm1, %xmm2
    00000057: 	jbe	.Ltmp130 # Offset: 87
    00000059: 	movapd	%xmm2, %xmm1
    0000005d: 	movq	%r9, %rax
    00000060: 	movq	%r8, %rdx
.Ltmp130:
    00000063: 	movsd	%xmm1, (%rcx,%rsi,8)
    00000068: 	cmpq	%rdx, %r10
    0000006b: 	jg	.Ltmp131 # Offset: 107
    0000006d: 	testq	%rbx, %rbx
    00000070: 	je	.Ltmp132 # Offset: 112
.Ltmp137:
    00000072: 	leaq	-0x1(%rdx), %r8
    00000076: 	movq	%r8, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%r8, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%rdi, %rdx
    00000086: 	jg	.Ltmp133 # Offset: 134
    00000088: 	jmp	.Ltmp134 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp136:
    00000090: 	leaq	-0x1(%rsi), %rdx
    00000094: 	movsd	%xmm1, (%rax)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	movq	%rsi, %rdx
    000000a5: 	sarq	%rax
    000000a8: 	cmpq	%rsi, %rdi
    000000ab: 	jge	.Ltmp135 # Offset: 171
    000000ad: 	movq	%rax, %rsi
.Ltmp133:
    000000b0: 	leaq	(%rcx,%rsi,8), %r8
    000000b4: 	leaq	(%rcx,%rdx,8), %rax
    000000b8: 	movsd	(%r8), %xmm1
    000000bd: 	comisd	%xmm1, %xmm0
    000000c1: 	ja	.Ltmp136 # Offset: 193
.Ltmp134:
    000000c3: 	movsd	%xmm0, (%rax)
    000000c7: 	popq	%rbx
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp129:
    000000d0: 	leaq	(%rcx,%rsi,8), %rax
    000000d4: 	testq	%rbx, %rbx
    000000d7: 	jne	.Ltmp134 # Offset: 215
    000000d9: 	movq	%rdi, %rdx
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp132:
    000000e0: 	subq	$0x2, %r11
    000000e4: 	movq	%r11, %rsi
    000000e7: 	shrq	$0x3f, %rsi
    000000eb: 	addq	%r11, %rsi
    000000ee: 	sarq	%rsi
    000000f1: 	cmpq	%rsi, %rdx
    000000f4: 	jne	.Ltmp137 # Offset: 244
    000000fa: 	leaq	0x1(%rdx,%rdx), %rdx
    000000ff: 	leaq	(%rcx,%rdx,8), %rsi
    00000103: 	movsd	(%rsi), %xmm1
    00000107: 	movsd	%xmm1, (%rax)
    0000010b: 	movq	%rsi, %rax
    0000010e: 	jmp	.Ltmp137 # Offset: 270
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp135:
    00000118: 	movq	%r8, %rax
    0000011b: 	movsd	%xmm0, (%rax)
    0000011f: 	popq	%rbx
    00000120: 	retq # Offset: 288
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/rotate_sequence.cpp/1
  Number      : 51
  State       : disassembled
  Address     : 0x3ff0
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x3ff0
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp138 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp139 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp141:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,8), %rsi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp140 # Offset: 68
.Ltmp142:
    00000046: 	movq	%rax, %rdi
.Ltmp139:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000005f: 	movsd	(%rsi), %xmm1
    00000063: 	comisd	%xmm1, %xmm2
    00000067: 	ja	.Ltmp141 # Offset: 103
    00000069: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000006e: 	cmpq	%r9, %rax
    00000071: 	jl	.Ltmp142 # Offset: 113
.Ltmp140:
    00000073: 	testq	%r11, %r11
    00000076: 	je	.Ltmp143 # Offset: 118
.Ltmp148:
    00000078: 	leaq	-0x1(%rax), %rdx
    0000007c: 	movq	%rdx, %rdi
    0000007f: 	shrq	$0x3f, %rdi
    00000083: 	addq	%rdx, %rdi
    00000086: 	sarq	%rdi
    00000089: 	cmpq	%r8, %rax
    0000008c: 	jg	.Ltmp144 # Offset: 140
    0000008e: 	jmp	.Ltmp145 # Offset: 142
.Ltmp147:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movsd	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp146 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp144:
    000000b3: 	leaq	(%rcx,%rdi,8), %r9
    000000b7: 	leaq	(%rcx,%rax,8), %rsi
    000000bb: 	movsd	(%r9), %xmm1
    000000c0: 	comisd	%xmm1, %xmm0
    000000c4: 	ja	.Ltmp147 # Offset: 196
.Ltmp145:
    000000c6: 	movsd	%xmm0, (%rsi)
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp138:
    000000d0: 	leaq	(%rdi,%rsi,8), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp145 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp143:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp148 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movsd	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,8), %rsi
    0000010d: 	jmp	.Ltmp148 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp146:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movsd	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/rotate_sequence.cpp/1
  Number      : 52
  State       : disassembled
  Address     : 0x4110
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x4110
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	pushq	%r13
    00000002: 	movq	%rsi, %rax
    00000005: 	pushq	%r12
    00000007: 	subq	%rdi, %rax
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rsi, %rbx
    0000000f: 	subq	$0x8, %rsp
    00000013: 	cmpq	$0x80, %rax
    00000019: 	jle	.Ltmp149 # Offset: 25
    0000001f: 	movq	%rdi, %rbp
    00000022: 	movq	%rdx, %r13
    00000025: 	leaq	0x8(%rdi), %r12
    00000029: 	testq	%rdx, %rdx
    0000002c: 	je	.Ltmp150 # Offset: 44
.Ltmp161:
    00000032: 	movq	%rsi, %rax
    00000035: 	movupd	(%rbp), %xmm0
    0000003a: 	subq	$0x1, %r13
    0000003e: 	movsd	-0x8(%rsi), %xmm3
    00000043: 	subq	%rbp, %rax
    00000046: 	movq	%rax, %rdx
    00000049: 	shrq	$0x3f, %rax
    0000004d: 	movapd	%xmm0, %xmm4
    00000051: 	movapd	%xmm0, %xmm1
    00000055: 	sarq	$0x3, %rdx
    00000059: 	shufpd	$0x1, %xmm0, %xmm4
    0000005e: 	unpckhpd	%xmm0, %xmm0
    00000062: 	addq	%rdx, %rax
    00000065: 	sarq	%rax
    00000068: 	leaq	(%rbp,%rax,8), %rax
    0000006d: 	movsd	(%rax), %xmm2
    00000071: 	comisd	%xmm0, %xmm2
    00000075: 	jbe	.Ltmp151 # Offset: 117
    00000077: 	comisd	%xmm2, %xmm3
    0000007b: 	ja	.Ltmp152 # Offset: 123
    00000081: 	comisd	%xmm0, %xmm3
    00000085: 	ja	.Ltmp153 # Offset: 133
.Ltmp159:
    00000087: 	movups	%xmm4, (%rbp)
    0000008b: 	movsd	-0x8(%rsi), %xmm2
.Ltmp160:
    00000090: 	movq	%rsi, %rax
    00000093: 	movq	%r12, %rbx
    00000096: 	jmp	.Ltmp154 # Offset: 150
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp155:
    000000a0: 	movsd	0x8(%rbx), %xmm1
    000000a5: 	addq	$0x8, %rbx
.Ltmp154:
    000000a9: 	comisd	%xmm1, %xmm0
    000000ad: 	ja	.Ltmp155 # Offset: 173
    000000af: 	subq	$0x8, %rax
    000000b3: 	comisd	%xmm0, %xmm2
    000000b7: 	jbe	.Ltmp156 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp157:
    000000c0: 	movsd	-0x8(%rax), %xmm2
    000000c5: 	subq	$0x8, %rax
    000000c9: 	comisd	%xmm0, %xmm2
    000000cd: 	ja	.Ltmp157 # Offset: 205
.Ltmp156:
    000000cf: 	cmpq	%rbx, %rax
    000000d2: 	jbe	.Ltmp158 # Offset: 210
    000000d4: 	movsd	%xmm2, (%rbx)
    000000d8: 	addq	$0x8, %rbx
    000000dc: 	movsd	-0x8(%rax), %xmm2
    000000e1: 	movsd	%xmm1, (%rax)
    000000e5: 	movsd	(%rbx), %xmm1
    000000e9: 	movsd	(%rbp), %xmm0
    000000ee: 	jmp	.Ltmp154 # Offset: 238
.Ltmp151:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp159 # Offset: 244
    000000f6: 	comisd	%xmm2, %xmm3
    000000fa: 	jbe	.Ltmp152 # Offset: 250
.Ltmp153:
    000000fc: 	movsd	%xmm3, (%rbp)
    00000101: 	movapd	%xmm1, %xmm2
    00000105: 	movsd	%xmm1, -0x8(%rsi)
    0000010a: 	movsd	(%rbp), %xmm0
    0000010f: 	movsd	0x8(%rbp), %xmm1
    00000114: 	jmp	.Ltmp160 # Offset: 276
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp158:
    00000120: 	movq	%r13, %rdx
    00000123: 	movq	%rbx, %rdi
    00000126: 	callq	"_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1" # Offset: 294
    0000012b: 	movq	%rbx, %rax
    0000012e: 	subq	%rbp, %rax
    00000131: 	cmpq	$0x80, %rax
    00000137: 	jle	.Ltmp149 # Offset: 311
    0000013d: 	testq	%r13, %r13
    00000140: 	je	.Ltmp150 # Offset: 320
    00000142: 	movq	%rbx, %rsi
    00000145: 	jmp	.Ltmp161 # Offset: 325
.Ltmp152:
    0000014a: 	movsd	%xmm2, (%rbp)
    0000014f: 	movsd	%xmm1, (%rax)
    00000153: 	movsd	0x8(%rbp), %xmm1
    00000158: 	movsd	(%rbp), %xmm0
    0000015d: 	movsd	-0x8(%rsi), %xmm2
    00000162: 	jmp	.Ltmp160 # Offset: 354
.Ltmp150:
    00000167: 	sarq	$0x3, %rax
    0000016b: 	leaq	-0x2(%rax), %r13
    0000016f: 	movq	%rax, %r12
    00000172: 	sarq	%r13
    00000175: 	jmp	.Ltmp162 # Offset: 373
.Ltmp163:
    00000177: 	subq	$0x1, %r13
.Ltmp162:
    0000017b: 	movsd	(%rbp,%r13,8), %xmm0
    00000182: 	movq	%r12, %rdx
    00000185: 	movq	%r13, %rsi
    00000188: 	movq	%rbp, %rdi
    0000018b: 	callq	"_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1" # Offset: 395
    00000190: 	testq	%r13, %r13
    00000193: 	jne	.Ltmp163 # Offset: 403
    00000195: 	subq	$0x8, %rbx
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp164:
    000001a0: 	movq	%rbx, %r12
    000001a3: 	movsd	(%rbp), %xmm1
    000001a8: 	movsd	(%rbx), %xmm0
    000001ac: 	xorl	%esi, %esi
    000001ae: 	subq	%rbp, %r12
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	subq	$0x8, %rbx
    000001b8: 	movq	%r12, %rdx
    000001bb: 	movsd	%xmm1, 0x8(%rbx)
    000001c0: 	sarq	$0x3, %rdx
    000001c4: 	callq	"_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1" # Offset: 452
    000001c9: 	cmpq	$0x8, %r12
    000001cd: 	jg	.Ltmp164 # Offset: 461
.Ltmp149:
    000001cf: 	addq	$0x8, %rsp
    000001d3: 	popq	%rbx
    000001d4: 	popq	%rbp
    000001d5: 	popq	%r12
    000001d7: 	popq	%r13
    000001d9: 	retq # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/rotate_sequence.cpp/1
  Number      : 53
  State       : disassembled
  Address     : 0x42f0
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0x42f0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x80, %rax
    0000000c: 	jle	.Ltmp165 # Offset: 12
    00000012: 	pushq	%r13
    00000014: 	movq	%rdx, %r13
    00000017: 	pushq	%r12
    00000019: 	leaq	0x8(%rdi), %r12
    0000001d: 	pushq	%rbp
    0000001e: 	movq	%rdi, %rbp
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x8, %rsp
    00000026: 	testq	%rdx, %rdx
    00000029: 	je	.Ltmp166 # Offset: 41
.Ltmp179:
    0000002f: 	movupd	(%rbp), %xmm0
    00000034: 	sarq	$0x4, %rax
    00000038: 	subq	$0x1, %r13
    0000003c: 	movsd	-0x8(%rsi), %xmm3
    00000041: 	leaq	(%rbp,%rax,8), %rax
    00000046: 	movapd	%xmm0, %xmm4
    0000004a: 	movsd	(%rax), %xmm2
    0000004e: 	movapd	%xmm0, %xmm1
    00000052: 	shufpd	$0x1, %xmm0, %xmm4
    00000057: 	unpckhpd	%xmm0, %xmm0
    0000005b: 	comisd	%xmm0, %xmm2
    0000005f: 	jbe	.Ltmp167 # Offset: 95
    00000061: 	comisd	%xmm2, %xmm3
    00000065: 	ja	.Ltmp168 # Offset: 101
    0000006b: 	comisd	%xmm0, %xmm3
    0000006f: 	ja	.Ltmp169 # Offset: 111
.Ltmp175:
    00000071: 	movups	%xmm4, (%rbp)
    00000075: 	movsd	-0x8(%rsi), %xmm2
.Ltmp176:
    0000007a: 	movq	%rsi, %rax
    0000007d: 	movq	%r12, %rbx
    00000080: 	jmp	.Ltmp170 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp171:
    00000088: 	movsd	0x8(%rbx), %xmm1
    0000008d: 	addq	$0x8, %rbx
.Ltmp170:
    00000091: 	comisd	%xmm1, %xmm0
    00000095: 	ja	.Ltmp171 # Offset: 149
    00000097: 	subq	$0x8, %rax
    0000009b: 	comisd	%xmm0, %xmm2
    0000009f: 	jbe	.Ltmp172 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp173:
    000000a8: 	movsd	-0x8(%rax), %xmm2
    000000ad: 	subq	$0x8, %rax
    000000b1: 	comisd	%xmm0, %xmm2
    000000b5: 	ja	.Ltmp173 # Offset: 181
.Ltmp172:
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jbe	.Ltmp174 # Offset: 186
    000000bc: 	movsd	%xmm2, (%rbx)
    000000c0: 	addq	$0x8, %rbx
    000000c4: 	movsd	-0x8(%rax), %xmm2
    000000c9: 	movsd	%xmm1, (%rax)
    000000cd: 	movsd	(%rbx), %xmm1
    000000d1: 	movsd	(%rbp), %xmm0
    000000d6: 	jmp	.Ltmp170 # Offset: 214
.Ltmp167:
    000000d8: 	comisd	%xmm0, %xmm3
    000000dc: 	ja	.Ltmp175 # Offset: 220
    000000de: 	comisd	%xmm2, %xmm3
    000000e2: 	jbe	.Ltmp168 # Offset: 226
.Ltmp169:
    000000e4: 	movsd	%xmm3, (%rbp)
    000000e9: 	movapd	%xmm1, %xmm2
    000000ed: 	movsd	%xmm1, -0x8(%rsi)
    000000f2: 	movsd	(%rbp), %xmm0
    000000f7: 	movsd	0x8(%rbp), %xmm1
    000000fc: 	jmp	.Ltmp176 # Offset: 252
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp174:
    00000108: 	movq	%r13, %rdx
    0000010b: 	movq	%rbx, %rdi
    0000010e: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 270
    00000113: 	movq	%rbx, %rax
    00000116: 	subq	%rbp, %rax
    00000119: 	cmpq	$0x80, %rax
    0000011f: 	jle	.Ltmp177 # Offset: 287
    00000125: 	testq	%r13, %r13
    00000128: 	je	.Ltmp178 # Offset: 296
    0000012a: 	movq	%rbx, %rsi
    0000012d: 	jmp	.Ltmp179 # Offset: 301
.Ltmp168:
    00000132: 	movsd	%xmm2, (%rbp)
    00000137: 	movsd	%xmm1, (%rax)
    0000013b: 	movsd	0x8(%rbp), %xmm1
    00000140: 	movsd	(%rbp), %xmm0
    00000145: 	movsd	-0x8(%rsi), %xmm2
    0000014a: 	jmp	.Ltmp176 # Offset: 330
.Ltmp166:
    0000014f: 	movq	%rsi, %rbx
.Ltmp178:
    00000152: 	sarq	$0x3, %rax
    00000156: 	movq	%rbp, %rdi
    00000159: 	leaq	-0x2(%rax), %r13
    0000015d: 	movq	%rax, %rdx
    00000160: 	movq	%rax, %r12
    00000163: 	sarq	%r13
    00000166: 	movsd	(%rbp,%r13,8), %xmm0
    0000016d: 	movq	%r13, %rsi
    00000170: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 368
.Ltmp180:
    00000175: 	subq	$0x1, %r13
    00000179: 	movq	%r12, %rdx
    0000017c: 	movq	%rbp, %rdi
    0000017f: 	movsd	(%rbp,%r13,8), %xmm0
    00000186: 	movq	%r13, %rsi
    00000189: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 393
    0000018e: 	testq	%r13, %r13
    00000191: 	jne	.Ltmp180 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp181:
    00000198: 	subq	$0x8, %rbx
    0000019c: 	movsd	(%rbp), %xmm1
    000001a1: 	movsd	(%rbx), %xmm0
    000001a5: 	xorl	%esi, %esi
    000001a7: 	movq	%rbx, %r12
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	subq	%rbp, %r12
    000001b0: 	movsd	%xmm1, (%rbx)
    000001b4: 	movq	%r12, %rdx
    000001b7: 	sarq	$0x3, %rdx
    000001bb: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 443
    000001c0: 	cmpq	$0x8, %r12
    000001c4: 	jg	.Ltmp181 # Offset: 452
.Ltmp177:
    000001c6: 	addq	$0x8, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	retq # Offset: 464
.Ltmp165:
    000001d1: 	retq # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x44d0
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x44d0
  Section     : .text
  Orc Section : .local.text._ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	jmp	"_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1" # TAILCALL  # Offset: 4
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_"

Binary Function "_ZNSt3_V26rotateISt14_List_iteratorIdEEET_S3_S3_S3_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x44e0
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x44e0
  Section     : .text
  Orc Section : .local.text._ZNSt3_V26rotateISt14_List_iteratorIdEEET_S3_S3_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	jmp	"_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1" # TAILCALL  # Offset: 4
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt3_V26rotateISt14_List_iteratorIdEEET_S3_S3_S3_"

Binary Function "_ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/1
                _ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/rotate_sequence.cpp/1
  Number      : 56
  State       : disassembled
  Address     : 0x44f0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x44f0
  Section     : .text
  Orc Section : .local.text._ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	movq	(%rdi), %r10
    00000003: 	testq	%r10, %r10
    00000006: 	je	.Ltmp182 # Offset: 6
    0000000c: 	pushq	%rbx
    0000000d: 	movl	$0x1, %r9d
    00000013: 	movq	%rdi, %rbx
.Ltmp197:
    00000016: 	movq	%r10, %rdx
    00000019: 	xorl	%esi, %esi
    0000001b: 	xorl	%r10d, %r10d
    0000001e: 	xorl	%r11d, %r11d
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp195:
    00000028: 	addq	$0x1, %r11
    0000002c: 	movq	%rdx, %rcx
    0000002f: 	xorl	%eax, %eax
    00000031: 	jmp	.Ltmp183 # Offset: 49
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp185:
    00000038: 	movq	(%rcx), %rcx
    0000003b: 	addq	$0x1, %rax
    0000003f: 	testq	%rcx, %rcx
    00000042: 	je	.Ltmp184 # Offset: 66
.Ltmp183:
    00000044: 	cmpq	%r9, %rax
    00000047: 	jne	.Ltmp185 # Offset: 71
.Ltmp184:
    00000049: 	movq	%rdx, %r8
    0000004c: 	movq	%r9, %rdi
    0000004f: 	movq	%rcx, %rdx
    00000052: 	jmp	.Ltmp186 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp190:
    00000058: 	testq	%rdi, %rdi
    0000005b: 	je	.Ltmp187 # Offset: 91
    0000005d: 	testq	%rdx, %rdx
    00000060: 	je	.Ltmp188 # Offset: 96
.Ltmp192:
    00000062: 	movq	%rdx, %rcx
    00000065: 	subq	$0x1, %rdi
    00000069: 	movq	(%rdx), %rdx
    0000006c: 	testq	%rsi, %rsi
    0000006f: 	je	.Ltmp189 # Offset: 111
.Ltmp193:
    00000071: 	movq	%rcx, (%rsi)
.Ltmp194:
    00000074: 	movq	%rcx, %rsi
.Ltmp186:
    00000077: 	testq	%rax, %rax
    0000007a: 	je	.Ltmp190 # Offset: 122
    0000007c: 	testq	%rdi, %rdi
    0000007f: 	je	.Ltmp191 # Offset: 127
    00000081: 	testq	%rdx, %rdx
    00000084: 	je	.Ltmp191 # Offset: 132
    00000086: 	movsd	0x8(%r8), %xmm0
    0000008c: 	comisd	0x8(%rdx), %xmm0
    00000091: 	ja	.Ltmp192 # Offset: 145
.Ltmp191:
    00000093: 	movq	%r8, %rcx
    00000096: 	subq	$0x1, %rax
    0000009a: 	movq	(%r8), %r8
    0000009d: 	testq	%rsi, %rsi
    000000a0: 	jne	.Ltmp193 # Offset: 160
.Ltmp189:
    000000a2: 	movq	%rcx, %r10
    000000a5: 	jmp	.Ltmp194 # Offset: 165
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp187:
    000000b0: 	testq	%rdx, %rdx
    000000b3: 	jne	.Ltmp195 # Offset: 179
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp188:
    000000c0: 	movq	$0x0, (%rsi)
    000000c7: 	cmpq	$0x1, %r11
    000000cb: 	jbe	.Ltmp196 # Offset: 203
    000000cd: 	addq	%r9, %r9
    000000d0: 	testq	%r10, %r10
    000000d3: 	jne	.Ltmp197 # Offset: 211
    000000d9: 	movq	$0x0, 0x0
    000000e5: 	ud2
.Ltmp196:
    000000e7: 	movq	%r10, (%rbx)
    000000ea: 	popq	%rbx
    000000eb: 	retq # Offset: 235
.Ltmp182:
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 57
  State       : disassembled
  Address     : 0x45e0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x45e0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp198 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp201:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp200:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp199 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp200 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp201 # Offset: 142
.Ltmp198:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp202 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp203 # Offset: 164
.Ltmp206:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp204 # Offset: 177
.Ltmp205:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp203 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp205 # Offset: 214
.Ltmp204:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp206 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp207 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp209:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp208 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp208:
    0000010a: 	addq	$0x20, %r13
.Ltmp203:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp209 # Offset: 275
.Ltmp207:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp210 # Offset: 283
.Ltmp216:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp211 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp212:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp212 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp211:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp199:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp200 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp201 # Offset: 389
    0000018b: 	jmp	.Ltmp198 # Offset: 395
.Ltmp202:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp207 # Offset: 405
.Ltmp215:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp213 # Offset: 422
.Ltmp214:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp207 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp214 # Offset: 463
.Ltmp213:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp215 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp216 # Offset: 482
.Ltmp210:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZNSt3_V26rotateISt18_Fwd_list_iteratorIdEEET_S3_S3_S3_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x47e0
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x47e0
  Section     : .text
  Orc Section : .local.text._ZNSt3_V26rotateISt18_Fwd_list_iteratorIdEEET_S3_S3_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp217 # Offset: 10
    00000010: 	movq	%rdi, %rax
    00000013: 	cmpq	%rsi, %rdx
    00000016: 	je	.Ltmp217 # Offset: 22
.Ltmp223:
    00000018: 	movq	%rsi, %rax
.Ltmp219:
    0000001b: 	movsd	0x8(%rsi), %xmm1
    00000020: 	movsd	0x8(%rdi), %xmm0
    00000025: 	movsd	%xmm1, 0x8(%rdi)
    0000002a: 	movq	(%rdi), %rdi
    0000002d: 	movsd	%xmm0, 0x8(%rsi)
    00000032: 	movq	(%rsi), %rsi
    00000035: 	cmpq	%rdi, %rax
    00000038: 	je	.Ltmp218 # Offset: 56
    0000003a: 	cmpq	%rdx, %rsi
    0000003d: 	jne	.Ltmp219 # Offset: 61
    0000003f: 	cmpq	%rax, %rdx
    00000042: 	je	.Ltmp220 # Offset: 66
    00000044: 	movq	%rax, %rsi
    00000047: 	movq	%rdi, %rcx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp222:
    00000050: 	movsd	0x8(%rax), %xmm1
    00000055: 	movsd	0x8(%rcx), %xmm0
    0000005a: 	movsd	%xmm1, 0x8(%rcx)
    0000005f: 	movq	(%rcx), %rcx
    00000062: 	movsd	%xmm0, 0x8(%rax)
    00000067: 	movq	(%rax), %rax
    0000006a: 	cmpq	%rsi, %rcx
    0000006d: 	je	.Ltmp221 # Offset: 109
    0000006f: 	cmpq	%rax, %rdx
    00000072: 	jne	.Ltmp222 # Offset: 114
    00000074: 	movq	%rsi, %rax
.Ltmp221:
    00000077: 	cmpq	%rax, %rdx
    0000007a: 	je	.Ltmp220 # Offset: 122
    0000007c: 	movq	%rax, %rsi
    0000007f: 	jmp	.Ltmp222 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp218:
    00000088: 	cmpq	%rdx, %rsi
    0000008b: 	jne	.Ltmp223 # Offset: 139
.Ltmp220:
    0000008d: 	movq	%rdi, %rax
.Ltmp217:
    00000090: 	retq # Offset: 144
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt3_V26rotateISt18_Fwd_list_iteratorIdEEET_S3_S3_S3_"

Binary Function "_Z25gcd_cycle_buffered_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x4880
  Size        : 0x8bc
  MaxSize     : 0x8c0
  Offset      : 0x4880
  Section     : .text
  Orc Section : .local.text._Z25gcd_cycle_buffered_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x6000(%rsp), %r11
.Ltmp224:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp224 # Offset: 37
    00000027: 	subq	$0x28, %rsp
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x6018(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movq	%rdi, 0x10(%rsp)
    00000043: 	cmpq	%rsi, %rdi
    00000046: 	je	.Ltmp225 # Offset: 70
    0000004c: 	movq	%rsi, %r8
    0000004f: 	movq	%rdx, %rcx
    00000052: 	cmpq	%rdx, %rsi
    00000055: 	je	.Ltmp225 # Offset: 85
    0000005b: 	movq	%rsi, %r15
    0000005e: 	movq	%rdx, %r12
    00000061: 	movq	%rdi, %rbx
    00000064: 	subq	%rdi, %r15
    00000067: 	subq	%rsi, %r12
    0000006a: 	cmpq	%r12, %r15
    0000006d: 	je	.Ltmp226 # Offset: 109
    00000073: 	movq	%rdx, %rax
    00000076: 	subq	%rdi, %rax
    00000079: 	cmpq	$0xe8, %rax
    0000007f: 	jbe	.Ltmp227 # Offset: 127
    00000085: 	movq	%rdx, %rax
    00000088: 	subq	%r15, %rax
    0000008b: 	movq	%rax, 0x8(%rsp)
    00000090: 	cmpq	$0x5fe0, %r15
    00000097: 	jbe	.Ltmp228 # Offset: 151
    0000009d: 	cmpq	$0x5fe0, %r12
    000000a4: 	jbe	.Ltmp229 # Offset: 164
    000000aa: 	sarq	$0x3, %r12
    000000ae: 	movq	%r15, %rax
    000000b1: 	movq	%r12, 0x28(%rsp)
    000000b6: 	sarq	$0x3, %rax
    000000ba: 	movq	%r12, %rdx
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp230:
    000000c0: 	movq	%rdx, %rbp
    000000c3: 	cqto
    000000c5: 	idivq	%rbp
    000000c8: 	movq	%rbp, %rax
    000000cb: 	testq	%rdx, %rdx
    000000ce: 	jne	.Ltmp230 # Offset: 206
    000000d0: 	movl	$0xbfc, %r12d
    000000d6: 	cmpq	%r12, %rbp
    000000d9: 	cmovleq	%rbp, %r12
    000000dd: 	cmpq	$0x27, %rbp
    000000e1: 	jle	.Ltmp231 # Offset: 225
    000000e7: 	leaq	0x30(%rsp), %rax
    000000ec: 	movq	%rax, 0x20(%rsp)
    000000f1: 	movq	0x28(%rsp), %rax
    000000f6: 	negq	%rax
    000000f9: 	shlq	$0x3, %rax
    000000fd: 	movq	%rax, 0x18(%rsp)
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp238:
    00000108: 	movq	0x10(%rsp), %rax
    0000010d: 	leaq	(,%r12,8), %r13
    00000115: 	movq	%rax, %rbx
    00000118: 	addq	%r13, %rax
    0000011b: 	movq	%rax, 0x10(%rsp)
    00000120: 	cmpq	%rbx, %rax
    00000123: 	je	.Ltmp232 # Offset: 291
    00000125: 	movq	0x20(%rsp), %rdi
    0000012a: 	movq	%r13, %rdx
    0000012d: 	movq	%rbx, %rsi
    00000130: 	callq	memcpy@PLT # Offset: 304
.Ltmp232:
    00000135: 	leaq	(%rbx,%r15), %r14
    00000139: 	testq	%r13, %r13
    0000013c: 	je	.Ltmp233 # Offset: 316
    0000013e: 	movq	%rbx, %rdi
    00000141: 	jmp	.Ltmp234 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp236:
    00000148: 	movq	0x18(%rsp), %rax
    0000014d: 	addq	%r14, %rax
    00000150: 	cmpq	%rax, %rbx
    00000153: 	je	.Ltmp235 # Offset: 339
.Ltmp237:
    00000155: 	movq	%r14, %rdi
    00000158: 	movq	%rax, %r14
.Ltmp234:
    0000015b: 	movq	%r13, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	callq	memmove@PLT # Offset: 353
    00000166: 	cmpq	0x8(%rsp), %r14
    0000016b: 	jae	.Ltmp236 # Offset: 363
    0000016d: 	leaq	(%r14,%r15), %rax
    00000171: 	cmpq	%rbx, %rax
    00000174: 	jne	.Ltmp237 # Offset: 372
.Ltmp235:
    00000176: 	movq	0x20(%rsp), %rsi
    0000017b: 	movq	%r13, %rdx
    0000017e: 	movq	%r14, %rdi
    00000181: 	callq	memcpy@PLT # Offset: 385
.Ltmp233:
    00000186: 	subq	%r12, %rbp
    00000189: 	cmpq	%rbp, %r12
    0000018c: 	cmovgq	%rbp, %r12
    00000190: 	cmpq	$0x1, %rbp
    00000194: 	jg	.Ltmp238 # Offset: 404
    0000019a: 	je	.Ltmp239 # Offset: 410
.Ltmp225:
    000001a0: 	movq	0x6018(%rsp), %rax
    000001a8: 	subq	%fs:0x28, %rax
    000001b1: 	jne	.Ltmp240 # Offset: 433
    000001b7: 	addq	$0x6028, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	retq # Offset: 456
.Ltmp227:
    000001c9: 	leaq	-0x8(%rsi), %rdi
    000001cd: 	cmpq	%rdi, %rbx
    000001d0: 	jae	.Ltmp241 # Offset: 464
    000001d6: 	leaq	-0x9(%rsi), %rdx
    000001da: 	movq	%r8, %r10
    000001dd: 	movq	%rbx, %rax
    000001e0: 	subq	%rbx, %rdx
    000001e3: 	movq	%rdx, %r9
    000001e6: 	shrq	$0x4, %r9
    000001ea: 	addq	$0x1, %r9
    000001ee: 	leaq	(,%r9,8), %rsi
    000001f6: 	subq	%rsi, %r10
    000001f9: 	leaq	(%rbx,%rsi), %r11
    000001fd: 	cmpq	%r10, %r11
    00000200: 	setbe	%sil
    00000204: 	cmpq	%r8, %rbx
    00000207: 	setae	%r10b
    0000020b: 	orb	%r10b, %sil
    0000020e: 	je	.Ltmp242 # Offset: 526
    00000214: 	cmpq	$0x1f, %rdx
    00000218: 	jbe	.Ltmp242 # Offset: 536
    0000021e: 	movq	%r9, %rsi
    00000221: 	leaq	-0x10(%r8), %rdx
    00000225: 	shrq	%rsi
    00000228: 	shlq	$0x4, %rsi
    0000022c: 	addq	%rbx, %rsi
    0000022f: 	nop # Size: 1
.Ltmp243:
    00000230: 	movupd	(%rdx), %xmm1
    00000234: 	movupd	(%rax), %xmm0
    00000238: 	addq	$0x10, %rax
    0000023c: 	subq	$0x10, %rdx
    00000240: 	shufpd	$0x1, %xmm1, %xmm1
    00000245: 	shufpd	$0x1, %xmm0, %xmm0
    0000024a: 	movups	%xmm1, -0x10(%rax)
    0000024e: 	movups	%xmm0, 0x10(%rdx)
    00000252: 	cmpq	%rsi, %rax
    00000255: 	jne	.Ltmp243 # Offset: 597
    00000257: 	movq	%r9, %rsi
    0000025a: 	andq	$-0x2, %rsi
    0000025e: 	leaq	(,%rsi,8), %r10
    00000266: 	leaq	(%rbx,%r10), %rax
    0000026a: 	subq	%r10, %rdi
    0000026d: 	cmpq	%rsi, %r9
    00000270: 	je	.Ltmp241 # Offset: 624
    00000272: 	movsd	(%rax), %xmm0
    00000276: 	movsd	(%rdi), %xmm1
    0000027a: 	movsd	%xmm1, (%rax)
    0000027e: 	movsd	%xmm0, (%rdi)
.Ltmp241:
    00000282: 	leaq	-0x8(%rcx), %rdi
    00000286: 	cmpq	%rdi, %r8
    00000289: 	jae	.Ltmp244 # Offset: 649
    0000028f: 	leaq	-0x9(%rcx), %rdx
    00000293: 	movq	%rcx, %r10
    00000296: 	movq	%r8, %rax
    00000299: 	subq	%r8, %rdx
    0000029c: 	movq	%rdx, %r9
    0000029f: 	shrq	$0x4, %r9
    000002a3: 	addq	$0x1, %r9
    000002a7: 	leaq	(,%r9,8), %rsi
    000002af: 	subq	%rsi, %r10
    000002b2: 	leaq	(%r8,%rsi), %r11
    000002b6: 	cmpq	%r10, %r11
    000002b9: 	setbe	%sil
    000002bd: 	cmpq	%rcx, %r8
    000002c0: 	setae	%r10b
    000002c4: 	orb	%r10b, %sil
    000002c7: 	je	.Ltmp245 # Offset: 711
    000002cd: 	cmpq	$0x1f, %rdx
    000002d1: 	jbe	.Ltmp245 # Offset: 721
    000002d7: 	movq	%r9, %rsi
    000002da: 	leaq	-0x10(%rcx), %rdx
    000002de: 	shrq	%rsi
    000002e1: 	shlq	$0x4, %rsi
    000002e5: 	addq	%r8, %rsi
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp246:
    000002f0: 	movupd	(%rdx), %xmm1
    000002f4: 	movupd	(%rax), %xmm0
    000002f8: 	addq	$0x10, %rax
    000002fc: 	subq	$0x10, %rdx
    00000300: 	shufpd	$0x1, %xmm1, %xmm1
    00000305: 	shufpd	$0x1, %xmm0, %xmm0
    0000030a: 	movups	%xmm1, -0x10(%rax)
    0000030e: 	movups	%xmm0, 0x10(%rdx)
    00000312: 	cmpq	%rsi, %rax
    00000315: 	jne	.Ltmp246 # Offset: 789
    00000317: 	movq	%r9, %rdx
    0000031a: 	movq	%rdi, %rax
    0000031d: 	andq	$-0x2, %rdx
    00000321: 	leaq	(,%rdx,8), %rsi
    00000329: 	addq	%rsi, %r8
    0000032c: 	subq	%rsi, %rax
    0000032f: 	cmpq	%rdx, %r9
    00000332: 	je	.Ltmp244 # Offset: 818
    00000334: 	movsd	(%r8), %xmm0
    00000339: 	movsd	(%rax), %xmm1
    0000033d: 	movsd	%xmm1, (%r8)
    00000342: 	movsd	%xmm0, (%rax)
.Ltmp244:
    00000346: 	cmpq	%rcx, %rbx
    00000349: 	je	.Ltmp225 # Offset: 841
    0000034f: 	cmpq	%rdi, %rbx
    00000352: 	jae	.Ltmp225 # Offset: 850
    00000358: 	leaq	-0x9(%rcx), %rdx
    0000035c: 	movq	%rcx, %r9
    0000035f: 	movq	%rbx, %rax
    00000362: 	subq	%rbx, %rdx
    00000365: 	movq	%rdx, %rsi
    00000368: 	shrq	$0x4, %rsi
    0000036c: 	addq	$0x1, %rsi
    00000370: 	leaq	(,%rsi,8), %r8
    00000378: 	subq	%r8, %r9
    0000037b: 	leaq	(%rbx,%r8), %r10
    0000037f: 	cmpq	%r9, %r10
    00000382: 	setbe	%r8b
    00000386: 	cmpq	%rcx, %rbx
    00000389: 	setae	%r9b
    0000038d: 	orb	%r9b, %r8b
    00000390: 	je	.Ltmp247 # Offset: 912
    00000396: 	cmpq	$0x1f, %rdx
    0000039a: 	jbe	.Ltmp247 # Offset: 922
    000003a0: 	movq	%rsi, %rdx
    000003a3: 	subq	$0x10, %rcx
    000003a7: 	shrq	%rdx
    000003aa: 	shlq	$0x4, %rdx
    000003ae: 	addq	%rbx, %rdx
    000003b1: 	nopl	(%rax) # Size: 7
.Ltmp248:
    000003b8: 	movupd	(%rcx), %xmm1
    000003bc: 	movupd	(%rax), %xmm0
    000003c0: 	addq	$0x10, %rax
    000003c4: 	subq	$0x10, %rcx
    000003c8: 	shufpd	$0x1, %xmm1, %xmm1
    000003cd: 	shufpd	$0x1, %xmm0, %xmm0
    000003d2: 	movups	%xmm1, -0x10(%rax)
    000003d6: 	movups	%xmm0, 0x10(%rcx)
    000003da: 	cmpq	%rax, %rdx
    000003dd: 	jne	.Ltmp248 # Offset: 989
    000003df: 	movq	%rsi, %rax
    000003e2: 	andq	$-0x2, %rax
    000003e6: 	leaq	(,%rax,8), %rcx
    000003ee: 	addq	%rcx, %rbx
    000003f1: 	subq	%rcx, %rdi
    000003f4: 	cmpq	%rax, %rsi
    000003f7: 	je	.Ltmp225 # Offset: 1015
    000003fd: 	movsd	(%rbx), %xmm0
    00000401: 	movsd	(%rdi), %xmm1
    00000405: 	movsd	%xmm1, (%rbx)
    00000409: 	movsd	%xmm0, (%rdi)
    0000040d: 	jmp	.Ltmp225 # Offset: 1037
.Ltmp239:
    00000412: 	movq	0x28(%rsp), %rcx
    00000417: 	movq	0x10(%rsp), %rsi
    0000041c: 	negq	%rcx
    0000041f: 	movsd	(%rsi), %xmm1
    00000423: 	leaq	(%rsi,%r15), %rax
    00000427: 	shlq	$0x3, %rcx
    0000042b: 	jmp	.Ltmp249 # Offset: 1067
    0000042d: 	nopl	(%rax) # Size: 3
.Ltmp251:
    00000430: 	leaq	(%rax,%rcx), %rdx
    00000434: 	cmpq	%rdx, 0x10(%rsp)
    00000439: 	je	.Ltmp250 # Offset: 1081
.Ltmp252:
    0000043b: 	movq	%rax, %rsi
    0000043e: 	movq	%rdx, %rax
.Ltmp249:
    00000441: 	movsd	(%rax), %xmm0
    00000445: 	movsd	%xmm0, (%rsi)
    00000449: 	cmpq	%rax, 0x8(%rsp)
    0000044e: 	jbe	.Ltmp251 # Offset: 1102
    00000450: 	leaq	(%rax,%r15), %rdx
    00000454: 	cmpq	%rdx, 0x10(%rsp)
    00000459: 	jne	.Ltmp252 # Offset: 1113
.Ltmp250:
    0000045b: 	movsd	%xmm1, (%rax)
    0000045f: 	jmp	.Ltmp225 # Offset: 1119
.Ltmp226:
    00000464: 	leaq	0xf(%rdi), %rax
    00000468: 	leaq	-0x8(%rsi), %rdx
    0000046c: 	subq	%rsi, %rax
    0000046f: 	subq	%rdi, %rdx
    00000472: 	cmpq	$0x1e, %rax
    00000476: 	jbe	.Ltmp253 # Offset: 1142
    0000047c: 	cmpq	$0x8, %rdx
    00000480: 	jbe	.Ltmp253 # Offset: 1152
    00000486: 	shrq	$0x3, %rdx
    0000048a: 	xorl	%eax, %eax
    0000048c: 	addq	$0x1, %rdx
    00000490: 	movq	%rdx, %rcx
    00000493: 	shrq	%rcx
    00000496: 	shlq	$0x4, %rcx
    0000049a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp254:
    000004a0: 	movupd	(%rbx,%rax), %xmm0
    000004a5: 	movupd	(%r8,%rax), %xmm2
    000004ab: 	movups	%xmm2, (%rbx,%rax)
    000004af: 	movups	%xmm0, (%r8,%rax)
    000004b4: 	addq	$0x10, %rax
    000004b8: 	cmpq	%rcx, %rax
    000004bb: 	jne	.Ltmp254 # Offset: 1211
    000004bd: 	movq	%rdx, %rcx
    000004c0: 	andq	$-0x2, %rcx
    000004c4: 	leaq	(,%rcx,8), %rax
    000004cc: 	addq	%rax, %rbx
    000004cf: 	addq	%r8, %rax
    000004d2: 	cmpq	%rcx, %rdx
    000004d5: 	je	.Ltmp225 # Offset: 1237
.Ltmp263:
    000004db: 	movsd	(%rbx), %xmm0
    000004df: 	movsd	(%rax), %xmm1
    000004e3: 	movsd	%xmm1, (%rbx)
    000004e7: 	movsd	%xmm0, (%rax)
    000004eb: 	jmp	.Ltmp225 # Offset: 1259
.Ltmp228:
    000004f0: 	leaq	0x30(%rsp), %rbp
    000004f5: 	movq	%rsi, 0x10(%rsp)
    000004fa: 	movq	%r15, %rdx
    000004fd: 	movq	%rdi, %rsi
    00000500: 	movq	%rbp, %rdi
    00000503: 	callq	memcpy@PLT # Offset: 1283
    00000508: 	movq	0x10(%rsp), %rsi
    0000050d: 	movq	%r12, %rdx
    00000510: 	movq	%rbx, %rdi
    00000513: 	callq	memmove@PLT # Offset: 1299
    00000518: 	movq	0x8(%rsp), %rdi
    0000051d: 	movq	%r15, %rdx
    00000520: 	movq	%rbp, %rsi
    00000523: 	callq	memcpy@PLT # Offset: 1315
    00000528: 	jmp	.Ltmp225 # Offset: 1320
.Ltmp229:
    0000052d: 	leaq	0x30(%rsp), %rbp
    00000532: 	movq	%r12, %rdx
    00000535: 	movq	%rbp, %rdi
    00000538: 	callq	memcpy@PLT # Offset: 1336
    0000053d: 	movq	0x8(%rsp), %rdi
    00000542: 	movq	%r15, %rdx
    00000545: 	movq	%rbx, %rsi
    00000548: 	callq	memmove@PLT # Offset: 1352
    0000054d: 	movq	%r12, %rdx
    00000550: 	movq	%rbp, %rsi
    00000553: 	movq	%rbx, %rdi
    00000556: 	callq	memcpy@PLT # Offset: 1366
    0000055b: 	jmp	.Ltmp225 # Offset: 1371
.Ltmp231:
    00000560: 	leaq	-0x8(%r8), %rdi
    00000564: 	cmpq	%rdi, %rbx
    00000567: 	jae	.Ltmp255 # Offset: 1383
    0000056d: 	leaq	-0x9(%r8), %rdx
    00000571: 	movq	%r8, %r10
    00000574: 	movq	%rbx, %rax
    00000577: 	subq	%rbx, %rdx
    0000057a: 	movq	%rdx, %r9
    0000057d: 	shrq	$0x4, %r9
    00000581: 	addq	$0x1, %r9
    00000585: 	leaq	(,%r9,8), %rsi
    0000058d: 	subq	%rsi, %r10
    00000590: 	leaq	(%rbx,%rsi), %r11
    00000594: 	cmpq	%r10, %r11
    00000597: 	setbe	%sil
    0000059b: 	cmpq	%r8, %rbx
    0000059e: 	setae	%r10b
    000005a2: 	orb	%r10b, %sil
    000005a5: 	je	.Ltmp256 # Offset: 1445
    000005ab: 	cmpq	$0x1f, %rdx
    000005af: 	jbe	.Ltmp256 # Offset: 1455
    000005b5: 	movq	%r9, %rsi
    000005b8: 	leaq	-0x10(%r8), %rdx
    000005bc: 	shrq	%rsi
    000005bf: 	shlq	$0x4, %rsi
    000005c3: 	addq	%rbx, %rsi
    000005c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp257:
    000005d0: 	movupd	(%rdx), %xmm1
    000005d4: 	movupd	(%rax), %xmm0
    000005d8: 	addq	$0x10, %rax
    000005dc: 	subq	$0x10, %rdx
    000005e0: 	shufpd	$0x1, %xmm1, %xmm1
    000005e5: 	shufpd	$0x1, %xmm0, %xmm0
    000005ea: 	movups	%xmm1, -0x10(%rax)
    000005ee: 	movups	%xmm0, 0x10(%rdx)
    000005f2: 	cmpq	%rax, %rsi
    000005f5: 	jne	.Ltmp257 # Offset: 1525
    000005f7: 	movq	%r9, %rsi
    000005fa: 	andq	$-0x2, %rsi
    000005fe: 	leaq	(,%rsi,8), %r10
    00000606: 	leaq	(%rbx,%r10), %rax
    0000060a: 	subq	%r10, %rdi
    0000060d: 	cmpq	%rsi, %r9
    00000610: 	je	.Ltmp255 # Offset: 1552
    00000612: 	movsd	(%rax), %xmm0
    00000616: 	movsd	(%rdi), %xmm1
    0000061a: 	movsd	%xmm1, (%rax)
    0000061e: 	movsd	%xmm0, (%rdi)
.Ltmp255:
    00000622: 	leaq	-0x8(%rcx), %rsi
    00000626: 	cmpq	%rsi, %r8
    00000629: 	jae	.Ltmp258 # Offset: 1577
    0000062f: 	leaq	-0x9(%rcx), %rdx
    00000633: 	movq	%rcx, %r10
    00000636: 	movq	%r8, %rax
    00000639: 	subq	%r8, %rdx
    0000063c: 	movq	%rdx, %r9
    0000063f: 	shrq	$0x4, %r9
    00000643: 	addq	$0x1, %r9
    00000647: 	leaq	(,%r9,8), %rdi
    0000064f: 	subq	%rdi, %r10
    00000652: 	leaq	(%r8,%rdi), %r11
    00000656: 	cmpq	%r10, %r11
    00000659: 	setbe	%dil
    0000065d: 	cmpq	%rcx, %r8
    00000660: 	setae	%r10b
    00000664: 	orb	%r10b, %dil
    00000667: 	je	.Ltmp259 # Offset: 1639
    0000066d: 	cmpq	$0x1f, %rdx
    00000671: 	jbe	.Ltmp259 # Offset: 1649
    00000677: 	movq	%r9, %rdi
    0000067a: 	leaq	-0x10(%rcx), %rdx
    0000067e: 	shrq	%rdi
    00000681: 	shlq	$0x4, %rdi
    00000685: 	addq	%r8, %rdi
    00000688: 	nopl	(%rax,%rax) # Size: 8
.Ltmp260:
    00000690: 	movupd	(%rdx), %xmm1
    00000694: 	movupd	(%rax), %xmm0
    00000698: 	addq	$0x10, %rax
    0000069c: 	subq	$0x10, %rdx
    000006a0: 	shufpd	$0x1, %xmm1, %xmm1
    000006a5: 	shufpd	$0x1, %xmm0, %xmm0
    000006aa: 	movups	%xmm1, -0x10(%rax)
    000006ae: 	movups	%xmm0, 0x10(%rdx)
    000006b2: 	cmpq	%rax, %rdi
    000006b5: 	jne	.Ltmp260 # Offset: 1717
    000006b7: 	movq	%r9, %rdx
    000006ba: 	movq	%rsi, %rax
    000006bd: 	andq	$-0x2, %rdx
    000006c1: 	leaq	(,%rdx,8), %rdi
    000006c9: 	addq	%rdi, %r8
    000006cc: 	subq	%rdi, %rax
    000006cf: 	cmpq	%rdx, %r9
    000006d2: 	je	.Ltmp258 # Offset: 1746
    000006d4: 	movsd	(%r8), %xmm0
    000006d9: 	movsd	(%rax), %xmm1
    000006dd: 	movsd	%xmm1, (%r8)
    000006e2: 	movsd	%xmm0, (%rax)
.Ltmp258:
    000006e6: 	cmpq	%rcx, %rbx
    000006e9: 	je	.Ltmp225 # Offset: 1769
    000006ef: 	cmpq	%rsi, %rbx
    000006f2: 	jae	.Ltmp225 # Offset: 1778
    000006f8: 	leaq	-0x9(%rcx), %rdx
    000006fc: 	movq	%rcx, %r9
    000006ff: 	movq	%rbx, %rax
    00000702: 	subq	%rbx, %rdx
    00000705: 	movq	%rdx, %rdi
    00000708: 	shrq	$0x4, %rdi
    0000070c: 	addq	$0x1, %rdi
    00000710: 	leaq	(,%rdi,8), %r8
    00000718: 	subq	%r8, %r9
    0000071b: 	leaq	(%rbx,%r8), %r10
    0000071f: 	cmpq	%r9, %r10
    00000722: 	setbe	%r8b
    00000726: 	cmpq	%rcx, %rbx
    00000729: 	setae	%r9b
    0000072d: 	orb	%r9b, %r8b
    00000730: 	je	.Ltmp261 # Offset: 1840
    00000736: 	cmpq	$0x1f, %rdx
    0000073a: 	jbe	.Ltmp261 # Offset: 1850
    00000740: 	movq	%rdi, %rdx
    00000743: 	subq	$0x10, %rcx
    00000747: 	shrq	%rdx
    0000074a: 	shlq	$0x4, %rdx
    0000074e: 	addq	%rbx, %rdx
.Ltmp262:
    00000751: 	movupd	(%rcx), %xmm1
    00000755: 	movupd	(%rax), %xmm0
    00000759: 	addq	$0x10, %rax
    0000075d: 	subq	$0x10, %rcx
    00000761: 	shufpd	$0x1, %xmm1, %xmm1
    00000766: 	shufpd	$0x1, %xmm0, %xmm0
    0000076b: 	movups	%xmm1, -0x10(%rax)
    0000076f: 	movups	%xmm0, 0x10(%rcx)
    00000773: 	cmpq	%rax, %rdx
    00000776: 	jne	.Ltmp262 # Offset: 1910
    00000778: 	movq	%rdi, %rdx
    0000077b: 	movq	%rsi, %rax
    0000077e: 	andq	$-0x2, %rdx
    00000782: 	leaq	(,%rdx,8), %rcx
    0000078a: 	addq	%rcx, %rbx
    0000078d: 	subq	%rcx, %rax
    00000790: 	cmpq	%rdx, %rdi
    00000793: 	jne	.Ltmp263 # Offset: 1939
    00000799: 	jmp	.Ltmp225 # Offset: 1945
.Ltmp247:
    0000079e: 	movq	%rdi, %rdx
.Ltmp264:
    000007a1: 	movsd	(%rax), %xmm0
    000007a5: 	movsd	(%rdx), %xmm1
    000007a9: 	addq	$0x8, %rax
    000007ad: 	subq	$0x8, %rdx
    000007b1: 	movsd	%xmm1, -0x8(%rax)
    000007b6: 	movsd	%xmm0, 0x8(%rdx)
    000007bb: 	cmpq	%rdx, %rax
    000007be: 	jb	.Ltmp264 # Offset: 1982
    000007c0: 	jmp	.Ltmp225 # Offset: 1984
.Ltmp253:
    000007c5: 	movq	%r8, %rdx
    000007c8: 	xorl	%eax, %eax
    000007ca: 	subq	%rbx, %rdx
    000007cd: 	nopl	(%rax) # Size: 3
.Ltmp265:
    000007d0: 	movsd	(%rbx,%rax), %xmm0
    000007d5: 	movsd	(%r8,%rax), %xmm1
    000007db: 	movsd	%xmm1, (%rbx,%rax)
    000007e0: 	movsd	%xmm0, (%r8,%rax)
    000007e6: 	addq	$0x8, %rax
    000007ea: 	cmpq	%rax, %rdx
    000007ed: 	jne	.Ltmp265 # Offset: 2029
    000007ef: 	jmp	.Ltmp225 # Offset: 2031
.Ltmp242:
    000007f4: 	movq	%rdi, %rdx
.Ltmp266:
    000007f7: 	movsd	(%rax), %xmm0
    000007fb: 	movsd	(%rdx), %xmm1
    000007ff: 	addq	$0x8, %rax
    00000803: 	subq	$0x8, %rdx
    00000807: 	movsd	%xmm1, -0x8(%rax)
    0000080c: 	movsd	%xmm0, 0x8(%rdx)
    00000811: 	cmpq	%rdx, %rax
    00000814: 	jb	.Ltmp266 # Offset: 2068
    00000816: 	jmp	.Ltmp241 # Offset: 2070
.Ltmp245:
    0000081b: 	movq	%rdi, %rsi
.Ltmp267:
    0000081e: 	movsd	(%rax), %xmm0
    00000822: 	movsd	(%rsi), %xmm1
    00000826: 	addq	$0x8, %rax
    0000082a: 	subq	$0x8, %rsi
    0000082e: 	movsd	%xmm1, -0x8(%rax)
    00000833: 	movsd	%xmm0, 0x8(%rsi)
    00000838: 	cmpq	%rsi, %rax
    0000083b: 	jb	.Ltmp267 # Offset: 2107
    0000083d: 	jmp	.Ltmp244 # Offset: 2109
.Ltmp256:
    00000842: 	movq	%rdi, %rdx
.Ltmp268:
    00000845: 	movsd	(%rax), %xmm0
    00000849: 	movsd	(%rdx), %xmm1
    0000084d: 	addq	$0x8, %rax
    00000851: 	subq	$0x8, %rdx
    00000855: 	movsd	%xmm1, -0x8(%rax)
    0000085a: 	movsd	%xmm0, 0x8(%rdx)
    0000085f: 	cmpq	%rdx, %rax
    00000862: 	jb	.Ltmp268 # Offset: 2146
    00000864: 	jmp	.Ltmp255 # Offset: 2148
.Ltmp259:
    00000869: 	movq	%rsi, %rdx
.Ltmp269:
    0000086c: 	movsd	(%rax), %xmm0
    00000870: 	movsd	(%rdx), %xmm1
    00000874: 	addq	$0x8, %rax
    00000878: 	subq	$0x8, %rdx
    0000087c: 	movsd	%xmm1, -0x8(%rax)
    00000881: 	movsd	%xmm0, 0x8(%rdx)
    00000886: 	cmpq	%rdx, %rax
    00000889: 	jb	.Ltmp269 # Offset: 2185
    0000088b: 	jmp	.Ltmp258 # Offset: 2187
.Ltmp261:
    00000890: 	movq	%rsi, %rdx
.Ltmp270:
    00000893: 	movsd	(%rax), %xmm0
    00000897: 	movsd	(%rdx), %xmm1
    0000089b: 	addq	$0x8, %rax
    0000089f: 	subq	$0x8, %rdx
    000008a3: 	movsd	%xmm1, -0x8(%rax)
    000008a8: 	movsd	%xmm0, 0x8(%rdx)
    000008ad: 	cmpq	%rdx, %rax
    000008b0: 	jb	.Ltmp270 # Offset: 2224
    000008b2: 	jmp	.Ltmp225 # Offset: 2226
.Ltmp240:
    000008b7: 	callq	__stack_chk_fail@PLT # Offset: 2231
DWARF CFI Instructions:
    <empty>
End of Function "_Z25gcd_cycle_buffered_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x5140
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x5140
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp271 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp272 # Offset: 63
.Ltmp271:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp273 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp274 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp278:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp275 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp276 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp274:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp277 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp278 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp273:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp279:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp278 # Offset: 248
.Ltmp272:
    000000fd: 	leaq	DATAat0xd158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp275:
    00000109: 	leaq	DATAat0xd182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp276:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp277:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp279 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp280 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp280:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_Z26gries_mills_rotate_countedISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x5290
  Size        : 0xd4
  MaxSize     : 0xe0
  Offset      : 0x5290
  Section     : .text
  Orc Section : .local.text._Z26gries_mills_rotate_countedISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r11
    0000000a: 	movq	%rcx, %rdi
    0000000d: 	movq	%rsi, %rax
    00000010: 	movq	%r9, %rcx
    00000013: 	cmpq	%r9, %rsi
    00000016: 	je	.Ltmp281 # Offset: 22
    0000001c: 	cmpq	%rsi, %rdx
    0000001f: 	je	.Ltmp281 # Offset: 31
    00000021: 	testq	%rdi, %rdi
    00000024: 	je	.Ltmp282 # Offset: 36
.Ltmp289:
    00000026: 	leaq	(%rdi,%r8), %r9
    0000002a: 	movq	%rdi, %r10
    0000002d: 	xorl	%r8d, %r8d
.Ltmp286:
    00000030: 	movq	%r10, %rsi
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%r8, %rsi
    00000039: 	subq	%rdi, %rdx
    0000003c: 	cmpq	%rdx, %rsi
    0000003f: 	cmovaq	%rdx, %rsi
    00000043: 	testq	%rsi, %rsi
    00000046: 	je	.Ltmp283 # Offset: 70
    00000048: 	xorl	%edx, %edx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp284:
    00000050: 	movsd	0x8(%rcx), %xmm0
    00000055: 	movsd	0x8(%rax), %xmm1
    0000005a: 	addq	$0x1, %rdx
    0000005e: 	movsd	%xmm1, 0x8(%rcx)
    00000063: 	movq	(%rcx), %rcx
    00000066: 	movsd	%xmm0, 0x8(%rax)
    0000006b: 	movq	(%rax), %rax
    0000006e: 	cmpq	%rdx, %rsi
    00000071: 	jne	.Ltmp284 # Offset: 113
.Ltmp283:
    00000073: 	addq	%rsi, %rdi
    00000076: 	addq	%rsi, %r8
    00000079: 	cmpq	%rdi, %r9
    0000007c: 	je	.Ltmp285 # Offset: 124
    0000007e: 	cmpq	%r8, %r10
    00000081: 	jne	.Ltmp286 # Offset: 129
    00000083: 	movq	%rax, %r11
    00000086: 	movq	%rdi, %r10
    00000089: 	jmp	.Ltmp286 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp285:
    00000090: 	cmpq	%r8, %r10
    00000093: 	je	.Ltmp281 # Offset: 147
    00000095: 	movq	%r11, %rax
    00000098: 	movq	%r10, %rdi
    0000009b: 	jmp	.Ltmp286 # Offset: 155
.Ltmp281:
    0000009d: 	retq # Offset: 157
.Ltmp282:
    0000009e: 	movq	%r9, %rsi
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp287:
    000000a8: 	movq	(%rsi), %rsi
    000000ab: 	addq	$0x1, %rdi
    000000af: 	cmpq	%rsi, %r11
    000000b2: 	jne	.Ltmp287 # Offset: 178
    000000b4: 	movq	%r11, %rsi
    000000b7: 	xorl	%r9d, %r9d
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp288:
    000000c0: 	movq	(%rsi), %rsi
    000000c3: 	addq	$0x1, %r9
    000000c7: 	cmpq	%rsi, %rdx
    000000ca: 	jne	.Ltmp288 # Offset: 202
    000000cc: 	movq	%r9, %r8
    000000cf: 	jmp	.Ltmp289 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z26gries_mills_rotate_countedISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm"

Binary Function "_Z34gries_mills_rotate_counted_wrapperISt18_Fwd_list_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x5370
  Size        : 0xe
  MaxSize     : 0x10
  Offset      : 0x5370
  Section     : .text
  Orc Section : .local.text._Z34gries_mills_rotate_counted_wrapperISt18_Fwd_list_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	xorl	%ecx, %ecx
    00000009: 	jmp	_Z26gries_mills_rotate_countedISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm # TAILCALL  # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z34gries_mills_rotate_counted_wrapperISt18_Fwd_list_iteratorIdEEvT_S2_S2_"

Binary Function "_Z28gries_mills_rotate_iterativeISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x5380
  Size        : 0x31e
  MaxSize     : 0x320
  Offset      : 0x5380
  Section     : .text
  Orc Section : .local.text._Z28gries_mills_rotate_iterativeISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	leaq	-0x5000(%rsp), %r11
.Ltmp290:
    0000000c: 	subq	$0x1000, %rsp
    00000013: 	orq	$0x0, (%rsp)
    00000018: 	cmpq	%r11, %rsp
    0000001b: 	jne	.Ltmp290 # Offset: 27
    0000001d: 	subq	$0xff8, %rsp
    00000024: 	movq	%rdx, %r9
    00000027: 	movq	%rdi, %rax
    0000002a: 	movq	%fs:0x28, %rdx
    00000033: 	movq	%rdx, 0x5fe8(%rsp)
    0000003b: 	xorl	%edx, %edx
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp291 # Offset: 64
    00000046: 	cmpq	%rsi, %r9
    00000049: 	je	.Ltmp291 # Offset: 73
    0000004f: 	movq	%rcx, %rdi
    00000052: 	movq	%rsi, %r10
    00000055: 	testq	%rcx, %rcx
    00000058: 	je	.Ltmp292 # Offset: 88
.Ltmp315:
    0000005e: 	cmpq	%rdi, %r8
    00000061: 	je	.Ltmp293 # Offset: 97
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp303:
    00000070: 	leaq	(%rdi,%r8), %r11
    00000074: 	cmpq	$0x13, %r11
    00000078: 	jbe	.Ltmp294 # Offset: 120
.Ltmp307:
    0000007e: 	cmpq	%r8, %rdi
    00000081: 	movq	%r8, %rsi
    00000084: 	cmovbeq	%rdi, %rsi
    00000088: 	cmpq	$0xbfc, %rsi
    0000008f: 	ja	.Ltmp295 # Offset: 143
    00000091: 	cmpq	%r8, %rdi
    00000094: 	ja	.Ltmp296 # Offset: 148
    0000009a: 	movq	%r8, %rcx
    0000009d: 	movq	%r10, %rdx
    000000a0: 	subq	%rdi, %rcx
    000000a3: 	subq	$0x1, %rcx
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp297:
    000000b0: 	movq	(%rdx), %rdx
    000000b3: 	subq	$0x1, %rcx
    000000b7: 	jae	.Ltmp297 # Offset: 183
.Ltmp312:
    000000b9: 	cmpq	$0xbfc, %rdi
    000000c0: 	jbe	.Ltmp298 # Offset: 192
    000000c6: 	cmpq	$0xbfc, %r8
    000000cd: 	jbe	.Ltmp299 # Offset: 205
    000000d3: 	movq	%r10, %rdx
    000000d6: 	testq	%rsi, %rsi
    000000d9: 	je	.Ltmp300 # Offset: 217
.Ltmp295:
    000000db: 	movq	%r10, %rdx
    000000de: 	xorl	%ecx, %ecx
.Ltmp301:
    000000e0: 	movsd	0x8(%rax), %xmm0
    000000e5: 	movsd	0x8(%rdx), %xmm1
    000000ea: 	addq	$0x1, %rcx
    000000ee: 	movsd	%xmm1, 0x8(%rax)
    000000f3: 	movq	(%rax), %rax
    000000f6: 	movsd	%xmm0, 0x8(%rdx)
    000000fb: 	movq	(%rdx), %rdx
    000000fe: 	cmpq	%rsi, %rcx
    00000101: 	jne	.Ltmp301 # Offset: 257
.Ltmp300:
    00000103: 	cmpq	%r8, %rdi
    00000106: 	jbe	.Ltmp302 # Offset: 262
    00000108: 	subq	%r8, %rdi
    0000010b: 	cmpq	%r8, %rdi
    0000010e: 	jne	.Ltmp303 # Offset: 270
    00000114: 	movq	%r10, %rdx
.Ltmp306:
    00000117: 	cmpq	%rax, %rdx
    0000011a: 	je	.Ltmp291 # Offset: 282
.Ltmp324:
    0000011c: 	movq	%rdx, %rcx
    0000011f: 	nop # Size: 1
.Ltmp304:
    00000120: 	movsd	0x8(%rcx), %xmm1
    00000125: 	movsd	0x8(%rax), %xmm0
    0000012a: 	movsd	%xmm1, 0x8(%rax)
    0000012f: 	movq	(%rax), %rax
    00000132: 	movsd	%xmm0, 0x8(%rcx)
    00000137: 	movq	(%rcx), %rcx
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jne	.Ltmp304 # Offset: 317
.Ltmp291:
    0000013f: 	movq	0x5fe8(%rsp), %rax
    00000147: 	subq	%fs:0x28, %rax
    00000150: 	jne	.Ltmp305 # Offset: 336
    00000156: 	addq	$0x5ff8, %rsp
    0000015d: 	retq # Offset: 349
    0000015e: 	nop # Size: 2
.Ltmp302:
    00000160: 	subq	%rdi, %r8
    00000163: 	cmpq	%rdi, %r8
    00000166: 	je	.Ltmp306 # Offset: 358
    00000168: 	leaq	(%rdi,%r8), %r11
    0000016c: 	movq	%rdx, %r10
    0000016f: 	cmpq	$0x13, %r11
    00000173: 	ja	.Ltmp307 # Offset: 371
.Ltmp294:
    00000179: 	cmpq	%r9, %r10
    0000017c: 	je	.Ltmp291 # Offset: 380
    0000017e: 	cmpq	%r10, %rax
    00000181: 	je	.Ltmp291 # Offset: 385
    00000183: 	movq	%r10, %rdx
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp309:
    00000190: 	movsd	0x8(%rax), %xmm0
    00000195: 	movsd	0x8(%r10), %xmm1
    0000019b: 	movsd	%xmm1, 0x8(%rax)
    000001a0: 	movq	(%rax), %rax
    000001a3: 	movsd	%xmm0, 0x8(%r10)
    000001a9: 	movq	(%r10), %r10
    000001ac: 	cmpq	%r10, %r9
    000001af: 	je	.Ltmp308 # Offset: 431
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	cmoveq	%r10, %rdx
    000001bc: 	jmp	.Ltmp309 # Offset: 444
    000001be: 	nop # Size: 2
.Ltmp296:
    000001c0: 	leaq	-0x1(%r8), %rcx
    000001c4: 	movq	%rax, %rdx
    000001c7: 	testq	%r8, %r8
    000001ca: 	je	.Ltmp310 # Offset: 458
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp311:
    000001d0: 	movq	(%rdx), %rdx
    000001d3: 	subq	$0x1, %rcx
    000001d7: 	jae	.Ltmp311 # Offset: 471
    000001d9: 	jmp	.Ltmp312 # Offset: 473
.Ltmp292:
    000001de: 	movq	%rax, %rdx
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp313:
    000001e8: 	movq	(%rdx), %rdx
    000001eb: 	addq	$0x1, %rdi
    000001ef: 	cmpq	%rsi, %rdx
    000001f2: 	jne	.Ltmp313 # Offset: 498
    000001f4: 	movq	%rsi, %rdx
    000001f7: 	xorl	%r8d, %r8d
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp314:
    00000200: 	movq	(%rdx), %rdx
    00000203: 	addq	$0x1, %r8
    00000207: 	cmpq	%rdx, %r9
    0000020a: 	jne	.Ltmp314 # Offset: 522
    0000020c: 	jmp	.Ltmp315 # Offset: 524
.Ltmp310:
    00000211: 	cmpq	$0xbfc, %rdi
    00000218: 	ja	.Ltmp299 # Offset: 536
.Ltmp298:
    0000021a: 	movq	%rax, %rcx
    0000021d: 	movq	%rsp, %rsi
    00000220: 	cmpq	%r10, %rax
    00000223: 	je	.Ltmp316 # Offset: 547
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp317:
    00000228: 	movsd	0x8(%rcx), %xmm0
    0000022d: 	movq	(%rcx), %rcx
    00000230: 	addq	$0x8, %rsi
    00000234: 	movsd	%xmm0, -0x8(%rsi)
    00000239: 	cmpq	%r10, %rcx
    0000023c: 	jne	.Ltmp317 # Offset: 572
    0000023e: 	jmp	.Ltmp316 # Offset: 574
.Ltmp318:
    00000240: 	movsd	0x8(%r10), %xmm0
    00000246: 	movq	(%r10), %r10
    00000249: 	movsd	%xmm0, 0x8(%rax)
    0000024e: 	movq	(%rax), %rax
.Ltmp316:
    00000251: 	cmpq	%r10, %r9
    00000254: 	jne	.Ltmp318 # Offset: 596
    00000256: 	testq	%rdi, %rdi
    00000259: 	je	.Ltmp291 # Offset: 601
    0000025f: 	movq	%rsp, %rax
    00000262: 	leaq	(%rax,%rdi,8), %rcx
.Ltmp319:
    00000266: 	movsd	(%rax), %xmm0
    0000026a: 	addq	$0x8, %rax
    0000026e: 	movsd	%xmm0, 0x8(%rdx)
    00000273: 	movq	(%rdx), %rdx
    00000276: 	cmpq	%rax, %rcx
    00000279: 	jne	.Ltmp319 # Offset: 633
    0000027b: 	jmp	.Ltmp291 # Offset: 635
.Ltmp299:
    00000280: 	movq	%rsp, %rdx
    00000283: 	cmpq	%r10, %r9
    00000286: 	je	.Ltmp320 # Offset: 646
    00000288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp321:
    00000290: 	movsd	0x8(%r10), %xmm0
    00000296: 	movq	(%r10), %r10
    00000299: 	addq	$0x8, %rdx
    0000029d: 	movsd	%xmm0, -0x8(%rdx)
    000002a2: 	cmpq	%r10, %r9
    000002a5: 	jne	.Ltmp321 # Offset: 677
    000002a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp320:
    000002b0: 	movq	%rsp, %rdx
    000002b3: 	leaq	(%rdx,%r8,8), %rsi
    000002b7: 	testq	%r8, %r8
    000002ba: 	je	.Ltmp322 # Offset: 698
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp323:
    000002c0: 	movq	%rax, %rcx
    000002c3: 	movsd	(%rdx), %xmm1
    000002c7: 	movq	(%rax), %rax
    000002ca: 	addq	$0x8, %rdx
    000002ce: 	movsd	0x8(%rcx), %xmm0
    000002d3: 	movsd	%xmm1, 0x8(%rcx)
    000002d8: 	movsd	%xmm0, -0x8(%rdx)
    000002dd: 	cmpq	%rdx, %rsi
    000002e0: 	jne	.Ltmp323 # Offset: 736
.Ltmp322:
    000002e2: 	subq	%r8, %r11
    000002e5: 	cmpq	%r11, %r8
    000002e8: 	cmovaq	%r11, %r8
    000002ec: 	testq	%r11, %r11
    000002ef: 	jne	.Ltmp320 # Offset: 751
    000002f1: 	jmp	.Ltmp291 # Offset: 753
    000002f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp308:
    00000300: 	cmpq	%rdx, %rax
    00000303: 	je	.Ltmp291 # Offset: 771
    00000309: 	movq	%rdx, %r10
    0000030c: 	jmp	.Ltmp309 # Offset: 780
.Ltmp293:
    00000311: 	movq	%rsi, %rdx
    00000314: 	jmp	.Ltmp324 # Offset: 788
.Ltmp305:
    00000319: 	callq	__stack_chk_fail@PLT # Offset: 793
DWARF CFI Instructions:
    <empty>
End of Function "_Z28gries_mills_rotate_iterativeISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm"

Binary Function "_Z36gries_mills_rotate_iterative_wrapperISt18_Fwd_list_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x56a0
  Size        : 0xe
  MaxSize     : 0x10
  Offset      : 0x56a0
  Section     : .text
  Orc Section : .local.text._Z36gries_mills_rotate_iterative_wrapperISt18_Fwd_list_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	xorl	%ecx, %ecx
    00000009: 	jmp	_Z28gries_mills_rotate_iterativeISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm # TAILCALL  # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z36gries_mills_rotate_iterative_wrapperISt18_Fwd_list_iteratorIdEEvT_S2_S2_"

Binary Function "_Z26gries_mills_rotate_countedISt14_List_iteratorIdEEvT_S2_S2_mm" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x56b0
  Size        : 0xd4
  MaxSize     : 0xe0
  Offset      : 0x56b0
  Section     : .text
  Orc Section : .local.text._Z26gries_mills_rotate_countedISt14_List_iteratorIdEEvT_S2_S2_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r11
    0000000a: 	movq	%rcx, %rdi
    0000000d: 	movq	%rsi, %rax
    00000010: 	movq	%r9, %rcx
    00000013: 	cmpq	%rsi, %r9
    00000016: 	je	.Ltmp325 # Offset: 22
    0000001c: 	cmpq	%rdx, %rsi
    0000001f: 	je	.Ltmp325 # Offset: 31
    00000021: 	testq	%rdi, %rdi
    00000024: 	je	.Ltmp326 # Offset: 36
.Ltmp333:
    00000026: 	leaq	(%rdi,%r8), %r9
    0000002a: 	movq	%rdi, %r10
    0000002d: 	xorl	%r8d, %r8d
.Ltmp330:
    00000030: 	movq	%r10, %rsi
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%r8, %rsi
    00000039: 	subq	%rdi, %rdx
    0000003c: 	cmpq	%rdx, %rsi
    0000003f: 	cmovaq	%rdx, %rsi
    00000043: 	testq	%rsi, %rsi
    00000046: 	je	.Ltmp327 # Offset: 70
    00000048: 	xorl	%edx, %edx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp328:
    00000050: 	movsd	0x10(%rcx), %xmm0
    00000055: 	movsd	0x10(%rax), %xmm1
    0000005a: 	addq	$0x1, %rdx
    0000005e: 	movsd	%xmm1, 0x10(%rcx)
    00000063: 	movq	(%rcx), %rcx
    00000066: 	movsd	%xmm0, 0x10(%rax)
    0000006b: 	movq	(%rax), %rax
    0000006e: 	cmpq	%rsi, %rdx
    00000071: 	jne	.Ltmp328 # Offset: 113
.Ltmp327:
    00000073: 	addq	%rsi, %rdi
    00000076: 	addq	%rsi, %r8
    00000079: 	cmpq	%rdi, %r9
    0000007c: 	je	.Ltmp329 # Offset: 124
    0000007e: 	cmpq	%r8, %r10
    00000081: 	jne	.Ltmp330 # Offset: 129
    00000083: 	movq	%rax, %r11
    00000086: 	movq	%rdi, %r10
    00000089: 	jmp	.Ltmp330 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp329:
    00000090: 	cmpq	%r8, %r10
    00000093: 	je	.Ltmp325 # Offset: 147
    00000095: 	movq	%r11, %rax
    00000098: 	movq	%r10, %rdi
    0000009b: 	jmp	.Ltmp330 # Offset: 155
.Ltmp325:
    0000009d: 	retq # Offset: 157
.Ltmp326:
    0000009e: 	movq	%r9, %rsi
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp331:
    000000a8: 	movq	(%rsi), %rsi
    000000ab: 	addq	$0x1, %rdi
    000000af: 	cmpq	%rsi, %r11
    000000b2: 	jne	.Ltmp331 # Offset: 178
    000000b4: 	movq	%r11, %rsi
    000000b7: 	xorl	%r9d, %r9d
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp332:
    000000c0: 	movq	(%rsi), %rsi
    000000c3: 	addq	$0x1, %r9
    000000c7: 	cmpq	%rsi, %rdx
    000000ca: 	jne	.Ltmp332 # Offset: 202
    000000cc: 	movq	%r9, %r8
    000000cf: 	jmp	.Ltmp333 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z26gries_mills_rotate_countedISt14_List_iteratorIdEEvT_S2_S2_mm"

Binary Function "_Z34gries_mills_rotate_counted_wrapperISt14_List_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x5790
  Size        : 0xe
  MaxSize     : 0x10
  Offset      : 0x5790
  Section     : .text
  Orc Section : .local.text._Z34gries_mills_rotate_counted_wrapperISt14_List_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	xorl	%ecx, %ecx
    00000009: 	jmp	_Z26gries_mills_rotate_countedISt14_List_iteratorIdEEvT_S2_S2_mm # TAILCALL  # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z34gries_mills_rotate_counted_wrapperISt14_List_iteratorIdEEvT_S2_S2_"

Binary Function "_Z28gries_mills_rotate_iterativeISt14_List_iteratorIdEEvT_S2_S2_mm" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x57a0
  Size        : 0x373
  MaxSize     : 0x380
  Offset      : 0x57a0
  Section     : .text
  Orc Section : .local.text._Z28gries_mills_rotate_iterativeISt14_List_iteratorIdEEvT_S2_S2_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	leaq	-0x5000(%rsp), %r11
.Ltmp334:
    0000000d: 	subq	$0x1000, %rsp
    00000014: 	orq	$0x0, (%rsp)
    00000019: 	cmpq	%r11, %rsp
    0000001c: 	jne	.Ltmp334 # Offset: 28
    0000001e: 	subq	$0xff0, %rsp
    00000025: 	movq	%rdx, %r10
    00000028: 	movq	%rdi, %rax
    0000002b: 	movq	%fs:0x28, %rdx
    00000034: 	movq	%rdx, 0x5fe8(%rsp)
    0000003c: 	xorl	%edx, %edx
    0000003e: 	cmpq	%rsi, %rdi
    00000041: 	je	.Ltmp335 # Offset: 65
    00000047: 	cmpq	%rsi, %r10
    0000004a: 	je	.Ltmp335 # Offset: 74
    00000050: 	movq	%rcx, %rdi
    00000053: 	movq	%rsi, %r9
    00000056: 	testq	%rcx, %rcx
    00000059: 	je	.Ltmp336 # Offset: 89
.Ltmp366:
    0000005f: 	cmpq	%rdi, %r8
    00000062: 	je	.Ltmp337 # Offset: 98
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp348:
    00000070: 	leaq	(%rdi,%r8), %rbx
    00000074: 	cmpq	$0x13, %rbx
    00000078: 	jbe	.Ltmp338 # Offset: 120
.Ltmp352:
    0000007e: 	cmpq	%r8, %rdi
    00000081: 	movq	%r8, %rsi
    00000084: 	cmovbeq	%rdi, %rsi
    00000088: 	cmpq	$0xbfc, %rsi
    0000008f: 	ja	.Ltmp339 # Offset: 143
    00000091: 	cmpq	%r8, %rdi
    00000094: 	ja	.Ltmp340 # Offset: 148
    0000009a: 	movq	%r8, %r11
    0000009d: 	movq	%r9, %rdx
    000000a0: 	subq	%rdi, %r11
    000000a3: 	leaq	-0x1(%r11), %rcx
    000000a7: 	testq	%r11, %r11
    000000aa: 	jle	.Ltmp341 # Offset: 170
.Ltmp342:
    000000b0: 	movq	(%rdx), %rdx
    000000b3: 	subq	$0x1, %rcx
    000000b7: 	jae	.Ltmp342 # Offset: 183
.Ltmp361:
    000000b9: 	cmpq	$0xbfc, %rdi
    000000c0: 	jbe	.Ltmp343 # Offset: 192
.Ltmp357:
    000000c6: 	cmpq	$0xbfc, %r8
    000000cd: 	jbe	.Ltmp344 # Offset: 205
    000000d3: 	movq	%r9, %rdx
    000000d6: 	testq	%rsi, %rsi
    000000d9: 	je	.Ltmp345 # Offset: 217
.Ltmp339:
    000000db: 	movq	%r9, %rdx
    000000de: 	xorl	%ecx, %ecx
.Ltmp346:
    000000e0: 	movsd	0x10(%rax), %xmm0
    000000e5: 	movsd	0x10(%rdx), %xmm1
    000000ea: 	addq	$0x1, %rcx
    000000ee: 	movsd	%xmm1, 0x10(%rax)
    000000f3: 	movq	(%rax), %rax
    000000f6: 	movsd	%xmm0, 0x10(%rdx)
    000000fb: 	movq	(%rdx), %rdx
    000000fe: 	cmpq	%rcx, %rsi
    00000101: 	jne	.Ltmp346 # Offset: 257
.Ltmp345:
    00000103: 	cmpq	%r8, %rdi
    00000106: 	jbe	.Ltmp347 # Offset: 262
    00000108: 	subq	%r8, %rdi
    0000010b: 	cmpq	%r8, %rdi
    0000010e: 	jne	.Ltmp348 # Offset: 270
    00000114: 	movq	%r9, %rdx
.Ltmp351:
    00000117: 	cmpq	%rdx, %rax
    0000011a: 	je	.Ltmp335 # Offset: 282
.Ltmp373:
    0000011c: 	movq	%rdx, %rcx
    0000011f: 	nop # Size: 1
.Ltmp349:
    00000120: 	movsd	0x10(%rcx), %xmm1
    00000125: 	movsd	0x10(%rax), %xmm0
    0000012a: 	movsd	%xmm1, 0x10(%rax)
    0000012f: 	movq	(%rax), %rax
    00000132: 	movsd	%xmm0, 0x10(%rcx)
    00000137: 	movq	(%rcx), %rcx
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jne	.Ltmp349 # Offset: 317
.Ltmp335:
    0000013f: 	movq	0x5fe8(%rsp), %rax
    00000147: 	subq	%fs:0x28, %rax
    00000150: 	jne	.Ltmp350 # Offset: 336
    00000156: 	addq	$0x5ff0, %rsp
    0000015d: 	popq	%rbx
    0000015e: 	retq # Offset: 350
    0000015f: 	nop # Size: 1
.Ltmp347:
    00000160: 	subq	%rdi, %r8
    00000163: 	cmpq	%r8, %rdi
    00000166: 	je	.Ltmp351 # Offset: 358
    00000168: 	leaq	(%rdi,%r8), %rbx
    0000016c: 	movq	%rdx, %r9
    0000016f: 	cmpq	$0x13, %rbx
    00000173: 	ja	.Ltmp352 # Offset: 371
.Ltmp338:
    00000179: 	cmpq	%r9, %rax
    0000017c: 	je	.Ltmp335 # Offset: 380
    0000017e: 	cmpq	%r10, %r9
    00000181: 	je	.Ltmp335 # Offset: 385
    00000183: 	movq	%r9, %rdx
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp354:
    00000190: 	movsd	0x10(%rax), %xmm0
    00000195: 	movsd	0x10(%r9), %xmm1
    0000019b: 	movsd	%xmm1, 0x10(%rax)
    000001a0: 	movq	(%rax), %rax
    000001a3: 	movsd	%xmm0, 0x10(%r9)
    000001a9: 	movq	(%r9), %r9
    000001ac: 	cmpq	%r9, %r10
    000001af: 	je	.Ltmp353 # Offset: 431
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	cmoveq	%r9, %rdx
    000001bc: 	jmp	.Ltmp354 # Offset: 444
    000001be: 	nop # Size: 2
.Ltmp340:
    000001c0: 	leaq	-0x1(%r8), %rcx
    000001c4: 	movq	%rax, %rdx
    000001c7: 	testq	%r8, %r8
    000001ca: 	jle	.Ltmp355 # Offset: 458
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp356:
    000001d0: 	movq	(%rdx), %rdx
    000001d3: 	subq	$0x1, %rcx
    000001d7: 	jae	.Ltmp356 # Offset: 471
    000001d9: 	cmpq	$0xbfc, %rdi
    000001e0: 	ja	.Ltmp357 # Offset: 480
.Ltmp343:
    000001e6: 	movq	%rax, %rcx
    000001e9: 	movq	%rsp, %rsi
    000001ec: 	cmpq	%r9, %rax
    000001ef: 	je	.Ltmp358 # Offset: 495
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp359:
    000001f8: 	movsd	0x10(%rcx), %xmm0
    000001fd: 	movq	(%rcx), %rcx
    00000200: 	addq	$0x8, %rsi
    00000204: 	movsd	%xmm0, -0x8(%rsi)
    00000209: 	cmpq	%r9, %rcx
    0000020c: 	jne	.Ltmp359 # Offset: 524
    0000020e: 	jmp	.Ltmp358 # Offset: 526
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp341:
    00000218: 	leaq	0x1(%r11), %rcx
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp360:
    00000220: 	addq	$0x1, %rcx
    00000224: 	movq	0x8(%rdx), %rdx
    00000228: 	cmpq	$0x1, %rcx
    0000022c: 	jne	.Ltmp360 # Offset: 556
    0000022e: 	jmp	.Ltmp361 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp355:
    00000238: 	leaq	0x1(%r8), %rcx
    0000023c: 	je	.Ltmp362 # Offset: 572
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp363:
    00000248: 	addq	$0x1, %rcx
    0000024c: 	movq	0x8(%rdx), %rdx
    00000250: 	cmpq	$0x1, %rcx
    00000254: 	jne	.Ltmp363 # Offset: 596
    00000256: 	jmp	.Ltmp361 # Offset: 598
.Ltmp336:
    0000025b: 	movq	%rax, %rdx
    0000025e: 	nop # Size: 2
.Ltmp364:
    00000260: 	movq	(%rdx), %rdx
    00000263: 	addq	$0x1, %rdi
    00000267: 	cmpq	%rdx, %rsi
    0000026a: 	jne	.Ltmp364 # Offset: 618
    0000026c: 	movq	%rsi, %rdx
    0000026f: 	xorl	%r8d, %r8d
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp365:
    00000278: 	movq	(%rdx), %rdx
    0000027b: 	addq	$0x1, %r8
    0000027f: 	cmpq	%rdx, %r10
    00000282: 	jne	.Ltmp365 # Offset: 642
    00000284: 	jmp	.Ltmp366 # Offset: 644
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp353:
    00000290: 	cmpq	%rdx, %rax
    00000293: 	je	.Ltmp335 # Offset: 659
    00000299: 	movq	%rdx, %r9
    0000029c: 	jmp	.Ltmp354 # Offset: 668
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp367:
    000002a8: 	movsd	0x10(%r9), %xmm0
    000002ae: 	movq	(%r9), %r9
    000002b1: 	movsd	%xmm0, 0x10(%rax)
    000002b6: 	movq	(%rax), %rax
.Ltmp358:
    000002b9: 	cmpq	%r9, %r10
    000002bc: 	jne	.Ltmp367 # Offset: 700
    000002be: 	testq	%rdi, %rdi
    000002c1: 	je	.Ltmp335 # Offset: 705
    000002c7: 	movq	%rsp, %rax
    000002ca: 	leaq	(%rax,%rdi,8), %rcx
.Ltmp368:
    000002ce: 	movsd	(%rax), %xmm0
    000002d2: 	addq	$0x8, %rax
    000002d6: 	movsd	%xmm0, 0x10(%rdx)
    000002db: 	movq	(%rdx), %rdx
    000002de: 	cmpq	%rax, %rcx
    000002e1: 	jne	.Ltmp368 # Offset: 737
    000002e3: 	jmp	.Ltmp335 # Offset: 739
.Ltmp362:
    000002e8: 	cmpq	$0xbfc, %rdi
    000002ef: 	jbe	.Ltmp343 # Offset: 751
.Ltmp344:
    000002f5: 	movq	%rsp, %rdx
    000002f8: 	cmpq	%r9, %r10
    000002fb: 	je	.Ltmp369 # Offset: 763
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp370:
    00000300: 	movsd	0x10(%r9), %xmm0
    00000306: 	movq	(%r9), %r9
    00000309: 	addq	$0x8, %rdx
    0000030d: 	movsd	%xmm0, -0x8(%rdx)
    00000312: 	cmpq	%r9, %r10
    00000315: 	jne	.Ltmp370 # Offset: 789
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp369:
    00000320: 	movq	%rsp, %rdx
    00000323: 	leaq	(%rdx,%r8,8), %rsi
    00000327: 	testq	%r8, %r8
    0000032a: 	je	.Ltmp371 # Offset: 810
    0000032c: 	nopl	(%rax) # Size: 4
.Ltmp372:
    00000330: 	movq	%rax, %rcx
    00000333: 	movsd	(%rdx), %xmm1
    00000337: 	movq	(%rax), %rax
    0000033a: 	addq	$0x8, %rdx
    0000033e: 	movsd	0x10(%rcx), %xmm0
    00000343: 	movsd	%xmm1, 0x10(%rcx)
    00000348: 	movsd	%xmm0, -0x8(%rdx)
    0000034d: 	cmpq	%rsi, %rdx
    00000350: 	jne	.Ltmp372 # Offset: 848
.Ltmp371:
    00000352: 	subq	%r8, %rbx
    00000355: 	cmpq	%rbx, %r8
    00000358: 	cmovaq	%rbx, %r8
    0000035c: 	testq	%rbx, %rbx
    0000035f: 	jne	.Ltmp369 # Offset: 863
    00000361: 	jmp	.Ltmp335 # Offset: 865
.Ltmp337:
    00000366: 	movq	%rsi, %rdx
    00000369: 	jmp	.Ltmp373 # Offset: 873
.Ltmp350:
    0000036e: 	callq	__stack_chk_fail@PLT # Offset: 878
DWARF CFI Instructions:
    <empty>
End of Function "_Z28gries_mills_rotate_iterativeISt14_List_iteratorIdEEvT_S2_S2_mm"

Binary Function "_Z36gries_mills_rotate_iterative_wrapperISt14_List_iteratorIdEEvT_S2_S2_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x5b20
  Size        : 0xe
  MaxSize     : 0x10
  Offset      : 0x5b20
  Section     : .text
  Orc Section : .local.text._Z36gries_mills_rotate_iterative_wrapperISt14_List_iteratorIdEEvT_S2_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	xorl	%ecx, %ecx
    00000009: 	jmp	_Z28gries_mills_rotate_iterativeISt14_List_iteratorIdEEvT_S2_S2_mm # TAILCALL  # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z36gries_mills_rotate_iterative_wrapperISt14_List_iteratorIdEEvT_S2_S2_"

Binary Function "_Z28gries_mills_rotate_iterativeIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_mm" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x5b30
  Size        : 0x443
  MaxSize     : 0x450
  Offset      : 0x5b30
  Section     : .text
  Orc Section : .local.text._Z28gries_mills_rotate_iterativeIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x6000(%rsp), %r11
.Ltmp374:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp374 # Offset: 37
    00000027: 	subq	$0x8, %rsp
    0000002b: 	movq	%rdx, %rbx
    0000002e: 	movq	%fs:0x28, %rdx
    00000037: 	movq	%rdx, 0x5ff8(%rsp)
    0000003f: 	xorl	%edx, %edx
    00000041: 	cmpq	%rsi, %rdi
    00000044: 	je	.Ltmp375 # Offset: 68
    0000004a: 	movq	%rsi, %rax
    0000004d: 	cmpq	%rbx, %rsi
    00000050: 	je	.Ltmp375 # Offset: 80
    00000056: 	movq	%rcx, %r13
    00000059: 	movq	%rdi, %rbp
    0000005c: 	movq	%rsi, %r12
    0000005f: 	testq	%rcx, %rcx
    00000062: 	je	.Ltmp376 # Offset: 98
.Ltmp400:
    00000068: 	cmpq	%r8, %r13
    0000006b: 	je	.Ltmp377 # Offset: 107
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp388:
    00000078: 	leaq	(%r8,%r13), %r14
    0000007c: 	cmpq	$0x13, %r14
    00000080: 	jbe	.Ltmp378 # Offset: 128
.Ltmp393:
    00000086: 	cmpq	%r13, %r8
    00000089: 	movq	%r13, %rcx
    0000008c: 	cmovbeq	%r8, %rcx
    00000090: 	cmpq	$0xbfc, %rcx
    00000097: 	ja	.Ltmp379 # Offset: 151
    00000099: 	cmpq	%r13, %r8
    0000009c: 	jb	.Ltmp380 # Offset: 156
    000000a2: 	movq	%r8, %rax
    000000a5: 	subq	%r13, %rax
    000000a8: 	leaq	(%r12,%rax,8), %r15
    000000ac: 	cmpq	$0xbfc, %r13
    000000b3: 	jbe	.Ltmp381 # Offset: 179
.Ltmp396:
    000000b9: 	cmpq	$0xbfc, %r8
    000000c0: 	jbe	.Ltmp382 # Offset: 192
    000000c6: 	movq	%r12, %rax
    000000c9: 	testq	%rcx, %rcx
    000000cc: 	je	.Ltmp383 # Offset: 204
.Ltmp379:
    000000d2: 	leaq	0xf(%r12), %rax
    000000d7: 	subq	%rbp, %rax
    000000da: 	cmpq	$0x1e, %rax
    000000de: 	jbe	.Ltmp384 # Offset: 222
    000000e4: 	leaq	-0x1(%rcx), %rax
    000000e8: 	cmpq	$0x1, %rax
    000000ec: 	jbe	.Ltmp384 # Offset: 236
    000000f2: 	movq	%rcx, %rsi
    000000f5: 	xorl	%eax, %eax
    000000f7: 	xorl	%edx, %edx
    000000f9: 	shrq	%rsi
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp385:
    00000100: 	movupd	(%rbp,%rax), %xmm0
    00000106: 	movupd	(%r12,%rax), %xmm2
    0000010c: 	addq	$0x1, %rdx
    00000110: 	movups	%xmm2, (%rbp,%rax)
    00000115: 	movups	%xmm0, (%r12,%rax)
    0000011a: 	addq	$0x10, %rax
    0000011e: 	cmpq	%rsi, %rdx
    00000121: 	jne	.Ltmp385 # Offset: 289
    00000123: 	movq	%rcx, %rsi
    00000126: 	andq	$-0x2, %rsi
    0000012a: 	leaq	(,%rsi,8), %rax
    00000132: 	leaq	(%rbp,%rax), %rdx
    00000137: 	addq	%r12, %rax
    0000013a: 	cmpq	%rsi, %rcx
    0000013d: 	je	.Ltmp386 # Offset: 317
    0000013f: 	movsd	(%rdx), %xmm0
    00000143: 	movsd	(%rax), %xmm1
    00000147: 	movsd	%xmm1, (%rdx)
    0000014b: 	movsd	%xmm0, (%rax)
.Ltmp386:
    0000014f: 	shlq	$0x3, %rcx
    00000153: 	leaq	(%r12,%rcx), %rax
    00000157: 	addq	%rcx, %rbp
.Ltmp383:
    0000015a: 	cmpq	%r13, %r8
    0000015d: 	jae	.Ltmp387 # Offset: 349
    00000163: 	subq	%r8, %r13
    00000166: 	cmpq	%r8, %r13
    00000169: 	jne	.Ltmp388 # Offset: 361
    0000016f: 	movq	%r12, %rax
.Ltmp392:
    00000172: 	cmpq	%rax, %rbp
    00000175: 	je	.Ltmp375 # Offset: 373
.Ltmp377:
    0000017b: 	leaq	0xf(%rbp), %rdx
    0000017f: 	leaq	-0x8(%rax), %rcx
    00000183: 	subq	%rax, %rdx
    00000186: 	subq	%rbp, %rcx
    00000189: 	cmpq	$0x1e, %rdx
    0000018d: 	jbe	.Ltmp389 # Offset: 397
    00000193: 	cmpq	$0x8, %rcx
    00000197: 	jbe	.Ltmp389 # Offset: 407
    0000019d: 	shrq	$0x3, %rcx
    000001a1: 	xorl	%edx, %edx
    000001a3: 	addq	$0x1, %rcx
    000001a7: 	movq	%rcx, %rsi
    000001aa: 	shrq	%rsi
    000001ad: 	shlq	$0x4, %rsi
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp390:
    000001b8: 	movupd	(%rbp,%rdx), %xmm0
    000001be: 	movupd	(%rax,%rdx), %xmm4
    000001c3: 	movups	%xmm4, (%rbp,%rdx)
    000001c8: 	movups	%xmm0, (%rax,%rdx)
    000001cc: 	addq	$0x10, %rdx
    000001d0: 	cmpq	%rsi, %rdx
    000001d3: 	jne	.Ltmp390 # Offset: 467
    000001d5: 	movq	%rcx, %rsi
    000001d8: 	andq	$-0x2, %rsi
    000001dc: 	leaq	(,%rsi,8), %rdx
    000001e4: 	addq	%rdx, %rbp
    000001e7: 	addq	%rdx, %rax
    000001ea: 	cmpq	%rsi, %rcx
    000001ed: 	je	.Ltmp375 # Offset: 493
    000001ef: 	movsd	(%rbp), %xmm0
    000001f4: 	movsd	(%rax), %xmm1
    000001f8: 	movsd	%xmm1, (%rbp)
    000001fd: 	movsd	%xmm0, (%rax)
.Ltmp375:
    00000201: 	movq	0x5ff8(%rsp), %rax
    00000209: 	subq	%fs:0x28, %rax
    00000212: 	jne	.Ltmp391 # Offset: 530
    00000218: 	addq	$0x6008, %rsp
    0000021f: 	popq	%rbx
    00000220: 	popq	%rbp
    00000221: 	popq	%r12
    00000223: 	popq	%r13
    00000225: 	popq	%r14
    00000227: 	popq	%r15
    00000229: 	retq # Offset: 553
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp387:
    00000230: 	subq	%r13, %r8
    00000233: 	cmpq	%r13, %r8
    00000236: 	je	.Ltmp392 # Offset: 566
    0000023c: 	leaq	(%r8,%r13), %r14
    00000240: 	movq	%rax, %r12
    00000243: 	cmpq	$0x13, %r14
    00000247: 	ja	.Ltmp393 # Offset: 583
.Ltmp378:
    0000024d: 	cmpq	%rbx, %r12
    00000250: 	je	.Ltmp375 # Offset: 592
    00000252: 	cmpq	%rbp, %r12
    00000255: 	je	.Ltmp375 # Offset: 597
    00000257: 	movq	%r12, %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp395:
    00000260: 	movsd	(%rbp), %xmm0
    00000265: 	movsd	(%r12), %xmm1
    0000026b: 	addq	$0x8, %r12
    0000026f: 	addq	$0x8, %rbp
    00000273: 	movsd	%xmm1, -0x8(%rbp)
    00000278: 	movsd	%xmm0, -0x8(%r12)
    0000027f: 	cmpq	%r12, %rbx
    00000282: 	je	.Ltmp394 # Offset: 642
    00000288: 	cmpq	%rax, %rbp
    0000028b: 	cmoveq	%r12, %rax
    0000028f: 	jmp	.Ltmp395 # Offset: 655
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp380:
    00000298: 	leaq	(%rbp,%r8,8), %r15
    0000029d: 	cmpq	$0xbfc, %r13
    000002a4: 	ja	.Ltmp396 # Offset: 676
.Ltmp381:
    000002aa: 	cmpq	%rbp, %r12
    000002ad: 	je	.Ltmp397 # Offset: 685
    000002af: 	movq	%r12, %rdx
    000002b2: 	leaq	0x10(%rsp), %rdi
    000002b7: 	movq	%rbp, %rsi
    000002ba: 	subq	%rbp, %rdx
    000002bd: 	callq	memcpy@PLT # Offset: 701
.Ltmp397:
    000002c2: 	cmpq	%r12, %rbx
    000002c5: 	je	.Ltmp398 # Offset: 709
    000002c7: 	subq	%r12, %rbx
    000002ca: 	movq	%r12, %rsi
    000002cd: 	movq	%rbp, %rdi
    000002d0: 	movq	%rbx, %rdx
    000002d3: 	callq	memmove@PLT # Offset: 723
.Ltmp398:
    000002d8: 	testq	%r13, %r13
    000002db: 	je	.Ltmp375 # Offset: 731
    000002e1: 	leaq	(,%r13,8), %rdx
    000002e9: 	leaq	0x10(%rsp), %rsi
    000002ee: 	movq	%r15, %rdi
    000002f1: 	callq	memcpy@PLT # Offset: 753
    000002f6: 	jmp	.Ltmp375 # Offset: 758
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp384:
    00000300: 	xorl	%eax, %eax
    00000302: 	nopw	(%rax,%rax) # Size: 6
.Ltmp399:
    00000308: 	movsd	(%rbp,%rax,8), %xmm0
    0000030e: 	movsd	(%r12,%rax,8), %xmm1
    00000314: 	movsd	%xmm1, (%rbp,%rax,8)
    0000031a: 	movsd	%xmm0, (%r12,%rax,8)
    00000320: 	addq	$0x1, %rax
    00000324: 	cmpq	%rax, %rcx
    00000327: 	jne	.Ltmp399 # Offset: 807
    00000329: 	jmp	.Ltmp386 # Offset: 809
.Ltmp376:
    0000032e: 	movq	%rsi, %r13
    00000331: 	movq	%rbx, %r8
    00000334: 	subq	%rdi, %r13
    00000337: 	subq	%rsi, %r8
    0000033a: 	sarq	$0x3, %r13
    0000033e: 	sarq	$0x3, %r8
    00000342: 	jmp	.Ltmp400 # Offset: 834
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp394:
    00000350: 	cmpq	%rax, %rbp
    00000353: 	je	.Ltmp375 # Offset: 851
    00000359: 	movq	%rax, %r12
    0000035c: 	jmp	.Ltmp395 # Offset: 860
.Ltmp382:
    00000361: 	cmpq	%r12, %rbx
    00000364: 	je	.Ltmp401 # Offset: 868
    00000366: 	subq	%r12, %rbx
    00000369: 	leaq	0x10(%rsp), %rdi
    0000036e: 	movq	%r12, %rsi
    00000371: 	movq	%r8, 0x8(%rsp)
    00000376: 	movq	%rbx, %rdx
    00000379: 	callq	memcpy@PLT # Offset: 889
    0000037e: 	movq	0x8(%rsp), %r8
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp401:
    00000388: 	testq	%r8, %r8
    0000038b: 	je	.Ltmp402 # Offset: 907
    0000038d: 	cmpq	$0x1, %r8
    00000391: 	je	.Ltmp403 # Offset: 913
    00000393: 	movq	%r8, %rcx
    00000396: 	movq	%rbp, %rax
    00000399: 	leaq	0x10(%rsp), %rdx
    0000039e: 	shrq	%rcx
    000003a1: 	shlq	$0x4, %rcx
    000003a5: 	addq	%rbp, %rcx
    000003a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp404:
    000003b0: 	movapd	(%rdx), %xmm3
    000003b4: 	movupd	(%rax), %xmm0
    000003b8: 	addq	$0x10, %rax
    000003bc: 	addq	$0x10, %rdx
    000003c0: 	movups	%xmm3, -0x10(%rax)
    000003c4: 	movaps	%xmm0, -0x10(%rdx)
    000003c8: 	cmpq	%rax, %rcx
    000003cb: 	jne	.Ltmp404 # Offset: 971
    000003cd: 	movq	%r8, %rax
    000003d0: 	andq	$-0x2, %rax
    000003d4: 	leaq	(%rbp,%rax,8), %rdx
    000003d9: 	cmpq	%r8, %rax
    000003dc: 	je	.Ltmp405 # Offset: 988
.Ltmp406:
    000003de: 	movsd	(%rdx), %xmm0
    000003e2: 	movsd	0x10(%rsp,%rax,8), %xmm1
    000003e8: 	movsd	%xmm1, (%rdx)
    000003ec: 	movsd	%xmm0, 0x10(%rsp,%rax,8)
.Ltmp405:
    000003f2: 	leaq	(%rbp,%r8,8), %rbp
.Ltmp402:
    000003f7: 	subq	%r8, %r14
    000003fa: 	cmpq	%r14, %r8
    000003fd: 	cmovaq	%r14, %r8
    00000401: 	testq	%r14, %r14
    00000404: 	jne	.Ltmp401 # Offset: 1028
    00000406: 	jmp	.Ltmp375 # Offset: 1030
.Ltmp403:
    0000040b: 	movq	%rbp, %rdx
    0000040e: 	xorl	%eax, %eax
    00000410: 	jmp	.Ltmp406 # Offset: 1040
.Ltmp389:
    00000412: 	movq	%rax, %rcx
    00000415: 	xorl	%edx, %edx
    00000417: 	subq	%rbp, %rcx
.Ltmp407:
    0000041a: 	movsd	(%rbp,%rdx), %xmm0
    00000420: 	movsd	(%rax,%rdx), %xmm1
    00000425: 	movsd	%xmm1, (%rbp,%rdx)
    0000042b: 	movsd	%xmm0, (%rax,%rdx)
    00000430: 	addq	$0x8, %rdx
    00000434: 	cmpq	%rcx, %rdx
    00000437: 	jne	.Ltmp407 # Offset: 1079
    00000439: 	jmp	.Ltmp375 # Offset: 1081
.Ltmp391:
    0000043e: 	callq	__stack_chk_fail@PLT # Offset: 1086
DWARF CFI Instructions:
    <empty>
End of Function "_Z28gries_mills_rotate_iterativeIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_mm"

Binary Function "_Z36gries_mills_rotate_iterative_wrapperIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x5f80
  Size        : 0xe
  MaxSize     : 0x10
  Offset      : 0x5f80
  Section     : .text
  Orc Section : .local.text._Z36gries_mills_rotate_iterative_wrapperIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	xorl	%ecx, %ecx
    00000009: 	jmp	_Z28gries_mills_rotate_iterativeIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_mm # TAILCALL  # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z36gries_mills_rotate_iterative_wrapperIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_"

Binary Function "_ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x5f90
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x5f90
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp408 # Offset: 7
    00000009: 	pushq	%r12
    0000000b: 	movq	%rsi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	xorl	%ebp, %ebp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, %rbx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp409:
    00000018: 	movl	$0x18, %edi
    0000001d: 	callq	_Znwm@PLT # Offset: 29
    00000022: 	movq	$0x0, 0x10(%rax)
    0000002a: 	movq	%rax, %rdi
    0000002d: 	movq	%rbx, %rsi
    00000030: 	addq	$0x1, %rbp
    00000034: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 52
    00000039: 	addq	$0x1, 0x10(%rbx)
    0000003e: 	cmpq	%rbp, %r12
    00000041: 	jne	.Ltmp409 # Offset: 65
    00000043: 	popq	%rbx
    00000044: 	popq	%rbp
    00000045: 	popq	%r12
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp408:
    00000050: 	retq # Offset: 80
    00000051: 	endbr64
    00000055: 	movq	%rax, %rdi
    00000058: 	callq	__cxa_begin_catch@PLT # Offset: 88
.Ltmp411:
    0000005d: 	testq	%rbp, %rbp
    00000060: 	je	.Ltmp410 # Offset: 96
    00000062: 	subq	$0x1, 0x10(%rbx)
    00000067: 	movq	0x8(%rbx), %r12
    0000006b: 	subq	$0x1, %rbp
    0000006f: 	movq	%r12, %rdi
    00000072: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 114
    00000077: 	movl	$0x18, %esi
    0000007c: 	movq	%r12, %rdi
    0000007f: 	callq	_ZdlPvm@PLT # Offset: 127
    00000084: 	jmp	.Ltmp411 # Offset: 132
.Ltmp410:
    00000086: 	callq	__cxa_rethrow@PLT # Offset: 134
    0000008b: 	endbr64
    0000008f: 	movq	%rax, %rbp
    00000092: 	callq	__cxa_end_catch@PLT # Offset: 146
    00000097: 	movq	%rbp, %rdi
    0000009a: 	callq	_Unwind_Resume@PLT # Offset: 154
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm"

Binary Function "_ZNSt7__cxx114listIdSaIdEE6resizeEm" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x6030
  Size        : 0xe3
  MaxSize     : 0xf0
  Offset      : 0x6030
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx114listIdSaIdEE6resizeEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	0x10(%rdi), %rax
    0000000f: 	cmpq	%rsi, %rax
    00000012: 	jbe	.Ltmp412 # Offset: 18
    00000014: 	movq	%rax, %rdx
    00000017: 	shrq	%rdx
    0000001a: 	cmpq	%rsi, %rdx
    0000001d: 	jb	.Ltmp413 # Offset: 29
    0000001f: 	movq	(%rdi), %rbp
    00000022: 	testq	%rsi, %rsi
    00000025: 	je	.Ltmp414 # Offset: 37
    00000027: 	subq	$0x1, %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp415:
    00000030: 	movq	(%rbp), %rbp
    00000034: 	subq	$0x1, %rsi
    00000038: 	jae	.Ltmp415 # Offset: 56
.Ltmp414:
    0000003a: 	cmpq	%rbp, %r12
    0000003d: 	jne	.Ltmp416 # Offset: 61
    0000003f: 	jmp	.Ltmp417 # Offset: 63
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp418:
    00000048: 	movq	0x10(%r12), %rax
    0000004d: 	movq	%rbx, %rbp
.Ltmp416:
    00000050: 	subq	$0x1, %rax
    00000054: 	movq	(%rbp), %rbx
    00000058: 	movq	%rbp, %rdi
    0000005b: 	movq	%rax, 0x10(%r12)
    00000060: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 96
    00000065: 	movl	$0x18, %esi
    0000006a: 	movq	%rbp, %rdi
    0000006d: 	callq	_ZdlPvm@PLT # Offset: 109
    00000072: 	cmpq	%rbx, %r12
    00000075: 	jne	.Ltmp418 # Offset: 117
.Ltmp417:
    00000077: 	popq	%rbx
    00000078: 	popq	%rbp
    00000079: 	popq	%r12
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp412:
    00000080: 	subq	%rax, %rsi
    00000083: 	je	.Ltmp417 # Offset: 131
    00000085: 	popq	%rbx
    00000086: 	popq	%rbp
    00000087: 	popq	%r12
    00000089: 	jmp	_ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm # TAILCALL  # Offset: 137
    0000008e: 	nop # Size: 2
.Ltmp413:
    00000090: 	movq	%rax, %rcx
    00000093: 	movq	%rdi, %rbp
    00000096: 	subq	%rsi, %rcx
    00000099: 	movq	%rcx, %rdx
    0000009c: 	notq	%rdx
    0000009f: 	jns	.Ltmp419 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp420:
    000000a8: 	movq	(%rbp), %rbp
    000000ac: 	subq	$0x1, %rdx
    000000b0: 	jb	.Ltmp414 # Offset: 176
    000000b2: 	movq	(%rbp), %rbp
    000000b6: 	subq	$0x1, %rdx
    000000ba: 	jae	.Ltmp420 # Offset: 186
    000000bc: 	jmp	.Ltmp414 # Offset: 188
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp419:
    000000c8: 	movl	$0x1, %edx
    000000cd: 	subq	%rcx, %rdx
.Ltmp421:
    000000d0: 	addq	$0x1, %rdx
    000000d4: 	movq	0x8(%rbp), %rbp
    000000d8: 	cmpq	$0x1, %rdx
    000000dc: 	jne	.Ltmp421 # Offset: 220
    000000de: 	jmp	.Ltmp414 # Offset: 222
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx114listIdSaIdEE6resizeEm"

Binary Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x6120
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x6120
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIdSaIdEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp422 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp423 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp424 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp425 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp426 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp433:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp427 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp427:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp428 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp429 # Offset: 200
.Ltmp431:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp423:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp430 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp430:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp422:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp428:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp432:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp431 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp429:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp432 # Offset: 392
.Ltmp426:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp434:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp433 # Offset: 445
.Ltmp425:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp434 # Offset: 460
.Ltmp424:
    000001ce: 	leaq	DATAat0xd197(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm"

Binary Function "_ZNSt7__cxx114listIdSaIdEE5mergeEOS2_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x6300
  Size        : 0xa1
  MaxSize     : 0xb0
  Offset      : 0x6300
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx114listIdSaIdEE5mergeEOS2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp435 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdi, %rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x8, %rsp
    0000001d: 	movq	(%rdi), %rbx
    00000020: 	movq	(%rsi), %rsi
    00000023: 	cmpq	%rbx, %rdi
    00000026: 	je	.Ltmp436 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp439:
    00000030: 	cmpq	%rsi, %r12
    00000033: 	je	.Ltmp437 # Offset: 51
    00000035: 	movsd	0x10(%rbx), %xmm0
    0000003a: 	comisd	0x10(%rsi), %xmm0
    0000003f: 	ja	.Ltmp438 # Offset: 63
    00000041: 	movq	(%rbx), %rbx
    00000044: 	cmpq	%rbx, %rbp
    00000047: 	jne	.Ltmp439 # Offset: 71
    00000049: 	movq	%r12, %rdx
    0000004c: 	movq	%rbp, %rdi
    0000004f: 	callq	_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_@PLT # Offset: 79
.Ltmp437:
    00000054: 	movq	0x10(%r12), %rax
    00000059: 	addq	%rax, 0x10(%rbp)
    0000005d: 	movq	$0x0, 0x10(%r12)
    00000066: 	addq	$0x8, %rsp
    0000006a: 	popq	%rbx
    0000006b: 	popq	%rbp
    0000006c: 	popq	%r12
    0000006e: 	popq	%r13
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp438:
    00000078: 	movq	(%rsi), %r13
    0000007b: 	movq	%rbx, %rdi
    0000007e: 	movq	%r13, %rdx
    00000081: 	callq	_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_@PLT # Offset: 129
    00000086: 	movq	%r13, %rsi
    00000089: 	cmpq	%rbx, %rbp
    0000008c: 	jne	.Ltmp439 # Offset: 140
.Ltmp436:
    0000008e: 	cmpq	%rsi, %r12
    00000091: 	je	.Ltmp437 # Offset: 145
    00000093: 	movq	%r12, %rdx
    00000096: 	movq	%rbp, %rdi
    00000099: 	callq	_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_@PLT # Offset: 153
    0000009e: 	jmp	.Ltmp437 # Offset: 158
.Ltmp435:
    000000a0: 	retq # Offset: 160
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx114listIdSaIdEE5mergeEOS2_"

Binary Function "_ZNSt7__cxx114listIdSaIdEE4sortEv" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x63b0
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0x63b0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx114listIdSaIdEE4sortEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x638, %rsp
    00000015: 	movq	(%rdi), %r15
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x628(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cmpq	%rdi, %r15
    0000002e: 	je	.Ltmp440 # Offset: 46
    00000034: 	movq	%rdi, %rbp
    00000037: 	cmpq	(%r15), %rdi
    0000003a: 	je	.Ltmp440 # Offset: 58
    00000040: 	movq	%rsp, %r12
    00000043: 	leaq	0x20(%rsp), %r13
    00000048: 	movq	$0x0, 0x10(%rsp)
    00000051: 	leaq	0x620(%rsp), %rdx
    00000059: 	movq	%r12, %xmm0
    0000005e: 	movq	%r13, %rax
    00000061: 	punpcklqdq	%xmm0, %xmm0
    00000065: 	movaps	%xmm0, (%rsp)
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp441:
    00000070: 	movq	%rax, %xmm0
    00000075: 	movq	$0x0, 0x10(%rax)
    0000007d: 	addq	$0x18, %rax
    00000081: 	punpcklqdq	%xmm0, %xmm0
    00000085: 	movups	%xmm0, -0x18(%rax)
    00000089: 	cmpq	%rdx, %rax
    0000008c: 	jne	.Ltmp441 # Offset: 140
    0000008e: 	movq	%r12, %rdi
    00000091: 	movq	%r13, %r14
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp449:
    00000098: 	movq	(%r15), %rdx
    0000009b: 	cmpq	%r15, %rdi
    0000009e: 	je	.Ltmp442 # Offset: 158
    000000a0: 	cmpq	%rdx, %rdi
    000000a3: 	je	.Ltmp442 # Offset: 163
    000000a5: 	movq	%r15, %rsi
    000000a8: 	callq	_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_@PLT # Offset: 168
    000000ad: 	addq	$0x1, 0x10(%rsp)
    000000b3: 	subq	$0x1, 0x10(%rbp)
.Ltmp442:
    000000b8: 	cmpq	%r13, %r14
    000000bb: 	je	.Ltmp443 # Offset: 187
    000000c1: 	movq	%r13, %rbx
    000000c4: 	jmp	.Ltmp444 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp446:
    000000d0: 	movq	%rbx, %rdi
    000000d3: 	movq	%r12, %rsi
    000000d6: 	callq	_ZNSt7__cxx114listIdSaIdEE5mergeEOS2_ # Offset: 214
    000000db: 	movq	%rbx, %rsi
    000000de: 	movq	%r12, %rdi
    000000e1: 	addq	$0x18, %rbx
    000000e5: 	callq	_ZNSt8__detail15_List_node_base4swapERS0_S1_@PLT # Offset: 229
    000000ea: 	movq	0x10(%rsp), %rdx
    000000ef: 	movq	-0x8(%rbx), %rax
    000000f3: 	movq	%rdx, -0x8(%rbx)
    000000f7: 	movq	%rax, 0x10(%rsp)
    000000fc: 	cmpq	%rbx, %r14
    000000ff: 	je	.Ltmp445 # Offset: 255
.Ltmp444:
    00000105: 	cmpq	%rbx, (%rbx)
    00000108: 	jne	.Ltmp446 # Offset: 264
    0000010a: 	movq	%rbx, %rsi
    0000010d: 	movq	%r12, %rdi
    00000110: 	callq	_ZNSt8__detail15_List_node_base4swapERS0_S1_@PLT # Offset: 272
    00000115: 	movq	0x10(%rbx), %rax
    00000119: 	movq	0x10(%rsp), %rdx
    0000011e: 	movq	%rax, 0x10(%rsp)
    00000123: 	movq	%rdx, 0x10(%rbx)
    00000127: 	cmpq	%rbx, %r14
    0000012a: 	je	.Ltmp447 # Offset: 298
    00000130: 	movq	(%rbp), %r15
    00000134: 	cmpq	%r15, %rbp
    00000137: 	je	.Ltmp448 # Offset: 311
.Ltmp452:
    0000013d: 	movq	(%rsp), %rdi
    00000141: 	jmp	.Ltmp449 # Offset: 321
.Ltmp457:
    00000146: 	movq	(%rsp), %rbx
    0000014a: 	cmpq	%r12, %rbx
    0000014d: 	je	.Ltmp440 # Offset: 333
    0000014f: 	nop # Size: 1
.Ltmp450:
    00000150: 	movq	%rbx, %rdi
    00000153: 	movq	(%rbx), %rbx
    00000156: 	movl	$0x18, %esi
    0000015b: 	callq	_ZdlPvm@PLT # Offset: 347
    00000160: 	cmpq	%r12, %rbx
    00000163: 	jne	.Ltmp450 # Offset: 355
.Ltmp440:
    00000165: 	movq	0x628(%rsp), %rax
    0000016d: 	subq	%fs:0x28, %rax
    00000176: 	jne	.Ltmp451 # Offset: 374
    0000017c: 	addq	$0x638, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	retq # Offset: 397
.Ltmp443:
    0000018e: 	movq	%r14, %rbx
.Ltmp445:
    00000191: 	movq	%rbx, %rsi
    00000194: 	movq	%r12, %rdi
    00000197: 	callq	_ZNSt8__detail15_List_node_base4swapERS0_S1_@PLT # Offset: 407
    0000019c: 	movq	0x10(%rbx), %rax
    000001a0: 	movq	0x10(%rsp), %rdx
    000001a5: 	movq	%rax, 0x10(%rsp)
    000001aa: 	movq	%rdx, 0x10(%rbx)
.Ltmp447:
    000001ae: 	movq	(%rbp), %r15
    000001b2: 	addq	$0x18, %r14
    000001b6: 	cmpq	%r15, %rbp
    000001b9: 	jne	.Ltmp452 # Offset: 441
.Ltmp448:
    000001bf: 	leaq	0x38(%rsp), %rbx
    000001c4: 	cmpq	%rbx, %r14
    000001c7: 	je	.Ltmp453 # Offset: 455
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp454:
    000001d0: 	leaq	-0x18(%rbx), %rsi
    000001d4: 	movq	%rbx, %rdi
    000001d7: 	addq	$0x18, %rbx
    000001db: 	callq	_ZNSt7__cxx114listIdSaIdEE5mergeEOS2_ # Offset: 475
    000001e0: 	cmpq	%rbx, %r14
    000001e3: 	jne	.Ltmp454 # Offset: 483
.Ltmp453:
    000001e5: 	leaq	-0x18(%r14), %rsi
    000001e9: 	movq	%r15, %rdi
    000001ec: 	callq	_ZNSt8__detail15_List_node_base4swapERS0_S1_@PLT # Offset: 492
    000001f1: 	movq	0x10(%rbp), %rdx
    000001f5: 	movq	-0x8(%r14), %rax
    000001f9: 	movq	%rdx, -0x8(%r14)
    000001fd: 	movq	%rax, 0x10(%rbp)
    00000201: 	leaq	0x608(%rsp), %rbp
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp458:
    00000210: 	movq	(%rbp), %rbx
    00000214: 	cmpq	%rbx, %rbp
    00000217: 	je	.Ltmp455 # Offset: 535
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp456:
    00000220: 	movq	%rbx, %rdi
    00000223: 	movq	(%rbx), %rbx
    00000226: 	movl	$0x18, %esi
    0000022b: 	callq	_ZdlPvm@PLT # Offset: 555
    00000230: 	cmpq	%rbx, %rbp
    00000233: 	jne	.Ltmp456 # Offset: 563
.Ltmp455:
    00000235: 	leaq	-0x18(%rbp), %rax
    00000239: 	cmpq	%r13, %rbp
    0000023c: 	je	.Ltmp457 # Offset: 572
    00000242: 	movq	%rax, %rbp
    00000245: 	jmp	.Ltmp458 # Offset: 581
.Ltmp451:
    00000247: 	callq	__stack_chk_fail@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx114listIdSaIdEE4sortEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x6600
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x6600
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp459 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp460 # Offset: 152
.Ltmp471:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp461 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp462 # Offset: 204
.Ltmp461:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp463 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp464 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp466:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp465 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp464:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp466 # Offset: 339
    00000155: 	jmp	.Ltmp467 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp460:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp468 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp469 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp470 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp470:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp473:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp471 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp463:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp467:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp466 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp468:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp472 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp473 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp473 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp472:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp473 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp473 # Offset: 696
.Ltmp462:
    000002bd: 	leaq	DATAat0xd158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp469:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp474 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp474:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp459:
    000002e0: 	leaq	DATAat0xd1b8(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp465:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/rotate_sequence.cpp/1
  Number      : 77
  State       : disassembled
  Address     : 0x6930
  Size        : 0x3f8
  MaxSize     : 0x400
  Offset      : 0x6930
  Section     : .text
  Orc Section : .local.text._Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movl	%edx, %ebp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x48, %rsp
    00000013: 	movq	%rdi, 0x8(%rsp)
    00000018: 	movq	%rsi, 0x20(%rsp)
    0000001d: 	movq	%rcx, 0x28(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x38(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movl	iterations(%rip), %ebx
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	leal	-0x2(%rbx,%rbp), %eax
    00000048: 	movl	%ebx, 0x10(%rsp)
    0000004c: 	cltd
    0000004d: 	idivl	%ebx
    0000004f: 	movl	$0x1, %edx
    00000054: 	testl	%eax, %eax
    00000056: 	cmovgl	%eax, %edx
    00000059: 	movslq	%edx, %rax
    0000005c: 	movl	%eax, 0x14(%rsp)
    00000060: 	testl	%ebx, %ebx
    00000062: 	jle	.Ltmp475 # Offset: 98
    00000068: 	shlq	$0x3, %rax
    0000006c: 	movl	$0x0, 0x4(%rsp)
    00000074: 	xorl	%ebx, %ebx
    00000076: 	xorl	%r14d, %r14d
    00000079: 	movq	%rax, 0x18(%rsp)
.Ltmp485:
    0000007e: 	cmpl	%r14d, %ebp
    00000081: 	jg	.Ltmp476 # Offset: 129
    00000083: 	movq	0x8(%rsp), %rcx
    00000088: 	subl	%ebp, %r14d
    0000008b: 	movslq	%r14d, %rax
    0000008e: 	leaq	(%rcx,%rax,8), %r13
.Ltmp476:
    00000092: 	movq	0x8(%rsp), %rcx
    00000097: 	cmpq	%r13, %rcx
    0000009a: 	je	.Ltmp477 # Offset: 154
    000000a0: 	movq	0x20(%rsp), %rax
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	je	.Ltmp477 # Offset: 168
    000000ae: 	movq	%r13, %r8
    000000b1: 	subq	%r13, %rax
    000000b4: 	movq	%r13, %rdx
    000000b7: 	movq	%r13, %r12
    000000ba: 	subq	%rcx, %r8
    000000bd: 	movq	%rax, %r11
    000000c0: 	xorl	%r9d, %r9d
    000000c3: 	sarq	$0x3, %r8
    000000c7: 	sarq	$0x3, %r11
    000000cb: 	addq	%r8, %r11
    000000ce: 	movq	%r8, %r10
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp483:
    000000d8: 	movq	%r10, %rdi
    000000db: 	movq	%r11, %rax
    000000de: 	subq	%r9, %rdi
    000000e1: 	subq	%r8, %rax
    000000e4: 	cmpq	%rax, %rdi
    000000e7: 	cmovaq	%rax, %rdi
    000000eb: 	testq	%rdi, %rdi
    000000ee: 	je	.Ltmp478 # Offset: 238
    000000f4: 	leaq	0xf(%rcx), %rax
    000000f8: 	subq	%rdx, %rax
    000000fb: 	cmpq	$0x1e, %rax
    000000ff: 	jbe	.Ltmp479 # Offset: 255
    00000105: 	leaq	-0x1(%rdi), %rax
    00000109: 	cmpq	$0x1, %rax
    0000010d: 	jbe	.Ltmp479 # Offset: 269
    00000113: 	movq	%rdi, %r15
    00000116: 	xorl	%eax, %eax
    00000118: 	xorl	%esi, %esi
    0000011a: 	shrq	%r15
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp480:
    00000120: 	movupd	(%rcx,%rax), %xmm0
    00000125: 	movupd	(%rdx,%rax), %xmm2
    0000012a: 	addq	$0x1, %rsi
    0000012e: 	movups	%xmm2, (%rcx,%rax)
    00000132: 	movups	%xmm0, (%rdx,%rax)
    00000136: 	addq	$0x10, %rax
    0000013a: 	cmpq	%rsi, %r15
    0000013d: 	jne	.Ltmp480 # Offset: 317
    0000013f: 	movq	%rdi, %r15
    00000142: 	andq	$-0x2, %r15
    00000146: 	leaq	(,%r15,8), %rax
    0000014e: 	leaq	(%rcx,%rax), %rsi
    00000152: 	addq	%rdx, %rax
    00000155: 	cmpq	%rdi, %r15
    00000158: 	je	.Ltmp481 # Offset: 344
    0000015a: 	movsd	(%rsi), %xmm0
    0000015e: 	movsd	(%rax), %xmm1
    00000162: 	movsd	%xmm1, (%rsi)
    00000166: 	movsd	%xmm0, (%rax)
.Ltmp481:
    0000016a: 	leaq	(,%rdi,8), %rax
    00000172: 	addq	%rax, %rcx
    00000175: 	addq	%rax, %rdx
.Ltmp478:
    00000178: 	addq	%rdi, %r8
    0000017b: 	addq	%rdi, %r9
    0000017e: 	cmpq	%r8, %r11
    00000181: 	je	.Ltmp482 # Offset: 385
    00000183: 	cmpq	%r9, %r10
    00000186: 	jne	.Ltmp483 # Offset: 390
    0000018c: 	movq	%rdx, %r12
    0000018f: 	movq	%r8, %r10
    00000192: 	jmp	.Ltmp483 # Offset: 402
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp482:
    000001a0: 	cmpq	%r9, %r10
    000001a3: 	je	.Ltmp477 # Offset: 419
    000001a5: 	movq	%r12, %rdx
    000001a8: 	movq	%r10, %r8
    000001ab: 	jmp	.Ltmp483 # Offset: 427
.Ltmp479:
    000001b0: 	xorl	%eax, %eax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp484:
    000001b8: 	movsd	(%rcx,%rax,8), %xmm0
    000001bd: 	movsd	(%rdx,%rax,8), %xmm1
    000001c2: 	movsd	%xmm1, (%rcx,%rax,8)
    000001c7: 	movsd	%xmm0, (%rdx,%rax,8)
    000001cc: 	addq	$0x1, %rax
    000001d0: 	cmpq	%rax, %rdi
    000001d3: 	jne	.Ltmp484 # Offset: 467
    000001d5: 	jmp	.Ltmp481 # Offset: 469
.Ltmp477:
    000001d7: 	subl	%r14d, %ebx
    000001da: 	leal	(%rbx,%rbp), %eax
    000001dd: 	cmovsl	%eax, %ebx
    000001e0: 	movl	%ebx, %eax
    000001e2: 	subl	%ebp, %eax
    000001e4: 	cmpl	%ebx, %ebp
    000001e6: 	cmovlel	%eax, %ebx
    000001e9: 	movq	0x18(%rsp), %rax
    000001ee: 	addl	0x14(%rsp), %r14d
    000001f3: 	addq	%r13, %rax
    000001f6: 	cmpl	%r14d, %ebp
    000001f9: 	cmovgq	%rax, %r13
    000001fd: 	addl	$0x1, 0x4(%rsp)
    00000202: 	movl	0x4(%rsp), %eax
    00000206: 	cmpl	%eax, 0x10(%rsp)
    0000020a: 	jne	.Ltmp485 # Offset: 522
.Ltmp500:
    00000210: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000217: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000021e: 	subq	$0x20, %rax
    00000222: 	cmpq	%rax, %rbp
    00000225: 	je	.Ltmp486 # Offset: 549
    0000022b: 	movq	0x28(%rsp), %rax
    00000230: 	leaq	0x10(%rbp), %rdi
    00000234: 	movq	%rdi, (%rbp)
    00000238: 	movq	(%rax), %r13
    0000023b: 	movq	0x8(%rax), %r12
    0000023f: 	movq	%r13, %rax
    00000242: 	addq	%r12, %rax
    00000245: 	je	.Ltmp487 # Offset: 581
    00000247: 	testq	%r13, %r13
    0000024a: 	je	.Ltmp488 # Offset: 586
.Ltmp487:
    00000250: 	movq	%r12, 0x30(%rsp)
    00000255: 	cmpq	$0xf, %r12
    00000259: 	ja	.Ltmp489 # Offset: 601
    0000025f: 	cmpq	$0x1, %r12
    00000263: 	jne	.Ltmp490 # Offset: 611
    00000269: 	movzbl	(%r13), %eax
    0000026e: 	movb	%al, 0x10(%rbp)
.Ltmp496:
    00000271: 	movq	%r12, 0x8(%rbp)
    00000275: 	movb	$0x0, (%rdi,%r12)
    0000027a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000281: 	addq	$0x20, %rax
    00000285: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp498:
    0000028c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000293: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000029a: 	je	.Ltmp491 # Offset: 666
.Ltmp497:
    000002a0: 	movq	-0x20(%rax), %rbp
    000002a4: 	movslq	%ebx, %rbx
    000002a7: 	callq	clock@PLT # Offset: 679
    000002ac: 	pxor	%xmm0, %xmm0
    000002b0: 	movq	%rax, end_time(%rip)
    000002b7: 	movq	%rbp, %rdi
    000002ba: 	subq	start_time(%rip), %rax
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0xd498(%rip), %xmm0
    000002ce: 	callq	_Z13record_resultdPKc # Offset: 718
    000002d3: 	movq	0x8(%rsp), %rax
    000002d8: 	movq	0x20(%rsp), %r14
    000002dd: 	leaq	(%rax,%rbx,8), %rsi
    000002e1: 	movq	%r14, %rdx
    000002e4: 	movq	%rax, %rbx
    000002e7: 	movq	%rax, %rdi
    000002ea: 	callq	"_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1" # Offset: 746
    000002ef: 	movq	%rbx, %rax
    000002f2: 	movq	%r14, %rcx
    000002f5: 	addq	$0x8, %rax
    000002f9: 	jmp	.Ltmp492 # Offset: 761
.Ltmp494:
    000002fb: 	addq	$0x8, %rax
    000002ff: 	movsd	-0x10(%rax), %xmm0
    00000304: 	comisd	(%rdx), %xmm0
    00000308: 	ja	.Ltmp493 # Offset: 776
.Ltmp492:
    0000030a: 	movq	%rax, %rdx
    0000030d: 	cmpq	%rax, %rcx
    00000310: 	jne	.Ltmp494 # Offset: 784
    00000312: 	movq	0x38(%rsp), %rax
    00000317: 	subq	%fs:0x28, %rax
    00000320: 	jne	.Ltmp495 # Offset: 800
    00000326: 	addq	$0x48, %rsp
    0000032a: 	popq	%rbx
    0000032b: 	popq	%rbp
    0000032c: 	popq	%r12
    0000032e: 	popq	%r13
    00000330: 	popq	%r14
    00000332: 	popq	%r15
    00000334: 	retq # Offset: 820
.Ltmp489:
    00000335: 	movq	%rbp, %rdi
    00000338: 	leaq	0x30(%rsp), %rsi
    0000033d: 	xorl	%edx, %edx
    0000033f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 831
    00000344: 	movq	%rax, (%rbp)
    00000348: 	movq	%rax, %rdi
    0000034b: 	movq	0x30(%rsp), %rax
    00000350: 	movq	%rax, 0x10(%rbp)
.Ltmp499:
    00000354: 	movq	%r12, %rdx
    00000357: 	movq	%r13, %rsi
    0000035a: 	callq	memcpy@PLT # Offset: 858
    0000035f: 	movq	0x30(%rsp), %r12
    00000364: 	movq	(%rbp), %rdi
    00000368: 	jmp	.Ltmp496 # Offset: 872
.Ltmp491:
    0000036d: 	movq	-0x8(%rdx), %rax
    00000371: 	addq	$0x200, %rax
    00000377: 	jmp	.Ltmp497 # Offset: 887
.Ltmp493:
    0000037c: 	movq	0x38(%rsp), %rax
    00000381: 	subq	%fs:0x28, %rax
    0000038a: 	jne	.Ltmp495 # Offset: 906
    0000038c: 	movq	0x28(%rsp), %rax
    00000391: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000398: 	movl	$0x1, %edi
    0000039d: 	movq	(%rax), %rdx
    000003a0: 	addq	$0x48, %rsp
    000003a4: 	xorl	%eax, %eax
    000003a6: 	popq	%rbx
    000003a7: 	popq	%rbp
    000003a8: 	popq	%r12
    000003aa: 	popq	%r13
    000003ac: 	popq	%r14
    000003ae: 	popq	%r15
    000003b0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 944
.Ltmp486:
    000003b5: 	movq	0x28(%rsp), %rsi
    000003ba: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003c1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 961
    000003c6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003cd: 	jmp	.Ltmp498 # Offset: 973
.Ltmp490:
    000003d2: 	testq	%r12, %r12
    000003d5: 	je	.Ltmp496 # Offset: 981
    000003db: 	jmp	.Ltmp499 # Offset: 987
.Ltmp475:
    000003e0: 	xorl	%ebx, %ebx
    000003e2: 	jmp	.Ltmp500 # Offset: 994
.Ltmp488:
    000003e7: 	leaq	DATAat0xd158(%rip), %rdi
    000003ee: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1006
.Ltmp495:
    000003f3: 	callq	__stack_chk_fail@PLT # Offset: 1011
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/rotate_sequence.cpp/1
  Number      : 78
  State       : disassembled
  Address     : 0x6d30
  Size        : 0x418
  MaxSize     : 0x420
  Offset      : 0x6d30
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rsi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdi, %r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movl	%edx, 0x8(%rsp)
    0000001b: 	movq	%rcx, 0x20(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x38(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movl	iterations(%rip), %esi
    0000003b: 	movl	0x8(%rsp), %r9d
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	leal	-0x2(%rsi,%r9), %eax
    0000004c: 	movl	%esi, 0x14(%rsp)
    00000050: 	cltd
    00000051: 	idivl	%esi
    00000053: 	movl	$0x1, %edx
    00000058: 	testl	%eax, %eax
    0000005a: 	cmovgl	%eax, %edx
    0000005d: 	movl	%edx, 0x18(%rsp)
    00000061: 	testl	%esi, %esi
    00000063: 	jle	.Ltmp501 # Offset: 99
    00000069: 	movl	%edx, %eax
    0000006b: 	movq	%r12, %rsi
    0000006e: 	xorl	%r13d, %r13d
    00000071: 	xorl	%ebx, %ebx
    00000073: 	subl	$0x1, %eax
    00000076: 	movq	%r12, 0x28(%rsp)
    0000007b: 	movl	%r13d, %r15d
    0000007e: 	xorl	%ebp, %ebp
    00000080: 	movq	%r14, 0x8(%rsp)
    00000085: 	movq	%r12, %r13
    00000088: 	movl	%r9d, %r14d
    0000008b: 	movl	%ebx, %r12d
    0000008e: 	movl	%eax, 0x1c(%rsp)
    00000092: 	movq	%rsi, %rbx
    00000095: 	jmp	.Ltmp502 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp505:
    000000a0: 	subl	%ebp, %r12d
    000000a3: 	addl	0x18(%rsp), %ebp
.Ltmp508:
    000000a7: 	movq	0x8(%rsp), %rdx
    000000ac: 	xorl	%r8d, %r8d
    000000af: 	xorl	%ecx, %ecx
    000000b1: 	movq	%r13, %rsi
    000000b4: 	movq	%rbx, %rdi
    000000b7: 	callq	_Z26gries_mills_rotate_countedISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm # Offset: 183
    000000bc: 	testl	%r12d, %r12d
    000000bf: 	leal	(%r12,%r14), %edx
    000000c3: 	cmovsl	%edx, %r12d
    000000c7: 	movl	%r12d, %edx
    000000ca: 	subl	%r14d, %edx
    000000cd: 	cmpl	%r12d, %r14d
    000000d0: 	cmovlel	%edx, %r12d
    000000d4: 	cmpl	%ebp, %r14d
    000000d7: 	jg	.Ltmp503 # Offset: 215
    000000d9: 	addl	$0x1, %r15d
    000000dd: 	cmpl	%r15d, 0x14(%rsp)
    000000e2: 	je	.Ltmp504 # Offset: 226
.Ltmp502:
    000000e4: 	cmpl	%ebp, %r14d
    000000e7: 	jg	.Ltmp505 # Offset: 231
    000000e9: 	movl	%ebp, %r10d
    000000ec: 	subl	%r14d, %r10d
    000000ef: 	leal	-0x1(%r10), %edx
    000000f3: 	movslq	%edx, %rdx
    000000f6: 	je	.Ltmp506 # Offset: 246
    000000fc: 	movq	%rbx, %r13
    000000ff: 	nop # Size: 1
.Ltmp507:
    00000100: 	movq	(%r13), %r13
    00000104: 	subq	$0x1, %rdx
    00000108: 	jae	.Ltmp507 # Offset: 264
    0000010a: 	movl	0x18(%rsp), %eax
    0000010e: 	subl	%r10d, %r12d
    00000111: 	leal	(%rax,%r10), %ebp
    00000115: 	jmp	.Ltmp508 # Offset: 277
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp503:
    00000120: 	movslq	0x1c(%rsp), %rdx
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp509:
    00000128: 	movq	(%r13), %r13
    0000012c: 	subq	$0x1, %rdx
    00000130: 	jae	.Ltmp509 # Offset: 304
    00000132: 	addl	$0x1, %r15d
    00000136: 	cmpl	%r15d, 0x14(%rsp)
    0000013b: 	jne	.Ltmp502 # Offset: 315
.Ltmp504:
    0000013d: 	movq	%rbx, %rax
    00000140: 	movq	0x28(%rsp), %r15
    00000145: 	movq	0x8(%rsp), %r14
    0000014a: 	movslq	%r12d, %rbx
    0000014d: 	movq	%rax, %r12
.Ltmp531:
    00000150: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000157: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000015e: 	subq	$0x20, %rax
    00000162: 	cmpq	%rax, %rbp
    00000165: 	je	.Ltmp510 # Offset: 357
    0000016b: 	movq	0x20(%rsp), %rax
    00000170: 	leaq	0x10(%rbp), %rdi
    00000174: 	movq	%rdi, (%rbp)
    00000178: 	movq	(%rax), %r8
    0000017b: 	movq	0x8(%rax), %r13
    0000017f: 	movq	%r8, %rax
    00000182: 	addq	%r13, %rax
    00000185: 	je	.Ltmp511 # Offset: 389
    00000187: 	testq	%r8, %r8
    0000018a: 	je	.Ltmp512 # Offset: 394
.Ltmp511:
    00000190: 	movq	%r13, 0x30(%rsp)
    00000195: 	cmpq	$0xf, %r13
    00000199: 	ja	.Ltmp513 # Offset: 409
    0000019f: 	cmpq	$0x1, %r13
    000001a3: 	jne	.Ltmp514 # Offset: 419
    000001a9: 	movzbl	(%r8), %eax
    000001ad: 	movb	%al, 0x10(%rbp)
.Ltmp522:
    000001b0: 	movq	%r13, 0x8(%rbp)
    000001b4: 	movb	$0x0, (%rdi,%r13)
    000001b9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001c0: 	addq	$0x20, %rax
    000001c4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp529:
    000001cb: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001d2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001d9: 	je	.Ltmp515 # Offset: 473
.Ltmp528:
    000001df: 	movq	-0x20(%rax), %rbp
    000001e3: 	callq	clock@PLT # Offset: 483
    000001e8: 	pxor	%xmm0, %xmm0
    000001ec: 	movq	%rax, end_time(%rip)
    000001f3: 	movq	%rbp, %rdi
    000001f6: 	subq	start_time(%rip), %rax
    000001fd: 	cvtsi2sd	%rax, %xmm0
    00000202: 	divsd	DATAat0xd498(%rip), %xmm0
    0000020a: 	callq	_Z13record_resultdPKc # Offset: 522
    0000020f: 	leaq	-0x1(%rbx), %rax
    00000213: 	testq	%rbx, %rbx
    00000216: 	je	.Ltmp516 # Offset: 534
    0000021c: 	movq	%r12, %rdx
    0000021f: 	nop # Size: 1
.Ltmp517:
    00000220: 	movq	(%rdx), %rdx
    00000223: 	subq	$0x1, %rax
    00000227: 	jae	.Ltmp517 # Offset: 551
    00000229: 	cmpq	%r14, %rdx
    0000022c: 	je	.Ltmp516 # Offset: 556
    00000232: 	cmpq	%r12, %rdx
    00000235: 	je	.Ltmp516 # Offset: 565
    0000023b: 	movq	%rdx, %rcx
    0000023e: 	movq	%r12, %rax
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp519:
    00000248: 	movsd	0x8(%rdx), %xmm1
    0000024d: 	movsd	0x8(%rax), %xmm0
    00000252: 	movsd	%xmm1, 0x8(%rax)
    00000257: 	movq	(%rax), %rax
    0000025a: 	movsd	%xmm0, 0x8(%rdx)
    0000025f: 	movq	(%rdx), %rdx
    00000262: 	cmpq	%rcx, %rax
    00000265: 	je	.Ltmp518 # Offset: 613
    0000026b: 	cmpq	%r14, %rdx
    0000026e: 	jne	.Ltmp519 # Offset: 622
    00000270: 	cmpq	%rcx, %r14
    00000273: 	je	.Ltmp516 # Offset: 627
    00000279: 	movq	%rcx, %rdx
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp521:
    00000280: 	movsd	0x8(%rcx), %xmm1
    00000285: 	movsd	0x8(%rax), %xmm0
    0000028a: 	movsd	%xmm1, 0x8(%rax)
    0000028f: 	movq	(%rax), %rax
    00000292: 	movsd	%xmm0, 0x8(%rcx)
    00000297: 	movq	(%rcx), %rcx
    0000029a: 	cmpq	%rdx, %rax
    0000029d: 	je	.Ltmp520 # Offset: 669
    0000029f: 	cmpq	%r14, %rcx
    000002a2: 	jne	.Ltmp521 # Offset: 674
    000002a4: 	cmpq	%r14, %rdx
    000002a7: 	je	.Ltmp516 # Offset: 679
.Ltmp523:
    000002a9: 	movq	%rdx, %rcx
    000002ac: 	jmp	.Ltmp521 # Offset: 684
    000002ae: 	nop # Size: 2
.Ltmp513:
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	leaq	0x30(%rsp), %rsi
    000002b8: 	xorl	%edx, %edx
    000002ba: 	movq	%r8, 0x8(%rsp)
    000002bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 703
    000002c4: 	movq	0x8(%rsp), %r8
    000002c9: 	movq	%rax, (%rbp)
    000002cd: 	movq	%rax, %rdi
    000002d0: 	movq	0x30(%rsp), %rax
    000002d5: 	movq	%rax, 0x10(%rbp)
.Ltmp530:
    000002d9: 	movq	%r13, %rdx
    000002dc: 	movq	%r8, %rsi
    000002df: 	callq	memcpy@PLT # Offset: 735
    000002e4: 	movq	0x30(%rsp), %r13
    000002e9: 	movq	(%rbp), %rdi
    000002ed: 	jmp	.Ltmp522 # Offset: 749
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp518:
    000002f8: 	cmpq	%r14, %rdx
    000002fb: 	je	.Ltmp516 # Offset: 763
    000002fd: 	movq	%rdx, %rcx
    00000300: 	jmp	.Ltmp519 # Offset: 768
    00000305: 	nopl	(%rax) # Size: 3
.Ltmp520:
    00000308: 	movq	%rcx, %rdx
    0000030b: 	cmpq	%r14, %rdx
    0000030e: 	jne	.Ltmp523 # Offset: 782
.Ltmp516:
    00000310: 	movq	(%r12), %rax
    00000314: 	jmp	.Ltmp524 # Offset: 788
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp526:
    00000320: 	movsd	0x8(%r15), %xmm0
    00000326: 	comisd	0x8(%rax), %xmm0
    0000032b: 	movq	(%rax), %rdx
    0000032e: 	movq	(%r15), %rcx
    00000331: 	ja	.Ltmp525 # Offset: 817
    00000333: 	movq	%rcx, %r15
    00000336: 	movq	%rdx, %rax
.Ltmp524:
    00000339: 	cmpq	%r14, %rax
    0000033c: 	jne	.Ltmp526 # Offset: 828
    0000033e: 	movq	0x38(%rsp), %rax
    00000343: 	subq	%fs:0x28, %rax
    0000034c: 	jne	.Ltmp527 # Offset: 844
    00000352: 	addq	$0x48, %rsp
    00000356: 	popq	%rbx
    00000357: 	popq	%rbp
    00000358: 	popq	%r12
    0000035a: 	popq	%r13
    0000035c: 	popq	%r14
    0000035e: 	popq	%r15
    00000360: 	retq # Offset: 864
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp525:
    00000368: 	movq	0x38(%rsp), %rax
    0000036d: 	subq	%fs:0x28, %rax
    00000376: 	jne	.Ltmp527 # Offset: 886
    0000037c: 	movq	0x20(%rsp), %rax
    00000381: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000388: 	movl	$0x1, %edi
    0000038d: 	movq	(%rax), %rdx
    00000390: 	addq	$0x48, %rsp
    00000394: 	xorl	%eax, %eax
    00000396: 	popq	%rbx
    00000397: 	popq	%rbp
    00000398: 	popq	%r12
    0000039a: 	popq	%r13
    0000039c: 	popq	%r14
    0000039e: 	popq	%r15
    000003a0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 928
    000003a5: 	nopl	(%rax) # Size: 3
.Ltmp515:
    000003a8: 	movq	-0x8(%rdx), %rax
    000003ac: 	addq	$0x200, %rax
    000003b2: 	jmp	.Ltmp528 # Offset: 946
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp510:
    000003c0: 	movq	0x20(%rsp), %rsi
    000003c5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 972
    000003d1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d8: 	jmp	.Ltmp529 # Offset: 984
    000003dd: 	nopl	(%rax) # Size: 3
.Ltmp506:
    000003e0: 	movl	0x18(%rsp), %ebp
    000003e4: 	movq	%rbx, %r13
    000003e7: 	jmp	.Ltmp508 # Offset: 999
    000003ec: 	nopl	(%rax) # Size: 4
.Ltmp514:
    000003f0: 	testq	%r13, %r13
    000003f3: 	je	.Ltmp522 # Offset: 1011
    000003f9: 	jmp	.Ltmp530 # Offset: 1017
    000003fe: 	nop # Size: 2
.Ltmp501:
    00000400: 	xorl	%ebx, %ebx
    00000402: 	jmp	.Ltmp531 # Offset: 1026
.Ltmp527:
    00000407: 	callq	__stack_chk_fail@PLT # Offset: 1031
.Ltmp512:
    0000040c: 	leaq	DATAat0xd158(%rip), %rdi
    00000413: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1043
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x7150
  Size        : 0x408
  MaxSize     : 0x410
  Offset      : 0x7150
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x48, %rsp
    0000001b: 	movl	%edx, 0x8(%rsp)
    0000001f: 	movq	%rcx, 0x18(%rsp)
    00000024: 	movq	%r8, 0x28(%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x38(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movl	iterations(%rip), %esi
    00000044: 	movl	0x8(%rsp), %r10d
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rax, start_time(%rip)
    00000055: 	leal	-0x2(%rsi,%r10), %eax
    0000005a: 	cltd
    0000005b: 	idivl	%esi
    0000005d: 	testl	%eax, %eax
    0000005f: 	cmovgl	%eax, %ecx
    00000062: 	movl	%ecx, 0x20(%rsp)
    00000066: 	testl	%esi, %esi
    00000068: 	jle	.Ltmp532 # Offset: 104
    0000006e: 	leal	-0x1(%rcx), %edi
    00000071: 	movq	%rbp, %rax
    00000074: 	xorl	%ebx, %ebx
    00000076: 	xorl	%r12d, %r12d
    00000079: 	movl	%edi, 0x24(%rsp)
    0000007d: 	xorl	%r13d, %r13d
    00000080: 	jmp	.Ltmp533 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp536:
    00000088: 	subl	%r12d, %ebx
    0000008b: 	addl	0x20(%rsp), %r12d
.Ltmp539:
    00000090: 	movl	%r10d, 0x14(%rsp)
    00000095: 	movq	%r15, %rdx
    00000098: 	movq	%rax, %rsi
    0000009b: 	movq	%rbp, %rdi
    0000009e: 	movq	%rax, 0x8(%rsp)
    000000a3: 	movq	0x18(%rsp), %rax
    000000a8: 	callq	*%rax # Offset: 168
    000000aa: 	movl	0x14(%rsp), %r10d
    000000af: 	testl	%ebx, %ebx
    000000b1: 	movq	0x8(%rsp), %rax
    000000b6: 	leal	(%rbx,%r10), %edx
    000000ba: 	cmovsl	%edx, %ebx
    000000bd: 	movl	%ebx, %edx
    000000bf: 	subl	%r10d, %edx
    000000c2: 	cmpl	%r10d, %ebx
    000000c5: 	cmovgel	%edx, %ebx
    000000c8: 	cmpl	%r12d, %r10d
    000000cb: 	jg	.Ltmp534 # Offset: 203
    000000cd: 	addl	$0x1, %r13d
    000000d1: 	cmpl	%r13d, iterations(%rip)
    000000d8: 	jle	.Ltmp535 # Offset: 216
.Ltmp533:
    000000da: 	cmpl	%r12d, %r10d
    000000dd: 	jg	.Ltmp536 # Offset: 221
    000000df: 	movl	%r12d, %r11d
    000000e2: 	subl	%r10d, %r11d
    000000e5: 	leal	-0x1(%r11), %edx
    000000e9: 	movslq	%edx, %rdx
    000000ec: 	je	.Ltmp537 # Offset: 236
    000000f2: 	movq	%rbp, %rax
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp538:
    000000f8: 	movq	(%rax), %rax
    000000fb: 	subq	$0x1, %rdx
    000000ff: 	jae	.Ltmp538 # Offset: 255
    00000101: 	movl	0x20(%rsp), %ecx
    00000105: 	subl	%r11d, %ebx
    00000108: 	leal	(%r11,%rcx), %r12d
    0000010c: 	jmp	.Ltmp539 # Offset: 268
    0000010e: 	nop # Size: 2
.Ltmp534:
    00000110: 	movslq	0x24(%rsp), %rdx
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp540:
    00000118: 	movq	(%rax), %rax
    0000011b: 	subq	$0x1, %rdx
    0000011f: 	jae	.Ltmp540 # Offset: 287
    00000121: 	addl	$0x1, %r13d
    00000125: 	cmpl	%r13d, iterations(%rip)
    0000012c: 	jg	.Ltmp533 # Offset: 300
.Ltmp535:
    0000012e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000135: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000013c: 	subq	$0x20, %rax
    00000140: 	cmpq	%rax, %r13
    00000143: 	je	.Ltmp541 # Offset: 323
    00000149: 	movq	0x28(%rsp), %rax
    0000014e: 	leaq	0x10(%r13), %rdi
    00000152: 	movq	%rdi, (%r13)
    00000156: 	movq	(%rax), %r8
    00000159: 	movq	0x8(%rax), %r12
    0000015d: 	movq	%r8, %rax
    00000160: 	addq	%r12, %rax
    00000163: 	je	.Ltmp542 # Offset: 355
    00000165: 	testq	%r8, %r8
    00000168: 	je	.Ltmp543 # Offset: 360
.Ltmp542:
    0000016e: 	movq	%r12, 0x30(%rsp)
    00000173: 	cmpq	$0xf, %r12
    00000177: 	ja	.Ltmp544 # Offset: 375
    0000017d: 	cmpq	$0x1, %r12
    00000181: 	jne	.Ltmp545 # Offset: 385
    00000187: 	movzbl	(%r8), %eax
    0000018b: 	movb	%al, 0x10(%r13)
.Ltmp553:
    0000018f: 	movq	%r12, 0x8(%r13)
    00000193: 	movb	$0x0, (%rdi,%r12)
    00000198: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000019f: 	addq	$0x20, %rax
    000001a3: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp560:
    000001aa: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001b1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001b8: 	je	.Ltmp546 # Offset: 440
.Ltmp559:
    000001be: 	movq	-0x20(%rax), %r12
    000001c2: 	movslq	%ebx, %rbx
    000001c5: 	callq	clock@PLT # Offset: 453
    000001ca: 	pxor	%xmm0, %xmm0
    000001ce: 	movq	%rax, end_time(%rip)
    000001d5: 	movq	%r12, %rdi
    000001d8: 	subq	start_time(%rip), %rax
    000001df: 	cvtsi2sd	%rax, %xmm0
    000001e4: 	divsd	DATAat0xd498(%rip), %xmm0
    000001ec: 	callq	_Z13record_resultdPKc # Offset: 492
    000001f1: 	leaq	-0x1(%rbx), %rax
    000001f5: 	testq	%rbx, %rbx
    000001f8: 	je	.Ltmp547 # Offset: 504
    000001fe: 	movq	%rbp, %rdx
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp548:
    00000208: 	movq	(%rdx), %rdx
    0000020b: 	subq	$0x1, %rax
    0000020f: 	jae	.Ltmp548 # Offset: 527
    00000211: 	cmpq	%r15, %rdx
    00000214: 	je	.Ltmp547 # Offset: 532
    0000021a: 	cmpq	%rbp, %rdx
    0000021d: 	je	.Ltmp547 # Offset: 541
    00000223: 	movq	%rdx, %rsi
    00000226: 	movq	%rbp, %rax
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp550:
    00000230: 	movsd	0x8(%rdx), %xmm1
    00000235: 	movsd	0x8(%rax), %xmm0
    0000023a: 	movsd	%xmm1, 0x8(%rax)
    0000023f: 	movq	(%rax), %rax
    00000242: 	movsd	%xmm0, 0x8(%rdx)
    00000247: 	movq	(%rdx), %rdx
    0000024a: 	cmpq	%rsi, %rax
    0000024d: 	je	.Ltmp549 # Offset: 589
    00000253: 	cmpq	%r15, %rdx
    00000256: 	jne	.Ltmp550 # Offset: 598
    00000258: 	cmpq	%rsi, %r15
    0000025b: 	je	.Ltmp547 # Offset: 603
    00000261: 	movq	%rsi, %rdx
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp552:
    00000268: 	movsd	0x8(%rsi), %xmm1
    0000026d: 	movsd	0x8(%rax), %xmm0
    00000272: 	movsd	%xmm1, 0x8(%rax)
    00000277: 	movq	(%rax), %rax
    0000027a: 	movsd	%xmm0, 0x8(%rsi)
    0000027f: 	movq	(%rsi), %rsi
    00000282: 	cmpq	%rdx, %rax
    00000285: 	je	.Ltmp551 # Offset: 645
    00000287: 	cmpq	%r15, %rsi
    0000028a: 	jne	.Ltmp552 # Offset: 650
    0000028c: 	cmpq	%r15, %rdx
    0000028f: 	je	.Ltmp547 # Offset: 655
.Ltmp554:
    00000291: 	movq	%rdx, %rsi
    00000294: 	jmp	.Ltmp552 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp544:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	leaq	0x30(%rsp), %rsi
    000002a8: 	xorl	%edx, %edx
    000002aa: 	movq	%r8, 0x8(%rsp)
    000002af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 687
    000002b4: 	movq	0x8(%rsp), %r8
    000002b9: 	movq	%rax, (%r13)
    000002bd: 	movq	%rax, %rdi
    000002c0: 	movq	0x30(%rsp), %rax
    000002c5: 	movq	%rax, 0x10(%r13)
.Ltmp561:
    000002c9: 	movq	%r12, %rdx
    000002cc: 	movq	%r8, %rsi
    000002cf: 	callq	memcpy@PLT # Offset: 719
    000002d4: 	movq	0x30(%rsp), %r12
    000002d9: 	movq	(%r13), %rdi
    000002dd: 	jmp	.Ltmp553 # Offset: 733
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp549:
    000002e8: 	cmpq	%r15, %rdx
    000002eb: 	je	.Ltmp547 # Offset: 747
    000002ed: 	movq	%rdx, %rsi
    000002f0: 	jmp	.Ltmp550 # Offset: 752
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp551:
    000002f8: 	movq	%rsi, %rdx
    000002fb: 	cmpq	%r15, %rdx
    000002fe: 	jne	.Ltmp554 # Offset: 766
.Ltmp547:
    00000300: 	movq	(%rbp), %rax
    00000304: 	jmp	.Ltmp555 # Offset: 772
    00000306: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp557:
    00000310: 	movsd	0x8(%r14), %xmm0
    00000316: 	comisd	0x8(%rax), %xmm0
    0000031b: 	movq	(%rax), %rdx
    0000031e: 	movq	(%r14), %rsi
    00000321: 	ja	.Ltmp556 # Offset: 801
    00000323: 	movq	%rsi, %r14
    00000326: 	movq	%rdx, %rax
.Ltmp555:
    00000329: 	cmpq	%r15, %rax
    0000032c: 	jne	.Ltmp557 # Offset: 812
    0000032e: 	movq	0x38(%rsp), %rax
    00000333: 	subq	%fs:0x28, %rax
    0000033c: 	jne	.Ltmp558 # Offset: 828
    00000342: 	addq	$0x48, %rsp
    00000346: 	popq	%rbx
    00000347: 	popq	%rbp
    00000348: 	popq	%r12
    0000034a: 	popq	%r13
    0000034c: 	popq	%r14
    0000034e: 	popq	%r15
    00000350: 	retq # Offset: 848
    00000351: 	nopl	(%rax) # Size: 7
.Ltmp556:
    00000358: 	movq	0x38(%rsp), %rax
    0000035d: 	subq	%fs:0x28, %rax
    00000366: 	jne	.Ltmp558 # Offset: 870
    0000036c: 	movq	0x28(%rsp), %rax
    00000371: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000378: 	movl	$0x1, %edi
    0000037d: 	movq	(%rax), %rdx
    00000380: 	addq	$0x48, %rsp
    00000384: 	xorl	%eax, %eax
    00000386: 	popq	%rbx
    00000387: 	popq	%rbp
    00000388: 	popq	%r12
    0000038a: 	popq	%r13
    0000038c: 	popq	%r14
    0000038e: 	popq	%r15
    00000390: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 912
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp546:
    00000398: 	movq	-0x8(%rdx), %rax
    0000039c: 	addq	$0x200, %rax
    000003a2: 	jmp	.Ltmp559 # Offset: 930
    000003a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp541:
    000003b0: 	movq	0x28(%rsp), %rsi
    000003b5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 956
    000003c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003c8: 	jmp	.Ltmp560 # Offset: 968
    000003cd: 	nopl	(%rax) # Size: 3
.Ltmp537:
    000003d0: 	movl	0x20(%rsp), %r12d
    000003d5: 	movq	%rbp, %rax
    000003d8: 	jmp	.Ltmp539 # Offset: 984
    000003dd: 	nopl	(%rax) # Size: 3
.Ltmp545:
    000003e0: 	testq	%r12, %r12
    000003e3: 	je	.Ltmp553 # Offset: 995
    000003e9: 	jmp	.Ltmp561 # Offset: 1001
    000003ee: 	nop # Size: 2
.Ltmp532:
    000003f0: 	xorl	%ebx, %ebx
    000003f2: 	jmp	.Ltmp535 # Offset: 1010
.Ltmp558:
    000003f7: 	callq	__stack_chk_fail@PLT # Offset: 1015
.Ltmp543:
    000003fc: 	leaq	DATAat0xd158(%rip), %rdi
    00000403: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1027
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_rotate_sizesISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x7560
  Size        : 0x2a8
  MaxSize     : 0x2b0
  Offset      : 0x7560
  Section     : .text
  Orc Section : .local.text._Z17test_rotate_sizesISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0xd1f8(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0xd228(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp562 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp569:
    00000098: 	movl	0x38(%rsp), %eax
    0000009c: 	movq	%r14, %r9
    0000009f: 	cltd
    000000a0: 	idivl	%ebx
    000000a2: 	movl	$0x8, %edx
    000000a7: 	cltq
    000000a9: 	imulq	0x10(%rsp), %rax
    000000af: 	cmpq	%rdx, %rax
    000000b2: 	cmovlq	%rdx, %rax
    000000b6: 	movl	$0x70000000, %edx
    000000bb: 	cmpq	%rdx, %rax
    000000be: 	cmovgq	%rdx, %rax
    000000c2: 	addq	$0x1, %rax
    000000c6: 	andq	$-0x2, %rax
    000000ca: 	movl	%eax, iterations(%rip)
    000000d0: 	leal	-0x1(%rbx), %eax
    000000d3: 	cltq
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp563:
    000000d8: 	movq	(%r9), %r9
    000000db: 	subq	$0x1, %rax
    000000df: 	jae	.Ltmp563 # Offset: 223
    000000e1: 	movq	(%rbp), %r10
    000000e5: 	movq	0x8(%rbp), %r8
    000000e9: 	movq	%r13, 0x50(%rsp)
    000000ee: 	movq	%r10, %rax
    000000f1: 	addq	%r8, %rax
    000000f4: 	je	.Ltmp564 # Offset: 244
    000000f6: 	testq	%r10, %r10
    000000f9: 	je	.Ltmp565 # Offset: 249
.Ltmp564:
    000000ff: 	movq	%r8, 0x48(%rsp)
    00000104: 	cmpq	$0xf, %r8
    00000108: 	ja	.Ltmp566 # Offset: 264
    0000010e: 	cmpq	$0x1, %r8
    00000112: 	jne	.Ltmp567 # Offset: 274
    00000118: 	movzbl	(%r10), %eax
    0000011c: 	movb	%al, 0x60(%rsp)
    00000120: 	movq	%r13, %rax
.Ltmp572:
    00000123: 	movq	%r8, 0x58(%rsp)
    00000128: 	movq	0x8(%rsp), %rcx
    0000012d: 	movl	%ebx, %edx
    0000012f: 	movq	%r9, %rsi
    00000132: 	movb	$0x0, (%rax,%r8)
    00000137: 	movq	%r14, %rdi
    0000013a: 	movq	%r15, %r8
    0000013d: 	callq	_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 317
    00000142: 	movq	0x50(%rsp), %rdi
    00000147: 	cmpq	%r13, %rdi
    0000014a: 	je	.Ltmp568 # Offset: 330
    0000014c: 	movq	0x60(%rsp), %rax
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	callq	_ZdlPvm@PLT # Offset: 341
.Ltmp568:
    0000015a: 	pxor	%xmm1, %xmm1
    0000015e: 	pxor	%xmm2, %xmm2
    00000162: 	movq	(%rbp), %rcx
    00000166: 	movl	%ebx, %r8d
    00000169: 	cvtsi2sd	%ebx, %xmm2
    0000016d: 	movq	results(%rip), %rax
    00000174: 	movl	%r12d, %edx
    00000177: 	addl	%ebx, %ebx
    00000179: 	leaq	DATAat0xd258(%rip), %rsi
    00000180: 	movl	$0x1, %edi
    00000185: 	addl	$0x1, %r12d
    00000189: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000191: 	movsd	(%rax), %xmm0
    00000195: 	movl	$0x2, %eax
    0000019a: 	mulsd	%xmm2, %xmm1
    0000019e: 	divsd	DATAat0xd498(%rip), %xmm1
    000001a6: 	divsd	%xmm0, %xmm1
    000001aa: 	callq	__printf_chk@PLT # Offset: 426
    000001af: 	movl	$0x0, current_test(%rip)
    000001b9: 	cmpl	%ebx, 0x38(%rsp)
    000001bd: 	jge	.Ltmp569 # Offset: 445
.Ltmp562:
    000001c3: 	movl	0x3c(%rsp), %eax
    000001c7: 	movl	%eax, iterations(%rip)
    000001cd: 	movq	0x78(%rsp), %rax
    000001d2: 	subq	%fs:0x28, %rax
    000001db: 	jne	.Ltmp570 # Offset: 475
    000001e1: 	addq	$0x88, %rsp
    000001e8: 	popq	%rbx
    000001e9: 	popq	%rbp
    000001ea: 	popq	%r12
    000001ec: 	popq	%r13
    000001ee: 	popq	%r14
    000001f0: 	popq	%r15
    000001f2: 	retq # Offset: 498
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp567:
    000001f8: 	testq	%r8, %r8
    000001fb: 	jne	.Ltmp571 # Offset: 507
    000001fd: 	movq	%r13, %rax
    00000200: 	jmp	.Ltmp572 # Offset: 512
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp566:
    00000208: 	movq	0x30(%rsp), %rsi
    0000020d: 	movq	%r15, %rdi
    00000210: 	xorl	%edx, %edx
    00000212: 	movq	%r9, 0x28(%rsp)
    00000217: 	movq	%r8, 0x20(%rsp)
    0000021c: 	movq	%r10, 0x18(%rsp)
    00000221: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 545
    00000226: 	movq	0x18(%rsp), %r10
    0000022b: 	movq	0x20(%rsp), %r8
    00000230: 	movq	%rax, 0x50(%rsp)
    00000235: 	movq	%rax, %rdi
    00000238: 	movq	0x48(%rsp), %rax
    0000023d: 	movq	0x28(%rsp), %r9
    00000242: 	movq	%rax, 0x60(%rsp)
.Ltmp573:
    00000247: 	movq	%r8, %rdx
    0000024a: 	movq	%r10, %rsi
    0000024d: 	movq	%r9, 0x18(%rsp)
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	0x48(%rsp), %r8
    0000025c: 	movq	0x50(%rsp), %rax
    00000261: 	movq	0x18(%rsp), %r9
    00000266: 	jmp	.Ltmp572 # Offset: 614
.Ltmp565:
    0000026b: 	leaq	DATAat0xd158(%rip), %rdi
    00000272: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 626
.Ltmp571:
    00000277: 	movq	%r13, %rdi
    0000027a: 	jmp	.Ltmp573 # Offset: 634
.Ltmp570:
    0000027c: 	callq	__stack_chk_fail@PLT # Offset: 636
    00000281: 	endbr64
    00000285: 	movq	%rax, %rbp
    00000288: 	movq	0x50(%rsp), %rdi
    0000028d: 	cmpq	%r13, %rdi
    00000290: 	je	.Ltmp574 # Offset: 656
    00000292: 	movq	0x60(%rsp), %rax
    00000297: 	leaq	0x1(%rax), %rsi
    0000029b: 	callq	_ZdlPvm@PLT # Offset: 667
.Ltmp574:
    000002a0: 	movq	%rbp, %rdi
    000002a3: 	callq	_Unwind_Resume@PLT # Offset: 675
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_rotate_sizesISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/rotate_sequence.cpp/1
  Number      : 81
  State       : disassembled
  Address     : 0x7810
  Size        : 0x418
  MaxSize     : 0x420
  Offset      : 0x7810
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rsi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdi, %r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movl	%edx, 0x8(%rsp)
    0000001b: 	movq	%rcx, 0x20(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x38(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movl	iterations(%rip), %esi
    0000003b: 	movl	0x8(%rsp), %r9d
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	leal	-0x2(%rsi,%r9), %eax
    0000004c: 	movl	%esi, 0x14(%rsp)
    00000050: 	cltd
    00000051: 	idivl	%esi
    00000053: 	movl	$0x1, %edx
    00000058: 	testl	%eax, %eax
    0000005a: 	cmovgl	%eax, %edx
    0000005d: 	movl	%edx, 0x18(%rsp)
    00000061: 	testl	%esi, %esi
    00000063: 	jle	.Ltmp575 # Offset: 99
    00000069: 	movl	%edx, %eax
    0000006b: 	movq	%r12, %rsi
    0000006e: 	xorl	%r13d, %r13d
    00000071: 	xorl	%ebx, %ebx
    00000073: 	subl	$0x1, %eax
    00000076: 	movq	%r12, 0x28(%rsp)
    0000007b: 	movl	%r13d, %r15d
    0000007e: 	xorl	%ebp, %ebp
    00000080: 	movq	%r14, 0x8(%rsp)
    00000085: 	movq	%r12, %r13
    00000088: 	movl	%r9d, %r14d
    0000008b: 	movl	%ebx, %r12d
    0000008e: 	movl	%eax, 0x1c(%rsp)
    00000092: 	movq	%rsi, %rbx
    00000095: 	jmp	.Ltmp576 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp579:
    000000a0: 	subl	%ebp, %r12d
    000000a3: 	addl	0x18(%rsp), %ebp
.Ltmp582:
    000000a7: 	movq	0x8(%rsp), %rdx
    000000ac: 	xorl	%r8d, %r8d
    000000af: 	xorl	%ecx, %ecx
    000000b1: 	movq	%r13, %rsi
    000000b4: 	movq	%rbx, %rdi
    000000b7: 	callq	_Z28gries_mills_rotate_iterativeISt18_Fwd_list_iteratorIdEEvT_S2_S2_mm # Offset: 183
    000000bc: 	testl	%r12d, %r12d
    000000bf: 	leal	(%r12,%r14), %edx
    000000c3: 	cmovsl	%edx, %r12d
    000000c7: 	movl	%r12d, %edx
    000000ca: 	subl	%r14d, %edx
    000000cd: 	cmpl	%r12d, %r14d
    000000d0: 	cmovlel	%edx, %r12d
    000000d4: 	cmpl	%ebp, %r14d
    000000d7: 	jg	.Ltmp577 # Offset: 215
    000000d9: 	addl	$0x1, %r15d
    000000dd: 	cmpl	%r15d, 0x14(%rsp)
    000000e2: 	je	.Ltmp578 # Offset: 226
.Ltmp576:
    000000e4: 	cmpl	%ebp, %r14d
    000000e7: 	jg	.Ltmp579 # Offset: 231
    000000e9: 	movl	%ebp, %r10d
    000000ec: 	subl	%r14d, %r10d
    000000ef: 	leal	-0x1(%r10), %edx
    000000f3: 	movslq	%edx, %rdx
    000000f6: 	je	.Ltmp580 # Offset: 246
    000000fc: 	movq	%rbx, %r13
    000000ff: 	nop # Size: 1
.Ltmp581:
    00000100: 	movq	(%r13), %r13
    00000104: 	subq	$0x1, %rdx
    00000108: 	jae	.Ltmp581 # Offset: 264
    0000010a: 	movl	0x18(%rsp), %eax
    0000010e: 	subl	%r10d, %r12d
    00000111: 	leal	(%rax,%r10), %ebp
    00000115: 	jmp	.Ltmp582 # Offset: 277
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp577:
    00000120: 	movslq	0x1c(%rsp), %rdx
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp583:
    00000128: 	movq	(%r13), %r13
    0000012c: 	subq	$0x1, %rdx
    00000130: 	jae	.Ltmp583 # Offset: 304
    00000132: 	addl	$0x1, %r15d
    00000136: 	cmpl	%r15d, 0x14(%rsp)
    0000013b: 	jne	.Ltmp576 # Offset: 315
.Ltmp578:
    0000013d: 	movq	%rbx, %rax
    00000140: 	movq	0x28(%rsp), %r15
    00000145: 	movq	0x8(%rsp), %r14
    0000014a: 	movslq	%r12d, %rbx
    0000014d: 	movq	%rax, %r12
.Ltmp605:
    00000150: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000157: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000015e: 	subq	$0x20, %rax
    00000162: 	cmpq	%rax, %rbp
    00000165: 	je	.Ltmp584 # Offset: 357
    0000016b: 	movq	0x20(%rsp), %rax
    00000170: 	leaq	0x10(%rbp), %rdi
    00000174: 	movq	%rdi, (%rbp)
    00000178: 	movq	(%rax), %r8
    0000017b: 	movq	0x8(%rax), %r13
    0000017f: 	movq	%r8, %rax
    00000182: 	addq	%r13, %rax
    00000185: 	je	.Ltmp585 # Offset: 389
    00000187: 	testq	%r8, %r8
    0000018a: 	je	.Ltmp586 # Offset: 394
.Ltmp585:
    00000190: 	movq	%r13, 0x30(%rsp)
    00000195: 	cmpq	$0xf, %r13
    00000199: 	ja	.Ltmp587 # Offset: 409
    0000019f: 	cmpq	$0x1, %r13
    000001a3: 	jne	.Ltmp588 # Offset: 419
    000001a9: 	movzbl	(%r8), %eax
    000001ad: 	movb	%al, 0x10(%rbp)
.Ltmp596:
    000001b0: 	movq	%r13, 0x8(%rbp)
    000001b4: 	movb	$0x0, (%rdi,%r13)
    000001b9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001c0: 	addq	$0x20, %rax
    000001c4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp603:
    000001cb: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001d2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001d9: 	je	.Ltmp589 # Offset: 473
.Ltmp602:
    000001df: 	movq	-0x20(%rax), %rbp
    000001e3: 	callq	clock@PLT # Offset: 483
    000001e8: 	pxor	%xmm0, %xmm0
    000001ec: 	movq	%rax, end_time(%rip)
    000001f3: 	movq	%rbp, %rdi
    000001f6: 	subq	start_time(%rip), %rax
    000001fd: 	cvtsi2sd	%rax, %xmm0
    00000202: 	divsd	DATAat0xd498(%rip), %xmm0
    0000020a: 	callq	_Z13record_resultdPKc # Offset: 522
    0000020f: 	leaq	-0x1(%rbx), %rax
    00000213: 	testq	%rbx, %rbx
    00000216: 	je	.Ltmp590 # Offset: 534
    0000021c: 	movq	%r12, %rdx
    0000021f: 	nop # Size: 1
.Ltmp591:
    00000220: 	movq	(%rdx), %rdx
    00000223: 	subq	$0x1, %rax
    00000227: 	jae	.Ltmp591 # Offset: 551
    00000229: 	cmpq	%r14, %rdx
    0000022c: 	je	.Ltmp590 # Offset: 556
    00000232: 	cmpq	%r12, %rdx
    00000235: 	je	.Ltmp590 # Offset: 565
    0000023b: 	movq	%rdx, %rcx
    0000023e: 	movq	%r12, %rax
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp593:
    00000248: 	movsd	0x8(%rdx), %xmm1
    0000024d: 	movsd	0x8(%rax), %xmm0
    00000252: 	movsd	%xmm1, 0x8(%rax)
    00000257: 	movq	(%rax), %rax
    0000025a: 	movsd	%xmm0, 0x8(%rdx)
    0000025f: 	movq	(%rdx), %rdx
    00000262: 	cmpq	%rcx, %rax
    00000265: 	je	.Ltmp592 # Offset: 613
    0000026b: 	cmpq	%r14, %rdx
    0000026e: 	jne	.Ltmp593 # Offset: 622
    00000270: 	cmpq	%rcx, %r14
    00000273: 	je	.Ltmp590 # Offset: 627
    00000279: 	movq	%rcx, %rdx
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp595:
    00000280: 	movsd	0x8(%rcx), %xmm1
    00000285: 	movsd	0x8(%rax), %xmm0
    0000028a: 	movsd	%xmm1, 0x8(%rax)
    0000028f: 	movq	(%rax), %rax
    00000292: 	movsd	%xmm0, 0x8(%rcx)
    00000297: 	movq	(%rcx), %rcx
    0000029a: 	cmpq	%rdx, %rax
    0000029d: 	je	.Ltmp594 # Offset: 669
    0000029f: 	cmpq	%r14, %rcx
    000002a2: 	jne	.Ltmp595 # Offset: 674
    000002a4: 	cmpq	%r14, %rdx
    000002a7: 	je	.Ltmp590 # Offset: 679
.Ltmp597:
    000002a9: 	movq	%rdx, %rcx
    000002ac: 	jmp	.Ltmp595 # Offset: 684
    000002ae: 	nop # Size: 2
.Ltmp587:
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	leaq	0x30(%rsp), %rsi
    000002b8: 	xorl	%edx, %edx
    000002ba: 	movq	%r8, 0x8(%rsp)
    000002bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 703
    000002c4: 	movq	0x8(%rsp), %r8
    000002c9: 	movq	%rax, (%rbp)
    000002cd: 	movq	%rax, %rdi
    000002d0: 	movq	0x30(%rsp), %rax
    000002d5: 	movq	%rax, 0x10(%rbp)
.Ltmp604:
    000002d9: 	movq	%r13, %rdx
    000002dc: 	movq	%r8, %rsi
    000002df: 	callq	memcpy@PLT # Offset: 735
    000002e4: 	movq	0x30(%rsp), %r13
    000002e9: 	movq	(%rbp), %rdi
    000002ed: 	jmp	.Ltmp596 # Offset: 749
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp592:
    000002f8: 	cmpq	%r14, %rdx
    000002fb: 	je	.Ltmp590 # Offset: 763
    000002fd: 	movq	%rdx, %rcx
    00000300: 	jmp	.Ltmp593 # Offset: 768
    00000305: 	nopl	(%rax) # Size: 3
.Ltmp594:
    00000308: 	movq	%rcx, %rdx
    0000030b: 	cmpq	%r14, %rdx
    0000030e: 	jne	.Ltmp597 # Offset: 782
.Ltmp590:
    00000310: 	movq	(%r12), %rax
    00000314: 	jmp	.Ltmp598 # Offset: 788
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp600:
    00000320: 	movsd	0x8(%r15), %xmm0
    00000326: 	comisd	0x8(%rax), %xmm0
    0000032b: 	movq	(%rax), %rdx
    0000032e: 	movq	(%r15), %rcx
    00000331: 	ja	.Ltmp599 # Offset: 817
    00000333: 	movq	%rcx, %r15
    00000336: 	movq	%rdx, %rax
.Ltmp598:
    00000339: 	cmpq	%r14, %rax
    0000033c: 	jne	.Ltmp600 # Offset: 828
    0000033e: 	movq	0x38(%rsp), %rax
    00000343: 	subq	%fs:0x28, %rax
    0000034c: 	jne	.Ltmp601 # Offset: 844
    00000352: 	addq	$0x48, %rsp
    00000356: 	popq	%rbx
    00000357: 	popq	%rbp
    00000358: 	popq	%r12
    0000035a: 	popq	%r13
    0000035c: 	popq	%r14
    0000035e: 	popq	%r15
    00000360: 	retq # Offset: 864
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp599:
    00000368: 	movq	0x38(%rsp), %rax
    0000036d: 	subq	%fs:0x28, %rax
    00000376: 	jne	.Ltmp601 # Offset: 886
    0000037c: 	movq	0x20(%rsp), %rax
    00000381: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000388: 	movl	$0x1, %edi
    0000038d: 	movq	(%rax), %rdx
    00000390: 	addq	$0x48, %rsp
    00000394: 	xorl	%eax, %eax
    00000396: 	popq	%rbx
    00000397: 	popq	%rbp
    00000398: 	popq	%r12
    0000039a: 	popq	%r13
    0000039c: 	popq	%r14
    0000039e: 	popq	%r15
    000003a0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 928
    000003a5: 	nopl	(%rax) # Size: 3
.Ltmp589:
    000003a8: 	movq	-0x8(%rdx), %rax
    000003ac: 	addq	$0x200, %rax
    000003b2: 	jmp	.Ltmp602 # Offset: 946
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp584:
    000003c0: 	movq	0x20(%rsp), %rsi
    000003c5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 972
    000003d1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d8: 	jmp	.Ltmp603 # Offset: 984
    000003dd: 	nopl	(%rax) # Size: 3
.Ltmp580:
    000003e0: 	movl	0x18(%rsp), %ebp
    000003e4: 	movq	%rbx, %r13
    000003e7: 	jmp	.Ltmp582 # Offset: 999
    000003ec: 	nopl	(%rax) # Size: 4
.Ltmp588:
    000003f0: 	testq	%r13, %r13
    000003f3: 	je	.Ltmp596 # Offset: 1011
    000003f9: 	jmp	.Ltmp604 # Offset: 1017
    000003fe: 	nop # Size: 2
.Ltmp575:
    00000400: 	xorl	%ebx, %ebx
    00000402: 	jmp	.Ltmp605 # Offset: 1026
.Ltmp601:
    00000407: 	callq	__stack_chk_fail@PLT # Offset: 1031
.Ltmp586:
    0000040c: 	leaq	DATAat0xd158(%rip), %rdi
    00000413: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1043
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/rotate_sequence.cpp/1
  Number      : 82
  State       : disassembled
  Address     : 0x7c30
  Size        : 0x2d8
  MaxSize     : 0x2e0
  Offset      : 0x7c30
  Section     : .text
  Orc Section : .local.text._Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movl	%edx, 0x8(%rsp)
    00000018: 	movq	%rcx, 0x18(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ecx
    00000038: 	movl	0x8(%rsp), %r10d
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	leal	-0x2(%rcx,%r10), %eax
    00000049: 	cltd
    0000004a: 	idivl	%ecx
    0000004c: 	movl	$0x1, %edx
    00000051: 	testl	%eax, %eax
    00000053: 	cmovgl	%eax, %edx
    00000056: 	movl	%edx, 0xc(%rsp)
    0000005a: 	testl	%ecx, %ecx
    0000005c: 	jle	.Ltmp606 # Offset: 92
    00000062: 	movslq	%edx, %r15
    00000065: 	movq	%rbp, %r14
    00000068: 	xorl	%ebx, %ebx
    0000006a: 	xorl	%r12d, %r12d
    0000006d: 	leaq	(,%r15,8), %rax
    00000075: 	xorl	%r15d, %r15d
    00000078: 	movq	%rax, 0x10(%rsp)
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp608:
    00000080: 	cmpl	%r12d, %r10d
    00000083: 	jg	.Ltmp607 # Offset: 131
    00000085: 	subl	%r10d, %r12d
    00000088: 	movslq	%r12d, %rax
    0000008b: 	leaq	(%rbp,%rax,8), %r14
.Ltmp607:
    00000090: 	xorl	%r8d, %r8d
    00000093: 	xorl	%ecx, %ecx
    00000095: 	movq	%r13, %rdx
    00000098: 	movq	%r14, %rsi
    0000009b: 	movq	%rbp, %rdi
    0000009e: 	movl	%r10d, 0x8(%rsp)
    000000a3: 	callq	_Z28gries_mills_rotate_iterativeIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_mm # Offset: 163
    000000a8: 	movl	0x8(%rsp), %r10d
    000000ad: 	subl	%r12d, %ebx
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leal	(%rbx,%r10), %edx
    000000b9: 	cmovsl	%edx, %ebx
    000000bc: 	movl	%ebx, %edx
    000000be: 	subl	%r10d, %edx
    000000c1: 	cmpl	%ebx, %r10d
    000000c4: 	cmovlel	%edx, %ebx
    000000c7: 	addl	0xc(%rsp), %r12d
    000000cc: 	leaq	(%r14,%rax), %rdx
    000000d0: 	cmpl	%r12d, %r10d
    000000d3: 	cmovgq	%rdx, %r14
    000000d7: 	addl	$0x1, %r15d
    000000db: 	cmpl	iterations(%rip), %r15d
    000000e2: 	jl	.Ltmp608 # Offset: 226
.Ltmp623:
    000000e4: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000eb: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000f2: 	subq	$0x20, %rax
    000000f6: 	cmpq	%rax, %r14
    000000f9: 	je	.Ltmp609 # Offset: 249
    000000ff: 	movq	0x18(%rsp), %rax
    00000104: 	leaq	0x10(%r14), %rdi
    00000108: 	movq	%rdi, (%r14)
    0000010b: 	movq	(%rax), %r15
    0000010e: 	movq	0x8(%rax), %r12
    00000112: 	movq	%r15, %rax
    00000115: 	addq	%r12, %rax
    00000118: 	je	.Ltmp610 # Offset: 280
    0000011a: 	testq	%r15, %r15
    0000011d: 	je	.Ltmp611 # Offset: 285
.Ltmp610:
    00000123: 	movq	%r12, 0x20(%rsp)
    00000128: 	cmpq	$0xf, %r12
    0000012c: 	ja	.Ltmp612 # Offset: 300
    00000132: 	cmpq	$0x1, %r12
    00000136: 	jne	.Ltmp613 # Offset: 310
    0000013c: 	movzbl	(%r15), %eax
    00000140: 	movb	%al, 0x10(%r14)
.Ltmp619:
    00000144: 	movq	%r12, 0x8(%r14)
    00000148: 	movb	$0x0, (%rdi,%r12)
    0000014d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000154: 	addq	$0x20, %rax
    00000158: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp621:
    0000015f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000166: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000016d: 	je	.Ltmp614 # Offset: 365
.Ltmp620:
    00000173: 	movq	-0x20(%rax), %r12
    00000177: 	movslq	%ebx, %rbx
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	pxor	%xmm0, %xmm0
    00000183: 	movq	%rax, end_time(%rip)
    0000018a: 	movq	%r12, %rdi
    0000018d: 	subq	start_time(%rip), %rax
    00000194: 	cvtsi2sd	%rax, %xmm0
    00000199: 	divsd	DATAat0xd498(%rip), %xmm0
    000001a1: 	callq	_Z13record_resultdPKc # Offset: 417
    000001a6: 	leaq	(%rbp,%rbx,8), %rsi
    000001ab: 	movq	%r13, %rdx
    000001ae: 	movq	%rbp, %rdi
    000001b1: 	callq	"_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1" # Offset: 433
    000001b6: 	leaq	0x8(%rbp), %rax
    000001ba: 	jmp	.Ltmp615 # Offset: 442
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp617:
    000001c0: 	addq	$0x8, %rax
    000001c4: 	movsd	-0x10(%rax), %xmm0
    000001c9: 	comisd	(%rdx), %xmm0
    000001cd: 	ja	.Ltmp616 # Offset: 461
.Ltmp615:
    000001cf: 	movq	%rax, %rdx
    000001d2: 	cmpq	%rax, %r13
    000001d5: 	jne	.Ltmp617 # Offset: 469
    000001d7: 	movq	0x28(%rsp), %rax
    000001dc: 	subq	%fs:0x28, %rax
    000001e5: 	jne	.Ltmp618 # Offset: 485
    000001eb: 	addq	$0x38, %rsp
    000001ef: 	popq	%rbx
    000001f0: 	popq	%rbp
    000001f1: 	popq	%r12
    000001f3: 	popq	%r13
    000001f5: 	popq	%r14
    000001f7: 	popq	%r15
    000001f9: 	retq # Offset: 505
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp612:
    00000200: 	movq	%r14, %rdi
    00000203: 	leaq	0x20(%rsp), %rsi
    00000208: 	xorl	%edx, %edx
    0000020a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 522
    0000020f: 	movq	%rax, (%r14)
    00000212: 	movq	%rax, %rdi
    00000215: 	movq	0x20(%rsp), %rax
    0000021a: 	movq	%rax, 0x10(%r14)
.Ltmp622:
    0000021e: 	movq	%r12, %rdx
    00000221: 	movq	%r15, %rsi
    00000224: 	callq	memcpy@PLT # Offset: 548
    00000229: 	movq	0x20(%rsp), %r12
    0000022e: 	movq	(%r14), %rdi
    00000231: 	jmp	.Ltmp619 # Offset: 561
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp616:
    00000240: 	movq	0x28(%rsp), %rax
    00000245: 	subq	%fs:0x28, %rax
    0000024e: 	jne	.Ltmp618 # Offset: 590
    00000254: 	movq	0x18(%rsp), %rax
    00000259: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000260: 	movl	$0x1, %edi
    00000265: 	movq	(%rax), %rdx
    00000268: 	addq	$0x38, %rsp
    0000026c: 	xorl	%eax, %eax
    0000026e: 	popq	%rbx
    0000026f: 	popq	%rbp
    00000270: 	popq	%r12
    00000272: 	popq	%r13
    00000274: 	popq	%r14
    00000276: 	popq	%r15
    00000278: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 632
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp614:
    00000280: 	movq	-0x8(%rdx), %rax
    00000284: 	addq	$0x200, %rax
    0000028a: 	jmp	.Ltmp620 # Offset: 650
    0000028f: 	nop # Size: 1
.Ltmp609:
    00000290: 	movq	0x18(%rsp), %rsi
    00000295: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000029c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 668
    000002a1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002a8: 	jmp	.Ltmp621 # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp613:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp619 # Offset: 691
    000002b9: 	jmp	.Ltmp622 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp606:
    000002c0: 	xorl	%ebx, %ebx
    000002c2: 	jmp	.Ltmp623 # Offset: 706
.Ltmp611:
    000002c7: 	leaq	DATAat0xd158(%rip), %rdi
    000002ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 718
.Ltmp618:
    000002d3: 	callq	__stack_chk_fail@PLT # Offset: 723
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x7f10
  Size        : 0x2d8
  MaxSize     : 0x2e0
  Offset      : 0x7f10
  Section     : .text
  Orc Section : .local.text._Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movl	%edx, (%rsp)
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	movq	%r8, 0x18(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x28(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movl	iterations(%rip), %ecx
    00000040: 	movl	(%rsp), %r10d
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	leal	-0x2(%rcx,%r10), %eax
    00000050: 	cltd
    00000051: 	idivl	%ecx
    00000053: 	movl	$0x1, %edx
    00000058: 	testl	%eax, %eax
    0000005a: 	cmovgl	%eax, %edx
    0000005d: 	movl	%edx, 0x4(%rsp)
    00000061: 	testl	%ecx, %ecx
    00000063: 	jle	.Ltmp624 # Offset: 99
    00000069: 	movslq	%edx, %r15
    0000006c: 	movq	%rbp, %r12
    0000006f: 	xorl	%ebx, %ebx
    00000071: 	xorl	%r14d, %r14d
    00000074: 	leaq	(,%r15,8), %rax
    0000007c: 	xorl	%r15d, %r15d
    0000007f: 	movq	%rax, 0x10(%rsp)
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp626:
    00000088: 	cmpl	%r14d, %r10d
    0000008b: 	jg	.Ltmp625 # Offset: 139
    0000008d: 	subl	%r10d, %r14d
    00000090: 	movslq	%r14d, %rdx
    00000093: 	leaq	(%rbp,%rdx,8), %r12
.Ltmp625:
    00000098: 	movl	%r10d, (%rsp)
    0000009c: 	movq	0x8(%rsp), %rax
    000000a1: 	movq	%r13, %rdx
    000000a4: 	movq	%r12, %rsi
    000000a7: 	movq	%rbp, %rdi
    000000aa: 	callq	*%rax # Offset: 170
    000000ac: 	movl	(%rsp), %r10d
    000000b0: 	subl	%r14d, %ebx
    000000b3: 	movq	0x10(%rsp), %rax
    000000b8: 	leal	(%rbx,%r10), %edx
    000000bc: 	cmovsl	%edx, %ebx
    000000bf: 	movl	%ebx, %edx
    000000c1: 	subl	%r10d, %edx
    000000c4: 	cmpl	%r10d, %ebx
    000000c7: 	cmovgel	%edx, %ebx
    000000ca: 	addl	0x4(%rsp), %r14d
    000000cf: 	leaq	(%r12,%rax), %rdx
    000000d3: 	cmpl	%r14d, %r10d
    000000d6: 	cmovgq	%rdx, %r12
    000000da: 	addl	$0x1, %r15d
    000000de: 	cmpl	%r15d, iterations(%rip)
    000000e5: 	jg	.Ltmp626 # Offset: 229
.Ltmp641:
    000000e7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000ee: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000f5: 	subq	$0x20, %rax
    000000f9: 	cmpq	%rax, %r14
    000000fc: 	je	.Ltmp627 # Offset: 252
    00000102: 	movq	0x18(%rsp), %rax
    00000107: 	leaq	0x10(%r14), %rdi
    0000010b: 	movq	%rdi, (%r14)
    0000010e: 	movq	(%rax), %r15
    00000111: 	movq	0x8(%rax), %r12
    00000115: 	movq	%r15, %rax
    00000118: 	addq	%r12, %rax
    0000011b: 	je	.Ltmp628 # Offset: 283
    0000011d: 	testq	%r15, %r15
    00000120: 	je	.Ltmp629 # Offset: 288
.Ltmp628:
    00000126: 	movq	%r12, 0x20(%rsp)
    0000012b: 	cmpq	$0xf, %r12
    0000012f: 	ja	.Ltmp630 # Offset: 303
    00000135: 	cmpq	$0x1, %r12
    00000139: 	jne	.Ltmp631 # Offset: 313
    0000013f: 	movzbl	(%r15), %eax
    00000143: 	movb	%al, 0x10(%r14)
.Ltmp637:
    00000147: 	movq	%r12, 0x8(%r14)
    0000014b: 	movb	$0x0, (%rdi,%r12)
    00000150: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000157: 	addq	$0x20, %rax
    0000015b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp639:
    00000162: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000169: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000170: 	je	.Ltmp632 # Offset: 368
.Ltmp638:
    00000176: 	movq	-0x20(%rax), %r12
    0000017a: 	movslq	%ebx, %rbx
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0xd498(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	(%rbp,%rbx,8), %rsi
    000001ae: 	movq	%r13, %rdx
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	callq	"_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1" # Offset: 436
    000001b9: 	leaq	0x8(%rbp), %rax
    000001bd: 	jmp	.Ltmp633 # Offset: 445
    000001bf: 	nop # Size: 1
.Ltmp635:
    000001c0: 	addq	$0x8, %rax
    000001c4: 	movsd	-0x10(%rax), %xmm0
    000001c9: 	comisd	(%rdx), %xmm0
    000001cd: 	ja	.Ltmp634 # Offset: 461
.Ltmp633:
    000001cf: 	movq	%rax, %rdx
    000001d2: 	cmpq	%rax, %r13
    000001d5: 	jne	.Ltmp635 # Offset: 469
    000001d7: 	movq	0x28(%rsp), %rax
    000001dc: 	subq	%fs:0x28, %rax
    000001e5: 	jne	.Ltmp636 # Offset: 485
    000001eb: 	addq	$0x38, %rsp
    000001ef: 	popq	%rbx
    000001f0: 	popq	%rbp
    000001f1: 	popq	%r12
    000001f3: 	popq	%r13
    000001f5: 	popq	%r14
    000001f7: 	popq	%r15
    000001f9: 	retq # Offset: 505
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp630:
    00000200: 	movq	%r14, %rdi
    00000203: 	leaq	0x20(%rsp), %rsi
    00000208: 	xorl	%edx, %edx
    0000020a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 522
    0000020f: 	movq	%rax, (%r14)
    00000212: 	movq	%rax, %rdi
    00000215: 	movq	0x20(%rsp), %rax
    0000021a: 	movq	%rax, 0x10(%r14)
.Ltmp640:
    0000021e: 	movq	%r12, %rdx
    00000221: 	movq	%r15, %rsi
    00000224: 	callq	memcpy@PLT # Offset: 548
    00000229: 	movq	0x20(%rsp), %r12
    0000022e: 	movq	(%r14), %rdi
    00000231: 	jmp	.Ltmp637 # Offset: 561
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp634:
    00000240: 	movq	0x28(%rsp), %rax
    00000245: 	subq	%fs:0x28, %rax
    0000024e: 	jne	.Ltmp636 # Offset: 590
    00000254: 	movq	0x18(%rsp), %rax
    00000259: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000260: 	movl	$0x1, %edi
    00000265: 	movq	(%rax), %rdx
    00000268: 	addq	$0x38, %rsp
    0000026c: 	xorl	%eax, %eax
    0000026e: 	popq	%rbx
    0000026f: 	popq	%rbp
    00000270: 	popq	%r12
    00000272: 	popq	%r13
    00000274: 	popq	%r14
    00000276: 	popq	%r15
    00000278: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 632
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp632:
    00000280: 	movq	-0x8(%rdx), %rax
    00000284: 	addq	$0x200, %rax
    0000028a: 	jmp	.Ltmp638 # Offset: 650
    0000028f: 	nop # Size: 1
.Ltmp627:
    00000290: 	movq	0x18(%rsp), %rsi
    00000295: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000029c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 668
    000002a1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002a8: 	jmp	.Ltmp639 # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp631:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp637 # Offset: 691
    000002b9: 	jmp	.Ltmp640 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp624:
    000002c0: 	xorl	%ebx, %ebx
    000002c2: 	jmp	.Ltmp641 # Offset: 706
.Ltmp629:
    000002c7: 	leaq	DATAat0xd158(%rip), %rdi
    000002ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 718
.Ltmp636:
    000002d3: 	callq	__stack_chk_fail@PLT # Offset: 723
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x81f0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0x81f0
  Section     : .text
  Orc Section : .local.text._Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0xd1f8(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0xd228(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp642 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp643 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp648:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp650:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rcx
    000000b5: 	movl	%ebx, %edx
    000000b7: 	movq	%r10, %rsi
    000000ba: 	movb	$0x0, (%rax,%r8)
    000000bf: 	movq	%r14, %rdi
    000000c2: 	movq	%r15, %r8
    000000c5: 	callq	_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 197
    000000ca: 	movq	0x50(%rsp), %rdi
    000000cf: 	cmpq	%r13, %rdi
    000000d2: 	je	.Ltmp644 # Offset: 210
    000000d4: 	movq	0x60(%rsp), %rax
    000000d9: 	leaq	0x1(%rax), %rsi
    000000dd: 	callq	_ZdlPvm@PLT # Offset: 221
.Ltmp644:
    000000e2: 	pxor	%xmm1, %xmm1
    000000e6: 	pxor	%xmm2, %xmm2
    000000ea: 	movq	(%rbp), %rcx
    000000ee: 	movl	%ebx, %r8d
    000000f1: 	cvtsi2sd	%ebx, %xmm2
    000000f5: 	movq	results(%rip), %rax
    000000fc: 	movl	%r12d, %edx
    000000ff: 	addl	%ebx, %ebx
    00000101: 	leaq	DATAat0xd258(%rip), %rsi
    00000108: 	movl	$0x1, %edi
    0000010d: 	addl	$0x1, %r12d
    00000111: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000119: 	movsd	(%rax), %xmm0
    0000011d: 	movl	$0x2, %eax
    00000122: 	mulsd	%xmm2, %xmm1
    00000126: 	divsd	DATAat0xd498(%rip), %xmm1
    0000012e: 	divsd	%xmm0, %xmm1
    00000132: 	callq	__printf_chk@PLT # Offset: 306
    00000137: 	movl	$0x0, current_test(%rip)
    00000141: 	cmpl	%ebx, 0x38(%rsp)
    00000145: 	jl	.Ltmp642 # Offset: 325
.Ltmp643:
    0000014b: 	movl	0x38(%rsp), %eax
    0000014f: 	movq	(%rbp), %r9
    00000153: 	movq	%r13, 0x50(%rsp)
    00000158: 	movq	0x8(%rbp), %r8
    0000015c: 	cltd
    0000015d: 	idivl	%ebx
    0000015f: 	movl	$0x8, %edx
    00000164: 	cltq
    00000166: 	imulq	0x10(%rsp), %rax
    0000016c: 	cmpq	%rdx, %rax
    0000016f: 	cmovlq	%rdx, %rax
    00000173: 	movl	$0x70000000, %edx
    00000178: 	cmpq	%rdx, %rax
    0000017b: 	cmovgq	%rdx, %rax
    0000017f: 	addq	$0x1, %rax
    00000183: 	andq	$-0x2, %rax
    00000187: 	movl	%eax, iterations(%rip)
    0000018d: 	movslq	%ebx, %rax
    00000190: 	leaq	(%r14,%rax,8), %r10
    00000194: 	movq	%r9, %rax
    00000197: 	addq	%r8, %rax
    0000019a: 	je	.Ltmp645 # Offset: 410
    0000019c: 	testq	%r9, %r9
    0000019f: 	je	.Ltmp646 # Offset: 415
.Ltmp645:
    000001a5: 	movq	%r8, 0x48(%rsp)
    000001aa: 	cmpq	$0xf, %r8
    000001ae: 	ja	.Ltmp647 # Offset: 430
    000001b0: 	cmpq	$0x1, %r8
    000001b4: 	je	.Ltmp648 # Offset: 436
    000001ba: 	testq	%r8, %r8
    000001bd: 	jne	.Ltmp649 # Offset: 445
    000001c3: 	movq	%r13, %rax
    000001c6: 	jmp	.Ltmp650 # Offset: 454
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp647:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r10, 0x28(%rsp)
    000001df: 	movq	%r8, 0x20(%rsp)
    000001e4: 	movq	%r9, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r9
    000001f3: 	movq	0x20(%rsp), %r8
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r10
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp652:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp650 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp642:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp651 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp646:
    00000264: 	leaq	DATAat0xd158(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp651:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp649:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp652 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp653 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp653:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/rotate_sequence.cpp/1
  Number      : 85
  State       : disassembled
  Address     : 0x84a0
  Size        : 0x2d8
  MaxSize     : 0x2e0
  Offset      : 0x84a0
  Section     : .text
  Orc Section : .local.text._Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movl	%edx, 0x8(%rsp)
    00000018: 	movq	%rcx, 0x18(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x28(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %ecx
    00000038: 	movl	0x8(%rsp), %r8d
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	leal	-0x2(%rcx,%r8), %eax
    00000049: 	cltd
    0000004a: 	idivl	%ecx
    0000004c: 	movl	$0x1, %edx
    00000051: 	testl	%eax, %eax
    00000053: 	cmovgl	%eax, %edx
    00000056: 	movl	%edx, 0xc(%rsp)
    0000005a: 	testl	%ecx, %ecx
    0000005c: 	jle	.Ltmp654 # Offset: 92
    00000062: 	movslq	%edx, %r15
    00000065: 	movq	%rbp, %r14
    00000068: 	xorl	%ebx, %ebx
    0000006a: 	xorl	%r12d, %r12d
    0000006d: 	leaq	(,%r15,8), %rax
    00000075: 	xorl	%r15d, %r15d
    00000078: 	movq	%rax, 0x10(%rsp)
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp656:
    00000080: 	cmpl	%r12d, %r8d
    00000083: 	jg	.Ltmp655 # Offset: 131
    00000085: 	subl	%r8d, %r12d
    00000088: 	movslq	%r12d, %rax
    0000008b: 	leaq	(%rbp,%rax,8), %r14
.Ltmp655:
    00000090: 	movq	%r14, %rsi
    00000093: 	movq	%r13, %rdx
    00000096: 	movq	%rbp, %rdi
    00000099: 	movl	%r8d, 0x8(%rsp)
    0000009e: 	callq	"_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1" # Offset: 158
    000000a3: 	movl	0x8(%rsp), %r8d
    000000a8: 	subl	%r12d, %ebx
    000000ab: 	leal	(%rbx,%r8), %eax
    000000af: 	cmovsl	%eax, %ebx
    000000b2: 	movl	%ebx, %eax
    000000b4: 	subl	%r8d, %eax
    000000b7: 	cmpl	%ebx, %r8d
    000000ba: 	cmovlel	%eax, %ebx
    000000bd: 	movq	0x10(%rsp), %rax
    000000c2: 	addl	0xc(%rsp), %r12d
    000000c7: 	addq	%r14, %rax
    000000ca: 	cmpl	%r12d, %r8d
    000000cd: 	cmovgq	%rax, %r14
    000000d1: 	addl	$0x1, %r15d
    000000d5: 	cmpl	iterations(%rip), %r15d
    000000dc: 	jl	.Ltmp656 # Offset: 220
.Ltmp671:
    000000de: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000e5: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000ec: 	subq	$0x20, %rax
    000000f0: 	cmpq	%rax, %r14
    000000f3: 	je	.Ltmp657 # Offset: 243
    000000f9: 	movq	0x18(%rsp), %rax
    000000fe: 	leaq	0x10(%r14), %rdi
    00000102: 	movq	%rdi, (%r14)
    00000105: 	movq	(%rax), %r15
    00000108: 	movq	0x8(%rax), %r12
    0000010c: 	movq	%r15, %rax
    0000010f: 	addq	%r12, %rax
    00000112: 	je	.Ltmp658 # Offset: 274
    00000114: 	testq	%r15, %r15
    00000117: 	je	.Ltmp659 # Offset: 279
.Ltmp658:
    0000011d: 	movq	%r12, 0x20(%rsp)
    00000122: 	cmpq	$0xf, %r12
    00000126: 	ja	.Ltmp660 # Offset: 294
    0000012c: 	cmpq	$0x1, %r12
    00000130: 	jne	.Ltmp661 # Offset: 304
    00000136: 	movzbl	(%r15), %eax
    0000013a: 	movb	%al, 0x10(%r14)
.Ltmp667:
    0000013e: 	movq	%r12, 0x8(%r14)
    00000142: 	movb	$0x0, (%rdi,%r12)
    00000147: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000014e: 	addq	$0x20, %rax
    00000152: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp669:
    00000159: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000160: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000167: 	je	.Ltmp662 # Offset: 359
.Ltmp668:
    0000016d: 	movq	-0x20(%rax), %r12
    00000171: 	movslq	%ebx, %rbx
    00000174: 	callq	clock@PLT # Offset: 372
    00000179: 	pxor	%xmm0, %xmm0
    0000017d: 	movq	%rax, end_time(%rip)
    00000184: 	movq	%r12, %rdi
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	cvtsi2sd	%rax, %xmm0
    00000193: 	divsd	DATAat0xd498(%rip), %xmm0
    0000019b: 	callq	_Z13record_resultdPKc # Offset: 411
    000001a0: 	leaq	(%rbp,%rbx,8), %rsi
    000001a5: 	movq	%r13, %rdx
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	callq	"_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEET_S8_S8_S8_St26random_access_iterator_tag.isra.0/1" # Offset: 427
    000001b0: 	leaq	0x8(%rbp), %rax
    000001b4: 	jmp	.Ltmp663 # Offset: 436
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp665:
    000001c0: 	addq	$0x8, %rax
    000001c4: 	movsd	-0x10(%rax), %xmm0
    000001c9: 	comisd	(%rdx), %xmm0
    000001cd: 	ja	.Ltmp664 # Offset: 461
.Ltmp663:
    000001cf: 	movq	%rax, %rdx
    000001d2: 	cmpq	%rax, %r13
    000001d5: 	jne	.Ltmp665 # Offset: 469
    000001d7: 	movq	0x28(%rsp), %rax
    000001dc: 	subq	%fs:0x28, %rax
    000001e5: 	jne	.Ltmp666 # Offset: 485
    000001eb: 	addq	$0x38, %rsp
    000001ef: 	popq	%rbx
    000001f0: 	popq	%rbp
    000001f1: 	popq	%r12
    000001f3: 	popq	%r13
    000001f5: 	popq	%r14
    000001f7: 	popq	%r15
    000001f9: 	retq # Offset: 505
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp660:
    00000200: 	movq	%r14, %rdi
    00000203: 	leaq	0x20(%rsp), %rsi
    00000208: 	xorl	%edx, %edx
    0000020a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 522
    0000020f: 	movq	%rax, (%r14)
    00000212: 	movq	%rax, %rdi
    00000215: 	movq	0x20(%rsp), %rax
    0000021a: 	movq	%rax, 0x10(%r14)
.Ltmp670:
    0000021e: 	movq	%r12, %rdx
    00000221: 	movq	%r15, %rsi
    00000224: 	callq	memcpy@PLT # Offset: 548
    00000229: 	movq	0x20(%rsp), %r12
    0000022e: 	movq	(%r14), %rdi
    00000231: 	jmp	.Ltmp667 # Offset: 561
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp664:
    00000240: 	movq	0x28(%rsp), %rax
    00000245: 	subq	%fs:0x28, %rax
    0000024e: 	jne	.Ltmp666 # Offset: 590
    00000254: 	movq	0x18(%rsp), %rax
    00000259: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000260: 	movl	$0x1, %edi
    00000265: 	movq	(%rax), %rdx
    00000268: 	addq	$0x38, %rsp
    0000026c: 	xorl	%eax, %eax
    0000026e: 	popq	%rbx
    0000026f: 	popq	%rbp
    00000270: 	popq	%r12
    00000272: 	popq	%r13
    00000274: 	popq	%r14
    00000276: 	popq	%r15
    00000278: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 632
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp662:
    00000280: 	movq	-0x8(%rdx), %rax
    00000284: 	addq	$0x200, %rax
    0000028a: 	jmp	.Ltmp668 # Offset: 650
    0000028f: 	nop # Size: 1
.Ltmp657:
    00000290: 	movq	0x18(%rsp), %rsi
    00000295: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000029c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 668
    000002a1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002a8: 	jmp	.Ltmp669 # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp661:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp667 # Offset: 691
    000002b9: 	jmp	.Ltmp670 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp654:
    000002c0: 	xorl	%ebx, %ebx
    000002c2: 	jmp	.Ltmp671 # Offset: 706
.Ltmp659:
    000002c7: 	leaq	DATAat0xd158(%rip), %rdi
    000002ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 718
.Ltmp666:
    000002d3: 	callq	__stack_chk_fail@PLT # Offset: 723
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/rotate_sequence.cpp/1
  Number      : 86
  State       : disassembled
  Address     : 0x8780
  Size        : 0x358
  MaxSize     : 0x360
  Offset      : 0x8780
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%edx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x38, %rsp
    00000019: 	movq	%rcx, 0x18(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x28(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movl	iterations(%rip), %r14d
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	leal	-0x2(%r14,%rbp), %eax
    00000046: 	cltd
    00000047: 	idivl	%r14d
    0000004a: 	movl	$0x1, %edx
    0000004f: 	testl	%eax, %eax
    00000051: 	cmovgl	%eax, %edx
    00000054: 	movl	%edx, 0x8(%rsp)
    00000058: 	testl	%r14d, %r14d
    0000005b: 	jle	.Ltmp672 # Offset: 91
    00000061: 	movl	%edx, %eax
    00000063: 	movq	%r12, %rsi
    00000066: 	xorl	%r11d, %r11d
    00000069: 	xorl	%ebx, %ebx
    0000006b: 	subl	$0x1, %eax
    0000006e: 	xorl	%r10d, %r10d
    00000071: 	movl	%eax, 0x14(%rsp)
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp677:
    00000078: 	cmpl	%r10d, %ebp
    0000007b: 	jg	.Ltmp673 # Offset: 123
    0000007d: 	subl	%ebp, %r10d
    00000080: 	je	.Ltmp674 # Offset: 128
    00000086: 	leal	-0x1(%r10), %eax
    0000008a: 	movq	%r12, %rsi
    0000008d: 	cltq
    0000008f: 	nop # Size: 1
.Ltmp675:
    00000090: 	movq	(%rsi), %rsi
    00000093: 	subq	$0x1, %rax
    00000097: 	jae	.Ltmp675 # Offset: 151
.Ltmp673:
    00000099: 	subl	%r10d, %ebx
    0000009c: 	addl	0x8(%rsp), %r10d
.Ltmp692:
    000000a1: 	movq	%r13, %rdx
    000000a4: 	movq	%r12, %rdi
    000000a7: 	callq	"_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1" # Offset: 167
    000000ac: 	testl	%ebx, %ebx
    000000ae: 	leal	(%rbx,%rbp), %eax
    000000b1: 	cmovsl	%eax, %ebx
    000000b4: 	movl	%ebx, %eax
    000000b6: 	subl	%ebp, %eax
    000000b8: 	cmpl	%ebx, %ebp
    000000ba: 	cmovlel	%eax, %ebx
    000000bd: 	cmpl	%r10d, %ebp
    000000c0: 	jg	.Ltmp676 # Offset: 192
.Ltmp691:
    000000c6: 	addl	$0x1, %r11d
    000000ca: 	cmpl	%r11d, %r14d
    000000cd: 	jne	.Ltmp677 # Offset: 205
.Ltmp698:
    000000cf: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d6: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    000000dd: 	subq	$0x20, %rax
    000000e1: 	cmpq	%rax, %rbp
    000000e4: 	je	.Ltmp678 # Offset: 228
    000000ea: 	movq	0x18(%rsp), %rax
    000000ef: 	leaq	0x10(%rbp), %rdi
    000000f3: 	movq	%rdi, (%rbp)
    000000f7: 	movq	(%rax), %r8
    000000fa: 	movq	0x8(%rax), %r14
    000000fe: 	movq	%r8, %rax
    00000101: 	addq	%r14, %rax
    00000104: 	je	.Ltmp679 # Offset: 260
    00000106: 	testq	%r8, %r8
    00000109: 	je	.Ltmp680 # Offset: 265
.Ltmp679:
    0000010f: 	movq	%r14, 0x20(%rsp)
    00000114: 	cmpq	$0xf, %r14
    00000118: 	ja	.Ltmp681 # Offset: 280
    0000011e: 	cmpq	$0x1, %r14
    00000122: 	jne	.Ltmp682 # Offset: 290
    00000128: 	movzbl	(%r8), %eax
    0000012c: 	movb	%al, 0x10(%rbp)
.Ltmp693:
    0000012f: 	movq	%r14, 0x8(%rbp)
    00000133: 	movb	$0x0, (%rdi,%r14)
    00000138: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000146: 	addq	$0x20, %rax
    0000014a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000151: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000158: 	je	.Ltmp683 # Offset: 344
.Ltmp696:
    0000015e: 	movq	-0x20(%rax), %rbp
    00000162: 	movslq	%ebx, %rbx
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	%rax, end_time(%rip)
    00000175: 	movq	%rbp, %rdi
    00000178: 	subq	start_time(%rip), %rax
    0000017f: 	cvtsi2sd	%rax, %xmm0
    00000184: 	divsd	DATAat0xd498(%rip), %xmm0
    0000018c: 	callq	_Z13record_resultdPKc # Offset: 396
    00000191: 	leaq	-0x1(%rbx), %rax
    00000195: 	movq	%r12, %rsi
    00000198: 	testq	%rbx, %rbx
    0000019b: 	jle	.Ltmp684 # Offset: 411
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp685:
    000001a8: 	movq	(%rsi), %rsi
    000001ab: 	subq	$0x1, %rax
    000001af: 	jae	.Ltmp685 # Offset: 431
.Ltmp694:
    000001b1: 	movq	%r13, %rdx
    000001b4: 	movq	%r12, %rdi
    000001b7: 	callq	"_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1" # Offset: 439
    000001bc: 	movq	(%r12), %rax
    000001c0: 	jmp	.Ltmp686 # Offset: 448
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp688:
    000001c8: 	movsd	0x10(%r15), %xmm0
    000001ce: 	comisd	0x10(%rax), %xmm0
    000001d3: 	movq	(%rax), %rdx
    000001d6: 	movq	(%r15), %rsi
    000001d9: 	ja	.Ltmp687 # Offset: 473
    000001df: 	movq	%rsi, %r15
    000001e2: 	movq	%rdx, %rax
.Ltmp686:
    000001e5: 	cmpq	%rax, %r13
    000001e8: 	jne	.Ltmp688 # Offset: 488
    000001ea: 	movq	0x28(%rsp), %rax
    000001ef: 	subq	%fs:0x28, %rax
    000001f8: 	jne	.Ltmp689 # Offset: 504
    000001fe: 	addq	$0x38, %rsp
    00000202: 	popq	%rbx
    00000203: 	popq	%rbp
    00000204: 	popq	%r12
    00000206: 	popq	%r13
    00000208: 	popq	%r14
    0000020a: 	popq	%r15
    0000020c: 	retq # Offset: 524
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp676:
    00000210: 	movslq	0x14(%rsp), %rax
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp690:
    00000218: 	movq	(%rsi), %rsi
    0000021b: 	subq	$0x1, %rax
    0000021f: 	jae	.Ltmp690 # Offset: 543
    00000221: 	jmp	.Ltmp691 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp674:
    00000230: 	movl	0x8(%rsp), %r10d
    00000235: 	movq	%r12, %rsi
    00000238: 	jmp	.Ltmp692 # Offset: 568
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp681:
    00000240: 	movq	%rbp, %rdi
    00000243: 	leaq	0x20(%rsp), %rsi
    00000248: 	xorl	%edx, %edx
    0000024a: 	movq	%r8, 0x8(%rsp)
    0000024f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 591
    00000254: 	movq	0x8(%rsp), %r8
    00000259: 	movq	%rax, (%rbp)
    0000025d: 	movq	%rax, %rdi
    00000260: 	movq	0x20(%rsp), %rax
    00000265: 	movq	%rax, 0x10(%rbp)
.Ltmp697:
    00000269: 	movq	%r14, %rdx
    0000026c: 	movq	%r8, %rsi
    0000026f: 	callq	memcpy@PLT # Offset: 623
    00000274: 	movq	0x20(%rsp), %r14
    00000279: 	movq	(%rbp), %rdi
    0000027d: 	jmp	.Ltmp693 # Offset: 637
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp684:
    00000288: 	leaq	0x1(%rbx), %rax
    0000028c: 	je	.Ltmp694 # Offset: 652
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp695:
    00000298: 	addq	$0x1, %rax
    0000029c: 	movq	0x8(%rsi), %rsi
    000002a0: 	cmpq	$0x1, %rax
    000002a4: 	jne	.Ltmp695 # Offset: 676
    000002a6: 	jmp	.Ltmp694 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp687:
    000002b0: 	movq	0x28(%rsp), %rax
    000002b5: 	subq	%fs:0x28, %rax
    000002be: 	jne	.Ltmp689 # Offset: 702
    000002c4: 	movq	0x18(%rsp), %rax
    000002c9: 	leaq	DATAat0xd1e8(%rip), %rsi
    000002d0: 	movl	$0x1, %edi
    000002d5: 	movq	(%rax), %rdx
    000002d8: 	addq	$0x38, %rsp
    000002dc: 	xorl	%eax, %eax
    000002de: 	popq	%rbx
    000002df: 	popq	%rbp
    000002e0: 	popq	%r12
    000002e2: 	popq	%r13
    000002e4: 	popq	%r14
    000002e6: 	popq	%r15
    000002e8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 744
    000002ed: 	nopl	(%rax) # Size: 3
.Ltmp678:
    000002f0: 	movq	0x18(%rsp), %rsi
    000002f5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 764
    00000301: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000308: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000030f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000316: 	jne	.Ltmp696 # Offset: 790
.Ltmp683:
    0000031c: 	movq	-0x8(%rdx), %rax
    00000320: 	addq	$0x200, %rax
    00000326: 	jmp	.Ltmp696 # Offset: 806
    0000032b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp682:
    00000330: 	testq	%r14, %r14
    00000333: 	je	.Ltmp693 # Offset: 819
    00000339: 	jmp	.Ltmp697 # Offset: 825
    0000033e: 	nop # Size: 2
.Ltmp672:
    00000340: 	xorl	%ebx, %ebx
    00000342: 	jmp	.Ltmp698 # Offset: 834
.Ltmp680:
    00000347: 	leaq	DATAat0xd158(%rip), %rdi
    0000034e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 846
.Ltmp689:
    00000353: 	callq	__stack_chk_fail@PLT # Offset: 851
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/rotate_sequence.cpp/1
  Number      : 87
  State       : disassembled
  Address     : 0x8ae0
  Size        : 0x3a8
  MaxSize     : 0x3b0
  Offset      : 0x8ae0
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%edx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x48, %rsp
    00000019: 	movq	%rcx, 0x20(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x38(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movl	iterations(%rip), %edi
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	leal	-0x2(%rdi,%rbp), %eax
    00000044: 	movl	%edi, 0x14(%rsp)
    00000048: 	cltd
    00000049: 	idivl	%edi
    0000004b: 	movl	$0x1, %edx
    00000050: 	testl	%eax, %eax
    00000052: 	cmovgl	%eax, %edx
    00000055: 	movl	%edx, 0x18(%rsp)
    00000059: 	testl	%edi, %edi
    0000005b: 	jle	.Ltmp699 # Offset: 91
    00000061: 	movl	%edx, %eax
    00000063: 	movq	%r12, %rsi
    00000066: 	xorl	%ebx, %ebx
    00000068: 	xorl	%r11d, %r11d
    0000006b: 	subl	$0x1, %eax
    0000006e: 	movq	%r12, 0x28(%rsp)
    00000073: 	xorl	%r13d, %r13d
    00000076: 	movl	%ebx, %r12d
    00000079: 	movl	%eax, 0x1c(%rsp)
    0000007d: 	movl	%r11d, %r14d
    00000080: 	movq	%rsi, %rbx
    00000083: 	movq	%r15, 0x8(%rsp)
    00000088: 	movl	%ebp, %r15d
    0000008b: 	movq	%rsi, %rbp
    0000008e: 	nop # Size: 2
.Ltmp704:
    00000090: 	cmpl	%r13d, %r15d
    00000093: 	jg	.Ltmp700 # Offset: 147
    00000099: 	movl	%r13d, %r9d
    0000009c: 	subl	%r15d, %r9d
    0000009f: 	je	.Ltmp701 # Offset: 159
    000000a5: 	leal	-0x1(%r9), %edx
    000000a9: 	movq	%rbx, %rbp
    000000ac: 	movslq	%edx, %rdx
    000000af: 	nop # Size: 1
.Ltmp702:
    000000b0: 	movq	(%rbp), %rbp
    000000b4: 	subq	$0x1, %rdx
    000000b8: 	jae	.Ltmp702 # Offset: 184
    000000ba: 	movl	0x18(%rsp), %eax
    000000be: 	subl	%r9d, %r12d
    000000c1: 	leal	(%rax,%r9), %r13d
.Ltmp717:
    000000c5: 	movq	0x8(%rsp), %rdx
    000000ca: 	xorl	%r8d, %r8d
    000000cd: 	xorl	%ecx, %ecx
    000000cf: 	movq	%rbp, %rsi
    000000d2: 	movq	%rbx, %rdi
    000000d5: 	callq	_Z28gries_mills_rotate_iterativeISt14_List_iteratorIdEEvT_S2_S2_mm # Offset: 213
    000000da: 	testl	%r12d, %r12d
    000000dd: 	leal	(%r12,%r15), %edx
    000000e1: 	cmovsl	%edx, %r12d
    000000e5: 	movl	%r12d, %edx
    000000e8: 	subl	%r15d, %edx
    000000eb: 	cmpl	%r12d, %r15d
    000000ee: 	cmovlel	%edx, %r12d
    000000f2: 	cmpl	%r13d, %r15d
    000000f5: 	jg	.Ltmp703 # Offset: 245
.Ltmp719:
    000000fb: 	addl	$0x1, %r14d
    000000ff: 	cmpl	%r14d, 0x14(%rsp)
    00000104: 	jne	.Ltmp704 # Offset: 260
    00000106: 	movq	%rbx, %rax
    00000109: 	movq	0x28(%rsp), %r14
    0000010e: 	movq	0x8(%rsp), %r15
    00000113: 	movslq	%r12d, %rbx
    00000116: 	movq	%rax, %r12
.Ltmp725:
    00000119: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000120: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000127: 	subq	$0x20, %rax
    0000012b: 	cmpq	%rax, %rbp
    0000012e: 	je	.Ltmp705 # Offset: 302
    00000134: 	movq	0x20(%rsp), %rax
    00000139: 	leaq	0x10(%rbp), %rdi
    0000013d: 	movq	%rdi, (%rbp)
    00000141: 	movq	(%rax), %r8
    00000144: 	movq	0x8(%rax), %r13
    00000148: 	movq	%r8, %rax
    0000014b: 	addq	%r13, %rax
    0000014e: 	je	.Ltmp706 # Offset: 334
    00000150: 	testq	%r8, %r8
    00000153: 	je	.Ltmp707 # Offset: 339
.Ltmp706:
    00000159: 	movq	%r13, 0x30(%rsp)
    0000015e: 	cmpq	$0xf, %r13
    00000162: 	ja	.Ltmp708 # Offset: 354
    00000168: 	cmpq	$0x1, %r13
    0000016c: 	jne	.Ltmp709 # Offset: 364
    00000172: 	movzbl	(%r8), %eax
    00000176: 	movb	%al, 0x10(%rbp)
.Ltmp720:
    00000179: 	movq	%r13, 0x8(%rbp)
    0000017d: 	movb	$0x0, (%rdi,%r13)
    00000182: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	addq	$0x20, %rax
    00000194: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000019b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001a2: 	je	.Ltmp710 # Offset: 418
.Ltmp723:
    000001a8: 	movq	-0x20(%rax), %rbp
    000001ac: 	callq	clock@PLT # Offset: 428
    000001b1: 	pxor	%xmm0, %xmm0
    000001b5: 	movq	%rax, end_time(%rip)
    000001bc: 	movq	%rbp, %rdi
    000001bf: 	subq	start_time(%rip), %rax
    000001c6: 	cvtsi2sd	%rax, %xmm0
    000001cb: 	divsd	DATAat0xd498(%rip), %xmm0
    000001d3: 	callq	_Z13record_resultdPKc # Offset: 467
    000001d8: 	leaq	-0x1(%rbx), %rax
    000001dc: 	movq	%r12, %rsi
    000001df: 	testq	%rbx, %rbx
    000001e2: 	jle	.Ltmp711 # Offset: 482
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp712:
    000001f0: 	movq	(%rsi), %rsi
    000001f3: 	subq	$0x1, %rax
    000001f7: 	jae	.Ltmp712 # Offset: 503
.Ltmp721:
    000001f9: 	movq	%r15, %rdx
    000001fc: 	movq	%r12, %rdi
    000001ff: 	callq	"_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1" # Offset: 511
    00000204: 	movq	(%r12), %rax
    00000208: 	jmp	.Ltmp713 # Offset: 520
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp715:
    00000210: 	movsd	0x10(%r14), %xmm0
    00000216: 	comisd	0x10(%rax), %xmm0
    0000021b: 	movq	(%rax), %rdx
    0000021e: 	movq	(%r14), %rcx
    00000221: 	ja	.Ltmp714 # Offset: 545
    00000227: 	movq	%rcx, %r14
    0000022a: 	movq	%rdx, %rax
.Ltmp713:
    0000022d: 	cmpq	%rax, %r15
    00000230: 	jne	.Ltmp715 # Offset: 560
    00000232: 	movq	0x38(%rsp), %rax
    00000237: 	subq	%fs:0x28, %rax
    00000240: 	jne	.Ltmp716 # Offset: 576
    00000246: 	addq	$0x48, %rsp
    0000024a: 	popq	%rbx
    0000024b: 	popq	%rbp
    0000024c: 	popq	%r12
    0000024e: 	popq	%r13
    00000250: 	popq	%r14
    00000252: 	popq	%r15
    00000254: 	retq # Offset: 596
    00000255: 	nopl	(%rax) # Size: 3
.Ltmp700:
    00000258: 	subl	%r13d, %r12d
    0000025b: 	addl	0x18(%rsp), %r13d
    00000260: 	jmp	.Ltmp717 # Offset: 608
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp703:
    00000268: 	movslq	0x1c(%rsp), %rdx
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp718:
    00000270: 	movq	(%rbp), %rbp
    00000274: 	subq	$0x1, %rdx
    00000278: 	jae	.Ltmp718 # Offset: 632
    0000027a: 	jmp	.Ltmp719 # Offset: 634
    0000027f: 	nop # Size: 1
.Ltmp701:
    00000280: 	movl	0x18(%rsp), %r13d
    00000285: 	movq	%rbx, %rbp
    00000288: 	jmp	.Ltmp717 # Offset: 648
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp708:
    00000290: 	movq	%rbp, %rdi
    00000293: 	leaq	0x30(%rsp), %rsi
    00000298: 	xorl	%edx, %edx
    0000029a: 	movq	%r8, 0x8(%rsp)
    0000029f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 671
    000002a4: 	movq	0x8(%rsp), %r8
    000002a9: 	movq	%rax, (%rbp)
    000002ad: 	movq	%rax, %rdi
    000002b0: 	movq	0x30(%rsp), %rax
    000002b5: 	movq	%rax, 0x10(%rbp)
.Ltmp724:
    000002b9: 	movq	%r13, %rdx
    000002bc: 	movq	%r8, %rsi
    000002bf: 	callq	memcpy@PLT # Offset: 703
    000002c4: 	movq	0x30(%rsp), %r13
    000002c9: 	movq	(%rbp), %rdi
    000002cd: 	jmp	.Ltmp720 # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp711:
    000002d8: 	leaq	0x1(%rbx), %rax
    000002dc: 	je	.Ltmp721 # Offset: 732
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp722:
    000002e8: 	addq	$0x1, %rax
    000002ec: 	movq	0x8(%rsi), %rsi
    000002f0: 	cmpq	$0x1, %rax
    000002f4: 	jne	.Ltmp722 # Offset: 756
    000002f6: 	jmp	.Ltmp721 # Offset: 758
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp714:
    00000300: 	movq	0x38(%rsp), %rax
    00000305: 	subq	%fs:0x28, %rax
    0000030e: 	jne	.Ltmp716 # Offset: 782
    00000314: 	movq	0x20(%rsp), %rax
    00000319: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000320: 	movl	$0x1, %edi
    00000325: 	movq	(%rax), %rdx
    00000328: 	addq	$0x48, %rsp
    0000032c: 	xorl	%eax, %eax
    0000032e: 	popq	%rbx
    0000032f: 	popq	%rbp
    00000330: 	popq	%r12
    00000332: 	popq	%r13
    00000334: 	popq	%r14
    00000336: 	popq	%r15
    00000338: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 824
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp705:
    00000340: 	movq	0x20(%rsp), %rsi
    00000345: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000034c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 844
    00000351: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000358: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000035f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000366: 	jne	.Ltmp723 # Offset: 870
.Ltmp710:
    0000036c: 	movq	-0x8(%rdx), %rax
    00000370: 	addq	$0x200, %rax
    00000376: 	jmp	.Ltmp723 # Offset: 886
    0000037b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp709:
    00000380: 	testq	%r13, %r13
    00000383: 	je	.Ltmp720 # Offset: 899
    00000389: 	jmp	.Ltmp724 # Offset: 905
    0000038e: 	nop # Size: 2
.Ltmp699:
    00000390: 	xorl	%ebx, %ebx
    00000392: 	jmp	.Ltmp725 # Offset: 914
.Ltmp707:
    00000397: 	leaq	DATAat0xd158(%rip), %rdi
    0000039e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 926
.Ltmp716:
    000003a3: 	callq	__stack_chk_fail@PLT # Offset: 931
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x8e90
  Size        : 0x399
  MaxSize     : 0x3a0
  Offset      : 0x8e90
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x48, %rsp
    0000001b: 	movl	%edx, 0x8(%rsp)
    0000001f: 	movq	%rcx, 0x18(%rsp)
    00000024: 	movq	%r8, 0x28(%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x38(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movl	iterations(%rip), %ecx
    00000044: 	movl	0x8(%rsp), %r10d
    00000049: 	movl	$0x1, %edi
    0000004e: 	movq	%rax, start_time(%rip)
    00000055: 	leal	-0x2(%rcx,%r10), %eax
    0000005a: 	cltd
    0000005b: 	idivl	%ecx
    0000005d: 	testl	%eax, %eax
    0000005f: 	cmovgl	%eax, %edi
    00000062: 	movl	%edi, 0x20(%rsp)
    00000066: 	testl	%ecx, %ecx
    00000068: 	jle	.Ltmp726 # Offset: 104
    0000006e: 	leal	-0x1(%rdi), %esi
    00000071: 	movq	%rbp, %rbx
    00000074: 	xorl	%r13d, %r13d
    00000077: 	xorl	%eax, %eax
    00000079: 	movl	%esi, 0x24(%rsp)
    0000007d: 	xorl	%r12d, %r12d
.Ltmp731:
    00000080: 	cmpl	%eax, %r10d
    00000083: 	jg	.Ltmp727 # Offset: 131
    00000089: 	subl	%r10d, %eax
    0000008c: 	movl	%eax, %edx
    0000008e: 	je	.Ltmp728 # Offset: 142
    00000094: 	leal	-0x1(%rax), %eax
    00000097: 	movq	%rbp, %rbx
    0000009a: 	cltq
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp729:
    000000a0: 	movq	(%rbx), %rbx
    000000a3: 	subq	$0x1, %rax
    000000a7: 	jae	.Ltmp729 # Offset: 167
    000000a9: 	movl	0x20(%rsp), %eax
    000000ad: 	subl	%edx, %r13d
    000000b0: 	addl	%edx, %eax
.Ltmp744:
    000000b2: 	movl	%r10d, 0x14(%rsp)
    000000b7: 	movq	%r15, %rdx
    000000ba: 	movq	%rbx, %rsi
    000000bd: 	movq	%rbp, %rdi
    000000c0: 	movl	%eax, 0x8(%rsp)
    000000c4: 	movq	0x18(%rsp), %rax
    000000c9: 	callq	*%rax # Offset: 201
    000000cb: 	movl	0x14(%rsp), %r10d
    000000d0: 	testl	%r13d, %r13d
    000000d3: 	movl	0x8(%rsp), %eax
    000000d7: 	leal	(%r13,%r10), %edx
    000000dc: 	cmovsl	%edx, %r13d
    000000e0: 	movl	%r13d, %edx
    000000e3: 	subl	%r10d, %edx
    000000e6: 	cmpl	%r10d, %r13d
    000000e9: 	cmovgel	%edx, %r13d
    000000ed: 	cmpl	%eax, %r10d
    000000f0: 	jg	.Ltmp730 # Offset: 240
.Ltmp746:
    000000f6: 	addl	$0x1, %r12d
    000000fa: 	cmpl	%r12d, iterations(%rip)
    00000101: 	jg	.Ltmp731 # Offset: 257
.Ltmp752:
    00000107: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000010e: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000115: 	subq	$0x20, %rax
    00000119: 	cmpq	%rax, %rbx
    0000011c: 	je	.Ltmp732 # Offset: 284
    00000122: 	movq	0x28(%rsp), %rax
    00000127: 	leaq	0x10(%rbx), %rdi
    0000012b: 	movq	%rdi, (%rbx)
    0000012e: 	movq	(%rax), %r8
    00000131: 	movq	0x8(%rax), %r12
    00000135: 	movq	%r8, %rax
    00000138: 	addq	%r12, %rax
    0000013b: 	je	.Ltmp733 # Offset: 315
    0000013d: 	testq	%r8, %r8
    00000140: 	je	.Ltmp734 # Offset: 320
.Ltmp733:
    00000146: 	movq	%r12, 0x30(%rsp)
    0000014b: 	cmpq	$0xf, %r12
    0000014f: 	ja	.Ltmp735 # Offset: 335
    00000155: 	cmpq	$0x1, %r12
    00000159: 	jne	.Ltmp736 # Offset: 345
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	movb	%al, 0x10(%rbx)
.Ltmp747:
    00000166: 	movq	%r12, 0x8(%rbx)
    0000016a: 	movb	$0x0, (%rdi,%r12)
    0000016f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000176: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000017d: 	addq	$0x20, %rax
    00000181: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000188: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000018f: 	je	.Ltmp737 # Offset: 399
.Ltmp750:
    00000195: 	movq	-0x20(%rax), %r12
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	pxor	%xmm0, %xmm0
    000001a2: 	movq	%rax, end_time(%rip)
    000001a9: 	movq	%r12, %rdi
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	cvtsi2sd	%rax, %xmm0
    000001b8: 	divsd	DATAat0xd498(%rip), %xmm0
    000001c0: 	callq	_Z13record_resultdPKc # Offset: 448
    000001c5: 	movslq	%r13d, %rcx
    000001c8: 	movq	%rbp, %rsi
    000001cb: 	leaq	-0x1(%rcx), %rax
    000001cf: 	testq	%rcx, %rcx
    000001d2: 	jle	.Ltmp738 # Offset: 466
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp739:
    000001e0: 	movq	(%rsi), %rsi
    000001e3: 	subq	$0x1, %rax
    000001e7: 	jae	.Ltmp739 # Offset: 487
.Ltmp748:
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%rbp, %rdi
    000001ef: 	callq	"_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1" # Offset: 495
    000001f4: 	movq	(%rbp), %rax
    000001f8: 	jmp	.Ltmp740 # Offset: 504
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp742:
    00000200: 	movsd	0x10(%r14), %xmm0
    00000206: 	comisd	0x10(%rax), %xmm0
    0000020b: 	movq	(%rax), %rdx
    0000020e: 	movq	(%r14), %rcx
    00000211: 	ja	.Ltmp741 # Offset: 529
    00000217: 	movq	%rcx, %r14
    0000021a: 	movq	%rdx, %rax
.Ltmp740:
    0000021d: 	cmpq	%rax, %r15
    00000220: 	jne	.Ltmp742 # Offset: 544
    00000222: 	movq	0x38(%rsp), %rax
    00000227: 	subq	%fs:0x28, %rax
    00000230: 	jne	.Ltmp743 # Offset: 560
    00000236: 	addq	$0x48, %rsp
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	retq # Offset: 580
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp727:
    00000248: 	subl	%eax, %r13d
    0000024b: 	addl	0x20(%rsp), %eax
    0000024f: 	jmp	.Ltmp744 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp730:
    00000258: 	movslq	0x24(%rsp), %rdx
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp745:
    00000260: 	movq	(%rbx), %rbx
    00000263: 	subq	$0x1, %rdx
    00000267: 	jae	.Ltmp745 # Offset: 615
    00000269: 	jmp	.Ltmp746 # Offset: 617
    0000026e: 	nop # Size: 2
.Ltmp728:
    00000270: 	movl	0x20(%rsp), %eax
    00000274: 	movq	%rbp, %rbx
    00000277: 	jmp	.Ltmp744 # Offset: 631
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp735:
    00000280: 	movq	%rbx, %rdi
    00000283: 	leaq	0x30(%rsp), %rsi
    00000288: 	xorl	%edx, %edx
    0000028a: 	movq	%r8, 0x8(%rsp)
    0000028f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 655
    00000294: 	movq	0x8(%rsp), %r8
    00000299: 	movq	%rax, (%rbx)
    0000029c: 	movq	%rax, %rdi
    0000029f: 	movq	0x30(%rsp), %rax
    000002a4: 	movq	%rax, 0x10(%rbx)
.Ltmp751:
    000002a8: 	movq	%r12, %rdx
    000002ab: 	movq	%r8, %rsi
    000002ae: 	callq	memcpy@PLT # Offset: 686
    000002b3: 	movq	0x30(%rsp), %r12
    000002b8: 	movq	(%rbx), %rdi
    000002bb: 	jmp	.Ltmp747 # Offset: 699
.Ltmp738:
    000002c0: 	leaq	0x1(%rcx), %rax
    000002c4: 	je	.Ltmp748 # Offset: 708
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp749:
    000002d0: 	addq	$0x1, %rax
    000002d4: 	movq	0x8(%rsi), %rsi
    000002d8: 	cmpq	$0x1, %rax
    000002dc: 	jne	.Ltmp749 # Offset: 732
    000002de: 	jmp	.Ltmp748 # Offset: 734
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp741:
    000002e8: 	movq	0x38(%rsp), %rax
    000002ed: 	subq	%fs:0x28, %rax
    000002f6: 	jne	.Ltmp743 # Offset: 758
    000002fc: 	movq	0x28(%rsp), %rax
    00000301: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000308: 	movl	$0x1, %edi
    0000030d: 	movq	(%rax), %rdx
    00000310: 	addq	$0x48, %rsp
    00000314: 	xorl	%eax, %eax
    00000316: 	popq	%rbx
    00000317: 	popq	%rbp
    00000318: 	popq	%r12
    0000031a: 	popq	%r13
    0000031c: 	popq	%r14
    0000031e: 	popq	%r15
    00000320: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 800
    00000325: 	nopl	(%rax) # Size: 3
.Ltmp732:
    00000328: 	movq	0x28(%rsp), %rsi
    0000032d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000334: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 820
    00000339: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000340: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000347: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000034e: 	jne	.Ltmp750 # Offset: 846
.Ltmp737:
    00000354: 	movq	-0x8(%rdx), %rax
    00000358: 	addq	$0x200, %rax
    0000035e: 	jmp	.Ltmp750 # Offset: 862
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp736:
    00000368: 	testq	%r12, %r12
    0000036b: 	je	.Ltmp747 # Offset: 875
    00000371: 	jmp	.Ltmp751 # Offset: 881
    00000376: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp726:
    00000380: 	xorl	%r13d, %r13d
    00000383: 	jmp	.Ltmp752 # Offset: 899
.Ltmp734:
    00000388: 	leaq	DATAat0xd158(%rip), %rdi
    0000038f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 911
.Ltmp743:
    00000394: 	callq	__stack_chk_fail@PLT # Offset: 916
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_rotate_sizesISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x9230
  Size        : 0x2a8
  MaxSize     : 0x2b0
  Offset      : 0x9230
  Section     : .text
  Orc Section : .local.text._Z17test_rotate_sizesISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0xd1f8(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0xd228(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp753 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp760:
    00000098: 	movl	0x38(%rsp), %eax
    0000009c: 	movq	%r14, %r9
    0000009f: 	cltd
    000000a0: 	idivl	%ebx
    000000a2: 	movl	$0x8, %edx
    000000a7: 	cltq
    000000a9: 	imulq	0x10(%rsp), %rax
    000000af: 	cmpq	%rdx, %rax
    000000b2: 	cmovlq	%rdx, %rax
    000000b6: 	movl	$0x70000000, %edx
    000000bb: 	cmpq	%rdx, %rax
    000000be: 	cmovgq	%rdx, %rax
    000000c2: 	addq	$0x1, %rax
    000000c6: 	andq	$-0x2, %rax
    000000ca: 	movl	%eax, iterations(%rip)
    000000d0: 	leal	-0x1(%rbx), %eax
    000000d3: 	cltq
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp754:
    000000d8: 	movq	(%r9), %r9
    000000db: 	subq	$0x1, %rax
    000000df: 	jae	.Ltmp754 # Offset: 223
    000000e1: 	movq	(%rbp), %r10
    000000e5: 	movq	0x8(%rbp), %r8
    000000e9: 	movq	%r13, 0x50(%rsp)
    000000ee: 	movq	%r10, %rax
    000000f1: 	addq	%r8, %rax
    000000f4: 	je	.Ltmp755 # Offset: 244
    000000f6: 	testq	%r10, %r10
    000000f9: 	je	.Ltmp756 # Offset: 249
.Ltmp755:
    000000ff: 	movq	%r8, 0x48(%rsp)
    00000104: 	cmpq	$0xf, %r8
    00000108: 	ja	.Ltmp757 # Offset: 264
    0000010e: 	cmpq	$0x1, %r8
    00000112: 	jne	.Ltmp758 # Offset: 274
    00000118: 	movzbl	(%r10), %eax
    0000011c: 	movb	%al, 0x60(%rsp)
    00000120: 	movq	%r13, %rax
.Ltmp763:
    00000123: 	movq	%r8, 0x58(%rsp)
    00000128: 	movq	0x8(%rsp), %rcx
    0000012d: 	movl	%ebx, %edx
    0000012f: 	movq	%r9, %rsi
    00000132: 	movb	$0x0, (%rax,%r8)
    00000137: 	movq	%r14, %rdi
    0000013a: 	movq	%r15, %r8
    0000013d: 	callq	_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 317
    00000142: 	movq	0x50(%rsp), %rdi
    00000147: 	cmpq	%r13, %rdi
    0000014a: 	je	.Ltmp759 # Offset: 330
    0000014c: 	movq	0x60(%rsp), %rax
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	callq	_ZdlPvm@PLT # Offset: 341
.Ltmp759:
    0000015a: 	pxor	%xmm1, %xmm1
    0000015e: 	pxor	%xmm2, %xmm2
    00000162: 	movq	(%rbp), %rcx
    00000166: 	movl	%ebx, %r8d
    00000169: 	cvtsi2sd	%ebx, %xmm2
    0000016d: 	movq	results(%rip), %rax
    00000174: 	movl	%r12d, %edx
    00000177: 	addl	%ebx, %ebx
    00000179: 	leaq	DATAat0xd258(%rip), %rsi
    00000180: 	movl	$0x1, %edi
    00000185: 	addl	$0x1, %r12d
    00000189: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000191: 	movsd	(%rax), %xmm0
    00000195: 	movl	$0x2, %eax
    0000019a: 	mulsd	%xmm2, %xmm1
    0000019e: 	divsd	DATAat0xd498(%rip), %xmm1
    000001a6: 	divsd	%xmm0, %xmm1
    000001aa: 	callq	__printf_chk@PLT # Offset: 426
    000001af: 	movl	$0x0, current_test(%rip)
    000001b9: 	cmpl	%ebx, 0x38(%rsp)
    000001bd: 	jge	.Ltmp760 # Offset: 445
.Ltmp753:
    000001c3: 	movl	0x3c(%rsp), %eax
    000001c7: 	movl	%eax, iterations(%rip)
    000001cd: 	movq	0x78(%rsp), %rax
    000001d2: 	subq	%fs:0x28, %rax
    000001db: 	jne	.Ltmp761 # Offset: 475
    000001e1: 	addq	$0x88, %rsp
    000001e8: 	popq	%rbx
    000001e9: 	popq	%rbp
    000001ea: 	popq	%r12
    000001ec: 	popq	%r13
    000001ee: 	popq	%r14
    000001f0: 	popq	%r15
    000001f2: 	retq # Offset: 498
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp758:
    000001f8: 	testq	%r8, %r8
    000001fb: 	jne	.Ltmp762 # Offset: 507
    000001fd: 	movq	%r13, %rax
    00000200: 	jmp	.Ltmp763 # Offset: 512
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp757:
    00000208: 	movq	0x30(%rsp), %rsi
    0000020d: 	movq	%r15, %rdi
    00000210: 	xorl	%edx, %edx
    00000212: 	movq	%r9, 0x28(%rsp)
    00000217: 	movq	%r8, 0x20(%rsp)
    0000021c: 	movq	%r10, 0x18(%rsp)
    00000221: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 545
    00000226: 	movq	0x18(%rsp), %r10
    0000022b: 	movq	0x20(%rsp), %r8
    00000230: 	movq	%rax, 0x50(%rsp)
    00000235: 	movq	%rax, %rdi
    00000238: 	movq	0x48(%rsp), %rax
    0000023d: 	movq	0x28(%rsp), %r9
    00000242: 	movq	%rax, 0x60(%rsp)
.Ltmp764:
    00000247: 	movq	%r8, %rdx
    0000024a: 	movq	%r10, %rsi
    0000024d: 	movq	%r9, 0x18(%rsp)
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	0x48(%rsp), %r8
    0000025c: 	movq	0x50(%rsp), %rax
    00000261: 	movq	0x18(%rsp), %r9
    00000266: 	jmp	.Ltmp763 # Offset: 614
.Ltmp756:
    0000026b: 	leaq	DATAat0xd158(%rip), %rdi
    00000272: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 626
.Ltmp762:
    00000277: 	movq	%r13, %rdi
    0000027a: 	jmp	.Ltmp764 # Offset: 634
.Ltmp761:
    0000027c: 	callq	__stack_chk_fail@PLT # Offset: 636
    00000281: 	endbr64
    00000285: 	movq	%rax, %rbp
    00000288: 	movq	0x50(%rsp), %rdi
    0000028d: 	cmpq	%r13, %rdi
    00000290: 	je	.Ltmp765 # Offset: 656
    00000292: 	movq	0x60(%rsp), %rax
    00000297: 	leaq	0x1(%rax), %rsi
    0000029b: 	callq	_ZdlPvm@PLT # Offset: 667
.Ltmp765:
    000002a0: 	movq	%rbp, %rdi
    000002a3: 	callq	_Unwind_Resume@PLT # Offset: 675
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_rotate_sizesISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/rotate_sequence.cpp/1
  Number      : 90
  State       : disassembled
  Address     : 0x94e0
  Size        : 0x3a8
  MaxSize     : 0x3b0
  Offset      : 0x94e0
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%edx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x48, %rsp
    00000019: 	movq	%rcx, 0x20(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x38(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movl	iterations(%rip), %edi
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	leal	-0x2(%rdi,%rbp), %eax
    00000044: 	movl	%edi, 0x14(%rsp)
    00000048: 	cltd
    00000049: 	idivl	%edi
    0000004b: 	movl	$0x1, %edx
    00000050: 	testl	%eax, %eax
    00000052: 	cmovgl	%eax, %edx
    00000055: 	movl	%edx, 0x18(%rsp)
    00000059: 	testl	%edi, %edi
    0000005b: 	jle	.Ltmp766 # Offset: 91
    00000061: 	movl	%edx, %eax
    00000063: 	movq	%r12, %rsi
    00000066: 	xorl	%ebx, %ebx
    00000068: 	xorl	%r11d, %r11d
    0000006b: 	subl	$0x1, %eax
    0000006e: 	movq	%r12, 0x28(%rsp)
    00000073: 	xorl	%r13d, %r13d
    00000076: 	movl	%ebx, %r12d
    00000079: 	movl	%eax, 0x1c(%rsp)
    0000007d: 	movl	%r11d, %r14d
    00000080: 	movq	%rsi, %rbx
    00000083: 	movq	%r15, 0x8(%rsp)
    00000088: 	movl	%ebp, %r15d
    0000008b: 	movq	%rsi, %rbp
    0000008e: 	nop # Size: 2
.Ltmp771:
    00000090: 	cmpl	%r13d, %r15d
    00000093: 	jg	.Ltmp767 # Offset: 147
    00000099: 	movl	%r13d, %r9d
    0000009c: 	subl	%r15d, %r9d
    0000009f: 	je	.Ltmp768 # Offset: 159
    000000a5: 	leal	-0x1(%r9), %edx
    000000a9: 	movq	%rbx, %rbp
    000000ac: 	movslq	%edx, %rdx
    000000af: 	nop # Size: 1
.Ltmp769:
    000000b0: 	movq	(%rbp), %rbp
    000000b4: 	subq	$0x1, %rdx
    000000b8: 	jae	.Ltmp769 # Offset: 184
    000000ba: 	movl	0x18(%rsp), %eax
    000000be: 	subl	%r9d, %r12d
    000000c1: 	leal	(%rax,%r9), %r13d
.Ltmp784:
    000000c5: 	movq	0x8(%rsp), %rdx
    000000ca: 	xorl	%r8d, %r8d
    000000cd: 	xorl	%ecx, %ecx
    000000cf: 	movq	%rbp, %rsi
    000000d2: 	movq	%rbx, %rdi
    000000d5: 	callq	_Z26gries_mills_rotate_countedISt14_List_iteratorIdEEvT_S2_S2_mm # Offset: 213
    000000da: 	testl	%r12d, %r12d
    000000dd: 	leal	(%r12,%r15), %edx
    000000e1: 	cmovsl	%edx, %r12d
    000000e5: 	movl	%r12d, %edx
    000000e8: 	subl	%r15d, %edx
    000000eb: 	cmpl	%r12d, %r15d
    000000ee: 	cmovlel	%edx, %r12d
    000000f2: 	cmpl	%r13d, %r15d
    000000f5: 	jg	.Ltmp770 # Offset: 245
.Ltmp786:
    000000fb: 	addl	$0x1, %r14d
    000000ff: 	cmpl	%r14d, 0x14(%rsp)
    00000104: 	jne	.Ltmp771 # Offset: 260
    00000106: 	movq	%rbx, %rax
    00000109: 	movq	0x28(%rsp), %r14
    0000010e: 	movq	0x8(%rsp), %r15
    00000113: 	movslq	%r12d, %rbx
    00000116: 	movq	%rax, %r12
.Ltmp792:
    00000119: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000120: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000127: 	subq	$0x20, %rax
    0000012b: 	cmpq	%rax, %rbp
    0000012e: 	je	.Ltmp772 # Offset: 302
    00000134: 	movq	0x20(%rsp), %rax
    00000139: 	leaq	0x10(%rbp), %rdi
    0000013d: 	movq	%rdi, (%rbp)
    00000141: 	movq	(%rax), %r8
    00000144: 	movq	0x8(%rax), %r13
    00000148: 	movq	%r8, %rax
    0000014b: 	addq	%r13, %rax
    0000014e: 	je	.Ltmp773 # Offset: 334
    00000150: 	testq	%r8, %r8
    00000153: 	je	.Ltmp774 # Offset: 339
.Ltmp773:
    00000159: 	movq	%r13, 0x30(%rsp)
    0000015e: 	cmpq	$0xf, %r13
    00000162: 	ja	.Ltmp775 # Offset: 354
    00000168: 	cmpq	$0x1, %r13
    0000016c: 	jne	.Ltmp776 # Offset: 364
    00000172: 	movzbl	(%r8), %eax
    00000176: 	movb	%al, 0x10(%rbp)
.Ltmp787:
    00000179: 	movq	%r13, 0x8(%rbp)
    0000017d: 	movb	$0x0, (%rdi,%r13)
    00000182: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	addq	$0x20, %rax
    00000194: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000019b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001a2: 	je	.Ltmp777 # Offset: 418
.Ltmp790:
    000001a8: 	movq	-0x20(%rax), %rbp
    000001ac: 	callq	clock@PLT # Offset: 428
    000001b1: 	pxor	%xmm0, %xmm0
    000001b5: 	movq	%rax, end_time(%rip)
    000001bc: 	movq	%rbp, %rdi
    000001bf: 	subq	start_time(%rip), %rax
    000001c6: 	cvtsi2sd	%rax, %xmm0
    000001cb: 	divsd	DATAat0xd498(%rip), %xmm0
    000001d3: 	callq	_Z13record_resultdPKc # Offset: 467
    000001d8: 	leaq	-0x1(%rbx), %rax
    000001dc: 	movq	%r12, %rsi
    000001df: 	testq	%rbx, %rbx
    000001e2: 	jle	.Ltmp778 # Offset: 482
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp779:
    000001f0: 	movq	(%rsi), %rsi
    000001f3: 	subq	$0x1, %rax
    000001f7: 	jae	.Ltmp779 # Offset: 503
.Ltmp788:
    000001f9: 	movq	%r15, %rdx
    000001fc: 	movq	%r12, %rdi
    000001ff: 	callq	"_ZNSt3_V28__rotateISt14_List_iteratorIdEEET_S3_S3_S3_St26bidirectional_iterator_tag.isra.0/1" # Offset: 511
    00000204: 	movq	(%r12), %rax
    00000208: 	jmp	.Ltmp780 # Offset: 520
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp782:
    00000210: 	movsd	0x10(%r14), %xmm0
    00000216: 	comisd	0x10(%rax), %xmm0
    0000021b: 	movq	(%rax), %rdx
    0000021e: 	movq	(%r14), %rcx
    00000221: 	ja	.Ltmp781 # Offset: 545
    00000227: 	movq	%rcx, %r14
    0000022a: 	movq	%rdx, %rax
.Ltmp780:
    0000022d: 	cmpq	%rax, %r15
    00000230: 	jne	.Ltmp782 # Offset: 560
    00000232: 	movq	0x38(%rsp), %rax
    00000237: 	subq	%fs:0x28, %rax
    00000240: 	jne	.Ltmp783 # Offset: 576
    00000246: 	addq	$0x48, %rsp
    0000024a: 	popq	%rbx
    0000024b: 	popq	%rbp
    0000024c: 	popq	%r12
    0000024e: 	popq	%r13
    00000250: 	popq	%r14
    00000252: 	popq	%r15
    00000254: 	retq # Offset: 596
    00000255: 	nopl	(%rax) # Size: 3
.Ltmp767:
    00000258: 	subl	%r13d, %r12d
    0000025b: 	addl	0x18(%rsp), %r13d
    00000260: 	jmp	.Ltmp784 # Offset: 608
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp770:
    00000268: 	movslq	0x1c(%rsp), %rdx
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp785:
    00000270: 	movq	(%rbp), %rbp
    00000274: 	subq	$0x1, %rdx
    00000278: 	jae	.Ltmp785 # Offset: 632
    0000027a: 	jmp	.Ltmp786 # Offset: 634
    0000027f: 	nop # Size: 1
.Ltmp768:
    00000280: 	movl	0x18(%rsp), %r13d
    00000285: 	movq	%rbx, %rbp
    00000288: 	jmp	.Ltmp784 # Offset: 648
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp775:
    00000290: 	movq	%rbp, %rdi
    00000293: 	leaq	0x30(%rsp), %rsi
    00000298: 	xorl	%edx, %edx
    0000029a: 	movq	%r8, 0x8(%rsp)
    0000029f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 671
    000002a4: 	movq	0x8(%rsp), %r8
    000002a9: 	movq	%rax, (%rbp)
    000002ad: 	movq	%rax, %rdi
    000002b0: 	movq	0x30(%rsp), %rax
    000002b5: 	movq	%rax, 0x10(%rbp)
.Ltmp791:
    000002b9: 	movq	%r13, %rdx
    000002bc: 	movq	%r8, %rsi
    000002bf: 	callq	memcpy@PLT # Offset: 703
    000002c4: 	movq	0x30(%rsp), %r13
    000002c9: 	movq	(%rbp), %rdi
    000002cd: 	jmp	.Ltmp787 # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp778:
    000002d8: 	leaq	0x1(%rbx), %rax
    000002dc: 	je	.Ltmp788 # Offset: 732
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp789:
    000002e8: 	addq	$0x1, %rax
    000002ec: 	movq	0x8(%rsi), %rsi
    000002f0: 	cmpq	$0x1, %rax
    000002f4: 	jne	.Ltmp789 # Offset: 756
    000002f6: 	jmp	.Ltmp788 # Offset: 758
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp781:
    00000300: 	movq	0x38(%rsp), %rax
    00000305: 	subq	%fs:0x28, %rax
    0000030e: 	jne	.Ltmp783 # Offset: 782
    00000314: 	movq	0x20(%rsp), %rax
    00000319: 	leaq	DATAat0xd1e8(%rip), %rsi
    00000320: 	movl	$0x1, %edi
    00000325: 	movq	(%rax), %rdx
    00000328: 	addq	$0x48, %rsp
    0000032c: 	xorl	%eax, %eax
    0000032e: 	popq	%rbx
    0000032f: 	popq	%rbp
    00000330: 	popq	%r12
    00000332: 	popq	%r13
    00000334: 	popq	%r14
    00000336: 	popq	%r15
    00000338: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 824
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp772:
    00000340: 	movq	0x20(%rsp), %rsi
    00000345: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000034c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 844
    00000351: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000358: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000035f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000366: 	jne	.Ltmp790 # Offset: 870
.Ltmp777:
    0000036c: 	movq	-0x8(%rdx), %rax
    00000370: 	addq	$0x200, %rax
    00000376: 	jmp	.Ltmp790 # Offset: 886
    0000037b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp776:
    00000380: 	testq	%r13, %r13
    00000383: 	je	.Ltmp787 # Offset: 899
    00000389: 	jmp	.Ltmp791 # Offset: 905
    0000038e: 	nop # Size: 2
.Ltmp766:
    00000390: 	xorl	%ebx, %ebx
    00000392: 	jmp	.Ltmp792 # Offset: 914
.Ltmp774:
    00000397: 	leaq	DATAat0xd158(%rip), %rdi
    0000039e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 926
.Ltmp783:
    000003a3: 	callq	__stack_chk_fail@PLT # Offset: 931
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/rotate_sequence.cpp/1
  Number      : 91
  State       : disassembled
  Address     : 0x9890
  Size        : 0x449
  MaxSize     : 0x450
  Offset      : 0x9890
  Section     : .text
  Orc Section : .local.text._Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	pushq	%r15
    00000002: 	movl	%edx, %r15d
    00000005: 	pushq	%r14
    00000007: 	movq	%rdi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rcx, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0x28, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x18(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r10d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	leal	-0x2(%r10,%r15), %eax
    00000045: 	cltd
    00000046: 	idivl	%r10d
    00000049: 	movl	$0x1, %edx
    0000004e: 	testl	%eax, %eax
    00000050: 	cmovlel	%edx, %eax
    00000053: 	testl	%r10d, %r10d
    00000056: 	jle	.Ltmp793 # Offset: 86
    0000005c: 	movq	%r13, %rdi
    0000005f: 	xorl	%r9d, %r9d
    00000062: 	xorl	%r12d, %r12d
    00000065: 	xorl	%r8d, %r8d
    00000068: 	leal	-0x1(%rax), %r11d
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp802:
    00000070: 	cmpl	%r8d, %r15d
    00000073: 	jle	.Ltmp794 # Offset: 115
.Ltmp819:
    00000079: 	subl	%r8d, %r12d
    0000007c: 	addl	%eax, %r8d
    0000007f: 	cmpq	%rbx, %rdi
    00000082: 	je	.Ltmp795 # Offset: 130
    00000084: 	cmpq	%r13, %rdi
    00000087: 	je	.Ltmp795 # Offset: 135
    00000089: 	movq	%rdi, %rsi
    0000008c: 	movq	%rdi, %rcx
    0000008f: 	movq	%r13, %rdx
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp797:
    00000098: 	movsd	0x8(%rsi), %xmm1
    0000009d: 	movsd	0x8(%rdx), %xmm0
    000000a2: 	movsd	%xmm1, 0x8(%rdx)
    000000a7: 	movq	(%rdx), %rdx
    000000aa: 	movsd	%xmm0, 0x8(%rsi)
    000000af: 	movq	(%rsi), %rsi
    000000b2: 	cmpq	%rcx, %rdx
    000000b5: 	je	.Ltmp796 # Offset: 181
    000000bb: 	cmpq	%rbx, %rsi
    000000be: 	jne	.Ltmp797 # Offset: 190
.Ltmp798:
    000000c0: 	cmpq	%rcx, %rbx
    000000c3: 	je	.Ltmp795 # Offset: 195
.Ltmp800:
    000000c5: 	movq	%rcx, %rsi
.Ltmp799:
    000000c8: 	movsd	0x8(%rcx), %xmm1
    000000cd: 	movsd	0x8(%rdx), %xmm0
    000000d2: 	movsd	%xmm1, 0x8(%rdx)
    000000d7: 	movq	(%rdx), %rdx
    000000da: 	movsd	%xmm0, 0x8(%rcx)
    000000df: 	movq	(%rcx), %rcx
    000000e2: 	cmpq	%rsi, %rdx
    000000e5: 	je	.Ltmp798 # Offset: 229
    000000e7: 	cmpq	%rbx, %rcx
    000000ea: 	jne	.Ltmp799 # Offset: 234
    000000ec: 	movq	%rsi, %rcx
    000000ef: 	cmpq	%rcx, %rbx
    000000f2: 	jne	.Ltmp800 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp795:
    000000f8: 	testl	%r12d, %r12d
    000000fb: 	leal	(%r12,%r15), %edx
    000000ff: 	cmovsl	%edx, %r12d
    00000103: 	movl	%r12d, %edx
    00000106: 	subl	%r15d, %edx
    00000109: 	cmpl	%r12d, %r15d
    0000010c: 	cmovlel	%edx, %r12d
    00000110: 	cmpl	%r8d, %r15d
    00000113: 	jg	.Ltmp801 # Offset: 275
.Ltmp816:
    00000119: 	addl	$0x1, %r9d
    0000011d: 	cmpl	%r9d, %r10d
    00000120: 	jne	.Ltmp802 # Offset: 288
.Ltmp829:
    00000126: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000012d: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    00000134: 	subq	$0x20, %rax
    00000138: 	cmpq	%rax, %rcx
    0000013b: 	je	.Ltmp803 # Offset: 315
    00000141: 	leaq	0x10(%rcx), %rdi
    00000145: 	movq	0x8(%rbp), %r15
    00000149: 	movq	%rdi, (%rcx)
    0000014c: 	movq	(%rbp), %r8
    00000150: 	movq	%r8, %rax
    00000153: 	addq	%r15, %rax
    00000156: 	je	.Ltmp804 # Offset: 342
    00000158: 	testq	%r8, %r8
    0000015b: 	je	.Ltmp805 # Offset: 347
.Ltmp804:
    00000161: 	movq	%r15, 0x10(%rsp)
    00000166: 	cmpq	$0xf, %r15
    0000016a: 	ja	.Ltmp806 # Offset: 362
    00000170: 	cmpq	$0x1, %r15
    00000174: 	jne	.Ltmp807 # Offset: 372
    0000017a: 	movzbl	(%r8), %eax
    0000017e: 	movb	%al, 0x10(%rcx)
.Ltmp820:
    00000181: 	movq	%r15, 0x8(%rcx)
    00000185: 	movb	$0x0, (%rdi,%r15)
    0000018a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000191: 	addq	$0x20, %rax
    00000195: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp827:
    0000019c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001aa: 	je	.Ltmp808 # Offset: 426
.Ltmp826:
    000001b0: 	movq	-0x20(%rax), %r15
    000001b4: 	movslq	%r12d, %r12
    000001b7: 	callq	clock@PLT # Offset: 439
    000001bc: 	pxor	%xmm0, %xmm0
    000001c0: 	movq	%rax, end_time(%rip)
    000001c7: 	movq	%r15, %rdi
    000001ca: 	subq	start_time(%rip), %rax
    000001d1: 	cvtsi2sd	%rax, %xmm0
    000001d6: 	divsd	DATAat0xd498(%rip), %xmm0
    000001de: 	callq	_Z13record_resultdPKc # Offset: 478
    000001e3: 	leaq	-0x1(%r12), %rax
    000001e8: 	testq	%r12, %r12
    000001eb: 	je	.Ltmp809 # Offset: 491
    000001f1: 	movq	%r13, %rdx
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp810:
    000001f8: 	movq	(%rdx), %rdx
    000001fb: 	subq	$0x1, %rax
    000001ff: 	jae	.Ltmp810 # Offset: 511
    00000201: 	cmpq	%rbx, %rdx
    00000204: 	je	.Ltmp809 # Offset: 516
    0000020a: 	cmpq	%r13, %rdx
    0000020d: 	je	.Ltmp809 # Offset: 525
    00000213: 	movq	%rdx, %rcx
    00000216: 	movq	%r13, %rax
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp812:
    00000220: 	movsd	0x8(%rdx), %xmm1
    00000225: 	movsd	0x8(%rax), %xmm0
    0000022a: 	movsd	%xmm1, 0x8(%rax)
    0000022f: 	movq	(%rax), %rax
    00000232: 	movsd	%xmm0, 0x8(%rdx)
    00000237: 	movq	(%rdx), %rdx
    0000023a: 	cmpq	%rcx, %rax
    0000023d: 	je	.Ltmp811 # Offset: 573
    00000243: 	cmpq	%rbx, %rdx
    00000246: 	jne	.Ltmp812 # Offset: 582
    00000248: 	cmpq	%rcx, %rbx
    0000024b: 	je	.Ltmp809 # Offset: 587
    00000251: 	movq	%rcx, %rdx
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp814:
    00000258: 	movsd	0x8(%rcx), %xmm1
    0000025d: 	movsd	0x8(%rax), %xmm0
    00000262: 	movsd	%xmm1, 0x8(%rax)
    00000267: 	movq	(%rax), %rax
    0000026a: 	movsd	%xmm0, 0x8(%rcx)
    0000026f: 	movq	(%rcx), %rcx
    00000272: 	cmpq	%rdx, %rax
    00000275: 	je	.Ltmp813 # Offset: 629
    0000027b: 	cmpq	%rbx, %rcx
    0000027e: 	jne	.Ltmp814 # Offset: 638
    00000280: 	cmpq	%rbx, %rdx
    00000283: 	je	.Ltmp809 # Offset: 643
.Ltmp821:
    00000289: 	movq	%rdx, %rcx
    0000028c: 	jmp	.Ltmp814 # Offset: 652
    0000028e: 	nop # Size: 2
.Ltmp796:
    00000290: 	cmpq	%rbx, %rsi
    00000293: 	je	.Ltmp795 # Offset: 659
    00000299: 	movq	%rsi, %rcx
    0000029c: 	jmp	.Ltmp797 # Offset: 668
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp801:
    000002a8: 	movslq	%r11d, %rdx
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp815:
    000002b0: 	movq	(%rdi), %rdi
    000002b3: 	subq	$0x1, %rdx
    000002b7: 	jae	.Ltmp815 # Offset: 695
    000002b9: 	jmp	.Ltmp816 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp794:
    000002c0: 	subl	%r15d, %r8d
    000002c3: 	leal	-0x1(%r8), %edx
    000002c7: 	movslq	%edx, %rdx
    000002ca: 	je	.Ltmp817 # Offset: 714
    000002d0: 	movq	%r13, %rdi
    000002d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp818:
    000002d8: 	movq	(%rdi), %rdi
    000002db: 	subq	$0x1, %rdx
    000002df: 	jae	.Ltmp818 # Offset: 735
    000002e1: 	jmp	.Ltmp819 # Offset: 737
.Ltmp806:
    000002e6: 	movq	%rcx, %rdi
    000002e9: 	leaq	0x10(%rsp), %rsi
    000002ee: 	xorl	%edx, %edx
    000002f0: 	movq	%r8, 0x8(%rsp)
    000002f5: 	movq	%rcx, (%rsp)
    000002f9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 761
    000002fe: 	movq	(%rsp), %rcx
    00000302: 	movq	0x8(%rsp), %r8
    00000307: 	movq	%rax, %rdi
    0000030a: 	movq	%rax, (%rcx)
    0000030d: 	movq	0x10(%rsp), %rax
    00000312: 	movq	%rax, 0x10(%rcx)
.Ltmp828:
    00000316: 	movq	%r15, %rdx
    00000319: 	movq	%r8, %rsi
    0000031c: 	movq	%rcx, (%rsp)
    00000320: 	callq	memcpy@PLT # Offset: 800
    00000325: 	movq	(%rsp), %rcx
    00000329: 	movq	0x10(%rsp), %r15
    0000032e: 	movq	(%rcx), %rdi
    00000331: 	jmp	.Ltmp820 # Offset: 817
    00000336: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp811:
    00000340: 	cmpq	%rbx, %rdx
    00000343: 	je	.Ltmp809 # Offset: 835
    00000345: 	movq	%rdx, %rcx
    00000348: 	jmp	.Ltmp812 # Offset: 840
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp813:
    00000350: 	movq	%rcx, %rdx
    00000353: 	cmpq	%rbx, %rdx
    00000356: 	jne	.Ltmp821 # Offset: 854
.Ltmp809:
    0000035c: 	movq	(%r13), %rax
    00000360: 	jmp	.Ltmp822 # Offset: 864
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp824:
    00000368: 	movsd	0x8(%r14), %xmm0
    0000036e: 	comisd	0x8(%rax), %xmm0
    00000373: 	movq	(%rax), %rdx
    00000376: 	movq	(%r14), %rcx
    00000379: 	ja	.Ltmp823 # Offset: 889
    0000037b: 	movq	%rcx, %r14
    0000037e: 	movq	%rdx, %rax
.Ltmp822:
    00000381: 	cmpq	%rbx, %rax
    00000384: 	jne	.Ltmp824 # Offset: 900
    00000386: 	movq	0x18(%rsp), %rax
    0000038b: 	subq	%fs:0x28, %rax
    00000394: 	jne	.Ltmp825 # Offset: 916
    0000039a: 	addq	$0x28, %rsp
    0000039e: 	popq	%rbx
    0000039f: 	popq	%rbp
    000003a0: 	popq	%r12
    000003a2: 	popq	%r13
    000003a4: 	popq	%r14
    000003a6: 	popq	%r15
    000003a8: 	retq # Offset: 936
    000003a9: 	nopl	(%rax) # Size: 7
.Ltmp823:
    000003b0: 	movq	0x18(%rsp), %rax
    000003b5: 	subq	%fs:0x28, %rax
    000003be: 	jne	.Ltmp825 # Offset: 958
    000003c0: 	movq	(%rbp), %rdx
    000003c4: 	addq	$0x28, %rsp
    000003c8: 	leaq	DATAat0xd1e8(%rip), %rsi
    000003cf: 	xorl	%eax, %eax
    000003d1: 	popq	%rbx
    000003d2: 	movl	$0x1, %edi
    000003d7: 	popq	%rbp
    000003d8: 	popq	%r12
    000003da: 	popq	%r13
    000003dc: 	popq	%r14
    000003de: 	popq	%r15
    000003e0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 992
.Ltmp808:
    000003e5: 	movq	-0x8(%rdx), %rax
    000003e9: 	addq	$0x200, %rax
    000003ef: 	jmp	.Ltmp826 # Offset: 1007
.Ltmp803:
    000003f4: 	movq	%rbp, %rsi
    000003f7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003fe: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1022
    00000403: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000040a: 	jmp	.Ltmp827 # Offset: 1034
.Ltmp817:
    0000040f: 	movl	%eax, %r8d
    00000412: 	movq	%r13, %rdi
    00000415: 	jmp	.Ltmp795 # Offset: 1045
.Ltmp807:
    0000041a: 	testq	%r15, %r15
    0000041d: 	je	.Ltmp820 # Offset: 1053
    00000423: 	jmp	.Ltmp828 # Offset: 1059
    00000428: 	nopl	(%rax,%rax) # Size: 8
.Ltmp793:
    00000430: 	xorl	%r12d, %r12d
    00000433: 	jmp	.Ltmp829 # Offset: 1075
.Ltmp825:
    00000438: 	callq	__stack_chk_fail@PLT # Offset: 1080
.Ltmp805:
    0000043d: 	leaq	DATAat0xd158(%rip), %rdi
    00000444: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1092
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x9ce0
  Size        : 0x2f90
  MaxSize     : 0x2f90
  Offset      : 0x9ce0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x168, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    0000001d: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x158(%rsp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000043: 	movl	$0x62756f64, 0xe0(%rsp)
    0000004e: 	movhlps	%xmm3, %xmm7
    00000051: 	movaps	%xmm4, 0x20(%rsp)
    00000056: 	movq	%xmm4, %rbp
    0000005b: 	movq	%xmm7, %rcx
    00000060: 	movb	$0x0, 0xe6(%rsp)
    00000068: 	leaq	0x8(%rcx), %r12
    0000006c: 	movaps	%xmm3, 0x30(%rsp)
    00000071: 	movq	$0x6, 0xd8(%rsp)
    0000007d: 	movq	%xmm7, 0x40(%rsp)
    00000083: 	movl	%eax, 0x70(%rsp)
    00000087: 	leaq	0xe0(%rsp), %rax
    0000008f: 	movq	%rax, 0x68(%rsp)
    00000094: 	movq	%rax, 0xd0(%rsp)
    0000009c: 	movl	$0x656c, %eax
    000000a1: 	movw	%ax, 0xe4(%rsp)
    000000a9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000b0: 	movq	%xmm3, 0x10(%rsp)
    000000b6: 	movq	%rax, 0x8(%rsp)
    000000bb: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000c2: 	movq	%rax, 0x18(%rsp)
    000000c7: 	cmpq	%r12, %rax
    000000ca: 	jbe	.Ltmp830 # Offset: 202
    000000cc: 	movq	%r12, %r13
    000000cf: 	movq	%rax, %r15
    000000d2: 	movq	%xmm4, 0x48(%rsp)
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp833:
    000000e0: 	movq	(%r13), %rbp
    000000e4: 	leaq	0x200(%rbp), %rbx
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp832:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rdx
    000000f8: 	cmpq	%rdx, %rdi
    000000fb: 	je	.Ltmp831 # Offset: 251
    00000101: 	movq	0x10(%rbp), %rax
    00000105: 	addq	$0x20, %rbp
    00000109: 	leaq	0x1(%rax), %rsi
    0000010d: 	callq	_ZdlPvm@PLT # Offset: 269
    00000112: 	cmpq	%rbx, %rbp
    00000115: 	jne	.Ltmp832 # Offset: 277
    00000117: 	addq	$0x8, %r13
    0000011b: 	cmpq	%r13, %r15
    0000011e: 	ja	.Ltmp833 # Offset: 286
.Ltmp875:
    00000120: 	movq	0x48(%rsp), %rbp
.Ltmp830:
    00000125: 	movq	0x40(%rsp), %rcx
    0000012a: 	cmpq	%rcx, 0x18(%rsp)
    0000012f: 	jne	.Ltmp834 # Offset: 303
    00000131: 	jmp	.Ltmp835 # Offset: 305
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp837:
    00000140: 	movq	0x10(%rbp), %rax
    00000144: 	addq	$0x20, %rbp
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
.Ltmp834:
    00000151: 	cmpq	%rbp, 0x10(%rsp)
    00000156: 	je	.Ltmp836 # Offset: 342
.Ltmp838:
    00000158: 	movq	(%rbp), %rdi
    0000015c: 	leaq	0x10(%rbp), %rax
    00000160: 	cmpq	%rax, %rdi
    00000163: 	jne	.Ltmp837 # Offset: 355
    00000165: 	addq	$0x20, %rbp
    00000169: 	cmpq	0x10(%rsp), %rbp
    0000016e: 	jne	.Ltmp838 # Offset: 366
    00000170: 	cmpq	%r14, 0x8(%rsp)
    00000175: 	je	.Ltmp839 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp841:
    00000180: 	movq	(%r14), %rdi
    00000183: 	leaq	0x10(%r14), %rax
    00000187: 	cmpq	%rax, %rdi
    0000018a: 	je	.Ltmp840 # Offset: 394
    0000018c: 	movq	0x10(%r14), %rax
    00000190: 	leaq	0x1(%rax), %rsi
    00000194: 	callq	_ZdlPvm@PLT # Offset: 404
.Ltmp840:
    00000199: 	addq	$0x20, %r14
.Ltmp836:
    0000019d: 	cmpq	%r14, 0x8(%rsp)
    000001a2: 	jne	.Ltmp841 # Offset: 418
.Ltmp839:
    000001a4: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001ab: 	leaq	0x8(%rax), %rbx
    000001af: 	cmpq	%r12, %rbx
    000001b2: 	jbe	.Ltmp842 # Offset: 434
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp843:
    000001b8: 	movq	(%r12), %rdi
    000001bc: 	movl	$0x200, %esi
    000001c1: 	addq	$0x8, %r12
    000001c5: 	callq	_ZdlPvm@PLT # Offset: 453
    000001ca: 	cmpq	%r12, %rbx
    000001cd: 	ja	.Ltmp843 # Offset: 461
.Ltmp842:
    000001cf: 	movdqa	0x20(%rsp), %xmm5
    000001d5: 	movdqa	0x30(%rsp), %xmm6
    000001db: 	movl	$0x4000000, %edi
    000001e0: 	movaps	%xmm5, "_ZL7gLabels/1"+48(%rip)
    000001e7: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000001ee: 	callq	_Znam@PLT # Offset: 494
    000001f3: 	movslq	init_value(%rip), %rsi
    000001fa: 	movq	%rax, %rdx
    000001fd: 	movq	%rax, 0x48(%rsp)
    00000202: 	leaq	0x4000000(%rdx), %r12
    00000209: 	leaq	0x800000(%rsi), %rax
    00000210: 	jmp	.Ltmp844 # Offset: 528
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp846:
    00000218: 	pxor	%xmm0, %xmm0
    0000021c: 	cvtsi2sd	%rax, %xmm0
    00000221: 	movsd	%xmm0, -0x8(%rdx)
    00000226: 	cmpq	%rax, %rsi
    00000229: 	je	.Ltmp845 # Offset: 553
.Ltmp844:
    0000022b: 	addq	$0x8, %rdx
    0000022f: 	subq	$0x1, %rax
    00000233: 	jns	.Ltmp846 # Offset: 563
    00000235: 	movq	%rax, %rcx
    00000238: 	movq	%rax, %rdi
    0000023b: 	pxor	%xmm0, %xmm0
    0000023f: 	shrq	%rcx
    00000242: 	andl	$0x1, %edi
    00000245: 	orq	%rdi, %rcx
    00000248: 	cvtsi2sd	%rcx, %xmm0
    0000024d: 	addsd	%xmm0, %xmm0
    00000251: 	movsd	%xmm0, -0x8(%rdx)
    00000256: 	cmpq	%rax, %rsi
    00000259: 	jne	.Ltmp844 # Offset: 601
.Ltmp845:
    0000025b: 	movq	0x48(%rsp), %r14
    00000260: 	movl	$0x2e, %edx
    00000265: 	movq	%r12, %rsi
    00000268: 	movl	$0x8, %ebp
    0000026d: 	movq	%r14, %rdi
    00000270: 	leaq	0x80(%r14), %rbx
    00000277: 	leaq	0x8(%r14), %r13
    0000027b: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 635
    00000280: 	jmp	.Ltmp847 # Offset: 640
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp850:
    00000288: 	cmpq	%r13, %r14
    0000028b: 	je	.Ltmp848 # Offset: 651
    0000028d: 	movq	%r13, %rdx
    00000290: 	leaq	(%r14,%rbp), %rdi
    00000294: 	movq	%r14, %rsi
    00000297: 	movsd	%xmm1, 0x8(%rsp)
    0000029d: 	subq	%r14, %rdx
    000002a0: 	callq	memmove@PLT # Offset: 672
    000002a5: 	movsd	0x8(%rsp), %xmm1
.Ltmp848:
    000002ab: 	addq	$0x8, %r13
    000002af: 	movsd	%xmm1, (%r14)
    000002b4: 	cmpq	%r13, %rbx
    000002b7: 	je	.Ltmp849 # Offset: 695
.Ltmp847:
    000002b9: 	movsd	(%r13), %xmm1
    000002bf: 	movsd	(%r14), %xmm0
    000002c4: 	comisd	%xmm1, %xmm0
    000002c8: 	ja	.Ltmp850 # Offset: 712
    000002ca: 	movsd	-0x8(%r13), %xmm0
    000002d0: 	leaq	-0x8(%r13), %rax
    000002d4: 	comisd	%xmm1, %xmm0
    000002d8: 	jbe	.Ltmp851 # Offset: 728
    000002de: 	nop # Size: 2
.Ltmp852:
    000002e0: 	movsd	%xmm0, 0x8(%rax)
    000002e5: 	movq	%rax, %rdx
    000002e8: 	movsd	-0x8(%rax), %xmm0
    000002ed: 	subq	$0x8, %rax
    000002f1: 	comisd	%xmm1, %xmm0
    000002f5: 	ja	.Ltmp852 # Offset: 757
.Ltmp880:
    000002f7: 	addq	$0x8, %r13
    000002fb: 	movsd	%xmm1, (%rdx)
    000002ff: 	cmpq	%r13, %rbx
    00000302: 	jne	.Ltmp847 # Offset: 770
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp849:
    00000308: 	movsd	(%rbx), %xmm1
    0000030c: 	movsd	-0x8(%rbx), %xmm0
    00000311: 	leaq	-0x8(%rbx), %rax
    00000315: 	comisd	%xmm1, %xmm0
    00000319: 	jbe	.Ltmp853 # Offset: 793
    0000031f: 	nop # Size: 1
.Ltmp854:
    00000320: 	movsd	%xmm0, 0x8(%rax)
    00000325: 	movq	%rax, %rdx
    00000328: 	movsd	-0x8(%rax), %xmm0
    0000032d: 	subq	$0x8, %rax
    00000331: 	comisd	%xmm1, %xmm0
    00000335: 	ja	.Ltmp854 # Offset: 821
    00000337: 	addq	$0x8, %rbx
    0000033b: 	movsd	%xmm1, (%rdx)
    0000033f: 	cmpq	%rbx, %r12
    00000342: 	jne	.Ltmp849 # Offset: 834
.Ltmp879:
    00000344: 	leaq	0x80(%rsp), %rax
    0000034c: 	movl	$0xfa0, %ebx
    00000351: 	movq	$0x0, 0x80(%rsp)
    0000035d: 	movq	%rax, 0x18(%rsp)
.Ltmp855:
    00000362: 	movl	$0x10, %edi
    00000367: 	movq	%rax, %rbp
    0000036a: 	callq	_Znwm@PLT # Offset: 874
    0000036f: 	movq	$0x0, (%rax)
    00000376: 	movq	$0x0, 0x8(%rax)
    0000037e: 	movq	%rax, (%rbp)
    00000382: 	subq	$0x1, %rbx
    00000386: 	jne	.Ltmp855 # Offset: 902
    00000388: 	leaq	0x90(%rsp), %rax
    00000390: 	movq	0x80(%rsp), %rdx
    00000398: 	movq	%rax, %xmm1
    0000039d: 	movq	%rax, 0x20(%rsp)
    000003a2: 	movslq	init_value(%rip), %rax
    000003a9: 	punpcklqdq	%xmm1, %xmm1
    000003ad: 	addq	$0x800000, %rax
    000003b3: 	testq	%rdx, %rdx
    000003b6: 	jne	.Ltmp856 # Offset: 950
.Ltmp876:
    000003bc: 	movq	0x18(%rsp), %rdi
    000003c1: 	movl	$0xfa0, %r13d
    000003c7: 	callq	"_ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/1" # Offset: 967
    000003cc: 	movaps	%xmm1, 0x90(%rsp)
    000003d4: 	movq	$0x0, 0xa0(%rsp)
.Ltmp857:
    000003e0: 	movl	$0x18, %edi
    000003e5: 	callq	_Znwm@PLT # Offset: 997
    000003ea: 	movq	$0x0, 0x10(%rax)
    000003f2: 	movq	0x20(%rsp), %rsi
    000003f7: 	movq	%rax, %rdi
    000003fa: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 1018
    000003ff: 	addq	$0x1, 0xa0(%rsp)
    00000408: 	subq	$0x1, %r13
    0000040c: 	jne	.Ltmp857 # Offset: 1036
    0000040e: 	movslq	init_value(%rip), %rax
    00000415: 	movq	0x90(%rsp), %rdx
    0000041d: 	movq	0x20(%rsp), %rdi
    00000422: 	addq	$0x800000, %rax
    00000428: 	cmpq	0x20(%rsp), %rdx
    0000042d: 	jne	.Ltmp858 # Offset: 1069
    0000042f: 	jmp	.Ltmp859 # Offset: 1071
    00000431: 	nopl	(%rax) # Size: 7
.Ltmp860:
    00000438: 	pxor	%xmm0, %xmm0
    0000043c: 	cvtsi2sd	%rax, %xmm0
    00000441: 	movsd	%xmm0, 0x10(%rcx)
    00000446: 	cmpq	%rdi, %rdx
    00000449: 	je	.Ltmp859 # Offset: 1097
.Ltmp858:
    0000044b: 	movq	%rdx, %rcx
    0000044e: 	movq	(%rdx), %rdx
    00000451: 	subq	$0x1, %rax
    00000455: 	jns	.Ltmp860 # Offset: 1109
    00000457: 	movq	%rax, %rsi
    0000045a: 	movq	%rax, %r8
    0000045d: 	pxor	%xmm0, %xmm0
    00000461: 	shrq	%rsi
    00000464: 	andl	$0x1, %r8d
    00000468: 	orq	%r8, %rsi
    0000046b: 	cvtsi2sd	%rsi, %xmm0
    00000470: 	addsd	%xmm0, %xmm0
    00000474: 	movsd	%xmm0, 0x10(%rcx)
    00000479: 	cmpq	%rdi, %rdx
    0000047c: 	jne	.Ltmp858 # Offset: 1148
.Ltmp859:
    0000047e: 	movq	0x20(%rsp), %rdi
    00000483: 	callq	_ZNSt7__cxx114listIdSaIdEE4sortEv # Offset: 1155
    00000488: 	pxor	%xmm0, %xmm0
    0000048c: 	movl	$0x7d00, %edi
    00000491: 	movq	$0x0, 0xc0(%rsp)
    0000049d: 	movaps	%xmm0, 0xb0(%rsp)
    000004a5: 	callq	_Znwm@PLT # Offset: 1189
    000004aa: 	movq	%rax, %xmm0
    000004af: 	leaq	0x7d00(%rax), %r14
    000004b6: 	leaq	0x8(%rax), %rbp
    000004ba: 	movq	%rax, 0x10(%rsp)
    000004bf: 	punpcklqdq	%xmm0, %xmm0
    000004c3: 	movq	%r14, 0xc0(%rsp)
    000004cb: 	movq	$0x0, (%rax)
    000004d2: 	movq	%r14, 0x40(%rsp)
    000004d7: 	movaps	%xmm0, 0xb0(%rsp)
    000004df: 	cmpq	%r14, %rbp
    000004e2: 	je	.Ltmp861 # Offset: 1250
    000004e4: 	movl	$0x7cf8, %edx
    000004e9: 	xorl	%esi, %esi
    000004eb: 	movq	%rbp, %rdi
    000004ee: 	callq	memset@PLT # Offset: 1262
.Ltmp861:
    000004f3: 	movslq	init_value(%rip), %rsi
    000004fa: 	movq	%r14, 0xb8(%rsp)
    00000502: 	movq	0x10(%rsp), %rdx
    00000507: 	leaq	0x800000(%rsi), %rax
    0000050e: 	addq	$0x7ff060, %rsi
    00000515: 	jmp	.Ltmp862 # Offset: 1301
    00000517: 	nopw	(%rax,%rax) # Size: 9
.Ltmp864:
    00000520: 	pxor	%xmm0, %xmm0
    00000524: 	addq	$0x8, %rdx
    00000528: 	cvtsi2sd	%rax, %xmm0
    0000052d: 	movsd	%xmm0, -0x8(%rdx)
    00000532: 	cmpq	%rsi, %rax
    00000535: 	je	.Ltmp863 # Offset: 1333
.Ltmp862:
    00000537: 	subq	$0x1, %rax
    0000053b: 	jns	.Ltmp864 # Offset: 1339
    0000053d: 	movq	%rax, %rcx
    00000540: 	movq	%rax, %rdi
    00000543: 	pxor	%xmm0, %xmm0
    00000547: 	addq	$0x8, %rdx
    0000054b: 	shrq	%rcx
    0000054e: 	andl	$0x1, %edi
    00000551: 	orq	%rdi, %rcx
    00000554: 	cvtsi2sd	%rcx, %xmm0
    00000559: 	addsd	%xmm0, %xmm0
    0000055d: 	movsd	%xmm0, -0x8(%rdx)
    00000562: 	cmpq	%rsi, %rax
    00000565: 	jne	.Ltmp862 # Offset: 1381
.Ltmp863:
    00000567: 	movq	0x10(%rsp), %rdi
    0000056c: 	movq	%r14, %rbx
    0000056f: 	movl	$0x3f, %edx
    00000574: 	movq	%r14, %rsi
    00000577: 	subq	%rdi, %rbx
    0000057a: 	movq	%rbx, %rax
    0000057d: 	movq	%rbx, 0x50(%rsp)
    00000582: 	sarq	$0x3, %rax
    00000586: 	movq	%rax, 0x58(%rsp)
    0000058b: 	bsrq	%rax, %rax
    0000058f: 	xorq	$0x3f, %rax
    00000593: 	subl	%eax, %edx
    00000595: 	movslq	%edx, %rdx
    00000598: 	addq	%rdx, %rdx
    0000059b: 	callq	"_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1" # Offset: 1435
    000005a0: 	cmpq	$0x80, %rbx
    000005a7: 	jle	.Ltmp865 # Offset: 1447
    000005ad: 	movq	0x10(%rsp), %r15
    000005b2: 	movl	$0x8, %ebx
    000005b7: 	leaq	0x80(%r15), %r12
    000005be: 	jmp	.Ltmp866 # Offset: 1470
.Ltmp869:
    000005c0: 	cmpq	%rbp, %r15
    000005c3: 	je	.Ltmp867 # Offset: 1475
    000005c5: 	movq	%rbp, %rdx
    000005c8: 	leaq	(%r15,%rbx), %rdi
    000005cc: 	movq	%r15, %rsi
    000005cf: 	movsd	%xmm1, 0x8(%rsp)
    000005d5: 	subq	%r15, %rdx
    000005d8: 	callq	memmove@PLT # Offset: 1496
    000005dd: 	movsd	0x8(%rsp), %xmm1
.Ltmp867:
    000005e3: 	movsd	%xmm1, (%r15)
.Ltmp872:
    000005e8: 	addq	$0x8, %rbp
    000005ec: 	cmpq	%rbp, %r12
    000005ef: 	je	.Ltmp868 # Offset: 1519
.Ltmp866:
    000005f5: 	movsd	(%rbp), %xmm1
    000005fa: 	movsd	(%r15), %xmm0
    000005ff: 	comisd	%xmm1, %xmm0
    00000603: 	ja	.Ltmp869 # Offset: 1539
    00000605: 	movsd	-0x8(%rbp), %xmm0
    0000060a: 	leaq	-0x8(%rbp), %rax
    0000060e: 	comisd	%xmm1, %xmm0
    00000612: 	jbe	.Ltmp870 # Offset: 1554
    00000618: 	nopl	(%rax,%rax) # Size: 8
.Ltmp871:
    00000620: 	movsd	%xmm0, 0x8(%rax)
    00000625: 	movq	%rax, %rdx
    00000628: 	movsd	-0x8(%rax), %xmm0
    0000062d: 	subq	$0x8, %rax
    00000631: 	comisd	%xmm1, %xmm0
    00000635: 	ja	.Ltmp871 # Offset: 1589
.Ltmp1064:
    00000637: 	movsd	%xmm1, (%rdx)
    0000063b: 	jmp	.Ltmp872 # Offset: 1595
    0000063d: 	nopl	(%rax) # Size: 3
.Ltmp873:
    00000640: 	addq	$0x20, %rbp
.Ltmp835:
    00000644: 	cmpq	%rbp, 0x8(%rsp)
    00000649: 	je	.Ltmp839 # Offset: 1609
.Ltmp874:
    0000064f: 	movq	(%rbp), %rdi
    00000653: 	leaq	0x10(%rbp), %rax
    00000657: 	cmpq	%rax, %rdi
    0000065a: 	je	.Ltmp873 # Offset: 1626
    0000065c: 	movq	0x10(%rbp), %rax
    00000660: 	addq	$0x20, %rbp
    00000664: 	leaq	0x1(%rax), %rsi
    00000668: 	callq	_ZdlPvm@PLT # Offset: 1640
    0000066d: 	cmpq	%rbp, 0x8(%rsp)
    00000672: 	jne	.Ltmp874 # Offset: 1650
    00000674: 	jmp	.Ltmp839 # Offset: 1652
    00000679: 	nopl	(%rax) # Size: 7
.Ltmp831:
    00000680: 	addq	$0x20, %rbp
    00000684: 	cmpq	%rbx, %rbp
    00000687: 	jne	.Ltmp832 # Offset: 1671
    0000068d: 	addq	$0x8, %r13
    00000691: 	cmpq	%r13, %r15
    00000694: 	ja	.Ltmp833 # Offset: 1684
    0000069a: 	jmp	.Ltmp875 # Offset: 1690
    0000069f: 	nop # Size: 1
.Ltmp877:
    000006a0: 	pxor	%xmm0, %xmm0
    000006a4: 	cvtsi2sd	%rax, %xmm0
.Ltmp878:
    000006a9: 	movsd	%xmm0, 0x8(%rcx)
    000006ae: 	testq	%rdx, %rdx
    000006b1: 	je	.Ltmp876 # Offset: 1713
.Ltmp856:
    000006b7: 	movq	%rdx, %rcx
    000006ba: 	movq	(%rdx), %rdx
    000006bd: 	subq	$0x1, %rax
    000006c1: 	jns	.Ltmp877 # Offset: 1729
    000006c3: 	movq	%rax, %rsi
    000006c6: 	movq	%rax, %rdi
    000006c9: 	pxor	%xmm0, %xmm0
    000006cd: 	shrq	%rsi
    000006d0: 	andl	$0x1, %edi
    000006d3: 	orq	%rdi, %rsi
    000006d6: 	cvtsi2sd	%rsi, %xmm0
    000006db: 	addsd	%xmm0, %xmm0
    000006df: 	jmp	.Ltmp878 # Offset: 1759
.Ltmp853:
    000006e1: 	movq	%rbx, %rdx
    000006e4: 	addq	$0x8, %rbx
    000006e8: 	movsd	%xmm1, (%rdx)
    000006ec: 	cmpq	%rbx, %r12
    000006ef: 	jne	.Ltmp849 # Offset: 1775
    000006f5: 	jmp	.Ltmp879 # Offset: 1781
.Ltmp851:
    000006fa: 	movq	%r13, %rdx
    000006fd: 	jmp	.Ltmp880 # Offset: 1789
.Ltmp865:
    00000702: 	movq	0x10(%rsp), %r12
    00000707: 	movl	$0x8, %ebx
    0000070c: 	cmpq	%r14, %rbp
    0000070f: 	jne	.Ltmp881 # Offset: 1807
    00000711: 	jmp	.Ltmp882 # Offset: 1809
    00000716: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp884:
    00000720: 	cmpq	%r12, %rbp
    00000723: 	je	.Ltmp883 # Offset: 1827
    00000725: 	subq	%r12, %rdx
    00000728: 	leaq	(%r12,%rbx), %rdi
    0000072c: 	movq	%r12, %rsi
    0000072f: 	movsd	%xmm1, 0x8(%rsp)
    00000735: 	callq	memmove@PLT # Offset: 1845
    0000073a: 	movsd	0x8(%rsp), %xmm1
.Ltmp883:
    00000740: 	movsd	%xmm1, (%r12)
.Ltmp887:
    00000746: 	addq	$0x8, %rbp
    0000074a: 	cmpq	%rbp, %r14
    0000074d: 	je	.Ltmp882 # Offset: 1869
.Ltmp881:
    00000753: 	movsd	(%rbp), %xmm1
    00000758: 	movsd	(%r12), %xmm0
    0000075e: 	movq	%rbp, %rdx
    00000761: 	comisd	%xmm1, %xmm0
    00000765: 	ja	.Ltmp884 # Offset: 1893
    00000767: 	movsd	-0x8(%rbp), %xmm0
    0000076c: 	leaq	-0x8(%rbp), %rax
    00000770: 	comisd	%xmm1, %xmm0
    00000774: 	jbe	.Ltmp885 # Offset: 1908
    00000776: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp886:
    00000780: 	movsd	%xmm0, 0x8(%rax)
    00000785: 	movq	%rax, %rdx
    00000788: 	movsd	-0x8(%rax), %xmm0
    0000078d: 	subq	$0x8, %rax
    00000791: 	comisd	%xmm1, %xmm0
    00000795: 	ja	.Ltmp886 # Offset: 1941
.Ltmp885:
    00000797: 	movsd	%xmm1, (%rdx)
    0000079b: 	jmp	.Ltmp887 # Offset: 1947
.Ltmp868:
    0000079d: 	cmpq	%r12, %r14
    000007a0: 	je	.Ltmp882 # Offset: 1952
.Ltmp890:
    000007a2: 	movsd	(%r12), %xmm1
    000007a8: 	movsd	-0x8(%r12), %xmm0
    000007af: 	leaq	-0x8(%r12), %rax
    000007b4: 	comisd	%xmm1, %xmm0
    000007b8: 	jbe	.Ltmp888 # Offset: 1976
    000007be: 	nop # Size: 2
.Ltmp889:
    000007c0: 	movsd	%xmm0, 0x8(%rax)
    000007c5: 	movq	%rax, %rdx
    000007c8: 	movsd	-0x8(%rax), %xmm0
    000007cd: 	subq	$0x8, %rax
    000007d1: 	comisd	%xmm1, %xmm0
    000007d5: 	ja	.Ltmp889 # Offset: 2005
.Ltmp1056:
    000007d7: 	addq	$0x8, %r12
    000007db: 	movsd	%xmm1, (%rdx)
    000007df: 	cmpq	%r12, %r14
    000007e2: 	jne	.Ltmp890 # Offset: 2018
.Ltmp882:
    000007e4: 	leaq	0xd0(%rsp), %rax
    000007ec: 	leaq	0x130(%rsp), %r15
    000007f4: 	leaq	DATAat0xd280(%rip), %rdx
    000007fb: 	movq	%rax, %rsi
    000007fe: 	movq	%r15, %rdi
    00000801: 	movq	%rax, 0x30(%rsp)
    00000806: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2054
    0000080b: 	movq	0x80(%rsp), %rbx
    00000813: 	movq	%r15, %rcx
    00000816: 	movl	$0xfa0, %edx
    0000081b: 	xorl	%esi, %esi
    0000081d: 	movq	%rbx, %rdi
    00000820: 	callq	"_Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2080
    00000825: 	movq	0x130(%rsp), %rdi
    0000082d: 	leaq	0x140(%rsp), %rax
    00000835: 	movq	%rax, 0x8(%rsp)
    0000083a: 	cmpq	%rax, %rdi
    0000083d: 	je	.Ltmp891 # Offset: 2109
    0000083f: 	movq	0x140(%rsp), %rax
    00000847: 	leaq	0x1(%rax), %rsi
    0000084b: 	callq	_ZdlPvm@PLT # Offset: 2123
.Ltmp891:
    00000850: 	movq	0x30(%rsp), %rsi
    00000855: 	leaq	DATAat0xd2a0(%rip), %rdx
    0000085c: 	movq	%r15, %rdi
    0000085f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2143
    00000864: 	movq	%r15, %r8
    00000867: 	leaq	_Z18gries_mills_rotateISt18_Fwd_list_iteratorIdEEvT_S2_S2_(%rip), %rcx
    0000086e: 	xorl	%esi, %esi
    00000870: 	movq	%rbx, %rdi
    00000873: 	movl	$0xfa0, %edx
    00000878: 	callq	_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2168
    0000087d: 	movq	0x130(%rsp), %rdi
    00000885: 	cmpq	0x8(%rsp), %rdi
    0000088a: 	je	.Ltmp892 # Offset: 2186
    0000088c: 	movq	0x140(%rsp), %rax
    00000894: 	leaq	0x1(%rax), %rsi
    00000898: 	callq	_ZdlPvm@PLT # Offset: 2200
.Ltmp892:
    0000089d: 	movq	0x30(%rsp), %rsi
    000008a2: 	leaq	DATAat0xd2c0(%rip), %rdx
    000008a9: 	movq	%r15, %rdi
    000008ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2220
    000008b1: 	movq	%r15, %rcx
    000008b4: 	movl	$0xfa0, %edx
    000008b9: 	xorl	%esi, %esi
    000008bb: 	movq	%rbx, %rdi
    000008be: 	callq	"_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 2238
    000008c3: 	movq	0x130(%rsp), %rdi
    000008cb: 	cmpq	0x8(%rsp), %rdi
    000008d0: 	je	.Ltmp893 # Offset: 2256
    000008d2: 	movq	0x140(%rsp), %rax
    000008da: 	leaq	0x1(%rax), %rsi
    000008de: 	callq	_ZdlPvm@PLT # Offset: 2270
.Ltmp893:
    000008e3: 	movq	0x30(%rsp), %rsi
    000008e8: 	leaq	DATAat0xd2e8(%rip), %rdx
    000008ef: 	movq	%r15, %rdi
    000008f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2290
    000008f7: 	movq	%r15, %rcx
    000008fa: 	movl	$0xfa0, %edx
    000008ff: 	xorl	%esi, %esi
    00000901: 	movq	%rbx, %rdi
    00000904: 	callq	"_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2308
    00000909: 	movq	0x130(%rsp), %rdi
    00000911: 	cmpq	0x8(%rsp), %rdi
    00000916: 	je	.Ltmp894 # Offset: 2326
    00000918: 	movq	0x140(%rsp), %rax
    00000920: 	leaq	0x1(%rax), %rsi
    00000924: 	callq	_ZdlPvm@PLT # Offset: 2340
.Ltmp894:
    00000929: 	movq	0x30(%rsp), %rsi
    0000092e: 	leaq	DATAat0xd3d0(%rip), %rdx
    00000935: 	movq	%r15, %rdi
    00000938: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2360
    0000093d: 	movq	0x20(%rsp), %rsi
    00000942: 	movq	0x90(%rsp), %rdi
    0000094a: 	movq	%r15, %rcx
    0000094d: 	movl	$0xfa0, %edx
    00000952: 	callq	"_Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2386
    00000957: 	movq	0x130(%rsp), %rdi
    0000095f: 	cmpq	0x8(%rsp), %rdi
    00000964: 	je	.Ltmp895 # Offset: 2404
    00000966: 	movq	0x140(%rsp), %rax
    0000096e: 	leaq	0x1(%rax), %rsi
    00000972: 	callq	_ZdlPvm@PLT # Offset: 2418
.Ltmp895:
    00000977: 	movq	0x30(%rsp), %rsi
    0000097c: 	leaq	DATAat0xd3e7(%rip), %rdx
    00000983: 	movq	%r15, %rdi
    00000986: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2438
    0000098b: 	movq	0x20(%rsp), %rsi
    00000990: 	movq	%r15, %r8
    00000993: 	movq	0x90(%rsp), %rdi
    0000099b: 	leaq	_Z18gries_mills_rotateISt14_List_iteratorIdEEvT_S2_S2_(%rip), %rcx
    000009a2: 	movl	$0xfa0, %edx
    000009a7: 	callq	_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2471
    000009ac: 	movq	0x130(%rsp), %rdi
    000009b4: 	cmpq	0x8(%rsp), %rdi
    000009b9: 	je	.Ltmp896 # Offset: 2489
    000009bb: 	movq	0x140(%rsp), %rax
    000009c3: 	leaq	0x1(%rax), %rsi
    000009c7: 	callq	_ZdlPvm@PLT # Offset: 2503
.Ltmp896:
    000009cc: 	movq	0x30(%rsp), %rsi
    000009d1: 	leaq	DATAat0xd318(%rip), %rdx
    000009d8: 	movq	%r15, %rdi
    000009db: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2523
    000009e0: 	movq	0x20(%rsp), %rsi
    000009e5: 	movq	0x90(%rsp), %rdi
    000009ed: 	movq	%r15, %rcx
    000009f0: 	movl	$0xfa0, %edx
    000009f5: 	callq	"_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 2549
    000009fa: 	movq	0x130(%rsp), %rdi
    00000a02: 	cmpq	0x8(%rsp), %rdi
    00000a07: 	je	.Ltmp897 # Offset: 2567
    00000a09: 	movq	0x140(%rsp), %rax
    00000a11: 	leaq	0x1(%rax), %rsi
    00000a15: 	callq	_ZdlPvm@PLT # Offset: 2581
.Ltmp897:
    00000a1a: 	movq	0x30(%rsp), %rsi
    00000a1f: 	leaq	DATAat0xd338(%rip), %rdx
    00000a26: 	movq	%r15, %rdi
    00000a29: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2601
    00000a2e: 	movq	0x20(%rsp), %rsi
    00000a33: 	movq	0x90(%rsp), %rdi
    00000a3b: 	movq	%r15, %rcx
    00000a3e: 	movl	$0xfa0, %edx
    00000a43: 	callq	"_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2627
    00000a48: 	movq	0x130(%rsp), %rdi
    00000a50: 	cmpq	0x8(%rsp), %rdi
    00000a55: 	je	.Ltmp898 # Offset: 2645
    00000a57: 	movq	0x140(%rsp), %rax
    00000a5f: 	leaq	0x1(%rax), %rsi
    00000a63: 	callq	_ZdlPvm@PLT # Offset: 2659
.Ltmp898:
    00000a68: 	movq	0x8(%rsp), %rax
    00000a6d: 	movq	0xd0(%rsp), %rbp
    00000a75: 	movq	0xd8(%rsp), %r12
    00000a7d: 	movq	%rax, 0x130(%rsp)
    00000a85: 	movq	%rbp, %rax
    00000a88: 	addq	%r12, %rax
    00000a8b: 	je	.Ltmp899 # Offset: 2699
    00000a8d: 	testq	%rbp, %rbp
    00000a90: 	je	.Ltmp900 # Offset: 2704
.Ltmp899:
    00000a96: 	movq	%r12, 0x88(%rsp)
    00000a9e: 	cmpq	$0xf, %r12
    00000aa2: 	ja	.Ltmp901 # Offset: 2722
    00000aa8: 	cmpq	$0x1, %r12
    00000aac: 	jne	.Ltmp902 # Offset: 2732
    00000ab2: 	movzbl	(%rbp), %eax
    00000ab6: 	movb	%al, 0x140(%rsp)
    00000abd: 	movq	0x8(%rsp), %rax
.Ltmp1055:
    00000ac2: 	movq	%r12, 0x138(%rsp)
    00000aca: 	movb	$0x0, (%rax,%r12)
    00000acf: 	movabsq	$0x3fffffffffffffff, %rax
    00000ad9: 	subq	0x138(%rsp), %rax
    00000ae1: 	cmpq	$0x18, %rax
    00000ae5: 	jbe	.Ltmp903 # Offset: 2789
    00000aeb: 	movl	$0x19, %edx
    00000af0: 	leaq	DATAat0xd3fe(%rip), %rsi
    00000af7: 	movq	%r15, %rdi
    00000afa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2810
    00000aff: 	movq	0x20(%rsp), %rsi
    00000b04: 	movq	%r15, %r8
    00000b07: 	movq	0x90(%rsp), %rdi
    00000b0f: 	leaq	_Z20three_reverse_rotateISt14_List_iteratorIdEEvT_S2_S2_(%rip), %rcx
    00000b16: 	movl	$0xfa0, %edx
    00000b1b: 	callq	_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2843
    00000b20: 	movq	0x130(%rsp), %rdi
    00000b28: 	cmpq	0x8(%rsp), %rdi
    00000b2d: 	je	.Ltmp904 # Offset: 2861
    00000b2f: 	movq	0x140(%rsp), %rax
    00000b37: 	leaq	0x1(%rax), %rsi
    00000b3b: 	callq	_ZdlPvm@PLT # Offset: 2875
.Ltmp904:
    00000b40: 	movq	0x30(%rsp), %rsi
    00000b45: 	leaq	DATAat0xd418(%rip), %rdx
    00000b4c: 	movq	%r15, %rdi
    00000b4f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2895
    00000b54: 	movq	0x10(%rsp), %rdi
    00000b59: 	movq	%r15, %rcx
    00000b5c: 	movl	$0xfa0, %edx
    00000b61: 	movq	%r14, %rsi
    00000b64: 	callq	"_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2916
    00000b69: 	movq	0x130(%rsp), %rdi
    00000b71: 	cmpq	0x8(%rsp), %rdi
    00000b76: 	je	.Ltmp905 # Offset: 2934
    00000b78: 	movq	0x140(%rsp), %rax
    00000b80: 	leaq	0x1(%rax), %rsi
    00000b84: 	callq	_ZdlPvm@PLT # Offset: 2948
.Ltmp905:
    00000b89: 	movq	0x30(%rsp), %rsi
    00000b8e: 	leaq	DATAat0xd431(%rip), %rdx
    00000b95: 	movq	%r15, %rdi
    00000b98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2968
    00000b9d: 	movq	0x10(%rsp), %rdi
    00000ba2: 	movq	%r15, %r8
    00000ba5: 	movl	$0xfa0, %edx
    00000baa: 	movq	%r14, %rsi
    00000bad: 	leaq	_Z18gries_mills_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rcx
    00000bb4: 	callq	_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2996
    00000bb9: 	movq	0x130(%rsp), %rdi
    00000bc1: 	cmpq	0x8(%rsp), %rdi
    00000bc6: 	je	.Ltmp906 # Offset: 3014
    00000bc8: 	movq	0x140(%rsp), %rax
    00000bd0: 	leaq	0x1(%rax), %rsi
    00000bd4: 	callq	_ZdlPvm@PLT # Offset: 3028
.Ltmp906:
    00000bd9: 	movq	0x30(%rsp), %rsi
    00000bde: 	leaq	DATAat0xd360(%rip), %rdx
    00000be5: 	movq	%r15, %rdi
    00000be8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3048
    00000bed: 	movq	0x10(%rsp), %rdi
    00000bf2: 	movq	%r15, %rcx
    00000bf5: 	movl	$0xfa0, %edx
    00000bfa: 	movq	%r14, %rsi
    00000bfd: 	callq	"_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3069
    00000c02: 	movq	0x130(%rsp), %rdi
    00000c0a: 	cmpq	0x8(%rsp), %rdi
    00000c0f: 	je	.Ltmp907 # Offset: 3087
    00000c11: 	movq	0x140(%rsp), %rax
    00000c19: 	leaq	0x1(%rax), %rsi
    00000c1d: 	callq	_ZdlPvm@PLT # Offset: 3101
.Ltmp907:
    00000c22: 	movq	0x8(%rsp), %rax
    00000c27: 	movq	0xd0(%rsp), %rbp
    00000c2f: 	movq	0xd8(%rsp), %r12
    00000c37: 	movq	%rax, 0x130(%rsp)
    00000c3f: 	movq	%rbp, %rax
    00000c42: 	addq	%r12, %rax
    00000c45: 	je	.Ltmp908 # Offset: 3141
    00000c47: 	testq	%rbp, %rbp
    00000c4a: 	je	.Ltmp909 # Offset: 3146
.Ltmp908:
    00000c50: 	movq	%r12, 0x88(%rsp)
    00000c58: 	cmpq	$0xf, %r12
    00000c5c: 	ja	.Ltmp910 # Offset: 3164
    00000c62: 	cmpq	$0x1, %r12
    00000c66: 	jne	.Ltmp911 # Offset: 3174
    00000c6c: 	movzbl	(%rbp), %eax
    00000c70: 	movb	%al, 0x140(%rsp)
    00000c77: 	movq	0x8(%rsp), %rax
.Ltmp1053:
    00000c7c: 	movq	%r12, 0x138(%rsp)
    00000c84: 	movb	$0x0, (%rax,%r12)
    00000c89: 	movabsq	$0x3fffffffffffffff, %rax
    00000c93: 	subq	0x138(%rsp), %rax
    00000c9b: 	cmpq	$0x21, %rax
    00000c9f: 	jbe	.Ltmp912 # Offset: 3231
    00000ca5: 	movl	$0x22, %edx
    00000caa: 	leaq	DATAat0xd388(%rip), %rsi
    00000cb1: 	movq	%r15, %rdi
    00000cb4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3252
    00000cb9: 	movq	0x10(%rsp), %rdi
    00000cbe: 	movq	%r15, %rcx
    00000cc1: 	movl	$0xfa0, %edx
    00000cc6: 	movq	%r14, %rsi
    00000cc9: 	callq	"_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3273
    00000cce: 	movq	0x130(%rsp), %rdi
    00000cd6: 	cmpq	0x8(%rsp), %rdi
    00000cdb: 	je	.Ltmp913 # Offset: 3291
    00000cdd: 	movq	0x140(%rsp), %rax
    00000ce5: 	leaq	0x1(%rax), %rsi
    00000ce9: 	callq	_ZdlPvm@PLT # Offset: 3305
.Ltmp913:
    00000cee: 	movq	0x30(%rsp), %rsi
    00000cf3: 	leaq	DATAat0xd44a(%rip), %rdx
    00000cfa: 	movq	%r15, %rdi
    00000cfd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3325
    00000d02: 	movq	0x10(%rsp), %rdi
    00000d07: 	movq	%r15, %r8
    00000d0a: 	movl	$0xfa0, %edx
    00000d0f: 	movq	%r14, %rsi
    00000d12: 	leaq	_Z20three_reverse_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rcx
    00000d19: 	callq	_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3353
    00000d1e: 	movq	0x130(%rsp), %rdi
    00000d26: 	cmpq	0x8(%rsp), %rdi
    00000d2b: 	je	.Ltmp914 # Offset: 3371
    00000d2d: 	movq	0x140(%rsp), %rax
    00000d35: 	leaq	0x1(%rax), %rsi
    00000d39: 	callq	_ZdlPvm@PLT # Offset: 3385
.Ltmp914:
    00000d3e: 	movq	0x30(%rsp), %rsi
    00000d43: 	leaq	DATAat0xd466(%rip), %rdx
    00000d4a: 	movq	%r15, %rdi
    00000d4d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3405
    00000d52: 	movq	0x10(%rsp), %rdi
    00000d57: 	movq	%r15, %r8
    00000d5a: 	movl	$0xfa0, %edx
    00000d5f: 	movq	%r14, %rsi
    00000d62: 	leaq	_Z16gcd_cycle_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rcx
    00000d69: 	callq	_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3433
    00000d6e: 	movq	0x130(%rsp), %rdi
    00000d76: 	cmpq	0x8(%rsp), %rdi
    00000d7b: 	je	.Ltmp915 # Offset: 3451
    00000d7d: 	movq	0x140(%rsp), %rax
    00000d85: 	leaq	0x1(%rax), %rsi
    00000d89: 	callq	_ZdlPvm@PLT # Offset: 3465
.Ltmp915:
    00000d8e: 	movq	0x30(%rsp), %rsi
    00000d93: 	leaq	DATAat0xd3b0(%rip), %rdx
    00000d9a: 	movq	%r15, %rdi
    00000d9d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3485
    00000da2: 	movq	0x10(%rsp), %rdi
    00000da7: 	movq	%r15, %r8
    00000daa: 	movl	$0xfa0, %edx
    00000daf: 	movq	%r14, %rsi
    00000db2: 	leaq	_Z25gcd_cycle_buffered_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rcx
    00000db9: 	callq	_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3513
    00000dbe: 	movq	0x130(%rsp), %rdi
    00000dc6: 	cmpq	0x8(%rsp), %rdi
    00000dcb: 	je	.Ltmp916 # Offset: 3531
    00000dcd: 	movq	0x140(%rsp), %rax
    00000dd5: 	leaq	0x1(%rax), %rsi
    00000dd9: 	callq	_ZdlPvm@PLT # Offset: 3545
.Ltmp916:
    00000dde: 	movq	0x30(%rsp), %rsi
    00000de3: 	leaq	0xf0(%rsp), %rdi
    00000deb: 	leaq	DATAat0xd47d(%rip), %rdx
    00000df2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3570
    00000df7: 	movl	iterations(%rip), %edx
    00000dfd: 	xorl	%r8d, %r8d
    00000e00: 	xorl	%ecx, %ecx
    00000e02: 	movl	$0xfa0, %esi
    00000e07: 	movq	0xf0(%rsp), %rdi
    00000e0f: 	callq	_Z9summarizePKciiii # Offset: 3599
    00000e14: 	movl	0x70(%rsp), %ecx
    00000e18: 	movq	0x18(%rsp), %rbp
    00000e1d: 	testl	%ecx, %ecx
    00000e1f: 	leal	0x1fff(%rcx), %eax
    00000e25: 	cmovnsl	%ecx, %eax
    00000e28: 	sarl	$0xd, %eax
    00000e2b: 	movl	%eax, iterations(%rip)
    00000e31: 	jmp	.Ltmp917 # Offset: 3633
    00000e33: 	nopl	(%rax,%rax) # Size: 5
.Ltmp919:
    00000e38: 	movq	%rbx, %rbp
    00000e3b: 	movq	(%rbx), %rbx
    00000e3e: 	addq	$0x1, %r13
.Ltmp917:
    00000e42: 	testq	%rbx, %rbx
    00000e45: 	je	.Ltmp918 # Offset: 3653
    00000e4b: 	cmpq	$0x800000, %r13
    00000e52: 	jne	.Ltmp919 # Offset: 3666
    00000e54: 	nopl	(%rax) # Size: 4
.Ltmp920:
    00000e58: 	movq	%rbx, %rdi
    00000e5b: 	movq	(%rbx), %rbx
    00000e5e: 	movl	$0x10, %esi
    00000e63: 	callq	_ZdlPvm@PLT # Offset: 3683
    00000e68: 	testq	%rbx, %rbx
    00000e6b: 	jne	.Ltmp920 # Offset: 3691
.Ltmp1049:
    00000e6d: 	movq	$0x0, (%rbp)
.Ltmp1051:
    00000e75: 	movslq	init_value(%rip), %rax
    00000e7c: 	movq	0x80(%rsp), %rdx
    00000e84: 	addq	$0x800000, %rax
    00000e8a: 	testq	%rdx, %rdx
    00000e8d: 	jne	.Ltmp921 # Offset: 3725
    00000e8f: 	jmp	.Ltmp922 # Offset: 3727
    00000e91: 	nopl	(%rax) # Size: 7
.Ltmp923:
    00000e98: 	pxor	%xmm0, %xmm0
    00000e9c: 	cvtsi2sd	%rax, %xmm0
    00000ea1: 	movsd	%xmm0, 0x8(%rcx)
    00000ea6: 	testq	%rdx, %rdx
    00000ea9: 	je	.Ltmp922 # Offset: 3753
.Ltmp921:
    00000eab: 	movq	%rdx, %rcx
    00000eae: 	movq	(%rdx), %rdx
    00000eb1: 	subq	$0x1, %rax
    00000eb5: 	jns	.Ltmp923 # Offset: 3765
    00000eb7: 	movq	%rax, %rsi
    00000eba: 	movq	%rax, %rdi
    00000ebd: 	pxor	%xmm0, %xmm0
    00000ec1: 	shrq	%rsi
    00000ec4: 	andl	$0x1, %edi
    00000ec7: 	orq	%rdi, %rsi
    00000eca: 	cvtsi2sd	%rsi, %xmm0
    00000ecf: 	addsd	%xmm0, %xmm0
    00000ed3: 	movsd	%xmm0, 0x8(%rcx)
    00000ed8: 	testq	%rdx, %rdx
    00000edb: 	jne	.Ltmp921 # Offset: 3803
.Ltmp922:
    00000edd: 	movq	0x18(%rsp), %rdi
    00000ee2: 	callq	"_ZNSt12forward_listIdSaIdEE4sortISt4lessIdEEEvT_.isra.0/1" # Offset: 3810
    00000ee7: 	movq	0x20(%rsp), %rdi
    00000eec: 	movl	$0x800000, %esi
    00000ef1: 	callq	_ZNSt7__cxx114listIdSaIdEE6resizeEm # Offset: 3825
    00000ef6: 	movslq	init_value(%rip), %rax
    00000efd: 	movq	0x90(%rsp), %rdx
    00000f05: 	movq	0x20(%rsp), %rdi
    00000f0a: 	addq	$0x800000, %rax
    00000f10: 	cmpq	0x20(%rsp), %rdx
    00000f15: 	jne	.Ltmp924 # Offset: 3861
    00000f17: 	jmp	.Ltmp925 # Offset: 3863
    00000f19: 	nopl	(%rax) # Size: 7
.Ltmp926:
    00000f20: 	pxor	%xmm0, %xmm0
    00000f24: 	cvtsi2sd	%rax, %xmm0
    00000f29: 	movsd	%xmm0, 0x10(%rcx)
    00000f2e: 	cmpq	%rdi, %rdx
    00000f31: 	je	.Ltmp925 # Offset: 3889
.Ltmp924:
    00000f33: 	movq	%rdx, %rcx
    00000f36: 	movq	(%rdx), %rdx
    00000f39: 	subq	$0x1, %rax
    00000f3d: 	jns	.Ltmp926 # Offset: 3901
    00000f3f: 	movq	%rax, %rsi
    00000f42: 	movq	%rax, %r8
    00000f45: 	pxor	%xmm0, %xmm0
    00000f49: 	shrq	%rsi
    00000f4c: 	andl	$0x1, %r8d
    00000f50: 	orq	%r8, %rsi
    00000f53: 	cvtsi2sd	%rsi, %xmm0
    00000f58: 	addsd	%xmm0, %xmm0
    00000f5c: 	movsd	%xmm0, 0x10(%rcx)
    00000f61: 	cmpq	%rdi, %rdx
    00000f64: 	jne	.Ltmp924 # Offset: 3940
.Ltmp925:
    00000f66: 	movq	0x20(%rsp), %rdi
    00000f6b: 	callq	_ZNSt7__cxx114listIdSaIdEE4sortEv # Offset: 3947
    00000f70: 	cmpq	$0x3fffff8, 0x50(%rsp)
    00000f79: 	jbe	.Ltmp927 # Offset: 3961
    00000f7f: 	cmpq	$0x4000000, 0x50(%rsp)
    00000f88: 	movq	$0x7d00, 0x78(%rsp)
    00000f91: 	jbe	.Ltmp928 # Offset: 3985
    00000f93: 	movq	0x10(%rsp), %rax
    00000f98: 	addq	$0x4000000, %rax
    00000f9e: 	cmpq	%rax, %r14
    00000fa1: 	je	.Ltmp928 # Offset: 4001
    00000fa3: 	movq	%rax, 0xb8(%rsp)
    00000fab: 	movq	%rax, 0x40(%rsp)
.Ltmp928:
    00000fb0: 	movslq	init_value(%rip), %rax
    00000fb7: 	movq	0x10(%rsp), %rcx
    00000fbc: 	movq	0x40(%rsp), %rsi
    00000fc1: 	addq	$0x800000, %rax
    00000fc7: 	cmpq	%rsi, %rcx
    00000fca: 	je	.Ltmp929 # Offset: 4042
    00000fd0: 	movq	%rcx, %rdx
    00000fd3: 	jmp	.Ltmp930 # Offset: 4051
    00000fd5: 	nopl	(%rax) # Size: 3
.Ltmp932:
    00000fd8: 	pxor	%xmm0, %xmm0
    00000fdc: 	movq	%rdx, %rbp
    00000fdf: 	leaq	0x8(%rdx), %rdx
    00000fe3: 	cvtsi2sd	%rax, %xmm0
    00000fe8: 	movsd	%xmm0, -0x8(%rdx)
    00000fed: 	cmpq	%rdx, %rsi
    00000ff0: 	je	.Ltmp931 # Offset: 4080
.Ltmp930:
    00000ff2: 	subq	$0x1, %rax
    00000ff6: 	jns	.Ltmp932 # Offset: 4086
    00000ff8: 	movq	%rax, %rcx
    00000ffb: 	movq	%rax, %rdi
    00000ffe: 	pxor	%xmm0, %xmm0
    00001002: 	movq	%rdx, %rbp
    00001005: 	shrq	%rcx
    00001008: 	andl	$0x1, %edi
    0000100b: 	leaq	0x8(%rdx), %rdx
    0000100f: 	orq	%rdi, %rcx
    00001012: 	cvtsi2sd	%rcx, %xmm0
    00001017: 	addsd	%xmm0, %xmm0
    0000101b: 	movsd	%xmm0, -0x8(%rdx)
    00001020: 	cmpq	%rdx, %rsi
    00001023: 	jne	.Ltmp930 # Offset: 4131
.Ltmp931:
    00001025: 	movq	0x40(%rsp), %rsi
    0000102a: 	movq	0x10(%rsp), %r14
    0000102f: 	movl	$0x3f, %edx
    00001034: 	movq	%rsi, %rbx
    00001037: 	movq	%r14, %rdi
    0000103a: 	leaq	0x8(%r14), %r12
    0000103e: 	subq	%r14, %rbx
    00001041: 	movq	%rbx, %rax
    00001044: 	sarq	$0x3, %rax
    00001048: 	bsrq	%rax, %rax
    0000104c: 	xorq	$0x3f, %rax
    00001050: 	subl	%eax, %edx
    00001052: 	movslq	%edx, %rdx
    00001055: 	addq	%rdx, %rdx
    00001058: 	callq	"_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1" # Offset: 4184
    0000105d: 	cmpq	$0x80, %rbx
    00001064: 	jle	.Ltmp933 # Offset: 4196
    0000106a: 	movq	0x10(%rsp), %r13
    0000106f: 	movl	$0x8, %ebx
    00001074: 	leaq	0x80(%r13), %rbp
    0000107b: 	jmp	.Ltmp934 # Offset: 4219
.Ltmp937:
    0000107d: 	cmpq	%r13, %r12
    00001080: 	je	.Ltmp935 # Offset: 4224
    00001082: 	movq	%r12, %rdx
    00001085: 	leaq	(%r13,%rbx), %rdi
    0000108a: 	movq	%r13, %rsi
    0000108d: 	movsd	%xmm1, 0x18(%rsp)
    00001093: 	subq	%r13, %rdx
    00001096: 	callq	memmove@PLT # Offset: 4246
    0000109b: 	movsd	0x18(%rsp), %xmm1
.Ltmp935:
    000010a1: 	movsd	%xmm1, (%r13)
.Ltmp940:
    000010a7: 	addq	$0x8, %r12
    000010ab: 	cmpq	%r12, %rbp
    000010ae: 	je	.Ltmp936 # Offset: 4270
.Ltmp934:
    000010b0: 	movsd	(%r12), %xmm1
    000010b6: 	movsd	(%r13), %xmm0
    000010bc: 	comisd	%xmm1, %xmm0
    000010c0: 	ja	.Ltmp937 # Offset: 4288
    000010c2: 	movsd	-0x8(%r12), %xmm0
    000010c9: 	leaq	-0x8(%r12), %rax
    000010ce: 	comisd	%xmm1, %xmm0
    000010d2: 	jbe	.Ltmp938 # Offset: 4306
    000010d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp939:
    000010e0: 	movsd	%xmm0, 0x8(%rax)
    000010e5: 	movq	%rax, %rdx
    000010e8: 	movsd	-0x8(%rax), %xmm0
    000010ed: 	subq	$0x8, %rax
    000010f1: 	comisd	%xmm1, %xmm0
    000010f5: 	ja	.Ltmp939 # Offset: 4341
.Ltmp1065:
    000010f7: 	movsd	%xmm1, (%rdx)
    000010fb: 	jmp	.Ltmp940 # Offset: 4347
.Ltmp936:
    000010fd: 	movq	0x40(%rsp), %rax
    00001102: 	cmpq	%rax, %rbp
    00001105: 	je	.Ltmp929 # Offset: 4357
    00001107: 	movq	%rax, %rcx
.Ltmp943:
    0000110a: 	movsd	(%rbp), %xmm1
    0000110f: 	movsd	-0x8(%rbp), %xmm0
    00001114: 	leaq	-0x8(%rbp), %rax
    00001118: 	comisd	%xmm1, %xmm0
    0000111c: 	jbe	.Ltmp941 # Offset: 4380
    00001122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp942:
    00001128: 	movsd	%xmm0, 0x8(%rax)
    0000112d: 	movq	%rax, %rdx
    00001130: 	movsd	-0x8(%rax), %xmm0
    00001135: 	subq	$0x8, %rax
    00001139: 	comisd	%xmm1, %xmm0
    0000113d: 	ja	.Ltmp942 # Offset: 4413
.Ltmp1063:
    0000113f: 	addq	$0x8, %rbp
    00001143: 	movsd	%xmm1, (%rdx)
    00001147: 	cmpq	%rcx, %rbp
    0000114a: 	jne	.Ltmp943 # Offset: 4426
.Ltmp929:
    0000114c: 	leaq	0x110(%rsp), %rax
    00001154: 	movq	0x30(%rsp), %rsi
    00001159: 	leaq	DATAat0xd280(%rip), %rdx
    00001160: 	movq	%rax, %rdi
    00001163: 	movq	%rax, 0x60(%rsp)
    00001168: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4456
    0000116d: 	movq	0x80(%rsp), %rax
    00001175: 	movl	iterations(%rip), %ebx
    0000117b: 	movl	$0x1, %edi
    00001180: 	leaq	DATAat0xd1f8(%rip), %rsi
    00001187: 	movq	%rax, 0x18(%rsp)
    0000118c: 	xorl	%eax, %eax
    0000118e: 	movl	%ebx, 0x58(%rsp)
    00001192: 	callq	__printf_chk@PLT # Offset: 4498
    00001197: 	leaq	DATAat0xd228(%rip), %rsi
    0000119e: 	movl	$0x1, %edi
    000011a3: 	xorl	%eax, %eax
    000011a5: 	callq	__printf_chk@PLT # Offset: 4517
    000011aa: 	movslq	%ebx, %rax
    000011ad: 	xorl	%r13d, %r13d
    000011b0: 	movl	$0x4, %ebx
    000011b5: 	movq	%rax, 0x40(%rsp)
    000011ba: 	leaq	0x88(%rsp), %rax
    000011c2: 	movq	%rax, 0x50(%rsp)
    000011c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp950:
    000011d0: 	movl	$0x800000, %eax
    000011d5: 	movq	0x18(%rsp), %rbp
    000011da: 	cltd
    000011db: 	idivl	%ebx
    000011dd: 	movl	$0x8, %edx
    000011e2: 	cltq
    000011e4: 	imulq	0x40(%rsp), %rax
    000011ea: 	cmpq	%rdx, %rax
    000011ed: 	cmovlq	%rdx, %rax
    000011f1: 	movl	$0x70000000, %edx
    000011f6: 	cmpq	%rdx, %rax
    000011f9: 	cmovgq	%rdx, %rax
    000011fd: 	addq	$0x1, %rax
    00001201: 	andq	$-0x2, %rax
    00001205: 	movl	%eax, iterations(%rip)
    0000120b: 	leal	-0x1(%rbx), %eax
    0000120e: 	cltq
.Ltmp944:
    00001210: 	movq	(%rbp), %rbp
    00001214: 	subq	$0x1, %rax
    00001218: 	jae	.Ltmp944 # Offset: 4632
    0000121a: 	movq	0x8(%rsp), %rax
    0000121f: 	movq	0x110(%rsp), %r14
    00001227: 	movq	0x118(%rsp), %r12
    0000122f: 	movq	%rax, 0x130(%rsp)
    00001237: 	movq	%r14, %rax
    0000123a: 	addq	%r12, %rax
    0000123d: 	je	.Ltmp945 # Offset: 4669
    0000123f: 	testq	%r14, %r14
    00001242: 	je	.Ltmp946 # Offset: 4674
.Ltmp945:
    00001248: 	movq	%r12, 0x88(%rsp)
    00001250: 	cmpq	$0xf, %r12
    00001254: 	ja	.Ltmp947 # Offset: 4692
    0000125a: 	cmpq	$0x1, %r12
    0000125e: 	jne	.Ltmp948 # Offset: 4702
    00001264: 	movzbl	(%r14), %eax
    00001268: 	movb	%al, 0x140(%rsp)
    0000126f: 	movq	0x8(%rsp), %rax
.Ltmp1006:
    00001274: 	movq	%r12, 0x138(%rsp)
    0000127c: 	movq	%r15, %rcx
    0000127f: 	movl	%ebx, %edx
    00001281: 	movq	%rbp, %rsi
    00001284: 	movb	$0x0, (%rax,%r12)
    00001289: 	movq	0x18(%rsp), %rdi
    0000128e: 	callq	"_Z11test_rotateISt18_Fwd_list_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4750
    00001293: 	movq	0x130(%rsp), %rdi
    0000129b: 	cmpq	0x8(%rsp), %rdi
    000012a0: 	je	.Ltmp949 # Offset: 4768
    000012a2: 	movq	0x140(%rsp), %rax
    000012aa: 	leaq	0x1(%rax), %rsi
    000012ae: 	callq	_ZdlPvm@PLT # Offset: 4782
.Ltmp949:
    000012b3: 	pxor	%xmm1, %xmm1
    000012b7: 	pxor	%xmm2, %xmm2
    000012bb: 	movl	%ebx, %r8d
    000012be: 	movl	%r13d, %edx
    000012c1: 	cvtsi2sd	%ebx, %xmm2
    000012c5: 	movq	results(%rip), %rax
    000012cc: 	movq	0x110(%rsp), %rcx
    000012d4: 	leaq	DATAat0xd258(%rip), %rsi
    000012db: 	cvtsi2sdl	iterations(%rip), %xmm1
    000012e3: 	movl	$0x1, %edi
    000012e8: 	movsd	(%rax), %xmm0
    000012ec: 	movl	$0x2, %eax
    000012f1: 	mulsd	%xmm2, %xmm1
    000012f5: 	divsd	DATAat0xd498(%rip), %xmm1
    000012fd: 	divsd	%xmm0, %xmm1
    00001301: 	callq	__printf_chk@PLT # Offset: 4865
    00001306: 	movl	$0x0, current_test(%rip)
    00001310: 	addl	$0x1, %r13d
    00001314: 	addl	%ebx, %ebx
    00001316: 	cmpl	$0x16, %r13d
    0000131a: 	jne	.Ltmp950 # Offset: 4890
    00001320: 	movl	0x58(%rsp), %eax
    00001324: 	movq	0x110(%rsp), %rdi
    0000132c: 	movl	%eax, iterations(%rip)
    00001332: 	leaq	0x120(%rsp), %rax
    0000133a: 	movq	%rax, 0x50(%rsp)
    0000133f: 	cmpq	%rax, %rdi
    00001342: 	je	.Ltmp951 # Offset: 4930
    00001344: 	movq	0x120(%rsp), %rax
    0000134c: 	leaq	0x1(%rax), %rsi
    00001350: 	callq	_ZdlPvm@PLT # Offset: 4944
.Ltmp951:
    00001355: 	movq	0x30(%rsp), %rsi
    0000135a: 	leaq	DATAat0xd2a0(%rip), %rdx
    00001361: 	movq	%r15, %rdi
    00001364: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4964
    00001369: 	movq	0x18(%rsp), %rdi
    0000136e: 	movq	%r15, %rcx
    00001371: 	movl	$0x800000, %esi
    00001376: 	leaq	_Z18gries_mills_rotateISt18_Fwd_list_iteratorIdEEvT_S2_S2_(%rip), %rdx
    0000137d: 	callq	_Z17test_rotate_sizesISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4989
    00001382: 	movq	0x130(%rsp), %rdi
    0000138a: 	cmpq	0x8(%rsp), %rdi
    0000138f: 	je	.Ltmp952 # Offset: 5007
    00001391: 	movq	0x140(%rsp), %rax
    00001399: 	leaq	0x1(%rax), %rsi
    0000139d: 	callq	_ZdlPvm@PLT # Offset: 5021
.Ltmp952:
    000013a2: 	movq	0x30(%rsp), %rsi
    000013a7: 	movq	0x60(%rsp), %rdi
    000013ac: 	leaq	DATAat0xd2c0(%rip), %rdx
    000013b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5043
    000013b8: 	movl	iterations(%rip), %ebx
    000013be: 	leaq	DATAat0xd1f8(%rip), %rsi
    000013c5: 	movl	$0x1, %edi
    000013ca: 	xorl	%eax, %eax
    000013cc: 	movl	%ebx, 0x58(%rsp)
    000013d0: 	callq	__printf_chk@PLT # Offset: 5072
    000013d5: 	leaq	DATAat0xd228(%rip), %rsi
    000013dc: 	movl	$0x1, %edi
    000013e1: 	xorl	%eax, %eax
    000013e3: 	callq	__printf_chk@PLT # Offset: 5091
    000013e8: 	movslq	%ebx, %rax
    000013eb: 	xorl	%r13d, %r13d
    000013ee: 	movl	$0x4, %ebx
    000013f3: 	movq	%rax, 0x40(%rsp)
    000013f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp959:
    00001400: 	movl	$0x800000, %eax
    00001405: 	movq	0x18(%rsp), %rbp
    0000140a: 	cltd
    0000140b: 	idivl	%ebx
    0000140d: 	movl	$0x8, %edx
    00001412: 	cltq
    00001414: 	imulq	0x40(%rsp), %rax
    0000141a: 	cmpq	%rdx, %rax
    0000141d: 	cmovlq	%rdx, %rax
    00001421: 	movl	$0x70000000, %edx
    00001426: 	cmpq	%rdx, %rax
    00001429: 	cmovgq	%rdx, %rax
    0000142d: 	addq	$0x1, %rax
    00001431: 	andq	$-0x2, %rax
    00001435: 	movl	%eax, iterations(%rip)
    0000143b: 	leal	-0x1(%rbx), %eax
    0000143e: 	cltq
.Ltmp953:
    00001440: 	movq	(%rbp), %rbp
    00001444: 	subq	$0x1, %rax
    00001448: 	jae	.Ltmp953 # Offset: 5192
    0000144a: 	movq	0x8(%rsp), %rax
    0000144f: 	movq	0x110(%rsp), %r14
    00001457: 	movq	0x118(%rsp), %r12
    0000145f: 	movq	%rax, 0x130(%rsp)
    00001467: 	movq	%r14, %rax
    0000146a: 	addq	%r12, %rax
    0000146d: 	je	.Ltmp954 # Offset: 5229
    0000146f: 	testq	%r14, %r14
    00001472: 	je	.Ltmp955 # Offset: 5234
.Ltmp954:
    00001478: 	movq	%r12, 0x88(%rsp)
    00001480: 	cmpq	$0xf, %r12
    00001484: 	ja	.Ltmp956 # Offset: 5252
    0000148a: 	cmpq	$0x1, %r12
    0000148e: 	jne	.Ltmp957 # Offset: 5262
    00001494: 	movzbl	(%r14), %eax
    00001498: 	movb	%al, 0x140(%rsp)
    0000149f: 	movq	0x8(%rsp), %rax
.Ltmp1004:
    000014a4: 	movq	%r12, 0x138(%rsp)
    000014ac: 	movq	%r15, %rcx
    000014af: 	movl	%ebx, %edx
    000014b1: 	movq	%rbp, %rsi
    000014b4: 	movb	$0x0, (%rax,%r12)
    000014b9: 	movq	0x18(%rsp), %rdi
    000014be: 	callq	"_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 5310
    000014c3: 	movq	0x130(%rsp), %rdi
    000014cb: 	cmpq	0x8(%rsp), %rdi
    000014d0: 	je	.Ltmp958 # Offset: 5328
    000014d2: 	movq	0x140(%rsp), %rax
    000014da: 	leaq	0x1(%rax), %rsi
    000014de: 	callq	_ZdlPvm@PLT # Offset: 5342
.Ltmp958:
    000014e3: 	pxor	%xmm1, %xmm1
    000014e7: 	pxor	%xmm2, %xmm2
    000014eb: 	movl	%ebx, %r8d
    000014ee: 	movl	%r13d, %edx
    000014f1: 	cvtsi2sd	%ebx, %xmm2
    000014f5: 	movq	results(%rip), %rax
    000014fc: 	movq	0x110(%rsp), %rcx
    00001504: 	leaq	DATAat0xd258(%rip), %rsi
    0000150b: 	cvtsi2sdl	iterations(%rip), %xmm1
    00001513: 	movl	$0x1, %edi
    00001518: 	movsd	(%rax), %xmm0
    0000151c: 	movl	$0x2, %eax
    00001521: 	mulsd	%xmm2, %xmm1
    00001525: 	divsd	DATAat0xd498(%rip), %xmm1
    0000152d: 	divsd	%xmm0, %xmm1
    00001531: 	callq	__printf_chk@PLT # Offset: 5425
    00001536: 	movl	$0x0, current_test(%rip)
    00001540: 	addl	$0x1, %r13d
    00001544: 	addl	%ebx, %ebx
    00001546: 	cmpl	$0x16, %r13d
    0000154a: 	jne	.Ltmp959 # Offset: 5450
    00001550: 	movl	0x58(%rsp), %eax
    00001554: 	movq	0x110(%rsp), %rdi
    0000155c: 	movl	%eax, iterations(%rip)
    00001562: 	cmpq	0x50(%rsp), %rdi
    00001567: 	je	.Ltmp960 # Offset: 5479
    00001569: 	movq	0x120(%rsp), %rax
    00001571: 	leaq	0x1(%rax), %rsi
    00001575: 	callq	_ZdlPvm@PLT # Offset: 5493
.Ltmp960:
    0000157a: 	movq	0x30(%rsp), %rsi
    0000157f: 	movq	0x60(%rsp), %rdi
    00001584: 	leaq	DATAat0xd2e8(%rip), %rdx
    0000158b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5515
    00001590: 	movl	iterations(%rip), %ebx
    00001596: 	leaq	DATAat0xd1f8(%rip), %rsi
    0000159d: 	movl	$0x1, %edi
    000015a2: 	xorl	%eax, %eax
    000015a4: 	movl	%ebx, 0x58(%rsp)
    000015a8: 	callq	__printf_chk@PLT # Offset: 5544
    000015ad: 	leaq	DATAat0xd228(%rip), %rsi
    000015b4: 	movl	$0x1, %edi
    000015b9: 	xorl	%eax, %eax
    000015bb: 	callq	__printf_chk@PLT # Offset: 5563
    000015c0: 	movslq	%ebx, %rax
    000015c3: 	xorl	%r13d, %r13d
    000015c6: 	movl	$0x4, %ebx
    000015cb: 	movq	%rax, 0x40(%rsp)
.Ltmp967:
    000015d0: 	movl	$0x800000, %eax
    000015d5: 	movq	0x18(%rsp), %rbp
    000015da: 	cltd
    000015db: 	idivl	%ebx
    000015dd: 	movl	$0x8, %edx
    000015e2: 	cltq
    000015e4: 	imulq	0x40(%rsp), %rax
    000015ea: 	cmpq	%rdx, %rax
    000015ed: 	cmovlq	%rdx, %rax
    000015f1: 	movl	$0x70000000, %edx
    000015f6: 	cmpq	%rdx, %rax
    000015f9: 	cmovgq	%rdx, %rax
    000015fd: 	addq	$0x1, %rax
    00001601: 	andq	$-0x2, %rax
    00001605: 	movl	%eax, iterations(%rip)
    0000160b: 	leal	-0x1(%rbx), %eax
    0000160e: 	cltq
.Ltmp961:
    00001610: 	movq	(%rbp), %rbp
    00001614: 	subq	$0x1, %rax
    00001618: 	jae	.Ltmp961 # Offset: 5656
    0000161a: 	movq	0x8(%rsp), %rax
    0000161f: 	movq	0x110(%rsp), %r14
    00001627: 	movq	0x118(%rsp), %r12
    0000162f: 	movq	%rax, 0x130(%rsp)
    00001637: 	movq	%r14, %rax
    0000163a: 	addq	%r12, %rax
    0000163d: 	je	.Ltmp962 # Offset: 5693
    0000163f: 	testq	%r14, %r14
    00001642: 	je	.Ltmp963 # Offset: 5698
.Ltmp962:
    00001648: 	movq	%r12, 0x88(%rsp)
    00001650: 	cmpq	$0xf, %r12
    00001654: 	ja	.Ltmp964 # Offset: 5716
    0000165a: 	cmpq	$0x1, %r12
    0000165e: 	jne	.Ltmp965 # Offset: 5726
    00001664: 	movzbl	(%r14), %eax
    00001668: 	movb	%al, 0x140(%rsp)
    0000166f: 	movq	0x8(%rsp), %rax
.Ltmp1014:
    00001674: 	movq	%r12, 0x138(%rsp)
    0000167c: 	movq	%r15, %rcx
    0000167f: 	movl	%ebx, %edx
    00001681: 	movq	%rbp, %rsi
    00001684: 	movb	$0x0, (%rax,%r12)
    00001689: 	movq	0x18(%rsp), %rdi
    0000168e: 	callq	"_Z11test_rotateISt18_Fwd_list_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5774
    00001693: 	movq	0x130(%rsp), %rdi
    0000169b: 	cmpq	0x8(%rsp), %rdi
    000016a0: 	je	.Ltmp966 # Offset: 5792
    000016a2: 	movq	0x140(%rsp), %rax
    000016aa: 	leaq	0x1(%rax), %rsi
    000016ae: 	callq	_ZdlPvm@PLT # Offset: 5806
.Ltmp966:
    000016b3: 	pxor	%xmm1, %xmm1
    000016b7: 	pxor	%xmm2, %xmm2
    000016bb: 	movl	%ebx, %r8d
    000016be: 	movl	%r13d, %edx
    000016c1: 	cvtsi2sd	%ebx, %xmm2
    000016c5: 	movq	results(%rip), %rax
    000016cc: 	movq	0x110(%rsp), %rcx
    000016d4: 	leaq	DATAat0xd258(%rip), %rsi
    000016db: 	cvtsi2sdl	iterations(%rip), %xmm1
    000016e3: 	movl	$0x1, %edi
    000016e8: 	movsd	(%rax), %xmm0
    000016ec: 	movl	$0x2, %eax
    000016f1: 	mulsd	%xmm2, %xmm1
    000016f5: 	divsd	DATAat0xd498(%rip), %xmm1
    000016fd: 	divsd	%xmm0, %xmm1
    00001701: 	callq	__printf_chk@PLT # Offset: 5889
    00001706: 	movl	$0x0, current_test(%rip)
    00001710: 	addl	$0x1, %r13d
    00001714: 	addl	%ebx, %ebx
    00001716: 	cmpl	$0x16, %r13d
    0000171a: 	jne	.Ltmp967 # Offset: 5914
    00001720: 	movl	0x58(%rsp), %eax
    00001724: 	movq	0x110(%rsp), %rdi
    0000172c: 	movl	%eax, iterations(%rip)
    00001732: 	cmpq	0x50(%rsp), %rdi
    00001737: 	je	.Ltmp968 # Offset: 5943
    00001739: 	movq	0x120(%rsp), %rax
    00001741: 	leaq	0x1(%rax), %rsi
    00001745: 	callq	_ZdlPvm@PLT # Offset: 5957
.Ltmp968:
    0000174a: 	movq	0x30(%rsp), %rsi
    0000174f: 	movq	0x60(%rsp), %rdi
    00001754: 	leaq	DATAat0xd3d0(%rip), %rdx
    0000175b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5979
    00001760: 	movq	0x90(%rsp), %rax
    00001768: 	movl	iterations(%rip), %ebx
    0000176e: 	movl	$0x1, %edi
    00001773: 	leaq	DATAat0xd1f8(%rip), %rsi
    0000177a: 	movq	%rax, 0x40(%rsp)
    0000177f: 	xorl	%eax, %eax
    00001781: 	movl	%ebx, 0x74(%rsp)
    00001785: 	callq	__printf_chk@PLT # Offset: 6021
    0000178a: 	leaq	DATAat0xd228(%rip), %rsi
    00001791: 	movl	$0x1, %edi
    00001796: 	xorl	%eax, %eax
    00001798: 	callq	__printf_chk@PLT # Offset: 6040
    0000179d: 	movslq	%ebx, %rax
    000017a0: 	xorl	%r13d, %r13d
    000017a3: 	movl	$0x4, %ebx
    000017a8: 	movq	%rax, 0x58(%rsp)
    000017ad: 	nopl	(%rax) # Size: 3
.Ltmp975:
    000017b0: 	movl	$0x800000, %eax
    000017b5: 	movq	0x40(%rsp), %rbp
    000017ba: 	cltd
    000017bb: 	idivl	%ebx
    000017bd: 	movl	$0x8, %edx
    000017c2: 	cltq
    000017c4: 	imulq	0x58(%rsp), %rax
    000017ca: 	cmpq	%rdx, %rax
    000017cd: 	cmovlq	%rdx, %rax
    000017d1: 	movl	$0x70000000, %edx
    000017d6: 	cmpq	%rdx, %rax
    000017d9: 	cmovgq	%rdx, %rax
    000017dd: 	addq	$0x1, %rax
    000017e1: 	andq	$-0x2, %rax
    000017e5: 	movl	%eax, iterations(%rip)
    000017eb: 	leal	-0x1(%rbx), %eax
    000017ee: 	cltq
.Ltmp969:
    000017f0: 	movq	(%rbp), %rbp
    000017f4: 	subq	$0x1, %rax
    000017f8: 	jae	.Ltmp969 # Offset: 6136
    000017fa: 	movq	0x8(%rsp), %rax
    000017ff: 	movq	0x110(%rsp), %r14
    00001807: 	movq	0x118(%rsp), %r12
    0000180f: 	movq	%rax, 0x130(%rsp)
    00001817: 	movq	%r14, %rax
    0000181a: 	addq	%r12, %rax
    0000181d: 	je	.Ltmp970 # Offset: 6173
    0000181f: 	testq	%r14, %r14
    00001822: 	je	.Ltmp971 # Offset: 6178
.Ltmp970:
    00001828: 	movq	%r12, 0x88(%rsp)
    00001830: 	cmpq	$0xf, %r12
    00001834: 	ja	.Ltmp972 # Offset: 6196
    0000183a: 	cmpq	$0x1, %r12
    0000183e: 	jne	.Ltmp973 # Offset: 6206
    00001844: 	movzbl	(%r14), %eax
    00001848: 	movb	%al, 0x140(%rsp)
    0000184f: 	movq	0x8(%rsp), %rax
.Ltmp1012:
    00001854: 	movq	%r12, 0x138(%rsp)
    0000185c: 	movq	%r15, %rcx
    0000185f: 	movl	%ebx, %edx
    00001861: 	movq	%rbp, %rsi
    00001864: 	movb	$0x0, (%rax,%r12)
    00001869: 	movq	0x40(%rsp), %rdi
    0000186e: 	callq	"_Z11test_rotateISt14_List_iteratorIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6254
    00001873: 	movq	0x130(%rsp), %rdi
    0000187b: 	cmpq	0x8(%rsp), %rdi
    00001880: 	je	.Ltmp974 # Offset: 6272
    00001882: 	movq	0x140(%rsp), %rax
    0000188a: 	leaq	0x1(%rax), %rsi
    0000188e: 	callq	_ZdlPvm@PLT # Offset: 6286
.Ltmp974:
    00001893: 	pxor	%xmm1, %xmm1
    00001897: 	pxor	%xmm2, %xmm2
    0000189b: 	movl	%ebx, %r8d
    0000189e: 	movl	%r13d, %edx
    000018a1: 	cvtsi2sd	%ebx, %xmm2
    000018a5: 	movq	results(%rip), %rax
    000018ac: 	movq	0x110(%rsp), %rcx
    000018b4: 	leaq	DATAat0xd258(%rip), %rsi
    000018bb: 	cvtsi2sdl	iterations(%rip), %xmm1
    000018c3: 	movl	$0x1, %edi
    000018c8: 	movsd	(%rax), %xmm0
    000018cc: 	movl	$0x2, %eax
    000018d1: 	mulsd	%xmm2, %xmm1
    000018d5: 	divsd	DATAat0xd498(%rip), %xmm1
    000018dd: 	divsd	%xmm0, %xmm1
    000018e1: 	callq	__printf_chk@PLT # Offset: 6369
    000018e6: 	movl	$0x0, current_test(%rip)
    000018f0: 	addl	$0x1, %r13d
    000018f4: 	addl	%ebx, %ebx
    000018f6: 	cmpl	$0x16, %r13d
    000018fa: 	jne	.Ltmp975 # Offset: 6394
    00001900: 	movl	0x74(%rsp), %eax
    00001904: 	movq	0x110(%rsp), %rdi
    0000190c: 	movl	%eax, iterations(%rip)
    00001912: 	cmpq	0x50(%rsp), %rdi
    00001917: 	je	.Ltmp976 # Offset: 6423
    00001919: 	movq	0x120(%rsp), %rax
    00001921: 	leaq	0x1(%rax), %rsi
    00001925: 	callq	_ZdlPvm@PLT # Offset: 6437
.Ltmp976:
    0000192a: 	movq	0x30(%rsp), %rsi
    0000192f: 	leaq	DATAat0xd3e7(%rip), %rdx
    00001936: 	movq	%r15, %rdi
    00001939: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6457
    0000193e: 	movq	0x90(%rsp), %rdi
    00001946: 	movq	%r15, %rcx
    00001949: 	movl	$0x800000, %esi
    0000194e: 	leaq	_Z18gries_mills_rotateISt14_List_iteratorIdEEvT_S2_S2_(%rip), %rdx
    00001955: 	callq	_Z17test_rotate_sizesISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6485
    0000195a: 	movq	0x130(%rsp), %rdi
    00001962: 	cmpq	0x8(%rsp), %rdi
    00001967: 	je	.Ltmp977 # Offset: 6503
    00001969: 	movq	0x140(%rsp), %rax
    00001971: 	leaq	0x1(%rax), %rsi
    00001975: 	callq	_ZdlPvm@PLT # Offset: 6517
.Ltmp977:
    0000197a: 	movq	0x30(%rsp), %rsi
    0000197f: 	movq	0x60(%rsp), %rdi
    00001984: 	leaq	DATAat0xd318(%rip), %rdx
    0000198b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6539
    00001990: 	movq	0x90(%rsp), %rax
    00001998: 	movl	iterations(%rip), %ebx
    0000199e: 	movl	$0x1, %edi
    000019a3: 	leaq	DATAat0xd1f8(%rip), %rsi
    000019aa: 	movq	%rax, 0x40(%rsp)
    000019af: 	xorl	%eax, %eax
    000019b1: 	movl	%ebx, 0x74(%rsp)
    000019b5: 	callq	__printf_chk@PLT # Offset: 6581
    000019ba: 	leaq	DATAat0xd228(%rip), %rsi
    000019c1: 	movl	$0x1, %edi
    000019c6: 	xorl	%eax, %eax
    000019c8: 	callq	__printf_chk@PLT # Offset: 6600
    000019cd: 	movslq	%ebx, %rax
    000019d0: 	xorl	%r13d, %r13d
    000019d3: 	movl	$0x4, %ebx
    000019d8: 	movq	%rax, 0x58(%rsp)
    000019dd: 	nopl	(%rax) # Size: 3
.Ltmp984:
    000019e0: 	movl	$0x800000, %eax
    000019e5: 	movq	0x40(%rsp), %rbp
    000019ea: 	cltd
    000019eb: 	idivl	%ebx
    000019ed: 	movl	$0x8, %edx
    000019f2: 	cltq
    000019f4: 	imulq	0x58(%rsp), %rax
    000019fa: 	cmpq	%rdx, %rax
    000019fd: 	cmovlq	%rdx, %rax
    00001a01: 	movl	$0x70000000, %edx
    00001a06: 	cmpq	%rdx, %rax
    00001a09: 	cmovgq	%rdx, %rax
    00001a0d: 	addq	$0x1, %rax
    00001a11: 	andq	$-0x2, %rax
    00001a15: 	movl	%eax, iterations(%rip)
    00001a1b: 	leal	-0x1(%rbx), %eax
    00001a1e: 	cltq
.Ltmp978:
    00001a20: 	movq	(%rbp), %rbp
    00001a24: 	subq	$0x1, %rax
    00001a28: 	jae	.Ltmp978 # Offset: 6696
    00001a2a: 	movq	0x8(%rsp), %rax
    00001a2f: 	movq	0x110(%rsp), %r14
    00001a37: 	movq	0x118(%rsp), %r12
    00001a3f: 	movq	%rax, 0x130(%rsp)
    00001a47: 	movq	%r14, %rax
    00001a4a: 	addq	%r12, %rax
    00001a4d: 	je	.Ltmp979 # Offset: 6733
    00001a4f: 	testq	%r14, %r14
    00001a52: 	je	.Ltmp980 # Offset: 6738
.Ltmp979:
    00001a58: 	movq	%r12, 0x88(%rsp)
    00001a60: 	cmpq	$0xf, %r12
    00001a64: 	ja	.Ltmp981 # Offset: 6756
    00001a6a: 	cmpq	$0x1, %r12
    00001a6e: 	jne	.Ltmp982 # Offset: 6766
    00001a74: 	movzbl	(%r14), %eax
    00001a78: 	movb	%al, 0x140(%rsp)
    00001a7f: 	movq	0x8(%rsp), %rax
.Ltmp1010:
    00001a84: 	movq	%r12, 0x138(%rsp)
    00001a8c: 	movq	%r15, %rcx
    00001a8f: 	movl	%ebx, %edx
    00001a91: 	movq	%rbp, %rsi
    00001a94: 	movb	$0x0, (%rax,%r12)
    00001a99: 	movq	0x40(%rsp), %rdi
    00001a9e: 	callq	"_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 6814
    00001aa3: 	movq	0x130(%rsp), %rdi
    00001aab: 	cmpq	0x8(%rsp), %rdi
    00001ab0: 	je	.Ltmp983 # Offset: 6832
    00001ab2: 	movq	0x140(%rsp), %rax
    00001aba: 	leaq	0x1(%rax), %rsi
    00001abe: 	callq	_ZdlPvm@PLT # Offset: 6846
.Ltmp983:
    00001ac3: 	pxor	%xmm1, %xmm1
    00001ac7: 	pxor	%xmm2, %xmm2
    00001acb: 	movl	%ebx, %r8d
    00001ace: 	movl	%r13d, %edx
    00001ad1: 	cvtsi2sd	%ebx, %xmm2
    00001ad5: 	movq	results(%rip), %rax
    00001adc: 	movq	0x110(%rsp), %rcx
    00001ae4: 	leaq	DATAat0xd258(%rip), %rsi
    00001aeb: 	cvtsi2sdl	iterations(%rip), %xmm1
    00001af3: 	movl	$0x1, %edi
    00001af8: 	movsd	(%rax), %xmm0
    00001afc: 	movl	$0x2, %eax
    00001b01: 	mulsd	%xmm2, %xmm1
    00001b05: 	divsd	DATAat0xd498(%rip), %xmm1
    00001b0d: 	divsd	%xmm0, %xmm1
    00001b11: 	callq	__printf_chk@PLT # Offset: 6929
    00001b16: 	movl	$0x0, current_test(%rip)
    00001b20: 	addl	$0x1, %r13d
    00001b24: 	addl	%ebx, %ebx
    00001b26: 	cmpl	$0x16, %r13d
    00001b2a: 	jne	.Ltmp984 # Offset: 6954
    00001b30: 	movl	0x74(%rsp), %eax
    00001b34: 	movq	0x110(%rsp), %rdi
    00001b3c: 	movl	%eax, iterations(%rip)
    00001b42: 	cmpq	0x50(%rsp), %rdi
    00001b47: 	je	.Ltmp985 # Offset: 6983
    00001b49: 	movq	0x120(%rsp), %rax
    00001b51: 	leaq	0x1(%rax), %rsi
    00001b55: 	callq	_ZdlPvm@PLT # Offset: 6997
.Ltmp985:
    00001b5a: 	movq	0x30(%rsp), %rsi
    00001b5f: 	movq	0x60(%rsp), %rdi
    00001b64: 	leaq	DATAat0xd338(%rip), %rdx
    00001b6b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7019
    00001b70: 	movq	0x90(%rsp), %rax
    00001b78: 	movl	iterations(%rip), %ebx
    00001b7e: 	movl	$0x1, %edi
    00001b83: 	leaq	DATAat0xd1f8(%rip), %rsi
    00001b8a: 	movq	%rax, 0x40(%rsp)
    00001b8f: 	xorl	%eax, %eax
    00001b91: 	movl	%ebx, 0x74(%rsp)
    00001b95: 	callq	__printf_chk@PLT # Offset: 7061
    00001b9a: 	leaq	DATAat0xd228(%rip), %rsi
    00001ba1: 	movl	$0x1, %edi
    00001ba6: 	xorl	%eax, %eax
    00001ba8: 	callq	__printf_chk@PLT # Offset: 7080
    00001bad: 	movslq	%ebx, %rax
    00001bb0: 	xorl	%r13d, %r13d
    00001bb3: 	movl	$0x4, %ebx
    00001bb8: 	movq	%rax, 0x58(%rsp)
    00001bbd: 	nopl	(%rax) # Size: 3
.Ltmp992:
    00001bc0: 	movl	$0x800000, %eax
    00001bc5: 	movq	0x40(%rsp), %rbp
    00001bca: 	cltd
    00001bcb: 	idivl	%ebx
    00001bcd: 	movl	$0x8, %edx
    00001bd2: 	cltq
    00001bd4: 	imulq	0x58(%rsp), %rax
    00001bda: 	cmpq	%rdx, %rax
    00001bdd: 	cmovlq	%rdx, %rax
    00001be1: 	movl	$0x70000000, %edx
    00001be6: 	cmpq	%rdx, %rax
    00001be9: 	cmovgq	%rdx, %rax
    00001bed: 	addq	$0x1, %rax
    00001bf1: 	andq	$-0x2, %rax
    00001bf5: 	movl	%eax, iterations(%rip)
    00001bfb: 	leal	-0x1(%rbx), %eax
    00001bfe: 	cltq
.Ltmp986:
    00001c00: 	movq	(%rbp), %rbp
    00001c04: 	subq	$0x1, %rax
    00001c08: 	jae	.Ltmp986 # Offset: 7176
    00001c0a: 	movq	0x8(%rsp), %rax
    00001c0f: 	movq	0x110(%rsp), %r14
    00001c17: 	movq	0x118(%rsp), %r12
    00001c1f: 	movq	%rax, 0x130(%rsp)
    00001c27: 	movq	%r14, %rax
    00001c2a: 	addq	%r12, %rax
    00001c2d: 	je	.Ltmp987 # Offset: 7213
    00001c2f: 	testq	%r14, %r14
    00001c32: 	je	.Ltmp988 # Offset: 7218
.Ltmp987:
    00001c38: 	movq	%r12, 0x88(%rsp)
    00001c40: 	cmpq	$0xf, %r12
    00001c44: 	ja	.Ltmp989 # Offset: 7236
    00001c4a: 	cmpq	$0x1, %r12
    00001c4e: 	jne	.Ltmp990 # Offset: 7246
    00001c54: 	movzbl	(%r14), %eax
    00001c58: 	movb	%al, 0x140(%rsp)
    00001c5f: 	movq	0x8(%rsp), %rax
.Ltmp1008:
    00001c64: 	movq	%r12, 0x138(%rsp)
    00001c6c: 	movq	%r15, %rcx
    00001c6f: 	movl	%ebx, %edx
    00001c71: 	movq	%rbp, %rsi
    00001c74: 	movb	$0x0, (%rax,%r12)
    00001c79: 	movq	0x40(%rsp), %rdi
    00001c7e: 	callq	"_Z11test_rotateISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7294
    00001c83: 	movq	0x130(%rsp), %rdi
    00001c8b: 	cmpq	0x8(%rsp), %rdi
    00001c90: 	je	.Ltmp991 # Offset: 7312
    00001c92: 	movq	0x140(%rsp), %rax
    00001c9a: 	leaq	0x1(%rax), %rsi
    00001c9e: 	callq	_ZdlPvm@PLT # Offset: 7326
.Ltmp991:
    00001ca3: 	pxor	%xmm1, %xmm1
    00001ca7: 	pxor	%xmm2, %xmm2
    00001cab: 	movl	%ebx, %r8d
    00001cae: 	movl	%r13d, %edx
    00001cb1: 	cvtsi2sd	%ebx, %xmm2
    00001cb5: 	movq	results(%rip), %rax
    00001cbc: 	movq	0x110(%rsp), %rcx
    00001cc4: 	leaq	DATAat0xd258(%rip), %rsi
    00001ccb: 	cvtsi2sdl	iterations(%rip), %xmm1
    00001cd3: 	movl	$0x1, %edi
    00001cd8: 	movsd	(%rax), %xmm0
    00001cdc: 	movl	$0x2, %eax
    00001ce1: 	mulsd	%xmm2, %xmm1
    00001ce5: 	divsd	DATAat0xd498(%rip), %xmm1
    00001ced: 	divsd	%xmm0, %xmm1
    00001cf1: 	callq	__printf_chk@PLT # Offset: 7409
    00001cf6: 	movl	$0x0, current_test(%rip)
    00001d00: 	addl	$0x1, %r13d
    00001d04: 	addl	%ebx, %ebx
    00001d06: 	cmpl	$0x16, %r13d
    00001d0a: 	jne	.Ltmp992 # Offset: 7434
    00001d10: 	movl	0x74(%rsp), %eax
    00001d14: 	movq	0x110(%rsp), %rdi
    00001d1c: 	movl	%eax, iterations(%rip)
    00001d22: 	cmpq	0x50(%rsp), %rdi
    00001d27: 	je	.Ltmp993 # Offset: 7463
    00001d29: 	movq	0x120(%rsp), %rax
    00001d31: 	leaq	0x1(%rax), %rsi
    00001d35: 	callq	_ZdlPvm@PLT # Offset: 7477
.Ltmp993:
    00001d3a: 	movq	0x30(%rsp), %rsi
    00001d3f: 	leaq	DATAat0xd3fe(%rip), %rdx
    00001d46: 	movq	%r15, %rdi
    00001d49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7497
    00001d4e: 	movq	0x90(%rsp), %rdi
    00001d56: 	movq	%r15, %rcx
    00001d59: 	movl	$0x800000, %esi
    00001d5e: 	leaq	_Z20three_reverse_rotateISt14_List_iteratorIdEEvT_S2_S2_(%rip), %rdx
    00001d65: 	callq	_Z17test_rotate_sizesISt14_List_iteratorIdEPFvS1_S1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7525
    00001d6a: 	movq	0x130(%rsp), %rdi
    00001d72: 	cmpq	0x8(%rsp), %rdi
    00001d77: 	je	.Ltmp994 # Offset: 7543
    00001d79: 	movq	0x140(%rsp), %rax
    00001d81: 	leaq	0x1(%rax), %rsi
    00001d85: 	callq	_ZdlPvm@PLT # Offset: 7557
.Ltmp994:
    00001d8a: 	movq	0x30(%rsp), %rsi
    00001d8f: 	movq	0x60(%rsp), %rdi
    00001d94: 	leaq	DATAat0xd418(%rip), %rdx
    00001d9b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7579
    00001da0: 	movl	iterations(%rip), %ebx
    00001da6: 	leaq	DATAat0xd1f8(%rip), %rsi
    00001dad: 	movl	$0x1, %edi
    00001db2: 	xorl	%eax, %eax
    00001db4: 	movl	%ebx, 0x58(%rsp)
    00001db8: 	callq	__printf_chk@PLT # Offset: 7608
    00001dbd: 	leaq	DATAat0xd228(%rip), %rsi
    00001dc4: 	movl	$0x1, %edi
    00001dc9: 	xorl	%eax, %eax
    00001dcb: 	callq	__printf_chk@PLT # Offset: 7627
    00001dd0: 	movslq	%ebx, %rax
    00001dd3: 	xorl	%ebp, %ebp
    00001dd5: 	movl	$0x4, %ebx
    00001dda: 	movq	%rax, 0x40(%rsp)
    00001ddf: 	jmp	.Ltmp995 # Offset: 7647
    00001de4: 	nopl	(%rax) # Size: 4
.Ltmp1001:
    00001de8: 	cmpq	$0x1, %r12
    00001dec: 	jne	.Ltmp996 # Offset: 7660
    00001df2: 	movzbl	(%r13), %eax
    00001df7: 	movb	%al, 0x140(%rsp)
    00001dfe: 	movq	0x8(%rsp), %rax
.Ltmp1002:
    00001e03: 	movq	%r12, 0x138(%rsp)
    00001e0b: 	movq	%r15, %rcx
    00001e0e: 	movl	%ebx, %edx
    00001e10: 	movq	%r14, %rsi
    00001e13: 	movb	$0x0, (%rax,%r12)
    00001e18: 	movq	0x10(%rsp), %rdi
    00001e1d: 	callq	"_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFS6_S6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7709
    00001e22: 	movq	0x130(%rsp), %rdi
    00001e2a: 	cmpq	0x8(%rsp), %rdi
    00001e2f: 	je	.Ltmp997 # Offset: 7727
    00001e31: 	movq	0x140(%rsp), %rax
    00001e39: 	leaq	0x1(%rax), %rsi
    00001e3d: 	callq	_ZdlPvm@PLT # Offset: 7741
.Ltmp997:
    00001e42: 	pxor	%xmm1, %xmm1
    00001e46: 	pxor	%xmm2, %xmm2
    00001e4a: 	movl	%ebx, %r8d
    00001e4d: 	movl	%ebp, %edx
    00001e4f: 	cvtsi2sd	%ebx, %xmm2
    00001e53: 	movq	results(%rip), %rax
    00001e5a: 	movq	0x110(%rsp), %rcx
    00001e62: 	leaq	DATAat0xd258(%rip), %rsi
    00001e69: 	cvtsi2sdl	iterations(%rip), %xmm1
    00001e71: 	movl	$0x1, %edi
    00001e76: 	movsd	(%rax), %xmm0
    00001e7a: 	movl	$0x2, %eax
    00001e7f: 	mulsd	%xmm2, %xmm1
    00001e83: 	divsd	DATAat0xd498(%rip), %xmm1
    00001e8b: 	divsd	%xmm0, %xmm1
    00001e8f: 	callq	__printf_chk@PLT # Offset: 7823
    00001e94: 	movl	$0x0, current_test(%rip)
    00001e9e: 	addl	$0x1, %ebp
    00001ea1: 	addl	%ebx, %ebx
    00001ea3: 	cmpl	$0x16, %ebp
    00001ea6: 	je	.Ltmp998 # Offset: 7846
.Ltmp995:
    00001eac: 	movl	$0x800000, %eax
    00001eb1: 	movq	0x10(%rsp), %rcx
    00001eb6: 	movq	0x110(%rsp), %r13
    00001ebe: 	cltd
    00001ebf: 	movq	0x118(%rsp), %r12
    00001ec7: 	idivl	%ebx
    00001ec9: 	movl	$0x8, %edx
    00001ece: 	cltq
    00001ed0: 	imulq	0x40(%rsp), %rax
    00001ed6: 	cmpq	%rdx, %rax
    00001ed9: 	cmovlq	%rdx, %rax
    00001edd: 	movl	$0x70000000, %edx
    00001ee2: 	cmpq	%rdx, %rax
    00001ee5: 	cmovgq	%rdx, %rax
    00001ee9: 	addq	$0x1, %rax
    00001eed: 	andq	$-0x2, %rax
    00001ef1: 	movl	%eax, iterations(%rip)
    00001ef7: 	movslq	%ebx, %rax
    00001efa: 	leaq	(%rcx,%rax,8), %r14
    00001efe: 	movq	0x8(%rsp), %rax
    00001f03: 	movq	%rax, 0x130(%rsp)
    00001f0b: 	movq	%r13, %rax
    00001f0e: 	addq	%r12, %rax
    00001f11: 	je	.Ltmp999 # Offset: 7953
    00001f13: 	testq	%r13, %r13
    00001f16: 	je	.Ltmp1000 # Offset: 7958
.Ltmp999:
    00001f1c: 	movq	%r12, 0x88(%rsp)
    00001f24: 	cmpq	$0xf, %r12
    00001f28: 	jbe	.Ltmp1001 # Offset: 7976
    00001f2e: 	leaq	0x88(%rsp), %rsi
    00001f36: 	xorl	%edx, %edx
    00001f38: 	movq	%r15, %rdi
    00001f3b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7995
    00001f40: 	movq	%rax, 0x130(%rsp)
    00001f48: 	movq	%rax, %rdi
    00001f4b: 	movq	0x88(%rsp), %rax
    00001f53: 	movq	%rax, 0x140(%rsp)
.Ltmp1070:
    00001f5b: 	movq	%r12, %rdx
    00001f5e: 	movq	%r13, %rsi
    00001f61: 	callq	memcpy@PLT # Offset: 8033
    00001f66: 	movq	0x88(%rsp), %r12
    00001f6e: 	movq	0x130(%rsp), %rax
    00001f76: 	jmp	.Ltmp1002 # Offset: 8054
.Ltmp957:
    00001f7b: 	testq	%r12, %r12
    00001f7e: 	jne	.Ltmp1003 # Offset: 8062
    00001f84: 	movq	0x8(%rsp), %rax
    00001f89: 	jmp	.Ltmp1004 # Offset: 8073
.Ltmp948:
    00001f8e: 	testq	%r12, %r12
    00001f91: 	jne	.Ltmp1005 # Offset: 8081
    00001f97: 	movq	0x8(%rsp), %rax
    00001f9c: 	jmp	.Ltmp1006 # Offset: 8092
.Ltmp990:
    00001fa1: 	testq	%r12, %r12
    00001fa4: 	jne	.Ltmp1007 # Offset: 8100
    00001faa: 	movq	0x8(%rsp), %rax
    00001faf: 	jmp	.Ltmp1008 # Offset: 8111
.Ltmp982:
    00001fb4: 	testq	%r12, %r12
    00001fb7: 	jne	.Ltmp1009 # Offset: 8119
    00001fbd: 	movq	0x8(%rsp), %rax
    00001fc2: 	jmp	.Ltmp1010 # Offset: 8130
.Ltmp973:
    00001fc7: 	testq	%r12, %r12
    00001fca: 	jne	.Ltmp1011 # Offset: 8138
    00001fd0: 	movq	0x8(%rsp), %rax
    00001fd5: 	jmp	.Ltmp1012 # Offset: 8149
.Ltmp965:
    00001fda: 	testq	%r12, %r12
    00001fdd: 	jne	.Ltmp1013 # Offset: 8157
    00001fe3: 	movq	0x8(%rsp), %rax
    00001fe8: 	jmp	.Ltmp1014 # Offset: 8168
.Ltmp996:
    00001fed: 	testq	%r12, %r12
    00001ff0: 	jne	.Ltmp1015 # Offset: 8176
    00001ff6: 	movq	0x8(%rsp), %rax
    00001ffb: 	jmp	.Ltmp1002 # Offset: 8187
.Ltmp956:
    00002000: 	leaq	0x88(%rsp), %rsi
    00002008: 	xorl	%edx, %edx
    0000200a: 	movq	%r15, %rdi
    0000200d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8205
    00002012: 	movq	%rax, 0x130(%rsp)
    0000201a: 	movq	%rax, %rdi
    0000201d: 	movq	0x88(%rsp), %rax
    00002025: 	movq	%rax, 0x140(%rsp)
.Ltmp1076:
    0000202d: 	movq	%r12, %rdx
    00002030: 	movq	%r14, %rsi
    00002033: 	callq	memcpy@PLT # Offset: 8243
    00002038: 	movq	0x88(%rsp), %r12
    00002040: 	movq	0x130(%rsp), %rax
    00002048: 	jmp	.Ltmp1004 # Offset: 8264
.Ltmp947:
    0000204d: 	movq	0x50(%rsp), %rsi
    00002052: 	xorl	%edx, %edx
    00002054: 	movq	%r15, %rdi
    00002057: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8279
    0000205c: 	movq	%rax, 0x130(%rsp)
    00002064: 	movq	%rax, %rdi
    00002067: 	movq	0x88(%rsp), %rax
    0000206f: 	movq	%rax, 0x140(%rsp)
.Ltmp1075:
    00002077: 	movq	%r12, %rdx
    0000207a: 	movq	%r14, %rsi
    0000207d: 	callq	memcpy@PLT # Offset: 8317
    00002082: 	movq	0x88(%rsp), %r12
    0000208a: 	movq	0x130(%rsp), %rax
    00002092: 	jmp	.Ltmp1006 # Offset: 8338
.Ltmp972:
    00002097: 	leaq	0x88(%rsp), %rsi
    0000209f: 	xorl	%edx, %edx
    000020a1: 	movq	%r15, %rdi
    000020a4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8356
    000020a9: 	movq	%rax, 0x130(%rsp)
    000020b1: 	movq	%rax, %rdi
    000020b4: 	movq	0x88(%rsp), %rax
    000020bc: 	movq	%rax, 0x140(%rsp)
.Ltmp1072:
    000020c4: 	movq	%r12, %rdx
    000020c7: 	movq	%r14, %rsi
    000020ca: 	callq	memcpy@PLT # Offset: 8394
    000020cf: 	movq	0x88(%rsp), %r12
    000020d7: 	movq	0x130(%rsp), %rax
    000020df: 	jmp	.Ltmp1012 # Offset: 8415
.Ltmp964:
    000020e4: 	leaq	0x88(%rsp), %rsi
    000020ec: 	xorl	%edx, %edx
    000020ee: 	movq	%r15, %rdi
    000020f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8433
    000020f6: 	movq	%rax, 0x130(%rsp)
    000020fe: 	movq	%rax, %rdi
    00002101: 	movq	0x88(%rsp), %rax
    00002109: 	movq	%rax, 0x140(%rsp)
.Ltmp1071:
    00002111: 	movq	%r12, %rdx
    00002114: 	movq	%r14, %rsi
    00002117: 	callq	memcpy@PLT # Offset: 8471
    0000211c: 	movq	0x88(%rsp), %r12
    00002124: 	movq	0x130(%rsp), %rax
    0000212c: 	jmp	.Ltmp1014 # Offset: 8492
.Ltmp981:
    00002131: 	leaq	0x88(%rsp), %rsi
    00002139: 	xorl	%edx, %edx
    0000213b: 	movq	%r15, %rdi
    0000213e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8510
    00002143: 	movq	%rax, 0x130(%rsp)
    0000214b: 	movq	%rax, %rdi
    0000214e: 	movq	0x88(%rsp), %rax
    00002156: 	movq	%rax, 0x140(%rsp)
.Ltmp1073:
    0000215e: 	movq	%r12, %rdx
    00002161: 	movq	%r14, %rsi
    00002164: 	callq	memcpy@PLT # Offset: 8548
    00002169: 	movq	0x88(%rsp), %r12
    00002171: 	movq	0x130(%rsp), %rax
    00002179: 	jmp	.Ltmp1010 # Offset: 8569
.Ltmp989:
    0000217e: 	leaq	0x88(%rsp), %rsi
    00002186: 	xorl	%edx, %edx
    00002188: 	movq	%r15, %rdi
    0000218b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8587
    00002190: 	movq	%rax, 0x130(%rsp)
    00002198: 	movq	%rax, %rdi
    0000219b: 	movq	0x88(%rsp), %rax
    000021a3: 	movq	%rax, 0x140(%rsp)
.Ltmp1074:
    000021ab: 	movq	%r12, %rdx
    000021ae: 	movq	%r14, %rsi
    000021b1: 	callq	memcpy@PLT # Offset: 8625
    000021b6: 	movq	0x88(%rsp), %r12
    000021be: 	movq	0x130(%rsp), %rax
    000021c6: 	jmp	.Ltmp1008 # Offset: 8646
.Ltmp998:
    000021cb: 	movl	0x58(%rsp), %eax
    000021cf: 	movq	0x110(%rsp), %rdi
    000021d7: 	movl	%eax, iterations(%rip)
    000021dd: 	cmpq	0x50(%rsp), %rdi
    000021e2: 	je	.Ltmp1016 # Offset: 8674
    000021e4: 	movq	0x120(%rsp), %rax
    000021ec: 	leaq	0x1(%rax), %rsi
    000021f0: 	callq	_ZdlPvm@PLT # Offset: 8688
.Ltmp1016:
    000021f5: 	movq	0x30(%rsp), %rsi
    000021fa: 	leaq	DATAat0xd431(%rip), %rdx
    00002201: 	movq	%r15, %rdi
    00002204: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8708
    00002209: 	movq	0x10(%rsp), %rdi
    0000220e: 	movq	%r15, %rcx
    00002211: 	movl	$0x800000, %esi
    00002216: 	leaq	_Z18gries_mills_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rdx
    0000221d: 	callq	_Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8733
    00002222: 	movq	0x130(%rsp), %rdi
    0000222a: 	cmpq	0x8(%rsp), %rdi
    0000222f: 	je	.Ltmp1017 # Offset: 8751
    00002231: 	movq	0x140(%rsp), %rax
    00002239: 	leaq	0x1(%rax), %rsi
    0000223d: 	callq	_ZdlPvm@PLT # Offset: 8765
.Ltmp1017:
    00002242: 	movq	0x30(%rsp), %rsi
    00002247: 	movq	0x60(%rsp), %rdi
    0000224c: 	leaq	DATAat0xd360(%rip), %rdx
    00002253: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8787
    00002258: 	movl	iterations(%rip), %ebx
    0000225e: 	leaq	DATAat0xd1f8(%rip), %rsi
    00002265: 	movl	$0x1, %edi
    0000226a: 	xorl	%eax, %eax
    0000226c: 	movl	%ebx, 0x58(%rsp)
    00002270: 	callq	__printf_chk@PLT # Offset: 8816
    00002275: 	leaq	DATAat0xd228(%rip), %rsi
    0000227c: 	movl	$0x1, %edi
    00002281: 	xorl	%eax, %eax
    00002283: 	callq	__printf_chk@PLT # Offset: 8835
    00002288: 	movslq	%ebx, %rax
    0000228b: 	xorl	%ebp, %ebp
    0000228d: 	movl	$0x4, %ebx
    00002292: 	movq	%rax, 0x40(%rsp)
    00002297: 	jmp	.Ltmp1018 # Offset: 8855
    0000229c: 	nopl	(%rax) # Size: 4
.Ltmp1024:
    000022a0: 	cmpq	$0x1, %r12
    000022a4: 	jne	.Ltmp1019 # Offset: 8868
    000022aa: 	movzbl	(%r13), %eax
    000022af: 	movb	%al, 0x140(%rsp)
    000022b6: 	movq	0x8(%rsp), %rax
.Ltmp1025:
    000022bb: 	movq	%r12, 0x138(%rsp)
    000022c3: 	movq	%r15, %rcx
    000022c6: 	movl	%ebx, %edx
    000022c8: 	movq	%r14, %rsi
    000022cb: 	movb	$0x0, (%rax,%r12)
    000022d0: 	movq	0x10(%rsp), %rdi
    000022d5: 	callq	"_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 8917
    000022da: 	movq	0x130(%rsp), %rdi
    000022e2: 	cmpq	0x8(%rsp), %rdi
    000022e7: 	je	.Ltmp1020 # Offset: 8935
    000022e9: 	movq	0x140(%rsp), %rax
    000022f1: 	leaq	0x1(%rax), %rsi
    000022f5: 	callq	_ZdlPvm@PLT # Offset: 8949
.Ltmp1020:
    000022fa: 	pxor	%xmm1, %xmm1
    000022fe: 	pxor	%xmm2, %xmm2
    00002302: 	movl	%ebx, %r8d
    00002305: 	movl	%ebp, %edx
    00002307: 	cvtsi2sd	%ebx, %xmm2
    0000230b: 	movq	results(%rip), %rax
    00002312: 	movq	0x110(%rsp), %rcx
    0000231a: 	leaq	DATAat0xd258(%rip), %rsi
    00002321: 	cvtsi2sdl	iterations(%rip), %xmm1
    00002329: 	movl	$0x1, %edi
    0000232e: 	movsd	(%rax), %xmm0
    00002332: 	movl	$0x2, %eax
    00002337: 	mulsd	%xmm2, %xmm1
    0000233b: 	divsd	DATAat0xd498(%rip), %xmm1
    00002343: 	divsd	%xmm0, %xmm1
    00002347: 	callq	__printf_chk@PLT # Offset: 9031
    0000234c: 	movl	$0x0, current_test(%rip)
    00002356: 	addl	$0x1, %ebp
    00002359: 	addl	%ebx, %ebx
    0000235b: 	cmpl	$0x16, %ebp
    0000235e: 	je	.Ltmp1021 # Offset: 9054
.Ltmp1018:
    00002364: 	movl	$0x800000, %eax
    00002369: 	movq	0x10(%rsp), %rcx
    0000236e: 	movq	0x110(%rsp), %r13
    00002376: 	cltd
    00002377: 	movq	0x118(%rsp), %r12
    0000237f: 	idivl	%ebx
    00002381: 	movl	$0x8, %edx
    00002386: 	cltq
    00002388: 	imulq	0x40(%rsp), %rax
    0000238e: 	cmpq	%rdx, %rax
    00002391: 	cmovlq	%rdx, %rax
    00002395: 	movl	$0x70000000, %edx
    0000239a: 	cmpq	%rdx, %rax
    0000239d: 	cmovgq	%rdx, %rax
    000023a1: 	addq	$0x1, %rax
    000023a5: 	andq	$-0x2, %rax
    000023a9: 	movl	%eax, iterations(%rip)
    000023af: 	movslq	%ebx, %rax
    000023b2: 	leaq	(%rcx,%rax,8), %r14
    000023b6: 	movq	0x8(%rsp), %rax
    000023bb: 	movq	%rax, 0x130(%rsp)
    000023c3: 	movq	%r13, %rax
    000023c6: 	addq	%r12, %rax
    000023c9: 	je	.Ltmp1022 # Offset: 9161
    000023cb: 	testq	%r13, %r13
    000023ce: 	je	.Ltmp1023 # Offset: 9166
.Ltmp1022:
    000023d4: 	movq	%r12, 0x88(%rsp)
    000023dc: 	cmpq	$0xf, %r12
    000023e0: 	jbe	.Ltmp1024 # Offset: 9184
    000023e6: 	leaq	0x88(%rsp), %rsi
    000023ee: 	xorl	%edx, %edx
    000023f0: 	movq	%r15, %rdi
    000023f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9203
    000023f8: 	movq	%rax, 0x130(%rsp)
    00002400: 	movq	%rax, %rdi
    00002403: 	movq	0x88(%rsp), %rax
    0000240b: 	movq	%rax, 0x140(%rsp)
.Ltmp1069:
    00002413: 	movq	%r12, %rdx
    00002416: 	movq	%r13, %rsi
    00002419: 	callq	memcpy@PLT # Offset: 9241
    0000241e: 	movq	0x88(%rsp), %r12
    00002426: 	movq	0x130(%rsp), %rax
    0000242e: 	jmp	.Ltmp1025 # Offset: 9262
.Ltmp1019:
    00002433: 	testq	%r12, %r12
    00002436: 	jne	.Ltmp1026 # Offset: 9270
    0000243c: 	movq	0x8(%rsp), %rax
    00002441: 	jmp	.Ltmp1025 # Offset: 9281
.Ltmp1021:
    00002446: 	movl	0x58(%rsp), %eax
    0000244a: 	movq	0x110(%rsp), %rdi
    00002452: 	movl	%eax, iterations(%rip)
    00002458: 	cmpq	0x50(%rsp), %rdi
    0000245d: 	je	.Ltmp1027 # Offset: 9309
    0000245f: 	movq	0x120(%rsp), %rax
    00002467: 	leaq	0x1(%rax), %rsi
    0000246b: 	callq	_ZdlPvm@PLT # Offset: 9323
.Ltmp1027:
    00002470: 	movq	0x30(%rsp), %rsi
    00002475: 	movq	0x60(%rsp), %rdi
    0000247a: 	leaq	DATAat0xd388(%rip), %rdx
    00002481: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9345
    00002486: 	movl	iterations(%rip), %ebx
    0000248c: 	leaq	DATAat0xd1f8(%rip), %rsi
    00002493: 	movl	$0x1, %edi
    00002498: 	xorl	%eax, %eax
    0000249a: 	movl	%ebx, 0x58(%rsp)
    0000249e: 	callq	__printf_chk@PLT # Offset: 9374
    000024a3: 	leaq	DATAat0xd228(%rip), %rsi
    000024aa: 	movl	$0x1, %edi
    000024af: 	xorl	%eax, %eax
    000024b1: 	callq	__printf_chk@PLT # Offset: 9393
    000024b6: 	movslq	%ebx, %rax
    000024b9: 	xorl	%ebp, %ebp
    000024bb: 	movl	$0x4, %ebx
    000024c0: 	movq	%rax, 0x40(%rsp)
    000024c5: 	jmp	.Ltmp1028 # Offset: 9413
.Ltmp1034:
    000024ca: 	movzbl	(%r13), %eax
    000024cf: 	movb	%al, 0x140(%rsp)
    000024d6: 	movq	0x8(%rsp), %rax
.Ltmp1036:
    000024db: 	movq	%r12, 0x138(%rsp)
    000024e3: 	movq	%r15, %rcx
    000024e6: 	movl	%ebx, %edx
    000024e8: 	movq	%r14, %rsi
    000024eb: 	movb	$0x0, (%rax,%r12)
    000024f0: 	movq	0x10(%rsp), %rdi
    000024f5: 	callq	"_Z11test_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_S9_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9461
    000024fa: 	movq	0x130(%rsp), %rdi
    00002502: 	cmpq	0x8(%rsp), %rdi
    00002507: 	je	.Ltmp1029 # Offset: 9479
    00002509: 	movq	0x140(%rsp), %rax
    00002511: 	leaq	0x1(%rax), %rsi
    00002515: 	callq	_ZdlPvm@PLT # Offset: 9493
.Ltmp1029:
    0000251a: 	pxor	%xmm1, %xmm1
    0000251e: 	pxor	%xmm2, %xmm2
    00002522: 	movl	%ebx, %r8d
    00002525: 	movl	%ebp, %edx
    00002527: 	cvtsi2sd	%ebx, %xmm2
    0000252b: 	movq	results(%rip), %rax
    00002532: 	movq	0x110(%rsp), %rcx
    0000253a: 	leaq	DATAat0xd258(%rip), %rsi
    00002541: 	cvtsi2sdl	iterations(%rip), %xmm1
    00002549: 	movl	$0x1, %edi
    0000254e: 	movsd	(%rax), %xmm0
    00002552: 	movl	$0x2, %eax
    00002557: 	mulsd	%xmm2, %xmm1
    0000255b: 	divsd	DATAat0xd498(%rip), %xmm1
    00002563: 	divsd	%xmm0, %xmm1
    00002567: 	callq	__printf_chk@PLT # Offset: 9575
    0000256c: 	movl	$0x0, current_test(%rip)
    00002576: 	addl	$0x1, %ebp
    00002579: 	addl	%ebx, %ebx
    0000257b: 	cmpl	$0x16, %ebp
    0000257e: 	je	.Ltmp1030 # Offset: 9598
.Ltmp1028:
    00002584: 	movl	$0x800000, %eax
    00002589: 	movq	0x10(%rsp), %rcx
    0000258e: 	movq	0x110(%rsp), %r13
    00002596: 	cltd
    00002597: 	movq	0x118(%rsp), %r12
    0000259f: 	idivl	%ebx
    000025a1: 	movl	$0x8, %edx
    000025a6: 	cltq
    000025a8: 	imulq	0x40(%rsp), %rax
    000025ae: 	cmpq	%rdx, %rax
    000025b1: 	cmovlq	%rdx, %rax
    000025b5: 	movl	$0x70000000, %edx
    000025ba: 	cmpq	%rdx, %rax
    000025bd: 	cmovgq	%rdx, %rax
    000025c1: 	addq	$0x1, %rax
    000025c5: 	andq	$-0x2, %rax
    000025c9: 	movl	%eax, iterations(%rip)
    000025cf: 	movslq	%ebx, %rax
    000025d2: 	leaq	(%rcx,%rax,8), %r14
    000025d6: 	movq	0x8(%rsp), %rax
    000025db: 	movq	%rax, 0x130(%rsp)
    000025e3: 	movq	%r13, %rax
    000025e6: 	addq	%r12, %rax
    000025e9: 	je	.Ltmp1031 # Offset: 9705
    000025eb: 	testq	%r13, %r13
    000025ee: 	je	.Ltmp1032 # Offset: 9710
.Ltmp1031:
    000025f4: 	movq	%r12, 0x88(%rsp)
    000025fc: 	cmpq	$0xf, %r12
    00002600: 	ja	.Ltmp1033 # Offset: 9728
    00002602: 	cmpq	$0x1, %r12
    00002606: 	je	.Ltmp1034 # Offset: 9734
    0000260c: 	testq	%r12, %r12
    0000260f: 	jne	.Ltmp1035 # Offset: 9743
    00002615: 	movq	0x8(%rsp), %rax
    0000261a: 	jmp	.Ltmp1036 # Offset: 9754
.Ltmp1033:
    0000261f: 	leaq	0x88(%rsp), %rsi
    00002627: 	xorl	%edx, %edx
    00002629: 	movq	%r15, %rdi
    0000262c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9772
    00002631: 	movq	%rax, 0x130(%rsp)
    00002639: 	movq	%rax, %rdi
    0000263c: 	movq	0x88(%rsp), %rax
    00002644: 	movq	%rax, 0x140(%rsp)
.Ltmp1068:
    0000264c: 	movq	%r12, %rdx
    0000264f: 	movq	%r13, %rsi
    00002652: 	callq	memcpy@PLT # Offset: 9810
    00002657: 	movq	0x88(%rsp), %r12
    0000265f: 	movq	0x130(%rsp), %rax
    00002667: 	jmp	.Ltmp1036 # Offset: 9831
.Ltmp1030:
    0000266c: 	movl	0x58(%rsp), %eax
    00002670: 	movq	0x110(%rsp), %rdi
    00002678: 	movl	%eax, iterations(%rip)
    0000267e: 	cmpq	0x50(%rsp), %rdi
    00002683: 	je	.Ltmp1037 # Offset: 9859
    00002685: 	movq	0x120(%rsp), %rax
    0000268d: 	leaq	0x1(%rax), %rsi
    00002691: 	callq	_ZdlPvm@PLT # Offset: 9873
.Ltmp1037:
    00002696: 	movq	0x30(%rsp), %rsi
    0000269b: 	leaq	DATAat0xd44a(%rip), %rdx
    000026a2: 	movq	%r15, %rdi
    000026a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9893
    000026aa: 	movq	0x10(%rsp), %rdi
    000026af: 	movq	%r15, %rcx
    000026b2: 	movl	$0x800000, %esi
    000026b7: 	leaq	_Z20three_reverse_rotateIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rdx
    000026be: 	callq	_Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9918
    000026c3: 	movq	0x130(%rsp), %rdi
    000026cb: 	cmpq	0x8(%rsp), %rdi
    000026d0: 	je	.Ltmp1038 # Offset: 9936
    000026d2: 	movq	0x140(%rsp), %rax
    000026da: 	leaq	0x1(%rax), %rsi
    000026de: 	callq	_ZdlPvm@PLT # Offset: 9950
.Ltmp1038:
    000026e3: 	movq	0x30(%rsp), %rsi
    000026e8: 	leaq	DATAat0xd466(%rip), %rdx
    000026ef: 	movq	%r15, %rdi
    000026f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9970
    000026f7: 	movq	0x10(%rsp), %rdi
    000026fc: 	movq	%r15, %rcx
    000026ff: 	movl	$0x800000, %esi
    00002704: 	leaq	_Z16gcd_cycle_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rdx
    0000270b: 	callq	_Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9995
    00002710: 	movq	0x130(%rsp), %rdi
    00002718: 	cmpq	0x8(%rsp), %rdi
    0000271d: 	je	.Ltmp1039 # Offset: 10013
    0000271f: 	movq	0x140(%rsp), %rax
    00002727: 	leaq	0x1(%rax), %rsi
    0000272b: 	callq	_ZdlPvm@PLT # Offset: 10027
.Ltmp1039:
    00002730: 	movq	0x30(%rsp), %rsi
    00002735: 	leaq	DATAat0xd3b0(%rip), %rdx
    0000273c: 	movq	%r15, %rdi
    0000273f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10047
    00002744: 	movq	0x10(%rsp), %rdi
    00002749: 	movq	%r15, %rcx
    0000274c: 	movl	$0x800000, %esi
    00002751: 	leaq	_Z25gcd_cycle_buffered_randomIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_S7_(%rip), %rdx
    00002758: 	callq	_Z17test_rotate_sizesIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFvS6_S6_S6_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10072
    0000275d: 	movq	0x130(%rsp), %rdi
    00002765: 	cmpq	0x8(%rsp), %rdi
    0000276a: 	je	.Ltmp1040 # Offset: 10090
    0000276c: 	movq	0x140(%rsp), %rax
    00002774: 	leaq	0x1(%rax), %rsi
    00002778: 	callq	_ZdlPvm@PLT # Offset: 10104
.Ltmp1040:
    0000277d: 	movl	0x70(%rsp), %eax
    00002781: 	movq	0xf0(%rsp), %rdi
    00002789: 	movl	%eax, iterations(%rip)
    0000278f: 	leaq	0x100(%rsp), %rax
    00002797: 	cmpq	%rax, %rdi
    0000279a: 	je	.Ltmp1041 # Offset: 10138
    0000279c: 	movq	0x100(%rsp), %rax
    000027a4: 	leaq	0x1(%rax), %rsi
    000027a8: 	callq	_ZdlPvm@PLT # Offset: 10152
.Ltmp1041:
    000027ad: 	movq	0x10(%rsp), %rax
    000027b2: 	testq	%rax, %rax
    000027b5: 	je	.Ltmp1042 # Offset: 10165
    000027b7: 	movq	0x78(%rsp), %rsi
    000027bc: 	movq	%rax, %rdi
    000027bf: 	callq	_ZdlPvm@PLT # Offset: 10175
.Ltmp1042:
    000027c4: 	movq	0x90(%rsp), %rbx
    000027cc: 	movq	0x20(%rsp), %rbp
    000027d1: 	cmpq	0x20(%rsp), %rbx
    000027d6: 	je	.Ltmp1043 # Offset: 10198
    000027d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1044:
    000027e0: 	movq	%rbx, %rdi
    000027e3: 	movq	(%rbx), %rbx
    000027e6: 	movl	$0x18, %esi
    000027eb: 	callq	_ZdlPvm@PLT # Offset: 10219
    000027f0: 	cmpq	%rbp, %rbx
    000027f3: 	jne	.Ltmp1044 # Offset: 10227
.Ltmp1043:
    000027f5: 	cmpq	$0x0, 0x18(%rsp)
    000027fb: 	movq	0x18(%rsp), %rbx
    00002800: 	je	.Ltmp1045 # Offset: 10240
    00002802: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1046:
    00002808: 	movq	%rbx, %rdi
    0000280b: 	movq	(%rbx), %rbx
    0000280e: 	movl	$0x10, %esi
    00002813: 	callq	_ZdlPvm@PLT # Offset: 10259
    00002818: 	testq	%rbx, %rbx
    0000281b: 	jne	.Ltmp1046 # Offset: 10267
.Ltmp1045:
    0000281d: 	movq	0x48(%rsp), %rdi
    00002822: 	movl	$0x8, %esi
    00002827: 	callq	_ZdlPvm@PLT # Offset: 10279
    0000282c: 	movq	0xd0(%rsp), %rdi
    00002834: 	cmpq	0x68(%rsp), %rdi
    00002839: 	je	.Ltmp1047 # Offset: 10297
    0000283b: 	movq	0xe0(%rsp), %rax
    00002843: 	leaq	0x1(%rax), %rsi
    00002847: 	callq	_ZdlPvm@PLT # Offset: 10311
.Ltmp1047:
    0000284c: 	movq	0x158(%rsp), %rax
    00002854: 	subq	%fs:0x28, %rax
    0000285d: 	jne	.Ltmp1048 # Offset: 10333
    00002863: 	addq	$0x168, %rsp
    0000286a: 	popq	%rbx
    0000286b: 	popq	%rbp
    0000286c: 	popq	%r12
    0000286e: 	popq	%r13
    00002870: 	popq	%r14
    00002872: 	popq	%r15
    00002874: 	retq # Offset: 10356
.Ltmp918:
    00002875: 	movl	$0x800000, %r12d
    0000287b: 	movq	%rbp, %rbx
    0000287e: 	subq	%r13, %r12
    00002881: 	cmpq	$0x800000, %r13
    00002888: 	je	.Ltmp1049 # Offset: 10376
.Ltmp1050:
    0000288e: 	movl	$0x10, %edi
    00002893: 	movq	%rbx, %r13
    00002896: 	callq	_Znwm@PLT # Offset: 10390
    0000289b: 	movq	$0x0, 0x8(%rax)
    000028a3: 	movq	%rax, %rbx
    000028a6: 	movq	(%r13), %rax
    000028aa: 	movq	%rax, (%rbx)
    000028ad: 	movq	%rbx, (%r13)
    000028b1: 	subq	$0x1, %r12
    000028b5: 	jne	.Ltmp1050 # Offset: 10421
    000028b7: 	jmp	.Ltmp1051 # Offset: 10423
.Ltmp911:
    000028bc: 	testq	%r12, %r12
    000028bf: 	jne	.Ltmp1052 # Offset: 10431
    000028c5: 	movq	0x8(%rsp), %rax
    000028ca: 	jmp	.Ltmp1053 # Offset: 10442
.Ltmp902:
    000028cf: 	testq	%r12, %r12
    000028d2: 	jne	.Ltmp1054 # Offset: 10450
    000028d8: 	movq	0x8(%rsp), %rax
    000028dd: 	jmp	.Ltmp1055 # Offset: 10461
.Ltmp910:
    000028e2: 	leaq	0x88(%rsp), %rsi
    000028ea: 	xorl	%edx, %edx
    000028ec: 	movq	%r15, %rdi
    000028ef: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10479
    000028f4: 	movq	%rax, 0x130(%rsp)
    000028fc: 	movq	%rax, %rdi
    000028ff: 	movq	0x88(%rsp), %rax
    00002907: 	movq	%rax, 0x140(%rsp)
.Ltmp1067:
    0000290f: 	movq	%r12, %rdx
    00002912: 	movq	%rbp, %rsi
    00002915: 	callq	memcpy@PLT # Offset: 10517
    0000291a: 	movq	0x88(%rsp), %r12
    00002922: 	movq	0x130(%rsp), %rax
    0000292a: 	jmp	.Ltmp1053 # Offset: 10538
.Ltmp901:
    0000292f: 	leaq	0x88(%rsp), %rsi
    00002937: 	xorl	%edx, %edx
    00002939: 	movq	%r15, %rdi
    0000293c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10556
    00002941: 	movq	%rax, 0x130(%rsp)
    00002949: 	movq	%rax, %rdi
    0000294c: 	movq	0x88(%rsp), %rax
    00002954: 	movq	%rax, 0x140(%rsp)
.Ltmp1066:
    0000295c: 	movq	%r12, %rdx
    0000295f: 	movq	%rbp, %rsi
    00002962: 	callq	memcpy@PLT # Offset: 10594
    00002967: 	movq	0x88(%rsp), %r12
    0000296f: 	movq	0x130(%rsp), %rax
    00002977: 	jmp	.Ltmp1055 # Offset: 10615
.Ltmp927:
    0000297c: 	movl	$0x800000, %esi
    00002981: 	leaq	0xb0(%rsp), %rdi
    00002989: 	subq	0x58(%rsp), %rsi
    0000298e: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 10638
    00002993: 	movq	0xb8(%rsp), %rcx
    0000299b: 	movq	0xb0(%rsp), %rax
    000029a3: 	movq	%rcx, 0x40(%rsp)
    000029a8: 	movq	0xc0(%rsp), %rcx
    000029b0: 	movq	%rax, 0x10(%rsp)
    000029b5: 	subq	%rax, %rcx
    000029b8: 	movq	%rcx, 0x78(%rsp)
    000029bd: 	jmp	.Ltmp928 # Offset: 10685
.Ltmp888:
    000029c2: 	movq	%r12, %rdx
    000029c5: 	jmp	.Ltmp1056 # Offset: 10693
.Ltmp933:
    000029ca: 	movq	0x10(%rsp), %r13
    000029cf: 	movl	$0x8, %ebx
    000029d4: 	cmpq	%r12, 0x40(%rsp)
    000029d9: 	jne	.Ltmp1057 # Offset: 10713
    000029db: 	jmp	.Ltmp929 # Offset: 10715
.Ltmp1059:
    000029e0: 	cmpq	%r13, %r12
    000029e3: 	je	.Ltmp1058 # Offset: 10723
    000029e5: 	subq	%r13, %rdx
    000029e8: 	leaq	(%r13,%rbx), %rdi
    000029ed: 	movq	%r13, %rsi
    000029f0: 	movsd	%xmm1, 0x18(%rsp)
    000029f6: 	callq	memmove@PLT # Offset: 10742
    000029fb: 	movsd	0x18(%rsp), %xmm1
.Ltmp1058:
    00002a01: 	movsd	%xmm1, (%r13)
.Ltmp1062:
    00002a07: 	leaq	0x8(%r12), %rax
    00002a0c: 	cmpq	%rbp, %r12
    00002a0f: 	je	.Ltmp929 # Offset: 10767
    00002a15: 	movq	%rax, %r12
.Ltmp1057:
    00002a18: 	movsd	(%r12), %xmm1
    00002a1e: 	movsd	(%r13), %xmm0
    00002a24: 	movq	%r12, %rdx
    00002a27: 	comisd	%xmm1, %xmm0
    00002a2b: 	ja	.Ltmp1059 # Offset: 10795
    00002a2d: 	movsd	-0x8(%r12), %xmm0
    00002a34: 	leaq	-0x8(%r12), %rax
    00002a39: 	comisd	%xmm1, %xmm0
    00002a3d: 	jbe	.Ltmp1060 # Offset: 10813
    00002a3f: 	nop # Size: 1
.Ltmp1061:
    00002a40: 	movsd	%xmm0, 0x8(%rax)
    00002a45: 	movq	%rax, %rdx
    00002a48: 	movsd	-0x8(%rax), %xmm0
    00002a4d: 	subq	$0x8, %rax
    00002a51: 	comisd	%xmm1, %xmm0
    00002a55: 	ja	.Ltmp1061 # Offset: 10837
.Ltmp1060:
    00002a57: 	movsd	%xmm1, (%rdx)
    00002a5b: 	jmp	.Ltmp1062 # Offset: 10843
.Ltmp941:
    00002a5d: 	movq	%rbp, %rdx
    00002a60: 	jmp	.Ltmp1063 # Offset: 10848
.Ltmp870:
    00002a65: 	movq	%rbp, %rdx
    00002a68: 	jmp	.Ltmp1064 # Offset: 10856
.Ltmp938:
    00002a6d: 	movq	%r12, %rdx
    00002a70: 	jmp	.Ltmp1065 # Offset: 10864
.Ltmp1054:
    00002a75: 	movq	0x8(%rsp), %rdi
    00002a7a: 	jmp	.Ltmp1066 # Offset: 10874
.Ltmp1052:
    00002a7f: 	movq	0x8(%rsp), %rdi
    00002a84: 	jmp	.Ltmp1067 # Offset: 10884
.Ltmp1048:
    00002a89: 	callq	__stack_chk_fail@PLT # Offset: 10889
.Ltmp1035:
    00002a8e: 	movq	0x8(%rsp), %rdi
    00002a93: 	jmp	.Ltmp1068 # Offset: 10899
.Ltmp1032:
    00002a98: 	leaq	DATAat0xd158(%rip), %rdi
    00002a9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10911
.Ltmp1026:
    00002aa4: 	movq	0x8(%rsp), %rdi
    00002aa9: 	jmp	.Ltmp1069 # Offset: 10921
.Ltmp1023:
    00002aae: 	leaq	DATAat0xd158(%rip), %rdi
    00002ab5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10933
.Ltmp1015:
    00002aba: 	movq	0x8(%rsp), %rdi
    00002abf: 	jmp	.Ltmp1070 # Offset: 10943
.Ltmp1013:
    00002ac4: 	movq	0x8(%rsp), %rdi
    00002ac9: 	jmp	.Ltmp1071 # Offset: 10953
.Ltmp1011:
    00002ace: 	movq	0x8(%rsp), %rdi
    00002ad3: 	jmp	.Ltmp1072 # Offset: 10963
.Ltmp1009:
    00002ad8: 	movq	0x8(%rsp), %rdi
    00002add: 	jmp	.Ltmp1073 # Offset: 10973
.Ltmp1007:
    00002ae2: 	movq	0x8(%rsp), %rdi
    00002ae7: 	jmp	.Ltmp1074 # Offset: 10983
.Ltmp1005:
    00002aec: 	movq	0x8(%rsp), %rdi
    00002af1: 	jmp	.Ltmp1075 # Offset: 10993
.Ltmp1003:
    00002af6: 	movq	0x8(%rsp), %rdi
    00002afb: 	jmp	.Ltmp1076 # Offset: 11003
.Ltmp1000:
    00002b00: 	leaq	DATAat0xd158(%rip), %rdi
    00002b07: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11015
.Ltmp988:
    00002b0c: 	leaq	DATAat0xd158(%rip), %rdi
    00002b13: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11027
.Ltmp980:
    00002b18: 	leaq	DATAat0xd158(%rip), %rdi
    00002b1f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11039
.Ltmp971:
    00002b24: 	leaq	DATAat0xd158(%rip), %rdi
    00002b2b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11051
.Ltmp963:
    00002b30: 	leaq	DATAat0xd158(%rip), %rdi
    00002b37: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11063
.Ltmp955:
    00002b3c: 	leaq	DATAat0xd158(%rip), %rdi
    00002b43: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11075
.Ltmp946:
    00002b48: 	leaq	DATAat0xd158(%rip), %rdi
    00002b4f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11087
.Ltmp912:
    00002b54: 	leaq	DATAat0xd182(%rip), %rdi
    00002b5b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 11099
.Ltmp909:
    00002b60: 	leaq	DATAat0xd158(%rip), %rdi
    00002b67: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11111
.Ltmp903:
    00002b6c: 	leaq	DATAat0xd182(%rip), %rdi
    00002b73: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 11123
.Ltmp900:
    00002b78: 	leaq	DATAat0xd158(%rip), %rdi
    00002b7f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11135
    00002b84: 	endbr64
.Ltmp1078:
    00002b88: 	movq	%rax, %rbx
    00002b8b: 	jmp	.Ltmp1077 # Offset: 11147
    00002b90: 	endbr64
    00002b94: 	jmp	.Ltmp1078 # Offset: 11156
    00002b96: 	endbr64
.Ltmp1083:
    00002b9a: 	movq	%rax, %rbx
    00002b9d: 	jmp	.Ltmp1079 # Offset: 11165
    00002ba2: 	endbr64
.Ltmp1081:
    00002ba6: 	movq	%rax, %rbx
    00002ba9: 	jmp	.Ltmp1080 # Offset: 11177
    00002bae: 	endbr64
    00002bb2: 	jmp	.Ltmp1081 # Offset: 11186
    00002bb4: 	endbr64
.Ltmp1084:
    00002bb8: 	movq	%rax, %rbx
    00002bbb: 	jmp	.Ltmp1082 # Offset: 11195
    00002bbd: 	endbr64
    00002bc1: 	jmp	.Ltmp1081 # Offset: 11201
    00002bc3: 	endbr64
    00002bc7: 	jmp	.Ltmp1083 # Offset: 11207
    00002bc9: 	endbr64
    00002bcd: 	jmp	.Ltmp1084 # Offset: 11213
.Ltmp1082:
    00002bcf: 	movq	0x130(%rsp), %rdi
    00002bd7: 	cmpq	0x8(%rsp), %rdi
    00002bdc: 	je	.Ltmp1085 # Offset: 11228
    00002bde: 	movq	0x140(%rsp), %rax
    00002be6: 	leaq	0x1(%rax), %rsi
    00002bea: 	callq	_ZdlPvm@PLT # Offset: 11242
.Ltmp1085:
    00002bef: 	movq	0xf0(%rsp), %rdi
    00002bf7: 	leaq	0x100(%rsp), %rax
    00002bff: 	cmpq	%rax, %rdi
    00002c02: 	je	.Ltmp1086 # Offset: 11266
    00002c04: 	movq	0x100(%rsp), %rax
    00002c0c: 	leaq	0x1(%rax), %rsi
    00002c10: 	callq	_ZdlPvm@PLT # Offset: 11280
.Ltmp1086:
    00002c15: 	movq	0xb0(%rsp), %rdi
    00002c1d: 	movq	0xc0(%rsp), %rsi
    00002c25: 	subq	%rdi, %rsi
    00002c28: 	testq	%rdi, %rdi
    00002c2b: 	je	.Ltmp1087 # Offset: 11307
    00002c2d: 	callq	_ZdlPvm@PLT # Offset: 11309
.Ltmp1087:
    00002c32: 	movq	%rbx, %rbp
.Ltmp1105:
    00002c35: 	movq	0x90(%rsp), %rdi
.Ltmp1089:
    00002c3d: 	cmpq	0x20(%rsp), %rdi
    00002c42: 	je	.Ltmp1088 # Offset: 11330
    00002c48: 	movq	(%rdi), %rbx
    00002c4b: 	movl	$0x18, %esi
    00002c50: 	callq	_ZdlPvm@PLT # Offset: 11344
    00002c55: 	movq	%rbx, %rdi
    00002c58: 	jmp	.Ltmp1089 # Offset: 11352
    00002c5a: 	endbr64
    00002c5e: 	jmp	.Ltmp1081 # Offset: 11358
    00002c63: 	endbr64
    00002c67: 	jmp	.Ltmp1083 # Offset: 11367
    00002c6c: 	endbr64
    00002c70: 	jmp	.Ltmp1083 # Offset: 11376
.Ltmp1080:
    00002c75: 	movq	0x130(%rsp), %rdi
    00002c7d: 	cmpq	0x8(%rsp), %rdi
    00002c82: 	je	.Ltmp1079 # Offset: 11394
    00002c84: 	movq	0x140(%rsp), %rax
    00002c8c: 	leaq	0x1(%rax), %rsi
    00002c90: 	callq	_ZdlPvm@PLT # Offset: 11408
.Ltmp1079:
    00002c95: 	movq	0x110(%rsp), %rdi
    00002c9d: 	cmpq	0x50(%rsp), %rdi
    00002ca2: 	je	.Ltmp1085 # Offset: 11426
.Ltmp1098:
    00002ca8: 	movq	0x120(%rsp), %rax
    00002cb0: 	leaq	0x1(%rax), %rsi
    00002cb4: 	callq	_ZdlPvm@PLT # Offset: 11444
    00002cb9: 	jmp	.Ltmp1085 # Offset: 11449
    00002cbe: 	endbr64
    00002cc2: 	jmp	.Ltmp1083 # Offset: 11458
    00002cc7: 	endbr64
    00002ccb: 	jmp	.Ltmp1084 # Offset: 11467
    00002cd0: 	endbr64
    00002cd4: 	jmp	.Ltmp1081 # Offset: 11476
    00002cd9: 	endbr64
    00002cdd: 	jmp	.Ltmp1083 # Offset: 11485
    00002ce2: 	endbr64
    00002ce6: 	jmp	.Ltmp1081 # Offset: 11494
    00002ceb: 	endbr64
    00002cef: 	jmp	.Ltmp1081 # Offset: 11503
.Ltmp1077:
    00002cf4: 	movq	0x130(%rsp), %rdi
    00002cfc: 	cmpq	0x8(%rsp), %rdi
    00002d01: 	je	.Ltmp1086 # Offset: 11521
.Ltmp1095:
    00002d07: 	movq	0x140(%rsp), %rax
    00002d0f: 	leaq	0x1(%rax), %rsi
    00002d13: 	callq	_ZdlPvm@PLT # Offset: 11539
    00002d18: 	jmp	.Ltmp1086 # Offset: 11544
.Ltmp1103:
    00002d1d: 	movq	0x90(%rsp), %rdi
.Ltmp1108:
    00002d25: 	cmpq	0x20(%rsp), %rdi
    00002d2a: 	jne	.Ltmp1090 # Offset: 11562
.Ltmp1088:
    00002d30: 	movq	0x80(%rsp), %rdi
.Ltmp1097:
    00002d38: 	testq	%rdi, %rdi
    00002d3b: 	jne	.Ltmp1091 # Offset: 11579
.Ltmp1106:
    00002d41: 	movq	0x48(%rsp), %rdi
    00002d46: 	movl	$0x8, %esi
    00002d4b: 	callq	_ZdlPvm@PLT # Offset: 11595
.Ltmp1102:
    00002d50: 	movq	0xd0(%rsp), %rdi
    00002d58: 	cmpq	0x68(%rsp), %rdi
    00002d5d: 	je	.Ltmp1092 # Offset: 11613
    00002d5f: 	movq	0xe0(%rsp), %rax
    00002d67: 	leaq	0x1(%rax), %rsi
    00002d6b: 	callq	_ZdlPvm@PLT # Offset: 11627
.Ltmp1092:
    00002d70: 	movq	%rbp, %rdi
    00002d73: 	callq	_Unwind_Resume@PLT # Offset: 11635
    00002d78: 	endbr64
    00002d7c: 	jmp	.Ltmp1083 # Offset: 11644
    00002d81: 	endbr64
    00002d85: 	movq	%rax, %rbx
    00002d88: 	jmp	.Ltmp1093 # Offset: 11656
    00002d8d: 	endbr64
    00002d91: 	jmp	.Ltmp1083 # Offset: 11665
    00002d96: 	endbr64
    00002d9a: 	jmp	.Ltmp1078 # Offset: 11674
    00002d9f: 	endbr64
    00002da3: 	jmp	.Ltmp1078 # Offset: 11683
    00002da8: 	endbr64
    00002dac: 	jmp	.Ltmp1078 # Offset: 11692
    00002db1: 	endbr64
    00002db5: 	jmp	.Ltmp1078 # Offset: 11701
    00002dba: 	endbr64
    00002dbe: 	jmp	.Ltmp1078 # Offset: 11710
    00002dc3: 	endbr64
    00002dc7: 	jmp	.Ltmp1078 # Offset: 11719
    00002dcc: 	endbr64
    00002dd0: 	movq	%rax, %rbx
    00002dd3: 	jmp	.Ltmp1094 # Offset: 11731
    00002dd5: 	endbr64
    00002dd9: 	movq	%rax, %rbx
    00002ddc: 	jmp	.Ltmp1086 # Offset: 11740
.Ltmp1094:
    00002de1: 	movq	0x130(%rsp), %rdi
    00002de9: 	leaq	0x140(%rsp), %rax
    00002df1: 	cmpq	%rax, %rdi
    00002df4: 	jne	.Ltmp1095 # Offset: 11764
    00002dfa: 	jmp	.Ltmp1086 # Offset: 11770
    00002dff: 	endbr64
    00002e03: 	jmp	.Ltmp1078 # Offset: 11779
    00002e08: 	endbr64
    00002e0c: 	jmp	.Ltmp1078 # Offset: 11788
    00002e11: 	endbr64
    00002e15: 	jmp	.Ltmp1078 # Offset: 11797
    00002e1a: 	endbr64
    00002e1e: 	jmp	.Ltmp1078 # Offset: 11806
    00002e23: 	endbr64
    00002e27: 	jmp	.Ltmp1084 # Offset: 11815
    00002e2c: 	endbr64
    00002e30: 	movq	%rax, %rbx
    00002e33: 	jmp	.Ltmp1096 # Offset: 11827
.Ltmp1091:
    00002e35: 	movq	(%rdi), %rbx
    00002e38: 	movl	$0x10, %esi
    00002e3d: 	callq	_ZdlPvm@PLT # Offset: 11837
    00002e42: 	movq	%rbx, %rdi
    00002e45: 	jmp	.Ltmp1097 # Offset: 11845
.Ltmp1096:
    00002e4a: 	movq	0x130(%rsp), %rdi
    00002e52: 	cmpq	0x8(%rsp), %rdi
    00002e57: 	je	.Ltmp1093 # Offset: 11863
    00002e59: 	movq	0x140(%rsp), %rax
    00002e61: 	leaq	0x1(%rax), %rsi
    00002e65: 	callq	_ZdlPvm@PLT # Offset: 11877
.Ltmp1093:
    00002e6a: 	movq	0x110(%rsp), %rdi
    00002e72: 	leaq	0x120(%rsp), %rax
    00002e7a: 	cmpq	%rax, %rdi
    00002e7d: 	jne	.Ltmp1098 # Offset: 11901
    00002e83: 	jmp	.Ltmp1085 # Offset: 11907
    00002e88: 	endbr64
    00002e8c: 	movq	%rax, %rdi
    00002e8f: 	jmp	.Ltmp1099 # Offset: 11919
    00002e91: 	endbr64
    00002e95: 	jmp	.Ltmp1084 # Offset: 11925
.Ltmp1099:
    00002e9a: 	callq	__cxa_begin_catch@PLT # Offset: 11930
    00002e9f: 	movq	(%rbx), %r12
    00002ea2: 	movq	(%rbp), %rdi
.Ltmp1101:
    00002ea6: 	cmpq	%rdi, %r12
    00002ea9: 	je	.Ltmp1100 # Offset: 11945
    00002eab: 	movq	(%rdi), %rbx
    00002eae: 	movl	$0x10, %esi
    00002eb3: 	callq	_ZdlPvm@PLT # Offset: 11955
    00002eb8: 	movq	%rbx, %rdi
    00002ebb: 	jmp	.Ltmp1101 # Offset: 11963
    00002ebd: 	endbr64
    00002ec1: 	jmp	.Ltmp1084 # Offset: 11969
    00002ec6: 	endbr64
    00002eca: 	jmp	.Ltmp1084 # Offset: 11978
    00002ecf: 	endbr64
    00002ed3: 	movq	%rax, %rbp
    00002ed6: 	jmp	.Ltmp1102 # Offset: 11990
    00002edb: 	endbr64
    00002edf: 	movq	%rax, %rbp
    00002ee2: 	jmp	.Ltmp1103 # Offset: 12002
    00002ee7: 	endbr64
    00002eeb: 	movq	%rax, %rbp
    00002eee: 	jmp	.Ltmp1104 # Offset: 12014
.Ltmp1100:
    00002ef0: 	movq	%r12, (%rbp)
    00002ef4: 	callq	__cxa_rethrow@PLT # Offset: 12020
    00002ef9: 	endbr64
    00002efd: 	movq	%rax, %rbp
    00002f00: 	jmp	.Ltmp1105 # Offset: 12032
.Ltmp1104:
    00002f05: 	movq	0x80(%rsp), %rdi
.Ltmp1107:
    00002f0d: 	testq	%rdi, %rdi
    00002f10: 	je	.Ltmp1106 # Offset: 12048
    00002f16: 	movq	(%rdi), %rbx
    00002f19: 	movl	$0x10, %esi
    00002f1e: 	callq	_ZdlPvm@PLT # Offset: 12062
    00002f23: 	movq	%rbx, %rdi
    00002f26: 	jmp	.Ltmp1107 # Offset: 12070
    00002f28: 	endbr64
    00002f2c: 	movq	%rax, %rbx
    00002f2f: 	callq	__cxa_end_catch@PLT # Offset: 12079
    00002f34: 	jmp	.Ltmp1085 # Offset: 12084
.Ltmp1090:
    00002f39: 	movq	(%rdi), %rbx
    00002f3c: 	movl	$0x18, %esi
    00002f41: 	callq	_ZdlPvm@PLT # Offset: 12097
    00002f46: 	movq	%rbx, %rdi
    00002f49: 	jmp	.Ltmp1108 # Offset: 12105
    00002f4e: 	endbr64
    00002f52: 	movq	%rax, %rbx
    00002f55: 	jmp	.Ltmp1085 # Offset: 12117
    00002f5a: 	endbr64
    00002f5e: 	jmp	.Ltmp1078 # Offset: 12126
    00002f63: 	endbr64
    00002f67: 	jmp	.Ltmp1078 # Offset: 12135
    00002f6c: 	endbr64
    00002f70: 	jmp	.Ltmp1078 # Offset: 12144
    00002f75: 	endbr64
    00002f79: 	jmp	.Ltmp1078 # Offset: 12153
    00002f7e: 	endbr64
    00002f82: 	jmp	.Ltmp1081 # Offset: 12162
    00002f87: 	endbr64
    00002f8b: 	jmp	.Ltmp1078 # Offset: 12171
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_fini" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0xcc70
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0xcc70
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 94 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 726 instructions were shortened
BOLT-INFO: removed 262 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 89 out of 126 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2027d4
