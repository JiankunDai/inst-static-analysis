BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x6e00000, offset 0x6e00000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __TMC_END__ at 0x3c020, which lies outside .data
BOLT-WARNING: ignoring symbol __bss_start at 0x3c01c, which lies outside .bss
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x3bfe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_GLOBAL__sub_I_results/1(*2)" after disassembly {
  All names   : _GLOBAL__sub_I_results/1
                _GLOBAL__sub_I_results/loop_fusion.cpp/1
  Number      : 4
  State       : disassembled
  Address     : 0x4d20
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x4d20
  Section     : .text
  Orc Section : .local.text._GLOBAL__sub_I_results/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	"_ZStL8__ioinit/1"(%rip), %rbp
    0000000c: 	movq	%rbp, %rdi
    0000000f: 	callq	_ZNSt8ios_base4InitC1Ev@PLT # Offset: 15
    00000014: 	movq	DATAat0x3bff8(%rip), %rdi
    0000001b: 	movq	%rbp, %rsi
    0000001e: 	popq	%rbp
    0000001f: 	leaq	__dso_handle(%rip), %rdx
    00000026: 	jmp	__cxa_atexit@PLT # TAILCALL  # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_GLOBAL__sub_I_results/1(*2)"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x4d50
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x4d50
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x3bfd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x4d80
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x4d80
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	DATAat0x3c020(%rip), %rdi
    00000007: 	leaq	DATAat0x3c020(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp178 # Offset: 17
    00000013: 	movq	DATAat0x3bfe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp178 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp178:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x4db0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x4db0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	DATAat0x3c020(%rip), %rdi
    00000007: 	leaq	DATAat0x3c020(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp179 # Offset: 34
    00000024: 	movq	DATAat0x3bff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp179 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp179:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x4df0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x4df0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp180 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp181 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp181:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp180:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x4e30
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x4e30
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1
                _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/loop_fusion.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x4e40
  Size        : 0x78
  MaxSize     : 0x80
  Offset      : 0x4e40
  Section     : .text
  Orc Section : .local.text._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r12
    00000002: 	pushq	%rbp
    00000003: 	subq	$0x8, %rsp
    00000007: 	movq	(%rdi), %rax
    0000000a: 	movq	-0x18(%rax), %rax
    0000000e: 	movq	0xf0(%rdi,%rax), %r12
    00000016: 	testq	%r12, %r12
    00000019: 	je	.Ltmp182 # Offset: 25
    0000001b: 	cmpb	$0x0, 0x38(%r12)
    00000021: 	movq	%rdi, %rbp
    00000024: 	je	.Ltmp183 # Offset: 36
    00000026: 	movsbl	0x43(%r12), %esi
.Ltmp184:
    0000002c: 	movq	%rbp, %rdi
    0000002f: 	callq	_ZNSo3putEc@PLT # Offset: 47
    00000034: 	addq	$0x8, %rsp
    00000038: 	popq	%rbp
    00000039: 	movq	%rax, %rdi
    0000003c: 	popq	%r12
    0000003e: 	jmp	_ZNSo5flushEv@PLT # TAILCALL  # Offset: 62
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp183:
    00000048: 	movq	%r12, %rdi
    0000004b: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 75
    00000050: 	movq	(%r12), %rax
    00000054: 	movl	$0xa, %esi
    00000059: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000060: 	movq	0x30(%rax), %rax
    00000064: 	cmpq	%rdx, %rax
    00000067: 	je	.Ltmp184 # Offset: 103
    00000069: 	movq	%r12, %rdi
    0000006c: 	callq	*%rax # Offset: 108
    0000006e: 	movsbl	%al, %esi
    00000071: 	jmp	.Ltmp184 # Offset: 113
.Ltmp182:
    00000073: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 115
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1(*2)"

Binary Function "_Z9check_sumIhEvT_PKc.part.0/1(*8)" after disassembly {
  All names   : _Z9check_sumIhEvT_PKc.part.0/1
                _Z9check_sumIhEvT_PKc.part.0/loop_fusion.cpp/1
                _Z26check_sum_partial2_replaceIhEvT_PKc.part.0/1
                _Z26check_sum_partial2_replaceIhEvT_PKc.part.0/loop_fusion.cpp/1
                _Z18check_sum_replace2IhEvT_PKc.part.0/1
                _Z18check_sum_replace2IhEvT_PKc.part.0/loop_fusion.cpp/1
                _Z19check_sum_overwriteIhEvT_PKc.part.0/1
                _Z19check_sum_overwriteIhEvT_PKc.part.0/loop_fusion.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x4ec0
  Size        : 0x160
  MaxSize     : 0x160
  Offset      : 0x4ec0
  Section     : .text
  Orc Section : .local.text._Z9check_sumIhEvT_PKc.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	movl	$0x5, %edx
    00000007: 	pushq	%r12
    00000009: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rsi, %rbp
    00000014: 	leaq	DATAat0x35004(%rip), %rsi
    0000001b: 	pushq	%rbx
    0000001c: 	movl	%edi, %ebx
    0000001e: 	movq	%r12, %rdi
    00000021: 	subq	$0x18, %rsp
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 53
    0000003a: 	testq	%rbp, %rbp
    0000003d: 	je	.Ltmp185 # Offset: 61
    00000043: 	movq	%rbp, %rdi
    00000046: 	callq	strlen@PLT # Offset: 70
    0000004b: 	movq	%rbp, %rsi
    0000004e: 	movq	%r12, %rdi
    00000051: 	movq	%rax, %rdx
    00000054: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 84
.Ltmp190:
    00000059: 	movq	%r12, %rdi
    0000005c: 	movl	$0xd, %edx
    00000061: 	leaq	0x7(%rsp), %r13
    00000066: 	leaq	DATAat0x3500a(%rip), %rsi
    0000006d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 109
    00000072: 	movq	%r12, %rdi
    00000075: 	movl	$0x1, %edx
    0000007a: 	movq	%r13, %rsi
    0000007d: 	movb	%bl, 0x7(%rsp)
    00000081: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 129
    00000086: 	movl	$0xb, %edx
    0000008b: 	leaq	DATAat0x35018(%rip), %rsi
    00000092: 	movq	%rax, %rbp
    00000095: 	movq	%rax, %rdi
    00000098: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 152
    0000009d: 	movq	%rbp, %rdi
    000000a0: 	movl	$0x1, %edx
    000000a5: 	movq	%r13, %rsi
    000000a8: 	movb	$0x0, 0x7(%rsp)
    000000ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 173
    000000b2: 	movq	%rax, %rbp
    000000b5: 	movq	(%rax), %rax
    000000b8: 	movq	-0x18(%rax), %rax
    000000bc: 	movq	0xf0(%rbp,%rax), %r12
    000000c4: 	testq	%r12, %r12
    000000c7: 	je	.Ltmp186 # Offset: 199
    000000cd: 	cmpb	$0x0, 0x38(%r12)
    000000d3: 	je	.Ltmp187 # Offset: 211
    000000d5: 	movsbl	0x43(%r12), %esi
.Ltmp189:
    000000db: 	movq	%rbp, %rdi
    000000de: 	callq	_ZNSo3putEc@PLT # Offset: 222
    000000e3: 	movq	%rax, %rdi
    000000e6: 	movq	0x8(%rsp), %rax
    000000eb: 	subq	%fs:0x28, %rax
    000000f4: 	jne	.Ltmp188 # Offset: 244
    000000f6: 	addq	$0x18, %rsp
    000000fa: 	popq	%rbx
    000000fb: 	popq	%rbp
    000000fc: 	popq	%r12
    000000fe: 	popq	%r13
    00000100: 	jmp	_ZNSo5flushEv@PLT # TAILCALL  # Offset: 256
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp187:
    00000108: 	movq	%r12, %rdi
    0000010b: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 267
    00000110: 	movq	(%r12), %rax
    00000114: 	movl	$0xa, %esi
    00000119: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000120: 	movq	0x30(%rax), %rax
    00000124: 	cmpq	%rdx, %rax
    00000127: 	je	.Ltmp189 # Offset: 295
    00000129: 	movq	%r12, %rdi
    0000012c: 	callq	*%rax # Offset: 300
    0000012e: 	movsbl	%al, %esi
    00000131: 	jmp	.Ltmp189 # Offset: 305
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp185:
    00000138: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000013f: 	movq	-0x18(%rax), %rdi
    00000143: 	addq	%r12, %rdi
    00000146: 	movl	0x20(%rdi), %esi
    00000149: 	orl	$0x1, %esi
    0000014c: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 332
    00000151: 	jmp	.Ltmp190 # Offset: 337
.Ltmp188:
    00000156: 	callq	__stack_chk_fail@PLT # Offset: 342
.Ltmp186:
    0000015b: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z9check_sumIhEvT_PKc.part.0/1(*8)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x5020
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x5020
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp191 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp192 # Offset: 38
.Ltmp191:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp193 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp192:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp193:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x35118(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x50c0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x50c0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp194 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp195 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp196:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp196 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp209:
    00000069: 	leaq	DATAat0x35022(%rip), %rbp
    00000070: 	leaq	DATAat0x35138(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x35178(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp197 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x36ec0(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x351a8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp198 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp202:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp199 # Offset: 244
    000000fa: 	movq	DATAat0x36eb0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp203:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x36eb0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp200 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp200:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x35049(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x36ec0(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp201 # Offset: 398
.Ltmp198:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp202 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp203 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp199:
    000001c8: 	movq	DATAat0x36fb0(%rip), %rsi
    000001cf: 	movq	DATAat0x36eb0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp200 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp201:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp197 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp204 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp205:
    00000210: 	addq	$0x10, %rax
.Ltmp204:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp205 # Offset: 542
.Ltmp210:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x351d8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp206 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp207 # Offset: 592
.Ltmp206:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp194:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp207:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp208:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp208 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x35024(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp194 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp195:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp209 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp197:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp210 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x53f0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x53f0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp211 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp212 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp213:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp213 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp218:
    0000006a: 	leaq	DATAat0x35022(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x35200(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x3504a(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x35022(%rip), %r8
    000000a1: 	leaq	DATAat0x35038(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp214 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp215:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x35049(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp215 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp214 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp216 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp217:
    00000140: 	addq	$0x10, %rax
.Ltmp216:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp217 # Offset: 334
.Ltmp219:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x351d8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp211:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp212:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp218 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp214:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp219 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x55a0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x55a0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x55c0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x55c0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZNKSt5ctypeIcE8do_widenEc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x5600
  Size        : 0x7
  MaxSize     : 0x10
  Offset      : 0x5600
  Section     : .text
  Orc Section : .local.text._ZNKSt5ctypeIcE8do_widenEc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	retq # Offset: 6
DWARF CFI Instructions:
    <empty>
End of Function "_ZNKSt5ctypeIcE8do_widenEc"

Binary Function "_Z22test_for_loop_blocked2IhEvPT_iPKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x5610
  Size        : 0x12f6
  MaxSize     : 0x1300
  Offset      : 0x5610
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x3f8, %rsp
    0000001a: 	movl	%esi, 0x14(%rsp)
    0000001e: 	movq	%rdx, 0x8(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x3e8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp220 # Offset: 74
    00000050: 	leal	-0x1002(%rbx), %edx
    00000056: 	leal	-0x1001(%rbx), %edi
    0000005c: 	movl	$0x0, 0x4(%rsp)
    00000064: 	movdqa	DATAat0x36f20(%rip), %xmm2
    0000006c: 	andl	$0xfffff000, %edx
    00000072: 	movl	%edi, 0x10(%rsp)
    00000076: 	leal	-0x1(%rbx), %ebp
    00000079: 	leal	0x1000(%rdx), %esi
    0000007f: 	movl	%esi, 0x18(%rsp)
.Ltmp236:
    00000083: 	movl	0x10(%rsp), %edx
    00000087: 	testl	%edx, %edx
    00000089: 	jle	.Ltmp221 # Offset: 137
    0000008f: 	movl	%ebp, 0x1c(%rsp)
    00000093: 	movdqa	DATAat0x36f30(%rip), %xmm4
    0000009b: 	xorl	%ecx, %ecx
    0000009d: 	xorl	%ebx, %ebx
    0000009f: 	movl	0x10(%rsp), %ebp
    000000a3: 	movq	%r12, %rsi
    000000a6: 	leaq	0x1(%r12), %r8
    000000ab: 	pxor	%xmm5, %xmm5
    000000af: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000000b7: 	movl	$0x2, %r9d
    000000bd: 	movl	$0x1000, %edi
.Ltmp228:
    000000c2: 	movl	%ecx, %r11d
    000000c5: 	cmpq	%rdi, %rcx
    000000c8: 	jae	.Ltmp222 # Offset: 200
    000000ce: 	cmpq	%r9, %rdi
    000000d1: 	leaq	0x1(%rcx), %r10
    000000d5: 	leaq	init_value(%rip), %r15
    000000dc: 	sbbq	%r14, %r14
    000000df: 	andq	$-0x7ff, %r14
    000000e6: 	addq	$0x800, %r14
    000000ed: 	leaq	-0x1(%r14), %rdx
    000000f1: 	leaq	(%r10,%rdx,2), %rax
    000000f5: 	addq	%r12, %rax
    000000f8: 	cmpq	%r15, %rax
    000000fb: 	setbe	%al
    000000fe: 	addq	$0x8, %r15
    00000102: 	cmpq	%r15, %rsi
    00000105: 	setae	%r13b
    00000109: 	orb	%r13b, %al
    0000010c: 	je	.Ltmp223 # Offset: 268
    00000112: 	cmpq	$0xe, %rdx
    00000116: 	jbe	.Ltmp223 # Offset: 278
    0000011c: 	movsd	init_value(%rip), %xmm1
    00000124: 	movq	%r14, %r15
    00000127: 	movq	%rsi, %rax
    0000012a: 	pxor	%xmm6, %xmm6
    0000012e: 	shrq	$0x4, %r15
    00000132: 	unpcklpd	%xmm1, %xmm1
    00000136: 	shlq	$0x5, %r15
    0000013a: 	cvttpd2dq	%xmm1, %xmm1
    0000013e: 	punpcklqdq	%xmm1, %xmm1
    00000142: 	addq	%rsi, %r15
    00000145: 	movdqa	%xmm1, %xmm7
    00000149: 	punpckhwd	%xmm1, %xmm7
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp224:
    00000150: 	movdqa	%xmm1, %xmm0
    00000154: 	addq	$0x20, %rax
    00000158: 	punpcklwd	%xmm1, %xmm0
    0000015c: 	movdqa	%xmm0, %xmm8
    00000161: 	punpcklwd	%xmm7, %xmm0
    00000165: 	punpckhwd	%xmm7, %xmm8
    0000016a: 	punpcklwd	%xmm8, %xmm0
    0000016f: 	pand	%xmm3, %xmm0
    00000173: 	packuswb	%xmm0, %xmm0
    00000177: 	movd	%xmm0, %r13d
    0000017c: 	paddb	%xmm0, %xmm6
    00000180: 	movb	%r13b, -0x20(%rax)
    00000184: 	movaps	%xmm0, 0x3d0(%rsp)
    0000018c: 	movzbl	0x3d1(%rsp), %r13d
    00000195: 	movb	%r13b, -0x1e(%rax)
    00000199: 	movaps	%xmm0, 0x3c0(%rsp)
    000001a1: 	movzbl	0x3c2(%rsp), %r13d
    000001aa: 	movb	%r13b, -0x1c(%rax)
    000001ae: 	movaps	%xmm0, 0x3b0(%rsp)
    000001b6: 	movzbl	0x3b3(%rsp), %r13d
    000001bf: 	movb	%r13b, -0x1a(%rax)
    000001c3: 	movaps	%xmm0, 0x3a0(%rsp)
    000001cb: 	movzbl	0x3a4(%rsp), %r13d
    000001d4: 	movb	%r13b, -0x18(%rax)
    000001d8: 	movaps	%xmm0, 0x390(%rsp)
    000001e0: 	movzbl	0x395(%rsp), %r13d
    000001e9: 	movb	%r13b, -0x16(%rax)
    000001ed: 	movaps	%xmm0, 0x380(%rsp)
    000001f5: 	movzbl	0x386(%rsp), %r13d
    000001fe: 	movb	%r13b, -0x14(%rax)
    00000202: 	movaps	%xmm0, 0x370(%rsp)
    0000020a: 	movzbl	0x377(%rsp), %r13d
    00000213: 	movb	%r13b, -0x12(%rax)
    00000217: 	movaps	%xmm0, 0x360(%rsp)
    0000021f: 	movzbl	0x368(%rsp), %r13d
    00000228: 	movb	%r13b, -0x10(%rax)
    0000022c: 	movaps	%xmm0, 0x350(%rsp)
    00000234: 	movzbl	0x359(%rsp), %r13d
    0000023d: 	movb	%r13b, -0xe(%rax)
    00000241: 	movaps	%xmm0, 0x340(%rsp)
    00000249: 	movzbl	0x34a(%rsp), %r13d
    00000252: 	movb	%r13b, -0xc(%rax)
    00000256: 	movaps	%xmm0, 0x330(%rsp)
    0000025e: 	movzbl	0x33b(%rsp), %r13d
    00000267: 	movb	%r13b, -0xa(%rax)
    0000026b: 	movaps	%xmm0, 0x320(%rsp)
    00000273: 	movzbl	0x32c(%rsp), %r13d
    0000027c: 	movb	%r13b, -0x8(%rax)
    00000280: 	movaps	%xmm0, 0x310(%rsp)
    00000288: 	movzbl	0x31d(%rsp), %r13d
    00000291: 	movb	%r13b, -0x6(%rax)
    00000295: 	movaps	%xmm0, 0x300(%rsp)
    0000029d: 	movzbl	0x30e(%rsp), %r13d
    000002a6: 	movb	%r13b, -0x4(%rax)
    000002aa: 	movaps	%xmm0, 0x2f0(%rsp)
    000002b2: 	movzbl	0x2ff(%rsp), %r13d
    000002bb: 	movb	%r13b, -0x2(%rax)
    000002bf: 	cmpq	%r15, %rax
    000002c2: 	jne	.Ltmp224 # Offset: 706
    000002c8: 	movdqa	%xmm6, %xmm0
    000002cc: 	movq	%r14, %r13
    000002cf: 	psrldq	$0x8, %xmm0
    000002d4: 	andq	$-0x10, %r13
    000002d8: 	paddb	%xmm0, %xmm6
    000002dc: 	leaq	(%rcx,%r13,2), %r15
    000002e0: 	psadbw	%xmm5, %xmm6
    000002e4: 	movd	%xmm6, %eax
    000002e8: 	addl	%eax, %ebx
    000002ea: 	leal	(%r11,%r13,2), %eax
    000002ee: 	cmpq	%r13, %r14
    000002f1: 	je	.Ltmp225 # Offset: 753
    000002f7: 	cvttsd2si	init_value(%rip), %r14d
    00000300: 	movb	%r14b, (%r12,%r15)
    00000304: 	addl	%r14d, %ebx
    00000307: 	leal	0x2(%rax), %r14d
    0000030b: 	movslq	%r14d, %r14
    0000030e: 	subq	%r13, %rdx
    00000311: 	je	.Ltmp225 # Offset: 785
    00000317: 	cvttsd2si	init_value(%rip), %r13d
    00000320: 	movb	%r13b, (%r12,%r14)
    00000324: 	addl	%r13d, %ebx
    00000327: 	leal	0x4(%rax), %r13d
    0000032b: 	movslq	%r13d, %r13
    0000032e: 	cmpq	$0x1, %rdx
    00000332: 	je	.Ltmp225 # Offset: 818
    00000338: 	cvttsd2si	init_value(%rip), %r14d
    00000341: 	movb	%r14b, (%r12,%r13)
    00000345: 	leal	0x6(%rax), %r13d
    00000349: 	addl	%r14d, %ebx
    0000034c: 	movslq	%r13d, %r13
    0000034f: 	cmpq	$0x2, %rdx
    00000353: 	je	.Ltmp225 # Offset: 851
    00000359: 	cvttsd2si	init_value(%rip), %r14d
    00000362: 	movb	%r14b, (%r12,%r13)
    00000366: 	leal	0x8(%rax), %r13d
    0000036a: 	addl	%r14d, %ebx
    0000036d: 	movslq	%r13d, %r13
    00000370: 	cmpq	$0x3, %rdx
    00000374: 	je	.Ltmp225 # Offset: 884
    0000037a: 	cvttsd2si	init_value(%rip), %r14d
    00000383: 	movb	%r14b, (%r12,%r13)
    00000387: 	leal	0xa(%rax), %r13d
    0000038b: 	addl	%r14d, %ebx
    0000038e: 	movslq	%r13d, %r13
    00000391: 	cmpq	$0x4, %rdx
    00000395: 	je	.Ltmp225 # Offset: 917
    0000039b: 	cvttsd2si	init_value(%rip), %r14d
    000003a4: 	movb	%r14b, (%r12,%r13)
    000003a8: 	leal	0xc(%rax), %r13d
    000003ac: 	addl	%r14d, %ebx
    000003af: 	movslq	%r13d, %r13
    000003b2: 	cmpq	$0x5, %rdx
    000003b6: 	je	.Ltmp225 # Offset: 950
    000003bc: 	cvttsd2si	init_value(%rip), %r14d
    000003c5: 	movb	%r14b, (%r12,%r13)
    000003c9: 	leal	0xe(%rax), %r13d
    000003cd: 	addl	%r14d, %ebx
    000003d0: 	movslq	%r13d, %r13
    000003d3: 	cmpq	$0x6, %rdx
    000003d7: 	je	.Ltmp225 # Offset: 983
    000003dd: 	cvttsd2si	init_value(%rip), %r14d
    000003e6: 	movb	%r14b, (%r12,%r13)
    000003ea: 	leal	0x10(%rax), %r13d
    000003ee: 	addl	%r14d, %ebx
    000003f1: 	movslq	%r13d, %r13
    000003f4: 	cmpq	$0x7, %rdx
    000003f8: 	je	.Ltmp225 # Offset: 1016
    000003fe: 	cvttsd2si	init_value(%rip), %r14d
    00000407: 	movb	%r14b, (%r12,%r13)
    0000040b: 	leal	0x12(%rax), %r13d
    0000040f: 	addl	%r14d, %ebx
    00000412: 	movslq	%r13d, %r13
    00000415: 	cmpq	$0x8, %rdx
    00000419: 	je	.Ltmp225 # Offset: 1049
    0000041f: 	cvttsd2si	init_value(%rip), %r14d
    00000428: 	movb	%r14b, (%r12,%r13)
    0000042c: 	leal	0x14(%rax), %r13d
    00000430: 	addl	%r14d, %ebx
    00000433: 	movslq	%r13d, %r13
    00000436: 	cmpq	$0x9, %rdx
    0000043a: 	je	.Ltmp225 # Offset: 1082
    00000440: 	cvttsd2si	init_value(%rip), %r14d
    00000449: 	movb	%r14b, (%r12,%r13)
    0000044d: 	leal	0x16(%rax), %r13d
    00000451: 	addl	%r14d, %ebx
    00000454: 	movslq	%r13d, %r13
    00000457: 	cmpq	$0xa, %rdx
    0000045b: 	je	.Ltmp225 # Offset: 1115
    0000045d: 	cvttsd2si	init_value(%rip), %r14d
    00000466: 	movb	%r14b, (%r12,%r13)
    0000046a: 	leal	0x18(%rax), %r13d
    0000046e: 	addl	%r14d, %ebx
    00000471: 	movslq	%r13d, %r13
    00000474: 	cmpq	$0xb, %rdx
    00000478: 	je	.Ltmp225 # Offset: 1144
    0000047a: 	cvttsd2si	init_value(%rip), %r14d
    00000483: 	movb	%r14b, (%r12,%r13)
    00000487: 	leal	0x1a(%rax), %r13d
    0000048b: 	addl	%r14d, %ebx
    0000048e: 	movslq	%r13d, %r13
    00000491: 	cmpq	$0xc, %rdx
    00000495: 	je	.Ltmp225 # Offset: 1173
    00000497: 	cvttsd2si	init_value(%rip), %r14d
    000004a0: 	addl	$0x1c, %eax
    000004a3: 	cltq
    000004a5: 	movb	%r14b, (%r12,%r13)
    000004a9: 	addl	%r14d, %ebx
    000004ac: 	cmpq	$0xd, %rdx
    000004b0: 	je	.Ltmp225 # Offset: 1200
    000004b2: 	cvttsd2si	init_value(%rip), %edx
    000004ba: 	movb	%dl, (%r12,%rax)
    000004be: 	addl	%edx, %ebx
.Ltmp225:
    000004c0: 	cmpq	%r9, %rdi
    000004c3: 	leaq	init_value(%rip), %r14
    000004ca: 	sbbq	%r15, %r15
    000004cd: 	andq	$-0x7ff, %r15
    000004d4: 	addq	$0x800, %r15
    000004db: 	leaq	(%rcx,%r15,2), %rax
    000004df: 	leaq	-0x1(%r15), %rdx
    000004e3: 	addq	%r12, %rax
    000004e6: 	cmpq	%r14, %rax
    000004e9: 	setbe	%al
    000004ec: 	addq	$0x8, %r14
    000004f0: 	cmpq	%r14, %r8
    000004f3: 	setae	%r13b
    000004f7: 	orb	%r13b, %al
    000004fa: 	je	.Ltmp226 # Offset: 1274
    00000500: 	cmpq	$0xe, %rdx
    00000504: 	jbe	.Ltmp226 # Offset: 1284
    0000050a: 	movsd	init_value(%rip), %xmm1
    00000512: 	movq	%r15, %r14
    00000515: 	movq	%r8, %rax
    00000518: 	pxor	%xmm6, %xmm6
    0000051c: 	shrq	$0x4, %r14
    00000520: 	unpcklpd	%xmm1, %xmm1
    00000524: 	shlq	$0x5, %r14
    00000528: 	cvttpd2dq	%xmm1, %xmm1
    0000052c: 	punpcklqdq	%xmm1, %xmm1
    00000530: 	addq	%r8, %r14
    00000533: 	movdqa	%xmm1, %xmm7
    00000537: 	punpckhwd	%xmm1, %xmm7
    0000053b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp227:
    00000540: 	movdqa	%xmm1, %xmm0
    00000544: 	addq	$0x20, %rax
    00000548: 	punpcklwd	%xmm1, %xmm0
    0000054c: 	movdqa	%xmm0, %xmm8
    00000551: 	punpcklwd	%xmm7, %xmm0
    00000555: 	punpckhwd	%xmm7, %xmm8
    0000055a: 	punpcklwd	%xmm8, %xmm0
    0000055f: 	pand	%xmm2, %xmm0
    00000563: 	packuswb	%xmm0, %xmm0
    00000567: 	paddb	%xmm4, %xmm0
    0000056b: 	movd	%xmm0, %r13d
    00000570: 	paddb	%xmm0, %xmm6
    00000574: 	movb	%r13b, -0x20(%rax)
    00000578: 	movaps	%xmm0, 0x2e0(%rsp)
    00000580: 	movzbl	0x2e1(%rsp), %r13d
    00000589: 	movb	%r13b, -0x1e(%rax)
    0000058d: 	movaps	%xmm0, 0x2d0(%rsp)
    00000595: 	movzbl	0x2d2(%rsp), %r13d
    0000059e: 	movb	%r13b, -0x1c(%rax)
    000005a2: 	movaps	%xmm0, 0x2c0(%rsp)
    000005aa: 	movzbl	0x2c3(%rsp), %r13d
    000005b3: 	movb	%r13b, -0x1a(%rax)
    000005b7: 	movaps	%xmm0, 0x2b0(%rsp)
    000005bf: 	movzbl	0x2b4(%rsp), %r13d
    000005c8: 	movb	%r13b, -0x18(%rax)
    000005cc: 	movaps	%xmm0, 0x2a0(%rsp)
    000005d4: 	movzbl	0x2a5(%rsp), %r13d
    000005dd: 	movb	%r13b, -0x16(%rax)
    000005e1: 	movaps	%xmm0, 0x290(%rsp)
    000005e9: 	movzbl	0x296(%rsp), %r13d
    000005f2: 	movb	%r13b, -0x14(%rax)
    000005f6: 	movaps	%xmm0, 0x280(%rsp)
    000005fe: 	movzbl	0x287(%rsp), %r13d
    00000607: 	movb	%r13b, -0x12(%rax)
    0000060b: 	movaps	%xmm0, 0x270(%rsp)
    00000613: 	movzbl	0x278(%rsp), %r13d
    0000061c: 	movb	%r13b, -0x10(%rax)
    00000620: 	movaps	%xmm0, 0x260(%rsp)
    00000628: 	movzbl	0x269(%rsp), %r13d
    00000631: 	movb	%r13b, -0xe(%rax)
    00000635: 	movaps	%xmm0, 0x250(%rsp)
    0000063d: 	movzbl	0x25a(%rsp), %r13d
    00000646: 	movb	%r13b, -0xc(%rax)
    0000064a: 	movaps	%xmm0, 0x240(%rsp)
    00000652: 	movzbl	0x24b(%rsp), %r13d
    0000065b: 	movb	%r13b, -0xa(%rax)
    0000065f: 	movaps	%xmm0, 0x230(%rsp)
    00000667: 	movzbl	0x23c(%rsp), %r13d
    00000670: 	movb	%r13b, -0x8(%rax)
    00000674: 	movaps	%xmm0, 0x220(%rsp)
    0000067c: 	movzbl	0x22d(%rsp), %r13d
    00000685: 	movb	%r13b, -0x6(%rax)
    00000689: 	movaps	%xmm0, 0x210(%rsp)
    00000691: 	movzbl	0x21e(%rsp), %r13d
    0000069a: 	movb	%r13b, -0x4(%rax)
    0000069e: 	movaps	%xmm0, 0x200(%rsp)
    000006a6: 	movzbl	0x20f(%rsp), %r13d
    000006af: 	movb	%r13b, -0x2(%rax)
    000006b3: 	cmpq	%r14, %rax
    000006b6: 	jne	.Ltmp227 # Offset: 1718
    000006bc: 	movdqa	%xmm6, %xmm0
    000006c0: 	psrldq	$0x8, %xmm0
    000006c5: 	paddb	%xmm0, %xmm6
    000006c9: 	psadbw	%xmm5, %xmm6
    000006cd: 	movd	%xmm6, %eax
    000006d1: 	addl	%eax, %ebx
    000006d3: 	movq	%r15, %rax
    000006d6: 	andq	$-0x10, %rax
    000006da: 	leaq	(%rax,%rax), %r13
    000006de: 	leal	(%r11,%rax,2), %r11d
    000006e2: 	cmpq	%rax, %r15
    000006e5: 	je	.Ltmp222 # Offset: 1765
    000006eb: 	cvttsd2si	init_value(%rip), %r14d
    000006f4: 	addq	%r12, %r10
    000006f7: 	addl	$0x1, %r14d
    000006fb: 	movb	%r14b, (%r10,%r13)
    000006ff: 	addl	%r14d, %ebx
    00000702: 	subq	%rax, %rdx
    00000705: 	je	.Ltmp222 # Offset: 1797
    0000070b: 	cvttsd2si	init_value(%rip), %eax
    00000713: 	leal	0x3(%r11), %r10d
    00000717: 	movslq	%r10d, %r10
    0000071a: 	addl	$0x1, %eax
    0000071d: 	movb	%al, (%r12,%r10)
    00000721: 	addl	%eax, %ebx
    00000723: 	cmpq	$0x1, %rdx
    00000727: 	je	.Ltmp222 # Offset: 1831
    0000072d: 	cvttsd2si	init_value(%rip), %eax
    00000735: 	leal	0x5(%r11), %r10d
    00000739: 	movslq	%r10d, %r10
    0000073c: 	addl	$0x1, %eax
    0000073f: 	movb	%al, (%r12,%r10)
    00000743: 	addl	%eax, %ebx
    00000745: 	cmpq	$0x2, %rdx
    00000749: 	je	.Ltmp222 # Offset: 1865
    0000074f: 	cvttsd2si	init_value(%rip), %eax
    00000757: 	leal	0x7(%r11), %r10d
    0000075b: 	movslq	%r10d, %r10
    0000075e: 	addl	$0x1, %eax
    00000761: 	movb	%al, (%r12,%r10)
    00000765: 	addl	%eax, %ebx
    00000767: 	cmpq	$0x3, %rdx
    0000076b: 	je	.Ltmp222 # Offset: 1899
    00000771: 	cvttsd2si	init_value(%rip), %eax
    00000779: 	leal	0x9(%r11), %r10d
    0000077d: 	movslq	%r10d, %r10
    00000780: 	addl	$0x1, %eax
    00000783: 	movb	%al, (%r12,%r10)
    00000787: 	addl	%eax, %ebx
    00000789: 	cmpq	$0x4, %rdx
    0000078d: 	je	.Ltmp222 # Offset: 1933
    00000793: 	cvttsd2si	init_value(%rip), %eax
    0000079b: 	leal	0xb(%r11), %r10d
    0000079f: 	movslq	%r10d, %r10
    000007a2: 	addl	$0x1, %eax
    000007a5: 	movb	%al, (%r12,%r10)
    000007a9: 	addl	%eax, %ebx
    000007ab: 	cmpq	$0x5, %rdx
    000007af: 	je	.Ltmp222 # Offset: 1967
    000007b5: 	cvttsd2si	init_value(%rip), %eax
    000007bd: 	leal	0xd(%r11), %r10d
    000007c1: 	movslq	%r10d, %r10
    000007c4: 	addl	$0x1, %eax
    000007c7: 	movb	%al, (%r12,%r10)
    000007cb: 	addl	%eax, %ebx
    000007cd: 	cmpq	$0x6, %rdx
    000007d1: 	je	.Ltmp222 # Offset: 2001
    000007d7: 	cvttsd2si	init_value(%rip), %eax
    000007df: 	leal	0xf(%r11), %r10d
    000007e3: 	movslq	%r10d, %r10
    000007e6: 	addl	$0x1, %eax
    000007e9: 	movb	%al, (%r12,%r10)
    000007ed: 	addl	%eax, %ebx
    000007ef: 	cmpq	$0x7, %rdx
    000007f3: 	je	.Ltmp222 # Offset: 2035
    000007f9: 	cvttsd2si	init_value(%rip), %eax
    00000801: 	leal	0x11(%r11), %r10d
    00000805: 	movslq	%r10d, %r10
    00000808: 	addl	$0x1, %eax
    0000080b: 	movb	%al, (%r12,%r10)
    0000080f: 	addl	%eax, %ebx
    00000811: 	cmpq	$0x8, %rdx
    00000815: 	je	.Ltmp222 # Offset: 2069
    0000081b: 	cvttsd2si	init_value(%rip), %eax
    00000823: 	leal	0x13(%r11), %r10d
    00000827: 	movslq	%r10d, %r10
    0000082a: 	addl	$0x1, %eax
    0000082d: 	movb	%al, (%r12,%r10)
    00000831: 	addl	%eax, %ebx
    00000833: 	cmpq	$0x9, %rdx
    00000837: 	je	.Ltmp222 # Offset: 2103
    0000083d: 	cvttsd2si	init_value(%rip), %eax
    00000845: 	leal	0x15(%r11), %r10d
    00000849: 	movslq	%r10d, %r10
    0000084c: 	addl	$0x1, %eax
    0000084f: 	movb	%al, (%r12,%r10)
    00000853: 	addl	%eax, %ebx
    00000855: 	cmpq	$0xa, %rdx
    00000859: 	je	.Ltmp222 # Offset: 2137
    0000085b: 	cvttsd2si	init_value(%rip), %eax
    00000863: 	leal	0x17(%r11), %r10d
    00000867: 	movslq	%r10d, %r10
    0000086a: 	addl	$0x1, %eax
    0000086d: 	movb	%al, (%r12,%r10)
    00000871: 	addl	%eax, %ebx
    00000873: 	cmpq	$0xb, %rdx
    00000877: 	je	.Ltmp222 # Offset: 2167
    00000879: 	cvttsd2si	init_value(%rip), %eax
    00000881: 	leal	0x19(%r11), %r10d
    00000885: 	movslq	%r10d, %r10
    00000888: 	addl	$0x1, %eax
    0000088b: 	movb	%al, (%r12,%r10)
    0000088f: 	addl	%eax, %ebx
    00000891: 	cmpq	$0xc, %rdx
    00000895: 	je	.Ltmp222 # Offset: 2197
    00000897: 	cvttsd2si	init_value(%rip), %eax
    0000089f: 	leal	0x1b(%r11), %r10d
    000008a3: 	movslq	%r10d, %r10
    000008a6: 	addl	$0x1, %eax
    000008a9: 	movb	%al, (%r12,%r10)
    000008ad: 	addl	%eax, %ebx
    000008af: 	cmpq	$0xd, %rdx
    000008b3: 	je	.Ltmp222 # Offset: 2227
    000008b5: 	cvttsd2si	init_value(%rip), %edx
    000008bd: 	leal	0x1d(%r11), %eax
    000008c1: 	cltq
    000008c3: 	addl	$0x1, %edx
    000008c6: 	movb	%dl, (%r12,%rax)
    000008ca: 	addl	%edx, %ebx
.Ltmp222:
    000008cc: 	addq	$0x1000, %rcx
    000008d3: 	addq	$0x1000, %rdi
    000008da: 	addq	$0x1000, %rsi
    000008e1: 	addq	$0x1000, %r9
    000008e8: 	addq	$0x1000, %r8
    000008ef: 	cmpl	%ecx, %ebp
    000008f1: 	jg	.Ltmp228 # Offset: 2289
    000008f7: 	movl	0x1c(%rsp), %ebp
    000008fb: 	movl	0x18(%rsp), %eax
    000008ff: 	cmpl	%ebp, %eax
    00000901: 	jge	.Ltmp229 # Offset: 2305
    00000907: 	movl	%eax, %edx
.Ltmp247:
    00000909: 	movl	0x14(%rsp), %eax
    0000090d: 	movl	$0x1, %r8d
    00000913: 	movslq	%edx, %rsi
    00000916: 	leaq	init_value(%rip), %r13
    0000091d: 	leaq	0x8(%r13), %r11
    00000921: 	leal	-0x2(%rax), %ecx
    00000924: 	leaq	(%r12,%rsi), %rax
    00000928: 	subl	%edx, %ecx
    0000092a: 	cmpl	$0x1d, %ecx
    0000092d: 	seta	%r10b
    00000931: 	shrl	%ecx
    00000933: 	cmpl	%ebp, %edx
    00000935: 	movl	%ecx, %r15d
    00000938: 	leal	0x1(%rcx), %ecx
    0000093b: 	leaq	-0x2(%rcx,%rcx), %r14
    00000940: 	movq	%rcx, %rdi
    00000943: 	leaq	0x1(%r14), %rcx
    00000947: 	cmovgeq	%r8, %rcx
    0000094b: 	addq	%rsi, %rcx
    0000094e: 	addq	%r12, %rcx
    00000951: 	cmpq	%r13, %rcx
    00000954: 	setbe	%r8b
    00000958: 	cmpq	%r11, %rax
    0000095b: 	setae	%cl
    0000095e: 	orb	%r8b, %cl
    00000961: 	je	.Ltmp230 # Offset: 2401
    00000967: 	cmpl	%ebp, %edx
    00000969: 	setl	%cl
    0000096c: 	testb	%r10b, %cl
    0000096f: 	je	.Ltmp230 # Offset: 2415
    00000975: 	cmpl	%ebp, %edx
    00000977: 	movl	$0x1, %r8d
    0000097d: 	pxor	%xmm3, %xmm3
    00000981: 	movsd	init_value(%rip), %xmm1
    00000989: 	cmovll	%edi, %r8d
    0000098d: 	movdqa	DATAat0x36f20(%rip), %xmm6
    00000995: 	unpcklpd	%xmm1, %xmm1
    00000999: 	movl	%r8d, %ecx
    0000099c: 	cvttpd2dq	%xmm1, %xmm1
    000009a0: 	punpcklqdq	%xmm1, %xmm1
    000009a4: 	shrl	$0x4, %ecx
    000009a7: 	movdqa	%xmm1, %xmm4
    000009ab: 	subl	$0x1, %ecx
    000009ae: 	punpckhwd	%xmm1, %xmm4
    000009b2: 	shlq	$0x5, %rcx
    000009b6: 	leaq	0x20(%rax,%rcx), %r9
.Ltmp231:
    000009bb: 	movdqa	%xmm1, %xmm0
    000009bf: 	addq	$0x20, %rax
    000009c3: 	punpcklwd	%xmm1, %xmm0
    000009c7: 	movdqa	%xmm0, %xmm5
    000009cb: 	punpcklwd	%xmm4, %xmm0
    000009cf: 	punpckhwd	%xmm4, %xmm5
    000009d3: 	punpcklwd	%xmm5, %xmm0
    000009d7: 	pand	%xmm6, %xmm0
    000009db: 	packuswb	%xmm0, %xmm0
    000009df: 	movd	%xmm0, %ecx
    000009e3: 	paddb	%xmm0, %xmm3
    000009e7: 	movb	%cl, -0x20(%rax)
    000009ea: 	movaps	%xmm0, 0x1f0(%rsp)
    000009f2: 	movzbl	0x1f1(%rsp), %ecx
    000009fa: 	movb	%cl, -0x1e(%rax)
    000009fd: 	movaps	%xmm0, 0x1e0(%rsp)
    00000a05: 	movzbl	0x1e2(%rsp), %ecx
    00000a0d: 	movb	%cl, -0x1c(%rax)
    00000a10: 	movaps	%xmm0, 0x1d0(%rsp)
    00000a18: 	movzbl	0x1d3(%rsp), %ecx
    00000a20: 	movb	%cl, -0x1a(%rax)
    00000a23: 	movaps	%xmm0, 0x1c0(%rsp)
    00000a2b: 	movzbl	0x1c4(%rsp), %ecx
    00000a33: 	movb	%cl, -0x18(%rax)
    00000a36: 	movaps	%xmm0, 0x1b0(%rsp)
    00000a3e: 	movzbl	0x1b5(%rsp), %ecx
    00000a46: 	movb	%cl, -0x16(%rax)
    00000a49: 	movaps	%xmm0, 0x1a0(%rsp)
    00000a51: 	movzbl	0x1a6(%rsp), %ecx
    00000a59: 	movb	%cl, -0x14(%rax)
    00000a5c: 	movaps	%xmm0, 0x190(%rsp)
    00000a64: 	movzbl	0x197(%rsp), %ecx
    00000a6c: 	movb	%cl, -0x12(%rax)
    00000a6f: 	movaps	%xmm0, 0x180(%rsp)
    00000a77: 	movzbl	0x188(%rsp), %ecx
    00000a7f: 	movb	%cl, -0x10(%rax)
    00000a82: 	movaps	%xmm0, 0x170(%rsp)
    00000a8a: 	movzbl	0x179(%rsp), %ecx
    00000a92: 	movb	%cl, -0xe(%rax)
    00000a95: 	movaps	%xmm0, 0x160(%rsp)
    00000a9d: 	movzbl	0x16a(%rsp), %ecx
    00000aa5: 	movb	%cl, -0xc(%rax)
    00000aa8: 	movaps	%xmm0, 0x150(%rsp)
    00000ab0: 	movzbl	0x15b(%rsp), %ecx
    00000ab8: 	movb	%cl, -0xa(%rax)
    00000abb: 	movaps	%xmm0, 0x140(%rsp)
    00000ac3: 	movzbl	0x14c(%rsp), %ecx
    00000acb: 	movb	%cl, -0x8(%rax)
    00000ace: 	movaps	%xmm0, 0x130(%rsp)
    00000ad6: 	movzbl	0x13d(%rsp), %ecx
    00000ade: 	movb	%cl, -0x6(%rax)
    00000ae1: 	movaps	%xmm0, 0x120(%rsp)
    00000ae9: 	movzbl	0x12e(%rsp), %ecx
    00000af1: 	movb	%cl, -0x4(%rax)
    00000af4: 	movaps	%xmm0, 0x110(%rsp)
    00000afc: 	movzbl	0x11f(%rsp), %ecx
    00000b04: 	movb	%cl, -0x2(%rax)
    00000b07: 	cmpq	%r9, %rax
    00000b0a: 	jne	.Ltmp231 # Offset: 2826
    00000b10: 	movdqa	%xmm3, %xmm0
    00000b14: 	pxor	%xmm1, %xmm1
    00000b18: 	movl	%r8d, %ecx
    00000b1b: 	psrldq	$0x8, %xmm0
    00000b20: 	andl	$-0x10, %ecx
    00000b23: 	paddb	%xmm3, %xmm0
    00000b27: 	psadbw	%xmm1, %xmm0
    00000b2b: 	movd	%xmm0, %eax
    00000b2f: 	addl	%eax, %ebx
    00000b31: 	leal	(%rdx,%rcx,2), %eax
    00000b34: 	cmpl	%ecx, %r8d
    00000b37: 	je	.Ltmp232 # Offset: 2871
    00000b3d: 	cvttsd2si	init_value(%rip), %ecx
    00000b45: 	movslq	%eax, %r8
    00000b48: 	movb	%cl, (%r12,%r8)
    00000b4c: 	addl	%ecx, %ebx
    00000b4e: 	leal	0x2(%rax), %ecx
    00000b51: 	cmpl	%ecx, %ebp
    00000b53: 	jle	.Ltmp232 # Offset: 2899
    00000b59: 	cvttsd2si	init_value(%rip), %r8d
    00000b62: 	movslq	%ecx, %rcx
    00000b65: 	movb	%r8b, (%r12,%rcx)
    00000b69: 	leal	0x4(%rax), %ecx
    00000b6c: 	addl	%r8d, %ebx
    00000b6f: 	cmpl	%ecx, %ebp
    00000b71: 	jle	.Ltmp232 # Offset: 2929
    00000b77: 	cvttsd2si	init_value(%rip), %r8d
    00000b80: 	movslq	%ecx, %rcx
    00000b83: 	movb	%r8b, (%r12,%rcx)
    00000b87: 	leal	0x6(%rax), %ecx
    00000b8a: 	addl	%r8d, %ebx
    00000b8d: 	cmpl	%ecx, %ebp
    00000b8f: 	jle	.Ltmp232 # Offset: 2959
    00000b95: 	cvttsd2si	init_value(%rip), %r8d
    00000b9e: 	movslq	%ecx, %rcx
    00000ba1: 	movb	%r8b, (%r12,%rcx)
    00000ba5: 	leal	0x8(%rax), %ecx
    00000ba8: 	addl	%r8d, %ebx
    00000bab: 	cmpl	%ecx, %ebp
    00000bad: 	jle	.Ltmp232 # Offset: 2989
    00000bb3: 	cvttsd2si	init_value(%rip), %r8d
    00000bbc: 	movslq	%ecx, %rcx
    00000bbf: 	movb	%r8b, (%r12,%rcx)
    00000bc3: 	leal	0xa(%rax), %ecx
    00000bc6: 	addl	%r8d, %ebx
    00000bc9: 	cmpl	%ecx, %ebp
    00000bcb: 	jle	.Ltmp232 # Offset: 3019
    00000bd1: 	cvttsd2si	init_value(%rip), %r8d
    00000bda: 	movslq	%ecx, %rcx
    00000bdd: 	movb	%r8b, (%r12,%rcx)
    00000be1: 	leal	0xc(%rax), %ecx
    00000be4: 	addl	%r8d, %ebx
    00000be7: 	cmpl	%ecx, %ebp
    00000be9: 	jle	.Ltmp232 # Offset: 3049
    00000bef: 	cvttsd2si	init_value(%rip), %r8d
    00000bf8: 	movslq	%ecx, %rcx
    00000bfb: 	movb	%r8b, (%r12,%rcx)
    00000bff: 	leal	0xe(%rax), %ecx
    00000c02: 	addl	%r8d, %ebx
    00000c05: 	cmpl	%ecx, %ebp
    00000c07: 	jle	.Ltmp232 # Offset: 3079
    00000c0d: 	cvttsd2si	init_value(%rip), %r8d
    00000c16: 	movslq	%ecx, %rcx
    00000c19: 	movb	%r8b, (%r12,%rcx)
    00000c1d: 	leal	0x10(%rax), %ecx
    00000c20: 	addl	%r8d, %ebx
    00000c23: 	cmpl	%ecx, %ebp
    00000c25: 	jle	.Ltmp232 # Offset: 3109
    00000c2b: 	cvttsd2si	init_value(%rip), %r8d
    00000c34: 	movslq	%ecx, %rcx
    00000c37: 	movb	%r8b, (%r12,%rcx)
    00000c3b: 	leal	0x12(%rax), %ecx
    00000c3e: 	addl	%r8d, %ebx
    00000c41: 	cmpl	%ecx, %ebp
    00000c43: 	jle	.Ltmp232 # Offset: 3139
    00000c49: 	cvttsd2si	init_value(%rip), %r8d
    00000c52: 	movslq	%ecx, %rcx
    00000c55: 	movb	%r8b, (%r12,%rcx)
    00000c59: 	leal	0x14(%rax), %ecx
    00000c5c: 	addl	%r8d, %ebx
    00000c5f: 	cmpl	%ecx, %ebp
    00000c61: 	jle	.Ltmp232 # Offset: 3169
    00000c63: 	cvttsd2si	init_value(%rip), %r8d
    00000c6c: 	movslq	%ecx, %rcx
    00000c6f: 	movb	%r8b, (%r12,%rcx)
    00000c73: 	leal	0x16(%rax), %ecx
    00000c76: 	addl	%r8d, %ebx
    00000c79: 	cmpl	%ecx, %ebp
    00000c7b: 	jle	.Ltmp232 # Offset: 3195
    00000c7d: 	cvttsd2si	init_value(%rip), %r8d
    00000c86: 	movslq	%ecx, %rcx
    00000c89: 	movb	%r8b, (%r12,%rcx)
    00000c8d: 	leal	0x18(%rax), %ecx
    00000c90: 	addl	%r8d, %ebx
    00000c93: 	cmpl	%ecx, %ebp
    00000c95: 	jle	.Ltmp232 # Offset: 3221
    00000c97: 	cvttsd2si	init_value(%rip), %r8d
    00000ca0: 	movslq	%ecx, %rcx
    00000ca3: 	movb	%r8b, (%r12,%rcx)
    00000ca7: 	leal	0x1a(%rax), %ecx
    00000caa: 	addl	%r8d, %ebx
    00000cad: 	cmpl	%ecx, %ebp
    00000caf: 	jle	.Ltmp232 # Offset: 3247
    00000cb1: 	cvttsd2si	init_value(%rip), %r8d
    00000cba: 	movslq	%ecx, %rcx
    00000cbd: 	addl	$0x1c, %eax
    00000cc0: 	movb	%r8b, (%r12,%rcx)
    00000cc4: 	addl	%r8d, %ebx
    00000cc7: 	cmpl	%eax, %ebp
    00000cc9: 	jle	.Ltmp232 # Offset: 3273
    00000ccb: 	cvttsd2si	init_value(%rip), %ecx
    00000cd3: 	cltq
    00000cd5: 	movb	%cl, (%r12,%rax)
    00000cd9: 	addl	%ecx, %ebx
.Ltmp232:
    00000cdb: 	leaq	0x2(%rsi,%r14), %rcx
    00000ce0: 	leaq	0x1(%r12,%rsi), %rax
    00000ce5: 	addq	%r12, %rcx
    00000ce8: 	cmpq	%r13, %rcx
    00000ceb: 	setbe	%cl
    00000cee: 	cmpq	%r11, %rax
    00000cf1: 	setae	%r8b
    00000cf5: 	orb	%r8b, %cl
    00000cf8: 	je	.Ltmp233 # Offset: 3320
    00000cfe: 	testb	%r10b, %r10b
    00000d01: 	je	.Ltmp233 # Offset: 3329
    00000d07: 	movsd	init_value(%rip), %xmm3
    00000d0f: 	movl	%edi, %ecx
    00000d11: 	pxor	%xmm1, %xmm1
    00000d15: 	shrl	$0x4, %ecx
    00000d18: 	unpcklpd	%xmm3, %xmm3
    00000d1c: 	subl	$0x1, %ecx
    00000d1f: 	cvttpd2dq	%xmm3, %xmm3
    00000d23: 	punpcklqdq	%xmm3, %xmm3
    00000d27: 	shlq	$0x5, %rcx
    00000d2b: 	movdqa	%xmm3, %xmm4
    00000d2f: 	leaq	0x20(%rax,%rcx), %rsi
    00000d34: 	punpckhwd	%xmm3, %xmm4
.Ltmp234:
    00000d38: 	movdqa	%xmm3, %xmm0
    00000d3c: 	addq	$0x20, %rax
    00000d40: 	punpcklwd	%xmm3, %xmm0
    00000d44: 	movdqa	%xmm0, %xmm5
    00000d48: 	punpcklwd	%xmm4, %xmm0
    00000d4c: 	punpckhwd	%xmm4, %xmm5
    00000d50: 	punpcklwd	%xmm5, %xmm0
    00000d54: 	pand	%xmm2, %xmm0
    00000d58: 	packuswb	%xmm0, %xmm0
    00000d5c: 	paddb	DATAat0x36f30(%rip), %xmm0
    00000d64: 	movd	%xmm0, %ecx
    00000d68: 	paddb	%xmm0, %xmm1
    00000d6c: 	movb	%cl, -0x20(%rax)
    00000d6f: 	movaps	%xmm0, 0x100(%rsp)
    00000d77: 	movzbl	0x101(%rsp), %ecx
    00000d7f: 	movb	%cl, -0x1e(%rax)
    00000d82: 	movaps	%xmm0, 0xf0(%rsp)
    00000d8a: 	movzbl	0xf2(%rsp), %ecx
    00000d92: 	movb	%cl, -0x1c(%rax)
    00000d95: 	movaps	%xmm0, 0xe0(%rsp)
    00000d9d: 	movzbl	0xe3(%rsp), %ecx
    00000da5: 	movb	%cl, -0x1a(%rax)
    00000da8: 	movaps	%xmm0, 0xd0(%rsp)
    00000db0: 	movzbl	0xd4(%rsp), %ecx
    00000db8: 	movb	%cl, -0x18(%rax)
    00000dbb: 	movaps	%xmm0, 0xc0(%rsp)
    00000dc3: 	movzbl	0xc5(%rsp), %ecx
    00000dcb: 	movb	%cl, -0x16(%rax)
    00000dce: 	movaps	%xmm0, 0xb0(%rsp)
    00000dd6: 	movzbl	0xb6(%rsp), %ecx
    00000dde: 	movb	%cl, -0x14(%rax)
    00000de1: 	movaps	%xmm0, 0xa0(%rsp)
    00000de9: 	movzbl	0xa7(%rsp), %ecx
    00000df1: 	movb	%cl, -0x12(%rax)
    00000df4: 	movaps	%xmm0, 0x90(%rsp)
    00000dfc: 	movzbl	0x98(%rsp), %ecx
    00000e04: 	movb	%cl, -0x10(%rax)
    00000e07: 	movaps	%xmm0, 0x80(%rsp)
    00000e0f: 	movzbl	0x89(%rsp), %ecx
    00000e17: 	movb	%cl, -0xe(%rax)
    00000e1a: 	movaps	%xmm0, 0x70(%rsp)
    00000e1f: 	movzbl	0x7a(%rsp), %ecx
    00000e24: 	movb	%cl, -0xc(%rax)
    00000e27: 	movaps	%xmm0, 0x60(%rsp)
    00000e2c: 	movzbl	0x6b(%rsp), %ecx
    00000e31: 	movb	%cl, -0xa(%rax)
    00000e34: 	movaps	%xmm0, 0x50(%rsp)
    00000e39: 	movzbl	0x5c(%rsp), %ecx
    00000e3e: 	movb	%cl, -0x8(%rax)
    00000e41: 	movaps	%xmm0, 0x40(%rsp)
    00000e46: 	movzbl	0x4d(%rsp), %ecx
    00000e4b: 	movb	%cl, -0x6(%rax)
    00000e4e: 	movaps	%xmm0, 0x30(%rsp)
    00000e53: 	movzbl	0x3e(%rsp), %ecx
    00000e58: 	movb	%cl, -0x4(%rax)
    00000e5b: 	movaps	%xmm0, 0x20(%rsp)
    00000e60: 	movzbl	0x2f(%rsp), %ecx
    00000e65: 	movb	%cl, -0x2(%rax)
    00000e68: 	cmpq	%rsi, %rax
    00000e6b: 	jne	.Ltmp234 # Offset: 3691
    00000e71: 	movdqa	%xmm1, %xmm0
    00000e75: 	movl	%edi, %ecx
    00000e77: 	psrldq	$0x8, %xmm0
    00000e7c: 	andl	$-0x10, %ecx
    00000e7f: 	paddb	%xmm1, %xmm0
    00000e83: 	pxor	%xmm1, %xmm1
    00000e87: 	psadbw	%xmm1, %xmm0
    00000e8b: 	movd	%xmm0, %eax
    00000e8f: 	addl	%eax, %ebx
    00000e91: 	leal	(%rdx,%rcx,2), %eax
    00000e94: 	cmpl	%edi, %ecx
    00000e96: 	je	.Ltmp229 # Offset: 3734
    00000e9c: 	cvttsd2si	init_value(%rip), %edx
    00000ea4: 	leal	0x1(%rax), %ecx
    00000ea7: 	movslq	%ecx, %rcx
    00000eaa: 	addl	$0x1, %edx
    00000ead: 	movb	%dl, (%r12,%rcx)
    00000eb1: 	addl	%edx, %ebx
    00000eb3: 	leal	0x2(%rax), %edx
    00000eb6: 	cmpl	%ebp, %edx
    00000eb8: 	jge	.Ltmp229 # Offset: 3768
    00000ebe: 	cvttsd2si	init_value(%rip), %edx
    00000ec6: 	leal	0x3(%rax), %ecx
    00000ec9: 	movslq	%ecx, %rcx
    00000ecc: 	addl	$0x1, %edx
    00000ecf: 	movb	%dl, (%r12,%rcx)
    00000ed3: 	addl	%edx, %ebx
    00000ed5: 	leal	0x4(%rax), %edx
    00000ed8: 	cmpl	%ebp, %edx
    00000eda: 	jge	.Ltmp229 # Offset: 3802
    00000ee0: 	cvttsd2si	init_value(%rip), %edx
    00000ee8: 	leal	0x5(%rax), %ecx
    00000eeb: 	movslq	%ecx, %rcx
    00000eee: 	addl	$0x1, %edx
    00000ef1: 	movb	%dl, (%r12,%rcx)
    00000ef5: 	addl	%edx, %ebx
    00000ef7: 	leal	0x6(%rax), %edx
    00000efa: 	cmpl	%edx, %ebp
    00000efc: 	jle	.Ltmp229 # Offset: 3836
    00000f02: 	cvttsd2si	init_value(%rip), %edx
    00000f0a: 	leal	0x7(%rax), %ecx
    00000f0d: 	movslq	%ecx, %rcx
    00000f10: 	addl	$0x1, %edx
    00000f13: 	movb	%dl, (%r12,%rcx)
    00000f17: 	addl	%edx, %ebx
    00000f19: 	leal	0x8(%rax), %edx
    00000f1c: 	cmpl	%ebp, %edx
    00000f1e: 	jge	.Ltmp229 # Offset: 3870
    00000f24: 	cvttsd2si	init_value(%rip), %edx
    00000f2c: 	leal	0x9(%rax), %ecx
    00000f2f: 	movslq	%ecx, %rcx
    00000f32: 	addl	$0x1, %edx
    00000f35: 	movb	%dl, (%r12,%rcx)
    00000f39: 	addl	%edx, %ebx
    00000f3b: 	leal	0xa(%rax), %edx
    00000f3e: 	cmpl	%edx, %ebp
    00000f40: 	jle	.Ltmp229 # Offset: 3904
    00000f46: 	cvttsd2si	init_value(%rip), %edx
    00000f4e: 	leal	0xb(%rax), %ecx
    00000f51: 	movslq	%ecx, %rcx
    00000f54: 	addl	$0x1, %edx
    00000f57: 	movb	%dl, (%r12,%rcx)
    00000f5b: 	addl	%edx, %ebx
    00000f5d: 	leal	0xc(%rax), %edx
    00000f60: 	cmpl	%edx, %ebp
    00000f62: 	jle	.Ltmp229 # Offset: 3938
    00000f68: 	cvttsd2si	init_value(%rip), %edx
    00000f70: 	leal	0xd(%rax), %ecx
    00000f73: 	movslq	%ecx, %rcx
    00000f76: 	addl	$0x1, %edx
    00000f79: 	movb	%dl, (%r12,%rcx)
    00000f7d: 	addl	%edx, %ebx
    00000f7f: 	leal	0xe(%rax), %edx
    00000f82: 	cmpl	%edx, %ebp
    00000f84: 	jle	.Ltmp229 # Offset: 3972
    00000f8a: 	cvttsd2si	init_value(%rip), %edx
    00000f92: 	leal	0xf(%rax), %ecx
    00000f95: 	movslq	%ecx, %rcx
    00000f98: 	addl	$0x1, %edx
    00000f9b: 	movb	%dl, (%r12,%rcx)
    00000f9f: 	addl	%edx, %ebx
    00000fa1: 	leal	0x10(%rax), %edx
    00000fa4: 	cmpl	%edx, %ebp
    00000fa6: 	jle	.Ltmp229 # Offset: 4006
    00000fac: 	cvttsd2si	init_value(%rip), %edx
    00000fb4: 	leal	0x11(%rax), %ecx
    00000fb7: 	movslq	%ecx, %rcx
    00000fba: 	addl	$0x1, %edx
    00000fbd: 	movb	%dl, (%r12,%rcx)
    00000fc1: 	addl	%edx, %ebx
    00000fc3: 	leal	0x12(%rax), %edx
    00000fc6: 	cmpl	%edx, %ebp
    00000fc8: 	jle	.Ltmp229 # Offset: 4040
    00000fce: 	cvttsd2si	init_value(%rip), %edx
    00000fd6: 	leal	0x13(%rax), %ecx
    00000fd9: 	movslq	%ecx, %rcx
    00000fdc: 	addl	$0x1, %edx
    00000fdf: 	movb	%dl, (%r12,%rcx)
    00000fe3: 	addl	%edx, %ebx
    00000fe5: 	leal	0x14(%rax), %edx
    00000fe8: 	cmpl	%edx, %ebp
    00000fea: 	jle	.Ltmp229 # Offset: 4074
    00000ff0: 	cvttsd2si	init_value(%rip), %edx
    00000ff8: 	leal	0x15(%rax), %ecx
    00000ffb: 	movslq	%ecx, %rcx
    00000ffe: 	addl	$0x1, %edx
    00001001: 	movb	%dl, (%r12,%rcx)
    00001005: 	addl	%edx, %ebx
    00001007: 	leal	0x16(%rax), %edx
    0000100a: 	cmpl	%edx, %ebp
    0000100c: 	jle	.Ltmp229 # Offset: 4108
    0000100e: 	cvttsd2si	init_value(%rip), %edx
    00001016: 	leal	0x17(%rax), %ecx
    00001019: 	movslq	%ecx, %rcx
    0000101c: 	addl	$0x1, %edx
    0000101f: 	movb	%dl, (%r12,%rcx)
    00001023: 	addl	%edx, %ebx
    00001025: 	leal	0x18(%rax), %edx
    00001028: 	cmpl	%edx, %ebp
    0000102a: 	jle	.Ltmp229 # Offset: 4138
    0000102c: 	cvttsd2si	init_value(%rip), %edx
    00001034: 	leal	0x19(%rax), %ecx
    00001037: 	movslq	%ecx, %rcx
    0000103a: 	addl	$0x1, %edx
    0000103d: 	movb	%dl, (%r12,%rcx)
    00001041: 	addl	%edx, %ebx
    00001043: 	leal	0x1a(%rax), %edx
    00001046: 	cmpl	%edx, %ebp
    00001048: 	jle	.Ltmp229 # Offset: 4168
    0000104a: 	cvttsd2si	init_value(%rip), %edx
    00001052: 	leal	0x1b(%rax), %ecx
    00001055: 	movslq	%ecx, %rcx
    00001058: 	addl	$0x1, %edx
    0000105b: 	movb	%dl, (%r12,%rcx)
    0000105f: 	addl	%edx, %ebx
    00001061: 	leal	0x1c(%rax), %edx
    00001064: 	cmpl	%edx, %ebp
    00001066: 	jle	.Ltmp229 # Offset: 4198
    00001068: 	cvttsd2si	init_value(%rip), %edx
    00001070: 	addl	$0x1d, %eax
    00001073: 	cltq
    00001075: 	addl	$0x1, %edx
    00001078: 	movb	%dl, (%r12,%rax)
    0000107c: 	addl	%edx, %ebx
.Ltmp229:
    0000107e: 	movl	iterations(%rip), %eax
    00001084: 	testb	%bl, %bl
    00001086: 	jne	.Ltmp235 # Offset: 4230
.Ltmp243:
    0000108c: 	addl	$0x1, 0x4(%rsp)
    00001091: 	movl	0x4(%rsp), %edi
    00001095: 	cmpl	%eax, %edi
    00001097: 	jl	.Ltmp236 # Offset: 4247
.Ltmp220:
    0000109d: 	callq	clock@PLT # Offset: 4253
    000010a2: 	movq	%rax, end_time(%rip)
    000010a9: 	movq	0x3e8(%rsp), %rdx
    000010b1: 	subq	%fs:0x28, %rdx
    000010ba: 	jne	.Ltmp237 # Offset: 4282
    000010c0: 	subq	start_time(%rip), %rax
    000010c7: 	pxor	%xmm0, %xmm0
    000010cb: 	movq	0x8(%rsp), %rdi
    000010d0: 	cvtsi2sd	%rax, %xmm0
    000010d5: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000010dd: 	addq	$0x3f8, %rsp
    000010e4: 	popq	%rbx
    000010e5: 	popq	%rbp
    000010e6: 	popq	%r12
    000010e8: 	popq	%r13
    000010ea: 	popq	%r14
    000010ec: 	popq	%r15
    000010ee: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 4334
.Ltmp226:
    000010f3: 	leaq	0x1(%rsi,%r15,2), %r10
    000010f8: 	movq	%r8, %rdx
    000010fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp238:
    00001100: 	cvttsd2si	init_value(%rip), %eax
    00001108: 	addq	$0x2, %rdx
    0000110c: 	addl	$0x1, %eax
    0000110f: 	movb	%al, -0x2(%rdx)
    00001112: 	addl	%eax, %ebx
    00001114: 	cmpq	%rdx, %r10
    00001117: 	jne	.Ltmp238 # Offset: 4375
    00001119: 	jmp	.Ltmp222 # Offset: 4377
.Ltmp223:
    0000111e: 	leaq	(%rsi,%r14,2), %r13
    00001122: 	movq	%rsi, %rax
    00001125: 	nopl	(%rax) # Size: 3
.Ltmp239:
    00001128: 	cvttsd2si	init_value(%rip), %edx
    00001130: 	addq	$0x2, %rax
    00001134: 	movb	%dl, -0x2(%rax)
    00001137: 	addl	%edx, %ebx
    00001139: 	cmpq	%r13, %rax
    0000113c: 	jne	.Ltmp239 # Offset: 4412
    0000113e: 	jmp	.Ltmp225 # Offset: 4414
.Ltmp235:
    00001143: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000114a: 	movl	$0x5, %edx
    0000114f: 	leaq	DATAat0x35004(%rip), %rsi
    00001156: 	movq	%r13, %rdi
    00001159: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4441
    0000115e: 	cmpq	$0x0, 0x8(%rsp)
    00001164: 	je	.Ltmp240 # Offset: 4452
    0000116a: 	movq	0x8(%rsp), %r15
    0000116f: 	movq	%r15, %rdi
    00001172: 	callq	strlen@PLT # Offset: 4466
    00001177: 	movq	%r15, %rsi
    0000117a: 	movq	%r13, %rdi
    0000117d: 	movq	%rax, %rdx
    00001180: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4480
.Ltmp248:
    00001185: 	movq	%r13, %rdi
    00001188: 	leaq	0x3e7(%rsp), %r14
    00001190: 	movl	$0xd, %edx
    00001195: 	leaq	DATAat0x3500a(%rip), %rsi
    0000119c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4508
    000011a1: 	movq	%r14, %rsi
    000011a4: 	movq	%r13, %rdi
    000011a7: 	movl	$0x1, %edx
    000011ac: 	movb	%bl, 0x3e7(%rsp)
    000011b3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4531
    000011b8: 	movl	$0xb, %edx
    000011bd: 	leaq	DATAat0x35018(%rip), %rsi
    000011c4: 	movq	%rax, %r13
    000011c7: 	movq	%rax, %rdi
    000011ca: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4554
    000011cf: 	movq	%r14, %rsi
    000011d2: 	movq	%r13, %rdi
    000011d5: 	movl	$0x1, %edx
    000011da: 	movb	$0x0, 0x3e7(%rsp)
    000011e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4578
    000011e7: 	movq	%rax, %r14
    000011ea: 	movq	(%rax), %rax
    000011ed: 	movq	-0x18(%rax), %rax
    000011f1: 	movq	0xf0(%r14,%rax), %r13
    000011f9: 	testq	%r13, %r13
    000011fc: 	je	.Ltmp241 # Offset: 4604
    00001202: 	cmpb	$0x0, 0x38(%r13)
    00001207: 	je	.Ltmp242 # Offset: 4615
    00001209: 	movsbl	0x43(%r13), %esi
.Ltmp246:
    0000120e: 	movq	%r14, %rdi
    00001211: 	callq	_ZNSo3putEc@PLT # Offset: 4625
    00001216: 	movq	%rax, %rdi
    00001219: 	callq	_ZNSo5flushEv@PLT # Offset: 4633
    0000121e: 	movl	iterations(%rip), %eax
    00001224: 	movdqa	DATAat0x36f20(%rip), %xmm2
    0000122c: 	jmp	.Ltmp243 # Offset: 4652
.Ltmp233:
    00001231: 	leaq	0x3(%r12,%rsi), %rdx
    00001236: 	movl	%r15d, %r15d
    00001239: 	leaq	(%rdx,%r15,2), %rcx
.Ltmp244:
    0000123d: 	cvttsd2si	init_value(%rip), %edx
    00001245: 	addq	$0x2, %rax
    00001249: 	addl	$0x1, %edx
    0000124c: 	movb	%dl, -0x2(%rax)
    0000124f: 	addl	%edx, %ebx
    00001251: 	cmpq	%rcx, %rax
    00001254: 	jne	.Ltmp244 # Offset: 4692
    00001256: 	jmp	.Ltmp229 # Offset: 4694
.Ltmp230:
    0000125b: 	movq	%rsi, %rax
.Ltmp245:
    0000125e: 	cvttsd2si	init_value(%rip), %ecx
    00001266: 	movb	%cl, (%r12,%rax)
    0000126a: 	addq	$0x2, %rax
    0000126e: 	addl	%ecx, %ebx
    00001270: 	cmpl	%eax, %ebp
    00001272: 	jg	.Ltmp245 # Offset: 4722
    00001274: 	cmpl	%ebp, %edx
    00001276: 	jl	.Ltmp232 # Offset: 4726
    0000127c: 	jmp	.Ltmp229 # Offset: 4732
    00001281: 	nopl	(%rax) # Size: 7
.Ltmp242:
    00001288: 	movq	%r13, %rdi
    0000128b: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 4747
    00001290: 	movq	(%r13), %rax
    00001294: 	movl	$0xa, %esi
    00001299: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000012a0: 	movq	0x30(%rax), %rax
    000012a4: 	cmpq	%rdx, %rax
    000012a7: 	je	.Ltmp246 # Offset: 4775
    000012ad: 	movq	%r13, %rdi
    000012b0: 	callq	*%rax # Offset: 4784
    000012b2: 	movsbl	%al, %esi
    000012b5: 	jmp	.Ltmp246 # Offset: 4789
.Ltmp221:
    000012ba: 	xorl	%edx, %edx
    000012bc: 	xorl	%ebx, %ebx
    000012be: 	cmpl	$0x1, 0x14(%rsp)
    000012c3: 	jg	.Ltmp247 # Offset: 4803
    000012c9: 	jmp	.Ltmp243 # Offset: 4809
.Ltmp240:
    000012ce: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000012d5: 	movq	-0x18(%rax), %rdi
    000012d9: 	addq	%r13, %rdi
    000012dc: 	movl	0x20(%rdi), %esi
    000012df: 	orl	$0x1, %esi
    000012e2: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4834
    000012e7: 	jmp	.Ltmp248 # Offset: 4839
.Ltmp237:
    000012ec: 	callq	__stack_chk_fail@PLT # Offset: 4844
.Ltmp241:
    000012f1: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 4849
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked2IhEvPT_iPKc"

Binary Function "_Z15test_loop_3_optIhEvPT_iPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x6910
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0x6910
  Section     : .text
  Orc Section : .local.text._Z15test_loop_3_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, (%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x18(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movq	%rax, start_time(%rip)
    00000038: 	movl	iterations(%rip), %eax
    0000003e: 	testl	%eax, %eax
    00000040: 	jle	.Ltmp249 # Offset: 64
    00000046: 	subl	$0x2, %r14d
    0000004a: 	xorl	%ebp, %ebp
    0000004c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp256:
    00000058: 	xorl	%edx, %edx
    0000005a: 	xorl	%r13d, %r13d
    0000005d: 	testl	%r14d, %r14d
    00000060: 	jle	.Ltmp250 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp251:
    00000068: 	cvttsd2si	init_value(%rip), %edi
    00000070: 	movb	%dil, (%r15,%rdx)
    00000074: 	cvttsd2si	init_value(%rip), %esi
    0000007c: 	addl	$0x1, %esi
    0000007f: 	movb	%sil, 0x1(%r15,%rdx)
    00000084: 	cvttsd2si	init_value(%rip), %eax
    0000008c: 	addl	$0x2, %eax
    0000008f: 	movb	%al, 0x2(%r15,%rdx)
    00000094: 	addl	%edi, %eax
    00000096: 	addq	$0x3, %rdx
    0000009a: 	addl	%esi, %eax
    0000009c: 	addl	%eax, %r13d
    0000009f: 	cmpl	%edx, %r14d
    000000a2: 	jg	.Ltmp251 # Offset: 162
.Ltmp250:
    000000a4: 	cvttsd2si	init_value(%rip), %ebx
    000000ac: 	notl	%ebx
    000000ae: 	addl	%ebx, %ebx
    000000b0: 	cmpb	%r13b, %bl
    000000b3: 	je	.Ltmp252 # Offset: 179
    000000b9: 	movl	$0x5, %edx
    000000be: 	leaq	DATAat0x35004(%rip), %rsi
    000000c5: 	movq	%r12, %rdi
    000000c8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 200
    000000cd: 	cmpq	$0x0, (%rsp)
    000000d2: 	je	.Ltmp253 # Offset: 210
    000000d8: 	movq	(%rsp), %rdi
    000000dc: 	callq	strlen@PLT # Offset: 220
    000000e1: 	movq	(%rsp), %rsi
    000000e5: 	movq	%r12, %rdi
    000000e8: 	movq	%rax, %rdx
    000000eb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 235
.Ltmp259:
    000000f0: 	movl	$0xd, %edx
    000000f5: 	leaq	DATAat0x3500a(%rip), %rsi
    000000fc: 	movq	%r12, %rdi
    000000ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 255
    00000104: 	leaq	0x17(%rsp), %r8
    00000109: 	movl	$0x1, %edx
    0000010e: 	movq	%r12, %rdi
    00000111: 	movq	%r8, %rsi
    00000114: 	movq	%r8, 0x8(%rsp)
    00000119: 	movb	%r13b, 0x17(%rsp)
    0000011e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 286
    00000123: 	movl	$0xb, %edx
    00000128: 	leaq	DATAat0x35018(%rip), %rsi
    0000012f: 	movq	%rax, %rdi
    00000132: 	movq	%rax, %r13
    00000135: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 309
    0000013a: 	movq	0x8(%rsp), %rsi
    0000013f: 	movq	%r13, %rdi
    00000142: 	movb	%bl, 0x17(%rsp)
    00000146: 	movl	$0x1, %edx
    0000014b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 331
    00000150: 	movq	%rax, %r13
    00000153: 	movq	(%rax), %rax
    00000156: 	movq	-0x18(%rax), %rax
    0000015a: 	movq	0xf0(%r13,%rax), %rbx
    00000162: 	testq	%rbx, %rbx
    00000165: 	je	.Ltmp254 # Offset: 357
    0000016b: 	cmpb	$0x0, 0x38(%rbx)
    0000016f: 	je	.Ltmp255 # Offset: 367
    00000171: 	movsbl	0x43(%rbx), %esi
.Ltmp258:
    00000175: 	movq	%r13, %rdi
    00000178: 	callq	_ZNSo3putEc@PLT # Offset: 376
    0000017d: 	movq	%rax, %rdi
    00000180: 	callq	_ZNSo5flushEv@PLT # Offset: 384
.Ltmp252:
    00000185: 	addl	$0x1, %ebp
    00000188: 	cmpl	%ebp, iterations(%rip)
    0000018e: 	jg	.Ltmp256 # Offset: 398
.Ltmp249:
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movq	%rax, end_time(%rip)
    000001a0: 	movq	0x18(%rsp), %rdx
    000001a5: 	subq	%fs:0x28, %rdx
    000001ae: 	jne	.Ltmp257 # Offset: 430
    000001b4: 	subq	start_time(%rip), %rax
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	movq	(%rsp), %rdi
    000001c3: 	cvtsi2sd	%rax, %xmm0
    000001c8: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001d0: 	addq	$0x28, %rsp
    000001d4: 	popq	%rbx
    000001d5: 	popq	%rbp
    000001d6: 	popq	%r12
    000001d8: 	popq	%r13
    000001da: 	popq	%r14
    000001dc: 	popq	%r15
    000001de: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 478
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp255:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 491
    000001f0: 	movq	(%rbx), %rax
    000001f3: 	movl	$0xa, %esi
    000001f8: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000001ff: 	movq	0x30(%rax), %rax
    00000203: 	cmpq	%rdx, %rax
    00000206: 	je	.Ltmp258 # Offset: 518
    0000020c: 	movq	%rbx, %rdi
    0000020f: 	callq	*%rax # Offset: 527
    00000211: 	movsbl	%al, %esi
    00000214: 	jmp	.Ltmp258 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp253:
    00000220: 	movq	(%r12), %rax
    00000224: 	movq	-0x18(%rax), %rdi
    00000228: 	addq	%r12, %rdi
    0000022b: 	movl	0x20(%rdi), %esi
    0000022e: 	orl	$0x1, %esi
    00000231: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 561
    00000236: 	jmp	.Ltmp259 # Offset: 566
.Ltmp257:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp254:
    00000240: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 576
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_loop_3_optIhEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked3IhEvPT_iPKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x6b60
  Size        : 0x1beb
  MaxSize     : 0x1bf0
  Offset      : 0x6b60
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x5e8, %rsp
    0000001a: 	movq	%rdx, 0x20(%rsp)
    0000001f: 	movl	%esi, 0x28(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x5d8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movl	iterations(%rip), %edx
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	testl	%edx, %edx
    0000004a: 	jle	.Ltmp260 # Offset: 74
    00000050: 	leal	-0x1001(%rbx), %edi
    00000056: 	movl	$0x0, 0x1c(%rsp)
    0000005e: 	leal	-0x2(%rbx), %r13d
    00000062: 	movdqa	DATAat0x36f20(%rip), %xmm1
    0000006a: 	movl	%edi, 0x18(%rsp)
    0000006e: 	movdqa	DATAat0x36f40(%rip), %xmm2
    00000076: 	movl	%r13d, %r15d
.Ltmp285:
    00000079: 	movl	0x18(%rsp), %eax
    0000007d: 	testl	%eax, %eax
    0000007f: 	jle	.Ltmp261 # Offset: 127
    00000085: 	movl	$0x3, %eax
    0000008a: 	movl	%r15d, 0x2c(%rsp)
    0000008f: 	movq	%r14, %r9
    00000092: 	xorl	%esi, %esi
    00000094: 	leaq	0x2(%r14), %r13
    00000098: 	leaq	0x1(%r14), %rbp
    0000009c: 	movl	$0xfff, %edi
    000000a1: 	xorl	%ebx, %ebx
    000000a3: 	movdqa	DATAat0x36f30(%rip), %xmm4
    000000ab: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000000b3: 	pxor	%xmm5, %xmm5
    000000b7: 	movq	%rax, %r15
.Ltmp271:
    000000ba: 	movl	%edi, 0xc(%rsp)
    000000be: 	movl	%esi, %r11d
    000000c1: 	cmpq	%rdi, %rsi
    000000c4: 	jae	.Ltmp262 # Offset: 196
    000000ca: 	cmpq	%r15, %rdi
    000000cd: 	leaq	init_value(%rip), %r10
    000000d4: 	sbbq	%rcx, %rcx
    000000d7: 	andq	$-0x554, %rcx
    000000de: 	addq	$0x555, %rcx
    000000e5: 	leaq	(%rcx,%rcx,2), %rax
    000000e9: 	leaq	-0x1(%rcx), %rdx
    000000ed: 	leaq	-0x2(%rsi,%rax), %r8
    000000f2: 	addq	%r14, %r8
    000000f5: 	cmpq	%r10, %r8
    000000f8: 	leaq	iterations(%rip), %r8
    000000ff: 	setbe	%r10b
    00000103: 	cmpq	%r8, %r9
    00000106: 	setae	%r8b
    0000010a: 	orb	%r10b, %r8b
    0000010d: 	je	.Ltmp263 # Offset: 269
    00000113: 	cmpq	$0xe, %rdx
    00000117: 	jbe	.Ltmp263 # Offset: 279
    0000011d: 	movsd	init_value(%rip), %xmm6
    00000125: 	movq	%rcx, %rax
    00000128: 	pxor	%xmm7, %xmm7
    0000012c: 	shrq	$0x4, %rax
    00000130: 	unpcklpd	%xmm6, %xmm6
    00000134: 	leaq	(%rax,%rax,2), %r10
    00000138: 	movq	%r9, %rax
    0000013b: 	cvttpd2dq	%xmm6, %xmm6
    0000013f: 	punpcklqdq	%xmm6, %xmm6
    00000143: 	shlq	$0x4, %r10
    00000147: 	movdqa	%xmm6, %xmm8
    0000014c: 	addq	%r9, %r10
    0000014f: 	punpckhwd	%xmm6, %xmm8
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp264:
    00000158: 	movdqa	%xmm6, %xmm0
    0000015c: 	addq	$0x30, %rax
    00000160: 	punpcklwd	%xmm6, %xmm0
    00000164: 	movdqa	%xmm0, %xmm9
    00000169: 	punpcklwd	%xmm8, %xmm0
    0000016e: 	punpckhwd	%xmm8, %xmm9
    00000173: 	punpcklwd	%xmm9, %xmm0
    00000178: 	pand	%xmm3, %xmm0
    0000017c: 	packuswb	%xmm0, %xmm0
    00000180: 	movd	%xmm0, %r8d
    00000185: 	paddb	%xmm0, %xmm7
    00000189: 	movb	%r8b, -0x30(%rax)
    0000018d: 	movaps	%xmm0, 0x5c0(%rsp)
    00000195: 	movzbl	0x5c1(%rsp), %r8d
    0000019e: 	movb	%r8b, -0x2d(%rax)
    000001a2: 	movaps	%xmm0, 0x5b0(%rsp)
    000001aa: 	movzbl	0x5b2(%rsp), %r8d
    000001b3: 	movb	%r8b, -0x2a(%rax)
    000001b7: 	movaps	%xmm0, 0x5a0(%rsp)
    000001bf: 	movzbl	0x5a3(%rsp), %r8d
    000001c8: 	movb	%r8b, -0x27(%rax)
    000001cc: 	movaps	%xmm0, 0x590(%rsp)
    000001d4: 	movzbl	0x594(%rsp), %r8d
    000001dd: 	movb	%r8b, -0x24(%rax)
    000001e1: 	movaps	%xmm0, 0x580(%rsp)
    000001e9: 	movzbl	0x585(%rsp), %r8d
    000001f2: 	movb	%r8b, -0x21(%rax)
    000001f6: 	movaps	%xmm0, 0x570(%rsp)
    000001fe: 	movzbl	0x576(%rsp), %r8d
    00000207: 	movb	%r8b, -0x1e(%rax)
    0000020b: 	movaps	%xmm0, 0x560(%rsp)
    00000213: 	movzbl	0x567(%rsp), %r8d
    0000021c: 	movb	%r8b, -0x1b(%rax)
    00000220: 	movaps	%xmm0, 0x550(%rsp)
    00000228: 	movzbl	0x558(%rsp), %r8d
    00000231: 	movb	%r8b, -0x18(%rax)
    00000235: 	movaps	%xmm0, 0x540(%rsp)
    0000023d: 	movzbl	0x549(%rsp), %r8d
    00000246: 	movb	%r8b, -0x15(%rax)
    0000024a: 	movaps	%xmm0, 0x530(%rsp)
    00000252: 	movzbl	0x53a(%rsp), %r8d
    0000025b: 	movb	%r8b, -0x12(%rax)
    0000025f: 	movaps	%xmm0, 0x520(%rsp)
    00000267: 	movzbl	0x52b(%rsp), %r8d
    00000270: 	movb	%r8b, -0xf(%rax)
    00000274: 	movaps	%xmm0, 0x510(%rsp)
    0000027c: 	movzbl	0x51c(%rsp), %r8d
    00000285: 	movb	%r8b, -0xc(%rax)
    00000289: 	movaps	%xmm0, 0x500(%rsp)
    00000291: 	movzbl	0x50d(%rsp), %r8d
    0000029a: 	movb	%r8b, -0x9(%rax)
    0000029e: 	movaps	%xmm0, 0x4f0(%rsp)
    000002a6: 	movzbl	0x4fe(%rsp), %r8d
    000002af: 	movb	%r8b, -0x6(%rax)
    000002b3: 	movaps	%xmm0, 0x4e0(%rsp)
    000002bb: 	movzbl	0x4ef(%rsp), %r8d
    000002c4: 	movb	%r8b, -0x3(%rax)
    000002c8: 	cmpq	%r10, %rax
    000002cb: 	jne	.Ltmp264 # Offset: 715
    000002d1: 	movdqa	%xmm7, %xmm0
    000002d5: 	movq	%rcx, %r8
    000002d8: 	psrldq	$0x8, %xmm0
    000002dd: 	andq	$-0x10, %r8
    000002e1: 	paddb	%xmm0, %xmm7
    000002e5: 	leaq	(%r8,%r8,2), %r10
    000002e9: 	psadbw	%xmm5, %xmm7
    000002ed: 	addq	%rsi, %r10
    000002f0: 	movd	%xmm7, %eax
    000002f4: 	addl	%eax, %ebx
    000002f6: 	leal	(%r8,%r8,2), %eax
    000002fa: 	addl	%r11d, %eax
    000002fd: 	cmpq	%r8, %rcx
    00000300: 	je	.Ltmp265 # Offset: 768
    00000306: 	cvttsd2si	init_value(%rip), %ecx
    0000030e: 	movb	%cl, (%r14,%r10)
    00000312: 	addl	%ecx, %ebx
    00000314: 	leal	0x3(%rax), %ecx
    00000317: 	movslq	%ecx, %rcx
    0000031a: 	subq	%r8, %rdx
    0000031d: 	je	.Ltmp265 # Offset: 797
    00000323: 	cvttsd2si	init_value(%rip), %r8d
    0000032c: 	movb	%r8b, (%r14,%rcx)
    00000330: 	leal	0x6(%rax), %ecx
    00000333: 	addl	%r8d, %ebx
    00000336: 	movslq	%ecx, %rcx
    00000339: 	cmpq	$0x1, %rdx
    0000033d: 	je	.Ltmp265 # Offset: 829
    00000343: 	cvttsd2si	init_value(%rip), %r8d
    0000034c: 	movb	%r8b, (%r14,%rcx)
    00000350: 	leal	0x9(%rax), %ecx
    00000353: 	addl	%r8d, %ebx
    00000356: 	movslq	%ecx, %rcx
    00000359: 	cmpq	$0x2, %rdx
    0000035d: 	je	.Ltmp265 # Offset: 861
    00000363: 	cvttsd2si	init_value(%rip), %r8d
    0000036c: 	movb	%r8b, (%r14,%rcx)
    00000370: 	leal	0xc(%rax), %ecx
    00000373: 	addl	%r8d, %ebx
    00000376: 	movslq	%ecx, %rcx
    00000379: 	cmpq	$0x3, %rdx
    0000037d: 	je	.Ltmp265 # Offset: 893
    00000383: 	cvttsd2si	init_value(%rip), %r8d
    0000038c: 	movb	%r8b, (%r14,%rcx)
    00000390: 	leal	0xf(%rax), %ecx
    00000393: 	addl	%r8d, %ebx
    00000396: 	movslq	%ecx, %rcx
    00000399: 	cmpq	$0x4, %rdx
    0000039d: 	je	.Ltmp265 # Offset: 925
    000003a3: 	cvttsd2si	init_value(%rip), %r8d
    000003ac: 	movb	%r8b, (%r14,%rcx)
    000003b0: 	leal	0x12(%rax), %ecx
    000003b3: 	addl	%r8d, %ebx
    000003b6: 	movslq	%ecx, %rcx
    000003b9: 	cmpq	$0x5, %rdx
    000003bd: 	je	.Ltmp265 # Offset: 957
    000003c3: 	cvttsd2si	init_value(%rip), %r8d
    000003cc: 	movb	%r8b, (%r14,%rcx)
    000003d0: 	leal	0x15(%rax), %ecx
    000003d3: 	addl	%r8d, %ebx
    000003d6: 	movslq	%ecx, %rcx
    000003d9: 	cmpq	$0x6, %rdx
    000003dd: 	je	.Ltmp265 # Offset: 989
    000003e3: 	cvttsd2si	init_value(%rip), %r8d
    000003ec: 	movb	%r8b, (%r14,%rcx)
    000003f0: 	leal	0x18(%rax), %ecx
    000003f3: 	addl	%r8d, %ebx
    000003f6: 	movslq	%ecx, %rcx
    000003f9: 	cmpq	$0x7, %rdx
    000003fd: 	je	.Ltmp265 # Offset: 1021
    00000403: 	cvttsd2si	init_value(%rip), %r8d
    0000040c: 	movb	%r8b, (%r14,%rcx)
    00000410: 	leal	0x1b(%rax), %ecx
    00000413: 	addl	%r8d, %ebx
    00000416: 	movslq	%ecx, %rcx
    00000419: 	cmpq	$0x8, %rdx
    0000041d: 	je	.Ltmp265 # Offset: 1053
    00000423: 	cvttsd2si	init_value(%rip), %r8d
    0000042c: 	movb	%r8b, (%r14,%rcx)
    00000430: 	leal	0x1e(%rax), %ecx
    00000433: 	addl	%r8d, %ebx
    00000436: 	movslq	%ecx, %rcx
    00000439: 	cmpq	$0x9, %rdx
    0000043d: 	je	.Ltmp265 # Offset: 1085
    0000043f: 	cvttsd2si	init_value(%rip), %r8d
    00000448: 	movb	%r8b, (%r14,%rcx)
    0000044c: 	leal	0x21(%rax), %ecx
    0000044f: 	addl	%r8d, %ebx
    00000452: 	movslq	%ecx, %rcx
    00000455: 	cmpq	$0xa, %rdx
    00000459: 	je	.Ltmp265 # Offset: 1113
    0000045b: 	cvttsd2si	init_value(%rip), %r8d
    00000464: 	movb	%r8b, (%r14,%rcx)
    00000468: 	leal	0x24(%rax), %ecx
    0000046b: 	addl	%r8d, %ebx
    0000046e: 	movslq	%ecx, %rcx
    00000471: 	cmpq	$0xb, %rdx
    00000475: 	je	.Ltmp265 # Offset: 1141
    00000477: 	cvttsd2si	init_value(%rip), %r8d
    00000480: 	movb	%r8b, (%r14,%rcx)
    00000484: 	leal	0x27(%rax), %ecx
    00000487: 	addl	%r8d, %ebx
    0000048a: 	movslq	%ecx, %rcx
    0000048d: 	cmpq	$0xc, %rdx
    00000491: 	je	.Ltmp265 # Offset: 1169
    00000493: 	cvttsd2si	init_value(%rip), %r8d
    0000049c: 	addl	$0x2a, %eax
    0000049f: 	cltq
    000004a1: 	movb	%r8b, (%r14,%rcx)
    000004a5: 	addl	%r8d, %ebx
    000004a8: 	cmpq	$0xd, %rdx
    000004ac: 	je	.Ltmp265 # Offset: 1196
    000004ae: 	cvttsd2si	init_value(%rip), %edx
    000004b6: 	movb	%dl, (%r14,%rax)
    000004ba: 	addl	%edx, %ebx
.Ltmp265:
    000004bc: 	cmpq	%r15, %rdi
    000004bf: 	leaq	init_value(%rip), %rcx
    000004c6: 	sbbq	%rdx, %rdx
    000004c9: 	andq	$-0x554, %rdx
    000004d0: 	addq	$0x555, %rdx
    000004d7: 	leaq	-0x1(%rdx), %rax
    000004db: 	leaq	(%rdx,%rdx,2), %r10
    000004df: 	cmpq	$0xe, %rax
    000004e3: 	movq	%rax, (%rsp)
    000004e7: 	leaq	-0x1(%rsi,%r10), %rax
    000004ec: 	seta	0xb(%rsp)
    000004f1: 	addq	%r14, %rax
    000004f4: 	movzbl	0xb(%rsp), %r8d
    000004fa: 	cmpq	%rcx, %rax
    000004fd: 	leaq	iterations(%rip), %rax
    00000504: 	setbe	%cl
    00000507: 	cmpq	%rax, %rbp
    0000050a: 	setae	%al
    0000050d: 	orb	%cl, %al
    0000050f: 	je	.Ltmp266 # Offset: 1295
    00000515: 	testb	%r8b, %r8b
    00000518: 	je	.Ltmp266 # Offset: 1304
    0000051e: 	movsd	init_value(%rip), %xmm6
    00000526: 	movq	%rdx, %rax
    00000529: 	pxor	%xmm7, %xmm7
    0000052d: 	shrq	$0x4, %rax
    00000531: 	unpcklpd	%xmm6, %xmm6
    00000535: 	leaq	(%rax,%rax,2), %r8
    00000539: 	movq	%rbp, %rax
    0000053c: 	cvttpd2dq	%xmm6, %xmm6
    00000540: 	punpcklqdq	%xmm6, %xmm6
    00000544: 	shlq	$0x4, %r8
    00000548: 	movdqa	%xmm6, %xmm8
    0000054d: 	addq	%rbp, %r8
    00000550: 	punpckhwd	%xmm6, %xmm8
    00000555: 	nopl	(%rax) # Size: 3
.Ltmp267:
    00000558: 	movdqa	%xmm6, %xmm0
    0000055c: 	addq	$0x30, %rax
    00000560: 	punpcklwd	%xmm6, %xmm0
    00000564: 	movdqa	%xmm0, %xmm9
    00000569: 	punpcklwd	%xmm8, %xmm0
    0000056e: 	punpckhwd	%xmm8, %xmm9
    00000573: 	punpcklwd	%xmm9, %xmm0
    00000578: 	pand	%xmm1, %xmm0
    0000057c: 	packuswb	%xmm0, %xmm0
    00000580: 	paddb	%xmm4, %xmm0
    00000584: 	movd	%xmm0, %ecx
    00000588: 	paddb	%xmm0, %xmm7
    0000058c: 	movb	%cl, -0x30(%rax)
    0000058f: 	movaps	%xmm0, 0x4d0(%rsp)
    00000597: 	movzbl	0x4d1(%rsp), %ecx
    0000059f: 	movb	%cl, -0x2d(%rax)
    000005a2: 	movaps	%xmm0, 0x4c0(%rsp)
    000005aa: 	movzbl	0x4c2(%rsp), %ecx
    000005b2: 	movb	%cl, -0x2a(%rax)
    000005b5: 	movaps	%xmm0, 0x4b0(%rsp)
    000005bd: 	movzbl	0x4b3(%rsp), %ecx
    000005c5: 	movb	%cl, -0x27(%rax)
    000005c8: 	movaps	%xmm0, 0x4a0(%rsp)
    000005d0: 	movzbl	0x4a4(%rsp), %ecx
    000005d8: 	movb	%cl, -0x24(%rax)
    000005db: 	movaps	%xmm0, 0x490(%rsp)
    000005e3: 	movzbl	0x495(%rsp), %ecx
    000005eb: 	movb	%cl, -0x21(%rax)
    000005ee: 	movaps	%xmm0, 0x480(%rsp)
    000005f6: 	movzbl	0x486(%rsp), %ecx
    000005fe: 	movb	%cl, -0x1e(%rax)
    00000601: 	movaps	%xmm0, 0x470(%rsp)
    00000609: 	movzbl	0x477(%rsp), %ecx
    00000611: 	movb	%cl, -0x1b(%rax)
    00000614: 	movaps	%xmm0, 0x460(%rsp)
    0000061c: 	movzbl	0x468(%rsp), %ecx
    00000624: 	movb	%cl, -0x18(%rax)
    00000627: 	movaps	%xmm0, 0x450(%rsp)
    0000062f: 	movzbl	0x459(%rsp), %ecx
    00000637: 	movb	%cl, -0x15(%rax)
    0000063a: 	movaps	%xmm0, 0x440(%rsp)
    00000642: 	movzbl	0x44a(%rsp), %ecx
    0000064a: 	movb	%cl, -0x12(%rax)
    0000064d: 	movaps	%xmm0, 0x430(%rsp)
    00000655: 	movzbl	0x43b(%rsp), %ecx
    0000065d: 	movb	%cl, -0xf(%rax)
    00000660: 	movaps	%xmm0, 0x420(%rsp)
    00000668: 	movzbl	0x42c(%rsp), %ecx
    00000670: 	movb	%cl, -0xc(%rax)
    00000673: 	movaps	%xmm0, 0x410(%rsp)
    0000067b: 	movzbl	0x41d(%rsp), %ecx
    00000683: 	movb	%cl, -0x9(%rax)
    00000686: 	movaps	%xmm0, 0x400(%rsp)
    0000068e: 	movzbl	0x40e(%rsp), %ecx
    00000696: 	movb	%cl, -0x6(%rax)
    00000699: 	movaps	%xmm0, 0x3f0(%rsp)
    000006a1: 	movzbl	0x3ff(%rsp), %ecx
    000006a9: 	movb	%cl, -0x3(%rax)
    000006ac: 	cmpq	%rax, %r8
    000006af: 	jne	.Ltmp267 # Offset: 1711
    000006b5: 	movdqa	%xmm7, %xmm0
    000006b9: 	movq	%rdx, %rcx
    000006bc: 	leaq	0x1(%rsi), %r12
    000006c0: 	psrldq	$0x8, %xmm0
    000006c5: 	andq	$-0x10, %rcx
    000006c9: 	paddb	%xmm0, %xmm7
    000006cd: 	movq	%rcx, %r8
    000006d0: 	psadbw	%xmm5, %xmm7
    000006d4: 	movq	%r8, 0x10(%rsp)
    000006d9: 	movd	%xmm7, %eax
    000006dd: 	addl	%eax, %ebx
    000006df: 	leaq	(%rcx,%rcx,2), %rax
    000006e3: 	movq	%rax, %rcx
    000006e6: 	leal	(%r8,%r8,2), %eax
    000006ea: 	addl	%r11d, %eax
    000006ed: 	cmpq	%r8, %rdx
    000006f0: 	je	.Ltmp268 # Offset: 1776
    000006f6: 	cvttsd2si	init_value(%rip), %r8d
    000006ff: 	addq	%r14, %r12
    00000702: 	addl	$0x1, %r8d
    00000706: 	movb	%r8b, (%r12,%rcx)
    0000070a: 	addl	%r8d, %ebx
    0000070d: 	movq	(%rsp), %r8
    00000711: 	subq	0x10(%rsp), %r8
    00000716: 	je	.Ltmp268 # Offset: 1814
    0000071c: 	cvttsd2si	init_value(%rip), %ecx
    00000724: 	leal	0x4(%rax), %r12d
    00000728: 	movslq	%r12d, %r12
    0000072b: 	addl	$0x1, %ecx
    0000072e: 	movb	%cl, (%r14,%r12)
    00000732: 	addl	%ecx, %ebx
    00000734: 	cmpq	$0x1, %r8
    00000738: 	je	.Ltmp268 # Offset: 1848
    0000073e: 	cvttsd2si	init_value(%rip), %ecx
    00000746: 	leal	0x7(%rax), %r12d
    0000074a: 	movslq	%r12d, %r12
    0000074d: 	addl	$0x1, %ecx
    00000750: 	movb	%cl, (%r14,%r12)
    00000754: 	addl	%ecx, %ebx
    00000756: 	cmpq	$0x2, %r8
    0000075a: 	je	.Ltmp268 # Offset: 1882
    00000760: 	cvttsd2si	init_value(%rip), %ecx
    00000768: 	leal	0xa(%rax), %r12d
    0000076c: 	movslq	%r12d, %r12
    0000076f: 	addl	$0x1, %ecx
    00000772: 	movb	%cl, (%r14,%r12)
    00000776: 	addl	%ecx, %ebx
    00000778: 	cmpq	$0x3, %r8
    0000077c: 	je	.Ltmp268 # Offset: 1916
    00000782: 	cvttsd2si	init_value(%rip), %ecx
    0000078a: 	leal	0xd(%rax), %r12d
    0000078e: 	movslq	%r12d, %r12
    00000791: 	addl	$0x1, %ecx
    00000794: 	movb	%cl, (%r14,%r12)
    00000798: 	addl	%ecx, %ebx
    0000079a: 	cmpq	$0x4, %r8
    0000079e: 	je	.Ltmp268 # Offset: 1950
    000007a4: 	cvttsd2si	init_value(%rip), %ecx
    000007ac: 	leal	0x10(%rax), %r12d
    000007b0: 	movslq	%r12d, %r12
    000007b3: 	addl	$0x1, %ecx
    000007b6: 	movb	%cl, (%r14,%r12)
    000007ba: 	addl	%ecx, %ebx
    000007bc: 	cmpq	$0x5, %r8
    000007c0: 	je	.Ltmp268 # Offset: 1984
    000007c6: 	cvttsd2si	init_value(%rip), %ecx
    000007ce: 	leal	0x13(%rax), %r12d
    000007d2: 	movslq	%r12d, %r12
    000007d5: 	addl	$0x1, %ecx
    000007d8: 	movb	%cl, (%r14,%r12)
    000007dc: 	addl	%ecx, %ebx
    000007de: 	cmpq	$0x6, %r8
    000007e2: 	je	.Ltmp268 # Offset: 2018
    000007e8: 	cvttsd2si	init_value(%rip), %ecx
    000007f0: 	leal	0x16(%rax), %r12d
    000007f4: 	movslq	%r12d, %r12
    000007f7: 	addl	$0x1, %ecx
    000007fa: 	movb	%cl, (%r14,%r12)
    000007fe: 	addl	%ecx, %ebx
    00000800: 	cmpq	$0x7, %r8
    00000804: 	je	.Ltmp268 # Offset: 2052
    0000080a: 	cvttsd2si	init_value(%rip), %ecx
    00000812: 	leal	0x19(%rax), %r12d
    00000816: 	movslq	%r12d, %r12
    00000819: 	addl	$0x1, %ecx
    0000081c: 	movb	%cl, (%r14,%r12)
    00000820: 	addl	%ecx, %ebx
    00000822: 	cmpq	$0x8, %r8
    00000826: 	je	.Ltmp268 # Offset: 2086
    0000082c: 	cvttsd2si	init_value(%rip), %ecx
    00000834: 	leal	0x1c(%rax), %r12d
    00000838: 	movslq	%r12d, %r12
    0000083b: 	addl	$0x1, %ecx
    0000083e: 	movb	%cl, (%r14,%r12)
    00000842: 	addl	%ecx, %ebx
    00000844: 	cmpq	$0x9, %r8
    00000848: 	je	.Ltmp268 # Offset: 2120
    0000084e: 	cvttsd2si	init_value(%rip), %ecx
    00000856: 	leal	0x1f(%rax), %r12d
    0000085a: 	movslq	%r12d, %r12
    0000085d: 	addl	$0x1, %ecx
    00000860: 	movb	%cl, (%r14,%r12)
    00000864: 	addl	%ecx, %ebx
    00000866: 	cmpq	$0xa, %r8
    0000086a: 	je	.Ltmp268 # Offset: 2154
    0000086c: 	cvttsd2si	init_value(%rip), %ecx
    00000874: 	leal	0x22(%rax), %r12d
    00000878: 	movslq	%r12d, %r12
    0000087b: 	addl	$0x1, %ecx
    0000087e: 	movb	%cl, (%r14,%r12)
    00000882: 	addl	%ecx, %ebx
    00000884: 	cmpq	$0xb, %r8
    00000888: 	je	.Ltmp268 # Offset: 2184
    0000088a: 	cvttsd2si	init_value(%rip), %ecx
    00000892: 	leal	0x25(%rax), %r12d
    00000896: 	movslq	%r12d, %r12
    00000899: 	addl	$0x1, %ecx
    0000089c: 	movb	%cl, (%r14,%r12)
    000008a0: 	addl	%ecx, %ebx
    000008a2: 	cmpq	$0xc, %r8
    000008a6: 	je	.Ltmp268 # Offset: 2214
    000008a8: 	cvttsd2si	init_value(%rip), %ecx
    000008b0: 	leal	0x28(%rax), %r12d
    000008b4: 	movslq	%r12d, %r12
    000008b7: 	addl	$0x1, %ecx
    000008ba: 	movb	%cl, (%r14,%r12)
    000008be: 	addl	%ecx, %ebx
    000008c0: 	cmpq	$0xd, %r8
    000008c4: 	je	.Ltmp268 # Offset: 2244
    000008c6: 	cvttsd2si	init_value(%rip), %ecx
    000008ce: 	addl	$0x2b, %eax
    000008d1: 	cltq
    000008d3: 	addl	$0x1, %ecx
    000008d6: 	movb	%cl, (%r14,%rax)
    000008da: 	addl	%ecx, %ebx
.Ltmp268:
    000008dc: 	leaq	(%r10,%rsi), %rax
    000008e0: 	leaq	init_value(%rip), %rcx
    000008e7: 	addq	%r14, %rax
    000008ea: 	cmpq	%rcx, %rax
    000008ed: 	leaq	iterations(%rip), %rax
    000008f4: 	setbe	%cl
    000008f7: 	cmpq	%rax, %r13
    000008fa: 	setae	%al
    000008fd: 	orb	%cl, %al
    000008ff: 	je	.Ltmp269 # Offset: 2303
    00000905: 	cmpb	$0x0, 0xb(%rsp)
    0000090a: 	je	.Ltmp269 # Offset: 2314
    00000910: 	movsd	init_value(%rip), %xmm6
    00000918: 	movq	%rdx, %rax
    0000091b: 	pxor	%xmm7, %xmm7
    0000091f: 	shrq	$0x4, %rax
    00000923: 	unpcklpd	%xmm6, %xmm6
    00000927: 	leaq	(%rax,%rax,2), %r8
    0000092b: 	movq	%r13, %rax
    0000092e: 	cvttpd2dq	%xmm6, %xmm6
    00000932: 	punpcklqdq	%xmm6, %xmm6
    00000936: 	shlq	$0x4, %r8
    0000093a: 	movdqa	%xmm6, %xmm8
    0000093f: 	addq	%r13, %r8
    00000942: 	punpckhwd	%xmm6, %xmm8
    00000947: 	nopw	(%rax,%rax) # Size: 9
.Ltmp270:
    00000950: 	movdqa	%xmm6, %xmm0
    00000954: 	addq	$0x30, %rax
    00000958: 	punpcklwd	%xmm6, %xmm0
    0000095c: 	movdqa	%xmm0, %xmm9
    00000961: 	punpcklwd	%xmm8, %xmm0
    00000966: 	punpckhwd	%xmm8, %xmm9
    0000096b: 	punpcklwd	%xmm9, %xmm0
    00000970: 	pand	%xmm1, %xmm0
    00000974: 	packuswb	%xmm0, %xmm0
    00000978: 	paddb	%xmm2, %xmm0
    0000097c: 	movd	%xmm0, %ecx
    00000980: 	paddb	%xmm0, %xmm7
    00000984: 	movb	%cl, -0x30(%rax)
    00000987: 	movaps	%xmm0, 0x3e0(%rsp)
    0000098f: 	movzbl	0x3e1(%rsp), %ecx
    00000997: 	movb	%cl, -0x2d(%rax)
    0000099a: 	movaps	%xmm0, 0x3d0(%rsp)
    000009a2: 	movzbl	0x3d2(%rsp), %ecx
    000009aa: 	movb	%cl, -0x2a(%rax)
    000009ad: 	movaps	%xmm0, 0x3c0(%rsp)
    000009b5: 	movzbl	0x3c3(%rsp), %ecx
    000009bd: 	movb	%cl, -0x27(%rax)
    000009c0: 	movaps	%xmm0, 0x3b0(%rsp)
    000009c8: 	movzbl	0x3b4(%rsp), %ecx
    000009d0: 	movb	%cl, -0x24(%rax)
    000009d3: 	movaps	%xmm0, 0x3a0(%rsp)
    000009db: 	movzbl	0x3a5(%rsp), %ecx
    000009e3: 	movb	%cl, -0x21(%rax)
    000009e6: 	movaps	%xmm0, 0x390(%rsp)
    000009ee: 	movzbl	0x396(%rsp), %ecx
    000009f6: 	movb	%cl, -0x1e(%rax)
    000009f9: 	movaps	%xmm0, 0x380(%rsp)
    00000a01: 	movzbl	0x387(%rsp), %ecx
    00000a09: 	movb	%cl, -0x1b(%rax)
    00000a0c: 	movaps	%xmm0, 0x370(%rsp)
    00000a14: 	movzbl	0x378(%rsp), %ecx
    00000a1c: 	movb	%cl, -0x18(%rax)
    00000a1f: 	movaps	%xmm0, 0x360(%rsp)
    00000a27: 	movzbl	0x369(%rsp), %ecx
    00000a2f: 	movb	%cl, -0x15(%rax)
    00000a32: 	movaps	%xmm0, 0x350(%rsp)
    00000a3a: 	movzbl	0x35a(%rsp), %ecx
    00000a42: 	movb	%cl, -0x12(%rax)
    00000a45: 	movaps	%xmm0, 0x340(%rsp)
    00000a4d: 	movzbl	0x34b(%rsp), %ecx
    00000a55: 	movb	%cl, -0xf(%rax)
    00000a58: 	movaps	%xmm0, 0x330(%rsp)
    00000a60: 	movzbl	0x33c(%rsp), %ecx
    00000a68: 	movb	%cl, -0xc(%rax)
    00000a6b: 	movaps	%xmm0, 0x320(%rsp)
    00000a73: 	movzbl	0x32d(%rsp), %ecx
    00000a7b: 	movb	%cl, -0x9(%rax)
    00000a7e: 	movaps	%xmm0, 0x310(%rsp)
    00000a86: 	movzbl	0x31e(%rsp), %ecx
    00000a8e: 	movb	%cl, -0x6(%rax)
    00000a91: 	movaps	%xmm0, 0x300(%rsp)
    00000a99: 	movzbl	0x30f(%rsp), %ecx
    00000aa1: 	movb	%cl, -0x3(%rax)
    00000aa4: 	cmpq	%r8, %rax
    00000aa7: 	jne	.Ltmp270 # Offset: 2727
    00000aad: 	movdqa	%xmm7, %xmm0
    00000ab1: 	movq	%rdx, %rcx
    00000ab4: 	leaq	0x2(%rsi), %r8
    00000ab8: 	psrldq	$0x8, %xmm0
    00000abd: 	andq	$-0x10, %rcx
    00000ac1: 	paddb	%xmm0, %xmm7
    00000ac5: 	leaq	(%rcx,%rcx,2), %r10
    00000ac9: 	psadbw	%xmm5, %xmm7
    00000acd: 	movd	%xmm7, %eax
    00000ad1: 	addl	%eax, %ebx
    00000ad3: 	leal	(%rcx,%rcx,2), %eax
    00000ad6: 	addl	%r11d, %eax
    00000ad9: 	cmpq	%rcx, %rdx
    00000adc: 	je	.Ltmp262 # Offset: 2780
    00000ae2: 	cvttsd2si	init_value(%rip), %edx
    00000aea: 	addq	%r14, %r8
    00000aed: 	addl	$0x2, %edx
    00000af0: 	movb	%dl, (%r8,%r10)
    00000af4: 	addl	%edx, %ebx
    00000af6: 	movq	(%rsp), %rdx
    00000afa: 	subq	%rcx, %rdx
    00000afd: 	je	.Ltmp262 # Offset: 2813
    00000b03: 	cvttsd2si	init_value(%rip), %ecx
    00000b0b: 	leal	0x5(%rax), %r8d
    00000b0f: 	movslq	%r8d, %r8
    00000b12: 	addl	$0x2, %ecx
    00000b15: 	movb	%cl, (%r14,%r8)
    00000b19: 	addl	%ecx, %ebx
    00000b1b: 	cmpq	$0x1, %rdx
    00000b1f: 	je	.Ltmp262 # Offset: 2847
    00000b25: 	cvttsd2si	init_value(%rip), %ecx
    00000b2d: 	leal	0x8(%rax), %r8d
    00000b31: 	movslq	%r8d, %r8
    00000b34: 	addl	$0x2, %ecx
    00000b37: 	movb	%cl, (%r14,%r8)
    00000b3b: 	addl	%ecx, %ebx
    00000b3d: 	cmpq	$0x2, %rdx
    00000b41: 	je	.Ltmp262 # Offset: 2881
    00000b47: 	cvttsd2si	init_value(%rip), %ecx
    00000b4f: 	leal	0xb(%rax), %r8d
    00000b53: 	movslq	%r8d, %r8
    00000b56: 	addl	$0x2, %ecx
    00000b59: 	movb	%cl, (%r14,%r8)
    00000b5d: 	addl	%ecx, %ebx
    00000b5f: 	cmpq	$0x3, %rdx
    00000b63: 	je	.Ltmp262 # Offset: 2915
    00000b69: 	cvttsd2si	init_value(%rip), %ecx
    00000b71: 	leal	0xe(%rax), %r8d
    00000b75: 	movslq	%r8d, %r8
    00000b78: 	addl	$0x2, %ecx
    00000b7b: 	movb	%cl, (%r14,%r8)
    00000b7f: 	addl	%ecx, %ebx
    00000b81: 	cmpq	$0x4, %rdx
    00000b85: 	je	.Ltmp262 # Offset: 2949
    00000b8b: 	cvttsd2si	init_value(%rip), %ecx
    00000b93: 	leal	0x11(%rax), %r8d
    00000b97: 	movslq	%r8d, %r8
    00000b9a: 	addl	$0x2, %ecx
    00000b9d: 	movb	%cl, (%r14,%r8)
    00000ba1: 	addl	%ecx, %ebx
    00000ba3: 	cmpq	$0x5, %rdx
    00000ba7: 	je	.Ltmp262 # Offset: 2983
    00000bad: 	cvttsd2si	init_value(%rip), %ecx
    00000bb5: 	leal	0x14(%rax), %r8d
    00000bb9: 	movslq	%r8d, %r8
    00000bbc: 	addl	$0x2, %ecx
    00000bbf: 	movb	%cl, (%r14,%r8)
    00000bc3: 	addl	%ecx, %ebx
    00000bc5: 	cmpq	$0x6, %rdx
    00000bc9: 	je	.Ltmp262 # Offset: 3017
    00000bcf: 	cvttsd2si	init_value(%rip), %ecx
    00000bd7: 	leal	0x17(%rax), %r8d
    00000bdb: 	movslq	%r8d, %r8
    00000bde: 	addl	$0x2, %ecx
    00000be1: 	movb	%cl, (%r14,%r8)
    00000be5: 	addl	%ecx, %ebx
    00000be7: 	cmpq	$0x7, %rdx
    00000beb: 	je	.Ltmp262 # Offset: 3051
    00000bf1: 	cvttsd2si	init_value(%rip), %ecx
    00000bf9: 	leal	0x1a(%rax), %r8d
    00000bfd: 	movslq	%r8d, %r8
    00000c00: 	addl	$0x2, %ecx
    00000c03: 	movb	%cl, (%r14,%r8)
    00000c07: 	addl	%ecx, %ebx
    00000c09: 	cmpq	$0x8, %rdx
    00000c0d: 	je	.Ltmp262 # Offset: 3085
    00000c13: 	cvttsd2si	init_value(%rip), %ecx
    00000c1b: 	leal	0x1d(%rax), %r8d
    00000c1f: 	movslq	%r8d, %r8
    00000c22: 	addl	$0x2, %ecx
    00000c25: 	movb	%cl, (%r14,%r8)
    00000c29: 	addl	%ecx, %ebx
    00000c2b: 	cmpq	$0x9, %rdx
    00000c2f: 	je	.Ltmp262 # Offset: 3119
    00000c35: 	cvttsd2si	init_value(%rip), %ecx
    00000c3d: 	leal	0x20(%rax), %r8d
    00000c41: 	movslq	%r8d, %r8
    00000c44: 	addl	$0x2, %ecx
    00000c47: 	movb	%cl, (%r14,%r8)
    00000c4b: 	addl	%ecx, %ebx
    00000c4d: 	cmpq	$0xa, %rdx
    00000c51: 	je	.Ltmp262 # Offset: 3153
    00000c53: 	cvttsd2si	init_value(%rip), %ecx
    00000c5b: 	leal	0x23(%rax), %r8d
    00000c5f: 	movslq	%r8d, %r8
    00000c62: 	addl	$0x2, %ecx
    00000c65: 	movb	%cl, (%r14,%r8)
    00000c69: 	addl	%ecx, %ebx
    00000c6b: 	cmpq	$0xb, %rdx
    00000c6f: 	je	.Ltmp262 # Offset: 3183
    00000c71: 	cvttsd2si	init_value(%rip), %ecx
    00000c79: 	leal	0x26(%rax), %r8d
    00000c7d: 	movslq	%r8d, %r8
    00000c80: 	addl	$0x2, %ecx
    00000c83: 	movb	%cl, (%r14,%r8)
    00000c87: 	addl	%ecx, %ebx
    00000c89: 	cmpq	$0xc, %rdx
    00000c8d: 	je	.Ltmp262 # Offset: 3213
    00000c8f: 	cvttsd2si	init_value(%rip), %ecx
    00000c97: 	leal	0x29(%rax), %r8d
    00000c9b: 	movslq	%r8d, %r8
    00000c9e: 	addl	$0x2, %ecx
    00000ca1: 	movb	%cl, (%r14,%r8)
    00000ca5: 	addl	%ecx, %ebx
    00000ca7: 	cmpq	$0xd, %rdx
    00000cab: 	je	.Ltmp262 # Offset: 3243
    00000cad: 	cvttsd2si	init_value(%rip), %edx
    00000cb5: 	addl	$0x2c, %eax
    00000cb8: 	cltq
    00000cba: 	addl	$0x2, %edx
    00000cbd: 	movb	%dl, (%r14,%rax)
    00000cc1: 	addl	%edx, %ebx
.Ltmp262:
    00000cc3: 	addq	$0xfff, %rsi
    00000cca: 	addq	$0xfff, %rdi
    00000cd1: 	addq	$0xfff, %r9
    00000cd8: 	addq	$0xfff, %r15
    00000cdf: 	addq	$0xfff, %r13
    00000ce6: 	addq	$0xfff, %rbp
    00000ced: 	cmpl	%esi, 0x18(%rsp)
    00000cf1: 	jg	.Ltmp271 # Offset: 3313
    00000cf7: 	movl	0x2c(%rsp), %r15d
.Ltmp294:
    00000cfc: 	movl	0xc(%rsp), %eax
    00000d00: 	cmpl	%eax, %r15d
    00000d03: 	jle	.Ltmp272 # Offset: 3331
    00000d09: 	movl	0x28(%rsp), %edi
    00000d0d: 	movl	$0xaaaaaaab, %esi
    00000d12: 	movslq	%eax, %rcx
    00000d15: 	leaq	init_value(%rip), %r9
    00000d1c: 	leal	-0x3(%rdi), %edx
    00000d1f: 	subl	%eax, %edx
    00000d21: 	leaq	(%r14,%rcx), %rax
    00000d25: 	cmpl	$0x2c, %edx
    00000d28: 	seta	%dil
    00000d2c: 	imulq	%rsi, %rdx
    00000d30: 	shrq	$0x21, %rdx
    00000d34: 	leal	0x1(%rdx), %esi
    00000d37: 	movq	%rsi, %rdx
    00000d3a: 	leaq	(%rsi,%rsi,2), %rsi
    00000d3e: 	addq	%rcx, %rsi
    00000d41: 	leaq	-0x2(%r14,%rsi), %r8
    00000d46: 	cmpq	%r9, %r8
    00000d49: 	leaq	0x8(%r9), %r8
    00000d4d: 	setbe	%r11b
    00000d51: 	cmpq	%r8, %rax
    00000d54: 	setae	%r10b
    00000d58: 	orb	%r11b, %r10b
    00000d5b: 	je	.Ltmp273 # Offset: 3419
    00000d61: 	testb	%dil, %dil
    00000d64: 	je	.Ltmp273 # Offset: 3428
    00000d6a: 	movsd	init_value(%rip), %xmm5
    00000d72: 	movl	%edx, %r10d
    00000d75: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000d7d: 	pxor	%xmm3, %xmm3
    00000d81: 	shrl	$0x4, %r10d
    00000d85: 	unpcklpd	%xmm5, %xmm5
    00000d89: 	subl	$0x1, %r10d
    00000d8d: 	leaq	(%r10,%r10,2), %r10
    00000d91: 	cvttpd2dq	%xmm5, %xmm5
    00000d95: 	punpcklqdq	%xmm5, %xmm5
    00000d99: 	shlq	$0x4, %r10
    00000d9d: 	movdqa	%xmm5, %xmm6
    00000da1: 	leaq	0x30(%rax,%r10), %r11
    00000da6: 	punpckhwd	%xmm5, %xmm6
.Ltmp274:
    00000daa: 	movdqa	%xmm5, %xmm0
    00000dae: 	addq	$0x30, %rax
    00000db2: 	punpcklwd	%xmm5, %xmm0
    00000db6: 	movdqa	%xmm0, %xmm7
    00000dba: 	punpcklwd	%xmm6, %xmm0
    00000dbe: 	punpckhwd	%xmm6, %xmm7
    00000dc2: 	punpcklwd	%xmm7, %xmm0
    00000dc6: 	pand	%xmm4, %xmm0
    00000dca: 	packuswb	%xmm0, %xmm0
    00000dce: 	movd	%xmm0, %r10d
    00000dd3: 	paddb	%xmm0, %xmm3
    00000dd7: 	movb	%r10b, -0x30(%rax)
    00000ddb: 	movaps	%xmm0, 0x2f0(%rsp)
    00000de3: 	movzbl	0x2f1(%rsp), %r10d
    00000dec: 	movb	%r10b, -0x2d(%rax)
    00000df0: 	movaps	%xmm0, 0x2e0(%rsp)
    00000df8: 	movzbl	0x2e2(%rsp), %r10d
    00000e01: 	movb	%r10b, -0x2a(%rax)
    00000e05: 	movaps	%xmm0, 0x2d0(%rsp)
    00000e0d: 	movzbl	0x2d3(%rsp), %r10d
    00000e16: 	movb	%r10b, -0x27(%rax)
    00000e1a: 	movaps	%xmm0, 0x2c0(%rsp)
    00000e22: 	movzbl	0x2c4(%rsp), %r10d
    00000e2b: 	movb	%r10b, -0x24(%rax)
    00000e2f: 	movaps	%xmm0, 0x2b0(%rsp)
    00000e37: 	movzbl	0x2b5(%rsp), %r10d
    00000e40: 	movb	%r10b, -0x21(%rax)
    00000e44: 	movaps	%xmm0, 0x2a0(%rsp)
    00000e4c: 	movzbl	0x2a6(%rsp), %r10d
    00000e55: 	movb	%r10b, -0x1e(%rax)
    00000e59: 	movaps	%xmm0, 0x290(%rsp)
    00000e61: 	movzbl	0x297(%rsp), %r10d
    00000e6a: 	movb	%r10b, -0x1b(%rax)
    00000e6e: 	movaps	%xmm0, 0x280(%rsp)
    00000e76: 	movzbl	0x288(%rsp), %r10d
    00000e7f: 	movb	%r10b, -0x18(%rax)
    00000e83: 	movaps	%xmm0, 0x270(%rsp)
    00000e8b: 	movzbl	0x279(%rsp), %r10d
    00000e94: 	movb	%r10b, -0x15(%rax)
    00000e98: 	movaps	%xmm0, 0x260(%rsp)
    00000ea0: 	movzbl	0x26a(%rsp), %r10d
    00000ea9: 	movb	%r10b, -0x12(%rax)
    00000ead: 	movaps	%xmm0, 0x250(%rsp)
    00000eb5: 	movzbl	0x25b(%rsp), %r10d
    00000ebe: 	movb	%r10b, -0xf(%rax)
    00000ec2: 	movaps	%xmm0, 0x240(%rsp)
    00000eca: 	movzbl	0x24c(%rsp), %r10d
    00000ed3: 	movb	%r10b, -0xc(%rax)
    00000ed7: 	movaps	%xmm0, 0x230(%rsp)
    00000edf: 	movzbl	0x23d(%rsp), %r10d
    00000ee8: 	movb	%r10b, -0x9(%rax)
    00000eec: 	movaps	%xmm0, 0x220(%rsp)
    00000ef4: 	movzbl	0x22e(%rsp), %r10d
    00000efd: 	movb	%r10b, -0x6(%rax)
    00000f01: 	movaps	%xmm0, 0x210(%rsp)
    00000f09: 	movzbl	0x21f(%rsp), %r10d
    00000f12: 	movb	%r10b, -0x3(%rax)
    00000f16: 	cmpq	%rax, %r11
    00000f19: 	jne	.Ltmp274 # Offset: 3865
    00000f1f: 	movdqa	%xmm3, %xmm0
    00000f23: 	movl	%edx, %r10d
    00000f26: 	psrldq	$0x8, %xmm0
    00000f2b: 	andl	$-0x10, %r10d
    00000f2f: 	paddb	%xmm3, %xmm0
    00000f33: 	pxor	%xmm3, %xmm3
    00000f37: 	psadbw	%xmm3, %xmm0
    00000f3b: 	movd	%xmm0, %eax
    00000f3f: 	addl	%eax, %ebx
    00000f41: 	leal	(%r10,%r10,2), %eax
    00000f45: 	addl	0xc(%rsp), %eax
    00000f49: 	cmpl	%r10d, %edx
    00000f4c: 	je	.Ltmp275 # Offset: 3916
    00000f52: 	cvttsd2si	init_value(%rip), %r10d
    00000f5b: 	movslq	%eax, %r11
    00000f5e: 	movb	%r10b, (%r14,%r11)
    00000f62: 	addl	%r10d, %ebx
    00000f65: 	leal	0x3(%rax), %r10d
    00000f69: 	cmpl	%r10d, %r15d
    00000f6c: 	jle	.Ltmp275 # Offset: 3948
    00000f72: 	cvttsd2si	init_value(%rip), %r11d
    00000f7b: 	movslq	%r10d, %r10
    00000f7e: 	movb	%r11b, (%r14,%r10)
    00000f82: 	leal	0x6(%rax), %r10d
    00000f86: 	addl	%r11d, %ebx
    00000f89: 	cmpl	%r10d, %r15d
    00000f8c: 	jle	.Ltmp275 # Offset: 3980
    00000f92: 	cvttsd2si	init_value(%rip), %r11d
    00000f9b: 	movslq	%r10d, %r10
    00000f9e: 	movb	%r11b, (%r14,%r10)
    00000fa2: 	leal	0x9(%rax), %r10d
    00000fa6: 	addl	%r11d, %ebx
    00000fa9: 	cmpl	%r10d, %r15d
    00000fac: 	jle	.Ltmp275 # Offset: 4012
    00000fb2: 	cvttsd2si	init_value(%rip), %r11d
    00000fbb: 	movslq	%r10d, %r10
    00000fbe: 	movb	%r11b, (%r14,%r10)
    00000fc2: 	leal	0xc(%rax), %r10d
    00000fc6: 	addl	%r11d, %ebx
    00000fc9: 	cmpl	%r10d, %r15d
    00000fcc: 	jle	.Ltmp275 # Offset: 4044
    00000fd2: 	cvttsd2si	init_value(%rip), %r11d
    00000fdb: 	movslq	%r10d, %r10
    00000fde: 	movb	%r11b, (%r14,%r10)
    00000fe2: 	leal	0xf(%rax), %r10d
    00000fe6: 	addl	%r11d, %ebx
    00000fe9: 	cmpl	%r10d, %r15d
    00000fec: 	jle	.Ltmp275 # Offset: 4076
    00000ff2: 	cvttsd2si	init_value(%rip), %r11d
    00000ffb: 	movslq	%r10d, %r10
    00000ffe: 	movb	%r11b, (%r14,%r10)
    00001002: 	leal	0x12(%rax), %r10d
    00001006: 	addl	%r11d, %ebx
    00001009: 	cmpl	%r10d, %r15d
    0000100c: 	jle	.Ltmp275 # Offset: 4108
    00001012: 	cvttsd2si	init_value(%rip), %r11d
    0000101b: 	movslq	%r10d, %r10
    0000101e: 	movb	%r11b, (%r14,%r10)
    00001022: 	leal	0x15(%rax), %r10d
    00001026: 	addl	%r11d, %ebx
    00001029: 	cmpl	%r10d, %r15d
    0000102c: 	jle	.Ltmp275 # Offset: 4140
    00001032: 	cvttsd2si	init_value(%rip), %r11d
    0000103b: 	movslq	%r10d, %r10
    0000103e: 	movb	%r11b, (%r14,%r10)
    00001042: 	leal	0x18(%rax), %r10d
    00001046: 	addl	%r11d, %ebx
    00001049: 	cmpl	%r10d, %r15d
    0000104c: 	jle	.Ltmp275 # Offset: 4172
    00001052: 	cvttsd2si	init_value(%rip), %r11d
    0000105b: 	movslq	%r10d, %r10
    0000105e: 	movb	%r11b, (%r14,%r10)
    00001062: 	leal	0x1b(%rax), %r10d
    00001066: 	addl	%r11d, %ebx
    00001069: 	cmpl	%r10d, %r15d
    0000106c: 	jle	.Ltmp275 # Offset: 4204
    00001072: 	cvttsd2si	init_value(%rip), %r11d
    0000107b: 	movslq	%r10d, %r10
    0000107e: 	movb	%r11b, (%r14,%r10)
    00001082: 	leal	0x1e(%rax), %r10d
    00001086: 	addl	%r11d, %ebx
    00001089: 	cmpl	%r10d, %r15d
    0000108c: 	jle	.Ltmp275 # Offset: 4236
    00001092: 	cvttsd2si	init_value(%rip), %r11d
    0000109b: 	movslq	%r10d, %r10
    0000109e: 	movb	%r11b, (%r14,%r10)
    000010a2: 	leal	0x21(%rax), %r10d
    000010a6: 	addl	%r11d, %ebx
    000010a9: 	cmpl	%r10d, %r15d
    000010ac: 	jle	.Ltmp275 # Offset: 4268
    000010ae: 	cvttsd2si	init_value(%rip), %r11d
    000010b7: 	movslq	%r10d, %r10
    000010ba: 	movb	%r11b, (%r14,%r10)
    000010be: 	leal	0x24(%rax), %r10d
    000010c2: 	addl	%r11d, %ebx
    000010c5: 	cmpl	%r10d, %r15d
    000010c8: 	jle	.Ltmp275 # Offset: 4296
    000010ca: 	cvttsd2si	init_value(%rip), %r11d
    000010d3: 	movslq	%r10d, %r10
    000010d6: 	movb	%r11b, (%r14,%r10)
    000010da: 	leal	0x27(%rax), %r10d
    000010de: 	addl	%r11d, %ebx
    000010e1: 	cmpl	%r10d, %r15d
    000010e4: 	jle	.Ltmp275 # Offset: 4324
    000010e6: 	cvttsd2si	init_value(%rip), %r11d
    000010ef: 	movslq	%r10d, %r10
    000010f2: 	addl	$0x2a, %eax
    000010f5: 	movb	%r11b, (%r14,%r10)
    000010f9: 	addl	%r11d, %ebx
    000010fc: 	cmpl	%eax, %r15d
    000010ff: 	jle	.Ltmp275 # Offset: 4351
    00001101: 	cvttsd2si	init_value(%rip), %r10d
    0000110a: 	cltq
    0000110c: 	movb	%r10b, (%r14,%rax)
    00001110: 	addl	%r10d, %ebx
.Ltmp275:
    00001113: 	leaq	-0x1(%r14,%rsi), %r10
    00001118: 	leaq	0x1(%r14,%rcx), %rax
    0000111d: 	cmpq	%r9, %r10
    00001120: 	setbe	%r11b
    00001124: 	cmpq	%r8, %rax
    00001127: 	setae	%r10b
    0000112b: 	orb	%r11b, %r10b
    0000112e: 	je	.Ltmp276 # Offset: 4398
    00001134: 	testb	%dil, %dil
    00001137: 	je	.Ltmp276 # Offset: 4407
    0000113d: 	movsd	init_value(%rip), %xmm5
    00001145: 	movl	%edx, %r10d
    00001148: 	pxor	%xmm3, %xmm3
    0000114c: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00001154: 	movdqa	DATAat0x36f30(%rip), %xmm8
    0000115d: 	shrl	$0x4, %r10d
    00001161: 	unpcklpd	%xmm5, %xmm5
    00001165: 	subl	$0x1, %r10d
    00001169: 	leaq	(%r10,%r10,2), %r10
    0000116d: 	cvttpd2dq	%xmm5, %xmm5
    00001171: 	punpcklqdq	%xmm5, %xmm5
    00001175: 	shlq	$0x4, %r10
    00001179: 	movdqa	%xmm5, %xmm6
    0000117d: 	leaq	0x30(%rax,%r10), %r11
    00001182: 	punpckhwd	%xmm5, %xmm6
.Ltmp277:
    00001186: 	movdqa	%xmm5, %xmm0
    0000118a: 	addq	$0x30, %rax
    0000118e: 	punpcklwd	%xmm5, %xmm0
    00001192: 	movdqa	%xmm0, %xmm7
    00001196: 	punpcklwd	%xmm6, %xmm0
    0000119a: 	punpckhwd	%xmm6, %xmm7
    0000119e: 	punpcklwd	%xmm7, %xmm0
    000011a2: 	pand	%xmm4, %xmm0
    000011a6: 	packuswb	%xmm0, %xmm0
    000011aa: 	paddb	%xmm8, %xmm0
    000011af: 	movd	%xmm0, %r10d
    000011b4: 	paddb	%xmm0, %xmm3
    000011b8: 	movb	%r10b, -0x30(%rax)
    000011bc: 	movaps	%xmm0, 0x200(%rsp)
    000011c4: 	movzbl	0x201(%rsp), %r10d
    000011cd: 	movb	%r10b, -0x2d(%rax)
    000011d1: 	movaps	%xmm0, 0x1f0(%rsp)
    000011d9: 	movzbl	0x1f2(%rsp), %r10d
    000011e2: 	movb	%r10b, -0x2a(%rax)
    000011e6: 	movaps	%xmm0, 0x1e0(%rsp)
    000011ee: 	movzbl	0x1e3(%rsp), %r10d
    000011f7: 	movb	%r10b, -0x27(%rax)
    000011fb: 	movaps	%xmm0, 0x1d0(%rsp)
    00001203: 	movzbl	0x1d4(%rsp), %r10d
    0000120c: 	movb	%r10b, -0x24(%rax)
    00001210: 	movaps	%xmm0, 0x1c0(%rsp)
    00001218: 	movzbl	0x1c5(%rsp), %r10d
    00001221: 	movb	%r10b, -0x21(%rax)
    00001225: 	movaps	%xmm0, 0x1b0(%rsp)
    0000122d: 	movzbl	0x1b6(%rsp), %r10d
    00001236: 	movb	%r10b, -0x1e(%rax)
    0000123a: 	movaps	%xmm0, 0x1a0(%rsp)
    00001242: 	movzbl	0x1a7(%rsp), %r10d
    0000124b: 	movb	%r10b, -0x1b(%rax)
    0000124f: 	movaps	%xmm0, 0x190(%rsp)
    00001257: 	movzbl	0x198(%rsp), %r10d
    00001260: 	movb	%r10b, -0x18(%rax)
    00001264: 	movaps	%xmm0, 0x180(%rsp)
    0000126c: 	movzbl	0x189(%rsp), %r10d
    00001275: 	movb	%r10b, -0x15(%rax)
    00001279: 	movaps	%xmm0, 0x170(%rsp)
    00001281: 	movzbl	0x17a(%rsp), %r10d
    0000128a: 	movb	%r10b, -0x12(%rax)
    0000128e: 	movaps	%xmm0, 0x160(%rsp)
    00001296: 	movzbl	0x16b(%rsp), %r10d
    0000129f: 	movb	%r10b, -0xf(%rax)
    000012a3: 	movaps	%xmm0, 0x150(%rsp)
    000012ab: 	movzbl	0x15c(%rsp), %r10d
    000012b4: 	movb	%r10b, -0xc(%rax)
    000012b8: 	movaps	%xmm0, 0x140(%rsp)
    000012c0: 	movzbl	0x14d(%rsp), %r10d
    000012c9: 	movb	%r10b, -0x9(%rax)
    000012cd: 	movaps	%xmm0, 0x130(%rsp)
    000012d5: 	movzbl	0x13e(%rsp), %r10d
    000012de: 	movb	%r10b, -0x6(%rax)
    000012e2: 	movaps	%xmm0, 0x120(%rsp)
    000012ea: 	movzbl	0x12f(%rsp), %r10d
    000012f3: 	movb	%r10b, -0x3(%rax)
    000012f7: 	cmpq	%r11, %rax
    000012fa: 	jne	.Ltmp277 # Offset: 4858
    00001300: 	movdqa	%xmm3, %xmm0
    00001304: 	movl	%edx, %r10d
    00001307: 	psrldq	$0x8, %xmm0
    0000130c: 	andl	$-0x10, %r10d
    00001310: 	paddb	%xmm3, %xmm0
    00001314: 	pxor	%xmm3, %xmm3
    00001318: 	psadbw	%xmm3, %xmm0
    0000131c: 	movd	%xmm0, %eax
    00001320: 	addl	%eax, %ebx
    00001322: 	leal	(%r10,%r10,2), %eax
    00001326: 	addl	0xc(%rsp), %eax
    0000132a: 	cmpl	%edx, %r10d
    0000132d: 	je	.Ltmp278 # Offset: 4909
    00001333: 	cvttsd2si	init_value(%rip), %r10d
    0000133c: 	leal	0x1(%rax), %r11d
    00001340: 	movslq	%r11d, %r11
    00001343: 	addl	$0x1, %r10d
    00001347: 	movb	%r10b, (%r14,%r11)
    0000134b: 	addl	%r10d, %ebx
    0000134e: 	leal	0x3(%rax), %r10d
    00001352: 	cmpl	%r10d, %r15d
    00001355: 	jle	.Ltmp278 # Offset: 4949
    0000135b: 	cvttsd2si	init_value(%rip), %r10d
    00001364: 	leal	0x4(%rax), %r11d
    00001368: 	movslq	%r11d, %r11
    0000136b: 	addl	$0x1, %r10d
    0000136f: 	movb	%r10b, (%r14,%r11)
    00001373: 	addl	%r10d, %ebx
    00001376: 	leal	0x6(%rax), %r10d
    0000137a: 	cmpl	%r10d, %r15d
    0000137d: 	jle	.Ltmp278 # Offset: 4989
    00001383: 	cvttsd2si	init_value(%rip), %r10d
    0000138c: 	leal	0x7(%rax), %r11d
    00001390: 	movslq	%r11d, %r11
    00001393: 	addl	$0x1, %r10d
    00001397: 	movb	%r10b, (%r14,%r11)
    0000139b: 	addl	%r10d, %ebx
    0000139e: 	leal	0x9(%rax), %r10d
    000013a2: 	cmpl	%r10d, %r15d
    000013a5: 	jle	.Ltmp278 # Offset: 5029
    000013ab: 	cvttsd2si	init_value(%rip), %r10d
    000013b4: 	leal	0xa(%rax), %r11d
    000013b8: 	movslq	%r11d, %r11
    000013bb: 	addl	$0x1, %r10d
    000013bf: 	movb	%r10b, (%r14,%r11)
    000013c3: 	addl	%r10d, %ebx
    000013c6: 	leal	0xc(%rax), %r10d
    000013ca: 	cmpl	%r10d, %r15d
    000013cd: 	jle	.Ltmp278 # Offset: 5069
    000013d3: 	cvttsd2si	init_value(%rip), %r10d
    000013dc: 	leal	0xd(%rax), %r11d
    000013e0: 	movslq	%r11d, %r11
    000013e3: 	addl	$0x1, %r10d
    000013e7: 	movb	%r10b, (%r14,%r11)
    000013eb: 	addl	%r10d, %ebx
    000013ee: 	leal	0xf(%rax), %r10d
    000013f2: 	cmpl	%r10d, %r15d
    000013f5: 	jle	.Ltmp278 # Offset: 5109
    000013fb: 	cvttsd2si	init_value(%rip), %r10d
    00001404: 	leal	0x10(%rax), %r11d
    00001408: 	movslq	%r11d, %r11
    0000140b: 	addl	$0x1, %r10d
    0000140f: 	movb	%r10b, (%r14,%r11)
    00001413: 	addl	%r10d, %ebx
    00001416: 	leal	0x12(%rax), %r10d
    0000141a: 	cmpl	%r10d, %r15d
    0000141d: 	jle	.Ltmp278 # Offset: 5149
    00001423: 	cvttsd2si	init_value(%rip), %r10d
    0000142c: 	leal	0x13(%rax), %r11d
    00001430: 	movslq	%r11d, %r11
    00001433: 	addl	$0x1, %r10d
    00001437: 	movb	%r10b, (%r14,%r11)
    0000143b: 	addl	%r10d, %ebx
    0000143e: 	leal	0x15(%rax), %r10d
    00001442: 	cmpl	%r10d, %r15d
    00001445: 	jle	.Ltmp278 # Offset: 5189
    0000144b: 	cvttsd2si	init_value(%rip), %r10d
    00001454: 	leal	0x16(%rax), %r11d
    00001458: 	movslq	%r11d, %r11
    0000145b: 	addl	$0x1, %r10d
    0000145f: 	movb	%r10b, (%r14,%r11)
    00001463: 	addl	%r10d, %ebx
    00001466: 	leal	0x18(%rax), %r10d
    0000146a: 	cmpl	%r10d, %r15d
    0000146d: 	jle	.Ltmp278 # Offset: 5229
    00001473: 	cvttsd2si	init_value(%rip), %r10d
    0000147c: 	leal	0x19(%rax), %r11d
    00001480: 	movslq	%r11d, %r11
    00001483: 	addl	$0x1, %r10d
    00001487: 	movb	%r10b, (%r14,%r11)
    0000148b: 	addl	%r10d, %ebx
    0000148e: 	leal	0x1b(%rax), %r10d
    00001492: 	cmpl	%r10d, %r15d
    00001495: 	jle	.Ltmp278 # Offset: 5269
    0000149b: 	cvttsd2si	init_value(%rip), %r10d
    000014a4: 	leal	0x1c(%rax), %r11d
    000014a8: 	movslq	%r11d, %r11
    000014ab: 	addl	$0x1, %r10d
    000014af: 	movb	%r10b, (%r14,%r11)
    000014b3: 	addl	%r10d, %ebx
    000014b6: 	leal	0x1e(%rax), %r10d
    000014ba: 	cmpl	%r10d, %r15d
    000014bd: 	jle	.Ltmp278 # Offset: 5309
    000014c3: 	cvttsd2si	init_value(%rip), %r10d
    000014cc: 	leal	0x1f(%rax), %r11d
    000014d0: 	movslq	%r11d, %r11
    000014d3: 	addl	$0x1, %r10d
    000014d7: 	movb	%r10b, (%r14,%r11)
    000014db: 	addl	%r10d, %ebx
    000014de: 	leal	0x21(%rax), %r10d
    000014e2: 	cmpl	%r10d, %r15d
    000014e5: 	jle	.Ltmp278 # Offset: 5349
    000014eb: 	cvttsd2si	init_value(%rip), %r10d
    000014f4: 	leal	0x22(%rax), %r11d
    000014f8: 	movslq	%r11d, %r11
    000014fb: 	addl	$0x1, %r10d
    000014ff: 	movb	%r10b, (%r14,%r11)
    00001503: 	addl	%r10d, %ebx
    00001506: 	leal	0x24(%rax), %r10d
    0000150a: 	cmpl	%r10d, %r15d
    0000150d: 	jle	.Ltmp278 # Offset: 5389
    0000150f: 	cvttsd2si	init_value(%rip), %r10d
    00001518: 	leal	0x25(%rax), %r11d
    0000151c: 	movslq	%r11d, %r11
    0000151f: 	addl	$0x1, %r10d
    00001523: 	movb	%r10b, (%r14,%r11)
    00001527: 	addl	%r10d, %ebx
    0000152a: 	leal	0x27(%rax), %r10d
    0000152e: 	cmpl	%r10d, %r15d
    00001531: 	jle	.Ltmp278 # Offset: 5425
    00001533: 	cvttsd2si	init_value(%rip), %r10d
    0000153c: 	leal	0x28(%rax), %r11d
    00001540: 	movslq	%r11d, %r11
    00001543: 	addl	$0x1, %r10d
    00001547: 	movb	%r10b, (%r14,%r11)
    0000154b: 	addl	%r10d, %ebx
    0000154e: 	leal	0x2a(%rax), %r10d
    00001552: 	cmpl	%r10d, %r15d
    00001555: 	jle	.Ltmp278 # Offset: 5461
    00001557: 	cvttsd2si	init_value(%rip), %r10d
    00001560: 	addl	$0x2b, %eax
    00001563: 	cltq
    00001565: 	addl	$0x1, %r10d
    00001569: 	movb	%r10b, (%r14,%rax)
    0000156d: 	addl	%r10d, %ebx
.Ltmp278:
    00001570: 	addq	%r14, %rsi
    00001573: 	leaq	0x2(%r14,%rcx), %rax
    00001578: 	cmpq	%r9, %rsi
    0000157b: 	setbe	%sil
    0000157f: 	cmpq	%r8, %rax
    00001582: 	setae	%r8b
    00001586: 	orb	%r8b, %sil
    00001589: 	je	.Ltmp279 # Offset: 5513
    0000158f: 	testb	%dil, %dil
    00001592: 	je	.Ltmp279 # Offset: 5522
    00001598: 	movsd	init_value(%rip), %xmm5
    000015a0: 	movl	%edx, %ecx
    000015a2: 	pxor	%xmm3, %xmm3
    000015a6: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000015ae: 	movdqa	DATAat0x36f40(%rip), %xmm8
    000015b7: 	shrl	$0x4, %ecx
    000015ba: 	unpcklpd	%xmm5, %xmm5
    000015be: 	subl	$0x1, %ecx
    000015c1: 	leaq	(%rcx,%rcx,2), %rcx
    000015c5: 	cvttpd2dq	%xmm5, %xmm5
    000015c9: 	punpcklqdq	%xmm5, %xmm5
    000015cd: 	shlq	$0x4, %rcx
    000015d1: 	movdqa	%xmm5, %xmm6
    000015d5: 	leaq	0x30(%rax,%rcx), %rsi
    000015da: 	punpckhwd	%xmm5, %xmm6
.Ltmp280:
    000015de: 	movdqa	%xmm5, %xmm0
    000015e2: 	addq	$0x30, %rax
    000015e6: 	punpcklwd	%xmm5, %xmm0
    000015ea: 	movdqa	%xmm0, %xmm7
    000015ee: 	punpcklwd	%xmm6, %xmm0
    000015f2: 	punpckhwd	%xmm6, %xmm7
    000015f6: 	punpcklwd	%xmm7, %xmm0
    000015fa: 	pand	%xmm4, %xmm0
    000015fe: 	packuswb	%xmm0, %xmm0
    00001602: 	paddb	%xmm8, %xmm0
    00001607: 	movd	%xmm0, %ecx
    0000160b: 	paddb	%xmm0, %xmm3
    0000160f: 	movb	%cl, -0x30(%rax)
    00001612: 	movaps	%xmm0, 0x110(%rsp)
    0000161a: 	movzbl	0x111(%rsp), %ecx
    00001622: 	movb	%cl, -0x2d(%rax)
    00001625: 	movaps	%xmm0, 0x100(%rsp)
    0000162d: 	movzbl	0x102(%rsp), %ecx
    00001635: 	movb	%cl, -0x2a(%rax)
    00001638: 	movaps	%xmm0, 0xf0(%rsp)
    00001640: 	movzbl	0xf3(%rsp), %ecx
    00001648: 	movb	%cl, -0x27(%rax)
    0000164b: 	movaps	%xmm0, 0xe0(%rsp)
    00001653: 	movzbl	0xe4(%rsp), %ecx
    0000165b: 	movb	%cl, -0x24(%rax)
    0000165e: 	movaps	%xmm0, 0xd0(%rsp)
    00001666: 	movzbl	0xd5(%rsp), %ecx
    0000166e: 	movb	%cl, -0x21(%rax)
    00001671: 	movaps	%xmm0, 0xc0(%rsp)
    00001679: 	movzbl	0xc6(%rsp), %ecx
    00001681: 	movb	%cl, -0x1e(%rax)
    00001684: 	movaps	%xmm0, 0xb0(%rsp)
    0000168c: 	movzbl	0xb7(%rsp), %ecx
    00001694: 	movb	%cl, -0x1b(%rax)
    00001697: 	movaps	%xmm0, 0xa0(%rsp)
    0000169f: 	movzbl	0xa8(%rsp), %ecx
    000016a7: 	movb	%cl, -0x18(%rax)
    000016aa: 	movaps	%xmm0, 0x90(%rsp)
    000016b2: 	movzbl	0x99(%rsp), %ecx
    000016ba: 	movb	%cl, -0x15(%rax)
    000016bd: 	movaps	%xmm0, 0x80(%rsp)
    000016c5: 	movzbl	0x8a(%rsp), %ecx
    000016cd: 	movb	%cl, -0x12(%rax)
    000016d0: 	movaps	%xmm0, 0x70(%rsp)
    000016d5: 	movzbl	0x7b(%rsp), %ecx
    000016da: 	movb	%cl, -0xf(%rax)
    000016dd: 	movaps	%xmm0, 0x60(%rsp)
    000016e2: 	movzbl	0x6c(%rsp), %ecx
    000016e7: 	movb	%cl, -0xc(%rax)
    000016ea: 	movaps	%xmm0, 0x50(%rsp)
    000016ef: 	movzbl	0x5d(%rsp), %ecx
    000016f4: 	movb	%cl, -0x9(%rax)
    000016f7: 	movaps	%xmm0, 0x40(%rsp)
    000016fc: 	movzbl	0x4e(%rsp), %ecx
    00001701: 	movb	%cl, -0x6(%rax)
    00001704: 	movaps	%xmm0, 0x30(%rsp)
    00001709: 	movzbl	0x3f(%rsp), %ecx
    0000170e: 	movb	%cl, -0x3(%rax)
    00001711: 	cmpq	%rsi, %rax
    00001714: 	jne	.Ltmp280 # Offset: 5908
    0000171a: 	movdqa	%xmm3, %xmm0
    0000171e: 	movl	%edx, %ecx
    00001720: 	psrldq	$0x8, %xmm0
    00001725: 	andl	$-0x10, %ecx
    00001728: 	paddb	%xmm3, %xmm0
    0000172c: 	pxor	%xmm3, %xmm3
    00001730: 	psadbw	%xmm3, %xmm0
    00001734: 	movd	%xmm0, %eax
    00001738: 	addl	%eax, %ebx
    0000173a: 	leal	(%rcx,%rcx,2), %eax
    0000173d: 	addl	0xc(%rsp), %eax
    00001741: 	cmpl	%edx, %ecx
    00001743: 	je	.Ltmp272 # Offset: 5955
    00001749: 	cvttsd2si	init_value(%rip), %edx
    00001751: 	leal	0x2(%rax), %ecx
    00001754: 	movslq	%ecx, %rcx
    00001757: 	addl	$0x2, %edx
    0000175a: 	movb	%dl, (%r14,%rcx)
    0000175e: 	addl	%edx, %ebx
    00001760: 	leal	0x3(%rax), %edx
    00001763: 	cmpl	%edx, %r15d
    00001766: 	jle	.Ltmp272 # Offset: 5990
    0000176c: 	cvttsd2si	init_value(%rip), %edx
    00001774: 	leal	0x5(%rax), %ecx
    00001777: 	movslq	%ecx, %rcx
    0000177a: 	addl	$0x2, %edx
    0000177d: 	movb	%dl, (%r14,%rcx)
    00001781: 	addl	%edx, %ebx
    00001783: 	leal	0x6(%rax), %edx
    00001786: 	cmpl	%edx, %r15d
    00001789: 	jle	.Ltmp272 # Offset: 6025
    0000178f: 	cvttsd2si	init_value(%rip), %edx
    00001797: 	leal	0x8(%rax), %ecx
    0000179a: 	movslq	%ecx, %rcx
    0000179d: 	addl	$0x2, %edx
    000017a0: 	movb	%dl, (%r14,%rcx)
    000017a4: 	addl	%edx, %ebx
    000017a6: 	leal	0x9(%rax), %edx
    000017a9: 	cmpl	%edx, %r15d
    000017ac: 	jle	.Ltmp272 # Offset: 6060
    000017b2: 	cvttsd2si	init_value(%rip), %edx
    000017ba: 	leal	0xb(%rax), %ecx
    000017bd: 	movslq	%ecx, %rcx
    000017c0: 	addl	$0x2, %edx
    000017c3: 	movb	%dl, (%r14,%rcx)
    000017c7: 	addl	%edx, %ebx
    000017c9: 	leal	0xc(%rax), %edx
    000017cc: 	cmpl	%r15d, %edx
    000017cf: 	jge	.Ltmp272 # Offset: 6095
    000017d5: 	cvttsd2si	init_value(%rip), %edx
    000017dd: 	leal	0xe(%rax), %ecx
    000017e0: 	movslq	%ecx, %rcx
    000017e3: 	addl	$0x2, %edx
    000017e6: 	movb	%dl, (%r14,%rcx)
    000017ea: 	addl	%edx, %ebx
    000017ec: 	leal	0xf(%rax), %edx
    000017ef: 	cmpl	%r15d, %edx
    000017f2: 	jge	.Ltmp272 # Offset: 6130
    000017f8: 	cvttsd2si	init_value(%rip), %edx
    00001800: 	leal	0x11(%rax), %ecx
    00001803: 	movslq	%ecx, %rcx
    00001806: 	addl	$0x2, %edx
    00001809: 	movb	%dl, (%r14,%rcx)
    0000180d: 	addl	%edx, %ebx
    0000180f: 	leal	0x12(%rax), %edx
    00001812: 	cmpl	%r15d, %edx
    00001815: 	jge	.Ltmp272 # Offset: 6165
    0000181b: 	cvttsd2si	init_value(%rip), %edx
    00001823: 	leal	0x14(%rax), %ecx
    00001826: 	movslq	%ecx, %rcx
    00001829: 	addl	$0x2, %edx
    0000182c: 	movb	%dl, (%r14,%rcx)
    00001830: 	addl	%edx, %ebx
    00001832: 	leal	0x15(%rax), %edx
    00001835: 	cmpl	%edx, %r15d
    00001838: 	jle	.Ltmp272 # Offset: 6200
    0000183e: 	cvttsd2si	init_value(%rip), %edx
    00001846: 	leal	0x17(%rax), %ecx
    00001849: 	movslq	%ecx, %rcx
    0000184c: 	addl	$0x2, %edx
    0000184f: 	movb	%dl, (%r14,%rcx)
    00001853: 	addl	%edx, %ebx
    00001855: 	leal	0x18(%rax), %edx
    00001858: 	cmpl	%r15d, %edx
    0000185b: 	jge	.Ltmp272 # Offset: 6235
    00001861: 	cvttsd2si	init_value(%rip), %edx
    00001869: 	leal	0x1a(%rax), %ecx
    0000186c: 	movslq	%ecx, %rcx
    0000186f: 	addl	$0x2, %edx
    00001872: 	movb	%dl, (%r14,%rcx)
    00001876: 	addl	%edx, %ebx
    00001878: 	leal	0x1b(%rax), %edx
    0000187b: 	cmpl	%edx, %r15d
    0000187e: 	jle	.Ltmp272 # Offset: 6270
    00001884: 	cvttsd2si	init_value(%rip), %edx
    0000188c: 	leal	0x1d(%rax), %ecx
    0000188f: 	movslq	%ecx, %rcx
    00001892: 	addl	$0x2, %edx
    00001895: 	movb	%dl, (%r14,%rcx)
    00001899: 	addl	%edx, %ebx
    0000189b: 	leal	0x1e(%rax), %edx
    0000189e: 	cmpl	%edx, %r15d
    000018a1: 	jle	.Ltmp272 # Offset: 6305
    000018a7: 	cvttsd2si	init_value(%rip), %edx
    000018af: 	leal	0x20(%rax), %ecx
    000018b2: 	movslq	%ecx, %rcx
    000018b5: 	addl	$0x2, %edx
    000018b8: 	movb	%dl, (%r14,%rcx)
    000018bc: 	addl	%edx, %ebx
    000018be: 	leal	0x21(%rax), %edx
    000018c1: 	cmpl	%edx, %r15d
    000018c4: 	jle	.Ltmp272 # Offset: 6340
    000018c6: 	cvttsd2si	init_value(%rip), %edx
    000018ce: 	leal	0x23(%rax), %ecx
    000018d1: 	movslq	%ecx, %rcx
    000018d4: 	addl	$0x2, %edx
    000018d7: 	movb	%dl, (%r14,%rcx)
    000018db: 	addl	%edx, %ebx
    000018dd: 	leal	0x24(%rax), %edx
    000018e0: 	cmpl	%edx, %r15d
    000018e3: 	jle	.Ltmp272 # Offset: 6371
    000018e5: 	cvttsd2si	init_value(%rip), %edx
    000018ed: 	leal	0x26(%rax), %ecx
    000018f0: 	movslq	%ecx, %rcx
    000018f3: 	addl	$0x2, %edx
    000018f6: 	movb	%dl, (%r14,%rcx)
    000018fa: 	addl	%edx, %ebx
    000018fc: 	leal	0x27(%rax), %edx
    000018ff: 	cmpl	%edx, %r15d
    00001902: 	jle	.Ltmp272 # Offset: 6402
    00001904: 	cvttsd2si	init_value(%rip), %edx
    0000190c: 	leal	0x29(%rax), %ecx
    0000190f: 	movslq	%ecx, %rcx
    00001912: 	addl	$0x2, %edx
    00001915: 	movb	%dl, (%r14,%rcx)
    00001919: 	addl	%edx, %ebx
    0000191b: 	leal	0x2a(%rax), %edx
    0000191e: 	cmpl	%edx, %r15d
    00001921: 	jle	.Ltmp272 # Offset: 6433
    00001923: 	cvttsd2si	init_value(%rip), %edx
    0000192b: 	addl	$0x2c, %eax
    0000192e: 	cltq
    00001930: 	addl	$0x2, %edx
    00001933: 	movb	%dl, (%r14,%rax)
    00001937: 	addl	%edx, %ebx
.Ltmp272:
    00001939: 	cvttsd2si	init_value(%rip), %ebp
    00001941: 	notl	%ebp
    00001943: 	addl	%ebp, %ebp
    00001945: 	cmpb	%bl, %bpl
    00001948: 	je	.Ltmp281 # Offset: 6472
    0000194e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00001955: 	movl	$0x5, %edx
    0000195a: 	leaq	DATAat0x35004(%rip), %rsi
    00001961: 	movq	%r12, %rdi
    00001964: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6500
    00001969: 	cmpq	$0x0, 0x20(%rsp)
    0000196f: 	je	.Ltmp282 # Offset: 6511
    00001975: 	movq	0x20(%rsp), %r13
    0000197a: 	movq	%r13, %rdi
    0000197d: 	callq	strlen@PLT # Offset: 6525
    00001982: 	movq	%r13, %rsi
    00001985: 	movq	%r12, %rdi
    00001988: 	movq	%rax, %rdx
    0000198b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6539
.Ltmp291:
    00001990: 	movq	%r12, %rdi
    00001993: 	movl	$0xd, %edx
    00001998: 	leaq	DATAat0x3500a(%rip), %rsi
    0000199f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6559
    000019a4: 	leaq	0x5d7(%rsp), %r13
    000019ac: 	movq	%r12, %rdi
    000019af: 	movl	$0x1, %edx
    000019b4: 	movq	%r13, %rsi
    000019b7: 	movb	%bl, 0x5d7(%rsp)
    000019be: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6590
    000019c3: 	movl	$0xb, %edx
    000019c8: 	leaq	DATAat0x35018(%rip), %rsi
    000019cf: 	movq	%rax, %r12
    000019d2: 	movq	%rax, %rdi
    000019d5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6613
    000019da: 	movq	%r12, %rdi
    000019dd: 	movl	$0x1, %edx
    000019e2: 	movq	%r13, %rsi
    000019e5: 	movb	%bpl, 0x5d7(%rsp)
    000019ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6637
    000019f2: 	movq	%rax, %r12
    000019f5: 	movq	(%rax), %rax
    000019f8: 	movq	-0x18(%rax), %rax
    000019fc: 	movq	0xf0(%r12,%rax), %rbp
    00001a04: 	testq	%rbp, %rbp
    00001a07: 	je	.Ltmp283 # Offset: 6663
    00001a0d: 	cmpb	$0x0, 0x38(%rbp)
    00001a11: 	je	.Ltmp284 # Offset: 6673
    00001a17: 	movsbl	0x43(%rbp), %esi
.Ltmp290:
    00001a1b: 	movq	%r12, %rdi
    00001a1e: 	callq	_ZNSo3putEc@PLT # Offset: 6686
    00001a23: 	movq	%rax, %rdi
    00001a26: 	callq	_ZNSo5flushEv@PLT # Offset: 6694
    00001a2b: 	movdqa	DATAat0x36f40(%rip), %xmm2
    00001a33: 	movdqa	DATAat0x36f20(%rip), %xmm1
.Ltmp281:
    00001a3b: 	addl	$0x1, 0x1c(%rsp)
    00001a40: 	movl	0x1c(%rsp), %eax
    00001a44: 	cmpl	%eax, iterations(%rip)
    00001a4a: 	jg	.Ltmp285 # Offset: 6730
.Ltmp260:
    00001a50: 	callq	clock@PLT # Offset: 6736
    00001a55: 	movq	%rax, end_time(%rip)
    00001a5c: 	movq	0x5d8(%rsp), %rdx
    00001a64: 	subq	%fs:0x28, %rdx
    00001a6d: 	jne	.Ltmp286 # Offset: 6765
    00001a73: 	subq	start_time(%rip), %rax
    00001a7a: 	pxor	%xmm0, %xmm0
    00001a7e: 	movq	0x20(%rsp), %rdi
    00001a83: 	cvtsi2sd	%rax, %xmm0
    00001a88: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00001a90: 	addq	$0x5e8, %rsp
    00001a97: 	popq	%rbx
    00001a98: 	popq	%rbp
    00001a99: 	popq	%r12
    00001a9b: 	popq	%r13
    00001a9d: 	popq	%r14
    00001a9f: 	popq	%r15
    00001aa1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 6817
.Ltmp279:
    00001aa6: 	cvttsd2si	init_value(%rip), %eax
    00001aae: 	addl	$0x2, %eax
    00001ab1: 	movb	%al, 0x2(%r14,%rcx)
    00001ab6: 	addq	$0x3, %rcx
    00001aba: 	addl	%eax, %ebx
    00001abc: 	cmpl	%ecx, %r15d
    00001abf: 	jg	.Ltmp279 # Offset: 6847
    00001ac1: 	jmp	.Ltmp272 # Offset: 6849
.Ltmp263:
    00001ac6: 	addq	%r9, %rax
    00001ac9: 	movq	%r9, %rdx
    00001acc: 	nopl	(%rax) # Size: 4
.Ltmp287:
    00001ad0: 	cvttsd2si	init_value(%rip), %ecx
    00001ad8: 	addq	$0x3, %rdx
    00001adc: 	movb	%cl, -0x3(%rdx)
    00001adf: 	addl	%ecx, %ebx
    00001ae1: 	cmpq	%rdx, %rax
    00001ae4: 	jne	.Ltmp287 # Offset: 6884
    00001ae6: 	jmp	.Ltmp265 # Offset: 6886
.Ltmp269:
    00001aeb: 	leaq	0x2(%r9,%r10), %rcx
    00001af0: 	movq	%r13, %rdx
    00001af3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp288:
    00001af8: 	cvttsd2si	init_value(%rip), %eax
    00001b00: 	addq	$0x3, %rdx
    00001b04: 	addl	$0x2, %eax
    00001b07: 	movb	%al, -0x3(%rdx)
    00001b0a: 	addl	%eax, %ebx
    00001b0c: 	cmpq	%rcx, %rdx
    00001b0f: 	jne	.Ltmp288 # Offset: 6927
    00001b11: 	jmp	.Ltmp262 # Offset: 6929
.Ltmp266:
    00001b16: 	leaq	0x1(%r9,%r10), %r8
    00001b1b: 	movq	%rbp, %rcx
    00001b1e: 	nop # Size: 2
.Ltmp289:
    00001b20: 	cvttsd2si	init_value(%rip), %eax
    00001b28: 	addq	$0x3, %rcx
    00001b2c: 	addl	$0x1, %eax
    00001b2f: 	movb	%al, -0x3(%rcx)
    00001b32: 	addl	%eax, %ebx
    00001b34: 	cmpq	%r8, %rcx
    00001b37: 	jne	.Ltmp289 # Offset: 6967
    00001b39: 	jmp	.Ltmp268 # Offset: 6969
.Ltmp284:
    00001b3e: 	movq	%rbp, %rdi
    00001b41: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 6977
    00001b46: 	movq	(%rbp), %rax
    00001b4a: 	movl	$0xa, %esi
    00001b4f: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00001b56: 	movq	0x30(%rax), %rax
    00001b5a: 	cmpq	%rdx, %rax
    00001b5d: 	je	.Ltmp290 # Offset: 7005
    00001b63: 	movq	%rbp, %rdi
    00001b66: 	callq	*%rax # Offset: 7014
    00001b68: 	movsbl	%al, %esi
    00001b6b: 	jmp	.Ltmp290 # Offset: 7019
.Ltmp282:
    00001b70: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001b77: 	movq	-0x18(%rax), %rdi
    00001b7b: 	addq	%r12, %rdi
    00001b7e: 	movl	0x20(%rdi), %esi
    00001b81: 	orl	$0x1, %esi
    00001b84: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 7044
    00001b89: 	jmp	.Ltmp291 # Offset: 7049
.Ltmp276:
    00001b8e: 	movq	%rcx, %r10
.Ltmp292:
    00001b91: 	cvttsd2si	init_value(%rip), %eax
    00001b99: 	addl	$0x1, %eax
    00001b9c: 	movb	%al, 0x1(%r14,%r10)
    00001ba1: 	addq	$0x3, %r10
    00001ba5: 	addl	%eax, %ebx
    00001ba7: 	cmpl	%r10d, %r15d
    00001baa: 	jg	.Ltmp292 # Offset: 7082
    00001bac: 	jmp	.Ltmp278 # Offset: 7084
.Ltmp273:
    00001bb1: 	movq	%rcx, %rax
.Ltmp293:
    00001bb4: 	cvttsd2si	init_value(%rip), %r10d
    00001bbd: 	movb	%r10b, (%r14,%rax)
    00001bc1: 	addq	$0x3, %rax
    00001bc5: 	addl	%r10d, %ebx
    00001bc8: 	cmpl	%eax, %r15d
    00001bcb: 	jg	.Ltmp293 # Offset: 7115
    00001bcd: 	jmp	.Ltmp275 # Offset: 7117
.Ltmp261:
    00001bd2: 	movl	$0x0, 0xc(%rsp)
    00001bda: 	xorl	%ebx, %ebx
    00001bdc: 	jmp	.Ltmp294 # Offset: 7132
.Ltmp286:
    00001be1: 	callq	__stack_chk_fail@PLT # Offset: 7137
.Ltmp283:
    00001be6: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 7142
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked3IhEvPT_iPKc"

Binary Function "_Z15test_for_loop_3IhEvPT_iPKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x8750
  Size        : 0x123e
  MaxSize     : 0x1240
  Offset      : 0x8750
  Section     : .text
  Orc Section : .local.text._Z15test_for_loop_3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x4c8, %rsp
    0000001a: 	movq	%rdx, 0x28(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x4b8(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp295 # Offset: 70
    0000004c: 	leal	-0x2(%rbx), %r14d
    00000050: 	subl	$0x3, %ebx
    00000053: 	movl	$0xaaaaaaab, %eax
    00000058: 	cmpl	$0x2c, %ebx
    0000005b: 	leaq	init_value(%rip), %r10
    00000062: 	seta	%dil
    00000066: 	imulq	%rax, %rbx
    0000006a: 	leaq	0x8(%r10), %r9
    0000006e: 	shrq	$0x21, %rbx
    00000072: 	leal	0x1(%rbx), %eax
    00000075: 	leaq	(%rax,%rax,2), %rsi
    00000079: 	movq	%rax, %rbx
    0000007c: 	movl	%eax, 0x4(%rsp)
    00000080: 	leaq	-0x2(%r15,%rsi), %rax
    00000085: 	cmpq	%r10, %rax
    00000088: 	setbe	%al
    0000008b: 	cmpq	%r9, %r15
    0000008e: 	setae	%dl
    00000091: 	orl	%edx, %eax
    00000093: 	andl	%edi, %eax
    00000095: 	movb	%al, 0x43(%rsp)
    00000099: 	movl	%ebx, %eax
    0000009b: 	andl	$-0x10, %ebx
    0000009e: 	shrl	$0x4, %eax
    000000a1: 	movl	%ebx, 0x8(%rsp)
    000000a5: 	subl	$0x1, %eax
    000000a8: 	leaq	(%rax,%rax,2), %rdx
    000000ac: 	leal	(%rbx,%rbx,2), %eax
    000000af: 	movslq	%eax, %r11
    000000b2: 	shlq	$0x4, %rdx
    000000b6: 	leaq	(%r15,%r11), %rcx
    000000ba: 	leaq	0x30(%r15,%rdx), %r13
    000000bf: 	movq	%rcx, 0x78(%rsp)
    000000c4: 	leal	0x3(%rax), %ecx
    000000c7: 	leaq	0x31(%r15,%rdx), %r12
    000000cc: 	movslq	%ecx, %r11
    000000cf: 	movl	%ecx, 0xc(%rsp)
    000000d3: 	leaq	0x32(%r15,%rdx), %rbp
    000000d8: 	leal	0x2(%rax), %edx
    000000db: 	leaq	(%r15,%r11), %rbx
    000000df: 	movslq	%edx, %rdx
    000000e2: 	movq	%rbx, 0x90(%rsp)
    000000ea: 	leal	0x6(%rax), %ebx
    000000ed: 	movslq	%ebx, %r11
    000000f0: 	movl	%ebx, 0x10(%rsp)
    000000f4: 	leaq	(%r15,%r11), %rcx
    000000f8: 	movq	%rcx, 0xb0(%rsp)
    00000100: 	leal	0x9(%rax), %ecx
    00000103: 	movslq	%ecx, %r11
    00000106: 	movl	%ecx, 0x14(%rsp)
    0000010a: 	leaq	(%r15,%r11), %rbx
    0000010e: 	movq	%rbx, 0xc8(%rsp)
    00000116: 	leal	0xc(%rax), %ebx
    00000119: 	movslq	%ebx, %r11
    0000011c: 	movl	%ebx, 0x30(%rsp)
    00000120: 	leaq	(%r15,%r11), %rcx
    00000124: 	movq	%rcx, 0xe8(%rsp)
    0000012c: 	leal	0xf(%rax), %ecx
    0000012f: 	movslq	%ecx, %r11
    00000132: 	movl	%ecx, 0x34(%rsp)
    00000136: 	leaq	(%r15,%r11), %rbx
    0000013a: 	movq	%rbx, 0x100(%rsp)
    00000142: 	leal	0x12(%rax), %ebx
    00000145: 	movslq	%ebx, %r11
    00000148: 	movl	%ebx, 0x38(%rsp)
    0000014c: 	leaq	(%r15,%r11), %rcx
    00000150: 	movq	%rcx, 0x118(%rsp)
    00000158: 	leal	0x15(%rax), %ecx
    0000015b: 	movslq	%ecx, %r11
    0000015e: 	movl	%ecx, 0x3c(%rsp)
    00000162: 	leaq	(%r15,%r11), %rbx
    00000166: 	movq	%rbx, 0x130(%rsp)
    0000016e: 	leal	0x18(%rax), %ebx
    00000171: 	movslq	%ebx, %r11
    00000174: 	movl	%ebx, 0x44(%rsp)
    00000178: 	leaq	(%r15,%r11), %rcx
    0000017c: 	movq	%rcx, 0x148(%rsp)
    00000184: 	leal	0x1b(%rax), %ecx
    00000187: 	movslq	%ecx, %r11
    0000018a: 	movl	%ecx, 0x60(%rsp)
    0000018e: 	leaq	(%r15,%r11), %rbx
    00000192: 	movq	%rbx, 0x160(%rsp)
    0000019a: 	leal	0x1e(%rax), %ebx
    0000019d: 	movslq	%ebx, %r11
    000001a0: 	movl	%ebx, 0x64(%rsp)
    000001a4: 	leaq	(%r15,%r11), %rcx
    000001a8: 	movq	%rcx, 0x178(%rsp)
    000001b0: 	leal	0x21(%rax), %ecx
    000001b3: 	movslq	%ecx, %r11
    000001b6: 	movl	%ecx, 0x98(%rsp)
    000001bd: 	leaq	(%r15,%r11), %rbx
    000001c1: 	movq	%rbx, 0x190(%rsp)
    000001c9: 	leal	0x24(%rax), %ebx
    000001cc: 	movslq	%ebx, %r11
    000001cf: 	movl	%ebx, 0x9c(%rsp)
    000001d6: 	leaq	(%r15,%r11), %rcx
    000001da: 	movq	%rcx, 0x1a8(%rsp)
    000001e2: 	leal	0x27(%rax), %ecx
    000001e5: 	movslq	%ecx, %r11
    000001e8: 	movl	%ecx, 0xd0(%rsp)
    000001ef: 	leaq	(%r15,%r11), %rbx
    000001f3: 	movq	%rbx, 0x1c0(%rsp)
    000001fb: 	leal	0x2a(%rax), %ebx
    000001fe: 	movslq	%ebx, %r11
    00000201: 	movl	%ebx, 0xd4(%rsp)
    00000208: 	leaq	(%r15,%r11), %rcx
    0000020c: 	leaq	-0x1(%r15,%rsi), %r11
    00000211: 	movq	%rcx, 0x1d8(%rsp)
    00000219: 	cmpq	%r10, %r11
    0000021c: 	leaq	0x1(%r15), %rcx
    00000220: 	setbe	%r11b
    00000224: 	cmpq	%r9, %rcx
    00000227: 	movq	%rcx, 0x58(%rsp)
    0000022c: 	setae	%bl
    0000022f: 	addq	%r15, %rsi
    00000232: 	orl	%ebx, %r11d
    00000235: 	andl	%edi, %r11d
    00000238: 	cmpq	%r10, %rsi
    0000023b: 	movb	%r11b, 0x42(%rsp)
    00000240: 	leal	0x1(%rax), %r11d
    00000244: 	setbe	%sil
    00000248: 	movslq	%r11d, %r11
    0000024b: 	leaq	(%r15,%r11), %rbx
    0000024f: 	leal	0x4(%rax), %r11d
    00000253: 	movslq	%r11d, %r11
    00000256: 	movq	%rbx, 0x70(%rsp)
    0000025b: 	leaq	(%r15,%r11), %rcx
    0000025f: 	leal	0x7(%rax), %r11d
    00000263: 	movslq	%r11d, %r11
    00000266: 	movq	%rcx, 0x88(%rsp)
    0000026e: 	leaq	(%r15,%r11), %rbx
    00000272: 	leal	0xa(%rax), %r11d
    00000276: 	movslq	%r11d, %r11
    00000279: 	movq	%rbx, 0xa8(%rsp)
    00000281: 	leaq	(%r15,%r11), %rcx
    00000285: 	leal	0xd(%rax), %r11d
    00000289: 	movslq	%r11d, %r11
    0000028c: 	movq	%rcx, 0xc0(%rsp)
    00000294: 	leaq	(%r15,%r11), %rbx
    00000298: 	leal	0x10(%rax), %r11d
    0000029c: 	movslq	%r11d, %r11
    0000029f: 	movq	%rbx, 0xe0(%rsp)
    000002a7: 	leaq	(%r15,%r11), %rcx
    000002ab: 	leal	0x13(%rax), %r11d
    000002af: 	movslq	%r11d, %r11
    000002b2: 	movq	%rcx, 0xf8(%rsp)
    000002ba: 	leaq	(%r15,%r11), %rbx
    000002be: 	leal	0x16(%rax), %r11d
    000002c2: 	movslq	%r11d, %r11
    000002c5: 	movq	%rbx, 0x110(%rsp)
    000002cd: 	leaq	(%r15,%r11), %rcx
    000002d1: 	leal	0x19(%rax), %r11d
    000002d5: 	movslq	%r11d, %r11
    000002d8: 	movq	%rcx, 0x128(%rsp)
    000002e0: 	leaq	(%r15,%r11), %rbx
    000002e4: 	leal	0x1c(%rax), %r11d
    000002e8: 	movslq	%r11d, %r11
    000002eb: 	movq	%rbx, 0x140(%rsp)
    000002f3: 	leaq	(%r15,%r11), %rcx
    000002f7: 	leal	0x1f(%rax), %r11d
    000002fb: 	movslq	%r11d, %r11
    000002fe: 	movq	%rcx, 0x158(%rsp)
    00000306: 	leaq	(%r15,%r11), %rbx
    0000030a: 	leal	0x22(%rax), %r11d
    0000030e: 	movslq	%r11d, %r11
    00000311: 	movq	%rbx, 0x170(%rsp)
    00000319: 	leaq	(%r15,%r11), %rcx
    0000031d: 	leal	0x25(%rax), %r11d
    00000321: 	movslq	%r11d, %r11
    00000324: 	movq	%rcx, 0x188(%rsp)
    0000032c: 	leaq	(%r15,%r11), %rbx
    00000330: 	leal	0x28(%rax), %r11d
    00000334: 	movslq	%r11d, %r11
    00000337: 	movq	%rbx, 0x1a0(%rsp)
    0000033f: 	leaq	(%r15,%r11), %rcx
    00000343: 	leal	0x2b(%rax), %r11d
    00000347: 	movslq	%r11d, %r11
    0000034a: 	movq	%rcx, 0x1b8(%rsp)
    00000352: 	leaq	(%r15,%r11), %rbx
    00000356: 	movq	%rbx, 0x1d0(%rsp)
    0000035e: 	leaq	0x2(%r15), %rbx
    00000362: 	cmpq	%r9, %rbx
    00000365: 	movq	%rbx, 0x50(%rsp)
    0000036a: 	setae	%r9b
    0000036e: 	orl	%r9d, %esi
    00000371: 	andl	%edi, %esi
    00000373: 	movb	%sil, 0x41(%rsp)
    00000378: 	leaq	(%r15,%rdx), %rsi
    0000037c: 	leal	0x5(%rax), %edx
    0000037f: 	movslq	%edx, %rdx
    00000382: 	movq	%rsi, 0x68(%rsp)
    00000387: 	leaq	(%r15,%rdx), %rdi
    0000038b: 	leal	0x8(%rax), %edx
    0000038e: 	movslq	%edx, %rdx
    00000391: 	movq	%rdi, 0x80(%rsp)
    00000399: 	leaq	(%r15,%rdx), %rsi
    0000039d: 	leal	0xb(%rax), %edx
    000003a0: 	movslq	%edx, %rdx
    000003a3: 	movq	%rsi, 0xa0(%rsp)
    000003ab: 	leaq	(%r15,%rdx), %rdi
    000003af: 	leal	0xe(%rax), %edx
    000003b2: 	movslq	%edx, %rdx
    000003b5: 	movq	%rdi, 0xb8(%rsp)
    000003bd: 	leaq	(%r15,%rdx), %rsi
    000003c1: 	leal	0x11(%rax), %edx
    000003c4: 	movslq	%edx, %rdx
    000003c7: 	movq	%rsi, 0xd8(%rsp)
    000003cf: 	leaq	(%r15,%rdx), %rdi
    000003d3: 	leal	0x14(%rax), %edx
    000003d6: 	movslq	%edx, %rdx
    000003d9: 	movq	%rdi, 0xf0(%rsp)
    000003e1: 	leaq	(%r15,%rdx), %rsi
    000003e5: 	leal	0x17(%rax), %edx
    000003e8: 	movslq	%edx, %rdx
    000003eb: 	movq	%rsi, 0x108(%rsp)
    000003f3: 	leaq	(%r15,%rdx), %rdi
    000003f7: 	leal	0x1a(%rax), %edx
    000003fa: 	movslq	%edx, %rdx
    000003fd: 	movq	%rdi, 0x120(%rsp)
    00000405: 	leaq	(%r15,%rdx), %rsi
    00000409: 	leal	0x1d(%rax), %edx
    0000040c: 	movslq	%edx, %rdx
    0000040f: 	movq	%rsi, 0x138(%rsp)
    00000417: 	leaq	(%r15,%rdx), %rdi
    0000041b: 	leal	0x20(%rax), %edx
    0000041e: 	movslq	%edx, %rdx
    00000421: 	movq	%rdi, 0x150(%rsp)
    00000429: 	leaq	(%r15,%rdx), %rsi
    0000042d: 	leal	0x23(%rax), %edx
    00000430: 	movslq	%edx, %rdx
    00000433: 	movq	%rsi, 0x168(%rsp)
    0000043b: 	leaq	(%r15,%rdx), %rdi
    0000043f: 	leal	0x26(%rax), %edx
    00000442: 	movslq	%edx, %rdx
    00000445: 	movq	%rdi, 0x180(%rsp)
    0000044d: 	leaq	(%r15,%rdx), %rsi
    00000451: 	leal	0x29(%rax), %edx
    00000454: 	addl	$0x2c, %eax
    00000457: 	movslq	%edx, %rdx
    0000045a: 	cltq
    0000045c: 	movq	%rsi, 0x198(%rsp)
    00000464: 	addq	%r15, %rax
    00000467: 	leaq	(%r15,%rdx), %rdi
    0000046b: 	movq	%rdi, 0x1b0(%rsp)
    00000473: 	movq	%rax, 0x1c8(%rsp)
    0000047b: 	movq	%r15, %rax
    0000047e: 	movdqa	DATAat0x36f20(%rip), %xmm2
    00000486: 	movl	%r14d, %r15d
    00000489: 	movl	$0x0, (%rsp)
    00000490: 	movq	%rax, %r14
    00000493: 	nopl	(%rax,%rax) # Size: 5
.Ltmp309:
    00000498: 	xorl	%r9d, %r9d
    0000049b: 	testl	%r15d, %r15d
    0000049e: 	jle	.Ltmp296 # Offset: 1182
    000004a4: 	cmpb	$0x0, 0x43(%rsp)
    000004a9: 	je	.Ltmp297 # Offset: 1193
    000004af: 	movsd	init_value(%rip), %xmm3
    000004b7: 	movdqa	DATAat0x36f20(%rip), %xmm6
    000004bf: 	movq	%r14, %rax
    000004c2: 	pxor	%xmm1, %xmm1
    000004c6: 	unpcklpd	%xmm3, %xmm3
    000004ca: 	cvttpd2dq	%xmm3, %xmm3
    000004ce: 	punpcklqdq	%xmm3, %xmm3
    000004d2: 	movdqa	%xmm3, %xmm4
    000004d6: 	punpckhwd	%xmm3, %xmm4
    000004da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp298:
    000004e0: 	movdqa	%xmm3, %xmm0
    000004e4: 	addq	$0x30, %rax
    000004e8: 	punpcklwd	%xmm3, %xmm0
    000004ec: 	movdqa	%xmm0, %xmm5
    000004f0: 	punpcklwd	%xmm4, %xmm0
    000004f4: 	punpckhwd	%xmm4, %xmm5
    000004f8: 	punpcklwd	%xmm5, %xmm0
    000004fc: 	pand	%xmm6, %xmm0
    00000500: 	packuswb	%xmm0, %xmm0
    00000504: 	movd	%xmm0, %edx
    00000508: 	paddb	%xmm0, %xmm1
    0000050c: 	movb	%dl, -0x30(%rax)
    0000050f: 	movaps	%xmm0, 0x4a0(%rsp)
    00000517: 	movzbl	0x4a1(%rsp), %edx
    0000051f: 	movb	%dl, -0x2d(%rax)
    00000522: 	movaps	%xmm0, 0x490(%rsp)
    0000052a: 	movzbl	0x492(%rsp), %edx
    00000532: 	movb	%dl, -0x2a(%rax)
    00000535: 	movaps	%xmm0, 0x480(%rsp)
    0000053d: 	movzbl	0x483(%rsp), %edx
    00000545: 	movb	%dl, -0x27(%rax)
    00000548: 	movaps	%xmm0, 0x470(%rsp)
    00000550: 	movzbl	0x474(%rsp), %edx
    00000558: 	movb	%dl, -0x24(%rax)
    0000055b: 	movaps	%xmm0, 0x460(%rsp)
    00000563: 	movzbl	0x465(%rsp), %edx
    0000056b: 	movb	%dl, -0x21(%rax)
    0000056e: 	movaps	%xmm0, 0x450(%rsp)
    00000576: 	movzbl	0x456(%rsp), %edx
    0000057e: 	movb	%dl, -0x1e(%rax)
    00000581: 	movaps	%xmm0, 0x440(%rsp)
    00000589: 	movzbl	0x447(%rsp), %edx
    00000591: 	movb	%dl, -0x1b(%rax)
    00000594: 	movaps	%xmm0, 0x430(%rsp)
    0000059c: 	movzbl	0x438(%rsp), %edx
    000005a4: 	movb	%dl, -0x18(%rax)
    000005a7: 	movaps	%xmm0, 0x420(%rsp)
    000005af: 	movzbl	0x429(%rsp), %edx
    000005b7: 	movb	%dl, -0x15(%rax)
    000005ba: 	movaps	%xmm0, 0x410(%rsp)
    000005c2: 	movzbl	0x41a(%rsp), %edx
    000005ca: 	movb	%dl, -0x12(%rax)
    000005cd: 	movaps	%xmm0, 0x400(%rsp)
    000005d5: 	movzbl	0x40b(%rsp), %edx
    000005dd: 	movb	%dl, -0xf(%rax)
    000005e0: 	movaps	%xmm0, 0x3f0(%rsp)
    000005e8: 	movzbl	0x3fc(%rsp), %edx
    000005f0: 	movb	%dl, -0xc(%rax)
    000005f3: 	movaps	%xmm0, 0x3e0(%rsp)
    000005fb: 	movzbl	0x3ed(%rsp), %edx
    00000603: 	movb	%dl, -0x9(%rax)
    00000606: 	movaps	%xmm0, 0x3d0(%rsp)
    0000060e: 	movzbl	0x3de(%rsp), %edx
    00000616: 	movb	%dl, -0x6(%rax)
    00000619: 	movaps	%xmm0, 0x3c0(%rsp)
    00000621: 	movzbl	0x3cf(%rsp), %edx
    00000629: 	movb	%dl, -0x3(%rax)
    0000062c: 	cmpq	%r13, %rax
    0000062f: 	jne	.Ltmp298 # Offset: 1583
    00000635: 	movdqa	%xmm1, %xmm0
    00000639: 	movl	0x8(%rsp), %esi
    0000063d: 	psrldq	$0x8, %xmm0
    00000642: 	paddb	%xmm0, %xmm1
    00000646: 	pxor	%xmm0, %xmm0
    0000064a: 	psadbw	%xmm0, %xmm1
    0000064e: 	movd	%xmm1, %eax
    00000652: 	movl	%eax, %r9d
    00000655: 	cmpl	%esi, 0x4(%rsp)
    00000659: 	je	.Ltmp299 # Offset: 1625
    0000065f: 	cvttsd2si	init_value(%rip), %r9d
    00000668: 	movq	0x78(%rsp), %rcx
    0000066d: 	movb	%r9b, (%rcx)
    00000670: 	addl	%eax, %r9d
    00000673: 	cmpl	0xc(%rsp), %r15d
    00000678: 	jle	.Ltmp299 # Offset: 1656
    0000067e: 	cvttsd2si	init_value(%rip), %eax
    00000686: 	movq	0x90(%rsp), %rcx
    0000068e: 	addl	%eax, %r9d
    00000691: 	movb	%al, (%rcx)
    00000693: 	cmpl	0x10(%rsp), %r15d
    00000698: 	jle	.Ltmp299 # Offset: 1688
    0000069e: 	cvttsd2si	init_value(%rip), %eax
    000006a6: 	movq	0xb0(%rsp), %rsi
    000006ae: 	addl	%eax, %r9d
    000006b1: 	movb	%al, (%rsi)
    000006b3: 	cmpl	0x14(%rsp), %r15d
    000006b8: 	jle	.Ltmp299 # Offset: 1720
    000006be: 	cvttsd2si	init_value(%rip), %eax
    000006c6: 	movq	0xc8(%rsp), %rsi
    000006ce: 	addl	%eax, %r9d
    000006d1: 	movb	%al, (%rsi)
    000006d3: 	cmpl	0x30(%rsp), %r15d
    000006d8: 	jle	.Ltmp299 # Offset: 1752
    000006de: 	cvttsd2si	init_value(%rip), %eax
    000006e6: 	movq	0xe8(%rsp), %rsi
    000006ee: 	addl	%eax, %r9d
    000006f1: 	movb	%al, (%rsi)
    000006f3: 	cmpl	0x34(%rsp), %r15d
    000006f8: 	jle	.Ltmp299 # Offset: 1784
    000006fe: 	cvttsd2si	init_value(%rip), %eax
    00000706: 	movq	0x100(%rsp), %rsi
    0000070e: 	addl	%eax, %r9d
    00000711: 	movb	%al, (%rsi)
    00000713: 	cmpl	0x38(%rsp), %r15d
    00000718: 	jle	.Ltmp299 # Offset: 1816
    0000071e: 	cvttsd2si	init_value(%rip), %eax
    00000726: 	movq	0x118(%rsp), %rsi
    0000072e: 	addl	%eax, %r9d
    00000731: 	movb	%al, (%rsi)
    00000733: 	cmpl	0x3c(%rsp), %r15d
    00000738: 	jle	.Ltmp299 # Offset: 1848
    0000073e: 	cvttsd2si	init_value(%rip), %eax
    00000746: 	movq	0x130(%rsp), %rbx
    0000074e: 	addl	%eax, %r9d
    00000751: 	movb	%al, (%rbx)
    00000753: 	cmpl	0x44(%rsp), %r15d
    00000758: 	jle	.Ltmp299 # Offset: 1880
    0000075e: 	cvttsd2si	init_value(%rip), %eax
    00000766: 	movq	0x148(%rsp), %rbx
    0000076e: 	addl	%eax, %r9d
    00000771: 	movb	%al, (%rbx)
    00000773: 	cmpl	0x60(%rsp), %r15d
    00000778: 	jle	.Ltmp299 # Offset: 1912
    0000077e: 	cvttsd2si	init_value(%rip), %eax
    00000786: 	movq	0x160(%rsp), %rcx
    0000078e: 	addl	%eax, %r9d
    00000791: 	movb	%al, (%rcx)
    00000793: 	cmpl	0x64(%rsp), %r15d
    00000798: 	jle	.Ltmp299 # Offset: 1944
    0000079e: 	cvttsd2si	init_value(%rip), %eax
    000007a6: 	movq	0x178(%rsp), %rcx
    000007ae: 	addl	%eax, %r9d
    000007b1: 	movb	%al, (%rcx)
    000007b3: 	cmpl	0x98(%rsp), %r15d
    000007bb: 	jle	.Ltmp299 # Offset: 1979
    000007bd: 	cvttsd2si	init_value(%rip), %eax
    000007c5: 	movq	0x190(%rsp), %rcx
    000007cd: 	addl	%eax, %r9d
    000007d0: 	movb	%al, (%rcx)
    000007d2: 	cmpl	0x9c(%rsp), %r15d
    000007da: 	jle	.Ltmp299 # Offset: 2010
    000007dc: 	cvttsd2si	init_value(%rip), %eax
    000007e4: 	movq	0x1a8(%rsp), %rdi
    000007ec: 	addl	%eax, %r9d
    000007ef: 	movb	%al, (%rdi)
    000007f1: 	cmpl	0xd0(%rsp), %r15d
    000007f9: 	jle	.Ltmp299 # Offset: 2041
    000007fb: 	cvttsd2si	init_value(%rip), %eax
    00000803: 	movq	0x1c0(%rsp), %rsi
    0000080b: 	addl	%eax, %r9d
    0000080e: 	movb	%al, (%rsi)
    00000810: 	cmpl	0xd4(%rsp), %r15d
    00000818: 	jle	.Ltmp299 # Offset: 2072
    0000081a: 	cvttsd2si	init_value(%rip), %eax
    00000822: 	movq	0x1d8(%rsp), %rdi
    0000082a: 	movb	%al, (%rdi)
    0000082c: 	addl	%eax, %r9d
    0000082f: 	nop # Size: 1
.Ltmp299:
    00000830: 	cmpb	$0x0, 0x42(%rsp)
    00000835: 	je	.Ltmp300 # Offset: 2101
    0000083b: 	movsd	init_value(%rip), %xmm3
    00000843: 	movq	0x58(%rsp), %rax
    00000848: 	pxor	%xmm1, %xmm1
    0000084c: 	unpcklpd	%xmm3, %xmm3
    00000850: 	cvttpd2dq	%xmm3, %xmm3
    00000854: 	punpcklqdq	%xmm3, %xmm3
    00000858: 	movdqa	%xmm3, %xmm4
    0000085c: 	punpckhwd	%xmm3, %xmm4
.Ltmp301:
    00000860: 	movdqa	%xmm3, %xmm0
    00000864: 	addq	$0x30, %rax
    00000868: 	punpcklwd	%xmm3, %xmm0
    0000086c: 	movdqa	%xmm0, %xmm5
    00000870: 	punpcklwd	%xmm4, %xmm0
    00000874: 	punpckhwd	%xmm4, %xmm5
    00000878: 	punpcklwd	%xmm5, %xmm0
    0000087c: 	pand	%xmm2, %xmm0
    00000880: 	packuswb	%xmm0, %xmm0
    00000884: 	paddb	DATAat0x36f30(%rip), %xmm0
    0000088c: 	movd	%xmm0, %edx
    00000890: 	paddb	%xmm0, %xmm1
    00000894: 	movb	%dl, -0x30(%rax)
    00000897: 	movaps	%xmm0, 0x3b0(%rsp)
    0000089f: 	movzbl	0x3b1(%rsp), %edx
    000008a7: 	movb	%dl, -0x2d(%rax)
    000008aa: 	movaps	%xmm0, 0x3a0(%rsp)
    000008b2: 	movzbl	0x3a2(%rsp), %edx
    000008ba: 	movb	%dl, -0x2a(%rax)
    000008bd: 	movaps	%xmm0, 0x390(%rsp)
    000008c5: 	movzbl	0x393(%rsp), %edx
    000008cd: 	movb	%dl, -0x27(%rax)
    000008d0: 	movaps	%xmm0, 0x380(%rsp)
    000008d8: 	movzbl	0x384(%rsp), %edx
    000008e0: 	movb	%dl, -0x24(%rax)
    000008e3: 	movaps	%xmm0, 0x370(%rsp)
    000008eb: 	movzbl	0x375(%rsp), %edx
    000008f3: 	movb	%dl, -0x21(%rax)
    000008f6: 	movaps	%xmm0, 0x360(%rsp)
    000008fe: 	movzbl	0x366(%rsp), %edx
    00000906: 	movb	%dl, -0x1e(%rax)
    00000909: 	movaps	%xmm0, 0x350(%rsp)
    00000911: 	movzbl	0x357(%rsp), %edx
    00000919: 	movb	%dl, -0x1b(%rax)
    0000091c: 	movaps	%xmm0, 0x340(%rsp)
    00000924: 	movzbl	0x348(%rsp), %edx
    0000092c: 	movb	%dl, -0x18(%rax)
    0000092f: 	movaps	%xmm0, 0x330(%rsp)
    00000937: 	movzbl	0x339(%rsp), %edx
    0000093f: 	movb	%dl, -0x15(%rax)
    00000942: 	movaps	%xmm0, 0x320(%rsp)
    0000094a: 	movzbl	0x32a(%rsp), %edx
    00000952: 	movb	%dl, -0x12(%rax)
    00000955: 	movaps	%xmm0, 0x310(%rsp)
    0000095d: 	movzbl	0x31b(%rsp), %edx
    00000965: 	movb	%dl, -0xf(%rax)
    00000968: 	movaps	%xmm0, 0x300(%rsp)
    00000970: 	movzbl	0x30c(%rsp), %edx
    00000978: 	movb	%dl, -0xc(%rax)
    0000097b: 	movaps	%xmm0, 0x2f0(%rsp)
    00000983: 	movzbl	0x2fd(%rsp), %edx
    0000098b: 	movb	%dl, -0x9(%rax)
    0000098e: 	movaps	%xmm0, 0x2e0(%rsp)
    00000996: 	movzbl	0x2ee(%rsp), %edx
    0000099e: 	movb	%dl, -0x6(%rax)
    000009a1: 	movaps	%xmm0, 0x2d0(%rsp)
    000009a9: 	movzbl	0x2df(%rsp), %edx
    000009b1: 	movb	%dl, -0x3(%rax)
    000009b4: 	cmpq	%rax, %r12
    000009b7: 	jne	.Ltmp301 # Offset: 2487
    000009bd: 	movdqa	%xmm1, %xmm0
    000009c1: 	movl	0x8(%rsp), %ecx
    000009c5: 	psrldq	$0x8, %xmm0
    000009ca: 	paddb	%xmm0, %xmm1
    000009ce: 	pxor	%xmm0, %xmm0
    000009d2: 	psadbw	%xmm0, %xmm1
    000009d6: 	movd	%xmm1, %eax
    000009da: 	addl	%eax, %r9d
    000009dd: 	cmpl	%ecx, 0x4(%rsp)
    000009e1: 	je	.Ltmp302 # Offset: 2529
    000009e7: 	cvttsd2si	init_value(%rip), %eax
    000009ef: 	movq	0x70(%rsp), %rcx
    000009f4: 	addl	$0x1, %eax
    000009f7: 	movb	%al, (%rcx)
    000009f9: 	addl	%eax, %r9d
    000009fc: 	cmpl	0xc(%rsp), %r15d
    00000a01: 	jle	.Ltmp302 # Offset: 2561
    00000a07: 	cvttsd2si	init_value(%rip), %eax
    00000a0f: 	movq	0x88(%rsp), %rcx
    00000a17: 	addl	$0x1, %eax
    00000a1a: 	movb	%al, (%rcx)
    00000a1c: 	addl	%eax, %r9d
    00000a1f: 	cmpl	0x10(%rsp), %r15d
    00000a24: 	jle	.Ltmp302 # Offset: 2596
    00000a2a: 	cvttsd2si	init_value(%rip), %eax
    00000a32: 	movq	0xa8(%rsp), %rcx
    00000a3a: 	addl	$0x1, %eax
    00000a3d: 	movb	%al, (%rcx)
    00000a3f: 	addl	%eax, %r9d
    00000a42: 	cmpl	0x14(%rsp), %r15d
    00000a47: 	jle	.Ltmp302 # Offset: 2631
    00000a4d: 	cvttsd2si	init_value(%rip), %eax
    00000a55: 	movq	0xc0(%rsp), %rcx
    00000a5d: 	addl	$0x1, %eax
    00000a60: 	movb	%al, (%rcx)
    00000a62: 	addl	%eax, %r9d
    00000a65: 	cmpl	0x30(%rsp), %r15d
    00000a6a: 	jle	.Ltmp302 # Offset: 2666
    00000a70: 	cvttsd2si	init_value(%rip), %eax
    00000a78: 	movq	0xe0(%rsp), %rcx
    00000a80: 	addl	$0x1, %eax
    00000a83: 	movb	%al, (%rcx)
    00000a85: 	addl	%eax, %r9d
    00000a88: 	cmpl	0x34(%rsp), %r15d
    00000a8d: 	jle	.Ltmp302 # Offset: 2701
    00000a93: 	cvttsd2si	init_value(%rip), %eax
    00000a9b: 	movq	0xf8(%rsp), %rcx
    00000aa3: 	addl	$0x1, %eax
    00000aa6: 	movb	%al, (%rcx)
    00000aa8: 	addl	%eax, %r9d
    00000aab: 	cmpl	0x38(%rsp), %r15d
    00000ab0: 	jle	.Ltmp302 # Offset: 2736
    00000ab6: 	cvttsd2si	init_value(%rip), %eax
    00000abe: 	movq	0x110(%rsp), %rcx
    00000ac6: 	addl	$0x1, %eax
    00000ac9: 	movb	%al, (%rcx)
    00000acb: 	addl	%eax, %r9d
    00000ace: 	cmpl	0x3c(%rsp), %r15d
    00000ad3: 	jle	.Ltmp302 # Offset: 2771
    00000ad9: 	cvttsd2si	init_value(%rip), %eax
    00000ae1: 	movq	0x128(%rsp), %rsi
    00000ae9: 	addl	$0x1, %eax
    00000aec: 	movb	%al, (%rsi)
    00000aee: 	addl	%eax, %r9d
    00000af1: 	cmpl	0x44(%rsp), %r15d
    00000af6: 	jle	.Ltmp302 # Offset: 2806
    00000afc: 	cvttsd2si	init_value(%rip), %eax
    00000b04: 	movq	0x140(%rsp), %rdi
    00000b0c: 	addl	$0x1, %eax
    00000b0f: 	movb	%al, (%rdi)
    00000b11: 	addl	%eax, %r9d
    00000b14: 	cmpl	0x60(%rsp), %r15d
    00000b19: 	jle	.Ltmp302 # Offset: 2841
    00000b1f: 	cvttsd2si	init_value(%rip), %eax
    00000b27: 	movq	0x158(%rsp), %rbx
    00000b2f: 	addl	$0x1, %eax
    00000b32: 	movb	%al, (%rbx)
    00000b34: 	addl	%eax, %r9d
    00000b37: 	cmpl	0x64(%rsp), %r15d
    00000b3c: 	jle	.Ltmp302 # Offset: 2876
    00000b42: 	cvttsd2si	init_value(%rip), %eax
    00000b4a: 	movq	0x170(%rsp), %rbx
    00000b52: 	addl	$0x1, %eax
    00000b55: 	movb	%al, (%rbx)
    00000b57: 	addl	%eax, %r9d
    00000b5a: 	cmpl	0x98(%rsp), %r15d
    00000b62: 	jle	.Ltmp302 # Offset: 2914
    00000b68: 	cvttsd2si	init_value(%rip), %eax
    00000b70: 	movq	0x188(%rsp), %rbx
    00000b78: 	addl	$0x1, %eax
    00000b7b: 	movb	%al, (%rbx)
    00000b7d: 	addl	%eax, %r9d
    00000b80: 	cmpl	0x9c(%rsp), %r15d
    00000b88: 	jle	.Ltmp302 # Offset: 2952
    00000b8a: 	cvttsd2si	init_value(%rip), %eax
    00000b92: 	movq	0x1a0(%rsp), %rsi
    00000b9a: 	addl	$0x1, %eax
    00000b9d: 	movb	%al, (%rsi)
    00000b9f: 	addl	%eax, %r9d
    00000ba2: 	cmpl	0xd0(%rsp), %r15d
    00000baa: 	jle	.Ltmp302 # Offset: 2986
    00000bac: 	cvttsd2si	init_value(%rip), %eax
    00000bb4: 	movq	0x1b8(%rsp), %rdi
    00000bbc: 	addl	$0x1, %eax
    00000bbf: 	movb	%al, (%rdi)
    00000bc1: 	addl	%eax, %r9d
    00000bc4: 	cmpl	0xd4(%rsp), %r15d
    00000bcc: 	jle	.Ltmp302 # Offset: 3020
    00000bce: 	cvttsd2si	init_value(%rip), %eax
    00000bd6: 	movq	0x1d0(%rsp), %rsi
    00000bde: 	addl	$0x1, %eax
    00000be1: 	movb	%al, (%rsi)
    00000be3: 	addl	%eax, %r9d
    00000be6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp302:
    00000bf0: 	cmpb	$0x0, 0x41(%rsp)
    00000bf5: 	je	.Ltmp303 # Offset: 3061
    00000bfb: 	movsd	init_value(%rip), %xmm3
    00000c03: 	movq	0x50(%rsp), %rax
    00000c08: 	pxor	%xmm1, %xmm1
    00000c0c: 	unpcklpd	%xmm3, %xmm3
    00000c10: 	cvttpd2dq	%xmm3, %xmm3
    00000c14: 	punpcklqdq	%xmm3, %xmm3
    00000c18: 	movdqa	%xmm3, %xmm4
    00000c1c: 	punpckhwd	%xmm3, %xmm4
.Ltmp304:
    00000c20: 	movdqa	%xmm3, %xmm0
    00000c24: 	addq	$0x30, %rax
    00000c28: 	punpcklwd	%xmm3, %xmm0
    00000c2c: 	movdqa	%xmm0, %xmm5
    00000c30: 	punpcklwd	%xmm4, %xmm0
    00000c34: 	punpckhwd	%xmm4, %xmm5
    00000c38: 	punpcklwd	%xmm5, %xmm0
    00000c3c: 	pand	%xmm2, %xmm0
    00000c40: 	packuswb	%xmm0, %xmm0
    00000c44: 	paddb	DATAat0x36f40(%rip), %xmm0
    00000c4c: 	movd	%xmm0, %edx
    00000c50: 	paddb	%xmm0, %xmm1
    00000c54: 	movb	%dl, -0x30(%rax)
    00000c57: 	movaps	%xmm0, 0x2c0(%rsp)
    00000c5f: 	movzbl	0x2c1(%rsp), %edx
    00000c67: 	movb	%dl, -0x2d(%rax)
    00000c6a: 	movaps	%xmm0, 0x2b0(%rsp)
    00000c72: 	movzbl	0x2b2(%rsp), %edx
    00000c7a: 	movb	%dl, -0x2a(%rax)
    00000c7d: 	movaps	%xmm0, 0x2a0(%rsp)
    00000c85: 	movzbl	0x2a3(%rsp), %edx
    00000c8d: 	movb	%dl, -0x27(%rax)
    00000c90: 	movaps	%xmm0, 0x290(%rsp)
    00000c98: 	movzbl	0x294(%rsp), %edx
    00000ca0: 	movb	%dl, -0x24(%rax)
    00000ca3: 	movaps	%xmm0, 0x280(%rsp)
    00000cab: 	movzbl	0x285(%rsp), %edx
    00000cb3: 	movb	%dl, -0x21(%rax)
    00000cb6: 	movaps	%xmm0, 0x270(%rsp)
    00000cbe: 	movzbl	0x276(%rsp), %edx
    00000cc6: 	movb	%dl, -0x1e(%rax)
    00000cc9: 	movaps	%xmm0, 0x260(%rsp)
    00000cd1: 	movzbl	0x267(%rsp), %edx
    00000cd9: 	movb	%dl, -0x1b(%rax)
    00000cdc: 	movaps	%xmm0, 0x250(%rsp)
    00000ce4: 	movzbl	0x258(%rsp), %edx
    00000cec: 	movb	%dl, -0x18(%rax)
    00000cef: 	movaps	%xmm0, 0x240(%rsp)
    00000cf7: 	movzbl	0x249(%rsp), %edx
    00000cff: 	movb	%dl, -0x15(%rax)
    00000d02: 	movaps	%xmm0, 0x230(%rsp)
    00000d0a: 	movzbl	0x23a(%rsp), %edx
    00000d12: 	movb	%dl, -0x12(%rax)
    00000d15: 	movaps	%xmm0, 0x220(%rsp)
    00000d1d: 	movzbl	0x22b(%rsp), %edx
    00000d25: 	movb	%dl, -0xf(%rax)
    00000d28: 	movaps	%xmm0, 0x210(%rsp)
    00000d30: 	movzbl	0x21c(%rsp), %edx
    00000d38: 	movb	%dl, -0xc(%rax)
    00000d3b: 	movaps	%xmm0, 0x200(%rsp)
    00000d43: 	movzbl	0x20d(%rsp), %edx
    00000d4b: 	movb	%dl, -0x9(%rax)
    00000d4e: 	movaps	%xmm0, 0x1f0(%rsp)
    00000d56: 	movzbl	0x1fe(%rsp), %edx
    00000d5e: 	movb	%dl, -0x6(%rax)
    00000d61: 	movaps	%xmm0, 0x1e0(%rsp)
    00000d69: 	movzbl	0x1ef(%rsp), %edx
    00000d71: 	movb	%dl, -0x3(%rax)
    00000d74: 	cmpq	%rbp, %rax
    00000d77: 	jne	.Ltmp304 # Offset: 3447
    00000d7d: 	movdqa	%xmm1, %xmm0
    00000d81: 	movl	0x8(%rsp), %ecx
    00000d85: 	psrldq	$0x8, %xmm0
    00000d8a: 	paddb	%xmm0, %xmm1
    00000d8e: 	pxor	%xmm0, %xmm0
    00000d92: 	psadbw	%xmm0, %xmm1
    00000d96: 	movd	%xmm1, %eax
    00000d9a: 	addl	%eax, %r9d
    00000d9d: 	cmpl	%ecx, 0x4(%rsp)
    00000da1: 	je	.Ltmp296 # Offset: 3489
    00000da7: 	cvttsd2si	init_value(%rip), %eax
    00000daf: 	movq	0x68(%rsp), %rcx
    00000db4: 	addl	$0x2, %eax
    00000db7: 	movb	%al, (%rcx)
    00000db9: 	addl	%eax, %r9d
    00000dbc: 	cmpl	0xc(%rsp), %r15d
    00000dc1: 	jle	.Ltmp296 # Offset: 3521
    00000dc7: 	cvttsd2si	init_value(%rip), %eax
    00000dcf: 	movq	0x80(%rsp), %rbx
    00000dd7: 	addl	$0x2, %eax
    00000dda: 	movb	%al, (%rbx)
    00000ddc: 	addl	%eax, %r9d
    00000ddf: 	cmpl	0x10(%rsp), %r15d
    00000de4: 	jle	.Ltmp296 # Offset: 3556
    00000dea: 	cvttsd2si	init_value(%rip), %eax
    00000df2: 	movq	0xa0(%rsp), %rbx
    00000dfa: 	addl	$0x2, %eax
    00000dfd: 	movb	%al, (%rbx)
    00000dff: 	addl	%eax, %r9d
    00000e02: 	cmpl	0x14(%rsp), %r15d
    00000e07: 	jle	.Ltmp296 # Offset: 3591
    00000e0d: 	cvttsd2si	init_value(%rip), %eax
    00000e15: 	movq	0xb8(%rsp), %rdi
    00000e1d: 	addl	$0x2, %eax
    00000e20: 	movb	%al, (%rdi)
    00000e22: 	addl	%eax, %r9d
    00000e25: 	cmpl	0x30(%rsp), %r15d
    00000e2a: 	jle	.Ltmp296 # Offset: 3626
    00000e30: 	cvttsd2si	init_value(%rip), %eax
    00000e38: 	movq	0xd8(%rsp), %rdi
    00000e40: 	addl	$0x2, %eax
    00000e43: 	movb	%al, (%rdi)
    00000e45: 	addl	%eax, %r9d
    00000e48: 	cmpl	0x34(%rsp), %r15d
    00000e4d: 	jle	.Ltmp296 # Offset: 3661
    00000e53: 	cvttsd2si	init_value(%rip), %eax
    00000e5b: 	movq	0xf0(%rsp), %rdi
    00000e63: 	addl	$0x2, %eax
    00000e66: 	movb	%al, (%rdi)
    00000e68: 	addl	%eax, %r9d
    00000e6b: 	cmpl	0x38(%rsp), %r15d
    00000e70: 	jle	.Ltmp296 # Offset: 3696
    00000e76: 	cvttsd2si	init_value(%rip), %eax
    00000e7e: 	movq	0x108(%rsp), %rdi
    00000e86: 	addl	$0x2, %eax
    00000e89: 	movb	%al, (%rdi)
    00000e8b: 	addl	%eax, %r9d
    00000e8e: 	cmpl	0x3c(%rsp), %r15d
    00000e93: 	jle	.Ltmp296 # Offset: 3731
    00000e99: 	cvttsd2si	init_value(%rip), %eax
    00000ea1: 	movq	0x120(%rsp), %rcx
    00000ea9: 	addl	$0x2, %eax
    00000eac: 	movb	%al, (%rcx)
    00000eae: 	addl	%eax, %r9d
    00000eb1: 	cmpl	0x44(%rsp), %r15d
    00000eb6: 	jle	.Ltmp296 # Offset: 3766
    00000ebc: 	cvttsd2si	init_value(%rip), %eax
    00000ec4: 	movq	0x138(%rsp), %rsi
    00000ecc: 	addl	$0x2, %eax
    00000ecf: 	movb	%al, (%rsi)
    00000ed1: 	addl	%eax, %r9d
    00000ed4: 	cmpl	0x60(%rsp), %r15d
    00000ed9: 	jle	.Ltmp296 # Offset: 3801
    00000edf: 	cvttsd2si	init_value(%rip), %eax
    00000ee7: 	movq	0x150(%rsp), %rdi
    00000eef: 	addl	$0x2, %eax
    00000ef2: 	movb	%al, (%rdi)
    00000ef4: 	addl	%eax, %r9d
    00000ef7: 	cmpl	0x64(%rsp), %r15d
    00000efc: 	jle	.Ltmp296 # Offset: 3836
    00000f02: 	cvttsd2si	init_value(%rip), %eax
    00000f0a: 	movq	0x168(%rsp), %rsi
    00000f12: 	addl	$0x2, %eax
    00000f15: 	movb	%al, (%rsi)
    00000f17: 	addl	%eax, %r9d
    00000f1a: 	cmpl	0x98(%rsp), %r15d
    00000f22: 	jle	.Ltmp296 # Offset: 3874
    00000f28: 	cvttsd2si	init_value(%rip), %eax
    00000f30: 	movq	0x180(%rsp), %rdi
    00000f38: 	addl	$0x2, %eax
    00000f3b: 	movb	%al, (%rdi)
    00000f3d: 	addl	%eax, %r9d
    00000f40: 	cmpl	0x9c(%rsp), %r15d
    00000f48: 	jle	.Ltmp296 # Offset: 3912
    00000f4a: 	cvttsd2si	init_value(%rip), %eax
    00000f52: 	movq	0x198(%rsp), %rdi
    00000f5a: 	addl	$0x2, %eax
    00000f5d: 	movb	%al, (%rdi)
    00000f5f: 	addl	%eax, %r9d
    00000f62: 	cmpl	0xd0(%rsp), %r15d
    00000f6a: 	jle	.Ltmp296 # Offset: 3946
    00000f6c: 	cvttsd2si	init_value(%rip), %eax
    00000f74: 	movq	0x1b0(%rsp), %rsi
    00000f7c: 	addl	$0x2, %eax
    00000f7f: 	movb	%al, (%rsi)
    00000f81: 	addl	%eax, %r9d
    00000f84: 	cmpl	0xd4(%rsp), %r15d
    00000f8c: 	jle	.Ltmp296 # Offset: 3980
    00000f8e: 	cvttsd2si	init_value(%rip), %eax
    00000f96: 	movq	0x1c8(%rsp), %rdi
    00000f9e: 	addl	$0x2, %eax
    00000fa1: 	movb	%al, (%rdi)
    00000fa3: 	addl	%eax, %r9d
    00000fa6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp296:
    00000fb0: 	cvttsd2si	init_value(%rip), %ebx
    00000fb8: 	movb	%r9b, 0x20(%rsp)
    00000fbd: 	notl	%ebx
    00000fbf: 	leal	(%rbx,%rbx), %eax
    00000fc2: 	cmpb	%r9b, %al
    00000fc5: 	movb	%al, 0x18(%rsp)
    00000fc9: 	je	.Ltmp305 # Offset: 4041
    00000fcf: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbx
    00000fd6: 	movl	$0x5, %edx
    00000fdb: 	leaq	DATAat0x35004(%rip), %rsi
    00000fe2: 	movq	%rbx, %rdi
    00000fe5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4069
    00000fea: 	cmpq	$0x0, 0x28(%rsp)
    00000ff0: 	movzbl	0x20(%rsp), %r9d
    00000ff6: 	je	.Ltmp306 # Offset: 4086
    00000ffc: 	movq	0x28(%rsp), %rdi
    00001001: 	movb	%r9b, 0x20(%rsp)
    00001006: 	callq	strlen@PLT # Offset: 4102
    0000100b: 	movq	0x28(%rsp), %rsi
    00001010: 	movq	%rbx, %rdi
    00001013: 	movq	%rax, %rdx
    00001016: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4118
    0000101b: 	movzbl	0x20(%rsp), %r9d
.Ltmp315:
    00001021: 	movq	%rbx, %rdi
    00001024: 	movl	$0xd, %edx
    00001029: 	movb	%r9b, 0x20(%rsp)
    0000102e: 	leaq	DATAat0x3500a(%rip), %rsi
    00001035: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4149
    0000103a: 	movzbl	0x20(%rsp), %r9d
    00001040: 	movq	%rbx, %rdi
    00001043: 	movl	$0x1, %edx
    00001048: 	movb	%r9b, 0x4b7(%rsp)
    00001050: 	leaq	0x4b7(%rsp), %r9
    00001058: 	movq	%r9, %rsi
    0000105b: 	movq	%r9, 0x48(%rsp)
    00001060: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4192
    00001065: 	movl	$0xb, %edx
    0000106a: 	leaq	DATAat0x35018(%rip), %rsi
    00001071: 	movq	%rax, %rdi
    00001074: 	movq	%rax, 0x20(%rsp)
    00001079: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4217
    0000107e: 	movzbl	0x18(%rsp), %eax
    00001083: 	movq	0x20(%rsp), %rdi
    00001088: 	movl	$0x1, %edx
    0000108d: 	movq	0x48(%rsp), %rsi
    00001092: 	movb	%al, 0x4b7(%rsp)
    00001099: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4249
    0000109e: 	movq	%rax, %rbx
    000010a1: 	movq	(%rax), %rax
    000010a4: 	movq	-0x18(%rax), %rax
    000010a8: 	movq	0xf0(%rbx,%rax), %rdi
    000010b0: 	testq	%rdi, %rdi
    000010b3: 	je	.Ltmp307 # Offset: 4275
    000010b9: 	cmpb	$0x0, 0x38(%rdi)
    000010bd: 	je	.Ltmp308 # Offset: 4285
    000010c3: 	movsbl	0x43(%rdi), %esi
.Ltmp311:
    000010c7: 	movq	%rbx, %rdi
    000010ca: 	callq	_ZNSo3putEc@PLT # Offset: 4298
    000010cf: 	movq	%rax, %rdi
    000010d2: 	callq	_ZNSo5flushEv@PLT # Offset: 4306
    000010d7: 	movdqa	DATAat0x36f20(%rip), %xmm2
.Ltmp305:
    000010df: 	addl	$0x1, (%rsp)
    000010e3: 	movl	(%rsp), %eax
    000010e6: 	cmpl	%eax, iterations(%rip)
    000010ec: 	jg	.Ltmp309 # Offset: 4332
.Ltmp295:
    000010f2: 	callq	clock@PLT # Offset: 4338
    000010f7: 	movq	%rax, end_time(%rip)
    000010fe: 	movq	0x4b8(%rsp), %rdx
    00001106: 	subq	%fs:0x28, %rdx
    0000110f: 	jne	.Ltmp310 # Offset: 4367
    00001115: 	subq	start_time(%rip), %rax
    0000111c: 	pxor	%xmm0, %xmm0
    00001120: 	movq	0x28(%rsp), %rdi
    00001125: 	cvtsi2sd	%rax, %xmm0
    0000112a: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00001132: 	addq	$0x4c8, %rsp
    00001139: 	popq	%rbx
    0000113a: 	popq	%rbp
    0000113b: 	popq	%r12
    0000113d: 	popq	%r13
    0000113f: 	popq	%r14
    00001141: 	popq	%r15
    00001143: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 4419
    00001148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp308:
    00001150: 	movq	%rdi, 0x18(%rsp)
    00001155: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 4437
    0000115a: 	movq	0x18(%rsp), %rdi
    0000115f: 	movl	$0xa, %esi
    00001164: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000116b: 	movq	(%rdi), %rax
    0000116e: 	movq	0x30(%rax), %rax
    00001172: 	cmpq	%rdx, %rax
    00001175: 	je	.Ltmp311 # Offset: 4469
    0000117b: 	callq	*%rax # Offset: 4475
    0000117d: 	movsbl	%al, %esi
    00001180: 	jmp	.Ltmp311 # Offset: 4480
    00001185: 	nopl	(%rax) # Size: 3
.Ltmp303:
    00001188: 	xorl	%edx, %edx
    0000118a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp312:
    00001190: 	cvttsd2si	init_value(%rip), %eax
    00001198: 	addl	$0x2, %eax
    0000119b: 	movb	%al, 0x2(%r14,%rdx)
    000011a0: 	addq	$0x3, %rdx
    000011a4: 	addl	%eax, %r9d
    000011a7: 	cmpl	%edx, %r15d
    000011aa: 	jg	.Ltmp312 # Offset: 4522
    000011ac: 	jmp	.Ltmp296 # Offset: 4524
    000011b1: 	nopl	(%rax) # Size: 7
.Ltmp300:
    000011b8: 	xorl	%edx, %edx
    000011ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp313:
    000011c0: 	cvttsd2si	init_value(%rip), %eax
    000011c8: 	addl	$0x1, %eax
    000011cb: 	movb	%al, 0x1(%r14,%rdx)
    000011d0: 	addq	$0x3, %rdx
    000011d4: 	addl	%eax, %r9d
    000011d7: 	cmpl	%edx, %r15d
    000011da: 	jg	.Ltmp313 # Offset: 4570
    000011dc: 	jmp	.Ltmp302 # Offset: 4572
    000011e1: 	nopl	(%rax) # Size: 7
.Ltmp297:
    000011e8: 	xorl	%eax, %eax
    000011ea: 	xorl	%r9d, %r9d
    000011ed: 	nopl	(%rax) # Size: 3
.Ltmp314:
    000011f0: 	cvttsd2si	init_value(%rip), %edx
    000011f8: 	movb	%dl, (%r14,%rax)
    000011fc: 	addq	$0x3, %rax
    00001200: 	addl	%edx, %r9d
    00001203: 	cmpl	%eax, %r15d
    00001206: 	jg	.Ltmp314 # Offset: 4614
    00001208: 	jmp	.Ltmp299 # Offset: 4616
    0000120d: 	nopl	(%rax) # Size: 3
.Ltmp306:
    00001210: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001217: 	movq	-0x18(%rax), %rdi
    0000121b: 	addq	%rbx, %rdi
    0000121e: 	movl	0x20(%rdi), %esi
    00001221: 	orl	$0x1, %esi
    00001224: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4644
    00001229: 	movzbl	0x20(%rsp), %r9d
    0000122f: 	jmp	.Ltmp315 # Offset: 4655
.Ltmp310:
    00001234: 	callq	__stack_chk_fail@PLT # Offset: 4660
.Ltmp307:
    00001239: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 4665
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_for_loop_3IhEvPT_iPKc"

Binary Function "_Z15test_loop_4_optIhEvPT_iPKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x9990
  Size        : 0x4e8
  MaxSize     : 0x4f0
  Offset      : 0x9990
  Section     : .text
  Orc Section : .local.text._Z15test_loop_4_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rdi, (%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x38(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp316 # Offset: 66
    00000048: 	leal	-0x4(%rbx), %edx
    0000004b: 	leal	-0x3(%rbx), %ebp
    0000004e: 	movq	%r14, %rbx
    00000051: 	movdqa	DATAat0x36f20(%rip), %xmm3
    00000059: 	movl	%edx, %ecx
    0000005b: 	shrl	$0x2, %ecx
    0000005e: 	leal	0x1(%rcx), %esi
    00000061: 	leaq	(%r14,%rsi,4), %rdi
    00000065: 	leaq	init_value(%rip), %rsi
    0000006c: 	cmpq	%rsi, %rdi
    0000006f: 	setbe	%r14b
    00000073: 	addq	$0x8, %rsi
    00000077: 	cmpq	%rsi, %rbx
    0000007a: 	setae	%sil
    0000007e: 	orl	%esi, %r14d
    00000081: 	cmpl	$0x3f, %edx
    00000084: 	seta	%sil
    00000088: 	shrl	$0x6, %edx
    0000008b: 	andl	%esi, %r14d
    0000008e: 	leal	-0x1(%rdx), %esi
    00000091: 	shll	$0x6, %edx
    00000094: 	movslq	%edx, %r12
    00000097: 	shlq	$0x6, %rsi
    0000009b: 	movb	%r14b, 0x13(%rsp)
    000000a0: 	addq	%rbx, %r12
    000000a3: 	leaq	0x40(%rbx,%rsi), %r14
    000000a8: 	movl	%edx, 0x14(%rsp)
    000000ac: 	leaq	0x4(%rbx,%rcx,4), %rbx
    000000b1: 	movq	%r12, 0x8(%rsp)
    000000b6: 	movq	%r14, %rsi
    000000b9: 	movl	%ebp, %r14d
    000000bc: 	movq	%rbx, 0x28(%rsp)
    000000c1: 	movq	%rsi, %rbp
    000000c4: 	xorl	%ebx, %ebx
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp322:
    000000d0: 	testl	%r14d, %r14d
    000000d3: 	jle	.Ltmp317 # Offset: 211
    000000d9: 	cmpb	$0x0, 0x13(%rsp)
    000000de: 	je	.Ltmp318 # Offset: 222
    000000e4: 	movsd	init_value(%rip), %xmm0
    000000ec: 	movdqa	%xmm3, %xmm7
    000000f0: 	movq	(%rsp), %rax
    000000f4: 	movdqa	DATAat0x36f30(%rip), %xmm8
    000000fd: 	unpcklpd	%xmm0, %xmm0
    00000101: 	cvttpd2dq	%xmm0, %xmm0
    00000105: 	punpcklqdq	%xmm0, %xmm0
    00000109: 	movdqa	%xmm0, %xmm1
    0000010d: 	punpckhwd	%xmm0, %xmm1
    00000111: 	punpcklwd	%xmm0, %xmm0
    00000115: 	movdqa	%xmm0, %xmm2
    00000119: 	punpcklwd	%xmm1, %xmm0
    0000011d: 	punpckhwd	%xmm1, %xmm2
    00000121: 	movdqa	DATAat0x36f40(%rip), %xmm1
    00000129: 	punpcklwd	%xmm2, %xmm0
    0000012d: 	pand	%xmm3, %xmm0
    00000131: 	packuswb	%xmm0, %xmm0
    00000135: 	paddb	%xmm0, %xmm8
    0000013a: 	paddb	%xmm0, %xmm1
    0000013e: 	movdqa	%xmm0, %xmm4
    00000142: 	punpcklbw	%xmm1, %xmm4
    00000146: 	punpckhbw	%xmm1, %xmm0
    0000014a: 	movdqa	%xmm8, %xmm2
    0000014f: 	movdqa	%xmm8, %xmm1
    00000154: 	punpcklbw	%xmm8, %xmm2
    00000159: 	movdqa	%xmm4, %xmm6
    0000015d: 	punpckhbw	%xmm8, %xmm1
    00000162: 	movdqa	%xmm0, %xmm5
    00000166: 	punpcklbw	%xmm2, %xmm6
    0000016a: 	punpckhbw	%xmm2, %xmm4
    0000016e: 	punpcklbw	%xmm1, %xmm5
    00000172: 	punpckhbw	%xmm1, %xmm0
    00000176: 	movdqa	%xmm3, %xmm2
    0000017a: 	movdqa	%xmm3, %xmm1
    0000017e: 	pand	%xmm5, %xmm7
    00000182: 	pand	%xmm4, %xmm2
    00000186: 	pand	%xmm6, %xmm1
    0000018a: 	movdqa	%xmm4, %xmm9
    0000018f: 	packuswb	%xmm2, %xmm1
    00000193: 	movdqa	%xmm3, %xmm2
    00000197: 	movdqa	%xmm0, %xmm10
    0000019c: 	psrlw	$0x8, %xmm9
    000001a2: 	psrlw	$0x8, %xmm10
    000001a8: 	pand	%xmm0, %xmm2
    000001ac: 	packuswb	%xmm2, %xmm7
    000001b0: 	movdqa	%xmm6, %xmm2
    000001b4: 	psrlw	$0x8, %xmm2
    000001b9: 	packuswb	%xmm9, %xmm2
    000001be: 	movdqa	%xmm5, %xmm9
    000001c3: 	psrlw	$0x8, %xmm9
    000001c9: 	pand	%xmm3, %xmm2
    000001cd: 	packuswb	%xmm10, %xmm9
    000001d2: 	pand	%xmm3, %xmm9
    000001d7: 	packuswb	%xmm9, %xmm2
    000001dc: 	movdqa	%xmm3, %xmm9
    000001e1: 	paddb	%xmm8, %xmm2
    000001e6: 	movdqa	%xmm3, %xmm8
    000001eb: 	pand	%xmm7, %xmm9
    000001f0: 	pand	%xmm1, %xmm8
    000001f5: 	psrlw	$0x8, %xmm7
    000001fa: 	psrlw	$0x8, %xmm1
    000001ff: 	packuswb	%xmm9, %xmm8
    00000204: 	packuswb	%xmm7, %xmm1
    00000208: 	paddb	%xmm8, %xmm1
    0000020d: 	paddb	%xmm1, %xmm2
    00000211: 	pxor	%xmm1, %xmm1
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp319:
    00000218: 	movups	%xmm6, (%rax)
    0000021b: 	addq	$0x40, %rax
    0000021f: 	paddb	%xmm2, %xmm1
    00000223: 	movups	%xmm4, -0x30(%rax)
    00000227: 	movups	%xmm5, -0x20(%rax)
    0000022b: 	movups	%xmm0, -0x10(%rax)
    0000022f: 	cmpq	%rbp, %rax
    00000232: 	jne	.Ltmp319 # Offset: 562
    00000234: 	movdqa	%xmm1, %xmm0
    00000238: 	movq	0x8(%rsp), %rax
    0000023d: 	movl	0x14(%rsp), %esi
    00000241: 	psrldq	$0x8, %xmm0
    00000246: 	paddb	%xmm0, %xmm1
    0000024a: 	pxor	%xmm0, %xmm0
    0000024e: 	movq	%rax, %rdx
    00000251: 	subl	%eax, %esi
    00000253: 	psadbw	%xmm0, %xmm1
    00000257: 	movd	%xmm1, %r12d
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp320:
    00000260: 	cvttsd2si	init_value(%rip), %r8d
    00000269: 	addq	$0x4, %rdx
    0000026d: 	movb	%r8b, -0x4(%rdx)
    00000271: 	cvttsd2si	init_value(%rip), %edi
    00000279: 	addl	$0x1, %edi
    0000027c: 	movb	%dil, -0x3(%rdx)
    00000280: 	cvttsd2si	init_value(%rip), %ecx
    00000288: 	addl	$0x2, %ecx
    0000028b: 	movb	%cl, -0x2(%rdx)
    0000028e: 	cvttsd2si	init_value(%rip), %eax
    00000296: 	addl	$0x1, %eax
    00000299: 	movb	%al, -0x1(%rdx)
    0000029c: 	addl	%r8d, %eax
    0000029f: 	addl	%edi, %eax
    000002a1: 	addl	%ecx, %eax
    000002a3: 	addl	%eax, %r12d
    000002a6: 	leal	(%rsi,%rdx), %eax
    000002a9: 	cmpl	%r14d, %eax
    000002ac: 	jl	.Ltmp320 # Offset: 684
.Ltmp328:
    000002ae: 	movl	iterations(%rip), %eax
    000002b4: 	testb	%r12b, %r12b
    000002b7: 	jne	.Ltmp321 # Offset: 695
.Ltmp317:
    000002b9: 	addl	$0x1, %ebx
    000002bc: 	cmpl	%eax, %ebx
    000002be: 	jl	.Ltmp322 # Offset: 702
.Ltmp316:
    000002c4: 	callq	clock@PLT # Offset: 708
    000002c9: 	movq	%rax, end_time(%rip)
    000002d0: 	movq	0x38(%rsp), %rdx
    000002d5: 	subq	%fs:0x28, %rdx
    000002de: 	jne	.Ltmp323 # Offset: 734
    000002e4: 	subq	start_time(%rip), %rax
    000002eb: 	pxor	%xmm0, %xmm0
    000002ef: 	movq	%r15, %rdi
    000002f2: 	cvtsi2sd	%rax, %xmm0
    000002f7: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002ff: 	addq	$0x48, %rsp
    00000303: 	popq	%rbx
    00000304: 	popq	%rbp
    00000305: 	popq	%r12
    00000307: 	popq	%r13
    00000309: 	popq	%r14
    0000030b: 	popq	%r15
    0000030d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 781
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp321:
    00000318: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000031f: 	movl	$0x5, %edx
    00000324: 	leaq	DATAat0x35004(%rip), %rsi
    0000032b: 	movq	%r13, %rdi
    0000032e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 814
    00000333: 	testq	%r15, %r15
    00000336: 	je	.Ltmp324 # Offset: 822
    0000033c: 	movq	%r15, %rdi
    0000033f: 	callq	strlen@PLT # Offset: 831
    00000344: 	movq	%r15, %rsi
    00000347: 	movq	%r13, %rdi
    0000034a: 	movq	%rax, %rdx
    0000034d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 845
.Ltmp330:
    00000352: 	movl	$0xd, %edx
    00000357: 	leaq	DATAat0x3500a(%rip), %rsi
    0000035e: 	movq	%r13, %rdi
    00000361: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 865
    00000366: 	leaq	0x37(%rsp), %r11
    0000036b: 	movl	$0x1, %edx
    00000370: 	movq	%r13, %rdi
    00000373: 	movq	%r11, %rsi
    00000376: 	movq	%r11, 0x20(%rsp)
    0000037b: 	movb	%r12b, 0x37(%rsp)
    00000380: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 896
    00000385: 	movl	$0xb, %edx
    0000038a: 	leaq	DATAat0x35018(%rip), %rsi
    00000391: 	movq	%rax, %rdi
    00000394: 	movq	%rax, 0x18(%rsp)
    00000399: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 921
    0000039e: 	movq	0x18(%rsp), %rdi
    000003a3: 	movq	0x20(%rsp), %rsi
    000003a8: 	movl	$0x1, %edx
    000003ad: 	movb	$0x0, 0x37(%rsp)
    000003b2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 946
    000003b7: 	movq	%rax, %r10
    000003ba: 	movq	(%rax), %rax
    000003bd: 	movq	-0x18(%rax), %rax
    000003c1: 	movq	0xf0(%r10,%rax), %rdi
    000003c9: 	testq	%rdi, %rdi
    000003cc: 	je	.Ltmp325 # Offset: 972
    000003d2: 	cmpb	$0x0, 0x38(%rdi)
    000003d6: 	je	.Ltmp326 # Offset: 982
    000003dc: 	movsbl	0x43(%rdi), %esi
.Ltmp329:
    000003e0: 	movq	%r10, %rdi
    000003e3: 	callq	_ZNSo3putEc@PLT # Offset: 995
    000003e8: 	movq	%rax, %rdi
    000003eb: 	callq	_ZNSo5flushEv@PLT # Offset: 1003
    000003f0: 	movl	iterations(%rip), %eax
    000003f6: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000003fe: 	jmp	.Ltmp317 # Offset: 1022
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp318:
    00000408: 	movq	(%rsp), %rdx
    0000040c: 	movq	0x28(%rsp), %rdi
    00000411: 	xorl	%r12d, %r12d
    00000414: 	nopl	(%rax) # Size: 4
.Ltmp327:
    00000418: 	cvttsd2si	init_value(%rip), %r8d
    00000421: 	addq	$0x4, %rdx
    00000425: 	movb	%r8b, -0x4(%rdx)
    00000429: 	cvttsd2si	init_value(%rip), %esi
    00000431: 	addl	$0x1, %esi
    00000434: 	movb	%sil, -0x3(%rdx)
    00000438: 	cvttsd2si	init_value(%rip), %ecx
    00000440: 	addl	$0x2, %ecx
    00000443: 	movb	%cl, -0x2(%rdx)
    00000446: 	cvttsd2si	init_value(%rip), %eax
    0000044e: 	addl	$0x1, %eax
    00000451: 	movb	%al, -0x1(%rdx)
    00000454: 	addl	%r8d, %eax
    00000457: 	addl	%esi, %eax
    00000459: 	addl	%ecx, %eax
    0000045b: 	addl	%eax, %r12d
    0000045e: 	cmpq	%rdi, %rdx
    00000461: 	jne	.Ltmp327 # Offset: 1121
    00000463: 	jmp	.Ltmp328 # Offset: 1123
    00000468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp326:
    00000470: 	movq	%r10, 0x20(%rsp)
    00000475: 	movq	%rdi, 0x18(%rsp)
    0000047a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1146
    0000047f: 	movq	0x18(%rsp), %rdi
    00000484: 	movq	0x20(%rsp), %r10
    00000489: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000490: 	movl	$0xa, %esi
    00000495: 	movq	(%rdi), %rax
    00000498: 	movq	0x30(%rax), %rax
    0000049c: 	cmpq	%rdx, %rax
    0000049f: 	je	.Ltmp329 # Offset: 1183
    000004a5: 	movq	%r10, 0x18(%rsp)
    000004aa: 	callq	*%rax # Offset: 1194
    000004ac: 	movq	0x18(%rsp), %r10
    000004b1: 	movsbl	%al, %esi
    000004b4: 	jmp	.Ltmp329 # Offset: 1204
    000004b9: 	nopl	(%rax) # Size: 7
.Ltmp324:
    000004c0: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004c7: 	movq	-0x18(%rax), %rdi
    000004cb: 	addq	%r13, %rdi
    000004ce: 	movl	0x20(%rdi), %esi
    000004d1: 	orl	$0x1, %esi
    000004d4: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1236
    000004d9: 	jmp	.Ltmp330 # Offset: 1241
.Ltmp325:
    000004de: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1246
.Ltmp323:
    000004e3: 	callq	__stack_chk_fail@PLT # Offset: 1251
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_loop_4_optIhEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked4IhEvPT_iPKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x9e80
  Size        : 0x25ac
  MaxSize     : 0x25b0
  Offset      : 0x9e80
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%esi, %ebx
    00000010: 	subq	$0x7e8, %rsp
    00000017: 	movq	%rdx, 0x38(%rsp)
    0000001c: 	movq	%rdi, (%rsp)
    00000020: 	movl	%esi, 0x48(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x7d8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp331 # Offset: 75
    00000051: 	movl	%ebx, %eax
    00000053: 	leal	-0x1003(%rbx), %edi
    00000059: 	movq	(%rsp), %rbp
    0000005d: 	leal	-0x3(%rbx), %r15d
    00000061: 	subl	$0x1004, %eax
    00000066: 	movl	%edi, 0x34(%rsp)
    0000006a: 	movdqa	DATAat0x36f20(%rip), %xmm3
    00000072: 	andl	$0xfffff000, %eax
    00000077: 	movl	$0x0, 0x40(%rsp)
    0000007f: 	addl	$0x1000, %eax
    00000084: 	movl	%eax, 0x44(%rsp)
.Ltmp359:
    00000088: 	movl	0x34(%rsp), %eax
    0000008c: 	testl	%eax, %eax
    0000008e: 	jle	.Ltmp332 # Offset: 142
    00000094: 	movq	$0x4, 0x10(%rsp)
    0000009d: 	movq	%rbp, %rdi
    000000a0: 	xorl	%esi, %esi
    000000a2: 	xorl	%ebx, %ebx
    000000a4: 	leaq	0x3(%rbp), %rax
    000000a8: 	movdqa	DATAat0x36f30(%rip), %xmm2
    000000b0: 	movdqa	DATAat0x36f20(%rip), %xmm1
    000000b8: 	movl	%r15d, 0x4c(%rsp)
    000000bd: 	leaq	0x2(%rbp), %r11
    000000c1: 	leaq	0x1(%rbp), %r12
    000000c5: 	pxor	%xmm5, %xmm5
    000000c9: 	movq	%rax, %r15
    000000cc: 	movdqa	DATAat0x36f40(%rip), %xmm4
    000000d4: 	movl	$0x1000, %r13d
.Ltmp345:
    000000da: 	movl	%esi, %r10d
    000000dd: 	cmpq	%r13, %rsi
    000000e0: 	jae	.Ltmp333 # Offset: 224
    000000e6: 	cmpq	0x10(%rsp), %r13
    000000eb: 	leaq	0x1(%rsi), %rax
    000000ef: 	leaq	init_value(%rip), %rcx
    000000f6: 	sbbq	%r8, %r8
    000000f9: 	movq	%rax, 0x20(%rsp)
    000000fe: 	andq	$-0x3ff, %r8
    00000105: 	addq	$0x400, %r8
    0000010c: 	leaq	-0x1(%r8), %rdx
    00000110: 	leaq	(%rax,%rdx,4), %rax
    00000114: 	addq	%rbp, %rax
    00000117: 	cmpq	%rcx, %rax
    0000011a: 	leaq	iterations(%rip), %rax
    00000121: 	setbe	%cl
    00000124: 	cmpq	%rax, %rdi
    00000127: 	setae	%al
    0000012a: 	orb	%cl, %al
    0000012c: 	je	.Ltmp334 # Offset: 300
    00000132: 	cmpq	$0xe, %rdx
    00000136: 	jbe	.Ltmp334 # Offset: 310
    0000013c: 	movsd	init_value(%rip), %xmm6
    00000144: 	movq	%r8, %r9
    00000147: 	movq	%rdi, %rax
    0000014a: 	pxor	%xmm7, %xmm7
    0000014e: 	shrq	$0x4, %r9
    00000152: 	unpcklpd	%xmm6, %xmm6
    00000156: 	shlq	$0x6, %r9
    0000015a: 	cvttpd2dq	%xmm6, %xmm6
    0000015e: 	punpcklqdq	%xmm6, %xmm6
    00000162: 	addq	%rdi, %r9
    00000165: 	movdqa	%xmm6, %xmm8
    0000016a: 	punpckhwd	%xmm6, %xmm8
    0000016f: 	nop # Size: 1
.Ltmp335:
    00000170: 	movdqa	%xmm6, %xmm0
    00000174: 	addq	$0x40, %rax
    00000178: 	punpcklwd	%xmm6, %xmm0
    0000017c: 	movdqa	%xmm0, %xmm9
    00000181: 	punpcklwd	%xmm8, %xmm0
    00000186: 	punpckhwd	%xmm8, %xmm9
    0000018b: 	punpcklwd	%xmm9, %xmm0
    00000190: 	pand	%xmm1, %xmm0
    00000194: 	packuswb	%xmm0, %xmm0
    00000198: 	movd	%xmm0, %ecx
    0000019c: 	paddb	%xmm0, %xmm7
    000001a0: 	movb	%cl, -0x40(%rax)
    000001a3: 	movaps	%xmm0, 0x7c0(%rsp)
    000001ab: 	movzbl	0x7c1(%rsp), %ecx
    000001b3: 	movb	%cl, -0x3c(%rax)
    000001b6: 	movaps	%xmm0, 0x7b0(%rsp)
    000001be: 	movzbl	0x7b2(%rsp), %ecx
    000001c6: 	movb	%cl, -0x38(%rax)
    000001c9: 	movaps	%xmm0, 0x7a0(%rsp)
    000001d1: 	movzbl	0x7a3(%rsp), %ecx
    000001d9: 	movb	%cl, -0x34(%rax)
    000001dc: 	movaps	%xmm0, 0x790(%rsp)
    000001e4: 	movzbl	0x794(%rsp), %ecx
    000001ec: 	movb	%cl, -0x30(%rax)
    000001ef: 	movaps	%xmm0, 0x780(%rsp)
    000001f7: 	movzbl	0x785(%rsp), %ecx
    000001ff: 	movb	%cl, -0x2c(%rax)
    00000202: 	movaps	%xmm0, 0x770(%rsp)
    0000020a: 	movzbl	0x776(%rsp), %ecx
    00000212: 	movb	%cl, -0x28(%rax)
    00000215: 	movaps	%xmm0, 0x760(%rsp)
    0000021d: 	movzbl	0x767(%rsp), %ecx
    00000225: 	movb	%cl, -0x24(%rax)
    00000228: 	movaps	%xmm0, 0x750(%rsp)
    00000230: 	movzbl	0x758(%rsp), %ecx
    00000238: 	movb	%cl, -0x20(%rax)
    0000023b: 	movaps	%xmm0, 0x740(%rsp)
    00000243: 	movzbl	0x749(%rsp), %ecx
    0000024b: 	movb	%cl, -0x1c(%rax)
    0000024e: 	movaps	%xmm0, 0x730(%rsp)
    00000256: 	movzbl	0x73a(%rsp), %ecx
    0000025e: 	movb	%cl, -0x18(%rax)
    00000261: 	movaps	%xmm0, 0x720(%rsp)
    00000269: 	movzbl	0x72b(%rsp), %ecx
    00000271: 	movb	%cl, -0x14(%rax)
    00000274: 	movaps	%xmm0, 0x710(%rsp)
    0000027c: 	movzbl	0x71c(%rsp), %ecx
    00000284: 	movb	%cl, -0x10(%rax)
    00000287: 	movaps	%xmm0, 0x700(%rsp)
    0000028f: 	movzbl	0x70d(%rsp), %ecx
    00000297: 	movb	%cl, -0xc(%rax)
    0000029a: 	movaps	%xmm0, 0x6f0(%rsp)
    000002a2: 	movzbl	0x6fe(%rsp), %ecx
    000002aa: 	movb	%cl, -0x8(%rax)
    000002ad: 	movaps	%xmm0, 0x6e0(%rsp)
    000002b5: 	movzbl	0x6ef(%rsp), %ecx
    000002bd: 	movb	%cl, -0x4(%rax)
    000002c0: 	cmpq	%r9, %rax
    000002c3: 	jne	.Ltmp335 # Offset: 707
    000002c9: 	movdqa	%xmm7, %xmm0
    000002cd: 	movq	%r8, %rcx
    000002d0: 	psrldq	$0x8, %xmm0
    000002d5: 	andq	$-0x10, %rcx
    000002d9: 	paddb	%xmm0, %xmm7
    000002dd: 	leaq	(%rsi,%rcx,4), %r9
    000002e1: 	psadbw	%xmm5, %xmm7
    000002e5: 	movd	%xmm7, %eax
    000002e9: 	addl	%eax, %ebx
    000002eb: 	leal	(%r10,%rcx,4), %eax
    000002ef: 	cmpq	%rcx, %r8
    000002f2: 	je	.Ltmp336 # Offset: 754
    000002f8: 	cvttsd2si	init_value(%rip), %r8d
    00000301: 	movb	%r8b, (%rbp,%r9)
    00000306: 	addl	%r8d, %ebx
    00000309: 	leal	0x4(%rax), %r8d
    0000030d: 	movslq	%r8d, %r8
    00000310: 	subq	%rcx, %rdx
    00000313: 	je	.Ltmp336 # Offset: 787
    00000319: 	cvttsd2si	init_value(%rip), %ecx
    00000321: 	movb	%cl, (%rbp,%r8)
    00000326: 	addl	%ecx, %ebx
    00000328: 	leal	0x8(%rax), %ecx
    0000032b: 	movslq	%ecx, %rcx
    0000032e: 	cmpq	$0x1, %rdx
    00000332: 	je	.Ltmp336 # Offset: 818
    00000338: 	cvttsd2si	init_value(%rip), %r8d
    00000341: 	movb	%r8b, (%rbp,%rcx)
    00000346: 	leal	0xc(%rax), %ecx
    00000349: 	addl	%r8d, %ebx
    0000034c: 	movslq	%ecx, %rcx
    0000034f: 	cmpq	$0x2, %rdx
    00000353: 	je	.Ltmp336 # Offset: 851
    00000359: 	cvttsd2si	init_value(%rip), %r8d
    00000362: 	movb	%r8b, (%rbp,%rcx)
    00000367: 	leal	0x10(%rax), %ecx
    0000036a: 	addl	%r8d, %ebx
    0000036d: 	movslq	%ecx, %rcx
    00000370: 	cmpq	$0x3, %rdx
    00000374: 	je	.Ltmp336 # Offset: 884
    0000037a: 	cvttsd2si	init_value(%rip), %r8d
    00000383: 	movb	%r8b, (%rbp,%rcx)
    00000388: 	leal	0x14(%rax), %ecx
    0000038b: 	addl	%r8d, %ebx
    0000038e: 	movslq	%ecx, %rcx
    00000391: 	cmpq	$0x4, %rdx
    00000395: 	je	.Ltmp336 # Offset: 917
    0000039b: 	cvttsd2si	init_value(%rip), %r8d
    000003a4: 	movb	%r8b, (%rbp,%rcx)
    000003a9: 	leal	0x18(%rax), %ecx
    000003ac: 	addl	%r8d, %ebx
    000003af: 	movslq	%ecx, %rcx
    000003b2: 	cmpq	$0x5, %rdx
    000003b6: 	je	.Ltmp336 # Offset: 950
    000003bc: 	cvttsd2si	init_value(%rip), %r8d
    000003c5: 	movb	%r8b, (%rbp,%rcx)
    000003ca: 	leal	0x1c(%rax), %ecx
    000003cd: 	addl	%r8d, %ebx
    000003d0: 	movslq	%ecx, %rcx
    000003d3: 	cmpq	$0x6, %rdx
    000003d7: 	je	.Ltmp336 # Offset: 983
    000003dd: 	cvttsd2si	init_value(%rip), %r8d
    000003e6: 	movb	%r8b, (%rbp,%rcx)
    000003eb: 	leal	0x20(%rax), %ecx
    000003ee: 	addl	%r8d, %ebx
    000003f1: 	movslq	%ecx, %rcx
    000003f4: 	cmpq	$0x7, %rdx
    000003f8: 	je	.Ltmp336 # Offset: 1016
    000003fe: 	cvttsd2si	init_value(%rip), %r8d
    00000407: 	movb	%r8b, (%rbp,%rcx)
    0000040c: 	leal	0x24(%rax), %ecx
    0000040f: 	addl	%r8d, %ebx
    00000412: 	movslq	%ecx, %rcx
    00000415: 	cmpq	$0x8, %rdx
    00000419: 	je	.Ltmp336 # Offset: 1049
    0000041f: 	cvttsd2si	init_value(%rip), %r8d
    00000428: 	movb	%r8b, (%rbp,%rcx)
    0000042d: 	leal	0x28(%rax), %ecx
    00000430: 	addl	%r8d, %ebx
    00000433: 	movslq	%ecx, %rcx
    00000436: 	cmpq	$0x9, %rdx
    0000043a: 	je	.Ltmp336 # Offset: 1082
    00000440: 	cvttsd2si	init_value(%rip), %r8d
    00000449: 	movb	%r8b, (%rbp,%rcx)
    0000044e: 	leal	0x2c(%rax), %ecx
    00000451: 	addl	%r8d, %ebx
    00000454: 	movslq	%ecx, %rcx
    00000457: 	cmpq	$0xa, %rdx
    0000045b: 	je	.Ltmp336 # Offset: 1115
    0000045d: 	cvttsd2si	init_value(%rip), %r8d
    00000466: 	movb	%r8b, (%rbp,%rcx)
    0000046b: 	leal	0x30(%rax), %ecx
    0000046e: 	addl	%r8d, %ebx
    00000471: 	movslq	%ecx, %rcx
    00000474: 	cmpq	$0xb, %rdx
    00000478: 	je	.Ltmp336 # Offset: 1144
    0000047a: 	cvttsd2si	init_value(%rip), %r8d
    00000483: 	movb	%r8b, (%rbp,%rcx)
    00000488: 	leal	0x34(%rax), %ecx
    0000048b: 	addl	%r8d, %ebx
    0000048e: 	movslq	%ecx, %rcx
    00000491: 	cmpq	$0xc, %rdx
    00000495: 	je	.Ltmp336 # Offset: 1173
    00000497: 	cvttsd2si	init_value(%rip), %r8d
    000004a0: 	addl	$0x38, %eax
    000004a3: 	cltq
    000004a5: 	movb	%r8b, (%rbp,%rcx)
    000004aa: 	addl	%r8d, %ebx
    000004ad: 	cmpq	$0xd, %rdx
    000004b1: 	je	.Ltmp336 # Offset: 1201
    000004b3: 	cvttsd2si	init_value(%rip), %edx
    000004bb: 	movb	%dl, (%rbp,%rax)
    000004bf: 	addl	%edx, %ebx
.Ltmp336:
    000004c1: 	cmpq	0x10(%rsp), %r13
    000004c6: 	leaq	0x2(%rsi), %rcx
    000004ca: 	sbbq	%rdx, %rdx
    000004cd: 	movq	%rcx, 0x28(%rsp)
    000004d2: 	andq	$-0x3ff, %rdx
    000004d9: 	addq	$0x400, %rdx
    000004e0: 	leaq	-0x1(%rdx), %rax
    000004e4: 	cmpq	$0xe, %rax
    000004e8: 	leaq	(,%rax,4), %r14
    000004f0: 	seta	(%rsp)
    000004f4: 	addq	%r14, %rcx
    000004f7: 	movzbl	(%rsp), %r9d
    000004fc: 	addq	%rbp, %rcx
    000004ff: 	movq	%r14, 0x18(%rsp)
    00000504: 	leaq	init_value(%rip), %r14
    0000050b: 	cmpq	%r14, %rcx
    0000050e: 	leaq	0x8(%r14), %rcx
    00000512: 	setbe	%r8b
    00000516: 	cmpq	%rcx, %r12
    00000519: 	setae	%cl
    0000051c: 	orb	%r8b, %cl
    0000051f: 	je	.Ltmp337 # Offset: 1311
    00000525: 	testb	%r9b, %r9b
    00000528: 	je	.Ltmp337 # Offset: 1320
    0000052e: 	movsd	init_value(%rip), %xmm6
    00000536: 	movq	%rdx, %r9
    00000539: 	movq	%r12, %rcx
    0000053c: 	pxor	%xmm7, %xmm7
    00000540: 	shrq	$0x4, %r9
    00000544: 	unpcklpd	%xmm6, %xmm6
    00000548: 	shlq	$0x6, %r9
    0000054c: 	cvttpd2dq	%xmm6, %xmm6
    00000550: 	punpcklqdq	%xmm6, %xmm6
    00000554: 	addq	%r12, %r9
    00000557: 	movdqa	%xmm6, %xmm8
    0000055c: 	punpckhwd	%xmm6, %xmm8
    00000561: 	nopl	(%rax) # Size: 7
.Ltmp338:
    00000568: 	movdqa	%xmm6, %xmm0
    0000056c: 	addq	$0x40, %rcx
    00000570: 	punpcklwd	%xmm6, %xmm0
    00000574: 	movdqa	%xmm0, %xmm9
    00000579: 	punpcklwd	%xmm8, %xmm0
    0000057e: 	punpckhwd	%xmm8, %xmm9
    00000583: 	punpcklwd	%xmm9, %xmm0
    00000588: 	pand	%xmm1, %xmm0
    0000058c: 	packuswb	%xmm0, %xmm0
    00000590: 	paddb	%xmm2, %xmm0
    00000594: 	movd	%xmm0, %r8d
    00000599: 	paddb	%xmm0, %xmm7
    0000059d: 	movb	%r8b, -0x40(%rcx)
    000005a1: 	movaps	%xmm0, 0x6d0(%rsp)
    000005a9: 	movzbl	0x6d1(%rsp), %r8d
    000005b2: 	movb	%r8b, -0x3c(%rcx)
    000005b6: 	movaps	%xmm0, 0x6c0(%rsp)
    000005be: 	movzbl	0x6c2(%rsp), %r8d
    000005c7: 	movb	%r8b, -0x38(%rcx)
    000005cb: 	movaps	%xmm0, 0x6b0(%rsp)
    000005d3: 	movzbl	0x6b3(%rsp), %r8d
    000005dc: 	movb	%r8b, -0x34(%rcx)
    000005e0: 	movaps	%xmm0, 0x6a0(%rsp)
    000005e8: 	movzbl	0x6a4(%rsp), %r8d
    000005f1: 	movb	%r8b, -0x30(%rcx)
    000005f5: 	movaps	%xmm0, 0x690(%rsp)
    000005fd: 	movzbl	0x695(%rsp), %r8d
    00000606: 	movb	%r8b, -0x2c(%rcx)
    0000060a: 	movaps	%xmm0, 0x680(%rsp)
    00000612: 	movzbl	0x686(%rsp), %r8d
    0000061b: 	movb	%r8b, -0x28(%rcx)
    0000061f: 	movaps	%xmm0, 0x670(%rsp)
    00000627: 	movzbl	0x677(%rsp), %r8d
    00000630: 	movb	%r8b, -0x24(%rcx)
    00000634: 	movaps	%xmm0, 0x660(%rsp)
    0000063c: 	movzbl	0x668(%rsp), %r8d
    00000645: 	movb	%r8b, -0x20(%rcx)
    00000649: 	movaps	%xmm0, 0x650(%rsp)
    00000651: 	movzbl	0x659(%rsp), %r8d
    0000065a: 	movb	%r8b, -0x1c(%rcx)
    0000065e: 	movaps	%xmm0, 0x640(%rsp)
    00000666: 	movzbl	0x64a(%rsp), %r8d
    0000066f: 	movb	%r8b, -0x18(%rcx)
    00000673: 	movaps	%xmm0, 0x630(%rsp)
    0000067b: 	movzbl	0x63b(%rsp), %r8d
    00000684: 	movb	%r8b, -0x14(%rcx)
    00000688: 	movaps	%xmm0, 0x620(%rsp)
    00000690: 	movzbl	0x62c(%rsp), %r8d
    00000699: 	movb	%r8b, -0x10(%rcx)
    0000069d: 	movaps	%xmm0, 0x610(%rsp)
    000006a5: 	movzbl	0x61d(%rsp), %r8d
    000006ae: 	movb	%r8b, -0xc(%rcx)
    000006b2: 	movaps	%xmm0, 0x600(%rsp)
    000006ba: 	movzbl	0x60e(%rsp), %r8d
    000006c3: 	movb	%r8b, -0x8(%rcx)
    000006c7: 	movaps	%xmm0, 0x5f0(%rsp)
    000006cf: 	movzbl	0x5ff(%rsp), %r8d
    000006d8: 	movb	%r8b, -0x4(%rcx)
    000006dc: 	cmpq	%r9, %rcx
    000006df: 	jne	.Ltmp338 # Offset: 1759
    000006e5: 	movdqa	%xmm7, %xmm0
    000006e9: 	movq	%rdx, %r8
    000006ec: 	psrldq	$0x8, %xmm0
    000006f1: 	andq	$-0x10, %r8
    000006f5: 	paddb	%xmm0, %xmm7
    000006f9: 	movq	%r8, 0x8(%rsp)
    000006fe: 	psadbw	%xmm5, %xmm7
    00000702: 	movd	%xmm7, %ecx
    00000706: 	addl	%ecx, %ebx
    00000708: 	movq	%r8, %rcx
    0000070b: 	leaq	(,%r8,4), %r8
    00000713: 	leal	(%r10,%rcx,4), %ecx
    00000717: 	cmpq	0x8(%rsp), %rdx
    0000071c: 	je	.Ltmp339 # Offset: 1820
    00000722: 	cvttsd2si	init_value(%rip), %r14d
    0000072b: 	movq	0x20(%rsp), %r9
    00000730: 	addq	%rbp, %r9
    00000733: 	addl	$0x1, %r14d
    00000737: 	movb	%r14b, (%r9,%r8)
    0000073b: 	addl	%r14d, %ebx
    0000073e: 	movq	%rax, %r9
    00000741: 	subq	0x8(%rsp), %r9
    00000746: 	je	.Ltmp339 # Offset: 1862
    0000074c: 	cvttsd2si	init_value(%rip), %r8d
    00000755: 	leal	0x5(%rcx), %r14d
    00000759: 	movslq	%r14d, %r14
    0000075c: 	addl	$0x1, %r8d
    00000760: 	movb	%r8b, (%rbp,%r14)
    00000765: 	addl	%r8d, %ebx
    00000768: 	cmpq	$0x1, %r9
    0000076c: 	je	.Ltmp339 # Offset: 1900
    00000772: 	cvttsd2si	init_value(%rip), %r8d
    0000077b: 	leal	0x9(%rcx), %r14d
    0000077f: 	movslq	%r14d, %r14
    00000782: 	addl	$0x1, %r8d
    00000786: 	movb	%r8b, (%rbp,%r14)
    0000078b: 	addl	%r8d, %ebx
    0000078e: 	cmpq	$0x2, %r9
    00000792: 	je	.Ltmp339 # Offset: 1938
    00000798: 	cvttsd2si	init_value(%rip), %r8d
    000007a1: 	leal	0xd(%rcx), %r14d
    000007a5: 	movslq	%r14d, %r14
    000007a8: 	addl	$0x1, %r8d
    000007ac: 	movb	%r8b, (%rbp,%r14)
    000007b1: 	addl	%r8d, %ebx
    000007b4: 	cmpq	$0x3, %r9
    000007b8: 	je	.Ltmp339 # Offset: 1976
    000007be: 	cvttsd2si	init_value(%rip), %r8d
    000007c7: 	leal	0x11(%rcx), %r14d
    000007cb: 	movslq	%r14d, %r14
    000007ce: 	addl	$0x1, %r8d
    000007d2: 	movb	%r8b, (%rbp,%r14)
    000007d7: 	addl	%r8d, %ebx
    000007da: 	cmpq	$0x4, %r9
    000007de: 	je	.Ltmp339 # Offset: 2014
    000007e4: 	cvttsd2si	init_value(%rip), %r8d
    000007ed: 	leal	0x15(%rcx), %r14d
    000007f1: 	movslq	%r14d, %r14
    000007f4: 	addl	$0x1, %r8d
    000007f8: 	movb	%r8b, (%rbp,%r14)
    000007fd: 	addl	%r8d, %ebx
    00000800: 	cmpq	$0x5, %r9
    00000804: 	je	.Ltmp339 # Offset: 2052
    0000080a: 	cvttsd2si	init_value(%rip), %r8d
    00000813: 	leal	0x19(%rcx), %r14d
    00000817: 	movslq	%r14d, %r14
    0000081a: 	addl	$0x1, %r8d
    0000081e: 	movb	%r8b, (%rbp,%r14)
    00000823: 	addl	%r8d, %ebx
    00000826: 	cmpq	$0x6, %r9
    0000082a: 	je	.Ltmp339 # Offset: 2090
    00000830: 	cvttsd2si	init_value(%rip), %r8d
    00000839: 	leal	0x1d(%rcx), %r14d
    0000083d: 	movslq	%r14d, %r14
    00000840: 	addl	$0x1, %r8d
    00000844: 	movb	%r8b, (%rbp,%r14)
    00000849: 	addl	%r8d, %ebx
    0000084c: 	cmpq	$0x7, %r9
    00000850: 	je	.Ltmp339 # Offset: 2128
    00000856: 	cvttsd2si	init_value(%rip), %r8d
    0000085f: 	leal	0x21(%rcx), %r14d
    00000863: 	movslq	%r14d, %r14
    00000866: 	addl	$0x1, %r8d
    0000086a: 	movb	%r8b, (%rbp,%r14)
    0000086f: 	addl	%r8d, %ebx
    00000872: 	cmpq	$0x8, %r9
    00000876: 	je	.Ltmp339 # Offset: 2166
    0000087c: 	cvttsd2si	init_value(%rip), %r8d
    00000885: 	leal	0x25(%rcx), %r14d
    00000889: 	movslq	%r14d, %r14
    0000088c: 	addl	$0x1, %r8d
    00000890: 	movb	%r8b, (%rbp,%r14)
    00000895: 	addl	%r8d, %ebx
    00000898: 	cmpq	$0x9, %r9
    0000089c: 	je	.Ltmp339 # Offset: 2204
    000008a2: 	cvttsd2si	init_value(%rip), %r8d
    000008ab: 	leal	0x29(%rcx), %r14d
    000008af: 	movslq	%r14d, %r14
    000008b2: 	addl	$0x1, %r8d
    000008b6: 	movb	%r8b, (%rbp,%r14)
    000008bb: 	addl	%r8d, %ebx
    000008be: 	cmpq	$0xa, %r9
    000008c2: 	je	.Ltmp339 # Offset: 2242
    000008c8: 	cvttsd2si	init_value(%rip), %r8d
    000008d1: 	leal	0x2d(%rcx), %r14d
    000008d5: 	movslq	%r14d, %r14
    000008d8: 	addl	$0x1, %r8d
    000008dc: 	movb	%r8b, (%rbp,%r14)
    000008e1: 	addl	%r8d, %ebx
    000008e4: 	cmpq	$0xb, %r9
    000008e8: 	je	.Ltmp339 # Offset: 2280
    000008ea: 	cvttsd2si	init_value(%rip), %r8d
    000008f3: 	leal	0x31(%rcx), %r14d
    000008f7: 	movslq	%r14d, %r14
    000008fa: 	addl	$0x1, %r8d
    000008fe: 	movb	%r8b, (%rbp,%r14)
    00000903: 	addl	%r8d, %ebx
    00000906: 	cmpq	$0xc, %r9
    0000090a: 	je	.Ltmp339 # Offset: 2314
    0000090c: 	cvttsd2si	init_value(%rip), %r8d
    00000915: 	leal	0x35(%rcx), %r14d
    00000919: 	movslq	%r14d, %r14
    0000091c: 	addl	$0x1, %r8d
    00000920: 	movb	%r8b, (%rbp,%r14)
    00000925: 	addl	%r8d, %ebx
    00000928: 	cmpq	$0xd, %r9
    0000092c: 	je	.Ltmp339 # Offset: 2348
    0000092e: 	cvttsd2si	init_value(%rip), %r8d
    00000937: 	addl	$0x39, %ecx
    0000093a: 	movslq	%ecx, %rcx
    0000093d: 	addl	$0x1, %r8d
    00000941: 	movb	%r8b, (%rbp,%rcx)
    00000946: 	addl	%r8d, %ebx
.Ltmp339:
    00000949: 	leaq	0x3(%rsi), %rcx
    0000094d: 	leaq	init_value(%rip), %r14
    00000954: 	movq	%rcx, 0x20(%rsp)
    00000959: 	addq	0x18(%rsp), %rcx
    0000095e: 	addq	%rbp, %rcx
    00000961: 	cmpq	%r14, %rcx
    00000964: 	leaq	0x8(%r14), %rcx
    00000968: 	setbe	%r8b
    0000096c: 	cmpq	%rcx, %r11
    0000096f: 	setae	%cl
    00000972: 	orb	%r8b, %cl
    00000975: 	je	.Ltmp340 # Offset: 2421
    0000097b: 	cmpb	$0x0, (%rsp)
    0000097f: 	je	.Ltmp340 # Offset: 2431
    00000985: 	movsd	init_value(%rip), %xmm6
    0000098d: 	movq	%rdx, %r9
    00000990: 	movq	%r11, %rcx
    00000993: 	pxor	%xmm7, %xmm7
    00000997: 	shrq	$0x4, %r9
    0000099b: 	unpcklpd	%xmm6, %xmm6
    0000099f: 	shlq	$0x6, %r9
    000009a3: 	cvttpd2dq	%xmm6, %xmm6
    000009a7: 	punpcklqdq	%xmm6, %xmm6
    000009ab: 	addq	%r11, %r9
    000009ae: 	movdqa	%xmm6, %xmm8
    000009b3: 	punpckhwd	%xmm6, %xmm8
    000009b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp341:
    000009c0: 	movdqa	%xmm6, %xmm0
    000009c4: 	addq	$0x40, %rcx
    000009c8: 	punpcklwd	%xmm6, %xmm0
    000009cc: 	movdqa	%xmm0, %xmm9
    000009d1: 	punpcklwd	%xmm8, %xmm0
    000009d6: 	punpckhwd	%xmm8, %xmm9
    000009db: 	punpcklwd	%xmm9, %xmm0
    000009e0: 	pand	%xmm1, %xmm0
    000009e4: 	packuswb	%xmm0, %xmm0
    000009e8: 	paddb	%xmm4, %xmm0
    000009ec: 	movd	%xmm0, %r8d
    000009f1: 	paddb	%xmm0, %xmm7
    000009f5: 	movb	%r8b, -0x40(%rcx)
    000009f9: 	movaps	%xmm0, 0x5e0(%rsp)
    00000a01: 	movzbl	0x5e1(%rsp), %r8d
    00000a0a: 	movb	%r8b, -0x3c(%rcx)
    00000a0e: 	movaps	%xmm0, 0x5d0(%rsp)
    00000a16: 	movzbl	0x5d2(%rsp), %r8d
    00000a1f: 	movb	%r8b, -0x38(%rcx)
    00000a23: 	movaps	%xmm0, 0x5c0(%rsp)
    00000a2b: 	movzbl	0x5c3(%rsp), %r8d
    00000a34: 	movb	%r8b, -0x34(%rcx)
    00000a38: 	movaps	%xmm0, 0x5b0(%rsp)
    00000a40: 	movzbl	0x5b4(%rsp), %r8d
    00000a49: 	movb	%r8b, -0x30(%rcx)
    00000a4d: 	movaps	%xmm0, 0x5a0(%rsp)
    00000a55: 	movzbl	0x5a5(%rsp), %r8d
    00000a5e: 	movb	%r8b, -0x2c(%rcx)
    00000a62: 	movaps	%xmm0, 0x590(%rsp)
    00000a6a: 	movzbl	0x596(%rsp), %r8d
    00000a73: 	movb	%r8b, -0x28(%rcx)
    00000a77: 	movaps	%xmm0, 0x580(%rsp)
    00000a7f: 	movzbl	0x587(%rsp), %r8d
    00000a88: 	movb	%r8b, -0x24(%rcx)
    00000a8c: 	movaps	%xmm0, 0x570(%rsp)
    00000a94: 	movzbl	0x578(%rsp), %r8d
    00000a9d: 	movb	%r8b, -0x20(%rcx)
    00000aa1: 	movaps	%xmm0, 0x560(%rsp)
    00000aa9: 	movzbl	0x569(%rsp), %r8d
    00000ab2: 	movb	%r8b, -0x1c(%rcx)
    00000ab6: 	movaps	%xmm0, 0x550(%rsp)
    00000abe: 	movzbl	0x55a(%rsp), %r8d
    00000ac7: 	movb	%r8b, -0x18(%rcx)
    00000acb: 	movaps	%xmm0, 0x540(%rsp)
    00000ad3: 	movzbl	0x54b(%rsp), %r8d
    00000adc: 	movb	%r8b, -0x14(%rcx)
    00000ae0: 	movaps	%xmm0, 0x530(%rsp)
    00000ae8: 	movzbl	0x53c(%rsp), %r8d
    00000af1: 	movb	%r8b, -0x10(%rcx)
    00000af5: 	movaps	%xmm0, 0x520(%rsp)
    00000afd: 	movzbl	0x52d(%rsp), %r8d
    00000b06: 	movb	%r8b, -0xc(%rcx)
    00000b0a: 	movaps	%xmm0, 0x510(%rsp)
    00000b12: 	movzbl	0x51e(%rsp), %r8d
    00000b1b: 	movb	%r8b, -0x8(%rcx)
    00000b1f: 	movaps	%xmm0, 0x500(%rsp)
    00000b27: 	movzbl	0x50f(%rsp), %r8d
    00000b30: 	movb	%r8b, -0x4(%rcx)
    00000b34: 	cmpq	%rcx, %r9
    00000b37: 	jne	.Ltmp341 # Offset: 2871
    00000b3d: 	movdqa	%xmm7, %xmm0
    00000b41: 	movq	%rdx, %r8
    00000b44: 	psrldq	$0x8, %xmm0
    00000b49: 	andq	$-0x10, %r8
    00000b4d: 	paddb	%xmm0, %xmm7
    00000b51: 	movq	%r8, 0x8(%rsp)
    00000b56: 	psadbw	%xmm5, %xmm7
    00000b5a: 	movd	%xmm7, %ecx
    00000b5e: 	addl	%ecx, %ebx
    00000b60: 	movq	%r8, %rcx
    00000b63: 	leaq	(,%r8,4), %r8
    00000b6b: 	leal	(%r10,%rcx,4), %ecx
    00000b6f: 	cmpq	0x8(%rsp), %rdx
    00000b74: 	je	.Ltmp342 # Offset: 2932
    00000b7a: 	cvttsd2si	init_value(%rip), %r14d
    00000b83: 	movq	0x28(%rsp), %r9
    00000b88: 	addq	%rbp, %r9
    00000b8b: 	addl	$0x2, %r14d
    00000b8f: 	movb	%r14b, (%r9,%r8)
    00000b93: 	addl	%r14d, %ebx
    00000b96: 	movq	%rax, %r9
    00000b99: 	subq	0x8(%rsp), %r9
    00000b9e: 	je	.Ltmp342 # Offset: 2974
    00000ba4: 	cvttsd2si	init_value(%rip), %r8d
    00000bad: 	leal	0x6(%rcx), %r14d
    00000bb1: 	movslq	%r14d, %r14
    00000bb4: 	addl	$0x2, %r8d
    00000bb8: 	movb	%r8b, (%rbp,%r14)
    00000bbd: 	addl	%r8d, %ebx
    00000bc0: 	cmpq	$0x1, %r9
    00000bc4: 	je	.Ltmp342 # Offset: 3012
    00000bca: 	cvttsd2si	init_value(%rip), %r8d
    00000bd3: 	leal	0xa(%rcx), %r14d
    00000bd7: 	movslq	%r14d, %r14
    00000bda: 	addl	$0x2, %r8d
    00000bde: 	movb	%r8b, (%rbp,%r14)
    00000be3: 	addl	%r8d, %ebx
    00000be6: 	cmpq	$0x2, %r9
    00000bea: 	je	.Ltmp342 # Offset: 3050
    00000bf0: 	cvttsd2si	init_value(%rip), %r8d
    00000bf9: 	leal	0xe(%rcx), %r14d
    00000bfd: 	movslq	%r14d, %r14
    00000c00: 	addl	$0x2, %r8d
    00000c04: 	movb	%r8b, (%rbp,%r14)
    00000c09: 	addl	%r8d, %ebx
    00000c0c: 	cmpq	$0x3, %r9
    00000c10: 	je	.Ltmp342 # Offset: 3088
    00000c16: 	cvttsd2si	init_value(%rip), %r8d
    00000c1f: 	leal	0x12(%rcx), %r14d
    00000c23: 	movslq	%r14d, %r14
    00000c26: 	addl	$0x2, %r8d
    00000c2a: 	movb	%r8b, (%rbp,%r14)
    00000c2f: 	addl	%r8d, %ebx
    00000c32: 	cmpq	$0x4, %r9
    00000c36: 	je	.Ltmp342 # Offset: 3126
    00000c3c: 	cvttsd2si	init_value(%rip), %r8d
    00000c45: 	leal	0x16(%rcx), %r14d
    00000c49: 	movslq	%r14d, %r14
    00000c4c: 	addl	$0x2, %r8d
    00000c50: 	movb	%r8b, (%rbp,%r14)
    00000c55: 	addl	%r8d, %ebx
    00000c58: 	cmpq	$0x5, %r9
    00000c5c: 	je	.Ltmp342 # Offset: 3164
    00000c62: 	cvttsd2si	init_value(%rip), %r8d
    00000c6b: 	leal	0x1a(%rcx), %r14d
    00000c6f: 	movslq	%r14d, %r14
    00000c72: 	addl	$0x2, %r8d
    00000c76: 	movb	%r8b, (%rbp,%r14)
    00000c7b: 	addl	%r8d, %ebx
    00000c7e: 	cmpq	$0x6, %r9
    00000c82: 	je	.Ltmp342 # Offset: 3202
    00000c88: 	cvttsd2si	init_value(%rip), %r8d
    00000c91: 	leal	0x1e(%rcx), %r14d
    00000c95: 	movslq	%r14d, %r14
    00000c98: 	addl	$0x2, %r8d
    00000c9c: 	movb	%r8b, (%rbp,%r14)
    00000ca1: 	addl	%r8d, %ebx
    00000ca4: 	cmpq	$0x7, %r9
    00000ca8: 	je	.Ltmp342 # Offset: 3240
    00000cae: 	cvttsd2si	init_value(%rip), %r8d
    00000cb7: 	leal	0x22(%rcx), %r14d
    00000cbb: 	movslq	%r14d, %r14
    00000cbe: 	addl	$0x2, %r8d
    00000cc2: 	movb	%r8b, (%rbp,%r14)
    00000cc7: 	addl	%r8d, %ebx
    00000cca: 	cmpq	$0x8, %r9
    00000cce: 	je	.Ltmp342 # Offset: 3278
    00000cd4: 	cvttsd2si	init_value(%rip), %r8d
    00000cdd: 	leal	0x26(%rcx), %r14d
    00000ce1: 	movslq	%r14d, %r14
    00000ce4: 	addl	$0x2, %r8d
    00000ce8: 	movb	%r8b, (%rbp,%r14)
    00000ced: 	addl	%r8d, %ebx
    00000cf0: 	cmpq	$0x9, %r9
    00000cf4: 	je	.Ltmp342 # Offset: 3316
    00000cfa: 	cvttsd2si	init_value(%rip), %r8d
    00000d03: 	leal	0x2a(%rcx), %r14d
    00000d07: 	movslq	%r14d, %r14
    00000d0a: 	addl	$0x2, %r8d
    00000d0e: 	movb	%r8b, (%rbp,%r14)
    00000d13: 	addl	%r8d, %ebx
    00000d16: 	cmpq	$0xa, %r9
    00000d1a: 	je	.Ltmp342 # Offset: 3354
    00000d20: 	cvttsd2si	init_value(%rip), %r8d
    00000d29: 	leal	0x2e(%rcx), %r14d
    00000d2d: 	movslq	%r14d, %r14
    00000d30: 	addl	$0x2, %r8d
    00000d34: 	movb	%r8b, (%rbp,%r14)
    00000d39: 	addl	%r8d, %ebx
    00000d3c: 	cmpq	$0xb, %r9
    00000d40: 	je	.Ltmp342 # Offset: 3392
    00000d42: 	cvttsd2si	init_value(%rip), %r8d
    00000d4b: 	leal	0x32(%rcx), %r14d
    00000d4f: 	movslq	%r14d, %r14
    00000d52: 	addl	$0x2, %r8d
    00000d56: 	movb	%r8b, (%rbp,%r14)
    00000d5b: 	addl	%r8d, %ebx
    00000d5e: 	cmpq	$0xc, %r9
    00000d62: 	je	.Ltmp342 # Offset: 3426
    00000d64: 	cvttsd2si	init_value(%rip), %r8d
    00000d6d: 	leal	0x36(%rcx), %r14d
    00000d71: 	movslq	%r14d, %r14
    00000d74: 	addl	$0x2, %r8d
    00000d78: 	movb	%r8b, (%rbp,%r14)
    00000d7d: 	addl	%r8d, %ebx
    00000d80: 	cmpq	$0xd, %r9
    00000d84: 	je	.Ltmp342 # Offset: 3460
    00000d86: 	cvttsd2si	init_value(%rip), %r8d
    00000d8f: 	addl	$0x3a, %ecx
    00000d92: 	movslq	%ecx, %rcx
    00000d95: 	addl	$0x2, %r8d
    00000d99: 	movb	%r8b, (%rbp,%rcx)
    00000d9e: 	addl	%r8d, %ebx
.Ltmp342:
    00000da1: 	movq	0x18(%rsp), %rcx
    00000da6: 	leaq	init_value(%rip), %r14
    00000dad: 	leaq	0x4(%rcx,%rsi), %rcx
    00000db2: 	addq	%rbp, %rcx
    00000db5: 	cmpq	%r14, %rcx
    00000db8: 	leaq	0x8(%r14), %rcx
    00000dbc: 	setbe	%r8b
    00000dc0: 	cmpq	%rcx, %r15
    00000dc3: 	setae	%cl
    00000dc6: 	orb	%r8b, %cl
    00000dc9: 	je	.Ltmp343 # Offset: 3529
    00000dcf: 	cmpb	$0x0, (%rsp)
    00000dd3: 	je	.Ltmp343 # Offset: 3539
    00000dd9: 	movsd	init_value(%rip), %xmm6
    00000de1: 	movq	%rdx, %r9
    00000de4: 	movq	%r15, %rcx
    00000de7: 	pxor	%xmm7, %xmm7
    00000deb: 	shrq	$0x4, %r9
    00000def: 	unpcklpd	%xmm6, %xmm6
    00000df3: 	shlq	$0x6, %r9
    00000df7: 	cvttpd2dq	%xmm6, %xmm6
    00000dfb: 	punpcklqdq	%xmm6, %xmm6
    00000dff: 	addq	%r15, %r9
    00000e02: 	movdqa	%xmm6, %xmm8
    00000e07: 	punpckhwd	%xmm6, %xmm8
    00000e0c: 	nopl	(%rax) # Size: 4
.Ltmp344:
    00000e10: 	movdqa	%xmm6, %xmm0
    00000e14: 	addq	$0x40, %rcx
    00000e18: 	punpcklwd	%xmm6, %xmm0
    00000e1c: 	movdqa	%xmm0, %xmm9
    00000e21: 	punpcklwd	%xmm8, %xmm0
    00000e26: 	punpckhwd	%xmm8, %xmm9
    00000e2b: 	punpcklwd	%xmm9, %xmm0
    00000e30: 	pand	%xmm3, %xmm0
    00000e34: 	packuswb	%xmm0, %xmm0
    00000e38: 	paddb	%xmm2, %xmm0
    00000e3c: 	movd	%xmm0, %r8d
    00000e41: 	paddb	%xmm0, %xmm7
    00000e45: 	movb	%r8b, -0x40(%rcx)
    00000e49: 	movaps	%xmm0, 0x4f0(%rsp)
    00000e51: 	movzbl	0x4f1(%rsp), %r8d
    00000e5a: 	movb	%r8b, -0x3c(%rcx)
    00000e5e: 	movaps	%xmm0, 0x4e0(%rsp)
    00000e66: 	movzbl	0x4e2(%rsp), %r8d
    00000e6f: 	movb	%r8b, -0x38(%rcx)
    00000e73: 	movaps	%xmm0, 0x4d0(%rsp)
    00000e7b: 	movzbl	0x4d3(%rsp), %r8d
    00000e84: 	movb	%r8b, -0x34(%rcx)
    00000e88: 	movaps	%xmm0, 0x4c0(%rsp)
    00000e90: 	movzbl	0x4c4(%rsp), %r8d
    00000e99: 	movb	%r8b, -0x30(%rcx)
    00000e9d: 	movaps	%xmm0, 0x4b0(%rsp)
    00000ea5: 	movzbl	0x4b5(%rsp), %r8d
    00000eae: 	movb	%r8b, -0x2c(%rcx)
    00000eb2: 	movaps	%xmm0, 0x4a0(%rsp)
    00000eba: 	movzbl	0x4a6(%rsp), %r8d
    00000ec3: 	movb	%r8b, -0x28(%rcx)
    00000ec7: 	movaps	%xmm0, 0x490(%rsp)
    00000ecf: 	movzbl	0x497(%rsp), %r8d
    00000ed8: 	movb	%r8b, -0x24(%rcx)
    00000edc: 	movaps	%xmm0, 0x480(%rsp)
    00000ee4: 	movzbl	0x488(%rsp), %r8d
    00000eed: 	movb	%r8b, -0x20(%rcx)
    00000ef1: 	movaps	%xmm0, 0x470(%rsp)
    00000ef9: 	movzbl	0x479(%rsp), %r8d
    00000f02: 	movb	%r8b, -0x1c(%rcx)
    00000f06: 	movaps	%xmm0, 0x460(%rsp)
    00000f0e: 	movzbl	0x46a(%rsp), %r8d
    00000f17: 	movb	%r8b, -0x18(%rcx)
    00000f1b: 	movaps	%xmm0, 0x450(%rsp)
    00000f23: 	movzbl	0x45b(%rsp), %r8d
    00000f2c: 	movb	%r8b, -0x14(%rcx)
    00000f30: 	movaps	%xmm0, 0x440(%rsp)
    00000f38: 	movzbl	0x44c(%rsp), %r8d
    00000f41: 	movb	%r8b, -0x10(%rcx)
    00000f45: 	movaps	%xmm0, 0x430(%rsp)
    00000f4d: 	movzbl	0x43d(%rsp), %r8d
    00000f56: 	movb	%r8b, -0xc(%rcx)
    00000f5a: 	movaps	%xmm0, 0x420(%rsp)
    00000f62: 	movzbl	0x42e(%rsp), %r8d
    00000f6b: 	movb	%r8b, -0x8(%rcx)
    00000f6f: 	movaps	%xmm0, 0x410(%rsp)
    00000f77: 	movzbl	0x41f(%rsp), %r8d
    00000f80: 	movb	%r8b, -0x4(%rcx)
    00000f84: 	cmpq	%r9, %rcx
    00000f87: 	jne	.Ltmp344 # Offset: 3975
    00000f8d: 	movdqa	%xmm7, %xmm0
    00000f91: 	psrldq	$0x8, %xmm0
    00000f96: 	paddb	%xmm0, %xmm7
    00000f9a: 	psadbw	%xmm5, %xmm7
    00000f9e: 	movd	%xmm7, %ecx
    00000fa2: 	addl	%ecx, %ebx
    00000fa4: 	movq	%rdx, %rcx
    00000fa7: 	andq	$-0x10, %rcx
    00000fab: 	leaq	(,%rcx,4), %r8
    00000fb3: 	leal	(%r10,%rcx,4), %r9d
    00000fb7: 	cmpq	%rcx, %rdx
    00000fba: 	je	.Ltmp333 # Offset: 4026
    00000fc0: 	cvttsd2si	init_value(%rip), %edx
    00000fc8: 	movq	0x20(%rsp), %r10
    00000fcd: 	addq	%rbp, %r10
    00000fd0: 	addl	$0x1, %edx
    00000fd3: 	movb	%dl, (%r10,%r8)
    00000fd7: 	addl	%edx, %ebx
    00000fd9: 	subq	%rcx, %rax
    00000fdc: 	je	.Ltmp333 # Offset: 4060
    00000fe2: 	cvttsd2si	init_value(%rip), %edx
    00000fea: 	leal	0x7(%r9), %ecx
    00000fee: 	movslq	%ecx, %rcx
    00000ff1: 	addl	$0x1, %edx
    00000ff4: 	movb	%dl, (%rbp,%rcx)
    00000ff8: 	addl	%edx, %ebx
    00000ffa: 	cmpq	$0x1, %rax
    00000ffe: 	je	.Ltmp333 # Offset: 4094
    00001004: 	cvttsd2si	init_value(%rip), %edx
    0000100c: 	leal	0xb(%r9), %ecx
    00001010: 	movslq	%ecx, %rcx
    00001013: 	addl	$0x1, %edx
    00001016: 	movb	%dl, (%rbp,%rcx)
    0000101a: 	addl	%edx, %ebx
    0000101c: 	cmpq	$0x2, %rax
    00001020: 	je	.Ltmp333 # Offset: 4128
    00001026: 	cvttsd2si	init_value(%rip), %edx
    0000102e: 	leal	0xf(%r9), %ecx
    00001032: 	movslq	%ecx, %rcx
    00001035: 	addl	$0x1, %edx
    00001038: 	movb	%dl, (%rbp,%rcx)
    0000103c: 	addl	%edx, %ebx
    0000103e: 	cmpq	$0x3, %rax
    00001042: 	je	.Ltmp333 # Offset: 4162
    00001048: 	cvttsd2si	init_value(%rip), %edx
    00001050: 	leal	0x13(%r9), %ecx
    00001054: 	movslq	%ecx, %rcx
    00001057: 	addl	$0x1, %edx
    0000105a: 	movb	%dl, (%rbp,%rcx)
    0000105e: 	addl	%edx, %ebx
    00001060: 	cmpq	$0x4, %rax
    00001064: 	je	.Ltmp333 # Offset: 4196
    0000106a: 	cvttsd2si	init_value(%rip), %edx
    00001072: 	leal	0x17(%r9), %ecx
    00001076: 	movslq	%ecx, %rcx
    00001079: 	addl	$0x1, %edx
    0000107c: 	movb	%dl, (%rbp,%rcx)
    00001080: 	addl	%edx, %ebx
    00001082: 	cmpq	$0x5, %rax
    00001086: 	je	.Ltmp333 # Offset: 4230
    0000108c: 	cvttsd2si	init_value(%rip), %edx
    00001094: 	leal	0x1b(%r9), %ecx
    00001098: 	movslq	%ecx, %rcx
    0000109b: 	addl	$0x1, %edx
    0000109e: 	movb	%dl, (%rbp,%rcx)
    000010a2: 	addl	%edx, %ebx
    000010a4: 	cmpq	$0x6, %rax
    000010a8: 	je	.Ltmp333 # Offset: 4264
    000010ae: 	cvttsd2si	init_value(%rip), %edx
    000010b6: 	leal	0x1f(%r9), %ecx
    000010ba: 	movslq	%ecx, %rcx
    000010bd: 	addl	$0x1, %edx
    000010c0: 	movb	%dl, (%rbp,%rcx)
    000010c4: 	addl	%edx, %ebx
    000010c6: 	cmpq	$0x7, %rax
    000010ca: 	je	.Ltmp333 # Offset: 4298
    000010d0: 	cvttsd2si	init_value(%rip), %edx
    000010d8: 	leal	0x23(%r9), %ecx
    000010dc: 	movslq	%ecx, %rcx
    000010df: 	addl	$0x1, %edx
    000010e2: 	movb	%dl, (%rbp,%rcx)
    000010e6: 	addl	%edx, %ebx
    000010e8: 	cmpq	$0x8, %rax
    000010ec: 	je	.Ltmp333 # Offset: 4332
    000010f2: 	cvttsd2si	init_value(%rip), %edx
    000010fa: 	leal	0x27(%r9), %ecx
    000010fe: 	movslq	%ecx, %rcx
    00001101: 	addl	$0x1, %edx
    00001104: 	movb	%dl, (%rbp,%rcx)
    00001108: 	addl	%edx, %ebx
    0000110a: 	cmpq	$0x9, %rax
    0000110e: 	je	.Ltmp333 # Offset: 4366
    00001114: 	cvttsd2si	init_value(%rip), %edx
    0000111c: 	leal	0x2b(%r9), %ecx
    00001120: 	movslq	%ecx, %rcx
    00001123: 	addl	$0x1, %edx
    00001126: 	movb	%dl, (%rbp,%rcx)
    0000112a: 	addl	%edx, %ebx
    0000112c: 	cmpq	$0xa, %rax
    00001130: 	je	.Ltmp333 # Offset: 4400
    00001132: 	cvttsd2si	init_value(%rip), %edx
    0000113a: 	leal	0x2f(%r9), %ecx
    0000113e: 	movslq	%ecx, %rcx
    00001141: 	addl	$0x1, %edx
    00001144: 	movb	%dl, (%rbp,%rcx)
    00001148: 	addl	%edx, %ebx
    0000114a: 	cmpq	$0xb, %rax
    0000114e: 	je	.Ltmp333 # Offset: 4430
    00001150: 	cvttsd2si	init_value(%rip), %edx
    00001158: 	leal	0x33(%r9), %ecx
    0000115c: 	movslq	%ecx, %rcx
    0000115f: 	addl	$0x1, %edx
    00001162: 	movb	%dl, (%rbp,%rcx)
    00001166: 	addl	%edx, %ebx
    00001168: 	cmpq	$0xc, %rax
    0000116c: 	je	.Ltmp333 # Offset: 4460
    0000116e: 	cvttsd2si	init_value(%rip), %edx
    00001176: 	leal	0x37(%r9), %ecx
    0000117a: 	movslq	%ecx, %rcx
    0000117d: 	addl	$0x1, %edx
    00001180: 	movb	%dl, (%rbp,%rcx)
    00001184: 	addl	%edx, %ebx
    00001186: 	cmpq	$0xd, %rax
    0000118a: 	je	.Ltmp333 # Offset: 4490
    0000118c: 	cvttsd2si	init_value(%rip), %edx
    00001194: 	leal	0x3b(%r9), %eax
    00001198: 	cltq
    0000119a: 	addl	$0x1, %edx
    0000119d: 	movb	%dl, (%rbp,%rax)
    000011a1: 	addl	%edx, %ebx
.Ltmp333:
    000011a3: 	addq	$0x1000, 0x10(%rsp)
    000011ac: 	addq	$0x1000, %rsi
    000011b3: 	addq	$0x1000, %r13
    000011ba: 	addq	$0x1000, %rdi
    000011c1: 	addq	$0x1000, %r15
    000011c8: 	addq	$0x1000, %r11
    000011cf: 	addq	$0x1000, %r12
    000011d6: 	cmpl	%esi, 0x34(%rsp)
    000011da: 	jg	.Ltmp345 # Offset: 4570
    000011e0: 	movl	0x4c(%rsp), %r15d
    000011e5: 	movl	0x44(%rsp), %eax
    000011e9: 	cmpl	%eax, %r15d
    000011ec: 	jle	.Ltmp346 # Offset: 4588
    000011f2: 	movl	%eax, %edi
.Ltmp374:
    000011f4: 	movl	0x48(%rsp), %eax
    000011f8: 	movslq	%edi, %rsi
    000011fb: 	leaq	init_value(%rip), %r10
    00001202: 	leal	-0x4(%rax), %ecx
    00001205: 	leaq	(%rbp,%rsi), %rax
    0000120a: 	subl	%edi, %ecx
    0000120c: 	cmpl	$0x3b, %ecx
    0000120f: 	seta	%r8b
    00001213: 	shrl	$0x2, %ecx
    00001216: 	leal	0x1(%rcx), %r9d
    0000121a: 	leaq	-0x4(%rsi,%r9,4), %r11
    0000121f: 	movq	%r9, %rdx
    00001222: 	leaq	0x1(%rbp,%r11), %r9
    00001227: 	cmpq	%r10, %r9
    0000122a: 	leaq	0x8(%r10), %r9
    0000122e: 	setbe	%r13b
    00001232: 	cmpq	%r9, %rax
    00001235: 	setae	%r12b
    00001239: 	orb	%r13b, %r12b
    0000123c: 	je	.Ltmp347 # Offset: 4668
    00001242: 	testb	%r8b, %r8b
    00001245: 	je	.Ltmp347 # Offset: 4677
    0000124b: 	movsd	init_value(%rip), %xmm1
    00001253: 	movl	%edx, %r12d
    00001256: 	movdqa	DATAat0x36f20(%rip), %xmm2
    0000125e: 	pxor	%xmm4, %xmm4
    00001262: 	shrl	$0x4, %r12d
    00001266: 	unpcklpd	%xmm1, %xmm1
    0000126a: 	subl	$0x1, %r12d
    0000126e: 	cvttpd2dq	%xmm1, %xmm1
    00001272: 	punpcklqdq	%xmm1, %xmm1
    00001276: 	shlq	$0x6, %r12
    0000127a: 	movdqa	%xmm1, %xmm5
    0000127e: 	leaq	0x40(%rax,%r12), %r13
    00001283: 	punpckhwd	%xmm1, %xmm5
.Ltmp348:
    00001287: 	movdqa	%xmm1, %xmm0
    0000128b: 	addq	$0x40, %rax
    0000128f: 	punpcklwd	%xmm1, %xmm0
    00001293: 	movdqa	%xmm0, %xmm6
    00001297: 	punpcklwd	%xmm5, %xmm0
    0000129b: 	punpckhwd	%xmm5, %xmm6
    0000129f: 	punpcklwd	%xmm6, %xmm0
    000012a3: 	pand	%xmm2, %xmm0
    000012a7: 	packuswb	%xmm0, %xmm0
    000012ab: 	movd	%xmm0, %r12d
    000012b0: 	paddb	%xmm0, %xmm4
    000012b4: 	movb	%r12b, -0x40(%rax)
    000012b8: 	movaps	%xmm0, 0x400(%rsp)
    000012c0: 	movzbl	0x401(%rsp), %r12d
    000012c9: 	movb	%r12b, -0x3c(%rax)
    000012cd: 	movaps	%xmm0, 0x3f0(%rsp)
    000012d5: 	movzbl	0x3f2(%rsp), %r12d
    000012de: 	movb	%r12b, -0x38(%rax)
    000012e2: 	movaps	%xmm0, 0x3e0(%rsp)
    000012ea: 	movzbl	0x3e3(%rsp), %r12d
    000012f3: 	movb	%r12b, -0x34(%rax)
    000012f7: 	movaps	%xmm0, 0x3d0(%rsp)
    000012ff: 	movzbl	0x3d4(%rsp), %r12d
    00001308: 	movb	%r12b, -0x30(%rax)
    0000130c: 	movaps	%xmm0, 0x3c0(%rsp)
    00001314: 	movzbl	0x3c5(%rsp), %r12d
    0000131d: 	movb	%r12b, -0x2c(%rax)
    00001321: 	movaps	%xmm0, 0x3b0(%rsp)
    00001329: 	movzbl	0x3b6(%rsp), %r12d
    00001332: 	movb	%r12b, -0x28(%rax)
    00001336: 	movaps	%xmm0, 0x3a0(%rsp)
    0000133e: 	movzbl	0x3a7(%rsp), %r12d
    00001347: 	movb	%r12b, -0x24(%rax)
    0000134b: 	movaps	%xmm0, 0x390(%rsp)
    00001353: 	movzbl	0x398(%rsp), %r12d
    0000135c: 	movb	%r12b, -0x20(%rax)
    00001360: 	movaps	%xmm0, 0x380(%rsp)
    00001368: 	movzbl	0x389(%rsp), %r12d
    00001371: 	movb	%r12b, -0x1c(%rax)
    00001375: 	movaps	%xmm0, 0x370(%rsp)
    0000137d: 	movzbl	0x37a(%rsp), %r12d
    00001386: 	movb	%r12b, -0x18(%rax)
    0000138a: 	movaps	%xmm0, 0x360(%rsp)
    00001392: 	movzbl	0x36b(%rsp), %r12d
    0000139b: 	movb	%r12b, -0x14(%rax)
    0000139f: 	movaps	%xmm0, 0x350(%rsp)
    000013a7: 	movzbl	0x35c(%rsp), %r12d
    000013b0: 	movb	%r12b, -0x10(%rax)
    000013b4: 	movaps	%xmm0, 0x340(%rsp)
    000013bc: 	movzbl	0x34d(%rsp), %r12d
    000013c5: 	movb	%r12b, -0xc(%rax)
    000013c9: 	movaps	%xmm0, 0x330(%rsp)
    000013d1: 	movzbl	0x33e(%rsp), %r12d
    000013da: 	movb	%r12b, -0x8(%rax)
    000013de: 	movaps	%xmm0, 0x320(%rsp)
    000013e6: 	movzbl	0x32f(%rsp), %r12d
    000013ef: 	movb	%r12b, -0x4(%rax)
    000013f3: 	cmpq	%rax, %r13
    000013f6: 	jne	.Ltmp348 # Offset: 5110
    000013fc: 	movdqa	%xmm4, %xmm0
    00001400: 	pxor	%xmm1, %xmm1
    00001404: 	movl	%edx, %r12d
    00001407: 	psrldq	$0x8, %xmm0
    0000140c: 	andl	$-0x10, %r12d
    00001410: 	paddb	%xmm4, %xmm0
    00001414: 	psadbw	%xmm1, %xmm0
    00001418: 	movd	%xmm0, %eax
    0000141c: 	addl	%eax, %ebx
    0000141e: 	leal	(%rdi,%r12,4), %eax
    00001422: 	cmpl	%r12d, %edx
    00001425: 	je	.Ltmp349 # Offset: 5157
    0000142b: 	cvttsd2si	init_value(%rip), %r12d
    00001434: 	movslq	%eax, %r13
    00001437: 	movb	%r12b, (%rbp,%r13)
    0000143c: 	addl	%r12d, %ebx
    0000143f: 	leal	0x4(%rax), %r12d
    00001443: 	cmpl	%r12d, %r15d
    00001446: 	jle	.Ltmp349 # Offset: 5190
    0000144c: 	cvttsd2si	init_value(%rip), %r13d
    00001455: 	movslq	%r12d, %r12
    00001458: 	movb	%r13b, (%rbp,%r12)
    0000145d: 	leal	0x8(%rax), %r12d
    00001461: 	addl	%r13d, %ebx
    00001464: 	cmpl	%r12d, %r15d
    00001467: 	jle	.Ltmp349 # Offset: 5223
    0000146d: 	cvttsd2si	init_value(%rip), %r13d
    00001476: 	movslq	%r12d, %r12
    00001479: 	movb	%r13b, (%rbp,%r12)
    0000147e: 	leal	0xc(%rax), %r12d
    00001482: 	addl	%r13d, %ebx
    00001485: 	cmpl	%r12d, %r15d
    00001488: 	jle	.Ltmp349 # Offset: 5256
    0000148e: 	cvttsd2si	init_value(%rip), %r13d
    00001497: 	movslq	%r12d, %r12
    0000149a: 	movb	%r13b, (%rbp,%r12)
    0000149f: 	leal	0x10(%rax), %r12d
    000014a3: 	addl	%r13d, %ebx
    000014a6: 	cmpl	%r12d, %r15d
    000014a9: 	jle	.Ltmp349 # Offset: 5289
    000014af: 	cvttsd2si	init_value(%rip), %r13d
    000014b8: 	movslq	%r12d, %r12
    000014bb: 	movb	%r13b, (%rbp,%r12)
    000014c0: 	leal	0x14(%rax), %r12d
    000014c4: 	addl	%r13d, %ebx
    000014c7: 	cmpl	%r12d, %r15d
    000014ca: 	jle	.Ltmp349 # Offset: 5322
    000014d0: 	cvttsd2si	init_value(%rip), %r13d
    000014d9: 	movslq	%r12d, %r12
    000014dc: 	movb	%r13b, (%rbp,%r12)
    000014e1: 	leal	0x18(%rax), %r12d
    000014e5: 	addl	%r13d, %ebx
    000014e8: 	cmpl	%r12d, %r15d
    000014eb: 	jle	.Ltmp349 # Offset: 5355
    000014f1: 	cvttsd2si	init_value(%rip), %r13d
    000014fa: 	movslq	%r12d, %r12
    000014fd: 	movb	%r13b, (%rbp,%r12)
    00001502: 	leal	0x1c(%rax), %r12d
    00001506: 	addl	%r13d, %ebx
    00001509: 	cmpl	%r12d, %r15d
    0000150c: 	jle	.Ltmp349 # Offset: 5388
    00001512: 	cvttsd2si	init_value(%rip), %r13d
    0000151b: 	movslq	%r12d, %r12
    0000151e: 	movb	%r13b, (%rbp,%r12)
    00001523: 	leal	0x20(%rax), %r12d
    00001527: 	addl	%r13d, %ebx
    0000152a: 	cmpl	%r12d, %r15d
    0000152d: 	jle	.Ltmp349 # Offset: 5421
    00001533: 	cvttsd2si	init_value(%rip), %r13d
    0000153c: 	movslq	%r12d, %r12
    0000153f: 	movb	%r13b, (%rbp,%r12)
    00001544: 	leal	0x24(%rax), %r12d
    00001548: 	addl	%r13d, %ebx
    0000154b: 	cmpl	%r12d, %r15d
    0000154e: 	jle	.Ltmp349 # Offset: 5454
    00001554: 	cvttsd2si	init_value(%rip), %r13d
    0000155d: 	movslq	%r12d, %r12
    00001560: 	movb	%r13b, (%rbp,%r12)
    00001565: 	leal	0x28(%rax), %r12d
    00001569: 	addl	%r13d, %ebx
    0000156c: 	cmpl	%r12d, %r15d
    0000156f: 	jle	.Ltmp349 # Offset: 5487
    00001575: 	cvttsd2si	init_value(%rip), %r13d
    0000157e: 	movslq	%r12d, %r12
    00001581: 	movb	%r13b, (%rbp,%r12)
    00001586: 	leal	0x2c(%rax), %r12d
    0000158a: 	addl	%r13d, %ebx
    0000158d: 	cmpl	%r12d, %r15d
    00001590: 	jle	.Ltmp349 # Offset: 5520
    00001592: 	cvttsd2si	init_value(%rip), %r13d
    0000159b: 	movslq	%r12d, %r12
    0000159e: 	movb	%r13b, (%rbp,%r12)
    000015a3: 	leal	0x30(%rax), %r12d
    000015a7: 	addl	%r13d, %ebx
    000015aa: 	cmpl	%r12d, %r15d
    000015ad: 	jle	.Ltmp349 # Offset: 5549
    000015af: 	cvttsd2si	init_value(%rip), %r13d
    000015b8: 	movslq	%r12d, %r12
    000015bb: 	movb	%r13b, (%rbp,%r12)
    000015c0: 	leal	0x34(%rax), %r12d
    000015c4: 	addl	%r13d, %ebx
    000015c7: 	cmpl	%r12d, %r15d
    000015ca: 	jle	.Ltmp349 # Offset: 5578
    000015cc: 	cvttsd2si	init_value(%rip), %r13d
    000015d5: 	movslq	%r12d, %r12
    000015d8: 	addl	$0x38, %eax
    000015db: 	movb	%r13b, (%rbp,%r12)
    000015e0: 	addl	%r13d, %ebx
    000015e3: 	cmpl	%eax, %r15d
    000015e6: 	jle	.Ltmp349 # Offset: 5606
    000015e8: 	cvttsd2si	init_value(%rip), %r12d
    000015f1: 	cltq
    000015f3: 	movb	%r12b, (%rbp,%rax)
    000015f8: 	addl	%r12d, %ebx
.Ltmp349:
    000015fb: 	leaq	0x2(%rbp,%r11), %r12
    00001600: 	leaq	0x1(%rbp,%rsi), %rax
    00001605: 	cmpq	%r10, %r12
    00001608: 	setbe	%r13b
    0000160c: 	cmpq	%r9, %rax
    0000160f: 	setae	%r12b
    00001613: 	orb	%r13b, %r12b
    00001616: 	je	.Ltmp350 # Offset: 5654
    0000161c: 	testb	%r8b, %r8b
    0000161f: 	je	.Ltmp350 # Offset: 5663
    00001625: 	movsd	init_value(%rip), %xmm1
    0000162d: 	movl	%edx, %r12d
    00001630: 	pxor	%xmm4, %xmm4
    00001634: 	movdqa	DATAat0x36f20(%rip), %xmm2
    0000163c: 	shrl	$0x4, %r12d
    00001640: 	movdqa	DATAat0x36f30(%rip), %xmm7
    00001648: 	unpcklpd	%xmm1, %xmm1
    0000164c: 	subl	$0x1, %r12d
    00001650: 	cvttpd2dq	%xmm1, %xmm1
    00001654: 	punpcklqdq	%xmm1, %xmm1
    00001658: 	shlq	$0x6, %r12
    0000165c: 	movdqa	%xmm1, %xmm5
    00001660: 	leaq	0x40(%rax,%r12), %r13
    00001665: 	punpckhwd	%xmm1, %xmm5
.Ltmp351:
    00001669: 	movdqa	%xmm1, %xmm0
    0000166d: 	addq	$0x40, %rax
    00001671: 	punpcklwd	%xmm1, %xmm0
    00001675: 	movdqa	%xmm0, %xmm6
    00001679: 	punpcklwd	%xmm5, %xmm0
    0000167d: 	punpckhwd	%xmm5, %xmm6
    00001681: 	punpcklwd	%xmm6, %xmm0
    00001685: 	pand	%xmm2, %xmm0
    00001689: 	packuswb	%xmm0, %xmm0
    0000168d: 	paddb	%xmm7, %xmm0
    00001691: 	movd	%xmm0, %r12d
    00001696: 	paddb	%xmm0, %xmm4
    0000169a: 	movb	%r12b, -0x40(%rax)
    0000169e: 	movaps	%xmm0, 0x310(%rsp)
    000016a6: 	movzbl	0x311(%rsp), %r12d
    000016af: 	movb	%r12b, -0x3c(%rax)
    000016b3: 	movaps	%xmm0, 0x300(%rsp)
    000016bb: 	movzbl	0x302(%rsp), %r12d
    000016c4: 	movb	%r12b, -0x38(%rax)
    000016c8: 	movaps	%xmm0, 0x2f0(%rsp)
    000016d0: 	movzbl	0x2f3(%rsp), %r12d
    000016d9: 	movb	%r12b, -0x34(%rax)
    000016dd: 	movaps	%xmm0, 0x2e0(%rsp)
    000016e5: 	movzbl	0x2e4(%rsp), %r12d
    000016ee: 	movb	%r12b, -0x30(%rax)
    000016f2: 	movaps	%xmm0, 0x2d0(%rsp)
    000016fa: 	movzbl	0x2d5(%rsp), %r12d
    00001703: 	movb	%r12b, -0x2c(%rax)
    00001707: 	movaps	%xmm0, 0x2c0(%rsp)
    0000170f: 	movzbl	0x2c6(%rsp), %r12d
    00001718: 	movb	%r12b, -0x28(%rax)
    0000171c: 	movaps	%xmm0, 0x2b0(%rsp)
    00001724: 	movzbl	0x2b7(%rsp), %r12d
    0000172d: 	movb	%r12b, -0x24(%rax)
    00001731: 	movaps	%xmm0, 0x2a0(%rsp)
    00001739: 	movzbl	0x2a8(%rsp), %r12d
    00001742: 	movb	%r12b, -0x20(%rax)
    00001746: 	movaps	%xmm0, 0x290(%rsp)
    0000174e: 	movzbl	0x299(%rsp), %r12d
    00001757: 	movb	%r12b, -0x1c(%rax)
    0000175b: 	movaps	%xmm0, 0x280(%rsp)
    00001763: 	movzbl	0x28a(%rsp), %r12d
    0000176c: 	movb	%r12b, -0x18(%rax)
    00001770: 	movaps	%xmm0, 0x270(%rsp)
    00001778: 	movzbl	0x27b(%rsp), %r12d
    00001781: 	movb	%r12b, -0x14(%rax)
    00001785: 	movaps	%xmm0, 0x260(%rsp)
    0000178d: 	movzbl	0x26c(%rsp), %r12d
    00001796: 	movb	%r12b, -0x10(%rax)
    0000179a: 	movaps	%xmm0, 0x250(%rsp)
    000017a2: 	movzbl	0x25d(%rsp), %r12d
    000017ab: 	movb	%r12b, -0xc(%rax)
    000017af: 	movaps	%xmm0, 0x240(%rsp)
    000017b7: 	movzbl	0x24e(%rsp), %r12d
    000017c0: 	movb	%r12b, -0x8(%rax)
    000017c4: 	movaps	%xmm0, 0x230(%rsp)
    000017cc: 	movzbl	0x23f(%rsp), %r12d
    000017d5: 	movb	%r12b, -0x4(%rax)
    000017d9: 	cmpq	%r13, %rax
    000017dc: 	jne	.Ltmp351 # Offset: 6108
    000017e2: 	movdqa	%xmm4, %xmm0
    000017e6: 	pxor	%xmm1, %xmm1
    000017ea: 	movl	%edx, %r12d
    000017ed: 	psrldq	$0x8, %xmm0
    000017f2: 	andl	$-0x10, %r12d
    000017f6: 	paddb	%xmm4, %xmm0
    000017fa: 	psadbw	%xmm1, %xmm0
    000017fe: 	movd	%xmm0, %eax
    00001802: 	addl	%eax, %ebx
    00001804: 	leal	(%rdi,%r12,4), %eax
    00001808: 	cmpl	%edx, %r12d
    0000180b: 	je	.Ltmp352 # Offset: 6155
    00001811: 	cvttsd2si	init_value(%rip), %r12d
    0000181a: 	leal	0x1(%rax), %r13d
    0000181e: 	movslq	%r13d, %r13
    00001821: 	addl	$0x1, %r12d
    00001825: 	movb	%r12b, (%rbp,%r13)
    0000182a: 	addl	%r12d, %ebx
    0000182d: 	leal	0x4(%rax), %r12d
    00001831: 	cmpl	%r12d, %r15d
    00001834: 	jle	.Ltmp352 # Offset: 6196
    0000183a: 	cvttsd2si	init_value(%rip), %r12d
    00001843: 	leal	0x5(%rax), %r13d
    00001847: 	movslq	%r13d, %r13
    0000184a: 	addl	$0x1, %r12d
    0000184e: 	movb	%r12b, (%rbp,%r13)
    00001853: 	addl	%r12d, %ebx
    00001856: 	leal	0x8(%rax), %r12d
    0000185a: 	cmpl	%r12d, %r15d
    0000185d: 	jle	.Ltmp352 # Offset: 6237
    00001863: 	cvttsd2si	init_value(%rip), %r12d
    0000186c: 	leal	0x9(%rax), %r13d
    00001870: 	movslq	%r13d, %r13
    00001873: 	addl	$0x1, %r12d
    00001877: 	movb	%r12b, (%rbp,%r13)
    0000187c: 	addl	%r12d, %ebx
    0000187f: 	leal	0xc(%rax), %r12d
    00001883: 	cmpl	%r12d, %r15d
    00001886: 	jle	.Ltmp352 # Offset: 6278
    0000188c: 	cvttsd2si	init_value(%rip), %r12d
    00001895: 	leal	0xd(%rax), %r13d
    00001899: 	movslq	%r13d, %r13
    0000189c: 	addl	$0x1, %r12d
    000018a0: 	movb	%r12b, (%rbp,%r13)
    000018a5: 	addl	%r12d, %ebx
    000018a8: 	leal	0x10(%rax), %r12d
    000018ac: 	cmpl	%r12d, %r15d
    000018af: 	jle	.Ltmp352 # Offset: 6319
    000018b5: 	cvttsd2si	init_value(%rip), %r12d
    000018be: 	leal	0x11(%rax), %r13d
    000018c2: 	movslq	%r13d, %r13
    000018c5: 	addl	$0x1, %r12d
    000018c9: 	movb	%r12b, (%rbp,%r13)
    000018ce: 	addl	%r12d, %ebx
    000018d1: 	leal	0x14(%rax), %r12d
    000018d5: 	cmpl	%r12d, %r15d
    000018d8: 	jle	.Ltmp352 # Offset: 6360
    000018de: 	cvttsd2si	init_value(%rip), %r12d
    000018e7: 	leal	0x15(%rax), %r13d
    000018eb: 	movslq	%r13d, %r13
    000018ee: 	addl	$0x1, %r12d
    000018f2: 	movb	%r12b, (%rbp,%r13)
    000018f7: 	addl	%r12d, %ebx
    000018fa: 	leal	0x18(%rax), %r12d
    000018fe: 	cmpl	%r12d, %r15d
    00001901: 	jle	.Ltmp352 # Offset: 6401
    00001907: 	cvttsd2si	init_value(%rip), %r12d
    00001910: 	leal	0x19(%rax), %r13d
    00001914: 	movslq	%r13d, %r13
    00001917: 	addl	$0x1, %r12d
    0000191b: 	movb	%r12b, (%rbp,%r13)
    00001920: 	addl	%r12d, %ebx
    00001923: 	leal	0x1c(%rax), %r12d
    00001927: 	cmpl	%r12d, %r15d
    0000192a: 	jle	.Ltmp352 # Offset: 6442
    00001930: 	cvttsd2si	init_value(%rip), %r12d
    00001939: 	leal	0x1d(%rax), %r13d
    0000193d: 	movslq	%r13d, %r13
    00001940: 	addl	$0x1, %r12d
    00001944: 	movb	%r12b, (%rbp,%r13)
    00001949: 	addl	%r12d, %ebx
    0000194c: 	leal	0x20(%rax), %r12d
    00001950: 	cmpl	%r12d, %r15d
    00001953: 	jle	.Ltmp352 # Offset: 6483
    00001959: 	cvttsd2si	init_value(%rip), %r12d
    00001962: 	leal	0x21(%rax), %r13d
    00001966: 	movslq	%r13d, %r13
    00001969: 	addl	$0x1, %r12d
    0000196d: 	movb	%r12b, (%rbp,%r13)
    00001972: 	addl	%r12d, %ebx
    00001975: 	leal	0x24(%rax), %r12d
    00001979: 	cmpl	%r12d, %r15d
    0000197c: 	jle	.Ltmp352 # Offset: 6524
    00001982: 	cvttsd2si	init_value(%rip), %r12d
    0000198b: 	leal	0x25(%rax), %r13d
    0000198f: 	movslq	%r13d, %r13
    00001992: 	addl	$0x1, %r12d
    00001996: 	movb	%r12b, (%rbp,%r13)
    0000199b: 	addl	%r12d, %ebx
    0000199e: 	leal	0x28(%rax), %r12d
    000019a2: 	cmpl	%r12d, %r15d
    000019a5: 	jle	.Ltmp352 # Offset: 6565
    000019ab: 	cvttsd2si	init_value(%rip), %r12d
    000019b4: 	leal	0x29(%rax), %r13d
    000019b8: 	movslq	%r13d, %r13
    000019bb: 	addl	$0x1, %r12d
    000019bf: 	movb	%r12b, (%rbp,%r13)
    000019c4: 	addl	%r12d, %ebx
    000019c7: 	leal	0x2c(%rax), %r12d
    000019cb: 	cmpl	%r12d, %r15d
    000019ce: 	jle	.Ltmp352 # Offset: 6606
    000019d4: 	cvttsd2si	init_value(%rip), %r12d
    000019dd: 	leal	0x2d(%rax), %r13d
    000019e1: 	movslq	%r13d, %r13
    000019e4: 	addl	$0x1, %r12d
    000019e8: 	movb	%r12b, (%rbp,%r13)
    000019ed: 	addl	%r12d, %ebx
    000019f0: 	leal	0x30(%rax), %r12d
    000019f4: 	cmpl	%r12d, %r15d
    000019f7: 	jle	.Ltmp352 # Offset: 6647
    000019f9: 	cvttsd2si	init_value(%rip), %r12d
    00001a02: 	leal	0x31(%rax), %r13d
    00001a06: 	movslq	%r13d, %r13
    00001a09: 	addl	$0x1, %r12d
    00001a0d: 	movb	%r12b, (%rbp,%r13)
    00001a12: 	addl	%r12d, %ebx
    00001a15: 	leal	0x34(%rax), %r12d
    00001a19: 	cmpl	%r12d, %r15d
    00001a1c: 	jle	.Ltmp352 # Offset: 6684
    00001a1e: 	cvttsd2si	init_value(%rip), %r12d
    00001a27: 	leal	0x35(%rax), %r13d
    00001a2b: 	movslq	%r13d, %r13
    00001a2e: 	addl	$0x1, %r12d
    00001a32: 	movb	%r12b, (%rbp,%r13)
    00001a37: 	addl	%r12d, %ebx
    00001a3a: 	leal	0x38(%rax), %r12d
    00001a3e: 	cmpl	%r12d, %r15d
    00001a41: 	jle	.Ltmp352 # Offset: 6721
    00001a43: 	cvttsd2si	init_value(%rip), %r12d
    00001a4c: 	addl	$0x39, %eax
    00001a4f: 	cltq
    00001a51: 	addl	$0x1, %r12d
    00001a55: 	movb	%r12b, (%rbp,%rax)
    00001a5a: 	addl	%r12d, %ebx
.Ltmp352:
    00001a5d: 	leaq	0x3(%rbp,%r11), %r12
    00001a62: 	leaq	0x2(%rbp,%rsi), %rax
    00001a67: 	cmpq	%r10, %r12
    00001a6a: 	setbe	%r13b
    00001a6e: 	cmpq	%r9, %rax
    00001a71: 	setae	%r12b
    00001a75: 	orb	%r13b, %r12b
    00001a78: 	je	.Ltmp353 # Offset: 6776
    00001a7e: 	testb	%r8b, %r8b
    00001a81: 	je	.Ltmp353 # Offset: 6785
    00001a87: 	movsd	init_value(%rip), %xmm1
    00001a8f: 	movl	%edx, %r12d
    00001a92: 	pxor	%xmm4, %xmm4
    00001a96: 	movdqa	DATAat0x36f20(%rip), %xmm2
    00001a9e: 	shrl	$0x4, %r12d
    00001aa2: 	movdqa	DATAat0x36f40(%rip), %xmm7
    00001aaa: 	unpcklpd	%xmm1, %xmm1
    00001aae: 	subl	$0x1, %r12d
    00001ab2: 	cvttpd2dq	%xmm1, %xmm1
    00001ab6: 	punpcklqdq	%xmm1, %xmm1
    00001aba: 	shlq	$0x6, %r12
    00001abe: 	movdqa	%xmm1, %xmm5
    00001ac2: 	leaq	0x40(%rax,%r12), %r13
    00001ac7: 	punpckhwd	%xmm1, %xmm5
.Ltmp354:
    00001acb: 	movdqa	%xmm1, %xmm0
    00001acf: 	addq	$0x40, %rax
    00001ad3: 	punpcklwd	%xmm1, %xmm0
    00001ad7: 	movdqa	%xmm0, %xmm6
    00001adb: 	punpcklwd	%xmm5, %xmm0
    00001adf: 	punpckhwd	%xmm5, %xmm6
    00001ae3: 	punpcklwd	%xmm6, %xmm0
    00001ae7: 	pand	%xmm2, %xmm0
    00001aeb: 	packuswb	%xmm0, %xmm0
    00001aef: 	paddb	%xmm7, %xmm0
    00001af3: 	movd	%xmm0, %r12d
    00001af8: 	paddb	%xmm0, %xmm4
    00001afc: 	movb	%r12b, -0x40(%rax)
    00001b00: 	movaps	%xmm0, 0x220(%rsp)
    00001b08: 	movzbl	0x221(%rsp), %r12d
    00001b11: 	movb	%r12b, -0x3c(%rax)
    00001b15: 	movaps	%xmm0, 0x210(%rsp)
    00001b1d: 	movzbl	0x212(%rsp), %r12d
    00001b26: 	movb	%r12b, -0x38(%rax)
    00001b2a: 	movaps	%xmm0, 0x200(%rsp)
    00001b32: 	movzbl	0x203(%rsp), %r12d
    00001b3b: 	movb	%r12b, -0x34(%rax)
    00001b3f: 	movaps	%xmm0, 0x1f0(%rsp)
    00001b47: 	movzbl	0x1f4(%rsp), %r12d
    00001b50: 	movb	%r12b, -0x30(%rax)
    00001b54: 	movaps	%xmm0, 0x1e0(%rsp)
    00001b5c: 	movzbl	0x1e5(%rsp), %r12d
    00001b65: 	movb	%r12b, -0x2c(%rax)
    00001b69: 	movaps	%xmm0, 0x1d0(%rsp)
    00001b71: 	movzbl	0x1d6(%rsp), %r12d
    00001b7a: 	movb	%r12b, -0x28(%rax)
    00001b7e: 	movaps	%xmm0, 0x1c0(%rsp)
    00001b86: 	movzbl	0x1c7(%rsp), %r12d
    00001b8f: 	movb	%r12b, -0x24(%rax)
    00001b93: 	movaps	%xmm0, 0x1b0(%rsp)
    00001b9b: 	movzbl	0x1b8(%rsp), %r12d
    00001ba4: 	movb	%r12b, -0x20(%rax)
    00001ba8: 	movaps	%xmm0, 0x1a0(%rsp)
    00001bb0: 	movzbl	0x1a9(%rsp), %r12d
    00001bb9: 	movb	%r12b, -0x1c(%rax)
    00001bbd: 	movaps	%xmm0, 0x190(%rsp)
    00001bc5: 	movzbl	0x19a(%rsp), %r12d
    00001bce: 	movb	%r12b, -0x18(%rax)
    00001bd2: 	movaps	%xmm0, 0x180(%rsp)
    00001bda: 	movzbl	0x18b(%rsp), %r12d
    00001be3: 	movb	%r12b, -0x14(%rax)
    00001be7: 	movaps	%xmm0, 0x170(%rsp)
    00001bef: 	movzbl	0x17c(%rsp), %r12d
    00001bf8: 	movb	%r12b, -0x10(%rax)
    00001bfc: 	movaps	%xmm0, 0x160(%rsp)
    00001c04: 	movzbl	0x16d(%rsp), %r12d
    00001c0d: 	movb	%r12b, -0xc(%rax)
    00001c11: 	movaps	%xmm0, 0x150(%rsp)
    00001c19: 	movzbl	0x15e(%rsp), %r12d
    00001c22: 	movb	%r12b, -0x8(%rax)
    00001c26: 	movaps	%xmm0, 0x140(%rsp)
    00001c2e: 	movzbl	0x14f(%rsp), %r12d
    00001c37: 	movb	%r12b, -0x4(%rax)
    00001c3b: 	cmpq	%rax, %r13
    00001c3e: 	jne	.Ltmp354 # Offset: 7230
    00001c44: 	movdqa	%xmm4, %xmm0
    00001c48: 	pxor	%xmm1, %xmm1
    00001c4c: 	movl	%edx, %r12d
    00001c4f: 	psrldq	$0x8, %xmm0
    00001c54: 	andl	$-0x10, %r12d
    00001c58: 	paddb	%xmm4, %xmm0
    00001c5c: 	psadbw	%xmm1, %xmm0
    00001c60: 	movd	%xmm0, %eax
    00001c64: 	addl	%eax, %ebx
    00001c66: 	leal	(%rdi,%r12,4), %eax
    00001c6a: 	cmpl	%edx, %r12d
    00001c6d: 	je	.Ltmp355 # Offset: 7277
    00001c73: 	cvttsd2si	init_value(%rip), %r12d
    00001c7c: 	leal	0x2(%rax), %r13d
    00001c80: 	movslq	%r13d, %r13
    00001c83: 	addl	$0x2, %r12d
    00001c87: 	movb	%r12b, (%rbp,%r13)
    00001c8c: 	addl	%r12d, %ebx
    00001c8f: 	leal	0x4(%rax), %r12d
    00001c93: 	cmpl	%r12d, %r15d
    00001c96: 	jle	.Ltmp355 # Offset: 7318
    00001c9c: 	cvttsd2si	init_value(%rip), %r12d
    00001ca5: 	leal	0x6(%rax), %r13d
    00001ca9: 	movslq	%r13d, %r13
    00001cac: 	addl	$0x2, %r12d
    00001cb0: 	movb	%r12b, (%rbp,%r13)
    00001cb5: 	addl	%r12d, %ebx
    00001cb8: 	leal	0x8(%rax), %r12d
    00001cbc: 	cmpl	%r12d, %r15d
    00001cbf: 	jle	.Ltmp355 # Offset: 7359
    00001cc5: 	cvttsd2si	init_value(%rip), %r12d
    00001cce: 	leal	0xa(%rax), %r13d
    00001cd2: 	movslq	%r13d, %r13
    00001cd5: 	addl	$0x2, %r12d
    00001cd9: 	movb	%r12b, (%rbp,%r13)
    00001cde: 	addl	%r12d, %ebx
    00001ce1: 	leal	0xc(%rax), %r12d
    00001ce5: 	cmpl	%r12d, %r15d
    00001ce8: 	jle	.Ltmp355 # Offset: 7400
    00001cee: 	cvttsd2si	init_value(%rip), %r12d
    00001cf7: 	leal	0xe(%rax), %r13d
    00001cfb: 	movslq	%r13d, %r13
    00001cfe: 	addl	$0x2, %r12d
    00001d02: 	movb	%r12b, (%rbp,%r13)
    00001d07: 	addl	%r12d, %ebx
    00001d0a: 	leal	0x10(%rax), %r12d
    00001d0e: 	cmpl	%r12d, %r15d
    00001d11: 	jle	.Ltmp355 # Offset: 7441
    00001d17: 	cvttsd2si	init_value(%rip), %r12d
    00001d20: 	leal	0x12(%rax), %r13d
    00001d24: 	movslq	%r13d, %r13
    00001d27: 	addl	$0x2, %r12d
    00001d2b: 	movb	%r12b, (%rbp,%r13)
    00001d30: 	addl	%r12d, %ebx
    00001d33: 	leal	0x14(%rax), %r12d
    00001d37: 	cmpl	%r12d, %r15d
    00001d3a: 	jle	.Ltmp355 # Offset: 7482
    00001d40: 	cvttsd2si	init_value(%rip), %r12d
    00001d49: 	leal	0x16(%rax), %r13d
    00001d4d: 	movslq	%r13d, %r13
    00001d50: 	addl	$0x2, %r12d
    00001d54: 	movb	%r12b, (%rbp,%r13)
    00001d59: 	addl	%r12d, %ebx
    00001d5c: 	leal	0x18(%rax), %r12d
    00001d60: 	cmpl	%r12d, %r15d
    00001d63: 	jle	.Ltmp355 # Offset: 7523
    00001d69: 	cvttsd2si	init_value(%rip), %r12d
    00001d72: 	leal	0x1a(%rax), %r13d
    00001d76: 	movslq	%r13d, %r13
    00001d79: 	addl	$0x2, %r12d
    00001d7d: 	movb	%r12b, (%rbp,%r13)
    00001d82: 	addl	%r12d, %ebx
    00001d85: 	leal	0x1c(%rax), %r12d
    00001d89: 	cmpl	%r12d, %r15d
    00001d8c: 	jle	.Ltmp355 # Offset: 7564
    00001d92: 	cvttsd2si	init_value(%rip), %r12d
    00001d9b: 	leal	0x1e(%rax), %r13d
    00001d9f: 	movslq	%r13d, %r13
    00001da2: 	addl	$0x2, %r12d
    00001da6: 	movb	%r12b, (%rbp,%r13)
    00001dab: 	addl	%r12d, %ebx
    00001dae: 	leal	0x20(%rax), %r12d
    00001db2: 	cmpl	%r12d, %r15d
    00001db5: 	jle	.Ltmp355 # Offset: 7605
    00001dbb: 	cvttsd2si	init_value(%rip), %r12d
    00001dc4: 	leal	0x22(%rax), %r13d
    00001dc8: 	movslq	%r13d, %r13
    00001dcb: 	addl	$0x2, %r12d
    00001dcf: 	movb	%r12b, (%rbp,%r13)
    00001dd4: 	addl	%r12d, %ebx
    00001dd7: 	leal	0x24(%rax), %r12d
    00001ddb: 	cmpl	%r12d, %r15d
    00001dde: 	jle	.Ltmp355 # Offset: 7646
    00001de4: 	cvttsd2si	init_value(%rip), %r12d
    00001ded: 	leal	0x26(%rax), %r13d
    00001df1: 	movslq	%r13d, %r13
    00001df4: 	addl	$0x2, %r12d
    00001df8: 	movb	%r12b, (%rbp,%r13)
    00001dfd: 	addl	%r12d, %ebx
    00001e00: 	leal	0x28(%rax), %r12d
    00001e04: 	cmpl	%r12d, %r15d
    00001e07: 	jle	.Ltmp355 # Offset: 7687
    00001e0d: 	cvttsd2si	init_value(%rip), %r12d
    00001e16: 	leal	0x2a(%rax), %r13d
    00001e1a: 	movslq	%r13d, %r13
    00001e1d: 	addl	$0x2, %r12d
    00001e21: 	movb	%r12b, (%rbp,%r13)
    00001e26: 	addl	%r12d, %ebx
    00001e29: 	leal	0x2c(%rax), %r12d
    00001e2d: 	cmpl	%r12d, %r15d
    00001e30: 	jle	.Ltmp355 # Offset: 7728
    00001e36: 	cvttsd2si	init_value(%rip), %r12d
    00001e3f: 	leal	0x2e(%rax), %r13d
    00001e43: 	movslq	%r13d, %r13
    00001e46: 	addl	$0x2, %r12d
    00001e4a: 	movb	%r12b, (%rbp,%r13)
    00001e4f: 	addl	%r12d, %ebx
    00001e52: 	leal	0x30(%rax), %r12d
    00001e56: 	cmpl	%r12d, %r15d
    00001e59: 	jle	.Ltmp355 # Offset: 7769
    00001e5b: 	cvttsd2si	init_value(%rip), %r12d
    00001e64: 	leal	0x32(%rax), %r13d
    00001e68: 	movslq	%r13d, %r13
    00001e6b: 	addl	$0x2, %r12d
    00001e6f: 	movb	%r12b, (%rbp,%r13)
    00001e74: 	addl	%r12d, %ebx
    00001e77: 	leal	0x34(%rax), %r12d
    00001e7b: 	cmpl	%r12d, %r15d
    00001e7e: 	jle	.Ltmp355 # Offset: 7806
    00001e80: 	cvttsd2si	init_value(%rip), %r12d
    00001e89: 	leal	0x36(%rax), %r13d
    00001e8d: 	movslq	%r13d, %r13
    00001e90: 	addl	$0x2, %r12d
    00001e94: 	movb	%r12b, (%rbp,%r13)
    00001e99: 	addl	%r12d, %ebx
    00001e9c: 	leal	0x38(%rax), %r12d
    00001ea0: 	cmpl	%r12d, %r15d
    00001ea3: 	jle	.Ltmp355 # Offset: 7843
    00001ea5: 	cvttsd2si	init_value(%rip), %r12d
    00001eae: 	addl	$0x3a, %eax
    00001eb1: 	cltq
    00001eb3: 	addl	$0x2, %r12d
    00001eb7: 	movb	%r12b, (%rbp,%rax)
    00001ebc: 	addl	%r12d, %ebx
.Ltmp355:
    00001ebf: 	leaq	0x4(%rbp,%r11), %r11
    00001ec4: 	leaq	0x3(%rbp,%rsi), %rax
    00001ec9: 	cmpq	%r10, %r11
    00001ecc: 	setbe	%r10b
    00001ed0: 	cmpq	%r9, %rax
    00001ed3: 	setae	%r9b
    00001ed7: 	orb	%r9b, %r10b
    00001eda: 	je	.Ltmp356 # Offset: 7898
    00001ee0: 	testb	%r8b, %r8b
    00001ee3: 	je	.Ltmp356 # Offset: 7907
    00001ee9: 	movsd	init_value(%rip), %xmm2
    00001ef1: 	movl	%edx, %ecx
    00001ef3: 	pxor	%xmm1, %xmm1
    00001ef7: 	shrl	$0x4, %ecx
    00001efa: 	unpcklpd	%xmm2, %xmm2
    00001efe: 	subl	$0x1, %ecx
    00001f01: 	cvttpd2dq	%xmm2, %xmm2
    00001f05: 	punpcklqdq	%xmm2, %xmm2
    00001f09: 	shlq	$0x6, %rcx
    00001f0d: 	movdqa	%xmm2, %xmm4
    00001f11: 	leaq	0x40(%rax,%rcx), %rsi
    00001f16: 	punpckhwd	%xmm2, %xmm4
.Ltmp357:
    00001f1a: 	movdqa	%xmm2, %xmm0
    00001f1e: 	addq	$0x40, %rax
    00001f22: 	punpcklwd	%xmm2, %xmm0
    00001f26: 	movdqa	%xmm0, %xmm5
    00001f2a: 	punpcklwd	%xmm4, %xmm0
    00001f2e: 	punpckhwd	%xmm4, %xmm5
    00001f32: 	punpcklwd	%xmm5, %xmm0
    00001f36: 	pand	%xmm3, %xmm0
    00001f3a: 	packuswb	%xmm0, %xmm0
    00001f3e: 	paddb	DATAat0x36f30(%rip), %xmm0
    00001f46: 	movd	%xmm0, %ecx
    00001f4a: 	paddb	%xmm0, %xmm1
    00001f4e: 	movb	%cl, -0x40(%rax)
    00001f51: 	movaps	%xmm0, 0x130(%rsp)
    00001f59: 	movzbl	0x131(%rsp), %ecx
    00001f61: 	movb	%cl, -0x3c(%rax)
    00001f64: 	movaps	%xmm0, 0x120(%rsp)
    00001f6c: 	movzbl	0x122(%rsp), %ecx
    00001f74: 	movb	%cl, -0x38(%rax)
    00001f77: 	movaps	%xmm0, 0x110(%rsp)
    00001f7f: 	movzbl	0x113(%rsp), %ecx
    00001f87: 	movb	%cl, -0x34(%rax)
    00001f8a: 	movaps	%xmm0, 0x100(%rsp)
    00001f92: 	movzbl	0x104(%rsp), %ecx
    00001f9a: 	movb	%cl, -0x30(%rax)
    00001f9d: 	movaps	%xmm0, 0xf0(%rsp)
    00001fa5: 	movzbl	0xf5(%rsp), %ecx
    00001fad: 	movb	%cl, -0x2c(%rax)
    00001fb0: 	movaps	%xmm0, 0xe0(%rsp)
    00001fb8: 	movzbl	0xe6(%rsp), %ecx
    00001fc0: 	movb	%cl, -0x28(%rax)
    00001fc3: 	movaps	%xmm0, 0xd0(%rsp)
    00001fcb: 	movzbl	0xd7(%rsp), %ecx
    00001fd3: 	movb	%cl, -0x24(%rax)
    00001fd6: 	movaps	%xmm0, 0xc0(%rsp)
    00001fde: 	movzbl	0xc8(%rsp), %ecx
    00001fe6: 	movb	%cl, -0x20(%rax)
    00001fe9: 	movaps	%xmm0, 0xb0(%rsp)
    00001ff1: 	movzbl	0xb9(%rsp), %ecx
    00001ff9: 	movb	%cl, -0x1c(%rax)
    00001ffc: 	movaps	%xmm0, 0xa0(%rsp)
    00002004: 	movzbl	0xaa(%rsp), %ecx
    0000200c: 	movb	%cl, -0x18(%rax)
    0000200f: 	movaps	%xmm0, 0x90(%rsp)
    00002017: 	movzbl	0x9b(%rsp), %ecx
    0000201f: 	movb	%cl, -0x14(%rax)
    00002022: 	movaps	%xmm0, 0x80(%rsp)
    0000202a: 	movzbl	0x8c(%rsp), %ecx
    00002032: 	movb	%cl, -0x10(%rax)
    00002035: 	movaps	%xmm0, 0x70(%rsp)
    0000203a: 	movzbl	0x7d(%rsp), %ecx
    0000203f: 	movb	%cl, -0xc(%rax)
    00002042: 	movaps	%xmm0, 0x60(%rsp)
    00002047: 	movzbl	0x6e(%rsp), %ecx
    0000204c: 	movb	%cl, -0x8(%rax)
    0000204f: 	movaps	%xmm0, 0x50(%rsp)
    00002054: 	movzbl	0x5f(%rsp), %ecx
    00002059: 	movb	%cl, -0x4(%rax)
    0000205c: 	cmpq	%rsi, %rax
    0000205f: 	jne	.Ltmp357 # Offset: 8287
    00002065: 	movdqa	%xmm1, %xmm0
    00002069: 	movl	%edx, %ecx
    0000206b: 	psrldq	$0x8, %xmm0
    00002070: 	andl	$-0x10, %ecx
    00002073: 	paddb	%xmm1, %xmm0
    00002077: 	pxor	%xmm1, %xmm1
    0000207b: 	psadbw	%xmm1, %xmm0
    0000207f: 	movd	%xmm0, %eax
    00002083: 	addl	%eax, %ebx
    00002085: 	leal	(%rdi,%rcx,4), %eax
    00002088: 	cmpl	%edx, %ecx
    0000208a: 	je	.Ltmp346 # Offset: 8330
    00002090: 	cvttsd2si	init_value(%rip), %edx
    00002098: 	leal	0x3(%rax), %ecx
    0000209b: 	movslq	%ecx, %rcx
    0000209e: 	addl	$0x1, %edx
    000020a1: 	movb	%dl, (%rbp,%rcx)
    000020a5: 	addl	%edx, %ebx
    000020a7: 	leal	0x4(%rax), %edx
    000020aa: 	cmpl	%edx, %r15d
    000020ad: 	jle	.Ltmp346 # Offset: 8365
    000020b3: 	cvttsd2si	init_value(%rip), %edx
    000020bb: 	leal	0x7(%rax), %ecx
    000020be: 	movslq	%ecx, %rcx
    000020c1: 	addl	$0x1, %edx
    000020c4: 	movb	%dl, (%rbp,%rcx)
    000020c8: 	addl	%edx, %ebx
    000020ca: 	leal	0x8(%rax), %edx
    000020cd: 	cmpl	%edx, %r15d
    000020d0: 	jle	.Ltmp346 # Offset: 8400
    000020d6: 	cvttsd2si	init_value(%rip), %edx
    000020de: 	leal	0xb(%rax), %ecx
    000020e1: 	movslq	%ecx, %rcx
    000020e4: 	addl	$0x1, %edx
    000020e7: 	movb	%dl, (%rbp,%rcx)
    000020eb: 	addl	%edx, %ebx
    000020ed: 	leal	0xc(%rax), %edx
    000020f0: 	cmpl	%edx, %r15d
    000020f3: 	jle	.Ltmp346 # Offset: 8435
    000020f9: 	cvttsd2si	init_value(%rip), %edx
    00002101: 	leal	0xf(%rax), %ecx
    00002104: 	movslq	%ecx, %rcx
    00002107: 	addl	$0x1, %edx
    0000210a: 	movb	%dl, (%rbp,%rcx)
    0000210e: 	addl	%edx, %ebx
    00002110: 	leal	0x10(%rax), %edx
    00002113: 	cmpl	%r15d, %edx
    00002116: 	jge	.Ltmp346 # Offset: 8470
    0000211c: 	cvttsd2si	init_value(%rip), %edx
    00002124: 	leal	0x13(%rax), %ecx
    00002127: 	movslq	%ecx, %rcx
    0000212a: 	addl	$0x1, %edx
    0000212d: 	movb	%dl, (%rbp,%rcx)
    00002131: 	addl	%edx, %ebx
    00002133: 	leal	0x14(%rax), %edx
    00002136: 	cmpl	%r15d, %edx
    00002139: 	jge	.Ltmp346 # Offset: 8505
    0000213f: 	cvttsd2si	init_value(%rip), %edx
    00002147: 	leal	0x17(%rax), %ecx
    0000214a: 	movslq	%ecx, %rcx
    0000214d: 	addl	$0x1, %edx
    00002150: 	movb	%dl, (%rbp,%rcx)
    00002154: 	addl	%edx, %ebx
    00002156: 	leal	0x18(%rax), %edx
    00002159: 	cmpl	%r15d, %edx
    0000215c: 	jge	.Ltmp346 # Offset: 8540
    00002162: 	cvttsd2si	init_value(%rip), %edx
    0000216a: 	leal	0x1b(%rax), %ecx
    0000216d: 	movslq	%ecx, %rcx
    00002170: 	addl	$0x1, %edx
    00002173: 	movb	%dl, (%rbp,%rcx)
    00002177: 	addl	%edx, %ebx
    00002179: 	leal	0x1c(%rax), %edx
    0000217c: 	cmpl	%edx, %r15d
    0000217f: 	jle	.Ltmp346 # Offset: 8575
    00002185: 	cvttsd2si	init_value(%rip), %edx
    0000218d: 	leal	0x1f(%rax), %ecx
    00002190: 	movslq	%ecx, %rcx
    00002193: 	addl	$0x1, %edx
    00002196: 	movb	%dl, (%rbp,%rcx)
    0000219a: 	addl	%edx, %ebx
    0000219c: 	leal	0x20(%rax), %edx
    0000219f: 	cmpl	%edx, %r15d
    000021a2: 	jle	.Ltmp346 # Offset: 8610
    000021a8: 	cvttsd2si	init_value(%rip), %edx
    000021b0: 	leal	0x23(%rax), %ecx
    000021b3: 	movslq	%ecx, %rcx
    000021b6: 	addl	$0x1, %edx
    000021b9: 	movb	%dl, (%rbp,%rcx)
    000021bd: 	addl	%edx, %ebx
    000021bf: 	leal	0x24(%rax), %edx
    000021c2: 	cmpl	%edx, %r15d
    000021c5: 	jle	.Ltmp346 # Offset: 8645
    000021cb: 	cvttsd2si	init_value(%rip), %edx
    000021d3: 	leal	0x27(%rax), %ecx
    000021d6: 	movslq	%ecx, %rcx
    000021d9: 	addl	$0x1, %edx
    000021dc: 	movb	%dl, (%rbp,%rcx)
    000021e0: 	addl	%edx, %ebx
    000021e2: 	leal	0x28(%rax), %edx
    000021e5: 	cmpl	%edx, %r15d
    000021e8: 	jle	.Ltmp346 # Offset: 8680
    000021ee: 	cvttsd2si	init_value(%rip), %edx
    000021f6: 	leal	0x2b(%rax), %ecx
    000021f9: 	movslq	%ecx, %rcx
    000021fc: 	addl	$0x1, %edx
    000021ff: 	movb	%dl, (%rbp,%rcx)
    00002203: 	addl	%edx, %ebx
    00002205: 	leal	0x2c(%rax), %edx
    00002208: 	cmpl	%r15d, %edx
    0000220b: 	jge	.Ltmp346 # Offset: 8715
    0000220d: 	cvttsd2si	init_value(%rip), %edx
    00002215: 	leal	0x2f(%rax), %ecx
    00002218: 	movslq	%ecx, %rcx
    0000221b: 	addl	$0x1, %edx
    0000221e: 	movb	%dl, (%rbp,%rcx)
    00002222: 	addl	%edx, %ebx
    00002224: 	leal	0x30(%rax), %edx
    00002227: 	cmpl	%edx, %r15d
    0000222a: 	jle	.Ltmp346 # Offset: 8746
    0000222c: 	cvttsd2si	init_value(%rip), %edx
    00002234: 	leal	0x33(%rax), %ecx
    00002237: 	movslq	%ecx, %rcx
    0000223a: 	addl	$0x1, %edx
    0000223d: 	movb	%dl, (%rbp,%rcx)
    00002241: 	addl	%edx, %ebx
    00002243: 	leal	0x34(%rax), %edx
    00002246: 	cmpl	%edx, %r15d
    00002249: 	jle	.Ltmp346 # Offset: 8777
    0000224b: 	cvttsd2si	init_value(%rip), %edx
    00002253: 	leal	0x37(%rax), %ecx
    00002256: 	movslq	%ecx, %rcx
    00002259: 	addl	$0x1, %edx
    0000225c: 	movb	%dl, (%rbp,%rcx)
    00002260: 	addl	%edx, %ebx
    00002262: 	leal	0x38(%rax), %edx
    00002265: 	cmpl	%edx, %r15d
    00002268: 	jle	.Ltmp346 # Offset: 8808
    0000226a: 	cvttsd2si	init_value(%rip), %edx
    00002272: 	addl	$0x3b, %eax
    00002275: 	cltq
    00002277: 	addl	$0x1, %edx
    0000227a: 	movb	%dl, (%rbp,%rax)
    0000227e: 	addl	%edx, %ebx
.Ltmp346:
    00002280: 	testb	%bl, %bl
    00002282: 	jne	.Ltmp358 # Offset: 8834
.Ltmp368:
    00002288: 	addl	$0x1, 0x40(%rsp)
    0000228d: 	movl	0x40(%rsp), %eax
    00002291: 	cmpl	%eax, iterations(%rip)
    00002297: 	jg	.Ltmp359 # Offset: 8855
.Ltmp331:
    0000229d: 	callq	clock@PLT # Offset: 8861
    000022a2: 	movq	%rax, end_time(%rip)
    000022a9: 	movq	0x7d8(%rsp), %rdx
    000022b1: 	subq	%fs:0x28, %rdx
    000022ba: 	jne	.Ltmp360 # Offset: 8890
    000022c0: 	subq	start_time(%rip), %rax
    000022c7: 	pxor	%xmm0, %xmm0
    000022cb: 	movq	0x38(%rsp), %rdi
    000022d0: 	cvtsi2sd	%rax, %xmm0
    000022d5: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000022dd: 	addq	$0x7e8, %rsp
    000022e4: 	popq	%rbx
    000022e5: 	popq	%rbp
    000022e6: 	popq	%r12
    000022e8: 	popq	%r13
    000022ea: 	popq	%r14
    000022ec: 	popq	%r15
    000022ee: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 8942
.Ltmp340:
    000022f3: 	leaq	0x2(%rdi,%rdx,4), %r9
    000022f8: 	movq	%r11, %r8
    000022fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp361:
    00002300: 	cvttsd2si	init_value(%rip), %ecx
    00002308: 	addq	$0x4, %r8
    0000230c: 	addl	$0x2, %ecx
    0000230f: 	movb	%cl, -0x4(%r8)
    00002313: 	addl	%ecx, %ebx
    00002315: 	cmpq	%r9, %r8
    00002318: 	jne	.Ltmp361 # Offset: 8984
    0000231a: 	jmp	.Ltmp342 # Offset: 8986
.Ltmp337:
    0000231f: 	leaq	0x1(%rdi,%rdx,4), %r9
    00002324: 	movq	%r12, %r8
    00002327: 	nopw	(%rax,%rax) # Size: 9
.Ltmp362:
    00002330: 	cvttsd2si	init_value(%rip), %ecx
    00002338: 	addq	$0x4, %r8
    0000233c: 	addl	$0x1, %ecx
    0000233f: 	movb	%cl, -0x4(%r8)
    00002343: 	addl	%ecx, %ebx
    00002345: 	cmpq	%r9, %r8
    00002348: 	jne	.Ltmp362 # Offset: 9032
    0000234a: 	jmp	.Ltmp339 # Offset: 9034
.Ltmp343:
    0000234f: 	leaq	0x3(%rdi,%rdx,4), %rcx
    00002354: 	movq	%r15, %rdx
    00002357: 	nopw	(%rax,%rax) # Size: 9
.Ltmp363:
    00002360: 	cvttsd2si	init_value(%rip), %eax
    00002368: 	addq	$0x4, %rdx
    0000236c: 	addl	$0x1, %eax
    0000236f: 	movb	%al, -0x4(%rdx)
    00002372: 	addl	%eax, %ebx
    00002374: 	cmpq	%rcx, %rdx
    00002377: 	jne	.Ltmp363 # Offset: 9079
    00002379: 	jmp	.Ltmp333 # Offset: 9081
.Ltmp334:
    0000237e: 	leaq	(%rdi,%r8,4), %rcx
    00002382: 	movq	%rdi, %rax
    00002385: 	nopl	(%rax) # Size: 3
.Ltmp364:
    00002388: 	cvttsd2si	init_value(%rip), %edx
    00002390: 	addq	$0x4, %rax
    00002394: 	movb	%dl, -0x4(%rax)
    00002397: 	addl	%edx, %ebx
    00002399: 	cmpq	%rcx, %rax
    0000239c: 	jne	.Ltmp364 # Offset: 9116
    0000239e: 	jmp	.Ltmp336 # Offset: 9118
.Ltmp358:
    000023a3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000023aa: 	movl	$0x5, %edx
    000023af: 	leaq	DATAat0x35004(%rip), %rsi
    000023b6: 	movq	%r12, %rdi
    000023b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9145
    000023be: 	cmpq	$0x0, 0x38(%rsp)
    000023c4: 	je	.Ltmp365 # Offset: 9156
    000023ca: 	movq	0x38(%rsp), %r14
    000023cf: 	movq	%r14, %rdi
    000023d2: 	callq	strlen@PLT # Offset: 9170
    000023d7: 	movq	%r14, %rsi
    000023da: 	movq	%r12, %rdi
    000023dd: 	movq	%rax, %rdx
    000023e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9184
.Ltmp375:
    000023e5: 	movq	%r12, %rdi
    000023e8: 	leaq	0x7d7(%rsp), %r13
    000023f0: 	movl	$0xd, %edx
    000023f5: 	leaq	DATAat0x3500a(%rip), %rsi
    000023fc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9212
    00002401: 	movq	%r13, %rsi
    00002404: 	movq	%r12, %rdi
    00002407: 	movl	$0x1, %edx
    0000240c: 	movb	%bl, 0x7d7(%rsp)
    00002413: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9235
    00002418: 	movl	$0xb, %edx
    0000241d: 	leaq	DATAat0x35018(%rip), %rsi
    00002424: 	movq	%rax, %r12
    00002427: 	movq	%rax, %rdi
    0000242a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9258
    0000242f: 	movq	%r13, %rsi
    00002432: 	movq	%r12, %rdi
    00002435: 	movl	$0x1, %edx
    0000243a: 	movb	$0x0, 0x7d7(%rsp)
    00002442: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9282
    00002447: 	movq	%rax, %r13
    0000244a: 	movq	(%rax), %rax
    0000244d: 	movq	-0x18(%rax), %rax
    00002451: 	movq	0xf0(%r13,%rax), %r12
    00002459: 	testq	%r12, %r12
    0000245c: 	je	.Ltmp366 # Offset: 9308
    00002462: 	cmpb	$0x0, 0x38(%r12)
    00002468: 	je	.Ltmp367 # Offset: 9320
    0000246e: 	movsbl	0x43(%r12), %esi
.Ltmp373:
    00002474: 	movq	%r13, %rdi
    00002477: 	callq	_ZNSo3putEc@PLT # Offset: 9335
    0000247c: 	movq	%rax, %rdi
    0000247f: 	callq	_ZNSo5flushEv@PLT # Offset: 9343
    00002484: 	movdqa	DATAat0x36f20(%rip), %xmm3
    0000248c: 	jmp	.Ltmp368 # Offset: 9356
.Ltmp353:
    00002491: 	leaq	0x6(%rbp,%rsi), %r12
    00002496: 	movl	%ecx, %r13d
    00002499: 	leaq	(%r12,%r13,4), %r13
.Ltmp369:
    0000249d: 	cvttsd2si	init_value(%rip), %r12d
    000024a6: 	addq	$0x4, %rax
    000024aa: 	addl	$0x2, %r12d
    000024ae: 	movb	%r12b, -0x4(%rax)
    000024b2: 	addl	%r12d, %ebx
    000024b5: 	cmpq	%r13, %rax
    000024b8: 	jne	.Ltmp369 # Offset: 9400
    000024ba: 	jmp	.Ltmp355 # Offset: 9402
.Ltmp350:
    000024bf: 	leaq	0x5(%rbp,%rsi), %r12
    000024c4: 	movl	%ecx, %r13d
    000024c7: 	leaq	(%r12,%r13,4), %r13
.Ltmp370:
    000024cb: 	cvttsd2si	init_value(%rip), %r12d
    000024d4: 	addq	$0x4, %rax
    000024d8: 	addl	$0x1, %r12d
    000024dc: 	movb	%r12b, -0x4(%rax)
    000024e0: 	addl	%r12d, %ebx
    000024e3: 	cmpq	%r13, %rax
    000024e6: 	jne	.Ltmp370 # Offset: 9446
    000024e8: 	jmp	.Ltmp352 # Offset: 9448
.Ltmp356:
    000024ed: 	leaq	0x7(%rbp,%rsi), %rdx
    000024f2: 	movl	%ecx, %ecx
    000024f4: 	leaq	(%rdx,%rcx,4), %rcx
.Ltmp371:
    000024f8: 	cvttsd2si	init_value(%rip), %edx
    00002500: 	addq	$0x4, %rax
    00002504: 	addl	$0x1, %edx
    00002507: 	movb	%dl, -0x4(%rax)
    0000250a: 	addl	%edx, %ebx
    0000250c: 	cmpq	%rcx, %rax
    0000250f: 	jne	.Ltmp371 # Offset: 9487
    00002511: 	jmp	.Ltmp346 # Offset: 9489
.Ltmp347:
    00002516: 	leaq	0x4(%rbp,%rsi), %r12
    0000251b: 	movl	%ecx, %r13d
    0000251e: 	leaq	(%r12,%r13,4), %r13
.Ltmp372:
    00002522: 	cvttsd2si	init_value(%rip), %r12d
    0000252b: 	addq	$0x4, %rax
    0000252f: 	movb	%r12b, -0x4(%rax)
    00002533: 	addl	%r12d, %ebx
    00002536: 	cmpq	%r13, %rax
    00002539: 	jne	.Ltmp372 # Offset: 9529
    0000253b: 	jmp	.Ltmp349 # Offset: 9531
.Ltmp367:
    00002540: 	movq	%r12, %rdi
    00002543: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 9539
    00002548: 	movq	(%r12), %rax
    0000254c: 	movl	$0xa, %esi
    00002551: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00002558: 	movq	0x30(%rax), %rax
    0000255c: 	cmpq	%rdx, %rax
    0000255f: 	je	.Ltmp373 # Offset: 9567
    00002565: 	movq	%r12, %rdi
    00002568: 	callq	*%rax # Offset: 9576
    0000256a: 	movsbl	%al, %esi
    0000256d: 	jmp	.Ltmp373 # Offset: 9581
.Ltmp332:
    00002572: 	xorl	%edi, %edi
    00002574: 	xorl	%ebx, %ebx
    00002576: 	testl	%r15d, %r15d
    00002579: 	jg	.Ltmp374 # Offset: 9593
    0000257f: 	jmp	.Ltmp368 # Offset: 9599
.Ltmp365:
    00002584: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000258b: 	movq	-0x18(%rax), %rdi
    0000258f: 	addq	%r12, %rdi
    00002592: 	movl	0x20(%rdi), %esi
    00002595: 	orl	$0x1, %esi
    00002598: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 9624
    0000259d: 	jmp	.Ltmp375 # Offset: 9629
.Ltmp360:
    000025a2: 	callq	__stack_chk_fail@PLT # Offset: 9634
.Ltmp366:
    000025a7: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 9639
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked4IhEvPT_iPKc"

Binary Function "_Z15test_for_loop_4IhEvPT_iPKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0xc430
  Size        : 0x173f
  MaxSize     : 0x1740
  Offset      : 0xc430
  Section     : .text
  Orc Section : .local.text._Z15test_for_loop_4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x658, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x648(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movl	iterations(%rip), %edx
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	testl	%edx, %edx
    00000046: 	jle	.Ltmp376 # Offset: 70
    0000004c: 	leal	-0x4(%rbx), %esi
    0000004f: 	leal	-0x3(%rbx), %ebp
    00000052: 	cmpl	$0x3b, %esi
    00000055: 	leaq	init_value(%rip), %rbx
    0000005c: 	seta	%dil
    00000060: 	shrl	$0x2, %esi
    00000063: 	leaq	0x8(%rbx), %r14
    00000067: 	leal	0x1(%rsi), %r15d
    0000006b: 	leaq	-0x4(,%r15,4), %r8
    00000073: 	movl	%r15d, %r9d
    00000076: 	movl	%r15d, 0xc(%rsp)
    0000007b: 	leaq	0x1(%r12,%r8), %rax
    00000080: 	cmpq	%rbx, %rax
    00000083: 	setbe	%al
    00000086: 	cmpq	%r14, %r12
    00000089: 	setae	%cl
    0000008c: 	andl	$-0x10, %r9d
    00000090: 	shlq	$0x2, %rsi
    00000094: 	orl	%ecx, %eax
    00000096: 	movl	%r9d, 0x10(%rsp)
    0000009b: 	andl	%edi, %eax
    0000009d: 	movb	%al, 0x5f(%rsp)
    000000a1: 	movl	%r15d, %eax
    000000a4: 	shrl	$0x4, %eax
    000000a7: 	leal	-0x1(%rax), %ecx
    000000aa: 	leal	(,%r9,4), %eax
    000000b2: 	movslq	%eax, %r9
    000000b5: 	shlq	$0x6, %rcx
    000000b9: 	addq	%r12, %r9
    000000bc: 	leaq	0x40(%r12,%rcx), %r11
    000000c1: 	leaq	0x42(%r12,%rcx), %r13
    000000c6: 	movq	%r9, 0x88(%rsp)
    000000ce: 	leal	0x4(%rax), %r9d
    000000d2: 	movl	%r9d, 0x14(%rsp)
    000000d7: 	movslq	%r9d, %r9
    000000da: 	addq	%r12, %r9
    000000dd: 	movq	%r9, 0xa8(%rsp)
    000000e5: 	leal	0x8(%rax), %r9d
    000000e9: 	movl	%r9d, 0x18(%rsp)
    000000ee: 	movslq	%r9d, %r9
    000000f1: 	addq	%r12, %r9
    000000f4: 	movq	%r9, 0xd8(%rsp)
    000000fc: 	leal	0xc(%rax), %r9d
    00000100: 	movl	%r9d, 0x1c(%rsp)
    00000105: 	movslq	%r9d, %r9
    00000108: 	addq	%r12, %r9
    0000010b: 	movq	%r9, 0xf8(%rsp)
    00000113: 	leal	0x10(%rax), %r9d
    00000117: 	movl	%r9d, 0x20(%rsp)
    0000011c: 	movslq	%r9d, %r9
    0000011f: 	addq	%r12, %r9
    00000122: 	movq	%r9, 0x118(%rsp)
    0000012a: 	leal	0x14(%rax), %r9d
    0000012e: 	movl	%r9d, 0x24(%rsp)
    00000133: 	movslq	%r9d, %r9
    00000136: 	addq	%r12, %r9
    00000139: 	movq	%r9, 0x138(%rsp)
    00000141: 	leal	0x18(%rax), %r9d
    00000145: 	movl	%r9d, 0x28(%rsp)
    0000014a: 	movslq	%r9d, %r9
    0000014d: 	leaq	(%r12,%r9), %r10
    00000151: 	leal	0x1c(%rax), %r9d
    00000155: 	movl	%r9d, 0x2c(%rsp)
    0000015a: 	movslq	%r9d, %r9
    0000015d: 	addq	%r12, %r9
    00000160: 	movq	%r10, 0x158(%rsp)
    00000168: 	movq	%r9, 0x178(%rsp)
    00000170: 	leal	0x20(%rax), %r9d
    00000174: 	movl	%r9d, 0x30(%rsp)
    00000179: 	movslq	%r9d, %r9
    0000017c: 	leaq	(%r12,%r9), %r10
    00000180: 	leal	0x24(%rax), %r9d
    00000184: 	movl	%r9d, 0x34(%rsp)
    00000189: 	movslq	%r9d, %r9
    0000018c: 	addq	%r12, %r9
    0000018f: 	movq	%r10, 0x198(%rsp)
    00000197: 	movq	%r9, 0x1b8(%rsp)
    0000019f: 	leal	0x28(%rax), %r9d
    000001a3: 	movl	%r9d, 0x58(%rsp)
    000001a8: 	movslq	%r9d, %r9
    000001ab: 	leaq	(%r12,%r9), %r10
    000001af: 	leal	0x2c(%rax), %r9d
    000001b3: 	movl	%r9d, 0x68(%rsp)
    000001b8: 	movslq	%r9d, %r9
    000001bb: 	addq	%r12, %r9
    000001be: 	movq	%r10, 0x1d8(%rsp)
    000001c6: 	movq	%r9, 0x1f8(%rsp)
    000001ce: 	leal	0x30(%rax), %r9d
    000001d2: 	movl	%r9d, 0x6c(%rsp)
    000001d7: 	movslq	%r9d, %r9
    000001da: 	leaq	(%r12,%r9), %r10
    000001de: 	movq	%r10, 0x238(%rsp)
    000001e6: 	leal	0x34(%rax), %r10d
    000001ea: 	movslq	%r10d, %r9
    000001ed: 	movl	%r10d, 0xb0(%rsp)
    000001f5: 	addq	%r12, %r9
    000001f8: 	movq	%r9, 0x258(%rsp)
    00000200: 	leal	0x38(%rax), %r9d
    00000204: 	movl	%r9d, 0xb4(%rsp)
    0000020c: 	movslq	%r9d, %r9
    0000020f: 	leaq	(%r12,%r9), %r10
    00000213: 	leaq	0x4(%r12,%rsi), %r9
    00000218: 	movq	%r10, 0x278(%rsp)
    00000220: 	leaq	0x1(%r12), %r10
    00000225: 	movq	%r9, 0x200(%rsp)
    0000022d: 	leaq	0x2(%r12,%r8), %r9
    00000232: 	leaq	0x3(%r12,%r8), %r8
    00000237: 	cmpq	%rbx, %r9
    0000023a: 	movq	%r10, 0x50(%rsp)
    0000023f: 	setbe	%r9b
    00000243: 	cmpq	%r14, %r10
    00000246: 	setae	%r10b
    0000024a: 	orl	%r10d, %r9d
    0000024d: 	leal	0x1(%rax), %r10d
    00000251: 	movslq	%r10d, %r10
    00000254: 	andl	%edi, %r9d
    00000257: 	addq	%r12, %r10
    0000025a: 	movb	%r9b, 0x5e(%rsp)
    0000025f: 	leaq	0x41(%r12,%rcx), %r9
    00000264: 	movq	%r10, 0x80(%rsp)
    0000026c: 	leal	0x5(%rax), %r10d
    00000270: 	movslq	%r10d, %r10
    00000273: 	addq	%r12, %r10
    00000276: 	movq	%r10, 0xa0(%rsp)
    0000027e: 	leal	0x9(%rax), %r10d
    00000282: 	movslq	%r10d, %r10
    00000285: 	addq	%r12, %r10
    00000288: 	movq	%r10, 0xd0(%rsp)
    00000290: 	leal	0xd(%rax), %r10d
    00000294: 	movslq	%r10d, %r10
    00000297: 	addq	%r12, %r10
    0000029a: 	movq	%r10, 0xf0(%rsp)
    000002a2: 	leal	0x11(%rax), %r10d
    000002a6: 	movslq	%r10d, %r10
    000002a9: 	addq	%r12, %r10
    000002ac: 	movq	%r10, 0x110(%rsp)
    000002b4: 	leal	0x15(%rax), %r10d
    000002b8: 	movslq	%r10d, %r10
    000002bb: 	addq	%r12, %r10
    000002be: 	movq	%r10, 0x130(%rsp)
    000002c6: 	leal	0x19(%rax), %r10d
    000002ca: 	movslq	%r10d, %r10
    000002cd: 	addq	%r12, %r10
    000002d0: 	movq	%r10, 0x150(%rsp)
    000002d8: 	leal	0x1d(%rax), %r10d
    000002dc: 	movslq	%r10d, %r10
    000002df: 	addq	%r12, %r10
    000002e2: 	movq	%r10, 0x170(%rsp)
    000002ea: 	leal	0x21(%rax), %r10d
    000002ee: 	movslq	%r10d, %r10
    000002f1: 	addq	%r12, %r10
    000002f4: 	movq	%r10, 0x190(%rsp)
    000002fc: 	leal	0x25(%rax), %r10d
    00000300: 	movslq	%r10d, %r10
    00000303: 	addq	%r12, %r10
    00000306: 	movq	%r10, 0x1b0(%rsp)
    0000030e: 	leal	0x29(%rax), %r10d
    00000312: 	movslq	%r10d, %r10
    00000315: 	addq	%r12, %r10
    00000318: 	movq	%r10, 0x1d0(%rsp)
    00000320: 	leal	0x2d(%rax), %r10d
    00000324: 	movslq	%r10d, %r10
    00000327: 	addq	%r12, %r10
    0000032a: 	movq	%r10, 0x1f0(%rsp)
    00000332: 	leal	0x31(%rax), %r10d
    00000336: 	movslq	%r10d, %r10
    00000339: 	addq	%r12, %r10
    0000033c: 	movq	%r10, 0x230(%rsp)
    00000344: 	leal	0x35(%rax), %r10d
    00000348: 	movslq	%r10d, %r10
    0000034b: 	addq	%r12, %r10
    0000034e: 	movq	%r10, 0x250(%rsp)
    00000356: 	leal	0x39(%rax), %r10d
    0000035a: 	movslq	%r10d, %r10
    0000035d: 	addq	%r12, %r10
    00000360: 	cmpq	%rbx, %r8
    00000363: 	movq	%r10, 0x270(%rsp)
    0000036b: 	leaq	0x5(%r12,%rsi), %r10
    00000370: 	setbe	%r8b
    00000374: 	movq	%r10, 0x218(%rsp)
    0000037c: 	leaq	0x2(%r12), %r10
    00000381: 	cmpq	%r14, %r10
    00000384: 	movq	%r10, 0x48(%rsp)
    00000389: 	setae	%r10b
    0000038d: 	orl	%r10d, %r8d
    00000390: 	leal	0x2(%rax), %r10d
    00000394: 	andl	%edi, %r8d
    00000397: 	movslq	%r10d, %r10
    0000039a: 	movb	%r8b, 0x5d(%rsp)
    0000039f: 	leaq	(%r12,%r10), %r8
    000003a3: 	leal	0x6(%rax), %r10d
    000003a7: 	movslq	%r10d, %r10
    000003aa: 	movq	%r8, 0x78(%rsp)
    000003af: 	leaq	(%r12,%r10), %r8
    000003b3: 	leal	0xa(%rax), %r10d
    000003b7: 	movslq	%r10d, %r10
    000003ba: 	movq	%r8, 0x98(%rsp)
    000003c2: 	leaq	(%r12,%r10), %r8
    000003c6: 	leal	0xe(%rax), %r10d
    000003ca: 	movslq	%r10d, %r10
    000003cd: 	movq	%r8, 0xc8(%rsp)
    000003d5: 	leaq	(%r12,%r10), %r8
    000003d9: 	leal	0x12(%rax), %r10d
    000003dd: 	movslq	%r10d, %r10
    000003e0: 	movq	%r8, 0xe8(%rsp)
    000003e8: 	leaq	(%r12,%r10), %r8
    000003ec: 	leal	0x16(%rax), %r10d
    000003f0: 	movslq	%r10d, %r10
    000003f3: 	movq	%r8, 0x108(%rsp)
    000003fb: 	leaq	(%r12,%r10), %r8
    000003ff: 	leal	0x1a(%rax), %r10d
    00000403: 	movslq	%r10d, %r10
    00000406: 	movq	%r8, 0x128(%rsp)
    0000040e: 	leaq	(%r12,%r10), %r8
    00000412: 	leal	0x1e(%rax), %r10d
    00000416: 	movslq	%r10d, %r10
    00000419: 	movq	%r8, 0x148(%rsp)
    00000421: 	leaq	(%r12,%r10), %r8
    00000425: 	leal	0x22(%rax), %r10d
    00000429: 	movslq	%r10d, %r10
    0000042c: 	movq	%r8, 0x168(%rsp)
    00000434: 	leaq	(%r12,%r10), %r8
    00000438: 	leal	0x26(%rax), %r10d
    0000043c: 	movslq	%r10d, %r10
    0000043f: 	movq	%r8, 0x188(%rsp)
    00000447: 	leaq	(%r12,%r10), %r8
    0000044b: 	leal	0x2a(%rax), %r10d
    0000044f: 	movslq	%r10d, %r10
    00000452: 	movq	%r8, 0x1a8(%rsp)
    0000045a: 	leaq	(%r12,%r10), %r8
    0000045e: 	leal	0x2e(%rax), %r10d
    00000462: 	movslq	%r10d, %r10
    00000465: 	movq	%r8, 0x1c8(%rsp)
    0000046d: 	leaq	(%r12,%r10), %r8
    00000471: 	leal	0x32(%rax), %r10d
    00000475: 	movslq	%r10d, %r10
    00000478: 	movq	%r8, 0x1e8(%rsp)
    00000480: 	leaq	(%r12,%r10), %r8
    00000484: 	leal	0x36(%rax), %r10d
    00000488: 	movslq	%r10d, %r10
    0000048b: 	movq	%r8, 0x228(%rsp)
    00000493: 	movdqa	DATAat0x36f20(%rip), %xmm1
    0000049b: 	leaq	(%r12,%r10), %r8
    0000049f: 	leal	0x3a(%rax), %r10d
    000004a3: 	movq	%r12, 0x60(%rsp)
    000004a8: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000004b0: 	movslq	%r10d, %r10
    000004b3: 	movq	%r8, 0x248(%rsp)
    000004bb: 	movdqa	DATAat0x36f40(%rip), %xmm2
    000004c3: 	leaq	(%r12,%r10), %r8
    000004c7: 	leaq	(%r12,%r15,4), %r10
    000004cb: 	movq	%r8, 0x268(%rsp)
    000004d3: 	leaq	0x6(%r12,%rsi), %r8
    000004d8: 	cmpq	%rbx, %r10
    000004db: 	leaq	0x43(%r12,%rcx), %r15
    000004e0: 	movq	%r8, 0x208(%rsp)
    000004e8: 	leaq	0x3(%r12), %r8
    000004ed: 	setbe	%r10b
    000004f1: 	cmpq	%r14, %r8
    000004f4: 	movq	%r8, 0x40(%rsp)
    000004f9: 	setae	%bl
    000004fc: 	xorl	%r14d, %r14d
    000004ff: 	orl	%ebx, %r10d
    00000502: 	movl	%r14d, 0x8(%rsp)
    00000507: 	movq	%r15, %r14
    0000050a: 	movq	%r9, %r15
    0000050d: 	andl	%edi, %r10d
    00000510: 	leal	0x3(%rax), %edi
    00000513: 	movslq	%edi, %rdi
    00000516: 	movb	%r10b, 0x5c(%rsp)
    0000051b: 	addq	%r12, %rdi
    0000051e: 	movq	%rdi, 0x70(%rsp)
    00000523: 	leal	0x7(%rax), %edi
    00000526: 	movslq	%edi, %rdi
    00000529: 	leaq	(%r12,%rdi), %rcx
    0000052d: 	leal	0xb(%rax), %edi
    00000530: 	movslq	%edi, %rdi
    00000533: 	movq	%rcx, 0x90(%rsp)
    0000053b: 	addq	%r12, %rdi
    0000053e: 	movq	%rdi, 0xc0(%rsp)
    00000546: 	leal	0xf(%rax), %edi
    00000549: 	movslq	%edi, %rdi
    0000054c: 	leaq	(%r12,%rdi), %rcx
    00000550: 	leal	0x13(%rax), %edi
    00000553: 	movslq	%edi, %rdi
    00000556: 	movq	%rcx, 0xe0(%rsp)
    0000055e: 	addq	%r12, %rdi
    00000561: 	movq	%rdi, 0x100(%rsp)
    00000569: 	leal	0x17(%rax), %edi
    0000056c: 	movslq	%edi, %rdi
    0000056f: 	leaq	(%r12,%rdi), %rcx
    00000573: 	leal	0x1b(%rax), %edi
    00000576: 	movslq	%edi, %rdi
    00000579: 	movq	%rcx, 0x120(%rsp)
    00000581: 	addq	%r12, %rdi
    00000584: 	movq	%rdi, 0x140(%rsp)
    0000058c: 	leal	0x1f(%rax), %edi
    0000058f: 	movslq	%edi, %rdi
    00000592: 	leaq	(%r12,%rdi), %rcx
    00000596: 	leal	0x23(%rax), %edi
    00000599: 	movslq	%edi, %rdi
    0000059c: 	movq	%rcx, 0x160(%rsp)
    000005a4: 	addq	%r12, %rdi
    000005a7: 	movq	%rdi, 0x180(%rsp)
    000005af: 	leal	0x27(%rax), %edi
    000005b2: 	movslq	%edi, %rdi
    000005b5: 	leaq	(%r12,%rdi), %rcx
    000005b9: 	leal	0x2b(%rax), %edi
    000005bc: 	movslq	%edi, %rdi
    000005bf: 	movq	%rcx, 0x1a0(%rsp)
    000005c7: 	addq	%r12, %rdi
    000005ca: 	movq	%rdi, 0x1c0(%rsp)
    000005d2: 	leal	0x2f(%rax), %edi
    000005d5: 	movslq	%edi, %rdi
    000005d8: 	leaq	(%r12,%rdi), %rcx
    000005dc: 	leal	0x33(%rax), %edi
    000005df: 	movslq	%edi, %rdi
    000005e2: 	movq	%rcx, 0x1e0(%rsp)
    000005ea: 	addq	%r12, %rdi
    000005ed: 	movq	%rdi, 0x220(%rsp)
    000005f5: 	leal	0x37(%rax), %edi
    000005f8: 	addl	$0x3b, %eax
    000005fb: 	cltq
    000005fd: 	movslq	%edi, %rdi
    00000600: 	addq	%r12, %rax
    00000603: 	leaq	(%r12,%rdi), %rcx
    00000607: 	movq	%rax, 0x260(%rsp)
    0000060f: 	leaq	0x7(%r12,%rsi), %rax
    00000614: 	movq	%r11, %r12
    00000617: 	movq	%rcx, 0x240(%rsp)
    0000061f: 	movq	%rax, 0x210(%rsp)
    00000627: 	nopw	(%rax,%rax) # Size: 9
.Ltmp391:
    00000630: 	testl	%ebp, %ebp
    00000632: 	jle	.Ltmp377 # Offset: 1586
    00000638: 	cmpb	$0x0, 0x5f(%rsp)
    0000063d: 	je	.Ltmp378 # Offset: 1597
    00000643: 	movsd	init_value(%rip), %xmm5
    0000064b: 	movq	0x60(%rsp), %rax
    00000650: 	pxor	%xmm4, %xmm4
    00000654: 	movdqa	DATAat0x36f20(%rip), %xmm6
    0000065c: 	unpcklpd	%xmm5, %xmm5
    00000660: 	cvttpd2dq	%xmm5, %xmm5
    00000664: 	punpcklqdq	%xmm5, %xmm5
    00000668: 	movdqa	%xmm5, %xmm7
    0000066c: 	punpckhwd	%xmm5, %xmm7
.Ltmp379:
    00000670: 	movdqa	%xmm5, %xmm0
    00000674: 	addq	$0x40, %rax
    00000678: 	punpcklwd	%xmm5, %xmm0
    0000067c: 	movdqa	%xmm0, %xmm8
    00000681: 	punpcklwd	%xmm7, %xmm0
    00000685: 	punpckhwd	%xmm7, %xmm8
    0000068a: 	punpcklwd	%xmm8, %xmm0
    0000068f: 	pand	%xmm6, %xmm0
    00000693: 	packuswb	%xmm0, %xmm0
    00000697: 	movd	%xmm0, %edx
    0000069b: 	paddb	%xmm0, %xmm4
    0000069f: 	movb	%dl, -0x40(%rax)
    000006a2: 	movaps	%xmm0, 0x630(%rsp)
    000006aa: 	movzbl	0x631(%rsp), %edx
    000006b2: 	movb	%dl, -0x3c(%rax)
    000006b5: 	movaps	%xmm0, 0x620(%rsp)
    000006bd: 	movzbl	0x622(%rsp), %edx
    000006c5: 	movb	%dl, -0x38(%rax)
    000006c8: 	movaps	%xmm0, 0x610(%rsp)
    000006d0: 	movzbl	0x613(%rsp), %edx
    000006d8: 	movb	%dl, -0x34(%rax)
    000006db: 	movaps	%xmm0, 0x600(%rsp)
    000006e3: 	movzbl	0x604(%rsp), %edx
    000006eb: 	movb	%dl, -0x30(%rax)
    000006ee: 	movaps	%xmm0, 0x5f0(%rsp)
    000006f6: 	movzbl	0x5f5(%rsp), %edx
    000006fe: 	movb	%dl, -0x2c(%rax)
    00000701: 	movaps	%xmm0, 0x5e0(%rsp)
    00000709: 	movzbl	0x5e6(%rsp), %edx
    00000711: 	movb	%dl, -0x28(%rax)
    00000714: 	movaps	%xmm0, 0x5d0(%rsp)
    0000071c: 	movzbl	0x5d7(%rsp), %edx
    00000724: 	movb	%dl, -0x24(%rax)
    00000727: 	movaps	%xmm0, 0x5c0(%rsp)
    0000072f: 	movzbl	0x5c8(%rsp), %edx
    00000737: 	movb	%dl, -0x20(%rax)
    0000073a: 	movaps	%xmm0, 0x5b0(%rsp)
    00000742: 	movzbl	0x5b9(%rsp), %edx
    0000074a: 	movb	%dl, -0x1c(%rax)
    0000074d: 	movaps	%xmm0, 0x5a0(%rsp)
    00000755: 	movzbl	0x5aa(%rsp), %edx
    0000075d: 	movb	%dl, -0x18(%rax)
    00000760: 	movaps	%xmm0, 0x590(%rsp)
    00000768: 	movzbl	0x59b(%rsp), %edx
    00000770: 	movb	%dl, -0x14(%rax)
    00000773: 	movaps	%xmm0, 0x580(%rsp)
    0000077b: 	movzbl	0x58c(%rsp), %edx
    00000783: 	movb	%dl, -0x10(%rax)
    00000786: 	movaps	%xmm0, 0x570(%rsp)
    0000078e: 	movzbl	0x57d(%rsp), %edx
    00000796: 	movb	%dl, -0xc(%rax)
    00000799: 	movaps	%xmm0, 0x560(%rsp)
    000007a1: 	movzbl	0x56e(%rsp), %edx
    000007a9: 	movb	%dl, -0x8(%rax)
    000007ac: 	movaps	%xmm0, 0x550(%rsp)
    000007b4: 	movzbl	0x55f(%rsp), %edx
    000007bc: 	movb	%dl, -0x4(%rax)
    000007bf: 	cmpq	%r12, %rax
    000007c2: 	jne	.Ltmp379 # Offset: 1986
    000007c8: 	movdqa	%xmm4, %xmm0
    000007cc: 	movl	0x10(%rsp), %ecx
    000007d0: 	psrldq	$0x8, %xmm0
    000007d5: 	paddb	%xmm0, %xmm4
    000007d9: 	pxor	%xmm0, %xmm0
    000007dd: 	psadbw	%xmm0, %xmm4
    000007e1: 	movd	%xmm4, %eax
    000007e5: 	movl	%eax, %ebx
    000007e7: 	cmpl	%ecx, 0xc(%rsp)
    000007eb: 	je	.Ltmp380 # Offset: 2027
    000007f1: 	cvttsd2si	init_value(%rip), %ebx
    000007f9: 	movq	0x88(%rsp), %rcx
    00000801: 	movb	%bl, (%rcx)
    00000803: 	addl	%eax, %ebx
    00000805: 	cmpl	0x14(%rsp), %ebp
    00000809: 	jle	.Ltmp380 # Offset: 2057
    0000080f: 	cvttsd2si	init_value(%rip), %eax
    00000817: 	movq	0xa8(%rsp), %rcx
    0000081f: 	addl	%eax, %ebx
    00000821: 	movb	%al, (%rcx)
    00000823: 	cmpl	0x18(%rsp), %ebp
    00000827: 	jle	.Ltmp380 # Offset: 2087
    0000082d: 	cvttsd2si	init_value(%rip), %eax
    00000835: 	movq	0xd8(%rsp), %rsi
    0000083d: 	addl	%eax, %ebx
    0000083f: 	movb	%al, (%rsi)
    00000841: 	cmpl	0x1c(%rsp), %ebp
    00000845: 	jle	.Ltmp380 # Offset: 2117
    0000084b: 	cvttsd2si	init_value(%rip), %eax
    00000853: 	movq	0xf8(%rsp), %rdi
    0000085b: 	addl	%eax, %ebx
    0000085d: 	movb	%al, (%rdi)
    0000085f: 	cmpl	0x20(%rsp), %ebp
    00000863: 	jle	.Ltmp380 # Offset: 2147
    00000869: 	cvttsd2si	init_value(%rip), %eax
    00000871: 	movq	0x118(%rsp), %rcx
    00000879: 	addl	%eax, %ebx
    0000087b: 	movb	%al, (%rcx)
    0000087d: 	cmpl	0x24(%rsp), %ebp
    00000881: 	jle	.Ltmp380 # Offset: 2177
    00000887: 	cvttsd2si	init_value(%rip), %eax
    0000088f: 	movq	0x138(%rsp), %rsi
    00000897: 	addl	%eax, %ebx
    00000899: 	movb	%al, (%rsi)
    0000089b: 	cmpl	0x28(%rsp), %ebp
    0000089f: 	jle	.Ltmp380 # Offset: 2207
    000008a5: 	cvttsd2si	init_value(%rip), %eax
    000008ad: 	movq	0x158(%rsp), %rdi
    000008b5: 	addl	%eax, %ebx
    000008b7: 	movb	%al, (%rdi)
    000008b9: 	cmpl	0x2c(%rsp), %ebp
    000008bd: 	jle	.Ltmp380 # Offset: 2237
    000008c3: 	cvttsd2si	init_value(%rip), %eax
    000008cb: 	movq	0x178(%rsp), %rsi
    000008d3: 	addl	%eax, %ebx
    000008d5: 	movb	%al, (%rsi)
    000008d7: 	cmpl	0x30(%rsp), %ebp
    000008db: 	jle	.Ltmp380 # Offset: 2267
    000008e1: 	cvttsd2si	init_value(%rip), %eax
    000008e9: 	movq	0x198(%rsp), %rcx
    000008f1: 	addl	%eax, %ebx
    000008f3: 	movb	%al, (%rcx)
    000008f5: 	cmpl	0x34(%rsp), %ebp
    000008f9: 	jle	.Ltmp380 # Offset: 2297
    000008ff: 	cvttsd2si	init_value(%rip), %eax
    00000907: 	movq	0x1b8(%rsp), %rdi
    0000090f: 	addl	%eax, %ebx
    00000911: 	movb	%al, (%rdi)
    00000913: 	cmpl	0x58(%rsp), %ebp
    00000917: 	jle	.Ltmp380 # Offset: 2327
    0000091d: 	cvttsd2si	init_value(%rip), %eax
    00000925: 	movq	0x1d8(%rsp), %rcx
    0000092d: 	addl	%eax, %ebx
    0000092f: 	movb	%al, (%rcx)
    00000931: 	cmpl	0x68(%rsp), %ebp
    00000935: 	jle	.Ltmp380 # Offset: 2357
    00000937: 	cvttsd2si	init_value(%rip), %eax
    0000093f: 	movq	0x1f8(%rsp), %rsi
    00000947: 	addl	%eax, %ebx
    00000949: 	movb	%al, (%rsi)
    0000094b: 	cmpl	0x6c(%rsp), %ebp
    0000094f: 	jle	.Ltmp380 # Offset: 2383
    00000951: 	cvttsd2si	init_value(%rip), %eax
    00000959: 	movq	0x238(%rsp), %rdi
    00000961: 	addl	%eax, %ebx
    00000963: 	movb	%al, (%rdi)
    00000965: 	cmpl	0xb0(%rsp), %ebp
    0000096c: 	jle	.Ltmp380 # Offset: 2412
    0000096e: 	cvttsd2si	init_value(%rip), %eax
    00000976: 	movq	0x258(%rsp), %rsi
    0000097e: 	addl	%eax, %ebx
    00000980: 	movb	%al, (%rsi)
    00000982: 	cmpl	0xb4(%rsp), %ebp
    00000989: 	jle	.Ltmp380 # Offset: 2441
    0000098b: 	cvttsd2si	init_value(%rip), %eax
    00000993: 	movq	0x278(%rsp), %rdi
    0000099b: 	movb	%al, (%rdi)
    0000099d: 	addl	%eax, %ebx
    0000099f: 	nop # Size: 1
.Ltmp380:
    000009a0: 	cmpb	$0x0, 0x5e(%rsp)
    000009a5: 	je	.Ltmp381 # Offset: 2469
    000009ab: 	movsd	init_value(%rip), %xmm5
    000009b3: 	movq	0x50(%rsp), %rax
    000009b8: 	pxor	%xmm4, %xmm4
    000009bc: 	movdqa	DATAat0x36f20(%rip), %xmm6
    000009c4: 	movdqa	DATAat0x36f30(%rip), %xmm9
    000009cd: 	unpcklpd	%xmm5, %xmm5
    000009d1: 	cvttpd2dq	%xmm5, %xmm5
    000009d5: 	punpcklqdq	%xmm5, %xmm5
    000009d9: 	movdqa	%xmm5, %xmm7
    000009dd: 	punpckhwd	%xmm5, %xmm7
    000009e1: 	nopl	(%rax) # Size: 7
.Ltmp382:
    000009e8: 	movdqa	%xmm5, %xmm0
    000009ec: 	addq	$0x40, %rax
    000009f0: 	punpcklwd	%xmm5, %xmm0
    000009f4: 	movdqa	%xmm0, %xmm8
    000009f9: 	punpcklwd	%xmm7, %xmm0
    000009fd: 	punpckhwd	%xmm7, %xmm8
    00000a02: 	punpcklwd	%xmm8, %xmm0
    00000a07: 	pand	%xmm6, %xmm0
    00000a0b: 	packuswb	%xmm0, %xmm0
    00000a0f: 	paddb	%xmm9, %xmm0
    00000a14: 	movd	%xmm0, %edx
    00000a18: 	paddb	%xmm0, %xmm4
    00000a1c: 	movb	%dl, -0x40(%rax)
    00000a1f: 	movaps	%xmm0, 0x540(%rsp)
    00000a27: 	movzbl	0x541(%rsp), %edx
    00000a2f: 	movb	%dl, -0x3c(%rax)
    00000a32: 	movaps	%xmm0, 0x530(%rsp)
    00000a3a: 	movzbl	0x532(%rsp), %edx
    00000a42: 	movb	%dl, -0x38(%rax)
    00000a45: 	movaps	%xmm0, 0x520(%rsp)
    00000a4d: 	movzbl	0x523(%rsp), %edx
    00000a55: 	movb	%dl, -0x34(%rax)
    00000a58: 	movaps	%xmm0, 0x510(%rsp)
    00000a60: 	movzbl	0x514(%rsp), %edx
    00000a68: 	movb	%dl, -0x30(%rax)
    00000a6b: 	movaps	%xmm0, 0x500(%rsp)
    00000a73: 	movzbl	0x505(%rsp), %edx
    00000a7b: 	movb	%dl, -0x2c(%rax)
    00000a7e: 	movaps	%xmm0, 0x4f0(%rsp)
    00000a86: 	movzbl	0x4f6(%rsp), %edx
    00000a8e: 	movb	%dl, -0x28(%rax)
    00000a91: 	movaps	%xmm0, 0x4e0(%rsp)
    00000a99: 	movzbl	0x4e7(%rsp), %edx
    00000aa1: 	movb	%dl, -0x24(%rax)
    00000aa4: 	movaps	%xmm0, 0x4d0(%rsp)
    00000aac: 	movzbl	0x4d8(%rsp), %edx
    00000ab4: 	movb	%dl, -0x20(%rax)
    00000ab7: 	movaps	%xmm0, 0x4c0(%rsp)
    00000abf: 	movzbl	0x4c9(%rsp), %edx
    00000ac7: 	movb	%dl, -0x1c(%rax)
    00000aca: 	movaps	%xmm0, 0x4b0(%rsp)
    00000ad2: 	movzbl	0x4ba(%rsp), %edx
    00000ada: 	movb	%dl, -0x18(%rax)
    00000add: 	movaps	%xmm0, 0x4a0(%rsp)
    00000ae5: 	movzbl	0x4ab(%rsp), %edx
    00000aed: 	movb	%dl, -0x14(%rax)
    00000af0: 	movaps	%xmm0, 0x490(%rsp)
    00000af8: 	movzbl	0x49c(%rsp), %edx
    00000b00: 	movb	%dl, -0x10(%rax)
    00000b03: 	movaps	%xmm0, 0x480(%rsp)
    00000b0b: 	movzbl	0x48d(%rsp), %edx
    00000b13: 	movb	%dl, -0xc(%rax)
    00000b16: 	movaps	%xmm0, 0x470(%rsp)
    00000b1e: 	movzbl	0x47e(%rsp), %edx
    00000b26: 	movb	%dl, -0x8(%rax)
    00000b29: 	movaps	%xmm0, 0x460(%rsp)
    00000b31: 	movzbl	0x46f(%rsp), %edx
    00000b39: 	movb	%dl, -0x4(%rax)
    00000b3c: 	cmpq	%rax, %r15
    00000b3f: 	jne	.Ltmp382 # Offset: 2879
    00000b45: 	movdqa	%xmm4, %xmm0
    00000b49: 	movl	0x10(%rsp), %esi
    00000b4d: 	psrldq	$0x8, %xmm0
    00000b52: 	paddb	%xmm0, %xmm4
    00000b56: 	pxor	%xmm0, %xmm0
    00000b5a: 	psadbw	%xmm0, %xmm4
    00000b5e: 	movd	%xmm4, %eax
    00000b62: 	addl	%eax, %ebx
    00000b64: 	cmpl	%esi, 0xc(%rsp)
    00000b68: 	je	.Ltmp383 # Offset: 2920
    00000b6e: 	cvttsd2si	init_value(%rip), %eax
    00000b76: 	movq	0x80(%rsp), %rsi
    00000b7e: 	addl	$0x1, %eax
    00000b81: 	movb	%al, (%rsi)
    00000b83: 	addl	%eax, %ebx
    00000b85: 	cmpl	0x14(%rsp), %ebp
    00000b89: 	jle	.Ltmp383 # Offset: 2953
    00000b8f: 	cvttsd2si	init_value(%rip), %eax
    00000b97: 	movq	0xa0(%rsp), %rsi
    00000b9f: 	addl	$0x1, %eax
    00000ba2: 	movb	%al, (%rsi)
    00000ba4: 	addl	%eax, %ebx
    00000ba6: 	cmpl	0x18(%rsp), %ebp
    00000baa: 	jle	.Ltmp383 # Offset: 2986
    00000bb0: 	cvttsd2si	init_value(%rip), %eax
    00000bb8: 	movq	0xd0(%rsp), %rdi
    00000bc0: 	addl	$0x1, %eax
    00000bc3: 	movb	%al, (%rdi)
    00000bc5: 	addl	%eax, %ebx
    00000bc7: 	cmpl	0x1c(%rsp), %ebp
    00000bcb: 	jle	.Ltmp383 # Offset: 3019
    00000bd1: 	cvttsd2si	init_value(%rip), %eax
    00000bd9: 	movq	0xf0(%rsp), %rcx
    00000be1: 	addl	$0x1, %eax
    00000be4: 	movb	%al, (%rcx)
    00000be6: 	addl	%eax, %ebx
    00000be8: 	cmpl	0x20(%rsp), %ebp
    00000bec: 	jle	.Ltmp383 # Offset: 3052
    00000bf2: 	cvttsd2si	init_value(%rip), %eax
    00000bfa: 	movq	0x110(%rsp), %rsi
    00000c02: 	addl	$0x1, %eax
    00000c05: 	movb	%al, (%rsi)
    00000c07: 	addl	%eax, %ebx
    00000c09: 	cmpl	0x24(%rsp), %ebp
    00000c0d: 	jle	.Ltmp383 # Offset: 3085
    00000c13: 	cvttsd2si	init_value(%rip), %eax
    00000c1b: 	movq	0x130(%rsp), %rdi
    00000c23: 	addl	$0x1, %eax
    00000c26: 	movb	%al, (%rdi)
    00000c28: 	addl	%eax, %ebx
    00000c2a: 	cmpl	0x28(%rsp), %ebp
    00000c2e: 	jle	.Ltmp383 # Offset: 3118
    00000c34: 	cvttsd2si	init_value(%rip), %eax
    00000c3c: 	movq	0x150(%rsp), %rsi
    00000c44: 	addl	$0x1, %eax
    00000c47: 	movb	%al, (%rsi)
    00000c49: 	addl	%eax, %ebx
    00000c4b: 	cmpl	0x2c(%rsp), %ebp
    00000c4f: 	jle	.Ltmp383 # Offset: 3151
    00000c55: 	cvttsd2si	init_value(%rip), %eax
    00000c5d: 	movq	0x170(%rsp), %rcx
    00000c65: 	addl	$0x1, %eax
    00000c68: 	movb	%al, (%rcx)
    00000c6a: 	addl	%eax, %ebx
    00000c6c: 	cmpl	0x30(%rsp), %ebp
    00000c70: 	jle	.Ltmp383 # Offset: 3184
    00000c76: 	cvttsd2si	init_value(%rip), %eax
    00000c7e: 	movq	0x190(%rsp), %rdi
    00000c86: 	addl	$0x1, %eax
    00000c89: 	movb	%al, (%rdi)
    00000c8b: 	addl	%eax, %ebx
    00000c8d: 	cmpl	0x34(%rsp), %ebp
    00000c91: 	jle	.Ltmp383 # Offset: 3217
    00000c97: 	cvttsd2si	init_value(%rip), %eax
    00000c9f: 	movq	0x1b0(%rsp), %rcx
    00000ca7: 	addl	$0x1, %eax
    00000caa: 	movb	%al, (%rcx)
    00000cac: 	addl	%eax, %ebx
    00000cae: 	cmpl	0x58(%rsp), %ebp
    00000cb2: 	jle	.Ltmp383 # Offset: 3250
    00000cb8: 	cvttsd2si	init_value(%rip), %eax
    00000cc0: 	movq	0x1d0(%rsp), %rsi
    00000cc8: 	addl	$0x1, %eax
    00000ccb: 	movb	%al, (%rsi)
    00000ccd: 	addl	%eax, %ebx
    00000ccf: 	cmpl	0x68(%rsp), %ebp
    00000cd3: 	jle	.Ltmp383 # Offset: 3283
    00000cd5: 	cvttsd2si	init_value(%rip), %eax
    00000cdd: 	movq	0x1f0(%rsp), %rdi
    00000ce5: 	addl	$0x1, %eax
    00000ce8: 	movb	%al, (%rdi)
    00000cea: 	addl	%eax, %ebx
    00000cec: 	cmpl	0x6c(%rsp), %ebp
    00000cf0: 	jle	.Ltmp383 # Offset: 3312
    00000cf2: 	cvttsd2si	init_value(%rip), %eax
    00000cfa: 	movq	0x230(%rsp), %rsi
    00000d02: 	addl	$0x1, %eax
    00000d05: 	movb	%al, (%rsi)
    00000d07: 	addl	%eax, %ebx
    00000d09: 	cmpl	0xb0(%rsp), %ebp
    00000d10: 	jle	.Ltmp383 # Offset: 3344
    00000d12: 	cvttsd2si	init_value(%rip), %eax
    00000d1a: 	movq	0x250(%rsp), %rcx
    00000d22: 	addl	$0x1, %eax
    00000d25: 	movb	%al, (%rcx)
    00000d27: 	addl	%eax, %ebx
    00000d29: 	cmpl	0xb4(%rsp), %ebp
    00000d30: 	jle	.Ltmp383 # Offset: 3376
    00000d32: 	cvttsd2si	init_value(%rip), %eax
    00000d3a: 	movq	0x270(%rsp), %rcx
    00000d42: 	addl	$0x1, %eax
    00000d45: 	movb	%al, (%rcx)
    00000d47: 	addl	%eax, %ebx
    00000d49: 	nopl	(%rax) # Size: 7
.Ltmp383:
    00000d50: 	cmpb	$0x0, 0x5d(%rsp)
    00000d55: 	je	.Ltmp384 # Offset: 3413
    00000d5b: 	movsd	init_value(%rip), %xmm5
    00000d63: 	movq	0x48(%rsp), %rax
    00000d68: 	pxor	%xmm4, %xmm4
    00000d6c: 	unpcklpd	%xmm5, %xmm5
    00000d70: 	cvttpd2dq	%xmm5, %xmm5
    00000d74: 	punpcklqdq	%xmm5, %xmm5
    00000d78: 	movdqa	%xmm5, %xmm6
    00000d7c: 	punpckhwd	%xmm5, %xmm6
.Ltmp385:
    00000d80: 	movdqa	%xmm5, %xmm0
    00000d84: 	addq	$0x40, %rax
    00000d88: 	punpcklwd	%xmm5, %xmm0
    00000d8c: 	movdqa	%xmm0, %xmm7
    00000d90: 	punpcklwd	%xmm6, %xmm0
    00000d94: 	punpckhwd	%xmm6, %xmm7
    00000d98: 	punpcklwd	%xmm7, %xmm0
    00000d9c: 	pand	%xmm1, %xmm0
    00000da0: 	packuswb	%xmm0, %xmm0
    00000da4: 	paddb	%xmm2, %xmm0
    00000da8: 	movd	%xmm0, %edx
    00000dac: 	paddb	%xmm0, %xmm4
    00000db0: 	movb	%dl, -0x40(%rax)
    00000db3: 	movaps	%xmm0, 0x450(%rsp)
    00000dbb: 	movzbl	0x451(%rsp), %edx
    00000dc3: 	movb	%dl, -0x3c(%rax)
    00000dc6: 	movaps	%xmm0, 0x440(%rsp)
    00000dce: 	movzbl	0x442(%rsp), %edx
    00000dd6: 	movb	%dl, -0x38(%rax)
    00000dd9: 	movaps	%xmm0, 0x430(%rsp)
    00000de1: 	movzbl	0x433(%rsp), %edx
    00000de9: 	movb	%dl, -0x34(%rax)
    00000dec: 	movaps	%xmm0, 0x420(%rsp)
    00000df4: 	movzbl	0x424(%rsp), %edx
    00000dfc: 	movb	%dl, -0x30(%rax)
    00000dff: 	movaps	%xmm0, 0x410(%rsp)
    00000e07: 	movzbl	0x415(%rsp), %edx
    00000e0f: 	movb	%dl, -0x2c(%rax)
    00000e12: 	movaps	%xmm0, 0x400(%rsp)
    00000e1a: 	movzbl	0x406(%rsp), %edx
    00000e22: 	movb	%dl, -0x28(%rax)
    00000e25: 	movaps	%xmm0, 0x3f0(%rsp)
    00000e2d: 	movzbl	0x3f7(%rsp), %edx
    00000e35: 	movb	%dl, -0x24(%rax)
    00000e38: 	movaps	%xmm0, 0x3e0(%rsp)
    00000e40: 	movzbl	0x3e8(%rsp), %edx
    00000e48: 	movb	%dl, -0x20(%rax)
    00000e4b: 	movaps	%xmm0, 0x3d0(%rsp)
    00000e53: 	movzbl	0x3d9(%rsp), %edx
    00000e5b: 	movb	%dl, -0x1c(%rax)
    00000e5e: 	movaps	%xmm0, 0x3c0(%rsp)
    00000e66: 	movzbl	0x3ca(%rsp), %edx
    00000e6e: 	movb	%dl, -0x18(%rax)
    00000e71: 	movaps	%xmm0, 0x3b0(%rsp)
    00000e79: 	movzbl	0x3bb(%rsp), %edx
    00000e81: 	movb	%dl, -0x14(%rax)
    00000e84: 	movaps	%xmm0, 0x3a0(%rsp)
    00000e8c: 	movzbl	0x3ac(%rsp), %edx
    00000e94: 	movb	%dl, -0x10(%rax)
    00000e97: 	movaps	%xmm0, 0x390(%rsp)
    00000e9f: 	movzbl	0x39d(%rsp), %edx
    00000ea7: 	movb	%dl, -0xc(%rax)
    00000eaa: 	movaps	%xmm0, 0x380(%rsp)
    00000eb2: 	movzbl	0x38e(%rsp), %edx
    00000eba: 	movb	%dl, -0x8(%rax)
    00000ebd: 	movaps	%xmm0, 0x370(%rsp)
    00000ec5: 	movzbl	0x37f(%rsp), %edx
    00000ecd: 	movb	%dl, -0x4(%rax)
    00000ed0: 	cmpq	%r13, %rax
    00000ed3: 	jne	.Ltmp385 # Offset: 3795
    00000ed9: 	movdqa	%xmm4, %xmm0
    00000edd: 	movl	0x10(%rsp), %ecx
    00000ee1: 	psrldq	$0x8, %xmm0
    00000ee6: 	paddb	%xmm0, %xmm4
    00000eea: 	pxor	%xmm0, %xmm0
    00000eee: 	psadbw	%xmm0, %xmm4
    00000ef2: 	movd	%xmm4, %eax
    00000ef6: 	addl	%eax, %ebx
    00000ef8: 	cmpl	%ecx, 0xc(%rsp)
    00000efc: 	je	.Ltmp386 # Offset: 3836
    00000f02: 	cvttsd2si	init_value(%rip), %eax
    00000f0a: 	movq	0x78(%rsp), %rcx
    00000f0f: 	addl	$0x2, %eax
    00000f12: 	movb	%al, (%rcx)
    00000f14: 	addl	%eax, %ebx
    00000f16: 	cmpl	0x14(%rsp), %ebp
    00000f1a: 	jle	.Ltmp386 # Offset: 3866
    00000f20: 	cvttsd2si	init_value(%rip), %eax
    00000f28: 	movq	0x98(%rsp), %rdi
    00000f30: 	addl	$0x2, %eax
    00000f33: 	movb	%al, (%rdi)
    00000f35: 	addl	%eax, %ebx
    00000f37: 	cmpl	0x18(%rsp), %ebp
    00000f3b: 	jle	.Ltmp386 # Offset: 3899
    00000f41: 	cvttsd2si	init_value(%rip), %eax
    00000f49: 	movq	0xc8(%rsp), %rcx
    00000f51: 	addl	$0x2, %eax
    00000f54: 	movb	%al, (%rcx)
    00000f56: 	addl	%eax, %ebx
    00000f58: 	cmpl	0x1c(%rsp), %ebp
    00000f5c: 	jle	.Ltmp386 # Offset: 3932
    00000f62: 	cvttsd2si	init_value(%rip), %eax
    00000f6a: 	movq	0xe8(%rsp), %rsi
    00000f72: 	addl	$0x2, %eax
    00000f75: 	movb	%al, (%rsi)
    00000f77: 	addl	%eax, %ebx
    00000f79: 	cmpl	0x20(%rsp), %ebp
    00000f7d: 	jle	.Ltmp386 # Offset: 3965
    00000f83: 	cvttsd2si	init_value(%rip), %eax
    00000f8b: 	movq	0x108(%rsp), %rdi
    00000f93: 	addl	$0x2, %eax
    00000f96: 	movb	%al, (%rdi)
    00000f98: 	addl	%eax, %ebx
    00000f9a: 	cmpl	0x24(%rsp), %ebp
    00000f9e: 	jle	.Ltmp386 # Offset: 3998
    00000fa4: 	cvttsd2si	init_value(%rip), %eax
    00000fac: 	movq	0x128(%rsp), %rsi
    00000fb4: 	addl	$0x2, %eax
    00000fb7: 	movb	%al, (%rsi)
    00000fb9: 	addl	%eax, %ebx
    00000fbb: 	cmpl	0x28(%rsp), %ebp
    00000fbf: 	jle	.Ltmp386 # Offset: 4031
    00000fc5: 	cvttsd2si	init_value(%rip), %eax
    00000fcd: 	movq	0x148(%rsp), %rcx
    00000fd5: 	addl	$0x2, %eax
    00000fd8: 	movb	%al, (%rcx)
    00000fda: 	addl	%eax, %ebx
    00000fdc: 	cmpl	0x2c(%rsp), %ebp
    00000fe0: 	jle	.Ltmp386 # Offset: 4064
    00000fe6: 	cvttsd2si	init_value(%rip), %eax
    00000fee: 	movq	0x168(%rsp), %rdi
    00000ff6: 	addl	$0x2, %eax
    00000ff9: 	movb	%al, (%rdi)
    00000ffb: 	addl	%eax, %ebx
    00000ffd: 	cmpl	0x30(%rsp), %ebp
    00001001: 	jle	.Ltmp386 # Offset: 4097
    00001007: 	cvttsd2si	init_value(%rip), %eax
    0000100f: 	movq	0x188(%rsp), %rcx
    00001017: 	addl	$0x2, %eax
    0000101a: 	movb	%al, (%rcx)
    0000101c: 	addl	%eax, %ebx
    0000101e: 	cmpl	0x34(%rsp), %ebp
    00001022: 	jle	.Ltmp386 # Offset: 4130
    00001028: 	cvttsd2si	init_value(%rip), %eax
    00001030: 	movq	0x1a8(%rsp), %rsi
    00001038: 	addl	$0x2, %eax
    0000103b: 	movb	%al, (%rsi)
    0000103d: 	addl	%eax, %ebx
    0000103f: 	cmpl	0x58(%rsp), %ebp
    00001043: 	jle	.Ltmp386 # Offset: 4163
    00001049: 	cvttsd2si	init_value(%rip), %eax
    00001051: 	movq	0x1c8(%rsp), %rdi
    00001059: 	addl	$0x2, %eax
    0000105c: 	movb	%al, (%rdi)
    0000105e: 	addl	%eax, %ebx
    00001060: 	cmpl	0x68(%rsp), %ebp
    00001064: 	jle	.Ltmp386 # Offset: 4196
    00001066: 	cvttsd2si	init_value(%rip), %eax
    0000106e: 	movq	0x1e8(%rsp), %rsi
    00001076: 	addl	$0x2, %eax
    00001079: 	movb	%al, (%rsi)
    0000107b: 	addl	%eax, %ebx
    0000107d: 	cmpl	0x6c(%rsp), %ebp
    00001081: 	jle	.Ltmp386 # Offset: 4225
    00001083: 	cvttsd2si	init_value(%rip), %eax
    0000108b: 	movq	0x228(%rsp), %rcx
    00001093: 	addl	$0x2, %eax
    00001096: 	movb	%al, (%rcx)
    00001098: 	addl	%eax, %ebx
    0000109a: 	cmpl	0xb0(%rsp), %ebp
    000010a1: 	jle	.Ltmp386 # Offset: 4257
    000010a3: 	cvttsd2si	init_value(%rip), %eax
    000010ab: 	movq	0x248(%rsp), %rsi
    000010b3: 	addl	$0x2, %eax
    000010b6: 	movb	%al, (%rsi)
    000010b8: 	addl	%eax, %ebx
    000010ba: 	cmpl	0xb4(%rsp), %ebp
    000010c1: 	jle	.Ltmp386 # Offset: 4289
    000010c3: 	cvttsd2si	init_value(%rip), %eax
    000010cb: 	movq	0x268(%rsp), %rdi
    000010d3: 	addl	$0x2, %eax
    000010d6: 	movb	%al, (%rdi)
    000010d8: 	addl	%eax, %ebx
    000010da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp386:
    000010e0: 	cmpb	$0x0, 0x5c(%rsp)
    000010e5: 	je	.Ltmp387 # Offset: 4325
    000010eb: 	movsd	init_value(%rip), %xmm5
    000010f3: 	movq	0x40(%rsp), %rax
    000010f8: 	pxor	%xmm4, %xmm4
    000010fc: 	unpcklpd	%xmm5, %xmm5
    00001100: 	cvttpd2dq	%xmm5, %xmm5
    00001104: 	punpcklqdq	%xmm5, %xmm5
    00001108: 	movdqa	%xmm5, %xmm6
    0000110c: 	punpckhwd	%xmm5, %xmm6
.Ltmp388:
    00001110: 	movdqa	%xmm5, %xmm0
    00001114: 	addq	$0x40, %rax
    00001118: 	punpcklwd	%xmm5, %xmm0
    0000111c: 	movdqa	%xmm0, %xmm7
    00001120: 	punpcklwd	%xmm6, %xmm0
    00001124: 	punpckhwd	%xmm6, %xmm7
    00001128: 	punpcklwd	%xmm7, %xmm0
    0000112c: 	pand	%xmm1, %xmm0
    00001130: 	packuswb	%xmm0, %xmm0
    00001134: 	paddb	%xmm3, %xmm0
    00001138: 	movd	%xmm0, %edx
    0000113c: 	paddb	%xmm0, %xmm4
    00001140: 	movb	%dl, -0x40(%rax)
    00001143: 	movaps	%xmm0, 0x360(%rsp)
    0000114b: 	movzbl	0x361(%rsp), %edx
    00001153: 	movb	%dl, -0x3c(%rax)
    00001156: 	movaps	%xmm0, 0x350(%rsp)
    0000115e: 	movzbl	0x352(%rsp), %edx
    00001166: 	movb	%dl, -0x38(%rax)
    00001169: 	movaps	%xmm0, 0x340(%rsp)
    00001171: 	movzbl	0x343(%rsp), %edx
    00001179: 	movb	%dl, -0x34(%rax)
    0000117c: 	movaps	%xmm0, 0x330(%rsp)
    00001184: 	movzbl	0x334(%rsp), %edx
    0000118c: 	movb	%dl, -0x30(%rax)
    0000118f: 	movaps	%xmm0, 0x320(%rsp)
    00001197: 	movzbl	0x325(%rsp), %edx
    0000119f: 	movb	%dl, -0x2c(%rax)
    000011a2: 	movaps	%xmm0, 0x310(%rsp)
    000011aa: 	movzbl	0x316(%rsp), %edx
    000011b2: 	movb	%dl, -0x28(%rax)
    000011b5: 	movaps	%xmm0, 0x300(%rsp)
    000011bd: 	movzbl	0x307(%rsp), %edx
    000011c5: 	movb	%dl, -0x24(%rax)
    000011c8: 	movaps	%xmm0, 0x2f0(%rsp)
    000011d0: 	movzbl	0x2f8(%rsp), %edx
    000011d8: 	movb	%dl, -0x20(%rax)
    000011db: 	movaps	%xmm0, 0x2e0(%rsp)
    000011e3: 	movzbl	0x2e9(%rsp), %edx
    000011eb: 	movb	%dl, -0x1c(%rax)
    000011ee: 	movaps	%xmm0, 0x2d0(%rsp)
    000011f6: 	movzbl	0x2da(%rsp), %edx
    000011fe: 	movb	%dl, -0x18(%rax)
    00001201: 	movaps	%xmm0, 0x2c0(%rsp)
    00001209: 	movzbl	0x2cb(%rsp), %edx
    00001211: 	movb	%dl, -0x14(%rax)
    00001214: 	movaps	%xmm0, 0x2b0(%rsp)
    0000121c: 	movzbl	0x2bc(%rsp), %edx
    00001224: 	movb	%dl, -0x10(%rax)
    00001227: 	movaps	%xmm0, 0x2a0(%rsp)
    0000122f: 	movzbl	0x2ad(%rsp), %edx
    00001237: 	movb	%dl, -0xc(%rax)
    0000123a: 	movaps	%xmm0, 0x290(%rsp)
    00001242: 	movzbl	0x29e(%rsp), %edx
    0000124a: 	movb	%dl, -0x8(%rax)
    0000124d: 	movaps	%xmm0, 0x280(%rsp)
    00001255: 	movzbl	0x28f(%rsp), %edx
    0000125d: 	movb	%dl, -0x4(%rax)
    00001260: 	cmpq	%r14, %rax
    00001263: 	jne	.Ltmp388 # Offset: 4707
    00001269: 	movdqa	%xmm4, %xmm0
    0000126d: 	movl	0x10(%rsp), %esi
    00001271: 	psrldq	$0x8, %xmm0
    00001276: 	paddb	%xmm0, %xmm4
    0000127a: 	pxor	%xmm0, %xmm0
    0000127e: 	psadbw	%xmm0, %xmm4
    00001282: 	movd	%xmm4, %eax
    00001286: 	addl	%eax, %ebx
    00001288: 	cmpl	%esi, 0xc(%rsp)
    0000128c: 	je	.Ltmp389 # Offset: 4748
    00001292: 	cvttsd2si	init_value(%rip), %eax
    0000129a: 	movq	0x70(%rsp), %rsi
    0000129f: 	addl	$0x1, %eax
    000012a2: 	movb	%al, (%rsi)
    000012a4: 	addl	%eax, %ebx
    000012a6: 	cmpl	0x14(%rsp), %ebp
    000012aa: 	jle	.Ltmp389 # Offset: 4778
    000012b0: 	cvttsd2si	init_value(%rip), %eax
    000012b8: 	movq	0x90(%rsp), %rcx
    000012c0: 	addl	$0x1, %eax
    000012c3: 	movb	%al, (%rcx)
    000012c5: 	addl	%eax, %ebx
    000012c7: 	cmpl	0x18(%rsp), %ebp
    000012cb: 	jle	.Ltmp389 # Offset: 4811
    000012d1: 	cvttsd2si	init_value(%rip), %eax
    000012d9: 	movq	0xc0(%rsp), %rsi
    000012e1: 	addl	$0x1, %eax
    000012e4: 	movb	%al, (%rsi)
    000012e6: 	addl	%eax, %ebx
    000012e8: 	cmpl	0x1c(%rsp), %ebp
    000012ec: 	jle	.Ltmp389 # Offset: 4844
    000012f2: 	cvttsd2si	init_value(%rip), %eax
    000012fa: 	movq	0xe0(%rsp), %rdi
    00001302: 	addl	$0x1, %eax
    00001305: 	movb	%al, (%rdi)
    00001307: 	addl	%eax, %ebx
    00001309: 	cmpl	0x20(%rsp), %ebp
    0000130d: 	jle	.Ltmp389 # Offset: 4877
    00001313: 	cvttsd2si	init_value(%rip), %eax
    0000131b: 	movq	0x100(%rsp), %rcx
    00001323: 	addl	$0x1, %eax
    00001326: 	movb	%al, (%rcx)
    00001328: 	addl	%eax, %ebx
    0000132a: 	cmpl	0x24(%rsp), %ebp
    0000132e: 	jle	.Ltmp389 # Offset: 4910
    00001334: 	cvttsd2si	init_value(%rip), %eax
    0000133c: 	movq	0x120(%rsp), %rcx
    00001344: 	addl	$0x1, %eax
    00001347: 	movb	%al, (%rcx)
    00001349: 	addl	%eax, %ebx
    0000134b: 	cmpl	0x28(%rsp), %ebp
    0000134f: 	jle	.Ltmp389 # Offset: 4943
    00001355: 	cvttsd2si	init_value(%rip), %eax
    0000135d: 	movq	0x140(%rsp), %rdi
    00001365: 	addl	$0x1, %eax
    00001368: 	movb	%al, (%rdi)
    0000136a: 	addl	%eax, %ebx
    0000136c: 	cmpl	0x2c(%rsp), %ebp
    00001370: 	jle	.Ltmp389 # Offset: 4976
    00001376: 	cvttsd2si	init_value(%rip), %eax
    0000137e: 	movq	0x160(%rsp), %rsi
    00001386: 	addl	$0x1, %eax
    00001389: 	movb	%al, (%rsi)
    0000138b: 	addl	%eax, %ebx
    0000138d: 	cmpl	0x30(%rsp), %ebp
    00001391: 	jle	.Ltmp389 # Offset: 5009
    00001397: 	cvttsd2si	init_value(%rip), %eax
    0000139f: 	movq	0x180(%rsp), %rsi
    000013a7: 	addl	$0x1, %eax
    000013aa: 	movb	%al, (%rsi)
    000013ac: 	addl	%eax, %ebx
    000013ae: 	cmpl	0x34(%rsp), %ebp
    000013b2: 	jle	.Ltmp389 # Offset: 5042
    000013b8: 	cvttsd2si	init_value(%rip), %eax
    000013c0: 	movq	0x1a0(%rsp), %rdi
    000013c8: 	addl	$0x1, %eax
    000013cb: 	movb	%al, (%rdi)
    000013cd: 	addl	%eax, %ebx
    000013cf: 	cmpl	0x58(%rsp), %ebp
    000013d3: 	jle	.Ltmp389 # Offset: 5075
    000013d9: 	cvttsd2si	init_value(%rip), %eax
    000013e1: 	movq	0x1c0(%rsp), %rcx
    000013e9: 	addl	$0x1, %eax
    000013ec: 	movb	%al, (%rcx)
    000013ee: 	addl	%eax, %ebx
    000013f0: 	cmpl	0x68(%rsp), %ebp
    000013f4: 	jle	.Ltmp389 # Offset: 5108
    000013f6: 	cvttsd2si	init_value(%rip), %eax
    000013fe: 	movq	0x1e0(%rsp), %rcx
    00001406: 	addl	$0x1, %eax
    00001409: 	movb	%al, (%rcx)
    0000140b: 	addl	%eax, %ebx
    0000140d: 	cmpl	0x6c(%rsp), %ebp
    00001411: 	jle	.Ltmp389 # Offset: 5137
    00001413: 	cvttsd2si	init_value(%rip), %eax
    0000141b: 	movq	0x220(%rsp), %rdi
    00001423: 	addl	$0x1, %eax
    00001426: 	movb	%al, (%rdi)
    00001428: 	addl	%eax, %ebx
    0000142a: 	cmpl	0xb0(%rsp), %ebp
    00001431: 	jle	.Ltmp389 # Offset: 5169
    00001433: 	cvttsd2si	init_value(%rip), %eax
    0000143b: 	movq	0x240(%rsp), %rcx
    00001443: 	addl	$0x1, %eax
    00001446: 	movb	%al, (%rcx)
    00001448: 	addl	%eax, %ebx
    0000144a: 	cmpl	0xb4(%rsp), %ebp
    00001451: 	jle	.Ltmp389 # Offset: 5201
    00001453: 	cvttsd2si	init_value(%rip), %eax
    0000145b: 	movq	0x260(%rsp), %rcx
    00001463: 	addl	$0x1, %eax
    00001466: 	movb	%al, (%rcx)
    00001468: 	addl	%eax, %ebx
    0000146a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp389:
    00001470: 	movl	iterations(%rip), %edx
    00001476: 	testb	%bl, %bl
    00001478: 	jne	.Ltmp390 # Offset: 5240
.Ltmp377:
    0000147a: 	addl	$0x1, 0x8(%rsp)
    0000147f: 	movl	0x8(%rsp), %eax
    00001483: 	cmpl	%edx, %eax
    00001485: 	jl	.Ltmp391 # Offset: 5253
.Ltmp376:
    0000148b: 	callq	clock@PLT # Offset: 5259
    00001490: 	movq	%rax, end_time(%rip)
    00001497: 	movq	0x648(%rsp), %rdx
    0000149f: 	subq	%fs:0x28, %rdx
    000014a8: 	jne	.Ltmp392 # Offset: 5288
    000014ae: 	subq	start_time(%rip), %rax
    000014b5: 	pxor	%xmm0, %xmm0
    000014b9: 	movq	0x38(%rsp), %rdi
    000014be: 	cvtsi2sd	%rax, %xmm0
    000014c3: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000014cb: 	addq	$0x658, %rsp
    000014d2: 	popq	%rbx
    000014d3: 	popq	%rbp
    000014d4: 	popq	%r12
    000014d6: 	popq	%r13
    000014d8: 	popq	%r14
    000014da: 	popq	%r15
    000014dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 5340
    000014e1: 	nopl	(%rax) # Size: 7
.Ltmp390:
    000014e8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r8
    000014ef: 	movl	$0x5, %edx
    000014f4: 	leaq	DATAat0x35004(%rip), %rsi
    000014fb: 	movq	%r8, %rdi
    000014fe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5374
    00001503: 	cmpq	$0x0, 0x38(%rsp)
    00001509: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r8
    00001510: 	je	.Ltmp393 # Offset: 5392
    00001516: 	movq	0x38(%rsp), %rdi
    0000151b: 	callq	strlen@PLT # Offset: 5403
    00001520: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r8
    00001527: 	movq	0x38(%rsp), %rsi
    0000152c: 	movq	%r8, %rdi
    0000152f: 	movq	%rax, %rdx
    00001532: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5426
    00001537: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r8
.Ltmp401:
    0000153e: 	movq	%r8, %rdi
    00001541: 	movl	$0xd, %edx
    00001546: 	leaq	DATAat0x3500a(%rip), %rsi
    0000154d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5453
    00001552: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r8
    00001559: 	movl	$0x1, %edx
    0000155e: 	movb	%bl, 0x647(%rsp)
    00001565: 	leaq	0x647(%rsp), %rbx
    0000156d: 	movq	%r8, %rdi
    00001570: 	movq	%rbx, %rsi
    00001573: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5491
    00001578: 	movl	$0xb, %edx
    0000157d: 	leaq	DATAat0x35018(%rip), %rsi
    00001584: 	movq	%rax, %rdi
    00001587: 	movq	%rax, 0xb8(%rsp)
    0000158f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5519
    00001594: 	movq	0xb8(%rsp), %rdi
    0000159c: 	movq	%rbx, %rsi
    0000159f: 	movl	$0x1, %edx
    000015a4: 	movb	$0x0, 0x647(%rsp)
    000015ac: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5548
    000015b1: 	movq	%rax, %rbx
    000015b4: 	movq	(%rax), %rax
    000015b7: 	movq	-0x18(%rax), %rax
    000015bb: 	movq	0xf0(%rbx,%rax), %rdi
    000015c3: 	testq	%rdi, %rdi
    000015c6: 	je	.Ltmp394 # Offset: 5574
    000015cc: 	cmpb	$0x0, 0x38(%rdi)
    000015d0: 	je	.Ltmp395 # Offset: 5584
    000015d6: 	movsbl	0x43(%rdi), %esi
.Ltmp400:
    000015da: 	movq	%rbx, %rdi
    000015dd: 	callq	_ZNSo3putEc@PLT # Offset: 5597
    000015e2: 	movq	%rax, %rdi
    000015e5: 	callq	_ZNSo5flushEv@PLT # Offset: 5605
    000015ea: 	movl	iterations(%rip), %edx
    000015f0: 	movdqa	DATAat0x36f40(%rip), %xmm2
    000015f8: 	movdqa	DATAat0x36f30(%rip), %xmm3
    00001600: 	movdqa	DATAat0x36f20(%rip), %xmm1
    00001608: 	jmp	.Ltmp377 # Offset: 5640
    0000160d: 	nopl	(%rax) # Size: 3
.Ltmp387:
    00001610: 	movq	0x40(%rsp), %rdx
    00001615: 	movq	0x210(%rsp), %rcx
    0000161d: 	nopl	(%rax) # Size: 3
.Ltmp396:
    00001620: 	cvttsd2si	init_value(%rip), %eax
    00001628: 	addq	$0x4, %rdx
    0000162c: 	addl	$0x1, %eax
    0000162f: 	movb	%al, -0x4(%rdx)
    00001632: 	addl	%eax, %ebx
    00001634: 	cmpq	%rcx, %rdx
    00001637: 	jne	.Ltmp396 # Offset: 5687
    00001639: 	jmp	.Ltmp389 # Offset: 5689
    0000163e: 	nop # Size: 2
.Ltmp384:
    00001640: 	movq	0x48(%rsp), %rdx
    00001645: 	movq	0x208(%rsp), %rcx
    0000164d: 	nopl	(%rax) # Size: 3
.Ltmp397:
    00001650: 	cvttsd2si	init_value(%rip), %eax
    00001658: 	addq	$0x4, %rdx
    0000165c: 	addl	$0x2, %eax
    0000165f: 	movb	%al, -0x4(%rdx)
    00001662: 	addl	%eax, %ebx
    00001664: 	cmpq	%rdx, %rcx
    00001667: 	jne	.Ltmp397 # Offset: 5735
    00001669: 	jmp	.Ltmp386 # Offset: 5737
    0000166e: 	nop # Size: 2
.Ltmp381:
    00001670: 	movq	0x50(%rsp), %rdx
    00001675: 	movq	0x218(%rsp), %rcx
    0000167d: 	nopl	(%rax) # Size: 3
.Ltmp398:
    00001680: 	cvttsd2si	init_value(%rip), %eax
    00001688: 	addq	$0x4, %rdx
    0000168c: 	addl	$0x1, %eax
    0000168f: 	movb	%al, -0x4(%rdx)
    00001692: 	addl	%eax, %ebx
    00001694: 	cmpq	%rcx, %rdx
    00001697: 	jne	.Ltmp398 # Offset: 5783
    00001699: 	jmp	.Ltmp383 # Offset: 5785
    0000169e: 	nop # Size: 2
.Ltmp378:
    000016a0: 	movq	0x60(%rsp), %rax
    000016a5: 	movq	0x200(%rsp), %rcx
    000016ad: 	xorl	%ebx, %ebx
    000016af: 	nop # Size: 1
.Ltmp399:
    000016b0: 	cvttsd2si	init_value(%rip), %edx
    000016b8: 	addq	$0x4, %rax
    000016bc: 	movb	%dl, -0x4(%rax)
    000016bf: 	addl	%edx, %ebx
    000016c1: 	cmpq	%rcx, %rax
    000016c4: 	jne	.Ltmp399 # Offset: 5828
    000016c6: 	jmp	.Ltmp380 # Offset: 5830
    000016cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp395:
    000016d0: 	movq	%rdi, 0xb8(%rsp)
    000016d8: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 5848
    000016dd: 	movq	0xb8(%rsp), %rdi
    000016e5: 	movl	$0xa, %esi
    000016ea: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000016f1: 	movq	(%rdi), %rax
    000016f4: 	movq	0x30(%rax), %rax
    000016f8: 	cmpq	%rdx, %rax
    000016fb: 	je	.Ltmp400 # Offset: 5883
    00001701: 	callq	*%rax # Offset: 5889
    00001703: 	movsbl	%al, %esi
    00001706: 	jmp	.Ltmp400 # Offset: 5894
    0000170b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp393:
    00001710: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001717: 	movq	-0x18(%rax), %rdi
    0000171b: 	addq	%r8, %rdi
    0000171e: 	movl	0x20(%rdi), %esi
    00001721: 	orl	$0x1, %esi
    00001724: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 5924
    00001729: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r8
    00001730: 	jmp	.Ltmp401 # Offset: 5936
.Ltmp394:
    00001735: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 5941
.Ltmp392:
    0000173a: 	callq	__stack_chk_fail@PLT # Offset: 5946
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_for_loop_4IhEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked2IiEvPT_iPKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0xdb70
  Size        : 0x312
  MaxSize     : 0x320
  Offset      : 0xdb70
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked2IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movl	%esi, 0x1c(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp402 # Offset: 51
    00000039: 	movl	%r15d, %eax
    0000003c: 	leal	-0x1(%r15), %edi
    00000040: 	leaq	0x4(%rbx), %r13
    00000044: 	movl	$0x0, 0x8(%rsp)
    0000004c: 	subl	$0x402, %eax
    00000051: 	movl	%edi, 0x18(%rsp)
    00000055: 	leal	-0x401(%r15), %r12d
    0000005c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000063: 	andl	$0xfffffc00, %eax
    00000068: 	addl	$0x400, %eax
    0000006d: 	movl	%eax, 0xc(%rsp)
.Ltmp415:
    00000071: 	cvttsd2si	init_value(%rip), %edx
    00000079: 	xorl	%ecx, %ecx
    0000007b: 	xorl	%ebp, %ebp
    0000007d: 	testl	%r12d, %r12d
    00000080: 	jle	.Ltmp403 # Offset: 128
    00000086: 	leal	0x1(%rdx), %ecx
    00000089: 	movq	%rbx, %r10
    0000008c: 	movl	$0x2, %r9d
    00000092: 	xorl	%edi, %edi
    00000094: 	movl	$0x400, %esi
    00000099: 	xorl	%ebp, %ebp
.Ltmp407:
    0000009b: 	cmpq	%rsi, %rdi
    0000009e: 	jae	.Ltmp404 # Offset: 158
    000000a4: 	cmpq	%r9, %rsi
    000000a7: 	sbbq	%rax, %rax
    000000aa: 	andq	$-0x1ff, %rax
    000000b0: 	leaq	0x400(%rdi,%rax,2), %rax
    000000b8: 	leaq	(%rbx,%rax,4), %r8
    000000bc: 	movq	%r10, %rax
    000000bf: 	nop # Size: 1
.Ltmp405:
    000000c0: 	movl	%edx, (%rax)
    000000c2: 	addq	$0x8, %rax
    000000c6: 	cmpq	%r8, %rax
    000000c9: 	jne	.Ltmp405 # Offset: 201
    000000cb: 	addl	%edx, %ebp
    000000cd: 	cmpq	%r9, %rsi
    000000d0: 	sbbl	%eax, %eax
    000000d2: 	notl	%eax
    000000d4: 	andl	$0x1ff, %eax
    000000d9: 	imull	%edx, %eax
    000000dc: 	cmpq	%r9, %rsi
    000000df: 	sbbq	%r8, %r8
    000000e2: 	andq	$-0x1ff, %r8
    000000e9: 	leaq	0x400(%rdi,%r8,2), %r8
    000000f1: 	leal	(%rax,%rbp), %r11d
    000000f5: 	leaq	(%r13,%r8,4), %r8
    000000fa: 	leaq	0x4(%r10), %rax
    000000fe: 	nop # Size: 2
.Ltmp406:
    00000100: 	movl	%ecx, (%rax)
    00000102: 	addq	$0x8, %rax
    00000106: 	cmpq	%r8, %rax
    00000109: 	jne	.Ltmp406 # Offset: 265
    0000010b: 	cmpq	%r9, %rsi
    0000010e: 	leal	(%rcx,%r11), %r8d
    00000112: 	sbbl	%eax, %eax
    00000114: 	notl	%eax
    00000116: 	andl	$0x1ff, %eax
    0000011b: 	imull	%ecx, %eax
    0000011e: 	leal	(%rax,%r8), %ebp
.Ltmp404:
    00000122: 	addq	$0x400, %rdi
    00000129: 	addq	$0x400, %rsi
    00000130: 	addq	$0x400, %r9
    00000137: 	addq	$0x1000, %r10
    0000013e: 	cmpl	%edi, %r12d
    00000141: 	jg	.Ltmp407 # Offset: 321
    00000147: 	movl	0xc(%rsp), %ecx
.Ltmp403:
    0000014b: 	cmpl	%ecx, 0x18(%rsp)
    0000014f: 	jle	.Ltmp408 # Offset: 335
    00000151: 	movl	0x1c(%rsp), %edi
    00000155: 	movslq	%ecx, %rsi
    00000158: 	leaq	(%rbx,%rsi,4), %rax
    0000015c: 	subl	$0x2, %edi
    0000015f: 	subl	%ecx, %edi
    00000161: 	shrl	%edi
    00000163: 	movl	%edi, %ecx
    00000165: 	leaq	(%rsi,%rcx,2), %rcx
    00000169: 	leaq	0x8(%rbx,%rcx,4), %rsi
    0000016e: 	movq	%rax, %rcx
.Ltmp409:
    00000171: 	movl	%edx, (%rcx)
    00000173: 	addq	$0x8, %rcx
    00000177: 	cmpq	%rsi, %rcx
    0000017a: 	jne	.Ltmp409 # Offset: 378
    0000017c: 	movl	%edi, %ecx
    0000017e: 	leal	(%rbp,%rdx), %r8d
    00000183: 	imull	%edx, %ecx
    00000186: 	addl	%ecx, %r8d
    00000189: 	leal	0x1(%rdx), %ecx
.Ltmp410:
    0000018c: 	movl	%ecx, 0x4(%rax)
    0000018f: 	addq	$0x8, %rax
    00000193: 	cmpq	%rsi, %rax
    00000196: 	jne	.Ltmp410 # Offset: 406
    00000198: 	leal	(%rcx,%r8), %eax
    0000019c: 	imull	%edi, %ecx
    0000019f: 	leal	(%rcx,%rax), %ebp
.Ltmp408:
    000001a2: 	imull	$0x7a1200, %edx, %edx
    000001a8: 	leal	0x3d0900(%rdx), %eax
    000001ae: 	movl	%eax, 0x10(%rsp)
    000001b2: 	cmpl	%ebp, %eax
    000001b4: 	je	.Ltmp411 # Offset: 436
    000001ba: 	movl	$0x5, %edx
    000001bf: 	leaq	DATAat0x35004(%rip), %rsi
    000001c6: 	movq	%r15, %rdi
    000001c9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 457
    000001ce: 	testq	%r14, %r14
    000001d1: 	je	.Ltmp412 # Offset: 465
    000001d7: 	movq	%r14, %rdi
    000001da: 	callq	strlen@PLT # Offset: 474
    000001df: 	movq	%r14, %rsi
    000001e2: 	movq	%r15, %rdi
    000001e5: 	movq	%rax, %rdx
    000001e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 488
.Ltmp417:
    000001ed: 	movl	$0xd, %edx
    000001f2: 	leaq	DATAat0x3500a(%rip), %rsi
    000001f9: 	movq	%r15, %rdi
    000001fc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 508
    00000201: 	movl	%ebp, %esi
    00000203: 	movq	%r15, %rdi
    00000206: 	callq	_ZNSolsEi@PLT # Offset: 518
    0000020b: 	movl	$0xb, %edx
    00000210: 	leaq	DATAat0x35018(%rip), %rsi
    00000217: 	movq	%rax, %rdi
    0000021a: 	movq	%rax, %rbp
    0000021d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 541
    00000222: 	movl	0x10(%rsp), %esi
    00000226: 	movq	%rbp, %rdi
    00000229: 	callq	_ZNSolsEi@PLT # Offset: 553
    0000022e: 	movq	%rax, %r8
    00000231: 	movq	(%rax), %rax
    00000234: 	movq	-0x18(%rax), %rax
    00000238: 	movq	0xf0(%r8,%rax), %rbp
    00000240: 	testq	%rbp, %rbp
    00000243: 	je	.Ltmp413 # Offset: 579
    00000249: 	cmpb	$0x0, 0x38(%rbp)
    0000024d: 	je	.Ltmp414 # Offset: 589
    0000024f: 	movsbl	0x43(%rbp), %esi
.Ltmp416:
    00000253: 	movq	%r8, %rdi
    00000256: 	callq	_ZNSo3putEc@PLT # Offset: 598
    0000025b: 	movq	%rax, %rdi
    0000025e: 	callq	_ZNSo5flushEv@PLT # Offset: 606
.Ltmp411:
    00000263: 	addl	$0x1, 0x8(%rsp)
    00000268: 	movl	0x8(%rsp), %eax
    0000026c: 	cmpl	%eax, iterations(%rip)
    00000272: 	jg	.Ltmp415 # Offset: 626
.Ltmp402:
    00000278: 	callq	clock@PLT # Offset: 632
    0000027d: 	pxor	%xmm0, %xmm0
    00000281: 	movq	%r14, %rdi
    00000284: 	movq	%rax, end_time(%rip)
    0000028b: 	subq	start_time(%rip), %rax
    00000292: 	cvtsi2sd	%rax, %xmm0
    00000297: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000029f: 	addq	$0x28, %rsp
    000002a3: 	popq	%rbx
    000002a4: 	popq	%rbp
    000002a5: 	popq	%r12
    000002a7: 	popq	%r13
    000002a9: 	popq	%r14
    000002ab: 	popq	%r15
    000002ad: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 685
.Ltmp414:
    000002b2: 	movq	%rbp, %rdi
    000002b5: 	movq	%r8, 0x10(%rsp)
    000002ba: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 698
    000002bf: 	movq	(%rbp), %rax
    000002c3: 	movq	0x10(%rsp), %r8
    000002c8: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002cf: 	movl	$0xa, %esi
    000002d4: 	movq	0x30(%rax), %rax
    000002d8: 	cmpq	%rdx, %rax
    000002db: 	je	.Ltmp416 # Offset: 731
    000002e1: 	movq	%rbp, %rdi
    000002e4: 	callq	*%rax # Offset: 740
    000002e6: 	movq	0x10(%rsp), %r8
    000002eb: 	movsbl	%al, %esi
    000002ee: 	jmp	.Ltmp416 # Offset: 750
.Ltmp412:
    000002f3: 	movq	(%r15), %rax
    000002f6: 	movq	-0x18(%rax), %rdi
    000002fa: 	addq	%r15, %rdi
    000002fd: 	movl	0x20(%rdi), %esi
    00000300: 	orl	$0x1, %esi
    00000303: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 771
    00000308: 	jmp	.Ltmp417 # Offset: 776
.Ltmp413:
    0000030d: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 781
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked2IiEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked3IiEvPT_iPKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0xde90
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0xde90
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp418 # Offset: 49
    00000037: 	leal	-0x401(%r12), %eax
    0000003f: 	movl	$0x0, 0x28(%rsp)
    00000047: 	subl	$0x2, %r12d
    0000004b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000052: 	movl	%eax, 0xc(%rsp)
    00000056: 	leaq	0x4(%rbx), %rax
    0000005a: 	movq	%rax, 0x20(%rsp)
.Ltmp433:
    0000005f: 	cvttsd2si	init_value(%rip), %ecx
    00000067: 	movl	0xc(%rsp), %eax
    0000006b: 	xorl	%r11d, %r11d
    0000006e: 	xorl	%ebp, %ebp
    00000070: 	leal	0x1(%rcx), %esi
    00000073: 	testl	%eax, %eax
    00000075: 	jle	.Ltmp419 # Offset: 117
    0000007b: 	leaq	0x8(%rbx), %rax
    0000007f: 	movl	%r12d, 0x2c(%rsp)
    00000084: 	movq	0x20(%rsp), %r12
    00000089: 	xorl	%ebp, %ebp
    0000008b: 	movq	%rax, 0x10(%rsp)
    00000090: 	leal	0x1(%rcx), %esi
    00000093: 	leal	0x2(%rcx), %edi
    00000096: 	movq	%rbx, %r13
    00000099: 	movl	$0x3, %r10d
    0000009f: 	movl	$0x3ff, %r9d
    000000a5: 	xorl	%r8d, %r8d
.Ltmp424:
    000000a8: 	leal	0x3ff(%r8), %r11d
    000000af: 	cmpq	%r8, %r9
    000000b2: 	jbe	.Ltmp420 # Offset: 178
    000000b8: 	cmpq	%r10, %r9
    000000bb: 	sbbq	%rax, %rax
    000000be: 	andq	$-0x154, %rax
    000000c4: 	leaq	0x3ff(%rax,%rax,2), %rax
    000000cc: 	addq	%r8, %rax
    000000cf: 	leaq	(%rbx,%rax,4), %rdx
    000000d3: 	movq	%r13, %rax
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp421:
    000000e0: 	movl	%ecx, (%rax)
    000000e2: 	addq	$0xc, %rax
    000000e6: 	cmpq	%rdx, %rax
    000000e9: 	jne	.Ltmp421 # Offset: 233
    000000eb: 	addl	%ecx, %ebp
    000000ed: 	cmpq	%r10, %r9
    000000f0: 	sbbl	%eax, %eax
    000000f2: 	notl	%eax
    000000f4: 	andl	$0x154, %eax
    000000f9: 	imull	%ecx, %eax
    000000fc: 	cmpq	%r10, %r9
    000000ff: 	sbbq	%rdx, %rdx
    00000102: 	andq	$-0x154, %rdx
    00000109: 	leaq	0x3ff(%rdx,%rdx,2), %rdx
    00000111: 	leal	(%rax,%rbp), %r15d
    00000115: 	addq	%r8, %rdx
    00000118: 	leaq	0x4(%r13), %rax
    0000011c: 	shlq	$0x2, %rdx
    00000120: 	leaq	(%r12,%rdx), %rbp
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp422:
    00000128: 	movl	%esi, (%rax)
    0000012a: 	addq	$0xc, %rax
    0000012e: 	cmpq	%rax, %rbp
    00000131: 	jne	.Ltmp422 # Offset: 305
    00000133: 	cmpq	%r10, %r9
    00000136: 	leal	(%rsi,%r15), %eax
    0000013a: 	movl	%esi, %r15d
    0000013d: 	sbbl	%ebp, %ebp
    0000013f: 	addq	0x10(%rsp), %rdx
    00000144: 	notl	%ebp
    00000146: 	andl	$0x154, %ebp
    0000014c: 	imull	%ebp, %r15d
    00000150: 	addl	%eax, %r15d
    00000153: 	leaq	0x8(%r13), %rax
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp423:
    00000160: 	movl	%edi, (%rax)
    00000162: 	addq	$0xc, %rax
    00000166: 	cmpq	%rax, %rdx
    00000169: 	jne	.Ltmp423 # Offset: 361
    0000016b: 	imull	%edi, %ebp
    0000016e: 	addl	%edi, %r15d
    00000171: 	addl	%r15d, %ebp
.Ltmp420:
    00000174: 	addq	$0x3ff, %r8
    0000017b: 	addq	$0x3ff, %r9
    00000182: 	addq	$0x3ff, %r10
    00000189: 	addq	$0xffc, %r13
    00000190: 	cmpl	%r8d, 0xc(%rsp)
    00000195: 	jg	.Ltmp424 # Offset: 405
    0000019b: 	movl	0x2c(%rsp), %r12d
.Ltmp419:
    000001a0: 	cmpl	%r11d, %r12d
    000001a3: 	jle	.Ltmp425 # Offset: 419
    000001a5: 	movslq	%r11d, %r11
    000001a8: 	movq	%r11, %rax
.Ltmp426:
    000001ab: 	movl	%ecx, (%rbx,%rax,4)
    000001ae: 	addq	$0x3, %rax
    000001b2: 	addl	%ecx, %ebp
    000001b4: 	cmpl	%eax, %r12d
    000001b7: 	jg	.Ltmp426 # Offset: 439
    000001b9: 	movq	%r11, %rax
.Ltmp427:
    000001bc: 	movl	%esi, 0x4(%rbx,%rax,4)
    000001c0: 	addq	$0x3, %rax
    000001c4: 	addl	%esi, %ebp
    000001c6: 	cmpl	%eax, %r12d
    000001c9: 	jg	.Ltmp427 # Offset: 457
    000001cb: 	addl	$0x2, %ecx
.Ltmp428:
    000001ce: 	movl	%ecx, 0x8(%rbx,%r11,4)
    000001d3: 	addq	$0x3, %r11
    000001d7: 	addl	%ecx, %ebp
    000001d9: 	cmpl	%r11d, %r12d
    000001dc: 	jg	.Ltmp428 # Offset: 476
.Ltmp425:
    000001de: 	imull	$0x7a11fe, %esi, %r13d
    000001e5: 	cmpl	%ebp, %r13d
    000001e8: 	je	.Ltmp429 # Offset: 488
    000001ee: 	movl	$0x5, %edx
    000001f3: 	leaq	DATAat0x35004(%rip), %rsi
    000001fa: 	movq	%r14, %rdi
    000001fd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 509
    00000202: 	cmpq	$0x0, 0x18(%rsp)
    00000208: 	je	.Ltmp430 # Offset: 520
    0000020e: 	movq	0x18(%rsp), %r15
    00000213: 	movq	%r15, %rdi
    00000216: 	callq	strlen@PLT # Offset: 534
    0000021b: 	movq	%r15, %rsi
    0000021e: 	movq	%r14, %rdi
    00000221: 	movq	%rax, %rdx
    00000224: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 548
.Ltmp435:
    00000229: 	movl	$0xd, %edx
    0000022e: 	leaq	DATAat0x3500a(%rip), %rsi
    00000235: 	movq	%r14, %rdi
    00000238: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 568
    0000023d: 	movl	%ebp, %esi
    0000023f: 	movq	%r14, %rdi
    00000242: 	callq	_ZNSolsEi@PLT # Offset: 578
    00000247: 	movl	$0xb, %edx
    0000024c: 	leaq	DATAat0x35018(%rip), %rsi
    00000253: 	movq	%rax, %rbp
    00000256: 	movq	%rax, %rdi
    00000259: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 601
    0000025e: 	movl	%r13d, %esi
    00000261: 	movq	%rbp, %rdi
    00000264: 	callq	_ZNSolsEi@PLT # Offset: 612
    00000269: 	movq	%rax, %r13
    0000026c: 	movq	(%rax), %rax
    0000026f: 	movq	-0x18(%rax), %rax
    00000273: 	movq	0xf0(%r13,%rax), %rbp
    0000027b: 	testq	%rbp, %rbp
    0000027e: 	je	.Ltmp431 # Offset: 638
    00000284: 	cmpb	$0x0, 0x38(%rbp)
    00000288: 	je	.Ltmp432 # Offset: 648
    0000028a: 	movsbl	0x43(%rbp), %esi
.Ltmp434:
    0000028e: 	movq	%r13, %rdi
    00000291: 	callq	_ZNSo3putEc@PLT # Offset: 657
    00000296: 	movq	%rax, %rdi
    00000299: 	callq	_ZNSo5flushEv@PLT # Offset: 665
.Ltmp429:
    0000029e: 	addl	$0x1, 0x28(%rsp)
    000002a3: 	movl	0x28(%rsp), %eax
    000002a7: 	cmpl	%eax, iterations(%rip)
    000002ad: 	jg	.Ltmp433 # Offset: 685
.Ltmp418:
    000002b3: 	callq	clock@PLT # Offset: 691
    000002b8: 	pxor	%xmm0, %xmm0
    000002bc: 	movq	0x18(%rsp), %rdi
    000002c1: 	movq	%rax, end_time(%rip)
    000002c8: 	subq	start_time(%rip), %rax
    000002cf: 	cvtsi2sd	%rax, %xmm0
    000002d4: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002dc: 	addq	$0x38, %rsp
    000002e0: 	popq	%rbx
    000002e1: 	popq	%rbp
    000002e2: 	popq	%r12
    000002e4: 	popq	%r13
    000002e6: 	popq	%r14
    000002e8: 	popq	%r15
    000002ea: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 746
.Ltmp432:
    000002ef: 	movq	%rbp, %rdi
    000002f2: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 754
    000002f7: 	movq	(%rbp), %rax
    000002fb: 	movl	$0xa, %esi
    00000300: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000307: 	movq	0x30(%rax), %rax
    0000030b: 	cmpq	%rdx, %rax
    0000030e: 	je	.Ltmp434 # Offset: 782
    00000314: 	movq	%rbp, %rdi
    00000317: 	callq	*%rax # Offset: 791
    00000319: 	movsbl	%al, %esi
    0000031c: 	jmp	.Ltmp434 # Offset: 796
.Ltmp430:
    00000321: 	movq	(%r14), %rax
    00000324: 	movq	-0x18(%rax), %rdi
    00000328: 	addq	%r14, %rdi
    0000032b: 	movl	0x20(%rdi), %esi
    0000032e: 	orl	$0x1, %esi
    00000331: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 817
    00000336: 	jmp	.Ltmp435 # Offset: 822
.Ltmp431:
    0000033b: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked3IiEvPT_iPKc"

Binary Function "_Z15test_for_loop_3IiEvPT_iPKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0xe1d0
  Size        : 0x200
  MaxSize     : 0x200
  Offset      : 0xe1d0
  Section     : .text
  Orc Section : .local.text._Z15test_for_loop_3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp436 # Offset: 49
    00000037: 	subl	$0x2, %r14d
    0000003b: 	xorl	%ebx, %ebx
    0000003d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp445:
    00000048: 	cvttsd2si	init_value(%rip), %eax
    00000050: 	xorl	%edx, %edx
    00000052: 	xorl	%r13d, %r13d
    00000055: 	leal	0x1(%rax), %ebp
    00000058: 	testl	%r14d, %r14d
    0000005b: 	jle	.Ltmp437 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp438:
    00000060: 	movl	%eax, (%r15,%rdx,4)
    00000064: 	addq	$0x3, %rdx
    00000068: 	addl	%eax, %r13d
    0000006b: 	cmpl	%edx, %r14d
    0000006e: 	jg	.Ltmp438 # Offset: 110
    00000070: 	xorl	%edx, %edx
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp439:
    00000078: 	movl	%ebp, 0x4(%r15,%rdx,4)
    0000007d: 	addq	$0x3, %rdx
    00000081: 	addl	%ebp, %r13d
    00000084: 	cmpl	%edx, %r14d
    00000087: 	jg	.Ltmp439 # Offset: 135
    00000089: 	addl	$0x2, %eax
    0000008c: 	xorl	%edx, %edx
    0000008e: 	nop # Size: 2
.Ltmp440:
    00000090: 	movl	%eax, 0x8(%r15,%rdx,4)
    00000095: 	addq	$0x3, %rdx
    00000099: 	addl	%eax, %r13d
    0000009c: 	cmpl	%edx, %r14d
    0000009f: 	jg	.Ltmp440 # Offset: 159
.Ltmp437:
    000000a1: 	imull	$0x7a11fe, %ebp, %ebp
    000000a7: 	cmpl	%r13d, %ebp
    000000aa: 	je	.Ltmp441 # Offset: 170
    000000b0: 	movl	$0x5, %edx
    000000b5: 	leaq	DATAat0x35004(%rip), %rsi
    000000bc: 	movq	%r12, %rdi
    000000bf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 191
    000000c4: 	cmpq	$0x0, 0x8(%rsp)
    000000ca: 	je	.Ltmp442 # Offset: 202
    000000d0: 	movq	0x8(%rsp), %rdi
    000000d5: 	callq	strlen@PLT # Offset: 213
    000000da: 	movq	0x8(%rsp), %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	movq	%rax, %rdx
    000000e5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 229
.Ltmp447:
    000000ea: 	movl	$0xd, %edx
    000000ef: 	leaq	DATAat0x3500a(%rip), %rsi
    000000f6: 	movq	%r12, %rdi
    000000f9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 249
    000000fe: 	movl	%r13d, %esi
    00000101: 	movq	%r12, %rdi
    00000104: 	callq	_ZNSolsEi@PLT # Offset: 260
    00000109: 	movl	$0xb, %edx
    0000010e: 	leaq	DATAat0x35018(%rip), %rsi
    00000115: 	movq	%rax, %r13
    00000118: 	movq	%rax, %rdi
    0000011b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 283
    00000120: 	movl	%ebp, %esi
    00000122: 	movq	%r13, %rdi
    00000125: 	callq	_ZNSolsEi@PLT # Offset: 293
    0000012a: 	movq	%rax, %rbp
    0000012d: 	movq	(%rax), %rax
    00000130: 	movq	-0x18(%rax), %rax
    00000134: 	movq	0xf0(%rbp,%rax), %r13
    0000013c: 	testq	%r13, %r13
    0000013f: 	je	.Ltmp443 # Offset: 319
    00000145: 	cmpb	$0x0, 0x38(%r13)
    0000014a: 	je	.Ltmp444 # Offset: 330
    0000014c: 	movsbl	0x43(%r13), %esi
.Ltmp446:
    00000151: 	movq	%rbp, %rdi
    00000154: 	callq	_ZNSo3putEc@PLT # Offset: 340
    00000159: 	movq	%rax, %rdi
    0000015c: 	callq	_ZNSo5flushEv@PLT # Offset: 348
.Ltmp441:
    00000161: 	addl	$0x1, %ebx
    00000164: 	cmpl	%ebx, iterations(%rip)
    0000016a: 	jg	.Ltmp445 # Offset: 362
.Ltmp436:
    00000170: 	callq	clock@PLT # Offset: 368
    00000175: 	pxor	%xmm0, %xmm0
    00000179: 	movq	0x8(%rsp), %rdi
    0000017e: 	movq	%rax, end_time(%rip)
    00000185: 	subq	start_time(%rip), %rax
    0000018c: 	cvtsi2sd	%rax, %xmm0
    00000191: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000199: 	addq	$0x18, %rsp
    0000019d: 	popq	%rbx
    0000019e: 	popq	%rbp
    0000019f: 	popq	%r12
    000001a1: 	popq	%r13
    000001a3: 	popq	%r14
    000001a5: 	popq	%r15
    000001a7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 423
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp444:
    000001b0: 	movq	%r13, %rdi
    000001b3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 435
    000001b8: 	movq	(%r13), %rax
    000001bc: 	movl	$0xa, %esi
    000001c1: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000001c8: 	movq	0x30(%rax), %rax
    000001cc: 	cmpq	%rdx, %rax
    000001cf: 	je	.Ltmp446 # Offset: 463
    000001d1: 	movq	%r13, %rdi
    000001d4: 	callq	*%rax # Offset: 468
    000001d6: 	movsbl	%al, %esi
    000001d9: 	jmp	.Ltmp446 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp442:
    000001e0: 	movq	(%r12), %rax
    000001e4: 	movq	-0x18(%rax), %rdi
    000001e8: 	addq	%r12, %rdi
    000001eb: 	movl	0x20(%rdi), %esi
    000001ee: 	orl	$0x1, %esi
    000001f1: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 497
    000001f6: 	jmp	.Ltmp447 # Offset: 502
.Ltmp443:
    000001fb: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 507
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_for_loop_3IiEvPT_iPKc"

Binary Function "_Z15test_loop_4_optIiEvPT_iPKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0xe3d0
  Size        : 0x334
  MaxSize     : 0x340
  Offset      : 0xe3d0
  Section     : .text
  Orc Section : .local.text._Z15test_loop_4_optIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %edx
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%edx, %edx
    00000030: 	jle	.Ltmp448 # Offset: 48
    00000036: 	leal	-0x3(%rbx), %eax
    00000039: 	xorl	%r12d, %r12d
    0000003c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000043: 	movl	%eax, 0x4(%rsp)
    00000047: 	leal	-0x4(%rbx), %eax
    0000004a: 	movl	%eax, %ecx
    0000004c: 	movl	%eax, 0x14(%rsp)
    00000050: 	shrl	$0x4, %eax
    00000053: 	shrl	$0x2, %ecx
    00000056: 	leal	-0x1(%rax), %edx
    00000059: 	movl	%ecx, 0x10(%rsp)
    0000005d: 	leal	(,%rax,4), %ecx
    00000064: 	shll	$0x4, %eax
    00000067: 	shlq	$0x6, %rdx
    0000006b: 	movl	%ecx, 0x18(%rsp)
    0000006f: 	leaq	0x40(%r14,%rdx), %rbx
    00000074: 	movl	%eax, 0x1c(%rsp)
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp457:
    00000080: 	cvttsd2si	init_value(%rip), %edx
    00000088: 	movl	0x4(%rsp), %eax
    0000008c: 	xorl	%r15d, %r15d
    0000008f: 	leal	0x1(%rdx), %ebp
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp449 # Offset: 148
    0000009a: 	movdqa	DATAat0x36f50(%rip), %xmm1
    000000a2: 	movd	%edx, %xmm7
    000000a6: 	cmpl	$0xf, 0x14(%rsp)
    000000ab: 	leal	0x2(%rdx), %edi
    000000ae: 	pshufd	$0x0, %xmm7, %xmm3
    000000b3: 	paddd	%xmm3, %xmm1
    000000b7: 	jbe	.Ltmp450 # Offset: 183
    000000bd: 	movd	%ebp, %xmm7
    000000c1: 	movd	%edi, %xmm5
    000000c5: 	pxor	%xmm0, %xmm0
    000000c9: 	movq	%r14, %rax
    000000cc: 	pshufd	$0x0, %xmm7, %xmm2
    000000d1: 	pshufd	$0x0, %xmm5, %xmm4
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp451:
    000000e0: 	paddd	%xmm3, %xmm0
    000000e4: 	movups	%xmm1, (%rax)
    000000e7: 	addq	$0x40, %rax
    000000eb: 	paddd	%xmm2, %xmm0
    000000ef: 	movups	%xmm1, -0x30(%rax)
    000000f3: 	paddd	%xmm4, %xmm0
    000000f7: 	movups	%xmm1, -0x20(%rax)
    000000fb: 	movups	%xmm1, -0x10(%rax)
    000000ff: 	paddd	%xmm2, %xmm0
    00000103: 	cmpq	%rax, %rbx
    00000106: 	jne	.Ltmp451 # Offset: 262
    00000108: 	movdqa	%xmm0, %xmm2
    0000010c: 	movl	0x18(%rsp), %eax
    00000110: 	movl	0x1c(%rsp), %r9d
    00000115: 	psrldq	$0x8, %xmm2
    0000011a: 	paddd	%xmm2, %xmm0
    0000011e: 	movdqa	%xmm0, %xmm2
    00000122: 	psrldq	$0x4, %xmm2
    00000127: 	paddd	%xmm2, %xmm0
    0000012b: 	movd	%xmm0, %esi
.Ltmp460:
    0000012f: 	movl	0x10(%rsp), %r8d
    00000134: 	subl	%eax, %r8d
    00000137: 	cmpl	$0x1, %r8d
    0000013b: 	jbe	.Ltmp452 # Offset: 315
    0000013d: 	movd	%ebp, %xmm5
    00000141: 	shlq	$0x4, %rax
    00000145: 	movd	%edx, %xmm2
    00000149: 	movd	%edi, %xmm0
    0000014d: 	addq	%r14, %rax
    00000150: 	punpckldq	%xmm5, %xmm2
    00000154: 	punpckldq	%xmm5, %xmm0
    00000158: 	andl	$-0x2, %r8d
    0000015c: 	movq	%xmm2, (%rax)
    00000160: 	leal	(%r9,%r8,4), %r9d
    00000164: 	movq	%xmm0, 0x8(%rax)
    00000169: 	movq	%xmm2, 0x10(%rax)
    0000016e: 	movq	%xmm0, 0x18(%rax)
    00000173: 	leal	(%rdi,%rbp,2), %eax
    00000176: 	addl	%edx, %eax
    00000178: 	leal	(%rsi,%rax,2), %esi
.Ltmp452:
    0000017b: 	movslq	%r9d, %r8
    0000017e: 	addl	%edx, %esi
    00000180: 	addl	$0x4, %r9d
    00000184: 	leaq	(,%r8,4), %rax
    0000018c: 	movups	%xmm1, (%r14,%r8,4)
    00000191: 	leal	(%rdi,%rbp,2), %r8d
    00000195: 	leal	(%r8,%rsi), %r15d
    00000199: 	cmpl	0x4(%rsp), %r9d
    0000019e: 	jge	.Ltmp449 # Offset: 414
    000001a0: 	movl	%ebp, 0x14(%r14,%rax)
    000001a5: 	movl	%edi, 0x18(%r14,%rax)
    000001aa: 	movl	%ebp, 0x1c(%r14,%rax)
    000001af: 	movl	%edx, 0x10(%r14,%rax)
    000001b4: 	addl	%r15d, %edx
    000001b7: 	leal	(%r8,%rdx), %r15d
.Ltmp449:
    000001bb: 	imull	$0x7a1200, %ebp, %ebp
    000001c1: 	cmpl	%r15d, %ebp
    000001c4: 	je	.Ltmp453 # Offset: 452
    000001ca: 	movl	$0x5, %edx
    000001cf: 	leaq	DATAat0x35004(%rip), %rsi
    000001d6: 	movq	%r13, %rdi
    000001d9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 473
    000001de: 	cmpq	$0x0, 0x8(%rsp)
    000001e4: 	je	.Ltmp454 # Offset: 484
    000001ea: 	movq	0x8(%rsp), %rdi
    000001ef: 	callq	strlen@PLT # Offset: 495
    000001f4: 	movq	0x8(%rsp), %rsi
    000001f9: 	movq	%r13, %rdi
    000001fc: 	movq	%rax, %rdx
    000001ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 511
.Ltmp459:
    00000204: 	movl	$0xd, %edx
    00000209: 	leaq	DATAat0x3500a(%rip), %rsi
    00000210: 	movq	%r13, %rdi
    00000213: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 531
    00000218: 	movl	%r15d, %esi
    0000021b: 	movq	%r13, %rdi
    0000021e: 	callq	_ZNSolsEi@PLT # Offset: 542
    00000223: 	movl	$0xb, %edx
    00000228: 	leaq	DATAat0x35018(%rip), %rsi
    0000022f: 	movq	%rax, %r15
    00000232: 	movq	%rax, %rdi
    00000235: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 565
    0000023a: 	movl	%ebp, %esi
    0000023c: 	movq	%r15, %rdi
    0000023f: 	callq	_ZNSolsEi@PLT # Offset: 575
    00000244: 	movq	%rax, %rbp
    00000247: 	movq	(%rax), %rax
    0000024a: 	movq	-0x18(%rax), %rax
    0000024e: 	movq	0xf0(%rbp,%rax), %r15
    00000256: 	testq	%r15, %r15
    00000259: 	je	.Ltmp455 # Offset: 601
    0000025f: 	cmpb	$0x0, 0x38(%r15)
    00000264: 	je	.Ltmp456 # Offset: 612
    00000266: 	movsbl	0x43(%r15), %esi
.Ltmp458:
    0000026b: 	movq	%rbp, %rdi
    0000026e: 	callq	_ZNSo3putEc@PLT # Offset: 622
    00000273: 	movq	%rax, %rdi
    00000276: 	callq	_ZNSo5flushEv@PLT # Offset: 630
.Ltmp453:
    0000027b: 	addl	$0x1, %r12d
    0000027f: 	cmpl	%r12d, iterations(%rip)
    00000286: 	jg	.Ltmp457 # Offset: 646
.Ltmp448:
    0000028c: 	callq	clock@PLT # Offset: 652
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	0x8(%rsp), %rdi
    0000029a: 	movq	%rax, end_time(%rip)
    000002a1: 	subq	start_time(%rip), %rax
    000002a8: 	cvtsi2sd	%rax, %xmm0
    000002ad: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002b5: 	addq	$0x28, %rsp
    000002b9: 	popq	%rbx
    000002ba: 	popq	%rbp
    000002bb: 	popq	%r12
    000002bd: 	popq	%r13
    000002bf: 	popq	%r14
    000002c1: 	popq	%r15
    000002c3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 707
    000002c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp456:
    000002d0: 	movq	%r15, %rdi
    000002d3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 723
    000002d8: 	movq	(%r15), %rax
    000002db: 	movl	$0xa, %esi
    000002e0: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002e7: 	movq	0x30(%rax), %rax
    000002eb: 	cmpq	%rdx, %rax
    000002ee: 	je	.Ltmp458 # Offset: 750
    000002f4: 	movq	%r15, %rdi
    000002f7: 	callq	*%rax # Offset: 759
    000002f9: 	movsbl	%al, %esi
    000002fc: 	jmp	.Ltmp458 # Offset: 764
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp454:
    00000308: 	movq	(%r13), %rax
    0000030c: 	movq	-0x18(%rax), %rdi
    00000310: 	addq	%r13, %rdi
    00000313: 	movl	0x20(%rdi), %esi
    00000316: 	orl	$0x1, %esi
    00000319: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 793
    0000031e: 	jmp	.Ltmp459 # Offset: 798
.Ltmp450:
    00000323: 	xorl	%eax, %eax
    00000325: 	xorl	%r9d, %r9d
    00000328: 	xorl	%esi, %esi
    0000032a: 	jmp	.Ltmp460 # Offset: 810
.Ltmp455:
    0000032f: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 815
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_loop_4_optIiEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked4IiEvPT_iPKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0xe710
  Size        : 0x3b0
  MaxSize     : 0x3b0
  Offset      : 0xe710
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movq	%rdx, 0x28(%rsp)
    0000001c: 	movl	%esi, 0x3c(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %edx
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%edx, %edx
    00000034: 	jle	.Ltmp461 # Offset: 52
    0000003a: 	movl	%ebx, %eax
    0000003c: 	leal	-0x403(%rbx), %ebx
    00000042: 	movl	$0x0, 0x30(%rsp)
    0000004a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000051: 	movl	%ebx, 0xc(%rsp)
    00000055: 	leal	-0x3(%rax), %ebx
    00000058: 	subl	$0x404, %eax
    0000005d: 	andl	$0xfffffc00, %eax
    00000062: 	movl	%ebx, 0x38(%rsp)
    00000066: 	addl	$0x400, %eax
    0000006b: 	movl	%eax, 0x34(%rsp)
    0000006f: 	leaq	0x4(%r15), %rax
    00000073: 	movq	%rax, 0x20(%rsp)
.Ltmp478:
    00000078: 	cvttsd2si	init_value(%rip), %esi
    00000080: 	movl	0xc(%rsp), %eax
    00000084: 	xorl	%ecx, %ecx
    00000086: 	xorl	%r13d, %r13d
    00000089: 	leal	0x1(%rsi), %edx
    0000008c: 	testl	%eax, %eax
    0000008e: 	jle	.Ltmp462 # Offset: 142
    00000094: 	leaq	0x8(%r15), %rax
    00000098: 	leal	0x1(%rsi), %edx
    0000009b: 	movq	%r15, %r12
    0000009e: 	movl	$0x4, %ebp
    000000a3: 	movq	%rax, 0x10(%rsp)
    000000a8: 	leaq	0xc(%r15), %rax
    000000ac: 	leal	0x2(%rsi), %edi
    000000af: 	xorl	%ebx, %ebx
    000000b1: 	movq	%rax, 0x18(%rsp)
    000000b6: 	movl	$0x400, %r11d
    000000bc: 	xorl	%r13d, %r13d
.Ltmp468:
    000000bf: 	cmpq	%r11, %rbx
    000000c2: 	jae	.Ltmp463 # Offset: 194
    000000c8: 	cmpq	%rbp, %r11
    000000cb: 	sbbq	%rax, %rax
    000000ce: 	andb	$0x1, %al
    000000d0: 	leaq	0x400(%rbx,%rax,4), %rax
    000000d8: 	leaq	(%r15,%rax,4), %rcx
    000000dc: 	movq	%r12, %rax
    000000df: 	nop # Size: 1
.Ltmp464:
    000000e0: 	movl	%esi, (%rax)
    000000e2: 	addq	$0x10, %rax
    000000e6: 	cmpq	%rcx, %rax
    000000e9: 	jne	.Ltmp464 # Offset: 233
    000000eb: 	addl	%esi, %r13d
    000000ee: 	cmpq	%rbp, %r11
    000000f1: 	movq	0x20(%rsp), %r9
    000000f6: 	leaq	0x4(%r12), %rax
    000000fb: 	sbbl	%r10d, %r10d
    000000fe: 	notl	%r10d
    00000101: 	movzbl	%r10b, %r10d
    00000105: 	imull	%esi, %r10d
    00000109: 	addl	%r13d, %r10d
    0000010c: 	cmpq	%rbp, %r11
    0000010f: 	sbbq	%rcx, %rcx
    00000112: 	andb	$0x1, %cl
    00000115: 	leaq	0x400(%rbx,%rcx,4), %rcx
    0000011d: 	shlq	$0x2, %rcx
    00000121: 	leaq	(%r9,%rcx), %r8
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp465:
    00000128: 	movl	%edx, (%rax)
    0000012a: 	addq	$0x10, %rax
    0000012e: 	cmpq	%r8, %rax
    00000131: 	jne	.Ltmp465 # Offset: 305
    00000133: 	addl	%edx, %r10d
    00000136: 	cmpq	%rbp, %r11
    00000139: 	movl	%edx, %r13d
    0000013c: 	movq	0x10(%rsp), %r8
    00000141: 	sbbl	%r9d, %r9d
    00000144: 	leaq	0x8(%r12), %rax
    00000149: 	notl	%r9d
    0000014c: 	addq	%rcx, %r8
    0000014f: 	movzbl	%r9b, %r9d
    00000153: 	imull	%r9d, %r13d
    00000157: 	addl	%r13d, %r10d
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp466:
    00000160: 	movl	%edi, (%rax)
    00000162: 	addq	$0x10, %rax
    00000166: 	cmpq	%r8, %rax
    00000169: 	jne	.Ltmp466 # Offset: 361
    0000016b: 	imull	%edi, %r9d
    0000016f: 	addl	%edi, %r10d
    00000172: 	leaq	0xc(%r12), %rax
    00000177: 	addq	0x18(%rsp), %rcx
    0000017c: 	leal	(%r9,%r10), %r8d
.Ltmp467:
    00000180: 	movl	%edx, (%rax)
    00000182: 	addq	$0x10, %rax
    00000186: 	cmpq	%rcx, %rax
    00000189: 	jne	.Ltmp467 # Offset: 393
    0000018b: 	addl	%edx, %r8d
    0000018e: 	addl	%r8d, %r13d
.Ltmp463:
    00000191: 	addq	$0x400, %rbx
    00000198: 	addq	$0x400, %r11
    0000019f: 	addq	$0x400, %rbp
    000001a6: 	addq	$0x1000, %r12
    000001ad: 	cmpl	%ebx, 0xc(%rsp)
    000001b1: 	jg	.Ltmp468 # Offset: 433
    000001b7: 	movl	0x34(%rsp), %ecx
.Ltmp462:
    000001bb: 	cmpl	0x38(%rsp), %ecx
    000001bf: 	jge	.Ltmp469 # Offset: 447
    000001c5: 	movl	0x3c(%rsp), %ebx
    000001c9: 	movslq	%ecx, %rdi
    000001cc: 	leaq	(%r15,%rdi,4), %rax
    000001d0: 	leal	-0x4(%rbx), %r8d
    000001d4: 	subl	%ecx, %r8d
    000001d7: 	shrl	$0x2, %r8d
    000001db: 	movl	%r8d, %ecx
    000001de: 	leaq	(%rdi,%rcx,4), %rcx
    000001e2: 	movq	%rax, %rdi
    000001e5: 	leaq	0x10(%r15,%rcx,4), %rcx
.Ltmp470:
    000001ea: 	movl	%esi, (%rdi)
    000001ec: 	addq	$0x10, %rdi
    000001f0: 	cmpq	%rcx, %rdi
    000001f3: 	jne	.Ltmp470 # Offset: 499
    000001f5: 	movl	%r8d, %edi
    000001f8: 	addl	%esi, %r13d
    000001fb: 	imull	%esi, %edi
    000001fe: 	leal	(%rdi,%r13), %r9d
    00000202: 	movq	%rax, %rdi
.Ltmp471:
    00000205: 	movl	%edx, 0x4(%rdi)
    00000208: 	addq	$0x10, %rdi
    0000020c: 	cmpq	%rcx, %rdi
    0000020f: 	jne	.Ltmp471 # Offset: 527
    00000211: 	movl	%r8d, %r13d
    00000214: 	leal	(%r9,%rdx), %edi
    00000218: 	addl	$0x2, %esi
    0000021b: 	imull	%edx, %r13d
    0000021f: 	leal	(%r13,%rdi), %r9d
    00000224: 	movq	%rax, %rdi
.Ltmp472:
    00000227: 	movl	%esi, 0x8(%rdi)
    0000022a: 	addq	$0x10, %rdi
    0000022e: 	cmpq	%rcx, %rdi
    00000231: 	jne	.Ltmp472 # Offset: 561
    00000233: 	leal	(%rsi,%r9), %edi
    00000237: 	imull	%r8d, %esi
    0000023b: 	addl	%edi, %esi
.Ltmp473:
    0000023d: 	movl	%edx, 0xc(%rax)
    00000240: 	addq	$0x10, %rax
    00000244: 	cmpq	%rcx, %rax
    00000247: 	jne	.Ltmp473 # Offset: 583
    00000249: 	leal	(%rsi,%rdx), %eax
    0000024c: 	addl	%eax, %r13d
.Ltmp469:
    0000024f: 	imull	$0x7a1200, %edx, %ebp
    00000255: 	cmpl	%r13d, %ebp
    00000258: 	je	.Ltmp474 # Offset: 600
    0000025e: 	movl	$0x5, %edx
    00000263: 	leaq	DATAat0x35004(%rip), %rsi
    0000026a: 	movq	%r14, %rdi
    0000026d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 621
    00000272: 	cmpq	$0x0, 0x28(%rsp)
    00000278: 	je	.Ltmp475 # Offset: 632
    0000027e: 	movq	0x28(%rsp), %rbx
    00000283: 	movq	%rbx, %rdi
    00000286: 	callq	strlen@PLT # Offset: 646
    0000028b: 	movq	%rbx, %rsi
    0000028e: 	movq	%r14, %rdi
    00000291: 	movq	%rax, %rdx
    00000294: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 660
.Ltmp480:
    00000299: 	movl	$0xd, %edx
    0000029e: 	leaq	DATAat0x3500a(%rip), %rsi
    000002a5: 	movq	%r14, %rdi
    000002a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 680
    000002ad: 	movl	%r13d, %esi
    000002b0: 	movq	%r14, %rdi
    000002b3: 	callq	_ZNSolsEi@PLT # Offset: 691
    000002b8: 	movl	$0xb, %edx
    000002bd: 	leaq	DATAat0x35018(%rip), %rsi
    000002c4: 	movq	%rax, %r12
    000002c7: 	movq	%rax, %rdi
    000002ca: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 714
    000002cf: 	movl	%ebp, %esi
    000002d1: 	movq	%r12, %rdi
    000002d4: 	callq	_ZNSolsEi@PLT # Offset: 724
    000002d9: 	movq	%rax, %r12
    000002dc: 	movq	(%rax), %rax
    000002df: 	movq	-0x18(%rax), %rax
    000002e3: 	movq	0xf0(%r12,%rax), %rbp
    000002eb: 	testq	%rbp, %rbp
    000002ee: 	je	.Ltmp476 # Offset: 750
    000002f4: 	cmpb	$0x0, 0x38(%rbp)
    000002f8: 	je	.Ltmp477 # Offset: 760
    000002fa: 	movsbl	0x43(%rbp), %esi
.Ltmp479:
    000002fe: 	movq	%r12, %rdi
    00000301: 	callq	_ZNSo3putEc@PLT # Offset: 769
    00000306: 	movq	%rax, %rdi
    00000309: 	callq	_ZNSo5flushEv@PLT # Offset: 777
.Ltmp474:
    0000030e: 	addl	$0x1, 0x30(%rsp)
    00000313: 	movl	0x30(%rsp), %eax
    00000317: 	cmpl	%eax, iterations(%rip)
    0000031d: 	jg	.Ltmp478 # Offset: 797
.Ltmp461:
    00000323: 	callq	clock@PLT # Offset: 803
    00000328: 	pxor	%xmm0, %xmm0
    0000032c: 	movq	0x28(%rsp), %rdi
    00000331: 	movq	%rax, end_time(%rip)
    00000338: 	subq	start_time(%rip), %rax
    0000033f: 	cvtsi2sd	%rax, %xmm0
    00000344: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000034c: 	addq	$0x48, %rsp
    00000350: 	popq	%rbx
    00000351: 	popq	%rbp
    00000352: 	popq	%r12
    00000354: 	popq	%r13
    00000356: 	popq	%r14
    00000358: 	popq	%r15
    0000035a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 858
.Ltmp477:
    0000035f: 	movq	%rbp, %rdi
    00000362: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 866
    00000367: 	movq	(%rbp), %rax
    0000036b: 	movl	$0xa, %esi
    00000370: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000377: 	movq	0x30(%rax), %rax
    0000037b: 	cmpq	%rdx, %rax
    0000037e: 	je	.Ltmp479 # Offset: 894
    00000384: 	movq	%rbp, %rdi
    00000387: 	callq	*%rax # Offset: 903
    00000389: 	movsbl	%al, %esi
    0000038c: 	jmp	.Ltmp479 # Offset: 908
.Ltmp475:
    00000391: 	movq	(%r14), %rax
    00000394: 	movq	-0x18(%rax), %rdi
    00000398: 	addq	%r14, %rdi
    0000039b: 	movl	0x20(%rdi), %esi
    0000039e: 	orl	$0x1, %esi
    000003a1: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 929
    000003a6: 	jmp	.Ltmp480 # Offset: 934
.Ltmp476:
    000003ab: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 939
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked4IiEvPT_iPKc"

Binary Function "_Z15test_for_loop_4IiEvPT_iPKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0xeac0
  Size        : 0x342
  MaxSize     : 0x350
  Offset      : 0xeac0
  Section     : .text
  Orc Section : .local.text._Z15test_for_loop_4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdi, (%rsp)
    0000001c: 	movq	%rdx, 0x10(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %esi
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%esi, %esi
    00000035: 	jle	.Ltmp481 # Offset: 53
    0000003b: 	leal	-0x3(%r13), %eax
    0000003f: 	subl	$0x4, %r13d
    00000043: 	movq	%rbx, %rcx
    00000046: 	movl	$0x0, 0x18(%rsp)
    0000004e: 	shrl	$0x2, %r13d
    00000052: 	movl	%eax, 0x1c(%rsp)
    00000056: 	movl	%r13d, %eax
    00000059: 	movl	%r13d, 0xc(%rsp)
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x14(%rcx,%rax), %r14
    00000067: 	leaq	0x18(%rcx,%rax), %r15
    0000006c: 	leaq	0x1c(%rcx,%rax), %r13
    00000071: 	leaq	0x10(%rbx,%rax), %rbx
    00000076: 	movq	%r14, %rax
    00000079: 	movq	%r15, %r14
    0000007c: 	movq	%r13, %r15
    0000007f: 	movq	%rax, %r13
.Ltmp491:
    00000082: 	movsd	init_value(%rip), %xmm0
    0000008a: 	movl	0x1c(%rsp), %ecx
    0000008e: 	xorl	%r12d, %r12d
    00000091: 	movq	(%rsp), %rax
    00000095: 	cvttsd2si	%xmm0, %edx
    00000099: 	leal	0x1(%rdx), %ebp
    0000009c: 	testl	%ecx, %ecx
    0000009e: 	jle	.Ltmp482 # Offset: 158
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp483:
    000000a8: 	movl	%edx, (%rax)
    000000aa: 	addq	$0x10, %rax
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp483 # Offset: 177
    000000b3: 	movl	0xc(%rsp), %eax
    000000b7: 	addl	$0x1, %eax
    000000ba: 	imull	%edx, %eax
    000000bd: 	movl	%eax, %esi
    000000bf: 	movq	(%rsp), %rax
    000000c3: 	addq	$0x4, %rax
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp484:
    000000d0: 	movl	%ebp, (%rax)
    000000d2: 	addq	$0x10, %rax
    000000d6: 	cmpq	%r13, %rax
    000000d9: 	jne	.Ltmp484 # Offset: 217
    000000db: 	movl	0xc(%rsp), %r12d
    000000e0: 	leal	(%rsi,%rbp), %eax
    000000e3: 	addl	$0x2, %edx
    000000e6: 	imull	%ebp, %r12d
    000000ea: 	leal	(%r12,%rax), %esi
    000000ee: 	movq	(%rsp), %rax
    000000f2: 	addq	$0x8, %rax
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp485:
    00000100: 	movl	%edx, (%rax)
    00000102: 	addq	$0x10, %rax
    00000106: 	cmpq	%rax, %r14
    00000109: 	jne	.Ltmp485 # Offset: 265
    0000010b: 	leal	(%rdx,%rsi), %eax
    0000010e: 	imull	0xc(%rsp), %edx
    00000113: 	addl	%eax, %edx
    00000115: 	movq	(%rsp), %rax
    00000119: 	addq	$0xc, %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp486:
    00000120: 	movl	%ebp, (%rax)
    00000122: 	addq	$0x10, %rax
    00000126: 	cmpq	%rax, %r15
    00000129: 	jne	.Ltmp486 # Offset: 297
    0000012b: 	addl	%ebp, %edx
    0000012d: 	addl	%edx, %r12d
.Ltmp482:
    00000130: 	imull	$0x7a1200, %ebp, %ebp
    00000136: 	cmpl	%r12d, %ebp
    00000139: 	je	.Ltmp487 # Offset: 313
    0000013f: 	movl	$0x5, %edx
    00000144: 	leaq	DATAat0x35004(%rip), %rsi
    0000014b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000152: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 338
    00000157: 	cmpq	$0x0, 0x10(%rsp)
    0000015d: 	je	.Ltmp488 # Offset: 349
    00000163: 	movq	0x10(%rsp), %rdi
    00000168: 	callq	strlen@PLT # Offset: 360
    0000016d: 	movq	0x10(%rsp), %rsi
    00000172: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000179: 	movq	%rax, %rdx
    0000017c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 380
.Ltmp499:
    00000181: 	movl	$0xd, %edx
    00000186: 	leaq	DATAat0x3500a(%rip), %rsi
    0000018d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000194: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 404
    00000199: 	movl	%r12d, %esi
    0000019c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000001a3: 	callq	_ZNSolsEi@PLT # Offset: 419
    000001a8: 	movl	$0xb, %edx
    000001ad: 	leaq	DATAat0x35018(%rip), %rsi
    000001b4: 	movq	%rax, %r12
    000001b7: 	movq	%rax, %rdi
    000001ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 442
    000001bf: 	movl	%ebp, %esi
    000001c1: 	movq	%r12, %rdi
    000001c4: 	callq	_ZNSolsEi@PLT # Offset: 452
    000001c9: 	movq	%rax, %rbp
    000001cc: 	movq	(%rax), %rax
    000001cf: 	movq	-0x18(%rax), %rax
    000001d3: 	movq	0xf0(%rbp,%rax), %r12
    000001db: 	testq	%r12, %r12
    000001de: 	je	.Ltmp489 # Offset: 478
    000001e4: 	cmpb	$0x0, 0x38(%r12)
    000001ea: 	je	.Ltmp490 # Offset: 490
    000001f0: 	movsbl	0x43(%r12), %esi
.Ltmp498:
    000001f6: 	movq	%rbp, %rdi
    000001f9: 	callq	_ZNSo3putEc@PLT # Offset: 505
    000001fe: 	movq	%rax, %rdi
    00000201: 	callq	_ZNSo5flushEv@PLT # Offset: 513
    00000206: 	addl	$0x1, 0x18(%rsp)
    0000020b: 	movl	0x18(%rsp), %eax
    0000020f: 	cmpl	%eax, iterations(%rip)
    00000215: 	jg	.Ltmp491 # Offset: 533
.Ltmp481:
    0000021b: 	callq	clock@PLT # Offset: 539
    00000220: 	pxor	%xmm0, %xmm0
    00000224: 	movq	0x10(%rsp), %rdi
    00000229: 	movq	%rax, end_time(%rip)
    00000230: 	subq	start_time(%rip), %rax
    00000237: 	cvtsi2sd	%rax, %xmm0
    0000023c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000244: 	addq	$0x28, %rsp
    00000248: 	popq	%rbx
    00000249: 	popq	%rbp
    0000024a: 	popq	%r12
    0000024c: 	popq	%r13
    0000024e: 	popq	%r14
    00000250: 	popq	%r15
    00000252: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 594
    00000257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp487:
    00000260: 	movq	%r13, %rax
    00000263: 	movq	%r15, %r13
    00000266: 	movq	%r14, %r15
    00000269: 	movq	%rax, %r14
    0000026c: 	movl	0x18(%rsp), %eax
    00000270: 	addl	$0x1, %eax
    00000273: 	cmpl	iterations(%rip), %eax
    00000279: 	jge	.Ltmp481 # Offset: 633
    0000027b: 	cvttsd2si	%xmm0, %esi
    0000027f: 	movq	(%rsp), %rcx
    00000283: 	leal	0x1(%rsi), %edi
    00000286: 	leal	0x2(%rsi), %r11d
.Ltmp497:
    0000028a: 	cmpl	$0x0, 0x1c(%rsp)
    0000028f: 	jle	.Ltmp492 # Offset: 655
    00000291: 	movq	%rcx, %rdx
.Ltmp493:
    00000294: 	movl	%esi, (%rdx)
    00000296: 	addq	$0x10, %rdx
    0000029a: 	cmpq	%rbx, %rdx
    0000029d: 	jne	.Ltmp493 # Offset: 669
    0000029f: 	leaq	0x4(%rcx), %rdx
.Ltmp494:
    000002a3: 	movl	%edi, (%rdx)
    000002a5: 	addq	$0x10, %rdx
    000002a9: 	cmpq	%r14, %rdx
    000002ac: 	jne	.Ltmp494 # Offset: 684
    000002ae: 	leaq	0x8(%rcx), %rdx
.Ltmp495:
    000002b2: 	movl	%r11d, (%rdx)
    000002b5: 	addq	$0x10, %rdx
    000002b9: 	cmpq	%r15, %rdx
    000002bc: 	jne	.Ltmp495 # Offset: 700
    000002be: 	leaq	0xc(%rcx), %rdx
.Ltmp496:
    000002c2: 	movl	%edi, (%rdx)
    000002c4: 	addq	$0x10, %rdx
    000002c8: 	cmpq	%r13, %rdx
    000002cb: 	jne	.Ltmp496 # Offset: 715
.Ltmp492:
    000002cd: 	addl	$0x1, %eax
    000002d0: 	cmpl	iterations(%rip), %eax
    000002d6: 	jl	.Ltmp497 # Offset: 726
    000002d8: 	jmp	.Ltmp481 # Offset: 728
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp490:
    000002e0: 	movq	%r12, %rdi
    000002e3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 739
    000002e8: 	movq	(%r12), %rax
    000002ec: 	movl	$0xa, %esi
    000002f1: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002f8: 	movq	0x30(%rax), %rax
    000002fc: 	cmpq	%rdx, %rax
    000002ff: 	je	.Ltmp498 # Offset: 767
    00000305: 	movq	%r12, %rdi
    00000308: 	callq	*%rax # Offset: 776
    0000030a: 	movsbl	%al, %esi
    0000030d: 	jmp	.Ltmp498 # Offset: 781
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp488:
    00000318: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000031f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000326: 	movq	(%rax), %rax
    00000329: 	addq	-0x18(%rax), %rdi
    0000032d: 	movl	0x20(%rdi), %esi
    00000330: 	orl	$0x1, %esi
    00000333: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 819
    00000338: 	jmp	.Ltmp499 # Offset: 824
.Ltmp489:
    0000033d: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 829
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_for_loop_4IiEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked2IdEvPT_iPKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0xee10
  Size        : 0x4e9
  MaxSize     : 0x4f0
  Offset      : 0xee10
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked2IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movl	%esi, 0x1c(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	movl	%eax, (%rsp)
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp500 # Offset: 53
    0000003b: 	movl	%ebx, %eax
    0000003d: 	movl	$0x0, 0x10(%rsp)
    00000045: 	movq	%r14, %r15
    00000048: 	leaq	init_value(%rip), %r12
    0000004f: 	leal	-0x1(%rax), %edi
    00000052: 	subl	$0x202, %eax
    00000057: 	leal	-0x201(%rbx), %ebx
    0000005d: 	movsd	DATAat0x36fb0(%rip), %xmm2
    00000065: 	andl	$0xfffffe00, %eax
    0000006a: 	movl	%edi, 0x14(%rsp)
    0000006e: 	leaq	0x8(%r12), %rbp
    00000073: 	addl	$0x200, %eax
    00000078: 	movl	%eax, 0x18(%rsp)
.Ltmp513:
    0000007c: 	xorl	%r8d, %r8d
    0000007f: 	pxor	%xmm0, %xmm0
    00000083: 	testl	%ebx, %ebx
    00000085: 	jle	.Ltmp501 # Offset: 133
    0000008b: 	leaq	0x8(%r15), %r9
    0000008f: 	movl	$0x2, %r8d
    00000095: 	pxor	%xmm0, %xmm0
    00000099: 	xorl	%edx, %edx
    0000009b: 	movsd	DATAat0x36fb0(%rip), %xmm3
    000000a3: 	movq	%r9, %rsi
    000000a6: 	movl	$0x200, %edi
.Ltmp506:
    000000ab: 	cmpq	%rdi, %rdx
    000000ae: 	jae	.Ltmp502 # Offset: 174
    000000b4: 	cmpq	%r8, %rdi
    000000b7: 	leaq	-0x8(%rsi), %rax
    000000bb: 	sbbq	%rcx, %rcx
    000000be: 	andb	$0x1, %cl
    000000c1: 	leaq	0x200(%rdx,%rcx,2), %rcx
    000000c9: 	leaq	(%r15,%rcx,8), %rcx
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp503:
    000000d0: 	movsd	init_value(%rip), %xmm1
    000000d8: 	addq	$0x10, %rax
    000000dc: 	movsd	%xmm1, -0x10(%rax)
    000000e1: 	addsd	%xmm1, %xmm0
    000000e5: 	cmpq	%rcx, %rax
    000000e8: 	jne	.Ltmp503 # Offset: 232
    000000ea: 	cmpq	%r8, %rdi
    000000ed: 	sbbq	%r10, %r10
    000000f0: 	andb	$0x1, %r10b
    000000f4: 	addq	$0x100, %r10
    000000fb: 	leaq	(%rdx,%r10,2), %rax
    000000ff: 	leaq	-0x1(%r10), %r11
    00000103: 	leaq	(%r15,%rax,8), %rax
    00000107: 	cmpq	%r12, %rax
    0000010a: 	setbe	%al
    0000010d: 	cmpq	%rbp, %rsi
    00000110: 	setae	%cl
    00000113: 	orb	%cl, %al
    00000115: 	je	.Ltmp504 # Offset: 277
    0000011b: 	cmpq	$0x8, %r11
    0000011f: 	jbe	.Ltmp504 # Offset: 287
    00000125: 	movsd	init_value(%rip), %xmm1
    0000012d: 	movq	%r10, %rcx
    00000130: 	movq	%rsi, %rax
    00000133: 	shrq	%rcx
    00000136: 	addsd	%xmm2, %xmm1
    0000013a: 	shlq	$0x5, %rcx
    0000013e: 	addq	%rsi, %rcx
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp505:
    00000148: 	addsd	%xmm1, %xmm0
    0000014c: 	movsd	%xmm1, (%rax)
    00000150: 	addq	$0x20, %rax
    00000154: 	movsd	%xmm1, -0x10(%rax)
    00000159: 	addsd	%xmm1, %xmm0
    0000015d: 	cmpq	%rcx, %rax
    00000160: 	jne	.Ltmp505 # Offset: 352
    00000162: 	movq	%r10, %r11
    00000165: 	leaq	0x1(%rdx), %rax
    00000169: 	andq	$-0x2, %r11
    0000016d: 	leaq	(%r11,%r11), %rcx
    00000171: 	cmpq	%r11, %r10
    00000174: 	je	.Ltmp502 # Offset: 372
    00000176: 	movsd	init_value(%rip), %xmm1
    0000017e: 	addq	%rcx, %rax
    00000181: 	addsd	%xmm2, %xmm1
    00000185: 	addsd	%xmm1, %xmm0
    00000189: 	movsd	%xmm1, (%r15,%rax,8)
.Ltmp502:
    0000018f: 	addq	$0x200, %rdx
    00000196: 	addq	$0x200, %rdi
    0000019d: 	addq	$0x200, %r8
    000001a4: 	addq	$0x1000, %rsi
    000001ab: 	cmpl	%edx, %ebx
    000001ad: 	jg	.Ltmp506 # Offset: 429
    000001b3: 	movl	0x18(%rsp), %r8d
.Ltmp501:
    000001b8: 	cmpl	%r8d, 0x14(%rsp)
    000001bd: 	jle	.Ltmp507 # Offset: 445
    000001c3: 	movl	0x1c(%rsp), %eax
    000001c7: 	movslq	%r8d, %r10
    000001ca: 	leaq	(,%r10,8), %r11
    000001d2: 	leal	-0x2(%rax), %r9d
    000001d6: 	leaq	(%r15,%r11), %rsi
    000001da: 	subl	%r8d, %r9d
    000001dd: 	movl	%r9d, %edi
    000001e0: 	shrl	%edi
    000001e2: 	movl	%edi, %eax
    000001e4: 	leaq	(%r10,%rax,2), %rax
    000001e8: 	leaq	0x10(%r15,%rax,8), %rdx
    000001ed: 	movq	%rsi, %rax
.Ltmp508:
    000001f0: 	movsd	init_value(%rip), %xmm1
    000001f8: 	addq	$0x10, %rax
    000001fc: 	movsd	%xmm1, -0x10(%rax)
    00000201: 	addsd	%xmm1, %xmm0
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp508 # Offset: 520
    0000020a: 	leaq	0x8(%r15,%r11), %rax
    0000020f: 	leal	0x1(%rdi), %r11d
    00000213: 	leaq	(%r10,%r11,2), %r10
    00000217: 	movq	%r11, %rdi
    0000021a: 	leaq	(%r15,%r10,8), %r10
    0000021e: 	cmpq	%r12, %r10
    00000221: 	setbe	%r10b
    00000225: 	cmpq	%rbp, %rax
    00000228: 	setae	%r11b
    0000022c: 	orb	%r11b, %r10b
    0000022f: 	je	.Ltmp509 # Offset: 559
    00000235: 	cmpl	$0x11, %r9d
    00000239: 	jbe	.Ltmp509 # Offset: 569
    0000023f: 	movsd	DATAat0x36fb0(%rip), %xmm3
    00000247: 	movl	%edi, %edx
    00000249: 	shrl	%edx
    0000024b: 	subl	$0x1, %edx
    0000024e: 	addsd	%xmm3, %xmm1
    00000252: 	shlq	$0x5, %rdx
    00000256: 	leaq	0x20(%rax,%rdx), %rdx
.Ltmp510:
    0000025b: 	addsd	%xmm1, %xmm0
    0000025f: 	movsd	%xmm1, (%rax)
    00000263: 	addq	$0x20, %rax
    00000267: 	movsd	%xmm1, -0x10(%rax)
    0000026c: 	addsd	%xmm1, %xmm0
    00000270: 	cmpq	%rdx, %rax
    00000273: 	jne	.Ltmp510 # Offset: 627
    00000275: 	movl	%edi, %edx
    00000277: 	andl	$-0x2, %edx
    0000027a: 	leal	(%r8,%rdx,2), %eax
    0000027e: 	cmpl	%edx, %edi
    00000280: 	je	.Ltmp507 # Offset: 640
    00000282: 	addsd	init_value(%rip), %xmm3
    0000028a: 	addl	$0x1, %eax
    0000028d: 	cltq
    0000028f: 	addsd	%xmm3, %xmm0
    00000293: 	movsd	%xmm3, (%r15,%rax,8)
.Ltmp507:
    00000299: 	movsd	DATAat0x36ec8(%rip), %xmm1
    000002a1: 	mulsd	init_value(%rip), %xmm1
    000002a9: 	movapd	%xmm0, %xmm3
    000002ad: 	addsd	DATAat0x36ed0(%rip), %xmm1
    000002b5: 	andpd	DATAat0x36f60(%rip), %xmm3
    000002bd: 	comisd	DATAat0x36ed8(%rip), %xmm3
    000002c5: 	movapd	%xmm1, %xmm4
    000002c9: 	movsd	%xmm1, 0x8(%rsp)
    000002cf: 	movapd	%xmm0, %xmm1
    000002d3: 	subsd	%xmm4, %xmm1
    000002d7: 	jbe	.Ltmp511 # Offset: 727
    000002d9: 	divsd	%xmm0, %xmm1
.Ltmp511:
    000002dd: 	andpd	DATAat0x36f60(%rip), %xmm1
    000002e5: 	movsd	DATAat0x36ee0(%rip), %xmm5
    000002ed: 	comisd	%xmm1, %xmm5
    000002f1: 	jbe	.Ltmp512 # Offset: 753
.Ltmp518:
    000002f7: 	addl	$0x1, 0x10(%rsp)
    000002fc: 	movl	0x10(%rsp), %eax
    00000300: 	cmpl	(%rsp), %eax
    00000303: 	jl	.Ltmp513 # Offset: 771
.Ltmp500:
    00000309: 	callq	clock@PLT # Offset: 777
    0000030e: 	pxor	%xmm0, %xmm0
    00000312: 	movq	%r13, %rdi
    00000315: 	movq	%rax, end_time(%rip)
    0000031c: 	subq	start_time(%rip), %rax
    00000323: 	cvtsi2sd	%rax, %xmm0
    00000328: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000330: 	addq	$0x28, %rsp
    00000334: 	popq	%rbx
    00000335: 	popq	%rbp
    00000336: 	popq	%r12
    00000338: 	popq	%r13
    0000033a: 	popq	%r14
    0000033c: 	popq	%r15
    0000033e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 830
.Ltmp504:
    00000343: 	leaq	(%rdx,%r10,2), %rax
    00000347: 	leaq	(%r9,%rax,8), %rcx
    0000034b: 	movq	%rsi, %rax
    0000034e: 	nop # Size: 2
.Ltmp514:
    00000350: 	movsd	init_value(%rip), %xmm1
    00000358: 	addq	$0x10, %rax
    0000035c: 	addsd	%xmm3, %xmm1
    00000360: 	movsd	%xmm1, -0x10(%rax)
    00000365: 	addsd	%xmm1, %xmm0
    00000369: 	cmpq	%rcx, %rax
    0000036c: 	jne	.Ltmp514 # Offset: 876
    0000036e: 	jmp	.Ltmp502 # Offset: 878
.Ltmp512:
    00000373: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000037a: 	movl	$0x5, %edx
    0000037f: 	movsd	%xmm0, (%rsp)
    00000384: 	leaq	DATAat0x35004(%rip), %rsi
    0000038b: 	movq	%r14, %rdi
    0000038e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 910
    00000393: 	testq	%r13, %r13
    00000396: 	movsd	(%rsp), %xmm0
    0000039b: 	je	.Ltmp515 # Offset: 923
    000003a1: 	movq	%r13, %rdi
    000003a4: 	movsd	%xmm0, (%rsp)
    000003a9: 	callq	strlen@PLT # Offset: 937
    000003ae: 	movq	%r13, %rsi
    000003b1: 	movq	%r14, %rdi
    000003b4: 	movq	%rax, %rdx
    000003b7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 951
    000003bc: 	movsd	(%rsp), %xmm0
.Ltmp521:
    000003c1: 	movl	$0xd, %edx
    000003c6: 	leaq	DATAat0x3500a(%rip), %rsi
    000003cd: 	movq	%r14, %rdi
    000003d0: 	movsd	%xmm0, (%rsp)
    000003d5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 981
    000003da: 	movsd	(%rsp), %xmm0
    000003df: 	movq	%r14, %rdi
    000003e2: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 994
    000003e7: 	movl	$0xb, %edx
    000003ec: 	leaq	DATAat0x35018(%rip), %rsi
    000003f3: 	movq	%rax, %rdi
    000003f6: 	movq	%rax, %r14
    000003f9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1017
    000003fe: 	movsd	0x8(%rsp), %xmm0
    00000404: 	movq	%r14, %rdi
    00000407: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1031
    0000040c: 	movq	%rax, %r8
    0000040f: 	movq	(%rax), %rax
    00000412: 	movq	-0x18(%rax), %rax
    00000416: 	movq	0xf0(%r8,%rax), %r14
    0000041e: 	testq	%r14, %r14
    00000421: 	je	.Ltmp516 # Offset: 1057
    00000427: 	cmpb	$0x0, 0x38(%r14)
    0000042c: 	je	.Ltmp517 # Offset: 1068
    0000042e: 	movsbl	0x43(%r14), %esi
.Ltmp520:
    00000433: 	movq	%r8, %rdi
    00000436: 	callq	_ZNSo3putEc@PLT # Offset: 1078
    0000043b: 	movq	%rax, %rdi
    0000043e: 	callq	_ZNSo5flushEv@PLT # Offset: 1086
    00000443: 	movl	iterations(%rip), %eax
    00000449: 	movl	%eax, (%rsp)
    0000044c: 	movq	DATAat0x36fb0(%rip), %rax
    00000453: 	movq	%rax, %xmm2
    00000458: 	jmp	.Ltmp518 # Offset: 1112
.Ltmp509:
    0000045d: 	movsd	DATAat0x36fb0(%rip), %xmm3
.Ltmp519:
    00000465: 	movsd	init_value(%rip), %xmm1
    0000046d: 	addq	$0x10, %rsi
    00000471: 	addsd	%xmm3, %xmm1
    00000475: 	movsd	%xmm1, -0x8(%rsi)
    0000047a: 	addsd	%xmm1, %xmm0
    0000047e: 	cmpq	%rdx, %rsi
    00000481: 	jne	.Ltmp519 # Offset: 1153
    00000483: 	jmp	.Ltmp507 # Offset: 1155
.Ltmp517:
    00000488: 	movq	%r14, %rdi
    0000048b: 	movq	%r8, (%rsp)
    0000048f: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1167
    00000494: 	movq	(%r14), %rax
    00000497: 	movq	(%rsp), %r8
    0000049b: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000004a2: 	movl	$0xa, %esi
    000004a7: 	movq	0x30(%rax), %rax
    000004ab: 	cmpq	%rdx, %rax
    000004ae: 	je	.Ltmp520 # Offset: 1198
    000004b0: 	movq	%r14, %rdi
    000004b3: 	callq	*%rax # Offset: 1203
    000004b5: 	movq	(%rsp), %r8
    000004b9: 	movsbl	%al, %esi
    000004bc: 	jmp	.Ltmp520 # Offset: 1212
.Ltmp515:
    000004c1: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004c8: 	movq	-0x18(%rax), %rdi
    000004cc: 	addq	%r14, %rdi
    000004cf: 	movl	0x20(%rdi), %esi
    000004d2: 	orl	$0x1, %esi
    000004d5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1237
    000004da: 	movsd	(%rsp), %xmm0
    000004df: 	jmp	.Ltmp521 # Offset: 1247
.Ltmp516:
    000004e4: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1252
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked2IdEvPT_iPKc"

Binary Function "_Z15test_loop_3_optIdEvPT_iPKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0xf300
  Size        : 0x2ee
  MaxSize     : 0x2f0
  Offset      : 0xf300
  Section     : .text
  Orc Section : .local.text._Z15test_loop_3_optIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edx
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edx, %edx
    0000002f: 	jle	.Ltmp522 # Offset: 47
    00000035: 	movsd	DATAat0x36fb0(%rip), %xmm5
    0000003d: 	movsd	DATAat0x37030(%rip), %xmm4
    00000045: 	subl	$0x2, %r14d
    00000049: 	xorl	%ebx, %ebx
    0000004b: 	leaq	DATAat0x35004(%rip), %r12
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp528:
    00000058: 	movsd	init_value(%rip), %xmm0
    00000060: 	xorl	%eax, %eax
    00000062: 	pxor	%xmm3, %xmm3
    00000066: 	testl	%r14d, %r14d
    00000069: 	jg	.Ltmp523 # Offset: 105
    0000006b: 	jmp	.Ltmp524 # Offset: 107
.Ltmp525:
    00000070: 	movsd	init_value(%rip), %xmm0
.Ltmp523:
    00000078: 	movapd	%xmm0, %xmm1
    0000007c: 	movsd	%xmm0, (%r13,%rax,8)
    00000083: 	addsd	%xmm3, %xmm0
    00000087: 	addsd	%xmm5, %xmm1
    0000008b: 	movsd	%xmm1, 0x8(%r13,%rax,8)
    00000092: 	movsd	init_value(%rip), %xmm2
    0000009a: 	addsd	%xmm0, %xmm1
    0000009e: 	addsd	%xmm4, %xmm2
    000000a2: 	movsd	%xmm2, 0x10(%r13,%rax,8)
    000000a9: 	movapd	%xmm2, %xmm3
    000000ad: 	addq	$0x3, %rax
    000000b1: 	addsd	%xmm1, %xmm3
    000000b5: 	cmpl	%eax, %r14d
    000000b8: 	jg	.Ltmp525 # Offset: 184
    000000ba: 	movsd	DATAat0x36ee8(%rip), %xmm1
    000000c2: 	movapd	%xmm3, %xmm2
    000000c6: 	movapd	%xmm3, %xmm0
    000000ca: 	andpd	DATAat0x36f60(%rip), %xmm2
    000000d2: 	mulsd	init_value(%rip), %xmm1
    000000da: 	comisd	DATAat0x36ed8(%rip), %xmm2
    000000e2: 	addsd	DATAat0x36ee8(%rip), %xmm1
    000000ea: 	subsd	%xmm1, %xmm0
    000000ee: 	jbe	.Ltmp526 # Offset: 238
    000000f0: 	divsd	%xmm3, %xmm0
.Ltmp526:
    000000f4: 	andpd	DATAat0x36f60(%rip), %xmm0
    000000fc: 	movsd	DATAat0x36ee0(%rip), %xmm6
    00000104: 	comisd	%xmm0, %xmm6
    00000108: 	jbe	.Ltmp527 # Offset: 264
.Ltmp532:
    0000010a: 	addl	$0x1, %ebx
    0000010d: 	cmpl	%edx, %ebx
    0000010f: 	jl	.Ltmp528 # Offset: 271
.Ltmp522:
    00000115: 	callq	clock@PLT # Offset: 277
    0000011a: 	pxor	%xmm0, %xmm0
    0000011e: 	movq	%rbp, %rdi
    00000121: 	movq	%rax, end_time(%rip)
    00000128: 	subq	start_time(%rip), %rax
    0000012f: 	cvtsi2sd	%rax, %xmm0
    00000134: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 330
    0000014f: 	nop # Size: 1
.Ltmp527:
    00000150: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000157: 	movl	$0x5, %edx
    0000015c: 	movq	%r12, %rsi
    0000015f: 	movsd	%xmm1, 0x8(%rsp)
    00000165: 	movq	%r15, %rdi
    00000168: 	movsd	%xmm3, (%rsp)
    0000016d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 365
    00000172: 	testq	%rbp, %rbp
    00000175: 	movsd	(%rsp), %xmm3
    0000017a: 	movsd	0x8(%rsp), %xmm1
    00000180: 	je	.Ltmp529 # Offset: 384
    00000186: 	movq	%rbp, %rdi
    00000189: 	movsd	%xmm1, 0x8(%rsp)
    0000018f: 	movsd	%xmm3, (%rsp)
    00000194: 	callq	strlen@PLT # Offset: 404
    00000199: 	movq	%rbp, %rsi
    0000019c: 	movq	%r15, %rdi
    0000019f: 	movq	%rax, %rdx
    000001a2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 418
    000001a7: 	movsd	0x8(%rsp), %xmm1
    000001ad: 	movsd	(%rsp), %xmm3
.Ltmp534:
    000001b2: 	movl	$0xd, %edx
    000001b7: 	leaq	DATAat0x3500a(%rip), %rsi
    000001be: 	movq	%r15, %rdi
    000001c1: 	movsd	%xmm1, 0x8(%rsp)
    000001c7: 	movsd	%xmm3, (%rsp)
    000001cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 460
    000001d1: 	movsd	(%rsp), %xmm3
    000001d6: 	movq	%r15, %rdi
    000001d9: 	movapd	%xmm3, %xmm0
    000001dd: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 477
    000001e2: 	movl	$0xb, %edx
    000001e7: 	leaq	DATAat0x35018(%rip), %rsi
    000001ee: 	movq	%rax, %rdi
    000001f1: 	movq	%rax, %r15
    000001f4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 500
    000001f9: 	movsd	0x8(%rsp), %xmm1
    000001ff: 	movq	%r15, %rdi
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 518
    0000020b: 	movq	%rax, %r15
    0000020e: 	movq	(%rax), %rax
    00000211: 	movq	-0x18(%rax), %rax
    00000215: 	movq	0xf0(%r15,%rax), %rdi
    0000021d: 	testq	%rdi, %rdi
    00000220: 	je	.Ltmp530 # Offset: 544
    00000226: 	cmpb	$0x0, 0x38(%rdi)
    0000022a: 	je	.Ltmp531 # Offset: 554
    0000022c: 	movsbl	0x43(%rdi), %esi
.Ltmp533:
    00000230: 	movq	%r15, %rdi
    00000233: 	callq	_ZNSo3putEc@PLT # Offset: 563
    00000238: 	movq	%rax, %rdi
    0000023b: 	callq	_ZNSo5flushEv@PLT # Offset: 571
    00000240: 	movq	DATAat0x37030(%rip), %rax
    00000247: 	movl	iterations(%rip), %edx
    0000024d: 	movq	%rax, %xmm4
    00000252: 	movq	DATAat0x36fb0(%rip), %rax
    00000259: 	movq	%rax, %xmm5
    0000025e: 	jmp	.Ltmp532 # Offset: 606
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp531:
    00000268: 	movq	%rdi, (%rsp)
    0000026c: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 620
    00000271: 	movq	(%rsp), %rdi
    00000275: 	movl	$0xa, %esi
    0000027a: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000281: 	movq	(%rdi), %rax
    00000284: 	movq	0x30(%rax), %rax
    00000288: 	cmpq	%rdx, %rax
    0000028b: 	je	.Ltmp533 # Offset: 651
    0000028d: 	callq	*%rax # Offset: 653
    0000028f: 	movsbl	%al, %esi
    00000292: 	jmp	.Ltmp533 # Offset: 658
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp524:
    00000298: 	mulsd	DATAat0x36ee8(%rip), %xmm0
    000002a0: 	movsd	DATAat0x36ee8(%rip), %xmm1
    000002a8: 	pxor	%xmm3, %xmm3
    000002ac: 	addsd	%xmm0, %xmm1
    000002b0: 	pxor	%xmm0, %xmm0
    000002b4: 	subsd	%xmm1, %xmm0
    000002b8: 	jmp	.Ltmp526 # Offset: 696
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp529:
    000002c0: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002c7: 	movq	-0x18(%rax), %rdi
    000002cb: 	addq	%r15, %rdi
    000002ce: 	movl	0x20(%rdi), %esi
    000002d1: 	orl	$0x1, %esi
    000002d4: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 724
    000002d9: 	movsd	(%rsp), %xmm3
    000002de: 	movsd	0x8(%rsp), %xmm1
    000002e4: 	jmp	.Ltmp534 # Offset: 740
.Ltmp530:
    000002e9: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 745
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_loop_3_optIdEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked3IdEvPT_iPKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0xf5f0
  Size        : 0x705
  MaxSize     : 0x710
  Offset      : 0xf5f0
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x38, %rsp
    00000017: 	movl	%esi, 0x2c(%rsp)
    0000001b: 	movq	%rdx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	movl	%eax, 0x18(%rsp)
    00000036: 	testl	%eax, %eax
    00000038: 	jle	.Ltmp535 # Offset: 56
    0000003e: 	leal	-0x200(%rbx), %eax
    00000044: 	movl	$0x0, 0x28(%rsp)
    0000004c: 	leaq	init_value(%rip), %r13
    00000053: 	movl	%eax, (%rsp)
    00000056: 	leal	-0x2(%rbx), %eax
    00000059: 	movl	%eax, 0x4(%rsp)
.Ltmp554:
    0000005d: 	movl	(%rsp), %edx
    00000060: 	testl	%edx, %edx
    00000062: 	jle	.Ltmp536 # Offset: 98
    00000068: 	leaq	0x10(%r12), %rax
    0000006d: 	movl	$0x1fe, %esi
    00000072: 	pxor	%xmm0, %xmm0
    00000076: 	xorl	%ecx, %ecx
    00000078: 	movq	%rax, 0x10(%rsp)
    0000007d: 	movq	%rax, %rdi
    00000080: 	leaq	0x8(%r12), %rax
    00000085: 	movsd	DATAat0x36fb0(%rip), %xmm3
    0000008d: 	movq	%rax, 0x20(%rsp)
    00000092: 	movq	%rax, %r8
    00000095: 	movsd	DATAat0x37030(%rip), %xmm2
    0000009d: 	movl	$0x3, %r9d
    000000a3: 	leaq	iterations(%rip), %rbx
.Ltmp544:
    000000aa: 	movl	%esi, %ebp
    000000ac: 	cmpq	%rcx, %rsi
    000000af: 	jbe	.Ltmp537 # Offset: 175
    000000b5: 	cmpq	%r9, %rsi
    000000b8: 	leaq	-0x10(%rdi), %rax
    000000bc: 	sbbq	%rdx, %rdx
    000000bf: 	andb	$0x57, %dl
    000000c2: 	leaq	0x1fe(%rdx,%rdx,2), %rdx
    000000ca: 	addq	%rcx, %rdx
    000000cd: 	leaq	(%r12,%rdx,8), %rdx
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp538:
    000000d8: 	movsd	init_value(%rip), %xmm1
    000000e0: 	addq	$0x18, %rax
    000000e4: 	movsd	%xmm1, -0x18(%rax)
    000000e9: 	addsd	%xmm1, %xmm0
    000000ed: 	cmpq	%rdx, %rax
    000000f0: 	jne	.Ltmp538 # Offset: 240
    000000f2: 	cmpq	%r9, %rsi
    000000f5: 	leaq	0x1(%rcx), %r14
    000000f9: 	sbbq	%rdx, %rdx
    000000fc: 	andb	$0x57, %dl
    000000ff: 	addq	$0xaa, %rdx
    00000106: 	leaq	-0x1(%rdx), %rax
    0000010a: 	leaq	(%rdx,%rdx,2), %r10
    0000010e: 	cmpq	$0x8, %rax
    00000112: 	leaq	(%r14,%r10), %rax
    00000116: 	leaq	-0x10(%r12,%rax,8), %rax
    0000011b: 	seta	%r11b
    0000011f: 	cmpq	%r13, %rax
    00000122: 	setbe	%r15b
    00000126: 	cmpq	%rbx, %r8
    00000129: 	setae	%al
    0000012c: 	orb	%r15b, %al
    0000012f: 	je	.Ltmp539 # Offset: 303
    00000135: 	testb	%r11b, %r11b
    00000138: 	je	.Ltmp539 # Offset: 312
    0000013e: 	movsd	init_value(%rip), %xmm1
    00000146: 	movq	%rdx, %r15
    00000149: 	movq	%rdx, %rax
    0000014c: 	shrq	%r15
    0000014f: 	andq	$-0x2, %rax
    00000153: 	addq	%r15, %rax
    00000156: 	addsd	%xmm3, %xmm1
    0000015a: 	shlq	$0x4, %rax
    0000015e: 	leaq	(%rax,%r8), %r15
    00000162: 	movq	%r8, %rax
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp540:
    00000168: 	addsd	%xmm1, %xmm0
    0000016c: 	movsd	%xmm1, (%rax)
    00000170: 	addq	$0x30, %rax
    00000174: 	movsd	%xmm1, -0x18(%rax)
    00000179: 	addsd	%xmm1, %xmm0
    0000017d: 	cmpq	%rax, %r15
    00000180: 	jne	.Ltmp540 # Offset: 384
    00000182: 	movq	%rdx, %r15
    00000185: 	andq	$-0x2, %r15
    00000189: 	leaq	(%r15,%r15,2), %rax
    0000018d: 	cmpq	%r15, %rdx
    00000190: 	je	.Ltmp541 # Offset: 400
    00000192: 	movsd	init_value(%rip), %xmm1
    0000019a: 	addq	%r14, %rax
    0000019d: 	addsd	%xmm3, %xmm1
    000001a1: 	addsd	%xmm1, %xmm0
    000001a5: 	movsd	%xmm1, (%r12,%rax,8)
.Ltmp541:
    000001ab: 	leaq	0x2(%rcx), %rax
    000001af: 	leaq	(%rax,%r10), %r14
    000001b3: 	leaq	-0x10(%r12,%r14,8), %r14
    000001b8: 	cmpq	%r13, %r14
    000001bb: 	setbe	%r15b
    000001bf: 	cmpq	%rbx, %rdi
    000001c2: 	setae	%r14b
    000001c6: 	orb	%r15b, %r14b
    000001c9: 	je	.Ltmp542 # Offset: 457
    000001cf: 	testb	%r11b, %r11b
    000001d2: 	je	.Ltmp542 # Offset: 466
    000001d8: 	movsd	init_value(%rip), %xmm1
    000001e0: 	movq	%rdx, %r11
    000001e3: 	movq	%rdx, %r10
    000001e6: 	shrq	%r11
    000001e9: 	andq	$-0x2, %r10
    000001ed: 	addq	%r11, %r10
    000001f0: 	addsd	%xmm2, %xmm1
    000001f4: 	shlq	$0x4, %r10
    000001f8: 	leaq	(%r10,%rdi), %r11
    000001fc: 	movq	%rdi, %r10
    000001ff: 	nop # Size: 1
.Ltmp543:
    00000200: 	addsd	%xmm1, %xmm0
    00000204: 	movsd	%xmm1, (%r10)
    00000209: 	addq	$0x30, %r10
    0000020d: 	movsd	%xmm1, -0x18(%r10)
    00000213: 	addsd	%xmm1, %xmm0
    00000217: 	cmpq	%r11, %r10
    0000021a: 	jne	.Ltmp543 # Offset: 538
    0000021c: 	movq	%rdx, %r11
    0000021f: 	andq	$-0x2, %r11
    00000223: 	leaq	(%r11,%r11,2), %r10
    00000227: 	cmpq	%r11, %rdx
    0000022a: 	je	.Ltmp537 # Offset: 554
    0000022c: 	movsd	init_value(%rip), %xmm1
    00000234: 	addq	%r10, %rax
    00000237: 	addsd	%xmm2, %xmm1
    0000023b: 	addsd	%xmm1, %xmm0
    0000023f: 	movsd	%xmm1, (%r12,%rax,8)
.Ltmp537:
    00000245: 	addq	$0x1fe, %rcx
    0000024c: 	addq	$0x1fe, %rsi
    00000253: 	addq	$0x1fe, %r9
    0000025a: 	addq	$0xff0, %rdi
    00000261: 	addq	$0xff0, %r8
    00000268: 	cmpl	%ecx, (%rsp)
    0000026b: 	jg	.Ltmp544 # Offset: 619
    00000271: 	cmpl	0x4(%rsp), %ebp
    00000275: 	jge	.Ltmp545 # Offset: 629
.Ltmp564:
    0000027b: 	movslq	%ebp, %rcx
    0000027e: 	movl	0x4(%rsp), %edx
    00000282: 	movq	%rcx, %rax
.Ltmp546:
    00000285: 	movsd	init_value(%rip), %xmm1
    0000028d: 	movsd	%xmm1, (%r12,%rax,8)
    00000293: 	addq	$0x3, %rax
    00000297: 	addsd	%xmm1, %xmm0
    0000029b: 	cmpl	%eax, %edx
    0000029d: 	jg	.Ltmp546 # Offset: 669
    0000029f: 	movl	0x2c(%rsp), %eax
    000002a3: 	movl	$0xaaaaaaab, %ebx
    000002a8: 	leaq	0x8(,%rcx,8), %r9
    000002b0: 	leal	-0x3(%rax), %edx
    000002b3: 	leaq	(%r12,%r9), %rax
    000002b7: 	subl	%ebp, %edx
    000002b9: 	cmpl	$0x1a, %edx
    000002bc: 	seta	%dil
    000002c0: 	imulq	%rbx, %rdx
    000002c4: 	shrq	$0x21, %rdx
    000002c8: 	leal	0x1(%rdx), %esi
    000002cb: 	movq	%rsi, %rdx
    000002ce: 	leaq	(%rsi,%rsi,2), %rsi
    000002d2: 	leaq	0x1(%rcx,%rsi), %rsi
    000002d7: 	shlq	$0x3, %rsi
    000002db: 	leaq	-0x10(%r12,%rsi), %r8
    000002e0: 	cmpq	%r13, %r8
    000002e3: 	leaq	iterations(%rip), %r8
    000002ea: 	setbe	%r11b
    000002ee: 	cmpq	%r8, %rax
    000002f1: 	setae	%r10b
    000002f5: 	orb	%r11b, %r10b
    000002f8: 	je	.Ltmp547 # Offset: 760
    000002fe: 	testb	%dil, %dil
    00000301: 	je	.Ltmp547 # Offset: 769
    00000307: 	movl	%edx, %r10d
    0000030a: 	movsd	DATAat0x36fb0(%rip), %xmm2
    00000312: 	shrl	%r10d
    00000315: 	subl	$0x1, %r10d
    00000319: 	addsd	%xmm2, %xmm1
    0000031d: 	leaq	(%r10,%r10,2), %r10
    00000321: 	shlq	$0x4, %r10
    00000325: 	leaq	0x30(%rax,%r10), %r10
.Ltmp548:
    0000032a: 	addsd	%xmm1, %xmm0
    0000032e: 	movsd	%xmm1, (%rax)
    00000332: 	addq	$0x30, %rax
    00000336: 	movsd	%xmm1, -0x18(%rax)
    0000033b: 	addsd	%xmm1, %xmm0
    0000033f: 	cmpq	%r10, %rax
    00000342: 	jne	.Ltmp548 # Offset: 834
    00000344: 	movl	%edx, %r10d
    00000347: 	andl	$-0x2, %r10d
    0000034b: 	leal	(%r10,%r10,2), %eax
    0000034f: 	addl	%ebp, %eax
    00000351: 	cmpl	%r10d, %edx
    00000354: 	je	.Ltmp549 # Offset: 852
    00000356: 	addsd	init_value(%rip), %xmm2
    0000035e: 	addl	$0x1, %eax
    00000361: 	cltq
    00000363: 	addsd	%xmm2, %xmm0
    00000367: 	movsd	%xmm2, (%r12,%rax,8)
.Ltmp549:
    0000036d: 	leaq	-0x8(%r12,%rsi), %rsi
    00000372: 	leaq	0x8(%r12,%r9), %rax
    00000377: 	cmpq	%r13, %rsi
    0000037a: 	setbe	%sil
    0000037e: 	cmpq	%r8, %rax
    00000381: 	setae	%r8b
    00000385: 	orb	%r8b, %sil
    00000388: 	je	.Ltmp550 # Offset: 904
    0000038e: 	testb	%dil, %dil
    00000391: 	je	.Ltmp550 # Offset: 913
    00000397: 	movl	%edx, %ecx
    00000399: 	movsd	DATAat0x37030(%rip), %xmm1
    000003a1: 	movsd	init_value(%rip), %xmm2
    000003a9: 	shrl	%ecx
    000003ab: 	subl	$0x1, %ecx
    000003ae: 	addsd	%xmm1, %xmm2
    000003b2: 	leaq	(%rcx,%rcx,2), %rcx
    000003b6: 	shlq	$0x4, %rcx
    000003ba: 	leaq	0x30(%rax,%rcx), %rcx
.Ltmp551:
    000003bf: 	addsd	%xmm2, %xmm0
    000003c3: 	movsd	%xmm2, (%rax)
    000003c7: 	addq	$0x30, %rax
    000003cb: 	movsd	%xmm2, -0x18(%rax)
    000003d0: 	addsd	%xmm2, %xmm0
    000003d4: 	cmpq	%rcx, %rax
    000003d7: 	jne	.Ltmp551 # Offset: 983
    000003d9: 	movl	%edx, %ecx
    000003db: 	andl	$-0x2, %ecx
    000003de: 	leal	(%rcx,%rcx,2), %eax
    000003e1: 	addl	%ebp, %eax
    000003e3: 	cmpl	%edx, %ecx
    000003e5: 	je	.Ltmp545 # Offset: 997
    000003e7: 	addsd	init_value(%rip), %xmm1
    000003ef: 	addl	$0x2, %eax
    000003f2: 	cltq
    000003f4: 	addsd	%xmm1, %xmm0
    000003f8: 	movsd	%xmm1, (%r12,%rax,8)
.Ltmp545:
    000003fe: 	movsd	DATAat0x36ee8(%rip), %xmm1
    00000406: 	mulsd	init_value(%rip), %xmm1
    0000040e: 	movapd	%xmm0, %xmm2
    00000412: 	addsd	DATAat0x36ee8(%rip), %xmm1
    0000041a: 	andpd	DATAat0x36f60(%rip), %xmm2
    00000422: 	comisd	DATAat0x36ed8(%rip), %xmm2
    0000042a: 	movapd	%xmm1, %xmm4
    0000042e: 	movsd	%xmm1, 0x10(%rsp)
    00000434: 	movapd	%xmm0, %xmm1
    00000438: 	subsd	%xmm4, %xmm1
    0000043c: 	jbe	.Ltmp552 # Offset: 1084
    0000043e: 	divsd	%xmm0, %xmm1
.Ltmp552:
    00000442: 	andpd	DATAat0x36f60(%rip), %xmm1
    0000044a: 	movsd	DATAat0x36ee0(%rip), %xmm6
    00000452: 	comisd	%xmm1, %xmm6
    00000456: 	jbe	.Ltmp553 # Offset: 1110
.Ltmp560:
    0000045c: 	addl	$0x1, 0x28(%rsp)
    00000461: 	movl	0x28(%rsp), %eax
    00000465: 	cmpl	0x18(%rsp), %eax
    00000469: 	jl	.Ltmp554 # Offset: 1129
.Ltmp535:
    0000046f: 	callq	clock@PLT # Offset: 1135
    00000474: 	pxor	%xmm0, %xmm0
    00000478: 	movq	0x8(%rsp), %rdi
    0000047d: 	movq	%rax, end_time(%rip)
    00000484: 	subq	start_time(%rip), %rax
    0000048b: 	cvtsi2sd	%rax, %xmm0
    00000490: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000498: 	addq	$0x38, %rsp
    0000049c: 	popq	%rbx
    0000049d: 	popq	%rbp
    0000049e: 	popq	%r12
    000004a0: 	popq	%r13
    000004a2: 	popq	%r14
    000004a4: 	popq	%r15
    000004a6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1190
.Ltmp542:
    000004ab: 	movq	0x10(%rsp), %rax
    000004b0: 	addq	%rcx, %r10
    000004b3: 	leaq	(%rax,%r10,8), %rdx
    000004b7: 	movq	%rdi, %rax
    000004ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp555:
    000004c0: 	movsd	init_value(%rip), %xmm1
    000004c8: 	addq	$0x18, %rax
    000004cc: 	addsd	%xmm2, %xmm1
    000004d0: 	movsd	%xmm1, -0x18(%rax)
    000004d5: 	addsd	%xmm1, %xmm0
    000004d9: 	cmpq	%rax, %rdx
    000004dc: 	jne	.Ltmp555 # Offset: 1244
    000004de: 	jmp	.Ltmp537 # Offset: 1246
.Ltmp539:
    000004e3: 	movq	0x20(%rsp), %r15
    000004e8: 	leaq	(%rcx,%r10), %rax
    000004ec: 	leaq	(%r15,%rax,8), %r14
    000004f0: 	movq	%r8, %rax
    000004f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp556:
    000004f8: 	movsd	init_value(%rip), %xmm1
    00000500: 	addq	$0x18, %rax
    00000504: 	addsd	%xmm3, %xmm1
    00000508: 	movsd	%xmm1, -0x18(%rax)
    0000050d: 	addsd	%xmm1, %xmm0
    00000511: 	cmpq	%rax, %r14
    00000514: 	jne	.Ltmp556 # Offset: 1300
    00000516: 	jmp	.Ltmp541 # Offset: 1302
.Ltmp553:
    0000051b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000522: 	movl	$0x5, %edx
    00000527: 	leaq	DATAat0x35004(%rip), %rsi
    0000052e: 	movsd	%xmm0, 0x18(%rsp)
    00000534: 	movq	%rbp, %rdi
    00000537: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1335
    0000053c: 	cmpq	$0x0, 0x8(%rsp)
    00000542: 	movsd	0x18(%rsp), %xmm0
    00000548: 	je	.Ltmp557 # Offset: 1352
    0000054e: 	movq	0x8(%rsp), %rbx
    00000553: 	movsd	%xmm0, 0x18(%rsp)
    00000559: 	movq	%rbx, %rdi
    0000055c: 	callq	strlen@PLT # Offset: 1372
    00000561: 	movq	%rbx, %rsi
    00000564: 	movq	%rbp, %rdi
    00000567: 	movq	%rax, %rdx
    0000056a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1386
    0000056f: 	movsd	0x18(%rsp), %xmm0
.Ltmp565:
    00000575: 	movl	$0xd, %edx
    0000057a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000581: 	movq	%rbp, %rdi
    00000584: 	movsd	%xmm0, 0x18(%rsp)
    0000058a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1418
    0000058f: 	movsd	0x18(%rsp), %xmm0
    00000595: 	movq	%rbp, %rdi
    00000598: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1432
    0000059d: 	movl	$0xb, %edx
    000005a2: 	leaq	DATAat0x35018(%rip), %rsi
    000005a9: 	movq	%rax, %rdi
    000005ac: 	movq	%rax, %rbp
    000005af: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1455
    000005b4: 	movsd	0x10(%rsp), %xmm0
    000005ba: 	movq	%rbp, %rdi
    000005bd: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1469
    000005c2: 	movq	%rax, %r14
    000005c5: 	movq	(%rax), %rax
    000005c8: 	movq	-0x18(%rax), %rax
    000005cc: 	movq	0xf0(%r14,%rax), %rbp
    000005d4: 	testq	%rbp, %rbp
    000005d7: 	je	.Ltmp558 # Offset: 1495
    000005dd: 	cmpb	$0x0, 0x38(%rbp)
    000005e1: 	je	.Ltmp559 # Offset: 1505
    000005e7: 	movsbl	0x43(%rbp), %esi
.Ltmp563:
    000005eb: 	movq	%r14, %rdi
    000005ee: 	callq	_ZNSo3putEc@PLT # Offset: 1518
    000005f3: 	movq	%rax, %rdi
    000005f6: 	callq	_ZNSo5flushEv@PLT # Offset: 1526
    000005fb: 	movl	iterations(%rip), %eax
    00000601: 	movl	%eax, 0x18(%rsp)
    00000605: 	jmp	.Ltmp560 # Offset: 1541
.Ltmp550:
    0000060a: 	movsd	DATAat0x37030(%rip), %xmm1
.Ltmp561:
    00000612: 	movsd	init_value(%rip), %xmm2
    0000061a: 	addsd	%xmm1, %xmm2
    0000061e: 	movsd	%xmm2, 0x10(%r12,%rcx,8)
    00000625: 	addsd	%xmm2, %xmm0
    00000629: 	addq	$0x3, %rcx
    0000062d: 	cmpl	%ecx, 0x4(%rsp)
    00000631: 	jg	.Ltmp561 # Offset: 1585
    00000633: 	jmp	.Ltmp545 # Offset: 1587
.Ltmp547:
    00000638: 	movsd	DATAat0x36fb0(%rip), %xmm2
    00000640: 	movq	%rcx, %rax
.Ltmp562:
    00000643: 	movsd	init_value(%rip), %xmm1
    0000064b: 	addsd	%xmm2, %xmm1
    0000064f: 	movsd	%xmm1, 0x8(%r12,%rax,8)
    00000656: 	addsd	%xmm1, %xmm0
    0000065a: 	addq	$0x3, %rax
    0000065e: 	cmpl	%eax, 0x4(%rsp)
    00000662: 	jg	.Ltmp562 # Offset: 1634
    00000664: 	jmp	.Ltmp549 # Offset: 1636
.Ltmp559:
    00000669: 	movq	%rbp, %rdi
    0000066c: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1644
    00000671: 	movq	(%rbp), %rax
    00000675: 	movl	$0xa, %esi
    0000067a: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000681: 	movq	0x30(%rax), %rax
    00000685: 	cmpq	%rdx, %rax
    00000688: 	je	.Ltmp563 # Offset: 1672
    0000068e: 	movq	%rbp, %rdi
    00000691: 	callq	*%rax # Offset: 1681
    00000693: 	movsbl	%al, %esi
    00000696: 	jmp	.Ltmp563 # Offset: 1686
.Ltmp536:
    0000069b: 	movl	0x4(%rsp), %eax
    0000069f: 	xorl	%ebp, %ebp
    000006a1: 	pxor	%xmm0, %xmm0
    000006a5: 	testl	%eax, %eax
    000006a7: 	jg	.Ltmp564 # Offset: 1703
    000006ad: 	movsd	DATAat0x36ee8(%rip), %xmm1
    000006b5: 	mulsd	init_value(%rip), %xmm1
    000006bd: 	addsd	DATAat0x36ee8(%rip), %xmm1
    000006c5: 	movapd	%xmm1, %xmm5
    000006c9: 	movsd	%xmm1, 0x10(%rsp)
    000006cf: 	pxor	%xmm1, %xmm1
    000006d3: 	subsd	%xmm5, %xmm1
    000006d7: 	jmp	.Ltmp552 # Offset: 1751
.Ltmp557:
    000006dc: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000006e3: 	movq	-0x18(%rax), %rdi
    000006e7: 	addq	%rbp, %rdi
    000006ea: 	movl	0x20(%rdi), %esi
    000006ed: 	orl	$0x1, %esi
    000006f0: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1776
    000006f5: 	movsd	0x18(%rsp), %xmm0
    000006fb: 	jmp	.Ltmp565 # Offset: 1787
.Ltmp558:
    00000700: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1792
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked3IdEvPT_iPKc"

Binary Function "_Z15test_for_loop_3IdEvPT_iPKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0xfd00
  Size        : 0x4ce
  MaxSize     : 0x4d0
  Offset      : 0xfd00
  Section     : .text
  Orc Section : .local.text._Z15test_for_loop_3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp566 # Offset: 49
    00000037: 	leal	-0x2(%r12), %ebp
    0000003c: 	subl	$0x3, %r12d
    00000040: 	movl	$0xaaaaaaab, %ecx
    00000045: 	movl	$0x0, (%rsp)
    0000004c: 	cmpl	$0x1a, %r12d
    00000050: 	leaq	init_value(%rip), %r9
    00000057: 	movsd	DATAat0x37030(%rip), %xmm3
    0000005f: 	seta	%al
    00000062: 	imulq	%rcx, %r12
    00000066: 	shrq	$0x21, %r12
    0000006a: 	leal	0x1(%r12), %ecx
    0000006f: 	leaq	(%rcx,%rcx,2), %rsi
    00000073: 	movq	%rcx, %r11
    00000076: 	movl	%ecx, 0x4(%rsp)
    0000007a: 	shlq	$0x3, %rsi
    0000007e: 	leaq	-0x8(%rbx,%rsi), %rcx
    00000083: 	cmpq	%r9, %rcx
    00000086: 	setbe	%cl
    00000089: 	cmpq	%r9, %rbx
    0000008c: 	setae	%dil
    00000090: 	addq	%rbx, %rsi
    00000093: 	orl	%edi, %ecx
    00000095: 	andl	%eax, %ecx
    00000097: 	movb	%cl, 0x17(%rsp)
    0000009b: 	movl	%r11d, %ecx
    0000009e: 	andl	$-0x2, %r11d
    000000a2: 	shrl	%ecx
    000000a4: 	movl	%r11d, 0x10(%rsp)
    000000a9: 	subl	$0x1, %ecx
    000000ac: 	leaq	(%rcx,%rcx,2), %rdi
    000000b0: 	leal	(%r11,%r11,2), %ecx
    000000b4: 	leal	0x1(%rcx), %r8d
    000000b8: 	shlq	$0x4, %rdi
    000000bc: 	cmpq	%r9, %rsi
    000000bf: 	movslq	%r8d, %r8
    000000c2: 	setbe	%sil
    000000c6: 	addq	$0x8, %r9
    000000ca: 	leaq	(%rbx,%r8,8), %r15
    000000ce: 	leaq	0x10(%rbx), %r8
    000000d2: 	cmpq	%r9, %r8
    000000d5: 	leaq	0x38(%rbx,%rdi), %r13
    000000da: 	movq	%r8, 0x18(%rsp)
    000000df: 	leaq	0x40(%rbx,%rdi), %r12
    000000e4: 	setae	%r9b
    000000e8: 	orl	%r9d, %esi
    000000eb: 	andl	%eax, %esi
    000000ed: 	leal	0x2(%rcx), %eax
    000000f0: 	movq	%r13, %rcx
    000000f3: 	cltq
    000000f5: 	movb	%sil, 0x16(%rsp)
    000000fa: 	leaq	(%rbx,%rax,8), %r14
    000000fe: 	movq	%r15, %rax
    00000101: 	movq	%r12, %r15
    00000104: 	movq	%r14, %r13
    00000107: 	movq	%rax, %r12
    0000010a: 	movq	%rcx, %r14
    0000010d: 	nopl	(%rax) # Size: 3
.Ltmp577:
    00000110: 	xorl	%eax, %eax
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	testl	%ebp, %ebp
    00000118: 	jle	.Ltmp567 # Offset: 280
    0000011e: 	nop # Size: 2
.Ltmp568:
    00000120: 	movsd	init_value(%rip), %xmm1
    00000128: 	movsd	%xmm1, (%rbx,%rax,8)
    0000012d: 	addq	$0x3, %rax
    00000131: 	addsd	%xmm1, %xmm0
    00000135: 	cmpl	%eax, %ebp
    00000137: 	jg	.Ltmp568 # Offset: 311
    00000139: 	cmpb	$0x0, 0x17(%rsp)
    0000013e: 	je	.Ltmp569 # Offset: 318
    00000144: 	movsd	DATAat0x36fb0(%rip), %xmm2
    0000014c: 	leaq	0x8(%rbx), %rax
    00000150: 	addsd	%xmm2, %xmm1
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp570:
    00000158: 	addsd	%xmm1, %xmm0
    0000015c: 	movsd	%xmm1, (%rax)
    00000160: 	addq	$0x30, %rax
    00000164: 	movsd	%xmm1, -0x18(%rax)
    00000169: 	addsd	%xmm1, %xmm0
    0000016d: 	cmpq	%r14, %rax
    00000170: 	jne	.Ltmp570 # Offset: 368
    00000172: 	movl	0x10(%rsp), %ecx
    00000176: 	cmpl	%ecx, 0x4(%rsp)
    0000017a: 	je	.Ltmp571 # Offset: 378
    0000017c: 	addsd	init_value(%rip), %xmm2
    00000184: 	addsd	%xmm2, %xmm0
    00000188: 	movsd	%xmm2, (%r12)
.Ltmp571:
    0000018e: 	cmpb	$0x0, 0x16(%rsp)
    00000193: 	je	.Ltmp572 # Offset: 403
    00000199: 	movsd	init_value(%rip), %xmm1
    000001a1: 	movq	0x18(%rsp), %rax
    000001a6: 	addsd	%xmm3, %xmm1
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp573:
    000001b0: 	addsd	%xmm1, %xmm0
    000001b4: 	movsd	%xmm1, (%rax)
    000001b8: 	addq	$0x30, %rax
    000001bc: 	movsd	%xmm1, -0x18(%rax)
    000001c1: 	addsd	%xmm1, %xmm0
    000001c5: 	cmpq	%rax, %r15
    000001c8: 	jne	.Ltmp573 # Offset: 456
    000001ca: 	movl	0x10(%rsp), %ecx
    000001ce: 	cmpl	%ecx, 0x4(%rsp)
    000001d2: 	je	.Ltmp574 # Offset: 466
    000001d4: 	movsd	init_value(%rip), %xmm1
    000001dc: 	addsd	%xmm3, %xmm1
    000001e0: 	addsd	%xmm1, %xmm0
    000001e4: 	movsd	%xmm1, (%r13)
.Ltmp574:
    000001ea: 	movsd	DATAat0x36ee8(%rip), %xmm2
    000001f2: 	movapd	%xmm0, %xmm4
    000001f6: 	movapd	%xmm0, %xmm1
    000001fa: 	andpd	DATAat0x36f60(%rip), %xmm4
    00000202: 	mulsd	init_value(%rip), %xmm2
    0000020a: 	comisd	DATAat0x36ed8(%rip), %xmm4
    00000212: 	addsd	DATAat0x36ee8(%rip), %xmm2
    0000021a: 	subsd	%xmm2, %xmm1
    0000021e: 	jbe	.Ltmp575 # Offset: 542
    00000220: 	divsd	%xmm0, %xmm1
.Ltmp575:
    00000224: 	andpd	DATAat0x36f60(%rip), %xmm1
    0000022c: 	movsd	DATAat0x36ee0(%rip), %xmm5
    00000234: 	comisd	%xmm1, %xmm5
    00000238: 	jbe	.Ltmp576 # Offset: 568
.Ltmp581:
    0000023a: 	addl	$0x1, (%rsp)
    0000023e: 	movl	(%rsp), %eax
    00000241: 	cmpl	%edx, %eax
    00000243: 	jl	.Ltmp577 # Offset: 579
.Ltmp566:
    00000249: 	callq	clock@PLT # Offset: 585
    0000024e: 	pxor	%xmm0, %xmm0
    00000252: 	movq	0x8(%rsp), %rdi
    00000257: 	movq	%rax, end_time(%rip)
    0000025e: 	subq	start_time(%rip), %rax
    00000265: 	cvtsi2sd	%rax, %xmm0
    0000026a: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000272: 	addq	$0x38, %rsp
    00000276: 	popq	%rbx
    00000277: 	popq	%rbp
    00000278: 	popq	%r12
    0000027a: 	popq	%r13
    0000027c: 	popq	%r14
    0000027e: 	popq	%r15
    00000280: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 640
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp576:
    00000288: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    0000028f: 	movl	$0x5, %edx
    00000294: 	leaq	DATAat0x35004(%rip), %rsi
    0000029b: 	movsd	%xmm0, 0x28(%rsp)
    000002a1: 	movq	%r10, %rdi
    000002a4: 	movsd	%xmm2, 0x20(%rsp)
    000002aa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 682
    000002af: 	cmpq	$0x0, 0x8(%rsp)
    000002b5: 	movsd	0x20(%rsp), %xmm2
    000002bb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    000002c2: 	movsd	0x28(%rsp), %xmm0
    000002c8: 	je	.Ltmp578 # Offset: 712
    000002ce: 	movq	0x8(%rsp), %rdi
    000002d3: 	movsd	%xmm0, 0x28(%rsp)
    000002d9: 	movsd	%xmm2, 0x20(%rsp)
    000002df: 	callq	strlen@PLT # Offset: 735
    000002e4: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    000002eb: 	movq	0x8(%rsp), %rsi
    000002f0: 	movq	%r10, %rdi
    000002f3: 	movq	%rax, %rdx
    000002f6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 758
    000002fb: 	movsd	0x28(%rsp), %xmm0
    00000301: 	movsd	0x20(%rsp), %xmm2
    00000307: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
.Ltmp585:
    0000030e: 	movl	$0xd, %edx
    00000313: 	leaq	DATAat0x3500a(%rip), %rsi
    0000031a: 	movq	%r10, %rdi
    0000031d: 	movsd	%xmm2, 0x28(%rsp)
    00000323: 	movsd	%xmm0, 0x20(%rsp)
    00000329: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 809
    0000032e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    00000335: 	movsd	0x20(%rsp), %xmm0
    0000033b: 	movq	%r10, %rdi
    0000033e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 830
    00000343: 	movl	$0xb, %edx
    00000348: 	leaq	DATAat0x35018(%rip), %rsi
    0000034f: 	movq	%rax, %rdi
    00000352: 	movq	%rax, 0x20(%rsp)
    00000357: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 855
    0000035c: 	movsd	0x28(%rsp), %xmm2
    00000362: 	movq	0x20(%rsp), %rdi
    00000367: 	movapd	%xmm2, %xmm0
    0000036b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 875
    00000370: 	movq	%rax, %r10
    00000373: 	movq	(%rax), %rax
    00000376: 	movq	-0x18(%rax), %rax
    0000037a: 	movq	0xf0(%r10,%rax), %rdi
    00000382: 	testq	%rdi, %rdi
    00000385: 	je	.Ltmp579 # Offset: 901
    0000038b: 	cmpb	$0x0, 0x38(%rdi)
    0000038f: 	je	.Ltmp580 # Offset: 911
    00000395: 	movsbl	0x43(%rdi), %esi
.Ltmp584:
    00000399: 	movq	%r10, %rdi
    0000039c: 	callq	_ZNSo3putEc@PLT # Offset: 924
    000003a1: 	movq	%rax, %rdi
    000003a4: 	callq	_ZNSo5flushEv@PLT # Offset: 932
    000003a9: 	movq	DATAat0x37030(%rip), %rax
    000003b0: 	movl	iterations(%rip), %edx
    000003b6: 	movq	%rax, %xmm3
    000003bb: 	jmp	.Ltmp581 # Offset: 955
.Ltmp572:
    000003c0: 	xorl	%eax, %eax
    000003c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp582:
    000003c8: 	movsd	init_value(%rip), %xmm1
    000003d0: 	addsd	%xmm3, %xmm1
    000003d4: 	movsd	%xmm1, 0x10(%rbx,%rax,8)
    000003da: 	addq	$0x3, %rax
    000003de: 	addsd	%xmm1, %xmm0
    000003e2: 	cmpl	%eax, %ebp
    000003e4: 	jg	.Ltmp582 # Offset: 996
    000003e6: 	jmp	.Ltmp574 # Offset: 998
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp569:
    000003f0: 	xorl	%eax, %eax
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp583:
    000003f8: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000400: 	addsd	init_value(%rip), %xmm1
    00000408: 	movsd	%xmm1, 0x8(%rbx,%rax,8)
    0000040e: 	addq	$0x3, %rax
    00000412: 	addsd	%xmm1, %xmm0
    00000416: 	cmpl	%eax, %ebp
    00000418: 	jg	.Ltmp583 # Offset: 1048
    0000041a: 	jmp	.Ltmp571 # Offset: 1050
    0000041f: 	nop # Size: 1
.Ltmp580:
    00000420: 	movq	%r10, 0x28(%rsp)
    00000425: 	movq	%rdi, 0x20(%rsp)
    0000042a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1066
    0000042f: 	movq	0x20(%rsp), %rdi
    00000434: 	movq	0x28(%rsp), %r10
    00000439: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000440: 	movl	$0xa, %esi
    00000445: 	movq	(%rdi), %rax
    00000448: 	movq	0x30(%rax), %rax
    0000044c: 	cmpq	%rdx, %rax
    0000044f: 	je	.Ltmp584 # Offset: 1103
    00000455: 	movq	%r10, 0x20(%rsp)
    0000045a: 	callq	*%rax # Offset: 1114
    0000045c: 	movq	0x20(%rsp), %r10
    00000461: 	movsbl	%al, %esi
    00000464: 	jmp	.Ltmp584 # Offset: 1124
    00000469: 	nopl	(%rax) # Size: 7
.Ltmp567:
    00000470: 	movsd	DATAat0x36ee8(%rip), %xmm2
    00000478: 	mulsd	init_value(%rip), %xmm2
    00000480: 	pxor	%xmm1, %xmm1
    00000484: 	addsd	DATAat0x36ee8(%rip), %xmm2
    0000048c: 	subsd	%xmm2, %xmm1
    00000490: 	jmp	.Ltmp575 # Offset: 1168
    00000495: 	nopl	(%rax) # Size: 3
.Ltmp578:
    00000498: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000049f: 	movq	-0x18(%rax), %rdi
    000004a3: 	addq	%r10, %rdi
    000004a6: 	movl	0x20(%rdi), %esi
    000004a9: 	orl	$0x1, %esi
    000004ac: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1196
    000004b1: 	movsd	0x20(%rsp), %xmm2
    000004b7: 	movsd	0x28(%rsp), %xmm0
    000004bd: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    000004c4: 	jmp	.Ltmp585 # Offset: 1220
.Ltmp579:
    000004c9: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1225
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_for_loop_3IdEvPT_iPKc"

Binary Function "_Z15test_loop_4_optIdEvPT_iPKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x101d0
  Size        : 0x326
  MaxSize     : 0x330
  Offset      : 0x101d0
  Section     : .text
  Orc Section : .local.text._Z15test_loop_4_optIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edx
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edx, %edx
    0000002f: 	jle	.Ltmp586 # Offset: 47
    00000035: 	leal	-0x4(%r12), %eax
    0000003a: 	movsd	DATAat0x36fb0(%rip), %xmm5
    00000042: 	movsd	DATAat0x37030(%rip), %xmm6
    0000004a: 	xorl	%ebx, %ebx
    0000004c: 	shrl	$0x2, %eax
    0000004f: 	shlq	$0x5, %rax
    00000053: 	leaq	0x20(%rbp,%rax), %r15
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp592:
    00000060: 	movsd	init_value(%rip), %xmm0
    00000068: 	movq	%rbp, %rax
    0000006b: 	pxor	%xmm4, %xmm4
    0000006f: 	cmpl	$0x3, %r12d
    00000073: 	jg	.Ltmp587 # Offset: 115
    00000075: 	jmp	.Ltmp588 # Offset: 117
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp589:
    00000080: 	movsd	init_value(%rip), %xmm0
.Ltmp587:
    00000088: 	movapd	%xmm0, %xmm2
    0000008c: 	movsd	%xmm0, (%rax)
    00000090: 	addsd	%xmm4, %xmm0
    00000094: 	addq	$0x20, %rax
    00000098: 	addsd	%xmm5, %xmm2
    0000009c: 	movsd	%xmm2, -0x18(%rax)
    000000a1: 	movsd	init_value(%rip), %xmm1
    000000a9: 	addsd	%xmm0, %xmm2
    000000ad: 	addsd	%xmm6, %xmm1
    000000b1: 	movsd	%xmm1, -0x10(%rax)
    000000b6: 	movsd	init_value(%rip), %xmm3
    000000be: 	addsd	%xmm2, %xmm1
    000000c2: 	addsd	%xmm5, %xmm3
    000000c6: 	movapd	%xmm3, %xmm4
    000000ca: 	movsd	%xmm3, -0x8(%rax)
    000000cf: 	addsd	%xmm1, %xmm4
    000000d3: 	cmpq	%rax, %r15
    000000d6: 	jne	.Ltmp589 # Offset: 214
    000000d8: 	movsd	DATAat0x36ec8(%rip), %xmm1
    000000e0: 	movapd	%xmm4, %xmm2
    000000e4: 	movapd	%xmm4, %xmm0
    000000e8: 	andpd	DATAat0x36f60(%rip), %xmm2
    000000f0: 	mulsd	init_value(%rip), %xmm1
    000000f8: 	comisd	DATAat0x36ed8(%rip), %xmm2
    00000100: 	addsd	DATAat0x36ec8(%rip), %xmm1
    00000108: 	subsd	%xmm1, %xmm0
    0000010c: 	jbe	.Ltmp590 # Offset: 268
    0000010e: 	divsd	%xmm4, %xmm0
.Ltmp590:
    00000112: 	andpd	DATAat0x36f60(%rip), %xmm0
    0000011a: 	movsd	DATAat0x36ee0(%rip), %xmm7
    00000122: 	comisd	%xmm0, %xmm7
    00000126: 	jbe	.Ltmp591 # Offset: 294
.Ltmp596:
    00000128: 	addl	$0x1, %ebx
    0000012b: 	cmpl	%edx, %ebx
    0000012d: 	jl	.Ltmp592 # Offset: 301
.Ltmp586:
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movq	%r13, %rdi
    0000013f: 	movq	%rax, end_time(%rip)
    00000146: 	subq	start_time(%rip), %rax
    0000014d: 	cvtsi2sd	%rax, %xmm0
    00000152: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000015a: 	addq	$0x18, %rsp
    0000015e: 	popq	%rbx
    0000015f: 	popq	%rbp
    00000160: 	popq	%r12
    00000162: 	popq	%r13
    00000164: 	popq	%r14
    00000166: 	popq	%r15
    00000168: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 360
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp591:
    00000170: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000177: 	movl	$0x5, %edx
    0000017c: 	movsd	%xmm4, (%rsp)
    00000181: 	leaq	DATAat0x35004(%rip), %rsi
    00000188: 	movq	%r14, %rdi
    0000018b: 	movsd	%xmm1, 0x8(%rsp)
    00000191: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 401
    00000196: 	testq	%r13, %r13
    00000199: 	movsd	(%rsp), %xmm4
    0000019e: 	movsd	0x8(%rsp), %xmm1
    000001a4: 	je	.Ltmp593 # Offset: 420
    000001aa: 	movq	%r13, %rdi
    000001ad: 	movsd	%xmm1, 0x8(%rsp)
    000001b3: 	movsd	%xmm4, (%rsp)
    000001b8: 	callq	strlen@PLT # Offset: 440
    000001bd: 	movq	%r13, %rsi
    000001c0: 	movq	%r14, %rdi
    000001c3: 	movq	%rax, %rdx
    000001c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 454
    000001cb: 	movsd	0x8(%rsp), %xmm1
    000001d1: 	movsd	(%rsp), %xmm4
.Ltmp598:
    000001d6: 	movl	$0xd, %edx
    000001db: 	leaq	DATAat0x3500a(%rip), %rsi
    000001e2: 	movq	%r14, %rdi
    000001e5: 	movsd	%xmm1, 0x8(%rsp)
    000001eb: 	movsd	%xmm4, (%rsp)
    000001f0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 496
    000001f5: 	movsd	(%rsp), %xmm4
    000001fa: 	movq	%r14, %rdi
    000001fd: 	movapd	%xmm4, %xmm0
    00000201: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 513
    00000206: 	movl	$0xb, %edx
    0000020b: 	leaq	DATAat0x35018(%rip), %rsi
    00000212: 	movq	%rax, %rdi
    00000215: 	movq	%rax, (%rsp)
    00000219: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 537
    0000021e: 	movsd	0x8(%rsp), %xmm1
    00000224: 	movq	(%rsp), %rdi
    00000228: 	movapd	%xmm1, %xmm0
    0000022c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 556
    00000231: 	movq	%rax, %r8
    00000234: 	movq	(%rax), %rax
    00000237: 	movq	-0x18(%rax), %rax
    0000023b: 	movq	0xf0(%r8,%rax), %rdi
    00000243: 	testq	%rdi, %rdi
    00000246: 	je	.Ltmp594 # Offset: 582
    0000024c: 	cmpb	$0x0, 0x38(%rdi)
    00000250: 	je	.Ltmp595 # Offset: 592
    00000252: 	movsbl	0x43(%rdi), %esi
.Ltmp597:
    00000256: 	movq	%r8, %rdi
    00000259: 	callq	_ZNSo3putEc@PLT # Offset: 601
    0000025e: 	movq	%rax, %rdi
    00000261: 	callq	_ZNSo5flushEv@PLT # Offset: 609
    00000266: 	movq	DATAat0x37030(%rip), %rax
    0000026d: 	movl	iterations(%rip), %edx
    00000273: 	movq	%rax, %xmm6
    00000278: 	movq	DATAat0x36fb0(%rip), %rax
    0000027f: 	movq	%rax, %xmm5
    00000284: 	jmp	.Ltmp596 # Offset: 644
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp595:
    00000290: 	movq	%r8, 0x8(%rsp)
    00000295: 	movq	%rdi, (%rsp)
    00000299: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 665
    0000029e: 	movq	(%rsp), %rdi
    000002a2: 	movq	0x8(%rsp), %r8
    000002a7: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002ae: 	movl	$0xa, %esi
    000002b3: 	movq	(%rdi), %rax
    000002b6: 	movq	0x30(%rax), %rax
    000002ba: 	cmpq	%rdx, %rax
    000002bd: 	je	.Ltmp597 # Offset: 701
    000002bf: 	movq	%r8, (%rsp)
    000002c3: 	callq	*%rax # Offset: 707
    000002c5: 	movq	(%rsp), %r8
    000002c9: 	movsbl	%al, %esi
    000002cc: 	jmp	.Ltmp597 # Offset: 716
    000002ce: 	nop # Size: 2
.Ltmp588:
    000002d0: 	mulsd	DATAat0x36ec8(%rip), %xmm0
    000002d8: 	movsd	DATAat0x36ec8(%rip), %xmm1
    000002e0: 	pxor	%xmm4, %xmm4
    000002e4: 	addsd	%xmm0, %xmm1
    000002e8: 	pxor	%xmm0, %xmm0
    000002ec: 	subsd	%xmm1, %xmm0
    000002f0: 	jmp	.Ltmp590 # Offset: 752
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp593:
    000002f8: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002ff: 	movq	-0x18(%rax), %rdi
    00000303: 	addq	%r14, %rdi
    00000306: 	movl	0x20(%rdi), %esi
    00000309: 	orl	$0x1, %esi
    0000030c: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 780
    00000311: 	movsd	(%rsp), %xmm4
    00000316: 	movsd	0x8(%rsp), %xmm1
    0000031c: 	jmp	.Ltmp598 # Offset: 796
.Ltmp594:
    00000321: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 801
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_loop_4_optIdEvPT_iPKc"

Binary Function "_Z22test_for_loop_blocked4IdEvPT_iPKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x10500
  Size        : 0x88d
  MaxSize     : 0x890
  Offset      : 0x10500
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_blocked4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x48, %rsp
    00000017: 	movl	%esi, 0x3c(%rsp)
    0000001b: 	movq	%rdx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	movl	%eax, 0x10(%rsp)
    00000036: 	testl	%eax, %eax
    00000038: 	jle	.Ltmp599 # Offset: 56
    0000003e: 	leal	-0x203(%rbx), %eax
    00000044: 	movl	$0x0, 0x30(%rsp)
    0000004c: 	movsd	DATAat0x36fb0(%rip), %xmm4
    00000054: 	leaq	iterations(%rip), %r14
    0000005b: 	movl	%eax, 0x4(%rsp)
    0000005f: 	leal	-0x3(%rbx), %eax
    00000062: 	movl	%eax, 0x34(%rsp)
    00000066: 	leal	-0x204(%rbx), %eax
    0000006c: 	andl	$0xfffffe00, %eax
    00000071: 	addl	$0x200, %eax
    00000076: 	movl	%eax, 0x38(%rsp)
.Ltmp624:
    0000007a: 	movl	0x4(%rsp), %eax
    0000007e: 	xorl	%edi, %edi
    00000080: 	pxor	%xmm0, %xmm0
    00000084: 	testl	%eax, %eax
    00000086: 	jle	.Ltmp600 # Offset: 134
    0000008c: 	leaq	0x18(%r13), %rax
    00000090: 	movl	$0x4, %ebp
    00000095: 	pxor	%xmm0, %xmm0
    00000099: 	xorl	%edi, %edi
    0000009b: 	movq	%rax, 0x28(%rsp)
    000000a0: 	movq	%rax, %r9
    000000a3: 	leaq	0x10(%r13), %rax
    000000a7: 	movsd	DATAat0x37030(%rip), %xmm3
    000000af: 	movq	%rax, 0x20(%rsp)
    000000b4: 	movq	%rax, %rbx
    000000b7: 	leaq	0x8(%r13), %rax
    000000bb: 	movsd	DATAat0x36fb0(%rip), %xmm5
    000000c3: 	movq	%rax, 0x18(%rsp)
    000000c8: 	movq	%rax, %r11
    000000cb: 	movl	$0x200, %r10d
.Ltmp611:
    000000d1: 	cmpq	%r10, %rdi
    000000d4: 	jae	.Ltmp601 # Offset: 212
    000000da: 	cmpq	%rbp, %r10
    000000dd: 	leaq	-0x18(%r9), %rax
    000000e1: 	sbbq	%rdx, %rdx
    000000e4: 	andq	$-0x7f, %rdx
    000000e8: 	leaq	0x200(%rdi,%rdx,4), %rdx
    000000f0: 	leaq	(%r13,%rdx,8), %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp602:
    000000f8: 	movsd	init_value(%rip), %xmm1
    00000100: 	addq	$0x20, %rax
    00000104: 	movsd	%xmm1, -0x20(%rax)
    00000109: 	addsd	%xmm1, %xmm0
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jne	.Ltmp602 # Offset: 272
    00000112: 	cmpq	%rbp, %r10
    00000115: 	leaq	0x2(%rdi), %rcx
    00000119: 	leaq	init_value(%rip), %rdx
    00000120: 	sbbq	%rsi, %rsi
    00000123: 	andq	$-0x7f, %rsi
    00000127: 	subq	$-0x80, %rsi
    0000012b: 	leaq	-0x1(%rsi), %r8
    0000012f: 	cmpq	$0x8, %r8
    00000133: 	seta	%r12b
    00000137: 	shlq	$0x2, %r8
    0000013b: 	leaq	(%rcx,%r8), %rax
    0000013f: 	leaq	(%r13,%rax,8), %rax
    00000144: 	cmpq	%rdx, %rax
    00000147: 	setbe	%dl
    0000014a: 	cmpq	%r14, %r11
    0000014d: 	setae	%al
    00000150: 	orb	%dl, %al
    00000152: 	je	.Ltmp603 # Offset: 338
    00000158: 	testb	%r12b, %r12b
    0000015b: 	je	.Ltmp603 # Offset: 347
    00000161: 	movsd	init_value(%rip), %xmm2
    00000169: 	movq	%rsi, %rdx
    0000016c: 	movq	%r11, %rax
    0000016f: 	movapd	%xmm4, %xmm1
    00000173: 	shrq	%rdx
    00000176: 	addsd	%xmm4, %xmm2
    0000017a: 	shlq	$0x6, %rdx
    0000017e: 	addq	%r11, %rdx
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp604:
    00000188: 	addsd	%xmm2, %xmm0
    0000018c: 	movsd	%xmm2, (%rax)
    00000190: 	addq	$0x40, %rax
    00000194: 	movsd	%xmm2, -0x20(%rax)
    00000199: 	addsd	%xmm2, %xmm0
    0000019d: 	cmpq	%rax, %rdx
    000001a0: 	jne	.Ltmp604 # Offset: 416
    000001a2: 	movq	%rsi, %r15
    000001a5: 	leaq	0x1(%rdi), %rax
    000001a9: 	andq	$-0x2, %r15
    000001ad: 	leaq	(,%r15,4), %rdx
    000001b5: 	cmpq	%r15, %rsi
    000001b8: 	je	.Ltmp605 # Offset: 440
    000001ba: 	movsd	init_value(%rip), %xmm2
    000001c2: 	addq	%rdx, %rax
    000001c5: 	addsd	%xmm4, %xmm2
    000001c9: 	addsd	%xmm2, %xmm0
    000001cd: 	movsd	%xmm2, (%r13,%rax,8)
.Ltmp605:
    000001d4: 	leaq	0x3(%rdi), %rdx
    000001d8: 	leaq	init_value(%rip), %r15
    000001df: 	leaq	(%rdx,%r8), %rax
    000001e3: 	leaq	(%r13,%rax,8), %rax
    000001e8: 	cmpq	%r15, %rax
    000001eb: 	setbe	%r15b
    000001ef: 	cmpq	%r14, %rbx
    000001f2: 	setae	%al
    000001f5: 	orb	%r15b, %al
    000001f8: 	je	.Ltmp606 # Offset: 504
    000001fe: 	testb	%r12b, %r12b
    00000201: 	je	.Ltmp606 # Offset: 513
    00000207: 	movsd	init_value(%rip), %xmm2
    0000020f: 	movq	%rsi, %r15
    00000212: 	movq	%rbx, %rax
    00000215: 	shrq	%r15
    00000218: 	addsd	%xmm3, %xmm2
    0000021c: 	shlq	$0x6, %r15
    00000220: 	addq	%rbx, %r15
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp607:
    00000228: 	addsd	%xmm2, %xmm0
    0000022c: 	movsd	%xmm2, (%rax)
    00000230: 	addq	$0x40, %rax
    00000234: 	movsd	%xmm2, -0x20(%rax)
    00000239: 	addsd	%xmm2, %xmm0
    0000023d: 	cmpq	%r15, %rax
    00000240: 	jne	.Ltmp607 # Offset: 576
    00000242: 	movq	%rsi, %r15
    00000245: 	andq	$-0x2, %r15
    00000249: 	leaq	(,%r15,4), %rax
    00000251: 	cmpq	%r15, %rsi
    00000254: 	je	.Ltmp608 # Offset: 596
    00000256: 	movsd	init_value(%rip), %xmm2
    0000025e: 	addq	%rcx, %rax
    00000261: 	addsd	%xmm3, %xmm2
    00000265: 	addsd	%xmm2, %xmm0
    00000269: 	movsd	%xmm2, (%r13,%rax,8)
.Ltmp608:
    00000270: 	leaq	0x4(%rdi,%r8), %rax
    00000275: 	leaq	init_value(%rip), %rcx
    0000027c: 	leaq	(%r13,%rax,8), %rax
    00000281: 	cmpq	%rcx, %rax
    00000284: 	setbe	%cl
    00000287: 	cmpq	%r14, %r9
    0000028a: 	setae	%al
    0000028d: 	orb	%cl, %al
    0000028f: 	je	.Ltmp609 # Offset: 655
    00000295: 	testb	%r12b, %r12b
    00000298: 	je	.Ltmp609 # Offset: 664
    0000029e: 	movsd	init_value(%rip), %xmm2
    000002a6: 	movq	%rsi, %rcx
    000002a9: 	movq	%r9, %rax
    000002ac: 	shrq	%rcx
    000002af: 	addsd	%xmm1, %xmm2
    000002b3: 	shlq	$0x6, %rcx
    000002b7: 	addq	%r9, %rcx
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp610:
    000002c0: 	addsd	%xmm2, %xmm0
    000002c4: 	movsd	%xmm2, (%rax)
    000002c8: 	addq	$0x40, %rax
    000002cc: 	movsd	%xmm2, -0x20(%rax)
    000002d1: 	addsd	%xmm2, %xmm0
    000002d5: 	cmpq	%rax, %rcx
    000002d8: 	jne	.Ltmp610 # Offset: 728
    000002da: 	movq	%rsi, %rcx
    000002dd: 	andq	$-0x2, %rcx
    000002e1: 	leaq	(,%rcx,4), %rax
    000002e9: 	cmpq	%rcx, %rsi
    000002ec: 	je	.Ltmp601 # Offset: 748
    000002ee: 	addsd	init_value(%rip), %xmm1
    000002f6: 	addq	%rax, %rdx
    000002f9: 	addsd	%xmm1, %xmm0
    000002fd: 	movsd	%xmm1, (%r13,%rdx,8)
.Ltmp601:
    00000304: 	addq	$0x200, %rdi
    0000030b: 	addq	$0x200, %r10
    00000312: 	addq	$0x200, %rbp
    00000319: 	addq	$0x1000, %r9
    00000320: 	addq	$0x1000, %rbx
    00000327: 	addq	$0x1000, %r11
    0000032e: 	cmpl	%edi, 0x4(%rsp)
    00000332: 	jg	.Ltmp611 # Offset: 818
    00000338: 	movl	0x38(%rsp), %edi
.Ltmp600:
    0000033c: 	cmpl	%edi, 0x34(%rsp)
    00000340: 	jle	.Ltmp612 # Offset: 832
    00000346: 	movl	0x3c(%rsp), %eax
    0000034a: 	movslq	%edi, %r11
    0000034d: 	leaq	(,%r11,8), %r9
    00000355: 	leal	-0x4(%rax), %r8d
    00000359: 	leaq	(%r13,%r9), %rsi
    0000035e: 	subl	%edi, %r8d
    00000361: 	movl	%r8d, %ecx
    00000364: 	shrl	$0x2, %ecx
    00000367: 	movl	%ecx, %eax
    00000369: 	leaq	(%r11,%rax,4), %rax
    0000036d: 	leaq	0x20(%r13,%rax,8), %rdx
    00000372: 	movq	%rsi, %rax
.Ltmp613:
    00000375: 	movsd	init_value(%rip), %xmm1
    0000037d: 	addq	$0x20, %rax
    00000381: 	movsd	%xmm1, -0x20(%rax)
    00000386: 	addsd	%xmm1, %xmm0
    0000038a: 	cmpq	%rdx, %rax
    0000038d: 	jne	.Ltmp613 # Offset: 909
    0000038f: 	cmpl	$0x23, %r8d
    00000393: 	leal	0x1(%rcx), %r8d
    00000397: 	leaq	init_value(%rip), %rbx
    0000039e: 	movq	%r8, %rcx
    000003a1: 	leaq	-0x2(%r11,%r8,4), %r8
    000003a6: 	seta	%r10b
    000003aa: 	shlq	$0x3, %r8
    000003ae: 	leaq	0x8(%r13,%r9), %rax
    000003b3: 	leaq	(%r13,%r8), %r11
    000003b8: 	cmpq	%rbx, %r11
    000003bb: 	setbe	%r11b
    000003bf: 	cmpq	%r14, %rax
    000003c2: 	setae	%bl
    000003c5: 	orb	%bl, %r11b
    000003c8: 	je	.Ltmp614 # Offset: 968
    000003ce: 	testb	%r10b, %r10b
    000003d1: 	je	.Ltmp614 # Offset: 977
    000003d7: 	movsd	DATAat0x36fb0(%rip), %xmm2
    000003df: 	movl	%ecx, %r11d
    000003e2: 	shrl	%r11d
    000003e5: 	subl	$0x1, %r11d
    000003e9: 	addsd	%xmm2, %xmm1
    000003ed: 	shlq	$0x6, %r11
    000003f1: 	leaq	0x40(%rax,%r11), %r11
.Ltmp615:
    000003f6: 	addsd	%xmm1, %xmm0
    000003fa: 	movsd	%xmm1, (%rax)
    000003fe: 	addq	$0x40, %rax
    00000402: 	movsd	%xmm1, -0x20(%rax)
    00000407: 	addsd	%xmm1, %xmm0
    0000040b: 	cmpq	%r11, %rax
    0000040e: 	jne	.Ltmp615 # Offset: 1038
    00000410: 	movl	%ecx, %r11d
    00000413: 	andl	$-0x2, %r11d
    00000417: 	leal	(%rdi,%r11,4), %eax
    0000041b: 	cmpl	%r11d, %ecx
    0000041e: 	je	.Ltmp616 # Offset: 1054
    00000420: 	movsd	init_value(%rip), %xmm1
    00000428: 	addl	$0x1, %eax
    0000042b: 	cltq
    0000042d: 	addsd	%xmm2, %xmm1
    00000431: 	addsd	%xmm1, %xmm0
    00000435: 	movsd	%xmm1, (%r13,%rax,8)
.Ltmp616:
    0000043c: 	leaq	0x8(%r13,%r8), %r11
    00000441: 	leaq	init_value(%rip), %rbx
    00000448: 	cmpq	%rbx, %r11
    0000044b: 	leaq	0x10(%r13,%r9), %rax
    00000450: 	setbe	%r11b
    00000454: 	cmpq	%r14, %rax
    00000457: 	setae	%bl
    0000045a: 	orb	%bl, %r11b
    0000045d: 	je	.Ltmp617 # Offset: 1117
    00000463: 	testb	%r10b, %r10b
    00000466: 	je	.Ltmp617 # Offset: 1126
    0000046c: 	movsd	DATAat0x37030(%rip), %xmm1
    00000474: 	movsd	init_value(%rip), %xmm3
    0000047c: 	movl	%ecx, %r11d
    0000047f: 	shrl	%r11d
    00000482: 	subl	$0x1, %r11d
    00000486: 	addsd	%xmm1, %xmm3
    0000048a: 	shlq	$0x6, %r11
    0000048e: 	leaq	0x40(%rax,%r11), %r11
.Ltmp618:
    00000493: 	addsd	%xmm3, %xmm0
    00000497: 	movsd	%xmm3, (%rax)
    0000049b: 	addq	$0x40, %rax
    0000049f: 	movsd	%xmm3, -0x20(%rax)
    000004a4: 	addsd	%xmm3, %xmm0
    000004a8: 	cmpq	%rax, %r11
    000004ab: 	jne	.Ltmp618 # Offset: 1195
    000004ad: 	movl	%ecx, %r11d
    000004b0: 	andl	$-0x2, %r11d
    000004b4: 	leal	(%rdi,%r11,4), %eax
    000004b8: 	cmpl	%ecx, %r11d
    000004bb: 	je	.Ltmp619 # Offset: 1211
    000004bd: 	addsd	init_value(%rip), %xmm1
    000004c5: 	addl	$0x2, %eax
    000004c8: 	cltq
    000004ca: 	addsd	%xmm1, %xmm0
    000004ce: 	movsd	%xmm1, (%r13,%rax,8)
.Ltmp619:
    000004d5: 	leaq	0x10(%r13,%r8), %r8
    000004da: 	leaq	init_value(%rip), %rbx
    000004e1: 	leaq	0x18(%r13,%r9), %rax
    000004e6: 	cmpq	%rbx, %r8
    000004e9: 	setbe	%r8b
    000004ed: 	cmpq	%r14, %rax
    000004f0: 	setae	%r9b
    000004f4: 	orb	%r9b, %r8b
    000004f7: 	je	.Ltmp620 # Offset: 1271
    000004fd: 	testb	%r10b, %r10b
    00000500: 	je	.Ltmp620 # Offset: 1280
    00000506: 	movsd	init_value(%rip), %xmm1
    0000050e: 	movl	%ecx, %edx
    00000510: 	shrl	%edx
    00000512: 	subl	$0x1, %edx
    00000515: 	addsd	%xmm2, %xmm1
    00000519: 	shlq	$0x6, %rdx
    0000051d: 	leaq	0x40(%rax,%rdx), %rdx
.Ltmp621:
    00000522: 	addsd	%xmm1, %xmm0
    00000526: 	movsd	%xmm1, (%rax)
    0000052a: 	addq	$0x40, %rax
    0000052e: 	movsd	%xmm1, -0x20(%rax)
    00000533: 	addsd	%xmm1, %xmm0
    00000537: 	cmpq	%rdx, %rax
    0000053a: 	jne	.Ltmp621 # Offset: 1338
    0000053c: 	movl	%ecx, %edx
    0000053e: 	andl	$-0x2, %edx
    00000541: 	leal	(%rdi,%rdx,4), %eax
    00000544: 	cmpl	%ecx, %edx
    00000546: 	je	.Ltmp612 # Offset: 1350
    00000548: 	addsd	init_value(%rip), %xmm2
    00000550: 	addl	$0x3, %eax
    00000553: 	cltq
    00000555: 	addsd	%xmm2, %xmm0
    00000559: 	movsd	%xmm2, (%r13,%rax,8)
.Ltmp612:
    00000560: 	movsd	DATAat0x36ec8(%rip), %xmm1
    00000568: 	mulsd	init_value(%rip), %xmm1
    00000570: 	movapd	%xmm0, %xmm2
    00000574: 	addsd	DATAat0x36ec8(%rip), %xmm1
    0000057c: 	andpd	DATAat0x36f60(%rip), %xmm2
    00000584: 	comisd	DATAat0x36ed8(%rip), %xmm2
    0000058c: 	movapd	%xmm1, %xmm6
    00000590: 	movsd	%xmm1, 0x18(%rsp)
    00000596: 	movapd	%xmm0, %xmm1
    0000059a: 	subsd	%xmm6, %xmm1
    0000059e: 	jbe	.Ltmp622 # Offset: 1438
    000005a0: 	divsd	%xmm0, %xmm1
.Ltmp622:
    000005a4: 	andpd	DATAat0x36f60(%rip), %xmm1
    000005ac: 	movsd	DATAat0x36ee0(%rip), %xmm7
    000005b4: 	comisd	%xmm1, %xmm7
    000005b8: 	jbe	.Ltmp623 # Offset: 1464
.Ltmp631:
    000005be: 	addl	$0x1, 0x30(%rsp)
    000005c3: 	movl	0x30(%rsp), %eax
    000005c7: 	cmpl	0x10(%rsp), %eax
    000005cb: 	jl	.Ltmp624 # Offset: 1483
.Ltmp599:
    000005d1: 	callq	clock@PLT # Offset: 1489
    000005d6: 	pxor	%xmm0, %xmm0
    000005da: 	movq	0x8(%rsp), %rdi
    000005df: 	movq	%rax, end_time(%rip)
    000005e6: 	subq	start_time(%rip), %rax
    000005ed: 	cvtsi2sd	%rax, %xmm0
    000005f2: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000005fa: 	addq	$0x48, %rsp
    000005fe: 	popq	%rbx
    000005ff: 	popq	%rbp
    00000600: 	popq	%r12
    00000602: 	popq	%r13
    00000604: 	popq	%r14
    00000606: 	popq	%r15
    00000608: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1544
.Ltmp620:
    0000060d: 	movsd	init_value(%rip), %xmm1
    00000615: 	addq	$0x20, %rsi
    00000619: 	addsd	%xmm2, %xmm1
    0000061d: 	movsd	%xmm1, -0x8(%rsi)
    00000622: 	addsd	%xmm1, %xmm0
    00000626: 	cmpq	%rdx, %rsi
    00000629: 	jne	.Ltmp620 # Offset: 1577
    0000062b: 	jmp	.Ltmp612 # Offset: 1579
.Ltmp609:
    00000630: 	leaq	(%rdi,%rsi,4), %rax
    00000634: 	movq	0x28(%rsp), %rsi
    00000639: 	leaq	(%rsi,%rax,8), %rdx
    0000063d: 	movq	%r9, %rax
.Ltmp625:
    00000640: 	movsd	init_value(%rip), %xmm2
    00000648: 	addq	$0x20, %rax
    0000064c: 	addsd	%xmm1, %xmm2
    00000650: 	movsd	%xmm2, -0x20(%rax)
    00000655: 	addsd	%xmm2, %xmm0
    00000659: 	cmpq	%rax, %rdx
    0000065c: 	jne	.Ltmp625 # Offset: 1628
    0000065e: 	jmp	.Ltmp601 # Offset: 1630
.Ltmp603:
    00000663: 	movq	0x18(%rsp), %rdx
    00000668: 	leaq	(%rdi,%rsi,4), %rax
    0000066c: 	movapd	%xmm5, %xmm1
    00000670: 	leaq	(%rdx,%rax,8), %rdx
    00000674: 	movq	%r11, %rax
    00000677: 	nopw	(%rax,%rax) # Size: 9
.Ltmp626:
    00000680: 	movsd	init_value(%rip), %xmm2
    00000688: 	addq	$0x20, %rax
    0000068c: 	addsd	%xmm5, %xmm2
    00000690: 	movsd	%xmm2, -0x20(%rax)
    00000695: 	addsd	%xmm2, %xmm0
    00000699: 	cmpq	%rax, %rdx
    0000069c: 	jne	.Ltmp626 # Offset: 1692
    0000069e: 	jmp	.Ltmp605 # Offset: 1694
.Ltmp606:
    000006a3: 	movq	0x20(%rsp), %rcx
    000006a8: 	leaq	(%rdi,%rsi,4), %rax
    000006ac: 	leaq	(%rcx,%rax,8), %rcx
    000006b0: 	movq	%rbx, %rax
    000006b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp627:
    000006b8: 	movsd	init_value(%rip), %xmm2
    000006c0: 	addq	$0x20, %rax
    000006c4: 	addsd	%xmm3, %xmm2
    000006c8: 	movsd	%xmm2, -0x20(%rax)
    000006cd: 	addsd	%xmm2, %xmm0
    000006d1: 	cmpq	%rax, %rcx
    000006d4: 	jne	.Ltmp627 # Offset: 1748
    000006d6: 	jmp	.Ltmp608 # Offset: 1750
.Ltmp623:
    000006db: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000006e2: 	movl	$0x5, %edx
    000006e7: 	leaq	DATAat0x35004(%rip), %rsi
    000006ee: 	movsd	%xmm0, 0x10(%rsp)
    000006f4: 	movq	%rbp, %rdi
    000006f7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1783
    000006fc: 	cmpq	$0x0, 0x8(%rsp)
    00000702: 	movsd	0x10(%rsp), %xmm0
    00000708: 	je	.Ltmp628 # Offset: 1800
    0000070e: 	movq	0x8(%rsp), %rbx
    00000713: 	movsd	%xmm0, 0x10(%rsp)
    00000719: 	movq	%rbx, %rdi
    0000071c: 	callq	strlen@PLT # Offset: 1820
    00000721: 	movq	%rbx, %rsi
    00000724: 	movq	%rbp, %rdi
    00000727: 	movq	%rax, %rdx
    0000072a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1834
    0000072f: 	movsd	0x10(%rsp), %xmm0
.Ltmp635:
    00000735: 	movl	$0xd, %edx
    0000073a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000741: 	movq	%rbp, %rdi
    00000744: 	movsd	%xmm0, 0x10(%rsp)
    0000074a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1866
    0000074f: 	movsd	0x10(%rsp), %xmm0
    00000755: 	movq	%rbp, %rdi
    00000758: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1880
    0000075d: 	movl	$0xb, %edx
    00000762: 	leaq	DATAat0x35018(%rip), %rsi
    00000769: 	movq	%rax, %rdi
    0000076c: 	movq	%rax, %rbp
    0000076f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1903
    00000774: 	movsd	0x18(%rsp), %xmm0
    0000077a: 	movq	%rbp, %rdi
    0000077d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1917
    00000782: 	movq	%rax, %r12
    00000785: 	movq	(%rax), %rax
    00000788: 	movq	-0x18(%rax), %rax
    0000078c: 	movq	0xf0(%r12,%rax), %rbp
    00000794: 	testq	%rbp, %rbp
    00000797: 	je	.Ltmp629 # Offset: 1943
    0000079d: 	cmpb	$0x0, 0x38(%rbp)
    000007a1: 	je	.Ltmp630 # Offset: 1953
    000007a7: 	movsbl	0x43(%rbp), %esi
.Ltmp634:
    000007ab: 	movq	%r12, %rdi
    000007ae: 	callq	_ZNSo3putEc@PLT # Offset: 1966
    000007b3: 	movq	%rax, %rdi
    000007b6: 	callq	_ZNSo5flushEv@PLT # Offset: 1974
    000007bb: 	movl	iterations(%rip), %eax
    000007c1: 	movl	%eax, 0x10(%rsp)
    000007c5: 	movq	DATAat0x36fb0(%rip), %rax
    000007cc: 	movq	%rax, %xmm4
    000007d1: 	jmp	.Ltmp631 # Offset: 2001
.Ltmp617:
    000007d6: 	movsd	DATAat0x37030(%rip), %xmm1
    000007de: 	movq	%rsi, %rax
.Ltmp632:
    000007e1: 	movsd	init_value(%rip), %xmm3
    000007e9: 	addq	$0x20, %rax
    000007ed: 	addsd	%xmm1, %xmm3
    000007f1: 	movsd	%xmm3, -0x10(%rax)
    000007f6: 	addsd	%xmm3, %xmm0
    000007fa: 	cmpq	%rax, %rdx
    000007fd: 	jne	.Ltmp632 # Offset: 2045
    000007ff: 	jmp	.Ltmp619 # Offset: 2047
.Ltmp614:
    00000804: 	movsd	DATAat0x36fb0(%rip), %xmm2
    0000080c: 	movq	%rsi, %rax
.Ltmp633:
    0000080f: 	movsd	init_value(%rip), %xmm1
    00000817: 	addq	$0x20, %rax
    0000081b: 	addsd	%xmm2, %xmm1
    0000081f: 	movsd	%xmm1, -0x18(%rax)
    00000824: 	addsd	%xmm1, %xmm0
    00000828: 	cmpq	%rax, %rdx
    0000082b: 	jne	.Ltmp633 # Offset: 2091
    0000082d: 	jmp	.Ltmp616 # Offset: 2093
.Ltmp630:
    00000832: 	movq	%rbp, %rdi
    00000835: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 2101
    0000083a: 	movq	(%rbp), %rax
    0000083e: 	movl	$0xa, %esi
    00000843: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000084a: 	movq	0x30(%rax), %rax
    0000084e: 	cmpq	%rdx, %rax
    00000851: 	je	.Ltmp634 # Offset: 2129
    00000857: 	movq	%rbp, %rdi
    0000085a: 	callq	*%rax # Offset: 2138
    0000085c: 	movsbl	%al, %esi
    0000085f: 	jmp	.Ltmp634 # Offset: 2143
.Ltmp628:
    00000864: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000086b: 	movq	-0x18(%rax), %rdi
    0000086f: 	addq	%rbp, %rdi
    00000872: 	movl	0x20(%rdi), %esi
    00000875: 	orl	$0x1, %esi
    00000878: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 2168
    0000087d: 	movsd	0x10(%rsp), %xmm0
    00000883: 	jmp	.Ltmp635 # Offset: 2179
.Ltmp629:
    00000888: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 2184
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_blocked4IdEvPT_iPKc"

Binary Function "_Z15test_for_loop_4IdEvPT_iPKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x10d90
  Size        : 0x633
  MaxSize     : 0x640
  Offset      : 0x10d90
  Section     : .text
  Orc Section : .local.text._Z15test_for_loop_4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x78, %rsp
    00000017: 	movl	%esi, 0x38(%rsp)
    0000001b: 	movq	%rdx, 0x20(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %r11d
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%r11d, %r11d
    00000036: 	jle	.Ltmp636 # Offset: 54
    0000003c: 	leal	-0x4(%rbx), %eax
    0000003f: 	leaq	init_value(%rip), %rdi
    00000046: 	movl	$0x0, 0xc(%rsp)
    0000004e: 	movsd	DATAat0x37030(%rip), %xmm3
    00000056: 	movl	%eax, %ecx
    00000058: 	movq	%r15, 0x18(%rsp)
    0000005d: 	shrl	$0x2, %ecx
    00000060: 	movl	%ecx, %edx
    00000062: 	shlq	$0x5, %rdx
    00000066: 	cmpl	$0x23, %eax
    00000069: 	seta	%r10b
    0000006d: 	addl	$0x1, %ecx
    00000070: 	leaq	0x20(%r15,%rdx), %rbx
    00000075: 	leaq	-0x1(%rcx), %r8
    00000079: 	movl	%ecx, %r14d
    0000007c: 	movl	%ecx, 0x10(%rsp)
    00000080: 	shlq	$0x5, %r8
    00000084: 	leaq	0x10(%r15,%r8), %rax
    00000089: 	leaq	0x18(%r15,%r8), %r8
    0000008e: 	cmpq	%rdi, %rax
    00000091: 	setbe	%al
    00000094: 	cmpq	%rdi, %r15
    00000097: 	setae	%sil
    0000009b: 	andl	$-0x2, %r14d
    0000009f: 	orl	%esi, %eax
    000000a1: 	movl	%r14d, 0x14(%rsp)
    000000a6: 	andl	%r10d, %eax
    000000a9: 	movb	%al, 0x3f(%rsp)
    000000ad: 	movl	%ecx, %eax
    000000af: 	shrl	%eax
    000000b1: 	leal	-0x1(%rax), %esi
    000000b4: 	leal	(,%r14,4), %eax
    000000bc: 	leal	0x1(%rax), %ebp
    000000bf: 	leaq	0x28(%r15,%rdx), %r14
    000000c4: 	shlq	$0x6, %rsi
    000000c8: 	cmpq	%rdi, %r8
    000000cb: 	movslq	%ebp, %rbp
    000000ce: 	movq	%r14, 0x58(%rsp)
    000000d3: 	leaq	0x10(%r15), %r14
    000000d7: 	setbe	%r8b
    000000db: 	leaq	(%r15,%rbp,8), %r13
    000000df: 	leaq	0x8(%rdi), %rbp
    000000e3: 	movq	%r14, 0x30(%rsp)
    000000e8: 	cmpq	%rbp, %r14
    000000eb: 	leaq	0x30(%r15,%rdx), %r14
    000000f0: 	leaq	0x48(%r15,%rsi), %r9
    000000f5: 	setae	%r12b
    000000f9: 	shlq	$0x5, %rcx
    000000fd: 	movq	%r14, 0x60(%rsp)
    00000102: 	leaq	0x18(%r15), %r14
    00000106: 	orl	%r12d, %r8d
    00000109: 	addq	%r15, %rcx
    0000010c: 	leal	0x2(%rax), %r12d
    00000110: 	movq	%r14, 0x28(%rsp)
    00000115: 	andl	%r10d, %r8d
    00000118: 	cmpq	%rdi, %rcx
    0000011b: 	movslq	%r12d, %r12
    0000011e: 	setbe	%cl
    00000121: 	cmpq	%rbp, %r14
    00000124: 	movb	%r8b, 0x3e(%rsp)
    00000129: 	leaq	0x58(%r15,%rsi), %r14
    0000012e: 	setae	%dil
    00000132: 	leaq	0x50(%r15,%rsi), %r8
    00000137: 	leaq	(%r15,%r12,8), %r12
    0000013b: 	addl	$0x3, %eax
    0000013e: 	cltq
    00000140: 	orl	%edi, %ecx
    00000142: 	leaq	(%r15,%rax,8), %rbp
    00000146: 	leaq	0x38(%r15,%rdx), %rax
    0000014b: 	andl	%r10d, %ecx
    0000014e: 	movl	%r11d, %edx
    00000151: 	movq	%rax, 0x68(%rsp)
    00000156: 	movq	%r8, %r15
    00000159: 	movb	%cl, 0x3d(%rsp)
    0000015d: 	movq	%r13, %rcx
    00000160: 	movq	%r14, %r13
    00000163: 	movq	%r9, %r14
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp650:
    00000170: 	cmpl	$0x3, 0x38(%rsp)
    00000175: 	movq	0x18(%rsp), %rax
    0000017a: 	pxor	%xmm0, %xmm0
    0000017e: 	jle	.Ltmp637 # Offset: 382
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp638:
    00000188: 	movsd	init_value(%rip), %xmm1
    00000190: 	addq	$0x20, %rax
    00000194: 	movsd	%xmm1, -0x20(%rax)
    00000199: 	addsd	%xmm1, %xmm0
    0000019d: 	cmpq	%rbx, %rax
    000001a0: 	jne	.Ltmp638 # Offset: 416
    000001a2: 	movq	0x18(%rsp), %rax
    000001a7: 	addq	$0x8, %rax
    000001ab: 	cmpb	$0x0, 0x3f(%rsp)
    000001b0: 	je	.Ltmp639 # Offset: 432
    000001b6: 	movsd	DATAat0x36fb0(%rip), %xmm2
    000001be: 	addsd	%xmm2, %xmm1
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp640:
    000001c8: 	addsd	%xmm1, %xmm0
    000001cc: 	movsd	%xmm1, (%rax)
    000001d0: 	addq	$0x40, %rax
    000001d4: 	movsd	%xmm1, -0x20(%rax)
    000001d9: 	addsd	%xmm1, %xmm0
    000001dd: 	cmpq	%r14, %rax
    000001e0: 	jne	.Ltmp640 # Offset: 480
    000001e2: 	movl	0x14(%rsp), %edi
    000001e6: 	cmpl	%edi, 0x10(%rsp)
    000001ea: 	je	.Ltmp641 # Offset: 490
    000001ec: 	movsd	init_value(%rip), %xmm1
    000001f4: 	addsd	%xmm2, %xmm1
    000001f8: 	addsd	%xmm1, %xmm0
    000001fc: 	movsd	%xmm1, (%rcx)
.Ltmp641:
    00000200: 	cmpb	$0x0, 0x3e(%rsp)
    00000205: 	movq	0x30(%rsp), %rax
    0000020a: 	je	.Ltmp642 # Offset: 522
    00000210: 	movsd	init_value(%rip), %xmm1
    00000218: 	addsd	%xmm3, %xmm1
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp643:
    00000220: 	addsd	%xmm1, %xmm0
    00000224: 	movsd	%xmm1, (%rax)
    00000228: 	addq	$0x40, %rax
    0000022c: 	movsd	%xmm1, -0x20(%rax)
    00000231: 	addsd	%xmm1, %xmm0
    00000235: 	cmpq	%r15, %rax
    00000238: 	jne	.Ltmp643 # Offset: 568
    0000023a: 	movl	0x14(%rsp), %esi
    0000023e: 	cmpl	%esi, 0x10(%rsp)
    00000242: 	je	.Ltmp644 # Offset: 578
    00000244: 	movsd	init_value(%rip), %xmm1
    0000024c: 	addsd	%xmm3, %xmm1
    00000250: 	addsd	%xmm1, %xmm0
    00000254: 	movsd	%xmm1, (%r12)
.Ltmp644:
    0000025a: 	cmpb	$0x0, 0x3d(%rsp)
    0000025f: 	movq	0x28(%rsp), %rax
    00000264: 	je	.Ltmp645 # Offset: 612
.Ltmp656:
    0000026a: 	movsd	init_value(%rip), %xmm1
    00000272: 	addsd	%xmm2, %xmm1
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp646:
    00000280: 	addsd	%xmm1, %xmm0
    00000284: 	movsd	%xmm1, (%rax)
    00000288: 	addq	$0x40, %rax
    0000028c: 	movsd	%xmm1, -0x20(%rax)
    00000291: 	addsd	%xmm1, %xmm0
    00000295: 	cmpq	%r13, %rax
    00000298: 	jne	.Ltmp646 # Offset: 664
    0000029a: 	movl	0x14(%rsp), %edi
    0000029e: 	cmpl	%edi, 0x10(%rsp)
    000002a2: 	je	.Ltmp647 # Offset: 674
    000002a4: 	addsd	init_value(%rip), %xmm2
    000002ac: 	addsd	%xmm2, %xmm0
    000002b0: 	movsd	%xmm2, (%rbp)
.Ltmp647:
    000002b5: 	movsd	DATAat0x36ec8(%rip), %xmm2
    000002bd: 	movapd	%xmm0, %xmm4
    000002c1: 	movapd	%xmm0, %xmm1
    000002c5: 	andpd	DATAat0x36f60(%rip), %xmm4
    000002cd: 	mulsd	init_value(%rip), %xmm2
    000002d5: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000002dd: 	addsd	DATAat0x36ec8(%rip), %xmm2
    000002e5: 	subsd	%xmm2, %xmm1
    000002e9: 	jbe	.Ltmp648 # Offset: 745
    000002eb: 	divsd	%xmm0, %xmm1
.Ltmp648:
    000002ef: 	andpd	DATAat0x36f60(%rip), %xmm1
    000002f7: 	movsd	DATAat0x36ee0(%rip), %xmm5
    000002ff: 	comisd	%xmm1, %xmm5
    00000303: 	jbe	.Ltmp649 # Offset: 771
.Ltmp654:
    00000305: 	addl	$0x1, 0xc(%rsp)
    0000030a: 	movl	0xc(%rsp), %eax
    0000030e: 	cmpl	%edx, %eax
    00000310: 	jl	.Ltmp650 # Offset: 784
.Ltmp636:
    00000316: 	callq	clock@PLT # Offset: 790
    0000031b: 	pxor	%xmm0, %xmm0
    0000031f: 	movq	0x20(%rsp), %rdi
    00000324: 	movq	%rax, end_time(%rip)
    0000032b: 	subq	start_time(%rip), %rax
    00000332: 	cvtsi2sd	%rax, %xmm0
    00000337: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000033f: 	addq	$0x78, %rsp
    00000343: 	popq	%rbx
    00000344: 	popq	%rbp
    00000345: 	popq	%r12
    00000347: 	popq	%r13
    00000349: 	popq	%r14
    0000034b: 	popq	%r15
    0000034d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 845
    00000352: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    00000358: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    0000035f: 	movl	$0x5, %edx
    00000364: 	movq	%rcx, 0x50(%rsp)
    00000369: 	leaq	DATAat0x35004(%rip), %rsi
    00000370: 	movq	%r10, %rdi
    00000373: 	movsd	%xmm0, 0x48(%rsp)
    00000379: 	movsd	%xmm2, 0x40(%rsp)
    0000037f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 895
    00000384: 	cmpq	$0x0, 0x20(%rsp)
    0000038a: 	movsd	0x40(%rsp), %xmm2
    00000390: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    00000397: 	movsd	0x48(%rsp), %xmm0
    0000039d: 	movq	0x50(%rsp), %rcx
    000003a2: 	je	.Ltmp651 # Offset: 930
    000003a8: 	movq	0x20(%rsp), %rdi
    000003ad: 	movq	%rcx, 0x50(%rsp)
    000003b2: 	movsd	%xmm0, 0x48(%rsp)
    000003b8: 	movsd	%xmm2, 0x40(%rsp)
    000003be: 	callq	strlen@PLT # Offset: 958
    000003c3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    000003ca: 	movq	0x20(%rsp), %rsi
    000003cf: 	movq	%r10, %rdi
    000003d2: 	movq	%rax, %rdx
    000003d5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 981
    000003da: 	movq	0x50(%rsp), %rcx
    000003df: 	movsd	0x48(%rsp), %xmm0
    000003e5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    000003ec: 	movsd	0x40(%rsp), %xmm2
.Ltmp660:
    000003f2: 	movl	$0xd, %edx
    000003f7: 	leaq	DATAat0x3500a(%rip), %rsi
    000003fe: 	movq	%r10, %rdi
    00000401: 	movq	%rcx, 0x50(%rsp)
    00000406: 	movsd	%xmm2, 0x48(%rsp)
    0000040c: 	movsd	%xmm0, 0x40(%rsp)
    00000412: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1042
    00000417: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    0000041e: 	movsd	0x40(%rsp), %xmm0
    00000424: 	movq	%r10, %rdi
    00000427: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1063
    0000042c: 	movl	$0xb, %edx
    00000431: 	leaq	DATAat0x35018(%rip), %rsi
    00000438: 	movq	%rax, %rdi
    0000043b: 	movq	%rax, 0x40(%rsp)
    00000440: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1088
    00000445: 	movsd	0x48(%rsp), %xmm2
    0000044b: 	movq	0x40(%rsp), %rdi
    00000450: 	movapd	%xmm2, %xmm0
    00000454: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1108
    00000459: 	movq	0x50(%rsp), %rcx
    0000045e: 	movq	%rax, %r10
    00000461: 	movq	(%rax), %rax
    00000464: 	movq	-0x18(%rax), %rax
    00000468: 	movq	0xf0(%r10,%rax), %rdi
    00000470: 	testq	%rdi, %rdi
    00000473: 	je	.Ltmp652 # Offset: 1139
    00000479: 	cmpb	$0x0, 0x38(%rdi)
    0000047d: 	je	.Ltmp653 # Offset: 1149
    00000483: 	movsbl	0x43(%rdi), %esi
.Ltmp659:
    00000487: 	movq	%r10, %rdi
    0000048a: 	movq	%rcx, 0x40(%rsp)
    0000048f: 	callq	_ZNSo3putEc@PLT # Offset: 1167
    00000494: 	movq	%rax, %rdi
    00000497: 	callq	_ZNSo5flushEv@PLT # Offset: 1175
    0000049c: 	movl	iterations(%rip), %edx
    000004a2: 	movq	0x40(%rsp), %rcx
    000004a7: 	movq	DATAat0x37030(%rip), %rax
    000004ae: 	movq	%rax, %xmm3
    000004b3: 	jmp	.Ltmp654 # Offset: 1203
    000004b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp642:
    000004c0: 	movq	0x60(%rsp), %rsi
    000004c5: 	nopl	(%rax) # Size: 3
.Ltmp655:
    000004c8: 	movsd	init_value(%rip), %xmm1
    000004d0: 	addq	$0x20, %rax
    000004d4: 	addsd	%xmm3, %xmm1
    000004d8: 	movsd	%xmm1, -0x20(%rax)
    000004dd: 	addsd	%xmm1, %xmm0
    000004e1: 	cmpq	%rax, %rsi
    000004e4: 	jne	.Ltmp655 # Offset: 1252
    000004e6: 	cmpb	$0x0, 0x3d(%rsp)
    000004eb: 	movq	0x28(%rsp), %rax
    000004f0: 	jne	.Ltmp656 # Offset: 1264
    000004f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp645:
    00000500: 	movq	0x68(%rsp), %rsi
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp657:
    00000508: 	movsd	init_value(%rip), %xmm1
    00000510: 	addq	$0x20, %rax
    00000514: 	addsd	%xmm2, %xmm1
    00000518: 	movsd	%xmm1, -0x20(%rax)
    0000051d: 	addsd	%xmm1, %xmm0
    00000521: 	cmpq	%rax, %rsi
    00000524: 	jne	.Ltmp657 # Offset: 1316
    00000526: 	jmp	.Ltmp647 # Offset: 1318
    0000052b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp639:
    00000530: 	movq	DATAat0x36fb0(%rip), %rsi
    00000537: 	movq	%rsi, %xmm2
    0000053c: 	movq	0x58(%rsp), %rsi
    00000541: 	nopl	(%rax) # Size: 7
.Ltmp658:
    00000548: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000550: 	addsd	init_value(%rip), %xmm1
    00000558: 	addq	$0x20, %rax
    0000055c: 	movsd	%xmm1, -0x20(%rax)
    00000561: 	addsd	%xmm1, %xmm0
    00000565: 	cmpq	%rax, %rsi
    00000568: 	jne	.Ltmp658 # Offset: 1384
    0000056a: 	jmp	.Ltmp641 # Offset: 1386
    0000056f: 	nop # Size: 1
.Ltmp653:
    00000570: 	movq	%rcx, 0x50(%rsp)
    00000575: 	movq	%r10, 0x48(%rsp)
    0000057a: 	movq	%rdi, 0x40(%rsp)
    0000057f: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1407
    00000584: 	movq	0x40(%rsp), %rdi
    00000589: 	movq	0x48(%rsp), %r10
    0000058e: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000595: 	movq	0x50(%rsp), %rcx
    0000059a: 	movl	$0xa, %esi
    0000059f: 	movq	(%rdi), %rax
    000005a2: 	movq	0x30(%rax), %rax
    000005a6: 	cmpq	%rdx, %rax
    000005a9: 	je	.Ltmp659 # Offset: 1449
    000005af: 	movq	%rcx, 0x48(%rsp)
    000005b4: 	movq	%r10, 0x40(%rsp)
    000005b9: 	callq	*%rax # Offset: 1465
    000005bb: 	movq	0x48(%rsp), %rcx
    000005c0: 	movq	0x40(%rsp), %r10
    000005c5: 	movsbl	%al, %esi
    000005c8: 	jmp	.Ltmp659 # Offset: 1480
    000005cd: 	nopl	(%rax) # Size: 3
.Ltmp637:
    000005d0: 	movsd	DATAat0x36ec8(%rip), %xmm2
    000005d8: 	mulsd	init_value(%rip), %xmm2
    000005e0: 	pxor	%xmm1, %xmm1
    000005e4: 	addsd	DATAat0x36ec8(%rip), %xmm2
    000005ec: 	subsd	%xmm2, %xmm1
    000005f0: 	jmp	.Ltmp648 # Offset: 1520
    000005f5: 	nopl	(%rax) # Size: 3
.Ltmp651:
    000005f8: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000005ff: 	movq	-0x18(%rax), %rdi
    00000603: 	addq	%r10, %rdi
    00000606: 	movl	0x20(%rdi), %esi
    00000609: 	orl	$0x1, %esi
    0000060c: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1548
    00000611: 	movsd	0x40(%rsp), %xmm2
    00000617: 	movsd	0x48(%rsp), %xmm0
    0000061d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r10
    00000624: 	movq	0x50(%rsp), %rcx
    00000629: 	jmp	.Ltmp660 # Offset: 1577
.Ltmp652:
    0000062e: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1582
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_for_loop_4IdEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite2IhEvPT_iPKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x113d0
  Size        : 0x7d3
  MaxSize     : 0x7e0
  Offset      : 0x113d0
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x208, %rsp
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp661 # Offset: 49
    00000037: 	leal	-0x800(%rbp), %eax
    0000003d: 	movl	$0x0, 0x4(%rsp)
    00000045: 	leal	-0x7ff(%rbp), %r8d
    0000004c: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000054: 	andl	$0xfffff800, %eax
    00000059: 	leaq	init_value(%rip), %r15
    00000060: 	leal	-0x1(%rbp), %r12d
    00000064: 	movq	%r14, %r9
    00000067: 	addl	$0x800, %eax
    0000006c: 	leaq	0x8(%r15), %r13
    00000070: 	movl	%eax, 0x8(%rsp)
    00000074: 	movl	%ebp, %eax
    00000076: 	movl	%r8d, %ebp
    00000079: 	movl	%eax, %r8d
.Ltmp670:
    0000007c: 	leaq	0x1(%rbx), %r10
    00000080: 	xorl	%esi, %esi
    00000082: 	xorl	%eax, %eax
    00000084: 	xorl	%r14d, %r14d
    00000087: 	testl	%ebp, %ebp
    00000089: 	jle	.Ltmp662 # Offset: 137
.Ltmp665:
    0000008f: 	leaq	(%rbx,%rsi), %rdx
    00000093: 	leaq	0x8(%rdx), %rdi
    00000097: 	movq	$0x0, (%rdx)
    0000009e: 	movq	$0x0, 0x7f8(%rdx)
    000000a9: 	andq	$-0x8, %rdi
    000000ad: 	subq	%rdi, %rdx
    000000b0: 	leal	0x800(%rdx), %ecx
    000000b6: 	leaq	0x7ff(%r10), %rdx
    000000bd: 	shrl	$0x3, %ecx
    000000c0: 	cmpq	%r15, %rdx
    000000c3: 	rep		stosq	%rax, %es:(%rdi)
    000000c6: 	setbe	%dl
    000000c9: 	cmpq	%r13, %r10
    000000cc: 	leaq	0x7ff(%rsi), %rcx
    000000d3: 	setae	%dil
    000000d7: 	orb	%dil, %dl
    000000da: 	leaq	0x800(%rsi), %rdi
    000000e1: 	je	.Ltmp663 # Offset: 225
    000000e7: 	leaq	0x2(%rsi), %rdx
    000000eb: 	leaq	0x800(%rsi), %rdi
    000000f2: 	cmpq	%rdi, %rdx
    000000f5: 	ja	.Ltmp663 # Offset: 245
    000000fb: 	movsd	init_value(%rip), %xmm1
    00000103: 	movq	%r10, %rdx
    00000106: 	xorl	%ecx, %ecx
    00000108: 	unpcklpd	%xmm1, %xmm1
    0000010c: 	cvttpd2dq	%xmm1, %xmm1
    00000110: 	punpcklqdq	%xmm1, %xmm1
    00000114: 	movdqa	%xmm1, %xmm2
    00000118: 	punpckhwd	%xmm1, %xmm2
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp664:
    00000120: 	movdqa	%xmm1, %xmm0
    00000124: 	addq	$0x1, %rcx
    00000128: 	addq	$0x20, %rdx
    0000012c: 	punpcklwd	%xmm1, %xmm0
    00000130: 	movdqa	%xmm0, %xmm3
    00000134: 	punpcklwd	%xmm2, %xmm0
    00000138: 	punpckhwd	%xmm2, %xmm3
    0000013c: 	punpcklwd	%xmm3, %xmm0
    00000140: 	pand	%xmm4, %xmm0
    00000144: 	packuswb	%xmm0, %xmm0
    00000148: 	movd	%xmm0, %esi
    0000014c: 	movb	%sil, -0x20(%rdx)
    00000150: 	movaps	%xmm0, 0x1f0(%rsp)
    00000158: 	movzbl	0x1f1(%rsp), %esi
    00000160: 	movb	%sil, -0x1e(%rdx)
    00000164: 	movaps	%xmm0, 0x1e0(%rsp)
    0000016c: 	movzbl	0x1e2(%rsp), %esi
    00000174: 	movb	%sil, -0x1c(%rdx)
    00000178: 	movaps	%xmm0, 0x1d0(%rsp)
    00000180: 	movzbl	0x1d3(%rsp), %esi
    00000188: 	movb	%sil, -0x1a(%rdx)
    0000018c: 	movaps	%xmm0, 0x1c0(%rsp)
    00000194: 	movzbl	0x1c4(%rsp), %esi
    0000019c: 	movb	%sil, -0x18(%rdx)
    000001a0: 	movaps	%xmm0, 0x1b0(%rsp)
    000001a8: 	movzbl	0x1b5(%rsp), %esi
    000001b0: 	movb	%sil, -0x16(%rdx)
    000001b4: 	movaps	%xmm0, 0x1a0(%rsp)
    000001bc: 	movzbl	0x1a6(%rsp), %esi
    000001c4: 	movb	%sil, -0x14(%rdx)
    000001c8: 	movaps	%xmm0, 0x190(%rsp)
    000001d0: 	movzbl	0x197(%rsp), %esi
    000001d8: 	movb	%sil, -0x12(%rdx)
    000001dc: 	movaps	%xmm0, 0x180(%rsp)
    000001e4: 	movzbl	0x188(%rsp), %esi
    000001ec: 	movb	%sil, -0x10(%rdx)
    000001f0: 	movaps	%xmm0, 0x170(%rsp)
    000001f8: 	movzbl	0x179(%rsp), %esi
    00000200: 	movb	%sil, -0xe(%rdx)
    00000204: 	movaps	%xmm0, 0x160(%rsp)
    0000020c: 	movzbl	0x16a(%rsp), %esi
    00000214: 	movb	%sil, -0xc(%rdx)
    00000218: 	movaps	%xmm0, 0x150(%rsp)
    00000220: 	movzbl	0x15b(%rsp), %esi
    00000228: 	movb	%sil, -0xa(%rdx)
    0000022c: 	movaps	%xmm0, 0x140(%rsp)
    00000234: 	movzbl	0x14c(%rsp), %esi
    0000023c: 	movb	%sil, -0x8(%rdx)
    00000240: 	movaps	%xmm0, 0x130(%rsp)
    00000248: 	movzbl	0x13d(%rsp), %esi
    00000250: 	movb	%sil, -0x6(%rdx)
    00000254: 	movaps	%xmm0, 0x120(%rsp)
    0000025c: 	movzbl	0x12e(%rsp), %esi
    00000264: 	movb	%sil, -0x4(%rdx)
    00000268: 	movaps	%xmm0, 0x110(%rsp)
    00000270: 	movzbl	0x11f(%rsp), %esi
    00000278: 	movb	%sil, -0x2(%rdx)
    0000027c: 	cmpq	$0x40, %rcx
    00000280: 	jne	.Ltmp664 # Offset: 640
.Ltmp677:
    00000286: 	movq	%rdi, %rsi
    00000289: 	addq	$0x800, %r10
    00000290: 	cmpl	%edi, %ebp
    00000292: 	jg	.Ltmp665 # Offset: 658
    00000298: 	movl	0x8(%rsp), %r14d
.Ltmp662:
    0000029d: 	cmpl	%r14d, %r8d
    000002a0: 	jle	.Ltmp666 # Offset: 672
    000002a2: 	movl	%r12d, %edx
    000002a5: 	movslq	%r14d, %rdi
    000002a8: 	xorl	%esi, %esi
    000002aa: 	movq	%r9, 0x10(%rsp)
    000002af: 	subl	%r14d, %edx
    000002b2: 	addq	%rbx, %rdi
    000002b5: 	movl	%r8d, 0xc(%rsp)
    000002ba: 	addq	$0x1, %rdx
    000002be: 	callq	memset@PLT # Offset: 702
    000002c3: 	movl	0xc(%rsp), %r8d
    000002c8: 	movq	0x10(%rsp), %r9
    000002cd: 	movdqa	DATAat0x36f20(%rip), %xmm4
.Ltmp666:
    000002d5: 	cmpl	%r14d, %r12d
    000002d8: 	jle	.Ltmp667 # Offset: 728
    000002de: 	leal	-0x2(%r8), %esi
    000002e2: 	movslq	%r14d, %rdi
    000002e5: 	subl	%r14d, %esi
    000002e8: 	leaq	0x1(%rbx,%rdi), %rax
    000002ed: 	movl	%esi, %edx
    000002ef: 	shrl	%edx
    000002f1: 	leal	0x1(%rdx), %r10d
    000002f5: 	movq	%r10, %rcx
    000002f8: 	leaq	(%rdi,%r10,2), %r10
    000002fc: 	addq	%rbx, %r10
    000002ff: 	cmpq	%r15, %r10
    00000302: 	setbe	%r11b
    00000306: 	cmpq	%r13, %rax
    00000309: 	setae	%r10b
    0000030d: 	orb	%r11b, %r10b
    00000310: 	je	.Ltmp668 # Offset: 784
    00000316: 	cmpl	$0x1d, %esi
    00000319: 	jbe	.Ltmp668 # Offset: 793
    0000031f: 	movsd	init_value(%rip), %xmm1
    00000327: 	movl	%ecx, %edx
    00000329: 	shrl	$0x4, %edx
    0000032c: 	unpcklpd	%xmm1, %xmm1
    00000330: 	subl	$0x1, %edx
    00000333: 	cvttpd2dq	%xmm1, %xmm1
    00000337: 	punpcklqdq	%xmm1, %xmm1
    0000033b: 	shlq	$0x5, %rdx
    0000033f: 	movdqa	%xmm1, %xmm2
    00000343: 	leaq	0x20(%rax,%rdx), %rsi
    00000348: 	punpckhwd	%xmm1, %xmm2
.Ltmp669:
    0000034c: 	movdqa	%xmm1, %xmm0
    00000350: 	addq	$0x20, %rax
    00000354: 	punpcklwd	%xmm1, %xmm0
    00000358: 	movdqa	%xmm0, %xmm3
    0000035c: 	punpcklwd	%xmm2, %xmm0
    00000360: 	punpckhwd	%xmm2, %xmm3
    00000364: 	punpcklwd	%xmm3, %xmm0
    00000368: 	pand	%xmm4, %xmm0
    0000036c: 	packuswb	%xmm0, %xmm0
    00000370: 	movd	%xmm0, %edx
    00000374: 	movb	%dl, -0x20(%rax)
    00000377: 	movaps	%xmm0, 0x100(%rsp)
    0000037f: 	movzbl	0x101(%rsp), %edx
    00000387: 	movb	%dl, -0x1e(%rax)
    0000038a: 	movaps	%xmm0, 0xf0(%rsp)
    00000392: 	movzbl	0xf2(%rsp), %edx
    0000039a: 	movb	%dl, -0x1c(%rax)
    0000039d: 	movaps	%xmm0, 0xe0(%rsp)
    000003a5: 	movzbl	0xe3(%rsp), %edx
    000003ad: 	movb	%dl, -0x1a(%rax)
    000003b0: 	movaps	%xmm0, 0xd0(%rsp)
    000003b8: 	movzbl	0xd4(%rsp), %edx
    000003c0: 	movb	%dl, -0x18(%rax)
    000003c3: 	movaps	%xmm0, 0xc0(%rsp)
    000003cb: 	movzbl	0xc5(%rsp), %edx
    000003d3: 	movb	%dl, -0x16(%rax)
    000003d6: 	movaps	%xmm0, 0xb0(%rsp)
    000003de: 	movzbl	0xb6(%rsp), %edx
    000003e6: 	movb	%dl, -0x14(%rax)
    000003e9: 	movaps	%xmm0, 0xa0(%rsp)
    000003f1: 	movzbl	0xa7(%rsp), %edx
    000003f9: 	movb	%dl, -0x12(%rax)
    000003fc: 	movaps	%xmm0, 0x90(%rsp)
    00000404: 	movzbl	0x98(%rsp), %edx
    0000040c: 	movb	%dl, -0x10(%rax)
    0000040f: 	movaps	%xmm0, 0x80(%rsp)
    00000417: 	movzbl	0x89(%rsp), %edx
    0000041f: 	movb	%dl, -0xe(%rax)
    00000422: 	movaps	%xmm0, 0x70(%rsp)
    00000427: 	movzbl	0x7a(%rsp), %edx
    0000042c: 	movb	%dl, -0xc(%rax)
    0000042f: 	movaps	%xmm0, 0x60(%rsp)
    00000434: 	movzbl	0x6b(%rsp), %edx
    00000439: 	movb	%dl, -0xa(%rax)
    0000043c: 	movaps	%xmm0, 0x50(%rsp)
    00000441: 	movzbl	0x5c(%rsp), %edx
    00000446: 	movb	%dl, -0x8(%rax)
    00000449: 	movaps	%xmm0, 0x40(%rsp)
    0000044e: 	movzbl	0x4d(%rsp), %edx
    00000453: 	movb	%dl, -0x6(%rax)
    00000456: 	movaps	%xmm0, 0x30(%rsp)
    0000045b: 	movzbl	0x3e(%rsp), %edx
    00000460: 	movb	%dl, -0x4(%rax)
    00000463: 	movaps	%xmm0, 0x20(%rsp)
    00000468: 	movzbl	0x2f(%rsp), %edx
    0000046d: 	movb	%dl, -0x2(%rax)
    00000470: 	cmpq	%rax, %rsi
    00000473: 	jne	.Ltmp669 # Offset: 1139
    00000479: 	movl	%ecx, %edx
    0000047b: 	andl	$-0x10, %edx
    0000047e: 	leal	(%r14,%rdx,2), %eax
    00000482: 	cmpl	%edx, %ecx
    00000484: 	je	.Ltmp667 # Offset: 1156
    0000048a: 	cvttsd2si	init_value(%rip), %ecx
    00000492: 	leal	0x1(%rax), %edx
    00000495: 	movslq	%edx, %rdx
    00000498: 	movb	%cl, (%rbx,%rdx)
    0000049b: 	leal	0x2(%rax), %edx
    0000049e: 	cmpl	%edx, %r12d
    000004a1: 	jle	.Ltmp667 # Offset: 1185
    000004a7: 	cvttsd2si	init_value(%rip), %ecx
    000004af: 	leal	0x3(%rax), %edx
    000004b2: 	movslq	%edx, %rdx
    000004b5: 	movb	%cl, (%rbx,%rdx)
    000004b8: 	leal	0x4(%rax), %edx
    000004bb: 	cmpl	%edx, %r12d
    000004be: 	jle	.Ltmp667 # Offset: 1214
    000004c4: 	cvttsd2si	init_value(%rip), %ecx
    000004cc: 	leal	0x5(%rax), %edx
    000004cf: 	movslq	%edx, %rdx
    000004d2: 	movb	%cl, (%rbx,%rdx)
    000004d5: 	leal	0x6(%rax), %edx
    000004d8: 	cmpl	%edx, %r12d
    000004db: 	jle	.Ltmp667 # Offset: 1243
    000004e1: 	cvttsd2si	init_value(%rip), %ecx
    000004e9: 	leal	0x7(%rax), %edx
    000004ec: 	movslq	%edx, %rdx
    000004ef: 	movb	%cl, (%rbx,%rdx)
    000004f2: 	leal	0x8(%rax), %edx
    000004f5: 	cmpl	%edx, %r12d
    000004f8: 	jle	.Ltmp667 # Offset: 1272
    000004fe: 	cvttsd2si	init_value(%rip), %ecx
    00000506: 	leal	0x9(%rax), %edx
    00000509: 	movslq	%edx, %rdx
    0000050c: 	movb	%cl, (%rbx,%rdx)
    0000050f: 	leal	0xa(%rax), %edx
    00000512: 	cmpl	%edx, %r12d
    00000515: 	jle	.Ltmp667 # Offset: 1301
    0000051b: 	cvttsd2si	init_value(%rip), %ecx
    00000523: 	leal	0xb(%rax), %edx
    00000526: 	movslq	%edx, %rdx
    00000529: 	movb	%cl, (%rbx,%rdx)
    0000052c: 	leal	0xc(%rax), %edx
    0000052f: 	cmpl	%edx, %r12d
    00000532: 	jle	.Ltmp667 # Offset: 1330
    00000538: 	cvttsd2si	init_value(%rip), %ecx
    00000540: 	leal	0xd(%rax), %edx
    00000543: 	movslq	%edx, %rdx
    00000546: 	movb	%cl, (%rbx,%rdx)
    00000549: 	leal	0xe(%rax), %edx
    0000054c: 	cmpl	%edx, %r12d
    0000054f: 	jle	.Ltmp667 # Offset: 1359
    00000555: 	cvttsd2si	init_value(%rip), %ecx
    0000055d: 	leal	0xf(%rax), %edx
    00000560: 	movslq	%edx, %rdx
    00000563: 	movb	%cl, (%rbx,%rdx)
    00000566: 	leal	0x10(%rax), %edx
    00000569: 	cmpl	%edx, %r12d
    0000056c: 	jle	.Ltmp667 # Offset: 1388
    00000572: 	cvttsd2si	init_value(%rip), %ecx
    0000057a: 	leal	0x11(%rax), %edx
    0000057d: 	movslq	%edx, %rdx
    00000580: 	movb	%cl, (%rbx,%rdx)
    00000583: 	leal	0x12(%rax), %edx
    00000586: 	cmpl	%edx, %r12d
    00000589: 	jle	.Ltmp667 # Offset: 1417
    0000058f: 	cvttsd2si	init_value(%rip), %ecx
    00000597: 	leal	0x13(%rax), %edx
    0000059a: 	movslq	%edx, %rdx
    0000059d: 	movb	%cl, (%rbx,%rdx)
    000005a0: 	leal	0x14(%rax), %edx
    000005a3: 	cmpl	%edx, %r12d
    000005a6: 	jle	.Ltmp667 # Offset: 1446
    000005a8: 	cvttsd2si	init_value(%rip), %ecx
    000005b0: 	leal	0x15(%rax), %edx
    000005b3: 	movslq	%edx, %rdx
    000005b6: 	movb	%cl, (%rbx,%rdx)
    000005b9: 	leal	0x16(%rax), %edx
    000005bc: 	cmpl	%edx, %r12d
    000005bf: 	jle	.Ltmp667 # Offset: 1471
    000005c1: 	cvttsd2si	init_value(%rip), %ecx
    000005c9: 	leal	0x17(%rax), %edx
    000005cc: 	movslq	%edx, %rdx
    000005cf: 	movb	%cl, (%rbx,%rdx)
    000005d2: 	leal	0x18(%rax), %edx
    000005d5: 	cmpl	%edx, %r12d
    000005d8: 	jle	.Ltmp667 # Offset: 1496
    000005da: 	cvttsd2si	init_value(%rip), %ecx
    000005e2: 	leal	0x19(%rax), %edx
    000005e5: 	movslq	%edx, %rdx
    000005e8: 	movb	%cl, (%rbx,%rdx)
    000005eb: 	leal	0x1a(%rax), %edx
    000005ee: 	cmpl	%edx, %r12d
    000005f1: 	jle	.Ltmp667 # Offset: 1521
    000005f3: 	cvttsd2si	init_value(%rip), %ecx
    000005fb: 	leal	0x1b(%rax), %edx
    000005fe: 	movslq	%edx, %rdx
    00000601: 	movb	%cl, (%rbx,%rdx)
    00000604: 	leal	0x1c(%rax), %edx
    00000607: 	cmpl	%edx, %r12d
    0000060a: 	jle	.Ltmp667 # Offset: 1546
    0000060c: 	cvttsd2si	init_value(%rip), %edx
    00000614: 	addl	$0x1d, %eax
    00000617: 	cltq
    00000619: 	movb	%dl, (%rbx,%rax)
.Ltmp667:
    0000061c: 	addl	$0x1, 0x4(%rsp)
    00000621: 	movl	0x4(%rsp), %eax
    00000625: 	cmpl	%eax, iterations(%rip)
    0000062b: 	jg	.Ltmp670 # Offset: 1579
    00000631: 	movl	%r8d, %ebp
    00000634: 	movq	%r9, %r14
.Ltmp661:
    00000637: 	callq	clock@PLT # Offset: 1591
    0000063c: 	pxor	%xmm0, %xmm0
    00000640: 	movq	%r14, %rdi
    00000643: 	movq	%rax, end_time(%rip)
    0000064a: 	subq	start_time(%rip), %rax
    00000651: 	cvtsi2sd	%rax, %xmm0
    00000656: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000065e: 	callq	_Z13record_resultdPKc # Offset: 1630
    00000663: 	testl	%ebp, %ebp
    00000665: 	jle	.Ltmp671 # Offset: 1637
    0000066b: 	leal	-0x1(%rbp), %eax
    0000066e: 	cmpl	$0xe, %eax
    00000671: 	jbe	.Ltmp672 # Offset: 1649
    00000677: 	movl	%ebp, %edx
    00000679: 	movq	%rbx, %rax
    0000067c: 	pxor	%xmm0, %xmm0
    00000680: 	shrl	$0x4, %edx
    00000683: 	subl	$0x1, %edx
    00000686: 	shlq	$0x4, %rdx
    0000068a: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp673:
    0000068f: 	movdqu	(%rax), %xmm6
    00000693: 	addq	$0x10, %rax
    00000697: 	paddb	%xmm6, %xmm0
    0000069b: 	cmpq	%rdx, %rax
    0000069e: 	jne	.Ltmp673 # Offset: 1694
    000006a0: 	movdqa	%xmm0, %xmm1
    000006a4: 	movl	%ebp, %ecx
    000006a6: 	psrldq	$0x8, %xmm1
    000006ab: 	andl	$-0x10, %ecx
    000006ae: 	paddb	%xmm1, %xmm0
    000006b2: 	pxor	%xmm1, %xmm1
    000006b6: 	movl	%ecx, %edx
    000006b8: 	psadbw	%xmm1, %xmm0
    000006bc: 	movd	%xmm0, %eax
    000006c0: 	cmpl	%ebp, %ecx
    000006c2: 	je	.Ltmp674 # Offset: 1730
.Ltmp679:
    000006c8: 	movl	%ebp, %esi
    000006ca: 	subl	%ecx, %esi
    000006cc: 	leal	-0x1(%rsi), %edi
    000006cf: 	cmpl	$0x6, %edi
    000006d2: 	jbe	.Ltmp675 # Offset: 1746
    000006d4: 	movq	(%rbx,%rcx), %xmm1
    000006d9: 	pxor	%xmm0, %xmm0
    000006dd: 	movdqa	%xmm1, %xmm5
    000006e1: 	psadbw	%xmm0, %xmm5
    000006e5: 	movq	%xmm5, %rcx
    000006ea: 	movq	%xmm5, 0x18(%rsp)
    000006f0: 	movl	%ecx, %edi
    000006f2: 	movl	%esi, %ecx
    000006f4: 	andl	$-0x8, %ecx
    000006f7: 	addl	%edi, %eax
    000006f9: 	addl	%ecx, %edx
    000006fb: 	cmpl	%ecx, %esi
    000006fd: 	je	.Ltmp674 # Offset: 1789
.Ltmp675:
    000006ff: 	movslq	%edx, %rcx
    00000702: 	addb	(%rbx,%rcx), %al
    00000705: 	leal	0x1(%rdx), %ecx
    00000708: 	cmpl	%ecx, %ebp
    0000070a: 	jle	.Ltmp674 # Offset: 1802
    0000070c: 	movslq	%ecx, %rcx
    0000070f: 	addb	(%rbx,%rcx), %al
    00000712: 	leal	0x2(%rdx), %ecx
    00000715: 	cmpl	%ecx, %ebp
    00000717: 	jle	.Ltmp674 # Offset: 1815
    00000719: 	movslq	%ecx, %rcx
    0000071c: 	addb	(%rbx,%rcx), %al
    0000071f: 	leal	0x3(%rdx), %ecx
    00000722: 	cmpl	%ebp, %ecx
    00000724: 	jge	.Ltmp674 # Offset: 1828
    00000726: 	movslq	%ecx, %rcx
    00000729: 	addb	(%rbx,%rcx), %al
    0000072c: 	leal	0x4(%rdx), %ecx
    0000072f: 	cmpl	%ecx, %ebp
    00000731: 	jle	.Ltmp674 # Offset: 1841
    00000733: 	movslq	%ecx, %rcx
    00000736: 	addb	(%rbx,%rcx), %al
    00000739: 	leal	0x5(%rdx), %ecx
    0000073c: 	cmpl	%ecx, %ebp
    0000073e: 	jle	.Ltmp674 # Offset: 1854
    00000740: 	movslq	%ecx, %rcx
    00000743: 	addl	$0x6, %edx
    00000746: 	addb	(%rbx,%rcx), %al
    00000749: 	cmpl	%edx, %ebp
    0000074b: 	jle	.Ltmp674 # Offset: 1867
    0000074d: 	movslq	%edx, %rdx
    00000750: 	addb	(%rbx,%rdx), %al
.Ltmp674:
    00000753: 	testb	%al, %al
    00000755: 	jne	.Ltmp676 # Offset: 1877
.Ltmp671:
    00000757: 	addq	$0x208, %rsp
    0000075e: 	popq	%rbx
    0000075f: 	popq	%rbp
    00000760: 	popq	%r12
    00000762: 	popq	%r13
    00000764: 	popq	%r14
    00000766: 	popq	%r15
    00000768: 	retq # Offset: 1896
    00000769: 	nopl	(%rax) # Size: 7
.Ltmp663:
    00000770: 	cvttsd2si	init_value(%rip), %edx
    00000778: 	movb	%dl, 0x1(%rbx,%rsi)
    0000077c: 	addq	$0x2, %rsi
    00000780: 	cmpq	%rcx, %rsi
    00000783: 	jb	.Ltmp663 # Offset: 1923
    00000785: 	jmp	.Ltmp677 # Offset: 1925
.Ltmp668:
    0000078a: 	leaq	0x3(%rbx,%rdi), %rcx
    0000078f: 	leaq	(%rcx,%rdx,2), %rcx
.Ltmp678:
    00000793: 	cvttsd2si	init_value(%rip), %edx
    0000079b: 	addq	$0x2, %rax
    0000079f: 	movb	%dl, -0x2(%rax)
    000007a2: 	cmpq	%rcx, %rax
    000007a5: 	jne	.Ltmp678 # Offset: 1957
    000007a7: 	jmp	.Ltmp667 # Offset: 1959
.Ltmp676:
    000007ac: 	addq	$0x208, %rsp
    000007b3: 	movq	%r14, %rsi
    000007b6: 	movzbl	%al, %edi
    000007b9: 	popq	%rbx
    000007ba: 	popq	%rbp
    000007bb: 	popq	%r12
    000007bd: 	popq	%r13
    000007bf: 	popq	%r14
    000007c1: 	popq	%r15
    000007c3: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1987
.Ltmp672:
    000007c8: 	xorl	%ecx, %ecx
    000007ca: 	xorl	%edx, %edx
    000007cc: 	xorl	%eax, %eax
    000007ce: 	jmp	.Ltmp679 # Offset: 1998
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite2IhEvPT_iPKc"

Binary Function "_Z30test_for_loop_bzero_overwrite2IhEvPT_iPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x11bb0
  Size        : 0x734
  MaxSize     : 0x740
  Offset      : 0x11bb0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_bzero_overwrite2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x1c8, %rsp
    0000001a: 	movq	%rdx, 0x90(%rsp)
    00000022: 	callq	clock@PLT # Offset: 34
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	movl	iterations(%rip), %eax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp680 # Offset: 54
    0000003c: 	leal	-0x2(%rbx), %edx
    0000003f: 	leaq	0x1(%r15), %r8
    00000043: 	movslq	%ebx, %rbp
    00000046: 	movl	%edx, %esi
    00000048: 	movq	%r8, 0x8(%rsp)
    0000004d: 	leal	-0x1(%rbx), %r12d
    00000051: 	shrl	%esi
    00000053: 	leal	0x1(%rsi), %eax
    00000056: 	leaq	(%r15,%rax,2), %rdi
    0000005a: 	movl	%eax, 0x14(%rsp)
    0000005e: 	movq	%rax, %rcx
    00000061: 	leaq	init_value(%rip), %rax
    00000068: 	cmpq	%rax, %rdi
    0000006b: 	leaq	iterations(%rip), %rdi
    00000072: 	setbe	%al
    00000075: 	cmpq	%rdi, %r8
    00000078: 	setae	%dil
    0000007c: 	orb	%dil, %al
    0000007f: 	je	.Ltmp681 # Offset: 127
    00000085: 	cmpl	$0x1d, %edx
    00000088: 	jbe	.Ltmp681 # Offset: 136
    0000008e: 	movl	%ecx, %eax
    00000090: 	andl	$-0x10, %ecx
    00000093: 	movl	%ebx, 0xc4(%rsp)
    0000009a: 	shrl	$0x4, %eax
    0000009d: 	movl	%ecx, 0x18(%rsp)
    000000a1: 	subl	$0x1, %eax
    000000a4: 	shlq	$0x5, %rax
    000000a8: 	leaq	0x21(%r15,%rax), %r13
    000000ad: 	leal	(%rcx,%rcx), %eax
    000000b0: 	leal	0x3(%rax), %edx
    000000b3: 	leal	0x2(%rax), %edi
    000000b6: 	movslq	%edx, %rdx
    000000b9: 	movl	%edi, 0x1c(%rsp)
    000000bd: 	leal	0x4(%rax), %edi
    000000c0: 	leal	0x1(%rax), %r14d
    000000c4: 	leaq	(%r15,%rdx), %rcx
    000000c8: 	leal	0x5(%rax), %edx
    000000cb: 	movl	%edi, 0x28(%rsp)
    000000cf: 	movslq	%r14d, %r14
    000000d2: 	movslq	%edx, %rdx
    000000d5: 	leaq	(%r15,%r14), %rsi
    000000d9: 	xorl	%r14d, %r14d
    000000dc: 	leaq	(%r15,%rdx), %rdi
    000000e0: 	leal	0x7(%rax), %edx
    000000e3: 	movl	%r14d, %ebx
    000000e6: 	movq	%rsi, %r14
    000000e9: 	movslq	%edx, %rdx
    000000ec: 	movq	%rdi, 0x20(%rsp)
    000000f1: 	leal	0x6(%rax), %edi
    000000f4: 	movl	%edi, 0x2c(%rsp)
    000000f8: 	leaq	(%r15,%rdx), %rdi
    000000fc: 	leal	0x9(%rax), %edx
    000000ff: 	movslq	%edx, %rdx
    00000102: 	movq	%rdi, 0x30(%rsp)
    00000107: 	leal	0x8(%rax), %edi
    0000010a: 	movl	%edi, 0x40(%rsp)
    0000010e: 	leaq	(%r15,%rdx), %rdi
    00000112: 	leal	0xb(%rax), %edx
    00000115: 	movslq	%edx, %rdx
    00000118: 	movq	%rdi, 0x38(%rsp)
    0000011d: 	leal	0xa(%rax), %edi
    00000120: 	movl	%edi, 0x44(%rsp)
    00000124: 	leaq	(%r15,%rdx), %rdi
    00000128: 	leal	0xd(%rax), %edx
    0000012b: 	movslq	%edx, %rdx
    0000012e: 	movq	%rdi, 0x48(%rsp)
    00000133: 	leal	0xc(%rax), %edi
    00000136: 	movl	%edi, 0x58(%rsp)
    0000013a: 	leaq	(%r15,%rdx), %rdi
    0000013e: 	leal	0xf(%rax), %edx
    00000141: 	movslq	%edx, %rdx
    00000144: 	movq	%rdi, 0x50(%rsp)
    00000149: 	leal	0xe(%rax), %edi
    0000014c: 	movl	%edi, 0x5c(%rsp)
    00000150: 	leaq	(%r15,%rdx), %rdi
    00000154: 	leal	0x11(%rax), %edx
    00000157: 	movslq	%edx, %rdx
    0000015a: 	movq	%rdi, 0x60(%rsp)
    0000015f: 	leal	0x10(%rax), %edi
    00000162: 	movl	%edi, 0x70(%rsp)
    00000166: 	leaq	(%r15,%rdx), %rdi
    0000016a: 	leal	0x13(%rax), %edx
    0000016d: 	movslq	%edx, %rdx
    00000170: 	movq	%rdi, 0x68(%rsp)
    00000175: 	leal	0x12(%rax), %edi
    00000178: 	movl	%edi, 0x74(%rsp)
    0000017c: 	leaq	(%r15,%rdx), %rdi
    00000180: 	leal	0x15(%rax), %edx
    00000183: 	movslq	%edx, %rdx
    00000186: 	movq	%rdi, 0x78(%rsp)
    0000018b: 	leal	0x14(%rax), %edi
    0000018e: 	movl	%edi, 0x88(%rsp)
    00000195: 	leaq	(%r15,%rdx), %rdi
    00000199: 	leal	0x17(%rax), %edx
    0000019c: 	movslq	%edx, %rdx
    0000019f: 	movq	%rdi, 0x80(%rsp)
    000001a7: 	leal	0x16(%rax), %edi
    000001aa: 	movl	%edi, 0x8c(%rsp)
    000001b1: 	leaq	(%r15,%rdx), %rdi
    000001b5: 	leal	0x19(%rax), %edx
    000001b8: 	movslq	%edx, %rdx
    000001bb: 	movq	%rdi, 0x98(%rsp)
    000001c3: 	leal	0x18(%rax), %edi
    000001c6: 	movl	%edi, 0xa8(%rsp)
    000001cd: 	leaq	(%r15,%rdx), %rdi
    000001d1: 	leal	0x1b(%rax), %edx
    000001d4: 	movq	%rdi, 0xa0(%rsp)
    000001dc: 	movslq	%edx, %rdx
    000001df: 	leal	0x1a(%rax), %edi
    000001e2: 	movl	%edi, 0xac(%rsp)
    000001e9: 	leaq	(%r15,%rdx), %rdi
    000001ed: 	movq	%rdi, 0xb0(%rsp)
    000001f5: 	leal	0x1c(%rax), %edi
    000001f8: 	addl	$0x1d, %eax
    000001fb: 	cltq
    000001fd: 	movl	%edi, 0xc0(%rsp)
    00000204: 	movq	%r15, %rdi
    00000207: 	addq	%r15, %rax
    0000020a: 	movq	%rcx, %r15
    0000020d: 	movq	%rax, 0xb8(%rsp)
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp684:
    00000218: 	xorl	%esi, %esi
    0000021a: 	movq	%rbp, %rdx
    0000021d: 	callq	memset@PLT # Offset: 541
    00000222: 	testl	%r12d, %r12d
    00000225: 	movdqa	DATAat0x36f20(%rip), %xmm4
    0000022d: 	movq	%rax, %rdi
    00000230: 	jle	.Ltmp682 # Offset: 560
    00000236: 	movsd	init_value(%rip), %xmm1
    0000023e: 	movq	0x8(%rsp), %rax
    00000243: 	unpcklpd	%xmm1, %xmm1
    00000247: 	cvttpd2dq	%xmm1, %xmm1
    0000024b: 	punpcklqdq	%xmm1, %xmm1
    0000024f: 	movdqa	%xmm1, %xmm2
    00000253: 	punpckhwd	%xmm1, %xmm2
    00000257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp683:
    00000260: 	movdqa	%xmm1, %xmm0
    00000264: 	addq	$0x20, %rax
    00000268: 	punpcklwd	%xmm1, %xmm0
    0000026c: 	movdqa	%xmm0, %xmm3
    00000270: 	punpcklwd	%xmm2, %xmm0
    00000274: 	punpckhwd	%xmm2, %xmm3
    00000278: 	punpcklwd	%xmm3, %xmm0
    0000027c: 	pand	%xmm4, %xmm0
    00000280: 	packuswb	%xmm0, %xmm0
    00000284: 	movd	%xmm0, %edx
    00000288: 	movb	%dl, -0x20(%rax)
    0000028b: 	movaps	%xmm0, 0x1b0(%rsp)
    00000293: 	movzbl	0x1b1(%rsp), %edx
    0000029b: 	movb	%dl, -0x1e(%rax)
    0000029e: 	movaps	%xmm0, 0x1a0(%rsp)
    000002a6: 	movzbl	0x1a2(%rsp), %edx
    000002ae: 	movb	%dl, -0x1c(%rax)
    000002b1: 	movaps	%xmm0, 0x190(%rsp)
    000002b9: 	movzbl	0x193(%rsp), %edx
    000002c1: 	movb	%dl, -0x1a(%rax)
    000002c4: 	movaps	%xmm0, 0x180(%rsp)
    000002cc: 	movzbl	0x184(%rsp), %edx
    000002d4: 	movb	%dl, -0x18(%rax)
    000002d7: 	movaps	%xmm0, 0x170(%rsp)
    000002df: 	movzbl	0x175(%rsp), %edx
    000002e7: 	movb	%dl, -0x16(%rax)
    000002ea: 	movaps	%xmm0, 0x160(%rsp)
    000002f2: 	movzbl	0x166(%rsp), %edx
    000002fa: 	movb	%dl, -0x14(%rax)
    000002fd: 	movaps	%xmm0, 0x150(%rsp)
    00000305: 	movzbl	0x157(%rsp), %edx
    0000030d: 	movb	%dl, -0x12(%rax)
    00000310: 	movaps	%xmm0, 0x140(%rsp)
    00000318: 	movzbl	0x148(%rsp), %edx
    00000320: 	movb	%dl, -0x10(%rax)
    00000323: 	movaps	%xmm0, 0x130(%rsp)
    0000032b: 	movzbl	0x139(%rsp), %edx
    00000333: 	movb	%dl, -0xe(%rax)
    00000336: 	movaps	%xmm0, 0x120(%rsp)
    0000033e: 	movzbl	0x12a(%rsp), %edx
    00000346: 	movb	%dl, -0xc(%rax)
    00000349: 	movaps	%xmm0, 0x110(%rsp)
    00000351: 	movzbl	0x11b(%rsp), %edx
    00000359: 	movb	%dl, -0xa(%rax)
    0000035c: 	movaps	%xmm0, 0x100(%rsp)
    00000364: 	movzbl	0x10c(%rsp), %edx
    0000036c: 	movb	%dl, -0x8(%rax)
    0000036f: 	movaps	%xmm0, 0xf0(%rsp)
    00000377: 	movzbl	0xfd(%rsp), %edx
    0000037f: 	movb	%dl, -0x6(%rax)
    00000382: 	movaps	%xmm0, 0xe0(%rsp)
    0000038a: 	movzbl	0xee(%rsp), %edx
    00000392: 	movb	%dl, -0x4(%rax)
    00000395: 	movaps	%xmm0, 0xd0(%rsp)
    0000039d: 	movzbl	0xdf(%rsp), %edx
    000003a5: 	movb	%dl, -0x2(%rax)
    000003a8: 	cmpq	%r13, %rax
    000003ab: 	jne	.Ltmp683 # Offset: 939
    000003b1: 	movl	0x18(%rsp), %esi
    000003b5: 	cmpl	%esi, 0x14(%rsp)
    000003b9: 	je	.Ltmp682 # Offset: 953
    000003bf: 	cvttsd2si	init_value(%rip), %eax
    000003c7: 	movb	%al, (%r14)
    000003ca: 	cmpl	0x1c(%rsp), %r12d
    000003cf: 	jle	.Ltmp682 # Offset: 975
    000003d5: 	cvttsd2si	init_value(%rip), %eax
    000003dd: 	movb	%al, (%r15)
    000003e0: 	cmpl	0x28(%rsp), %r12d
    000003e5: 	jle	.Ltmp682 # Offset: 997
    000003eb: 	cvttsd2si	init_value(%rip), %eax
    000003f3: 	movq	0x20(%rsp), %rsi
    000003f8: 	movb	%al, (%rsi)
    000003fa: 	cmpl	0x2c(%rsp), %r12d
    000003ff: 	jle	.Ltmp682 # Offset: 1023
    00000405: 	cvttsd2si	init_value(%rip), %eax
    0000040d: 	movq	0x30(%rsp), %rcx
    00000412: 	movb	%al, (%rcx)
    00000414: 	cmpl	0x40(%rsp), %r12d
    00000419: 	jle	.Ltmp682 # Offset: 1049
    0000041f: 	cvttsd2si	init_value(%rip), %eax
    00000427: 	movq	0x38(%rsp), %rsi
    0000042c: 	movb	%al, (%rsi)
    0000042e: 	cmpl	0x44(%rsp), %r12d
    00000433: 	jle	.Ltmp682 # Offset: 1075
    00000439: 	cvttsd2si	init_value(%rip), %eax
    00000441: 	movq	0x48(%rsp), %rcx
    00000446: 	movb	%al, (%rcx)
    00000448: 	cmpl	0x58(%rsp), %r12d
    0000044d: 	jle	.Ltmp682 # Offset: 1101
    00000453: 	cvttsd2si	init_value(%rip), %eax
    0000045b: 	movq	0x50(%rsp), %rsi
    00000460: 	movb	%al, (%rsi)
    00000462: 	cmpl	0x5c(%rsp), %r12d
    00000467: 	jle	.Ltmp682 # Offset: 1127
    0000046d: 	cvttsd2si	init_value(%rip), %eax
    00000475: 	movq	0x60(%rsp), %rsi
    0000047a: 	movb	%al, (%rsi)
    0000047c: 	cmpl	0x70(%rsp), %r12d
    00000481: 	jle	.Ltmp682 # Offset: 1153
    00000487: 	cvttsd2si	init_value(%rip), %eax
    0000048f: 	movq	0x68(%rsp), %rsi
    00000494: 	movb	%al, (%rsi)
    00000496: 	cmpl	0x74(%rsp), %r12d
    0000049b: 	jle	.Ltmp682 # Offset: 1179
    000004a1: 	cvttsd2si	init_value(%rip), %eax
    000004a9: 	movq	0x78(%rsp), %rsi
    000004ae: 	movb	%al, (%rsi)
    000004b0: 	cmpl	0x88(%rsp), %r12d
    000004b8: 	jle	.Ltmp682 # Offset: 1208
    000004be: 	cvttsd2si	init_value(%rip), %eax
    000004c6: 	movq	0x80(%rsp), %rsi
    000004ce: 	movb	%al, (%rsi)
    000004d0: 	cmpl	0x8c(%rsp), %r12d
    000004d8: 	jle	.Ltmp682 # Offset: 1240
    000004da: 	cvttsd2si	init_value(%rip), %eax
    000004e2: 	movq	0x98(%rsp), %rsi
    000004ea: 	movb	%al, (%rsi)
    000004ec: 	cmpl	0xa8(%rsp), %r12d
    000004f4: 	jle	.Ltmp682 # Offset: 1268
    000004f6: 	cvttsd2si	init_value(%rip), %eax
    000004fe: 	movq	0xa0(%rsp), %rcx
    00000506: 	movb	%al, (%rcx)
    00000508: 	cmpl	0xac(%rsp), %r12d
    00000510: 	jle	.Ltmp682 # Offset: 1296
    00000512: 	cvttsd2si	init_value(%rip), %eax
    0000051a: 	movq	0xb0(%rsp), %rcx
    00000522: 	movb	%al, (%rcx)
    00000524: 	cmpl	0xc0(%rsp), %r12d
    0000052c: 	jle	.Ltmp682 # Offset: 1324
    0000052e: 	cvttsd2si	init_value(%rip), %eax
    00000536: 	movq	0xb8(%rsp), %rsi
    0000053e: 	movb	%al, (%rsi)
.Ltmp682:
    00000540: 	addl	$0x1, %ebx
    00000543: 	cmpl	%ebx, iterations(%rip)
    00000549: 	jg	.Ltmp684 # Offset: 1353
    0000054f: 	movl	0xc4(%rsp), %ebx
    00000556: 	movq	%rdi, %r15
.Ltmp680:
    00000559: 	callq	clock@PLT # Offset: 1369
    0000055e: 	movq	0x90(%rsp), %rdi
    00000566: 	pxor	%xmm0, %xmm0
    0000056a: 	movq	%rax, end_time(%rip)
    00000571: 	subq	start_time(%rip), %rax
    00000578: 	cvtsi2sd	%rax, %xmm0
    0000057d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000585: 	callq	_Z13record_resultdPKc # Offset: 1413
    0000058a: 	testl	%ebx, %ebx
    0000058c: 	jle	.Ltmp685 # Offset: 1420
    00000592: 	leal	-0x1(%rbx), %eax
    00000595: 	cmpl	$0xe, %eax
    00000598: 	jbe	.Ltmp686 # Offset: 1432
    0000059e: 	movl	%ebx, %edx
    000005a0: 	movq	%r15, %rax
    000005a3: 	pxor	%xmm0, %xmm0
    000005a7: 	shrl	$0x4, %edx
    000005aa: 	subl	$0x1, %edx
    000005ad: 	shlq	$0x4, %rdx
    000005b1: 	leaq	0x10(%r15,%rdx), %rdx
    000005b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp687:
    000005c0: 	movdqu	(%rax), %xmm5
    000005c4: 	addq	$0x10, %rax
    000005c8: 	paddb	%xmm5, %xmm0
    000005cc: 	cmpq	%rax, %rdx
    000005cf: 	jne	.Ltmp687 # Offset: 1487
    000005d1: 	movdqa	%xmm0, %xmm1
    000005d5: 	movl	%ebx, %ecx
    000005d7: 	psrldq	$0x8, %xmm1
    000005dc: 	andl	$-0x10, %ecx
    000005df: 	paddb	%xmm1, %xmm0
    000005e3: 	pxor	%xmm1, %xmm1
    000005e7: 	movl	%ecx, %edx
    000005e9: 	psadbw	%xmm1, %xmm0
    000005ed: 	movd	%xmm0, %eax
    000005f1: 	cmpl	%ebx, %ecx
    000005f3: 	je	.Ltmp688 # Offset: 1523
.Ltmp694:
    000005f9: 	movl	%ebx, %esi
    000005fb: 	subl	%ecx, %esi
    000005fd: 	leal	-0x1(%rsi), %edi
    00000600: 	cmpl	$0x6, %edi
    00000603: 	jbe	.Ltmp689 # Offset: 1539
    00000605: 	movq	(%r15,%rcx), %xmm1
    0000060b: 	pxor	%xmm0, %xmm0
    0000060f: 	movdqa	%xmm1, %xmm6
    00000613: 	psadbw	%xmm0, %xmm6
    00000617: 	movq	%xmm6, 0xc8(%rsp)
    00000620: 	movq	%xmm6, %rcx
    00000625: 	movl	%ecx, %edi
    00000627: 	movl	%esi, %ecx
    00000629: 	andl	$-0x8, %ecx
    0000062c: 	addl	%edi, %eax
    0000062e: 	addl	%ecx, %edx
    00000630: 	cmpl	%ecx, %esi
    00000632: 	je	.Ltmp688 # Offset: 1586
.Ltmp689:
    00000634: 	movslq	%edx, %rcx
    00000637: 	addb	(%r15,%rcx), %al
    0000063b: 	leal	0x1(%rdx), %ecx
    0000063e: 	cmpl	%ecx, %ebx
    00000640: 	jle	.Ltmp688 # Offset: 1600
    00000642: 	movslq	%ecx, %rcx
    00000645: 	addb	(%r15,%rcx), %al
    00000649: 	leal	0x2(%rdx), %ecx
    0000064c: 	cmpl	%ecx, %ebx
    0000064e: 	jle	.Ltmp688 # Offset: 1614
    00000650: 	movslq	%ecx, %rcx
    00000653: 	addb	(%r15,%rcx), %al
    00000657: 	leal	0x3(%rdx), %ecx
    0000065a: 	cmpl	%ecx, %ebx
    0000065c: 	jle	.Ltmp688 # Offset: 1628
    0000065e: 	movslq	%ecx, %rcx
    00000661: 	addb	(%r15,%rcx), %al
    00000665: 	leal	0x4(%rdx), %ecx
    00000668: 	cmpl	%ecx, %ebx
    0000066a: 	jle	.Ltmp688 # Offset: 1642
    0000066c: 	movslq	%ecx, %rcx
    0000066f: 	addb	(%r15,%rcx), %al
    00000673: 	leal	0x5(%rdx), %ecx
    00000676: 	cmpl	%ecx, %ebx
    00000678: 	jle	.Ltmp688 # Offset: 1656
    0000067a: 	movslq	%ecx, %rcx
    0000067d: 	addl	$0x6, %edx
    00000680: 	addb	(%r15,%rcx), %al
    00000684: 	cmpl	%edx, %ebx
    00000686: 	jle	.Ltmp688 # Offset: 1670
    00000688: 	movslq	%edx, %rdx
    0000068b: 	addb	(%r15,%rdx), %al
.Ltmp688:
    0000068f: 	testb	%al, %al
    00000691: 	jne	.Ltmp690 # Offset: 1681
.Ltmp685:
    00000693: 	addq	$0x1c8, %rsp
    0000069a: 	popq	%rbx
    0000069b: 	popq	%rbp
    0000069c: 	popq	%r12
    0000069e: 	popq	%r13
    000006a0: 	popq	%r14
    000006a2: 	popq	%r15
    000006a4: 	retq # Offset: 1700
.Ltmp690:
    000006a5: 	movq	0x90(%rsp), %rsi
    000006ad: 	addq	$0x1c8, %rsp
    000006b4: 	movzbl	%al, %edi
    000006b7: 	popq	%rbx
    000006b8: 	popq	%rbp
    000006b9: 	popq	%r12
    000006bb: 	popq	%r13
    000006bd: 	popq	%r14
    000006bf: 	popq	%r15
    000006c1: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1729
.Ltmp681:
    000006c6: 	leaq	0x3(%r15,%rsi,2), %r13
    000006cb: 	xorl	%r14d, %r14d
    000006ce: 	movq	%r15, %rcx
    000006d1: 	movl	%r14d, %r15d
    000006d4: 	movq	%r13, %r14
    000006d7: 	movq	0x8(%rsp), %r13
    000006dc: 	nopl	(%rax) # Size: 4
.Ltmp693:
    000006e0: 	movq	%rcx, %rdi
    000006e3: 	movq	%rbp, %rdx
    000006e6: 	xorl	%esi, %esi
    000006e8: 	callq	memset@PLT # Offset: 1768
    000006ed: 	movq	%rax, %rcx
    000006f0: 	testl	%r12d, %r12d
    000006f3: 	jle	.Ltmp691 # Offset: 1779
    000006f5: 	movq	%r13, %rax
    000006f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp692:
    00000700: 	cvttsd2si	init_value(%rip), %edx
    00000708: 	addq	$0x2, %rax
    0000070c: 	movb	%dl, -0x2(%rax)
    0000070f: 	cmpq	%r14, %rax
    00000712: 	jne	.Ltmp692 # Offset: 1810
.Ltmp691:
    00000714: 	addl	$0x1, %r15d
    00000718: 	cmpl	iterations(%rip), %r15d
    0000071f: 	jl	.Ltmp693 # Offset: 1823
    00000721: 	movq	%rcx, %r15
    00000724: 	jmp	.Ltmp680 # Offset: 1828
.Ltmp686:
    00000729: 	xorl	%ecx, %ecx
    0000072b: 	xorl	%eax, %eax
    0000072d: 	xorl	%edx, %edx
    0000072f: 	jmp	.Ltmp694 # Offset: 1839
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_bzero_overwrite2IhEvPT_iPKc"

Binary Function "_Z31test_for_loop_memset_overwrite2IhEvPT_iPKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x122f0
  Size        : 0x734
  MaxSize     : 0x740
  Offset      : 0x122f0
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_memset_overwrite2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x1c8, %rsp
    0000001a: 	movq	%rdx, 0x90(%rsp)
    00000022: 	callq	clock@PLT # Offset: 34
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	movl	iterations(%rip), %eax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp695 # Offset: 54
    0000003c: 	leal	-0x2(%rbx), %edx
    0000003f: 	leaq	0x1(%r15), %r8
    00000043: 	movslq	%ebx, %rbp
    00000046: 	movl	%edx, %esi
    00000048: 	movq	%r8, 0x8(%rsp)
    0000004d: 	leal	-0x1(%rbx), %r12d
    00000051: 	shrl	%esi
    00000053: 	leal	0x1(%rsi), %eax
    00000056: 	leaq	(%r15,%rax,2), %rdi
    0000005a: 	movl	%eax, 0x14(%rsp)
    0000005e: 	movq	%rax, %rcx
    00000061: 	leaq	init_value(%rip), %rax
    00000068: 	cmpq	%rax, %rdi
    0000006b: 	leaq	iterations(%rip), %rdi
    00000072: 	setbe	%al
    00000075: 	cmpq	%rdi, %r8
    00000078: 	setae	%dil
    0000007c: 	orb	%dil, %al
    0000007f: 	je	.Ltmp696 # Offset: 127
    00000085: 	cmpl	$0x1d, %edx
    00000088: 	jbe	.Ltmp696 # Offset: 136
    0000008e: 	movl	%ecx, %eax
    00000090: 	andl	$-0x10, %ecx
    00000093: 	movl	%ebx, 0xc4(%rsp)
    0000009a: 	shrl	$0x4, %eax
    0000009d: 	movl	%ecx, 0x18(%rsp)
    000000a1: 	subl	$0x1, %eax
    000000a4: 	shlq	$0x5, %rax
    000000a8: 	leaq	0x21(%r15,%rax), %r13
    000000ad: 	leal	(%rcx,%rcx), %eax
    000000b0: 	leal	0x3(%rax), %edx
    000000b3: 	leal	0x2(%rax), %edi
    000000b6: 	movslq	%edx, %rdx
    000000b9: 	movl	%edi, 0x1c(%rsp)
    000000bd: 	leal	0x4(%rax), %edi
    000000c0: 	leal	0x1(%rax), %r14d
    000000c4: 	leaq	(%r15,%rdx), %rcx
    000000c8: 	leal	0x5(%rax), %edx
    000000cb: 	movl	%edi, 0x28(%rsp)
    000000cf: 	movslq	%r14d, %r14
    000000d2: 	movslq	%edx, %rdx
    000000d5: 	leaq	(%r15,%r14), %rsi
    000000d9: 	xorl	%r14d, %r14d
    000000dc: 	leaq	(%r15,%rdx), %rdi
    000000e0: 	leal	0x7(%rax), %edx
    000000e3: 	movl	%r14d, %ebx
    000000e6: 	movq	%rsi, %r14
    000000e9: 	movslq	%edx, %rdx
    000000ec: 	movq	%rdi, 0x20(%rsp)
    000000f1: 	leal	0x6(%rax), %edi
    000000f4: 	movl	%edi, 0x2c(%rsp)
    000000f8: 	leaq	(%r15,%rdx), %rdi
    000000fc: 	leal	0x9(%rax), %edx
    000000ff: 	movslq	%edx, %rdx
    00000102: 	movq	%rdi, 0x30(%rsp)
    00000107: 	leal	0x8(%rax), %edi
    0000010a: 	movl	%edi, 0x40(%rsp)
    0000010e: 	leaq	(%r15,%rdx), %rdi
    00000112: 	leal	0xb(%rax), %edx
    00000115: 	movslq	%edx, %rdx
    00000118: 	movq	%rdi, 0x38(%rsp)
    0000011d: 	leal	0xa(%rax), %edi
    00000120: 	movl	%edi, 0x44(%rsp)
    00000124: 	leaq	(%r15,%rdx), %rdi
    00000128: 	leal	0xd(%rax), %edx
    0000012b: 	movslq	%edx, %rdx
    0000012e: 	movq	%rdi, 0x48(%rsp)
    00000133: 	leal	0xc(%rax), %edi
    00000136: 	movl	%edi, 0x58(%rsp)
    0000013a: 	leaq	(%r15,%rdx), %rdi
    0000013e: 	leal	0xf(%rax), %edx
    00000141: 	movslq	%edx, %rdx
    00000144: 	movq	%rdi, 0x50(%rsp)
    00000149: 	leal	0xe(%rax), %edi
    0000014c: 	movl	%edi, 0x5c(%rsp)
    00000150: 	leaq	(%r15,%rdx), %rdi
    00000154: 	leal	0x11(%rax), %edx
    00000157: 	movslq	%edx, %rdx
    0000015a: 	movq	%rdi, 0x60(%rsp)
    0000015f: 	leal	0x10(%rax), %edi
    00000162: 	movl	%edi, 0x70(%rsp)
    00000166: 	leaq	(%r15,%rdx), %rdi
    0000016a: 	leal	0x13(%rax), %edx
    0000016d: 	movslq	%edx, %rdx
    00000170: 	movq	%rdi, 0x68(%rsp)
    00000175: 	leal	0x12(%rax), %edi
    00000178: 	movl	%edi, 0x74(%rsp)
    0000017c: 	leaq	(%r15,%rdx), %rdi
    00000180: 	leal	0x15(%rax), %edx
    00000183: 	movslq	%edx, %rdx
    00000186: 	movq	%rdi, 0x78(%rsp)
    0000018b: 	leal	0x14(%rax), %edi
    0000018e: 	movl	%edi, 0x88(%rsp)
    00000195: 	leaq	(%r15,%rdx), %rdi
    00000199: 	leal	0x17(%rax), %edx
    0000019c: 	movslq	%edx, %rdx
    0000019f: 	movq	%rdi, 0x80(%rsp)
    000001a7: 	leal	0x16(%rax), %edi
    000001aa: 	movl	%edi, 0x8c(%rsp)
    000001b1: 	leaq	(%r15,%rdx), %rdi
    000001b5: 	leal	0x19(%rax), %edx
    000001b8: 	movslq	%edx, %rdx
    000001bb: 	movq	%rdi, 0x98(%rsp)
    000001c3: 	leal	0x18(%rax), %edi
    000001c6: 	movl	%edi, 0xa8(%rsp)
    000001cd: 	leaq	(%r15,%rdx), %rdi
    000001d1: 	leal	0x1b(%rax), %edx
    000001d4: 	movq	%rdi, 0xa0(%rsp)
    000001dc: 	movslq	%edx, %rdx
    000001df: 	leal	0x1a(%rax), %edi
    000001e2: 	movl	%edi, 0xac(%rsp)
    000001e9: 	leaq	(%r15,%rdx), %rdi
    000001ed: 	movq	%rdi, 0xb0(%rsp)
    000001f5: 	leal	0x1c(%rax), %edi
    000001f8: 	addl	$0x1d, %eax
    000001fb: 	cltq
    000001fd: 	movl	%edi, 0xc0(%rsp)
    00000204: 	movq	%r15, %rdi
    00000207: 	addq	%r15, %rax
    0000020a: 	movq	%rcx, %r15
    0000020d: 	movq	%rax, 0xb8(%rsp)
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp699:
    00000218: 	xorl	%esi, %esi
    0000021a: 	movq	%rbp, %rdx
    0000021d: 	callq	memset@PLT # Offset: 541
    00000222: 	testl	%r12d, %r12d
    00000225: 	movdqa	DATAat0x36f20(%rip), %xmm4
    0000022d: 	movq	%rax, %rdi
    00000230: 	jle	.Ltmp697 # Offset: 560
    00000236: 	movsd	init_value(%rip), %xmm1
    0000023e: 	movq	0x8(%rsp), %rax
    00000243: 	unpcklpd	%xmm1, %xmm1
    00000247: 	cvttpd2dq	%xmm1, %xmm1
    0000024b: 	punpcklqdq	%xmm1, %xmm1
    0000024f: 	movdqa	%xmm1, %xmm2
    00000253: 	punpckhwd	%xmm1, %xmm2
    00000257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp698:
    00000260: 	movdqa	%xmm1, %xmm0
    00000264: 	addq	$0x20, %rax
    00000268: 	punpcklwd	%xmm1, %xmm0
    0000026c: 	movdqa	%xmm0, %xmm3
    00000270: 	punpcklwd	%xmm2, %xmm0
    00000274: 	punpckhwd	%xmm2, %xmm3
    00000278: 	punpcklwd	%xmm3, %xmm0
    0000027c: 	pand	%xmm4, %xmm0
    00000280: 	packuswb	%xmm0, %xmm0
    00000284: 	movd	%xmm0, %edx
    00000288: 	movb	%dl, -0x20(%rax)
    0000028b: 	movaps	%xmm0, 0x1b0(%rsp)
    00000293: 	movzbl	0x1b1(%rsp), %edx
    0000029b: 	movb	%dl, -0x1e(%rax)
    0000029e: 	movaps	%xmm0, 0x1a0(%rsp)
    000002a6: 	movzbl	0x1a2(%rsp), %edx
    000002ae: 	movb	%dl, -0x1c(%rax)
    000002b1: 	movaps	%xmm0, 0x190(%rsp)
    000002b9: 	movzbl	0x193(%rsp), %edx
    000002c1: 	movb	%dl, -0x1a(%rax)
    000002c4: 	movaps	%xmm0, 0x180(%rsp)
    000002cc: 	movzbl	0x184(%rsp), %edx
    000002d4: 	movb	%dl, -0x18(%rax)
    000002d7: 	movaps	%xmm0, 0x170(%rsp)
    000002df: 	movzbl	0x175(%rsp), %edx
    000002e7: 	movb	%dl, -0x16(%rax)
    000002ea: 	movaps	%xmm0, 0x160(%rsp)
    000002f2: 	movzbl	0x166(%rsp), %edx
    000002fa: 	movb	%dl, -0x14(%rax)
    000002fd: 	movaps	%xmm0, 0x150(%rsp)
    00000305: 	movzbl	0x157(%rsp), %edx
    0000030d: 	movb	%dl, -0x12(%rax)
    00000310: 	movaps	%xmm0, 0x140(%rsp)
    00000318: 	movzbl	0x148(%rsp), %edx
    00000320: 	movb	%dl, -0x10(%rax)
    00000323: 	movaps	%xmm0, 0x130(%rsp)
    0000032b: 	movzbl	0x139(%rsp), %edx
    00000333: 	movb	%dl, -0xe(%rax)
    00000336: 	movaps	%xmm0, 0x120(%rsp)
    0000033e: 	movzbl	0x12a(%rsp), %edx
    00000346: 	movb	%dl, -0xc(%rax)
    00000349: 	movaps	%xmm0, 0x110(%rsp)
    00000351: 	movzbl	0x11b(%rsp), %edx
    00000359: 	movb	%dl, -0xa(%rax)
    0000035c: 	movaps	%xmm0, 0x100(%rsp)
    00000364: 	movzbl	0x10c(%rsp), %edx
    0000036c: 	movb	%dl, -0x8(%rax)
    0000036f: 	movaps	%xmm0, 0xf0(%rsp)
    00000377: 	movzbl	0xfd(%rsp), %edx
    0000037f: 	movb	%dl, -0x6(%rax)
    00000382: 	movaps	%xmm0, 0xe0(%rsp)
    0000038a: 	movzbl	0xee(%rsp), %edx
    00000392: 	movb	%dl, -0x4(%rax)
    00000395: 	movaps	%xmm0, 0xd0(%rsp)
    0000039d: 	movzbl	0xdf(%rsp), %edx
    000003a5: 	movb	%dl, -0x2(%rax)
    000003a8: 	cmpq	%r13, %rax
    000003ab: 	jne	.Ltmp698 # Offset: 939
    000003b1: 	movl	0x18(%rsp), %esi
    000003b5: 	cmpl	%esi, 0x14(%rsp)
    000003b9: 	je	.Ltmp697 # Offset: 953
    000003bf: 	cvttsd2si	init_value(%rip), %eax
    000003c7: 	movb	%al, (%r14)
    000003ca: 	cmpl	0x1c(%rsp), %r12d
    000003cf: 	jle	.Ltmp697 # Offset: 975
    000003d5: 	cvttsd2si	init_value(%rip), %eax
    000003dd: 	movb	%al, (%r15)
    000003e0: 	cmpl	0x28(%rsp), %r12d
    000003e5: 	jle	.Ltmp697 # Offset: 997
    000003eb: 	cvttsd2si	init_value(%rip), %eax
    000003f3: 	movq	0x20(%rsp), %rsi
    000003f8: 	movb	%al, (%rsi)
    000003fa: 	cmpl	0x2c(%rsp), %r12d
    000003ff: 	jle	.Ltmp697 # Offset: 1023
    00000405: 	cvttsd2si	init_value(%rip), %eax
    0000040d: 	movq	0x30(%rsp), %rcx
    00000412: 	movb	%al, (%rcx)
    00000414: 	cmpl	0x40(%rsp), %r12d
    00000419: 	jle	.Ltmp697 # Offset: 1049
    0000041f: 	cvttsd2si	init_value(%rip), %eax
    00000427: 	movq	0x38(%rsp), %rsi
    0000042c: 	movb	%al, (%rsi)
    0000042e: 	cmpl	0x44(%rsp), %r12d
    00000433: 	jle	.Ltmp697 # Offset: 1075
    00000439: 	cvttsd2si	init_value(%rip), %eax
    00000441: 	movq	0x48(%rsp), %rcx
    00000446: 	movb	%al, (%rcx)
    00000448: 	cmpl	0x58(%rsp), %r12d
    0000044d: 	jle	.Ltmp697 # Offset: 1101
    00000453: 	cvttsd2si	init_value(%rip), %eax
    0000045b: 	movq	0x50(%rsp), %rsi
    00000460: 	movb	%al, (%rsi)
    00000462: 	cmpl	0x5c(%rsp), %r12d
    00000467: 	jle	.Ltmp697 # Offset: 1127
    0000046d: 	cvttsd2si	init_value(%rip), %eax
    00000475: 	movq	0x60(%rsp), %rsi
    0000047a: 	movb	%al, (%rsi)
    0000047c: 	cmpl	0x70(%rsp), %r12d
    00000481: 	jle	.Ltmp697 # Offset: 1153
    00000487: 	cvttsd2si	init_value(%rip), %eax
    0000048f: 	movq	0x68(%rsp), %rsi
    00000494: 	movb	%al, (%rsi)
    00000496: 	cmpl	0x74(%rsp), %r12d
    0000049b: 	jle	.Ltmp697 # Offset: 1179
    000004a1: 	cvttsd2si	init_value(%rip), %eax
    000004a9: 	movq	0x78(%rsp), %rsi
    000004ae: 	movb	%al, (%rsi)
    000004b0: 	cmpl	0x88(%rsp), %r12d
    000004b8: 	jle	.Ltmp697 # Offset: 1208
    000004be: 	cvttsd2si	init_value(%rip), %eax
    000004c6: 	movq	0x80(%rsp), %rsi
    000004ce: 	movb	%al, (%rsi)
    000004d0: 	cmpl	0x8c(%rsp), %r12d
    000004d8: 	jle	.Ltmp697 # Offset: 1240
    000004da: 	cvttsd2si	init_value(%rip), %eax
    000004e2: 	movq	0x98(%rsp), %rsi
    000004ea: 	movb	%al, (%rsi)
    000004ec: 	cmpl	0xa8(%rsp), %r12d
    000004f4: 	jle	.Ltmp697 # Offset: 1268
    000004f6: 	cvttsd2si	init_value(%rip), %eax
    000004fe: 	movq	0xa0(%rsp), %rcx
    00000506: 	movb	%al, (%rcx)
    00000508: 	cmpl	0xac(%rsp), %r12d
    00000510: 	jle	.Ltmp697 # Offset: 1296
    00000512: 	cvttsd2si	init_value(%rip), %eax
    0000051a: 	movq	0xb0(%rsp), %rcx
    00000522: 	movb	%al, (%rcx)
    00000524: 	cmpl	0xc0(%rsp), %r12d
    0000052c: 	jle	.Ltmp697 # Offset: 1324
    0000052e: 	cvttsd2si	init_value(%rip), %eax
    00000536: 	movq	0xb8(%rsp), %rsi
    0000053e: 	movb	%al, (%rsi)
.Ltmp697:
    00000540: 	addl	$0x1, %ebx
    00000543: 	cmpl	%ebx, iterations(%rip)
    00000549: 	jg	.Ltmp699 # Offset: 1353
    0000054f: 	movl	0xc4(%rsp), %ebx
    00000556: 	movq	%rdi, %r15
.Ltmp695:
    00000559: 	callq	clock@PLT # Offset: 1369
    0000055e: 	movq	0x90(%rsp), %rdi
    00000566: 	pxor	%xmm0, %xmm0
    0000056a: 	movq	%rax, end_time(%rip)
    00000571: 	subq	start_time(%rip), %rax
    00000578: 	cvtsi2sd	%rax, %xmm0
    0000057d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000585: 	callq	_Z13record_resultdPKc # Offset: 1413
    0000058a: 	testl	%ebx, %ebx
    0000058c: 	jle	.Ltmp700 # Offset: 1420
    00000592: 	leal	-0x1(%rbx), %eax
    00000595: 	cmpl	$0xe, %eax
    00000598: 	jbe	.Ltmp701 # Offset: 1432
    0000059e: 	movl	%ebx, %edx
    000005a0: 	movq	%r15, %rax
    000005a3: 	pxor	%xmm0, %xmm0
    000005a7: 	shrl	$0x4, %edx
    000005aa: 	subl	$0x1, %edx
    000005ad: 	shlq	$0x4, %rdx
    000005b1: 	leaq	0x10(%r15,%rdx), %rdx
    000005b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp702:
    000005c0: 	movdqu	(%rax), %xmm5
    000005c4: 	addq	$0x10, %rax
    000005c8: 	paddb	%xmm5, %xmm0
    000005cc: 	cmpq	%rax, %rdx
    000005cf: 	jne	.Ltmp702 # Offset: 1487
    000005d1: 	movdqa	%xmm0, %xmm1
    000005d5: 	movl	%ebx, %ecx
    000005d7: 	psrldq	$0x8, %xmm1
    000005dc: 	andl	$-0x10, %ecx
    000005df: 	paddb	%xmm1, %xmm0
    000005e3: 	pxor	%xmm1, %xmm1
    000005e7: 	movl	%ecx, %edx
    000005e9: 	psadbw	%xmm1, %xmm0
    000005ed: 	movd	%xmm0, %eax
    000005f1: 	cmpl	%ebx, %ecx
    000005f3: 	je	.Ltmp703 # Offset: 1523
.Ltmp709:
    000005f9: 	movl	%ebx, %esi
    000005fb: 	subl	%ecx, %esi
    000005fd: 	leal	-0x1(%rsi), %edi
    00000600: 	cmpl	$0x6, %edi
    00000603: 	jbe	.Ltmp704 # Offset: 1539
    00000605: 	movq	(%r15,%rcx), %xmm1
    0000060b: 	pxor	%xmm0, %xmm0
    0000060f: 	movdqa	%xmm1, %xmm6
    00000613: 	psadbw	%xmm0, %xmm6
    00000617: 	movq	%xmm6, 0xc8(%rsp)
    00000620: 	movq	%xmm6, %rcx
    00000625: 	movl	%ecx, %edi
    00000627: 	movl	%esi, %ecx
    00000629: 	andl	$-0x8, %ecx
    0000062c: 	addl	%edi, %eax
    0000062e: 	addl	%ecx, %edx
    00000630: 	cmpl	%ecx, %esi
    00000632: 	je	.Ltmp703 # Offset: 1586
.Ltmp704:
    00000634: 	movslq	%edx, %rcx
    00000637: 	addb	(%r15,%rcx), %al
    0000063b: 	leal	0x1(%rdx), %ecx
    0000063e: 	cmpl	%ecx, %ebx
    00000640: 	jle	.Ltmp703 # Offset: 1600
    00000642: 	movslq	%ecx, %rcx
    00000645: 	addb	(%r15,%rcx), %al
    00000649: 	leal	0x2(%rdx), %ecx
    0000064c: 	cmpl	%ecx, %ebx
    0000064e: 	jle	.Ltmp703 # Offset: 1614
    00000650: 	movslq	%ecx, %rcx
    00000653: 	addb	(%r15,%rcx), %al
    00000657: 	leal	0x3(%rdx), %ecx
    0000065a: 	cmpl	%ecx, %ebx
    0000065c: 	jle	.Ltmp703 # Offset: 1628
    0000065e: 	movslq	%ecx, %rcx
    00000661: 	addb	(%r15,%rcx), %al
    00000665: 	leal	0x4(%rdx), %ecx
    00000668: 	cmpl	%ecx, %ebx
    0000066a: 	jle	.Ltmp703 # Offset: 1642
    0000066c: 	movslq	%ecx, %rcx
    0000066f: 	addb	(%r15,%rcx), %al
    00000673: 	leal	0x5(%rdx), %ecx
    00000676: 	cmpl	%ecx, %ebx
    00000678: 	jle	.Ltmp703 # Offset: 1656
    0000067a: 	movslq	%ecx, %rcx
    0000067d: 	addl	$0x6, %edx
    00000680: 	addb	(%r15,%rcx), %al
    00000684: 	cmpl	%edx, %ebx
    00000686: 	jle	.Ltmp703 # Offset: 1670
    00000688: 	movslq	%edx, %rdx
    0000068b: 	addb	(%r15,%rdx), %al
.Ltmp703:
    0000068f: 	testb	%al, %al
    00000691: 	jne	.Ltmp705 # Offset: 1681
.Ltmp700:
    00000693: 	addq	$0x1c8, %rsp
    0000069a: 	popq	%rbx
    0000069b: 	popq	%rbp
    0000069c: 	popq	%r12
    0000069e: 	popq	%r13
    000006a0: 	popq	%r14
    000006a2: 	popq	%r15
    000006a4: 	retq # Offset: 1700
.Ltmp705:
    000006a5: 	movq	0x90(%rsp), %rsi
    000006ad: 	addq	$0x1c8, %rsp
    000006b4: 	movzbl	%al, %edi
    000006b7: 	popq	%rbx
    000006b8: 	popq	%rbp
    000006b9: 	popq	%r12
    000006bb: 	popq	%r13
    000006bd: 	popq	%r14
    000006bf: 	popq	%r15
    000006c1: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1729
.Ltmp696:
    000006c6: 	leaq	0x3(%r15,%rsi,2), %r13
    000006cb: 	xorl	%r14d, %r14d
    000006ce: 	movq	%r15, %rcx
    000006d1: 	movl	%r14d, %r15d
    000006d4: 	movq	%r13, %r14
    000006d7: 	movq	0x8(%rsp), %r13
    000006dc: 	nopl	(%rax) # Size: 4
.Ltmp708:
    000006e0: 	movq	%rcx, %rdi
    000006e3: 	movq	%rbp, %rdx
    000006e6: 	xorl	%esi, %esi
    000006e8: 	callq	memset@PLT # Offset: 1768
    000006ed: 	movq	%rax, %rcx
    000006f0: 	testl	%r12d, %r12d
    000006f3: 	jle	.Ltmp706 # Offset: 1779
    000006f5: 	movq	%r13, %rax
    000006f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp707:
    00000700: 	cvttsd2si	init_value(%rip), %edx
    00000708: 	addq	$0x2, %rax
    0000070c: 	movb	%dl, -0x2(%rax)
    0000070f: 	cmpq	%r14, %rax
    00000712: 	jne	.Ltmp707 # Offset: 1810
.Ltmp706:
    00000714: 	addl	$0x1, %r15d
    00000718: 	cmpl	iterations(%rip), %r15d
    0000071f: 	jl	.Ltmp708 # Offset: 1823
    00000721: 	movq	%rcx, %r15
    00000724: 	jmp	.Ltmp695 # Offset: 1828
.Ltmp701:
    00000729: 	xorl	%ecx, %ecx
    0000072b: 	xorl	%eax, %eax
    0000072d: 	xorl	%edx, %edx
    0000072f: 	jmp	.Ltmp709 # Offset: 1839
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_memset_overwrite2IhEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite2IhEvPT_iPKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x12a30
  Size        : 0x72c
  MaxSize     : 0x730
  Offset      : 0x12a30
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x1b8, %rsp
    0000001a: 	movq	%rdx, 0x80(%rsp)
    00000022: 	callq	clock@PLT # Offset: 34
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	movl	iterations(%rip), %eax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp710 # Offset: 54
    0000003c: 	leal	-0x2(%rbx), %edx
    0000003f: 	leaq	0x1(%r15), %rcx
    00000043: 	movl	%edx, %esi
    00000045: 	movq	%rcx, (%rsp)
    00000049: 	leal	-0x1(%rbx), %ebp
    0000004c: 	shrl	%esi
    0000004e: 	leal	0x1(%rsi), %eax
    00000051: 	leaq	(%r15,%rax,2), %rdi
    00000055: 	movl	%eax, 0x8(%rsp)
    00000059: 	leaq	init_value(%rip), %rax
    00000060: 	cmpq	%rax, %rdi
    00000063: 	leaq	iterations(%rip), %rdi
    0000006a: 	setbe	%al
    0000006d: 	cmpq	%rdi, %rcx
    00000070: 	setae	%dil
    00000074: 	orb	%dil, %al
    00000077: 	je	.Ltmp711 # Offset: 119
    0000007d: 	cmpl	$0x1d, %edx
    00000080: 	jbe	.Ltmp711 # Offset: 128
    00000086: 	movl	0x8(%rsp), %esi
    0000008a: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000092: 	movl	%esi, %eax
    00000094: 	andl	$-0x10, %esi
    00000097: 	shrl	$0x4, %eax
    0000009a: 	movl	%esi, 0xc(%rsp)
    0000009e: 	subl	$0x1, %eax
    000000a1: 	shlq	$0x5, %rax
    000000a5: 	leaq	0x21(%r15,%rax), %r12
    000000aa: 	leal	(%rsi,%rsi), %eax
    000000ad: 	leal	0x2(%rax), %edi
    000000b0: 	leal	0x5(%rax), %edx
    000000b3: 	movslq	%edx, %rdx
    000000b6: 	movl	%edi, 0x10(%rsp)
    000000ba: 	leal	0x4(%rax), %edi
    000000bd: 	leal	0x10(%rax), %ecx
    000000c0: 	movl	%edi, 0x14(%rsp)
    000000c4: 	leaq	(%r15,%rdx), %rdi
    000000c8: 	leal	0x7(%rax), %edx
    000000cb: 	movslq	%edx, %rdx
    000000ce: 	movq	%rdi, 0x18(%rsp)
    000000d3: 	leal	0x6(%rax), %edi
    000000d6: 	leal	0x1(%rax), %r13d
    000000da: 	movl	%edi, 0x28(%rsp)
    000000de: 	leaq	(%r15,%rdx), %rdi
    000000e2: 	leal	0x9(%rax), %edx
    000000e5: 	movslq	%r13d, %r13
    000000e8: 	movslq	%edx, %rdx
    000000eb: 	movq	%rdi, 0x20(%rsp)
    000000f0: 	leal	0x8(%rax), %edi
    000000f3: 	leal	0x3(%rax), %r14d
    000000f7: 	movl	%edi, 0x2c(%rsp)
    000000fb: 	leaq	(%r15,%rdx), %rdi
    000000ff: 	leal	0xb(%rax), %edx
    00000102: 	addq	%r15, %r13
    00000105: 	movslq	%edx, %rdx
    00000108: 	movq	%rdi, 0x30(%rsp)
    0000010d: 	leal	0xa(%rax), %edi
    00000110: 	movslq	%r14d, %r14
    00000113: 	movl	%edi, 0x40(%rsp)
    00000117: 	leaq	(%r15,%rdx), %rdi
    0000011b: 	leal	0xd(%rax), %edx
    0000011e: 	movslq	%edx, %rdx
    00000121: 	movq	%rdi, 0x38(%rsp)
    00000126: 	leal	0xc(%rax), %edi
    00000129: 	leaq	(%r15,%r14), %rsi
    0000012d: 	movl	%edi, 0x44(%rsp)
    00000131: 	leaq	(%r15,%rdx), %rdi
    00000135: 	leal	0xf(%rax), %edx
    00000138: 	xorl	%r14d, %r14d
    0000013b: 	movslq	%edx, %rdx
    0000013e: 	movq	%rdi, 0x48(%rsp)
    00000143: 	leal	0xe(%rax), %edi
    00000146: 	movl	%edi, 0x58(%rsp)
    0000014a: 	leaq	(%r15,%rdx), %rdi
    0000014e: 	leal	0x11(%rax), %edx
    00000151: 	movslq	%edx, %rdx
    00000154: 	movq	%rdi, 0x50(%rsp)
    00000159: 	leaq	(%r15,%rdx), %rdi
    0000015d: 	leal	0x13(%rax), %edx
    00000160: 	movl	%ecx, 0x5c(%rsp)
    00000164: 	movslq	%edx, %rdx
    00000167: 	movq	%rdi, 0x60(%rsp)
    0000016c: 	leal	0x12(%rax), %ecx
    0000016f: 	leaq	(%r15,%rdx), %rdi
    00000173: 	leal	0x15(%rax), %edx
    00000176: 	movl	%ecx, 0x70(%rsp)
    0000017a: 	movslq	%edx, %rdx
    0000017d: 	leal	0x14(%rax), %ecx
    00000180: 	movq	%rdi, 0x68(%rsp)
    00000185: 	leaq	(%r15,%rdx), %rdi
    00000189: 	leal	0x17(%rax), %edx
    0000018c: 	movl	%ecx, 0x74(%rsp)
    00000190: 	movslq	%edx, %rdx
    00000193: 	leal	0x16(%rax), %ecx
    00000196: 	movq	%rdi, 0x78(%rsp)
    0000019b: 	movl	%ecx, 0x90(%rsp)
    000001a2: 	leaq	(%r15,%rdx), %rdi
    000001a6: 	leal	0x18(%rax), %ecx
    000001a9: 	leal	0x19(%rax), %edx
    000001ac: 	movl	%ecx, 0x94(%rsp)
    000001b3: 	leal	0x1a(%rax), %ecx
    000001b6: 	movslq	%edx, %rdx
    000001b9: 	movq	%rdi, 0x88(%rsp)
    000001c1: 	movl	%ecx, 0xa8(%rsp)
    000001c8: 	leaq	(%r15,%rdx), %rdi
    000001cc: 	leal	0x1c(%rax), %ecx
    000001cf: 	leal	0x1b(%rax), %edx
    000001d2: 	addl	$0x1d, %eax
    000001d5: 	movl	%ecx, 0xac(%rsp)
    000001dc: 	cltq
    000001de: 	movslq	%edx, %rdx
    000001e1: 	movq	%rdi, 0x98(%rsp)
    000001e9: 	addq	%r15, %rax
    000001ec: 	leaq	(%r15,%rdx), %rdi
    000001f0: 	movq	%rax, 0xb0(%rsp)
    000001f8: 	movq	%r13, %rax
    000001fb: 	movq	%r12, %r13
    000001fe: 	movl	%ebp, %r12d
    00000201: 	movq	%rdi, 0xa0(%rsp)
    00000209: 	movl	%r14d, %ebp
    0000020c: 	movq	%r15, %rdi
    0000020f: 	movq	%rax, %r14
    00000212: 	movq	%rsi, %r15
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp715:
    00000218: 	testl	%ebx, %ebx
    0000021a: 	jle	.Ltmp712 # Offset: 538
    0000021c: 	movl	%r12d, %edx
    0000021f: 	xorl	%esi, %esi
    00000221: 	addq	$0x1, %rdx
    00000225: 	callq	memset@PLT # Offset: 549
    0000022a: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000232: 	movq	%rax, %rdi
.Ltmp712:
    00000235: 	testl	%r12d, %r12d
    00000238: 	jle	.Ltmp713 # Offset: 568
    0000023e: 	movsd	init_value(%rip), %xmm1
    00000246: 	movq	(%rsp), %rax
    0000024a: 	unpcklpd	%xmm1, %xmm1
    0000024e: 	cvttpd2dq	%xmm1, %xmm1
    00000252: 	punpcklqdq	%xmm1, %xmm1
    00000256: 	movdqa	%xmm1, %xmm2
    0000025a: 	punpckhwd	%xmm1, %xmm2
    0000025e: 	nop # Size: 2
.Ltmp714:
    00000260: 	movdqa	%xmm1, %xmm0
    00000264: 	addq	$0x20, %rax
    00000268: 	punpcklwd	%xmm1, %xmm0
    0000026c: 	movdqa	%xmm0, %xmm3
    00000270: 	punpcklwd	%xmm2, %xmm0
    00000274: 	punpckhwd	%xmm2, %xmm3
    00000278: 	punpcklwd	%xmm3, %xmm0
    0000027c: 	pand	%xmm4, %xmm0
    00000280: 	packuswb	%xmm0, %xmm0
    00000284: 	movd	%xmm0, %edx
    00000288: 	movb	%dl, -0x20(%rax)
    0000028b: 	movaps	%xmm0, 0x1a0(%rsp)
    00000293: 	movzbl	0x1a1(%rsp), %edx
    0000029b: 	movb	%dl, -0x1e(%rax)
    0000029e: 	movaps	%xmm0, 0x190(%rsp)
    000002a6: 	movzbl	0x192(%rsp), %edx
    000002ae: 	movb	%dl, -0x1c(%rax)
    000002b1: 	movaps	%xmm0, 0x180(%rsp)
    000002b9: 	movzbl	0x183(%rsp), %edx
    000002c1: 	movb	%dl, -0x1a(%rax)
    000002c4: 	movaps	%xmm0, 0x170(%rsp)
    000002cc: 	movzbl	0x174(%rsp), %edx
    000002d4: 	movb	%dl, -0x18(%rax)
    000002d7: 	movaps	%xmm0, 0x160(%rsp)
    000002df: 	movzbl	0x165(%rsp), %edx
    000002e7: 	movb	%dl, -0x16(%rax)
    000002ea: 	movaps	%xmm0, 0x150(%rsp)
    000002f2: 	movzbl	0x156(%rsp), %edx
    000002fa: 	movb	%dl, -0x14(%rax)
    000002fd: 	movaps	%xmm0, 0x140(%rsp)
    00000305: 	movzbl	0x147(%rsp), %edx
    0000030d: 	movb	%dl, -0x12(%rax)
    00000310: 	movaps	%xmm0, 0x130(%rsp)
    00000318: 	movzbl	0x138(%rsp), %edx
    00000320: 	movb	%dl, -0x10(%rax)
    00000323: 	movaps	%xmm0, 0x120(%rsp)
    0000032b: 	movzbl	0x129(%rsp), %edx
    00000333: 	movb	%dl, -0xe(%rax)
    00000336: 	movaps	%xmm0, 0x110(%rsp)
    0000033e: 	movzbl	0x11a(%rsp), %edx
    00000346: 	movb	%dl, -0xc(%rax)
    00000349: 	movaps	%xmm0, 0x100(%rsp)
    00000351: 	movzbl	0x10b(%rsp), %edx
    00000359: 	movb	%dl, -0xa(%rax)
    0000035c: 	movaps	%xmm0, 0xf0(%rsp)
    00000364: 	movzbl	0xfc(%rsp), %edx
    0000036c: 	movb	%dl, -0x8(%rax)
    0000036f: 	movaps	%xmm0, 0xe0(%rsp)
    00000377: 	movzbl	0xed(%rsp), %edx
    0000037f: 	movb	%dl, -0x6(%rax)
    00000382: 	movaps	%xmm0, 0xd0(%rsp)
    0000038a: 	movzbl	0xde(%rsp), %edx
    00000392: 	movb	%dl, -0x4(%rax)
    00000395: 	movaps	%xmm0, 0xc0(%rsp)
    0000039d: 	movzbl	0xcf(%rsp), %edx
    000003a5: 	movb	%dl, -0x2(%rax)
    000003a8: 	cmpq	%r13, %rax
    000003ab: 	jne	.Ltmp714 # Offset: 939
    000003b1: 	movl	0xc(%rsp), %esi
    000003b5: 	cmpl	%esi, 0x8(%rsp)
    000003b9: 	je	.Ltmp713 # Offset: 953
    000003bf: 	cvttsd2si	init_value(%rip), %eax
    000003c7: 	movb	%al, (%r14)
    000003ca: 	cmpl	0x10(%rsp), %r12d
    000003cf: 	jle	.Ltmp713 # Offset: 975
    000003d5: 	cvttsd2si	init_value(%rip), %eax
    000003dd: 	movb	%al, (%r15)
    000003e0: 	cmpl	0x14(%rsp), %r12d
    000003e5: 	jle	.Ltmp713 # Offset: 997
    000003eb: 	cvttsd2si	init_value(%rip), %eax
    000003f3: 	movq	0x18(%rsp), %rsi
    000003f8: 	movb	%al, (%rsi)
    000003fa: 	cmpl	0x28(%rsp), %r12d
    000003ff: 	jle	.Ltmp713 # Offset: 1023
    00000405: 	cvttsd2si	init_value(%rip), %eax
    0000040d: 	movq	0x20(%rsp), %rcx
    00000412: 	movb	%al, (%rcx)
    00000414: 	cmpl	0x2c(%rsp), %r12d
    00000419: 	jle	.Ltmp713 # Offset: 1049
    0000041f: 	cvttsd2si	init_value(%rip), %eax
    00000427: 	movq	0x30(%rsp), %rsi
    0000042c: 	movb	%al, (%rsi)
    0000042e: 	cmpl	0x40(%rsp), %r12d
    00000433: 	jle	.Ltmp713 # Offset: 1075
    00000439: 	cvttsd2si	init_value(%rip), %eax
    00000441: 	movq	0x38(%rsp), %rcx
    00000446: 	movb	%al, (%rcx)
    00000448: 	cmpl	0x44(%rsp), %r12d
    0000044d: 	jle	.Ltmp713 # Offset: 1101
    00000453: 	cvttsd2si	init_value(%rip), %eax
    0000045b: 	movq	0x48(%rsp), %rsi
    00000460: 	movb	%al, (%rsi)
    00000462: 	cmpl	0x58(%rsp), %r12d
    00000467: 	jle	.Ltmp713 # Offset: 1127
    0000046d: 	cvttsd2si	init_value(%rip), %eax
    00000475: 	movq	0x50(%rsp), %rcx
    0000047a: 	movb	%al, (%rcx)
    0000047c: 	cmpl	0x5c(%rsp), %r12d
    00000481: 	jle	.Ltmp713 # Offset: 1153
    00000487: 	cvttsd2si	init_value(%rip), %eax
    0000048f: 	movq	0x60(%rsp), %rsi
    00000494: 	movb	%al, (%rsi)
    00000496: 	cmpl	0x70(%rsp), %r12d
    0000049b: 	jle	.Ltmp713 # Offset: 1179
    000004a1: 	cvttsd2si	init_value(%rip), %eax
    000004a9: 	movq	0x68(%rsp), %rcx
    000004ae: 	movb	%al, (%rcx)
    000004b0: 	cmpl	0x74(%rsp), %r12d
    000004b5: 	jle	.Ltmp713 # Offset: 1205
    000004bb: 	cvttsd2si	init_value(%rip), %eax
    000004c3: 	movq	0x78(%rsp), %rsi
    000004c8: 	movb	%al, (%rsi)
    000004ca: 	cmpl	0x90(%rsp), %r12d
    000004d2: 	jle	.Ltmp713 # Offset: 1234
    000004d4: 	cvttsd2si	init_value(%rip), %eax
    000004dc: 	movq	0x88(%rsp), %rcx
    000004e4: 	movb	%al, (%rcx)
    000004e6: 	cmpl	0x94(%rsp), %r12d
    000004ee: 	jle	.Ltmp713 # Offset: 1262
    000004f0: 	cvttsd2si	init_value(%rip), %eax
    000004f8: 	movq	0x98(%rsp), %rsi
    00000500: 	movb	%al, (%rsi)
    00000502: 	cmpl	0xa8(%rsp), %r12d
    0000050a: 	jle	.Ltmp713 # Offset: 1290
    0000050c: 	cvttsd2si	init_value(%rip), %eax
    00000514: 	movq	0xa0(%rsp), %rcx
    0000051c: 	movb	%al, (%rcx)
    0000051e: 	cmpl	0xac(%rsp), %r12d
    00000526: 	jle	.Ltmp713 # Offset: 1318
    00000528: 	cvttsd2si	init_value(%rip), %eax
    00000530: 	movq	0xb0(%rsp), %rsi
    00000538: 	movb	%al, (%rsi)
    0000053a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp713:
    00000540: 	addl	$0x1, %ebp
    00000543: 	cmpl	%ebp, iterations(%rip)
    00000549: 	jg	.Ltmp715 # Offset: 1353
    0000054f: 	movq	%rdi, %r15
.Ltmp710:
    00000552: 	callq	clock@PLT # Offset: 1362
    00000557: 	movq	0x80(%rsp), %rdi
    0000055f: 	pxor	%xmm0, %xmm0
    00000563: 	movq	%rax, end_time(%rip)
    0000056a: 	subq	start_time(%rip), %rax
    00000571: 	cvtsi2sd	%rax, %xmm0
    00000576: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000057e: 	callq	_Z13record_resultdPKc # Offset: 1406
    00000583: 	testl	%ebx, %ebx
    00000585: 	jle	.Ltmp716 # Offset: 1413
    0000058b: 	leal	-0x1(%rbx), %eax
    0000058e: 	cmpl	$0xe, %eax
    00000591: 	jbe	.Ltmp717 # Offset: 1425
    00000597: 	movl	%ebx, %edx
    00000599: 	movq	%r15, %rax
    0000059c: 	pxor	%xmm0, %xmm0
    000005a0: 	shrl	$0x4, %edx
    000005a3: 	subl	$0x1, %edx
    000005a6: 	shlq	$0x4, %rdx
    000005aa: 	leaq	0x10(%r15,%rdx), %rdx
    000005af: 	nop # Size: 1
.Ltmp718:
    000005b0: 	movdqu	(%rax), %xmm5
    000005b4: 	addq	$0x10, %rax
    000005b8: 	paddb	%xmm5, %xmm0
    000005bc: 	cmpq	%rdx, %rax
    000005bf: 	jne	.Ltmp718 # Offset: 1471
    000005c1: 	movdqa	%xmm0, %xmm1
    000005c5: 	movl	%ebx, %ecx
    000005c7: 	psrldq	$0x8, %xmm1
    000005cc: 	andl	$-0x10, %ecx
    000005cf: 	paddb	%xmm1, %xmm0
    000005d3: 	pxor	%xmm1, %xmm1
    000005d7: 	movl	%ecx, %edx
    000005d9: 	psadbw	%xmm1, %xmm0
    000005dd: 	movd	%xmm0, %eax
    000005e1: 	cmpl	%ebx, %ecx
    000005e3: 	je	.Ltmp719 # Offset: 1507
.Ltmp726:
    000005e9: 	movl	%ebx, %esi
    000005eb: 	subl	%ecx, %esi
    000005ed: 	leal	-0x1(%rsi), %edi
    000005f0: 	cmpl	$0x6, %edi
    000005f3: 	jbe	.Ltmp720 # Offset: 1523
    000005f5: 	movq	(%r15,%rcx), %xmm1
    000005fb: 	pxor	%xmm0, %xmm0
    000005ff: 	movdqa	%xmm1, %xmm6
    00000603: 	psadbw	%xmm0, %xmm6
    00000607: 	movq	%xmm6, 0xb8(%rsp)
    00000610: 	movq	%xmm6, %rcx
    00000615: 	movl	%ecx, %edi
    00000617: 	movl	%esi, %ecx
    00000619: 	andl	$-0x8, %ecx
    0000061c: 	addl	%edi, %eax
    0000061e: 	addl	%ecx, %edx
    00000620: 	cmpl	%ecx, %esi
    00000622: 	je	.Ltmp719 # Offset: 1570
.Ltmp720:
    00000624: 	movslq	%edx, %rcx
    00000627: 	addb	(%r15,%rcx), %al
    0000062b: 	leal	0x1(%rdx), %ecx
    0000062e: 	cmpl	%ecx, %ebx
    00000630: 	jle	.Ltmp719 # Offset: 1584
    00000632: 	movslq	%ecx, %rcx
    00000635: 	addb	(%r15,%rcx), %al
    00000639: 	leal	0x2(%rdx), %ecx
    0000063c: 	cmpl	%ecx, %ebx
    0000063e: 	jle	.Ltmp719 # Offset: 1598
    00000640: 	movslq	%ecx, %rcx
    00000643: 	addb	(%r15,%rcx), %al
    00000647: 	leal	0x3(%rdx), %ecx
    0000064a: 	cmpl	%ebx, %ecx
    0000064c: 	jge	.Ltmp719 # Offset: 1612
    0000064e: 	movslq	%ecx, %rcx
    00000651: 	addb	(%r15,%rcx), %al
    00000655: 	leal	0x4(%rdx), %ecx
    00000658: 	cmpl	%ecx, %ebx
    0000065a: 	jle	.Ltmp719 # Offset: 1626
    0000065c: 	movslq	%ecx, %rcx
    0000065f: 	addb	(%r15,%rcx), %al
    00000663: 	leal	0x5(%rdx), %ecx
    00000666: 	cmpl	%ecx, %ebx
    00000668: 	jle	.Ltmp719 # Offset: 1640
    0000066a: 	movslq	%ecx, %rcx
    0000066d: 	addl	$0x6, %edx
    00000670: 	addb	(%r15,%rcx), %al
    00000674: 	cmpl	%edx, %ebx
    00000676: 	jle	.Ltmp719 # Offset: 1654
    00000678: 	movslq	%edx, %rdx
    0000067b: 	addb	(%r15,%rdx), %al
.Ltmp719:
    0000067f: 	testb	%al, %al
    00000681: 	jne	.Ltmp721 # Offset: 1665
.Ltmp716:
    00000683: 	addq	$0x1b8, %rsp
    0000068a: 	popq	%rbx
    0000068b: 	popq	%rbp
    0000068c: 	popq	%r12
    0000068e: 	popq	%r13
    00000690: 	popq	%r14
    00000692: 	popq	%r15
    00000694: 	retq # Offset: 1684
.Ltmp721:
    00000695: 	movq	0x80(%rsp), %rsi
    0000069d: 	addq	$0x1b8, %rsp
    000006a4: 	movzbl	%al, %edi
    000006a7: 	popq	%rbx
    000006a8: 	popq	%rbp
    000006a9: 	popq	%r12
    000006ab: 	popq	%r13
    000006ad: 	popq	%r14
    000006af: 	popq	%r15
    000006b1: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1713
.Ltmp711:
    000006b6: 	leaq	0x3(%r15,%rsi,2), %r13
    000006bb: 	xorl	%r14d, %r14d
    000006be: 	movl	%ebp, %r12d
    000006c1: 	movq	%r15, %rcx
    000006c4: 	movl	%r14d, %r15d
    000006c7: 	movq	%r13, %r14
    000006ca: 	movq	%r12, %r13
    000006cd: 	movq	(%rsp), %r12
    000006d1: 	nopl	(%rax) # Size: 7
.Ltmp725:
    000006d8: 	testl	%ebx, %ebx
    000006da: 	jle	.Ltmp722 # Offset: 1754
    000006dc: 	movq	%rcx, %rdi
    000006df: 	leaq	0x1(%r13), %rdx
    000006e3: 	xorl	%esi, %esi
    000006e5: 	callq	memset@PLT # Offset: 1765
    000006ea: 	movq	%rax, %rcx
.Ltmp722:
    000006ed: 	testl	%ebp, %ebp
    000006ef: 	jle	.Ltmp723 # Offset: 1775
    000006f1: 	movq	%r12, %rax
    000006f4: 	nopl	(%rax) # Size: 4
.Ltmp724:
    000006f8: 	cvttsd2si	init_value(%rip), %edx
    00000700: 	addq	$0x2, %rax
    00000704: 	movb	%dl, -0x2(%rax)
    00000707: 	cmpq	%rax, %r14
    0000070a: 	jne	.Ltmp724 # Offset: 1802
.Ltmp723:
    0000070c: 	addl	$0x1, %r15d
    00000710: 	cmpl	iterations(%rip), %r15d
    00000717: 	jl	.Ltmp725 # Offset: 1815
    00000719: 	movq	%rcx, %r15
    0000071c: 	jmp	.Ltmp710 # Offset: 1820
.Ltmp717:
    00000721: 	xorl	%ecx, %ecx
    00000723: 	xorl	%eax, %eax
    00000725: 	xorl	%edx, %edx
    00000727: 	jmp	.Ltmp726 # Offset: 1831
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite2IhEvPT_iPKc"

Binary Function "_Z24test_loop_overwrite3_optIhEvPT_iPKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x13160
  Size        : 0x356
  MaxSize     : 0x360
  Offset      : 0x13160
  Section     : .text
  Orc Section : .local.text._Z24test_loop_overwrite3_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%rdx, (%rsp)
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	movl	iterations(%rip), %eax
    0000003d: 	testl	%eax, %eax
    0000003f: 	jle	.Ltmp727 # Offset: 63
    00000045: 	leal	-0x2(%rbp), %r13d
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	leal	-0x1(%rbp), %ebx
    0000004f: 	nop # Size: 1
.Ltmp731:
    00000050: 	movq	%r15, %rax
    00000053: 	xorl	%edi, %edi
    00000055: 	testl	%r13d, %r13d
    00000058: 	jle	.Ltmp728 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp729:
    00000060: 	movb	$0x0, (%rax)
    00000063: 	cvttsd2si	init_value(%rip), %edx
    0000006b: 	addl	$0x3, %edi
    0000006e: 	addq	$0x3, %rax
    00000072: 	movb	%dl, -0x2(%rax)
    00000075: 	cvttsd2si	init_value(%rip), %edx
    0000007d: 	movb	%dl, -0x1(%rax)
    00000080: 	cmpl	%r13d, %edi
    00000083: 	jl	.Ltmp729 # Offset: 131
.Ltmp728:
    00000085: 	cmpl	%edi, %ebp
    00000087: 	jle	.Ltmp730 # Offset: 135
    0000008d: 	movl	%ebx, %edx
    0000008f: 	xorl	%esi, %esi
    00000091: 	addl	$0x1, %r14d
    00000095: 	movl	%ebx, %r12d
    00000098: 	subl	%edi, %edx
    0000009a: 	movslq	%edi, %rdi
    0000009d: 	addq	$0x1, %rdx
    000000a1: 	addq	%r15, %rdi
    000000a4: 	callq	memset@PLT # Offset: 164
    000000a9: 	cmpl	%r14d, iterations(%rip)
    000000b0: 	jg	.Ltmp731 # Offset: 176
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	movq	(%rsp), %rdi
    000000bb: 	pxor	%xmm0, %xmm0
    000000bf: 	movq	%rax, end_time(%rip)
    000000c6: 	subq	start_time(%rip), %rax
    000000cd: 	cvtsi2sd	%rax, %xmm0
    000000d2: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000da: 	callq	_Z13record_resultdPKc # Offset: 218
.Ltmp738:
    000000df: 	cmpl	$0xe, %r12d
    000000e3: 	jbe	.Ltmp732 # Offset: 227
    000000e9: 	movl	%ebp, %edx
    000000eb: 	movq	%r15, %rax
    000000ee: 	pxor	%xmm0, %xmm0
    000000f2: 	shrl	$0x4, %edx
    000000f5: 	subl	$0x1, %edx
    000000f8: 	shlq	$0x4, %rdx
    000000fc: 	leaq	0x10(%r15,%rdx), %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp733:
    00000108: 	movdqu	(%rax), %xmm2
    0000010c: 	addq	$0x10, %rax
    00000110: 	paddb	%xmm2, %xmm0
    00000114: 	cmpq	%rax, %rdx
    00000117: 	jne	.Ltmp733 # Offset: 279
    00000119: 	movdqa	%xmm0, %xmm1
    0000011d: 	movl	%ebp, %edx
    0000011f: 	psrldq	$0x8, %xmm1
    00000124: 	andl	$-0x10, %edx
    00000127: 	paddb	%xmm1, %xmm0
    0000012b: 	pxor	%xmm1, %xmm1
    0000012f: 	movl	%edx, %eax
    00000131: 	psadbw	%xmm1, %xmm0
    00000135: 	movd	%xmm0, %ebx
    00000139: 	cmpl	%ebp, %edx
    0000013b: 	je	.Ltmp734 # Offset: 315
.Ltmp741:
    00000141: 	movl	%ebp, %esi
    00000143: 	subl	%edx, %esi
    00000145: 	leal	-0x1(%rsi), %edi
    00000148: 	cmpl	$0x6, %edi
    0000014b: 	jbe	.Ltmp735 # Offset: 331
    0000014d: 	movq	(%r15,%rdx), %xmm1
    00000153: 	pxor	%xmm0, %xmm0
    00000157: 	movdqa	%xmm1, %xmm3
    0000015b: 	psadbw	%xmm0, %xmm3
    0000015f: 	movq	%xmm3, %rdx
    00000164: 	movq	%xmm3, 0x8(%rsp)
    0000016a: 	movl	%edx, %edi
    0000016c: 	movl	%esi, %edx
    0000016e: 	andl	$-0x8, %edx
    00000171: 	addl	%edi, %ebx
    00000173: 	addl	%edx, %eax
    00000175: 	cmpl	%edx, %esi
    00000177: 	je	.Ltmp734 # Offset: 375
.Ltmp735:
    00000179: 	movslq	%eax, %rdx
    0000017c: 	addb	(%r15,%rdx), %bl
    00000180: 	leal	0x1(%rax), %edx
    00000183: 	cmpl	%edx, %ebp
    00000185: 	jle	.Ltmp734 # Offset: 389
    00000187: 	movslq	%edx, %rdx
    0000018a: 	addb	(%r15,%rdx), %bl
    0000018e: 	leal	0x2(%rax), %edx
    00000191: 	cmpl	%ebp, %edx
    00000193: 	jge	.Ltmp734 # Offset: 403
    00000195: 	movslq	%edx, %rdx
    00000198: 	addb	(%r15,%rdx), %bl
    0000019c: 	leal	0x3(%rax), %edx
    0000019f: 	cmpl	%edx, %ebp
    000001a1: 	jle	.Ltmp734 # Offset: 417
    000001a3: 	movslq	%edx, %rdx
    000001a6: 	addb	(%r15,%rdx), %bl
    000001aa: 	leal	0x4(%rax), %edx
    000001ad: 	cmpl	%edx, %ebp
    000001af: 	jle	.Ltmp734 # Offset: 431
    000001b1: 	movslq	%edx, %rdx
    000001b4: 	addb	(%r15,%rdx), %bl
    000001b8: 	leal	0x5(%rax), %edx
    000001bb: 	cmpl	%edx, %ebp
    000001bd: 	jle	.Ltmp734 # Offset: 445
    000001bf: 	movslq	%edx, %rdx
    000001c2: 	addl	$0x6, %eax
    000001c5: 	addb	(%r15,%rdx), %bl
    000001c9: 	cmpl	%eax, %ebp
    000001cb: 	jle	.Ltmp734 # Offset: 459
    000001cd: 	cltq
    000001cf: 	addb	(%r15,%rax), %bl
.Ltmp734:
    000001d3: 	movsd	init_value(%rip), %xmm0
    000001db: 	movl	$0xffffffaa, %eax
    000001e0: 	addsd	%xmm0, %xmm0
    000001e4: 	cvttsd2si	%xmm0, %edx
    000001e8: 	imull	%edx, %eax
    000001eb: 	movl	%eax, %r12d
    000001ee: 	cmpb	%bl, %al
    000001f0: 	jne	.Ltmp736 # Offset: 496
    000001f2: 	movq	0x18(%rsp), %rax
    000001f7: 	subq	%fs:0x28, %rax
    00000200: 	jne	.Ltmp737 # Offset: 512
    00000206: 	addq	$0x28, %rsp
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	retq # Offset: 532
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp730:
    00000218: 	addl	$0x1, %r14d
    0000021c: 	cmpl	%r14d, iterations(%rip)
    00000223: 	jg	.Ltmp731 # Offset: 547
.Ltmp727:
    00000229: 	callq	clock@PLT # Offset: 553
    0000022e: 	movq	(%rsp), %rdi
    00000232: 	pxor	%xmm0, %xmm0
    00000236: 	xorl	%ebx, %ebx
    00000238: 	movq	%rax, end_time(%rip)
    0000023f: 	subq	start_time(%rip), %rax
    00000246: 	cvtsi2sd	%rax, %xmm0
    0000024b: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000253: 	callq	_Z13record_resultdPKc # Offset: 595
    00000258: 	testl	%ebp, %ebp
    0000025a: 	jle	.Ltmp734 # Offset: 602
    00000260: 	leal	-0x1(%rbp), %r12d
    00000264: 	jmp	.Ltmp738 # Offset: 612
.Ltmp736:
    00000269: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000270: 	movl	$0x5, %edx
    00000275: 	leaq	DATAat0x35004(%rip), %rsi
    0000027c: 	movq	%r13, %rdi
    0000027f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 639
    00000284: 	cmpq	$0x0, (%rsp)
    00000289: 	je	.Ltmp739 # Offset: 649
    0000028f: 	movq	(%rsp), %r15
    00000293: 	movq	%r15, %rdi
    00000296: 	callq	strlen@PLT # Offset: 662
    0000029b: 	movq	%r15, %rsi
    0000029e: 	movq	%r13, %rdi
    000002a1: 	movq	%rax, %rdx
    000002a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 676
.Ltmp740:
    000002a9: 	movl	$0xd, %edx
    000002ae: 	leaq	DATAat0x3500a(%rip), %rsi
    000002b5: 	movq	%r13, %rdi
    000002b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 696
    000002bd: 	leaq	0x17(%rsp), %r14
    000002c2: 	movq	%r13, %rdi
    000002c5: 	movb	%bl, 0x17(%rsp)
    000002c9: 	movl	$0x1, %edx
    000002ce: 	movq	%r14, %rsi
    000002d1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 721
    000002d6: 	movl	$0xb, %edx
    000002db: 	leaq	DATAat0x35018(%rip), %rsi
    000002e2: 	movq	%rax, %rbp
    000002e5: 	movq	%rax, %rdi
    000002e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 744
    000002ed: 	movq	%rbp, %rdi
    000002f0: 	movl	$0x1, %edx
    000002f5: 	movq	%r14, %rsi
    000002f8: 	movb	%r12b, 0x17(%rsp)
    000002fd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 765
    00000302: 	movq	%rax, %rdi
    00000305: 	movq	0x18(%rsp), %rax
    0000030a: 	subq	%fs:0x28, %rax
    00000313: 	jne	.Ltmp737 # Offset: 787
    00000315: 	addq	$0x28, %rsp
    00000319: 	popq	%rbx
    0000031a: 	popq	%rbp
    0000031b: 	popq	%r12
    0000031d: 	popq	%r13
    0000031f: 	popq	%r14
    00000321: 	popq	%r15
    00000323: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 803
.Ltmp739:
    00000328: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000032f: 	movq	-0x18(%rax), %rdi
    00000333: 	addq	%r13, %rdi
    00000336: 	movl	0x20(%rdi), %esi
    00000339: 	orl	$0x1, %esi
    0000033c: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 828
    00000341: 	jmp	.Ltmp740 # Offset: 833
.Ltmp732:
    00000346: 	xorl	%edx, %edx
    00000348: 	xorl	%ebx, %ebx
    0000034a: 	xorl	%eax, %eax
    0000034c: 	jmp	.Ltmp741 # Offset: 844
.Ltmp737:
    00000351: 	callq	__stack_chk_fail@PLT # Offset: 849
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_loop_overwrite3_optIhEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite3IhEvPT_iPKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x134c0
  Size        : 0x123f
  MaxSize     : 0x1240
  Offset      : 0x134c0
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x408, %rsp
    0000001a: 	movl	%esi, 0xc(%rsp)
    0000001e: 	movq	%rdx, 0x10(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x3f8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp742 # Offset: 74
    00000050: 	movslq	%ebx, %rax
    00000053: 	movl	$0x0, 0x20(%rsp)
    0000005b: 	movdqa	DATAat0x36f20(%rip), %xmm2
    00000063: 	movq	%rax, %rdi
    00000066: 	subq	$0x1001, %rax
    0000006c: 	movq	%rax, 0x18(%rsp)
    00000071: 	leal	-0x2(%rdi), %r13d
.Ltmp758:
    00000075: 	xorl	%r12d, %r12d
    00000078: 	xorl	%r15d, %r15d
    0000007b: 	cmpq	$0x0, 0x18(%rsp)
    00000081: 	je	.Ltmp743 # Offset: 129
    00000087: 	movl	%r13d, 0x24(%rsp)
    0000008c: 	movq	0x18(%rsp), %r13
.Ltmp750:
    00000091: 	leaq	0xfff(%r15), %rbp
    00000098: 	movslq	%r12d, %rbx
    0000009b: 	cmpq	%rbx, %rbp
    0000009e: 	jbe	.Ltmp744 # Offset: 158
    000000a4: 	addq	$0xffe, %r15
    000000ab: 	movq	%rbp, %rdx
    000000ae: 	leaq	(%r14,%rbx), %rdi
    000000b2: 	xorl	%esi, %esi
    000000b4: 	subq	%rbx, %rdx
    000000b7: 	subq	%rbx, %r15
    000000ba: 	callq	memset@PLT # Offset: 186
    000000bf: 	cmpq	$0x2c, %r15
    000000c3: 	movabsq	$-0x5555555555555555, %rax
    000000cd: 	leaq	init_value(%rip), %rdi
    000000d4: 	seta	%r10b
    000000d8: 	mulq	%r15
    000000db: 	leaq	0x1(%r14,%rbx), %r9
    000000e0: 	movdqa	DATAat0x36f20(%rip), %xmm2
    000000e8: 	leaq	0x8(%rdi), %r15
    000000ec: 	movq	%rdx, %r8
    000000ef: 	andq	$-0x2, %rdx
    000000f3: 	shrq	%r8
    000000f6: 	addq	%r8, %rdx
    000000f9: 	addq	%rbx, %rdx
    000000fc: 	leaq	0x2(%r14,%rdx), %rax
    00000101: 	cmpq	%rdi, %rax
    00000104: 	setbe	%al
    00000107: 	cmpq	%r15, %r9
    0000010a: 	setae	%cl
    0000010d: 	orb	%cl, %al
    0000010f: 	je	.Ltmp745 # Offset: 271
    00000115: 	testb	%r10b, %r10b
    00000118: 	je	.Ltmp745 # Offset: 280
    0000011e: 	movsd	init_value(%rip), %xmm1
    00000126: 	leaq	0x1(%r8), %r11
    0000012a: 	movq	%r9, %rax
    0000012d: 	xorl	%ecx, %ecx
    0000012f: 	movq	%r11, %rdi
    00000132: 	unpcklpd	%xmm1, %xmm1
    00000136: 	shrq	$0x4, %rdi
    0000013a: 	cvttpd2dq	%xmm1, %xmm1
    0000013e: 	punpcklqdq	%xmm1, %xmm1
    00000142: 	movdqa	%xmm1, %xmm3
    00000146: 	punpckhwd	%xmm1, %xmm3
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp746:
    00000150: 	movdqa	%xmm1, %xmm0
    00000154: 	addq	$0x1, %rcx
    00000158: 	addq	$0x30, %rax
    0000015c: 	punpcklwd	%xmm1, %xmm0
    00000160: 	movdqa	%xmm0, %xmm4
    00000164: 	punpcklwd	%xmm3, %xmm0
    00000168: 	punpckhwd	%xmm3, %xmm4
    0000016c: 	punpcklwd	%xmm4, %xmm0
    00000170: 	pand	%xmm2, %xmm0
    00000174: 	packuswb	%xmm0, %xmm0
    00000178: 	movd	%xmm0, %esi
    0000017c: 	movb	%sil, -0x30(%rax)
    00000180: 	movaps	%xmm0, 0x3e0(%rsp)
    00000188: 	movzbl	0x3e1(%rsp), %esi
    00000190: 	movb	%sil, -0x2d(%rax)
    00000194: 	movaps	%xmm0, 0x3d0(%rsp)
    0000019c: 	movzbl	0x3d2(%rsp), %esi
    000001a4: 	movb	%sil, -0x2a(%rax)
    000001a8: 	movaps	%xmm0, 0x3c0(%rsp)
    000001b0: 	movzbl	0x3c3(%rsp), %esi
    000001b8: 	movb	%sil, -0x27(%rax)
    000001bc: 	movaps	%xmm0, 0x3b0(%rsp)
    000001c4: 	movzbl	0x3b4(%rsp), %esi
    000001cc: 	movb	%sil, -0x24(%rax)
    000001d0: 	movaps	%xmm0, 0x3a0(%rsp)
    000001d8: 	movzbl	0x3a5(%rsp), %esi
    000001e0: 	movb	%sil, -0x21(%rax)
    000001e4: 	movaps	%xmm0, 0x390(%rsp)
    000001ec: 	movzbl	0x396(%rsp), %esi
    000001f4: 	movb	%sil, -0x1e(%rax)
    000001f8: 	movaps	%xmm0, 0x380(%rsp)
    00000200: 	movzbl	0x387(%rsp), %esi
    00000208: 	movb	%sil, -0x1b(%rax)
    0000020c: 	movaps	%xmm0, 0x370(%rsp)
    00000214: 	movzbl	0x378(%rsp), %esi
    0000021c: 	movb	%sil, -0x18(%rax)
    00000220: 	movaps	%xmm0, 0x360(%rsp)
    00000228: 	movzbl	0x369(%rsp), %esi
    00000230: 	movb	%sil, -0x15(%rax)
    00000234: 	movaps	%xmm0, 0x350(%rsp)
    0000023c: 	movzbl	0x35a(%rsp), %esi
    00000244: 	movb	%sil, -0x12(%rax)
    00000248: 	movaps	%xmm0, 0x340(%rsp)
    00000250: 	movzbl	0x34b(%rsp), %esi
    00000258: 	movb	%sil, -0xf(%rax)
    0000025c: 	movaps	%xmm0, 0x330(%rsp)
    00000264: 	movzbl	0x33c(%rsp), %esi
    0000026c: 	movb	%sil, -0xc(%rax)
    00000270: 	movaps	%xmm0, 0x320(%rsp)
    00000278: 	movzbl	0x32d(%rsp), %esi
    00000280: 	movb	%sil, -0x9(%rax)
    00000284: 	movaps	%xmm0, 0x310(%rsp)
    0000028c: 	movzbl	0x31e(%rsp), %esi
    00000294: 	movb	%sil, -0x6(%rax)
    00000298: 	movaps	%xmm0, 0x300(%rsp)
    000002a0: 	movzbl	0x30f(%rsp), %esi
    000002a8: 	movb	%sil, -0x3(%rax)
    000002ac: 	cmpq	%rdi, %rcx
    000002af: 	jb	.Ltmp746 # Offset: 687
    000002b5: 	movq	%r11, %rcx
    000002b8: 	andq	$-0x10, %rcx
    000002bc: 	leal	(%rcx,%rcx,2), %eax
    000002bf: 	leaq	(%rcx,%rcx,2), %rsi
    000002c3: 	addl	%r12d, %eax
    000002c6: 	cmpq	%rcx, %r11
    000002c9: 	je	.Ltmp747 # Offset: 713
    000002cf: 	cvttsd2si	init_value(%rip), %ecx
    000002d7: 	movb	%cl, (%r9,%rsi)
    000002db: 	leal	0x3(%rax), %ecx
    000002de: 	movslq	%ecx, %rcx
    000002e1: 	cmpq	%rcx, %rbp
    000002e4: 	jbe	.Ltmp747 # Offset: 740
    000002ea: 	cvttsd2si	init_value(%rip), %esi
    000002f2: 	movb	%sil, 0x1(%r14,%rcx)
    000002f7: 	leal	0x6(%rax), %ecx
    000002fa: 	movslq	%ecx, %rcx
    000002fd: 	cmpq	%rcx, %rbp
    00000300: 	jbe	.Ltmp747 # Offset: 768
    00000306: 	cvttsd2si	init_value(%rip), %esi
    0000030e: 	movb	%sil, 0x1(%r14,%rcx)
    00000313: 	leal	0x9(%rax), %ecx
    00000316: 	movslq	%ecx, %rcx
    00000319: 	cmpq	%rcx, %rbp
    0000031c: 	jbe	.Ltmp747 # Offset: 796
    00000322: 	cvttsd2si	init_value(%rip), %esi
    0000032a: 	movb	%sil, 0x1(%r14,%rcx)
    0000032f: 	leal	0xc(%rax), %ecx
    00000332: 	movslq	%ecx, %rcx
    00000335: 	cmpq	%rcx, %rbp
    00000338: 	jbe	.Ltmp747 # Offset: 824
    0000033e: 	cvttsd2si	init_value(%rip), %esi
    00000346: 	movb	%sil, 0x1(%r14,%rcx)
    0000034b: 	leal	0xf(%rax), %ecx
    0000034e: 	movslq	%ecx, %rcx
    00000351: 	cmpq	%rcx, %rbp
    00000354: 	jbe	.Ltmp747 # Offset: 852
    0000035a: 	cvttsd2si	init_value(%rip), %esi
    00000362: 	movb	%sil, 0x1(%r14,%rcx)
    00000367: 	leal	0x12(%rax), %ecx
    0000036a: 	movslq	%ecx, %rcx
    0000036d: 	cmpq	%rcx, %rbp
    00000370: 	jbe	.Ltmp747 # Offset: 880
    00000376: 	cvttsd2si	init_value(%rip), %esi
    0000037e: 	movb	%sil, 0x1(%r14,%rcx)
    00000383: 	leal	0x15(%rax), %ecx
    00000386: 	movslq	%ecx, %rcx
    00000389: 	cmpq	%rcx, %rbp
    0000038c: 	jbe	.Ltmp747 # Offset: 908
    00000392: 	cvttsd2si	init_value(%rip), %esi
    0000039a: 	movb	%sil, 0x1(%r14,%rcx)
    0000039f: 	leal	0x18(%rax), %ecx
    000003a2: 	movslq	%ecx, %rcx
    000003a5: 	cmpq	%rcx, %rbp
    000003a8: 	jbe	.Ltmp747 # Offset: 936
    000003ae: 	cvttsd2si	init_value(%rip), %esi
    000003b6: 	movb	%sil, 0x1(%r14,%rcx)
    000003bb: 	leal	0x1b(%rax), %ecx
    000003be: 	movslq	%ecx, %rcx
    000003c1: 	cmpq	%rcx, %rbp
    000003c4: 	jbe	.Ltmp747 # Offset: 964
    000003ca: 	cvttsd2si	init_value(%rip), %esi
    000003d2: 	movb	%sil, 0x1(%r14,%rcx)
    000003d7: 	leal	0x1e(%rax), %ecx
    000003da: 	movslq	%ecx, %rcx
    000003dd: 	cmpq	%rcx, %rbp
    000003e0: 	jbe	.Ltmp747 # Offset: 992
    000003e2: 	cvttsd2si	init_value(%rip), %esi
    000003ea: 	movb	%sil, 0x1(%r14,%rcx)
    000003ef: 	leal	0x21(%rax), %ecx
    000003f2: 	movslq	%ecx, %rcx
    000003f5: 	cmpq	%rcx, %rbp
    000003f8: 	jbe	.Ltmp747 # Offset: 1016
    000003fa: 	cvttsd2si	init_value(%rip), %esi
    00000402: 	movb	%sil, 0x1(%r14,%rcx)
    00000407: 	leal	0x24(%rax), %ecx
    0000040a: 	movslq	%ecx, %rcx
    0000040d: 	cmpq	%rcx, %rbp
    00000410: 	jbe	.Ltmp747 # Offset: 1040
    00000412: 	cvttsd2si	init_value(%rip), %esi
    0000041a: 	movb	%sil, 0x1(%r14,%rcx)
    0000041f: 	leal	0x27(%rax), %ecx
    00000422: 	movslq	%ecx, %rcx
    00000425: 	cmpq	%rcx, %rbp
    00000428: 	jbe	.Ltmp747 # Offset: 1064
    0000042a: 	cvttsd2si	init_value(%rip), %esi
    00000432: 	addl	$0x2a, %eax
    00000435: 	cltq
    00000437: 	movb	%sil, 0x1(%r14,%rcx)
    0000043c: 	cmpq	%rax, %rbp
    0000043f: 	jbe	.Ltmp747 # Offset: 1087
    00000441: 	cvttsd2si	init_value(%rip), %ecx
    00000449: 	movb	%cl, 0x1(%r14,%rax)
.Ltmp747:
    0000044e: 	leaq	0x3(%r14,%rdx), %rax
    00000453: 	leaq	init_value(%rip), %rdi
    0000045a: 	cmpq	%rdi, %rax
    0000045d: 	leaq	0x2(%r14,%rbx), %rsi
    00000462: 	setbe	%al
    00000465: 	cmpq	%r15, %rsi
    00000468: 	setae	%dl
    0000046b: 	orb	%dl, %al
    0000046d: 	je	.Ltmp748 # Offset: 1133
    00000473: 	testb	%r10b, %r10b
    00000476: 	je	.Ltmp748 # Offset: 1142
    0000047c: 	movsd	init_value(%rip), %xmm1
    00000484: 	addq	$0x1, %r8
    00000488: 	movq	%rsi, %rax
    0000048b: 	xorl	%edx, %edx
    0000048d: 	movq	%r8, %rdi
    00000490: 	unpcklpd	%xmm1, %xmm1
    00000494: 	shrq	$0x4, %rdi
    00000498: 	cvttpd2dq	%xmm1, %xmm1
    0000049c: 	punpcklqdq	%xmm1, %xmm1
    000004a0: 	movdqa	%xmm1, %xmm3
    000004a4: 	punpckhwd	%xmm1, %xmm3
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp749:
    000004b0: 	movdqa	%xmm1, %xmm0
    000004b4: 	addq	$0x1, %rdx
    000004b8: 	addq	$0x30, %rax
    000004bc: 	punpcklwd	%xmm1, %xmm0
    000004c0: 	movdqa	%xmm0, %xmm4
    000004c4: 	punpcklwd	%xmm3, %xmm0
    000004c8: 	punpckhwd	%xmm3, %xmm4
    000004cc: 	punpcklwd	%xmm4, %xmm0
    000004d0: 	pand	%xmm2, %xmm0
    000004d4: 	packuswb	%xmm0, %xmm0
    000004d8: 	movd	%xmm0, %ecx
    000004dc: 	movb	%cl, -0x30(%rax)
    000004df: 	movaps	%xmm0, 0x2f0(%rsp)
    000004e7: 	movzbl	0x2f1(%rsp), %ecx
    000004ef: 	movb	%cl, -0x2d(%rax)
    000004f2: 	movaps	%xmm0, 0x2e0(%rsp)
    000004fa: 	movzbl	0x2e2(%rsp), %ecx
    00000502: 	movb	%cl, -0x2a(%rax)
    00000505: 	movaps	%xmm0, 0x2d0(%rsp)
    0000050d: 	movzbl	0x2d3(%rsp), %ecx
    00000515: 	movb	%cl, -0x27(%rax)
    00000518: 	movaps	%xmm0, 0x2c0(%rsp)
    00000520: 	movzbl	0x2c4(%rsp), %ecx
    00000528: 	movb	%cl, -0x24(%rax)
    0000052b: 	movaps	%xmm0, 0x2b0(%rsp)
    00000533: 	movzbl	0x2b5(%rsp), %ecx
    0000053b: 	movb	%cl, -0x21(%rax)
    0000053e: 	movaps	%xmm0, 0x2a0(%rsp)
    00000546: 	movzbl	0x2a6(%rsp), %ecx
    0000054e: 	movb	%cl, -0x1e(%rax)
    00000551: 	movaps	%xmm0, 0x290(%rsp)
    00000559: 	movzbl	0x297(%rsp), %ecx
    00000561: 	movb	%cl, -0x1b(%rax)
    00000564: 	movaps	%xmm0, 0x280(%rsp)
    0000056c: 	movzbl	0x288(%rsp), %ecx
    00000574: 	movb	%cl, -0x18(%rax)
    00000577: 	movaps	%xmm0, 0x270(%rsp)
    0000057f: 	movzbl	0x279(%rsp), %ecx
    00000587: 	movb	%cl, -0x15(%rax)
    0000058a: 	movaps	%xmm0, 0x260(%rsp)
    00000592: 	movzbl	0x26a(%rsp), %ecx
    0000059a: 	movb	%cl, -0x12(%rax)
    0000059d: 	movaps	%xmm0, 0x250(%rsp)
    000005a5: 	movzbl	0x25b(%rsp), %ecx
    000005ad: 	movb	%cl, -0xf(%rax)
    000005b0: 	movaps	%xmm0, 0x240(%rsp)
    000005b8: 	movzbl	0x24c(%rsp), %ecx
    000005c0: 	movb	%cl, -0xc(%rax)
    000005c3: 	movaps	%xmm0, 0x230(%rsp)
    000005cb: 	movzbl	0x23d(%rsp), %ecx
    000005d3: 	movb	%cl, -0x9(%rax)
    000005d6: 	movaps	%xmm0, 0x220(%rsp)
    000005de: 	movzbl	0x22e(%rsp), %ecx
    000005e6: 	movb	%cl, -0x6(%rax)
    000005e9: 	movaps	%xmm0, 0x210(%rsp)
    000005f1: 	movzbl	0x21f(%rsp), %ecx
    000005f9: 	movb	%cl, -0x3(%rax)
    000005fc: 	cmpq	%rdx, %rdi
    000005ff: 	ja	.Ltmp749 # Offset: 1535
    00000605: 	movq	%r8, %rdx
    00000608: 	andq	$-0x10, %rdx
    0000060c: 	leal	(%rdx,%rdx,2), %eax
    0000060f: 	leaq	(%rdx,%rdx,2), %rcx
    00000613: 	addl	%r12d, %eax
    00000616: 	cmpq	%rdx, %r8
    00000619: 	je	.Ltmp744 # Offset: 1561
    0000061f: 	cvttsd2si	init_value(%rip), %edx
    00000627: 	movb	%dl, (%rsi,%rcx)
    0000062a: 	leal	0x3(%rax), %edx
    0000062d: 	movslq	%edx, %rdx
    00000630: 	cmpq	%rdx, %rbp
    00000633: 	jbe	.Ltmp744 # Offset: 1587
    00000639: 	cvttsd2si	init_value(%rip), %ecx
    00000641: 	movb	%cl, 0x2(%r14,%rdx)
    00000646: 	leal	0x6(%rax), %edx
    00000649: 	movslq	%edx, %rdx
    0000064c: 	cmpq	%rdx, %rbp
    0000064f: 	jbe	.Ltmp744 # Offset: 1615
    00000655: 	cvttsd2si	init_value(%rip), %ecx
    0000065d: 	movb	%cl, 0x2(%r14,%rdx)
    00000662: 	leal	0x9(%rax), %edx
    00000665: 	movslq	%edx, %rdx
    00000668: 	cmpq	%rdx, %rbp
    0000066b: 	jbe	.Ltmp744 # Offset: 1643
    00000671: 	cvttsd2si	init_value(%rip), %ecx
    00000679: 	movb	%cl, 0x2(%r14,%rdx)
    0000067e: 	leal	0xc(%rax), %edx
    00000681: 	movslq	%edx, %rdx
    00000684: 	cmpq	%rdx, %rbp
    00000687: 	jbe	.Ltmp744 # Offset: 1671
    0000068d: 	cvttsd2si	init_value(%rip), %ecx
    00000695: 	movb	%cl, 0x2(%r14,%rdx)
    0000069a: 	leal	0xf(%rax), %edx
    0000069d: 	movslq	%edx, %rdx
    000006a0: 	cmpq	%rdx, %rbp
    000006a3: 	jbe	.Ltmp744 # Offset: 1699
    000006a9: 	cvttsd2si	init_value(%rip), %ecx
    000006b1: 	movb	%cl, 0x2(%r14,%rdx)
    000006b6: 	leal	0x12(%rax), %edx
    000006b9: 	movslq	%edx, %rdx
    000006bc: 	cmpq	%rdx, %rbp
    000006bf: 	jbe	.Ltmp744 # Offset: 1727
    000006c5: 	cvttsd2si	init_value(%rip), %ecx
    000006cd: 	movb	%cl, 0x2(%r14,%rdx)
    000006d2: 	leal	0x15(%rax), %edx
    000006d5: 	movslq	%edx, %rdx
    000006d8: 	cmpq	%rdx, %rbp
    000006db: 	jbe	.Ltmp744 # Offset: 1755
    000006e1: 	cvttsd2si	init_value(%rip), %ecx
    000006e9: 	movb	%cl, 0x2(%r14,%rdx)
    000006ee: 	leal	0x18(%rax), %edx
    000006f1: 	movslq	%edx, %rdx
    000006f4: 	cmpq	%rdx, %rbp
    000006f7: 	jbe	.Ltmp744 # Offset: 1783
    000006fd: 	cvttsd2si	init_value(%rip), %ecx
    00000705: 	movb	%cl, 0x2(%r14,%rdx)
    0000070a: 	leal	0x1b(%rax), %edx
    0000070d: 	movslq	%edx, %rdx
    00000710: 	cmpq	%rdx, %rbp
    00000713: 	jbe	.Ltmp744 # Offset: 1811
    00000719: 	cvttsd2si	init_value(%rip), %ecx
    00000721: 	movb	%cl, 0x2(%r14,%rdx)
    00000726: 	leal	0x1e(%rax), %edx
    00000729: 	movslq	%edx, %rdx
    0000072c: 	cmpq	%rdx, %rbp
    0000072f: 	jbe	.Ltmp744 # Offset: 1839
    00000731: 	cvttsd2si	init_value(%rip), %ecx
    00000739: 	movb	%cl, 0x2(%r14,%rdx)
    0000073e: 	leal	0x21(%rax), %edx
    00000741: 	movslq	%edx, %rdx
    00000744: 	cmpq	%rdx, %rbp
    00000747: 	jbe	.Ltmp744 # Offset: 1863
    00000749: 	cvttsd2si	init_value(%rip), %ecx
    00000751: 	movb	%cl, 0x2(%r14,%rdx)
    00000756: 	leal	0x24(%rax), %edx
    00000759: 	movslq	%edx, %rdx
    0000075c: 	cmpq	%rdx, %rbp
    0000075f: 	jbe	.Ltmp744 # Offset: 1887
    00000761: 	cvttsd2si	init_value(%rip), %ecx
    00000769: 	movb	%cl, 0x2(%r14,%rdx)
    0000076e: 	leal	0x27(%rax), %edx
    00000771: 	movslq	%edx, %rdx
    00000774: 	cmpq	%rdx, %rbp
    00000777: 	jbe	.Ltmp744 # Offset: 1911
    00000779: 	cvttsd2si	init_value(%rip), %ecx
    00000781: 	addl	$0x2a, %eax
    00000784: 	cltq
    00000786: 	movb	%cl, 0x2(%r14,%rdx)
    0000078b: 	cmpq	%rax, %rbp
    0000078e: 	jbe	.Ltmp744 # Offset: 1934
    00000790: 	cvttsd2si	init_value(%rip), %edx
    00000798: 	movb	%dl, 0x2(%r14,%rax)
.Ltmp744:
    0000079d: 	movslq	%ebp, %r15
    000007a0: 	movl	%ebp, %r12d
    000007a3: 	cmpq	%r13, %r15
    000007a6: 	jb	.Ltmp750 # Offset: 1958
    000007ac: 	movl	0x24(%rsp), %r13d
    000007b1: 	cmpl	%ebp, 0xc(%rsp)
    000007b5: 	jle	.Ltmp751 # Offset: 1973
.Ltmp743:
    000007b7: 	movl	0xc(%rsp), %eax
    000007bb: 	movslq	%r12d, %rdi
    000007be: 	leal	-0x1(%rax), %edx
    000007c1: 	subl	%r12d, %edx
    000007c4: 	addq	$0x1, %rdx
    000007c8: 	cmpl	%eax, %r12d
    000007cb: 	movl	$0x1, %eax
    000007d0: 	cmovgeq	%rax, %rdx
    000007d4: 	addq	%r14, %rdi
    000007d7: 	xorl	%esi, %esi
    000007d9: 	callq	memset@PLT # Offset: 2009
    000007de: 	movdqa	DATAat0x36f20(%rip), %xmm2
.Ltmp751:
    000007e6: 	cmpl	%r12d, %r13d
    000007e9: 	jle	.Ltmp752 # Offset: 2025
    000007ef: 	movl	0xc(%rsp), %eax
    000007f3: 	movl	$0xaaaaaaab, %esi
    000007f8: 	movslq	%r12d, %rcx
    000007fb: 	leaq	init_value(%rip), %r9
    00000802: 	leal	-0x3(%rax), %edx
    00000805: 	leaq	0x1(%r14,%rcx), %rax
    0000080a: 	subl	%r12d, %edx
    0000080d: 	cmpl	$0x2c, %edx
    00000810: 	seta	%dil
    00000814: 	imulq	%rsi, %rdx
    00000818: 	shrq	$0x21, %rdx
    0000081c: 	leal	0x1(%rdx), %esi
    0000081f: 	movq	%rsi, %rdx
    00000822: 	leaq	(%rsi,%rsi,2), %rsi
    00000826: 	addq	%rcx, %rsi
    00000829: 	leaq	-0x1(%r14,%rsi), %r8
    0000082e: 	cmpq	%r9, %r8
    00000831: 	leaq	0x8(%r9), %r8
    00000835: 	setbe	%r10b
    00000839: 	cmpq	%r8, %rax
    0000083c: 	setae	%r11b
    00000840: 	orb	%r11b, %r10b
    00000843: 	je	.Ltmp753 # Offset: 2115
    00000849: 	testb	%dil, %dil
    0000084c: 	je	.Ltmp753 # Offset: 2124
    00000852: 	movsd	init_value(%rip), %xmm1
    0000085a: 	movl	%edx, %r10d
    0000085d: 	movdqa	DATAat0x36f20(%rip), %xmm5
    00000865: 	shrl	$0x4, %r10d
    00000869: 	unpcklpd	%xmm1, %xmm1
    0000086d: 	subl	$0x1, %r10d
    00000871: 	leaq	(%r10,%r10,2), %r10
    00000875: 	cvttpd2dq	%xmm1, %xmm1
    00000879: 	punpcklqdq	%xmm1, %xmm1
    0000087d: 	shlq	$0x4, %r10
    00000881: 	movdqa	%xmm1, %xmm3
    00000885: 	leaq	0x30(%rax,%r10), %r11
    0000088a: 	punpckhwd	%xmm1, %xmm3
.Ltmp754:
    0000088e: 	movdqa	%xmm1, %xmm0
    00000892: 	addq	$0x30, %rax
    00000896: 	punpcklwd	%xmm1, %xmm0
    0000089a: 	movdqa	%xmm0, %xmm4
    0000089e: 	punpcklwd	%xmm3, %xmm0
    000008a2: 	punpckhwd	%xmm3, %xmm4
    000008a6: 	punpcklwd	%xmm4, %xmm0
    000008aa: 	pand	%xmm5, %xmm0
    000008ae: 	packuswb	%xmm0, %xmm0
    000008b2: 	movd	%xmm0, %r10d
    000008b7: 	movb	%r10b, -0x30(%rax)
    000008bb: 	movaps	%xmm0, 0x200(%rsp)
    000008c3: 	movzbl	0x201(%rsp), %r10d
    000008cc: 	movb	%r10b, -0x2d(%rax)
    000008d0: 	movaps	%xmm0, 0x1f0(%rsp)
    000008d8: 	movzbl	0x1f2(%rsp), %r10d
    000008e1: 	movb	%r10b, -0x2a(%rax)
    000008e5: 	movaps	%xmm0, 0x1e0(%rsp)
    000008ed: 	movzbl	0x1e3(%rsp), %r10d
    000008f6: 	movb	%r10b, -0x27(%rax)
    000008fa: 	movaps	%xmm0, 0x1d0(%rsp)
    00000902: 	movzbl	0x1d4(%rsp), %r10d
    0000090b: 	movb	%r10b, -0x24(%rax)
    0000090f: 	movaps	%xmm0, 0x1c0(%rsp)
    00000917: 	movzbl	0x1c5(%rsp), %r10d
    00000920: 	movb	%r10b, -0x21(%rax)
    00000924: 	movaps	%xmm0, 0x1b0(%rsp)
    0000092c: 	movzbl	0x1b6(%rsp), %r10d
    00000935: 	movb	%r10b, -0x1e(%rax)
    00000939: 	movaps	%xmm0, 0x1a0(%rsp)
    00000941: 	movzbl	0x1a7(%rsp), %r10d
    0000094a: 	movb	%r10b, -0x1b(%rax)
    0000094e: 	movaps	%xmm0, 0x190(%rsp)
    00000956: 	movzbl	0x198(%rsp), %r10d
    0000095f: 	movb	%r10b, -0x18(%rax)
    00000963: 	movaps	%xmm0, 0x180(%rsp)
    0000096b: 	movzbl	0x189(%rsp), %r10d
    00000974: 	movb	%r10b, -0x15(%rax)
    00000978: 	movaps	%xmm0, 0x170(%rsp)
    00000980: 	movzbl	0x17a(%rsp), %r10d
    00000989: 	movb	%r10b, -0x12(%rax)
    0000098d: 	movaps	%xmm0, 0x160(%rsp)
    00000995: 	movzbl	0x16b(%rsp), %r10d
    0000099e: 	movb	%r10b, -0xf(%rax)
    000009a2: 	movaps	%xmm0, 0x150(%rsp)
    000009aa: 	movzbl	0x15c(%rsp), %r10d
    000009b3: 	movb	%r10b, -0xc(%rax)
    000009b7: 	movaps	%xmm0, 0x140(%rsp)
    000009bf: 	movzbl	0x14d(%rsp), %r10d
    000009c8: 	movb	%r10b, -0x9(%rax)
    000009cc: 	movaps	%xmm0, 0x130(%rsp)
    000009d4: 	movzbl	0x13e(%rsp), %r10d
    000009dd: 	movb	%r10b, -0x6(%rax)
    000009e1: 	movaps	%xmm0, 0x120(%rsp)
    000009e9: 	movzbl	0x12f(%rsp), %r10d
    000009f2: 	movb	%r10b, -0x3(%rax)
    000009f6: 	cmpq	%r11, %rax
    000009f9: 	jne	.Ltmp754 # Offset: 2553
    000009ff: 	movl	%edx, %r10d
    00000a02: 	andl	$-0x10, %r10d
    00000a06: 	leal	(%r10,%r10,2), %eax
    00000a0a: 	addl	%r12d, %eax
    00000a0d: 	cmpl	%r10d, %edx
    00000a10: 	je	.Ltmp755 # Offset: 2576
    00000a16: 	cvttsd2si	init_value(%rip), %r11d
    00000a1f: 	leal	0x1(%rax), %r10d
    00000a23: 	movslq	%r10d, %r10
    00000a26: 	movb	%r11b, (%r14,%r10)
    00000a2a: 	leal	0x3(%rax), %r10d
    00000a2e: 	cmpl	%r10d, %r13d
    00000a31: 	jle	.Ltmp755 # Offset: 2609
    00000a37: 	cvttsd2si	init_value(%rip), %r11d
    00000a40: 	leal	0x4(%rax), %r10d
    00000a44: 	movslq	%r10d, %r10
    00000a47: 	movb	%r11b, (%r14,%r10)
    00000a4b: 	leal	0x6(%rax), %r10d
    00000a4f: 	cmpl	%r10d, %r13d
    00000a52: 	jle	.Ltmp755 # Offset: 2642
    00000a58: 	cvttsd2si	init_value(%rip), %r11d
    00000a61: 	leal	0x7(%rax), %r10d
    00000a65: 	movslq	%r10d, %r10
    00000a68: 	movb	%r11b, (%r14,%r10)
    00000a6c: 	leal	0x9(%rax), %r10d
    00000a70: 	cmpl	%r10d, %r13d
    00000a73: 	jle	.Ltmp755 # Offset: 2675
    00000a79: 	cvttsd2si	init_value(%rip), %r11d
    00000a82: 	leal	0xa(%rax), %r10d
    00000a86: 	movslq	%r10d, %r10
    00000a89: 	movb	%r11b, (%r14,%r10)
    00000a8d: 	leal	0xc(%rax), %r10d
    00000a91: 	cmpl	%r10d, %r13d
    00000a94: 	jle	.Ltmp755 # Offset: 2708
    00000a9a: 	cvttsd2si	init_value(%rip), %r11d
    00000aa3: 	leal	0xd(%rax), %r10d
    00000aa7: 	movslq	%r10d, %r10
    00000aaa: 	movb	%r11b, (%r14,%r10)
    00000aae: 	leal	0xf(%rax), %r10d
    00000ab2: 	cmpl	%r10d, %r13d
    00000ab5: 	jle	.Ltmp755 # Offset: 2741
    00000abb: 	cvttsd2si	init_value(%rip), %r11d
    00000ac4: 	leal	0x10(%rax), %r10d
    00000ac8: 	movslq	%r10d, %r10
    00000acb: 	movb	%r11b, (%r14,%r10)
    00000acf: 	leal	0x12(%rax), %r10d
    00000ad3: 	cmpl	%r10d, %r13d
    00000ad6: 	jle	.Ltmp755 # Offset: 2774
    00000adc: 	cvttsd2si	init_value(%rip), %r11d
    00000ae5: 	leal	0x13(%rax), %r10d
    00000ae9: 	movslq	%r10d, %r10
    00000aec: 	movb	%r11b, (%r14,%r10)
    00000af0: 	leal	0x15(%rax), %r10d
    00000af4: 	cmpl	%r10d, %r13d
    00000af7: 	jle	.Ltmp755 # Offset: 2807
    00000afd: 	cvttsd2si	init_value(%rip), %r11d
    00000b06: 	leal	0x16(%rax), %r10d
    00000b0a: 	movslq	%r10d, %r10
    00000b0d: 	movb	%r11b, (%r14,%r10)
    00000b11: 	leal	0x18(%rax), %r10d
    00000b15: 	cmpl	%r10d, %r13d
    00000b18: 	jle	.Ltmp755 # Offset: 2840
    00000b1e: 	cvttsd2si	init_value(%rip), %r11d
    00000b27: 	leal	0x19(%rax), %r10d
    00000b2b: 	movslq	%r10d, %r10
    00000b2e: 	movb	%r11b, (%r14,%r10)
    00000b32: 	leal	0x1b(%rax), %r10d
    00000b36: 	cmpl	%r10d, %r13d
    00000b39: 	jle	.Ltmp755 # Offset: 2873
    00000b3f: 	cvttsd2si	init_value(%rip), %r11d
    00000b48: 	leal	0x1c(%rax), %r10d
    00000b4c: 	movslq	%r10d, %r10
    00000b4f: 	movb	%r11b, (%r14,%r10)
    00000b53: 	leal	0x1e(%rax), %r10d
    00000b57: 	cmpl	%r10d, %r13d
    00000b5a: 	jle	.Ltmp755 # Offset: 2906
    00000b60: 	cvttsd2si	init_value(%rip), %r11d
    00000b69: 	leal	0x1f(%rax), %r10d
    00000b6d: 	movslq	%r10d, %r10
    00000b70: 	movb	%r11b, (%r14,%r10)
    00000b74: 	leal	0x21(%rax), %r10d
    00000b78: 	cmpl	%r10d, %r13d
    00000b7b: 	jle	.Ltmp755 # Offset: 2939
    00000b7d: 	cvttsd2si	init_value(%rip), %r11d
    00000b86: 	leal	0x22(%rax), %r10d
    00000b8a: 	movslq	%r10d, %r10
    00000b8d: 	movb	%r11b, (%r14,%r10)
    00000b91: 	leal	0x24(%rax), %r10d
    00000b95: 	cmpl	%r10d, %r13d
    00000b98: 	jle	.Ltmp755 # Offset: 2968
    00000b9a: 	cvttsd2si	init_value(%rip), %r11d
    00000ba3: 	leal	0x25(%rax), %r10d
    00000ba7: 	movslq	%r10d, %r10
    00000baa: 	movb	%r11b, (%r14,%r10)
    00000bae: 	leal	0x27(%rax), %r10d
    00000bb2: 	cmpl	%r10d, %r13d
    00000bb5: 	jle	.Ltmp755 # Offset: 2997
    00000bb7: 	cvttsd2si	init_value(%rip), %r11d
    00000bc0: 	leal	0x28(%rax), %r10d
    00000bc4: 	movslq	%r10d, %r10
    00000bc7: 	movb	%r11b, (%r14,%r10)
    00000bcb: 	leal	0x2a(%rax), %r10d
    00000bcf: 	cmpl	%r10d, %r13d
    00000bd2: 	jle	.Ltmp755 # Offset: 3026
    00000bd4: 	cvttsd2si	init_value(%rip), %r10d
    00000bdd: 	addl	$0x2b, %eax
    00000be0: 	cltq
    00000be2: 	movb	%r10b, (%r14,%rax)
.Ltmp755:
    00000be6: 	addq	%r14, %rsi
    00000be9: 	leaq	0x2(%r14,%rcx), %rax
    00000bee: 	cmpq	%r9, %rsi
    00000bf1: 	setbe	%sil
    00000bf5: 	cmpq	%r8, %rax
    00000bf8: 	setae	%r8b
    00000bfc: 	orb	%r8b, %sil
    00000bff: 	je	.Ltmp756 # Offset: 3071
    00000c05: 	testb	%dil, %dil
    00000c08: 	je	.Ltmp756 # Offset: 3080
    00000c0e: 	movsd	init_value(%rip), %xmm1
    00000c16: 	movl	%edx, %ecx
    00000c18: 	shrl	$0x4, %ecx
    00000c1b: 	unpcklpd	%xmm1, %xmm1
    00000c1f: 	subl	$0x1, %ecx
    00000c22: 	leaq	(%rcx,%rcx,2), %rcx
    00000c26: 	cvttpd2dq	%xmm1, %xmm1
    00000c2a: 	punpcklqdq	%xmm1, %xmm1
    00000c2e: 	shlq	$0x4, %rcx
    00000c32: 	movdqa	%xmm1, %xmm3
    00000c36: 	leaq	0x30(%rax,%rcx), %rsi
    00000c3b: 	punpckhwd	%xmm1, %xmm3
.Ltmp757:
    00000c3f: 	movdqa	%xmm1, %xmm0
    00000c43: 	addq	$0x30, %rax
    00000c47: 	punpcklwd	%xmm1, %xmm0
    00000c4b: 	movdqa	%xmm0, %xmm4
    00000c4f: 	punpcklwd	%xmm3, %xmm0
    00000c53: 	punpckhwd	%xmm3, %xmm4
    00000c57: 	punpcklwd	%xmm4, %xmm0
    00000c5b: 	pand	%xmm2, %xmm0
    00000c5f: 	packuswb	%xmm0, %xmm0
    00000c63: 	movd	%xmm0, %ecx
    00000c67: 	movb	%cl, -0x30(%rax)
    00000c6a: 	movaps	%xmm0, 0x110(%rsp)
    00000c72: 	movzbl	0x111(%rsp), %ecx
    00000c7a: 	movb	%cl, -0x2d(%rax)
    00000c7d: 	movaps	%xmm0, 0x100(%rsp)
    00000c85: 	movzbl	0x102(%rsp), %ecx
    00000c8d: 	movb	%cl, -0x2a(%rax)
    00000c90: 	movaps	%xmm0, 0xf0(%rsp)
    00000c98: 	movzbl	0xf3(%rsp), %ecx
    00000ca0: 	movb	%cl, -0x27(%rax)
    00000ca3: 	movaps	%xmm0, 0xe0(%rsp)
    00000cab: 	movzbl	0xe4(%rsp), %ecx
    00000cb3: 	movb	%cl, -0x24(%rax)
    00000cb6: 	movaps	%xmm0, 0xd0(%rsp)
    00000cbe: 	movzbl	0xd5(%rsp), %ecx
    00000cc6: 	movb	%cl, -0x21(%rax)
    00000cc9: 	movaps	%xmm0, 0xc0(%rsp)
    00000cd1: 	movzbl	0xc6(%rsp), %ecx
    00000cd9: 	movb	%cl, -0x1e(%rax)
    00000cdc: 	movaps	%xmm0, 0xb0(%rsp)
    00000ce4: 	movzbl	0xb7(%rsp), %ecx
    00000cec: 	movb	%cl, -0x1b(%rax)
    00000cef: 	movaps	%xmm0, 0xa0(%rsp)
    00000cf7: 	movzbl	0xa8(%rsp), %ecx
    00000cff: 	movb	%cl, -0x18(%rax)
    00000d02: 	movaps	%xmm0, 0x90(%rsp)
    00000d0a: 	movzbl	0x99(%rsp), %ecx
    00000d12: 	movb	%cl, -0x15(%rax)
    00000d15: 	movaps	%xmm0, 0x80(%rsp)
    00000d1d: 	movzbl	0x8a(%rsp), %ecx
    00000d25: 	movb	%cl, -0x12(%rax)
    00000d28: 	movaps	%xmm0, 0x70(%rsp)
    00000d2d: 	movzbl	0x7b(%rsp), %ecx
    00000d32: 	movb	%cl, -0xf(%rax)
    00000d35: 	movaps	%xmm0, 0x60(%rsp)
    00000d3a: 	movzbl	0x6c(%rsp), %ecx
    00000d3f: 	movb	%cl, -0xc(%rax)
    00000d42: 	movaps	%xmm0, 0x50(%rsp)
    00000d47: 	movzbl	0x5d(%rsp), %ecx
    00000d4c: 	movb	%cl, -0x9(%rax)
    00000d4f: 	movaps	%xmm0, 0x40(%rsp)
    00000d54: 	movzbl	0x4e(%rsp), %ecx
    00000d59: 	movb	%cl, -0x6(%rax)
    00000d5c: 	movaps	%xmm0, 0x30(%rsp)
    00000d61: 	movzbl	0x3f(%rsp), %ecx
    00000d66: 	movb	%cl, -0x3(%rax)
    00000d69: 	cmpq	%rsi, %rax
    00000d6c: 	jne	.Ltmp757 # Offset: 3436
    00000d72: 	movl	%edx, %ecx
    00000d74: 	andl	$-0x10, %ecx
    00000d77: 	leal	(%rcx,%rcx,2), %eax
    00000d7a: 	addl	%r12d, %eax
    00000d7d: 	cmpl	%edx, %ecx
    00000d7f: 	je	.Ltmp752 # Offset: 3455
    00000d85: 	cvttsd2si	init_value(%rip), %ecx
    00000d8d: 	leal	0x2(%rax), %edx
    00000d90: 	movslq	%edx, %rdx
    00000d93: 	movb	%cl, (%r14,%rdx)
    00000d97: 	leal	0x3(%rax), %edx
    00000d9a: 	cmpl	%edx, %r13d
    00000d9d: 	jle	.Ltmp752 # Offset: 3485
    00000da3: 	cvttsd2si	init_value(%rip), %ecx
    00000dab: 	leal	0x5(%rax), %edx
    00000dae: 	movslq	%edx, %rdx
    00000db1: 	movb	%cl, (%r14,%rdx)
    00000db5: 	leal	0x6(%rax), %edx
    00000db8: 	cmpl	%edx, %r13d
    00000dbb: 	jle	.Ltmp752 # Offset: 3515
    00000dc1: 	cvttsd2si	init_value(%rip), %ecx
    00000dc9: 	leal	0x8(%rax), %edx
    00000dcc: 	movslq	%edx, %rdx
    00000dcf: 	movb	%cl, (%r14,%rdx)
    00000dd3: 	leal	0x9(%rax), %edx
    00000dd6: 	cmpl	%edx, %r13d
    00000dd9: 	jle	.Ltmp752 # Offset: 3545
    00000ddf: 	cvttsd2si	init_value(%rip), %ecx
    00000de7: 	leal	0xb(%rax), %edx
    00000dea: 	movslq	%edx, %rdx
    00000ded: 	movb	%cl, (%r14,%rdx)
    00000df1: 	leal	0xc(%rax), %edx
    00000df4: 	cmpl	%edx, %r13d
    00000df7: 	jle	.Ltmp752 # Offset: 3575
    00000dfd: 	cvttsd2si	init_value(%rip), %ecx
    00000e05: 	leal	0xe(%rax), %edx
    00000e08: 	movslq	%edx, %rdx
    00000e0b: 	movb	%cl, (%r14,%rdx)
    00000e0f: 	leal	0xf(%rax), %edx
    00000e12: 	cmpl	%edx, %r13d
    00000e15: 	jle	.Ltmp752 # Offset: 3605
    00000e1b: 	cvttsd2si	init_value(%rip), %ecx
    00000e23: 	leal	0x11(%rax), %edx
    00000e26: 	movslq	%edx, %rdx
    00000e29: 	movb	%cl, (%r14,%rdx)
    00000e2d: 	leal	0x12(%rax), %edx
    00000e30: 	cmpl	%edx, %r13d
    00000e33: 	jle	.Ltmp752 # Offset: 3635
    00000e39: 	cvttsd2si	init_value(%rip), %ecx
    00000e41: 	leal	0x14(%rax), %edx
    00000e44: 	movslq	%edx, %rdx
    00000e47: 	movb	%cl, (%r14,%rdx)
    00000e4b: 	leal	0x15(%rax), %edx
    00000e4e: 	cmpl	%edx, %r13d
    00000e51: 	jle	.Ltmp752 # Offset: 3665
    00000e57: 	cvttsd2si	init_value(%rip), %ecx
    00000e5f: 	leal	0x17(%rax), %edx
    00000e62: 	movslq	%edx, %rdx
    00000e65: 	movb	%cl, (%r14,%rdx)
    00000e69: 	leal	0x18(%rax), %edx
    00000e6c: 	cmpl	%edx, %r13d
    00000e6f: 	jle	.Ltmp752 # Offset: 3695
    00000e75: 	cvttsd2si	init_value(%rip), %ecx
    00000e7d: 	leal	0x1a(%rax), %edx
    00000e80: 	movslq	%edx, %rdx
    00000e83: 	movb	%cl, (%r14,%rdx)
    00000e87: 	leal	0x1b(%rax), %edx
    00000e8a: 	cmpl	%edx, %r13d
    00000e8d: 	jle	.Ltmp752 # Offset: 3725
    00000e93: 	cvttsd2si	init_value(%rip), %ecx
    00000e9b: 	leal	0x1d(%rax), %edx
    00000e9e: 	movslq	%edx, %rdx
    00000ea1: 	movb	%cl, (%r14,%rdx)
    00000ea5: 	leal	0x1e(%rax), %edx
    00000ea8: 	cmpl	%edx, %r13d
    00000eab: 	jle	.Ltmp752 # Offset: 3755
    00000ead: 	cvttsd2si	init_value(%rip), %ecx
    00000eb5: 	leal	0x20(%rax), %edx
    00000eb8: 	movslq	%edx, %rdx
    00000ebb: 	movb	%cl, (%r14,%rdx)
    00000ebf: 	leal	0x21(%rax), %edx
    00000ec2: 	cmpl	%edx, %r13d
    00000ec5: 	jle	.Ltmp752 # Offset: 3781
    00000ec7: 	cvttsd2si	init_value(%rip), %ecx
    00000ecf: 	leal	0x23(%rax), %edx
    00000ed2: 	movslq	%edx, %rdx
    00000ed5: 	movb	%cl, (%r14,%rdx)
    00000ed9: 	leal	0x24(%rax), %edx
    00000edc: 	cmpl	%edx, %r13d
    00000edf: 	jle	.Ltmp752 # Offset: 3807
    00000ee1: 	cvttsd2si	init_value(%rip), %ecx
    00000ee9: 	leal	0x26(%rax), %edx
    00000eec: 	movslq	%edx, %rdx
    00000eef: 	movb	%cl, (%r14,%rdx)
    00000ef3: 	leal	0x27(%rax), %edx
    00000ef6: 	cmpl	%edx, %r13d
    00000ef9: 	jle	.Ltmp752 # Offset: 3833
    00000efb: 	cvttsd2si	init_value(%rip), %ecx
    00000f03: 	leal	0x29(%rax), %edx
    00000f06: 	movslq	%edx, %rdx
    00000f09: 	movb	%cl, (%r14,%rdx)
    00000f0d: 	leal	0x2a(%rax), %edx
    00000f10: 	cmpl	%edx, %r13d
    00000f13: 	jle	.Ltmp752 # Offset: 3859
    00000f15: 	cvttsd2si	init_value(%rip), %edx
    00000f1d: 	addl	$0x2c, %eax
    00000f20: 	cltq
    00000f22: 	movb	%dl, (%r14,%rax)
.Ltmp752:
    00000f26: 	addl	$0x1, 0x20(%rsp)
    00000f2b: 	movl	0x20(%rsp), %eax
    00000f2f: 	cmpl	%eax, iterations(%rip)
    00000f35: 	jg	.Ltmp758 # Offset: 3893
.Ltmp742:
    00000f3b: 	callq	clock@PLT # Offset: 3899
    00000f40: 	movq	0x10(%rsp), %rdi
    00000f45: 	pxor	%xmm0, %xmm0
    00000f49: 	movq	%rax, end_time(%rip)
    00000f50: 	subq	start_time(%rip), %rax
    00000f57: 	cvtsi2sd	%rax, %xmm0
    00000f5c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000f64: 	callq	_Z13record_resultdPKc # Offset: 3940
    00000f69: 	movl	0xc(%rsp), %edi
    00000f6d: 	testl	%edi, %edi
    00000f6f: 	jle	.Ltmp759 # Offset: 3951
    00000f75: 	leal	-0x1(%rdi), %eax
    00000f78: 	cmpl	$0xe, %eax
    00000f7b: 	jbe	.Ltmp760 # Offset: 3963
    00000f81: 	shrl	$0x4, %edi
    00000f84: 	movq	%r14, %rax
    00000f87: 	pxor	%xmm0, %xmm0
    00000f8b: 	movl	%edi, %edx
    00000f8d: 	subl	$0x1, %edx
    00000f90: 	shlq	$0x4, %rdx
    00000f94: 	leaq	0x10(%r14,%rdx), %rdx
.Ltmp761:
    00000f99: 	movdqu	(%rax), %xmm7
    00000f9d: 	addq	$0x10, %rax
    00000fa1: 	paddb	%xmm7, %xmm0
    00000fa5: 	cmpq	%rax, %rdx
    00000fa8: 	jne	.Ltmp761 # Offset: 4008
    00000faa: 	movdqa	%xmm0, %xmm1
    00000fae: 	movl	0xc(%rsp), %edi
    00000fb2: 	psrldq	$0x8, %xmm1
    00000fb7: 	paddb	%xmm1, %xmm0
    00000fbb: 	movl	%edi, %edx
    00000fbd: 	pxor	%xmm1, %xmm1
    00000fc1: 	psadbw	%xmm1, %xmm0
    00000fc5: 	andl	$-0x10, %edx
    00000fc8: 	movd	%xmm0, %ebx
    00000fcc: 	movl	%edx, %eax
    00000fce: 	cmpl	%edx, %edi
    00000fd0: 	je	.Ltmp762 # Offset: 4048
.Ltmp770:
    00000fd6: 	movl	0xc(%rsp), %ecx
    00000fda: 	subl	%edx, %ecx
    00000fdc: 	leal	-0x1(%rcx), %esi
    00000fdf: 	cmpl	$0x6, %esi
    00000fe2: 	jbe	.Ltmp763 # Offset: 4066
    00000fe4: 	movq	(%r14,%rdx), %xmm1
    00000fea: 	pxor	%xmm0, %xmm0
    00000fee: 	movdqa	%xmm1, %xmm6
    00000ff2: 	psadbw	%xmm0, %xmm6
    00000ff6: 	movq	%xmm6, %rdx
    00000ffb: 	movq	%xmm6, 0x28(%rsp)
    00001001: 	movl	%edx, %esi
    00001003: 	movl	%ecx, %edx
    00001005: 	andl	$-0x8, %edx
    00001008: 	addl	%esi, %ebx
    0000100a: 	addl	%edx, %eax
    0000100c: 	cmpl	%ecx, %edx
    0000100e: 	je	.Ltmp762 # Offset: 4110
.Ltmp763:
    00001010: 	movslq	%eax, %rdx
    00001013: 	movl	0xc(%rsp), %edi
    00001017: 	addb	(%r14,%rdx), %bl
    0000101b: 	leal	0x1(%rax), %edx
    0000101e: 	cmpl	%edx, %edi
    00001020: 	jle	.Ltmp762 # Offset: 4128
    00001022: 	movslq	%edx, %rdx
    00001025: 	addb	(%r14,%rdx), %bl
    00001029: 	leal	0x2(%rax), %edx
    0000102c: 	cmpl	%edx, %edi
    0000102e: 	jle	.Ltmp762 # Offset: 4142
    00001030: 	movslq	%edx, %rdx
    00001033: 	addb	(%r14,%rdx), %bl
    00001037: 	leal	0x3(%rax), %edx
    0000103a: 	cmpl	%edi, %edx
    0000103c: 	jge	.Ltmp762 # Offset: 4156
    0000103e: 	movslq	%edx, %rdx
    00001041: 	addb	(%r14,%rdx), %bl
    00001045: 	leal	0x4(%rax), %edx
    00001048: 	cmpl	%edx, %edi
    0000104a: 	jle	.Ltmp762 # Offset: 4170
    0000104c: 	movslq	%edx, %rdx
    0000104f: 	addb	(%r14,%rdx), %bl
    00001053: 	leal	0x5(%rax), %edx
    00001056: 	cmpl	%edx, %edi
    00001058: 	jle	.Ltmp762 # Offset: 4184
    0000105a: 	movslq	%edx, %rdx
    0000105d: 	addl	$0x6, %eax
    00001060: 	addb	(%r14,%rdx), %bl
    00001064: 	cmpl	%edi, %eax
    00001066: 	jge	.Ltmp762 # Offset: 4198
    00001068: 	cltq
    0000106a: 	addb	(%r14,%rax), %bl
.Ltmp762:
    0000106e: 	movsd	init_value(%rip), %xmm0
    00001076: 	movl	$0xffffffaa, %eax
    0000107b: 	addsd	%xmm0, %xmm0
    0000107f: 	cvttsd2si	%xmm0, %edx
    00001083: 	imull	%edx, %eax
    00001086: 	movl	%eax, %r12d
    00001089: 	cmpb	%bl, %al
    0000108b: 	jne	.Ltmp764 # Offset: 4235
    00001091: 	movq	0x3f8(%rsp), %rax
    00001099: 	subq	%fs:0x28, %rax
    000010a2: 	jne	.Ltmp765 # Offset: 4258
    000010a8: 	addq	$0x408, %rsp
    000010af: 	popq	%rbx
    000010b0: 	popq	%rbp
    000010b1: 	popq	%r12
    000010b3: 	popq	%r13
    000010b5: 	popq	%r14
    000010b7: 	popq	%r15
    000010b9: 	retq # Offset: 4281
    000010ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp748:
    000010c0: 	cvttsd2si	init_value(%rip), %eax
    000010c8: 	movb	%al, 0x2(%r14,%rbx)
    000010cd: 	addq	$0x3, %rbx
    000010d1: 	cmpq	%rbx, %rbp
    000010d4: 	ja	.Ltmp748 # Offset: 4308
    000010d6: 	jmp	.Ltmp744 # Offset: 4310
.Ltmp756:
    000010db: 	cvttsd2si	init_value(%rip), %eax
    000010e3: 	movb	%al, 0x2(%r14,%rcx)
    000010e8: 	addq	$0x3, %rcx
    000010ec: 	cmpl	%ecx, %r13d
    000010ef: 	jg	.Ltmp756 # Offset: 4335
    000010f1: 	jmp	.Ltmp752 # Offset: 4337
.Ltmp745:
    000010f6: 	movq	%rbx, %rax
    000010f9: 	nopl	(%rax) # Size: 7
.Ltmp766:
    00001100: 	cvttsd2si	init_value(%rip), %ecx
    00001108: 	movb	%cl, 0x1(%r14,%rax)
    0000110d: 	addq	$0x3, %rax
    00001111: 	cmpq	%rax, %rbp
    00001114: 	ja	.Ltmp766 # Offset: 4372
    00001116: 	jmp	.Ltmp747 # Offset: 4374
.Ltmp753:
    0000111b: 	movq	%rcx, %rax
.Ltmp767:
    0000111e: 	cvttsd2si	init_value(%rip), %r10d
    00001127: 	movb	%r10b, 0x1(%r14,%rax)
    0000112c: 	addq	$0x3, %rax
    00001130: 	cmpl	%eax, %r13d
    00001133: 	jg	.Ltmp767 # Offset: 4403
    00001135: 	jmp	.Ltmp755 # Offset: 4405
.Ltmp764:
    0000113a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00001141: 	movl	$0x5, %edx
    00001146: 	leaq	DATAat0x35004(%rip), %rsi
    0000114d: 	movq	%rbp, %rdi
    00001150: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4432
    00001155: 	cmpq	$0x0, 0x10(%rsp)
    0000115b: 	je	.Ltmp768 # Offset: 4443
    00001161: 	movq	0x10(%rsp), %r15
    00001166: 	movq	%r15, %rdi
    00001169: 	callq	strlen@PLT # Offset: 4457
    0000116e: 	movq	%r15, %rsi
    00001171: 	movq	%rbp, %rdi
    00001174: 	movq	%rax, %rdx
    00001177: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4471
.Ltmp769:
    0000117c: 	movq	%rbp, %rdi
    0000117f: 	movl	$0xd, %edx
    00001184: 	leaq	DATAat0x3500a(%rip), %rsi
    0000118b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4491
    00001190: 	leaq	0x3f7(%rsp), %r13
    00001198: 	movq	%rbp, %rdi
    0000119b: 	movl	$0x1, %edx
    000011a0: 	movq	%r13, %rsi
    000011a3: 	movb	%bl, 0x3f7(%rsp)
    000011aa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4522
    000011af: 	movl	$0xb, %edx
    000011b4: 	leaq	DATAat0x35018(%rip), %rsi
    000011bb: 	movq	%rax, %rbp
    000011be: 	movq	%rax, %rdi
    000011c1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4545
    000011c6: 	movq	%rbp, %rdi
    000011c9: 	movl	$0x1, %edx
    000011ce: 	movq	%r13, %rsi
    000011d1: 	movb	%r12b, 0x3f7(%rsp)
    000011d9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4569
    000011de: 	movq	%rax, %rdi
    000011e1: 	movq	0x3f8(%rsp), %rax
    000011e9: 	subq	%fs:0x28, %rax
    000011f2: 	jne	.Ltmp765 # Offset: 4594
    000011f4: 	addq	$0x408, %rsp
    000011fb: 	popq	%rbx
    000011fc: 	popq	%rbp
    000011fd: 	popq	%r12
    000011ff: 	popq	%r13
    00001201: 	popq	%r14
    00001203: 	popq	%r15
    00001205: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 4613
.Ltmp768:
    0000120a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001211: 	movq	-0x18(%rax), %rdi
    00001215: 	addq	%rbp, %rdi
    00001218: 	movl	0x20(%rdi), %esi
    0000121b: 	orl	$0x1, %esi
    0000121e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4638
    00001223: 	jmp	.Ltmp769 # Offset: 4643
.Ltmp759:
    00001228: 	xorl	%ebx, %ebx
    0000122a: 	jmp	.Ltmp762 # Offset: 4650
.Ltmp760:
    0000122f: 	xorl	%edx, %edx
    00001231: 	xorl	%eax, %eax
    00001233: 	xorl	%ebx, %ebx
    00001235: 	jmp	.Ltmp770 # Offset: 4661
.Ltmp765:
    0000123a: 	callq	__stack_chk_fail@PLT # Offset: 4666
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite3IhEvPT_iPKc"

Binary Function "_Z30test_for_loop_bzero_overwrite3IhEvPT_iPKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x14700
  Size        : 0xcde
  MaxSize     : 0xce0
  Offset      : 0x14700
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_bzero_overwrite3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x358, %rsp
    00000018: 	movq	%rdx, 0x100(%rsp)
    00000020: 	movl	%esi, 0x60(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x348(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp771 # Offset: 75
    00000051: 	movslq	0x60(%rsp), %r15
    00000056: 	movl	$0xaaaaaaab, %eax
    0000005b: 	leaq	init_value(%rip), %r11
    00000062: 	leaq	0x1(%r14), %rdi
    00000066: 	leaq	0x8(%r11), %r10
    0000006a: 	movq	%rdi, 0x30(%rsp)
    0000006f: 	leal	-0x3(%r15), %ebp
    00000073: 	leal	-0x2(%r15), %ebx
    00000077: 	cmpl	$0x2c, %ebp
    0000007a: 	seta	%r9b
    0000007e: 	imulq	%rax, %rbp
    00000082: 	shrq	$0x21, %rbp
    00000086: 	leal	0x1(%rbp), %eax
    00000089: 	leaq	(%rax,%rax,2), %rsi
    0000008d: 	movq	%rax, %rcx
    00000090: 	movl	%eax, 0xc(%rsp)
    00000094: 	leaq	-0x1(%r14,%rsi), %rax
    00000099: 	cmpq	%r11, %rax
    0000009c: 	setbe	%al
    0000009f: 	cmpq	%r10, %rdi
    000000a2: 	setae	%dl
    000000a5: 	addq	%r14, %rsi
    000000a8: 	orl	%edx, %eax
    000000aa: 	andl	%r9d, %eax
    000000ad: 	movb	%al, 0x23(%rsp)
    000000b1: 	movl	%ecx, %eax
    000000b3: 	andl	$-0x10, %ecx
    000000b6: 	shrl	$0x4, %eax
    000000b9: 	subl	$0x1, %eax
    000000bc: 	leaq	(%rax,%rax,2), %rdx
    000000c0: 	leal	(%rcx,%rcx,2), %eax
    000000c3: 	leal	0x1(%rax), %edi
    000000c6: 	shlq	$0x4, %rdx
    000000ca: 	movslq	%edi, %rdi
    000000cd: 	leaq	0x31(%r14,%rdx), %rbp
    000000d2: 	leaq	0x32(%r14,%rdx), %r12
    000000d7: 	addq	%r14, %rdi
    000000da: 	leal	0x2(%rax), %edx
    000000dd: 	movq	%rdi, 0x40(%rsp)
    000000e2: 	leal	0x3(%rax), %edi
    000000e5: 	movslq	%edx, %rdx
    000000e8: 	movl	%edi, 0x10(%rsp)
    000000ec: 	leal	0x4(%rax), %edi
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addq	%r14, %rdi
    000000f5: 	movq	%rdi, 0x58(%rsp)
    000000fa: 	leal	0x6(%rax), %edi
    000000fd: 	movl	%edi, 0x14(%rsp)
    00000101: 	leal	0x7(%rax), %edi
    00000104: 	movslq	%edi, %rdi
    00000107: 	addq	%r14, %rdi
    0000010a: 	movq	%rdi, 0x70(%rsp)
    0000010f: 	leal	0x9(%rax), %edi
    00000112: 	movl	%edi, 0x18(%rsp)
    00000116: 	leal	0xa(%rax), %edi
    00000119: 	movslq	%edi, %rdi
    0000011c: 	addq	%r14, %rdi
    0000011f: 	movq	%rdi, 0x80(%rsp)
    00000127: 	leal	0xc(%rax), %edi
    0000012a: 	movl	%edi, 0x1c(%rsp)
    0000012e: 	leal	0xd(%rax), %edi
    00000131: 	movslq	%edi, %rdi
    00000134: 	addq	%r14, %rdi
    00000137: 	movq	%rdi, 0x98(%rsp)
    0000013f: 	leal	0xf(%rax), %edi
    00000142: 	movl	%edi, 0x24(%rsp)
    00000146: 	leal	0x10(%rax), %edi
    00000149: 	movslq	%edi, %rdi
    0000014c: 	addq	%r14, %rdi
    0000014f: 	movq	%rdi, 0xa8(%rsp)
    00000157: 	leal	0x12(%rax), %edi
    0000015a: 	movl	%edi, 0x48(%rsp)
    0000015e: 	leal	0x13(%rax), %edi
    00000161: 	movslq	%edi, %rdi
    00000164: 	addq	%r14, %rdi
    00000167: 	movq	%rdi, 0xc0(%rsp)
    0000016f: 	leal	0x15(%rax), %edi
    00000172: 	movl	%edi, 0x4c(%rsp)
    00000176: 	leal	0x16(%rax), %edi
    00000179: 	movslq	%edi, %rdi
    0000017c: 	addq	%r14, %rdi
    0000017f: 	movq	%rdi, 0xd0(%rsp)
    00000187: 	leal	0x18(%rax), %edi
    0000018a: 	movl	%edi, 0x64(%rsp)
    0000018e: 	leal	0x19(%rax), %edi
    00000191: 	movslq	%edi, %rdi
    00000194: 	addq	%r14, %rdi
    00000197: 	movq	%rdi, 0xe8(%rsp)
    0000019f: 	leal	0x1b(%rax), %edi
    000001a2: 	movl	%edi, 0x88(%rsp)
    000001a9: 	leal	0x1c(%rax), %edi
    000001ac: 	movslq	%edi, %rdi
    000001af: 	addq	%r14, %rdi
    000001b2: 	movq	%rdi, 0xf8(%rsp)
    000001ba: 	leal	0x1e(%rax), %edi
    000001bd: 	movl	%edi, 0x8c(%rsp)
    000001c4: 	leal	0x1f(%rax), %edi
    000001c7: 	movslq	%edi, %rdi
    000001ca: 	addq	%r14, %rdi
    000001cd: 	movq	%rdi, 0x110(%rsp)
    000001d5: 	leal	0x21(%rax), %edi
    000001d8: 	movl	%edi, 0xb0(%rsp)
    000001df: 	leal	0x22(%rax), %edi
    000001e2: 	movslq	%edi, %rdi
    000001e5: 	addq	%r14, %rdi
    000001e8: 	movq	%rdi, 0x120(%rsp)
    000001f0: 	leal	0x24(%rax), %edi
    000001f3: 	movl	%edi, 0xb4(%rsp)
    000001fa: 	leal	0x25(%rax), %edi
    000001fd: 	movslq	%edi, %rdi
    00000200: 	addq	%r14, %rdi
    00000203: 	movq	%rdi, 0x130(%rsp)
    0000020b: 	leal	0x27(%rax), %edi
    0000020e: 	movl	%edi, 0xd8(%rsp)
    00000215: 	leal	0x28(%rax), %edi
    00000218: 	movslq	%edi, %rdi
    0000021b: 	addq	%r14, %rdi
    0000021e: 	movq	%rdi, 0x140(%rsp)
    00000226: 	leal	0x2a(%rax), %edi
    00000229: 	movl	%edi, 0xdc(%rsp)
    00000230: 	leal	0x2b(%rax), %edi
    00000233: 	movslq	%edi, %rdi
    00000236: 	addq	%r14, %rdi
    00000239: 	cmpq	%r11, %rsi
    0000023c: 	movq	%rdi, 0x150(%rsp)
    00000244: 	leaq	0x2(%r14), %rdi
    00000248: 	setbe	%sil
    0000024c: 	cmpq	%r10, %rdi
    0000024f: 	movq	%rdi, 0x28(%rsp)
    00000254: 	setae	%dil
    00000258: 	xorl	%r13d, %r13d
    0000025b: 	orl	%edi, %esi
    0000025d: 	movq	%r14, %rdi
    00000260: 	andl	%r9d, %esi
    00000263: 	movb	%sil, 0x22(%rsp)
    00000268: 	leaq	(%r14,%rdx), %rsi
    0000026c: 	leal	0x5(%rax), %edx
    0000026f: 	movslq	%edx, %rdx
    00000272: 	movq	%rsi, 0x38(%rsp)
    00000277: 	leaq	(%r14,%rdx), %rsi
    0000027b: 	leal	0x8(%rax), %edx
    0000027e: 	movslq	%edx, %rdx
    00000281: 	movq	%rsi, 0x50(%rsp)
    00000286: 	leaq	(%r14,%rdx), %rsi
    0000028a: 	leal	0xb(%rax), %edx
    0000028d: 	movslq	%edx, %rdx
    00000290: 	movq	%rsi, 0x68(%rsp)
    00000295: 	leaq	(%r14,%rdx), %rsi
    00000299: 	leal	0xe(%rax), %edx
    0000029c: 	movslq	%edx, %rdx
    0000029f: 	movq	%rsi, 0x78(%rsp)
    000002a4: 	leaq	(%r14,%rdx), %rsi
    000002a8: 	leal	0x11(%rax), %edx
    000002ab: 	movslq	%edx, %rdx
    000002ae: 	movq	%rsi, 0x90(%rsp)
    000002b6: 	leaq	(%r14,%rdx), %rsi
    000002ba: 	leal	0x14(%rax), %edx
    000002bd: 	movslq	%edx, %rdx
    000002c0: 	movq	%rsi, 0xa0(%rsp)
    000002c8: 	leaq	(%r14,%rdx), %rsi
    000002cc: 	leal	0x17(%rax), %edx
    000002cf: 	movslq	%edx, %rdx
    000002d2: 	movq	%rsi, 0xb8(%rsp)
    000002da: 	leaq	(%r14,%rdx), %rsi
    000002de: 	leal	0x1a(%rax), %edx
    000002e1: 	movslq	%edx, %rdx
    000002e4: 	movq	%rsi, 0xc8(%rsp)
    000002ec: 	leaq	(%r14,%rdx), %rsi
    000002f0: 	leal	0x1d(%rax), %edx
    000002f3: 	movslq	%edx, %rdx
    000002f6: 	movq	%rsi, 0xe0(%rsp)
    000002fe: 	leaq	(%r14,%rdx), %rsi
    00000302: 	leal	0x20(%rax), %edx
    00000305: 	movslq	%edx, %rdx
    00000308: 	movq	%rsi, 0xf0(%rsp)
    00000310: 	leaq	(%r14,%rdx), %rsi
    00000314: 	leal	0x23(%rax), %edx
    00000317: 	movslq	%edx, %rdx
    0000031a: 	movq	%rsi, 0x108(%rsp)
    00000322: 	leaq	(%r14,%rdx), %rsi
    00000326: 	leal	0x26(%rax), %edx
    00000329: 	movslq	%edx, %rdx
    0000032c: 	movq	%rsi, 0x118(%rsp)
    00000334: 	leaq	(%r14,%rdx), %rsi
    00000338: 	leal	0x29(%rax), %edx
    0000033b: 	addl	$0x2c, %eax
    0000033e: 	movslq	%edx, %rdx
    00000341: 	cltq
    00000343: 	movq	%rsi, 0x128(%rsp)
    0000034b: 	addq	%r14, %rax
    0000034e: 	leaq	(%r14,%rdx), %rsi
    00000352: 	movl	%r13d, %r14d
    00000355: 	movl	%ebx, %r13d
    00000358: 	movq	%rsi, 0x138(%rsp)
    00000360: 	movq	%r12, %rbx
    00000363: 	movq	%rbp, %r12
    00000366: 	movl	%ecx, %ebp
    00000368: 	movq	%rax, 0x148(%rsp)
.Ltmp778:
    00000370: 	xorl	%esi, %esi
    00000372: 	movq	%r15, %rdx
    00000375: 	callq	memset@PLT # Offset: 885
    0000037a: 	testl	%r13d, %r13d
    0000037d: 	movdqa	DATAat0x36f20(%rip), %xmm3
    00000385: 	movq	%rax, %rdi
    00000388: 	jle	.Ltmp772 # Offset: 904
    0000038e: 	cmpb	$0x0, 0x23(%rsp)
    00000393: 	je	.Ltmp773 # Offset: 915
    00000399: 	movsd	init_value(%rip), %xmm1
    000003a1: 	movq	0x30(%rsp), %rax
    000003a6: 	unpcklpd	%xmm1, %xmm1
    000003aa: 	cvttpd2dq	%xmm1, %xmm1
    000003ae: 	punpcklqdq	%xmm1, %xmm1
    000003b2: 	movdqa	%xmm1, %xmm2
    000003b6: 	punpckhwd	%xmm1, %xmm2
    000003ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp774:
    000003c0: 	movdqa	%xmm1, %xmm0
    000003c4: 	addq	$0x30, %rax
    000003c8: 	punpcklwd	%xmm1, %xmm0
    000003cc: 	movdqa	%xmm0, %xmm4
    000003d0: 	punpcklwd	%xmm2, %xmm0
    000003d4: 	punpckhwd	%xmm2, %xmm4
    000003d8: 	punpcklwd	%xmm4, %xmm0
    000003dc: 	pand	%xmm3, %xmm0
    000003e0: 	packuswb	%xmm0, %xmm0
    000003e4: 	movd	%xmm0, %edx
    000003e8: 	movb	%dl, -0x30(%rax)
    000003eb: 	movaps	%xmm0, 0x330(%rsp)
    000003f3: 	movzbl	0x331(%rsp), %edx
    000003fb: 	movb	%dl, -0x2d(%rax)
    000003fe: 	movaps	%xmm0, 0x320(%rsp)
    00000406: 	movzbl	0x322(%rsp), %edx
    0000040e: 	movb	%dl, -0x2a(%rax)
    00000411: 	movaps	%xmm0, 0x310(%rsp)
    00000419: 	movzbl	0x313(%rsp), %edx
    00000421: 	movb	%dl, -0x27(%rax)
    00000424: 	movaps	%xmm0, 0x300(%rsp)
    0000042c: 	movzbl	0x304(%rsp), %edx
    00000434: 	movb	%dl, -0x24(%rax)
    00000437: 	movaps	%xmm0, 0x2f0(%rsp)
    0000043f: 	movzbl	0x2f5(%rsp), %edx
    00000447: 	movb	%dl, -0x21(%rax)
    0000044a: 	movaps	%xmm0, 0x2e0(%rsp)
    00000452: 	movzbl	0x2e6(%rsp), %edx
    0000045a: 	movb	%dl, -0x1e(%rax)
    0000045d: 	movaps	%xmm0, 0x2d0(%rsp)
    00000465: 	movzbl	0x2d7(%rsp), %edx
    0000046d: 	movb	%dl, -0x1b(%rax)
    00000470: 	movaps	%xmm0, 0x2c0(%rsp)
    00000478: 	movzbl	0x2c8(%rsp), %edx
    00000480: 	movb	%dl, -0x18(%rax)
    00000483: 	movaps	%xmm0, 0x2b0(%rsp)
    0000048b: 	movzbl	0x2b9(%rsp), %edx
    00000493: 	movb	%dl, -0x15(%rax)
    00000496: 	movaps	%xmm0, 0x2a0(%rsp)
    0000049e: 	movzbl	0x2aa(%rsp), %edx
    000004a6: 	movb	%dl, -0x12(%rax)
    000004a9: 	movaps	%xmm0, 0x290(%rsp)
    000004b1: 	movzbl	0x29b(%rsp), %edx
    000004b9: 	movb	%dl, -0xf(%rax)
    000004bc: 	movaps	%xmm0, 0x280(%rsp)
    000004c4: 	movzbl	0x28c(%rsp), %edx
    000004cc: 	movb	%dl, -0xc(%rax)
    000004cf: 	movaps	%xmm0, 0x270(%rsp)
    000004d7: 	movzbl	0x27d(%rsp), %edx
    000004df: 	movb	%dl, -0x9(%rax)
    000004e2: 	movaps	%xmm0, 0x260(%rsp)
    000004ea: 	movzbl	0x26e(%rsp), %edx
    000004f2: 	movb	%dl, -0x6(%rax)
    000004f5: 	movaps	%xmm0, 0x250(%rsp)
    000004fd: 	movzbl	0x25f(%rsp), %edx
    00000505: 	movb	%dl, -0x3(%rax)
    00000508: 	cmpq	%rax, %r12
    0000050b: 	jne	.Ltmp774 # Offset: 1291
    00000511: 	cmpl	%ebp, 0xc(%rsp)
    00000515: 	je	.Ltmp775 # Offset: 1301
    0000051b: 	cvttsd2si	init_value(%rip), %eax
    00000523: 	movq	0x40(%rsp), %rcx
    00000528: 	movb	%al, (%rcx)
    0000052a: 	cmpl	0x10(%rsp), %r13d
    0000052f: 	jle	.Ltmp775 # Offset: 1327
    00000535: 	cvttsd2si	init_value(%rip), %eax
    0000053d: 	movq	0x58(%rsp), %rcx
    00000542: 	movb	%al, (%rcx)
    00000544: 	cmpl	0x14(%rsp), %r13d
    00000549: 	jle	.Ltmp775 # Offset: 1353
    0000054f: 	cvttsd2si	init_value(%rip), %eax
    00000557: 	movq	0x70(%rsp), %rcx
    0000055c: 	movb	%al, (%rcx)
    0000055e: 	cmpl	0x18(%rsp), %r13d
    00000563: 	jle	.Ltmp775 # Offset: 1379
    00000569: 	cvttsd2si	init_value(%rip), %eax
    00000571: 	movq	0x80(%rsp), %rcx
    00000579: 	movb	%al, (%rcx)
    0000057b: 	cmpl	0x1c(%rsp), %r13d
    00000580: 	jle	.Ltmp775 # Offset: 1408
    00000586: 	cvttsd2si	init_value(%rip), %eax
    0000058e: 	movq	0x98(%rsp), %rsi
    00000596: 	movb	%al, (%rsi)
    00000598: 	cmpl	0x24(%rsp), %r13d
    0000059d: 	jle	.Ltmp775 # Offset: 1437
    000005a3: 	cvttsd2si	init_value(%rip), %eax
    000005ab: 	movq	0xa8(%rsp), %rsi
    000005b3: 	movb	%al, (%rsi)
    000005b5: 	cmpl	0x48(%rsp), %r13d
    000005ba: 	jle	.Ltmp775 # Offset: 1466
    000005c0: 	cvttsd2si	init_value(%rip), %eax
    000005c8: 	movq	0xc0(%rsp), %rsi
    000005d0: 	movb	%al, (%rsi)
    000005d2: 	cmpl	0x4c(%rsp), %r13d
    000005d7: 	jle	.Ltmp775 # Offset: 1495
    000005dd: 	cvttsd2si	init_value(%rip), %eax
    000005e5: 	movq	0xd0(%rsp), %rsi
    000005ed: 	movb	%al, (%rsi)
    000005ef: 	cmpl	0x64(%rsp), %r13d
    000005f4: 	jle	.Ltmp775 # Offset: 1524
    000005fa: 	cvttsd2si	init_value(%rip), %eax
    00000602: 	movq	0xe8(%rsp), %rsi
    0000060a: 	movb	%al, (%rsi)
    0000060c: 	cmpl	0x88(%rsp), %r13d
    00000614: 	jle	.Ltmp775 # Offset: 1556
    0000061a: 	cvttsd2si	init_value(%rip), %eax
    00000622: 	movq	0xf8(%rsp), %rcx
    0000062a: 	movb	%al, (%rcx)
    0000062c: 	cmpl	0x8c(%rsp), %r13d
    00000634: 	jle	.Ltmp775 # Offset: 1588
    0000063a: 	cvttsd2si	init_value(%rip), %eax
    00000642: 	movq	0x110(%rsp), %rcx
    0000064a: 	movb	%al, (%rcx)
    0000064c: 	cmpl	0xb0(%rsp), %r13d
    00000654: 	jle	.Ltmp775 # Offset: 1620
    00000656: 	cvttsd2si	init_value(%rip), %eax
    0000065e: 	movq	0x120(%rsp), %rsi
    00000666: 	movb	%al, (%rsi)
    00000668: 	cmpl	0xb4(%rsp), %r13d
    00000670: 	jle	.Ltmp775 # Offset: 1648
    00000672: 	cvttsd2si	init_value(%rip), %eax
    0000067a: 	movq	0x130(%rsp), %rcx
    00000682: 	movb	%al, (%rcx)
    00000684: 	cmpl	0xd8(%rsp), %r13d
    0000068c: 	jle	.Ltmp775 # Offset: 1676
    0000068e: 	cvttsd2si	init_value(%rip), %eax
    00000696: 	movq	0x140(%rsp), %rcx
    0000069e: 	movb	%al, (%rcx)
    000006a0: 	cmpl	0xdc(%rsp), %r13d
    000006a8: 	jle	.Ltmp775 # Offset: 1704
    000006aa: 	cvttsd2si	init_value(%rip), %eax
    000006b2: 	movq	0x150(%rsp), %rsi
    000006ba: 	movb	%al, (%rsi)
    000006bc: 	nopl	(%rax) # Size: 4
.Ltmp775:
    000006c0: 	cmpb	$0x0, 0x22(%rsp)
    000006c5: 	je	.Ltmp776 # Offset: 1733
    000006cb: 	movsd	init_value(%rip), %xmm1
    000006d3: 	movq	0x28(%rsp), %rax
    000006d8: 	unpcklpd	%xmm1, %xmm1
    000006dc: 	cvttpd2dq	%xmm1, %xmm1
    000006e0: 	punpcklqdq	%xmm1, %xmm1
    000006e4: 	movdqa	%xmm1, %xmm2
    000006e8: 	punpckhwd	%xmm1, %xmm2
    000006ec: 	nopl	(%rax) # Size: 4
.Ltmp777:
    000006f0: 	movdqa	%xmm1, %xmm0
    000006f4: 	addq	$0x30, %rax
    000006f8: 	punpcklwd	%xmm1, %xmm0
    000006fc: 	movdqa	%xmm0, %xmm4
    00000700: 	punpcklwd	%xmm2, %xmm0
    00000704: 	punpckhwd	%xmm2, %xmm4
    00000708: 	punpcklwd	%xmm4, %xmm0
    0000070c: 	pand	%xmm3, %xmm0
    00000710: 	packuswb	%xmm0, %xmm0
    00000714: 	movd	%xmm0, %edx
    00000718: 	movb	%dl, -0x30(%rax)
    0000071b: 	movaps	%xmm0, 0x240(%rsp)
    00000723: 	movzbl	0x241(%rsp), %edx
    0000072b: 	movb	%dl, -0x2d(%rax)
    0000072e: 	movaps	%xmm0, 0x230(%rsp)
    00000736: 	movzbl	0x232(%rsp), %edx
    0000073e: 	movb	%dl, -0x2a(%rax)
    00000741: 	movaps	%xmm0, 0x220(%rsp)
    00000749: 	movzbl	0x223(%rsp), %edx
    00000751: 	movb	%dl, -0x27(%rax)
    00000754: 	movaps	%xmm0, 0x210(%rsp)
    0000075c: 	movzbl	0x214(%rsp), %edx
    00000764: 	movb	%dl, -0x24(%rax)
    00000767: 	movaps	%xmm0, 0x200(%rsp)
    0000076f: 	movzbl	0x205(%rsp), %edx
    00000777: 	movb	%dl, -0x21(%rax)
    0000077a: 	movaps	%xmm0, 0x1f0(%rsp)
    00000782: 	movzbl	0x1f6(%rsp), %edx
    0000078a: 	movb	%dl, -0x1e(%rax)
    0000078d: 	movaps	%xmm0, 0x1e0(%rsp)
    00000795: 	movzbl	0x1e7(%rsp), %edx
    0000079d: 	movb	%dl, -0x1b(%rax)
    000007a0: 	movaps	%xmm0, 0x1d0(%rsp)
    000007a8: 	movzbl	0x1d8(%rsp), %edx
    000007b0: 	movb	%dl, -0x18(%rax)
    000007b3: 	movaps	%xmm0, 0x1c0(%rsp)
    000007bb: 	movzbl	0x1c9(%rsp), %edx
    000007c3: 	movb	%dl, -0x15(%rax)
    000007c6: 	movaps	%xmm0, 0x1b0(%rsp)
    000007ce: 	movzbl	0x1ba(%rsp), %edx
    000007d6: 	movb	%dl, -0x12(%rax)
    000007d9: 	movaps	%xmm0, 0x1a0(%rsp)
    000007e1: 	movzbl	0x1ab(%rsp), %edx
    000007e9: 	movb	%dl, -0xf(%rax)
    000007ec: 	movaps	%xmm0, 0x190(%rsp)
    000007f4: 	movzbl	0x19c(%rsp), %edx
    000007fc: 	movb	%dl, -0xc(%rax)
    000007ff: 	movaps	%xmm0, 0x180(%rsp)
    00000807: 	movzbl	0x18d(%rsp), %edx
    0000080f: 	movb	%dl, -0x9(%rax)
    00000812: 	movaps	%xmm0, 0x170(%rsp)
    0000081a: 	movzbl	0x17e(%rsp), %edx
    00000822: 	movb	%dl, -0x6(%rax)
    00000825: 	movaps	%xmm0, 0x160(%rsp)
    0000082d: 	movzbl	0x16f(%rsp), %edx
    00000835: 	movb	%dl, -0x3(%rax)
    00000838: 	cmpq	%rbx, %rax
    0000083b: 	jne	.Ltmp777 # Offset: 2107
    00000841: 	cmpl	%ebp, 0xc(%rsp)
    00000845: 	je	.Ltmp772 # Offset: 2117
    0000084b: 	cvttsd2si	init_value(%rip), %eax
    00000853: 	movq	0x38(%rsp), %rcx
    00000858: 	movb	%al, (%rcx)
    0000085a: 	cmpl	0x10(%rsp), %r13d
    0000085f: 	jle	.Ltmp772 # Offset: 2143
    00000865: 	cvttsd2si	init_value(%rip), %eax
    0000086d: 	movq	0x50(%rsp), %rsi
    00000872: 	movb	%al, (%rsi)
    00000874: 	cmpl	0x14(%rsp), %r13d
    00000879: 	jle	.Ltmp772 # Offset: 2169
    0000087f: 	cvttsd2si	init_value(%rip), %eax
    00000887: 	movq	0x68(%rsp), %rsi
    0000088c: 	movb	%al, (%rsi)
    0000088e: 	cmpl	0x18(%rsp), %r13d
    00000893: 	jle	.Ltmp772 # Offset: 2195
    00000899: 	cvttsd2si	init_value(%rip), %eax
    000008a1: 	movq	0x78(%rsp), %rcx
    000008a6: 	movb	%al, (%rcx)
    000008a8: 	cmpl	0x1c(%rsp), %r13d
    000008ad: 	jle	.Ltmp772 # Offset: 2221
    000008b3: 	cvttsd2si	init_value(%rip), %eax
    000008bb: 	movq	0x90(%rsp), %rsi
    000008c3: 	movb	%al, (%rsi)
    000008c5: 	cmpl	0x24(%rsp), %r13d
    000008ca: 	jle	.Ltmp772 # Offset: 2250
    000008d0: 	cvttsd2si	init_value(%rip), %eax
    000008d8: 	movq	0xa0(%rsp), %rsi
    000008e0: 	movb	%al, (%rsi)
    000008e2: 	cmpl	0x48(%rsp), %r13d
    000008e7: 	jle	.Ltmp772 # Offset: 2279
    000008ed: 	cvttsd2si	init_value(%rip), %eax
    000008f5: 	movq	0xb8(%rsp), %rcx
    000008fd: 	movb	%al, (%rcx)
    000008ff: 	cmpl	0x4c(%rsp), %r13d
    00000904: 	jle	.Ltmp772 # Offset: 2308
    0000090a: 	cvttsd2si	init_value(%rip), %eax
    00000912: 	movq	0xc8(%rsp), %rcx
    0000091a: 	movb	%al, (%rcx)
    0000091c: 	cmpl	0x64(%rsp), %r13d
    00000921: 	jle	.Ltmp772 # Offset: 2337
    00000927: 	cvttsd2si	init_value(%rip), %eax
    0000092f: 	movq	0xe0(%rsp), %rcx
    00000937: 	movb	%al, (%rcx)
    00000939: 	cmpl	0x88(%rsp), %r13d
    00000941: 	jle	.Ltmp772 # Offset: 2369
    00000947: 	cvttsd2si	init_value(%rip), %eax
    0000094f: 	movq	0xf0(%rsp), %rcx
    00000957: 	movb	%al, (%rcx)
    00000959: 	cmpl	0x8c(%rsp), %r13d
    00000961: 	jle	.Ltmp772 # Offset: 2401
    00000967: 	cvttsd2si	init_value(%rip), %eax
    0000096f: 	movq	0x108(%rsp), %rcx
    00000977: 	movb	%al, (%rcx)
    00000979: 	cmpl	0xb0(%rsp), %r13d
    00000981: 	jle	.Ltmp772 # Offset: 2433
    00000983: 	cvttsd2si	init_value(%rip), %eax
    0000098b: 	movq	0x118(%rsp), %rcx
    00000993: 	movb	%al, (%rcx)
    00000995: 	cmpl	0xb4(%rsp), %r13d
    0000099d: 	jle	.Ltmp772 # Offset: 2461
    0000099f: 	cvttsd2si	init_value(%rip), %eax
    000009a7: 	movq	0x128(%rsp), %rcx
    000009af: 	movb	%al, (%rcx)
    000009b1: 	cmpl	0xd8(%rsp), %r13d
    000009b9: 	jle	.Ltmp772 # Offset: 2489
    000009bb: 	cvttsd2si	init_value(%rip), %eax
    000009c3: 	movq	0x138(%rsp), %rcx
    000009cb: 	movb	%al, (%rcx)
    000009cd: 	cmpl	0xdc(%rsp), %r13d
    000009d5: 	jle	.Ltmp772 # Offset: 2517
    000009d7: 	cvttsd2si	init_value(%rip), %eax
    000009df: 	movq	0x148(%rsp), %rsi
    000009e7: 	movb	%al, (%rsi)
    000009e9: 	nopl	(%rax) # Size: 7
.Ltmp772:
    000009f0: 	addl	$0x1, %r14d
    000009f4: 	cmpl	%r14d, iterations(%rip)
    000009fb: 	jg	.Ltmp778 # Offset: 2555
    00000a01: 	movq	%rdi, %r14
.Ltmp771:
    00000a04: 	callq	clock@PLT # Offset: 2564
    00000a09: 	movq	0x100(%rsp), %rdi
    00000a11: 	pxor	%xmm0, %xmm0
    00000a15: 	xorl	%ebx, %ebx
    00000a17: 	movq	%rax, end_time(%rip)
    00000a1e: 	subq	start_time(%rip), %rax
    00000a25: 	cvtsi2sd	%rax, %xmm0
    00000a2a: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000a32: 	callq	_Z13record_resultdPKc # Offset: 2610
    00000a37: 	movl	0x60(%rsp), %eax
    00000a3b: 	testl	%eax, %eax
    00000a3d: 	jle	.Ltmp779 # Offset: 2621
    00000a43: 	movl	0x60(%rsp), %ebx
    00000a47: 	leal	-0x1(%rbx), %eax
    00000a4a: 	cmpl	$0xe, %eax
    00000a4d: 	jbe	.Ltmp780 # Offset: 2637
    00000a53: 	shrl	$0x4, %ebx
    00000a56: 	movq	%r14, %rax
    00000a59: 	pxor	%xmm0, %xmm0
    00000a5d: 	movl	%ebx, %edx
    00000a5f: 	subl	$0x1, %edx
    00000a62: 	shlq	$0x4, %rdx
    00000a66: 	leaq	0x10(%r14,%rdx), %rdx
    00000a6b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp781:
    00000a70: 	movdqu	(%rax), %xmm5
    00000a74: 	addq	$0x10, %rax
    00000a78: 	paddb	%xmm5, %xmm0
    00000a7c: 	cmpq	%rdx, %rax
    00000a7f: 	jne	.Ltmp781 # Offset: 2687
    00000a81: 	movdqa	%xmm0, %xmm1
    00000a85: 	movl	0x60(%rsp), %esi
    00000a89: 	psrldq	$0x8, %xmm1
    00000a8e: 	paddb	%xmm1, %xmm0
    00000a92: 	movl	%esi, %edx
    00000a94: 	pxor	%xmm1, %xmm1
    00000a98: 	psadbw	%xmm1, %xmm0
    00000a9c: 	andl	$-0x10, %edx
    00000a9f: 	movd	%xmm0, %ebx
    00000aa3: 	movl	%edx, %eax
    00000aa5: 	cmpl	%esi, %edx
    00000aa7: 	je	.Ltmp779 # Offset: 2727
.Ltmp789:
    00000aad: 	movl	0x60(%rsp), %esi
    00000ab1: 	subl	%edx, %esi
    00000ab3: 	leal	-0x1(%rsi), %edi
    00000ab6: 	cmpl	$0x6, %edi
    00000ab9: 	jbe	.Ltmp782 # Offset: 2745
    00000abb: 	movq	(%r14,%rdx), %xmm1
    00000ac1: 	pxor	%xmm0, %xmm0
    00000ac5: 	movdqa	%xmm1, %xmm6
    00000ac9: 	psadbw	%xmm0, %xmm6
    00000acd: 	movq	%xmm6, 0x158(%rsp)
    00000ad6: 	movq	%xmm6, %rdx
    00000adb: 	movl	%edx, %edi
    00000add: 	movl	%esi, %edx
    00000adf: 	andl	$-0x8, %edx
    00000ae2: 	addl	%edi, %ebx
    00000ae4: 	addl	%edx, %eax
    00000ae6: 	cmpl	%edx, %esi
    00000ae8: 	je	.Ltmp779 # Offset: 2792
.Ltmp782:
    00000aea: 	movslq	%eax, %rdx
    00000aed: 	movl	0x60(%rsp), %esi
    00000af1: 	addb	(%r14,%rdx), %bl
    00000af5: 	leal	0x1(%rax), %edx
    00000af8: 	cmpl	%edx, %esi
    00000afa: 	jle	.Ltmp779 # Offset: 2810
    00000afc: 	movslq	%edx, %rdx
    00000aff: 	addb	(%r14,%rdx), %bl
    00000b03: 	leal	0x2(%rax), %edx
    00000b06: 	cmpl	%edx, %esi
    00000b08: 	jle	.Ltmp779 # Offset: 2824
    00000b0a: 	movslq	%edx, %rdx
    00000b0d: 	addb	(%r14,%rdx), %bl
    00000b11: 	leal	0x3(%rax), %edx
    00000b14: 	cmpl	%edx, %esi
    00000b16: 	jle	.Ltmp779 # Offset: 2838
    00000b18: 	movslq	%edx, %rdx
    00000b1b: 	addb	(%r14,%rdx), %bl
    00000b1f: 	leal	0x4(%rax), %edx
    00000b22: 	cmpl	%esi, %edx
    00000b24: 	jge	.Ltmp779 # Offset: 2852
    00000b26: 	movslq	%edx, %rdx
    00000b29: 	addb	(%r14,%rdx), %bl
    00000b2d: 	leal	0x5(%rax), %edx
    00000b30: 	cmpl	%edx, %esi
    00000b32: 	jle	.Ltmp779 # Offset: 2866
    00000b34: 	movslq	%edx, %rdx
    00000b37: 	addl	$0x6, %eax
    00000b3a: 	addb	(%r14,%rdx), %bl
    00000b3e: 	cmpl	%eax, %esi
    00000b40: 	jle	.Ltmp779 # Offset: 2880
    00000b42: 	cltq
    00000b44: 	addb	(%r14,%rax), %bl
.Ltmp779:
    00000b48: 	movsd	init_value(%rip), %xmm0
    00000b50: 	movl	$0xffffffaa, %eax
    00000b55: 	addsd	%xmm0, %xmm0
    00000b59: 	cvttsd2si	%xmm0, %edx
    00000b5d: 	imull	%edx, %eax
    00000b60: 	movl	%eax, %ebp
    00000b62: 	cmpb	%bl, %al
    00000b64: 	jne	.Ltmp783 # Offset: 2916
    00000b66: 	movq	0x348(%rsp), %rax
    00000b6e: 	subq	%fs:0x28, %rax
    00000b77: 	jne	.Ltmp784 # Offset: 2935
    00000b7d: 	addq	$0x358, %rsp
    00000b84: 	popq	%rbx
    00000b85: 	popq	%rbp
    00000b86: 	popq	%r12
    00000b88: 	popq	%r13
    00000b8a: 	popq	%r14
    00000b8c: 	popq	%r15
    00000b8e: 	retq # Offset: 2958
    00000b8f: 	nop # Size: 1
.Ltmp776:
    00000b90: 	xorl	%eax, %eax
    00000b92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp785:
    00000b98: 	cvttsd2si	init_value(%rip), %edx
    00000ba0: 	movb	%dl, 0x2(%rdi,%rax)
    00000ba4: 	addq	$0x3, %rax
    00000ba8: 	cmpl	%eax, %r13d
    00000bab: 	jg	.Ltmp785 # Offset: 2987
    00000bad: 	jmp	.Ltmp772 # Offset: 2989
    00000bb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp773:
    00000bb8: 	xorl	%eax, %eax
    00000bba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp786:
    00000bc0: 	cvttsd2si	init_value(%rip), %edx
    00000bc8: 	movb	%dl, 0x1(%rdi,%rax)
    00000bcc: 	addq	$0x3, %rax
    00000bd0: 	cmpl	%eax, %r13d
    00000bd3: 	jg	.Ltmp786 # Offset: 3027
    00000bd5: 	jmp	.Ltmp775 # Offset: 3029
.Ltmp783:
    00000bda: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000be1: 	movl	$0x5, %edx
    00000be6: 	leaq	DATAat0x35004(%rip), %rsi
    00000bed: 	movq	%r12, %rdi
    00000bf0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3056
    00000bf5: 	cmpq	$0x0, 0x100(%rsp)
    00000bfe: 	je	.Ltmp787 # Offset: 3070
    00000c04: 	movq	0x100(%rsp), %r15
    00000c0c: 	movq	%r15, %rdi
    00000c0f: 	callq	strlen@PLT # Offset: 3087
    00000c14: 	movq	%r15, %rsi
    00000c17: 	movq	%r12, %rdi
    00000c1a: 	movq	%rax, %rdx
    00000c1d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3101
.Ltmp788:
    00000c22: 	movq	%r12, %rdi
    00000c25: 	movl	$0xd, %edx
    00000c2a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000c31: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3121
    00000c36: 	leaq	0x347(%rsp), %r13
    00000c3e: 	movq	%r12, %rdi
    00000c41: 	movl	$0x1, %edx
    00000c46: 	movq	%r13, %rsi
    00000c49: 	movb	%bl, 0x347(%rsp)
    00000c50: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3152
    00000c55: 	movl	$0xb, %edx
    00000c5a: 	leaq	DATAat0x35018(%rip), %rsi
    00000c61: 	movq	%rax, %r12
    00000c64: 	movq	%rax, %rdi
    00000c67: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3175
    00000c6c: 	movq	%r12, %rdi
    00000c6f: 	movl	$0x1, %edx
    00000c74: 	movq	%r13, %rsi
    00000c77: 	movb	%bpl, 0x347(%rsp)
    00000c7f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3199
    00000c84: 	movq	%rax, %rdi
    00000c87: 	movq	0x348(%rsp), %rax
    00000c8f: 	subq	%fs:0x28, %rax
    00000c98: 	jne	.Ltmp784 # Offset: 3224
    00000c9a: 	addq	$0x358, %rsp
    00000ca1: 	popq	%rbx
    00000ca2: 	popq	%rbp
    00000ca3: 	popq	%r12
    00000ca5: 	popq	%r13
    00000ca7: 	popq	%r14
    00000ca9: 	popq	%r15
    00000cab: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3243
.Ltmp787:
    00000cb0: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000cb7: 	movq	-0x18(%rax), %rdi
    00000cbb: 	addq	%r12, %rdi
    00000cbe: 	movl	0x20(%rdi), %esi
    00000cc1: 	orl	$0x1, %esi
    00000cc4: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3268
    00000cc9: 	jmp	.Ltmp788 # Offset: 3273
.Ltmp780:
    00000cce: 	xorl	%edx, %edx
    00000cd0: 	xorl	%ebx, %ebx
    00000cd2: 	xorl	%eax, %eax
    00000cd4: 	jmp	.Ltmp789 # Offset: 3284
.Ltmp784:
    00000cd9: 	callq	__stack_chk_fail@PLT # Offset: 3289
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_bzero_overwrite3IhEvPT_iPKc"

Binary Function "_Z31test_for_loop_memset_overwrite3IhEvPT_iPKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x153e0
  Size        : 0xcde
  MaxSize     : 0xce0
  Offset      : 0x153e0
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_memset_overwrite3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x358, %rsp
    00000018: 	movq	%rdx, 0x100(%rsp)
    00000020: 	movl	%esi, 0x60(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x348(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp790 # Offset: 75
    00000051: 	movslq	0x60(%rsp), %r15
    00000056: 	movl	$0xaaaaaaab, %eax
    0000005b: 	leaq	init_value(%rip), %r11
    00000062: 	leaq	0x1(%r14), %rdi
    00000066: 	leaq	0x8(%r11), %r10
    0000006a: 	movq	%rdi, 0x30(%rsp)
    0000006f: 	leal	-0x3(%r15), %ebp
    00000073: 	leal	-0x2(%r15), %ebx
    00000077: 	cmpl	$0x2c, %ebp
    0000007a: 	seta	%r9b
    0000007e: 	imulq	%rax, %rbp
    00000082: 	shrq	$0x21, %rbp
    00000086: 	leal	0x1(%rbp), %eax
    00000089: 	leaq	(%rax,%rax,2), %rsi
    0000008d: 	movq	%rax, %rcx
    00000090: 	movl	%eax, 0xc(%rsp)
    00000094: 	leaq	-0x1(%r14,%rsi), %rax
    00000099: 	cmpq	%r11, %rax
    0000009c: 	setbe	%al
    0000009f: 	cmpq	%r10, %rdi
    000000a2: 	setae	%dl
    000000a5: 	addq	%r14, %rsi
    000000a8: 	orl	%edx, %eax
    000000aa: 	andl	%r9d, %eax
    000000ad: 	movb	%al, 0x23(%rsp)
    000000b1: 	movl	%ecx, %eax
    000000b3: 	andl	$-0x10, %ecx
    000000b6: 	shrl	$0x4, %eax
    000000b9: 	subl	$0x1, %eax
    000000bc: 	leaq	(%rax,%rax,2), %rdx
    000000c0: 	leal	(%rcx,%rcx,2), %eax
    000000c3: 	leal	0x1(%rax), %edi
    000000c6: 	shlq	$0x4, %rdx
    000000ca: 	movslq	%edi, %rdi
    000000cd: 	leaq	0x31(%r14,%rdx), %rbp
    000000d2: 	leaq	0x32(%r14,%rdx), %r12
    000000d7: 	addq	%r14, %rdi
    000000da: 	leal	0x2(%rax), %edx
    000000dd: 	movq	%rdi, 0x40(%rsp)
    000000e2: 	leal	0x3(%rax), %edi
    000000e5: 	movslq	%edx, %rdx
    000000e8: 	movl	%edi, 0x10(%rsp)
    000000ec: 	leal	0x4(%rax), %edi
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addq	%r14, %rdi
    000000f5: 	movq	%rdi, 0x58(%rsp)
    000000fa: 	leal	0x6(%rax), %edi
    000000fd: 	movl	%edi, 0x14(%rsp)
    00000101: 	leal	0x7(%rax), %edi
    00000104: 	movslq	%edi, %rdi
    00000107: 	addq	%r14, %rdi
    0000010a: 	movq	%rdi, 0x70(%rsp)
    0000010f: 	leal	0x9(%rax), %edi
    00000112: 	movl	%edi, 0x18(%rsp)
    00000116: 	leal	0xa(%rax), %edi
    00000119: 	movslq	%edi, %rdi
    0000011c: 	addq	%r14, %rdi
    0000011f: 	movq	%rdi, 0x80(%rsp)
    00000127: 	leal	0xc(%rax), %edi
    0000012a: 	movl	%edi, 0x1c(%rsp)
    0000012e: 	leal	0xd(%rax), %edi
    00000131: 	movslq	%edi, %rdi
    00000134: 	addq	%r14, %rdi
    00000137: 	movq	%rdi, 0x98(%rsp)
    0000013f: 	leal	0xf(%rax), %edi
    00000142: 	movl	%edi, 0x24(%rsp)
    00000146: 	leal	0x10(%rax), %edi
    00000149: 	movslq	%edi, %rdi
    0000014c: 	addq	%r14, %rdi
    0000014f: 	movq	%rdi, 0xa8(%rsp)
    00000157: 	leal	0x12(%rax), %edi
    0000015a: 	movl	%edi, 0x48(%rsp)
    0000015e: 	leal	0x13(%rax), %edi
    00000161: 	movslq	%edi, %rdi
    00000164: 	addq	%r14, %rdi
    00000167: 	movq	%rdi, 0xc0(%rsp)
    0000016f: 	leal	0x15(%rax), %edi
    00000172: 	movl	%edi, 0x4c(%rsp)
    00000176: 	leal	0x16(%rax), %edi
    00000179: 	movslq	%edi, %rdi
    0000017c: 	addq	%r14, %rdi
    0000017f: 	movq	%rdi, 0xd0(%rsp)
    00000187: 	leal	0x18(%rax), %edi
    0000018a: 	movl	%edi, 0x64(%rsp)
    0000018e: 	leal	0x19(%rax), %edi
    00000191: 	movslq	%edi, %rdi
    00000194: 	addq	%r14, %rdi
    00000197: 	movq	%rdi, 0xe8(%rsp)
    0000019f: 	leal	0x1b(%rax), %edi
    000001a2: 	movl	%edi, 0x88(%rsp)
    000001a9: 	leal	0x1c(%rax), %edi
    000001ac: 	movslq	%edi, %rdi
    000001af: 	addq	%r14, %rdi
    000001b2: 	movq	%rdi, 0xf8(%rsp)
    000001ba: 	leal	0x1e(%rax), %edi
    000001bd: 	movl	%edi, 0x8c(%rsp)
    000001c4: 	leal	0x1f(%rax), %edi
    000001c7: 	movslq	%edi, %rdi
    000001ca: 	addq	%r14, %rdi
    000001cd: 	movq	%rdi, 0x110(%rsp)
    000001d5: 	leal	0x21(%rax), %edi
    000001d8: 	movl	%edi, 0xb0(%rsp)
    000001df: 	leal	0x22(%rax), %edi
    000001e2: 	movslq	%edi, %rdi
    000001e5: 	addq	%r14, %rdi
    000001e8: 	movq	%rdi, 0x120(%rsp)
    000001f0: 	leal	0x24(%rax), %edi
    000001f3: 	movl	%edi, 0xb4(%rsp)
    000001fa: 	leal	0x25(%rax), %edi
    000001fd: 	movslq	%edi, %rdi
    00000200: 	addq	%r14, %rdi
    00000203: 	movq	%rdi, 0x130(%rsp)
    0000020b: 	leal	0x27(%rax), %edi
    0000020e: 	movl	%edi, 0xd8(%rsp)
    00000215: 	leal	0x28(%rax), %edi
    00000218: 	movslq	%edi, %rdi
    0000021b: 	addq	%r14, %rdi
    0000021e: 	movq	%rdi, 0x140(%rsp)
    00000226: 	leal	0x2a(%rax), %edi
    00000229: 	movl	%edi, 0xdc(%rsp)
    00000230: 	leal	0x2b(%rax), %edi
    00000233: 	movslq	%edi, %rdi
    00000236: 	addq	%r14, %rdi
    00000239: 	cmpq	%r11, %rsi
    0000023c: 	movq	%rdi, 0x150(%rsp)
    00000244: 	leaq	0x2(%r14), %rdi
    00000248: 	setbe	%sil
    0000024c: 	cmpq	%r10, %rdi
    0000024f: 	movq	%rdi, 0x28(%rsp)
    00000254: 	setae	%dil
    00000258: 	xorl	%r13d, %r13d
    0000025b: 	orl	%edi, %esi
    0000025d: 	movq	%r14, %rdi
    00000260: 	andl	%r9d, %esi
    00000263: 	movb	%sil, 0x22(%rsp)
    00000268: 	leaq	(%r14,%rdx), %rsi
    0000026c: 	leal	0x5(%rax), %edx
    0000026f: 	movslq	%edx, %rdx
    00000272: 	movq	%rsi, 0x38(%rsp)
    00000277: 	leaq	(%r14,%rdx), %rsi
    0000027b: 	leal	0x8(%rax), %edx
    0000027e: 	movslq	%edx, %rdx
    00000281: 	movq	%rsi, 0x50(%rsp)
    00000286: 	leaq	(%r14,%rdx), %rsi
    0000028a: 	leal	0xb(%rax), %edx
    0000028d: 	movslq	%edx, %rdx
    00000290: 	movq	%rsi, 0x68(%rsp)
    00000295: 	leaq	(%r14,%rdx), %rsi
    00000299: 	leal	0xe(%rax), %edx
    0000029c: 	movslq	%edx, %rdx
    0000029f: 	movq	%rsi, 0x78(%rsp)
    000002a4: 	leaq	(%r14,%rdx), %rsi
    000002a8: 	leal	0x11(%rax), %edx
    000002ab: 	movslq	%edx, %rdx
    000002ae: 	movq	%rsi, 0x90(%rsp)
    000002b6: 	leaq	(%r14,%rdx), %rsi
    000002ba: 	leal	0x14(%rax), %edx
    000002bd: 	movslq	%edx, %rdx
    000002c0: 	movq	%rsi, 0xa0(%rsp)
    000002c8: 	leaq	(%r14,%rdx), %rsi
    000002cc: 	leal	0x17(%rax), %edx
    000002cf: 	movslq	%edx, %rdx
    000002d2: 	movq	%rsi, 0xb8(%rsp)
    000002da: 	leaq	(%r14,%rdx), %rsi
    000002de: 	leal	0x1a(%rax), %edx
    000002e1: 	movslq	%edx, %rdx
    000002e4: 	movq	%rsi, 0xc8(%rsp)
    000002ec: 	leaq	(%r14,%rdx), %rsi
    000002f0: 	leal	0x1d(%rax), %edx
    000002f3: 	movslq	%edx, %rdx
    000002f6: 	movq	%rsi, 0xe0(%rsp)
    000002fe: 	leaq	(%r14,%rdx), %rsi
    00000302: 	leal	0x20(%rax), %edx
    00000305: 	movslq	%edx, %rdx
    00000308: 	movq	%rsi, 0xf0(%rsp)
    00000310: 	leaq	(%r14,%rdx), %rsi
    00000314: 	leal	0x23(%rax), %edx
    00000317: 	movslq	%edx, %rdx
    0000031a: 	movq	%rsi, 0x108(%rsp)
    00000322: 	leaq	(%r14,%rdx), %rsi
    00000326: 	leal	0x26(%rax), %edx
    00000329: 	movslq	%edx, %rdx
    0000032c: 	movq	%rsi, 0x118(%rsp)
    00000334: 	leaq	(%r14,%rdx), %rsi
    00000338: 	leal	0x29(%rax), %edx
    0000033b: 	addl	$0x2c, %eax
    0000033e: 	movslq	%edx, %rdx
    00000341: 	cltq
    00000343: 	movq	%rsi, 0x128(%rsp)
    0000034b: 	addq	%r14, %rax
    0000034e: 	leaq	(%r14,%rdx), %rsi
    00000352: 	movl	%r13d, %r14d
    00000355: 	movl	%ebx, %r13d
    00000358: 	movq	%rsi, 0x138(%rsp)
    00000360: 	movq	%r12, %rbx
    00000363: 	movq	%rbp, %r12
    00000366: 	movl	%ecx, %ebp
    00000368: 	movq	%rax, 0x148(%rsp)
.Ltmp797:
    00000370: 	xorl	%esi, %esi
    00000372: 	movq	%r15, %rdx
    00000375: 	callq	memset@PLT # Offset: 885
    0000037a: 	testl	%r13d, %r13d
    0000037d: 	movdqa	DATAat0x36f20(%rip), %xmm3
    00000385: 	movq	%rax, %rdi
    00000388: 	jle	.Ltmp791 # Offset: 904
    0000038e: 	cmpb	$0x0, 0x23(%rsp)
    00000393: 	je	.Ltmp792 # Offset: 915
    00000399: 	movsd	init_value(%rip), %xmm1
    000003a1: 	movq	0x30(%rsp), %rax
    000003a6: 	unpcklpd	%xmm1, %xmm1
    000003aa: 	cvttpd2dq	%xmm1, %xmm1
    000003ae: 	punpcklqdq	%xmm1, %xmm1
    000003b2: 	movdqa	%xmm1, %xmm2
    000003b6: 	punpckhwd	%xmm1, %xmm2
    000003ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp793:
    000003c0: 	movdqa	%xmm1, %xmm0
    000003c4: 	addq	$0x30, %rax
    000003c8: 	punpcklwd	%xmm1, %xmm0
    000003cc: 	movdqa	%xmm0, %xmm4
    000003d0: 	punpcklwd	%xmm2, %xmm0
    000003d4: 	punpckhwd	%xmm2, %xmm4
    000003d8: 	punpcklwd	%xmm4, %xmm0
    000003dc: 	pand	%xmm3, %xmm0
    000003e0: 	packuswb	%xmm0, %xmm0
    000003e4: 	movd	%xmm0, %edx
    000003e8: 	movb	%dl, -0x30(%rax)
    000003eb: 	movaps	%xmm0, 0x330(%rsp)
    000003f3: 	movzbl	0x331(%rsp), %edx
    000003fb: 	movb	%dl, -0x2d(%rax)
    000003fe: 	movaps	%xmm0, 0x320(%rsp)
    00000406: 	movzbl	0x322(%rsp), %edx
    0000040e: 	movb	%dl, -0x2a(%rax)
    00000411: 	movaps	%xmm0, 0x310(%rsp)
    00000419: 	movzbl	0x313(%rsp), %edx
    00000421: 	movb	%dl, -0x27(%rax)
    00000424: 	movaps	%xmm0, 0x300(%rsp)
    0000042c: 	movzbl	0x304(%rsp), %edx
    00000434: 	movb	%dl, -0x24(%rax)
    00000437: 	movaps	%xmm0, 0x2f0(%rsp)
    0000043f: 	movzbl	0x2f5(%rsp), %edx
    00000447: 	movb	%dl, -0x21(%rax)
    0000044a: 	movaps	%xmm0, 0x2e0(%rsp)
    00000452: 	movzbl	0x2e6(%rsp), %edx
    0000045a: 	movb	%dl, -0x1e(%rax)
    0000045d: 	movaps	%xmm0, 0x2d0(%rsp)
    00000465: 	movzbl	0x2d7(%rsp), %edx
    0000046d: 	movb	%dl, -0x1b(%rax)
    00000470: 	movaps	%xmm0, 0x2c0(%rsp)
    00000478: 	movzbl	0x2c8(%rsp), %edx
    00000480: 	movb	%dl, -0x18(%rax)
    00000483: 	movaps	%xmm0, 0x2b0(%rsp)
    0000048b: 	movzbl	0x2b9(%rsp), %edx
    00000493: 	movb	%dl, -0x15(%rax)
    00000496: 	movaps	%xmm0, 0x2a0(%rsp)
    0000049e: 	movzbl	0x2aa(%rsp), %edx
    000004a6: 	movb	%dl, -0x12(%rax)
    000004a9: 	movaps	%xmm0, 0x290(%rsp)
    000004b1: 	movzbl	0x29b(%rsp), %edx
    000004b9: 	movb	%dl, -0xf(%rax)
    000004bc: 	movaps	%xmm0, 0x280(%rsp)
    000004c4: 	movzbl	0x28c(%rsp), %edx
    000004cc: 	movb	%dl, -0xc(%rax)
    000004cf: 	movaps	%xmm0, 0x270(%rsp)
    000004d7: 	movzbl	0x27d(%rsp), %edx
    000004df: 	movb	%dl, -0x9(%rax)
    000004e2: 	movaps	%xmm0, 0x260(%rsp)
    000004ea: 	movzbl	0x26e(%rsp), %edx
    000004f2: 	movb	%dl, -0x6(%rax)
    000004f5: 	movaps	%xmm0, 0x250(%rsp)
    000004fd: 	movzbl	0x25f(%rsp), %edx
    00000505: 	movb	%dl, -0x3(%rax)
    00000508: 	cmpq	%rax, %r12
    0000050b: 	jne	.Ltmp793 # Offset: 1291
    00000511: 	cmpl	%ebp, 0xc(%rsp)
    00000515: 	je	.Ltmp794 # Offset: 1301
    0000051b: 	cvttsd2si	init_value(%rip), %eax
    00000523: 	movq	0x40(%rsp), %rcx
    00000528: 	movb	%al, (%rcx)
    0000052a: 	cmpl	0x10(%rsp), %r13d
    0000052f: 	jle	.Ltmp794 # Offset: 1327
    00000535: 	cvttsd2si	init_value(%rip), %eax
    0000053d: 	movq	0x58(%rsp), %rcx
    00000542: 	movb	%al, (%rcx)
    00000544: 	cmpl	0x14(%rsp), %r13d
    00000549: 	jle	.Ltmp794 # Offset: 1353
    0000054f: 	cvttsd2si	init_value(%rip), %eax
    00000557: 	movq	0x70(%rsp), %rcx
    0000055c: 	movb	%al, (%rcx)
    0000055e: 	cmpl	0x18(%rsp), %r13d
    00000563: 	jle	.Ltmp794 # Offset: 1379
    00000569: 	cvttsd2si	init_value(%rip), %eax
    00000571: 	movq	0x80(%rsp), %rcx
    00000579: 	movb	%al, (%rcx)
    0000057b: 	cmpl	0x1c(%rsp), %r13d
    00000580: 	jle	.Ltmp794 # Offset: 1408
    00000586: 	cvttsd2si	init_value(%rip), %eax
    0000058e: 	movq	0x98(%rsp), %rsi
    00000596: 	movb	%al, (%rsi)
    00000598: 	cmpl	0x24(%rsp), %r13d
    0000059d: 	jle	.Ltmp794 # Offset: 1437
    000005a3: 	cvttsd2si	init_value(%rip), %eax
    000005ab: 	movq	0xa8(%rsp), %rsi
    000005b3: 	movb	%al, (%rsi)
    000005b5: 	cmpl	0x48(%rsp), %r13d
    000005ba: 	jle	.Ltmp794 # Offset: 1466
    000005c0: 	cvttsd2si	init_value(%rip), %eax
    000005c8: 	movq	0xc0(%rsp), %rsi
    000005d0: 	movb	%al, (%rsi)
    000005d2: 	cmpl	0x4c(%rsp), %r13d
    000005d7: 	jle	.Ltmp794 # Offset: 1495
    000005dd: 	cvttsd2si	init_value(%rip), %eax
    000005e5: 	movq	0xd0(%rsp), %rsi
    000005ed: 	movb	%al, (%rsi)
    000005ef: 	cmpl	0x64(%rsp), %r13d
    000005f4: 	jle	.Ltmp794 # Offset: 1524
    000005fa: 	cvttsd2si	init_value(%rip), %eax
    00000602: 	movq	0xe8(%rsp), %rsi
    0000060a: 	movb	%al, (%rsi)
    0000060c: 	cmpl	0x88(%rsp), %r13d
    00000614: 	jle	.Ltmp794 # Offset: 1556
    0000061a: 	cvttsd2si	init_value(%rip), %eax
    00000622: 	movq	0xf8(%rsp), %rcx
    0000062a: 	movb	%al, (%rcx)
    0000062c: 	cmpl	0x8c(%rsp), %r13d
    00000634: 	jle	.Ltmp794 # Offset: 1588
    0000063a: 	cvttsd2si	init_value(%rip), %eax
    00000642: 	movq	0x110(%rsp), %rcx
    0000064a: 	movb	%al, (%rcx)
    0000064c: 	cmpl	0xb0(%rsp), %r13d
    00000654: 	jle	.Ltmp794 # Offset: 1620
    00000656: 	cvttsd2si	init_value(%rip), %eax
    0000065e: 	movq	0x120(%rsp), %rsi
    00000666: 	movb	%al, (%rsi)
    00000668: 	cmpl	0xb4(%rsp), %r13d
    00000670: 	jle	.Ltmp794 # Offset: 1648
    00000672: 	cvttsd2si	init_value(%rip), %eax
    0000067a: 	movq	0x130(%rsp), %rcx
    00000682: 	movb	%al, (%rcx)
    00000684: 	cmpl	0xd8(%rsp), %r13d
    0000068c: 	jle	.Ltmp794 # Offset: 1676
    0000068e: 	cvttsd2si	init_value(%rip), %eax
    00000696: 	movq	0x140(%rsp), %rcx
    0000069e: 	movb	%al, (%rcx)
    000006a0: 	cmpl	0xdc(%rsp), %r13d
    000006a8: 	jle	.Ltmp794 # Offset: 1704
    000006aa: 	cvttsd2si	init_value(%rip), %eax
    000006b2: 	movq	0x150(%rsp), %rsi
    000006ba: 	movb	%al, (%rsi)
    000006bc: 	nopl	(%rax) # Size: 4
.Ltmp794:
    000006c0: 	cmpb	$0x0, 0x22(%rsp)
    000006c5: 	je	.Ltmp795 # Offset: 1733
    000006cb: 	movsd	init_value(%rip), %xmm1
    000006d3: 	movq	0x28(%rsp), %rax
    000006d8: 	unpcklpd	%xmm1, %xmm1
    000006dc: 	cvttpd2dq	%xmm1, %xmm1
    000006e0: 	punpcklqdq	%xmm1, %xmm1
    000006e4: 	movdqa	%xmm1, %xmm2
    000006e8: 	punpckhwd	%xmm1, %xmm2
    000006ec: 	nopl	(%rax) # Size: 4
.Ltmp796:
    000006f0: 	movdqa	%xmm1, %xmm0
    000006f4: 	addq	$0x30, %rax
    000006f8: 	punpcklwd	%xmm1, %xmm0
    000006fc: 	movdqa	%xmm0, %xmm4
    00000700: 	punpcklwd	%xmm2, %xmm0
    00000704: 	punpckhwd	%xmm2, %xmm4
    00000708: 	punpcklwd	%xmm4, %xmm0
    0000070c: 	pand	%xmm3, %xmm0
    00000710: 	packuswb	%xmm0, %xmm0
    00000714: 	movd	%xmm0, %edx
    00000718: 	movb	%dl, -0x30(%rax)
    0000071b: 	movaps	%xmm0, 0x240(%rsp)
    00000723: 	movzbl	0x241(%rsp), %edx
    0000072b: 	movb	%dl, -0x2d(%rax)
    0000072e: 	movaps	%xmm0, 0x230(%rsp)
    00000736: 	movzbl	0x232(%rsp), %edx
    0000073e: 	movb	%dl, -0x2a(%rax)
    00000741: 	movaps	%xmm0, 0x220(%rsp)
    00000749: 	movzbl	0x223(%rsp), %edx
    00000751: 	movb	%dl, -0x27(%rax)
    00000754: 	movaps	%xmm0, 0x210(%rsp)
    0000075c: 	movzbl	0x214(%rsp), %edx
    00000764: 	movb	%dl, -0x24(%rax)
    00000767: 	movaps	%xmm0, 0x200(%rsp)
    0000076f: 	movzbl	0x205(%rsp), %edx
    00000777: 	movb	%dl, -0x21(%rax)
    0000077a: 	movaps	%xmm0, 0x1f0(%rsp)
    00000782: 	movzbl	0x1f6(%rsp), %edx
    0000078a: 	movb	%dl, -0x1e(%rax)
    0000078d: 	movaps	%xmm0, 0x1e0(%rsp)
    00000795: 	movzbl	0x1e7(%rsp), %edx
    0000079d: 	movb	%dl, -0x1b(%rax)
    000007a0: 	movaps	%xmm0, 0x1d0(%rsp)
    000007a8: 	movzbl	0x1d8(%rsp), %edx
    000007b0: 	movb	%dl, -0x18(%rax)
    000007b3: 	movaps	%xmm0, 0x1c0(%rsp)
    000007bb: 	movzbl	0x1c9(%rsp), %edx
    000007c3: 	movb	%dl, -0x15(%rax)
    000007c6: 	movaps	%xmm0, 0x1b0(%rsp)
    000007ce: 	movzbl	0x1ba(%rsp), %edx
    000007d6: 	movb	%dl, -0x12(%rax)
    000007d9: 	movaps	%xmm0, 0x1a0(%rsp)
    000007e1: 	movzbl	0x1ab(%rsp), %edx
    000007e9: 	movb	%dl, -0xf(%rax)
    000007ec: 	movaps	%xmm0, 0x190(%rsp)
    000007f4: 	movzbl	0x19c(%rsp), %edx
    000007fc: 	movb	%dl, -0xc(%rax)
    000007ff: 	movaps	%xmm0, 0x180(%rsp)
    00000807: 	movzbl	0x18d(%rsp), %edx
    0000080f: 	movb	%dl, -0x9(%rax)
    00000812: 	movaps	%xmm0, 0x170(%rsp)
    0000081a: 	movzbl	0x17e(%rsp), %edx
    00000822: 	movb	%dl, -0x6(%rax)
    00000825: 	movaps	%xmm0, 0x160(%rsp)
    0000082d: 	movzbl	0x16f(%rsp), %edx
    00000835: 	movb	%dl, -0x3(%rax)
    00000838: 	cmpq	%rbx, %rax
    0000083b: 	jne	.Ltmp796 # Offset: 2107
    00000841: 	cmpl	%ebp, 0xc(%rsp)
    00000845: 	je	.Ltmp791 # Offset: 2117
    0000084b: 	cvttsd2si	init_value(%rip), %eax
    00000853: 	movq	0x38(%rsp), %rcx
    00000858: 	movb	%al, (%rcx)
    0000085a: 	cmpl	0x10(%rsp), %r13d
    0000085f: 	jle	.Ltmp791 # Offset: 2143
    00000865: 	cvttsd2si	init_value(%rip), %eax
    0000086d: 	movq	0x50(%rsp), %rsi
    00000872: 	movb	%al, (%rsi)
    00000874: 	cmpl	0x14(%rsp), %r13d
    00000879: 	jle	.Ltmp791 # Offset: 2169
    0000087f: 	cvttsd2si	init_value(%rip), %eax
    00000887: 	movq	0x68(%rsp), %rsi
    0000088c: 	movb	%al, (%rsi)
    0000088e: 	cmpl	0x18(%rsp), %r13d
    00000893: 	jle	.Ltmp791 # Offset: 2195
    00000899: 	cvttsd2si	init_value(%rip), %eax
    000008a1: 	movq	0x78(%rsp), %rcx
    000008a6: 	movb	%al, (%rcx)
    000008a8: 	cmpl	0x1c(%rsp), %r13d
    000008ad: 	jle	.Ltmp791 # Offset: 2221
    000008b3: 	cvttsd2si	init_value(%rip), %eax
    000008bb: 	movq	0x90(%rsp), %rsi
    000008c3: 	movb	%al, (%rsi)
    000008c5: 	cmpl	0x24(%rsp), %r13d
    000008ca: 	jle	.Ltmp791 # Offset: 2250
    000008d0: 	cvttsd2si	init_value(%rip), %eax
    000008d8: 	movq	0xa0(%rsp), %rsi
    000008e0: 	movb	%al, (%rsi)
    000008e2: 	cmpl	0x48(%rsp), %r13d
    000008e7: 	jle	.Ltmp791 # Offset: 2279
    000008ed: 	cvttsd2si	init_value(%rip), %eax
    000008f5: 	movq	0xb8(%rsp), %rcx
    000008fd: 	movb	%al, (%rcx)
    000008ff: 	cmpl	0x4c(%rsp), %r13d
    00000904: 	jle	.Ltmp791 # Offset: 2308
    0000090a: 	cvttsd2si	init_value(%rip), %eax
    00000912: 	movq	0xc8(%rsp), %rcx
    0000091a: 	movb	%al, (%rcx)
    0000091c: 	cmpl	0x64(%rsp), %r13d
    00000921: 	jle	.Ltmp791 # Offset: 2337
    00000927: 	cvttsd2si	init_value(%rip), %eax
    0000092f: 	movq	0xe0(%rsp), %rcx
    00000937: 	movb	%al, (%rcx)
    00000939: 	cmpl	0x88(%rsp), %r13d
    00000941: 	jle	.Ltmp791 # Offset: 2369
    00000947: 	cvttsd2si	init_value(%rip), %eax
    0000094f: 	movq	0xf0(%rsp), %rcx
    00000957: 	movb	%al, (%rcx)
    00000959: 	cmpl	0x8c(%rsp), %r13d
    00000961: 	jle	.Ltmp791 # Offset: 2401
    00000967: 	cvttsd2si	init_value(%rip), %eax
    0000096f: 	movq	0x108(%rsp), %rcx
    00000977: 	movb	%al, (%rcx)
    00000979: 	cmpl	0xb0(%rsp), %r13d
    00000981: 	jle	.Ltmp791 # Offset: 2433
    00000983: 	cvttsd2si	init_value(%rip), %eax
    0000098b: 	movq	0x118(%rsp), %rcx
    00000993: 	movb	%al, (%rcx)
    00000995: 	cmpl	0xb4(%rsp), %r13d
    0000099d: 	jle	.Ltmp791 # Offset: 2461
    0000099f: 	cvttsd2si	init_value(%rip), %eax
    000009a7: 	movq	0x128(%rsp), %rcx
    000009af: 	movb	%al, (%rcx)
    000009b1: 	cmpl	0xd8(%rsp), %r13d
    000009b9: 	jle	.Ltmp791 # Offset: 2489
    000009bb: 	cvttsd2si	init_value(%rip), %eax
    000009c3: 	movq	0x138(%rsp), %rcx
    000009cb: 	movb	%al, (%rcx)
    000009cd: 	cmpl	0xdc(%rsp), %r13d
    000009d5: 	jle	.Ltmp791 # Offset: 2517
    000009d7: 	cvttsd2si	init_value(%rip), %eax
    000009df: 	movq	0x148(%rsp), %rsi
    000009e7: 	movb	%al, (%rsi)
    000009e9: 	nopl	(%rax) # Size: 7
.Ltmp791:
    000009f0: 	addl	$0x1, %r14d
    000009f4: 	cmpl	%r14d, iterations(%rip)
    000009fb: 	jg	.Ltmp797 # Offset: 2555
    00000a01: 	movq	%rdi, %r14
.Ltmp790:
    00000a04: 	callq	clock@PLT # Offset: 2564
    00000a09: 	movq	0x100(%rsp), %rdi
    00000a11: 	pxor	%xmm0, %xmm0
    00000a15: 	xorl	%ebx, %ebx
    00000a17: 	movq	%rax, end_time(%rip)
    00000a1e: 	subq	start_time(%rip), %rax
    00000a25: 	cvtsi2sd	%rax, %xmm0
    00000a2a: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000a32: 	callq	_Z13record_resultdPKc # Offset: 2610
    00000a37: 	movl	0x60(%rsp), %eax
    00000a3b: 	testl	%eax, %eax
    00000a3d: 	jle	.Ltmp798 # Offset: 2621
    00000a43: 	movl	0x60(%rsp), %ebx
    00000a47: 	leal	-0x1(%rbx), %eax
    00000a4a: 	cmpl	$0xe, %eax
    00000a4d: 	jbe	.Ltmp799 # Offset: 2637
    00000a53: 	shrl	$0x4, %ebx
    00000a56: 	movq	%r14, %rax
    00000a59: 	pxor	%xmm0, %xmm0
    00000a5d: 	movl	%ebx, %edx
    00000a5f: 	subl	$0x1, %edx
    00000a62: 	shlq	$0x4, %rdx
    00000a66: 	leaq	0x10(%r14,%rdx), %rdx
    00000a6b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp800:
    00000a70: 	movdqu	(%rax), %xmm5
    00000a74: 	addq	$0x10, %rax
    00000a78: 	paddb	%xmm5, %xmm0
    00000a7c: 	cmpq	%rdx, %rax
    00000a7f: 	jne	.Ltmp800 # Offset: 2687
    00000a81: 	movdqa	%xmm0, %xmm1
    00000a85: 	movl	0x60(%rsp), %esi
    00000a89: 	psrldq	$0x8, %xmm1
    00000a8e: 	paddb	%xmm1, %xmm0
    00000a92: 	movl	%esi, %edx
    00000a94: 	pxor	%xmm1, %xmm1
    00000a98: 	psadbw	%xmm1, %xmm0
    00000a9c: 	andl	$-0x10, %edx
    00000a9f: 	movd	%xmm0, %ebx
    00000aa3: 	movl	%edx, %eax
    00000aa5: 	cmpl	%esi, %edx
    00000aa7: 	je	.Ltmp798 # Offset: 2727
.Ltmp808:
    00000aad: 	movl	0x60(%rsp), %esi
    00000ab1: 	subl	%edx, %esi
    00000ab3: 	leal	-0x1(%rsi), %edi
    00000ab6: 	cmpl	$0x6, %edi
    00000ab9: 	jbe	.Ltmp801 # Offset: 2745
    00000abb: 	movq	(%r14,%rdx), %xmm1
    00000ac1: 	pxor	%xmm0, %xmm0
    00000ac5: 	movdqa	%xmm1, %xmm6
    00000ac9: 	psadbw	%xmm0, %xmm6
    00000acd: 	movq	%xmm6, 0x158(%rsp)
    00000ad6: 	movq	%xmm6, %rdx
    00000adb: 	movl	%edx, %edi
    00000add: 	movl	%esi, %edx
    00000adf: 	andl	$-0x8, %edx
    00000ae2: 	addl	%edi, %ebx
    00000ae4: 	addl	%edx, %eax
    00000ae6: 	cmpl	%edx, %esi
    00000ae8: 	je	.Ltmp798 # Offset: 2792
.Ltmp801:
    00000aea: 	movslq	%eax, %rdx
    00000aed: 	movl	0x60(%rsp), %esi
    00000af1: 	addb	(%r14,%rdx), %bl
    00000af5: 	leal	0x1(%rax), %edx
    00000af8: 	cmpl	%edx, %esi
    00000afa: 	jle	.Ltmp798 # Offset: 2810
    00000afc: 	movslq	%edx, %rdx
    00000aff: 	addb	(%r14,%rdx), %bl
    00000b03: 	leal	0x2(%rax), %edx
    00000b06: 	cmpl	%edx, %esi
    00000b08: 	jle	.Ltmp798 # Offset: 2824
    00000b0a: 	movslq	%edx, %rdx
    00000b0d: 	addb	(%r14,%rdx), %bl
    00000b11: 	leal	0x3(%rax), %edx
    00000b14: 	cmpl	%edx, %esi
    00000b16: 	jle	.Ltmp798 # Offset: 2838
    00000b18: 	movslq	%edx, %rdx
    00000b1b: 	addb	(%r14,%rdx), %bl
    00000b1f: 	leal	0x4(%rax), %edx
    00000b22: 	cmpl	%esi, %edx
    00000b24: 	jge	.Ltmp798 # Offset: 2852
    00000b26: 	movslq	%edx, %rdx
    00000b29: 	addb	(%r14,%rdx), %bl
    00000b2d: 	leal	0x5(%rax), %edx
    00000b30: 	cmpl	%edx, %esi
    00000b32: 	jle	.Ltmp798 # Offset: 2866
    00000b34: 	movslq	%edx, %rdx
    00000b37: 	addl	$0x6, %eax
    00000b3a: 	addb	(%r14,%rdx), %bl
    00000b3e: 	cmpl	%eax, %esi
    00000b40: 	jle	.Ltmp798 # Offset: 2880
    00000b42: 	cltq
    00000b44: 	addb	(%r14,%rax), %bl
.Ltmp798:
    00000b48: 	movsd	init_value(%rip), %xmm0
    00000b50: 	movl	$0xffffffaa, %eax
    00000b55: 	addsd	%xmm0, %xmm0
    00000b59: 	cvttsd2si	%xmm0, %edx
    00000b5d: 	imull	%edx, %eax
    00000b60: 	movl	%eax, %ebp
    00000b62: 	cmpb	%bl, %al
    00000b64: 	jne	.Ltmp802 # Offset: 2916
    00000b66: 	movq	0x348(%rsp), %rax
    00000b6e: 	subq	%fs:0x28, %rax
    00000b77: 	jne	.Ltmp803 # Offset: 2935
    00000b7d: 	addq	$0x358, %rsp
    00000b84: 	popq	%rbx
    00000b85: 	popq	%rbp
    00000b86: 	popq	%r12
    00000b88: 	popq	%r13
    00000b8a: 	popq	%r14
    00000b8c: 	popq	%r15
    00000b8e: 	retq # Offset: 2958
    00000b8f: 	nop # Size: 1
.Ltmp795:
    00000b90: 	xorl	%eax, %eax
    00000b92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp804:
    00000b98: 	cvttsd2si	init_value(%rip), %edx
    00000ba0: 	movb	%dl, 0x2(%rdi,%rax)
    00000ba4: 	addq	$0x3, %rax
    00000ba8: 	cmpl	%eax, %r13d
    00000bab: 	jg	.Ltmp804 # Offset: 2987
    00000bad: 	jmp	.Ltmp791 # Offset: 2989
    00000bb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp792:
    00000bb8: 	xorl	%eax, %eax
    00000bba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp805:
    00000bc0: 	cvttsd2si	init_value(%rip), %edx
    00000bc8: 	movb	%dl, 0x1(%rdi,%rax)
    00000bcc: 	addq	$0x3, %rax
    00000bd0: 	cmpl	%eax, %r13d
    00000bd3: 	jg	.Ltmp805 # Offset: 3027
    00000bd5: 	jmp	.Ltmp794 # Offset: 3029
.Ltmp802:
    00000bda: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000be1: 	movl	$0x5, %edx
    00000be6: 	leaq	DATAat0x35004(%rip), %rsi
    00000bed: 	movq	%r12, %rdi
    00000bf0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3056
    00000bf5: 	cmpq	$0x0, 0x100(%rsp)
    00000bfe: 	je	.Ltmp806 # Offset: 3070
    00000c04: 	movq	0x100(%rsp), %r15
    00000c0c: 	movq	%r15, %rdi
    00000c0f: 	callq	strlen@PLT # Offset: 3087
    00000c14: 	movq	%r15, %rsi
    00000c17: 	movq	%r12, %rdi
    00000c1a: 	movq	%rax, %rdx
    00000c1d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3101
.Ltmp807:
    00000c22: 	movq	%r12, %rdi
    00000c25: 	movl	$0xd, %edx
    00000c2a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000c31: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3121
    00000c36: 	leaq	0x347(%rsp), %r13
    00000c3e: 	movq	%r12, %rdi
    00000c41: 	movl	$0x1, %edx
    00000c46: 	movq	%r13, %rsi
    00000c49: 	movb	%bl, 0x347(%rsp)
    00000c50: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3152
    00000c55: 	movl	$0xb, %edx
    00000c5a: 	leaq	DATAat0x35018(%rip), %rsi
    00000c61: 	movq	%rax, %r12
    00000c64: 	movq	%rax, %rdi
    00000c67: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3175
    00000c6c: 	movq	%r12, %rdi
    00000c6f: 	movl	$0x1, %edx
    00000c74: 	movq	%r13, %rsi
    00000c77: 	movb	%bpl, 0x347(%rsp)
    00000c7f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3199
    00000c84: 	movq	%rax, %rdi
    00000c87: 	movq	0x348(%rsp), %rax
    00000c8f: 	subq	%fs:0x28, %rax
    00000c98: 	jne	.Ltmp803 # Offset: 3224
    00000c9a: 	addq	$0x358, %rsp
    00000ca1: 	popq	%rbx
    00000ca2: 	popq	%rbp
    00000ca3: 	popq	%r12
    00000ca5: 	popq	%r13
    00000ca7: 	popq	%r14
    00000ca9: 	popq	%r15
    00000cab: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3243
.Ltmp806:
    00000cb0: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000cb7: 	movq	-0x18(%rax), %rdi
    00000cbb: 	addq	%r12, %rdi
    00000cbe: 	movl	0x20(%rdi), %esi
    00000cc1: 	orl	$0x1, %esi
    00000cc4: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3268
    00000cc9: 	jmp	.Ltmp807 # Offset: 3273
.Ltmp799:
    00000cce: 	xorl	%edx, %edx
    00000cd0: 	xorl	%ebx, %ebx
    00000cd2: 	xorl	%eax, %eax
    00000cd4: 	jmp	.Ltmp808 # Offset: 3284
.Ltmp803:
    00000cd9: 	callq	__stack_chk_fail@PLT # Offset: 3289
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_memset_overwrite3IhEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite3IhEvPT_iPKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x160c0
  Size        : 0xd05
  MaxSize     : 0xd10
  Offset      : 0x160c0
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x358, %rsp
    0000001b: 	movq	%rdx, 0x100(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x348(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp809 # Offset: 74
    00000050: 	leal	-0x3(%r15), %r12d
    00000054: 	movl	$0xaaaaaaab, %eax
    00000059: 	leaq	init_value(%rip), %r11
    00000060: 	cmpl	$0x2c, %r12d
    00000064: 	leaq	0x1(%rbp), %rdi
    00000068: 	leaq	0x8(%r11), %r10
    0000006c: 	seta	%r9b
    00000070: 	imulq	%rax, %r12
    00000074: 	movq	%rdi, 0x38(%rsp)
    00000079: 	leal	-0x2(%r15), %ebx
    0000007d: 	shrq	$0x21, %r12
    00000081: 	leal	0x1(%r12), %eax
    00000086: 	leaq	(%rax,%rax,2), %rsi
    0000008a: 	movq	%rax, %rcx
    0000008d: 	movl	%eax, 0xc(%rsp)
    00000091: 	leaq	-0x1(%rbp,%rsi), %rax
    00000096: 	cmpq	%r11, %rax
    00000099: 	setbe	%al
    0000009c: 	cmpq	%r10, %rdi
    0000009f: 	setae	%dl
    000000a2: 	addq	%rbp, %rsi
    000000a5: 	orl	%edx, %eax
    000000a7: 	andl	%r9d, %eax
    000000aa: 	movb	%al, 0x23(%rsp)
    000000ae: 	movl	%ecx, %eax
    000000b0: 	andl	$-0x10, %ecx
    000000b3: 	shrl	$0x4, %eax
    000000b6: 	subl	$0x1, %eax
    000000b9: 	leaq	(%rax,%rax,2), %rdx
    000000bd: 	leal	(%rcx,%rcx,2), %eax
    000000c0: 	leal	0x1(%rax), %edi
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	movslq	%edi, %rdi
    000000ca: 	leaq	0x31(%rbp,%rdx), %r12
    000000cf: 	leaq	0x32(%rbp,%rdx), %r13
    000000d4: 	addq	%rbp, %rdi
    000000d7: 	leal	0x2(%rax), %edx
    000000da: 	movq	%rdi, 0x48(%rsp)
    000000df: 	leal	0x3(%rax), %edi
    000000e2: 	movslq	%edx, %rdx
    000000e5: 	movl	%edi, 0x10(%rsp)
    000000e9: 	leal	0x4(%rax), %edi
    000000ec: 	movslq	%edi, %rdi
    000000ef: 	addq	%rbp, %rdi
    000000f2: 	movq	%rdi, 0x58(%rsp)
    000000f7: 	leal	0x6(%rax), %edi
    000000fa: 	movl	%edi, 0x14(%rsp)
    000000fe: 	leal	0x7(%rax), %edi
    00000101: 	movslq	%edi, %rdi
    00000104: 	addq	%rbp, %rdi
    00000107: 	movq	%rdi, 0x70(%rsp)
    0000010c: 	leal	0x9(%rax), %edi
    0000010f: 	movl	%edi, 0x18(%rsp)
    00000113: 	leal	0xa(%rax), %edi
    00000116: 	movslq	%edi, %rdi
    00000119: 	addq	%rbp, %rdi
    0000011c: 	movq	%rdi, 0x80(%rsp)
    00000124: 	leal	0xc(%rax), %edi
    00000127: 	movl	%edi, 0x1c(%rsp)
    0000012b: 	leal	0xd(%rax), %edi
    0000012e: 	movslq	%edi, %rdi
    00000131: 	addq	%rbp, %rdi
    00000134: 	movq	%rdi, 0x98(%rsp)
    0000013c: 	leal	0xf(%rax), %edi
    0000013f: 	movl	%edi, 0x28(%rsp)
    00000143: 	leal	0x10(%rax), %edi
    00000146: 	movslq	%edi, %rdi
    00000149: 	addq	%rbp, %rdi
    0000014c: 	movq	%rdi, 0xa8(%rsp)
    00000154: 	leal	0x12(%rax), %edi
    00000157: 	movl	%edi, 0x2c(%rsp)
    0000015b: 	leal	0x13(%rax), %edi
    0000015e: 	movslq	%edi, %rdi
    00000161: 	addq	%rbp, %rdi
    00000164: 	movq	%rdi, 0xc0(%rsp)
    0000016c: 	leal	0x15(%rax), %edi
    0000016f: 	movl	%edi, 0x60(%rsp)
    00000173: 	leal	0x16(%rax), %edi
    00000176: 	movslq	%edi, %rdi
    00000179: 	addq	%rbp, %rdi
    0000017c: 	movq	%rdi, 0xd0(%rsp)
    00000184: 	leal	0x18(%rax), %edi
    00000187: 	movl	%edi, 0x64(%rsp)
    0000018b: 	leal	0x19(%rax), %edi
    0000018e: 	movslq	%edi, %rdi
    00000191: 	addq	%rbp, %rdi
    00000194: 	movq	%rdi, 0xe8(%rsp)
    0000019c: 	leal	0x1b(%rax), %edi
    0000019f: 	movl	%edi, 0x88(%rsp)
    000001a6: 	leal	0x1c(%rax), %edi
    000001a9: 	movslq	%edi, %rdi
    000001ac: 	addq	%rbp, %rdi
    000001af: 	movq	%rdi, 0xf8(%rsp)
    000001b7: 	leal	0x1e(%rax), %edi
    000001ba: 	movl	%edi, 0x8c(%rsp)
    000001c1: 	leal	0x1f(%rax), %edi
    000001c4: 	movslq	%edi, %rdi
    000001c7: 	addq	%rbp, %rdi
    000001ca: 	movq	%rdi, 0x110(%rsp)
    000001d2: 	leal	0x21(%rax), %edi
    000001d5: 	movl	%edi, 0xb0(%rsp)
    000001dc: 	leal	0x22(%rax), %edi
    000001df: 	movslq	%edi, %rdi
    000001e2: 	addq	%rbp, %rdi
    000001e5: 	movq	%rdi, 0x120(%rsp)
    000001ed: 	leal	0x24(%rax), %edi
    000001f0: 	movl	%edi, 0xb4(%rsp)
    000001f7: 	leal	0x25(%rax), %edi
    000001fa: 	movslq	%edi, %rdi
    000001fd: 	addq	%rbp, %rdi
    00000200: 	movq	%rdi, 0x130(%rsp)
    00000208: 	leal	0x27(%rax), %edi
    0000020b: 	movl	%edi, 0xd8(%rsp)
    00000212: 	leal	0x28(%rax), %edi
    00000215: 	movslq	%edi, %rdi
    00000218: 	addq	%rbp, %rdi
    0000021b: 	movq	%rdi, 0x140(%rsp)
    00000223: 	leal	0x2a(%rax), %edi
    00000226: 	movl	%edi, 0xdc(%rsp)
    0000022d: 	leal	0x2b(%rax), %edi
    00000230: 	movslq	%edi, %rdi
    00000233: 	addq	%rbp, %rdi
    00000236: 	cmpq	%r11, %rsi
    00000239: 	movq	%rdi, 0x150(%rsp)
    00000241: 	leaq	0x2(%rbp), %rdi
    00000245: 	setbe	%sil
    00000249: 	cmpq	%r10, %rdi
    0000024c: 	movq	%rdi, 0x30(%rsp)
    00000251: 	movdqa	DATAat0x36f20(%rip), %xmm3
    00000259: 	setae	%dil
    0000025d: 	xorl	%r14d, %r14d
    00000260: 	orl	%edi, %esi
    00000262: 	movq	%rbp, %rdi
    00000265: 	andl	%r9d, %esi
    00000268: 	movb	%sil, 0x22(%rsp)
    0000026d: 	leaq	(%rbp,%rdx), %rsi
    00000272: 	leal	0x5(%rax), %edx
    00000275: 	movslq	%edx, %rdx
    00000278: 	movq	%rsi, 0x40(%rsp)
    0000027d: 	leaq	(%rbp,%rdx), %rsi
    00000282: 	leal	0x8(%rax), %edx
    00000285: 	movslq	%edx, %rdx
    00000288: 	movq	%rsi, 0x50(%rsp)
    0000028d: 	leaq	(%rbp,%rdx), %rsi
    00000292: 	leal	0xb(%rax), %edx
    00000295: 	movslq	%edx, %rdx
    00000298: 	movq	%rsi, 0x68(%rsp)
    0000029d: 	leaq	(%rbp,%rdx), %rsi
    000002a2: 	leal	0xe(%rax), %edx
    000002a5: 	movslq	%edx, %rdx
    000002a8: 	movq	%rsi, 0x78(%rsp)
    000002ad: 	leaq	(%rbp,%rdx), %rsi
    000002b2: 	leal	0x11(%rax), %edx
    000002b5: 	movslq	%edx, %rdx
    000002b8: 	movq	%rsi, 0x90(%rsp)
    000002c0: 	leaq	(%rbp,%rdx), %rsi
    000002c5: 	leal	0x14(%rax), %edx
    000002c8: 	movslq	%edx, %rdx
    000002cb: 	movq	%rsi, 0xa0(%rsp)
    000002d3: 	leaq	(%rbp,%rdx), %rsi
    000002d8: 	leal	0x17(%rax), %edx
    000002db: 	movslq	%edx, %rdx
    000002de: 	movq	%rsi, 0xb8(%rsp)
    000002e6: 	leaq	(%rbp,%rdx), %rsi
    000002eb: 	leal	0x1a(%rax), %edx
    000002ee: 	movslq	%edx, %rdx
    000002f1: 	movq	%rsi, 0xc8(%rsp)
    000002f9: 	leaq	(%rbp,%rdx), %rsi
    000002fe: 	leal	0x1d(%rax), %edx
    00000301: 	movslq	%edx, %rdx
    00000304: 	movq	%rsi, 0xe0(%rsp)
    0000030c: 	leaq	(%rbp,%rdx), %rsi
    00000311: 	leal	0x20(%rax), %edx
    00000314: 	movslq	%edx, %rdx
    00000317: 	movq	%rsi, 0xf0(%rsp)
    0000031f: 	leaq	(%rbp,%rdx), %rsi
    00000324: 	leal	0x23(%rax), %edx
    00000327: 	movslq	%edx, %rdx
    0000032a: 	movq	%rsi, 0x108(%rsp)
    00000332: 	leaq	(%rbp,%rdx), %rsi
    00000337: 	leal	0x26(%rax), %edx
    0000033a: 	movslq	%edx, %rdx
    0000033d: 	movq	%rsi, 0x118(%rsp)
    00000345: 	leaq	(%rbp,%rdx), %rsi
    0000034a: 	leal	0x29(%rax), %edx
    0000034d: 	addl	$0x2c, %eax
    00000350: 	cltq
    00000352: 	movslq	%edx, %rdx
    00000355: 	movq	%rsi, 0x128(%rsp)
    0000035d: 	addq	%rbp, %rax
    00000360: 	leaq	(%rbp,%rdx), %rsi
    00000365: 	movl	%r14d, %ebp
    00000368: 	movl	%ebx, %r14d
    0000036b: 	movq	%rax, 0x148(%rsp)
    00000373: 	leal	-0x1(%r15), %eax
    00000377: 	movq	%r13, %rbx
    0000037a: 	movq	%r12, %r13
    0000037d: 	movq	%rsi, 0x138(%rsp)
    00000385: 	movl	%ecx, %r12d
    00000388: 	movl	%eax, 0x24(%rsp)
    0000038c: 	nopl	(%rax) # Size: 4
.Ltmp817:
    00000390: 	testl	%r15d, %r15d
    00000393: 	jle	.Ltmp810 # Offset: 915
    00000395: 	movl	0x24(%rsp), %edx
    00000399: 	xorl	%esi, %esi
    0000039b: 	addq	$0x1, %rdx
    0000039f: 	callq	memset@PLT # Offset: 927
    000003a4: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000003ac: 	movq	%rax, %rdi
.Ltmp810:
    000003af: 	testl	%r14d, %r14d
    000003b2: 	jle	.Ltmp811 # Offset: 946
    000003b8: 	cmpb	$0x0, 0x23(%rsp)
    000003bd: 	je	.Ltmp812 # Offset: 957
    000003c3: 	movsd	init_value(%rip), %xmm1
    000003cb: 	movq	0x38(%rsp), %rax
    000003d0: 	unpcklpd	%xmm1, %xmm1
    000003d4: 	cvttpd2dq	%xmm1, %xmm1
    000003d8: 	punpcklqdq	%xmm1, %xmm1
    000003dc: 	movdqa	%xmm1, %xmm2
    000003e0: 	punpckhwd	%xmm1, %xmm2
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp813:
    000003e8: 	movdqa	%xmm1, %xmm0
    000003ec: 	addq	$0x30, %rax
    000003f0: 	punpcklwd	%xmm1, %xmm0
    000003f4: 	movdqa	%xmm0, %xmm4
    000003f8: 	punpcklwd	%xmm2, %xmm0
    000003fc: 	punpckhwd	%xmm2, %xmm4
    00000400: 	punpcklwd	%xmm4, %xmm0
    00000404: 	pand	%xmm3, %xmm0
    00000408: 	packuswb	%xmm0, %xmm0
    0000040c: 	movd	%xmm0, %edx
    00000410: 	movb	%dl, -0x30(%rax)
    00000413: 	movaps	%xmm0, 0x330(%rsp)
    0000041b: 	movzbl	0x331(%rsp), %edx
    00000423: 	movb	%dl, -0x2d(%rax)
    00000426: 	movaps	%xmm0, 0x320(%rsp)
    0000042e: 	movzbl	0x322(%rsp), %edx
    00000436: 	movb	%dl, -0x2a(%rax)
    00000439: 	movaps	%xmm0, 0x310(%rsp)
    00000441: 	movzbl	0x313(%rsp), %edx
    00000449: 	movb	%dl, -0x27(%rax)
    0000044c: 	movaps	%xmm0, 0x300(%rsp)
    00000454: 	movzbl	0x304(%rsp), %edx
    0000045c: 	movb	%dl, -0x24(%rax)
    0000045f: 	movaps	%xmm0, 0x2f0(%rsp)
    00000467: 	movzbl	0x2f5(%rsp), %edx
    0000046f: 	movb	%dl, -0x21(%rax)
    00000472: 	movaps	%xmm0, 0x2e0(%rsp)
    0000047a: 	movzbl	0x2e6(%rsp), %edx
    00000482: 	movb	%dl, -0x1e(%rax)
    00000485: 	movaps	%xmm0, 0x2d0(%rsp)
    0000048d: 	movzbl	0x2d7(%rsp), %edx
    00000495: 	movb	%dl, -0x1b(%rax)
    00000498: 	movaps	%xmm0, 0x2c0(%rsp)
    000004a0: 	movzbl	0x2c8(%rsp), %edx
    000004a8: 	movb	%dl, -0x18(%rax)
    000004ab: 	movaps	%xmm0, 0x2b0(%rsp)
    000004b3: 	movzbl	0x2b9(%rsp), %edx
    000004bb: 	movb	%dl, -0x15(%rax)
    000004be: 	movaps	%xmm0, 0x2a0(%rsp)
    000004c6: 	movzbl	0x2aa(%rsp), %edx
    000004ce: 	movb	%dl, -0x12(%rax)
    000004d1: 	movaps	%xmm0, 0x290(%rsp)
    000004d9: 	movzbl	0x29b(%rsp), %edx
    000004e1: 	movb	%dl, -0xf(%rax)
    000004e4: 	movaps	%xmm0, 0x280(%rsp)
    000004ec: 	movzbl	0x28c(%rsp), %edx
    000004f4: 	movb	%dl, -0xc(%rax)
    000004f7: 	movaps	%xmm0, 0x270(%rsp)
    000004ff: 	movzbl	0x27d(%rsp), %edx
    00000507: 	movb	%dl, -0x9(%rax)
    0000050a: 	movaps	%xmm0, 0x260(%rsp)
    00000512: 	movzbl	0x26e(%rsp), %edx
    0000051a: 	movb	%dl, -0x6(%rax)
    0000051d: 	movaps	%xmm0, 0x250(%rsp)
    00000525: 	movzbl	0x25f(%rsp), %edx
    0000052d: 	movb	%dl, -0x3(%rax)
    00000530: 	cmpq	%rax, %r13
    00000533: 	jne	.Ltmp813 # Offset: 1331
    00000539: 	cmpl	%r12d, 0xc(%rsp)
    0000053e: 	je	.Ltmp814 # Offset: 1342
    00000544: 	cvttsd2si	init_value(%rip), %eax
    0000054c: 	movq	0x48(%rsp), %rcx
    00000551: 	movb	%al, (%rcx)
    00000553: 	cmpl	0x10(%rsp), %r14d
    00000558: 	jle	.Ltmp814 # Offset: 1368
    0000055e: 	cvttsd2si	init_value(%rip), %eax
    00000566: 	movq	0x58(%rsp), %rcx
    0000056b: 	movb	%al, (%rcx)
    0000056d: 	cmpl	0x14(%rsp), %r14d
    00000572: 	jle	.Ltmp814 # Offset: 1394
    00000578: 	cvttsd2si	init_value(%rip), %eax
    00000580: 	movq	0x70(%rsp), %rcx
    00000585: 	movb	%al, (%rcx)
    00000587: 	cmpl	0x18(%rsp), %r14d
    0000058c: 	jle	.Ltmp814 # Offset: 1420
    00000592: 	cvttsd2si	init_value(%rip), %eax
    0000059a: 	movq	0x80(%rsp), %rcx
    000005a2: 	movb	%al, (%rcx)
    000005a4: 	cmpl	0x1c(%rsp), %r14d
    000005a9: 	jle	.Ltmp814 # Offset: 1449
    000005af: 	cvttsd2si	init_value(%rip), %eax
    000005b7: 	movq	0x98(%rsp), %rsi
    000005bf: 	movb	%al, (%rsi)
    000005c1: 	cmpl	0x28(%rsp), %r14d
    000005c6: 	jle	.Ltmp814 # Offset: 1478
    000005cc: 	cvttsd2si	init_value(%rip), %eax
    000005d4: 	movq	0xa8(%rsp), %rsi
    000005dc: 	movb	%al, (%rsi)
    000005de: 	cmpl	0x2c(%rsp), %r14d
    000005e3: 	jle	.Ltmp814 # Offset: 1507
    000005e9: 	cvttsd2si	init_value(%rip), %eax
    000005f1: 	movq	0xc0(%rsp), %rsi
    000005f9: 	movb	%al, (%rsi)
    000005fb: 	cmpl	0x60(%rsp), %r14d
    00000600: 	jle	.Ltmp814 # Offset: 1536
    00000606: 	cvttsd2si	init_value(%rip), %eax
    0000060e: 	movq	0xd0(%rsp), %rsi
    00000616: 	movb	%al, (%rsi)
    00000618: 	cmpl	0x64(%rsp), %r14d
    0000061d: 	jle	.Ltmp814 # Offset: 1565
    00000623: 	cvttsd2si	init_value(%rip), %eax
    0000062b: 	movq	0xe8(%rsp), %rsi
    00000633: 	movb	%al, (%rsi)
    00000635: 	cmpl	0x88(%rsp), %r14d
    0000063d: 	jle	.Ltmp814 # Offset: 1597
    00000643: 	cvttsd2si	init_value(%rip), %eax
    0000064b: 	movq	0xf8(%rsp), %rcx
    00000653: 	movb	%al, (%rcx)
    00000655: 	cmpl	0x8c(%rsp), %r14d
    0000065d: 	jle	.Ltmp814 # Offset: 1629
    00000663: 	cvttsd2si	init_value(%rip), %eax
    0000066b: 	movq	0x110(%rsp), %rcx
    00000673: 	movb	%al, (%rcx)
    00000675: 	cmpl	0xb0(%rsp), %r14d
    0000067d: 	jle	.Ltmp814 # Offset: 1661
    0000067f: 	cvttsd2si	init_value(%rip), %eax
    00000687: 	movq	0x120(%rsp), %rsi
    0000068f: 	movb	%al, (%rsi)
    00000691: 	cmpl	0xb4(%rsp), %r14d
    00000699: 	jle	.Ltmp814 # Offset: 1689
    0000069b: 	cvttsd2si	init_value(%rip), %eax
    000006a3: 	movq	0x130(%rsp), %rsi
    000006ab: 	movb	%al, (%rsi)
    000006ad: 	cmpl	0xd8(%rsp), %r14d
    000006b5: 	jle	.Ltmp814 # Offset: 1717
    000006b7: 	cvttsd2si	init_value(%rip), %eax
    000006bf: 	movq	0x140(%rsp), %rsi
    000006c7: 	movb	%al, (%rsi)
    000006c9: 	cmpl	0xdc(%rsp), %r14d
    000006d1: 	jle	.Ltmp814 # Offset: 1745
    000006d3: 	cvttsd2si	init_value(%rip), %eax
    000006db: 	movq	0x150(%rsp), %rcx
    000006e3: 	movb	%al, (%rcx)
    000006e5: 	nopl	(%rax) # Size: 3
.Ltmp814:
    000006e8: 	cmpb	$0x0, 0x22(%rsp)
    000006ed: 	je	.Ltmp815 # Offset: 1773
    000006f3: 	movsd	init_value(%rip), %xmm1
    000006fb: 	movq	0x30(%rsp), %rax
    00000700: 	unpcklpd	%xmm1, %xmm1
    00000704: 	cvttpd2dq	%xmm1, %xmm1
    00000708: 	punpcklqdq	%xmm1, %xmm1
    0000070c: 	movdqa	%xmm1, %xmm2
    00000710: 	punpckhwd	%xmm1, %xmm2
    00000714: 	nopl	(%rax) # Size: 4
.Ltmp816:
    00000718: 	movdqa	%xmm1, %xmm0
    0000071c: 	addq	$0x30, %rax
    00000720: 	punpcklwd	%xmm1, %xmm0
    00000724: 	movdqa	%xmm0, %xmm4
    00000728: 	punpcklwd	%xmm2, %xmm0
    0000072c: 	punpckhwd	%xmm2, %xmm4
    00000730: 	punpcklwd	%xmm4, %xmm0
    00000734: 	pand	%xmm3, %xmm0
    00000738: 	packuswb	%xmm0, %xmm0
    0000073c: 	movd	%xmm0, %edx
    00000740: 	movb	%dl, -0x30(%rax)
    00000743: 	movaps	%xmm0, 0x240(%rsp)
    0000074b: 	movzbl	0x241(%rsp), %edx
    00000753: 	movb	%dl, -0x2d(%rax)
    00000756: 	movaps	%xmm0, 0x230(%rsp)
    0000075e: 	movzbl	0x232(%rsp), %edx
    00000766: 	movb	%dl, -0x2a(%rax)
    00000769: 	movaps	%xmm0, 0x220(%rsp)
    00000771: 	movzbl	0x223(%rsp), %edx
    00000779: 	movb	%dl, -0x27(%rax)
    0000077c: 	movaps	%xmm0, 0x210(%rsp)
    00000784: 	movzbl	0x214(%rsp), %edx
    0000078c: 	movb	%dl, -0x24(%rax)
    0000078f: 	movaps	%xmm0, 0x200(%rsp)
    00000797: 	movzbl	0x205(%rsp), %edx
    0000079f: 	movb	%dl, -0x21(%rax)
    000007a2: 	movaps	%xmm0, 0x1f0(%rsp)
    000007aa: 	movzbl	0x1f6(%rsp), %edx
    000007b2: 	movb	%dl, -0x1e(%rax)
    000007b5: 	movaps	%xmm0, 0x1e0(%rsp)
    000007bd: 	movzbl	0x1e7(%rsp), %edx
    000007c5: 	movb	%dl, -0x1b(%rax)
    000007c8: 	movaps	%xmm0, 0x1d0(%rsp)
    000007d0: 	movzbl	0x1d8(%rsp), %edx
    000007d8: 	movb	%dl, -0x18(%rax)
    000007db: 	movaps	%xmm0, 0x1c0(%rsp)
    000007e3: 	movzbl	0x1c9(%rsp), %edx
    000007eb: 	movb	%dl, -0x15(%rax)
    000007ee: 	movaps	%xmm0, 0x1b0(%rsp)
    000007f6: 	movzbl	0x1ba(%rsp), %edx
    000007fe: 	movb	%dl, -0x12(%rax)
    00000801: 	movaps	%xmm0, 0x1a0(%rsp)
    00000809: 	movzbl	0x1ab(%rsp), %edx
    00000811: 	movb	%dl, -0xf(%rax)
    00000814: 	movaps	%xmm0, 0x190(%rsp)
    0000081c: 	movzbl	0x19c(%rsp), %edx
    00000824: 	movb	%dl, -0xc(%rax)
    00000827: 	movaps	%xmm0, 0x180(%rsp)
    0000082f: 	movzbl	0x18d(%rsp), %edx
    00000837: 	movb	%dl, -0x9(%rax)
    0000083a: 	movaps	%xmm0, 0x170(%rsp)
    00000842: 	movzbl	0x17e(%rsp), %edx
    0000084a: 	movb	%dl, -0x6(%rax)
    0000084d: 	movaps	%xmm0, 0x160(%rsp)
    00000855: 	movzbl	0x16f(%rsp), %edx
    0000085d: 	movb	%dl, -0x3(%rax)
    00000860: 	cmpq	%rax, %rbx
    00000863: 	jne	.Ltmp816 # Offset: 2147
    00000869: 	cmpl	%r12d, 0xc(%rsp)
    0000086e: 	je	.Ltmp811 # Offset: 2158
    00000874: 	cvttsd2si	init_value(%rip), %eax
    0000087c: 	movq	0x40(%rsp), %rcx
    00000881: 	movb	%al, (%rcx)
    00000883: 	cmpl	0x10(%rsp), %r14d
    00000888: 	jle	.Ltmp811 # Offset: 2184
    0000088e: 	cvttsd2si	init_value(%rip), %eax
    00000896: 	movq	0x50(%rsp), %rsi
    0000089b: 	movb	%al, (%rsi)
    0000089d: 	cmpl	0x14(%rsp), %r14d
    000008a2: 	jle	.Ltmp811 # Offset: 2210
    000008a8: 	cvttsd2si	init_value(%rip), %eax
    000008b0: 	movq	0x68(%rsp), %rsi
    000008b5: 	movb	%al, (%rsi)
    000008b7: 	cmpl	0x18(%rsp), %r14d
    000008bc: 	jle	.Ltmp811 # Offset: 2236
    000008c2: 	cvttsd2si	init_value(%rip), %eax
    000008ca: 	movq	0x78(%rsp), %rsi
    000008cf: 	movb	%al, (%rsi)
    000008d1: 	cmpl	0x1c(%rsp), %r14d
    000008d6: 	jle	.Ltmp811 # Offset: 2262
    000008dc: 	cvttsd2si	init_value(%rip), %eax
    000008e4: 	movq	0x90(%rsp), %rsi
    000008ec: 	movb	%al, (%rsi)
    000008ee: 	cmpl	0x28(%rsp), %r14d
    000008f3: 	jle	.Ltmp811 # Offset: 2291
    000008f9: 	cvttsd2si	init_value(%rip), %eax
    00000901: 	movq	0xa0(%rsp), %rcx
    00000909: 	movb	%al, (%rcx)
    0000090b: 	cmpl	0x2c(%rsp), %r14d
    00000910: 	jle	.Ltmp811 # Offset: 2320
    00000916: 	cvttsd2si	init_value(%rip), %eax
    0000091e: 	movq	0xb8(%rsp), %rcx
    00000926: 	movb	%al, (%rcx)
    00000928: 	cmpl	0x60(%rsp), %r14d
    0000092d: 	jle	.Ltmp811 # Offset: 2349
    00000933: 	cvttsd2si	init_value(%rip), %eax
    0000093b: 	movq	0xc8(%rsp), %rcx
    00000943: 	movb	%al, (%rcx)
    00000945: 	cmpl	0x64(%rsp), %r14d
    0000094a: 	jle	.Ltmp811 # Offset: 2378
    00000950: 	cvttsd2si	init_value(%rip), %eax
    00000958: 	movq	0xe0(%rsp), %rsi
    00000960: 	movb	%al, (%rsi)
    00000962: 	cmpl	0x88(%rsp), %r14d
    0000096a: 	jle	.Ltmp811 # Offset: 2410
    00000970: 	cvttsd2si	init_value(%rip), %eax
    00000978: 	movq	0xf0(%rsp), %rsi
    00000980: 	movb	%al, (%rsi)
    00000982: 	cmpl	0x8c(%rsp), %r14d
    0000098a: 	jle	.Ltmp811 # Offset: 2442
    00000990: 	cvttsd2si	init_value(%rip), %eax
    00000998: 	movq	0x108(%rsp), %rcx
    000009a0: 	movb	%al, (%rcx)
    000009a2: 	cmpl	0xb0(%rsp), %r14d
    000009aa: 	jle	.Ltmp811 # Offset: 2474
    000009ac: 	cvttsd2si	init_value(%rip), %eax
    000009b4: 	movq	0x118(%rsp), %rcx
    000009bc: 	movb	%al, (%rcx)
    000009be: 	cmpl	0xb4(%rsp), %r14d
    000009c6: 	jle	.Ltmp811 # Offset: 2502
    000009c8: 	cvttsd2si	init_value(%rip), %eax
    000009d0: 	movq	0x128(%rsp), %rcx
    000009d8: 	movb	%al, (%rcx)
    000009da: 	cmpl	0xd8(%rsp), %r14d
    000009e2: 	jle	.Ltmp811 # Offset: 2530
    000009e4: 	cvttsd2si	init_value(%rip), %eax
    000009ec: 	movq	0x138(%rsp), %rsi
    000009f4: 	movb	%al, (%rsi)
    000009f6: 	cmpl	0xdc(%rsp), %r14d
    000009fe: 	jle	.Ltmp811 # Offset: 2558
    00000a00: 	cvttsd2si	init_value(%rip), %eax
    00000a08: 	movq	0x148(%rsp), %rsi
    00000a10: 	movb	%al, (%rsi)
    00000a12: 	nopw	(%rax,%rax) # Size: 6
.Ltmp811:
    00000a18: 	addl	$0x1, %ebp
    00000a1b: 	cmpl	%ebp, iterations(%rip)
    00000a21: 	jg	.Ltmp817 # Offset: 2593
    00000a27: 	movq	%rdi, %rbp
.Ltmp809:
    00000a2a: 	callq	clock@PLT # Offset: 2602
    00000a2f: 	movq	0x100(%rsp), %rdi
    00000a37: 	pxor	%xmm0, %xmm0
    00000a3b: 	movq	%rax, end_time(%rip)
    00000a42: 	subq	start_time(%rip), %rax
    00000a49: 	cvtsi2sd	%rax, %xmm0
    00000a4e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000a56: 	callq	_Z13record_resultdPKc # Offset: 2646
    00000a5b: 	testl	%r15d, %r15d
    00000a5e: 	jle	.Ltmp818 # Offset: 2654
    00000a64: 	leal	-0x1(%r15), %eax
    00000a68: 	cmpl	$0xe, %eax
    00000a6b: 	jbe	.Ltmp819 # Offset: 2667
    00000a71: 	movl	%r15d, %edx
    00000a74: 	movq	%rbp, %rax
    00000a77: 	pxor	%xmm0, %xmm0
    00000a7b: 	shrl	$0x4, %edx
    00000a7e: 	subl	$0x1, %edx
    00000a81: 	shlq	$0x4, %rdx
    00000a85: 	leaq	0x10(%rbp,%rdx), %rdx
    00000a8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp820:
    00000a90: 	movdqu	(%rax), %xmm5
    00000a94: 	addq	$0x10, %rax
    00000a98: 	paddb	%xmm5, %xmm0
    00000a9c: 	cmpq	%rax, %rdx
    00000a9f: 	jne	.Ltmp820 # Offset: 2719
    00000aa1: 	movdqa	%xmm0, %xmm1
    00000aa5: 	movl	%r15d, %edx
    00000aa8: 	psrldq	$0x8, %xmm1
    00000aad: 	andl	$-0x10, %edx
    00000ab0: 	paddb	%xmm1, %xmm0
    00000ab4: 	pxor	%xmm1, %xmm1
    00000ab8: 	movl	%edx, %eax
    00000aba: 	psadbw	%xmm1, %xmm0
    00000abe: 	movd	%xmm0, %ebx
    00000ac2: 	cmpl	%r15d, %edx
    00000ac5: 	je	.Ltmp821 # Offset: 2757
.Ltmp829:
    00000acb: 	movl	%r15d, %ecx
    00000ace: 	subl	%edx, %ecx
    00000ad0: 	leal	-0x1(%rcx), %esi
    00000ad3: 	cmpl	$0x6, %esi
    00000ad6: 	jbe	.Ltmp822 # Offset: 2774
    00000ad8: 	movq	(%rbp,%rdx), %xmm1
    00000ade: 	pxor	%xmm0, %xmm0
    00000ae2: 	movdqa	%xmm1, %xmm6
    00000ae6: 	psadbw	%xmm0, %xmm6
    00000aea: 	movq	%xmm6, 0x158(%rsp)
    00000af3: 	movq	%xmm6, %rdx
    00000af8: 	movl	%edx, %esi
    00000afa: 	movl	%ecx, %edx
    00000afc: 	andl	$-0x8, %edx
    00000aff: 	addl	%esi, %ebx
    00000b01: 	addl	%edx, %eax
    00000b03: 	cmpl	%edx, %ecx
    00000b05: 	je	.Ltmp821 # Offset: 2821
.Ltmp822:
    00000b07: 	movslq	%eax, %rdx
    00000b0a: 	addb	(%rbp,%rdx), %bl
    00000b0e: 	leal	0x1(%rax), %edx
    00000b11: 	cmpl	%edx, %r15d
    00000b14: 	jle	.Ltmp821 # Offset: 2836
    00000b16: 	movslq	%edx, %rdx
    00000b19: 	addb	(%rbp,%rdx), %bl
    00000b1d: 	leal	0x2(%rax), %edx
    00000b20: 	cmpl	%edx, %r15d
    00000b23: 	jle	.Ltmp821 # Offset: 2851
    00000b25: 	movslq	%edx, %rdx
    00000b28: 	addb	(%rbp,%rdx), %bl
    00000b2c: 	leal	0x3(%rax), %edx
    00000b2f: 	cmpl	%r15d, %edx
    00000b32: 	jge	.Ltmp821 # Offset: 2866
    00000b34: 	movslq	%edx, %rdx
    00000b37: 	addb	(%rbp,%rdx), %bl
    00000b3b: 	leal	0x4(%rax), %edx
    00000b3e: 	cmpl	%edx, %r15d
    00000b41: 	jle	.Ltmp821 # Offset: 2881
    00000b43: 	movslq	%edx, %rdx
    00000b46: 	addb	(%rbp,%rdx), %bl
    00000b4a: 	leal	0x5(%rax), %edx
    00000b4d: 	cmpl	%edx, %r15d
    00000b50: 	jle	.Ltmp821 # Offset: 2896
    00000b52: 	movslq	%edx, %rdx
    00000b55: 	addl	$0x6, %eax
    00000b58: 	addb	(%rbp,%rdx), %bl
    00000b5c: 	cmpl	%eax, %r15d
    00000b5f: 	jle	.Ltmp821 # Offset: 2911
    00000b61: 	cltq
    00000b63: 	addb	(%rbp,%rax), %bl
.Ltmp821:
    00000b67: 	movsd	init_value(%rip), %xmm0
    00000b6f: 	movl	$0xffffffaa, %eax
    00000b74: 	addsd	%xmm0, %xmm0
    00000b78: 	cvttsd2si	%xmm0, %edx
    00000b7c: 	imull	%edx, %eax
    00000b7f: 	movl	%eax, %ebp
    00000b81: 	cmpb	%bl, %al
    00000b83: 	jne	.Ltmp823 # Offset: 2947
    00000b85: 	movq	0x348(%rsp), %rax
    00000b8d: 	subq	%fs:0x28, %rax
    00000b96: 	jne	.Ltmp824 # Offset: 2966
    00000b9c: 	addq	$0x358, %rsp
    00000ba3: 	popq	%rbx
    00000ba4: 	popq	%rbp
    00000ba5: 	popq	%r12
    00000ba7: 	popq	%r13
    00000ba9: 	popq	%r14
    00000bab: 	popq	%r15
    00000bad: 	retq # Offset: 2989
    00000bae: 	nop # Size: 2
.Ltmp815:
    00000bb0: 	xorl	%eax, %eax
    00000bb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp825:
    00000bb8: 	cvttsd2si	init_value(%rip), %edx
    00000bc0: 	movb	%dl, 0x2(%rdi,%rax)
    00000bc4: 	addq	$0x3, %rax
    00000bc8: 	cmpl	%eax, %r14d
    00000bcb: 	jg	.Ltmp825 # Offset: 3019
    00000bcd: 	jmp	.Ltmp811 # Offset: 3021
    00000bd2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp812:
    00000bd8: 	xorl	%eax, %eax
    00000bda: 	nopw	(%rax,%rax) # Size: 6
.Ltmp826:
    00000be0: 	cvttsd2si	init_value(%rip), %edx
    00000be8: 	movb	%dl, 0x1(%rdi,%rax)
    00000bec: 	addq	$0x3, %rax
    00000bf0: 	cmpl	%eax, %r14d
    00000bf3: 	jg	.Ltmp826 # Offset: 3059
    00000bf5: 	jmp	.Ltmp814 # Offset: 3061
.Ltmp823:
    00000bfa: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c01: 	movl	$0x5, %edx
    00000c06: 	leaq	DATAat0x35004(%rip), %rsi
    00000c0d: 	movq	%r12, %rdi
    00000c10: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3088
    00000c15: 	cmpq	$0x0, 0x100(%rsp)
    00000c1e: 	je	.Ltmp827 # Offset: 3102
    00000c24: 	movq	0x100(%rsp), %r15
    00000c2c: 	movq	%r15, %rdi
    00000c2f: 	callq	strlen@PLT # Offset: 3119
    00000c34: 	movq	%r15, %rsi
    00000c37: 	movq	%r12, %rdi
    00000c3a: 	movq	%rax, %rdx
    00000c3d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3133
.Ltmp828:
    00000c42: 	movq	%r12, %rdi
    00000c45: 	movl	$0xd, %edx
    00000c4a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000c51: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3153
    00000c56: 	leaq	0x347(%rsp), %r13
    00000c5e: 	movq	%r12, %rdi
    00000c61: 	movl	$0x1, %edx
    00000c66: 	movq	%r13, %rsi
    00000c69: 	movb	%bl, 0x347(%rsp)
    00000c70: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3184
    00000c75: 	movl	$0xb, %edx
    00000c7a: 	leaq	DATAat0x35018(%rip), %rsi
    00000c81: 	movq	%rax, %r12
    00000c84: 	movq	%rax, %rdi
    00000c87: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3207
    00000c8c: 	movq	%r12, %rdi
    00000c8f: 	movl	$0x1, %edx
    00000c94: 	movq	%r13, %rsi
    00000c97: 	movb	%bpl, 0x347(%rsp)
    00000c9f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3231
    00000ca4: 	movq	%rax, %rdi
    00000ca7: 	movq	0x348(%rsp), %rax
    00000caf: 	subq	%fs:0x28, %rax
    00000cb8: 	jne	.Ltmp824 # Offset: 3256
    00000cba: 	addq	$0x358, %rsp
    00000cc1: 	popq	%rbx
    00000cc2: 	popq	%rbp
    00000cc3: 	popq	%r12
    00000cc5: 	popq	%r13
    00000cc7: 	popq	%r14
    00000cc9: 	popq	%r15
    00000ccb: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3275
.Ltmp827:
    00000cd0: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000cd7: 	movq	-0x18(%rax), %rdi
    00000cdb: 	addq	%r12, %rdi
    00000cde: 	movl	0x20(%rdi), %esi
    00000ce1: 	orl	$0x1, %esi
    00000ce4: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3300
    00000ce9: 	jmp	.Ltmp828 # Offset: 3305
.Ltmp818:
    00000cee: 	xorl	%ebx, %ebx
    00000cf0: 	jmp	.Ltmp821 # Offset: 3312
.Ltmp819:
    00000cf5: 	xorl	%edx, %edx
    00000cf7: 	xorl	%ebx, %ebx
    00000cf9: 	xorl	%eax, %eax
    00000cfb: 	jmp	.Ltmp829 # Offset: 3323
.Ltmp824:
    00000d00: 	callq	__stack_chk_fail@PLT # Offset: 3328
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite3IhEvPT_iPKc"

Binary Function "_Z24test_loop_overwrite4_optIhEvPT_iPKc" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x16dd0
  Size        : 0xb7d
  MaxSize     : 0xb80
  Offset      : 0x16dd0
  Section     : .text
  Orc Section : .local.text._Z24test_loop_overwrite4_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x218, %rsp
    0000001a: 	movq	%rdx, 0x110(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x208(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp830 # Offset: 73
    0000004f: 	leal	-0x3(%rbp), %edx
    00000052: 	testl	%edx, %edx
    00000054: 	jle	.Ltmp830 # Offset: 84
    0000005a: 	leal	-0x4(%rbp), %ecx
    0000005d: 	movl	%ecx, %esi
    0000005f: 	shrl	$0x2, %esi
    00000062: 	leal	0x1(%rsi), %eax
    00000065: 	leaq	(%rbx,%rax,4), %r8
    00000069: 	movq	%rax, %rdi
    0000006c: 	leaq	init_value(%rip), %rax
    00000073: 	cmpq	%rax, %r8
    00000076: 	leaq	iterations(%rip), %r8
    0000007d: 	setbe	%al
    00000080: 	cmpq	%r8, %rbx
    00000083: 	setae	%r8b
    00000087: 	orb	%r8b, %al
    0000008a: 	je	.Ltmp831 # Offset: 138
    00000090: 	cmpl	$0x3b, %ecx
    00000093: 	jbe	.Ltmp831 # Offset: 147
    00000099: 	movl	%edi, %eax
    0000009b: 	movl	%edi, %r8d
    0000009e: 	pxor	%xmm6, %xmm6
    000000a2: 	shrl	$0x4, %eax
    000000a5: 	andl	$-0x10, %r8d
    000000a9: 	subl	$0x1, %eax
    000000ac: 	shlq	$0x6, %rax
    000000b0: 	leaq	0x40(%rbx,%rax), %rax
    000000b5: 	movq	%rax, (%rsp)
    000000b9: 	leal	(,%r8,4), %eax
    000000c1: 	movslq	%eax, %rsi
    000000c4: 	leal	0x4(%rax), %r9d
    000000c8: 	leaq	(%rbx,%rsi), %r13
    000000cc: 	leaq	0x1(%rbx,%rsi), %r12
    000000d1: 	leaq	0x2(%rbx,%rsi), %r11
    000000d6: 	leaq	0x3(%rbx,%rsi), %r10
    000000db: 	movslq	%r9d, %rsi
    000000de: 	leaq	0x2(%rbx,%rsi), %rcx
    000000e3: 	leaq	(%rbx,%rsi), %r15
    000000e7: 	movq	%rcx, 0x8(%rsp)
    000000ec: 	leaq	0x1(%rbx,%rsi), %r14
    000000f1: 	leaq	0x3(%rbx,%rsi), %rcx
    000000f6: 	leal	0x8(%rax), %esi
    000000f9: 	movq	%rcx, 0x1e8(%rsp)
    00000101: 	movl	%esi, 0x30(%rsp)
    00000105: 	movslq	%esi, %rsi
    00000108: 	leaq	(%rbx,%rsi), %rcx
    0000010c: 	movq	%rcx, 0x10(%rsp)
    00000111: 	leaq	0x1(%rbx,%rsi), %rcx
    00000116: 	movq	%rcx, 0x18(%rsp)
    0000011b: 	leaq	0x2(%rbx,%rsi), %rcx
    00000120: 	leaq	0x3(%rbx,%rsi), %rsi
    00000125: 	movq	%rsi, 0x28(%rsp)
    0000012a: 	leal	0xc(%rax), %esi
    0000012d: 	movl	%esi, 0x34(%rsp)
    00000131: 	movslq	%esi, %rsi
    00000134: 	movq	%rcx, 0x20(%rsp)
    00000139: 	leaq	(%rbx,%rsi), %rcx
    0000013d: 	movq	%rcx, 0x38(%rsp)
    00000142: 	leaq	0x1(%rbx,%rsi), %rcx
    00000147: 	movq	%rcx, 0x40(%rsp)
    0000014c: 	leaq	0x2(%rbx,%rsi), %rcx
    00000151: 	leaq	0x3(%rbx,%rsi), %rsi
    00000156: 	movq	%rsi, 0x50(%rsp)
    0000015b: 	leal	0x10(%rax), %esi
    0000015e: 	movl	%esi, 0x78(%rsp)
    00000162: 	movslq	%esi, %rsi
    00000165: 	movq	%rcx, 0x48(%rsp)
    0000016a: 	leaq	(%rbx,%rsi), %rcx
    0000016e: 	movq	%rcx, 0x58(%rsp)
    00000173: 	leaq	0x1(%rbx,%rsi), %rcx
    00000178: 	movq	%rcx, 0x60(%rsp)
    0000017d: 	leaq	0x2(%rbx,%rsi), %rcx
    00000182: 	leaq	0x3(%rbx,%rsi), %rsi
    00000187: 	movq	%rsi, 0x70(%rsp)
    0000018c: 	leal	0x14(%rax), %esi
    0000018f: 	movl	%esi, 0x7c(%rsp)
    00000193: 	movslq	%esi, %rsi
    00000196: 	movq	%rcx, 0x68(%rsp)
    0000019b: 	leaq	(%rbx,%rsi), %rcx
    0000019f: 	movq	%rcx, 0x80(%rsp)
    000001a7: 	leaq	0x1(%rbx,%rsi), %rcx
    000001ac: 	movq	%rcx, 0x88(%rsp)
    000001b4: 	leaq	0x2(%rbx,%rsi), %rcx
    000001b9: 	leaq	0x3(%rbx,%rsi), %rsi
    000001be: 	movq	%rsi, 0x98(%rsp)
    000001c6: 	leal	0x18(%rax), %esi
    000001c9: 	movl	%esi, 0xc0(%rsp)
    000001d0: 	movslq	%esi, %rsi
    000001d3: 	movq	%rcx, 0x90(%rsp)
    000001db: 	leaq	(%rbx,%rsi), %rcx
    000001df: 	movq	%rcx, 0xa0(%rsp)
    000001e7: 	leaq	0x1(%rbx,%rsi), %rcx
    000001ec: 	movq	%rcx, 0xa8(%rsp)
    000001f4: 	leaq	0x2(%rbx,%rsi), %rcx
    000001f9: 	leaq	0x3(%rbx,%rsi), %rsi
    000001fe: 	movq	%rsi, 0xb8(%rsp)
    00000206: 	leal	0x1c(%rax), %esi
    00000209: 	movl	%esi, 0xc4(%rsp)
    00000210: 	movslq	%esi, %rsi
    00000213: 	movq	%rcx, 0xb0(%rsp)
    0000021b: 	leaq	(%rbx,%rsi), %rcx
    0000021f: 	movq	%rcx, 0xc8(%rsp)
    00000227: 	leaq	0x1(%rbx,%rsi), %rcx
    0000022c: 	movq	%rcx, 0xd0(%rsp)
    00000234: 	leaq	0x2(%rbx,%rsi), %rcx
    00000239: 	leaq	0x3(%rbx,%rsi), %rsi
    0000023e: 	movq	%rcx, 0xd8(%rsp)
    00000246: 	movq	%rsi, 0xe0(%rsp)
    0000024e: 	leal	0x20(%rax), %esi
    00000251: 	movl	%esi, 0x108(%rsp)
    00000258: 	movslq	%esi, %rsi
    0000025b: 	leaq	(%rbx,%rsi), %rcx
    0000025f: 	movq	%rcx, 0xe8(%rsp)
    00000267: 	leaq	0x1(%rbx,%rsi), %rcx
    0000026c: 	movq	%rcx, 0xf0(%rsp)
    00000274: 	leaq	0x2(%rbx,%rsi), %rcx
    00000279: 	leaq	0x3(%rbx,%rsi), %rsi
    0000027e: 	movq	%rsi, 0x100(%rsp)
    00000286: 	leal	0x24(%rax), %esi
    00000289: 	movl	%esi, 0x10c(%rsp)
    00000290: 	movslq	%esi, %rsi
    00000293: 	movq	%rcx, 0xf8(%rsp)
    0000029b: 	leaq	(%rbx,%rsi), %rcx
    0000029f: 	movq	%rcx, 0x118(%rsp)
    000002a7: 	leaq	0x1(%rbx,%rsi), %rcx
    000002ac: 	movq	%rcx, 0x120(%rsp)
    000002b4: 	leaq	0x2(%rbx,%rsi), %rcx
    000002b9: 	leaq	0x3(%rbx,%rsi), %rsi
    000002be: 	movq	%rsi, 0x130(%rsp)
    000002c6: 	leal	0x28(%rax), %esi
    000002c9: 	movl	%esi, 0x158(%rsp)
    000002d0: 	movslq	%esi, %rsi
    000002d3: 	movq	%rcx, 0x128(%rsp)
    000002db: 	leaq	(%rbx,%rsi), %rcx
    000002df: 	movq	%rcx, 0x138(%rsp)
    000002e7: 	leaq	0x1(%rbx,%rsi), %rcx
    000002ec: 	movq	%rcx, 0x140(%rsp)
    000002f4: 	leaq	0x2(%rbx,%rsi), %rcx
    000002f9: 	leaq	0x3(%rbx,%rsi), %rsi
    000002fe: 	movq	%rsi, 0x150(%rsp)
    00000306: 	leal	0x2c(%rax), %esi
    00000309: 	movl	%esi, 0x15c(%rsp)
    00000310: 	movslq	%esi, %rsi
    00000313: 	movq	%rcx, 0x148(%rsp)
    0000031b: 	leaq	(%rbx,%rsi), %rcx
    0000031f: 	movq	%rcx, 0x160(%rsp)
    00000327: 	leaq	0x1(%rbx,%rsi), %rcx
    0000032c: 	movq	%rcx, 0x168(%rsp)
    00000334: 	leaq	0x2(%rbx,%rsi), %rcx
    00000339: 	leaq	0x3(%rbx,%rsi), %rsi
    0000033e: 	movq	%rsi, 0x178(%rsp)
    00000346: 	leal	0x30(%rax), %esi
    00000349: 	movl	%esi, 0x1a0(%rsp)
    00000350: 	movslq	%esi, %rsi
    00000353: 	movq	%rcx, 0x170(%rsp)
    0000035b: 	leaq	(%rbx,%rsi), %rcx
    0000035f: 	movq	%rcx, 0x180(%rsp)
    00000367: 	leaq	0x1(%rbx,%rsi), %rcx
    0000036c: 	movq	%rcx, 0x188(%rsp)
    00000374: 	leaq	0x2(%rbx,%rsi), %rcx
    00000379: 	leaq	0x3(%rbx,%rsi), %rsi
    0000037e: 	movq	%rsi, 0x198(%rsp)
    00000386: 	leal	0x34(%rax), %esi
    00000389: 	addl	$0x38, %eax
    0000038c: 	movl	%esi, 0x1a4(%rsp)
    00000393: 	movslq	%esi, %rsi
    00000396: 	movq	%rcx, 0x190(%rsp)
    0000039e: 	leaq	(%rbx,%rsi), %rcx
    000003a2: 	movq	%rcx, 0x1a8(%rsp)
    000003aa: 	leaq	0x1(%rbx,%rsi), %rcx
    000003af: 	movq	%rcx, 0x1b0(%rsp)
    000003b7: 	leaq	0x2(%rbx,%rsi), %rcx
    000003bc: 	leaq	0x3(%rbx,%rsi), %rsi
    000003c1: 	movl	%eax, 0x1f0(%rsp)
    000003c8: 	cltq
    000003ca: 	movq	%rsi, 0x1c0(%rsp)
    000003d2: 	leaq	(%rbx,%rax), %rsi
    000003d6: 	movq	%rsi, 0x1c8(%rsp)
    000003de: 	leaq	0x1(%rbx,%rax), %rsi
    000003e3: 	movq	%rcx, 0x1b8(%rsp)
    000003eb: 	movq	%rsi, 0x1d0(%rsp)
    000003f3: 	leaq	0x2(%rbx,%rax), %rsi
    000003f8: 	leaq	0x3(%rbx,%rax), %rax
    000003fd: 	movdqa	DATAat0x36f20(%rip), %xmm9
    00000406: 	movq	%rax, 0x1e0(%rsp)
    0000040e: 	movdqa	DATAat0x36f30(%rip), %xmm7
    00000416: 	movl	%ebp, 0x1f4(%rsp)
    0000041d: 	movq	0x1e8(%rsp), %rbp
    00000425: 	movq	%rsi, 0x1d8(%rsp)
    0000042d: 	xorl	%esi, %esi
    0000042f: 	nop # Size: 1
.Ltmp834:
    00000430: 	movsd	init_value(%rip), %xmm3
    00000438: 	movq	(%rsp), %rcx
    0000043c: 	movq	%rbx, %rax
    0000043f: 	unpcklpd	%xmm3, %xmm3
    00000443: 	cvttpd2dq	%xmm3, %xmm3
    00000447: 	punpcklqdq	%xmm3, %xmm3
    0000044b: 	movdqa	%xmm3, %xmm5
    0000044f: 	punpckhwd	%xmm3, %xmm5
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp832:
    00000458: 	movdqa	%xmm3, %xmm0
    0000045c: 	movdqa	%xmm6, %xmm2
    00000460: 	addq	$0x40, %rax
    00000464: 	punpcklwd	%xmm3, %xmm0
    00000468: 	movdqa	%xmm0, %xmm1
    0000046c: 	punpcklwd	%xmm5, %xmm0
    00000470: 	punpckhwd	%xmm5, %xmm1
    00000474: 	punpcklwd	%xmm1, %xmm0
    00000478: 	movdqa	%xmm6, %xmm1
    0000047c: 	pand	%xmm9, %xmm0
    00000481: 	packuswb	%xmm0, %xmm0
    00000485: 	movdqa	%xmm0, %xmm4
    00000489: 	punpcklbw	%xmm0, %xmm2
    0000048d: 	punpckhbw	%xmm0, %xmm1
    00000491: 	punpcklbw	%xmm7, %xmm4
    00000495: 	movdqa	%xmm2, %xmm8
    0000049a: 	punpckhbw	%xmm7, %xmm0
    0000049e: 	punpckhbw	%xmm4, %xmm2
    000004a2: 	punpcklbw	%xmm4, %xmm8
    000004a7: 	movups	%xmm2, -0x30(%rax)
    000004ab: 	movdqa	%xmm1, %xmm2
    000004af: 	punpckhbw	%xmm0, %xmm1
    000004b3: 	punpcklbw	%xmm0, %xmm2
    000004b7: 	movups	%xmm8, -0x40(%rax)
    000004bc: 	movups	%xmm2, -0x20(%rax)
    000004c0: 	movups	%xmm1, -0x10(%rax)
    000004c4: 	cmpq	%rcx, %rax
    000004c7: 	jne	.Ltmp832 # Offset: 1223
    000004c9: 	movq	%rcx, (%rsp)
    000004cd: 	cmpl	%r8d, %edi
    000004d0: 	je	.Ltmp833 # Offset: 1232
    000004d6: 	movb	$0x0, (%r13)
    000004db: 	cvttsd2si	init_value(%rip), %eax
    000004e3: 	movb	%al, (%r12)
    000004e7: 	cvttsd2si	init_value(%rip), %eax
    000004ef: 	movb	%al, (%r11)
    000004f2: 	movb	$0x1, (%r10)
    000004f6: 	cmpl	%r9d, %edx
    000004f9: 	jle	.Ltmp833 # Offset: 1273
    000004ff: 	movb	$0x0, (%r15)
    00000503: 	cvttsd2si	init_value(%rip), %eax
    0000050b: 	movq	0x8(%rsp), %rcx
    00000510: 	movb	%al, (%r14)
    00000513: 	cvttsd2si	init_value(%rip), %eax
    0000051b: 	movb	%al, (%rcx)
    0000051d: 	movb	$0x1, (%rbp)
    00000521: 	cmpl	0x30(%rsp), %edx
    00000525: 	jle	.Ltmp833 # Offset: 1317
    0000052b: 	movq	0x10(%rsp), %rax
    00000530: 	movq	0x18(%rsp), %rcx
    00000535: 	movb	$0x0, (%rax)
    00000538: 	cvttsd2si	init_value(%rip), %eax
    00000540: 	movb	%al, (%rcx)
    00000542: 	cvttsd2si	init_value(%rip), %eax
    0000054a: 	movq	0x20(%rsp), %rcx
    0000054f: 	movb	%al, (%rcx)
    00000551: 	movq	0x28(%rsp), %rax
    00000556: 	movb	$0x1, (%rax)
    00000559: 	cmpl	0x34(%rsp), %edx
    0000055d: 	jle	.Ltmp833 # Offset: 1373
    00000563: 	movq	0x38(%rsp), %rax
    00000568: 	movq	0x40(%rsp), %rcx
    0000056d: 	movb	$0x0, (%rax)
    00000570: 	cvttsd2si	init_value(%rip), %eax
    00000578: 	movb	%al, (%rcx)
    0000057a: 	cvttsd2si	init_value(%rip), %eax
    00000582: 	movq	0x48(%rsp), %rcx
    00000587: 	movb	%al, (%rcx)
    00000589: 	movq	0x50(%rsp), %rax
    0000058e: 	movb	$0x1, (%rax)
    00000591: 	cmpl	0x78(%rsp), %edx
    00000595: 	jle	.Ltmp833 # Offset: 1429
    0000059b: 	movq	0x58(%rsp), %rax
    000005a0: 	movq	0x60(%rsp), %rcx
    000005a5: 	movb	$0x0, (%rax)
    000005a8: 	cvttsd2si	init_value(%rip), %eax
    000005b0: 	movb	%al, (%rcx)
    000005b2: 	cvttsd2si	init_value(%rip), %eax
    000005ba: 	movq	0x68(%rsp), %rcx
    000005bf: 	movb	%al, (%rcx)
    000005c1: 	movq	0x70(%rsp), %rax
    000005c6: 	movb	$0x1, (%rax)
    000005c9: 	cmpl	0x7c(%rsp), %edx
    000005cd: 	jle	.Ltmp833 # Offset: 1485
    000005d3: 	movq	0x80(%rsp), %rax
    000005db: 	movq	0x88(%rsp), %rcx
    000005e3: 	movb	$0x0, (%rax)
    000005e6: 	cvttsd2si	init_value(%rip), %eax
    000005ee: 	movb	%al, (%rcx)
    000005f0: 	cvttsd2si	init_value(%rip), %eax
    000005f8: 	movq	0x90(%rsp), %rcx
    00000600: 	movb	%al, (%rcx)
    00000602: 	movq	0x98(%rsp), %rax
    0000060a: 	movb	$0x1, (%rax)
    0000060d: 	cmpl	0xc0(%rsp), %edx
    00000614: 	jle	.Ltmp833 # Offset: 1556
    0000061a: 	movq	0xa0(%rsp), %rax
    00000622: 	movq	0xa8(%rsp), %rcx
    0000062a: 	movb	$0x0, (%rax)
    0000062d: 	cvttsd2si	init_value(%rip), %eax
    00000635: 	movb	%al, (%rcx)
    00000637: 	cvttsd2si	init_value(%rip), %eax
    0000063f: 	movq	0xb0(%rsp), %rcx
    00000647: 	movb	%al, (%rcx)
    00000649: 	movq	0xb8(%rsp), %rax
    00000651: 	movb	$0x1, (%rax)
    00000654: 	cmpl	0xc4(%rsp), %edx
    0000065b: 	jle	.Ltmp833 # Offset: 1627
    00000661: 	movq	0xc8(%rsp), %rax
    00000669: 	movq	0xd0(%rsp), %rcx
    00000671: 	movb	$0x0, (%rax)
    00000674: 	cvttsd2si	init_value(%rip), %eax
    0000067c: 	movb	%al, (%rcx)
    0000067e: 	cvttsd2si	init_value(%rip), %eax
    00000686: 	movq	0xd8(%rsp), %rcx
    0000068e: 	movb	%al, (%rcx)
    00000690: 	movq	0xe0(%rsp), %rax
    00000698: 	movb	$0x1, (%rax)
    0000069b: 	cmpl	0x108(%rsp), %edx
    000006a2: 	jle	.Ltmp833 # Offset: 1698
    000006a8: 	movq	0xe8(%rsp), %rax
    000006b0: 	movq	0xf0(%rsp), %rcx
    000006b8: 	movb	$0x0, (%rax)
    000006bb: 	cvttsd2si	init_value(%rip), %eax
    000006c3: 	movb	%al, (%rcx)
    000006c5: 	cvttsd2si	init_value(%rip), %eax
    000006cd: 	movq	0xf8(%rsp), %rcx
    000006d5: 	movb	%al, (%rcx)
    000006d7: 	movq	0x100(%rsp), %rax
    000006df: 	movb	$0x1, (%rax)
    000006e2: 	cmpl	0x10c(%rsp), %edx
    000006e9: 	jle	.Ltmp833 # Offset: 1769
    000006ef: 	movq	0x118(%rsp), %rax
    000006f7: 	movq	0x120(%rsp), %rcx
    000006ff: 	movb	$0x0, (%rax)
    00000702: 	cvttsd2si	init_value(%rip), %eax
    0000070a: 	movb	%al, (%rcx)
    0000070c: 	cvttsd2si	init_value(%rip), %eax
    00000714: 	movq	0x128(%rsp), %rcx
    0000071c: 	movb	%al, (%rcx)
    0000071e: 	movq	0x130(%rsp), %rax
    00000726: 	movb	$0x1, (%rax)
    00000729: 	cmpl	0x158(%rsp), %edx
    00000730: 	jle	.Ltmp833 # Offset: 1840
    00000736: 	movq	0x138(%rsp), %rax
    0000073e: 	movq	0x140(%rsp), %rcx
    00000746: 	movb	$0x0, (%rax)
    00000749: 	cvttsd2si	init_value(%rip), %eax
    00000751: 	movb	%al, (%rcx)
    00000753: 	cvttsd2si	init_value(%rip), %eax
    0000075b: 	movq	0x148(%rsp), %rcx
    00000763: 	movb	%al, (%rcx)
    00000765: 	movq	0x150(%rsp), %rax
    0000076d: 	movb	$0x1, (%rax)
    00000770: 	cmpl	0x15c(%rsp), %edx
    00000777: 	jle	.Ltmp833 # Offset: 1911
    0000077d: 	movq	0x160(%rsp), %rax
    00000785: 	movq	0x168(%rsp), %rcx
    0000078d: 	movb	$0x0, (%rax)
    00000790: 	cvttsd2si	init_value(%rip), %eax
    00000798: 	movb	%al, (%rcx)
    0000079a: 	cvttsd2si	init_value(%rip), %eax
    000007a2: 	movq	0x170(%rsp), %rcx
    000007aa: 	movb	%al, (%rcx)
    000007ac: 	movq	0x178(%rsp), %rax
    000007b4: 	movb	$0x1, (%rax)
    000007b7: 	cmpl	0x1a0(%rsp), %edx
    000007be: 	jle	.Ltmp833 # Offset: 1982
    000007c4: 	movq	0x180(%rsp), %rax
    000007cc: 	movq	0x188(%rsp), %rcx
    000007d4: 	movb	$0x0, (%rax)
    000007d7: 	cvttsd2si	init_value(%rip), %eax
    000007df: 	movb	%al, (%rcx)
    000007e1: 	cvttsd2si	init_value(%rip), %eax
    000007e9: 	movq	0x190(%rsp), %rcx
    000007f1: 	movb	%al, (%rcx)
    000007f3: 	movq	0x198(%rsp), %rax
    000007fb: 	movb	$0x1, (%rax)
    000007fe: 	cmpl	0x1a4(%rsp), %edx
    00000805: 	jle	.Ltmp833 # Offset: 2053
    0000080b: 	movq	0x1a8(%rsp), %rax
    00000813: 	movq	0x1b0(%rsp), %rcx
    0000081b: 	movb	$0x0, (%rax)
    0000081e: 	cvttsd2si	init_value(%rip), %eax
    00000826: 	movb	%al, (%rcx)
    00000828: 	cvttsd2si	init_value(%rip), %eax
    00000830: 	movq	0x1b8(%rsp), %rcx
    00000838: 	movb	%al, (%rcx)
    0000083a: 	movq	0x1c0(%rsp), %rax
    00000842: 	movb	$0x1, (%rax)
    00000845: 	cmpl	0x1f0(%rsp), %edx
    0000084c: 	jle	.Ltmp833 # Offset: 2124
    0000084e: 	movq	0x1c8(%rsp), %rax
    00000856: 	movq	0x1d0(%rsp), %rcx
    0000085e: 	movb	$0x0, (%rax)
    00000861: 	cvttsd2si	init_value(%rip), %eax
    00000869: 	movb	%al, (%rcx)
    0000086b: 	cvttsd2si	init_value(%rip), %eax
    00000873: 	movq	0x1d8(%rsp), %rcx
    0000087b: 	movb	%al, (%rcx)
    0000087d: 	movq	0x1e0(%rsp), %rax
    00000885: 	movb	$0x1, (%rax)
    00000888: 	nopl	(%rax,%rax) # Size: 8
.Ltmp833:
    00000890: 	addl	$0x1, %esi
    00000893: 	cmpl	iterations(%rip), %esi
    00000899: 	jl	.Ltmp834 # Offset: 2201
    0000089f: 	movl	0x1f4(%rsp), %ebp
.Ltmp830:
    000008a6: 	callq	clock@PLT # Offset: 2214
    000008ab: 	movq	0x110(%rsp), %rdi
    000008b3: 	pxor	%xmm0, %xmm0
    000008b7: 	movq	%rax, end_time(%rip)
    000008be: 	subq	start_time(%rip), %rax
    000008c5: 	cvtsi2sd	%rax, %xmm0
    000008ca: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000008d2: 	callq	_Z13record_resultdPKc # Offset: 2258
    000008d7: 	testl	%ebp, %ebp
    000008d9: 	jle	.Ltmp835 # Offset: 2265
    000008df: 	leal	-0x1(%rbp), %eax
    000008e2: 	cmpl	$0xe, %eax
    000008e5: 	jbe	.Ltmp836 # Offset: 2277
    000008eb: 	movl	%ebp, %edx
    000008ed: 	movq	%rbx, %rax
    000008f0: 	pxor	%xmm0, %xmm0
    000008f4: 	shrl	$0x4, %edx
    000008f7: 	subl	$0x1, %edx
    000008fa: 	shlq	$0x4, %rdx
    000008fe: 	leaq	0x10(%rbx,%rdx), %rdx
    00000903: 	nopl	(%rax,%rax) # Size: 5
.Ltmp837:
    00000908: 	movdqu	(%rax), %xmm6
    0000090c: 	addq	$0x10, %rax
    00000910: 	paddb	%xmm6, %xmm0
    00000914: 	cmpq	%rax, %rdx
    00000917: 	jne	.Ltmp837 # Offset: 2327
    00000919: 	movdqa	%xmm0, %xmm1
    0000091d: 	movl	%ebp, %edx
    0000091f: 	psrldq	$0x8, %xmm1
    00000924: 	andl	$-0x10, %edx
    00000927: 	paddb	%xmm1, %xmm0
    0000092b: 	pxor	%xmm1, %xmm1
    0000092f: 	movl	%edx, %eax
    00000931: 	psadbw	%xmm1, %xmm0
    00000935: 	movd	%xmm0, %r12d
    0000093a: 	cmpl	%ebp, %edx
    0000093c: 	je	.Ltmp838 # Offset: 2364
.Ltmp846:
    00000942: 	movl	%ebp, %ecx
    00000944: 	subl	%edx, %ecx
    00000946: 	leal	-0x1(%rcx), %esi
    00000949: 	cmpl	$0x6, %esi
    0000094c: 	jbe	.Ltmp839 # Offset: 2380
    0000094e: 	movq	(%rbx,%rdx), %xmm1
    00000953: 	pxor	%xmm0, %xmm0
    00000957: 	movdqa	%xmm1, %xmm7
    0000095b: 	psadbw	%xmm0, %xmm7
    0000095f: 	movq	%xmm7, 0x1f8(%rsp)
    00000968: 	movq	%xmm7, %rdx
    0000096d: 	movl	%edx, %esi
    0000096f: 	movl	%ecx, %edx
    00000971: 	andl	$-0x8, %edx
    00000974: 	addl	%esi, %r12d
    00000977: 	addl	%edx, %eax
    00000979: 	cmpl	%edx, %ecx
    0000097b: 	je	.Ltmp838 # Offset: 2427
.Ltmp839:
    0000097d: 	movslq	%eax, %rdx
    00000980: 	addb	(%rbx,%rdx), %r12b
    00000984: 	leal	0x1(%rax), %edx
    00000987: 	cmpl	%edx, %ebp
    00000989: 	jle	.Ltmp838 # Offset: 2441
    0000098b: 	movslq	%edx, %rdx
    0000098e: 	addb	(%rbx,%rdx), %r12b
    00000992: 	leal	0x2(%rax), %edx
    00000995: 	cmpl	%edx, %ebp
    00000997: 	jle	.Ltmp838 # Offset: 2455
    00000999: 	movslq	%edx, %rdx
    0000099c: 	addb	(%rbx,%rdx), %r12b
    000009a0: 	leal	0x3(%rax), %edx
    000009a3: 	cmpl	%ebp, %edx
    000009a5: 	jge	.Ltmp838 # Offset: 2469
    000009a7: 	movslq	%edx, %rdx
    000009aa: 	addb	(%rbx,%rdx), %r12b
    000009ae: 	leal	0x4(%rax), %edx
    000009b1: 	cmpl	%ebp, %edx
    000009b3: 	jge	.Ltmp838 # Offset: 2483
    000009b5: 	movslq	%edx, %rdx
    000009b8: 	addb	(%rbx,%rdx), %r12b
    000009bc: 	leal	0x5(%rax), %edx
    000009bf: 	cmpl	%edx, %ebp
    000009c1: 	jle	.Ltmp838 # Offset: 2497
    000009c3: 	movslq	%edx, %rdx
    000009c6: 	addl	$0x6, %eax
    000009c9: 	addb	(%rbx,%rdx), %r12b
    000009cd: 	cmpl	%eax, %ebp
    000009cf: 	jle	.Ltmp838 # Offset: 2511
    000009d1: 	cltq
    000009d3: 	addb	(%rbx,%rax), %r12b
.Ltmp838:
    000009d7: 	movsd	init_value(%rip), %xmm0
    000009df: 	addsd	%xmm0, %xmm0
    000009e3: 	addsd	DATAat0x36fb0(%rip), %xmm0
    000009eb: 	cvttsd2si	%xmm0, %ebx
    000009ef: 	shll	$0x7, %ebx
    000009f2: 	cmpb	%r12b, %bl
    000009f5: 	jne	.Ltmp840 # Offset: 2549
    000009f7: 	movq	0x208(%rsp), %rax
    000009ff: 	subq	%fs:0x28, %rax
    00000a08: 	jne	.Ltmp841 # Offset: 2568
    00000a0e: 	addq	$0x218, %rsp
    00000a15: 	popq	%rbx
    00000a16: 	popq	%rbp
    00000a17: 	popq	%r12
    00000a19: 	popq	%r13
    00000a1b: 	popq	%r14
    00000a1d: 	popq	%r15
    00000a1f: 	retq # Offset: 2591
.Ltmp840:
    00000a20: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000a27: 	movl	$0x5, %edx
    00000a2c: 	leaq	DATAat0x35004(%rip), %rsi
    00000a33: 	movq	%rbp, %rdi
    00000a36: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2614
    00000a3b: 	cmpq	$0x0, 0x110(%rsp)
    00000a44: 	je	.Ltmp842 # Offset: 2628
    00000a4a: 	movq	0x110(%rsp), %r14
    00000a52: 	movq	%r14, %rdi
    00000a55: 	callq	strlen@PLT # Offset: 2645
    00000a5a: 	movq	%r14, %rsi
    00000a5d: 	movq	%rbp, %rdi
    00000a60: 	movq	%rax, %rdx
    00000a63: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2659
.Ltmp845:
    00000a68: 	movq	%rbp, %rdi
    00000a6b: 	movl	$0xd, %edx
    00000a70: 	leaq	DATAat0x3500a(%rip), %rsi
    00000a77: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2679
    00000a7c: 	movb	%r12b, 0x207(%rsp)
    00000a84: 	movq	%rbp, %rdi
    00000a87: 	leaq	0x207(%rsp), %r12
    00000a8f: 	movl	$0x1, %edx
    00000a94: 	movq	%r12, %rsi
    00000a97: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2711
    00000a9c: 	movl	$0xb, %edx
    00000aa1: 	leaq	DATAat0x35018(%rip), %rsi
    00000aa8: 	movq	%rax, %rbp
    00000aab: 	movq	%rax, %rdi
    00000aae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2734
    00000ab3: 	movq	%rbp, %rdi
    00000ab6: 	movl	$0x1, %edx
    00000abb: 	movq	%r12, %rsi
    00000abe: 	movb	%bl, 0x207(%rsp)
    00000ac5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2757
    00000aca: 	movq	%rax, %rdi
    00000acd: 	movq	0x208(%rsp), %rax
    00000ad5: 	subq	%fs:0x28, %rax
    00000ade: 	jne	.Ltmp841 # Offset: 2782
    00000ae4: 	addq	$0x218, %rsp
    00000aeb: 	popq	%rbx
    00000aec: 	popq	%rbp
    00000aed: 	popq	%r12
    00000aef: 	popq	%r13
    00000af1: 	popq	%r14
    00000af3: 	popq	%r15
    00000af5: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 2805
.Ltmp831:
    00000afa: 	leaq	0x4(%rbx,%rsi,4), %rcx
    00000aff: 	xorl	%esi, %esi
    00000b01: 	nopl	(%rax) # Size: 7
.Ltmp844:
    00000b08: 	movq	%rbx, %rax
    00000b0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp843:
    00000b10: 	movb	$0x0, (%rax)
    00000b13: 	cvttsd2si	init_value(%rip), %edx
    00000b1b: 	addq	$0x4, %rax
    00000b1f: 	movb	%dl, -0x3(%rax)
    00000b22: 	cvttsd2si	init_value(%rip), %edx
    00000b2a: 	movb	$0x1, -0x1(%rax)
    00000b2e: 	movb	%dl, -0x2(%rax)
    00000b31: 	cmpq	%rcx, %rax
    00000b34: 	jne	.Ltmp843 # Offset: 2868
    00000b36: 	addl	$0x1, %esi
    00000b39: 	cmpl	%esi, iterations(%rip)
    00000b3f: 	jg	.Ltmp844 # Offset: 2879
    00000b41: 	jmp	.Ltmp830 # Offset: 2881
.Ltmp842:
    00000b46: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000b4d: 	movq	-0x18(%rax), %rdi
    00000b51: 	addq	%rbp, %rdi
    00000b54: 	movl	0x20(%rdi), %esi
    00000b57: 	orl	$0x1, %esi
    00000b5a: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 2906
    00000b5f: 	jmp	.Ltmp845 # Offset: 2911
.Ltmp835:
    00000b64: 	xorl	%r12d, %r12d
    00000b67: 	jmp	.Ltmp838 # Offset: 2919
.Ltmp836:
    00000b6c: 	xorl	%edx, %edx
    00000b6e: 	xorl	%r12d, %r12d
    00000b71: 	xorl	%eax, %eax
    00000b73: 	jmp	.Ltmp846 # Offset: 2931
.Ltmp841:
    00000b78: 	callq	__stack_chk_fail@PLT # Offset: 2936
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_loop_overwrite4_optIhEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite4IhEvPT_iPKc" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x17950
  Size        : 0xf16
  MaxSize     : 0xf20
  Offset      : 0x17950
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x3f8, %rsp
    0000001b: 	movq	%rdx, 0x8(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x3e8(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movl	iterations(%rip), %eax
    00000045: 	testl	%eax, %eax
    00000047: 	jle	.Ltmp847 # Offset: 71
    0000004d: 	leal	-0x400(%r12), %eax
    00000055: 	movl	$0x0, 0x10(%rsp)
    0000005d: 	movdqa	DATAat0x36f20(%rip), %xmm2
    00000065: 	leal	-0x3ff(%r12), %r14d
    0000006d: 	andl	$0xfffffc00, %eax
    00000072: 	leal	-0x3(%r12), %ebp
    00000077: 	addl	$0x400, %eax
    0000007c: 	movl	%eax, 0x14(%rsp)
.Ltmp865:
    00000080: 	xorl	%r13d, %r13d
    00000083: 	testl	%r14d, %r14d
    00000086: 	jle	.Ltmp848 # Offset: 134
    0000008c: 	leaq	init_value(%rip), %r11
    00000093: 	leaq	0x2(%rbx), %rsi
    00000097: 	xorl	%r8d, %r8d
    0000009a: 	xorl	%eax, %eax
    0000009c: 	leaq	0x1(%rbx), %r9
    000000a0: 	movl	$0x3fd, %edx
    000000a5: 	leaq	0x8(%r11), %r10
.Ltmp855:
    000000a9: 	leaq	0x6(%rsi), %rdi
    000000ad: 	movl	%esi, %ecx
    000000af: 	movq	$0x0, -0x2(%rsi)
    000000b7: 	movq	$0x0, 0x3f6(%rsi)
    000000c2: 	andq	$-0x8, %rdi
    000000c6: 	subl	%edi, %ecx
    000000c8: 	addl	$0x3fe, %ecx
    000000ce: 	shrl	$0x3, %ecx
    000000d1: 	rep		stosq	%rax, %es:(%rdi)
    000000d4: 	cmpq	%r8, %rdx
    000000d7: 	jbe	.Ltmp849 # Offset: 215
    000000dd: 	leaq	0x3fc(%rsi), %rcx
    000000e4: 	cmpq	%r11, %rcx
    000000e7: 	setbe	%cl
    000000ea: 	cmpq	%r10, %r9
    000000ed: 	setae	%dil
    000000f1: 	orb	%dil, %cl
    000000f4: 	je	.Ltmp850 # Offset: 244
    000000fa: 	leaq	-0x3f9(%rdx), %rdi
    00000101: 	leaq	0x3(%rdx), %rcx
    00000105: 	cmpq	%rcx, %rdi
    00000108: 	ja	.Ltmp850 # Offset: 264
    0000010e: 	movsd	init_value(%rip), %xmm1
    00000116: 	movq	%r9, %rcx
    00000119: 	xorl	%edi, %edi
    0000011b: 	unpcklpd	%xmm1, %xmm1
    0000011f: 	cvttpd2dq	%xmm1, %xmm1
    00000123: 	punpcklqdq	%xmm1, %xmm1
    00000127: 	movdqa	%xmm1, %xmm3
    0000012b: 	punpckhwd	%xmm1, %xmm3
    0000012f: 	nop # Size: 1
.Ltmp851:
    00000130: 	movdqa	%xmm1, %xmm0
    00000134: 	addq	$0x1, %rdi
    00000138: 	addq	$0x40, %rcx
    0000013c: 	punpcklwd	%xmm1, %xmm0
    00000140: 	movdqa	%xmm0, %xmm4
    00000144: 	punpcklwd	%xmm3, %xmm0
    00000148: 	punpckhwd	%xmm3, %xmm4
    0000014c: 	punpcklwd	%xmm4, %xmm0
    00000150: 	pand	%xmm2, %xmm0
    00000154: 	packuswb	%xmm0, %xmm0
    00000158: 	movd	%xmm0, %r13d
    0000015d: 	movb	%r13b, -0x40(%rcx)
    00000161: 	movaps	%xmm0, 0x3d0(%rsp)
    00000169: 	movzbl	0x3d1(%rsp), %r13d
    00000172: 	movb	%r13b, -0x3c(%rcx)
    00000176: 	movaps	%xmm0, 0x3c0(%rsp)
    0000017e: 	movzbl	0x3c2(%rsp), %r13d
    00000187: 	movb	%r13b, -0x38(%rcx)
    0000018b: 	movaps	%xmm0, 0x3b0(%rsp)
    00000193: 	movzbl	0x3b3(%rsp), %r13d
    0000019c: 	movb	%r13b, -0x34(%rcx)
    000001a0: 	movaps	%xmm0, 0x3a0(%rsp)
    000001a8: 	movzbl	0x3a4(%rsp), %r13d
    000001b1: 	movb	%r13b, -0x30(%rcx)
    000001b5: 	movaps	%xmm0, 0x390(%rsp)
    000001bd: 	movzbl	0x395(%rsp), %r13d
    000001c6: 	movb	%r13b, -0x2c(%rcx)
    000001ca: 	movaps	%xmm0, 0x380(%rsp)
    000001d2: 	movzbl	0x386(%rsp), %r13d
    000001db: 	movb	%r13b, -0x28(%rcx)
    000001df: 	movaps	%xmm0, 0x370(%rsp)
    000001e7: 	movzbl	0x377(%rsp), %r13d
    000001f0: 	movb	%r13b, -0x24(%rcx)
    000001f4: 	movaps	%xmm0, 0x360(%rsp)
    000001fc: 	movzbl	0x368(%rsp), %r13d
    00000205: 	movb	%r13b, -0x20(%rcx)
    00000209: 	movaps	%xmm0, 0x350(%rsp)
    00000211: 	movzbl	0x359(%rsp), %r13d
    0000021a: 	movb	%r13b, -0x1c(%rcx)
    0000021e: 	movaps	%xmm0, 0x340(%rsp)
    00000226: 	movzbl	0x34a(%rsp), %r13d
    0000022f: 	movb	%r13b, -0x18(%rcx)
    00000233: 	movaps	%xmm0, 0x330(%rsp)
    0000023b: 	movzbl	0x33b(%rsp), %r13d
    00000244: 	movb	%r13b, -0x14(%rcx)
    00000248: 	movaps	%xmm0, 0x320(%rsp)
    00000250: 	movzbl	0x32c(%rsp), %r13d
    00000259: 	movb	%r13b, -0x10(%rcx)
    0000025d: 	movaps	%xmm0, 0x310(%rsp)
    00000265: 	movzbl	0x31d(%rsp), %r13d
    0000026e: 	movb	%r13b, -0xc(%rcx)
    00000272: 	movaps	%xmm0, 0x300(%rsp)
    0000027a: 	movzbl	0x30e(%rsp), %r13d
    00000283: 	movb	%r13b, -0x8(%rcx)
    00000287: 	movaps	%xmm0, 0x2f0(%rsp)
    0000028f: 	movzbl	0x2ff(%rsp), %r13d
    00000298: 	movb	%r13b, -0x4(%rcx)
    0000029c: 	cmpq	$0x10, %rdi
    000002a0: 	jne	.Ltmp851 # Offset: 672
.Ltmp876:
    000002a6: 	leaq	0x3fd(%rsi), %rcx
    000002ad: 	cmpq	%r11, %rcx
    000002b0: 	setbe	%cl
    000002b3: 	cmpq	%r10, %rsi
    000002b6: 	setae	%dil
    000002ba: 	orb	%dil, %cl
    000002bd: 	je	.Ltmp852 # Offset: 701
    000002c3: 	leaq	-0x3f9(%rdx), %rdi
    000002ca: 	leaq	0x3(%rdx), %rcx
    000002ce: 	cmpq	%rcx, %rdi
    000002d1: 	ja	.Ltmp852 # Offset: 721
    000002d7: 	movsd	init_value(%rip), %xmm1
    000002df: 	movq	%rsi, %rcx
    000002e2: 	xorl	%edi, %edi
    000002e4: 	unpcklpd	%xmm1, %xmm1
    000002e8: 	cvttpd2dq	%xmm1, %xmm1
    000002ec: 	punpcklqdq	%xmm1, %xmm1
    000002f0: 	movdqa	%xmm1, %xmm3
    000002f4: 	punpckhwd	%xmm1, %xmm3
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp853:
    00000300: 	movdqa	%xmm1, %xmm0
    00000304: 	addq	$0x1, %rdi
    00000308: 	addq	$0x40, %rcx
    0000030c: 	punpcklwd	%xmm1, %xmm0
    00000310: 	movdqa	%xmm0, %xmm4
    00000314: 	punpcklwd	%xmm3, %xmm0
    00000318: 	punpckhwd	%xmm3, %xmm4
    0000031c: 	punpcklwd	%xmm4, %xmm0
    00000320: 	pand	%xmm2, %xmm0
    00000324: 	packuswb	%xmm0, %xmm0
    00000328: 	movd	%xmm0, %r13d
    0000032d: 	movb	%r13b, -0x40(%rcx)
    00000331: 	movaps	%xmm0, 0x2e0(%rsp)
    00000339: 	movzbl	0x2e1(%rsp), %r13d
    00000342: 	movb	%r13b, -0x3c(%rcx)
    00000346: 	movaps	%xmm0, 0x2d0(%rsp)
    0000034e: 	movzbl	0x2d2(%rsp), %r13d
    00000357: 	movb	%r13b, -0x38(%rcx)
    0000035b: 	movaps	%xmm0, 0x2c0(%rsp)
    00000363: 	movzbl	0x2c3(%rsp), %r13d
    0000036c: 	movb	%r13b, -0x34(%rcx)
    00000370: 	movaps	%xmm0, 0x2b0(%rsp)
    00000378: 	movzbl	0x2b4(%rsp), %r13d
    00000381: 	movb	%r13b, -0x30(%rcx)
    00000385: 	movaps	%xmm0, 0x2a0(%rsp)
    0000038d: 	movzbl	0x2a5(%rsp), %r13d
    00000396: 	movb	%r13b, -0x2c(%rcx)
    0000039a: 	movaps	%xmm0, 0x290(%rsp)
    000003a2: 	movzbl	0x296(%rsp), %r13d
    000003ab: 	movb	%r13b, -0x28(%rcx)
    000003af: 	movaps	%xmm0, 0x280(%rsp)
    000003b7: 	movzbl	0x287(%rsp), %r13d
    000003c0: 	movb	%r13b, -0x24(%rcx)
    000003c4: 	movaps	%xmm0, 0x270(%rsp)
    000003cc: 	movzbl	0x278(%rsp), %r13d
    000003d5: 	movb	%r13b, -0x20(%rcx)
    000003d9: 	movaps	%xmm0, 0x260(%rsp)
    000003e1: 	movzbl	0x269(%rsp), %r13d
    000003ea: 	movb	%r13b, -0x1c(%rcx)
    000003ee: 	movaps	%xmm0, 0x250(%rsp)
    000003f6: 	movzbl	0x25a(%rsp), %r13d
    000003ff: 	movb	%r13b, -0x18(%rcx)
    00000403: 	movaps	%xmm0, 0x240(%rsp)
    0000040b: 	movzbl	0x24b(%rsp), %r13d
    00000414: 	movb	%r13b, -0x14(%rcx)
    00000418: 	movaps	%xmm0, 0x230(%rsp)
    00000420: 	movzbl	0x23c(%rsp), %r13d
    00000429: 	movb	%r13b, -0x10(%rcx)
    0000042d: 	movaps	%xmm0, 0x220(%rsp)
    00000435: 	movzbl	0x22d(%rsp), %r13d
    0000043e: 	movb	%r13b, -0xc(%rcx)
    00000442: 	movaps	%xmm0, 0x210(%rsp)
    0000044a: 	movzbl	0x21e(%rsp), %r13d
    00000453: 	movb	%r13b, -0x8(%rcx)
    00000457: 	movaps	%xmm0, 0x200(%rsp)
    0000045f: 	movzbl	0x20f(%rsp), %r13d
    00000468: 	movb	%r13b, -0x4(%rcx)
    0000046c: 	cmpq	$0x10, %rdi
    00000470: 	jne	.Ltmp853 # Offset: 1136
.Ltmp874:
    00000476: 	movq	%r8, %rcx
    00000479: 	nopl	(%rax) # Size: 7
.Ltmp854:
    00000480: 	movb	$0x1, 0x3(%rbx,%rcx)
    00000485: 	addq	$0x4, %rcx
    00000489: 	cmpq	%rdx, %rcx
    0000048c: 	jb	.Ltmp854 # Offset: 1164
.Ltmp849:
    0000048e: 	addq	$0x400, %r8
    00000495: 	addq	$0x400, %rdx
    0000049c: 	addq	$0x400, %rsi
    000004a3: 	addq	$0x400, %r9
    000004aa: 	cmpl	%r8d, %r14d
    000004ad: 	jg	.Ltmp855 # Offset: 1197
    000004b3: 	movl	0x14(%rsp), %r13d
.Ltmp848:
    000004b8: 	cmpl	%r13d, %r12d
    000004bb: 	jle	.Ltmp856 # Offset: 1211
    000004bd: 	leal	-0x1(%r12), %edx
    000004c2: 	movslq	%r13d, %rdi
    000004c5: 	xorl	%esi, %esi
    000004c7: 	subl	%r13d, %edx
    000004ca: 	addq	%rbx, %rdi
    000004cd: 	addq	$0x1, %rdx
    000004d1: 	callq	memset@PLT # Offset: 1233
    000004d6: 	movdqa	DATAat0x36f20(%rip), %xmm2
.Ltmp856:
    000004de: 	cmpl	%r13d, %ebp
    000004e1: 	jle	.Ltmp857 # Offset: 1249
    000004e7: 	leal	-0x4(%r12), %edx
    000004ec: 	movslq	%r13d, %rcx
    000004ef: 	leaq	init_value(%rip), %r10
    000004f6: 	subl	%r13d, %edx
    000004f9: 	leaq	0x1(%rbx,%rcx), %rax
    000004fe: 	cmpl	$0x3b, %edx
    00000501: 	seta	%r9b
    00000505: 	shrl	$0x2, %edx
    00000508: 	leal	0x1(%rdx), %edi
    0000050b: 	leaq	-0x4(%rcx,%rdi,4), %r11
    00000510: 	movq	%rdi, %rsi
    00000513: 	leaq	0x2(%rbx,%r11), %rdi
    00000518: 	cmpq	%r10, %rdi
    0000051b: 	leaq	0x8(%r10), %rdi
    0000051f: 	setbe	%r8b
    00000523: 	cmpq	%rdi, %rax
    00000526: 	setae	%dil
    0000052a: 	orb	%r8b, %dil
    0000052d: 	je	.Ltmp858 # Offset: 1325
    00000533: 	testb	%r9b, %r9b
    00000536: 	je	.Ltmp858 # Offset: 1334
    0000053c: 	movsd	init_value(%rip), %xmm1
    00000544: 	movl	%esi, %edi
    00000546: 	movdqa	DATAat0x36f20(%rip), %xmm5
    0000054e: 	shrl	$0x4, %edi
    00000551: 	unpcklpd	%xmm1, %xmm1
    00000555: 	subl	$0x1, %edi
    00000558: 	cvttpd2dq	%xmm1, %xmm1
    0000055c: 	punpcklqdq	%xmm1, %xmm1
    00000560: 	shlq	$0x6, %rdi
    00000564: 	movdqa	%xmm1, %xmm3
    00000568: 	leaq	0x40(%rax,%rdi), %r8
    0000056d: 	punpckhwd	%xmm1, %xmm3
.Ltmp859:
    00000571: 	movdqa	%xmm1, %xmm0
    00000575: 	addq	$0x40, %rax
    00000579: 	punpcklwd	%xmm1, %xmm0
    0000057d: 	movdqa	%xmm0, %xmm4
    00000581: 	punpcklwd	%xmm3, %xmm0
    00000585: 	punpckhwd	%xmm3, %xmm4
    00000589: 	punpcklwd	%xmm4, %xmm0
    0000058d: 	pand	%xmm5, %xmm0
    00000591: 	packuswb	%xmm0, %xmm0
    00000595: 	movd	%xmm0, %edi
    00000599: 	movb	%dil, -0x40(%rax)
    0000059d: 	movaps	%xmm0, 0x1f0(%rsp)
    000005a5: 	movzbl	0x1f1(%rsp), %edi
    000005ad: 	movb	%dil, -0x3c(%rax)
    000005b1: 	movaps	%xmm0, 0x1e0(%rsp)
    000005b9: 	movzbl	0x1e2(%rsp), %edi
    000005c1: 	movb	%dil, -0x38(%rax)
    000005c5: 	movaps	%xmm0, 0x1d0(%rsp)
    000005cd: 	movzbl	0x1d3(%rsp), %edi
    000005d5: 	movb	%dil, -0x34(%rax)
    000005d9: 	movaps	%xmm0, 0x1c0(%rsp)
    000005e1: 	movzbl	0x1c4(%rsp), %edi
    000005e9: 	movb	%dil, -0x30(%rax)
    000005ed: 	movaps	%xmm0, 0x1b0(%rsp)
    000005f5: 	movzbl	0x1b5(%rsp), %edi
    000005fd: 	movb	%dil, -0x2c(%rax)
    00000601: 	movaps	%xmm0, 0x1a0(%rsp)
    00000609: 	movzbl	0x1a6(%rsp), %edi
    00000611: 	movb	%dil, -0x28(%rax)
    00000615: 	movaps	%xmm0, 0x190(%rsp)
    0000061d: 	movzbl	0x197(%rsp), %edi
    00000625: 	movb	%dil, -0x24(%rax)
    00000629: 	movaps	%xmm0, 0x180(%rsp)
    00000631: 	movzbl	0x188(%rsp), %edi
    00000639: 	movb	%dil, -0x20(%rax)
    0000063d: 	movaps	%xmm0, 0x170(%rsp)
    00000645: 	movzbl	0x179(%rsp), %edi
    0000064d: 	movb	%dil, -0x1c(%rax)
    00000651: 	movaps	%xmm0, 0x160(%rsp)
    00000659: 	movzbl	0x16a(%rsp), %edi
    00000661: 	movb	%dil, -0x18(%rax)
    00000665: 	movaps	%xmm0, 0x150(%rsp)
    0000066d: 	movzbl	0x15b(%rsp), %edi
    00000675: 	movb	%dil, -0x14(%rax)
    00000679: 	movaps	%xmm0, 0x140(%rsp)
    00000681: 	movzbl	0x14c(%rsp), %edi
    00000689: 	movb	%dil, -0x10(%rax)
    0000068d: 	movaps	%xmm0, 0x130(%rsp)
    00000695: 	movzbl	0x13d(%rsp), %edi
    0000069d: 	movb	%dil, -0xc(%rax)
    000006a1: 	movaps	%xmm0, 0x120(%rsp)
    000006a9: 	movzbl	0x12e(%rsp), %edi
    000006b1: 	movb	%dil, -0x8(%rax)
    000006b5: 	movaps	%xmm0, 0x110(%rsp)
    000006bd: 	movzbl	0x11f(%rsp), %edi
    000006c5: 	movb	%dil, -0x4(%rax)
    000006c9: 	cmpq	%rax, %r8
    000006cc: 	jne	.Ltmp859 # Offset: 1740
    000006d2: 	movl	%esi, %r8d
    000006d5: 	movl	%edx, %edi
    000006d7: 	andl	$-0x10, %r8d
    000006db: 	leal	(%r13,%r8,4), %eax
    000006e0: 	cmpl	%r8d, %esi
    000006e3: 	je	.Ltmp860 # Offset: 1763
    000006e9: 	cvttsd2si	init_value(%rip), %r15d
    000006f2: 	leal	0x1(%rax), %r8d
    000006f6: 	movslq	%r8d, %r8
    000006f9: 	movb	%r15b, (%rbx,%r8)
    000006fd: 	leal	0x4(%rax), %r8d
    00000701: 	cmpl	%r8d, %ebp
    00000704: 	jle	.Ltmp860 # Offset: 1796
    0000070a: 	cvttsd2si	init_value(%rip), %r15d
    00000713: 	leal	0x5(%rax), %r8d
    00000717: 	movslq	%r8d, %r8
    0000071a: 	movb	%r15b, (%rbx,%r8)
    0000071e: 	leal	0x8(%rax), %r8d
    00000722: 	cmpl	%r8d, %ebp
    00000725: 	jle	.Ltmp860 # Offset: 1829
    0000072b: 	cvttsd2si	init_value(%rip), %r15d
    00000734: 	leal	0x9(%rax), %r8d
    00000738: 	movslq	%r8d, %r8
    0000073b: 	movb	%r15b, (%rbx,%r8)
    0000073f: 	leal	0xc(%rax), %r8d
    00000743: 	cmpl	%r8d, %ebp
    00000746: 	jle	.Ltmp860 # Offset: 1862
    0000074c: 	cvttsd2si	init_value(%rip), %r15d
    00000755: 	leal	0xd(%rax), %r8d
    00000759: 	movslq	%r8d, %r8
    0000075c: 	movb	%r15b, (%rbx,%r8)
    00000760: 	leal	0x10(%rax), %r8d
    00000764: 	cmpl	%r8d, %ebp
    00000767: 	jle	.Ltmp860 # Offset: 1895
    0000076d: 	cvttsd2si	init_value(%rip), %r15d
    00000776: 	leal	0x11(%rax), %r8d
    0000077a: 	movslq	%r8d, %r8
    0000077d: 	movb	%r15b, (%rbx,%r8)
    00000781: 	leal	0x14(%rax), %r8d
    00000785: 	cmpl	%r8d, %ebp
    00000788: 	jle	.Ltmp860 # Offset: 1928
    0000078e: 	cvttsd2si	init_value(%rip), %r15d
    00000797: 	leal	0x15(%rax), %r8d
    0000079b: 	movslq	%r8d, %r8
    0000079e: 	movb	%r15b, (%rbx,%r8)
    000007a2: 	leal	0x18(%rax), %r8d
    000007a6: 	cmpl	%r8d, %ebp
    000007a9: 	jle	.Ltmp860 # Offset: 1961
    000007af: 	cvttsd2si	init_value(%rip), %r15d
    000007b8: 	leal	0x19(%rax), %r8d
    000007bc: 	movslq	%r8d, %r8
    000007bf: 	movb	%r15b, (%rbx,%r8)
    000007c3: 	leal	0x1c(%rax), %r8d
    000007c7: 	cmpl	%r8d, %ebp
    000007ca: 	jle	.Ltmp860 # Offset: 1994
    000007d0: 	cvttsd2si	init_value(%rip), %r15d
    000007d9: 	leal	0x1d(%rax), %r8d
    000007dd: 	movslq	%r8d, %r8
    000007e0: 	movb	%r15b, (%rbx,%r8)
    000007e4: 	leal	0x20(%rax), %r8d
    000007e8: 	cmpl	%r8d, %ebp
    000007eb: 	jle	.Ltmp860 # Offset: 2027
    000007f1: 	cvttsd2si	init_value(%rip), %r8d
    000007fa: 	leal	0x21(%rax), %edi
    000007fd: 	movslq	%edi, %rdi
    00000800: 	movb	%r8b, (%rbx,%rdi)
    00000804: 	leal	0x24(%rax), %r8d
    00000808: 	movl	%edx, %edi
    0000080a: 	cmpl	%r8d, %ebp
    0000080d: 	jle	.Ltmp860 # Offset: 2061
    00000813: 	cvttsd2si	init_value(%rip), %r8d
    0000081c: 	leal	0x25(%rax), %edx
    0000081f: 	movslq	%edx, %rdx
    00000822: 	movb	%r8b, (%rbx,%rdx)
    00000826: 	leal	0x28(%rax), %edx
    00000829: 	cmpl	%edx, %ebp
    0000082b: 	jle	.Ltmp860 # Offset: 2091
    0000082d: 	cvttsd2si	init_value(%rip), %r8d
    00000836: 	leal	0x29(%rax), %edx
    00000839: 	movslq	%edx, %rdx
    0000083c: 	movb	%r8b, (%rbx,%rdx)
    00000840: 	leal	0x2c(%rax), %edx
    00000843: 	cmpl	%edx, %ebp
    00000845: 	jle	.Ltmp860 # Offset: 2117
    00000847: 	cvttsd2si	init_value(%rip), %r8d
    00000850: 	leal	0x2d(%rax), %edx
    00000853: 	movslq	%edx, %rdx
    00000856: 	movb	%r8b, (%rbx,%rdx)
    0000085a: 	leal	0x30(%rax), %edx
    0000085d: 	cmpl	%edx, %ebp
    0000085f: 	jle	.Ltmp860 # Offset: 2143
    00000861: 	cvttsd2si	init_value(%rip), %r8d
    0000086a: 	leal	0x31(%rax), %edx
    0000086d: 	movslq	%edx, %rdx
    00000870: 	movb	%r8b, (%rbx,%rdx)
    00000874: 	leal	0x34(%rax), %edx
    00000877: 	cmpl	%edx, %ebp
    00000879: 	jle	.Ltmp860 # Offset: 2169
    0000087b: 	cvttsd2si	init_value(%rip), %r8d
    00000884: 	leal	0x35(%rax), %edx
    00000887: 	movslq	%edx, %rdx
    0000088a: 	movb	%r8b, (%rbx,%rdx)
    0000088e: 	leal	0x38(%rax), %edx
    00000891: 	cmpl	%edx, %ebp
    00000893: 	jle	.Ltmp860 # Offset: 2195
    00000895: 	cvttsd2si	init_value(%rip), %edx
    0000089d: 	addl	$0x39, %eax
    000008a0: 	cltq
    000008a2: 	movb	%dl, (%rbx,%rax)
.Ltmp860:
    000008a5: 	leaq	0x3(%rbx,%r11), %rdx
    000008aa: 	leaq	0x2(%rbx,%rcx), %rax
    000008af: 	cmpq	%r10, %rdx
    000008b2: 	leaq	iterations(%rip), %r15
    000008b9: 	setbe	%dl
    000008bc: 	cmpq	%r15, %rax
    000008bf: 	setae	%r8b
    000008c3: 	orb	%r8b, %dl
    000008c6: 	je	.Ltmp861 # Offset: 2246
    000008cc: 	testb	%r9b, %r9b
    000008cf: 	je	.Ltmp861 # Offset: 2255
    000008d5: 	movsd	init_value(%rip), %xmm1
    000008dd: 	movl	%esi, %edx
    000008df: 	shrl	$0x4, %edx
    000008e2: 	unpcklpd	%xmm1, %xmm1
    000008e6: 	subl	$0x1, %edx
    000008e9: 	cvttpd2dq	%xmm1, %xmm1
    000008ed: 	punpcklqdq	%xmm1, %xmm1
    000008f1: 	shlq	$0x6, %rdx
    000008f5: 	movdqa	%xmm1, %xmm3
    000008f9: 	leaq	0x40(%rax,%rdx), %r8
    000008fe: 	punpckhwd	%xmm1, %xmm3
.Ltmp862:
    00000902: 	movdqa	%xmm1, %xmm0
    00000906: 	addq	$0x40, %rax
    0000090a: 	punpcklwd	%xmm1, %xmm0
    0000090e: 	movdqa	%xmm0, %xmm4
    00000912: 	punpcklwd	%xmm3, %xmm0
    00000916: 	punpckhwd	%xmm3, %xmm4
    0000091a: 	punpcklwd	%xmm4, %xmm0
    0000091e: 	pand	%xmm2, %xmm0
    00000922: 	packuswb	%xmm0, %xmm0
    00000926: 	movd	%xmm0, %edx
    0000092a: 	movb	%dl, -0x40(%rax)
    0000092d: 	movaps	%xmm0, 0x100(%rsp)
    00000935: 	movzbl	0x101(%rsp), %edx
    0000093d: 	movb	%dl, -0x3c(%rax)
    00000940: 	movaps	%xmm0, 0xf0(%rsp)
    00000948: 	movzbl	0xf2(%rsp), %edx
    00000950: 	movb	%dl, -0x38(%rax)
    00000953: 	movaps	%xmm0, 0xe0(%rsp)
    0000095b: 	movzbl	0xe3(%rsp), %edx
    00000963: 	movb	%dl, -0x34(%rax)
    00000966: 	movaps	%xmm0, 0xd0(%rsp)
    0000096e: 	movzbl	0xd4(%rsp), %edx
    00000976: 	movb	%dl, -0x30(%rax)
    00000979: 	movaps	%xmm0, 0xc0(%rsp)
    00000981: 	movzbl	0xc5(%rsp), %edx
    00000989: 	movb	%dl, -0x2c(%rax)
    0000098c: 	movaps	%xmm0, 0xb0(%rsp)
    00000994: 	movzbl	0xb6(%rsp), %edx
    0000099c: 	movb	%dl, -0x28(%rax)
    0000099f: 	movaps	%xmm0, 0xa0(%rsp)
    000009a7: 	movzbl	0xa7(%rsp), %edx
    000009af: 	movb	%dl, -0x24(%rax)
    000009b2: 	movaps	%xmm0, 0x90(%rsp)
    000009ba: 	movzbl	0x98(%rsp), %edx
    000009c2: 	movb	%dl, -0x20(%rax)
    000009c5: 	movaps	%xmm0, 0x80(%rsp)
    000009cd: 	movzbl	0x89(%rsp), %edx
    000009d5: 	movb	%dl, -0x1c(%rax)
    000009d8: 	movaps	%xmm0, 0x70(%rsp)
    000009dd: 	movzbl	0x7a(%rsp), %edx
    000009e2: 	movb	%dl, -0x18(%rax)
    000009e5: 	movaps	%xmm0, 0x60(%rsp)
    000009ea: 	movzbl	0x6b(%rsp), %edx
    000009ef: 	movb	%dl, -0x14(%rax)
    000009f2: 	movaps	%xmm0, 0x50(%rsp)
    000009f7: 	movzbl	0x5c(%rsp), %edx
    000009fc: 	movb	%dl, -0x10(%rax)
    000009ff: 	movaps	%xmm0, 0x40(%rsp)
    00000a04: 	movzbl	0x4d(%rsp), %edx
    00000a09: 	movb	%dl, -0xc(%rax)
    00000a0c: 	movaps	%xmm0, 0x30(%rsp)
    00000a11: 	movzbl	0x3e(%rsp), %edx
    00000a16: 	movb	%dl, -0x8(%rax)
    00000a19: 	movaps	%xmm0, 0x20(%rsp)
    00000a1e: 	movzbl	0x2f(%rsp), %edx
    00000a23: 	movb	%dl, -0x4(%rax)
    00000a26: 	cmpq	%rax, %r8
    00000a29: 	jne	.Ltmp862 # Offset: 2601
    00000a2f: 	movl	%esi, %edx
    00000a31: 	andl	$-0x10, %edx
    00000a34: 	leal	(%r13,%rdx,4), %eax
    00000a39: 	cmpl	%esi, %edx
    00000a3b: 	je	.Ltmp863 # Offset: 2619
    00000a41: 	cvttsd2si	init_value(%rip), %esi
    00000a49: 	leal	0x2(%rax), %edx
    00000a4c: 	movslq	%edx, %rdx
    00000a4f: 	movb	%sil, (%rbx,%rdx)
    00000a53: 	leal	0x4(%rax), %edx
    00000a56: 	cmpl	%ebp, %edx
    00000a58: 	jge	.Ltmp863 # Offset: 2648
    00000a5e: 	cvttsd2si	init_value(%rip), %esi
    00000a66: 	leal	0x6(%rax), %edx
    00000a69: 	movslq	%edx, %rdx
    00000a6c: 	movb	%sil, (%rbx,%rdx)
    00000a70: 	leal	0x8(%rax), %edx
    00000a73: 	cmpl	%edx, %ebp
    00000a75: 	jle	.Ltmp863 # Offset: 2677
    00000a7b: 	cvttsd2si	init_value(%rip), %esi
    00000a83: 	leal	0xa(%rax), %edx
    00000a86: 	movslq	%edx, %rdx
    00000a89: 	movb	%sil, (%rbx,%rdx)
    00000a8d: 	leal	0xc(%rax), %edx
    00000a90: 	cmpl	%edx, %ebp
    00000a92: 	jle	.Ltmp863 # Offset: 2706
    00000a98: 	cvttsd2si	init_value(%rip), %esi
    00000aa0: 	leal	0xe(%rax), %edx
    00000aa3: 	movslq	%edx, %rdx
    00000aa6: 	movb	%sil, (%rbx,%rdx)
    00000aaa: 	leal	0x10(%rax), %edx
    00000aad: 	cmpl	%edx, %ebp
    00000aaf: 	jle	.Ltmp863 # Offset: 2735
    00000ab5: 	cvttsd2si	init_value(%rip), %esi
    00000abd: 	leal	0x12(%rax), %edx
    00000ac0: 	movslq	%edx, %rdx
    00000ac3: 	movb	%sil, (%rbx,%rdx)
    00000ac7: 	leal	0x14(%rax), %edx
    00000aca: 	cmpl	%edx, %ebp
    00000acc: 	jle	.Ltmp863 # Offset: 2764
    00000ad2: 	cvttsd2si	init_value(%rip), %esi
    00000ada: 	leal	0x16(%rax), %edx
    00000add: 	movslq	%edx, %rdx
    00000ae0: 	movb	%sil, (%rbx,%rdx)
    00000ae4: 	leal	0x18(%rax), %edx
    00000ae7: 	cmpl	%edx, %ebp
    00000ae9: 	jle	.Ltmp863 # Offset: 2793
    00000aef: 	cvttsd2si	init_value(%rip), %esi
    00000af7: 	leal	0x1a(%rax), %edx
    00000afa: 	movslq	%edx, %rdx
    00000afd: 	movb	%sil, (%rbx,%rdx)
    00000b01: 	leal	0x1c(%rax), %edx
    00000b04: 	cmpl	%edx, %ebp
    00000b06: 	jle	.Ltmp863 # Offset: 2822
    00000b0c: 	cvttsd2si	init_value(%rip), %esi
    00000b14: 	leal	0x1e(%rax), %edx
    00000b17: 	movslq	%edx, %rdx
    00000b1a: 	movb	%sil, (%rbx,%rdx)
    00000b1e: 	leal	0x20(%rax), %edx
    00000b21: 	cmpl	%edx, %ebp
    00000b23: 	jle	.Ltmp863 # Offset: 2851
    00000b29: 	cvttsd2si	init_value(%rip), %esi
    00000b31: 	leal	0x22(%rax), %edx
    00000b34: 	movslq	%edx, %rdx
    00000b37: 	movb	%sil, (%rbx,%rdx)
    00000b3b: 	leal	0x24(%rax), %edx
    00000b3e: 	cmpl	%edx, %ebp
    00000b40: 	jle	.Ltmp863 # Offset: 2880
    00000b46: 	cvttsd2si	init_value(%rip), %esi
    00000b4e: 	leal	0x26(%rax), %edx
    00000b51: 	movslq	%edx, %rdx
    00000b54: 	movb	%sil, (%rbx,%rdx)
    00000b58: 	leal	0x28(%rax), %edx
    00000b5b: 	cmpl	%edx, %ebp
    00000b5d: 	jle	.Ltmp863 # Offset: 2909
    00000b5f: 	cvttsd2si	init_value(%rip), %esi
    00000b67: 	leal	0x2a(%rax), %edx
    00000b6a: 	movslq	%edx, %rdx
    00000b6d: 	movb	%sil, (%rbx,%rdx)
    00000b71: 	leal	0x2c(%rax), %edx
    00000b74: 	cmpl	%edx, %ebp
    00000b76: 	jle	.Ltmp863 # Offset: 2934
    00000b78: 	cvttsd2si	init_value(%rip), %esi
    00000b80: 	leal	0x2e(%rax), %edx
    00000b83: 	movslq	%edx, %rdx
    00000b86: 	movb	%sil, (%rbx,%rdx)
    00000b8a: 	leal	0x30(%rax), %edx
    00000b8d: 	cmpl	%edx, %ebp
    00000b8f: 	jle	.Ltmp863 # Offset: 2959
    00000b91: 	cvttsd2si	init_value(%rip), %esi
    00000b99: 	leal	0x32(%rax), %edx
    00000b9c: 	movslq	%edx, %rdx
    00000b9f: 	movb	%sil, (%rbx,%rdx)
    00000ba3: 	leal	0x34(%rax), %edx
    00000ba6: 	cmpl	%edx, %ebp
    00000ba8: 	jle	.Ltmp863 # Offset: 2984
    00000baa: 	cvttsd2si	init_value(%rip), %esi
    00000bb2: 	leal	0x36(%rax), %edx
    00000bb5: 	movslq	%edx, %rdx
    00000bb8: 	movb	%sil, (%rbx,%rdx)
    00000bbc: 	leal	0x38(%rax), %edx
    00000bbf: 	cmpl	%edx, %ebp
    00000bc1: 	jle	.Ltmp863 # Offset: 3009
    00000bc3: 	cvttsd2si	init_value(%rip), %edx
    00000bcb: 	addl	$0x3a, %eax
    00000bce: 	cltq
    00000bd0: 	movb	%dl, (%rbx,%rax)
.Ltmp863:
    00000bd3: 	leaq	0x7(%rbx,%rcx), %rdx
    00000bd8: 	leaq	0x3(%rbx,%rcx), %rax
    00000bdd: 	leaq	(%rdx,%rdi,4), %rdx
.Ltmp864:
    00000be1: 	movb	$0x1, (%rax)
    00000be4: 	addq	$0x4, %rax
    00000be8: 	cmpq	%rdx, %rax
    00000beb: 	jne	.Ltmp864 # Offset: 3051
.Ltmp857:
    00000bed: 	addl	$0x1, 0x10(%rsp)
    00000bf2: 	movl	0x10(%rsp), %eax
    00000bf6: 	cmpl	%eax, iterations(%rip)
    00000bfc: 	jg	.Ltmp865 # Offset: 3068
.Ltmp847:
    00000c02: 	callq	clock@PLT # Offset: 3074
    00000c07: 	movq	0x8(%rsp), %rdi
    00000c0c: 	pxor	%xmm0, %xmm0
    00000c10: 	movq	%rax, end_time(%rip)
    00000c17: 	subq	start_time(%rip), %rax
    00000c1e: 	cvtsi2sd	%rax, %xmm0
    00000c23: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000c2b: 	callq	_Z13record_resultdPKc # Offset: 3115
    00000c30: 	testl	%r12d, %r12d
    00000c33: 	jle	.Ltmp866 # Offset: 3123
    00000c39: 	leal	-0x1(%r12), %eax
    00000c3e: 	cmpl	$0xe, %eax
    00000c41: 	jbe	.Ltmp867 # Offset: 3137
    00000c47: 	movl	%r12d, %edx
    00000c4a: 	movq	%rbx, %rax
    00000c4d: 	pxor	%xmm0, %xmm0
    00000c51: 	shrl	$0x4, %edx
    00000c54: 	subl	$0x1, %edx
    00000c57: 	shlq	$0x4, %rdx
    00000c5b: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp868:
    00000c60: 	movdqu	(%rax), %xmm7
    00000c64: 	addq	$0x10, %rax
    00000c68: 	paddb	%xmm7, %xmm0
    00000c6c: 	cmpq	%rax, %rdx
    00000c6f: 	jne	.Ltmp868 # Offset: 3183
    00000c71: 	movdqa	%xmm0, %xmm1
    00000c75: 	movl	%r12d, %edx
    00000c78: 	psrldq	$0x8, %xmm1
    00000c7d: 	andl	$-0x10, %edx
    00000c80: 	paddb	%xmm1, %xmm0
    00000c84: 	pxor	%xmm1, %xmm1
    00000c88: 	movl	%edx, %eax
    00000c8a: 	psadbw	%xmm1, %xmm0
    00000c8e: 	movd	%xmm0, %ebp
    00000c92: 	cmpl	%edx, %r12d
    00000c95: 	je	.Ltmp869 # Offset: 3221
.Ltmp881:
    00000c9b: 	movl	%r12d, %ecx
    00000c9e: 	subl	%edx, %ecx
    00000ca0: 	leal	-0x1(%rcx), %esi
    00000ca3: 	cmpl	$0x6, %esi
    00000ca6: 	jbe	.Ltmp870 # Offset: 3238
    00000ca8: 	movq	(%rbx,%rdx), %xmm1
    00000cad: 	pxor	%xmm0, %xmm0
    00000cb1: 	movdqa	%xmm1, %xmm6
    00000cb5: 	psadbw	%xmm0, %xmm6
    00000cb9: 	movq	%xmm6, %rdx
    00000cbe: 	movq	%xmm6, 0x18(%rsp)
    00000cc4: 	movl	%edx, %esi
    00000cc6: 	movl	%ecx, %edx
    00000cc8: 	andl	$-0x8, %edx
    00000ccb: 	addl	%esi, %ebp
    00000ccd: 	addl	%edx, %eax
    00000ccf: 	cmpl	%ecx, %edx
    00000cd1: 	je	.Ltmp869 # Offset: 3281
.Ltmp870:
    00000cd3: 	movslq	%eax, %rdx
    00000cd6: 	addb	(%rbx,%rdx), %bpl
    00000cda: 	leal	0x1(%rax), %edx
    00000cdd: 	cmpl	%edx, %r12d
    00000ce0: 	jle	.Ltmp869 # Offset: 3296
    00000ce2: 	movslq	%edx, %rdx
    00000ce5: 	addb	(%rbx,%rdx), %bpl
    00000ce9: 	leal	0x2(%rax), %edx
    00000cec: 	cmpl	%edx, %r12d
    00000cef: 	jle	.Ltmp869 # Offset: 3311
    00000cf1: 	movslq	%edx, %rdx
    00000cf4: 	addb	(%rbx,%rdx), %bpl
    00000cf8: 	leal	0x3(%rax), %edx
    00000cfb: 	cmpl	%r12d, %edx
    00000cfe: 	jge	.Ltmp869 # Offset: 3326
    00000d00: 	movslq	%edx, %rdx
    00000d03: 	addb	(%rbx,%rdx), %bpl
    00000d07: 	leal	0x4(%rax), %edx
    00000d0a: 	cmpl	%r12d, %edx
    00000d0d: 	jge	.Ltmp869 # Offset: 3341
    00000d0f: 	movslq	%edx, %rdx
    00000d12: 	addb	(%rbx,%rdx), %bpl
    00000d16: 	leal	0x5(%rax), %edx
    00000d19: 	cmpl	%edx, %r12d
    00000d1c: 	jle	.Ltmp869 # Offset: 3356
    00000d1e: 	movslq	%edx, %rdx
    00000d21: 	addl	$0x6, %eax
    00000d24: 	addb	(%rbx,%rdx), %bpl
    00000d28: 	cmpl	%eax, %r12d
    00000d2b: 	jle	.Ltmp869 # Offset: 3371
    00000d2d: 	cltq
    00000d2f: 	addb	(%rbx,%rax), %bpl
.Ltmp869:
    00000d33: 	movsd	init_value(%rip), %xmm0
    00000d3b: 	addsd	%xmm0, %xmm0
    00000d3f: 	addsd	DATAat0x36fb0(%rip), %xmm0
    00000d47: 	cvttsd2si	%xmm0, %ebx
    00000d4b: 	shll	$0x7, %ebx
    00000d4e: 	cmpb	%bpl, %bl
    00000d51: 	jne	.Ltmp871 # Offset: 3409
    00000d57: 	movq	0x3e8(%rsp), %rax
    00000d5f: 	subq	%fs:0x28, %rax
    00000d68: 	jne	.Ltmp872 # Offset: 3432
    00000d6e: 	addq	$0x3f8, %rsp
    00000d75: 	popq	%rbx
    00000d76: 	popq	%rbp
    00000d77: 	popq	%r12
    00000d79: 	popq	%r13
    00000d7b: 	popq	%r14
    00000d7d: 	popq	%r15
    00000d7f: 	retq # Offset: 3455
.Ltmp852:
    00000d80: 	movq	%r8, %rcx
    00000d83: 	nopl	(%rax,%rax) # Size: 5
.Ltmp873:
    00000d88: 	cvttsd2si	init_value(%rip), %edi
    00000d90: 	movb	%dil, 0x2(%rbx,%rcx)
    00000d95: 	addq	$0x4, %rcx
    00000d99: 	cmpq	%rdx, %rcx
    00000d9c: 	jb	.Ltmp873 # Offset: 3484
    00000d9e: 	jmp	.Ltmp874 # Offset: 3486
.Ltmp850:
    00000da3: 	movq	%r8, %rcx
    00000da6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp875:
    00000db0: 	cvttsd2si	init_value(%rip), %edi
    00000db8: 	movb	%dil, 0x1(%rbx,%rcx)
    00000dbd: 	addq	$0x4, %rcx
    00000dc1: 	cmpq	%rdx, %rcx
    00000dc4: 	jb	.Ltmp875 # Offset: 3524
    00000dc6: 	jmp	.Ltmp876 # Offset: 3526
.Ltmp861:
    00000dcb: 	leaq	0x6(%rbx,%rcx), %rdx
    00000dd0: 	leaq	(%rdx,%rdi,4), %rsi
.Ltmp877:
    00000dd4: 	cvttsd2si	init_value(%rip), %edx
    00000ddc: 	addq	$0x4, %rax
    00000de0: 	movb	%dl, -0x4(%rax)
    00000de3: 	cmpq	%rsi, %rax
    00000de6: 	jne	.Ltmp877 # Offset: 3558
    00000de8: 	jmp	.Ltmp863 # Offset: 3560
.Ltmp858:
    00000ded: 	leaq	0x5(%rbx,%rcx), %r8
    00000df2: 	movl	%edx, %edi
    00000df4: 	leaq	(%r8,%rdi,4), %r8
.Ltmp878:
    00000df8: 	cvttsd2si	init_value(%rip), %edx
    00000e00: 	addq	$0x4, %rax
    00000e04: 	movb	%dl, -0x4(%rax)
    00000e07: 	cmpq	%r8, %rax
    00000e0a: 	jne	.Ltmp878 # Offset: 3594
    00000e0c: 	jmp	.Ltmp860 # Offset: 3596
.Ltmp871:
    00000e11: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000e18: 	movl	$0x5, %edx
    00000e1d: 	leaq	DATAat0x35004(%rip), %rsi
    00000e24: 	movq	%r12, %rdi
    00000e27: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3623
    00000e2c: 	cmpq	$0x0, 0x8(%rsp)
    00000e32: 	je	.Ltmp879 # Offset: 3634
    00000e38: 	movq	0x8(%rsp), %r15
    00000e3d: 	movq	%r15, %rdi
    00000e40: 	callq	strlen@PLT # Offset: 3648
    00000e45: 	movq	%r15, %rsi
    00000e48: 	movq	%r12, %rdi
    00000e4b: 	movq	%rax, %rdx
    00000e4e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3662
.Ltmp880:
    00000e53: 	movl	$0xd, %edx
    00000e58: 	leaq	DATAat0x3500a(%rip), %rsi
    00000e5f: 	movq	%r12, %rdi
    00000e62: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3682
    00000e67: 	leaq	0x3e7(%rsp), %r13
    00000e6f: 	movq	%r12, %rdi
    00000e72: 	movl	$0x1, %edx
    00000e77: 	movq	%r13, %rsi
    00000e7a: 	movb	%bpl, 0x3e7(%rsp)
    00000e82: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3714
    00000e87: 	movl	$0xb, %edx
    00000e8c: 	leaq	DATAat0x35018(%rip), %rsi
    00000e93: 	movq	%rax, %rbp
    00000e96: 	movq	%rax, %rdi
    00000e99: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3737
    00000e9e: 	movq	%rbp, %rdi
    00000ea1: 	movl	$0x1, %edx
    00000ea6: 	movq	%r13, %rsi
    00000ea9: 	movb	%bl, 0x3e7(%rsp)
    00000eb0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3760
    00000eb5: 	movq	%rax, %rdi
    00000eb8: 	movq	0x3e8(%rsp), %rax
    00000ec0: 	subq	%fs:0x28, %rax
    00000ec9: 	jne	.Ltmp872 # Offset: 3785
    00000ecb: 	addq	$0x3f8, %rsp
    00000ed2: 	popq	%rbx
    00000ed3: 	popq	%rbp
    00000ed4: 	popq	%r12
    00000ed6: 	popq	%r13
    00000ed8: 	popq	%r14
    00000eda: 	popq	%r15
    00000edc: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3804
.Ltmp879:
    00000ee1: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000ee8: 	movq	-0x18(%rax), %rdi
    00000eec: 	addq	%r12, %rdi
    00000eef: 	movl	0x20(%rdi), %esi
    00000ef2: 	orl	$0x1, %esi
    00000ef5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3829
    00000efa: 	jmp	.Ltmp880 # Offset: 3834
.Ltmp866:
    00000eff: 	xorl	%ebp, %ebp
    00000f01: 	jmp	.Ltmp869 # Offset: 3841
.Ltmp867:
    00000f06: 	xorl	%edx, %edx
    00000f08: 	xorl	%eax, %eax
    00000f0a: 	xorl	%ebp, %ebp
    00000f0c: 	jmp	.Ltmp881 # Offset: 3852
.Ltmp872:
    00000f11: 	callq	__stack_chk_fail@PLT # Offset: 3857
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite4IhEvPT_iPKc"

Binary Function "_Z30test_for_loop_bzero_overwrite4IhEvPT_iPKc" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x18870
  Size        : 0xd75
  MaxSize     : 0xd80
  Offset      : 0x18870
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_bzero_overwrite4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x368, %rsp
    00000018: 	movq	%rdx, 0xf8(%rsp)
    00000020: 	movl	%esi, 0x58(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x358(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp882 # Offset: 75
    00000051: 	movslq	0x58(%rsp), %rdi
    00000056: 	leaq	init_value(%rip), %r9
    0000005d: 	leaq	0x1(%r14), %rcx
    00000061: 	movq	%rcx, 0x20(%rsp)
    00000066: 	leal	-0x4(%rdi), %edx
    00000069: 	leal	-0x3(%rdi), %ebx
    0000006c: 	movq	%rdi, 0x160(%rsp)
    00000074: 	cmpl	$0x3b, %edx
    00000077: 	leaq	0x8(%r9), %rdi
    0000007b: 	seta	%sil
    0000007f: 	shrl	$0x2, %edx
    00000082: 	leal	0x1(%rdx), %eax
    00000085: 	leaq	-0x4(,%rax,4), %r11
    0000008d: 	movq	%rax, %r8
    00000090: 	movl	%eax, (%rsp)
    00000093: 	leaq	0x2(%r14,%r11), %rax
    00000098: 	leaq	0x3(%r14,%r11), %r11
    0000009d: 	cmpq	%r9, %rax
    000000a0: 	setbe	%al
    000000a3: 	cmpq	%rdi, %rcx
    000000a6: 	setae	%cl
    000000a9: 	shlq	$0x2, %rdx
    000000ad: 	orl	%ecx, %eax
    000000af: 	leaq	0x7(%r14,%rdx), %r13
    000000b4: 	andl	%esi, %eax
    000000b6: 	movb	%al, 0x2b(%rsp)
    000000ba: 	movl	%r8d, %eax
    000000bd: 	andl	$-0x10, %r8d
    000000c1: 	shrl	$0x4, %eax
    000000c4: 	movl	%r8d, 0x4(%rsp)
    000000c9: 	leal	-0x1(%rax), %ecx
    000000cc: 	leal	(,%r8,4), %eax
    000000d4: 	leal	0x1(%rax), %r12d
    000000d8: 	leal	0x10(%rax), %r8d
    000000dc: 	shlq	$0x6, %rcx
    000000e0: 	cmpq	%r9, %r11
    000000e3: 	movslq	%r12d, %r12
    000000e6: 	movl	%r8d, 0x14(%rsp)
    000000eb: 	leal	0x14(%rax), %r8d
    000000ef: 	leaq	0x41(%r14,%rcx), %r15
    000000f4: 	leaq	(%r14,%r12), %r10
    000000f8: 	leal	0x5(%rax), %r12d
    000000fc: 	movl	%r8d, 0x2c(%rsp)
    00000101: 	setbe	%r9b
    00000105: 	movq	%r10, 0x38(%rsp)
    0000010a: 	movslq	%r12d, %r12
    0000010d: 	leal	0x4(%rax), %r10d
    00000111: 	leal	0x18(%rax), %r8d
    00000115: 	movl	%r10d, 0x8(%rsp)
    0000011a: 	leaq	(%r14,%r12), %r10
    0000011e: 	leal	0x9(%rax), %r12d
    00000122: 	movq	%r10, 0x50(%rsp)
    00000127: 	movslq	%r12d, %r12
    0000012a: 	leal	0x8(%rax), %r10d
    0000012e: 	leaq	0x42(%r14,%rcx), %rbp
    00000133: 	movl	%r10d, 0xc(%rsp)
    00000138: 	leaq	(%r14,%r12), %r10
    0000013c: 	leal	0xd(%rax), %r12d
    00000140: 	movq	%r10, 0x68(%rsp)
    00000145: 	movslq	%r12d, %r12
    00000148: 	leal	0xc(%rax), %r10d
    0000014c: 	leal	0x2(%rax), %ecx
    0000014f: 	movl	%r10d, 0x10(%rsp)
    00000154: 	leaq	(%r14,%r12), %r10
    00000158: 	leal	0x11(%rax), %r12d
    0000015c: 	movslq	%ecx, %rcx
    0000015f: 	movslq	%r12d, %r12
    00000162: 	movq	%r10, 0x78(%rsp)
    00000167: 	leaq	(%r14,%r12), %r10
    0000016b: 	leal	0x15(%rax), %r12d
    0000016f: 	movl	%r8d, 0x40(%rsp)
    00000174: 	movslq	%r12d, %r12
    00000177: 	movq	%r10, 0x90(%rsp)
    0000017f: 	leal	0x1c(%rax), %r8d
    00000183: 	leaq	(%r14,%r12), %r10
    00000187: 	leal	0x19(%rax), %r12d
    0000018b: 	movl	%r8d, 0x44(%rsp)
    00000190: 	movslq	%r12d, %r12
    00000193: 	movq	%r10, 0xa0(%rsp)
    0000019b: 	leal	0x20(%rax), %r8d
    0000019f: 	leaq	(%r14,%r12), %r10
    000001a3: 	leal	0x1d(%rax), %r12d
    000001a7: 	movl	%r8d, 0x5c(%rsp)
    000001ac: 	movslq	%r12d, %r12
    000001af: 	movq	%r10, 0xb8(%rsp)
    000001b7: 	leal	0x24(%rax), %r8d
    000001bb: 	leaq	(%r14,%r12), %r10
    000001bf: 	leal	0x21(%rax), %r12d
    000001c3: 	movl	%r8d, 0x80(%rsp)
    000001cb: 	movslq	%r12d, %r12
    000001ce: 	movq	%r10, 0xc8(%rsp)
    000001d6: 	leal	0x28(%rax), %r8d
    000001da: 	leaq	(%r14,%r12), %r10
    000001de: 	leal	0x25(%rax), %r12d
    000001e2: 	movl	%r8d, 0x84(%rsp)
    000001ea: 	movslq	%r12d, %r12
    000001ed: 	movq	%r10, 0xe0(%rsp)
    000001f5: 	leal	0x2c(%rax), %r8d
    000001f9: 	leaq	(%r14,%r12), %r10
    000001fd: 	leal	0x29(%rax), %r12d
    00000201: 	movl	%r8d, 0xa8(%rsp)
    00000209: 	movslq	%r12d, %r12
    0000020c: 	movq	%r10, 0xf0(%rsp)
    00000214: 	leal	0x30(%rax), %r8d
    00000218: 	leaq	(%r14,%r12), %r10
    0000021c: 	leal	0x2d(%rax), %r12d
    00000220: 	movl	%r8d, 0xac(%rsp)
    00000228: 	movslq	%r12d, %r12
    0000022b: 	movq	%r10, 0x108(%rsp)
    00000233: 	leal	0x34(%rax), %r8d
    00000237: 	leaq	(%r14,%r12), %r10
    0000023b: 	leal	0x31(%rax), %r12d
    0000023f: 	movl	%r8d, 0xd0(%rsp)
    00000247: 	movslq	%r12d, %r12
    0000024a: 	movq	%r10, 0x118(%rsp)
    00000252: 	leal	0x38(%rax), %r8d
    00000256: 	leaq	(%r14,%r12), %r10
    0000025a: 	leal	0x35(%rax), %r12d
    0000025e: 	movslq	%r12d, %r12
    00000261: 	movq	%r10, 0x138(%rsp)
    00000269: 	leaq	(%r14,%r12), %r10
    0000026d: 	leal	0x39(%rax), %r12d
    00000271: 	movslq	%r12d, %r12
    00000274: 	movq	%r10, 0x148(%rsp)
    0000027c: 	leaq	(%r14,%r12), %r10
    00000280: 	movl	%r8d, 0xd4(%rsp)
    00000288: 	leaq	0x5(%r14,%rdx), %r8
    0000028d: 	movq	%r10, 0x158(%rsp)
    00000295: 	leaq	0x2(%r14), %r10
    00000299: 	cmpq	%rdi, %r10
    0000029c: 	movq	%r8, 0x120(%rsp)
    000002a4: 	setae	%dil
    000002a8: 	addq	%r14, %rcx
    000002ab: 	movq	%r10, 0x18(%rsp)
    000002b0: 	xorl	%r12d, %r12d
    000002b3: 	movq	%rcx, 0x30(%rsp)
    000002b8: 	leal	0x6(%rax), %ecx
    000002bb: 	orl	%r9d, %edi
    000002be: 	movslq	%ecx, %rcx
    000002c1: 	andl	%esi, %edi
    000002c3: 	leaq	(%r14,%rcx), %rsi
    000002c7: 	leal	0xa(%rax), %ecx
    000002ca: 	movb	%dil, 0x2a(%rsp)
    000002cf: 	movq	%r14, %rdi
    000002d2: 	movslq	%ecx, %rcx
    000002d5: 	movq	%rsi, 0x48(%rsp)
    000002da: 	addq	%r14, %rcx
    000002dd: 	movq	%rcx, 0x60(%rsp)
    000002e2: 	leal	0xe(%rax), %ecx
    000002e5: 	movslq	%ecx, %rcx
    000002e8: 	leaq	(%r14,%rcx), %rsi
    000002ec: 	leal	0x12(%rax), %ecx
    000002ef: 	movslq	%ecx, %rcx
    000002f2: 	movq	%rsi, 0x70(%rsp)
    000002f7: 	addq	%r14, %rcx
    000002fa: 	movq	%rcx, 0x88(%rsp)
    00000302: 	leal	0x16(%rax), %ecx
    00000305: 	movslq	%ecx, %rcx
    00000308: 	leaq	(%r14,%rcx), %rsi
    0000030c: 	leal	0x1a(%rax), %ecx
    0000030f: 	movslq	%ecx, %rcx
    00000312: 	movq	%rsi, 0x98(%rsp)
    0000031a: 	addq	%r14, %rcx
    0000031d: 	movq	%rcx, 0xb0(%rsp)
    00000325: 	leal	0x1e(%rax), %ecx
    00000328: 	movslq	%ecx, %rcx
    0000032b: 	leaq	(%r14,%rcx), %rsi
    0000032f: 	leal	0x22(%rax), %ecx
    00000332: 	movslq	%ecx, %rcx
    00000335: 	movq	%rsi, 0xc0(%rsp)
    0000033d: 	addq	%r14, %rcx
    00000340: 	movq	%rcx, 0xd8(%rsp)
    00000348: 	leal	0x26(%rax), %ecx
    0000034b: 	movslq	%ecx, %rcx
    0000034e: 	leaq	(%r14,%rcx), %rsi
    00000352: 	leal	0x2a(%rax), %ecx
    00000355: 	movslq	%ecx, %rcx
    00000358: 	movq	%rsi, 0xe8(%rsp)
    00000360: 	addq	%r14, %rcx
    00000363: 	movq	%rcx, 0x100(%rsp)
    0000036b: 	leal	0x2e(%rax), %ecx
    0000036e: 	movslq	%ecx, %rcx
    00000371: 	leaq	(%r14,%rcx), %rsi
    00000375: 	leal	0x32(%rax), %ecx
    00000378: 	movslq	%ecx, %rcx
    0000037b: 	movq	%rsi, 0x110(%rsp)
    00000383: 	addq	%r14, %rcx
    00000386: 	movq	%rcx, 0x130(%rsp)
    0000038e: 	leal	0x36(%rax), %ecx
    00000391: 	addl	$0x3a, %eax
    00000394: 	movslq	%ecx, %rcx
    00000397: 	cltq
    00000399: 	addq	%r14, %rax
    0000039c: 	leaq	(%r14,%rcx), %rsi
    000003a0: 	movq	%rax, 0x150(%rsp)
    000003a8: 	leaq	0x6(%r14,%rdx), %rax
    000003ad: 	movq	0x160(%rsp), %r14
    000003b5: 	movq	%rsi, 0x140(%rsp)
    000003bd: 	movq	%rax, 0x128(%rsp)
    000003c5: 	movq	%r15, %rax
    000003c8: 	movl	%r12d, %r15d
    000003cb: 	movl	%ebx, %r12d
    000003ce: 	movq	%rbp, %rbx
    000003d1: 	movq	%rax, %rbp
    000003d4: 	nopl	(%rax) # Size: 4
.Ltmp891:
    000003d8: 	xorl	%esi, %esi
    000003da: 	movq	%r14, %rdx
    000003dd: 	callq	memset@PLT # Offset: 989
    000003e2: 	testl	%r12d, %r12d
    000003e5: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000003ed: 	movq	%rax, %rdi
    000003f0: 	jle	.Ltmp883 # Offset: 1008
    000003f6: 	cmpb	$0x0, 0x2b(%rsp)
    000003fb: 	je	.Ltmp884 # Offset: 1019
    00000401: 	movsd	init_value(%rip), %xmm1
    00000409: 	movq	0x20(%rsp), %rax
    0000040e: 	unpcklpd	%xmm1, %xmm1
    00000412: 	cvttpd2dq	%xmm1, %xmm1
    00000416: 	punpcklqdq	%xmm1, %xmm1
    0000041a: 	movdqa	%xmm1, %xmm2
    0000041e: 	punpckhwd	%xmm1, %xmm2
    00000422: 	nopw	(%rax,%rax) # Size: 6
.Ltmp885:
    00000428: 	movdqa	%xmm1, %xmm0
    0000042c: 	addq	$0x40, %rax
    00000430: 	punpcklwd	%xmm1, %xmm0
    00000434: 	movdqa	%xmm0, %xmm4
    00000438: 	punpcklwd	%xmm2, %xmm0
    0000043c: 	punpckhwd	%xmm2, %xmm4
    00000440: 	punpcklwd	%xmm4, %xmm0
    00000444: 	pand	%xmm3, %xmm0
    00000448: 	packuswb	%xmm0, %xmm0
    0000044c: 	movd	%xmm0, %edx
    00000450: 	movb	%dl, -0x40(%rax)
    00000453: 	movaps	%xmm0, 0x340(%rsp)
    0000045b: 	movzbl	0x341(%rsp), %edx
    00000463: 	movb	%dl, -0x3c(%rax)
    00000466: 	movaps	%xmm0, 0x330(%rsp)
    0000046e: 	movzbl	0x332(%rsp), %edx
    00000476: 	movb	%dl, -0x38(%rax)
    00000479: 	movaps	%xmm0, 0x320(%rsp)
    00000481: 	movzbl	0x323(%rsp), %edx
    00000489: 	movb	%dl, -0x34(%rax)
    0000048c: 	movaps	%xmm0, 0x310(%rsp)
    00000494: 	movzbl	0x314(%rsp), %edx
    0000049c: 	movb	%dl, -0x30(%rax)
    0000049f: 	movaps	%xmm0, 0x300(%rsp)
    000004a7: 	movzbl	0x305(%rsp), %edx
    000004af: 	movb	%dl, -0x2c(%rax)
    000004b2: 	movaps	%xmm0, 0x2f0(%rsp)
    000004ba: 	movzbl	0x2f6(%rsp), %edx
    000004c2: 	movb	%dl, -0x28(%rax)
    000004c5: 	movaps	%xmm0, 0x2e0(%rsp)
    000004cd: 	movzbl	0x2e7(%rsp), %edx
    000004d5: 	movb	%dl, -0x24(%rax)
    000004d8: 	movaps	%xmm0, 0x2d0(%rsp)
    000004e0: 	movzbl	0x2d8(%rsp), %edx
    000004e8: 	movb	%dl, -0x20(%rax)
    000004eb: 	movaps	%xmm0, 0x2c0(%rsp)
    000004f3: 	movzbl	0x2c9(%rsp), %edx
    000004fb: 	movb	%dl, -0x1c(%rax)
    000004fe: 	movaps	%xmm0, 0x2b0(%rsp)
    00000506: 	movzbl	0x2ba(%rsp), %edx
    0000050e: 	movb	%dl, -0x18(%rax)
    00000511: 	movaps	%xmm0, 0x2a0(%rsp)
    00000519: 	movzbl	0x2ab(%rsp), %edx
    00000521: 	movb	%dl, -0x14(%rax)
    00000524: 	movaps	%xmm0, 0x290(%rsp)
    0000052c: 	movzbl	0x29c(%rsp), %edx
    00000534: 	movb	%dl, -0x10(%rax)
    00000537: 	movaps	%xmm0, 0x280(%rsp)
    0000053f: 	movzbl	0x28d(%rsp), %edx
    00000547: 	movb	%dl, -0xc(%rax)
    0000054a: 	movaps	%xmm0, 0x270(%rsp)
    00000552: 	movzbl	0x27e(%rsp), %edx
    0000055a: 	movb	%dl, -0x8(%rax)
    0000055d: 	movaps	%xmm0, 0x260(%rsp)
    00000565: 	movzbl	0x26f(%rsp), %edx
    0000056d: 	movb	%dl, -0x4(%rax)
    00000570: 	cmpq	%rax, %rbp
    00000573: 	jne	.Ltmp885 # Offset: 1395
    00000579: 	movl	0x4(%rsp), %esi
    0000057d: 	cmpl	%esi, (%rsp)
    00000580: 	je	.Ltmp886 # Offset: 1408
    00000586: 	cvttsd2si	init_value(%rip), %eax
    0000058e: 	movq	0x38(%rsp), %rsi
    00000593: 	movb	%al, (%rsi)
    00000595: 	cmpl	0x8(%rsp), %r12d
    0000059a: 	jle	.Ltmp886 # Offset: 1434
    000005a0: 	cvttsd2si	init_value(%rip), %eax
    000005a8: 	movq	0x50(%rsp), %rsi
    000005ad: 	movb	%al, (%rsi)
    000005af: 	cmpl	0xc(%rsp), %r12d
    000005b4: 	jle	.Ltmp886 # Offset: 1460
    000005ba: 	cvttsd2si	init_value(%rip), %eax
    000005c2: 	movq	0x68(%rsp), %rsi
    000005c7: 	movb	%al, (%rsi)
    000005c9: 	cmpl	0x10(%rsp), %r12d
    000005ce: 	jle	.Ltmp886 # Offset: 1486
    000005d4: 	cvttsd2si	init_value(%rip), %eax
    000005dc: 	movq	0x78(%rsp), %rsi
    000005e1: 	movb	%al, (%rsi)
    000005e3: 	cmpl	0x14(%rsp), %r12d
    000005e8: 	jle	.Ltmp886 # Offset: 1512
    000005ee: 	cvttsd2si	init_value(%rip), %eax
    000005f6: 	movq	0x90(%rsp), %rsi
    000005fe: 	movb	%al, (%rsi)
    00000600: 	cmpl	0x2c(%rsp), %r12d
    00000605: 	jle	.Ltmp886 # Offset: 1541
    0000060b: 	cvttsd2si	init_value(%rip), %eax
    00000613: 	movq	0xa0(%rsp), %rsi
    0000061b: 	movb	%al, (%rsi)
    0000061d: 	cmpl	0x40(%rsp), %r12d
    00000622: 	jle	.Ltmp886 # Offset: 1570
    00000628: 	cvttsd2si	init_value(%rip), %eax
    00000630: 	movq	0xb8(%rsp), %rsi
    00000638: 	movb	%al, (%rsi)
    0000063a: 	cmpl	0x44(%rsp), %r12d
    0000063f: 	jle	.Ltmp886 # Offset: 1599
    00000645: 	cvttsd2si	init_value(%rip), %eax
    0000064d: 	movq	0xc8(%rsp), %rsi
    00000655: 	movb	%al, (%rsi)
    00000657: 	cmpl	0x5c(%rsp), %r12d
    0000065c: 	jle	.Ltmp886 # Offset: 1628
    00000662: 	cvttsd2si	init_value(%rip), %eax
    0000066a: 	movq	0xe0(%rsp), %rsi
    00000672: 	movb	%al, (%rsi)
    00000674: 	cmpl	0x80(%rsp), %r12d
    0000067c: 	jle	.Ltmp886 # Offset: 1660
    00000682: 	cvttsd2si	init_value(%rip), %eax
    0000068a: 	movq	0xf0(%rsp), %rcx
    00000692: 	movb	%al, (%rcx)
    00000694: 	cmpl	0x84(%rsp), %r12d
    0000069c: 	jle	.Ltmp886 # Offset: 1692
    000006a2: 	cvttsd2si	init_value(%rip), %eax
    000006aa: 	movq	0x108(%rsp), %rcx
    000006b2: 	movb	%al, (%rcx)
    000006b4: 	cmpl	0xa8(%rsp), %r12d
    000006bc: 	jle	.Ltmp886 # Offset: 1724
    000006be: 	cvttsd2si	init_value(%rip), %eax
    000006c6: 	movq	0x118(%rsp), %rsi
    000006ce: 	movb	%al, (%rsi)
    000006d0: 	cmpl	0xac(%rsp), %r12d
    000006d8: 	jle	.Ltmp886 # Offset: 1752
    000006da: 	cvttsd2si	init_value(%rip), %eax
    000006e2: 	movq	0x138(%rsp), %rsi
    000006ea: 	movb	%al, (%rsi)
    000006ec: 	cmpl	0xd0(%rsp), %r12d
    000006f4: 	jle	.Ltmp886 # Offset: 1780
    000006f6: 	cvttsd2si	init_value(%rip), %eax
    000006fe: 	movq	0x148(%rsp), %rsi
    00000706: 	movb	%al, (%rsi)
    00000708: 	cmpl	0xd4(%rsp), %r12d
    00000710: 	jle	.Ltmp886 # Offset: 1808
    00000712: 	cvttsd2si	init_value(%rip), %eax
    0000071a: 	movq	0x158(%rsp), %rcx
    00000722: 	movb	%al, (%rcx)
    00000724: 	nopl	(%rax) # Size: 4
.Ltmp886:
    00000728: 	cmpb	$0x0, 0x2a(%rsp)
    0000072d: 	je	.Ltmp887 # Offset: 1837
    00000733: 	movsd	init_value(%rip), %xmm1
    0000073b: 	movq	0x18(%rsp), %rax
    00000740: 	unpcklpd	%xmm1, %xmm1
    00000744: 	cvttpd2dq	%xmm1, %xmm1
    00000748: 	punpcklqdq	%xmm1, %xmm1
    0000074c: 	movdqa	%xmm1, %xmm2
    00000750: 	punpckhwd	%xmm1, %xmm2
    00000754: 	nopl	(%rax) # Size: 4
.Ltmp888:
    00000758: 	movdqa	%xmm1, %xmm0
    0000075c: 	addq	$0x40, %rax
    00000760: 	punpcklwd	%xmm1, %xmm0
    00000764: 	movdqa	%xmm0, %xmm4
    00000768: 	punpcklwd	%xmm2, %xmm0
    0000076c: 	punpckhwd	%xmm2, %xmm4
    00000770: 	punpcklwd	%xmm4, %xmm0
    00000774: 	pand	%xmm3, %xmm0
    00000778: 	packuswb	%xmm0, %xmm0
    0000077c: 	movd	%xmm0, %edx
    00000780: 	movb	%dl, -0x40(%rax)
    00000783: 	movaps	%xmm0, 0x250(%rsp)
    0000078b: 	movzbl	0x251(%rsp), %edx
    00000793: 	movb	%dl, -0x3c(%rax)
    00000796: 	movaps	%xmm0, 0x240(%rsp)
    0000079e: 	movzbl	0x242(%rsp), %edx
    000007a6: 	movb	%dl, -0x38(%rax)
    000007a9: 	movaps	%xmm0, 0x230(%rsp)
    000007b1: 	movzbl	0x233(%rsp), %edx
    000007b9: 	movb	%dl, -0x34(%rax)
    000007bc: 	movaps	%xmm0, 0x220(%rsp)
    000007c4: 	movzbl	0x224(%rsp), %edx
    000007cc: 	movb	%dl, -0x30(%rax)
    000007cf: 	movaps	%xmm0, 0x210(%rsp)
    000007d7: 	movzbl	0x215(%rsp), %edx
    000007df: 	movb	%dl, -0x2c(%rax)
    000007e2: 	movaps	%xmm0, 0x200(%rsp)
    000007ea: 	movzbl	0x206(%rsp), %edx
    000007f2: 	movb	%dl, -0x28(%rax)
    000007f5: 	movaps	%xmm0, 0x1f0(%rsp)
    000007fd: 	movzbl	0x1f7(%rsp), %edx
    00000805: 	movb	%dl, -0x24(%rax)
    00000808: 	movaps	%xmm0, 0x1e0(%rsp)
    00000810: 	movzbl	0x1e8(%rsp), %edx
    00000818: 	movb	%dl, -0x20(%rax)
    0000081b: 	movaps	%xmm0, 0x1d0(%rsp)
    00000823: 	movzbl	0x1d9(%rsp), %edx
    0000082b: 	movb	%dl, -0x1c(%rax)
    0000082e: 	movaps	%xmm0, 0x1c0(%rsp)
    00000836: 	movzbl	0x1ca(%rsp), %edx
    0000083e: 	movb	%dl, -0x18(%rax)
    00000841: 	movaps	%xmm0, 0x1b0(%rsp)
    00000849: 	movzbl	0x1bb(%rsp), %edx
    00000851: 	movb	%dl, -0x14(%rax)
    00000854: 	movaps	%xmm0, 0x1a0(%rsp)
    0000085c: 	movzbl	0x1ac(%rsp), %edx
    00000864: 	movb	%dl, -0x10(%rax)
    00000867: 	movaps	%xmm0, 0x190(%rsp)
    0000086f: 	movzbl	0x19d(%rsp), %edx
    00000877: 	movb	%dl, -0xc(%rax)
    0000087a: 	movaps	%xmm0, 0x180(%rsp)
    00000882: 	movzbl	0x18e(%rsp), %edx
    0000088a: 	movb	%dl, -0x8(%rax)
    0000088d: 	movaps	%xmm0, 0x170(%rsp)
    00000895: 	movzbl	0x17f(%rsp), %edx
    0000089d: 	movb	%dl, -0x4(%rax)
    000008a0: 	cmpq	%rax, %rbx
    000008a3: 	jne	.Ltmp888 # Offset: 2211
    000008a9: 	movl	0x4(%rsp), %esi
    000008ad: 	cmpl	%esi, (%rsp)
    000008b0: 	je	.Ltmp889 # Offset: 2224
    000008b6: 	cvttsd2si	init_value(%rip), %eax
    000008be: 	movq	0x30(%rsp), %rsi
    000008c3: 	movb	%al, (%rsi)
    000008c5: 	cmpl	0x8(%rsp), %r12d
    000008ca: 	jle	.Ltmp889 # Offset: 2250
    000008d0: 	cvttsd2si	init_value(%rip), %eax
    000008d8: 	movq	0x48(%rsp), %rsi
    000008dd: 	movb	%al, (%rsi)
    000008df: 	cmpl	0xc(%rsp), %r12d
    000008e4: 	jle	.Ltmp889 # Offset: 2276
    000008ea: 	cvttsd2si	init_value(%rip), %eax
    000008f2: 	movq	0x60(%rsp), %rcx
    000008f7: 	movb	%al, (%rcx)
    000008f9: 	cmpl	0x10(%rsp), %r12d
    000008fe: 	jle	.Ltmp889 # Offset: 2302
    00000904: 	cvttsd2si	init_value(%rip), %eax
    0000090c: 	movq	0x70(%rsp), %rcx
    00000911: 	movb	%al, (%rcx)
    00000913: 	cmpl	0x14(%rsp), %r12d
    00000918: 	jle	.Ltmp889 # Offset: 2328
    0000091e: 	cvttsd2si	init_value(%rip), %eax
    00000926: 	movq	0x88(%rsp), %rcx
    0000092e: 	movb	%al, (%rcx)
    00000930: 	cmpl	0x2c(%rsp), %r12d
    00000935: 	jle	.Ltmp889 # Offset: 2357
    0000093b: 	cvttsd2si	init_value(%rip), %eax
    00000943: 	movq	0x98(%rsp), %rcx
    0000094b: 	movb	%al, (%rcx)
    0000094d: 	cmpl	0x40(%rsp), %r12d
    00000952: 	jle	.Ltmp889 # Offset: 2386
    00000958: 	cvttsd2si	init_value(%rip), %eax
    00000960: 	movq	0xb0(%rsp), %rcx
    00000968: 	movb	%al, (%rcx)
    0000096a: 	cmpl	0x44(%rsp), %r12d
    0000096f: 	jle	.Ltmp889 # Offset: 2415
    00000975: 	cvttsd2si	init_value(%rip), %eax
    0000097d: 	movq	0xc0(%rsp), %rcx
    00000985: 	movb	%al, (%rcx)
    00000987: 	cmpl	0x5c(%rsp), %r12d
    0000098c: 	jle	.Ltmp889 # Offset: 2444
    00000992: 	cvttsd2si	init_value(%rip), %eax
    0000099a: 	movq	0xd8(%rsp), %rcx
    000009a2: 	movb	%al, (%rcx)
    000009a4: 	cmpl	0x80(%rsp), %r12d
    000009ac: 	jle	.Ltmp889 # Offset: 2476
    000009b2: 	cvttsd2si	init_value(%rip), %eax
    000009ba: 	movq	0xe8(%rsp), %rcx
    000009c2: 	movb	%al, (%rcx)
    000009c4: 	cmpl	0x84(%rsp), %r12d
    000009cc: 	jle	.Ltmp889 # Offset: 2508
    000009d2: 	cvttsd2si	init_value(%rip), %eax
    000009da: 	movq	0x100(%rsp), %rcx
    000009e2: 	movb	%al, (%rcx)
    000009e4: 	cmpl	0xa8(%rsp), %r12d
    000009ec: 	jle	.Ltmp889 # Offset: 2540
    000009ee: 	cvttsd2si	init_value(%rip), %eax
    000009f6: 	movq	0x110(%rsp), %rcx
    000009fe: 	movb	%al, (%rcx)
    00000a00: 	cmpl	0xac(%rsp), %r12d
    00000a08: 	jle	.Ltmp889 # Offset: 2568
    00000a0a: 	cvttsd2si	init_value(%rip), %eax
    00000a12: 	movq	0x130(%rsp), %rsi
    00000a1a: 	movb	%al, (%rsi)
    00000a1c: 	cmpl	0xd0(%rsp), %r12d
    00000a24: 	jle	.Ltmp889 # Offset: 2596
    00000a26: 	cvttsd2si	init_value(%rip), %eax
    00000a2e: 	movq	0x140(%rsp), %rsi
    00000a36: 	movb	%al, (%rsi)
    00000a38: 	cmpl	0xd4(%rsp), %r12d
    00000a40: 	jle	.Ltmp889 # Offset: 2624
    00000a42: 	cvttsd2si	init_value(%rip), %eax
    00000a4a: 	movq	0x150(%rsp), %rsi
    00000a52: 	movb	%al, (%rsi)
    00000a54: 	nopl	(%rax) # Size: 4
.Ltmp889:
    00000a58: 	leaq	0x3(%rdi), %rax
    00000a5c: 	nopl	(%rax) # Size: 4
.Ltmp890:
    00000a60: 	movb	$0x1, (%rax)
    00000a63: 	addq	$0x4, %rax
    00000a67: 	cmpq	%r13, %rax
    00000a6a: 	jne	.Ltmp890 # Offset: 2666
.Ltmp883:
    00000a6c: 	addl	$0x1, %r15d
    00000a70: 	cmpl	%r15d, iterations(%rip)
    00000a77: 	jg	.Ltmp891 # Offset: 2679
    00000a7d: 	movq	%rdi, %r14
.Ltmp882:
    00000a80: 	callq	clock@PLT # Offset: 2688
    00000a85: 	movq	0xf8(%rsp), %rdi
    00000a8d: 	pxor	%xmm0, %xmm0
    00000a91: 	xorl	%ebx, %ebx
    00000a93: 	movq	%rax, end_time(%rip)
    00000a9a: 	subq	start_time(%rip), %rax
    00000aa1: 	cvtsi2sd	%rax, %xmm0
    00000aa6: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000aae: 	callq	_Z13record_resultdPKc # Offset: 2734
    00000ab3: 	movl	0x58(%rsp), %eax
    00000ab7: 	testl	%eax, %eax
    00000ab9: 	jle	.Ltmp892 # Offset: 2745
    00000abf: 	movl	0x58(%rsp), %ebx
    00000ac3: 	leal	-0x1(%rbx), %eax
    00000ac6: 	cmpl	$0xe, %eax
    00000ac9: 	jbe	.Ltmp893 # Offset: 2761
    00000acf: 	shrl	$0x4, %ebx
    00000ad2: 	movq	%r14, %rax
    00000ad5: 	pxor	%xmm0, %xmm0
    00000ad9: 	movl	%ebx, %edx
    00000adb: 	subl	$0x1, %edx
    00000ade: 	shlq	$0x4, %rdx
    00000ae2: 	leaq	0x10(%r14,%rdx), %rdx
    00000ae7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp894:
    00000af0: 	movdqu	(%rax), %xmm5
    00000af4: 	addq	$0x10, %rax
    00000af8: 	paddb	%xmm5, %xmm0
    00000afc: 	cmpq	%rdx, %rax
    00000aff: 	jne	.Ltmp894 # Offset: 2815
    00000b01: 	movdqa	%xmm0, %xmm1
    00000b05: 	movl	0x58(%rsp), %edi
    00000b09: 	psrldq	$0x8, %xmm1
    00000b0e: 	paddb	%xmm1, %xmm0
    00000b12: 	movl	%edi, %edx
    00000b14: 	pxor	%xmm1, %xmm1
    00000b18: 	psadbw	%xmm1, %xmm0
    00000b1c: 	andl	$-0x10, %edx
    00000b1f: 	movd	%xmm0, %ebx
    00000b23: 	movl	%edx, %eax
    00000b25: 	cmpl	%edi, %edx
    00000b27: 	je	.Ltmp892 # Offset: 2855
.Ltmp902:
    00000b2d: 	movl	0x58(%rsp), %ecx
    00000b31: 	subl	%edx, %ecx
    00000b33: 	leal	-0x1(%rcx), %esi
    00000b36: 	cmpl	$0x6, %esi
    00000b39: 	jbe	.Ltmp895 # Offset: 2873
    00000b3b: 	movq	(%r14,%rdx), %xmm1
    00000b41: 	pxor	%xmm0, %xmm0
    00000b45: 	movdqa	%xmm1, %xmm6
    00000b49: 	psadbw	%xmm0, %xmm6
    00000b4d: 	movq	%xmm6, 0x168(%rsp)
    00000b56: 	movq	%xmm6, %rdx
    00000b5b: 	movl	%edx, %esi
    00000b5d: 	movl	%ecx, %edx
    00000b5f: 	andl	$-0x8, %edx
    00000b62: 	addl	%esi, %ebx
    00000b64: 	addl	%edx, %eax
    00000b66: 	cmpl	%edx, %ecx
    00000b68: 	je	.Ltmp892 # Offset: 2920
.Ltmp895:
    00000b6a: 	movslq	%eax, %rdx
    00000b6d: 	movl	0x58(%rsp), %esi
    00000b71: 	addb	(%r14,%rdx), %bl
    00000b75: 	leal	0x1(%rax), %edx
    00000b78: 	cmpl	%edx, %esi
    00000b7a: 	jle	.Ltmp892 # Offset: 2938
    00000b7c: 	movslq	%edx, %rdx
    00000b7f: 	addb	(%r14,%rdx), %bl
    00000b83: 	leal	0x2(%rax), %edx
    00000b86: 	cmpl	%edx, %esi
    00000b88: 	jle	.Ltmp892 # Offset: 2952
    00000b8a: 	movslq	%edx, %rdx
    00000b8d: 	addb	(%r14,%rdx), %bl
    00000b91: 	leal	0x3(%rax), %edx
    00000b94: 	cmpl	%edx, %esi
    00000b96: 	jle	.Ltmp892 # Offset: 2966
    00000b98: 	movslq	%edx, %rdx
    00000b9b: 	addb	(%r14,%rdx), %bl
    00000b9f: 	leal	0x4(%rax), %edx
    00000ba2: 	cmpl	%esi, %edx
    00000ba4: 	jge	.Ltmp892 # Offset: 2980
    00000ba6: 	movslq	%edx, %rdx
    00000ba9: 	addb	(%r14,%rdx), %bl
    00000bad: 	leal	0x5(%rax), %edx
    00000bb0: 	cmpl	%edx, %esi
    00000bb2: 	jle	.Ltmp892 # Offset: 2994
    00000bb4: 	movslq	%edx, %rdx
    00000bb7: 	addl	$0x6, %eax
    00000bba: 	addb	(%r14,%rdx), %bl
    00000bbe: 	cmpl	%eax, %esi
    00000bc0: 	jle	.Ltmp892 # Offset: 3008
    00000bc2: 	cltq
    00000bc4: 	addb	(%r14,%rax), %bl
.Ltmp892:
    00000bc8: 	movsd	init_value(%rip), %xmm0
    00000bd0: 	addsd	%xmm0, %xmm0
    00000bd4: 	addsd	DATAat0x36fb0(%rip), %xmm0
    00000bdc: 	cvttsd2si	%xmm0, %ebp
    00000be0: 	shll	$0x7, %ebp
    00000be3: 	cmpb	%bl, %bpl
    00000be6: 	jne	.Ltmp896 # Offset: 3046
    00000bec: 	movq	0x358(%rsp), %rax
    00000bf4: 	subq	%fs:0x28, %rax
    00000bfd: 	jne	.Ltmp897 # Offset: 3069
    00000c03: 	addq	$0x368, %rsp
    00000c0a: 	popq	%rbx
    00000c0b: 	popq	%rbp
    00000c0c: 	popq	%r12
    00000c0e: 	popq	%r13
    00000c10: 	popq	%r14
    00000c12: 	popq	%r15
    00000c14: 	retq # Offset: 3092
    00000c15: 	nopl	(%rax) # Size: 3
.Ltmp887:
    00000c18: 	movq	0x18(%rsp), %rax
    00000c1d: 	movq	0x128(%rsp), %rcx
    00000c25: 	nopl	(%rax) # Size: 3
.Ltmp898:
    00000c28: 	cvttsd2si	init_value(%rip), %edx
    00000c30: 	addq	$0x4, %rax
    00000c34: 	movb	%dl, -0x4(%rax)
    00000c37: 	cmpq	%rcx, %rax
    00000c3a: 	jne	.Ltmp898 # Offset: 3130
    00000c3c: 	jmp	.Ltmp889 # Offset: 3132
    00000c41: 	nopl	(%rax) # Size: 7
.Ltmp884:
    00000c48: 	movq	0x20(%rsp), %rax
    00000c4d: 	movq	0x120(%rsp), %rcx
    00000c55: 	nopl	(%rax) # Size: 3
.Ltmp899:
    00000c58: 	cvttsd2si	init_value(%rip), %edx
    00000c60: 	addq	$0x4, %rax
    00000c64: 	movb	%dl, -0x4(%rax)
    00000c67: 	cmpq	%rcx, %rax
    00000c6a: 	jne	.Ltmp899 # Offset: 3178
    00000c6c: 	jmp	.Ltmp886 # Offset: 3180
.Ltmp896:
    00000c71: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c78: 	movl	$0x5, %edx
    00000c7d: 	leaq	DATAat0x35004(%rip), %rsi
    00000c84: 	movq	%r12, %rdi
    00000c87: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3207
    00000c8c: 	cmpq	$0x0, 0xf8(%rsp)
    00000c95: 	je	.Ltmp900 # Offset: 3221
    00000c9b: 	movq	0xf8(%rsp), %r15
    00000ca3: 	movq	%r15, %rdi
    00000ca6: 	callq	strlen@PLT # Offset: 3238
    00000cab: 	movq	%r15, %rsi
    00000cae: 	movq	%r12, %rdi
    00000cb1: 	movq	%rax, %rdx
    00000cb4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3252
.Ltmp901:
    00000cb9: 	movq	%r12, %rdi
    00000cbc: 	movl	$0xd, %edx
    00000cc1: 	leaq	DATAat0x3500a(%rip), %rsi
    00000cc8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3272
    00000ccd: 	leaq	0x357(%rsp), %r13
    00000cd5: 	movq	%r12, %rdi
    00000cd8: 	movl	$0x1, %edx
    00000cdd: 	movq	%r13, %rsi
    00000ce0: 	movb	%bl, 0x357(%rsp)
    00000ce7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3303
    00000cec: 	movl	$0xb, %edx
    00000cf1: 	leaq	DATAat0x35018(%rip), %rsi
    00000cf8: 	movq	%rax, %r12
    00000cfb: 	movq	%rax, %rdi
    00000cfe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3326
    00000d03: 	movq	%r12, %rdi
    00000d06: 	movl	$0x1, %edx
    00000d0b: 	movq	%r13, %rsi
    00000d0e: 	movb	%bpl, 0x357(%rsp)
    00000d16: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3350
    00000d1b: 	movq	%rax, %rdi
    00000d1e: 	movq	0x358(%rsp), %rax
    00000d26: 	subq	%fs:0x28, %rax
    00000d2f: 	jne	.Ltmp897 # Offset: 3375
    00000d31: 	addq	$0x368, %rsp
    00000d38: 	popq	%rbx
    00000d39: 	popq	%rbp
    00000d3a: 	popq	%r12
    00000d3c: 	popq	%r13
    00000d3e: 	popq	%r14
    00000d40: 	popq	%r15
    00000d42: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3394
.Ltmp900:
    00000d47: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000d4e: 	movq	-0x18(%rax), %rdi
    00000d52: 	addq	%r12, %rdi
    00000d55: 	movl	0x20(%rdi), %esi
    00000d58: 	orl	$0x1, %esi
    00000d5b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3419
    00000d60: 	jmp	.Ltmp901 # Offset: 3424
.Ltmp893:
    00000d65: 	xorl	%edx, %edx
    00000d67: 	xorl	%ebx, %ebx
    00000d69: 	xorl	%eax, %eax
    00000d6b: 	jmp	.Ltmp902 # Offset: 3435
.Ltmp897:
    00000d70: 	callq	__stack_chk_fail@PLT # Offset: 3440
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_bzero_overwrite4IhEvPT_iPKc"

Binary Function "_Z31test_for_loop_memset_overwrite4IhEvPT_iPKc" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x195f0
  Size        : 0xd75
  MaxSize     : 0xd80
  Offset      : 0x195f0
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_memset_overwrite4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x368, %rsp
    00000018: 	movq	%rdx, 0xf8(%rsp)
    00000020: 	movl	%esi, 0x58(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x358(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp903 # Offset: 75
    00000051: 	movslq	0x58(%rsp), %rdi
    00000056: 	leaq	init_value(%rip), %r9
    0000005d: 	leaq	0x1(%r14), %rcx
    00000061: 	movq	%rcx, 0x20(%rsp)
    00000066: 	leal	-0x4(%rdi), %edx
    00000069: 	leal	-0x3(%rdi), %ebx
    0000006c: 	movq	%rdi, 0x160(%rsp)
    00000074: 	cmpl	$0x3b, %edx
    00000077: 	leaq	0x8(%r9), %rdi
    0000007b: 	seta	%sil
    0000007f: 	shrl	$0x2, %edx
    00000082: 	leal	0x1(%rdx), %eax
    00000085: 	leaq	-0x4(,%rax,4), %r11
    0000008d: 	movq	%rax, %r8
    00000090: 	movl	%eax, (%rsp)
    00000093: 	leaq	0x2(%r14,%r11), %rax
    00000098: 	leaq	0x3(%r14,%r11), %r11
    0000009d: 	cmpq	%r9, %rax
    000000a0: 	setbe	%al
    000000a3: 	cmpq	%rdi, %rcx
    000000a6: 	setae	%cl
    000000a9: 	shlq	$0x2, %rdx
    000000ad: 	orl	%ecx, %eax
    000000af: 	leaq	0x7(%r14,%rdx), %r13
    000000b4: 	andl	%esi, %eax
    000000b6: 	movb	%al, 0x2b(%rsp)
    000000ba: 	movl	%r8d, %eax
    000000bd: 	andl	$-0x10, %r8d
    000000c1: 	shrl	$0x4, %eax
    000000c4: 	movl	%r8d, 0x4(%rsp)
    000000c9: 	leal	-0x1(%rax), %ecx
    000000cc: 	leal	(,%r8,4), %eax
    000000d4: 	leal	0x1(%rax), %r12d
    000000d8: 	leal	0x10(%rax), %r8d
    000000dc: 	shlq	$0x6, %rcx
    000000e0: 	cmpq	%r9, %r11
    000000e3: 	movslq	%r12d, %r12
    000000e6: 	movl	%r8d, 0x14(%rsp)
    000000eb: 	leal	0x14(%rax), %r8d
    000000ef: 	leaq	0x41(%r14,%rcx), %r15
    000000f4: 	leaq	(%r14,%r12), %r10
    000000f8: 	leal	0x5(%rax), %r12d
    000000fc: 	movl	%r8d, 0x2c(%rsp)
    00000101: 	setbe	%r9b
    00000105: 	movq	%r10, 0x38(%rsp)
    0000010a: 	movslq	%r12d, %r12
    0000010d: 	leal	0x4(%rax), %r10d
    00000111: 	leal	0x18(%rax), %r8d
    00000115: 	movl	%r10d, 0x8(%rsp)
    0000011a: 	leaq	(%r14,%r12), %r10
    0000011e: 	leal	0x9(%rax), %r12d
    00000122: 	movq	%r10, 0x50(%rsp)
    00000127: 	movslq	%r12d, %r12
    0000012a: 	leal	0x8(%rax), %r10d
    0000012e: 	leaq	0x42(%r14,%rcx), %rbp
    00000133: 	movl	%r10d, 0xc(%rsp)
    00000138: 	leaq	(%r14,%r12), %r10
    0000013c: 	leal	0xd(%rax), %r12d
    00000140: 	movq	%r10, 0x68(%rsp)
    00000145: 	movslq	%r12d, %r12
    00000148: 	leal	0xc(%rax), %r10d
    0000014c: 	leal	0x2(%rax), %ecx
    0000014f: 	movl	%r10d, 0x10(%rsp)
    00000154: 	leaq	(%r14,%r12), %r10
    00000158: 	leal	0x11(%rax), %r12d
    0000015c: 	movslq	%ecx, %rcx
    0000015f: 	movslq	%r12d, %r12
    00000162: 	movq	%r10, 0x78(%rsp)
    00000167: 	leaq	(%r14,%r12), %r10
    0000016b: 	leal	0x15(%rax), %r12d
    0000016f: 	movl	%r8d, 0x40(%rsp)
    00000174: 	movslq	%r12d, %r12
    00000177: 	movq	%r10, 0x90(%rsp)
    0000017f: 	leal	0x1c(%rax), %r8d
    00000183: 	leaq	(%r14,%r12), %r10
    00000187: 	leal	0x19(%rax), %r12d
    0000018b: 	movl	%r8d, 0x44(%rsp)
    00000190: 	movslq	%r12d, %r12
    00000193: 	movq	%r10, 0xa0(%rsp)
    0000019b: 	leal	0x20(%rax), %r8d
    0000019f: 	leaq	(%r14,%r12), %r10
    000001a3: 	leal	0x1d(%rax), %r12d
    000001a7: 	movl	%r8d, 0x5c(%rsp)
    000001ac: 	movslq	%r12d, %r12
    000001af: 	movq	%r10, 0xb8(%rsp)
    000001b7: 	leal	0x24(%rax), %r8d
    000001bb: 	leaq	(%r14,%r12), %r10
    000001bf: 	leal	0x21(%rax), %r12d
    000001c3: 	movl	%r8d, 0x80(%rsp)
    000001cb: 	movslq	%r12d, %r12
    000001ce: 	movq	%r10, 0xc8(%rsp)
    000001d6: 	leal	0x28(%rax), %r8d
    000001da: 	leaq	(%r14,%r12), %r10
    000001de: 	leal	0x25(%rax), %r12d
    000001e2: 	movl	%r8d, 0x84(%rsp)
    000001ea: 	movslq	%r12d, %r12
    000001ed: 	movq	%r10, 0xe0(%rsp)
    000001f5: 	leal	0x2c(%rax), %r8d
    000001f9: 	leaq	(%r14,%r12), %r10
    000001fd: 	leal	0x29(%rax), %r12d
    00000201: 	movl	%r8d, 0xa8(%rsp)
    00000209: 	movslq	%r12d, %r12
    0000020c: 	movq	%r10, 0xf0(%rsp)
    00000214: 	leal	0x30(%rax), %r8d
    00000218: 	leaq	(%r14,%r12), %r10
    0000021c: 	leal	0x2d(%rax), %r12d
    00000220: 	movl	%r8d, 0xac(%rsp)
    00000228: 	movslq	%r12d, %r12
    0000022b: 	movq	%r10, 0x108(%rsp)
    00000233: 	leal	0x34(%rax), %r8d
    00000237: 	leaq	(%r14,%r12), %r10
    0000023b: 	leal	0x31(%rax), %r12d
    0000023f: 	movl	%r8d, 0xd0(%rsp)
    00000247: 	movslq	%r12d, %r12
    0000024a: 	movq	%r10, 0x118(%rsp)
    00000252: 	leal	0x38(%rax), %r8d
    00000256: 	leaq	(%r14,%r12), %r10
    0000025a: 	leal	0x35(%rax), %r12d
    0000025e: 	movslq	%r12d, %r12
    00000261: 	movq	%r10, 0x138(%rsp)
    00000269: 	leaq	(%r14,%r12), %r10
    0000026d: 	leal	0x39(%rax), %r12d
    00000271: 	movslq	%r12d, %r12
    00000274: 	movq	%r10, 0x148(%rsp)
    0000027c: 	leaq	(%r14,%r12), %r10
    00000280: 	movl	%r8d, 0xd4(%rsp)
    00000288: 	leaq	0x5(%r14,%rdx), %r8
    0000028d: 	movq	%r10, 0x158(%rsp)
    00000295: 	leaq	0x2(%r14), %r10
    00000299: 	cmpq	%rdi, %r10
    0000029c: 	movq	%r8, 0x120(%rsp)
    000002a4: 	setae	%dil
    000002a8: 	addq	%r14, %rcx
    000002ab: 	movq	%r10, 0x18(%rsp)
    000002b0: 	xorl	%r12d, %r12d
    000002b3: 	movq	%rcx, 0x30(%rsp)
    000002b8: 	leal	0x6(%rax), %ecx
    000002bb: 	orl	%r9d, %edi
    000002be: 	movslq	%ecx, %rcx
    000002c1: 	andl	%esi, %edi
    000002c3: 	leaq	(%r14,%rcx), %rsi
    000002c7: 	leal	0xa(%rax), %ecx
    000002ca: 	movb	%dil, 0x2a(%rsp)
    000002cf: 	movq	%r14, %rdi
    000002d2: 	movslq	%ecx, %rcx
    000002d5: 	movq	%rsi, 0x48(%rsp)
    000002da: 	addq	%r14, %rcx
    000002dd: 	movq	%rcx, 0x60(%rsp)
    000002e2: 	leal	0xe(%rax), %ecx
    000002e5: 	movslq	%ecx, %rcx
    000002e8: 	leaq	(%r14,%rcx), %rsi
    000002ec: 	leal	0x12(%rax), %ecx
    000002ef: 	movslq	%ecx, %rcx
    000002f2: 	movq	%rsi, 0x70(%rsp)
    000002f7: 	addq	%r14, %rcx
    000002fa: 	movq	%rcx, 0x88(%rsp)
    00000302: 	leal	0x16(%rax), %ecx
    00000305: 	movslq	%ecx, %rcx
    00000308: 	leaq	(%r14,%rcx), %rsi
    0000030c: 	leal	0x1a(%rax), %ecx
    0000030f: 	movslq	%ecx, %rcx
    00000312: 	movq	%rsi, 0x98(%rsp)
    0000031a: 	addq	%r14, %rcx
    0000031d: 	movq	%rcx, 0xb0(%rsp)
    00000325: 	leal	0x1e(%rax), %ecx
    00000328: 	movslq	%ecx, %rcx
    0000032b: 	leaq	(%r14,%rcx), %rsi
    0000032f: 	leal	0x22(%rax), %ecx
    00000332: 	movslq	%ecx, %rcx
    00000335: 	movq	%rsi, 0xc0(%rsp)
    0000033d: 	addq	%r14, %rcx
    00000340: 	movq	%rcx, 0xd8(%rsp)
    00000348: 	leal	0x26(%rax), %ecx
    0000034b: 	movslq	%ecx, %rcx
    0000034e: 	leaq	(%r14,%rcx), %rsi
    00000352: 	leal	0x2a(%rax), %ecx
    00000355: 	movslq	%ecx, %rcx
    00000358: 	movq	%rsi, 0xe8(%rsp)
    00000360: 	addq	%r14, %rcx
    00000363: 	movq	%rcx, 0x100(%rsp)
    0000036b: 	leal	0x2e(%rax), %ecx
    0000036e: 	movslq	%ecx, %rcx
    00000371: 	leaq	(%r14,%rcx), %rsi
    00000375: 	leal	0x32(%rax), %ecx
    00000378: 	movslq	%ecx, %rcx
    0000037b: 	movq	%rsi, 0x110(%rsp)
    00000383: 	addq	%r14, %rcx
    00000386: 	movq	%rcx, 0x130(%rsp)
    0000038e: 	leal	0x36(%rax), %ecx
    00000391: 	addl	$0x3a, %eax
    00000394: 	movslq	%ecx, %rcx
    00000397: 	cltq
    00000399: 	addq	%r14, %rax
    0000039c: 	leaq	(%r14,%rcx), %rsi
    000003a0: 	movq	%rax, 0x150(%rsp)
    000003a8: 	leaq	0x6(%r14,%rdx), %rax
    000003ad: 	movq	0x160(%rsp), %r14
    000003b5: 	movq	%rsi, 0x140(%rsp)
    000003bd: 	movq	%rax, 0x128(%rsp)
    000003c5: 	movq	%r15, %rax
    000003c8: 	movl	%r12d, %r15d
    000003cb: 	movl	%ebx, %r12d
    000003ce: 	movq	%rbp, %rbx
    000003d1: 	movq	%rax, %rbp
    000003d4: 	nopl	(%rax) # Size: 4
.Ltmp912:
    000003d8: 	xorl	%esi, %esi
    000003da: 	movq	%r14, %rdx
    000003dd: 	callq	memset@PLT # Offset: 989
    000003e2: 	testl	%r12d, %r12d
    000003e5: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000003ed: 	movq	%rax, %rdi
    000003f0: 	jle	.Ltmp904 # Offset: 1008
    000003f6: 	cmpb	$0x0, 0x2b(%rsp)
    000003fb: 	je	.Ltmp905 # Offset: 1019
    00000401: 	movsd	init_value(%rip), %xmm1
    00000409: 	movq	0x20(%rsp), %rax
    0000040e: 	unpcklpd	%xmm1, %xmm1
    00000412: 	cvttpd2dq	%xmm1, %xmm1
    00000416: 	punpcklqdq	%xmm1, %xmm1
    0000041a: 	movdqa	%xmm1, %xmm2
    0000041e: 	punpckhwd	%xmm1, %xmm2
    00000422: 	nopw	(%rax,%rax) # Size: 6
.Ltmp906:
    00000428: 	movdqa	%xmm1, %xmm0
    0000042c: 	addq	$0x40, %rax
    00000430: 	punpcklwd	%xmm1, %xmm0
    00000434: 	movdqa	%xmm0, %xmm4
    00000438: 	punpcklwd	%xmm2, %xmm0
    0000043c: 	punpckhwd	%xmm2, %xmm4
    00000440: 	punpcklwd	%xmm4, %xmm0
    00000444: 	pand	%xmm3, %xmm0
    00000448: 	packuswb	%xmm0, %xmm0
    0000044c: 	movd	%xmm0, %edx
    00000450: 	movb	%dl, -0x40(%rax)
    00000453: 	movaps	%xmm0, 0x340(%rsp)
    0000045b: 	movzbl	0x341(%rsp), %edx
    00000463: 	movb	%dl, -0x3c(%rax)
    00000466: 	movaps	%xmm0, 0x330(%rsp)
    0000046e: 	movzbl	0x332(%rsp), %edx
    00000476: 	movb	%dl, -0x38(%rax)
    00000479: 	movaps	%xmm0, 0x320(%rsp)
    00000481: 	movzbl	0x323(%rsp), %edx
    00000489: 	movb	%dl, -0x34(%rax)
    0000048c: 	movaps	%xmm0, 0x310(%rsp)
    00000494: 	movzbl	0x314(%rsp), %edx
    0000049c: 	movb	%dl, -0x30(%rax)
    0000049f: 	movaps	%xmm0, 0x300(%rsp)
    000004a7: 	movzbl	0x305(%rsp), %edx
    000004af: 	movb	%dl, -0x2c(%rax)
    000004b2: 	movaps	%xmm0, 0x2f0(%rsp)
    000004ba: 	movzbl	0x2f6(%rsp), %edx
    000004c2: 	movb	%dl, -0x28(%rax)
    000004c5: 	movaps	%xmm0, 0x2e0(%rsp)
    000004cd: 	movzbl	0x2e7(%rsp), %edx
    000004d5: 	movb	%dl, -0x24(%rax)
    000004d8: 	movaps	%xmm0, 0x2d0(%rsp)
    000004e0: 	movzbl	0x2d8(%rsp), %edx
    000004e8: 	movb	%dl, -0x20(%rax)
    000004eb: 	movaps	%xmm0, 0x2c0(%rsp)
    000004f3: 	movzbl	0x2c9(%rsp), %edx
    000004fb: 	movb	%dl, -0x1c(%rax)
    000004fe: 	movaps	%xmm0, 0x2b0(%rsp)
    00000506: 	movzbl	0x2ba(%rsp), %edx
    0000050e: 	movb	%dl, -0x18(%rax)
    00000511: 	movaps	%xmm0, 0x2a0(%rsp)
    00000519: 	movzbl	0x2ab(%rsp), %edx
    00000521: 	movb	%dl, -0x14(%rax)
    00000524: 	movaps	%xmm0, 0x290(%rsp)
    0000052c: 	movzbl	0x29c(%rsp), %edx
    00000534: 	movb	%dl, -0x10(%rax)
    00000537: 	movaps	%xmm0, 0x280(%rsp)
    0000053f: 	movzbl	0x28d(%rsp), %edx
    00000547: 	movb	%dl, -0xc(%rax)
    0000054a: 	movaps	%xmm0, 0x270(%rsp)
    00000552: 	movzbl	0x27e(%rsp), %edx
    0000055a: 	movb	%dl, -0x8(%rax)
    0000055d: 	movaps	%xmm0, 0x260(%rsp)
    00000565: 	movzbl	0x26f(%rsp), %edx
    0000056d: 	movb	%dl, -0x4(%rax)
    00000570: 	cmpq	%rax, %rbp
    00000573: 	jne	.Ltmp906 # Offset: 1395
    00000579: 	movl	0x4(%rsp), %esi
    0000057d: 	cmpl	%esi, (%rsp)
    00000580: 	je	.Ltmp907 # Offset: 1408
    00000586: 	cvttsd2si	init_value(%rip), %eax
    0000058e: 	movq	0x38(%rsp), %rsi
    00000593: 	movb	%al, (%rsi)
    00000595: 	cmpl	0x8(%rsp), %r12d
    0000059a: 	jle	.Ltmp907 # Offset: 1434
    000005a0: 	cvttsd2si	init_value(%rip), %eax
    000005a8: 	movq	0x50(%rsp), %rsi
    000005ad: 	movb	%al, (%rsi)
    000005af: 	cmpl	0xc(%rsp), %r12d
    000005b4: 	jle	.Ltmp907 # Offset: 1460
    000005ba: 	cvttsd2si	init_value(%rip), %eax
    000005c2: 	movq	0x68(%rsp), %rsi
    000005c7: 	movb	%al, (%rsi)
    000005c9: 	cmpl	0x10(%rsp), %r12d
    000005ce: 	jle	.Ltmp907 # Offset: 1486
    000005d4: 	cvttsd2si	init_value(%rip), %eax
    000005dc: 	movq	0x78(%rsp), %rsi
    000005e1: 	movb	%al, (%rsi)
    000005e3: 	cmpl	0x14(%rsp), %r12d
    000005e8: 	jle	.Ltmp907 # Offset: 1512
    000005ee: 	cvttsd2si	init_value(%rip), %eax
    000005f6: 	movq	0x90(%rsp), %rsi
    000005fe: 	movb	%al, (%rsi)
    00000600: 	cmpl	0x2c(%rsp), %r12d
    00000605: 	jle	.Ltmp907 # Offset: 1541
    0000060b: 	cvttsd2si	init_value(%rip), %eax
    00000613: 	movq	0xa0(%rsp), %rsi
    0000061b: 	movb	%al, (%rsi)
    0000061d: 	cmpl	0x40(%rsp), %r12d
    00000622: 	jle	.Ltmp907 # Offset: 1570
    00000628: 	cvttsd2si	init_value(%rip), %eax
    00000630: 	movq	0xb8(%rsp), %rsi
    00000638: 	movb	%al, (%rsi)
    0000063a: 	cmpl	0x44(%rsp), %r12d
    0000063f: 	jle	.Ltmp907 # Offset: 1599
    00000645: 	cvttsd2si	init_value(%rip), %eax
    0000064d: 	movq	0xc8(%rsp), %rsi
    00000655: 	movb	%al, (%rsi)
    00000657: 	cmpl	0x5c(%rsp), %r12d
    0000065c: 	jle	.Ltmp907 # Offset: 1628
    00000662: 	cvttsd2si	init_value(%rip), %eax
    0000066a: 	movq	0xe0(%rsp), %rsi
    00000672: 	movb	%al, (%rsi)
    00000674: 	cmpl	0x80(%rsp), %r12d
    0000067c: 	jle	.Ltmp907 # Offset: 1660
    00000682: 	cvttsd2si	init_value(%rip), %eax
    0000068a: 	movq	0xf0(%rsp), %rcx
    00000692: 	movb	%al, (%rcx)
    00000694: 	cmpl	0x84(%rsp), %r12d
    0000069c: 	jle	.Ltmp907 # Offset: 1692
    000006a2: 	cvttsd2si	init_value(%rip), %eax
    000006aa: 	movq	0x108(%rsp), %rcx
    000006b2: 	movb	%al, (%rcx)
    000006b4: 	cmpl	0xa8(%rsp), %r12d
    000006bc: 	jle	.Ltmp907 # Offset: 1724
    000006be: 	cvttsd2si	init_value(%rip), %eax
    000006c6: 	movq	0x118(%rsp), %rsi
    000006ce: 	movb	%al, (%rsi)
    000006d0: 	cmpl	0xac(%rsp), %r12d
    000006d8: 	jle	.Ltmp907 # Offset: 1752
    000006da: 	cvttsd2si	init_value(%rip), %eax
    000006e2: 	movq	0x138(%rsp), %rsi
    000006ea: 	movb	%al, (%rsi)
    000006ec: 	cmpl	0xd0(%rsp), %r12d
    000006f4: 	jle	.Ltmp907 # Offset: 1780
    000006f6: 	cvttsd2si	init_value(%rip), %eax
    000006fe: 	movq	0x148(%rsp), %rsi
    00000706: 	movb	%al, (%rsi)
    00000708: 	cmpl	0xd4(%rsp), %r12d
    00000710: 	jle	.Ltmp907 # Offset: 1808
    00000712: 	cvttsd2si	init_value(%rip), %eax
    0000071a: 	movq	0x158(%rsp), %rcx
    00000722: 	movb	%al, (%rcx)
    00000724: 	nopl	(%rax) # Size: 4
.Ltmp907:
    00000728: 	cmpb	$0x0, 0x2a(%rsp)
    0000072d: 	je	.Ltmp908 # Offset: 1837
    00000733: 	movsd	init_value(%rip), %xmm1
    0000073b: 	movq	0x18(%rsp), %rax
    00000740: 	unpcklpd	%xmm1, %xmm1
    00000744: 	cvttpd2dq	%xmm1, %xmm1
    00000748: 	punpcklqdq	%xmm1, %xmm1
    0000074c: 	movdqa	%xmm1, %xmm2
    00000750: 	punpckhwd	%xmm1, %xmm2
    00000754: 	nopl	(%rax) # Size: 4
.Ltmp909:
    00000758: 	movdqa	%xmm1, %xmm0
    0000075c: 	addq	$0x40, %rax
    00000760: 	punpcklwd	%xmm1, %xmm0
    00000764: 	movdqa	%xmm0, %xmm4
    00000768: 	punpcklwd	%xmm2, %xmm0
    0000076c: 	punpckhwd	%xmm2, %xmm4
    00000770: 	punpcklwd	%xmm4, %xmm0
    00000774: 	pand	%xmm3, %xmm0
    00000778: 	packuswb	%xmm0, %xmm0
    0000077c: 	movd	%xmm0, %edx
    00000780: 	movb	%dl, -0x40(%rax)
    00000783: 	movaps	%xmm0, 0x250(%rsp)
    0000078b: 	movzbl	0x251(%rsp), %edx
    00000793: 	movb	%dl, -0x3c(%rax)
    00000796: 	movaps	%xmm0, 0x240(%rsp)
    0000079e: 	movzbl	0x242(%rsp), %edx
    000007a6: 	movb	%dl, -0x38(%rax)
    000007a9: 	movaps	%xmm0, 0x230(%rsp)
    000007b1: 	movzbl	0x233(%rsp), %edx
    000007b9: 	movb	%dl, -0x34(%rax)
    000007bc: 	movaps	%xmm0, 0x220(%rsp)
    000007c4: 	movzbl	0x224(%rsp), %edx
    000007cc: 	movb	%dl, -0x30(%rax)
    000007cf: 	movaps	%xmm0, 0x210(%rsp)
    000007d7: 	movzbl	0x215(%rsp), %edx
    000007df: 	movb	%dl, -0x2c(%rax)
    000007e2: 	movaps	%xmm0, 0x200(%rsp)
    000007ea: 	movzbl	0x206(%rsp), %edx
    000007f2: 	movb	%dl, -0x28(%rax)
    000007f5: 	movaps	%xmm0, 0x1f0(%rsp)
    000007fd: 	movzbl	0x1f7(%rsp), %edx
    00000805: 	movb	%dl, -0x24(%rax)
    00000808: 	movaps	%xmm0, 0x1e0(%rsp)
    00000810: 	movzbl	0x1e8(%rsp), %edx
    00000818: 	movb	%dl, -0x20(%rax)
    0000081b: 	movaps	%xmm0, 0x1d0(%rsp)
    00000823: 	movzbl	0x1d9(%rsp), %edx
    0000082b: 	movb	%dl, -0x1c(%rax)
    0000082e: 	movaps	%xmm0, 0x1c0(%rsp)
    00000836: 	movzbl	0x1ca(%rsp), %edx
    0000083e: 	movb	%dl, -0x18(%rax)
    00000841: 	movaps	%xmm0, 0x1b0(%rsp)
    00000849: 	movzbl	0x1bb(%rsp), %edx
    00000851: 	movb	%dl, -0x14(%rax)
    00000854: 	movaps	%xmm0, 0x1a0(%rsp)
    0000085c: 	movzbl	0x1ac(%rsp), %edx
    00000864: 	movb	%dl, -0x10(%rax)
    00000867: 	movaps	%xmm0, 0x190(%rsp)
    0000086f: 	movzbl	0x19d(%rsp), %edx
    00000877: 	movb	%dl, -0xc(%rax)
    0000087a: 	movaps	%xmm0, 0x180(%rsp)
    00000882: 	movzbl	0x18e(%rsp), %edx
    0000088a: 	movb	%dl, -0x8(%rax)
    0000088d: 	movaps	%xmm0, 0x170(%rsp)
    00000895: 	movzbl	0x17f(%rsp), %edx
    0000089d: 	movb	%dl, -0x4(%rax)
    000008a0: 	cmpq	%rax, %rbx
    000008a3: 	jne	.Ltmp909 # Offset: 2211
    000008a9: 	movl	0x4(%rsp), %esi
    000008ad: 	cmpl	%esi, (%rsp)
    000008b0: 	je	.Ltmp910 # Offset: 2224
    000008b6: 	cvttsd2si	init_value(%rip), %eax
    000008be: 	movq	0x30(%rsp), %rsi
    000008c3: 	movb	%al, (%rsi)
    000008c5: 	cmpl	0x8(%rsp), %r12d
    000008ca: 	jle	.Ltmp910 # Offset: 2250
    000008d0: 	cvttsd2si	init_value(%rip), %eax
    000008d8: 	movq	0x48(%rsp), %rsi
    000008dd: 	movb	%al, (%rsi)
    000008df: 	cmpl	0xc(%rsp), %r12d
    000008e4: 	jle	.Ltmp910 # Offset: 2276
    000008ea: 	cvttsd2si	init_value(%rip), %eax
    000008f2: 	movq	0x60(%rsp), %rcx
    000008f7: 	movb	%al, (%rcx)
    000008f9: 	cmpl	0x10(%rsp), %r12d
    000008fe: 	jle	.Ltmp910 # Offset: 2302
    00000904: 	cvttsd2si	init_value(%rip), %eax
    0000090c: 	movq	0x70(%rsp), %rcx
    00000911: 	movb	%al, (%rcx)
    00000913: 	cmpl	0x14(%rsp), %r12d
    00000918: 	jle	.Ltmp910 # Offset: 2328
    0000091e: 	cvttsd2si	init_value(%rip), %eax
    00000926: 	movq	0x88(%rsp), %rcx
    0000092e: 	movb	%al, (%rcx)
    00000930: 	cmpl	0x2c(%rsp), %r12d
    00000935: 	jle	.Ltmp910 # Offset: 2357
    0000093b: 	cvttsd2si	init_value(%rip), %eax
    00000943: 	movq	0x98(%rsp), %rcx
    0000094b: 	movb	%al, (%rcx)
    0000094d: 	cmpl	0x40(%rsp), %r12d
    00000952: 	jle	.Ltmp910 # Offset: 2386
    00000958: 	cvttsd2si	init_value(%rip), %eax
    00000960: 	movq	0xb0(%rsp), %rcx
    00000968: 	movb	%al, (%rcx)
    0000096a: 	cmpl	0x44(%rsp), %r12d
    0000096f: 	jle	.Ltmp910 # Offset: 2415
    00000975: 	cvttsd2si	init_value(%rip), %eax
    0000097d: 	movq	0xc0(%rsp), %rcx
    00000985: 	movb	%al, (%rcx)
    00000987: 	cmpl	0x5c(%rsp), %r12d
    0000098c: 	jle	.Ltmp910 # Offset: 2444
    00000992: 	cvttsd2si	init_value(%rip), %eax
    0000099a: 	movq	0xd8(%rsp), %rcx
    000009a2: 	movb	%al, (%rcx)
    000009a4: 	cmpl	0x80(%rsp), %r12d
    000009ac: 	jle	.Ltmp910 # Offset: 2476
    000009b2: 	cvttsd2si	init_value(%rip), %eax
    000009ba: 	movq	0xe8(%rsp), %rcx
    000009c2: 	movb	%al, (%rcx)
    000009c4: 	cmpl	0x84(%rsp), %r12d
    000009cc: 	jle	.Ltmp910 # Offset: 2508
    000009d2: 	cvttsd2si	init_value(%rip), %eax
    000009da: 	movq	0x100(%rsp), %rcx
    000009e2: 	movb	%al, (%rcx)
    000009e4: 	cmpl	0xa8(%rsp), %r12d
    000009ec: 	jle	.Ltmp910 # Offset: 2540
    000009ee: 	cvttsd2si	init_value(%rip), %eax
    000009f6: 	movq	0x110(%rsp), %rcx
    000009fe: 	movb	%al, (%rcx)
    00000a00: 	cmpl	0xac(%rsp), %r12d
    00000a08: 	jle	.Ltmp910 # Offset: 2568
    00000a0a: 	cvttsd2si	init_value(%rip), %eax
    00000a12: 	movq	0x130(%rsp), %rsi
    00000a1a: 	movb	%al, (%rsi)
    00000a1c: 	cmpl	0xd0(%rsp), %r12d
    00000a24: 	jle	.Ltmp910 # Offset: 2596
    00000a26: 	cvttsd2si	init_value(%rip), %eax
    00000a2e: 	movq	0x140(%rsp), %rsi
    00000a36: 	movb	%al, (%rsi)
    00000a38: 	cmpl	0xd4(%rsp), %r12d
    00000a40: 	jle	.Ltmp910 # Offset: 2624
    00000a42: 	cvttsd2si	init_value(%rip), %eax
    00000a4a: 	movq	0x150(%rsp), %rsi
    00000a52: 	movb	%al, (%rsi)
    00000a54: 	nopl	(%rax) # Size: 4
.Ltmp910:
    00000a58: 	leaq	0x3(%rdi), %rax
    00000a5c: 	nopl	(%rax) # Size: 4
.Ltmp911:
    00000a60: 	movb	$0x1, (%rax)
    00000a63: 	addq	$0x4, %rax
    00000a67: 	cmpq	%r13, %rax
    00000a6a: 	jne	.Ltmp911 # Offset: 2666
.Ltmp904:
    00000a6c: 	addl	$0x1, %r15d
    00000a70: 	cmpl	%r15d, iterations(%rip)
    00000a77: 	jg	.Ltmp912 # Offset: 2679
    00000a7d: 	movq	%rdi, %r14
.Ltmp903:
    00000a80: 	callq	clock@PLT # Offset: 2688
    00000a85: 	movq	0xf8(%rsp), %rdi
    00000a8d: 	pxor	%xmm0, %xmm0
    00000a91: 	xorl	%ebx, %ebx
    00000a93: 	movq	%rax, end_time(%rip)
    00000a9a: 	subq	start_time(%rip), %rax
    00000aa1: 	cvtsi2sd	%rax, %xmm0
    00000aa6: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000aae: 	callq	_Z13record_resultdPKc # Offset: 2734
    00000ab3: 	movl	0x58(%rsp), %eax
    00000ab7: 	testl	%eax, %eax
    00000ab9: 	jle	.Ltmp913 # Offset: 2745
    00000abf: 	movl	0x58(%rsp), %ebx
    00000ac3: 	leal	-0x1(%rbx), %eax
    00000ac6: 	cmpl	$0xe, %eax
    00000ac9: 	jbe	.Ltmp914 # Offset: 2761
    00000acf: 	shrl	$0x4, %ebx
    00000ad2: 	movq	%r14, %rax
    00000ad5: 	pxor	%xmm0, %xmm0
    00000ad9: 	movl	%ebx, %edx
    00000adb: 	subl	$0x1, %edx
    00000ade: 	shlq	$0x4, %rdx
    00000ae2: 	leaq	0x10(%r14,%rdx), %rdx
    00000ae7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp915:
    00000af0: 	movdqu	(%rax), %xmm5
    00000af4: 	addq	$0x10, %rax
    00000af8: 	paddb	%xmm5, %xmm0
    00000afc: 	cmpq	%rdx, %rax
    00000aff: 	jne	.Ltmp915 # Offset: 2815
    00000b01: 	movdqa	%xmm0, %xmm1
    00000b05: 	movl	0x58(%rsp), %edi
    00000b09: 	psrldq	$0x8, %xmm1
    00000b0e: 	paddb	%xmm1, %xmm0
    00000b12: 	movl	%edi, %edx
    00000b14: 	pxor	%xmm1, %xmm1
    00000b18: 	psadbw	%xmm1, %xmm0
    00000b1c: 	andl	$-0x10, %edx
    00000b1f: 	movd	%xmm0, %ebx
    00000b23: 	movl	%edx, %eax
    00000b25: 	cmpl	%edi, %edx
    00000b27: 	je	.Ltmp913 # Offset: 2855
.Ltmp923:
    00000b2d: 	movl	0x58(%rsp), %ecx
    00000b31: 	subl	%edx, %ecx
    00000b33: 	leal	-0x1(%rcx), %esi
    00000b36: 	cmpl	$0x6, %esi
    00000b39: 	jbe	.Ltmp916 # Offset: 2873
    00000b3b: 	movq	(%r14,%rdx), %xmm1
    00000b41: 	pxor	%xmm0, %xmm0
    00000b45: 	movdqa	%xmm1, %xmm6
    00000b49: 	psadbw	%xmm0, %xmm6
    00000b4d: 	movq	%xmm6, 0x168(%rsp)
    00000b56: 	movq	%xmm6, %rdx
    00000b5b: 	movl	%edx, %esi
    00000b5d: 	movl	%ecx, %edx
    00000b5f: 	andl	$-0x8, %edx
    00000b62: 	addl	%esi, %ebx
    00000b64: 	addl	%edx, %eax
    00000b66: 	cmpl	%edx, %ecx
    00000b68: 	je	.Ltmp913 # Offset: 2920
.Ltmp916:
    00000b6a: 	movslq	%eax, %rdx
    00000b6d: 	movl	0x58(%rsp), %esi
    00000b71: 	addb	(%r14,%rdx), %bl
    00000b75: 	leal	0x1(%rax), %edx
    00000b78: 	cmpl	%edx, %esi
    00000b7a: 	jle	.Ltmp913 # Offset: 2938
    00000b7c: 	movslq	%edx, %rdx
    00000b7f: 	addb	(%r14,%rdx), %bl
    00000b83: 	leal	0x2(%rax), %edx
    00000b86: 	cmpl	%edx, %esi
    00000b88: 	jle	.Ltmp913 # Offset: 2952
    00000b8a: 	movslq	%edx, %rdx
    00000b8d: 	addb	(%r14,%rdx), %bl
    00000b91: 	leal	0x3(%rax), %edx
    00000b94: 	cmpl	%edx, %esi
    00000b96: 	jle	.Ltmp913 # Offset: 2966
    00000b98: 	movslq	%edx, %rdx
    00000b9b: 	addb	(%r14,%rdx), %bl
    00000b9f: 	leal	0x4(%rax), %edx
    00000ba2: 	cmpl	%esi, %edx
    00000ba4: 	jge	.Ltmp913 # Offset: 2980
    00000ba6: 	movslq	%edx, %rdx
    00000ba9: 	addb	(%r14,%rdx), %bl
    00000bad: 	leal	0x5(%rax), %edx
    00000bb0: 	cmpl	%edx, %esi
    00000bb2: 	jle	.Ltmp913 # Offset: 2994
    00000bb4: 	movslq	%edx, %rdx
    00000bb7: 	addl	$0x6, %eax
    00000bba: 	addb	(%r14,%rdx), %bl
    00000bbe: 	cmpl	%eax, %esi
    00000bc0: 	jle	.Ltmp913 # Offset: 3008
    00000bc2: 	cltq
    00000bc4: 	addb	(%r14,%rax), %bl
.Ltmp913:
    00000bc8: 	movsd	init_value(%rip), %xmm0
    00000bd0: 	addsd	%xmm0, %xmm0
    00000bd4: 	addsd	DATAat0x36fb0(%rip), %xmm0
    00000bdc: 	cvttsd2si	%xmm0, %ebp
    00000be0: 	shll	$0x7, %ebp
    00000be3: 	cmpb	%bl, %bpl
    00000be6: 	jne	.Ltmp917 # Offset: 3046
    00000bec: 	movq	0x358(%rsp), %rax
    00000bf4: 	subq	%fs:0x28, %rax
    00000bfd: 	jne	.Ltmp918 # Offset: 3069
    00000c03: 	addq	$0x368, %rsp
    00000c0a: 	popq	%rbx
    00000c0b: 	popq	%rbp
    00000c0c: 	popq	%r12
    00000c0e: 	popq	%r13
    00000c10: 	popq	%r14
    00000c12: 	popq	%r15
    00000c14: 	retq # Offset: 3092
    00000c15: 	nopl	(%rax) # Size: 3
.Ltmp908:
    00000c18: 	movq	0x18(%rsp), %rax
    00000c1d: 	movq	0x128(%rsp), %rcx
    00000c25: 	nopl	(%rax) # Size: 3
.Ltmp919:
    00000c28: 	cvttsd2si	init_value(%rip), %edx
    00000c30: 	addq	$0x4, %rax
    00000c34: 	movb	%dl, -0x4(%rax)
    00000c37: 	cmpq	%rcx, %rax
    00000c3a: 	jne	.Ltmp919 # Offset: 3130
    00000c3c: 	jmp	.Ltmp910 # Offset: 3132
    00000c41: 	nopl	(%rax) # Size: 7
.Ltmp905:
    00000c48: 	movq	0x20(%rsp), %rax
    00000c4d: 	movq	0x120(%rsp), %rcx
    00000c55: 	nopl	(%rax) # Size: 3
.Ltmp920:
    00000c58: 	cvttsd2si	init_value(%rip), %edx
    00000c60: 	addq	$0x4, %rax
    00000c64: 	movb	%dl, -0x4(%rax)
    00000c67: 	cmpq	%rcx, %rax
    00000c6a: 	jne	.Ltmp920 # Offset: 3178
    00000c6c: 	jmp	.Ltmp907 # Offset: 3180
.Ltmp917:
    00000c71: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c78: 	movl	$0x5, %edx
    00000c7d: 	leaq	DATAat0x35004(%rip), %rsi
    00000c84: 	movq	%r12, %rdi
    00000c87: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3207
    00000c8c: 	cmpq	$0x0, 0xf8(%rsp)
    00000c95: 	je	.Ltmp921 # Offset: 3221
    00000c9b: 	movq	0xf8(%rsp), %r15
    00000ca3: 	movq	%r15, %rdi
    00000ca6: 	callq	strlen@PLT # Offset: 3238
    00000cab: 	movq	%r15, %rsi
    00000cae: 	movq	%r12, %rdi
    00000cb1: 	movq	%rax, %rdx
    00000cb4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3252
.Ltmp922:
    00000cb9: 	movq	%r12, %rdi
    00000cbc: 	movl	$0xd, %edx
    00000cc1: 	leaq	DATAat0x3500a(%rip), %rsi
    00000cc8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3272
    00000ccd: 	leaq	0x357(%rsp), %r13
    00000cd5: 	movq	%r12, %rdi
    00000cd8: 	movl	$0x1, %edx
    00000cdd: 	movq	%r13, %rsi
    00000ce0: 	movb	%bl, 0x357(%rsp)
    00000ce7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3303
    00000cec: 	movl	$0xb, %edx
    00000cf1: 	leaq	DATAat0x35018(%rip), %rsi
    00000cf8: 	movq	%rax, %r12
    00000cfb: 	movq	%rax, %rdi
    00000cfe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3326
    00000d03: 	movq	%r12, %rdi
    00000d06: 	movl	$0x1, %edx
    00000d0b: 	movq	%r13, %rsi
    00000d0e: 	movb	%bpl, 0x357(%rsp)
    00000d16: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3350
    00000d1b: 	movq	%rax, %rdi
    00000d1e: 	movq	0x358(%rsp), %rax
    00000d26: 	subq	%fs:0x28, %rax
    00000d2f: 	jne	.Ltmp918 # Offset: 3375
    00000d31: 	addq	$0x368, %rsp
    00000d38: 	popq	%rbx
    00000d39: 	popq	%rbp
    00000d3a: 	popq	%r12
    00000d3c: 	popq	%r13
    00000d3e: 	popq	%r14
    00000d40: 	popq	%r15
    00000d42: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3394
.Ltmp921:
    00000d47: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000d4e: 	movq	-0x18(%rax), %rdi
    00000d52: 	addq	%r12, %rdi
    00000d55: 	movl	0x20(%rdi), %esi
    00000d58: 	orl	$0x1, %esi
    00000d5b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3419
    00000d60: 	jmp	.Ltmp922 # Offset: 3424
.Ltmp914:
    00000d65: 	xorl	%edx, %edx
    00000d67: 	xorl	%ebx, %ebx
    00000d69: 	xorl	%eax, %eax
    00000d6b: 	jmp	.Ltmp923 # Offset: 3435
.Ltmp918:
    00000d70: 	callq	__stack_chk_fail@PLT # Offset: 3440
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_memset_overwrite4IhEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite4IhEvPT_iPKc" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x1a370
  Size        : 0xd5c
  MaxSize     : 0xd60
  Offset      : 0x1a370
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x368, %rsp
    0000001b: 	movq	%rdx, 0x108(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x358(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movl	iterations(%rip), %edx
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	testl	%edx, %edx
    0000004a: 	jle	.Ltmp924 # Offset: 74
    00000050: 	leal	-0x4(%r14), %edx
    00000054: 	leaq	init_value(%rip), %r10
    0000005b: 	cmpl	$0x3b, %edx
    0000005e: 	leaq	0x1(%r15), %rsi
    00000062: 	leaq	0x8(%r10), %r8
    00000066: 	seta	%dil
    0000006a: 	shrl	$0x2, %edx
    0000006d: 	movq	%rsi, 0x30(%rsp)
    00000072: 	leal	-0x3(%r14), %ebx
    00000076: 	leal	0x1(%rdx), %eax
    00000079: 	leaq	-0x4(,%rax,4), %rbp
    00000081: 	movq	%rax, %rcx
    00000084: 	movl	%eax, 0xc(%rsp)
    00000088: 	leaq	0x2(%r15,%rbp), %rax
    0000008d: 	leaq	0x3(%r15,%rbp), %rbp
    00000092: 	cmpq	%r10, %rax
    00000095: 	setbe	%al
    00000098: 	cmpq	%r8, %rsi
    0000009b: 	setae	%sil
    0000009f: 	shlq	$0x2, %rdx
    000000a3: 	orl	%esi, %eax
    000000a5: 	andl	%edi, %eax
    000000a7: 	movb	%al, 0x3b(%rsp)
    000000ab: 	movl	%ecx, %eax
    000000ad: 	andl	$-0x10, %ecx
    000000b0: 	shrl	$0x4, %eax
    000000b3: 	movl	%ecx, 0x10(%rsp)
    000000b7: 	leal	-0x1(%rax), %esi
    000000ba: 	leal	(,%rcx,4), %eax
    000000c1: 	leal	0x1(%rax), %r13d
    000000c5: 	shlq	$0x6, %rsi
    000000c9: 	cmpq	%r10, %rbp
    000000cc: 	movslq	%r13d, %r13
    000000cf: 	setbe	%r10b
    000000d3: 	leaq	0x41(%r15,%rsi), %r9
    000000d8: 	leaq	(%r15,%r13), %rcx
    000000dc: 	leal	0x5(%rax), %r13d
    000000e0: 	movq	%rcx, 0x50(%rsp)
    000000e5: 	movslq	%r13d, %r13
    000000e8: 	leal	0x4(%rax), %ecx
    000000eb: 	leaq	0x42(%r15,%rsi), %r12
    000000f0: 	movl	%ecx, 0x14(%rsp)
    000000f4: 	leaq	(%r15,%r13), %rcx
    000000f8: 	leal	0x9(%rax), %r13d
    000000fc: 	movq	%rcx, 0x60(%rsp)
    00000101: 	movslq	%r13d, %r13
    00000104: 	leal	0x8(%rax), %ecx
    00000107: 	leal	0x2(%rax), %esi
    0000010a: 	movl	%ecx, 0x18(%rsp)
    0000010e: 	leaq	(%r15,%r13), %rcx
    00000112: 	leal	0xd(%rax), %r13d
    00000116: 	movslq	%esi, %rsi
    00000119: 	movq	%rcx, 0x78(%rsp)
    0000011e: 	movslq	%r13d, %r13
    00000121: 	leal	0xc(%rax), %ecx
    00000124: 	leaq	0x7(%r15,%rdx), %rbp
    00000129: 	movl	%ecx, 0x20(%rsp)
    0000012d: 	leaq	(%r15,%r13), %rcx
    00000131: 	leal	0x11(%rax), %r13d
    00000135: 	movq	%rcx, 0x88(%rsp)
    0000013d: 	movslq	%r13d, %r13
    00000140: 	leal	0x10(%rax), %ecx
    00000143: 	movl	%ecx, 0x24(%rsp)
    00000147: 	leaq	(%r15,%r13), %rcx
    0000014b: 	leal	0x15(%rax), %r13d
    0000014f: 	movq	%rcx, 0xa0(%rsp)
    00000157: 	movslq	%r13d, %r13
    0000015a: 	leal	0x14(%rax), %ecx
    0000015d: 	movl	%ecx, 0x40(%rsp)
    00000161: 	leaq	(%r15,%r13), %rcx
    00000165: 	leal	0x19(%rax), %r13d
    00000169: 	movq	%rcx, 0xb0(%rsp)
    00000171: 	movslq	%r13d, %r13
    00000174: 	leal	0x18(%rax), %ecx
    00000177: 	movl	%ecx, 0x44(%rsp)
    0000017b: 	leaq	(%r15,%r13), %rcx
    0000017f: 	leal	0x1d(%rax), %r13d
    00000183: 	movq	%rcx, 0xc8(%rsp)
    0000018b: 	movslq	%r13d, %r13
    0000018e: 	leal	0x1c(%rax), %ecx
    00000191: 	movl	%ecx, 0x68(%rsp)
    00000195: 	leaq	(%r15,%r13), %rcx
    00000199: 	leal	0x21(%rax), %r13d
    0000019d: 	movq	%rcx, 0xd8(%rsp)
    000001a5: 	movslq	%r13d, %r13
    000001a8: 	leal	0x20(%rax), %ecx
    000001ab: 	movl	%ecx, 0x6c(%rsp)
    000001af: 	leaq	(%r15,%r13), %rcx
    000001b3: 	leal	0x25(%rax), %r13d
    000001b7: 	movq	%rcx, 0xf0(%rsp)
    000001bf: 	movslq	%r13d, %r13
    000001c2: 	leal	0x24(%rax), %ecx
    000001c5: 	movl	%ecx, 0x90(%rsp)
    000001cc: 	leaq	(%r15,%r13), %rcx
    000001d0: 	leal	0x29(%rax), %r13d
    000001d4: 	movq	%rcx, 0x100(%rsp)
    000001dc: 	movslq	%r13d, %r13
    000001df: 	leal	0x28(%rax), %ecx
    000001e2: 	movl	%ecx, 0x94(%rsp)
    000001e9: 	leaq	(%r15,%r13), %rcx
    000001ed: 	leal	0x2d(%rax), %r13d
    000001f1: 	movq	%rcx, 0x118(%rsp)
    000001f9: 	movslq	%r13d, %r13
    000001fc: 	leal	0x2c(%rax), %ecx
    000001ff: 	movl	%ecx, 0xb8(%rsp)
    00000206: 	leaq	(%r15,%r13), %rcx
    0000020a: 	leal	0x31(%rax), %r13d
    0000020e: 	movq	%rcx, 0x128(%rsp)
    00000216: 	movslq	%r13d, %r13
    00000219: 	leal	0x30(%rax), %ecx
    0000021c: 	movl	%ecx, 0xbc(%rsp)
    00000223: 	leaq	(%r15,%r13), %rcx
    00000227: 	leal	0x35(%rax), %r13d
    0000022b: 	movq	%rcx, 0x140(%rsp)
    00000233: 	movslq	%r13d, %r13
    00000236: 	leal	0x34(%rax), %ecx
    00000239: 	movl	%ecx, 0xe0(%rsp)
    00000240: 	leaq	(%r15,%r13), %rcx
    00000244: 	leal	0x39(%rax), %r13d
    00000248: 	movq	%rcx, 0x150(%rsp)
    00000250: 	movslq	%r13d, %r13
    00000253: 	leal	0x38(%rax), %ecx
    00000256: 	movl	%ecx, 0xe4(%rsp)
    0000025d: 	leaq	(%r15,%r13), %rcx
    00000261: 	movq	%rcx, 0x160(%rsp)
    00000269: 	leaq	0x5(%r15,%rdx), %rcx
    0000026e: 	movdqa	DATAat0x36f20(%rip), %xmm3
    00000276: 	movq	%rcx, 0x130(%rsp)
    0000027e: 	leaq	0x2(%r15), %rcx
    00000282: 	cmpq	%r8, %rcx
    00000285: 	movq	%rcx, 0x28(%rsp)
    0000028a: 	setae	%r8b
    0000028e: 	xorl	%r13d, %r13d
    00000291: 	movl	%r14d, 0x1c(%rsp)
    00000296: 	orl	%r8d, %r10d
    00000299: 	andl	%edi, %r10d
    0000029c: 	leaq	(%r15,%rsi), %rdi
    000002a0: 	leal	0x6(%rax), %esi
    000002a3: 	movslq	%esi, %rsi
    000002a6: 	movq	%rdi, 0x48(%rsp)
    000002ab: 	leaq	(%r15,%rsi), %rdi
    000002af: 	leal	0xa(%rax), %esi
    000002b2: 	movb	%r10b, 0x3a(%rsp)
    000002b7: 	movslq	%esi, %rsi
    000002ba: 	movq	%rdi, 0x58(%rsp)
    000002bf: 	leaq	(%r15,%rsi), %rdi
    000002c3: 	leal	0xe(%rax), %esi
    000002c6: 	movslq	%esi, %rsi
    000002c9: 	movq	%rdi, 0x70(%rsp)
    000002ce: 	leaq	(%r15,%rsi), %rdi
    000002d2: 	leal	0x12(%rax), %esi
    000002d5: 	movslq	%esi, %rsi
    000002d8: 	movq	%rdi, 0x80(%rsp)
    000002e0: 	leaq	(%r15,%rsi), %rdi
    000002e4: 	leal	0x16(%rax), %esi
    000002e7: 	movslq	%esi, %rsi
    000002ea: 	movq	%rdi, 0x98(%rsp)
    000002f2: 	leaq	(%r15,%rsi), %rdi
    000002f6: 	leal	0x1a(%rax), %esi
    000002f9: 	movslq	%esi, %rsi
    000002fc: 	movq	%rdi, 0xa8(%rsp)
    00000304: 	leaq	(%r15,%rsi), %rdi
    00000308: 	leal	0x1e(%rax), %esi
    0000030b: 	movslq	%esi, %rsi
    0000030e: 	movq	%rdi, 0xc0(%rsp)
    00000316: 	leaq	(%r15,%rsi), %rdi
    0000031a: 	leal	0x22(%rax), %esi
    0000031d: 	movslq	%esi, %rsi
    00000320: 	movq	%rdi, 0xd0(%rsp)
    00000328: 	leaq	(%r15,%rsi), %rdi
    0000032c: 	leal	0x26(%rax), %esi
    0000032f: 	movslq	%esi, %rsi
    00000332: 	movq	%rdi, 0xe8(%rsp)
    0000033a: 	leaq	(%r15,%rsi), %rdi
    0000033e: 	leal	0x2a(%rax), %esi
    00000341: 	movslq	%esi, %rsi
    00000344: 	movq	%rdi, 0xf8(%rsp)
    0000034c: 	leaq	(%r15,%rsi), %rdi
    00000350: 	leal	0x2e(%rax), %esi
    00000353: 	movslq	%esi, %rsi
    00000356: 	movq	%rdi, 0x110(%rsp)
    0000035e: 	leaq	(%r15,%rsi), %rdi
    00000362: 	leal	0x32(%rax), %esi
    00000365: 	movslq	%esi, %rsi
    00000368: 	movq	%rdi, 0x120(%rsp)
    00000370: 	leaq	(%r15,%rsi), %rdi
    00000374: 	leal	0x36(%rax), %esi
    00000377: 	addl	$0x3a, %eax
    0000037a: 	movslq	%esi, %rsi
    0000037d: 	cltq
    0000037f: 	movq	%rdi, 0x138(%rsp)
    00000387: 	leal	-0x1(%r14), %edi
    0000038b: 	addq	%r15, %rsi
    0000038e: 	addq	%r15, %rax
    00000391: 	movl	%edi, 0x3c(%rsp)
    00000395: 	movl	%r13d, %r14d
    00000398: 	movq	%rsi, 0x148(%rsp)
    000003a0: 	movq	%r15, %rdi
    000003a3: 	movq	%rbp, %r13
    000003a6: 	movq	%rax, 0x158(%rsp)
    000003ae: 	leaq	0x6(%r15,%rdx), %rax
    000003b3: 	movq	%r12, %r15
    000003b6: 	movl	%ebx, %r12d
    000003b9: 	movq	%rax, %rbp
    000003bc: 	movq	%r9, %rbx
    000003bf: 	nop # Size: 1
.Ltmp934:
    000003c0: 	movl	0x1c(%rsp), %eax
    000003c4: 	testl	%eax, %eax
    000003c6: 	jle	.Ltmp925 # Offset: 966
    000003c8: 	movl	0x3c(%rsp), %edx
    000003cc: 	xorl	%esi, %esi
    000003ce: 	addq	$0x1, %rdx
    000003d2: 	callq	memset@PLT # Offset: 978
    000003d7: 	movdqa	DATAat0x36f20(%rip), %xmm3
    000003df: 	movq	%rax, %rdi
.Ltmp925:
    000003e2: 	testl	%r12d, %r12d
    000003e5: 	jle	.Ltmp926 # Offset: 997
    000003eb: 	cmpb	$0x0, 0x3b(%rsp)
    000003f0: 	je	.Ltmp927 # Offset: 1008
    000003f6: 	movsd	init_value(%rip), %xmm1
    000003fe: 	movq	0x30(%rsp), %rax
    00000403: 	unpcklpd	%xmm1, %xmm1
    00000407: 	cvttpd2dq	%xmm1, %xmm1
    0000040b: 	punpcklqdq	%xmm1, %xmm1
    0000040f: 	movdqa	%xmm1, %xmm2
    00000413: 	punpckhwd	%xmm1, %xmm2
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp928:
    00000420: 	movdqa	%xmm1, %xmm0
    00000424: 	addq	$0x40, %rax
    00000428: 	punpcklwd	%xmm1, %xmm0
    0000042c: 	movdqa	%xmm0, %xmm4
    00000430: 	punpcklwd	%xmm2, %xmm0
    00000434: 	punpckhwd	%xmm2, %xmm4
    00000438: 	punpcklwd	%xmm4, %xmm0
    0000043c: 	pand	%xmm3, %xmm0
    00000440: 	packuswb	%xmm0, %xmm0
    00000444: 	movd	%xmm0, %edx
    00000448: 	movb	%dl, -0x40(%rax)
    0000044b: 	movaps	%xmm0, 0x340(%rsp)
    00000453: 	movzbl	0x341(%rsp), %edx
    0000045b: 	movb	%dl, -0x3c(%rax)
    0000045e: 	movaps	%xmm0, 0x330(%rsp)
    00000466: 	movzbl	0x332(%rsp), %edx
    0000046e: 	movb	%dl, -0x38(%rax)
    00000471: 	movaps	%xmm0, 0x320(%rsp)
    00000479: 	movzbl	0x323(%rsp), %edx
    00000481: 	movb	%dl, -0x34(%rax)
    00000484: 	movaps	%xmm0, 0x310(%rsp)
    0000048c: 	movzbl	0x314(%rsp), %edx
    00000494: 	movb	%dl, -0x30(%rax)
    00000497: 	movaps	%xmm0, 0x300(%rsp)
    0000049f: 	movzbl	0x305(%rsp), %edx
    000004a7: 	movb	%dl, -0x2c(%rax)
    000004aa: 	movaps	%xmm0, 0x2f0(%rsp)
    000004b2: 	movzbl	0x2f6(%rsp), %edx
    000004ba: 	movb	%dl, -0x28(%rax)
    000004bd: 	movaps	%xmm0, 0x2e0(%rsp)
    000004c5: 	movzbl	0x2e7(%rsp), %edx
    000004cd: 	movb	%dl, -0x24(%rax)
    000004d0: 	movaps	%xmm0, 0x2d0(%rsp)
    000004d8: 	movzbl	0x2d8(%rsp), %edx
    000004e0: 	movb	%dl, -0x20(%rax)
    000004e3: 	movaps	%xmm0, 0x2c0(%rsp)
    000004eb: 	movzbl	0x2c9(%rsp), %edx
    000004f3: 	movb	%dl, -0x1c(%rax)
    000004f6: 	movaps	%xmm0, 0x2b0(%rsp)
    000004fe: 	movzbl	0x2ba(%rsp), %edx
    00000506: 	movb	%dl, -0x18(%rax)
    00000509: 	movaps	%xmm0, 0x2a0(%rsp)
    00000511: 	movzbl	0x2ab(%rsp), %edx
    00000519: 	movb	%dl, -0x14(%rax)
    0000051c: 	movaps	%xmm0, 0x290(%rsp)
    00000524: 	movzbl	0x29c(%rsp), %edx
    0000052c: 	movb	%dl, -0x10(%rax)
    0000052f: 	movaps	%xmm0, 0x280(%rsp)
    00000537: 	movzbl	0x28d(%rsp), %edx
    0000053f: 	movb	%dl, -0xc(%rax)
    00000542: 	movaps	%xmm0, 0x270(%rsp)
    0000054a: 	movzbl	0x27e(%rsp), %edx
    00000552: 	movb	%dl, -0x8(%rax)
    00000555: 	movaps	%xmm0, 0x260(%rsp)
    0000055d: 	movzbl	0x26f(%rsp), %edx
    00000565: 	movb	%dl, -0x4(%rax)
    00000568: 	cmpq	%rbx, %rax
    0000056b: 	jne	.Ltmp928 # Offset: 1387
    00000571: 	movl	0x10(%rsp), %ecx
    00000575: 	cmpl	%ecx, 0xc(%rsp)
    00000579: 	je	.Ltmp929 # Offset: 1401
    0000057f: 	cvttsd2si	init_value(%rip), %eax
    00000587: 	movq	0x50(%rsp), %rcx
    0000058c: 	movb	%al, (%rcx)
    0000058e: 	cmpl	0x14(%rsp), %r12d
    00000593: 	jle	.Ltmp929 # Offset: 1427
    00000599: 	cvttsd2si	init_value(%rip), %eax
    000005a1: 	movq	0x60(%rsp), %rcx
    000005a6: 	movb	%al, (%rcx)
    000005a8: 	cmpl	0x18(%rsp), %r12d
    000005ad: 	jle	.Ltmp929 # Offset: 1453
    000005b3: 	cvttsd2si	init_value(%rip), %eax
    000005bb: 	movq	0x78(%rsp), %rsi
    000005c0: 	movb	%al, (%rsi)
    000005c2: 	cmpl	0x20(%rsp), %r12d
    000005c7: 	jle	.Ltmp929 # Offset: 1479
    000005cd: 	cvttsd2si	init_value(%rip), %eax
    000005d5: 	movq	0x88(%rsp), %rsi
    000005dd: 	movb	%al, (%rsi)
    000005df: 	cmpl	0x24(%rsp), %r12d
    000005e4: 	jle	.Ltmp929 # Offset: 1508
    000005ea: 	cvttsd2si	init_value(%rip), %eax
    000005f2: 	movq	0xa0(%rsp), %rsi
    000005fa: 	movb	%al, (%rsi)
    000005fc: 	cmpl	0x40(%rsp), %r12d
    00000601: 	jle	.Ltmp929 # Offset: 1537
    00000607: 	cvttsd2si	init_value(%rip), %eax
    0000060f: 	movq	0xb0(%rsp), %rsi
    00000617: 	movb	%al, (%rsi)
    00000619: 	cmpl	0x44(%rsp), %r12d
    0000061e: 	jle	.Ltmp929 # Offset: 1566
    00000624: 	cvttsd2si	init_value(%rip), %eax
    0000062c: 	movq	0xc8(%rsp), %rcx
    00000634: 	movb	%al, (%rcx)
    00000636: 	cmpl	0x68(%rsp), %r12d
    0000063b: 	jle	.Ltmp929 # Offset: 1595
    00000641: 	cvttsd2si	init_value(%rip), %eax
    00000649: 	movq	0xd8(%rsp), %rcx
    00000651: 	movb	%al, (%rcx)
    00000653: 	cmpl	0x6c(%rsp), %r12d
    00000658: 	jle	.Ltmp929 # Offset: 1624
    0000065e: 	cvttsd2si	init_value(%rip), %eax
    00000666: 	movq	0xf0(%rsp), %rsi
    0000066e: 	movb	%al, (%rsi)
    00000670: 	cmpl	0x90(%rsp), %r12d
    00000678: 	jle	.Ltmp929 # Offset: 1656
    0000067e: 	cvttsd2si	init_value(%rip), %eax
    00000686: 	movq	0x100(%rsp), %rcx
    0000068e: 	movb	%al, (%rcx)
    00000690: 	cmpl	0x94(%rsp), %r12d
    00000698: 	jle	.Ltmp929 # Offset: 1688
    0000069e: 	cvttsd2si	init_value(%rip), %eax
    000006a6: 	movq	0x118(%rsp), %rcx
    000006ae: 	movb	%al, (%rcx)
    000006b0: 	cmpl	0xb8(%rsp), %r12d
    000006b8: 	jle	.Ltmp929 # Offset: 1720
    000006ba: 	cvttsd2si	init_value(%rip), %eax
    000006c2: 	movq	0x128(%rsp), %rsi
    000006ca: 	movb	%al, (%rsi)
    000006cc: 	cmpl	0xbc(%rsp), %r12d
    000006d4: 	jle	.Ltmp929 # Offset: 1748
    000006d6: 	cvttsd2si	init_value(%rip), %eax
    000006de: 	movq	0x140(%rsp), %rsi
    000006e6: 	movb	%al, (%rsi)
    000006e8: 	cmpl	0xe0(%rsp), %r12d
    000006f0: 	jle	.Ltmp929 # Offset: 1776
    000006f2: 	cvttsd2si	init_value(%rip), %eax
    000006fa: 	movq	0x150(%rsp), %rcx
    00000702: 	movb	%al, (%rcx)
    00000704: 	cmpl	0xe4(%rsp), %r12d
    0000070c: 	jle	.Ltmp929 # Offset: 1804
    0000070e: 	cvttsd2si	init_value(%rip), %eax
    00000716: 	movq	0x160(%rsp), %rcx
    0000071e: 	movb	%al, (%rcx)
.Ltmp929:
    00000720: 	cmpb	$0x0, 0x3a(%rsp)
    00000725: 	je	.Ltmp930 # Offset: 1829
    0000072b: 	movsd	init_value(%rip), %xmm1
    00000733: 	movq	0x28(%rsp), %rax
    00000738: 	unpcklpd	%xmm1, %xmm1
    0000073c: 	cvttpd2dq	%xmm1, %xmm1
    00000740: 	punpcklqdq	%xmm1, %xmm1
    00000744: 	movdqa	%xmm1, %xmm2
    00000748: 	punpckhwd	%xmm1, %xmm2
    0000074c: 	nopl	(%rax) # Size: 4
.Ltmp931:
    00000750: 	movdqa	%xmm1, %xmm0
    00000754: 	addq	$0x40, %rax
    00000758: 	punpcklwd	%xmm1, %xmm0
    0000075c: 	movdqa	%xmm0, %xmm4
    00000760: 	punpcklwd	%xmm2, %xmm0
    00000764: 	punpckhwd	%xmm2, %xmm4
    00000768: 	punpcklwd	%xmm4, %xmm0
    0000076c: 	pand	%xmm3, %xmm0
    00000770: 	packuswb	%xmm0, %xmm0
    00000774: 	movd	%xmm0, %edx
    00000778: 	movb	%dl, -0x40(%rax)
    0000077b: 	movaps	%xmm0, 0x250(%rsp)
    00000783: 	movzbl	0x251(%rsp), %edx
    0000078b: 	movb	%dl, -0x3c(%rax)
    0000078e: 	movaps	%xmm0, 0x240(%rsp)
    00000796: 	movzbl	0x242(%rsp), %edx
    0000079e: 	movb	%dl, -0x38(%rax)
    000007a1: 	movaps	%xmm0, 0x230(%rsp)
    000007a9: 	movzbl	0x233(%rsp), %edx
    000007b1: 	movb	%dl, -0x34(%rax)
    000007b4: 	movaps	%xmm0, 0x220(%rsp)
    000007bc: 	movzbl	0x224(%rsp), %edx
    000007c4: 	movb	%dl, -0x30(%rax)
    000007c7: 	movaps	%xmm0, 0x210(%rsp)
    000007cf: 	movzbl	0x215(%rsp), %edx
    000007d7: 	movb	%dl, -0x2c(%rax)
    000007da: 	movaps	%xmm0, 0x200(%rsp)
    000007e2: 	movzbl	0x206(%rsp), %edx
    000007ea: 	movb	%dl, -0x28(%rax)
    000007ed: 	movaps	%xmm0, 0x1f0(%rsp)
    000007f5: 	movzbl	0x1f7(%rsp), %edx
    000007fd: 	movb	%dl, -0x24(%rax)
    00000800: 	movaps	%xmm0, 0x1e0(%rsp)
    00000808: 	movzbl	0x1e8(%rsp), %edx
    00000810: 	movb	%dl, -0x20(%rax)
    00000813: 	movaps	%xmm0, 0x1d0(%rsp)
    0000081b: 	movzbl	0x1d9(%rsp), %edx
    00000823: 	movb	%dl, -0x1c(%rax)
    00000826: 	movaps	%xmm0, 0x1c0(%rsp)
    0000082e: 	movzbl	0x1ca(%rsp), %edx
    00000836: 	movb	%dl, -0x18(%rax)
    00000839: 	movaps	%xmm0, 0x1b0(%rsp)
    00000841: 	movzbl	0x1bb(%rsp), %edx
    00000849: 	movb	%dl, -0x14(%rax)
    0000084c: 	movaps	%xmm0, 0x1a0(%rsp)
    00000854: 	movzbl	0x1ac(%rsp), %edx
    0000085c: 	movb	%dl, -0x10(%rax)
    0000085f: 	movaps	%xmm0, 0x190(%rsp)
    00000867: 	movzbl	0x19d(%rsp), %edx
    0000086f: 	movb	%dl, -0xc(%rax)
    00000872: 	movaps	%xmm0, 0x180(%rsp)
    0000087a: 	movzbl	0x18e(%rsp), %edx
    00000882: 	movb	%dl, -0x8(%rax)
    00000885: 	movaps	%xmm0, 0x170(%rsp)
    0000088d: 	movzbl	0x17f(%rsp), %edx
    00000895: 	movb	%dl, -0x4(%rax)
    00000898: 	cmpq	%rax, %r15
    0000089b: 	jne	.Ltmp931 # Offset: 2203
    000008a1: 	movl	0x10(%rsp), %ecx
    000008a5: 	cmpl	%ecx, 0xc(%rsp)
    000008a9: 	je	.Ltmp932 # Offset: 2217
    000008af: 	cvttsd2si	init_value(%rip), %eax
    000008b7: 	movq	0x48(%rsp), %rcx
    000008bc: 	movb	%al, (%rcx)
    000008be: 	cmpl	0x14(%rsp), %r12d
    000008c3: 	jle	.Ltmp932 # Offset: 2243
    000008c9: 	cvttsd2si	init_value(%rip), %eax
    000008d1: 	movq	0x58(%rsp), %rcx
    000008d6: 	movb	%al, (%rcx)
    000008d8: 	cmpl	0x18(%rsp), %r12d
    000008dd: 	jle	.Ltmp932 # Offset: 2269
    000008e3: 	cvttsd2si	init_value(%rip), %eax
    000008eb: 	movq	0x70(%rsp), %rcx
    000008f0: 	movb	%al, (%rcx)
    000008f2: 	cmpl	0x20(%rsp), %r12d
    000008f7: 	jle	.Ltmp932 # Offset: 2295
    000008fd: 	cvttsd2si	init_value(%rip), %eax
    00000905: 	movq	0x80(%rsp), %rcx
    0000090d: 	movb	%al, (%rcx)
    0000090f: 	cmpl	0x24(%rsp), %r12d
    00000914: 	jle	.Ltmp932 # Offset: 2324
    0000091a: 	cvttsd2si	init_value(%rip), %eax
    00000922: 	movq	0x98(%rsp), %rsi
    0000092a: 	movb	%al, (%rsi)
    0000092c: 	cmpl	0x40(%rsp), %r12d
    00000931: 	jle	.Ltmp932 # Offset: 2353
    00000937: 	cvttsd2si	init_value(%rip), %eax
    0000093f: 	movq	0xa8(%rsp), %rsi
    00000947: 	movb	%al, (%rsi)
    00000949: 	cmpl	0x44(%rsp), %r12d
    0000094e: 	jle	.Ltmp932 # Offset: 2382
    00000954: 	cvttsd2si	init_value(%rip), %eax
    0000095c: 	movq	0xc0(%rsp), %rsi
    00000964: 	movb	%al, (%rsi)
    00000966: 	cmpl	0x68(%rsp), %r12d
    0000096b: 	jle	.Ltmp932 # Offset: 2411
    00000971: 	cvttsd2si	init_value(%rip), %eax
    00000979: 	movq	0xd0(%rsp), %rcx
    00000981: 	movb	%al, (%rcx)
    00000983: 	cmpl	0x6c(%rsp), %r12d
    00000988: 	jle	.Ltmp932 # Offset: 2440
    0000098e: 	cvttsd2si	init_value(%rip), %eax
    00000996: 	movq	0xe8(%rsp), %rsi
    0000099e: 	movb	%al, (%rsi)
    000009a0: 	cmpl	0x90(%rsp), %r12d
    000009a8: 	jle	.Ltmp932 # Offset: 2472
    000009ae: 	cvttsd2si	init_value(%rip), %eax
    000009b6: 	movq	0xf8(%rsp), %rsi
    000009be: 	movb	%al, (%rsi)
    000009c0: 	cmpl	0x94(%rsp), %r12d
    000009c8: 	jle	.Ltmp932 # Offset: 2504
    000009ce: 	cvttsd2si	init_value(%rip), %eax
    000009d6: 	movq	0x110(%rsp), %rcx
    000009de: 	movb	%al, (%rcx)
    000009e0: 	cmpl	0xb8(%rsp), %r12d
    000009e8: 	jle	.Ltmp932 # Offset: 2536
    000009ea: 	cvttsd2si	init_value(%rip), %eax
    000009f2: 	movq	0x120(%rsp), %rcx
    000009fa: 	movb	%al, (%rcx)
    000009fc: 	cmpl	0xbc(%rsp), %r12d
    00000a04: 	jle	.Ltmp932 # Offset: 2564
    00000a06: 	cvttsd2si	init_value(%rip), %eax
    00000a0e: 	movq	0x138(%rsp), %rsi
    00000a16: 	movb	%al, (%rsi)
    00000a18: 	cmpl	0xe0(%rsp), %r12d
    00000a20: 	jle	.Ltmp932 # Offset: 2592
    00000a22: 	cvttsd2si	init_value(%rip), %eax
    00000a2a: 	movq	0x148(%rsp), %rcx
    00000a32: 	movb	%al, (%rcx)
    00000a34: 	cmpl	0xe4(%rsp), %r12d
    00000a3c: 	jle	.Ltmp932 # Offset: 2620
    00000a3e: 	cvttsd2si	init_value(%rip), %eax
    00000a46: 	movq	0x158(%rsp), %rsi
    00000a4e: 	movb	%al, (%rsi)
.Ltmp932:
    00000a50: 	leaq	0x3(%rdi), %rax
    00000a54: 	nopl	(%rax) # Size: 4
.Ltmp933:
    00000a58: 	movb	$0x1, (%rax)
    00000a5b: 	addq	$0x4, %rax
    00000a5f: 	cmpq	%rax, %r13
    00000a62: 	jne	.Ltmp933 # Offset: 2658
.Ltmp926:
    00000a64: 	addl	$0x1, %r14d
    00000a68: 	cmpl	%r14d, iterations(%rip)
    00000a6f: 	jg	.Ltmp934 # Offset: 2671
    00000a75: 	movl	0x1c(%rsp), %r14d
    00000a7a: 	movq	%rdi, %r15
.Ltmp924:
    00000a7d: 	callq	clock@PLT # Offset: 2685
    00000a82: 	movq	0x108(%rsp), %rdi
    00000a8a: 	pxor	%xmm0, %xmm0
    00000a8e: 	movq	%rax, end_time(%rip)
    00000a95: 	subq	start_time(%rip), %rax
    00000a9c: 	cvtsi2sd	%rax, %xmm0
    00000aa1: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000aa9: 	callq	_Z13record_resultdPKc # Offset: 2729
    00000aae: 	testl	%r14d, %r14d
    00000ab1: 	jle	.Ltmp935 # Offset: 2737
    00000ab7: 	leal	-0x1(%r14), %eax
    00000abb: 	cmpl	$0xe, %eax
    00000abe: 	jbe	.Ltmp936 # Offset: 2750
    00000ac4: 	movl	%r14d, %edx
    00000ac7: 	movq	%r15, %rax
    00000aca: 	pxor	%xmm0, %xmm0
    00000ace: 	shrl	$0x4, %edx
    00000ad1: 	subl	$0x1, %edx
    00000ad4: 	shlq	$0x4, %rdx
    00000ad8: 	leaq	0x10(%r15,%rdx), %rdx
    00000add: 	nopl	(%rax) # Size: 3
.Ltmp937:
    00000ae0: 	movdqu	(%rax), %xmm5
    00000ae4: 	addq	$0x10, %rax
    00000ae8: 	paddb	%xmm5, %xmm0
    00000aec: 	cmpq	%rax, %rdx
    00000aef: 	jne	.Ltmp937 # Offset: 2799
    00000af1: 	movdqa	%xmm0, %xmm1
    00000af5: 	movl	%r14d, %edx
    00000af8: 	psrldq	$0x8, %xmm1
    00000afd: 	andl	$-0x10, %edx
    00000b00: 	paddb	%xmm1, %xmm0
    00000b04: 	pxor	%xmm1, %xmm1
    00000b08: 	movl	%edx, %eax
    00000b0a: 	psadbw	%xmm1, %xmm0
    00000b0e: 	movd	%xmm0, %ebx
    00000b12: 	cmpl	%r14d, %edx
    00000b15: 	je	.Ltmp938 # Offset: 2837
.Ltmp946:
    00000b1b: 	movl	%r14d, %esi
    00000b1e: 	subl	%edx, %esi
    00000b20: 	leal	-0x1(%rsi), %edi
    00000b23: 	cmpl	$0x6, %edi
    00000b26: 	jbe	.Ltmp939 # Offset: 2854
    00000b28: 	movq	(%r15,%rdx), %xmm1
    00000b2e: 	pxor	%xmm0, %xmm0
    00000b32: 	movdqa	%xmm1, %xmm6
    00000b36: 	psadbw	%xmm0, %xmm6
    00000b3a: 	movq	%xmm6, 0x168(%rsp)
    00000b43: 	movq	%xmm6, %rdx
    00000b48: 	movl	%edx, %edi
    00000b4a: 	movl	%esi, %edx
    00000b4c: 	andl	$-0x8, %edx
    00000b4f: 	addl	%edi, %ebx
    00000b51: 	addl	%edx, %eax
    00000b53: 	cmpl	%edx, %esi
    00000b55: 	je	.Ltmp938 # Offset: 2901
.Ltmp939:
    00000b57: 	movslq	%eax, %rdx
    00000b5a: 	addb	(%r15,%rdx), %bl
    00000b5e: 	leal	0x1(%rax), %edx
    00000b61: 	cmpl	%edx, %r14d
    00000b64: 	jle	.Ltmp938 # Offset: 2916
    00000b66: 	movslq	%edx, %rdx
    00000b69: 	addb	(%r15,%rdx), %bl
    00000b6d: 	leal	0x2(%rax), %edx
    00000b70: 	cmpl	%edx, %r14d
    00000b73: 	jle	.Ltmp938 # Offset: 2931
    00000b75: 	movslq	%edx, %rdx
    00000b78: 	addb	(%r15,%rdx), %bl
    00000b7c: 	leal	0x3(%rax), %edx
    00000b7f: 	cmpl	%r14d, %edx
    00000b82: 	jge	.Ltmp938 # Offset: 2946
    00000b84: 	movslq	%edx, %rdx
    00000b87: 	addb	(%r15,%rdx), %bl
    00000b8b: 	leal	0x4(%rax), %edx
    00000b8e: 	cmpl	%edx, %r14d
    00000b91: 	jle	.Ltmp938 # Offset: 2961
    00000b93: 	movslq	%edx, %rdx
    00000b96: 	addb	(%r15,%rdx), %bl
    00000b9a: 	leal	0x5(%rax), %edx
    00000b9d: 	cmpl	%edx, %r14d
    00000ba0: 	jle	.Ltmp938 # Offset: 2976
    00000ba2: 	movslq	%edx, %rdx
    00000ba5: 	addl	$0x6, %eax
    00000ba8: 	addb	(%r15,%rdx), %bl
    00000bac: 	cmpl	%eax, %r14d
    00000baf: 	jle	.Ltmp938 # Offset: 2991
    00000bb1: 	cltq
    00000bb3: 	addb	(%r15,%rax), %bl
.Ltmp938:
    00000bb7: 	movsd	init_value(%rip), %xmm0
    00000bbf: 	addsd	%xmm0, %xmm0
    00000bc3: 	addsd	DATAat0x36fb0(%rip), %xmm0
    00000bcb: 	cvttsd2si	%xmm0, %ebp
    00000bcf: 	shll	$0x7, %ebp
    00000bd2: 	cmpb	%bl, %bpl
    00000bd5: 	jne	.Ltmp940 # Offset: 3029
    00000bd7: 	movq	0x358(%rsp), %rax
    00000bdf: 	subq	%fs:0x28, %rax
    00000be8: 	jne	.Ltmp941 # Offset: 3048
    00000bee: 	addq	$0x368, %rsp
    00000bf5: 	popq	%rbx
    00000bf6: 	popq	%rbp
    00000bf7: 	popq	%r12
    00000bf9: 	popq	%r13
    00000bfb: 	popq	%r14
    00000bfd: 	popq	%r15
    00000bff: 	retq # Offset: 3071
.Ltmp930:
    00000c00: 	movq	0x28(%rsp), %rax
    00000c05: 	nopl	(%rax) # Size: 3
.Ltmp942:
    00000c08: 	cvttsd2si	init_value(%rip), %edx
    00000c10: 	addq	$0x4, %rax
    00000c14: 	movb	%dl, -0x4(%rax)
    00000c17: 	cmpq	%rbp, %rax
    00000c1a: 	jne	.Ltmp942 # Offset: 3098
    00000c1c: 	jmp	.Ltmp932 # Offset: 3100
    00000c21: 	nopl	(%rax) # Size: 7
.Ltmp927:
    00000c28: 	movq	0x30(%rsp), %rax
    00000c2d: 	movq	0x130(%rsp), %rcx
    00000c35: 	nopl	(%rax) # Size: 3
.Ltmp943:
    00000c38: 	cvttsd2si	init_value(%rip), %edx
    00000c40: 	addq	$0x4, %rax
    00000c44: 	movb	%dl, -0x4(%rax)
    00000c47: 	cmpq	%rcx, %rax
    00000c4a: 	jne	.Ltmp943 # Offset: 3146
    00000c4c: 	jmp	.Ltmp929 # Offset: 3148
.Ltmp940:
    00000c51: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c58: 	movl	$0x5, %edx
    00000c5d: 	leaq	DATAat0x35004(%rip), %rsi
    00000c64: 	movq	%r12, %rdi
    00000c67: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3175
    00000c6c: 	cmpq	$0x0, 0x108(%rsp)
    00000c75: 	je	.Ltmp944 # Offset: 3189
    00000c7b: 	movq	0x108(%rsp), %r14
    00000c83: 	movq	%r14, %rdi
    00000c86: 	callq	strlen@PLT # Offset: 3206
    00000c8b: 	movq	%r14, %rsi
    00000c8e: 	movq	%r12, %rdi
    00000c91: 	movq	%rax, %rdx
    00000c94: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3220
.Ltmp945:
    00000c99: 	movq	%r12, %rdi
    00000c9c: 	movl	$0xd, %edx
    00000ca1: 	leaq	DATAat0x3500a(%rip), %rsi
    00000ca8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3240
    00000cad: 	leaq	0x357(%rsp), %r13
    00000cb5: 	movq	%r12, %rdi
    00000cb8: 	movl	$0x1, %edx
    00000cbd: 	movq	%r13, %rsi
    00000cc0: 	movb	%bl, 0x357(%rsp)
    00000cc7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3271
    00000ccc: 	movl	$0xb, %edx
    00000cd1: 	leaq	DATAat0x35018(%rip), %rsi
    00000cd8: 	movq	%rax, %r12
    00000cdb: 	movq	%rax, %rdi
    00000cde: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3294
    00000ce3: 	movq	%r12, %rdi
    00000ce6: 	movl	$0x1, %edx
    00000ceb: 	movq	%r13, %rsi
    00000cee: 	movb	%bpl, 0x357(%rsp)
    00000cf6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3318
    00000cfb: 	movq	%rax, %rdi
    00000cfe: 	movq	0x358(%rsp), %rax
    00000d06: 	subq	%fs:0x28, %rax
    00000d0f: 	jne	.Ltmp941 # Offset: 3343
    00000d11: 	addq	$0x368, %rsp
    00000d18: 	popq	%rbx
    00000d19: 	popq	%rbp
    00000d1a: 	popq	%r12
    00000d1c: 	popq	%r13
    00000d1e: 	popq	%r14
    00000d20: 	popq	%r15
    00000d22: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 3362
.Ltmp944:
    00000d27: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000d2e: 	movq	-0x18(%rax), %rdi
    00000d32: 	addq	%r12, %rdi
    00000d35: 	movl	0x20(%rdi), %esi
    00000d38: 	orl	$0x1, %esi
    00000d3b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 3387
    00000d40: 	jmp	.Ltmp945 # Offset: 3392
.Ltmp935:
    00000d45: 	xorl	%ebx, %ebx
    00000d47: 	jmp	.Ltmp938 # Offset: 3399
.Ltmp936:
    00000d4c: 	xorl	%edx, %edx
    00000d4e: 	xorl	%ebx, %ebx
    00000d50: 	xorl	%eax, %eax
    00000d52: 	jmp	.Ltmp946 # Offset: 3410
.Ltmp941:
    00000d57: 	callq	__stack_chk_fail@PLT # Offset: 3415
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite4IhEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite2IiEvPT_iPKc" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x1b0d0
  Size        : 0x2e3
  MaxSize     : 0x2f0
  Offset      : 0x1b0d0
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite2IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp947 # Offset: 47
    00000035: 	leal	-0x200(%r12), %eax
    0000003d: 	leal	-0x1(%r12), %r10d
    00000042: 	xorl	%r9d, %r9d
    00000045: 	xorl	%r14d, %r14d
    00000048: 	andl	$0xfffffe00, %eax
    0000004d: 	cvttsd2si	init_value(%rip), %ebp
    00000055: 	leal	-0x1ff(%r12), %r15d
    0000005d: 	addl	$0x200, %eax
    00000062: 	movl	%eax, (%rsp)
.Ltmp955:
    00000065: 	xorl	%esi, %esi
    00000067: 	movl	$0x1ff, %edx
    0000006c: 	xorl	%ecx, %ecx
    0000006e: 	testl	%r15d, %r15d
    00000071: 	jle	.Ltmp948 # Offset: 113
.Ltmp951:
    00000073: 	leaq	(%rbx,%rsi,4), %rax
    00000077: 	leaq	0x8(%rax), %rdi
    0000007b: 	movq	$0x0, (%rax)
    00000082: 	movq	$0x0, 0x7f8(%rax)
    0000008d: 	andq	$-0x8, %rdi
    00000091: 	subq	%rdi, %rax
    00000094: 	leal	0x800(%rax), %ecx
    0000009a: 	movq	%r14, %rax
    0000009d: 	shrl	$0x3, %ecx
    000000a0: 	rep		stosq	%rax, %es:(%rdi)
    000000a3: 	movq	%rsi, %rax
    000000a6: 	cmpq	%rsi, %rdx
    000000a9: 	jbe	.Ltmp949 # Offset: 169
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp950:
    000000b0: 	movl	%ebp, 0x4(%rbx,%rax,4)
    000000b4: 	addq	$0x2, %rax
    000000b8: 	cmpq	%rdx, %rax
    000000bb: 	jb	.Ltmp950 # Offset: 187
.Ltmp949:
    000000bd: 	addq	$0x200, %rsi
    000000c4: 	addq	$0x200, %rdx
    000000cb: 	cmpl	%esi, %r15d
    000000ce: 	jg	.Ltmp951 # Offset: 206
    000000d0: 	movl	(%rsp), %ecx
.Ltmp948:
    000000d3: 	cmpl	%ecx, %r12d
    000000d6: 	jle	.Ltmp952 # Offset: 214
    000000d8: 	movl	%r10d, %eax
    000000db: 	xorl	%esi, %esi
    000000dd: 	movl	%r9d, 0xc(%rsp)
    000000e2: 	subl	%ecx, %eax
    000000e4: 	movl	%r10d, 0x8(%rsp)
    000000e9: 	leaq	0x4(,%rax,4), %rdx
    000000f1: 	movslq	%ecx, %rax
    000000f4: 	movl	%ecx, 0x4(%rsp)
    000000f8: 	leaq	(%rbx,%rax,4), %rdi
    000000fc: 	callq	memset@PLT # Offset: 252
    00000101: 	movl	0x4(%rsp), %ecx
    00000105: 	movl	0x8(%rsp), %r10d
    0000010a: 	movl	0xc(%rsp), %r9d
.Ltmp952:
    0000010f: 	cmpl	%ecx, %r10d
    00000112: 	jle	.Ltmp953 # Offset: 274
    00000114: 	leal	-0x2(%r12), %edx
    00000119: 	movslq	%ecx, %rsi
    0000011c: 	subq	%rcx, %rdx
    0000011f: 	leaq	(%rbx,%rsi,4), %rax
    00000123: 	andl	$-0x2, %edx
    00000126: 	addq	%rsi, %rdx
    00000129: 	leaq	0x8(%rbx,%rdx,4), %rdx
.Ltmp954:
    0000012e: 	movl	%ebp, 0x4(%rax)
    00000131: 	addq	$0x8, %rax
    00000135: 	cmpq	%rdx, %rax
    00000138: 	jne	.Ltmp954 # Offset: 312
.Ltmp953:
    0000013a: 	addl	$0x1, %r9d
    0000013e: 	cmpl	%r9d, iterations(%rip)
    00000145: 	jg	.Ltmp955 # Offset: 325
.Ltmp947:
    0000014b: 	callq	clock@PLT # Offset: 331
    00000150: 	pxor	%xmm0, %xmm0
    00000154: 	movq	%r13, %rdi
    00000157: 	movq	%rax, end_time(%rip)
    0000015e: 	subq	start_time(%rip), %rax
    00000165: 	cvtsi2sd	%rax, %xmm0
    0000016a: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000172: 	callq	_Z13record_resultdPKc # Offset: 370
    00000177: 	testl	%r12d, %r12d
    0000017a: 	jle	.Ltmp956 # Offset: 378
    00000180: 	leal	-0x1(%r12), %eax
    00000185: 	cmpl	$0x2, %eax
    00000188: 	jbe	.Ltmp957 # Offset: 392
    0000018e: 	movl	%r12d, %edx
    00000191: 	movq	%rbx, %rax
    00000194: 	pxor	%xmm0, %xmm0
    00000198: 	shrl	$0x2, %edx
    0000019b: 	subl	$0x1, %edx
    0000019e: 	shlq	$0x4, %rdx
    000001a2: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp958:
    000001a7: 	movdqu	(%rax), %xmm2
    000001ab: 	addq	$0x10, %rax
    000001af: 	paddd	%xmm2, %xmm0
    000001b3: 	cmpq	%rdx, %rax
    000001b6: 	jne	.Ltmp958 # Offset: 438
    000001b8: 	movdqa	%xmm0, %xmm1
    000001bc: 	movl	%r12d, %eax
    000001bf: 	psrldq	$0x8, %xmm1
    000001c4: 	andl	$-0x4, %eax
    000001c7: 	paddd	%xmm1, %xmm0
    000001cb: 	movdqa	%xmm0, %xmm1
    000001cf: 	psrldq	$0x4, %xmm1
    000001d4: 	paddd	%xmm1, %xmm0
    000001d8: 	movd	%xmm0, %ebp
    000001dc: 	testb	$0x3, %r12b
    000001e0: 	je	.Ltmp959 # Offset: 480
.Ltmp963:
    000001e2: 	movslq	%eax, %rcx
    000001e5: 	leaq	(,%rcx,4), %rdx
    000001ed: 	addl	(%rbx,%rcx,4), %ebp
    000001f0: 	leal	0x1(%rax), %ecx
    000001f3: 	cmpl	%ecx, %r12d
    000001f6: 	jle	.Ltmp959 # Offset: 502
    000001f8: 	addl	$0x2, %eax
    000001fb: 	addl	0x4(%rbx,%rdx), %ebp
    000001ff: 	cmpl	%r12d, %eax
    00000202: 	jge	.Ltmp959 # Offset: 514
    00000204: 	addl	0x8(%rbx,%rdx), %ebp
.Ltmp959:
    00000208: 	cvttsd2si	init_value(%rip), %r14d
    00000211: 	imull	$0x3d0900, %r14d, %r14d
    00000218: 	cmpl	%ebp, %r14d
    0000021b: 	jne	.Ltmp960 # Offset: 539
    0000021d: 	addq	$0x18, %rsp
    00000221: 	popq	%rbx
    00000222: 	popq	%rbp
    00000223: 	popq	%r12
    00000225: 	popq	%r13
    00000227: 	popq	%r14
    00000229: 	popq	%r15
    0000022b: 	retq # Offset: 555
.Ltmp960:
    0000022c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000233: 	movl	$0x5, %edx
    00000238: 	leaq	DATAat0x35004(%rip), %rsi
    0000023f: 	movq	%r12, %rdi
    00000242: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 578
    00000247: 	testq	%r13, %r13
    0000024a: 	je	.Ltmp961 # Offset: 586
    0000024c: 	movq	%r13, %rdi
    0000024f: 	callq	strlen@PLT # Offset: 591
    00000254: 	movq	%r13, %rsi
    00000257: 	movq	%r12, %rdi
    0000025a: 	movq	%rax, %rdx
    0000025d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 605
.Ltmp962:
    00000262: 	movl	$0xd, %edx
    00000267: 	movq	%r12, %rdi
    0000026a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000271: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 625
    00000276: 	movl	%ebp, %esi
    00000278: 	movq	%r12, %rdi
    0000027b: 	callq	_ZNSolsEi@PLT # Offset: 635
    00000280: 	movl	$0xb, %edx
    00000285: 	leaq	DATAat0x35018(%rip), %rsi
    0000028c: 	movq	%rax, %rbp
    0000028f: 	movq	%rax, %rdi
    00000292: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 658
    00000297: 	movq	%rbp, %rdi
    0000029a: 	movl	%r14d, %esi
    0000029d: 	callq	_ZNSolsEi@PLT # Offset: 669
    000002a2: 	addq	$0x18, %rsp
    000002a6: 	popq	%rbx
    000002a7: 	movq	%rax, %rdi
    000002aa: 	popq	%rbp
    000002ab: 	popq	%r12
    000002ad: 	popq	%r13
    000002af: 	popq	%r14
    000002b1: 	popq	%r15
    000002b3: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 691
.Ltmp961:
    000002b8: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002bf: 	movq	-0x18(%rax), %rdi
    000002c3: 	addq	%r12, %rdi
    000002c6: 	movl	0x20(%rdi), %esi
    000002c9: 	orl	$0x1, %esi
    000002cc: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 716
    000002d1: 	jmp	.Ltmp962 # Offset: 721
.Ltmp956:
    000002d3: 	xorl	%ebp, %ebp
    000002d5: 	jmp	.Ltmp959 # Offset: 725
.Ltmp957:
    000002da: 	xorl	%eax, %eax
    000002dc: 	xorl	%ebp, %ebp
    000002de: 	jmp	.Ltmp963 # Offset: 734
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite2IiEvPT_iPKc"

Binary Function "_Z24test_loop_overwrite3_optIiEvPT_iPKc" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x1b3c0
  Size        : 0x294
  MaxSize     : 0x2a0
  Offset      : 0x1b3c0
  Section     : .text
  Orc Section : .local.text._Z24test_loop_overwrite3_optIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movq	%rax, start_time(%rip)
    00000028: 	movl	iterations(%rip), %eax
    0000002e: 	testl	%eax, %eax
    00000030: 	jle	.Ltmp964 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	leal	-0x2(%rbx), %r15d
    0000003d: 	xorl	%ebp, %ebp
    0000003f: 	cvttsd2si	init_value(%rip), %r14d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp968:
    00000050: 	movq	%r12, %rax
    00000053: 	xorl	%edx, %edx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp965 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp966:
    00000060: 	addl	$0x3, %edx
    00000063: 	movl	$0x0, (%rax)
    00000069: 	addq	$0xc, %rax
    0000006d: 	movl	%r14d, -0x8(%rax)
    00000071: 	movl	%r14d, -0x4(%rax)
    00000075: 	cmpl	%r15d, %edx
    00000078: 	jl	.Ltmp966 # Offset: 120
.Ltmp965:
    0000007a: 	cmpl	%edx, %ebx
    0000007c: 	jle	.Ltmp967 # Offset: 124
    00000082: 	movl	0x4(%rsp), %r13d
    00000087: 	xorl	%esi, %esi
    00000089: 	addl	$0x1, %ebp
    0000008c: 	movl	%r13d, %eax
    0000008f: 	subl	%edx, %eax
    00000091: 	movslq	%edx, %rdx
    00000094: 	leaq	0x4(,%rax,4), %r9
    0000009c: 	leaq	(%r12,%rdx,4), %rdi
    000000a0: 	movq	%r9, %rdx
    000000a3: 	callq	memset@PLT # Offset: 163
    000000a8: 	cmpl	%ebp, iterations(%rip)
    000000ae: 	jg	.Ltmp968 # Offset: 174
    000000b0: 	callq	clock@PLT # Offset: 176
    000000b5: 	movq	0x8(%rsp), %rdi
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	movq	%rax, end_time(%rip)
    000000c5: 	subq	start_time(%rip), %rax
    000000cc: 	cvtsi2sd	%rax, %xmm0
    000000d1: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000d9: 	callq	_Z13record_resultdPKc # Offset: 217
.Ltmp973:
    000000de: 	cmpl	$0x2, %r13d
    000000e2: 	jbe	.Ltmp969 # Offset: 226
    000000e8: 	movl	%ebx, %edx
    000000ea: 	movq	%r12, %rax
    000000ed: 	pxor	%xmm0, %xmm0
    000000f1: 	shrl	$0x2, %edx
    000000f4: 	subl	$0x1, %edx
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	leaq	0x10(%r12,%rdx), %rdx
.Ltmp970:
    00000100: 	movdqu	(%rax), %xmm2
    00000104: 	addq	$0x10, %rax
    00000108: 	paddd	%xmm2, %xmm0
    0000010c: 	cmpq	%rax, %rdx
    0000010f: 	jne	.Ltmp970 # Offset: 271
    00000111: 	movdqa	%xmm0, %xmm1
    00000115: 	movl	%ebx, %eax
    00000117: 	psrldq	$0x8, %xmm1
    0000011c: 	andl	$-0x4, %eax
    0000011f: 	paddd	%xmm1, %xmm0
    00000123: 	movdqa	%xmm0, %xmm1
    00000127: 	psrldq	$0x4, %xmm1
    0000012c: 	paddd	%xmm1, %xmm0
    00000130: 	movd	%xmm0, %ebp
    00000134: 	testb	$0x3, %bl
    00000137: 	je	.Ltmp971 # Offset: 311
.Ltmp976:
    00000139: 	movslq	%eax, %rdx
    0000013c: 	leaq	(,%rdx,4), %rcx
    00000144: 	addl	(%r12,%rdx,4), %ebp
    00000148: 	leal	0x1(%rax), %edx
    0000014b: 	cmpl	%edx, %ebx
    0000014d: 	jle	.Ltmp971 # Offset: 333
    0000014f: 	addl	$0x2, %eax
    00000152: 	addl	0x4(%r12,%rcx), %ebp
    00000157: 	cmpl	%eax, %ebx
    00000159: 	jle	.Ltmp971 # Offset: 345
    0000015b: 	addl	0x8(%r12,%rcx), %ebp
.Ltmp971:
    00000160: 	movsd	init_value(%rip), %xmm0
    00000168: 	addsd	%xmm0, %xmm0
    0000016c: 	cvttsd2si	%xmm0, %r13d
    00000171: 	imull	$0x28b0aa, %r13d, %r13d
    00000178: 	cmpl	%ebp, %r13d
    0000017b: 	jne	.Ltmp972 # Offset: 379
    0000017d: 	addq	$0x18, %rsp
    00000181: 	popq	%rbx
    00000182: 	popq	%rbp
    00000183: 	popq	%r12
    00000185: 	popq	%r13
    00000187: 	popq	%r14
    00000189: 	popq	%r15
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp967:
    00000190: 	addl	$0x1, %ebp
    00000193: 	cmpl	%ebp, iterations(%rip)
    00000199: 	jg	.Ltmp968 # Offset: 409
.Ltmp964:
    0000019f: 	callq	clock@PLT # Offset: 415
    000001a4: 	movq	0x8(%rsp), %rdi
    000001a9: 	pxor	%xmm0, %xmm0
    000001ad: 	xorl	%ebp, %ebp
    000001af: 	movq	%rax, end_time(%rip)
    000001b6: 	subq	start_time(%rip), %rax
    000001bd: 	cvtsi2sd	%rax, %xmm0
    000001c2: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001ca: 	callq	_Z13record_resultdPKc # Offset: 458
    000001cf: 	testl	%ebx, %ebx
    000001d1: 	jle	.Ltmp971 # Offset: 465
    000001d3: 	leal	-0x1(%rbx), %r13d
    000001d7: 	jmp	.Ltmp973 # Offset: 471
.Ltmp972:
    000001dc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000001e3: 	movl	$0x5, %edx
    000001e8: 	leaq	DATAat0x35004(%rip), %rsi
    000001ef: 	movq	%r14, %rdi
    000001f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 498
    000001f7: 	cmpq	$0x0, 0x8(%rsp)
    000001fd: 	je	.Ltmp974 # Offset: 509
    000001ff: 	movq	0x8(%rsp), %rbx
    00000204: 	movq	%rbx, %rdi
    00000207: 	callq	strlen@PLT # Offset: 519
    0000020c: 	movq	%rbx, %rsi
    0000020f: 	movq	%r14, %rdi
    00000212: 	movq	%rax, %rdx
    00000215: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 533
.Ltmp975:
    0000021a: 	movl	$0xd, %edx
    0000021f: 	movq	%r14, %rdi
    00000222: 	leaq	DATAat0x3500a(%rip), %rsi
    00000229: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 553
    0000022e: 	movl	%ebp, %esi
    00000230: 	movq	%r14, %rdi
    00000233: 	callq	_ZNSolsEi@PLT # Offset: 563
    00000238: 	movl	$0xb, %edx
    0000023d: 	leaq	DATAat0x35018(%rip), %rsi
    00000244: 	movq	%rax, %rbp
    00000247: 	movq	%rax, %rdi
    0000024a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 586
    0000024f: 	movq	%rbp, %rdi
    00000252: 	movl	%r13d, %esi
    00000255: 	callq	_ZNSolsEi@PLT # Offset: 597
    0000025a: 	addq	$0x18, %rsp
    0000025e: 	popq	%rbx
    0000025f: 	movq	%rax, %rdi
    00000262: 	popq	%rbp
    00000263: 	popq	%r12
    00000265: 	popq	%r13
    00000267: 	popq	%r14
    00000269: 	popq	%r15
    0000026b: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 619
.Ltmp974:
    00000270: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000277: 	movq	-0x18(%rax), %rdi
    0000027b: 	addq	%r14, %rdi
    0000027e: 	movl	0x20(%rdi), %esi
    00000281: 	orl	$0x1, %esi
    00000284: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 644
    00000289: 	jmp	.Ltmp975 # Offset: 649
.Ltmp969:
    0000028b: 	xorl	%ebp, %ebp
    0000028d: 	xorl	%eax, %eax
    0000028f: 	jmp	.Ltmp976 # Offset: 655
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_loop_overwrite3_optIiEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite3IiEvPT_iPKc" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x1b660
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x1b660
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp977 # Offset: 49
    00000037: 	movslq	%r12d, %r13
    0000003a: 	movl	$0x0, 0x14(%rsp)
    00000042: 	leal	-0x2(%r12), %ebp
    00000047: 	cvttsd2si	init_value(%rip), %r14d
    00000050: 	leaq	-0x401(%r13), %rax
    00000057: 	movq	%rax, 0x8(%rsp)
.Ltmp987:
    0000005c: 	xorl	%ebx, %ebx
    0000005e: 	xorl	%ecx, %ecx
    00000060: 	cmpq	$0x0, 0x8(%rsp)
    00000066: 	je	.Ltmp978 # Offset: 102
.Ltmp982:
    00000068: 	leaq	0x3ff(%rcx), %r13
    0000006f: 	cmpq	%rbx, %r13
    00000072: 	jbe	.Ltmp979 # Offset: 114
    00000074: 	movq	%r13, %rdx
    00000077: 	leaq	(%r15,%rbx,4), %rdi
    0000007b: 	xorl	%esi, %esi
    0000007d: 	subq	%rbx, %rdx
    00000080: 	shlq	$0x2, %rdx
    00000084: 	callq	memset@PLT # Offset: 132
    00000089: 	movq	%rbx, %rax
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp980:
    00000090: 	movl	%r14d, 0x4(%r15,%rax,4)
    00000095: 	addq	$0x3, %rax
    00000099: 	cmpq	%r13, %rax
    0000009c: 	jb	.Ltmp980 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp981:
    000000a0: 	movl	%r14d, 0x8(%r15,%rbx,4)
    000000a5: 	addq	$0x3, %rbx
    000000a9: 	cmpq	%r13, %rbx
    000000ac: 	jb	.Ltmp981 # Offset: 172
.Ltmp979:
    000000ae: 	movslq	%r13d, %rbx
    000000b1: 	movslq	%r13d, %rcx
    000000b4: 	cmpq	0x8(%rsp), %rcx
    000000b9: 	jb	.Ltmp982 # Offset: 185
    000000bb: 	cmpl	%ebx, %r12d
    000000be: 	jle	.Ltmp983 # Offset: 190
.Ltmp978:
    000000c0: 	leal	-0x1(%r12), %eax
    000000c5: 	subl	%ebx, %eax
    000000c7: 	cmpl	%ebx, %r12d
    000000ca: 	leaq	0x4(,%rax,4), %rdx
    000000d2: 	movl	$0x4, %eax
    000000d7: 	cmovleq	%rax, %rdx
    000000db: 	movslq	%ebx, %rax
    000000de: 	xorl	%esi, %esi
    000000e0: 	leaq	(%r15,%rax,4), %rdi
    000000e4: 	callq	memset@PLT # Offset: 228
.Ltmp983:
    000000e9: 	movslq	%ebx, %rax
    000000ec: 	movq	%rax, %rdx
    000000ef: 	cmpl	%ebp, %ebx
    000000f1: 	jge	.Ltmp984 # Offset: 241
.Ltmp985:
    000000f3: 	movl	%r14d, 0x4(%r15,%rdx,4)
    000000f8: 	addq	$0x3, %rdx
    000000fc: 	cmpl	%edx, %ebp
    000000fe: 	jg	.Ltmp985 # Offset: 254
.Ltmp986:
    00000100: 	movl	%r14d, 0x8(%r15,%rax,4)
    00000105: 	addq	$0x3, %rax
    00000109: 	cmpl	%eax, %ebp
    0000010b: 	jg	.Ltmp986 # Offset: 267
.Ltmp984:
    0000010d: 	addl	$0x1, 0x14(%rsp)
    00000112: 	movl	0x14(%rsp), %eax
    00000116: 	cmpl	%eax, iterations(%rip)
    0000011c: 	jg	.Ltmp987 # Offset: 284
.Ltmp977:
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	movq	0x18(%rsp), %rdi
    0000012c: 	pxor	%xmm0, %xmm0
    00000130: 	movq	%rax, end_time(%rip)
    00000137: 	subq	start_time(%rip), %rax
    0000013e: 	cvtsi2sd	%rax, %xmm0
    00000143: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000014b: 	callq	_Z13record_resultdPKc # Offset: 331
    00000150: 	testl	%r12d, %r12d
    00000153: 	jle	.Ltmp988 # Offset: 339
    00000159: 	leal	-0x1(%r12), %eax
    0000015e: 	cmpl	$0x2, %eax
    00000161: 	jbe	.Ltmp989 # Offset: 353
    00000167: 	movl	%r12d, %edx
    0000016a: 	movq	%r15, %rax
    0000016d: 	pxor	%xmm0, %xmm0
    00000171: 	shrl	$0x2, %edx
    00000174: 	subl	$0x1, %edx
    00000177: 	shlq	$0x4, %rdx
    0000017b: 	leaq	0x10(%r15,%rdx), %rdx
.Ltmp990:
    00000180: 	movdqu	(%rax), %xmm2
    00000184: 	addq	$0x10, %rax
    00000188: 	paddd	%xmm2, %xmm0
    0000018c: 	cmpq	%rdx, %rax
    0000018f: 	jne	.Ltmp990 # Offset: 399
    00000191: 	movdqa	%xmm0, %xmm1
    00000195: 	movl	%r12d, %eax
    00000198: 	psrldq	$0x8, %xmm1
    0000019d: 	andl	$-0x4, %eax
    000001a0: 	paddd	%xmm1, %xmm0
    000001a4: 	movdqa	%xmm0, %xmm1
    000001a8: 	psrldq	$0x4, %xmm1
    000001ad: 	paddd	%xmm1, %xmm0
    000001b1: 	movd	%xmm0, %ebp
    000001b5: 	testb	$0x3, %r12b
    000001b9: 	je	.Ltmp991 # Offset: 441
.Ltmp995:
    000001bb: 	movslq	%eax, %rcx
    000001be: 	leaq	(,%rcx,4), %rdx
    000001c6: 	addl	(%r15,%rcx,4), %ebp
    000001ca: 	leal	0x1(%rax), %ecx
    000001cd: 	cmpl	%ecx, %r12d
    000001d0: 	jle	.Ltmp991 # Offset: 464
    000001d2: 	addl	$0x2, %eax
    000001d5: 	addl	0x4(%r15,%rdx), %ebp
    000001da: 	cmpl	%eax, %r12d
    000001dd: 	jle	.Ltmp991 # Offset: 477
    000001df: 	addl	0x8(%r15,%rdx), %ebp
.Ltmp991:
    000001e4: 	movsd	init_value(%rip), %xmm0
    000001ec: 	addsd	%xmm0, %xmm0
    000001f0: 	cvttsd2si	%xmm0, %r13d
    000001f5: 	imull	$0x28b0aa, %r13d, %r13d
    000001fc: 	cmpl	%ebp, %r13d
    000001ff: 	jne	.Ltmp992 # Offset: 511
    00000201: 	addq	$0x28, %rsp
    00000205: 	popq	%rbx
    00000206: 	popq	%rbp
    00000207: 	popq	%r12
    00000209: 	popq	%r13
    0000020b: 	popq	%r14
    0000020d: 	popq	%r15
    0000020f: 	retq # Offset: 527
.Ltmp992:
    00000210: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000217: 	movl	$0x5, %edx
    0000021c: 	leaq	DATAat0x35004(%rip), %rsi
    00000223: 	movq	%r12, %rdi
    00000226: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 550
    0000022b: 	cmpq	$0x0, 0x18(%rsp)
    00000231: 	je	.Ltmp993 # Offset: 561
    00000233: 	movq	0x18(%rsp), %rbx
    00000238: 	movq	%rbx, %rdi
    0000023b: 	callq	strlen@PLT # Offset: 571
    00000240: 	movq	%rbx, %rsi
    00000243: 	movq	%r12, %rdi
    00000246: 	movq	%rax, %rdx
    00000249: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 585
.Ltmp994:
    0000024e: 	movl	$0xd, %edx
    00000253: 	movq	%r12, %rdi
    00000256: 	leaq	DATAat0x3500a(%rip), %rsi
    0000025d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 605
    00000262: 	movl	%ebp, %esi
    00000264: 	movq	%r12, %rdi
    00000267: 	callq	_ZNSolsEi@PLT # Offset: 615
    0000026c: 	movl	$0xb, %edx
    00000271: 	leaq	DATAat0x35018(%rip), %rsi
    00000278: 	movq	%rax, %rbp
    0000027b: 	movq	%rax, %rdi
    0000027e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 638
    00000283: 	movq	%rbp, %rdi
    00000286: 	movl	%r13d, %esi
    00000289: 	callq	_ZNSolsEi@PLT # Offset: 649
    0000028e: 	addq	$0x28, %rsp
    00000292: 	popq	%rbx
    00000293: 	movq	%rax, %rdi
    00000296: 	popq	%rbp
    00000297: 	popq	%r12
    00000299: 	popq	%r13
    0000029b: 	popq	%r14
    0000029d: 	popq	%r15
    0000029f: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 671
.Ltmp993:
    000002a4: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002ab: 	movq	-0x18(%rax), %rdi
    000002af: 	addq	%r12, %rdi
    000002b2: 	movl	0x20(%rdi), %esi
    000002b5: 	orl	$0x1, %esi
    000002b8: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 696
    000002bd: 	jmp	.Ltmp994 # Offset: 701
.Ltmp988:
    000002bf: 	xorl	%ebp, %ebp
    000002c1: 	jmp	.Ltmp991 # Offset: 705
.Ltmp989:
    000002c6: 	xorl	%eax, %eax
    000002c8: 	xorl	%ebp, %ebp
    000002ca: 	jmp	.Ltmp995 # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite3IiEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite3IiEvPT_iPKc" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x1b930
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0x1b930
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movq	%rax, start_time(%rip)
    00000028: 	movl	iterations(%rip), %eax
    0000002e: 	testl	%eax, %eax
    00000030: 	jle	.Ltmp996 # Offset: 48
    00000032: 	cvttsd2si	init_value(%rip), %r15d
    0000003b: 	leal	-0x1(%rbp), %eax
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	leal	-0x2(%rbp), %r14d
    00000045: 	leaq	0x4(,%rax,4), %r12
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1001:
    00000050: 	testl	%ebp, %ebp
    00000052: 	jle	.Ltmp997 # Offset: 82
    00000054: 	movq	%r12, %rdx
    00000057: 	xorl	%esi, %esi
    00000059: 	movq	%rbx, %rdi
    0000005c: 	callq	memset@PLT # Offset: 92
.Ltmp997:
    00000061: 	xorl	%eax, %eax
    00000063: 	testl	%r14d, %r14d
    00000066: 	jle	.Ltmp998 # Offset: 102
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp999:
    00000070: 	movl	%r15d, 0x4(%rbx,%rax,4)
    00000075: 	addq	$0x3, %rax
    00000079: 	cmpl	%eax, %r14d
    0000007c: 	jg	.Ltmp999 # Offset: 124
    0000007e: 	xorl	%eax, %eax
.Ltmp1000:
    00000080: 	movl	%r15d, 0x8(%rbx,%rax,4)
    00000085: 	addq	$0x3, %rax
    00000089: 	cmpl	%eax, %r14d
    0000008c: 	jg	.Ltmp1000 # Offset: 140
.Ltmp998:
    0000008e: 	addl	$0x1, %r13d
    00000092: 	cmpl	%r13d, iterations(%rip)
    00000099: 	jg	.Ltmp1001 # Offset: 153
.Ltmp996:
    0000009b: 	callq	clock@PLT # Offset: 155
    000000a0: 	movq	0x8(%rsp), %rdi
    000000a5: 	pxor	%xmm0, %xmm0
    000000a9: 	movq	%rax, end_time(%rip)
    000000b0: 	subq	start_time(%rip), %rax
    000000b7: 	cvtsi2sd	%rax, %xmm0
    000000bc: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000c4: 	callq	_Z13record_resultdPKc # Offset: 196
    000000c9: 	testl	%ebp, %ebp
    000000cb: 	jle	.Ltmp1002 # Offset: 203
    000000d1: 	leal	-0x1(%rbp), %eax
    000000d4: 	cmpl	$0x2, %eax
    000000d7: 	jbe	.Ltmp1003 # Offset: 215
    000000dd: 	movl	%ebp, %edx
    000000df: 	movq	%rbx, %rax
    000000e2: 	pxor	%xmm0, %xmm0
    000000e6: 	shrl	$0x2, %edx
    000000e9: 	subl	$0x1, %edx
    000000ec: 	shlq	$0x4, %rdx
    000000f0: 	leaq	0x10(%rbx,%rdx), %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp1004:
    000000f8: 	movdqu	(%rax), %xmm2
    000000fc: 	addq	$0x10, %rax
    00000100: 	paddd	%xmm2, %xmm0
    00000104: 	cmpq	%rdx, %rax
    00000107: 	jne	.Ltmp1004 # Offset: 263
    00000109: 	movdqa	%xmm0, %xmm1
    0000010d: 	movl	%ebp, %eax
    0000010f: 	psrldq	$0x8, %xmm1
    00000114: 	andl	$-0x4, %eax
    00000117: 	paddd	%xmm1, %xmm0
    0000011b: 	movdqa	%xmm0, %xmm1
    0000011f: 	psrldq	$0x4, %xmm1
    00000124: 	paddd	%xmm1, %xmm0
    00000128: 	movd	%xmm0, %r12d
    0000012d: 	testb	$0x3, %bpl
    00000131: 	je	.Ltmp1005 # Offset: 305
.Ltmp1009:
    00000133: 	movslq	%eax, %rdx
    00000136: 	leaq	(,%rdx,4), %rcx
    0000013e: 	addl	(%rbx,%rdx,4), %r12d
    00000142: 	leal	0x1(%rax), %edx
    00000145: 	cmpl	%edx, %ebp
    00000147: 	jle	.Ltmp1005 # Offset: 327
    00000149: 	addl	$0x2, %eax
    0000014c: 	addl	0x4(%rbx,%rcx), %r12d
    00000151: 	cmpl	%ebp, %eax
    00000153: 	jge	.Ltmp1005 # Offset: 339
    00000155: 	addl	0x8(%rbx,%rcx), %r12d
.Ltmp1005:
    0000015a: 	movsd	init_value(%rip), %xmm0
    00000162: 	addsd	%xmm0, %xmm0
    00000166: 	cvttsd2si	%xmm0, %ebp
    0000016a: 	imull	$0x28b0aa, %ebp, %ebp
    00000170: 	cmpl	%r12d, %ebp
    00000173: 	jne	.Ltmp1006 # Offset: 371
    00000175: 	addq	$0x18, %rsp
    00000179: 	popq	%rbx
    0000017a: 	popq	%rbp
    0000017b: 	popq	%r12
    0000017d: 	popq	%r13
    0000017f: 	popq	%r14
    00000181: 	popq	%r15
    00000183: 	retq # Offset: 387
.Ltmp1006:
    00000184: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000018b: 	movl	$0x5, %edx
    00000190: 	leaq	DATAat0x35004(%rip), %rsi
    00000197: 	movq	%r14, %rdi
    0000019a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 410
    0000019f: 	cmpq	$0x0, 0x8(%rsp)
    000001a5: 	je	.Ltmp1007 # Offset: 421
    000001a7: 	movq	0x8(%rsp), %rbx
    000001ac: 	movq	%rbx, %rdi
    000001af: 	callq	strlen@PLT # Offset: 431
    000001b4: 	movq	%rbx, %rsi
    000001b7: 	movq	%r14, %rdi
    000001ba: 	movq	%rax, %rdx
    000001bd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 445
.Ltmp1008:
    000001c2: 	movl	$0xd, %edx
    000001c7: 	movq	%r14, %rdi
    000001ca: 	leaq	DATAat0x3500a(%rip), %rsi
    000001d1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 465
    000001d6: 	movl	%r12d, %esi
    000001d9: 	movq	%r14, %rdi
    000001dc: 	callq	_ZNSolsEi@PLT # Offset: 476
    000001e1: 	movl	$0xb, %edx
    000001e6: 	leaq	DATAat0x35018(%rip), %rsi
    000001ed: 	movq	%rax, %r12
    000001f0: 	movq	%rax, %rdi
    000001f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 499
    000001f8: 	movq	%r12, %rdi
    000001fb: 	movl	%ebp, %esi
    000001fd: 	callq	_ZNSolsEi@PLT # Offset: 509
    00000202: 	addq	$0x18, %rsp
    00000206: 	popq	%rbx
    00000207: 	movq	%rax, %rdi
    0000020a: 	popq	%rbp
    0000020b: 	popq	%r12
    0000020d: 	popq	%r13
    0000020f: 	popq	%r14
    00000211: 	popq	%r15
    00000213: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 531
.Ltmp1007:
    00000218: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000021f: 	movq	-0x18(%rax), %rdi
    00000223: 	addq	%r14, %rdi
    00000226: 	movl	0x20(%rdi), %esi
    00000229: 	orl	$0x1, %esi
    0000022c: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 556
    00000231: 	jmp	.Ltmp1008 # Offset: 561
.Ltmp1002:
    00000233: 	xorl	%r12d, %r12d
    00000236: 	jmp	.Ltmp1005 # Offset: 566
.Ltmp1003:
    0000023b: 	xorl	%r12d, %r12d
    0000023e: 	xorl	%eax, %eax
    00000240: 	jmp	.Ltmp1009 # Offset: 576
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite3IiEvPT_iPKc"

Binary Function "_Z24test_loop_overwrite4_optIiEvPT_iPKc" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x1bb80
  Size        : 0x2ee
  MaxSize     : 0x2f0
  Offset      : 0x1bb80
  Section     : .text
  Orc Section : .local.text._Z24test_loop_overwrite4_optIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movl	%esi, %r12d
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, %rbx
    00000015: 	callq	clock@PLT # Offset: 21
    0000001a: 	movq	%rax, start_time(%rip)
    00000021: 	movl	iterations(%rip), %eax
    00000027: 	testl	%eax, %eax
    00000029: 	jle	.Ltmp1010 # Offset: 41
    0000002f: 	cvttsd2si	init_value(%rip), %ecx
    00000037: 	leal	-0x3(%r12), %r8d
    0000003c: 	testl	%r8d, %r8d
    0000003f: 	jle	.Ltmp1010 # Offset: 63
    00000045: 	leal	-0x4(%r12), %r10d
    0000004a: 	movd	%ecx, %xmm1
    0000004e: 	movd	%ecx, %xmm4
    00000052: 	xorl	%edi, %edi
    00000054: 	movl	%r10d, %r9d
    00000057: 	movd	%edi, %xmm0
    0000005b: 	shrl	$0x2, %r9d
    0000005f: 	punpckldq	%xmm4, %xmm0
    00000063: 	addl	$0x1, %r9d
    00000067: 	movl	%r9d, %eax
    0000006a: 	movl	%r9d, %r11d
    0000006d: 	shrl	$0x2, %eax
    00000070: 	andl	$-0x4, %r11d
    00000074: 	subl	$0x1, %eax
    00000077: 	leal	(,%r11,4), %r13d
    0000007f: 	shlq	$0x6, %rax
    00000083: 	leaq	0x40(%rbx,%rax), %rdx
    00000088: 	movl	$0x1, %eax
    0000008d: 	movd	%eax, %xmm3
    00000091: 	punpckldq	%xmm3, %xmm1
    00000095: 	punpcklqdq	%xmm1, %xmm0
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1014:
    000000a0: 	cmpl	$0xb, %r10d
    000000a4: 	jbe	.Ltmp1011 # Offset: 164
    000000aa: 	movq	%rbx, %rax
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp1012:
    000000b0: 	movups	%xmm0, (%rax)
    000000b3: 	addq	$0x40, %rax
    000000b7: 	movups	%xmm0, -0x30(%rax)
    000000bb: 	movups	%xmm0, -0x20(%rax)
    000000bf: 	movups	%xmm0, -0x10(%rax)
    000000c3: 	cmpq	%rax, %rdx
    000000c6: 	jne	.Ltmp1012 # Offset: 198
    000000c8: 	movl	%r13d, %esi
    000000cb: 	cmpl	%r11d, %r9d
    000000ce: 	je	.Ltmp1013 # Offset: 206
.Ltmp1020:
    000000d0: 	movslq	%esi, %r14
    000000d3: 	movl	$0x0, (%rbx,%r14,4)
    000000db: 	leaq	(,%r14,4), %rax
    000000e3: 	leal	0x4(%rsi), %r14d
    000000e7: 	movl	%ecx, 0x4(%rbx,%rax)
    000000eb: 	movl	%ecx, 0x8(%rbx,%rax)
    000000ef: 	movl	$0x1, 0xc(%rbx,%rax)
    000000f7: 	cmpl	%r14d, %r8d
    000000fa: 	jle	.Ltmp1013 # Offset: 250
    000000fc: 	addl	$0x8, %esi
    000000ff: 	movl	$0x0, 0x10(%rbx,%rax)
    00000107: 	movl	%ecx, 0x14(%rbx,%rax)
    0000010b: 	movl	%ecx, 0x18(%rbx,%rax)
    0000010f: 	movl	$0x1, 0x1c(%rbx,%rax)
    00000117: 	cmpl	%esi, %r8d
    0000011a: 	jle	.Ltmp1013 # Offset: 282
    0000011c: 	movl	$0x0, 0x20(%rbx,%rax)
    00000124: 	movl	%ecx, 0x24(%rbx,%rax)
    00000128: 	movl	%ecx, 0x28(%rbx,%rax)
    0000012c: 	movl	$0x1, 0x2c(%rbx,%rax)
.Ltmp1013:
    00000134: 	addl	$0x1, %edi
    00000137: 	cmpl	iterations(%rip), %edi
    0000013d: 	jl	.Ltmp1014 # Offset: 317
.Ltmp1010:
    00000143: 	callq	clock@PLT # Offset: 323
    00000148: 	pxor	%xmm0, %xmm0
    0000014c: 	movq	%rbp, %rdi
    0000014f: 	movq	%rax, end_time(%rip)
    00000156: 	subq	start_time(%rip), %rax
    0000015d: 	cvtsi2sd	%rax, %xmm0
    00000162: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000016a: 	callq	_Z13record_resultdPKc # Offset: 362
    0000016f: 	testl	%r12d, %r12d
    00000172: 	jle	.Ltmp1015 # Offset: 370
    00000178: 	leal	-0x1(%r12), %eax
    0000017d: 	cmpl	$0x2, %eax
    00000180: 	jbe	.Ltmp1016 # Offset: 384
    00000186: 	movl	%r12d, %edx
    00000189: 	movq	%rbx, %rax
    0000018c: 	pxor	%xmm0, %xmm0
    00000190: 	shrl	$0x2, %edx
    00000193: 	subl	$0x1, %edx
    00000196: 	shlq	$0x4, %rdx
    0000019a: 	leaq	0x10(%rbx,%rdx), %rdx
    0000019f: 	nop # Size: 1
.Ltmp1017:
    000001a0: 	movdqu	(%rax), %xmm2
    000001a4: 	addq	$0x10, %rax
    000001a8: 	paddd	%xmm2, %xmm0
    000001ac: 	cmpq	%rax, %rdx
    000001af: 	jne	.Ltmp1017 # Offset: 431
    000001b1: 	movdqa	%xmm0, %xmm1
    000001b5: 	movl	%r12d, %eax
    000001b8: 	psrldq	$0x8, %xmm1
    000001bd: 	andl	$-0x4, %eax
    000001c0: 	paddd	%xmm1, %xmm0
    000001c4: 	movdqa	%xmm0, %xmm1
    000001c8: 	psrldq	$0x4, %xmm1
    000001cd: 	paddd	%xmm1, %xmm0
    000001d1: 	movd	%xmm0, %r13d
    000001d6: 	testb	$0x3, %r12b
    000001da: 	je	.Ltmp1018 # Offset: 474
.Ltmp1023:
    000001dc: 	movslq	%eax, %rdx
    000001df: 	leaq	(,%rdx,4), %rcx
    000001e7: 	addl	(%rbx,%rdx,4), %r13d
    000001eb: 	leal	0x1(%rax), %edx
    000001ee: 	cmpl	%edx, %r12d
    000001f1: 	jle	.Ltmp1018 # Offset: 497
    000001f3: 	addl	$0x2, %eax
    000001f6: 	addl	0x4(%rbx,%rcx), %r13d
    000001fb: 	cmpl	%r12d, %eax
    000001fe: 	jge	.Ltmp1018 # Offset: 510
    00000200: 	addl	0x8(%rbx,%rcx), %r13d
.Ltmp1018:
    00000205: 	movsd	init_value(%rip), %xmm0
    0000020d: 	addsd	%xmm0, %xmm0
    00000211: 	addsd	DATAat0x36fb0(%rip), %xmm0
    00000219: 	cvttsd2si	%xmm0, %r12d
    0000021e: 	imull	$0x1e8480, %r12d, %r12d
    00000225: 	cmpl	%r13d, %r12d
    00000228: 	jne	.Ltmp1019 # Offset: 552
    0000022a: 	popq	%rbx
    0000022b: 	popq	%rbp
    0000022c: 	popq	%r12
    0000022e: 	popq	%r13
    00000230: 	popq	%r14
    00000232: 	retq # Offset: 562
.Ltmp1011:
    00000233: 	xorl	%esi, %esi
    00000235: 	jmp	.Ltmp1020 # Offset: 565
.Ltmp1019:
    0000023a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000241: 	movl	$0x5, %edx
    00000246: 	leaq	DATAat0x35004(%rip), %rsi
    0000024d: 	movq	%r14, %rdi
    00000250: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 592
    00000255: 	testq	%rbp, %rbp
    00000258: 	je	.Ltmp1021 # Offset: 600
    0000025a: 	movq	%rbp, %rdi
    0000025d: 	callq	strlen@PLT # Offset: 605
    00000262: 	movq	%rbp, %rsi
    00000265: 	movq	%r14, %rdi
    00000268: 	movq	%rax, %rdx
    0000026b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 619
.Ltmp1022:
    00000270: 	movl	$0xd, %edx
    00000275: 	movq	%r14, %rdi
    00000278: 	leaq	DATAat0x3500a(%rip), %rsi
    0000027f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 639
    00000284: 	movl	%r13d, %esi
    00000287: 	movq	%r14, %rdi
    0000028a: 	callq	_ZNSolsEi@PLT # Offset: 650
    0000028f: 	movl	$0xb, %edx
    00000294: 	leaq	DATAat0x35018(%rip), %rsi
    0000029b: 	movq	%rax, %rbp
    0000029e: 	movq	%rax, %rdi
    000002a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 673
    000002a6: 	movq	%rbp, %rdi
    000002a9: 	movl	%r12d, %esi
    000002ac: 	callq	_ZNSolsEi@PLT # Offset: 684
    000002b1: 	popq	%rbx
    000002b2: 	popq	%rbp
    000002b3: 	movq	%rax, %rdi
    000002b6: 	popq	%r12
    000002b8: 	popq	%r13
    000002ba: 	popq	%r14
    000002bc: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 700
.Ltmp1021:
    000002c1: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002c8: 	movq	-0x18(%rax), %rdi
    000002cc: 	addq	%r14, %rdi
    000002cf: 	movl	0x20(%rdi), %esi
    000002d2: 	orl	$0x1, %esi
    000002d5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 725
    000002da: 	jmp	.Ltmp1022 # Offset: 730
.Ltmp1015:
    000002dc: 	xorl	%r13d, %r13d
    000002df: 	jmp	.Ltmp1018 # Offset: 735
.Ltmp1016:
    000002e4: 	xorl	%r13d, %r13d
    000002e7: 	xorl	%eax, %eax
    000002e9: 	jmp	.Ltmp1023 # Offset: 745
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_loop_overwrite4_optIiEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite4IiEvPT_iPKc" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x1be70
  Size        : 0x32f
  MaxSize     : 0x330
  Offset      : 0x1be70
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp1024 # Offset: 47
    00000035: 	leal	-0x3(%r15), %eax
    00000039: 	leal	-0xff(%r15), %r8d
    00000040: 	xorl	%r14d, %r14d
    00000043: 	xorl	%r13d, %r13d
    00000046: 	movl	%eax, (%rsp)
    00000049: 	leal	-0x100(%r15), %eax
    00000050: 	xorb	%al, %al
    00000052: 	cvttsd2si	init_value(%rip), %ebp
    0000005a: 	addl	$0x100, %eax
    0000005f: 	movl	%eax, 0x4(%rsp)
.Ltmp1036:
    00000063: 	xorl	%esi, %esi
    00000065: 	movl	$0xfd, %edx
    0000006a: 	xorl	%ecx, %ecx
    0000006c: 	testl	%r8d, %r8d
    0000006f: 	jle	.Ltmp1025 # Offset: 111
.Ltmp1030:
    00000075: 	leaq	(%rbx,%rsi,4), %rax
    00000079: 	leaq	0x8(%rax), %rdi
    0000007d: 	movq	$0x0, (%rax)
    00000084: 	movq	$0x0, 0x3f8(%rax)
    0000008f: 	andq	$-0x8, %rdi
    00000093: 	subq	%rdi, %rax
    00000096: 	leal	0x400(%rax), %ecx
    0000009c: 	movq	%r13, %rax
    0000009f: 	shrl	$0x3, %ecx
    000000a2: 	rep		stosq	%rax, %es:(%rdi)
    000000a5: 	cmpq	%rsi, %rdx
    000000a8: 	jbe	.Ltmp1026 # Offset: 168
    000000aa: 	movq	%rsi, %rax
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp1027:
    000000b0: 	movl	%ebp, 0x4(%rbx,%rax,4)
    000000b4: 	addq	$0x4, %rax
    000000b8: 	cmpq	%rdx, %rax
    000000bb: 	jb	.Ltmp1027 # Offset: 187
    000000bd: 	movq	%rsi, %rax
.Ltmp1028:
    000000c0: 	movl	%ebp, 0x8(%rbx,%rax,4)
    000000c4: 	addq	$0x4, %rax
    000000c8: 	cmpq	%rdx, %rax
    000000cb: 	jb	.Ltmp1028 # Offset: 203
    000000cd: 	movq	%rsi, %rax
.Ltmp1029:
    000000d0: 	movl	$0x1, 0xc(%rbx,%rax,4)
    000000d8: 	addq	$0x4, %rax
    000000dc: 	cmpq	%rdx, %rax
    000000df: 	jb	.Ltmp1029 # Offset: 223
.Ltmp1026:
    000000e1: 	addq	$0x100, %rsi
    000000e8: 	addq	$0x100, %rdx
    000000ef: 	cmpl	%esi, %r8d
    000000f2: 	jg	.Ltmp1030 # Offset: 242
    000000f4: 	movl	0x4(%rsp), %ecx
.Ltmp1025:
    000000f8: 	cmpl	%ecx, %r15d
    000000fb: 	jle	.Ltmp1031 # Offset: 251
    000000fd: 	leal	-0x1(%r15), %eax
    00000101: 	xorl	%esi, %esi
    00000103: 	movl	%r8d, 0xc(%rsp)
    00000108: 	subl	%ecx, %eax
    0000010a: 	movl	%ecx, 0x8(%rsp)
    0000010e: 	leaq	0x4(,%rax,4), %rdx
    00000116: 	movslq	%ecx, %rax
    00000119: 	leaq	(%rbx,%rax,4), %rdi
    0000011d: 	callq	memset@PLT # Offset: 285
    00000122: 	movl	0x8(%rsp), %ecx
    00000126: 	movl	0xc(%rsp), %r8d
.Ltmp1031:
    0000012b: 	cmpl	%ecx, (%rsp)
    0000012e: 	jle	.Ltmp1032 # Offset: 302
    00000130: 	leal	-0x4(%r15), %edx
    00000134: 	movslq	%ecx, %rsi
    00000137: 	subq	%rcx, %rdx
    0000013a: 	leaq	(%rbx,%rsi,4), %rax
    0000013e: 	andl	$-0x4, %edx
    00000141: 	addq	%rsi, %rdx
    00000144: 	leaq	0x10(%rbx,%rdx,4), %rcx
    00000149: 	movq	%rax, %rdx
.Ltmp1033:
    0000014c: 	movl	%ebp, 0x4(%rdx)
    0000014f: 	addq	$0x10, %rdx
    00000153: 	cmpq	%rcx, %rdx
    00000156: 	jne	.Ltmp1033 # Offset: 342
    00000158: 	movq	%rax, %rdx
.Ltmp1034:
    0000015b: 	movl	%ebp, 0x8(%rdx)
    0000015e: 	addq	$0x10, %rdx
    00000162: 	cmpq	%rcx, %rdx
    00000165: 	jne	.Ltmp1034 # Offset: 357
.Ltmp1035:
    00000167: 	movl	$0x1, 0xc(%rax)
    0000016e: 	addq	$0x10, %rax
    00000172: 	cmpq	%rcx, %rax
    00000175: 	jne	.Ltmp1035 # Offset: 373
.Ltmp1032:
    00000177: 	addl	$0x1, %r14d
    0000017b: 	cmpl	%r14d, iterations(%rip)
    00000182: 	jg	.Ltmp1036 # Offset: 386
.Ltmp1024:
    00000188: 	callq	clock@PLT # Offset: 392
    0000018d: 	pxor	%xmm0, %xmm0
    00000191: 	movq	%r12, %rdi
    00000194: 	movq	%rax, end_time(%rip)
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	cvtsi2sd	%rax, %xmm0
    000001a7: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001af: 	callq	_Z13record_resultdPKc # Offset: 431
    000001b4: 	testl	%r15d, %r15d
    000001b7: 	jle	.Ltmp1037 # Offset: 439
    000001bd: 	leal	-0x1(%r15), %eax
    000001c1: 	cmpl	$0x2, %eax
    000001c4: 	jbe	.Ltmp1038 # Offset: 452
    000001ca: 	movl	%r15d, %edx
    000001cd: 	movq	%rbx, %rax
    000001d0: 	pxor	%xmm0, %xmm0
    000001d4: 	shrl	$0x2, %edx
    000001d7: 	subl	$0x1, %edx
    000001da: 	shlq	$0x4, %rdx
    000001de: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp1039:
    000001e3: 	movdqu	(%rax), %xmm2
    000001e7: 	addq	$0x10, %rax
    000001eb: 	paddd	%xmm2, %xmm0
    000001ef: 	cmpq	%rdx, %rax
    000001f2: 	jne	.Ltmp1039 # Offset: 498
    000001f4: 	movdqa	%xmm0, %xmm1
    000001f8: 	movl	%r15d, %eax
    000001fb: 	psrldq	$0x8, %xmm1
    00000200: 	andl	$-0x4, %eax
    00000203: 	paddd	%xmm1, %xmm0
    00000207: 	movdqa	%xmm0, %xmm1
    0000020b: 	psrldq	$0x4, %xmm1
    00000210: 	paddd	%xmm1, %xmm0
    00000214: 	movd	%xmm0, %ebp
    00000218: 	testb	$0x3, %r15b
    0000021c: 	je	.Ltmp1040 # Offset: 540
.Ltmp1044:
    0000021e: 	movslq	%eax, %rcx
    00000221: 	leaq	(,%rcx,4), %rdx
    00000229: 	addl	(%rbx,%rcx,4), %ebp
    0000022c: 	leal	0x1(%rax), %ecx
    0000022f: 	cmpl	%ecx, %r15d
    00000232: 	jle	.Ltmp1040 # Offset: 562
    00000234: 	addl	$0x2, %eax
    00000237: 	addl	0x4(%rbx,%rdx), %ebp
    0000023b: 	cmpl	%eax, %r15d
    0000023e: 	jle	.Ltmp1040 # Offset: 574
    00000240: 	addl	0x8(%rbx,%rdx), %ebp
.Ltmp1040:
    00000244: 	movsd	init_value(%rip), %xmm0
    0000024c: 	addsd	%xmm0, %xmm0
    00000250: 	addsd	DATAat0x36fb0(%rip), %xmm0
    00000258: 	cvttsd2si	%xmm0, %r14d
    0000025d: 	imull	$0x1e8480, %r14d, %r14d
    00000264: 	cmpl	%ebp, %r14d
    00000267: 	jne	.Ltmp1041 # Offset: 615
    00000269: 	addq	$0x18, %rsp
    0000026d: 	popq	%rbx
    0000026e: 	popq	%rbp
    0000026f: 	popq	%r12
    00000271: 	popq	%r13
    00000273: 	popq	%r14
    00000275: 	popq	%r15
    00000277: 	retq # Offset: 631
.Ltmp1041:
    00000278: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000027f: 	movl	$0x5, %edx
    00000284: 	leaq	DATAat0x35004(%rip), %rsi
    0000028b: 	movq	%r13, %rdi
    0000028e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 654
    00000293: 	testq	%r12, %r12
    00000296: 	je	.Ltmp1042 # Offset: 662
    00000298: 	movq	%r12, %rdi
    0000029b: 	callq	strlen@PLT # Offset: 667
    000002a0: 	movq	%r12, %rsi
    000002a3: 	movq	%r13, %rdi
    000002a6: 	movq	%rax, %rdx
    000002a9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 681
.Ltmp1043:
    000002ae: 	movl	$0xd, %edx
    000002b3: 	movq	%r13, %rdi
    000002b6: 	leaq	DATAat0x3500a(%rip), %rsi
    000002bd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 701
    000002c2: 	movl	%ebp, %esi
    000002c4: 	movq	%r13, %rdi
    000002c7: 	callq	_ZNSolsEi@PLT # Offset: 711
    000002cc: 	movl	$0xb, %edx
    000002d1: 	leaq	DATAat0x35018(%rip), %rsi
    000002d8: 	movq	%rax, %rbp
    000002db: 	movq	%rax, %rdi
    000002de: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 734
    000002e3: 	movq	%rbp, %rdi
    000002e6: 	movl	%r14d, %esi
    000002e9: 	callq	_ZNSolsEi@PLT # Offset: 745
    000002ee: 	addq	$0x18, %rsp
    000002f2: 	popq	%rbx
    000002f3: 	movq	%rax, %rdi
    000002f6: 	popq	%rbp
    000002f7: 	popq	%r12
    000002f9: 	popq	%r13
    000002fb: 	popq	%r14
    000002fd: 	popq	%r15
    000002ff: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 767
.Ltmp1042:
    00000304: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000030b: 	movq	-0x18(%rax), %rdi
    0000030f: 	addq	%r13, %rdi
    00000312: 	movl	0x20(%rdi), %esi
    00000315: 	orl	$0x1, %esi
    00000318: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 792
    0000031d: 	jmp	.Ltmp1043 # Offset: 797
.Ltmp1037:
    0000031f: 	xorl	%ebp, %ebp
    00000321: 	jmp	.Ltmp1040 # Offset: 801
.Ltmp1038:
    00000326: 	xorl	%eax, %eax
    00000328: 	xorl	%ebp, %ebp
    0000032a: 	jmp	.Ltmp1044 # Offset: 810
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite4IiEvPT_iPKc"

Binary Function "_Z30test_for_loop_bzero_overwrite4IiEvPT_iPKc" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x1c1a0
  Size        : 0x284
  MaxSize     : 0x290
  Offset      : 0x1c1a0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_bzero_overwrite4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	%rdx, 0x8(%rsp)
    0000001a: 	movl	%esi, 0x4(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edx, %edx
    00000032: 	jle	.Ltmp1045 # Offset: 50
    00000038: 	movslq	0x4(%rsp), %rbp
    0000003d: 	xorl	%ebx, %ebx
    0000003f: 	movq	%rbp, %rax
    00000042: 	shlq	$0x2, %rbp
    00000046: 	subl	$0x4, %eax
    00000049: 	shrl	$0x2, %eax
    0000004c: 	shlq	$0x4, %rax
    00000050: 	leaq	0x14(%r12,%rax), %r15
    00000055: 	leaq	0x18(%r12,%rax), %r14
    0000005a: 	leaq	0x1c(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp1050:
    00000060: 	xorl	%esi, %esi
    00000062: 	movq	%rbp, %rdx
    00000065: 	movq	%r12, %rdi
    00000068: 	callq	memset@PLT # Offset: 104
    0000006d: 	cmpl	$0x3, 0x4(%rsp)
    00000072: 	jle	.Ltmp1046 # Offset: 114
    00000074: 	cvttsd2si	init_value(%rip), %edx
    0000007c: 	leaq	0x4(%r12), %rax
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1047:
    00000088: 	movl	%edx, (%rax)
    0000008a: 	addq	$0x10, %rax
    0000008e: 	cmpq	%r15, %rax
    00000091: 	jne	.Ltmp1047 # Offset: 145
    00000093: 	leaq	0x8(%r12), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1048:
    000000a0: 	movl	%edx, (%rax)
    000000a2: 	addq	$0x10, %rax
    000000a6: 	cmpq	%r14, %rax
    000000a9: 	jne	.Ltmp1048 # Offset: 169
    000000ab: 	leaq	0xc(%r12), %rax
.Ltmp1049:
    000000b0: 	movl	$0x1, (%rax)
    000000b6: 	addq	$0x10, %rax
    000000ba: 	cmpq	%r13, %rax
    000000bd: 	jne	.Ltmp1049 # Offset: 189
.Ltmp1046:
    000000bf: 	addl	$0x1, %ebx
    000000c2: 	cmpl	%ebx, iterations(%rip)
    000000c8: 	jg	.Ltmp1050 # Offset: 200
.Ltmp1045:
    000000ca: 	callq	clock@PLT # Offset: 202
    000000cf: 	movq	0x8(%rsp), %rdi
    000000d4: 	pxor	%xmm0, %xmm0
    000000d8: 	xorl	%ebp, %ebp
    000000da: 	movq	%rax, end_time(%rip)
    000000e1: 	subq	start_time(%rip), %rax
    000000e8: 	cvtsi2sd	%rax, %xmm0
    000000ed: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000f5: 	callq	_Z13record_resultdPKc # Offset: 245
    000000fa: 	movl	0x4(%rsp), %eax
    000000fe: 	testl	%eax, %eax
    00000100: 	jle	.Ltmp1051 # Offset: 256
    00000106: 	movl	0x4(%rsp), %ecx
    0000010a: 	leal	-0x1(%rcx), %eax
    0000010d: 	cmpl	$0x2, %eax
    00000110: 	jbe	.Ltmp1052 # Offset: 272
    00000116: 	shrl	$0x2, %ecx
    00000119: 	movq	%r12, %rax
    0000011c: 	pxor	%xmm0, %xmm0
    00000120: 	movl	%ecx, %edx
    00000122: 	subl	$0x1, %edx
    00000125: 	shlq	$0x4, %rdx
    00000129: 	leaq	0x10(%r12,%rdx), %rdx
    0000012e: 	nop # Size: 2
.Ltmp1053:
    00000130: 	movdqu	(%rax), %xmm2
    00000134: 	addq	$0x10, %rax
    00000138: 	paddd	%xmm2, %xmm0
    0000013c: 	cmpq	%rdx, %rax
    0000013f: 	jne	.Ltmp1053 # Offset: 319
    00000141: 	movdqa	%xmm0, %xmm1
    00000145: 	movl	0x4(%rsp), %ecx
    00000149: 	psrldq	$0x8, %xmm1
    0000014e: 	paddd	%xmm1, %xmm0
    00000152: 	movl	%ecx, %eax
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	andl	$-0x4, %eax
    0000015b: 	andl	$0x3, %ecx
    0000015e: 	psrldq	$0x4, %xmm1
    00000163: 	paddd	%xmm1, %xmm0
    00000167: 	movd	%xmm0, %ebp
    0000016b: 	je	.Ltmp1051 # Offset: 363
.Ltmp1057:
    0000016d: 	movslq	%eax, %rdx
    00000170: 	movl	0x4(%rsp), %ecx
    00000174: 	leaq	(,%rdx,4), %rsi
    0000017c: 	addl	(%r12,%rdx,4), %ebp
    00000180: 	leal	0x1(%rax), %edx
    00000183: 	cmpl	%edx, %ecx
    00000185: 	jle	.Ltmp1051 # Offset: 389
    00000187: 	addl	$0x2, %eax
    0000018a: 	addl	0x4(%r12,%rsi), %ebp
    0000018f: 	cmpl	%eax, %ecx
    00000191: 	jle	.Ltmp1051 # Offset: 401
    00000193: 	addl	0x8(%r12,%rsi), %ebp
.Ltmp1051:
    00000198: 	movsd	init_value(%rip), %xmm0
    000001a0: 	addsd	%xmm0, %xmm0
    000001a4: 	addsd	DATAat0x36fb0(%rip), %xmm0
    000001ac: 	cvttsd2si	%xmm0, %r13d
    000001b1: 	imull	$0x1e8480, %r13d, %r13d
    000001b8: 	cmpl	%ebp, %r13d
    000001bb: 	jne	.Ltmp1054 # Offset: 443
    000001bd: 	addq	$0x18, %rsp
    000001c1: 	popq	%rbx
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp1054:
    000001cc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000001d3: 	movl	$0x5, %edx
    000001d8: 	leaq	DATAat0x35004(%rip), %rsi
    000001df: 	movq	%r14, %rdi
    000001e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 482
    000001e7: 	cmpq	$0x0, 0x8(%rsp)
    000001ed: 	je	.Ltmp1055 # Offset: 493
    000001ef: 	movq	0x8(%rsp), %rbx
    000001f4: 	movq	%rbx, %rdi
    000001f7: 	callq	strlen@PLT # Offset: 503
    000001fc: 	movq	%rbx, %rsi
    000001ff: 	movq	%r14, %rdi
    00000202: 	movq	%rax, %rdx
    00000205: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 517
.Ltmp1056:
    0000020a: 	movl	$0xd, %edx
    0000020f: 	movq	%r14, %rdi
    00000212: 	leaq	DATAat0x3500a(%rip), %rsi
    00000219: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 537
    0000021e: 	movl	%ebp, %esi
    00000220: 	movq	%r14, %rdi
    00000223: 	callq	_ZNSolsEi@PLT # Offset: 547
    00000228: 	movl	$0xb, %edx
    0000022d: 	leaq	DATAat0x35018(%rip), %rsi
    00000234: 	movq	%rax, %rbp
    00000237: 	movq	%rax, %rdi
    0000023a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 570
    0000023f: 	movq	%rbp, %rdi
    00000242: 	movl	%r13d, %esi
    00000245: 	callq	_ZNSolsEi@PLT # Offset: 581
    0000024a: 	addq	$0x18, %rsp
    0000024e: 	popq	%rbx
    0000024f: 	movq	%rax, %rdi
    00000252: 	popq	%rbp
    00000253: 	popq	%r12
    00000255: 	popq	%r13
    00000257: 	popq	%r14
    00000259: 	popq	%r15
    0000025b: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 603
.Ltmp1055:
    00000260: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000267: 	movq	-0x18(%rax), %rdi
    0000026b: 	addq	%r14, %rdi
    0000026e: 	movl	0x20(%rdi), %esi
    00000271: 	orl	$0x1, %esi
    00000274: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 628
    00000279: 	jmp	.Ltmp1056 # Offset: 633
.Ltmp1052:
    0000027b: 	xorl	%ebp, %ebp
    0000027d: 	xorl	%eax, %eax
    0000027f: 	jmp	.Ltmp1057 # Offset: 639
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_bzero_overwrite4IiEvPT_iPKc"

Binary Function "_Z31test_for_loop_memset_overwrite4IiEvPT_iPKc" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x1c430
  Size        : 0x284
  MaxSize     : 0x290
  Offset      : 0x1c430
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_memset_overwrite4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	%rdx, 0x8(%rsp)
    0000001a: 	movl	%esi, 0x4(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edx, %edx
    00000032: 	jle	.Ltmp1058 # Offset: 50
    00000038: 	movslq	0x4(%rsp), %rbp
    0000003d: 	xorl	%ebx, %ebx
    0000003f: 	movq	%rbp, %rax
    00000042: 	shlq	$0x2, %rbp
    00000046: 	subl	$0x4, %eax
    00000049: 	shrl	$0x2, %eax
    0000004c: 	shlq	$0x4, %rax
    00000050: 	leaq	0x14(%r12,%rax), %r15
    00000055: 	leaq	0x18(%r12,%rax), %r14
    0000005a: 	leaq	0x1c(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp1063:
    00000060: 	xorl	%esi, %esi
    00000062: 	movq	%rbp, %rdx
    00000065: 	movq	%r12, %rdi
    00000068: 	callq	memset@PLT # Offset: 104
    0000006d: 	cmpl	$0x3, 0x4(%rsp)
    00000072: 	jle	.Ltmp1059 # Offset: 114
    00000074: 	cvttsd2si	init_value(%rip), %edx
    0000007c: 	leaq	0x4(%r12), %rax
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1060:
    00000088: 	movl	%edx, (%rax)
    0000008a: 	addq	$0x10, %rax
    0000008e: 	cmpq	%r15, %rax
    00000091: 	jne	.Ltmp1060 # Offset: 145
    00000093: 	leaq	0x8(%r12), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1061:
    000000a0: 	movl	%edx, (%rax)
    000000a2: 	addq	$0x10, %rax
    000000a6: 	cmpq	%r14, %rax
    000000a9: 	jne	.Ltmp1061 # Offset: 169
    000000ab: 	leaq	0xc(%r12), %rax
.Ltmp1062:
    000000b0: 	movl	$0x1, (%rax)
    000000b6: 	addq	$0x10, %rax
    000000ba: 	cmpq	%r13, %rax
    000000bd: 	jne	.Ltmp1062 # Offset: 189
.Ltmp1059:
    000000bf: 	addl	$0x1, %ebx
    000000c2: 	cmpl	%ebx, iterations(%rip)
    000000c8: 	jg	.Ltmp1063 # Offset: 200
.Ltmp1058:
    000000ca: 	callq	clock@PLT # Offset: 202
    000000cf: 	movq	0x8(%rsp), %rdi
    000000d4: 	pxor	%xmm0, %xmm0
    000000d8: 	xorl	%ebp, %ebp
    000000da: 	movq	%rax, end_time(%rip)
    000000e1: 	subq	start_time(%rip), %rax
    000000e8: 	cvtsi2sd	%rax, %xmm0
    000000ed: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000f5: 	callq	_Z13record_resultdPKc # Offset: 245
    000000fa: 	movl	0x4(%rsp), %eax
    000000fe: 	testl	%eax, %eax
    00000100: 	jle	.Ltmp1064 # Offset: 256
    00000106: 	movl	0x4(%rsp), %ecx
    0000010a: 	leal	-0x1(%rcx), %eax
    0000010d: 	cmpl	$0x2, %eax
    00000110: 	jbe	.Ltmp1065 # Offset: 272
    00000116: 	shrl	$0x2, %ecx
    00000119: 	movq	%r12, %rax
    0000011c: 	pxor	%xmm0, %xmm0
    00000120: 	movl	%ecx, %edx
    00000122: 	subl	$0x1, %edx
    00000125: 	shlq	$0x4, %rdx
    00000129: 	leaq	0x10(%r12,%rdx), %rdx
    0000012e: 	nop # Size: 2
.Ltmp1066:
    00000130: 	movdqu	(%rax), %xmm2
    00000134: 	addq	$0x10, %rax
    00000138: 	paddd	%xmm2, %xmm0
    0000013c: 	cmpq	%rdx, %rax
    0000013f: 	jne	.Ltmp1066 # Offset: 319
    00000141: 	movdqa	%xmm0, %xmm1
    00000145: 	movl	0x4(%rsp), %ecx
    00000149: 	psrldq	$0x8, %xmm1
    0000014e: 	paddd	%xmm1, %xmm0
    00000152: 	movl	%ecx, %eax
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	andl	$-0x4, %eax
    0000015b: 	andl	$0x3, %ecx
    0000015e: 	psrldq	$0x4, %xmm1
    00000163: 	paddd	%xmm1, %xmm0
    00000167: 	movd	%xmm0, %ebp
    0000016b: 	je	.Ltmp1064 # Offset: 363
.Ltmp1070:
    0000016d: 	movslq	%eax, %rdx
    00000170: 	movl	0x4(%rsp), %ecx
    00000174: 	leaq	(,%rdx,4), %rsi
    0000017c: 	addl	(%r12,%rdx,4), %ebp
    00000180: 	leal	0x1(%rax), %edx
    00000183: 	cmpl	%edx, %ecx
    00000185: 	jle	.Ltmp1064 # Offset: 389
    00000187: 	addl	$0x2, %eax
    0000018a: 	addl	0x4(%r12,%rsi), %ebp
    0000018f: 	cmpl	%eax, %ecx
    00000191: 	jle	.Ltmp1064 # Offset: 401
    00000193: 	addl	0x8(%r12,%rsi), %ebp
.Ltmp1064:
    00000198: 	movsd	init_value(%rip), %xmm0
    000001a0: 	addsd	%xmm0, %xmm0
    000001a4: 	addsd	DATAat0x36fb0(%rip), %xmm0
    000001ac: 	cvttsd2si	%xmm0, %r13d
    000001b1: 	imull	$0x1e8480, %r13d, %r13d
    000001b8: 	cmpl	%ebp, %r13d
    000001bb: 	jne	.Ltmp1067 # Offset: 443
    000001bd: 	addq	$0x18, %rsp
    000001c1: 	popq	%rbx
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp1067:
    000001cc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000001d3: 	movl	$0x5, %edx
    000001d8: 	leaq	DATAat0x35004(%rip), %rsi
    000001df: 	movq	%r14, %rdi
    000001e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 482
    000001e7: 	cmpq	$0x0, 0x8(%rsp)
    000001ed: 	je	.Ltmp1068 # Offset: 493
    000001ef: 	movq	0x8(%rsp), %rbx
    000001f4: 	movq	%rbx, %rdi
    000001f7: 	callq	strlen@PLT # Offset: 503
    000001fc: 	movq	%rbx, %rsi
    000001ff: 	movq	%r14, %rdi
    00000202: 	movq	%rax, %rdx
    00000205: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 517
.Ltmp1069:
    0000020a: 	movl	$0xd, %edx
    0000020f: 	movq	%r14, %rdi
    00000212: 	leaq	DATAat0x3500a(%rip), %rsi
    00000219: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 537
    0000021e: 	movl	%ebp, %esi
    00000220: 	movq	%r14, %rdi
    00000223: 	callq	_ZNSolsEi@PLT # Offset: 547
    00000228: 	movl	$0xb, %edx
    0000022d: 	leaq	DATAat0x35018(%rip), %rsi
    00000234: 	movq	%rax, %rbp
    00000237: 	movq	%rax, %rdi
    0000023a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 570
    0000023f: 	movq	%rbp, %rdi
    00000242: 	movl	%r13d, %esi
    00000245: 	callq	_ZNSolsEi@PLT # Offset: 581
    0000024a: 	addq	$0x18, %rsp
    0000024e: 	popq	%rbx
    0000024f: 	movq	%rax, %rdi
    00000252: 	popq	%rbp
    00000253: 	popq	%r12
    00000255: 	popq	%r13
    00000257: 	popq	%r14
    00000259: 	popq	%r15
    0000025b: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 603
.Ltmp1068:
    00000260: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000267: 	movq	-0x18(%rax), %rdi
    0000026b: 	addq	%r14, %rdi
    0000026e: 	movl	0x20(%rdi), %esi
    00000271: 	orl	$0x1, %esi
    00000274: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 628
    00000279: 	jmp	.Ltmp1069 # Offset: 633
.Ltmp1065:
    0000027b: 	xorl	%ebp, %ebp
    0000027d: 	xorl	%eax, %eax
    0000027f: 	jmp	.Ltmp1070 # Offset: 639
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_memset_overwrite4IiEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite4IiEvPT_iPKc" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x1c6c0
  Size        : 0x295
  MaxSize     : 0x2a0
  Offset      : 0x1c6c0
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%rdx, 0x18(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %ecx
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%ecx, %ecx
    00000030: 	jle	.Ltmp1071 # Offset: 48
    00000036: 	cvttsd2si	init_value(%rip), %ebx
    0000003e: 	leal	-0x3(%rbp), %eax
    00000041: 	xorl	%r12d, %r12d
    00000044: 	movl	%eax, 0xc(%rsp)
    00000048: 	leal	-0x1(%rbp), %eax
    0000004b: 	leaq	0x4(,%rax,4), %rax
    00000053: 	movq	%rax, 0x10(%rsp)
    00000058: 	leal	-0x4(%rbp), %eax
    0000005b: 	shrl	$0x2, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x14(%r14,%rax), %r8
    00000067: 	leaq	0x18(%r14,%rax), %r13
    0000006c: 	leaq	0x1c(%r14,%rax), %r15
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1077:
    00000078: 	testl	%ebp, %ebp
    0000007a: 	jle	.Ltmp1072 # Offset: 122
    0000007c: 	movq	0x10(%rsp), %rdx
    00000081: 	xorl	%esi, %esi
    00000083: 	movq	%r14, %rdi
    00000086: 	movq	%r8, (%rsp)
    0000008a: 	callq	memset@PLT # Offset: 138
    0000008f: 	movq	(%rsp), %r8
.Ltmp1072:
    00000093: 	movl	0xc(%rsp), %edx
    00000097: 	leaq	0x4(%r14), %rax
    0000009b: 	testl	%edx, %edx
    0000009d: 	jle	.Ltmp1073 # Offset: 157
    0000009f: 	nop # Size: 1
.Ltmp1074:
    000000a0: 	movl	%ebx, (%rax)
    000000a2: 	addq	$0x10, %rax
    000000a6: 	cmpq	%r8, %rax
    000000a9: 	jne	.Ltmp1074 # Offset: 169
    000000ab: 	leaq	0x8(%r14), %rax
    000000af: 	nop # Size: 1
.Ltmp1075:
    000000b0: 	movl	%ebx, (%rax)
    000000b2: 	addq	$0x10, %rax
    000000b6: 	cmpq	%r13, %rax
    000000b9: 	jne	.Ltmp1075 # Offset: 185
    000000bb: 	leaq	0xc(%r14), %rax
    000000bf: 	nop # Size: 1
.Ltmp1076:
    000000c0: 	movl	$0x1, (%rax)
    000000c6: 	addq	$0x10, %rax
    000000ca: 	cmpq	%r15, %rax
    000000cd: 	jne	.Ltmp1076 # Offset: 205
.Ltmp1073:
    000000cf: 	addl	$0x1, %r12d
    000000d3: 	cmpl	%r12d, iterations(%rip)
    000000da: 	jg	.Ltmp1077 # Offset: 218
.Ltmp1071:
    000000dc: 	callq	clock@PLT # Offset: 220
    000000e1: 	movq	0x18(%rsp), %rdi
    000000e6: 	pxor	%xmm0, %xmm0
    000000ea: 	movq	%rax, end_time(%rip)
    000000f1: 	subq	start_time(%rip), %rax
    000000f8: 	cvtsi2sd	%rax, %xmm0
    000000fd: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000105: 	callq	_Z13record_resultdPKc # Offset: 261
    0000010a: 	testl	%ebp, %ebp
    0000010c: 	jle	.Ltmp1078 # Offset: 268
    00000112: 	leal	-0x1(%rbp), %eax
    00000115: 	cmpl	$0x2, %eax
    00000118: 	jbe	.Ltmp1079 # Offset: 280
    0000011e: 	movl	%ebp, %edx
    00000120: 	movq	%r14, %rax
    00000123: 	pxor	%xmm0, %xmm0
    00000127: 	shrl	$0x2, %edx
    0000012a: 	subl	$0x1, %edx
    0000012d: 	shlq	$0x4, %rdx
    00000131: 	leaq	0x10(%r14,%rdx), %rdx
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1080:
    00000140: 	movdqu	(%rax), %xmm2
    00000144: 	addq	$0x10, %rax
    00000148: 	paddd	%xmm2, %xmm0
    0000014c: 	cmpq	%rax, %rdx
    0000014f: 	jne	.Ltmp1080 # Offset: 335
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	movl	%ebp, %eax
    00000157: 	psrldq	$0x8, %xmm1
    0000015c: 	andl	$-0x4, %eax
    0000015f: 	paddd	%xmm1, %xmm0
    00000163: 	movdqa	%xmm0, %xmm1
    00000167: 	psrldq	$0x4, %xmm1
    0000016c: 	paddd	%xmm1, %xmm0
    00000170: 	movd	%xmm0, %r12d
    00000175: 	testb	$0x3, %bpl
    00000179: 	je	.Ltmp1081 # Offset: 377
.Ltmp1085:
    0000017b: 	movslq	%eax, %rdx
    0000017e: 	leaq	(,%rdx,4), %rcx
    00000186: 	addl	(%r14,%rdx,4), %r12d
    0000018a: 	leal	0x1(%rax), %edx
    0000018d: 	cmpl	%edx, %ebp
    0000018f: 	jle	.Ltmp1081 # Offset: 399
    00000191: 	addl	$0x2, %eax
    00000194: 	addl	0x4(%r14,%rcx), %r12d
    00000199: 	cmpl	%ebp, %eax
    0000019b: 	jge	.Ltmp1081 # Offset: 411
    0000019d: 	addl	0x8(%r14,%rcx), %r12d
.Ltmp1081:
    000001a2: 	movsd	init_value(%rip), %xmm0
    000001aa: 	addsd	%xmm0, %xmm0
    000001ae: 	addsd	DATAat0x36fb0(%rip), %xmm0
    000001b6: 	cvttsd2si	%xmm0, %ebp
    000001ba: 	imull	$0x1e8480, %ebp, %ebp
    000001c0: 	cmpl	%r12d, %ebp
    000001c3: 	jne	.Ltmp1082 # Offset: 451
    000001c5: 	addq	$0x28, %rsp
    000001c9: 	popq	%rbx
    000001ca: 	popq	%rbp
    000001cb: 	popq	%r12
    000001cd: 	popq	%r13
    000001cf: 	popq	%r14
    000001d1: 	popq	%r15
    000001d3: 	retq # Offset: 467
.Ltmp1082:
    000001d4: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001db: 	movl	$0x5, %edx
    000001e0: 	leaq	DATAat0x35004(%rip), %rsi
    000001e7: 	movq	%r13, %rdi
    000001ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 490
    000001ef: 	cmpq	$0x0, 0x18(%rsp)
    000001f5: 	je	.Ltmp1083 # Offset: 501
    000001f7: 	movq	0x18(%rsp), %rbx
    000001fc: 	movq	%rbx, %rdi
    000001ff: 	callq	strlen@PLT # Offset: 511
    00000204: 	movq	%rbx, %rsi
    00000207: 	movq	%r13, %rdi
    0000020a: 	movq	%rax, %rdx
    0000020d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 525
.Ltmp1084:
    00000212: 	movl	$0xd, %edx
    00000217: 	movq	%r13, %rdi
    0000021a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000221: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 545
    00000226: 	movl	%r12d, %esi
    00000229: 	movq	%r13, %rdi
    0000022c: 	callq	_ZNSolsEi@PLT # Offset: 556
    00000231: 	movl	$0xb, %edx
    00000236: 	leaq	DATAat0x35018(%rip), %rsi
    0000023d: 	movq	%rax, %r12
    00000240: 	movq	%rax, %rdi
    00000243: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 579
    00000248: 	movq	%r12, %rdi
    0000024b: 	movl	%ebp, %esi
    0000024d: 	callq	_ZNSolsEi@PLT # Offset: 589
    00000252: 	addq	$0x28, %rsp
    00000256: 	popq	%rbx
    00000257: 	movq	%rax, %rdi
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 611
.Ltmp1083:
    00000268: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000026f: 	movq	-0x18(%rax), %rdi
    00000273: 	addq	%r13, %rdi
    00000276: 	movl	0x20(%rdi), %esi
    00000279: 	orl	$0x1, %esi
    0000027c: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 636
    00000281: 	jmp	.Ltmp1084 # Offset: 641
.Ltmp1078:
    00000283: 	xorl	%r12d, %r12d
    00000286: 	jmp	.Ltmp1081 # Offset: 646
.Ltmp1079:
    0000028b: 	xorl	%r12d, %r12d
    0000028e: 	xorl	%eax, %eax
    00000290: 	jmp	.Ltmp1085 # Offset: 656
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite4IiEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite2IdEvPT_iPKc" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x1c960
  Size        : 0x467
  MaxSize     : 0x470
  Offset      : 0x1c960
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite2IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x38, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movq	%rax, start_time(%rip)
    00000028: 	movl	iterations(%rip), %eax
    0000002e: 	movl	%eax, 0x1c(%rsp)
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp1086 # Offset: 52
    0000003a: 	leal	-0x1(%rbp), %eax
    0000003d: 	movl	$0x0, (%rsp)
    00000044: 	xorl	%r15d, %r15d
    00000047: 	movl	%ebp, %r8d
    0000004a: 	movl	%eax, 0x10(%rsp)
    0000004e: 	leal	-0x100(%rbp), %eax
    00000054: 	leaq	init_value(%rip), %r13
    0000005b: 	xorb	%al, %al
    0000005d: 	leal	-0xff(%rbp), %r14d
    00000064: 	leaq	0x8(%r13), %r12
    00000068: 	addl	$0x100, %eax
    0000006d: 	movl	%eax, 0x28(%rsp)
    00000071: 	leaq	0x8(%rbx), %rax
    00000075: 	movq	%rax, 0x20(%rsp)
.Ltmp1095:
    0000007a: 	movq	0x20(%rsp), %rdx
    0000007f: 	xorl	%r9d, %r9d
    00000082: 	xorl	%ebp, %ebp
    00000084: 	testl	%r14d, %r14d
    00000087: 	jle	.Ltmp1087 # Offset: 135
.Ltmp1090:
    0000008d: 	movq	%rdx, %rdi
    00000090: 	leaq	0x7f8(%rdx), %r10
    00000097: 	movq	%r15, %rax
    0000009a: 	movl	$0xff, %ecx
    0000009f: 	leaq	0x800(%rdx), %rsi
    000000a6: 	andq	$-0x8, %rdi
    000000aa: 	movq	$0x0, -0x8(%rdx)
    000000b2: 	cmpq	%r13, %r10
    000000b5: 	movq	$0x0, -0x10(%rsi)
    000000bd: 	rep		stosq	%rax, %es:(%rdi)
    000000c0: 	movq	%rdx, %rax
    000000c3: 	setbe	%dl
    000000c6: 	leaq	0xff(%r9), %rcx
    000000cd: 	cmpq	%r12, %rax
    000000d0: 	setae	%dil
    000000d4: 	orb	%dil, %dl
    000000d7: 	leaq	0x100(%r9), %rdi
    000000de: 	je	.Ltmp1088 # Offset: 222
    000000e4: 	leaq	0x2(%r9), %rdx
    000000e8: 	leaq	0x100(%r9), %rdi
    000000ef: 	cmpq	%rdi, %rdx
    000000f2: 	ja	.Ltmp1088 # Offset: 242
    000000f8: 	movsd	init_value(%rip), %xmm0
    00000100: 	xorl	%edx, %edx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1089:
    00000108: 	addq	$0x1, %rdx
    0000010c: 	movsd	%xmm0, (%rax)
    00000110: 	addq	$0x20, %rax
    00000114: 	movsd	%xmm0, -0x10(%rax)
    00000119: 	cmpq	$0x40, %rdx
    0000011d: 	jne	.Ltmp1089 # Offset: 285
    0000011f: 	movq	%rdi, %r9
    00000122: 	movq	%rsi, %rdx
    00000125: 	cmpl	%edi, %r14d
    00000128: 	jg	.Ltmp1090 # Offset: 296
.Ltmp1103:
    0000012e: 	movl	0x28(%rsp), %ebp
.Ltmp1087:
    00000132: 	cmpl	%ebp, %r8d
    00000135: 	jle	.Ltmp1091 # Offset: 309
    00000137: 	movl	0x10(%rsp), %eax
    0000013b: 	xorl	%esi, %esi
    0000013d: 	movl	%r8d, 0x2c(%rsp)
    00000142: 	subl	%ebp, %eax
    00000144: 	leaq	0x8(,%rax,8), %rdx
    0000014c: 	movslq	%ebp, %rax
    0000014f: 	leaq	(%rbx,%rax,8), %rdi
    00000153: 	callq	memset@PLT # Offset: 339
    00000158: 	movl	0x2c(%rsp), %r8d
.Ltmp1091:
    0000015d: 	cmpl	0x10(%rsp), %ebp
    00000161: 	jge	.Ltmp1092 # Offset: 353
    00000167: 	leal	-0x2(%r8), %esi
    0000016b: 	movslq	%ebp, %rdi
    0000016e: 	subl	%ebp, %esi
    00000170: 	leaq	0x8(,%rdi,8), %r9
    00000178: 	movl	%esi, %edx
    0000017a: 	leaq	(%rbx,%r9), %rax
    0000017e: 	shrl	%edx
    00000180: 	leal	0x1(%rdx), %r10d
    00000184: 	movq	%r10, %rcx
    00000187: 	leaq	(%rdi,%r10,2), %r10
    0000018b: 	leaq	(%rbx,%r10,8), %r10
    0000018f: 	cmpq	%r13, %r10
    00000192: 	setbe	%r11b
    00000196: 	cmpq	%r12, %rax
    00000199: 	setae	%r10b
    0000019d: 	orb	%r11b, %r10b
    000001a0: 	je	.Ltmp1093 # Offset: 416
    000001a6: 	cmpl	$0x1d, %esi
    000001a9: 	jbe	.Ltmp1093 # Offset: 425
    000001af: 	movl	%ecx, %edx
    000001b1: 	movsd	init_value(%rip), %xmm0
    000001b9: 	shrl	%edx
    000001bb: 	subl	$0x1, %edx
    000001be: 	shlq	$0x5, %rdx
    000001c2: 	leaq	0x20(%rax,%rdx), %rdx
.Ltmp1094:
    000001c7: 	movsd	%xmm0, (%rax)
    000001cb: 	addq	$0x20, %rax
    000001cf: 	movsd	%xmm0, -0x10(%rax)
    000001d4: 	cmpq	%rax, %rdx
    000001d7: 	jne	.Ltmp1094 # Offset: 471
    000001d9: 	movl	%ecx, %edx
    000001db: 	andl	$-0x2, %edx
    000001de: 	leal	(%rbp,%rdx,2), %eax
    000001e2: 	cmpl	%edx, %ecx
    000001e4: 	je	.Ltmp1092 # Offset: 484
    000001e6: 	movsd	init_value(%rip), %xmm0
    000001ee: 	addl	$0x1, %eax
    000001f1: 	cltq
    000001f3: 	movsd	%xmm0, (%rbx,%rax,8)
.Ltmp1092:
    000001f8: 	addl	$0x1, (%rsp)
    000001fc: 	movl	(%rsp), %eax
    000001ff: 	cmpl	0x1c(%rsp), %eax
    00000203: 	jne	.Ltmp1095 # Offset: 515
    00000209: 	movl	%r8d, %ebp
.Ltmp1086:
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	0x8(%rsp), %rdi
    00000216: 	pxor	%xmm0, %xmm0
    0000021a: 	movq	%rax, end_time(%rip)
    00000221: 	subq	start_time(%rip), %rax
    00000228: 	cvtsi2sd	%rax, %xmm0
    0000022d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000235: 	callq	_Z13record_resultdPKc # Offset: 565
    0000023a: 	testl	%ebp, %ebp
    0000023c: 	jle	.Ltmp1096 # Offset: 572
    00000242: 	cmpl	$0x1, %ebp
    00000245: 	je	.Ltmp1097 # Offset: 581
    0000024b: 	movl	%ebp, %edx
    0000024d: 	movq	%rbx, %rax
    00000250: 	pxor	%xmm0, %xmm0
    00000254: 	shrl	%edx
    00000256: 	subl	$0x1, %edx
    00000259: 	shlq	$0x4, %rdx
    0000025d: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp1098:
    00000262: 	movsd	(%rax), %xmm1
    00000266: 	addq	$0x10, %rax
    0000026a: 	addsd	%xmm1, %xmm0
    0000026e: 	movsd	-0x8(%rax), %xmm1
    00000273: 	addsd	%xmm1, %xmm0
    00000277: 	cmpq	%rdx, %rax
    0000027a: 	jne	.Ltmp1098 # Offset: 634
    0000027c: 	movl	%ebp, %eax
    0000027e: 	andl	$-0x2, %eax
    00000281: 	andl	$0x1, %ebp
    00000284: 	je	.Ltmp1099 # Offset: 644
.Ltmp1107:
    00000286: 	cltq
    00000288: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1099:
    0000028d: 	movsd	DATAat0x36ed0(%rip), %xmm1
    00000295: 	mulsd	init_value(%rip), %xmm1
    0000029d: 	movapd	%xmm0, %xmm3
    000002a1: 	movq	DATAat0x36f60(%rip), %xmm2
    000002a9: 	andpd	%xmm2, %xmm3
    000002ad: 	comisd	DATAat0x36ed8(%rip), %xmm3
    000002b5: 	movapd	%xmm1, %xmm4
    000002b9: 	movsd	%xmm1, (%rsp)
    000002be: 	movapd	%xmm0, %xmm1
    000002c2: 	subsd	%xmm4, %xmm1
    000002c6: 	jbe	.Ltmp1100 # Offset: 710
    000002c8: 	divsd	%xmm0, %xmm1
.Ltmp1100:
    000002cc: 	andpd	%xmm2, %xmm1
    000002d0: 	movsd	DATAat0x36ee0(%rip), %xmm2
    000002d8: 	comisd	%xmm1, %xmm2
    000002dc: 	jbe	.Ltmp1101 # Offset: 732
    000002de: 	addq	$0x38, %rsp
    000002e2: 	popq	%rbx
    000002e3: 	popq	%rbp
    000002e4: 	popq	%r12
    000002e6: 	popq	%r13
    000002e8: 	popq	%r14
    000002ea: 	popq	%r15
    000002ec: 	retq # Offset: 748
.Ltmp1088:
    000002ed: 	movq	%r9, %rax
.Ltmp1102:
    000002f0: 	movsd	init_value(%rip), %xmm0
    000002f8: 	movsd	%xmm0, 0x8(%rbx,%rax,8)
    000002fe: 	addq	$0x2, %rax
    00000302: 	cmpq	%rax, %rcx
    00000305: 	ja	.Ltmp1102 # Offset: 773
    00000307: 	movq	%rdi, %r9
    0000030a: 	movq	%rsi, %rdx
    0000030d: 	cmpl	%edi, %r14d
    00000310: 	jg	.Ltmp1090 # Offset: 784
    00000316: 	jmp	.Ltmp1103 # Offset: 790
.Ltmp1093:
    0000031b: 	leaq	(%rdi,%rdx,2), %rdx
    0000031f: 	leaq	-0x8(%rbx,%r9), %rax
    00000324: 	leaq	0x10(%rbx,%rdx,8), %rdx
.Ltmp1104:
    00000329: 	movsd	init_value(%rip), %xmm0
    00000331: 	addq	$0x10, %rax
    00000335: 	movsd	%xmm0, -0x8(%rax)
    0000033a: 	cmpq	%rax, %rdx
    0000033d: 	jne	.Ltmp1104 # Offset: 829
    0000033f: 	jmp	.Ltmp1092 # Offset: 831
.Ltmp1101:
    00000344: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000034b: 	movl	$0x5, %edx
    00000350: 	leaq	DATAat0x35004(%rip), %rsi
    00000357: 	movsd	%xmm0, 0x10(%rsp)
    0000035d: 	movq	%rbp, %rdi
    00000360: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 864
    00000365: 	cmpq	$0x0, 0x8(%rsp)
    0000036b: 	movsd	0x10(%rsp), %xmm0
    00000371: 	je	.Ltmp1105 # Offset: 881
    00000377: 	movq	0x8(%rsp), %rbx
    0000037c: 	movsd	%xmm0, 0x10(%rsp)
    00000382: 	movq	%rbx, %rdi
    00000385: 	callq	strlen@PLT # Offset: 901
    0000038a: 	movq	%rbx, %rsi
    0000038d: 	movq	%rbp, %rdi
    00000390: 	movq	%rax, %rdx
    00000393: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 915
    00000398: 	movsd	0x10(%rsp), %xmm0
.Ltmp1106:
    0000039e: 	movl	$0xd, %edx
    000003a3: 	leaq	DATAat0x3500a(%rip), %rsi
    000003aa: 	movq	%rbp, %rdi
    000003ad: 	movsd	%xmm0, 0x8(%rsp)
    000003b3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 947
    000003b8: 	movsd	0x8(%rsp), %xmm0
    000003be: 	movq	%rbp, %rdi
    000003c1: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 961
    000003c6: 	movl	$0xb, %edx
    000003cb: 	leaq	DATAat0x35018(%rip), %rsi
    000003d2: 	movq	%rax, %rdi
    000003d5: 	movq	%rax, %rbp
    000003d8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 984
    000003dd: 	movsd	(%rsp), %xmm0
    000003e2: 	movq	%rbp, %rdi
    000003e5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 997
    000003ea: 	addq	$0x38, %rsp
    000003ee: 	popq	%rbx
    000003ef: 	movq	%rax, %rdi
    000003f2: 	popq	%rbp
    000003f3: 	popq	%r12
    000003f5: 	popq	%r13
    000003f7: 	popq	%r14
    000003f9: 	popq	%r15
    000003fb: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1019
.Ltmp1105:
    00000400: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000407: 	movsd	%xmm0, 0x8(%rsp)
    0000040d: 	movq	-0x18(%rax), %rdi
    00000411: 	addq	%rbp, %rdi
    00000414: 	movl	0x20(%rdi), %esi
    00000417: 	orl	$0x1, %esi
    0000041a: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1050
    0000041f: 	movsd	0x8(%rsp), %xmm0
    00000425: 	jmp	.Ltmp1106 # Offset: 1061
.Ltmp1096:
    0000042a: 	movsd	DATAat0x36ed0(%rip), %xmm0
    00000432: 	mulsd	init_value(%rip), %xmm0
    0000043a: 	movq	DATAat0x36f60(%rip), %xmm2
    00000442: 	movapd	%xmm0, %xmm5
    00000446: 	movsd	%xmm0, (%rsp)
    0000044b: 	pxor	%xmm0, %xmm0
    0000044f: 	movapd	%xmm0, %xmm1
    00000453: 	subsd	%xmm5, %xmm1
    00000457: 	jmp	.Ltmp1100 # Offset: 1111
.Ltmp1097:
    0000045c: 	xorl	%eax, %eax
    0000045e: 	pxor	%xmm0, %xmm0
    00000462: 	jmp	.Ltmp1107 # Offset: 1122
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite2IdEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite2IdEvPT_iPKc" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x1cdd0
  Size        : 0x383
  MaxSize     : 0x390
  Offset      : 0x1cdd0
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite2IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%rdx, 0x18(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movq	%rax, start_time(%rip)
    00000028: 	movl	iterations(%rip), %eax
    0000002e: 	movl	%eax, 0x8(%rsp)
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp1108 # Offset: 52
    0000003a: 	leal	-0x2(%rbx), %esi
    0000003d: 	leal	-0x1(%rbx), %eax
    00000040: 	movl	%esi, %ecx
    00000042: 	movl	%eax, (%rsp)
    00000045: 	leaq	init_value(%rip), %rdx
    0000004c: 	shrl	%ecx
    0000004e: 	leal	0x1(%rcx), %eax
    00000051: 	movl	%eax, 0x10(%rsp)
    00000055: 	shlq	$0x4, %rax
    00000059: 	addq	%rbp, %rax
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	setbe	%al
    00000062: 	cmpq	%rdx, %rbp
    00000065: 	setae	%dl
    00000068: 	orb	%dl, %al
    0000006a: 	je	.Ltmp1109 # Offset: 106
    00000070: 	cmpl	$0x1d, %esi
    00000073: 	jbe	.Ltmp1109 # Offset: 115
    00000079: 	movl	(%rsp), %eax
    0000007c: 	movl	0x10(%rsp), %ecx
    00000080: 	xorl	%r14d, %r14d
    00000083: 	leaq	0x8(,%rax,8), %r15
    0000008b: 	movl	%ecx, %eax
    0000008d: 	andl	$-0x2, %ecx
    00000090: 	shrl	%eax
    00000092: 	movl	%ecx, 0x14(%rsp)
    00000096: 	subl	$0x1, %eax
    00000099: 	shlq	$0x5, %rax
    0000009d: 	leaq	0x28(%rbp,%rax), %r12
    000000a2: 	leal	0x1(%rcx,%rcx), %eax
    000000a6: 	cltq
    000000a8: 	leaq	(%rbp,%rax,8), %r13
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp1113:
    000000b0: 	testl	%ebx, %ebx
    000000b2: 	jle	.Ltmp1110 # Offset: 178
    000000b4: 	movq	%r15, %rdx
    000000b7: 	xorl	%esi, %esi
    000000b9: 	movq	%rbp, %rdi
    000000bc: 	callq	memset@PLT # Offset: 188
.Ltmp1110:
    000000c1: 	movl	(%rsp), %edx
    000000c4: 	testl	%edx, %edx
    000000c6: 	jle	.Ltmp1111 # Offset: 198
    000000c8: 	movsd	init_value(%rip), %xmm0
    000000d0: 	leaq	0x8(%rbp), %rax
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1112:
    000000d8: 	movsd	%xmm0, (%rax)
    000000dc: 	addq	$0x20, %rax
    000000e0: 	movsd	%xmm0, -0x10(%rax)
    000000e5: 	cmpq	%rax, %r12
    000000e8: 	jne	.Ltmp1112 # Offset: 232
    000000ea: 	movl	0x14(%rsp), %ecx
    000000ee: 	cmpl	%ecx, 0x10(%rsp)
    000000f2: 	je	.Ltmp1111 # Offset: 242
    000000f4: 	movsd	init_value(%rip), %xmm0
    000000fc: 	movsd	%xmm0, (%r13)
.Ltmp1111:
    00000102: 	addl	$0x1, %r14d
    00000106: 	cmpl	0x8(%rsp), %r14d
    0000010b: 	jne	.Ltmp1113 # Offset: 267
.Ltmp1108:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	movq	0x18(%rsp), %rdi
    00000117: 	pxor	%xmm0, %xmm0
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000136: 	callq	_Z13record_resultdPKc # Offset: 310
    0000013b: 	testl	%ebx, %ebx
    0000013d: 	jle	.Ltmp1114 # Offset: 317
    00000143: 	cmpl	$0x1, %ebx
    00000146: 	je	.Ltmp1115 # Offset: 326
    0000014c: 	movl	%ebx, %edx
    0000014e: 	movq	%rbp, %rax
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	shrl	%edx
    00000157: 	subl	$0x1, %edx
    0000015a: 	shlq	$0x4, %rdx
    0000015e: 	leaq	0x10(%rbp,%rdx), %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1116:
    00000168: 	movsd	(%rax), %xmm1
    0000016c: 	addq	$0x10, %rax
    00000170: 	addsd	%xmm1, %xmm0
    00000174: 	movsd	-0x8(%rax), %xmm1
    00000179: 	addsd	%xmm1, %xmm0
    0000017d: 	cmpq	%rdx, %rax
    00000180: 	jne	.Ltmp1116 # Offset: 384
    00000182: 	movl	%ebx, %eax
    00000184: 	andl	$-0x2, %eax
    00000187: 	andl	$0x1, %ebx
    0000018a: 	je	.Ltmp1117 # Offset: 394
.Ltmp1126:
    0000018c: 	cltq
    0000018e: 	addsd	(%rbp,%rax,8), %xmm0
.Ltmp1117:
    00000194: 	movsd	DATAat0x36ed0(%rip), %xmm2
    0000019c: 	movq	DATAat0x36f60(%rip), %xmm3
    000001a4: 	movapd	%xmm0, %xmm4
    000001a8: 	movapd	%xmm0, %xmm1
    000001ac: 	mulsd	init_value(%rip), %xmm2
    000001b4: 	andpd	%xmm3, %xmm4
    000001b8: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000001c0: 	subsd	%xmm2, %xmm1
    000001c4: 	jbe	.Ltmp1118 # Offset: 452
    000001c6: 	divsd	%xmm0, %xmm1
.Ltmp1118:
    000001ca: 	andpd	%xmm3, %xmm1
    000001ce: 	movsd	DATAat0x36ee0(%rip), %xmm3
    000001d6: 	comisd	%xmm1, %xmm3
    000001da: 	jbe	.Ltmp1119 # Offset: 474
    000001dc: 	addq	$0x28, %rsp
    000001e0: 	popq	%rbx
    000001e1: 	popq	%rbp
    000001e2: 	popq	%r12
    000001e4: 	popq	%r13
    000001e6: 	popq	%r14
    000001e8: 	popq	%r15
    000001ea: 	retq # Offset: 490
.Ltmp1119:
    000001eb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000001f2: 	movl	$0x5, %edx
    000001f7: 	movsd	%xmm2, (%rsp)
    000001fc: 	leaq	DATAat0x35004(%rip), %rsi
    00000203: 	movq	%rbp, %rdi
    00000206: 	movsd	%xmm0, 0x8(%rsp)
    0000020c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 524
    00000211: 	cmpq	$0x0, 0x18(%rsp)
    00000217: 	movsd	(%rsp), %xmm2
    0000021c: 	movsd	0x8(%rsp), %xmm0
    00000222: 	je	.Ltmp1120 # Offset: 546
    00000228: 	movq	0x18(%rsp), %rbx
    0000022d: 	movsd	%xmm0, 0x8(%rsp)
    00000233: 	movsd	%xmm2, (%rsp)
    00000238: 	movq	%rbx, %rdi
    0000023b: 	callq	strlen@PLT # Offset: 571
    00000240: 	movq	%rbx, %rsi
    00000243: 	movq	%rbp, %rdi
    00000246: 	movq	%rax, %rdx
    00000249: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 585
    0000024e: 	movsd	0x8(%rsp), %xmm0
    00000254: 	movsd	(%rsp), %xmm2
.Ltmp1125:
    00000259: 	movl	$0xd, %edx
    0000025e: 	leaq	DATAat0x3500a(%rip), %rsi
    00000265: 	movq	%rbp, %rdi
    00000268: 	movsd	%xmm2, (%rsp)
    0000026d: 	movsd	%xmm0, 0x8(%rsp)
    00000273: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 627
    00000278: 	movsd	0x8(%rsp), %xmm0
    0000027e: 	movq	%rbp, %rdi
    00000281: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 641
    00000286: 	movl	$0xb, %edx
    0000028b: 	leaq	DATAat0x35018(%rip), %rsi
    00000292: 	movq	%rax, %rdi
    00000295: 	movq	%rax, %rbp
    00000298: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 664
    0000029d: 	movsd	(%rsp), %xmm2
    000002a2: 	movq	%rbp, %rdi
    000002a5: 	movapd	%xmm2, %xmm0
    000002a9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 681
    000002ae: 	addq	$0x28, %rsp
    000002b2: 	popq	%rbx
    000002b3: 	movq	%rax, %rdi
    000002b6: 	popq	%rbp
    000002b7: 	popq	%r12
    000002b9: 	popq	%r13
    000002bb: 	popq	%r14
    000002bd: 	popq	%r15
    000002bf: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 703
.Ltmp1109:
    000002c4: 	movl	(%rsp), %eax
    000002c7: 	shlq	$0x4, %rcx
    000002cb: 	xorl	%r15d, %r15d
    000002ce: 	leaq	0x18(%rbp,%rcx), %r14
    000002d3: 	leaq	0x8(,%rax,8), %r13
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1124:
    000002e0: 	testl	%ebx, %ebx
    000002e2: 	jle	.Ltmp1121 # Offset: 738
    000002e4: 	movq	%r13, %rdx
    000002e7: 	xorl	%esi, %esi
    000002e9: 	movq	%rbp, %rdi
    000002ec: 	callq	memset@PLT # Offset: 748
.Ltmp1121:
    000002f1: 	movl	(%rsp), %eax
    000002f4: 	testl	%eax, %eax
    000002f6: 	jle	.Ltmp1122 # Offset: 758
    000002f8: 	leaq	0x8(%rbp), %rax
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp1123:
    00000300: 	movsd	init_value(%rip), %xmm0
    00000308: 	addq	$0x10, %rax
    0000030c: 	movsd	%xmm0, -0x10(%rax)
    00000311: 	cmpq	%r14, %rax
    00000314: 	jne	.Ltmp1123 # Offset: 788
.Ltmp1122:
    00000316: 	addl	$0x1, %r15d
    0000031a: 	cmpl	%r15d, 0x8(%rsp)
    0000031f: 	jne	.Ltmp1124 # Offset: 799
    00000321: 	jmp	.Ltmp1108 # Offset: 801
.Ltmp1114:
    00000326: 	movsd	DATAat0x36ed0(%rip), %xmm2
    0000032e: 	mulsd	init_value(%rip), %xmm2
    00000336: 	pxor	%xmm0, %xmm0
    0000033a: 	movapd	%xmm0, %xmm1
    0000033e: 	movq	DATAat0x36f60(%rip), %xmm3
    00000346: 	subsd	%xmm2, %xmm1
    0000034a: 	jmp	.Ltmp1118 # Offset: 842
.Ltmp1120:
    0000034f: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000356: 	movq	-0x18(%rax), %rdi
    0000035a: 	addq	%rbp, %rdi
    0000035d: 	movl	0x20(%rdi), %esi
    00000360: 	orl	$0x1, %esi
    00000363: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 867
    00000368: 	movsd	(%rsp), %xmm2
    0000036d: 	movsd	0x8(%rsp), %xmm0
    00000373: 	jmp	.Ltmp1125 # Offset: 883
.Ltmp1115:
    00000378: 	pxor	%xmm0, %xmm0
    0000037c: 	xorl	%eax, %eax
    0000037e: 	jmp	.Ltmp1126 # Offset: 894
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite2IdEvPT_iPKc"

Binary Function "_Z24test_loop_overwrite3_optIdEvPT_iPKc" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x1d160
  Size        : 0x555
  MaxSize     : 0x560
  Offset      : 0x1d160
  Section     : .text
  Orc Section : .local.text._Z24test_loop_overwrite3_optIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	movq	%rdx, 0x68(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	movl	%eax, (%rsp)
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp1127 # Offset: 52
    0000003a: 	leal	-0x3(%r15), %ebx
    0000003e: 	movl	$0xaaaaaaab, %eax
    00000043: 	leal	-0x2(%r15), %ebp
    00000047: 	movq	%rbx, %rdx
    0000004a: 	imulq	%rax, %rbx
    0000004e: 	shrq	$0x21, %rbx
    00000052: 	leal	0x1(%rbx), %eax
    00000055: 	movq	%rax, %rbx
    00000058: 	leaq	(%rax,%rax,2), %rax
    0000005c: 	leaq	(%r14,%rax,8), %rcx
    00000060: 	leaq	init_value(%rip), %rax
    00000067: 	cmpq	%rax, %rcx
    0000006a: 	leaq	iterations(%rip), %rcx
    00000071: 	setbe	%al
    00000074: 	cmpq	%rcx, %r14
    00000077: 	setae	%cl
    0000007a: 	orb	%cl, %al
    0000007c: 	je	.Ltmp1128 # Offset: 124
    00000082: 	cmpl	$0xe, %edx
    00000085: 	jbe	.Ltmp1128 # Offset: 133
    0000008b: 	movl	%ebx, %eax
    0000008d: 	pxor	%xmm7, %xmm7
    00000091: 	xorl	%r13d, %r13d
    00000094: 	movdqa	DATAat0x36f80(%rip), %xmm6
    0000009c: 	shrl	$0x2, %eax
    0000009f: 	movdqa	DATAat0x36f90(%rip), %xmm5
    000000a7: 	movsd	%xmm7, 0x8(%rsp)
    000000ad: 	subl	$0x1, %eax
    000000b0: 	leaq	(%rax,%rax,2), %rax
    000000b4: 	shlq	$0x5, %rax
    000000b8: 	leaq	0x60(%r14,%rax), %r12
    000000bd: 	movl	%ebx, %eax
    000000bf: 	andl	$-0x4, %eax
    000000c2: 	leal	(%rax,%rax,2), %edx
    000000c5: 	movl	%eax, 0x10(%rsp)
    000000c9: 	movslq	%edx, %rax
    000000cc: 	shlq	$0x3, %rax
    000000d0: 	leaq	(%r14,%rax), %rsi
    000000d4: 	movq	%rsi, 0x28(%rsp)
    000000d9: 	leaq	0x8(%r14,%rax), %rsi
    000000de: 	leaq	0x10(%r14,%rax), %rax
    000000e3: 	movq	%rax, 0x20(%rsp)
    000000e8: 	leal	0x3(%rdx), %eax
    000000eb: 	movl	%eax, 0x14(%rsp)
    000000ef: 	cltq
    000000f1: 	shlq	$0x3, %rax
    000000f5: 	movq	%rsi, 0x18(%rsp)
    000000fa: 	leaq	(%r14,%rax), %rsi
    000000fe: 	movq	%rsi, 0x40(%rsp)
    00000103: 	leaq	0x8(%r14,%rax), %rsi
    00000108: 	leaq	0x10(%r14,%rax), %rax
    0000010d: 	movq	%rax, 0x38(%rsp)
    00000112: 	leal	0x6(%rdx), %eax
    00000115: 	movl	%eax, 0x60(%rsp)
    00000119: 	cltq
    0000011b: 	shlq	$0x3, %rax
    0000011f: 	movq	%rsi, 0x30(%rsp)
    00000124: 	leaq	0x8(%r14,%rax), %rcx
    00000129: 	leaq	(%r14,%rax), %rsi
    0000012d: 	leaq	0x10(%r14,%rax), %rax
    00000132: 	movq	%rsi, 0x48(%rsp)
    00000137: 	movq	%rax, 0x58(%rsp)
    0000013c: 	leal	0x9(%rdx), %eax
    0000013f: 	movq	%rcx, 0x50(%rsp)
    00000144: 	movl	%eax, 0x64(%rsp)
    00000148: 	movl	%r15d, %eax
    0000014b: 	movq	%r12, %r15
    0000014e: 	movq	%r14, %r12
    00000151: 	movl	%ebp, %r14d
    00000154: 	movl	%ebx, %ebp
    00000156: 	movl	%eax, %ebx
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1134:
    00000160: 	xorl	%eax, %eax
    00000162: 	testl	%r14d, %r14d
    00000165: 	jle	.Ltmp1129 # Offset: 357
    0000016b: 	movsd	init_value(%rip), %xmm0
    00000173: 	movsd	0x8(%rsp), %xmm2
    00000179: 	movq	%r12, %rax
    0000017c: 	movdqa	DATAat0x36f70(%rip), %xmm1
    00000184: 	movapd	%xmm0, %xmm4
    00000188: 	movq	%xmm0, %xmm3
    0000018c: 	unpcklpd	%xmm0, %xmm2
    00000190: 	unpcklpd	%xmm4, %xmm4
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1130:
    00000198: 	movdqa	%xmm1, %xmm0
    0000019c: 	movups	%xmm2, (%rax)
    0000019f: 	addq	$0x60, %rax
    000001a3: 	paddd	%xmm6, %xmm1
    000001a7: 	movups	%xmm3, -0x50(%rax)
    000001ab: 	paddd	%xmm5, %xmm0
    000001af: 	movups	%xmm4, -0x40(%rax)
    000001b3: 	movups	%xmm2, -0x30(%rax)
    000001b7: 	movups	%xmm3, -0x20(%rax)
    000001bb: 	movups	%xmm4, -0x10(%rax)
    000001bf: 	cmpq	%r15, %rax
    000001c2: 	jne	.Ltmp1130 # Offset: 450
    000001c4: 	pshufd	$0xff, %xmm0, %xmm0
    000001c9: 	movd	%xmm0, %eax
    000001cd: 	cmpl	0x10(%rsp), %ebp
    000001d1: 	je	.Ltmp1129 # Offset: 465
    000001d7: 	movq	0x28(%rsp), %rax
    000001dc: 	movq	$0x0, (%rax)
    000001e3: 	movq	0x18(%rsp), %rax
    000001e8: 	movsd	init_value(%rip), %xmm0
    000001f0: 	movsd	%xmm0, (%rax)
    000001f4: 	movq	0x20(%rsp), %rax
    000001f9: 	movsd	%xmm0, (%rax)
    000001fd: 	cmpl	%r14d, 0x14(%rsp)
    00000202: 	jge	.Ltmp1131 # Offset: 514
    00000208: 	movq	0x40(%rsp), %rax
    0000020d: 	movq	$0x0, (%rax)
    00000214: 	movq	0x30(%rsp), %rax
    00000219: 	movsd	init_value(%rip), %xmm0
    00000221: 	movsd	%xmm0, (%rax)
    00000225: 	movq	0x38(%rsp), %rax
    0000022a: 	movsd	%xmm0, (%rax)
    0000022e: 	cmpl	0x60(%rsp), %r14d
    00000233: 	jle	.Ltmp1132 # Offset: 563
    00000239: 	movq	0x48(%rsp), %rax
    0000023e: 	movq	$0x0, (%rax)
    00000245: 	movq	0x50(%rsp), %rax
    0000024a: 	movsd	init_value(%rip), %xmm0
    00000252: 	movsd	%xmm0, (%rax)
    00000256: 	movq	0x58(%rsp), %rax
    0000025b: 	movsd	%xmm0, (%rax)
    0000025f: 	movl	0x64(%rsp), %eax
.Ltmp1129:
    00000263: 	cmpl	%eax, %ebx
    00000265: 	jle	.Ltmp1133 # Offset: 613
    00000267: 	leal	-0x1(%rbx), %edx
    0000026a: 	xorl	%esi, %esi
    0000026c: 	subl	%eax, %edx
    0000026e: 	cltq
    00000270: 	leaq	0x8(,%rdx,8), %rdx
    00000278: 	leaq	(%r12,%rax,8), %rdi
    0000027c: 	callq	memset@PLT # Offset: 636
    00000281: 	movdqa	DATAat0x36f90(%rip), %xmm5
    00000289: 	movdqa	DATAat0x36f80(%rip), %xmm6
.Ltmp1133:
    00000291: 	addl	$0x1, %r13d
    00000295: 	cmpl	(%rsp), %r13d
    00000299: 	jne	.Ltmp1134 # Offset: 665
    0000029f: 	movq	%r12, %r14
    000002a2: 	movl	%ebx, %r15d
.Ltmp1146:
    000002a5: 	callq	clock@PLT # Offset: 677
    000002aa: 	movq	0x68(%rsp), %rdi
    000002af: 	pxor	%xmm0, %xmm0
    000002b3: 	movq	%rax, end_time(%rip)
    000002ba: 	subq	start_time(%rip), %rax
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002ce: 	callq	_Z13record_resultdPKc # Offset: 718
    000002d3: 	testl	%r15d, %r15d
    000002d6: 	jle	.Ltmp1135 # Offset: 726
    000002dc: 	cmpl	$0x1, %r15d
    000002e0: 	je	.Ltmp1136 # Offset: 736
    000002e6: 	movl	%r15d, %edx
    000002e9: 	movq	%r14, %rax
    000002ec: 	pxor	%xmm0, %xmm0
    000002f0: 	shrl	%edx
    000002f2: 	subl	$0x1, %edx
    000002f5: 	shlq	$0x4, %rdx
    000002f9: 	leaq	0x10(%r14,%rdx), %rdx
    000002fe: 	nop # Size: 2
.Ltmp1137:
    00000300: 	movsd	(%rax), %xmm1
    00000304: 	addq	$0x10, %rax
    00000308: 	addsd	%xmm1, %xmm0
    0000030c: 	movsd	-0x8(%rax), %xmm1
    00000311: 	addsd	%xmm1, %xmm0
    00000315: 	cmpq	%rax, %rdx
    00000318: 	jne	.Ltmp1137 # Offset: 792
    0000031a: 	movl	%r15d, %eax
    0000031d: 	andl	$-0x2, %eax
    00000320: 	andl	$0x1, %r15d
    00000324: 	je	.Ltmp1138 # Offset: 804
.Ltmp1149:
    00000326: 	cltq
    00000328: 	addsd	(%r14,%rax,8), %xmm0
.Ltmp1138:
    0000032e: 	movsd	init_value(%rip), %xmm1
    00000336: 	movq	DATAat0x36f60(%rip), %xmm3
    0000033e: 	movapd	%xmm0, %xmm4
    00000342: 	movapd	%xmm0, %xmm2
    00000346: 	addsd	%xmm1, %xmm1
    0000034a: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    00000352: 	andpd	%xmm3, %xmm4
    00000356: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000035e: 	subsd	%xmm1, %xmm2
    00000362: 	jbe	.Ltmp1139 # Offset: 866
    00000364: 	divsd	%xmm0, %xmm2
.Ltmp1139:
    00000368: 	andpd	%xmm3, %xmm2
    0000036c: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000374: 	comisd	%xmm2, %xmm3
    00000378: 	jbe	.Ltmp1140 # Offset: 888
    0000037a: 	addq	$0x78, %rsp
    0000037e: 	popq	%rbx
    0000037f: 	popq	%rbp
    00000380: 	popq	%r12
    00000382: 	popq	%r13
    00000384: 	popq	%r14
    00000386: 	popq	%r15
    00000388: 	retq # Offset: 904
.Ltmp1131:
    00000389: 	movl	0x14(%rsp), %eax
    0000038d: 	jmp	.Ltmp1129 # Offset: 909
.Ltmp1132:
    00000392: 	movl	0x60(%rsp), %eax
    00000396: 	jmp	.Ltmp1129 # Offset: 918
.Ltmp1140:
    0000039b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000003a2: 	movl	$0x5, %edx
    000003a7: 	movsd	%xmm1, (%rsp)
    000003ac: 	leaq	DATAat0x35004(%rip), %rsi
    000003b3: 	movq	%rbp, %rdi
    000003b6: 	movsd	%xmm0, 0x8(%rsp)
    000003bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 956
    000003c1: 	cmpq	$0x0, 0x68(%rsp)
    000003c7: 	movsd	(%rsp), %xmm1
    000003cc: 	movsd	0x8(%rsp), %xmm0
    000003d2: 	je	.Ltmp1141 # Offset: 978
    000003d8: 	movq	0x68(%rsp), %rbx
    000003dd: 	movsd	%xmm0, 0x8(%rsp)
    000003e3: 	movsd	%xmm1, (%rsp)
    000003e8: 	movq	%rbx, %rdi
    000003eb: 	callq	strlen@PLT # Offset: 1003
    000003f0: 	movq	%rbx, %rsi
    000003f3: 	movq	%rbp, %rdi
    000003f6: 	movq	%rax, %rdx
    000003f9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1017
    000003fe: 	movsd	0x8(%rsp), %xmm0
    00000404: 	movsd	(%rsp), %xmm1
.Ltmp1148:
    00000409: 	movl	$0xd, %edx
    0000040e: 	leaq	DATAat0x3500a(%rip), %rsi
    00000415: 	movq	%rbp, %rdi
    00000418: 	movsd	%xmm1, (%rsp)
    0000041d: 	movsd	%xmm0, 0x8(%rsp)
    00000423: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1059
    00000428: 	movsd	0x8(%rsp), %xmm0
    0000042e: 	movq	%rbp, %rdi
    00000431: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1073
    00000436: 	movl	$0xb, %edx
    0000043b: 	leaq	DATAat0x35018(%rip), %rsi
    00000442: 	movq	%rax, %rdi
    00000445: 	movq	%rax, %rbp
    00000448: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1096
    0000044d: 	movsd	(%rsp), %xmm1
    00000452: 	movq	%rbp, %rdi
    00000455: 	movapd	%xmm1, %xmm0
    00000459: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1113
    0000045e: 	addq	$0x78, %rsp
    00000462: 	popq	%rbx
    00000463: 	movq	%rax, %rdi
    00000466: 	popq	%rbp
    00000467: 	popq	%r12
    00000469: 	popq	%r13
    0000046b: 	popq	%r14
    0000046d: 	popq	%r15
    0000046f: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1135
.Ltmp1128:
    00000474: 	movl	(%rsp), %r13d
    00000478: 	xorl	%r12d, %r12d
    0000047b: 	leal	-0x1(%r15), %ebx
    0000047f: 	nop # Size: 1
.Ltmp1145:
    00000480: 	testl	%ebp, %ebp
    00000482: 	jle	.Ltmp1142 # Offset: 1154
    00000484: 	movq	%r14, %rax
    00000487: 	xorl	%edx, %edx
    00000489: 	nopl	(%rax) # Size: 7
.Ltmp1143:
    00000490: 	movq	$0x0, (%rax)
    00000497: 	addl	$0x3, %edx
    0000049a: 	addq	$0x18, %rax
    0000049e: 	movsd	init_value(%rip), %xmm0
    000004a6: 	movsd	%xmm0, -0x10(%rax)
    000004ab: 	movsd	%xmm0, -0x8(%rax)
    000004b0: 	cmpl	%edx, %ebp
    000004b2: 	jg	.Ltmp1143 # Offset: 1202
.Ltmp1147:
    000004b4: 	cmpl	%edx, %r15d
    000004b7: 	jle	.Ltmp1144 # Offset: 1207
    000004b9: 	movl	%ebx, %eax
    000004bb: 	xorl	%esi, %esi
    000004bd: 	subl	%edx, %eax
    000004bf: 	movslq	%edx, %rdx
    000004c2: 	leaq	0x8(,%rax,8), %r8
    000004ca: 	leaq	(%r14,%rdx,8), %rdi
    000004ce: 	movq	%r8, %rdx
    000004d1: 	callq	memset@PLT # Offset: 1233
.Ltmp1144:
    000004d6: 	addl	$0x1, %r12d
    000004da: 	cmpl	%r12d, %r13d
    000004dd: 	jne	.Ltmp1145 # Offset: 1245
.Ltmp1127:
    000004df: 	pxor	%xmm7, %xmm7
    000004e3: 	movsd	%xmm7, 0x8(%rsp)
    000004e9: 	jmp	.Ltmp1146 # Offset: 1257
.Ltmp1142:
    000004ee: 	xorl	%edx, %edx
    000004f0: 	jmp	.Ltmp1147 # Offset: 1264
.Ltmp1135:
    000004f2: 	movsd	init_value(%rip), %xmm1
    000004fa: 	movsd	0x8(%rsp), %xmm0
    00000500: 	movq	DATAat0x36f60(%rip), %xmm3
    00000508: 	addsd	%xmm1, %xmm1
    0000050c: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    00000514: 	movapd	%xmm0, %xmm2
    00000518: 	subsd	%xmm1, %xmm2
    0000051c: 	jmp	.Ltmp1139 # Offset: 1308
.Ltmp1141:
    00000521: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000528: 	movq	-0x18(%rax), %rdi
    0000052c: 	addq	%rbp, %rdi
    0000052f: 	movl	0x20(%rdi), %esi
    00000532: 	orl	$0x1, %esi
    00000535: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1333
    0000053a: 	movsd	(%rsp), %xmm1
    0000053f: 	movsd	0x8(%rsp), %xmm0
    00000545: 	jmp	.Ltmp1148 # Offset: 1349
.Ltmp1136:
    0000054a: 	pxor	%xmm0, %xmm0
    0000054e: 	xorl	%eax, %eax
    00000550: 	jmp	.Ltmp1149 # Offset: 1360
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_loop_overwrite3_optIdEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite3IdEvPT_iPKc" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x1d6c0
  Size        : 0x611
  MaxSize     : 0x620
  Offset      : 0x1d6c0
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x38, %rsp
    00000017: 	movl	%esi, 0x1c(%rsp)
    0000001b: 	movq	%rdx, 0x20(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	movl	%eax, 0x2c(%rsp)
    00000036: 	testl	%eax, %eax
    00000038: 	jle	.Ltmp1150 # Offset: 56
    0000003e: 	movslq	%ebx, %rax
    00000041: 	movl	$0x0, 0x28(%rsp)
    00000049: 	leaq	init_value(%rip), %rbp
    00000050: 	subq	$0x200, %rax
    00000056: 	movq	%rax, 0x8(%rsp)
    0000005b: 	leal	-0x2(%rbx), %eax
    0000005e: 	leaq	0x8(%rbp), %rbx
    00000062: 	movl	%eax, 0x10(%rsp)
.Ltmp1166:
    00000066: 	xorl	%r12d, %r12d
    00000069: 	xorl	%r14d, %r14d
    0000006c: 	cmpq	$0x0, 0x8(%rsp)
    00000072: 	movq	%r12, %r15
    00000075: 	je	.Ltmp1151 # Offset: 117
.Ltmp1158:
    0000007b: 	leaq	0x1fe(%r15), %r12
    00000082: 	cmpq	%r14, %r12
    00000085: 	jbe	.Ltmp1152 # Offset: 133
    0000008b: 	movq	%r12, %rdx
    0000008e: 	xorl	%esi, %esi
    00000090: 	leaq	(%r13,%r14,8), %rdi
    00000095: 	subq	%r14, %rdx
    00000098: 	shlq	$0x3, %rdx
    0000009c: 	callq	memset@PLT # Offset: 156
    000000a1: 	leaq	0x1fd(%r15), %rdx
    000000a8: 	leaq	0x1(%r14), %rsi
    000000ac: 	movabsq	$-0x5555555555555555, %rax
    000000b6: 	subq	%r14, %rdx
    000000b9: 	leaq	(,%rsi,8), %r9
    000000c1: 	cmpq	$0x32, %rdx
    000000c5: 	leaq	(%r13,%r9), %rcx
    000000ca: 	seta	%r8b
    000000ce: 	mulq	%rdx
    000000d1: 	movq	%rdx, %rdi
    000000d4: 	andq	$-0x2, %rdx
    000000d8: 	shrq	%rdi
    000000db: 	leaq	(%rdx,%rdi), %rax
    000000df: 	leaq	0x2(%r14,%rax), %rdx
    000000e4: 	shlq	$0x3, %rdx
    000000e8: 	leaq	(%r13,%rdx), %rax
    000000ed: 	cmpq	%rbp, %rax
    000000f0: 	setbe	%al
    000000f3: 	cmpq	%rbx, %rcx
    000000f6: 	setae	%r10b
    000000fa: 	orb	%r10b, %al
    000000fd: 	je	.Ltmp1153 # Offset: 253
    00000103: 	testb	%r8b, %r8b
    00000106: 	je	.Ltmp1153 # Offset: 262
    0000010c: 	leaq	0x1(%rdi), %r11
    00000110: 	movsd	init_value(%rip), %xmm0
    00000118: 	movq	%rcx, %rax
    0000011b: 	xorl	%ecx, %ecx
    0000011d: 	movq	%r11, %r10
    00000120: 	shrq	%r10
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1154:
    00000128: 	addq	$0x1, %rcx
    0000012c: 	movsd	%xmm0, (%rax)
    00000130: 	addq	$0x30, %rax
    00000134: 	movsd	%xmm0, -0x18(%rax)
    00000139: 	cmpq	%r10, %rcx
    0000013c: 	jb	.Ltmp1154 # Offset: 316
    0000013e: 	movq	%r11, %rcx
    00000141: 	andq	$-0x2, %rcx
    00000145: 	leaq	(%rcx,%rcx,2), %rax
    00000149: 	cmpq	%rcx, %r11
    0000014c: 	je	.Ltmp1155 # Offset: 332
    0000014e: 	movsd	init_value(%rip), %xmm0
    00000156: 	addq	%rsi, %rax
    00000159: 	movsd	%xmm0, (%r13,%rax,8)
.Ltmp1155:
    00000160: 	leaq	0x8(%r13,%rdx), %rdx
    00000165: 	leaq	0x8(%r13,%r9), %rax
    0000016a: 	cmpq	%rbp, %rdx
    0000016d: 	leaq	0x2(%r14), %rcx
    00000171: 	setbe	%dl
    00000174: 	cmpq	%rbx, %rax
    00000177: 	setae	%sil
    0000017b: 	orb	%sil, %dl
    0000017e: 	je	.Ltmp1156 # Offset: 382
    00000184: 	testb	%r8b, %r8b
    00000187: 	je	.Ltmp1156 # Offset: 391
    0000018d: 	addq	$0x1, %rdi
    00000191: 	movsd	init_value(%rip), %xmm0
    00000199: 	xorl	%edx, %edx
    0000019b: 	movq	%rdi, %rsi
    0000019e: 	shrq	%rsi
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp1157:
    000001a8: 	addq	$0x1, %rdx
    000001ac: 	movsd	%xmm0, (%rax)
    000001b0: 	addq	$0x30, %rax
    000001b4: 	movsd	%xmm0, -0x18(%rax)
    000001b9: 	cmpq	%rdx, %rsi
    000001bc: 	ja	.Ltmp1157 # Offset: 444
    000001be: 	movq	%rdi, %rdx
    000001c1: 	andq	$-0x2, %rdx
    000001c5: 	leaq	(%rdx,%rdx,2), %rax
    000001c9: 	cmpq	%rdx, %rdi
    000001cc: 	je	.Ltmp1152 # Offset: 460
    000001ce: 	movsd	init_value(%rip), %xmm0
    000001d6: 	addq	%rcx, %rax
    000001d9: 	movsd	%xmm0, (%r13,%rax,8)
.Ltmp1152:
    000001e0: 	movslq	%r12d, %r14
    000001e3: 	movslq	%r12d, %r15
    000001e6: 	cmpq	0x8(%rsp), %r15
    000001eb: 	jb	.Ltmp1158 # Offset: 491
    000001f1: 	cmpl	%r14d, 0x1c(%rsp)
    000001f6: 	jle	.Ltmp1159 # Offset: 502
.Ltmp1151:
    000001f8: 	movl	0x1c(%rsp), %edi
    000001fc: 	leal	-0x1(%rdi), %eax
    000001ff: 	subl	%r14d, %eax
    00000202: 	cmpl	%edi, %r14d
    00000205: 	leaq	0x8(,%rax,8), %rdx
    0000020d: 	movl	$0x8, %eax
    00000212: 	cmovgeq	%rax, %rdx
    00000216: 	movslq	%r14d, %rax
    00000219: 	xorl	%esi, %esi
    0000021b: 	leaq	(%r13,%rax,8), %rdi
    00000220: 	callq	memset@PLT # Offset: 544
.Ltmp1159:
    00000225: 	cmpl	0x10(%rsp), %r14d
    0000022a: 	jge	.Ltmp1160 # Offset: 554
    00000230: 	movl	0x1c(%rsp), %eax
    00000234: 	movl	$0xaaaaaaab, %esi
    00000239: 	movslq	%r14d, %rcx
    0000023c: 	leaq	0x8(,%rcx,8), %r8
    00000244: 	leal	-0x3(%rax), %edx
    00000247: 	leaq	(%r13,%r8), %rax
    0000024c: 	subl	%r14d, %edx
    0000024f: 	cmpl	$0x2c, %edx
    00000252: 	seta	%dil
    00000256: 	imulq	%rsi, %rdx
    0000025a: 	shrq	$0x21, %rdx
    0000025e: 	leal	0x1(%rdx), %esi
    00000261: 	movq	%rsi, %rdx
    00000264: 	leaq	(%rsi,%rsi,2), %rsi
    00000268: 	leaq	0x1(%rcx,%rsi), %rsi
    0000026d: 	shlq	$0x3, %rsi
    00000271: 	leaq	-0x10(%r13,%rsi), %r9
    00000276: 	cmpq	%rbp, %r9
    00000279: 	setbe	%r10b
    0000027d: 	cmpq	%rbx, %rax
    00000280: 	setae	%r9b
    00000284: 	orb	%r10b, %r9b
    00000287: 	je	.Ltmp1161 # Offset: 647
    0000028d: 	testb	%dil, %dil
    00000290: 	je	.Ltmp1161 # Offset: 656
    00000296: 	movl	%edx, %r9d
    00000299: 	movsd	init_value(%rip), %xmm0
    000002a1: 	shrl	%r9d
    000002a4: 	subl	$0x1, %r9d
    000002a8: 	leaq	(%r9,%r9,2), %r9
    000002ac: 	shlq	$0x4, %r9
    000002b0: 	leaq	0x30(%rax,%r9), %r9
.Ltmp1162:
    000002b5: 	movsd	%xmm0, (%rax)
    000002b9: 	addq	$0x30, %rax
    000002bd: 	movsd	%xmm0, -0x18(%rax)
    000002c2: 	cmpq	%r9, %rax
    000002c5: 	jne	.Ltmp1162 # Offset: 709
    000002c7: 	movl	%edx, %r9d
    000002ca: 	andl	$-0x2, %r9d
    000002ce: 	leal	(%r9,%r9,2), %eax
    000002d2: 	addl	%r14d, %eax
    000002d5: 	cmpl	%r9d, %edx
    000002d8: 	je	.Ltmp1163 # Offset: 728
    000002da: 	movsd	init_value(%rip), %xmm0
    000002e2: 	addl	$0x1, %eax
    000002e5: 	cltq
    000002e7: 	movsd	%xmm0, (%r13,%rax,8)
.Ltmp1163:
    000002ee: 	leaq	-0x8(%r13,%rsi), %rsi
    000002f3: 	leaq	0x8(%r13,%r8), %rax
    000002f8: 	cmpq	%rbp, %rsi
    000002fb: 	setbe	%sil
    000002ff: 	cmpq	%rbx, %rax
    00000302: 	setae	%r8b
    00000306: 	orb	%r8b, %sil
    00000309: 	je	.Ltmp1164 # Offset: 777
    0000030f: 	testb	%dil, %dil
    00000312: 	je	.Ltmp1164 # Offset: 786
    00000318: 	movl	%edx, %ecx
    0000031a: 	movsd	init_value(%rip), %xmm0
    00000322: 	shrl	%ecx
    00000324: 	subl	$0x1, %ecx
    00000327: 	leaq	(%rcx,%rcx,2), %rcx
    0000032b: 	shlq	$0x4, %rcx
    0000032f: 	leaq	0x30(%rax,%rcx), %rcx
.Ltmp1165:
    00000334: 	movsd	%xmm0, (%rax)
    00000338: 	addq	$0x30, %rax
    0000033c: 	movsd	%xmm0, -0x18(%rax)
    00000341: 	cmpq	%rax, %rcx
    00000344: 	jne	.Ltmp1165 # Offset: 836
    00000346: 	movl	%edx, %ecx
    00000348: 	andl	$-0x2, %ecx
    0000034b: 	leal	(%rcx,%rcx,2), %eax
    0000034e: 	addl	%r14d, %eax
    00000351: 	cmpl	%edx, %ecx
    00000353: 	je	.Ltmp1160 # Offset: 851
    00000355: 	movsd	init_value(%rip), %xmm0
    0000035d: 	addl	$0x2, %eax
    00000360: 	cltq
    00000362: 	movsd	%xmm0, (%r13,%rax,8)
.Ltmp1160:
    00000369: 	addl	$0x1, 0x28(%rsp)
    0000036e: 	movl	0x28(%rsp), %eax
    00000372: 	cmpl	%eax, 0x2c(%rsp)
    00000376: 	jne	.Ltmp1166 # Offset: 886
.Ltmp1150:
    0000037c: 	callq	clock@PLT # Offset: 892
    00000381: 	movq	0x20(%rsp), %rdi
    00000386: 	pxor	%xmm0, %xmm0
    0000038a: 	movq	%rax, end_time(%rip)
    00000391: 	subq	start_time(%rip), %rax
    00000398: 	cvtsi2sd	%rax, %xmm0
    0000039d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003a5: 	callq	_Z13record_resultdPKc # Offset: 933
    000003aa: 	movl	0x1c(%rsp), %ebx
    000003ae: 	testl	%ebx, %ebx
    000003b0: 	jle	.Ltmp1167 # Offset: 944
    000003b6: 	cmpl	$0x1, %ebx
    000003b9: 	je	.Ltmp1168 # Offset: 953
    000003bf: 	shrl	%ebx
    000003c1: 	movq	%r13, %rax
    000003c4: 	pxor	%xmm0, %xmm0
    000003c8: 	movl	%ebx, %edx
    000003ca: 	subl	$0x1, %edx
    000003cd: 	shlq	$0x4, %rdx
    000003d1: 	leaq	0x10(%r13,%rdx), %rdx
.Ltmp1169:
    000003d6: 	movsd	(%rax), %xmm1
    000003da: 	addq	$0x10, %rax
    000003de: 	addsd	%xmm1, %xmm0
    000003e2: 	movsd	-0x8(%rax), %xmm1
    000003e7: 	addsd	%xmm1, %xmm0
    000003eb: 	cmpq	%rdx, %rax
    000003ee: 	jne	.Ltmp1169 # Offset: 1006
    000003f0: 	movl	0x1c(%rsp), %ebx
    000003f4: 	movl	%ebx, %eax
    000003f6: 	andl	$-0x2, %eax
    000003f9: 	andl	$0x1, %ebx
    000003fc: 	je	.Ltmp1170 # Offset: 1020
.Ltmp1177:
    000003fe: 	cltq
    00000400: 	addsd	(%r13,%rax,8), %xmm0
.Ltmp1170:
    00000407: 	movsd	init_value(%rip), %xmm1
    0000040f: 	movq	DATAat0x36f60(%rip), %xmm2
    00000417: 	movapd	%xmm0, %xmm3
    0000041b: 	addsd	%xmm1, %xmm1
    0000041f: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    00000427: 	andpd	%xmm2, %xmm3
    0000042b: 	comisd	DATAat0x36ed8(%rip), %xmm3
    00000433: 	movapd	%xmm1, %xmm4
    00000437: 	movsd	%xmm1, 0x8(%rsp)
    0000043d: 	movapd	%xmm0, %xmm1
    00000441: 	subsd	%xmm4, %xmm1
    00000445: 	jbe	.Ltmp1171 # Offset: 1093
    00000447: 	divsd	%xmm0, %xmm1
.Ltmp1171:
    0000044b: 	andpd	%xmm2, %xmm1
    0000044f: 	movsd	DATAat0x36ee0(%rip), %xmm2
    00000457: 	comisd	%xmm1, %xmm2
    0000045b: 	jbe	.Ltmp1172 # Offset: 1115
    00000461: 	addq	$0x38, %rsp
    00000465: 	popq	%rbx
    00000466: 	popq	%rbp
    00000467: 	popq	%r12
    00000469: 	popq	%r13
    0000046b: 	popq	%r14
    0000046d: 	popq	%r15
    0000046f: 	retq # Offset: 1135
.Ltmp1156:
    00000470: 	movsd	init_value(%rip), %xmm0
    00000478: 	movsd	%xmm0, 0x10(%r13,%r14,8)
    0000047f: 	addq	$0x3, %r14
    00000483: 	cmpq	%r14, %r12
    00000486: 	ja	.Ltmp1156 # Offset: 1158
    00000488: 	jmp	.Ltmp1152 # Offset: 1160
.Ltmp1164:
    0000048d: 	movsd	init_value(%rip), %xmm0
    00000495: 	movsd	%xmm0, 0x10(%r13,%rcx,8)
    0000049c: 	addq	$0x3, %rcx
    000004a0: 	cmpl	%ecx, 0x10(%rsp)
    000004a4: 	jg	.Ltmp1164 # Offset: 1188
    000004a6: 	jmp	.Ltmp1160 # Offset: 1190
.Ltmp1153:
    000004ab: 	movq	%r14, %rax
    000004ae: 	nop # Size: 2
.Ltmp1173:
    000004b0: 	movsd	init_value(%rip), %xmm0
    000004b8: 	movsd	%xmm0, 0x8(%r13,%rax,8)
    000004bf: 	addq	$0x3, %rax
    000004c3: 	cmpq	%rax, %r12
    000004c6: 	ja	.Ltmp1173 # Offset: 1222
    000004c8: 	jmp	.Ltmp1155 # Offset: 1224
.Ltmp1161:
    000004cd: 	movq	%rcx, %rax
.Ltmp1174:
    000004d0: 	movsd	init_value(%rip), %xmm0
    000004d8: 	movsd	%xmm0, 0x8(%r13,%rax,8)
    000004df: 	addq	$0x3, %rax
    000004e3: 	cmpl	%eax, 0x10(%rsp)
    000004e7: 	jg	.Ltmp1174 # Offset: 1255
    000004e9: 	jmp	.Ltmp1163 # Offset: 1257
.Ltmp1172:
    000004ee: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000004f5: 	movl	$0x5, %edx
    000004fa: 	leaq	DATAat0x35004(%rip), %rsi
    00000501: 	movsd	%xmm0, 0x10(%rsp)
    00000507: 	movq	%rbp, %rdi
    0000050a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1290
    0000050f: 	cmpq	$0x0, 0x20(%rsp)
    00000515: 	movsd	0x10(%rsp), %xmm0
    0000051b: 	je	.Ltmp1175 # Offset: 1307
    00000521: 	movq	0x20(%rsp), %rbx
    00000526: 	movsd	%xmm0, 0x10(%rsp)
    0000052c: 	movq	%rbx, %rdi
    0000052f: 	callq	strlen@PLT # Offset: 1327
    00000534: 	movq	%rbx, %rsi
    00000537: 	movq	%rbp, %rdi
    0000053a: 	movq	%rax, %rdx
    0000053d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1341
    00000542: 	movsd	0x10(%rsp), %xmm0
.Ltmp1176:
    00000548: 	movl	$0xd, %edx
    0000054d: 	leaq	DATAat0x3500a(%rip), %rsi
    00000554: 	movq	%rbp, %rdi
    00000557: 	movsd	%xmm0, 0x10(%rsp)
    0000055d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1373
    00000562: 	movsd	0x10(%rsp), %xmm0
    00000568: 	movq	%rbp, %rdi
    0000056b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1387
    00000570: 	movl	$0xb, %edx
    00000575: 	leaq	DATAat0x35018(%rip), %rsi
    0000057c: 	movq	%rax, %rdi
    0000057f: 	movq	%rax, %rbp
    00000582: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1410
    00000587: 	movsd	0x8(%rsp), %xmm0
    0000058d: 	movq	%rbp, %rdi
    00000590: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1424
    00000595: 	addq	$0x38, %rsp
    00000599: 	popq	%rbx
    0000059a: 	movq	%rax, %rdi
    0000059d: 	popq	%rbp
    0000059e: 	popq	%r12
    000005a0: 	popq	%r13
    000005a2: 	popq	%r14
    000005a4: 	popq	%r15
    000005a6: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1446
.Ltmp1175:
    000005ab: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000005b2: 	movq	-0x18(%rax), %rdi
    000005b6: 	addq	%rbp, %rdi
    000005b9: 	movl	0x20(%rdi), %esi
    000005bc: 	orl	$0x1, %esi
    000005bf: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1471
    000005c4: 	movsd	0x10(%rsp), %xmm0
    000005ca: 	jmp	.Ltmp1176 # Offset: 1482
.Ltmp1167:
    000005cf: 	movsd	init_value(%rip), %xmm0
    000005d7: 	movq	DATAat0x36f60(%rip), %xmm2
    000005df: 	addsd	%xmm0, %xmm0
    000005e3: 	mulsd	DATAat0x36ef0(%rip), %xmm0
    000005eb: 	movapd	%xmm0, %xmm5
    000005ef: 	movsd	%xmm0, 0x8(%rsp)
    000005f5: 	pxor	%xmm0, %xmm0
    000005f9: 	movapd	%xmm0, %xmm1
    000005fd: 	subsd	%xmm5, %xmm1
    00000601: 	jmp	.Ltmp1171 # Offset: 1537
.Ltmp1168:
    00000606: 	xorl	%eax, %eax
    00000608: 	pxor	%xmm0, %xmm0
    0000060c: 	jmp	.Ltmp1177 # Offset: 1548
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite3IdEvPT_iPKc"

Binary Function "_Z30test_for_loop_bzero_overwrite3IdEvPT_iPKc" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x1dce0
  Size        : 0x436
  MaxSize     : 0x440
  Offset      : 0x1dce0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_bzero_overwrite3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movl	%esi, 0x24(%rsp)
    0000001c: 	movq	%rdx, 0x28(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1178 # Offset: 53
    0000003b: 	movslq	%r15d, %r15
    0000003e: 	movl	$0xaaaaaaab, %eax
    00000043: 	leaq	init_value(%rip), %r8
    0000004a: 	leal	-0x3(%r15), %r12d
    0000004e: 	leaq	(,%r15,8), %rdx
    00000056: 	cmpl	$0x2c, %r12d
    0000005a: 	movq	%rdx, 0x10(%rsp)
    0000005f: 	leal	-0x2(%r15), %r10d
    00000063: 	seta	%dl
    00000066: 	imulq	%rax, %r12
    0000006a: 	shrq	$0x21, %r12
    0000006e: 	leal	0x1(%r12), %eax
    00000073: 	leaq	(%rax,%rax,2), %rsi
    00000077: 	movq	%rax, %rdi
    0000007a: 	movl	%eax, (%rsp)
    0000007d: 	shlq	$0x3, %rsi
    00000081: 	leaq	-0x8(%rbx,%rsi), %rax
    00000086: 	cmpq	%r8, %rax
    00000089: 	setbe	%al
    0000008c: 	cmpq	%r8, %rbx
    0000008f: 	setae	%cl
    00000092: 	addq	%rbx, %rsi
    00000095: 	orl	%ecx, %eax
    00000097: 	movl	%edi, %ecx
    00000099: 	andl	%edx, %eax
    0000009b: 	andl	$-0x2, %ecx
    0000009e: 	movb	%al, 0x23(%rsp)
    000000a2: 	movl	%edi, %eax
    000000a4: 	shrl	%eax
    000000a6: 	movl	%ecx, 0x8(%rsp)
    000000aa: 	subl	$0x1, %eax
    000000ad: 	leaq	(%rax,%rax,2), %rdi
    000000b1: 	leal	(%rcx,%rcx,2), %eax
    000000b4: 	leal	0x1(%rax), %ecx
    000000b7: 	shlq	$0x4, %rdi
    000000bb: 	cmpq	%r8, %rsi
    000000be: 	movslq	%ecx, %rcx
    000000c1: 	leaq	0x8(%r8), %rsi
    000000c5: 	leaq	0x38(%rbx,%rdi), %r15
    000000ca: 	setbe	%r14b
    000000ce: 	leaq	(%rbx,%rcx,8), %r12
    000000d2: 	leaq	0x10(%rbx), %rcx
    000000d6: 	cmpq	%rsi, %rcx
    000000d9: 	movq	%rcx, 0x18(%rsp)
    000000de: 	leaq	0x40(%rbx,%rdi), %r13
    000000e3: 	movq	%rbx, %rdi
    000000e6: 	setae	%sil
    000000ea: 	addl	$0x2, %eax
    000000ed: 	orl	%esi, %r14d
    000000f0: 	cltq
    000000f2: 	andl	%edx, %r14d
    000000f5: 	leaq	(%rbx,%rax,8), %rbp
    000000f9: 	movq	%r12, %rax
    000000fc: 	movq	%r15, %rbx
    000000ff: 	movb	%r14b, 0x22(%rsp)
    00000104: 	xorl	%r14d, %r14d
    00000107: 	movl	%r10d, %r15d
    0000010a: 	movl	%r14d, %r12d
    0000010d: 	movq	%rax, %r14
.Ltmp1185:
    00000110: 	movq	0x10(%rsp), %rdx
    00000115: 	xorl	%esi, %esi
    00000117: 	callq	memset@PLT # Offset: 279
    0000011c: 	movq	%rax, %rdi
    0000011f: 	testl	%r15d, %r15d
    00000122: 	jle	.Ltmp1179 # Offset: 290
    00000128: 	cmpb	$0x0, 0x23(%rsp)
    0000012d: 	je	.Ltmp1180 # Offset: 301
    00000133: 	movsd	init_value(%rip), %xmm0
    0000013b: 	leaq	0x8(%rax), %rax
    0000013f: 	nop # Size: 1
.Ltmp1181:
    00000140: 	movsd	%xmm0, (%rax)
    00000144: 	addq	$0x30, %rax
    00000148: 	movsd	%xmm0, -0x18(%rax)
    0000014d: 	cmpq	%rax, %rbx
    00000150: 	jne	.Ltmp1181 # Offset: 336
    00000152: 	movl	0x8(%rsp), %ecx
    00000156: 	cmpl	%ecx, (%rsp)
    00000159: 	je	.Ltmp1182 # Offset: 345
    0000015b: 	movsd	init_value(%rip), %xmm0
    00000163: 	movsd	%xmm0, (%r14)
.Ltmp1182:
    00000168: 	cmpb	$0x0, 0x22(%rsp)
    0000016d: 	je	.Ltmp1183 # Offset: 365
    00000173: 	movsd	init_value(%rip), %xmm0
    0000017b: 	movq	0x18(%rsp), %rax
.Ltmp1184:
    00000180: 	movsd	%xmm0, (%rax)
    00000184: 	addq	$0x30, %rax
    00000188: 	movsd	%xmm0, -0x18(%rax)
    0000018d: 	cmpq	%r13, %rax
    00000190: 	jne	.Ltmp1184 # Offset: 400
    00000192: 	movl	0x8(%rsp), %ecx
    00000196: 	cmpl	%ecx, (%rsp)
    00000199: 	je	.Ltmp1179 # Offset: 409
    0000019b: 	movsd	init_value(%rip), %xmm0
    000001a3: 	movsd	%xmm0, (%rbp)
.Ltmp1179:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%r12d, iterations(%rip)
    000001b3: 	jg	.Ltmp1185 # Offset: 435
    000001b9: 	movq	%rdi, %rbx
.Ltmp1178:
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	movq	0x28(%rsp), %rdi
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movq	%rax, end_time(%rip)
    000001d1: 	subq	start_time(%rip), %rax
    000001d8: 	cvtsi2sd	%rax, %xmm0
    000001dd: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001e5: 	callq	_Z13record_resultdPKc # Offset: 485
    000001ea: 	movl	0x24(%rsp), %esi
    000001ee: 	testl	%esi, %esi
    000001f0: 	jle	.Ltmp1186 # Offset: 496
    000001f6: 	cmpl	$0x1, %esi
    000001f9: 	je	.Ltmp1187 # Offset: 505
    000001ff: 	movl	%esi, %edx
    00000201: 	movq	%rbx, %rax
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	shrl	%edx
    0000020a: 	subl	$0x1, %edx
    0000020d: 	shlq	$0x4, %rdx
    00000211: 	leaq	0x10(%rbx,%rdx), %rdx
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1188:
    00000220: 	movsd	(%rax), %xmm1
    00000224: 	addq	$0x10, %rax
    00000228: 	addsd	%xmm1, %xmm0
    0000022c: 	movsd	-0x8(%rax), %xmm1
    00000231: 	addsd	%xmm1, %xmm0
    00000235: 	cmpq	%rdx, %rax
    00000238: 	jne	.Ltmp1188 # Offset: 568
    0000023a: 	movl	0x24(%rsp), %edx
    0000023e: 	movl	%edx, %eax
    00000240: 	andl	$-0x2, %eax
    00000243: 	andl	$0x1, %edx
    00000246: 	je	.Ltmp1189 # Offset: 582
.Ltmp1196:
    00000248: 	cltq
    0000024a: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1189:
    0000024f: 	movsd	init_value(%rip), %xmm1
    00000257: 	movq	DATAat0x36f60(%rip), %xmm3
    0000025f: 	movapd	%xmm0, %xmm4
    00000263: 	movapd	%xmm0, %xmm2
    00000267: 	addsd	%xmm1, %xmm1
    0000026b: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    00000273: 	andpd	%xmm3, %xmm4
    00000277: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000027f: 	subsd	%xmm1, %xmm2
    00000283: 	jbe	.Ltmp1190 # Offset: 643
    00000285: 	divsd	%xmm0, %xmm2
.Ltmp1190:
    00000289: 	andpd	%xmm3, %xmm2
    0000028d: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000295: 	comisd	%xmm2, %xmm3
    00000299: 	jbe	.Ltmp1191 # Offset: 665
    0000029b: 	addq	$0x38, %rsp
    0000029f: 	popq	%rbx
    000002a0: 	popq	%rbp
    000002a1: 	popq	%r12
    000002a3: 	popq	%r13
    000002a5: 	popq	%r14
    000002a7: 	popq	%r15
    000002a9: 	retq # Offset: 681
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1183:
    000002b0: 	xorl	%eax, %eax
    000002b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1192:
    000002b8: 	movsd	init_value(%rip), %xmm0
    000002c0: 	movsd	%xmm0, 0x10(%rdi,%rax,8)
    000002c6: 	addq	$0x3, %rax
    000002ca: 	cmpl	%eax, %r15d
    000002cd: 	jg	.Ltmp1192 # Offset: 717
    000002cf: 	jmp	.Ltmp1179 # Offset: 719
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp1180:
    000002d8: 	xorl	%eax, %eax
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1193:
    000002e0: 	movsd	init_value(%rip), %xmm0
    000002e8: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
    000002ee: 	addq	$0x3, %rax
    000002f2: 	cmpl	%eax, %r15d
    000002f5: 	jg	.Ltmp1193 # Offset: 757
    000002f7: 	jmp	.Ltmp1182 # Offset: 759
.Ltmp1191:
    000002fc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000303: 	movl	$0x5, %edx
    00000308: 	movsd	%xmm0, (%rsp)
    0000030d: 	leaq	DATAat0x35004(%rip), %rsi
    00000314: 	movq	%rbp, %rdi
    00000317: 	movsd	%xmm1, 0x8(%rsp)
    0000031d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 797
    00000322: 	cmpq	$0x0, 0x28(%rsp)
    00000328: 	movsd	(%rsp), %xmm0
    0000032d: 	movsd	0x8(%rsp), %xmm1
    00000333: 	je	.Ltmp1194 # Offset: 819
    00000339: 	movq	0x28(%rsp), %rbx
    0000033e: 	movsd	%xmm1, 0x8(%rsp)
    00000344: 	movsd	%xmm0, (%rsp)
    00000349: 	movq	%rbx, %rdi
    0000034c: 	callq	strlen@PLT # Offset: 844
    00000351: 	movq	%rbx, %rsi
    00000354: 	movq	%rbp, %rdi
    00000357: 	movq	%rax, %rdx
    0000035a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 858
    0000035f: 	movsd	0x8(%rsp), %xmm1
    00000365: 	movsd	(%rsp), %xmm0
.Ltmp1195:
    0000036a: 	movl	$0xd, %edx
    0000036f: 	leaq	DATAat0x3500a(%rip), %rsi
    00000376: 	movq	%rbp, %rdi
    00000379: 	movsd	%xmm1, 0x8(%rsp)
    0000037f: 	movsd	%xmm0, (%rsp)
    00000384: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 900
    00000389: 	movsd	(%rsp), %xmm0
    0000038e: 	movq	%rbp, %rdi
    00000391: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 913
    00000396: 	movl	$0xb, %edx
    0000039b: 	leaq	DATAat0x35018(%rip), %rsi
    000003a2: 	movq	%rax, %rdi
    000003a5: 	movq	%rax, %rbp
    000003a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 936
    000003ad: 	movsd	0x8(%rsp), %xmm1
    000003b3: 	movq	%rbp, %rdi
    000003b6: 	movapd	%xmm1, %xmm0
    000003ba: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 954
    000003bf: 	addq	$0x38, %rsp
    000003c3: 	popq	%rbx
    000003c4: 	movq	%rax, %rdi
    000003c7: 	popq	%rbp
    000003c8: 	popq	%r12
    000003ca: 	popq	%r13
    000003cc: 	popq	%r14
    000003ce: 	popq	%r15
    000003d0: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 976
.Ltmp1186:
    000003d5: 	movsd	init_value(%rip), %xmm1
    000003dd: 	pxor	%xmm0, %xmm0
    000003e1: 	movq	DATAat0x36f60(%rip), %xmm3
    000003e9: 	movapd	%xmm0, %xmm2
    000003ed: 	addsd	%xmm1, %xmm1
    000003f1: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    000003f9: 	subsd	%xmm1, %xmm2
    000003fd: 	jmp	.Ltmp1190 # Offset: 1021
.Ltmp1194:
    00000402: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000409: 	movq	-0x18(%rax), %rdi
    0000040d: 	addq	%rbp, %rdi
    00000410: 	movl	0x20(%rdi), %esi
    00000413: 	orl	$0x1, %esi
    00000416: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1046
    0000041b: 	movsd	(%rsp), %xmm0
    00000420: 	movsd	0x8(%rsp), %xmm1
    00000426: 	jmp	.Ltmp1195 # Offset: 1062
.Ltmp1187:
    0000042b: 	pxor	%xmm0, %xmm0
    0000042f: 	xorl	%eax, %eax
    00000431: 	jmp	.Ltmp1196 # Offset: 1073
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_bzero_overwrite3IdEvPT_iPKc"

Binary Function "_Z31test_for_loop_memset_overwrite3IdEvPT_iPKc" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x1e120
  Size        : 0x436
  MaxSize     : 0x440
  Offset      : 0x1e120
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_memset_overwrite3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movl	%esi, 0x24(%rsp)
    0000001c: 	movq	%rdx, 0x28(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1197 # Offset: 53
    0000003b: 	movslq	%r15d, %r15
    0000003e: 	movl	$0xaaaaaaab, %eax
    00000043: 	leaq	init_value(%rip), %r8
    0000004a: 	leal	-0x3(%r15), %r12d
    0000004e: 	leaq	(,%r15,8), %rdx
    00000056: 	cmpl	$0x2c, %r12d
    0000005a: 	movq	%rdx, 0x10(%rsp)
    0000005f: 	leal	-0x2(%r15), %r10d
    00000063: 	seta	%dl
    00000066: 	imulq	%rax, %r12
    0000006a: 	shrq	$0x21, %r12
    0000006e: 	leal	0x1(%r12), %eax
    00000073: 	leaq	(%rax,%rax,2), %rsi
    00000077: 	movq	%rax, %rdi
    0000007a: 	movl	%eax, (%rsp)
    0000007d: 	shlq	$0x3, %rsi
    00000081: 	leaq	-0x8(%rbx,%rsi), %rax
    00000086: 	cmpq	%r8, %rax
    00000089: 	setbe	%al
    0000008c: 	cmpq	%r8, %rbx
    0000008f: 	setae	%cl
    00000092: 	addq	%rbx, %rsi
    00000095: 	orl	%ecx, %eax
    00000097: 	movl	%edi, %ecx
    00000099: 	andl	%edx, %eax
    0000009b: 	andl	$-0x2, %ecx
    0000009e: 	movb	%al, 0x23(%rsp)
    000000a2: 	movl	%edi, %eax
    000000a4: 	shrl	%eax
    000000a6: 	movl	%ecx, 0x8(%rsp)
    000000aa: 	subl	$0x1, %eax
    000000ad: 	leaq	(%rax,%rax,2), %rdi
    000000b1: 	leal	(%rcx,%rcx,2), %eax
    000000b4: 	leal	0x1(%rax), %ecx
    000000b7: 	shlq	$0x4, %rdi
    000000bb: 	cmpq	%r8, %rsi
    000000be: 	movslq	%ecx, %rcx
    000000c1: 	leaq	0x8(%r8), %rsi
    000000c5: 	leaq	0x38(%rbx,%rdi), %r15
    000000ca: 	setbe	%r14b
    000000ce: 	leaq	(%rbx,%rcx,8), %r12
    000000d2: 	leaq	0x10(%rbx), %rcx
    000000d6: 	cmpq	%rsi, %rcx
    000000d9: 	movq	%rcx, 0x18(%rsp)
    000000de: 	leaq	0x40(%rbx,%rdi), %r13
    000000e3: 	movq	%rbx, %rdi
    000000e6: 	setae	%sil
    000000ea: 	addl	$0x2, %eax
    000000ed: 	orl	%esi, %r14d
    000000f0: 	cltq
    000000f2: 	andl	%edx, %r14d
    000000f5: 	leaq	(%rbx,%rax,8), %rbp
    000000f9: 	movq	%r12, %rax
    000000fc: 	movq	%r15, %rbx
    000000ff: 	movb	%r14b, 0x22(%rsp)
    00000104: 	xorl	%r14d, %r14d
    00000107: 	movl	%r10d, %r15d
    0000010a: 	movl	%r14d, %r12d
    0000010d: 	movq	%rax, %r14
.Ltmp1204:
    00000110: 	movq	0x10(%rsp), %rdx
    00000115: 	xorl	%esi, %esi
    00000117: 	callq	memset@PLT # Offset: 279
    0000011c: 	movq	%rax, %rdi
    0000011f: 	testl	%r15d, %r15d
    00000122: 	jle	.Ltmp1198 # Offset: 290
    00000128: 	cmpb	$0x0, 0x23(%rsp)
    0000012d: 	je	.Ltmp1199 # Offset: 301
    00000133: 	movsd	init_value(%rip), %xmm0
    0000013b: 	leaq	0x8(%rax), %rax
    0000013f: 	nop # Size: 1
.Ltmp1200:
    00000140: 	movsd	%xmm0, (%rax)
    00000144: 	addq	$0x30, %rax
    00000148: 	movsd	%xmm0, -0x18(%rax)
    0000014d: 	cmpq	%rax, %rbx
    00000150: 	jne	.Ltmp1200 # Offset: 336
    00000152: 	movl	0x8(%rsp), %ecx
    00000156: 	cmpl	%ecx, (%rsp)
    00000159: 	je	.Ltmp1201 # Offset: 345
    0000015b: 	movsd	init_value(%rip), %xmm0
    00000163: 	movsd	%xmm0, (%r14)
.Ltmp1201:
    00000168: 	cmpb	$0x0, 0x22(%rsp)
    0000016d: 	je	.Ltmp1202 # Offset: 365
    00000173: 	movsd	init_value(%rip), %xmm0
    0000017b: 	movq	0x18(%rsp), %rax
.Ltmp1203:
    00000180: 	movsd	%xmm0, (%rax)
    00000184: 	addq	$0x30, %rax
    00000188: 	movsd	%xmm0, -0x18(%rax)
    0000018d: 	cmpq	%r13, %rax
    00000190: 	jne	.Ltmp1203 # Offset: 400
    00000192: 	movl	0x8(%rsp), %ecx
    00000196: 	cmpl	%ecx, (%rsp)
    00000199: 	je	.Ltmp1198 # Offset: 409
    0000019b: 	movsd	init_value(%rip), %xmm0
    000001a3: 	movsd	%xmm0, (%rbp)
.Ltmp1198:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%r12d, iterations(%rip)
    000001b3: 	jg	.Ltmp1204 # Offset: 435
    000001b9: 	movq	%rdi, %rbx
.Ltmp1197:
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	movq	0x28(%rsp), %rdi
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movq	%rax, end_time(%rip)
    000001d1: 	subq	start_time(%rip), %rax
    000001d8: 	cvtsi2sd	%rax, %xmm0
    000001dd: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001e5: 	callq	_Z13record_resultdPKc # Offset: 485
    000001ea: 	movl	0x24(%rsp), %esi
    000001ee: 	testl	%esi, %esi
    000001f0: 	jle	.Ltmp1205 # Offset: 496
    000001f6: 	cmpl	$0x1, %esi
    000001f9: 	je	.Ltmp1206 # Offset: 505
    000001ff: 	movl	%esi, %edx
    00000201: 	movq	%rbx, %rax
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	shrl	%edx
    0000020a: 	subl	$0x1, %edx
    0000020d: 	shlq	$0x4, %rdx
    00000211: 	leaq	0x10(%rbx,%rdx), %rdx
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1207:
    00000220: 	movsd	(%rax), %xmm1
    00000224: 	addq	$0x10, %rax
    00000228: 	addsd	%xmm1, %xmm0
    0000022c: 	movsd	-0x8(%rax), %xmm1
    00000231: 	addsd	%xmm1, %xmm0
    00000235: 	cmpq	%rdx, %rax
    00000238: 	jne	.Ltmp1207 # Offset: 568
    0000023a: 	movl	0x24(%rsp), %edx
    0000023e: 	movl	%edx, %eax
    00000240: 	andl	$-0x2, %eax
    00000243: 	andl	$0x1, %edx
    00000246: 	je	.Ltmp1208 # Offset: 582
.Ltmp1215:
    00000248: 	cltq
    0000024a: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1208:
    0000024f: 	movsd	init_value(%rip), %xmm1
    00000257: 	movq	DATAat0x36f60(%rip), %xmm3
    0000025f: 	movapd	%xmm0, %xmm4
    00000263: 	movapd	%xmm0, %xmm2
    00000267: 	addsd	%xmm1, %xmm1
    0000026b: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    00000273: 	andpd	%xmm3, %xmm4
    00000277: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000027f: 	subsd	%xmm1, %xmm2
    00000283: 	jbe	.Ltmp1209 # Offset: 643
    00000285: 	divsd	%xmm0, %xmm2
.Ltmp1209:
    00000289: 	andpd	%xmm3, %xmm2
    0000028d: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000295: 	comisd	%xmm2, %xmm3
    00000299: 	jbe	.Ltmp1210 # Offset: 665
    0000029b: 	addq	$0x38, %rsp
    0000029f: 	popq	%rbx
    000002a0: 	popq	%rbp
    000002a1: 	popq	%r12
    000002a3: 	popq	%r13
    000002a5: 	popq	%r14
    000002a7: 	popq	%r15
    000002a9: 	retq # Offset: 681
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1202:
    000002b0: 	xorl	%eax, %eax
    000002b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1211:
    000002b8: 	movsd	init_value(%rip), %xmm0
    000002c0: 	movsd	%xmm0, 0x10(%rdi,%rax,8)
    000002c6: 	addq	$0x3, %rax
    000002ca: 	cmpl	%eax, %r15d
    000002cd: 	jg	.Ltmp1211 # Offset: 717
    000002cf: 	jmp	.Ltmp1198 # Offset: 719
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp1199:
    000002d8: 	xorl	%eax, %eax
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1212:
    000002e0: 	movsd	init_value(%rip), %xmm0
    000002e8: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
    000002ee: 	addq	$0x3, %rax
    000002f2: 	cmpl	%eax, %r15d
    000002f5: 	jg	.Ltmp1212 # Offset: 757
    000002f7: 	jmp	.Ltmp1201 # Offset: 759
.Ltmp1210:
    000002fc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000303: 	movl	$0x5, %edx
    00000308: 	movsd	%xmm0, (%rsp)
    0000030d: 	leaq	DATAat0x35004(%rip), %rsi
    00000314: 	movq	%rbp, %rdi
    00000317: 	movsd	%xmm1, 0x8(%rsp)
    0000031d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 797
    00000322: 	cmpq	$0x0, 0x28(%rsp)
    00000328: 	movsd	(%rsp), %xmm0
    0000032d: 	movsd	0x8(%rsp), %xmm1
    00000333: 	je	.Ltmp1213 # Offset: 819
    00000339: 	movq	0x28(%rsp), %rbx
    0000033e: 	movsd	%xmm1, 0x8(%rsp)
    00000344: 	movsd	%xmm0, (%rsp)
    00000349: 	movq	%rbx, %rdi
    0000034c: 	callq	strlen@PLT # Offset: 844
    00000351: 	movq	%rbx, %rsi
    00000354: 	movq	%rbp, %rdi
    00000357: 	movq	%rax, %rdx
    0000035a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 858
    0000035f: 	movsd	0x8(%rsp), %xmm1
    00000365: 	movsd	(%rsp), %xmm0
.Ltmp1214:
    0000036a: 	movl	$0xd, %edx
    0000036f: 	leaq	DATAat0x3500a(%rip), %rsi
    00000376: 	movq	%rbp, %rdi
    00000379: 	movsd	%xmm1, 0x8(%rsp)
    0000037f: 	movsd	%xmm0, (%rsp)
    00000384: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 900
    00000389: 	movsd	(%rsp), %xmm0
    0000038e: 	movq	%rbp, %rdi
    00000391: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 913
    00000396: 	movl	$0xb, %edx
    0000039b: 	leaq	DATAat0x35018(%rip), %rsi
    000003a2: 	movq	%rax, %rdi
    000003a5: 	movq	%rax, %rbp
    000003a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 936
    000003ad: 	movsd	0x8(%rsp), %xmm1
    000003b3: 	movq	%rbp, %rdi
    000003b6: 	movapd	%xmm1, %xmm0
    000003ba: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 954
    000003bf: 	addq	$0x38, %rsp
    000003c3: 	popq	%rbx
    000003c4: 	movq	%rax, %rdi
    000003c7: 	popq	%rbp
    000003c8: 	popq	%r12
    000003ca: 	popq	%r13
    000003cc: 	popq	%r14
    000003ce: 	popq	%r15
    000003d0: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 976
.Ltmp1205:
    000003d5: 	movsd	init_value(%rip), %xmm1
    000003dd: 	pxor	%xmm0, %xmm0
    000003e1: 	movq	DATAat0x36f60(%rip), %xmm3
    000003e9: 	movapd	%xmm0, %xmm2
    000003ed: 	addsd	%xmm1, %xmm1
    000003f1: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    000003f9: 	subsd	%xmm1, %xmm2
    000003fd: 	jmp	.Ltmp1209 # Offset: 1021
.Ltmp1213:
    00000402: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000409: 	movq	-0x18(%rax), %rdi
    0000040d: 	addq	%rbp, %rdi
    00000410: 	movl	0x20(%rdi), %esi
    00000413: 	orl	$0x1, %esi
    00000416: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1046
    0000041b: 	movsd	(%rsp), %xmm0
    00000420: 	movsd	0x8(%rsp), %xmm1
    00000426: 	jmp	.Ltmp1214 # Offset: 1062
.Ltmp1206:
    0000042b: 	pxor	%xmm0, %xmm0
    0000042f: 	xorl	%eax, %eax
    00000431: 	jmp	.Ltmp1215 # Offset: 1073
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_memset_overwrite3IdEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite3IdEvPT_iPKc" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x1e560
  Size        : 0x44c
  MaxSize     : 0x450
  Offset      : 0x1e560
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movq	%rdx, 0x38(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	movl	%eax, 0x28(%rsp)
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1216 # Offset: 53
    0000003b: 	leal	-0x1(%r13), %eax
    0000003f: 	leal	-0x3(%r13), %r12d
    00000043: 	movl	%r13d, 0x1c(%rsp)
    00000048: 	leaq	0x8(,%rax,8), %rax
    00000050: 	cmpl	$0x2c, %r12d
    00000054: 	leaq	init_value(%rip), %r8
    0000005b: 	movq	%rax, 0x20(%rsp)
    00000060: 	movl	$0xaaaaaaab, %eax
    00000065: 	seta	%dl
    00000068: 	leal	-0x2(%r13), %r10d
    0000006c: 	imulq	%rax, %r12
    00000070: 	shrq	$0x21, %r12
    00000074: 	leal	0x1(%r12), %eax
    00000079: 	leaq	(%rax,%rax,2), %rsi
    0000007d: 	movq	%rax, %rdi
    00000080: 	movl	%eax, 0x8(%rsp)
    00000084: 	shlq	$0x3, %rsi
    00000088: 	leaq	-0x8(%rbx,%rsi), %rax
    0000008d: 	cmpq	%r8, %rax
    00000090: 	setbe	%al
    00000093: 	cmpq	%r8, %rbx
    00000096: 	setae	%cl
    00000099: 	addq	%rbx, %rsi
    0000009c: 	orl	%ecx, %eax
    0000009e: 	movl	%edi, %ecx
    000000a0: 	andl	%edx, %eax
    000000a2: 	andl	$-0x2, %ecx
    000000a5: 	movb	%al, 0x2f(%rsp)
    000000a9: 	movl	%edi, %eax
    000000ab: 	shrl	%eax
    000000ad: 	movl	%ecx, 0x10(%rsp)
    000000b1: 	subl	$0x1, %eax
    000000b4: 	leaq	(%rax,%rax,2), %rdi
    000000b8: 	leal	(%rcx,%rcx,2), %eax
    000000bb: 	leal	0x1(%rax), %ecx
    000000be: 	shlq	$0x4, %rdi
    000000c2: 	cmpq	%r8, %rsi
    000000c5: 	movslq	%ecx, %rcx
    000000c8: 	setbe	%sil
    000000cc: 	addq	$0x8, %r8
    000000d0: 	leaq	(%rbx,%rcx,8), %r15
    000000d4: 	leaq	0x10(%rbx), %rcx
    000000d8: 	cmpq	%r8, %rcx
    000000db: 	movq	%rcx, 0x30(%rsp)
    000000e0: 	leaq	0x40(%rbx,%rdi), %r12
    000000e5: 	leaq	0x38(%rbx,%rdi), %r9
    000000ea: 	setae	%r8b
    000000ee: 	addl	$0x2, %eax
    000000f1: 	xorl	%r14d, %r14d
    000000f4: 	movq	%rbx, %rdi
    000000f7: 	orl	%r8d, %esi
    000000fa: 	cltq
    000000fc: 	movq	%r12, %r13
    000000ff: 	movl	%r14d, %r12d
    00000102: 	andl	%edx, %esi
    00000104: 	leaq	(%rbx,%rax,8), %rbp
    00000108: 	movq	%r9, %r14
    0000010b: 	movl	%r10d, %ebx
    0000010e: 	movb	%sil, 0x2e(%rsp)
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1224:
    00000118: 	movl	0x1c(%rsp), %eax
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp1217 # Offset: 286
    00000120: 	movq	0x20(%rsp), %rdx
    00000125: 	xorl	%esi, %esi
    00000127: 	callq	memset@PLT # Offset: 295
    0000012c: 	movq	%rax, %rdi
.Ltmp1217:
    0000012f: 	testl	%ebx, %ebx
    00000131: 	jle	.Ltmp1218 # Offset: 305
    00000137: 	cmpb	$0x0, 0x2f(%rsp)
    0000013c: 	je	.Ltmp1219 # Offset: 316
    00000142: 	movsd	init_value(%rip), %xmm0
    0000014a: 	leaq	0x8(%rdi), %rax
    0000014e: 	nop # Size: 2
.Ltmp1220:
    00000150: 	movsd	%xmm0, (%rax)
    00000154: 	addq	$0x30, %rax
    00000158: 	movsd	%xmm0, -0x18(%rax)
    0000015d: 	cmpq	%rax, %r14
    00000160: 	jne	.Ltmp1220 # Offset: 352
    00000162: 	movl	0x10(%rsp), %ecx
    00000166: 	cmpl	%ecx, 0x8(%rsp)
    0000016a: 	je	.Ltmp1221 # Offset: 362
    0000016c: 	movsd	init_value(%rip), %xmm0
    00000174: 	movsd	%xmm0, (%r15)
.Ltmp1221:
    00000179: 	cmpb	$0x0, 0x2e(%rsp)
    0000017e: 	je	.Ltmp1222 # Offset: 382
    00000184: 	movsd	init_value(%rip), %xmm0
    0000018c: 	movq	0x30(%rsp), %rax
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp1223:
    00000198: 	movsd	%xmm0, (%rax)
    0000019c: 	addq	$0x30, %rax
    000001a0: 	movsd	%xmm0, -0x18(%rax)
    000001a5: 	cmpq	%r13, %rax
    000001a8: 	jne	.Ltmp1223 # Offset: 424
    000001aa: 	movl	0x10(%rsp), %ecx
    000001ae: 	cmpl	%ecx, 0x8(%rsp)
    000001b2: 	je	.Ltmp1218 # Offset: 434
    000001b4: 	movsd	init_value(%rip), %xmm0
    000001bc: 	movsd	%xmm0, (%rbp)
.Ltmp1218:
    000001c1: 	addl	$0x1, %r12d
    000001c5: 	cmpl	0x28(%rsp), %r12d
    000001ca: 	jne	.Ltmp1224 # Offset: 458
    000001d0: 	movl	0x1c(%rsp), %r13d
    000001d5: 	movq	%rdi, %rbx
.Ltmp1216:
    000001d8: 	callq	clock@PLT # Offset: 472
    000001dd: 	movq	0x38(%rsp), %rdi
    000001e2: 	pxor	%xmm0, %xmm0
    000001e6: 	movq	%rax, end_time(%rip)
    000001ed: 	subq	start_time(%rip), %rax
    000001f4: 	cvtsi2sd	%rax, %xmm0
    000001f9: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000201: 	callq	_Z13record_resultdPKc # Offset: 513
    00000206: 	testl	%r13d, %r13d
    00000209: 	jle	.Ltmp1225 # Offset: 521
    0000020f: 	cmpl	$0x1, %r13d
    00000213: 	je	.Ltmp1226 # Offset: 531
    00000219: 	movl	%r13d, %edx
    0000021c: 	movq	%rbx, %rax
    0000021f: 	pxor	%xmm0, %xmm0
    00000223: 	shrl	%edx
    00000225: 	subl	$0x1, %edx
    00000228: 	shlq	$0x4, %rdx
    0000022c: 	leaq	0x10(%rbx,%rdx), %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1227:
    00000238: 	movsd	(%rax), %xmm1
    0000023c: 	addq	$0x10, %rax
    00000240: 	addsd	%xmm1, %xmm0
    00000244: 	movsd	-0x8(%rax), %xmm1
    00000249: 	addsd	%xmm1, %xmm0
    0000024d: 	cmpq	%rdx, %rax
    00000250: 	jne	.Ltmp1227 # Offset: 592
    00000252: 	movl	%r13d, %eax
    00000255: 	andl	$-0x2, %eax
    00000258: 	andl	$0x1, %r13d
    0000025c: 	je	.Ltmp1228 # Offset: 604
.Ltmp1235:
    0000025e: 	cltq
    00000260: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1228:
    00000265: 	movsd	init_value(%rip), %xmm1
    0000026d: 	movq	DATAat0x36f60(%rip), %xmm3
    00000275: 	movapd	%xmm0, %xmm4
    00000279: 	movapd	%xmm0, %xmm2
    0000027d: 	addsd	%xmm1, %xmm1
    00000281: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    00000289: 	andpd	%xmm3, %xmm4
    0000028d: 	comisd	DATAat0x36ed8(%rip), %xmm4
    00000295: 	subsd	%xmm1, %xmm2
    00000299: 	jbe	.Ltmp1229 # Offset: 665
    0000029b: 	divsd	%xmm0, %xmm2
.Ltmp1229:
    0000029f: 	andpd	%xmm3, %xmm2
    000002a3: 	movsd	DATAat0x36ee0(%rip), %xmm3
    000002ab: 	comisd	%xmm2, %xmm3
    000002af: 	jbe	.Ltmp1230 # Offset: 687
    000002b1: 	addq	$0x48, %rsp
    000002b5: 	popq	%rbx
    000002b6: 	popq	%rbp
    000002b7: 	popq	%r12
    000002b9: 	popq	%r13
    000002bb: 	popq	%r14
    000002bd: 	popq	%r15
    000002bf: 	retq # Offset: 703
.Ltmp1222:
    000002c0: 	xorl	%eax, %eax
    000002c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1231:
    000002c8: 	movsd	init_value(%rip), %xmm0
    000002d0: 	movsd	%xmm0, 0x10(%rdi,%rax,8)
    000002d6: 	addq	$0x3, %rax
    000002da: 	cmpl	%eax, %ebx
    000002dc: 	jg	.Ltmp1231 # Offset: 732
    000002de: 	jmp	.Ltmp1218 # Offset: 734
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1219:
    000002e8: 	xorl	%eax, %eax
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1232:
    000002f0: 	movsd	init_value(%rip), %xmm0
    000002f8: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
    000002fe: 	addq	$0x3, %rax
    00000302: 	cmpl	%eax, %ebx
    00000304: 	jg	.Ltmp1232 # Offset: 772
    00000306: 	jmp	.Ltmp1221 # Offset: 774
.Ltmp1230:
    0000030b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000312: 	movl	$0x5, %edx
    00000317: 	leaq	DATAat0x35004(%rip), %rsi
    0000031e: 	movsd	%xmm0, 0x10(%rsp)
    00000324: 	movq	%rbp, %rdi
    00000327: 	movsd	%xmm1, 0x8(%rsp)
    0000032d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 813
    00000332: 	cmpq	$0x0, 0x38(%rsp)
    00000338: 	movsd	0x8(%rsp), %xmm1
    0000033e: 	movsd	0x10(%rsp), %xmm0
    00000344: 	je	.Ltmp1233 # Offset: 836
    0000034a: 	movq	0x38(%rsp), %rbx
    0000034f: 	movsd	%xmm0, 0x10(%rsp)
    00000355: 	movsd	%xmm1, 0x8(%rsp)
    0000035b: 	movq	%rbx, %rdi
    0000035e: 	callq	strlen@PLT # Offset: 862
    00000363: 	movq	%rbx, %rsi
    00000366: 	movq	%rbp, %rdi
    00000369: 	movq	%rax, %rdx
    0000036c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 876
    00000371: 	movsd	0x10(%rsp), %xmm0
    00000377: 	movsd	0x8(%rsp), %xmm1
.Ltmp1234:
    0000037d: 	movl	$0xd, %edx
    00000382: 	leaq	DATAat0x3500a(%rip), %rsi
    00000389: 	movq	%rbp, %rdi
    0000038c: 	movsd	%xmm1, 0x8(%rsp)
    00000392: 	movsd	%xmm0, 0x10(%rsp)
    00000398: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 920
    0000039d: 	movsd	0x10(%rsp), %xmm0
    000003a3: 	movq	%rbp, %rdi
    000003a6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 934
    000003ab: 	movl	$0xb, %edx
    000003b0: 	leaq	DATAat0x35018(%rip), %rsi
    000003b7: 	movq	%rax, %rdi
    000003ba: 	movq	%rax, %rbp
    000003bd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 957
    000003c2: 	movsd	0x8(%rsp), %xmm1
    000003c8: 	movq	%rbp, %rdi
    000003cb: 	movapd	%xmm1, %xmm0
    000003cf: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 975
    000003d4: 	addq	$0x48, %rsp
    000003d8: 	popq	%rbx
    000003d9: 	movq	%rax, %rdi
    000003dc: 	popq	%rbp
    000003dd: 	popq	%r12
    000003df: 	popq	%r13
    000003e1: 	popq	%r14
    000003e3: 	popq	%r15
    000003e5: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 997
.Ltmp1225:
    000003ea: 	movsd	init_value(%rip), %xmm1
    000003f2: 	pxor	%xmm0, %xmm0
    000003f6: 	movq	DATAat0x36f60(%rip), %xmm3
    000003fe: 	movapd	%xmm0, %xmm2
    00000402: 	addsd	%xmm1, %xmm1
    00000406: 	mulsd	DATAat0x36ef0(%rip), %xmm1
    0000040e: 	subsd	%xmm1, %xmm2
    00000412: 	jmp	.Ltmp1229 # Offset: 1042
.Ltmp1233:
    00000417: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000041e: 	movq	-0x18(%rax), %rdi
    00000422: 	addq	%rbp, %rdi
    00000425: 	movl	0x20(%rdi), %esi
    00000428: 	orl	$0x1, %esi
    0000042b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1067
    00000430: 	movsd	0x8(%rsp), %xmm1
    00000436: 	movsd	0x10(%rsp), %xmm0
    0000043c: 	jmp	.Ltmp1234 # Offset: 1084
.Ltmp1226:
    00000441: 	pxor	%xmm0, %xmm0
    00000445: 	xorl	%eax, %eax
    00000447: 	jmp	.Ltmp1235 # Offset: 1095
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite3IdEvPT_iPKc"

Binary Function "_Z24test_loop_overwrite4_optIdEvPT_iPKc" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x1e9b0
  Size        : 0x3c9
  MaxSize     : 0x3d0
  Offset      : 0x1e9b0
  Section     : .text
  Orc Section : .local.text._Z24test_loop_overwrite4_optIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movl	%esi, %r12d
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	callq	clock@PLT # Offset: 23
    0000001c: 	movl	iterations(%rip), %r10d
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	testl	%r10d, %r10d
    0000002d: 	jle	.Ltmp1236 # Offset: 45
    00000033: 	cmpl	$0x3, %r12d
    00000037: 	jle	.Ltmp1236 # Offset: 55
    0000003d: 	leal	-0x4(%r12), %ecx
    00000042: 	leaq	init_value(%rip), %rsi
    00000049: 	movl	%ecx, %edx
    0000004b: 	shrl	$0x2, %edx
    0000004e: 	leal	0x1(%rdx), %eax
    00000051: 	movq	%rax, %r11
    00000054: 	shlq	$0x5, %rax
    00000058: 	addq	%rbx, %rax
    0000005b: 	cmpq	%rsi, %rax
    0000005e: 	setbe	%al
    00000061: 	addq	$0x8, %rsi
    00000065: 	cmpq	%rsi, %rbx
    00000068: 	setae	%sil
    0000006c: 	orb	%sil, %al
    0000006f: 	je	.Ltmp1237 # Offset: 111
    00000075: 	cmpl	$0xb, %ecx
    00000078: 	jbe	.Ltmp1237 # Offset: 120
    0000007e: 	movl	%r11d, %eax
    00000081: 	movl	%r11d, %r13d
    00000084: 	pxor	%xmm4, %xmm4
    00000088: 	xorl	%r9d, %r9d
    0000008b: 	shrl	%eax
    0000008d: 	andl	$-0x2, %r13d
    00000091: 	movsd	DATAat0x36fb0(%rip), %xmm3
    00000099: 	subl	$0x1, %eax
    0000009c: 	shlq	$0x6, %rax
    000000a0: 	leaq	0x40(%rbx,%rax), %r8
    000000a5: 	leal	(,%r13,4), %eax
    000000ad: 	cltq
    000000af: 	leaq	(%rbx,%rax,8), %rdi
    000000b3: 	leaq	0x8(,%rax,8), %rax
    000000bb: 	leaq	(%rbx,%rax), %rsi
    000000bf: 	leaq	0x8(%rbx,%rax), %rcx
    000000c4: 	leaq	0x10(%rbx,%rax), %rdx
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1240:
    000000d0: 	movsd	init_value(%rip), %xmm1
    000000d8: 	movapd	%xmm4, %xmm2
    000000dc: 	movq	%rbx, %rax
    000000df: 	unpcklpd	%xmm1, %xmm2
    000000e3: 	unpcklpd	%xmm3, %xmm1
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1238:
    000000f0: 	movups	%xmm2, (%rax)
    000000f3: 	addq	$0x40, %rax
    000000f7: 	movups	%xmm1, -0x30(%rax)
    000000fb: 	movups	%xmm2, -0x20(%rax)
    000000ff: 	movups	%xmm1, -0x10(%rax)
    00000103: 	cmpq	%r8, %rax
    00000106: 	jne	.Ltmp1238 # Offset: 262
    00000108: 	cmpl	%r13d, %r11d
    0000010b: 	je	.Ltmp1239 # Offset: 267
    0000010d: 	movq	$0x0, (%rdi)
    00000114: 	movsd	init_value(%rip), %xmm1
    0000011c: 	movsd	%xmm1, (%rsi)
    00000120: 	movsd	%xmm1, (%rcx)
    00000124: 	movsd	%xmm3, (%rdx)
.Ltmp1239:
    00000128: 	addl	$0x1, %r9d
    0000012c: 	cmpl	%r10d, %r9d
    0000012f: 	jne	.Ltmp1240 # Offset: 303
.Ltmp1248:
    00000131: 	movsd	%xmm4, 0x8(%rsp)
    00000137: 	movsd	%xmm3, (%rsp)
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	pxor	%xmm0, %xmm0
    00000145: 	movq	%rbp, %rdi
    00000148: 	movq	%rax, end_time(%rip)
    0000014f: 	subq	start_time(%rip), %rax
    00000156: 	cvtsi2sd	%rax, %xmm0
    0000015b: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000163: 	callq	_Z13record_resultdPKc # Offset: 355
    00000168: 	testl	%r12d, %r12d
    0000016b: 	movsd	(%rsp), %xmm3
    00000170: 	movsd	0x8(%rsp), %xmm4
    00000176: 	jle	.Ltmp1241 # Offset: 374
    0000017c: 	cmpl	$0x1, %r12d
    00000180: 	je	.Ltmp1242 # Offset: 384
    00000186: 	movl	%r12d, %edx
    00000189: 	movq	%rbx, %rax
    0000018c: 	movapd	%xmm4, %xmm0
    00000190: 	shrl	%edx
    00000192: 	subl	$0x1, %edx
    00000195: 	shlq	$0x4, %rdx
    00000199: 	leaq	0x10(%rbx,%rdx), %rdx
    0000019e: 	nop # Size: 2
.Ltmp1243:
    000001a0: 	movsd	(%rax), %xmm1
    000001a4: 	addq	$0x10, %rax
    000001a8: 	addsd	%xmm1, %xmm0
    000001ac: 	movsd	-0x8(%rax), %xmm1
    000001b1: 	addsd	%xmm1, %xmm0
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	jne	.Ltmp1243 # Offset: 440
    000001ba: 	movl	%r12d, %eax
    000001bd: 	andl	$-0x2, %eax
    000001c0: 	andl	$0x1, %r12d
    000001c4: 	je	.Ltmp1244 # Offset: 452
.Ltmp1252:
    000001c6: 	cltq
    000001c8: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1244:
    000001cd: 	movsd	init_value(%rip), %xmm1
    000001d5: 	movapd	%xmm0, %xmm4
    000001d9: 	movapd	%xmm0, %xmm2
    000001dd: 	addsd	%xmm1, %xmm1
    000001e1: 	addsd	%xmm3, %xmm1
    000001e5: 	movq	DATAat0x36f60(%rip), %xmm3
    000001ed: 	mulsd	DATAat0x36ef8(%rip), %xmm1
    000001f5: 	andpd	%xmm3, %xmm4
    000001f9: 	comisd	DATAat0x36ed8(%rip), %xmm4
    00000201: 	subsd	%xmm1, %xmm2
    00000205: 	jbe	.Ltmp1245 # Offset: 517
    00000207: 	divsd	%xmm0, %xmm2
.Ltmp1245:
    0000020b: 	andpd	%xmm3, %xmm2
    0000020f: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000217: 	comisd	%xmm2, %xmm3
    0000021b: 	jbe	.Ltmp1246 # Offset: 539
    0000021d: 	addq	$0x18, %rsp
    00000221: 	popq	%rbx
    00000222: 	popq	%rbp
    00000223: 	popq	%r12
    00000225: 	popq	%r13
    00000227: 	retq # Offset: 551
.Ltmp1246:
    00000228: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    0000022f: 	movl	$0x5, %edx
    00000234: 	movsd	%xmm1, (%rsp)
    00000239: 	leaq	DATAat0x35004(%rip), %rsi
    00000240: 	movq	%r12, %rdi
    00000243: 	movsd	%xmm0, 0x8(%rsp)
    00000249: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 585
    0000024e: 	testq	%rbp, %rbp
    00000251: 	movsd	(%rsp), %xmm1
    00000256: 	movsd	0x8(%rsp), %xmm0
    0000025c: 	je	.Ltmp1247 # Offset: 604
    00000262: 	movq	%rbp, %rdi
    00000265: 	movsd	%xmm0, 0x8(%rsp)
    0000026b: 	movsd	%xmm1, (%rsp)
    00000270: 	callq	strlen@PLT # Offset: 624
    00000275: 	movq	%rbp, %rsi
    00000278: 	movq	%r12, %rdi
    0000027b: 	movq	%rax, %rdx
    0000027e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 638
    00000283: 	movsd	0x8(%rsp), %xmm0
    00000289: 	movsd	(%rsp), %xmm1
.Ltmp1251:
    0000028e: 	movl	$0xd, %edx
    00000293: 	leaq	DATAat0x3500a(%rip), %rsi
    0000029a: 	movq	%r12, %rdi
    0000029d: 	movsd	%xmm1, (%rsp)
    000002a2: 	movsd	%xmm0, 0x8(%rsp)
    000002a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 680
    000002ad: 	movsd	0x8(%rsp), %xmm0
    000002b3: 	movq	%r12, %rdi
    000002b6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 694
    000002bb: 	movl	$0xb, %edx
    000002c0: 	leaq	DATAat0x35018(%rip), %rsi
    000002c7: 	movq	%rax, %rdi
    000002ca: 	movq	%rax, %rbp
    000002cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 717
    000002d2: 	movsd	(%rsp), %xmm1
    000002d7: 	movq	%rbp, %rdi
    000002da: 	movapd	%xmm1, %xmm0
    000002de: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 734
    000002e3: 	addq	$0x18, %rsp
    000002e7: 	popq	%rbx
    000002e8: 	movq	%rax, %rdi
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 752
.Ltmp1236:
    000002f5: 	movsd	DATAat0x36fb0(%rip), %xmm3
    000002fd: 	pxor	%xmm4, %xmm4
    00000301: 	jmp	.Ltmp1248 # Offset: 769
.Ltmp1237:
    00000306: 	shlq	$0x5, %rdx
    0000030a: 	movsd	DATAat0x36fb0(%rip), %xmm3
    00000312: 	xorl	%ecx, %ecx
    00000314: 	leaq	0x20(%rbx,%rdx), %rdx
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp1250:
    00000320: 	movq	%rbx, %rax
    00000323: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1249:
    00000328: 	movq	$0x0, (%rax)
    0000032f: 	movsd	init_value(%rip), %xmm0
    00000337: 	addq	$0x20, %rax
    0000033b: 	movsd	%xmm3, -0x8(%rax)
    00000340: 	movsd	%xmm0, -0x18(%rax)
    00000345: 	movsd	%xmm0, -0x10(%rax)
    0000034a: 	cmpq	%rax, %rdx
    0000034d: 	jne	.Ltmp1249 # Offset: 845
    0000034f: 	addl	$0x1, %ecx
    00000352: 	cmpl	%ecx, %r10d
    00000355: 	jne	.Ltmp1250 # Offset: 853
    00000357: 	pxor	%xmm4, %xmm4
    0000035b: 	jmp	.Ltmp1248 # Offset: 859
.Ltmp1241:
    00000360: 	movsd	init_value(%rip), %xmm0
    00000368: 	movapd	%xmm4, %xmm2
    0000036c: 	addsd	%xmm0, %xmm0
    00000370: 	addsd	%xmm3, %xmm0
    00000374: 	mulsd	DATAat0x36ef8(%rip), %xmm0
    0000037c: 	movq	DATAat0x36f60(%rip), %xmm3
    00000384: 	subsd	%xmm0, %xmm2
    00000388: 	movapd	%xmm0, %xmm1
    0000038c: 	movapd	%xmm4, %xmm0
    00000390: 	jmp	.Ltmp1245 # Offset: 912
.Ltmp1247:
    00000395: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000039c: 	movq	-0x18(%rax), %rdi
    000003a0: 	addq	%r12, %rdi
    000003a3: 	movl	0x20(%rdi), %esi
    000003a6: 	orl	$0x1, %esi
    000003a9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 937
    000003ae: 	movsd	(%rsp), %xmm1
    000003b3: 	movsd	0x8(%rsp), %xmm0
    000003b9: 	jmp	.Ltmp1251 # Offset: 953
.Ltmp1242:
    000003be: 	movapd	%xmm4, %xmm0
    000003c2: 	xorl	%eax, %eax
    000003c4: 	jmp	.Ltmp1252 # Offset: 964
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_loop_overwrite4_optIdEvPT_iPKc"

Binary Function "_Z32test_for_loop_blocked_overwrite4IdEvPT_iPKc" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x1ed80
  Size        : 0x79f
  MaxSize     : 0x7a0
  Offset      : 0x1ed80
  Section     : .text
  Orc Section : .local.text._Z32test_for_loop_blocked_overwrite4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x38, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	movl	%eax, 0x8(%rsp)
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1253 # Offset: 59
    00000041: 	leal	-0x3(%r13), %eax
    00000045: 	leal	-0x7f(%r13), %r11d
    00000049: 	movl	$0x0, (%rsp)
    00000050: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000058: 	movl	%eax, 0x14(%rsp)
    0000005c: 	leal	-0x80(%r13), %eax
    00000060: 	leaq	init_value(%rip), %r12
    00000067: 	movl	%r11d, %r14d
    0000006a: 	andl	$-0x80, %eax
    0000006d: 	movq	%r15, 0x28(%rsp)
    00000072: 	leaq	0x8(%r12), %rbp
    00000077: 	movl	%r13d, %r15d
    0000007a: 	subl	$-0x80, %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	leaq	0x8(%rbx), %rax
    00000085: 	movq	%rax, 0x20(%rsp)
.Ltmp1269:
    0000008a: 	movq	0x20(%rsp), %rdx
    0000008f: 	movl	$0x7d, %esi
    00000094: 	xorl	%r9d, %r9d
    00000097: 	xorl	%eax, %eax
    00000099: 	xorl	%r13d, %r13d
    0000009c: 	testl	%r14d, %r14d
    0000009f: 	jle	.Ltmp1254 # Offset: 159
.Ltmp1259:
    000000a5: 	movq	%rdx, %rdi
    000000a8: 	leaq	0x400(%rdx), %r8
    000000af: 	movl	$0x7f, %ecx
    000000b4: 	movq	$0x0, -0x8(%rdx)
    000000bc: 	andq	$-0x8, %rdi
    000000c0: 	movq	$0x0, -0x10(%r8)
    000000c8: 	rep		stosq	%rax, %es:(%rdi)
    000000cb: 	cmpq	%rsi, %r9
    000000ce: 	jae	.Ltmp1255 # Offset: 206
    000000d4: 	leaq	0x3e8(%rdx), %rcx
    000000db: 	cmpq	%r12, %rcx
    000000de: 	setbe	%cl
    000000e1: 	cmpq	%rbp, %rdx
    000000e4: 	setae	%dil
    000000e8: 	orb	%dil, %cl
    000000eb: 	je	.Ltmp1256 # Offset: 235
    000000f1: 	leaq	-0x79(%rsi), %rdi
    000000f5: 	leaq	0x3(%rsi), %rcx
    000000f9: 	cmpq	%rcx, %rdi
    000000fc: 	ja	.Ltmp1256 # Offset: 252
    00000102: 	movsd	init_value(%rip), %xmm0
    0000010a: 	movsd	%xmm0, (%rdx)
    0000010e: 	movsd	%xmm0, 0x20(%rdx)
    00000113: 	movsd	%xmm0, 0x40(%rdx)
    00000118: 	movsd	%xmm0, 0x60(%rdx)
    0000011d: 	movsd	%xmm0, 0x80(%rdx)
    00000125: 	movsd	%xmm0, 0xa0(%rdx)
    0000012d: 	movsd	%xmm0, 0xc0(%rdx)
    00000135: 	movsd	%xmm0, 0xe0(%rdx)
    0000013d: 	movsd	%xmm0, 0x100(%rdx)
    00000145: 	movsd	%xmm0, 0x120(%rdx)
    0000014d: 	movsd	%xmm0, 0x140(%rdx)
    00000155: 	movsd	%xmm0, 0x160(%rdx)
    0000015d: 	movsd	%xmm0, 0x180(%rdx)
    00000165: 	movsd	%xmm0, 0x1a0(%rdx)
    0000016d: 	movsd	%xmm0, 0x1c0(%rdx)
    00000175: 	movsd	%xmm0, 0x1e0(%rdx)
    0000017d: 	movsd	%xmm0, 0x200(%rdx)
    00000185: 	movsd	%xmm0, 0x220(%rdx)
    0000018d: 	movsd	%xmm0, 0x240(%rdx)
    00000195: 	movsd	%xmm0, 0x260(%rdx)
    0000019d: 	movsd	%xmm0, 0x280(%rdx)
    000001a5: 	movsd	%xmm0, 0x2a0(%rdx)
    000001ad: 	movsd	%xmm0, 0x2c0(%rdx)
    000001b5: 	movsd	%xmm0, 0x2e0(%rdx)
    000001bd: 	movsd	%xmm0, 0x300(%rdx)
    000001c5: 	movsd	%xmm0, 0x320(%rdx)
    000001cd: 	movsd	%xmm0, 0x340(%rdx)
    000001d5: 	movsd	%xmm0, 0x360(%rdx)
    000001dd: 	movsd	%xmm0, 0x380(%rdx)
    000001e5: 	movsd	%xmm0, 0x3a0(%rdx)
    000001ed: 	movsd	%xmm0, 0x3c0(%rdx)
    000001f5: 	movsd	%xmm0, 0x3e0(%rdx)
.Ltmp1279:
    000001fd: 	leaq	0x8(%rdx), %rcx
    00000201: 	leaq	0x3f0(%rdx), %rdi
    00000208: 	cmpq	%rbp, %rcx
    0000020b: 	setae	%cl
    0000020e: 	cmpq	%r12, %rdi
    00000211: 	setbe	%dil
    00000215: 	orb	%dil, %cl
    00000218: 	je	.Ltmp1257 # Offset: 536
    0000021e: 	leaq	-0x79(%rsi), %rdi
    00000222: 	leaq	0x3(%rsi), %rcx
    00000226: 	cmpq	%rcx, %rdi
    00000229: 	ja	.Ltmp1257 # Offset: 553
    0000022f: 	movsd	init_value(%rip), %xmm0
    00000237: 	movsd	%xmm0, 0x8(%rdx)
    0000023c: 	movsd	%xmm0, 0x28(%rdx)
    00000241: 	movsd	%xmm0, 0x48(%rdx)
    00000246: 	movsd	%xmm0, 0x68(%rdx)
    0000024b: 	movsd	%xmm0, 0x88(%rdx)
    00000253: 	movsd	%xmm0, 0xa8(%rdx)
    0000025b: 	movsd	%xmm0, 0xc8(%rdx)
    00000263: 	movsd	%xmm0, 0xe8(%rdx)
    0000026b: 	movsd	%xmm0, 0x108(%rdx)
    00000273: 	movsd	%xmm0, 0x128(%rdx)
    0000027b: 	movsd	%xmm0, 0x148(%rdx)
    00000283: 	movsd	%xmm0, 0x168(%rdx)
    0000028b: 	movsd	%xmm0, 0x188(%rdx)
    00000293: 	movsd	%xmm0, 0x1a8(%rdx)
    0000029b: 	movsd	%xmm0, 0x1c8(%rdx)
    000002a3: 	movsd	%xmm0, 0x1e8(%rdx)
    000002ab: 	movsd	%xmm0, 0x208(%rdx)
    000002b3: 	movsd	%xmm0, 0x228(%rdx)
    000002bb: 	movsd	%xmm0, 0x248(%rdx)
    000002c3: 	movsd	%xmm0, 0x268(%rdx)
    000002cb: 	movsd	%xmm0, 0x288(%rdx)
    000002d3: 	movsd	%xmm0, 0x2a8(%rdx)
    000002db: 	movsd	%xmm0, 0x2c8(%rdx)
    000002e3: 	movsd	%xmm0, 0x2e8(%rdx)
    000002eb: 	movsd	%xmm0, 0x308(%rdx)
    000002f3: 	movsd	%xmm0, 0x328(%rdx)
    000002fb: 	movsd	%xmm0, 0x348(%rdx)
    00000303: 	movsd	%xmm0, 0x368(%rdx)
    0000030b: 	movsd	%xmm0, 0x388(%rdx)
    00000313: 	movsd	%xmm0, 0x3a8(%rdx)
    0000031b: 	movsd	%xmm0, 0x3c8(%rdx)
    00000323: 	movsd	%xmm0, 0x3e8(%rdx)
.Ltmp1277:
    0000032b: 	movq	%r9, %rdx
    0000032e: 	nop # Size: 2
.Ltmp1258:
    00000330: 	movsd	%xmm1, 0x18(%rbx,%rdx,8)
    00000336: 	addq	$0x4, %rdx
    0000033a: 	cmpq	%rsi, %rdx
    0000033d: 	jb	.Ltmp1258 # Offset: 829
.Ltmp1255:
    0000033f: 	subq	$-0x80, %r9
    00000343: 	subq	$-0x80, %rsi
    00000347: 	movq	%r8, %rdx
    0000034a: 	cmpl	%r9d, %r14d
    0000034d: 	jg	.Ltmp1259 # Offset: 845
    00000353: 	movl	0x10(%rsp), %r13d
.Ltmp1254:
    00000358: 	cmpl	%r13d, %r15d
    0000035b: 	jle	.Ltmp1260 # Offset: 859
    0000035d: 	leal	-0x1(%r15), %eax
    00000361: 	xorl	%esi, %esi
    00000363: 	movsd	%xmm1, 0x18(%rsp)
    00000369: 	subl	%r13d, %eax
    0000036c: 	leaq	0x8(,%rax,8), %rdx
    00000374: 	movslq	%r13d, %rax
    00000377: 	leaq	(%rbx,%rax,8), %rdi
    0000037b: 	callq	memset@PLT # Offset: 891
    00000380: 	movsd	0x18(%rsp), %xmm1
.Ltmp1260:
    00000386: 	cmpl	0x14(%rsp), %r13d
    0000038b: 	jge	.Ltmp1261 # Offset: 907
    00000391: 	leal	-0x4(%r15), %edx
    00000395: 	movslq	%r13d, %r10
    00000398: 	subl	%r13d, %edx
    0000039b: 	leaq	0x8(,%r10,8), %rsi
    000003a3: 	cmpl	$0x3b, %edx
    000003a6: 	leaq	(%rbx,%rsi), %rdi
    000003aa: 	seta	%r8b
    000003ae: 	shrl	$0x2, %edx
    000003b1: 	leal	0x1(%rdx), %eax
    000003b4: 	movq	%rax, %r9
    000003b7: 	leaq	-0x2(%r10,%rax,4), %rax
    000003bc: 	shlq	$0x3, %rax
    000003c0: 	movq	%rax, 0x18(%rsp)
    000003c5: 	addq	%rbx, %rax
    000003c8: 	cmpq	%r12, %rax
    000003cb: 	setbe	%cl
    000003ce: 	cmpq	%rbp, %rdi
    000003d1: 	setae	%al
    000003d4: 	orb	%cl, %al
    000003d6: 	je	.Ltmp1262 # Offset: 982
    000003dc: 	testb	%r8b, %r8b
    000003df: 	je	.Ltmp1262 # Offset: 991
    000003e5: 	movl	%r9d, %ecx
    000003e8: 	movsd	init_value(%rip), %xmm0
    000003f0: 	movq	%rdi, %rax
    000003f3: 	shrl	%ecx
    000003f5: 	subl	$0x1, %ecx
    000003f8: 	shlq	$0x6, %rcx
    000003fc: 	leaq	0x40(%rdi,%rcx), %rcx
.Ltmp1263:
    00000401: 	movsd	%xmm0, (%rax)
    00000405: 	addq	$0x40, %rax
    00000409: 	movsd	%xmm0, -0x20(%rax)
    0000040e: 	cmpq	%rcx, %rax
    00000411: 	jne	.Ltmp1263 # Offset: 1041
    00000413: 	movl	%r9d, %ecx
    00000416: 	andl	$-0x2, %ecx
    00000419: 	leal	(%r13,%rcx,4), %eax
    0000041e: 	cmpl	%ecx, %r9d
    00000421: 	je	.Ltmp1264 # Offset: 1057
    00000423: 	movsd	init_value(%rip), %xmm0
    0000042b: 	addl	$0x1, %eax
    0000042e: 	cltq
    00000430: 	movsd	%xmm0, (%rbx,%rax,8)
.Ltmp1264:
    00000435: 	leaq	-0x8(%rsi), %rax
    00000439: 	leaq	0x20(%rbx), %rcx
.Ltmp1282:
    0000043d: 	movq	0x18(%rsp), %rdi
    00000442: 	leaq	0x8(%rbx,%rsi), %r11
    00000447: 	leaq	0x8(%rbx,%rdi), %rsi
    0000044c: 	cmpq	%r12, %rsi
    0000044f: 	setbe	%dil
    00000453: 	cmpq	%rbp, %r11
    00000456: 	setae	%sil
    0000045a: 	orb	%dil, %sil
    0000045d: 	je	.Ltmp1265 # Offset: 1117
    00000463: 	testb	%r8b, %r8b
    00000466: 	je	.Ltmp1265 # Offset: 1126
    0000046c: 	movl	%r9d, %edi
    0000046f: 	movsd	init_value(%rip), %xmm0
    00000477: 	movq	%r11, %rsi
    0000047a: 	shrl	%edi
    0000047c: 	subl	$0x1, %edi
    0000047f: 	shlq	$0x6, %rdi
    00000483: 	leaq	0x40(%r11,%rdi), %rdi
.Ltmp1266:
    00000488: 	movsd	%xmm0, (%rsi)
    0000048c: 	addq	$0x40, %rsi
    00000490: 	movsd	%xmm0, -0x20(%rsi)
    00000495: 	cmpq	%rdi, %rsi
    00000498: 	jne	.Ltmp1266 # Offset: 1176
    0000049a: 	movl	%r9d, %edi
    0000049d: 	andl	$-0x2, %edi
    000004a0: 	leal	(%r13,%rdi,4), %esi
    000004a5: 	cmpl	%r9d, %edi
    000004a8: 	je	.Ltmp1267 # Offset: 1192
    000004aa: 	movsd	init_value(%rip), %xmm0
    000004b2: 	addl	$0x2, %esi
    000004b5: 	movslq	%esi, %rsi
    000004b8: 	movsd	%xmm0, (%rbx,%rsi,8)
.Ltmp1267:
    000004bd: 	leaq	(%r10,%rdx,4), %rdx
    000004c1: 	addq	%rbx, %rax
    000004c4: 	leaq	(%rcx,%rdx,8), %rdx
.Ltmp1268:
    000004c8: 	movsd	%xmm1, 0x18(%rax)
    000004cd: 	addq	$0x20, %rax
    000004d1: 	cmpq	%rax, %rdx
    000004d4: 	jne	.Ltmp1268 # Offset: 1236
.Ltmp1261:
    000004d6: 	addl	$0x1, (%rsp)
    000004da: 	movl	(%rsp), %eax
    000004dd: 	cmpl	%eax, 0x8(%rsp)
    000004e1: 	jne	.Ltmp1269 # Offset: 1249
    000004e7: 	movl	%r15d, %r13d
    000004ea: 	movq	0x28(%rsp), %r15
.Ltmp1253:
    000004ef: 	movsd	%xmm1, (%rsp)
    000004f4: 	callq	clock@PLT # Offset: 1268
    000004f9: 	pxor	%xmm0, %xmm0
    000004fd: 	movq	%r15, %rdi
    00000500: 	movq	%rax, end_time(%rip)
    00000507: 	subq	start_time(%rip), %rax
    0000050e: 	cvtsi2sd	%rax, %xmm0
    00000513: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000051b: 	callq	_Z13record_resultdPKc # Offset: 1307
    00000520: 	testl	%r13d, %r13d
    00000523: 	movsd	(%rsp), %xmm1
    00000528: 	jle	.Ltmp1270 # Offset: 1320
    0000052e: 	cmpl	$0x1, %r13d
    00000532: 	je	.Ltmp1271 # Offset: 1330
    00000538: 	movl	%r13d, %edx
    0000053b: 	movq	%rbx, %rax
    0000053e: 	pxor	%xmm0, %xmm0
    00000542: 	shrl	%edx
    00000544: 	subl	$0x1, %edx
    00000547: 	shlq	$0x4, %rdx
    0000054b: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp1272:
    00000550: 	movsd	(%rax), %xmm2
    00000554: 	addq	$0x10, %rax
    00000558: 	addsd	%xmm2, %xmm0
    0000055c: 	movsd	-0x8(%rax), %xmm2
    00000561: 	addsd	%xmm2, %xmm0
    00000565: 	cmpq	%rax, %rdx
    00000568: 	jne	.Ltmp1272 # Offset: 1384
    0000056a: 	movl	%r13d, %eax
    0000056d: 	andl	$-0x2, %eax
    00000570: 	andl	$0x1, %r13d
    00000574: 	je	.Ltmp1273 # Offset: 1396
.Ltmp1285:
    00000576: 	cltq
    00000578: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1273:
    0000057d: 	movsd	init_value(%rip), %xmm2
    00000585: 	movapd	%xmm0, %xmm3
    00000589: 	addsd	%xmm2, %xmm2
    0000058d: 	addsd	%xmm1, %xmm2
    00000591: 	mulsd	DATAat0x36ef8(%rip), %xmm2
    00000599: 	movapd	%xmm0, %xmm1
    0000059d: 	subsd	%xmm2, %xmm1
    000005a1: 	movsd	%xmm2, (%rsp)
    000005a6: 	movq	DATAat0x36f60(%rip), %xmm2
    000005ae: 	andpd	%xmm2, %xmm3
    000005b2: 	comisd	DATAat0x36ed8(%rip), %xmm3
    000005ba: 	jbe	.Ltmp1274 # Offset: 1466
    000005bc: 	divsd	%xmm0, %xmm1
.Ltmp1274:
    000005c0: 	andpd	%xmm2, %xmm1
    000005c4: 	movsd	DATAat0x36ee0(%rip), %xmm2
    000005cc: 	comisd	%xmm1, %xmm2
    000005d0: 	jbe	.Ltmp1275 # Offset: 1488
    000005d6: 	addq	$0x38, %rsp
    000005da: 	popq	%rbx
    000005db: 	popq	%rbp
    000005dc: 	popq	%r12
    000005de: 	popq	%r13
    000005e0: 	popq	%r14
    000005e2: 	popq	%r15
    000005e4: 	retq # Offset: 1508
.Ltmp1257:
    000005e5: 	movq	%r9, %rdx
    000005e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1276:
    000005f0: 	movsd	init_value(%rip), %xmm0
    000005f8: 	movsd	%xmm0, 0x10(%rbx,%rdx,8)
    000005fe: 	addq	$0x4, %rdx
    00000602: 	cmpq	%rsi, %rdx
    00000605: 	jb	.Ltmp1276 # Offset: 1541
    00000607: 	jmp	.Ltmp1277 # Offset: 1543
.Ltmp1256:
    0000060c: 	movq	%r9, %rcx
    0000060f: 	nop # Size: 1
.Ltmp1278:
    00000610: 	movsd	init_value(%rip), %xmm0
    00000618: 	movsd	%xmm0, 0x8(%rbx,%rcx,8)
    0000061e: 	addq	$0x4, %rcx
    00000622: 	cmpq	%rsi, %rcx
    00000625: 	jb	.Ltmp1278 # Offset: 1573
    00000627: 	jmp	.Ltmp1279 # Offset: 1575
.Ltmp1265:
    0000062c: 	leaq	(%r10,%rdx,4), %rdi
    00000630: 	leaq	(%rbx,%rax), %rsi
    00000634: 	leaq	(%rcx,%rdi,8), %rdi
.Ltmp1280:
    00000638: 	movsd	init_value(%rip), %xmm0
    00000640: 	addq	$0x20, %rsi
    00000644: 	movsd	%xmm0, -0x10(%rsi)
    00000649: 	cmpq	%rdi, %rsi
    0000064c: 	jne	.Ltmp1280 # Offset: 1612
    0000064e: 	jmp	.Ltmp1267 # Offset: 1614
.Ltmp1262:
    00000653: 	leaq	-0x8(%rsi), %rax
    00000657: 	leaq	(%r10,%rdx,4), %r11
    0000065b: 	leaq	0x20(%rbx), %rcx
    0000065f: 	leaq	(%rbx,%rax), %rdi
    00000663: 	leaq	(%rcx,%r11,8), %r11
.Ltmp1281:
    00000667: 	movsd	init_value(%rip), %xmm0
    0000066f: 	addq	$0x20, %rdi
    00000673: 	movsd	%xmm0, -0x18(%rdi)
    00000678: 	cmpq	%r11, %rdi
    0000067b: 	jne	.Ltmp1281 # Offset: 1659
    0000067d: 	jmp	.Ltmp1282 # Offset: 1661
.Ltmp1275:
    00000682: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000689: 	movl	$0x5, %edx
    0000068e: 	leaq	DATAat0x35004(%rip), %rsi
    00000695: 	movsd	%xmm0, 0x8(%rsp)
    0000069b: 	movq	%rbp, %rdi
    0000069e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1694
    000006a3: 	testq	%r15, %r15
    000006a6: 	movsd	0x8(%rsp), %xmm0
    000006ac: 	je	.Ltmp1283 # Offset: 1708
    000006b2: 	movq	%r15, %rdi
    000006b5: 	movsd	%xmm0, 0x8(%rsp)
    000006bb: 	callq	strlen@PLT # Offset: 1723
    000006c0: 	movq	%r15, %rsi
    000006c3: 	movq	%rbp, %rdi
    000006c6: 	movq	%rax, %rdx
    000006c9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1737
    000006ce: 	movsd	0x8(%rsp), %xmm0
.Ltmp1284:
    000006d4: 	movl	$0xd, %edx
    000006d9: 	leaq	DATAat0x3500a(%rip), %rsi
    000006e0: 	movq	%rbp, %rdi
    000006e3: 	movsd	%xmm0, 0x8(%rsp)
    000006e9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1769
    000006ee: 	movsd	0x8(%rsp), %xmm0
    000006f4: 	movq	%rbp, %rdi
    000006f7: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1783
    000006fc: 	movl	$0xb, %edx
    00000701: 	leaq	DATAat0x35018(%rip), %rsi
    00000708: 	movq	%rax, %rdi
    0000070b: 	movq	%rax, %rbp
    0000070e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1806
    00000713: 	movsd	(%rsp), %xmm0
    00000718: 	movq	%rbp, %rdi
    0000071b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1819
    00000720: 	addq	$0x38, %rsp
    00000724: 	popq	%rbx
    00000725: 	movq	%rax, %rdi
    00000728: 	popq	%rbp
    00000729: 	popq	%r12
    0000072b: 	popq	%r13
    0000072d: 	popq	%r14
    0000072f: 	popq	%r15
    00000731: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1841
.Ltmp1283:
    00000736: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000073d: 	movq	-0x18(%rax), %rdi
    00000741: 	addq	%rbp, %rdi
    00000744: 	movl	0x20(%rdi), %esi
    00000747: 	orl	$0x1, %esi
    0000074a: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1866
    0000074f: 	movsd	0x8(%rsp), %xmm0
    00000755: 	jmp	.Ltmp1284 # Offset: 1877
.Ltmp1270:
    0000075a: 	movsd	init_value(%rip), %xmm0
    00000762: 	movq	DATAat0x36f60(%rip), %xmm2
    0000076a: 	addsd	%xmm0, %xmm0
    0000076e: 	addsd	%xmm1, %xmm0
    00000772: 	mulsd	DATAat0x36ef8(%rip), %xmm0
    0000077a: 	movapd	%xmm0, %xmm4
    0000077e: 	movsd	%xmm0, (%rsp)
    00000783: 	pxor	%xmm0, %xmm0
    00000787: 	movapd	%xmm0, %xmm1
    0000078b: 	subsd	%xmm4, %xmm1
    0000078f: 	jmp	.Ltmp1274 # Offset: 1935
.Ltmp1271:
    00000794: 	xorl	%eax, %eax
    00000796: 	pxor	%xmm0, %xmm0
    0000079a: 	jmp	.Ltmp1285 # Offset: 1946
DWARF CFI Instructions:
    <empty>
End of Function "_Z32test_for_loop_blocked_overwrite4IdEvPT_iPKc"

Binary Function "_Z30test_for_loop_bzero_overwrite4IdEvPT_iPKc" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x1f520
  Size        : 0x4b4
  MaxSize     : 0x4c0
  Offset      : 0x1f520
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_bzero_overwrite4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x58, %rsp
    00000015: 	movl	%esi, 0x30(%rsp)
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	movl	iterations(%rip), %eax
    00000038: 	testl	%eax, %eax
    0000003a: 	jle	.Ltmp1286 # Offset: 58
    00000040: 	movslq	0x30(%rsp), %r15
    00000045: 	leaq	init_value(%rip), %rdi
    0000004c: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000054: 	movq	%r15, %rax
    00000057: 	leaq	(,%r15,8), %rsi
    0000005f: 	subl	$0x4, %eax
    00000062: 	movq	%rsi, 0x20(%rsp)
    00000067: 	cmpl	$0x3b, %eax
    0000006a: 	seta	%r9b
    0000006e: 	shrl	$0x2, %eax
    00000071: 	leal	0x1(%rax), %ecx
    00000074: 	movq	%rcx, %rbx
    00000077: 	movl	%ecx, 0x10(%rsp)
    0000007b: 	subq	$0x1, %rcx
    0000007f: 	shlq	$0x5, %rcx
    00000083: 	leaq	0x10(%rbp,%rcx), %rdx
    00000088: 	leaq	0x18(%rbp,%rcx), %rcx
    0000008d: 	cmpq	%rdi, %rdx
    00000090: 	setbe	%dl
    00000093: 	cmpq	%rdi, %rbp
    00000096: 	setae	%sil
    0000009a: 	shlq	$0x5, %rax
    0000009e: 	orl	%esi, %edx
    000000a0: 	andl	%r9d, %edx
    000000a3: 	movb	%dl, 0x37(%rsp)
    000000a7: 	movl	%ebx, %edx
    000000a9: 	andl	$-0x2, %ebx
    000000ac: 	shrl	%edx
    000000ae: 	movl	%ebx, 0x1c(%rsp)
    000000b2: 	leal	-0x1(%rdx), %esi
    000000b5: 	leal	(,%rbx,4), %edx
    000000bc: 	shlq	$0x6, %rsi
    000000c0: 	leaq	0x28(%rbp,%rax), %rbx
    000000c5: 	leal	0x1(%rdx), %r8d
    000000c9: 	cmpq	%rdi, %rcx
    000000cc: 	setbe	%cl
    000000cf: 	movq	%rbx, 0x48(%rsp)
    000000d4: 	addq	$0x8, %rdi
    000000d8: 	leaq	0x10(%rbp), %rbx
    000000dc: 	cmpq	%rdi, %rbx
    000000df: 	movslq	%r8d, %r8
    000000e2: 	leaq	0x50(%rbp,%rsi), %r12
    000000e7: 	movq	%rbx, 0x28(%rsp)
    000000ec: 	setae	%dil
    000000f0: 	addl	$0x2, %edx
    000000f3: 	leaq	(%rbp,%r8,8), %r15
    000000f8: 	xorl	%r14d, %r14d
    000000fb: 	orl	%edi, %ecx
    000000fd: 	movslq	%edx, %rdx
    00000100: 	leaq	0x38(%rbp,%rax), %rbx
    00000105: 	movq	%rbp, %rdi
    00000108: 	andl	%r9d, %ecx
    0000010b: 	leaq	(%rbp,%rdx,8), %r13
    00000110: 	leaq	0x48(%rbp,%rsi), %r10
    00000115: 	movb	%cl, 0x36(%rsp)
    00000119: 	leaq	0x30(%rbp,%rax), %rcx
    0000011e: 	movq	%r15, %rax
    00000121: 	movq	%r10, %rbp
    00000124: 	movq	%rcx, 0x40(%rsp)
    00000129: 	movq	%r12, %r15
    0000012c: 	movq	%r13, %r12
    0000012f: 	movq	%rax, %r13
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1295:
    00000138: 	movq	0x20(%rsp), %rdx
    0000013d: 	xorl	%esi, %esi
    0000013f: 	movsd	%xmm1, 0x8(%rsp)
    00000145: 	callq	memset@PLT # Offset: 325
    0000014a: 	cmpl	$0x3, 0x30(%rsp)
    0000014f: 	movsd	0x8(%rsp), %xmm1
    00000155: 	movq	%rax, %rdi
    00000158: 	jle	.Ltmp1287 # Offset: 344
    0000015e: 	cmpb	$0x0, 0x37(%rsp)
    00000163: 	je	.Ltmp1288 # Offset: 355
    00000169: 	movsd	init_value(%rip), %xmm0
    00000171: 	leaq	0x8(%rax), %rax
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp1289:
    00000178: 	movsd	%xmm0, (%rax)
    0000017c: 	addq	$0x40, %rax
    00000180: 	movsd	%xmm0, -0x20(%rax)
    00000185: 	cmpq	%rbp, %rax
    00000188: 	jne	.Ltmp1289 # Offset: 392
    0000018a: 	movl	0x1c(%rsp), %ecx
    0000018e: 	cmpl	%ecx, 0x10(%rsp)
    00000192: 	je	.Ltmp1290 # Offset: 402
    00000194: 	movsd	init_value(%rip), %xmm0
    0000019c: 	movsd	%xmm0, (%r13)
.Ltmp1290:
    000001a2: 	cmpb	$0x0, 0x36(%rsp)
    000001a7: 	je	.Ltmp1291 # Offset: 423
    000001ad: 	movsd	init_value(%rip), %xmm0
    000001b5: 	movq	0x28(%rsp), %rax
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1292:
    000001c0: 	movsd	%xmm0, (%rax)
    000001c4: 	addq	$0x40, %rax
    000001c8: 	movsd	%xmm0, -0x20(%rax)
    000001cd: 	cmpq	%r15, %rax
    000001d0: 	jne	.Ltmp1292 # Offset: 464
    000001d2: 	movl	0x1c(%rsp), %esi
    000001d6: 	cmpl	%esi, 0x10(%rsp)
    000001da: 	je	.Ltmp1293 # Offset: 474
    000001dc: 	movsd	init_value(%rip), %xmm0
    000001e4: 	movsd	%xmm0, (%r12)
.Ltmp1293:
    000001ea: 	leaq	0x18(%rdi), %rax
    000001ee: 	nop # Size: 2
.Ltmp1294:
    000001f0: 	movsd	%xmm1, (%rax)
    000001f4: 	addq	$0x20, %rax
    000001f8: 	cmpq	%rbx, %rax
    000001fb: 	jne	.Ltmp1294 # Offset: 507
.Ltmp1287:
    000001fd: 	addl	$0x1, %r14d
    00000201: 	cmpl	%r14d, iterations(%rip)
    00000208: 	jg	.Ltmp1295 # Offset: 520
    0000020e: 	movq	%rdi, %rbp
.Ltmp1286:
    00000211: 	movsd	%xmm1, 0x8(%rsp)
    00000217: 	callq	clock@PLT # Offset: 535
    0000021c: 	movq	0x38(%rsp), %rdi
    00000221: 	pxor	%xmm0, %xmm0
    00000225: 	movq	%rax, end_time(%rip)
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	cvtsi2sd	%rax, %xmm0
    00000238: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000240: 	callq	_Z13record_resultdPKc # Offset: 576
    00000245: 	movl	0x30(%rsp), %ecx
    00000249: 	movsd	0x8(%rsp), %xmm1
    0000024f: 	testl	%ecx, %ecx
    00000251: 	jle	.Ltmp1296 # Offset: 593
    00000257: 	cmpl	$0x1, %ecx
    0000025a: 	je	.Ltmp1297 # Offset: 602
    00000260: 	shrl	%ecx
    00000262: 	movq	%rbp, %rax
    00000265: 	pxor	%xmm0, %xmm0
    00000269: 	movl	%ecx, %edx
    0000026b: 	subl	$0x1, %edx
    0000026e: 	shlq	$0x4, %rdx
    00000272: 	leaq	0x10(%rbp,%rdx), %rdx
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1298:
    00000280: 	movsd	(%rax), %xmm2
    00000284: 	addq	$0x10, %rax
    00000288: 	addsd	%xmm2, %xmm0
    0000028c: 	movsd	-0x8(%rax), %xmm2
    00000291: 	addsd	%xmm2, %xmm0
    00000295: 	cmpq	%rdx, %rax
    00000298: 	jne	.Ltmp1298 # Offset: 664
    0000029a: 	movl	0x30(%rsp), %esi
    0000029e: 	movl	%esi, %eax
    000002a0: 	andl	$-0x2, %eax
    000002a3: 	andl	$0x1, %esi
    000002a6: 	je	.Ltmp1299 # Offset: 678
.Ltmp1306:
    000002a8: 	cltq
    000002aa: 	addsd	(%rbp,%rax,8), %xmm0
.Ltmp1299:
    000002b0: 	movsd	init_value(%rip), %xmm2
    000002b8: 	movq	DATAat0x36f60(%rip), %xmm3
    000002c0: 	movapd	%xmm0, %xmm4
    000002c4: 	addsd	%xmm2, %xmm2
    000002c8: 	andpd	%xmm3, %xmm4
    000002cc: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000002d4: 	addsd	%xmm1, %xmm2
    000002d8: 	mulsd	DATAat0x36ef8(%rip), %xmm2
    000002e0: 	movapd	%xmm0, %xmm1
    000002e4: 	subsd	%xmm2, %xmm1
    000002e8: 	jbe	.Ltmp1300 # Offset: 744
    000002ea: 	divsd	%xmm0, %xmm1
.Ltmp1300:
    000002ee: 	andpd	%xmm3, %xmm1
    000002f2: 	movsd	DATAat0x36ee0(%rip), %xmm3
    000002fa: 	comisd	%xmm1, %xmm3
    000002fe: 	jbe	.Ltmp1301 # Offset: 766
    00000300: 	addq	$0x58, %rsp
    00000304: 	popq	%rbx
    00000305: 	popq	%rbp
    00000306: 	popq	%r12
    00000308: 	popq	%r13
    0000030a: 	popq	%r14
    0000030c: 	popq	%r15
    0000030e: 	retq # Offset: 782
    0000030f: 	nop # Size: 1
.Ltmp1291:
    00000310: 	movq	0x28(%rsp), %rax
    00000315: 	movq	0x40(%rsp), %rdx
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1302:
    00000320: 	movsd	init_value(%rip), %xmm0
    00000328: 	addq	$0x20, %rax
    0000032c: 	movsd	%xmm0, -0x20(%rax)
    00000331: 	cmpq	%rax, %rdx
    00000334: 	jne	.Ltmp1302 # Offset: 820
    00000336: 	jmp	.Ltmp1293 # Offset: 822
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1288:
    00000340: 	movq	0x48(%rsp), %rdx
    00000345: 	leaq	0x8(%rax), %rax
    00000349: 	nopl	(%rax) # Size: 7
.Ltmp1303:
    00000350: 	movsd	init_value(%rip), %xmm0
    00000358: 	addq	$0x20, %rax
    0000035c: 	movsd	%xmm0, -0x20(%rax)
    00000361: 	cmpq	%rdx, %rax
    00000364: 	jne	.Ltmp1303 # Offset: 868
    00000366: 	jmp	.Ltmp1290 # Offset: 870
.Ltmp1301:
    0000036b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000372: 	movl	$0x5, %edx
    00000377: 	leaq	DATAat0x35004(%rip), %rsi
    0000037e: 	movsd	%xmm2, 0x10(%rsp)
    00000384: 	movq	%rbp, %rdi
    00000387: 	movsd	%xmm0, 0x8(%rsp)
    0000038d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 909
    00000392: 	cmpq	$0x0, 0x38(%rsp)
    00000398: 	movsd	0x8(%rsp), %xmm0
    0000039e: 	movsd	0x10(%rsp), %xmm2
    000003a4: 	je	.Ltmp1304 # Offset: 932
    000003aa: 	movq	0x38(%rsp), %rbx
    000003af: 	movsd	%xmm2, 0x10(%rsp)
    000003b5: 	movsd	%xmm0, 0x8(%rsp)
    000003bb: 	movq	%rbx, %rdi
    000003be: 	callq	strlen@PLT # Offset: 958
    000003c3: 	movq	%rbx, %rsi
    000003c6: 	movq	%rbp, %rdi
    000003c9: 	movq	%rax, %rdx
    000003cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 972
    000003d1: 	movsd	0x10(%rsp), %xmm2
    000003d7: 	movsd	0x8(%rsp), %xmm0
.Ltmp1305:
    000003dd: 	movl	$0xd, %edx
    000003e2: 	leaq	DATAat0x3500a(%rip), %rsi
    000003e9: 	movq	%rbp, %rdi
    000003ec: 	movsd	%xmm2, 0x10(%rsp)
    000003f2: 	movsd	%xmm0, 0x8(%rsp)
    000003f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1016
    000003fd: 	movsd	0x8(%rsp), %xmm0
    00000403: 	movq	%rbp, %rdi
    00000406: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1030
    0000040b: 	movl	$0xb, %edx
    00000410: 	leaq	DATAat0x35018(%rip), %rsi
    00000417: 	movq	%rax, %rdi
    0000041a: 	movq	%rax, %rbp
    0000041d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1053
    00000422: 	movsd	0x10(%rsp), %xmm2
    00000428: 	movq	%rbp, %rdi
    0000042b: 	movapd	%xmm2, %xmm0
    0000042f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1071
    00000434: 	addq	$0x58, %rsp
    00000438: 	popq	%rbx
    00000439: 	movq	%rax, %rdi
    0000043c: 	popq	%rbp
    0000043d: 	popq	%r12
    0000043f: 	popq	%r13
    00000441: 	popq	%r14
    00000443: 	popq	%r15
    00000445: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1093
.Ltmp1296:
    0000044a: 	movsd	init_value(%rip), %xmm0
    00000452: 	movsd	DATAat0x36ef8(%rip), %xmm2
    0000045a: 	movq	DATAat0x36f60(%rip), %xmm3
    00000462: 	addsd	%xmm0, %xmm0
    00000466: 	addsd	%xmm1, %xmm0
    0000046a: 	mulsd	%xmm0, %xmm2
    0000046e: 	pxor	%xmm0, %xmm0
    00000472: 	movapd	%xmm0, %xmm1
    00000476: 	subsd	%xmm2, %xmm1
    0000047a: 	jmp	.Ltmp1300 # Offset: 1146
.Ltmp1304:
    0000047f: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000486: 	movq	-0x18(%rax), %rdi
    0000048a: 	addq	%rbp, %rdi
    0000048d: 	movl	0x20(%rdi), %esi
    00000490: 	orl	$0x1, %esi
    00000493: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1171
    00000498: 	movsd	0x8(%rsp), %xmm0
    0000049e: 	movsd	0x10(%rsp), %xmm2
    000004a4: 	jmp	.Ltmp1305 # Offset: 1188
.Ltmp1297:
    000004a9: 	pxor	%xmm0, %xmm0
    000004ad: 	xorl	%eax, %eax
    000004af: 	jmp	.Ltmp1306 # Offset: 1199
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_bzero_overwrite4IdEvPT_iPKc"

Binary Function "_Z31test_for_loop_memset_overwrite4IdEvPT_iPKc" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x1f9e0
  Size        : 0x4b4
  MaxSize     : 0x4c0
  Offset      : 0x1f9e0
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_memset_overwrite4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x58, %rsp
    00000015: 	movl	%esi, 0x30(%rsp)
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	movl	iterations(%rip), %eax
    00000038: 	testl	%eax, %eax
    0000003a: 	jle	.Ltmp1307 # Offset: 58
    00000040: 	movslq	0x30(%rsp), %r15
    00000045: 	leaq	init_value(%rip), %rdi
    0000004c: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000054: 	movq	%r15, %rax
    00000057: 	leaq	(,%r15,8), %rsi
    0000005f: 	subl	$0x4, %eax
    00000062: 	movq	%rsi, 0x20(%rsp)
    00000067: 	cmpl	$0x3b, %eax
    0000006a: 	seta	%r9b
    0000006e: 	shrl	$0x2, %eax
    00000071: 	leal	0x1(%rax), %ecx
    00000074: 	movq	%rcx, %rbx
    00000077: 	movl	%ecx, 0x10(%rsp)
    0000007b: 	subq	$0x1, %rcx
    0000007f: 	shlq	$0x5, %rcx
    00000083: 	leaq	0x10(%rbp,%rcx), %rdx
    00000088: 	leaq	0x18(%rbp,%rcx), %rcx
    0000008d: 	cmpq	%rdi, %rdx
    00000090: 	setbe	%dl
    00000093: 	cmpq	%rdi, %rbp
    00000096: 	setae	%sil
    0000009a: 	shlq	$0x5, %rax
    0000009e: 	orl	%esi, %edx
    000000a0: 	andl	%r9d, %edx
    000000a3: 	movb	%dl, 0x37(%rsp)
    000000a7: 	movl	%ebx, %edx
    000000a9: 	andl	$-0x2, %ebx
    000000ac: 	shrl	%edx
    000000ae: 	movl	%ebx, 0x1c(%rsp)
    000000b2: 	leal	-0x1(%rdx), %esi
    000000b5: 	leal	(,%rbx,4), %edx
    000000bc: 	shlq	$0x6, %rsi
    000000c0: 	leaq	0x28(%rbp,%rax), %rbx
    000000c5: 	leal	0x1(%rdx), %r8d
    000000c9: 	cmpq	%rdi, %rcx
    000000cc: 	setbe	%cl
    000000cf: 	movq	%rbx, 0x48(%rsp)
    000000d4: 	addq	$0x8, %rdi
    000000d8: 	leaq	0x10(%rbp), %rbx
    000000dc: 	cmpq	%rdi, %rbx
    000000df: 	movslq	%r8d, %r8
    000000e2: 	leaq	0x50(%rbp,%rsi), %r12
    000000e7: 	movq	%rbx, 0x28(%rsp)
    000000ec: 	setae	%dil
    000000f0: 	addl	$0x2, %edx
    000000f3: 	leaq	(%rbp,%r8,8), %r15
    000000f8: 	xorl	%r14d, %r14d
    000000fb: 	orl	%edi, %ecx
    000000fd: 	movslq	%edx, %rdx
    00000100: 	leaq	0x38(%rbp,%rax), %rbx
    00000105: 	movq	%rbp, %rdi
    00000108: 	andl	%r9d, %ecx
    0000010b: 	leaq	(%rbp,%rdx,8), %r13
    00000110: 	leaq	0x48(%rbp,%rsi), %r10
    00000115: 	movb	%cl, 0x36(%rsp)
    00000119: 	leaq	0x30(%rbp,%rax), %rcx
    0000011e: 	movq	%r15, %rax
    00000121: 	movq	%r10, %rbp
    00000124: 	movq	%rcx, 0x40(%rsp)
    00000129: 	movq	%r12, %r15
    0000012c: 	movq	%r13, %r12
    0000012f: 	movq	%rax, %r13
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1316:
    00000138: 	movq	0x20(%rsp), %rdx
    0000013d: 	xorl	%esi, %esi
    0000013f: 	movsd	%xmm1, 0x8(%rsp)
    00000145: 	callq	memset@PLT # Offset: 325
    0000014a: 	cmpl	$0x3, 0x30(%rsp)
    0000014f: 	movsd	0x8(%rsp), %xmm1
    00000155: 	movq	%rax, %rdi
    00000158: 	jle	.Ltmp1308 # Offset: 344
    0000015e: 	cmpb	$0x0, 0x37(%rsp)
    00000163: 	je	.Ltmp1309 # Offset: 355
    00000169: 	movsd	init_value(%rip), %xmm0
    00000171: 	leaq	0x8(%rax), %rax
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp1310:
    00000178: 	movsd	%xmm0, (%rax)
    0000017c: 	addq	$0x40, %rax
    00000180: 	movsd	%xmm0, -0x20(%rax)
    00000185: 	cmpq	%rbp, %rax
    00000188: 	jne	.Ltmp1310 # Offset: 392
    0000018a: 	movl	0x1c(%rsp), %ecx
    0000018e: 	cmpl	%ecx, 0x10(%rsp)
    00000192: 	je	.Ltmp1311 # Offset: 402
    00000194: 	movsd	init_value(%rip), %xmm0
    0000019c: 	movsd	%xmm0, (%r13)
.Ltmp1311:
    000001a2: 	cmpb	$0x0, 0x36(%rsp)
    000001a7: 	je	.Ltmp1312 # Offset: 423
    000001ad: 	movsd	init_value(%rip), %xmm0
    000001b5: 	movq	0x28(%rsp), %rax
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1313:
    000001c0: 	movsd	%xmm0, (%rax)
    000001c4: 	addq	$0x40, %rax
    000001c8: 	movsd	%xmm0, -0x20(%rax)
    000001cd: 	cmpq	%r15, %rax
    000001d0: 	jne	.Ltmp1313 # Offset: 464
    000001d2: 	movl	0x1c(%rsp), %esi
    000001d6: 	cmpl	%esi, 0x10(%rsp)
    000001da: 	je	.Ltmp1314 # Offset: 474
    000001dc: 	movsd	init_value(%rip), %xmm0
    000001e4: 	movsd	%xmm0, (%r12)
.Ltmp1314:
    000001ea: 	leaq	0x18(%rdi), %rax
    000001ee: 	nop # Size: 2
.Ltmp1315:
    000001f0: 	movsd	%xmm1, (%rax)
    000001f4: 	addq	$0x20, %rax
    000001f8: 	cmpq	%rbx, %rax
    000001fb: 	jne	.Ltmp1315 # Offset: 507
.Ltmp1308:
    000001fd: 	addl	$0x1, %r14d
    00000201: 	cmpl	%r14d, iterations(%rip)
    00000208: 	jg	.Ltmp1316 # Offset: 520
    0000020e: 	movq	%rdi, %rbp
.Ltmp1307:
    00000211: 	movsd	%xmm1, 0x8(%rsp)
    00000217: 	callq	clock@PLT # Offset: 535
    0000021c: 	movq	0x38(%rsp), %rdi
    00000221: 	pxor	%xmm0, %xmm0
    00000225: 	movq	%rax, end_time(%rip)
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	cvtsi2sd	%rax, %xmm0
    00000238: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000240: 	callq	_Z13record_resultdPKc # Offset: 576
    00000245: 	movl	0x30(%rsp), %ecx
    00000249: 	movsd	0x8(%rsp), %xmm1
    0000024f: 	testl	%ecx, %ecx
    00000251: 	jle	.Ltmp1317 # Offset: 593
    00000257: 	cmpl	$0x1, %ecx
    0000025a: 	je	.Ltmp1318 # Offset: 602
    00000260: 	shrl	%ecx
    00000262: 	movq	%rbp, %rax
    00000265: 	pxor	%xmm0, %xmm0
    00000269: 	movl	%ecx, %edx
    0000026b: 	subl	$0x1, %edx
    0000026e: 	shlq	$0x4, %rdx
    00000272: 	leaq	0x10(%rbp,%rdx), %rdx
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1319:
    00000280: 	movsd	(%rax), %xmm2
    00000284: 	addq	$0x10, %rax
    00000288: 	addsd	%xmm2, %xmm0
    0000028c: 	movsd	-0x8(%rax), %xmm2
    00000291: 	addsd	%xmm2, %xmm0
    00000295: 	cmpq	%rdx, %rax
    00000298: 	jne	.Ltmp1319 # Offset: 664
    0000029a: 	movl	0x30(%rsp), %esi
    0000029e: 	movl	%esi, %eax
    000002a0: 	andl	$-0x2, %eax
    000002a3: 	andl	$0x1, %esi
    000002a6: 	je	.Ltmp1320 # Offset: 678
.Ltmp1327:
    000002a8: 	cltq
    000002aa: 	addsd	(%rbp,%rax,8), %xmm0
.Ltmp1320:
    000002b0: 	movsd	init_value(%rip), %xmm2
    000002b8: 	movq	DATAat0x36f60(%rip), %xmm3
    000002c0: 	movapd	%xmm0, %xmm4
    000002c4: 	addsd	%xmm2, %xmm2
    000002c8: 	andpd	%xmm3, %xmm4
    000002cc: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000002d4: 	addsd	%xmm1, %xmm2
    000002d8: 	mulsd	DATAat0x36ef8(%rip), %xmm2
    000002e0: 	movapd	%xmm0, %xmm1
    000002e4: 	subsd	%xmm2, %xmm1
    000002e8: 	jbe	.Ltmp1321 # Offset: 744
    000002ea: 	divsd	%xmm0, %xmm1
.Ltmp1321:
    000002ee: 	andpd	%xmm3, %xmm1
    000002f2: 	movsd	DATAat0x36ee0(%rip), %xmm3
    000002fa: 	comisd	%xmm1, %xmm3
    000002fe: 	jbe	.Ltmp1322 # Offset: 766
    00000300: 	addq	$0x58, %rsp
    00000304: 	popq	%rbx
    00000305: 	popq	%rbp
    00000306: 	popq	%r12
    00000308: 	popq	%r13
    0000030a: 	popq	%r14
    0000030c: 	popq	%r15
    0000030e: 	retq # Offset: 782
    0000030f: 	nop # Size: 1
.Ltmp1312:
    00000310: 	movq	0x28(%rsp), %rax
    00000315: 	movq	0x40(%rsp), %rdx
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1323:
    00000320: 	movsd	init_value(%rip), %xmm0
    00000328: 	addq	$0x20, %rax
    0000032c: 	movsd	%xmm0, -0x20(%rax)
    00000331: 	cmpq	%rax, %rdx
    00000334: 	jne	.Ltmp1323 # Offset: 820
    00000336: 	jmp	.Ltmp1314 # Offset: 822
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1309:
    00000340: 	movq	0x48(%rsp), %rdx
    00000345: 	leaq	0x8(%rax), %rax
    00000349: 	nopl	(%rax) # Size: 7
.Ltmp1324:
    00000350: 	movsd	init_value(%rip), %xmm0
    00000358: 	addq	$0x20, %rax
    0000035c: 	movsd	%xmm0, -0x20(%rax)
    00000361: 	cmpq	%rdx, %rax
    00000364: 	jne	.Ltmp1324 # Offset: 868
    00000366: 	jmp	.Ltmp1311 # Offset: 870
.Ltmp1322:
    0000036b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000372: 	movl	$0x5, %edx
    00000377: 	leaq	DATAat0x35004(%rip), %rsi
    0000037e: 	movsd	%xmm2, 0x10(%rsp)
    00000384: 	movq	%rbp, %rdi
    00000387: 	movsd	%xmm0, 0x8(%rsp)
    0000038d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 909
    00000392: 	cmpq	$0x0, 0x38(%rsp)
    00000398: 	movsd	0x8(%rsp), %xmm0
    0000039e: 	movsd	0x10(%rsp), %xmm2
    000003a4: 	je	.Ltmp1325 # Offset: 932
    000003aa: 	movq	0x38(%rsp), %rbx
    000003af: 	movsd	%xmm2, 0x10(%rsp)
    000003b5: 	movsd	%xmm0, 0x8(%rsp)
    000003bb: 	movq	%rbx, %rdi
    000003be: 	callq	strlen@PLT # Offset: 958
    000003c3: 	movq	%rbx, %rsi
    000003c6: 	movq	%rbp, %rdi
    000003c9: 	movq	%rax, %rdx
    000003cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 972
    000003d1: 	movsd	0x10(%rsp), %xmm2
    000003d7: 	movsd	0x8(%rsp), %xmm0
.Ltmp1326:
    000003dd: 	movl	$0xd, %edx
    000003e2: 	leaq	DATAat0x3500a(%rip), %rsi
    000003e9: 	movq	%rbp, %rdi
    000003ec: 	movsd	%xmm2, 0x10(%rsp)
    000003f2: 	movsd	%xmm0, 0x8(%rsp)
    000003f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1016
    000003fd: 	movsd	0x8(%rsp), %xmm0
    00000403: 	movq	%rbp, %rdi
    00000406: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1030
    0000040b: 	movl	$0xb, %edx
    00000410: 	leaq	DATAat0x35018(%rip), %rsi
    00000417: 	movq	%rax, %rdi
    0000041a: 	movq	%rax, %rbp
    0000041d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1053
    00000422: 	movsd	0x10(%rsp), %xmm2
    00000428: 	movq	%rbp, %rdi
    0000042b: 	movapd	%xmm2, %xmm0
    0000042f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1071
    00000434: 	addq	$0x58, %rsp
    00000438: 	popq	%rbx
    00000439: 	movq	%rax, %rdi
    0000043c: 	popq	%rbp
    0000043d: 	popq	%r12
    0000043f: 	popq	%r13
    00000441: 	popq	%r14
    00000443: 	popq	%r15
    00000445: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1093
.Ltmp1317:
    0000044a: 	movsd	init_value(%rip), %xmm0
    00000452: 	movsd	DATAat0x36ef8(%rip), %xmm2
    0000045a: 	movq	DATAat0x36f60(%rip), %xmm3
    00000462: 	addsd	%xmm0, %xmm0
    00000466: 	addsd	%xmm1, %xmm0
    0000046a: 	mulsd	%xmm0, %xmm2
    0000046e: 	pxor	%xmm0, %xmm0
    00000472: 	movapd	%xmm0, %xmm1
    00000476: 	subsd	%xmm2, %xmm1
    0000047a: 	jmp	.Ltmp1321 # Offset: 1146
.Ltmp1325:
    0000047f: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000486: 	movq	-0x18(%rax), %rdi
    0000048a: 	addq	%rbp, %rdi
    0000048d: 	movl	0x20(%rdi), %esi
    00000490: 	orl	$0x1, %esi
    00000493: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1171
    00000498: 	movsd	0x8(%rsp), %xmm0
    0000049e: 	movsd	0x10(%rsp), %xmm2
    000004a4: 	jmp	.Ltmp1326 # Offset: 1188
.Ltmp1318:
    000004a9: 	pxor	%xmm0, %xmm0
    000004ad: 	xorl	%eax, %eax
    000004af: 	jmp	.Ltmp1327 # Offset: 1199
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_memset_overwrite4IdEvPT_iPKc"

Binary Function "_Z24test_for_loop_overwrite4IdEvPT_iPKc" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x1fea0
  Size        : 0x4cd
  MaxSize     : 0x4d0
  Offset      : 0x1fea0
  Section     : .text
  Orc Section : .local.text._Z24test_for_loop_overwrite4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdx, 0x38(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	movl	iterations(%rip), %eax
    00000037: 	movl	%eax, 0x1c(%rsp)
    0000003b: 	testl	%eax, %eax
    0000003d: 	jle	.Ltmp1328 # Offset: 61
    00000043: 	leal	-0x3(%r12), %eax
    00000048: 	leaq	init_value(%rip), %rdi
    0000004f: 	movl	%r12d, 0x18(%rsp)
    00000054: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000005c: 	movl	%eax, 0x30(%rsp)
    00000060: 	leal	-0x1(%r12), %eax
    00000065: 	leaq	0x8(,%rax,8), %rax
    0000006d: 	movq	%rax, 0x28(%rsp)
    00000072: 	leal	-0x4(%r12), %eax
    00000077: 	cmpl	$0x3b, %eax
    0000007a: 	seta	%r9b
    0000007e: 	shrl	$0x2, %eax
    00000081: 	leal	0x1(%rax), %ecx
    00000084: 	movq	%rcx, %rbx
    00000087: 	movl	%ecx, 0x8(%rsp)
    0000008b: 	subq	$0x1, %rcx
    0000008f: 	shlq	$0x5, %rcx
    00000093: 	leaq	0x10(%rbp,%rcx), %rdx
    00000098: 	leaq	0x18(%rbp,%rcx), %rcx
    0000009d: 	cmpq	%rdi, %rdx
    000000a0: 	setbe	%dl
    000000a3: 	cmpq	%rdi, %rbp
    000000a6: 	setae	%sil
    000000aa: 	shlq	$0x5, %rax
    000000ae: 	orl	%esi, %edx
    000000b0: 	andl	%r9d, %edx
    000000b3: 	movb	%dl, 0x37(%rsp)
    000000b7: 	movl	%ebx, %edx
    000000b9: 	andl	$-0x2, %ebx
    000000bc: 	shrl	%edx
    000000be: 	movl	%ebx, 0x14(%rsp)
    000000c2: 	leal	-0x1(%rdx), %esi
    000000c5: 	leal	(,%rbx,4), %edx
    000000cc: 	shlq	$0x6, %rsi
    000000d0: 	leaq	0x28(%rbp,%rax), %rbx
    000000d5: 	leal	0x1(%rdx), %r8d
    000000d9: 	cmpq	%rdi, %rcx
    000000dc: 	setbe	%cl
    000000df: 	movq	%rbx, 0x48(%rsp)
    000000e4: 	addq	$0x8, %rdi
    000000e8: 	leaq	0x10(%rbp), %rbx
    000000ec: 	cmpq	%rdi, %rbx
    000000ef: 	leaq	0x50(%rbp,%rsi), %r15
    000000f4: 	movslq	%r8d, %r8
    000000f7: 	movq	%rbx, 0x20(%rsp)
    000000fc: 	setae	%dil
    00000100: 	addl	$0x2, %edx
    00000103: 	leaq	(%rbp,%r8,8), %r8
    00000108: 	xorl	%r14d, %r14d
    0000010b: 	orl	%edi, %ecx
    0000010d: 	movslq	%edx, %rdx
    00000110: 	leaq	0x38(%rbp,%rax), %rbx
    00000115: 	movq	%rbp, %rdi
    00000118: 	andl	%r9d, %ecx
    0000011b: 	leaq	(%rbp,%rdx,8), %r13
    00000120: 	leaq	0x48(%rbp,%rsi), %r10
    00000125: 	movb	%cl, 0x36(%rsp)
    00000129: 	leaq	0x30(%rbp,%rax), %rcx
    0000012e: 	movq	%r15, %rax
    00000131: 	movq	%r13, %r12
    00000134: 	movq	%rcx, 0x40(%rsp)
    00000139: 	movl	%r14d, %r15d
    0000013c: 	movq	%r10, %rbp
    0000013f: 	movq	%r8, %r13
    00000142: 	movq	%rax, %r14
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp1338:
    00000148: 	movl	0x18(%rsp), %eax
    0000014c: 	testl	%eax, %eax
    0000014e: 	jle	.Ltmp1329 # Offset: 334
    00000150: 	movq	0x28(%rsp), %rdx
    00000155: 	xorl	%esi, %esi
    00000157: 	movsd	%xmm1, (%rsp)
    0000015c: 	callq	memset@PLT # Offset: 348
    00000161: 	movsd	(%rsp), %xmm1
    00000166: 	movq	%rax, %rdi
.Ltmp1329:
    00000169: 	movl	0x30(%rsp), %edx
    0000016d: 	testl	%edx, %edx
    0000016f: 	jle	.Ltmp1330 # Offset: 367
    00000175: 	cmpb	$0x0, 0x37(%rsp)
    0000017a: 	je	.Ltmp1331 # Offset: 378
    00000180: 	movsd	init_value(%rip), %xmm0
    00000188: 	leaq	0x8(%rdi), %rax
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1332:
    00000190: 	movsd	%xmm0, (%rax)
    00000194: 	addq	$0x40, %rax
    00000198: 	movsd	%xmm0, -0x20(%rax)
    0000019d: 	cmpq	%rbp, %rax
    000001a0: 	jne	.Ltmp1332 # Offset: 416
    000001a2: 	movl	0x14(%rsp), %ecx
    000001a6: 	cmpl	%ecx, 0x8(%rsp)
    000001aa: 	je	.Ltmp1333 # Offset: 426
    000001ac: 	movsd	init_value(%rip), %xmm0
    000001b4: 	movsd	%xmm0, (%r13)
.Ltmp1333:
    000001ba: 	cmpb	$0x0, 0x36(%rsp)
    000001bf: 	je	.Ltmp1334 # Offset: 447
    000001c5: 	movsd	init_value(%rip), %xmm0
    000001cd: 	movq	0x20(%rsp), %rax
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1335:
    000001d8: 	movsd	%xmm0, (%rax)
    000001dc: 	addq	$0x40, %rax
    000001e0: 	movsd	%xmm0, -0x20(%rax)
    000001e5: 	cmpq	%r14, %rax
    000001e8: 	jne	.Ltmp1335 # Offset: 488
    000001ea: 	movl	0x14(%rsp), %esi
    000001ee: 	cmpl	%esi, 0x8(%rsp)
    000001f2: 	je	.Ltmp1336 # Offset: 498
    000001f4: 	movsd	init_value(%rip), %xmm0
    000001fc: 	movsd	%xmm0, (%r12)
.Ltmp1336:
    00000202: 	leaq	0x18(%rdi), %rax
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1337:
    00000210: 	movsd	%xmm1, (%rax)
    00000214: 	addq	$0x20, %rax
    00000218: 	cmpq	%rax, %rbx
    0000021b: 	jne	.Ltmp1337 # Offset: 539
.Ltmp1330:
    0000021d: 	addl	$0x1, %r15d
    00000221: 	cmpl	%r15d, 0x1c(%rsp)
    00000226: 	jne	.Ltmp1338 # Offset: 550
    0000022c: 	movl	0x18(%rsp), %r12d
    00000231: 	movq	%rdi, %rbp
.Ltmp1328:
    00000234: 	movsd	%xmm1, (%rsp)
    00000239: 	callq	clock@PLT # Offset: 569
    0000023e: 	movq	0x38(%rsp), %rdi
    00000243: 	pxor	%xmm0, %xmm0
    00000247: 	movq	%rax, end_time(%rip)
    0000024e: 	subq	start_time(%rip), %rax
    00000255: 	cvtsi2sd	%rax, %xmm0
    0000025a: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000262: 	callq	_Z13record_resultdPKc # Offset: 610
    00000267: 	testl	%r12d, %r12d
    0000026a: 	movsd	(%rsp), %xmm1
    0000026f: 	jle	.Ltmp1339 # Offset: 623
    00000275: 	cmpl	$0x1, %r12d
    00000279: 	je	.Ltmp1340 # Offset: 633
    0000027f: 	movl	%r12d, %edx
    00000282: 	movq	%rbp, %rax
    00000285: 	pxor	%xmm0, %xmm0
    00000289: 	shrl	%edx
    0000028b: 	subl	$0x1, %edx
    0000028e: 	shlq	$0x4, %rdx
    00000292: 	leaq	0x10(%rbp,%rdx), %rdx
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1341:
    000002a0: 	movsd	(%rax), %xmm2
    000002a4: 	addq	$0x10, %rax
    000002a8: 	addsd	%xmm2, %xmm0
    000002ac: 	movsd	-0x8(%rax), %xmm2
    000002b1: 	addsd	%xmm2, %xmm0
    000002b5: 	cmpq	%rdx, %rax
    000002b8: 	jne	.Ltmp1341 # Offset: 696
    000002ba: 	movl	%r12d, %eax
    000002bd: 	andl	$-0x2, %eax
    000002c0: 	andl	$0x1, %r12d
    000002c4: 	je	.Ltmp1342 # Offset: 708
.Ltmp1349:
    000002c6: 	cltq
    000002c8: 	addsd	(%rbp,%rax,8), %xmm0
.Ltmp1342:
    000002ce: 	movsd	init_value(%rip), %xmm2
    000002d6: 	movq	DATAat0x36f60(%rip), %xmm3
    000002de: 	movapd	%xmm0, %xmm4
    000002e2: 	addsd	%xmm2, %xmm2
    000002e6: 	andpd	%xmm3, %xmm4
    000002ea: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000002f2: 	addsd	%xmm1, %xmm2
    000002f6: 	mulsd	DATAat0x36ef8(%rip), %xmm2
    000002fe: 	movapd	%xmm0, %xmm1
    00000302: 	subsd	%xmm2, %xmm1
    00000306: 	jbe	.Ltmp1343 # Offset: 774
    00000308: 	divsd	%xmm0, %xmm1
.Ltmp1343:
    0000030c: 	andpd	%xmm3, %xmm1
    00000310: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000318: 	comisd	%xmm1, %xmm3
    0000031c: 	jbe	.Ltmp1344 # Offset: 796
    0000031e: 	addq	$0x58, %rsp
    00000322: 	popq	%rbx
    00000323: 	popq	%rbp
    00000324: 	popq	%r12
    00000326: 	popq	%r13
    00000328: 	popq	%r14
    0000032a: 	popq	%r15
    0000032c: 	retq # Offset: 812
    0000032d: 	nopl	(%rax) # Size: 3
.Ltmp1334:
    00000330: 	movq	0x20(%rsp), %rax
    00000335: 	movq	0x40(%rsp), %rdx
    0000033a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1345:
    00000340: 	movsd	init_value(%rip), %xmm0
    00000348: 	addq	$0x20, %rax
    0000034c: 	movsd	%xmm0, -0x20(%rax)
    00000351: 	cmpq	%rax, %rdx
    00000354: 	jne	.Ltmp1345 # Offset: 852
    00000356: 	jmp	.Ltmp1336 # Offset: 854
    0000035b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1331:
    00000360: 	movq	0x48(%rsp), %rdx
    00000365: 	leaq	0x8(%rdi), %rax
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp1346:
    00000370: 	movsd	init_value(%rip), %xmm0
    00000378: 	addq	$0x20, %rax
    0000037c: 	movsd	%xmm0, -0x20(%rax)
    00000381: 	cmpq	%rdx, %rax
    00000384: 	jne	.Ltmp1346 # Offset: 900
    00000386: 	jmp	.Ltmp1333 # Offset: 902
.Ltmp1344:
    0000038b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000392: 	movl	$0x5, %edx
    00000397: 	movsd	%xmm0, (%rsp)
    0000039c: 	leaq	DATAat0x35004(%rip), %rsi
    000003a3: 	movq	%rbp, %rdi
    000003a6: 	movsd	%xmm2, 0x8(%rsp)
    000003ac: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 940
    000003b1: 	cmpq	$0x0, 0x38(%rsp)
    000003b7: 	movsd	(%rsp), %xmm0
    000003bc: 	movsd	0x8(%rsp), %xmm2
    000003c2: 	je	.Ltmp1347 # Offset: 962
    000003c8: 	movq	0x38(%rsp), %rbx
    000003cd: 	movsd	%xmm2, 0x8(%rsp)
    000003d3: 	movsd	%xmm0, (%rsp)
    000003d8: 	movq	%rbx, %rdi
    000003db: 	callq	strlen@PLT # Offset: 987
    000003e0: 	movq	%rbx, %rsi
    000003e3: 	movq	%rbp, %rdi
    000003e6: 	movq	%rax, %rdx
    000003e9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1001
    000003ee: 	movsd	0x8(%rsp), %xmm2
    000003f4: 	movsd	(%rsp), %xmm0
.Ltmp1348:
    000003f9: 	movl	$0xd, %edx
    000003fe: 	leaq	DATAat0x3500a(%rip), %rsi
    00000405: 	movq	%rbp, %rdi
    00000408: 	movsd	%xmm2, 0x8(%rsp)
    0000040e: 	movsd	%xmm0, (%rsp)
    00000413: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1043
    00000418: 	movsd	(%rsp), %xmm0
    0000041d: 	movq	%rbp, %rdi
    00000420: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1056
    00000425: 	movl	$0xb, %edx
    0000042a: 	leaq	DATAat0x35018(%rip), %rsi
    00000431: 	movq	%rax, %rdi
    00000434: 	movq	%rax, %rbp
    00000437: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1079
    0000043c: 	movsd	0x8(%rsp), %xmm2
    00000442: 	movq	%rbp, %rdi
    00000445: 	movapd	%xmm2, %xmm0
    00000449: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1097
    0000044e: 	addq	$0x58, %rsp
    00000452: 	popq	%rbx
    00000453: 	movq	%rax, %rdi
    00000456: 	popq	%rbp
    00000457: 	popq	%r12
    00000459: 	popq	%r13
    0000045b: 	popq	%r14
    0000045d: 	popq	%r15
    0000045f: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1119
.Ltmp1339:
    00000464: 	movsd	init_value(%rip), %xmm0
    0000046c: 	movsd	DATAat0x36ef8(%rip), %xmm2
    00000474: 	movq	DATAat0x36f60(%rip), %xmm3
    0000047c: 	addsd	%xmm0, %xmm0
    00000480: 	addsd	%xmm1, %xmm0
    00000484: 	mulsd	%xmm0, %xmm2
    00000488: 	pxor	%xmm0, %xmm0
    0000048c: 	movapd	%xmm0, %xmm1
    00000490: 	subsd	%xmm2, %xmm1
    00000494: 	jmp	.Ltmp1343 # Offset: 1172
.Ltmp1347:
    00000499: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004a0: 	movq	-0x18(%rax), %rdi
    000004a4: 	addq	%rbp, %rdi
    000004a7: 	movl	0x20(%rdi), %esi
    000004aa: 	orl	$0x1, %esi
    000004ad: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1197
    000004b2: 	movsd	(%rsp), %xmm0
    000004b7: 	movsd	0x8(%rsp), %xmm2
    000004bd: 	jmp	.Ltmp1348 # Offset: 1213
.Ltmp1340:
    000004c2: 	pxor	%xmm0, %xmm0
    000004c6: 	xorl	%eax, %eax
    000004c8: 	jmp	.Ltmp1349 # Offset: 1224
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_for_loop_overwrite4IdEvPT_iPKc"

Binary Function "_Z21test_loop_replace_optIhEvPT_iPKc" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x20370
  Size        : 0x55b
  MaxSize     : 0x560
  Offset      : 0x20370
  Section     : .text
  Orc Section : .local.text._Z21test_loop_replace_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0xa8, %rsp
    0000001a: 	movq	%rdx, 0x60(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp1350 # Offset: 51
    00000039: 	testl	%ebx, %ebx
    0000003b: 	jle	.Ltmp1351 # Offset: 59
    00000041: 	movslq	%ebx, %rax
    00000044: 	leaq	init_value(%rip), %rdx
    0000004b: 	leal	-0x1(%rbx), %edi
    0000004e: 	addq	%rbp, %rax
    00000051: 	movl	%edi, 0x80(%rsp)
    00000058: 	cmpq	%rdx, %rax
    0000005b: 	setbe	%al
    0000005e: 	addq	$0x8, %rdx
    00000062: 	cmpq	%rdx, %rbp
    00000065: 	setae	%dl
    00000068: 	orb	%dl, %al
    0000006a: 	je	.Ltmp1352 # Offset: 106
    00000070: 	cmpl	$0xe, %edi
    00000073: 	jbe	.Ltmp1352 # Offset: 115
    00000079: 	movl	%ebx, %eax
    0000007b: 	movl	%ebx, %esi
    0000007d: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000085: 	xorl	%ecx, %ecx
    00000087: 	shrl	$0x4, %eax
    0000008a: 	andl	$-0x10, %esi
    0000008d: 	subl	$0x1, %eax
    00000090: 	leal	0x1(%rsi), %r8d
    00000094: 	leal	0x2(%rsi), %r10d
    00000098: 	movl	%esi, %edi
    0000009a: 	shlq	$0x4, %rax
    0000009e: 	leal	0x3(%rsi), %r12d
    000000a2: 	movq	%r8, %r9
    000000a5: 	movq	%r10, %r11
    000000a8: 	leaq	0x10(%rbp,%rax), %rdx
    000000ad: 	leal	0x4(%rsi), %eax
    000000b0: 	movq	%r12, %r13
    000000b3: 	addq	%rbp, %rdi
    000000b6: 	movq	%rax, %r14
    000000b9: 	addq	%rbp, %rax
    000000bc: 	movq	%rdx, 0x8(%rsp)
    000000c1: 	addq	%rbp, %r8
    000000c4: 	movq	%rax, 0x10(%rsp)
    000000c9: 	leal	0x5(%rsi), %eax
    000000cc: 	addq	%rbp, %r10
    000000cf: 	addq	%rbp, %r12
    000000d2: 	movq	%rax, %r15
    000000d5: 	addq	%rbp, %rax
    000000d8: 	movq	%rax, 0x18(%rsp)
    000000dd: 	leal	0x6(%rsi), %eax
    000000e0: 	movl	%eax, 0x20(%rsp)
    000000e4: 	addq	%rbp, %rax
    000000e7: 	movq	%rax, 0x28(%rsp)
    000000ec: 	leal	0x7(%rsi), %eax
    000000ef: 	movl	%eax, 0x24(%rsp)
    000000f3: 	addq	%rbp, %rax
    000000f6: 	movq	%rax, 0x30(%rsp)
    000000fb: 	leal	0x8(%rsi), %eax
    000000fe: 	movl	%eax, 0x38(%rsp)
    00000102: 	addq	%rbp, %rax
    00000105: 	movq	%rax, 0x40(%rsp)
    0000010a: 	leal	0x9(%rsi), %eax
    0000010d: 	movl	%eax, 0x3c(%rsp)
    00000111: 	addq	%rbp, %rax
    00000114: 	movq	%rax, 0x48(%rsp)
    00000119: 	leal	0xa(%rsi), %eax
    0000011c: 	movl	%eax, 0x50(%rsp)
    00000120: 	addq	%rbp, %rax
    00000123: 	movq	%rax, 0x58(%rsp)
    00000128: 	leal	0xb(%rsi), %eax
    0000012b: 	movl	%eax, 0x54(%rsp)
    0000012f: 	addq	%rbp, %rax
    00000132: 	movq	%rax, 0x68(%rsp)
    00000137: 	leal	0xc(%rsi), %eax
    0000013a: 	movl	%eax, 0x70(%rsp)
    0000013e: 	addq	%rbp, %rax
    00000141: 	movq	%rax, 0x78(%rsp)
    00000146: 	leal	0xd(%rsi), %eax
    00000149: 	movl	%eax, 0x74(%rsp)
    0000014d: 	addq	%rbp, %rax
    00000150: 	movq	%rax, 0x88(%rsp)
    00000158: 	leal	0xe(%rsi), %eax
    0000015b: 	movl	%eax, 0x84(%rsp)
    00000162: 	addq	%rbp, %rax
    00000165: 	movq	%rax, 0x90(%rsp)
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp1355:
    00000170: 	movsd	init_value(%rip), %xmm1
    00000178: 	movq	0x8(%rsp), %rdx
    0000017d: 	movq	%rbp, %rax
    00000180: 	unpcklpd	%xmm1, %xmm1
    00000184: 	cvttpd2dq	%xmm1, %xmm1
    00000188: 	punpcklqdq	%xmm1, %xmm1
    0000018c: 	movdqa	%xmm1, %xmm2
    00000190: 	punpckhwd	%xmm1, %xmm2
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1353:
    00000198: 	movdqa	%xmm1, %xmm0
    0000019c: 	addq	$0x10, %rax
    000001a0: 	punpcklwd	%xmm1, %xmm0
    000001a4: 	movdqa	%xmm0, %xmm3
    000001a8: 	punpcklwd	%xmm2, %xmm0
    000001ac: 	punpckhwd	%xmm2, %xmm3
    000001b0: 	punpcklwd	%xmm3, %xmm0
    000001b4: 	pand	%xmm4, %xmm0
    000001b8: 	packuswb	%xmm0, %xmm0
    000001bc: 	movups	%xmm0, -0x10(%rax)
    000001c0: 	cmpq	%rdx, %rax
    000001c3: 	jne	.Ltmp1353 # Offset: 451
    000001c5: 	movq	%rdx, 0x8(%rsp)
    000001ca: 	cmpl	%esi, %ebx
    000001cc: 	je	.Ltmp1354 # Offset: 460
    000001d2: 	cvttsd2si	init_value(%rip), %eax
    000001da: 	movb	%al, (%rdi)
    000001dc: 	cmpl	%r9d, %ebx
    000001df: 	jle	.Ltmp1354 # Offset: 479
    000001e5: 	cvttsd2si	init_value(%rip), %eax
    000001ed: 	movb	%al, (%r8)
    000001f0: 	cmpl	%r11d, %ebx
    000001f3: 	jle	.Ltmp1354 # Offset: 499
    000001f9: 	cvttsd2si	init_value(%rip), %eax
    00000201: 	movb	%al, (%r10)
    00000204: 	cmpl	%r13d, %ebx
    00000207: 	jle	.Ltmp1354 # Offset: 519
    0000020d: 	cvttsd2si	init_value(%rip), %eax
    00000215: 	movb	%al, (%r12)
    00000219: 	cmpl	%r14d, %ebx
    0000021c: 	jle	.Ltmp1354 # Offset: 540
    00000222: 	cvttsd2si	init_value(%rip), %eax
    0000022a: 	movq	0x10(%rsp), %rdx
    0000022f: 	movb	%al, (%rdx)
    00000231: 	cmpl	%r15d, %ebx
    00000234: 	jle	.Ltmp1354 # Offset: 564
    0000023a: 	cvttsd2si	init_value(%rip), %eax
    00000242: 	movq	0x18(%rsp), %rdx
    00000247: 	movb	%al, (%rdx)
    00000249: 	cmpl	0x20(%rsp), %ebx
    0000024d: 	jle	.Ltmp1354 # Offset: 589
    00000253: 	cvttsd2si	init_value(%rip), %eax
    0000025b: 	movq	0x28(%rsp), %rdx
    00000260: 	movb	%al, (%rdx)
    00000262: 	cmpl	0x24(%rsp), %ebx
    00000266: 	jle	.Ltmp1354 # Offset: 614
    0000026c: 	cvttsd2si	init_value(%rip), %eax
    00000274: 	movq	0x30(%rsp), %rdx
    00000279: 	movb	%al, (%rdx)
    0000027b: 	cmpl	0x38(%rsp), %ebx
    0000027f: 	jle	.Ltmp1354 # Offset: 639
    00000285: 	cvttsd2si	init_value(%rip), %eax
    0000028d: 	movq	0x40(%rsp), %rdx
    00000292: 	movb	%al, (%rdx)
    00000294: 	cmpl	0x3c(%rsp), %ebx
    00000298: 	jle	.Ltmp1354 # Offset: 664
    0000029e: 	cvttsd2si	init_value(%rip), %eax
    000002a6: 	movq	0x48(%rsp), %rdx
    000002ab: 	movb	%al, (%rdx)
    000002ad: 	cmpl	0x50(%rsp), %ebx
    000002b1: 	jle	.Ltmp1354 # Offset: 689
    000002b3: 	cvttsd2si	init_value(%rip), %eax
    000002bb: 	movq	0x58(%rsp), %rdx
    000002c0: 	movb	%al, (%rdx)
    000002c2: 	cmpl	0x54(%rsp), %ebx
    000002c6: 	jle	.Ltmp1354 # Offset: 710
    000002c8: 	cvttsd2si	init_value(%rip), %eax
    000002d0: 	movq	0x68(%rsp), %rdx
    000002d5: 	movb	%al, (%rdx)
    000002d7: 	cmpl	0x70(%rsp), %ebx
    000002db: 	jle	.Ltmp1354 # Offset: 731
    000002dd: 	cvttsd2si	init_value(%rip), %eax
    000002e5: 	movq	0x78(%rsp), %rdx
    000002ea: 	movb	%al, (%rdx)
    000002ec: 	cmpl	0x74(%rsp), %ebx
    000002f0: 	jle	.Ltmp1354 # Offset: 752
    000002f2: 	cvttsd2si	init_value(%rip), %eax
    000002fa: 	movq	0x88(%rsp), %rdx
    00000302: 	movb	%al, (%rdx)
    00000304: 	cmpl	0x84(%rsp), %ebx
    0000030b: 	jle	.Ltmp1354 # Offset: 779
    0000030d: 	cvttsd2si	init_value(%rip), %eax
    00000315: 	movq	0x90(%rsp), %rdx
    0000031d: 	movb	%al, (%rdx)
    0000031f: 	nop # Size: 1
.Ltmp1354:
    00000320: 	addl	$0x1, %ecx
    00000323: 	cmpl	iterations(%rip), %ecx
    00000329: 	jl	.Ltmp1355 # Offset: 809
.Ltmp1363:
    0000032f: 	callq	clock@PLT # Offset: 815
    00000334: 	movq	0x60(%rsp), %rdi
    00000339: 	pxor	%xmm0, %xmm0
    0000033d: 	movq	%rax, end_time(%rip)
    00000344: 	subq	start_time(%rip), %rax
    0000034b: 	cvtsi2sd	%rax, %xmm0
    00000350: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000358: 	callq	_Z13record_resultdPKc # Offset: 856
.Ltmp1365:
    0000035d: 	cmpl	$0xe, 0x80(%rsp)
    00000365: 	jbe	.Ltmp1356 # Offset: 869
    0000036b: 	movl	%ebx, %edx
    0000036d: 	movq	%rbp, %rax
    00000370: 	pxor	%xmm0, %xmm0
    00000374: 	shrl	$0x4, %edx
    00000377: 	subl	$0x1, %edx
    0000037a: 	shlq	$0x4, %rdx
    0000037e: 	leaq	0x10(%rbp,%rdx), %rdx
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1357:
    00000388: 	movdqu	(%rax), %xmm5
    0000038c: 	addq	$0x10, %rax
    00000390: 	paddb	%xmm5, %xmm0
    00000394: 	cmpq	%rax, %rdx
    00000397: 	jne	.Ltmp1357 # Offset: 919
    00000399: 	movdqa	%xmm0, %xmm1
    0000039d: 	movl	%ebx, %ecx
    0000039f: 	psrldq	$0x8, %xmm1
    000003a4: 	andl	$-0x10, %ecx
    000003a7: 	paddb	%xmm1, %xmm0
    000003ab: 	pxor	%xmm1, %xmm1
    000003af: 	movl	%ecx, %edx
    000003b1: 	psadbw	%xmm1, %xmm0
    000003b5: 	movd	%xmm0, %eax
    000003b9: 	cmpl	%ebx, %ecx
    000003bb: 	je	.Ltmp1358 # Offset: 955
.Ltmp1366:
    000003c1: 	movl	%ebx, %esi
    000003c3: 	subl	%ecx, %esi
    000003c5: 	leal	-0x1(%rsi), %edi
    000003c8: 	cmpl	$0x6, %edi
    000003cb: 	jbe	.Ltmp1359 # Offset: 971
    000003cd: 	movq	(%rbp,%rcx), %xmm1
    000003d3: 	pxor	%xmm0, %xmm0
    000003d7: 	movdqa	%xmm1, %xmm6
    000003db: 	psadbw	%xmm0, %xmm6
    000003df: 	movq	%xmm6, 0x98(%rsp)
    000003e8: 	movq	%xmm6, %rcx
    000003ed: 	movl	%ecx, %edi
    000003ef: 	movl	%esi, %ecx
    000003f1: 	andl	$-0x8, %ecx
    000003f4: 	addl	%edi, %eax
    000003f6: 	addl	%ecx, %edx
    000003f8: 	cmpl	%ecx, %esi
    000003fa: 	je	.Ltmp1358 # Offset: 1018
.Ltmp1359:
    000003fc: 	movslq	%edx, %rcx
    000003ff: 	addb	(%rbp,%rcx), %al
    00000403: 	leal	0x1(%rdx), %ecx
    00000406: 	cmpl	%ecx, %ebx
    00000408: 	jle	.Ltmp1358 # Offset: 1032
    0000040a: 	movslq	%ecx, %rcx
    0000040d: 	addb	(%rbp,%rcx), %al
    00000411: 	leal	0x2(%rdx), %ecx
    00000414: 	cmpl	%ecx, %ebx
    00000416: 	jle	.Ltmp1358 # Offset: 1046
    00000418: 	movslq	%ecx, %rcx
    0000041b: 	addb	(%rbp,%rcx), %al
    0000041f: 	leal	0x3(%rdx), %ecx
    00000422: 	cmpl	%ecx, %ebx
    00000424: 	jle	.Ltmp1358 # Offset: 1060
    00000426: 	movslq	%ecx, %rcx
    00000429: 	addb	(%rbp,%rcx), %al
    0000042d: 	leal	0x4(%rdx), %ecx
    00000430: 	cmpl	%ecx, %ebx
    00000432: 	jle	.Ltmp1358 # Offset: 1074
    00000434: 	movslq	%ecx, %rcx
    00000437: 	addb	(%rbp,%rcx), %al
    0000043b: 	leal	0x5(%rdx), %ecx
    0000043e: 	cmpl	%ecx, %ebx
    00000440: 	jle	.Ltmp1358 # Offset: 1088
    00000442: 	movslq	%ecx, %rcx
    00000445: 	addl	$0x6, %edx
    00000448: 	addb	(%rbp,%rcx), %al
    0000044c: 	cmpl	%edx, %ebx
    0000044e: 	jle	.Ltmp1358 # Offset: 1102
    00000450: 	movslq	%edx, %rdx
    00000453: 	addb	(%rbp,%rdx), %al
.Ltmp1358:
    00000457: 	testb	%al, %al
    00000459: 	jne	.Ltmp1360 # Offset: 1113
.Ltmp1364:
    0000045b: 	addq	$0xa8, %rsp
    00000462: 	popq	%rbx
    00000463: 	popq	%rbp
    00000464: 	popq	%r12
    00000466: 	popq	%r13
    00000468: 	popq	%r14
    0000046a: 	popq	%r15
    0000046c: 	retq # Offset: 1132
.Ltmp1360:
    0000046d: 	movq	0x60(%rsp), %rsi
    00000472: 	addq	$0xa8, %rsp
    00000479: 	movzbl	%al, %edi
    0000047c: 	popq	%rbx
    0000047d: 	popq	%rbp
    0000047e: 	popq	%r12
    00000480: 	popq	%r13
    00000482: 	popq	%r14
    00000484: 	popq	%r15
    00000486: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1158
.Ltmp1352:
    0000048b: 	movl	0x80(%rsp), %eax
    00000492: 	xorl	%esi, %esi
    00000494: 	leaq	0x1(%rbp,%rax), %rcx
    00000499: 	nopl	(%rax) # Size: 7
.Ltmp1362:
    000004a0: 	movq	%rbp, %rax
    000004a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1361:
    000004a8: 	cvttsd2si	init_value(%rip), %edx
    000004b0: 	addq	$0x1, %rax
    000004b4: 	movb	%dl, -0x1(%rax)
    000004b7: 	cmpq	%rcx, %rax
    000004ba: 	jne	.Ltmp1361 # Offset: 1210
    000004bc: 	addl	$0x1, %esi
    000004bf: 	cmpl	%esi, iterations(%rip)
    000004c5: 	jg	.Ltmp1362 # Offset: 1221
    000004c7: 	jmp	.Ltmp1363 # Offset: 1223
.Ltmp1350:
    000004cc: 	callq	clock@PLT # Offset: 1228
    000004d1: 	movq	0x60(%rsp), %rdi
    000004d6: 	pxor	%xmm0, %xmm0
    000004da: 	movq	%rax, end_time(%rip)
    000004e1: 	subq	start_time(%rip), %rax
    000004e8: 	cvtsi2sd	%rax, %xmm0
    000004ed: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000004f5: 	callq	_Z13record_resultdPKc # Offset: 1269
    000004fa: 	testl	%ebx, %ebx
    000004fc: 	jle	.Ltmp1364 # Offset: 1276
    00000502: 	leal	-0x1(%rbx), %eax
    00000505: 	movl	%eax, 0x80(%rsp)
    0000050c: 	jmp	.Ltmp1365 # Offset: 1292
.Ltmp1351:
    00000511: 	callq	clock@PLT # Offset: 1297
    00000516: 	pxor	%xmm0, %xmm0
    0000051a: 	movq	0x60(%rsp), %rdi
    0000051f: 	movq	%rax, end_time(%rip)
    00000526: 	subq	start_time(%rip), %rax
    0000052d: 	cvtsi2sd	%rax, %xmm0
    00000532: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000053a: 	addq	$0xa8, %rsp
    00000541: 	popq	%rbx
    00000542: 	popq	%rbp
    00000543: 	popq	%r12
    00000545: 	popq	%r13
    00000547: 	popq	%r14
    00000549: 	popq	%r15
    0000054b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1355
.Ltmp1356:
    00000550: 	xorl	%ecx, %ecx
    00000552: 	xorl	%eax, %eax
    00000554: 	xorl	%edx, %edx
    00000556: 	jmp	.Ltmp1366 # Offset: 1366
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_loop_replace_optIhEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace2IhEvPT_iPKc" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x208d0
  Size        : 0x524
  MaxSize     : 0x530
  Offset      : 0x208d0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp1367 # Offset: 46
    00000034: 	leal	-0x801(%rbx), %eax
    0000003a: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000042: 	xorl	%r15d, %r15d
    00000045: 	leal	-0x800(%rbx), %r13d
    0000004c: 	andl	$0xfffff800, %eax
    00000051: 	leaq	init_value(%rip), %r14
    00000058: 	addl	$0x800, %eax
    0000005d: 	movl	%eax, (%rsp)
.Ltmp1376:
    00000060: 	xorl	%ecx, %ecx
    00000062: 	testl	%r13d, %r13d
    00000065: 	jle	.Ltmp1368 # Offset: 101
    0000006b: 	movq	%r12, %rsi
    0000006e: 	leaq	0x800(%r12), %rdx
    00000076: 	xorl	%r9d, %r9d
    00000079: 	xorl	%eax, %eax
    0000007b: 	leaq	iterations(%rip), %r8
.Ltmp1372:
    00000082: 	leaq	0x8(%rsi), %rdi
    00000086: 	movq	%rsi, %rcx
    00000089: 	movq	$0x0, (%rsi)
    00000090: 	addq	$0x800, %r9
    00000097: 	movq	$0x0, 0x7f8(%rsi)
    000000a2: 	andq	$-0x8, %rdi
    000000a6: 	subq	%rdi, %rcx
    000000a9: 	addl	$0x800, %ecx
    000000af: 	shrl	$0x3, %ecx
    000000b2: 	rep		stosq	%rax, %es:(%rdi)
    000000b5: 	cmpq	%rsi, %r8
    000000b8: 	jbe	.Ltmp1369 # Offset: 184
    000000ba: 	cmpq	%rdx, %r14
    000000bd: 	jb	.Ltmp1370 # Offset: 189
.Ltmp1369:
    000000c3: 	movsd	init_value(%rip), %xmm1
    000000cb: 	movq	%rsi, %rcx
    000000ce: 	unpcklpd	%xmm1, %xmm1
    000000d2: 	cvttpd2dq	%xmm1, %xmm1
    000000d6: 	punpcklqdq	%xmm1, %xmm1
    000000da: 	movdqa	%xmm1, %xmm2
    000000de: 	punpckhwd	%xmm1, %xmm2
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1371:
    000000e8: 	movdqa	%xmm1, %xmm0
    000000ec: 	addq	$0x10, %rcx
    000000f0: 	punpcklwd	%xmm1, %xmm0
    000000f4: 	movdqa	%xmm0, %xmm3
    000000f8: 	punpcklwd	%xmm2, %xmm0
    000000fc: 	punpckhwd	%xmm2, %xmm3
    00000100: 	punpcklwd	%xmm3, %xmm0
    00000104: 	pand	%xmm4, %xmm0
    00000108: 	packuswb	%xmm0, %xmm0
    0000010c: 	movups	%xmm0, -0x10(%rcx)
    00000110: 	cmpq	%rdx, %rcx
    00000113: 	jne	.Ltmp1371 # Offset: 275
.Ltmp1384:
    00000115: 	addq	$0x800, %rsi
    0000011c: 	addq	$0x800, %rdx
    00000123: 	cmpl	%r9d, %r13d
    00000126: 	jg	.Ltmp1372 # Offset: 294
    0000012c: 	movl	(%rsp), %ecx
.Ltmp1368:
    0000012f: 	cmpl	%ecx, %ebx
    00000131: 	jle	.Ltmp1373 # Offset: 305
    00000137: 	movl	%ebx, %r9d
    0000013a: 	movslq	%ecx, %r10
    0000013d: 	xorl	%esi, %esi
    0000013f: 	movl	%ecx, 0x10(%rsp)
    00000143: 	subl	%ecx, %r9d
    00000146: 	leaq	(%r12,%r10), %rdi
    0000014a: 	movq	%r10, 0x8(%rsp)
    0000014f: 	leal	-0x1(%r9), %edx
    00000153: 	movl	%r9d, 0x14(%rsp)
    00000158: 	movl	%edx, 0x4(%rsp)
    0000015c: 	addq	$0x1, %rdx
    00000160: 	callq	memset@PLT # Offset: 352
    00000165: 	movq	0x8(%rsp), %r10
    0000016a: 	leaq	iterations(%rip), %r8
    00000171: 	movl	0x10(%rsp), %ecx
    00000175: 	movq	%rax, %rdi
    00000178: 	movl	0x14(%rsp), %eax
    0000017c: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000184: 	movq	%rax, %r9
    00000187: 	addq	%r10, %rax
    0000018a: 	addq	%r12, %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	setbe	%al
    00000193: 	cmpq	%r8, %rdi
    00000196: 	setae	%dl
    00000199: 	orb	%dl, %al
    0000019b: 	je	.Ltmp1374 # Offset: 411
    000001a1: 	movl	0x4(%rsp), %r11d
    000001a6: 	cmpl	$0xe, %r11d
    000001aa: 	jbe	.Ltmp1374 # Offset: 426
    000001b0: 	movsd	init_value(%rip), %xmm1
    000001b8: 	movl	%r9d, %eax
    000001bb: 	shrl	$0x4, %eax
    000001be: 	unpcklpd	%xmm1, %xmm1
    000001c2: 	subl	$0x1, %eax
    000001c5: 	cvttpd2dq	%xmm1, %xmm1
    000001c9: 	punpcklqdq	%xmm1, %xmm1
    000001cd: 	shlq	$0x4, %rax
    000001d1: 	movdqa	%xmm1, %xmm2
    000001d5: 	leaq	0x10(%rdi,%rax), %rax
    000001da: 	punpckhwd	%xmm1, %xmm2
.Ltmp1375:
    000001de: 	movdqa	%xmm1, %xmm0
    000001e2: 	addq	$0x10, %rdi
    000001e6: 	punpcklwd	%xmm1, %xmm0
    000001ea: 	movdqa	%xmm0, %xmm3
    000001ee: 	punpcklwd	%xmm2, %xmm0
    000001f2: 	punpckhwd	%xmm2, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm0
    000001fa: 	pand	%xmm4, %xmm0
    000001fe: 	packuswb	%xmm0, %xmm0
    00000202: 	movups	%xmm0, -0x10(%rdi)
    00000206: 	cmpq	%rax, %rdi
    00000209: 	jne	.Ltmp1375 # Offset: 521
    0000020b: 	movl	%r9d, %eax
    0000020e: 	andl	$-0x10, %eax
    00000211: 	addl	%eax, %ecx
    00000213: 	cmpl	%eax, %r9d
    00000216: 	je	.Ltmp1373 # Offset: 534
    0000021c: 	cvttsd2si	init_value(%rip), %edx
    00000224: 	movslq	%ecx, %rax
    00000227: 	movb	%dl, (%r12,%rax)
    0000022b: 	leal	0x1(%rcx), %eax
    0000022e: 	cmpl	%eax, %ebx
    00000230: 	jle	.Ltmp1373 # Offset: 560
    00000236: 	cvttsd2si	init_value(%rip), %edx
    0000023e: 	cltq
    00000240: 	movb	%dl, (%r12,%rax)
    00000244: 	leal	0x2(%rcx), %eax
    00000247: 	cmpl	%eax, %ebx
    00000249: 	jle	.Ltmp1373 # Offset: 585
    0000024f: 	cvttsd2si	init_value(%rip), %edx
    00000257: 	cltq
    00000259: 	movb	%dl, (%r12,%rax)
    0000025d: 	leal	0x3(%rcx), %eax
    00000260: 	cmpl	%eax, %ebx
    00000262: 	jle	.Ltmp1373 # Offset: 610
    00000268: 	cvttsd2si	init_value(%rip), %edx
    00000270: 	cltq
    00000272: 	movb	%dl, (%r12,%rax)
    00000276: 	leal	0x4(%rcx), %eax
    00000279: 	cmpl	%eax, %ebx
    0000027b: 	jle	.Ltmp1373 # Offset: 635
    00000281: 	cvttsd2si	init_value(%rip), %edx
    00000289: 	cltq
    0000028b: 	movb	%dl, (%r12,%rax)
    0000028f: 	leal	0x5(%rcx), %eax
    00000292: 	cmpl	%eax, %ebx
    00000294: 	jle	.Ltmp1373 # Offset: 660
    0000029a: 	cvttsd2si	init_value(%rip), %edx
    000002a2: 	cltq
    000002a4: 	movb	%dl, (%r12,%rax)
    000002a8: 	leal	0x6(%rcx), %eax
    000002ab: 	cmpl	%eax, %ebx
    000002ad: 	jle	.Ltmp1373 # Offset: 685
    000002b3: 	cvttsd2si	init_value(%rip), %edx
    000002bb: 	cltq
    000002bd: 	movb	%dl, (%r12,%rax)
    000002c1: 	leal	0x7(%rcx), %eax
    000002c4: 	cmpl	%eax, %ebx
    000002c6: 	jle	.Ltmp1373 # Offset: 710
    000002cc: 	cvttsd2si	init_value(%rip), %edx
    000002d4: 	cltq
    000002d6: 	movb	%dl, (%r12,%rax)
    000002da: 	leal	0x8(%rcx), %eax
    000002dd: 	cmpl	%eax, %ebx
    000002df: 	jle	.Ltmp1373 # Offset: 735
    000002e5: 	cvttsd2si	init_value(%rip), %edx
    000002ed: 	cltq
    000002ef: 	movb	%dl, (%r12,%rax)
    000002f3: 	leal	0x9(%rcx), %eax
    000002f6: 	cmpl	%eax, %ebx
    000002f8: 	jle	.Ltmp1373 # Offset: 760
    000002fa: 	cvttsd2si	init_value(%rip), %edx
    00000302: 	cltq
    00000304: 	movb	%dl, (%r12,%rax)
    00000308: 	leal	0xa(%rcx), %eax
    0000030b: 	cmpl	%eax, %ebx
    0000030d: 	jle	.Ltmp1373 # Offset: 781
    0000030f: 	cvttsd2si	init_value(%rip), %edx
    00000317: 	cltq
    00000319: 	movb	%dl, (%r12,%rax)
    0000031d: 	leal	0xb(%rcx), %eax
    00000320: 	cmpl	%eax, %ebx
    00000322: 	jle	.Ltmp1373 # Offset: 802
    00000324: 	cvttsd2si	init_value(%rip), %edx
    0000032c: 	cltq
    0000032e: 	movb	%dl, (%r12,%rax)
    00000332: 	leal	0xc(%rcx), %eax
    00000335: 	cmpl	%eax, %ebx
    00000337: 	jle	.Ltmp1373 # Offset: 823
    00000339: 	cvttsd2si	init_value(%rip), %edx
    00000341: 	cltq
    00000343: 	movb	%dl, (%r12,%rax)
    00000347: 	leal	0xd(%rcx), %eax
    0000034a: 	cmpl	%eax, %ebx
    0000034c: 	jle	.Ltmp1373 # Offset: 844
    0000034e: 	cvttsd2si	init_value(%rip), %edx
    00000356: 	cltq
    00000358: 	addl	$0xe, %ecx
    0000035b: 	movb	%dl, (%r12,%rax)
    0000035f: 	cmpl	%ecx, %ebx
    00000361: 	jle	.Ltmp1373 # Offset: 865
    00000363: 	cvttsd2si	init_value(%rip), %eax
    0000036b: 	movslq	%ecx, %rcx
    0000036e: 	movb	%al, (%r12,%rcx)
.Ltmp1373:
    00000372: 	addl	$0x1, %r15d
    00000376: 	cmpl	%r15d, iterations(%rip)
    0000037d: 	jg	.Ltmp1376 # Offset: 893
.Ltmp1367:
    00000383: 	callq	clock@PLT # Offset: 899
    00000388: 	pxor	%xmm0, %xmm0
    0000038c: 	movq	%rbp, %rdi
    0000038f: 	movq	%rax, end_time(%rip)
    00000396: 	subq	start_time(%rip), %rax
    0000039d: 	cvtsi2sd	%rax, %xmm0
    000003a2: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003aa: 	callq	_Z13record_resultdPKc # Offset: 938
    000003af: 	testl	%ebx, %ebx
    000003b1: 	jle	.Ltmp1377 # Offset: 945
    000003b7: 	leal	-0x1(%rbx), %eax
    000003ba: 	cmpl	$0xe, %eax
    000003bd: 	jbe	.Ltmp1378 # Offset: 957
    000003c3: 	movl	%ebx, %edx
    000003c5: 	movq	%r12, %rax
    000003c8: 	pxor	%xmm0, %xmm0
    000003cc: 	shrl	$0x4, %edx
    000003cf: 	subl	$0x1, %edx
    000003d2: 	shlq	$0x4, %rdx
    000003d6: 	leaq	0x10(%r12,%rdx), %rdx
.Ltmp1379:
    000003db: 	movdqu	(%rax), %xmm6
    000003df: 	addq	$0x10, %rax
    000003e3: 	paddb	%xmm6, %xmm0
    000003e7: 	cmpq	%rdx, %rax
    000003ea: 	jne	.Ltmp1379 # Offset: 1002
    000003ec: 	movdqa	%xmm0, %xmm1
    000003f0: 	movl	%ebx, %ecx
    000003f2: 	psrldq	$0x8, %xmm1
    000003f7: 	andl	$-0x10, %ecx
    000003fa: 	paddb	%xmm1, %xmm0
    000003fe: 	pxor	%xmm1, %xmm1
    00000402: 	movl	%ecx, %edx
    00000404: 	psadbw	%xmm1, %xmm0
    00000408: 	movd	%xmm0, %eax
    0000040c: 	cmpl	%ebx, %ecx
    0000040e: 	je	.Ltmp1380 # Offset: 1038
.Ltmp1386:
    00000414: 	movl	%ebx, %esi
    00000416: 	subl	%ecx, %esi
    00000418: 	leal	-0x1(%rsi), %edi
    0000041b: 	cmpl	$0x6, %edi
    0000041e: 	jbe	.Ltmp1381 # Offset: 1054
    00000420: 	movq	(%r12,%rcx), %xmm1
    00000426: 	pxor	%xmm0, %xmm0
    0000042a: 	movdqa	%xmm1, %xmm5
    0000042e: 	psadbw	%xmm0, %xmm5
    00000432: 	movq	%xmm5, %rcx
    00000437: 	movq	%xmm5, 0x18(%rsp)
    0000043d: 	movl	%ecx, %edi
    0000043f: 	movl	%esi, %ecx
    00000441: 	andl	$-0x8, %ecx
    00000444: 	addl	%edi, %eax
    00000446: 	addl	%ecx, %edx
    00000448: 	cmpl	%ecx, %esi
    0000044a: 	je	.Ltmp1380 # Offset: 1098
.Ltmp1381:
    0000044c: 	movslq	%edx, %rcx
    0000044f: 	addb	(%r12,%rcx), %al
    00000453: 	leal	0x1(%rdx), %ecx
    00000456: 	cmpl	%ecx, %ebx
    00000458: 	jle	.Ltmp1380 # Offset: 1112
    0000045a: 	movslq	%ecx, %rcx
    0000045d: 	addb	(%r12,%rcx), %al
    00000461: 	leal	0x2(%rdx), %ecx
    00000464: 	cmpl	%ebx, %ecx
    00000466: 	jge	.Ltmp1380 # Offset: 1126
    00000468: 	movslq	%ecx, %rcx
    0000046b: 	addb	(%r12,%rcx), %al
    0000046f: 	leal	0x3(%rdx), %ecx
    00000472: 	cmpl	%ebx, %ecx
    00000474: 	jge	.Ltmp1380 # Offset: 1140
    00000476: 	movslq	%ecx, %rcx
    00000479: 	addb	(%r12,%rcx), %al
    0000047d: 	leal	0x4(%rdx), %ecx
    00000480: 	cmpl	%ebx, %ecx
    00000482: 	jge	.Ltmp1380 # Offset: 1154
    00000484: 	movslq	%ecx, %rcx
    00000487: 	addb	(%r12,%rcx), %al
    0000048b: 	leal	0x5(%rdx), %ecx
    0000048e: 	cmpl	%ebx, %ecx
    00000490: 	jge	.Ltmp1380 # Offset: 1168
    00000492: 	movslq	%ecx, %rcx
    00000495: 	addl	$0x6, %edx
    00000498: 	addb	(%r12,%rcx), %al
    0000049c: 	cmpl	%edx, %ebx
    0000049e: 	jle	.Ltmp1380 # Offset: 1182
    000004a0: 	movslq	%edx, %rdx
    000004a3: 	addb	(%r12,%rdx), %al
.Ltmp1380:
    000004a7: 	testb	%al, %al
    000004a9: 	jne	.Ltmp1382 # Offset: 1193
.Ltmp1377:
    000004ab: 	addq	$0x28, %rsp
    000004af: 	popq	%rbx
    000004b0: 	popq	%rbp
    000004b1: 	popq	%r12
    000004b3: 	popq	%r13
    000004b5: 	popq	%r14
    000004b7: 	popq	%r15
    000004b9: 	retq # Offset: 1209
.Ltmp1370:
    000004ba: 	movq	%rsi, %rcx
    000004bd: 	nopl	(%rax) # Size: 3
.Ltmp1383:
    000004c0: 	cvttsd2si	init_value(%rip), %edi
    000004c8: 	addq	$0x1, %rcx
    000004cc: 	movb	%dil, -0x1(%rcx)
    000004d0: 	cmpq	%rcx, %rdx
    000004d3: 	jne	.Ltmp1383 # Offset: 1235
    000004d5: 	jmp	.Ltmp1384 # Offset: 1237
.Ltmp1374:
    000004da: 	leal	-0x1(%rbx), %edx
    000004dd: 	leaq	0x1(%r12,%r10), %rax
    000004e2: 	subl	%ecx, %edx
    000004e4: 	addq	%rdx, %rax
.Ltmp1385:
    000004e7: 	cvttsd2si	init_value(%rip), %edx
    000004ef: 	addq	$0x1, %rdi
    000004f3: 	movb	%dl, -0x1(%rdi)
    000004f6: 	cmpq	%rax, %rdi
    000004f9: 	jne	.Ltmp1385 # Offset: 1273
    000004fb: 	jmp	.Ltmp1373 # Offset: 1275
.Ltmp1382:
    00000500: 	addq	$0x28, %rsp
    00000504: 	movq	%rbp, %rsi
    00000507: 	movzbl	%al, %edi
    0000050a: 	popq	%rbx
    0000050b: 	popq	%rbp
    0000050c: 	popq	%r12
    0000050e: 	popq	%r13
    00000510: 	popq	%r14
    00000512: 	popq	%r15
    00000514: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1300
.Ltmp1378:
    00000519: 	xorl	%ecx, %ecx
    0000051b: 	xorl	%eax, %eax
    0000051d: 	xorl	%edx, %edx
    0000051f: 	jmp	.Ltmp1386 # Offset: 1311
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace2IhEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace3IhEvPT_iPKc" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x20e00
  Size        : 0x567
  MaxSize     : 0x570
  Offset      : 0x20e00
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp1387 # Offset: 46
    00000034: 	leal	-0x801(%rbx), %eax
    0000003a: 	movl	$0x0, 0x8(%rsp)
    00000042: 	movdqa	DATAat0x36f20(%rip), %xmm4
    0000004a: 	leal	-0x800(%rbx), %r13d
    00000051: 	andl	$0xfffff800, %eax
    00000056: 	leaq	init_value(%rip), %r14
    0000005d: 	addl	$0x800, %eax
    00000062: 	movl	%eax, 0xc(%rsp)
.Ltmp1396:
    00000066: 	xorl	%r15d, %r15d
    00000069: 	testl	%r13d, %r13d
    0000006c: 	jle	.Ltmp1388 # Offset: 108
    00000072: 	movq	%rbp, %r8
    00000075: 	leaq	0x800(%rbp), %rdx
    0000007c: 	xorl	%r10d, %r10d
    0000007f: 	xorl	%r15d, %r15d
    00000082: 	leaq	iterations(%rip), %r11
    00000089: 	movabsq	$0x101010101010101, %r9
.Ltmp1392:
    00000093: 	leaq	0x8(%r8), %rdi
    00000097: 	movq	%r8, %rsi
    0000009a: 	movq	%r15, %rax
    0000009d: 	addq	$0x800, %r10
    000000a4: 	andq	$-0x8, %rdi
    000000a8: 	subq	%rdi, %rsi
    000000ab: 	addl	$0x800, %esi
    000000b1: 	shrl	$0x3, %esi
    000000b4: 	movl	%esi, %ecx
    000000b6: 	rep		stosq	%rax, %es:(%rdi)
    000000b9: 	leaq	0x8(%r8), %rdi
    000000bd: 	movl	%esi, %ecx
    000000bf: 	movq	%r9, %rax
    000000c2: 	andq	$-0x8, %rdi
    000000c6: 	movq	%r9, (%r8)
    000000c9: 	movq	%r9, 0x7f8(%r8)
    000000d0: 	rep		stosq	%rax, %es:(%rdi)
    000000d3: 	cmpq	%r8, %r11
    000000d6: 	jbe	.Ltmp1389 # Offset: 214
    000000d8: 	cmpq	%rdx, %r14
    000000db: 	jb	.Ltmp1390 # Offset: 219
.Ltmp1389:
    000000e1: 	movsd	init_value(%rip), %xmm1
    000000e9: 	movq	%r8, %rax
    000000ec: 	unpcklpd	%xmm1, %xmm1
    000000f0: 	cvttpd2dq	%xmm1, %xmm1
    000000f4: 	punpcklqdq	%xmm1, %xmm1
    000000f8: 	movdqa	%xmm1, %xmm2
    000000fc: 	punpckhwd	%xmm1, %xmm2
.Ltmp1391:
    00000100: 	movdqa	%xmm1, %xmm0
    00000104: 	addq	$0x10, %rax
    00000108: 	punpcklwd	%xmm1, %xmm0
    0000010c: 	movdqa	%xmm0, %xmm3
    00000110: 	punpcklwd	%xmm2, %xmm0
    00000114: 	punpckhwd	%xmm2, %xmm3
    00000118: 	punpcklwd	%xmm3, %xmm0
    0000011c: 	pand	%xmm4, %xmm0
    00000120: 	packuswb	%xmm0, %xmm0
    00000124: 	movups	%xmm0, -0x10(%rax)
    00000128: 	cmpq	%rdx, %rax
    0000012b: 	jne	.Ltmp1391 # Offset: 299
.Ltmp1404:
    0000012d: 	addq	$0x800, %r8
    00000134: 	addq	$0x800, %rdx
    0000013b: 	cmpl	%r10d, %r13d
    0000013e: 	jg	.Ltmp1392 # Offset: 318
    00000144: 	movl	0xc(%rsp), %r15d
.Ltmp1388:
    00000149: 	cmpl	%r15d, %ebx
    0000014c: 	jle	.Ltmp1393 # Offset: 332
    00000152: 	movl	%ebx, %ecx
    00000154: 	movslq	%r15d, %r8
    00000157: 	xorl	%esi, %esi
    00000159: 	subl	%r15d, %ecx
    0000015c: 	leaq	(%rbp,%r8), %rdi
    00000161: 	movq	%r8, 0x18(%rsp)
    00000166: 	leal	-0x1(%rcx), %edx
    00000169: 	movl	%ecx, 0x24(%rsp)
    0000016d: 	movl	%edx, 0x20(%rsp)
    00000171: 	addq	$0x1, %rdx
    00000175: 	movq	%rdx, 0x10(%rsp)
    0000017a: 	callq	memset@PLT # Offset: 378
    0000017f: 	movq	0x10(%rsp), %rdx
    00000184: 	movl	$0x1, %esi
    00000189: 	movq	%rax, %rdi
    0000018c: 	callq	memset@PLT # Offset: 396
    00000191: 	movq	0x18(%rsp), %r8
    00000196: 	leaq	iterations(%rip), %r11
    0000019d: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000001a5: 	movq	%rax, %rdi
    000001a8: 	movl	0x24(%rsp), %eax
    000001ac: 	movq	%rax, %rcx
    000001af: 	addq	%r8, %rax
    000001b2: 	addq	%rbp, %rax
    000001b5: 	cmpq	%r14, %rax
    000001b8: 	setbe	%al
    000001bb: 	cmpq	%r11, %rdi
    000001be: 	setae	%dl
    000001c1: 	orb	%dl, %al
    000001c3: 	je	.Ltmp1394 # Offset: 451
    000001c9: 	movl	0x20(%rsp), %r9d
    000001ce: 	cmpl	$0xe, %r9d
    000001d2: 	jbe	.Ltmp1394 # Offset: 466
    000001d8: 	movsd	init_value(%rip), %xmm1
    000001e0: 	movl	%ecx, %edx
    000001e2: 	movq	%rdi, %rax
    000001e5: 	shrl	$0x4, %edx
    000001e8: 	unpcklpd	%xmm1, %xmm1
    000001ec: 	subl	$0x1, %edx
    000001ef: 	cvttpd2dq	%xmm1, %xmm1
    000001f3: 	punpcklqdq	%xmm1, %xmm1
    000001f7: 	shlq	$0x4, %rdx
    000001fb: 	movdqa	%xmm1, %xmm2
    000001ff: 	leaq	0x10(%rdi,%rdx), %rdx
    00000204: 	punpckhwd	%xmm1, %xmm2
.Ltmp1395:
    00000208: 	movdqa	%xmm1, %xmm0
    0000020c: 	addq	$0x10, %rax
    00000210: 	punpcklwd	%xmm1, %xmm0
    00000214: 	movdqa	%xmm0, %xmm3
    00000218: 	punpcklwd	%xmm2, %xmm0
    0000021c: 	punpckhwd	%xmm2, %xmm3
    00000220: 	punpcklwd	%xmm3, %xmm0
    00000224: 	pand	%xmm4, %xmm0
    00000228: 	packuswb	%xmm0, %xmm0
    0000022c: 	movups	%xmm0, -0x10(%rax)
    00000230: 	cmpq	%rdx, %rax
    00000233: 	jne	.Ltmp1395 # Offset: 563
    00000235: 	movl	%ecx, %edx
    00000237: 	andl	$-0x10, %edx
    0000023a: 	leal	(%rdx,%r15), %eax
    0000023e: 	cmpl	%edx, %ecx
    00000240: 	je	.Ltmp1393 # Offset: 576
    00000246: 	cvttsd2si	init_value(%rip), %ecx
    0000024e: 	movslq	%eax, %rdx
    00000251: 	movb	%cl, (%rbp,%rdx)
    00000255: 	leal	0x1(%rax), %edx
    00000258: 	cmpl	%edx, %ebx
    0000025a: 	jle	.Ltmp1393 # Offset: 602
    00000260: 	cvttsd2si	init_value(%rip), %ecx
    00000268: 	movslq	%edx, %rdx
    0000026b: 	movb	%cl, (%rbp,%rdx)
    0000026f: 	leal	0x2(%rax), %edx
    00000272: 	cmpl	%edx, %ebx
    00000274: 	jle	.Ltmp1393 # Offset: 628
    0000027a: 	cvttsd2si	init_value(%rip), %ecx
    00000282: 	movslq	%edx, %rdx
    00000285: 	movb	%cl, (%rbp,%rdx)
    00000289: 	leal	0x3(%rax), %edx
    0000028c: 	cmpl	%edx, %ebx
    0000028e: 	jle	.Ltmp1393 # Offset: 654
    00000294: 	cvttsd2si	init_value(%rip), %ecx
    0000029c: 	movslq	%edx, %rdx
    0000029f: 	movb	%cl, (%rbp,%rdx)
    000002a3: 	leal	0x4(%rax), %edx
    000002a6: 	cmpl	%edx, %ebx
    000002a8: 	jle	.Ltmp1393 # Offset: 680
    000002ae: 	cvttsd2si	init_value(%rip), %ecx
    000002b6: 	movslq	%edx, %rdx
    000002b9: 	movb	%cl, (%rbp,%rdx)
    000002bd: 	leal	0x5(%rax), %edx
    000002c0: 	cmpl	%edx, %ebx
    000002c2: 	jle	.Ltmp1393 # Offset: 706
    000002c8: 	cvttsd2si	init_value(%rip), %ecx
    000002d0: 	movslq	%edx, %rdx
    000002d3: 	movb	%cl, (%rbp,%rdx)
    000002d7: 	leal	0x6(%rax), %edx
    000002da: 	cmpl	%edx, %ebx
    000002dc: 	jle	.Ltmp1393 # Offset: 732
    000002e2: 	cvttsd2si	init_value(%rip), %ecx
    000002ea: 	movslq	%edx, %rdx
    000002ed: 	movb	%cl, (%rbp,%rdx)
    000002f1: 	leal	0x7(%rax), %edx
    000002f4: 	cmpl	%edx, %ebx
    000002f6: 	jle	.Ltmp1393 # Offset: 758
    000002fc: 	cvttsd2si	init_value(%rip), %ecx
    00000304: 	movslq	%edx, %rdx
    00000307: 	movb	%cl, (%rbp,%rdx)
    0000030b: 	leal	0x8(%rax), %edx
    0000030e: 	cmpl	%edx, %ebx
    00000310: 	jle	.Ltmp1393 # Offset: 784
    00000316: 	cvttsd2si	init_value(%rip), %ecx
    0000031e: 	movslq	%edx, %rdx
    00000321: 	movb	%cl, (%rbp,%rdx)
    00000325: 	leal	0x9(%rax), %edx
    00000328: 	cmpl	%edx, %ebx
    0000032a: 	jle	.Ltmp1393 # Offset: 810
    0000032c: 	cvttsd2si	init_value(%rip), %ecx
    00000334: 	movslq	%edx, %rdx
    00000337: 	movb	%cl, (%rbp,%rdx)
    0000033b: 	leal	0xa(%rax), %edx
    0000033e: 	cmpl	%edx, %ebx
    00000340: 	jle	.Ltmp1393 # Offset: 832
    00000342: 	cvttsd2si	init_value(%rip), %ecx
    0000034a: 	movslq	%edx, %rdx
    0000034d: 	movb	%cl, (%rbp,%rdx)
    00000351: 	leal	0xb(%rax), %edx
    00000354: 	cmpl	%edx, %ebx
    00000356: 	jle	.Ltmp1393 # Offset: 854
    00000358: 	cvttsd2si	init_value(%rip), %ecx
    00000360: 	movslq	%edx, %rdx
    00000363: 	movb	%cl, (%rbp,%rdx)
    00000367: 	leal	0xc(%rax), %edx
    0000036a: 	cmpl	%edx, %ebx
    0000036c: 	jle	.Ltmp1393 # Offset: 876
    0000036e: 	cvttsd2si	init_value(%rip), %ecx
    00000376: 	movslq	%edx, %rdx
    00000379: 	movb	%cl, (%rbp,%rdx)
    0000037d: 	leal	0xd(%rax), %edx
    00000380: 	cmpl	%edx, %ebx
    00000382: 	jle	.Ltmp1393 # Offset: 898
    00000384: 	cvttsd2si	init_value(%rip), %ecx
    0000038c: 	movslq	%edx, %rdx
    0000038f: 	addl	$0xe, %eax
    00000392: 	movb	%cl, (%rbp,%rdx)
    00000396: 	cmpl	%eax, %ebx
    00000398: 	jle	.Ltmp1393 # Offset: 920
    0000039a: 	cvttsd2si	init_value(%rip), %edx
    000003a2: 	cltq
    000003a4: 	movb	%dl, (%rbp,%rax)
.Ltmp1393:
    000003a8: 	addl	$0x1, 0x8(%rsp)
    000003ad: 	movl	0x8(%rsp), %eax
    000003b1: 	cmpl	%eax, iterations(%rip)
    000003b7: 	jg	.Ltmp1396 # Offset: 951
.Ltmp1387:
    000003bd: 	callq	clock@PLT # Offset: 957
    000003c2: 	pxor	%xmm0, %xmm0
    000003c6: 	movq	%r12, %rdi
    000003c9: 	movq	%rax, end_time(%rip)
    000003d0: 	subq	start_time(%rip), %rax
    000003d7: 	cvtsi2sd	%rax, %xmm0
    000003dc: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003e4: 	callq	_Z13record_resultdPKc # Offset: 996
    000003e9: 	testl	%ebx, %ebx
    000003eb: 	jle	.Ltmp1397 # Offset: 1003
    000003f1: 	leal	-0x1(%rbx), %eax
    000003f4: 	cmpl	$0xe, %eax
    000003f7: 	jbe	.Ltmp1398 # Offset: 1015
    000003fd: 	movl	%ebx, %edx
    000003ff: 	movq	%rbp, %rax
    00000402: 	pxor	%xmm0, %xmm0
    00000406: 	shrl	$0x4, %edx
    00000409: 	subl	$0x1, %edx
    0000040c: 	shlq	$0x4, %rdx
    00000410: 	leaq	0x10(%rbp,%rdx), %rdx
.Ltmp1399:
    00000415: 	movdqu	(%rax), %xmm6
    00000419: 	addq	$0x10, %rax
    0000041d: 	paddb	%xmm6, %xmm0
    00000421: 	cmpq	%rdx, %rax
    00000424: 	jne	.Ltmp1399 # Offset: 1060
    00000426: 	movdqa	%xmm0, %xmm1
    0000042a: 	movl	%ebx, %ecx
    0000042c: 	psrldq	$0x8, %xmm1
    00000431: 	andl	$-0x10, %ecx
    00000434: 	paddb	%xmm1, %xmm0
    00000438: 	pxor	%xmm1, %xmm1
    0000043c: 	movl	%ecx, %edx
    0000043e: 	psadbw	%xmm1, %xmm0
    00000442: 	movd	%xmm0, %eax
    00000446: 	cmpl	%ebx, %ecx
    00000448: 	je	.Ltmp1400 # Offset: 1096
.Ltmp1406:
    0000044e: 	movl	%ebx, %esi
    00000450: 	subl	%ecx, %esi
    00000452: 	leal	-0x1(%rsi), %edi
    00000455: 	cmpl	$0x6, %edi
    00000458: 	jbe	.Ltmp1401 # Offset: 1112
    0000045a: 	movq	(%rbp,%rcx), %xmm1
    00000460: 	pxor	%xmm0, %xmm0
    00000464: 	movdqa	%xmm1, %xmm5
    00000468: 	psadbw	%xmm0, %xmm5
    0000046c: 	movq	%xmm5, %rcx
    00000471: 	movq	%xmm5, 0x28(%rsp)
    00000477: 	movl	%ecx, %edi
    00000479: 	movl	%esi, %ecx
    0000047b: 	andl	$-0x8, %ecx
    0000047e: 	addl	%edi, %eax
    00000480: 	addl	%ecx, %edx
    00000482: 	cmpl	%ecx, %esi
    00000484: 	je	.Ltmp1400 # Offset: 1156
.Ltmp1401:
    00000486: 	movslq	%edx, %rcx
    00000489: 	addb	(%rbp,%rcx), %al
    0000048d: 	leal	0x1(%rdx), %ecx
    00000490: 	cmpl	%ecx, %ebx
    00000492: 	jle	.Ltmp1400 # Offset: 1170
    00000494: 	movslq	%ecx, %rcx
    00000497: 	addb	(%rbp,%rcx), %al
    0000049b: 	leal	0x2(%rdx), %ecx
    0000049e: 	cmpl	%ebx, %ecx
    000004a0: 	jge	.Ltmp1400 # Offset: 1184
    000004a2: 	movslq	%ecx, %rcx
    000004a5: 	addb	(%rbp,%rcx), %al
    000004a9: 	leal	0x3(%rdx), %ecx
    000004ac: 	cmpl	%ebx, %ecx
    000004ae: 	jge	.Ltmp1400 # Offset: 1198
    000004b0: 	movslq	%ecx, %rcx
    000004b3: 	addb	(%rbp,%rcx), %al
    000004b7: 	leal	0x4(%rdx), %ecx
    000004ba: 	cmpl	%ebx, %ecx
    000004bc: 	jge	.Ltmp1400 # Offset: 1212
    000004be: 	movslq	%ecx, %rcx
    000004c1: 	addb	(%rbp,%rcx), %al
    000004c5: 	leal	0x5(%rdx), %ecx
    000004c8: 	cmpl	%ecx, %ebx
    000004ca: 	jle	.Ltmp1400 # Offset: 1226
    000004cc: 	movslq	%ecx, %rcx
    000004cf: 	addl	$0x6, %edx
    000004d2: 	addb	(%rbp,%rcx), %al
    000004d6: 	cmpl	%edx, %ebx
    000004d8: 	jle	.Ltmp1400 # Offset: 1240
    000004da: 	movslq	%edx, %rdx
    000004dd: 	addb	(%rbp,%rdx), %al
.Ltmp1400:
    000004e1: 	testb	%al, %al
    000004e3: 	jne	.Ltmp1402 # Offset: 1251
.Ltmp1397:
    000004e5: 	addq	$0x38, %rsp
    000004e9: 	popq	%rbx
    000004ea: 	popq	%rbp
    000004eb: 	popq	%r12
    000004ed: 	popq	%r13
    000004ef: 	popq	%r14
    000004f1: 	popq	%r15
    000004f3: 	retq # Offset: 1267
.Ltmp1390:
    000004f4: 	movq	%r8, %rax
    000004f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1403:
    00000500: 	cvttsd2si	init_value(%rip), %ecx
    00000508: 	addq	$0x1, %rax
    0000050c: 	movb	%cl, -0x1(%rax)
    0000050f: 	cmpq	%rax, %rdx
    00000512: 	jne	.Ltmp1403 # Offset: 1298
    00000514: 	jmp	.Ltmp1404 # Offset: 1300
.Ltmp1394:
    00000519: 	leal	-0x1(%rbx), %ecx
    0000051c: 	leaq	0x1(%rbp,%r8), %rdx
    00000521: 	movq	%rdi, %rax
    00000524: 	subl	%r15d, %ecx
    00000527: 	addq	%rcx, %rdx
.Ltmp1405:
    0000052a: 	cvttsd2si	init_value(%rip), %ecx
    00000532: 	addq	$0x1, %rax
    00000536: 	movb	%cl, -0x1(%rax)
    00000539: 	cmpq	%rdx, %rax
    0000053c: 	jne	.Ltmp1405 # Offset: 1340
    0000053e: 	jmp	.Ltmp1393 # Offset: 1342
.Ltmp1402:
    00000543: 	addq	$0x38, %rsp
    00000547: 	movq	%r12, %rsi
    0000054a: 	movzbl	%al, %edi
    0000054d: 	popq	%rbx
    0000054e: 	popq	%rbp
    0000054f: 	popq	%r12
    00000551: 	popq	%r13
    00000553: 	popq	%r14
    00000555: 	popq	%r15
    00000557: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1367
.Ltmp1398:
    0000055c: 	xorl	%ecx, %ecx
    0000055e: 	xorl	%eax, %eax
    00000560: 	xorl	%edx, %edx
    00000562: 	jmp	.Ltmp1406 # Offset: 1378
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace3IhEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace4IhEvPT_iPKc" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x21370
  Size        : 0x587
  MaxSize     : 0x590
  Offset      : 0x21370
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp1407 # Offset: 46
    00000034: 	leal	-0x801(%rbx), %eax
    0000003a: 	movl	$0x0, 0x8(%rsp)
    00000042: 	movdqa	DATAat0x36f20(%rip), %xmm4
    0000004a: 	leal	-0x800(%rbx), %r13d
    00000051: 	andl	$0xfffff800, %eax
    00000056: 	movq	%r12, 0x10(%rsp)
    0000005b: 	leaq	init_value(%rip), %r14
    00000062: 	addl	$0x800, %eax
    00000067: 	movl	%eax, 0xc(%rsp)
.Ltmp1416:
    0000006b: 	xorl	%r15d, %r15d
    0000006e: 	testl	%r13d, %r13d
    00000071: 	jle	.Ltmp1408 # Offset: 113
    00000077: 	movq	%rbp, %r8
    0000007a: 	leaq	0x800(%rbp), %rdx
    00000081: 	xorl	%r10d, %r10d
    00000084: 	xorl	%r15d, %r15d
    00000087: 	leaq	iterations(%rip), %r11
    0000008e: 	movabsq	$0x6363636363636363, %r9
.Ltmp1412:
    00000098: 	leaq	0x8(%r8), %rdi
    0000009c: 	movq	%r8, %rcx
    0000009f: 	movq	%r15, %rax
    000000a2: 	addq	$0x800, %r10
    000000a9: 	andq	$-0x8, %rdi
    000000ad: 	subq	%rdi, %rcx
    000000b0: 	addl	$0x800, %ecx
    000000b6: 	movl	%ecx, %esi
    000000b8: 	shrl	$0x3, %esi
    000000bb: 	movl	%esi, %ecx
    000000bd: 	rep		stosq	%rax, %es:(%rdi)
    000000c0: 	leaq	0x8(%r8), %rdi
    000000c4: 	movl	%esi, %ecx
    000000c6: 	movq	%r9, %rax
    000000c9: 	andq	$-0x8, %rdi
    000000cd: 	movq	%r9, (%r8)
    000000d0: 	movq	%r9, 0x7f8(%r8)
    000000d7: 	rep		stosq	%rax, %es:(%rdi)
    000000da: 	cmpq	%r8, %r11
    000000dd: 	jbe	.Ltmp1409 # Offset: 221
    000000df: 	cmpq	%rdx, %r14
    000000e2: 	jb	.Ltmp1410 # Offset: 226
.Ltmp1409:
    000000e8: 	movsd	init_value(%rip), %xmm1
    000000f0: 	movq	%r8, %rax
    000000f3: 	unpcklpd	%xmm1, %xmm1
    000000f7: 	cvttpd2dq	%xmm1, %xmm1
    000000fb: 	punpcklqdq	%xmm1, %xmm1
    000000ff: 	movdqa	%xmm1, %xmm2
    00000103: 	punpckhwd	%xmm1, %xmm2
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1411:
    00000110: 	movdqa	%xmm1, %xmm0
    00000114: 	addq	$0x10, %rax
    00000118: 	punpcklwd	%xmm1, %xmm0
    0000011c: 	movdqa	%xmm0, %xmm3
    00000120: 	punpcklwd	%xmm2, %xmm0
    00000124: 	punpckhwd	%xmm2, %xmm3
    00000128: 	punpcklwd	%xmm3, %xmm0
    0000012c: 	pand	%xmm4, %xmm0
    00000130: 	packuswb	%xmm0, %xmm0
    00000134: 	movups	%xmm0, -0x10(%rax)
    00000138: 	cmpq	%rax, %rdx
    0000013b: 	jne	.Ltmp1411 # Offset: 315
.Ltmp1424:
    0000013d: 	addq	$0x800, %r8
    00000144: 	addq	$0x800, %rdx
    0000014b: 	cmpl	%r10d, %r13d
    0000014e: 	jg	.Ltmp1412 # Offset: 334
    00000154: 	movl	0xc(%rsp), %r15d
.Ltmp1408:
    00000159: 	cmpl	%r15d, %ebx
    0000015c: 	jle	.Ltmp1413 # Offset: 348
    00000162: 	movl	%ebx, %ecx
    00000164: 	movslq	%r15d, %r8
    00000167: 	xorl	%esi, %esi
    00000169: 	subl	%r15d, %ecx
    0000016c: 	leaq	(%rbp,%r8), %rdi
    00000171: 	movq	%r8, 0x18(%rsp)
    00000176: 	leal	-0x1(%rcx), %edx
    00000179: 	movl	%ecx, 0x24(%rsp)
    0000017d: 	leaq	0x1(%rdx), %r12
    00000181: 	movl	%edx, 0x20(%rsp)
    00000185: 	movq	%r12, %rdx
    00000188: 	callq	memset@PLT # Offset: 392
    0000018d: 	movq	%r12, %rdx
    00000190: 	movl	$0xb, %esi
    00000195: 	movq	%rax, %rdi
    00000198: 	callq	memset@PLT # Offset: 408
    0000019d: 	movq	%r12, %rdx
    000001a0: 	movl	$0x63, %esi
    000001a5: 	movq	%rax, %rdi
    000001a8: 	callq	memset@PLT # Offset: 424
    000001ad: 	movq	0x18(%rsp), %r8
    000001b2: 	leaq	iterations(%rip), %r11
    000001b9: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000001c1: 	movq	%rax, %rdi
    000001c4: 	movl	0x24(%rsp), %eax
    000001c8: 	movq	%rax, %rcx
    000001cb: 	addq	%r8, %rax
    000001ce: 	addq	%rbp, %rax
    000001d1: 	cmpq	%r14, %rax
    000001d4: 	setbe	%al
    000001d7: 	cmpq	%r11, %rdi
    000001da: 	setae	%dl
    000001dd: 	orb	%dl, %al
    000001df: 	je	.Ltmp1414 # Offset: 479
    000001e5: 	movl	0x20(%rsp), %r9d
    000001ea: 	cmpl	$0xe, %r9d
    000001ee: 	jbe	.Ltmp1414 # Offset: 494
    000001f4: 	movsd	init_value(%rip), %xmm1
    000001fc: 	movl	%ecx, %edx
    000001fe: 	movq	%rdi, %rax
    00000201: 	shrl	$0x4, %edx
    00000204: 	unpcklpd	%xmm1, %xmm1
    00000208: 	subl	$0x1, %edx
    0000020b: 	cvttpd2dq	%xmm1, %xmm1
    0000020f: 	punpcklqdq	%xmm1, %xmm1
    00000213: 	shlq	$0x4, %rdx
    00000217: 	movdqa	%xmm1, %xmm2
    0000021b: 	leaq	0x10(%rdi,%rdx), %rdx
    00000220: 	punpckhwd	%xmm1, %xmm2
.Ltmp1415:
    00000224: 	movdqa	%xmm1, %xmm0
    00000228: 	addq	$0x10, %rax
    0000022c: 	punpcklwd	%xmm1, %xmm0
    00000230: 	movdqa	%xmm0, %xmm3
    00000234: 	punpcklwd	%xmm2, %xmm0
    00000238: 	punpckhwd	%xmm2, %xmm3
    0000023c: 	punpcklwd	%xmm3, %xmm0
    00000240: 	pand	%xmm4, %xmm0
    00000244: 	packuswb	%xmm0, %xmm0
    00000248: 	movups	%xmm0, -0x10(%rax)
    0000024c: 	cmpq	%rdx, %rax
    0000024f: 	jne	.Ltmp1415 # Offset: 591
    00000251: 	movl	%ecx, %edx
    00000253: 	andl	$-0x10, %edx
    00000256: 	leal	(%rdx,%r15), %eax
    0000025a: 	cmpl	%edx, %ecx
    0000025c: 	je	.Ltmp1413 # Offset: 604
    00000262: 	cvttsd2si	init_value(%rip), %ecx
    0000026a: 	movslq	%eax, %rdx
    0000026d: 	movb	%cl, (%rbp,%rdx)
    00000271: 	leal	0x1(%rax), %edx
    00000274: 	cmpl	%edx, %ebx
    00000276: 	jle	.Ltmp1413 # Offset: 630
    0000027c: 	cvttsd2si	init_value(%rip), %ecx
    00000284: 	movslq	%edx, %rdx
    00000287: 	movb	%cl, (%rbp,%rdx)
    0000028b: 	leal	0x2(%rax), %edx
    0000028e: 	cmpl	%edx, %ebx
    00000290: 	jle	.Ltmp1413 # Offset: 656
    00000296: 	cvttsd2si	init_value(%rip), %ecx
    0000029e: 	movslq	%edx, %rdx
    000002a1: 	movb	%cl, (%rbp,%rdx)
    000002a5: 	leal	0x3(%rax), %edx
    000002a8: 	cmpl	%edx, %ebx
    000002aa: 	jle	.Ltmp1413 # Offset: 682
    000002b0: 	cvttsd2si	init_value(%rip), %ecx
    000002b8: 	movslq	%edx, %rdx
    000002bb: 	movb	%cl, (%rbp,%rdx)
    000002bf: 	leal	0x4(%rax), %edx
    000002c2: 	cmpl	%edx, %ebx
    000002c4: 	jle	.Ltmp1413 # Offset: 708
    000002ca: 	cvttsd2si	init_value(%rip), %ecx
    000002d2: 	movslq	%edx, %rdx
    000002d5: 	movb	%cl, (%rbp,%rdx)
    000002d9: 	leal	0x5(%rax), %edx
    000002dc: 	cmpl	%edx, %ebx
    000002de: 	jle	.Ltmp1413 # Offset: 734
    000002e4: 	cvttsd2si	init_value(%rip), %ecx
    000002ec: 	movslq	%edx, %rdx
    000002ef: 	movb	%cl, (%rbp,%rdx)
    000002f3: 	leal	0x6(%rax), %edx
    000002f6: 	cmpl	%edx, %ebx
    000002f8: 	jle	.Ltmp1413 # Offset: 760
    000002fe: 	cvttsd2si	init_value(%rip), %ecx
    00000306: 	movslq	%edx, %rdx
    00000309: 	movb	%cl, (%rbp,%rdx)
    0000030d: 	leal	0x7(%rax), %edx
    00000310: 	cmpl	%edx, %ebx
    00000312: 	jle	.Ltmp1413 # Offset: 786
    00000318: 	cvttsd2si	init_value(%rip), %ecx
    00000320: 	movslq	%edx, %rdx
    00000323: 	movb	%cl, (%rbp,%rdx)
    00000327: 	leal	0x8(%rax), %edx
    0000032a: 	cmpl	%edx, %ebx
    0000032c: 	jle	.Ltmp1413 # Offset: 812
    00000332: 	cvttsd2si	init_value(%rip), %ecx
    0000033a: 	movslq	%edx, %rdx
    0000033d: 	movb	%cl, (%rbp,%rdx)
    00000341: 	leal	0x9(%rax), %edx
    00000344: 	cmpl	%edx, %ebx
    00000346: 	jle	.Ltmp1413 # Offset: 838
    00000348: 	cvttsd2si	init_value(%rip), %ecx
    00000350: 	movslq	%edx, %rdx
    00000353: 	movb	%cl, (%rbp,%rdx)
    00000357: 	leal	0xa(%rax), %edx
    0000035a: 	cmpl	%edx, %ebx
    0000035c: 	jle	.Ltmp1413 # Offset: 860
    0000035e: 	cvttsd2si	init_value(%rip), %ecx
    00000366: 	movslq	%edx, %rdx
    00000369: 	movb	%cl, (%rbp,%rdx)
    0000036d: 	leal	0xb(%rax), %edx
    00000370: 	cmpl	%edx, %ebx
    00000372: 	jle	.Ltmp1413 # Offset: 882
    00000374: 	cvttsd2si	init_value(%rip), %ecx
    0000037c: 	movslq	%edx, %rdx
    0000037f: 	movb	%cl, (%rbp,%rdx)
    00000383: 	leal	0xc(%rax), %edx
    00000386: 	cmpl	%edx, %ebx
    00000388: 	jle	.Ltmp1413 # Offset: 904
    0000038a: 	cvttsd2si	init_value(%rip), %ecx
    00000392: 	movslq	%edx, %rdx
    00000395: 	movb	%cl, (%rbp,%rdx)
    00000399: 	leal	0xd(%rax), %edx
    0000039c: 	cmpl	%edx, %ebx
    0000039e: 	jle	.Ltmp1413 # Offset: 926
    000003a0: 	cvttsd2si	init_value(%rip), %ecx
    000003a8: 	movslq	%edx, %rdx
    000003ab: 	addl	$0xe, %eax
    000003ae: 	movb	%cl, (%rbp,%rdx)
    000003b2: 	cmpl	%eax, %ebx
    000003b4: 	jle	.Ltmp1413 # Offset: 948
    000003b6: 	cvttsd2si	init_value(%rip), %edx
    000003be: 	cltq
    000003c0: 	movb	%dl, (%rbp,%rax)
.Ltmp1413:
    000003c4: 	addl	$0x1, 0x8(%rsp)
    000003c9: 	movl	0x8(%rsp), %eax
    000003cd: 	cmpl	%eax, iterations(%rip)
    000003d3: 	jg	.Ltmp1416 # Offset: 979
    000003d9: 	movq	0x10(%rsp), %r12
.Ltmp1407:
    000003de: 	callq	clock@PLT # Offset: 990
    000003e3: 	pxor	%xmm0, %xmm0
    000003e7: 	movq	%r12, %rdi
    000003ea: 	movq	%rax, end_time(%rip)
    000003f1: 	subq	start_time(%rip), %rax
    000003f8: 	cvtsi2sd	%rax, %xmm0
    000003fd: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000405: 	callq	_Z13record_resultdPKc # Offset: 1029
    0000040a: 	testl	%ebx, %ebx
    0000040c: 	jle	.Ltmp1417 # Offset: 1036
    00000412: 	leal	-0x1(%rbx), %eax
    00000415: 	cmpl	$0xe, %eax
    00000418: 	jbe	.Ltmp1418 # Offset: 1048
    0000041e: 	movl	%ebx, %edx
    00000420: 	movq	%rbp, %rax
    00000423: 	pxor	%xmm0, %xmm0
    00000427: 	shrl	$0x4, %edx
    0000042a: 	subl	$0x1, %edx
    0000042d: 	shlq	$0x4, %rdx
    00000431: 	leaq	0x10(%rbp,%rdx), %rdx
.Ltmp1419:
    00000436: 	movdqu	(%rax), %xmm6
    0000043a: 	addq	$0x10, %rax
    0000043e: 	paddb	%xmm6, %xmm0
    00000442: 	cmpq	%rdx, %rax
    00000445: 	jne	.Ltmp1419 # Offset: 1093
    00000447: 	movdqa	%xmm0, %xmm1
    0000044b: 	movl	%ebx, %ecx
    0000044d: 	psrldq	$0x8, %xmm1
    00000452: 	andl	$-0x10, %ecx
    00000455: 	paddb	%xmm1, %xmm0
    00000459: 	pxor	%xmm1, %xmm1
    0000045d: 	movl	%ecx, %edx
    0000045f: 	psadbw	%xmm1, %xmm0
    00000463: 	movd	%xmm0, %eax
    00000467: 	cmpl	%ebx, %ecx
    00000469: 	je	.Ltmp1420 # Offset: 1129
.Ltmp1426:
    0000046f: 	movl	%ebx, %esi
    00000471: 	subl	%ecx, %esi
    00000473: 	leal	-0x1(%rsi), %edi
    00000476: 	cmpl	$0x6, %edi
    00000479: 	jbe	.Ltmp1421 # Offset: 1145
    0000047b: 	movq	(%rbp,%rcx), %xmm1
    00000481: 	pxor	%xmm0, %xmm0
    00000485: 	movdqa	%xmm1, %xmm5
    00000489: 	psadbw	%xmm0, %xmm5
    0000048d: 	movq	%xmm5, %rcx
    00000492: 	movq	%xmm5, 0x28(%rsp)
    00000498: 	movl	%ecx, %edi
    0000049a: 	movl	%esi, %ecx
    0000049c: 	andl	$-0x8, %ecx
    0000049f: 	addl	%edi, %eax
    000004a1: 	addl	%ecx, %edx
    000004a3: 	cmpl	%ecx, %esi
    000004a5: 	je	.Ltmp1420 # Offset: 1189
.Ltmp1421:
    000004a7: 	movslq	%edx, %rcx
    000004aa: 	addb	(%rbp,%rcx), %al
    000004ae: 	leal	0x1(%rdx), %ecx
    000004b1: 	cmpl	%ecx, %ebx
    000004b3: 	jle	.Ltmp1420 # Offset: 1203
    000004b5: 	movslq	%ecx, %rcx
    000004b8: 	addb	(%rbp,%rcx), %al
    000004bc: 	leal	0x2(%rdx), %ecx
    000004bf: 	cmpl	%ebx, %ecx
    000004c1: 	jge	.Ltmp1420 # Offset: 1217
    000004c3: 	movslq	%ecx, %rcx
    000004c6: 	addb	(%rbp,%rcx), %al
    000004ca: 	leal	0x3(%rdx), %ecx
    000004cd: 	cmpl	%ebx, %ecx
    000004cf: 	jge	.Ltmp1420 # Offset: 1231
    000004d1: 	movslq	%ecx, %rcx
    000004d4: 	addb	(%rbp,%rcx), %al
    000004d8: 	leal	0x4(%rdx), %ecx
    000004db: 	cmpl	%ebx, %ecx
    000004dd: 	jge	.Ltmp1420 # Offset: 1245
    000004df: 	movslq	%ecx, %rcx
    000004e2: 	addb	(%rbp,%rcx), %al
    000004e6: 	leal	0x5(%rdx), %ecx
    000004e9: 	cmpl	%ecx, %ebx
    000004eb: 	jle	.Ltmp1420 # Offset: 1259
    000004ed: 	movslq	%ecx, %rcx
    000004f0: 	addl	$0x6, %edx
    000004f3: 	addb	(%rbp,%rcx), %al
    000004f7: 	cmpl	%edx, %ebx
    000004f9: 	jle	.Ltmp1420 # Offset: 1273
    000004fb: 	movslq	%edx, %rdx
    000004fe: 	addb	(%rbp,%rdx), %al
.Ltmp1420:
    00000502: 	testb	%al, %al
    00000504: 	jne	.Ltmp1422 # Offset: 1284
.Ltmp1417:
    00000506: 	addq	$0x38, %rsp
    0000050a: 	popq	%rbx
    0000050b: 	popq	%rbp
    0000050c: 	popq	%r12
    0000050e: 	popq	%r13
    00000510: 	popq	%r14
    00000512: 	popq	%r15
    00000514: 	retq # Offset: 1300
.Ltmp1410:
    00000515: 	movq	%r8, %rax
    00000518: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1423:
    00000520: 	cvttsd2si	init_value(%rip), %ecx
    00000528: 	addq	$0x1, %rax
    0000052c: 	movb	%cl, -0x1(%rax)
    0000052f: 	cmpq	%rax, %rdx
    00000532: 	jne	.Ltmp1423 # Offset: 1330
    00000534: 	jmp	.Ltmp1424 # Offset: 1332
.Ltmp1414:
    00000539: 	leal	-0x1(%rbx), %ecx
    0000053c: 	leaq	0x1(%rbp,%r8), %rdx
    00000541: 	movq	%rdi, %rax
    00000544: 	subl	%r15d, %ecx
    00000547: 	addq	%rcx, %rdx
.Ltmp1425:
    0000054a: 	cvttsd2si	init_value(%rip), %ecx
    00000552: 	addq	$0x1, %rax
    00000556: 	movb	%cl, -0x1(%rax)
    00000559: 	cmpq	%rdx, %rax
    0000055c: 	jne	.Ltmp1425 # Offset: 1372
    0000055e: 	jmp	.Ltmp1413 # Offset: 1374
.Ltmp1422:
    00000563: 	addq	$0x38, %rsp
    00000567: 	movq	%r12, %rsi
    0000056a: 	movzbl	%al, %edi
    0000056d: 	popq	%rbx
    0000056e: 	popq	%rbp
    0000056f: 	popq	%r12
    00000571: 	popq	%r13
    00000573: 	popq	%r14
    00000575: 	popq	%r15
    00000577: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1399
.Ltmp1418:
    0000057c: 	xorl	%ecx, %ecx
    0000057e: 	xorl	%eax, %eax
    00000580: 	xorl	%edx, %edx
    00000582: 	jmp	.Ltmp1426 # Offset: 1410
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace4IhEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace2IhEvPT_iPKc" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x21900
  Size        : 0x5a1
  MaxSize     : 0x5b0
  Offset      : 0x21900
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xc8, %rsp
    0000001b: 	movq	%rdx, 0x80(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1427 # Offset: 55
    0000003d: 	movl	%r14d, %eax
    00000040: 	leaq	init_value(%rip), %rdx
    00000047: 	leal	-0x1(%r14), %ebp
    0000004b: 	movslq	%r14d, %rbx
    0000004e: 	addq	%r15, %rax
    00000051: 	cmpq	%rdx, %rax
    00000054: 	setbe	%al
    00000057: 	addq	$0x8, %rdx
    0000005b: 	cmpq	%rdx, %r15
    0000005e: 	setae	%dl
    00000061: 	orb	%dl, %al
    00000063: 	je	.Ltmp1428 # Offset: 99
    00000069: 	cmpl	$0xe, %ebp
    0000006c: 	jbe	.Ltmp1428 # Offset: 108
    00000072: 	movl	%r14d, %eax
    00000075: 	movl	%r14d, %r13d
    00000078: 	movq	%r15, %rdi
    0000007b: 	shrl	$0x4, %eax
    0000007e: 	andl	$-0x10, %r13d
    00000082: 	subl	$0x1, %eax
    00000085: 	shlq	$0x4, %rax
    00000089: 	leaq	0x10(%r15,%rax), %rbp
    0000008e: 	movslq	%r13d, %rax
    00000091: 	leaq	(%r15,%rax), %rcx
    00000095: 	leal	0x1(%r13), %eax
    00000099: 	movslq	%eax, %r12
    0000009c: 	movl	%eax, 0x10(%rsp)
    000000a0: 	leaq	(%r15,%r12), %rax
    000000a4: 	xorl	%r12d, %r12d
    000000a7: 	movq	%rax, 0x8(%rsp)
    000000ac: 	leal	0x2(%r13), %eax
    000000b0: 	movl	%eax, 0x14(%rsp)
    000000b4: 	cltq
    000000b6: 	addq	%r15, %rax
    000000b9: 	movq	%rax, 0x18(%rsp)
    000000be: 	leal	0x3(%r13), %eax
    000000c2: 	movl	%eax, 0x28(%rsp)
    000000c6: 	cltq
    000000c8: 	addq	%r15, %rax
    000000cb: 	movq	%rax, 0x20(%rsp)
    000000d0: 	leal	0x4(%r13), %eax
    000000d4: 	movl	%eax, 0x2c(%rsp)
    000000d8: 	cltq
    000000da: 	addq	%r15, %rax
    000000dd: 	movq	%rax, 0x30(%rsp)
    000000e2: 	leal	0x5(%r13), %eax
    000000e6: 	movl	%eax, 0x40(%rsp)
    000000ea: 	cltq
    000000ec: 	addq	%r15, %rax
    000000ef: 	movq	%rax, 0x38(%rsp)
    000000f4: 	leal	0x6(%r13), %eax
    000000f8: 	movl	%eax, 0x44(%rsp)
    000000fc: 	cltq
    000000fe: 	addq	%r15, %rax
    00000101: 	movq	%rax, 0x48(%rsp)
    00000106: 	leal	0x7(%r13), %eax
    0000010a: 	movl	%eax, 0x58(%rsp)
    0000010e: 	cltq
    00000110: 	addq	%r15, %rax
    00000113: 	movq	%rax, 0x50(%rsp)
    00000118: 	leal	0x8(%r13), %eax
    0000011c: 	movl	%eax, 0x5c(%rsp)
    00000120: 	cltq
    00000122: 	addq	%r15, %rax
    00000125: 	movq	%rax, 0x60(%rsp)
    0000012a: 	leal	0x9(%r13), %eax
    0000012e: 	movl	%eax, 0x70(%rsp)
    00000132: 	cltq
    00000134: 	addq	%r15, %rax
    00000137: 	movq	%rax, 0x68(%rsp)
    0000013c: 	leal	0xa(%r13), %eax
    00000140: 	movl	%eax, 0x74(%rsp)
    00000144: 	cltq
    00000146: 	addq	%r15, %rax
    00000149: 	movq	%rax, 0x78(%rsp)
    0000014e: 	leal	0xb(%r13), %eax
    00000152: 	movl	%eax, 0x90(%rsp)
    00000159: 	cltq
    0000015b: 	addq	%r15, %rax
    0000015e: 	movq	%rax, 0x88(%rsp)
    00000166: 	leal	0xc(%r13), %eax
    0000016a: 	movl	%eax, 0x94(%rsp)
    00000171: 	cltq
    00000173: 	addq	%r15, %rax
    00000176: 	movq	%rax, 0x98(%rsp)
    0000017e: 	leal	0xd(%r13), %eax
    00000182: 	movl	%eax, 0xa8(%rsp)
    00000189: 	cltq
    0000018b: 	addq	%r15, %rax
    0000018e: 	movq	%rax, 0xa0(%rsp)
    00000196: 	leal	0xe(%r13), %eax
    0000019a: 	movl	%eax, 0xac(%rsp)
    000001a1: 	cltq
    000001a3: 	addq	%r15, %rax
    000001a6: 	movl	%r12d, %r15d
    000001a9: 	movq	%rbp, %r12
    000001ac: 	movq	%rcx, %rbp
    000001af: 	movq	%rax, 0xb0(%rsp)
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1431:
    000001c0: 	xorl	%esi, %esi
    000001c2: 	movq	%rbx, %rdx
    000001c5: 	callq	memset@PLT # Offset: 453
    000001ca: 	testl	%r14d, %r14d
    000001cd: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000001d5: 	movq	%rax, %rdi
    000001d8: 	jle	.Ltmp1429 # Offset: 472
    000001de: 	movsd	init_value(%rip), %xmm1
    000001e6: 	unpcklpd	%xmm1, %xmm1
    000001ea: 	cvttpd2dq	%xmm1, %xmm1
    000001ee: 	punpcklqdq	%xmm1, %xmm1
    000001f2: 	movdqa	%xmm1, %xmm2
    000001f6: 	punpckhwd	%xmm1, %xmm2
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1430:
    00000200: 	movdqa	%xmm1, %xmm0
    00000204: 	addq	$0x10, %rax
    00000208: 	punpcklwd	%xmm1, %xmm0
    0000020c: 	movdqa	%xmm0, %xmm3
    00000210: 	punpcklwd	%xmm2, %xmm0
    00000214: 	punpckhwd	%xmm2, %xmm3
    00000218: 	punpcklwd	%xmm3, %xmm0
    0000021c: 	pand	%xmm4, %xmm0
    00000220: 	packuswb	%xmm0, %xmm0
    00000224: 	movups	%xmm0, -0x10(%rax)
    00000228: 	cmpq	%r12, %rax
    0000022b: 	jne	.Ltmp1430 # Offset: 555
    0000022d: 	cmpl	%r13d, %r14d
    00000230: 	je	.Ltmp1429 # Offset: 560
    00000236: 	cvttsd2si	init_value(%rip), %eax
    0000023e: 	movb	%al, (%rbp)
    00000241: 	cmpl	0x10(%rsp), %r14d
    00000246: 	jle	.Ltmp1429 # Offset: 582
    0000024c: 	cvttsd2si	init_value(%rip), %eax
    00000254: 	movq	0x8(%rsp), %rcx
    00000259: 	movb	%al, (%rcx)
    0000025b: 	cmpl	0x14(%rsp), %r14d
    00000260: 	jle	.Ltmp1429 # Offset: 608
    00000266: 	cvttsd2si	init_value(%rip), %eax
    0000026e: 	movq	0x18(%rsp), %rcx
    00000273: 	movb	%al, (%rcx)
    00000275: 	cmpl	0x28(%rsp), %r14d
    0000027a: 	jle	.Ltmp1429 # Offset: 634
    00000280: 	cvttsd2si	init_value(%rip), %eax
    00000288: 	movq	0x20(%rsp), %rcx
    0000028d: 	movb	%al, (%rcx)
    0000028f: 	cmpl	0x2c(%rsp), %r14d
    00000294: 	jle	.Ltmp1429 # Offset: 660
    0000029a: 	cvttsd2si	init_value(%rip), %eax
    000002a2: 	movq	0x30(%rsp), %rsi
    000002a7: 	movb	%al, (%rsi)
    000002a9: 	cmpl	0x40(%rsp), %r14d
    000002ae: 	jle	.Ltmp1429 # Offset: 686
    000002b4: 	cvttsd2si	init_value(%rip), %eax
    000002bc: 	movq	0x38(%rsp), %rcx
    000002c1: 	movb	%al, (%rcx)
    000002c3: 	cmpl	0x44(%rsp), %r14d
    000002c8: 	jle	.Ltmp1429 # Offset: 712
    000002ce: 	cvttsd2si	init_value(%rip), %eax
    000002d6: 	movq	0x48(%rsp), %rcx
    000002db: 	movb	%al, (%rcx)
    000002dd: 	cmpl	0x58(%rsp), %r14d
    000002e2: 	jle	.Ltmp1429 # Offset: 738
    000002e8: 	cvttsd2si	init_value(%rip), %eax
    000002f0: 	movq	0x50(%rsp), %rsi
    000002f5: 	movb	%al, (%rsi)
    000002f7: 	cmpl	0x5c(%rsp), %r14d
    000002fc: 	jle	.Ltmp1429 # Offset: 764
    00000302: 	cvttsd2si	init_value(%rip), %eax
    0000030a: 	movq	0x60(%rsp), %rcx
    0000030f: 	movb	%al, (%rcx)
    00000311: 	cmpl	0x70(%rsp), %r14d
    00000316: 	jle	.Ltmp1429 # Offset: 790
    0000031c: 	cvttsd2si	init_value(%rip), %eax
    00000324: 	movq	0x68(%rsp), %rcx
    00000329: 	movb	%al, (%rcx)
    0000032b: 	cmpl	0x74(%rsp), %r14d
    00000330: 	jle	.Ltmp1429 # Offset: 816
    00000336: 	cvttsd2si	init_value(%rip), %eax
    0000033e: 	movq	0x78(%rsp), %rsi
    00000343: 	movb	%al, (%rsi)
    00000345: 	cmpl	0x90(%rsp), %r14d
    0000034d: 	jle	.Ltmp1429 # Offset: 845
    0000034f: 	cvttsd2si	init_value(%rip), %eax
    00000357: 	movq	0x88(%rsp), %rsi
    0000035f: 	movb	%al, (%rsi)
    00000361: 	cmpl	0x94(%rsp), %r14d
    00000369: 	jle	.Ltmp1429 # Offset: 873
    0000036b: 	cvttsd2si	init_value(%rip), %eax
    00000373: 	movq	0x98(%rsp), %rdx
    0000037b: 	movb	%al, (%rdx)
    0000037d: 	cmpl	0xa8(%rsp), %r14d
    00000385: 	jle	.Ltmp1429 # Offset: 901
    00000387: 	cvttsd2si	init_value(%rip), %eax
    0000038f: 	movq	0xa0(%rsp), %rcx
    00000397: 	movb	%al, (%rcx)
    00000399: 	cmpl	0xac(%rsp), %r14d
    000003a1: 	jle	.Ltmp1429 # Offset: 929
    000003a3: 	cvttsd2si	init_value(%rip), %eax
    000003ab: 	movq	0xb0(%rsp), %rcx
    000003b3: 	movb	%al, (%rcx)
    000003b5: 	nopl	(%rax) # Size: 3
.Ltmp1429:
    000003b8: 	addl	$0x1, %r15d
    000003bc: 	cmpl	%r15d, iterations(%rip)
    000003c3: 	jg	.Ltmp1431 # Offset: 963
    000003c9: 	movq	%rdi, %r15
.Ltmp1427:
    000003cc: 	callq	clock@PLT # Offset: 972
    000003d1: 	movq	0x80(%rsp), %rdi
    000003d9: 	pxor	%xmm0, %xmm0
    000003dd: 	movq	%rax, end_time(%rip)
    000003e4: 	subq	start_time(%rip), %rax
    000003eb: 	cvtsi2sd	%rax, %xmm0
    000003f0: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003f8: 	callq	_Z13record_resultdPKc # Offset: 1016
    000003fd: 	testl	%r14d, %r14d
    00000400: 	jle	.Ltmp1432 # Offset: 1024
    00000406: 	leal	-0x1(%r14), %eax
    0000040a: 	cmpl	$0xe, %eax
    0000040d: 	jbe	.Ltmp1433 # Offset: 1037
    00000413: 	movl	%r14d, %edx
    00000416: 	movq	%r15, %rax
    00000419: 	pxor	%xmm0, %xmm0
    0000041d: 	shrl	$0x4, %edx
    00000420: 	subl	$0x1, %edx
    00000423: 	shlq	$0x4, %rdx
    00000427: 	leaq	0x10(%r15,%rdx), %rdx
    0000042c: 	nopl	(%rax) # Size: 4
.Ltmp1434:
    00000430: 	movdqu	(%rax), %xmm5
    00000434: 	addq	$0x10, %rax
    00000438: 	paddb	%xmm5, %xmm0
    0000043c: 	cmpq	%rax, %rdx
    0000043f: 	jne	.Ltmp1434 # Offset: 1087
    00000441: 	movdqa	%xmm0, %xmm1
    00000445: 	movl	%r14d, %esi
    00000448: 	psrldq	$0x8, %xmm1
    0000044d: 	andl	$-0x10, %esi
    00000450: 	paddb	%xmm1, %xmm0
    00000454: 	pxor	%xmm1, %xmm1
    00000458: 	movl	%esi, %edx
    0000045a: 	psadbw	%xmm1, %xmm0
    0000045e: 	movd	%xmm0, %eax
    00000462: 	cmpl	%r14d, %esi
    00000465: 	je	.Ltmp1435 # Offset: 1125
.Ltmp1441:
    0000046b: 	movl	%r14d, %edi
    0000046e: 	subl	%esi, %edi
    00000470: 	leal	-0x1(%rdi), %r9d
    00000474: 	cmpl	$0x6, %r9d
    00000478: 	jbe	.Ltmp1436 # Offset: 1144
    0000047a: 	movq	(%r15,%rsi), %xmm1
    00000480: 	pxor	%xmm0, %xmm0
    00000484: 	movdqa	%xmm1, %xmm6
    00000488: 	psadbw	%xmm0, %xmm6
    0000048c: 	movq	%xmm6, 0xb8(%rsp)
    00000495: 	movq	%xmm6, %rsi
    0000049a: 	movl	%esi, %r9d
    0000049d: 	movl	%edi, %esi
    0000049f: 	andl	$-0x8, %esi
    000004a2: 	addl	%r9d, %eax
    000004a5: 	addl	%esi, %edx
    000004a7: 	cmpl	%esi, %edi
    000004a9: 	je	.Ltmp1435 # Offset: 1193
.Ltmp1436:
    000004ab: 	movslq	%edx, %rsi
    000004ae: 	addb	(%r15,%rsi), %al
    000004b2: 	leal	0x1(%rdx), %esi
    000004b5: 	cmpl	%esi, %r14d
    000004b8: 	jle	.Ltmp1435 # Offset: 1208
    000004ba: 	movslq	%esi, %rsi
    000004bd: 	addb	(%r15,%rsi), %al
    000004c1: 	leal	0x2(%rdx), %esi
    000004c4: 	cmpl	%esi, %r14d
    000004c7: 	jle	.Ltmp1435 # Offset: 1223
    000004c9: 	movslq	%esi, %rsi
    000004cc: 	addb	(%r15,%rsi), %al
    000004d0: 	leal	0x3(%rdx), %esi
    000004d3: 	cmpl	%esi, %r14d
    000004d6: 	jle	.Ltmp1435 # Offset: 1238
    000004d8: 	movslq	%esi, %rsi
    000004db: 	addb	(%r15,%rsi), %al
    000004df: 	leal	0x4(%rdx), %esi
    000004e2: 	cmpl	%esi, %r14d
    000004e5: 	jle	.Ltmp1435 # Offset: 1253
    000004e7: 	movslq	%esi, %rsi
    000004ea: 	addb	(%r15,%rsi), %al
    000004ee: 	leal	0x5(%rdx), %esi
    000004f1: 	cmpl	%esi, %r14d
    000004f4: 	jle	.Ltmp1435 # Offset: 1268
    000004f6: 	movslq	%esi, %rsi
    000004f9: 	addl	$0x6, %edx
    000004fc: 	addb	(%r15,%rsi), %al
    00000500: 	cmpl	%edx, %r14d
    00000503: 	jle	.Ltmp1435 # Offset: 1283
    00000505: 	movslq	%edx, %rdx
    00000508: 	addb	(%r15,%rdx), %al
.Ltmp1435:
    0000050c: 	testb	%al, %al
    0000050e: 	jne	.Ltmp1437 # Offset: 1294
.Ltmp1432:
    00000510: 	addq	$0xc8, %rsp
    00000517: 	popq	%rbx
    00000518: 	popq	%rbp
    00000519: 	popq	%r12
    0000051b: 	popq	%r13
    0000051d: 	popq	%r14
    0000051f: 	popq	%r15
    00000521: 	retq # Offset: 1313
.Ltmp1437:
    00000522: 	movq	0x80(%rsp), %rsi
    0000052a: 	addq	$0xc8, %rsp
    00000531: 	movzbl	%al, %edi
    00000534: 	popq	%rbx
    00000535: 	popq	%rbp
    00000536: 	popq	%r12
    00000538: 	popq	%r13
    0000053a: 	popq	%r14
    0000053c: 	popq	%r15
    0000053e: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1342
.Ltmp1428:
    00000543: 	xorl	%r13d, %r13d
    00000546: 	leaq	0x1(%r15), %r12
    0000054a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1440:
    00000550: 	xorl	%esi, %esi
    00000552: 	movq	%rbx, %rdx
    00000555: 	movq	%r15, %rdi
    00000558: 	callq	memset@PLT # Offset: 1368
    0000055d: 	testl	%r14d, %r14d
    00000560: 	jle	.Ltmp1438 # Offset: 1376
    00000562: 	movl	%ebp, %ecx
    00000564: 	addq	%r12, %rcx
    00000567: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1439:
    00000570: 	cvttsd2si	init_value(%rip), %edx
    00000578: 	addq	$0x1, %rax
    0000057c: 	movb	%dl, -0x1(%rax)
    0000057f: 	cmpq	%rcx, %rax
    00000582: 	jne	.Ltmp1439 # Offset: 1410
.Ltmp1438:
    00000584: 	addl	$0x1, %r13d
    00000588: 	cmpl	iterations(%rip), %r13d
    0000058f: 	jl	.Ltmp1440 # Offset: 1423
    00000591: 	jmp	.Ltmp1427 # Offset: 1425
.Ltmp1433:
    00000596: 	xorl	%esi, %esi
    00000598: 	xorl	%eax, %eax
    0000059a: 	xorl	%edx, %edx
    0000059c: 	jmp	.Ltmp1441 # Offset: 1436
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace2IhEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace2IhEvPT_iPKc" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x21eb0
  Size        : 0x5a1
  MaxSize     : 0x5b0
  Offset      : 0x21eb0
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xc8, %rsp
    0000001b: 	movq	%rdx, 0x80(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1442 # Offset: 55
    0000003d: 	movl	%r14d, %eax
    00000040: 	leaq	init_value(%rip), %rdx
    00000047: 	leal	-0x1(%r14), %ebp
    0000004b: 	movslq	%r14d, %rbx
    0000004e: 	addq	%r15, %rax
    00000051: 	cmpq	%rdx, %rax
    00000054: 	setbe	%al
    00000057: 	addq	$0x8, %rdx
    0000005b: 	cmpq	%rdx, %r15
    0000005e: 	setae	%dl
    00000061: 	orb	%dl, %al
    00000063: 	je	.Ltmp1443 # Offset: 99
    00000069: 	cmpl	$0xe, %ebp
    0000006c: 	jbe	.Ltmp1443 # Offset: 108
    00000072: 	movl	%r14d, %eax
    00000075: 	movl	%r14d, %r13d
    00000078: 	movq	%r15, %rdi
    0000007b: 	shrl	$0x4, %eax
    0000007e: 	andl	$-0x10, %r13d
    00000082: 	subl	$0x1, %eax
    00000085: 	shlq	$0x4, %rax
    00000089: 	leaq	0x10(%r15,%rax), %rbp
    0000008e: 	movslq	%r13d, %rax
    00000091: 	leaq	(%r15,%rax), %rcx
    00000095: 	leal	0x1(%r13), %eax
    00000099: 	movslq	%eax, %r12
    0000009c: 	movl	%eax, 0x10(%rsp)
    000000a0: 	leaq	(%r15,%r12), %rax
    000000a4: 	xorl	%r12d, %r12d
    000000a7: 	movq	%rax, 0x8(%rsp)
    000000ac: 	leal	0x2(%r13), %eax
    000000b0: 	movl	%eax, 0x14(%rsp)
    000000b4: 	cltq
    000000b6: 	addq	%r15, %rax
    000000b9: 	movq	%rax, 0x18(%rsp)
    000000be: 	leal	0x3(%r13), %eax
    000000c2: 	movl	%eax, 0x28(%rsp)
    000000c6: 	cltq
    000000c8: 	addq	%r15, %rax
    000000cb: 	movq	%rax, 0x20(%rsp)
    000000d0: 	leal	0x4(%r13), %eax
    000000d4: 	movl	%eax, 0x2c(%rsp)
    000000d8: 	cltq
    000000da: 	addq	%r15, %rax
    000000dd: 	movq	%rax, 0x30(%rsp)
    000000e2: 	leal	0x5(%r13), %eax
    000000e6: 	movl	%eax, 0x40(%rsp)
    000000ea: 	cltq
    000000ec: 	addq	%r15, %rax
    000000ef: 	movq	%rax, 0x38(%rsp)
    000000f4: 	leal	0x6(%r13), %eax
    000000f8: 	movl	%eax, 0x44(%rsp)
    000000fc: 	cltq
    000000fe: 	addq	%r15, %rax
    00000101: 	movq	%rax, 0x48(%rsp)
    00000106: 	leal	0x7(%r13), %eax
    0000010a: 	movl	%eax, 0x58(%rsp)
    0000010e: 	cltq
    00000110: 	addq	%r15, %rax
    00000113: 	movq	%rax, 0x50(%rsp)
    00000118: 	leal	0x8(%r13), %eax
    0000011c: 	movl	%eax, 0x5c(%rsp)
    00000120: 	cltq
    00000122: 	addq	%r15, %rax
    00000125: 	movq	%rax, 0x60(%rsp)
    0000012a: 	leal	0x9(%r13), %eax
    0000012e: 	movl	%eax, 0x70(%rsp)
    00000132: 	cltq
    00000134: 	addq	%r15, %rax
    00000137: 	movq	%rax, 0x68(%rsp)
    0000013c: 	leal	0xa(%r13), %eax
    00000140: 	movl	%eax, 0x74(%rsp)
    00000144: 	cltq
    00000146: 	addq	%r15, %rax
    00000149: 	movq	%rax, 0x78(%rsp)
    0000014e: 	leal	0xb(%r13), %eax
    00000152: 	movl	%eax, 0x90(%rsp)
    00000159: 	cltq
    0000015b: 	addq	%r15, %rax
    0000015e: 	movq	%rax, 0x88(%rsp)
    00000166: 	leal	0xc(%r13), %eax
    0000016a: 	movl	%eax, 0x94(%rsp)
    00000171: 	cltq
    00000173: 	addq	%r15, %rax
    00000176: 	movq	%rax, 0x98(%rsp)
    0000017e: 	leal	0xd(%r13), %eax
    00000182: 	movl	%eax, 0xa8(%rsp)
    00000189: 	cltq
    0000018b: 	addq	%r15, %rax
    0000018e: 	movq	%rax, 0xa0(%rsp)
    00000196: 	leal	0xe(%r13), %eax
    0000019a: 	movl	%eax, 0xac(%rsp)
    000001a1: 	cltq
    000001a3: 	addq	%r15, %rax
    000001a6: 	movl	%r12d, %r15d
    000001a9: 	movq	%rbp, %r12
    000001ac: 	movq	%rcx, %rbp
    000001af: 	movq	%rax, 0xb0(%rsp)
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1446:
    000001c0: 	xorl	%esi, %esi
    000001c2: 	movq	%rbx, %rdx
    000001c5: 	callq	memset@PLT # Offset: 453
    000001ca: 	testl	%r14d, %r14d
    000001cd: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000001d5: 	movq	%rax, %rdi
    000001d8: 	jle	.Ltmp1444 # Offset: 472
    000001de: 	movsd	init_value(%rip), %xmm1
    000001e6: 	unpcklpd	%xmm1, %xmm1
    000001ea: 	cvttpd2dq	%xmm1, %xmm1
    000001ee: 	punpcklqdq	%xmm1, %xmm1
    000001f2: 	movdqa	%xmm1, %xmm2
    000001f6: 	punpckhwd	%xmm1, %xmm2
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1445:
    00000200: 	movdqa	%xmm1, %xmm0
    00000204: 	addq	$0x10, %rax
    00000208: 	punpcklwd	%xmm1, %xmm0
    0000020c: 	movdqa	%xmm0, %xmm3
    00000210: 	punpcklwd	%xmm2, %xmm0
    00000214: 	punpckhwd	%xmm2, %xmm3
    00000218: 	punpcklwd	%xmm3, %xmm0
    0000021c: 	pand	%xmm4, %xmm0
    00000220: 	packuswb	%xmm0, %xmm0
    00000224: 	movups	%xmm0, -0x10(%rax)
    00000228: 	cmpq	%r12, %rax
    0000022b: 	jne	.Ltmp1445 # Offset: 555
    0000022d: 	cmpl	%r13d, %r14d
    00000230: 	je	.Ltmp1444 # Offset: 560
    00000236: 	cvttsd2si	init_value(%rip), %eax
    0000023e: 	movb	%al, (%rbp)
    00000241: 	cmpl	0x10(%rsp), %r14d
    00000246: 	jle	.Ltmp1444 # Offset: 582
    0000024c: 	cvttsd2si	init_value(%rip), %eax
    00000254: 	movq	0x8(%rsp), %rcx
    00000259: 	movb	%al, (%rcx)
    0000025b: 	cmpl	0x14(%rsp), %r14d
    00000260: 	jle	.Ltmp1444 # Offset: 608
    00000266: 	cvttsd2si	init_value(%rip), %eax
    0000026e: 	movq	0x18(%rsp), %rcx
    00000273: 	movb	%al, (%rcx)
    00000275: 	cmpl	0x28(%rsp), %r14d
    0000027a: 	jle	.Ltmp1444 # Offset: 634
    00000280: 	cvttsd2si	init_value(%rip), %eax
    00000288: 	movq	0x20(%rsp), %rcx
    0000028d: 	movb	%al, (%rcx)
    0000028f: 	cmpl	0x2c(%rsp), %r14d
    00000294: 	jle	.Ltmp1444 # Offset: 660
    0000029a: 	cvttsd2si	init_value(%rip), %eax
    000002a2: 	movq	0x30(%rsp), %rsi
    000002a7: 	movb	%al, (%rsi)
    000002a9: 	cmpl	0x40(%rsp), %r14d
    000002ae: 	jle	.Ltmp1444 # Offset: 686
    000002b4: 	cvttsd2si	init_value(%rip), %eax
    000002bc: 	movq	0x38(%rsp), %rcx
    000002c1: 	movb	%al, (%rcx)
    000002c3: 	cmpl	0x44(%rsp), %r14d
    000002c8: 	jle	.Ltmp1444 # Offset: 712
    000002ce: 	cvttsd2si	init_value(%rip), %eax
    000002d6: 	movq	0x48(%rsp), %rcx
    000002db: 	movb	%al, (%rcx)
    000002dd: 	cmpl	0x58(%rsp), %r14d
    000002e2: 	jle	.Ltmp1444 # Offset: 738
    000002e8: 	cvttsd2si	init_value(%rip), %eax
    000002f0: 	movq	0x50(%rsp), %rsi
    000002f5: 	movb	%al, (%rsi)
    000002f7: 	cmpl	0x5c(%rsp), %r14d
    000002fc: 	jle	.Ltmp1444 # Offset: 764
    00000302: 	cvttsd2si	init_value(%rip), %eax
    0000030a: 	movq	0x60(%rsp), %rcx
    0000030f: 	movb	%al, (%rcx)
    00000311: 	cmpl	0x70(%rsp), %r14d
    00000316: 	jle	.Ltmp1444 # Offset: 790
    0000031c: 	cvttsd2si	init_value(%rip), %eax
    00000324: 	movq	0x68(%rsp), %rcx
    00000329: 	movb	%al, (%rcx)
    0000032b: 	cmpl	0x74(%rsp), %r14d
    00000330: 	jle	.Ltmp1444 # Offset: 816
    00000336: 	cvttsd2si	init_value(%rip), %eax
    0000033e: 	movq	0x78(%rsp), %rsi
    00000343: 	movb	%al, (%rsi)
    00000345: 	cmpl	0x90(%rsp), %r14d
    0000034d: 	jle	.Ltmp1444 # Offset: 845
    0000034f: 	cvttsd2si	init_value(%rip), %eax
    00000357: 	movq	0x88(%rsp), %rsi
    0000035f: 	movb	%al, (%rsi)
    00000361: 	cmpl	0x94(%rsp), %r14d
    00000369: 	jle	.Ltmp1444 # Offset: 873
    0000036b: 	cvttsd2si	init_value(%rip), %eax
    00000373: 	movq	0x98(%rsp), %rdx
    0000037b: 	movb	%al, (%rdx)
    0000037d: 	cmpl	0xa8(%rsp), %r14d
    00000385: 	jle	.Ltmp1444 # Offset: 901
    00000387: 	cvttsd2si	init_value(%rip), %eax
    0000038f: 	movq	0xa0(%rsp), %rcx
    00000397: 	movb	%al, (%rcx)
    00000399: 	cmpl	0xac(%rsp), %r14d
    000003a1: 	jle	.Ltmp1444 # Offset: 929
    000003a3: 	cvttsd2si	init_value(%rip), %eax
    000003ab: 	movq	0xb0(%rsp), %rcx
    000003b3: 	movb	%al, (%rcx)
    000003b5: 	nopl	(%rax) # Size: 3
.Ltmp1444:
    000003b8: 	addl	$0x1, %r15d
    000003bc: 	cmpl	%r15d, iterations(%rip)
    000003c3: 	jg	.Ltmp1446 # Offset: 963
    000003c9: 	movq	%rdi, %r15
.Ltmp1442:
    000003cc: 	callq	clock@PLT # Offset: 972
    000003d1: 	movq	0x80(%rsp), %rdi
    000003d9: 	pxor	%xmm0, %xmm0
    000003dd: 	movq	%rax, end_time(%rip)
    000003e4: 	subq	start_time(%rip), %rax
    000003eb: 	cvtsi2sd	%rax, %xmm0
    000003f0: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003f8: 	callq	_Z13record_resultdPKc # Offset: 1016
    000003fd: 	testl	%r14d, %r14d
    00000400: 	jle	.Ltmp1447 # Offset: 1024
    00000406: 	leal	-0x1(%r14), %eax
    0000040a: 	cmpl	$0xe, %eax
    0000040d: 	jbe	.Ltmp1448 # Offset: 1037
    00000413: 	movl	%r14d, %edx
    00000416: 	movq	%r15, %rax
    00000419: 	pxor	%xmm0, %xmm0
    0000041d: 	shrl	$0x4, %edx
    00000420: 	subl	$0x1, %edx
    00000423: 	shlq	$0x4, %rdx
    00000427: 	leaq	0x10(%r15,%rdx), %rdx
    0000042c: 	nopl	(%rax) # Size: 4
.Ltmp1449:
    00000430: 	movdqu	(%rax), %xmm5
    00000434: 	addq	$0x10, %rax
    00000438: 	paddb	%xmm5, %xmm0
    0000043c: 	cmpq	%rax, %rdx
    0000043f: 	jne	.Ltmp1449 # Offset: 1087
    00000441: 	movdqa	%xmm0, %xmm1
    00000445: 	movl	%r14d, %esi
    00000448: 	psrldq	$0x8, %xmm1
    0000044d: 	andl	$-0x10, %esi
    00000450: 	paddb	%xmm1, %xmm0
    00000454: 	pxor	%xmm1, %xmm1
    00000458: 	movl	%esi, %edx
    0000045a: 	psadbw	%xmm1, %xmm0
    0000045e: 	movd	%xmm0, %eax
    00000462: 	cmpl	%r14d, %esi
    00000465: 	je	.Ltmp1450 # Offset: 1125
.Ltmp1456:
    0000046b: 	movl	%r14d, %edi
    0000046e: 	subl	%esi, %edi
    00000470: 	leal	-0x1(%rdi), %r9d
    00000474: 	cmpl	$0x6, %r9d
    00000478: 	jbe	.Ltmp1451 # Offset: 1144
    0000047a: 	movq	(%r15,%rsi), %xmm1
    00000480: 	pxor	%xmm0, %xmm0
    00000484: 	movdqa	%xmm1, %xmm6
    00000488: 	psadbw	%xmm0, %xmm6
    0000048c: 	movq	%xmm6, 0xb8(%rsp)
    00000495: 	movq	%xmm6, %rsi
    0000049a: 	movl	%esi, %r9d
    0000049d: 	movl	%edi, %esi
    0000049f: 	andl	$-0x8, %esi
    000004a2: 	addl	%r9d, %eax
    000004a5: 	addl	%esi, %edx
    000004a7: 	cmpl	%esi, %edi
    000004a9: 	je	.Ltmp1450 # Offset: 1193
.Ltmp1451:
    000004ab: 	movslq	%edx, %rsi
    000004ae: 	addb	(%r15,%rsi), %al
    000004b2: 	leal	0x1(%rdx), %esi
    000004b5: 	cmpl	%esi, %r14d
    000004b8: 	jle	.Ltmp1450 # Offset: 1208
    000004ba: 	movslq	%esi, %rsi
    000004bd: 	addb	(%r15,%rsi), %al
    000004c1: 	leal	0x2(%rdx), %esi
    000004c4: 	cmpl	%esi, %r14d
    000004c7: 	jle	.Ltmp1450 # Offset: 1223
    000004c9: 	movslq	%esi, %rsi
    000004cc: 	addb	(%r15,%rsi), %al
    000004d0: 	leal	0x3(%rdx), %esi
    000004d3: 	cmpl	%esi, %r14d
    000004d6: 	jle	.Ltmp1450 # Offset: 1238
    000004d8: 	movslq	%esi, %rsi
    000004db: 	addb	(%r15,%rsi), %al
    000004df: 	leal	0x4(%rdx), %esi
    000004e2: 	cmpl	%esi, %r14d
    000004e5: 	jle	.Ltmp1450 # Offset: 1253
    000004e7: 	movslq	%esi, %rsi
    000004ea: 	addb	(%r15,%rsi), %al
    000004ee: 	leal	0x5(%rdx), %esi
    000004f1: 	cmpl	%esi, %r14d
    000004f4: 	jle	.Ltmp1450 # Offset: 1268
    000004f6: 	movslq	%esi, %rsi
    000004f9: 	addl	$0x6, %edx
    000004fc: 	addb	(%r15,%rsi), %al
    00000500: 	cmpl	%edx, %r14d
    00000503: 	jle	.Ltmp1450 # Offset: 1283
    00000505: 	movslq	%edx, %rdx
    00000508: 	addb	(%r15,%rdx), %al
.Ltmp1450:
    0000050c: 	testb	%al, %al
    0000050e: 	jne	.Ltmp1452 # Offset: 1294
.Ltmp1447:
    00000510: 	addq	$0xc8, %rsp
    00000517: 	popq	%rbx
    00000518: 	popq	%rbp
    00000519: 	popq	%r12
    0000051b: 	popq	%r13
    0000051d: 	popq	%r14
    0000051f: 	popq	%r15
    00000521: 	retq # Offset: 1313
.Ltmp1452:
    00000522: 	movq	0x80(%rsp), %rsi
    0000052a: 	addq	$0xc8, %rsp
    00000531: 	movzbl	%al, %edi
    00000534: 	popq	%rbx
    00000535: 	popq	%rbp
    00000536: 	popq	%r12
    00000538: 	popq	%r13
    0000053a: 	popq	%r14
    0000053c: 	popq	%r15
    0000053e: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1342
.Ltmp1443:
    00000543: 	xorl	%r13d, %r13d
    00000546: 	leaq	0x1(%r15), %r12
    0000054a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1455:
    00000550: 	xorl	%esi, %esi
    00000552: 	movq	%rbx, %rdx
    00000555: 	movq	%r15, %rdi
    00000558: 	callq	memset@PLT # Offset: 1368
    0000055d: 	testl	%r14d, %r14d
    00000560: 	jle	.Ltmp1453 # Offset: 1376
    00000562: 	movl	%ebp, %ecx
    00000564: 	addq	%r12, %rcx
    00000567: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1454:
    00000570: 	cvttsd2si	init_value(%rip), %edx
    00000578: 	addq	$0x1, %rax
    0000057c: 	movb	%dl, -0x1(%rax)
    0000057f: 	cmpq	%rcx, %rax
    00000582: 	jne	.Ltmp1454 # Offset: 1410
.Ltmp1453:
    00000584: 	addl	$0x1, %r13d
    00000588: 	cmpl	iterations(%rip), %r13d
    0000058f: 	jl	.Ltmp1455 # Offset: 1423
    00000591: 	jmp	.Ltmp1442 # Offset: 1425
.Ltmp1448:
    00000596: 	xorl	%esi, %esi
    00000598: 	xorl	%eax, %eax
    0000059a: 	xorl	%edx, %edx
    0000059c: 	jmp	.Ltmp1456 # Offset: 1436
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace2IhEvPT_iPKc"

Binary Function "_Z22test_for_loop_replace2IhEvPT_iPKc" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x22460
  Size        : 0x602
  MaxSize     : 0x610
  Offset      : 0x22460
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_replace2IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xc8, %rsp
    0000001b: 	movq	%rdx, 0x88(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1457 # Offset: 55
    0000003d: 	movl	%r15d, %edx
    00000040: 	leaq	init_value(%rip), %rsi
    00000047: 	leal	-0x1(%r15), %ebx
    0000004b: 	addq	%r14, %rdx
    0000004e: 	cmpq	%rsi, %rdx
    00000051: 	setbe	%dl
    00000054: 	addq	$0x8, %rsi
    00000058: 	cmpq	%rsi, %r14
    0000005b: 	setae	%sil
    0000005f: 	orb	%sil, %dl
    00000062: 	je	.Ltmp1458 # Offset: 98
    00000068: 	cmpl	$0xe, %ebx
    0000006b: 	jbe	.Ltmp1458 # Offset: 107
    00000071: 	movl	%r15d, %edx
    00000074: 	movl	%r15d, %r13d
    00000077: 	leaq	0x10(%r14), %rdi
    0000007b: 	shrl	$0x4, %edx
    0000007e: 	andl	$-0x10, %r13d
    00000082: 	movq	%rdi, 0xb0(%rsp)
    0000008a: 	leal	-0x1(%rdx), %r8d
    0000008e: 	leal	0x2(%r13), %ecx
    00000092: 	movslq	%r13d, %rdx
    00000095: 	shlq	$0x4, %r8
    00000099: 	leaq	(%r14,%rdx), %r9
    0000009d: 	movslq	%ecx, %rdx
    000000a0: 	movl	%ecx, 0xc(%rsp)
    000000a4: 	leaq	(%r8,%rdi), %rbp
    000000a8: 	leal	0x1(%r13), %edi
    000000ac: 	movslq	%edi, %r12
    000000af: 	movl	%edi, 0x8(%rsp)
    000000b3: 	leaq	(%r14,%rdx), %rdi
    000000b7: 	leal	0x5(%r13), %ecx
    000000bb: 	leaq	(%r14,%r12), %rsi
    000000bf: 	movq	%rdi, 0x10(%rsp)
    000000c4: 	leal	0x4(%r13), %edi
    000000c8: 	xorl	%r12d, %r12d
    000000cb: 	movq	%rsi, (%rsp)
    000000cf: 	leal	0x3(%r13), %esi
    000000d3: 	movslq	%esi, %rdx
    000000d6: 	movl	%esi, 0x20(%rsp)
    000000da: 	leaq	(%r14,%rdx), %rsi
    000000de: 	movslq	%edi, %rdx
    000000e1: 	movl	%edi, 0x24(%rsp)
    000000e5: 	leaq	(%r14,%rdx), %rdi
    000000e9: 	movslq	%ecx, %rdx
    000000ec: 	movq	%rsi, 0x18(%rsp)
    000000f1: 	leaq	(%r14,%rdx), %rsi
    000000f5: 	movq	%rdi, 0x28(%rsp)
    000000fa: 	movq	%rsi, 0x30(%rsp)
    000000ff: 	leal	0x6(%r13), %esi
    00000103: 	movslq	%esi, %rdx
    00000106: 	movl	%ecx, 0x38(%rsp)
    0000010a: 	leal	0x8(%r13), %ecx
    0000010e: 	leaq	(%r14,%rdx), %rdi
    00000112: 	movl	%esi, 0x3c(%rsp)
    00000116: 	movq	%rdi, 0x40(%rsp)
    0000011b: 	leal	0x7(%r13), %edi
    0000011f: 	movslq	%edi, %rdx
    00000122: 	movl	%ecx, 0x54(%rsp)
    00000126: 	leaq	(%r14,%rdx), %rsi
    0000012a: 	movslq	%ecx, %rdx
    0000012d: 	movl	%edi, 0x50(%rsp)
    00000131: 	movq	%rsi, 0x48(%rsp)
    00000136: 	leal	0x9(%r13), %esi
    0000013a: 	leaq	(%r14,%rdx), %rcx
    0000013e: 	movslq	%esi, %rdx
    00000141: 	movq	%rcx, 0x58(%rsp)
    00000146: 	leal	0xb(%r13), %ecx
    0000014a: 	leaq	(%r14,%rdx), %rdi
    0000014e: 	movl	%esi, 0x68(%rsp)
    00000152: 	movq	%rdi, 0x60(%rsp)
    00000157: 	leal	0xa(%r13), %edi
    0000015b: 	movslq	%edi, %rdx
    0000015e: 	movl	%ecx, 0x80(%rsp)
    00000165: 	leaq	(%r14,%rdx), %rsi
    00000169: 	movslq	%ecx, %rdx
    0000016c: 	movl	%edi, 0x6c(%rsp)
    00000170: 	movq	%rsi, 0x70(%rsp)
    00000175: 	leal	0xc(%r13), %esi
    00000179: 	leaq	(%r14,%rdx), %rcx
    0000017d: 	movslq	%esi, %rdx
    00000180: 	movq	%rcx, 0x78(%rsp)
    00000185: 	leal	0xe(%r13), %ecx
    00000189: 	leaq	(%r14,%rdx), %rdi
    0000018d: 	movl	%esi, 0x84(%rsp)
    00000194: 	movq	%rdi, 0x90(%rsp)
    0000019c: 	leal	0xd(%r13), %edi
    000001a0: 	movslq	%edi, %rdx
    000001a3: 	movl	%ecx, 0xa4(%rsp)
    000001aa: 	leaq	(%r14,%rdx), %rsi
    000001ae: 	movslq	%ecx, %rdx
    000001b1: 	movl	%edi, 0xa0(%rsp)
    000001b8: 	movq	%r14, %rdi
    000001bb: 	leaq	(%r14,%rdx), %rcx
    000001bf: 	movq	%rsi, 0x98(%rsp)
    000001c7: 	movl	%r15d, %r14d
    000001ca: 	movl	%r12d, %r15d
    000001cd: 	movq	%rcx, 0xa8(%rsp)
    000001d5: 	movq	%rbp, %r12
    000001d8: 	movq	%r9, %rbp
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1462:
    000001e0: 	testl	%r14d, %r14d
    000001e3: 	jle	.Ltmp1459 # Offset: 483
    000001e9: 	movl	%ebx, %edx
    000001eb: 	xorl	%esi, %esi
    000001ed: 	addq	$0x1, %rdx
    000001f1: 	callq	memset@PLT # Offset: 497
    000001f6: 	movsd	init_value(%rip), %xmm1
    000001fe: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000206: 	movq	%rax, %rdi
    00000209: 	unpcklpd	%xmm1, %xmm1
    0000020d: 	cvttpd2dq	%xmm1, %xmm1
    00000211: 	punpcklqdq	%xmm1, %xmm1
    00000215: 	movdqa	%xmm1, %xmm2
    00000219: 	punpckhwd	%xmm1, %xmm2
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp1460:
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	addq	$0x10, %rax
    00000228: 	punpcklwd	%xmm1, %xmm0
    0000022c: 	movdqa	%xmm0, %xmm3
    00000230: 	punpcklwd	%xmm2, %xmm0
    00000234: 	punpckhwd	%xmm2, %xmm3
    00000238: 	punpcklwd	%xmm3, %xmm0
    0000023c: 	pand	%xmm4, %xmm0
    00000240: 	packuswb	%xmm0, %xmm0
    00000244: 	movups	%xmm0, -0x10(%rax)
    00000248: 	cmpq	%rax, %r12
    0000024b: 	jne	.Ltmp1460 # Offset: 587
    0000024d: 	cmpl	%r13d, %r14d
    00000250: 	je	.Ltmp1461 # Offset: 592
    00000256: 	cvttsd2si	init_value(%rip), %eax
    0000025e: 	movb	%al, (%rbp)
    00000261: 	cmpl	0x8(%rsp), %r14d
    00000266: 	jle	.Ltmp1461 # Offset: 614
    0000026c: 	cvttsd2si	init_value(%rip), %eax
    00000274: 	movq	(%rsp), %rcx
    00000278: 	movb	%al, (%rcx)
    0000027a: 	cmpl	0xc(%rsp), %r14d
    0000027f: 	jle	.Ltmp1461 # Offset: 639
    00000285: 	cvttsd2si	init_value(%rip), %eax
    0000028d: 	movq	0x10(%rsp), %rcx
    00000292: 	movb	%al, (%rcx)
    00000294: 	cmpl	0x20(%rsp), %r14d
    00000299: 	jle	.Ltmp1461 # Offset: 665
    0000029f: 	cvttsd2si	init_value(%rip), %eax
    000002a7: 	movq	0x18(%rsp), %rcx
    000002ac: 	movb	%al, (%rcx)
    000002ae: 	cmpl	0x24(%rsp), %r14d
    000002b3: 	jle	.Ltmp1461 # Offset: 691
    000002b9: 	cvttsd2si	init_value(%rip), %eax
    000002c1: 	movq	0x28(%rsp), %rcx
    000002c6: 	movb	%al, (%rcx)
    000002c8: 	cmpl	0x38(%rsp), %r14d
    000002cd: 	jle	.Ltmp1461 # Offset: 717
    000002d3: 	cvttsd2si	init_value(%rip), %eax
    000002db: 	movq	0x30(%rsp), %rcx
    000002e0: 	movb	%al, (%rcx)
    000002e2: 	cmpl	0x3c(%rsp), %r14d
    000002e7: 	jle	.Ltmp1461 # Offset: 743
    000002ed: 	cvttsd2si	init_value(%rip), %eax
    000002f5: 	movq	0x40(%rsp), %rsi
    000002fa: 	movb	%al, (%rsi)
    000002fc: 	cmpl	0x50(%rsp), %r14d
    00000301: 	jle	.Ltmp1461 # Offset: 769
    00000307: 	cvttsd2si	init_value(%rip), %eax
    0000030f: 	movq	0x48(%rsp), %rsi
    00000314: 	movb	%al, (%rsi)
    00000316: 	cmpl	0x54(%rsp), %r14d
    0000031b: 	jle	.Ltmp1461 # Offset: 795
    00000321: 	cvttsd2si	init_value(%rip), %eax
    00000329: 	movq	0x58(%rsp), %rcx
    0000032e: 	movb	%al, (%rcx)
    00000330: 	cmpl	0x68(%rsp), %r14d
    00000335: 	jle	.Ltmp1461 # Offset: 821
    0000033b: 	cvttsd2si	init_value(%rip), %eax
    00000343: 	movq	0x60(%rsp), %rcx
    00000348: 	movb	%al, (%rcx)
    0000034a: 	cmpl	0x6c(%rsp), %r14d
    0000034f: 	jle	.Ltmp1461 # Offset: 847
    00000351: 	cvttsd2si	init_value(%rip), %eax
    00000359: 	movq	0x70(%rsp), %rcx
    0000035e: 	movb	%al, (%rcx)
    00000360: 	cmpl	0x80(%rsp), %r14d
    00000368: 	jle	.Ltmp1461 # Offset: 872
    0000036a: 	cvttsd2si	init_value(%rip), %eax
    00000372: 	movq	0x78(%rsp), %rsi
    00000377: 	movb	%al, (%rsi)
    00000379: 	cmpl	0x84(%rsp), %r14d
    00000381: 	jle	.Ltmp1461 # Offset: 897
    00000383: 	cvttsd2si	init_value(%rip), %eax
    0000038b: 	movq	0x90(%rsp), %rcx
    00000393: 	movb	%al, (%rcx)
    00000395: 	cmpl	0xa0(%rsp), %r14d
    0000039d: 	jle	.Ltmp1461 # Offset: 925
    0000039f: 	cvttsd2si	init_value(%rip), %eax
    000003a7: 	movq	0x98(%rsp), %rsi
    000003af: 	movb	%al, (%rsi)
    000003b1: 	cmpl	0xa4(%rsp), %r14d
    000003b9: 	jle	.Ltmp1461 # Offset: 953
    000003bb: 	cvttsd2si	init_value(%rip), %eax
    000003c3: 	movq	0xa8(%rsp), %rcx
    000003cb: 	movb	%al, (%rcx)
    000003cd: 	nopl	(%rax) # Size: 3
.Ltmp1461:
    000003d0: 	movl	iterations(%rip), %eax
.Ltmp1459:
    000003d6: 	addl	$0x1, %r15d
    000003da: 	cmpl	%eax, %r15d
    000003dd: 	jl	.Ltmp1462 # Offset: 989
    000003e3: 	movl	%r14d, %r15d
    000003e6: 	movq	%rdi, %r14
    000003e9: 	callq	clock@PLT # Offset: 1001
    000003ee: 	movq	0x88(%rsp), %rdi
    000003f6: 	pxor	%xmm0, %xmm0
    000003fa: 	movq	%rax, end_time(%rip)
    00000401: 	subq	start_time(%rip), %rax
    00000408: 	cvtsi2sd	%rax, %xmm0
    0000040d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000415: 	callq	_Z13record_resultdPKc # Offset: 1045
    0000041a: 	testl	%r15d, %r15d
    0000041d: 	jle	.Ltmp1463 # Offset: 1053
.Ltmp1472:
    00000423: 	movl	%r15d, %edx
    00000426: 	movq	%r14, %rax
    00000429: 	pxor	%xmm0, %xmm0
    0000042d: 	shrl	$0x4, %edx
    00000430: 	subl	$0x1, %edx
    00000433: 	shlq	$0x4, %rdx
    00000437: 	addq	0xb0(%rsp), %rdx
    0000043f: 	nop # Size: 1
.Ltmp1464:
    00000440: 	movdqu	(%rax), %xmm5
    00000444: 	addq	$0x10, %rax
    00000448: 	paddb	%xmm5, %xmm0
    0000044c: 	cmpq	%rax, %rdx
    0000044f: 	jne	.Ltmp1464 # Offset: 1103
    00000451: 	movdqa	%xmm0, %xmm1
    00000455: 	movl	%r15d, %esi
    00000458: 	psrldq	$0x8, %xmm1
    0000045d: 	andl	$-0x10, %esi
    00000460: 	paddb	%xmm1, %xmm0
    00000464: 	pxor	%xmm1, %xmm1
    00000468: 	movl	%esi, %edx
    0000046a: 	psadbw	%xmm1, %xmm0
    0000046e: 	movd	%xmm0, %eax
    00000472: 	cmpl	%r15d, %esi
    00000475: 	je	.Ltmp1465 # Offset: 1141
.Ltmp1473:
    0000047b: 	movl	%r15d, %edi
    0000047e: 	subl	%esi, %edi
    00000480: 	leal	-0x1(%rdi), %r8d
    00000484: 	cmpl	$0x6, %r8d
    00000488: 	jbe	.Ltmp1466 # Offset: 1160
    0000048a: 	movq	(%r14,%rsi), %xmm1
    00000490: 	pxor	%xmm0, %xmm0
    00000494: 	movdqa	%xmm1, %xmm6
    00000498: 	psadbw	%xmm0, %xmm6
    0000049c: 	movq	%xmm6, 0xb8(%rsp)
    000004a5: 	movq	%xmm6, %rsi
    000004aa: 	movl	%esi, %r8d
    000004ad: 	movl	%edi, %esi
    000004af: 	andl	$-0x8, %esi
    000004b2: 	addl	%r8d, %eax
    000004b5: 	addl	%esi, %edx
    000004b7: 	cmpl	%esi, %edi
    000004b9: 	je	.Ltmp1465 # Offset: 1209
.Ltmp1466:
    000004bb: 	movslq	%edx, %rsi
    000004be: 	addb	(%r14,%rsi), %al
    000004c2: 	leal	0x1(%rdx), %esi
    000004c5: 	cmpl	%esi, %r15d
    000004c8: 	jle	.Ltmp1465 # Offset: 1224
    000004ca: 	movslq	%esi, %rsi
    000004cd: 	addb	(%r14,%rsi), %al
    000004d1: 	leal	0x2(%rdx), %esi
    000004d4: 	cmpl	%esi, %r15d
    000004d7: 	jle	.Ltmp1465 # Offset: 1239
    000004d9: 	movslq	%esi, %rsi
    000004dc: 	addb	(%r14,%rsi), %al
    000004e0: 	leal	0x3(%rdx), %esi
    000004e3: 	cmpl	%esi, %r15d
    000004e6: 	jle	.Ltmp1465 # Offset: 1254
    000004e8: 	movslq	%esi, %rsi
    000004eb: 	addb	(%r14,%rsi), %al
    000004ef: 	leal	0x4(%rdx), %esi
    000004f2: 	cmpl	%esi, %r15d
    000004f5: 	jle	.Ltmp1465 # Offset: 1269
    000004f7: 	movslq	%esi, %rsi
    000004fa: 	addb	(%r14,%rsi), %al
    000004fe: 	leal	0x5(%rdx), %esi
    00000501: 	cmpl	%esi, %r15d
    00000504: 	jle	.Ltmp1465 # Offset: 1284
    00000506: 	movslq	%esi, %rsi
    00000509: 	addl	$0x6, %edx
    0000050c: 	addb	(%r14,%rsi), %al
    00000510: 	cmpl	%edx, %r15d
    00000513: 	jle	.Ltmp1465 # Offset: 1299
    00000515: 	movslq	%edx, %rdx
    00000518: 	addb	(%r14,%rdx), %al
.Ltmp1465:
    0000051c: 	testb	%al, %al
    0000051e: 	jne	.Ltmp1467 # Offset: 1310
.Ltmp1463:
    00000520: 	addq	$0xc8, %rsp
    00000527: 	popq	%rbx
    00000528: 	popq	%rbp
    00000529: 	popq	%r12
    0000052b: 	popq	%r13
    0000052d: 	popq	%r14
    0000052f: 	popq	%r15
    00000531: 	retq # Offset: 1329
.Ltmp1467:
    00000532: 	movq	0x88(%rsp), %rsi
    0000053a: 	addq	$0xc8, %rsp
    00000541: 	movzbl	%al, %edi
    00000544: 	popq	%rbx
    00000545: 	popq	%rbp
    00000546: 	popq	%r12
    00000548: 	popq	%r13
    0000054a: 	popq	%r14
    0000054c: 	popq	%r15
    0000054e: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1358
.Ltmp1458:
    00000553: 	xorl	%r13d, %r13d
    00000556: 	leaq	0x1(%r14), %rbp
    0000055a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1470:
    00000560: 	testl	%r15d, %r15d
    00000563: 	jle	.Ltmp1468 # Offset: 1379
    00000565: 	movl	%ebx, %r12d
    00000568: 	xorl	%esi, %esi
    0000056a: 	movq	%r14, %rdi
    0000056d: 	leaq	0x1(%r12), %rdx
    00000572: 	callq	memset@PLT # Offset: 1394
    00000577: 	leaq	(%rbp,%r12), %rcx
    0000057c: 	nopl	(%rax) # Size: 4
.Ltmp1469:
    00000580: 	cvttsd2si	init_value(%rip), %edx
    00000588: 	addq	$0x1, %rax
    0000058c: 	movb	%dl, -0x1(%rax)
    0000058f: 	cmpq	%rcx, %rax
    00000592: 	jne	.Ltmp1469 # Offset: 1426
    00000594: 	movl	iterations(%rip), %eax
.Ltmp1468:
    0000059a: 	addl	$0x1, %r13d
    0000059e: 	cmpl	%r13d, %eax
    000005a1: 	jg	.Ltmp1470 # Offset: 1441
.Ltmp1457:
    000005a3: 	callq	clock@PLT # Offset: 1443
    000005a8: 	movq	0x88(%rsp), %rdi
    000005b0: 	pxor	%xmm0, %xmm0
    000005b4: 	movq	%rax, end_time(%rip)
    000005bb: 	subq	start_time(%rip), %rax
    000005c2: 	cvtsi2sd	%rax, %xmm0
    000005c7: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000005cf: 	callq	_Z13record_resultdPKc # Offset: 1487
    000005d4: 	testl	%r15d, %r15d
    000005d7: 	jle	.Ltmp1463 # Offset: 1495
    000005dd: 	leal	-0x1(%r15), %eax
    000005e1: 	cmpl	$0xe, %eax
    000005e4: 	jbe	.Ltmp1471 # Offset: 1508
    000005e6: 	leaq	0x10(%r14), %rax
    000005ea: 	movq	%rax, 0xb0(%rsp)
    000005f2: 	jmp	.Ltmp1472 # Offset: 1522
.Ltmp1471:
    000005f7: 	xorl	%esi, %esi
    000005f9: 	xorl	%eax, %eax
    000005fb: 	xorl	%edx, %edx
    000005fd: 	jmp	.Ltmp1473 # Offset: 1533
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_replace2IhEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace3IhEvPT_iPKc" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x22a70
  Size        : 0x621
  MaxSize     : 0x630
  Offset      : 0x22a70
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x98(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1474 # Offset: 55
    0000003d: 	movl	%r15d, %eax
    00000040: 	leaq	init_value(%rip), %rdx
    00000047: 	leal	-0x1(%r15), %ebx
    0000004b: 	movslq	%r15d, %r12
    0000004e: 	addq	%r13, %rax
    00000051: 	movl	%ebx, 0xc(%rsp)
    00000055: 	cmpq	%rdx, %rax
    00000058: 	setbe	%al
    0000005b: 	addq	$0x8, %rdx
    0000005f: 	cmpq	%rdx, %r13
    00000062: 	setae	%dl
    00000065: 	orb	%dl, %al
    00000067: 	je	.Ltmp1475 # Offset: 103
    0000006d: 	cmpl	$0xe, %ebx
    00000070: 	jbe	.Ltmp1475 # Offset: 112
    00000076: 	movl	%r15d, %eax
    00000079: 	movl	%r15d, %ebp
    0000007c: 	movq	%r13, %rdi
    0000007f: 	xorl	%ebx, %ebx
    00000081: 	shrl	$0x4, %eax
    00000084: 	andl	$-0x10, %ebp
    00000087: 	leal	-0x1(%rax), %r9d
    0000008b: 	leaq	0x10(%r13), %rax
    0000008f: 	shlq	$0x4, %r9
    00000093: 	movq	%rax, 0xc0(%rsp)
    0000009b: 	leaq	(%r9,%rax), %r14
    0000009f: 	movslq	%ebp, %rax
    000000a2: 	leaq	(%r13,%rax), %rcx
    000000a7: 	leal	0x1(%rbp), %eax
    000000aa: 	movl	%eax, 0x18(%rsp)
    000000ae: 	cltq
    000000b0: 	addq	%r13, %rax
    000000b3: 	movq	%rax, 0x10(%rsp)
    000000b8: 	leal	0x2(%rbp), %eax
    000000bb: 	movl	%eax, 0x1c(%rsp)
    000000bf: 	cltq
    000000c1: 	addq	%r13, %rax
    000000c4: 	movq	%rax, 0x20(%rsp)
    000000c9: 	leal	0x3(%rbp), %eax
    000000cc: 	movl	%eax, 0x30(%rsp)
    000000d0: 	cltq
    000000d2: 	addq	%r13, %rax
    000000d5: 	movq	%rax, 0x28(%rsp)
    000000da: 	leal	0x4(%rbp), %eax
    000000dd: 	movl	%eax, 0x34(%rsp)
    000000e1: 	cltq
    000000e3: 	addq	%r13, %rax
    000000e6: 	movq	%rax, 0x38(%rsp)
    000000eb: 	leal	0x5(%rbp), %eax
    000000ee: 	movl	%eax, 0x48(%rsp)
    000000f2: 	cltq
    000000f4: 	addq	%r13, %rax
    000000f7: 	movq	%rax, 0x40(%rsp)
    000000fc: 	leal	0x6(%rbp), %eax
    000000ff: 	movl	%eax, 0x4c(%rsp)
    00000103: 	cltq
    00000105: 	addq	%r13, %rax
    00000108: 	movq	%rax, 0x50(%rsp)
    0000010d: 	leal	0x7(%rbp), %eax
    00000110: 	movl	%eax, 0x60(%rsp)
    00000114: 	cltq
    00000116: 	addq	%r13, %rax
    00000119: 	movq	%rax, 0x58(%rsp)
    0000011e: 	leal	0x8(%rbp), %eax
    00000121: 	movl	%eax, 0x64(%rsp)
    00000125: 	cltq
    00000127: 	addq	%r13, %rax
    0000012a: 	movq	%rax, 0x68(%rsp)
    0000012f: 	leal	0x9(%rbp), %eax
    00000132: 	movl	%eax, 0x78(%rsp)
    00000136: 	cltq
    00000138: 	addq	%r13, %rax
    0000013b: 	movq	%rax, 0x70(%rsp)
    00000140: 	leal	0xa(%rbp), %eax
    00000143: 	movl	%eax, 0x7c(%rsp)
    00000147: 	cltq
    00000149: 	addq	%r13, %rax
    0000014c: 	movq	%rax, 0x80(%rsp)
    00000154: 	leal	0xb(%rbp), %eax
    00000157: 	movl	%eax, 0x90(%rsp)
    0000015e: 	cltq
    00000160: 	addq	%r13, %rax
    00000163: 	movq	%rax, 0x88(%rsp)
    0000016b: 	leal	0xc(%rbp), %eax
    0000016e: 	movl	%eax, 0x94(%rsp)
    00000175: 	cltq
    00000177: 	addq	%r13, %rax
    0000017a: 	movq	%rax, 0xa0(%rsp)
    00000182: 	leal	0xd(%rbp), %eax
    00000185: 	movl	%eax, 0xb0(%rsp)
    0000018c: 	cltq
    0000018e: 	addq	%r13, %rax
    00000191: 	movq	%rax, 0xa8(%rsp)
    00000199: 	leal	0xe(%rbp), %eax
    0000019c: 	movl	%eax, 0xb4(%rsp)
    000001a3: 	cltq
    000001a5: 	addq	%r13, %rax
    000001a8: 	movq	%rcx, %r13
    000001ab: 	movq	%rax, 0xb8(%rsp)
    000001b3: 	movl	%ebp, %eax
    000001b5: 	movq	%r14, %rbp
    000001b8: 	movl	%eax, %r14d
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1478:
    000001c0: 	movq	%r12, %rdx
    000001c3: 	xorl	%esi, %esi
    000001c5: 	callq	memset@PLT # Offset: 453
    000001ca: 	movq	%rax, %rdi
    000001cd: 	testl	%r15d, %r15d
    000001d0: 	jle	.Ltmp1476 # Offset: 464
    000001d6: 	movl	0xc(%rsp), %edx
    000001da: 	movl	$0x1, %esi
    000001df: 	addq	$0x1, %rdx
    000001e3: 	callq	memset@PLT # Offset: 483
    000001e8: 	movsd	init_value(%rip), %xmm1
    000001f0: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000001f8: 	movq	%rax, %rdi
    000001fb: 	unpcklpd	%xmm1, %xmm1
    000001ff: 	cvttpd2dq	%xmm1, %xmm1
    00000203: 	punpcklqdq	%xmm1, %xmm1
    00000207: 	movdqa	%xmm1, %xmm2
    0000020b: 	punpckhwd	%xmm1, %xmm2
    0000020f: 	nop # Size: 1
.Ltmp1477:
    00000210: 	movdqa	%xmm1, %xmm0
    00000214: 	addq	$0x10, %rax
    00000218: 	punpcklwd	%xmm1, %xmm0
    0000021c: 	movdqa	%xmm0, %xmm3
    00000220: 	punpcklwd	%xmm2, %xmm0
    00000224: 	punpckhwd	%xmm2, %xmm3
    00000228: 	punpcklwd	%xmm3, %xmm0
    0000022c: 	pand	%xmm4, %xmm0
    00000230: 	packuswb	%xmm0, %xmm0
    00000234: 	movups	%xmm0, -0x10(%rax)
    00000238: 	cmpq	%rax, %rbp
    0000023b: 	jne	.Ltmp1477 # Offset: 571
    0000023d: 	cmpl	%r14d, %r15d
    00000240: 	je	.Ltmp1476 # Offset: 576
    00000246: 	cvttsd2si	init_value(%rip), %eax
    0000024e: 	movb	%al, (%r13)
    00000252: 	cmpl	0x18(%rsp), %r15d
    00000257: 	jle	.Ltmp1476 # Offset: 599
    0000025d: 	cvttsd2si	init_value(%rip), %eax
    00000265: 	movq	0x10(%rsp), %rcx
    0000026a: 	movb	%al, (%rcx)
    0000026c: 	cmpl	0x1c(%rsp), %r15d
    00000271: 	jle	.Ltmp1476 # Offset: 625
    00000277: 	cvttsd2si	init_value(%rip), %eax
    0000027f: 	movq	0x20(%rsp), %rcx
    00000284: 	movb	%al, (%rcx)
    00000286: 	cmpl	0x30(%rsp), %r15d
    0000028b: 	jle	.Ltmp1476 # Offset: 651
    00000291: 	cvttsd2si	init_value(%rip), %eax
    00000299: 	movq	0x28(%rsp), %rcx
    0000029e: 	movb	%al, (%rcx)
    000002a0: 	cmpl	0x34(%rsp), %r15d
    000002a5: 	jle	.Ltmp1476 # Offset: 677
    000002ab: 	cvttsd2si	init_value(%rip), %eax
    000002b3: 	movq	0x38(%rsp), %rcx
    000002b8: 	movb	%al, (%rcx)
    000002ba: 	cmpl	0x48(%rsp), %r15d
    000002bf: 	jle	.Ltmp1476 # Offset: 703
    000002c5: 	cvttsd2si	init_value(%rip), %eax
    000002cd: 	movq	0x40(%rsp), %rcx
    000002d2: 	movb	%al, (%rcx)
    000002d4: 	cmpl	0x4c(%rsp), %r15d
    000002d9: 	jle	.Ltmp1476 # Offset: 729
    000002df: 	cvttsd2si	init_value(%rip), %eax
    000002e7: 	movq	0x50(%rsp), %rsi
    000002ec: 	movb	%al, (%rsi)
    000002ee: 	cmpl	0x60(%rsp), %r15d
    000002f3: 	jle	.Ltmp1476 # Offset: 755
    000002f9: 	cvttsd2si	init_value(%rip), %eax
    00000301: 	movq	0x58(%rsp), %rcx
    00000306: 	movb	%al, (%rcx)
    00000308: 	cmpl	0x64(%rsp), %r15d
    0000030d: 	jle	.Ltmp1476 # Offset: 781
    00000313: 	cvttsd2si	init_value(%rip), %eax
    0000031b: 	movq	0x68(%rsp), %rcx
    00000320: 	movb	%al, (%rcx)
    00000322: 	cmpl	0x78(%rsp), %r15d
    00000327: 	jle	.Ltmp1476 # Offset: 807
    0000032d: 	cvttsd2si	init_value(%rip), %eax
    00000335: 	movq	0x70(%rsp), %rsi
    0000033a: 	movb	%al, (%rsi)
    0000033c: 	cmpl	0x7c(%rsp), %r15d
    00000341: 	jle	.Ltmp1476 # Offset: 833
    00000347: 	cvttsd2si	init_value(%rip), %eax
    0000034f: 	movq	0x80(%rsp), %rcx
    00000357: 	movb	%al, (%rcx)
    00000359: 	cmpl	0x90(%rsp), %r15d
    00000361: 	jle	.Ltmp1476 # Offset: 865
    00000363: 	cvttsd2si	init_value(%rip), %eax
    0000036b: 	movq	0x88(%rsp), %rsi
    00000373: 	movb	%al, (%rsi)
    00000375: 	cmpl	0x94(%rsp), %r15d
    0000037d: 	jle	.Ltmp1476 # Offset: 893
    0000037f: 	cvttsd2si	init_value(%rip), %eax
    00000387: 	movq	0xa0(%rsp), %rcx
    0000038f: 	movb	%al, (%rcx)
    00000391: 	cmpl	0xb0(%rsp), %r15d
    00000399: 	jle	.Ltmp1476 # Offset: 921
    0000039b: 	cvttsd2si	init_value(%rip), %eax
    000003a3: 	movq	0xa8(%rsp), %rsi
    000003ab: 	movb	%al, (%rsi)
    000003ad: 	cmpl	0xb4(%rsp), %r15d
    000003b5: 	jle	.Ltmp1476 # Offset: 949
    000003b7: 	cvttsd2si	init_value(%rip), %eax
    000003bf: 	movq	0xb8(%rsp), %rcx
    000003c7: 	movb	%al, (%rcx)
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp1476:
    000003d0: 	addl	$0x1, %ebx
    000003d3: 	cmpl	%ebx, iterations(%rip)
    000003d9: 	jg	.Ltmp1478 # Offset: 985
    000003df: 	movq	%rdi, %r13
    000003e2: 	callq	clock@PLT # Offset: 994
    000003e7: 	movq	0x98(%rsp), %rdi
    000003ef: 	pxor	%xmm0, %xmm0
    000003f3: 	movq	%rax, end_time(%rip)
    000003fa: 	subq	start_time(%rip), %rax
    00000401: 	cvtsi2sd	%rax, %xmm0
    00000406: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000040e: 	callq	_Z13record_resultdPKc # Offset: 1038
    00000413: 	testl	%r15d, %r15d
    00000416: 	jle	.Ltmp1479 # Offset: 1046
.Ltmp1488:
    0000041c: 	movl	%r15d, %edx
    0000041f: 	movq	%r13, %rax
    00000422: 	pxor	%xmm0, %xmm0
    00000426: 	shrl	$0x4, %edx
    00000429: 	subl	$0x1, %edx
    0000042c: 	shlq	$0x4, %rdx
    00000430: 	addq	0xc0(%rsp), %rdx
    00000438: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1480:
    00000440: 	movdqu	(%rax), %xmm5
    00000444: 	addq	$0x10, %rax
    00000448: 	paddb	%xmm5, %xmm0
    0000044c: 	cmpq	%rax, %rdx
    0000044f: 	jne	.Ltmp1480 # Offset: 1103
    00000451: 	movdqa	%xmm0, %xmm1
    00000455: 	movl	%r15d, %esi
    00000458: 	psrldq	$0x8, %xmm1
    0000045d: 	andl	$-0x10, %esi
    00000460: 	paddb	%xmm1, %xmm0
    00000464: 	pxor	%xmm1, %xmm1
    00000468: 	movl	%esi, %edx
    0000046a: 	psadbw	%xmm1, %xmm0
    0000046e: 	movd	%xmm0, %eax
    00000472: 	cmpl	%r15d, %esi
    00000475: 	je	.Ltmp1481 # Offset: 1141
.Ltmp1489:
    0000047b: 	movl	%r15d, %edi
    0000047e: 	subl	%esi, %edi
    00000480: 	leal	-0x1(%rdi), %r9d
    00000484: 	cmpl	$0x6, %r9d
    00000488: 	jbe	.Ltmp1482 # Offset: 1160
    0000048a: 	movq	(%r13,%rsi), %xmm1
    00000491: 	pxor	%xmm0, %xmm0
    00000495: 	movdqa	%xmm1, %xmm6
    00000499: 	psadbw	%xmm0, %xmm6
    0000049d: 	movq	%xmm6, 0xc8(%rsp)
    000004a6: 	movq	%xmm6, %rsi
    000004ab: 	movl	%esi, %r9d
    000004ae: 	movl	%edi, %esi
    000004b0: 	andl	$-0x8, %esi
    000004b3: 	addl	%r9d, %eax
    000004b6: 	addl	%esi, %edx
    000004b8: 	cmpl	%esi, %edi
    000004ba: 	je	.Ltmp1481 # Offset: 1210
.Ltmp1482:
    000004bc: 	movslq	%edx, %rsi
    000004bf: 	addb	(%r13,%rsi), %al
    000004c4: 	leal	0x1(%rdx), %esi
    000004c7: 	cmpl	%esi, %r15d
    000004ca: 	jle	.Ltmp1481 # Offset: 1226
    000004cc: 	movslq	%esi, %rsi
    000004cf: 	addb	(%r13,%rsi), %al
    000004d4: 	leal	0x2(%rdx), %esi
    000004d7: 	cmpl	%esi, %r15d
    000004da: 	jle	.Ltmp1481 # Offset: 1242
    000004dc: 	movslq	%esi, %rsi
    000004df: 	addb	(%r13,%rsi), %al
    000004e4: 	leal	0x3(%rdx), %esi
    000004e7: 	cmpl	%esi, %r15d
    000004ea: 	jle	.Ltmp1481 # Offset: 1258
    000004ec: 	movslq	%esi, %rsi
    000004ef: 	addb	(%r13,%rsi), %al
    000004f4: 	leal	0x4(%rdx), %esi
    000004f7: 	cmpl	%esi, %r15d
    000004fa: 	jle	.Ltmp1481 # Offset: 1274
    000004fc: 	movslq	%esi, %rsi
    000004ff: 	addb	(%r13,%rsi), %al
    00000504: 	leal	0x5(%rdx), %esi
    00000507: 	cmpl	%esi, %r15d
    0000050a: 	jle	.Ltmp1481 # Offset: 1290
    0000050c: 	movslq	%esi, %rsi
    0000050f: 	addl	$0x6, %edx
    00000512: 	addb	(%r13,%rsi), %al
    00000517: 	cmpl	%edx, %r15d
    0000051a: 	jle	.Ltmp1481 # Offset: 1306
    0000051c: 	movslq	%edx, %rdx
    0000051f: 	addb	(%r13,%rdx), %al
.Ltmp1481:
    00000524: 	testb	%al, %al
    00000526: 	jne	.Ltmp1483 # Offset: 1318
.Ltmp1479:
    00000528: 	addq	$0xd8, %rsp
    0000052f: 	popq	%rbx
    00000530: 	popq	%rbp
    00000531: 	popq	%r12
    00000533: 	popq	%r13
    00000535: 	popq	%r14
    00000537: 	popq	%r15
    00000539: 	retq # Offset: 1337
.Ltmp1483:
    0000053a: 	movq	0x98(%rsp), %rsi
    00000542: 	addq	$0xd8, %rsp
    00000549: 	movzbl	%al, %edi
    0000054c: 	popq	%rbx
    0000054d: 	popq	%rbp
    0000054e: 	popq	%r12
    00000550: 	popq	%r13
    00000552: 	popq	%r14
    00000554: 	popq	%r15
    00000556: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1366
.Ltmp1475:
    0000055b: 	movl	0xc(%rsp), %r14d
    00000560: 	xorl	%ebx, %ebx
    00000562: 	leaq	0x1(%r13), %rbp
    00000566: 	movq	%r13, %rdi
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp1486:
    00000570: 	movq	%r12, %rdx
    00000573: 	xorl	%esi, %esi
    00000575: 	callq	memset@PLT # Offset: 1397
    0000057a: 	movq	%rax, %rdi
    0000057d: 	testl	%r15d, %r15d
    00000580: 	jle	.Ltmp1484 # Offset: 1408
    00000582: 	movl	%r14d, %r13d
    00000585: 	movl	$0x1, %esi
    0000058a: 	leaq	0x1(%r13), %rdx
    0000058e: 	callq	memset@PLT # Offset: 1422
    00000593: 	leaq	(%rbp,%r13), %rcx
    00000598: 	movq	%rax, %rdi
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1485:
    000005a0: 	cvttsd2si	init_value(%rip), %edx
    000005a8: 	addq	$0x1, %rax
    000005ac: 	movb	%dl, -0x1(%rax)
    000005af: 	cmpq	%rax, %rcx
    000005b2: 	jne	.Ltmp1485 # Offset: 1458
.Ltmp1484:
    000005b4: 	addl	$0x1, %ebx
    000005b7: 	cmpl	iterations(%rip), %ebx
    000005bd: 	jl	.Ltmp1486 # Offset: 1469
    000005bf: 	movq	%rdi, %r13
.Ltmp1474:
    000005c2: 	callq	clock@PLT # Offset: 1474
    000005c7: 	movq	0x98(%rsp), %rdi
    000005cf: 	pxor	%xmm0, %xmm0
    000005d3: 	movq	%rax, end_time(%rip)
    000005da: 	subq	start_time(%rip), %rax
    000005e1: 	cvtsi2sd	%rax, %xmm0
    000005e6: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000005ee: 	callq	_Z13record_resultdPKc # Offset: 1518
    000005f3: 	testl	%r15d, %r15d
    000005f6: 	jle	.Ltmp1479 # Offset: 1526
    000005fc: 	leal	-0x1(%r15), %eax
    00000600: 	cmpl	$0xe, %eax
    00000603: 	jbe	.Ltmp1487 # Offset: 1539
    00000605: 	leaq	0x10(%r13), %rax
    00000609: 	movq	%rax, 0xc0(%rsp)
    00000611: 	jmp	.Ltmp1488 # Offset: 1553
.Ltmp1487:
    00000616: 	xorl	%esi, %esi
    00000618: 	xorl	%eax, %eax
    0000061a: 	xorl	%edx, %edx
    0000061c: 	jmp	.Ltmp1489 # Offset: 1564
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace3IhEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace3IhEvPT_iPKc" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x230a0
  Size        : 0x621
  MaxSize     : 0x630
  Offset      : 0x230a0
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x98(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1490 # Offset: 55
    0000003d: 	movl	%r15d, %eax
    00000040: 	leaq	init_value(%rip), %rdx
    00000047: 	leal	-0x1(%r15), %ebx
    0000004b: 	movslq	%r15d, %r12
    0000004e: 	addq	%r13, %rax
    00000051: 	movl	%ebx, 0xc(%rsp)
    00000055: 	cmpq	%rdx, %rax
    00000058: 	setbe	%al
    0000005b: 	addq	$0x8, %rdx
    0000005f: 	cmpq	%rdx, %r13
    00000062: 	setae	%dl
    00000065: 	orb	%dl, %al
    00000067: 	je	.Ltmp1491 # Offset: 103
    0000006d: 	cmpl	$0xe, %ebx
    00000070: 	jbe	.Ltmp1491 # Offset: 112
    00000076: 	movl	%r15d, %eax
    00000079: 	movl	%r15d, %ebp
    0000007c: 	movq	%r13, %rdi
    0000007f: 	xorl	%ebx, %ebx
    00000081: 	shrl	$0x4, %eax
    00000084: 	andl	$-0x10, %ebp
    00000087: 	leal	-0x1(%rax), %r9d
    0000008b: 	leaq	0x10(%r13), %rax
    0000008f: 	shlq	$0x4, %r9
    00000093: 	movq	%rax, 0xc0(%rsp)
    0000009b: 	leaq	(%r9,%rax), %r14
    0000009f: 	movslq	%ebp, %rax
    000000a2: 	leaq	(%r13,%rax), %rcx
    000000a7: 	leal	0x1(%rbp), %eax
    000000aa: 	movl	%eax, 0x18(%rsp)
    000000ae: 	cltq
    000000b0: 	addq	%r13, %rax
    000000b3: 	movq	%rax, 0x10(%rsp)
    000000b8: 	leal	0x2(%rbp), %eax
    000000bb: 	movl	%eax, 0x1c(%rsp)
    000000bf: 	cltq
    000000c1: 	addq	%r13, %rax
    000000c4: 	movq	%rax, 0x20(%rsp)
    000000c9: 	leal	0x3(%rbp), %eax
    000000cc: 	movl	%eax, 0x30(%rsp)
    000000d0: 	cltq
    000000d2: 	addq	%r13, %rax
    000000d5: 	movq	%rax, 0x28(%rsp)
    000000da: 	leal	0x4(%rbp), %eax
    000000dd: 	movl	%eax, 0x34(%rsp)
    000000e1: 	cltq
    000000e3: 	addq	%r13, %rax
    000000e6: 	movq	%rax, 0x38(%rsp)
    000000eb: 	leal	0x5(%rbp), %eax
    000000ee: 	movl	%eax, 0x48(%rsp)
    000000f2: 	cltq
    000000f4: 	addq	%r13, %rax
    000000f7: 	movq	%rax, 0x40(%rsp)
    000000fc: 	leal	0x6(%rbp), %eax
    000000ff: 	movl	%eax, 0x4c(%rsp)
    00000103: 	cltq
    00000105: 	addq	%r13, %rax
    00000108: 	movq	%rax, 0x50(%rsp)
    0000010d: 	leal	0x7(%rbp), %eax
    00000110: 	movl	%eax, 0x60(%rsp)
    00000114: 	cltq
    00000116: 	addq	%r13, %rax
    00000119: 	movq	%rax, 0x58(%rsp)
    0000011e: 	leal	0x8(%rbp), %eax
    00000121: 	movl	%eax, 0x64(%rsp)
    00000125: 	cltq
    00000127: 	addq	%r13, %rax
    0000012a: 	movq	%rax, 0x68(%rsp)
    0000012f: 	leal	0x9(%rbp), %eax
    00000132: 	movl	%eax, 0x78(%rsp)
    00000136: 	cltq
    00000138: 	addq	%r13, %rax
    0000013b: 	movq	%rax, 0x70(%rsp)
    00000140: 	leal	0xa(%rbp), %eax
    00000143: 	movl	%eax, 0x7c(%rsp)
    00000147: 	cltq
    00000149: 	addq	%r13, %rax
    0000014c: 	movq	%rax, 0x80(%rsp)
    00000154: 	leal	0xb(%rbp), %eax
    00000157: 	movl	%eax, 0x90(%rsp)
    0000015e: 	cltq
    00000160: 	addq	%r13, %rax
    00000163: 	movq	%rax, 0x88(%rsp)
    0000016b: 	leal	0xc(%rbp), %eax
    0000016e: 	movl	%eax, 0x94(%rsp)
    00000175: 	cltq
    00000177: 	addq	%r13, %rax
    0000017a: 	movq	%rax, 0xa0(%rsp)
    00000182: 	leal	0xd(%rbp), %eax
    00000185: 	movl	%eax, 0xb0(%rsp)
    0000018c: 	cltq
    0000018e: 	addq	%r13, %rax
    00000191: 	movq	%rax, 0xa8(%rsp)
    00000199: 	leal	0xe(%rbp), %eax
    0000019c: 	movl	%eax, 0xb4(%rsp)
    000001a3: 	cltq
    000001a5: 	addq	%r13, %rax
    000001a8: 	movq	%rcx, %r13
    000001ab: 	movq	%rax, 0xb8(%rsp)
    000001b3: 	movl	%ebp, %eax
    000001b5: 	movq	%r14, %rbp
    000001b8: 	movl	%eax, %r14d
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1494:
    000001c0: 	movq	%r12, %rdx
    000001c3: 	xorl	%esi, %esi
    000001c5: 	callq	memset@PLT # Offset: 453
    000001ca: 	movq	%rax, %rdi
    000001cd: 	testl	%r15d, %r15d
    000001d0: 	jle	.Ltmp1492 # Offset: 464
    000001d6: 	movl	0xc(%rsp), %edx
    000001da: 	movl	$0x1, %esi
    000001df: 	addq	$0x1, %rdx
    000001e3: 	callq	memset@PLT # Offset: 483
    000001e8: 	movsd	init_value(%rip), %xmm1
    000001f0: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000001f8: 	movq	%rax, %rdi
    000001fb: 	unpcklpd	%xmm1, %xmm1
    000001ff: 	cvttpd2dq	%xmm1, %xmm1
    00000203: 	punpcklqdq	%xmm1, %xmm1
    00000207: 	movdqa	%xmm1, %xmm2
    0000020b: 	punpckhwd	%xmm1, %xmm2
    0000020f: 	nop # Size: 1
.Ltmp1493:
    00000210: 	movdqa	%xmm1, %xmm0
    00000214: 	addq	$0x10, %rax
    00000218: 	punpcklwd	%xmm1, %xmm0
    0000021c: 	movdqa	%xmm0, %xmm3
    00000220: 	punpcklwd	%xmm2, %xmm0
    00000224: 	punpckhwd	%xmm2, %xmm3
    00000228: 	punpcklwd	%xmm3, %xmm0
    0000022c: 	pand	%xmm4, %xmm0
    00000230: 	packuswb	%xmm0, %xmm0
    00000234: 	movups	%xmm0, -0x10(%rax)
    00000238: 	cmpq	%rax, %rbp
    0000023b: 	jne	.Ltmp1493 # Offset: 571
    0000023d: 	cmpl	%r14d, %r15d
    00000240: 	je	.Ltmp1492 # Offset: 576
    00000246: 	cvttsd2si	init_value(%rip), %eax
    0000024e: 	movb	%al, (%r13)
    00000252: 	cmpl	0x18(%rsp), %r15d
    00000257: 	jle	.Ltmp1492 # Offset: 599
    0000025d: 	cvttsd2si	init_value(%rip), %eax
    00000265: 	movq	0x10(%rsp), %rcx
    0000026a: 	movb	%al, (%rcx)
    0000026c: 	cmpl	0x1c(%rsp), %r15d
    00000271: 	jle	.Ltmp1492 # Offset: 625
    00000277: 	cvttsd2si	init_value(%rip), %eax
    0000027f: 	movq	0x20(%rsp), %rcx
    00000284: 	movb	%al, (%rcx)
    00000286: 	cmpl	0x30(%rsp), %r15d
    0000028b: 	jle	.Ltmp1492 # Offset: 651
    00000291: 	cvttsd2si	init_value(%rip), %eax
    00000299: 	movq	0x28(%rsp), %rcx
    0000029e: 	movb	%al, (%rcx)
    000002a0: 	cmpl	0x34(%rsp), %r15d
    000002a5: 	jle	.Ltmp1492 # Offset: 677
    000002ab: 	cvttsd2si	init_value(%rip), %eax
    000002b3: 	movq	0x38(%rsp), %rcx
    000002b8: 	movb	%al, (%rcx)
    000002ba: 	cmpl	0x48(%rsp), %r15d
    000002bf: 	jle	.Ltmp1492 # Offset: 703
    000002c5: 	cvttsd2si	init_value(%rip), %eax
    000002cd: 	movq	0x40(%rsp), %rcx
    000002d2: 	movb	%al, (%rcx)
    000002d4: 	cmpl	0x4c(%rsp), %r15d
    000002d9: 	jle	.Ltmp1492 # Offset: 729
    000002df: 	cvttsd2si	init_value(%rip), %eax
    000002e7: 	movq	0x50(%rsp), %rsi
    000002ec: 	movb	%al, (%rsi)
    000002ee: 	cmpl	0x60(%rsp), %r15d
    000002f3: 	jle	.Ltmp1492 # Offset: 755
    000002f9: 	cvttsd2si	init_value(%rip), %eax
    00000301: 	movq	0x58(%rsp), %rcx
    00000306: 	movb	%al, (%rcx)
    00000308: 	cmpl	0x64(%rsp), %r15d
    0000030d: 	jle	.Ltmp1492 # Offset: 781
    00000313: 	cvttsd2si	init_value(%rip), %eax
    0000031b: 	movq	0x68(%rsp), %rcx
    00000320: 	movb	%al, (%rcx)
    00000322: 	cmpl	0x78(%rsp), %r15d
    00000327: 	jle	.Ltmp1492 # Offset: 807
    0000032d: 	cvttsd2si	init_value(%rip), %eax
    00000335: 	movq	0x70(%rsp), %rsi
    0000033a: 	movb	%al, (%rsi)
    0000033c: 	cmpl	0x7c(%rsp), %r15d
    00000341: 	jle	.Ltmp1492 # Offset: 833
    00000347: 	cvttsd2si	init_value(%rip), %eax
    0000034f: 	movq	0x80(%rsp), %rcx
    00000357: 	movb	%al, (%rcx)
    00000359: 	cmpl	0x90(%rsp), %r15d
    00000361: 	jle	.Ltmp1492 # Offset: 865
    00000363: 	cvttsd2si	init_value(%rip), %eax
    0000036b: 	movq	0x88(%rsp), %rsi
    00000373: 	movb	%al, (%rsi)
    00000375: 	cmpl	0x94(%rsp), %r15d
    0000037d: 	jle	.Ltmp1492 # Offset: 893
    0000037f: 	cvttsd2si	init_value(%rip), %eax
    00000387: 	movq	0xa0(%rsp), %rcx
    0000038f: 	movb	%al, (%rcx)
    00000391: 	cmpl	0xb0(%rsp), %r15d
    00000399: 	jle	.Ltmp1492 # Offset: 921
    0000039b: 	cvttsd2si	init_value(%rip), %eax
    000003a3: 	movq	0xa8(%rsp), %rsi
    000003ab: 	movb	%al, (%rsi)
    000003ad: 	cmpl	0xb4(%rsp), %r15d
    000003b5: 	jle	.Ltmp1492 # Offset: 949
    000003b7: 	cvttsd2si	init_value(%rip), %eax
    000003bf: 	movq	0xb8(%rsp), %rcx
    000003c7: 	movb	%al, (%rcx)
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp1492:
    000003d0: 	addl	$0x1, %ebx
    000003d3: 	cmpl	%ebx, iterations(%rip)
    000003d9: 	jg	.Ltmp1494 # Offset: 985
    000003df: 	movq	%rdi, %r13
    000003e2: 	callq	clock@PLT # Offset: 994
    000003e7: 	movq	0x98(%rsp), %rdi
    000003ef: 	pxor	%xmm0, %xmm0
    000003f3: 	movq	%rax, end_time(%rip)
    000003fa: 	subq	start_time(%rip), %rax
    00000401: 	cvtsi2sd	%rax, %xmm0
    00000406: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000040e: 	callq	_Z13record_resultdPKc # Offset: 1038
    00000413: 	testl	%r15d, %r15d
    00000416: 	jle	.Ltmp1495 # Offset: 1046
.Ltmp1504:
    0000041c: 	movl	%r15d, %edx
    0000041f: 	movq	%r13, %rax
    00000422: 	pxor	%xmm0, %xmm0
    00000426: 	shrl	$0x4, %edx
    00000429: 	subl	$0x1, %edx
    0000042c: 	shlq	$0x4, %rdx
    00000430: 	addq	0xc0(%rsp), %rdx
    00000438: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1496:
    00000440: 	movdqu	(%rax), %xmm5
    00000444: 	addq	$0x10, %rax
    00000448: 	paddb	%xmm5, %xmm0
    0000044c: 	cmpq	%rax, %rdx
    0000044f: 	jne	.Ltmp1496 # Offset: 1103
    00000451: 	movdqa	%xmm0, %xmm1
    00000455: 	movl	%r15d, %esi
    00000458: 	psrldq	$0x8, %xmm1
    0000045d: 	andl	$-0x10, %esi
    00000460: 	paddb	%xmm1, %xmm0
    00000464: 	pxor	%xmm1, %xmm1
    00000468: 	movl	%esi, %edx
    0000046a: 	psadbw	%xmm1, %xmm0
    0000046e: 	movd	%xmm0, %eax
    00000472: 	cmpl	%r15d, %esi
    00000475: 	je	.Ltmp1497 # Offset: 1141
.Ltmp1505:
    0000047b: 	movl	%r15d, %edi
    0000047e: 	subl	%esi, %edi
    00000480: 	leal	-0x1(%rdi), %r9d
    00000484: 	cmpl	$0x6, %r9d
    00000488: 	jbe	.Ltmp1498 # Offset: 1160
    0000048a: 	movq	(%r13,%rsi), %xmm1
    00000491: 	pxor	%xmm0, %xmm0
    00000495: 	movdqa	%xmm1, %xmm6
    00000499: 	psadbw	%xmm0, %xmm6
    0000049d: 	movq	%xmm6, 0xc8(%rsp)
    000004a6: 	movq	%xmm6, %rsi
    000004ab: 	movl	%esi, %r9d
    000004ae: 	movl	%edi, %esi
    000004b0: 	andl	$-0x8, %esi
    000004b3: 	addl	%r9d, %eax
    000004b6: 	addl	%esi, %edx
    000004b8: 	cmpl	%esi, %edi
    000004ba: 	je	.Ltmp1497 # Offset: 1210
.Ltmp1498:
    000004bc: 	movslq	%edx, %rsi
    000004bf: 	addb	(%r13,%rsi), %al
    000004c4: 	leal	0x1(%rdx), %esi
    000004c7: 	cmpl	%esi, %r15d
    000004ca: 	jle	.Ltmp1497 # Offset: 1226
    000004cc: 	movslq	%esi, %rsi
    000004cf: 	addb	(%r13,%rsi), %al
    000004d4: 	leal	0x2(%rdx), %esi
    000004d7: 	cmpl	%esi, %r15d
    000004da: 	jle	.Ltmp1497 # Offset: 1242
    000004dc: 	movslq	%esi, %rsi
    000004df: 	addb	(%r13,%rsi), %al
    000004e4: 	leal	0x3(%rdx), %esi
    000004e7: 	cmpl	%esi, %r15d
    000004ea: 	jle	.Ltmp1497 # Offset: 1258
    000004ec: 	movslq	%esi, %rsi
    000004ef: 	addb	(%r13,%rsi), %al
    000004f4: 	leal	0x4(%rdx), %esi
    000004f7: 	cmpl	%esi, %r15d
    000004fa: 	jle	.Ltmp1497 # Offset: 1274
    000004fc: 	movslq	%esi, %rsi
    000004ff: 	addb	(%r13,%rsi), %al
    00000504: 	leal	0x5(%rdx), %esi
    00000507: 	cmpl	%esi, %r15d
    0000050a: 	jle	.Ltmp1497 # Offset: 1290
    0000050c: 	movslq	%esi, %rsi
    0000050f: 	addl	$0x6, %edx
    00000512: 	addb	(%r13,%rsi), %al
    00000517: 	cmpl	%edx, %r15d
    0000051a: 	jle	.Ltmp1497 # Offset: 1306
    0000051c: 	movslq	%edx, %rdx
    0000051f: 	addb	(%r13,%rdx), %al
.Ltmp1497:
    00000524: 	testb	%al, %al
    00000526: 	jne	.Ltmp1499 # Offset: 1318
.Ltmp1495:
    00000528: 	addq	$0xd8, %rsp
    0000052f: 	popq	%rbx
    00000530: 	popq	%rbp
    00000531: 	popq	%r12
    00000533: 	popq	%r13
    00000535: 	popq	%r14
    00000537: 	popq	%r15
    00000539: 	retq # Offset: 1337
.Ltmp1499:
    0000053a: 	movq	0x98(%rsp), %rsi
    00000542: 	addq	$0xd8, %rsp
    00000549: 	movzbl	%al, %edi
    0000054c: 	popq	%rbx
    0000054d: 	popq	%rbp
    0000054e: 	popq	%r12
    00000550: 	popq	%r13
    00000552: 	popq	%r14
    00000554: 	popq	%r15
    00000556: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1366
.Ltmp1491:
    0000055b: 	movl	0xc(%rsp), %r14d
    00000560: 	xorl	%ebx, %ebx
    00000562: 	leaq	0x1(%r13), %rbp
    00000566: 	movq	%r13, %rdi
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp1502:
    00000570: 	movq	%r12, %rdx
    00000573: 	xorl	%esi, %esi
    00000575: 	callq	memset@PLT # Offset: 1397
    0000057a: 	movq	%rax, %rdi
    0000057d: 	testl	%r15d, %r15d
    00000580: 	jle	.Ltmp1500 # Offset: 1408
    00000582: 	movl	%r14d, %r13d
    00000585: 	movl	$0x1, %esi
    0000058a: 	leaq	0x1(%r13), %rdx
    0000058e: 	callq	memset@PLT # Offset: 1422
    00000593: 	leaq	(%rbp,%r13), %rcx
    00000598: 	movq	%rax, %rdi
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1501:
    000005a0: 	cvttsd2si	init_value(%rip), %edx
    000005a8: 	addq	$0x1, %rax
    000005ac: 	movb	%dl, -0x1(%rax)
    000005af: 	cmpq	%rax, %rcx
    000005b2: 	jne	.Ltmp1501 # Offset: 1458
.Ltmp1500:
    000005b4: 	addl	$0x1, %ebx
    000005b7: 	cmpl	iterations(%rip), %ebx
    000005bd: 	jl	.Ltmp1502 # Offset: 1469
    000005bf: 	movq	%rdi, %r13
.Ltmp1490:
    000005c2: 	callq	clock@PLT # Offset: 1474
    000005c7: 	movq	0x98(%rsp), %rdi
    000005cf: 	pxor	%xmm0, %xmm0
    000005d3: 	movq	%rax, end_time(%rip)
    000005da: 	subq	start_time(%rip), %rax
    000005e1: 	cvtsi2sd	%rax, %xmm0
    000005e6: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000005ee: 	callq	_Z13record_resultdPKc # Offset: 1518
    000005f3: 	testl	%r15d, %r15d
    000005f6: 	jle	.Ltmp1495 # Offset: 1526
    000005fc: 	leal	-0x1(%r15), %eax
    00000600: 	cmpl	$0xe, %eax
    00000603: 	jbe	.Ltmp1503 # Offset: 1539
    00000605: 	leaq	0x10(%r13), %rax
    00000609: 	movq	%rax, 0xc0(%rsp)
    00000611: 	jmp	.Ltmp1504 # Offset: 1553
.Ltmp1503:
    00000616: 	xorl	%esi, %esi
    00000618: 	xorl	%eax, %eax
    0000061a: 	xorl	%edx, %edx
    0000061c: 	jmp	.Ltmp1505 # Offset: 1564
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace3IhEvPT_iPKc"

Binary Function "_Z22test_for_loop_replace3IhEvPT_iPKc" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x236d0
  Size        : 0x632
  MaxSize     : 0x640
  Offset      : 0x236d0
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_replace3IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x98(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1506 # Offset: 55
    0000003d: 	movl	%r15d, %edx
    00000040: 	leaq	init_value(%rip), %rsi
    00000047: 	leal	-0x1(%r15), %ecx
    0000004b: 	addq	%rbx, %rdx
    0000004e: 	movl	%ecx, 0x64(%rsp)
    00000052: 	cmpq	%rsi, %rdx
    00000055: 	setbe	%dl
    00000058: 	addq	$0x8, %rsi
    0000005c: 	cmpq	%rsi, %rbx
    0000005f: 	setae	%sil
    00000063: 	orb	%sil, %dl
    00000066: 	je	.Ltmp1507 # Offset: 102
    0000006c: 	cmpl	$0xe, %ecx
    0000006f: 	jbe	.Ltmp1507 # Offset: 111
    00000075: 	movl	%r15d, %edx
    00000078: 	movl	%r15d, %r13d
    0000007b: 	leaq	0x10(%rbx), %rcx
    0000007f: 	andl	$-0x10, %r13d
    00000083: 	shrl	$0x4, %edx
    00000086: 	movq	%rcx, 0xc0(%rsp)
    0000008e: 	leal	0x1(%r13), %esi
    00000092: 	leal	-0x1(%rdx), %r9d
    00000096: 	movslq	%r13d, %rbp
    00000099: 	movl	%r13d, 0x8(%rsp)
    0000009e: 	movslq	%esi, %rdx
    000000a1: 	leal	0x2(%r13), %edi
    000000a5: 	shlq	$0x4, %r9
    000000a9: 	movl	%esi, 0xc(%rsp)
    000000ad: 	leaq	(%r9,%rcx), %r12
    000000b1: 	movslq	%edi, %r14
    000000b4: 	leaq	(%rbx,%rdx), %rcx
    000000b8: 	movl	%edi, 0x20(%rsp)
    000000bc: 	leaq	(%rbx,%r14), %rsi
    000000c0: 	movq	%rcx, 0x10(%rsp)
    000000c5: 	leal	0x3(%r13), %ecx
    000000c9: 	addq	%rbx, %rbp
    000000cc: 	movslq	%ecx, %rdx
    000000cf: 	movq	%rsi, 0x18(%rsp)
    000000d4: 	leal	0x4(%r13), %esi
    000000d8: 	leal	0x5(%r13), %edi
    000000dc: 	movl	%ecx, 0x24(%rsp)
    000000e0: 	leaq	(%rbx,%rdx), %rcx
    000000e4: 	movslq	%esi, %rdx
    000000e7: 	xorl	%r14d, %r14d
    000000ea: 	movl	%esi, 0x38(%rsp)
    000000ee: 	leaq	(%rbx,%rdx), %rsi
    000000f2: 	movslq	%edi, %rdx
    000000f5: 	movq	%rcx, 0x28(%rsp)
    000000fa: 	leaq	(%rbx,%rdx), %rcx
    000000fe: 	movq	%rcx, 0x40(%rsp)
    00000103: 	leal	0x6(%r13), %ecx
    00000107: 	movslq	%ecx, %rdx
    0000010a: 	movq	%rsi, 0x30(%rsp)
    0000010f: 	leaq	(%rbx,%rdx), %rsi
    00000113: 	movl	%edi, 0x3c(%rsp)
    00000117: 	leal	0x8(%r13), %edi
    0000011b: 	movq	%rsi, 0x48(%rsp)
    00000120: 	leal	0x7(%r13), %esi
    00000124: 	movslq	%esi, %rdx
    00000127: 	movl	%ecx, 0x50(%rsp)
    0000012b: 	leaq	(%rbx,%rdx), %rcx
    0000012f: 	movslq	%edi, %rdx
    00000132: 	movl	%edi, 0x60(%rsp)
    00000136: 	movq	%rcx, 0x58(%rsp)
    0000013b: 	leal	0x9(%r13), %ecx
    0000013f: 	leaq	(%rbx,%rdx), %rdi
    00000143: 	movslq	%ecx, %rdx
    00000146: 	movl	%esi, 0x54(%rsp)
    0000014a: 	leaq	(%rbx,%rdx), %rsi
    0000014e: 	movq	%rdi, 0x68(%rsp)
    00000153: 	leal	0xb(%r13), %edi
    00000157: 	movq	%rsi, 0x70(%rsp)
    0000015c: 	leal	0xa(%r13), %esi
    00000160: 	movslq	%esi, %rdx
    00000163: 	movl	%ecx, 0x78(%rsp)
    00000167: 	leaq	(%rbx,%rdx), %rcx
    0000016b: 	movslq	%edi, %rdx
    0000016e: 	movl	%esi, 0x7c(%rsp)
    00000172: 	leal	0xd(%r13), %esi
    00000176: 	addq	%rbx, %rdx
    00000179: 	movq	%rcx, 0x80(%rsp)
    00000181: 	leal	0xc(%r13), %ecx
    00000185: 	movq	%rdx, 0x88(%rsp)
    0000018d: 	movslq	%ecx, %rdx
    00000190: 	movl	%edi, 0x90(%rsp)
    00000197: 	leaq	(%rbx,%rdx), %rdi
    0000019b: 	movslq	%esi, %rdx
    0000019e: 	movq	%rdi, 0xa0(%rsp)
    000001a6: 	leal	0xe(%r13), %edi
    000001aa: 	movl	%esi, 0xb0(%rsp)
    000001b1: 	leaq	(%rbx,%rdx), %rsi
    000001b5: 	movslq	%edi, %rdx
    000001b8: 	movl	%ecx, 0x94(%rsp)
    000001bf: 	leaq	(%rbx,%rdx), %rcx
    000001c3: 	movq	%rsi, 0xa8(%rsp)
    000001cb: 	movq	%rcx, 0xb8(%rsp)
    000001d3: 	movl	%edi, 0xb4(%rsp)
    000001da: 	movq	%rbx, %rdi
    000001dd: 	movl	%r15d, %ebx
    000001e0: 	movl	%r14d, %r15d
    000001e3: 	movq	%r12, %r14
    000001e6: 	movq	%rbp, %r12
    000001e9: 	movl	0x64(%rsp), %ebp
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp1511:
    000001f0: 	testl	%ebx, %ebx
    000001f2: 	jle	.Ltmp1508 # Offset: 498
    000001f8: 	movl	%ebp, %edx
    000001fa: 	xorl	%esi, %esi
    000001fc: 	leaq	0x1(%rdx), %r13
    00000200: 	movq	%r13, %rdx
    00000203: 	callq	memset@PLT # Offset: 515
    00000208: 	movq	%r13, %rdx
    0000020b: 	movl	$0x1, %esi
    00000210: 	movq	%rax, %rdi
    00000213: 	callq	memset@PLT # Offset: 531
    00000218: 	movsd	init_value(%rip), %xmm1
    00000220: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000228: 	movq	%rax, %rdi
    0000022b: 	unpcklpd	%xmm1, %xmm1
    0000022f: 	cvttpd2dq	%xmm1, %xmm1
    00000233: 	punpcklqdq	%xmm1, %xmm1
    00000237: 	movdqa	%xmm1, %xmm2
    0000023b: 	punpckhwd	%xmm1, %xmm2
    0000023f: 	nop # Size: 1
.Ltmp1509:
    00000240: 	movdqa	%xmm1, %xmm0
    00000244: 	addq	$0x10, %rax
    00000248: 	punpcklwd	%xmm1, %xmm0
    0000024c: 	movdqa	%xmm0, %xmm3
    00000250: 	punpcklwd	%xmm2, %xmm0
    00000254: 	punpckhwd	%xmm2, %xmm3
    00000258: 	punpcklwd	%xmm3, %xmm0
    0000025c: 	pand	%xmm4, %xmm0
    00000260: 	packuswb	%xmm0, %xmm0
    00000264: 	movups	%xmm0, -0x10(%rax)
    00000268: 	cmpq	%r14, %rax
    0000026b: 	jne	.Ltmp1509 # Offset: 619
    0000026d: 	cmpl	0x8(%rsp), %ebx
    00000271: 	je	.Ltmp1510 # Offset: 625
    00000277: 	cvttsd2si	init_value(%rip), %eax
    0000027f: 	movb	%al, (%r12)
    00000283: 	cmpl	0xc(%rsp), %ebx
    00000287: 	jle	.Ltmp1510 # Offset: 647
    0000028d: 	cvttsd2si	init_value(%rip), %eax
    00000295: 	movq	0x10(%rsp), %rcx
    0000029a: 	movb	%al, (%rcx)
    0000029c: 	cmpl	0x20(%rsp), %ebx
    000002a0: 	jle	.Ltmp1510 # Offset: 672
    000002a6: 	cvttsd2si	init_value(%rip), %eax
    000002ae: 	movq	0x18(%rsp), %rcx
    000002b3: 	movb	%al, (%rcx)
    000002b5: 	cmpl	0x24(%rsp), %ebx
    000002b9: 	jle	.Ltmp1510 # Offset: 697
    000002bf: 	cvttsd2si	init_value(%rip), %eax
    000002c7: 	movq	0x28(%rsp), %rcx
    000002cc: 	movb	%al, (%rcx)
    000002ce: 	cmpl	0x38(%rsp), %ebx
    000002d2: 	jle	.Ltmp1510 # Offset: 722
    000002d8: 	cvttsd2si	init_value(%rip), %eax
    000002e0: 	movq	0x30(%rsp), %rcx
    000002e5: 	movb	%al, (%rcx)
    000002e7: 	cmpl	0x3c(%rsp), %ebx
    000002eb: 	jle	.Ltmp1510 # Offset: 747
    000002f1: 	cvttsd2si	init_value(%rip), %eax
    000002f9: 	movq	0x40(%rsp), %rcx
    000002fe: 	movb	%al, (%rcx)
    00000300: 	cmpl	0x50(%rsp), %ebx
    00000304: 	jle	.Ltmp1510 # Offset: 772
    0000030a: 	cvttsd2si	init_value(%rip), %eax
    00000312: 	movq	0x48(%rsp), %rcx
    00000317: 	movb	%al, (%rcx)
    00000319: 	cmpl	0x54(%rsp), %ebx
    0000031d: 	jle	.Ltmp1510 # Offset: 797
    00000323: 	cvttsd2si	init_value(%rip), %eax
    0000032b: 	movq	0x58(%rsp), %rsi
    00000330: 	movb	%al, (%rsi)
    00000332: 	cmpl	0x60(%rsp), %ebx
    00000336: 	jle	.Ltmp1510 # Offset: 822
    0000033c: 	cvttsd2si	init_value(%rip), %eax
    00000344: 	movq	0x68(%rsp), %rcx
    00000349: 	movb	%al, (%rcx)
    0000034b: 	cmpl	0x78(%rsp), %ebx
    0000034f: 	jle	.Ltmp1510 # Offset: 847
    00000355: 	cvttsd2si	init_value(%rip), %eax
    0000035d: 	movq	0x70(%rsp), %rcx
    00000362: 	movb	%al, (%rcx)
    00000364: 	cmpl	0x7c(%rsp), %ebx
    00000368: 	jle	.Ltmp1510 # Offset: 872
    0000036e: 	cvttsd2si	init_value(%rip), %eax
    00000376: 	movq	0x80(%rsp), %rsi
    0000037e: 	movb	%al, (%rsi)
    00000380: 	cmpl	0x90(%rsp), %ebx
    00000387: 	jle	.Ltmp1510 # Offset: 903
    00000389: 	cvttsd2si	init_value(%rip), %eax
    00000391: 	movq	0x88(%rsp), %rcx
    00000399: 	movb	%al, (%rcx)
    0000039b: 	cmpl	0x94(%rsp), %ebx
    000003a2: 	jle	.Ltmp1510 # Offset: 930
    000003a4: 	cvttsd2si	init_value(%rip), %eax
    000003ac: 	movq	0xa0(%rsp), %rsi
    000003b4: 	movb	%al, (%rsi)
    000003b6: 	cmpl	0xb0(%rsp), %ebx
    000003bd: 	jle	.Ltmp1510 # Offset: 957
    000003bf: 	cvttsd2si	init_value(%rip), %eax
    000003c7: 	movq	0xa8(%rsp), %rsi
    000003cf: 	movb	%al, (%rsi)
    000003d1: 	cmpl	0xb4(%rsp), %ebx
    000003d8: 	jle	.Ltmp1510 # Offset: 984
    000003da: 	cvttsd2si	init_value(%rip), %eax
    000003e2: 	movq	0xb8(%rsp), %rsi
    000003ea: 	movb	%al, (%rsi)
    000003ec: 	nopl	(%rax) # Size: 4
.Ltmp1510:
    000003f0: 	movl	iterations(%rip), %eax
.Ltmp1508:
    000003f6: 	addl	$0x1, %r15d
    000003fa: 	cmpl	%eax, %r15d
    000003fd: 	jl	.Ltmp1511 # Offset: 1021
    00000403: 	movl	%ebx, %r15d
    00000406: 	movq	%rdi, %rbx
    00000409: 	callq	clock@PLT # Offset: 1033
    0000040e: 	movq	0x98(%rsp), %rdi
    00000416: 	pxor	%xmm0, %xmm0
    0000041a: 	movq	%rax, end_time(%rip)
    00000421: 	subq	start_time(%rip), %rax
    00000428: 	cvtsi2sd	%rax, %xmm0
    0000042d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000435: 	callq	_Z13record_resultdPKc # Offset: 1077
    0000043a: 	testl	%r15d, %r15d
    0000043d: 	jle	.Ltmp1512 # Offset: 1085
.Ltmp1521:
    00000443: 	movl	%r15d, %edx
    00000446: 	movq	%rbx, %rax
    00000449: 	pxor	%xmm0, %xmm0
    0000044d: 	shrl	$0x4, %edx
    00000450: 	subl	$0x1, %edx
    00000453: 	shlq	$0x4, %rdx
    00000457: 	addq	0xc0(%rsp), %rdx
    0000045f: 	nop # Size: 1
.Ltmp1513:
    00000460: 	movdqu	(%rax), %xmm5
    00000464: 	addq	$0x10, %rax
    00000468: 	paddb	%xmm5, %xmm0
    0000046c: 	cmpq	%rdx, %rax
    0000046f: 	jne	.Ltmp1513 # Offset: 1135
    00000471: 	movdqa	%xmm0, %xmm1
    00000475: 	movl	%r15d, %esi
    00000478: 	psrldq	$0x8, %xmm1
    0000047d: 	andl	$-0x10, %esi
    00000480: 	paddb	%xmm1, %xmm0
    00000484: 	pxor	%xmm1, %xmm1
    00000488: 	movl	%esi, %edx
    0000048a: 	psadbw	%xmm1, %xmm0
    0000048e: 	movd	%xmm0, %eax
    00000492: 	cmpl	%r15d, %esi
    00000495: 	je	.Ltmp1514 # Offset: 1173
.Ltmp1522:
    0000049b: 	movl	%r15d, %edi
    0000049e: 	subl	%esi, %edi
    000004a0: 	leal	-0x1(%rdi), %r9d
    000004a4: 	cmpl	$0x6, %r9d
    000004a8: 	jbe	.Ltmp1515 # Offset: 1192
    000004aa: 	movq	(%rbx,%rsi), %xmm1
    000004af: 	pxor	%xmm0, %xmm0
    000004b3: 	movdqa	%xmm1, %xmm6
    000004b7: 	psadbw	%xmm0, %xmm6
    000004bb: 	movq	%xmm6, 0xc8(%rsp)
    000004c4: 	movq	%xmm6, %rsi
    000004c9: 	movl	%esi, %r9d
    000004cc: 	movl	%edi, %esi
    000004ce: 	andl	$-0x8, %esi
    000004d1: 	addl	%r9d, %eax
    000004d4: 	addl	%esi, %edx
    000004d6: 	cmpl	%esi, %edi
    000004d8: 	je	.Ltmp1514 # Offset: 1240
.Ltmp1515:
    000004da: 	movslq	%edx, %rsi
    000004dd: 	addb	(%rbx,%rsi), %al
    000004e0: 	leal	0x1(%rdx), %esi
    000004e3: 	cmpl	%esi, %r15d
    000004e6: 	jle	.Ltmp1514 # Offset: 1254
    000004e8: 	movslq	%esi, %rsi
    000004eb: 	addb	(%rbx,%rsi), %al
    000004ee: 	leal	0x2(%rdx), %esi
    000004f1: 	cmpl	%esi, %r15d
    000004f4: 	jle	.Ltmp1514 # Offset: 1268
    000004f6: 	movslq	%esi, %rsi
    000004f9: 	addb	(%rbx,%rsi), %al
    000004fc: 	leal	0x3(%rdx), %esi
    000004ff: 	cmpl	%esi, %r15d
    00000502: 	jle	.Ltmp1514 # Offset: 1282
    00000504: 	movslq	%esi, %rsi
    00000507: 	addb	(%rbx,%rsi), %al
    0000050a: 	leal	0x4(%rdx), %esi
    0000050d: 	cmpl	%esi, %r15d
    00000510: 	jle	.Ltmp1514 # Offset: 1296
    00000512: 	movslq	%esi, %rsi
    00000515: 	addb	(%rbx,%rsi), %al
    00000518: 	leal	0x5(%rdx), %esi
    0000051b: 	cmpl	%esi, %r15d
    0000051e: 	jle	.Ltmp1514 # Offset: 1310
    00000520: 	movslq	%esi, %rsi
    00000523: 	addl	$0x6, %edx
    00000526: 	addb	(%rbx,%rsi), %al
    00000529: 	cmpl	%edx, %r15d
    0000052c: 	jle	.Ltmp1514 # Offset: 1324
    0000052e: 	movslq	%edx, %rdx
    00000531: 	addb	(%rbx,%rdx), %al
.Ltmp1514:
    00000534: 	testb	%al, %al
    00000536: 	jne	.Ltmp1516 # Offset: 1334
.Ltmp1512:
    00000538: 	addq	$0xd8, %rsp
    0000053f: 	popq	%rbx
    00000540: 	popq	%rbp
    00000541: 	popq	%r12
    00000543: 	popq	%r13
    00000545: 	popq	%r14
    00000547: 	popq	%r15
    00000549: 	retq # Offset: 1353
.Ltmp1516:
    0000054a: 	movq	0x98(%rsp), %rsi
    00000552: 	addq	$0xd8, %rsp
    00000559: 	movzbl	%al, %edi
    0000055c: 	popq	%rbx
    0000055d: 	popq	%rbp
    0000055e: 	popq	%r12
    00000560: 	popq	%r13
    00000562: 	popq	%r14
    00000564: 	popq	%r15
    00000566: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1382
.Ltmp1507:
    0000056b: 	xorl	%r13d, %r13d
    0000056e: 	leaq	0x1(%rbx), %rbp
    00000572: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1519:
    00000578: 	testl	%r15d, %r15d
    0000057b: 	jle	.Ltmp1517 # Offset: 1403
    0000057d: 	movl	0x64(%rsp), %r14d
    00000582: 	xorl	%esi, %esi
    00000584: 	movq	%rbx, %rdi
    00000587: 	leaq	0x1(%r14), %r12
    0000058b: 	movq	%r12, %rdx
    0000058e: 	callq	memset@PLT # Offset: 1422
    00000593: 	movq	%r12, %rdx
    00000596: 	movl	$0x1, %esi
    0000059b: 	movq	%rbx, %rdi
    0000059e: 	callq	memset@PLT # Offset: 1438
    000005a3: 	leaq	(%rbp,%r14), %rcx
    000005a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1518:
    000005b0: 	cvttsd2si	init_value(%rip), %edx
    000005b8: 	addq	$0x1, %rax
    000005bc: 	movb	%dl, -0x1(%rax)
    000005bf: 	cmpq	%rax, %rcx
    000005c2: 	jne	.Ltmp1518 # Offset: 1474
    000005c4: 	movl	iterations(%rip), %eax
.Ltmp1517:
    000005ca: 	addl	$0x1, %r13d
    000005ce: 	cmpl	%r13d, %eax
    000005d1: 	jg	.Ltmp1519 # Offset: 1489
.Ltmp1506:
    000005d3: 	callq	clock@PLT # Offset: 1491
    000005d8: 	movq	0x98(%rsp), %rdi
    000005e0: 	pxor	%xmm0, %xmm0
    000005e4: 	movq	%rax, end_time(%rip)
    000005eb: 	subq	start_time(%rip), %rax
    000005f2: 	cvtsi2sd	%rax, %xmm0
    000005f7: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000005ff: 	callq	_Z13record_resultdPKc # Offset: 1535
    00000604: 	testl	%r15d, %r15d
    00000607: 	jle	.Ltmp1512 # Offset: 1543
    0000060d: 	leal	-0x1(%r15), %eax
    00000611: 	cmpl	$0xe, %eax
    00000614: 	jbe	.Ltmp1520 # Offset: 1556
    00000616: 	leaq	0x10(%rbx), %rax
    0000061a: 	movq	%rax, 0xc0(%rsp)
    00000622: 	jmp	.Ltmp1521 # Offset: 1570
.Ltmp1520:
    00000627: 	xorl	%esi, %esi
    00000629: 	xorl	%eax, %eax
    0000062b: 	xorl	%edx, %edx
    0000062d: 	jmp	.Ltmp1522 # Offset: 1581
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_replace3IhEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace4IhEvPT_iPKc" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x23d10
  Size        : 0x649
  MaxSize     : 0x650
  Offset      : 0x23d10
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x98(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1523 # Offset: 55
    0000003d: 	movl	%r13d, %eax
    00000040: 	leaq	init_value(%rip), %rdx
    00000047: 	leal	-0x1(%r13), %ebx
    0000004b: 	movslq	%r13d, %r12
    0000004e: 	addq	%r14, %rax
    00000051: 	movl	%ebx, 0x4(%rsp)
    00000055: 	cmpq	%rdx, %rax
    00000058: 	setbe	%al
    0000005b: 	addq	$0x8, %rdx
    0000005f: 	cmpq	%rdx, %r14
    00000062: 	setae	%dl
    00000065: 	orb	%dl, %al
    00000067: 	je	.Ltmp1524 # Offset: 103
    0000006d: 	cmpl	$0xe, %ebx
    00000070: 	jbe	.Ltmp1524 # Offset: 112
    00000076: 	movl	%r13d, %eax
    00000079: 	movl	%r13d, %ebp
    0000007c: 	movq	%r14, %rdi
    0000007f: 	xorl	%ebx, %ebx
    00000081: 	shrl	$0x4, %eax
    00000084: 	andl	$-0x10, %ebp
    00000087: 	leal	-0x1(%rax), %r9d
    0000008b: 	leaq	0x10(%r14), %rax
    0000008f: 	shlq	$0x4, %r9
    00000093: 	movq	%rax, 0xc0(%rsp)
    0000009b: 	leaq	(%r9,%rax), %r15
    0000009f: 	movslq	%ebp, %rax
    000000a2: 	addq	%r14, %rax
    000000a5: 	movq	%rax, 0x8(%rsp)
    000000aa: 	leal	0x1(%rbp), %eax
    000000ad: 	movl	%eax, 0x18(%rsp)
    000000b1: 	cltq
    000000b3: 	addq	%r14, %rax
    000000b6: 	movq	%rax, 0x10(%rsp)
    000000bb: 	leal	0x2(%rbp), %eax
    000000be: 	movl	%eax, 0x1c(%rsp)
    000000c2: 	cltq
    000000c4: 	addq	%r14, %rax
    000000c7: 	movq	%rax, 0x20(%rsp)
    000000cc: 	leal	0x3(%rbp), %eax
    000000cf: 	movl	%eax, 0x30(%rsp)
    000000d3: 	cltq
    000000d5: 	addq	%r14, %rax
    000000d8: 	movq	%rax, 0x28(%rsp)
    000000dd: 	leal	0x4(%rbp), %eax
    000000e0: 	movl	%eax, 0x34(%rsp)
    000000e4: 	cltq
    000000e6: 	addq	%r14, %rax
    000000e9: 	movq	%rax, 0x38(%rsp)
    000000ee: 	leal	0x5(%rbp), %eax
    000000f1: 	movl	%eax, 0x48(%rsp)
    000000f5: 	cltq
    000000f7: 	addq	%r14, %rax
    000000fa: 	movq	%rax, 0x40(%rsp)
    000000ff: 	leal	0x6(%rbp), %eax
    00000102: 	movl	%eax, 0x4c(%rsp)
    00000106: 	cltq
    00000108: 	addq	%r14, %rax
    0000010b: 	movq	%rax, 0x50(%rsp)
    00000110: 	leal	0x7(%rbp), %eax
    00000113: 	movl	%eax, 0x60(%rsp)
    00000117: 	cltq
    00000119: 	addq	%r14, %rax
    0000011c: 	movq	%rax, 0x58(%rsp)
    00000121: 	leal	0x8(%rbp), %eax
    00000124: 	movl	%eax, 0x64(%rsp)
    00000128: 	cltq
    0000012a: 	addq	%r14, %rax
    0000012d: 	movq	%rax, 0x68(%rsp)
    00000132: 	leal	0x9(%rbp), %eax
    00000135: 	movl	%eax, 0x78(%rsp)
    00000139: 	cltq
    0000013b: 	addq	%r14, %rax
    0000013e: 	movq	%rax, 0x70(%rsp)
    00000143: 	leal	0xa(%rbp), %eax
    00000146: 	movl	%eax, 0x7c(%rsp)
    0000014a: 	cltq
    0000014c: 	addq	%r14, %rax
    0000014f: 	movq	%rax, 0x80(%rsp)
    00000157: 	leal	0xb(%rbp), %eax
    0000015a: 	movl	%eax, 0x90(%rsp)
    00000161: 	cltq
    00000163: 	addq	%r14, %rax
    00000166: 	movq	%rax, 0x88(%rsp)
    0000016e: 	leal	0xc(%rbp), %eax
    00000171: 	movl	%eax, 0x94(%rsp)
    00000178: 	cltq
    0000017a: 	addq	%r14, %rax
    0000017d: 	movq	%rax, 0xa0(%rsp)
    00000185: 	leal	0xd(%rbp), %eax
    00000188: 	movl	%eax, 0xb0(%rsp)
    0000018f: 	cltq
    00000191: 	addq	%r14, %rax
    00000194: 	movq	%rax, 0xa8(%rsp)
    0000019c: 	leal	0xe(%rbp), %eax
    0000019f: 	movl	%eax, 0xb4(%rsp)
    000001a6: 	cltq
    000001a8: 	addq	%r14, %rax
    000001ab: 	movl	%r13d, %r14d
    000001ae: 	movq	%rax, 0xb8(%rsp)
    000001b6: 	movl	%ebp, %eax
    000001b8: 	movq	%r15, %rbp
    000001bb: 	movl	%eax, %r15d
    000001be: 	nop # Size: 2
.Ltmp1527:
    000001c0: 	movq	%r12, %rdx
    000001c3: 	xorl	%esi, %esi
    000001c5: 	callq	memset@PLT # Offset: 453
    000001ca: 	movq	%rax, %rdi
    000001cd: 	testl	%r14d, %r14d
    000001d0: 	jle	.Ltmp1525 # Offset: 464
    000001d6: 	movl	0x4(%rsp), %edx
    000001da: 	movl	$0xb, %esi
    000001df: 	leaq	0x1(%rdx), %r13
    000001e3: 	movq	%r13, %rdx
    000001e6: 	callq	memset@PLT # Offset: 486
    000001eb: 	movq	%r13, %rdx
    000001ee: 	movl	$0x63, %esi
    000001f3: 	movq	%rax, %rdi
    000001f6: 	callq	memset@PLT # Offset: 502
    000001fb: 	movsd	init_value(%rip), %xmm1
    00000203: 	movdqa	DATAat0x36f20(%rip), %xmm4
    0000020b: 	movq	%rax, %rdi
    0000020e: 	unpcklpd	%xmm1, %xmm1
    00000212: 	cvttpd2dq	%xmm1, %xmm1
    00000216: 	punpcklqdq	%xmm1, %xmm1
    0000021a: 	movdqa	%xmm1, %xmm2
    0000021e: 	punpckhwd	%xmm1, %xmm2
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1526:
    00000228: 	movdqa	%xmm1, %xmm0
    0000022c: 	addq	$0x10, %rax
    00000230: 	punpcklwd	%xmm1, %xmm0
    00000234: 	movdqa	%xmm0, %xmm3
    00000238: 	punpcklwd	%xmm2, %xmm0
    0000023c: 	punpckhwd	%xmm2, %xmm3
    00000240: 	punpcklwd	%xmm3, %xmm0
    00000244: 	pand	%xmm4, %xmm0
    00000248: 	packuswb	%xmm0, %xmm0
    0000024c: 	movups	%xmm0, -0x10(%rax)
    00000250: 	cmpq	%rbp, %rax
    00000253: 	jne	.Ltmp1526 # Offset: 595
    00000255: 	cmpl	%r15d, %r14d
    00000258: 	je	.Ltmp1525 # Offset: 600
    0000025e: 	cvttsd2si	init_value(%rip), %eax
    00000266: 	movq	0x8(%rsp), %rcx
    0000026b: 	movb	%al, (%rcx)
    0000026d: 	cmpl	0x18(%rsp), %r14d
    00000272: 	jle	.Ltmp1525 # Offset: 626
    00000278: 	cvttsd2si	init_value(%rip), %eax
    00000280: 	movq	0x10(%rsp), %rcx
    00000285: 	movb	%al, (%rcx)
    00000287: 	cmpl	0x1c(%rsp), %r14d
    0000028c: 	jle	.Ltmp1525 # Offset: 652
    00000292: 	cvttsd2si	init_value(%rip), %eax
    0000029a: 	movq	0x20(%rsp), %rcx
    0000029f: 	movb	%al, (%rcx)
    000002a1: 	cmpl	0x30(%rsp), %r14d
    000002a6: 	jle	.Ltmp1525 # Offset: 678
    000002ac: 	cvttsd2si	init_value(%rip), %eax
    000002b4: 	movq	0x28(%rsp), %rcx
    000002b9: 	movb	%al, (%rcx)
    000002bb: 	cmpl	0x34(%rsp), %r14d
    000002c0: 	jle	.Ltmp1525 # Offset: 704
    000002c6: 	cvttsd2si	init_value(%rip), %eax
    000002ce: 	movq	0x38(%rsp), %rcx
    000002d3: 	movb	%al, (%rcx)
    000002d5: 	cmpl	0x48(%rsp), %r14d
    000002da: 	jle	.Ltmp1525 # Offset: 730
    000002e0: 	cvttsd2si	init_value(%rip), %eax
    000002e8: 	movq	0x40(%rsp), %rsi
    000002ed: 	movb	%al, (%rsi)
    000002ef: 	cmpl	0x4c(%rsp), %r14d
    000002f4: 	jle	.Ltmp1525 # Offset: 756
    000002fa: 	cvttsd2si	init_value(%rip), %eax
    00000302: 	movq	0x50(%rsp), %rcx
    00000307: 	movb	%al, (%rcx)
    00000309: 	cmpl	0x60(%rsp), %r14d
    0000030e: 	jle	.Ltmp1525 # Offset: 782
    00000314: 	cvttsd2si	init_value(%rip), %eax
    0000031c: 	movq	0x58(%rsp), %rcx
    00000321: 	movb	%al, (%rcx)
    00000323: 	cmpl	0x64(%rsp), %r14d
    00000328: 	jle	.Ltmp1525 # Offset: 808
    0000032e: 	cvttsd2si	init_value(%rip), %eax
    00000336: 	movq	0x68(%rsp), %rsi
    0000033b: 	movb	%al, (%rsi)
    0000033d: 	cmpl	0x78(%rsp), %r14d
    00000342: 	jle	.Ltmp1525 # Offset: 834
    00000348: 	cvttsd2si	init_value(%rip), %eax
    00000350: 	movq	0x70(%rsp), %rcx
    00000355: 	movb	%al, (%rcx)
    00000357: 	cmpl	0x7c(%rsp), %r14d
    0000035c: 	jle	.Ltmp1525 # Offset: 860
    00000362: 	cvttsd2si	init_value(%rip), %eax
    0000036a: 	movq	0x80(%rsp), %rcx
    00000372: 	movb	%al, (%rcx)
    00000374: 	cmpl	0x90(%rsp), %r14d
    0000037c: 	jle	.Ltmp1525 # Offset: 892
    0000037e: 	cvttsd2si	init_value(%rip), %eax
    00000386: 	movq	0x88(%rsp), %rsi
    0000038e: 	movb	%al, (%rsi)
    00000390: 	cmpl	0x94(%rsp), %r14d
    00000398: 	jle	.Ltmp1525 # Offset: 920
    0000039a: 	cvttsd2si	init_value(%rip), %eax
    000003a2: 	movq	0xa0(%rsp), %rcx
    000003aa: 	movb	%al, (%rcx)
    000003ac: 	cmpl	0xb0(%rsp), %r14d
    000003b4: 	jle	.Ltmp1525 # Offset: 948
    000003b6: 	cvttsd2si	init_value(%rip), %eax
    000003be: 	movq	0xa8(%rsp), %rcx
    000003c6: 	movb	%al, (%rcx)
    000003c8: 	cmpl	0xb4(%rsp), %r14d
    000003d0: 	jle	.Ltmp1525 # Offset: 976
    000003d2: 	cvttsd2si	init_value(%rip), %eax
    000003da: 	movq	0xb8(%rsp), %rsi
    000003e2: 	movb	%al, (%rsi)
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp1525:
    000003e8: 	addl	$0x1, %ebx
    000003eb: 	cmpl	%ebx, iterations(%rip)
    000003f1: 	jg	.Ltmp1527 # Offset: 1009
    000003f7: 	movl	%r14d, %r13d
    000003fa: 	movq	%rdi, %r14
    000003fd: 	callq	clock@PLT # Offset: 1021
    00000402: 	movq	0x98(%rsp), %rdi
    0000040a: 	pxor	%xmm0, %xmm0
    0000040e: 	movq	%rax, end_time(%rip)
    00000415: 	subq	start_time(%rip), %rax
    0000041c: 	cvtsi2sd	%rax, %xmm0
    00000421: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000429: 	callq	_Z13record_resultdPKc # Offset: 1065
    0000042e: 	testl	%r13d, %r13d
    00000431: 	jle	.Ltmp1528 # Offset: 1073
.Ltmp1537:
    00000437: 	movl	%r13d, %edx
    0000043a: 	movq	%r14, %rax
    0000043d: 	pxor	%xmm0, %xmm0
    00000441: 	shrl	$0x4, %edx
    00000444: 	subl	$0x1, %edx
    00000447: 	shlq	$0x4, %rdx
    0000044b: 	addq	0xc0(%rsp), %rdx
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1529:
    00000458: 	movdqu	(%rax), %xmm5
    0000045c: 	addq	$0x10, %rax
    00000460: 	paddb	%xmm5, %xmm0
    00000464: 	cmpq	%rdx, %rax
    00000467: 	jne	.Ltmp1529 # Offset: 1127
    00000469: 	movdqa	%xmm0, %xmm1
    0000046d: 	movl	%r13d, %esi
    00000470: 	psrldq	$0x8, %xmm1
    00000475: 	andl	$-0x10, %esi
    00000478: 	paddb	%xmm1, %xmm0
    0000047c: 	pxor	%xmm1, %xmm1
    00000480: 	movl	%esi, %edx
    00000482: 	psadbw	%xmm1, %xmm0
    00000486: 	movd	%xmm0, %eax
    0000048a: 	cmpl	%r13d, %esi
    0000048d: 	je	.Ltmp1530 # Offset: 1165
.Ltmp1538:
    00000493: 	movl	%r13d, %edi
    00000496: 	subl	%esi, %edi
    00000498: 	leal	-0x1(%rdi), %r9d
    0000049c: 	cmpl	$0x6, %r9d
    000004a0: 	jbe	.Ltmp1531 # Offset: 1184
    000004a2: 	movq	(%r14,%rsi), %xmm1
    000004a8: 	pxor	%xmm0, %xmm0
    000004ac: 	movdqa	%xmm1, %xmm6
    000004b0: 	psadbw	%xmm0, %xmm6
    000004b4: 	movq	%xmm6, 0xc8(%rsp)
    000004bd: 	movq	%xmm6, %rsi
    000004c2: 	movl	%esi, %r9d
    000004c5: 	movl	%edi, %esi
    000004c7: 	andl	$-0x8, %esi
    000004ca: 	addl	%r9d, %eax
    000004cd: 	addl	%esi, %edx
    000004cf: 	cmpl	%esi, %edi
    000004d1: 	je	.Ltmp1530 # Offset: 1233
.Ltmp1531:
    000004d3: 	movslq	%edx, %rsi
    000004d6: 	addb	(%r14,%rsi), %al
    000004da: 	leal	0x1(%rdx), %esi
    000004dd: 	cmpl	%esi, %r13d
    000004e0: 	jle	.Ltmp1530 # Offset: 1248
    000004e2: 	movslq	%esi, %rsi
    000004e5: 	addb	(%r14,%rsi), %al
    000004e9: 	leal	0x2(%rdx), %esi
    000004ec: 	cmpl	%esi, %r13d
    000004ef: 	jle	.Ltmp1530 # Offset: 1263
    000004f1: 	movslq	%esi, %rsi
    000004f4: 	addb	(%r14,%rsi), %al
    000004f8: 	leal	0x3(%rdx), %esi
    000004fb: 	cmpl	%esi, %r13d
    000004fe: 	jle	.Ltmp1530 # Offset: 1278
    00000500: 	movslq	%esi, %rsi
    00000503: 	addb	(%r14,%rsi), %al
    00000507: 	leal	0x4(%rdx), %esi
    0000050a: 	cmpl	%esi, %r13d
    0000050d: 	jle	.Ltmp1530 # Offset: 1293
    0000050f: 	movslq	%esi, %rsi
    00000512: 	addb	(%r14,%rsi), %al
    00000516: 	leal	0x5(%rdx), %esi
    00000519: 	cmpl	%esi, %r13d
    0000051c: 	jle	.Ltmp1530 # Offset: 1308
    0000051e: 	movslq	%esi, %rsi
    00000521: 	addl	$0x6, %edx
    00000524: 	addb	(%r14,%rsi), %al
    00000528: 	cmpl	%edx, %r13d
    0000052b: 	jle	.Ltmp1530 # Offset: 1323
    0000052d: 	movslq	%edx, %rdx
    00000530: 	addb	(%r14,%rdx), %al
.Ltmp1530:
    00000534: 	testb	%al, %al
    00000536: 	jne	.Ltmp1532 # Offset: 1334
.Ltmp1528:
    00000538: 	addq	$0xd8, %rsp
    0000053f: 	popq	%rbx
    00000540: 	popq	%rbp
    00000541: 	popq	%r12
    00000543: 	popq	%r13
    00000545: 	popq	%r14
    00000547: 	popq	%r15
    00000549: 	retq # Offset: 1353
.Ltmp1532:
    0000054a: 	movq	0x98(%rsp), %rsi
    00000552: 	addq	$0xd8, %rsp
    00000559: 	movzbl	%al, %edi
    0000055c: 	popq	%rbx
    0000055d: 	popq	%rbp
    0000055e: 	popq	%r12
    00000560: 	popq	%r13
    00000562: 	popq	%r14
    00000564: 	popq	%r15
    00000566: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1382
.Ltmp1524:
    0000056b: 	leaq	0x1(%r14), %rax
    0000056f: 	movl	0x4(%rsp), %ebp
    00000573: 	xorl	%ebx, %ebx
    00000575: 	movq	%r14, %rdi
    00000578: 	movq	%rax, 0x8(%rsp)
    0000057d: 	nopl	(%rax) # Size: 3
.Ltmp1535:
    00000580: 	movq	%r12, %rdx
    00000583: 	xorl	%esi, %esi
    00000585: 	callq	memset@PLT # Offset: 1413
    0000058a: 	movq	%rax, %rdi
    0000058d: 	testl	%r13d, %r13d
    00000590: 	jle	.Ltmp1533 # Offset: 1424
    00000592: 	movl	%ebp, %r14d
    00000595: 	movl	$0xb, %esi
    0000059a: 	leaq	0x1(%r14), %r15
    0000059e: 	movq	%r15, %rdx
    000005a1: 	callq	memset@PLT # Offset: 1441
    000005a6: 	movl	$0x63, %esi
    000005ab: 	movq	%r15, %rdx
    000005ae: 	movq	%rax, %rdi
    000005b1: 	callq	memset@PLT # Offset: 1457
    000005b6: 	movq	0x8(%rsp), %rsi
    000005bb: 	movq	%rax, %rdi
    000005be: 	leaq	(%rsi,%r14), %rcx
    000005c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1534:
    000005c8: 	cvttsd2si	init_value(%rip), %edx
    000005d0: 	addq	$0x1, %rax
    000005d4: 	movb	%dl, -0x1(%rax)
    000005d7: 	cmpq	%rax, %rcx
    000005da: 	jne	.Ltmp1534 # Offset: 1498
.Ltmp1533:
    000005dc: 	addl	$0x1, %ebx
    000005df: 	cmpl	iterations(%rip), %ebx
    000005e5: 	jl	.Ltmp1535 # Offset: 1509
    000005e7: 	movq	%rdi, %r14
.Ltmp1523:
    000005ea: 	callq	clock@PLT # Offset: 1514
    000005ef: 	movq	0x98(%rsp), %rdi
    000005f7: 	pxor	%xmm0, %xmm0
    000005fb: 	movq	%rax, end_time(%rip)
    00000602: 	subq	start_time(%rip), %rax
    00000609: 	cvtsi2sd	%rax, %xmm0
    0000060e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000616: 	callq	_Z13record_resultdPKc # Offset: 1558
    0000061b: 	testl	%r13d, %r13d
    0000061e: 	jle	.Ltmp1528 # Offset: 1566
    00000624: 	leal	-0x1(%r13), %eax
    00000628: 	cmpl	$0xe, %eax
    0000062b: 	jbe	.Ltmp1536 # Offset: 1579
    0000062d: 	leaq	0x10(%r14), %rax
    00000631: 	movq	%rax, 0xc0(%rsp)
    00000639: 	jmp	.Ltmp1537 # Offset: 1593
.Ltmp1536:
    0000063e: 	xorl	%esi, %esi
    00000640: 	xorl	%eax, %eax
    00000642: 	xorl	%edx, %edx
    00000644: 	jmp	.Ltmp1538 # Offset: 1604
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace4IhEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace4IhEvPT_iPKc" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x24360
  Size        : 0x649
  MaxSize     : 0x650
  Offset      : 0x24360
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x98(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1539 # Offset: 55
    0000003d: 	movl	%r13d, %eax
    00000040: 	leaq	init_value(%rip), %rdx
    00000047: 	leal	-0x1(%r13), %ebx
    0000004b: 	movslq	%r13d, %r12
    0000004e: 	addq	%r14, %rax
    00000051: 	movl	%ebx, 0x4(%rsp)
    00000055: 	cmpq	%rdx, %rax
    00000058: 	setbe	%al
    0000005b: 	addq	$0x8, %rdx
    0000005f: 	cmpq	%rdx, %r14
    00000062: 	setae	%dl
    00000065: 	orb	%dl, %al
    00000067: 	je	.Ltmp1540 # Offset: 103
    0000006d: 	cmpl	$0xe, %ebx
    00000070: 	jbe	.Ltmp1540 # Offset: 112
    00000076: 	movl	%r13d, %eax
    00000079: 	movl	%r13d, %ebp
    0000007c: 	movq	%r14, %rdi
    0000007f: 	xorl	%ebx, %ebx
    00000081: 	shrl	$0x4, %eax
    00000084: 	andl	$-0x10, %ebp
    00000087: 	leal	-0x1(%rax), %r9d
    0000008b: 	leaq	0x10(%r14), %rax
    0000008f: 	shlq	$0x4, %r9
    00000093: 	movq	%rax, 0xc0(%rsp)
    0000009b: 	leaq	(%r9,%rax), %r15
    0000009f: 	movslq	%ebp, %rax
    000000a2: 	addq	%r14, %rax
    000000a5: 	movq	%rax, 0x8(%rsp)
    000000aa: 	leal	0x1(%rbp), %eax
    000000ad: 	movl	%eax, 0x18(%rsp)
    000000b1: 	cltq
    000000b3: 	addq	%r14, %rax
    000000b6: 	movq	%rax, 0x10(%rsp)
    000000bb: 	leal	0x2(%rbp), %eax
    000000be: 	movl	%eax, 0x1c(%rsp)
    000000c2: 	cltq
    000000c4: 	addq	%r14, %rax
    000000c7: 	movq	%rax, 0x20(%rsp)
    000000cc: 	leal	0x3(%rbp), %eax
    000000cf: 	movl	%eax, 0x30(%rsp)
    000000d3: 	cltq
    000000d5: 	addq	%r14, %rax
    000000d8: 	movq	%rax, 0x28(%rsp)
    000000dd: 	leal	0x4(%rbp), %eax
    000000e0: 	movl	%eax, 0x34(%rsp)
    000000e4: 	cltq
    000000e6: 	addq	%r14, %rax
    000000e9: 	movq	%rax, 0x38(%rsp)
    000000ee: 	leal	0x5(%rbp), %eax
    000000f1: 	movl	%eax, 0x48(%rsp)
    000000f5: 	cltq
    000000f7: 	addq	%r14, %rax
    000000fa: 	movq	%rax, 0x40(%rsp)
    000000ff: 	leal	0x6(%rbp), %eax
    00000102: 	movl	%eax, 0x4c(%rsp)
    00000106: 	cltq
    00000108: 	addq	%r14, %rax
    0000010b: 	movq	%rax, 0x50(%rsp)
    00000110: 	leal	0x7(%rbp), %eax
    00000113: 	movl	%eax, 0x60(%rsp)
    00000117: 	cltq
    00000119: 	addq	%r14, %rax
    0000011c: 	movq	%rax, 0x58(%rsp)
    00000121: 	leal	0x8(%rbp), %eax
    00000124: 	movl	%eax, 0x64(%rsp)
    00000128: 	cltq
    0000012a: 	addq	%r14, %rax
    0000012d: 	movq	%rax, 0x68(%rsp)
    00000132: 	leal	0x9(%rbp), %eax
    00000135: 	movl	%eax, 0x78(%rsp)
    00000139: 	cltq
    0000013b: 	addq	%r14, %rax
    0000013e: 	movq	%rax, 0x70(%rsp)
    00000143: 	leal	0xa(%rbp), %eax
    00000146: 	movl	%eax, 0x7c(%rsp)
    0000014a: 	cltq
    0000014c: 	addq	%r14, %rax
    0000014f: 	movq	%rax, 0x80(%rsp)
    00000157: 	leal	0xb(%rbp), %eax
    0000015a: 	movl	%eax, 0x90(%rsp)
    00000161: 	cltq
    00000163: 	addq	%r14, %rax
    00000166: 	movq	%rax, 0x88(%rsp)
    0000016e: 	leal	0xc(%rbp), %eax
    00000171: 	movl	%eax, 0x94(%rsp)
    00000178: 	cltq
    0000017a: 	addq	%r14, %rax
    0000017d: 	movq	%rax, 0xa0(%rsp)
    00000185: 	leal	0xd(%rbp), %eax
    00000188: 	movl	%eax, 0xb0(%rsp)
    0000018f: 	cltq
    00000191: 	addq	%r14, %rax
    00000194: 	movq	%rax, 0xa8(%rsp)
    0000019c: 	leal	0xe(%rbp), %eax
    0000019f: 	movl	%eax, 0xb4(%rsp)
    000001a6: 	cltq
    000001a8: 	addq	%r14, %rax
    000001ab: 	movl	%r13d, %r14d
    000001ae: 	movq	%rax, 0xb8(%rsp)
    000001b6: 	movl	%ebp, %eax
    000001b8: 	movq	%r15, %rbp
    000001bb: 	movl	%eax, %r15d
    000001be: 	nop # Size: 2
.Ltmp1543:
    000001c0: 	movq	%r12, %rdx
    000001c3: 	xorl	%esi, %esi
    000001c5: 	callq	memset@PLT # Offset: 453
    000001ca: 	movq	%rax, %rdi
    000001cd: 	testl	%r14d, %r14d
    000001d0: 	jle	.Ltmp1541 # Offset: 464
    000001d6: 	movl	0x4(%rsp), %edx
    000001da: 	movl	$0xb, %esi
    000001df: 	leaq	0x1(%rdx), %r13
    000001e3: 	movq	%r13, %rdx
    000001e6: 	callq	memset@PLT # Offset: 486
    000001eb: 	movq	%r13, %rdx
    000001ee: 	movl	$0x63, %esi
    000001f3: 	movq	%rax, %rdi
    000001f6: 	callq	memset@PLT # Offset: 502
    000001fb: 	movsd	init_value(%rip), %xmm1
    00000203: 	movdqa	DATAat0x36f20(%rip), %xmm4
    0000020b: 	movq	%rax, %rdi
    0000020e: 	unpcklpd	%xmm1, %xmm1
    00000212: 	cvttpd2dq	%xmm1, %xmm1
    00000216: 	punpcklqdq	%xmm1, %xmm1
    0000021a: 	movdqa	%xmm1, %xmm2
    0000021e: 	punpckhwd	%xmm1, %xmm2
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1542:
    00000228: 	movdqa	%xmm1, %xmm0
    0000022c: 	addq	$0x10, %rax
    00000230: 	punpcklwd	%xmm1, %xmm0
    00000234: 	movdqa	%xmm0, %xmm3
    00000238: 	punpcklwd	%xmm2, %xmm0
    0000023c: 	punpckhwd	%xmm2, %xmm3
    00000240: 	punpcklwd	%xmm3, %xmm0
    00000244: 	pand	%xmm4, %xmm0
    00000248: 	packuswb	%xmm0, %xmm0
    0000024c: 	movups	%xmm0, -0x10(%rax)
    00000250: 	cmpq	%rbp, %rax
    00000253: 	jne	.Ltmp1542 # Offset: 595
    00000255: 	cmpl	%r15d, %r14d
    00000258: 	je	.Ltmp1541 # Offset: 600
    0000025e: 	cvttsd2si	init_value(%rip), %eax
    00000266: 	movq	0x8(%rsp), %rcx
    0000026b: 	movb	%al, (%rcx)
    0000026d: 	cmpl	0x18(%rsp), %r14d
    00000272: 	jle	.Ltmp1541 # Offset: 626
    00000278: 	cvttsd2si	init_value(%rip), %eax
    00000280: 	movq	0x10(%rsp), %rcx
    00000285: 	movb	%al, (%rcx)
    00000287: 	cmpl	0x1c(%rsp), %r14d
    0000028c: 	jle	.Ltmp1541 # Offset: 652
    00000292: 	cvttsd2si	init_value(%rip), %eax
    0000029a: 	movq	0x20(%rsp), %rcx
    0000029f: 	movb	%al, (%rcx)
    000002a1: 	cmpl	0x30(%rsp), %r14d
    000002a6: 	jle	.Ltmp1541 # Offset: 678
    000002ac: 	cvttsd2si	init_value(%rip), %eax
    000002b4: 	movq	0x28(%rsp), %rcx
    000002b9: 	movb	%al, (%rcx)
    000002bb: 	cmpl	0x34(%rsp), %r14d
    000002c0: 	jle	.Ltmp1541 # Offset: 704
    000002c6: 	cvttsd2si	init_value(%rip), %eax
    000002ce: 	movq	0x38(%rsp), %rcx
    000002d3: 	movb	%al, (%rcx)
    000002d5: 	cmpl	0x48(%rsp), %r14d
    000002da: 	jle	.Ltmp1541 # Offset: 730
    000002e0: 	cvttsd2si	init_value(%rip), %eax
    000002e8: 	movq	0x40(%rsp), %rsi
    000002ed: 	movb	%al, (%rsi)
    000002ef: 	cmpl	0x4c(%rsp), %r14d
    000002f4: 	jle	.Ltmp1541 # Offset: 756
    000002fa: 	cvttsd2si	init_value(%rip), %eax
    00000302: 	movq	0x50(%rsp), %rcx
    00000307: 	movb	%al, (%rcx)
    00000309: 	cmpl	0x60(%rsp), %r14d
    0000030e: 	jle	.Ltmp1541 # Offset: 782
    00000314: 	cvttsd2si	init_value(%rip), %eax
    0000031c: 	movq	0x58(%rsp), %rcx
    00000321: 	movb	%al, (%rcx)
    00000323: 	cmpl	0x64(%rsp), %r14d
    00000328: 	jle	.Ltmp1541 # Offset: 808
    0000032e: 	cvttsd2si	init_value(%rip), %eax
    00000336: 	movq	0x68(%rsp), %rsi
    0000033b: 	movb	%al, (%rsi)
    0000033d: 	cmpl	0x78(%rsp), %r14d
    00000342: 	jle	.Ltmp1541 # Offset: 834
    00000348: 	cvttsd2si	init_value(%rip), %eax
    00000350: 	movq	0x70(%rsp), %rcx
    00000355: 	movb	%al, (%rcx)
    00000357: 	cmpl	0x7c(%rsp), %r14d
    0000035c: 	jle	.Ltmp1541 # Offset: 860
    00000362: 	cvttsd2si	init_value(%rip), %eax
    0000036a: 	movq	0x80(%rsp), %rcx
    00000372: 	movb	%al, (%rcx)
    00000374: 	cmpl	0x90(%rsp), %r14d
    0000037c: 	jle	.Ltmp1541 # Offset: 892
    0000037e: 	cvttsd2si	init_value(%rip), %eax
    00000386: 	movq	0x88(%rsp), %rsi
    0000038e: 	movb	%al, (%rsi)
    00000390: 	cmpl	0x94(%rsp), %r14d
    00000398: 	jle	.Ltmp1541 # Offset: 920
    0000039a: 	cvttsd2si	init_value(%rip), %eax
    000003a2: 	movq	0xa0(%rsp), %rcx
    000003aa: 	movb	%al, (%rcx)
    000003ac: 	cmpl	0xb0(%rsp), %r14d
    000003b4: 	jle	.Ltmp1541 # Offset: 948
    000003b6: 	cvttsd2si	init_value(%rip), %eax
    000003be: 	movq	0xa8(%rsp), %rcx
    000003c6: 	movb	%al, (%rcx)
    000003c8: 	cmpl	0xb4(%rsp), %r14d
    000003d0: 	jle	.Ltmp1541 # Offset: 976
    000003d2: 	cvttsd2si	init_value(%rip), %eax
    000003da: 	movq	0xb8(%rsp), %rsi
    000003e2: 	movb	%al, (%rsi)
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp1541:
    000003e8: 	addl	$0x1, %ebx
    000003eb: 	cmpl	%ebx, iterations(%rip)
    000003f1: 	jg	.Ltmp1543 # Offset: 1009
    000003f7: 	movl	%r14d, %r13d
    000003fa: 	movq	%rdi, %r14
    000003fd: 	callq	clock@PLT # Offset: 1021
    00000402: 	movq	0x98(%rsp), %rdi
    0000040a: 	pxor	%xmm0, %xmm0
    0000040e: 	movq	%rax, end_time(%rip)
    00000415: 	subq	start_time(%rip), %rax
    0000041c: 	cvtsi2sd	%rax, %xmm0
    00000421: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000429: 	callq	_Z13record_resultdPKc # Offset: 1065
    0000042e: 	testl	%r13d, %r13d
    00000431: 	jle	.Ltmp1544 # Offset: 1073
.Ltmp1553:
    00000437: 	movl	%r13d, %edx
    0000043a: 	movq	%r14, %rax
    0000043d: 	pxor	%xmm0, %xmm0
    00000441: 	shrl	$0x4, %edx
    00000444: 	subl	$0x1, %edx
    00000447: 	shlq	$0x4, %rdx
    0000044b: 	addq	0xc0(%rsp), %rdx
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1545:
    00000458: 	movdqu	(%rax), %xmm5
    0000045c: 	addq	$0x10, %rax
    00000460: 	paddb	%xmm5, %xmm0
    00000464: 	cmpq	%rdx, %rax
    00000467: 	jne	.Ltmp1545 # Offset: 1127
    00000469: 	movdqa	%xmm0, %xmm1
    0000046d: 	movl	%r13d, %esi
    00000470: 	psrldq	$0x8, %xmm1
    00000475: 	andl	$-0x10, %esi
    00000478: 	paddb	%xmm1, %xmm0
    0000047c: 	pxor	%xmm1, %xmm1
    00000480: 	movl	%esi, %edx
    00000482: 	psadbw	%xmm1, %xmm0
    00000486: 	movd	%xmm0, %eax
    0000048a: 	cmpl	%r13d, %esi
    0000048d: 	je	.Ltmp1546 # Offset: 1165
.Ltmp1554:
    00000493: 	movl	%r13d, %edi
    00000496: 	subl	%esi, %edi
    00000498: 	leal	-0x1(%rdi), %r9d
    0000049c: 	cmpl	$0x6, %r9d
    000004a0: 	jbe	.Ltmp1547 # Offset: 1184
    000004a2: 	movq	(%r14,%rsi), %xmm1
    000004a8: 	pxor	%xmm0, %xmm0
    000004ac: 	movdqa	%xmm1, %xmm6
    000004b0: 	psadbw	%xmm0, %xmm6
    000004b4: 	movq	%xmm6, 0xc8(%rsp)
    000004bd: 	movq	%xmm6, %rsi
    000004c2: 	movl	%esi, %r9d
    000004c5: 	movl	%edi, %esi
    000004c7: 	andl	$-0x8, %esi
    000004ca: 	addl	%r9d, %eax
    000004cd: 	addl	%esi, %edx
    000004cf: 	cmpl	%esi, %edi
    000004d1: 	je	.Ltmp1546 # Offset: 1233
.Ltmp1547:
    000004d3: 	movslq	%edx, %rsi
    000004d6: 	addb	(%r14,%rsi), %al
    000004da: 	leal	0x1(%rdx), %esi
    000004dd: 	cmpl	%esi, %r13d
    000004e0: 	jle	.Ltmp1546 # Offset: 1248
    000004e2: 	movslq	%esi, %rsi
    000004e5: 	addb	(%r14,%rsi), %al
    000004e9: 	leal	0x2(%rdx), %esi
    000004ec: 	cmpl	%esi, %r13d
    000004ef: 	jle	.Ltmp1546 # Offset: 1263
    000004f1: 	movslq	%esi, %rsi
    000004f4: 	addb	(%r14,%rsi), %al
    000004f8: 	leal	0x3(%rdx), %esi
    000004fb: 	cmpl	%esi, %r13d
    000004fe: 	jle	.Ltmp1546 # Offset: 1278
    00000500: 	movslq	%esi, %rsi
    00000503: 	addb	(%r14,%rsi), %al
    00000507: 	leal	0x4(%rdx), %esi
    0000050a: 	cmpl	%esi, %r13d
    0000050d: 	jle	.Ltmp1546 # Offset: 1293
    0000050f: 	movslq	%esi, %rsi
    00000512: 	addb	(%r14,%rsi), %al
    00000516: 	leal	0x5(%rdx), %esi
    00000519: 	cmpl	%esi, %r13d
    0000051c: 	jle	.Ltmp1546 # Offset: 1308
    0000051e: 	movslq	%esi, %rsi
    00000521: 	addl	$0x6, %edx
    00000524: 	addb	(%r14,%rsi), %al
    00000528: 	cmpl	%edx, %r13d
    0000052b: 	jle	.Ltmp1546 # Offset: 1323
    0000052d: 	movslq	%edx, %rdx
    00000530: 	addb	(%r14,%rdx), %al
.Ltmp1546:
    00000534: 	testb	%al, %al
    00000536: 	jne	.Ltmp1548 # Offset: 1334
.Ltmp1544:
    00000538: 	addq	$0xd8, %rsp
    0000053f: 	popq	%rbx
    00000540: 	popq	%rbp
    00000541: 	popq	%r12
    00000543: 	popq	%r13
    00000545: 	popq	%r14
    00000547: 	popq	%r15
    00000549: 	retq # Offset: 1353
.Ltmp1548:
    0000054a: 	movq	0x98(%rsp), %rsi
    00000552: 	addq	$0xd8, %rsp
    00000559: 	movzbl	%al, %edi
    0000055c: 	popq	%rbx
    0000055d: 	popq	%rbp
    0000055e: 	popq	%r12
    00000560: 	popq	%r13
    00000562: 	popq	%r14
    00000564: 	popq	%r15
    00000566: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1382
.Ltmp1540:
    0000056b: 	leaq	0x1(%r14), %rax
    0000056f: 	movl	0x4(%rsp), %ebp
    00000573: 	xorl	%ebx, %ebx
    00000575: 	movq	%r14, %rdi
    00000578: 	movq	%rax, 0x8(%rsp)
    0000057d: 	nopl	(%rax) # Size: 3
.Ltmp1551:
    00000580: 	movq	%r12, %rdx
    00000583: 	xorl	%esi, %esi
    00000585: 	callq	memset@PLT # Offset: 1413
    0000058a: 	movq	%rax, %rdi
    0000058d: 	testl	%r13d, %r13d
    00000590: 	jle	.Ltmp1549 # Offset: 1424
    00000592: 	movl	%ebp, %r14d
    00000595: 	movl	$0xb, %esi
    0000059a: 	leaq	0x1(%r14), %r15
    0000059e: 	movq	%r15, %rdx
    000005a1: 	callq	memset@PLT # Offset: 1441
    000005a6: 	movl	$0x63, %esi
    000005ab: 	movq	%r15, %rdx
    000005ae: 	movq	%rax, %rdi
    000005b1: 	callq	memset@PLT # Offset: 1457
    000005b6: 	movq	0x8(%rsp), %rsi
    000005bb: 	movq	%rax, %rdi
    000005be: 	leaq	(%rsi,%r14), %rcx
    000005c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1550:
    000005c8: 	cvttsd2si	init_value(%rip), %edx
    000005d0: 	addq	$0x1, %rax
    000005d4: 	movb	%dl, -0x1(%rax)
    000005d7: 	cmpq	%rax, %rcx
    000005da: 	jne	.Ltmp1550 # Offset: 1498
.Ltmp1549:
    000005dc: 	addl	$0x1, %ebx
    000005df: 	cmpl	iterations(%rip), %ebx
    000005e5: 	jl	.Ltmp1551 # Offset: 1509
    000005e7: 	movq	%rdi, %r14
.Ltmp1539:
    000005ea: 	callq	clock@PLT # Offset: 1514
    000005ef: 	movq	0x98(%rsp), %rdi
    000005f7: 	pxor	%xmm0, %xmm0
    000005fb: 	movq	%rax, end_time(%rip)
    00000602: 	subq	start_time(%rip), %rax
    00000609: 	cvtsi2sd	%rax, %xmm0
    0000060e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000616: 	callq	_Z13record_resultdPKc # Offset: 1558
    0000061b: 	testl	%r13d, %r13d
    0000061e: 	jle	.Ltmp1544 # Offset: 1566
    00000624: 	leal	-0x1(%r13), %eax
    00000628: 	cmpl	$0xe, %eax
    0000062b: 	jbe	.Ltmp1552 # Offset: 1579
    0000062d: 	leaq	0x10(%r14), %rax
    00000631: 	movq	%rax, 0xc0(%rsp)
    00000639: 	jmp	.Ltmp1553 # Offset: 1593
.Ltmp1552:
    0000063e: 	xorl	%esi, %esi
    00000640: 	xorl	%eax, %eax
    00000642: 	xorl	%edx, %edx
    00000644: 	jmp	.Ltmp1554 # Offset: 1604
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace4IhEvPT_iPKc"

Binary Function "_Z22test_for_loop_replace4IhEvPT_iPKc" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x249b0
  Size        : 0x652
  MaxSize     : 0x660
  Offset      : 0x249b0
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_replace4IhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x98(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1555 # Offset: 55
    0000003d: 	movl	%r15d, %edx
    00000040: 	leaq	init_value(%rip), %rsi
    00000047: 	leal	-0x1(%r15), %ecx
    0000004b: 	addq	%rbx, %rdx
    0000004e: 	movl	%ecx, 0x64(%rsp)
    00000052: 	cmpq	%rsi, %rdx
    00000055: 	setbe	%dl
    00000058: 	addq	$0x8, %rsi
    0000005c: 	cmpq	%rsi, %rbx
    0000005f: 	setae	%sil
    00000063: 	orb	%sil, %dl
    00000066: 	je	.Ltmp1556 # Offset: 102
    0000006c: 	cmpl	$0xe, %ecx
    0000006f: 	jbe	.Ltmp1556 # Offset: 111
    00000075: 	movl	%r15d, %edx
    00000078: 	movl	%r15d, %r13d
    0000007b: 	leaq	0x10(%rbx), %rcx
    0000007f: 	shrl	$0x4, %edx
    00000082: 	andl	$-0x10, %r13d
    00000086: 	movq	%rcx, 0xc0(%rsp)
    0000008e: 	leal	-0x1(%rdx), %r9d
    00000092: 	movslq	%r13d, %rbp
    00000095: 	leal	0x1(%r13), %esi
    00000099: 	shlq	$0x4, %r9
    0000009d: 	leaq	(%rbx,%rbp), %rdx
    000000a1: 	movl	%esi, 0xc(%rsp)
    000000a5: 	movl	0x64(%rsp), %ebp
    000000a9: 	leaq	(%r9,%rcx), %r12
    000000ad: 	leal	0x2(%r13), %ecx
    000000b1: 	movq	%rdx, (%rsp)
    000000b5: 	movslq	%esi, %rdx
    000000b8: 	movslq	%ecx, %r14
    000000bb: 	leaq	(%rbx,%rdx), %rdi
    000000bf: 	leal	0x3(%r13), %esi
    000000c3: 	movl	%ecx, 0x20(%rsp)
    000000c7: 	leaq	(%rbx,%r14), %rdx
    000000cb: 	movl	%esi, 0x24(%rsp)
    000000cf: 	xorl	%r14d, %r14d
    000000d2: 	movq	%rdx, 0x18(%rsp)
    000000d7: 	movslq	%esi, %rdx
    000000da: 	leaq	(%rbx,%rdx), %rcx
    000000de: 	movq	%rdi, 0x10(%rsp)
    000000e3: 	movq	%rcx, 0x28(%rsp)
    000000e8: 	leal	0x4(%r13), %ecx
    000000ec: 	movslq	%ecx, %rdx
    000000ef: 	movl	%ecx, 0x38(%rsp)
    000000f3: 	leal	0x7(%r13), %ecx
    000000f7: 	leaq	(%rbx,%rdx), %rsi
    000000fb: 	movl	%ecx, 0x54(%rsp)
    000000ff: 	movq	%rsi, 0x30(%rsp)
    00000104: 	leal	0x5(%r13), %esi
    00000108: 	movslq	%esi, %rdx
    0000010b: 	movl	%esi, 0x3c(%rsp)
    0000010f: 	leal	0x8(%r13), %esi
    00000113: 	leaq	(%rbx,%rdx), %rdi
    00000117: 	movl	%esi, 0x60(%rsp)
    0000011b: 	movq	%rdi, 0x40(%rsp)
    00000120: 	leal	0x6(%r13), %edi
    00000124: 	movslq	%edi, %rdx
    00000127: 	movl	%edi, 0x50(%rsp)
    0000012b: 	leal	0x9(%r13), %edi
    0000012f: 	addq	%rbx, %rdx
    00000132: 	movl	%edi, 0x78(%rsp)
    00000136: 	movq	%rdx, 0x48(%rsp)
    0000013b: 	movslq	%ecx, %rdx
    0000013e: 	leaq	(%rbx,%rdx), %rcx
    00000142: 	movslq	%esi, %rdx
    00000145: 	leaq	(%rbx,%rdx), %rsi
    00000149: 	movq	%rcx, 0x58(%rsp)
    0000014e: 	movslq	%edi, %rdx
    00000151: 	leal	0xa(%r13), %ecx
    00000155: 	leaq	(%rbx,%rdx), %rdi
    00000159: 	movslq	%ecx, %rdx
    0000015c: 	movq	%rsi, 0x68(%rsp)
    00000161: 	leal	0xb(%r13), %esi
    00000165: 	addq	%rbx, %rdx
    00000168: 	movq	%rdi, 0x70(%rsp)
    0000016d: 	leal	0xc(%r13), %edi
    00000171: 	movq	%rdx, 0x80(%rsp)
    00000179: 	movslq	%esi, %rdx
    0000017c: 	movl	%ecx, 0x7c(%rsp)
    00000180: 	leaq	(%rbx,%rdx), %rcx
    00000184: 	movslq	%edi, %rdx
    00000187: 	movl	%esi, 0x90(%rsp)
    0000018e: 	leaq	(%rbx,%rdx), %rsi
    00000192: 	movq	%rcx, 0x88(%rsp)
    0000019a: 	leal	0xd(%r13), %ecx
    0000019e: 	movslq	%ecx, %rdx
    000001a1: 	movq	%rsi, 0xa0(%rsp)
    000001a9: 	leal	0xe(%r13), %esi
    000001ad: 	movl	%edi, 0x94(%rsp)
    000001b4: 	leaq	(%rbx,%rdx), %rdi
    000001b8: 	movslq	%esi, %rdx
    000001bb: 	addq	%rbx, %rdx
    000001be: 	movl	%ecx, 0xb0(%rsp)
    000001c5: 	movl	%esi, 0xb4(%rsp)
    000001cc: 	movq	%rdx, 0xb8(%rsp)
    000001d4: 	movq	%rdi, 0xa8(%rsp)
    000001dc: 	movq	%rbx, %rdi
    000001df: 	movl	%r15d, %ebx
    000001e2: 	movl	%r14d, %r15d
    000001e5: 	movq	%r12, %r14
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1560:
    000001f0: 	testl	%ebx, %ebx
    000001f2: 	jle	.Ltmp1557 # Offset: 498
    000001f8: 	movl	%ebp, %edx
    000001fa: 	xorl	%esi, %esi
    000001fc: 	leaq	0x1(%rdx), %r12
    00000200: 	movq	%r12, %rdx
    00000203: 	callq	memset@PLT # Offset: 515
    00000208: 	movq	%r12, %rdx
    0000020b: 	movl	$0xb, %esi
    00000210: 	movq	%rax, %rdi
    00000213: 	callq	memset@PLT # Offset: 531
    00000218: 	movq	%r12, %rdx
    0000021b: 	movl	$0x63, %esi
    00000220: 	movq	%rax, %rdi
    00000223: 	callq	memset@PLT # Offset: 547
    00000228: 	movsd	init_value(%rip), %xmm1
    00000230: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000238: 	movq	%rax, %rdi
    0000023b: 	unpcklpd	%xmm1, %xmm1
    0000023f: 	cvttpd2dq	%xmm1, %xmm1
    00000243: 	punpcklqdq	%xmm1, %xmm1
    00000247: 	movdqa	%xmm1, %xmm2
    0000024b: 	punpckhwd	%xmm1, %xmm2
    0000024f: 	nop # Size: 1
.Ltmp1558:
    00000250: 	movdqa	%xmm1, %xmm0
    00000254: 	addq	$0x10, %rax
    00000258: 	punpcklwd	%xmm1, %xmm0
    0000025c: 	movdqa	%xmm0, %xmm3
    00000260: 	punpcklwd	%xmm2, %xmm0
    00000264: 	punpckhwd	%xmm2, %xmm3
    00000268: 	punpcklwd	%xmm3, %xmm0
    0000026c: 	pand	%xmm4, %xmm0
    00000270: 	packuswb	%xmm0, %xmm0
    00000274: 	movups	%xmm0, -0x10(%rax)
    00000278: 	cmpq	%r14, %rax
    0000027b: 	jne	.Ltmp1558 # Offset: 635
    0000027d: 	cmpl	%r13d, %ebx
    00000280: 	je	.Ltmp1559 # Offset: 640
    00000286: 	cvttsd2si	init_value(%rip), %eax
    0000028e: 	movq	(%rsp), %rcx
    00000292: 	movb	%al, (%rcx)
    00000294: 	cmpl	0xc(%rsp), %ebx
    00000298: 	jle	.Ltmp1559 # Offset: 664
    0000029e: 	cvttsd2si	init_value(%rip), %eax
    000002a6: 	movq	0x10(%rsp), %rcx
    000002ab: 	movb	%al, (%rcx)
    000002ad: 	cmpl	0x20(%rsp), %ebx
    000002b1: 	jle	.Ltmp1559 # Offset: 689
    000002b7: 	cvttsd2si	init_value(%rip), %eax
    000002bf: 	movq	0x18(%rsp), %rcx
    000002c4: 	movb	%al, (%rcx)
    000002c6: 	cmpl	0x24(%rsp), %ebx
    000002ca: 	jle	.Ltmp1559 # Offset: 714
    000002d0: 	cvttsd2si	init_value(%rip), %eax
    000002d8: 	movq	0x28(%rsp), %rcx
    000002dd: 	movb	%al, (%rcx)
    000002df: 	cmpl	0x38(%rsp), %ebx
    000002e3: 	jle	.Ltmp1559 # Offset: 739
    000002e9: 	cvttsd2si	init_value(%rip), %eax
    000002f1: 	movq	0x30(%rsp), %rcx
    000002f6: 	movb	%al, (%rcx)
    000002f8: 	cmpl	0x3c(%rsp), %ebx
    000002fc: 	jle	.Ltmp1559 # Offset: 764
    00000302: 	cvttsd2si	init_value(%rip), %eax
    0000030a: 	movq	0x40(%rsp), %rcx
    0000030f: 	movb	%al, (%rcx)
    00000311: 	cmpl	0x50(%rsp), %ebx
    00000315: 	jle	.Ltmp1559 # Offset: 789
    0000031b: 	cvttsd2si	init_value(%rip), %eax
    00000323: 	movq	0x48(%rsp), %rsi
    00000328: 	movb	%al, (%rsi)
    0000032a: 	cmpl	0x54(%rsp), %ebx
    0000032e: 	jle	.Ltmp1559 # Offset: 814
    00000334: 	cvttsd2si	init_value(%rip), %eax
    0000033c: 	movq	0x58(%rsp), %rcx
    00000341: 	movb	%al, (%rcx)
    00000343: 	cmpl	0x60(%rsp), %ebx
    00000347: 	jle	.Ltmp1559 # Offset: 839
    0000034d: 	cvttsd2si	init_value(%rip), %eax
    00000355: 	movq	0x68(%rsp), %rcx
    0000035a: 	movb	%al, (%rcx)
    0000035c: 	cmpl	0x78(%rsp), %ebx
    00000360: 	jle	.Ltmp1559 # Offset: 864
    00000366: 	cvttsd2si	init_value(%rip), %eax
    0000036e: 	movq	0x70(%rsp), %rsi
    00000373: 	movb	%al, (%rsi)
    00000375: 	cmpl	0x7c(%rsp), %ebx
    00000379: 	jle	.Ltmp1559 # Offset: 889
    0000037f: 	cvttsd2si	init_value(%rip), %eax
    00000387: 	movq	0x80(%rsp), %rcx
    0000038f: 	movb	%al, (%rcx)
    00000391: 	cmpl	0x90(%rsp), %ebx
    00000398: 	jle	.Ltmp1559 # Offset: 920
    0000039a: 	cvttsd2si	init_value(%rip), %eax
    000003a2: 	movq	0x88(%rsp), %rsi
    000003aa: 	movb	%al, (%rsi)
    000003ac: 	cmpl	0x94(%rsp), %ebx
    000003b3: 	jle	.Ltmp1559 # Offset: 947
    000003b5: 	cvttsd2si	init_value(%rip), %eax
    000003bd: 	movq	0xa0(%rsp), %rcx
    000003c5: 	movb	%al, (%rcx)
    000003c7: 	cmpl	0xb0(%rsp), %ebx
    000003ce: 	jle	.Ltmp1559 # Offset: 974
    000003d0: 	cvttsd2si	init_value(%rip), %eax
    000003d8: 	movq	0xa8(%rsp), %rsi
    000003e0: 	movb	%al, (%rsi)
    000003e2: 	cmpl	0xb4(%rsp), %ebx
    000003e9: 	jle	.Ltmp1559 # Offset: 1001
    000003eb: 	cvttsd2si	init_value(%rip), %eax
    000003f3: 	movq	0xb8(%rsp), %rsi
    000003fb: 	movb	%al, (%rsi)
    000003fd: 	nopl	(%rax) # Size: 3
.Ltmp1559:
    00000400: 	movl	iterations(%rip), %eax
.Ltmp1557:
    00000406: 	addl	$0x1, %r15d
    0000040a: 	cmpl	%r15d, %eax
    0000040d: 	jg	.Ltmp1560 # Offset: 1037
    00000413: 	movl	%ebx, %r15d
    00000416: 	movq	%rdi, %rbx
    00000419: 	callq	clock@PLT # Offset: 1049
    0000041e: 	movq	0x98(%rsp), %rdi
    00000426: 	pxor	%xmm0, %xmm0
    0000042a: 	movq	%rax, end_time(%rip)
    00000431: 	subq	start_time(%rip), %rax
    00000438: 	cvtsi2sd	%rax, %xmm0
    0000043d: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000445: 	callq	_Z13record_resultdPKc # Offset: 1093
    0000044a: 	testl	%r15d, %r15d
    0000044d: 	jle	.Ltmp1561 # Offset: 1101
.Ltmp1570:
    00000453: 	movl	%r15d, %edx
    00000456: 	movq	%rbx, %rax
    00000459: 	pxor	%xmm0, %xmm0
    0000045d: 	shrl	$0x4, %edx
    00000460: 	subl	$0x1, %edx
    00000463: 	shlq	$0x4, %rdx
    00000467: 	addq	0xc0(%rsp), %rdx
    0000046f: 	nop # Size: 1
.Ltmp1562:
    00000470: 	movdqu	(%rax), %xmm5
    00000474: 	addq	$0x10, %rax
    00000478: 	paddb	%xmm5, %xmm0
    0000047c: 	cmpq	%rdx, %rax
    0000047f: 	jne	.Ltmp1562 # Offset: 1151
    00000481: 	movdqa	%xmm0, %xmm1
    00000485: 	movl	%r15d, %esi
    00000488: 	psrldq	$0x8, %xmm1
    0000048d: 	andl	$-0x10, %esi
    00000490: 	paddb	%xmm1, %xmm0
    00000494: 	pxor	%xmm1, %xmm1
    00000498: 	movl	%esi, %edx
    0000049a: 	psadbw	%xmm1, %xmm0
    0000049e: 	movd	%xmm0, %eax
    000004a2: 	cmpl	%r15d, %esi
    000004a5: 	je	.Ltmp1563 # Offset: 1189
.Ltmp1571:
    000004ab: 	movl	%r15d, %edi
    000004ae: 	subl	%esi, %edi
    000004b0: 	leal	-0x1(%rdi), %r9d
    000004b4: 	cmpl	$0x6, %r9d
    000004b8: 	jbe	.Ltmp1564 # Offset: 1208
    000004ba: 	movq	(%rbx,%rsi), %xmm1
    000004bf: 	pxor	%xmm0, %xmm0
    000004c3: 	movdqa	%xmm1, %xmm6
    000004c7: 	psadbw	%xmm0, %xmm6
    000004cb: 	movq	%xmm6, 0xc8(%rsp)
    000004d4: 	movq	%xmm6, %rsi
    000004d9: 	movl	%esi, %r9d
    000004dc: 	movl	%edi, %esi
    000004de: 	andl	$-0x8, %esi
    000004e1: 	addl	%r9d, %eax
    000004e4: 	addl	%esi, %edx
    000004e6: 	cmpl	%esi, %edi
    000004e8: 	je	.Ltmp1563 # Offset: 1256
.Ltmp1564:
    000004ea: 	movslq	%edx, %rsi
    000004ed: 	addb	(%rbx,%rsi), %al
    000004f0: 	leal	0x1(%rdx), %esi
    000004f3: 	cmpl	%esi, %r15d
    000004f6: 	jle	.Ltmp1563 # Offset: 1270
    000004f8: 	movslq	%esi, %rsi
    000004fb: 	addb	(%rbx,%rsi), %al
    000004fe: 	leal	0x2(%rdx), %esi
    00000501: 	cmpl	%esi, %r15d
    00000504: 	jle	.Ltmp1563 # Offset: 1284
    00000506: 	movslq	%esi, %rsi
    00000509: 	addb	(%rbx,%rsi), %al
    0000050c: 	leal	0x3(%rdx), %esi
    0000050f: 	cmpl	%esi, %r15d
    00000512: 	jle	.Ltmp1563 # Offset: 1298
    00000514: 	movslq	%esi, %rsi
    00000517: 	addb	(%rbx,%rsi), %al
    0000051a: 	leal	0x4(%rdx), %esi
    0000051d: 	cmpl	%esi, %r15d
    00000520: 	jle	.Ltmp1563 # Offset: 1312
    00000522: 	movslq	%esi, %rsi
    00000525: 	addb	(%rbx,%rsi), %al
    00000528: 	leal	0x5(%rdx), %esi
    0000052b: 	cmpl	%esi, %r15d
    0000052e: 	jle	.Ltmp1563 # Offset: 1326
    00000530: 	movslq	%esi, %rsi
    00000533: 	addl	$0x6, %edx
    00000536: 	addb	(%rbx,%rsi), %al
    00000539: 	cmpl	%edx, %r15d
    0000053c: 	jle	.Ltmp1563 # Offset: 1340
    0000053e: 	movslq	%edx, %rdx
    00000541: 	addb	(%rbx,%rdx), %al
.Ltmp1563:
    00000544: 	testb	%al, %al
    00000546: 	jne	.Ltmp1565 # Offset: 1350
.Ltmp1561:
    00000548: 	addq	$0xd8, %rsp
    0000054f: 	popq	%rbx
    00000550: 	popq	%rbp
    00000551: 	popq	%r12
    00000553: 	popq	%r13
    00000555: 	popq	%r14
    00000557: 	popq	%r15
    00000559: 	retq # Offset: 1369
.Ltmp1565:
    0000055a: 	movq	0x98(%rsp), %rsi
    00000562: 	addq	$0xd8, %rsp
    00000569: 	movzbl	%al, %edi
    0000056c: 	popq	%rbx
    0000056d: 	popq	%rbp
    0000056e: 	popq	%r12
    00000570: 	popq	%r13
    00000572: 	popq	%r14
    00000574: 	popq	%r15
    00000576: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1398
.Ltmp1556:
    0000057b: 	xorl	%r13d, %r13d
    0000057e: 	leaq	0x1(%rbx), %rbp
    00000582: 	movl	%r13d, %r12d
    00000585: 	nopl	(%rax) # Size: 3
.Ltmp1568:
    00000588: 	testl	%r15d, %r15d
    0000058b: 	jle	.Ltmp1566 # Offset: 1419
    0000058d: 	movl	0x64(%rsp), %r14d
    00000592: 	xorl	%esi, %esi
    00000594: 	movq	%rbx, %rdi
    00000597: 	leaq	0x1(%r14), %r13
    0000059b: 	movq	%r13, %rdx
    0000059e: 	callq	memset@PLT # Offset: 1438
    000005a3: 	movq	%r13, %rdx
    000005a6: 	movl	$0xb, %esi
    000005ab: 	movq	%rbx, %rdi
    000005ae: 	callq	memset@PLT # Offset: 1454
    000005b3: 	movq	%r13, %rdx
    000005b6: 	movl	$0x63, %esi
    000005bb: 	movq	%rbx, %rdi
    000005be: 	callq	memset@PLT # Offset: 1470
    000005c3: 	leaq	(%rbp,%r14), %rcx
    000005c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1567:
    000005d0: 	cvttsd2si	init_value(%rip), %edx
    000005d8: 	addq	$0x1, %rax
    000005dc: 	movb	%dl, -0x1(%rax)
    000005df: 	cmpq	%rax, %rcx
    000005e2: 	jne	.Ltmp1567 # Offset: 1506
    000005e4: 	movl	iterations(%rip), %eax
.Ltmp1566:
    000005ea: 	addl	$0x1, %r12d
    000005ee: 	cmpl	%r12d, %eax
    000005f1: 	jg	.Ltmp1568 # Offset: 1521
.Ltmp1555:
    000005f3: 	callq	clock@PLT # Offset: 1523
    000005f8: 	movq	0x98(%rsp), %rdi
    00000600: 	pxor	%xmm0, %xmm0
    00000604: 	movq	%rax, end_time(%rip)
    0000060b: 	subq	start_time(%rip), %rax
    00000612: 	cvtsi2sd	%rax, %xmm0
    00000617: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000061f: 	callq	_Z13record_resultdPKc # Offset: 1567
    00000624: 	testl	%r15d, %r15d
    00000627: 	jle	.Ltmp1561 # Offset: 1575
    0000062d: 	leal	-0x1(%r15), %eax
    00000631: 	cmpl	$0xe, %eax
    00000634: 	jbe	.Ltmp1569 # Offset: 1588
    00000636: 	leaq	0x10(%rbx), %rax
    0000063a: 	movq	%rax, 0xc0(%rsp)
    00000642: 	jmp	.Ltmp1570 # Offset: 1602
.Ltmp1569:
    00000647: 	xorl	%esi, %esi
    00000649: 	xorl	%eax, %eax
    0000064b: 	xorl	%edx, %edx
    0000064d: 	jmp	.Ltmp1571 # Offset: 1613
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_replace4IhEvPT_iPKc"

Binary Function "_Z21test_loop_replace_optIiEvPT_iPKc" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x25010
  Size        : 0x335
  MaxSize     : 0x340
  Offset      : 0x25010
  Section     : .text
  Orc Section : .local.text._Z21test_loop_replace_optIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movl	%esi, %r12d
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, %rbx
    00000015: 	callq	clock@PLT # Offset: 21
    0000001a: 	movq	%rax, start_time(%rip)
    00000021: 	movl	iterations(%rip), %eax
    00000027: 	testl	%eax, %eax
    00000029: 	jle	.Ltmp1572 # Offset: 41
    0000002f: 	cvttsd2si	init_value(%rip), %edi
    00000037: 	testl	%r12d, %r12d
    0000003a: 	jle	.Ltmp1573 # Offset: 58
    00000040: 	movl	%r12d, %eax
    00000043: 	movl	%r12d, %r9d
    00000046: 	movd	%edi, %xmm3
    0000004a: 	xorl	%ecx, %ecx
    0000004c: 	shrl	$0x2, %eax
    0000004f: 	leal	-0x1(%r12), %r13d
    00000054: 	andl	$-0x4, %r9d
    00000058: 	subl	$0x1, %eax
    0000005b: 	pshufd	$0x0, %xmm3, %xmm0
    00000060: 	shlq	$0x4, %rax
    00000064: 	leaq	0x10(%rbx,%rax), %rdx
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp1577:
    00000070: 	movq	%rbx, %rax
    00000073: 	cmpl	$0x2, %r13d
    00000077: 	jbe	.Ltmp1574 # Offset: 119
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp1575:
    00000080: 	movups	%xmm0, (%rax)
    00000083: 	addq	$0x10, %rax
    00000087: 	cmpq	%rdx, %rax
    0000008a: 	jne	.Ltmp1575 # Offset: 138
    0000008c: 	movl	%r9d, %eax
    0000008f: 	cmpl	%r9d, %r12d
    00000092: 	je	.Ltmp1576 # Offset: 146
.Ltmp1582:
    00000094: 	movslq	%eax, %rsi
    00000097: 	movl	%edi, (%rbx,%rsi,4)
    0000009a: 	leaq	(,%rsi,4), %r8
    000000a2: 	leal	0x1(%rax), %esi
    000000a5: 	cmpl	%esi, %r12d
    000000a8: 	jle	.Ltmp1576 # Offset: 168
    000000aa: 	addl	$0x2, %eax
    000000ad: 	movl	%edi, 0x4(%rbx,%r8)
    000000b2: 	cmpl	%eax, %r12d
    000000b5: 	jle	.Ltmp1576 # Offset: 181
    000000b7: 	movl	%edi, 0x8(%rbx,%r8)
.Ltmp1576:
    000000bc: 	addl	$0x1, %ecx
    000000bf: 	cmpl	iterations(%rip), %ecx
    000000c5: 	jl	.Ltmp1577 # Offset: 197
    000000c7: 	callq	clock@PLT # Offset: 199
    000000cc: 	pxor	%xmm0, %xmm0
    000000d0: 	movq	%rbp, %rdi
    000000d3: 	movq	%rax, end_time(%rip)
    000000da: 	subq	start_time(%rip), %rax
    000000e1: 	cvtsi2sd	%rax, %xmm0
    000000e6: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000000ee: 	callq	_Z13record_resultdPKc # Offset: 238
.Ltmp1589:
    000000f3: 	cmpl	$0x2, %r13d
    000000f7: 	jbe	.Ltmp1578 # Offset: 247
    000000fd: 	movl	%r12d, %edx
    00000100: 	movq	%rbx, %rax
    00000103: 	pxor	%xmm0, %xmm0
    00000107: 	shrl	$0x2, %edx
    0000010a: 	subl	$0x1, %edx
    0000010d: 	shlq	$0x4, %rdx
    00000111: 	leaq	0x10(%rbx,%rdx), %rdx
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1579:
    00000120: 	movdqu	(%rax), %xmm2
    00000124: 	addq	$0x10, %rax
    00000128: 	paddd	%xmm2, %xmm0
    0000012c: 	cmpq	%rax, %rdx
    0000012f: 	jne	.Ltmp1579 # Offset: 303
    00000131: 	movdqa	%xmm0, %xmm1
    00000135: 	movl	%r12d, %eax
    00000138: 	psrldq	$0x8, %xmm1
    0000013d: 	andl	$-0x4, %eax
    00000140: 	paddd	%xmm1, %xmm0
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x4, %xmm1
    0000014d: 	paddd	%xmm1, %xmm0
    00000151: 	movd	%xmm0, %r13d
    00000156: 	testb	$0x3, %r12b
    0000015a: 	je	.Ltmp1580 # Offset: 346
.Ltmp1590:
    0000015c: 	movslq	%eax, %rdx
    0000015f: 	leaq	(,%rdx,4), %rcx
    00000167: 	addl	(%rbx,%rdx,4), %r13d
    0000016b: 	leal	0x1(%rax), %edx
    0000016e: 	cmpl	%edx, %r12d
    00000171: 	jle	.Ltmp1580 # Offset: 369
    00000173: 	addl	$0x2, %eax
    00000176: 	addl	0x4(%rbx,%rcx), %r13d
    0000017b: 	cmpl	%eax, %r12d
    0000017e: 	jle	.Ltmp1580 # Offset: 382
    00000180: 	addl	0x8(%rbx,%rcx), %r13d
.Ltmp1580:
    00000185: 	cvttsd2si	init_value(%rip), %r12d
    0000018e: 	imull	$0x7a1200, %r12d, %r12d
    00000195: 	cmpl	%r13d, %r12d
    00000198: 	jne	.Ltmp1581 # Offset: 408
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	retq # Offset: 418
.Ltmp1574:
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp1582 # Offset: 421
.Ltmp1581:
    000001aa: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000001b1: 	movl	$0x5, %edx
    000001b6: 	leaq	DATAat0x35004(%rip), %rsi
    000001bd: 	movq	%r14, %rdi
    000001c0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 448
    000001c5: 	testq	%rbp, %rbp
    000001c8: 	je	.Ltmp1583 # Offset: 456
    000001ce: 	movq	%rbp, %rdi
    000001d1: 	callq	strlen@PLT # Offset: 465
    000001d6: 	movq	%rbp, %rsi
    000001d9: 	movq	%r14, %rdi
    000001dc: 	movq	%rax, %rdx
    000001df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 479
.Ltmp1587:
    000001e4: 	movl	$0xd, %edx
    000001e9: 	leaq	DATAat0x3500a(%rip), %rsi
    000001f0: 	movq	%r14, %rdi
    000001f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 499
    000001f8: 	movl	%r13d, %esi
    000001fb: 	movq	%r14, %rdi
    000001fe: 	callq	_ZNSolsEi@PLT # Offset: 510
    00000203: 	movl	$0xb, %edx
    00000208: 	leaq	DATAat0x35018(%rip), %rsi
    0000020f: 	movq	%rax, %rbp
    00000212: 	movq	%rax, %rdi
    00000215: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 533
    0000021a: 	movl	%r12d, %esi
    0000021d: 	movq	%rbp, %rdi
    00000220: 	callq	_ZNSolsEi@PLT # Offset: 544
    00000225: 	movq	%rax, %rbp
    00000228: 	movq	(%rax), %rax
    0000022b: 	movq	-0x18(%rax), %rax
    0000022f: 	movq	0xf0(%rbp,%rax), %r12
    00000237: 	testq	%r12, %r12
    0000023a: 	je	.Ltmp1584 # Offset: 570
    00000240: 	cmpb	$0x0, 0x38(%r12)
    00000246: 	je	.Ltmp1585 # Offset: 582
    00000248: 	movsbl	0x43(%r12), %esi
.Ltmp1586:
    0000024e: 	movq	%rbp, %rdi
    00000251: 	callq	_ZNSo3putEc@PLT # Offset: 593
    00000256: 	popq	%rbx
    00000257: 	popq	%rbp
    00000258: 	movq	%rax, %rdi
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	jmp	_ZNSo5flushEv@PLT # TAILCALL  # Offset: 609
.Ltmp1585:
    00000266: 	movq	%r12, %rdi
    00000269: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 617
    0000026e: 	movq	(%r12), %rax
    00000272: 	movl	$0xa, %esi
    00000277: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000027e: 	movq	0x30(%rax), %rax
    00000282: 	cmpq	%rdx, %rax
    00000285: 	je	.Ltmp1586 # Offset: 645
    00000287: 	movq	%r12, %rdi
    0000028a: 	callq	*%rax # Offset: 650
    0000028c: 	movsbl	%al, %esi
    0000028f: 	jmp	.Ltmp1586 # Offset: 655
.Ltmp1583:
    00000291: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000298: 	movq	-0x18(%rax), %rdi
    0000029c: 	addq	%r14, %rdi
    0000029f: 	movl	0x20(%rdi), %esi
    000002a2: 	orl	$0x1, %esi
    000002a5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 677
    000002aa: 	jmp	.Ltmp1587 # Offset: 682
.Ltmp1572:
    000002af: 	callq	clock@PLT # Offset: 687
    000002b4: 	pxor	%xmm0, %xmm0
    000002b8: 	movq	%rbp, %rdi
    000002bb: 	movq	%rax, end_time(%rip)
    000002c2: 	subq	start_time(%rip), %rax
    000002c9: 	cvtsi2sd	%rax, %xmm0
    000002ce: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002d6: 	callq	_Z13record_resultdPKc # Offset: 726
    000002db: 	testl	%r12d, %r12d
    000002de: 	jle	.Ltmp1588 # Offset: 734
    000002e0: 	leal	-0x1(%r12), %r13d
    000002e5: 	jmp	.Ltmp1589 # Offset: 741
.Ltmp1573:
    000002ea: 	callq	clock@PLT # Offset: 746
    000002ef: 	pxor	%xmm0, %xmm0
    000002f3: 	movq	%rbp, %rdi
    000002f6: 	xorl	%r13d, %r13d
    000002f9: 	movq	%rax, end_time(%rip)
    00000300: 	subq	start_time(%rip), %rax
    00000307: 	cvtsi2sd	%rax, %xmm0
    0000030c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000314: 	callq	_Z13record_resultdPKc # Offset: 788
    00000319: 	jmp	.Ltmp1580 # Offset: 793
.Ltmp1578:
    0000031e: 	xorl	%r13d, %r13d
    00000321: 	xorl	%eax, %eax
    00000323: 	jmp	.Ltmp1590 # Offset: 803
.Ltmp1588:
    00000328: 	xorl	%r13d, %r13d
    0000032b: 	jmp	.Ltmp1580 # Offset: 811
.Ltmp1584:
    00000330: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 816
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_loop_replace_optIiEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace2IiEvPT_iPKc" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x25350
  Size        : 0x29e
  MaxSize     : 0x2a0
  Offset      : 0x25350
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace2IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1591 # Offset: 49
    00000037: 	leal	-0x1(%r15), %eax
    0000003b: 	movslq	%r15d, %r12
    0000003e: 	movl	%r15d, %ebp
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%r15d, %eax
    0000004b: 	shlq	$0x2, %r12
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r14,%rax), %rbx
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp1595:
    00000068: 	xorl	%esi, %esi
    0000006a: 	movq	%r12, %rdx
    0000006d: 	movq	%r14, %rdi
    00000070: 	callq	memset@PLT # Offset: 112
    00000075: 	testl	%r15d, %r15d
    00000078: 	jle	.Ltmp1592 # Offset: 120
    0000007a: 	cmpl	$0x2, 0x4(%rsp)
    0000007f: 	cvttsd2si	init_value(%rip), %edx
    00000087: 	jbe	.Ltmp1593 # Offset: 135
    0000008d: 	movd	%edx, %xmm2
    00000091: 	pshufd	$0x0, %xmm2, %xmm0
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1594:
    000000a0: 	movups	%xmm0, (%rax)
    000000a3: 	addq	$0x10, %rax
    000000a7: 	cmpq	%rbx, %rax
    000000aa: 	jne	.Ltmp1594 # Offset: 170
    000000ac: 	movl	%ebp, %eax
    000000ae: 	cmpl	%ebp, %r15d
    000000b1: 	je	.Ltmp1592 # Offset: 177
.Ltmp1601:
    000000b3: 	movslq	%eax, %rsi
    000000b6: 	movl	%edx, (%r14,%rsi,4)
    000000ba: 	leaq	(,%rsi,4), %rdi
    000000c2: 	leal	0x1(%rax), %esi
    000000c5: 	cmpl	%esi, %r15d
    000000c8: 	jle	.Ltmp1592 # Offset: 200
    000000ca: 	addl	$0x2, %eax
    000000cd: 	movl	%edx, 0x4(%r14,%rdi)
    000000d2: 	cmpl	%eax, %r15d
    000000d5: 	jle	.Ltmp1592 # Offset: 213
    000000d7: 	movl	%edx, 0x8(%r14,%rdi)
.Ltmp1592:
    000000dc: 	addl	$0x1, %r13d
    000000e0: 	cmpl	%r13d, iterations(%rip)
    000000e7: 	jg	.Ltmp1595 # Offset: 231
.Ltmp1591:
    000000ed: 	callq	clock@PLT # Offset: 237
    000000f2: 	movq	0x8(%rsp), %rdi
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	subq	start_time(%rip), %rax
    00000109: 	cvtsi2sd	%rax, %xmm0
    0000010e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000116: 	callq	_Z13record_resultdPKc # Offset: 278
    0000011b: 	testl	%r15d, %r15d
    0000011e: 	jle	.Ltmp1596 # Offset: 286
    00000124: 	leal	-0x1(%r15), %eax
    00000128: 	cmpl	$0x2, %eax
    0000012b: 	jbe	.Ltmp1597 # Offset: 299
    00000131: 	movl	%r15d, %edx
    00000134: 	movq	%r14, %rax
    00000137: 	pxor	%xmm0, %xmm0
    0000013b: 	shrl	$0x2, %edx
    0000013e: 	subl	$0x1, %edx
    00000141: 	shlq	$0x4, %rdx
    00000145: 	leaq	0x10(%r14,%rdx), %rdx
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1598:
    00000150: 	movdqu	(%rax), %xmm3
    00000154: 	addq	$0x10, %rax
    00000158: 	paddd	%xmm3, %xmm0
    0000015c: 	cmpq	%rdx, %rax
    0000015f: 	jne	.Ltmp1598 # Offset: 351
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	movl	%r15d, %eax
    00000168: 	psrldq	$0x8, %xmm1
    0000016d: 	andl	$-0x4, %eax
    00000170: 	paddd	%xmm1, %xmm0
    00000174: 	movdqa	%xmm0, %xmm1
    00000178: 	psrldq	$0x4, %xmm1
    0000017d: 	paddd	%xmm1, %xmm0
    00000181: 	movd	%xmm0, %ebp
    00000185: 	testb	$0x3, %r15b
    00000189: 	je	.Ltmp1599 # Offset: 393
.Ltmp1604:
    0000018b: 	movslq	%eax, %rdx
    0000018e: 	leaq	(,%rdx,4), %rsi
    00000196: 	addl	(%r14,%rdx,4), %ebp
    0000019a: 	leal	0x1(%rax), %edx
    0000019d: 	cmpl	%edx, %r15d
    000001a0: 	jle	.Ltmp1599 # Offset: 416
    000001a2: 	addl	$0x2, %eax
    000001a5: 	addl	0x4(%r14,%rsi), %ebp
    000001aa: 	cmpl	%eax, %r15d
    000001ad: 	jle	.Ltmp1599 # Offset: 429
    000001af: 	addl	0x8(%r14,%rsi), %ebp
.Ltmp1599:
    000001b4: 	cvttsd2si	init_value(%rip), %r12d
    000001bd: 	imull	$0x7a1200, %r12d, %r12d
    000001c4: 	cmpl	%ebp, %r12d
    000001c7: 	jne	.Ltmp1600 # Offset: 455
    000001c9: 	addq	$0x18, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	retq # Offset: 471
.Ltmp1593:
    000001d8: 	xorl	%eax, %eax
    000001da: 	jmp	.Ltmp1601 # Offset: 474
.Ltmp1600:
    000001df: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001e6: 	movl	$0x5, %edx
    000001eb: 	leaq	DATAat0x35004(%rip), %rsi
    000001f2: 	movq	%r13, %rdi
    000001f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 501
    000001fa: 	cmpq	$0x0, 0x8(%rsp)
    00000200: 	je	.Ltmp1602 # Offset: 512
    00000202: 	movq	0x8(%rsp), %rbx
    00000207: 	movq	%rbx, %rdi
    0000020a: 	callq	strlen@PLT # Offset: 522
    0000020f: 	movq	%rbx, %rsi
    00000212: 	movq	%r13, %rdi
    00000215: 	movq	%rax, %rdx
    00000218: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 536
.Ltmp1603:
    0000021d: 	movl	$0xd, %edx
    00000222: 	movq	%r13, %rdi
    00000225: 	leaq	DATAat0x3500a(%rip), %rsi
    0000022c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 556
    00000231: 	movl	%ebp, %esi
    00000233: 	movq	%r13, %rdi
    00000236: 	callq	_ZNSolsEi@PLT # Offset: 566
    0000023b: 	movl	$0xb, %edx
    00000240: 	leaq	DATAat0x35018(%rip), %rsi
    00000247: 	movq	%rax, %rbp
    0000024a: 	movq	%rax, %rdi
    0000024d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 589
    00000252: 	movq	%rbp, %rdi
    00000255: 	movl	%r12d, %esi
    00000258: 	callq	_ZNSolsEi@PLT # Offset: 600
    0000025d: 	addq	$0x18, %rsp
    00000261: 	popq	%rbx
    00000262: 	movq	%rax, %rdi
    00000265: 	popq	%rbp
    00000266: 	popq	%r12
    00000268: 	popq	%r13
    0000026a: 	popq	%r14
    0000026c: 	popq	%r15
    0000026e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 622
.Ltmp1602:
    00000273: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000027a: 	movq	-0x18(%rax), %rdi
    0000027e: 	addq	%r13, %rdi
    00000281: 	movl	0x20(%rdi), %esi
    00000284: 	orl	$0x1, %esi
    00000287: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 647
    0000028c: 	jmp	.Ltmp1603 # Offset: 652
.Ltmp1596:
    0000028e: 	xorl	%ebp, %ebp
    00000290: 	jmp	.Ltmp1599 # Offset: 656
.Ltmp1597:
    00000295: 	xorl	%ebp, %ebp
    00000297: 	xorl	%eax, %eax
    00000299: 	jmp	.Ltmp1604 # Offset: 665
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace2IiEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace2IiEvPT_iPKc" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x255f0
  Size        : 0x29e
  MaxSize     : 0x2a0
  Offset      : 0x255f0
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace2IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1605 # Offset: 49
    00000037: 	leal	-0x1(%r15), %eax
    0000003b: 	movslq	%r15d, %r12
    0000003e: 	movl	%r15d, %ebp
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%r15d, %eax
    0000004b: 	shlq	$0x2, %r12
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r14,%rax), %rbx
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp1609:
    00000068: 	xorl	%esi, %esi
    0000006a: 	movq	%r12, %rdx
    0000006d: 	movq	%r14, %rdi
    00000070: 	callq	memset@PLT # Offset: 112
    00000075: 	testl	%r15d, %r15d
    00000078: 	jle	.Ltmp1606 # Offset: 120
    0000007a: 	cmpl	$0x2, 0x4(%rsp)
    0000007f: 	cvttsd2si	init_value(%rip), %edx
    00000087: 	jbe	.Ltmp1607 # Offset: 135
    0000008d: 	movd	%edx, %xmm2
    00000091: 	pshufd	$0x0, %xmm2, %xmm0
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1608:
    000000a0: 	movups	%xmm0, (%rax)
    000000a3: 	addq	$0x10, %rax
    000000a7: 	cmpq	%rbx, %rax
    000000aa: 	jne	.Ltmp1608 # Offset: 170
    000000ac: 	movl	%ebp, %eax
    000000ae: 	cmpl	%ebp, %r15d
    000000b1: 	je	.Ltmp1606 # Offset: 177
.Ltmp1615:
    000000b3: 	movslq	%eax, %rsi
    000000b6: 	movl	%edx, (%r14,%rsi,4)
    000000ba: 	leaq	(,%rsi,4), %rdi
    000000c2: 	leal	0x1(%rax), %esi
    000000c5: 	cmpl	%esi, %r15d
    000000c8: 	jle	.Ltmp1606 # Offset: 200
    000000ca: 	addl	$0x2, %eax
    000000cd: 	movl	%edx, 0x4(%r14,%rdi)
    000000d2: 	cmpl	%eax, %r15d
    000000d5: 	jle	.Ltmp1606 # Offset: 213
    000000d7: 	movl	%edx, 0x8(%r14,%rdi)
.Ltmp1606:
    000000dc: 	addl	$0x1, %r13d
    000000e0: 	cmpl	%r13d, iterations(%rip)
    000000e7: 	jg	.Ltmp1609 # Offset: 231
.Ltmp1605:
    000000ed: 	callq	clock@PLT # Offset: 237
    000000f2: 	movq	0x8(%rsp), %rdi
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	subq	start_time(%rip), %rax
    00000109: 	cvtsi2sd	%rax, %xmm0
    0000010e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000116: 	callq	_Z13record_resultdPKc # Offset: 278
    0000011b: 	testl	%r15d, %r15d
    0000011e: 	jle	.Ltmp1610 # Offset: 286
    00000124: 	leal	-0x1(%r15), %eax
    00000128: 	cmpl	$0x2, %eax
    0000012b: 	jbe	.Ltmp1611 # Offset: 299
    00000131: 	movl	%r15d, %edx
    00000134: 	movq	%r14, %rax
    00000137: 	pxor	%xmm0, %xmm0
    0000013b: 	shrl	$0x2, %edx
    0000013e: 	subl	$0x1, %edx
    00000141: 	shlq	$0x4, %rdx
    00000145: 	leaq	0x10(%r14,%rdx), %rdx
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1612:
    00000150: 	movdqu	(%rax), %xmm3
    00000154: 	addq	$0x10, %rax
    00000158: 	paddd	%xmm3, %xmm0
    0000015c: 	cmpq	%rdx, %rax
    0000015f: 	jne	.Ltmp1612 # Offset: 351
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	movl	%r15d, %eax
    00000168: 	psrldq	$0x8, %xmm1
    0000016d: 	andl	$-0x4, %eax
    00000170: 	paddd	%xmm1, %xmm0
    00000174: 	movdqa	%xmm0, %xmm1
    00000178: 	psrldq	$0x4, %xmm1
    0000017d: 	paddd	%xmm1, %xmm0
    00000181: 	movd	%xmm0, %ebp
    00000185: 	testb	$0x3, %r15b
    00000189: 	je	.Ltmp1613 # Offset: 393
.Ltmp1618:
    0000018b: 	movslq	%eax, %rdx
    0000018e: 	leaq	(,%rdx,4), %rsi
    00000196: 	addl	(%r14,%rdx,4), %ebp
    0000019a: 	leal	0x1(%rax), %edx
    0000019d: 	cmpl	%edx, %r15d
    000001a0: 	jle	.Ltmp1613 # Offset: 416
    000001a2: 	addl	$0x2, %eax
    000001a5: 	addl	0x4(%r14,%rsi), %ebp
    000001aa: 	cmpl	%eax, %r15d
    000001ad: 	jle	.Ltmp1613 # Offset: 429
    000001af: 	addl	0x8(%r14,%rsi), %ebp
.Ltmp1613:
    000001b4: 	cvttsd2si	init_value(%rip), %r12d
    000001bd: 	imull	$0x7a1200, %r12d, %r12d
    000001c4: 	cmpl	%ebp, %r12d
    000001c7: 	jne	.Ltmp1614 # Offset: 455
    000001c9: 	addq	$0x18, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	retq # Offset: 471
.Ltmp1607:
    000001d8: 	xorl	%eax, %eax
    000001da: 	jmp	.Ltmp1615 # Offset: 474
.Ltmp1614:
    000001df: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001e6: 	movl	$0x5, %edx
    000001eb: 	leaq	DATAat0x35004(%rip), %rsi
    000001f2: 	movq	%r13, %rdi
    000001f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 501
    000001fa: 	cmpq	$0x0, 0x8(%rsp)
    00000200: 	je	.Ltmp1616 # Offset: 512
    00000202: 	movq	0x8(%rsp), %rbx
    00000207: 	movq	%rbx, %rdi
    0000020a: 	callq	strlen@PLT # Offset: 522
    0000020f: 	movq	%rbx, %rsi
    00000212: 	movq	%r13, %rdi
    00000215: 	movq	%rax, %rdx
    00000218: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 536
.Ltmp1617:
    0000021d: 	movl	$0xd, %edx
    00000222: 	movq	%r13, %rdi
    00000225: 	leaq	DATAat0x3500a(%rip), %rsi
    0000022c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 556
    00000231: 	movl	%ebp, %esi
    00000233: 	movq	%r13, %rdi
    00000236: 	callq	_ZNSolsEi@PLT # Offset: 566
    0000023b: 	movl	$0xb, %edx
    00000240: 	leaq	DATAat0x35018(%rip), %rsi
    00000247: 	movq	%rax, %rbp
    0000024a: 	movq	%rax, %rdi
    0000024d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 589
    00000252: 	movq	%rbp, %rdi
    00000255: 	movl	%r12d, %esi
    00000258: 	callq	_ZNSolsEi@PLT # Offset: 600
    0000025d: 	addq	$0x18, %rsp
    00000261: 	popq	%rbx
    00000262: 	movq	%rax, %rdi
    00000265: 	popq	%rbp
    00000266: 	popq	%r12
    00000268: 	popq	%r13
    0000026a: 	popq	%r14
    0000026c: 	popq	%r15
    0000026e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 622
.Ltmp1616:
    00000273: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000027a: 	movq	-0x18(%rax), %rdi
    0000027e: 	addq	%r13, %rdi
    00000281: 	movl	0x20(%rdi), %esi
    00000284: 	orl	$0x1, %esi
    00000287: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 647
    0000028c: 	jmp	.Ltmp1617 # Offset: 652
.Ltmp1610:
    0000028e: 	xorl	%ebp, %ebp
    00000290: 	jmp	.Ltmp1613 # Offset: 656
.Ltmp1611:
    00000295: 	xorl	%ebp, %ebp
    00000297: 	xorl	%eax, %eax
    00000299: 	jmp	.Ltmp1618 # Offset: 665
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace2IiEvPT_iPKc"

Binary Function "_Z22test_for_loop_replace2IiEvPT_iPKc" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x25890
  Size        : 0x2ae
  MaxSize     : 0x2b0
  Offset      : 0x25890
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_replace2IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1619 # Offset: 49
    00000037: 	leal	-0x1(%r15), %edx
    0000003b: 	movl	%r15d, %ecx
    0000003e: 	xorl	%ebp, %ebp
    00000040: 	cvttsd2si	init_value(%rip), %r12d
    00000049: 	movl	%edx, 0x10(%rsp)
    0000004d: 	leaq	0x4(,%rdx,4), %r13
    00000055: 	movl	%r15d, %edx
    00000058: 	shrl	$0x2, %edx
    0000005b: 	andl	$-0x4, %ecx
    0000005e: 	subl	$0x1, %edx
    00000061: 	movl	%ecx, 0x14(%rsp)
    00000065: 	shlq	$0x4, %rdx
    00000069: 	movd	%r12d, %xmm3
    0000006e: 	leaq	0x10(%r14,%rdx), %rbx
    00000073: 	pshufd	$0x0, %xmm3, %xmm0
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1624:
    00000080: 	testl	%r15d, %r15d
    00000083: 	jle	.Ltmp1620 # Offset: 131
    00000085: 	xorl	%esi, %esi
    00000087: 	movq	%r13, %rdx
    0000008a: 	movq	%r14, %rdi
    0000008d: 	movaps	%xmm0, (%rsp)
    00000091: 	callq	memset@PLT # Offset: 145
    00000096: 	cmpl	$0x2, 0x10(%rsp)
    0000009b: 	movdqa	(%rsp), %xmm0
    000000a0: 	jbe	.Ltmp1621 # Offset: 160
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1622:
    000000b0: 	movups	%xmm0, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jne	.Ltmp1622 # Offset: 186
    000000bc: 	movl	0x14(%rsp), %eax
    000000c0: 	cmpl	%eax, %r15d
    000000c3: 	je	.Ltmp1623 # Offset: 195
.Ltmp1630:
    000000c5: 	movslq	%eax, %rdx
    000000c8: 	movl	%r12d, (%r14,%rdx,4)
    000000cc: 	leaq	(,%rdx,4), %rsi
    000000d4: 	leal	0x1(%rax), %edx
    000000d7: 	cmpl	%edx, %r15d
    000000da: 	jle	.Ltmp1623 # Offset: 218
    000000dc: 	addl	$0x2, %eax
    000000df: 	movl	%r12d, 0x4(%r14,%rsi)
    000000e4: 	cmpl	%eax, %r15d
    000000e7: 	jle	.Ltmp1623 # Offset: 231
    000000e9: 	movl	%r12d, 0x8(%r14,%rsi)
.Ltmp1623:
    000000ee: 	movl	iterations(%rip), %eax
.Ltmp1620:
    000000f4: 	addl	$0x1, %ebp
    000000f7: 	cmpl	%eax, %ebp
    000000f9: 	jl	.Ltmp1624 # Offset: 249
.Ltmp1619:
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	0x18(%rsp), %rdi
    00000105: 	pxor	%xmm0, %xmm0
    00000109: 	movq	%rax, end_time(%rip)
    00000110: 	subq	start_time(%rip), %rax
    00000117: 	cvtsi2sd	%rax, %xmm0
    0000011c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000124: 	callq	_Z13record_resultdPKc # Offset: 292
    00000129: 	testl	%r15d, %r15d
    0000012c: 	jle	.Ltmp1625 # Offset: 300
    00000132: 	leal	-0x1(%r15), %eax
    00000136: 	cmpl	$0x2, %eax
    00000139: 	jbe	.Ltmp1626 # Offset: 313
    0000013f: 	movl	%r15d, %edx
    00000142: 	movq	%r14, %rax
    00000145: 	pxor	%xmm0, %xmm0
    00000149: 	shrl	$0x2, %edx
    0000014c: 	subl	$0x1, %edx
    0000014f: 	shlq	$0x4, %rdx
    00000153: 	leaq	0x10(%r14,%rdx), %rdx
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1627:
    00000160: 	movdqu	(%rax), %xmm2
    00000164: 	addq	$0x10, %rax
    00000168: 	paddd	%xmm2, %xmm0
    0000016c: 	cmpq	%rdx, %rax
    0000016f: 	jne	.Ltmp1627 # Offset: 367
    00000171: 	movdqa	%xmm0, %xmm1
    00000175: 	movl	%r15d, %eax
    00000178: 	psrldq	$0x8, %xmm1
    0000017d: 	andl	$-0x4, %eax
    00000180: 	paddd	%xmm1, %xmm0
    00000184: 	movdqa	%xmm0, %xmm1
    00000188: 	psrldq	$0x4, %xmm1
    0000018d: 	paddd	%xmm1, %xmm0
    00000191: 	movd	%xmm0, %ebp
    00000195: 	testb	$0x3, %r15b
    00000199: 	je	.Ltmp1628 # Offset: 409
.Ltmp1633:
    0000019b: 	movslq	%eax, %rdx
    0000019e: 	leaq	(,%rdx,4), %rsi
    000001a6: 	addl	(%r14,%rdx,4), %ebp
    000001aa: 	leal	0x1(%rax), %edx
    000001ad: 	cmpl	%edx, %r15d
    000001b0: 	jle	.Ltmp1628 # Offset: 432
    000001b2: 	addl	$0x2, %eax
    000001b5: 	addl	0x4(%r14,%rsi), %ebp
    000001ba: 	cmpl	%eax, %r15d
    000001bd: 	jle	.Ltmp1628 # Offset: 445
    000001bf: 	addl	0x8(%r14,%rsi), %ebp
.Ltmp1628:
    000001c4: 	cvttsd2si	init_value(%rip), %r12d
    000001cd: 	imull	$0x7a1200, %r12d, %r12d
    000001d4: 	cmpl	%ebp, %r12d
    000001d7: 	jne	.Ltmp1629 # Offset: 471
    000001d9: 	addq	$0x28, %rsp
    000001dd: 	popq	%rbx
    000001de: 	popq	%rbp
    000001df: 	popq	%r12
    000001e1: 	popq	%r13
    000001e3: 	popq	%r14
    000001e5: 	popq	%r15
    000001e7: 	retq # Offset: 487
.Ltmp1621:
    000001e8: 	xorl	%eax, %eax
    000001ea: 	jmp	.Ltmp1630 # Offset: 490
.Ltmp1629:
    000001ef: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001f6: 	movl	$0x5, %edx
    000001fb: 	leaq	DATAat0x35004(%rip), %rsi
    00000202: 	movq	%r13, %rdi
    00000205: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 517
    0000020a: 	cmpq	$0x0, 0x18(%rsp)
    00000210: 	je	.Ltmp1631 # Offset: 528
    00000212: 	movq	0x18(%rsp), %rbx
    00000217: 	movq	%rbx, %rdi
    0000021a: 	callq	strlen@PLT # Offset: 538
    0000021f: 	movq	%rbx, %rsi
    00000222: 	movq	%r13, %rdi
    00000225: 	movq	%rax, %rdx
    00000228: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 552
.Ltmp1632:
    0000022d: 	movl	$0xd, %edx
    00000232: 	movq	%r13, %rdi
    00000235: 	leaq	DATAat0x3500a(%rip), %rsi
    0000023c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 572
    00000241: 	movl	%ebp, %esi
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_ZNSolsEi@PLT # Offset: 582
    0000024b: 	movl	$0xb, %edx
    00000250: 	leaq	DATAat0x35018(%rip), %rsi
    00000257: 	movq	%rax, %rbp
    0000025a: 	movq	%rax, %rdi
    0000025d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 605
    00000262: 	movq	%rbp, %rdi
    00000265: 	movl	%r12d, %esi
    00000268: 	callq	_ZNSolsEi@PLT # Offset: 616
    0000026d: 	addq	$0x28, %rsp
    00000271: 	popq	%rbx
    00000272: 	movq	%rax, %rdi
    00000275: 	popq	%rbp
    00000276: 	popq	%r12
    00000278: 	popq	%r13
    0000027a: 	popq	%r14
    0000027c: 	popq	%r15
    0000027e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 638
.Ltmp1631:
    00000283: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000028a: 	movq	-0x18(%rax), %rdi
    0000028e: 	addq	%r13, %rdi
    00000291: 	movl	0x20(%rdi), %esi
    00000294: 	orl	$0x1, %esi
    00000297: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 663
    0000029c: 	jmp	.Ltmp1632 # Offset: 668
.Ltmp1625:
    0000029e: 	xorl	%ebp, %ebp
    000002a0: 	jmp	.Ltmp1628 # Offset: 672
.Ltmp1626:
    000002a5: 	xorl	%ebp, %ebp
    000002a7: 	xorl	%eax, %eax
    000002a9: 	jmp	.Ltmp1633 # Offset: 681
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_replace2IiEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace3IiEvPT_iPKc" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x25b40
  Size        : 0x352
  MaxSize     : 0x360
  Offset      : 0x25b40
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1634 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movslq	%r13d, %r12
    00000041: 	xorl	%ebp, %ebp
    00000043: 	movl	%eax, 0xc(%rsp)
    00000047: 	movl	%r13d, %eax
    0000004a: 	andl	$-0x4, %ebx
    0000004d: 	shlq	$0x2, %r12
    00000051: 	shrl	$0x2, %eax
    00000054: 	subl	$0x1, %eax
    00000057: 	shlq	$0x4, %rax
    0000005b: 	leaq	0x10(%r15,%rax), %r14
    00000060: 	movslq	%ebx, %rax
    00000063: 	shlq	$0x2, %rax
    00000067: 	movq	%rax, 0x10(%rsp)
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1642:
    00000070: 	xorl	%esi, %esi
    00000072: 	movq	%r12, %rdx
    00000075: 	movq	%r15, %rdi
    00000078: 	callq	memset@PLT # Offset: 120
    0000007d: 	testl	%r13d, %r13d
    00000080: 	movdqa	DATAat0x36fa0(%rip), %xmm1
    00000088: 	jle	.Ltmp1635 # Offset: 136
    0000008e: 	cmpl	$0x2, 0xc(%rsp)
    00000093: 	jbe	.Ltmp1636 # Offset: 147
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1637:
    000000a0: 	movups	%xmm1, (%rax)
    000000a3: 	addq	$0x10, %rax
    000000a7: 	cmpq	%r14, %rax
    000000aa: 	jne	.Ltmp1637 # Offset: 170
    000000ac: 	cmpl	%ebx, %r13d
    000000af: 	je	.Ltmp1638 # Offset: 175
    000000b5: 	movq	0x10(%rsp), %rax
    000000ba: 	movl	$0x1, (%r15,%rax)
    000000c2: 	movq	%rax, %rdx
    000000c5: 	leal	0x1(%rbx), %eax
    000000c8: 	cmpl	%eax, %r13d
    000000cb: 	jle	.Ltmp1638 # Offset: 203
.Ltmp1649:
    000000d1: 	movl	$0x1, 0x4(%r15,%rdx)
    000000da: 	addl	$0x1, %eax
    000000dd: 	cmpl	%eax, %r13d
    000000e0: 	jle	.Ltmp1639 # Offset: 224
    000000e2: 	movl	$0x1, 0x8(%r15,%rdx)
.Ltmp1639:
    000000eb: 	cmpl	$0x2, 0xc(%rsp)
    000000f0: 	cvttsd2si	init_value(%rip), %edx
    000000f8: 	jbe	.Ltmp1640 # Offset: 248
.Ltmp1648:
    000000fe: 	movd	%edx, %xmm2
    00000102: 	movq	%r15, %rax
    00000105: 	pshufd	$0x0, %xmm2, %xmm0
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1641:
    00000110: 	movups	%xmm0, (%rax)
    00000113: 	addq	$0x10, %rax
    00000117: 	cmpq	%r14, %rax
    0000011a: 	jne	.Ltmp1641 # Offset: 282
    0000011c: 	cmpl	%ebx, %r13d
    0000011f: 	je	.Ltmp1635 # Offset: 287
    00000121: 	movl	%ebx, %eax
.Ltmp1650:
    00000123: 	movslq	%eax, %rdi
    00000126: 	addl	$0x1, %eax
    00000129: 	movl	%edx, (%r15,%rdi,4)
    0000012d: 	leaq	(,%rdi,4), %rsi
    00000135: 	cmpl	%eax, %r13d
    00000138: 	jle	.Ltmp1635 # Offset: 312
.Ltmp1651:
    0000013a: 	addl	$0x1, %eax
    0000013d: 	movl	%edx, 0x4(%r15,%rsi)
    00000142: 	cmpl	%eax, %r13d
    00000145: 	jle	.Ltmp1635 # Offset: 325
    00000147: 	movl	%edx, 0x8(%r15,%rsi)
.Ltmp1635:
    0000014c: 	addl	$0x1, %ebp
    0000014f: 	cmpl	%ebp, iterations(%rip)
    00000155: 	jg	.Ltmp1642 # Offset: 341
.Ltmp1634:
    0000015b: 	callq	clock@PLT # Offset: 347
    00000160: 	movq	0x18(%rsp), %rdi
    00000165: 	pxor	%xmm0, %xmm0
    00000169: 	movq	%rax, end_time(%rip)
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	testl	%r13d, %r13d
    0000018c: 	jle	.Ltmp1643 # Offset: 396
    00000192: 	leal	-0x1(%r13), %eax
    00000196: 	cmpl	$0x2, %eax
    00000199: 	jbe	.Ltmp1644 # Offset: 409
    0000019f: 	movl	%r13d, %edx
    000001a2: 	movq	%r15, %rax
    000001a5: 	pxor	%xmm0, %xmm0
    000001a9: 	shrl	$0x2, %edx
    000001ac: 	subl	$0x1, %edx
    000001af: 	shlq	$0x4, %rdx
    000001b3: 	leaq	0x10(%r15,%rdx), %rdx
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1645:
    000001c0: 	movdqu	(%rax), %xmm3
    000001c4: 	addq	$0x10, %rax
    000001c8: 	paddd	%xmm3, %xmm0
    000001cc: 	cmpq	%rdx, %rax
    000001cf: 	jne	.Ltmp1645 # Offset: 463
    000001d1: 	movdqa	%xmm0, %xmm1
    000001d5: 	movl	%r13d, %eax
    000001d8: 	psrldq	$0x8, %xmm1
    000001dd: 	andl	$-0x4, %eax
    000001e0: 	paddd	%xmm1, %xmm0
    000001e4: 	movdqa	%xmm0, %xmm1
    000001e8: 	psrldq	$0x4, %xmm1
    000001ed: 	paddd	%xmm1, %xmm0
    000001f1: 	movd	%xmm0, %ebp
    000001f5: 	testb	$0x3, %r13b
    000001f9: 	je	.Ltmp1646 # Offset: 505
.Ltmp1654:
    000001fb: 	movslq	%eax, %rdx
    000001fe: 	leaq	(,%rdx,4), %rsi
    00000206: 	addl	(%r15,%rdx,4), %ebp
    0000020a: 	leal	0x1(%rax), %edx
    0000020d: 	cmpl	%edx, %r13d
    00000210: 	jle	.Ltmp1646 # Offset: 528
    00000212: 	addl	$0x2, %eax
    00000215: 	addl	0x4(%r15,%rsi), %ebp
    0000021a: 	cmpl	%r13d, %eax
    0000021d: 	jge	.Ltmp1646 # Offset: 541
    0000021f: 	addl	0x8(%r15,%rsi), %ebp
.Ltmp1646:
    00000224: 	cvttsd2si	init_value(%rip), %r12d
    0000022d: 	imull	$0x7a1200, %r12d, %r12d
    00000234: 	cmpl	%ebp, %r12d
    00000237: 	jne	.Ltmp1647 # Offset: 567
    00000239: 	addq	$0x28, %rsp
    0000023d: 	popq	%rbx
    0000023e: 	popq	%rbp
    0000023f: 	popq	%r12
    00000241: 	popq	%r13
    00000243: 	popq	%r14
    00000245: 	popq	%r15
    00000247: 	retq # Offset: 583
    00000248: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1638:
    00000250: 	cvttsd2si	init_value(%rip), %edx
    00000258: 	jmp	.Ltmp1648 # Offset: 600
.Ltmp1636:
    0000025d: 	movl	$0x1, (%r15)
    00000264: 	movl	$0x1, %eax
    00000269: 	xorl	%edx, %edx
    0000026b: 	cmpl	$0x1, %r13d
    0000026f: 	jne	.Ltmp1649 # Offset: 623
    00000275: 	cvttsd2si	init_value(%rip), %edx
    0000027d: 	xorl	%eax, %eax
    0000027f: 	jmp	.Ltmp1650 # Offset: 639
.Ltmp1640:
    00000284: 	movl	%edx, (%r15)
    00000287: 	xorl	%esi, %esi
    00000289: 	movl	$0x1, %eax
    0000028e: 	jmp	.Ltmp1651 # Offset: 654
.Ltmp1647:
    00000293: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000029a: 	movl	$0x5, %edx
    0000029f: 	leaq	DATAat0x35004(%rip), %rsi
    000002a6: 	movq	%r14, %rdi
    000002a9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 681
    000002ae: 	cmpq	$0x0, 0x18(%rsp)
    000002b4: 	je	.Ltmp1652 # Offset: 692
    000002b6: 	movq	0x18(%rsp), %rbx
    000002bb: 	movq	%rbx, %rdi
    000002be: 	callq	strlen@PLT # Offset: 702
    000002c3: 	movq	%rbx, %rsi
    000002c6: 	movq	%r14, %rdi
    000002c9: 	movq	%rax, %rdx
    000002cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 716
.Ltmp1653:
    000002d1: 	movl	$0xd, %edx
    000002d6: 	movq	%r14, %rdi
    000002d9: 	leaq	DATAat0x3500a(%rip), %rsi
    000002e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 736
    000002e5: 	movl	%ebp, %esi
    000002e7: 	movq	%r14, %rdi
    000002ea: 	callq	_ZNSolsEi@PLT # Offset: 746
    000002ef: 	movl	$0xb, %edx
    000002f4: 	leaq	DATAat0x35018(%rip), %rsi
    000002fb: 	movq	%rax, %rbp
    000002fe: 	movq	%rax, %rdi
    00000301: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 769
    00000306: 	movq	%rbp, %rdi
    00000309: 	movl	%r12d, %esi
    0000030c: 	callq	_ZNSolsEi@PLT # Offset: 780
    00000311: 	addq	$0x28, %rsp
    00000315: 	popq	%rbx
    00000316: 	movq	%rax, %rdi
    00000319: 	popq	%rbp
    0000031a: 	popq	%r12
    0000031c: 	popq	%r13
    0000031e: 	popq	%r14
    00000320: 	popq	%r15
    00000322: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 802
.Ltmp1652:
    00000327: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000032e: 	movq	-0x18(%rax), %rdi
    00000332: 	addq	%r14, %rdi
    00000335: 	movl	0x20(%rdi), %esi
    00000338: 	orl	$0x1, %esi
    0000033b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 827
    00000340: 	jmp	.Ltmp1653 # Offset: 832
.Ltmp1643:
    00000342: 	xorl	%ebp, %ebp
    00000344: 	jmp	.Ltmp1646 # Offset: 836
.Ltmp1644:
    00000349: 	xorl	%ebp, %ebp
    0000034b: 	xorl	%eax, %eax
    0000034d: 	jmp	.Ltmp1654 # Offset: 845
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace3IiEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace3IiEvPT_iPKc" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x25ea0
  Size        : 0x352
  MaxSize     : 0x360
  Offset      : 0x25ea0
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1655 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movslq	%r13d, %r12
    00000041: 	xorl	%ebp, %ebp
    00000043: 	movl	%eax, 0xc(%rsp)
    00000047: 	movl	%r13d, %eax
    0000004a: 	andl	$-0x4, %ebx
    0000004d: 	shlq	$0x2, %r12
    00000051: 	shrl	$0x2, %eax
    00000054: 	subl	$0x1, %eax
    00000057: 	shlq	$0x4, %rax
    0000005b: 	leaq	0x10(%r15,%rax), %r14
    00000060: 	movslq	%ebx, %rax
    00000063: 	shlq	$0x2, %rax
    00000067: 	movq	%rax, 0x10(%rsp)
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1663:
    00000070: 	xorl	%esi, %esi
    00000072: 	movq	%r12, %rdx
    00000075: 	movq	%r15, %rdi
    00000078: 	callq	memset@PLT # Offset: 120
    0000007d: 	testl	%r13d, %r13d
    00000080: 	movdqa	DATAat0x36fa0(%rip), %xmm1
    00000088: 	jle	.Ltmp1656 # Offset: 136
    0000008e: 	cmpl	$0x2, 0xc(%rsp)
    00000093: 	jbe	.Ltmp1657 # Offset: 147
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1658:
    000000a0: 	movups	%xmm1, (%rax)
    000000a3: 	addq	$0x10, %rax
    000000a7: 	cmpq	%r14, %rax
    000000aa: 	jne	.Ltmp1658 # Offset: 170
    000000ac: 	cmpl	%ebx, %r13d
    000000af: 	je	.Ltmp1659 # Offset: 175
    000000b5: 	movq	0x10(%rsp), %rax
    000000ba: 	movl	$0x1, (%r15,%rax)
    000000c2: 	movq	%rax, %rdx
    000000c5: 	leal	0x1(%rbx), %eax
    000000c8: 	cmpl	%eax, %r13d
    000000cb: 	jle	.Ltmp1659 # Offset: 203
.Ltmp1670:
    000000d1: 	movl	$0x1, 0x4(%r15,%rdx)
    000000da: 	addl	$0x1, %eax
    000000dd: 	cmpl	%eax, %r13d
    000000e0: 	jle	.Ltmp1660 # Offset: 224
    000000e2: 	movl	$0x1, 0x8(%r15,%rdx)
.Ltmp1660:
    000000eb: 	cmpl	$0x2, 0xc(%rsp)
    000000f0: 	cvttsd2si	init_value(%rip), %edx
    000000f8: 	jbe	.Ltmp1661 # Offset: 248
.Ltmp1669:
    000000fe: 	movd	%edx, %xmm2
    00000102: 	movq	%r15, %rax
    00000105: 	pshufd	$0x0, %xmm2, %xmm0
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1662:
    00000110: 	movups	%xmm0, (%rax)
    00000113: 	addq	$0x10, %rax
    00000117: 	cmpq	%r14, %rax
    0000011a: 	jne	.Ltmp1662 # Offset: 282
    0000011c: 	cmpl	%ebx, %r13d
    0000011f: 	je	.Ltmp1656 # Offset: 287
    00000121: 	movl	%ebx, %eax
.Ltmp1671:
    00000123: 	movslq	%eax, %rdi
    00000126: 	addl	$0x1, %eax
    00000129: 	movl	%edx, (%r15,%rdi,4)
    0000012d: 	leaq	(,%rdi,4), %rsi
    00000135: 	cmpl	%eax, %r13d
    00000138: 	jle	.Ltmp1656 # Offset: 312
.Ltmp1672:
    0000013a: 	addl	$0x1, %eax
    0000013d: 	movl	%edx, 0x4(%r15,%rsi)
    00000142: 	cmpl	%eax, %r13d
    00000145: 	jle	.Ltmp1656 # Offset: 325
    00000147: 	movl	%edx, 0x8(%r15,%rsi)
.Ltmp1656:
    0000014c: 	addl	$0x1, %ebp
    0000014f: 	cmpl	%ebp, iterations(%rip)
    00000155: 	jg	.Ltmp1663 # Offset: 341
.Ltmp1655:
    0000015b: 	callq	clock@PLT # Offset: 347
    00000160: 	movq	0x18(%rsp), %rdi
    00000165: 	pxor	%xmm0, %xmm0
    00000169: 	movq	%rax, end_time(%rip)
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	testl	%r13d, %r13d
    0000018c: 	jle	.Ltmp1664 # Offset: 396
    00000192: 	leal	-0x1(%r13), %eax
    00000196: 	cmpl	$0x2, %eax
    00000199: 	jbe	.Ltmp1665 # Offset: 409
    0000019f: 	movl	%r13d, %edx
    000001a2: 	movq	%r15, %rax
    000001a5: 	pxor	%xmm0, %xmm0
    000001a9: 	shrl	$0x2, %edx
    000001ac: 	subl	$0x1, %edx
    000001af: 	shlq	$0x4, %rdx
    000001b3: 	leaq	0x10(%r15,%rdx), %rdx
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1666:
    000001c0: 	movdqu	(%rax), %xmm3
    000001c4: 	addq	$0x10, %rax
    000001c8: 	paddd	%xmm3, %xmm0
    000001cc: 	cmpq	%rdx, %rax
    000001cf: 	jne	.Ltmp1666 # Offset: 463
    000001d1: 	movdqa	%xmm0, %xmm1
    000001d5: 	movl	%r13d, %eax
    000001d8: 	psrldq	$0x8, %xmm1
    000001dd: 	andl	$-0x4, %eax
    000001e0: 	paddd	%xmm1, %xmm0
    000001e4: 	movdqa	%xmm0, %xmm1
    000001e8: 	psrldq	$0x4, %xmm1
    000001ed: 	paddd	%xmm1, %xmm0
    000001f1: 	movd	%xmm0, %ebp
    000001f5: 	testb	$0x3, %r13b
    000001f9: 	je	.Ltmp1667 # Offset: 505
.Ltmp1675:
    000001fb: 	movslq	%eax, %rdx
    000001fe: 	leaq	(,%rdx,4), %rsi
    00000206: 	addl	(%r15,%rdx,4), %ebp
    0000020a: 	leal	0x1(%rax), %edx
    0000020d: 	cmpl	%edx, %r13d
    00000210: 	jle	.Ltmp1667 # Offset: 528
    00000212: 	addl	$0x2, %eax
    00000215: 	addl	0x4(%r15,%rsi), %ebp
    0000021a: 	cmpl	%r13d, %eax
    0000021d: 	jge	.Ltmp1667 # Offset: 541
    0000021f: 	addl	0x8(%r15,%rsi), %ebp
.Ltmp1667:
    00000224: 	cvttsd2si	init_value(%rip), %r12d
    0000022d: 	imull	$0x7a1200, %r12d, %r12d
    00000234: 	cmpl	%ebp, %r12d
    00000237: 	jne	.Ltmp1668 # Offset: 567
    00000239: 	addq	$0x28, %rsp
    0000023d: 	popq	%rbx
    0000023e: 	popq	%rbp
    0000023f: 	popq	%r12
    00000241: 	popq	%r13
    00000243: 	popq	%r14
    00000245: 	popq	%r15
    00000247: 	retq # Offset: 583
    00000248: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1659:
    00000250: 	cvttsd2si	init_value(%rip), %edx
    00000258: 	jmp	.Ltmp1669 # Offset: 600
.Ltmp1657:
    0000025d: 	movl	$0x1, (%r15)
    00000264: 	movl	$0x1, %eax
    00000269: 	xorl	%edx, %edx
    0000026b: 	cmpl	$0x1, %r13d
    0000026f: 	jne	.Ltmp1670 # Offset: 623
    00000275: 	cvttsd2si	init_value(%rip), %edx
    0000027d: 	xorl	%eax, %eax
    0000027f: 	jmp	.Ltmp1671 # Offset: 639
.Ltmp1661:
    00000284: 	movl	%edx, (%r15)
    00000287: 	xorl	%esi, %esi
    00000289: 	movl	$0x1, %eax
    0000028e: 	jmp	.Ltmp1672 # Offset: 654
.Ltmp1668:
    00000293: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000029a: 	movl	$0x5, %edx
    0000029f: 	leaq	DATAat0x35004(%rip), %rsi
    000002a6: 	movq	%r14, %rdi
    000002a9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 681
    000002ae: 	cmpq	$0x0, 0x18(%rsp)
    000002b4: 	je	.Ltmp1673 # Offset: 692
    000002b6: 	movq	0x18(%rsp), %rbx
    000002bb: 	movq	%rbx, %rdi
    000002be: 	callq	strlen@PLT # Offset: 702
    000002c3: 	movq	%rbx, %rsi
    000002c6: 	movq	%r14, %rdi
    000002c9: 	movq	%rax, %rdx
    000002cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 716
.Ltmp1674:
    000002d1: 	movl	$0xd, %edx
    000002d6: 	movq	%r14, %rdi
    000002d9: 	leaq	DATAat0x3500a(%rip), %rsi
    000002e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 736
    000002e5: 	movl	%ebp, %esi
    000002e7: 	movq	%r14, %rdi
    000002ea: 	callq	_ZNSolsEi@PLT # Offset: 746
    000002ef: 	movl	$0xb, %edx
    000002f4: 	leaq	DATAat0x35018(%rip), %rsi
    000002fb: 	movq	%rax, %rbp
    000002fe: 	movq	%rax, %rdi
    00000301: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 769
    00000306: 	movq	%rbp, %rdi
    00000309: 	movl	%r12d, %esi
    0000030c: 	callq	_ZNSolsEi@PLT # Offset: 780
    00000311: 	addq	$0x28, %rsp
    00000315: 	popq	%rbx
    00000316: 	movq	%rax, %rdi
    00000319: 	popq	%rbp
    0000031a: 	popq	%r12
    0000031c: 	popq	%r13
    0000031e: 	popq	%r14
    00000320: 	popq	%r15
    00000322: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 802
.Ltmp1673:
    00000327: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000032e: 	movq	-0x18(%rax), %rdi
    00000332: 	addq	%r14, %rdi
    00000335: 	movl	0x20(%rdi), %esi
    00000338: 	orl	$0x1, %esi
    0000033b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 827
    00000340: 	jmp	.Ltmp1674 # Offset: 832
.Ltmp1664:
    00000342: 	xorl	%ebp, %ebp
    00000344: 	jmp	.Ltmp1667 # Offset: 836
.Ltmp1665:
    00000349: 	xorl	%ebp, %ebp
    0000034b: 	xorl	%eax, %eax
    0000034d: 	jmp	.Ltmp1675 # Offset: 845
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace3IiEvPT_iPKc"

Binary Function "_Z22test_for_loop_replace3IiEvPT_iPKc" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x26200
  Size        : 0x335
  MaxSize     : 0x340
  Offset      : 0x26200
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_replace3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1676 # Offset: 49
    00000037: 	leal	-0x1(%r14), %edx
    0000003b: 	movl	%r14d, %r12d
    0000003e: 	xorl	%ebp, %ebp
    00000040: 	leaq	0x4(,%rdx,4), %rcx
    00000048: 	movl	%edx, 0x4(%rsp)
    0000004c: 	movl	%r14d, %edx
    0000004f: 	andl	$-0x4, %r12d
    00000053: 	shrl	$0x2, %edx
    00000056: 	movq	%rcx, 0x8(%rsp)
    0000005b: 	cvttsd2si	init_value(%rip), %r13d
    00000064: 	subl	$0x1, %edx
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	leaq	0x10(%r15,%rdx), %rbx
    00000070: 	movslq	%r12d, %rdx
    00000073: 	leaq	(,%rdx,4), %rcx
    0000007b: 	movq	%rcx, 0x10(%rsp)
.Ltmp1685:
    00000080: 	testl	%r14d, %r14d
    00000083: 	jle	.Ltmp1677 # Offset: 131
    00000089: 	movq	0x8(%rsp), %rdx
    0000008e: 	xorl	%esi, %esi
    00000090: 	movq	%r15, %rdi
    00000093: 	callq	memset@PLT # Offset: 147
    00000098: 	cmpl	$0x2, 0x4(%rsp)
    0000009d: 	movdqa	DATAat0x36fa0(%rip), %xmm1
    000000a5: 	jbe	.Ltmp1678 # Offset: 165
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1679:
    000000b0: 	movups	%xmm1, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jne	.Ltmp1679 # Offset: 186
    000000bc: 	cmpl	%r12d, %r14d
    000000bf: 	je	.Ltmp1680 # Offset: 191
    000000c1: 	movq	0x10(%rsp), %rax
    000000c6: 	movl	$0x1, (%r15,%rax)
    000000ce: 	movq	%rax, %rdx
    000000d1: 	leal	0x1(%r12), %eax
    000000d6: 	cmpl	%eax, %r14d
    000000d9: 	jle	.Ltmp1680 # Offset: 217
.Ltmp1691:
    000000db: 	movl	$0x1, 0x4(%r15,%rdx)
    000000e4: 	addl	$0x1, %eax
    000000e7: 	cmpl	%eax, %r14d
    000000ea: 	jle	.Ltmp1681 # Offset: 234
    000000ec: 	movl	$0x1, 0x8(%r15,%rdx)
.Ltmp1681:
    000000f5: 	cmpl	$0x2, 0x4(%rsp)
    000000fa: 	jbe	.Ltmp1682 # Offset: 250
.Ltmp1680:
    00000100: 	movd	%r13d, %xmm2
    00000105: 	movq	%r15, %rax
    00000108: 	pshufd	$0x0, %xmm2, %xmm0
    0000010d: 	nopl	(%rax) # Size: 3
.Ltmp1683:
    00000110: 	movups	%xmm0, (%rax)
    00000113: 	addq	$0x10, %rax
    00000117: 	cmpq	%rbx, %rax
    0000011a: 	jne	.Ltmp1683 # Offset: 282
    0000011c: 	cmpl	%r12d, %r14d
    0000011f: 	je	.Ltmp1684 # Offset: 287
    00000121: 	movl	%r12d, %eax
.Ltmp1692:
    00000124: 	movslq	%eax, %rsi
    00000127: 	addl	$0x1, %eax
    0000012a: 	movl	%r13d, (%r15,%rsi,4)
    0000012e: 	leaq	(,%rsi,4), %rdx
    00000136: 	cmpl	%eax, %r14d
    00000139: 	jle	.Ltmp1684 # Offset: 313
.Ltmp1693:
    0000013b: 	addl	$0x1, %eax
    0000013e: 	movl	%r13d, 0x4(%r15,%rdx)
    00000143: 	cmpl	%eax, %r14d
    00000146: 	jle	.Ltmp1684 # Offset: 326
    00000148: 	movl	%r13d, 0x8(%r15,%rdx)
.Ltmp1684:
    0000014d: 	movl	iterations(%rip), %eax
.Ltmp1677:
    00000153: 	addl	$0x1, %ebp
    00000156: 	cmpl	%ebp, %eax
    00000158: 	jg	.Ltmp1685 # Offset: 344
.Ltmp1676:
    0000015e: 	callq	clock@PLT # Offset: 350
    00000163: 	movq	0x18(%rsp), %rdi
    00000168: 	pxor	%xmm0, %xmm0
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	subq	start_time(%rip), %rax
    0000017a: 	cvtsi2sd	%rax, %xmm0
    0000017f: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000187: 	callq	_Z13record_resultdPKc # Offset: 391
    0000018c: 	testl	%r14d, %r14d
    0000018f: 	jle	.Ltmp1686 # Offset: 399
    00000195: 	leal	-0x1(%r14), %eax
    00000199: 	cmpl	$0x2, %eax
    0000019c: 	jbe	.Ltmp1687 # Offset: 412
    000001a2: 	movl	%r14d, %edx
    000001a5: 	movq	%r15, %rax
    000001a8: 	pxor	%xmm0, %xmm0
    000001ac: 	shrl	$0x2, %edx
    000001af: 	subl	$0x1, %edx
    000001b2: 	shlq	$0x4, %rdx
    000001b6: 	leaq	0x10(%r15,%rdx), %rdx
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1688:
    000001c0: 	movdqu	(%rax), %xmm3
    000001c4: 	addq	$0x10, %rax
    000001c8: 	paddd	%xmm3, %xmm0
    000001cc: 	cmpq	%rdx, %rax
    000001cf: 	jne	.Ltmp1688 # Offset: 463
    000001d1: 	movdqa	%xmm0, %xmm1
    000001d5: 	movl	%r14d, %eax
    000001d8: 	psrldq	$0x8, %xmm1
    000001dd: 	andl	$-0x4, %eax
    000001e0: 	paddd	%xmm1, %xmm0
    000001e4: 	movdqa	%xmm0, %xmm1
    000001e8: 	psrldq	$0x4, %xmm1
    000001ed: 	paddd	%xmm1, %xmm0
    000001f1: 	movd	%xmm0, %ebp
    000001f5: 	testb	$0x3, %r14b
    000001f9: 	je	.Ltmp1689 # Offset: 505
.Ltmp1696:
    000001fb: 	movslq	%eax, %rdx
    000001fe: 	leaq	(,%rdx,4), %rsi
    00000206: 	addl	(%r15,%rdx,4), %ebp
    0000020a: 	leal	0x1(%rax), %edx
    0000020d: 	cmpl	%edx, %r14d
    00000210: 	jle	.Ltmp1689 # Offset: 528
    00000212: 	addl	$0x2, %eax
    00000215: 	addl	0x4(%r15,%rsi), %ebp
    0000021a: 	cmpl	%r14d, %eax
    0000021d: 	jge	.Ltmp1689 # Offset: 541
    0000021f: 	addl	0x8(%r15,%rsi), %ebp
.Ltmp1689:
    00000224: 	cvttsd2si	init_value(%rip), %r12d
    0000022d: 	imull	$0x7a1200, %r12d, %r12d
    00000234: 	cmpl	%ebp, %r12d
    00000237: 	jne	.Ltmp1690 # Offset: 567
    00000239: 	addq	$0x28, %rsp
    0000023d: 	popq	%rbx
    0000023e: 	popq	%rbp
    0000023f: 	popq	%r12
    00000241: 	popq	%r13
    00000243: 	popq	%r14
    00000245: 	popq	%r15
    00000247: 	retq # Offset: 583
.Ltmp1678:
    00000248: 	movl	$0x1, (%r15)
    0000024f: 	movl	$0x1, %eax
    00000254: 	xorl	%edx, %edx
    00000256: 	cmpl	$0x1, %r14d
    0000025a: 	jne	.Ltmp1691 # Offset: 602
    00000260: 	xorl	%eax, %eax
    00000262: 	jmp	.Ltmp1692 # Offset: 610
.Ltmp1682:
    00000267: 	movl	%r13d, (%r15)
    0000026a: 	xorl	%edx, %edx
    0000026c: 	movl	$0x1, %eax
    00000271: 	jmp	.Ltmp1693 # Offset: 625
.Ltmp1690:
    00000276: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000027d: 	movl	$0x5, %edx
    00000282: 	leaq	DATAat0x35004(%rip), %rsi
    00000289: 	movq	%r13, %rdi
    0000028c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 652
    00000291: 	cmpq	$0x0, 0x18(%rsp)
    00000297: 	je	.Ltmp1694 # Offset: 663
    00000299: 	movq	0x18(%rsp), %rbx
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	callq	strlen@PLT # Offset: 673
    000002a6: 	movq	%rbx, %rsi
    000002a9: 	movq	%r13, %rdi
    000002ac: 	movq	%rax, %rdx
    000002af: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 687
.Ltmp1695:
    000002b4: 	movl	$0xd, %edx
    000002b9: 	movq	%r13, %rdi
    000002bc: 	leaq	DATAat0x3500a(%rip), %rsi
    000002c3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 707
    000002c8: 	movl	%ebp, %esi
    000002ca: 	movq	%r13, %rdi
    000002cd: 	callq	_ZNSolsEi@PLT # Offset: 717
    000002d2: 	movl	$0xb, %edx
    000002d7: 	leaq	DATAat0x35018(%rip), %rsi
    000002de: 	movq	%rax, %rbp
    000002e1: 	movq	%rax, %rdi
    000002e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 740
    000002e9: 	movq	%rbp, %rdi
    000002ec: 	movl	%r12d, %esi
    000002ef: 	callq	_ZNSolsEi@PLT # Offset: 751
    000002f4: 	addq	$0x28, %rsp
    000002f8: 	popq	%rbx
    000002f9: 	movq	%rax, %rdi
    000002fc: 	popq	%rbp
    000002fd: 	popq	%r12
    000002ff: 	popq	%r13
    00000301: 	popq	%r14
    00000303: 	popq	%r15
    00000305: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 773
.Ltmp1694:
    0000030a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000311: 	movq	-0x18(%rax), %rdi
    00000315: 	addq	%r13, %rdi
    00000318: 	movl	0x20(%rdi), %esi
    0000031b: 	orl	$0x1, %esi
    0000031e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 798
    00000323: 	jmp	.Ltmp1695 # Offset: 803
.Ltmp1686:
    00000325: 	xorl	%ebp, %ebp
    00000327: 	jmp	.Ltmp1689 # Offset: 807
.Ltmp1687:
    0000032c: 	xorl	%ebp, %ebp
    0000032e: 	xorl	%eax, %eax
    00000330: 	jmp	.Ltmp1696 # Offset: 816
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_replace3IiEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace2IdEvPT_iPKc" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x26540
  Size        : 0x3a6
  MaxSize     : 0x3b0
  Offset      : 0x26540
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace2IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1697 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	movslq	%r12d, %rbp
    0000003d: 	leal	-0x1(%r12), %edx
    00000042: 	leaq	(%r15,%rax,8), %rsi
    00000046: 	leaq	init_value(%rip), %rax
    0000004d: 	shlq	$0x3, %rbp
    00000051: 	cmpq	%rax, %rsi
    00000054: 	leaq	iterations(%rip), %rsi
    0000005b: 	setbe	%al
    0000005e: 	cmpq	%rsi, %r15
    00000061: 	setae	%sil
    00000065: 	orb	%sil, %al
    00000068: 	je	.Ltmp1698 # Offset: 104
    0000006e: 	cmpl	$0x2, %edx
    00000071: 	jbe	.Ltmp1698 # Offset: 113
    00000077: 	movl	%r12d, %eax
    0000007a: 	xorl	%r13d, %r13d
    0000007d: 	shrl	%eax
    0000007f: 	leal	-0x1(%rax), %ebx
    00000082: 	leaq	0x10(%r15), %rax
    00000086: 	shlq	$0x4, %rbx
    0000008a: 	movq	%rax, 0x18(%rsp)
    0000008f: 	addq	%rax, %rbx
    00000092: 	movl	%r12d, %eax
    00000095: 	andl	$-0x2, %eax
    00000098: 	movl	%eax, 0x8(%rsp)
    0000009c: 	cltq
    0000009e: 	leaq	(%r15,%rax,8), %r14
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1701:
    000000a8: 	xorl	%esi, %esi
    000000aa: 	movq	%rbp, %rdx
    000000ad: 	movq	%r15, %rdi
    000000b0: 	callq	memset@PLT # Offset: 176
    000000b5: 	testl	%r12d, %r12d
    000000b8: 	jle	.Ltmp1699 # Offset: 184
    000000ba: 	movsd	init_value(%rip), %xmm0
    000000c2: 	unpcklpd	%xmm0, %xmm0
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1700:
    000000d0: 	movups	%xmm0, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rbx, %rax
    000000da: 	jne	.Ltmp1700 # Offset: 218
    000000dc: 	cmpl	0x8(%rsp), %r12d
    000000e1: 	je	.Ltmp1699 # Offset: 225
    000000e3: 	movsd	init_value(%rip), %xmm0
    000000eb: 	movsd	%xmm0, (%r14)
.Ltmp1699:
    000000f0: 	addl	$0x1, %r13d
    000000f4: 	cmpl	%r13d, iterations(%rip)
    000000fb: 	jg	.Ltmp1701 # Offset: 251
    000000fd: 	callq	clock@PLT # Offset: 253
    00000102: 	movq	0x10(%rsp), %rdi
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rax, end_time(%rip)
    00000112: 	subq	start_time(%rip), %rax
    00000119: 	cvtsi2sd	%rax, %xmm0
    0000011e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000126: 	callq	_Z13record_resultdPKc # Offset: 294
    0000012b: 	testl	%r12d, %r12d
    0000012e: 	jle	.Ltmp1702 # Offset: 302
.Ltmp1712:
    00000134: 	movl	%r12d, %edx
    00000137: 	movq	%r15, %rax
    0000013a: 	pxor	%xmm0, %xmm0
    0000013e: 	shrl	%edx
    00000140: 	subl	$0x1, %edx
    00000143: 	shlq	$0x4, %rdx
    00000147: 	addq	0x18(%rsp), %rdx
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp1703:
    00000150: 	movsd	(%rax), %xmm1
    00000154: 	addq	$0x10, %rax
    00000158: 	addsd	%xmm1, %xmm0
    0000015c: 	movsd	-0x8(%rax), %xmm1
    00000161: 	addsd	%xmm1, %xmm0
    00000165: 	cmpq	%rax, %rdx
    00000168: 	jne	.Ltmp1703 # Offset: 360
    0000016a: 	movl	%r12d, %eax
    0000016d: 	andl	$-0x2, %eax
    00000170: 	andl	$0x1, %r12d
    00000174: 	je	.Ltmp1704 # Offset: 372
.Ltmp1713:
    00000176: 	cltq
    00000178: 	addsd	(%r15,%rax,8), %xmm0
.Ltmp1704:
    0000017e: 	movsd	DATAat0x36ec8(%rip), %xmm2
    00000186: 	movq	DATAat0x36f60(%rip), %xmm3
    0000018e: 	movapd	%xmm0, %xmm4
    00000192: 	movapd	%xmm0, %xmm1
    00000196: 	mulsd	init_value(%rip), %xmm2
    0000019e: 	andpd	%xmm3, %xmm4
    000001a2: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000001aa: 	subsd	%xmm2, %xmm1
    000001ae: 	jbe	.Ltmp1705 # Offset: 430
    000001b0: 	divsd	%xmm0, %xmm1
.Ltmp1705:
    000001b4: 	andpd	%xmm3, %xmm1
    000001b8: 	movsd	DATAat0x36ee0(%rip), %xmm3
    000001c0: 	comisd	%xmm1, %xmm3
    000001c4: 	jbe	.Ltmp1706 # Offset: 452
    000001c6: 	addq	$0x28, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	popq	%r14
    000001d2: 	popq	%r15
    000001d4: 	retq # Offset: 468
.Ltmp1706:
    000001d5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000001dc: 	movl	$0x5, %edx
    000001e1: 	leaq	DATAat0x35004(%rip), %rsi
    000001e8: 	movsd	%xmm0, 0x18(%rsp)
    000001ee: 	movq	%rbp, %rdi
    000001f1: 	movsd	%xmm2, 0x8(%rsp)
    000001f7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 503
    000001fc: 	cmpq	$0x0, 0x10(%rsp)
    00000202: 	movsd	0x8(%rsp), %xmm2
    00000208: 	movsd	0x18(%rsp), %xmm0
    0000020e: 	je	.Ltmp1707 # Offset: 526
    00000214: 	movq	0x10(%rsp), %rbx
    00000219: 	movsd	%xmm0, 0x18(%rsp)
    0000021f: 	movsd	%xmm2, 0x8(%rsp)
    00000225: 	movq	%rbx, %rdi
    00000228: 	callq	strlen@PLT # Offset: 552
    0000022d: 	movq	%rbx, %rsi
    00000230: 	movq	%rbp, %rdi
    00000233: 	movq	%rax, %rdx
    00000236: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 566
    0000023b: 	movsd	0x18(%rsp), %xmm0
    00000241: 	movsd	0x8(%rsp), %xmm2
.Ltmp1714:
    00000247: 	movl	$0xd, %edx
    0000024c: 	leaq	DATAat0x3500a(%rip), %rsi
    00000253: 	movq	%rbp, %rdi
    00000256: 	movsd	%xmm2, 0x8(%rsp)
    0000025c: 	movsd	%xmm0, 0x10(%rsp)
    00000262: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 610
    00000267: 	movsd	0x10(%rsp), %xmm0
    0000026d: 	movq	%rbp, %rdi
    00000270: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 624
    00000275: 	movl	$0xb, %edx
    0000027a: 	leaq	DATAat0x35018(%rip), %rsi
    00000281: 	movq	%rax, %rdi
    00000284: 	movq	%rax, %rbp
    00000287: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 647
    0000028c: 	movsd	0x8(%rsp), %xmm2
    00000292: 	movq	%rbp, %rdi
    00000295: 	movapd	%xmm2, %xmm0
    00000299: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 665
    0000029e: 	addq	$0x28, %rsp
    000002a2: 	popq	%rbx
    000002a3: 	movq	%rax, %rdi
    000002a6: 	popq	%rbp
    000002a7: 	popq	%r12
    000002a9: 	popq	%r13
    000002ab: 	popq	%r14
    000002ad: 	popq	%r15
    000002af: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 687
.Ltmp1698:
    000002b4: 	leaq	0x8(%r15,%rdx,8), %rbx
    000002b9: 	xorl	%r13d, %r13d
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp1710:
    000002c0: 	xorl	%esi, %esi
    000002c2: 	movq	%rbp, %rdx
    000002c5: 	movq	%r15, %rdi
    000002c8: 	callq	memset@PLT # Offset: 712
    000002cd: 	testl	%r12d, %r12d
    000002d0: 	jle	.Ltmp1708 # Offset: 720
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1709:
    000002d8: 	movsd	init_value(%rip), %xmm0
    000002e0: 	addq	$0x8, %rax
    000002e4: 	movsd	%xmm0, -0x8(%rax)
    000002e9: 	cmpq	%rbx, %rax
    000002ec: 	jne	.Ltmp1709 # Offset: 748
.Ltmp1708:
    000002ee: 	addl	$0x1, %r13d
    000002f2: 	cmpl	iterations(%rip), %r13d
    000002f9: 	jl	.Ltmp1710 # Offset: 761
.Ltmp1697:
    000002fb: 	callq	clock@PLT # Offset: 763
    00000300: 	movq	0x10(%rsp), %rdi
    00000305: 	pxor	%xmm0, %xmm0
    00000309: 	movq	%rax, end_time(%rip)
    00000310: 	subq	start_time(%rip), %rax
    00000317: 	cvtsi2sd	%rax, %xmm0
    0000031c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000324: 	callq	_Z13record_resultdPKc # Offset: 804
    00000329: 	testl	%r12d, %r12d
    0000032c: 	jle	.Ltmp1702 # Offset: 812
    0000032e: 	cmpl	$0x1, %r12d
    00000332: 	je	.Ltmp1711 # Offset: 818
    00000334: 	leaq	0x10(%r15), %rax
    00000338: 	movq	%rax, 0x18(%rsp)
    0000033d: 	jmp	.Ltmp1712 # Offset: 829
.Ltmp1711:
    00000342: 	pxor	%xmm0, %xmm0
    00000346: 	xorl	%eax, %eax
    00000348: 	jmp	.Ltmp1713 # Offset: 840
.Ltmp1702:
    0000034d: 	movsd	DATAat0x36ec8(%rip), %xmm2
    00000355: 	mulsd	init_value(%rip), %xmm2
    0000035d: 	pxor	%xmm0, %xmm0
    00000361: 	movapd	%xmm0, %xmm1
    00000365: 	movq	DATAat0x36f60(%rip), %xmm3
    0000036d: 	subsd	%xmm2, %xmm1
    00000371: 	jmp	.Ltmp1705 # Offset: 881
.Ltmp1707:
    00000376: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000037d: 	movsd	%xmm0, 0x10(%rsp)
    00000383: 	movq	-0x18(%rax), %rdi
    00000387: 	addq	%rbp, %rdi
    0000038a: 	movl	0x20(%rdi), %esi
    0000038d: 	orl	$0x1, %esi
    00000390: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 912
    00000395: 	movsd	0x8(%rsp), %xmm2
    0000039b: 	movsd	0x10(%rsp), %xmm0
    000003a1: 	jmp	.Ltmp1714 # Offset: 929
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace2IdEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace2IdEvPT_iPKc" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x268f0
  Size        : 0x3a6
  MaxSize     : 0x3b0
  Offset      : 0x268f0
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace2IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x10(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1715 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	movslq	%r12d, %rbp
    0000003d: 	leal	-0x1(%r12), %edx
    00000042: 	leaq	(%r15,%rax,8), %rsi
    00000046: 	leaq	init_value(%rip), %rax
    0000004d: 	shlq	$0x3, %rbp
    00000051: 	cmpq	%rax, %rsi
    00000054: 	leaq	iterations(%rip), %rsi
    0000005b: 	setbe	%al
    0000005e: 	cmpq	%rsi, %r15
    00000061: 	setae	%sil
    00000065: 	orb	%sil, %al
    00000068: 	je	.Ltmp1716 # Offset: 104
    0000006e: 	cmpl	$0x2, %edx
    00000071: 	jbe	.Ltmp1716 # Offset: 113
    00000077: 	movl	%r12d, %eax
    0000007a: 	xorl	%r13d, %r13d
    0000007d: 	shrl	%eax
    0000007f: 	leal	-0x1(%rax), %ebx
    00000082: 	leaq	0x10(%r15), %rax
    00000086: 	shlq	$0x4, %rbx
    0000008a: 	movq	%rax, 0x18(%rsp)
    0000008f: 	addq	%rax, %rbx
    00000092: 	movl	%r12d, %eax
    00000095: 	andl	$-0x2, %eax
    00000098: 	movl	%eax, 0x8(%rsp)
    0000009c: 	cltq
    0000009e: 	leaq	(%r15,%rax,8), %r14
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1719:
    000000a8: 	xorl	%esi, %esi
    000000aa: 	movq	%rbp, %rdx
    000000ad: 	movq	%r15, %rdi
    000000b0: 	callq	memset@PLT # Offset: 176
    000000b5: 	testl	%r12d, %r12d
    000000b8: 	jle	.Ltmp1717 # Offset: 184
    000000ba: 	movsd	init_value(%rip), %xmm0
    000000c2: 	unpcklpd	%xmm0, %xmm0
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1718:
    000000d0: 	movups	%xmm0, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rbx, %rax
    000000da: 	jne	.Ltmp1718 # Offset: 218
    000000dc: 	cmpl	0x8(%rsp), %r12d
    000000e1: 	je	.Ltmp1717 # Offset: 225
    000000e3: 	movsd	init_value(%rip), %xmm0
    000000eb: 	movsd	%xmm0, (%r14)
.Ltmp1717:
    000000f0: 	addl	$0x1, %r13d
    000000f4: 	cmpl	%r13d, iterations(%rip)
    000000fb: 	jg	.Ltmp1719 # Offset: 251
    000000fd: 	callq	clock@PLT # Offset: 253
    00000102: 	movq	0x10(%rsp), %rdi
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rax, end_time(%rip)
    00000112: 	subq	start_time(%rip), %rax
    00000119: 	cvtsi2sd	%rax, %xmm0
    0000011e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000126: 	callq	_Z13record_resultdPKc # Offset: 294
    0000012b: 	testl	%r12d, %r12d
    0000012e: 	jle	.Ltmp1720 # Offset: 302
.Ltmp1730:
    00000134: 	movl	%r12d, %edx
    00000137: 	movq	%r15, %rax
    0000013a: 	pxor	%xmm0, %xmm0
    0000013e: 	shrl	%edx
    00000140: 	subl	$0x1, %edx
    00000143: 	shlq	$0x4, %rdx
    00000147: 	addq	0x18(%rsp), %rdx
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp1721:
    00000150: 	movsd	(%rax), %xmm1
    00000154: 	addq	$0x10, %rax
    00000158: 	addsd	%xmm1, %xmm0
    0000015c: 	movsd	-0x8(%rax), %xmm1
    00000161: 	addsd	%xmm1, %xmm0
    00000165: 	cmpq	%rax, %rdx
    00000168: 	jne	.Ltmp1721 # Offset: 360
    0000016a: 	movl	%r12d, %eax
    0000016d: 	andl	$-0x2, %eax
    00000170: 	andl	$0x1, %r12d
    00000174: 	je	.Ltmp1722 # Offset: 372
.Ltmp1731:
    00000176: 	cltq
    00000178: 	addsd	(%r15,%rax,8), %xmm0
.Ltmp1722:
    0000017e: 	movsd	DATAat0x36ec8(%rip), %xmm2
    00000186: 	movq	DATAat0x36f60(%rip), %xmm3
    0000018e: 	movapd	%xmm0, %xmm4
    00000192: 	movapd	%xmm0, %xmm1
    00000196: 	mulsd	init_value(%rip), %xmm2
    0000019e: 	andpd	%xmm3, %xmm4
    000001a2: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000001aa: 	subsd	%xmm2, %xmm1
    000001ae: 	jbe	.Ltmp1723 # Offset: 430
    000001b0: 	divsd	%xmm0, %xmm1
.Ltmp1723:
    000001b4: 	andpd	%xmm3, %xmm1
    000001b8: 	movsd	DATAat0x36ee0(%rip), %xmm3
    000001c0: 	comisd	%xmm1, %xmm3
    000001c4: 	jbe	.Ltmp1724 # Offset: 452
    000001c6: 	addq	$0x28, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	popq	%r14
    000001d2: 	popq	%r15
    000001d4: 	retq # Offset: 468
.Ltmp1724:
    000001d5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000001dc: 	movl	$0x5, %edx
    000001e1: 	leaq	DATAat0x35004(%rip), %rsi
    000001e8: 	movsd	%xmm0, 0x18(%rsp)
    000001ee: 	movq	%rbp, %rdi
    000001f1: 	movsd	%xmm2, 0x8(%rsp)
    000001f7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 503
    000001fc: 	cmpq	$0x0, 0x10(%rsp)
    00000202: 	movsd	0x8(%rsp), %xmm2
    00000208: 	movsd	0x18(%rsp), %xmm0
    0000020e: 	je	.Ltmp1725 # Offset: 526
    00000214: 	movq	0x10(%rsp), %rbx
    00000219: 	movsd	%xmm0, 0x18(%rsp)
    0000021f: 	movsd	%xmm2, 0x8(%rsp)
    00000225: 	movq	%rbx, %rdi
    00000228: 	callq	strlen@PLT # Offset: 552
    0000022d: 	movq	%rbx, %rsi
    00000230: 	movq	%rbp, %rdi
    00000233: 	movq	%rax, %rdx
    00000236: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 566
    0000023b: 	movsd	0x18(%rsp), %xmm0
    00000241: 	movsd	0x8(%rsp), %xmm2
.Ltmp1732:
    00000247: 	movl	$0xd, %edx
    0000024c: 	leaq	DATAat0x3500a(%rip), %rsi
    00000253: 	movq	%rbp, %rdi
    00000256: 	movsd	%xmm2, 0x8(%rsp)
    0000025c: 	movsd	%xmm0, 0x10(%rsp)
    00000262: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 610
    00000267: 	movsd	0x10(%rsp), %xmm0
    0000026d: 	movq	%rbp, %rdi
    00000270: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 624
    00000275: 	movl	$0xb, %edx
    0000027a: 	leaq	DATAat0x35018(%rip), %rsi
    00000281: 	movq	%rax, %rdi
    00000284: 	movq	%rax, %rbp
    00000287: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 647
    0000028c: 	movsd	0x8(%rsp), %xmm2
    00000292: 	movq	%rbp, %rdi
    00000295: 	movapd	%xmm2, %xmm0
    00000299: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 665
    0000029e: 	addq	$0x28, %rsp
    000002a2: 	popq	%rbx
    000002a3: 	movq	%rax, %rdi
    000002a6: 	popq	%rbp
    000002a7: 	popq	%r12
    000002a9: 	popq	%r13
    000002ab: 	popq	%r14
    000002ad: 	popq	%r15
    000002af: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 687
.Ltmp1716:
    000002b4: 	leaq	0x8(%r15,%rdx,8), %rbx
    000002b9: 	xorl	%r13d, %r13d
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp1728:
    000002c0: 	xorl	%esi, %esi
    000002c2: 	movq	%rbp, %rdx
    000002c5: 	movq	%r15, %rdi
    000002c8: 	callq	memset@PLT # Offset: 712
    000002cd: 	testl	%r12d, %r12d
    000002d0: 	jle	.Ltmp1726 # Offset: 720
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1727:
    000002d8: 	movsd	init_value(%rip), %xmm0
    000002e0: 	addq	$0x8, %rax
    000002e4: 	movsd	%xmm0, -0x8(%rax)
    000002e9: 	cmpq	%rbx, %rax
    000002ec: 	jne	.Ltmp1727 # Offset: 748
.Ltmp1726:
    000002ee: 	addl	$0x1, %r13d
    000002f2: 	cmpl	iterations(%rip), %r13d
    000002f9: 	jl	.Ltmp1728 # Offset: 761
.Ltmp1715:
    000002fb: 	callq	clock@PLT # Offset: 763
    00000300: 	movq	0x10(%rsp), %rdi
    00000305: 	pxor	%xmm0, %xmm0
    00000309: 	movq	%rax, end_time(%rip)
    00000310: 	subq	start_time(%rip), %rax
    00000317: 	cvtsi2sd	%rax, %xmm0
    0000031c: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000324: 	callq	_Z13record_resultdPKc # Offset: 804
    00000329: 	testl	%r12d, %r12d
    0000032c: 	jle	.Ltmp1720 # Offset: 812
    0000032e: 	cmpl	$0x1, %r12d
    00000332: 	je	.Ltmp1729 # Offset: 818
    00000334: 	leaq	0x10(%r15), %rax
    00000338: 	movq	%rax, 0x18(%rsp)
    0000033d: 	jmp	.Ltmp1730 # Offset: 829
.Ltmp1729:
    00000342: 	pxor	%xmm0, %xmm0
    00000346: 	xorl	%eax, %eax
    00000348: 	jmp	.Ltmp1731 # Offset: 840
.Ltmp1720:
    0000034d: 	movsd	DATAat0x36ec8(%rip), %xmm2
    00000355: 	mulsd	init_value(%rip), %xmm2
    0000035d: 	pxor	%xmm0, %xmm0
    00000361: 	movapd	%xmm0, %xmm1
    00000365: 	movq	DATAat0x36f60(%rip), %xmm3
    0000036d: 	subsd	%xmm2, %xmm1
    00000371: 	jmp	.Ltmp1723 # Offset: 881
.Ltmp1725:
    00000376: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000037d: 	movsd	%xmm0, 0x10(%rsp)
    00000383: 	movq	-0x18(%rax), %rdi
    00000387: 	addq	%rbp, %rdi
    0000038a: 	movl	0x20(%rdi), %esi
    0000038d: 	orl	$0x1, %esi
    00000390: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 912
    00000395: 	movsd	0x8(%rsp), %xmm2
    0000039b: 	movsd	0x10(%rsp), %xmm0
    000003a1: 	jmp	.Ltmp1732 # Offset: 929
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace2IdEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace3IdEvPT_iPKc" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x26ca0
  Size        : 0x389
  MaxSize     : 0x390
  Offset      : 0x26ca0
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1733 # Offset: 49
    00000037: 	movslq	%r14d, %r13
    0000003a: 	movl	%r14d, %edx
    0000003d: 	movl	%r14d, %ebx
    00000040: 	leaq	(,%r13,8), %rax
    00000048: 	leaq	(%r15,%rdx,8), %rsi
    0000004c: 	andl	$-0x2, %ebx
    0000004f: 	movq	%rax, 0x8(%rsp)
    00000054: 	movl	%r14d, %eax
    00000057: 	leaq	init_value(%rip), %rdx
    0000005e: 	shrl	%eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	cmpq	%rdx, %rsi
    0000006a: 	setbe	%r12b
    0000006e: 	addq	$0x8, %rdx
    00000072: 	leaq	0x10(%r15,%rax), %r13
    00000077: 	cmpq	%rdx, %r15
    0000007a: 	leal	-0x1(%r14), %eax
    0000007e: 	setae	%dl
    00000081: 	orl	%edx, %r12d
    00000084: 	cmpl	$0x2, %eax
    00000087: 	leaq	0x8(%r15,%rax,8), %rax
    0000008c: 	seta	%dl
    0000008f: 	movq	%rax, (%rsp)
    00000093: 	andl	%edx, %r12d
    00000096: 	movslq	%ebx, %rdx
    00000099: 	movb	%r12b, 0x17(%rsp)
    0000009e: 	leaq	(%r15,%rdx,8), %rbp
    000000a2: 	xorl	%r12d, %r12d
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp1740:
    000000a8: 	movq	0x8(%rsp), %rdx
    000000ad: 	xorl	%esi, %esi
    000000af: 	movq	%r15, %rdi
    000000b2: 	callq	memset@PLT # Offset: 178
    000000b7: 	movq	DATAat0x36fb0(%rip), %rax
    000000be: 	testl	%r14d, %r14d
    000000c1: 	movapd	DATAat0x36fb0(%rip), %xmm2
    000000c9: 	movq	%rax, %xmm1
    000000ce: 	jle	.Ltmp1734 # Offset: 206
    000000d0: 	cmpl	$0x1, %r14d
    000000d4: 	je	.Ltmp1735 # Offset: 212
    000000da: 	movq	%r15, %rax
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1736:
    000000e0: 	movups	%xmm2, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%r13, %rax
    000000ea: 	jne	.Ltmp1736 # Offset: 234
    000000ec: 	movslq	%ebx, %rax
    000000ef: 	cmpl	%ebx, %r14d
    000000f2: 	je	.Ltmp1737 # Offset: 242
.Ltmp1748:
    000000f4: 	movsd	%xmm1, (%r15,%rax,8)
.Ltmp1737:
    000000fa: 	cmpb	$0x0, 0x17(%rsp)
    000000ff: 	je	.Ltmp1738 # Offset: 255
    00000105: 	movsd	init_value(%rip), %xmm0
    0000010d: 	movq	%r15, %rax
    00000110: 	unpcklpd	%xmm0, %xmm0
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1739:
    00000118: 	movups	%xmm0, (%rax)
    0000011b: 	addq	$0x10, %rax
    0000011f: 	cmpq	%r13, %rax
    00000122: 	jne	.Ltmp1739 # Offset: 290
    00000124: 	cmpl	%ebx, %r14d
    00000127: 	je	.Ltmp1734 # Offset: 295
    00000129: 	movsd	init_value(%rip), %xmm0
    00000131: 	movsd	%xmm0, (%rbp)
.Ltmp1734:
    00000136: 	addl	$0x1, %r12d
    0000013a: 	cmpl	%r12d, iterations(%rip)
    00000141: 	jg	.Ltmp1740 # Offset: 321
.Ltmp1733:
    00000147: 	callq	clock@PLT # Offset: 327
    0000014c: 	movq	0x18(%rsp), %rdi
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	movq	%rax, end_time(%rip)
    0000015c: 	subq	start_time(%rip), %rax
    00000163: 	cvtsi2sd	%rax, %xmm0
    00000168: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000170: 	callq	_Z13record_resultdPKc # Offset: 368
    00000175: 	testl	%r14d, %r14d
    00000178: 	jle	.Ltmp1741 # Offset: 376
    0000017e: 	cmpl	$0x1, %r14d
    00000182: 	je	.Ltmp1742 # Offset: 386
    00000188: 	movl	%r14d, %edx
    0000018b: 	movq	%r15, %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	shrl	%edx
    00000194: 	subl	$0x1, %edx
    00000197: 	shlq	$0x4, %rdx
    0000019b: 	leaq	0x10(%r15,%rdx), %rdx
.Ltmp1743:
    000001a0: 	movsd	(%rax), %xmm1
    000001a4: 	addq	$0x10, %rax
    000001a8: 	addsd	%xmm1, %xmm0
    000001ac: 	movsd	-0x8(%rax), %xmm1
    000001b1: 	addsd	%xmm1, %xmm0
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	jne	.Ltmp1743 # Offset: 440
    000001ba: 	movl	%r14d, %eax
    000001bd: 	andl	$-0x2, %eax
    000001c0: 	andl	$0x1, %r14d
    000001c4: 	je	.Ltmp1744 # Offset: 452
.Ltmp1751:
    000001c6: 	cltq
    000001c8: 	addsd	(%r15,%rax,8), %xmm0
.Ltmp1744:
    000001ce: 	movsd	DATAat0x36ec8(%rip), %xmm2
    000001d6: 	movq	DATAat0x36f60(%rip), %xmm3
    000001de: 	movapd	%xmm0, %xmm4
    000001e2: 	movapd	%xmm0, %xmm1
    000001e6: 	mulsd	init_value(%rip), %xmm2
    000001ee: 	andpd	%xmm3, %xmm4
    000001f2: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000001fa: 	subsd	%xmm2, %xmm1
    000001fe: 	jbe	.Ltmp1745 # Offset: 510
    00000200: 	divsd	%xmm0, %xmm1
.Ltmp1745:
    00000204: 	andpd	%xmm3, %xmm1
    00000208: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000210: 	comisd	%xmm1, %xmm3
    00000214: 	jbe	.Ltmp1746 # Offset: 532
    00000216: 	addq	$0x28, %rsp
    0000021a: 	popq	%rbx
    0000021b: 	popq	%rbp
    0000021c: 	popq	%r12
    0000021e: 	popq	%r13
    00000220: 	popq	%r14
    00000222: 	popq	%r15
    00000224: 	retq # Offset: 548
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1738:
    00000228: 	movq	%r15, %rax
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1747:
    00000230: 	movsd	init_value(%rip), %xmm0
    00000238: 	addq	$0x8, %rax
    0000023c: 	movsd	%xmm0, -0x8(%rax)
    00000241: 	cmpq	(%rsp), %rax
    00000245: 	jne	.Ltmp1747 # Offset: 581
    00000247: 	jmp	.Ltmp1734 # Offset: 583
.Ltmp1735:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	jmp	.Ltmp1748 # Offset: 590
.Ltmp1746:
    00000253: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000025a: 	movl	$0x5, %edx
    0000025f: 	movsd	%xmm0, (%rsp)
    00000264: 	leaq	DATAat0x35004(%rip), %rsi
    0000026b: 	movq	%rbp, %rdi
    0000026e: 	movsd	%xmm2, 0x8(%rsp)
    00000274: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 628
    00000279: 	cmpq	$0x0, 0x18(%rsp)
    0000027f: 	movsd	(%rsp), %xmm0
    00000284: 	movsd	0x8(%rsp), %xmm2
    0000028a: 	je	.Ltmp1749 # Offset: 650
    00000290: 	movq	0x18(%rsp), %rbx
    00000295: 	movsd	%xmm2, 0x8(%rsp)
    0000029b: 	movsd	%xmm0, (%rsp)
    000002a0: 	movq	%rbx, %rdi
    000002a3: 	callq	strlen@PLT # Offset: 675
    000002a8: 	movq	%rbx, %rsi
    000002ab: 	movq	%rbp, %rdi
    000002ae: 	movq	%rax, %rdx
    000002b1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 689
    000002b6: 	movsd	0x8(%rsp), %xmm2
    000002bc: 	movsd	(%rsp), %xmm0
.Ltmp1750:
    000002c1: 	movl	$0xd, %edx
    000002c6: 	leaq	DATAat0x3500a(%rip), %rsi
    000002cd: 	movq	%rbp, %rdi
    000002d0: 	movsd	%xmm2, 0x8(%rsp)
    000002d6: 	movsd	%xmm0, (%rsp)
    000002db: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 731
    000002e0: 	movsd	(%rsp), %xmm0
    000002e5: 	movq	%rbp, %rdi
    000002e8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 744
    000002ed: 	movl	$0xb, %edx
    000002f2: 	leaq	DATAat0x35018(%rip), %rsi
    000002f9: 	movq	%rax, %rdi
    000002fc: 	movq	%rax, %rbp
    000002ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 767
    00000304: 	movsd	0x8(%rsp), %xmm2
    0000030a: 	movq	%rbp, %rdi
    0000030d: 	movapd	%xmm2, %xmm0
    00000311: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 785
    00000316: 	addq	$0x28, %rsp
    0000031a: 	popq	%rbx
    0000031b: 	movq	%rax, %rdi
    0000031e: 	popq	%rbp
    0000031f: 	popq	%r12
    00000321: 	popq	%r13
    00000323: 	popq	%r14
    00000325: 	popq	%r15
    00000327: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 807
.Ltmp1741:
    0000032c: 	movsd	DATAat0x36ec8(%rip), %xmm2
    00000334: 	mulsd	init_value(%rip), %xmm2
    0000033c: 	pxor	%xmm0, %xmm0
    00000340: 	movapd	%xmm0, %xmm1
    00000344: 	movq	DATAat0x36f60(%rip), %xmm3
    0000034c: 	subsd	%xmm2, %xmm1
    00000350: 	jmp	.Ltmp1745 # Offset: 848
.Ltmp1749:
    00000355: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000035c: 	movq	-0x18(%rax), %rdi
    00000360: 	addq	%rbp, %rdi
    00000363: 	movl	0x20(%rdi), %esi
    00000366: 	orl	$0x1, %esi
    00000369: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 873
    0000036e: 	movsd	(%rsp), %xmm0
    00000373: 	movsd	0x8(%rsp), %xmm2
    00000379: 	jmp	.Ltmp1750 # Offset: 889
.Ltmp1742:
    0000037e: 	pxor	%xmm0, %xmm0
    00000382: 	xorl	%eax, %eax
    00000384: 	jmp	.Ltmp1751 # Offset: 900
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace3IdEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace3IdEvPT_iPKc" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x27030
  Size        : 0x389
  MaxSize     : 0x390
  Offset      : 0x27030
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp1752 # Offset: 49
    00000037: 	movslq	%r14d, %r13
    0000003a: 	movl	%r14d, %edx
    0000003d: 	movl	%r14d, %ebx
    00000040: 	leaq	(,%r13,8), %rax
    00000048: 	leaq	(%r15,%rdx,8), %rsi
    0000004c: 	andl	$-0x2, %ebx
    0000004f: 	movq	%rax, 0x8(%rsp)
    00000054: 	movl	%r14d, %eax
    00000057: 	leaq	init_value(%rip), %rdx
    0000005e: 	shrl	%eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	cmpq	%rdx, %rsi
    0000006a: 	setbe	%r12b
    0000006e: 	addq	$0x8, %rdx
    00000072: 	leaq	0x10(%r15,%rax), %r13
    00000077: 	cmpq	%rdx, %r15
    0000007a: 	leal	-0x1(%r14), %eax
    0000007e: 	setae	%dl
    00000081: 	orl	%edx, %r12d
    00000084: 	cmpl	$0x2, %eax
    00000087: 	leaq	0x8(%r15,%rax,8), %rax
    0000008c: 	seta	%dl
    0000008f: 	movq	%rax, (%rsp)
    00000093: 	andl	%edx, %r12d
    00000096: 	movslq	%ebx, %rdx
    00000099: 	movb	%r12b, 0x17(%rsp)
    0000009e: 	leaq	(%r15,%rdx,8), %rbp
    000000a2: 	xorl	%r12d, %r12d
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp1759:
    000000a8: 	movq	0x8(%rsp), %rdx
    000000ad: 	xorl	%esi, %esi
    000000af: 	movq	%r15, %rdi
    000000b2: 	callq	memset@PLT # Offset: 178
    000000b7: 	movq	DATAat0x36fb0(%rip), %rax
    000000be: 	testl	%r14d, %r14d
    000000c1: 	movapd	DATAat0x36fb0(%rip), %xmm2
    000000c9: 	movq	%rax, %xmm1
    000000ce: 	jle	.Ltmp1753 # Offset: 206
    000000d0: 	cmpl	$0x1, %r14d
    000000d4: 	je	.Ltmp1754 # Offset: 212
    000000da: 	movq	%r15, %rax
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1755:
    000000e0: 	movups	%xmm2, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%r13, %rax
    000000ea: 	jne	.Ltmp1755 # Offset: 234
    000000ec: 	movslq	%ebx, %rax
    000000ef: 	cmpl	%ebx, %r14d
    000000f2: 	je	.Ltmp1756 # Offset: 242
.Ltmp1767:
    000000f4: 	movsd	%xmm1, (%r15,%rax,8)
.Ltmp1756:
    000000fa: 	cmpb	$0x0, 0x17(%rsp)
    000000ff: 	je	.Ltmp1757 # Offset: 255
    00000105: 	movsd	init_value(%rip), %xmm0
    0000010d: 	movq	%r15, %rax
    00000110: 	unpcklpd	%xmm0, %xmm0
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1758:
    00000118: 	movups	%xmm0, (%rax)
    0000011b: 	addq	$0x10, %rax
    0000011f: 	cmpq	%r13, %rax
    00000122: 	jne	.Ltmp1758 # Offset: 290
    00000124: 	cmpl	%ebx, %r14d
    00000127: 	je	.Ltmp1753 # Offset: 295
    00000129: 	movsd	init_value(%rip), %xmm0
    00000131: 	movsd	%xmm0, (%rbp)
.Ltmp1753:
    00000136: 	addl	$0x1, %r12d
    0000013a: 	cmpl	%r12d, iterations(%rip)
    00000141: 	jg	.Ltmp1759 # Offset: 321
.Ltmp1752:
    00000147: 	callq	clock@PLT # Offset: 327
    0000014c: 	movq	0x18(%rsp), %rdi
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	movq	%rax, end_time(%rip)
    0000015c: 	subq	start_time(%rip), %rax
    00000163: 	cvtsi2sd	%rax, %xmm0
    00000168: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000170: 	callq	_Z13record_resultdPKc # Offset: 368
    00000175: 	testl	%r14d, %r14d
    00000178: 	jle	.Ltmp1760 # Offset: 376
    0000017e: 	cmpl	$0x1, %r14d
    00000182: 	je	.Ltmp1761 # Offset: 386
    00000188: 	movl	%r14d, %edx
    0000018b: 	movq	%r15, %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	shrl	%edx
    00000194: 	subl	$0x1, %edx
    00000197: 	shlq	$0x4, %rdx
    0000019b: 	leaq	0x10(%r15,%rdx), %rdx
.Ltmp1762:
    000001a0: 	movsd	(%rax), %xmm1
    000001a4: 	addq	$0x10, %rax
    000001a8: 	addsd	%xmm1, %xmm0
    000001ac: 	movsd	-0x8(%rax), %xmm1
    000001b1: 	addsd	%xmm1, %xmm0
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	jne	.Ltmp1762 # Offset: 440
    000001ba: 	movl	%r14d, %eax
    000001bd: 	andl	$-0x2, %eax
    000001c0: 	andl	$0x1, %r14d
    000001c4: 	je	.Ltmp1763 # Offset: 452
.Ltmp1770:
    000001c6: 	cltq
    000001c8: 	addsd	(%r15,%rax,8), %xmm0
.Ltmp1763:
    000001ce: 	movsd	DATAat0x36ec8(%rip), %xmm2
    000001d6: 	movq	DATAat0x36f60(%rip), %xmm3
    000001de: 	movapd	%xmm0, %xmm4
    000001e2: 	movapd	%xmm0, %xmm1
    000001e6: 	mulsd	init_value(%rip), %xmm2
    000001ee: 	andpd	%xmm3, %xmm4
    000001f2: 	comisd	DATAat0x36ed8(%rip), %xmm4
    000001fa: 	subsd	%xmm2, %xmm1
    000001fe: 	jbe	.Ltmp1764 # Offset: 510
    00000200: 	divsd	%xmm0, %xmm1
.Ltmp1764:
    00000204: 	andpd	%xmm3, %xmm1
    00000208: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000210: 	comisd	%xmm1, %xmm3
    00000214: 	jbe	.Ltmp1765 # Offset: 532
    00000216: 	addq	$0x28, %rsp
    0000021a: 	popq	%rbx
    0000021b: 	popq	%rbp
    0000021c: 	popq	%r12
    0000021e: 	popq	%r13
    00000220: 	popq	%r14
    00000222: 	popq	%r15
    00000224: 	retq # Offset: 548
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1757:
    00000228: 	movq	%r15, %rax
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1766:
    00000230: 	movsd	init_value(%rip), %xmm0
    00000238: 	addq	$0x8, %rax
    0000023c: 	movsd	%xmm0, -0x8(%rax)
    00000241: 	cmpq	(%rsp), %rax
    00000245: 	jne	.Ltmp1766 # Offset: 581
    00000247: 	jmp	.Ltmp1753 # Offset: 583
.Ltmp1754:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	jmp	.Ltmp1767 # Offset: 590
.Ltmp1765:
    00000253: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000025a: 	movl	$0x5, %edx
    0000025f: 	movsd	%xmm0, (%rsp)
    00000264: 	leaq	DATAat0x35004(%rip), %rsi
    0000026b: 	movq	%rbp, %rdi
    0000026e: 	movsd	%xmm2, 0x8(%rsp)
    00000274: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 628
    00000279: 	cmpq	$0x0, 0x18(%rsp)
    0000027f: 	movsd	(%rsp), %xmm0
    00000284: 	movsd	0x8(%rsp), %xmm2
    0000028a: 	je	.Ltmp1768 # Offset: 650
    00000290: 	movq	0x18(%rsp), %rbx
    00000295: 	movsd	%xmm2, 0x8(%rsp)
    0000029b: 	movsd	%xmm0, (%rsp)
    000002a0: 	movq	%rbx, %rdi
    000002a3: 	callq	strlen@PLT # Offset: 675
    000002a8: 	movq	%rbx, %rsi
    000002ab: 	movq	%rbp, %rdi
    000002ae: 	movq	%rax, %rdx
    000002b1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 689
    000002b6: 	movsd	0x8(%rsp), %xmm2
    000002bc: 	movsd	(%rsp), %xmm0
.Ltmp1769:
    000002c1: 	movl	$0xd, %edx
    000002c6: 	leaq	DATAat0x3500a(%rip), %rsi
    000002cd: 	movq	%rbp, %rdi
    000002d0: 	movsd	%xmm2, 0x8(%rsp)
    000002d6: 	movsd	%xmm0, (%rsp)
    000002db: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 731
    000002e0: 	movsd	(%rsp), %xmm0
    000002e5: 	movq	%rbp, %rdi
    000002e8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 744
    000002ed: 	movl	$0xb, %edx
    000002f2: 	leaq	DATAat0x35018(%rip), %rsi
    000002f9: 	movq	%rax, %rdi
    000002fc: 	movq	%rax, %rbp
    000002ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 767
    00000304: 	movsd	0x8(%rsp), %xmm2
    0000030a: 	movq	%rbp, %rdi
    0000030d: 	movapd	%xmm2, %xmm0
    00000311: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 785
    00000316: 	addq	$0x28, %rsp
    0000031a: 	popq	%rbx
    0000031b: 	movq	%rax, %rdi
    0000031e: 	popq	%rbp
    0000031f: 	popq	%r12
    00000321: 	popq	%r13
    00000323: 	popq	%r14
    00000325: 	popq	%r15
    00000327: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 807
.Ltmp1760:
    0000032c: 	movsd	DATAat0x36ec8(%rip), %xmm2
    00000334: 	mulsd	init_value(%rip), %xmm2
    0000033c: 	pxor	%xmm0, %xmm0
    00000340: 	movapd	%xmm0, %xmm1
    00000344: 	movq	DATAat0x36f60(%rip), %xmm3
    0000034c: 	subsd	%xmm2, %xmm1
    00000350: 	jmp	.Ltmp1764 # Offset: 848
.Ltmp1768:
    00000355: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000035c: 	movq	-0x18(%rax), %rdi
    00000360: 	addq	%rbp, %rdi
    00000363: 	movl	0x20(%rdi), %esi
    00000366: 	orl	$0x1, %esi
    00000369: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 873
    0000036e: 	movsd	(%rsp), %xmm0
    00000373: 	movsd	0x8(%rsp), %xmm2
    00000379: 	jmp	.Ltmp1769 # Offset: 889
.Ltmp1761:
    0000037e: 	pxor	%xmm0, %xmm0
    00000382: 	xorl	%eax, %eax
    00000384: 	jmp	.Ltmp1770 # Offset: 900
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace3IdEvPT_iPKc"

Binary Function "_Z30test_loop_partial2_replace_optIhEvPT_iPKc" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x273c0
  Size        : 0x635
  MaxSize     : 0x640
  Offset      : 0x273c0
  Section     : .text
  Orc Section : .local.text._Z30test_loop_partial2_replace_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x90(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1771 # Offset: 55
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movl	%r14d, %edi
    00000043: 	leaq	init_value(%rip), %rdx
    0000004a: 	shrl	$0x1f, %ebx
    0000004d: 	addl	%r14d, %ebx
    00000050: 	sarl	%ebx
    00000052: 	subl	%ebx, %edi
    00000054: 	movslq	%ebx, %r13
    00000057: 	movl	%edi, %eax
    00000059: 	leaq	(%r12,%r13), %rcx
    0000005d: 	movl	%edi, 0x10(%rsp)
    00000061: 	addq	%r13, %rax
    00000064: 	movq	%rcx, 0x8(%rsp)
    00000069: 	addq	%r12, %rax
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	setbe	%al
    00000072: 	addq	$0x8, %rdx
    00000076: 	cmpq	%rdx, %rcx
    00000079: 	setae	%dl
    0000007c: 	orb	%dl, %al
    0000007e: 	je	.Ltmp1772 # Offset: 126
    00000084: 	leal	-0x1(%rdi), %eax
    00000087: 	cmpl	$0xe, %eax
    0000008a: 	jbe	.Ltmp1772 # Offset: 138
    00000090: 	movl	%edi, %eax
    00000092: 	movq	0x8(%rsp), %rdx
    00000097: 	movl	%edi, %ecx
    00000099: 	leal	-0x1(%rbx), %r13d
    0000009d: 	shrl	$0x4, %eax
    000000a0: 	andl	$-0x10, %ecx
    000000a3: 	addq	$0x1, %r13
    000000a7: 	xorl	%r15d, %r15d
    000000aa: 	subl	$0x1, %eax
    000000ad: 	movl	%ecx, 0x14(%rsp)
    000000b1: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000000b9: 	shlq	$0x4, %rax
    000000bd: 	leaq	0x10(%rdx,%rax), %rbp
    000000c2: 	leal	(%rbx,%rcx), %eax
    000000c5: 	leal	0x1(%rax), %edi
    000000c8: 	movslq	%eax, %rdx
    000000cb: 	leaq	(%r12,%rdx), %r8
    000000cf: 	movl	%edi, 0x20(%rsp)
    000000d3: 	movslq	%edi, %rdx
    000000d6: 	leal	0x2(%rax), %edi
    000000d9: 	leaq	(%r12,%rdx), %rcx
    000000dd: 	movslq	%edi, %rdx
    000000e0: 	movl	%edi, 0x24(%rsp)
    000000e4: 	leal	0x3(%rax), %edi
    000000e7: 	movq	%rcx, 0x18(%rsp)
    000000ec: 	leaq	(%r12,%rdx), %rcx
    000000f0: 	movslq	%edi, %rdx
    000000f3: 	movq	%rcx, 0x28(%rsp)
    000000f8: 	leal	0x4(%rax), %ecx
    000000fb: 	leaq	(%r12,%rdx), %rsi
    000000ff: 	movslq	%ecx, %rdx
    00000102: 	movq	%rsi, 0x30(%rsp)
    00000107: 	leal	0x5(%rax), %esi
    0000010a: 	addq	%r12, %rdx
    0000010d: 	movl	%edi, 0x38(%rsp)
    00000111: 	movq	%rdx, 0x40(%rsp)
    00000116: 	movslq	%esi, %rdx
    00000119: 	leaq	(%r12,%rdx), %rdi
    0000011d: 	movl	%ecx, 0x3c(%rsp)
    00000121: 	movq	%rdi, 0x48(%rsp)
    00000126: 	leal	0x6(%rax), %edi
    00000129: 	movslq	%edi, %rdx
    0000012c: 	movl	%esi, 0x50(%rsp)
    00000130: 	leaq	(%r12,%rdx), %rcx
    00000134: 	movl	%edi, 0x54(%rsp)
    00000138: 	leal	0x9(%rax), %edi
    0000013b: 	movq	%rcx, 0x58(%rsp)
    00000140: 	leal	0x7(%rax), %ecx
    00000143: 	movslq	%ecx, %rdx
    00000146: 	movl	%ecx, 0x68(%rsp)
    0000014a: 	leal	0xa(%rax), %ecx
    0000014d: 	leaq	(%r12,%rdx), %rsi
    00000151: 	movl	%edi, 0x80(%rsp)
    00000158: 	movq	%rsi, 0x60(%rsp)
    0000015d: 	leal	0x8(%rax), %esi
    00000160: 	movslq	%esi, %rdx
    00000163: 	movl	%ecx, 0x84(%rsp)
    0000016a: 	addq	%r12, %rdx
    0000016d: 	movl	%esi, 0x6c(%rsp)
    00000171: 	movq	%rdx, 0x70(%rsp)
    00000176: 	movslq	%edi, %rdx
    00000179: 	leaq	(%r12,%rdx), %rdi
    0000017d: 	movslq	%ecx, %rdx
    00000180: 	leaq	(%r12,%rdx), %rcx
    00000184: 	leal	0xb(%rax), %edx
    00000187: 	movq	%rdi, 0x78(%rsp)
    0000018c: 	movl	%edx, 0xa0(%rsp)
    00000193: 	movslq	%edx, %rdx
    00000196: 	leal	0xd(%rax), %edi
    00000199: 	leaq	(%r12,%rdx), %rsi
    0000019d: 	movq	%rcx, 0x88(%rsp)
    000001a5: 	movq	%rsi, 0x98(%rsp)
    000001ad: 	leal	0xc(%rax), %esi
    000001b0: 	addl	$0xe, %eax
    000001b3: 	movslq	%esi, %rdx
    000001b6: 	movl	%eax, 0xbc(%rsp)
    000001bd: 	cltq
    000001bf: 	addq	%r12, %rdx
    000001c2: 	addq	%r12, %rax
    000001c5: 	movl	%esi, 0xa4(%rsp)
    000001cc: 	movq	%rdx, 0xa8(%rsp)
    000001d4: 	movslq	%edi, %rdx
    000001d7: 	movl	%edi, 0xb8(%rsp)
    000001de: 	leaq	(%r12,%rdx), %rdi
    000001e2: 	movq	%rax, 0xc0(%rsp)
    000001ea: 	movq	%r13, %rax
    000001ed: 	movq	%rbp, %r13
    000001f0: 	movl	%r15d, %ebp
    000001f3: 	movq	%rdi, 0xb0(%rsp)
    000001fb: 	movq	%rax, %r15
    000001fe: 	movq	%r12, %rdi
    00000201: 	movq	%r8, %r12
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1776:
    00000208: 	cmpl	$0x1, %r14d
    0000020c: 	jle	.Ltmp1773 # Offset: 524
    0000020e: 	movq	%r15, %rdx
    00000211: 	xorl	%esi, %esi
    00000213: 	callq	memset@PLT # Offset: 531
    00000218: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000220: 	movq	%rax, %rdi
.Ltmp1773:
    00000223: 	cmpl	%ebx, %r14d
    00000226: 	jle	.Ltmp1774 # Offset: 550
    0000022c: 	movsd	init_value(%rip), %xmm1
    00000234: 	movq	0x8(%rsp), %rax
    00000239: 	unpcklpd	%xmm1, %xmm1
    0000023d: 	cvttpd2dq	%xmm1, %xmm1
    00000241: 	punpcklqdq	%xmm1, %xmm1
    00000245: 	movdqa	%xmm1, %xmm2
    00000249: 	punpckhwd	%xmm1, %xmm2
    0000024d: 	nopl	(%rax) # Size: 3
.Ltmp1775:
    00000250: 	movdqa	%xmm1, %xmm0
    00000254: 	addq	$0x10, %rax
    00000258: 	punpcklwd	%xmm1, %xmm0
    0000025c: 	movdqa	%xmm0, %xmm3
    00000260: 	punpcklwd	%xmm2, %xmm0
    00000264: 	punpckhwd	%xmm2, %xmm3
    00000268: 	punpcklwd	%xmm3, %xmm0
    0000026c: 	pand	%xmm4, %xmm0
    00000270: 	packuswb	%xmm0, %xmm0
    00000274: 	movups	%xmm0, -0x10(%rax)
    00000278: 	cmpq	%rax, %r13
    0000027b: 	jne	.Ltmp1775 # Offset: 635
    0000027d: 	movl	0x14(%rsp), %ecx
    00000281: 	cmpl	%ecx, 0x10(%rsp)
    00000285: 	je	.Ltmp1774 # Offset: 645
    0000028b: 	cvttsd2si	init_value(%rip), %eax
    00000293: 	movb	%al, (%r12)
    00000297: 	cmpl	0x20(%rsp), %r14d
    0000029c: 	jle	.Ltmp1774 # Offset: 668
    000002a2: 	cvttsd2si	init_value(%rip), %eax
    000002aa: 	movq	0x18(%rsp), %rcx
    000002af: 	movb	%al, (%rcx)
    000002b1: 	cmpl	0x24(%rsp), %r14d
    000002b6: 	jle	.Ltmp1774 # Offset: 694
    000002bc: 	cvttsd2si	init_value(%rip), %eax
    000002c4: 	movq	0x28(%rsp), %rcx
    000002c9: 	movb	%al, (%rcx)
    000002cb: 	cmpl	0x38(%rsp), %r14d
    000002d0: 	jle	.Ltmp1774 # Offset: 720
    000002d6: 	cvttsd2si	init_value(%rip), %eax
    000002de: 	movq	0x30(%rsp), %rsi
    000002e3: 	movb	%al, (%rsi)
    000002e5: 	cmpl	0x3c(%rsp), %r14d
    000002ea: 	jle	.Ltmp1774 # Offset: 746
    000002f0: 	cvttsd2si	init_value(%rip), %eax
    000002f8: 	movq	0x40(%rsp), %rsi
    000002fd: 	movb	%al, (%rsi)
    000002ff: 	cmpl	0x50(%rsp), %r14d
    00000304: 	jle	.Ltmp1774 # Offset: 772
    0000030a: 	cvttsd2si	init_value(%rip), %eax
    00000312: 	movq	0x48(%rsp), %rcx
    00000317: 	movb	%al, (%rcx)
    00000319: 	cmpl	0x54(%rsp), %r14d
    0000031e: 	jle	.Ltmp1774 # Offset: 798
    00000324: 	cvttsd2si	init_value(%rip), %eax
    0000032c: 	movq	0x58(%rsp), %rcx
    00000331: 	movb	%al, (%rcx)
    00000333: 	cmpl	0x68(%rsp), %r14d
    00000338: 	jle	.Ltmp1774 # Offset: 824
    0000033e: 	cvttsd2si	init_value(%rip), %eax
    00000346: 	movq	0x60(%rsp), %rsi
    0000034b: 	movb	%al, (%rsi)
    0000034d: 	cmpl	0x6c(%rsp), %r14d
    00000352: 	jle	.Ltmp1774 # Offset: 850
    00000358: 	cvttsd2si	init_value(%rip), %eax
    00000360: 	movq	0x70(%rsp), %rcx
    00000365: 	movb	%al, (%rcx)
    00000367: 	cmpl	0x80(%rsp), %r14d
    0000036f: 	jle	.Ltmp1774 # Offset: 879
    00000375: 	cvttsd2si	init_value(%rip), %eax
    0000037d: 	movq	0x78(%rsp), %rsi
    00000382: 	movb	%al, (%rsi)
    00000384: 	cmpl	0x84(%rsp), %r14d
    0000038c: 	jle	.Ltmp1774 # Offset: 908
    00000392: 	cvttsd2si	init_value(%rip), %eax
    0000039a: 	movq	0x88(%rsp), %rsi
    000003a2: 	movb	%al, (%rsi)
    000003a4: 	cmpl	0xa0(%rsp), %r14d
    000003ac: 	jle	.Ltmp1774 # Offset: 940
    000003ae: 	cvttsd2si	init_value(%rip), %eax
    000003b6: 	movq	0x98(%rsp), %rsi
    000003be: 	movb	%al, (%rsi)
    000003c0: 	cmpl	0xa4(%rsp), %r14d
    000003c8: 	jle	.Ltmp1774 # Offset: 968
    000003ca: 	cvttsd2si	init_value(%rip), %eax
    000003d2: 	movq	0xa8(%rsp), %rsi
    000003da: 	movb	%al, (%rsi)
    000003dc: 	cmpl	0xb8(%rsp), %r14d
    000003e4: 	jle	.Ltmp1774 # Offset: 996
    000003e6: 	cvttsd2si	init_value(%rip), %eax
    000003ee: 	movq	0xb0(%rsp), %rsi
    000003f6: 	movb	%al, (%rsi)
    000003f8: 	cmpl	0xbc(%rsp), %r14d
    00000400: 	jle	.Ltmp1774 # Offset: 1024
    00000402: 	cvttsd2si	init_value(%rip), %eax
    0000040a: 	movq	0xc0(%rsp), %rcx
    00000412: 	movb	%al, (%rcx)
    00000414: 	nopl	(%rax) # Size: 4
.Ltmp1774:
    00000418: 	addl	$0x1, %ebp
    0000041b: 	cmpl	%ebp, iterations(%rip)
    00000421: 	jg	.Ltmp1776 # Offset: 1057
    00000427: 	movq	%rdi, %r12
.Ltmp1771:
    0000042a: 	callq	clock@PLT # Offset: 1066
    0000042f: 	movq	0x90(%rsp), %rdi
    00000437: 	pxor	%xmm0, %xmm0
    0000043b: 	movq	%rax, end_time(%rip)
    00000442: 	subq	start_time(%rip), %rax
    00000449: 	cvtsi2sd	%rax, %xmm0
    0000044e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000456: 	callq	_Z13record_resultdPKc # Offset: 1110
    0000045b: 	testl	%r14d, %r14d
    0000045e: 	jle	.Ltmp1777 # Offset: 1118
    00000464: 	leal	-0x1(%r14), %eax
    00000468: 	cmpl	$0xe, %eax
    0000046b: 	jbe	.Ltmp1778 # Offset: 1131
    00000471: 	movl	%r14d, %edx
    00000474: 	movq	%r12, %rax
    00000477: 	pxor	%xmm0, %xmm0
    0000047b: 	shrl	$0x4, %edx
    0000047e: 	subl	$0x1, %edx
    00000481: 	shlq	$0x4, %rdx
    00000485: 	leaq	0x10(%r12,%rdx), %rdx
    0000048a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1779:
    00000490: 	movdqu	(%rax), %xmm5
    00000494: 	addq	$0x10, %rax
    00000498: 	paddb	%xmm5, %xmm0
    0000049c: 	cmpq	%rdx, %rax
    0000049f: 	jne	.Ltmp1779 # Offset: 1183
    000004a1: 	movdqa	%xmm0, %xmm1
    000004a5: 	movl	%r14d, %esi
    000004a8: 	psrldq	$0x8, %xmm1
    000004ad: 	andl	$-0x10, %esi
    000004b0: 	paddb	%xmm1, %xmm0
    000004b4: 	pxor	%xmm1, %xmm1
    000004b8: 	movl	%esi, %edx
    000004ba: 	psadbw	%xmm1, %xmm0
    000004be: 	movd	%xmm0, %eax
    000004c2: 	cmpl	%r14d, %esi
    000004c5: 	je	.Ltmp1780 # Offset: 1221
.Ltmp1787:
    000004cb: 	movl	%r14d, %edi
    000004ce: 	subl	%esi, %edi
    000004d0: 	leal	-0x1(%rdi), %r9d
    000004d4: 	cmpl	$0x6, %r9d
    000004d8: 	jbe	.Ltmp1781 # Offset: 1240
    000004da: 	movq	(%r12,%rsi), %xmm1
    000004e0: 	pxor	%xmm0, %xmm0
    000004e4: 	movdqa	%xmm1, %xmm6
    000004e8: 	psadbw	%xmm0, %xmm6
    000004ec: 	movq	%xmm6, 0xc8(%rsp)
    000004f5: 	movq	%xmm6, %rsi
    000004fa: 	movl	%esi, %r9d
    000004fd: 	movl	%edi, %esi
    000004ff: 	andl	$-0x8, %esi
    00000502: 	addl	%r9d, %eax
    00000505: 	addl	%esi, %edx
    00000507: 	cmpl	%esi, %edi
    00000509: 	je	.Ltmp1780 # Offset: 1289
.Ltmp1781:
    0000050b: 	movslq	%edx, %rsi
    0000050e: 	addb	(%r12,%rsi), %al
    00000512: 	leal	0x1(%rdx), %esi
    00000515: 	cmpl	%esi, %r14d
    00000518: 	jle	.Ltmp1780 # Offset: 1304
    0000051a: 	movslq	%esi, %rsi
    0000051d: 	addb	(%r12,%rsi), %al
    00000521: 	leal	0x2(%rdx), %esi
    00000524: 	cmpl	%esi, %r14d
    00000527: 	jle	.Ltmp1780 # Offset: 1319
    00000529: 	movslq	%esi, %rsi
    0000052c: 	addb	(%r12,%rsi), %al
    00000530: 	leal	0x3(%rdx), %esi
    00000533: 	cmpl	%r14d, %esi
    00000536: 	jge	.Ltmp1780 # Offset: 1334
    00000538: 	movslq	%esi, %rsi
    0000053b: 	addb	(%r12,%rsi), %al
    0000053f: 	leal	0x4(%rdx), %esi
    00000542: 	cmpl	%esi, %r14d
    00000545: 	jle	.Ltmp1780 # Offset: 1349
    00000547: 	movslq	%esi, %rsi
    0000054a: 	addb	(%r12,%rsi), %al
    0000054e: 	leal	0x5(%rdx), %esi
    00000551: 	cmpl	%esi, %r14d
    00000554: 	jle	.Ltmp1780 # Offset: 1364
    00000556: 	movslq	%esi, %rsi
    00000559: 	addl	$0x6, %edx
    0000055c: 	addb	(%r12,%rsi), %al
    00000560: 	cmpl	%edx, %r14d
    00000563: 	jle	.Ltmp1780 # Offset: 1379
    00000565: 	movslq	%edx, %rdx
    00000568: 	addb	(%r12,%rdx), %al
.Ltmp1780:
    0000056c: 	testb	%al, %al
    0000056e: 	jne	.Ltmp1782 # Offset: 1390
.Ltmp1777:
    00000570: 	addq	$0xd8, %rsp
    00000577: 	popq	%rbx
    00000578: 	popq	%rbp
    00000579: 	popq	%r12
    0000057b: 	popq	%r13
    0000057d: 	popq	%r14
    0000057f: 	popq	%r15
    00000581: 	retq # Offset: 1409
.Ltmp1782:
    00000582: 	movq	0x90(%rsp), %rsi
    0000058a: 	addq	$0xd8, %rsp
    00000591: 	movzbl	%al, %edi
    00000594: 	popq	%rbx
    00000595: 	popq	%rbp
    00000596: 	popq	%r12
    00000598: 	popq	%r13
    0000059a: 	popq	%r14
    0000059c: 	popq	%r15
    0000059e: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1438
.Ltmp1772:
    000005a3: 	leal	-0x1(%rbx), %eax
    000005a6: 	leal	-0x1(%r14), %ebp
    000005aa: 	xorl	%r15d, %r15d
    000005ad: 	movq	%r12, %rdi
    000005b0: 	subl	%ebx, %ebp
    000005b2: 	movl	%eax, 0x10(%rsp)
    000005b6: 	leaq	0x1(%r12), %rax
    000005bb: 	movl	%ebp, %r12d
    000005be: 	movl	%r15d, %ebp
    000005c1: 	movl	%r14d, %r15d
    000005c4: 	movq	%rax, %r14
    000005c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1786:
    000005d0: 	cmpl	$0x1, %r15d
    000005d4: 	jle	.Ltmp1783 # Offset: 1492
    000005d6: 	movl	0x10(%rsp), %edx
    000005da: 	xorl	%esi, %esi
    000005dc: 	addq	$0x1, %rdx
    000005e0: 	callq	memset@PLT # Offset: 1504
    000005e5: 	movq	%rax, %rdi
.Ltmp1783:
    000005e8: 	cmpl	%ebx, %r15d
    000005eb: 	jle	.Ltmp1784 # Offset: 1515
    000005ed: 	movl	%r12d, %ecx
    000005f0: 	leaq	(%r14,%r13), %rdx
    000005f4: 	movq	0x8(%rsp), %rax
    000005f9: 	addq	%rdx, %rcx
    000005fc: 	nopl	(%rax) # Size: 4
.Ltmp1785:
    00000600: 	cvttsd2si	init_value(%rip), %edx
    00000608: 	addq	$0x1, %rax
    0000060c: 	movb	%dl, -0x1(%rax)
    0000060f: 	cmpq	%rax, %rcx
    00000612: 	jne	.Ltmp1785 # Offset: 1554
.Ltmp1784:
    00000614: 	addl	$0x1, %ebp
    00000617: 	cmpl	iterations(%rip), %ebp
    0000061d: 	jl	.Ltmp1786 # Offset: 1565
    0000061f: 	movq	%rdi, %r12
    00000622: 	movl	%r15d, %r14d
    00000625: 	jmp	.Ltmp1771 # Offset: 1573
.Ltmp1778:
    0000062a: 	xorl	%esi, %esi
    0000062c: 	xorl	%eax, %eax
    0000062e: 	xorl	%edx, %edx
    00000630: 	jmp	.Ltmp1787 # Offset: 1584
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_loop_partial2_replace_optIhEvPT_iPKc"

Binary Function "_Z36test_for_loop_bzero_partial2_replaceIhEvPT_iPKc" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x27a00
  Size        : 0x604
  MaxSize     : 0x610
  Offset      : 0x27a00
  Section     : .text
  Orc Section : .local.text._Z36test_for_loop_bzero_partial2_replaceIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x90(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1788 # Offset: 55
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movl	%r14d, %ecx
    00000043: 	leaq	init_value(%rip), %rsi
    0000004a: 	movslq	%r14d, %r13
    0000004d: 	shrl	$0x1f, %ebx
    00000050: 	addl	%r14d, %ebx
    00000053: 	sarl	%ebx
    00000055: 	subl	%ebx, %ecx
    00000057: 	movslq	%ebx, %rdx
    0000005a: 	movl	%ecx, %eax
    0000005c: 	leaq	(%rbp,%rdx), %rdi
    00000061: 	movl	%ecx, 0x10(%rsp)
    00000065: 	addq	%rdx, %rax
    00000068: 	movq	%rdi, 0x8(%rsp)
    0000006d: 	addq	%rbp, %rax
    00000070: 	cmpq	%rsi, %rax
    00000073: 	setbe	%al
    00000076: 	addq	$0x8, %rsi
    0000007a: 	cmpq	%rsi, %rdi
    0000007d: 	setae	%sil
    00000081: 	orb	%sil, %al
    00000084: 	je	.Ltmp1789 # Offset: 132
    0000008a: 	leal	-0x1(%rcx), %eax
    0000008d: 	cmpl	$0xe, %eax
    00000090: 	jbe	.Ltmp1789 # Offset: 144
    00000096: 	movl	%ecx, %eax
    00000098: 	andl	$-0x10, %ecx
    0000009b: 	xorl	%r15d, %r15d
    0000009e: 	shrl	$0x4, %eax
    000000a1: 	movl	%ecx, 0x14(%rsp)
    000000a5: 	subl	$0x1, %eax
    000000a8: 	shlq	$0x4, %rax
    000000ac: 	leaq	0x10(%rdi,%rax), %r12
    000000b1: 	leal	(%rbx,%rcx), %eax
    000000b4: 	leal	0x1(%rax), %edi
    000000b7: 	movslq	%eax, %rdx
    000000ba: 	leaq	(%rbp,%rdx), %r8
    000000bf: 	movl	%edi, 0x20(%rsp)
    000000c3: 	movslq	%edi, %rdx
    000000c6: 	leal	0x2(%rax), %edi
    000000c9: 	leaq	(%rbp,%rdx), %rcx
    000000ce: 	movl	%edi, 0x24(%rsp)
    000000d2: 	movslq	%edi, %rdx
    000000d5: 	leal	0x3(%rax), %edi
    000000d8: 	leaq	(%rbp,%rdx), %rsi
    000000dd: 	movslq	%edi, %rdx
    000000e0: 	movq	%rcx, 0x18(%rsp)
    000000e5: 	leaq	(%rbp,%rdx), %rcx
    000000ea: 	leal	0x4(%rax), %edx
    000000ed: 	movl	%edi, 0x38(%rsp)
    000000f1: 	movl	%edx, 0x3c(%rsp)
    000000f5: 	leal	0x5(%rax), %edi
    000000f8: 	movslq	%edx, %rdx
    000000fb: 	movq	%rsi, 0x28(%rsp)
    00000100: 	leaq	(%rbp,%rdx), %rsi
    00000105: 	movslq	%edi, %rdx
    00000108: 	movq	%rcx, 0x30(%rsp)
    0000010d: 	leaq	(%rbp,%rdx), %rcx
    00000112: 	movq	%rcx, 0x48(%rsp)
    00000117: 	leal	0x6(%rax), %ecx
    0000011a: 	movslq	%ecx, %rdx
    0000011d: 	movq	%rsi, 0x40(%rsp)
    00000122: 	leal	0x7(%rax), %esi
    00000125: 	addq	%rbp, %rdx
    00000128: 	movl	%esi, 0x68(%rsp)
    0000012c: 	movq	%rdx, 0x58(%rsp)
    00000131: 	movslq	%esi, %rdx
    00000134: 	leaq	(%rbp,%rdx), %rsi
    00000139: 	leal	0x8(%rax), %edx
    0000013c: 	movl	%edi, 0x50(%rsp)
    00000140: 	movl	%edx, 0x6c(%rsp)
    00000144: 	movslq	%edx, %rdx
    00000147: 	leaq	(%rbp,%rdx), %rdi
    0000014c: 	movl	%ecx, 0x54(%rsp)
    00000150: 	movq	%rdi, 0x70(%rsp)
    00000155: 	leal	0x9(%rax), %edi
    00000158: 	movslq	%edi, %rdx
    0000015b: 	movq	%rsi, 0x60(%rsp)
    00000160: 	leal	0xb(%rax), %esi
    00000163: 	leaq	(%rbp,%rdx), %rcx
    00000168: 	movl	%esi, 0xa0(%rsp)
    0000016f: 	movq	%rcx, 0x78(%rsp)
    00000174: 	leal	0xa(%rax), %ecx
    00000177: 	movslq	%ecx, %rdx
    0000017a: 	movl	%edi, 0x80(%rsp)
    00000181: 	addq	%rbp, %rdx
    00000184: 	movl	%ecx, 0x84(%rsp)
    0000018b: 	movq	%rdx, 0x88(%rsp)
    00000193: 	movslq	%esi, %rdx
    00000196: 	leaq	(%rbp,%rdx), %rsi
    0000019b: 	leal	0xc(%rax), %edx
    0000019e: 	movl	%edx, 0xa4(%rsp)
    000001a5: 	movslq	%edx, %rdx
    000001a8: 	leaq	(%rbp,%rdx), %rdi
    000001ad: 	movq	%rsi, 0x98(%rsp)
    000001b5: 	movq	%rdi, 0xa8(%rsp)
    000001bd: 	leal	0xd(%rax), %edi
    000001c0: 	addl	$0xe, %eax
    000001c3: 	movslq	%edi, %rdx
    000001c6: 	movl	%eax, 0xbc(%rsp)
    000001cd: 	cltq
    000001cf: 	leaq	(%rbp,%rdx), %rcx
    000001d4: 	addq	%rbp, %rax
    000001d7: 	movl	%edi, 0xb8(%rsp)
    000001de: 	movq	%rbp, %rdi
    000001e1: 	movq	%rcx, 0xb0(%rsp)
    000001e9: 	movq	%r8, %rbp
    000001ec: 	movq	%rax, 0xc0(%rsp)
    000001f4: 	movl	%r14d, %eax
    000001f7: 	movq	%r12, %r14
    000001fa: 	movl	%r15d, %r12d
    000001fd: 	movl	%eax, %r15d
.Ltmp1792:
    00000200: 	xorl	%esi, %esi
    00000202: 	movq	%r13, %rdx
    00000205: 	callq	memset@PLT # Offset: 517
    0000020a: 	cmpl	%ebx, %r15d
    0000020d: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000215: 	movq	%rax, %rdi
    00000218: 	jle	.Ltmp1790 # Offset: 536
    0000021e: 	movsd	init_value(%rip), %xmm1
    00000226: 	movq	0x8(%rsp), %rax
    0000022b: 	unpcklpd	%xmm1, %xmm1
    0000022f: 	cvttpd2dq	%xmm1, %xmm1
    00000233: 	punpcklqdq	%xmm1, %xmm1
    00000237: 	movdqa	%xmm1, %xmm2
    0000023b: 	punpckhwd	%xmm1, %xmm2
    0000023f: 	nop # Size: 1
.Ltmp1791:
    00000240: 	movdqa	%xmm1, %xmm0
    00000244: 	addq	$0x10, %rax
    00000248: 	punpcklwd	%xmm1, %xmm0
    0000024c: 	movdqa	%xmm0, %xmm3
    00000250: 	punpcklwd	%xmm2, %xmm0
    00000254: 	punpckhwd	%xmm2, %xmm3
    00000258: 	punpcklwd	%xmm3, %xmm0
    0000025c: 	pand	%xmm4, %xmm0
    00000260: 	packuswb	%xmm0, %xmm0
    00000264: 	movups	%xmm0, -0x10(%rax)
    00000268: 	cmpq	%r14, %rax
    0000026b: 	jne	.Ltmp1791 # Offset: 619
    0000026d: 	movl	0x14(%rsp), %ecx
    00000271: 	cmpl	%ecx, 0x10(%rsp)
    00000275: 	je	.Ltmp1790 # Offset: 629
    0000027b: 	cvttsd2si	init_value(%rip), %eax
    00000283: 	movb	%al, (%rbp)
    00000286: 	cmpl	0x20(%rsp), %r15d
    0000028b: 	jle	.Ltmp1790 # Offset: 651
    00000291: 	cvttsd2si	init_value(%rip), %eax
    00000299: 	movq	0x18(%rsp), %rcx
    0000029e: 	movb	%al, (%rcx)
    000002a0: 	cmpl	0x24(%rsp), %r15d
    000002a5: 	jle	.Ltmp1790 # Offset: 677
    000002ab: 	cvttsd2si	init_value(%rip), %eax
    000002b3: 	movq	0x28(%rsp), %rcx
    000002b8: 	movb	%al, (%rcx)
    000002ba: 	cmpl	0x38(%rsp), %r15d
    000002bf: 	jle	.Ltmp1790 # Offset: 703
    000002c5: 	cvttsd2si	init_value(%rip), %eax
    000002cd: 	movq	0x30(%rsp), %rsi
    000002d2: 	movb	%al, (%rsi)
    000002d4: 	cmpl	0x3c(%rsp), %r15d
    000002d9: 	jle	.Ltmp1790 # Offset: 729
    000002df: 	cvttsd2si	init_value(%rip), %eax
    000002e7: 	movq	0x40(%rsp), %rsi
    000002ec: 	movb	%al, (%rsi)
    000002ee: 	cmpl	0x50(%rsp), %r15d
    000002f3: 	jle	.Ltmp1790 # Offset: 755
    000002f9: 	cvttsd2si	init_value(%rip), %eax
    00000301: 	movq	0x48(%rsp), %rsi
    00000306: 	movb	%al, (%rsi)
    00000308: 	cmpl	0x54(%rsp), %r15d
    0000030d: 	jle	.Ltmp1790 # Offset: 781
    00000313: 	cvttsd2si	init_value(%rip), %eax
    0000031b: 	movq	0x58(%rsp), %rcx
    00000320: 	movb	%al, (%rcx)
    00000322: 	cmpl	0x68(%rsp), %r15d
    00000327: 	jle	.Ltmp1790 # Offset: 807
    0000032d: 	cvttsd2si	init_value(%rip), %eax
    00000335: 	movq	0x60(%rsp), %rsi
    0000033a: 	movb	%al, (%rsi)
    0000033c: 	cmpl	0x6c(%rsp), %r15d
    00000341: 	jle	.Ltmp1790 # Offset: 833
    00000347: 	cvttsd2si	init_value(%rip), %eax
    0000034f: 	movq	0x70(%rsp), %rcx
    00000354: 	movb	%al, (%rcx)
    00000356: 	cmpl	0x80(%rsp), %r15d
    0000035e: 	jle	.Ltmp1790 # Offset: 862
    00000364: 	cvttsd2si	init_value(%rip), %eax
    0000036c: 	movq	0x78(%rsp), %rcx
    00000371: 	movb	%al, (%rcx)
    00000373: 	cmpl	0x84(%rsp), %r15d
    0000037b: 	jle	.Ltmp1790 # Offset: 891
    00000381: 	cvttsd2si	init_value(%rip), %eax
    00000389: 	movq	0x88(%rsp), %rsi
    00000391: 	movb	%al, (%rsi)
    00000393: 	cmpl	0xa0(%rsp), %r15d
    0000039b: 	jle	.Ltmp1790 # Offset: 923
    0000039d: 	cvttsd2si	init_value(%rip), %eax
    000003a5: 	movq	0x98(%rsp), %rdx
    000003ad: 	movb	%al, (%rdx)
    000003af: 	cmpl	0xa4(%rsp), %r15d
    000003b7: 	jle	.Ltmp1790 # Offset: 951
    000003b9: 	cvttsd2si	init_value(%rip), %eax
    000003c1: 	movq	0xa8(%rsp), %rcx
    000003c9: 	movb	%al, (%rcx)
    000003cb: 	cmpl	0xb8(%rsp), %r15d
    000003d3: 	jle	.Ltmp1790 # Offset: 979
    000003d5: 	cvttsd2si	init_value(%rip), %eax
    000003dd: 	movq	0xb0(%rsp), %rsi
    000003e5: 	movb	%al, (%rsi)
    000003e7: 	cmpl	0xbc(%rsp), %r15d
    000003ef: 	jle	.Ltmp1790 # Offset: 1007
    000003f1: 	cvttsd2si	init_value(%rip), %eax
    000003f9: 	movq	0xc0(%rsp), %rcx
    00000401: 	movb	%al, (%rcx)
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1790:
    00000408: 	addl	$0x1, %r12d
    0000040c: 	cmpl	%r12d, iterations(%rip)
    00000413: 	jg	.Ltmp1792 # Offset: 1043
    00000419: 	movq	%rdi, %rbp
    0000041c: 	movl	%r15d, %r14d
.Ltmp1788:
    0000041f: 	callq	clock@PLT # Offset: 1055
    00000424: 	movq	0x90(%rsp), %rdi
    0000042c: 	pxor	%xmm0, %xmm0
    00000430: 	movq	%rax, end_time(%rip)
    00000437: 	subq	start_time(%rip), %rax
    0000043e: 	cvtsi2sd	%rax, %xmm0
    00000443: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000044b: 	callq	_Z13record_resultdPKc # Offset: 1099
    00000450: 	testl	%r14d, %r14d
    00000453: 	jle	.Ltmp1793 # Offset: 1107
    00000459: 	leal	-0x1(%r14), %eax
    0000045d: 	cmpl	$0xe, %eax
    00000460: 	jbe	.Ltmp1794 # Offset: 1120
    00000466: 	movl	%r14d, %edx
    00000469: 	movq	%rbp, %rax
    0000046c: 	pxor	%xmm0, %xmm0
    00000470: 	shrl	$0x4, %edx
    00000473: 	subl	$0x1, %edx
    00000476: 	shlq	$0x4, %rdx
    0000047a: 	leaq	0x10(%rbp,%rdx), %rdx
    0000047f: 	nop # Size: 1
.Ltmp1795:
    00000480: 	movdqu	(%rax), %xmm5
    00000484: 	addq	$0x10, %rax
    00000488: 	paddb	%xmm5, %xmm0
    0000048c: 	cmpq	%rdx, %rax
    0000048f: 	jne	.Ltmp1795 # Offset: 1167
    00000491: 	movdqa	%xmm0, %xmm1
    00000495: 	movl	%r14d, %esi
    00000498: 	psrldq	$0x8, %xmm1
    0000049d: 	andl	$-0x10, %esi
    000004a0: 	paddb	%xmm1, %xmm0
    000004a4: 	pxor	%xmm1, %xmm1
    000004a8: 	movl	%esi, %edx
    000004aa: 	psadbw	%xmm1, %xmm0
    000004ae: 	movd	%xmm0, %eax
    000004b2: 	cmpl	%r14d, %esi
    000004b5: 	je	.Ltmp1796 # Offset: 1205
.Ltmp1802:
    000004bb: 	movl	%r14d, %edi
    000004be: 	subl	%esi, %edi
    000004c0: 	leal	-0x1(%rdi), %r9d
    000004c4: 	cmpl	$0x6, %r9d
    000004c8: 	jbe	.Ltmp1797 # Offset: 1224
    000004ca: 	movq	(%rbp,%rsi), %xmm1
    000004d0: 	pxor	%xmm0, %xmm0
    000004d4: 	movdqa	%xmm1, %xmm6
    000004d8: 	psadbw	%xmm0, %xmm6
    000004dc: 	movq	%xmm6, 0xc8(%rsp)
    000004e5: 	movq	%xmm6, %rsi
    000004ea: 	movl	%esi, %r9d
    000004ed: 	movl	%edi, %esi
    000004ef: 	andl	$-0x8, %esi
    000004f2: 	addl	%r9d, %eax
    000004f5: 	addl	%esi, %edx
    000004f7: 	cmpl	%esi, %edi
    000004f9: 	je	.Ltmp1796 # Offset: 1273
.Ltmp1797:
    000004fb: 	movslq	%edx, %rsi
    000004fe: 	addb	(%rbp,%rsi), %al
    00000502: 	leal	0x1(%rdx), %esi
    00000505: 	cmpl	%esi, %r14d
    00000508: 	jle	.Ltmp1796 # Offset: 1288
    0000050a: 	movslq	%esi, %rsi
    0000050d: 	addb	(%rbp,%rsi), %al
    00000511: 	leal	0x2(%rdx), %esi
    00000514: 	cmpl	%esi, %r14d
    00000517: 	jle	.Ltmp1796 # Offset: 1303
    00000519: 	movslq	%esi, %rsi
    0000051c: 	addb	(%rbp,%rsi), %al
    00000520: 	leal	0x3(%rdx), %esi
    00000523: 	cmpl	%esi, %r14d
    00000526: 	jle	.Ltmp1796 # Offset: 1318
    00000528: 	movslq	%esi, %rsi
    0000052b: 	addb	(%rbp,%rsi), %al
    0000052f: 	leal	0x4(%rdx), %esi
    00000532: 	cmpl	%esi, %r14d
    00000535: 	jle	.Ltmp1796 # Offset: 1333
    00000537: 	movslq	%esi, %rsi
    0000053a: 	addb	(%rbp,%rsi), %al
    0000053e: 	leal	0x5(%rdx), %esi
    00000541: 	cmpl	%esi, %r14d
    00000544: 	jle	.Ltmp1796 # Offset: 1348
    00000546: 	movslq	%esi, %rsi
    00000549: 	addl	$0x6, %edx
    0000054c: 	addb	(%rbp,%rsi), %al
    00000550: 	cmpl	%edx, %r14d
    00000553: 	jle	.Ltmp1796 # Offset: 1363
    00000555: 	movslq	%edx, %rdx
    00000558: 	addb	(%rbp,%rdx), %al
.Ltmp1796:
    0000055c: 	testb	%al, %al
    0000055e: 	jne	.Ltmp1798 # Offset: 1374
.Ltmp1793:
    00000560: 	addq	$0xd8, %rsp
    00000567: 	popq	%rbx
    00000568: 	popq	%rbp
    00000569: 	popq	%r12
    0000056b: 	popq	%r13
    0000056d: 	popq	%r14
    0000056f: 	popq	%r15
    00000571: 	retq # Offset: 1393
.Ltmp1798:
    00000572: 	movq	0x90(%rsp), %rsi
    0000057a: 	addq	$0xd8, %rsp
    00000581: 	movzbl	%al, %edi
    00000584: 	popq	%rbx
    00000585: 	popq	%rbp
    00000586: 	popq	%r12
    00000588: 	popq	%r13
    0000058a: 	popq	%r14
    0000058c: 	popq	%r15
    0000058e: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1422
.Ltmp1789:
    00000593: 	leal	-0x1(%r14), %r12d
    00000597: 	xorl	%r15d, %r15d
    0000059a: 	leaq	0x1(%rbp,%rdx), %rax
    0000059f: 	movq	%rbp, %rdi
    000005a2: 	subl	%ebx, %r12d
    000005a5: 	movl	%r12d, %ebp
    000005a8: 	movl	%r15d, %r12d
    000005ab: 	movq	%rax, %r15
    000005ae: 	nop # Size: 2
.Ltmp1801:
    000005b0: 	movq	%r13, %rdx
    000005b3: 	xorl	%esi, %esi
    000005b5: 	callq	memset@PLT # Offset: 1461
    000005ba: 	movq	%rax, %rdi
    000005bd: 	cmpl	%ebx, %r14d
    000005c0: 	jle	.Ltmp1799 # Offset: 1472
    000005c2: 	movl	%ebp, %ecx
    000005c4: 	movq	0x8(%rsp), %rax
    000005c9: 	addq	%r15, %rcx
    000005cc: 	nopl	(%rax) # Size: 4
.Ltmp1800:
    000005d0: 	cvttsd2si	init_value(%rip), %edx
    000005d8: 	addq	$0x1, %rax
    000005dc: 	movb	%dl, -0x1(%rax)
    000005df: 	cmpq	%rcx, %rax
    000005e2: 	jne	.Ltmp1800 # Offset: 1506
.Ltmp1799:
    000005e4: 	addl	$0x1, %r12d
    000005e8: 	cmpl	iterations(%rip), %r12d
    000005ef: 	jl	.Ltmp1801 # Offset: 1519
    000005f1: 	movq	%rdi, %rbp
    000005f4: 	jmp	.Ltmp1788 # Offset: 1524
.Ltmp1794:
    000005f9: 	xorl	%esi, %esi
    000005fb: 	xorl	%eax, %eax
    000005fd: 	xorl	%edx, %edx
    000005ff: 	jmp	.Ltmp1802 # Offset: 1535
DWARF CFI Instructions:
    <empty>
End of Function "_Z36test_for_loop_bzero_partial2_replaceIhEvPT_iPKc"

Binary Function "_Z37test_for_loop_memset_partial2_replaceIhEvPT_iPKc" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x28010
  Size        : 0x604
  MaxSize     : 0x610
  Offset      : 0x28010
  Section     : .text
  Orc Section : .local.text._Z37test_for_loop_memset_partial2_replaceIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x90(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1803 # Offset: 55
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movl	%r14d, %ecx
    00000043: 	leaq	init_value(%rip), %rsi
    0000004a: 	movslq	%r14d, %r13
    0000004d: 	shrl	$0x1f, %ebx
    00000050: 	addl	%r14d, %ebx
    00000053: 	sarl	%ebx
    00000055: 	subl	%ebx, %ecx
    00000057: 	movslq	%ebx, %rdx
    0000005a: 	movl	%ecx, %eax
    0000005c: 	leaq	(%rbp,%rdx), %rdi
    00000061: 	movl	%ecx, 0x10(%rsp)
    00000065: 	addq	%rdx, %rax
    00000068: 	movq	%rdi, 0x8(%rsp)
    0000006d: 	addq	%rbp, %rax
    00000070: 	cmpq	%rsi, %rax
    00000073: 	setbe	%al
    00000076: 	addq	$0x8, %rsi
    0000007a: 	cmpq	%rsi, %rdi
    0000007d: 	setae	%sil
    00000081: 	orb	%sil, %al
    00000084: 	je	.Ltmp1804 # Offset: 132
    0000008a: 	leal	-0x1(%rcx), %eax
    0000008d: 	cmpl	$0xe, %eax
    00000090: 	jbe	.Ltmp1804 # Offset: 144
    00000096: 	movl	%ecx, %eax
    00000098: 	andl	$-0x10, %ecx
    0000009b: 	xorl	%r15d, %r15d
    0000009e: 	shrl	$0x4, %eax
    000000a1: 	movl	%ecx, 0x14(%rsp)
    000000a5: 	subl	$0x1, %eax
    000000a8: 	shlq	$0x4, %rax
    000000ac: 	leaq	0x10(%rdi,%rax), %r12
    000000b1: 	leal	(%rbx,%rcx), %eax
    000000b4: 	leal	0x1(%rax), %edi
    000000b7: 	movslq	%eax, %rdx
    000000ba: 	leaq	(%rbp,%rdx), %r8
    000000bf: 	movl	%edi, 0x20(%rsp)
    000000c3: 	movslq	%edi, %rdx
    000000c6: 	leal	0x2(%rax), %edi
    000000c9: 	leaq	(%rbp,%rdx), %rcx
    000000ce: 	movl	%edi, 0x24(%rsp)
    000000d2: 	movslq	%edi, %rdx
    000000d5: 	leal	0x3(%rax), %edi
    000000d8: 	leaq	(%rbp,%rdx), %rsi
    000000dd: 	movslq	%edi, %rdx
    000000e0: 	movq	%rcx, 0x18(%rsp)
    000000e5: 	leaq	(%rbp,%rdx), %rcx
    000000ea: 	leal	0x4(%rax), %edx
    000000ed: 	movl	%edi, 0x38(%rsp)
    000000f1: 	movl	%edx, 0x3c(%rsp)
    000000f5: 	leal	0x5(%rax), %edi
    000000f8: 	movslq	%edx, %rdx
    000000fb: 	movq	%rsi, 0x28(%rsp)
    00000100: 	leaq	(%rbp,%rdx), %rsi
    00000105: 	movslq	%edi, %rdx
    00000108: 	movq	%rcx, 0x30(%rsp)
    0000010d: 	leaq	(%rbp,%rdx), %rcx
    00000112: 	movq	%rcx, 0x48(%rsp)
    00000117: 	leal	0x6(%rax), %ecx
    0000011a: 	movslq	%ecx, %rdx
    0000011d: 	movq	%rsi, 0x40(%rsp)
    00000122: 	leal	0x7(%rax), %esi
    00000125: 	addq	%rbp, %rdx
    00000128: 	movl	%esi, 0x68(%rsp)
    0000012c: 	movq	%rdx, 0x58(%rsp)
    00000131: 	movslq	%esi, %rdx
    00000134: 	leaq	(%rbp,%rdx), %rsi
    00000139: 	leal	0x8(%rax), %edx
    0000013c: 	movl	%edi, 0x50(%rsp)
    00000140: 	movl	%edx, 0x6c(%rsp)
    00000144: 	movslq	%edx, %rdx
    00000147: 	leaq	(%rbp,%rdx), %rdi
    0000014c: 	movl	%ecx, 0x54(%rsp)
    00000150: 	movq	%rdi, 0x70(%rsp)
    00000155: 	leal	0x9(%rax), %edi
    00000158: 	movslq	%edi, %rdx
    0000015b: 	movq	%rsi, 0x60(%rsp)
    00000160: 	leal	0xb(%rax), %esi
    00000163: 	leaq	(%rbp,%rdx), %rcx
    00000168: 	movl	%esi, 0xa0(%rsp)
    0000016f: 	movq	%rcx, 0x78(%rsp)
    00000174: 	leal	0xa(%rax), %ecx
    00000177: 	movslq	%ecx, %rdx
    0000017a: 	movl	%edi, 0x80(%rsp)
    00000181: 	addq	%rbp, %rdx
    00000184: 	movl	%ecx, 0x84(%rsp)
    0000018b: 	movq	%rdx, 0x88(%rsp)
    00000193: 	movslq	%esi, %rdx
    00000196: 	leaq	(%rbp,%rdx), %rsi
    0000019b: 	leal	0xc(%rax), %edx
    0000019e: 	movl	%edx, 0xa4(%rsp)
    000001a5: 	movslq	%edx, %rdx
    000001a8: 	leaq	(%rbp,%rdx), %rdi
    000001ad: 	movq	%rsi, 0x98(%rsp)
    000001b5: 	movq	%rdi, 0xa8(%rsp)
    000001bd: 	leal	0xd(%rax), %edi
    000001c0: 	addl	$0xe, %eax
    000001c3: 	movslq	%edi, %rdx
    000001c6: 	movl	%eax, 0xbc(%rsp)
    000001cd: 	cltq
    000001cf: 	leaq	(%rbp,%rdx), %rcx
    000001d4: 	addq	%rbp, %rax
    000001d7: 	movl	%edi, 0xb8(%rsp)
    000001de: 	movq	%rbp, %rdi
    000001e1: 	movq	%rcx, 0xb0(%rsp)
    000001e9: 	movq	%r8, %rbp
    000001ec: 	movq	%rax, 0xc0(%rsp)
    000001f4: 	movl	%r14d, %eax
    000001f7: 	movq	%r12, %r14
    000001fa: 	movl	%r15d, %r12d
    000001fd: 	movl	%eax, %r15d
.Ltmp1807:
    00000200: 	xorl	%esi, %esi
    00000202: 	movq	%r13, %rdx
    00000205: 	callq	memset@PLT # Offset: 517
    0000020a: 	cmpl	%ebx, %r15d
    0000020d: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000215: 	movq	%rax, %rdi
    00000218: 	jle	.Ltmp1805 # Offset: 536
    0000021e: 	movsd	init_value(%rip), %xmm1
    00000226: 	movq	0x8(%rsp), %rax
    0000022b: 	unpcklpd	%xmm1, %xmm1
    0000022f: 	cvttpd2dq	%xmm1, %xmm1
    00000233: 	punpcklqdq	%xmm1, %xmm1
    00000237: 	movdqa	%xmm1, %xmm2
    0000023b: 	punpckhwd	%xmm1, %xmm2
    0000023f: 	nop # Size: 1
.Ltmp1806:
    00000240: 	movdqa	%xmm1, %xmm0
    00000244: 	addq	$0x10, %rax
    00000248: 	punpcklwd	%xmm1, %xmm0
    0000024c: 	movdqa	%xmm0, %xmm3
    00000250: 	punpcklwd	%xmm2, %xmm0
    00000254: 	punpckhwd	%xmm2, %xmm3
    00000258: 	punpcklwd	%xmm3, %xmm0
    0000025c: 	pand	%xmm4, %xmm0
    00000260: 	packuswb	%xmm0, %xmm0
    00000264: 	movups	%xmm0, -0x10(%rax)
    00000268: 	cmpq	%r14, %rax
    0000026b: 	jne	.Ltmp1806 # Offset: 619
    0000026d: 	movl	0x14(%rsp), %ecx
    00000271: 	cmpl	%ecx, 0x10(%rsp)
    00000275: 	je	.Ltmp1805 # Offset: 629
    0000027b: 	cvttsd2si	init_value(%rip), %eax
    00000283: 	movb	%al, (%rbp)
    00000286: 	cmpl	0x20(%rsp), %r15d
    0000028b: 	jle	.Ltmp1805 # Offset: 651
    00000291: 	cvttsd2si	init_value(%rip), %eax
    00000299: 	movq	0x18(%rsp), %rcx
    0000029e: 	movb	%al, (%rcx)
    000002a0: 	cmpl	0x24(%rsp), %r15d
    000002a5: 	jle	.Ltmp1805 # Offset: 677
    000002ab: 	cvttsd2si	init_value(%rip), %eax
    000002b3: 	movq	0x28(%rsp), %rcx
    000002b8: 	movb	%al, (%rcx)
    000002ba: 	cmpl	0x38(%rsp), %r15d
    000002bf: 	jle	.Ltmp1805 # Offset: 703
    000002c5: 	cvttsd2si	init_value(%rip), %eax
    000002cd: 	movq	0x30(%rsp), %rsi
    000002d2: 	movb	%al, (%rsi)
    000002d4: 	cmpl	0x3c(%rsp), %r15d
    000002d9: 	jle	.Ltmp1805 # Offset: 729
    000002df: 	cvttsd2si	init_value(%rip), %eax
    000002e7: 	movq	0x40(%rsp), %rsi
    000002ec: 	movb	%al, (%rsi)
    000002ee: 	cmpl	0x50(%rsp), %r15d
    000002f3: 	jle	.Ltmp1805 # Offset: 755
    000002f9: 	cvttsd2si	init_value(%rip), %eax
    00000301: 	movq	0x48(%rsp), %rsi
    00000306: 	movb	%al, (%rsi)
    00000308: 	cmpl	0x54(%rsp), %r15d
    0000030d: 	jle	.Ltmp1805 # Offset: 781
    00000313: 	cvttsd2si	init_value(%rip), %eax
    0000031b: 	movq	0x58(%rsp), %rcx
    00000320: 	movb	%al, (%rcx)
    00000322: 	cmpl	0x68(%rsp), %r15d
    00000327: 	jle	.Ltmp1805 # Offset: 807
    0000032d: 	cvttsd2si	init_value(%rip), %eax
    00000335: 	movq	0x60(%rsp), %rsi
    0000033a: 	movb	%al, (%rsi)
    0000033c: 	cmpl	0x6c(%rsp), %r15d
    00000341: 	jle	.Ltmp1805 # Offset: 833
    00000347: 	cvttsd2si	init_value(%rip), %eax
    0000034f: 	movq	0x70(%rsp), %rcx
    00000354: 	movb	%al, (%rcx)
    00000356: 	cmpl	0x80(%rsp), %r15d
    0000035e: 	jle	.Ltmp1805 # Offset: 862
    00000364: 	cvttsd2si	init_value(%rip), %eax
    0000036c: 	movq	0x78(%rsp), %rcx
    00000371: 	movb	%al, (%rcx)
    00000373: 	cmpl	0x84(%rsp), %r15d
    0000037b: 	jle	.Ltmp1805 # Offset: 891
    00000381: 	cvttsd2si	init_value(%rip), %eax
    00000389: 	movq	0x88(%rsp), %rsi
    00000391: 	movb	%al, (%rsi)
    00000393: 	cmpl	0xa0(%rsp), %r15d
    0000039b: 	jle	.Ltmp1805 # Offset: 923
    0000039d: 	cvttsd2si	init_value(%rip), %eax
    000003a5: 	movq	0x98(%rsp), %rdx
    000003ad: 	movb	%al, (%rdx)
    000003af: 	cmpl	0xa4(%rsp), %r15d
    000003b7: 	jle	.Ltmp1805 # Offset: 951
    000003b9: 	cvttsd2si	init_value(%rip), %eax
    000003c1: 	movq	0xa8(%rsp), %rcx
    000003c9: 	movb	%al, (%rcx)
    000003cb: 	cmpl	0xb8(%rsp), %r15d
    000003d3: 	jle	.Ltmp1805 # Offset: 979
    000003d5: 	cvttsd2si	init_value(%rip), %eax
    000003dd: 	movq	0xb0(%rsp), %rsi
    000003e5: 	movb	%al, (%rsi)
    000003e7: 	cmpl	0xbc(%rsp), %r15d
    000003ef: 	jle	.Ltmp1805 # Offset: 1007
    000003f1: 	cvttsd2si	init_value(%rip), %eax
    000003f9: 	movq	0xc0(%rsp), %rcx
    00000401: 	movb	%al, (%rcx)
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1805:
    00000408: 	addl	$0x1, %r12d
    0000040c: 	cmpl	%r12d, iterations(%rip)
    00000413: 	jg	.Ltmp1807 # Offset: 1043
    00000419: 	movq	%rdi, %rbp
    0000041c: 	movl	%r15d, %r14d
.Ltmp1803:
    0000041f: 	callq	clock@PLT # Offset: 1055
    00000424: 	movq	0x90(%rsp), %rdi
    0000042c: 	pxor	%xmm0, %xmm0
    00000430: 	movq	%rax, end_time(%rip)
    00000437: 	subq	start_time(%rip), %rax
    0000043e: 	cvtsi2sd	%rax, %xmm0
    00000443: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000044b: 	callq	_Z13record_resultdPKc # Offset: 1099
    00000450: 	testl	%r14d, %r14d
    00000453: 	jle	.Ltmp1808 # Offset: 1107
    00000459: 	leal	-0x1(%r14), %eax
    0000045d: 	cmpl	$0xe, %eax
    00000460: 	jbe	.Ltmp1809 # Offset: 1120
    00000466: 	movl	%r14d, %edx
    00000469: 	movq	%rbp, %rax
    0000046c: 	pxor	%xmm0, %xmm0
    00000470: 	shrl	$0x4, %edx
    00000473: 	subl	$0x1, %edx
    00000476: 	shlq	$0x4, %rdx
    0000047a: 	leaq	0x10(%rbp,%rdx), %rdx
    0000047f: 	nop # Size: 1
.Ltmp1810:
    00000480: 	movdqu	(%rax), %xmm5
    00000484: 	addq	$0x10, %rax
    00000488: 	paddb	%xmm5, %xmm0
    0000048c: 	cmpq	%rdx, %rax
    0000048f: 	jne	.Ltmp1810 # Offset: 1167
    00000491: 	movdqa	%xmm0, %xmm1
    00000495: 	movl	%r14d, %esi
    00000498: 	psrldq	$0x8, %xmm1
    0000049d: 	andl	$-0x10, %esi
    000004a0: 	paddb	%xmm1, %xmm0
    000004a4: 	pxor	%xmm1, %xmm1
    000004a8: 	movl	%esi, %edx
    000004aa: 	psadbw	%xmm1, %xmm0
    000004ae: 	movd	%xmm0, %eax
    000004b2: 	cmpl	%r14d, %esi
    000004b5: 	je	.Ltmp1811 # Offset: 1205
.Ltmp1817:
    000004bb: 	movl	%r14d, %edi
    000004be: 	subl	%esi, %edi
    000004c0: 	leal	-0x1(%rdi), %r9d
    000004c4: 	cmpl	$0x6, %r9d
    000004c8: 	jbe	.Ltmp1812 # Offset: 1224
    000004ca: 	movq	(%rbp,%rsi), %xmm1
    000004d0: 	pxor	%xmm0, %xmm0
    000004d4: 	movdqa	%xmm1, %xmm6
    000004d8: 	psadbw	%xmm0, %xmm6
    000004dc: 	movq	%xmm6, 0xc8(%rsp)
    000004e5: 	movq	%xmm6, %rsi
    000004ea: 	movl	%esi, %r9d
    000004ed: 	movl	%edi, %esi
    000004ef: 	andl	$-0x8, %esi
    000004f2: 	addl	%r9d, %eax
    000004f5: 	addl	%esi, %edx
    000004f7: 	cmpl	%esi, %edi
    000004f9: 	je	.Ltmp1811 # Offset: 1273
.Ltmp1812:
    000004fb: 	movslq	%edx, %rsi
    000004fe: 	addb	(%rbp,%rsi), %al
    00000502: 	leal	0x1(%rdx), %esi
    00000505: 	cmpl	%esi, %r14d
    00000508: 	jle	.Ltmp1811 # Offset: 1288
    0000050a: 	movslq	%esi, %rsi
    0000050d: 	addb	(%rbp,%rsi), %al
    00000511: 	leal	0x2(%rdx), %esi
    00000514: 	cmpl	%esi, %r14d
    00000517: 	jle	.Ltmp1811 # Offset: 1303
    00000519: 	movslq	%esi, %rsi
    0000051c: 	addb	(%rbp,%rsi), %al
    00000520: 	leal	0x3(%rdx), %esi
    00000523: 	cmpl	%esi, %r14d
    00000526: 	jle	.Ltmp1811 # Offset: 1318
    00000528: 	movslq	%esi, %rsi
    0000052b: 	addb	(%rbp,%rsi), %al
    0000052f: 	leal	0x4(%rdx), %esi
    00000532: 	cmpl	%esi, %r14d
    00000535: 	jle	.Ltmp1811 # Offset: 1333
    00000537: 	movslq	%esi, %rsi
    0000053a: 	addb	(%rbp,%rsi), %al
    0000053e: 	leal	0x5(%rdx), %esi
    00000541: 	cmpl	%esi, %r14d
    00000544: 	jle	.Ltmp1811 # Offset: 1348
    00000546: 	movslq	%esi, %rsi
    00000549: 	addl	$0x6, %edx
    0000054c: 	addb	(%rbp,%rsi), %al
    00000550: 	cmpl	%edx, %r14d
    00000553: 	jle	.Ltmp1811 # Offset: 1363
    00000555: 	movslq	%edx, %rdx
    00000558: 	addb	(%rbp,%rdx), %al
.Ltmp1811:
    0000055c: 	testb	%al, %al
    0000055e: 	jne	.Ltmp1813 # Offset: 1374
.Ltmp1808:
    00000560: 	addq	$0xd8, %rsp
    00000567: 	popq	%rbx
    00000568: 	popq	%rbp
    00000569: 	popq	%r12
    0000056b: 	popq	%r13
    0000056d: 	popq	%r14
    0000056f: 	popq	%r15
    00000571: 	retq # Offset: 1393
.Ltmp1813:
    00000572: 	movq	0x90(%rsp), %rsi
    0000057a: 	addq	$0xd8, %rsp
    00000581: 	movzbl	%al, %edi
    00000584: 	popq	%rbx
    00000585: 	popq	%rbp
    00000586: 	popq	%r12
    00000588: 	popq	%r13
    0000058a: 	popq	%r14
    0000058c: 	popq	%r15
    0000058e: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1422
.Ltmp1804:
    00000593: 	leal	-0x1(%r14), %r12d
    00000597: 	xorl	%r15d, %r15d
    0000059a: 	leaq	0x1(%rbp,%rdx), %rax
    0000059f: 	movq	%rbp, %rdi
    000005a2: 	subl	%ebx, %r12d
    000005a5: 	movl	%r12d, %ebp
    000005a8: 	movl	%r15d, %r12d
    000005ab: 	movq	%rax, %r15
    000005ae: 	nop # Size: 2
.Ltmp1816:
    000005b0: 	movq	%r13, %rdx
    000005b3: 	xorl	%esi, %esi
    000005b5: 	callq	memset@PLT # Offset: 1461
    000005ba: 	movq	%rax, %rdi
    000005bd: 	cmpl	%ebx, %r14d
    000005c0: 	jle	.Ltmp1814 # Offset: 1472
    000005c2: 	movl	%ebp, %ecx
    000005c4: 	movq	0x8(%rsp), %rax
    000005c9: 	addq	%r15, %rcx
    000005cc: 	nopl	(%rax) # Size: 4
.Ltmp1815:
    000005d0: 	cvttsd2si	init_value(%rip), %edx
    000005d8: 	addq	$0x1, %rax
    000005dc: 	movb	%dl, -0x1(%rax)
    000005df: 	cmpq	%rcx, %rax
    000005e2: 	jne	.Ltmp1815 # Offset: 1506
.Ltmp1814:
    000005e4: 	addl	$0x1, %r12d
    000005e8: 	cmpl	iterations(%rip), %r12d
    000005ef: 	jl	.Ltmp1816 # Offset: 1519
    000005f1: 	movq	%rdi, %rbp
    000005f4: 	jmp	.Ltmp1803 # Offset: 1524
.Ltmp1809:
    000005f9: 	xorl	%esi, %esi
    000005fb: 	xorl	%eax, %eax
    000005fd: 	xorl	%edx, %edx
    000005ff: 	jmp	.Ltmp1817 # Offset: 1535
DWARF CFI Instructions:
    <empty>
End of Function "_Z37test_for_loop_memset_partial2_replaceIhEvPT_iPKc"

Binary Function "_Z30test_for_loop_partial2_replaceIhEvPT_iPKc" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x28620
  Size        : 0x62f
  MaxSize     : 0x630
  Offset      : 0x28620
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_partial2_replaceIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	%rdx, 0x90(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp1818 # Offset: 55
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movl	%r14d, %edi
    00000043: 	leaq	init_value(%rip), %rsi
    0000004a: 	shrl	$0x1f, %ebx
    0000004d: 	addl	%r14d, %ebx
    00000050: 	sarl	%ebx
    00000052: 	subl	%ebx, %edi
    00000054: 	movslq	%ebx, %rdx
    00000057: 	movl	%edi, %eax
    00000059: 	leaq	(%r12,%rdx), %rcx
    0000005d: 	movl	%edi, 0x10(%rsp)
    00000061: 	addq	%rdx, %rax
    00000064: 	movq	%rcx, 0x8(%rsp)
    00000069: 	addq	%r12, %rax
    0000006c: 	cmpq	%rsi, %rax
    0000006f: 	setbe	%al
    00000072: 	addq	$0x8, %rsi
    00000076: 	cmpq	%rsi, %rcx
    00000079: 	setae	%sil
    0000007d: 	orb	%sil, %al
    00000080: 	je	.Ltmp1819 # Offset: 128
    00000086: 	leal	-0x1(%rdi), %eax
    00000089: 	cmpl	$0xe, %eax
    0000008c: 	jbe	.Ltmp1819 # Offset: 140
    00000092: 	movl	%edi, %eax
    00000094: 	movq	0x8(%rsp), %rdx
    00000099: 	movl	%edi, %ecx
    0000009b: 	leal	-0x1(%r14), %r13d
    0000009f: 	shrl	$0x4, %eax
    000000a2: 	andl	$-0x10, %ecx
    000000a5: 	addq	$0x1, %r13
    000000a9: 	xorl	%r15d, %r15d
    000000ac: 	subl	$0x1, %eax
    000000af: 	movl	%ecx, 0x14(%rsp)
    000000b3: 	movdqa	DATAat0x36f20(%rip), %xmm4
    000000bb: 	shlq	$0x4, %rax
    000000bf: 	leaq	0x10(%rdx,%rax), %rbp
    000000c4: 	leal	(%rbx,%rcx), %eax
    000000c7: 	leal	0x1(%rax), %edi
    000000ca: 	movslq	%eax, %rdx
    000000cd: 	leal	0x4(%rax), %esi
    000000d0: 	leaq	(%r12,%rdx), %r8
    000000d4: 	movl	%edi, 0x20(%rsp)
    000000d8: 	movslq	%edi, %rdx
    000000db: 	leal	0x2(%rax), %edi
    000000de: 	leaq	(%r12,%rdx), %rcx
    000000e2: 	movl	%edi, 0x24(%rsp)
    000000e6: 	movslq	%edi, %rdx
    000000e9: 	leal	0x3(%rax), %edi
    000000ec: 	movq	%rcx, 0x18(%rsp)
    000000f1: 	leaq	(%r12,%rdx), %rcx
    000000f5: 	movslq	%edi, %rdx
    000000f8: 	movq	%rcx, 0x28(%rsp)
    000000fd: 	leaq	(%r12,%rdx), %rcx
    00000101: 	movslq	%esi, %rdx
    00000104: 	addq	%r12, %rdx
    00000107: 	movl	%edi, 0x38(%rsp)
    0000010b: 	leal	0x5(%rax), %edi
    0000010e: 	movq	%rcx, 0x30(%rsp)
    00000113: 	leal	0x6(%rax), %ecx
    00000116: 	movq	%rdx, 0x40(%rsp)
    0000011b: 	movslq	%edi, %rdx
    0000011e: 	movl	%esi, 0x3c(%rsp)
    00000122: 	leaq	(%r12,%rdx), %rsi
    00000126: 	movslq	%ecx, %rdx
    00000129: 	movl	%ecx, 0x54(%rsp)
    0000012d: 	leaq	(%r12,%rdx), %rcx
    00000131: 	leal	0x7(%rax), %edx
    00000134: 	movq	%rsi, 0x48(%rsp)
    00000139: 	leal	0x8(%rax), %esi
    0000013c: 	movl	%edx, 0x68(%rsp)
    00000140: 	movslq	%edx, %rdx
    00000143: 	movl	%edi, 0x50(%rsp)
    00000147: 	leaq	(%r12,%rdx), %rdi
    0000014b: 	movslq	%esi, %rdx
    0000014e: 	addq	%r12, %rdx
    00000151: 	movq	%rdi, 0x60(%rsp)
    00000156: 	leal	0x9(%rax), %edi
    00000159: 	movq	%rcx, 0x58(%rsp)
    0000015e: 	leal	0xa(%rax), %ecx
    00000161: 	movq	%rdx, 0x70(%rsp)
    00000166: 	movslq	%edi, %rdx
    00000169: 	movl	%esi, 0x6c(%rsp)
    0000016d: 	leaq	(%r12,%rdx), %rsi
    00000171: 	movslq	%ecx, %rdx
    00000174: 	movl	%ecx, 0x84(%rsp)
    0000017b: 	leaq	(%r12,%rdx), %rcx
    0000017f: 	leal	0xb(%rax), %edx
    00000182: 	movq	%rsi, 0x78(%rsp)
    00000187: 	leal	0xc(%rax), %esi
    0000018a: 	movl	%edx, 0xa0(%rsp)
    00000191: 	movslq	%edx, %rdx
    00000194: 	movl	%edi, 0x80(%rsp)
    0000019b: 	leaq	(%r12,%rdx), %rdi
    0000019f: 	movslq	%esi, %rdx
    000001a2: 	addq	%r12, %rdx
    000001a5: 	movq	%rdi, 0x98(%rsp)
    000001ad: 	leal	0xd(%rax), %edi
    000001b0: 	addl	$0xe, %eax
    000001b3: 	movq	%rdx, 0xa8(%rsp)
    000001bb: 	movslq	%edi, %rdx
    000001be: 	movl	%esi, 0xa4(%rsp)
    000001c5: 	leaq	(%r12,%rdx), %rsi
    000001c9: 	movl	%eax, 0xbc(%rsp)
    000001d0: 	cltq
    000001d2: 	addq	%r12, %rax
    000001d5: 	movq	%rcx, 0x88(%rsp)
    000001dd: 	movq	%rsi, 0xb0(%rsp)
    000001e5: 	movq	%rax, 0xc0(%rsp)
    000001ed: 	movq	%r13, %rax
    000001f0: 	movq	%rbp, %r13
    000001f3: 	movl	%r15d, %ebp
    000001f6: 	movl	%edi, 0xb8(%rsp)
    000001fd: 	movq	%rax, %r15
    00000200: 	movq	%r12, %rdi
    00000203: 	movq	%r8, %r12
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1823:
    00000210: 	testl	%r14d, %r14d
    00000213: 	jle	.Ltmp1820 # Offset: 531
    00000215: 	movq	%r15, %rdx
    00000218: 	xorl	%esi, %esi
    0000021a: 	callq	memset@PLT # Offset: 538
    0000021f: 	movdqa	DATAat0x36f20(%rip), %xmm4
    00000227: 	movq	%rax, %rdi
.Ltmp1820:
    0000022a: 	cmpl	%ebx, %r14d
    0000022d: 	jle	.Ltmp1821 # Offset: 557
    00000233: 	movsd	init_value(%rip), %xmm1
    0000023b: 	movq	0x8(%rsp), %rax
    00000240: 	unpcklpd	%xmm1, %xmm1
    00000244: 	cvttpd2dq	%xmm1, %xmm1
    00000248: 	punpcklqdq	%xmm1, %xmm1
    0000024c: 	movdqa	%xmm1, %xmm2
    00000250: 	punpckhwd	%xmm1, %xmm2
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp1822:
    00000258: 	movdqa	%xmm1, %xmm0
    0000025c: 	addq	$0x10, %rax
    00000260: 	punpcklwd	%xmm1, %xmm0
    00000264: 	movdqa	%xmm0, %xmm3
    00000268: 	punpcklwd	%xmm2, %xmm0
    0000026c: 	punpckhwd	%xmm2, %xmm3
    00000270: 	punpcklwd	%xmm3, %xmm0
    00000274: 	pand	%xmm4, %xmm0
    00000278: 	packuswb	%xmm0, %xmm0
    0000027c: 	movups	%xmm0, -0x10(%rax)
    00000280: 	cmpq	%rax, %r13
    00000283: 	jne	.Ltmp1822 # Offset: 643
    00000285: 	movl	0x14(%rsp), %ecx
    00000289: 	cmpl	%ecx, 0x10(%rsp)
    0000028d: 	je	.Ltmp1821 # Offset: 653
    00000293: 	cvttsd2si	init_value(%rip), %eax
    0000029b: 	movb	%al, (%r12)
    0000029f: 	cmpl	0x20(%rsp), %r14d
    000002a4: 	jle	.Ltmp1821 # Offset: 676
    000002aa: 	cvttsd2si	init_value(%rip), %eax
    000002b2: 	movq	0x18(%rsp), %rcx
    000002b7: 	movb	%al, (%rcx)
    000002b9: 	cmpl	0x24(%rsp), %r14d
    000002be: 	jle	.Ltmp1821 # Offset: 702
    000002c4: 	cvttsd2si	init_value(%rip), %eax
    000002cc: 	movq	0x28(%rsp), %rcx
    000002d1: 	movb	%al, (%rcx)
    000002d3: 	cmpl	0x38(%rsp), %r14d
    000002d8: 	jle	.Ltmp1821 # Offset: 728
    000002de: 	cvttsd2si	init_value(%rip), %eax
    000002e6: 	movq	0x30(%rsp), %rcx
    000002eb: 	movb	%al, (%rcx)
    000002ed: 	cmpl	0x3c(%rsp), %r14d
    000002f2: 	jle	.Ltmp1821 # Offset: 754
    000002f8: 	cvttsd2si	init_value(%rip), %eax
    00000300: 	movq	0x40(%rsp), %rsi
    00000305: 	movb	%al, (%rsi)
    00000307: 	cmpl	0x50(%rsp), %r14d
    0000030c: 	jle	.Ltmp1821 # Offset: 780
    00000312: 	cvttsd2si	init_value(%rip), %eax
    0000031a: 	movq	0x48(%rsp), %rsi
    0000031f: 	movb	%al, (%rsi)
    00000321: 	cmpl	0x54(%rsp), %r14d
    00000326: 	jle	.Ltmp1821 # Offset: 806
    0000032c: 	cvttsd2si	init_value(%rip), %eax
    00000334: 	movq	0x58(%rsp), %rcx
    00000339: 	movb	%al, (%rcx)
    0000033b: 	cmpl	0x68(%rsp), %r14d
    00000340: 	jle	.Ltmp1821 # Offset: 832
    00000346: 	cvttsd2si	init_value(%rip), %eax
    0000034e: 	movq	0x60(%rsp), %rcx
    00000353: 	movb	%al, (%rcx)
    00000355: 	cmpl	0x6c(%rsp), %r14d
    0000035a: 	jle	.Ltmp1821 # Offset: 858
    00000360: 	cvttsd2si	init_value(%rip), %eax
    00000368: 	movq	0x70(%rsp), %rsi
    0000036d: 	movb	%al, (%rsi)
    0000036f: 	cmpl	0x80(%rsp), %r14d
    00000377: 	jle	.Ltmp1821 # Offset: 887
    0000037d: 	cvttsd2si	init_value(%rip), %eax
    00000385: 	movq	0x78(%rsp), %rsi
    0000038a: 	movb	%al, (%rsi)
    0000038c: 	cmpl	0x84(%rsp), %r14d
    00000394: 	jle	.Ltmp1821 # Offset: 916
    0000039a: 	cvttsd2si	init_value(%rip), %eax
    000003a2: 	movq	0x88(%rsp), %rcx
    000003aa: 	movb	%al, (%rcx)
    000003ac: 	cmpl	0xa0(%rsp), %r14d
    000003b4: 	jle	.Ltmp1821 # Offset: 948
    000003b6: 	cvttsd2si	init_value(%rip), %eax
    000003be: 	movq	0x98(%rsp), %rsi
    000003c6: 	movb	%al, (%rsi)
    000003c8: 	cmpl	0xa4(%rsp), %r14d
    000003d0: 	jle	.Ltmp1821 # Offset: 976
    000003d2: 	cvttsd2si	init_value(%rip), %eax
    000003da: 	movq	0xa8(%rsp), %rsi
    000003e2: 	movb	%al, (%rsi)
    000003e4: 	cmpl	0xb8(%rsp), %r14d
    000003ec: 	jle	.Ltmp1821 # Offset: 1004
    000003ee: 	cvttsd2si	init_value(%rip), %eax
    000003f6: 	movq	0xb0(%rsp), %rsi
    000003fe: 	movb	%al, (%rsi)
    00000400: 	cmpl	0xbc(%rsp), %r14d
    00000408: 	jle	.Ltmp1821 # Offset: 1032
    0000040a: 	cvttsd2si	init_value(%rip), %eax
    00000412: 	movq	0xc0(%rsp), %rcx
    0000041a: 	movb	%al, (%rcx)
    0000041c: 	nopl	(%rax) # Size: 4
.Ltmp1821:
    00000420: 	addl	$0x1, %ebp
    00000423: 	cmpl	%ebp, iterations(%rip)
    00000429: 	jg	.Ltmp1823 # Offset: 1065
    0000042f: 	movq	%rdi, %r12
.Ltmp1818:
    00000432: 	callq	clock@PLT # Offset: 1074
    00000437: 	movq	0x90(%rsp), %rdi
    0000043f: 	pxor	%xmm0, %xmm0
    00000443: 	movq	%rax, end_time(%rip)
    0000044a: 	subq	start_time(%rip), %rax
    00000451: 	cvtsi2sd	%rax, %xmm0
    00000456: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000045e: 	callq	_Z13record_resultdPKc # Offset: 1118
    00000463: 	testl	%r14d, %r14d
    00000466: 	jle	.Ltmp1824 # Offset: 1126
    0000046c: 	leal	-0x1(%r14), %eax
    00000470: 	cmpl	$0xe, %eax
    00000473: 	jbe	.Ltmp1825 # Offset: 1139
    00000479: 	movl	%r14d, %edx
    0000047c: 	movq	%r12, %rax
    0000047f: 	pxor	%xmm0, %xmm0
    00000483: 	shrl	$0x4, %edx
    00000486: 	subl	$0x1, %edx
    00000489: 	shlq	$0x4, %rdx
    0000048d: 	leaq	0x10(%r12,%rdx), %rdx
    00000492: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1826:
    00000498: 	movdqu	(%rax), %xmm5
    0000049c: 	addq	$0x10, %rax
    000004a0: 	paddb	%xmm5, %xmm0
    000004a4: 	cmpq	%rdx, %rax
    000004a7: 	jne	.Ltmp1826 # Offset: 1191
    000004a9: 	movdqa	%xmm0, %xmm1
    000004ad: 	movl	%r14d, %esi
    000004b0: 	psrldq	$0x8, %xmm1
    000004b5: 	andl	$-0x10, %esi
    000004b8: 	paddb	%xmm1, %xmm0
    000004bc: 	pxor	%xmm1, %xmm1
    000004c0: 	movl	%esi, %edx
    000004c2: 	psadbw	%xmm1, %xmm0
    000004c6: 	movd	%xmm0, %eax
    000004ca: 	cmpl	%r14d, %esi
    000004cd: 	je	.Ltmp1827 # Offset: 1229
.Ltmp1834:
    000004d3: 	movl	%r14d, %edi
    000004d6: 	subl	%esi, %edi
    000004d8: 	leal	-0x1(%rdi), %r9d
    000004dc: 	cmpl	$0x6, %r9d
    000004e0: 	jbe	.Ltmp1828 # Offset: 1248
    000004e2: 	movq	(%r12,%rsi), %xmm1
    000004e8: 	pxor	%xmm0, %xmm0
    000004ec: 	movdqa	%xmm1, %xmm6
    000004f0: 	psadbw	%xmm0, %xmm6
    000004f4: 	movq	%xmm6, 0xc8(%rsp)
    000004fd: 	movq	%xmm6, %rsi
    00000502: 	movl	%esi, %r9d
    00000505: 	movl	%edi, %esi
    00000507: 	andl	$-0x8, %esi
    0000050a: 	addl	%r9d, %eax
    0000050d: 	addl	%esi, %edx
    0000050f: 	cmpl	%esi, %edi
    00000511: 	je	.Ltmp1827 # Offset: 1297
.Ltmp1828:
    00000513: 	movslq	%edx, %rsi
    00000516: 	addb	(%r12,%rsi), %al
    0000051a: 	leal	0x1(%rdx), %esi
    0000051d: 	cmpl	%esi, %r14d
    00000520: 	jle	.Ltmp1827 # Offset: 1312
    00000522: 	movslq	%esi, %rsi
    00000525: 	addb	(%r12,%rsi), %al
    00000529: 	leal	0x2(%rdx), %esi
    0000052c: 	cmpl	%esi, %r14d
    0000052f: 	jle	.Ltmp1827 # Offset: 1327
    00000531: 	movslq	%esi, %rsi
    00000534: 	addb	(%r12,%rsi), %al
    00000538: 	leal	0x3(%rdx), %esi
    0000053b: 	cmpl	%r14d, %esi
    0000053e: 	jge	.Ltmp1827 # Offset: 1342
    00000540: 	movslq	%esi, %rsi
    00000543: 	addb	(%r12,%rsi), %al
    00000547: 	leal	0x4(%rdx), %esi
    0000054a: 	cmpl	%esi, %r14d
    0000054d: 	jle	.Ltmp1827 # Offset: 1357
    0000054f: 	movslq	%esi, %rsi
    00000552: 	addb	(%r12,%rsi), %al
    00000556: 	leal	0x5(%rdx), %esi
    00000559: 	cmpl	%esi, %r14d
    0000055c: 	jle	.Ltmp1827 # Offset: 1372
    0000055e: 	movslq	%esi, %rsi
    00000561: 	addl	$0x6, %edx
    00000564: 	addb	(%r12,%rsi), %al
    00000568: 	cmpl	%edx, %r14d
    0000056b: 	jle	.Ltmp1827 # Offset: 1387
    0000056d: 	movslq	%edx, %rdx
    00000570: 	addb	(%r12,%rdx), %al
.Ltmp1827:
    00000574: 	testb	%al, %al
    00000576: 	jne	.Ltmp1829 # Offset: 1398
.Ltmp1824:
    00000578: 	addq	$0xd8, %rsp
    0000057f: 	popq	%rbx
    00000580: 	popq	%rbp
    00000581: 	popq	%r12
    00000583: 	popq	%r13
    00000585: 	popq	%r14
    00000587: 	popq	%r15
    00000589: 	retq # Offset: 1417
.Ltmp1829:
    0000058a: 	movq	0x90(%rsp), %rsi
    00000592: 	addq	$0xd8, %rsp
    00000599: 	movzbl	%al, %edi
    0000059c: 	popq	%rbx
    0000059d: 	popq	%rbp
    0000059e: 	popq	%r12
    000005a0: 	popq	%r13
    000005a2: 	popq	%r14
    000005a4: 	popq	%r15
    000005a6: 	jmp	"_Z9check_sumIhEvT_PKc.part.0/1" # TAILCALL  # Offset: 1446
.Ltmp1819:
    000005ab: 	leal	-0x1(%r14), %ebp
    000005af: 	xorl	%r15d, %r15d
    000005b2: 	leaq	0x1(%r12,%rdx), %r13
    000005b7: 	movq	%r12, %rdi
    000005ba: 	movl	%ebp, %eax
    000005bc: 	movq	%r13, %r12
    000005bf: 	movl	%ebp, %r13d
    000005c2: 	movl	%r14d, %ebp
    000005c5: 	subl	%ebx, %eax
    000005c7: 	movl	%r15d, %r14d
    000005ca: 	movl	%eax, %r15d
    000005cd: 	nopl	(%rax) # Size: 3
.Ltmp1833:
    000005d0: 	testl	%ebp, %ebp
    000005d2: 	jle	.Ltmp1830 # Offset: 1490
    000005d4: 	movl	%r13d, %edx
    000005d7: 	xorl	%esi, %esi
    000005d9: 	addq	$0x1, %rdx
    000005dd: 	callq	memset@PLT # Offset: 1501
    000005e2: 	movq	%rax, %rdi
.Ltmp1830:
    000005e5: 	cmpl	%ebx, %ebp
    000005e7: 	jle	.Ltmp1831 # Offset: 1511
    000005e9: 	movl	%r15d, %ecx
    000005ec: 	movq	0x8(%rsp), %rax
    000005f1: 	addq	%r12, %rcx
    000005f4: 	nopl	(%rax) # Size: 4
.Ltmp1832:
    000005f8: 	cvttsd2si	init_value(%rip), %edx
    00000600: 	addq	$0x1, %rax
    00000604: 	movb	%dl, -0x1(%rax)
    00000607: 	cmpq	%rax, %rcx
    0000060a: 	jne	.Ltmp1832 # Offset: 1546
.Ltmp1831:
    0000060c: 	addl	$0x1, %r14d
    00000610: 	cmpl	iterations(%rip), %r14d
    00000617: 	jl	.Ltmp1833 # Offset: 1559
    00000619: 	movq	%rdi, %r12
    0000061c: 	movl	%ebp, %r14d
    0000061f: 	jmp	.Ltmp1818 # Offset: 1567
.Ltmp1825:
    00000624: 	xorl	%esi, %esi
    00000626: 	xorl	%eax, %eax
    00000628: 	xorl	%edx, %edx
    0000062a: 	jmp	.Ltmp1834 # Offset: 1578
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_partial2_replaceIhEvPT_iPKc"

Binary Function "_Z30test_loop_partial4_replace_optIhEvPT_iPKc" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x28c50
  Size        : 0x1089
  MaxSize     : 0x1090
  Offset      : 0x28c50
  Section     : .text
  Orc Section : .local.text._Z30test_loop_partial4_replace_optIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %r10d
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdi, %rbp
    00000014: 	pushq	%rbx
    00000015: 	movl	%esi, %ebx
    00000017: 	subq	$0x298, %rsp
    0000001e: 	movq	%rdx, 0x1a8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x288(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	testl	%esi, %esi
    0000003b: 	cmovnsl	%esi, %r10d
    0000003f: 	sarl	$0x2, %r10d
    00000043: 	movl	%r10d, 0x8(%rsp)
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1835 # Offset: 92
    00000062: 	movslq	0x8(%rsp), %rsi
    00000067: 	movl	%ebx, %r8d
    0000006a: 	leal	(%rsi,%rsi), %r13d
    0000006e: 	movq	%rsi, %r10
    00000071: 	leaq	(%rbp,%rsi), %r11
    00000076: 	movq	%rsi, 0x210(%rsp)
    0000007e: 	movl	%r13d, %edi
    00000081: 	leal	(%r13,%rsi), %r12d
    00000086: 	movq	%r11, 0x20(%rsp)
    0000008b: 	subl	%esi, %edi
    0000008d: 	movl	%edi, %eax
    0000008f: 	leal	-0x1(%rdi), %r9d
    00000093: 	movl	%edi, 0x3c(%rsp)
    00000097: 	addq	%rsi, %rax
    0000009a: 	leaq	init_value(%rip), %rsi
    000000a1: 	movl	%r9d, 0x20c(%rsp)
    000000a9: 	addq	%rbp, %rax
    000000ac: 	leaq	0x8(%rsi), %rdx
    000000b0: 	cmpq	%rsi, %rax
    000000b3: 	setbe	%al
    000000b6: 	cmpq	%rdx, %r11
    000000b9: 	setae	%cl
    000000bc: 	orl	%ecx, %eax
    000000be: 	cmpl	$0xe, %r9d
    000000c2: 	seta	%cl
    000000c5: 	andl	%ecx, %eax
    000000c7: 	movb	%al, 0x2f(%rsp)
    000000cb: 	movl	%edi, %eax
    000000cd: 	andl	$-0x10, %edi
    000000d0: 	shrl	$0x4, %eax
    000000d3: 	movl	%edi, 0x48(%rsp)
    000000d7: 	subl	$0x1, %eax
    000000da: 	shlq	$0x4, %rax
    000000de: 	leaq	0x10(%r11,%rax), %r9
    000000e3: 	leal	(%r10,%rdi), %eax
    000000e7: 	movslq	%eax, %rcx
    000000ea: 	leal	0x1(%rax), %edi
    000000ed: 	leal	-0x1(%r10), %r11d
    000000f1: 	addq	%rbp, %rcx
    000000f4: 	movl	%edi, 0x64(%rsp)
    000000f8: 	movq	%rcx, 0x58(%rsp)
    000000fd: 	movslq	%edi, %rcx
    00000100: 	leal	0x3(%rax), %edi
    00000103: 	addq	%rbp, %rcx
    00000106: 	movl	%edi, 0xac(%rsp)
    0000010d: 	movq	%rcx, 0x80(%rsp)
    00000115: 	leal	0x2(%rax), %ecx
    00000118: 	movl	%ecx, 0x90(%rsp)
    0000011f: 	movslq	%ecx, %rcx
    00000122: 	addq	%rbp, %rcx
    00000125: 	movq	%rcx, 0xa0(%rsp)
    0000012d: 	movslq	%edi, %rcx
    00000130: 	leal	0x5(%rax), %edi
    00000133: 	addq	%rbp, %rcx
    00000136: 	movl	%edi, 0xf4(%rsp)
    0000013d: 	movq	%rcx, 0xc8(%rsp)
    00000145: 	leal	0x4(%rax), %ecx
    00000148: 	movl	%ecx, 0xd8(%rsp)
    0000014f: 	movslq	%ecx, %rcx
    00000152: 	addq	%rbp, %rcx
    00000155: 	movq	%rcx, 0xe8(%rsp)
    0000015d: 	movslq	%edi, %rcx
    00000160: 	leal	0x7(%rax), %edi
    00000163: 	addq	%rbp, %rcx
    00000166: 	movl	%edi, 0x13c(%rsp)
    0000016d: 	movq	%rcx, 0x110(%rsp)
    00000175: 	leal	0x6(%rax), %ecx
    00000178: 	movl	%ecx, 0x120(%rsp)
    0000017f: 	movslq	%ecx, %rcx
    00000182: 	addq	%rbp, %rcx
    00000185: 	movq	%rcx, 0x130(%rsp)
    0000018d: 	movslq	%edi, %rcx
    00000190: 	leal	0x9(%rax), %edi
    00000193: 	addq	%rbp, %rcx
    00000196: 	movl	%edi, 0x184(%rsp)
    0000019d: 	movq	%rcx, 0x158(%rsp)
    000001a5: 	leal	0x8(%rax), %ecx
    000001a8: 	movl	%ecx, 0x168(%rsp)
    000001af: 	movslq	%ecx, %rcx
    000001b2: 	addq	%rbp, %rcx
    000001b5: 	movq	%rcx, 0x178(%rsp)
    000001bd: 	movslq	%edi, %rcx
    000001c0: 	leal	0xb(%rax), %edi
    000001c3: 	addq	%rbp, %rcx
    000001c6: 	movl	%edi, 0x1d4(%rsp)
    000001cd: 	movq	%rcx, 0x1a0(%rsp)
    000001d5: 	leal	0xa(%rax), %ecx
    000001d8: 	movl	%ecx, 0x1b8(%rsp)
    000001df: 	movslq	%ecx, %rcx
    000001e2: 	addq	%rbp, %rcx
    000001e5: 	movq	%rcx, 0x1c8(%rsp)
    000001ed: 	movslq	%edi, %rcx
    000001f0: 	leal	0xd(%rax), %edi
    000001f3: 	addq	%rbp, %rcx
    000001f6: 	movq	%rcx, 0x1f0(%rsp)
    000001fe: 	leal	0xc(%rax), %ecx
    00000201: 	addl	$0xe, %eax
    00000204: 	movl	%ecx, 0x208(%rsp)
    0000020b: 	movslq	%ecx, %rcx
    0000020e: 	addq	%rbp, %rcx
    00000211: 	movq	%rcx, 0x230(%rsp)
    00000219: 	movslq	%edi, %rcx
    0000021c: 	movl	%edi, 0x240(%rsp)
    00000223: 	addq	%rbp, %rcx
    00000226: 	movl	%eax, 0x25c(%rsp)
    0000022d: 	cltq
    0000022f: 	addq	%rbp, %rax
    00000232: 	movq	%rcx, 0x250(%rsp)
    0000023a: 	movslq	%r13d, %rcx
    0000023d: 	movq	%rax, 0x270(%rsp)
    00000245: 	movl	%r10d, %eax
    00000248: 	leaq	(%rbp,%rcx), %rdi
    0000024d: 	addq	%rcx, %rax
    00000250: 	movq	%rcx, 0x200(%rsp)
    00000258: 	addq	%rbp, %rax
    0000025b: 	movq	%rdi, 0x18(%rsp)
    00000260: 	cmpq	%rsi, %rax
    00000263: 	movl	%r11d, 0x28(%rsp)
    00000268: 	setbe	%al
    0000026b: 	cmpq	%rdx, %rdi
    0000026e: 	setae	%cl
    00000271: 	orl	%ecx, %eax
    00000273: 	cmpl	$0xe, %r11d
    00000277: 	movslq	%r12d, %r11
    0000027a: 	seta	%cl
    0000027d: 	leaq	(%rbp,%r11), %r14
    00000282: 	andl	%ecx, %eax
    00000284: 	movb	%al, 0x2e(%rsp)
    00000288: 	movl	%r10d, %eax
    0000028b: 	shrl	$0x4, %eax
    0000028e: 	leal	-0x1(%rax), %ecx
    00000291: 	movl	%r10d, %eax
    00000294: 	andl	$-0x10, %eax
    00000297: 	addq	$0x1, %rcx
    0000029b: 	movl	%eax, 0x38(%rsp)
    0000029f: 	shlq	$0x4, %rcx
    000002a3: 	addl	%r13d, %eax
    000002a6: 	addq	%rdi, %rcx
    000002a9: 	movslq	%eax, %rdi
    000002ac: 	addq	%rbp, %rdi
    000002af: 	movq	%rdi, 0x50(%rsp)
    000002b4: 	leal	0x1(%rax), %edi
    000002b7: 	movl	%edi, 0x60(%rsp)
    000002bb: 	movslq	%edi, %rdi
    000002be: 	addq	%rbp, %rdi
    000002c1: 	movq	%rdi, 0x70(%rsp)
    000002c6: 	leal	0x2(%rax), %edi
    000002c9: 	movl	%edi, 0x7c(%rsp)
    000002cd: 	movslq	%edi, %rdi
    000002d0: 	addq	%rbp, %rdi
    000002d3: 	movq	%rdi, 0x98(%rsp)
    000002db: 	leal	0x3(%rax), %edi
    000002de: 	movl	%edi, 0xa8(%rsp)
    000002e5: 	movslq	%edi, %rdi
    000002e8: 	addq	%rbp, %rdi
    000002eb: 	movq	%rdi, 0xb8(%rsp)
    000002f3: 	leal	0x4(%rax), %edi
    000002f6: 	movl	%edi, 0xc4(%rsp)
    000002fd: 	movslq	%edi, %rdi
    00000300: 	addq	%rbp, %rdi
    00000303: 	movq	%rdi, 0xe0(%rsp)
    0000030b: 	leal	0x5(%rax), %edi
    0000030e: 	movl	%edi, 0xf0(%rsp)
    00000315: 	movslq	%edi, %rdi
    00000318: 	addq	%rbp, %rdi
    0000031b: 	movq	%rdi, 0x100(%rsp)
    00000323: 	leal	0x6(%rax), %edi
    00000326: 	movl	%edi, 0x10c(%rsp)
    0000032d: 	movslq	%edi, %rdi
    00000330: 	addq	%rbp, %rdi
    00000333: 	movq	%rdi, 0x128(%rsp)
    0000033b: 	leal	0x7(%rax), %edi
    0000033e: 	movl	%edi, 0x138(%rsp)
    00000345: 	movslq	%edi, %rdi
    00000348: 	addq	%rbp, %rdi
    0000034b: 	movq	%rdi, 0x148(%rsp)
    00000353: 	leal	0x8(%rax), %edi
    00000356: 	movl	%edi, 0x154(%rsp)
    0000035d: 	movslq	%edi, %rdi
    00000360: 	addq	%rbp, %rdi
    00000363: 	movq	%rdi, 0x170(%rsp)
    0000036b: 	leal	0x9(%rax), %edi
    0000036e: 	movl	%edi, 0x180(%rsp)
    00000375: 	movslq	%edi, %rdi
    00000378: 	addq	%rbp, %rdi
    0000037b: 	movq	%rdi, 0x190(%rsp)
    00000383: 	leal	0xa(%rax), %edi
    00000386: 	movl	%edi, 0x19c(%rsp)
    0000038d: 	movslq	%edi, %rdi
    00000390: 	addq	%rbp, %rdi
    00000393: 	movq	%rdi, 0x1c0(%rsp)
    0000039b: 	leal	0xb(%rax), %edi
    0000039e: 	movl	%edi, 0x1d0(%rsp)
    000003a5: 	movslq	%edi, %rdi
    000003a8: 	addq	%rbp, %rdi
    000003ab: 	movq	%rdi, 0x1e0(%rsp)
    000003b3: 	leal	0xc(%rax), %edi
    000003b6: 	movl	%edi, 0x1ec(%rsp)
    000003bd: 	movslq	%edi, %rdi
    000003c0: 	addq	%rbp, %rdi
    000003c3: 	movq	%rdi, 0x220(%rsp)
    000003cb: 	leal	0xd(%rax), %edi
    000003ce: 	addl	$0xe, %eax
    000003d1: 	movl	%edi, 0x22c(%rsp)
    000003d8: 	movslq	%edi, %rdi
    000003db: 	addq	%rbp, %rdi
    000003de: 	movl	%eax, 0x258(%rsp)
    000003e5: 	cltq
    000003e7: 	movq	%rdi, 0x248(%rsp)
    000003ef: 	movl	%ebx, %edi
    000003f1: 	addq	%rbp, %rax
    000003f4: 	subl	%r12d, %edi
    000003f7: 	movq	%rax, 0x268(%rsp)
    000003ff: 	movl	%edi, %eax
    00000401: 	movl	%edi, 0x30(%rsp)
    00000405: 	addq	%r11, %rax
    00000408: 	movq	%r14, 0x10(%rsp)
    0000040d: 	addq	%rbp, %rax
    00000410: 	movq	%r11, 0x1f8(%rsp)
    00000418: 	cmpq	%rsi, %rax
    0000041b: 	setbe	%al
    0000041e: 	cmpq	%rdx, %r14
    00000421: 	setae	%dl
    00000424: 	orl	%edx, %eax
    00000426: 	leal	-0x1(%rdi), %edx
    00000429: 	cmpl	$0xe, %edx
    0000042c: 	seta	%dl
    0000042f: 	andl	%edx, %eax
    00000431: 	movb	%al, 0x2d(%rsp)
    00000435: 	movl	%edi, %eax
    00000437: 	andl	$-0x10, %edi
    0000043a: 	shrl	$0x4, %eax
    0000043d: 	movl	%edi, 0x34(%rsp)
    00000441: 	subl	$0x1, %eax
    00000444: 	shlq	$0x4, %rax
    00000448: 	leaq	0x10(%r14,%rax), %r15
    0000044d: 	leal	(%r12,%rdi), %eax
    00000451: 	xorl	%r14d, %r14d
    00000454: 	movq	%rbp, %rdi
    00000457: 	movslq	%eax, %rdx
    0000045a: 	movl	%r14d, %ebx
    0000045d: 	movq	%r9, %r14
    00000460: 	leaq	(%rbp,%rdx), %rsi
    00000465: 	movq	%rsi, 0x40(%rsp)
    0000046a: 	leal	0x1(%rax), %esi
    0000046d: 	movslq	%esi, %rdx
    00000470: 	movl	%esi, 0x4c(%rsp)
    00000474: 	leaq	(%rbp,%rdx), %rsi
    00000479: 	movq	%rsi, 0x68(%rsp)
    0000047e: 	leal	0x2(%rax), %esi
    00000481: 	movslq	%esi, %rdx
    00000484: 	movl	%esi, 0x78(%rsp)
    00000488: 	leaq	(%rbp,%rdx), %rsi
    0000048d: 	movq	%rsi, 0x88(%rsp)
    00000495: 	leal	0x3(%rax), %esi
    00000498: 	movslq	%esi, %rdx
    0000049b: 	movl	%esi, 0x94(%rsp)
    000004a2: 	leaq	(%rbp,%rdx), %rsi
    000004a7: 	movq	%rsi, 0xb0(%rsp)
    000004af: 	leal	0x4(%rax), %esi
    000004b2: 	movslq	%esi, %rdx
    000004b5: 	movl	%esi, 0xc0(%rsp)
    000004bc: 	leal	0x5(%rax), %esi
    000004bf: 	addq	%rbp, %rdx
    000004c2: 	movl	%esi, 0xdc(%rsp)
    000004c9: 	movq	%rdx, 0xd0(%rsp)
    000004d1: 	movslq	%esi, %rdx
    000004d4: 	leaq	(%rbp,%rdx), %rsi
    000004d9: 	movq	%rsi, 0xf8(%rsp)
    000004e1: 	leal	0x6(%rax), %esi
    000004e4: 	movslq	%esi, %rdx
    000004e7: 	movl	%esi, 0x108(%rsp)
    000004ee: 	leal	0x7(%rax), %esi
    000004f1: 	addq	%rbp, %rdx
    000004f4: 	movl	%esi, 0x124(%rsp)
    000004fb: 	movq	%rdx, 0x118(%rsp)
    00000503: 	movslq	%esi, %rdx
    00000506: 	leaq	(%rbp,%rdx), %rsi
    0000050b: 	movq	%rsi, 0x140(%rsp)
    00000513: 	leal	0x8(%rax), %esi
    00000516: 	movslq	%esi, %rdx
    00000519: 	movl	%esi, 0x150(%rsp)
    00000520: 	addq	%rbp, %rdx
    00000523: 	movq	%rdx, 0x160(%rsp)
    0000052b: 	leal	0x9(%rax), %edx
    0000052e: 	movl	%edx, 0x16c(%rsp)
    00000535: 	movslq	%edx, %rdx
    00000538: 	leaq	(%rbp,%rdx), %rsi
    0000053d: 	movq	%rsi, 0x188(%rsp)
    00000545: 	leal	0xa(%rax), %esi
    00000548: 	movslq	%esi, %rdx
    0000054b: 	movl	%esi, 0x198(%rsp)
    00000552: 	addq	%rbp, %rdx
    00000555: 	movq	%rdx, 0x1b0(%rsp)
    0000055d: 	leal	0xb(%rax), %edx
    00000560: 	movl	%edx, 0x1bc(%rsp)
    00000567: 	movslq	%edx, %rdx
    0000056a: 	leaq	(%rbp,%rdx), %rsi
    0000056f: 	movq	%rsi, 0x1d8(%rsp)
    00000577: 	leal	0xc(%rax), %esi
    0000057a: 	movslq	%esi, %rdx
    0000057d: 	movl	%esi, 0x1e8(%rsp)
    00000584: 	movdqa	DATAat0x36f20(%rip), %xmm2
    0000058c: 	addq	%rbp, %rdx
    0000058f: 	movdqa	DATAat0x36f30(%rip), %xmm3
    00000597: 	movq	%rdx, 0x218(%rsp)
    0000059f: 	leal	0xd(%rax), %edx
    000005a2: 	addl	$0xe, %eax
    000005a5: 	movl	%edx, 0x228(%rsp)
    000005ac: 	movslq	%edx, %rdx
    000005af: 	movl	%eax, 0x244(%rsp)
    000005b6: 	cltq
    000005b8: 	leaq	(%rbp,%rdx), %rsi
    000005bd: 	addq	%rbp, %rax
    000005c0: 	movq	%rsi, 0x238(%rsp)
    000005c8: 	movq	%rcx, %rbp
    000005cb: 	movq	%rax, 0x260(%rsp)
    000005d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1846:
    000005d8: 	cmpl	$0x3, %r8d
    000005dc: 	jle	.Ltmp1836 # Offset: 1500
    000005de: 	movl	0x28(%rsp), %edx
    000005e2: 	xorl	%esi, %esi
    000005e4: 	movl	%r8d, 0xc(%rsp)
    000005e9: 	addq	$0x1, %rdx
    000005ed: 	callq	memset@PLT # Offset: 1517
    000005f2: 	movl	0xc(%rsp), %r8d
    000005f7: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005ff: 	movdqa	DATAat0x36f20(%rip), %xmm2
    00000607: 	movq	%rax, %rdi
.Ltmp1836:
    0000060a: 	cmpl	%r13d, 0x8(%rsp)
    0000060f: 	jge	.Ltmp1837 # Offset: 1551
    00000615: 	cmpb	$0x0, 0x2f(%rsp)
    0000061a: 	je	.Ltmp1838 # Offset: 1562
    00000620: 	movsd	init_value(%rip), %xmm1
    00000628: 	movq	0x20(%rsp), %rax
    0000062d: 	unpcklpd	%xmm1, %xmm1
    00000631: 	cvttpd2dq	%xmm1, %xmm1
    00000635: 	punpcklqdq	%xmm1, %xmm1
    00000639: 	movdqa	%xmm1, %xmm4
    0000063d: 	punpckhwd	%xmm1, %xmm4
    00000641: 	nopl	(%rax) # Size: 7
.Ltmp1839:
    00000648: 	movdqa	%xmm1, %xmm0
    0000064c: 	addq	$0x10, %rax
    00000650: 	punpcklwd	%xmm1, %xmm0
    00000654: 	movdqa	%xmm0, %xmm5
    00000658: 	punpcklwd	%xmm4, %xmm0
    0000065c: 	punpckhwd	%xmm4, %xmm5
    00000660: 	punpcklwd	%xmm5, %xmm0
    00000664: 	pand	%xmm2, %xmm0
    00000668: 	packuswb	%xmm0, %xmm0
    0000066c: 	movups	%xmm0, -0x10(%rax)
    00000670: 	cmpq	%r14, %rax
    00000673: 	jne	.Ltmp1839 # Offset: 1651
    00000675: 	movl	0x48(%rsp), %ecx
    00000679: 	cmpl	%ecx, 0x3c(%rsp)
    0000067d: 	je	.Ltmp1837 # Offset: 1661
    00000683: 	cvttsd2si	init_value(%rip), %eax
    0000068b: 	movq	0x58(%rsp), %rcx
    00000690: 	movb	%al, (%rcx)
    00000692: 	cmpl	0x64(%rsp), %r13d
    00000697: 	jle	.Ltmp1837 # Offset: 1687
    0000069d: 	cvttsd2si	init_value(%rip), %eax
    000006a5: 	movq	0x80(%rsp), %rcx
    000006ad: 	movb	%al, (%rcx)
    000006af: 	cmpl	0x90(%rsp), %r13d
    000006b7: 	jle	.Ltmp1837 # Offset: 1719
    000006bd: 	cvttsd2si	init_value(%rip), %eax
    000006c5: 	movq	0xa0(%rsp), %rsi
    000006cd: 	movb	%al, (%rsi)
    000006cf: 	cmpl	0xac(%rsp), %r13d
    000006d7: 	jle	.Ltmp1837 # Offset: 1751
    000006dd: 	cvttsd2si	init_value(%rip), %eax
    000006e5: 	movq	0xc8(%rsp), %rcx
    000006ed: 	movb	%al, (%rcx)
    000006ef: 	cmpl	0xd8(%rsp), %r13d
    000006f7: 	jle	.Ltmp1837 # Offset: 1783
    000006fd: 	cvttsd2si	init_value(%rip), %eax
    00000705: 	movq	0xe8(%rsp), %rsi
    0000070d: 	movb	%al, (%rsi)
    0000070f: 	cmpl	0xf4(%rsp), %r13d
    00000717: 	jle	.Ltmp1837 # Offset: 1815
    0000071d: 	cvttsd2si	init_value(%rip), %eax
    00000725: 	movq	0x110(%rsp), %rcx
    0000072d: 	movb	%al, (%rcx)
    0000072f: 	cmpl	0x120(%rsp), %r13d
    00000737: 	jle	.Ltmp1837 # Offset: 1847
    0000073d: 	cvttsd2si	init_value(%rip), %eax
    00000745: 	movq	0x130(%rsp), %rsi
    0000074d: 	movb	%al, (%rsi)
    0000074f: 	cmpl	0x13c(%rsp), %r13d
    00000757: 	jle	.Ltmp1837 # Offset: 1879
    0000075d: 	cvttsd2si	init_value(%rip), %eax
    00000765: 	movq	0x158(%rsp), %rcx
    0000076d: 	movb	%al, (%rcx)
    0000076f: 	cmpl	0x168(%rsp), %r13d
    00000777: 	jle	.Ltmp1837 # Offset: 1911
    0000077d: 	cvttsd2si	init_value(%rip), %eax
    00000785: 	movq	0x178(%rsp), %rsi
    0000078d: 	movb	%al, (%rsi)
    0000078f: 	cmpl	0x184(%rsp), %r13d
    00000797: 	jle	.Ltmp1837 # Offset: 1943
    0000079d: 	cvttsd2si	init_value(%rip), %eax
    000007a5: 	movq	0x1a0(%rsp), %rcx
    000007ad: 	movb	%al, (%rcx)
    000007af: 	cmpl	0x1b8(%rsp), %r13d
    000007b7: 	jle	.Ltmp1837 # Offset: 1975
    000007bd: 	cvttsd2si	init_value(%rip), %eax
    000007c5: 	movq	0x1c8(%rsp), %rcx
    000007cd: 	movb	%al, (%rcx)
    000007cf: 	cmpl	0x1d4(%rsp), %r13d
    000007d7: 	jle	.Ltmp1837 # Offset: 2007
    000007d9: 	cvttsd2si	init_value(%rip), %eax
    000007e1: 	movq	0x1f0(%rsp), %rsi
    000007e9: 	movb	%al, (%rsi)
    000007eb: 	cmpl	0x208(%rsp), %r13d
    000007f3: 	jle	.Ltmp1837 # Offset: 2035
    000007f5: 	cvttsd2si	init_value(%rip), %eax
    000007fd: 	movq	0x230(%rsp), %rcx
    00000805: 	movb	%al, (%rcx)
    00000807: 	cmpl	0x240(%rsp), %r13d
    0000080f: 	jle	.Ltmp1837 # Offset: 2063
    00000811: 	cvttsd2si	init_value(%rip), %eax
    00000819: 	movq	0x250(%rsp), %rcx
    00000821: 	movb	%al, (%rcx)
    00000823: 	cmpl	0x25c(%rsp), %r13d
    0000082b: 	jle	.Ltmp1837 # Offset: 2091
    0000082d: 	cvttsd2si	init_value(%rip), %eax
    00000835: 	movq	0x270(%rsp), %rcx
    0000083d: 	movb	%al, (%rcx)
    0000083f: 	nop # Size: 1
.Ltmp1837:
    00000840: 	cmpl	%r13d, %r12d
    00000843: 	jle	.Ltmp1840 # Offset: 2115
    00000849: 	cmpb	$0x0, 0x2e(%rsp)
    0000084e: 	je	.Ltmp1841 # Offset: 2126
    00000854: 	movsd	init_value(%rip), %xmm1
    0000085c: 	movq	0x18(%rsp), %rax
    00000861: 	unpcklpd	%xmm1, %xmm1
    00000865: 	cvttpd2dq	%xmm1, %xmm1
    00000869: 	punpcklqdq	%xmm1, %xmm1
    0000086d: 	movdqa	%xmm1, %xmm4
    00000871: 	punpckhwd	%xmm1, %xmm4
    00000875: 	nopl	(%rax) # Size: 3
.Ltmp1842:
    00000878: 	movdqa	%xmm1, %xmm0
    0000087c: 	addq	$0x10, %rax
    00000880: 	punpcklwd	%xmm1, %xmm0
    00000884: 	movdqa	%xmm0, %xmm5
    00000888: 	punpcklwd	%xmm4, %xmm0
    0000088c: 	punpckhwd	%xmm4, %xmm5
    00000890: 	punpcklwd	%xmm5, %xmm0
    00000894: 	pand	%xmm2, %xmm0
    00000898: 	packuswb	%xmm0, %xmm0
    0000089c: 	paddb	%xmm3, %xmm0
    000008a0: 	movups	%xmm0, -0x10(%rax)
    000008a4: 	cmpq	%rax, %rbp
    000008a7: 	jne	.Ltmp1842 # Offset: 2215
    000008a9: 	movl	0x38(%rsp), %ecx
    000008ad: 	cmpl	%ecx, 0x8(%rsp)
    000008b1: 	je	.Ltmp1840 # Offset: 2225
    000008b7: 	cvttsd2si	init_value(%rip), %eax
    000008bf: 	movq	0x50(%rsp), %rcx
    000008c4: 	addl	$0x1, %eax
    000008c7: 	movb	%al, (%rcx)
    000008c9: 	cmpl	0x60(%rsp), %r12d
    000008ce: 	jle	.Ltmp1840 # Offset: 2254
    000008d4: 	cvttsd2si	init_value(%rip), %eax
    000008dc: 	movq	0x70(%rsp), %rsi
    000008e1: 	addl	$0x1, %eax
    000008e4: 	movb	%al, (%rsi)
    000008e6: 	cmpl	0x7c(%rsp), %r12d
    000008eb: 	jle	.Ltmp1840 # Offset: 2283
    000008f1: 	cvttsd2si	init_value(%rip), %eax
    000008f9: 	movq	0x98(%rsp), %rcx
    00000901: 	addl	$0x1, %eax
    00000904: 	movb	%al, (%rcx)
    00000906: 	cmpl	0xa8(%rsp), %r12d
    0000090e: 	jle	.Ltmp1840 # Offset: 2318
    00000914: 	cvttsd2si	init_value(%rip), %eax
    0000091c: 	movq	0xb8(%rsp), %rsi
    00000924: 	addl	$0x1, %eax
    00000927: 	movb	%al, (%rsi)
    00000929: 	cmpl	0xc4(%rsp), %r12d
    00000931: 	jle	.Ltmp1840 # Offset: 2353
    00000937: 	cvttsd2si	init_value(%rip), %eax
    0000093f: 	movq	0xe0(%rsp), %rcx
    00000947: 	addl	$0x1, %eax
    0000094a: 	movb	%al, (%rcx)
    0000094c: 	cmpl	0xf0(%rsp), %r12d
    00000954: 	jle	.Ltmp1840 # Offset: 2388
    0000095a: 	cvttsd2si	init_value(%rip), %eax
    00000962: 	movq	0x100(%rsp), %rsi
    0000096a: 	addl	$0x1, %eax
    0000096d: 	movb	%al, (%rsi)
    0000096f: 	cmpl	0x10c(%rsp), %r12d
    00000977: 	jle	.Ltmp1840 # Offset: 2423
    0000097d: 	cvttsd2si	init_value(%rip), %eax
    00000985: 	movq	0x128(%rsp), %rcx
    0000098d: 	addl	$0x1, %eax
    00000990: 	movb	%al, (%rcx)
    00000992: 	cmpl	0x138(%rsp), %r12d
    0000099a: 	jle	.Ltmp1840 # Offset: 2458
    000009a0: 	cvttsd2si	init_value(%rip), %eax
    000009a8: 	movq	0x148(%rsp), %rsi
    000009b0: 	addl	$0x1, %eax
    000009b3: 	movb	%al, (%rsi)
    000009b5: 	cmpl	0x154(%rsp), %r12d
    000009bd: 	jle	.Ltmp1840 # Offset: 2493
    000009c3: 	cvttsd2si	init_value(%rip), %eax
    000009cb: 	movq	0x170(%rsp), %rcx
    000009d3: 	addl	$0x1, %eax
    000009d6: 	movb	%al, (%rcx)
    000009d8: 	cmpl	0x180(%rsp), %r12d
    000009e0: 	jle	.Ltmp1840 # Offset: 2528
    000009e6: 	cvttsd2si	init_value(%rip), %eax
    000009ee: 	movq	0x190(%rsp), %rsi
    000009f6: 	addl	$0x1, %eax
    000009f9: 	movb	%al, (%rsi)
    000009fb: 	cmpl	0x19c(%rsp), %r12d
    00000a03: 	jle	.Ltmp1840 # Offset: 2563
    00000a09: 	cvttsd2si	init_value(%rip), %eax
    00000a11: 	movq	0x1c0(%rsp), %rsi
    00000a19: 	addl	$0x1, %eax
    00000a1c: 	movb	%al, (%rsi)
    00000a1e: 	cmpl	0x1d0(%rsp), %r12d
    00000a26: 	jle	.Ltmp1840 # Offset: 2598
    00000a28: 	cvttsd2si	init_value(%rip), %eax
    00000a30: 	movq	0x1e0(%rsp), %rcx
    00000a38: 	addl	$0x1, %eax
    00000a3b: 	movb	%al, (%rcx)
    00000a3d: 	cmpl	0x1ec(%rsp), %r12d
    00000a45: 	jle	.Ltmp1840 # Offset: 2629
    00000a47: 	cvttsd2si	init_value(%rip), %eax
    00000a4f: 	movq	0x220(%rsp), %rcx
    00000a57: 	addl	$0x1, %eax
    00000a5a: 	movb	%al, (%rcx)
    00000a5c: 	cmpl	0x22c(%rsp), %r12d
    00000a64: 	jle	.Ltmp1840 # Offset: 2660
    00000a66: 	cvttsd2si	init_value(%rip), %eax
    00000a6e: 	movq	0x248(%rsp), %rcx
    00000a76: 	addl	$0x1, %eax
    00000a79: 	movb	%al, (%rcx)
    00000a7b: 	cmpl	0x258(%rsp), %r12d
    00000a83: 	jle	.Ltmp1840 # Offset: 2691
    00000a85: 	cvttsd2si	init_value(%rip), %eax
    00000a8d: 	movq	0x268(%rsp), %rcx
    00000a95: 	addl	$0x1, %eax
    00000a98: 	movb	%al, (%rcx)
    00000a9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1840:
    00000aa0: 	cmpl	%r12d, %r8d
    00000aa3: 	jle	.Ltmp1843 # Offset: 2723
    00000aa9: 	cmpb	$0x0, 0x2d(%rsp)
    00000aae: 	je	.Ltmp1844 # Offset: 2734
    00000ab4: 	movsd	init_value(%rip), %xmm1
    00000abc: 	movq	0x10(%rsp), %rax
    00000ac1: 	movdqa	DATAat0x36f40(%rip), %xmm6
    00000ac9: 	unpcklpd	%xmm1, %xmm1
    00000acd: 	cvttpd2dq	%xmm1, %xmm1
    00000ad1: 	punpcklqdq	%xmm1, %xmm1
    00000ad5: 	movdqa	%xmm1, %xmm4
    00000ad9: 	punpckhwd	%xmm1, %xmm4
    00000add: 	nopl	(%rax) # Size: 3
.Ltmp1845:
    00000ae0: 	movdqa	%xmm1, %xmm0
    00000ae4: 	addq	$0x10, %rax
    00000ae8: 	punpcklwd	%xmm1, %xmm0
    00000aec: 	movdqa	%xmm0, %xmm5
    00000af0: 	punpcklwd	%xmm4, %xmm0
    00000af4: 	punpckhwd	%xmm4, %xmm5
    00000af8: 	punpcklwd	%xmm5, %xmm0
    00000afc: 	pand	%xmm2, %xmm0
    00000b00: 	packuswb	%xmm0, %xmm0
    00000b04: 	paddb	%xmm6, %xmm0
    00000b08: 	movups	%xmm0, -0x10(%rax)
    00000b0c: 	cmpq	%r15, %rax
    00000b0f: 	jne	.Ltmp1845 # Offset: 2831
    00000b11: 	movl	0x34(%rsp), %ecx
    00000b15: 	cmpl	%ecx, 0x30(%rsp)
    00000b19: 	je	.Ltmp1843 # Offset: 2841
    00000b1f: 	cvttsd2si	init_value(%rip), %eax
    00000b27: 	movq	0x40(%rsp), %rsi
    00000b2c: 	addl	$0x2, %eax
    00000b2f: 	movb	%al, (%rsi)
    00000b31: 	cmpl	0x4c(%rsp), %r8d
    00000b36: 	jle	.Ltmp1843 # Offset: 2870
    00000b3c: 	cvttsd2si	init_value(%rip), %eax
    00000b44: 	movq	0x68(%rsp), %rcx
    00000b49: 	addl	$0x2, %eax
    00000b4c: 	movb	%al, (%rcx)
    00000b4e: 	cmpl	0x78(%rsp), %r8d
    00000b53: 	jle	.Ltmp1843 # Offset: 2899
    00000b59: 	cvttsd2si	init_value(%rip), %eax
    00000b61: 	movq	0x88(%rsp), %rsi
    00000b69: 	addl	$0x2, %eax
    00000b6c: 	movb	%al, (%rsi)
    00000b6e: 	cmpl	0x94(%rsp), %r8d
    00000b76: 	jle	.Ltmp1843 # Offset: 2934
    00000b7c: 	cvttsd2si	init_value(%rip), %eax
    00000b84: 	movq	0xb0(%rsp), %rcx
    00000b8c: 	addl	$0x2, %eax
    00000b8f: 	movb	%al, (%rcx)
    00000b91: 	cmpl	0xc0(%rsp), %r8d
    00000b99: 	jle	.Ltmp1843 # Offset: 2969
    00000b9f: 	cvttsd2si	init_value(%rip), %eax
    00000ba7: 	movq	0xd0(%rsp), %rsi
    00000baf: 	addl	$0x2, %eax
    00000bb2: 	movb	%al, (%rsi)
    00000bb4: 	cmpl	0xdc(%rsp), %r8d
    00000bbc: 	jle	.Ltmp1843 # Offset: 3004
    00000bc2: 	cvttsd2si	init_value(%rip), %eax
    00000bca: 	movq	0xf8(%rsp), %rcx
    00000bd2: 	addl	$0x2, %eax
    00000bd5: 	movb	%al, (%rcx)
    00000bd7: 	cmpl	0x108(%rsp), %r8d
    00000bdf: 	jle	.Ltmp1843 # Offset: 3039
    00000be5: 	cvttsd2si	init_value(%rip), %eax
    00000bed: 	movq	0x118(%rsp), %rsi
    00000bf5: 	addl	$0x2, %eax
    00000bf8: 	movb	%al, (%rsi)
    00000bfa: 	cmpl	0x124(%rsp), %r8d
    00000c02: 	jle	.Ltmp1843 # Offset: 3074
    00000c08: 	cvttsd2si	init_value(%rip), %eax
    00000c10: 	movq	0x140(%rsp), %rcx
    00000c18: 	addl	$0x2, %eax
    00000c1b: 	movb	%al, (%rcx)
    00000c1d: 	cmpl	0x150(%rsp), %r8d
    00000c25: 	jle	.Ltmp1843 # Offset: 3109
    00000c2b: 	cvttsd2si	init_value(%rip), %eax
    00000c33: 	movq	0x160(%rsp), %rsi
    00000c3b: 	addl	$0x2, %eax
    00000c3e: 	movb	%al, (%rsi)
    00000c40: 	cmpl	0x16c(%rsp), %r8d
    00000c48: 	jle	.Ltmp1843 # Offset: 3144
    00000c4e: 	cvttsd2si	init_value(%rip), %eax
    00000c56: 	movq	0x188(%rsp), %rcx
    00000c5e: 	addl	$0x2, %eax
    00000c61: 	movb	%al, (%rcx)
    00000c63: 	cmpl	0x198(%rsp), %r8d
    00000c6b: 	jle	.Ltmp1843 # Offset: 3179
    00000c71: 	cvttsd2si	init_value(%rip), %eax
    00000c79: 	movq	0x1b0(%rsp), %rcx
    00000c81: 	addl	$0x2, %eax
    00000c84: 	movb	%al, (%rcx)
    00000c86: 	cmpl	0x1bc(%rsp), %r8d
    00000c8e: 	jle	.Ltmp1843 # Offset: 3214
    00000c90: 	cvttsd2si	init_value(%rip), %eax
    00000c98: 	movq	0x1d8(%rsp), %rsi
    00000ca0: 	addl	$0x2, %eax
    00000ca3: 	movb	%al, (%rsi)
    00000ca5: 	cmpl	0x1e8(%rsp), %r8d
    00000cad: 	jle	.Ltmp1843 # Offset: 3245
    00000caf: 	cvttsd2si	init_value(%rip), %eax
    00000cb7: 	movq	0x218(%rsp), %rcx
    00000cbf: 	addl	$0x2, %eax
    00000cc2: 	movb	%al, (%rcx)
    00000cc4: 	cmpl	0x228(%rsp), %r8d
    00000ccc: 	jle	.Ltmp1843 # Offset: 3276
    00000cce: 	cvttsd2si	init_value(%rip), %eax
    00000cd6: 	movq	0x238(%rsp), %rcx
    00000cde: 	addl	$0x2, %eax
    00000ce1: 	movb	%al, (%rcx)
    00000ce3: 	cmpl	0x244(%rsp), %r8d
    00000ceb: 	jle	.Ltmp1843 # Offset: 3307
    00000ced: 	cvttsd2si	init_value(%rip), %eax
    00000cf5: 	movq	0x260(%rsp), %rcx
    00000cfd: 	addl	$0x2, %eax
    00000d00: 	movb	%al, (%rcx)
    00000d02: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1843:
    00000d08: 	addl	$0x1, %ebx
    00000d0b: 	cmpl	%ebx, iterations(%rip)
    00000d11: 	jg	.Ltmp1846 # Offset: 3345
    00000d17: 	movq	%rdi, %rbp
    00000d1a: 	movl	%r8d, %ebx
.Ltmp1835:
    00000d1d: 	callq	clock@PLT # Offset: 3357
    00000d22: 	movq	0x1a8(%rsp), %rdi
    00000d2a: 	pxor	%xmm0, %xmm0
    00000d2e: 	movq	%rax, end_time(%rip)
    00000d35: 	subq	start_time(%rip), %rax
    00000d3c: 	cvtsi2sd	%rax, %xmm0
    00000d41: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000d49: 	callq	_Z13record_resultdPKc # Offset: 3401
    00000d4e: 	testl	%ebx, %ebx
    00000d50: 	jle	.Ltmp1847 # Offset: 3408
    00000d56: 	leal	-0x1(%rbx), %eax
    00000d59: 	cmpl	$0xe, %eax
    00000d5c: 	jbe	.Ltmp1848 # Offset: 3420
    00000d62: 	movl	%ebx, %edx
    00000d64: 	movq	%rbp, %rax
    00000d67: 	pxor	%xmm0, %xmm0
    00000d6b: 	shrl	$0x4, %edx
    00000d6e: 	subl	$0x1, %edx
    00000d71: 	shlq	$0x4, %rdx
    00000d75: 	leaq	0x10(%rbp,%rdx), %rdx
    00000d7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1849:
    00000d80: 	movdqu	(%rax), %xmm7
    00000d84: 	addq	$0x10, %rax
    00000d88: 	paddb	%xmm7, %xmm0
    00000d8c: 	cmpq	%rax, %rdx
    00000d8f: 	jne	.Ltmp1849 # Offset: 3471
    00000d91: 	movdqa	%xmm0, %xmm1
    00000d95: 	movl	%ebx, %edx
    00000d97: 	psrldq	$0x8, %xmm1
    00000d9c: 	andl	$-0x10, %edx
    00000d9f: 	paddb	%xmm1, %xmm0
    00000da3: 	pxor	%xmm1, %xmm1
    00000da7: 	movl	%edx, %eax
    00000da9: 	psadbw	%xmm1, %xmm0
    00000dad: 	movd	%xmm0, %r12d
    00000db2: 	cmpl	%edx, %ebx
    00000db4: 	je	.Ltmp1850 # Offset: 3508
.Ltmp1859:
    00000dba: 	movl	%ebx, %ecx
    00000dbc: 	subl	%edx, %ecx
    00000dbe: 	leal	-0x1(%rcx), %esi
    00000dc1: 	cmpl	$0x6, %esi
    00000dc4: 	jbe	.Ltmp1851 # Offset: 3524
    00000dc6: 	movq	(%rbp,%rdx), %xmm1
    00000dcc: 	pxor	%xmm0, %xmm0
    00000dd0: 	movdqa	%xmm1, %xmm7
    00000dd4: 	psadbw	%xmm0, %xmm7
    00000dd8: 	movq	%xmm7, 0x278(%rsp)
    00000de1: 	movq	%xmm7, %rdx
    00000de6: 	movl	%edx, %esi
    00000de8: 	movl	%ecx, %edx
    00000dea: 	andl	$-0x8, %edx
    00000ded: 	addl	%esi, %r12d
    00000df0: 	addl	%edx, %eax
    00000df2: 	cmpl	%ecx, %edx
    00000df4: 	je	.Ltmp1850 # Offset: 3572
.Ltmp1851:
    00000df6: 	movslq	%eax, %rdx
    00000df9: 	addb	(%rbp,%rdx), %r12b
    00000dfe: 	leal	0x1(%rax), %edx
    00000e01: 	cmpl	%edx, %ebx
    00000e03: 	jle	.Ltmp1850 # Offset: 3587
    00000e05: 	movslq	%edx, %rdx
    00000e08: 	addb	(%rbp,%rdx), %r12b
    00000e0d: 	leal	0x2(%rax), %edx
    00000e10: 	cmpl	%edx, %ebx
    00000e12: 	jle	.Ltmp1850 # Offset: 3602
    00000e14: 	movslq	%edx, %rdx
    00000e17: 	addb	(%rbp,%rdx), %r12b
    00000e1c: 	leal	0x3(%rax), %edx
    00000e1f: 	cmpl	%ebx, %edx
    00000e21: 	jge	.Ltmp1850 # Offset: 3617
    00000e23: 	movslq	%edx, %rdx
    00000e26: 	addb	(%rbp,%rdx), %r12b
    00000e2b: 	leal	0x4(%rax), %edx
    00000e2e: 	cmpl	%ebx, %edx
    00000e30: 	jge	.Ltmp1850 # Offset: 3632
    00000e32: 	movslq	%edx, %rdx
    00000e35: 	addb	(%rbp,%rdx), %r12b
    00000e3a: 	leal	0x5(%rax), %edx
    00000e3d: 	cmpl	%ebx, %edx
    00000e3f: 	jge	.Ltmp1850 # Offset: 3647
    00000e41: 	movslq	%edx, %rdx
    00000e44: 	addl	$0x6, %eax
    00000e47: 	addb	(%rbp,%rdx), %r12b
    00000e4c: 	cmpl	%eax, %ebx
    00000e4e: 	jle	.Ltmp1850 # Offset: 3662
    00000e50: 	cltq
    00000e52: 	addb	(%rbp,%rax), %r12b
.Ltmp1850:
    00000e57: 	movsd	init_value(%rip), %xmm0
    00000e5f: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000e67: 	addsd	%xmm0, %xmm1
    00000e6b: 	cvttsd2si	%xmm1, %eax
    00000e6f: 	movsd	DATAat0x37030(%rip), %xmm1
    00000e77: 	addsd	%xmm0, %xmm1
    00000e7b: 	cvttsd2si	%xmm1, %ebx
    00000e7f: 	addl	%eax, %ebx
    00000e81: 	cvttsd2si	%xmm0, %eax
    00000e85: 	addl	%eax, %ebx
    00000e87: 	shll	$0x7, %ebx
    00000e8a: 	cmpb	%r12b, %bl
    00000e8d: 	jne	.Ltmp1852 # Offset: 3725
    00000e93: 	movq	0x288(%rsp), %rax
    00000e9b: 	subq	%fs:0x28, %rax
    00000ea4: 	jne	.Ltmp1853 # Offset: 3748
    00000eaa: 	addq	$0x298, %rsp
    00000eb1: 	popq	%rbx
    00000eb2: 	popq	%rbp
    00000eb3: 	popq	%r12
    00000eb5: 	popq	%r13
    00000eb7: 	popq	%r14
    00000eb9: 	popq	%r15
    00000ebb: 	retq # Offset: 3771
    00000ebc: 	nopl	(%rax) # Size: 4
.Ltmp1844:
    00000ec0: 	movq	0x1f8(%rsp), %rax
    00000ec8: 	leaq	0x1(%rdi,%rax), %rsi
    00000ecd: 	leal	-0x1(%r8), %eax
    00000ed1: 	subl	%r12d, %eax
    00000ed4: 	addq	%rax, %rsi
    00000ed7: 	movq	0x10(%rsp), %rax
    00000edc: 	nopl	(%rax) # Size: 4
.Ltmp1854:
    00000ee0: 	cvttsd2si	init_value(%rip), %edx
    00000ee8: 	addq	$0x1, %rax
    00000eec: 	addl	$0x2, %edx
    00000eef: 	movb	%dl, -0x1(%rax)
    00000ef2: 	cmpq	%rsi, %rax
    00000ef5: 	jne	.Ltmp1854 # Offset: 3829
    00000ef7: 	jmp	.Ltmp1843 # Offset: 3831
    00000efc: 	nopl	(%rax) # Size: 4
.Ltmp1838:
    00000f00: 	movq	0x210(%rsp), %rax
    00000f08: 	leaq	0x1(%rdi,%rax), %rsi
    00000f0d: 	movl	0x20c(%rsp), %eax
    00000f14: 	addq	%rax, %rsi
    00000f17: 	movq	0x20(%rsp), %rax
    00000f1c: 	nopl	(%rax) # Size: 4
.Ltmp1855:
    00000f20: 	cvttsd2si	init_value(%rip), %edx
    00000f28: 	addq	$0x1, %rax
    00000f2c: 	movb	%dl, -0x1(%rax)
    00000f2f: 	cmpq	%rsi, %rax
    00000f32: 	jne	.Ltmp1855 # Offset: 3890
    00000f34: 	jmp	.Ltmp1837 # Offset: 3892
    00000f39: 	nopl	(%rax) # Size: 7
.Ltmp1841:
    00000f40: 	movq	0x200(%rsp), %rax
    00000f48: 	leaq	0x1(%rdi,%rax), %rsi
    00000f4d: 	leal	-0x1(%r12), %eax
    00000f52: 	subl	%r13d, %eax
    00000f55: 	addq	%rax, %rsi
    00000f58: 	movq	0x18(%rsp), %rax
    00000f5d: 	nopl	(%rax) # Size: 3
.Ltmp1856:
    00000f60: 	cvttsd2si	init_value(%rip), %edx
    00000f68: 	addq	$0x1, %rax
    00000f6c: 	addl	$0x1, %edx
    00000f6f: 	movb	%dl, -0x1(%rax)
    00000f72: 	cmpq	%rsi, %rax
    00000f75: 	jne	.Ltmp1856 # Offset: 3957
    00000f77: 	jmp	.Ltmp1840 # Offset: 3959
.Ltmp1852:
    00000f7c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000f83: 	movl	$0x5, %edx
    00000f88: 	leaq	DATAat0x35004(%rip), %rsi
    00000f8f: 	movq	%rbp, %rdi
    00000f92: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3986
    00000f97: 	cmpq	$0x0, 0x1a8(%rsp)
    00000fa0: 	je	.Ltmp1857 # Offset: 4000
    00000fa6: 	movq	0x1a8(%rsp), %r15
    00000fae: 	movq	%r15, %rdi
    00000fb1: 	callq	strlen@PLT # Offset: 4017
    00000fb6: 	movq	%r15, %rsi
    00000fb9: 	movq	%rbp, %rdi
    00000fbc: 	movq	%rax, %rdx
    00000fbf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4031
.Ltmp1858:
    00000fc4: 	movq	%rbp, %rdi
    00000fc7: 	movl	$0xd, %edx
    00000fcc: 	leaq	DATAat0x3500a(%rip), %rsi
    00000fd3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4051
    00000fd8: 	movb	%r12b, 0x287(%rsp)
    00000fe0: 	movq	%rbp, %rdi
    00000fe3: 	leaq	0x287(%rsp), %r12
    00000feb: 	movl	$0x1, %edx
    00000ff0: 	movq	%r12, %rsi
    00000ff3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4083
    00000ff8: 	movl	$0xb, %edx
    00000ffd: 	leaq	DATAat0x35018(%rip), %rsi
    00001004: 	movq	%rax, %rbp
    00001007: 	movq	%rax, %rdi
    0000100a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4106
    0000100f: 	movq	%rbp, %rdi
    00001012: 	movl	$0x1, %edx
    00001017: 	movq	%r12, %rsi
    0000101a: 	movb	%bl, 0x287(%rsp)
    00001021: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4129
    00001026: 	movq	%rax, %rdi
    00001029: 	movq	0x288(%rsp), %rax
    00001031: 	subq	%fs:0x28, %rax
    0000103a: 	jne	.Ltmp1853 # Offset: 4154
    0000103c: 	addq	$0x298, %rsp
    00001043: 	popq	%rbx
    00001044: 	popq	%rbp
    00001045: 	popq	%r12
    00001047: 	popq	%r13
    00001049: 	popq	%r14
    0000104b: 	popq	%r15
    0000104d: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 4173
.Ltmp1857:
    00001052: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001059: 	movq	-0x18(%rax), %rdi
    0000105d: 	addq	%rbp, %rdi
    00001060: 	movl	0x20(%rdi), %esi
    00001063: 	orl	$0x1, %esi
    00001066: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4198
    0000106b: 	jmp	.Ltmp1858 # Offset: 4203
.Ltmp1847:
    00001070: 	xorl	%r12d, %r12d
    00001073: 	jmp	.Ltmp1850 # Offset: 4211
.Ltmp1848:
    00001078: 	xorl	%edx, %edx
    0000107a: 	xorl	%r12d, %r12d
    0000107d: 	xorl	%eax, %eax
    0000107f: 	jmp	.Ltmp1859 # Offset: 4223
.Ltmp1853:
    00001084: 	callq	__stack_chk_fail@PLT # Offset: 4228
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_loop_partial4_replace_optIhEvPT_iPKc"

Binary Function "_Z36test_for_loop_bzero_partial4_replaceIhEvPT_iPKc" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x29ce0
  Size        : 0x1059
  MaxSize     : 0x1060
  Offset      : 0x29ce0
  Section     : .text
  Orc Section : .local.text._Z36test_for_loop_bzero_partial4_replaceIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	leal	0x3(%rsi), %r13d
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movl	%esi, %ebp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x298, %rsp
    0000001e: 	movq	%rdx, 0x1a8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x288(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	testl	%esi, %esi
    0000003b: 	cmovnsl	%esi, %r13d
    0000003f: 	sarl	$0x2, %r13d
    00000043: 	movl	%r13d, 0x4(%rsp)
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1860 # Offset: 92
    00000062: 	movslq	0x4(%rsp), %r9
    00000067: 	movslq	%ebp, %rax
    0000006a: 	leaq	init_value(%rip), %rsi
    00000071: 	movq	%rax, 0x8(%rsp)
    00000076: 	leaq	0x8(%rsi), %rdx
    0000007a: 	leal	(%r9,%r9), %r15d
    0000007e: 	leaq	(%rbx,%r9), %r11
    00000082: 	movq	%r9, 0x210(%rsp)
    0000008a: 	movq	%r9, %rcx
    0000008d: 	movl	%r15d, %r8d
    00000090: 	movq	%r11, 0x20(%rsp)
    00000095: 	leal	(%r15,%r9), %r12d
    00000099: 	subl	%r9d, %r8d
    0000009c: 	movl	%r8d, %eax
    0000009f: 	leal	-0x1(%r8), %r10d
    000000a3: 	movl	%r8d, 0x3c(%rsp)
    000000a8: 	addq	%r9, %rax
    000000ab: 	movl	%r10d, 0x20c(%rsp)
    000000b3: 	addq	%rbx, %rax
    000000b6: 	cmpq	%rsi, %rax
    000000b9: 	setbe	%al
    000000bc: 	cmpq	%rdx, %r11
    000000bf: 	setae	%dil
    000000c3: 	orl	%edi, %eax
    000000c5: 	cmpl	$0xe, %r10d
    000000c9: 	seta	%dil
    000000cd: 	andl	%edi, %eax
    000000cf: 	movb	%al, 0x2b(%rsp)
    000000d3: 	movl	%r8d, %eax
    000000d6: 	andl	$-0x10, %r8d
    000000da: 	shrl	$0x4, %eax
    000000dd: 	movl	%r8d, 0x48(%rsp)
    000000e2: 	subl	$0x1, %eax
    000000e5: 	shlq	$0x4, %rax
    000000e9: 	leaq	0x10(%r11,%rax), %r10
    000000ee: 	movl	%r9d, %eax
    000000f1: 	addq	%r9, %r11
    000000f4: 	addl	%r8d, %eax
    000000f7: 	movslq	%eax, %rdi
    000000fa: 	addq	%rbx, %rdi
    000000fd: 	movq	%rdi, 0x58(%rsp)
    00000102: 	leal	0x1(%rax), %edi
    00000105: 	movl	%edi, 0x64(%rsp)
    00000109: 	movslq	%edi, %rdi
    0000010c: 	addq	%rbx, %rdi
    0000010f: 	movq	%rdi, 0x80(%rsp)
    00000117: 	leal	0x2(%rax), %edi
    0000011a: 	movl	%edi, 0x90(%rsp)
    00000121: 	movslq	%edi, %rdi
    00000124: 	addq	%rbx, %rdi
    00000127: 	movq	%rdi, 0xa0(%rsp)
    0000012f: 	leal	0x3(%rax), %edi
    00000132: 	movl	%edi, 0xac(%rsp)
    00000139: 	movslq	%edi, %rdi
    0000013c: 	addq	%rbx, %rdi
    0000013f: 	movq	%rdi, 0xc8(%rsp)
    00000147: 	leal	0x4(%rax), %edi
    0000014a: 	movl	%edi, 0xd8(%rsp)
    00000151: 	movslq	%edi, %rdi
    00000154: 	addq	%rbx, %rdi
    00000157: 	movq	%rdi, 0xe8(%rsp)
    0000015f: 	leal	0x5(%rax), %edi
    00000162: 	movl	%edi, 0xf4(%rsp)
    00000169: 	movslq	%edi, %rdi
    0000016c: 	addq	%rbx, %rdi
    0000016f: 	movq	%rdi, 0x110(%rsp)
    00000177: 	leal	0x6(%rax), %edi
    0000017a: 	movl	%edi, 0x120(%rsp)
    00000181: 	movslq	%edi, %rdi
    00000184: 	addq	%rbx, %rdi
    00000187: 	movq	%rdi, 0x130(%rsp)
    0000018f: 	leal	0x7(%rax), %edi
    00000192: 	movl	%edi, 0x13c(%rsp)
    00000199: 	movslq	%edi, %rdi
    0000019c: 	addq	%rbx, %rdi
    0000019f: 	movq	%rdi, 0x158(%rsp)
    000001a7: 	leal	0x8(%rax), %edi
    000001aa: 	movl	%edi, 0x168(%rsp)
    000001b1: 	movslq	%edi, %rdi
    000001b4: 	addq	%rbx, %rdi
    000001b7: 	movq	%rdi, 0x178(%rsp)
    000001bf: 	leal	0x9(%rax), %edi
    000001c2: 	movl	%edi, 0x184(%rsp)
    000001c9: 	movslq	%edi, %rdi
    000001cc: 	addq	%rbx, %rdi
    000001cf: 	movq	%rdi, 0x1a0(%rsp)
    000001d7: 	leal	0xa(%rax), %edi
    000001da: 	movl	%edi, 0x1b8(%rsp)
    000001e1: 	movslq	%edi, %rdi
    000001e4: 	addq	%rbx, %rdi
    000001e7: 	movq	%rdi, 0x1c8(%rsp)
    000001ef: 	leal	0xb(%rax), %edi
    000001f2: 	movl	%edi, 0x1d4(%rsp)
    000001f9: 	movslq	%edi, %rdi
    000001fc: 	addq	%rbx, %rdi
    000001ff: 	movq	%rdi, 0x1f0(%rsp)
    00000207: 	leal	0xc(%rax), %edi
    0000020a: 	movl	%edi, 0x208(%rsp)
    00000211: 	movslq	%edi, %rdi
    00000214: 	addq	%rbx, %rdi
    00000217: 	movq	%rdi, 0x230(%rsp)
    0000021f: 	leal	0xd(%rax), %edi
    00000222: 	addl	$0xe, %eax
    00000225: 	movl	%edi, 0x240(%rsp)
    0000022c: 	movslq	%edi, %rdi
    0000022f: 	movl	%eax, 0x25c(%rsp)
    00000236: 	cltq
    00000238: 	addq	%rbx, %rdi
    0000023b: 	addq	%rbx, %rax
    0000023e: 	movq	%rdi, 0x250(%rsp)
    00000246: 	leaq	(%r9,%r9), %rdi
    0000024a: 	movq	%rax, 0x270(%rsp)
    00000252: 	movl	%r9d, %eax
    00000255: 	addq	%rdi, %rax
    00000258: 	movq	%rdi, 0x200(%rsp)
    00000260: 	addq	%rbx, %rax
    00000263: 	movl	%r9d, 0x34(%rsp)
    00000268: 	cmpq	%rsi, %rax
    0000026b: 	movq	%r11, 0x18(%rsp)
    00000270: 	setbe	%al
    00000273: 	cmpq	%rdx, %r11
    00000276: 	setae	%dil
    0000027a: 	orl	%edi, %eax
    0000027c: 	leal	-0x1(%r9), %edi
    00000280: 	cmpl	$0xe, %edi
    00000283: 	seta	%dil
    00000287: 	andl	$-0x10, %ecx
    0000028a: 	andl	%edi, %eax
    0000028c: 	movl	%ecx, 0x38(%rsp)
    00000290: 	movb	%al, 0x2a(%rsp)
    00000294: 	movl	%r9d, %eax
    00000297: 	shrl	$0x4, %eax
    0000029a: 	subl	$0x1, %eax
    0000029d: 	shlq	$0x4, %rax
    000002a1: 	leaq	0x10(%r11,%rax), %r9
    000002a6: 	leal	(%rcx,%r15), %eax
    000002aa: 	movslq	%eax, %rdi
    000002ad: 	leaq	(%rbx,%rdi), %rcx
    000002b1: 	movq	%rcx, 0x50(%rsp)
    000002b6: 	leal	0x1(%rax), %ecx
    000002b9: 	movslq	%ecx, %rdi
    000002bc: 	movl	%ecx, 0x60(%rsp)
    000002c0: 	leaq	(%rbx,%rdi), %rcx
    000002c4: 	movq	%rcx, 0x70(%rsp)
    000002c9: 	leal	0x2(%rax), %ecx
    000002cc: 	movslq	%ecx, %rdi
    000002cf: 	movl	%ecx, 0x7c(%rsp)
    000002d3: 	leaq	(%rbx,%rdi), %rcx
    000002d7: 	movq	%rcx, 0x98(%rsp)
    000002df: 	leal	0x3(%rax), %ecx
    000002e2: 	movslq	%ecx, %rdi
    000002e5: 	movl	%ecx, 0xa8(%rsp)
    000002ec: 	leaq	(%rbx,%rdi), %rcx
    000002f0: 	movq	%rcx, 0xb8(%rsp)
    000002f8: 	leal	0x4(%rax), %ecx
    000002fb: 	movslq	%ecx, %rdi
    000002fe: 	movl	%ecx, 0xc4(%rsp)
    00000305: 	leaq	(%rbx,%rdi), %rcx
    00000309: 	movq	%rcx, 0xe0(%rsp)
    00000311: 	leal	0x5(%rax), %ecx
    00000314: 	movslq	%ecx, %rdi
    00000317: 	movl	%ecx, 0xf0(%rsp)
    0000031e: 	leaq	(%rbx,%rdi), %rcx
    00000322: 	movq	%rcx, 0x100(%rsp)
    0000032a: 	leal	0x6(%rax), %ecx
    0000032d: 	movslq	%ecx, %rdi
    00000330: 	movl	%ecx, 0x10c(%rsp)
    00000337: 	leaq	(%rbx,%rdi), %rcx
    0000033b: 	movq	%rcx, 0x128(%rsp)
    00000343: 	leal	0x7(%rax), %ecx
    00000346: 	movslq	%ecx, %rdi
    00000349: 	movl	%ecx, 0x138(%rsp)
    00000350: 	leaq	(%rbx,%rdi), %rcx
    00000354: 	movq	%rcx, 0x148(%rsp)
    0000035c: 	leal	0x8(%rax), %ecx
    0000035f: 	movslq	%ecx, %rdi
    00000362: 	movl	%ecx, 0x154(%rsp)
    00000369: 	leaq	(%rbx,%rdi), %rcx
    0000036d: 	movq	%rcx, 0x170(%rsp)
    00000375: 	leal	0x9(%rax), %ecx
    00000378: 	movslq	%ecx, %rdi
    0000037b: 	movl	%ecx, 0x180(%rsp)
    00000382: 	leaq	(%rbx,%rdi), %rcx
    00000386: 	movq	%rcx, 0x190(%rsp)
    0000038e: 	leal	0xa(%rax), %ecx
    00000391: 	movslq	%ecx, %rdi
    00000394: 	movl	%ecx, 0x19c(%rsp)
    0000039b: 	leaq	(%rbx,%rdi), %rcx
    0000039f: 	movq	%rcx, 0x1c0(%rsp)
    000003a7: 	leal	0xb(%rax), %ecx
    000003aa: 	movslq	%ecx, %rdi
    000003ad: 	movl	%ecx, 0x1d0(%rsp)
    000003b4: 	leaq	(%rbx,%rdi), %rcx
    000003b8: 	movq	%rcx, 0x1e0(%rsp)
    000003c0: 	leal	0xc(%rax), %ecx
    000003c3: 	movslq	%ecx, %rdi
    000003c6: 	movl	%ecx, 0x1ec(%rsp)
    000003cd: 	leal	0xd(%rax), %ecx
    000003d0: 	addl	$0xe, %eax
    000003d3: 	addq	%rbx, %rdi
    000003d6: 	movl	%ecx, 0x22c(%rsp)
    000003dd: 	movq	%rdi, 0x220(%rsp)
    000003e5: 	movslq	%ecx, %rdi
    000003e8: 	leaq	(%rbx,%rdi), %rcx
    000003ec: 	movl	%eax, 0x258(%rsp)
    000003f3: 	movl	%ebp, %edi
    000003f5: 	cltq
    000003f7: 	subl	%r12d, %edi
    000003fa: 	addq	%rbx, %rax
    000003fd: 	movq	%rcx, 0x248(%rsp)
    00000405: 	movslq	%r12d, %rcx
    00000408: 	movq	%rax, 0x268(%rsp)
    00000410: 	movl	%edi, %eax
    00000412: 	leaq	(%rbx,%rcx), %r8
    00000416: 	addq	%rcx, %rax
    00000419: 	movl	%edi, 0x2c(%rsp)
    0000041d: 	addq	%rbx, %rax
    00000420: 	movq	%rcx, 0x1f8(%rsp)
    00000428: 	cmpq	%rsi, %rax
    0000042b: 	movq	%r8, 0x10(%rsp)
    00000430: 	setbe	%al
    00000433: 	cmpq	%rdx, %r8
    00000436: 	setae	%dl
    00000439: 	orl	%edx, %eax
    0000043b: 	leal	-0x1(%rdi), %edx
    0000043e: 	cmpl	$0xe, %edx
    00000441: 	seta	%dl
    00000444: 	xorl	%r14d, %r14d
    00000447: 	andl	%edx, %eax
    00000449: 	movb	%al, 0x29(%rsp)
    0000044d: 	movl	%edi, %eax
    0000044f: 	andl	$-0x10, %edi
    00000452: 	shrl	$0x4, %eax
    00000455: 	movl	%edi, 0x30(%rsp)
    00000459: 	subl	$0x1, %eax
    0000045c: 	shlq	$0x4, %rax
    00000460: 	leaq	0x10(%r8,%rax), %r13
    00000465: 	leal	(%r12,%rdi), %eax
    00000469: 	movslq	%eax, %rdx
    0000046c: 	leal	0x1(%rax), %esi
    0000046f: 	leal	0x3(%rax), %edi
    00000472: 	addq	%rbx, %rdx
    00000475: 	movl	%esi, 0x4c(%rsp)
    00000479: 	leal	0x5(%rax), %ecx
    0000047c: 	movq	%rdx, 0x40(%rsp)
    00000481: 	movslq	%esi, %rdx
    00000484: 	leaq	(%rbx,%rdx), %rsi
    00000488: 	leal	0x2(%rax), %edx
    0000048b: 	movl	%edi, 0x94(%rsp)
    00000492: 	movl	%edx, 0x78(%rsp)
    00000496: 	movslq	%edx, %rdx
    00000499: 	addq	%rbx, %rdx
    0000049c: 	movq	%rsi, 0x68(%rsp)
    000004a1: 	movq	%rdx, 0x88(%rsp)
    000004a9: 	movslq	%edi, %rdx
    000004ac: 	leal	0x7(%rax), %edi
    000004af: 	leaq	(%rbx,%rdx), %rsi
    000004b3: 	movl	%ecx, 0xdc(%rsp)
    000004ba: 	movq	%rsi, 0xb0(%rsp)
    000004c2: 	leal	0x4(%rax), %esi
    000004c5: 	movslq	%esi, %rdx
    000004c8: 	movl	%esi, 0xc0(%rsp)
    000004cf: 	addq	%rbx, %rdx
    000004d2: 	movl	%edi, 0x124(%rsp)
    000004d9: 	movq	%rdx, 0xd0(%rsp)
    000004e1: 	movslq	%ecx, %rdx
    000004e4: 	leal	0x9(%rax), %ecx
    000004e7: 	leaq	(%rbx,%rdx), %rsi
    000004eb: 	leal	0x6(%rax), %edx
    000004ee: 	movl	%ecx, 0x16c(%rsp)
    000004f5: 	movl	%edx, 0x108(%rsp)
    000004fc: 	movslq	%edx, %rdx
    000004ff: 	addq	%rbx, %rdx
    00000502: 	movq	%rsi, 0xf8(%rsp)
    0000050a: 	movq	%rdx, 0x118(%rsp)
    00000512: 	movslq	%edi, %rdx
    00000515: 	leal	0xb(%rax), %edi
    00000518: 	leaq	(%rbx,%rdx), %rsi
    0000051c: 	movl	%edi, 0x1bc(%rsp)
    00000523: 	movq	%rsi, 0x140(%rsp)
    0000052b: 	leal	0x8(%rax), %esi
    0000052e: 	movslq	%esi, %rdx
    00000531: 	movl	%esi, 0x150(%rsp)
    00000538: 	addq	%rbx, %rdx
    0000053b: 	movq	%rdx, 0x160(%rsp)
    00000543: 	movslq	%ecx, %rdx
    00000546: 	leal	0xd(%rax), %ecx
    00000549: 	leaq	(%rbx,%rdx), %rsi
    0000054d: 	leal	0xa(%rax), %edx
    00000550: 	movl	%edx, 0x198(%rsp)
    00000557: 	movslq	%edx, %rdx
    0000055a: 	addq	%rbx, %rdx
    0000055d: 	movq	%rsi, 0x188(%rsp)
    00000565: 	movq	%rdx, 0x1b0(%rsp)
    0000056d: 	movslq	%edi, %rdx
    00000570: 	movq	%rbx, %rdi
    00000573: 	leaq	(%rbx,%rdx), %rsi
    00000577: 	movq	%rsi, 0x1d8(%rsp)
    0000057f: 	leal	0xc(%rax), %esi
    00000582: 	addl	$0xe, %eax
    00000585: 	movslq	%esi, %rdx
    00000588: 	movl	%eax, 0x244(%rsp)
    0000058f: 	cltq
    00000591: 	addq	%rbx, %rdx
    00000594: 	addq	%rbx, %rax
    00000597: 	movl	%esi, 0x1e8(%rsp)
    0000059e: 	movq	%rdx, 0x218(%rsp)
    000005a6: 	movslq	%ecx, %rdx
    000005a9: 	leaq	(%rbx,%rdx), %rsi
    000005ad: 	movq	%rax, 0x260(%rsp)
    000005b5: 	movl	%r14d, %ebx
    000005b8: 	movq	%r13, %r14
    000005bb: 	movq	%rsi, 0x238(%rsp)
    000005c3: 	movq	%r10, %r13
    000005c6: 	movl	%ecx, 0x228(%rsp)
    000005cd: 	movl	%ebp, %ecx
    000005cf: 	movq	%r9, %rbp
    000005d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1870:
    000005d8: 	movq	0x8(%rsp), %rdx
    000005dd: 	xorl	%esi, %esi
    000005df: 	movl	%ecx, (%rsp)
    000005e2: 	callq	memset@PLT # Offset: 1506
    000005e7: 	cmpl	%r15d, 0x4(%rsp)
    000005ec: 	movdqa	DATAat0x36f20(%rip), %xmm2
    000005f4: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005fc: 	movl	(%rsp), %ecx
    000005ff: 	movq	%rax, %rdi
    00000602: 	jge	.Ltmp1861 # Offset: 1538
    00000608: 	cmpb	$0x0, 0x2b(%rsp)
    0000060d: 	je	.Ltmp1862 # Offset: 1549
    00000613: 	movsd	init_value(%rip), %xmm1
    0000061b: 	movq	0x20(%rsp), %rax
    00000620: 	unpcklpd	%xmm1, %xmm1
    00000624: 	cvttpd2dq	%xmm1, %xmm1
    00000628: 	punpcklqdq	%xmm1, %xmm1
    0000062c: 	movdqa	%xmm1, %xmm4
    00000630: 	punpckhwd	%xmm1, %xmm4
    00000634: 	nopl	(%rax) # Size: 4
.Ltmp1863:
    00000638: 	movdqa	%xmm1, %xmm0
    0000063c: 	addq	$0x10, %rax
    00000640: 	punpcklwd	%xmm1, %xmm0
    00000644: 	movdqa	%xmm0, %xmm5
    00000648: 	punpcklwd	%xmm4, %xmm0
    0000064c: 	punpckhwd	%xmm4, %xmm5
    00000650: 	punpcklwd	%xmm5, %xmm0
    00000654: 	pand	%xmm2, %xmm0
    00000658: 	packuswb	%xmm0, %xmm0
    0000065c: 	movups	%xmm0, -0x10(%rax)
    00000660: 	cmpq	%r13, %rax
    00000663: 	jne	.Ltmp1863 # Offset: 1635
    00000665: 	movl	0x48(%rsp), %esi
    00000669: 	cmpl	%esi, 0x3c(%rsp)
    0000066d: 	je	.Ltmp1861 # Offset: 1645
    00000673: 	cvttsd2si	init_value(%rip), %eax
    0000067b: 	movq	0x58(%rsp), %rsi
    00000680: 	movb	%al, (%rsi)
    00000682: 	cmpl	0x64(%rsp), %r15d
    00000687: 	jle	.Ltmp1861 # Offset: 1671
    0000068d: 	cvttsd2si	init_value(%rip), %eax
    00000695: 	movq	0x80(%rsp), %rsi
    0000069d: 	movb	%al, (%rsi)
    0000069f: 	cmpl	0x90(%rsp), %r15d
    000006a7: 	jle	.Ltmp1861 # Offset: 1703
    000006ad: 	cvttsd2si	init_value(%rip), %eax
    000006b5: 	movq	0xa0(%rsp), %rsi
    000006bd: 	movb	%al, (%rsi)
    000006bf: 	cmpl	0xac(%rsp), %r15d
    000006c7: 	jle	.Ltmp1861 # Offset: 1735
    000006cd: 	cvttsd2si	init_value(%rip), %eax
    000006d5: 	movq	0xc8(%rsp), %rsi
    000006dd: 	movb	%al, (%rsi)
    000006df: 	cmpl	0xd8(%rsp), %r15d
    000006e7: 	jle	.Ltmp1861 # Offset: 1767
    000006ed: 	cvttsd2si	init_value(%rip), %eax
    000006f5: 	movq	0xe8(%rsp), %rdx
    000006fd: 	movb	%al, (%rdx)
    000006ff: 	cmpl	0xf4(%rsp), %r15d
    00000707: 	jle	.Ltmp1861 # Offset: 1799
    0000070d: 	cvttsd2si	init_value(%rip), %eax
    00000715: 	movq	0x110(%rsp), %rsi
    0000071d: 	movb	%al, (%rsi)
    0000071f: 	cmpl	0x120(%rsp), %r15d
    00000727: 	jle	.Ltmp1861 # Offset: 1831
    0000072d: 	cvttsd2si	init_value(%rip), %eax
    00000735: 	movq	0x130(%rsp), %rsi
    0000073d: 	movb	%al, (%rsi)
    0000073f: 	cmpl	0x13c(%rsp), %r15d
    00000747: 	jle	.Ltmp1861 # Offset: 1863
    0000074d: 	cvttsd2si	init_value(%rip), %eax
    00000755: 	movq	0x158(%rsp), %rdx
    0000075d: 	movb	%al, (%rdx)
    0000075f: 	cmpl	0x168(%rsp), %r15d
    00000767: 	jle	.Ltmp1861 # Offset: 1895
    0000076d: 	cvttsd2si	init_value(%rip), %eax
    00000775: 	movq	0x178(%rsp), %rsi
    0000077d: 	movb	%al, (%rsi)
    0000077f: 	cmpl	0x184(%rsp), %r15d
    00000787: 	jle	.Ltmp1861 # Offset: 1927
    0000078d: 	cvttsd2si	init_value(%rip), %eax
    00000795: 	movq	0x1a0(%rsp), %rsi
    0000079d: 	movb	%al, (%rsi)
    0000079f: 	cmpl	0x1b8(%rsp), %r15d
    000007a7: 	jle	.Ltmp1861 # Offset: 1959
    000007ad: 	cvttsd2si	init_value(%rip), %eax
    000007b5: 	movq	0x1c8(%rsp), %rdx
    000007bd: 	movb	%al, (%rdx)
    000007bf: 	cmpl	0x1d4(%rsp), %r15d
    000007c7: 	jle	.Ltmp1861 # Offset: 1991
    000007c9: 	cvttsd2si	init_value(%rip), %eax
    000007d1: 	movq	0x1f0(%rsp), %rdx
    000007d9: 	movb	%al, (%rdx)
    000007db: 	cmpl	0x208(%rsp), %r15d
    000007e3: 	jle	.Ltmp1861 # Offset: 2019
    000007e5: 	cvttsd2si	init_value(%rip), %eax
    000007ed: 	movq	0x230(%rsp), %rdx
    000007f5: 	movb	%al, (%rdx)
    000007f7: 	cmpl	0x240(%rsp), %r15d
    000007ff: 	jle	.Ltmp1861 # Offset: 2047
    00000801: 	cvttsd2si	init_value(%rip), %eax
    00000809: 	movq	0x250(%rsp), %rdx
    00000811: 	movb	%al, (%rdx)
    00000813: 	cmpl	0x25c(%rsp), %r15d
    0000081b: 	jle	.Ltmp1861 # Offset: 2075
    0000081d: 	cvttsd2si	init_value(%rip), %eax
    00000825: 	movq	0x270(%rsp), %rsi
    0000082d: 	movb	%al, (%rsi)
    0000082f: 	nop # Size: 1
.Ltmp1861:
    00000830: 	cmpl	%r12d, %r15d
    00000833: 	jge	.Ltmp1864 # Offset: 2099
    00000839: 	cmpb	$0x0, 0x2a(%rsp)
    0000083e: 	je	.Ltmp1865 # Offset: 2110
    00000844: 	movsd	init_value(%rip), %xmm1
    0000084c: 	movq	0x18(%rsp), %rax
    00000851: 	unpcklpd	%xmm1, %xmm1
    00000855: 	cvttpd2dq	%xmm1, %xmm1
    00000859: 	punpcklqdq	%xmm1, %xmm1
    0000085d: 	movdqa	%xmm1, %xmm4
    00000861: 	punpckhwd	%xmm1, %xmm4
    00000865: 	nopl	(%rax) # Size: 3
.Ltmp1866:
    00000868: 	movdqa	%xmm1, %xmm0
    0000086c: 	addq	$0x10, %rax
    00000870: 	punpcklwd	%xmm1, %xmm0
    00000874: 	movdqa	%xmm0, %xmm5
    00000878: 	punpcklwd	%xmm4, %xmm0
    0000087c: 	punpckhwd	%xmm4, %xmm5
    00000880: 	punpcklwd	%xmm5, %xmm0
    00000884: 	pand	%xmm2, %xmm0
    00000888: 	packuswb	%xmm0, %xmm0
    0000088c: 	paddb	%xmm3, %xmm0
    00000890: 	movups	%xmm0, -0x10(%rax)
    00000894: 	cmpq	%rax, %rbp
    00000897: 	jne	.Ltmp1866 # Offset: 2199
    00000899: 	movl	0x38(%rsp), %esi
    0000089d: 	cmpl	%esi, 0x34(%rsp)
    000008a1: 	je	.Ltmp1864 # Offset: 2209
    000008a7: 	cvttsd2si	init_value(%rip), %eax
    000008af: 	movq	0x50(%rsp), %rsi
    000008b4: 	addl	$0x1, %eax
    000008b7: 	movb	%al, (%rsi)
    000008b9: 	cmpl	0x60(%rsp), %r12d
    000008be: 	jle	.Ltmp1864 # Offset: 2238
    000008c4: 	cvttsd2si	init_value(%rip), %eax
    000008cc: 	movq	0x70(%rsp), %rsi
    000008d1: 	addl	$0x1, %eax
    000008d4: 	movb	%al, (%rsi)
    000008d6: 	cmpl	0x7c(%rsp), %r12d
    000008db: 	jle	.Ltmp1864 # Offset: 2267
    000008e1: 	cvttsd2si	init_value(%rip), %eax
    000008e9: 	movq	0x98(%rsp), %rsi
    000008f1: 	addl	$0x1, %eax
    000008f4: 	movb	%al, (%rsi)
    000008f6: 	cmpl	0xa8(%rsp), %r12d
    000008fe: 	jle	.Ltmp1864 # Offset: 2302
    00000904: 	cvttsd2si	init_value(%rip), %eax
    0000090c: 	movq	0xb8(%rsp), %rdx
    00000914: 	addl	$0x1, %eax
    00000917: 	movb	%al, (%rdx)
    00000919: 	cmpl	0xc4(%rsp), %r12d
    00000921: 	jle	.Ltmp1864 # Offset: 2337
    00000927: 	cvttsd2si	init_value(%rip), %eax
    0000092f: 	movq	0xe0(%rsp), %rsi
    00000937: 	addl	$0x1, %eax
    0000093a: 	movb	%al, (%rsi)
    0000093c: 	cmpl	0xf0(%rsp), %r12d
    00000944: 	jle	.Ltmp1864 # Offset: 2372
    0000094a: 	cvttsd2si	init_value(%rip), %eax
    00000952: 	movq	0x100(%rsp), %rsi
    0000095a: 	addl	$0x1, %eax
    0000095d: 	movb	%al, (%rsi)
    0000095f: 	cmpl	0x10c(%rsp), %r12d
    00000967: 	jle	.Ltmp1864 # Offset: 2407
    0000096d: 	cvttsd2si	init_value(%rip), %eax
    00000975: 	movq	0x128(%rsp), %rdx
    0000097d: 	addl	$0x1, %eax
    00000980: 	movb	%al, (%rdx)
    00000982: 	cmpl	0x138(%rsp), %r12d
    0000098a: 	jle	.Ltmp1864 # Offset: 2442
    00000990: 	cvttsd2si	init_value(%rip), %eax
    00000998: 	movq	0x148(%rsp), %rdx
    000009a0: 	addl	$0x1, %eax
    000009a3: 	movb	%al, (%rdx)
    000009a5: 	cmpl	0x154(%rsp), %r12d
    000009ad: 	jle	.Ltmp1864 # Offset: 2477
    000009b3: 	cvttsd2si	init_value(%rip), %eax
    000009bb: 	movq	0x170(%rsp), %rsi
    000009c3: 	addl	$0x1, %eax
    000009c6: 	movb	%al, (%rsi)
    000009c8: 	cmpl	0x180(%rsp), %r12d
    000009d0: 	jle	.Ltmp1864 # Offset: 2512
    000009d6: 	cvttsd2si	init_value(%rip), %eax
    000009de: 	movq	0x190(%rsp), %rdx
    000009e6: 	addl	$0x1, %eax
    000009e9: 	movb	%al, (%rdx)
    000009eb: 	cmpl	0x19c(%rsp), %r12d
    000009f3: 	jle	.Ltmp1864 # Offset: 2547
    000009f9: 	cvttsd2si	init_value(%rip), %eax
    00000a01: 	movq	0x1c0(%rsp), %rdx
    00000a09: 	addl	$0x1, %eax
    00000a0c: 	movb	%al, (%rdx)
    00000a0e: 	cmpl	0x1d0(%rsp), %r12d
    00000a16: 	jle	.Ltmp1864 # Offset: 2582
    00000a18: 	cvttsd2si	init_value(%rip), %eax
    00000a20: 	movq	0x1e0(%rsp), %rsi
    00000a28: 	addl	$0x1, %eax
    00000a2b: 	movb	%al, (%rsi)
    00000a2d: 	cmpl	0x1ec(%rsp), %r12d
    00000a35: 	jle	.Ltmp1864 # Offset: 2613
    00000a37: 	cvttsd2si	init_value(%rip), %eax
    00000a3f: 	movq	0x220(%rsp), %rdx
    00000a47: 	addl	$0x1, %eax
    00000a4a: 	movb	%al, (%rdx)
    00000a4c: 	cmpl	0x22c(%rsp), %r12d
    00000a54: 	jle	.Ltmp1864 # Offset: 2644
    00000a56: 	cvttsd2si	init_value(%rip), %eax
    00000a5e: 	movq	0x248(%rsp), %rsi
    00000a66: 	addl	$0x1, %eax
    00000a69: 	movb	%al, (%rsi)
    00000a6b: 	cmpl	0x258(%rsp), %r12d
    00000a73: 	jle	.Ltmp1864 # Offset: 2675
    00000a75: 	cvttsd2si	init_value(%rip), %eax
    00000a7d: 	movq	0x268(%rsp), %rsi
    00000a85: 	addl	$0x1, %eax
    00000a88: 	movb	%al, (%rsi)
    00000a8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1864:
    00000a90: 	cmpl	%r12d, %ecx
    00000a93: 	jle	.Ltmp1867 # Offset: 2707
    00000a99: 	cmpb	$0x0, 0x29(%rsp)
    00000a9e: 	je	.Ltmp1868 # Offset: 2718
    00000aa4: 	movsd	init_value(%rip), %xmm1
    00000aac: 	movq	0x10(%rsp), %rax
    00000ab1: 	movdqa	DATAat0x36f40(%rip), %xmm6
    00000ab9: 	unpcklpd	%xmm1, %xmm1
    00000abd: 	cvttpd2dq	%xmm1, %xmm1
    00000ac1: 	punpcklqdq	%xmm1, %xmm1
    00000ac5: 	movdqa	%xmm1, %xmm4
    00000ac9: 	punpckhwd	%xmm1, %xmm4
    00000acd: 	nopl	(%rax) # Size: 3
.Ltmp1869:
    00000ad0: 	movdqa	%xmm1, %xmm0
    00000ad4: 	addq	$0x10, %rax
    00000ad8: 	punpcklwd	%xmm1, %xmm0
    00000adc: 	movdqa	%xmm0, %xmm5
    00000ae0: 	punpcklwd	%xmm4, %xmm0
    00000ae4: 	punpckhwd	%xmm4, %xmm5
    00000ae8: 	punpcklwd	%xmm5, %xmm0
    00000aec: 	pand	%xmm2, %xmm0
    00000af0: 	packuswb	%xmm0, %xmm0
    00000af4: 	paddb	%xmm6, %xmm0
    00000af8: 	movups	%xmm0, -0x10(%rax)
    00000afc: 	cmpq	%r14, %rax
    00000aff: 	jne	.Ltmp1869 # Offset: 2815
    00000b01: 	movl	0x30(%rsp), %esi
    00000b05: 	cmpl	%esi, 0x2c(%rsp)
    00000b09: 	je	.Ltmp1867 # Offset: 2825
    00000b0f: 	cvttsd2si	init_value(%rip), %eax
    00000b17: 	movq	0x40(%rsp), %rsi
    00000b1c: 	addl	$0x2, %eax
    00000b1f: 	movb	%al, (%rsi)
    00000b21: 	cmpl	0x4c(%rsp), %ecx
    00000b25: 	jle	.Ltmp1867 # Offset: 2853
    00000b2b: 	cvttsd2si	init_value(%rip), %eax
    00000b33: 	movq	0x68(%rsp), %rsi
    00000b38: 	addl	$0x2, %eax
    00000b3b: 	movb	%al, (%rsi)
    00000b3d: 	cmpl	0x78(%rsp), %ecx
    00000b41: 	jle	.Ltmp1867 # Offset: 2881
    00000b47: 	cvttsd2si	init_value(%rip), %eax
    00000b4f: 	movq	0x88(%rsp), %rsi
    00000b57: 	addl	$0x2, %eax
    00000b5a: 	movb	%al, (%rsi)
    00000b5c: 	cmpl	0x94(%rsp), %ecx
    00000b63: 	jle	.Ltmp1867 # Offset: 2915
    00000b69: 	cvttsd2si	init_value(%rip), %eax
    00000b71: 	movq	0xb0(%rsp), %rsi
    00000b79: 	addl	$0x2, %eax
    00000b7c: 	movb	%al, (%rsi)
    00000b7e: 	cmpl	0xc0(%rsp), %ecx
    00000b85: 	jle	.Ltmp1867 # Offset: 2949
    00000b8b: 	cvttsd2si	init_value(%rip), %eax
    00000b93: 	movq	0xd0(%rsp), %rdx
    00000b9b: 	addl	$0x2, %eax
    00000b9e: 	movb	%al, (%rdx)
    00000ba0: 	cmpl	0xdc(%rsp), %ecx
    00000ba7: 	jle	.Ltmp1867 # Offset: 2983
    00000bad: 	cvttsd2si	init_value(%rip), %eax
    00000bb5: 	movq	0xf8(%rsp), %rdx
    00000bbd: 	addl	$0x2, %eax
    00000bc0: 	movb	%al, (%rdx)
    00000bc2: 	cmpl	0x108(%rsp), %ecx
    00000bc9: 	jle	.Ltmp1867 # Offset: 3017
    00000bcf: 	cvttsd2si	init_value(%rip), %eax
    00000bd7: 	movq	0x118(%rsp), %rsi
    00000bdf: 	addl	$0x2, %eax
    00000be2: 	movb	%al, (%rsi)
    00000be4: 	cmpl	0x124(%rsp), %ecx
    00000beb: 	jle	.Ltmp1867 # Offset: 3051
    00000bf1: 	cvttsd2si	init_value(%rip), %eax
    00000bf9: 	movq	0x140(%rsp), %rsi
    00000c01: 	addl	$0x2, %eax
    00000c04: 	movb	%al, (%rsi)
    00000c06: 	cmpl	0x150(%rsp), %ecx
    00000c0d: 	jle	.Ltmp1867 # Offset: 3085
    00000c13: 	cvttsd2si	init_value(%rip), %eax
    00000c1b: 	movq	0x160(%rsp), %rdx
    00000c23: 	addl	$0x2, %eax
    00000c26: 	movb	%al, (%rdx)
    00000c28: 	cmpl	0x16c(%rsp), %ecx
    00000c2f: 	jle	.Ltmp1867 # Offset: 3119
    00000c35: 	cvttsd2si	init_value(%rip), %eax
    00000c3d: 	movq	0x188(%rsp), %rsi
    00000c45: 	addl	$0x2, %eax
    00000c48: 	movb	%al, (%rsi)
    00000c4a: 	cmpl	0x198(%rsp), %ecx
    00000c51: 	jle	.Ltmp1867 # Offset: 3153
    00000c57: 	cvttsd2si	init_value(%rip), %eax
    00000c5f: 	movq	0x1b0(%rsp), %rsi
    00000c67: 	addl	$0x2, %eax
    00000c6a: 	movb	%al, (%rsi)
    00000c6c: 	cmpl	0x1bc(%rsp), %ecx
    00000c73: 	jle	.Ltmp1867 # Offset: 3187
    00000c75: 	cvttsd2si	init_value(%rip), %eax
    00000c7d: 	movq	0x1d8(%rsp), %rdx
    00000c85: 	addl	$0x2, %eax
    00000c88: 	movb	%al, (%rdx)
    00000c8a: 	cmpl	0x1e8(%rsp), %ecx
    00000c91: 	jle	.Ltmp1867 # Offset: 3217
    00000c93: 	cvttsd2si	init_value(%rip), %eax
    00000c9b: 	movq	0x218(%rsp), %rsi
    00000ca3: 	addl	$0x2, %eax
    00000ca6: 	movb	%al, (%rsi)
    00000ca8: 	cmpl	0x228(%rsp), %ecx
    00000caf: 	jle	.Ltmp1867 # Offset: 3247
    00000cb1: 	cvttsd2si	init_value(%rip), %eax
    00000cb9: 	movq	0x238(%rsp), %rdx
    00000cc1: 	addl	$0x2, %eax
    00000cc4: 	movb	%al, (%rdx)
    00000cc6: 	cmpl	0x244(%rsp), %ecx
    00000ccd: 	jle	.Ltmp1867 # Offset: 3277
    00000ccf: 	cvttsd2si	init_value(%rip), %eax
    00000cd7: 	movq	0x260(%rsp), %rsi
    00000cdf: 	addl	$0x2, %eax
    00000ce2: 	movb	%al, (%rsi)
    00000ce4: 	nopl	(%rax) # Size: 4
.Ltmp1867:
    00000ce8: 	addl	$0x1, %ebx
    00000ceb: 	cmpl	%ebx, iterations(%rip)
    00000cf1: 	jg	.Ltmp1870 # Offset: 3313
    00000cf7: 	movq	%rdi, %rbx
    00000cfa: 	movl	%ecx, %ebp
.Ltmp1860:
    00000cfc: 	callq	clock@PLT # Offset: 3324
    00000d01: 	movq	0x1a8(%rsp), %rdi
    00000d09: 	pxor	%xmm0, %xmm0
    00000d0d: 	xorl	%r12d, %r12d
    00000d10: 	movq	%rax, end_time(%rip)
    00000d17: 	subq	start_time(%rip), %rax
    00000d1e: 	cvtsi2sd	%rax, %xmm0
    00000d23: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000d2b: 	callq	_Z13record_resultdPKc # Offset: 3371
    00000d30: 	testl	%ebp, %ebp
    00000d32: 	jle	.Ltmp1871 # Offset: 3378
    00000d38: 	leal	-0x1(%rbp), %eax
    00000d3b: 	cmpl	$0xe, %eax
    00000d3e: 	jbe	.Ltmp1872 # Offset: 3390
    00000d44: 	movl	%ebp, %edx
    00000d46: 	movq	%rbx, %rax
    00000d49: 	pxor	%xmm0, %xmm0
    00000d4d: 	shrl	$0x4, %edx
    00000d50: 	subl	$0x1, %edx
    00000d53: 	shlq	$0x4, %rdx
    00000d57: 	leaq	0x10(%rbx,%rdx), %rdx
    00000d5c: 	nopl	(%rax) # Size: 4
.Ltmp1873:
    00000d60: 	movdqu	(%rax), %xmm7
    00000d64: 	addq	$0x10, %rax
    00000d68: 	paddb	%xmm7, %xmm0
    00000d6c: 	cmpq	%rax, %rdx
    00000d6f: 	jne	.Ltmp1873 # Offset: 3439
    00000d71: 	movdqa	%xmm0, %xmm1
    00000d75: 	movl	%ebp, %edx
    00000d77: 	psrldq	$0x8, %xmm1
    00000d7c: 	andl	$-0x10, %edx
    00000d7f: 	paddb	%xmm1, %xmm0
    00000d83: 	pxor	%xmm1, %xmm1
    00000d87: 	movl	%edx, %eax
    00000d89: 	psadbw	%xmm1, %xmm0
    00000d8d: 	movd	%xmm0, %r12d
    00000d92: 	cmpl	%ebp, %edx
    00000d94: 	je	.Ltmp1871 # Offset: 3476
.Ltmp1882:
    00000d9a: 	movl	%ebp, %ecx
    00000d9c: 	subl	%edx, %ecx
    00000d9e: 	leal	-0x1(%rcx), %esi
    00000da1: 	cmpl	$0x6, %esi
    00000da4: 	jbe	.Ltmp1874 # Offset: 3492
    00000da6: 	movq	(%rbx,%rdx), %xmm1
    00000dab: 	pxor	%xmm0, %xmm0
    00000daf: 	movdqa	%xmm1, %xmm7
    00000db3: 	psadbw	%xmm0, %xmm7
    00000db7: 	movq	%xmm7, 0x278(%rsp)
    00000dc0: 	movq	%xmm7, %rdx
    00000dc5: 	movl	%edx, %esi
    00000dc7: 	movl	%ecx, %edx
    00000dc9: 	andl	$-0x8, %edx
    00000dcc: 	addl	%esi, %r12d
    00000dcf: 	addl	%edx, %eax
    00000dd1: 	cmpl	%edx, %ecx
    00000dd3: 	je	.Ltmp1871 # Offset: 3539
.Ltmp1874:
    00000dd5: 	movslq	%eax, %rdx
    00000dd8: 	addb	(%rbx,%rdx), %r12b
    00000ddc: 	leal	0x1(%rax), %edx
    00000ddf: 	cmpl	%edx, %ebp
    00000de1: 	jle	.Ltmp1871 # Offset: 3553
    00000de3: 	movslq	%edx, %rdx
    00000de6: 	addb	(%rbx,%rdx), %r12b
    00000dea: 	leal	0x2(%rax), %edx
    00000ded: 	cmpl	%edx, %ebp
    00000def: 	jle	.Ltmp1871 # Offset: 3567
    00000df1: 	movslq	%edx, %rdx
    00000df4: 	addb	(%rbx,%rdx), %r12b
    00000df8: 	leal	0x3(%rax), %edx
    00000dfb: 	cmpl	%edx, %ebp
    00000dfd: 	jle	.Ltmp1871 # Offset: 3581
    00000dff: 	movslq	%edx, %rdx
    00000e02: 	addb	(%rbx,%rdx), %r12b
    00000e06: 	leal	0x4(%rax), %edx
    00000e09: 	cmpl	%ebp, %edx
    00000e0b: 	jge	.Ltmp1871 # Offset: 3595
    00000e0d: 	movslq	%edx, %rdx
    00000e10: 	addb	(%rbx,%rdx), %r12b
    00000e14: 	leal	0x5(%rax), %edx
    00000e17: 	cmpl	%ebp, %edx
    00000e19: 	jge	.Ltmp1871 # Offset: 3609
    00000e1b: 	movslq	%edx, %rdx
    00000e1e: 	addl	$0x6, %eax
    00000e21: 	addb	(%rbx,%rdx), %r12b
    00000e25: 	cmpl	%eax, %ebp
    00000e27: 	jle	.Ltmp1871 # Offset: 3623
    00000e29: 	cltq
    00000e2b: 	addb	(%rbx,%rax), %r12b
.Ltmp1871:
    00000e2f: 	movsd	init_value(%rip), %xmm0
    00000e37: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000e3f: 	addsd	%xmm0, %xmm1
    00000e43: 	cvttsd2si	%xmm1, %eax
    00000e47: 	movsd	DATAat0x37030(%rip), %xmm1
    00000e4f: 	addsd	%xmm0, %xmm1
    00000e53: 	cvttsd2si	%xmm1, %ebx
    00000e57: 	addl	%eax, %ebx
    00000e59: 	cvttsd2si	%xmm0, %eax
    00000e5d: 	addl	%eax, %ebx
    00000e5f: 	shll	$0x7, %ebx
    00000e62: 	cmpb	%r12b, %bl
    00000e65: 	jne	.Ltmp1875 # Offset: 3685
    00000e6b: 	movq	0x288(%rsp), %rax
    00000e73: 	subq	%fs:0x28, %rax
    00000e7c: 	jne	.Ltmp1876 # Offset: 3708
    00000e82: 	addq	$0x298, %rsp
    00000e89: 	popq	%rbx
    00000e8a: 	popq	%rbp
    00000e8b: 	popq	%r12
    00000e8d: 	popq	%r13
    00000e8f: 	popq	%r14
    00000e91: 	popq	%r15
    00000e93: 	retq # Offset: 3731
    00000e94: 	nopl	(%rax) # Size: 4
.Ltmp1868:
    00000e98: 	movq	0x1f8(%rsp), %rax
    00000ea0: 	leal	-0x1(%rcx), %esi
    00000ea3: 	subl	%r12d, %esi
    00000ea6: 	leaq	0x1(%rdi,%rax), %rax
    00000eab: 	addq	%rax, %rsi
    00000eae: 	movq	0x10(%rsp), %rax
    00000eb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1877:
    00000eb8: 	cvttsd2si	init_value(%rip), %edx
    00000ec0: 	addq	$0x1, %rax
    00000ec4: 	addl	$0x2, %edx
    00000ec7: 	movb	%dl, -0x1(%rax)
    00000eca: 	cmpq	%rsi, %rax
    00000ecd: 	jne	.Ltmp1877 # Offset: 3789
    00000ecf: 	jmp	.Ltmp1867 # Offset: 3791
    00000ed4: 	nopl	(%rax) # Size: 4
.Ltmp1862:
    00000ed8: 	movq	0x210(%rsp), %rax
    00000ee0: 	leaq	0x1(%rdi,%rax), %rsi
    00000ee5: 	movl	0x20c(%rsp), %eax
    00000eec: 	addq	%rax, %rsi
    00000eef: 	movq	0x20(%rsp), %rax
    00000ef4: 	nopl	(%rax) # Size: 4
.Ltmp1878:
    00000ef8: 	cvttsd2si	init_value(%rip), %edx
    00000f00: 	addq	$0x1, %rax
    00000f04: 	movb	%dl, -0x1(%rax)
    00000f07: 	cmpq	%rsi, %rax
    00000f0a: 	jne	.Ltmp1878 # Offset: 3850
    00000f0c: 	jmp	.Ltmp1861 # Offset: 3852
    00000f11: 	nopl	(%rax) # Size: 7
.Ltmp1865:
    00000f18: 	movq	0x200(%rsp), %rax
    00000f20: 	leaq	0x1(%rdi,%rax), %rsi
    00000f25: 	leal	-0x1(%r12), %eax
    00000f2a: 	subl	%r15d, %eax
    00000f2d: 	addq	%rax, %rsi
    00000f30: 	movq	0x18(%rsp), %rax
    00000f35: 	nopl	(%rax) # Size: 3
.Ltmp1879:
    00000f38: 	cvttsd2si	init_value(%rip), %edx
    00000f40: 	addq	$0x1, %rax
    00000f44: 	addl	$0x1, %edx
    00000f47: 	movb	%dl, -0x1(%rax)
    00000f4a: 	cmpq	%rsi, %rax
    00000f4d: 	jne	.Ltmp1879 # Offset: 3917
    00000f4f: 	jmp	.Ltmp1864 # Offset: 3919
.Ltmp1875:
    00000f54: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000f5b: 	movl	$0x5, %edx
    00000f60: 	leaq	DATAat0x35004(%rip), %rsi
    00000f67: 	movq	%rbp, %rdi
    00000f6a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3946
    00000f6f: 	cmpq	$0x0, 0x1a8(%rsp)
    00000f78: 	je	.Ltmp1880 # Offset: 3960
    00000f7e: 	movq	0x1a8(%rsp), %r14
    00000f86: 	movq	%r14, %rdi
    00000f89: 	callq	strlen@PLT # Offset: 3977
    00000f8e: 	movq	%r14, %rsi
    00000f91: 	movq	%rbp, %rdi
    00000f94: 	movq	%rax, %rdx
    00000f97: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3991
.Ltmp1881:
    00000f9c: 	movq	%rbp, %rdi
    00000f9f: 	movl	$0xd, %edx
    00000fa4: 	leaq	DATAat0x3500a(%rip), %rsi
    00000fab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4011
    00000fb0: 	movb	%r12b, 0x287(%rsp)
    00000fb8: 	movq	%rbp, %rdi
    00000fbb: 	leaq	0x287(%rsp), %r12
    00000fc3: 	movl	$0x1, %edx
    00000fc8: 	movq	%r12, %rsi
    00000fcb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4043
    00000fd0: 	movl	$0xb, %edx
    00000fd5: 	leaq	DATAat0x35018(%rip), %rsi
    00000fdc: 	movq	%rax, %rbp
    00000fdf: 	movq	%rax, %rdi
    00000fe2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4066
    00000fe7: 	movq	%rbp, %rdi
    00000fea: 	movl	$0x1, %edx
    00000fef: 	movq	%r12, %rsi
    00000ff2: 	movb	%bl, 0x287(%rsp)
    00000ff9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4089
    00000ffe: 	movq	%rax, %rdi
    00001001: 	movq	0x288(%rsp), %rax
    00001009: 	subq	%fs:0x28, %rax
    00001012: 	jne	.Ltmp1876 # Offset: 4114
    00001014: 	addq	$0x298, %rsp
    0000101b: 	popq	%rbx
    0000101c: 	popq	%rbp
    0000101d: 	popq	%r12
    0000101f: 	popq	%r13
    00001021: 	popq	%r14
    00001023: 	popq	%r15
    00001025: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 4133
.Ltmp1880:
    0000102a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001031: 	movq	-0x18(%rax), %rdi
    00001035: 	addq	%rbp, %rdi
    00001038: 	movl	0x20(%rdi), %esi
    0000103b: 	orl	$0x1, %esi
    0000103e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4158
    00001043: 	jmp	.Ltmp1881 # Offset: 4163
.Ltmp1872:
    00001048: 	xorl	%edx, %edx
    0000104a: 	xorl	%r12d, %r12d
    0000104d: 	xorl	%eax, %eax
    0000104f: 	jmp	.Ltmp1882 # Offset: 4175
.Ltmp1876:
    00001054: 	callq	__stack_chk_fail@PLT # Offset: 4180
DWARF CFI Instructions:
    <empty>
End of Function "_Z36test_for_loop_bzero_partial4_replaceIhEvPT_iPKc"

Binary Function "_Z37test_for_loop_memset_partial4_replaceIhEvPT_iPKc" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x2ad40
  Size        : 0x1059
  MaxSize     : 0x1060
  Offset      : 0x2ad40
  Section     : .text
  Orc Section : .local.text._Z37test_for_loop_memset_partial4_replaceIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	leal	0x3(%rsi), %r13d
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movl	%esi, %ebp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x298, %rsp
    0000001e: 	movq	%rdx, 0x1a8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x288(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	testl	%esi, %esi
    0000003b: 	cmovnsl	%esi, %r13d
    0000003f: 	sarl	$0x2, %r13d
    00000043: 	movl	%r13d, 0x4(%rsp)
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1883 # Offset: 92
    00000062: 	movslq	0x4(%rsp), %r9
    00000067: 	movslq	%ebp, %rax
    0000006a: 	leaq	init_value(%rip), %rsi
    00000071: 	movq	%rax, 0x8(%rsp)
    00000076: 	leaq	0x8(%rsi), %rdx
    0000007a: 	leal	(%r9,%r9), %r15d
    0000007e: 	leaq	(%rbx,%r9), %r11
    00000082: 	movq	%r9, 0x210(%rsp)
    0000008a: 	movq	%r9, %rcx
    0000008d: 	movl	%r15d, %r8d
    00000090: 	movq	%r11, 0x20(%rsp)
    00000095: 	leal	(%r15,%r9), %r12d
    00000099: 	subl	%r9d, %r8d
    0000009c: 	movl	%r8d, %eax
    0000009f: 	leal	-0x1(%r8), %r10d
    000000a3: 	movl	%r8d, 0x3c(%rsp)
    000000a8: 	addq	%r9, %rax
    000000ab: 	movl	%r10d, 0x20c(%rsp)
    000000b3: 	addq	%rbx, %rax
    000000b6: 	cmpq	%rsi, %rax
    000000b9: 	setbe	%al
    000000bc: 	cmpq	%rdx, %r11
    000000bf: 	setae	%dil
    000000c3: 	orl	%edi, %eax
    000000c5: 	cmpl	$0xe, %r10d
    000000c9: 	seta	%dil
    000000cd: 	andl	%edi, %eax
    000000cf: 	movb	%al, 0x2b(%rsp)
    000000d3: 	movl	%r8d, %eax
    000000d6: 	andl	$-0x10, %r8d
    000000da: 	shrl	$0x4, %eax
    000000dd: 	movl	%r8d, 0x48(%rsp)
    000000e2: 	subl	$0x1, %eax
    000000e5: 	shlq	$0x4, %rax
    000000e9: 	leaq	0x10(%r11,%rax), %r10
    000000ee: 	movl	%r9d, %eax
    000000f1: 	addq	%r9, %r11
    000000f4: 	addl	%r8d, %eax
    000000f7: 	movslq	%eax, %rdi
    000000fa: 	addq	%rbx, %rdi
    000000fd: 	movq	%rdi, 0x58(%rsp)
    00000102: 	leal	0x1(%rax), %edi
    00000105: 	movl	%edi, 0x64(%rsp)
    00000109: 	movslq	%edi, %rdi
    0000010c: 	addq	%rbx, %rdi
    0000010f: 	movq	%rdi, 0x80(%rsp)
    00000117: 	leal	0x2(%rax), %edi
    0000011a: 	movl	%edi, 0x90(%rsp)
    00000121: 	movslq	%edi, %rdi
    00000124: 	addq	%rbx, %rdi
    00000127: 	movq	%rdi, 0xa0(%rsp)
    0000012f: 	leal	0x3(%rax), %edi
    00000132: 	movl	%edi, 0xac(%rsp)
    00000139: 	movslq	%edi, %rdi
    0000013c: 	addq	%rbx, %rdi
    0000013f: 	movq	%rdi, 0xc8(%rsp)
    00000147: 	leal	0x4(%rax), %edi
    0000014a: 	movl	%edi, 0xd8(%rsp)
    00000151: 	movslq	%edi, %rdi
    00000154: 	addq	%rbx, %rdi
    00000157: 	movq	%rdi, 0xe8(%rsp)
    0000015f: 	leal	0x5(%rax), %edi
    00000162: 	movl	%edi, 0xf4(%rsp)
    00000169: 	movslq	%edi, %rdi
    0000016c: 	addq	%rbx, %rdi
    0000016f: 	movq	%rdi, 0x110(%rsp)
    00000177: 	leal	0x6(%rax), %edi
    0000017a: 	movl	%edi, 0x120(%rsp)
    00000181: 	movslq	%edi, %rdi
    00000184: 	addq	%rbx, %rdi
    00000187: 	movq	%rdi, 0x130(%rsp)
    0000018f: 	leal	0x7(%rax), %edi
    00000192: 	movl	%edi, 0x13c(%rsp)
    00000199: 	movslq	%edi, %rdi
    0000019c: 	addq	%rbx, %rdi
    0000019f: 	movq	%rdi, 0x158(%rsp)
    000001a7: 	leal	0x8(%rax), %edi
    000001aa: 	movl	%edi, 0x168(%rsp)
    000001b1: 	movslq	%edi, %rdi
    000001b4: 	addq	%rbx, %rdi
    000001b7: 	movq	%rdi, 0x178(%rsp)
    000001bf: 	leal	0x9(%rax), %edi
    000001c2: 	movl	%edi, 0x184(%rsp)
    000001c9: 	movslq	%edi, %rdi
    000001cc: 	addq	%rbx, %rdi
    000001cf: 	movq	%rdi, 0x1a0(%rsp)
    000001d7: 	leal	0xa(%rax), %edi
    000001da: 	movl	%edi, 0x1b8(%rsp)
    000001e1: 	movslq	%edi, %rdi
    000001e4: 	addq	%rbx, %rdi
    000001e7: 	movq	%rdi, 0x1c8(%rsp)
    000001ef: 	leal	0xb(%rax), %edi
    000001f2: 	movl	%edi, 0x1d4(%rsp)
    000001f9: 	movslq	%edi, %rdi
    000001fc: 	addq	%rbx, %rdi
    000001ff: 	movq	%rdi, 0x1f0(%rsp)
    00000207: 	leal	0xc(%rax), %edi
    0000020a: 	movl	%edi, 0x208(%rsp)
    00000211: 	movslq	%edi, %rdi
    00000214: 	addq	%rbx, %rdi
    00000217: 	movq	%rdi, 0x230(%rsp)
    0000021f: 	leal	0xd(%rax), %edi
    00000222: 	addl	$0xe, %eax
    00000225: 	movl	%edi, 0x240(%rsp)
    0000022c: 	movslq	%edi, %rdi
    0000022f: 	movl	%eax, 0x25c(%rsp)
    00000236: 	cltq
    00000238: 	addq	%rbx, %rdi
    0000023b: 	addq	%rbx, %rax
    0000023e: 	movq	%rdi, 0x250(%rsp)
    00000246: 	leaq	(%r9,%r9), %rdi
    0000024a: 	movq	%rax, 0x270(%rsp)
    00000252: 	movl	%r9d, %eax
    00000255: 	addq	%rdi, %rax
    00000258: 	movq	%rdi, 0x200(%rsp)
    00000260: 	addq	%rbx, %rax
    00000263: 	movl	%r9d, 0x34(%rsp)
    00000268: 	cmpq	%rsi, %rax
    0000026b: 	movq	%r11, 0x18(%rsp)
    00000270: 	setbe	%al
    00000273: 	cmpq	%rdx, %r11
    00000276: 	setae	%dil
    0000027a: 	orl	%edi, %eax
    0000027c: 	leal	-0x1(%r9), %edi
    00000280: 	cmpl	$0xe, %edi
    00000283: 	seta	%dil
    00000287: 	andl	$-0x10, %ecx
    0000028a: 	andl	%edi, %eax
    0000028c: 	movl	%ecx, 0x38(%rsp)
    00000290: 	movb	%al, 0x2a(%rsp)
    00000294: 	movl	%r9d, %eax
    00000297: 	shrl	$0x4, %eax
    0000029a: 	subl	$0x1, %eax
    0000029d: 	shlq	$0x4, %rax
    000002a1: 	leaq	0x10(%r11,%rax), %r9
    000002a6: 	leal	(%rcx,%r15), %eax
    000002aa: 	movslq	%eax, %rdi
    000002ad: 	leaq	(%rbx,%rdi), %rcx
    000002b1: 	movq	%rcx, 0x50(%rsp)
    000002b6: 	leal	0x1(%rax), %ecx
    000002b9: 	movslq	%ecx, %rdi
    000002bc: 	movl	%ecx, 0x60(%rsp)
    000002c0: 	leaq	(%rbx,%rdi), %rcx
    000002c4: 	movq	%rcx, 0x70(%rsp)
    000002c9: 	leal	0x2(%rax), %ecx
    000002cc: 	movslq	%ecx, %rdi
    000002cf: 	movl	%ecx, 0x7c(%rsp)
    000002d3: 	leaq	(%rbx,%rdi), %rcx
    000002d7: 	movq	%rcx, 0x98(%rsp)
    000002df: 	leal	0x3(%rax), %ecx
    000002e2: 	movslq	%ecx, %rdi
    000002e5: 	movl	%ecx, 0xa8(%rsp)
    000002ec: 	leaq	(%rbx,%rdi), %rcx
    000002f0: 	movq	%rcx, 0xb8(%rsp)
    000002f8: 	leal	0x4(%rax), %ecx
    000002fb: 	movslq	%ecx, %rdi
    000002fe: 	movl	%ecx, 0xc4(%rsp)
    00000305: 	leaq	(%rbx,%rdi), %rcx
    00000309: 	movq	%rcx, 0xe0(%rsp)
    00000311: 	leal	0x5(%rax), %ecx
    00000314: 	movslq	%ecx, %rdi
    00000317: 	movl	%ecx, 0xf0(%rsp)
    0000031e: 	leaq	(%rbx,%rdi), %rcx
    00000322: 	movq	%rcx, 0x100(%rsp)
    0000032a: 	leal	0x6(%rax), %ecx
    0000032d: 	movslq	%ecx, %rdi
    00000330: 	movl	%ecx, 0x10c(%rsp)
    00000337: 	leaq	(%rbx,%rdi), %rcx
    0000033b: 	movq	%rcx, 0x128(%rsp)
    00000343: 	leal	0x7(%rax), %ecx
    00000346: 	movslq	%ecx, %rdi
    00000349: 	movl	%ecx, 0x138(%rsp)
    00000350: 	leaq	(%rbx,%rdi), %rcx
    00000354: 	movq	%rcx, 0x148(%rsp)
    0000035c: 	leal	0x8(%rax), %ecx
    0000035f: 	movslq	%ecx, %rdi
    00000362: 	movl	%ecx, 0x154(%rsp)
    00000369: 	leaq	(%rbx,%rdi), %rcx
    0000036d: 	movq	%rcx, 0x170(%rsp)
    00000375: 	leal	0x9(%rax), %ecx
    00000378: 	movslq	%ecx, %rdi
    0000037b: 	movl	%ecx, 0x180(%rsp)
    00000382: 	leaq	(%rbx,%rdi), %rcx
    00000386: 	movq	%rcx, 0x190(%rsp)
    0000038e: 	leal	0xa(%rax), %ecx
    00000391: 	movslq	%ecx, %rdi
    00000394: 	movl	%ecx, 0x19c(%rsp)
    0000039b: 	leaq	(%rbx,%rdi), %rcx
    0000039f: 	movq	%rcx, 0x1c0(%rsp)
    000003a7: 	leal	0xb(%rax), %ecx
    000003aa: 	movslq	%ecx, %rdi
    000003ad: 	movl	%ecx, 0x1d0(%rsp)
    000003b4: 	leaq	(%rbx,%rdi), %rcx
    000003b8: 	movq	%rcx, 0x1e0(%rsp)
    000003c0: 	leal	0xc(%rax), %ecx
    000003c3: 	movslq	%ecx, %rdi
    000003c6: 	movl	%ecx, 0x1ec(%rsp)
    000003cd: 	leal	0xd(%rax), %ecx
    000003d0: 	addl	$0xe, %eax
    000003d3: 	addq	%rbx, %rdi
    000003d6: 	movl	%ecx, 0x22c(%rsp)
    000003dd: 	movq	%rdi, 0x220(%rsp)
    000003e5: 	movslq	%ecx, %rdi
    000003e8: 	leaq	(%rbx,%rdi), %rcx
    000003ec: 	movl	%eax, 0x258(%rsp)
    000003f3: 	movl	%ebp, %edi
    000003f5: 	cltq
    000003f7: 	subl	%r12d, %edi
    000003fa: 	addq	%rbx, %rax
    000003fd: 	movq	%rcx, 0x248(%rsp)
    00000405: 	movslq	%r12d, %rcx
    00000408: 	movq	%rax, 0x268(%rsp)
    00000410: 	movl	%edi, %eax
    00000412: 	leaq	(%rbx,%rcx), %r8
    00000416: 	addq	%rcx, %rax
    00000419: 	movl	%edi, 0x2c(%rsp)
    0000041d: 	addq	%rbx, %rax
    00000420: 	movq	%rcx, 0x1f8(%rsp)
    00000428: 	cmpq	%rsi, %rax
    0000042b: 	movq	%r8, 0x10(%rsp)
    00000430: 	setbe	%al
    00000433: 	cmpq	%rdx, %r8
    00000436: 	setae	%dl
    00000439: 	orl	%edx, %eax
    0000043b: 	leal	-0x1(%rdi), %edx
    0000043e: 	cmpl	$0xe, %edx
    00000441: 	seta	%dl
    00000444: 	xorl	%r14d, %r14d
    00000447: 	andl	%edx, %eax
    00000449: 	movb	%al, 0x29(%rsp)
    0000044d: 	movl	%edi, %eax
    0000044f: 	andl	$-0x10, %edi
    00000452: 	shrl	$0x4, %eax
    00000455: 	movl	%edi, 0x30(%rsp)
    00000459: 	subl	$0x1, %eax
    0000045c: 	shlq	$0x4, %rax
    00000460: 	leaq	0x10(%r8,%rax), %r13
    00000465: 	leal	(%r12,%rdi), %eax
    00000469: 	movslq	%eax, %rdx
    0000046c: 	leal	0x1(%rax), %esi
    0000046f: 	leal	0x3(%rax), %edi
    00000472: 	addq	%rbx, %rdx
    00000475: 	movl	%esi, 0x4c(%rsp)
    00000479: 	leal	0x5(%rax), %ecx
    0000047c: 	movq	%rdx, 0x40(%rsp)
    00000481: 	movslq	%esi, %rdx
    00000484: 	leaq	(%rbx,%rdx), %rsi
    00000488: 	leal	0x2(%rax), %edx
    0000048b: 	movl	%edi, 0x94(%rsp)
    00000492: 	movl	%edx, 0x78(%rsp)
    00000496: 	movslq	%edx, %rdx
    00000499: 	addq	%rbx, %rdx
    0000049c: 	movq	%rsi, 0x68(%rsp)
    000004a1: 	movq	%rdx, 0x88(%rsp)
    000004a9: 	movslq	%edi, %rdx
    000004ac: 	leal	0x7(%rax), %edi
    000004af: 	leaq	(%rbx,%rdx), %rsi
    000004b3: 	movl	%ecx, 0xdc(%rsp)
    000004ba: 	movq	%rsi, 0xb0(%rsp)
    000004c2: 	leal	0x4(%rax), %esi
    000004c5: 	movslq	%esi, %rdx
    000004c8: 	movl	%esi, 0xc0(%rsp)
    000004cf: 	addq	%rbx, %rdx
    000004d2: 	movl	%edi, 0x124(%rsp)
    000004d9: 	movq	%rdx, 0xd0(%rsp)
    000004e1: 	movslq	%ecx, %rdx
    000004e4: 	leal	0x9(%rax), %ecx
    000004e7: 	leaq	(%rbx,%rdx), %rsi
    000004eb: 	leal	0x6(%rax), %edx
    000004ee: 	movl	%ecx, 0x16c(%rsp)
    000004f5: 	movl	%edx, 0x108(%rsp)
    000004fc: 	movslq	%edx, %rdx
    000004ff: 	addq	%rbx, %rdx
    00000502: 	movq	%rsi, 0xf8(%rsp)
    0000050a: 	movq	%rdx, 0x118(%rsp)
    00000512: 	movslq	%edi, %rdx
    00000515: 	leal	0xb(%rax), %edi
    00000518: 	leaq	(%rbx,%rdx), %rsi
    0000051c: 	movl	%edi, 0x1bc(%rsp)
    00000523: 	movq	%rsi, 0x140(%rsp)
    0000052b: 	leal	0x8(%rax), %esi
    0000052e: 	movslq	%esi, %rdx
    00000531: 	movl	%esi, 0x150(%rsp)
    00000538: 	addq	%rbx, %rdx
    0000053b: 	movq	%rdx, 0x160(%rsp)
    00000543: 	movslq	%ecx, %rdx
    00000546: 	leal	0xd(%rax), %ecx
    00000549: 	leaq	(%rbx,%rdx), %rsi
    0000054d: 	leal	0xa(%rax), %edx
    00000550: 	movl	%edx, 0x198(%rsp)
    00000557: 	movslq	%edx, %rdx
    0000055a: 	addq	%rbx, %rdx
    0000055d: 	movq	%rsi, 0x188(%rsp)
    00000565: 	movq	%rdx, 0x1b0(%rsp)
    0000056d: 	movslq	%edi, %rdx
    00000570: 	movq	%rbx, %rdi
    00000573: 	leaq	(%rbx,%rdx), %rsi
    00000577: 	movq	%rsi, 0x1d8(%rsp)
    0000057f: 	leal	0xc(%rax), %esi
    00000582: 	addl	$0xe, %eax
    00000585: 	movslq	%esi, %rdx
    00000588: 	movl	%eax, 0x244(%rsp)
    0000058f: 	cltq
    00000591: 	addq	%rbx, %rdx
    00000594: 	addq	%rbx, %rax
    00000597: 	movl	%esi, 0x1e8(%rsp)
    0000059e: 	movq	%rdx, 0x218(%rsp)
    000005a6: 	movslq	%ecx, %rdx
    000005a9: 	leaq	(%rbx,%rdx), %rsi
    000005ad: 	movq	%rax, 0x260(%rsp)
    000005b5: 	movl	%r14d, %ebx
    000005b8: 	movq	%r13, %r14
    000005bb: 	movq	%rsi, 0x238(%rsp)
    000005c3: 	movq	%r10, %r13
    000005c6: 	movl	%ecx, 0x228(%rsp)
    000005cd: 	movl	%ebp, %ecx
    000005cf: 	movq	%r9, %rbp
    000005d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1893:
    000005d8: 	movq	0x8(%rsp), %rdx
    000005dd: 	xorl	%esi, %esi
    000005df: 	movl	%ecx, (%rsp)
    000005e2: 	callq	memset@PLT # Offset: 1506
    000005e7: 	cmpl	%r15d, 0x4(%rsp)
    000005ec: 	movdqa	DATAat0x36f20(%rip), %xmm2
    000005f4: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005fc: 	movl	(%rsp), %ecx
    000005ff: 	movq	%rax, %rdi
    00000602: 	jge	.Ltmp1884 # Offset: 1538
    00000608: 	cmpb	$0x0, 0x2b(%rsp)
    0000060d: 	je	.Ltmp1885 # Offset: 1549
    00000613: 	movsd	init_value(%rip), %xmm1
    0000061b: 	movq	0x20(%rsp), %rax
    00000620: 	unpcklpd	%xmm1, %xmm1
    00000624: 	cvttpd2dq	%xmm1, %xmm1
    00000628: 	punpcklqdq	%xmm1, %xmm1
    0000062c: 	movdqa	%xmm1, %xmm4
    00000630: 	punpckhwd	%xmm1, %xmm4
    00000634: 	nopl	(%rax) # Size: 4
.Ltmp1886:
    00000638: 	movdqa	%xmm1, %xmm0
    0000063c: 	addq	$0x10, %rax
    00000640: 	punpcklwd	%xmm1, %xmm0
    00000644: 	movdqa	%xmm0, %xmm5
    00000648: 	punpcklwd	%xmm4, %xmm0
    0000064c: 	punpckhwd	%xmm4, %xmm5
    00000650: 	punpcklwd	%xmm5, %xmm0
    00000654: 	pand	%xmm2, %xmm0
    00000658: 	packuswb	%xmm0, %xmm0
    0000065c: 	movups	%xmm0, -0x10(%rax)
    00000660: 	cmpq	%r13, %rax
    00000663: 	jne	.Ltmp1886 # Offset: 1635
    00000665: 	movl	0x48(%rsp), %esi
    00000669: 	cmpl	%esi, 0x3c(%rsp)
    0000066d: 	je	.Ltmp1884 # Offset: 1645
    00000673: 	cvttsd2si	init_value(%rip), %eax
    0000067b: 	movq	0x58(%rsp), %rsi
    00000680: 	movb	%al, (%rsi)
    00000682: 	cmpl	0x64(%rsp), %r15d
    00000687: 	jle	.Ltmp1884 # Offset: 1671
    0000068d: 	cvttsd2si	init_value(%rip), %eax
    00000695: 	movq	0x80(%rsp), %rsi
    0000069d: 	movb	%al, (%rsi)
    0000069f: 	cmpl	0x90(%rsp), %r15d
    000006a7: 	jle	.Ltmp1884 # Offset: 1703
    000006ad: 	cvttsd2si	init_value(%rip), %eax
    000006b5: 	movq	0xa0(%rsp), %rsi
    000006bd: 	movb	%al, (%rsi)
    000006bf: 	cmpl	0xac(%rsp), %r15d
    000006c7: 	jle	.Ltmp1884 # Offset: 1735
    000006cd: 	cvttsd2si	init_value(%rip), %eax
    000006d5: 	movq	0xc8(%rsp), %rsi
    000006dd: 	movb	%al, (%rsi)
    000006df: 	cmpl	0xd8(%rsp), %r15d
    000006e7: 	jle	.Ltmp1884 # Offset: 1767
    000006ed: 	cvttsd2si	init_value(%rip), %eax
    000006f5: 	movq	0xe8(%rsp), %rdx
    000006fd: 	movb	%al, (%rdx)
    000006ff: 	cmpl	0xf4(%rsp), %r15d
    00000707: 	jle	.Ltmp1884 # Offset: 1799
    0000070d: 	cvttsd2si	init_value(%rip), %eax
    00000715: 	movq	0x110(%rsp), %rsi
    0000071d: 	movb	%al, (%rsi)
    0000071f: 	cmpl	0x120(%rsp), %r15d
    00000727: 	jle	.Ltmp1884 # Offset: 1831
    0000072d: 	cvttsd2si	init_value(%rip), %eax
    00000735: 	movq	0x130(%rsp), %rsi
    0000073d: 	movb	%al, (%rsi)
    0000073f: 	cmpl	0x13c(%rsp), %r15d
    00000747: 	jle	.Ltmp1884 # Offset: 1863
    0000074d: 	cvttsd2si	init_value(%rip), %eax
    00000755: 	movq	0x158(%rsp), %rdx
    0000075d: 	movb	%al, (%rdx)
    0000075f: 	cmpl	0x168(%rsp), %r15d
    00000767: 	jle	.Ltmp1884 # Offset: 1895
    0000076d: 	cvttsd2si	init_value(%rip), %eax
    00000775: 	movq	0x178(%rsp), %rsi
    0000077d: 	movb	%al, (%rsi)
    0000077f: 	cmpl	0x184(%rsp), %r15d
    00000787: 	jle	.Ltmp1884 # Offset: 1927
    0000078d: 	cvttsd2si	init_value(%rip), %eax
    00000795: 	movq	0x1a0(%rsp), %rsi
    0000079d: 	movb	%al, (%rsi)
    0000079f: 	cmpl	0x1b8(%rsp), %r15d
    000007a7: 	jle	.Ltmp1884 # Offset: 1959
    000007ad: 	cvttsd2si	init_value(%rip), %eax
    000007b5: 	movq	0x1c8(%rsp), %rdx
    000007bd: 	movb	%al, (%rdx)
    000007bf: 	cmpl	0x1d4(%rsp), %r15d
    000007c7: 	jle	.Ltmp1884 # Offset: 1991
    000007c9: 	cvttsd2si	init_value(%rip), %eax
    000007d1: 	movq	0x1f0(%rsp), %rdx
    000007d9: 	movb	%al, (%rdx)
    000007db: 	cmpl	0x208(%rsp), %r15d
    000007e3: 	jle	.Ltmp1884 # Offset: 2019
    000007e5: 	cvttsd2si	init_value(%rip), %eax
    000007ed: 	movq	0x230(%rsp), %rdx
    000007f5: 	movb	%al, (%rdx)
    000007f7: 	cmpl	0x240(%rsp), %r15d
    000007ff: 	jle	.Ltmp1884 # Offset: 2047
    00000801: 	cvttsd2si	init_value(%rip), %eax
    00000809: 	movq	0x250(%rsp), %rdx
    00000811: 	movb	%al, (%rdx)
    00000813: 	cmpl	0x25c(%rsp), %r15d
    0000081b: 	jle	.Ltmp1884 # Offset: 2075
    0000081d: 	cvttsd2si	init_value(%rip), %eax
    00000825: 	movq	0x270(%rsp), %rsi
    0000082d: 	movb	%al, (%rsi)
    0000082f: 	nop # Size: 1
.Ltmp1884:
    00000830: 	cmpl	%r12d, %r15d
    00000833: 	jge	.Ltmp1887 # Offset: 2099
    00000839: 	cmpb	$0x0, 0x2a(%rsp)
    0000083e: 	je	.Ltmp1888 # Offset: 2110
    00000844: 	movsd	init_value(%rip), %xmm1
    0000084c: 	movq	0x18(%rsp), %rax
    00000851: 	unpcklpd	%xmm1, %xmm1
    00000855: 	cvttpd2dq	%xmm1, %xmm1
    00000859: 	punpcklqdq	%xmm1, %xmm1
    0000085d: 	movdqa	%xmm1, %xmm4
    00000861: 	punpckhwd	%xmm1, %xmm4
    00000865: 	nopl	(%rax) # Size: 3
.Ltmp1889:
    00000868: 	movdqa	%xmm1, %xmm0
    0000086c: 	addq	$0x10, %rax
    00000870: 	punpcklwd	%xmm1, %xmm0
    00000874: 	movdqa	%xmm0, %xmm5
    00000878: 	punpcklwd	%xmm4, %xmm0
    0000087c: 	punpckhwd	%xmm4, %xmm5
    00000880: 	punpcklwd	%xmm5, %xmm0
    00000884: 	pand	%xmm2, %xmm0
    00000888: 	packuswb	%xmm0, %xmm0
    0000088c: 	paddb	%xmm3, %xmm0
    00000890: 	movups	%xmm0, -0x10(%rax)
    00000894: 	cmpq	%rax, %rbp
    00000897: 	jne	.Ltmp1889 # Offset: 2199
    00000899: 	movl	0x38(%rsp), %esi
    0000089d: 	cmpl	%esi, 0x34(%rsp)
    000008a1: 	je	.Ltmp1887 # Offset: 2209
    000008a7: 	cvttsd2si	init_value(%rip), %eax
    000008af: 	movq	0x50(%rsp), %rsi
    000008b4: 	addl	$0x1, %eax
    000008b7: 	movb	%al, (%rsi)
    000008b9: 	cmpl	0x60(%rsp), %r12d
    000008be: 	jle	.Ltmp1887 # Offset: 2238
    000008c4: 	cvttsd2si	init_value(%rip), %eax
    000008cc: 	movq	0x70(%rsp), %rsi
    000008d1: 	addl	$0x1, %eax
    000008d4: 	movb	%al, (%rsi)
    000008d6: 	cmpl	0x7c(%rsp), %r12d
    000008db: 	jle	.Ltmp1887 # Offset: 2267
    000008e1: 	cvttsd2si	init_value(%rip), %eax
    000008e9: 	movq	0x98(%rsp), %rsi
    000008f1: 	addl	$0x1, %eax
    000008f4: 	movb	%al, (%rsi)
    000008f6: 	cmpl	0xa8(%rsp), %r12d
    000008fe: 	jle	.Ltmp1887 # Offset: 2302
    00000904: 	cvttsd2si	init_value(%rip), %eax
    0000090c: 	movq	0xb8(%rsp), %rdx
    00000914: 	addl	$0x1, %eax
    00000917: 	movb	%al, (%rdx)
    00000919: 	cmpl	0xc4(%rsp), %r12d
    00000921: 	jle	.Ltmp1887 # Offset: 2337
    00000927: 	cvttsd2si	init_value(%rip), %eax
    0000092f: 	movq	0xe0(%rsp), %rsi
    00000937: 	addl	$0x1, %eax
    0000093a: 	movb	%al, (%rsi)
    0000093c: 	cmpl	0xf0(%rsp), %r12d
    00000944: 	jle	.Ltmp1887 # Offset: 2372
    0000094a: 	cvttsd2si	init_value(%rip), %eax
    00000952: 	movq	0x100(%rsp), %rsi
    0000095a: 	addl	$0x1, %eax
    0000095d: 	movb	%al, (%rsi)
    0000095f: 	cmpl	0x10c(%rsp), %r12d
    00000967: 	jle	.Ltmp1887 # Offset: 2407
    0000096d: 	cvttsd2si	init_value(%rip), %eax
    00000975: 	movq	0x128(%rsp), %rdx
    0000097d: 	addl	$0x1, %eax
    00000980: 	movb	%al, (%rdx)
    00000982: 	cmpl	0x138(%rsp), %r12d
    0000098a: 	jle	.Ltmp1887 # Offset: 2442
    00000990: 	cvttsd2si	init_value(%rip), %eax
    00000998: 	movq	0x148(%rsp), %rdx
    000009a0: 	addl	$0x1, %eax
    000009a3: 	movb	%al, (%rdx)
    000009a5: 	cmpl	0x154(%rsp), %r12d
    000009ad: 	jle	.Ltmp1887 # Offset: 2477
    000009b3: 	cvttsd2si	init_value(%rip), %eax
    000009bb: 	movq	0x170(%rsp), %rsi
    000009c3: 	addl	$0x1, %eax
    000009c6: 	movb	%al, (%rsi)
    000009c8: 	cmpl	0x180(%rsp), %r12d
    000009d0: 	jle	.Ltmp1887 # Offset: 2512
    000009d6: 	cvttsd2si	init_value(%rip), %eax
    000009de: 	movq	0x190(%rsp), %rdx
    000009e6: 	addl	$0x1, %eax
    000009e9: 	movb	%al, (%rdx)
    000009eb: 	cmpl	0x19c(%rsp), %r12d
    000009f3: 	jle	.Ltmp1887 # Offset: 2547
    000009f9: 	cvttsd2si	init_value(%rip), %eax
    00000a01: 	movq	0x1c0(%rsp), %rdx
    00000a09: 	addl	$0x1, %eax
    00000a0c: 	movb	%al, (%rdx)
    00000a0e: 	cmpl	0x1d0(%rsp), %r12d
    00000a16: 	jle	.Ltmp1887 # Offset: 2582
    00000a18: 	cvttsd2si	init_value(%rip), %eax
    00000a20: 	movq	0x1e0(%rsp), %rsi
    00000a28: 	addl	$0x1, %eax
    00000a2b: 	movb	%al, (%rsi)
    00000a2d: 	cmpl	0x1ec(%rsp), %r12d
    00000a35: 	jle	.Ltmp1887 # Offset: 2613
    00000a37: 	cvttsd2si	init_value(%rip), %eax
    00000a3f: 	movq	0x220(%rsp), %rdx
    00000a47: 	addl	$0x1, %eax
    00000a4a: 	movb	%al, (%rdx)
    00000a4c: 	cmpl	0x22c(%rsp), %r12d
    00000a54: 	jle	.Ltmp1887 # Offset: 2644
    00000a56: 	cvttsd2si	init_value(%rip), %eax
    00000a5e: 	movq	0x248(%rsp), %rsi
    00000a66: 	addl	$0x1, %eax
    00000a69: 	movb	%al, (%rsi)
    00000a6b: 	cmpl	0x258(%rsp), %r12d
    00000a73: 	jle	.Ltmp1887 # Offset: 2675
    00000a75: 	cvttsd2si	init_value(%rip), %eax
    00000a7d: 	movq	0x268(%rsp), %rsi
    00000a85: 	addl	$0x1, %eax
    00000a88: 	movb	%al, (%rsi)
    00000a8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1887:
    00000a90: 	cmpl	%r12d, %ecx
    00000a93: 	jle	.Ltmp1890 # Offset: 2707
    00000a99: 	cmpb	$0x0, 0x29(%rsp)
    00000a9e: 	je	.Ltmp1891 # Offset: 2718
    00000aa4: 	movsd	init_value(%rip), %xmm1
    00000aac: 	movq	0x10(%rsp), %rax
    00000ab1: 	movdqa	DATAat0x36f40(%rip), %xmm6
    00000ab9: 	unpcklpd	%xmm1, %xmm1
    00000abd: 	cvttpd2dq	%xmm1, %xmm1
    00000ac1: 	punpcklqdq	%xmm1, %xmm1
    00000ac5: 	movdqa	%xmm1, %xmm4
    00000ac9: 	punpckhwd	%xmm1, %xmm4
    00000acd: 	nopl	(%rax) # Size: 3
.Ltmp1892:
    00000ad0: 	movdqa	%xmm1, %xmm0
    00000ad4: 	addq	$0x10, %rax
    00000ad8: 	punpcklwd	%xmm1, %xmm0
    00000adc: 	movdqa	%xmm0, %xmm5
    00000ae0: 	punpcklwd	%xmm4, %xmm0
    00000ae4: 	punpckhwd	%xmm4, %xmm5
    00000ae8: 	punpcklwd	%xmm5, %xmm0
    00000aec: 	pand	%xmm2, %xmm0
    00000af0: 	packuswb	%xmm0, %xmm0
    00000af4: 	paddb	%xmm6, %xmm0
    00000af8: 	movups	%xmm0, -0x10(%rax)
    00000afc: 	cmpq	%r14, %rax
    00000aff: 	jne	.Ltmp1892 # Offset: 2815
    00000b01: 	movl	0x30(%rsp), %esi
    00000b05: 	cmpl	%esi, 0x2c(%rsp)
    00000b09: 	je	.Ltmp1890 # Offset: 2825
    00000b0f: 	cvttsd2si	init_value(%rip), %eax
    00000b17: 	movq	0x40(%rsp), %rsi
    00000b1c: 	addl	$0x2, %eax
    00000b1f: 	movb	%al, (%rsi)
    00000b21: 	cmpl	0x4c(%rsp), %ecx
    00000b25: 	jle	.Ltmp1890 # Offset: 2853
    00000b2b: 	cvttsd2si	init_value(%rip), %eax
    00000b33: 	movq	0x68(%rsp), %rsi
    00000b38: 	addl	$0x2, %eax
    00000b3b: 	movb	%al, (%rsi)
    00000b3d: 	cmpl	0x78(%rsp), %ecx
    00000b41: 	jle	.Ltmp1890 # Offset: 2881
    00000b47: 	cvttsd2si	init_value(%rip), %eax
    00000b4f: 	movq	0x88(%rsp), %rsi
    00000b57: 	addl	$0x2, %eax
    00000b5a: 	movb	%al, (%rsi)
    00000b5c: 	cmpl	0x94(%rsp), %ecx
    00000b63: 	jle	.Ltmp1890 # Offset: 2915
    00000b69: 	cvttsd2si	init_value(%rip), %eax
    00000b71: 	movq	0xb0(%rsp), %rsi
    00000b79: 	addl	$0x2, %eax
    00000b7c: 	movb	%al, (%rsi)
    00000b7e: 	cmpl	0xc0(%rsp), %ecx
    00000b85: 	jle	.Ltmp1890 # Offset: 2949
    00000b8b: 	cvttsd2si	init_value(%rip), %eax
    00000b93: 	movq	0xd0(%rsp), %rdx
    00000b9b: 	addl	$0x2, %eax
    00000b9e: 	movb	%al, (%rdx)
    00000ba0: 	cmpl	0xdc(%rsp), %ecx
    00000ba7: 	jle	.Ltmp1890 # Offset: 2983
    00000bad: 	cvttsd2si	init_value(%rip), %eax
    00000bb5: 	movq	0xf8(%rsp), %rdx
    00000bbd: 	addl	$0x2, %eax
    00000bc0: 	movb	%al, (%rdx)
    00000bc2: 	cmpl	0x108(%rsp), %ecx
    00000bc9: 	jle	.Ltmp1890 # Offset: 3017
    00000bcf: 	cvttsd2si	init_value(%rip), %eax
    00000bd7: 	movq	0x118(%rsp), %rsi
    00000bdf: 	addl	$0x2, %eax
    00000be2: 	movb	%al, (%rsi)
    00000be4: 	cmpl	0x124(%rsp), %ecx
    00000beb: 	jle	.Ltmp1890 # Offset: 3051
    00000bf1: 	cvttsd2si	init_value(%rip), %eax
    00000bf9: 	movq	0x140(%rsp), %rsi
    00000c01: 	addl	$0x2, %eax
    00000c04: 	movb	%al, (%rsi)
    00000c06: 	cmpl	0x150(%rsp), %ecx
    00000c0d: 	jle	.Ltmp1890 # Offset: 3085
    00000c13: 	cvttsd2si	init_value(%rip), %eax
    00000c1b: 	movq	0x160(%rsp), %rdx
    00000c23: 	addl	$0x2, %eax
    00000c26: 	movb	%al, (%rdx)
    00000c28: 	cmpl	0x16c(%rsp), %ecx
    00000c2f: 	jle	.Ltmp1890 # Offset: 3119
    00000c35: 	cvttsd2si	init_value(%rip), %eax
    00000c3d: 	movq	0x188(%rsp), %rsi
    00000c45: 	addl	$0x2, %eax
    00000c48: 	movb	%al, (%rsi)
    00000c4a: 	cmpl	0x198(%rsp), %ecx
    00000c51: 	jle	.Ltmp1890 # Offset: 3153
    00000c57: 	cvttsd2si	init_value(%rip), %eax
    00000c5f: 	movq	0x1b0(%rsp), %rsi
    00000c67: 	addl	$0x2, %eax
    00000c6a: 	movb	%al, (%rsi)
    00000c6c: 	cmpl	0x1bc(%rsp), %ecx
    00000c73: 	jle	.Ltmp1890 # Offset: 3187
    00000c75: 	cvttsd2si	init_value(%rip), %eax
    00000c7d: 	movq	0x1d8(%rsp), %rdx
    00000c85: 	addl	$0x2, %eax
    00000c88: 	movb	%al, (%rdx)
    00000c8a: 	cmpl	0x1e8(%rsp), %ecx
    00000c91: 	jle	.Ltmp1890 # Offset: 3217
    00000c93: 	cvttsd2si	init_value(%rip), %eax
    00000c9b: 	movq	0x218(%rsp), %rsi
    00000ca3: 	addl	$0x2, %eax
    00000ca6: 	movb	%al, (%rsi)
    00000ca8: 	cmpl	0x228(%rsp), %ecx
    00000caf: 	jle	.Ltmp1890 # Offset: 3247
    00000cb1: 	cvttsd2si	init_value(%rip), %eax
    00000cb9: 	movq	0x238(%rsp), %rdx
    00000cc1: 	addl	$0x2, %eax
    00000cc4: 	movb	%al, (%rdx)
    00000cc6: 	cmpl	0x244(%rsp), %ecx
    00000ccd: 	jle	.Ltmp1890 # Offset: 3277
    00000ccf: 	cvttsd2si	init_value(%rip), %eax
    00000cd7: 	movq	0x260(%rsp), %rsi
    00000cdf: 	addl	$0x2, %eax
    00000ce2: 	movb	%al, (%rsi)
    00000ce4: 	nopl	(%rax) # Size: 4
.Ltmp1890:
    00000ce8: 	addl	$0x1, %ebx
    00000ceb: 	cmpl	%ebx, iterations(%rip)
    00000cf1: 	jg	.Ltmp1893 # Offset: 3313
    00000cf7: 	movq	%rdi, %rbx
    00000cfa: 	movl	%ecx, %ebp
.Ltmp1883:
    00000cfc: 	callq	clock@PLT # Offset: 3324
    00000d01: 	movq	0x1a8(%rsp), %rdi
    00000d09: 	pxor	%xmm0, %xmm0
    00000d0d: 	xorl	%r12d, %r12d
    00000d10: 	movq	%rax, end_time(%rip)
    00000d17: 	subq	start_time(%rip), %rax
    00000d1e: 	cvtsi2sd	%rax, %xmm0
    00000d23: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000d2b: 	callq	_Z13record_resultdPKc # Offset: 3371
    00000d30: 	testl	%ebp, %ebp
    00000d32: 	jle	.Ltmp1894 # Offset: 3378
    00000d38: 	leal	-0x1(%rbp), %eax
    00000d3b: 	cmpl	$0xe, %eax
    00000d3e: 	jbe	.Ltmp1895 # Offset: 3390
    00000d44: 	movl	%ebp, %edx
    00000d46: 	movq	%rbx, %rax
    00000d49: 	pxor	%xmm0, %xmm0
    00000d4d: 	shrl	$0x4, %edx
    00000d50: 	subl	$0x1, %edx
    00000d53: 	shlq	$0x4, %rdx
    00000d57: 	leaq	0x10(%rbx,%rdx), %rdx
    00000d5c: 	nopl	(%rax) # Size: 4
.Ltmp1896:
    00000d60: 	movdqu	(%rax), %xmm7
    00000d64: 	addq	$0x10, %rax
    00000d68: 	paddb	%xmm7, %xmm0
    00000d6c: 	cmpq	%rax, %rdx
    00000d6f: 	jne	.Ltmp1896 # Offset: 3439
    00000d71: 	movdqa	%xmm0, %xmm1
    00000d75: 	movl	%ebp, %edx
    00000d77: 	psrldq	$0x8, %xmm1
    00000d7c: 	andl	$-0x10, %edx
    00000d7f: 	paddb	%xmm1, %xmm0
    00000d83: 	pxor	%xmm1, %xmm1
    00000d87: 	movl	%edx, %eax
    00000d89: 	psadbw	%xmm1, %xmm0
    00000d8d: 	movd	%xmm0, %r12d
    00000d92: 	cmpl	%ebp, %edx
    00000d94: 	je	.Ltmp1894 # Offset: 3476
.Ltmp1905:
    00000d9a: 	movl	%ebp, %ecx
    00000d9c: 	subl	%edx, %ecx
    00000d9e: 	leal	-0x1(%rcx), %esi
    00000da1: 	cmpl	$0x6, %esi
    00000da4: 	jbe	.Ltmp1897 # Offset: 3492
    00000da6: 	movq	(%rbx,%rdx), %xmm1
    00000dab: 	pxor	%xmm0, %xmm0
    00000daf: 	movdqa	%xmm1, %xmm7
    00000db3: 	psadbw	%xmm0, %xmm7
    00000db7: 	movq	%xmm7, 0x278(%rsp)
    00000dc0: 	movq	%xmm7, %rdx
    00000dc5: 	movl	%edx, %esi
    00000dc7: 	movl	%ecx, %edx
    00000dc9: 	andl	$-0x8, %edx
    00000dcc: 	addl	%esi, %r12d
    00000dcf: 	addl	%edx, %eax
    00000dd1: 	cmpl	%edx, %ecx
    00000dd3: 	je	.Ltmp1894 # Offset: 3539
.Ltmp1897:
    00000dd5: 	movslq	%eax, %rdx
    00000dd8: 	addb	(%rbx,%rdx), %r12b
    00000ddc: 	leal	0x1(%rax), %edx
    00000ddf: 	cmpl	%edx, %ebp
    00000de1: 	jle	.Ltmp1894 # Offset: 3553
    00000de3: 	movslq	%edx, %rdx
    00000de6: 	addb	(%rbx,%rdx), %r12b
    00000dea: 	leal	0x2(%rax), %edx
    00000ded: 	cmpl	%edx, %ebp
    00000def: 	jle	.Ltmp1894 # Offset: 3567
    00000df1: 	movslq	%edx, %rdx
    00000df4: 	addb	(%rbx,%rdx), %r12b
    00000df8: 	leal	0x3(%rax), %edx
    00000dfb: 	cmpl	%edx, %ebp
    00000dfd: 	jle	.Ltmp1894 # Offset: 3581
    00000dff: 	movslq	%edx, %rdx
    00000e02: 	addb	(%rbx,%rdx), %r12b
    00000e06: 	leal	0x4(%rax), %edx
    00000e09: 	cmpl	%ebp, %edx
    00000e0b: 	jge	.Ltmp1894 # Offset: 3595
    00000e0d: 	movslq	%edx, %rdx
    00000e10: 	addb	(%rbx,%rdx), %r12b
    00000e14: 	leal	0x5(%rax), %edx
    00000e17: 	cmpl	%ebp, %edx
    00000e19: 	jge	.Ltmp1894 # Offset: 3609
    00000e1b: 	movslq	%edx, %rdx
    00000e1e: 	addl	$0x6, %eax
    00000e21: 	addb	(%rbx,%rdx), %r12b
    00000e25: 	cmpl	%eax, %ebp
    00000e27: 	jle	.Ltmp1894 # Offset: 3623
    00000e29: 	cltq
    00000e2b: 	addb	(%rbx,%rax), %r12b
.Ltmp1894:
    00000e2f: 	movsd	init_value(%rip), %xmm0
    00000e37: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000e3f: 	addsd	%xmm0, %xmm1
    00000e43: 	cvttsd2si	%xmm1, %eax
    00000e47: 	movsd	DATAat0x37030(%rip), %xmm1
    00000e4f: 	addsd	%xmm0, %xmm1
    00000e53: 	cvttsd2si	%xmm1, %ebx
    00000e57: 	addl	%eax, %ebx
    00000e59: 	cvttsd2si	%xmm0, %eax
    00000e5d: 	addl	%eax, %ebx
    00000e5f: 	shll	$0x7, %ebx
    00000e62: 	cmpb	%r12b, %bl
    00000e65: 	jne	.Ltmp1898 # Offset: 3685
    00000e6b: 	movq	0x288(%rsp), %rax
    00000e73: 	subq	%fs:0x28, %rax
    00000e7c: 	jne	.Ltmp1899 # Offset: 3708
    00000e82: 	addq	$0x298, %rsp
    00000e89: 	popq	%rbx
    00000e8a: 	popq	%rbp
    00000e8b: 	popq	%r12
    00000e8d: 	popq	%r13
    00000e8f: 	popq	%r14
    00000e91: 	popq	%r15
    00000e93: 	retq # Offset: 3731
    00000e94: 	nopl	(%rax) # Size: 4
.Ltmp1891:
    00000e98: 	movq	0x1f8(%rsp), %rax
    00000ea0: 	leal	-0x1(%rcx), %esi
    00000ea3: 	subl	%r12d, %esi
    00000ea6: 	leaq	0x1(%rdi,%rax), %rax
    00000eab: 	addq	%rax, %rsi
    00000eae: 	movq	0x10(%rsp), %rax
    00000eb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1900:
    00000eb8: 	cvttsd2si	init_value(%rip), %edx
    00000ec0: 	addq	$0x1, %rax
    00000ec4: 	addl	$0x2, %edx
    00000ec7: 	movb	%dl, -0x1(%rax)
    00000eca: 	cmpq	%rsi, %rax
    00000ecd: 	jne	.Ltmp1900 # Offset: 3789
    00000ecf: 	jmp	.Ltmp1890 # Offset: 3791
    00000ed4: 	nopl	(%rax) # Size: 4
.Ltmp1885:
    00000ed8: 	movq	0x210(%rsp), %rax
    00000ee0: 	leaq	0x1(%rdi,%rax), %rsi
    00000ee5: 	movl	0x20c(%rsp), %eax
    00000eec: 	addq	%rax, %rsi
    00000eef: 	movq	0x20(%rsp), %rax
    00000ef4: 	nopl	(%rax) # Size: 4
.Ltmp1901:
    00000ef8: 	cvttsd2si	init_value(%rip), %edx
    00000f00: 	addq	$0x1, %rax
    00000f04: 	movb	%dl, -0x1(%rax)
    00000f07: 	cmpq	%rsi, %rax
    00000f0a: 	jne	.Ltmp1901 # Offset: 3850
    00000f0c: 	jmp	.Ltmp1884 # Offset: 3852
    00000f11: 	nopl	(%rax) # Size: 7
.Ltmp1888:
    00000f18: 	movq	0x200(%rsp), %rax
    00000f20: 	leaq	0x1(%rdi,%rax), %rsi
    00000f25: 	leal	-0x1(%r12), %eax
    00000f2a: 	subl	%r15d, %eax
    00000f2d: 	addq	%rax, %rsi
    00000f30: 	movq	0x18(%rsp), %rax
    00000f35: 	nopl	(%rax) # Size: 3
.Ltmp1902:
    00000f38: 	cvttsd2si	init_value(%rip), %edx
    00000f40: 	addq	$0x1, %rax
    00000f44: 	addl	$0x1, %edx
    00000f47: 	movb	%dl, -0x1(%rax)
    00000f4a: 	cmpq	%rsi, %rax
    00000f4d: 	jne	.Ltmp1902 # Offset: 3917
    00000f4f: 	jmp	.Ltmp1887 # Offset: 3919
.Ltmp1898:
    00000f54: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000f5b: 	movl	$0x5, %edx
    00000f60: 	leaq	DATAat0x35004(%rip), %rsi
    00000f67: 	movq	%rbp, %rdi
    00000f6a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3946
    00000f6f: 	cmpq	$0x0, 0x1a8(%rsp)
    00000f78: 	je	.Ltmp1903 # Offset: 3960
    00000f7e: 	movq	0x1a8(%rsp), %r14
    00000f86: 	movq	%r14, %rdi
    00000f89: 	callq	strlen@PLT # Offset: 3977
    00000f8e: 	movq	%r14, %rsi
    00000f91: 	movq	%rbp, %rdi
    00000f94: 	movq	%rax, %rdx
    00000f97: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3991
.Ltmp1904:
    00000f9c: 	movq	%rbp, %rdi
    00000f9f: 	movl	$0xd, %edx
    00000fa4: 	leaq	DATAat0x3500a(%rip), %rsi
    00000fab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4011
    00000fb0: 	movb	%r12b, 0x287(%rsp)
    00000fb8: 	movq	%rbp, %rdi
    00000fbb: 	leaq	0x287(%rsp), %r12
    00000fc3: 	movl	$0x1, %edx
    00000fc8: 	movq	%r12, %rsi
    00000fcb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4043
    00000fd0: 	movl	$0xb, %edx
    00000fd5: 	leaq	DATAat0x35018(%rip), %rsi
    00000fdc: 	movq	%rax, %rbp
    00000fdf: 	movq	%rax, %rdi
    00000fe2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4066
    00000fe7: 	movq	%rbp, %rdi
    00000fea: 	movl	$0x1, %edx
    00000fef: 	movq	%r12, %rsi
    00000ff2: 	movb	%bl, 0x287(%rsp)
    00000ff9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4089
    00000ffe: 	movq	%rax, %rdi
    00001001: 	movq	0x288(%rsp), %rax
    00001009: 	subq	%fs:0x28, %rax
    00001012: 	jne	.Ltmp1899 # Offset: 4114
    00001014: 	addq	$0x298, %rsp
    0000101b: 	popq	%rbx
    0000101c: 	popq	%rbp
    0000101d: 	popq	%r12
    0000101f: 	popq	%r13
    00001021: 	popq	%r14
    00001023: 	popq	%r15
    00001025: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 4133
.Ltmp1903:
    0000102a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001031: 	movq	-0x18(%rax), %rdi
    00001035: 	addq	%rbp, %rdi
    00001038: 	movl	0x20(%rdi), %esi
    0000103b: 	orl	$0x1, %esi
    0000103e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4158
    00001043: 	jmp	.Ltmp1904 # Offset: 4163
.Ltmp1895:
    00001048: 	xorl	%edx, %edx
    0000104a: 	xorl	%r12d, %r12d
    0000104d: 	xorl	%eax, %eax
    0000104f: 	jmp	.Ltmp1905 # Offset: 4175
.Ltmp1899:
    00001054: 	callq	__stack_chk_fail@PLT # Offset: 4180
DWARF CFI Instructions:
    <empty>
End of Function "_Z37test_for_loop_memset_partial4_replaceIhEvPT_iPKc"

Binary Function "_Z30test_for_loop_partial4_replaceIhEvPT_iPKc" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x2bda0
  Size        : 0x1079
  MaxSize     : 0x1080
  Offset      : 0x2bda0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_partial4_replaceIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %r10d
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdi, %rbp
    00000014: 	pushq	%rbx
    00000015: 	movl	%esi, %ebx
    00000017: 	subq	$0x298, %rsp
    0000001e: 	movq	%rdx, 0x1a8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x288(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	testl	%esi, %esi
    0000003b: 	cmovnsl	%esi, %r10d
    0000003f: 	sarl	$0x2, %r10d
    00000043: 	movl	%r10d, 0x28(%rsp)
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1906 # Offset: 92
    00000062: 	movslq	0x28(%rsp), %rsi
    00000067: 	leal	(%rsi,%rsi), %r13d
    0000006b: 	movq	%rsi, %r10
    0000006e: 	leaq	(%rbp,%rsi), %r8
    00000073: 	movq	%rsi, 0x210(%rsp)
    0000007b: 	movl	%r13d, %edi
    0000007e: 	leal	(%r13,%rsi), %r12d
    00000083: 	movq	%r8, 0x20(%rsp)
    00000088: 	subl	%esi, %edi
    0000008a: 	movl	%edi, %eax
    0000008c: 	leal	-0x1(%rdi), %r11d
    00000090: 	movl	%edi, 0x3c(%rsp)
    00000094: 	addq	%rsi, %rax
    00000097: 	leaq	init_value(%rip), %rsi
    0000009e: 	movl	%r11d, 0x20c(%rsp)
    000000a6: 	addq	%rbp, %rax
    000000a9: 	leaq	0x8(%rsi), %rdx
    000000ad: 	cmpq	%rsi, %rax
    000000b0: 	setbe	%al
    000000b3: 	cmpq	%rdx, %r8
    000000b6: 	setae	%cl
    000000b9: 	orl	%ecx, %eax
    000000bb: 	cmpl	$0xe, %r11d
    000000bf: 	movslq	%r12d, %r11
    000000c2: 	seta	%cl
    000000c5: 	andl	%ecx, %eax
    000000c7: 	movb	%al, 0x2f(%rsp)
    000000cb: 	movl	%edi, %eax
    000000cd: 	andl	$-0x10, %edi
    000000d0: 	shrl	$0x4, %eax
    000000d3: 	movl	%edi, 0x48(%rsp)
    000000d7: 	subl	$0x1, %eax
    000000da: 	shlq	$0x4, %rax
    000000de: 	leaq	0x10(%r8,%rax), %r9
    000000e3: 	leal	(%r10,%rdi), %eax
    000000e7: 	movslq	%eax, %rcx
    000000ea: 	leal	0x1(%rax), %edi
    000000ed: 	leaq	(%rbp,%r11), %r8
    000000f2: 	addq	%rbp, %rcx
    000000f5: 	movl	%edi, 0x64(%rsp)
    000000f9: 	movq	%rcx, 0x58(%rsp)
    000000fe: 	movslq	%edi, %rcx
    00000101: 	leal	0x3(%rax), %edi
    00000104: 	addq	%rbp, %rcx
    00000107: 	movl	%edi, 0xac(%rsp)
    0000010e: 	movq	%rcx, 0x80(%rsp)
    00000116: 	leal	0x2(%rax), %ecx
    00000119: 	movl	%ecx, 0x90(%rsp)
    00000120: 	movslq	%ecx, %rcx
    00000123: 	addq	%rbp, %rcx
    00000126: 	movq	%rcx, 0xa0(%rsp)
    0000012e: 	movslq	%edi, %rcx
    00000131: 	leal	0x5(%rax), %edi
    00000134: 	addq	%rbp, %rcx
    00000137: 	movl	%edi, 0xf4(%rsp)
    0000013e: 	movq	%rcx, 0xc8(%rsp)
    00000146: 	leal	0x4(%rax), %ecx
    00000149: 	movl	%ecx, 0xd8(%rsp)
    00000150: 	movslq	%ecx, %rcx
    00000153: 	addq	%rbp, %rcx
    00000156: 	movq	%rcx, 0xe8(%rsp)
    0000015e: 	movslq	%edi, %rcx
    00000161: 	leal	0x7(%rax), %edi
    00000164: 	addq	%rbp, %rcx
    00000167: 	movl	%edi, 0x13c(%rsp)
    0000016e: 	movq	%rcx, 0x110(%rsp)
    00000176: 	leal	0x6(%rax), %ecx
    00000179: 	movl	%ecx, 0x120(%rsp)
    00000180: 	movslq	%ecx, %rcx
    00000183: 	addq	%rbp, %rcx
    00000186: 	movq	%rcx, 0x130(%rsp)
    0000018e: 	movslq	%edi, %rcx
    00000191: 	leal	0x9(%rax), %edi
    00000194: 	addq	%rbp, %rcx
    00000197: 	movl	%edi, 0x184(%rsp)
    0000019e: 	movq	%rcx, 0x158(%rsp)
    000001a6: 	leal	0x8(%rax), %ecx
    000001a9: 	movl	%ecx, 0x168(%rsp)
    000001b0: 	movslq	%ecx, %rcx
    000001b3: 	addq	%rbp, %rcx
    000001b6: 	movq	%rcx, 0x178(%rsp)
    000001be: 	movslq	%edi, %rcx
    000001c1: 	leal	0xb(%rax), %edi
    000001c4: 	addq	%rbp, %rcx
    000001c7: 	movl	%edi, 0x1d4(%rsp)
    000001ce: 	movq	%rcx, 0x1a0(%rsp)
    000001d6: 	leal	0xa(%rax), %ecx
    000001d9: 	movl	%ecx, 0x1b8(%rsp)
    000001e0: 	movslq	%ecx, %rcx
    000001e3: 	addq	%rbp, %rcx
    000001e6: 	movq	%rcx, 0x1c8(%rsp)
    000001ee: 	movslq	%edi, %rcx
    000001f1: 	leal	0xd(%rax), %edi
    000001f4: 	addq	%rbp, %rcx
    000001f7: 	movq	%rcx, 0x1f0(%rsp)
    000001ff: 	leal	0xc(%rax), %ecx
    00000202: 	addl	$0xe, %eax
    00000205: 	movl	%ecx, 0x208(%rsp)
    0000020c: 	movslq	%ecx, %rcx
    0000020f: 	addq	%rbp, %rcx
    00000212: 	movq	%rcx, 0x230(%rsp)
    0000021a: 	movslq	%edi, %rcx
    0000021d: 	movl	%edi, 0x240(%rsp)
    00000224: 	addq	%rbp, %rcx
    00000227: 	movl	%eax, 0x25c(%rsp)
    0000022e: 	cltq
    00000230: 	addq	%rbp, %rax
    00000233: 	movq	%rcx, 0x250(%rsp)
    0000023b: 	movslq	%r13d, %rcx
    0000023e: 	movq	%rax, 0x270(%rsp)
    00000246: 	movl	%r10d, %eax
    00000249: 	leaq	(%rbp,%rcx), %rdi
    0000024e: 	addq	%rcx, %rax
    00000251: 	movq	%rcx, 0x200(%rsp)
    00000259: 	addq	%rbp, %rax
    0000025c: 	movq	%rdi, 0x18(%rsp)
    00000261: 	cmpq	%rsi, %rax
    00000264: 	setbe	%al
    00000267: 	cmpq	%rdx, %rdi
    0000026a: 	setae	%cl
    0000026d: 	orl	%ecx, %eax
    0000026f: 	leal	-0x1(%r10), %ecx
    00000273: 	cmpl	$0xe, %ecx
    00000276: 	seta	%cl
    00000279: 	andl	%ecx, %eax
    0000027b: 	movb	%al, 0x2e(%rsp)
    0000027f: 	movl	%r10d, %eax
    00000282: 	shrl	$0x4, %eax
    00000285: 	leal	-0x1(%rax), %ecx
    00000288: 	movl	%r10d, %eax
    0000028b: 	andl	$-0x10, %eax
    0000028e: 	addq	$0x1, %rcx
    00000292: 	movl	%eax, 0x38(%rsp)
    00000296: 	shlq	$0x4, %rcx
    0000029a: 	addl	%r13d, %eax
    0000029d: 	addq	%rdi, %rcx
    000002a0: 	movslq	%eax, %rdi
    000002a3: 	addq	%rbp, %rdi
    000002a6: 	movq	%rdi, 0x50(%rsp)
    000002ab: 	leal	0x1(%rax), %edi
    000002ae: 	movl	%edi, 0x60(%rsp)
    000002b2: 	movslq	%edi, %rdi
    000002b5: 	addq	%rbp, %rdi
    000002b8: 	movq	%rdi, 0x70(%rsp)
    000002bd: 	leal	0x2(%rax), %edi
    000002c0: 	movl	%edi, 0x7c(%rsp)
    000002c4: 	movslq	%edi, %rdi
    000002c7: 	addq	%rbp, %rdi
    000002ca: 	movq	%rdi, 0x98(%rsp)
    000002d2: 	leal	0x3(%rax), %edi
    000002d5: 	movl	%edi, 0xa8(%rsp)
    000002dc: 	movslq	%edi, %rdi
    000002df: 	addq	%rbp, %rdi
    000002e2: 	movq	%rdi, 0xb8(%rsp)
    000002ea: 	leal	0x4(%rax), %edi
    000002ed: 	movl	%edi, 0xc4(%rsp)
    000002f4: 	movslq	%edi, %rdi
    000002f7: 	addq	%rbp, %rdi
    000002fa: 	movq	%rdi, 0xe0(%rsp)
    00000302: 	leal	0x5(%rax), %edi
    00000305: 	movl	%edi, 0xf0(%rsp)
    0000030c: 	movslq	%edi, %rdi
    0000030f: 	addq	%rbp, %rdi
    00000312: 	movq	%rdi, 0x100(%rsp)
    0000031a: 	leal	0x6(%rax), %edi
    0000031d: 	movl	%edi, 0x10c(%rsp)
    00000324: 	movslq	%edi, %rdi
    00000327: 	addq	%rbp, %rdi
    0000032a: 	movq	%rdi, 0x128(%rsp)
    00000332: 	leal	0x7(%rax), %edi
    00000335: 	movl	%edi, 0x138(%rsp)
    0000033c: 	movslq	%edi, %rdi
    0000033f: 	addq	%rbp, %rdi
    00000342: 	movq	%rdi, 0x148(%rsp)
    0000034a: 	leal	0x8(%rax), %edi
    0000034d: 	movl	%edi, 0x154(%rsp)
    00000354: 	movslq	%edi, %rdi
    00000357: 	addq	%rbp, %rdi
    0000035a: 	movq	%rdi, 0x170(%rsp)
    00000362: 	leal	0x9(%rax), %edi
    00000365: 	movl	%edi, 0x180(%rsp)
    0000036c: 	movslq	%edi, %rdi
    0000036f: 	addq	%rbp, %rdi
    00000372: 	movq	%rdi, 0x190(%rsp)
    0000037a: 	leal	0xa(%rax), %edi
    0000037d: 	movl	%edi, 0x19c(%rsp)
    00000384: 	movslq	%edi, %rdi
    00000387: 	addq	%rbp, %rdi
    0000038a: 	movq	%rdi, 0x1c0(%rsp)
    00000392: 	leal	0xb(%rax), %edi
    00000395: 	movl	%edi, 0x1d0(%rsp)
    0000039c: 	movslq	%edi, %rdi
    0000039f: 	addq	%rbp, %rdi
    000003a2: 	movq	%rdi, 0x1e0(%rsp)
    000003aa: 	leal	0xc(%rax), %edi
    000003ad: 	movl	%edi, 0x1ec(%rsp)
    000003b4: 	movslq	%edi, %rdi
    000003b7: 	addq	%rbp, %rdi
    000003ba: 	movq	%rdi, 0x220(%rsp)
    000003c2: 	leal	0xd(%rax), %edi
    000003c5: 	addl	$0xe, %eax
    000003c8: 	movl	%edi, 0x22c(%rsp)
    000003cf: 	movslq	%edi, %rdi
    000003d2: 	addq	%rbp, %rdi
    000003d5: 	movl	%eax, 0x258(%rsp)
    000003dc: 	cltq
    000003de: 	movq	%rdi, 0x248(%rsp)
    000003e6: 	movl	%ebx, %edi
    000003e8: 	addq	%rbp, %rax
    000003eb: 	subl	%r12d, %edi
    000003ee: 	movq	%rax, 0x268(%rsp)
    000003f6: 	movl	%edi, %eax
    000003f8: 	movl	%edi, 0x30(%rsp)
    000003fc: 	addq	%r11, %rax
    000003ff: 	movq	%r11, 0x1f8(%rsp)
    00000407: 	addq	%rbp, %rax
    0000040a: 	movq	%r8, 0x10(%rsp)
    0000040f: 	cmpq	%rsi, %rax
    00000412: 	setbe	%al
    00000415: 	cmpq	%rdx, %r8
    00000418: 	setae	%dl
    0000041b: 	orl	%edx, %eax
    0000041d: 	leal	-0x1(%rdi), %edx
    00000420: 	cmpl	$0xe, %edx
    00000423: 	seta	%dl
    00000426: 	xorl	%r14d, %r14d
    00000429: 	andl	%edx, %eax
    0000042b: 	movb	%al, 0x2d(%rsp)
    0000042f: 	movl	%edi, %eax
    00000431: 	andl	$-0x10, %edi
    00000434: 	shrl	$0x4, %eax
    00000437: 	movl	%edi, 0x34(%rsp)
    0000043b: 	subl	$0x1, %eax
    0000043e: 	shlq	$0x4, %rax
    00000442: 	leaq	0x10(%r8,%rax), %r15
    00000447: 	leal	(%r12,%rdi), %eax
    0000044b: 	movq	%rbp, %rdi
    0000044e: 	movslq	%eax, %rdx
    00000451: 	leaq	(%rbp,%rdx), %rsi
    00000456: 	movq	%rsi, 0x40(%rsp)
    0000045b: 	leal	0x1(%rax), %esi
    0000045e: 	movslq	%esi, %rdx
    00000461: 	movl	%esi, 0x4c(%rsp)
    00000465: 	leaq	(%rbp,%rdx), %rsi
    0000046a: 	movq	%rsi, 0x68(%rsp)
    0000046f: 	leal	0x2(%rax), %esi
    00000472: 	movslq	%esi, %rdx
    00000475: 	movl	%esi, 0x78(%rsp)
    00000479: 	leaq	(%rbp,%rdx), %rsi
    0000047e: 	movq	%rsi, 0x88(%rsp)
    00000486: 	leal	0x3(%rax), %esi
    00000489: 	movslq	%esi, %rdx
    0000048c: 	movl	%esi, 0x94(%rsp)
    00000493: 	leaq	(%rbp,%rdx), %rsi
    00000498: 	movq	%rsi, 0xb0(%rsp)
    000004a0: 	leal	0x4(%rax), %esi
    000004a3: 	movslq	%esi, %rdx
    000004a6: 	movl	%esi, 0xc0(%rsp)
    000004ad: 	leal	0x5(%rax), %esi
    000004b0: 	addq	%rbp, %rdx
    000004b3: 	movl	%esi, 0xdc(%rsp)
    000004ba: 	movq	%rdx, 0xd0(%rsp)
    000004c2: 	movslq	%esi, %rdx
    000004c5: 	leaq	(%rbp,%rdx), %rsi
    000004ca: 	movq	%rsi, 0xf8(%rsp)
    000004d2: 	leal	0x6(%rax), %esi
    000004d5: 	movslq	%esi, %rdx
    000004d8: 	movl	%esi, 0x108(%rsp)
    000004df: 	leal	0x7(%rax), %esi
    000004e2: 	addq	%rbp, %rdx
    000004e5: 	movl	%esi, 0x124(%rsp)
    000004ec: 	movq	%rdx, 0x118(%rsp)
    000004f4: 	movslq	%esi, %rdx
    000004f7: 	leaq	(%rbp,%rdx), %rsi
    000004fc: 	movq	%rsi, 0x140(%rsp)
    00000504: 	leal	0x8(%rax), %esi
    00000507: 	movslq	%esi, %rdx
    0000050a: 	movl	%esi, 0x150(%rsp)
    00000511: 	addq	%rbp, %rdx
    00000514: 	movq	%rdx, 0x160(%rsp)
    0000051c: 	leal	0x9(%rax), %edx
    0000051f: 	movl	%edx, 0x16c(%rsp)
    00000526: 	movslq	%edx, %rdx
    00000529: 	leaq	(%rbp,%rdx), %rsi
    0000052e: 	movq	%rsi, 0x188(%rsp)
    00000536: 	leal	0xa(%rax), %esi
    00000539: 	movslq	%esi, %rdx
    0000053c: 	movl	%esi, 0x198(%rsp)
    00000543: 	addq	%rbp, %rdx
    00000546: 	movq	%rdx, 0x1b0(%rsp)
    0000054e: 	leal	0xb(%rax), %edx
    00000551: 	movl	%edx, 0x1bc(%rsp)
    00000558: 	movslq	%edx, %rdx
    0000055b: 	leaq	(%rbp,%rdx), %rsi
    00000560: 	movq	%rsi, 0x1d8(%rsp)
    00000568: 	leal	0xc(%rax), %esi
    0000056b: 	movslq	%esi, %rdx
    0000056e: 	movl	%esi, 0x1e8(%rsp)
    00000575: 	addq	%rbp, %rdx
    00000578: 	movq	%rdx, 0x218(%rsp)
    00000580: 	leal	0xd(%rax), %edx
    00000583: 	addl	$0xe, %eax
    00000586: 	movdqa	DATAat0x36f20(%rip), %xmm2
    0000058e: 	movl	%edx, 0x228(%rsp)
    00000595: 	movslq	%edx, %rdx
    00000598: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005a0: 	movl	%eax, 0x244(%rsp)
    000005a7: 	cltq
    000005a9: 	leaq	(%rbp,%rdx), %rsi
    000005ae: 	addq	%rbp, %rax
    000005b1: 	movq	%rsi, 0x238(%rsp)
    000005b9: 	movl	%r14d, %ebp
    000005bc: 	movl	%r13d, %r14d
    000005bf: 	movq	%rax, 0x260(%rsp)
    000005c7: 	movq	%r15, %r13
    000005ca: 	movq	%rcx, %r15
    000005cd: 	nopl	(%rax) # Size: 3
.Ltmp1917:
    000005d0: 	testl	%ebx, %ebx
    000005d2: 	jle	.Ltmp1907 # Offset: 1490
    000005d4: 	leal	-0x1(%rbx), %edx
    000005d7: 	xorl	%esi, %esi
    000005d9: 	movq	%r9, 0x8(%rsp)
    000005de: 	addq	$0x1, %rdx
    000005e2: 	callq	memset@PLT # Offset: 1506
    000005e7: 	movq	0x8(%rsp), %r9
    000005ec: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005f4: 	movdqa	DATAat0x36f20(%rip), %xmm2
    000005fc: 	movq	%rax, %rdi
.Ltmp1907:
    000005ff: 	cmpl	%r14d, 0x28(%rsp)
    00000604: 	jge	.Ltmp1908 # Offset: 1540
    0000060a: 	cmpb	$0x0, 0x2f(%rsp)
    0000060f: 	je	.Ltmp1909 # Offset: 1551
    00000615: 	movsd	init_value(%rip), %xmm1
    0000061d: 	movq	0x20(%rsp), %rax
    00000622: 	unpcklpd	%xmm1, %xmm1
    00000626: 	cvttpd2dq	%xmm1, %xmm1
    0000062a: 	punpcklqdq	%xmm1, %xmm1
    0000062e: 	movdqa	%xmm1, %xmm4
    00000632: 	punpckhwd	%xmm1, %xmm4
    00000636: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1910:
    00000640: 	movdqa	%xmm1, %xmm0
    00000644: 	addq	$0x10, %rax
    00000648: 	punpcklwd	%xmm1, %xmm0
    0000064c: 	movdqa	%xmm0, %xmm5
    00000650: 	punpcklwd	%xmm4, %xmm0
    00000654: 	punpckhwd	%xmm4, %xmm5
    00000658: 	punpcklwd	%xmm5, %xmm0
    0000065c: 	pand	%xmm2, %xmm0
    00000660: 	packuswb	%xmm0, %xmm0
    00000664: 	movups	%xmm0, -0x10(%rax)
    00000668: 	cmpq	%r9, %rax
    0000066b: 	jne	.Ltmp1910 # Offset: 1643
    0000066d: 	movl	0x48(%rsp), %ecx
    00000671: 	cmpl	%ecx, 0x3c(%rsp)
    00000675: 	je	.Ltmp1908 # Offset: 1653
    0000067b: 	cvttsd2si	init_value(%rip), %eax
    00000683: 	movq	0x58(%rsp), %rcx
    00000688: 	movb	%al, (%rcx)
    0000068a: 	cmpl	0x64(%rsp), %r14d
    0000068f: 	jle	.Ltmp1908 # Offset: 1679
    00000695: 	cvttsd2si	init_value(%rip), %eax
    0000069d: 	movq	0x80(%rsp), %rcx
    000006a5: 	movb	%al, (%rcx)
    000006a7: 	cmpl	0x90(%rsp), %r14d
    000006af: 	jle	.Ltmp1908 # Offset: 1711
    000006b5: 	cvttsd2si	init_value(%rip), %eax
    000006bd: 	movq	0xa0(%rsp), %rsi
    000006c5: 	movb	%al, (%rsi)
    000006c7: 	cmpl	0xac(%rsp), %r14d
    000006cf: 	jle	.Ltmp1908 # Offset: 1743
    000006d5: 	cvttsd2si	init_value(%rip), %eax
    000006dd: 	movq	0xc8(%rsp), %rcx
    000006e5: 	movb	%al, (%rcx)
    000006e7: 	cmpl	0xd8(%rsp), %r14d
    000006ef: 	jle	.Ltmp1908 # Offset: 1775
    000006f5: 	cvttsd2si	init_value(%rip), %eax
    000006fd: 	movq	0xe8(%rsp), %rsi
    00000705: 	movb	%al, (%rsi)
    00000707: 	cmpl	0xf4(%rsp), %r14d
    0000070f: 	jle	.Ltmp1908 # Offset: 1807
    00000715: 	cvttsd2si	init_value(%rip), %eax
    0000071d: 	movq	0x110(%rsp), %rcx
    00000725: 	movb	%al, (%rcx)
    00000727: 	cmpl	0x120(%rsp), %r14d
    0000072f: 	jle	.Ltmp1908 # Offset: 1839
    00000735: 	cvttsd2si	init_value(%rip), %eax
    0000073d: 	movq	0x130(%rsp), %rsi
    00000745: 	movb	%al, (%rsi)
    00000747: 	cmpl	0x13c(%rsp), %r14d
    0000074f: 	jle	.Ltmp1908 # Offset: 1871
    00000755: 	cvttsd2si	init_value(%rip), %eax
    0000075d: 	movq	0x158(%rsp), %rsi
    00000765: 	movb	%al, (%rsi)
    00000767: 	cmpl	0x168(%rsp), %r14d
    0000076f: 	jle	.Ltmp1908 # Offset: 1903
    00000775: 	cvttsd2si	init_value(%rip), %eax
    0000077d: 	movq	0x178(%rsp), %rcx
    00000785: 	movb	%al, (%rcx)
    00000787: 	cmpl	0x184(%rsp), %r14d
    0000078f: 	jle	.Ltmp1908 # Offset: 1935
    00000795: 	cvttsd2si	init_value(%rip), %eax
    0000079d: 	movq	0x1a0(%rsp), %rcx
    000007a5: 	movb	%al, (%rcx)
    000007a7: 	cmpl	0x1b8(%rsp), %r14d
    000007af: 	jle	.Ltmp1908 # Offset: 1967
    000007b5: 	cvttsd2si	init_value(%rip), %eax
    000007bd: 	movq	0x1c8(%rsp), %rcx
    000007c5: 	movb	%al, (%rcx)
    000007c7: 	cmpl	0x1d4(%rsp), %r14d
    000007cf: 	jle	.Ltmp1908 # Offset: 1999
    000007d1: 	cvttsd2si	init_value(%rip), %eax
    000007d9: 	movq	0x1f0(%rsp), %rsi
    000007e1: 	movb	%al, (%rsi)
    000007e3: 	cmpl	0x208(%rsp), %r14d
    000007eb: 	jle	.Ltmp1908 # Offset: 2027
    000007ed: 	cvttsd2si	init_value(%rip), %eax
    000007f5: 	movq	0x230(%rsp), %rcx
    000007fd: 	movb	%al, (%rcx)
    000007ff: 	cmpl	0x240(%rsp), %r14d
    00000807: 	jle	.Ltmp1908 # Offset: 2055
    00000809: 	cvttsd2si	init_value(%rip), %eax
    00000811: 	movq	0x250(%rsp), %rcx
    00000819: 	movb	%al, (%rcx)
    0000081b: 	cmpl	0x25c(%rsp), %r14d
    00000823: 	jle	.Ltmp1908 # Offset: 2083
    00000825: 	cvttsd2si	init_value(%rip), %eax
    0000082d: 	movq	0x270(%rsp), %rcx
    00000835: 	movb	%al, (%rcx)
    00000837: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1908:
    00000840: 	cmpl	%r14d, %r12d
    00000843: 	jle	.Ltmp1911 # Offset: 2115
    00000849: 	cmpb	$0x0, 0x2e(%rsp)
    0000084e: 	je	.Ltmp1912 # Offset: 2126
    00000854: 	movsd	init_value(%rip), %xmm1
    0000085c: 	movq	0x18(%rsp), %rax
    00000861: 	unpcklpd	%xmm1, %xmm1
    00000865: 	cvttpd2dq	%xmm1, %xmm1
    00000869: 	punpcklqdq	%xmm1, %xmm1
    0000086d: 	movdqa	%xmm1, %xmm4
    00000871: 	punpckhwd	%xmm1, %xmm4
    00000875: 	nopl	(%rax) # Size: 3
.Ltmp1913:
    00000878: 	movdqa	%xmm1, %xmm0
    0000087c: 	addq	$0x10, %rax
    00000880: 	punpcklwd	%xmm1, %xmm0
    00000884: 	movdqa	%xmm0, %xmm5
    00000888: 	punpcklwd	%xmm4, %xmm0
    0000088c: 	punpckhwd	%xmm4, %xmm5
    00000890: 	punpcklwd	%xmm5, %xmm0
    00000894: 	pand	%xmm2, %xmm0
    00000898: 	packuswb	%xmm0, %xmm0
    0000089c: 	paddb	%xmm3, %xmm0
    000008a0: 	movups	%xmm0, -0x10(%rax)
    000008a4: 	cmpq	%rax, %r15
    000008a7: 	jne	.Ltmp1913 # Offset: 2215
    000008a9: 	movl	0x38(%rsp), %ecx
    000008ad: 	cmpl	%ecx, 0x28(%rsp)
    000008b1: 	je	.Ltmp1911 # Offset: 2225
    000008b7: 	cvttsd2si	init_value(%rip), %eax
    000008bf: 	movq	0x50(%rsp), %rcx
    000008c4: 	addl	$0x1, %eax
    000008c7: 	movb	%al, (%rcx)
    000008c9: 	cmpl	0x60(%rsp), %r12d
    000008ce: 	jle	.Ltmp1911 # Offset: 2254
    000008d4: 	cvttsd2si	init_value(%rip), %eax
    000008dc: 	movq	0x70(%rsp), %rsi
    000008e1: 	addl	$0x1, %eax
    000008e4: 	movb	%al, (%rsi)
    000008e6: 	cmpl	0x7c(%rsp), %r12d
    000008eb: 	jle	.Ltmp1911 # Offset: 2283
    000008f1: 	cvttsd2si	init_value(%rip), %eax
    000008f9: 	movq	0x98(%rsp), %rcx
    00000901: 	addl	$0x1, %eax
    00000904: 	movb	%al, (%rcx)
    00000906: 	cmpl	0xa8(%rsp), %r12d
    0000090e: 	jle	.Ltmp1911 # Offset: 2318
    00000914: 	cvttsd2si	init_value(%rip), %eax
    0000091c: 	movq	0xb8(%rsp), %rsi
    00000924: 	addl	$0x1, %eax
    00000927: 	movb	%al, (%rsi)
    00000929: 	cmpl	0xc4(%rsp), %r12d
    00000931: 	jle	.Ltmp1911 # Offset: 2353
    00000937: 	cvttsd2si	init_value(%rip), %eax
    0000093f: 	movq	0xe0(%rsp), %rcx
    00000947: 	addl	$0x1, %eax
    0000094a: 	movb	%al, (%rcx)
    0000094c: 	cmpl	0xf0(%rsp), %r12d
    00000954: 	jle	.Ltmp1911 # Offset: 2388
    0000095a: 	cvttsd2si	init_value(%rip), %eax
    00000962: 	movq	0x100(%rsp), %rsi
    0000096a: 	addl	$0x1, %eax
    0000096d: 	movb	%al, (%rsi)
    0000096f: 	cmpl	0x10c(%rsp), %r12d
    00000977: 	jle	.Ltmp1911 # Offset: 2423
    0000097d: 	cvttsd2si	init_value(%rip), %eax
    00000985: 	movq	0x128(%rsp), %rsi
    0000098d: 	addl	$0x1, %eax
    00000990: 	movb	%al, (%rsi)
    00000992: 	cmpl	0x138(%rsp), %r12d
    0000099a: 	jle	.Ltmp1911 # Offset: 2458
    000009a0: 	cvttsd2si	init_value(%rip), %eax
    000009a8: 	movq	0x148(%rsp), %rcx
    000009b0: 	addl	$0x1, %eax
    000009b3: 	movb	%al, (%rcx)
    000009b5: 	cmpl	0x154(%rsp), %r12d
    000009bd: 	jle	.Ltmp1911 # Offset: 2493
    000009c3: 	cvttsd2si	init_value(%rip), %eax
    000009cb: 	movq	0x170(%rsp), %rcx
    000009d3: 	addl	$0x1, %eax
    000009d6: 	movb	%al, (%rcx)
    000009d8: 	cmpl	0x180(%rsp), %r12d
    000009e0: 	jle	.Ltmp1911 # Offset: 2528
    000009e6: 	cvttsd2si	init_value(%rip), %eax
    000009ee: 	movq	0x190(%rsp), %rsi
    000009f6: 	addl	$0x1, %eax
    000009f9: 	movb	%al, (%rsi)
    000009fb: 	cmpl	0x19c(%rsp), %r12d
    00000a03: 	jle	.Ltmp1911 # Offset: 2563
    00000a09: 	cvttsd2si	init_value(%rip), %eax
    00000a11: 	movq	0x1c0(%rsp), %rsi
    00000a19: 	addl	$0x1, %eax
    00000a1c: 	movb	%al, (%rsi)
    00000a1e: 	cmpl	0x1d0(%rsp), %r12d
    00000a26: 	jle	.Ltmp1911 # Offset: 2598
    00000a28: 	cvttsd2si	init_value(%rip), %eax
    00000a30: 	movq	0x1e0(%rsp), %rcx
    00000a38: 	addl	$0x1, %eax
    00000a3b: 	movb	%al, (%rcx)
    00000a3d: 	cmpl	0x1ec(%rsp), %r12d
    00000a45: 	jle	.Ltmp1911 # Offset: 2629
    00000a47: 	cvttsd2si	init_value(%rip), %eax
    00000a4f: 	movq	0x220(%rsp), %rcx
    00000a57: 	addl	$0x1, %eax
    00000a5a: 	movb	%al, (%rcx)
    00000a5c: 	cmpl	0x22c(%rsp), %r12d
    00000a64: 	jle	.Ltmp1911 # Offset: 2660
    00000a66: 	cvttsd2si	init_value(%rip), %eax
    00000a6e: 	movq	0x248(%rsp), %rcx
    00000a76: 	addl	$0x1, %eax
    00000a79: 	movb	%al, (%rcx)
    00000a7b: 	cmpl	0x258(%rsp), %r12d
    00000a83: 	jle	.Ltmp1911 # Offset: 2691
    00000a85: 	cvttsd2si	init_value(%rip), %eax
    00000a8d: 	movq	0x268(%rsp), %rcx
    00000a95: 	addl	$0x1, %eax
    00000a98: 	movb	%al, (%rcx)
    00000a9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1911:
    00000aa0: 	cmpl	%r12d, %ebx
    00000aa3: 	jle	.Ltmp1914 # Offset: 2723
    00000aa9: 	cmpb	$0x0, 0x2d(%rsp)
    00000aae: 	je	.Ltmp1915 # Offset: 2734
    00000ab4: 	movsd	init_value(%rip), %xmm1
    00000abc: 	movq	0x10(%rsp), %rax
    00000ac1: 	movdqa	DATAat0x36f40(%rip), %xmm6
    00000ac9: 	unpcklpd	%xmm1, %xmm1
    00000acd: 	cvttpd2dq	%xmm1, %xmm1
    00000ad1: 	punpcklqdq	%xmm1, %xmm1
    00000ad5: 	movdqa	%xmm1, %xmm4
    00000ad9: 	punpckhwd	%xmm1, %xmm4
    00000add: 	nopl	(%rax) # Size: 3
.Ltmp1916:
    00000ae0: 	movdqa	%xmm1, %xmm0
    00000ae4: 	addq	$0x10, %rax
    00000ae8: 	punpcklwd	%xmm1, %xmm0
    00000aec: 	movdqa	%xmm0, %xmm5
    00000af0: 	punpcklwd	%xmm4, %xmm0
    00000af4: 	punpckhwd	%xmm4, %xmm5
    00000af8: 	punpcklwd	%xmm5, %xmm0
    00000afc: 	pand	%xmm2, %xmm0
    00000b00: 	packuswb	%xmm0, %xmm0
    00000b04: 	paddb	%xmm6, %xmm0
    00000b08: 	movups	%xmm0, -0x10(%rax)
    00000b0c: 	cmpq	%r13, %rax
    00000b0f: 	jne	.Ltmp1916 # Offset: 2831
    00000b11: 	movl	0x34(%rsp), %ecx
    00000b15: 	cmpl	%ecx, 0x30(%rsp)
    00000b19: 	je	.Ltmp1914 # Offset: 2841
    00000b1f: 	cvttsd2si	init_value(%rip), %eax
    00000b27: 	movq	0x40(%rsp), %rsi
    00000b2c: 	addl	$0x2, %eax
    00000b2f: 	movb	%al, (%rsi)
    00000b31: 	cmpl	0x4c(%rsp), %ebx
    00000b35: 	jle	.Ltmp1914 # Offset: 2869
    00000b3b: 	cvttsd2si	init_value(%rip), %eax
    00000b43: 	movq	0x68(%rsp), %rcx
    00000b48: 	addl	$0x2, %eax
    00000b4b: 	movb	%al, (%rcx)
    00000b4d: 	cmpl	0x78(%rsp), %ebx
    00000b51: 	jle	.Ltmp1914 # Offset: 2897
    00000b57: 	cvttsd2si	init_value(%rip), %eax
    00000b5f: 	movq	0x88(%rsp), %rsi
    00000b67: 	addl	$0x2, %eax
    00000b6a: 	movb	%al, (%rsi)
    00000b6c: 	cmpl	0x94(%rsp), %ebx
    00000b73: 	jle	.Ltmp1914 # Offset: 2931
    00000b79: 	cvttsd2si	init_value(%rip), %eax
    00000b81: 	movq	0xb0(%rsp), %rcx
    00000b89: 	addl	$0x2, %eax
    00000b8c: 	movb	%al, (%rcx)
    00000b8e: 	cmpl	0xc0(%rsp), %ebx
    00000b95: 	jle	.Ltmp1914 # Offset: 2965
    00000b9b: 	cvttsd2si	init_value(%rip), %eax
    00000ba3: 	movq	0xd0(%rsp), %rsi
    00000bab: 	addl	$0x2, %eax
    00000bae: 	movb	%al, (%rsi)
    00000bb0: 	cmpl	0xdc(%rsp), %ebx
    00000bb7: 	jle	.Ltmp1914 # Offset: 2999
    00000bbd: 	cvttsd2si	init_value(%rip), %eax
    00000bc5: 	movq	0xf8(%rsp), %rcx
    00000bcd: 	addl	$0x2, %eax
    00000bd0: 	movb	%al, (%rcx)
    00000bd2: 	cmpl	0x108(%rsp), %ebx
    00000bd9: 	jle	.Ltmp1914 # Offset: 3033
    00000bdf: 	cvttsd2si	init_value(%rip), %eax
    00000be7: 	movq	0x118(%rsp), %rcx
    00000bef: 	addl	$0x2, %eax
    00000bf2: 	movb	%al, (%rcx)
    00000bf4: 	cmpl	0x124(%rsp), %ebx
    00000bfb: 	jle	.Ltmp1914 # Offset: 3067
    00000c01: 	cvttsd2si	init_value(%rip), %eax
    00000c09: 	movq	0x140(%rsp), %rsi
    00000c11: 	addl	$0x2, %eax
    00000c14: 	movb	%al, (%rsi)
    00000c16: 	cmpl	0x150(%rsp), %ebx
    00000c1d: 	jle	.Ltmp1914 # Offset: 3101
    00000c23: 	cvttsd2si	init_value(%rip), %eax
    00000c2b: 	movq	0x160(%rsp), %rsi
    00000c33: 	addl	$0x2, %eax
    00000c36: 	movb	%al, (%rsi)
    00000c38: 	cmpl	0x16c(%rsp), %ebx
    00000c3f: 	jle	.Ltmp1914 # Offset: 3135
    00000c45: 	cvttsd2si	init_value(%rip), %eax
    00000c4d: 	movq	0x188(%rsp), %rcx
    00000c55: 	addl	$0x2, %eax
    00000c58: 	movb	%al, (%rcx)
    00000c5a: 	cmpl	0x198(%rsp), %ebx
    00000c61: 	jle	.Ltmp1914 # Offset: 3169
    00000c67: 	cvttsd2si	init_value(%rip), %eax
    00000c6f: 	movq	0x1b0(%rsp), %rcx
    00000c77: 	addl	$0x2, %eax
    00000c7a: 	movb	%al, (%rcx)
    00000c7c: 	cmpl	0x1bc(%rsp), %ebx
    00000c83: 	jle	.Ltmp1914 # Offset: 3203
    00000c85: 	cvttsd2si	init_value(%rip), %eax
    00000c8d: 	movq	0x1d8(%rsp), %rsi
    00000c95: 	addl	$0x2, %eax
    00000c98: 	movb	%al, (%rsi)
    00000c9a: 	cmpl	0x1e8(%rsp), %ebx
    00000ca1: 	jle	.Ltmp1914 # Offset: 3233
    00000ca3: 	cvttsd2si	init_value(%rip), %eax
    00000cab: 	movq	0x218(%rsp), %rcx
    00000cb3: 	addl	$0x2, %eax
    00000cb6: 	movb	%al, (%rcx)
    00000cb8: 	cmpl	0x228(%rsp), %ebx
    00000cbf: 	jle	.Ltmp1914 # Offset: 3263
    00000cc1: 	cvttsd2si	init_value(%rip), %eax
    00000cc9: 	movq	0x238(%rsp), %rcx
    00000cd1: 	addl	$0x2, %eax
    00000cd4: 	movb	%al, (%rcx)
    00000cd6: 	cmpl	0x244(%rsp), %ebx
    00000cdd: 	jle	.Ltmp1914 # Offset: 3293
    00000cdf: 	cvttsd2si	init_value(%rip), %eax
    00000ce7: 	movq	0x260(%rsp), %rcx
    00000cef: 	addl	$0x2, %eax
    00000cf2: 	movb	%al, (%rcx)
    00000cf4: 	nopl	(%rax) # Size: 4
.Ltmp1914:
    00000cf8: 	addl	$0x1, %ebp
    00000cfb: 	cmpl	%ebp, iterations(%rip)
    00000d01: 	jg	.Ltmp1917 # Offset: 3329
    00000d07: 	movq	%rdi, %rbp
.Ltmp1906:
    00000d0a: 	callq	clock@PLT # Offset: 3338
    00000d0f: 	movq	0x1a8(%rsp), %rdi
    00000d17: 	pxor	%xmm0, %xmm0
    00000d1b: 	movq	%rax, end_time(%rip)
    00000d22: 	subq	start_time(%rip), %rax
    00000d29: 	cvtsi2sd	%rax, %xmm0
    00000d2e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000d36: 	callq	_Z13record_resultdPKc # Offset: 3382
    00000d3b: 	testl	%ebx, %ebx
    00000d3d: 	jle	.Ltmp1918 # Offset: 3389
    00000d43: 	leal	-0x1(%rbx), %eax
    00000d46: 	cmpl	$0xe, %eax
    00000d49: 	jbe	.Ltmp1919 # Offset: 3401
    00000d4f: 	movl	%ebx, %edx
    00000d51: 	movq	%rbp, %rax
    00000d54: 	pxor	%xmm0, %xmm0
    00000d58: 	shrl	$0x4, %edx
    00000d5b: 	subl	$0x1, %edx
    00000d5e: 	shlq	$0x4, %rdx
    00000d62: 	leaq	0x10(%rbp,%rdx), %rdx
    00000d67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1920:
    00000d70: 	movdqu	(%rax), %xmm7
    00000d74: 	addq	$0x10, %rax
    00000d78: 	paddb	%xmm7, %xmm0
    00000d7c: 	cmpq	%rax, %rdx
    00000d7f: 	jne	.Ltmp1920 # Offset: 3455
    00000d81: 	movdqa	%xmm0, %xmm1
    00000d85: 	movl	%ebx, %edx
    00000d87: 	psrldq	$0x8, %xmm1
    00000d8c: 	andl	$-0x10, %edx
    00000d8f: 	paddb	%xmm1, %xmm0
    00000d93: 	pxor	%xmm1, %xmm1
    00000d97: 	movl	%edx, %eax
    00000d99: 	psadbw	%xmm1, %xmm0
    00000d9d: 	movd	%xmm0, %r12d
    00000da2: 	cmpl	%edx, %ebx
    00000da4: 	je	.Ltmp1921 # Offset: 3492
.Ltmp1930:
    00000daa: 	movl	%ebx, %ecx
    00000dac: 	subl	%edx, %ecx
    00000dae: 	leal	-0x1(%rcx), %esi
    00000db1: 	cmpl	$0x6, %esi
    00000db4: 	jbe	.Ltmp1922 # Offset: 3508
    00000db6: 	movq	(%rbp,%rdx), %xmm1
    00000dbc: 	pxor	%xmm0, %xmm0
    00000dc0: 	movdqa	%xmm1, %xmm7
    00000dc4: 	psadbw	%xmm0, %xmm7
    00000dc8: 	movq	%xmm7, 0x278(%rsp)
    00000dd1: 	movq	%xmm7, %rdx
    00000dd6: 	movl	%edx, %esi
    00000dd8: 	movl	%ecx, %edx
    00000dda: 	andl	$-0x8, %edx
    00000ddd: 	addl	%esi, %r12d
    00000de0: 	addl	%edx, %eax
    00000de2: 	cmpl	%ecx, %edx
    00000de4: 	je	.Ltmp1921 # Offset: 3556
.Ltmp1922:
    00000de6: 	movslq	%eax, %rdx
    00000de9: 	addb	(%rbp,%rdx), %r12b
    00000dee: 	leal	0x1(%rax), %edx
    00000df1: 	cmpl	%edx, %ebx
    00000df3: 	jle	.Ltmp1921 # Offset: 3571
    00000df5: 	movslq	%edx, %rdx
    00000df8: 	addb	(%rbp,%rdx), %r12b
    00000dfd: 	leal	0x2(%rax), %edx
    00000e00: 	cmpl	%edx, %ebx
    00000e02: 	jle	.Ltmp1921 # Offset: 3586
    00000e04: 	movslq	%edx, %rdx
    00000e07: 	addb	(%rbp,%rdx), %r12b
    00000e0c: 	leal	0x3(%rax), %edx
    00000e0f: 	cmpl	%ebx, %edx
    00000e11: 	jge	.Ltmp1921 # Offset: 3601
    00000e13: 	movslq	%edx, %rdx
    00000e16: 	addb	(%rbp,%rdx), %r12b
    00000e1b: 	leal	0x4(%rax), %edx
    00000e1e: 	cmpl	%ebx, %edx
    00000e20: 	jge	.Ltmp1921 # Offset: 3616
    00000e22: 	movslq	%edx, %rdx
    00000e25: 	addb	(%rbp,%rdx), %r12b
    00000e2a: 	leal	0x5(%rax), %edx
    00000e2d: 	cmpl	%ebx, %edx
    00000e2f: 	jge	.Ltmp1921 # Offset: 3631
    00000e31: 	movslq	%edx, %rdx
    00000e34: 	addl	$0x6, %eax
    00000e37: 	addb	(%rbp,%rdx), %r12b
    00000e3c: 	cmpl	%eax, %ebx
    00000e3e: 	jle	.Ltmp1921 # Offset: 3646
    00000e40: 	cltq
    00000e42: 	addb	(%rbp,%rax), %r12b
.Ltmp1921:
    00000e47: 	movsd	init_value(%rip), %xmm0
    00000e4f: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000e57: 	addsd	%xmm0, %xmm1
    00000e5b: 	cvttsd2si	%xmm1, %eax
    00000e5f: 	movsd	DATAat0x37030(%rip), %xmm1
    00000e67: 	addsd	%xmm0, %xmm1
    00000e6b: 	cvttsd2si	%xmm1, %ebx
    00000e6f: 	addl	%eax, %ebx
    00000e71: 	cvttsd2si	%xmm0, %eax
    00000e75: 	addl	%eax, %ebx
    00000e77: 	shll	$0x7, %ebx
    00000e7a: 	cmpb	%r12b, %bl
    00000e7d: 	jne	.Ltmp1923 # Offset: 3709
    00000e83: 	movq	0x288(%rsp), %rax
    00000e8b: 	subq	%fs:0x28, %rax
    00000e94: 	jne	.Ltmp1924 # Offset: 3732
    00000e9a: 	addq	$0x298, %rsp
    00000ea1: 	popq	%rbx
    00000ea2: 	popq	%rbp
    00000ea3: 	popq	%r12
    00000ea5: 	popq	%r13
    00000ea7: 	popq	%r14
    00000ea9: 	popq	%r15
    00000eab: 	retq # Offset: 3755
    00000eac: 	nopl	(%rax) # Size: 4
.Ltmp1915:
    00000eb0: 	movq	0x1f8(%rsp), %rax
    00000eb8: 	leal	-0x1(%rbx), %esi
    00000ebb: 	subl	%r12d, %esi
    00000ebe: 	leaq	0x1(%rdi,%rax), %rax
    00000ec3: 	addq	%rax, %rsi
    00000ec6: 	movq	0x10(%rsp), %rax
    00000ecb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1925:
    00000ed0: 	cvttsd2si	init_value(%rip), %edx
    00000ed8: 	addq	$0x1, %rax
    00000edc: 	addl	$0x2, %edx
    00000edf: 	movb	%dl, -0x1(%rax)
    00000ee2: 	cmpq	%rax, %rsi
    00000ee5: 	jne	.Ltmp1925 # Offset: 3813
    00000ee7: 	jmp	.Ltmp1914 # Offset: 3815
    00000eec: 	nopl	(%rax) # Size: 4
.Ltmp1909:
    00000ef0: 	movq	0x210(%rsp), %rax
    00000ef8: 	leaq	0x1(%rdi,%rax), %rsi
    00000efd: 	movl	0x20c(%rsp), %eax
    00000f04: 	addq	%rax, %rsi
    00000f07: 	movq	0x20(%rsp), %rax
    00000f0c: 	nopl	(%rax) # Size: 4
.Ltmp1926:
    00000f10: 	cvttsd2si	init_value(%rip), %edx
    00000f18: 	addq	$0x1, %rax
    00000f1c: 	movb	%dl, -0x1(%rax)
    00000f1f: 	cmpq	%rsi, %rax
    00000f22: 	jne	.Ltmp1926 # Offset: 3874
    00000f24: 	jmp	.Ltmp1908 # Offset: 3876
    00000f29: 	nopl	(%rax) # Size: 7
.Ltmp1912:
    00000f30: 	movq	0x200(%rsp), %rax
    00000f38: 	leaq	0x1(%rdi,%rax), %rsi
    00000f3d: 	leal	-0x1(%r12), %eax
    00000f42: 	subl	%r14d, %eax
    00000f45: 	addq	%rax, %rsi
    00000f48: 	movq	0x18(%rsp), %rax
    00000f4d: 	nopl	(%rax) # Size: 3
.Ltmp1927:
    00000f50: 	cvttsd2si	init_value(%rip), %edx
    00000f58: 	addq	$0x1, %rax
    00000f5c: 	addl	$0x1, %edx
    00000f5f: 	movb	%dl, -0x1(%rax)
    00000f62: 	cmpq	%rsi, %rax
    00000f65: 	jne	.Ltmp1927 # Offset: 3941
    00000f67: 	jmp	.Ltmp1911 # Offset: 3943
.Ltmp1923:
    00000f6c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000f73: 	movl	$0x5, %edx
    00000f78: 	leaq	DATAat0x35004(%rip), %rsi
    00000f7f: 	movq	%rbp, %rdi
    00000f82: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3970
    00000f87: 	cmpq	$0x0, 0x1a8(%rsp)
    00000f90: 	je	.Ltmp1928 # Offset: 3984
    00000f96: 	movq	0x1a8(%rsp), %r15
    00000f9e: 	movq	%r15, %rdi
    00000fa1: 	callq	strlen@PLT # Offset: 4001
    00000fa6: 	movq	%r15, %rsi
    00000fa9: 	movq	%rbp, %rdi
    00000fac: 	movq	%rax, %rdx
    00000faf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4015
.Ltmp1929:
    00000fb4: 	movq	%rbp, %rdi
    00000fb7: 	movl	$0xd, %edx
    00000fbc: 	leaq	DATAat0x3500a(%rip), %rsi
    00000fc3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4035
    00000fc8: 	movb	%r12b, 0x287(%rsp)
    00000fd0: 	movq	%rbp, %rdi
    00000fd3: 	leaq	0x287(%rsp), %r12
    00000fdb: 	movl	$0x1, %edx
    00000fe0: 	movq	%r12, %rsi
    00000fe3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4067
    00000fe8: 	movl	$0xb, %edx
    00000fed: 	leaq	DATAat0x35018(%rip), %rsi
    00000ff4: 	movq	%rax, %rbp
    00000ff7: 	movq	%rax, %rdi
    00000ffa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4090
    00000fff: 	movq	%rbp, %rdi
    00001002: 	movl	$0x1, %edx
    00001007: 	movq	%r12, %rsi
    0000100a: 	movb	%bl, 0x287(%rsp)
    00001011: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4113
    00001016: 	movq	%rax, %rdi
    00001019: 	movq	0x288(%rsp), %rax
    00001021: 	subq	%fs:0x28, %rax
    0000102a: 	jne	.Ltmp1924 # Offset: 4138
    0000102c: 	addq	$0x298, %rsp
    00001033: 	popq	%rbx
    00001034: 	popq	%rbp
    00001035: 	popq	%r12
    00001037: 	popq	%r13
    00001039: 	popq	%r14
    0000103b: 	popq	%r15
    0000103d: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 4157
.Ltmp1928:
    00001042: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001049: 	movq	-0x18(%rax), %rdi
    0000104d: 	addq	%rbp, %rdi
    00001050: 	movl	0x20(%rdi), %esi
    00001053: 	orl	$0x1, %esi
    00001056: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4182
    0000105b: 	jmp	.Ltmp1929 # Offset: 4187
.Ltmp1918:
    00001060: 	xorl	%r12d, %r12d
    00001063: 	jmp	.Ltmp1921 # Offset: 4195
.Ltmp1919:
    00001068: 	xorl	%edx, %edx
    0000106a: 	xorl	%r12d, %r12d
    0000106d: 	xorl	%eax, %eax
    0000106f: 	jmp	.Ltmp1930 # Offset: 4207
.Ltmp1924:
    00001074: 	callq	__stack_chk_fail@PLT # Offset: 4212
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_partial4_replaceIhEvPT_iPKc"

Binary Function "_Z31test_for_loop_partial4_replaceAIhEvPT_iPKc" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x2ce20
  Size        : 0x1087
  MaxSize     : 0x1090
  Offset      : 0x2ce20
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_partial4_replaceAIhEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	leal	0x3(%rsi), %ebp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x298, %rsp
    0000001d: 	movq	%rdx, 0x1b0(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x288(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	testl	%esi, %esi
    0000003a: 	cmovnsl	%esi, %ebp
    0000003d: 	sarl	$0x2, %ebp
    00000040: 	movl	%ebp, 0xc(%rsp)
    00000044: 	callq	clock@PLT # Offset: 68
    00000049: 	movq	%rax, start_time(%rip)
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	testl	%eax, %eax
    00000058: 	jle	.Ltmp1931 # Offset: 88
    0000005e: 	movslq	%ebp, %rsi
    00000061: 	movl	%ebx, %r9d
    00000064: 	subl	%esi, %r9d
    00000067: 	leal	(%rsi,%rsi), %r8d
    0000006b: 	leaq	(%r14,%rsi), %r10
    0000006f: 	movq	%rsi, %r11
    00000072: 	movl	%r9d, %eax
    00000075: 	movl	%r8d, %ecx
    00000078: 	movl	%r9d, 0x40(%rsp)
    0000007d: 	addq	%rsi, %rax
    00000080: 	addl	%esi, %ecx
    00000082: 	movl	%r8d, 0x28(%rsp)
    00000087: 	addq	%r14, %rax
    0000008a: 	movq	%rsi, 0x210(%rsp)
    00000092: 	leaq	init_value(%rip), %rsi
    00000099: 	leaq	0x8(%rsi), %rdx
    0000009d: 	cmpq	%rsi, %rax
    000000a0: 	movq	%r10, 0x20(%rsp)
    000000a5: 	setbe	%al
    000000a8: 	cmpq	%rdx, %r10
    000000ab: 	setae	%dil
    000000af: 	orl	%edi, %eax
    000000b1: 	leal	-0x1(%r9), %edi
    000000b5: 	cmpl	$0xe, %edi
    000000b8: 	seta	%dil
    000000bc: 	andl	%edi, %eax
    000000be: 	movb	%al, 0x2f(%rsp)
    000000c2: 	movl	%r9d, %eax
    000000c5: 	andl	$-0x10, %r9d
    000000c9: 	shrl	$0x4, %eax
    000000cc: 	movl	%r9d, 0x44(%rsp)
    000000d1: 	subl	$0x1, %eax
    000000d4: 	shlq	$0x4, %rax
    000000d8: 	leaq	0x10(%r10,%rax), %rbp
    000000dd: 	movl	%r11d, %eax
    000000e0: 	movl	%ebx, %r10d
    000000e3: 	addl	%r9d, %eax
    000000e6: 	subl	%r8d, %r10d
    000000e9: 	movslq	%eax, %rdi
    000000ec: 	addq	%r14, %rdi
    000000ef: 	movq	%rdi, 0x60(%rsp)
    000000f4: 	leal	0x1(%rax), %edi
    000000f7: 	movl	%edi, 0x70(%rsp)
    000000fb: 	movslq	%edi, %rdi
    000000fe: 	addq	%r14, %rdi
    00000101: 	movq	%rdi, 0x80(%rsp)
    00000109: 	leal	0x2(%rax), %edi
    0000010c: 	movl	%edi, 0x8c(%rsp)
    00000113: 	movslq	%edi, %rdi
    00000116: 	addq	%r14, %rdi
    00000119: 	movq	%rdi, 0xa8(%rsp)
    00000121: 	leal	0x3(%rax), %edi
    00000124: 	movl	%edi, 0xb8(%rsp)
    0000012b: 	movslq	%edi, %rdi
    0000012e: 	addq	%r14, %rdi
    00000131: 	movq	%rdi, 0xc8(%rsp)
    00000139: 	leal	0x4(%rax), %edi
    0000013c: 	movl	%edi, 0xd4(%rsp)
    00000143: 	movslq	%edi, %rdi
    00000146: 	addq	%r14, %rdi
    00000149: 	movq	%rdi, 0xf0(%rsp)
    00000151: 	leal	0x5(%rax), %edi
    00000154: 	movl	%edi, 0x100(%rsp)
    0000015b: 	movslq	%edi, %rdi
    0000015e: 	addq	%r14, %rdi
    00000161: 	movq	%rdi, 0x110(%rsp)
    00000169: 	leal	0x6(%rax), %edi
    0000016c: 	movl	%edi, 0x11c(%rsp)
    00000173: 	movslq	%edi, %rdi
    00000176: 	addq	%r14, %rdi
    00000179: 	movq	%rdi, 0x138(%rsp)
    00000181: 	leal	0x7(%rax), %edi
    00000184: 	movl	%edi, 0x148(%rsp)
    0000018b: 	movslq	%edi, %rdi
    0000018e: 	addq	%r14, %rdi
    00000191: 	movq	%rdi, 0x158(%rsp)
    00000199: 	leal	0x8(%rax), %edi
    0000019c: 	movl	%edi, 0x164(%rsp)
    000001a3: 	movslq	%edi, %rdi
    000001a6: 	addq	%r14, %rdi
    000001a9: 	movq	%rdi, 0x180(%rsp)
    000001b1: 	leal	0x9(%rax), %edi
    000001b4: 	movl	%edi, 0x190(%rsp)
    000001bb: 	movslq	%edi, %rdi
    000001be: 	addq	%r14, %rdi
    000001c1: 	movq	%rdi, 0x1a0(%rsp)
    000001c9: 	leal	0xa(%rax), %edi
    000001cc: 	movl	%edi, 0x1ac(%rsp)
    000001d3: 	movslq	%edi, %rdi
    000001d6: 	addq	%r14, %rdi
    000001d9: 	movq	%rdi, 0x1d0(%rsp)
    000001e1: 	leal	0xb(%rax), %edi
    000001e4: 	movl	%edi, 0x1e0(%rsp)
    000001eb: 	movslq	%edi, %rdi
    000001ee: 	addq	%r14, %rdi
    000001f1: 	movq	%rdi, 0x1f0(%rsp)
    000001f9: 	leal	0xc(%rax), %edi
    000001fc: 	movl	%edi, 0x1fc(%rsp)
    00000203: 	movslq	%edi, %rdi
    00000206: 	addq	%r14, %rdi
    00000209: 	movq	%rdi, 0x230(%rsp)
    00000211: 	leal	0xd(%rax), %edi
    00000214: 	addl	$0xe, %eax
    00000217: 	movl	%edi, 0x240(%rsp)
    0000021e: 	movslq	%edi, %rdi
    00000221: 	addq	%r14, %rdi
    00000224: 	movq	%rdi, 0x250(%rsp)
    0000022c: 	movslq	%r8d, %rdi
    0000022f: 	movl	%eax, 0x25c(%rsp)
    00000236: 	cltq
    00000238: 	leaq	(%r14,%rdi), %r11
    0000023c: 	addq	%r14, %rax
    0000023f: 	movq	%rdi, 0x208(%rsp)
    00000247: 	movq	%rax, 0x270(%rsp)
    0000024f: 	movl	%r10d, %eax
    00000252: 	addq	%rdi, %rax
    00000255: 	movl	%r10d, 0x38(%rsp)
    0000025a: 	addq	%r14, %rax
    0000025d: 	movq	%r11, 0x18(%rsp)
    00000262: 	cmpq	%rsi, %rax
    00000265: 	setbe	%al
    00000268: 	cmpq	%rdx, %r11
    0000026b: 	setae	%dil
    0000026f: 	orl	%edi, %eax
    00000271: 	leal	-0x1(%r10), %edi
    00000275: 	cmpl	$0xe, %edi
    00000278: 	seta	%dil
    0000027c: 	andl	%edi, %eax
    0000027e: 	movb	%al, 0x2e(%rsp)
    00000282: 	movl	%r10d, %eax
    00000285: 	andl	$-0x10, %r10d
    00000289: 	shrl	$0x4, %eax
    0000028c: 	addl	%r10d, %r8d
    0000028f: 	movl	%r10d, 0x3c(%rsp)
    00000294: 	subl	$0x1, %eax
    00000297: 	movslq	%r8d, %rdi
    0000029a: 	movslq	%ecx, %r8
    0000029d: 	shlq	$0x4, %rax
    000002a1: 	leaq	(%r14,%r8), %r9
    000002a5: 	leaq	0x10(%r11,%rax), %r12
    000002aa: 	movq	%rdi, %rax
    000002ad: 	addq	%r14, %rdi
    000002b0: 	movq	%rdi, 0x50(%rsp)
    000002b5: 	leal	0x1(%rax), %edi
    000002b8: 	movl	%edi, 0x5c(%rsp)
    000002bc: 	movslq	%edi, %rdi
    000002bf: 	addq	%r14, %rdi
    000002c2: 	movq	%rdi, 0x78(%rsp)
    000002c7: 	leal	0x2(%rax), %edi
    000002ca: 	movl	%edi, 0x88(%rsp)
    000002d1: 	movslq	%edi, %rdi
    000002d4: 	addq	%r14, %rdi
    000002d7: 	movq	%rdi, 0x98(%rsp)
    000002df: 	leal	0x3(%rax), %edi
    000002e2: 	movl	%edi, 0xa4(%rsp)
    000002e9: 	movslq	%edi, %rdi
    000002ec: 	addq	%r14, %rdi
    000002ef: 	movq	%rdi, 0xc0(%rsp)
    000002f7: 	leal	0x4(%rax), %edi
    000002fa: 	movl	%edi, 0xd0(%rsp)
    00000301: 	movslq	%edi, %rdi
    00000304: 	addq	%r14, %rdi
    00000307: 	movq	%rdi, 0xe0(%rsp)
    0000030f: 	leal	0x5(%rax), %edi
    00000312: 	movl	%edi, 0xec(%rsp)
    00000319: 	movslq	%edi, %rdi
    0000031c: 	addq	%r14, %rdi
    0000031f: 	movq	%rdi, 0x108(%rsp)
    00000327: 	leal	0x6(%rax), %edi
    0000032a: 	movl	%edi, 0x118(%rsp)
    00000331: 	movslq	%edi, %rdi
    00000334: 	addq	%r14, %rdi
    00000337: 	movq	%rdi, 0x128(%rsp)
    0000033f: 	leal	0x7(%rax), %edi
    00000342: 	movl	%edi, 0x134(%rsp)
    00000349: 	movslq	%edi, %rdi
    0000034c: 	addq	%r14, %rdi
    0000034f: 	movq	%rdi, 0x150(%rsp)
    00000357: 	leal	0x8(%rax), %edi
    0000035a: 	movl	%edi, 0x160(%rsp)
    00000361: 	movslq	%edi, %rdi
    00000364: 	addq	%r14, %rdi
    00000367: 	movq	%rdi, 0x170(%rsp)
    0000036f: 	leal	0x9(%rax), %edi
    00000372: 	movl	%edi, 0x17c(%rsp)
    00000379: 	movslq	%edi, %rdi
    0000037c: 	addq	%r14, %rdi
    0000037f: 	movq	%rdi, 0x198(%rsp)
    00000387: 	leal	0xa(%rax), %edi
    0000038a: 	movl	%edi, 0x1a8(%rsp)
    00000391: 	movslq	%edi, %rdi
    00000394: 	addq	%r14, %rdi
    00000397: 	movq	%rdi, 0x1c0(%rsp)
    0000039f: 	leal	0xb(%rax), %edi
    000003a2: 	movl	%edi, 0x1cc(%rsp)
    000003a9: 	movslq	%edi, %rdi
    000003ac: 	addq	%r14, %rdi
    000003af: 	movq	%rdi, 0x1e8(%rsp)
    000003b7: 	leal	0xc(%rax), %edi
    000003ba: 	movl	%edi, 0x1f8(%rsp)
    000003c1: 	movslq	%edi, %rdi
    000003c4: 	addq	%r14, %rdi
    000003c7: 	movq	%rdi, 0x220(%rsp)
    000003cf: 	leal	0xd(%rax), %edi
    000003d2: 	addl	$0xe, %eax
    000003d5: 	movl	%edi, 0x22c(%rsp)
    000003dc: 	movslq	%edi, %rdi
    000003df: 	addq	%r14, %rdi
    000003e2: 	movl	%eax, 0x258(%rsp)
    000003e9: 	cltq
    000003eb: 	movq	%rdi, 0x248(%rsp)
    000003f3: 	movl	%ebx, %edi
    000003f5: 	addq	%r14, %rax
    000003f8: 	subl	%ecx, %edi
    000003fa: 	movq	%rax, 0x268(%rsp)
    00000402: 	movl	%edi, %eax
    00000404: 	movl	%edi, 0x30(%rsp)
    00000408: 	addq	%r8, %rax
    0000040b: 	movq	%r8, 0x200(%rsp)
    00000413: 	addq	%r14, %rax
    00000416: 	movq	%r9, 0x10(%rsp)
    0000041b: 	cmpq	%rsi, %rax
    0000041e: 	setbe	%al
    00000421: 	cmpq	%rdx, %r9
    00000424: 	setae	%dl
    00000427: 	orl	%edx, %eax
    00000429: 	leal	-0x1(%rdi), %edx
    0000042c: 	cmpl	$0xe, %edx
    0000042f: 	seta	%dl
    00000432: 	xorl	%r15d, %r15d
    00000435: 	andl	%edx, %eax
    00000437: 	movb	%al, 0x2d(%rsp)
    0000043b: 	movl	%edi, %eax
    0000043d: 	andl	$-0x10, %edi
    00000440: 	shrl	$0x4, %eax
    00000443: 	movl	%edi, 0x34(%rsp)
    00000447: 	subl	$0x1, %eax
    0000044a: 	shlq	$0x4, %rax
    0000044e: 	leaq	0x10(%r9,%rax), %r13
    00000453: 	movl	%ecx, %eax
    00000455: 	addl	%edi, %eax
    00000457: 	movq	%r14, %rdi
    0000045a: 	movslq	%eax, %rdx
    0000045d: 	leal	0x1(%rax), %esi
    00000460: 	addq	%r14, %rdx
    00000463: 	movl	%esi, 0x58(%rsp)
    00000467: 	movq	%rdx, 0x48(%rsp)
    0000046c: 	movslq	%esi, %rdx
    0000046f: 	leaq	(%r14,%rdx), %rsi
    00000473: 	movq	%rsi, 0x68(%rsp)
    00000478: 	leal	0x2(%rax), %esi
    0000047b: 	movslq	%esi, %rdx
    0000047e: 	movl	%esi, 0x74(%rsp)
    00000482: 	leal	0x3(%rax), %esi
    00000485: 	addq	%r14, %rdx
    00000488: 	movl	%esi, 0xa0(%rsp)
    0000048f: 	movq	%rdx, 0x90(%rsp)
    00000497: 	movslq	%esi, %rdx
    0000049a: 	leaq	(%r14,%rdx), %rsi
    0000049e: 	movq	%rsi, 0xb0(%rsp)
    000004a6: 	leal	0x4(%rax), %esi
    000004a9: 	movslq	%esi, %rdx
    000004ac: 	movl	%esi, 0xbc(%rsp)
    000004b3: 	leal	0x5(%rax), %esi
    000004b6: 	addq	%r14, %rdx
    000004b9: 	movl	%esi, 0xe8(%rsp)
    000004c0: 	movq	%rdx, 0xd8(%rsp)
    000004c8: 	movslq	%esi, %rdx
    000004cb: 	leaq	(%r14,%rdx), %rsi
    000004cf: 	movq	%rsi, 0xf8(%rsp)
    000004d7: 	leal	0x6(%rax), %esi
    000004da: 	movslq	%esi, %rdx
    000004dd: 	movl	%esi, 0x104(%rsp)
    000004e4: 	leal	0x7(%rax), %esi
    000004e7: 	addq	%r14, %rdx
    000004ea: 	movl	%esi, 0x130(%rsp)
    000004f1: 	movq	%rdx, 0x120(%rsp)
    000004f9: 	movslq	%esi, %rdx
    000004fc: 	leaq	(%r14,%rdx), %rsi
    00000500: 	movq	%rsi, 0x140(%rsp)
    00000508: 	leal	0x8(%rax), %esi
    0000050b: 	movslq	%esi, %rdx
    0000050e: 	movl	%esi, 0x14c(%rsp)
    00000515: 	leal	0x9(%rax), %esi
    00000518: 	addq	%r14, %rdx
    0000051b: 	movl	%esi, 0x178(%rsp)
    00000522: 	movq	%rdx, 0x168(%rsp)
    0000052a: 	movslq	%esi, %rdx
    0000052d: 	leaq	(%r14,%rdx), %rsi
    00000531: 	movq	%rsi, 0x188(%rsp)
    00000539: 	leal	0xa(%rax), %esi
    0000053c: 	movslq	%esi, %rdx
    0000053f: 	movl	%esi, 0x194(%rsp)
    00000546: 	leal	0xb(%rax), %esi
    00000549: 	addq	%r14, %rdx
    0000054c: 	movl	%esi, 0x1c8(%rsp)
    00000553: 	movq	%rdx, 0x1b8(%rsp)
    0000055b: 	movslq	%esi, %rdx
    0000055e: 	leaq	(%r14,%rdx), %rsi
    00000562: 	leal	0xc(%rax), %edx
    00000565: 	movl	%edx, 0x1e4(%rsp)
    0000056c: 	movslq	%edx, %rdx
    0000056f: 	addq	%r14, %rdx
    00000572: 	movq	%rsi, 0x1d8(%rsp)
    0000057a: 	leal	0xd(%rax), %esi
    0000057d: 	addl	$0xe, %eax
    00000580: 	movq	%rdx, 0x218(%rsp)
    00000588: 	movslq	%esi, %rdx
    0000058b: 	movdqa	DATAat0x36f20(%rip), %xmm2
    00000593: 	movl	%eax, 0x244(%rsp)
    0000059a: 	cltq
    0000059c: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005a4: 	addq	%r14, %rax
    000005a7: 	movl	%esi, 0x228(%rsp)
    000005ae: 	leaq	(%r14,%rdx), %rsi
    000005b2: 	movq	%r12, %r14
    000005b5: 	movq	%rsi, 0x238(%rsp)
    000005bd: 	movl	%ebx, %r12d
    000005c0: 	movl	%r15d, %ebx
    000005c3: 	movq	%r13, %r15
    000005c6: 	movq	%rax, 0x260(%rsp)
    000005ce: 	movl	%ecx, %r13d
    000005d1: 	nopl	(%rax) # Size: 7
.Ltmp1942:
    000005d8: 	testl	%r12d, %r12d
    000005db: 	jle	.Ltmp1932 # Offset: 1499
    000005dd: 	leal	-0x1(%r12), %edx
    000005e2: 	xorl	%esi, %esi
    000005e4: 	addq	$0x1, %rdx
    000005e8: 	callq	memset@PLT # Offset: 1512
    000005ed: 	movdqa	DATAat0x36f30(%rip), %xmm3
    000005f5: 	movdqa	DATAat0x36f20(%rip), %xmm2
    000005fd: 	movq	%rax, %rdi
.Ltmp1932:
    00000600: 	cmpl	0xc(%rsp), %r12d
    00000605: 	jle	.Ltmp1933 # Offset: 1541
    0000060b: 	cmpb	$0x0, 0x2f(%rsp)
    00000610: 	je	.Ltmp1934 # Offset: 1552
    00000616: 	movsd	init_value(%rip), %xmm1
    0000061e: 	movq	0x20(%rsp), %rax
    00000623: 	unpcklpd	%xmm1, %xmm1
    00000627: 	cvttpd2dq	%xmm1, %xmm1
    0000062b: 	punpcklqdq	%xmm1, %xmm1
    0000062f: 	movdqa	%xmm1, %xmm4
    00000633: 	punpckhwd	%xmm1, %xmm4
    00000637: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1935:
    00000640: 	movdqa	%xmm1, %xmm0
    00000644: 	addq	$0x10, %rax
    00000648: 	punpcklwd	%xmm1, %xmm0
    0000064c: 	movdqa	%xmm0, %xmm5
    00000650: 	punpcklwd	%xmm4, %xmm0
    00000654: 	punpckhwd	%xmm4, %xmm5
    00000658: 	punpcklwd	%xmm5, %xmm0
    0000065c: 	pand	%xmm2, %xmm0
    00000660: 	packuswb	%xmm0, %xmm0
    00000664: 	movups	%xmm0, -0x10(%rax)
    00000668: 	cmpq	%rbp, %rax
    0000066b: 	jne	.Ltmp1935 # Offset: 1643
    0000066d: 	movl	0x44(%rsp), %ecx
    00000671: 	cmpl	%ecx, 0x40(%rsp)
    00000675: 	je	.Ltmp1933 # Offset: 1653
    0000067b: 	cvttsd2si	init_value(%rip), %eax
    00000683: 	movq	0x60(%rsp), %rcx
    00000688: 	movb	%al, (%rcx)
    0000068a: 	cmpl	0x70(%rsp), %r12d
    0000068f: 	jle	.Ltmp1933 # Offset: 1679
    00000695: 	cvttsd2si	init_value(%rip), %eax
    0000069d: 	movq	0x80(%rsp), %rcx
    000006a5: 	movb	%al, (%rcx)
    000006a7: 	cmpl	0x8c(%rsp), %r12d
    000006af: 	jle	.Ltmp1933 # Offset: 1711
    000006b5: 	cvttsd2si	init_value(%rip), %eax
    000006bd: 	movq	0xa8(%rsp), %rcx
    000006c5: 	movb	%al, (%rcx)
    000006c7: 	cmpl	0xb8(%rsp), %r12d
    000006cf: 	jle	.Ltmp1933 # Offset: 1743
    000006d5: 	cvttsd2si	init_value(%rip), %eax
    000006dd: 	movq	0xc8(%rsp), %rsi
    000006e5: 	movb	%al, (%rsi)
    000006e7: 	cmpl	0xd4(%rsp), %r12d
    000006ef: 	jle	.Ltmp1933 # Offset: 1775
    000006f5: 	cvttsd2si	init_value(%rip), %eax
    000006fd: 	movq	0xf0(%rsp), %rcx
    00000705: 	movb	%al, (%rcx)
    00000707: 	cmpl	0x100(%rsp), %r12d
    0000070f: 	jle	.Ltmp1933 # Offset: 1807
    00000715: 	cvttsd2si	init_value(%rip), %eax
    0000071d: 	movq	0x110(%rsp), %rsi
    00000725: 	movb	%al, (%rsi)
    00000727: 	cmpl	0x11c(%rsp), %r12d
    0000072f: 	jle	.Ltmp1933 # Offset: 1839
    00000735: 	cvttsd2si	init_value(%rip), %eax
    0000073d: 	movq	0x138(%rsp), %rcx
    00000745: 	movb	%al, (%rcx)
    00000747: 	cmpl	0x148(%rsp), %r12d
    0000074f: 	jle	.Ltmp1933 # Offset: 1871
    00000755: 	cvttsd2si	init_value(%rip), %eax
    0000075d: 	movq	0x158(%rsp), %rsi
    00000765: 	movb	%al, (%rsi)
    00000767: 	cmpl	0x164(%rsp), %r12d
    0000076f: 	jle	.Ltmp1933 # Offset: 1903
    00000775: 	cvttsd2si	init_value(%rip), %eax
    0000077d: 	movq	0x180(%rsp), %rsi
    00000785: 	movb	%al, (%rsi)
    00000787: 	cmpl	0x190(%rsp), %r12d
    0000078f: 	jle	.Ltmp1933 # Offset: 1935
    00000795: 	cvttsd2si	init_value(%rip), %eax
    0000079d: 	movq	0x1a0(%rsp), %rcx
    000007a5: 	movb	%al, (%rcx)
    000007a7: 	cmpl	0x1ac(%rsp), %r12d
    000007af: 	jle	.Ltmp1933 # Offset: 1967
    000007b5: 	cvttsd2si	init_value(%rip), %eax
    000007bd: 	movq	0x1d0(%rsp), %rcx
    000007c5: 	movb	%al, (%rcx)
    000007c7: 	cmpl	0x1e0(%rsp), %r12d
    000007cf: 	jle	.Ltmp1933 # Offset: 1999
    000007d1: 	cvttsd2si	init_value(%rip), %eax
    000007d9: 	movq	0x1f0(%rsp), %rcx
    000007e1: 	movb	%al, (%rcx)
    000007e3: 	cmpl	0x1fc(%rsp), %r12d
    000007eb: 	jle	.Ltmp1933 # Offset: 2027
    000007ed: 	cvttsd2si	init_value(%rip), %eax
    000007f5: 	movq	0x230(%rsp), %rcx
    000007fd: 	movb	%al, (%rcx)
    000007ff: 	cmpl	0x240(%rsp), %r12d
    00000807: 	jle	.Ltmp1933 # Offset: 2055
    00000809: 	cvttsd2si	init_value(%rip), %eax
    00000811: 	movq	0x250(%rsp), %rcx
    00000819: 	movb	%al, (%rcx)
    0000081b: 	cmpl	0x25c(%rsp), %r12d
    00000823: 	jle	.Ltmp1933 # Offset: 2083
    00000825: 	cvttsd2si	init_value(%rip), %eax
    0000082d: 	movq	0x270(%rsp), %rcx
    00000835: 	movb	%al, (%rcx)
    00000837: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1933:
    00000840: 	cmpl	0x28(%rsp), %r12d
    00000845: 	jle	.Ltmp1936 # Offset: 2117
    0000084b: 	cmpb	$0x0, 0x2e(%rsp)
    00000850: 	je	.Ltmp1937 # Offset: 2128
    00000856: 	movsd	init_value(%rip), %xmm1
    0000085e: 	movq	0x18(%rsp), %rax
    00000863: 	unpcklpd	%xmm1, %xmm1
    00000867: 	cvttpd2dq	%xmm1, %xmm1
    0000086b: 	punpcklqdq	%xmm1, %xmm1
    0000086f: 	movdqa	%xmm1, %xmm4
    00000873: 	punpckhwd	%xmm1, %xmm4
    00000877: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1938:
    00000880: 	movdqa	%xmm1, %xmm0
    00000884: 	addq	$0x10, %rax
    00000888: 	punpcklwd	%xmm1, %xmm0
    0000088c: 	movdqa	%xmm0, %xmm5
    00000890: 	punpcklwd	%xmm4, %xmm0
    00000894: 	punpckhwd	%xmm4, %xmm5
    00000898: 	punpcklwd	%xmm5, %xmm0
    0000089c: 	pand	%xmm2, %xmm0
    000008a0: 	packuswb	%xmm0, %xmm0
    000008a4: 	paddb	%xmm3, %xmm0
    000008a8: 	movups	%xmm0, -0x10(%rax)
    000008ac: 	cmpq	%rax, %r14
    000008af: 	jne	.Ltmp1938 # Offset: 2223
    000008b1: 	movl	0x3c(%rsp), %ecx
    000008b5: 	cmpl	%ecx, 0x38(%rsp)
    000008b9: 	je	.Ltmp1936 # Offset: 2233
    000008bf: 	cvttsd2si	init_value(%rip), %eax
    000008c7: 	movq	0x50(%rsp), %rcx
    000008cc: 	addl	$0x1, %eax
    000008cf: 	movb	%al, (%rcx)
    000008d1: 	cmpl	0x5c(%rsp), %r12d
    000008d6: 	jle	.Ltmp1936 # Offset: 2262
    000008dc: 	cvttsd2si	init_value(%rip), %eax
    000008e4: 	movq	0x78(%rsp), %rcx
    000008e9: 	addl	$0x1, %eax
    000008ec: 	movb	%al, (%rcx)
    000008ee: 	cmpl	0x88(%rsp), %r12d
    000008f6: 	jle	.Ltmp1936 # Offset: 2294
    000008fc: 	cvttsd2si	init_value(%rip), %eax
    00000904: 	movq	0x98(%rsp), %rsi
    0000090c: 	addl	$0x1, %eax
    0000090f: 	movb	%al, (%rsi)
    00000911: 	cmpl	0xa4(%rsp), %r12d
    00000919: 	jle	.Ltmp1936 # Offset: 2329
    0000091f: 	cvttsd2si	init_value(%rip), %eax
    00000927: 	movq	0xc0(%rsp), %rcx
    0000092f: 	addl	$0x1, %eax
    00000932: 	movb	%al, (%rcx)
    00000934: 	cmpl	0xd0(%rsp), %r12d
    0000093c: 	jle	.Ltmp1936 # Offset: 2364
    00000942: 	cvttsd2si	init_value(%rip), %eax
    0000094a: 	movq	0xe0(%rsp), %rsi
    00000952: 	addl	$0x1, %eax
    00000955: 	movb	%al, (%rsi)
    00000957: 	cmpl	0xec(%rsp), %r12d
    0000095f: 	jle	.Ltmp1936 # Offset: 2399
    00000965: 	cvttsd2si	init_value(%rip), %eax
    0000096d: 	movq	0x108(%rsp), %rcx
    00000975: 	addl	$0x1, %eax
    00000978: 	movb	%al, (%rcx)
    0000097a: 	cmpl	0x118(%rsp), %r12d
    00000982: 	jle	.Ltmp1936 # Offset: 2434
    00000988: 	cvttsd2si	init_value(%rip), %eax
    00000990: 	movq	0x128(%rsp), %rsi
    00000998: 	addl	$0x1, %eax
    0000099b: 	movb	%al, (%rsi)
    0000099d: 	cmpl	0x134(%rsp), %r12d
    000009a5: 	jle	.Ltmp1936 # Offset: 2469
    000009ab: 	cvttsd2si	init_value(%rip), %eax
    000009b3: 	movq	0x150(%rsp), %rsi
    000009bb: 	addl	$0x1, %eax
    000009be: 	movb	%al, (%rsi)
    000009c0: 	cmpl	0x160(%rsp), %r12d
    000009c8: 	jle	.Ltmp1936 # Offset: 2504
    000009ce: 	cvttsd2si	init_value(%rip), %eax
    000009d6: 	movq	0x170(%rsp), %rcx
    000009de: 	addl	$0x1, %eax
    000009e1: 	movb	%al, (%rcx)
    000009e3: 	cmpl	0x17c(%rsp), %r12d
    000009eb: 	jle	.Ltmp1936 # Offset: 2539
    000009f1: 	cvttsd2si	init_value(%rip), %eax
    000009f9: 	movq	0x198(%rsp), %rcx
    00000a01: 	addl	$0x1, %eax
    00000a04: 	movb	%al, (%rcx)
    00000a06: 	cmpl	0x1a8(%rsp), %r12d
    00000a0e: 	jle	.Ltmp1936 # Offset: 2574
    00000a14: 	cvttsd2si	init_value(%rip), %eax
    00000a1c: 	movq	0x1c0(%rsp), %rcx
    00000a24: 	addl	$0x1, %eax
    00000a27: 	movb	%al, (%rcx)
    00000a29: 	cmpl	0x1cc(%rsp), %r12d
    00000a31: 	jle	.Ltmp1936 # Offset: 2609
    00000a33: 	cvttsd2si	init_value(%rip), %eax
    00000a3b: 	movq	0x1e8(%rsp), %rcx
    00000a43: 	addl	$0x1, %eax
    00000a46: 	movb	%al, (%rcx)
    00000a48: 	cmpl	0x1f8(%rsp), %r12d
    00000a50: 	jle	.Ltmp1936 # Offset: 2640
    00000a52: 	cvttsd2si	init_value(%rip), %eax
    00000a5a: 	movq	0x220(%rsp), %rcx
    00000a62: 	addl	$0x1, %eax
    00000a65: 	movb	%al, (%rcx)
    00000a67: 	cmpl	0x22c(%rsp), %r12d
    00000a6f: 	jle	.Ltmp1936 # Offset: 2671
    00000a71: 	cvttsd2si	init_value(%rip), %eax
    00000a79: 	movq	0x248(%rsp), %rcx
    00000a81: 	addl	$0x1, %eax
    00000a84: 	movb	%al, (%rcx)
    00000a86: 	cmpl	0x258(%rsp), %r12d
    00000a8e: 	jle	.Ltmp1936 # Offset: 2702
    00000a90: 	cvttsd2si	init_value(%rip), %eax
    00000a98: 	movq	0x268(%rsp), %rcx
    00000aa0: 	addl	$0x1, %eax
    00000aa3: 	movb	%al, (%rcx)
    00000aa5: 	nopl	(%rax) # Size: 3
.Ltmp1936:
    00000aa8: 	cmpl	%r13d, %r12d
    00000aab: 	jle	.Ltmp1939 # Offset: 2731
    00000ab1: 	cmpb	$0x0, 0x2d(%rsp)
    00000ab6: 	je	.Ltmp1940 # Offset: 2742
    00000abc: 	movsd	init_value(%rip), %xmm1
    00000ac4: 	movq	0x10(%rsp), %rax
    00000ac9: 	movdqa	DATAat0x36f40(%rip), %xmm6
    00000ad1: 	unpcklpd	%xmm1, %xmm1
    00000ad5: 	cvttpd2dq	%xmm1, %xmm1
    00000ad9: 	punpcklqdq	%xmm1, %xmm1
    00000add: 	movdqa	%xmm1, %xmm4
    00000ae1: 	punpckhwd	%xmm1, %xmm4
    00000ae5: 	nopl	(%rax) # Size: 3
.Ltmp1941:
    00000ae8: 	movdqa	%xmm1, %xmm0
    00000aec: 	addq	$0x10, %rax
    00000af0: 	punpcklwd	%xmm1, %xmm0
    00000af4: 	movdqa	%xmm0, %xmm5
    00000af8: 	punpcklwd	%xmm4, %xmm0
    00000afc: 	punpckhwd	%xmm4, %xmm5
    00000b00: 	punpcklwd	%xmm5, %xmm0
    00000b04: 	pand	%xmm2, %xmm0
    00000b08: 	packuswb	%xmm0, %xmm0
    00000b0c: 	paddb	%xmm6, %xmm0
    00000b10: 	movups	%xmm0, -0x10(%rax)
    00000b14: 	cmpq	%r15, %rax
    00000b17: 	jne	.Ltmp1941 # Offset: 2839
    00000b19: 	movl	0x34(%rsp), %ecx
    00000b1d: 	cmpl	%ecx, 0x30(%rsp)
    00000b21: 	je	.Ltmp1939 # Offset: 2849
    00000b27: 	cvttsd2si	init_value(%rip), %eax
    00000b2f: 	movq	0x48(%rsp), %rcx
    00000b34: 	addl	$0x2, %eax
    00000b37: 	movb	%al, (%rcx)
    00000b39: 	cmpl	0x58(%rsp), %r12d
    00000b3e: 	jle	.Ltmp1939 # Offset: 2878
    00000b44: 	cvttsd2si	init_value(%rip), %eax
    00000b4c: 	movq	0x68(%rsp), %rsi
    00000b51: 	addl	$0x2, %eax
    00000b54: 	movb	%al, (%rsi)
    00000b56: 	cmpl	0x74(%rsp), %r12d
    00000b5b: 	jle	.Ltmp1939 # Offset: 2907
    00000b61: 	cvttsd2si	init_value(%rip), %eax
    00000b69: 	movq	0x90(%rsp), %rcx
    00000b71: 	addl	$0x2, %eax
    00000b74: 	movb	%al, (%rcx)
    00000b76: 	cmpl	0xa0(%rsp), %r12d
    00000b7e: 	jle	.Ltmp1939 # Offset: 2942
    00000b84: 	cvttsd2si	init_value(%rip), %eax
    00000b8c: 	movq	0xb0(%rsp), %rsi
    00000b94: 	addl	$0x2, %eax
    00000b97: 	movb	%al, (%rsi)
    00000b99: 	cmpl	0xbc(%rsp), %r12d
    00000ba1: 	jle	.Ltmp1939 # Offset: 2977
    00000ba7: 	cvttsd2si	init_value(%rip), %eax
    00000baf: 	movq	0xd8(%rsp), %rcx
    00000bb7: 	addl	$0x2, %eax
    00000bba: 	movb	%al, (%rcx)
    00000bbc: 	cmpl	0xe8(%rsp), %r12d
    00000bc4: 	jle	.Ltmp1939 # Offset: 3012
    00000bca: 	cvttsd2si	init_value(%rip), %eax
    00000bd2: 	movq	0xf8(%rsp), %rsi
    00000bda: 	addl	$0x2, %eax
    00000bdd: 	movb	%al, (%rsi)
    00000bdf: 	cmpl	0x104(%rsp), %r12d
    00000be7: 	jle	.Ltmp1939 # Offset: 3047
    00000bed: 	cvttsd2si	init_value(%rip), %eax
    00000bf5: 	movq	0x120(%rsp), %rcx
    00000bfd: 	addl	$0x2, %eax
    00000c00: 	movb	%al, (%rcx)
    00000c02: 	cmpl	0x130(%rsp), %r12d
    00000c0a: 	jle	.Ltmp1939 # Offset: 3082
    00000c10: 	cvttsd2si	init_value(%rip), %eax
    00000c18: 	movq	0x140(%rsp), %rcx
    00000c20: 	addl	$0x2, %eax
    00000c23: 	movb	%al, (%rcx)
    00000c25: 	cmpl	0x14c(%rsp), %r12d
    00000c2d: 	jle	.Ltmp1939 # Offset: 3117
    00000c33: 	cvttsd2si	init_value(%rip), %eax
    00000c3b: 	movq	0x168(%rsp), %rsi
    00000c43: 	addl	$0x2, %eax
    00000c46: 	movb	%al, (%rsi)
    00000c48: 	cmpl	0x178(%rsp), %r12d
    00000c50: 	jle	.Ltmp1939 # Offset: 3152
    00000c56: 	cvttsd2si	init_value(%rip), %eax
    00000c5e: 	movq	0x188(%rsp), %rsi
    00000c66: 	addl	$0x2, %eax
    00000c69: 	movb	%al, (%rsi)
    00000c6b: 	cmpl	0x194(%rsp), %r12d
    00000c73: 	jle	.Ltmp1939 # Offset: 3187
    00000c79: 	cvttsd2si	init_value(%rip), %eax
    00000c81: 	movq	0x1b8(%rsp), %rcx
    00000c89: 	addl	$0x2, %eax
    00000c8c: 	movb	%al, (%rcx)
    00000c8e: 	cmpl	0x1c8(%rsp), %r12d
    00000c96: 	jle	.Ltmp1939 # Offset: 3222
    00000c98: 	cvttsd2si	init_value(%rip), %eax
    00000ca0: 	movq	0x1d8(%rsp), %rsi
    00000ca8: 	addl	$0x2, %eax
    00000cab: 	movb	%al, (%rsi)
    00000cad: 	cmpl	0x1e4(%rsp), %r12d
    00000cb5: 	jle	.Ltmp1939 # Offset: 3253
    00000cb7: 	cvttsd2si	init_value(%rip), %eax
    00000cbf: 	movq	0x218(%rsp), %rcx
    00000cc7: 	addl	$0x2, %eax
    00000cca: 	movb	%al, (%rcx)
    00000ccc: 	cmpl	0x228(%rsp), %r12d
    00000cd4: 	jle	.Ltmp1939 # Offset: 3284
    00000cd6: 	cvttsd2si	init_value(%rip), %eax
    00000cde: 	movq	0x238(%rsp), %rcx
    00000ce6: 	addl	$0x2, %eax
    00000ce9: 	movb	%al, (%rcx)
    00000ceb: 	cmpl	0x244(%rsp), %r12d
    00000cf3: 	jle	.Ltmp1939 # Offset: 3315
    00000cf5: 	cvttsd2si	init_value(%rip), %eax
    00000cfd: 	movq	0x260(%rsp), %rcx
    00000d05: 	addl	$0x2, %eax
    00000d08: 	movb	%al, (%rcx)
    00000d0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1939:
    00000d10: 	addl	$0x1, %ebx
    00000d13: 	cmpl	%ebx, iterations(%rip)
    00000d19: 	jg	.Ltmp1942 # Offset: 3353
    00000d1f: 	movq	%rdi, %r14
    00000d22: 	movl	%r12d, %ebx
.Ltmp1931:
    00000d25: 	callq	clock@PLT # Offset: 3365
    00000d2a: 	movq	0x1b0(%rsp), %rdi
    00000d32: 	pxor	%xmm0, %xmm0
    00000d36: 	movq	%rax, end_time(%rip)
    00000d3d: 	subq	start_time(%rip), %rax
    00000d44: 	cvtsi2sd	%rax, %xmm0
    00000d49: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000d51: 	callq	_Z13record_resultdPKc # Offset: 3409
    00000d56: 	testl	%ebx, %ebx
    00000d58: 	jle	.Ltmp1943 # Offset: 3416
    00000d5e: 	leal	-0x1(%rbx), %eax
    00000d61: 	cmpl	$0xe, %eax
    00000d64: 	jbe	.Ltmp1944 # Offset: 3428
    00000d6a: 	movl	%ebx, %edx
    00000d6c: 	movq	%r14, %rax
    00000d6f: 	pxor	%xmm0, %xmm0
    00000d73: 	shrl	$0x4, %edx
    00000d76: 	subl	$0x1, %edx
    00000d79: 	shlq	$0x4, %rdx
    00000d7d: 	leaq	0x10(%r14,%rdx), %rdx
    00000d82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1945:
    00000d88: 	movdqu	(%rax), %xmm7
    00000d8c: 	addq	$0x10, %rax
    00000d90: 	paddb	%xmm7, %xmm0
    00000d94: 	cmpq	%rax, %rdx
    00000d97: 	jne	.Ltmp1945 # Offset: 3479
    00000d99: 	movdqa	%xmm0, %xmm1
    00000d9d: 	movl	%ebx, %edx
    00000d9f: 	psrldq	$0x8, %xmm1
    00000da4: 	andl	$-0x10, %edx
    00000da7: 	paddb	%xmm1, %xmm0
    00000dab: 	pxor	%xmm1, %xmm1
    00000daf: 	movl	%edx, %eax
    00000db1: 	psadbw	%xmm1, %xmm0
    00000db5: 	movd	%xmm0, %ebp
    00000db9: 	cmpl	%edx, %ebx
    00000dbb: 	je	.Ltmp1946 # Offset: 3515
.Ltmp1955:
    00000dc1: 	movl	%ebx, %esi
    00000dc3: 	subl	%edx, %esi
    00000dc5: 	leal	-0x1(%rsi), %edi
    00000dc8: 	cmpl	$0x6, %edi
    00000dcb: 	jbe	.Ltmp1947 # Offset: 3531
    00000dcd: 	movq	(%r14,%rdx), %xmm1
    00000dd3: 	pxor	%xmm0, %xmm0
    00000dd7: 	movdqa	%xmm1, %xmm7
    00000ddb: 	psadbw	%xmm0, %xmm7
    00000ddf: 	movq	%xmm7, 0x278(%rsp)
    00000de8: 	movq	%xmm7, %rdx
    00000ded: 	movl	%edx, %edi
    00000def: 	movl	%esi, %edx
    00000df1: 	andl	$-0x8, %edx
    00000df4: 	addl	%edi, %ebp
    00000df6: 	addl	%edx, %eax
    00000df8: 	cmpl	%esi, %edx
    00000dfa: 	je	.Ltmp1946 # Offset: 3578
.Ltmp1947:
    00000dfc: 	movslq	%eax, %rdx
    00000dff: 	addb	(%r14,%rdx), %bpl
    00000e03: 	leal	0x1(%rax), %edx
    00000e06: 	cmpl	%edx, %ebx
    00000e08: 	jle	.Ltmp1946 # Offset: 3592
    00000e0a: 	movslq	%edx, %rdx
    00000e0d: 	addb	(%r14,%rdx), %bpl
    00000e11: 	leal	0x2(%rax), %edx
    00000e14: 	cmpl	%edx, %ebx
    00000e16: 	jle	.Ltmp1946 # Offset: 3606
    00000e18: 	movslq	%edx, %rdx
    00000e1b: 	addb	(%r14,%rdx), %bpl
    00000e1f: 	leal	0x3(%rax), %edx
    00000e22: 	cmpl	%ebx, %edx
    00000e24: 	jge	.Ltmp1946 # Offset: 3620
    00000e26: 	movslq	%edx, %rdx
    00000e29: 	addb	(%r14,%rdx), %bpl
    00000e2d: 	leal	0x4(%rax), %edx
    00000e30: 	cmpl	%ebx, %edx
    00000e32: 	jge	.Ltmp1946 # Offset: 3634
    00000e34: 	movslq	%edx, %rdx
    00000e37: 	addb	(%r14,%rdx), %bpl
    00000e3b: 	leal	0x5(%rax), %edx
    00000e3e: 	cmpl	%ebx, %edx
    00000e40: 	jge	.Ltmp1946 # Offset: 3648
    00000e42: 	movslq	%edx, %rdx
    00000e45: 	addl	$0x6, %eax
    00000e48: 	addb	(%r14,%rdx), %bpl
    00000e4c: 	cmpl	%eax, %ebx
    00000e4e: 	jle	.Ltmp1946 # Offset: 3662
    00000e50: 	cltq
    00000e52: 	addb	(%r14,%rax), %bpl
.Ltmp1946:
    00000e56: 	movsd	init_value(%rip), %xmm0
    00000e5e: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000e66: 	addsd	%xmm0, %xmm1
    00000e6a: 	cvttsd2si	%xmm1, %eax
    00000e6e: 	movsd	DATAat0x37030(%rip), %xmm1
    00000e76: 	addsd	%xmm0, %xmm1
    00000e7a: 	cvttsd2si	%xmm1, %ebx
    00000e7e: 	addl	%eax, %ebx
    00000e80: 	cvttsd2si	%xmm0, %eax
    00000e84: 	addl	%eax, %ebx
    00000e86: 	shll	$0x7, %ebx
    00000e89: 	cmpb	%bpl, %bl
    00000e8c: 	jne	.Ltmp1948 # Offset: 3724
    00000e92: 	movq	0x288(%rsp), %rax
    00000e9a: 	subq	%fs:0x28, %rax
    00000ea3: 	jne	.Ltmp1949 # Offset: 3747
    00000ea9: 	addq	$0x298, %rsp
    00000eb0: 	popq	%rbx
    00000eb1: 	popq	%rbp
    00000eb2: 	popq	%r12
    00000eb4: 	popq	%r13
    00000eb6: 	popq	%r14
    00000eb8: 	popq	%r15
    00000eba: 	retq # Offset: 3770
    00000ebb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1940:
    00000ec0: 	movq	0x200(%rsp), %rax
    00000ec8: 	leaq	0x1(%rdi,%rax), %rsi
    00000ecd: 	leal	-0x1(%r12), %eax
    00000ed2: 	subl	%r13d, %eax
    00000ed5: 	addq	%rax, %rsi
    00000ed8: 	movq	0x10(%rsp), %rax
    00000edd: 	nopl	(%rax) # Size: 3
.Ltmp1950:
    00000ee0: 	cvttsd2si	init_value(%rip), %edx
    00000ee8: 	addq	$0x1, %rax
    00000eec: 	addl	$0x2, %edx
    00000eef: 	movb	%dl, -0x1(%rax)
    00000ef2: 	cmpq	%rsi, %rax
    00000ef5: 	jne	.Ltmp1950 # Offset: 3829
    00000ef7: 	jmp	.Ltmp1939 # Offset: 3831
    00000efc: 	nopl	(%rax) # Size: 4
.Ltmp1934:
    00000f00: 	movq	0x210(%rsp), %rax
    00000f08: 	leal	-0x1(%r12), %esi
    00000f0d: 	subl	0xc(%rsp), %esi
    00000f11: 	leaq	0x1(%rdi,%rax), %rax
    00000f16: 	addq	%rax, %rsi
    00000f19: 	movq	0x20(%rsp), %rax
    00000f1e: 	nop # Size: 2
.Ltmp1951:
    00000f20: 	cvttsd2si	init_value(%rip), %edx
    00000f28: 	addq	$0x1, %rax
    00000f2c: 	movb	%dl, -0x1(%rax)
    00000f2f: 	cmpq	%rsi, %rax
    00000f32: 	jne	.Ltmp1951 # Offset: 3890
    00000f34: 	jmp	.Ltmp1933 # Offset: 3892
    00000f39: 	nopl	(%rax) # Size: 7
.Ltmp1937:
    00000f40: 	movq	0x208(%rsp), %rax
    00000f48: 	leaq	0x1(%rdi,%rax), %rsi
    00000f4d: 	leal	-0x1(%r12), %eax
    00000f52: 	subl	0x28(%rsp), %eax
    00000f56: 	addq	%rax, %rsi
    00000f59: 	movq	0x18(%rsp), %rax
    00000f5e: 	nop # Size: 2
.Ltmp1952:
    00000f60: 	cvttsd2si	init_value(%rip), %edx
    00000f68: 	addq	$0x1, %rax
    00000f6c: 	addl	$0x1, %edx
    00000f6f: 	movb	%dl, -0x1(%rax)
    00000f72: 	cmpq	%rsi, %rax
    00000f75: 	jne	.Ltmp1952 # Offset: 3957
    00000f77: 	jmp	.Ltmp1936 # Offset: 3959
.Ltmp1948:
    00000f7c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000f83: 	movl	$0x5, %edx
    00000f88: 	leaq	DATAat0x35004(%rip), %rsi
    00000f8f: 	movq	%r12, %rdi
    00000f92: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3986
    00000f97: 	cmpq	$0x0, 0x1b0(%rsp)
    00000fa0: 	je	.Ltmp1953 # Offset: 4000
    00000fa6: 	movq	0x1b0(%rsp), %r15
    00000fae: 	movq	%r15, %rdi
    00000fb1: 	callq	strlen@PLT # Offset: 4017
    00000fb6: 	movq	%r15, %rsi
    00000fb9: 	movq	%r12, %rdi
    00000fbc: 	movq	%rax, %rdx
    00000fbf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4031
.Ltmp1954:
    00000fc4: 	movl	$0xd, %edx
    00000fc9: 	leaq	DATAat0x3500a(%rip), %rsi
    00000fd0: 	movq	%r12, %rdi
    00000fd3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4051
    00000fd8: 	leaq	0x287(%rsp), %r13
    00000fe0: 	movq	%r12, %rdi
    00000fe3: 	movl	$0x1, %edx
    00000fe8: 	movq	%r13, %rsi
    00000feb: 	movb	%bpl, 0x287(%rsp)
    00000ff3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4083
    00000ff8: 	movl	$0xb, %edx
    00000ffd: 	leaq	DATAat0x35018(%rip), %rsi
    00001004: 	movq	%rax, %rbp
    00001007: 	movq	%rax, %rdi
    0000100a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4106
    0000100f: 	movq	%rbp, %rdi
    00001012: 	movl	$0x1, %edx
    00001017: 	movq	%r13, %rsi
    0000101a: 	movb	%bl, 0x287(%rsp)
    00001021: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4129
    00001026: 	movq	%rax, %rdi
    00001029: 	movq	0x288(%rsp), %rax
    00001031: 	subq	%fs:0x28, %rax
    0000103a: 	jne	.Ltmp1949 # Offset: 4154
    0000103c: 	addq	$0x298, %rsp
    00001043: 	popq	%rbx
    00001044: 	popq	%rbp
    00001045: 	popq	%r12
    00001047: 	popq	%r13
    00001049: 	popq	%r14
    0000104b: 	popq	%r15
    0000104d: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 4173
.Ltmp1953:
    00001052: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001059: 	movq	-0x18(%rax), %rdi
    0000105d: 	addq	%r12, %rdi
    00001060: 	movl	0x20(%rdi), %esi
    00001063: 	orl	$0x1, %esi
    00001066: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 4198
    0000106b: 	jmp	.Ltmp1954 # Offset: 4203
.Ltmp1943:
    00001070: 	xorl	%ebp, %ebp
    00001072: 	jmp	.Ltmp1946 # Offset: 4210
.Ltmp1944:
    00001077: 	xorl	%edx, %edx
    00001079: 	xorl	%ebp, %ebp
    0000107b: 	xorl	%eax, %eax
    0000107d: 	jmp	.Ltmp1955 # Offset: 4221
.Ltmp1949:
    00001082: 	callq	__stack_chk_fail@PLT # Offset: 4226
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_partial4_replaceAIhEvPT_iPKc"

Binary Function "_Z30test_loop_partial4_replace_optIiEvPT_iPKc" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x2deb0
  Size        : 0x58e
  MaxSize     : 0x590
  Offset      : 0x2deb0
  Section     : .text
  Orc Section : .local.text._Z30test_loop_partial4_replace_optIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %ecx
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	testl	%esi, %esi
    0000001d: 	cmovnsl	%esi, %ecx
    00000020: 	movq	%rdi, 0x10(%rsp)
    00000025: 	movq	%rdx, 0xc8(%rsp)
    0000002d: 	sarl	$0x2, %ecx
    00000030: 	movl	%ecx, (%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movq	0x10(%rsp), %r9
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movl	iterations(%rip), %eax
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp1956 # Offset: 76
    00000052: 	cvttsd2si	init_value(%rip), %r11d
    0000005b: 	movl	(%rsp), %ecx
    0000005e: 	cmpl	$0x3, %r13d
    00000062: 	leal	(%rcx,%rcx), %r14d
    00000066: 	movl	%ecx, 0x10(%rsp)
    0000006a: 	movl	%r14d, %esi
    0000006d: 	leal	(%r14,%rcx), %r15d
    00000071: 	leal	0x2(%r11), %eax
    00000075: 	leal	0x1(%r11), %r10d
    00000079: 	movd	%r11d, %xmm5
    0000007e: 	movl	%eax, 0x24(%rsp)
    00000082: 	leal	-0x1(%rcx), %eax
    00000085: 	pshufd	$0x0, %xmm5, %xmm1
    0000008a: 	movq	%rax, %rdi
    0000008d: 	leaq	0x4(,%rax,4), %rdx
    00000095: 	movl	%eax, 0x30(%rsp)
    00000099: 	movl	$0x4, %eax
    0000009e: 	cmovgq	%rdx, %rax
    000000a2: 	subl	%ecx, %esi
    000000a4: 	leal	-0x1(%rsi), %edx
    000000a7: 	movl	%esi, 0x58(%rsp)
    000000ab: 	movq	%rax, 0x28(%rsp)
    000000b0: 	movslq	%ecx, %rax
    000000b3: 	leaq	(%r9,%rax,4), %rbx
    000000b7: 	movl	%esi, %eax
    000000b9: 	andl	$-0x4, %esi
    000000bc: 	movl	%edx, 0x40(%rsp)
    000000c0: 	shrl	$0x2, %eax
    000000c3: 	movq	%rbx, 0x60(%rsp)
    000000c8: 	subl	$0x1, %eax
    000000cb: 	movl	%esi, 0x5c(%rsp)
    000000cf: 	shlq	$0x4, %rax
    000000d3: 	cmpl	$0x2, %edx
    000000d6: 	leaq	0x10(%rbx,%rax), %r12
    000000db: 	leal	(%rcx,%rsi), %eax
    000000de: 	cmovbel	%ecx, %eax
    000000e1: 	movslq	%eax, %rdx
    000000e4: 	leaq	(%r9,%rdx,4), %rbx
    000000e8: 	leal	0x1(%rax), %edx
    000000eb: 	addl	$0x2, %eax
    000000ee: 	movl	%eax, 0xac(%rsp)
    000000f5: 	cltq
    000000f7: 	leaq	(%r9,%rax,4), %rax
    000000fb: 	movl	%edx, 0x88(%rsp)
    00000102: 	movslq	%edx, %rdx
    00000105: 	movq	%rax, 0xc0(%rsp)
    0000010d: 	movslq	%r14d, %rax
    00000110: 	leaq	(%r9,%rax,4), %rsi
    00000114: 	movl	%ecx, %eax
    00000116: 	movq	%rbx, 0x80(%rsp)
    0000011e: 	leaq	(%r9,%rdx,4), %rbx
    00000122: 	shrl	$0x2, %eax
    00000125: 	movq	%rbx, 0xa0(%rsp)
    0000012d: 	leal	-0x1(%rax), %ebx
    00000130: 	movl	%ecx, %eax
    00000132: 	movq	%rsi, 0x38(%rsp)
    00000137: 	movl	%r13d, %ecx
    0000013a: 	addq	$0x1, %rbx
    0000013e: 	andl	$-0x4, %eax
    00000141: 	shlq	$0x4, %rbx
    00000145: 	movl	%eax, 0x54(%rsp)
    00000149: 	addl	%r14d, %eax
    0000014c: 	addq	%rsi, %rbx
    0000014f: 	cmpl	$0x2, %edi
    00000152: 	cmovbel	%r14d, %eax
    00000156: 	leal	0x1(%rax), %esi
    00000159: 	movslq	%eax, %rdx
    0000015c: 	addl	$0x2, %eax
    0000015f: 	leaq	(%r9,%rdx,4), %rdi
    00000163: 	movl	%eax, 0xa8(%rsp)
    0000016a: 	cltq
    0000016c: 	movslq	%esi, %rdx
    0000016f: 	leaq	(%r9,%rax,4), %rax
    00000173: 	movq	%rdi, 0x68(%rsp)
    00000178: 	movl	%r13d, %edi
    0000017b: 	movl	%r11d, %r13d
    0000017e: 	subl	%r15d, %edi
    00000181: 	movl	%esi, 0x7c(%rsp)
    00000185: 	leaq	(%r9,%rdx,4), %rsi
    00000189: 	movq	%rax, 0xb8(%rsp)
    00000191: 	movslq	%r15d, %rax
    00000194: 	leal	-0x1(%rdi), %edx
    00000197: 	movq	%rsi, 0x90(%rsp)
    0000019f: 	leaq	(%r9,%rax,4), %rsi
    000001a3: 	movl	%edi, %eax
    000001a5: 	shrl	$0x2, %eax
    000001a8: 	movl	%edi, 0x44(%rsp)
    000001ac: 	andl	$-0x4, %edi
    000001af: 	leal	-0x1(%rax), %ebp
    000001b2: 	leal	(%r15,%rdi), %eax
    000001b6: 	movl	%edx, 0x34(%rsp)
    000001ba: 	shlq	$0x4, %rbp
    000001be: 	movl	%edi, 0x50(%rsp)
    000001c2: 	addq	%rsi, %rbp
    000001c5: 	cmpl	$0x2, %edx
    000001c8: 	movq	%rsi, 0x48(%rsp)
    000001cd: 	cmovbel	%r15d, %eax
    000001d1: 	xorl	%r8d, %r8d
    000001d4: 	movslq	%eax, %rdx
    000001d7: 	leaq	(%r9,%rdx,4), %rdi
    000001db: 	leal	0x1(%rax), %edx
    000001de: 	addl	$0x2, %eax
    000001e1: 	movl	%edx, 0x78(%rsp)
    000001e5: 	movslq	%edx, %rdx
    000001e8: 	movl	%eax, 0x8c(%rsp)
    000001ef: 	leaq	(%r9,%rdx,4), %rsi
    000001f3: 	cltq
    000001f5: 	leaq	(%r9,%rax,4), %rax
    000001f9: 	movq	%rsi, 0x98(%rsp)
    00000201: 	movq	%rax, 0xb0(%rsp)
    00000209: 	movl	%r15d, %eax
    0000020c: 	movl	%r10d, %r15d
    0000020f: 	movl	%r8d, %r10d
    00000212: 	movq	%rdi, 0x70(%rsp)
    00000217: 	movl	%eax, %r8d
    0000021a: 	movq	%r9, %rdi
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp1967:
    00000220: 	cmpl	$0x3, %ecx
    00000223: 	jle	.Ltmp1957 # Offset: 547
    00000225: 	movq	0x28(%rsp), %rdx
    0000022a: 	xorl	%esi, %esi
    0000022c: 	movl	%r8d, 0x20(%rsp)
    00000231: 	movl	%ecx, 0x1c(%rsp)
    00000235: 	movl	%r10d, 0x18(%rsp)
    0000023a: 	movaps	%xmm1, (%rsp)
    0000023e: 	callq	memset@PLT # Offset: 574
    00000243: 	movl	0x20(%rsp), %r8d
    00000248: 	movl	0x1c(%rsp), %ecx
    0000024c: 	movl	0x18(%rsp), %r10d
    00000251: 	movdqa	(%rsp), %xmm1
    00000256: 	movq	%rax, %rdi
.Ltmp1957:
    00000259: 	cmpl	%r14d, 0x10(%rsp)
    0000025e: 	jge	.Ltmp1958 # Offset: 606
    00000260: 	cmpl	$0x2, 0x40(%rsp)
    00000265: 	jbe	.Ltmp1959 # Offset: 613
    00000267: 	movq	0x60(%rsp), %rax
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp1960:
    00000270: 	movups	%xmm1, (%rax)
    00000273: 	addq	$0x10, %rax
    00000277: 	cmpq	%r12, %rax
    0000027a: 	jne	.Ltmp1960 # Offset: 634
    0000027c: 	movl	0x5c(%rsp), %esi
    00000280: 	cmpl	%esi, 0x58(%rsp)
    00000284: 	je	.Ltmp1958 # Offset: 644
.Ltmp1959:
    00000286: 	movq	0x80(%rsp), %rax
    0000028e: 	movl	%r13d, (%rax)
    00000291: 	cmpl	0x88(%rsp), %r14d
    00000299: 	jle	.Ltmp1958 # Offset: 665
    0000029b: 	movq	0xa0(%rsp), %rax
    000002a3: 	movl	%r13d, (%rax)
    000002a6: 	cmpl	0xac(%rsp), %r14d
    000002ae: 	jle	.Ltmp1958 # Offset: 686
    000002b0: 	movq	0xc0(%rsp), %rax
    000002b8: 	movl	%r13d, (%rax)
.Ltmp1958:
    000002bb: 	cmpl	%r8d, %r14d
    000002be: 	jge	.Ltmp1961 # Offset: 702
    000002c0: 	cmpl	$0x2, 0x30(%rsp)
    000002c5: 	jbe	.Ltmp1962 # Offset: 709
    000002c7: 	movd	%r15d, %xmm2
    000002cc: 	movq	0x38(%rsp), %rax
    000002d1: 	pshufd	$0x0, %xmm2, %xmm0
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1963:
    000002e0: 	movups	%xmm0, (%rax)
    000002e3: 	addq	$0x10, %rax
    000002e7: 	cmpq	%rbx, %rax
    000002ea: 	jne	.Ltmp1963 # Offset: 746
    000002ec: 	movl	0x54(%rsp), %esi
    000002f0: 	cmpl	%esi, 0x10(%rsp)
    000002f4: 	je	.Ltmp1961 # Offset: 756
.Ltmp1962:
    000002f6: 	movq	0x68(%rsp), %rax
    000002fb: 	movl	%r15d, (%rax)
    000002fe: 	cmpl	0x7c(%rsp), %r8d
    00000303: 	jle	.Ltmp1961 # Offset: 771
    00000305: 	movq	0x90(%rsp), %rax
    0000030d: 	movl	%r15d, (%rax)
    00000310: 	cmpl	0xa8(%rsp), %r8d
    00000318: 	jle	.Ltmp1961 # Offset: 792
    0000031a: 	movq	0xb8(%rsp), %rax
    00000322: 	movl	%r15d, (%rax)
.Ltmp1961:
    00000325: 	cmpl	%r8d, %ecx
    00000328: 	jle	.Ltmp1964 # Offset: 808
    0000032a: 	cmpl	$0x2, 0x34(%rsp)
    0000032f: 	jbe	.Ltmp1965 # Offset: 815
    00000331: 	movd	0x24(%rsp), %xmm3
    00000337: 	movq	0x48(%rsp), %rax
    0000033c: 	pshufd	$0x0, %xmm3, %xmm0
    00000341: 	nopl	(%rax) # Size: 7
.Ltmp1966:
    00000348: 	movq	%rax, %rdx
    0000034b: 	movups	%xmm0, (%rax)
    0000034e: 	addq	$0x10, %rax
    00000352: 	cmpq	%rbp, %rdx
    00000355: 	jne	.Ltmp1966 # Offset: 853
    00000357: 	movl	0x50(%rsp), %esi
    0000035b: 	cmpl	%esi, 0x44(%rsp)
    0000035f: 	je	.Ltmp1964 # Offset: 863
.Ltmp1965:
    00000361: 	movq	0x70(%rsp), %rsi
    00000366: 	movl	0x24(%rsp), %eax
    0000036a: 	movl	%eax, (%rsi)
    0000036c: 	cmpl	%ecx, 0x78(%rsp)
    00000370: 	jge	.Ltmp1964 # Offset: 880
    00000372: 	movq	0x98(%rsp), %rsi
    0000037a: 	movl	%eax, (%rsi)
    0000037c: 	cmpl	%ecx, 0x8c(%rsp)
    00000383: 	jge	.Ltmp1964 # Offset: 899
    00000385: 	movq	0xb0(%rsp), %rsi
    0000038d: 	movl	%eax, (%rsi)
.Ltmp1964:
    0000038f: 	addl	$0x1, %r10d
    00000393: 	cmpl	%r10d, iterations(%rip)
    0000039a: 	jg	.Ltmp1967 # Offset: 922
    000003a0: 	movq	%rdi, %r9
    000003a3: 	movl	%ecx, %r13d
.Ltmp1956:
    000003a6: 	movq	%r9, 0x10(%rsp)
    000003ab: 	callq	clock@PLT # Offset: 939
    000003b0: 	movq	0xc8(%rsp), %rdi
    000003b8: 	pxor	%xmm0, %xmm0
    000003bc: 	movq	%rax, end_time(%rip)
    000003c3: 	subq	start_time(%rip), %rax
    000003ca: 	cvtsi2sd	%rax, %xmm0
    000003cf: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003d7: 	callq	_Z13record_resultdPKc # Offset: 983
    000003dc: 	testl	%r13d, %r13d
    000003df: 	jle	.Ltmp1968 # Offset: 991
    000003e5: 	leal	-0x1(%r13), %eax
    000003e9: 	movq	0x10(%rsp), %r9
    000003ee: 	cmpl	$0x2, %eax
    000003f1: 	jbe	.Ltmp1969 # Offset: 1009
    000003f7: 	movl	%r13d, %edx
    000003fa: 	movq	%r9, %rax
    000003fd: 	pxor	%xmm0, %xmm0
    00000401: 	shrl	$0x2, %edx
    00000404: 	subl	$0x1, %edx
    00000407: 	shlq	$0x4, %rdx
    0000040b: 	leaq	0x10(%r9,%rdx), %rdx
.Ltmp1970:
    00000410: 	movdqu	(%rax), %xmm4
    00000414: 	addq	$0x10, %rax
    00000418: 	paddd	%xmm4, %xmm0
    0000041c: 	cmpq	%rax, %rdx
    0000041f: 	jne	.Ltmp1970 # Offset: 1055
    00000421: 	movdqa	%xmm0, %xmm1
    00000425: 	movl	%r13d, %eax
    00000428: 	psrldq	$0x8, %xmm1
    0000042d: 	andl	$-0x4, %eax
    00000430: 	paddd	%xmm1, %xmm0
    00000434: 	movdqa	%xmm0, %xmm1
    00000438: 	psrldq	$0x4, %xmm1
    0000043d: 	paddd	%xmm1, %xmm0
    00000441: 	movd	%xmm0, %ebp
    00000445: 	testb	$0x3, %r13b
    00000449: 	je	.Ltmp1971 # Offset: 1097
.Ltmp1975:
    0000044b: 	movslq	%eax, %rdx
    0000044e: 	leaq	(,%rdx,4), %rcx
    00000456: 	addl	(%r9,%rdx,4), %ebp
    0000045a: 	leal	0x1(%rax), %edx
    0000045d: 	cmpl	%edx, %r13d
    00000460: 	jle	.Ltmp1971 # Offset: 1120
    00000462: 	addl	$0x2, %eax
    00000465: 	addl	0x4(%r9,%rcx), %ebp
    0000046a: 	cmpl	%eax, %r13d
    0000046d: 	jle	.Ltmp1971 # Offset: 1133
    0000046f: 	addl	0x8(%r9,%rcx), %ebp
.Ltmp1971:
    00000474: 	movsd	init_value(%rip), %xmm0
    0000047c: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000484: 	cvttsd2si	%xmm0, %eax
    00000488: 	addsd	%xmm0, %xmm1
    0000048c: 	addsd	DATAat0x37030(%rip), %xmm0
    00000494: 	cvttsd2si	%xmm1, %r12d
    00000499: 	cltq
    0000049b: 	movslq	%r12d, %r12
    0000049e: 	addq	%rax, %r12
    000004a1: 	cvttsd2si	%xmm0, %eax
    000004a5: 	addl	%eax, %r12d
    000004a8: 	imull	$0x1e8480, %r12d, %r12d
    000004af: 	cmpl	%ebp, %r12d
    000004b2: 	jne	.Ltmp1972 # Offset: 1202
    000004b4: 	addq	$0xd8, %rsp
    000004bb: 	popq	%rbx
    000004bc: 	popq	%rbp
    000004bd: 	popq	%r12
    000004bf: 	popq	%r13
    000004c1: 	popq	%r14
    000004c3: 	popq	%r15
    000004c5: 	retq # Offset: 1221
.Ltmp1972:
    000004c6: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004cd: 	movl	$0x5, %edx
    000004d2: 	leaq	DATAat0x35004(%rip), %rsi
    000004d9: 	movq	%r13, %rdi
    000004dc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1244
    000004e1: 	cmpq	$0x0, 0xc8(%rsp)
    000004ea: 	je	.Ltmp1973 # Offset: 1258
    000004ec: 	movq	0xc8(%rsp), %rbx
    000004f4: 	movq	%rbx, %rdi
    000004f7: 	callq	strlen@PLT # Offset: 1271
    000004fc: 	movq	%rbx, %rsi
    000004ff: 	movq	%r13, %rdi
    00000502: 	movq	%rax, %rdx
    00000505: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1285
.Ltmp1974:
    0000050a: 	movl	$0xd, %edx
    0000050f: 	movq	%r13, %rdi
    00000512: 	leaq	DATAat0x3500a(%rip), %rsi
    00000519: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1305
    0000051e: 	movl	%ebp, %esi
    00000520: 	movq	%r13, %rdi
    00000523: 	callq	_ZNSolsEi@PLT # Offset: 1315
    00000528: 	movl	$0xb, %edx
    0000052d: 	leaq	DATAat0x35018(%rip), %rsi
    00000534: 	movq	%rax, %rbp
    00000537: 	movq	%rax, %rdi
    0000053a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1338
    0000053f: 	movq	%rbp, %rdi
    00000542: 	movl	%r12d, %esi
    00000545: 	callq	_ZNSolsEi@PLT # Offset: 1349
    0000054a: 	addq	$0xd8, %rsp
    00000551: 	popq	%rbx
    00000552: 	movq	%rax, %rdi
    00000555: 	popq	%rbp
    00000556: 	popq	%r12
    00000558: 	popq	%r13
    0000055a: 	popq	%r14
    0000055c: 	popq	%r15
    0000055e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1374
.Ltmp1973:
    00000563: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000056a: 	movq	-0x18(%rax), %rdi
    0000056e: 	addq	%r13, %rdi
    00000571: 	movl	0x20(%rdi), %esi
    00000574: 	orl	$0x1, %esi
    00000577: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1399
    0000057c: 	jmp	.Ltmp1974 # Offset: 1404
.Ltmp1968:
    0000057e: 	xorl	%ebp, %ebp
    00000580: 	jmp	.Ltmp1971 # Offset: 1408
.Ltmp1969:
    00000585: 	xorl	%ebp, %ebp
    00000587: 	xorl	%eax, %eax
    00000589: 	jmp	.Ltmp1975 # Offset: 1417
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_loop_partial4_replace_optIiEvPT_iPKc"

Binary Function "_Z36test_for_loop_bzero_partial4_replaceIiEvPT_iPKc" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x2e440
  Size        : 0x53e
  MaxSize     : 0x540
  Offset      : 0x2e440
  Section     : .text
  Orc Section : .local.text._Z36test_for_loop_bzero_partial4_replaceIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	leal	0x3(%rsi), %r13d
    00000014: 	pushq	%r12
    00000016: 	pushq	%rbp
    00000017: 	pushq	%rbx
    00000018: 	subq	$0xc8, %rsp
    0000001f: 	testl	%esi, %esi
    00000021: 	cmovnsl	%esi, %r13d
    00000025: 	movq	%rdx, 0xb8(%rsp)
    0000002d: 	movl	%r13d, %ebx
    00000030: 	sarl	$0x2, %ebx
    00000033: 	movl	%ebx, 0x18(%rsp)
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp1976 # Offset: 75
    00000051: 	movslq	%ebx, %rdx
    00000054: 	movslq	%r14d, %rax
    00000057: 	leal	(%rdx,%rdx), %r9d
    0000005b: 	shlq	$0x2, %rax
    0000005f: 	movq	%rdx, %rcx
    00000062: 	movq	%rax, 0x10(%rsp)
    00000067: 	movl	%r9d, %eax
    0000006a: 	leal	(%r9,%rdx), %r8d
    0000006e: 	subl	%edx, %eax
    00000070: 	shlq	$0x2, %rdx
    00000074: 	movl	%ecx, 0x38(%rsp)
    00000078: 	leal	-0x1(%rax), %ebx
    0000007b: 	movl	%eax, %esi
    0000007d: 	movl	%eax, 0x48(%rsp)
    00000081: 	shrl	$0x2, %eax
    00000084: 	subl	$0x1, %eax
    00000087: 	leaq	(%r15,%rdx), %rdi
    0000008b: 	andl	$-0x4, %esi
    0000008e: 	movl	%ebx, 0x24(%rsp)
    00000092: 	shlq	$0x4, %rax
    00000096: 	movl	%esi, 0x4c(%rsp)
    0000009a: 	leaq	0x10(%rdi,%rax), %r12
    0000009f: 	movl	%ecx, %eax
    000000a1: 	movq	%rdi, 0x50(%rsp)
    000000a6: 	addl	%esi, %eax
    000000a8: 	cmpl	$0x2, %ebx
    000000ab: 	leal	-0x1(%rcx), %ebx
    000000ae: 	cmovbel	%ecx, %eax
    000000b1: 	movl	%ebx, 0x20(%rsp)
    000000b5: 	movslq	%eax, %rsi
    000000b8: 	leaq	(%r15,%rsi,4), %rsi
    000000bc: 	movq	%rsi, 0x70(%rsp)
    000000c1: 	leal	0x1(%rax), %esi
    000000c4: 	addl	$0x2, %eax
    000000c7: 	movl	%eax, 0x9c(%rsp)
    000000ce: 	cltq
    000000d0: 	leaq	(%r15,%rax,4), %rax
    000000d4: 	movl	%esi, 0x80(%rsp)
    000000db: 	movslq	%esi, %rsi
    000000de: 	movq	%rax, 0xb0(%rsp)
    000000e6: 	movl	%ecx, %eax
    000000e8: 	leaq	(%r15,%rsi,4), %rsi
    000000ec: 	andl	$-0x4, %ecx
    000000ef: 	shrl	$0x2, %eax
    000000f2: 	movq	%rsi, 0x90(%rsp)
    000000fa: 	movq	%rdx, %rsi
    000000fd: 	subl	$0x1, %eax
    00000100: 	addq	%rdi, %rsi
    00000103: 	movl	%ecx, 0x3c(%rsp)
    00000107: 	shlq	$0x4, %rax
    0000010b: 	cmpl	$0x2, %ebx
    0000010e: 	movq	%rsi, 0x28(%rsp)
    00000113: 	leaq	0x10(%rsi,%rax), %rbp
    00000118: 	leal	(%rcx,%r9), %eax
    0000011c: 	cmovbel	%r9d, %eax
    00000120: 	movslq	%eax, %rdx
    00000123: 	leaq	(%r15,%rdx,4), %rcx
    00000127: 	movq	%rcx, 0x58(%rsp)
    0000012c: 	leal	0x1(%rax), %ecx
    0000012f: 	addl	$0x2, %eax
    00000132: 	movslq	%ecx, %rdx
    00000135: 	movl	%ecx, 0x6c(%rsp)
    00000139: 	movl	%eax, 0x98(%rsp)
    00000140: 	leaq	(%r15,%rdx,4), %rcx
    00000144: 	cltq
    00000146: 	leaq	(%r15,%rax,4), %rax
    0000014a: 	movq	%rcx, 0x78(%rsp)
    0000014f: 	movl	%r14d, %ecx
    00000152: 	subl	%r8d, %ecx
    00000155: 	movq	%rax, 0xa8(%rsp)
    0000015d: 	movslq	%r8d, %rax
    00000160: 	leaq	(%r15,%rax,4), %rdi
    00000164: 	movl	%ecx, %eax
    00000166: 	leal	-0x1(%rcx), %esi
    00000169: 	movl	%ecx, 0x30(%rsp)
    0000016d: 	shrl	$0x2, %eax
    00000170: 	andl	$-0x4, %ecx
    00000173: 	movl	%esi, 0x1c(%rsp)
    00000177: 	leal	-0x1(%rax), %ebx
    0000017a: 	leal	(%r8,%rcx), %eax
    0000017e: 	movl	%ecx, 0x34(%rsp)
    00000182: 	shlq	$0x4, %rbx
    00000186: 	movq	%rdi, 0x40(%rsp)
    0000018b: 	addq	%rdi, %rbx
    0000018e: 	cmpl	$0x2, %esi
    00000191: 	movq	%r15, %rdi
    00000194: 	cmovbel	%r8d, %eax
    00000198: 	xorl	%r13d, %r13d
    0000019b: 	movslq	%eax, %rdx
    0000019e: 	leaq	(%r15,%rdx,4), %rcx
    000001a2: 	movq	%rcx, 0x60(%rsp)
    000001a7: 	leal	0x1(%rax), %ecx
    000001aa: 	addl	$0x2, %eax
    000001ad: 	movl	%eax, 0x84(%rsp)
    000001b4: 	movslq	%ecx, %rdx
    000001b7: 	cltq
    000001b9: 	leaq	(%r15,%rax,4), %rax
    000001bd: 	movl	%ecx, 0x68(%rsp)
    000001c1: 	leaq	(%r15,%rdx,4), %rcx
    000001c5: 	movl	%r13d, %r15d
    000001c8: 	movq	%rcx, 0x88(%rsp)
    000001d0: 	movq	%r12, %r13
    000001d3: 	movl	%r14d, %r12d
    000001d6: 	movl	%r9d, %r14d
    000001d9: 	movq	%rax, 0xa0(%rsp)
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp1986:
    000001e8: 	movq	0x10(%rsp), %rdx
    000001ed: 	xorl	%esi, %esi
    000001ef: 	movl	%r8d, 0xc(%rsp)
    000001f4: 	callq	memset@PLT # Offset: 500
    000001f9: 	cmpl	%r14d, 0x18(%rsp)
    000001fe: 	movl	0xc(%rsp), %r8d
    00000203: 	movq	%rax, %rdi
    00000206: 	jge	.Ltmp1977 # Offset: 518
    00000208: 	cmpl	$0x2, 0x24(%rsp)
    0000020d: 	cvttsd2si	init_value(%rip), %edx
    00000215: 	jbe	.Ltmp1978 # Offset: 533
    00000217: 	movd	%edx, %xmm2
    0000021b: 	movq	0x50(%rsp), %rax
    00000220: 	pshufd	$0x0, %xmm2, %xmm0
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1979:
    00000228: 	movups	%xmm0, (%rax)
    0000022b: 	addq	$0x10, %rax
    0000022f: 	cmpq	%r13, %rax
    00000232: 	jne	.Ltmp1979 # Offset: 562
    00000234: 	movl	0x4c(%rsp), %ecx
    00000238: 	cmpl	%ecx, 0x48(%rsp)
    0000023c: 	je	.Ltmp1977 # Offset: 572
.Ltmp1978:
    0000023e: 	movq	0x70(%rsp), %rax
    00000243: 	movl	%edx, (%rax)
    00000245: 	cmpl	0x80(%rsp), %r14d
    0000024d: 	jle	.Ltmp1977 # Offset: 589
    0000024f: 	movq	0x90(%rsp), %rax
    00000257: 	movl	%edx, (%rax)
    00000259: 	cmpl	0x9c(%rsp), %r14d
    00000261: 	jle	.Ltmp1977 # Offset: 609
    00000263: 	movq	0xb0(%rsp), %rax
    0000026b: 	movl	%edx, (%rax)
.Ltmp1977:
    0000026d: 	cmpl	%r8d, %r14d
    00000270: 	jge	.Ltmp1980 # Offset: 624
    00000272: 	cvttsd2si	init_value(%rip), %edx
    0000027a: 	addl	$0x1, %edx
    0000027d: 	cmpl	$0x2, 0x20(%rsp)
    00000282: 	jbe	.Ltmp1981 # Offset: 642
    00000284: 	movd	%edx, %xmm3
    00000288: 	movq	0x28(%rsp), %rax
    0000028d: 	pshufd	$0x0, %xmm3, %xmm0
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1982:
    00000298: 	movups	%xmm0, (%rax)
    0000029b: 	addq	$0x10, %rax
    0000029f: 	cmpq	%rbp, %rax
    000002a2: 	jne	.Ltmp1982 # Offset: 674
    000002a4: 	movl	0x3c(%rsp), %ecx
    000002a8: 	cmpl	%ecx, 0x38(%rsp)
    000002ac: 	je	.Ltmp1980 # Offset: 684
.Ltmp1981:
    000002ae: 	movq	0x58(%rsp), %rax
    000002b3: 	movl	%edx, (%rax)
    000002b5: 	cmpl	0x6c(%rsp), %r8d
    000002ba: 	jle	.Ltmp1980 # Offset: 698
    000002bc: 	movq	0x78(%rsp), %rax
    000002c1: 	movl	%edx, (%rax)
    000002c3: 	cmpl	0x98(%rsp), %r8d
    000002cb: 	jle	.Ltmp1980 # Offset: 715
    000002cd: 	movq	0xa8(%rsp), %rax
    000002d5: 	movl	%edx, (%rax)
.Ltmp1980:
    000002d7: 	cmpl	%r8d, %r12d
    000002da: 	jle	.Ltmp1983 # Offset: 730
    000002dc: 	cvttsd2si	init_value(%rip), %esi
    000002e4: 	addl	$0x2, %esi
    000002e7: 	cmpl	$0x2, 0x1c(%rsp)
    000002ec: 	jbe	.Ltmp1984 # Offset: 748
    000002ee: 	movd	%esi, %xmm4
    000002f2: 	movq	0x40(%rsp), %rax
    000002f7: 	pshufd	$0x0, %xmm4, %xmm0
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp1985:
    00000300: 	movq	%rax, %rdx
    00000303: 	movups	%xmm0, (%rax)
    00000306: 	addq	$0x10, %rax
    0000030a: 	cmpq	%rbx, %rdx
    0000030d: 	jne	.Ltmp1985 # Offset: 781
    0000030f: 	movl	0x34(%rsp), %ecx
    00000313: 	cmpl	%ecx, 0x30(%rsp)
    00000317: 	je	.Ltmp1983 # Offset: 791
.Ltmp1984:
    00000319: 	movq	0x60(%rsp), %rax
    0000031e: 	movl	%esi, (%rax)
    00000320: 	cmpl	%r12d, 0x68(%rsp)
    00000325: 	jge	.Ltmp1983 # Offset: 805
    00000327: 	movq	0x88(%rsp), %rax
    0000032f: 	movl	%esi, (%rax)
    00000331: 	cmpl	0x84(%rsp), %r12d
    00000339: 	jle	.Ltmp1983 # Offset: 825
    0000033b: 	movq	0xa0(%rsp), %rax
    00000343: 	movl	%esi, (%rax)
.Ltmp1983:
    00000345: 	addl	$0x1, %r15d
    00000349: 	cmpl	%r15d, iterations(%rip)
    00000350: 	jg	.Ltmp1986 # Offset: 848
    00000356: 	movq	%rdi, %r15
    00000359: 	movl	%r12d, %r14d
.Ltmp1976:
    0000035c: 	callq	clock@PLT # Offset: 860
    00000361: 	movq	0xb8(%rsp), %rdi
    00000369: 	pxor	%xmm0, %xmm0
    0000036d: 	movq	%rax, end_time(%rip)
    00000374: 	subq	start_time(%rip), %rax
    0000037b: 	cvtsi2sd	%rax, %xmm0
    00000380: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000388: 	callq	_Z13record_resultdPKc # Offset: 904
    0000038d: 	testl	%r14d, %r14d
    00000390: 	jle	.Ltmp1987 # Offset: 912
    00000396: 	leal	-0x1(%r14), %eax
    0000039a: 	cmpl	$0x2, %eax
    0000039d: 	jbe	.Ltmp1988 # Offset: 925
    000003a3: 	movl	%r14d, %edx
    000003a6: 	movq	%r15, %rax
    000003a9: 	pxor	%xmm0, %xmm0
    000003ad: 	shrl	$0x2, %edx
    000003b0: 	subl	$0x1, %edx
    000003b3: 	shlq	$0x4, %rdx
    000003b7: 	leaq	0x10(%r15,%rdx), %rdx
    000003bc: 	nopl	(%rax) # Size: 4
.Ltmp1989:
    000003c0: 	movdqu	(%rax), %xmm5
    000003c4: 	addq	$0x10, %rax
    000003c8: 	paddd	%xmm5, %xmm0
    000003cc: 	cmpq	%rax, %rdx
    000003cf: 	jne	.Ltmp1989 # Offset: 975
    000003d1: 	movdqa	%xmm0, %xmm1
    000003d5: 	movl	%r14d, %eax
    000003d8: 	psrldq	$0x8, %xmm1
    000003dd: 	andl	$-0x4, %eax
    000003e0: 	paddd	%xmm1, %xmm0
    000003e4: 	movdqa	%xmm0, %xmm1
    000003e8: 	psrldq	$0x4, %xmm1
    000003ed: 	paddd	%xmm1, %xmm0
    000003f1: 	movd	%xmm0, %ebp
    000003f5: 	testb	$0x3, %r14b
    000003f9: 	je	.Ltmp1990 # Offset: 1017
.Ltmp1994:
    000003fb: 	movslq	%eax, %rdx
    000003fe: 	leaq	(,%rdx,4), %rsi
    00000406: 	addl	(%r15,%rdx,4), %ebp
    0000040a: 	leal	0x1(%rax), %edx
    0000040d: 	cmpl	%edx, %r14d
    00000410: 	jle	.Ltmp1990 # Offset: 1040
    00000412: 	addl	$0x2, %eax
    00000415: 	addl	0x4(%r15,%rsi), %ebp
    0000041a: 	cmpl	%r14d, %eax
    0000041d: 	jge	.Ltmp1990 # Offset: 1053
    0000041f: 	addl	0x8(%r15,%rsi), %ebp
.Ltmp1990:
    00000424: 	movsd	init_value(%rip), %xmm0
    0000042c: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000434: 	cvttsd2si	%xmm0, %eax
    00000438: 	addsd	%xmm0, %xmm1
    0000043c: 	addsd	DATAat0x37030(%rip), %xmm0
    00000444: 	cvttsd2si	%xmm1, %r12d
    00000449: 	cltq
    0000044b: 	movslq	%r12d, %r12
    0000044e: 	addq	%rax, %r12
    00000451: 	cvttsd2si	%xmm0, %eax
    00000455: 	addl	%eax, %r12d
    00000458: 	imull	$0x1e8480, %r12d, %r12d
    0000045f: 	cmpl	%ebp, %r12d
    00000462: 	jne	.Ltmp1991 # Offset: 1122
    00000464: 	addq	$0xc8, %rsp
    0000046b: 	popq	%rbx
    0000046c: 	popq	%rbp
    0000046d: 	popq	%r12
    0000046f: 	popq	%r13
    00000471: 	popq	%r14
    00000473: 	popq	%r15
    00000475: 	retq # Offset: 1141
.Ltmp1991:
    00000476: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000047d: 	movl	$0x5, %edx
    00000482: 	leaq	DATAat0x35004(%rip), %rsi
    00000489: 	movq	%r13, %rdi
    0000048c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1164
    00000491: 	cmpq	$0x0, 0xb8(%rsp)
    0000049a: 	je	.Ltmp1992 # Offset: 1178
    0000049c: 	movq	0xb8(%rsp), %rbx
    000004a4: 	movq	%rbx, %rdi
    000004a7: 	callq	strlen@PLT # Offset: 1191
    000004ac: 	movq	%rbx, %rsi
    000004af: 	movq	%r13, %rdi
    000004b2: 	movq	%rax, %rdx
    000004b5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1205
.Ltmp1993:
    000004ba: 	movl	$0xd, %edx
    000004bf: 	movq	%r13, %rdi
    000004c2: 	leaq	DATAat0x3500a(%rip), %rsi
    000004c9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1225
    000004ce: 	movl	%ebp, %esi
    000004d0: 	movq	%r13, %rdi
    000004d3: 	callq	_ZNSolsEi@PLT # Offset: 1235
    000004d8: 	movl	$0xb, %edx
    000004dd: 	leaq	DATAat0x35018(%rip), %rsi
    000004e4: 	movq	%rax, %rbp
    000004e7: 	movq	%rax, %rdi
    000004ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1258
    000004ef: 	movq	%rbp, %rdi
    000004f2: 	movl	%r12d, %esi
    000004f5: 	callq	_ZNSolsEi@PLT # Offset: 1269
    000004fa: 	addq	$0xc8, %rsp
    00000501: 	popq	%rbx
    00000502: 	movq	%rax, %rdi
    00000505: 	popq	%rbp
    00000506: 	popq	%r12
    00000508: 	popq	%r13
    0000050a: 	popq	%r14
    0000050c: 	popq	%r15
    0000050e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1294
.Ltmp1992:
    00000513: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000051a: 	movq	-0x18(%rax), %rdi
    0000051e: 	addq	%r13, %rdi
    00000521: 	movl	0x20(%rdi), %esi
    00000524: 	orl	$0x1, %esi
    00000527: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1319
    0000052c: 	jmp	.Ltmp1993 # Offset: 1324
.Ltmp1987:
    0000052e: 	xorl	%ebp, %ebp
    00000530: 	jmp	.Ltmp1990 # Offset: 1328
.Ltmp1988:
    00000535: 	xorl	%ebp, %ebp
    00000537: 	xorl	%eax, %eax
    00000539: 	jmp	.Ltmp1994 # Offset: 1337
DWARF CFI Instructions:
    <empty>
End of Function "_Z36test_for_loop_bzero_partial4_replaceIiEvPT_iPKc"

Binary Function "_Z37test_for_loop_memset_partial4_replaceIiEvPT_iPKc" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x2e980
  Size        : 0x53e
  MaxSize     : 0x540
  Offset      : 0x2e980
  Section     : .text
  Orc Section : .local.text._Z37test_for_loop_memset_partial4_replaceIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	leal	0x3(%rsi), %r13d
    00000014: 	pushq	%r12
    00000016: 	pushq	%rbp
    00000017: 	pushq	%rbx
    00000018: 	subq	$0xc8, %rsp
    0000001f: 	testl	%esi, %esi
    00000021: 	cmovnsl	%esi, %r13d
    00000025: 	movq	%rdx, 0xb8(%rsp)
    0000002d: 	movl	%r13d, %ebx
    00000030: 	sarl	$0x2, %ebx
    00000033: 	movl	%ebx, 0x18(%rsp)
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp1995 # Offset: 75
    00000051: 	movslq	%ebx, %rdx
    00000054: 	movslq	%r14d, %rax
    00000057: 	leal	(%rdx,%rdx), %r9d
    0000005b: 	shlq	$0x2, %rax
    0000005f: 	movq	%rdx, %rcx
    00000062: 	movq	%rax, 0x10(%rsp)
    00000067: 	movl	%r9d, %eax
    0000006a: 	leal	(%r9,%rdx), %r8d
    0000006e: 	subl	%edx, %eax
    00000070: 	shlq	$0x2, %rdx
    00000074: 	movl	%ecx, 0x38(%rsp)
    00000078: 	leal	-0x1(%rax), %ebx
    0000007b: 	movl	%eax, %esi
    0000007d: 	movl	%eax, 0x48(%rsp)
    00000081: 	shrl	$0x2, %eax
    00000084: 	subl	$0x1, %eax
    00000087: 	leaq	(%r15,%rdx), %rdi
    0000008b: 	andl	$-0x4, %esi
    0000008e: 	movl	%ebx, 0x24(%rsp)
    00000092: 	shlq	$0x4, %rax
    00000096: 	movl	%esi, 0x4c(%rsp)
    0000009a: 	leaq	0x10(%rdi,%rax), %r12
    0000009f: 	movl	%ecx, %eax
    000000a1: 	movq	%rdi, 0x50(%rsp)
    000000a6: 	addl	%esi, %eax
    000000a8: 	cmpl	$0x2, %ebx
    000000ab: 	leal	-0x1(%rcx), %ebx
    000000ae: 	cmovbel	%ecx, %eax
    000000b1: 	movl	%ebx, 0x20(%rsp)
    000000b5: 	movslq	%eax, %rsi
    000000b8: 	leaq	(%r15,%rsi,4), %rsi
    000000bc: 	movq	%rsi, 0x70(%rsp)
    000000c1: 	leal	0x1(%rax), %esi
    000000c4: 	addl	$0x2, %eax
    000000c7: 	movl	%eax, 0x9c(%rsp)
    000000ce: 	cltq
    000000d0: 	leaq	(%r15,%rax,4), %rax
    000000d4: 	movl	%esi, 0x80(%rsp)
    000000db: 	movslq	%esi, %rsi
    000000de: 	movq	%rax, 0xb0(%rsp)
    000000e6: 	movl	%ecx, %eax
    000000e8: 	leaq	(%r15,%rsi,4), %rsi
    000000ec: 	andl	$-0x4, %ecx
    000000ef: 	shrl	$0x2, %eax
    000000f2: 	movq	%rsi, 0x90(%rsp)
    000000fa: 	movq	%rdx, %rsi
    000000fd: 	subl	$0x1, %eax
    00000100: 	addq	%rdi, %rsi
    00000103: 	movl	%ecx, 0x3c(%rsp)
    00000107: 	shlq	$0x4, %rax
    0000010b: 	cmpl	$0x2, %ebx
    0000010e: 	movq	%rsi, 0x28(%rsp)
    00000113: 	leaq	0x10(%rsi,%rax), %rbp
    00000118: 	leal	(%rcx,%r9), %eax
    0000011c: 	cmovbel	%r9d, %eax
    00000120: 	movslq	%eax, %rdx
    00000123: 	leaq	(%r15,%rdx,4), %rcx
    00000127: 	movq	%rcx, 0x58(%rsp)
    0000012c: 	leal	0x1(%rax), %ecx
    0000012f: 	addl	$0x2, %eax
    00000132: 	movslq	%ecx, %rdx
    00000135: 	movl	%ecx, 0x6c(%rsp)
    00000139: 	movl	%eax, 0x98(%rsp)
    00000140: 	leaq	(%r15,%rdx,4), %rcx
    00000144: 	cltq
    00000146: 	leaq	(%r15,%rax,4), %rax
    0000014a: 	movq	%rcx, 0x78(%rsp)
    0000014f: 	movl	%r14d, %ecx
    00000152: 	subl	%r8d, %ecx
    00000155: 	movq	%rax, 0xa8(%rsp)
    0000015d: 	movslq	%r8d, %rax
    00000160: 	leaq	(%r15,%rax,4), %rdi
    00000164: 	movl	%ecx, %eax
    00000166: 	leal	-0x1(%rcx), %esi
    00000169: 	movl	%ecx, 0x30(%rsp)
    0000016d: 	shrl	$0x2, %eax
    00000170: 	andl	$-0x4, %ecx
    00000173: 	movl	%esi, 0x1c(%rsp)
    00000177: 	leal	-0x1(%rax), %ebx
    0000017a: 	leal	(%r8,%rcx), %eax
    0000017e: 	movl	%ecx, 0x34(%rsp)
    00000182: 	shlq	$0x4, %rbx
    00000186: 	movq	%rdi, 0x40(%rsp)
    0000018b: 	addq	%rdi, %rbx
    0000018e: 	cmpl	$0x2, %esi
    00000191: 	movq	%r15, %rdi
    00000194: 	cmovbel	%r8d, %eax
    00000198: 	xorl	%r13d, %r13d
    0000019b: 	movslq	%eax, %rdx
    0000019e: 	leaq	(%r15,%rdx,4), %rcx
    000001a2: 	movq	%rcx, 0x60(%rsp)
    000001a7: 	leal	0x1(%rax), %ecx
    000001aa: 	addl	$0x2, %eax
    000001ad: 	movl	%eax, 0x84(%rsp)
    000001b4: 	movslq	%ecx, %rdx
    000001b7: 	cltq
    000001b9: 	leaq	(%r15,%rax,4), %rax
    000001bd: 	movl	%ecx, 0x68(%rsp)
    000001c1: 	leaq	(%r15,%rdx,4), %rcx
    000001c5: 	movl	%r13d, %r15d
    000001c8: 	movq	%rcx, 0x88(%rsp)
    000001d0: 	movq	%r12, %r13
    000001d3: 	movl	%r14d, %r12d
    000001d6: 	movl	%r9d, %r14d
    000001d9: 	movq	%rax, 0xa0(%rsp)
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp2005:
    000001e8: 	movq	0x10(%rsp), %rdx
    000001ed: 	xorl	%esi, %esi
    000001ef: 	movl	%r8d, 0xc(%rsp)
    000001f4: 	callq	memset@PLT # Offset: 500
    000001f9: 	cmpl	%r14d, 0x18(%rsp)
    000001fe: 	movl	0xc(%rsp), %r8d
    00000203: 	movq	%rax, %rdi
    00000206: 	jge	.Ltmp1996 # Offset: 518
    00000208: 	cmpl	$0x2, 0x24(%rsp)
    0000020d: 	cvttsd2si	init_value(%rip), %edx
    00000215: 	jbe	.Ltmp1997 # Offset: 533
    00000217: 	movd	%edx, %xmm2
    0000021b: 	movq	0x50(%rsp), %rax
    00000220: 	pshufd	$0x0, %xmm2, %xmm0
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1998:
    00000228: 	movups	%xmm0, (%rax)
    0000022b: 	addq	$0x10, %rax
    0000022f: 	cmpq	%r13, %rax
    00000232: 	jne	.Ltmp1998 # Offset: 562
    00000234: 	movl	0x4c(%rsp), %ecx
    00000238: 	cmpl	%ecx, 0x48(%rsp)
    0000023c: 	je	.Ltmp1996 # Offset: 572
.Ltmp1997:
    0000023e: 	movq	0x70(%rsp), %rax
    00000243: 	movl	%edx, (%rax)
    00000245: 	cmpl	0x80(%rsp), %r14d
    0000024d: 	jle	.Ltmp1996 # Offset: 589
    0000024f: 	movq	0x90(%rsp), %rax
    00000257: 	movl	%edx, (%rax)
    00000259: 	cmpl	0x9c(%rsp), %r14d
    00000261: 	jle	.Ltmp1996 # Offset: 609
    00000263: 	movq	0xb0(%rsp), %rax
    0000026b: 	movl	%edx, (%rax)
.Ltmp1996:
    0000026d: 	cmpl	%r8d, %r14d
    00000270: 	jge	.Ltmp1999 # Offset: 624
    00000272: 	cvttsd2si	init_value(%rip), %edx
    0000027a: 	addl	$0x1, %edx
    0000027d: 	cmpl	$0x2, 0x20(%rsp)
    00000282: 	jbe	.Ltmp2000 # Offset: 642
    00000284: 	movd	%edx, %xmm3
    00000288: 	movq	0x28(%rsp), %rax
    0000028d: 	pshufd	$0x0, %xmm3, %xmm0
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2001:
    00000298: 	movups	%xmm0, (%rax)
    0000029b: 	addq	$0x10, %rax
    0000029f: 	cmpq	%rbp, %rax
    000002a2: 	jne	.Ltmp2001 # Offset: 674
    000002a4: 	movl	0x3c(%rsp), %ecx
    000002a8: 	cmpl	%ecx, 0x38(%rsp)
    000002ac: 	je	.Ltmp1999 # Offset: 684
.Ltmp2000:
    000002ae: 	movq	0x58(%rsp), %rax
    000002b3: 	movl	%edx, (%rax)
    000002b5: 	cmpl	0x6c(%rsp), %r8d
    000002ba: 	jle	.Ltmp1999 # Offset: 698
    000002bc: 	movq	0x78(%rsp), %rax
    000002c1: 	movl	%edx, (%rax)
    000002c3: 	cmpl	0x98(%rsp), %r8d
    000002cb: 	jle	.Ltmp1999 # Offset: 715
    000002cd: 	movq	0xa8(%rsp), %rax
    000002d5: 	movl	%edx, (%rax)
.Ltmp1999:
    000002d7: 	cmpl	%r8d, %r12d
    000002da: 	jle	.Ltmp2002 # Offset: 730
    000002dc: 	cvttsd2si	init_value(%rip), %esi
    000002e4: 	addl	$0x2, %esi
    000002e7: 	cmpl	$0x2, 0x1c(%rsp)
    000002ec: 	jbe	.Ltmp2003 # Offset: 748
    000002ee: 	movd	%esi, %xmm4
    000002f2: 	movq	0x40(%rsp), %rax
    000002f7: 	pshufd	$0x0, %xmm4, %xmm0
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp2004:
    00000300: 	movq	%rax, %rdx
    00000303: 	movups	%xmm0, (%rax)
    00000306: 	addq	$0x10, %rax
    0000030a: 	cmpq	%rbx, %rdx
    0000030d: 	jne	.Ltmp2004 # Offset: 781
    0000030f: 	movl	0x34(%rsp), %ecx
    00000313: 	cmpl	%ecx, 0x30(%rsp)
    00000317: 	je	.Ltmp2002 # Offset: 791
.Ltmp2003:
    00000319: 	movq	0x60(%rsp), %rax
    0000031e: 	movl	%esi, (%rax)
    00000320: 	cmpl	%r12d, 0x68(%rsp)
    00000325: 	jge	.Ltmp2002 # Offset: 805
    00000327: 	movq	0x88(%rsp), %rax
    0000032f: 	movl	%esi, (%rax)
    00000331: 	cmpl	0x84(%rsp), %r12d
    00000339: 	jle	.Ltmp2002 # Offset: 825
    0000033b: 	movq	0xa0(%rsp), %rax
    00000343: 	movl	%esi, (%rax)
.Ltmp2002:
    00000345: 	addl	$0x1, %r15d
    00000349: 	cmpl	%r15d, iterations(%rip)
    00000350: 	jg	.Ltmp2005 # Offset: 848
    00000356: 	movq	%rdi, %r15
    00000359: 	movl	%r12d, %r14d
.Ltmp1995:
    0000035c: 	callq	clock@PLT # Offset: 860
    00000361: 	movq	0xb8(%rsp), %rdi
    00000369: 	pxor	%xmm0, %xmm0
    0000036d: 	movq	%rax, end_time(%rip)
    00000374: 	subq	start_time(%rip), %rax
    0000037b: 	cvtsi2sd	%rax, %xmm0
    00000380: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000388: 	callq	_Z13record_resultdPKc # Offset: 904
    0000038d: 	testl	%r14d, %r14d
    00000390: 	jle	.Ltmp2006 # Offset: 912
    00000396: 	leal	-0x1(%r14), %eax
    0000039a: 	cmpl	$0x2, %eax
    0000039d: 	jbe	.Ltmp2007 # Offset: 925
    000003a3: 	movl	%r14d, %edx
    000003a6: 	movq	%r15, %rax
    000003a9: 	pxor	%xmm0, %xmm0
    000003ad: 	shrl	$0x2, %edx
    000003b0: 	subl	$0x1, %edx
    000003b3: 	shlq	$0x4, %rdx
    000003b7: 	leaq	0x10(%r15,%rdx), %rdx
    000003bc: 	nopl	(%rax) # Size: 4
.Ltmp2008:
    000003c0: 	movdqu	(%rax), %xmm5
    000003c4: 	addq	$0x10, %rax
    000003c8: 	paddd	%xmm5, %xmm0
    000003cc: 	cmpq	%rax, %rdx
    000003cf: 	jne	.Ltmp2008 # Offset: 975
    000003d1: 	movdqa	%xmm0, %xmm1
    000003d5: 	movl	%r14d, %eax
    000003d8: 	psrldq	$0x8, %xmm1
    000003dd: 	andl	$-0x4, %eax
    000003e0: 	paddd	%xmm1, %xmm0
    000003e4: 	movdqa	%xmm0, %xmm1
    000003e8: 	psrldq	$0x4, %xmm1
    000003ed: 	paddd	%xmm1, %xmm0
    000003f1: 	movd	%xmm0, %ebp
    000003f5: 	testb	$0x3, %r14b
    000003f9: 	je	.Ltmp2009 # Offset: 1017
.Ltmp2013:
    000003fb: 	movslq	%eax, %rdx
    000003fe: 	leaq	(,%rdx,4), %rsi
    00000406: 	addl	(%r15,%rdx,4), %ebp
    0000040a: 	leal	0x1(%rax), %edx
    0000040d: 	cmpl	%edx, %r14d
    00000410: 	jle	.Ltmp2009 # Offset: 1040
    00000412: 	addl	$0x2, %eax
    00000415: 	addl	0x4(%r15,%rsi), %ebp
    0000041a: 	cmpl	%r14d, %eax
    0000041d: 	jge	.Ltmp2009 # Offset: 1053
    0000041f: 	addl	0x8(%r15,%rsi), %ebp
.Ltmp2009:
    00000424: 	movsd	init_value(%rip), %xmm0
    0000042c: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000434: 	cvttsd2si	%xmm0, %eax
    00000438: 	addsd	%xmm0, %xmm1
    0000043c: 	addsd	DATAat0x37030(%rip), %xmm0
    00000444: 	cvttsd2si	%xmm1, %r12d
    00000449: 	cltq
    0000044b: 	movslq	%r12d, %r12
    0000044e: 	addq	%rax, %r12
    00000451: 	cvttsd2si	%xmm0, %eax
    00000455: 	addl	%eax, %r12d
    00000458: 	imull	$0x1e8480, %r12d, %r12d
    0000045f: 	cmpl	%ebp, %r12d
    00000462: 	jne	.Ltmp2010 # Offset: 1122
    00000464: 	addq	$0xc8, %rsp
    0000046b: 	popq	%rbx
    0000046c: 	popq	%rbp
    0000046d: 	popq	%r12
    0000046f: 	popq	%r13
    00000471: 	popq	%r14
    00000473: 	popq	%r15
    00000475: 	retq # Offset: 1141
.Ltmp2010:
    00000476: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000047d: 	movl	$0x5, %edx
    00000482: 	leaq	DATAat0x35004(%rip), %rsi
    00000489: 	movq	%r13, %rdi
    0000048c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1164
    00000491: 	cmpq	$0x0, 0xb8(%rsp)
    0000049a: 	je	.Ltmp2011 # Offset: 1178
    0000049c: 	movq	0xb8(%rsp), %rbx
    000004a4: 	movq	%rbx, %rdi
    000004a7: 	callq	strlen@PLT # Offset: 1191
    000004ac: 	movq	%rbx, %rsi
    000004af: 	movq	%r13, %rdi
    000004b2: 	movq	%rax, %rdx
    000004b5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1205
.Ltmp2012:
    000004ba: 	movl	$0xd, %edx
    000004bf: 	movq	%r13, %rdi
    000004c2: 	leaq	DATAat0x3500a(%rip), %rsi
    000004c9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1225
    000004ce: 	movl	%ebp, %esi
    000004d0: 	movq	%r13, %rdi
    000004d3: 	callq	_ZNSolsEi@PLT # Offset: 1235
    000004d8: 	movl	$0xb, %edx
    000004dd: 	leaq	DATAat0x35018(%rip), %rsi
    000004e4: 	movq	%rax, %rbp
    000004e7: 	movq	%rax, %rdi
    000004ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1258
    000004ef: 	movq	%rbp, %rdi
    000004f2: 	movl	%r12d, %esi
    000004f5: 	callq	_ZNSolsEi@PLT # Offset: 1269
    000004fa: 	addq	$0xc8, %rsp
    00000501: 	popq	%rbx
    00000502: 	movq	%rax, %rdi
    00000505: 	popq	%rbp
    00000506: 	popq	%r12
    00000508: 	popq	%r13
    0000050a: 	popq	%r14
    0000050c: 	popq	%r15
    0000050e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1294
.Ltmp2011:
    00000513: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000051a: 	movq	-0x18(%rax), %rdi
    0000051e: 	addq	%r13, %rdi
    00000521: 	movl	0x20(%rdi), %esi
    00000524: 	orl	$0x1, %esi
    00000527: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1319
    0000052c: 	jmp	.Ltmp2012 # Offset: 1324
.Ltmp2006:
    0000052e: 	xorl	%ebp, %ebp
    00000530: 	jmp	.Ltmp2009 # Offset: 1328
.Ltmp2007:
    00000535: 	xorl	%ebp, %ebp
    00000537: 	xorl	%eax, %eax
    00000539: 	jmp	.Ltmp2013 # Offset: 1337
DWARF CFI Instructions:
    <empty>
End of Function "_Z37test_for_loop_memset_partial4_replaceIiEvPT_iPKc"

Binary Function "_Z30test_for_loop_partial4_replaceIiEvPT_iPKc" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x2eec0
  Size        : 0x57e
  MaxSize     : 0x580
  Offset      : 0x2eec0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_partial4_replaceIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %ecx
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	testl	%esi, %esi
    0000001d: 	cmovnsl	%esi, %ecx
    00000020: 	movq	%rdi, 0x10(%rsp)
    00000025: 	movq	%rdx, 0xc8(%rsp)
    0000002d: 	sarl	$0x2, %ecx
    00000030: 	movl	%ecx, (%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movq	0x10(%rsp), %r9
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movl	iterations(%rip), %eax
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp2014 # Offset: 76
    00000052: 	cvttsd2si	init_value(%rip), %r11d
    0000005b: 	movl	(%rsp), %ecx
    0000005e: 	leal	(%rcx,%rcx), %r14d
    00000062: 	movl	%ecx, 0x10(%rsp)
    00000066: 	movl	%r14d, %esi
    00000069: 	leal	(%r14,%rcx), %r15d
    0000006d: 	leal	0x2(%r11), %eax
    00000071: 	leal	0x1(%r11), %r10d
    00000075: 	movd	%r11d, %xmm5
    0000007a: 	subl	%ecx, %esi
    0000007c: 	movl	%eax, 0x24(%rsp)
    00000080: 	leal	-0x1(%r13), %eax
    00000084: 	leal	-0x1(%rsi), %edx
    00000087: 	pshufd	$0x0, %xmm5, %xmm1
    0000008c: 	leaq	0x4(,%rax,4), %rax
    00000094: 	movl	%esi, 0x58(%rsp)
    00000098: 	movq	%rax, 0x28(%rsp)
    0000009d: 	movslq	%ecx, %rax
    000000a0: 	leaq	(%r9,%rax,4), %rbx
    000000a4: 	movl	%esi, %eax
    000000a6: 	andl	$-0x4, %esi
    000000a9: 	movl	%edx, 0x40(%rsp)
    000000ad: 	shrl	$0x2, %eax
    000000b0: 	movq	%rbx, 0x60(%rsp)
    000000b5: 	subl	$0x1, %eax
    000000b8: 	movl	%esi, 0x5c(%rsp)
    000000bc: 	shlq	$0x4, %rax
    000000c0: 	cmpl	$0x2, %edx
    000000c3: 	leaq	0x10(%rbx,%rax), %r12
    000000c8: 	leal	(%rcx,%rsi), %eax
    000000cb: 	cmovbel	%ecx, %eax
    000000ce: 	leal	-0x1(%rcx), %esi
    000000d1: 	movl	%esi, 0x34(%rsp)
    000000d5: 	movslq	%eax, %rdx
    000000d8: 	leaq	(%r9,%rdx,4), %rbx
    000000dc: 	leal	0x1(%rax), %edx
    000000df: 	addl	$0x2, %eax
    000000e2: 	movl	%eax, 0xac(%rsp)
    000000e9: 	cltq
    000000eb: 	leaq	(%r9,%rax,4), %rax
    000000ef: 	movl	%edx, 0x88(%rsp)
    000000f6: 	movslq	%edx, %rdx
    000000f9: 	movq	%rax, 0xc0(%rsp)
    00000101: 	movslq	%r14d, %rax
    00000104: 	movq	%rbx, 0x80(%rsp)
    0000010c: 	leaq	(%r9,%rdx,4), %rbx
    00000110: 	leaq	(%r9,%rax,4), %rdx
    00000114: 	movl	%ecx, %eax
    00000116: 	shrl	$0x2, %eax
    00000119: 	movq	%rbx, 0xa0(%rsp)
    00000121: 	leal	-0x1(%rax), %ebx
    00000124: 	movl	%ecx, %eax
    00000126: 	movq	%rdx, 0x38(%rsp)
    0000012b: 	movl	%r13d, %ecx
    0000012e: 	addq	$0x1, %rbx
    00000132: 	andl	$-0x4, %eax
    00000135: 	shlq	$0x4, %rbx
    00000139: 	movl	%eax, 0x4c(%rsp)
    0000013d: 	addl	%r14d, %eax
    00000140: 	addq	%rdx, %rbx
    00000143: 	cmpl	$0x2, %esi
    00000146: 	cmovbel	%r14d, %eax
    0000014a: 	leal	0x1(%rax), %edi
    0000014d: 	movslq	%eax, %rdx
    00000150: 	addl	$0x2, %eax
    00000153: 	movl	%eax, 0xa8(%rsp)
    0000015a: 	cltq
    0000015c: 	leaq	(%r9,%rdx,4), %rsi
    00000160: 	movslq	%edi, %rdx
    00000163: 	leaq	(%r9,%rax,4), %rax
    00000167: 	movl	%edi, 0x7c(%rsp)
    0000016b: 	movl	%r13d, %edi
    0000016e: 	leaq	(%r9,%rdx,4), %rdx
    00000172: 	subl	%r15d, %edi
    00000175: 	movq	%rax, 0xb8(%rsp)
    0000017d: 	movslq	%r15d, %rax
    00000180: 	movl	%r11d, %r13d
    00000183: 	movq	%rdx, 0x90(%rsp)
    0000018b: 	leaq	(%r9,%rax,4), %rdx
    0000018f: 	movl	%edi, %eax
    00000191: 	shrl	$0x2, %eax
    00000194: 	movq	%rsi, 0x68(%rsp)
    00000199: 	leal	-0x1(%rdi), %esi
    0000019c: 	leal	-0x1(%rax), %ebp
    0000019f: 	movl	%edi, 0x44(%rsp)
    000001a3: 	andl	$-0x4, %edi
    000001a6: 	shlq	$0x4, %rbp
    000001aa: 	leal	(%r15,%rdi), %eax
    000001ae: 	movq	%rdx, 0x50(%rsp)
    000001b3: 	addq	%rdx, %rbp
    000001b6: 	cmpl	$0x2, %esi
    000001b9: 	movl	%edi, 0x48(%rsp)
    000001bd: 	cmovbel	%r15d, %eax
    000001c1: 	movl	%esi, 0x30(%rsp)
    000001c5: 	xorl	%r8d, %r8d
    000001c8: 	leal	0x1(%rax), %edi
    000001cb: 	movslq	%eax, %rdx
    000001ce: 	addl	$0x2, %eax
    000001d1: 	leaq	(%r9,%rdx,4), %rsi
    000001d5: 	movslq	%edi, %rdx
    000001d8: 	movl	%eax, 0x8c(%rsp)
    000001df: 	cltq
    000001e1: 	leaq	(%r9,%rdx,4), %rdx
    000001e5: 	leaq	(%r9,%rax,4), %rax
    000001e9: 	movq	%rsi, 0x70(%rsp)
    000001ee: 	movq	%rdx, 0x98(%rsp)
    000001f6: 	movq	%rax, 0xb0(%rsp)
    000001fe: 	movl	%r15d, %eax
    00000201: 	movl	%r10d, %r15d
    00000204: 	movl	%r8d, %r10d
    00000207: 	movl	%edi, 0x78(%rsp)
    0000020b: 	movl	%eax, %r8d
    0000020e: 	movq	%r9, %rdi
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp2025:
    00000218: 	testl	%ecx, %ecx
    0000021a: 	jle	.Ltmp2015 # Offset: 538
    0000021c: 	movq	0x28(%rsp), %rdx
    00000221: 	xorl	%esi, %esi
    00000223: 	movl	%r8d, 0x20(%rsp)
    00000228: 	movl	%ecx, 0x1c(%rsp)
    0000022c: 	movl	%r10d, 0x18(%rsp)
    00000231: 	movaps	%xmm1, (%rsp)
    00000235: 	callq	memset@PLT # Offset: 565
    0000023a: 	movl	0x20(%rsp), %r8d
    0000023f: 	movl	0x1c(%rsp), %ecx
    00000243: 	movl	0x18(%rsp), %r10d
    00000248: 	movdqa	(%rsp), %xmm1
    0000024d: 	movq	%rax, %rdi
.Ltmp2015:
    00000250: 	cmpl	%r14d, 0x10(%rsp)
    00000255: 	jge	.Ltmp2016 # Offset: 597
    00000257: 	cmpl	$0x2, 0x40(%rsp)
    0000025c: 	jbe	.Ltmp2017 # Offset: 604
    0000025e: 	movq	0x60(%rsp), %rax
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2018:
    00000268: 	movups	%xmm1, (%rax)
    0000026b: 	addq	$0x10, %rax
    0000026f: 	cmpq	%r12, %rax
    00000272: 	jne	.Ltmp2018 # Offset: 626
    00000274: 	movl	0x5c(%rsp), %esi
    00000278: 	cmpl	%esi, 0x58(%rsp)
    0000027c: 	je	.Ltmp2016 # Offset: 636
.Ltmp2017:
    0000027e: 	movq	0x80(%rsp), %rax
    00000286: 	movl	%r13d, (%rax)
    00000289: 	cmpl	0x88(%rsp), %r14d
    00000291: 	jle	.Ltmp2016 # Offset: 657
    00000293: 	movq	0xa0(%rsp), %rax
    0000029b: 	movl	%r13d, (%rax)
    0000029e: 	cmpl	0xac(%rsp), %r14d
    000002a6: 	jle	.Ltmp2016 # Offset: 678
    000002a8: 	movq	0xc0(%rsp), %rax
    000002b0: 	movl	%r13d, (%rax)
.Ltmp2016:
    000002b3: 	cmpl	%r8d, %r14d
    000002b6: 	jge	.Ltmp2019 # Offset: 694
    000002b8: 	cmpl	$0x2, 0x34(%rsp)
    000002bd: 	jbe	.Ltmp2020 # Offset: 701
    000002bf: 	movd	%r15d, %xmm2
    000002c4: 	movq	0x38(%rsp), %rax
    000002c9: 	pshufd	$0x0, %xmm2, %xmm0
    000002ce: 	nop # Size: 2
.Ltmp2021:
    000002d0: 	movups	%xmm0, (%rax)
    000002d3: 	addq	$0x10, %rax
    000002d7: 	cmpq	%rbx, %rax
    000002da: 	jne	.Ltmp2021 # Offset: 730
    000002dc: 	movl	0x4c(%rsp), %esi
    000002e0: 	cmpl	%esi, 0x10(%rsp)
    000002e4: 	je	.Ltmp2019 # Offset: 740
.Ltmp2020:
    000002e6: 	movq	0x68(%rsp), %rax
    000002eb: 	movl	%r15d, (%rax)
    000002ee: 	cmpl	0x7c(%rsp), %r8d
    000002f3: 	jle	.Ltmp2019 # Offset: 755
    000002f5: 	movq	0x90(%rsp), %rax
    000002fd: 	movl	%r15d, (%rax)
    00000300: 	cmpl	0xa8(%rsp), %r8d
    00000308: 	jle	.Ltmp2019 # Offset: 776
    0000030a: 	movq	0xb8(%rsp), %rax
    00000312: 	movl	%r15d, (%rax)
.Ltmp2019:
    00000315: 	cmpl	%r8d, %ecx
    00000318: 	jle	.Ltmp2022 # Offset: 792
    0000031a: 	cmpl	$0x2, 0x30(%rsp)
    0000031f: 	jbe	.Ltmp2023 # Offset: 799
    00000321: 	movd	0x24(%rsp), %xmm3
    00000327: 	movq	0x50(%rsp), %rax
    0000032c: 	pshufd	$0x0, %xmm3, %xmm0
    00000331: 	nopl	(%rax) # Size: 7
.Ltmp2024:
    00000338: 	movq	%rax, %rdx
    0000033b: 	movups	%xmm0, (%rax)
    0000033e: 	addq	$0x10, %rax
    00000342: 	cmpq	%rbp, %rdx
    00000345: 	jne	.Ltmp2024 # Offset: 837
    00000347: 	movl	0x48(%rsp), %esi
    0000034b: 	cmpl	%esi, 0x44(%rsp)
    0000034f: 	je	.Ltmp2022 # Offset: 847
.Ltmp2023:
    00000351: 	movq	0x70(%rsp), %rsi
    00000356: 	movl	0x24(%rsp), %eax
    0000035a: 	movl	%eax, (%rsi)
    0000035c: 	cmpl	%ecx, 0x78(%rsp)
    00000360: 	jge	.Ltmp2022 # Offset: 864
    00000362: 	movq	0x98(%rsp), %rsi
    0000036a: 	movl	%eax, (%rsi)
    0000036c: 	cmpl	%ecx, 0x8c(%rsp)
    00000373: 	jge	.Ltmp2022 # Offset: 883
    00000375: 	movq	0xb0(%rsp), %rsi
    0000037d: 	movl	%eax, (%rsi)
.Ltmp2022:
    0000037f: 	addl	$0x1, %r10d
    00000383: 	cmpl	%r10d, iterations(%rip)
    0000038a: 	jg	.Ltmp2025 # Offset: 906
    00000390: 	movq	%rdi, %r9
    00000393: 	movl	%ecx, %r13d
.Ltmp2014:
    00000396: 	movq	%r9, 0x10(%rsp)
    0000039b: 	callq	clock@PLT # Offset: 923
    000003a0: 	movq	0xc8(%rsp), %rdi
    000003a8: 	pxor	%xmm0, %xmm0
    000003ac: 	movq	%rax, end_time(%rip)
    000003b3: 	subq	start_time(%rip), %rax
    000003ba: 	cvtsi2sd	%rax, %xmm0
    000003bf: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003c7: 	callq	_Z13record_resultdPKc # Offset: 967
    000003cc: 	testl	%r13d, %r13d
    000003cf: 	jle	.Ltmp2026 # Offset: 975
    000003d5: 	leal	-0x1(%r13), %eax
    000003d9: 	movq	0x10(%rsp), %r9
    000003de: 	cmpl	$0x2, %eax
    000003e1: 	jbe	.Ltmp2027 # Offset: 993
    000003e7: 	movl	%r13d, %edx
    000003ea: 	movq	%r9, %rax
    000003ed: 	pxor	%xmm0, %xmm0
    000003f1: 	shrl	$0x2, %edx
    000003f4: 	subl	$0x1, %edx
    000003f7: 	shlq	$0x4, %rdx
    000003fb: 	leaq	0x10(%r9,%rdx), %rdx
.Ltmp2028:
    00000400: 	movdqu	(%rax), %xmm4
    00000404: 	addq	$0x10, %rax
    00000408: 	paddd	%xmm4, %xmm0
    0000040c: 	cmpq	%rax, %rdx
    0000040f: 	jne	.Ltmp2028 # Offset: 1039
    00000411: 	movdqa	%xmm0, %xmm1
    00000415: 	movl	%r13d, %eax
    00000418: 	psrldq	$0x8, %xmm1
    0000041d: 	andl	$-0x4, %eax
    00000420: 	paddd	%xmm1, %xmm0
    00000424: 	movdqa	%xmm0, %xmm1
    00000428: 	psrldq	$0x4, %xmm1
    0000042d: 	paddd	%xmm1, %xmm0
    00000431: 	movd	%xmm0, %ebp
    00000435: 	testb	$0x3, %r13b
    00000439: 	je	.Ltmp2029 # Offset: 1081
.Ltmp2033:
    0000043b: 	movslq	%eax, %rdx
    0000043e: 	leaq	(,%rdx,4), %rcx
    00000446: 	addl	(%r9,%rdx,4), %ebp
    0000044a: 	leal	0x1(%rax), %edx
    0000044d: 	cmpl	%edx, %r13d
    00000450: 	jle	.Ltmp2029 # Offset: 1104
    00000452: 	addl	$0x2, %eax
    00000455: 	addl	0x4(%r9,%rcx), %ebp
    0000045a: 	cmpl	%eax, %r13d
    0000045d: 	jle	.Ltmp2029 # Offset: 1117
    0000045f: 	addl	0x8(%r9,%rcx), %ebp
.Ltmp2029:
    00000464: 	movsd	init_value(%rip), %xmm0
    0000046c: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000474: 	cvttsd2si	%xmm0, %eax
    00000478: 	addsd	%xmm0, %xmm1
    0000047c: 	addsd	DATAat0x37030(%rip), %xmm0
    00000484: 	cvttsd2si	%xmm1, %r12d
    00000489: 	cltq
    0000048b: 	movslq	%r12d, %r12
    0000048e: 	addq	%rax, %r12
    00000491: 	cvttsd2si	%xmm0, %eax
    00000495: 	addl	%eax, %r12d
    00000498: 	imull	$0x1e8480, %r12d, %r12d
    0000049f: 	cmpl	%ebp, %r12d
    000004a2: 	jne	.Ltmp2030 # Offset: 1186
    000004a4: 	addq	$0xd8, %rsp
    000004ab: 	popq	%rbx
    000004ac: 	popq	%rbp
    000004ad: 	popq	%r12
    000004af: 	popq	%r13
    000004b1: 	popq	%r14
    000004b3: 	popq	%r15
    000004b5: 	retq # Offset: 1205
.Ltmp2030:
    000004b6: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004bd: 	movl	$0x5, %edx
    000004c2: 	leaq	DATAat0x35004(%rip), %rsi
    000004c9: 	movq	%r13, %rdi
    000004cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1228
    000004d1: 	cmpq	$0x0, 0xc8(%rsp)
    000004da: 	je	.Ltmp2031 # Offset: 1242
    000004dc: 	movq	0xc8(%rsp), %rbx
    000004e4: 	movq	%rbx, %rdi
    000004e7: 	callq	strlen@PLT # Offset: 1255
    000004ec: 	movq	%rbx, %rsi
    000004ef: 	movq	%r13, %rdi
    000004f2: 	movq	%rax, %rdx
    000004f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1269
.Ltmp2032:
    000004fa: 	movl	$0xd, %edx
    000004ff: 	movq	%r13, %rdi
    00000502: 	leaq	DATAat0x3500a(%rip), %rsi
    00000509: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1289
    0000050e: 	movl	%ebp, %esi
    00000510: 	movq	%r13, %rdi
    00000513: 	callq	_ZNSolsEi@PLT # Offset: 1299
    00000518: 	movl	$0xb, %edx
    0000051d: 	leaq	DATAat0x35018(%rip), %rsi
    00000524: 	movq	%rax, %rbp
    00000527: 	movq	%rax, %rdi
    0000052a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1322
    0000052f: 	movq	%rbp, %rdi
    00000532: 	movl	%r12d, %esi
    00000535: 	callq	_ZNSolsEi@PLT # Offset: 1333
    0000053a: 	addq	$0xd8, %rsp
    00000541: 	popq	%rbx
    00000542: 	movq	%rax, %rdi
    00000545: 	popq	%rbp
    00000546: 	popq	%r12
    00000548: 	popq	%r13
    0000054a: 	popq	%r14
    0000054c: 	popq	%r15
    0000054e: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1358
.Ltmp2031:
    00000553: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000055a: 	movq	-0x18(%rax), %rdi
    0000055e: 	addq	%r13, %rdi
    00000561: 	movl	0x20(%rdi), %esi
    00000564: 	orl	$0x1, %esi
    00000567: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1383
    0000056c: 	jmp	.Ltmp2032 # Offset: 1388
.Ltmp2026:
    0000056e: 	xorl	%ebp, %ebp
    00000570: 	jmp	.Ltmp2029 # Offset: 1392
.Ltmp2027:
    00000575: 	xorl	%ebp, %ebp
    00000577: 	xorl	%eax, %eax
    00000579: 	jmp	.Ltmp2033 # Offset: 1401
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_partial4_replaceIiEvPT_iPKc"

Binary Function "_Z31test_for_loop_partial4_replaceAIiEvPT_iPKc" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x2f440
  Size        : 0x56a
  MaxSize     : 0x570
  Offset      : 0x2f440
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_partial4_replaceAIiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	leal	0x3(%rsi), %r14d
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	movl	%esi, %ebx
    00000017: 	subq	$0xe8, %rsp
    0000001e: 	testl	%esi, %esi
    00000020: 	cmovnsl	%esi, %r14d
    00000024: 	movq	%rdx, 0xd8(%rsp)
    0000002c: 	sarl	$0x2, %r14d
    00000030: 	movl	%r14d, 0x28(%rsp)
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp2034 # Offset: 73
    0000004f: 	leal	-0x1(%rbx), %eax
    00000052: 	movl	%r14d, %ebp
    00000055: 	movl	%ebx, %edx
    00000057: 	leaq	0x4(,%rax,4), %rax
    0000005f: 	subl	%ebp, %edx
    00000061: 	leal	(%rbp,%rbp), %edi
    00000065: 	movq	%rax, 0x38(%rsp)
    0000006a: 	movslq	%ebp, %rax
    0000006d: 	leal	-0x1(%rdx), %r11d
    00000071: 	movl	%edi, %esi
    00000073: 	leaq	(%r15,%rax,4), %r8
    00000077: 	movl	%edx, %eax
    00000079: 	movl	%edx, 0x68(%rsp)
    0000007d: 	andl	$-0x4, %edx
    00000080: 	shrl	$0x2, %eax
    00000083: 	addl	%ebp, %esi
    00000085: 	movl	%edx, 0x6c(%rsp)
    00000089: 	subl	$0x1, %eax
    0000008c: 	movl	%r11d, 0x44(%rsp)
    00000091: 	cvttsd2si	init_value(%rip), %r14d
    0000009a: 	shlq	$0x4, %rax
    0000009e: 	movl	%edi, 0x2c(%rsp)
    000000a2: 	leaq	0x10(%r8,%rax), %r13
    000000a7: 	movl	%ebp, %eax
    000000a9: 	movl	%esi, 0x30(%rsp)
    000000ad: 	addl	%edx, %eax
    000000af: 	cmpl	$0x2, %r11d
    000000b3: 	movq	%r8, 0x70(%rsp)
    000000b8: 	movq	%r13, %r8
    000000bb: 	cmovbel	%ebp, %eax
    000000be: 	leal	0x2(%r14), %r9d
    000000c2: 	movd	%r14d, %xmm5
    000000c7: 	movl	%r14d, %r13d
    000000ca: 	leal	0x1(%r14), %r10d
    000000ce: 	pshufd	$0x0, %xmm5, %xmm1
    000000d3: 	movslq	%eax, %rdx
    000000d6: 	movl	%r10d, %r14d
    000000d9: 	leaq	(%r15,%rdx,4), %rcx
    000000dd: 	movq	%rcx, 0x90(%rsp)
    000000e5: 	leal	0x1(%rax), %ecx
    000000e8: 	addl	$0x2, %eax
    000000eb: 	movslq	%ecx, %rdx
    000000ee: 	movl	%ecx, 0x98(%rsp)
    000000f5: 	movl	%eax, 0xbc(%rsp)
    000000fc: 	leaq	(%r15,%rdx,4), %rcx
    00000100: 	cltq
    00000102: 	leaq	(%r15,%rax,4), %rax
    00000106: 	movq	%rcx, 0xb0(%rsp)
    0000010e: 	movl	%ebx, %ecx
    00000110: 	subl	%edi, %ecx
    00000112: 	movq	%rax, 0xd0(%rsp)
    0000011a: 	movslq	%edi, %rax
    0000011d: 	leaq	(%r15,%rax,4), %r11
    00000121: 	movl	%ecx, %eax
    00000123: 	leal	-0x1(%rcx), %edx
    00000126: 	movl	%ecx, 0x58(%rsp)
    0000012a: 	shrl	$0x2, %eax
    0000012d: 	andl	$-0x4, %ecx
    00000130: 	movl	%edx, 0x40(%rsp)
    00000134: 	leal	-0x1(%rax), %r12d
    00000138: 	movl	%edi, %eax
    0000013a: 	movl	%ecx, 0x5c(%rsp)
    0000013e: 	shlq	$0x4, %r12
    00000142: 	addl	%ecx, %eax
    00000144: 	movq	%r11, 0x48(%rsp)
    00000149: 	addq	%r11, %r12
    0000014c: 	cmpl	$0x2, %edx
    0000014f: 	cmovbel	%edi, %eax
    00000152: 	movslq	%eax, %rdx
    00000155: 	leaq	(%r15,%rdx,4), %rdi
    00000159: 	movq	%rdi, 0x78(%rsp)
    0000015e: 	leal	0x1(%rax), %edi
    00000161: 	addl	$0x2, %eax
    00000164: 	movslq	%edi, %rdx
    00000167: 	movl	%edi, 0x8c(%rsp)
    0000016e: 	movl	%eax, 0xb8(%rsp)
    00000175: 	leaq	(%r15,%rdx,4), %rdi
    00000179: 	cltq
    0000017b: 	leaq	(%r15,%rax,4), %rax
    0000017f: 	movq	%rdi, 0xa0(%rsp)
    00000187: 	movl	%ebx, %edi
    00000189: 	subl	%esi, %edi
    0000018b: 	movq	%rax, 0xc8(%rsp)
    00000193: 	movslq	%esi, %rax
    00000196: 	leaq	(%r15,%rax,4), %rdx
    0000019a: 	movl	%edi, %eax
    0000019c: 	leal	-0x1(%rdi), %ecx
    0000019f: 	movl	%edi, 0x50(%rsp)
    000001a3: 	shrl	$0x2, %eax
    000001a6: 	andl	$-0x4, %edi
    000001a9: 	movq	%rdx, 0x60(%rsp)
    000001ae: 	leal	-0x1(%rax), %ebp
    000001b1: 	movl	%esi, %eax
    000001b3: 	movl	%ecx, 0x34(%rsp)
    000001b7: 	shlq	$0x4, %rbp
    000001bb: 	addl	%edi, %eax
    000001bd: 	movl	%edi, 0x54(%rsp)
    000001c1: 	movq	%r15, %rdi
    000001c4: 	addq	%rdx, %rbp
    000001c7: 	cmpl	$0x2, %ecx
    000001ca: 	cmovbel	%esi, %eax
    000001cd: 	xorl	%ecx, %ecx
    000001cf: 	movslq	%eax, %rdx
    000001d2: 	leaq	(%r15,%rdx,4), %rsi
    000001d6: 	movq	%rsi, 0x80(%rsp)
    000001de: 	leal	0x1(%rax), %esi
    000001e1: 	addl	$0x2, %eax
    000001e4: 	movl	%eax, 0x9c(%rsp)
    000001eb: 	movslq	%esi, %rdx
    000001ee: 	cltq
    000001f0: 	leaq	(%r15,%rax,4), %rax
    000001f4: 	movl	%esi, 0x88(%rsp)
    000001fb: 	leaq	(%r15,%rdx,4), %rsi
    000001ff: 	movl	%r9d, %r15d
    00000202: 	movq	%rsi, 0xa8(%rsp)
    0000020a: 	movq	%rax, 0xc0(%rsp)
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2045:
    00000218: 	testl	%ebx, %ebx
    0000021a: 	jle	.Ltmp2035 # Offset: 538
    0000021c: 	movq	0x38(%rsp), %rdx
    00000221: 	xorl	%esi, %esi
    00000223: 	movq	%r8, 0x20(%rsp)
    00000228: 	movl	%ecx, 0x1c(%rsp)
    0000022c: 	movaps	%xmm1, (%rsp)
    00000230: 	callq	memset@PLT # Offset: 560
    00000235: 	movq	0x20(%rsp), %r8
    0000023a: 	movl	0x1c(%rsp), %ecx
    0000023e: 	movdqa	(%rsp), %xmm1
    00000243: 	movq	%rax, %rdi
.Ltmp2035:
    00000246: 	cmpl	0x28(%rsp), %ebx
    0000024a: 	jle	.Ltmp2036 # Offset: 586
    0000024c: 	cmpl	$0x2, 0x44(%rsp)
    00000251: 	jbe	.Ltmp2037 # Offset: 593
    00000253: 	movq	0x70(%rsp), %rax
    00000258: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2038:
    00000260: 	movups	%xmm1, (%rax)
    00000263: 	addq	$0x10, %rax
    00000267: 	cmpq	%r8, %rax
    0000026a: 	jne	.Ltmp2038 # Offset: 618
    0000026c: 	movl	0x6c(%rsp), %esi
    00000270: 	cmpl	%esi, 0x68(%rsp)
    00000274: 	je	.Ltmp2036 # Offset: 628
.Ltmp2037:
    00000276: 	movq	0x90(%rsp), %rax
    0000027e: 	movl	%r13d, (%rax)
    00000281: 	cmpl	0x98(%rsp), %ebx
    00000288: 	jle	.Ltmp2036 # Offset: 648
    0000028a: 	movq	0xb0(%rsp), %rax
    00000292: 	movl	%r13d, (%rax)
    00000295: 	cmpl	0xbc(%rsp), %ebx
    0000029c: 	jle	.Ltmp2036 # Offset: 668
    0000029e: 	movq	0xd0(%rsp), %rax
    000002a6: 	movl	%r13d, (%rax)
.Ltmp2036:
    000002a9: 	cmpl	0x2c(%rsp), %ebx
    000002ad: 	jle	.Ltmp2039 # Offset: 685
    000002af: 	cmpl	$0x2, 0x40(%rsp)
    000002b4: 	jbe	.Ltmp2040 # Offset: 692
    000002b6: 	movd	%r14d, %xmm2
    000002bb: 	movq	0x48(%rsp), %rax
    000002c0: 	pshufd	$0x0, %xmm2, %xmm0
    000002c5: 	nopl	(%rax) # Size: 3
.Ltmp2041:
    000002c8: 	movq	%rax, %rdx
    000002cb: 	movups	%xmm0, (%rax)
    000002ce: 	addq	$0x10, %rax
    000002d2: 	cmpq	%r12, %rdx
    000002d5: 	jne	.Ltmp2041 # Offset: 725
    000002d7: 	movl	0x5c(%rsp), %esi
    000002db: 	cmpl	%esi, 0x58(%rsp)
    000002df: 	je	.Ltmp2039 # Offset: 735
.Ltmp2040:
    000002e1: 	movq	0x78(%rsp), %rax
    000002e6: 	movl	%r14d, (%rax)
    000002e9: 	cmpl	0x8c(%rsp), %ebx
    000002f0: 	jle	.Ltmp2039 # Offset: 752
    000002f2: 	movq	0xa0(%rsp), %rax
    000002fa: 	movl	%r14d, (%rax)
    000002fd: 	cmpl	0xb8(%rsp), %ebx
    00000304: 	jle	.Ltmp2039 # Offset: 772
    00000306: 	movq	0xc8(%rsp), %rax
    0000030e: 	movl	%r14d, (%rax)
.Ltmp2039:
    00000311: 	cmpl	0x30(%rsp), %ebx
    00000315: 	jle	.Ltmp2042 # Offset: 789
    00000317: 	cmpl	$0x2, 0x34(%rsp)
    0000031c: 	jbe	.Ltmp2043 # Offset: 796
    0000031e: 	movd	%r15d, %xmm3
    00000323: 	movq	0x60(%rsp), %rax
    00000328: 	pshufd	$0x0, %xmm3, %xmm0
    0000032d: 	nopl	(%rax) # Size: 3
.Ltmp2044:
    00000330: 	movq	%rax, %rdx
    00000333: 	movups	%xmm0, (%rax)
    00000336: 	addq	$0x10, %rax
    0000033a: 	cmpq	%rbp, %rdx
    0000033d: 	jne	.Ltmp2044 # Offset: 829
    0000033f: 	movl	0x54(%rsp), %esi
    00000343: 	cmpl	%esi, 0x50(%rsp)
    00000347: 	je	.Ltmp2042 # Offset: 839
.Ltmp2043:
    00000349: 	movq	0x80(%rsp), %rax
    00000351: 	movl	%r15d, (%rax)
    00000354: 	cmpl	%ebx, 0x88(%rsp)
    0000035b: 	jge	.Ltmp2042 # Offset: 859
    0000035d: 	movq	0xa8(%rsp), %rax
    00000365: 	movl	%r15d, (%rax)
    00000368: 	cmpl	%ebx, 0x9c(%rsp)
    0000036f: 	jge	.Ltmp2042 # Offset: 879
    00000371: 	movq	0xc0(%rsp), %rax
    00000379: 	movl	%r15d, (%rax)
.Ltmp2042:
    0000037c: 	addl	$0x1, %ecx
    0000037f: 	cmpl	%ecx, iterations(%rip)
    00000385: 	jg	.Ltmp2045 # Offset: 901
    0000038b: 	movq	%rdi, %r15
.Ltmp2034:
    0000038e: 	callq	clock@PLT # Offset: 910
    00000393: 	movq	0xd8(%rsp), %rdi
    0000039b: 	pxor	%xmm0, %xmm0
    0000039f: 	movq	%rax, end_time(%rip)
    000003a6: 	subq	start_time(%rip), %rax
    000003ad: 	cvtsi2sd	%rax, %xmm0
    000003b2: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003ba: 	callq	_Z13record_resultdPKc # Offset: 954
    000003bf: 	testl	%ebx, %ebx
    000003c1: 	jle	.Ltmp2046 # Offset: 961
    000003c7: 	leal	-0x1(%rbx), %eax
    000003ca: 	cmpl	$0x2, %eax
    000003cd: 	jbe	.Ltmp2047 # Offset: 973
    000003d3: 	movl	%ebx, %edx
    000003d5: 	movq	%r15, %rax
    000003d8: 	pxor	%xmm0, %xmm0
    000003dc: 	shrl	$0x2, %edx
    000003df: 	subl	$0x1, %edx
    000003e2: 	shlq	$0x4, %rdx
    000003e6: 	leaq	0x10(%r15,%rdx), %rdx
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2048:
    000003f0: 	movdqu	(%rax), %xmm4
    000003f4: 	addq	$0x10, %rax
    000003f8: 	paddd	%xmm4, %xmm0
    000003fc: 	cmpq	%rax, %rdx
    000003ff: 	jne	.Ltmp2048 # Offset: 1023
    00000401: 	movdqa	%xmm0, %xmm1
    00000405: 	movl	%ebx, %eax
    00000407: 	psrldq	$0x8, %xmm1
    0000040c: 	andl	$-0x4, %eax
    0000040f: 	paddd	%xmm1, %xmm0
    00000413: 	movdqa	%xmm0, %xmm1
    00000417: 	psrldq	$0x4, %xmm1
    0000041c: 	paddd	%xmm1, %xmm0
    00000420: 	movd	%xmm0, %ebp
    00000424: 	testb	$0x3, %bl
    00000427: 	je	.Ltmp2049 # Offset: 1063
.Ltmp2053:
    00000429: 	movslq	%eax, %rdx
    0000042c: 	leaq	(,%rdx,4), %rcx
    00000434: 	addl	(%r15,%rdx,4), %ebp
    00000438: 	leal	0x1(%rax), %edx
    0000043b: 	cmpl	%edx, %ebx
    0000043d: 	jle	.Ltmp2049 # Offset: 1085
    0000043f: 	addl	$0x2, %eax
    00000442: 	addl	0x4(%r15,%rcx), %ebp
    00000447: 	cmpl	%eax, %ebx
    00000449: 	jle	.Ltmp2049 # Offset: 1097
    0000044b: 	addl	0x8(%r15,%rcx), %ebp
.Ltmp2049:
    00000450: 	movsd	init_value(%rip), %xmm0
    00000458: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000460: 	cvttsd2si	%xmm0, %eax
    00000464: 	addsd	%xmm0, %xmm1
    00000468: 	addsd	DATAat0x37030(%rip), %xmm0
    00000470: 	cvttsd2si	%xmm1, %r12d
    00000475: 	cltq
    00000477: 	movslq	%r12d, %r12
    0000047a: 	addq	%rax, %r12
    0000047d: 	cvttsd2si	%xmm0, %eax
    00000481: 	addl	%eax, %r12d
    00000484: 	imull	$0x1e8480, %r12d, %r12d
    0000048b: 	cmpl	%ebp, %r12d
    0000048e: 	jne	.Ltmp2050 # Offset: 1166
    00000490: 	addq	$0xe8, %rsp
    00000497: 	popq	%rbx
    00000498: 	popq	%rbp
    00000499: 	popq	%r12
    0000049b: 	popq	%r13
    0000049d: 	popq	%r14
    0000049f: 	popq	%r15
    000004a1: 	retq # Offset: 1185
.Ltmp2050:
    000004a2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004a9: 	movl	$0x5, %edx
    000004ae: 	leaq	DATAat0x35004(%rip), %rsi
    000004b5: 	movq	%r13, %rdi
    000004b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1208
    000004bd: 	cmpq	$0x0, 0xd8(%rsp)
    000004c6: 	je	.Ltmp2051 # Offset: 1222
    000004c8: 	movq	0xd8(%rsp), %rbx
    000004d0: 	movq	%rbx, %rdi
    000004d3: 	callq	strlen@PLT # Offset: 1235
    000004d8: 	movq	%rbx, %rsi
    000004db: 	movq	%r13, %rdi
    000004de: 	movq	%rax, %rdx
    000004e1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1249
.Ltmp2052:
    000004e6: 	movl	$0xd, %edx
    000004eb: 	movq	%r13, %rdi
    000004ee: 	leaq	DATAat0x3500a(%rip), %rsi
    000004f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1269
    000004fa: 	movl	%ebp, %esi
    000004fc: 	movq	%r13, %rdi
    000004ff: 	callq	_ZNSolsEi@PLT # Offset: 1279
    00000504: 	movl	$0xb, %edx
    00000509: 	leaq	DATAat0x35018(%rip), %rsi
    00000510: 	movq	%rax, %rbp
    00000513: 	movq	%rax, %rdi
    00000516: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1302
    0000051b: 	movq	%rbp, %rdi
    0000051e: 	movl	%r12d, %esi
    00000521: 	callq	_ZNSolsEi@PLT # Offset: 1313
    00000526: 	addq	$0xe8, %rsp
    0000052d: 	popq	%rbx
    0000052e: 	movq	%rax, %rdi
    00000531: 	popq	%rbp
    00000532: 	popq	%r12
    00000534: 	popq	%r13
    00000536: 	popq	%r14
    00000538: 	popq	%r15
    0000053a: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1338
.Ltmp2051:
    0000053f: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000546: 	movq	-0x18(%rax), %rdi
    0000054a: 	addq	%r13, %rdi
    0000054d: 	movl	0x20(%rdi), %esi
    00000550: 	orl	$0x1, %esi
    00000553: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1363
    00000558: 	jmp	.Ltmp2052 # Offset: 1368
.Ltmp2046:
    0000055a: 	xorl	%ebp, %ebp
    0000055c: 	jmp	.Ltmp2049 # Offset: 1372
.Ltmp2047:
    00000561: 	xorl	%ebp, %ebp
    00000563: 	xorl	%eax, %eax
    00000565: 	jmp	.Ltmp2053 # Offset: 1381
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_partial4_replaceAIiEvPT_iPKc"

Binary Function "_Z30test_loop_partial4_replace_optIdEvPT_iPKc" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x2f9b0
  Size        : 0x680
  MaxSize     : 0x680
  Offset      : 0x2f9b0
  Section     : .text
  Orc Section : .local.text._Z30test_loop_partial4_replace_optIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %r9d
    0000000a: 	movq	%rdi, %r15
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x98, %rsp
    0000001c: 	testl	%esi, %esi
    0000001e: 	cmovnsl	%esi, %r9d
    00000022: 	movq	%rdx, 0x70(%rsp)
    00000027: 	movl	%esi, 0x8(%rsp)
    0000002b: 	sarl	$0x2, %r9d
    0000002f: 	movl	%r9d, (%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000040: 	movl	0x8(%rsp), %r8d
    00000045: 	movq	%rax, start_time(%rip)
    0000004c: 	movl	iterations(%rip), %eax
    00000052: 	movsd	DATAat0x37030(%rip), %xmm2
    0000005a: 	testl	%eax, %eax
    0000005c: 	movl	%eax, 0x34(%rsp)
    00000060: 	jle	.Ltmp2054 # Offset: 96
    00000066: 	movl	(%rsp), %ebx
    00000069: 	cmpl	$0x3, %r8d
    0000006d: 	leaq	init_value(%rip), %rbp
    00000074: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000007c: 	leaq	0x8(%rbp), %r12
    00000080: 	movsd	DATAat0x37030(%rip), %xmm2
    00000088: 	leal	(%rbx,%rbx), %r9d
    0000008c: 	leal	-0x1(%rbx), %eax
    0000008f: 	movq	%rax, %rsi
    00000092: 	leaq	0x8(,%rax,8), %rdx
    0000009a: 	movl	%r9d, %r11d
    0000009d: 	movl	$0x8, %eax
    000000a2: 	cmovgq	%rdx, %rax
    000000a6: 	subl	%ebx, %r11d
    000000a9: 	leal	(%r9,%rbx), %r10d
    000000ad: 	movslq	%ebx, %rdx
    000000b0: 	movl	%r11d, %ecx
    000000b3: 	leaq	(%r15,%rdx,8), %r14
    000000b7: 	movl	%r11d, 0x68(%rsp)
    000000bc: 	addq	%rdx, %rcx
    000000bf: 	movq	%rax, 0x40(%rsp)
    000000c4: 	leal	-0x1(%r11), %eax
    000000c8: 	leaq	(%r15,%rcx,8), %rcx
    000000cc: 	movq	%r14, 0x50(%rsp)
    000000d1: 	cmpq	%rbp, %rcx
    000000d4: 	setbe	%dil
    000000d8: 	cmpq	%r12, %r14
    000000db: 	setae	%cl
    000000de: 	orl	%edi, %ecx
    000000e0: 	cmpl	$0x2, %eax
    000000e3: 	seta	%dil
    000000e7: 	addq	%rdx, %rax
    000000ea: 	movl	%ebx, %edx
    000000ec: 	andl	%edi, %ecx
    000000ee: 	movl	%ebx, %edi
    000000f0: 	movb	%cl, 0x5b(%rsp)
    000000f4: 	movl	%r11d, %ecx
    000000f7: 	andl	$-0x2, %r11d
    000000fb: 	addl	%r11d, %edi
    000000fe: 	movl	%r11d, 0x6c(%rsp)
    00000103: 	leaq	0x8(%r15), %r11
    00000107: 	shrl	%ecx
    00000109: 	leaq	(%r11,%rax,8), %rax
    0000010d: 	subl	$0x1, %ecx
    00000110: 	movslq	%edi, %rdi
    00000113: 	movq	%rax, 0x88(%rsp)
    0000011b: 	movslq	%r9d, %rax
    0000011e: 	shlq	$0x4, %rcx
    00000122: 	addq	%rax, %rdx
    00000125: 	leaq	(%r15,%rax,8), %r13
    00000129: 	leaq	0x10(%r14,%rcx), %rcx
    0000012e: 	leaq	(%r15,%rdx,8), %rdx
    00000132: 	leaq	(%r15,%rdi,8), %r14
    00000136: 	movq	%r13, 0x48(%rsp)
    0000013b: 	cmpq	%rbp, %rdx
    0000013e: 	setbe	%dil
    00000142: 	cmpq	%r12, %r13
    00000145: 	setae	%dl
    00000148: 	orl	%edi, %edx
    0000014a: 	cmpl	$0x1, %esi
    0000014d: 	movl	%r8d, %edi
    00000150: 	seta	%sil
    00000154: 	subl	%r10d, %edi
    00000157: 	andl	%esi, %edx
    00000159: 	movl	%ebx, %esi
    0000015b: 	movl	%edi, 0x5c(%rsp)
    0000015f: 	movb	%dl, 0x5a(%rsp)
    00000163: 	movl	%ebx, %edx
    00000165: 	andl	$-0x2, %esi
    00000168: 	shrl	%edx
    0000016a: 	movl	%esi, 0x64(%rsp)
    0000016e: 	leal	-0x1(%rdx), %ebx
    00000171: 	leal	(%r9,%rsi), %edx
    00000175: 	addq	$0x1, %rbx
    00000179: 	movslq	%edx, %rdx
    0000017c: 	shlq	$0x4, %rbx
    00000180: 	addq	%r13, %rbx
    00000183: 	leaq	(%r15,%rdx,8), %r13
    00000187: 	leal	-0x1(%r10), %edx
    0000018b: 	subl	%r9d, %edx
    0000018e: 	addq	%rax, %rdx
    00000191: 	leaq	(%r11,%rdx,8), %rax
    00000195: 	movl	%edi, %edx
    00000197: 	movq	%rax, 0x78(%rsp)
    0000019c: 	movslq	%r10d, %rax
    0000019f: 	addq	%rax, %rdx
    000001a2: 	leaq	(%r15,%rax,8), %rsi
    000001a6: 	leaq	(%r15,%rdx,8), %rdx
    000001aa: 	movq	%rsi, 0x38(%rsp)
    000001af: 	cmpq	%rbp, %rdx
    000001b2: 	setbe	%dl
    000001b5: 	cmpq	%r12, %rsi
    000001b8: 	setae	%sil
    000001bc: 	orl	%esi, %edx
    000001be: 	leal	-0x1(%rdi), %esi
    000001c1: 	cmpl	$0x1, %esi
    000001c4: 	seta	%sil
    000001c8: 	andl	%esi, %edx
    000001ca: 	movb	%dl, 0x59(%rsp)
    000001ce: 	movl	%edi, %edx
    000001d0: 	andl	$-0x2, %edi
    000001d3: 	shrl	%edx
    000001d5: 	movl	%edi, 0x60(%rsp)
    000001d9: 	leal	-0x1(%rdx), %ebp
    000001dc: 	leal	(%r10,%rdi), %edx
    000001e0: 	movq	%r15, %rdi
    000001e3: 	movslq	%edx, %rdx
    000001e6: 	shlq	$0x4, %rbp
    000001ea: 	addq	0x38(%rsp), %rbp
    000001ef: 	leaq	(%r15,%rdx,8), %r12
    000001f3: 	leal	-0x1(%r8), %edx
    000001f7: 	movl	%r9d, %r15d
    000001fa: 	subl	%r10d, %edx
    000001fd: 	addq	%rdx, %rax
    00000200: 	leaq	(%r11,%rax,8), %rax
    00000204: 	xorl	%r11d, %r11d
    00000207: 	movq	%rax, 0x80(%rsp)
    0000020f: 	nop # Size: 1
.Ltmp2065:
    00000210: 	cmpl	$0x3, %r8d
    00000214: 	jle	.Ltmp2055 # Offset: 532
    00000216: 	movq	0x40(%rsp), %rdx
    0000021b: 	xorl	%esi, %esi
    0000021d: 	movl	%r10d, 0x30(%rsp)
    00000222: 	movl	%r8d, 0x24(%rsp)
    00000227: 	movq	%rcx, 0x18(%rsp)
    0000022c: 	movl	%r11d, 0x10(%rsp)
    00000231: 	movsd	%xmm1, 0x28(%rsp)
    00000237: 	movsd	%xmm2, 0x8(%rsp)
    0000023d: 	callq	memset@PLT # Offset: 573
    00000242: 	movsd	0x28(%rsp), %xmm1
    00000248: 	movl	0x30(%rsp), %r10d
    0000024d: 	movl	0x24(%rsp), %r8d
    00000252: 	movq	0x18(%rsp), %rcx
    00000257: 	movq	%rax, %rdi
    0000025a: 	movl	0x10(%rsp), %r11d
    0000025f: 	movsd	0x8(%rsp), %xmm2
.Ltmp2055:
    00000265: 	cmpl	%r15d, (%rsp)
    00000269: 	jge	.Ltmp2056 # Offset: 617
    0000026b: 	cmpb	$0x0, 0x5b(%rsp)
    00000270: 	je	.Ltmp2057 # Offset: 624
    00000276: 	movsd	init_value(%rip), %xmm0
    0000027e: 	movq	0x50(%rsp), %rax
    00000283: 	unpcklpd	%xmm0, %xmm0
    00000287: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2058:
    00000290: 	movups	%xmm0, (%rax)
    00000293: 	addq	$0x10, %rax
    00000297: 	cmpq	%rcx, %rax
    0000029a: 	jne	.Ltmp2058 # Offset: 666
    0000029c: 	movl	0x6c(%rsp), %esi
    000002a0: 	cmpl	%esi, 0x68(%rsp)
    000002a4: 	je	.Ltmp2056 # Offset: 676
    000002a6: 	movsd	init_value(%rip), %xmm0
    000002ae: 	movsd	%xmm0, (%r14)
.Ltmp2056:
    000002b3: 	cmpl	%r15d, %r10d
    000002b6: 	jle	.Ltmp2059 # Offset: 694
    000002b8: 	cmpb	$0x0, 0x5a(%rsp)
    000002bd: 	movq	0x48(%rsp), %rax
    000002c2: 	je	.Ltmp2060 # Offset: 706
    000002c8: 	movsd	init_value(%rip), %xmm0
    000002d0: 	addsd	%xmm1, %xmm0
    000002d4: 	unpcklpd	%xmm0, %xmm0
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2061:
    000002e0: 	movups	%xmm0, (%rax)
    000002e3: 	addq	$0x10, %rax
    000002e7: 	cmpq	%rbx, %rax
    000002ea: 	jne	.Ltmp2061 # Offset: 746
    000002ec: 	movl	0x64(%rsp), %esi
    000002f0: 	cmpl	%esi, (%rsp)
    000002f3: 	je	.Ltmp2059 # Offset: 755
    000002f5: 	movsd	init_value(%rip), %xmm0
    000002fd: 	addsd	%xmm1, %xmm0
    00000301: 	movsd	%xmm0, (%r13)
.Ltmp2059:
    00000307: 	cmpl	%r10d, %r8d
    0000030a: 	jle	.Ltmp2062 # Offset: 778
    0000030c: 	cmpb	$0x0, 0x59(%rsp)
    00000311: 	movq	0x38(%rsp), %rax
    00000316: 	je	.Ltmp2063 # Offset: 790
    0000031c: 	movsd	init_value(%rip), %xmm0
    00000324: 	addsd	%xmm2, %xmm0
    00000328: 	unpcklpd	%xmm0, %xmm0
    0000032c: 	nopl	(%rax) # Size: 4
.Ltmp2064:
    00000330: 	movq	%rax, %rdx
    00000333: 	movups	%xmm0, (%rax)
    00000336: 	addq	$0x10, %rax
    0000033a: 	cmpq	%rdx, %rbp
    0000033d: 	jne	.Ltmp2064 # Offset: 829
    0000033f: 	movl	0x60(%rsp), %esi
    00000343: 	cmpl	%esi, 0x5c(%rsp)
    00000347: 	je	.Ltmp2062 # Offset: 839
    00000349: 	movsd	init_value(%rip), %xmm0
    00000351: 	addsd	%xmm2, %xmm0
    00000355: 	movsd	%xmm0, (%r12)
.Ltmp2062:
    0000035b: 	addl	$0x1, %r11d
    0000035f: 	cmpl	0x34(%rsp), %r11d
    00000364: 	jne	.Ltmp2065 # Offset: 868
    0000036a: 	movq	%rdi, %r15
.Ltmp2054:
    0000036d: 	movl	%r8d, (%rsp)
    00000371: 	movsd	%xmm2, 0x10(%rsp)
    00000377: 	movsd	%xmm1, 0x8(%rsp)
    0000037d: 	callq	clock@PLT # Offset: 893
    00000382: 	movq	0x70(%rsp), %rdi
    00000387: 	pxor	%xmm0, %xmm0
    0000038b: 	movq	%rax, end_time(%rip)
    00000392: 	subq	start_time(%rip), %rax
    00000399: 	cvtsi2sd	%rax, %xmm0
    0000039e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003a6: 	callq	_Z13record_resultdPKc # Offset: 934
    000003ab: 	movl	(%rsp), %r8d
    000003af: 	movsd	0x8(%rsp), %xmm1
    000003b5: 	movsd	0x10(%rsp), %xmm2
    000003bb: 	testl	%r8d, %r8d
    000003be: 	jle	.Ltmp2066 # Offset: 958
    000003c4: 	cmpl	$0x1, %r8d
    000003c8: 	je	.Ltmp2067 # Offset: 968
    000003ce: 	movl	%r8d, %edx
    000003d1: 	movq	%r15, %rax
    000003d4: 	pxor	%xmm0, %xmm0
    000003d8: 	shrl	%edx
    000003da: 	subl	$0x1, %edx
    000003dd: 	shlq	$0x4, %rdx
    000003e1: 	leaq	0x10(%r15,%rdx), %rdx
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2068:
    000003f0: 	movsd	(%rax), %xmm3
    000003f4: 	addq	$0x10, %rax
    000003f8: 	addsd	%xmm3, %xmm0
    000003fc: 	movsd	-0x8(%rax), %xmm3
    00000401: 	addsd	%xmm3, %xmm0
    00000405: 	cmpq	%rdx, %rax
    00000408: 	jne	.Ltmp2068 # Offset: 1032
    0000040a: 	movl	%r8d, %eax
    0000040d: 	andl	$-0x2, %eax
    00000410: 	andl	$0x1, %r8d
    00000414: 	je	.Ltmp2069 # Offset: 1044
.Ltmp2077:
    00000416: 	cltq
    00000418: 	addsd	(%r15,%rax,8), %xmm0
.Ltmp2069:
    0000041e: 	movsd	init_value(%rip), %xmm3
    00000426: 	movsd	DATAat0x36ef8(%rip), %xmm4
    0000042e: 	addsd	%xmm3, %xmm1
    00000432: 	movapd	%xmm3, %xmm5
    00000436: 	addsd	%xmm2, %xmm3
    0000043a: 	mulsd	%xmm4, %xmm5
    0000043e: 	movapd	%xmm0, %xmm2
    00000442: 	mulsd	%xmm4, %xmm1
    00000446: 	mulsd	%xmm4, %xmm3
    0000044a: 	movapd	%xmm0, %xmm4
    0000044e: 	addsd	%xmm5, %xmm1
    00000452: 	addsd	%xmm3, %xmm1
    00000456: 	movq	DATAat0x36f60(%rip), %xmm3
    0000045e: 	andpd	%xmm3, %xmm4
    00000462: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000046a: 	subsd	%xmm1, %xmm2
    0000046e: 	jbe	.Ltmp2070 # Offset: 1134
    00000470: 	divsd	%xmm0, %xmm2
.Ltmp2070:
    00000474: 	andpd	%xmm3, %xmm2
    00000478: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000480: 	comisd	%xmm2, %xmm3
    00000484: 	jbe	.Ltmp2071 # Offset: 1156
    0000048a: 	addq	$0x98, %rsp
    00000491: 	popq	%rbx
    00000492: 	popq	%rbp
    00000493: 	popq	%r12
    00000495: 	popq	%r13
    00000497: 	popq	%r14
    00000499: 	popq	%r15
    0000049b: 	retq # Offset: 1179
    0000049c: 	nopl	(%rax) # Size: 4
.Ltmp2063:
    000004a0: 	movq	0x80(%rsp), %rdx
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2072:
    000004b0: 	movsd	init_value(%rip), %xmm0
    000004b8: 	addq	$0x8, %rax
    000004bc: 	addsd	%xmm2, %xmm0
    000004c0: 	movsd	%xmm0, -0x8(%rax)
    000004c5: 	cmpq	%rax, %rdx
    000004c8: 	jne	.Ltmp2072 # Offset: 1224
    000004ca: 	jmp	.Ltmp2062 # Offset: 1226
    000004cf: 	nop # Size: 1
.Ltmp2057:
    000004d0: 	movq	0x50(%rsp), %rax
    000004d5: 	movq	0x88(%rsp), %rdx
    000004dd: 	nopl	(%rax) # Size: 3
.Ltmp2073:
    000004e0: 	movsd	init_value(%rip), %xmm0
    000004e8: 	addq	$0x8, %rax
    000004ec: 	movsd	%xmm0, -0x8(%rax)
    000004f1: 	cmpq	%rdx, %rax
    000004f4: 	jne	.Ltmp2073 # Offset: 1268
    000004f6: 	jmp	.Ltmp2056 # Offset: 1270
    000004fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2060:
    00000500: 	movq	0x78(%rsp), %rdx
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp2074:
    00000508: 	movsd	init_value(%rip), %xmm0
    00000510: 	addq	$0x8, %rax
    00000514: 	addsd	%xmm1, %xmm0
    00000518: 	movsd	%xmm0, -0x8(%rax)
    0000051d: 	cmpq	%rdx, %rax
    00000520: 	jne	.Ltmp2074 # Offset: 1312
    00000522: 	jmp	.Ltmp2059 # Offset: 1314
.Ltmp2071:
    00000527: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000052e: 	movl	$0x5, %edx
    00000533: 	movsd	%xmm1, (%rsp)
    00000538: 	leaq	DATAat0x35004(%rip), %rsi
    0000053f: 	movq	%rbp, %rdi
    00000542: 	movsd	%xmm0, 0x8(%rsp)
    00000548: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1352
    0000054d: 	cmpq	$0x0, 0x70(%rsp)
    00000553: 	movsd	(%rsp), %xmm1
    00000558: 	movsd	0x8(%rsp), %xmm0
    0000055e: 	je	.Ltmp2075 # Offset: 1374
    00000564: 	movq	0x70(%rsp), %rbx
    00000569: 	movsd	%xmm0, 0x8(%rsp)
    0000056f: 	movsd	%xmm1, (%rsp)
    00000574: 	movq	%rbx, %rdi
    00000577: 	callq	strlen@PLT # Offset: 1399
    0000057c: 	movq	%rbx, %rsi
    0000057f: 	movq	%rbp, %rdi
    00000582: 	movq	%rax, %rdx
    00000585: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1413
    0000058a: 	movsd	0x8(%rsp), %xmm0
    00000590: 	movsd	(%rsp), %xmm1
.Ltmp2076:
    00000595: 	movl	$0xd, %edx
    0000059a: 	leaq	DATAat0x3500a(%rip), %rsi
    000005a1: 	movq	%rbp, %rdi
    000005a4: 	movsd	%xmm1, (%rsp)
    000005a9: 	movsd	%xmm0, 0x8(%rsp)
    000005af: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1455
    000005b4: 	movsd	0x8(%rsp), %xmm0
    000005ba: 	movq	%rbp, %rdi
    000005bd: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1469
    000005c2: 	movl	$0xb, %edx
    000005c7: 	leaq	DATAat0x35018(%rip), %rsi
    000005ce: 	movq	%rax, %rdi
    000005d1: 	movq	%rax, %rbp
    000005d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1492
    000005d9: 	movsd	(%rsp), %xmm1
    000005de: 	movq	%rbp, %rdi
    000005e1: 	movapd	%xmm1, %xmm0
    000005e5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1509
    000005ea: 	addq	$0x98, %rsp
    000005f1: 	popq	%rbx
    000005f2: 	movq	%rax, %rdi
    000005f5: 	popq	%rbp
    000005f6: 	popq	%r12
    000005f8: 	popq	%r13
    000005fa: 	popq	%r14
    000005fc: 	popq	%r15
    000005fe: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1534
.Ltmp2066:
    00000603: 	movsd	init_value(%rip), %xmm0
    0000060b: 	movsd	DATAat0x36ef8(%rip), %xmm3
    00000613: 	addsd	%xmm0, %xmm1
    00000617: 	movapd	%xmm0, %xmm4
    0000061b: 	addsd	%xmm2, %xmm0
    0000061f: 	mulsd	%xmm3, %xmm4
    00000623: 	mulsd	%xmm3, %xmm1
    00000627: 	mulsd	%xmm3, %xmm0
    0000062b: 	movq	DATAat0x36f60(%rip), %xmm3
    00000633: 	addsd	%xmm4, %xmm1
    00000637: 	addsd	%xmm0, %xmm1
    0000063b: 	pxor	%xmm0, %xmm0
    0000063f: 	movapd	%xmm0, %xmm2
    00000643: 	subsd	%xmm1, %xmm2
    00000647: 	jmp	.Ltmp2070 # Offset: 1607
.Ltmp2075:
    0000064c: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000653: 	movq	-0x18(%rax), %rdi
    00000657: 	addq	%rbp, %rdi
    0000065a: 	movl	0x20(%rdi), %esi
    0000065d: 	orl	$0x1, %esi
    00000660: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1632
    00000665: 	movsd	(%rsp), %xmm1
    0000066a: 	movsd	0x8(%rsp), %xmm0
    00000670: 	jmp	.Ltmp2076 # Offset: 1648
.Ltmp2067:
    00000675: 	pxor	%xmm0, %xmm0
    00000679: 	xorl	%eax, %eax
    0000067b: 	jmp	.Ltmp2077 # Offset: 1659
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_loop_partial4_replace_optIdEvPT_iPKc"

Binary Function "_Z36test_for_loop_bzero_partial4_replaceIdEvPT_iPKc" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x30030
  Size        : 0x670
  MaxSize     : 0x670
  Offset      : 0x30030
  Section     : .text
  Orc Section : .local.text._Z36test_for_loop_bzero_partial4_replaceIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %eax
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x98, %rsp
    0000001b: 	testl	%esi, %esi
    0000001d: 	cmovnsl	%esi, %eax
    00000020: 	movl	%esi, 0x2c(%rsp)
    00000024: 	movq	%rdx, 0x70(%rsp)
    00000029: 	sarl	$0x2, %eax
    0000002c: 	movl	%eax, 0x50(%rsp)
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000003d: 	movsd	DATAat0x37030(%rip), %xmm2
    00000045: 	movq	%rax, start_time(%rip)
    0000004c: 	movl	iterations(%rip), %eax
    00000052: 	testl	%eax, %eax
    00000054: 	jle	.Ltmp2078 # Offset: 84
    0000005a: 	movslq	0x2c(%rsp), %rax
    0000005f: 	leaq	init_value(%rip), %r11
    00000066: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000006e: 	leaq	0x8(%r11), %rbx
    00000072: 	movsd	DATAat0x37030(%rip), %xmm2
    0000007a: 	movq	%rax, %r15
    0000007d: 	shlq	$0x3, %rax
    00000081: 	movq	%rax, 0x30(%rsp)
    00000086: 	movslq	0x50(%rsp), %rax
    0000008b: 	leal	(%rax,%rax), %r13d
    0000008f: 	leaq	(,%rax,8), %rdi
    00000097: 	movq	%rax, %r8
    0000009a: 	movl	%eax, 0x60(%rsp)
    0000009e: 	movl	%r13d, %r9d
    000000a1: 	leaq	(%r14,%rdi), %rbp
    000000a5: 	leal	(%r13,%rax), %r10d
    000000aa: 	movl	%r13d, (%rsp)
    000000ae: 	subl	%eax, %r9d
    000000b1: 	movq	%rbp, 0x48(%rsp)
    000000b6: 	movl	%r9d, %ecx
    000000b9: 	leal	-0x1(%r9), %edx
    000000bd: 	movl	%r9d, 0x68(%rsp)
    000000c2: 	addq	%rax, %rcx
    000000c5: 	movl	%r10d, 0x8(%rsp)
    000000ca: 	leaq	(%r14,%rcx,8), %rcx
    000000ce: 	cmpq	%r11, %rcx
    000000d1: 	setbe	%sil
    000000d5: 	cmpq	%rbx, %rbp
    000000d8: 	setae	%cl
    000000db: 	orl	%esi, %ecx
    000000dd: 	cmpl	$0x2, %edx
    000000e0: 	seta	%sil
    000000e4: 	addq	%rax, %rdx
    000000e7: 	addq	%rbp, %rdi
    000000ea: 	andl	%esi, %ecx
    000000ec: 	movl	%r9d, %esi
    000000ef: 	movq	%rdi, 0x40(%rsp)
    000000f4: 	movb	%cl, 0x57(%rsp)
    000000f8: 	movl	%r9d, %ecx
    000000fb: 	andl	$-0x2, %esi
    000000fe: 	shrl	%ecx
    00000100: 	movl	%esi, 0x6c(%rsp)
    00000104: 	subl	$0x1, %ecx
    00000107: 	shlq	$0x4, %rcx
    0000010b: 	leaq	0x10(%rbp,%rcx), %r9
    00000110: 	movl	%eax, %ecx
    00000112: 	addq	%rax, %rax
    00000115: 	movq	%rdi, %rbp
    00000118: 	addl	%esi, %ecx
    0000011a: 	leaq	0x8(%r14), %rsi
    0000011e: 	leaq	(%rsi,%rdx,8), %rdx
    00000122: 	movslq	%ecx, %rcx
    00000125: 	movq	%rdx, 0x88(%rsp)
    0000012d: 	movl	%r8d, %edx
    00000130: 	leaq	(%r14,%rcx,8), %rcx
    00000134: 	addq	%rax, %rdx
    00000137: 	leaq	(%r14,%rdx,8), %rdx
    0000013b: 	cmpq	%r11, %rdx
    0000013e: 	setbe	%dl
    00000141: 	cmpq	%rbx, %rdi
    00000144: 	setae	%dil
    00000148: 	orl	%edi, %edx
    0000014a: 	leal	-0x1(%r8), %edi
    0000014e: 	cmpl	$0x1, %edi
    00000151: 	seta	%dil
    00000155: 	andl	%edi, %edx
    00000157: 	movl	%r8d, %edi
    0000015a: 	movb	%dl, 0x56(%rsp)
    0000015e: 	movl	%r8d, %edx
    00000161: 	andl	$-0x2, %edi
    00000164: 	shrl	%edx
    00000166: 	movl	%edi, 0x64(%rsp)
    0000016a: 	subl	$0x1, %edx
    0000016d: 	shlq	$0x4, %rdx
    00000171: 	leaq	0x10(%rbp,%rdx), %r8
    00000176: 	leal	(%rdi,%r13), %edx
    0000017a: 	movl	%r15d, %ebp
    0000017d: 	movslq	%edx, %rdx
    00000180: 	subl	%r10d, %ebp
    00000183: 	leaq	(%r14,%rdx,8), %r12
    00000187: 	leal	-0x1(%r10), %edx
    0000018b: 	movl	%ebp, 0x58(%rsp)
    0000018f: 	subl	%r13d, %edx
    00000192: 	movq	%rcx, %r13
    00000195: 	addq	%rax, %rdx
    00000198: 	leaq	(%rsi,%rdx,8), %rax
    0000019c: 	movl	%ebp, %edx
    0000019e: 	movq	%rax, 0x78(%rsp)
    000001a3: 	movslq	%r10d, %rax
    000001a6: 	addq	%rax, %rdx
    000001a9: 	leaq	(%r14,%rax,8), %rdi
    000001ad: 	leaq	(%r14,%rdx,8), %rdx
    000001b1: 	movq	%rdi, 0x38(%rsp)
    000001b6: 	cmpq	%r11, %rdx
    000001b9: 	movq	%rdi, %r11
    000001bc: 	setbe	%dl
    000001bf: 	cmpq	%rbx, %rdi
    000001c2: 	setae	%dil
    000001c6: 	orl	%edi, %edx
    000001c8: 	leal	-0x1(%rbp), %edi
    000001cb: 	cmpl	$0x1, %edi
    000001ce: 	seta	%dil
    000001d2: 	andl	%edi, %edx
    000001d4: 	movq	%r14, %rdi
    000001d7: 	movb	%dl, 0x55(%rsp)
    000001db: 	movl	%ebp, %edx
    000001dd: 	andl	$-0x2, %ebp
    000001e0: 	shrl	%edx
    000001e2: 	movl	%ebp, 0x5c(%rsp)
    000001e6: 	leal	-0x1(%rdx), %ebx
    000001e9: 	leal	(%r10,%rbp), %edx
    000001ed: 	movslq	%edx, %rdx
    000001f0: 	shlq	$0x4, %rbx
    000001f4: 	leaq	(%r14,%rdx,8), %rbp
    000001f8: 	leal	-0x1(%r15), %edx
    000001fc: 	addq	%r11, %rbx
    000001ff: 	xorl	%r15d, %r15d
    00000202: 	subl	%r10d, %edx
    00000205: 	movq	%rbx, %r14
    00000208: 	movq	%r8, %rbx
    0000020b: 	addq	%rdx, %rax
    0000020e: 	leaq	(%rsi,%rax,8), %rax
    00000212: 	movq	%rax, 0x80(%rsp)
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2088:
    00000220: 	movq	0x30(%rsp), %rdx
    00000225: 	xorl	%esi, %esi
    00000227: 	movq	%r9, 0x18(%rsp)
    0000022c: 	movsd	%xmm1, 0x20(%rsp)
    00000232: 	movsd	%xmm2, 0x10(%rsp)
    00000238: 	callq	memset@PLT # Offset: 568
    0000023d: 	movl	(%rsp), %ecx
    00000240: 	cmpl	%ecx, 0x50(%rsp)
    00000244: 	movsd	0x10(%rsp), %xmm2
    0000024a: 	movq	0x18(%rsp), %r9
    0000024f: 	movq	%rax, %rdi
    00000252: 	movsd	0x20(%rsp), %xmm1
    00000258: 	jge	.Ltmp2079 # Offset: 600
    0000025a: 	cmpb	$0x0, 0x57(%rsp)
    0000025f: 	je	.Ltmp2080 # Offset: 607
    00000265: 	movsd	init_value(%rip), %xmm0
    0000026d: 	movq	0x48(%rsp), %rax
    00000272: 	unpcklpd	%xmm0, %xmm0
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2081:
    00000280: 	movups	%xmm0, (%rax)
    00000283: 	addq	$0x10, %rax
    00000287: 	cmpq	%r9, %rax
    0000028a: 	jne	.Ltmp2081 # Offset: 650
    0000028c: 	movl	0x6c(%rsp), %esi
    00000290: 	cmpl	%esi, 0x68(%rsp)
    00000294: 	je	.Ltmp2079 # Offset: 660
    00000296: 	movsd	init_value(%rip), %xmm0
    0000029e: 	movsd	%xmm0, (%r13)
.Ltmp2079:
    000002a4: 	movl	(%rsp), %esi
    000002a7: 	cmpl	%esi, 0x8(%rsp)
    000002ab: 	jle	.Ltmp2082 # Offset: 683
    000002ad: 	cmpb	$0x0, 0x56(%rsp)
    000002b2: 	movq	0x40(%rsp), %rax
    000002b7: 	je	.Ltmp2083 # Offset: 695
    000002bd: 	movsd	init_value(%rip), %xmm0
    000002c5: 	addsd	%xmm1, %xmm0
    000002c9: 	unpcklpd	%xmm0, %xmm0
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp2084:
    000002d0: 	movups	%xmm0, (%rax)
    000002d3: 	addq	$0x10, %rax
    000002d7: 	cmpq	%rax, %rbx
    000002da: 	jne	.Ltmp2084 # Offset: 730
    000002dc: 	movl	0x64(%rsp), %esi
    000002e0: 	cmpl	%esi, 0x60(%rsp)
    000002e4: 	je	.Ltmp2082 # Offset: 740
    000002e6: 	movsd	init_value(%rip), %xmm0
    000002ee: 	addsd	%xmm1, %xmm0
    000002f2: 	movsd	%xmm0, (%r12)
.Ltmp2082:
    000002f8: 	movl	0x8(%rsp), %ecx
    000002fc: 	cmpl	%ecx, 0x2c(%rsp)
    00000300: 	jle	.Ltmp2085 # Offset: 768
    00000302: 	cmpb	$0x0, 0x55(%rsp)
    00000307: 	movq	0x38(%rsp), %rax
    0000030c: 	je	.Ltmp2086 # Offset: 780
    00000312: 	movsd	init_value(%rip), %xmm0
    0000031a: 	addsd	%xmm2, %xmm0
    0000031e: 	unpcklpd	%xmm0, %xmm0
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2087:
    00000328: 	movq	%rax, %rdx
    0000032b: 	movups	%xmm0, (%rax)
    0000032e: 	addq	$0x10, %rax
    00000332: 	cmpq	%r14, %rdx
    00000335: 	jne	.Ltmp2087 # Offset: 821
    00000337: 	movl	0x5c(%rsp), %ecx
    0000033b: 	cmpl	%ecx, 0x58(%rsp)
    0000033f: 	je	.Ltmp2085 # Offset: 831
    00000341: 	movsd	init_value(%rip), %xmm0
    00000349: 	addsd	%xmm2, %xmm0
    0000034d: 	movsd	%xmm0, (%rbp)
.Ltmp2085:
    00000352: 	addl	$0x1, %r15d
    00000356: 	cmpl	%r15d, iterations(%rip)
    0000035d: 	jg	.Ltmp2088 # Offset: 861
    00000363: 	movq	%rdi, %r14
.Ltmp2078:
    00000366: 	movsd	%xmm1, 0x8(%rsp)
    0000036c: 	movsd	%xmm2, (%rsp)
    00000371: 	callq	clock@PLT # Offset: 881
    00000376: 	movq	0x70(%rsp), %rdi
    0000037b: 	pxor	%xmm0, %xmm0
    0000037f: 	movq	%rax, end_time(%rip)
    00000386: 	subq	start_time(%rip), %rax
    0000038d: 	cvtsi2sd	%rax, %xmm0
    00000392: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000039a: 	callq	_Z13record_resultdPKc # Offset: 922
    0000039f: 	movl	0x2c(%rsp), %ecx
    000003a3: 	movsd	(%rsp), %xmm2
    000003a8: 	movsd	0x8(%rsp), %xmm1
    000003ae: 	testl	%ecx, %ecx
    000003b0: 	jle	.Ltmp2089 # Offset: 944
    000003b6: 	cmpl	$0x1, %ecx
    000003b9: 	je	.Ltmp2090 # Offset: 953
    000003bf: 	shrl	%ecx
    000003c1: 	movq	%r14, %rax
    000003c4: 	pxor	%xmm0, %xmm0
    000003c8: 	movl	%ecx, %edx
    000003ca: 	subl	$0x1, %edx
    000003cd: 	shlq	$0x4, %rdx
    000003d1: 	leaq	0x10(%r14,%rdx), %rdx
    000003d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2091:
    000003e0: 	movsd	(%rax), %xmm3
    000003e4: 	addq	$0x10, %rax
    000003e8: 	addsd	%xmm3, %xmm0
    000003ec: 	movsd	-0x8(%rax), %xmm3
    000003f1: 	addsd	%xmm3, %xmm0
    000003f5: 	cmpq	%rdx, %rax
    000003f8: 	jne	.Ltmp2091 # Offset: 1016
    000003fa: 	movl	0x2c(%rsp), %ecx
    000003fe: 	movl	%ecx, %eax
    00000400: 	andl	$-0x2, %eax
    00000403: 	andl	$0x1, %ecx
    00000406: 	je	.Ltmp2092 # Offset: 1030
.Ltmp2100:
    00000408: 	cltq
    0000040a: 	addsd	(%r14,%rax,8), %xmm0
.Ltmp2092:
    00000410: 	movsd	init_value(%rip), %xmm3
    00000418: 	movsd	DATAat0x36ef8(%rip), %xmm4
    00000420: 	addsd	%xmm3, %xmm1
    00000424: 	movapd	%xmm3, %xmm5
    00000428: 	addsd	%xmm2, %xmm3
    0000042c: 	mulsd	%xmm4, %xmm5
    00000430: 	movapd	%xmm0, %xmm2
    00000434: 	mulsd	%xmm4, %xmm1
    00000438: 	mulsd	%xmm4, %xmm3
    0000043c: 	movapd	%xmm0, %xmm4
    00000440: 	addsd	%xmm5, %xmm1
    00000444: 	addsd	%xmm3, %xmm1
    00000448: 	movq	DATAat0x36f60(%rip), %xmm3
    00000450: 	andpd	%xmm3, %xmm4
    00000454: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000045c: 	subsd	%xmm1, %xmm2
    00000460: 	jbe	.Ltmp2093 # Offset: 1120
    00000462: 	divsd	%xmm0, %xmm2
.Ltmp2093:
    00000466: 	andpd	%xmm3, %xmm2
    0000046a: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000472: 	comisd	%xmm2, %xmm3
    00000476: 	jbe	.Ltmp2094 # Offset: 1142
    0000047c: 	addq	$0x98, %rsp
    00000483: 	popq	%rbx
    00000484: 	popq	%rbp
    00000485: 	popq	%r12
    00000487: 	popq	%r13
    00000489: 	popq	%r14
    0000048b: 	popq	%r15
    0000048d: 	retq # Offset: 1165
    0000048e: 	nop # Size: 2
.Ltmp2086:
    00000490: 	movq	0x80(%rsp), %rdx
    00000498: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2095:
    000004a0: 	movsd	init_value(%rip), %xmm0
    000004a8: 	addq	$0x8, %rax
    000004ac: 	addsd	%xmm2, %xmm0
    000004b0: 	movsd	%xmm0, -0x8(%rax)
    000004b5: 	cmpq	%rax, %rdx
    000004b8: 	jne	.Ltmp2095 # Offset: 1208
    000004ba: 	jmp	.Ltmp2085 # Offset: 1210
    000004bf: 	nop # Size: 1
.Ltmp2080:
    000004c0: 	movq	0x48(%rsp), %rax
    000004c5: 	movq	0x88(%rsp), %rdx
    000004cd: 	nopl	(%rax) # Size: 3
.Ltmp2096:
    000004d0: 	movsd	init_value(%rip), %xmm0
    000004d8: 	addq	$0x8, %rax
    000004dc: 	movsd	%xmm0, -0x8(%rax)
    000004e1: 	cmpq	%rdx, %rax
    000004e4: 	jne	.Ltmp2096 # Offset: 1252
    000004e6: 	jmp	.Ltmp2079 # Offset: 1254
    000004eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2083:
    000004f0: 	movq	0x78(%rsp), %rdx
    000004f5: 	nopl	(%rax) # Size: 3
.Ltmp2097:
    000004f8: 	movsd	init_value(%rip), %xmm0
    00000500: 	addq	$0x8, %rax
    00000504: 	addsd	%xmm1, %xmm0
    00000508: 	movsd	%xmm0, -0x8(%rax)
    0000050d: 	cmpq	%rax, %rdx
    00000510: 	jne	.Ltmp2097 # Offset: 1296
    00000512: 	jmp	.Ltmp2082 # Offset: 1298
.Ltmp2094:
    00000517: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000051e: 	movl	$0x5, %edx
    00000523: 	movsd	%xmm1, (%rsp)
    00000528: 	leaq	DATAat0x35004(%rip), %rsi
    0000052f: 	movq	%rbp, %rdi
    00000532: 	movsd	%xmm0, 0x8(%rsp)
    00000538: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1336
    0000053d: 	cmpq	$0x0, 0x70(%rsp)
    00000543: 	movsd	(%rsp), %xmm1
    00000548: 	movsd	0x8(%rsp), %xmm0
    0000054e: 	je	.Ltmp2098 # Offset: 1358
    00000554: 	movq	0x70(%rsp), %rbx
    00000559: 	movsd	%xmm0, 0x8(%rsp)
    0000055f: 	movsd	%xmm1, (%rsp)
    00000564: 	movq	%rbx, %rdi
    00000567: 	callq	strlen@PLT # Offset: 1383
    0000056c: 	movq	%rbx, %rsi
    0000056f: 	movq	%rbp, %rdi
    00000572: 	movq	%rax, %rdx
    00000575: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1397
    0000057a: 	movsd	0x8(%rsp), %xmm0
    00000580: 	movsd	(%rsp), %xmm1
.Ltmp2099:
    00000585: 	movl	$0xd, %edx
    0000058a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000591: 	movq	%rbp, %rdi
    00000594: 	movsd	%xmm1, (%rsp)
    00000599: 	movsd	%xmm0, 0x8(%rsp)
    0000059f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1439
    000005a4: 	movsd	0x8(%rsp), %xmm0
    000005aa: 	movq	%rbp, %rdi
    000005ad: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1453
    000005b2: 	movl	$0xb, %edx
    000005b7: 	leaq	DATAat0x35018(%rip), %rsi
    000005be: 	movq	%rax, %rdi
    000005c1: 	movq	%rax, %rbp
    000005c4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1476
    000005c9: 	movsd	(%rsp), %xmm1
    000005ce: 	movq	%rbp, %rdi
    000005d1: 	movapd	%xmm1, %xmm0
    000005d5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1493
    000005da: 	addq	$0x98, %rsp
    000005e1: 	popq	%rbx
    000005e2: 	movq	%rax, %rdi
    000005e5: 	popq	%rbp
    000005e6: 	popq	%r12
    000005e8: 	popq	%r13
    000005ea: 	popq	%r14
    000005ec: 	popq	%r15
    000005ee: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1518
.Ltmp2089:
    000005f3: 	movsd	init_value(%rip), %xmm0
    000005fb: 	movsd	DATAat0x36ef8(%rip), %xmm3
    00000603: 	addsd	%xmm0, %xmm1
    00000607: 	movapd	%xmm0, %xmm4
    0000060b: 	addsd	%xmm2, %xmm0
    0000060f: 	mulsd	%xmm3, %xmm4
    00000613: 	mulsd	%xmm3, %xmm1
    00000617: 	mulsd	%xmm3, %xmm0
    0000061b: 	movq	DATAat0x36f60(%rip), %xmm3
    00000623: 	addsd	%xmm4, %xmm1
    00000627: 	addsd	%xmm0, %xmm1
    0000062b: 	pxor	%xmm0, %xmm0
    0000062f: 	movapd	%xmm0, %xmm2
    00000633: 	subsd	%xmm1, %xmm2
    00000637: 	jmp	.Ltmp2093 # Offset: 1591
.Ltmp2098:
    0000063c: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000643: 	movq	-0x18(%rax), %rdi
    00000647: 	addq	%rbp, %rdi
    0000064a: 	movl	0x20(%rdi), %esi
    0000064d: 	orl	$0x1, %esi
    00000650: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1616
    00000655: 	movsd	(%rsp), %xmm1
    0000065a: 	movsd	0x8(%rsp), %xmm0
    00000660: 	jmp	.Ltmp2099 # Offset: 1632
.Ltmp2090:
    00000665: 	pxor	%xmm0, %xmm0
    00000669: 	xorl	%eax, %eax
    0000066b: 	jmp	.Ltmp2100 # Offset: 1643
DWARF CFI Instructions:
    <empty>
End of Function "_Z36test_for_loop_bzero_partial4_replaceIdEvPT_iPKc"

Binary Function "_Z37test_for_loop_memset_partial4_replaceIdEvPT_iPKc" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x306a0
  Size        : 0x670
  MaxSize     : 0x670
  Offset      : 0x306a0
  Section     : .text
  Orc Section : .local.text._Z37test_for_loop_memset_partial4_replaceIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %eax
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x98, %rsp
    0000001b: 	testl	%esi, %esi
    0000001d: 	cmovnsl	%esi, %eax
    00000020: 	movl	%esi, 0x2c(%rsp)
    00000024: 	movq	%rdx, 0x70(%rsp)
    00000029: 	sarl	$0x2, %eax
    0000002c: 	movl	%eax, 0x50(%rsp)
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000003d: 	movsd	DATAat0x37030(%rip), %xmm2
    00000045: 	movq	%rax, start_time(%rip)
    0000004c: 	movl	iterations(%rip), %eax
    00000052: 	testl	%eax, %eax
    00000054: 	jle	.Ltmp2101 # Offset: 84
    0000005a: 	movslq	0x2c(%rsp), %rax
    0000005f: 	leaq	init_value(%rip), %r11
    00000066: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000006e: 	leaq	0x8(%r11), %rbx
    00000072: 	movsd	DATAat0x37030(%rip), %xmm2
    0000007a: 	movq	%rax, %r15
    0000007d: 	shlq	$0x3, %rax
    00000081: 	movq	%rax, 0x30(%rsp)
    00000086: 	movslq	0x50(%rsp), %rax
    0000008b: 	leal	(%rax,%rax), %r13d
    0000008f: 	leaq	(,%rax,8), %rdi
    00000097: 	movq	%rax, %r8
    0000009a: 	movl	%eax, 0x60(%rsp)
    0000009e: 	movl	%r13d, %r9d
    000000a1: 	leaq	(%r14,%rdi), %rbp
    000000a5: 	leal	(%r13,%rax), %r10d
    000000aa: 	movl	%r13d, (%rsp)
    000000ae: 	subl	%eax, %r9d
    000000b1: 	movq	%rbp, 0x48(%rsp)
    000000b6: 	movl	%r9d, %ecx
    000000b9: 	leal	-0x1(%r9), %edx
    000000bd: 	movl	%r9d, 0x68(%rsp)
    000000c2: 	addq	%rax, %rcx
    000000c5: 	movl	%r10d, 0x8(%rsp)
    000000ca: 	leaq	(%r14,%rcx,8), %rcx
    000000ce: 	cmpq	%r11, %rcx
    000000d1: 	setbe	%sil
    000000d5: 	cmpq	%rbx, %rbp
    000000d8: 	setae	%cl
    000000db: 	orl	%esi, %ecx
    000000dd: 	cmpl	$0x2, %edx
    000000e0: 	seta	%sil
    000000e4: 	addq	%rax, %rdx
    000000e7: 	addq	%rbp, %rdi
    000000ea: 	andl	%esi, %ecx
    000000ec: 	movl	%r9d, %esi
    000000ef: 	movq	%rdi, 0x40(%rsp)
    000000f4: 	movb	%cl, 0x57(%rsp)
    000000f8: 	movl	%r9d, %ecx
    000000fb: 	andl	$-0x2, %esi
    000000fe: 	shrl	%ecx
    00000100: 	movl	%esi, 0x6c(%rsp)
    00000104: 	subl	$0x1, %ecx
    00000107: 	shlq	$0x4, %rcx
    0000010b: 	leaq	0x10(%rbp,%rcx), %r9
    00000110: 	movl	%eax, %ecx
    00000112: 	addq	%rax, %rax
    00000115: 	movq	%rdi, %rbp
    00000118: 	addl	%esi, %ecx
    0000011a: 	leaq	0x8(%r14), %rsi
    0000011e: 	leaq	(%rsi,%rdx,8), %rdx
    00000122: 	movslq	%ecx, %rcx
    00000125: 	movq	%rdx, 0x88(%rsp)
    0000012d: 	movl	%r8d, %edx
    00000130: 	leaq	(%r14,%rcx,8), %rcx
    00000134: 	addq	%rax, %rdx
    00000137: 	leaq	(%r14,%rdx,8), %rdx
    0000013b: 	cmpq	%r11, %rdx
    0000013e: 	setbe	%dl
    00000141: 	cmpq	%rbx, %rdi
    00000144: 	setae	%dil
    00000148: 	orl	%edi, %edx
    0000014a: 	leal	-0x1(%r8), %edi
    0000014e: 	cmpl	$0x1, %edi
    00000151: 	seta	%dil
    00000155: 	andl	%edi, %edx
    00000157: 	movl	%r8d, %edi
    0000015a: 	movb	%dl, 0x56(%rsp)
    0000015e: 	movl	%r8d, %edx
    00000161: 	andl	$-0x2, %edi
    00000164: 	shrl	%edx
    00000166: 	movl	%edi, 0x64(%rsp)
    0000016a: 	subl	$0x1, %edx
    0000016d: 	shlq	$0x4, %rdx
    00000171: 	leaq	0x10(%rbp,%rdx), %r8
    00000176: 	leal	(%rdi,%r13), %edx
    0000017a: 	movl	%r15d, %ebp
    0000017d: 	movslq	%edx, %rdx
    00000180: 	subl	%r10d, %ebp
    00000183: 	leaq	(%r14,%rdx,8), %r12
    00000187: 	leal	-0x1(%r10), %edx
    0000018b: 	movl	%ebp, 0x58(%rsp)
    0000018f: 	subl	%r13d, %edx
    00000192: 	movq	%rcx, %r13
    00000195: 	addq	%rax, %rdx
    00000198: 	leaq	(%rsi,%rdx,8), %rax
    0000019c: 	movl	%ebp, %edx
    0000019e: 	movq	%rax, 0x78(%rsp)
    000001a3: 	movslq	%r10d, %rax
    000001a6: 	addq	%rax, %rdx
    000001a9: 	leaq	(%r14,%rax,8), %rdi
    000001ad: 	leaq	(%r14,%rdx,8), %rdx
    000001b1: 	movq	%rdi, 0x38(%rsp)
    000001b6: 	cmpq	%r11, %rdx
    000001b9: 	movq	%rdi, %r11
    000001bc: 	setbe	%dl
    000001bf: 	cmpq	%rbx, %rdi
    000001c2: 	setae	%dil
    000001c6: 	orl	%edi, %edx
    000001c8: 	leal	-0x1(%rbp), %edi
    000001cb: 	cmpl	$0x1, %edi
    000001ce: 	seta	%dil
    000001d2: 	andl	%edi, %edx
    000001d4: 	movq	%r14, %rdi
    000001d7: 	movb	%dl, 0x55(%rsp)
    000001db: 	movl	%ebp, %edx
    000001dd: 	andl	$-0x2, %ebp
    000001e0: 	shrl	%edx
    000001e2: 	movl	%ebp, 0x5c(%rsp)
    000001e6: 	leal	-0x1(%rdx), %ebx
    000001e9: 	leal	(%r10,%rbp), %edx
    000001ed: 	movslq	%edx, %rdx
    000001f0: 	shlq	$0x4, %rbx
    000001f4: 	leaq	(%r14,%rdx,8), %rbp
    000001f8: 	leal	-0x1(%r15), %edx
    000001fc: 	addq	%r11, %rbx
    000001ff: 	xorl	%r15d, %r15d
    00000202: 	subl	%r10d, %edx
    00000205: 	movq	%rbx, %r14
    00000208: 	movq	%r8, %rbx
    0000020b: 	addq	%rdx, %rax
    0000020e: 	leaq	(%rsi,%rax,8), %rax
    00000212: 	movq	%rax, 0x80(%rsp)
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2111:
    00000220: 	movq	0x30(%rsp), %rdx
    00000225: 	xorl	%esi, %esi
    00000227: 	movq	%r9, 0x18(%rsp)
    0000022c: 	movsd	%xmm1, 0x20(%rsp)
    00000232: 	movsd	%xmm2, 0x10(%rsp)
    00000238: 	callq	memset@PLT # Offset: 568
    0000023d: 	movl	(%rsp), %ecx
    00000240: 	cmpl	%ecx, 0x50(%rsp)
    00000244: 	movsd	0x10(%rsp), %xmm2
    0000024a: 	movq	0x18(%rsp), %r9
    0000024f: 	movq	%rax, %rdi
    00000252: 	movsd	0x20(%rsp), %xmm1
    00000258: 	jge	.Ltmp2102 # Offset: 600
    0000025a: 	cmpb	$0x0, 0x57(%rsp)
    0000025f: 	je	.Ltmp2103 # Offset: 607
    00000265: 	movsd	init_value(%rip), %xmm0
    0000026d: 	movq	0x48(%rsp), %rax
    00000272: 	unpcklpd	%xmm0, %xmm0
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2104:
    00000280: 	movups	%xmm0, (%rax)
    00000283: 	addq	$0x10, %rax
    00000287: 	cmpq	%r9, %rax
    0000028a: 	jne	.Ltmp2104 # Offset: 650
    0000028c: 	movl	0x6c(%rsp), %esi
    00000290: 	cmpl	%esi, 0x68(%rsp)
    00000294: 	je	.Ltmp2102 # Offset: 660
    00000296: 	movsd	init_value(%rip), %xmm0
    0000029e: 	movsd	%xmm0, (%r13)
.Ltmp2102:
    000002a4: 	movl	(%rsp), %esi
    000002a7: 	cmpl	%esi, 0x8(%rsp)
    000002ab: 	jle	.Ltmp2105 # Offset: 683
    000002ad: 	cmpb	$0x0, 0x56(%rsp)
    000002b2: 	movq	0x40(%rsp), %rax
    000002b7: 	je	.Ltmp2106 # Offset: 695
    000002bd: 	movsd	init_value(%rip), %xmm0
    000002c5: 	addsd	%xmm1, %xmm0
    000002c9: 	unpcklpd	%xmm0, %xmm0
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp2107:
    000002d0: 	movups	%xmm0, (%rax)
    000002d3: 	addq	$0x10, %rax
    000002d7: 	cmpq	%rax, %rbx
    000002da: 	jne	.Ltmp2107 # Offset: 730
    000002dc: 	movl	0x64(%rsp), %esi
    000002e0: 	cmpl	%esi, 0x60(%rsp)
    000002e4: 	je	.Ltmp2105 # Offset: 740
    000002e6: 	movsd	init_value(%rip), %xmm0
    000002ee: 	addsd	%xmm1, %xmm0
    000002f2: 	movsd	%xmm0, (%r12)
.Ltmp2105:
    000002f8: 	movl	0x8(%rsp), %ecx
    000002fc: 	cmpl	%ecx, 0x2c(%rsp)
    00000300: 	jle	.Ltmp2108 # Offset: 768
    00000302: 	cmpb	$0x0, 0x55(%rsp)
    00000307: 	movq	0x38(%rsp), %rax
    0000030c: 	je	.Ltmp2109 # Offset: 780
    00000312: 	movsd	init_value(%rip), %xmm0
    0000031a: 	addsd	%xmm2, %xmm0
    0000031e: 	unpcklpd	%xmm0, %xmm0
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2110:
    00000328: 	movq	%rax, %rdx
    0000032b: 	movups	%xmm0, (%rax)
    0000032e: 	addq	$0x10, %rax
    00000332: 	cmpq	%r14, %rdx
    00000335: 	jne	.Ltmp2110 # Offset: 821
    00000337: 	movl	0x5c(%rsp), %ecx
    0000033b: 	cmpl	%ecx, 0x58(%rsp)
    0000033f: 	je	.Ltmp2108 # Offset: 831
    00000341: 	movsd	init_value(%rip), %xmm0
    00000349: 	addsd	%xmm2, %xmm0
    0000034d: 	movsd	%xmm0, (%rbp)
.Ltmp2108:
    00000352: 	addl	$0x1, %r15d
    00000356: 	cmpl	%r15d, iterations(%rip)
    0000035d: 	jg	.Ltmp2111 # Offset: 861
    00000363: 	movq	%rdi, %r14
.Ltmp2101:
    00000366: 	movsd	%xmm1, 0x8(%rsp)
    0000036c: 	movsd	%xmm2, (%rsp)
    00000371: 	callq	clock@PLT # Offset: 881
    00000376: 	movq	0x70(%rsp), %rdi
    0000037b: 	pxor	%xmm0, %xmm0
    0000037f: 	movq	%rax, end_time(%rip)
    00000386: 	subq	start_time(%rip), %rax
    0000038d: 	cvtsi2sd	%rax, %xmm0
    00000392: 	divsd	DATAat0x36eb8(%rip), %xmm0
    0000039a: 	callq	_Z13record_resultdPKc # Offset: 922
    0000039f: 	movl	0x2c(%rsp), %ecx
    000003a3: 	movsd	(%rsp), %xmm2
    000003a8: 	movsd	0x8(%rsp), %xmm1
    000003ae: 	testl	%ecx, %ecx
    000003b0: 	jle	.Ltmp2112 # Offset: 944
    000003b6: 	cmpl	$0x1, %ecx
    000003b9: 	je	.Ltmp2113 # Offset: 953
    000003bf: 	shrl	%ecx
    000003c1: 	movq	%r14, %rax
    000003c4: 	pxor	%xmm0, %xmm0
    000003c8: 	movl	%ecx, %edx
    000003ca: 	subl	$0x1, %edx
    000003cd: 	shlq	$0x4, %rdx
    000003d1: 	leaq	0x10(%r14,%rdx), %rdx
    000003d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2114:
    000003e0: 	movsd	(%rax), %xmm3
    000003e4: 	addq	$0x10, %rax
    000003e8: 	addsd	%xmm3, %xmm0
    000003ec: 	movsd	-0x8(%rax), %xmm3
    000003f1: 	addsd	%xmm3, %xmm0
    000003f5: 	cmpq	%rdx, %rax
    000003f8: 	jne	.Ltmp2114 # Offset: 1016
    000003fa: 	movl	0x2c(%rsp), %ecx
    000003fe: 	movl	%ecx, %eax
    00000400: 	andl	$-0x2, %eax
    00000403: 	andl	$0x1, %ecx
    00000406: 	je	.Ltmp2115 # Offset: 1030
.Ltmp2123:
    00000408: 	cltq
    0000040a: 	addsd	(%r14,%rax,8), %xmm0
.Ltmp2115:
    00000410: 	movsd	init_value(%rip), %xmm3
    00000418: 	movsd	DATAat0x36ef8(%rip), %xmm4
    00000420: 	addsd	%xmm3, %xmm1
    00000424: 	movapd	%xmm3, %xmm5
    00000428: 	addsd	%xmm2, %xmm3
    0000042c: 	mulsd	%xmm4, %xmm5
    00000430: 	movapd	%xmm0, %xmm2
    00000434: 	mulsd	%xmm4, %xmm1
    00000438: 	mulsd	%xmm4, %xmm3
    0000043c: 	movapd	%xmm0, %xmm4
    00000440: 	addsd	%xmm5, %xmm1
    00000444: 	addsd	%xmm3, %xmm1
    00000448: 	movq	DATAat0x36f60(%rip), %xmm3
    00000450: 	andpd	%xmm3, %xmm4
    00000454: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000045c: 	subsd	%xmm1, %xmm2
    00000460: 	jbe	.Ltmp2116 # Offset: 1120
    00000462: 	divsd	%xmm0, %xmm2
.Ltmp2116:
    00000466: 	andpd	%xmm3, %xmm2
    0000046a: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000472: 	comisd	%xmm2, %xmm3
    00000476: 	jbe	.Ltmp2117 # Offset: 1142
    0000047c: 	addq	$0x98, %rsp
    00000483: 	popq	%rbx
    00000484: 	popq	%rbp
    00000485: 	popq	%r12
    00000487: 	popq	%r13
    00000489: 	popq	%r14
    0000048b: 	popq	%r15
    0000048d: 	retq # Offset: 1165
    0000048e: 	nop # Size: 2
.Ltmp2109:
    00000490: 	movq	0x80(%rsp), %rdx
    00000498: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2118:
    000004a0: 	movsd	init_value(%rip), %xmm0
    000004a8: 	addq	$0x8, %rax
    000004ac: 	addsd	%xmm2, %xmm0
    000004b0: 	movsd	%xmm0, -0x8(%rax)
    000004b5: 	cmpq	%rax, %rdx
    000004b8: 	jne	.Ltmp2118 # Offset: 1208
    000004ba: 	jmp	.Ltmp2108 # Offset: 1210
    000004bf: 	nop # Size: 1
.Ltmp2103:
    000004c0: 	movq	0x48(%rsp), %rax
    000004c5: 	movq	0x88(%rsp), %rdx
    000004cd: 	nopl	(%rax) # Size: 3
.Ltmp2119:
    000004d0: 	movsd	init_value(%rip), %xmm0
    000004d8: 	addq	$0x8, %rax
    000004dc: 	movsd	%xmm0, -0x8(%rax)
    000004e1: 	cmpq	%rdx, %rax
    000004e4: 	jne	.Ltmp2119 # Offset: 1252
    000004e6: 	jmp	.Ltmp2102 # Offset: 1254
    000004eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2106:
    000004f0: 	movq	0x78(%rsp), %rdx
    000004f5: 	nopl	(%rax) # Size: 3
.Ltmp2120:
    000004f8: 	movsd	init_value(%rip), %xmm0
    00000500: 	addq	$0x8, %rax
    00000504: 	addsd	%xmm1, %xmm0
    00000508: 	movsd	%xmm0, -0x8(%rax)
    0000050d: 	cmpq	%rax, %rdx
    00000510: 	jne	.Ltmp2120 # Offset: 1296
    00000512: 	jmp	.Ltmp2105 # Offset: 1298
.Ltmp2117:
    00000517: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000051e: 	movl	$0x5, %edx
    00000523: 	movsd	%xmm1, (%rsp)
    00000528: 	leaq	DATAat0x35004(%rip), %rsi
    0000052f: 	movq	%rbp, %rdi
    00000532: 	movsd	%xmm0, 0x8(%rsp)
    00000538: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1336
    0000053d: 	cmpq	$0x0, 0x70(%rsp)
    00000543: 	movsd	(%rsp), %xmm1
    00000548: 	movsd	0x8(%rsp), %xmm0
    0000054e: 	je	.Ltmp2121 # Offset: 1358
    00000554: 	movq	0x70(%rsp), %rbx
    00000559: 	movsd	%xmm0, 0x8(%rsp)
    0000055f: 	movsd	%xmm1, (%rsp)
    00000564: 	movq	%rbx, %rdi
    00000567: 	callq	strlen@PLT # Offset: 1383
    0000056c: 	movq	%rbx, %rsi
    0000056f: 	movq	%rbp, %rdi
    00000572: 	movq	%rax, %rdx
    00000575: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1397
    0000057a: 	movsd	0x8(%rsp), %xmm0
    00000580: 	movsd	(%rsp), %xmm1
.Ltmp2122:
    00000585: 	movl	$0xd, %edx
    0000058a: 	leaq	DATAat0x3500a(%rip), %rsi
    00000591: 	movq	%rbp, %rdi
    00000594: 	movsd	%xmm1, (%rsp)
    00000599: 	movsd	%xmm0, 0x8(%rsp)
    0000059f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1439
    000005a4: 	movsd	0x8(%rsp), %xmm0
    000005aa: 	movq	%rbp, %rdi
    000005ad: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1453
    000005b2: 	movl	$0xb, %edx
    000005b7: 	leaq	DATAat0x35018(%rip), %rsi
    000005be: 	movq	%rax, %rdi
    000005c1: 	movq	%rax, %rbp
    000005c4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1476
    000005c9: 	movsd	(%rsp), %xmm1
    000005ce: 	movq	%rbp, %rdi
    000005d1: 	movapd	%xmm1, %xmm0
    000005d5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1493
    000005da: 	addq	$0x98, %rsp
    000005e1: 	popq	%rbx
    000005e2: 	movq	%rax, %rdi
    000005e5: 	popq	%rbp
    000005e6: 	popq	%r12
    000005e8: 	popq	%r13
    000005ea: 	popq	%r14
    000005ec: 	popq	%r15
    000005ee: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1518
.Ltmp2112:
    000005f3: 	movsd	init_value(%rip), %xmm0
    000005fb: 	movsd	DATAat0x36ef8(%rip), %xmm3
    00000603: 	addsd	%xmm0, %xmm1
    00000607: 	movapd	%xmm0, %xmm4
    0000060b: 	addsd	%xmm2, %xmm0
    0000060f: 	mulsd	%xmm3, %xmm4
    00000613: 	mulsd	%xmm3, %xmm1
    00000617: 	mulsd	%xmm3, %xmm0
    0000061b: 	movq	DATAat0x36f60(%rip), %xmm3
    00000623: 	addsd	%xmm4, %xmm1
    00000627: 	addsd	%xmm0, %xmm1
    0000062b: 	pxor	%xmm0, %xmm0
    0000062f: 	movapd	%xmm0, %xmm2
    00000633: 	subsd	%xmm1, %xmm2
    00000637: 	jmp	.Ltmp2116 # Offset: 1591
.Ltmp2121:
    0000063c: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000643: 	movq	-0x18(%rax), %rdi
    00000647: 	addq	%rbp, %rdi
    0000064a: 	movl	0x20(%rdi), %esi
    0000064d: 	orl	$0x1, %esi
    00000650: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1616
    00000655: 	movsd	(%rsp), %xmm1
    0000065a: 	movsd	0x8(%rsp), %xmm0
    00000660: 	jmp	.Ltmp2122 # Offset: 1632
.Ltmp2113:
    00000665: 	pxor	%xmm0, %xmm0
    00000669: 	xorl	%eax, %eax
    0000066b: 	jmp	.Ltmp2123 # Offset: 1643
DWARF CFI Instructions:
    <empty>
End of Function "_Z37test_for_loop_memset_partial4_replaceIdEvPT_iPKc"

Binary Function "_Z30test_for_loop_partial4_replaceIdEvPT_iPKc" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x30d10
  Size        : 0x680
  MaxSize     : 0x680
  Offset      : 0x30d10
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_partial4_replaceIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %r9d
    0000000a: 	movq	%rdi, %r15
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x98, %rsp
    0000001c: 	testl	%esi, %esi
    0000001e: 	cmovnsl	%esi, %r9d
    00000022: 	movq	%rdx, 0x70(%rsp)
    00000027: 	movl	%esi, 0x8(%rsp)
    0000002b: 	sarl	$0x2, %r9d
    0000002f: 	movl	%r9d, (%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000040: 	movl	0x8(%rsp), %r8d
    00000045: 	movq	%rax, start_time(%rip)
    0000004c: 	movl	iterations(%rip), %eax
    00000052: 	movsd	DATAat0x37030(%rip), %xmm2
    0000005a: 	testl	%eax, %eax
    0000005c: 	movl	%eax, 0x34(%rsp)
    00000060: 	jle	.Ltmp2124 # Offset: 96
    00000066: 	movl	(%rsp), %edi
    00000069: 	leal	-0x1(%r8), %eax
    0000006d: 	movl	%r8d, %r12d
    00000070: 	leaq	init_value(%rip), %r11
    00000077: 	leaq	0x8(,%rax,8), %rsi
    0000007f: 	movl	%eax, 0x8(%rsp)
    00000083: 	leaq	0x8(%r11), %rbp
    00000087: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000008f: 	leal	(%rdi,%rdi), %r9d
    00000093: 	movq	%rsi, 0x40(%rsp)
    00000098: 	movslq	%edi, %rsi
    0000009b: 	movsd	DATAat0x37030(%rip), %xmm2
    000000a3: 	movl	%r9d, %ebx
    000000a6: 	leaq	(%r15,%rsi,8), %r14
    000000aa: 	leal	(%r9,%rdi), %r10d
    000000ae: 	subl	%edi, %ebx
    000000b0: 	movq	%r14, 0x50(%rsp)
    000000b5: 	movl	%ebx, %eax
    000000b7: 	leal	-0x1(%rbx), %edx
    000000ba: 	movl	%ebx, 0x68(%rsp)
    000000be: 	addq	%rsi, %rax
    000000c1: 	leaq	(%r15,%rax,8), %rax
    000000c5: 	cmpq	%r11, %rax
    000000c8: 	setbe	%cl
    000000cb: 	cmpq	%rbp, %r14
    000000ce: 	setae	%al
    000000d1: 	orl	%ecx, %eax
    000000d3: 	cmpl	$0x2, %edx
    000000d6: 	movl	%eax, %r13d
    000000d9: 	movl	%ebx, %eax
    000000db: 	seta	%cl
    000000de: 	andl	$-0x2, %ebx
    000000e1: 	shrl	%eax
    000000e3: 	andl	%ecx, %r13d
    000000e6: 	addq	%rsi, %rdx
    000000e9: 	movl	%ebx, 0x6c(%rsp)
    000000ed: 	subl	$0x1, %eax
    000000f0: 	movb	%r13b, 0x5b(%rsp)
    000000f5: 	shlq	$0x4, %rax
    000000f9: 	leaq	0x10(%r14,%rax), %rcx
    000000fe: 	movl	%edi, %eax
    00000100: 	addl	%ebx, %eax
    00000102: 	cltq
    00000104: 	leaq	(%r15,%rax,8), %r14
    00000108: 	leaq	0x8(%r15), %rax
    0000010c: 	leaq	(%rax,%rdx,8), %rsi
    00000110: 	movslq	%r9d, %rdx
    00000113: 	movq	%rsi, 0x88(%rsp)
    0000011b: 	movl	%edi, %esi
    0000011d: 	leaq	(%r15,%rdx,8), %r13
    00000121: 	movq	%rsi, %rbx
    00000124: 	addq	%rdx, %rsi
    00000127: 	movq	%r13, 0x48(%rsp)
    0000012c: 	leaq	(%r15,%rsi,8), %rsi
    00000130: 	cmpq	%r11, %rsi
    00000133: 	setbe	%sil
    00000137: 	cmpq	%rbp, %r13
    0000013a: 	setae	%dil
    0000013e: 	orl	%edi, %esi
    00000140: 	leal	-0x1(%rbx), %edi
    00000143: 	cmpl	$0x1, %edi
    00000146: 	seta	%dil
    0000014a: 	subl	%r10d, %r12d
    0000014d: 	andl	%edi, %esi
    0000014f: 	movl	%ebx, %edi
    00000151: 	movl	%r12d, 0x5c(%rsp)
    00000156: 	movb	%sil, 0x5a(%rsp)
    0000015b: 	movl	%ebx, %esi
    0000015d: 	andl	$-0x2, %edi
    00000160: 	shrl	%esi
    00000162: 	movl	%edi, 0x64(%rsp)
    00000166: 	leal	-0x1(%rsi), %ebx
    00000169: 	leal	(%r9,%rdi), %esi
    0000016d: 	addq	$0x1, %rbx
    00000171: 	movslq	%esi, %rsi
    00000174: 	shlq	$0x4, %rbx
    00000178: 	addq	%r13, %rbx
    0000017b: 	leaq	(%r15,%rsi,8), %r13
    0000017f: 	leal	-0x1(%r10), %esi
    00000183: 	subl	%r9d, %esi
    00000186: 	addq	%rdx, %rsi
    00000189: 	movslq	%r10d, %rdx
    0000018c: 	leaq	(%rax,%rsi,8), %rsi
    00000190: 	leaq	(%r15,%rdx,8), %rdi
    00000194: 	movq	%rsi, 0x78(%rsp)
    00000199: 	movl	%r12d, %esi
    0000019c: 	addq	%rdx, %rsi
    0000019f: 	movq	%rdi, 0x38(%rsp)
    000001a4: 	leaq	(%r15,%rsi,8), %rsi
    000001a8: 	cmpq	%r11, %rsi
    000001ab: 	movq	%rdi, %r11
    000001ae: 	setbe	%sil
    000001b2: 	cmpq	%rbp, %rdi
    000001b5: 	setae	%dil
    000001b9: 	orl	%edi, %esi
    000001bb: 	leal	-0x1(%r12), %edi
    000001c0: 	cmpl	$0x1, %edi
    000001c3: 	seta	%dil
    000001c7: 	andl	%edi, %esi
    000001c9: 	movq	%r15, %rdi
    000001cc: 	movb	%sil, 0x59(%rsp)
    000001d1: 	movl	%r12d, %esi
    000001d4: 	andl	$-0x2, %r12d
    000001d8: 	shrl	%esi
    000001da: 	movl	%r12d, 0x60(%rsp)
    000001df: 	leal	-0x1(%rsi), %ebp
    000001e2: 	leal	(%r10,%r12), %esi
    000001e6: 	movslq	%esi, %rsi
    000001e9: 	shlq	$0x4, %rbp
    000001ed: 	leaq	(%r15,%rsi,8), %r12
    000001f1: 	movl	0x8(%rsp), %esi
    000001f5: 	addq	%r11, %rbp
    000001f8: 	movl	%r9d, %r15d
    000001fb: 	xorl	%r11d, %r11d
    000001fe: 	subl	%r10d, %esi
    00000201: 	addq	%rsi, %rdx
    00000204: 	leaq	(%rax,%rdx,8), %rax
    00000208: 	movq	%rax, 0x80(%rsp)
.Ltmp2135:
    00000210: 	testl	%r8d, %r8d
    00000213: 	jle	.Ltmp2125 # Offset: 531
    00000215: 	movq	0x40(%rsp), %rdx
    0000021a: 	xorl	%esi, %esi
    0000021c: 	movl	%r10d, 0x30(%rsp)
    00000221: 	movl	%r8d, 0x24(%rsp)
    00000226: 	movq	%rcx, 0x18(%rsp)
    0000022b: 	movl	%r11d, 0x10(%rsp)
    00000230: 	movsd	%xmm1, 0x28(%rsp)
    00000236: 	movsd	%xmm2, 0x8(%rsp)
    0000023c: 	callq	memset@PLT # Offset: 572
    00000241: 	movsd	0x28(%rsp), %xmm1
    00000247: 	movl	0x30(%rsp), %r10d
    0000024c: 	movl	0x24(%rsp), %r8d
    00000251: 	movq	0x18(%rsp), %rcx
    00000256: 	movq	%rax, %rdi
    00000259: 	movl	0x10(%rsp), %r11d
    0000025e: 	movsd	0x8(%rsp), %xmm2
.Ltmp2125:
    00000264: 	cmpl	%r15d, (%rsp)
    00000268: 	jge	.Ltmp2126 # Offset: 616
    0000026a: 	cmpb	$0x0, 0x5b(%rsp)
    0000026f: 	je	.Ltmp2127 # Offset: 623
    00000275: 	movsd	init_value(%rip), %xmm0
    0000027d: 	movq	0x50(%rsp), %rax
    00000282: 	unpcklpd	%xmm0, %xmm0
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2128:
    00000290: 	movups	%xmm0, (%rax)
    00000293: 	addq	$0x10, %rax
    00000297: 	cmpq	%rcx, %rax
    0000029a: 	jne	.Ltmp2128 # Offset: 666
    0000029c: 	movl	0x6c(%rsp), %esi
    000002a0: 	cmpl	%esi, 0x68(%rsp)
    000002a4: 	je	.Ltmp2126 # Offset: 676
    000002a6: 	movsd	init_value(%rip), %xmm0
    000002ae: 	movsd	%xmm0, (%r14)
.Ltmp2126:
    000002b3: 	cmpl	%r15d, %r10d
    000002b6: 	jle	.Ltmp2129 # Offset: 694
    000002b8: 	cmpb	$0x0, 0x5a(%rsp)
    000002bd: 	movq	0x48(%rsp), %rax
    000002c2: 	je	.Ltmp2130 # Offset: 706
    000002c8: 	movsd	init_value(%rip), %xmm0
    000002d0: 	addsd	%xmm1, %xmm0
    000002d4: 	unpcklpd	%xmm0, %xmm0
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2131:
    000002e0: 	movups	%xmm0, (%rax)
    000002e3: 	addq	$0x10, %rax
    000002e7: 	cmpq	%rbx, %rax
    000002ea: 	jne	.Ltmp2131 # Offset: 746
    000002ec: 	movl	0x64(%rsp), %esi
    000002f0: 	cmpl	%esi, (%rsp)
    000002f3: 	je	.Ltmp2129 # Offset: 755
    000002f5: 	movsd	init_value(%rip), %xmm0
    000002fd: 	addsd	%xmm1, %xmm0
    00000301: 	movsd	%xmm0, (%r13)
.Ltmp2129:
    00000307: 	cmpl	%r10d, %r8d
    0000030a: 	jle	.Ltmp2132 # Offset: 778
    0000030c: 	cmpb	$0x0, 0x59(%rsp)
    00000311: 	movq	0x38(%rsp), %rax
    00000316: 	je	.Ltmp2133 # Offset: 790
    0000031c: 	movsd	init_value(%rip), %xmm0
    00000324: 	addsd	%xmm2, %xmm0
    00000328: 	unpcklpd	%xmm0, %xmm0
    0000032c: 	nopl	(%rax) # Size: 4
.Ltmp2134:
    00000330: 	movq	%rax, %rdx
    00000333: 	movups	%xmm0, (%rax)
    00000336: 	addq	$0x10, %rax
    0000033a: 	cmpq	%rdx, %rbp
    0000033d: 	jne	.Ltmp2134 # Offset: 829
    0000033f: 	movl	0x60(%rsp), %esi
    00000343: 	cmpl	%esi, 0x5c(%rsp)
    00000347: 	je	.Ltmp2132 # Offset: 839
    00000349: 	movsd	init_value(%rip), %xmm0
    00000351: 	addsd	%xmm2, %xmm0
    00000355: 	movsd	%xmm0, (%r12)
.Ltmp2132:
    0000035b: 	addl	$0x1, %r11d
    0000035f: 	cmpl	0x34(%rsp), %r11d
    00000364: 	jne	.Ltmp2135 # Offset: 868
    0000036a: 	movq	%rdi, %r15
.Ltmp2124:
    0000036d: 	movl	%r8d, (%rsp)
    00000371: 	movsd	%xmm2, 0x10(%rsp)
    00000377: 	movsd	%xmm1, 0x8(%rsp)
    0000037d: 	callq	clock@PLT # Offset: 893
    00000382: 	movq	0x70(%rsp), %rdi
    00000387: 	pxor	%xmm0, %xmm0
    0000038b: 	movq	%rax, end_time(%rip)
    00000392: 	subq	start_time(%rip), %rax
    00000399: 	cvtsi2sd	%rax, %xmm0
    0000039e: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003a6: 	callq	_Z13record_resultdPKc # Offset: 934
    000003ab: 	movl	(%rsp), %r8d
    000003af: 	movsd	0x8(%rsp), %xmm1
    000003b5: 	movsd	0x10(%rsp), %xmm2
    000003bb: 	testl	%r8d, %r8d
    000003be: 	jle	.Ltmp2136 # Offset: 958
    000003c4: 	cmpl	$0x1, %r8d
    000003c8: 	je	.Ltmp2137 # Offset: 968
    000003ce: 	movl	%r8d, %edx
    000003d1: 	movq	%r15, %rax
    000003d4: 	pxor	%xmm0, %xmm0
    000003d8: 	shrl	%edx
    000003da: 	subl	$0x1, %edx
    000003dd: 	shlq	$0x4, %rdx
    000003e1: 	leaq	0x10(%r15,%rdx), %rdx
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2138:
    000003f0: 	movsd	(%rax), %xmm3
    000003f4: 	addq	$0x10, %rax
    000003f8: 	addsd	%xmm3, %xmm0
    000003fc: 	movsd	-0x8(%rax), %xmm3
    00000401: 	addsd	%xmm3, %xmm0
    00000405: 	cmpq	%rdx, %rax
    00000408: 	jne	.Ltmp2138 # Offset: 1032
    0000040a: 	movl	%r8d, %eax
    0000040d: 	andl	$-0x2, %eax
    00000410: 	andl	$0x1, %r8d
    00000414: 	je	.Ltmp2139 # Offset: 1044
.Ltmp2147:
    00000416: 	cltq
    00000418: 	addsd	(%r15,%rax,8), %xmm0
.Ltmp2139:
    0000041e: 	movsd	init_value(%rip), %xmm3
    00000426: 	movsd	DATAat0x36ef8(%rip), %xmm4
    0000042e: 	addsd	%xmm3, %xmm1
    00000432: 	movapd	%xmm3, %xmm5
    00000436: 	addsd	%xmm2, %xmm3
    0000043a: 	mulsd	%xmm4, %xmm5
    0000043e: 	movapd	%xmm0, %xmm2
    00000442: 	mulsd	%xmm4, %xmm1
    00000446: 	mulsd	%xmm4, %xmm3
    0000044a: 	movapd	%xmm0, %xmm4
    0000044e: 	addsd	%xmm5, %xmm1
    00000452: 	addsd	%xmm3, %xmm1
    00000456: 	movq	DATAat0x36f60(%rip), %xmm3
    0000045e: 	andpd	%xmm3, %xmm4
    00000462: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000046a: 	subsd	%xmm1, %xmm2
    0000046e: 	jbe	.Ltmp2140 # Offset: 1134
    00000470: 	divsd	%xmm0, %xmm2
.Ltmp2140:
    00000474: 	andpd	%xmm3, %xmm2
    00000478: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000480: 	comisd	%xmm2, %xmm3
    00000484: 	jbe	.Ltmp2141 # Offset: 1156
    0000048a: 	addq	$0x98, %rsp
    00000491: 	popq	%rbx
    00000492: 	popq	%rbp
    00000493: 	popq	%r12
    00000495: 	popq	%r13
    00000497: 	popq	%r14
    00000499: 	popq	%r15
    0000049b: 	retq # Offset: 1179
    0000049c: 	nopl	(%rax) # Size: 4
.Ltmp2133:
    000004a0: 	movq	0x80(%rsp), %rdx
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2142:
    000004b0: 	movsd	init_value(%rip), %xmm0
    000004b8: 	addq	$0x8, %rax
    000004bc: 	addsd	%xmm2, %xmm0
    000004c0: 	movsd	%xmm0, -0x8(%rax)
    000004c5: 	cmpq	%rax, %rdx
    000004c8: 	jne	.Ltmp2142 # Offset: 1224
    000004ca: 	jmp	.Ltmp2132 # Offset: 1226
    000004cf: 	nop # Size: 1
.Ltmp2127:
    000004d0: 	movq	0x50(%rsp), %rax
    000004d5: 	movq	0x88(%rsp), %rdx
    000004dd: 	nopl	(%rax) # Size: 3
.Ltmp2143:
    000004e0: 	movsd	init_value(%rip), %xmm0
    000004e8: 	addq	$0x8, %rax
    000004ec: 	movsd	%xmm0, -0x8(%rax)
    000004f1: 	cmpq	%rdx, %rax
    000004f4: 	jne	.Ltmp2143 # Offset: 1268
    000004f6: 	jmp	.Ltmp2126 # Offset: 1270
    000004fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2130:
    00000500: 	movq	0x78(%rsp), %rdx
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp2144:
    00000508: 	movsd	init_value(%rip), %xmm0
    00000510: 	addq	$0x8, %rax
    00000514: 	addsd	%xmm1, %xmm0
    00000518: 	movsd	%xmm0, -0x8(%rax)
    0000051d: 	cmpq	%rax, %rdx
    00000520: 	jne	.Ltmp2144 # Offset: 1312
    00000522: 	jmp	.Ltmp2129 # Offset: 1314
.Ltmp2141:
    00000527: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000052e: 	movl	$0x5, %edx
    00000533: 	movsd	%xmm1, (%rsp)
    00000538: 	leaq	DATAat0x35004(%rip), %rsi
    0000053f: 	movq	%rbp, %rdi
    00000542: 	movsd	%xmm0, 0x8(%rsp)
    00000548: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1352
    0000054d: 	cmpq	$0x0, 0x70(%rsp)
    00000553: 	movsd	(%rsp), %xmm1
    00000558: 	movsd	0x8(%rsp), %xmm0
    0000055e: 	je	.Ltmp2145 # Offset: 1374
    00000564: 	movq	0x70(%rsp), %rbx
    00000569: 	movsd	%xmm0, 0x8(%rsp)
    0000056f: 	movsd	%xmm1, (%rsp)
    00000574: 	movq	%rbx, %rdi
    00000577: 	callq	strlen@PLT # Offset: 1399
    0000057c: 	movq	%rbx, %rsi
    0000057f: 	movq	%rbp, %rdi
    00000582: 	movq	%rax, %rdx
    00000585: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1413
    0000058a: 	movsd	0x8(%rsp), %xmm0
    00000590: 	movsd	(%rsp), %xmm1
.Ltmp2146:
    00000595: 	movl	$0xd, %edx
    0000059a: 	leaq	DATAat0x3500a(%rip), %rsi
    000005a1: 	movq	%rbp, %rdi
    000005a4: 	movsd	%xmm1, (%rsp)
    000005a9: 	movsd	%xmm0, 0x8(%rsp)
    000005af: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1455
    000005b4: 	movsd	0x8(%rsp), %xmm0
    000005ba: 	movq	%rbp, %rdi
    000005bd: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1469
    000005c2: 	movl	$0xb, %edx
    000005c7: 	leaq	DATAat0x35018(%rip), %rsi
    000005ce: 	movq	%rax, %rdi
    000005d1: 	movq	%rax, %rbp
    000005d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1492
    000005d9: 	movsd	(%rsp), %xmm1
    000005de: 	movq	%rbp, %rdi
    000005e1: 	movapd	%xmm1, %xmm0
    000005e5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1509
    000005ea: 	addq	$0x98, %rsp
    000005f1: 	popq	%rbx
    000005f2: 	movq	%rax, %rdi
    000005f5: 	popq	%rbp
    000005f6: 	popq	%r12
    000005f8: 	popq	%r13
    000005fa: 	popq	%r14
    000005fc: 	popq	%r15
    000005fe: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1534
.Ltmp2136:
    00000603: 	movsd	init_value(%rip), %xmm0
    0000060b: 	movsd	DATAat0x36ef8(%rip), %xmm3
    00000613: 	addsd	%xmm0, %xmm1
    00000617: 	movapd	%xmm0, %xmm4
    0000061b: 	addsd	%xmm2, %xmm0
    0000061f: 	mulsd	%xmm3, %xmm4
    00000623: 	mulsd	%xmm3, %xmm1
    00000627: 	mulsd	%xmm3, %xmm0
    0000062b: 	movq	DATAat0x36f60(%rip), %xmm3
    00000633: 	addsd	%xmm4, %xmm1
    00000637: 	addsd	%xmm0, %xmm1
    0000063b: 	pxor	%xmm0, %xmm0
    0000063f: 	movapd	%xmm0, %xmm2
    00000643: 	subsd	%xmm1, %xmm2
    00000647: 	jmp	.Ltmp2140 # Offset: 1607
.Ltmp2145:
    0000064c: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000653: 	movq	-0x18(%rax), %rdi
    00000657: 	addq	%rbp, %rdi
    0000065a: 	movl	0x20(%rdi), %esi
    0000065d: 	orl	$0x1, %esi
    00000660: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1632
    00000665: 	movsd	(%rsp), %xmm1
    0000066a: 	movsd	0x8(%rsp), %xmm0
    00000670: 	jmp	.Ltmp2146 # Offset: 1648
.Ltmp2137:
    00000675: 	pxor	%xmm0, %xmm0
    00000679: 	xorl	%eax, %eax
    0000067b: 	jmp	.Ltmp2147 # Offset: 1659
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_partial4_replaceIdEvPT_iPKc"

Binary Function "_Z31test_for_loop_partial4_replaceAIdEvPT_iPKc" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x31390
  Size        : 0x68f
  MaxSize     : 0x690
  Offset      : 0x31390
  Section     : .text
  Orc Section : .local.text._Z31test_for_loop_partial4_replaceAIdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leal	0x3(%rsi), %eax
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x98, %rsp
    0000001d: 	testl	%esi, %esi
    0000001f: 	cmovnsl	%esi, %eax
    00000022: 	movq	%rdx, 0x70(%rsp)
    00000027: 	sarl	$0x2, %eax
    0000002a: 	movl	%eax, 0x24(%rsp)
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movsd	DATAat0x36fb0(%rip), %xmm1
    0000003b: 	movsd	DATAat0x37030(%rip), %xmm2
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	movl	%eax, 0x28(%rsp)
    00000054: 	testl	%eax, %eax
    00000056: 	jle	.Ltmp2148 # Offset: 86
    0000005c: 	movslq	0x24(%rsp), %rcx
    00000061: 	movl	%ebx, %r8d
    00000064: 	leal	-0x1(%rbx), %edx
    00000067: 	leaq	0x8(%r14), %r11
    0000006b: 	movq	%rdx, %rax
    0000006e: 	leaq	0x8(,%rdx,8), %rsi
    00000076: 	movl	%ebx, %r13d
    00000079: 	movsd	DATAat0x36fb0(%rip), %xmm1
    00000081: 	subl	%ecx, %r8d
    00000084: 	leal	(%rcx,%rcx), %r10d
    00000088: 	leaq	(%r14,%rcx,8), %r9
    0000008c: 	movq	%rsi, 0x40(%rsp)
    00000091: 	movl	%r8d, %edx
    00000094: 	leaq	init_value(%rip), %rdi
    0000009b: 	movl	%r10d, %r15d
    0000009e: 	movl	%r8d, 0x68(%rsp)
    000000a3: 	addq	%rcx, %rdx
    000000a6: 	addl	%ecx, %r15d
    000000a9: 	leaq	0x8(%rdi), %rbp
    000000ad: 	movq	%r9, 0x48(%rsp)
    000000b2: 	leaq	(%r14,%rdx,8), %rdx
    000000b6: 	movl	%r10d, 0x2c(%rsp)
    000000bb: 	movsd	DATAat0x37030(%rip), %xmm2
    000000c3: 	cmpq	%rdi, %rdx
    000000c6: 	movl	%r15d, 0x50(%rsp)
    000000cb: 	setbe	%dl
    000000ce: 	cmpq	%rbp, %r9
    000000d1: 	setae	%sil
    000000d5: 	orl	%esi, %edx
    000000d7: 	leal	-0x1(%r8), %esi
    000000db: 	cmpl	$0x2, %esi
    000000de: 	seta	%sil
    000000e2: 	subl	%r10d, %r13d
    000000e5: 	andl	%esi, %edx
    000000e7: 	movl	%r13d, 0x60(%rsp)
    000000ec: 	movb	%dl, 0x57(%rsp)
    000000f0: 	movl	%r8d, %edx
    000000f3: 	andl	$-0x2, %r8d
    000000f7: 	shrl	%edx
    000000f9: 	movl	%r8d, 0x6c(%rsp)
    000000fe: 	subl	$0x1, %edx
    00000101: 	shlq	$0x4, %rdx
    00000105: 	leaq	0x10(%r9,%rdx), %r9
    0000010a: 	movl	%ecx, %edx
    0000010c: 	addl	%r8d, %edx
    0000010f: 	movslq	%edx, %rdx
    00000112: 	leaq	(%r14,%rdx,8), %r8
    00000116: 	movl	%eax, %edx
    00000118: 	subl	%ecx, %edx
    0000011a: 	addq	%rcx, %rdx
    0000011d: 	leaq	(%r11,%rdx,8), %rsi
    00000121: 	movl	%r13d, %edx
    00000124: 	movq	%rsi, 0x88(%rsp)
    0000012c: 	movslq	%r10d, %rsi
    0000012f: 	addq	%rsi, %rdx
    00000132: 	leaq	(%r14,%rsi,8), %rcx
    00000136: 	leaq	(%r14,%rdx,8), %rdx
    0000013a: 	movq	%rcx, 0x30(%rsp)
    0000013f: 	cmpq	%rdi, %rdx
    00000142: 	setbe	%dl
    00000145: 	cmpq	%rbp, %rcx
    00000148: 	setae	%cl
    0000014b: 	orl	%ecx, %edx
    0000014d: 	leal	-0x1(%r13), %ecx
    00000151: 	cmpl	$0x1, %ecx
    00000154: 	seta	%cl
    00000157: 	andl	%ecx, %edx
    00000159: 	movb	%dl, 0x56(%rsp)
    0000015d: 	movl	%r13d, %edx
    00000160: 	andl	$-0x2, %r13d
    00000164: 	shrl	%edx
    00000166: 	movl	%r13d, 0x64(%rsp)
    0000016b: 	leal	-0x1(%rdx), %r12d
    0000016f: 	movl	%r10d, %edx
    00000172: 	addl	%r13d, %edx
    00000175: 	shlq	$0x4, %r12
    00000179: 	addq	0x30(%rsp), %r12
    0000017e: 	movslq	%edx, %rdx
    00000181: 	leaq	(%r14,%rdx,8), %rcx
    00000185: 	movl	%eax, %edx
    00000187: 	subl	%r10d, %edx
    0000018a: 	movl	%ebx, %r10d
    0000018d: 	addq	%rsi, %rdx
    00000190: 	subl	%r15d, %r10d
    00000193: 	leaq	(%r11,%rdx,8), %rsi
    00000197: 	movslq	%r15d, %rdx
    0000019a: 	movl	%r10d, 0x58(%rsp)
    0000019f: 	movq	%rsi, 0x80(%rsp)
    000001a7: 	movl	%r10d, %esi
    000001aa: 	leaq	(%r14,%rdx,8), %r13
    000001ae: 	addq	%rdx, %rsi
    000001b1: 	movq	%r13, 0x38(%rsp)
    000001b6: 	leaq	(%r14,%rsi,8), %rsi
    000001ba: 	cmpq	%rdi, %rsi
    000001bd: 	setbe	%sil
    000001c1: 	cmpq	%rbp, %r13
    000001c4: 	setae	%dil
    000001c8: 	orl	%edi, %esi
    000001ca: 	leal	-0x1(%r10), %edi
    000001ce: 	cmpl	$0x1, %edi
    000001d1: 	seta	%dil
    000001d5: 	subl	%r15d, %eax
    000001d8: 	andl	%edi, %esi
    000001da: 	addq	%rdx, %rax
    000001dd: 	movq	%r14, %rdi
    000001e0: 	movb	%sil, 0x55(%rsp)
    000001e5: 	movl	%r10d, %esi
    000001e8: 	leaq	(%r11,%rax,8), %rax
    000001ec: 	andl	$-0x2, %r10d
    000001f0: 	shrl	%esi
    000001f2: 	movq	%rax, 0x78(%rsp)
    000001f7: 	leal	-0x1(%rsi), %ebp
    000001fa: 	movl	%r15d, %esi
    000001fd: 	xorl	%r15d, %r15d
    00000200: 	movl	%r10d, 0x5c(%rsp)
    00000205: 	addl	%r10d, %esi
    00000208: 	shlq	$0x4, %rbp
    0000020c: 	movl	%ebx, %r10d
    0000020f: 	movl	%r15d, %ebx
    00000212: 	addq	%r13, %rbp
    00000215: 	movslq	%esi, %rsi
    00000218: 	leaq	(%r14,%rsi,8), %r13
    0000021c: 	movq	%rbp, %r15
    0000021f: 	movq	%r12, %r14
    00000222: 	movq	%rcx, %rbp
    00000225: 	movq	%r8, %r12
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2159:
    00000230: 	testl	%r10d, %r10d
    00000233: 	jle	.Ltmp2149 # Offset: 563
    00000235: 	movq	0x40(%rsp), %rdx
    0000023a: 	xorl	%esi, %esi
    0000023c: 	movl	%r10d, 0x20(%rsp)
    00000241: 	movq	%r9, 0x10(%rsp)
    00000246: 	movsd	%xmm1, 0x18(%rsp)
    0000024c: 	movsd	%xmm2, 0x8(%rsp)
    00000252: 	callq	memset@PLT # Offset: 594
    00000257: 	movsd	0x18(%rsp), %xmm1
    0000025d: 	movl	0x20(%rsp), %r10d
    00000262: 	movq	0x10(%rsp), %r9
    00000267: 	movsd	0x8(%rsp), %xmm2
    0000026d: 	movq	%rax, %rdi
.Ltmp2149:
    00000270: 	cmpl	0x24(%rsp), %r10d
    00000275: 	jle	.Ltmp2150 # Offset: 629
    00000277: 	cmpb	$0x0, 0x57(%rsp)
    0000027c: 	je	.Ltmp2151 # Offset: 636
    00000282: 	movsd	init_value(%rip), %xmm0
    0000028a: 	movq	0x48(%rsp), %rax
    0000028f: 	unpcklpd	%xmm0, %xmm0
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2152:
    00000298: 	movups	%xmm0, (%rax)
    0000029b: 	addq	$0x10, %rax
    0000029f: 	cmpq	%r9, %rax
    000002a2: 	jne	.Ltmp2152 # Offset: 674
    000002a4: 	movl	0x6c(%rsp), %ecx
    000002a8: 	cmpl	%ecx, 0x68(%rsp)
    000002ac: 	je	.Ltmp2150 # Offset: 684
    000002ae: 	movsd	init_value(%rip), %xmm0
    000002b6: 	movsd	%xmm0, (%r12)
.Ltmp2150:
    000002bc: 	cmpl	0x2c(%rsp), %r10d
    000002c1: 	jle	.Ltmp2153 # Offset: 705
    000002c3: 	cmpb	$0x0, 0x56(%rsp)
    000002c8: 	movq	0x30(%rsp), %rax
    000002cd: 	je	.Ltmp2154 # Offset: 717
    000002d3: 	movsd	init_value(%rip), %xmm0
    000002db: 	addsd	%xmm1, %xmm0
    000002df: 	unpcklpd	%xmm0, %xmm0
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2155:
    000002e8: 	movq	%rax, %rdx
    000002eb: 	movups	%xmm0, (%rax)
    000002ee: 	addq	$0x10, %rax
    000002f2: 	cmpq	%r14, %rdx
    000002f5: 	jne	.Ltmp2155 # Offset: 757
    000002f7: 	movl	0x64(%rsp), %ecx
    000002fb: 	cmpl	%ecx, 0x60(%rsp)
    000002ff: 	je	.Ltmp2153 # Offset: 767
    00000301: 	movsd	init_value(%rip), %xmm0
    00000309: 	addsd	%xmm1, %xmm0
    0000030d: 	movsd	%xmm0, (%rbp)
.Ltmp2153:
    00000312: 	cmpl	0x50(%rsp), %r10d
    00000317: 	jle	.Ltmp2156 # Offset: 791
    00000319: 	cmpb	$0x0, 0x55(%rsp)
    0000031e: 	movq	0x38(%rsp), %rax
    00000323: 	je	.Ltmp2157 # Offset: 803
    00000329: 	movsd	init_value(%rip), %xmm0
    00000331: 	addsd	%xmm2, %xmm0
    00000335: 	unpcklpd	%xmm0, %xmm0
    00000339: 	nopl	(%rax) # Size: 7
.Ltmp2158:
    00000340: 	movq	%rax, %rdx
    00000343: 	movups	%xmm0, (%rax)
    00000346: 	addq	$0x10, %rax
    0000034a: 	cmpq	%rdx, %r15
    0000034d: 	jne	.Ltmp2158 # Offset: 845
    0000034f: 	movl	0x5c(%rsp), %ecx
    00000353: 	cmpl	%ecx, 0x58(%rsp)
    00000357: 	je	.Ltmp2156 # Offset: 855
    00000359: 	movsd	init_value(%rip), %xmm0
    00000361: 	addsd	%xmm2, %xmm0
    00000365: 	movsd	%xmm0, (%r13)
.Ltmp2156:
    0000036b: 	addl	$0x1, %ebx
    0000036e: 	cmpl	0x28(%rsp), %ebx
    00000372: 	jne	.Ltmp2159 # Offset: 882
    00000378: 	movq	%rdi, %r14
    0000037b: 	movl	%r10d, %ebx
.Ltmp2148:
    0000037e: 	movsd	%xmm2, 0x10(%rsp)
    00000384: 	movsd	%xmm1, 0x8(%rsp)
    0000038a: 	callq	clock@PLT # Offset: 906
    0000038f: 	movq	0x70(%rsp), %rdi
    00000394: 	pxor	%xmm0, %xmm0
    00000398: 	movq	%rax, end_time(%rip)
    0000039f: 	subq	start_time(%rip), %rax
    000003a6: 	cvtsi2sd	%rax, %xmm0
    000003ab: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000003b3: 	callq	_Z13record_resultdPKc # Offset: 947
    000003b8: 	testl	%ebx, %ebx
    000003ba: 	movsd	0x8(%rsp), %xmm1
    000003c0: 	movsd	0x10(%rsp), %xmm2
    000003c6: 	jle	.Ltmp2160 # Offset: 966
    000003cc: 	cmpl	$0x1, %ebx
    000003cf: 	je	.Ltmp2161 # Offset: 975
    000003d5: 	movl	%ebx, %edx
    000003d7: 	movq	%r14, %rax
    000003da: 	pxor	%xmm0, %xmm0
    000003de: 	shrl	%edx
    000003e0: 	subl	$0x1, %edx
    000003e3: 	shlq	$0x4, %rdx
    000003e7: 	leaq	0x10(%r14,%rdx), %rdx
    000003ec: 	nopl	(%rax) # Size: 4
.Ltmp2162:
    000003f0: 	movsd	(%rax), %xmm3
    000003f4: 	addq	$0x10, %rax
    000003f8: 	addsd	%xmm3, %xmm0
    000003fc: 	movsd	-0x8(%rax), %xmm3
    00000401: 	addsd	%xmm3, %xmm0
    00000405: 	cmpq	%rdx, %rax
    00000408: 	jne	.Ltmp2162 # Offset: 1032
    0000040a: 	movl	%ebx, %eax
    0000040c: 	andl	$-0x2, %eax
    0000040f: 	andl	$0x1, %ebx
    00000412: 	je	.Ltmp2163 # Offset: 1042
.Ltmp2171:
    00000414: 	cltq
    00000416: 	addsd	(%r14,%rax,8), %xmm0
.Ltmp2163:
    0000041c: 	movsd	init_value(%rip), %xmm3
    00000424: 	movsd	DATAat0x36ef8(%rip), %xmm4
    0000042c: 	addsd	%xmm3, %xmm1
    00000430: 	movapd	%xmm3, %xmm5
    00000434: 	addsd	%xmm2, %xmm3
    00000438: 	mulsd	%xmm4, %xmm5
    0000043c: 	movapd	%xmm0, %xmm2
    00000440: 	mulsd	%xmm4, %xmm1
    00000444: 	mulsd	%xmm4, %xmm3
    00000448: 	movapd	%xmm0, %xmm4
    0000044c: 	addsd	%xmm5, %xmm1
    00000450: 	addsd	%xmm3, %xmm1
    00000454: 	movq	DATAat0x36f60(%rip), %xmm3
    0000045c: 	andpd	%xmm3, %xmm4
    00000460: 	comisd	DATAat0x36ed8(%rip), %xmm4
    00000468: 	subsd	%xmm1, %xmm2
    0000046c: 	jbe	.Ltmp2164 # Offset: 1132
    0000046e: 	divsd	%xmm0, %xmm2
.Ltmp2164:
    00000472: 	andpd	%xmm3, %xmm2
    00000476: 	movsd	DATAat0x36ee0(%rip), %xmm3
    0000047e: 	comisd	%xmm2, %xmm3
    00000482: 	jbe	.Ltmp2165 # Offset: 1154
    00000488: 	addq	$0x98, %rsp
    0000048f: 	popq	%rbx
    00000490: 	popq	%rbp
    00000491: 	popq	%r12
    00000493: 	popq	%r13
    00000495: 	popq	%r14
    00000497: 	popq	%r15
    00000499: 	retq # Offset: 1177
    0000049a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2157:
    000004a0: 	movq	0x78(%rsp), %rdx
    000004a5: 	nopl	(%rax) # Size: 3
.Ltmp2166:
    000004a8: 	movsd	init_value(%rip), %xmm0
    000004b0: 	addq	$0x8, %rax
    000004b4: 	addsd	%xmm2, %xmm0
    000004b8: 	movsd	%xmm0, -0x8(%rax)
    000004bd: 	cmpq	%rax, %rdx
    000004c0: 	jne	.Ltmp2166 # Offset: 1216
    000004c2: 	jmp	.Ltmp2156 # Offset: 1218
    000004c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2151:
    000004d0: 	movq	0x48(%rsp), %rax
    000004d5: 	movq	0x88(%rsp), %rdx
    000004dd: 	nopl	(%rax) # Size: 3
.Ltmp2167:
    000004e0: 	movsd	init_value(%rip), %xmm0
    000004e8: 	addq	$0x8, %rax
    000004ec: 	movsd	%xmm0, -0x8(%rax)
    000004f1: 	cmpq	%rdx, %rax
    000004f4: 	jne	.Ltmp2167 # Offset: 1268
    000004f6: 	jmp	.Ltmp2150 # Offset: 1270
    000004fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2154:
    00000500: 	movq	0x80(%rsp), %rdx
    00000508: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2168:
    00000510: 	movsd	init_value(%rip), %xmm0
    00000518: 	addq	$0x8, %rax
    0000051c: 	addsd	%xmm1, %xmm0
    00000520: 	movsd	%xmm0, -0x8(%rax)
    00000525: 	cmpq	%rdx, %rax
    00000528: 	jne	.Ltmp2168 # Offset: 1320
    0000052a: 	jmp	.Ltmp2153 # Offset: 1322
.Ltmp2165:
    0000052f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000536: 	movl	$0x5, %edx
    0000053b: 	leaq	DATAat0x35004(%rip), %rsi
    00000542: 	movsd	%xmm0, 0x10(%rsp)
    00000548: 	movq	%rbp, %rdi
    0000054b: 	movsd	%xmm1, 0x8(%rsp)
    00000551: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1361
    00000556: 	cmpq	$0x0, 0x70(%rsp)
    0000055c: 	movsd	0x8(%rsp), %xmm1
    00000562: 	movsd	0x10(%rsp), %xmm0
    00000568: 	je	.Ltmp2169 # Offset: 1384
    0000056e: 	movq	0x70(%rsp), %rbx
    00000573: 	movsd	%xmm0, 0x10(%rsp)
    00000579: 	movsd	%xmm1, 0x8(%rsp)
    0000057f: 	movq	%rbx, %rdi
    00000582: 	callq	strlen@PLT # Offset: 1410
    00000587: 	movq	%rbx, %rsi
    0000058a: 	movq	%rbp, %rdi
    0000058d: 	movq	%rax, %rdx
    00000590: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1424
    00000595: 	movsd	0x10(%rsp), %xmm0
    0000059b: 	movsd	0x8(%rsp), %xmm1
.Ltmp2170:
    000005a1: 	movl	$0xd, %edx
    000005a6: 	leaq	DATAat0x3500a(%rip), %rsi
    000005ad: 	movq	%rbp, %rdi
    000005b0: 	movsd	%xmm1, 0x8(%rsp)
    000005b6: 	movsd	%xmm0, 0x10(%rsp)
    000005bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1468
    000005c1: 	movsd	0x10(%rsp), %xmm0
    000005c7: 	movq	%rbp, %rdi
    000005ca: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1482
    000005cf: 	movl	$0xb, %edx
    000005d4: 	leaq	DATAat0x35018(%rip), %rsi
    000005db: 	movq	%rax, %rdi
    000005de: 	movq	%rax, %rbp
    000005e1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1505
    000005e6: 	movsd	0x8(%rsp), %xmm1
    000005ec: 	movq	%rbp, %rdi
    000005ef: 	movapd	%xmm1, %xmm0
    000005f3: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1523
    000005f8: 	addq	$0x98, %rsp
    000005ff: 	popq	%rbx
    00000600: 	movq	%rax, %rdi
    00000603: 	popq	%rbp
    00000604: 	popq	%r12
    00000606: 	popq	%r13
    00000608: 	popq	%r14
    0000060a: 	popq	%r15
    0000060c: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 1548
.Ltmp2160:
    00000611: 	movsd	init_value(%rip), %xmm0
    00000619: 	movsd	DATAat0x36ef8(%rip), %xmm3
    00000621: 	addsd	%xmm0, %xmm1
    00000625: 	movapd	%xmm0, %xmm4
    00000629: 	addsd	%xmm2, %xmm0
    0000062d: 	mulsd	%xmm3, %xmm4
    00000631: 	mulsd	%xmm3, %xmm1
    00000635: 	mulsd	%xmm3, %xmm0
    00000639: 	movq	DATAat0x36f60(%rip), %xmm3
    00000641: 	addsd	%xmm4, %xmm1
    00000645: 	addsd	%xmm0, %xmm1
    00000649: 	pxor	%xmm0, %xmm0
    0000064d: 	movapd	%xmm0, %xmm2
    00000651: 	subsd	%xmm1, %xmm2
    00000655: 	jmp	.Ltmp2164 # Offset: 1621
.Ltmp2169:
    0000065a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000661: 	movq	-0x18(%rax), %rdi
    00000665: 	addq	%rbp, %rdi
    00000668: 	movl	0x20(%rdi), %esi
    0000066b: 	orl	$0x1, %esi
    0000066e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1646
    00000673: 	movsd	0x8(%rsp), %xmm1
    00000679: 	movsd	0x10(%rsp), %xmm0
    0000067f: 	jmp	.Ltmp2170 # Offset: 1663
.Ltmp2161:
    00000684: 	pxor	%xmm0, %xmm0
    00000688: 	xorl	%eax, %eax
    0000068a: 	jmp	.Ltmp2171 # Offset: 1674
DWARF CFI Instructions:
    <empty>
End of Function "_Z31test_for_loop_partial4_replaceAIdEvPT_iPKc"

Binary Function "_Z19check_sum_overwriteIiEvT_PKc" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x31a20
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0x31a20
  Section     : .text
  Orc Section : .local.text._Z19check_sum_overwriteIiEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	subq	$0x8, %rsp
    0000000f: 	cvttsd2si	init_value(%rip), %ebp
    00000017: 	imull	$0x3d0900, %ebp, %ebp
    0000001d: 	cmpl	%edi, %ebp
    0000001f: 	jne	.Ltmp2172 # Offset: 31
    00000021: 	addq	$0x8, %rsp
    00000025: 	popq	%rbp
    00000026: 	popq	%r12
    00000028: 	popq	%r13
    0000002a: 	popq	%r14
    0000002c: 	retq # Offset: 44
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp2172:
    00000030: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000037: 	movq	%rsi, %r12
    0000003a: 	movl	%edi, %r14d
    0000003d: 	movl	$0x5, %edx
    00000042: 	leaq	DATAat0x35004(%rip), %rsi
    00000049: 	movq	%r13, %rdi
    0000004c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 76
    00000051: 	testq	%r12, %r12
    00000054: 	je	.Ltmp2173 # Offset: 84
    0000005a: 	movq	%r12, %rdi
    0000005d: 	callq	strlen@PLT # Offset: 93
    00000062: 	movq	%r12, %rsi
    00000065: 	movq	%r13, %rdi
    00000068: 	movq	%rax, %rdx
    0000006b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 107
.Ltmp2177:
    00000070: 	movl	$0xd, %edx
    00000075: 	leaq	DATAat0x3500a(%rip), %rsi
    0000007c: 	movq	%r13, %rdi
    0000007f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 127
    00000084: 	movl	%r14d, %esi
    00000087: 	movq	%r13, %rdi
    0000008a: 	callq	_ZNSolsEi@PLT # Offset: 138
    0000008f: 	movl	$0xb, %edx
    00000094: 	leaq	DATAat0x35018(%rip), %rsi
    0000009b: 	movq	%rax, %r12
    0000009e: 	movq	%rax, %rdi
    000000a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 161
    000000a6: 	movl	%ebp, %esi
    000000a8: 	movq	%r12, %rdi
    000000ab: 	callq	_ZNSolsEi@PLT # Offset: 171
    000000b0: 	movq	%rax, %rbp
    000000b3: 	movq	(%rax), %rax
    000000b6: 	movq	-0x18(%rax), %rax
    000000ba: 	movq	0xf0(%rbp,%rax), %r12
    000000c2: 	testq	%r12, %r12
    000000c5: 	je	.Ltmp2174 # Offset: 197
    000000c7: 	cmpb	$0x0, 0x38(%r12)
    000000cd: 	je	.Ltmp2175 # Offset: 205
    000000cf: 	movsbl	0x43(%r12), %esi
.Ltmp2176:
    000000d5: 	movq	%rbp, %rdi
    000000d8: 	callq	_ZNSo3putEc@PLT # Offset: 216
    000000dd: 	addq	$0x8, %rsp
    000000e1: 	popq	%rbp
    000000e2: 	movq	%rax, %rdi
    000000e5: 	popq	%r12
    000000e7: 	popq	%r13
    000000e9: 	popq	%r14
    000000eb: 	jmp	_ZNSo5flushEv@PLT # TAILCALL  # Offset: 235
.Ltmp2175:
    000000f0: 	movq	%r12, %rdi
    000000f3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 243
    000000f8: 	movq	(%r12), %rax
    000000fc: 	movl	$0xa, %esi
    00000101: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000108: 	movq	0x30(%rax), %rax
    0000010c: 	cmpq	%rdx, %rax
    0000010f: 	je	.Ltmp2176 # Offset: 271
    00000111: 	movq	%r12, %rdi
    00000114: 	callq	*%rax # Offset: 276
    00000116: 	movsbl	%al, %esi
    00000119: 	jmp	.Ltmp2176 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2173:
    00000120: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000127: 	movq	-0x18(%rax), %rdi
    0000012b: 	addq	%r13, %rdi
    0000012e: 	movl	0x20(%rdi), %esi
    00000131: 	orl	$0x1, %esi
    00000134: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 308
    00000139: 	jmp	.Ltmp2177 # Offset: 313
.Ltmp2174:
    0000013e: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 318
DWARF CFI Instructions:
    <empty>
End of Function "_Z19check_sum_overwriteIiEvT_PKc"

Binary Function "_Z19check_sum_overwriteIdEvT_PKc" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x31b70
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x31b70
  Section     : .text
  Orc Section : .local.text._Z19check_sum_overwriteIdEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movapd	%xmm0, %xmm4
    0000000a: 	movapd	%xmm0, %xmm1
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	subq	$0x18, %rsp
    00000016: 	movsd	DATAat0x36ed0(%rip), %xmm2
    0000001e: 	movq	DATAat0x36f60(%rip), %xmm3
    00000026: 	mulsd	init_value(%rip), %xmm2
    0000002e: 	andpd	%xmm3, %xmm4
    00000032: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000003a: 	subsd	%xmm2, %xmm1
    0000003e: 	jbe	.Ltmp2178 # Offset: 62
    00000040: 	divsd	%xmm0, %xmm1
.Ltmp2178:
    00000044: 	andpd	%xmm3, %xmm1
    00000048: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000050: 	comisd	%xmm1, %xmm3
    00000054: 	jbe	.Ltmp2179 # Offset: 84
    00000056: 	addq	$0x18, %rsp
    0000005a: 	popq	%rbp
    0000005b: 	popq	%r12
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp2179:
    00000060: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000067: 	movl	$0x5, %edx
    0000006c: 	movsd	%xmm2, (%rsp)
    00000071: 	leaq	DATAat0x35004(%rip), %rsi
    00000078: 	movq	%r12, %rdi
    0000007b: 	movsd	%xmm0, 0x8(%rsp)
    00000081: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 129
    00000086: 	testq	%rbp, %rbp
    00000089: 	movsd	(%rsp), %xmm2
    0000008e: 	movsd	0x8(%rsp), %xmm0
    00000094: 	je	.Ltmp2180 # Offset: 148
    0000009a: 	movq	%rbp, %rdi
    0000009d: 	movsd	%xmm0, 0x8(%rsp)
    000000a3: 	movsd	%xmm2, (%rsp)
    000000a8: 	callq	strlen@PLT # Offset: 168
    000000ad: 	movq	%rbp, %rsi
    000000b0: 	movq	%r12, %rdi
    000000b3: 	movq	%rax, %rdx
    000000b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 182
    000000bb: 	movsd	0x8(%rsp), %xmm0
    000000c1: 	movsd	(%rsp), %xmm2
.Ltmp2181:
    000000c6: 	movl	$0xd, %edx
    000000cb: 	leaq	DATAat0x3500a(%rip), %rsi
    000000d2: 	movq	%r12, %rdi
    000000d5: 	movsd	%xmm2, (%rsp)
    000000da: 	movsd	%xmm0, 0x8(%rsp)
    000000e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 224
    000000e5: 	movsd	0x8(%rsp), %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 238
    000000f3: 	movl	$0xb, %edx
    000000f8: 	leaq	DATAat0x35018(%rip), %rsi
    000000ff: 	movq	%rax, %rdi
    00000102: 	movq	%rax, %rbp
    00000105: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 261
    0000010a: 	movsd	(%rsp), %xmm2
    0000010f: 	movq	%rbp, %rdi
    00000112: 	movapd	%xmm2, %xmm0
    00000116: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 278
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbp
    00000120: 	movq	%rax, %rdi
    00000123: 	popq	%r12
    00000125: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2180:
    00000130: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000137: 	movq	-0x18(%rax), %rdi
    0000013b: 	addq	%r12, %rdi
    0000013e: 	movl	0x20(%rdi), %esi
    00000141: 	orl	$0x1, %esi
    00000144: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 324
    00000149: 	movsd	(%rsp), %xmm2
    0000014e: 	movsd	0x8(%rsp), %xmm0
    00000154: 	jmp	.Ltmp2181 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z19check_sum_overwriteIdEvT_PKc"

Binary Function "_Z18check_sum_replace2IiEvT_PKc" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x31cd0
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0x31cd0
  Section     : .text
  Orc Section : .local.text._Z18check_sum_replace2IiEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	subq	$0x8, %rsp
    0000000f: 	cvttsd2si	init_value(%rip), %ebp
    00000017: 	imull	$0x7a1200, %ebp, %ebp
    0000001d: 	cmpl	%edi, %ebp
    0000001f: 	jne	.Ltmp2182 # Offset: 31
    00000021: 	addq	$0x8, %rsp
    00000025: 	popq	%rbp
    00000026: 	popq	%r12
    00000028: 	popq	%r13
    0000002a: 	popq	%r14
    0000002c: 	retq # Offset: 44
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp2182:
    00000030: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000037: 	movq	%rsi, %r12
    0000003a: 	movl	%edi, %r14d
    0000003d: 	movl	$0x5, %edx
    00000042: 	leaq	DATAat0x35004(%rip), %rsi
    00000049: 	movq	%r13, %rdi
    0000004c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 76
    00000051: 	testq	%r12, %r12
    00000054: 	je	.Ltmp2183 # Offset: 84
    0000005a: 	movq	%r12, %rdi
    0000005d: 	callq	strlen@PLT # Offset: 93
    00000062: 	movq	%r12, %rsi
    00000065: 	movq	%r13, %rdi
    00000068: 	movq	%rax, %rdx
    0000006b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 107
.Ltmp2187:
    00000070: 	movl	$0xd, %edx
    00000075: 	leaq	DATAat0x3500a(%rip), %rsi
    0000007c: 	movq	%r13, %rdi
    0000007f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 127
    00000084: 	movl	%r14d, %esi
    00000087: 	movq	%r13, %rdi
    0000008a: 	callq	_ZNSolsEi@PLT # Offset: 138
    0000008f: 	movl	$0xb, %edx
    00000094: 	leaq	DATAat0x35018(%rip), %rsi
    0000009b: 	movq	%rax, %r12
    0000009e: 	movq	%rax, %rdi
    000000a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 161
    000000a6: 	movl	%ebp, %esi
    000000a8: 	movq	%r12, %rdi
    000000ab: 	callq	_ZNSolsEi@PLT # Offset: 171
    000000b0: 	movq	%rax, %rbp
    000000b3: 	movq	(%rax), %rax
    000000b6: 	movq	-0x18(%rax), %rax
    000000ba: 	movq	0xf0(%rbp,%rax), %r12
    000000c2: 	testq	%r12, %r12
    000000c5: 	je	.Ltmp2184 # Offset: 197
    000000c7: 	cmpb	$0x0, 0x38(%r12)
    000000cd: 	je	.Ltmp2185 # Offset: 205
    000000cf: 	movsbl	0x43(%r12), %esi
.Ltmp2186:
    000000d5: 	movq	%rbp, %rdi
    000000d8: 	callq	_ZNSo3putEc@PLT # Offset: 216
    000000dd: 	addq	$0x8, %rsp
    000000e1: 	popq	%rbp
    000000e2: 	movq	%rax, %rdi
    000000e5: 	popq	%r12
    000000e7: 	popq	%r13
    000000e9: 	popq	%r14
    000000eb: 	jmp	_ZNSo5flushEv@PLT # TAILCALL  # Offset: 235
.Ltmp2185:
    000000f0: 	movq	%r12, %rdi
    000000f3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 243
    000000f8: 	movq	(%r12), %rax
    000000fc: 	movl	$0xa, %esi
    00000101: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000108: 	movq	0x30(%rax), %rax
    0000010c: 	cmpq	%rdx, %rax
    0000010f: 	je	.Ltmp2186 # Offset: 271
    00000111: 	movq	%r12, %rdi
    00000114: 	callq	*%rax # Offset: 276
    00000116: 	movsbl	%al, %esi
    00000119: 	jmp	.Ltmp2186 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2183:
    00000120: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000127: 	movq	-0x18(%rax), %rdi
    0000012b: 	addq	%r13, %rdi
    0000012e: 	movl	0x20(%rdi), %esi
    00000131: 	orl	$0x1, %esi
    00000134: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 308
    00000139: 	jmp	.Ltmp2187 # Offset: 313
.Ltmp2184:
    0000013e: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 318
DWARF CFI Instructions:
    <empty>
End of Function "_Z18check_sum_replace2IiEvT_PKc"

Binary Function "_Z30test_for_loop_blocked_replace2IiEvPT_iPKc" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x31e20
  Size        : 0x289
  MaxSize     : 0x290
  Offset      : 0x31e20
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace2IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp2188 # Offset: 46
    00000034: 	leal	-0x201(%rbx), %eax
    0000003a: 	leal	-0x200(%rbx), %r14d
    00000041: 	xorl	%r12d, %r12d
    00000044: 	cvttsd2si	init_value(%rip), %r15d
    0000004d: 	andl	$0xfffffe00, %eax
    00000052: 	addl	$0x200, %eax
    00000057: 	movl	%eax, 0x8(%rsp)
    0000005b: 	leaq	0x800(%r13), %rax
    00000062: 	movq	%rax, (%rsp)
.Ltmp2195:
    00000066: 	xorl	%r8d, %r8d
    00000069: 	testl	%r14d, %r14d
    0000006c: 	jle	.Ltmp2189 # Offset: 108
    0000006e: 	movd	%r15d, %xmm2
    00000073: 	movq	(%rsp), %rsi
    00000077: 	movq	%r13, %r8
    0000007a: 	xorl	%r9d, %r9d
    0000007d: 	pshufd	$0x0, %xmm2, %xmm0
    00000082: 	xorl	%eax, %eax
.Ltmp2191:
    00000084: 	leaq	0x8(%r8), %rdi
    00000088: 	movq	%r8, %rcx
    0000008b: 	movq	$0x0, (%r8)
    00000092: 	addq	$0x200, %r9
    00000099: 	andq	$-0x8, %rdi
    0000009d: 	movq	%r8, %rdx
    000000a0: 	movq	$0x0, 0x7f8(%r8)
    000000ab: 	subq	%rdi, %rcx
    000000ae: 	addl	$0x800, %ecx
    000000b4: 	shrl	$0x3, %ecx
    000000b7: 	rep		stosq	%rax, %es:(%rdi)
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2190:
    000000c0: 	movups	%xmm0, (%rdx)
    000000c3: 	addq	$0x10, %rdx
    000000c7: 	cmpq	%rsi, %rdx
    000000ca: 	jne	.Ltmp2190 # Offset: 202
    000000cc: 	addq	$0x800, %r8
    000000d3: 	leaq	0x800(%rdx), %rsi
    000000da: 	cmpl	%r9d, %r14d
    000000dd: 	jg	.Ltmp2191 # Offset: 221
    000000df: 	movl	0x8(%rsp), %r8d
.Ltmp2189:
    000000e4: 	cmpl	%r8d, %ebx
    000000e7: 	jle	.Ltmp2192 # Offset: 231
    000000ed: 	movl	%ebx, %r9d
    000000f0: 	movslq	%r8d, %r10
    000000f3: 	xorl	%esi, %esi
    000000f5: 	movl	%r8d, 0x18(%rsp)
    000000fa: 	subl	%r8d, %r9d
    000000fd: 	leaq	(%r13,%r10,4), %rcx
    00000102: 	movq	%r10, 0x10(%rsp)
    00000107: 	leal	-0x1(%r9), %eax
    0000010b: 	movq	%rcx, %rdi
    0000010e: 	movl	%r9d, 0x1c(%rsp)
    00000113: 	leaq	0x4(,%rax,4), %rdx
    0000011b: 	movl	%eax, 0xc(%rsp)
    0000011f: 	callq	memset@PLT # Offset: 287
    00000124: 	movl	0xc(%rsp), %r11d
    00000129: 	movq	0x10(%rsp), %r10
    0000012e: 	movl	0x18(%rsp), %r8d
    00000133: 	cmpl	$0x2, %r11d
    00000137: 	jbe	.Ltmp2193 # Offset: 311
    00000139: 	movl	0x1c(%rsp), %r9d
    0000013e: 	movd	%r15d, %xmm3
    00000143: 	pshufd	$0x0, %xmm3, %xmm0
    00000148: 	movl	%r9d, %edx
    0000014b: 	shrl	$0x2, %edx
    0000014e: 	subl	$0x1, %edx
    00000151: 	shlq	$0x4, %rdx
    00000155: 	leaq	0x10(%rax,%rdx), %rdx
.Ltmp2194:
    0000015a: 	movups	%xmm0, (%rax)
    0000015d: 	addq	$0x10, %rax
    00000161: 	cmpq	%rdx, %rax
    00000164: 	jne	.Ltmp2194 # Offset: 356
    00000166: 	movl	%r9d, %eax
    00000169: 	andl	$-0x4, %eax
    0000016c: 	addl	%eax, %r8d
    0000016f: 	cmpl	%eax, %r9d
    00000172: 	je	.Ltmp2192 # Offset: 370
    00000174: 	movslq	%r8d, %r10
.Ltmp2193:
    00000177: 	leal	0x1(%r8), %edx
    0000017b: 	movl	%r15d, (%r13,%r10,4)
    00000180: 	leaq	(,%r10,4), %rax
    00000188: 	cmpl	%edx, %ebx
    0000018a: 	jle	.Ltmp2192 # Offset: 394
    0000018c: 	addl	$0x2, %r8d
    00000190: 	movl	%r15d, 0x4(%r13,%rax)
    00000195: 	cmpl	%r8d, %ebx
    00000198: 	jle	.Ltmp2192 # Offset: 408
    0000019a: 	movl	%r15d, 0x8(%r13,%rax)
.Ltmp2192:
    0000019f: 	addl	$0x1, %r12d
    000001a3: 	cmpl	%r12d, iterations(%rip)
    000001aa: 	jg	.Ltmp2195 # Offset: 426
.Ltmp2188:
    000001b0: 	callq	clock@PLT # Offset: 432
    000001b5: 	pxor	%xmm0, %xmm0
    000001b9: 	movq	%rbp, %rdi
    000001bc: 	movq	%rax, end_time(%rip)
    000001c3: 	subq	start_time(%rip), %rax
    000001ca: 	cvtsi2sd	%rax, %xmm0
    000001cf: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001d7: 	callq	_Z13record_resultdPKc # Offset: 471
    000001dc: 	testl	%ebx, %ebx
    000001de: 	jle	.Ltmp2196 # Offset: 478
    000001e4: 	leal	-0x1(%rbx), %eax
    000001e7: 	cmpl	$0x2, %eax
    000001ea: 	jbe	.Ltmp2197 # Offset: 490
    000001f0: 	movl	%ebx, %edx
    000001f2: 	movq	%r13, %rax
    000001f5: 	pxor	%xmm0, %xmm0
    000001f9: 	shrl	$0x2, %edx
    000001fc: 	subl	$0x1, %edx
    000001ff: 	shlq	$0x4, %rdx
    00000203: 	leaq	0x10(%r13,%rdx), %rdx
.Ltmp2198:
    00000208: 	movdqu	(%rax), %xmm4
    0000020c: 	addq	$0x10, %rax
    00000210: 	paddd	%xmm4, %xmm0
    00000214: 	cmpq	%rax, %rdx
    00000217: 	jne	.Ltmp2198 # Offset: 535
    00000219: 	movdqa	%xmm0, %xmm1
    0000021d: 	movl	%ebx, %eax
    0000021f: 	psrldq	$0x8, %xmm1
    00000224: 	andl	$-0x4, %eax
    00000227: 	paddd	%xmm1, %xmm0
    0000022b: 	movdqa	%xmm0, %xmm1
    0000022f: 	psrldq	$0x4, %xmm1
    00000234: 	paddd	%xmm1, %xmm0
    00000238: 	movd	%xmm0, %edi
    0000023c: 	testb	$0x3, %bl
    0000023f: 	je	.Ltmp2199 # Offset: 575
.Ltmp2200:
    00000241: 	movslq	%eax, %rcx
    00000244: 	leaq	(,%rcx,4), %rdx
    0000024c: 	addl	(%r13,%rcx,4), %edi
    00000251: 	leal	0x1(%rax), %ecx
    00000254: 	cmpl	%ecx, %ebx
    00000256: 	jle	.Ltmp2199 # Offset: 598
    00000258: 	addl	$0x2, %eax
    0000025b: 	addl	0x4(%r13,%rdx), %edi
    00000260: 	cmpl	%eax, %ebx
    00000262: 	jle	.Ltmp2199 # Offset: 610
    00000264: 	addl	0x8(%r13,%rdx), %edi
.Ltmp2199:
    00000269: 	addq	$0x28, %rsp
    0000026d: 	movq	%rbp, %rsi
    00000270: 	popq	%rbx
    00000271: 	popq	%rbp
    00000272: 	popq	%r12
    00000274: 	popq	%r13
    00000276: 	popq	%r14
    00000278: 	popq	%r15
    0000027a: 	jmp	_Z18check_sum_replace2IiEvT_PKc # TAILCALL  # Offset: 634
.Ltmp2196:
    0000027f: 	xorl	%edi, %edi
    00000281: 	jmp	.Ltmp2199 # Offset: 641
.Ltmp2197:
    00000283: 	xorl	%edi, %edi
    00000285: 	xorl	%eax, %eax
    00000287: 	jmp	.Ltmp2200 # Offset: 647
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace2IiEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace3IiEvPT_iPKc" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x320b0
  Size        : 0x350
  MaxSize     : 0x350
  Offset      : 0x320b0
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace3IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp2201 # Offset: 46
    00000034: 	cvttsd2si	init_value(%rip), %r10d
    0000003d: 	movq	%r15, 0x8(%rsp)
    00000042: 	xorl	%r11d, %r11d
    00000045: 	xorl	%r14d, %r14d
    00000048: 	leal	-0x201(%rbx), %eax
    0000004e: 	movdqa	DATAat0x36fa0(%rip), %xmm1
    00000056: 	leal	-0x200(%rbx), %r13d
    0000005d: 	movl	%ebx, %r15d
    00000060: 	andl	$0xfffffe00, %eax
    00000065: 	addl	$0x200, %eax
    0000006a: 	movl	%eax, 0x10(%rsp)
    0000006e: 	movd	%r10d, %xmm2
    00000073: 	pshufd	$0x0, %xmm2, %xmm0
.Ltmp2213:
    00000078: 	movq	%rbp, %rsi
    0000007b: 	leaq	0x800(%rbp), %rdx
    00000082: 	xorl	%r9d, %r9d
    00000085: 	xorl	%r12d, %r12d
    00000088: 	testl	%r13d, %r13d
    0000008b: 	jle	.Ltmp2202 # Offset: 139
.Ltmp2205:
    0000008d: 	leaq	0x8(%rsi), %rdi
    00000091: 	movq	%rsi, %rcx
    00000094: 	movq	%r14, %rax
    00000097: 	movq	$0x0, (%rsi)
    0000009e: 	andq	$-0x8, %rdi
    000000a2: 	addq	$0x200, %r9
    000000a9: 	movq	$0x0, 0x7f8(%rsi)
    000000b4: 	subq	%rdi, %rcx
    000000b7: 	addl	$0x800, %ecx
    000000bd: 	shrl	$0x3, %ecx
    000000c0: 	rep		stosq	%rax, %es:(%rdi)
    000000c3: 	movq	%rsi, %rax
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2203:
    000000d0: 	movups	%xmm1, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rax, %rdx
    000000da: 	jne	.Ltmp2203 # Offset: 218
    000000dc: 	movq	%rsi, %rax
    000000df: 	nop # Size: 1
.Ltmp2204:
    000000e0: 	movups	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rax, %rdx
    000000ea: 	jne	.Ltmp2204 # Offset: 234
    000000ec: 	addq	$0x800, %rsi
    000000f3: 	addq	$0x800, %rdx
    000000fa: 	cmpl	%r9d, %r13d
    000000fd: 	jg	.Ltmp2205 # Offset: 253
    000000ff: 	movl	0x10(%rsp), %r12d
.Ltmp2202:
    00000104: 	cmpl	%r12d, %r15d
    00000107: 	jle	.Ltmp2206 # Offset: 263
    0000010d: 	movl	%r15d, %ebx
    00000110: 	movslq	%r12d, %r9
    00000113: 	xorl	%esi, %esi
    00000115: 	movl	%r11d, 0x3c(%rsp)
    0000011a: 	subl	%r12d, %ebx
    0000011d: 	leaq	(,%r9,4), %rcx
    00000125: 	movl	%r10d, 0x38(%rsp)
    0000012a: 	leal	-0x1(%rbx), %eax
    0000012d: 	leaq	(%rbp,%rcx), %rdi
    00000132: 	movq	%r9, 0x30(%rsp)
    00000137: 	leaq	0x4(,%rax,4), %rdx
    0000013f: 	movq	%rcx, 0x18(%rsp)
    00000144: 	movaps	%xmm0, 0x20(%rsp)
    00000149: 	movl	%eax, 0x14(%rsp)
    0000014d: 	callq	memset@PLT # Offset: 333
    00000152: 	movl	0x14(%rsp), %r8d
    00000157: 	movq	0x18(%rsp), %rcx
    0000015c: 	movq	0x30(%rsp), %r9
    00000161: 	movdqa	DATAat0x36fa0(%rip), %xmm1
    00000169: 	movq	%rax, %rdi
    0000016c: 	cmpl	$0x2, %r8d
    00000170: 	movdqa	0x20(%rsp), %xmm0
    00000176: 	movl	0x38(%rsp), %r10d
    0000017b: 	movl	0x3c(%rsp), %r11d
    00000180: 	jbe	.Ltmp2207 # Offset: 384
    00000186: 	movl	%ebx, %edx
    00000188: 	shrl	$0x2, %edx
    0000018b: 	leal	-0x1(%rdx), %ecx
    0000018e: 	leaq	0x10(%rax), %rdx
    00000192: 	shlq	$0x4, %rcx
    00000196: 	addq	%rdx, %rcx
.Ltmp2208:
    00000199: 	movups	%xmm1, (%rax)
    0000019c: 	addq	$0x10, %rax
    000001a0: 	cmpq	%rax, %rcx
    000001a3: 	jne	.Ltmp2208 # Offset: 419
    000001a5: 	movl	%ebx, %ecx
    000001a7: 	andl	$-0x4, %ecx
    000001aa: 	leal	(%rcx,%r12), %eax
    000001ae: 	cmpl	%ecx, %ebx
    000001b0: 	je	.Ltmp2209 # Offset: 432
    000001b2: 	movslq	%eax, %rsi
    000001b5: 	addl	$0x1, %eax
    000001b8: 	movl	$0x1, (%rbp,%rsi,4)
    000001c0: 	leaq	(,%rsi,4), %rcx
    000001c8: 	cmpl	%eax, %r15d
    000001cb: 	jle	.Ltmp2209 # Offset: 459
.Ltmp2218:
    000001cd: 	addl	$0x1, %eax
    000001d0: 	movl	$0x1, 0x4(%rbp,%rcx)
    000001d8: 	cmpl	%eax, %r15d
    000001db: 	jle	.Ltmp2210 # Offset: 475
    000001dd: 	movl	$0x1, 0x8(%rbp,%rcx)
.Ltmp2210:
    000001e5: 	leaq	0x10(%rdi), %rdx
    000001e9: 	cmpl	$0x2, %r8d
    000001ed: 	jbe	.Ltmp2211 # Offset: 493
.Ltmp2209:
    000001ef: 	movl	%ebx, %eax
    000001f1: 	shrl	$0x2, %eax
    000001f4: 	subl	$0x1, %eax
    000001f7: 	shlq	$0x4, %rax
    000001fb: 	addq	%rdx, %rax
.Ltmp2212:
    000001fe: 	movups	%xmm0, (%rdi)
    00000201: 	addq	$0x10, %rdi
    00000205: 	cmpq	%rdi, %rax
    00000208: 	jne	.Ltmp2212 # Offset: 520
    0000020a: 	movl	%ebx, %eax
    0000020c: 	andl	$-0x4, %eax
    0000020f: 	addl	%eax, %r12d
    00000212: 	cmpl	%eax, %ebx
    00000214: 	je	.Ltmp2206 # Offset: 532
    00000216: 	movslq	%r12d, %r9
.Ltmp2211:
    00000219: 	leal	0x1(%r12), %edx
.Ltmp2219:
    0000021e: 	movl	%r10d, (%rbp,%r9,4)
    00000223: 	leaq	(,%r9,4), %rax
    0000022b: 	cmpl	%edx, %r15d
    0000022e: 	jle	.Ltmp2206 # Offset: 558
    00000230: 	addl	$0x2, %r12d
    00000234: 	movl	%r10d, 0x4(%rbp,%rax)
    00000239: 	cmpl	%r12d, %r15d
    0000023c: 	jle	.Ltmp2206 # Offset: 572
    0000023e: 	movl	%r10d, 0x8(%rbp,%rax)
.Ltmp2206:
    00000243: 	addl	$0x1, %r11d
    00000247: 	cmpl	%r11d, iterations(%rip)
    0000024e: 	jg	.Ltmp2213 # Offset: 590
    00000254: 	movl	%r15d, %ebx
    00000257: 	movq	0x8(%rsp), %r15
.Ltmp2201:
    0000025c: 	callq	clock@PLT # Offset: 604
    00000261: 	pxor	%xmm0, %xmm0
    00000265: 	movq	%r15, %rdi
    00000268: 	movq	%rax, end_time(%rip)
    0000026f: 	subq	start_time(%rip), %rax
    00000276: 	cvtsi2sd	%rax, %xmm0
    0000027b: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000283: 	callq	_Z13record_resultdPKc # Offset: 643
    00000288: 	testl	%ebx, %ebx
    0000028a: 	jle	.Ltmp2214 # Offset: 650
    00000290: 	leal	-0x1(%rbx), %eax
    00000293: 	cmpl	$0x2, %eax
    00000296: 	jbe	.Ltmp2215 # Offset: 662
    0000029c: 	movl	%ebx, %edx
    0000029e: 	movq	%rbp, %rax
    000002a1: 	pxor	%xmm0, %xmm0
    000002a5: 	shrl	$0x2, %edx
    000002a8: 	subl	$0x1, %edx
    000002ab: 	shlq	$0x4, %rdx
    000002af: 	leaq	0x10(%rbp,%rdx), %rdx
.Ltmp2216:
    000002b4: 	movdqu	(%rax), %xmm3
    000002b8: 	addq	$0x10, %rax
    000002bc: 	paddd	%xmm3, %xmm0
    000002c0: 	cmpq	%rdx, %rax
    000002c3: 	jne	.Ltmp2216 # Offset: 707
    000002c5: 	movdqa	%xmm0, %xmm1
    000002c9: 	movl	%ebx, %eax
    000002cb: 	psrldq	$0x8, %xmm1
    000002d0: 	andl	$-0x4, %eax
    000002d3: 	paddd	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x4, %xmm1
    000002e0: 	paddd	%xmm1, %xmm0
    000002e4: 	movd	%xmm0, %edi
    000002e8: 	testb	$0x3, %bl
    000002eb: 	je	.Ltmp2217 # Offset: 747
.Ltmp2220:
    000002ed: 	movslq	%eax, %rcx
    000002f0: 	leaq	(,%rcx,4), %rdx
    000002f8: 	addl	(%rbp,%rcx,4), %edi
    000002fc: 	leal	0x1(%rax), %ecx
    000002ff: 	cmpl	%ecx, %ebx
    00000301: 	jle	.Ltmp2217 # Offset: 769
    00000303: 	addl	$0x2, %eax
    00000306: 	addl	0x4(%rbp,%rdx), %edi
    0000030a: 	cmpl	%eax, %ebx
    0000030c: 	jle	.Ltmp2217 # Offset: 780
    0000030e: 	addl	0x8(%rbp,%rdx), %edi
.Ltmp2217:
    00000312: 	addq	$0x48, %rsp
    00000316: 	movq	%r15, %rsi
    00000319: 	popq	%rbx
    0000031a: 	popq	%rbp
    0000031b: 	popq	%r12
    0000031d: 	popq	%r13
    0000031f: 	popq	%r14
    00000321: 	popq	%r15
    00000323: 	jmp	_Z18check_sum_replace2IiEvT_PKc # TAILCALL  # Offset: 803
.Ltmp2207:
    00000328: 	movl	$0x1, (%rbp,%r9,4)
    00000331: 	leal	0x1(%r12), %edx
    00000336: 	movl	%edx, %eax
    00000338: 	cmpl	%edx, %r15d
    0000033b: 	jg	.Ltmp2218 # Offset: 827
    00000341: 	jmp	.Ltmp2219 # Offset: 833
.Ltmp2214:
    00000346: 	xorl	%edi, %edi
    00000348: 	jmp	.Ltmp2217 # Offset: 840
.Ltmp2215:
    0000034a: 	xorl	%edi, %edi
    0000034c: 	xorl	%eax, %eax
    0000034e: 	jmp	.Ltmp2220 # Offset: 846
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace3IiEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace4IiEvPT_iPKc" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x32400
  Size        : 0x3e0
  MaxSize     : 0x3e0
  Offset      : 0x32400
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp2221 # Offset: 46
    00000034: 	leal	-0x201(%rbp), %eax
    0000003a: 	xorl	%r10d, %r10d
    0000003d: 	movdqa	DATAat0x36fc0(%rip), %xmm2
    00000045: 	movdqa	DATAat0x36fd0(%rip), %xmm1
    0000004d: 	andl	$0xfffffe00, %eax
    00000052: 	leal	-0x200(%rbp), %r13d
    00000059: 	movl	%r10d, %r14d
    0000005c: 	cvttsd2si	init_value(%rip), %r9d
    00000065: 	addl	$0x200, %eax
    0000006a: 	movl	%eax, (%rsp)
    0000006d: 	movl	%r9d, %r12d
.Ltmp2238:
    00000070: 	xorl	%ecx, %ecx
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp2222 # Offset: 117
    0000007b: 	movd	%r12d, %xmm3
    00000080: 	movq	%rbx, %r8
    00000083: 	xorl	%r9d, %r9d
    00000086: 	xorl	%eax, %eax
    00000088: 	leaq	0x800(%rbx), %rsi
    0000008f: 	pshufd	$0x0, %xmm3, %xmm0
.Ltmp2226:
    00000094: 	leaq	0x8(%r8), %rdi
    00000098: 	movq	%r8, %rcx
    0000009b: 	movq	$0x0, (%r8)
    000000a2: 	addq	$0x200, %r9
    000000a9: 	andq	$-0x8, %rdi
    000000ad: 	movq	%r8, %rdx
    000000b0: 	movq	$0x0, 0x7f8(%r8)
    000000bb: 	subq	%rdi, %rcx
    000000be: 	addl	$0x800, %ecx
    000000c4: 	shrl	$0x3, %ecx
    000000c7: 	rep		stosq	%rax, %es:(%rdi)
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2223:
    000000d0: 	movups	%xmm2, (%rdx)
    000000d3: 	addq	$0x10, %rdx
    000000d7: 	cmpq	%rsi, %rdx
    000000da: 	jne	.Ltmp2223 # Offset: 218
    000000dc: 	movq	%r8, %rdx
    000000df: 	nop # Size: 1
.Ltmp2224:
    000000e0: 	movups	%xmm1, (%rdx)
    000000e3: 	addq	$0x10, %rdx
    000000e7: 	cmpq	%rsi, %rdx
    000000ea: 	jne	.Ltmp2224 # Offset: 234
    000000ec: 	movq	%r8, %rdx
    000000ef: 	nop # Size: 1
.Ltmp2225:
    000000f0: 	movups	%xmm0, (%rdx)
    000000f3: 	addq	$0x10, %rdx
    000000f7: 	cmpq	%rsi, %rdx
    000000fa: 	jne	.Ltmp2225 # Offset: 250
    000000fc: 	addq	$0x800, %r8
    00000103: 	leaq	0x800(%rdx), %rsi
    0000010a: 	cmpl	%r9d, %r13d
    0000010d: 	jg	.Ltmp2226 # Offset: 269
    0000010f: 	movl	(%rsp), %ecx
.Ltmp2222:
    00000112: 	cmpl	%ecx, %ebp
    00000114: 	jle	.Ltmp2227 # Offset: 276
    0000011a: 	movl	%ebp, %r8d
    0000011d: 	movslq	%ecx, %r9
    00000120: 	xorl	%esi, %esi
    00000122: 	movl	%ecx, 0x18(%rsp)
    00000126: 	subl	%ecx, %r8d
    00000129: 	leaq	(,%r9,4), %r10
    00000131: 	movq	%r9, 0x10(%rsp)
    00000136: 	leal	-0x1(%r8), %eax
    0000013a: 	leaq	(%rbx,%r10), %rdi
    0000013e: 	movl	%r8d, 0x1c(%rsp)
    00000143: 	leaq	0x4(,%rax,4), %rdx
    0000014b: 	movq	%r10, 0x8(%rsp)
    00000150: 	movl	%eax, 0x4(%rsp)
    00000154: 	callq	memset@PLT # Offset: 340
    00000159: 	movl	0x4(%rsp), %r11d
    0000015e: 	movq	0x8(%rsp), %r10
    00000163: 	movq	0x10(%rsp), %r9
    00000168: 	movl	0x18(%rsp), %ecx
    0000016c: 	movq	%rax, %rdi
    0000016f: 	cmpl	$0x2, %r11d
    00000173: 	movl	0x1c(%rsp), %r8d
    00000178: 	movdqa	DATAat0x36fc0(%rip), %xmm2
    00000180: 	movdqa	DATAat0x36fd0(%rip), %xmm1
    00000188: 	jbe	.Ltmp2228 # Offset: 392
    0000018e: 	movl	%r8d, %edx
    00000191: 	leaq	0x10(%rax), %rsi
    00000195: 	shrl	$0x2, %edx
    00000198: 	subl	$0x1, %edx
    0000019b: 	shlq	$0x4, %rdx
    0000019f: 	addq	%rsi, %rdx
.Ltmp2229:
    000001a2: 	movups	%xmm2, (%rax)
    000001a5: 	addq	$0x10, %rax
    000001a9: 	cmpq	%rax, %rdx
    000001ac: 	jne	.Ltmp2229 # Offset: 428
    000001ae: 	movl	%r8d, %edx
    000001b1: 	andl	$-0x4, %edx
    000001b4: 	leal	(%rdx,%rcx), %eax
    000001b7: 	cmpl	%edx, %r8d
    000001ba: 	je	.Ltmp2230 # Offset: 442
    000001bc: 	movslq	%eax, %rdx
    000001bf: 	addl	$0x1, %eax
    000001c2: 	movl	$0xb, (%rbx,%rdx,4)
    000001c9: 	leaq	(,%rdx,4), %r10
    000001d1: 	cmpl	%eax, %ebp
    000001d3: 	jle	.Ltmp2230 # Offset: 467
.Ltmp2243:
    000001d5: 	movl	$0xb, 0x4(%rbx,%r10)
    000001de: 	addl	$0x1, %eax
    000001e1: 	cmpl	%ebp, %eax
    000001e3: 	jge	.Ltmp2231 # Offset: 483
    000001e5: 	movl	$0xb, 0x8(%rbx,%r10)
.Ltmp2231:
    000001ee: 	leal	0x1(%rcx), %edx
    000001f1: 	cmpl	$0x2, %r11d
    000001f5: 	jbe	.Ltmp2232 # Offset: 501
    000001fb: 	leaq	0x10(%rdi), %rsi
.Ltmp2230:
    000001ff: 	movl	%r8d, %edx
    00000202: 	movq	%rdi, %rax
    00000205: 	shrl	$0x2, %edx
    00000208: 	subl	$0x1, %edx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	addq	%rsi, %rdx
.Ltmp2233:
    00000212: 	movups	%xmm1, (%rax)
    00000215: 	addq	$0x10, %rax
    00000219: 	cmpq	%rdx, %rax
    0000021c: 	jne	.Ltmp2233 # Offset: 540
    0000021e: 	movl	%r8d, %edx
    00000221: 	andl	$-0x4, %edx
    00000224: 	leal	(%rdx,%rcx), %eax
    00000227: 	cmpl	%edx, %r8d
    0000022a: 	je	.Ltmp2234 # Offset: 554
    0000022c: 	movslq	%eax, %rdx
    0000022f: 	addl	$0x1, %eax
    00000232: 	movl	$0x63, (%rbx,%rdx,4)
    00000239: 	leaq	(,%rdx,4), %r10
    00000241: 	cmpl	%ebp, %eax
    00000243: 	jge	.Ltmp2234 # Offset: 579
.Ltmp2244:
    00000245: 	movl	$0x63, 0x4(%rbx,%r10)
    0000024e: 	addl	$0x1, %eax
    00000251: 	cmpl	%eax, %ebp
    00000253: 	jle	.Ltmp2235 # Offset: 595
    00000255: 	movl	$0x63, 0x8(%rbx,%r10)
.Ltmp2235:
    0000025e: 	leaq	0x10(%rdi), %rsi
    00000262: 	cmpl	$0x2, %r11d
    00000266: 	jbe	.Ltmp2236 # Offset: 614
.Ltmp2234:
    00000268: 	movl	%r8d, %edx
    0000026b: 	movd	%r12d, %xmm4
    00000270: 	movq	%rdi, %rax
    00000273: 	shrl	$0x2, %edx
    00000276: 	pshufd	$0x0, %xmm4, %xmm0
    0000027b: 	subl	$0x1, %edx
    0000027e: 	shlq	$0x4, %rdx
    00000282: 	addq	%rsi, %rdx
.Ltmp2237:
    00000285: 	movups	%xmm0, (%rax)
    00000288: 	addq	$0x10, %rax
    0000028c: 	cmpq	%rax, %rdx
    0000028f: 	jne	.Ltmp2237 # Offset: 655
    00000291: 	movl	%r8d, %eax
    00000294: 	andl	$-0x4, %eax
    00000297: 	addl	%eax, %ecx
    00000299: 	cmpl	%eax, %r8d
    0000029c: 	je	.Ltmp2227 # Offset: 668
    0000029e: 	movslq	%ecx, %r9
.Ltmp2236:
    000002a1: 	leal	0x1(%rcx), %edx
.Ltmp2245:
    000002a4: 	movl	%r12d, (%rbx,%r9,4)
    000002a8: 	leaq	(,%r9,4), %rax
    000002b0: 	cmpl	%edx, %ebp
    000002b2: 	jle	.Ltmp2227 # Offset: 690
    000002b4: 	addl	$0x2, %ecx
    000002b7: 	movl	%r12d, 0x4(%rbx,%rax)
    000002bc: 	cmpl	%ecx, %ebp
    000002be: 	jle	.Ltmp2227 # Offset: 702
    000002c0: 	movl	%r12d, 0x8(%rbx,%rax)
.Ltmp2227:
    000002c5: 	addl	$0x1, %r14d
    000002c9: 	cmpl	%r14d, iterations(%rip)
    000002d0: 	jg	.Ltmp2238 # Offset: 720
.Ltmp2221:
    000002d6: 	callq	clock@PLT # Offset: 726
    000002db: 	pxor	%xmm0, %xmm0
    000002df: 	movq	%r15, %rdi
    000002e2: 	movq	%rax, end_time(%rip)
    000002e9: 	subq	start_time(%rip), %rax
    000002f0: 	cvtsi2sd	%rax, %xmm0
    000002f5: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002fd: 	callq	_Z13record_resultdPKc # Offset: 765
    00000302: 	testl	%ebp, %ebp
    00000304: 	jle	.Ltmp2239 # Offset: 772
    0000030a: 	leal	-0x1(%rbp), %eax
    0000030d: 	cmpl	$0x2, %eax
    00000310: 	jbe	.Ltmp2240 # Offset: 784
    00000316: 	movl	%ebp, %edx
    00000318: 	movq	%rbx, %rax
    0000031b: 	pxor	%xmm0, %xmm0
    0000031f: 	shrl	$0x2, %edx
    00000322: 	subl	$0x1, %edx
    00000325: 	shlq	$0x4, %rdx
    00000329: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp2241:
    0000032e: 	movdqu	(%rax), %xmm5
    00000332: 	addq	$0x10, %rax
    00000336: 	paddd	%xmm5, %xmm0
    0000033a: 	cmpq	%rdx, %rax
    0000033d: 	jne	.Ltmp2241 # Offset: 829
    0000033f: 	movdqa	%xmm0, %xmm1
    00000343: 	movl	%ebp, %eax
    00000345: 	psrldq	$0x8, %xmm1
    0000034a: 	andl	$-0x4, %eax
    0000034d: 	paddd	%xmm1, %xmm0
    00000351: 	movdqa	%xmm0, %xmm1
    00000355: 	psrldq	$0x4, %xmm1
    0000035a: 	paddd	%xmm1, %xmm0
    0000035e: 	movd	%xmm0, %edi
    00000362: 	testb	$0x3, %bpl
    00000366: 	je	.Ltmp2242 # Offset: 870
.Ltmp2246:
    00000368: 	movslq	%eax, %rcx
    0000036b: 	leaq	(,%rcx,4), %rdx
    00000373: 	addl	(%rbx,%rcx,4), %edi
    00000376: 	leal	0x1(%rax), %ecx
    00000379: 	cmpl	%ecx, %ebp
    0000037b: 	jle	.Ltmp2242 # Offset: 891
    0000037d: 	addl	$0x2, %eax
    00000380: 	addl	0x4(%rbx,%rdx), %edi
    00000384: 	cmpl	%eax, %ebp
    00000386: 	jle	.Ltmp2242 # Offset: 902
    00000388: 	addl	0x8(%rbx,%rdx), %edi
.Ltmp2242:
    0000038c: 	addq	$0x28, %rsp
    00000390: 	movq	%r15, %rsi
    00000393: 	popq	%rbx
    00000394: 	popq	%rbp
    00000395: 	popq	%r12
    00000397: 	popq	%r13
    00000399: 	popq	%r14
    0000039b: 	popq	%r15
    0000039d: 	jmp	_Z18check_sum_replace2IiEvT_PKc # TAILCALL  # Offset: 925
.Ltmp2228:
    000003a2: 	leal	0x1(%rcx), %edx
    000003a5: 	movl	$0xb, (%rbx,%r9,4)
    000003ad: 	movl	%edx, %eax
    000003af: 	cmpl	%edx, %ebp
    000003b1: 	jg	.Ltmp2243 # Offset: 945
.Ltmp2232:
    000003b7: 	movl	$0x63, (%rbx,%r9,4)
    000003bf: 	leaq	(,%r9,4), %r10
    000003c7: 	movl	%edx, %eax
    000003c9: 	cmpl	%edx, %ebp
    000003cb: 	jg	.Ltmp2244 # Offset: 971
    000003d1: 	jmp	.Ltmp2245 # Offset: 977
.Ltmp2239:
    000003d6: 	xorl	%edi, %edi
    000003d8: 	jmp	.Ltmp2242 # Offset: 984
.Ltmp2240:
    000003da: 	xorl	%edi, %edi
    000003dc: 	xorl	%eax, %eax
    000003de: 	jmp	.Ltmp2246 # Offset: 990
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace4IiEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace4IiEvPT_iPKc" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x327e0
  Size        : 0x309
  MaxSize     : 0x310
  Offset      : 0x327e0
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp2247 # Offset: 49
    00000037: 	movslq	%r15d, %r12
    0000003a: 	xorl	%ebp, %ebp
    0000003c: 	leaq	(,%r12,4), %rax
    00000044: 	movl	%r15d, %r12d
    00000047: 	movq	%rax, 0x10(%rsp)
    0000004c: 	leal	-0x1(%r15), %eax
    00000050: 	andl	$-0x4, %r12d
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%r15d, %eax
    0000005b: 	movslq	%r12d, %r9
    0000005e: 	shrl	$0x2, %eax
    00000061: 	leaq	(,%r9,4), %r13
    00000069: 	subl	$0x1, %eax
    0000006c: 	shlq	$0x4, %rax
    00000070: 	leaq	0x10(%r14,%rax), %rbx
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp2259:
    00000078: 	movq	0x10(%rsp), %rdx
    0000007d: 	xorl	%esi, %esi
    0000007f: 	movq	%r14, %rdi
    00000082: 	callq	memset@PLT # Offset: 130
    00000087: 	testl	%r15d, %r15d
    0000008a: 	movdqa	DATAat0x36fd0(%rip), %xmm2
    00000092: 	movdqa	DATAat0x36fc0(%rip), %xmm1
    0000009a: 	jle	.Ltmp2248 # Offset: 154
    000000a0: 	cmpl	$0x2, 0xc(%rsp)
    000000a5: 	jbe	.Ltmp2249 # Offset: 165
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2250:
    000000b0: 	movups	%xmm1, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jne	.Ltmp2250 # Offset: 186
    000000bc: 	cmpl	%r12d, %r15d
    000000bf: 	je	.Ltmp2251 # Offset: 191
    000000c1: 	leal	0x1(%r12), %eax
    000000c6: 	movl	$0xb, (%r14,%r13)
    000000ce: 	movq	%r13, %rdx
    000000d1: 	cmpl	%eax, %r15d
    000000d4: 	jle	.Ltmp2251 # Offset: 212
.Ltmp2267:
    000000d6: 	movl	$0xb, 0x4(%r14,%rdx)
    000000df: 	addl	$0x1, %eax
    000000e2: 	cmpl	%eax, %r15d
    000000e5: 	jle	.Ltmp2252 # Offset: 229
    000000e7: 	movl	$0xb, 0x8(%r14,%rdx)
.Ltmp2252:
    000000f0: 	cmpl	$0x2, 0xc(%rsp)
    000000f5: 	jbe	.Ltmp2253 # Offset: 245
.Ltmp2251:
    000000fb: 	movq	%r14, %rax
    000000fe: 	nop # Size: 2
.Ltmp2254:
    00000100: 	movups	%xmm2, (%rax)
    00000103: 	addq	$0x10, %rax
    00000107: 	cmpq	%rbx, %rax
    0000010a: 	jne	.Ltmp2254 # Offset: 266
    0000010c: 	cmpl	%r12d, %r15d
    0000010f: 	je	.Ltmp2255 # Offset: 271
    00000115: 	leal	0x1(%r12), %eax
    0000011a: 	movl	$0x63, (%r14,%r13)
    00000122: 	movq	%r13, %rdx
    00000125: 	cmpl	%eax, %r15d
    00000128: 	jle	.Ltmp2255 # Offset: 296
.Ltmp2265:
    0000012e: 	movl	$0x63, 0x4(%r14,%rdx)
    00000137: 	addl	$0x1, %eax
    0000013a: 	cmpl	%eax, %r15d
    0000013d: 	jle	.Ltmp2256 # Offset: 317
    0000013f: 	movl	$0x63, 0x8(%r14,%rdx)
.Ltmp2256:
    00000148: 	cmpl	$0x2, 0xc(%rsp)
    0000014d: 	cvttsd2si	init_value(%rip), %edx
    00000155: 	jbe	.Ltmp2257 # Offset: 341
.Ltmp2264:
    0000015b: 	movd	%edx, %xmm3
    0000015f: 	movq	%r14, %rax
    00000162: 	pshufd	$0x0, %xmm3, %xmm0
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2258:
    00000170: 	movups	%xmm0, (%rax)
    00000173: 	addq	$0x10, %rax
    00000177: 	cmpq	%rbx, %rax
    0000017a: 	jne	.Ltmp2258 # Offset: 378
    0000017c: 	cmpl	%r12d, %r15d
    0000017f: 	je	.Ltmp2248 # Offset: 383
    00000181: 	movl	%r12d, %eax
.Ltmp2266:
    00000184: 	movslq	%eax, %rdi
    00000187: 	addl	$0x1, %eax
    0000018a: 	movl	%edx, (%r14,%rdi,4)
    0000018e: 	leaq	(,%rdi,4), %rsi
    00000196: 	cmpl	%r15d, %eax
    00000199: 	jge	.Ltmp2248 # Offset: 409
.Ltmp2268:
    0000019b: 	addl	$0x1, %eax
    0000019e: 	movl	%edx, 0x4(%r14,%rsi)
    000001a3: 	cmpl	%eax, %r15d
    000001a6: 	jle	.Ltmp2248 # Offset: 422
    000001a8: 	movl	%edx, 0x8(%r14,%rsi)
.Ltmp2248:
    000001ad: 	addl	$0x1, %ebp
    000001b0: 	cmpl	%ebp, iterations(%rip)
    000001b6: 	jg	.Ltmp2259 # Offset: 438
.Ltmp2247:
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	movq	0x18(%rsp), %rdi
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movq	%rax, end_time(%rip)
    000001d1: 	subq	start_time(%rip), %rax
    000001d8: 	cvtsi2sd	%rax, %xmm0
    000001dd: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001e5: 	callq	_Z13record_resultdPKc # Offset: 485
    000001ea: 	testl	%r15d, %r15d
    000001ed: 	jle	.Ltmp2260 # Offset: 493
    000001f3: 	leal	-0x1(%r15), %eax
    000001f7: 	cmpl	$0x2, %eax
    000001fa: 	jbe	.Ltmp2261 # Offset: 506
    00000200: 	movl	%r15d, %edx
    00000203: 	movq	%r14, %rax
    00000206: 	pxor	%xmm0, %xmm0
    0000020a: 	shrl	$0x2, %edx
    0000020d: 	subl	$0x1, %edx
    00000210: 	shlq	$0x4, %rdx
    00000214: 	leaq	0x10(%r14,%rdx), %rdx
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp2262:
    00000220: 	movdqu	(%rax), %xmm4
    00000224: 	addq	$0x10, %rax
    00000228: 	paddd	%xmm4, %xmm0
    0000022c: 	cmpq	%rdx, %rax
    0000022f: 	jne	.Ltmp2262 # Offset: 559
    00000231: 	movdqa	%xmm0, %xmm1
    00000235: 	movl	%r15d, %eax
    00000238: 	psrldq	$0x8, %xmm1
    0000023d: 	andl	$-0x4, %eax
    00000240: 	paddd	%xmm1, %xmm0
    00000244: 	movdqa	%xmm0, %xmm1
    00000248: 	psrldq	$0x4, %xmm1
    0000024d: 	paddd	%xmm1, %xmm0
    00000251: 	movd	%xmm0, %edi
    00000255: 	testb	$0x3, %r15b
    00000259: 	je	.Ltmp2263 # Offset: 601
.Ltmp2269:
    0000025b: 	movslq	%eax, %rdx
    0000025e: 	leaq	(,%rdx,4), %rcx
    00000266: 	addl	(%r14,%rdx,4), %edi
    0000026a: 	leal	0x1(%rax), %edx
    0000026d: 	cmpl	%edx, %r15d
    00000270: 	jle	.Ltmp2263 # Offset: 624
    00000272: 	addl	$0x2, %eax
    00000275: 	addl	0x4(%r14,%rcx), %edi
    0000027a: 	cmpl	%r15d, %eax
    0000027d: 	jge	.Ltmp2263 # Offset: 637
    0000027f: 	addl	0x8(%r14,%rcx), %edi
.Ltmp2263:
    00000284: 	movq	0x18(%rsp), %rsi
    00000289: 	addq	$0x28, %rsp
    0000028d: 	popq	%rbx
    0000028e: 	popq	%rbp
    0000028f: 	popq	%r12
    00000291: 	popq	%r13
    00000293: 	popq	%r14
    00000295: 	popq	%r15
    00000297: 	jmp	_Z18check_sum_replace2IiEvT_PKc # TAILCALL  # Offset: 663
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp2255:
    000002a0: 	cvttsd2si	init_value(%rip), %edx
    000002a8: 	jmp	.Ltmp2264 # Offset: 680
.Ltmp2253:
    000002ad: 	movl	$0x63, (%r14)
    000002b4: 	movl	$0x1, %eax
    000002b9: 	xorl	%edx, %edx
    000002bb: 	cmpl	$0x1, %r15d
    000002bf: 	jne	.Ltmp2265 # Offset: 703
    000002c5: 	cvttsd2si	init_value(%rip), %edx
    000002cd: 	xorl	%eax, %eax
    000002cf: 	jmp	.Ltmp2266 # Offset: 719
.Ltmp2249:
    000002d4: 	movl	$0xb, (%r14)
    000002db: 	cmpl	$0x1, %r15d
    000002df: 	je	.Ltmp2253 # Offset: 735
    000002e1: 	movl	$0x1, %eax
    000002e6: 	xorl	%edx, %edx
    000002e8: 	jmp	.Ltmp2267 # Offset: 744
.Ltmp2257:
    000002ed: 	movl	%edx, (%r14)
    000002f0: 	xorl	%esi, %esi
    000002f2: 	movl	$0x1, %eax
    000002f7: 	jmp	.Ltmp2268 # Offset: 759
.Ltmp2260:
    000002fc: 	xorl	%edi, %edi
    000002fe: 	jmp	.Ltmp2263 # Offset: 766
.Ltmp2261:
    00000300: 	xorl	%edi, %edi
    00000302: 	xorl	%eax, %eax
    00000304: 	jmp	.Ltmp2269 # Offset: 772
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace4IiEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace4IiEvPT_iPKc" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x32af0
  Size        : 0x309
  MaxSize     : 0x310
  Offset      : 0x32af0
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp2270 # Offset: 49
    00000037: 	movslq	%r15d, %r12
    0000003a: 	xorl	%ebp, %ebp
    0000003c: 	leaq	(,%r12,4), %rax
    00000044: 	movl	%r15d, %r12d
    00000047: 	movq	%rax, 0x10(%rsp)
    0000004c: 	leal	-0x1(%r15), %eax
    00000050: 	andl	$-0x4, %r12d
    00000054: 	movl	%eax, 0xc(%rsp)
    00000058: 	movl	%r15d, %eax
    0000005b: 	movslq	%r12d, %r9
    0000005e: 	shrl	$0x2, %eax
    00000061: 	leaq	(,%r9,4), %r13
    00000069: 	subl	$0x1, %eax
    0000006c: 	shlq	$0x4, %rax
    00000070: 	leaq	0x10(%r14,%rax), %rbx
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp2282:
    00000078: 	movq	0x10(%rsp), %rdx
    0000007d: 	xorl	%esi, %esi
    0000007f: 	movq	%r14, %rdi
    00000082: 	callq	memset@PLT # Offset: 130
    00000087: 	testl	%r15d, %r15d
    0000008a: 	movdqa	DATAat0x36fd0(%rip), %xmm2
    00000092: 	movdqa	DATAat0x36fc0(%rip), %xmm1
    0000009a: 	jle	.Ltmp2271 # Offset: 154
    000000a0: 	cmpl	$0x2, 0xc(%rsp)
    000000a5: 	jbe	.Ltmp2272 # Offset: 165
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2273:
    000000b0: 	movups	%xmm1, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jne	.Ltmp2273 # Offset: 186
    000000bc: 	cmpl	%r12d, %r15d
    000000bf: 	je	.Ltmp2274 # Offset: 191
    000000c1: 	leal	0x1(%r12), %eax
    000000c6: 	movl	$0xb, (%r14,%r13)
    000000ce: 	movq	%r13, %rdx
    000000d1: 	cmpl	%eax, %r15d
    000000d4: 	jle	.Ltmp2274 # Offset: 212
.Ltmp2290:
    000000d6: 	movl	$0xb, 0x4(%r14,%rdx)
    000000df: 	addl	$0x1, %eax
    000000e2: 	cmpl	%eax, %r15d
    000000e5: 	jle	.Ltmp2275 # Offset: 229
    000000e7: 	movl	$0xb, 0x8(%r14,%rdx)
.Ltmp2275:
    000000f0: 	cmpl	$0x2, 0xc(%rsp)
    000000f5: 	jbe	.Ltmp2276 # Offset: 245
.Ltmp2274:
    000000fb: 	movq	%r14, %rax
    000000fe: 	nop # Size: 2
.Ltmp2277:
    00000100: 	movups	%xmm2, (%rax)
    00000103: 	addq	$0x10, %rax
    00000107: 	cmpq	%rbx, %rax
    0000010a: 	jne	.Ltmp2277 # Offset: 266
    0000010c: 	cmpl	%r12d, %r15d
    0000010f: 	je	.Ltmp2278 # Offset: 271
    00000115: 	leal	0x1(%r12), %eax
    0000011a: 	movl	$0x63, (%r14,%r13)
    00000122: 	movq	%r13, %rdx
    00000125: 	cmpl	%eax, %r15d
    00000128: 	jle	.Ltmp2278 # Offset: 296
.Ltmp2288:
    0000012e: 	movl	$0x63, 0x4(%r14,%rdx)
    00000137: 	addl	$0x1, %eax
    0000013a: 	cmpl	%eax, %r15d
    0000013d: 	jle	.Ltmp2279 # Offset: 317
    0000013f: 	movl	$0x63, 0x8(%r14,%rdx)
.Ltmp2279:
    00000148: 	cmpl	$0x2, 0xc(%rsp)
    0000014d: 	cvttsd2si	init_value(%rip), %edx
    00000155: 	jbe	.Ltmp2280 # Offset: 341
.Ltmp2287:
    0000015b: 	movd	%edx, %xmm3
    0000015f: 	movq	%r14, %rax
    00000162: 	pshufd	$0x0, %xmm3, %xmm0
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2281:
    00000170: 	movups	%xmm0, (%rax)
    00000173: 	addq	$0x10, %rax
    00000177: 	cmpq	%rbx, %rax
    0000017a: 	jne	.Ltmp2281 # Offset: 378
    0000017c: 	cmpl	%r12d, %r15d
    0000017f: 	je	.Ltmp2271 # Offset: 383
    00000181: 	movl	%r12d, %eax
.Ltmp2289:
    00000184: 	movslq	%eax, %rdi
    00000187: 	addl	$0x1, %eax
    0000018a: 	movl	%edx, (%r14,%rdi,4)
    0000018e: 	leaq	(,%rdi,4), %rsi
    00000196: 	cmpl	%r15d, %eax
    00000199: 	jge	.Ltmp2271 # Offset: 409
.Ltmp2291:
    0000019b: 	addl	$0x1, %eax
    0000019e: 	movl	%edx, 0x4(%r14,%rsi)
    000001a3: 	cmpl	%eax, %r15d
    000001a6: 	jle	.Ltmp2271 # Offset: 422
    000001a8: 	movl	%edx, 0x8(%r14,%rsi)
.Ltmp2271:
    000001ad: 	addl	$0x1, %ebp
    000001b0: 	cmpl	%ebp, iterations(%rip)
    000001b6: 	jg	.Ltmp2282 # Offset: 438
.Ltmp2270:
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	movq	0x18(%rsp), %rdi
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movq	%rax, end_time(%rip)
    000001d1: 	subq	start_time(%rip), %rax
    000001d8: 	cvtsi2sd	%rax, %xmm0
    000001dd: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001e5: 	callq	_Z13record_resultdPKc # Offset: 485
    000001ea: 	testl	%r15d, %r15d
    000001ed: 	jle	.Ltmp2283 # Offset: 493
    000001f3: 	leal	-0x1(%r15), %eax
    000001f7: 	cmpl	$0x2, %eax
    000001fa: 	jbe	.Ltmp2284 # Offset: 506
    00000200: 	movl	%r15d, %edx
    00000203: 	movq	%r14, %rax
    00000206: 	pxor	%xmm0, %xmm0
    0000020a: 	shrl	$0x2, %edx
    0000020d: 	subl	$0x1, %edx
    00000210: 	shlq	$0x4, %rdx
    00000214: 	leaq	0x10(%r14,%rdx), %rdx
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp2285:
    00000220: 	movdqu	(%rax), %xmm4
    00000224: 	addq	$0x10, %rax
    00000228: 	paddd	%xmm4, %xmm0
    0000022c: 	cmpq	%rdx, %rax
    0000022f: 	jne	.Ltmp2285 # Offset: 559
    00000231: 	movdqa	%xmm0, %xmm1
    00000235: 	movl	%r15d, %eax
    00000238: 	psrldq	$0x8, %xmm1
    0000023d: 	andl	$-0x4, %eax
    00000240: 	paddd	%xmm1, %xmm0
    00000244: 	movdqa	%xmm0, %xmm1
    00000248: 	psrldq	$0x4, %xmm1
    0000024d: 	paddd	%xmm1, %xmm0
    00000251: 	movd	%xmm0, %edi
    00000255: 	testb	$0x3, %r15b
    00000259: 	je	.Ltmp2286 # Offset: 601
.Ltmp2292:
    0000025b: 	movslq	%eax, %rdx
    0000025e: 	leaq	(,%rdx,4), %rcx
    00000266: 	addl	(%r14,%rdx,4), %edi
    0000026a: 	leal	0x1(%rax), %edx
    0000026d: 	cmpl	%edx, %r15d
    00000270: 	jle	.Ltmp2286 # Offset: 624
    00000272: 	addl	$0x2, %eax
    00000275: 	addl	0x4(%r14,%rcx), %edi
    0000027a: 	cmpl	%r15d, %eax
    0000027d: 	jge	.Ltmp2286 # Offset: 637
    0000027f: 	addl	0x8(%r14,%rcx), %edi
.Ltmp2286:
    00000284: 	movq	0x18(%rsp), %rsi
    00000289: 	addq	$0x28, %rsp
    0000028d: 	popq	%rbx
    0000028e: 	popq	%rbp
    0000028f: 	popq	%r12
    00000291: 	popq	%r13
    00000293: 	popq	%r14
    00000295: 	popq	%r15
    00000297: 	jmp	_Z18check_sum_replace2IiEvT_PKc # TAILCALL  # Offset: 663
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp2278:
    000002a0: 	cvttsd2si	init_value(%rip), %edx
    000002a8: 	jmp	.Ltmp2287 # Offset: 680
.Ltmp2276:
    000002ad: 	movl	$0x63, (%r14)
    000002b4: 	movl	$0x1, %eax
    000002b9: 	xorl	%edx, %edx
    000002bb: 	cmpl	$0x1, %r15d
    000002bf: 	jne	.Ltmp2288 # Offset: 703
    000002c5: 	cvttsd2si	init_value(%rip), %edx
    000002cd: 	xorl	%eax, %eax
    000002cf: 	jmp	.Ltmp2289 # Offset: 719
.Ltmp2272:
    000002d4: 	movl	$0xb, (%r14)
    000002db: 	cmpl	$0x1, %r15d
    000002df: 	je	.Ltmp2276 # Offset: 735
    000002e1: 	movl	$0x1, %eax
    000002e6: 	xorl	%edx, %edx
    000002e8: 	jmp	.Ltmp2290 # Offset: 744
.Ltmp2280:
    000002ed: 	movl	%edx, (%r14)
    000002f0: 	xorl	%esi, %esi
    000002f2: 	movl	$0x1, %eax
    000002f7: 	jmp	.Ltmp2291 # Offset: 759
.Ltmp2283:
    000002fc: 	xorl	%edi, %edi
    000002fe: 	jmp	.Ltmp2286 # Offset: 766
.Ltmp2284:
    00000300: 	xorl	%edi, %edi
    00000302: 	xorl	%eax, %eax
    00000304: 	jmp	.Ltmp2292 # Offset: 772
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace4IiEvPT_iPKc"

Binary Function "_Z22test_for_loop_replace4IiEvPT_iPKc" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x32e00
  Size        : 0x2ff
  MaxSize     : 0x300
  Offset      : 0x32e00
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop_replace4IiEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp2293 # Offset: 49
    00000037: 	leal	-0x1(%r12), %edx
    0000003c: 	movl	%r12d, %r15d
    0000003f: 	xorl	%r13d, %r13d
    00000042: 	leaq	0x4(,%rdx,4), %rcx
    0000004a: 	movq	%rdx, %r10
    0000004d: 	movl	%r12d, %edx
    00000050: 	andl	$-0x4, %r15d
    00000054: 	shrl	$0x2, %edx
    00000057: 	movq	%rcx, 0x10(%rsp)
    0000005c: 	movslq	%r15d, %r9
    0000005f: 	cvttsd2si	init_value(%rip), %r8d
    00000068: 	subl	$0x1, %edx
    0000006b: 	leaq	(,%r9,4), %r14
    00000073: 	shlq	$0x4, %rdx
    00000077: 	leaq	0x10(%rbp,%rdx), %rbx
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp2306:
    00000080: 	testl	%r12d, %r12d
    00000083: 	jle	.Ltmp2294 # Offset: 131
    00000089: 	movq	0x10(%rsp), %rdx
    0000008e: 	xorl	%esi, %esi
    00000090: 	movq	%rbp, %rdi
    00000093: 	movl	%r10d, 0xc(%rsp)
    00000098: 	movl	%r8d, 0x8(%rsp)
    0000009d: 	callq	memset@PLT # Offset: 157
    000000a2: 	movl	0xc(%rsp), %r10d
    000000a7: 	movl	0x8(%rsp), %r8d
    000000ac: 	movdqa	DATAat0x36fd0(%rip), %xmm2
    000000b4: 	movdqa	DATAat0x36fc0(%rip), %xmm1
    000000bc: 	cmpl	$0x2, %r10d
    000000c0: 	jbe	.Ltmp2295 # Offset: 192
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2296:
    000000d0: 	movups	%xmm1, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rbx, %rax
    000000da: 	jne	.Ltmp2296 # Offset: 218
    000000dc: 	cmpl	%r15d, %r12d
    000000df: 	je	.Ltmp2297 # Offset: 223
    000000e1: 	movl	$0xb, (%rbp,%r14)
    000000ea: 	leal	0x1(%r15), %eax
    000000ee: 	movq	%r14, %rdx
    000000f1: 	cmpl	%eax, %r12d
    000000f4: 	jle	.Ltmp2297 # Offset: 244
.Ltmp2313:
    000000f6: 	addl	$0x1, %eax
    000000f9: 	movl	$0xb, 0x4(%rbp,%rdx)
    00000101: 	cmpl	%eax, %r12d
    00000104: 	jle	.Ltmp2298 # Offset: 260
    00000106: 	movl	$0xb, 0x8(%rbp,%rdx)
.Ltmp2298:
    0000010e: 	cmpl	$0x2, %r10d
    00000112: 	jbe	.Ltmp2299 # Offset: 274
.Ltmp2297:
    00000118: 	movq	%rbp, %rax
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2300:
    00000120: 	movups	%xmm2, (%rax)
    00000123: 	addq	$0x10, %rax
    00000127: 	cmpq	%rbx, %rax
    0000012a: 	jne	.Ltmp2300 # Offset: 298
    0000012c: 	cmpl	%r15d, %r12d
    0000012f: 	je	.Ltmp2301 # Offset: 303
    00000131: 	movl	$0x63, (%rbp,%r14)
    0000013a: 	leal	0x1(%r15), %eax
    0000013e: 	movq	%r14, %rdx
    00000141: 	cmpl	%eax, %r12d
    00000144: 	jle	.Ltmp2301 # Offset: 324
.Ltmp2311:
    00000146: 	addl	$0x1, %eax
    00000149: 	movl	$0x63, 0x4(%rbp,%rdx)
    00000151: 	cmpl	%eax, %r12d
    00000154: 	jle	.Ltmp2302 # Offset: 340
    00000156: 	movl	$0x63, 0x8(%rbp,%rdx)
.Ltmp2302:
    0000015e: 	cmpl	$0x2, %r10d
    00000162: 	jbe	.Ltmp2303 # Offset: 354
.Ltmp2301:
    00000168: 	movd	%r8d, %xmm3
    0000016d: 	movq	%rbp, %rax
    00000170: 	pshufd	$0x0, %xmm3, %xmm0
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp2304:
    00000178: 	movups	%xmm0, (%rax)
    0000017b: 	addq	$0x10, %rax
    0000017f: 	cmpq	%rbx, %rax
    00000182: 	jne	.Ltmp2304 # Offset: 386
    00000184: 	cmpl	%r15d, %r12d
    00000187: 	je	.Ltmp2305 # Offset: 391
    00000189: 	movl	%r15d, %eax
.Ltmp2312:
    0000018c: 	movslq	%eax, %rsi
    0000018f: 	addl	$0x1, %eax
    00000192: 	movl	%r8d, (%rbp,%rsi,4)
    00000197: 	leaq	(,%rsi,4), %rdx
    0000019f: 	cmpl	%r12d, %eax
    000001a2: 	jge	.Ltmp2305 # Offset: 418
.Ltmp2314:
    000001a4: 	addl	$0x1, %eax
    000001a7: 	movl	%r8d, 0x4(%rbp,%rdx)
    000001ac: 	cmpl	%eax, %r12d
    000001af: 	jle	.Ltmp2305 # Offset: 431
    000001b1: 	movl	%r8d, 0x8(%rbp,%rdx)
.Ltmp2305:
    000001b6: 	movl	iterations(%rip), %eax
.Ltmp2294:
    000001bc: 	addl	$0x1, %r13d
    000001c0: 	cmpl	%eax, %r13d
    000001c3: 	jl	.Ltmp2306 # Offset: 451
.Ltmp2293:
    000001c9: 	callq	clock@PLT # Offset: 457
    000001ce: 	movq	0x18(%rsp), %rdi
    000001d3: 	pxor	%xmm0, %xmm0
    000001d7: 	movq	%rax, end_time(%rip)
    000001de: 	subq	start_time(%rip), %rax
    000001e5: 	cvtsi2sd	%rax, %xmm0
    000001ea: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001f2: 	callq	_Z13record_resultdPKc # Offset: 498
    000001f7: 	testl	%r12d, %r12d
    000001fa: 	jle	.Ltmp2307 # Offset: 506
    00000200: 	leal	-0x1(%r12), %eax
    00000205: 	cmpl	$0x2, %eax
    00000208: 	jbe	.Ltmp2308 # Offset: 520
    0000020e: 	movl	%r12d, %edx
    00000211: 	movq	%rbp, %rax
    00000214: 	pxor	%xmm0, %xmm0
    00000218: 	shrl	$0x2, %edx
    0000021b: 	subl	$0x1, %edx
    0000021e: 	shlq	$0x4, %rdx
    00000222: 	leaq	0x10(%rbp,%rdx), %rdx
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2309:
    00000230: 	movdqu	(%rax), %xmm4
    00000234: 	addq	$0x10, %rax
    00000238: 	paddd	%xmm4, %xmm0
    0000023c: 	cmpq	%rdx, %rax
    0000023f: 	jne	.Ltmp2309 # Offset: 575
    00000241: 	movdqa	%xmm0, %xmm1
    00000245: 	movl	%r12d, %eax
    00000248: 	psrldq	$0x8, %xmm1
    0000024d: 	andl	$-0x4, %eax
    00000250: 	paddd	%xmm1, %xmm0
    00000254: 	movdqa	%xmm0, %xmm1
    00000258: 	psrldq	$0x4, %xmm1
    0000025d: 	paddd	%xmm1, %xmm0
    00000261: 	movd	%xmm0, %edi
    00000265: 	testb	$0x3, %r12b
    00000269: 	je	.Ltmp2310 # Offset: 617
.Ltmp2315:
    0000026b: 	movslq	%eax, %rdx
    0000026e: 	leaq	(,%rdx,4), %rcx
    00000276: 	addl	(%rbp,%rdx,4), %edi
    0000027a: 	leal	0x1(%rax), %edx
    0000027d: 	cmpl	%edx, %r12d
    00000280: 	jle	.Ltmp2310 # Offset: 640
    00000282: 	addl	$0x2, %eax
    00000285: 	addl	0x4(%rbp,%rcx), %edi
    00000289: 	cmpl	%r12d, %eax
    0000028c: 	jge	.Ltmp2310 # Offset: 652
    0000028e: 	addl	0x8(%rbp,%rcx), %edi
.Ltmp2310:
    00000292: 	movq	0x18(%rsp), %rsi
    00000297: 	addq	$0x28, %rsp
    0000029b: 	popq	%rbx
    0000029c: 	popq	%rbp
    0000029d: 	popq	%r12
    0000029f: 	popq	%r13
    000002a1: 	popq	%r14
    000002a3: 	popq	%r15
    000002a5: 	jmp	_Z18check_sum_replace2IiEvT_PKc # TAILCALL  # Offset: 677
.Ltmp2299:
    000002aa: 	movl	$0x63, (%rbp)
    000002b1: 	movl	$0x1, %eax
    000002b6: 	xorl	%edx, %edx
    000002b8: 	cmpl	$0x1, %r12d
    000002bc: 	jne	.Ltmp2311 # Offset: 700
    000002c2: 	xorl	%eax, %eax
    000002c4: 	jmp	.Ltmp2312 # Offset: 708
.Ltmp2295:
    000002c9: 	movl	$0xb, (%rbp)
    000002d0: 	cmpl	$0x1, %r12d
    000002d4: 	je	.Ltmp2299 # Offset: 724
    000002d6: 	movl	$0x1, %eax
    000002db: 	xorl	%edx, %edx
    000002dd: 	jmp	.Ltmp2313 # Offset: 733
.Ltmp2303:
    000002e2: 	movl	%r8d, (%rbp)
    000002e6: 	xorl	%edx, %edx
    000002e8: 	movl	$0x1, %eax
    000002ed: 	jmp	.Ltmp2314 # Offset: 749
.Ltmp2307:
    000002f2: 	xorl	%edi, %edi
    000002f4: 	jmp	.Ltmp2310 # Offset: 756
.Ltmp2308:
    000002f6: 	xorl	%edi, %edi
    000002f8: 	xorl	%eax, %eax
    000002fa: 	jmp	.Ltmp2315 # Offset: 762
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop_replace4IiEvPT_iPKc"

Binary Function "_Z18check_sum_replace2IdEvT_PKc" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x33100
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x33100
  Section     : .text
  Orc Section : .local.text._Z18check_sum_replace2IdEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movapd	%xmm0, %xmm4
    0000000a: 	movapd	%xmm0, %xmm1
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	subq	$0x18, %rsp
    00000016: 	movsd	DATAat0x36ec8(%rip), %xmm2
    0000001e: 	movq	DATAat0x36f60(%rip), %xmm3
    00000026: 	mulsd	init_value(%rip), %xmm2
    0000002e: 	andpd	%xmm3, %xmm4
    00000032: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000003a: 	subsd	%xmm2, %xmm1
    0000003e: 	jbe	.Ltmp2316 # Offset: 62
    00000040: 	divsd	%xmm0, %xmm1
.Ltmp2316:
    00000044: 	andpd	%xmm3, %xmm1
    00000048: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000050: 	comisd	%xmm1, %xmm3
    00000054: 	jbe	.Ltmp2317 # Offset: 84
    00000056: 	addq	$0x18, %rsp
    0000005a: 	popq	%rbp
    0000005b: 	popq	%r12
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp2317:
    00000060: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000067: 	movl	$0x5, %edx
    0000006c: 	movsd	%xmm2, (%rsp)
    00000071: 	leaq	DATAat0x35004(%rip), %rsi
    00000078: 	movq	%r12, %rdi
    0000007b: 	movsd	%xmm0, 0x8(%rsp)
    00000081: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 129
    00000086: 	testq	%rbp, %rbp
    00000089: 	movsd	(%rsp), %xmm2
    0000008e: 	movsd	0x8(%rsp), %xmm0
    00000094: 	je	.Ltmp2318 # Offset: 148
    0000009a: 	movq	%rbp, %rdi
    0000009d: 	movsd	%xmm0, 0x8(%rsp)
    000000a3: 	movsd	%xmm2, (%rsp)
    000000a8: 	callq	strlen@PLT # Offset: 168
    000000ad: 	movq	%rbp, %rsi
    000000b0: 	movq	%r12, %rdi
    000000b3: 	movq	%rax, %rdx
    000000b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 182
    000000bb: 	movsd	0x8(%rsp), %xmm0
    000000c1: 	movsd	(%rsp), %xmm2
.Ltmp2319:
    000000c6: 	movl	$0xd, %edx
    000000cb: 	leaq	DATAat0x3500a(%rip), %rsi
    000000d2: 	movq	%r12, %rdi
    000000d5: 	movsd	%xmm2, (%rsp)
    000000da: 	movsd	%xmm0, 0x8(%rsp)
    000000e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 224
    000000e5: 	movsd	0x8(%rsp), %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 238
    000000f3: 	movl	$0xb, %edx
    000000f8: 	leaq	DATAat0x35018(%rip), %rsi
    000000ff: 	movq	%rax, %rdi
    00000102: 	movq	%rax, %rbp
    00000105: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 261
    0000010a: 	movsd	(%rsp), %xmm2
    0000010f: 	movq	%rbp, %rdi
    00000112: 	movapd	%xmm2, %xmm0
    00000116: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 278
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbp
    00000120: 	movq	%rax, %rdi
    00000123: 	popq	%r12
    00000125: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2318:
    00000130: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000137: 	movq	-0x18(%rax), %rdi
    0000013b: 	addq	%r12, %rdi
    0000013e: 	movl	0x20(%rdi), %esi
    00000141: 	orl	$0x1, %esi
    00000144: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 324
    00000149: 	movsd	(%rsp), %xmm2
    0000014e: 	movsd	0x8(%rsp), %xmm0
    00000154: 	jmp	.Ltmp2319 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z18check_sum_replace2IdEvT_PKc"

Binary Function "_Z30test_for_loop_blocked_replace2IdEvPT_iPKc" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x33260
  Size        : 0x2b9
  MaxSize     : 0x2c0
  Offset      : 0x33260
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace2IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movl	iterations(%rip), %r11d
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%r11d, %r11d
    00000030: 	jle	.Ltmp2320 # Offset: 48
    00000036: 	leal	-0x101(%rbp), %eax
    0000003c: 	xorl	%r8d, %r8d
    0000003f: 	leaq	iterations(%rip), %r13
    00000046: 	movq	%r12, 0x10(%rsp)
    0000004b: 	xorb	%al, %al
    0000004d: 	leal	-0x100(%rbp), %r14d
    00000054: 	leaq	-0x8(%r13), %r15
    00000058: 	movl	%r8d, %r12d
    0000005b: 	addl	$0x100, %eax
    00000060: 	movl	%eax, 0xc(%rsp)
.Ltmp2329:
    00000064: 	xorl	%ecx, %ecx
    00000066: 	testl	%r14d, %r14d
    00000069: 	jle	.Ltmp2321 # Offset: 105
    0000006f: 	movq	%rbx, %rsi
    00000072: 	leaq	0x800(%rbx), %rdx
    00000079: 	xorl	%r8d, %r8d
    0000007c: 	xorl	%eax, %eax
.Ltmp2325:
    0000007e: 	leaq	0x8(%rsi), %rdi
    00000082: 	movq	%rsi, %rcx
    00000085: 	movq	$0x0, (%rsi)
    0000008c: 	addq	$0x100, %r8
    00000093: 	movq	$0x0, 0x7f8(%rsi)
    0000009e: 	andq	$-0x8, %rdi
    000000a2: 	subq	%rdi, %rcx
    000000a5: 	addl	$0x800, %ecx
    000000ab: 	shrl	$0x3, %ecx
    000000ae: 	rep		stosq	%rax, %es:(%rdi)
    000000b1: 	cmpq	%rsi, %r13
    000000b4: 	jbe	.Ltmp2322 # Offset: 180
    000000b6: 	cmpq	%rdx, %r15
    000000b9: 	jb	.Ltmp2323 # Offset: 185
.Ltmp2322:
    000000bf: 	movsd	init_value(%rip), %xmm0
    000000c7: 	movq	%rsi, %rcx
    000000ca: 	unpcklpd	%xmm0, %xmm0
    000000ce: 	nop # Size: 2
.Ltmp2324:
    000000d0: 	movups	%xmm0, (%rcx)
    000000d3: 	addq	$0x10, %rcx
    000000d7: 	cmpq	%rdx, %rcx
    000000da: 	jne	.Ltmp2324 # Offset: 218
.Ltmp2335:
    000000dc: 	addq	$0x800, %rsi
    000000e3: 	addq	$0x800, %rdx
    000000ea: 	cmpl	%r8d, %r14d
    000000ed: 	jg	.Ltmp2325 # Offset: 237
    000000ef: 	movl	0xc(%rsp), %ecx
.Ltmp2321:
    000000f3: 	cmpl	%ecx, %ebp
    000000f5: 	jle	.Ltmp2326 # Offset: 245
    000000fb: 	movl	%ebp, %r8d
    000000fe: 	movslq	%ecx, %r10
    00000101: 	xorl	%esi, %esi
    00000103: 	movl	%r11d, 0x2c(%rsp)
    00000108: 	subl	%ecx, %r8d
    0000010b: 	leaq	(%rbx,%r10,8), %rdi
    0000010f: 	movl	%ecx, 0x24(%rsp)
    00000113: 	leal	-0x1(%r8), %eax
    00000117: 	movl	%r8d, 0x28(%rsp)
    0000011c: 	leaq	0x8(,%rax,8), %rdx
    00000124: 	movq	%r10, 0x18(%rsp)
    00000129: 	movl	%eax, 0x20(%rsp)
    0000012d: 	callq	memset@PLT # Offset: 301
    00000132: 	movq	0x18(%rsp), %r10
    00000137: 	movl	0x24(%rsp), %ecx
    0000013b: 	movq	%rax, %rdi
    0000013e: 	movl	0x28(%rsp), %eax
    00000142: 	movl	0x2c(%rsp), %r11d
    00000147: 	movq	%rax, %r8
    0000014a: 	addq	%r10, %rax
    0000014d: 	leaq	(%rbx,%rax,8), %rax
    00000151: 	cmpq	%r15, %rax
    00000154: 	setbe	%al
    00000157: 	cmpq	%r13, %rdi
    0000015a: 	setae	%dl
    0000015d: 	orb	%dl, %al
    0000015f: 	je	.Ltmp2327 # Offset: 351
    00000165: 	movl	0x20(%rsp), %r9d
    0000016a: 	cmpl	$0x2, %r9d
    0000016e: 	jbe	.Ltmp2327 # Offset: 366
    00000174: 	movl	%r8d, %eax
    00000177: 	movsd	init_value(%rip), %xmm0
    0000017f: 	shrl	%eax
    00000181: 	subl	$0x1, %eax
    00000184: 	unpcklpd	%xmm0, %xmm0
    00000188: 	shlq	$0x4, %rax
    0000018c: 	leaq	0x10(%rdi,%rax), %rax
.Ltmp2328:
    00000191: 	movups	%xmm0, (%rdi)
    00000194: 	addq	$0x10, %rdi
    00000198: 	cmpq	%rdi, %rax
    0000019b: 	jne	.Ltmp2328 # Offset: 411
    0000019d: 	movl	%r8d, %edx
    000001a0: 	andl	$-0x2, %edx
    000001a3: 	leal	(%rdx,%rcx), %eax
    000001a6: 	cmpl	%edx, %r8d
    000001a9: 	je	.Ltmp2326 # Offset: 425
    000001ab: 	movsd	init_value(%rip), %xmm0
    000001b3: 	cltq
    000001b5: 	movsd	%xmm0, (%rbx,%rax,8)
.Ltmp2326:
    000001ba: 	addl	$0x1, %r12d
    000001be: 	cmpl	%r11d, %r12d
    000001c1: 	jne	.Ltmp2329 # Offset: 449
    000001c7: 	movq	0x10(%rsp), %r12
.Ltmp2320:
    000001cc: 	callq	clock@PLT # Offset: 460
    000001d1: 	pxor	%xmm0, %xmm0
    000001d5: 	movq	%r12, %rdi
    000001d8: 	movq	%rax, end_time(%rip)
    000001df: 	subq	start_time(%rip), %rax
    000001e6: 	cvtsi2sd	%rax, %xmm0
    000001eb: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001f3: 	callq	_Z13record_resultdPKc # Offset: 499
    000001f8: 	testl	%ebp, %ebp
    000001fa: 	jle	.Ltmp2330 # Offset: 506
    00000200: 	cmpl	$0x1, %ebp
    00000203: 	je	.Ltmp2331 # Offset: 515
    00000209: 	movl	%ebp, %edx
    0000020b: 	movq	%rbx, %rax
    0000020e: 	pxor	%xmm0, %xmm0
    00000212: 	shrl	%edx
    00000214: 	subl	$0x1, %edx
    00000217: 	shlq	$0x4, %rdx
    0000021b: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp2332:
    00000220: 	movsd	(%rax), %xmm1
    00000224: 	addq	$0x10, %rax
    00000228: 	addsd	%xmm1, %xmm0
    0000022c: 	movsd	-0x8(%rax), %xmm1
    00000231: 	addsd	%xmm1, %xmm0
    00000235: 	cmpq	%rax, %rdx
    00000238: 	jne	.Ltmp2332 # Offset: 568
    0000023a: 	movl	%ebp, %eax
    0000023c: 	andl	$-0x2, %eax
    0000023f: 	andl	$0x1, %ebp
    00000242: 	je	.Ltmp2333 # Offset: 578
.Ltmp2337:
    00000244: 	cltq
    00000246: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2333:
    0000024b: 	addq	$0x38, %rsp
    0000024f: 	movq	%r12, %rdi
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	popq	%r15
    0000025c: 	jmp	_Z18check_sum_replace2IdEvT_PKc # TAILCALL  # Offset: 604
.Ltmp2323:
    00000261: 	movq	%rsi, %rcx
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp2334:
    00000268: 	movsd	init_value(%rip), %xmm0
    00000270: 	addq	$0x8, %rcx
    00000274: 	movsd	%xmm0, -0x8(%rcx)
    00000279: 	cmpq	%rdx, %rcx
    0000027c: 	jne	.Ltmp2334 # Offset: 636
    0000027e: 	jmp	.Ltmp2335 # Offset: 638
.Ltmp2327:
    00000283: 	leal	-0x1(%rbp), %eax
    00000286: 	subl	%ecx, %eax
    00000288: 	addq	%r10, %rax
    0000028b: 	leaq	0x8(%rbx,%rax,8), %rax
.Ltmp2336:
    00000290: 	movsd	init_value(%rip), %xmm0
    00000298: 	addq	$0x8, %rdi
    0000029c: 	movsd	%xmm0, -0x8(%rdi)
    000002a1: 	cmpq	%rax, %rdi
    000002a4: 	jne	.Ltmp2336 # Offset: 676
    000002a6: 	jmp	.Ltmp2326 # Offset: 678
.Ltmp2330:
    000002ab: 	pxor	%xmm0, %xmm0
    000002af: 	jmp	.Ltmp2333 # Offset: 687
.Ltmp2331:
    000002b1: 	pxor	%xmm0, %xmm0
    000002b5: 	xorl	%eax, %eax
    000002b7: 	jmp	.Ltmp2337 # Offset: 695
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace2IdEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace3IdEvPT_iPKc" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x33520
  Size        : 0x33d
  MaxSize     : 0x340
  Offset      : 0x33520
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace3IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %r11d
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%r11d, %r11d
    00000031: 	jle	.Ltmp2338 # Offset: 49
    00000037: 	leal	-0x101(%r12), %eax
    0000003f: 	movq	%rbp, (%rsp)
    00000043: 	xorl	%r15d, %r15d
    00000046: 	movapd	DATAat0x36fb0(%rip), %xmm0
    0000004e: 	xorb	%al, %al
    00000050: 	leal	-0x100(%r12), %r13d
    00000058: 	leaq	init_value(%rip), %r14
    0000005f: 	movl	%r11d, %ebp
    00000062: 	addl	$0x100, %eax
    00000067: 	movl	%eax, 0x8(%rsp)
.Ltmp2351:
    0000006b: 	xorl	%ecx, %ecx
    0000006d: 	testl	%r13d, %r13d
    00000070: 	jle	.Ltmp2339 # Offset: 112
    00000076: 	movq	%rbx, %rsi
    00000079: 	leaq	0x800(%rbx), %rdx
    00000080: 	xorl	%r8d, %r8d
    00000083: 	xorl	%eax, %eax
    00000085: 	leaq	iterations(%rip), %r9
.Ltmp2344:
    0000008c: 	leaq	0x8(%rsi), %rdi
    00000090: 	movq	%rsi, %rcx
    00000093: 	movq	$0x0, (%rsi)
    0000009a: 	addq	$0x100, %r8
    000000a1: 	movq	$0x0, 0x7f8(%rsi)
    000000ac: 	andq	$-0x8, %rdi
    000000b0: 	subq	%rdi, %rcx
    000000b3: 	addl	$0x800, %ecx
    000000b9: 	shrl	$0x3, %ecx
    000000bc: 	rep		stosq	%rax, %es:(%rdi)
    000000bf: 	movq	%rsi, %rcx
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2340:
    000000c8: 	movups	%xmm0, (%rcx)
    000000cb: 	addq	$0x10, %rcx
    000000cf: 	cmpq	%rcx, %rdx
    000000d2: 	jne	.Ltmp2340 # Offset: 210
    000000d4: 	cmpq	%rsi, %r9
    000000d7: 	jbe	.Ltmp2341 # Offset: 215
    000000d9: 	cmpq	%rdx, %r14
    000000dc: 	jb	.Ltmp2342 # Offset: 220
.Ltmp2341:
    000000e2: 	movsd	init_value(%rip), %xmm1
    000000ea: 	movq	%rsi, %rcx
    000000ed: 	unpcklpd	%xmm1, %xmm1
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp2343:
    000000f8: 	movups	%xmm1, (%rcx)
    000000fb: 	addq	$0x10, %rcx
    000000ff: 	cmpq	%rcx, %rdx
    00000102: 	jne	.Ltmp2343 # Offset: 258
.Ltmp2357:
    00000104: 	addq	$0x800, %rsi
    0000010b: 	addq	$0x800, %rdx
    00000112: 	cmpl	%r8d, %r13d
    00000115: 	jg	.Ltmp2344 # Offset: 277
    0000011b: 	movl	0x8(%rsp), %ecx
.Ltmp2339:
    0000011f: 	cmpl	%ecx, %r12d
    00000122: 	jle	.Ltmp2345 # Offset: 290
    00000128: 	movl	%r12d, %r8d
    0000012b: 	movslq	%ecx, %r11
    0000012e: 	xorl	%esi, %esi
    00000130: 	movl	%ecx, 0x18(%rsp)
    00000134: 	subl	%ecx, %r8d
    00000137: 	leaq	(%rbx,%r11,8), %rdi
    0000013b: 	movq	%r11, 0x10(%rsp)
    00000140: 	leal	-0x1(%r8), %eax
    00000144: 	movl	%r8d, 0x1c(%rsp)
    00000149: 	leaq	0x8(,%rax,8), %rdx
    00000151: 	movl	%eax, 0xc(%rsp)
    00000155: 	callq	memset@PLT # Offset: 341
    0000015a: 	movl	0x1c(%rsp), %r8d
    0000015f: 	movl	0xc(%rsp), %r10d
    00000164: 	movq	0x10(%rsp), %r11
    00000169: 	movl	0x18(%rsp), %ecx
    0000016d: 	movq	%rax, %rdi
    00000170: 	cmpl	$0x1, %r8d
    00000174: 	movapd	DATAat0x36fb0(%rip), %xmm0
    0000017c: 	je	.Ltmp2346 # Offset: 380
    00000182: 	movl	%r8d, %edx
    00000185: 	shrl	%edx
    00000187: 	subl	$0x1, %edx
    0000018a: 	shlq	$0x4, %rdx
    0000018e: 	leaq	0x10(%rax,%rdx), %rdx
.Ltmp2347:
    00000193: 	movups	%xmm0, (%rax)
    00000196: 	addq	$0x10, %rax
    0000019a: 	cmpq	%rax, %rdx
    0000019d: 	jne	.Ltmp2347 # Offset: 413
    0000019f: 	movl	%r8d, %edx
    000001a2: 	andl	$-0x2, %edx
    000001a5: 	leal	(%rdx,%rcx), %eax
    000001a8: 	cmpl	%edx, %r8d
    000001ab: 	je	.Ltmp2348 # Offset: 427
.Ltmp2359:
    000001ad: 	movq	DATAat0x36fb0(%rip), %rsi
    000001b4: 	cltq
    000001b6: 	movq	%rsi, (%rbx,%rax,8)
.Ltmp2348:
    000001ba: 	movl	%r8d, %eax
    000001bd: 	leaq	iterations(%rip), %r9
    000001c4: 	addq	%r11, %rax
    000001c7: 	leaq	(%rbx,%rax,8), %rax
    000001cb: 	cmpq	%r14, %rax
    000001ce: 	setbe	%al
    000001d1: 	cmpq	%r9, %rdi
    000001d4: 	setae	%dl
    000001d7: 	orb	%dl, %al
    000001d9: 	je	.Ltmp2349 # Offset: 473
    000001df: 	cmpl	$0x2, %r10d
    000001e3: 	jbe	.Ltmp2349 # Offset: 483
    000001e9: 	movl	%r8d, %eax
    000001ec: 	movsd	init_value(%rip), %xmm1
    000001f4: 	shrl	%eax
    000001f6: 	subl	$0x1, %eax
    000001f9: 	unpcklpd	%xmm1, %xmm1
    000001fd: 	shlq	$0x4, %rax
    00000201: 	leaq	0x10(%rdi,%rax), %rax
.Ltmp2350:
    00000206: 	movups	%xmm1, (%rdi)
    00000209: 	addq	$0x10, %rdi
    0000020d: 	cmpq	%rax, %rdi
    00000210: 	jne	.Ltmp2350 # Offset: 528
    00000212: 	movl	%r8d, %edx
    00000215: 	andl	$-0x2, %edx
    00000218: 	leal	(%rdx,%rcx), %eax
    0000021b: 	cmpl	%edx, %r8d
    0000021e: 	je	.Ltmp2345 # Offset: 542
    00000220: 	movsd	init_value(%rip), %xmm1
    00000228: 	cltq
    0000022a: 	movsd	%xmm1, (%rbx,%rax,8)
.Ltmp2345:
    0000022f: 	addl	$0x1, %r15d
    00000233: 	cmpl	%ebp, %r15d
    00000236: 	jne	.Ltmp2351 # Offset: 566
    0000023c: 	movq	(%rsp), %rbp
.Ltmp2338:
    00000240: 	callq	clock@PLT # Offset: 576
    00000245: 	pxor	%xmm0, %xmm0
    00000249: 	movq	%rbp, %rdi
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	subq	start_time(%rip), %rax
    0000025a: 	cvtsi2sd	%rax, %xmm0
    0000025f: 	divsd	DATAat0x36eb8(%rip), %xmm0
    00000267: 	callq	_Z13record_resultdPKc # Offset: 615
    0000026c: 	testl	%r12d, %r12d
    0000026f: 	jle	.Ltmp2352 # Offset: 623
    00000275: 	cmpl	$0x1, %r12d
    00000279: 	je	.Ltmp2353 # Offset: 633
    0000027f: 	movl	%r12d, %edx
    00000282: 	movq	%rbx, %rax
    00000285: 	pxor	%xmm0, %xmm0
    00000289: 	shrl	%edx
    0000028b: 	subl	$0x1, %edx
    0000028e: 	shlq	$0x4, %rdx
    00000292: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp2354:
    00000297: 	movsd	(%rax), %xmm1
    0000029b: 	addq	$0x10, %rax
    0000029f: 	addsd	%xmm1, %xmm0
    000002a3: 	movsd	-0x8(%rax), %xmm1
    000002a8: 	addsd	%xmm1, %xmm0
    000002ac: 	cmpq	%rdx, %rax
    000002af: 	jne	.Ltmp2354 # Offset: 687
    000002b1: 	movl	%r12d, %eax
    000002b4: 	andl	$-0x2, %eax
    000002b7: 	andl	$0x1, %r12d
    000002bb: 	je	.Ltmp2355 # Offset: 699
.Ltmp2360:
    000002bd: 	cltq
    000002bf: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2355:
    000002c4: 	addq	$0x28, %rsp
    000002c8: 	movq	%rbp, %rdi
    000002cb: 	popq	%rbx
    000002cc: 	popq	%rbp
    000002cd: 	popq	%r12
    000002cf: 	popq	%r13
    000002d1: 	popq	%r14
    000002d3: 	popq	%r15
    000002d5: 	jmp	_Z18check_sum_replace2IdEvT_PKc # TAILCALL  # Offset: 725
.Ltmp2342:
    000002da: 	movq	%rsi, %rcx
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp2356:
    000002e0: 	movsd	init_value(%rip), %xmm1
    000002e8: 	addq	$0x8, %rcx
    000002ec: 	movsd	%xmm1, -0x8(%rcx)
    000002f1: 	cmpq	%rcx, %rdx
    000002f4: 	jne	.Ltmp2356 # Offset: 756
    000002f6: 	jmp	.Ltmp2357 # Offset: 758
.Ltmp2349:
    000002fb: 	leal	-0x1(%r12), %eax
    00000300: 	subl	%ecx, %eax
    00000302: 	addq	%r11, %rax
    00000305: 	leaq	0x8(%rbx,%rax,8), %rax
.Ltmp2358:
    0000030a: 	movsd	init_value(%rip), %xmm1
    00000312: 	addq	$0x8, %rdi
    00000316: 	movsd	%xmm1, -0x8(%rdi)
    0000031b: 	cmpq	%rdi, %rax
    0000031e: 	jne	.Ltmp2358 # Offset: 798
    00000320: 	jmp	.Ltmp2345 # Offset: 800
.Ltmp2346:
    00000325: 	movl	%ecx, %eax
    00000327: 	jmp	.Ltmp2359 # Offset: 807
.Ltmp2352:
    0000032c: 	pxor	%xmm0, %xmm0
    00000330: 	jmp	.Ltmp2355 # Offset: 816
.Ltmp2353:
    00000332: 	pxor	%xmm0, %xmm0
    00000336: 	xorl	%eax, %eax
    00000338: 	jmp	.Ltmp2360 # Offset: 824
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace3IdEvPT_iPKc"

Binary Function "_Z30test_for_loop_blocked_replace4IdEvPT_iPKc" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x33860
  Size        : 0x398
  MaxSize     : 0x3a0
  Offset      : 0x33860
  Section     : .text
  Orc Section : .local.text._Z30test_for_loop_blocked_replace4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %r15d
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%r15d, %r15d
    00000031: 	jle	.Ltmp2361 # Offset: 49
    00000037: 	leal	-0x101(%r12), %eax
    0000003f: 	movapd	DATAat0x36fe0(%rip), %xmm1
    00000047: 	xorl	%r14d, %r14d
    0000004a: 	movapd	DATAat0x36ff0(%rip), %xmm0
    00000052: 	xorb	%al, %al
    00000054: 	leal	-0x100(%r12), %r13d
    0000005c: 	addl	$0x100, %eax
    00000061: 	movl	%eax, 0x8(%rsp)
.Ltmp2377:
    00000065: 	xorl	%ecx, %ecx
    00000067: 	testl	%r13d, %r13d
    0000006a: 	jle	.Ltmp2362 # Offset: 106
    00000070: 	leaq	iterations(%rip), %r9
    00000077: 	movq	%rbx, %rsi
    0000007a: 	xorl	%r8d, %r8d
    0000007d: 	xorl	%eax, %eax
    0000007f: 	leaq	0x800(%rbx), %rdx
    00000086: 	leaq	-0x8(%r9), %r10
.Ltmp2368:
    0000008a: 	leaq	0x8(%rsi), %rdi
    0000008e: 	movq	%rsi, %rcx
    00000091: 	movq	$0x0, (%rsi)
    00000098: 	addq	$0x100, %r8
    0000009f: 	movq	$0x0, 0x7f8(%rsi)
    000000aa: 	andq	$-0x8, %rdi
    000000ae: 	subq	%rdi, %rcx
    000000b1: 	addl	$0x800, %ecx
    000000b7: 	shrl	$0x3, %ecx
    000000ba: 	rep		stosq	%rax, %es:(%rdi)
    000000bd: 	movq	%rsi, %rcx
.Ltmp2363:
    000000c0: 	movups	%xmm1, (%rcx)
    000000c3: 	addq	$0x10, %rcx
    000000c7: 	cmpq	%rcx, %rdx
    000000ca: 	jne	.Ltmp2363 # Offset: 202
    000000cc: 	movq	%rsi, %rcx
    000000cf: 	nop # Size: 1
.Ltmp2364:
    000000d0: 	movups	%xmm0, (%rcx)
    000000d3: 	addq	$0x10, %rcx
    000000d7: 	cmpq	%rdx, %rcx
    000000da: 	jne	.Ltmp2364 # Offset: 218
    000000dc: 	cmpq	%rsi, %r9
    000000df: 	jbe	.Ltmp2365 # Offset: 223
    000000e1: 	cmpq	%rdx, %r10
    000000e4: 	jb	.Ltmp2366 # Offset: 228
.Ltmp2365:
    000000ea: 	movsd	init_value(%rip), %xmm2
    000000f2: 	movq	%rsi, %rcx
    000000f5: 	unpcklpd	%xmm2, %xmm2
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp2367:
    00000100: 	movups	%xmm2, (%rcx)
    00000103: 	addq	$0x10, %rcx
    00000107: 	cmpq	%rcx, %rdx
    0000010a: 	jne	.Ltmp2367 # Offset: 266
.Ltmp2383:
    0000010c: 	addq	$0x800, %rsi
    00000113: 	addq	$0x800, %rdx
    0000011a: 	cmpl	%r8d, %r13d
    0000011d: 	jg	.Ltmp2368 # Offset: 285
    00000123: 	movl	0x8(%rsp), %ecx
.Ltmp2362:
    00000127: 	cmpl	%ecx, %r12d
    0000012a: 	jle	.Ltmp2369 # Offset: 298
    00000130: 	movl	%r12d, %r8d
    00000133: 	movslq	%ecx, %r10
    00000136: 	xorl	%esi, %esi
    00000138: 	movl	%ecx, 0x18(%rsp)
    0000013c: 	subl	%ecx, %r8d
    0000013f: 	leaq	(%rbx,%r10,8), %rdi
    00000143: 	movq	%r10, 0x10(%rsp)
    00000148: 	leal	-0x1(%r8), %eax
    0000014c: 	movl	%r8d, 0x1c(%rsp)
    00000151: 	leaq	0x8(,%rax,8), %rdx
    00000159: 	movl	%eax, 0xc(%rsp)
    0000015d: 	callq	memset@PLT # Offset: 349
    00000162: 	movl	0x1c(%rsp), %r8d
    00000167: 	movl	0xc(%rsp), %r11d
    0000016c: 	movq	0x10(%rsp), %r10
    00000171: 	movl	0x18(%rsp), %ecx
    00000175: 	movq	%rax, %rdi
    00000178: 	cmpl	$0x1, %r8d
    0000017c: 	movapd	DATAat0x36fe0(%rip), %xmm1
    00000184: 	movapd	DATAat0x36ff0(%rip), %xmm0
    0000018c: 	je	.Ltmp2370 # Offset: 396
    00000192: 	movl	%r8d, %edx
    00000195: 	leaq	0x10(%rax), %rsi
    00000199: 	shrl	%edx
    0000019b: 	subl	$0x1, %edx
    0000019e: 	shlq	$0x4, %rdx
    000001a2: 	addq	%rsi, %rdx
.Ltmp2371:
    000001a5: 	movups	%xmm1, (%rax)
    000001a8: 	addq	$0x10, %rax
    000001ac: 	cmpq	%rdx, %rax
    000001af: 	jne	.Ltmp2371 # Offset: 431
    000001b1: 	movl	%r8d, %edx
    000001b4: 	andl	$-0x2, %edx
    000001b7: 	leal	(%rdx,%rcx), %eax
    000001ba: 	cmpl	%edx, %r8d
    000001bd: 	je	.Ltmp2372 # Offset: 445
    000001bf: 	movq	DATAat0x36fe0(%rip), %rdx
    000001c6: 	cltq
    000001c8: 	movq	%rdx, (%rbx,%rax,8)
.Ltmp2372:
    000001cc: 	movl	%r8d, %edx
    000001cf: 	movq	%rdi, %rax
    000001d2: 	shrl	%edx
    000001d4: 	subl	$0x1, %edx
    000001d7: 	shlq	$0x4, %rdx
    000001db: 	addq	%rsi, %rdx
.Ltmp2373:
    000001de: 	movups	%xmm0, (%rax)
    000001e1: 	addq	$0x10, %rax
    000001e5: 	cmpq	%rax, %rdx
    000001e8: 	jne	.Ltmp2373 # Offset: 488
    000001ea: 	movl	%r8d, %edx
    000001ed: 	andl	$-0x2, %edx
    000001f0: 	leal	(%rdx,%rcx), %eax
    000001f3: 	cmpl	%edx, %r8d
    000001f6: 	je	.Ltmp2374 # Offset: 502
.Ltmp2385:
    000001f8: 	movq	DATAat0x36ff0(%rip), %rsi
    000001ff: 	cltq
    00000201: 	movq	%rsi, (%rbx,%rax,8)
.Ltmp2374:
    00000205: 	movl	%r8d, %eax
    00000208: 	leaq	iterations(%rip), %r9
    0000020f: 	addq	%r10, %rax
    00000212: 	leaq	(%rbx,%rax,8), %rdx
    00000216: 	leaq	init_value(%rip), %rax
    0000021d: 	cmpq	%rax, %rdx
    00000220: 	setbe	%al
    00000223: 	cmpq	%r9, %rdi
    00000226: 	setae	%dl
    00000229: 	orb	%dl, %al
    0000022b: 	je	.Ltmp2375 # Offset: 555
    00000231: 	cmpl	$0x2, %r11d
    00000235: 	jbe	.Ltmp2375 # Offset: 565
    0000023b: 	movl	%r8d, %eax
    0000023e: 	movsd	init_value(%rip), %xmm2
    00000246: 	shrl	%eax
    00000248: 	subl	$0x1, %eax
    0000024b: 	unpcklpd	%xmm2, %xmm2
    0000024f: 	shlq	$0x4, %rax
    00000253: 	leaq	0x10(%rdi,%rax), %rax
.Ltmp2376:
    00000258: 	movups	%xmm2, (%rdi)
    0000025b: 	addq	$0x10, %rdi
    0000025f: 	cmpq	%rax, %rdi
    00000262: 	jne	.Ltmp2376 # Offset: 610
    00000264: 	movl	%r8d, %edx
    00000267: 	andl	$-0x2, %edx
    0000026a: 	leal	(%rdx,%rcx), %eax
    0000026d: 	cmpl	%edx, %r8d
    00000270: 	je	.Ltmp2369 # Offset: 624
    00000272: 	movsd	init_value(%rip), %xmm2
    0000027a: 	cltq
    0000027c: 	movsd	%xmm2, (%rbx,%rax,8)
.Ltmp2369:
    00000281: 	addl	$0x1, %r14d
    00000285: 	cmpl	%r15d, %r14d
    00000288: 	jne	.Ltmp2377 # Offset: 648
.Ltmp2361:
    0000028e: 	callq	clock@PLT # Offset: 654
    00000293: 	pxor	%xmm0, %xmm0
    00000297: 	movq	%rbp, %rdi
    0000029a: 	movq	%rax, end_time(%rip)
    000002a1: 	subq	start_time(%rip), %rax
    000002a8: 	cvtsi2sd	%rax, %xmm0
    000002ad: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000002b5: 	callq	_Z13record_resultdPKc # Offset: 693
    000002ba: 	testl	%r12d, %r12d
    000002bd: 	jle	.Ltmp2378 # Offset: 701
    000002c3: 	cmpl	$0x1, %r12d
    000002c7: 	je	.Ltmp2379 # Offset: 711
    000002cd: 	movl	%r12d, %edx
    000002d0: 	movq	%rbx, %rax
    000002d3: 	pxor	%xmm0, %xmm0
    000002d7: 	shrl	%edx
    000002d9: 	subl	$0x1, %edx
    000002dc: 	shlq	$0x4, %rdx
    000002e0: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp2380:
    000002e5: 	movsd	(%rax), %xmm1
    000002e9: 	addq	$0x10, %rax
    000002ed: 	addsd	%xmm1, %xmm0
    000002f1: 	movsd	-0x8(%rax), %xmm1
    000002f6: 	addsd	%xmm1, %xmm0
    000002fa: 	cmpq	%rdx, %rax
    000002fd: 	jne	.Ltmp2380 # Offset: 765
    000002ff: 	movl	%r12d, %eax
    00000302: 	andl	$-0x2, %eax
    00000305: 	andl	$0x1, %r12d
    00000309: 	je	.Ltmp2381 # Offset: 777
.Ltmp2386:
    0000030b: 	cltq
    0000030d: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2381:
    00000312: 	addq	$0x28, %rsp
    00000316: 	movq	%rbp, %rdi
    00000319: 	popq	%rbx
    0000031a: 	popq	%rbp
    0000031b: 	popq	%r12
    0000031d: 	popq	%r13
    0000031f: 	popq	%r14
    00000321: 	popq	%r15
    00000323: 	jmp	_Z18check_sum_replace2IdEvT_PKc # TAILCALL  # Offset: 803
.Ltmp2366:
    00000328: 	movq	%rsi, %rcx
    0000032b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2382:
    00000330: 	movsd	init_value(%rip), %xmm2
    00000338: 	addq	$0x8, %rcx
    0000033c: 	movsd	%xmm2, -0x8(%rcx)
    00000341: 	cmpq	%rcx, %rdx
    00000344: 	jne	.Ltmp2382 # Offset: 836
    00000346: 	jmp	.Ltmp2383 # Offset: 838
.Ltmp2375:
    0000034b: 	leal	-0x1(%r12), %eax
    00000350: 	subl	%ecx, %eax
    00000352: 	addq	%r10, %rax
    00000355: 	leaq	0x8(%rbx,%rax,8), %rax
.Ltmp2384:
    0000035a: 	movsd	init_value(%rip), %xmm2
    00000362: 	addq	$0x8, %rdi
    00000366: 	movsd	%xmm2, -0x8(%rdi)
    0000036b: 	cmpq	%rdi, %rax
    0000036e: 	jne	.Ltmp2384 # Offset: 878
    00000370: 	jmp	.Ltmp2369 # Offset: 880
.Ltmp2370:
    00000375: 	movq	DATAat0x36fe0(%rip), %rax
    0000037c: 	movq	%rax, (%rbx,%r10,8)
    00000380: 	movl	%ecx, %eax
    00000382: 	jmp	.Ltmp2385 # Offset: 898
.Ltmp2378:
    00000387: 	pxor	%xmm0, %xmm0
    0000038b: 	jmp	.Ltmp2381 # Offset: 907
.Ltmp2379:
    0000038d: 	pxor	%xmm0, %xmm0
    00000391: 	xorl	%eax, %eax
    00000393: 	jmp	.Ltmp2386 # Offset: 915
DWARF CFI Instructions:
    <empty>
End of Function "_Z30test_for_loop_blocked_replace4IdEvPT_iPKc"

Binary Function "_Z28test_for_loop_bzero_replace4IdEvPT_iPKc" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x33c00
  Size        : 0x279
  MaxSize     : 0x280
  Offset      : 0x33c00
  Section     : .text
  Orc Section : .local.text._Z28test_for_loop_bzero_replace4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp2387 # Offset: 49
    00000037: 	movslq	%r14d, %r13
    0000003a: 	movl	%r14d, %edx
    0000003d: 	leaq	(,%r13,8), %rax
    00000045: 	leaq	(%rbx,%rdx,8), %rsi
    00000049: 	movl	%r14d, %r13d
    0000004c: 	movq	%rax, 0x8(%rsp)
    00000051: 	movl	%r14d, %eax
    00000054: 	leaq	init_value(%rip), %rdx
    0000005b: 	andl	$-0x2, %r13d
    0000005f: 	shrl	%eax
    00000061: 	subl	$0x1, %eax
    00000064: 	shlq	$0x4, %rax
    00000068: 	cmpq	%rdx, %rsi
    0000006b: 	setbe	%r12b
    0000006f: 	addq	$0x8, %rdx
    00000073: 	leaq	0x10(%rbx,%rax), %r15
    00000078: 	cmpq	%rdx, %rbx
    0000007b: 	leal	-0x1(%r14), %eax
    0000007f: 	setae	%dl
    00000082: 	orl	%edx, %r12d
    00000085: 	cmpl	$0x2, %eax
    00000088: 	leaq	0x8(%rbx,%rax,8), %rax
    0000008d: 	seta	%dl
    00000090: 	movq	%rax, (%rsp)
    00000094: 	andl	%edx, %r12d
    00000097: 	movslq	%r13d, %rdx
    0000009a: 	movb	%r12b, 0x17(%rsp)
    0000009f: 	leaq	(%rbx,%rdx,8), %rbp
    000000a3: 	xorl	%r12d, %r12d
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2397:
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	xorl	%esi, %esi
    000000b7: 	movq	%rbx, %rdi
    000000ba: 	callq	memset@PLT # Offset: 186
    000000bf: 	movq	DATAat0x36ff0(%rip), %rax
    000000c6: 	testl	%r14d, %r14d
    000000c9: 	movapd	DATAat0x36ff0(%rip), %xmm4
    000000d1: 	movapd	DATAat0x36fe0(%rip), %xmm3
    000000d9: 	movq	%rax, %xmm2
    000000de: 	movq	DATAat0x36fe0(%rip), %rax
    000000e5: 	movq	%rax, %xmm1
    000000ea: 	jle	.Ltmp2388 # Offset: 234
    000000f0: 	cmpl	$0x1, %r14d
    000000f4: 	je	.Ltmp2389 # Offset: 244
    000000fa: 	movq	%rbx, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp2390:
    00000100: 	movups	%xmm3, (%rax)
    00000103: 	addq	$0x10, %rax
    00000107: 	cmpq	%rax, %r15
    0000010a: 	jne	.Ltmp2390 # Offset: 266
    0000010c: 	movslq	%r13d, %rax
    0000010f: 	cmpl	%r13d, %r14d
    00000112: 	je	.Ltmp2391 # Offset: 274
.Ltmp2404:
    00000114: 	movsd	%xmm1, (%rbx,%rax,8)
    00000119: 	cmpl	$0x1, %r14d
    0000011d: 	je	.Ltmp2392 # Offset: 285
.Ltmp2391:
    00000123: 	movq	%rbx, %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2393:
    00000130: 	movups	%xmm4, (%rax)
    00000133: 	addq	$0x10, %rax
    00000137: 	cmpq	%r15, %rax
    0000013a: 	jne	.Ltmp2393 # Offset: 314
    0000013c: 	movslq	%r13d, %rax
    0000013f: 	cmpl	%r13d, %r14d
    00000142: 	je	.Ltmp2394 # Offset: 322
.Ltmp2402:
    00000144: 	movsd	%xmm2, (%rbx,%rax,8)
.Ltmp2394:
    00000149: 	cmpb	$0x0, 0x17(%rsp)
    0000014e: 	je	.Ltmp2395 # Offset: 334
    00000154: 	movsd	init_value(%rip), %xmm0
    0000015c: 	movq	%rbx, %rax
    0000015f: 	unpcklpd	%xmm0, %xmm0
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2396:
    00000168: 	movups	%xmm0, (%rax)
    0000016b: 	addq	$0x10, %rax
    0000016f: 	cmpq	%r15, %rax
    00000172: 	jne	.Ltmp2396 # Offset: 370
    00000174: 	cmpl	%r13d, %r14d
    00000177: 	je	.Ltmp2388 # Offset: 375
    00000179: 	movsd	init_value(%rip), %xmm0
    00000181: 	movsd	%xmm0, (%rbp)
.Ltmp2388:
    00000186: 	addl	$0x1, %r12d
    0000018a: 	cmpl	%r12d, iterations(%rip)
    00000191: 	jg	.Ltmp2397 # Offset: 401
.Ltmp2387:
    00000197: 	callq	clock@PLT # Offset: 407
    0000019c: 	movq	0x18(%rsp), %rdi
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	movq	%rax, end_time(%rip)
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	cvtsi2sd	%rax, %xmm0
    000001b8: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001c0: 	callq	_Z13record_resultdPKc # Offset: 448
    000001c5: 	testl	%r14d, %r14d
    000001c8: 	jle	.Ltmp2398 # Offset: 456
    000001ce: 	cmpl	$0x1, %r14d
    000001d2: 	je	.Ltmp2399 # Offset: 466
    000001d8: 	movl	%r14d, %edx
    000001db: 	movq	%rbx, %rax
    000001de: 	pxor	%xmm0, %xmm0
    000001e2: 	shrl	%edx
    000001e4: 	subl	$0x1, %edx
    000001e7: 	shlq	$0x4, %rdx
    000001eb: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp2400:
    000001f0: 	movsd	(%rax), %xmm1
    000001f4: 	addq	$0x10, %rax
    000001f8: 	addsd	%xmm1, %xmm0
    000001fc: 	movsd	-0x8(%rax), %xmm1
    00000201: 	addsd	%xmm1, %xmm0
    00000205: 	cmpq	%rax, %rdx
    00000208: 	jne	.Ltmp2400 # Offset: 520
    0000020a: 	movl	%r14d, %eax
    0000020d: 	andl	$-0x2, %eax
    00000210: 	andl	$0x1, %r14d
    00000214: 	je	.Ltmp2401 # Offset: 532
.Ltmp2405:
    00000216: 	cltq
    00000218: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2401:
    0000021d: 	movq	0x18(%rsp), %rdi
    00000222: 	addq	$0x28, %rsp
    00000226: 	popq	%rbx
    00000227: 	popq	%rbp
    00000228: 	popq	%r12
    0000022a: 	popq	%r13
    0000022c: 	popq	%r14
    0000022e: 	popq	%r15
    00000230: 	jmp	_Z18check_sum_replace2IdEvT_PKc # TAILCALL  # Offset: 560
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp2392:
    00000238: 	xorl	%eax, %eax
    0000023a: 	jmp	.Ltmp2402 # Offset: 570
    0000023f: 	nop # Size: 1
.Ltmp2395:
    00000240: 	movq	%rbx, %rax
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2403:
    00000248: 	movsd	init_value(%rip), %xmm0
    00000250: 	addq	$0x8, %rax
    00000254: 	movsd	%xmm0, -0x8(%rax)
    00000259: 	cmpq	%rax, (%rsp)
    0000025d: 	jne	.Ltmp2403 # Offset: 605
    0000025f: 	jmp	.Ltmp2388 # Offset: 607
.Ltmp2389:
    00000264: 	xorl	%eax, %eax
    00000266: 	jmp	.Ltmp2404 # Offset: 614
.Ltmp2398:
    0000026b: 	pxor	%xmm0, %xmm0
    0000026f: 	jmp	.Ltmp2401 # Offset: 623
.Ltmp2399:
    00000271: 	pxor	%xmm0, %xmm0
    00000275: 	xorl	%eax, %eax
    00000277: 	jmp	.Ltmp2405 # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_for_loop_bzero_replace4IdEvPT_iPKc"

Binary Function "_Z29test_for_loop_memset_replace4IdEvPT_iPKc" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x33e80
  Size        : 0x279
  MaxSize     : 0x280
  Offset      : 0x33e80
  Section     : .text
  Orc Section : .local.text._Z29test_for_loop_memset_replace4IdEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp2406 # Offset: 49
    00000037: 	movslq	%r14d, %r13
    0000003a: 	movl	%r14d, %edx
    0000003d: 	leaq	(,%r13,8), %rax
    00000045: 	leaq	(%rbx,%rdx,8), %rsi
    00000049: 	movl	%r14d, %r13d
    0000004c: 	movq	%rax, 0x8(%rsp)
    00000051: 	movl	%r14d, %eax
    00000054: 	leaq	init_value(%rip), %rdx
    0000005b: 	andl	$-0x2, %r13d
    0000005f: 	shrl	%eax
    00000061: 	subl	$0x1, %eax
    00000064: 	shlq	$0x4, %rax
    00000068: 	cmpq	%rdx, %rsi
    0000006b: 	setbe	%r12b
    0000006f: 	addq	$0x8, %rdx
    00000073: 	leaq	0x10(%rbx,%rax), %r15
    00000078: 	cmpq	%rdx, %rbx
    0000007b: 	leal	-0x1(%r14), %eax
    0000007f: 	setae	%dl
    00000082: 	orl	%edx, %r12d
    00000085: 	cmpl	$0x2, %eax
    00000088: 	leaq	0x8(%rbx,%rax,8), %rax
    0000008d: 	seta	%dl
    00000090: 	movq	%rax, (%rsp)
    00000094: 	andl	%edx, %r12d
    00000097: 	movslq	%r13d, %rdx
    0000009a: 	movb	%r12b, 0x17(%rsp)
    0000009f: 	leaq	(%rbx,%rdx,8), %rbp
    000000a3: 	xorl	%r12d, %r12d
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2416:
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	xorl	%esi, %esi
    000000b7: 	movq	%rbx, %rdi
    000000ba: 	callq	memset@PLT # Offset: 186
    000000bf: 	movq	DATAat0x36ff0(%rip), %rax
    000000c6: 	testl	%r14d, %r14d
    000000c9: 	movapd	DATAat0x36ff0(%rip), %xmm4
    000000d1: 	movapd	DATAat0x36fe0(%rip), %xmm3
    000000d9: 	movq	%rax, %xmm2
    000000de: 	movq	DATAat0x36fe0(%rip), %rax
    000000e5: 	movq	%rax, %xmm1
    000000ea: 	jle	.Ltmp2407 # Offset: 234
    000000f0: 	cmpl	$0x1, %r14d
    000000f4: 	je	.Ltmp2408 # Offset: 244
    000000fa: 	movq	%rbx, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp2409:
    00000100: 	movups	%xmm3, (%rax)
    00000103: 	addq	$0x10, %rax
    00000107: 	cmpq	%rax, %r15
    0000010a: 	jne	.Ltmp2409 # Offset: 266
    0000010c: 	movslq	%r13d, %rax
    0000010f: 	cmpl	%r13d, %r14d
    00000112: 	je	.Ltmp2410 # Offset: 274
.Ltmp2423:
    00000114: 	movsd	%xmm1, (%rbx,%rax,8)
    00000119: 	cmpl	$0x1, %r14d
    0000011d: 	je	.Ltmp2411 # Offset: 285
.Ltmp2410:
    00000123: 	movq	%rbx, %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2412:
    00000130: 	movups	%xmm4, (%rax)
    00000133: 	addq	$0x10, %rax
    00000137: 	cmpq	%r15, %rax
    0000013a: 	jne	.Ltmp2412 # Offset: 314
    0000013c: 	movslq	%r13d, %rax
    0000013f: 	cmpl	%r13d, %r14d
    00000142: 	je	.Ltmp2413 # Offset: 322
.Ltmp2421:
    00000144: 	movsd	%xmm2, (%rbx,%rax,8)
.Ltmp2413:
    00000149: 	cmpb	$0x0, 0x17(%rsp)
    0000014e: 	je	.Ltmp2414 # Offset: 334
    00000154: 	movsd	init_value(%rip), %xmm0
    0000015c: 	movq	%rbx, %rax
    0000015f: 	unpcklpd	%xmm0, %xmm0
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2415:
    00000168: 	movups	%xmm0, (%rax)
    0000016b: 	addq	$0x10, %rax
    0000016f: 	cmpq	%r15, %rax
    00000172: 	jne	.Ltmp2415 # Offset: 370
    00000174: 	cmpl	%r13d, %r14d
    00000177: 	je	.Ltmp2407 # Offset: 375
    00000179: 	movsd	init_value(%rip), %xmm0
    00000181: 	movsd	%xmm0, (%rbp)
.Ltmp2407:
    00000186: 	addl	$0x1, %r12d
    0000018a: 	cmpl	%r12d, iterations(%rip)
    00000191: 	jg	.Ltmp2416 # Offset: 401
.Ltmp2406:
    00000197: 	callq	clock@PLT # Offset: 407
    0000019c: 	movq	0x18(%rsp), %rdi
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	movq	%rax, end_time(%rip)
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	cvtsi2sd	%rax, %xmm0
    000001b8: 	divsd	DATAat0x36eb8(%rip), %xmm0
    000001c0: 	callq	_Z13record_resultdPKc # Offset: 448
    000001c5: 	testl	%r14d, %r14d
    000001c8: 	jle	.Ltmp2417 # Offset: 456
    000001ce: 	cmpl	$0x1, %r14d
    000001d2: 	je	.Ltmp2418 # Offset: 466
    000001d8: 	movl	%r14d, %edx
    000001db: 	movq	%rbx, %rax
    000001de: 	pxor	%xmm0, %xmm0
    000001e2: 	shrl	%edx
    000001e4: 	subl	$0x1, %edx
    000001e7: 	shlq	$0x4, %rdx
    000001eb: 	leaq	0x10(%rbx,%rdx), %rdx
.Ltmp2419:
    000001f0: 	movsd	(%rax), %xmm1
    000001f4: 	addq	$0x10, %rax
    000001f8: 	addsd	%xmm1, %xmm0
    000001fc: 	movsd	-0x8(%rax), %xmm1
    00000201: 	addsd	%xmm1, %xmm0
    00000205: 	cmpq	%rax, %rdx
    00000208: 	jne	.Ltmp2419 # Offset: 520
    0000020a: 	movl	%r14d, %eax
    0000020d: 	andl	$-0x2, %eax
    00000210: 	andl	$0x1, %r14d
    00000214: 	je	.Ltmp2420 # Offset: 532
.Ltmp2424:
    00000216: 	cltq
    00000218: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2420:
    0000021d: 	movq	0x18(%rsp), %rdi
    00000222: 	addq	$0x28, %rsp
    00000226: 	popq	%rbx
    00000227: 	popq	%rbp
    00000228: 	popq	%r12
    0000022a: 	popq	%r13
    0000022c: 	popq	%r14
    0000022e: 	popq	%r15
    00000230: 	jmp	_Z18check_sum_replace2IdEvT_PKc # TAILCALL  # Offset: 560
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp2411:
    00000238: 	xorl	%eax, %eax
    0000023a: 	jmp	.Ltmp2421 # Offset: 570
    0000023f: 	nop # Size: 1
.Ltmp2414:
    00000240: 	movq	%rbx, %rax
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2422:
    00000248: 	movsd	init_value(%rip), %xmm0
    00000250: 	addq	$0x8, %rax
    00000254: 	movsd	%xmm0, -0x8(%rax)
    00000259: 	cmpq	%rax, (%rsp)
    0000025d: 	jne	.Ltmp2422 # Offset: 605
    0000025f: 	jmp	.Ltmp2407 # Offset: 607
.Ltmp2408:
    00000264: 	xorl	%eax, %eax
    00000266: 	jmp	.Ltmp2423 # Offset: 614
.Ltmp2417:
    0000026b: 	pxor	%xmm0, %xmm0
    0000026f: 	jmp	.Ltmp2420 # Offset: 623
.Ltmp2418:
    00000271: 	pxor	%xmm0, %xmm0
    00000275: 	xorl	%eax, %eax
    00000277: 	jmp	.Ltmp2424 # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_for_loop_memset_replace4IdEvPT_iPKc"

Binary Function "_Z26check_sum_partial2_replaceIiEvT_PKc" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x34100
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0x34100
  Section     : .text
  Orc Section : .local.text._Z26check_sum_partial2_replaceIiEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	subq	$0x8, %rsp
    0000000f: 	cvttsd2si	init_value(%rip), %ebp
    00000017: 	imull	$0x3d0900, %ebp, %ebp
    0000001d: 	cmpl	%edi, %ebp
    0000001f: 	jne	.Ltmp2425 # Offset: 31
    00000021: 	addq	$0x8, %rsp
    00000025: 	popq	%rbp
    00000026: 	popq	%r12
    00000028: 	popq	%r13
    0000002a: 	popq	%r14
    0000002c: 	retq # Offset: 44
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp2425:
    00000030: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000037: 	movq	%rsi, %r12
    0000003a: 	movl	%edi, %r14d
    0000003d: 	movl	$0x5, %edx
    00000042: 	leaq	DATAat0x35004(%rip), %rsi
    00000049: 	movq	%r13, %rdi
    0000004c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 76
    00000051: 	testq	%r12, %r12
    00000054: 	je	.Ltmp2426 # Offset: 84
    0000005a: 	movq	%r12, %rdi
    0000005d: 	callq	strlen@PLT # Offset: 93
    00000062: 	movq	%r12, %rsi
    00000065: 	movq	%r13, %rdi
    00000068: 	movq	%rax, %rdx
    0000006b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 107
.Ltmp2430:
    00000070: 	movl	$0xd, %edx
    00000075: 	leaq	DATAat0x3500a(%rip), %rsi
    0000007c: 	movq	%r13, %rdi
    0000007f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 127
    00000084: 	movl	%r14d, %esi
    00000087: 	movq	%r13, %rdi
    0000008a: 	callq	_ZNSolsEi@PLT # Offset: 138
    0000008f: 	movl	$0xb, %edx
    00000094: 	leaq	DATAat0x35018(%rip), %rsi
    0000009b: 	movq	%rax, %r12
    0000009e: 	movq	%rax, %rdi
    000000a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 161
    000000a6: 	movl	%ebp, %esi
    000000a8: 	movq	%r12, %rdi
    000000ab: 	callq	_ZNSolsEi@PLT # Offset: 171
    000000b0: 	movq	%rax, %rbp
    000000b3: 	movq	(%rax), %rax
    000000b6: 	movq	-0x18(%rax), %rax
    000000ba: 	movq	0xf0(%rbp,%rax), %r12
    000000c2: 	testq	%r12, %r12
    000000c5: 	je	.Ltmp2427 # Offset: 197
    000000c7: 	cmpb	$0x0, 0x38(%r12)
    000000cd: 	je	.Ltmp2428 # Offset: 205
    000000cf: 	movsbl	0x43(%r12), %esi
.Ltmp2429:
    000000d5: 	movq	%rbp, %rdi
    000000d8: 	callq	_ZNSo3putEc@PLT # Offset: 216
    000000dd: 	addq	$0x8, %rsp
    000000e1: 	popq	%rbp
    000000e2: 	movq	%rax, %rdi
    000000e5: 	popq	%r12
    000000e7: 	popq	%r13
    000000e9: 	popq	%r14
    000000eb: 	jmp	_ZNSo5flushEv@PLT # TAILCALL  # Offset: 235
.Ltmp2428:
    000000f0: 	movq	%r12, %rdi
    000000f3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 243
    000000f8: 	movq	(%r12), %rax
    000000fc: 	movl	$0xa, %esi
    00000101: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000108: 	movq	0x30(%rax), %rax
    0000010c: 	cmpq	%rdx, %rax
    0000010f: 	je	.Ltmp2429 # Offset: 271
    00000111: 	movq	%r12, %rdi
    00000114: 	callq	*%rax # Offset: 276
    00000116: 	movsbl	%al, %esi
    00000119: 	jmp	.Ltmp2429 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2426:
    00000120: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000127: 	movq	-0x18(%rax), %rdi
    0000012b: 	addq	%r13, %rdi
    0000012e: 	movl	0x20(%rdi), %esi
    00000131: 	orl	$0x1, %esi
    00000134: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 308
    00000139: 	jmp	.Ltmp2430 # Offset: 313
.Ltmp2427:
    0000013e: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 318
DWARF CFI Instructions:
    <empty>
End of Function "_Z26check_sum_partial2_replaceIiEvT_PKc"

Binary Function "_Z26check_sum_partial2_replaceIdEvT_PKc" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x34250
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x34250
  Section     : .text
  Orc Section : .local.text._Z26check_sum_partial2_replaceIdEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movapd	%xmm0, %xmm4
    0000000a: 	movapd	%xmm0, %xmm1
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	subq	$0x18, %rsp
    00000016: 	movsd	DATAat0x36ed0(%rip), %xmm2
    0000001e: 	movq	DATAat0x36f60(%rip), %xmm3
    00000026: 	mulsd	init_value(%rip), %xmm2
    0000002e: 	andpd	%xmm3, %xmm4
    00000032: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000003a: 	subsd	%xmm2, %xmm1
    0000003e: 	jbe	.Ltmp2431 # Offset: 62
    00000040: 	divsd	%xmm0, %xmm1
.Ltmp2431:
    00000044: 	andpd	%xmm3, %xmm1
    00000048: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000050: 	comisd	%xmm1, %xmm3
    00000054: 	jbe	.Ltmp2432 # Offset: 84
    00000056: 	addq	$0x18, %rsp
    0000005a: 	popq	%rbp
    0000005b: 	popq	%r12
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp2432:
    00000060: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000067: 	movl	$0x5, %edx
    0000006c: 	movsd	%xmm2, (%rsp)
    00000071: 	leaq	DATAat0x35004(%rip), %rsi
    00000078: 	movq	%r12, %rdi
    0000007b: 	movsd	%xmm0, 0x8(%rsp)
    00000081: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 129
    00000086: 	testq	%rbp, %rbp
    00000089: 	movsd	(%rsp), %xmm2
    0000008e: 	movsd	0x8(%rsp), %xmm0
    00000094: 	je	.Ltmp2433 # Offset: 148
    0000009a: 	movq	%rbp, %rdi
    0000009d: 	movsd	%xmm0, 0x8(%rsp)
    000000a3: 	movsd	%xmm2, (%rsp)
    000000a8: 	callq	strlen@PLT # Offset: 168
    000000ad: 	movq	%rbp, %rsi
    000000b0: 	movq	%r12, %rdi
    000000b3: 	movq	%rax, %rdx
    000000b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 182
    000000bb: 	movsd	0x8(%rsp), %xmm0
    000000c1: 	movsd	(%rsp), %xmm2
.Ltmp2434:
    000000c6: 	movl	$0xd, %edx
    000000cb: 	leaq	DATAat0x3500a(%rip), %rsi
    000000d2: 	movq	%r12, %rdi
    000000d5: 	movsd	%xmm2, (%rsp)
    000000da: 	movsd	%xmm0, 0x8(%rsp)
    000000e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 224
    000000e5: 	movsd	0x8(%rsp), %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 238
    000000f3: 	movl	$0xb, %edx
    000000f8: 	leaq	DATAat0x35018(%rip), %rsi
    000000ff: 	movq	%rax, %rdi
    00000102: 	movq	%rax, %rbp
    00000105: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 261
    0000010a: 	movsd	(%rsp), %xmm2
    0000010f: 	movq	%rbp, %rdi
    00000112: 	movapd	%xmm2, %xmm0
    00000116: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 278
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbp
    00000120: 	movq	%rax, %rdi
    00000123: 	popq	%r12
    00000125: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2433:
    00000130: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000137: 	movq	-0x18(%rax), %rdi
    0000013b: 	addq	%r12, %rdi
    0000013e: 	movl	0x20(%rdi), %esi
    00000141: 	orl	$0x1, %esi
    00000144: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 324
    00000149: 	movsd	(%rsp), %xmm2
    0000014e: 	movsd	0x8(%rsp), %xmm0
    00000154: 	jmp	.Ltmp2434 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z26check_sum_partial2_replaceIdEvT_PKc"

Binary Function "_Z16check_sum_offsetIdEvT_PKc" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x343b0
  Size        : 0x169
  MaxSize     : 0x169
  Offset      : 0x343b0
  Section     : .text
  Orc Section : .local.text._Z16check_sum_offsetIdEvT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movapd	%xmm0, %xmm4
    0000000a: 	movapd	%xmm0, %xmm2
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	subq	$0x18, %rsp
    00000016: 	movsd	DATAat0x36f00(%rip), %xmm1
    0000001e: 	movq	DATAat0x36f60(%rip), %xmm3
    00000026: 	mulsd	init_value(%rip), %xmm1
    0000002e: 	addsd	DATAat0x36f08(%rip), %xmm1
    00000036: 	mulsd	DATAat0x36f10(%rip), %xmm1
    0000003e: 	andpd	%xmm3, %xmm4
    00000042: 	comisd	DATAat0x36ed8(%rip), %xmm4
    0000004a: 	subsd	%xmm1, %xmm2
    0000004e: 	jbe	.Ltmp2435 # Offset: 78
    00000050: 	divsd	%xmm0, %xmm2
.Ltmp2435:
    00000054: 	andpd	%xmm3, %xmm2
    00000058: 	movsd	DATAat0x36ee0(%rip), %xmm3
    00000060: 	comisd	%xmm2, %xmm3
    00000064: 	jbe	.Ltmp2436 # Offset: 100
    00000066: 	addq	$0x18, %rsp
    0000006a: 	popq	%rbp
    0000006b: 	popq	%r12
    0000006d: 	retq # Offset: 109
    0000006e: 	nop # Size: 2
.Ltmp2436:
    00000070: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000077: 	movl	$0x5, %edx
    0000007c: 	movsd	%xmm1, (%rsp)
    00000081: 	leaq	DATAat0x35004(%rip), %rsi
    00000088: 	movq	%r12, %rdi
    0000008b: 	movsd	%xmm0, 0x8(%rsp)
    00000091: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 145
    00000096: 	testq	%rbp, %rbp
    00000099: 	movsd	(%rsp), %xmm1
    0000009e: 	movsd	0x8(%rsp), %xmm0
    000000a4: 	je	.Ltmp2437 # Offset: 164
    000000aa: 	movq	%rbp, %rdi
    000000ad: 	movsd	%xmm0, 0x8(%rsp)
    000000b3: 	movsd	%xmm1, (%rsp)
    000000b8: 	callq	strlen@PLT # Offset: 184
    000000bd: 	movq	%rbp, %rsi
    000000c0: 	movq	%r12, %rdi
    000000c3: 	movq	%rax, %rdx
    000000c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 198
    000000cb: 	movsd	0x8(%rsp), %xmm0
    000000d1: 	movsd	(%rsp), %xmm1
.Ltmp2438:
    000000d6: 	movl	$0xd, %edx
    000000db: 	leaq	DATAat0x3500a(%rip), %rsi
    000000e2: 	movq	%r12, %rdi
    000000e5: 	movsd	%xmm1, (%rsp)
    000000ea: 	movsd	%xmm0, 0x8(%rsp)
    000000f0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 240
    000000f5: 	movsd	0x8(%rsp), %xmm0
    000000fb: 	movq	%r12, %rdi
    000000fe: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 254
    00000103: 	movl	$0xb, %edx
    00000108: 	leaq	DATAat0x35018(%rip), %rsi
    0000010f: 	movq	%rax, %rdi
    00000112: 	movq	%rax, %rbp
    00000115: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 277
    0000011a: 	movsd	(%rsp), %xmm1
    0000011f: 	movq	%rbp, %rdi
    00000122: 	movapd	%xmm1, %xmm0
    00000126: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 294
    0000012b: 	addq	$0x18, %rsp
    0000012f: 	popq	%rbp
    00000130: 	movq	%rax, %rdi
    00000133: 	popq	%r12
    00000135: 	jmp	"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0/1" # TAILCALL  # Offset: 309
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2437:
    00000140: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000147: 	movq	-0x18(%rax), %rdi
    0000014b: 	addq	%r12, %rdi
    0000014e: 	movl	0x20(%rdi), %esi
    00000151: 	orl	$0x1, %esi
    00000154: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 340
    00000159: 	movsd	(%rsp), %xmm1
    0000015e: 	movsd	0x8(%rsp), %xmm0
    00000164: 	jmp	.Ltmp2438 # Offset: 356
DWARF CFI Instructions:
    <empty>
End of Function "_Z16check_sum_offsetIdEvT_PKc"

Binary Function "_fini" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x3451c
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x3451c
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 135 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2394 instructions were shortened
BOLT-INFO: removed 165 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 130 out of 158 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x6e05e60
