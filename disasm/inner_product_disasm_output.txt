BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x37028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x36ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x13d0
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x13d0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x32150(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x32136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIaEvv # Offset: 100
    00000069: 	callq	_Z11TestOneTypeIhEvv # Offset: 105
    0000006e: 	callq	_Z11TestOneTypeIsEvv # Offset: 110
    00000073: 	callq	_Z11TestOneTypeItEvv # Offset: 115
    00000078: 	callq	_Z11TestOneTypeIiEvv # Offset: 120
    0000007d: 	callq	_Z11TestOneTypeIjEvv # Offset: 125
    00000082: 	movl	iterations(%rip), %edx
    00000088: 	testl	%edx, %edx
    0000008a: 	leal	0x3(%rdx), %eax
    0000008d: 	cmovnsl	%edx, %eax
    00000090: 	sarl	$0x2, %eax
    00000093: 	movl	%eax, iterations(%rip)
    00000099: 	callq	_Z11TestOneTypeIlEvv # Offset: 153
    0000009e: 	callq	_Z11TestOneTypeImEvv # Offset: 158
    000000a3: 	callq	_Z11TestOneTypeIfEvv # Offset: 163
    000000a8: 	callq	_Z11TestOneTypeIdEvv # Offset: 168
    000000ad: 	callq	_Z11TestOneTypeIeEvv # Offset: 173
    000000b2: 	popq	%rbx
    000000b3: 	xorl	%eax, %eax
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	retq # Offset: 188
.Ltmp3:
    000000bd: 	movq	0x8(%r14), %rdi
    000000c1: 	movl	$0xa, %edx
    000000c6: 	xorl	%esi, %esi
    000000c8: 	callq	strtol@PLT # Offset: 200
    000000cd: 	movl	%eax, iterations(%rip)
    000000d3: 	cmpl	$0x2, %r13d
    000000d7: 	jle	.Ltmp4 # Offset: 215
    000000d9: 	movq	0x10(%r14), %rdi
    000000dd: 	movl	$0xa, %edx
    000000e2: 	xorl	%esi, %esi
    000000e4: 	callq	strtol@PLT # Offset: 228
    000000e9: 	movl	%eax, init_value(%rip)
    000000ef: 	jmp	.Ltmp4 # Offset: 239
.Ltmp1:
    000000f4: 	leaq	DATAat0x32136(%rip), %rsi
    000000fb: 	movl	$0x1, %edi
    00000100: 	xorl	%eax, %eax
    00000102: 	callq	__printf_chk@PLT # Offset: 258
    00000107: 	jmp	.Ltmp4 # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15c0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15c0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x36fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x15f0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x15f0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x36fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1620
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1620
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x36ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1660
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/inner_product.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x16b0
  Size        : 0x1fc
  MaxSize     : 0x200
  Offset      : 0x16b0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x28, %rsp
    00000011: 	movq	0x10(%rdi), %rcx
    00000015: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000001c: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r13
    00000023: 	movq	(%rdi), %rbp
    00000026: 	movq	%rcx, 0x10(%rsp)
    0000002b: 	movq	0x18(%rdi), %rcx
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000003b: 	leaq	0x8(%rcx), %r12
    0000003f: 	movq	%rcx, 0x18(%rsp)
    00000044: 	movq	%rax, (%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp9 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp12:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp11:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp10 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp11 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp12 # Offset: 142
.Ltmp9:
    00000090: 	movq	0x18(%rsp), %rcx
    00000095: 	cmpq	%rcx, (%rsp)
    00000099: 	je	.Ltmp13 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp14 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp16:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp15 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x10(%rsp)
    000000d7: 	jne	.Ltmp16 # Offset: 215
.Ltmp14:
    000000d9: 	cmpq	%r13, 0x8(%rsp)
    000000de: 	je	.Ltmp17 # Offset: 222
.Ltmp19:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp18 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x8(%rsp)
    00000107: 	jne	.Ltmp19 # Offset: 263
.Ltmp17:
    00000109: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000110: 	leaq	0x8(%rax), %rbp
    00000114: 	movq	0x18(%r15), %rax
    00000118: 	leaq	0x8(%rax), %rbx
    0000011c: 	cmpq	%rbx, %rbp
    0000011f: 	jbe	.Ltmp20 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp21:
    00000128: 	movq	(%rbx), %rdi
    0000012b: 	movl	$0x200, %esi
    00000130: 	addq	$0x8, %rbx
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
    00000139: 	cmpq	%rbx, %rbp
    0000013c: 	ja	.Ltmp21 # Offset: 316
.Ltmp20:
    0000013e: 	movdqu	(%r15), %xmm0
    00000143: 	movaps	%xmm0, _Z7gLabelsB5cxx11+48(%rip)
    0000014a: 	movdqu	0x10(%r15), %xmm1
    00000150: 	movaps	%xmm1, _Z7gLabelsB5cxx11+64(%rip)
    00000157: 	addq	$0x28, %rsp
    0000015b: 	popq	%rbx
    0000015c: 	popq	%rbp
    0000015d: 	popq	%r12
    0000015f: 	popq	%r13
    00000161: 	popq	%r14
    00000163: 	popq	%r15
    00000165: 	retq # Offset: 357
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp22:
    00000170: 	addq	$0x20, %rbp
.Ltmp13:
    00000174: 	cmpq	%rbp, 0x8(%rsp)
    00000179: 	je	.Ltmp17 # Offset: 377
.Ltmp23:
    0000017b: 	movq	(%rbp), %rdi
    0000017f: 	leaq	0x10(%rbp), %rax
    00000183: 	cmpq	%rax, %rdi
    00000186: 	je	.Ltmp22 # Offset: 390
    00000188: 	movq	0x10(%rbp), %rax
    0000018c: 	addq	$0x20, %rbp
    00000190: 	leaq	0x1(%rax), %rsi
    00000194: 	callq	_ZdlPvm@PLT # Offset: 404
    00000199: 	cmpq	%rbp, 0x8(%rsp)
    0000019e: 	jne	.Ltmp23 # Offset: 414
    000001a0: 	jmp	.Ltmp17 # Offset: 416
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp10:
    000001a8: 	addq	$0x20, %r14
    000001ac: 	cmpq	%r14, %rbx
    000001af: 	jne	.Ltmp11 # Offset: 431
    000001b5: 	addq	$0x8, %r12
    000001b9: 	cmpq	%r12, (%rsp)
    000001bd: 	ja	.Ltmp12 # Offset: 445
    000001c3: 	jmp	.Ltmp9 # Offset: 451
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp15:
    000001d0: 	addq	$0x20, %rbp
    000001d4: 	cmpq	%rbp, 0x10(%rsp)
    000001d9: 	jne	.Ltmp16 # Offset: 473
    000001df: 	jmp	.Ltmp14 # Offset: 479
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp18:
    000001e8: 	addq	$0x20, %r13
    000001ec: 	cmpq	%r13, 0x8(%rsp)
    000001f1: 	jne	.Ltmp19 # Offset: 497
    000001f7: 	jmp	.Ltmp17 # Offset: 503
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x18b0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x18b0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp24 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp25 # Offset: 38
.Ltmp24:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp26 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp25:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp26:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x32008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1950
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1950
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp27 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp28 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp29:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp29 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp42:
    00000069: 	leaq	DATAat0x322b7(%rip), %rbp
    00000070: 	leaq	DATAat0x32028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x32068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp30 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x32608(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x32098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x32600(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp31 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp35:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp32 # Offset: 244
    000000fa: 	movq	DATAat0x325f0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp36:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x325f0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp33 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp33:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x32137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x32608(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp34 # Offset: 398
.Ltmp31:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp35 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp36 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp32:
    000001c8: 	movq	DATAat0x325f8(%rip), %rsi
    000001cf: 	movq	DATAat0x325f0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp33 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp34:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp30 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp37 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp38:
    00000210: 	addq	$0x10, %rax
.Ltmp37:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp38 # Offset: 542
.Ltmp43:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x320c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp39 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp40 # Offset: 592
.Ltmp39:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp27:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp40:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp41:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp41 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x32112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp27 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp28:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp42 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp30:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp43 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1c80
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1c80
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp44 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp45 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp46:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp46 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp51:
    0000006a: 	leaq	DATAat0x322b7(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x320f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x32138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x322b7(%rip), %r8
    000000a1: 	leaq	DATAat0x32126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp47 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp48:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x32137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp48 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp47 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp49 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp50:
    00000140: 	addq	$0x10, %rax
.Ltmp49:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp50 # Offset: 334
.Ltmp52:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x320c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp44:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp45:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp51 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp47:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp52 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1e30
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1e30
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1e50
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1e50
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x32600(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1e90
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1ea0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1ea0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1ef0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1f40
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1f70
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1fa0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1fd0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2000
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2030
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2060
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2090
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x20f0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x20f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2120
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2150
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2190
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2190
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x21c0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x21c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x21f0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x21f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2220
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2250
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2250
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2280
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2280
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x22b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x22b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x22e0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x22e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2310
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2310
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2340
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2340
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2370
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2370
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z3absh" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x23a0
  Size        : 0x7
  MaxSize     : 0x10
  Offset      : 0x23a0
  Section     : .text
  Orc Section : .local.text._Z3absh
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	movl	%edi, %eax
    00000006: 	retq # Offset: 6
DWARF CFI Instructions:
    <empty>
End of Function "_Z3absh"

Binary Function "_Z3abst" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x23b0
  Size        : 0x7
  MaxSize     : 0x10
  Offset      : 0x23b0
  Section     : .text
  Orc Section : .local.text._Z3abst
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movl	%edi, %eax
    00000006: 	retq # Offset: 6
DWARF CFI Instructions:
    <empty>
End of Function "_Z3abst"

Binary Function "_Z3absj" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x23c0
  Size        : 0x7
  MaxSize     : 0x10
  Offset      : 0x23c0
  Section     : .text
  Orc Section : .local.text._Z3absj
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movl	%edi, %eax
    00000006: 	retq # Offset: 6
DWARF CFI Instructions:
    <empty>
End of Function "_Z3absj"

Binary Function "_Z3absm" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x23d0
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x23d0
  Section     : .text
  Orc Section : .local.text._Z3absm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_Z3absm"

Binary Function "_Z17inner_product_stdIPKaaET0_T_S3_m" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x23e0
  Size        : 0x1ff
  MaxSize     : 0x200
  Offset      : 0x23e0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leaq	(%rdi,%rdx), %rdi
    0000000b: 	cmpq	%rcx, %rdi
    0000000e: 	je	.Ltmp53 # Offset: 14
    00000014: 	leaq	-0x1(%rdx), %rax
    00000018: 	cmpq	$0xe, %rax
    0000001c: 	jbe	.Ltmp54 # Offset: 28
    00000022: 	movq	%rdx, %r8
    00000025: 	movdqa	DATAat0x32530(%rip), %xmm4
    0000002d: 	xorl	%eax, %eax
    0000002f: 	pxor	%xmm3, %xmm3
    00000033: 	andq	$-0x10, %r8
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp55:
    00000040: 	movdqu	(%rcx,%rax), %xmm2
    00000045: 	movdqu	(%rsi,%rax), %xmm0
    0000004a: 	addq	$0x10, %rax
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	movdqa	%xmm2, %xmm5
    00000056: 	punpcklbw	%xmm0, %xmm1
    0000005a: 	punpcklbw	%xmm2, %xmm5
    0000005e: 	punpckhbw	%xmm0, %xmm0
    00000062: 	punpckhbw	%xmm2, %xmm2
    00000066: 	pmullw	%xmm5, %xmm1
    0000006a: 	pmullw	%xmm2, %xmm0
    0000006e: 	pand	%xmm4, %xmm1
    00000072: 	pand	%xmm4, %xmm0
    00000076: 	packuswb	%xmm0, %xmm1
    0000007a: 	paddb	%xmm1, %xmm3
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jne	.Ltmp55 # Offset: 129
    00000083: 	movdqa	%xmm3, %xmm0
    00000087: 	movq	%rdx, %rax
    0000008a: 	psrldq	$0x8, %xmm0
    0000008f: 	andq	$-0x10, %rax
    00000093: 	paddb	%xmm0, %xmm3
    00000097: 	pxor	%xmm0, %xmm0
    0000009b: 	addq	%rax, %rcx
    0000009e: 	addq	%rax, %rsi
    000000a1: 	psadbw	%xmm0, %xmm3
    000000a5: 	movd	%xmm3, %r8d
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	je	.Ltmp56 # Offset: 173
.Ltmp57:
    000000b3: 	movzbl	(%rcx), %eax
    000000b6: 	mulb	(%rsi)
    000000b8: 	addl	%eax, %r8d
    000000bb: 	leaq	0x1(%rcx), %rax
    000000bf: 	cmpq	%rax, %rdi
    000000c2: 	je	.Ltmp56 # Offset: 194
    000000c8: 	movzbl	0x1(%rcx), %eax
    000000cc: 	mulb	0x1(%rsi)
    000000cf: 	addl	%eax, %r8d
    000000d2: 	leaq	0x2(%rcx), %rax
    000000d6: 	cmpq	%rax, %rdi
    000000d9: 	je	.Ltmp56 # Offset: 217
    000000df: 	movzbl	0x2(%rcx), %eax
    000000e3: 	mulb	0x2(%rsi)
    000000e6: 	addl	%eax, %r8d
    000000e9: 	leaq	0x3(%rcx), %rax
    000000ed: 	cmpq	%rax, %rdi
    000000f0: 	je	.Ltmp56 # Offset: 240
    000000f6: 	movzbl	0x3(%rcx), %eax
    000000fa: 	mulb	0x3(%rsi)
    000000fd: 	addl	%eax, %r8d
    00000100: 	leaq	0x4(%rcx), %rax
    00000104: 	cmpq	%rax, %rdi
    00000107: 	je	.Ltmp56 # Offset: 263
    0000010d: 	movzbl	0x4(%rcx), %eax
    00000111: 	mulb	0x4(%rsi)
    00000114: 	addl	%eax, %r8d
    00000117: 	leaq	0x5(%rcx), %rax
    0000011b: 	cmpq	%rax, %rdi
    0000011e: 	je	.Ltmp56 # Offset: 286
    00000124: 	movzbl	0x5(%rcx), %eax
    00000128: 	mulb	0x5(%rsi)
    0000012b: 	addl	%eax, %r8d
    0000012e: 	leaq	0x6(%rcx), %rax
    00000132: 	cmpq	%rax, %rdi
    00000135: 	je	.Ltmp56 # Offset: 309
    0000013b: 	movzbl	0x6(%rcx), %eax
    0000013f: 	mulb	0x6(%rsi)
    00000142: 	addl	%eax, %r8d
    00000145: 	leaq	0x7(%rcx), %rax
    00000149: 	cmpq	%rax, %rdi
    0000014c: 	je	.Ltmp56 # Offset: 332
    00000152: 	movzbl	0x7(%rcx), %eax
    00000156: 	mulb	0x7(%rsi)
    00000159: 	addl	%eax, %r8d
    0000015c: 	leaq	0x8(%rcx), %rax
    00000160: 	cmpq	%rax, %rdi
    00000163: 	je	.Ltmp56 # Offset: 355
    00000169: 	movzbl	0x8(%rcx), %eax
    0000016d: 	mulb	0x8(%rsi)
    00000170: 	addl	%eax, %r8d
    00000173: 	leaq	0x9(%rcx), %rax
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	je	.Ltmp56 # Offset: 378
    0000017c: 	movzbl	0x9(%rcx), %eax
    00000180: 	mulb	0x9(%rsi)
    00000183: 	leal	(%rax,%r8), %edx
    00000187: 	leaq	0xa(%rcx), %rax
    0000018b: 	movl	%edx, %r8d
    0000018e: 	cmpq	%rax, %rdi
    00000191: 	je	.Ltmp56 # Offset: 401
    00000193: 	movzbl	0xa(%rcx), %eax
    00000197: 	mulb	0xa(%rsi)
    0000019a: 	leal	(%rax,%rdx), %r8d
    0000019e: 	leaq	0xb(%rcx), %rax
    000001a2: 	cmpq	%rax, %rdi
    000001a5: 	je	.Ltmp56 # Offset: 421
    000001a7: 	movzbl	0xb(%rcx), %eax
    000001ab: 	mulb	0xb(%rsi)
    000001ae: 	addl	%eax, %r8d
    000001b1: 	leaq	0xc(%rcx), %rax
    000001b5: 	cmpq	%rax, %rdi
    000001b8: 	je	.Ltmp56 # Offset: 440
    000001ba: 	movzbl	0xc(%rcx), %eax
    000001be: 	mulb	0xc(%rsi)
    000001c1: 	addl	%eax, %r8d
    000001c4: 	leaq	0xd(%rcx), %rax
    000001c8: 	cmpq	%rax, %rdi
    000001cb: 	je	.Ltmp56 # Offset: 459
    000001cd: 	movzbl	0xd(%rcx), %eax
    000001d1: 	mulb	0xd(%rsi)
    000001d4: 	addl	%eax, %r8d
    000001d7: 	leaq	0xe(%rcx), %rax
    000001db: 	cmpq	%rax, %rdi
    000001de: 	je	.Ltmp56 # Offset: 478
    000001e0: 	movzbl	0xe(%rsi), %eax
    000001e4: 	mulb	0xe(%rcx)
    000001e7: 	addl	%eax, %r8d
.Ltmp56:
    000001ea: 	movl	%r8d, %eax
    000001ed: 	retq # Offset: 493
    000001ee: 	nop # Size: 2
.Ltmp53:
    000001f0: 	xorl	%r8d, %r8d
    000001f3: 	movl	%r8d, %eax
    000001f6: 	retq # Offset: 502
.Ltmp54:
    000001f7: 	xorl	%r8d, %r8d
    000001fa: 	jmp	.Ltmp57 # Offset: 506
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKaaET0_T_S3_m"

Binary Function "_Z14inner_product1IPKaaET0_T_S3_m" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x25e0
  Size        : 0x211
  MaxSize     : 0x220
  Offset      : 0x25e0
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rdx, %rdi
    0000000a: 	testq	%rdx, %rdx
    0000000d: 	je	.Ltmp58 # Offset: 13
    00000013: 	leaq	-0x1(%rdx), %rax
    00000017: 	cmpq	$0xe, %rax
    0000001b: 	jbe	.Ltmp59 # Offset: 27
    00000021: 	movdqa	DATAat0x32530(%rip), %xmm4
    00000029: 	andq	$-0x10, %rdx
    0000002d: 	xorl	%eax, %eax
    0000002f: 	pxor	%xmm3, %xmm3
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp60:
    00000038: 	movdqu	(%rcx,%rax), %xmm2
    0000003d: 	movdqu	(%rsi,%rax), %xmm0
    00000042: 	addq	$0x10, %rax
    00000046: 	movdqa	%xmm0, %xmm1
    0000004a: 	movdqa	%xmm2, %xmm5
    0000004e: 	punpcklbw	%xmm0, %xmm1
    00000052: 	punpcklbw	%xmm2, %xmm5
    00000056: 	punpckhbw	%xmm0, %xmm0
    0000005a: 	punpckhbw	%xmm2, %xmm2
    0000005e: 	pmullw	%xmm5, %xmm1
    00000062: 	pmullw	%xmm2, %xmm0
    00000066: 	pand	%xmm4, %xmm1
    0000006a: 	pand	%xmm4, %xmm0
    0000006e: 	packuswb	%xmm0, %xmm1
    00000072: 	paddb	%xmm1, %xmm3
    00000076: 	cmpq	%rdx, %rax
    00000079: 	jne	.Ltmp60 # Offset: 121
    0000007b: 	movdqa	%xmm3, %xmm0
    0000007f: 	movq	%rdi, %rdx
    00000082: 	psrldq	$0x8, %xmm0
    00000087: 	andq	$-0x10, %rdx
    0000008b: 	paddb	%xmm0, %xmm3
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	psadbw	%xmm0, %xmm3
    00000097: 	movd	%xmm3, %r8d
    0000009c: 	testb	$0xf, %dil
    000000a0: 	je	.Ltmp61 # Offset: 160
.Ltmp62:
    000000a6: 	movzbl	(%rcx,%rdx), %eax
    000000aa: 	mulb	(%rsi,%rdx)
    000000ad: 	addl	%eax, %r8d
    000000b0: 	leaq	0x1(%rdx), %rax
    000000b4: 	cmpq	%rax, %rdi
    000000b7: 	jbe	.Ltmp61 # Offset: 183
    000000bd: 	movzbl	0x1(%rcx,%rdx), %eax
    000000c2: 	mulb	0x1(%rsi,%rdx)
    000000c6: 	addl	%eax, %r8d
    000000c9: 	leaq	0x2(%rdx), %rax
    000000cd: 	cmpq	%rax, %rdi
    000000d0: 	jbe	.Ltmp61 # Offset: 208
    000000d6: 	movzbl	0x2(%rcx,%rdx), %eax
    000000db: 	mulb	0x2(%rsi,%rdx)
    000000df: 	addl	%eax, %r8d
    000000e2: 	leaq	0x3(%rdx), %rax
    000000e6: 	cmpq	%rax, %rdi
    000000e9: 	jbe	.Ltmp61 # Offset: 233
    000000ef: 	movzbl	0x3(%rcx,%rdx), %eax
    000000f4: 	mulb	0x3(%rsi,%rdx)
    000000f8: 	addl	%eax, %r8d
    000000fb: 	leaq	0x4(%rdx), %rax
    000000ff: 	cmpq	%rax, %rdi
    00000102: 	jbe	.Ltmp61 # Offset: 258
    00000108: 	movzbl	0x4(%rcx,%rdx), %eax
    0000010d: 	mulb	0x4(%rsi,%rdx)
    00000111: 	addl	%eax, %r8d
    00000114: 	leaq	0x5(%rdx), %rax
    00000118: 	cmpq	%rax, %rdi
    0000011b: 	jbe	.Ltmp61 # Offset: 283
    00000121: 	movzbl	0x5(%rcx,%rdx), %eax
    00000126: 	mulb	0x5(%rsi,%rdx)
    0000012a: 	addl	%eax, %r8d
    0000012d: 	leaq	0x6(%rdx), %rax
    00000131: 	cmpq	%rax, %rdi
    00000134: 	jbe	.Ltmp61 # Offset: 308
    0000013a: 	movzbl	0x6(%rcx,%rdx), %eax
    0000013f: 	mulb	0x6(%rsi,%rdx)
    00000143: 	addl	%eax, %r8d
    00000146: 	leaq	0x7(%rdx), %rax
    0000014a: 	cmpq	%rax, %rdi
    0000014d: 	jbe	.Ltmp61 # Offset: 333
    00000153: 	movzbl	0x7(%rcx,%rdx), %eax
    00000158: 	mulb	0x7(%rsi,%rdx)
    0000015c: 	addl	%eax, %r8d
    0000015f: 	leaq	0x8(%rdx), %rax
    00000163: 	cmpq	%rax, %rdi
    00000166: 	jbe	.Ltmp61 # Offset: 358
    0000016c: 	movzbl	0x8(%rcx,%rdx), %eax
    00000171: 	mulb	0x8(%rsi,%rdx)
    00000175: 	addl	%eax, %r8d
    00000178: 	leaq	0x9(%rdx), %rax
    0000017c: 	cmpq	%rax, %rdi
    0000017f: 	jbe	.Ltmp61 # Offset: 383
    00000181: 	movzbl	0x9(%rcx,%rdx), %eax
    00000186: 	mulb	0x9(%rsi,%rdx)
    0000018a: 	leal	(%rax,%r8), %r9d
    0000018e: 	leaq	0xa(%rdx), %rax
    00000192: 	movl	%r9d, %r8d
    00000195: 	cmpq	%rax, %rdi
    00000198: 	jbe	.Ltmp61 # Offset: 408
    0000019a: 	movzbl	0xa(%rcx,%rdx), %eax
    0000019f: 	mulb	0xa(%rsi,%rdx)
    000001a3: 	leal	(%rax,%r9), %r8d
    000001a7: 	leaq	0xb(%rdx), %rax
    000001ab: 	cmpq	%rax, %rdi
    000001ae: 	jbe	.Ltmp61 # Offset: 430
    000001b0: 	movzbl	0xb(%rcx,%rdx), %eax
    000001b5: 	mulb	0xb(%rsi,%rdx)
    000001b9: 	addl	%eax, %r8d
    000001bc: 	leaq	0xc(%rdx), %rax
    000001c0: 	cmpq	%rax, %rdi
    000001c3: 	jbe	.Ltmp61 # Offset: 451
    000001c5: 	movzbl	0xc(%rcx,%rdx), %eax
    000001ca: 	mulb	0xc(%rsi,%rdx)
    000001ce: 	addl	%eax, %r8d
    000001d1: 	leaq	0xd(%rdx), %rax
    000001d5: 	cmpq	%rax, %rdi
    000001d8: 	jbe	.Ltmp61 # Offset: 472
    000001da: 	movzbl	0xd(%rcx,%rdx), %eax
    000001df: 	mulb	0xd(%rsi,%rdx)
    000001e3: 	addl	%eax, %r8d
    000001e6: 	leaq	0xe(%rdx), %rax
    000001ea: 	cmpq	%rax, %rdi
    000001ed: 	jbe	.Ltmp61 # Offset: 493
    000001ef: 	movzbl	0xe(%rsi,%rdx), %eax
    000001f4: 	mulb	0xe(%rcx,%rdx)
    000001f8: 	addl	%eax, %r8d
.Ltmp61:
    000001fb: 	movl	%r8d, %eax
    000001fe: 	retq # Offset: 510
    000001ff: 	nop # Size: 1
.Ltmp58:
    00000200: 	xorl	%r8d, %r8d
    00000203: 	movl	%r8d, %eax
    00000206: 	retq # Offset: 518
.Ltmp59:
    00000207: 	xorl	%edx, %edx
    00000209: 	xorl	%r8d, %r8d
    0000020c: 	jmp	.Ltmp62 # Offset: 524
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product2IPKaaET0_T_S3_m" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x2800
  Size        : 0x1ff
  MaxSize     : 0x200
  Offset      : 0x2800
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leaq	(%rdi,%rdx), %rdi
    0000000b: 	cmpq	%rdi, %rcx
    0000000e: 	je	.Ltmp63 # Offset: 14
    00000014: 	leaq	-0x1(%rdx), %rax
    00000018: 	cmpq	$0xe, %rax
    0000001c: 	jbe	.Ltmp64 # Offset: 28
    00000022: 	movq	%rdx, %r8
    00000025: 	movdqa	DATAat0x32530(%rip), %xmm4
    0000002d: 	xorl	%eax, %eax
    0000002f: 	pxor	%xmm3, %xmm3
    00000033: 	andq	$-0x10, %r8
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp65:
    00000040: 	movdqu	(%rcx,%rax), %xmm2
    00000045: 	movdqu	(%rsi,%rax), %xmm0
    0000004a: 	addq	$0x10, %rax
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	movdqa	%xmm2, %xmm5
    00000056: 	punpcklbw	%xmm0, %xmm1
    0000005a: 	punpcklbw	%xmm2, %xmm5
    0000005e: 	punpckhbw	%xmm0, %xmm0
    00000062: 	punpckhbw	%xmm2, %xmm2
    00000066: 	pmullw	%xmm5, %xmm1
    0000006a: 	pmullw	%xmm2, %xmm0
    0000006e: 	pand	%xmm4, %xmm1
    00000072: 	pand	%xmm4, %xmm0
    00000076: 	packuswb	%xmm0, %xmm1
    0000007a: 	paddb	%xmm1, %xmm3
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jne	.Ltmp65 # Offset: 129
    00000083: 	movdqa	%xmm3, %xmm0
    00000087: 	movq	%rdx, %rax
    0000008a: 	psrldq	$0x8, %xmm0
    0000008f: 	andq	$-0x10, %rax
    00000093: 	paddb	%xmm0, %xmm3
    00000097: 	pxor	%xmm0, %xmm0
    0000009b: 	addq	%rax, %rcx
    0000009e: 	addq	%rax, %rsi
    000000a1: 	psadbw	%xmm0, %xmm3
    000000a5: 	movd	%xmm3, %r8d
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	je	.Ltmp66 # Offset: 173
.Ltmp67:
    000000b3: 	movzbl	(%rcx), %eax
    000000b6: 	mulb	(%rsi)
    000000b8: 	addl	%eax, %r8d
    000000bb: 	leaq	0x1(%rcx), %rax
    000000bf: 	cmpq	%rax, %rdi
    000000c2: 	je	.Ltmp66 # Offset: 194
    000000c8: 	movzbl	0x1(%rcx), %eax
    000000cc: 	mulb	0x1(%rsi)
    000000cf: 	addl	%eax, %r8d
    000000d2: 	leaq	0x2(%rcx), %rax
    000000d6: 	cmpq	%rax, %rdi
    000000d9: 	je	.Ltmp66 # Offset: 217
    000000df: 	movzbl	0x2(%rcx), %eax
    000000e3: 	mulb	0x2(%rsi)
    000000e6: 	addl	%eax, %r8d
    000000e9: 	leaq	0x3(%rcx), %rax
    000000ed: 	cmpq	%rax, %rdi
    000000f0: 	je	.Ltmp66 # Offset: 240
    000000f6: 	movzbl	0x3(%rcx), %eax
    000000fa: 	mulb	0x3(%rsi)
    000000fd: 	addl	%eax, %r8d
    00000100: 	leaq	0x4(%rcx), %rax
    00000104: 	cmpq	%rax, %rdi
    00000107: 	je	.Ltmp66 # Offset: 263
    0000010d: 	movzbl	0x4(%rcx), %eax
    00000111: 	mulb	0x4(%rsi)
    00000114: 	addl	%eax, %r8d
    00000117: 	leaq	0x5(%rcx), %rax
    0000011b: 	cmpq	%rax, %rdi
    0000011e: 	je	.Ltmp66 # Offset: 286
    00000124: 	movzbl	0x5(%rcx), %eax
    00000128: 	mulb	0x5(%rsi)
    0000012b: 	addl	%eax, %r8d
    0000012e: 	leaq	0x6(%rcx), %rax
    00000132: 	cmpq	%rax, %rdi
    00000135: 	je	.Ltmp66 # Offset: 309
    0000013b: 	movzbl	0x6(%rcx), %eax
    0000013f: 	mulb	0x6(%rsi)
    00000142: 	addl	%eax, %r8d
    00000145: 	leaq	0x7(%rcx), %rax
    00000149: 	cmpq	%rax, %rdi
    0000014c: 	je	.Ltmp66 # Offset: 332
    00000152: 	movzbl	0x7(%rcx), %eax
    00000156: 	mulb	0x7(%rsi)
    00000159: 	addl	%eax, %r8d
    0000015c: 	leaq	0x8(%rcx), %rax
    00000160: 	cmpq	%rax, %rdi
    00000163: 	je	.Ltmp66 # Offset: 355
    00000169: 	movzbl	0x8(%rcx), %eax
    0000016d: 	mulb	0x8(%rsi)
    00000170: 	addl	%eax, %r8d
    00000173: 	leaq	0x9(%rcx), %rax
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	je	.Ltmp66 # Offset: 378
    0000017c: 	movzbl	0x9(%rcx), %eax
    00000180: 	mulb	0x9(%rsi)
    00000183: 	leal	(%rax,%r8), %edx
    00000187: 	leaq	0xa(%rcx), %rax
    0000018b: 	movl	%edx, %r8d
    0000018e: 	cmpq	%rax, %rdi
    00000191: 	je	.Ltmp66 # Offset: 401
    00000193: 	movzbl	0xa(%rcx), %eax
    00000197: 	mulb	0xa(%rsi)
    0000019a: 	leal	(%rax,%rdx), %r8d
    0000019e: 	leaq	0xb(%rcx), %rax
    000001a2: 	cmpq	%rax, %rdi
    000001a5: 	je	.Ltmp66 # Offset: 421
    000001a7: 	movzbl	0xb(%rcx), %eax
    000001ab: 	mulb	0xb(%rsi)
    000001ae: 	addl	%eax, %r8d
    000001b1: 	leaq	0xc(%rcx), %rax
    000001b5: 	cmpq	%rax, %rdi
    000001b8: 	je	.Ltmp66 # Offset: 440
    000001ba: 	movzbl	0xc(%rcx), %eax
    000001be: 	mulb	0xc(%rsi)
    000001c1: 	addl	%eax, %r8d
    000001c4: 	leaq	0xd(%rcx), %rax
    000001c8: 	cmpq	%rax, %rdi
    000001cb: 	je	.Ltmp66 # Offset: 459
    000001cd: 	movzbl	0xd(%rcx), %eax
    000001d1: 	mulb	0xd(%rsi)
    000001d4: 	addl	%eax, %r8d
    000001d7: 	leaq	0xe(%rcx), %rax
    000001db: 	cmpq	%rax, %rdi
    000001de: 	je	.Ltmp66 # Offset: 478
    000001e0: 	movzbl	0xe(%rsi), %eax
    000001e4: 	mulb	0xe(%rcx)
    000001e7: 	addl	%eax, %r8d
.Ltmp66:
    000001ea: 	movl	%r8d, %eax
    000001ed: 	retq # Offset: 493
    000001ee: 	nop # Size: 2
.Ltmp63:
    000001f0: 	xorl	%r8d, %r8d
    000001f3: 	movl	%r8d, %eax
    000001f6: 	retq # Offset: 502
.Ltmp64:
    000001f7: 	xorl	%r8d, %r8d
    000001fa: 	jmp	.Ltmp67 # Offset: 506
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product3IPKaaET0_T_S3_m" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x2a00
  Size        : 0x470
  MaxSize     : 0x470
  Offset      : 0x2a00
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	subq	$0x1, %r11
    00000011: 	je	.Ltmp68 # Offset: 17
    00000017: 	pushq	%r12
    00000019: 	movq	%rdx, %r10
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	leaq	-0x2(%rdx), %rbx
    00000022: 	testq	%rdx, %rdx
    00000025: 	je	.Ltmp69 # Offset: 37
    0000002b: 	cmpq	$0x1d, %rbx
    0000002f: 	jbe	.Ltmp69 # Offset: 47
    00000035: 	shrq	%rbx
    00000038: 	movdqa	DATAat0x32540(%rip), %xmm4
    00000040: 	xorl	%eax, %eax
    00000042: 	xorl	%edx, %edx
    00000044: 	addq	$0x1, %rbx
    00000048: 	movdqa	DATAat0x32550(%rip), %xmm6
    00000050: 	pxor	%xmm3, %xmm3
    00000054: 	movdqa	DATAat0x32530(%rip), %xmm2
    0000005c: 	movq	%rbx, %rcx
    0000005f: 	movdqa	DATAat0x32560(%rip), %xmm5
    00000067: 	shrq	$0x4, %rcx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp70:
    00000070: 	movdqu	(%r9,%rax), %xmm7
    00000076: 	movdqu	0x10(%r9,%rax), %xmm0
    0000007d: 	movdqa	%xmm4, %xmm1
    00000081: 	addq	$0x1, %rdx
    00000085: 	movdqu	0x10(%rdi,%rax), %xmm8
    0000008c: 	paddq	%xmm6, %xmm4
    00000090: 	paddq	%xmm5, %xmm1
    00000094: 	pand	%xmm2, %xmm0
    00000098: 	pand	%xmm2, %xmm7
    0000009c: 	packuswb	%xmm0, %xmm7
    000000a0: 	movdqu	(%rdi,%rax), %xmm0
    000000a5: 	pand	%xmm2, %xmm8
    000000aa: 	movdqa	%xmm7, %xmm9
    000000af: 	pand	%xmm2, %xmm0
    000000b3: 	punpcklbw	%xmm7, %xmm9
    000000b8: 	punpckhbw	%xmm7, %xmm7
    000000bc: 	packuswb	%xmm8, %xmm0
    000000c1: 	movdqa	%xmm0, %xmm8
    000000c6: 	punpcklbw	%xmm0, %xmm8
    000000cb: 	punpckhbw	%xmm0, %xmm0
    000000cf: 	pmullw	%xmm9, %xmm8
    000000d4: 	pmullw	%xmm7, %xmm0
    000000d8: 	movdqu	(%r9,%rax), %xmm7
    000000de: 	movdqu	0x10(%rdi,%rax), %xmm9
    000000e5: 	psrlw	$0x8, %xmm7
    000000ea: 	psrlw	$0x8, %xmm9
    000000f0: 	pand	%xmm2, %xmm0
    000000f4: 	pand	%xmm2, %xmm8
    000000f9: 	packuswb	%xmm0, %xmm8
    000000fe: 	movdqu	0x10(%r9,%rax), %xmm0
    00000105: 	psrlw	$0x8, %xmm0
    0000010a: 	packuswb	%xmm0, %xmm7
    0000010e: 	movdqu	(%rdi,%rax), %xmm0
    00000113: 	addq	$0x20, %rax
    00000117: 	movdqa	%xmm7, %xmm10
    0000011c: 	psrlw	$0x8, %xmm0
    00000121: 	punpcklbw	%xmm7, %xmm10
    00000126: 	punpckhbw	%xmm7, %xmm7
    0000012a: 	packuswb	%xmm9, %xmm0
    0000012f: 	movdqa	%xmm0, %xmm9
    00000134: 	punpcklbw	%xmm0, %xmm9
    00000139: 	punpckhbw	%xmm0, %xmm0
    0000013d: 	pmullw	%xmm10, %xmm9
    00000142: 	pmullw	%xmm7, %xmm0
    00000146: 	movdqa	%xmm9, %xmm7
    0000014b: 	pand	%xmm2, %xmm0
    0000014f: 	pand	%xmm2, %xmm7
    00000153: 	packuswb	%xmm0, %xmm7
    00000157: 	paddb	%xmm7, %xmm8
    0000015c: 	paddb	%xmm8, %xmm3
    00000161: 	cmpq	%rdx, %rcx
    00000164: 	ja	.Ltmp70 # Offset: 356
    0000016a: 	movdqa	%xmm3, %xmm0
    0000016e: 	movq	%rbx, %r12
    00000171: 	movhlps	%xmm1, %xmm5
    00000174: 	psrldq	$0x8, %xmm0
    00000179: 	andq	$-0x10, %r12
    0000017d: 	movq	%xmm5, %rdx
    00000182: 	paddb	%xmm0, %xmm3
    00000186: 	pxor	%xmm0, %xmm0
    0000018a: 	leaq	(%r12,%r12), %rbp
    0000018e: 	psadbw	%xmm0, %xmm3
    00000192: 	movd	%xmm3, %esi
    00000196: 	movl	%esi, %r8d
    00000199: 	movl	%esi, %ecx
    0000019b: 	cmpq	%r12, %rbx
    0000019e: 	je	.Ltmp71 # Offset: 414
    000001a4: 	movzbl	(%r9,%r12,2), %eax
    000001a9: 	mulb	(%rdi,%r12,2)
    000001ad: 	leaq	0x2(%rbp), %rdx
    000001b1: 	movl	%eax, %ecx
    000001b3: 	movzbl	0x1(%r9,%rbp), %eax
    000001b9: 	mulb	0x1(%rdi,%rbp)
    000001bd: 	addl	%eax, %ecx
    000001bf: 	addl	%esi, %ecx
    000001c1: 	movl	%ecx, %r8d
    000001c4: 	cmpq	%rdx, %r11
    000001c7: 	jbe	.Ltmp71 # Offset: 455
    000001cd: 	movzbl	0x2(%rdi,%rbp), %eax
    000001d2: 	mulb	0x2(%r9,%rbp)
    000001d7: 	movl	%eax, %edx
    000001d9: 	movzbl	0x3(%r9,%rbp), %eax
    000001df: 	mulb	0x3(%rdi,%rbp)
    000001e3: 	addl	%edx, %eax
    000001e5: 	leaq	0x4(%rbp), %rdx
    000001e9: 	addl	%eax, %ecx
    000001eb: 	movl	%ecx, %r8d
    000001ee: 	cmpq	%rdx, %r11
    000001f1: 	jbe	.Ltmp71 # Offset: 497
    000001f7: 	movzbl	0x4(%r9,%rbp), %eax
    000001fd: 	mulb	0x4(%rdi,%rbp)
    00000201: 	movl	%eax, %edx
    00000203: 	movzbl	0x5(%r9,%rbp), %eax
    00000209: 	mulb	0x5(%rdi,%rbp)
    0000020d: 	addl	%edx, %eax
    0000020f: 	leaq	0x6(%rbp), %rdx
    00000213: 	addl	%eax, %ecx
    00000215: 	movl	%ecx, %r8d
    00000218: 	cmpq	%rdx, %r11
    0000021b: 	jbe	.Ltmp71 # Offset: 539
    00000221: 	movzbl	0x6(%r9,%rbp), %eax
    00000227: 	mulb	0x6(%rdi,%rbp)
    0000022b: 	movl	%eax, %edx
    0000022d: 	movzbl	0x7(%r9,%rbp), %eax
    00000233: 	mulb	0x7(%rdi,%rbp)
    00000237: 	addl	%edx, %eax
    00000239: 	leaq	0x8(%rbp), %rdx
    0000023d: 	addl	%eax, %ecx
    0000023f: 	movl	%ecx, %r8d
    00000242: 	cmpq	%rdx, %r11
    00000245: 	jbe	.Ltmp71 # Offset: 581
    0000024b: 	movzbl	0x8(%r9,%rbp), %eax
    00000251: 	mulb	0x8(%rdi,%rbp)
    00000255: 	movl	%eax, %edx
    00000257: 	movzbl	0x9(%r9,%rbp), %eax
    0000025d: 	mulb	0x9(%rdi,%rbp)
    00000261: 	addl	%edx, %eax
    00000263: 	leaq	0xa(%rbp), %rdx
    00000267: 	addl	%eax, %ecx
    00000269: 	movl	%ecx, %r8d
    0000026c: 	cmpq	%rdx, %r11
    0000026f: 	jbe	.Ltmp71 # Offset: 623
    00000275: 	movzbl	0xa(%r9,%rbp), %eax
    0000027b: 	mulb	0xa(%rdi,%rbp)
    0000027f: 	movl	%eax, %edx
    00000281: 	movzbl	0xb(%r9,%rbp), %eax
    00000287: 	mulb	0xb(%rdi,%rbp)
    0000028b: 	addl	%edx, %eax
    0000028d: 	leaq	0xc(%rbp), %rdx
    00000291: 	addl	%eax, %ecx
    00000293: 	movl	%ecx, %r8d
    00000296: 	cmpq	%rdx, %r11
    00000299: 	jbe	.Ltmp71 # Offset: 665
    0000029f: 	movzbl	0xc(%r9,%rbp), %eax
    000002a5: 	mulb	0xc(%rdi,%rbp)
    000002a9: 	movl	%eax, %edx
    000002ab: 	movzbl	0xd(%r9,%rbp), %eax
    000002b1: 	mulb	0xd(%rdi,%rbp)
    000002b5: 	addl	%edx, %eax
    000002b7: 	leaq	0xe(%rbp), %rdx
    000002bb: 	addl	%eax, %ecx
    000002bd: 	movl	%ecx, %r8d
    000002c0: 	cmpq	%rdx, %r11
    000002c3: 	jbe	.Ltmp71 # Offset: 707
    000002c9: 	movzbl	0xe(%r9,%rbp), %eax
    000002cf: 	mulb	0xe(%rdi,%rbp)
    000002d3: 	movl	%eax, %edx
    000002d5: 	movzbl	0xf(%r9,%rbp), %eax
    000002db: 	mulb	0xf(%rdi,%rbp)
    000002df: 	addl	%edx, %eax
    000002e1: 	leaq	0x10(%rbp), %rdx
    000002e5: 	addl	%eax, %ecx
    000002e7: 	movl	%ecx, %r8d
    000002ea: 	cmpq	%rdx, %r11
    000002ed: 	jbe	.Ltmp71 # Offset: 749
    000002f3: 	movzbl	0x10(%r9,%rbp), %eax
    000002f9: 	mulb	0x10(%rdi,%rbp)
    000002fd: 	movl	%eax, %edx
    000002ff: 	movzbl	0x11(%r9,%rbp), %eax
    00000305: 	mulb	0x11(%rdi,%rbp)
    00000309: 	addl	%edx, %eax
    0000030b: 	leaq	0x12(%rbp), %rdx
    0000030f: 	addl	%eax, %ecx
    00000311: 	movl	%ecx, %r8d
    00000314: 	cmpq	%rdx, %r11
    00000317: 	jbe	.Ltmp71 # Offset: 791
    0000031d: 	movzbl	0x12(%r9,%rbp), %eax
    00000323: 	mulb	0x12(%rdi,%rbp)
    00000327: 	movl	%eax, %edx
    00000329: 	movzbl	0x13(%r9,%rbp), %eax
    0000032f: 	mulb	0x13(%rdi,%rbp)
    00000333: 	addl	%edx, %eax
    00000335: 	leaq	0x14(%rbp), %rdx
    00000339: 	addl	%eax, %ecx
    0000033b: 	movl	%ecx, %r8d
    0000033e: 	cmpq	%rdx, %r11
    00000341: 	jbe	.Ltmp71 # Offset: 833
    00000347: 	movzbl	0x14(%r9,%rbp), %eax
    0000034d: 	mulb	0x14(%rdi,%rbp)
    00000351: 	movl	%eax, %edx
    00000353: 	movzbl	0x15(%r9,%rbp), %eax
    00000359: 	mulb	0x15(%rdi,%rbp)
    0000035d: 	addl	%edx, %eax
    0000035f: 	leaq	0x16(%rbp), %rdx
    00000363: 	addl	%eax, %ecx
    00000365: 	movl	%ecx, %r8d
    00000368: 	cmpq	%rdx, %r11
    0000036b: 	jbe	.Ltmp71 # Offset: 875
    00000371: 	movzbl	0x16(%r9,%rbp), %eax
    00000377: 	mulb	0x16(%rdi,%rbp)
    0000037b: 	movl	%eax, %edx
    0000037d: 	movzbl	0x17(%r9,%rbp), %eax
    00000383: 	mulb	0x17(%rdi,%rbp)
    00000387: 	addl	%edx, %eax
    00000389: 	leaq	0x18(%rbp), %rdx
    0000038d: 	addl	%eax, %ecx
    0000038f: 	movl	%ecx, %r8d
    00000392: 	cmpq	%rdx, %r11
    00000395: 	jbe	.Ltmp71 # Offset: 917
    00000397: 	movzbl	0x18(%r9,%rbp), %eax
    0000039d: 	mulb	0x18(%rdi,%rbp)
    000003a1: 	movl	%eax, %edx
    000003a3: 	movzbl	0x19(%r9,%rbp), %eax
    000003a9: 	mulb	0x19(%rdi,%rbp)
    000003ad: 	addl	%edx, %eax
    000003af: 	leaq	0x1a(%rbp), %rdx
    000003b3: 	addl	%eax, %ecx
    000003b5: 	movl	%ecx, %r8d
    000003b8: 	cmpq	%rdx, %r11
    000003bb: 	jbe	.Ltmp71 # Offset: 955
    000003bd: 	movzbl	0x1a(%r9,%rbp), %eax
    000003c3: 	mulb	0x1a(%rdi,%rbp)
    000003c7: 	movl	%eax, %edx
    000003c9: 	movzbl	0x1b(%r9,%rbp), %eax
    000003cf: 	mulb	0x1b(%rdi,%rbp)
    000003d3: 	addl	%edx, %eax
    000003d5: 	leaq	0x1c(%rbp), %rdx
    000003d9: 	addl	%eax, %ecx
    000003db: 	movl	%ecx, %r8d
    000003de: 	cmpq	%rdx, %r11
    000003e1: 	jbe	.Ltmp71 # Offset: 993
    000003e3: 	movzbl	0x1d(%rdi,%rbp), %eax
    000003e8: 	mulb	0x1d(%r9,%rbp)
    000003ed: 	movl	%eax, %edx
    000003ef: 	movzbl	0x1c(%rdi,%rbp), %eax
    000003f4: 	mulb	0x1c(%r9,%rbp)
    000003f9: 	addl	%edx, %eax
    000003fb: 	leaq	0x1e(%rbp), %rdx
    000003ff: 	addl	%eax, %ecx
    00000401: 	movl	%ecx, %r8d
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp71:
    00000408: 	cmpq	%rdx, %r10
    0000040b: 	jbe	.Ltmp72 # Offset: 1035
    0000040d: 	addq	%rdx, %r9
    00000410: 	addq	%rdx, %rdi
    00000413: 	movzbl	(%r9), %eax
    00000417: 	mulb	(%rdi)
    00000419: 	leal	(%rax,%rcx), %r8d
.Ltmp72:
    0000041d: 	popq	%rbx
    0000041e: 	movl	%r8d, %eax
    00000421: 	popq	%rbp
    00000422: 	popq	%r12
    00000424: 	retq # Offset: 1060
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp69:
    00000428: 	xorl	%r8d, %r8d
    0000042b: 	xorl	%edx, %edx
    0000042d: 	nopl	(%rax) # Size: 3
.Ltmp73:
    00000430: 	movzbl	0x1(%rdi,%rdx), %eax
    00000435: 	mulb	0x1(%r9,%rdx)
    0000043a: 	movl	%eax, %ecx
    0000043c: 	movzbl	(%rdi,%rdx), %eax
    00000440: 	mulb	(%r9,%rdx)
    00000444: 	addq	$0x2, %rdx
    00000448: 	addl	%eax, %ecx
    0000044a: 	addl	%r8d, %ecx
    0000044d: 	movl	%ecx, %r8d
    00000450: 	cmpq	%rdx, %r11
    00000453: 	ja	.Ltmp73 # Offset: 1107
    00000455: 	jmp	.Ltmp71 # Offset: 1109
    00000457: 	nopw	(%rax,%rax) # Size: 9
.Ltmp68:
    00000460: 	movzbl	(%r9), %eax
    00000464: 	mulb	(%rsi)
    00000466: 	xorl	%ecx, %ecx
    00000468: 	leal	(%rax,%rcx), %r8d
    0000046c: 	movl	%r8d, %eax
    0000046f: 	retq # Offset: 1135
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product4IPKaaET0_T_S3_m" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2e70
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x2e70
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rdx, %r9
    0000000a: 	subq	$0x3, %r10
    0000000e: 	je	.Ltmp74 # Offset: 14
    00000014: 	leaq	-0x4(%rdx), %r11
    00000018: 	cmpq	$-0x4, %r10
    0000001c: 	ja	.Ltmp75 # Offset: 28
    00000022: 	cmpq	$0x3b, %r11
    00000026: 	jbe	.Ltmp75 # Offset: 38
    0000002c: 	shrq	$0x2, %r11
    00000030: 	pxor	%xmm7, %xmm7
    00000034: 	movq	%rsi, %rdx
    00000037: 	movq	%rdi, %rax
    0000003a: 	addq	$0x1, %r11
    0000003e: 	movdqa	%xmm7, %xmm0
    00000042: 	movdqa	%xmm7, %xmm6
    00000046: 	xorl	%ecx, %ecx
    00000048: 	movq	%r11, %r8
    0000004b: 	movdqa	DATAat0x32570(%rip), %xmm4
    00000053: 	movdqa	%xmm7, %xmm5
    00000057: 	movdqa	DATAat0x32580(%rip), %xmm9
    00000060: 	movdqa	DATAat0x32530(%rip), %xmm2
    00000068: 	shrq	$0x4, %r8
    0000006c: 	movdqa	DATAat0x32590(%rip), %xmm8
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp76:
    00000078: 	movdqu	(%rax), %xmm1
    0000007c: 	movdqa	%xmm4, %xmm3
    00000080: 	addq	$0x1, %rcx
    00000084: 	addq	$0x40, %rdx
    00000088: 	movdqu	-0x40(%rdx), %xmm11
    0000008e: 	paddq	%xmm9, %xmm4
    00000093: 	paddq	%xmm8, %xmm3
    00000098: 	addq	$0x40, %rax
    0000009c: 	movdqa	%xmm1, %xmm10
    000000a1: 	movdqa	%xmm11, %xmm12
    000000a6: 	punpcklbw	%xmm1, %xmm10
    000000ab: 	punpckhbw	%xmm1, %xmm1
    000000af: 	punpcklbw	%xmm11, %xmm12
    000000b4: 	punpckhbw	%xmm11, %xmm11
    000000b9: 	pmullw	%xmm12, %xmm10
    000000be: 	pmullw	%xmm11, %xmm1
    000000c3: 	movdqu	-0x30(%rdx), %xmm11
    000000c9: 	movdqa	%xmm11, %xmm12
    000000ce: 	punpcklbw	%xmm11, %xmm12
    000000d3: 	punpckhbw	%xmm11, %xmm11
    000000d8: 	pand	%xmm2, %xmm1
    000000dc: 	pand	%xmm2, %xmm10
    000000e1: 	packuswb	%xmm1, %xmm10
    000000e6: 	movdqu	-0x30(%rax), %xmm1
    000000eb: 	paddb	%xmm10, %xmm5
    000000f0: 	movdqa	%xmm1, %xmm10
    000000f5: 	punpcklbw	%xmm1, %xmm10
    000000fa: 	punpckhbw	%xmm1, %xmm1
    000000fe: 	pmullw	%xmm12, %xmm10
    00000103: 	pmullw	%xmm11, %xmm1
    00000108: 	movdqu	-0x20(%rdx), %xmm11
    0000010e: 	movdqa	%xmm11, %xmm12
    00000113: 	punpcklbw	%xmm11, %xmm12
    00000118: 	punpckhbw	%xmm11, %xmm11
    0000011d: 	pand	%xmm2, %xmm1
    00000121: 	pand	%xmm2, %xmm10
    00000126: 	packuswb	%xmm1, %xmm10
    0000012b: 	movdqu	-0x20(%rax), %xmm1
    00000130: 	paddb	%xmm10, %xmm6
    00000135: 	movdqa	%xmm1, %xmm10
    0000013a: 	punpcklbw	%xmm1, %xmm10
    0000013f: 	punpckhbw	%xmm1, %xmm1
    00000143: 	pmullw	%xmm12, %xmm10
    00000148: 	pmullw	%xmm11, %xmm1
    0000014d: 	movdqu	-0x10(%rdx), %xmm11
    00000153: 	movdqa	%xmm11, %xmm12
    00000158: 	punpcklbw	%xmm11, %xmm12
    0000015d: 	punpckhbw	%xmm11, %xmm11
    00000162: 	pand	%xmm2, %xmm1
    00000166: 	pand	%xmm2, %xmm10
    0000016b: 	packuswb	%xmm1, %xmm10
    00000170: 	movdqu	-0x10(%rax), %xmm1
    00000175: 	paddb	%xmm10, %xmm0
    0000017a: 	movdqa	%xmm1, %xmm10
    0000017f: 	punpcklbw	%xmm1, %xmm10
    00000184: 	punpckhbw	%xmm1, %xmm1
    00000188: 	pmullw	%xmm12, %xmm10
    0000018d: 	pmullw	%xmm11, %xmm1
    00000192: 	pand	%xmm2, %xmm10
    00000197: 	pand	%xmm2, %xmm1
    0000019b: 	packuswb	%xmm1, %xmm10
    000001a0: 	paddb	%xmm10, %xmm7
    000001a5: 	cmpq	%rcx, %r8
    000001a8: 	ja	.Ltmp76 # Offset: 424
    000001ae: 	paddb	%xmm7, %xmm0
    000001b2: 	paddb	%xmm6, %xmm5
    000001b6: 	movq	%r11, %rax
    000001b9: 	psrldq	$0x8, %xmm3
    000001be: 	paddb	%xmm5, %xmm0
    000001c2: 	andq	$-0x10, %rax
    000001c6: 	movdqa	%xmm0, %xmm1
    000001ca: 	leaq	(,%rax,4), %rdx
    000001d2: 	psrldq	$0x8, %xmm1
    000001d7: 	paddb	%xmm1, %xmm0
    000001db: 	pxor	%xmm1, %xmm1
    000001df: 	psadbw	%xmm1, %xmm0
    000001e3: 	movd	%xmm0, %r8d
    000001e8: 	cmpq	%r11, %rax
    000001eb: 	je	.Ltmp77 # Offset: 491
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp78:
    000001f8: 	movzbl	0x1(%rsi,%rdx), %eax
    000001fd: 	mulb	0x1(%rdi,%rdx)
    00000201: 	movl	%eax, %ecx
    00000203: 	movzbl	(%rsi,%rdx), %eax
    00000207: 	mulb	(%rdi,%rdx)
    0000020a: 	addl	%eax, %ecx
    0000020c: 	movzbl	0x2(%rsi,%rdx), %eax
    00000211: 	mulb	0x2(%rdi,%rdx)
    00000215: 	addl	%r8d, %ecx
    00000218: 	addl	%eax, %ecx
    0000021a: 	movzbl	0x3(%rsi,%rdx), %eax
    0000021f: 	mulb	0x3(%rdi,%rdx)
    00000223: 	addq	$0x4, %rdx
    00000227: 	leal	(%rcx,%rax), %r8d
    0000022b: 	cmpq	%rdx, %r10
    0000022e: 	ja	.Ltmp78 # Offset: 558
.Ltmp81:
    00000230: 	cmpq	%rdx, %r9
    00000233: 	jbe	.Ltmp79 # Offset: 563
    00000235: 	movzbl	(%rdi,%rdx), %eax
    00000239: 	mulb	(%rsi,%rdx)
    0000023c: 	addl	%eax, %r8d
    0000023f: 	leaq	0x1(%rdx), %rax
    00000243: 	cmpq	%r9, %rax
    00000246: 	jae	.Ltmp79 # Offset: 582
    00000248: 	movzbl	0x1(%rdi,%rdx), %eax
    0000024d: 	mulb	0x1(%rsi,%rdx)
    00000251: 	addq	$0x2, %rdx
    00000255: 	leal	(%rax,%r8), %ecx
    00000259: 	movl	%ecx, %r8d
    0000025c: 	cmpq	%r9, %rdx
    0000025f: 	jae	.Ltmp79 # Offset: 607
.Ltmp82:
    00000261: 	movzbl	(%rdi,%rdx), %eax
    00000265: 	mulb	(%rsi,%rdx)
    00000268: 	leal	(%rax,%rcx), %r8d
    0000026c: 	leaq	0x1(%rdx), %rax
    00000270: 	cmpq	%rax, %r9
    00000273: 	jbe	.Ltmp79 # Offset: 627
    00000275: 	movzbl	0x1(%rdi,%rdx), %eax
    0000027a: 	mulb	0x1(%rsi,%rdx)
    0000027e: 	addl	%eax, %r8d
.Ltmp79:
    00000281: 	movl	%r8d, %eax
    00000284: 	retq # Offset: 644
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp75:
    00000288: 	xorl	%r8d, %r8d
    0000028b: 	xorl	%edx, %edx
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp80:
    00000290: 	movzbl	0x1(%rsi,%rdx), %eax
    00000295: 	mulb	0x1(%rdi,%rdx)
    00000299: 	movl	%eax, %ecx
    0000029b: 	movzbl	(%rsi,%rdx), %eax
    0000029f: 	mulb	(%rdi,%rdx)
    000002a2: 	addl	%eax, %ecx
    000002a4: 	movzbl	0x2(%rsi,%rdx), %eax
    000002a9: 	mulb	0x2(%rdi,%rdx)
    000002ad: 	addl	%r8d, %ecx
    000002b0: 	addl	%eax, %ecx
    000002b2: 	movzbl	0x3(%rsi,%rdx), %eax
    000002b7: 	mulb	0x3(%rdi,%rdx)
    000002bb: 	addq	$0x4, %rdx
    000002bf: 	leal	(%rcx,%rax), %r8d
    000002c3: 	cmpq	%rdx, %r10
    000002c6: 	ja	.Ltmp80 # Offset: 710
    000002c8: 	jmp	.Ltmp81 # Offset: 712
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp74:
    000002d0: 	movzbl	(%rdi), %eax
    000002d3: 	mulb	(%rsi)
    000002d5: 	movl	$0x2, %edx
    000002da: 	movl	%eax, %ecx
    000002dc: 	movzbl	0x1(%rsi), %eax
    000002e0: 	mulb	0x1(%rdi)
    000002e3: 	addl	%eax, %ecx
    000002e5: 	jmp	.Ltmp82 # Offset: 741
.Ltmp77:
    000002ea: 	movq	%xmm3, %rdx
    000002ef: 	jmp	.Ltmp81 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product5IPKaaET0_T_S3_m" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x3170
  Size        : 0x526
  MaxSize     : 0x530
  Offset      : 0x3170
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %r9
    0000000a: 	pushq	%rbx
    0000000b: 	movq	%rsi, %r10
    0000000e: 	movq	%rdx, %rdi
    00000011: 	subq	$0x7, %r11
    00000015: 	je	.Ltmp83 # Offset: 21
    0000001b: 	leaq	-0x8(%rdx), %rbx
    0000001f: 	cmpq	$-0x8, %r11
    00000023: 	ja	.Ltmp84 # Offset: 35
    00000029: 	cmpq	$0x77, %rbx
    0000002d: 	jbe	.Ltmp84 # Offset: 45
    00000033: 	shrq	$0x3, %rbx
    00000037: 	pxor	%xmm8, %xmm8
    0000003c: 	movq	%r10, %rdx
    0000003f: 	movq	%r9, %rax
    00000042: 	addq	$0x1, %rbx
    00000046: 	movdqa	%xmm8, %xmm5
    0000004b: 	movdqa	%xmm8, %xmm9
    00000050: 	xorl	%ecx, %ecx
    00000052: 	movq	%rbx, %rsi
    00000055: 	movdqa	DATAat0x325a0(%rip), %xmm4
    0000005d: 	movdqa	DATAat0x325b0(%rip), %xmm12
    00000066: 	movdqa	%xmm8, %xmm6
    0000006b: 	shrq	$0x4, %rsi
    0000006f: 	movdqa	%xmm8, %xmm11
    00000074: 	movdqa	%xmm8, %xmm0
    00000079: 	movdqa	DATAat0x32530(%rip), %xmm1
    00000081: 	movdqa	%xmm8, %xmm10
    00000086: 	movdqa	%xmm8, %xmm7
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp85:
    00000090: 	addq	$0x1, %rcx
    00000094: 	movdqa	%xmm4, %xmm3
    00000098: 	subq	$-0x80, %rdx
    0000009c: 	subq	$-0x80, %rax
    000000a0: 	movdqu	-0x80(%rdx), %xmm13
    000000a6: 	movdqu	-0x80(%rax), %xmm14
    000000ac: 	paddq	%xmm12, %xmm4
    000000b1: 	paddq	DATAat0x325c0(%rip), %xmm3
    000000b9: 	movdqa	%xmm14, %xmm2
    000000be: 	movdqa	%xmm13, %xmm15
    000000c3: 	punpcklbw	%xmm13, %xmm15
    000000c8: 	punpcklbw	%xmm14, %xmm2
    000000cd: 	punpckhbw	%xmm13, %xmm13
    000000d2: 	punpckhbw	%xmm14, %xmm14
    000000d7: 	pmullw	%xmm15, %xmm2
    000000dc: 	pmullw	%xmm14, %xmm13
    000000e1: 	movdqu	-0x70(%rdx), %xmm14
    000000e7: 	movdqa	%xmm14, %xmm15
    000000ec: 	punpcklbw	%xmm14, %xmm15
    000000f1: 	punpckhbw	%xmm14, %xmm14
    000000f6: 	pand	%xmm1, %xmm2
    000000fa: 	pand	%xmm1, %xmm13
    000000ff: 	packuswb	%xmm13, %xmm2
    00000104: 	movdqu	-0x70(%rax), %xmm13
    0000010a: 	paddb	%xmm2, %xmm7
    0000010e: 	movdqa	%xmm13, %xmm2
    00000113: 	punpcklbw	%xmm13, %xmm2
    00000118: 	punpckhbw	%xmm13, %xmm13
    0000011d: 	pmullw	%xmm15, %xmm2
    00000122: 	pmullw	%xmm14, %xmm13
    00000127: 	movdqu	-0x60(%rdx), %xmm14
    0000012d: 	movdqa	%xmm14, %xmm15
    00000132: 	punpcklbw	%xmm14, %xmm15
    00000137: 	punpckhbw	%xmm14, %xmm14
    0000013c: 	pand	%xmm1, %xmm13
    00000141: 	pand	%xmm1, %xmm2
    00000145: 	packuswb	%xmm13, %xmm2
    0000014a: 	movdqu	-0x60(%rax), %xmm13
    00000150: 	paddb	%xmm2, %xmm10
    00000155: 	movdqa	%xmm13, %xmm2
    0000015a: 	punpcklbw	%xmm13, %xmm2
    0000015f: 	punpckhbw	%xmm13, %xmm13
    00000164: 	pmullw	%xmm15, %xmm2
    00000169: 	pmullw	%xmm14, %xmm13
    0000016e: 	movdqu	-0x50(%rdx), %xmm14
    00000174: 	movdqa	%xmm14, %xmm15
    00000179: 	punpcklbw	%xmm14, %xmm15
    0000017e: 	punpckhbw	%xmm14, %xmm14
    00000183: 	pand	%xmm1, %xmm13
    00000188: 	pand	%xmm1, %xmm2
    0000018c: 	packuswb	%xmm13, %xmm2
    00000191: 	movdqu	-0x50(%rax), %xmm13
    00000197: 	paddb	%xmm2, %xmm0
    0000019b: 	movdqa	%xmm13, %xmm2
    000001a0: 	punpcklbw	%xmm13, %xmm2
    000001a5: 	punpckhbw	%xmm13, %xmm13
    000001aa: 	pmullw	%xmm15, %xmm2
    000001af: 	pmullw	%xmm14, %xmm13
    000001b4: 	movdqu	-0x40(%rdx), %xmm14
    000001ba: 	movdqa	%xmm14, %xmm15
    000001bf: 	punpcklbw	%xmm14, %xmm15
    000001c4: 	punpckhbw	%xmm14, %xmm14
    000001c9: 	pand	%xmm1, %xmm13
    000001ce: 	pand	%xmm1, %xmm2
    000001d2: 	packuswb	%xmm13, %xmm2
    000001d7: 	movdqu	-0x40(%rax), %xmm13
    000001dd: 	paddb	%xmm2, %xmm11
    000001e2: 	movdqa	%xmm13, %xmm2
    000001e7: 	punpcklbw	%xmm13, %xmm2
    000001ec: 	punpckhbw	%xmm13, %xmm13
    000001f1: 	pmullw	%xmm15, %xmm2
    000001f6: 	pmullw	%xmm14, %xmm13
    000001fb: 	movdqu	-0x30(%rdx), %xmm14
    00000201: 	movdqa	%xmm14, %xmm15
    00000206: 	punpcklbw	%xmm14, %xmm15
    0000020b: 	punpckhbw	%xmm14, %xmm14
    00000210: 	pand	%xmm1, %xmm13
    00000215: 	pand	%xmm1, %xmm2
    00000219: 	packuswb	%xmm13, %xmm2
    0000021e: 	movdqu	-0x30(%rax), %xmm13
    00000224: 	paddb	%xmm2, %xmm6
    00000228: 	movdqa	%xmm13, %xmm2
    0000022d: 	punpcklbw	%xmm13, %xmm2
    00000232: 	punpckhbw	%xmm13, %xmm13
    00000237: 	pmullw	%xmm15, %xmm2
    0000023c: 	pmullw	%xmm14, %xmm13
    00000241: 	movdqu	-0x20(%rdx), %xmm14
    00000247: 	movdqa	%xmm14, %xmm15
    0000024c: 	punpcklbw	%xmm14, %xmm15
    00000251: 	punpckhbw	%xmm14, %xmm14
    00000256: 	pand	%xmm1, %xmm13
    0000025b: 	pand	%xmm1, %xmm2
    0000025f: 	packuswb	%xmm13, %xmm2
    00000264: 	movdqu	-0x20(%rax), %xmm13
    0000026a: 	paddb	%xmm2, %xmm9
    0000026f: 	movdqa	%xmm13, %xmm2
    00000274: 	punpcklbw	%xmm13, %xmm2
    00000279: 	punpckhbw	%xmm13, %xmm13
    0000027e: 	pmullw	%xmm15, %xmm2
    00000283: 	pmullw	%xmm14, %xmm13
    00000288: 	movdqu	-0x10(%rdx), %xmm14
    0000028e: 	movdqa	%xmm14, %xmm15
    00000293: 	punpcklbw	%xmm14, %xmm15
    00000298: 	punpckhbw	%xmm14, %xmm14
    0000029d: 	pand	%xmm1, %xmm13
    000002a2: 	pand	%xmm1, %xmm2
    000002a6: 	packuswb	%xmm13, %xmm2
    000002ab: 	movdqu	-0x10(%rax), %xmm13
    000002b1: 	paddb	%xmm2, %xmm5
    000002b5: 	movdqa	%xmm13, %xmm2
    000002ba: 	punpcklbw	%xmm13, %xmm2
    000002bf: 	punpckhbw	%xmm13, %xmm13
    000002c4: 	pmullw	%xmm15, %xmm2
    000002c9: 	pmullw	%xmm14, %xmm13
    000002ce: 	pand	%xmm1, %xmm2
    000002d2: 	pand	%xmm1, %xmm13
    000002d7: 	packuswb	%xmm13, %xmm2
    000002dc: 	paddb	%xmm2, %xmm8
    000002e1: 	cmpq	%rcx, %rsi
    000002e4: 	ja	.Ltmp85 # Offset: 740
    000002ea: 	paddb	%xmm11, %xmm0
    000002ef: 	paddb	%xmm10, %xmm7
    000002f4: 	movq	%rbx, %rax
    000002f7: 	psrldq	$0x8, %xmm3
    000002fc: 	paddb	%xmm7, %xmm0
    00000300: 	paddb	%xmm9, %xmm6
    00000305: 	andq	$-0x10, %rax
    00000309: 	paddb	%xmm6, %xmm0
    0000030d: 	paddb	%xmm8, %xmm5
    00000312: 	paddb	%xmm0, %xmm5
    00000316: 	leaq	(,%rax,8), %rsi
    0000031e: 	movdqa	%xmm5, %xmm0
    00000322: 	psrldq	$0x8, %xmm0
    00000327: 	paddb	%xmm0, %xmm5
    0000032b: 	pxor	%xmm0, %xmm0
    0000032f: 	psadbw	%xmm0, %xmm5
    00000333: 	movd	%xmm5, %r8d
    00000338: 	cmpq	%rbx, %rax
    0000033b: 	je	.Ltmp86 # Offset: 827
    00000341: 	leaq	(%r9,%rsi), %rcx
    00000345: 	leaq	(%r10,%rsi), %rdx
    00000349: 	nopl	(%rax) # Size: 7
.Ltmp87:
    00000350: 	movzbl	0x1(%rdx), %eax
    00000354: 	mulb	0x1(%rcx)
    00000357: 	addq	$0x8, %rsi
    0000035b: 	addq	$0x8, %rcx
    0000035f: 	addq	$0x8, %rdx
    00000363: 	movl	%eax, %ebx
    00000365: 	movzbl	-0x8(%rdx), %eax
    00000369: 	mulb	-0x8(%rcx)
    0000036c: 	addl	%ebx, %eax
    0000036e: 	addl	%eax, %r8d
    00000371: 	movzbl	-0x6(%rdx), %eax
    00000375: 	mulb	-0x6(%rcx)
    00000378: 	addl	%eax, %r8d
    0000037b: 	movzbl	-0x5(%rdx), %eax
    0000037f: 	mulb	-0x5(%rcx)
    00000382: 	addl	%eax, %r8d
    00000385: 	movzbl	-0x4(%rdx), %eax
    00000389: 	mulb	-0x4(%rcx)
    0000038c: 	addl	%eax, %r8d
    0000038f: 	movzbl	-0x3(%rdx), %eax
    00000393: 	mulb	-0x3(%rcx)
    00000396: 	addl	%eax, %r8d
    00000399: 	movzbl	-0x2(%rdx), %eax
    0000039d: 	mulb	-0x2(%rcx)
    000003a0: 	addl	%eax, %r8d
    000003a3: 	movzbl	-0x1(%rdx), %eax
    000003a7: 	mulb	-0x1(%rcx)
    000003aa: 	addl	%eax, %r8d
    000003ad: 	cmpq	%rsi, %r11
    000003b0: 	ja	.Ltmp87 # Offset: 944
.Ltmp90:
    000003b2: 	cmpq	%rsi, %rdi
    000003b5: 	jbe	.Ltmp88 # Offset: 949
    000003bb: 	movzbl	(%r9,%rsi), %eax
    000003c0: 	mulb	(%r10,%rsi)
    000003c4: 	addl	%eax, %r8d
    000003c7: 	leaq	0x1(%rsi), %rax
    000003cb: 	cmpq	%rdi, %rax
    000003ce: 	jae	.Ltmp88 # Offset: 974
    000003d4: 	movzbl	0x1(%r9,%rsi), %eax
    000003da: 	mulb	0x1(%r10,%rsi)
    000003df: 	addq	$0x2, %rsi
    000003e3: 	leal	(%rax,%r8), %edx
    000003e7: 	movl	%edx, %r8d
    000003ea: 	cmpq	%rdi, %rsi
    000003ed: 	jae	.Ltmp88 # Offset: 1005
.Ltmp91:
    000003f3: 	movzbl	(%r9,%rsi), %eax
    000003f8: 	mulb	(%r10,%rsi)
    000003fc: 	leal	(%rax,%rdx), %r8d
    00000400: 	leaq	0x1(%rsi), %rax
    00000404: 	cmpq	%rdi, %rax
    00000407: 	jae	.Ltmp88 # Offset: 1031
    00000409: 	movzbl	0x1(%r9,%rsi), %eax
    0000040f: 	mulb	0x1(%r10,%rsi)
    00000414: 	addl	%eax, %r8d
    00000417: 	leaq	0x2(%rsi), %rax
    0000041b: 	cmpq	%rdi, %rax
    0000041e: 	jae	.Ltmp88 # Offset: 1054
    00000420: 	movzbl	0x2(%r9,%rsi), %eax
    00000426: 	mulb	0x2(%r10,%rsi)
    0000042b: 	addl	%eax, %r8d
    0000042e: 	leaq	0x3(%rsi), %rax
    00000432: 	cmpq	%rdi, %rax
    00000435: 	jae	.Ltmp88 # Offset: 1077
    00000437: 	movzbl	0x3(%r9,%rsi), %eax
    0000043d: 	mulb	0x3(%r10,%rsi)
    00000442: 	addl	%eax, %r8d
    00000445: 	leaq	0x4(%rsi), %rax
    00000449: 	cmpq	%rax, %rdi
    0000044c: 	jbe	.Ltmp88 # Offset: 1100
    0000044e: 	movzbl	0x4(%r9,%rsi), %eax
    00000454: 	mulb	0x4(%r10,%rsi)
    00000459: 	addl	%eax, %r8d
    0000045c: 	leaq	0x5(%rsi), %rax
    00000460: 	cmpq	%rax, %rdi
    00000463: 	jbe	.Ltmp88 # Offset: 1123
    00000465: 	movzbl	0x5(%r9,%rsi), %eax
    0000046b: 	mulb	0x5(%r10,%rsi)
    00000470: 	addl	%eax, %r8d
.Ltmp88:
    00000473: 	movl	%r8d, %eax
    00000476: 	popq	%rbx
    00000477: 	retq # Offset: 1143
    00000478: 	nopl	(%rax,%rax) # Size: 8
.Ltmp84:
    00000480: 	movq	%r9, %rcx
    00000483: 	movq	%r10, %rdx
    00000486: 	xorl	%r8d, %r8d
    00000489: 	xorl	%esi, %esi
    0000048b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp89:
    00000490: 	movzbl	0x1(%rdx), %eax
    00000494: 	mulb	0x1(%rcx)
    00000497: 	addq	$0x8, %rsi
    0000049b: 	addq	$0x8, %rcx
    0000049f: 	addq	$0x8, %rdx
    000004a3: 	movl	%eax, %ebx
    000004a5: 	movzbl	-0x8(%rdx), %eax
    000004a9: 	mulb	-0x8(%rcx)
    000004ac: 	addl	%ebx, %eax
    000004ae: 	addl	%eax, %r8d
    000004b1: 	movzbl	-0x6(%rdx), %eax
    000004b5: 	mulb	-0x6(%rcx)
    000004b8: 	addl	%eax, %r8d
    000004bb: 	movzbl	-0x5(%rdx), %eax
    000004bf: 	mulb	-0x5(%rcx)
    000004c2: 	addl	%eax, %r8d
    000004c5: 	movzbl	-0x4(%rdx), %eax
    000004c9: 	mulb	-0x4(%rcx)
    000004cc: 	addl	%eax, %r8d
    000004cf: 	movzbl	-0x3(%rdx), %eax
    000004d3: 	mulb	-0x3(%rcx)
    000004d6: 	addl	%eax, %r8d
    000004d9: 	movzbl	-0x2(%rdx), %eax
    000004dd: 	mulb	-0x2(%rcx)
    000004e0: 	addl	%eax, %r8d
    000004e3: 	movzbl	-0x1(%rdx), %eax
    000004e7: 	mulb	-0x1(%rcx)
    000004ea: 	addl	%eax, %r8d
    000004ed: 	cmpq	%rsi, %r11
    000004f0: 	ja	.Ltmp89 # Offset: 1264
    000004f2: 	jmp	.Ltmp90 # Offset: 1266
    000004f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp83:
    00000500: 	movzbl	0x1(%r9), %eax
    00000505: 	mulb	0x1(%rsi)
    00000508: 	movl	%eax, %edx
    0000050a: 	movzbl	(%rsi), %eax
    0000050d: 	mulb	(%r9)
    00000510: 	movl	$0x2, %esi
    00000515: 	addl	%eax, %edx
    00000517: 	jmp	.Ltmp91 # Offset: 1303
.Ltmp86:
    0000051c: 	movq	%xmm3, %rsi
    00000521: 	jmp	.Ltmp90 # Offset: 1313
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product6IPKaaET0_T_S3_m" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x36a0
  Size        : 0x12c2
  MaxSize     : 0x12d0
  Offset      : 0x36a0
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	%rdi, %r9
    0000000b: 	movq	%rsi, %r10
    0000000e: 	movq	%rdx, %rdi
    00000011: 	subq	$0xf8, %rsp
    00000018: 	subq	$0xf, %r11
    0000001c: 	je	.Ltmp92 # Offset: 28
    00000022: 	leaq	-0x10(%rdx), %rsi
    00000026: 	cmpq	$-0x10, %r11
    0000002a: 	ja	.Ltmp93 # Offset: 42
    00000030: 	cmpq	$0xff, %rsi
    00000037: 	jbe	.Ltmp93 # Offset: 55
    0000003d: 	pxor	%xmm7, %xmm7
    00000041: 	shrq	$0x8, %rsi
    00000045: 	movq	%r9, %rdx
    00000048: 	movq	%r10, %rax
    0000004b: 	movdqa	DATAat0x32530(%rip), %xmm15
    00000054: 	xorl	%ecx, %ecx
    00000056: 	movaps	%xmm7, 0x38(%rsp)
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp94:
    00000060: 	movdqu	(%rdx), %xmm12
    00000065: 	movdqu	0x10(%rdx), %xmm0
    0000006a: 	addq	$0x1, %rcx
    0000006e: 	addq	$0x100, %rdx
    00000075: 	movdqu	-0x100(%rdx), %xmm4
    0000007d: 	movdqu	-0x80(%rdx), %xmm8
    00000083: 	addq	$0x100, %rax
    00000089: 	pand	%xmm15, %xmm0
    0000008e: 	pand	%xmm15, %xmm12
    00000093: 	movdqu	-0xe0(%rdx), %xmm11
    0000009c: 	movdqu	-0xe0(%rdx), %xmm3
    000000a4: 	packuswb	%xmm0, %xmm12
    000000a9: 	movdqu	-0xf0(%rdx), %xmm0
    000000b1: 	psrlw	$0x8, %xmm4
    000000b6: 	movdqu	-0xc0(%rdx), %xmm10
    000000bf: 	pand	%xmm15, %xmm11
    000000c4: 	psrlw	$0x8, %xmm3
    000000c9: 	movdqu	-0xc0(%rdx), %xmm2
    000000d1: 	movdqu	-0xa0(%rdx), %xmm9
    000000da: 	psrlw	$0x8, %xmm0
    000000df: 	pand	%xmm15, %xmm10
    000000e4: 	pand	%xmm15, %xmm8
    000000e9: 	movdqu	-0xa0(%rdx), %xmm1
    000000f1: 	packuswb	%xmm0, %xmm4
    000000f5: 	psrlw	$0x8, %xmm2
    000000fa: 	pand	%xmm15, %xmm9
    000000ff: 	movdqu	-0xd0(%rdx), %xmm0
    00000107: 	psrlw	$0x8, %xmm1
    0000010c: 	movdqu	-0x70(%rdx), %xmm5
    00000111: 	movdqu	-0x60(%rdx), %xmm7
    00000116: 	pand	%xmm15, %xmm0
    0000011b: 	movdqu	-0x40(%rdx), %xmm13
    00000121: 	packuswb	%xmm0, %xmm11
    00000126: 	psrlw	$0x8, %xmm5
    0000012b: 	pand	%xmm15, %xmm7
    00000130: 	movdqu	-0xd0(%rdx), %xmm0
    00000138: 	psrlw	$0x8, %xmm13
    0000013e: 	psrlw	$0x8, %xmm0
    00000143: 	packuswb	%xmm0, %xmm3
    00000147: 	movdqu	-0xb0(%rdx), %xmm0
    0000014f: 	pand	%xmm15, %xmm0
    00000154: 	packuswb	%xmm0, %xmm10
    00000159: 	movdqu	-0xb0(%rdx), %xmm0
    00000161: 	psrlw	$0x8, %xmm0
    00000166: 	packuswb	%xmm0, %xmm2
    0000016a: 	movdqu	-0x90(%rdx), %xmm0
    00000172: 	pand	%xmm15, %xmm0
    00000177: 	packuswb	%xmm0, %xmm9
    0000017c: 	movdqu	-0x90(%rdx), %xmm0
    00000184: 	psrlw	$0x8, %xmm0
    00000189: 	packuswb	%xmm0, %xmm1
    0000018d: 	movdqu	-0x70(%rdx), %xmm0
    00000192: 	pand	%xmm15, %xmm0
    00000197: 	packuswb	%xmm0, %xmm8
    0000019c: 	movdqu	-0x80(%rdx), %xmm0
    000001a1: 	psrlw	$0x8, %xmm0
    000001a6: 	movdqa	%xmm0, %xmm6
    000001aa: 	packuswb	%xmm5, %xmm6
    000001ae: 	movdqu	-0x50(%rdx), %xmm5
    000001b3: 	movaps	%xmm6, -0x8(%rsp)
    000001b8: 	movdqu	-0x60(%rdx), %xmm6
    000001bd: 	pand	%xmm15, %xmm5
    000001c2: 	packuswb	%xmm5, %xmm7
    000001c6: 	movdqu	-0x50(%rdx), %xmm5
    000001cb: 	psrlw	$0x8, %xmm6
    000001d0: 	movdqa	%xmm6, %xmm14
    000001d5: 	movdqu	-0x40(%rdx), %xmm6
    000001da: 	psrlw	$0x8, %xmm5
    000001df: 	packuswb	%xmm5, %xmm14
    000001e4: 	movdqu	-0x30(%rdx), %xmm5
    000001e9: 	pand	%xmm15, %xmm6
    000001ee: 	movaps	%xmm14, 0x8(%rsp)
    000001f4: 	movdqa	%xmm13, %xmm14
    000001f9: 	pand	%xmm15, %xmm5
    000001fe: 	packuswb	%xmm5, %xmm6
    00000202: 	movdqu	-0x30(%rdx), %xmm5
    00000207: 	psrlw	$0x8, %xmm5
    0000020c: 	packuswb	%xmm5, %xmm14
    00000211: 	movdqu	-0x20(%rdx), %xmm5
    00000216: 	movaps	%xmm14, 0x18(%rsp)
    0000021c: 	movdqu	-0x10(%rdx), %xmm13
    00000222: 	movdqu	-0x20(%rdx), %xmm0
    00000227: 	pand	%xmm15, %xmm5
    0000022c: 	pand	%xmm15, %xmm13
    00000231: 	psrlw	$0x8, %xmm0
    00000236: 	packuswb	%xmm13, %xmm5
    0000023b: 	movdqu	-0x10(%rdx), %xmm13
    00000241: 	movdqa	%xmm0, %xmm14
    00000246: 	movdqa	%xmm15, %xmm0
    0000024b: 	pand	%xmm11, %xmm0
    00000250: 	psrlw	$0x8, %xmm11
    00000256: 	psrlw	$0x8, %xmm13
    0000025c: 	movaps	%xmm0, -0x78(%rsp)
    00000261: 	packuswb	%xmm13, %xmm14
    00000266: 	movdqa	%xmm15, %xmm13
    0000026b: 	pand	%xmm12, %xmm13
    00000270: 	psrlw	$0x8, %xmm12
    00000276: 	movdqa	%xmm13, %xmm0
    0000027b: 	packuswb	-0x78(%rsp), %xmm0
    00000281: 	movaps	%xmm0, 0x48(%rsp)
    00000286: 	movdqa	%xmm12, %xmm0
    0000028b: 	movdqa	%xmm15, %xmm12
    00000290: 	packuswb	%xmm11, %xmm0
    00000295: 	pand	%xmm10, %xmm12
    0000029a: 	movdqa	%xmm15, %xmm11
    0000029f: 	pand	%xmm9, %xmm11
    000002a4: 	movdqa	%xmm12, %xmm13
    000002a9: 	movaps	%xmm0, -0x78(%rsp)
    000002ae: 	psrlw	$0x8, %xmm10
    000002b4: 	packuswb	%xmm11, %xmm13
    000002b9: 	psrlw	$0x8, %xmm9
    000002bf: 	movdqa	%xmm10, %xmm11
    000002c4: 	movdqa	%xmm15, %xmm10
    000002c9: 	movaps	%xmm13, 0x58(%rsp)
    000002cf: 	packuswb	%xmm9, %xmm11
    000002d4: 	pand	%xmm8, %xmm10
    000002d9: 	movdqa	%xmm15, %xmm9
    000002de: 	psrlw	$0x8, %xmm8
    000002e4: 	pand	%xmm7, %xmm9
    000002e9: 	movdqa	%xmm10, %xmm12
    000002ee: 	movaps	%xmm11, -0x68(%rsp)
    000002f4: 	psrlw	$0x8, %xmm7
    000002f9: 	movdqa	%xmm8, %xmm10
    000002fe: 	movdqa	%xmm15, %xmm8
    00000303: 	packuswb	%xmm7, %xmm10
    00000308: 	pand	%xmm6, %xmm8
    0000030d: 	movdqa	%xmm15, %xmm7
    00000312: 	psrlw	$0x8, %xmm6
    00000317: 	pand	%xmm5, %xmm7
    0000031b: 	movdqa	%xmm8, %xmm11
    00000320: 	movaps	%xmm10, -0x58(%rsp)
    00000326: 	psrlw	$0x8, %xmm5
    0000032b: 	movdqa	%xmm6, %xmm8
    00000330: 	movdqa	%xmm15, %xmm6
    00000335: 	packuswb	%xmm5, %xmm8
    0000033a: 	pand	%xmm4, %xmm6
    0000033e: 	movdqa	%xmm15, %xmm5
    00000343: 	packuswb	%xmm7, %xmm11
    00000348: 	pand	%xmm3, %xmm5
    0000034c: 	movdqa	%xmm6, %xmm7
    00000350: 	movaps	%xmm8, -0x48(%rsp)
    00000356: 	psrlw	$0x8, %xmm4
    0000035b: 	packuswb	%xmm5, %xmm7
    0000035f: 	packuswb	%xmm9, %xmm12
    00000364: 	movaps	%xmm11, 0x78(%rsp)
    0000036a: 	psrlw	$0x8, %xmm3
    0000036f: 	movdqa	%xmm4, %xmm5
    00000373: 	movdqa	%xmm15, %xmm4
    00000378: 	movaps	%xmm7, 0x88(%rsp)
    00000380: 	packuswb	%xmm3, %xmm5
    00000384: 	pand	%xmm2, %xmm4
    00000388: 	movdqa	%xmm15, %xmm3
    0000038d: 	movdqa	0x8(%rsp), %xmm7
    00000393: 	pand	%xmm1, %xmm3
    00000397: 	movdqa	%xmm4, %xmm6
    0000039b: 	movaps	%xmm12, 0x68(%rsp)
    000003a1: 	packuswb	%xmm3, %xmm6
    000003a5: 	psrlw	$0x8, %xmm2
    000003aa: 	movaps	%xmm5, -0x38(%rsp)
    000003af: 	movaps	%xmm6, -0x28(%rsp)
    000003b4: 	movdqa	-0x8(%rsp), %xmm6
    000003ba: 	psrlw	$0x8, %xmm1
    000003bf: 	movdqa	%xmm2, %xmm3
    000003c3: 	movdqa	%xmm15, %xmm2
    000003c8: 	packuswb	%xmm1, %xmm3
    000003cc: 	movdqa	%xmm7, %xmm1
    000003d0: 	pand	%xmm6, %xmm2
    000003d4: 	pand	%xmm15, %xmm1
    000003d9: 	movdqa	%xmm6, %xmm0
    000003dd: 	movdqa	0x18(%rsp), %xmm6
    000003e3: 	movdqa	%xmm2, %xmm4
    000003e7: 	psrlw	$0x8, %xmm0
    000003ec: 	movaps	%xmm3, -0x18(%rsp)
    000003f1: 	movdqu	-0xf0(%rax), %xmm3
    000003f9: 	packuswb	%xmm1, %xmm4
    000003fd: 	movdqa	%xmm7, %xmm1
    00000401: 	movdqa	%xmm0, %xmm2
    00000405: 	psrlw	$0x8, %xmm1
    0000040a: 	movdqa	%xmm15, %xmm7
    0000040f: 	movaps	%xmm4, -0x8(%rsp)
    00000414: 	packuswb	%xmm1, %xmm2
    00000418: 	movdqa	%xmm6, %xmm1
    0000041c: 	pand	%xmm14, %xmm7
    00000421: 	pand	%xmm15, %xmm1
    00000426: 	movdqa	%xmm7, %xmm0
    0000042a: 	movaps	%xmm2, 0x8(%rsp)
    0000042f: 	movdqa	%xmm1, %xmm7
    00000433: 	psrlw	$0x8, %xmm3
    00000438: 	movdqa	%xmm6, %xmm1
    0000043c: 	psrlw	$0x8, %xmm1
    00000441: 	packuswb	%xmm0, %xmm7
    00000445: 	movdqa	%xmm1, %xmm0
    00000449: 	movdqa	%xmm14, %xmm1
    0000044e: 	movaps	%xmm7, 0x18(%rsp)
    00000453: 	psrlw	$0x8, %xmm1
    00000458: 	movdqa	%xmm0, %xmm6
    0000045c: 	movdqa	%xmm3, %xmm0
    00000460: 	packuswb	%xmm1, %xmm6
    00000464: 	movdqu	-0x100(%rax), %xmm1
    0000046c: 	movaps	%xmm6, 0x28(%rsp)
    00000471: 	pand	%xmm15, %xmm1
    00000476: 	movdqa	%xmm1, %xmm13
    0000047b: 	movdqu	-0xf0(%rax), %xmm1
    00000483: 	pand	%xmm15, %xmm1
    00000488: 	packuswb	%xmm1, %xmm13
    0000048d: 	movdqu	-0x100(%rax), %xmm1
    00000495: 	psrlw	$0x8, %xmm1
    0000049a: 	movdqa	%xmm1, %xmm3
    0000049e: 	movdqu	-0xe0(%rax), %xmm1
    000004a6: 	packuswb	%xmm0, %xmm3
    000004aa: 	pand	%xmm15, %xmm1
    000004af: 	movaps	%xmm3, 0x98(%rsp)
    000004b7: 	movdqa	%xmm1, %xmm12
    000004bc: 	movdqu	-0xd0(%rax), %xmm1
    000004c4: 	pand	%xmm15, %xmm1
    000004c9: 	packuswb	%xmm1, %xmm12
    000004ce: 	movdqu	-0xe0(%rax), %xmm1
    000004d6: 	movdqu	-0xd0(%rax), %xmm4
    000004de: 	movdqu	-0xb0(%rax), %xmm5
    000004e6: 	movdqu	-0x40(%rax), %xmm2
    000004eb: 	psrlw	$0x8, %xmm1
    000004f0: 	psrlw	$0x8, %xmm4
    000004f5: 	movdqu	-0x30(%rax), %xmm3
    000004fa: 	movdqa	%xmm4, %xmm0
    000004fe: 	movdqa	%xmm1, %xmm4
    00000502: 	pand	%xmm15, %xmm2
    00000507: 	movdqu	-0xc0(%rax), %xmm1
    0000050f: 	psrlw	$0x8, %xmm5
    00000514: 	psrlw	$0x8, %xmm3
    00000519: 	packuswb	%xmm0, %xmm4
    0000051d: 	pand	%xmm15, %xmm1
    00000522: 	movaps	%xmm4, 0xa8(%rsp)
    0000052a: 	movdqa	%xmm1, %xmm11
    0000052f: 	movdqu	-0xb0(%rax), %xmm1
    00000537: 	pand	%xmm15, %xmm1
    0000053c: 	packuswb	%xmm1, %xmm11
    00000541: 	movdqu	-0xc0(%rax), %xmm1
    00000549: 	psrlw	$0x8, %xmm1
    0000054e: 	movdqa	%xmm1, %xmm14
    00000553: 	movdqu	-0xa0(%rax), %xmm1
    0000055b: 	packuswb	%xmm5, %xmm14
    00000560: 	movdqu	-0xa0(%rax), %xmm5
    00000568: 	pand	%xmm15, %xmm1
    0000056d: 	movdqa	%xmm1, %xmm10
    00000572: 	movdqu	-0x90(%rax), %xmm1
    0000057a: 	psrlw	$0x8, %xmm5
    0000057f: 	pand	%xmm15, %xmm1
    00000584: 	packuswb	%xmm1, %xmm10
    00000589: 	movdqu	-0x90(%rax), %xmm1
    00000591: 	psrlw	$0x8, %xmm1
    00000596: 	packuswb	%xmm1, %xmm5
    0000059a: 	movdqu	-0x80(%rax), %xmm1
    0000059f: 	pand	%xmm15, %xmm1
    000005a4: 	movdqa	%xmm1, %xmm9
    000005a9: 	movdqu	-0x70(%rax), %xmm1
    000005ae: 	pand	%xmm15, %xmm1
    000005b3: 	packuswb	%xmm1, %xmm9
    000005b8: 	movdqu	-0x80(%rax), %xmm1
    000005bd: 	psrlw	$0x8, %xmm1
    000005c2: 	movdqa	%xmm1, %xmm0
    000005c6: 	movdqu	-0x70(%rax), %xmm1
    000005cb: 	psrlw	$0x8, %xmm1
    000005d0: 	packuswb	%xmm1, %xmm0
    000005d4: 	movdqu	-0x60(%rax), %xmm1
    000005d9: 	pand	%xmm15, %xmm1
    000005de: 	movdqa	%xmm1, %xmm8
    000005e3: 	movdqu	-0x50(%rax), %xmm1
    000005e8: 	pand	%xmm15, %xmm1
    000005ed: 	packuswb	%xmm1, %xmm8
    000005f2: 	movdqu	-0x60(%rax), %xmm1
    000005f7: 	psrlw	$0x8, %xmm1
    000005fc: 	movdqa	%xmm1, %xmm4
    00000600: 	movdqu	-0x50(%rax), %xmm1
    00000605: 	psrlw	$0x8, %xmm1
    0000060a: 	packuswb	%xmm1, %xmm4
    0000060e: 	movdqu	-0x30(%rax), %xmm1
    00000613: 	pand	%xmm15, %xmm1
    00000618: 	packuswb	%xmm1, %xmm2
    0000061c: 	movdqu	-0x40(%rax), %xmm1
    00000621: 	psrlw	$0x8, %xmm1
    00000626: 	movdqa	%xmm1, %xmm7
    0000062a: 	movdqu	-0x20(%rax), %xmm1
    0000062f: 	packuswb	%xmm3, %xmm7
    00000633: 	pand	%xmm15, %xmm1
    00000638: 	movaps	%xmm7, 0xb8(%rsp)
    00000640: 	movdqa	%xmm1, %xmm7
    00000644: 	movdqu	-0x10(%rax), %xmm1
    00000649: 	pand	%xmm15, %xmm1
    0000064e: 	packuswb	%xmm1, %xmm7
    00000652: 	movdqu	-0x20(%rax), %xmm1
    00000657: 	psrlw	$0x8, %xmm1
    0000065c: 	movdqa	%xmm1, %xmm3
    00000660: 	movdqu	-0x10(%rax), %xmm1
    00000665: 	psrlw	$0x8, %xmm1
    0000066a: 	packuswb	%xmm1, %xmm3
    0000066e: 	movdqa	%xmm15, %xmm1
    00000673: 	pand	%xmm13, %xmm1
    00000678: 	psrlw	$0x8, %xmm13
    0000067e: 	movdqa	%xmm1, %xmm6
    00000682: 	movdqa	%xmm15, %xmm1
    00000687: 	pand	%xmm12, %xmm1
    0000068c: 	psrlw	$0x8, %xmm12
    00000692: 	packuswb	%xmm1, %xmm6
    00000696: 	movdqa	%xmm13, %xmm1
    0000069b: 	movdqa	0x98(%rsp), %xmm13
    000006a5: 	packuswb	%xmm12, %xmm1
    000006aa: 	movaps	%xmm1, 0xc8(%rsp)
    000006b2: 	movdqa	%xmm15, %xmm1
    000006b7: 	pand	%xmm11, %xmm1
    000006bc: 	psrlw	$0x8, %xmm11
    000006c2: 	movdqa	%xmm1, %xmm12
    000006c7: 	movdqa	%xmm15, %xmm1
    000006cc: 	pand	%xmm10, %xmm1
    000006d1: 	psrlw	$0x8, %xmm10
    000006d7: 	packuswb	%xmm1, %xmm12
    000006dc: 	movdqa	%xmm11, %xmm1
    000006e1: 	movdqa	0xa8(%rsp), %xmm11
    000006eb: 	packuswb	%xmm10, %xmm1
    000006f0: 	movdqa	%xmm15, %xmm10
    000006f5: 	movaps	%xmm1, 0xd8(%rsp)
    000006fd: 	movdqa	%xmm15, %xmm1
    00000702: 	pand	%xmm9, %xmm10
    00000707: 	pand	%xmm8, %xmm1
    0000070c: 	psrlw	$0x8, %xmm9
    00000712: 	packuswb	%xmm1, %xmm10
    00000717: 	psrlw	$0x8, %xmm8
    0000071d: 	movdqa	%xmm9, %xmm1
    00000722: 	packuswb	%xmm8, %xmm1
    00000727: 	movdqa	%xmm15, %xmm9
    0000072c: 	movdqa	%xmm15, %xmm8
    00000731: 	pand	%xmm7, %xmm9
    00000736: 	pand	%xmm2, %xmm8
    0000073b: 	movaps	%xmm1, 0xe8(%rsp)
    00000743: 	movdqa	0xb8(%rsp), %xmm1
    0000074c: 	psrlw	$0x8, %xmm7
    00000751: 	psrlw	$0x8, %xmm2
    00000756: 	packuswb	%xmm9, %xmm8
    0000075b: 	packuswb	%xmm7, %xmm2
    0000075f: 	movdqa	%xmm13, %xmm9
    00000764: 	movdqa	%xmm11, %xmm7
    00000769: 	pand	%xmm15, %xmm7
    0000076e: 	psrlw	$0x8, %xmm11
    00000774: 	pand	%xmm15, %xmm9
    00000779: 	packuswb	%xmm7, %xmm9
    0000077e: 	movdqa	%xmm13, %xmm7
    00000783: 	movdqa	%xmm15, %xmm13
    00000788: 	pand	%xmm14, %xmm13
    0000078d: 	psrlw	$0x8, %xmm7
    00000792: 	packuswb	%xmm11, %xmm7
    00000797: 	psrlw	$0x8, %xmm14
    0000079d: 	movdqa	%xmm13, %xmm11
    000007a2: 	movdqa	%xmm15, %xmm13
    000007a7: 	pand	%xmm5, %xmm13
    000007ac: 	psrlw	$0x8, %xmm5
    000007b1: 	packuswb	%xmm13, %xmm11
    000007b6: 	movdqa	%xmm14, %xmm13
    000007bb: 	movdqa	%xmm15, %xmm14
    000007c0: 	packuswb	%xmm5, %xmm13
    000007c5: 	movdqa	%xmm15, %xmm5
    000007ca: 	pand	%xmm4, %xmm14
    000007cf: 	pand	%xmm0, %xmm5
    000007d3: 	psrlw	$0x8, %xmm4
    000007d8: 	psrlw	$0x8, %xmm0
    000007dd: 	packuswb	%xmm14, %xmm5
    000007e2: 	movdqa	%xmm15, %xmm14
    000007e7: 	packuswb	%xmm4, %xmm0
    000007eb: 	movdqa	%xmm15, %xmm4
    000007f0: 	pand	%xmm3, %xmm14
    000007f5: 	pand	%xmm1, %xmm4
    000007f9: 	psrlw	$0x8, %xmm3
    000007fe: 	psrlw	$0x8, %xmm1
    00000803: 	packuswb	%xmm14, %xmm4
    00000808: 	movdqa	%xmm15, %xmm14
    0000080d: 	packuswb	%xmm3, %xmm1
    00000811: 	movdqa	%xmm15, %xmm3
    00000816: 	pand	%xmm6, %xmm14
    0000081b: 	pand	%xmm12, %xmm3
    00000820: 	psrlw	$0x8, %xmm6
    00000825: 	packuswb	%xmm3, %xmm14
    0000082a: 	psrlw	$0x8, %xmm12
    00000830: 	movdqa	%xmm6, %xmm3
    00000834: 	packuswb	%xmm12, %xmm3
    00000839: 	movdqa	%xmm15, %xmm6
    0000083e: 	movdqa	0xd8(%rsp), %xmm12
    00000848: 	movaps	%xmm3, 0x98(%rsp)
    00000850: 	movdqa	%xmm15, %xmm3
    00000855: 	pand	%xmm10, %xmm6
    0000085a: 	pand	%xmm8, %xmm3
    0000085f: 	psrlw	$0x8, %xmm10
    00000865: 	psrlw	$0x8, %xmm8
    0000086b: 	packuswb	%xmm3, %xmm6
    0000086f: 	movdqa	%xmm15, %xmm3
    00000874: 	packuswb	%xmm8, %xmm10
    00000879: 	movdqa	%xmm15, %xmm8
    0000087e: 	pand	%xmm11, %xmm3
    00000883: 	pand	%xmm9, %xmm8
    00000888: 	psrlw	$0x8, %xmm9
    0000088e: 	packuswb	%xmm3, %xmm8
    00000893: 	psrlw	$0x8, %xmm11
    00000899: 	movdqa	%xmm9, %xmm3
    0000089e: 	packuswb	%xmm11, %xmm3
    000008a3: 	movdqa	%xmm15, %xmm9
    000008a8: 	movaps	%xmm3, 0xa8(%rsp)
    000008b0: 	movdqa	%xmm15, %xmm3
    000008b5: 	pand	%xmm4, %xmm9
    000008ba: 	pand	%xmm5, %xmm3
    000008be: 	psrlw	$0x8, %xmm5
    000008c3: 	packuswb	%xmm9, %xmm3
    000008c8: 	psrlw	$0x8, %xmm4
    000008cd: 	movdqa	%xmm5, %xmm9
    000008d2: 	packuswb	%xmm4, %xmm9
    000008d7: 	movdqa	%xmm12, %xmm5
    000008dc: 	movaps	%xmm9, 0xb8(%rsp)
    000008e5: 	pand	%xmm15, %xmm5
    000008ea: 	movdqa	0xc8(%rsp), %xmm9
    000008f4: 	movdqa	%xmm9, %xmm4
    000008f9: 	pand	%xmm15, %xmm4
    000008fe: 	packuswb	%xmm5, %xmm4
    00000902: 	movdqa	%xmm9, %xmm5
    00000907: 	movdqa	%xmm12, %xmm9
    0000090c: 	psrlw	$0x8, %xmm5
    00000911: 	psrlw	$0x8, %xmm9
    00000917: 	movdqa	%xmm5, %xmm12
    0000091c: 	packuswb	%xmm9, %xmm12
    00000921: 	movdqa	%xmm15, %xmm9
    00000926: 	movaps	%xmm12, 0xc8(%rsp)
    0000092f: 	pand	%xmm2, %xmm9
    00000934: 	movdqa	0xe8(%rsp), %xmm12
    0000093e: 	psrlw	$0x8, %xmm2
    00000943: 	movdqa	%xmm12, %xmm5
    00000948: 	pand	%xmm15, %xmm5
    0000094d: 	packuswb	%xmm9, %xmm5
    00000952: 	movdqa	%xmm12, %xmm9
    00000957: 	psrlw	$0x8, %xmm9
    0000095d: 	movdqa	%xmm9, %xmm12
    00000962: 	packuswb	%xmm2, %xmm12
    00000967: 	movdqa	%xmm15, %xmm2
    0000096c: 	movaps	%xmm12, 0xd8(%rsp)
    00000975: 	pand	%xmm7, %xmm2
    00000979: 	movdqa	-0x48(%rsp), %xmm12
    00000980: 	psrlw	$0x8, %xmm7
    00000985: 	movdqa	%xmm2, %xmm9
    0000098a: 	movdqa	%xmm15, %xmm2
    0000098f: 	pand	%xmm13, %xmm2
    00000994: 	psrlw	$0x8, %xmm13
    0000099a: 	pand	%xmm15, %xmm12
    0000099f: 	packuswb	%xmm2, %xmm9
    000009a4: 	movdqa	%xmm15, %xmm2
    000009a9: 	packuswb	%xmm13, %xmm7
    000009ae: 	movdqa	0x48(%rsp), %xmm13
    000009b5: 	pand	%xmm0, %xmm2
    000009b9: 	psrlw	$0x8, %xmm0
    000009be: 	movdqa	%xmm2, %xmm11
    000009c3: 	movdqa	%xmm15, %xmm2
    000009c8: 	pand	%xmm1, %xmm2
    000009cc: 	psrlw	$0x8, %xmm1
    000009d1: 	packuswb	%xmm2, %xmm11
    000009d6: 	packuswb	%xmm1, %xmm0
    000009da: 	movdqa	-0x78(%rsp), %xmm2
    000009e0: 	movdqa	-0x68(%rsp), %xmm1
    000009e6: 	pand	%xmm15, %xmm2
    000009eb: 	pand	%xmm15, %xmm1
    000009f0: 	packuswb	%xmm1, %xmm2
    000009f4: 	movdqa	-0x58(%rsp), %xmm1
    000009fa: 	pand	%xmm15, %xmm2
    000009ff: 	pand	%xmm15, %xmm1
    00000a04: 	packuswb	%xmm12, %xmm1
    00000a09: 	movdqa	%xmm15, %xmm12
    00000a0e: 	pand	%xmm15, %xmm1
    00000a13: 	pand	%xmm5, %xmm12
    00000a18: 	packuswb	%xmm1, %xmm2
    00000a1c: 	psrlw	$0x8, %xmm5
    00000a21: 	movdqa	%xmm15, %xmm1
    00000a26: 	pand	%xmm4, %xmm1
    00000a2a: 	psrlw	$0x8, %xmm4
    00000a2f: 	packuswb	%xmm5, %xmm4
    00000a33: 	packuswb	%xmm12, %xmm1
    00000a38: 	movdqa	0x58(%rsp), %xmm12
    00000a3f: 	paddb	%xmm4, %xmm1
    00000a43: 	movdqa	%xmm2, %xmm4
    00000a47: 	movdqa	%xmm1, %xmm5
    00000a4b: 	punpcklbw	%xmm2, %xmm4
    00000a4f: 	punpckhbw	%xmm2, %xmm2
    00000a53: 	punpcklbw	%xmm1, %xmm5
    00000a57: 	punpckhbw	%xmm1, %xmm1
    00000a5b: 	pmullw	%xmm5, %xmm4
    00000a5f: 	pmullw	%xmm2, %xmm1
    00000a63: 	movdqa	-0x18(%rsp), %xmm2
    00000a69: 	movdqa	0x28(%rsp), %xmm5
    00000a6f: 	pand	%xmm15, %xmm2
    00000a74: 	pand	%xmm15, %xmm5
    00000a79: 	pand	%xmm15, %xmm1
    00000a7e: 	pand	%xmm15, %xmm4
    00000a83: 	packuswb	%xmm1, %xmm4
    00000a87: 	movdqa	-0x38(%rsp), %xmm1
    00000a8d: 	pand	%xmm15, %xmm1
    00000a92: 	packuswb	%xmm2, %xmm1
    00000a96: 	movdqa	0x8(%rsp), %xmm2
    00000a9c: 	pand	%xmm15, %xmm1
    00000aa1: 	pand	%xmm15, %xmm2
    00000aa6: 	packuswb	%xmm5, %xmm2
    00000aaa: 	movdqa	%xmm15, %xmm5
    00000aaf: 	pand	%xmm15, %xmm2
    00000ab4: 	pand	%xmm11, %xmm5
    00000ab9: 	packuswb	%xmm2, %xmm1
    00000abd: 	psrlw	$0x8, %xmm11
    00000ac3: 	movdqa	%xmm15, %xmm2
    00000ac8: 	pand	%xmm9, %xmm2
    00000acd: 	psrlw	$0x8, %xmm9
    00000ad3: 	packuswb	%xmm11, %xmm9
    00000ad8: 	packuswb	%xmm5, %xmm2
    00000adc: 	movdqa	0x78(%rsp), %xmm11
    00000ae3: 	paddb	%xmm9, %xmm2
    00000ae8: 	movdqa	%xmm1, %xmm9
    00000aed: 	movdqa	%xmm2, %xmm5
    00000af1: 	punpcklbw	%xmm1, %xmm9
    00000af6: 	punpckhbw	%xmm1, %xmm1
    00000afa: 	punpcklbw	%xmm2, %xmm5
    00000afe: 	punpckhbw	%xmm2, %xmm2
    00000b02: 	pmullw	%xmm9, %xmm5
    00000b07: 	pmullw	%xmm2, %xmm1
    00000b0b: 	movdqa	0x68(%rsp), %xmm9
    00000b12: 	movdqa	%xmm13, %xmm2
    00000b17: 	pand	%xmm15, %xmm2
    00000b1c: 	pand	%xmm15, %xmm1
    00000b21: 	pand	%xmm15, %xmm5
    00000b26: 	packuswb	%xmm1, %xmm5
    00000b2a: 	movdqa	%xmm12, %xmm1
    00000b2f: 	pand	%xmm15, %xmm1
    00000b34: 	paddb	%xmm4, %xmm5
    00000b38: 	movdqa	%xmm11, %xmm4
    00000b3d: 	packuswb	%xmm1, %xmm2
    00000b41: 	movdqa	%xmm9, %xmm1
    00000b46: 	pand	%xmm15, %xmm4
    00000b4b: 	pand	%xmm15, %xmm1
    00000b50: 	pand	%xmm15, %xmm2
    00000b55: 	packuswb	%xmm4, %xmm1
    00000b59: 	movdqa	%xmm15, %xmm4
    00000b5e: 	pand	%xmm15, %xmm1
    00000b63: 	pand	%xmm6, %xmm4
    00000b67: 	packuswb	%xmm1, %xmm2
    00000b6b: 	psrlw	$0x8, %xmm6
    00000b70: 	movdqa	%xmm15, %xmm1
    00000b75: 	pand	%xmm14, %xmm1
    00000b7a: 	packuswb	%xmm4, %xmm1
    00000b7e: 	movdqa	%xmm14, %xmm4
    00000b83: 	movdqa	0x88(%rsp), %xmm14
    00000b8d: 	psrlw	$0x8, %xmm4
    00000b92: 	packuswb	%xmm6, %xmm4
    00000b96: 	paddb	%xmm4, %xmm1
    00000b9a: 	movdqa	%xmm2, %xmm4
    00000b9e: 	movdqa	%xmm1, %xmm6
    00000ba2: 	punpcklbw	%xmm2, %xmm4
    00000ba6: 	punpckhbw	%xmm2, %xmm2
    00000baa: 	punpcklbw	%xmm1, %xmm6
    00000bae: 	punpckhbw	%xmm1, %xmm1
    00000bb2: 	pmullw	%xmm6, %xmm4
    00000bb6: 	pmullw	%xmm2, %xmm1
    00000bba: 	movdqa	-0x28(%rsp), %xmm2
    00000bc0: 	movdqa	0x18(%rsp), %xmm6
    00000bc6: 	pand	%xmm15, %xmm2
    00000bcb: 	pand	%xmm15, %xmm6
    00000bd0: 	pand	%xmm15, %xmm1
    00000bd5: 	pand	%xmm15, %xmm4
    00000bda: 	packuswb	%xmm1, %xmm4
    00000bde: 	movdqa	%xmm14, %xmm1
    00000be3: 	pand	%xmm15, %xmm1
    00000be8: 	packuswb	%xmm2, %xmm1
    00000bec: 	movdqa	-0x8(%rsp), %xmm2
    00000bf2: 	pand	%xmm15, %xmm1
    00000bf7: 	pand	%xmm15, %xmm2
    00000bfc: 	packuswb	%xmm6, %xmm2
    00000c00: 	movdqa	%xmm15, %xmm6
    00000c05: 	pand	%xmm15, %xmm2
    00000c0a: 	pand	%xmm3, %xmm6
    00000c0e: 	packuswb	%xmm2, %xmm1
    00000c12: 	psrlw	$0x8, %xmm3
    00000c17: 	movdqa	%xmm15, %xmm2
    00000c1c: 	pand	%xmm8, %xmm2
    00000c21: 	packuswb	%xmm6, %xmm2
    00000c25: 	movdqa	%xmm8, %xmm6
    00000c2a: 	psrlw	$0x8, %xmm6
    00000c2f: 	packuswb	%xmm3, %xmm6
    00000c33: 	paddb	%xmm6, %xmm2
    00000c37: 	movdqa	%xmm2, %xmm6
    00000c3b: 	punpcklbw	%xmm2, %xmm6
    00000c3f: 	punpckhbw	%xmm2, %xmm2
    00000c43: 	movdqa	%xmm6, %xmm3
    00000c47: 	movdqa	%xmm1, %xmm6
    00000c4b: 	punpcklbw	%xmm1, %xmm6
    00000c4f: 	punpckhbw	%xmm1, %xmm1
    00000c53: 	pmullw	%xmm6, %xmm3
    00000c57: 	pmullw	%xmm2, %xmm1
    00000c5b: 	movdqa	%xmm12, %xmm2
    00000c60: 	psrlw	$0x8, %xmm2
    00000c65: 	pand	%xmm15, %xmm1
    00000c6a: 	pand	%xmm15, %xmm3
    00000c6f: 	packuswb	%xmm1, %xmm3
    00000c73: 	movdqa	%xmm13, %xmm1
    00000c78: 	movdqa	0x98(%rsp), %xmm13
    00000c82: 	paddb	%xmm3, %xmm4
    00000c86: 	psrlw	$0x8, %xmm1
    00000c8b: 	movdqa	%xmm15, %xmm3
    00000c90: 	paddb	%xmm5, %xmm4
    00000c94: 	packuswb	%xmm2, %xmm1
    00000c98: 	movdqa	%xmm11, %xmm5
    00000c9d: 	movdqa	%xmm9, %xmm2
    00000ca2: 	psrlw	$0x8, %xmm5
    00000ca7: 	pand	%xmm15, %xmm1
    00000cac: 	psrlw	$0x8, %xmm2
    00000cb1: 	pand	%xmm10, %xmm3
    00000cb6: 	packuswb	%xmm5, %xmm2
    00000cba: 	movdqa	%xmm10, %xmm5
    00000cbf: 	pand	%xmm15, %xmm2
    00000cc4: 	psrlw	$0x8, %xmm5
    00000cc9: 	packuswb	%xmm2, %xmm1
    00000ccd: 	movdqa	%xmm13, %xmm2
    00000cd2: 	pand	%xmm15, %xmm2
    00000cd7: 	packuswb	%xmm3, %xmm2
    00000cdb: 	movdqa	%xmm13, %xmm3
    00000ce0: 	movdqa	0xb8(%rsp), %xmm13
    00000cea: 	psrlw	$0x8, %xmm3
    00000cef: 	packuswb	%xmm5, %xmm3
    00000cf3: 	movdqa	%xmm1, %xmm5
    00000cf7: 	movdqa	%xmm13, %xmm6
    00000cfc: 	paddb	%xmm3, %xmm2
    00000d00: 	psrlw	$0x8, %xmm6
    00000d05: 	punpcklbw	%xmm1, %xmm5
    00000d09: 	movdqa	%xmm2, %xmm3
    00000d0d: 	punpckhbw	%xmm1, %xmm1
    00000d11: 	punpcklbw	%xmm2, %xmm3
    00000d15: 	punpckhbw	%xmm2, %xmm2
    00000d19: 	pmullw	%xmm5, %xmm3
    00000d1d: 	pmullw	%xmm2, %xmm1
    00000d21: 	movdqa	-0x28(%rsp), %xmm2
    00000d27: 	movdqa	0x18(%rsp), %xmm5
    00000d2d: 	psrlw	$0x8, %xmm2
    00000d32: 	psrlw	$0x8, %xmm5
    00000d37: 	pand	%xmm15, %xmm1
    00000d3c: 	pand	%xmm15, %xmm3
    00000d41: 	packuswb	%xmm1, %xmm3
    00000d45: 	movdqa	%xmm14, %xmm1
    00000d4a: 	movdqa	0xa8(%rsp), %xmm14
    00000d54: 	psrlw	$0x8, %xmm1
    00000d59: 	packuswb	%xmm2, %xmm1
    00000d5d: 	movdqa	-0x8(%rsp), %xmm2
    00000d63: 	pand	%xmm15, %xmm1
    00000d68: 	psrlw	$0x8, %xmm2
    00000d6d: 	packuswb	%xmm5, %xmm2
    00000d71: 	movdqa	%xmm13, %xmm5
    00000d76: 	pand	%xmm15, %xmm2
    00000d7b: 	pand	%xmm15, %xmm5
    00000d80: 	packuswb	%xmm2, %xmm1
    00000d84: 	movdqa	%xmm14, %xmm2
    00000d89: 	pand	%xmm15, %xmm2
    00000d8e: 	packuswb	%xmm5, %xmm2
    00000d92: 	movdqa	%xmm14, %xmm5
    00000d97: 	psrlw	$0x8, %xmm5
    00000d9c: 	packuswb	%xmm6, %xmm5
    00000da0: 	movdqa	%xmm1, %xmm6
    00000da4: 	paddb	%xmm5, %xmm2
    00000da8: 	punpcklbw	%xmm1, %xmm6
    00000dac: 	punpckhbw	%xmm1, %xmm1
    00000db0: 	movdqa	%xmm2, %xmm5
    00000db4: 	punpcklbw	%xmm2, %xmm5
    00000db8: 	punpckhbw	%xmm2, %xmm2
    00000dbc: 	pmullw	%xmm2, %xmm1
    00000dc0: 	pmullw	%xmm6, %xmm5
    00000dc4: 	pand	%xmm15, %xmm1
    00000dc9: 	pand	%xmm15, %xmm5
    00000dce: 	packuswb	%xmm1, %xmm5
    00000dd2: 	paddb	%xmm5, %xmm3
    00000dd6: 	paddb	0x38(%rsp), %xmm3
    00000ddc: 	movdqa	-0x78(%rsp), %xmm2
    00000de2: 	movdqa	0xc8(%rsp), %xmm10
    00000dec: 	movdqa	-0x68(%rsp), %xmm1
    00000df2: 	psrlw	$0x8, %xmm2
    00000df7: 	paddb	%xmm4, %xmm3
    00000dfb: 	movdqa	-0x48(%rsp), %xmm4
    00000e01: 	movdqa	0xd8(%rsp), %xmm8
    00000e0b: 	psrlw	$0x8, %xmm1
    00000e10: 	packuswb	%xmm1, %xmm2
    00000e14: 	movdqa	-0x58(%rsp), %xmm1
    00000e1a: 	psrlw	$0x8, %xmm4
    00000e1f: 	movdqa	%xmm8, %xmm5
    00000e24: 	pand	%xmm15, %xmm2
    00000e29: 	psrlw	$0x8, %xmm5
    00000e2e: 	psrlw	$0x8, %xmm1
    00000e33: 	packuswb	%xmm4, %xmm1
    00000e37: 	movdqa	%xmm8, %xmm4
    00000e3c: 	pand	%xmm15, %xmm1
    00000e41: 	pand	%xmm15, %xmm4
    00000e46: 	packuswb	%xmm1, %xmm2
    00000e4a: 	movdqa	%xmm10, %xmm1
    00000e4f: 	pand	%xmm15, %xmm1
    00000e54: 	packuswb	%xmm4, %xmm1
    00000e58: 	movdqa	%xmm10, %xmm4
    00000e5d: 	psrlw	$0x8, %xmm4
    00000e62: 	packuswb	%xmm5, %xmm4
    00000e66: 	movdqa	%xmm2, %xmm5
    00000e6a: 	paddb	%xmm4, %xmm1
    00000e6e: 	punpcklbw	%xmm2, %xmm5
    00000e72: 	punpckhbw	%xmm2, %xmm2
    00000e76: 	movdqa	%xmm1, %xmm4
    00000e7a: 	punpcklbw	%xmm1, %xmm4
    00000e7e: 	punpckhbw	%xmm1, %xmm1
    00000e82: 	pmullw	%xmm5, %xmm4
    00000e86: 	pmullw	%xmm2, %xmm1
    00000e8a: 	movdqa	-0x18(%rsp), %xmm2
    00000e90: 	movdqa	0x28(%rsp), %xmm5
    00000e96: 	psrlw	$0x8, %xmm2
    00000e9b: 	psrlw	$0x8, %xmm5
    00000ea0: 	pand	%xmm15, %xmm1
    00000ea5: 	pand	%xmm15, %xmm4
    00000eaa: 	packuswb	%xmm1, %xmm4
    00000eae: 	movdqa	-0x38(%rsp), %xmm1
    00000eb4: 	psrlw	$0x8, %xmm1
    00000eb9: 	packuswb	%xmm2, %xmm1
    00000ebd: 	movdqa	0x8(%rsp), %xmm2
    00000ec3: 	pand	%xmm15, %xmm1
    00000ec8: 	psrlw	$0x8, %xmm2
    00000ecd: 	packuswb	%xmm5, %xmm2
    00000ed1: 	movdqa	%xmm15, %xmm5
    00000ed6: 	pand	%xmm15, %xmm2
    00000edb: 	pand	%xmm0, %xmm5
    00000edf: 	packuswb	%xmm2, %xmm1
    00000ee3: 	psrlw	$0x8, %xmm0
    00000ee8: 	movdqa	%xmm15, %xmm2
    00000eed: 	pand	%xmm7, %xmm2
    00000ef1: 	psrlw	$0x8, %xmm7
    00000ef6: 	packuswb	%xmm5, %xmm2
    00000efa: 	packuswb	%xmm0, %xmm7
    00000efe: 	paddb	%xmm2, %xmm7
    00000f02: 	movdqa	%xmm1, %xmm2
    00000f06: 	movdqa	%xmm7, %xmm0
    00000f0a: 	punpcklbw	%xmm1, %xmm2
    00000f0e: 	punpckhbw	%xmm1, %xmm1
    00000f12: 	punpcklbw	%xmm7, %xmm0
    00000f16: 	punpckhbw	%xmm7, %xmm7
    00000f1a: 	pmullw	%xmm2, %xmm0
    00000f1e: 	pmullw	%xmm1, %xmm7
    00000f22: 	pand	%xmm15, %xmm0
    00000f27: 	pand	%xmm15, %xmm7
    00000f2c: 	packuswb	%xmm7, %xmm0
    00000f30: 	paddb	%xmm0, %xmm4
    00000f34: 	paddb	%xmm4, %xmm3
    00000f38: 	movaps	%xmm3, 0x38(%rsp)
    00000f3d: 	cmpq	%rcx, %rsi
    00000f40: 	ja	.Ltmp94 # Offset: 3904
    00000f46: 	movdqa	%xmm3, %xmm0
    00000f4a: 	pxor	%xmm1, %xmm1
    00000f4e: 	shlq	$0x8, %rsi
    00000f52: 	psrldq	$0x8, %xmm0
    00000f57: 	leaq	(%r9,%rsi), %rcx
    00000f5b: 	leaq	(%r10,%rsi), %rdx
    00000f5f: 	paddb	%xmm3, %xmm0
    00000f63: 	psadbw	%xmm1, %xmm0
    00000f67: 	movd	%xmm0, %r8d
    00000f6c: 	nopl	(%rax) # Size: 4
.Ltmp95:
    00000f70: 	movzbl	0x1(%rcx), %eax
    00000f74: 	movzbl	0x1(%rdx), %ebx
    00000f78: 	addq	$0x10, %rsi
    00000f7c: 	addq	$0x10, %rcx
    00000f80: 	addb	0x9(%rdx), %bl
    00000f83: 	addq	$0x10, %rdx
    00000f87: 	imull	%ebx, %eax
    00000f8a: 	movl	%eax, %ebx
    00000f8c: 	movzbl	-0x10(%rdx), %eax
    00000f90: 	addb	-0x8(%rdx), %al
    00000f93: 	mulb	-0x10(%rcx)
    00000f96: 	addl	%eax, %ebx
    00000f98: 	movzbl	-0xe(%rdx), %eax
    00000f9c: 	addb	-0x6(%rdx), %al
    00000f9f: 	mulb	-0xe(%rcx)
    00000fa2: 	addl	%ebx, %r8d
    00000fa5: 	addl	%eax, %r8d
    00000fa8: 	movzbl	-0xd(%rdx), %eax
    00000fac: 	addb	-0x5(%rdx), %al
    00000faf: 	mulb	-0xd(%rcx)
    00000fb2: 	addl	%eax, %r8d
    00000fb5: 	movzbl	-0xc(%rdx), %eax
    00000fb9: 	addb	-0x4(%rdx), %al
    00000fbc: 	mulb	-0xc(%rcx)
    00000fbf: 	addl	%eax, %r8d
    00000fc2: 	movzbl	-0xb(%rdx), %eax
    00000fc6: 	addb	-0x3(%rdx), %al
    00000fc9: 	mulb	-0xb(%rcx)
    00000fcc: 	addl	%eax, %r8d
    00000fcf: 	movzbl	-0xa(%rdx), %eax
    00000fd3: 	addb	-0x2(%rdx), %al
    00000fd6: 	mulb	-0xa(%rcx)
    00000fd9: 	addl	%eax, %r8d
    00000fdc: 	movzbl	-0x9(%rdx), %eax
    00000fe0: 	addb	-0x1(%rdx), %al
    00000fe3: 	mulb	-0x9(%rcx)
    00000fe6: 	addl	%eax, %r8d
    00000fe9: 	cmpq	%rsi, %r11
    00000fec: 	ja	.Ltmp95 # Offset: 4076
.Ltmp99:
    00000fee: 	cmpq	%rsi, %rdi
    00000ff1: 	jbe	.Ltmp96 # Offset: 4081
    00000ff7: 	leaq	0x1(%rsi), %rdx
    00000ffb: 	movq	%rdi, %rax
    00000ffe: 	movl	$0x1, %ecx
    00001003: 	subq	%rsi, %rax
    00001006: 	cmpq	%rdx, %rdi
    00001009: 	cmovaeq	%rax, %rcx
    0000100d: 	subq	$0x1, %rax
    00001011: 	cmpq	$0xe, %rax
    00001015: 	jbe	.Ltmp97 # Offset: 4117
    00001017: 	cmpq	%rdx, %rdi
    0000101a: 	jb	.Ltmp97 # Offset: 4122
    0000101c: 	movdqu	(%r10,%rsi), %xmm2
    00001022: 	movdqu	(%r9,%rsi), %xmm1
    00001028: 	movdqa	%xmm2, %xmm3
    0000102c: 	movdqa	%xmm1, %xmm0
    00001030: 	punpcklbw	%xmm1, %xmm0
    00001034: 	punpcklbw	%xmm2, %xmm3
    00001038: 	punpckhbw	%xmm1, %xmm1
    0000103c: 	punpckhbw	%xmm2, %xmm2
    00001040: 	pmullw	%xmm3, %xmm0
    00001044: 	pmullw	%xmm2, %xmm1
    00001048: 	movdqa	DATAat0x32530(%rip), %xmm2
    00001050: 	pand	%xmm2, %xmm0
    00001054: 	pand	%xmm1, %xmm2
    00001058: 	packuswb	%xmm2, %xmm0
    0000105c: 	movdqa	%xmm0, %xmm1
    00001060: 	psrldq	$0x8, %xmm1
    00001065: 	paddb	%xmm1, %xmm0
    00001069: 	pxor	%xmm1, %xmm1
    0000106d: 	psadbw	%xmm1, %xmm0
    00001071: 	movd	%xmm0, %eax
    00001075: 	addl	%eax, %r8d
    00001078: 	movq	%rcx, %rax
    0000107b: 	andq	$-0x10, %rax
    0000107f: 	addq	%rax, %rsi
    00001082: 	leaq	0x1(%rsi), %rdx
    00001086: 	cmpq	%rcx, %rax
    00001089: 	je	.Ltmp96 # Offset: 4233
.Ltmp97:
    0000108f: 	movzbl	(%r9,%rsi), %eax
    00001094: 	mulb	(%r10,%rsi)
    00001098: 	leal	(%rax,%r8), %ecx
    0000109c: 	movl	%ecx, %r8d
    0000109f: 	cmpq	%rdx, %rdi
    000010a2: 	jbe	.Ltmp96 # Offset: 4258
.Ltmp100:
    000010a8: 	movzbl	(%r9,%rdx), %eax
    000010ad: 	mulb	(%r10,%rdx)
    000010b1: 	leal	(%rax,%rcx), %r8d
    000010b5: 	leaq	0x1(%rdx), %rax
    000010b9: 	cmpq	%rdi, %rax
    000010bc: 	jae	.Ltmp96 # Offset: 4284
    000010c2: 	movzbl	0x1(%r9,%rdx), %eax
    000010c8: 	mulb	0x1(%r10,%rdx)
    000010cd: 	addl	%eax, %r8d
    000010d0: 	leaq	0x2(%rdx), %rax
    000010d4: 	cmpq	%rdi, %rax
    000010d7: 	jae	.Ltmp96 # Offset: 4311
    000010dd: 	movzbl	0x2(%r9,%rdx), %eax
    000010e3: 	mulb	0x2(%r10,%rdx)
    000010e8: 	addl	%eax, %r8d
    000010eb: 	leaq	0x3(%rdx), %rax
    000010ef: 	cmpq	%rdi, %rax
    000010f2: 	jae	.Ltmp96 # Offset: 4338
    000010f8: 	movzbl	0x3(%r9,%rdx), %eax
    000010fe: 	mulb	0x3(%r10,%rdx)
    00001103: 	addl	%eax, %r8d
    00001106: 	leaq	0x4(%rdx), %rax
    0000110a: 	cmpq	%rdi, %rax
    0000110d: 	jae	.Ltmp96 # Offset: 4365
    00001113: 	movzbl	0x4(%r9,%rdx), %eax
    00001119: 	mulb	0x4(%r10,%rdx)
    0000111e: 	addl	%eax, %r8d
    00001121: 	leaq	0x5(%rdx), %rax
    00001125: 	cmpq	%rdi, %rax
    00001128: 	jae	.Ltmp96 # Offset: 4392
    0000112e: 	movzbl	0x5(%r9,%rdx), %eax
    00001134: 	mulb	0x5(%r10,%rdx)
    00001139: 	addl	%eax, %r8d
    0000113c: 	leaq	0x6(%rdx), %rax
    00001140: 	cmpq	%rdi, %rax
    00001143: 	jae	.Ltmp96 # Offset: 4419
    00001149: 	movzbl	0x6(%r9,%rdx), %eax
    0000114f: 	mulb	0x6(%r10,%rdx)
    00001154: 	addl	%eax, %r8d
    00001157: 	leaq	0x7(%rdx), %rax
    0000115b: 	cmpq	%rdi, %rax
    0000115e: 	jae	.Ltmp96 # Offset: 4446
    00001164: 	movzbl	0x7(%r9,%rdx), %eax
    0000116a: 	mulb	0x7(%r10,%rdx)
    0000116f: 	addl	%eax, %r8d
    00001172: 	leaq	0x8(%rdx), %rax
    00001176: 	cmpq	%rdi, %rax
    00001179: 	jae	.Ltmp96 # Offset: 4473
    0000117f: 	movzbl	0x8(%r9,%rdx), %eax
    00001185: 	mulb	0x8(%r10,%rdx)
    0000118a: 	addl	%eax, %r8d
    0000118d: 	leaq	0x9(%rdx), %rax
    00001191: 	cmpq	%rax, %rdi
    00001194: 	jbe	.Ltmp96 # Offset: 4500
    00001196: 	movzbl	0x9(%r9,%rdx), %eax
    0000119c: 	mulb	0x9(%r10,%rdx)
    000011a1: 	leal	(%rax,%r8), %ecx
    000011a5: 	leaq	0xa(%rdx), %rax
    000011a9: 	movl	%ecx, %r8d
    000011ac: 	cmpq	%rax, %rdi
    000011af: 	jbe	.Ltmp96 # Offset: 4527
    000011b1: 	movzbl	0xa(%r9,%rdx), %eax
    000011b7: 	mulb	0xa(%r10,%rdx)
    000011bc: 	leal	(%rax,%rcx), %r8d
    000011c0: 	leaq	0xb(%rdx), %rax
    000011c4: 	cmpq	%rax, %rdi
    000011c7: 	jbe	.Ltmp96 # Offset: 4551
    000011c9: 	movzbl	0xb(%r9,%rdx), %eax
    000011cf: 	mulb	0xb(%r10,%rdx)
    000011d4: 	addl	%eax, %r8d
    000011d7: 	leaq	0xc(%rdx), %rax
    000011db: 	cmpq	%rax, %rdi
    000011de: 	jbe	.Ltmp96 # Offset: 4574
    000011e0: 	movzbl	0xc(%r9,%rdx), %eax
    000011e6: 	mulb	0xc(%r10,%rdx)
    000011eb: 	addl	%eax, %r8d
    000011ee: 	leaq	0xd(%rdx), %rax
    000011f2: 	cmpq	%rax, %rdi
    000011f5: 	jbe	.Ltmp96 # Offset: 4597
    000011f7: 	movzbl	0xd(%r10,%rdx), %eax
    000011fd: 	mulb	0xd(%r9,%rdx)
    00001202: 	addl	%eax, %r8d
.Ltmp96:
    00001205: 	addq	$0xf8, %rsp
    0000120c: 	movl	%r8d, %eax
    0000120f: 	popq	%rbx
    00001210: 	retq # Offset: 4624
    00001211: 	nopl	(%rax) # Size: 7
.Ltmp93:
    00001218: 	movq	%r9, %rcx
    0000121b: 	movq	%r10, %rdx
    0000121e: 	xorl	%r8d, %r8d
    00001221: 	xorl	%esi, %esi
    00001223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp98:
    00001228: 	movzbl	0x1(%rcx), %eax
    0000122c: 	movzbl	0x1(%rdx), %ebx
    00001230: 	addq	$0x10, %rsi
    00001234: 	addq	$0x10, %rcx
    00001238: 	addb	0x9(%rdx), %bl
    0000123b: 	addq	$0x10, %rdx
    0000123f: 	imull	%ebx, %eax
    00001242: 	movl	%eax, %ebx
    00001244: 	movzbl	-0x10(%rdx), %eax
    00001248: 	addb	-0x8(%rdx), %al
    0000124b: 	mulb	-0x10(%rcx)
    0000124e: 	addl	%eax, %ebx
    00001250: 	movzbl	-0xe(%rdx), %eax
    00001254: 	addb	-0x6(%rdx), %al
    00001257: 	mulb	-0xe(%rcx)
    0000125a: 	addl	%ebx, %r8d
    0000125d: 	addl	%eax, %r8d
    00001260: 	movzbl	-0xd(%rdx), %eax
    00001264: 	addb	-0x5(%rdx), %al
    00001267: 	mulb	-0xd(%rcx)
    0000126a: 	addl	%eax, %r8d
    0000126d: 	movzbl	-0xc(%rdx), %eax
    00001271: 	addb	-0x4(%rdx), %al
    00001274: 	mulb	-0xc(%rcx)
    00001277: 	addl	%eax, %r8d
    0000127a: 	movzbl	-0xb(%rdx), %eax
    0000127e: 	addb	-0x3(%rdx), %al
    00001281: 	mulb	-0xb(%rcx)
    00001284: 	addl	%eax, %r8d
    00001287: 	movzbl	-0xa(%rdx), %eax
    0000128b: 	addb	-0x2(%rdx), %al
    0000128e: 	mulb	-0xa(%rcx)
    00001291: 	addl	%eax, %r8d
    00001294: 	movzbl	-0x9(%rdx), %eax
    00001298: 	addb	-0x1(%rdx), %al
    0000129b: 	mulb	-0x9(%rcx)
    0000129e: 	addl	%eax, %r8d
    000012a1: 	cmpq	%rsi, %r11
    000012a4: 	ja	.Ltmp98 # Offset: 4772
    000012a6: 	jmp	.Ltmp99 # Offset: 4774
    000012ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp92:
    000012b0: 	movzbl	(%r9), %eax
    000012b4: 	mulb	(%rsi)
    000012b6: 	movl	$0x1, %edx
    000012bb: 	movl	%eax, %ecx
    000012bd: 	jmp	.Ltmp100 # Offset: 4797
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product7IPKaaET0_T_S3_m" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4970
  Size        : 0x98b
  MaxSize     : 0x990
  Offset      : 0x4970
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r10
    00000009: 	movq	%rsi, %r9
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdx, %rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x350, %rsp
    0000001a: 	subq	$0x1, %rbp
    0000001e: 	je	.Ltmp101 # Offset: 30
    00000024: 	movq	%rdx, %rbx
    00000027: 	leaq	-0x2(%rdx), %r12
    0000002b: 	testq	%rdx, %rdx
    0000002e: 	je	.Ltmp102 # Offset: 46
    00000034: 	cmpq	$0x1d, %r12
    00000038: 	jbe	.Ltmp102 # Offset: 56
    0000003e: 	shrq	%r12
    00000041: 	pxor	%xmm4, %xmm4
    00000045: 	xorl	%eax, %eax
    00000047: 	xorl	%edx, %edx
    00000049: 	addq	$0x1, %r12
    0000004d: 	movdqa	DATAat0x32540(%rip), %xmm6
    00000055: 	movdqa	%xmm4, %xmm5
    00000059: 	movdqa	DATAat0x32550(%rip), %xmm8
    00000062: 	movq	%r12, %rcx
    00000065: 	movdqa	DATAat0x32530(%rip), %xmm2
    0000006d: 	movdqa	DATAat0x32560(%rip), %xmm7
    00000075: 	shrq	$0x4, %rcx
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp103:
    00000080: 	movdqu	(%r10,%rax), %xmm3
    00000086: 	movdqu	(%r9,%rax), %xmm1
    0000008c: 	movdqa	%xmm6, %xmm0
    00000090: 	addq	$0x1, %rdx
    00000094: 	paddq	%xmm8, %xmm6
    00000099: 	paddq	%xmm7, %xmm0
    0000009d: 	movdqa	%xmm1, %xmm9
    000000a2: 	movdqa	%xmm3, %xmm10
    000000a7: 	punpcklbw	%xmm3, %xmm10
    000000ac: 	punpcklbw	%xmm1, %xmm9
    000000b1: 	punpckhbw	%xmm3, %xmm3
    000000b5: 	punpckhbw	%xmm1, %xmm1
    000000b9: 	pmullw	%xmm10, %xmm9
    000000be: 	movdqu	0x10(%r10,%rax), %xmm10
    000000c5: 	pmullw	%xmm3, %xmm1
    000000c9: 	movdqa	%xmm10, %xmm11
    000000ce: 	punpcklbw	%xmm10, %xmm11
    000000d3: 	punpckhbw	%xmm10, %xmm10
    000000d8: 	pand	%xmm2, %xmm9
    000000dd: 	pand	%xmm2, %xmm1
    000000e1: 	packuswb	%xmm1, %xmm9
    000000e6: 	movdqu	0x10(%r9,%rax), %xmm1
    000000ed: 	addq	$0x20, %rax
    000000f1: 	paddb	%xmm9, %xmm5
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	punpcklbw	%xmm1, %xmm3
    000000fe: 	punpckhbw	%xmm1, %xmm1
    00000102: 	pmullw	%xmm11, %xmm3
    00000107: 	pmullw	%xmm10, %xmm1
    0000010c: 	pand	%xmm2, %xmm3
    00000110: 	pand	%xmm2, %xmm1
    00000114: 	packuswb	%xmm1, %xmm3
    00000118: 	paddb	%xmm3, %xmm4
    0000011c: 	cmpq	%rcx, %rdx
    0000011f: 	jb	.Ltmp103 # Offset: 287
    00000125: 	movaps	%xmm5, 0x338(%rsp)
    0000012d: 	movd	%xmm5, %edx
    00000131: 	movd	%xmm4, %eax
    00000135: 	movzbl	0x33a(%rsp), %r8d
    0000013e: 	movaps	%xmm5, 0x328(%rsp)
    00000146: 	movq	%r12, %r13
    00000149: 	movhlps	%xmm0, %xmm7
    0000014c: 	addl	%edx, %r8d
    0000014f: 	movaps	%xmm5, 0x318(%rsp)
    00000157: 	addb	0x32c(%rsp), %r8b
    0000015f: 	addb	0x31e(%rsp), %r8b
    00000167: 	movaps	%xmm5, 0x308(%rsp)
    0000016f: 	addb	0x310(%rsp), %r8b
    00000177: 	movq	%xmm7, %rdi
    0000017c: 	movaps	%xmm5, 0x2f8(%rsp)
    00000184: 	addb	0x302(%rsp), %r8b
    0000018c: 	movaps	%xmm5, 0x2e8(%rsp)
    00000194: 	addb	0x2f4(%rsp), %r8b
    0000019c: 	movaps	%xmm5, 0x2d8(%rsp)
    000001a4: 	addb	0x2e6(%rsp), %r8b
    000001ac: 	addl	%eax, %r8d
    000001af: 	movaps	%xmm4, 0x2c8(%rsp)
    000001b7: 	addb	0x2ca(%rsp), %r8b
    000001bf: 	movaps	%xmm4, 0x2b8(%rsp)
    000001c7: 	addb	0x2bc(%rsp), %r8b
    000001cf: 	movaps	%xmm4, 0x2a8(%rsp)
    000001d7: 	addb	0x2ae(%rsp), %r8b
    000001df: 	movaps	%xmm4, 0x298(%rsp)
    000001e7: 	addb	0x2a0(%rsp), %r8b
    000001ef: 	movaps	%xmm4, 0x288(%rsp)
    000001f7: 	addb	0x292(%rsp), %r8b
    000001ff: 	movaps	%xmm4, 0x278(%rsp)
    00000207: 	addb	0x284(%rsp), %r8b
    0000020f: 	movaps	%xmm5, 0x258(%rsp)
    00000217: 	movaps	%xmm5, 0x248(%rsp)
    0000021f: 	movzbl	0x24b(%rsp), %r11d
    00000228: 	addb	0x259(%rsp), %r11b
    00000230: 	movaps	%xmm4, 0x268(%rsp)
    00000238: 	movaps	%xmm5, 0x238(%rsp)
    00000240: 	addb	0x23d(%rsp), %r11b
    00000248: 	addb	0x276(%rsp), %r8b
    00000250: 	movaps	%xmm5, 0x228(%rsp)
    00000258: 	addb	0x22f(%rsp), %r11b
    00000260: 	movaps	%xmm5, 0x218(%rsp)
    00000268: 	addb	0x221(%rsp), %r11b
    00000270: 	movaps	%xmm5, 0x208(%rsp)
    00000278: 	addb	0x213(%rsp), %r11b
    00000280: 	movaps	%xmm5, 0x1f8(%rsp)
    00000288: 	addb	0x205(%rsp), %r11b
    00000290: 	movaps	%xmm5, 0x1e8(%rsp)
    00000298: 	addb	0x1f7(%rsp), %r11b
    000002a0: 	movaps	%xmm4, 0x1d8(%rsp)
    000002a8: 	addb	0x1d9(%rsp), %r11b
    000002b0: 	movaps	%xmm4, 0x1c8(%rsp)
    000002b8: 	addb	0x1cb(%rsp), %r11b
    000002c0: 	movaps	%xmm4, 0x1b8(%rsp)
    000002c8: 	addb	0x1bd(%rsp), %r11b
    000002d0: 	movaps	%xmm4, 0x1a8(%rsp)
    000002d8: 	addb	0x1af(%rsp), %r11b
    000002e0: 	movaps	%xmm4, 0x198(%rsp)
    000002e8: 	addb	0x1a1(%rsp), %r11b
    000002f0: 	movaps	%xmm4, 0x188(%rsp)
    000002f8: 	addb	0x193(%rsp), %r11b
    00000300: 	movaps	%xmm4, 0x178(%rsp)
    00000308: 	addb	0x185(%rsp), %r11b
    00000310: 	movaps	%xmm4, 0x168(%rsp)
    00000318: 	addb	0x177(%rsp), %r11b
    00000320: 	movaps	%xmm5, 0x158(%rsp)
    00000328: 	addb	0x15a(%rsp), %dl
    0000032f: 	movaps	%xmm5, 0x148(%rsp)
    00000337: 	addb	0x14c(%rsp), %dl
    0000033e: 	movaps	%xmm5, 0x138(%rsp)
    00000346: 	addb	0x13e(%rsp), %dl
    0000034d: 	andq	$-0x10, %r13
    00000351: 	movaps	%xmm5, 0x128(%rsp)
    00000359: 	addb	0x130(%rsp), %dl
    00000360: 	leaq	(%r13,%r13), %rsi
    00000365: 	movaps	%xmm5, 0x118(%rsp)
    0000036d: 	addb	0x122(%rsp), %dl
    00000374: 	movaps	%xmm5, 0x108(%rsp)
    0000037c: 	addb	0x114(%rsp), %dl
    00000383: 	movaps	%xmm5, 0xf8(%rsp)
    0000038b: 	addb	0x106(%rsp), %dl
    00000392: 	movaps	%xmm4, 0xe8(%rsp)
    0000039a: 	addl	%eax, %edx
    0000039c: 	addb	0xea(%rsp), %dl
    000003a3: 	movaps	%xmm4, 0xd8(%rsp)
    000003ab: 	addb	0xdc(%rsp), %dl
    000003b2: 	movaps	%xmm4, 0xc8(%rsp)
    000003ba: 	addb	0xce(%rsp), %dl
    000003c1: 	movaps	%xmm4, 0xb8(%rsp)
    000003c9: 	addb	0xc0(%rsp), %dl
    000003d0: 	movaps	%xmm4, 0xa8(%rsp)
    000003d8: 	addb	0xb2(%rsp), %dl
    000003df: 	movaps	%xmm4, 0x98(%rsp)
    000003e7: 	addb	0xa4(%rsp), %dl
    000003ee: 	movaps	%xmm4, 0x88(%rsp)
    000003f6: 	addb	0x96(%rsp), %dl
    000003fd: 	movaps	%xmm5, 0x78(%rsp)
    00000402: 	movaps	%xmm5, 0x68(%rsp)
    00000407: 	movzbl	0x6b(%rsp), %ecx
    0000040c: 	addb	0x79(%rsp), %cl
    00000410: 	movaps	%xmm5, 0x58(%rsp)
    00000415: 	addb	0x5d(%rsp), %cl
    00000419: 	movaps	%xmm5, 0x48(%rsp)
    0000041e: 	addb	0x4f(%rsp), %cl
    00000422: 	movaps	%xmm5, 0x38(%rsp)
    00000427: 	addb	0x41(%rsp), %cl
    0000042b: 	movaps	%xmm5, 0x28(%rsp)
    00000430: 	addb	0x33(%rsp), %cl
    00000434: 	movaps	%xmm5, 0x18(%rsp)
    00000439: 	addb	0x25(%rsp), %cl
    0000043d: 	movaps	%xmm5, 0x8(%rsp)
    00000442: 	addb	0x17(%rsp), %cl
    00000446: 	movaps	%xmm4, -0x8(%rsp)
    0000044b: 	addb	-0x7(%rsp), %cl
    0000044f: 	movaps	%xmm4, -0x18(%rsp)
    00000454: 	addb	-0x15(%rsp), %cl
    00000458: 	movaps	%xmm4, -0x28(%rsp)
    0000045d: 	addb	-0x23(%rsp), %cl
    00000461: 	movaps	%xmm4, -0x38(%rsp)
    00000466: 	addb	-0x31(%rsp), %cl
    0000046a: 	movaps	%xmm4, -0x48(%rsp)
    0000046f: 	addb	-0x3f(%rsp), %cl
    00000473: 	movaps	%xmm4, -0x58(%rsp)
    00000478: 	addb	-0x4d(%rsp), %cl
    0000047c: 	movaps	%xmm4, -0x68(%rsp)
    00000481: 	addb	-0x5b(%rsp), %cl
    00000485: 	movaps	%xmm4, -0x78(%rsp)
    0000048a: 	addb	-0x69(%rsp), %cl
    0000048e: 	cmpq	%r13, %r12
    00000491: 	je	.Ltmp104 # Offset: 1169
    00000497: 	movzbl	(%r10,%r13,2), %eax
    0000049c: 	mulb	(%r9,%r13,2)
    000004a0: 	leaq	0x2(%rsi), %rdi
    000004a4: 	leal	(%rax,%r8), %edx
    000004a8: 	movzbl	0x1(%r10,%rsi), %eax
    000004ae: 	mulb	0x1(%r9,%rsi)
    000004b3: 	movl	%edx, %r8d
    000004b6: 	leal	(%rax,%r11), %ecx
    000004ba: 	cmpq	%rdi, %rbp
    000004bd: 	jbe	.Ltmp104 # Offset: 1213
    000004c3: 	movzbl	0x2(%r10,%rsi), %eax
    000004c9: 	mulb	0x2(%r9,%rsi)
    000004ce: 	leaq	0x4(%rsi), %rdi
    000004d2: 	addl	%eax, %edx
    000004d4: 	movzbl	0x3(%r10,%rsi), %eax
    000004da: 	mulb	0x3(%r9,%rsi)
    000004df: 	movl	%edx, %r8d
    000004e2: 	addl	%eax, %ecx
    000004e4: 	cmpq	%rdi, %rbp
    000004e7: 	jbe	.Ltmp104 # Offset: 1255
    000004ed: 	movzbl	0x4(%r10,%rsi), %eax
    000004f3: 	mulb	0x4(%r9,%rsi)
    000004f8: 	leaq	0x6(%rsi), %rdi
    000004fc: 	addl	%eax, %edx
    000004fe: 	movzbl	0x5(%r10,%rsi), %eax
    00000504: 	mulb	0x5(%r9,%rsi)
    00000509: 	movl	%edx, %r8d
    0000050c: 	addl	%eax, %ecx
    0000050e: 	cmpq	%rdi, %rbp
    00000511: 	jbe	.Ltmp104 # Offset: 1297
    00000517: 	movzbl	0x6(%r10,%rsi), %eax
    0000051d: 	mulb	0x6(%r9,%rsi)
    00000522: 	leaq	0x8(%rsi), %rdi
    00000526: 	addl	%eax, %edx
    00000528: 	movzbl	0x7(%r10,%rsi), %eax
    0000052e: 	mulb	0x7(%r9,%rsi)
    00000533: 	movl	%edx, %r8d
    00000536: 	addl	%eax, %ecx
    00000538: 	cmpq	%rdi, %rbp
    0000053b: 	jbe	.Ltmp104 # Offset: 1339
    00000541: 	movzbl	0x8(%r10,%rsi), %eax
    00000547: 	mulb	0x8(%r9,%rsi)
    0000054c: 	leaq	0xa(%rsi), %rdi
    00000550: 	addl	%eax, %edx
    00000552: 	movzbl	0x9(%r10,%rsi), %eax
    00000558: 	mulb	0x9(%r9,%rsi)
    0000055d: 	movl	%edx, %r8d
    00000560: 	addl	%eax, %ecx
    00000562: 	cmpq	%rdi, %rbp
    00000565: 	jbe	.Ltmp104 # Offset: 1381
    0000056b: 	movzbl	0xa(%r10,%rsi), %eax
    00000571: 	mulb	0xa(%r9,%rsi)
    00000576: 	leaq	0xc(%rsi), %rdi
    0000057a: 	addl	%eax, %edx
    0000057c: 	movzbl	0xb(%r10,%rsi), %eax
    00000582: 	mulb	0xb(%r9,%rsi)
    00000587: 	movl	%edx, %r8d
    0000058a: 	addl	%eax, %ecx
    0000058c: 	cmpq	%rdi, %rbp
    0000058f: 	jbe	.Ltmp104 # Offset: 1423
    00000595: 	movzbl	0xc(%r10,%rsi), %eax
    0000059b: 	mulb	0xc(%r9,%rsi)
    000005a0: 	leaq	0xe(%rsi), %rdi
    000005a4: 	addl	%eax, %edx
    000005a6: 	movzbl	0xd(%r10,%rsi), %eax
    000005ac: 	mulb	0xd(%r9,%rsi)
    000005b1: 	movl	%edx, %r8d
    000005b4: 	addl	%eax, %ecx
    000005b6: 	cmpq	%rdi, %rbp
    000005b9: 	jbe	.Ltmp104 # Offset: 1465
    000005bf: 	movzbl	0xe(%r10,%rsi), %eax
    000005c5: 	mulb	0xe(%r9,%rsi)
    000005ca: 	leaq	0x10(%rsi), %rdi
    000005ce: 	addl	%eax, %edx
    000005d0: 	movzbl	0xf(%r10,%rsi), %eax
    000005d6: 	mulb	0xf(%r9,%rsi)
    000005db: 	movl	%edx, %r8d
    000005de: 	addl	%eax, %ecx
    000005e0: 	cmpq	%rdi, %rbp
    000005e3: 	jbe	.Ltmp104 # Offset: 1507
    000005e9: 	movzbl	0x10(%r10,%rsi), %eax
    000005ef: 	mulb	0x10(%r9,%rsi)
    000005f4: 	leaq	0x12(%rsi), %rdi
    000005f8: 	addl	%eax, %edx
    000005fa: 	movzbl	0x11(%r10,%rsi), %eax
    00000600: 	mulb	0x11(%r9,%rsi)
    00000605: 	movl	%edx, %r8d
    00000608: 	addl	%eax, %ecx
    0000060a: 	cmpq	%rdi, %rbp
    0000060d: 	jbe	.Ltmp104 # Offset: 1549
    00000613: 	movzbl	0x12(%r10,%rsi), %eax
    00000619: 	mulb	0x12(%r9,%rsi)
    0000061e: 	leaq	0x14(%rsi), %rdi
    00000622: 	addl	%eax, %edx
    00000624: 	movzbl	0x13(%r10,%rsi), %eax
    0000062a: 	mulb	0x13(%r9,%rsi)
    0000062f: 	movl	%edx, %r8d
    00000632: 	addl	%eax, %ecx
    00000634: 	cmpq	%rdi, %rbp
    00000637: 	jbe	.Ltmp104 # Offset: 1591
    0000063d: 	movzbl	0x14(%r10,%rsi), %eax
    00000643: 	mulb	0x14(%r9,%rsi)
    00000648: 	leaq	0x16(%rsi), %rdi
    0000064c: 	addl	%eax, %edx
    0000064e: 	movzbl	0x15(%r10,%rsi), %eax
    00000654: 	mulb	0x15(%r9,%rsi)
    00000659: 	movl	%edx, %r8d
    0000065c: 	addl	%eax, %ecx
    0000065e: 	cmpq	%rdi, %rbp
    00000661: 	jbe	.Ltmp104 # Offset: 1633
    00000667: 	movzbl	0x16(%r10,%rsi), %eax
    0000066d: 	mulb	0x16(%r9,%rsi)
    00000672: 	leaq	0x18(%rsi), %rdi
    00000676: 	addl	%eax, %edx
    00000678: 	movzbl	0x17(%r10,%rsi), %eax
    0000067e: 	mulb	0x17(%r9,%rsi)
    00000683: 	movl	%edx, %r8d
    00000686: 	addl	%eax, %ecx
    00000688: 	cmpq	%rdi, %rbp
    0000068b: 	jbe	.Ltmp104 # Offset: 1675
    0000068d: 	movzbl	0x18(%r10,%rsi), %eax
    00000693: 	mulb	0x18(%r9,%rsi)
    00000698: 	leaq	0x1a(%rsi), %rdi
    0000069c: 	addl	%eax, %edx
    0000069e: 	movzbl	0x19(%r10,%rsi), %eax
    000006a4: 	mulb	0x19(%r9,%rsi)
    000006a9: 	movl	%edx, %r8d
    000006ac: 	addl	%eax, %ecx
    000006ae: 	cmpq	%rdi, %rbp
    000006b1: 	jbe	.Ltmp104 # Offset: 1713
    000006b3: 	movzbl	0x1a(%r10,%rsi), %eax
    000006b9: 	mulb	0x1a(%r9,%rsi)
    000006be: 	leaq	0x1c(%rsi), %rdi
    000006c2: 	addl	%eax, %edx
    000006c4: 	movzbl	0x1b(%r10,%rsi), %eax
    000006ca: 	mulb	0x1b(%r9,%rsi)
    000006cf: 	movl	%edx, %r8d
    000006d2: 	addl	%eax, %ecx
    000006d4: 	cmpq	%rdi, %rbp
    000006d7: 	jbe	.Ltmp104 # Offset: 1751
    000006d9: 	movzbl	0x1c(%r10,%rsi), %eax
    000006df: 	mulb	0x1c(%r9,%rsi)
    000006e4: 	leaq	0x1e(%rsi), %rdi
    000006e8: 	addl	%eax, %edx
    000006ea: 	movzbl	0x1d(%r10,%rsi), %eax
    000006f0: 	mulb	0x1d(%r9,%rsi)
    000006f5: 	movl	%edx, %r8d
    000006f8: 	addl	%eax, %ecx
    000006fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp104:
    00000700: 	cmpq	%rdi, %rbx
    00000703: 	jbe	.Ltmp105 # Offset: 1795
    00000709: 	leaq	0x1(%rdi), %rsi
    0000070d: 	movq	%rbx, %rax
    00000710: 	movl	$0x1, %ebp
    00000715: 	subq	%rdi, %rax
    00000718: 	cmpq	%rsi, %rbx
    0000071b: 	cmovaeq	%rax, %rbp
    0000071f: 	subq	$0x1, %rax
    00000723: 	cmpq	$0xe, %rax
    00000727: 	jbe	.Ltmp106 # Offset: 1831
    0000072d: 	cmpq	%rsi, %rbx
    00000730: 	jb	.Ltmp106 # Offset: 1840
    00000736: 	movq	%rbp, %rdx
    00000739: 	leaq	(%r10,%rdi), %r11
    0000073d: 	leaq	(%r9,%rdi), %rsi
    00000741: 	xorl	%eax, %eax
    00000743: 	movdqa	DATAat0x32530(%rip), %xmm2
    0000074b: 	andq	$-0x10, %rdx
    0000074f: 	pxor	%xmm4, %xmm4
    00000753: 	nopl	(%rax,%rax) # Size: 5
.Ltmp107:
    00000758: 	movdqu	(%rsi,%rax), %xmm3
    0000075d: 	movdqu	(%r11,%rax), %xmm0
    00000763: 	addq	$0x10, %rax
    00000767: 	movdqa	%xmm0, %xmm1
    0000076b: 	movdqa	%xmm3, %xmm5
    0000076f: 	punpcklbw	%xmm0, %xmm1
    00000773: 	punpcklbw	%xmm3, %xmm5
    00000777: 	punpckhbw	%xmm0, %xmm0
    0000077b: 	punpckhbw	%xmm3, %xmm3
    0000077f: 	pmullw	%xmm5, %xmm1
    00000783: 	pmullw	%xmm3, %xmm0
    00000787: 	pand	%xmm2, %xmm1
    0000078b: 	pand	%xmm2, %xmm0
    0000078f: 	packuswb	%xmm0, %xmm1
    00000793: 	paddb	%xmm1, %xmm4
    00000797: 	cmpq	%rdx, %rax
    0000079a: 	jne	.Ltmp107 # Offset: 1946
    0000079c: 	movdqa	%xmm4, %xmm0
    000007a0: 	movq	%rbp, %rax
    000007a3: 	psrldq	$0x8, %xmm0
    000007a8: 	andq	$-0x10, %rax
    000007ac: 	paddb	%xmm0, %xmm4
    000007b0: 	pxor	%xmm0, %xmm0
    000007b4: 	addq	%rax, %rdi
    000007b7: 	psadbw	%xmm0, %xmm4
    000007bb: 	movd	%xmm4, %esi
    000007bf: 	addl	%esi, %r8d
    000007c2: 	movl	%r8d, %edx
    000007c5: 	cmpq	%rbp, %rax
    000007c8: 	je	.Ltmp105 # Offset: 1992
    000007ce: 	leaq	0x1(%rdi), %rsi
.Ltmp106:
    000007d2: 	movzbl	(%r10,%rdi), %eax
    000007d7: 	mulb	(%r9,%rdi)
    000007db: 	leal	(%rax,%r8), %edx
    000007df: 	cmpq	%rbx, %rsi
    000007e2: 	jae	.Ltmp105 # Offset: 2018
    000007e8: 	movzbl	0x1(%r10,%rdi), %eax
    000007ee: 	mulb	0x1(%r9,%rdi)
    000007f3: 	addl	%eax, %edx
    000007f5: 	leaq	0x2(%rdi), %rax
    000007f9: 	cmpq	%rax, %rbx
    000007fc: 	jbe	.Ltmp105 # Offset: 2044
    00000802: 	movzbl	0x2(%r9,%rdi), %eax
    00000808: 	mulb	0x2(%r10,%rdi)
    0000080d: 	addl	%eax, %edx
    0000080f: 	leaq	0x3(%rdi), %rax
    00000813: 	cmpq	%rbx, %rax
    00000816: 	jae	.Ltmp105 # Offset: 2070
    0000081c: 	movzbl	0x3(%r10,%rdi), %eax
    00000822: 	mulb	0x3(%r9,%rdi)
    00000827: 	addl	%eax, %edx
    00000829: 	leaq	0x4(%rdi), %rax
    0000082d: 	cmpq	%rax, %rbx
    00000830: 	jbe	.Ltmp105 # Offset: 2096
    00000836: 	movzbl	0x4(%r10,%rdi), %eax
    0000083c: 	mulb	0x4(%r9,%rdi)
    00000841: 	addl	%eax, %edx
    00000843: 	leaq	0x5(%rdi), %rax
    00000847: 	cmpq	%rax, %rbx
    0000084a: 	jbe	.Ltmp105 # Offset: 2122
    00000850: 	movzbl	0x5(%r10,%rdi), %eax
    00000856: 	mulb	0x5(%r9,%rdi)
    0000085b: 	addl	%eax, %edx
    0000085d: 	leaq	0x6(%rdi), %rax
    00000861: 	cmpq	%rax, %rbx
    00000864: 	jbe	.Ltmp105 # Offset: 2148
    0000086a: 	movzbl	0x6(%r10,%rdi), %eax
    00000870: 	mulb	0x6(%r9,%rdi)
    00000875: 	addl	%eax, %edx
    00000877: 	leaq	0x7(%rdi), %rax
    0000087b: 	cmpq	%rax, %rbx
    0000087e: 	jbe	.Ltmp105 # Offset: 2174
    00000884: 	movzbl	0x7(%r10,%rdi), %eax
    0000088a: 	mulb	0x7(%r9,%rdi)
    0000088f: 	addl	%eax, %edx
    00000891: 	leaq	0x8(%rdi), %rax
    00000895: 	cmpq	%rax, %rbx
    00000898: 	jbe	.Ltmp105 # Offset: 2200
    0000089e: 	movzbl	0x8(%r10,%rdi), %eax
    000008a4: 	mulb	0x8(%r9,%rdi)
    000008a9: 	addl	%eax, %edx
    000008ab: 	leaq	0x9(%rdi), %rax
    000008af: 	cmpq	%rax, %rbx
    000008b2: 	jbe	.Ltmp105 # Offset: 2226
    000008b4: 	movzbl	0x9(%r10,%rdi), %eax
    000008ba: 	mulb	0x9(%r9,%rdi)
    000008bf: 	addl	%eax, %edx
    000008c1: 	leaq	0xa(%rdi), %rax
    000008c5: 	cmpq	%rax, %rbx
    000008c8: 	jbe	.Ltmp105 # Offset: 2248
    000008ca: 	movzbl	0xa(%r10,%rdi), %eax
    000008d0: 	mulb	0xa(%r9,%rdi)
    000008d5: 	addl	%eax, %edx
    000008d7: 	leaq	0xb(%rdi), %rax
    000008db: 	cmpq	%rax, %rbx
    000008de: 	jbe	.Ltmp105 # Offset: 2270
    000008e0: 	movzbl	0xb(%r10,%rdi), %eax
    000008e6: 	mulb	0xb(%r9,%rdi)
    000008eb: 	addl	%eax, %edx
    000008ed: 	leaq	0xc(%rdi), %rax
    000008f1: 	cmpq	%rax, %rbx
    000008f4: 	jbe	.Ltmp105 # Offset: 2292
    000008f6: 	movzbl	0xc(%r10,%rdi), %eax
    000008fc: 	mulb	0xc(%r9,%rdi)
    00000901: 	addl	%eax, %edx
    00000903: 	leaq	0xd(%rdi), %rax
    00000907: 	cmpq	%rax, %rbx
    0000090a: 	jbe	.Ltmp105 # Offset: 2314
    0000090c: 	movzbl	0xd(%r10,%rdi), %eax
    00000912: 	mulb	0xd(%r9,%rdi)
    00000917: 	addl	%eax, %edx
    00000919: 	leaq	0xe(%rdi), %rax
    0000091d: 	cmpq	%rax, %rbx
    00000920: 	jbe	.Ltmp105 # Offset: 2336
    00000922: 	movzbl	0xe(%r9,%rdi), %eax
    00000928: 	mulb	0xe(%r10,%rdi)
    0000092d: 	addl	%eax, %edx
.Ltmp105:
    0000092f: 	addq	$0x350, %rsp
    00000936: 	leal	(%rdx,%rcx), %eax
    00000939: 	popq	%rbx
    0000093a: 	popq	%rbp
    0000093b: 	popq	%r12
    0000093d: 	popq	%r13
    0000093f: 	retq # Offset: 2367
.Ltmp102:
    00000940: 	xorl	%esi, %esi
    00000942: 	xorl	%r8d, %r8d
    00000945: 	xorl	%edi, %edi
    00000947: 	nopw	(%rax,%rax) # Size: 9
.Ltmp108:
    00000950: 	movzbl	(%r9,%rdi), %eax
    00000955: 	mulb	(%r10,%rdi)
    00000959: 	leal	(%rax,%r8), %edx
    0000095d: 	movzbl	0x1(%r9,%rdi), %eax
    00000963: 	mulb	0x1(%r10,%rdi)
    00000968: 	addq	$0x2, %rdi
    0000096c: 	movl	%edx, %r8d
    0000096f: 	leal	(%rax,%rsi), %ecx
    00000972: 	movl	%ecx, %esi
    00000974: 	cmpq	%rbp, %rdi
    00000977: 	jb	.Ltmp108 # Offset: 2423
    00000979: 	jmp	.Ltmp104 # Offset: 2425
    0000097e: 	nop # Size: 2
.Ltmp101:
    00000980: 	movzbl	(%rdi), %eax
    00000983: 	mulb	(%rsi)
    00000985: 	xorl	%ecx, %ecx
    00000987: 	movl	%eax, %edx
    00000989: 	jmp	.Ltmp105 # Offset: 2441
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product8IPKaaET0_T_S3_m" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x5300
  Size        : 0xc1d
  MaxSize     : 0xc20
  Offset      : 0x5300
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r9
    00000009: 	movq	%rsi, %r8
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x710, %rsp
    00000021: 	subq	$0x3, %r12
    00000025: 	je	.Ltmp109 # Offset: 37
    0000002b: 	leaq	-0x4(%rdx), %r13
    0000002f: 	cmpq	$-0x4, %r12
    00000033: 	ja	.Ltmp110 # Offset: 51
    00000039: 	cmpq	$0x3b, %r13
    0000003d: 	jbe	.Ltmp110 # Offset: 61
    00000043: 	shrq	$0x2, %r13
    00000047: 	pxor	%xmm2, %xmm2
    0000004b: 	movq	%rdi, %rdx
    0000004e: 	movq	%r8, %rax
    00000051: 	addq	$0x1, %r13
    00000055: 	movdqa	%xmm2, %xmm3
    00000059: 	movdqa	%xmm2, %xmm4
    0000005d: 	xorl	%ecx, %ecx
    0000005f: 	movq	%r13, %rsi
    00000062: 	movdqa	DATAat0x32570(%rip), %xmm7
    0000006a: 	movdqa	%xmm2, %xmm5
    0000006e: 	movdqa	DATAat0x32580(%rip), %xmm9
    00000077: 	movdqa	DATAat0x32530(%rip), %xmm1
    0000007f: 	shrq	$0x4, %rsi
    00000083: 	movdqa	DATAat0x32590(%rip), %xmm8
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp111:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	movdqa	%xmm7, %xmm6
    00000098: 	addq	$0x1, %rcx
    0000009c: 	addq	$0x40, %rdx
    000000a0: 	movdqu	-0x40(%rdx), %xmm11
    000000a6: 	paddq	%xmm9, %xmm7
    000000ab: 	paddq	%xmm8, %xmm6
    000000b0: 	addq	$0x40, %rax
    000000b4: 	movdqa	%xmm0, %xmm10
    000000b9: 	movdqa	%xmm11, %xmm12
    000000be: 	punpcklbw	%xmm0, %xmm10
    000000c3: 	punpckhbw	%xmm0, %xmm0
    000000c7: 	punpcklbw	%xmm11, %xmm12
    000000cc: 	punpckhbw	%xmm11, %xmm11
    000000d1: 	pmullw	%xmm12, %xmm10
    000000d6: 	pmullw	%xmm11, %xmm0
    000000db: 	movdqu	-0x30(%rdx), %xmm12
    000000e1: 	movdqa	%xmm12, %xmm13
    000000e6: 	punpcklbw	%xmm12, %xmm13
    000000eb: 	punpckhbw	%xmm12, %xmm12
    000000f0: 	pand	%xmm1, %xmm0
    000000f4: 	pand	%xmm1, %xmm10
    000000f9: 	packuswb	%xmm0, %xmm10
    000000fe: 	movdqu	-0x30(%rax), %xmm0
    00000103: 	paddb	%xmm10, %xmm5
    00000108: 	movdqa	%xmm0, %xmm11
    0000010d: 	punpcklbw	%xmm0, %xmm11
    00000112: 	punpckhbw	%xmm0, %xmm0
    00000116: 	pmullw	%xmm13, %xmm11
    0000011b: 	pmullw	%xmm12, %xmm0
    00000120: 	movdqu	-0x20(%rax), %xmm12
    00000126: 	movdqa	%xmm12, %xmm13
    0000012b: 	punpcklbw	%xmm12, %xmm13
    00000130: 	punpckhbw	%xmm12, %xmm12
    00000135: 	pand	%xmm1, %xmm0
    00000139: 	pand	%xmm1, %xmm11
    0000013e: 	packuswb	%xmm0, %xmm11
    00000143: 	movdqu	-0x20(%rdx), %xmm0
    00000148: 	paddb	%xmm11, %xmm4
    0000014d: 	movdqa	%xmm0, %xmm14
    00000152: 	punpcklbw	%xmm0, %xmm14
    00000157: 	punpckhbw	%xmm0, %xmm0
    0000015b: 	pmullw	%xmm14, %xmm13
    00000160: 	pmullw	%xmm12, %xmm0
    00000165: 	movdqu	-0x10(%rdx), %xmm14
    0000016b: 	movdqu	-0x10(%rax), %xmm12
    00000171: 	movdqa	%xmm14, %xmm15
    00000176: 	punpcklbw	%xmm14, %xmm15
    0000017b: 	punpckhbw	%xmm14, %xmm14
    00000180: 	pand	%xmm1, %xmm0
    00000184: 	pand	%xmm1, %xmm13
    00000189: 	packuswb	%xmm0, %xmm13
    0000018e: 	movdqa	%xmm12, %xmm0
    00000193: 	punpcklbw	%xmm12, %xmm0
    00000198: 	punpckhbw	%xmm12, %xmm12
    0000019d: 	paddb	%xmm13, %xmm3
    000001a2: 	pmullw	%xmm15, %xmm0
    000001a7: 	pmullw	%xmm14, %xmm12
    000001ac: 	pand	%xmm1, %xmm0
    000001b0: 	pand	%xmm1, %xmm12
    000001b5: 	packuswb	%xmm12, %xmm0
    000001ba: 	paddb	%xmm0, %xmm2
    000001be: 	cmpq	%rcx, %rsi
    000001c1: 	ja	.Ltmp111 # Offset: 449
    000001c7: 	movd	%xmm5, %ecx
    000001cb: 	movd	%xmm4, %esi
    000001cf: 	movd	%xmm3, %edx
    000001d3: 	movq	%r13, %r15
    000001d6: 	movaps	%xmm5, 0x6f8(%rsp)
    000001de: 	movd	%xmm2, %eax
    000001e2: 	movzbl	0x6fc(%rsp), %r10d
    000001eb: 	psrldq	$0x8, %xmm6
    000001f0: 	movaps	%xmm5, 0x6e8(%rsp)
    000001f8: 	addl	%ecx, %r10d
    000001fb: 	movaps	%xmm5, 0x6d8(%rsp)
    00000203: 	addb	0x6f0(%rsp), %r10b
    0000020b: 	addb	0x6e4(%rsp), %r10b
    00000213: 	addl	%esi, %r10d
    00000216: 	movaps	%xmm4, 0x6c8(%rsp)
    0000021e: 	addb	0x6cc(%rsp), %r10b
    00000226: 	movaps	%xmm4, 0x6b8(%rsp)
    0000022e: 	addb	0x6c0(%rsp), %r10b
    00000236: 	movaps	%xmm4, 0x6a8(%rsp)
    0000023e: 	addb	0x6b4(%rsp), %r10b
    00000246: 	addl	%edx, %r10d
    00000249: 	movaps	%xmm3, 0x698(%rsp)
    00000251: 	addb	0x69c(%rsp), %r10b
    00000259: 	movaps	%xmm3, 0x688(%rsp)
    00000261: 	addb	0x690(%rsp), %r10b
    00000269: 	movaps	%xmm3, 0x678(%rsp)
    00000271: 	addb	0x684(%rsp), %r10b
    00000279: 	addl	%eax, %r10d
    0000027c: 	movaps	%xmm2, 0x668(%rsp)
    00000284: 	addb	0x66c(%rsp), %r10b
    0000028c: 	movaps	%xmm2, 0x658(%rsp)
    00000294: 	addb	0x660(%rsp), %r10b
    0000029c: 	movaps	%xmm2, 0x648(%rsp)
    000002a4: 	addb	0x654(%rsp), %r10b
    000002ac: 	movaps	%xmm5, 0x638(%rsp)
    000002b4: 	movaps	%xmm5, 0x628(%rsp)
    000002bc: 	movzbl	0x62d(%rsp), %r14d
    000002c5: 	addb	0x639(%rsp), %r14b
    000002cd: 	movaps	%xmm5, 0x618(%rsp)
    000002d5: 	addb	0x621(%rsp), %r14b
    000002dd: 	movaps	%xmm5, 0x608(%rsp)
    000002e5: 	addb	0x615(%rsp), %r14b
    000002ed: 	movaps	%xmm4, 0x5f8(%rsp)
    000002f5: 	addb	0x5f9(%rsp), %r14b
    000002fd: 	movaps	%xmm4, 0x5e8(%rsp)
    00000305: 	addb	0x5ed(%rsp), %r14b
    0000030d: 	movaps	%xmm4, 0x5d8(%rsp)
    00000315: 	addb	0x5e1(%rsp), %r14b
    0000031d: 	movaps	%xmm4, 0x5c8(%rsp)
    00000325: 	addb	0x5d5(%rsp), %r14b
    0000032d: 	movaps	%xmm3, 0x5b8(%rsp)
    00000335: 	addb	0x5b9(%rsp), %r14b
    0000033d: 	movaps	%xmm3, 0x5a8(%rsp)
    00000345: 	addb	0x5ad(%rsp), %r14b
    0000034d: 	movaps	%xmm3, 0x598(%rsp)
    00000355: 	addb	0x5a1(%rsp), %r14b
    0000035d: 	movaps	%xmm3, 0x588(%rsp)
    00000365: 	addb	0x595(%rsp), %r14b
    0000036d: 	movaps	%xmm2, 0x578(%rsp)
    00000375: 	addb	0x579(%rsp), %r14b
    0000037d: 	movaps	%xmm2, 0x568(%rsp)
    00000385: 	addb	0x56d(%rsp), %r14b
    0000038d: 	movaps	%xmm2, 0x558(%rsp)
    00000395: 	addb	0x561(%rsp), %r14b
    0000039d: 	movaps	%xmm2, 0x548(%rsp)
    000003a5: 	addb	0x555(%rsp), %r14b
    000003ad: 	movaps	%xmm5, 0x538(%rsp)
    000003b5: 	movaps	%xmm5, 0x528(%rsp)
    000003bd: 	movzbl	0x52e(%rsp), %ebx
    000003c5: 	addb	0x53a(%rsp), %bl
    000003cc: 	movaps	%xmm5, 0x518(%rsp)
    000003d4: 	addb	0x522(%rsp), %bl
    000003db: 	movaps	%xmm5, 0x508(%rsp)
    000003e3: 	addb	0x516(%rsp), %bl
    000003ea: 	movaps	%xmm4, 0x4f8(%rsp)
    000003f2: 	addb	0x4fa(%rsp), %bl
    000003f9: 	movaps	%xmm4, 0x4e8(%rsp)
    00000401: 	addb	0x4ee(%rsp), %bl
    00000408: 	movaps	%xmm4, 0x4d8(%rsp)
    00000410: 	addb	0x4e2(%rsp), %bl
    00000417: 	movaps	%xmm4, 0x4c8(%rsp)
    0000041f: 	addb	0x4d6(%rsp), %bl
    00000426: 	movaps	%xmm3, 0x4b8(%rsp)
    0000042e: 	addb	0x4ba(%rsp), %bl
    00000435: 	movaps	%xmm3, 0x4a8(%rsp)
    0000043d: 	addb	0x4ae(%rsp), %bl
    00000444: 	movaps	%xmm3, 0x498(%rsp)
    0000044c: 	addb	0x4a2(%rsp), %bl
    00000453: 	movaps	%xmm3, 0x488(%rsp)
    0000045b: 	addb	0x496(%rsp), %bl
    00000462: 	movaps	%xmm2, 0x478(%rsp)
    0000046a: 	addb	0x47a(%rsp), %bl
    00000471: 	movaps	%xmm2, 0x468(%rsp)
    00000479: 	addb	0x46e(%rsp), %bl
    00000480: 	movaps	%xmm2, 0x458(%rsp)
    00000488: 	addb	0x462(%rsp), %bl
    0000048f: 	movaps	%xmm2, 0x448(%rsp)
    00000497: 	addb	0x456(%rsp), %bl
    0000049e: 	movaps	%xmm5, 0x438(%rsp)
    000004a6: 	movaps	%xmm5, 0x428(%rsp)
    000004ae: 	movzbl	0x42f(%rsp), %r11d
    000004b7: 	addb	0x43b(%rsp), %r11b
    000004bf: 	movaps	%xmm5, 0x418(%rsp)
    000004c7: 	addb	0x423(%rsp), %r11b
    000004cf: 	movaps	%xmm5, 0x408(%rsp)
    000004d7: 	addb	0x417(%rsp), %r11b
    000004df: 	movaps	%xmm4, 0x3f8(%rsp)
    000004e7: 	addb	0x3fb(%rsp), %r11b
    000004ef: 	movaps	%xmm5, 0x338(%rsp)
    000004f7: 	addb	0x33c(%rsp), %cl
    000004fe: 	movaps	%xmm5, 0x328(%rsp)
    00000506: 	addb	0x330(%rsp), %cl
    0000050d: 	movaps	%xmm5, 0x318(%rsp)
    00000515: 	addb	0x324(%rsp), %cl
    0000051c: 	movaps	%xmm4, 0x3e8(%rsp)
    00000524: 	addl	%esi, %ecx
    00000526: 	addb	0x3ef(%rsp), %r11b
    0000052e: 	movaps	%xmm4, 0x3d8(%rsp)
    00000536: 	addb	0x3e3(%rsp), %r11b
    0000053e: 	movaps	%xmm4, 0x3c8(%rsp)
    00000546: 	addb	0x3d7(%rsp), %r11b
    0000054e: 	movaps	%xmm3, 0x3b8(%rsp)
    00000556: 	addb	0x3bb(%rsp), %r11b
    0000055e: 	movaps	%xmm3, 0x3a8(%rsp)
    00000566: 	addb	0x3af(%rsp), %r11b
    0000056e: 	movaps	%xmm3, 0x398(%rsp)
    00000576: 	addb	0x3a3(%rsp), %r11b
    0000057e: 	movaps	%xmm3, 0x388(%rsp)
    00000586: 	addb	0x397(%rsp), %r11b
    0000058e: 	movaps	%xmm2, 0x378(%rsp)
    00000596: 	addb	0x37b(%rsp), %r11b
    0000059e: 	movaps	%xmm2, 0x368(%rsp)
    000005a6: 	addb	0x36f(%rsp), %r11b
    000005ae: 	movaps	%xmm2, 0x358(%rsp)
    000005b6: 	addb	0x363(%rsp), %r11b
    000005be: 	movaps	%xmm2, 0x348(%rsp)
    000005c6: 	addb	0x357(%rsp), %r11b
    000005ce: 	movaps	%xmm4, 0x308(%rsp)
    000005d6: 	addb	0x30c(%rsp), %cl
    000005dd: 	movaps	%xmm4, 0x2f8(%rsp)
    000005e5: 	addb	0x300(%rsp), %cl
    000005ec: 	movaps	%xmm4, 0x2e8(%rsp)
    000005f4: 	addb	0x2f4(%rsp), %cl
    000005fb: 	addl	%edx, %ecx
    000005fd: 	movaps	%xmm3, 0x2d8(%rsp)
    00000605: 	addb	0x2dc(%rsp), %cl
    0000060c: 	movaps	%xmm3, 0x2c8(%rsp)
    00000614: 	addb	0x2d0(%rsp), %cl
    0000061b: 	movaps	%xmm3, 0x2b8(%rsp)
    00000623: 	addb	0x2c4(%rsp), %cl
    0000062a: 	addl	%eax, %ecx
    0000062c: 	movaps	%xmm2, 0x2a8(%rsp)
    00000634: 	addb	0x2ac(%rsp), %cl
    0000063b: 	movaps	%xmm2, 0x298(%rsp)
    00000643: 	addb	0x2a0(%rsp), %cl
    0000064a: 	movaps	%xmm2, 0x288(%rsp)
    00000652: 	addb	0x294(%rsp), %cl
    00000659: 	movaps	%xmm5, 0x278(%rsp)
    00000661: 	movaps	%xmm5, 0x268(%rsp)
    00000669: 	movzbl	0x26d(%rsp), %edi
    00000671: 	addb	0x279(%rsp), %dil
    00000679: 	movaps	%xmm5, 0x258(%rsp)
    00000681: 	addb	0x261(%rsp), %dil
    00000689: 	movaps	%xmm5, 0x248(%rsp)
    00000691: 	addb	0x255(%rsp), %dil
    00000699: 	movaps	%xmm4, 0x238(%rsp)
    000006a1: 	addb	0x239(%rsp), %dil
    000006a9: 	movaps	%xmm4, 0x228(%rsp)
    000006b1: 	addb	0x22d(%rsp), %dil
    000006b9: 	movaps	%xmm4, 0x218(%rsp)
    000006c1: 	addb	0x221(%rsp), %dil
    000006c9: 	movaps	%xmm4, 0x208(%rsp)
    000006d1: 	addb	0x215(%rsp), %dil
    000006d9: 	movaps	%xmm3, 0x1f8(%rsp)
    000006e1: 	addb	0x1f9(%rsp), %dil
    000006e9: 	movaps	%xmm3, 0x1e8(%rsp)
    000006f1: 	addb	0x1ed(%rsp), %dil
    000006f9: 	movaps	%xmm3, 0x1d8(%rsp)
    00000701: 	addb	0x1e1(%rsp), %dil
    00000709: 	movaps	%xmm3, 0x1c8(%rsp)
    00000711: 	addb	0x1d5(%rsp), %dil
    00000719: 	movaps	%xmm2, 0x1b8(%rsp)
    00000721: 	addb	0x1b9(%rsp), %dil
    00000729: 	movaps	%xmm2, 0x1a8(%rsp)
    00000731: 	addb	0x1ad(%rsp), %dil
    00000739: 	movaps	%xmm2, 0x198(%rsp)
    00000741: 	addb	0x1a1(%rsp), %dil
    00000749: 	movaps	%xmm2, 0x188(%rsp)
    00000751: 	addb	0x195(%rsp), %dil
    00000759: 	movaps	%xmm5, 0x178(%rsp)
    00000761: 	movaps	%xmm5, 0x168(%rsp)
    00000769: 	movzbl	0x16e(%rsp), %esi
    00000771: 	addb	0x17a(%rsp), %sil
    00000779: 	movaps	%xmm5, 0x158(%rsp)
    00000781: 	addb	0x162(%rsp), %sil
    00000789: 	movaps	%xmm5, 0x148(%rsp)
    00000791: 	addb	0x156(%rsp), %sil
    00000799: 	movaps	%xmm4, 0x138(%rsp)
    000007a1: 	addb	0x13a(%rsp), %sil
    000007a9: 	movaps	%xmm4, 0x128(%rsp)
    000007b1: 	addb	0x12e(%rsp), %sil
    000007b9: 	movaps	%xmm4, 0x118(%rsp)
    000007c1: 	addb	0x122(%rsp), %sil
    000007c9: 	movaps	%xmm4, 0x108(%rsp)
    000007d1: 	addb	0x116(%rsp), %sil
    000007d9: 	andq	$-0x10, %r15
    000007dd: 	movaps	%xmm3, 0xf8(%rsp)
    000007e5: 	leaq	(,%r15,4), %rdx
    000007ed: 	addb	0xfa(%rsp), %sil
    000007f5: 	movaps	%xmm3, 0xe8(%rsp)
    000007fd: 	addb	0xee(%rsp), %sil
    00000805: 	movaps	%xmm3, 0xd8(%rsp)
    0000080d: 	addb	0xe2(%rsp), %sil
    00000815: 	movaps	%xmm3, 0xc8(%rsp)
    0000081d: 	addb	0xd6(%rsp), %sil
    00000825: 	movaps	%xmm2, 0xb8(%rsp)
    0000082d: 	addb	0xba(%rsp), %sil
    00000835: 	movaps	%xmm2, 0xa8(%rsp)
    0000083d: 	addb	0xae(%rsp), %sil
    00000845: 	movaps	%xmm2, 0x98(%rsp)
    0000084d: 	addb	0xa2(%rsp), %sil
    00000855: 	movaps	%xmm2, 0x88(%rsp)
    0000085d: 	addb	0x96(%rsp), %sil
    00000865: 	movaps	%xmm5, 0x78(%rsp)
    0000086a: 	movaps	%xmm5, 0x68(%rsp)
    0000086f: 	movzbl	0x6f(%rsp), %eax
    00000874: 	addb	0x7b(%rsp), %al
    00000878: 	movaps	%xmm5, 0x58(%rsp)
    0000087d: 	addb	0x63(%rsp), %al
    00000881: 	movaps	%xmm5, 0x48(%rsp)
    00000886: 	addb	0x57(%rsp), %al
    0000088a: 	movaps	%xmm4, 0x38(%rsp)
    0000088f: 	addb	0x3b(%rsp), %al
    00000893: 	movaps	%xmm4, 0x28(%rsp)
    00000898: 	addb	0x2f(%rsp), %al
    0000089c: 	movaps	%xmm4, 0x18(%rsp)
    000008a1: 	addb	0x23(%rsp), %al
    000008a5: 	movaps	%xmm4, 0x8(%rsp)
    000008aa: 	addb	0x17(%rsp), %al
    000008ae: 	movaps	%xmm3, -0x8(%rsp)
    000008b3: 	addb	-0x5(%rsp), %al
    000008b7: 	movaps	%xmm3, -0x18(%rsp)
    000008bc: 	addb	-0x11(%rsp), %al
    000008c0: 	movaps	%xmm3, -0x28(%rsp)
    000008c5: 	addb	-0x1d(%rsp), %al
    000008c9: 	movaps	%xmm3, -0x38(%rsp)
    000008ce: 	addb	-0x29(%rsp), %al
    000008d2: 	movaps	%xmm2, -0x48(%rsp)
    000008d7: 	addb	-0x45(%rsp), %al
    000008db: 	movaps	%xmm2, -0x58(%rsp)
    000008e0: 	addb	-0x51(%rsp), %al
    000008e4: 	movaps	%xmm2, -0x68(%rsp)
    000008e9: 	addb	-0x5d(%rsp), %al
    000008ed: 	movaps	%xmm2, -0x78(%rsp)
    000008f2: 	addb	-0x69(%rsp), %al
    000008f6: 	cmpq	%r15, %r13
    000008f9: 	je	.Ltmp112 # Offset: 2297
    000008ff: 	nop # Size: 1
.Ltmp113:
    00000900: 	movzbl	(%r8,%rdx), %eax
    00000905: 	mulb	(%r9,%rdx)
    00000909: 	leal	(%rax,%r10), %ecx
    0000090d: 	movzbl	0x1(%r8,%rdx), %eax
    00000913: 	mulb	0x1(%r9,%rdx)
    00000918: 	movl	%ecx, %r10d
    0000091b: 	leal	(%rax,%r14), %edi
    0000091f: 	movzbl	0x2(%r8,%rdx), %eax
    00000925: 	mulb	0x2(%r9,%rdx)
    0000092a: 	movl	%edi, %r14d
    0000092d: 	leal	(%rax,%rbx), %esi
    00000930: 	movzbl	0x3(%r9,%rdx), %eax
    00000936: 	mulb	0x3(%r8,%rdx)
    0000093b: 	addq	$0x4, %rdx
    0000093f: 	movl	%esi, %ebx
    00000941: 	addl	%r11d, %eax
    00000944: 	movl	%eax, %r11d
    00000947: 	cmpq	%rdx, %r12
    0000094a: 	ja	.Ltmp113 # Offset: 2378
.Ltmp118:
    0000094c: 	addl	%edi, %esi
    0000094e: 	addl	%eax, %esi
    00000950: 	cmpq	%rbp, %rdx
    00000953: 	jae	.Ltmp114 # Offset: 2387
    00000959: 	leaq	0x1(%rdx), %rdi
    0000095d: 	movq	%rbp, %rax
    00000960: 	movl	$0x1, %ebx
    00000965: 	subq	%rdx, %rax
    00000968: 	cmpq	%rdi, %rbp
    0000096b: 	cmovaeq	%rax, %rbx
    0000096f: 	subq	$0x1, %rax
    00000973: 	cmpq	$0xe, %rax
    00000977: 	jbe	.Ltmp115 # Offset: 2423
    0000097d: 	cmpq	%rdi, %rbp
    00000980: 	jb	.Ltmp115 # Offset: 2432
    00000986: 	movq	%rbx, %rcx
    00000989: 	leaq	(%r9,%rdx), %r11
    0000098d: 	leaq	(%r8,%rdx), %rdi
    00000991: 	xorl	%eax, %eax
    00000993: 	movdqa	DATAat0x32530(%rip), %xmm1
    0000099b: 	andq	$-0x10, %rcx
    0000099f: 	pxor	%xmm4, %xmm4
    000009a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp116:
    000009a8: 	movdqu	(%rdi,%rax), %xmm3
    000009ad: 	movdqu	(%r11,%rax), %xmm0
    000009b3: 	addq	$0x10, %rax
    000009b7: 	movdqa	%xmm0, %xmm2
    000009bb: 	movdqa	%xmm3, %xmm5
    000009bf: 	punpcklbw	%xmm0, %xmm2
    000009c3: 	punpcklbw	%xmm3, %xmm5
    000009c7: 	punpckhbw	%xmm0, %xmm0
    000009cb: 	punpckhbw	%xmm3, %xmm3
    000009cf: 	pmullw	%xmm5, %xmm2
    000009d3: 	pmullw	%xmm3, %xmm0
    000009d7: 	pand	%xmm1, %xmm2
    000009db: 	pand	%xmm1, %xmm0
    000009df: 	packuswb	%xmm0, %xmm2
    000009e3: 	paddb	%xmm2, %xmm4
    000009e7: 	cmpq	%rcx, %rax
    000009ea: 	jne	.Ltmp116 # Offset: 2538
    000009ec: 	movdqa	%xmm4, %xmm0
    000009f0: 	psrldq	$0x8, %xmm0
    000009f5: 	paddb	%xmm0, %xmm4
    000009f9: 	pxor	%xmm0, %xmm0
    000009fd: 	psadbw	%xmm0, %xmm4
    00000a01: 	movd	%xmm4, %eax
    00000a05: 	addl	%eax, %r10d
    00000a08: 	movq	%rbx, %rax
    00000a0b: 	andq	$-0x10, %rax
    00000a0f: 	movl	%r10d, %ecx
    00000a12: 	addq	%rax, %rdx
    00000a15: 	cmpq	%rax, %rbx
    00000a18: 	je	.Ltmp114 # Offset: 2584
    00000a1e: 	leaq	0x1(%rdx), %rdi
.Ltmp115:
    00000a22: 	movzbl	(%r8,%rdx), %eax
    00000a27: 	mulb	(%r9,%rdx)
    00000a2b: 	movq	%rdi, %rdx
    00000a2e: 	leal	(%rax,%r10), %ecx
    00000a32: 	cmpq	%rbp, %rdi
    00000a35: 	jae	.Ltmp114 # Offset: 2613
.Ltmp119:
    00000a3b: 	movzbl	(%r9,%rdx), %eax
    00000a40: 	mulb	(%r8,%rdx)
    00000a44: 	addl	%eax, %ecx
    00000a46: 	leaq	0x1(%rdx), %rax
    00000a4a: 	cmpq	%rbp, %rax
    00000a4d: 	jae	.Ltmp114 # Offset: 2637
    00000a53: 	movzbl	0x1(%r9,%rdx), %eax
    00000a59: 	mulb	0x1(%r8,%rdx)
    00000a5e: 	addl	%eax, %ecx
    00000a60: 	leaq	0x2(%rdx), %rax
    00000a64: 	cmpq	%rax, %rbp
    00000a67: 	jbe	.Ltmp114 # Offset: 2663
    00000a6d: 	movzbl	0x2(%r9,%rdx), %eax
    00000a73: 	mulb	0x2(%r8,%rdx)
    00000a78: 	addl	%eax, %ecx
    00000a7a: 	leaq	0x3(%rdx), %rax
    00000a7e: 	cmpq	%rax, %rbp
    00000a81: 	jbe	.Ltmp114 # Offset: 2689
    00000a87: 	movzbl	0x3(%r8,%rdx), %eax
    00000a8d: 	mulb	0x3(%r9,%rdx)
    00000a92: 	addl	%eax, %ecx
    00000a94: 	leaq	0x4(%rdx), %rax
    00000a98: 	cmpq	%rbp, %rax
    00000a9b: 	jae	.Ltmp114 # Offset: 2715
    00000aa1: 	movzbl	0x4(%r8,%rdx), %eax
    00000aa7: 	mulb	0x4(%r9,%rdx)
    00000aac: 	addl	%eax, %ecx
    00000aae: 	leaq	0x5(%rdx), %rax
    00000ab2: 	cmpq	%rax, %rbp
    00000ab5: 	jbe	.Ltmp114 # Offset: 2741
    00000abb: 	movzbl	0x5(%r9,%rdx), %eax
    00000ac1: 	mulb	0x5(%r8,%rdx)
    00000ac6: 	addl	%eax, %ecx
    00000ac8: 	leaq	0x6(%rdx), %rax
    00000acc: 	cmpq	%rax, %rbp
    00000acf: 	jbe	.Ltmp114 # Offset: 2767
    00000ad5: 	movzbl	0x6(%r9,%rdx), %eax
    00000adb: 	mulb	0x6(%r8,%rdx)
    00000ae0: 	addl	%eax, %ecx
    00000ae2: 	leaq	0x7(%rdx), %rax
    00000ae6: 	cmpq	%rax, %rbp
    00000ae9: 	jbe	.Ltmp114 # Offset: 2793
    00000aef: 	movzbl	0x7(%r9,%rdx), %eax
    00000af5: 	mulb	0x7(%r8,%rdx)
    00000afa: 	addl	%eax, %ecx
    00000afc: 	leaq	0x8(%rdx), %rax
    00000b00: 	cmpq	%rax, %rbp
    00000b03: 	jbe	.Ltmp114 # Offset: 2819
    00000b05: 	movzbl	0x8(%r9,%rdx), %eax
    00000b0b: 	mulb	0x8(%r8,%rdx)
    00000b10: 	addl	%eax, %ecx
    00000b12: 	leaq	0x9(%rdx), %rax
    00000b16: 	cmpq	%rax, %rbp
    00000b19: 	jbe	.Ltmp114 # Offset: 2841
    00000b1b: 	movzbl	0x9(%r9,%rdx), %eax
    00000b21: 	mulb	0x9(%r8,%rdx)
    00000b26: 	addl	%eax, %ecx
    00000b28: 	leaq	0xa(%rdx), %rax
    00000b2c: 	cmpq	%rax, %rbp
    00000b2f: 	jbe	.Ltmp114 # Offset: 2863
    00000b31: 	movzbl	0xa(%r9,%rdx), %eax
    00000b37: 	mulb	0xa(%r8,%rdx)
    00000b3c: 	addl	%eax, %ecx
    00000b3e: 	leaq	0xb(%rdx), %rax
    00000b42: 	cmpq	%rax, %rbp
    00000b45: 	jbe	.Ltmp114 # Offset: 2885
    00000b47: 	movzbl	0xb(%r9,%rdx), %eax
    00000b4d: 	mulb	0xb(%r8,%rdx)
    00000b52: 	addl	%eax, %ecx
    00000b54: 	leaq	0xc(%rdx), %rax
    00000b58: 	cmpq	%rax, %rbp
    00000b5b: 	jbe	.Ltmp114 # Offset: 2907
    00000b5d: 	movzbl	0xc(%r9,%rdx), %eax
    00000b63: 	mulb	0xc(%r8,%rdx)
    00000b68: 	addl	%eax, %ecx
    00000b6a: 	leaq	0xd(%rdx), %rax
    00000b6e: 	cmpq	%rax, %rbp
    00000b71: 	jbe	.Ltmp114 # Offset: 2929
    00000b73: 	movzbl	0xd(%r8,%rdx), %eax
    00000b79: 	mulb	0xd(%r9,%rdx)
    00000b7e: 	addl	%eax, %ecx
.Ltmp114:
    00000b80: 	addq	$0x710, %rsp
    00000b87: 	leal	(%rsi,%rcx), %eax
    00000b8a: 	popq	%rbx
    00000b8b: 	popq	%rbp
    00000b8c: 	popq	%r12
    00000b8e: 	popq	%r13
    00000b90: 	popq	%r14
    00000b92: 	popq	%r15
    00000b94: 	retq # Offset: 2964
    00000b95: 	nopl	(%rax) # Size: 3
.Ltmp110:
    00000b98: 	xorl	%r13d, %r13d
    00000b9b: 	xorl	%ebx, %ebx
    00000b9d: 	xorl	%r11d, %r11d
    00000ba0: 	xorl	%r10d, %r10d
    00000ba3: 	xorl	%edx, %edx
    00000ba5: 	nopl	(%rax) # Size: 3
.Ltmp117:
    00000ba8: 	movzbl	(%r8,%rdx), %eax
    00000bad: 	mulb	(%r9,%rdx)
    00000bb1: 	leal	(%rax,%r10), %ecx
    00000bb5: 	movzbl	0x1(%r8,%rdx), %eax
    00000bbb: 	mulb	0x1(%r9,%rdx)
    00000bc0: 	movl	%ecx, %r10d
    00000bc3: 	leal	(%rax,%r11), %edi
    00000bc7: 	movzbl	0x2(%r8,%rdx), %eax
    00000bcd: 	mulb	0x2(%r9,%rdx)
    00000bd2: 	movl	%edi, %r11d
    00000bd5: 	leal	(%rax,%rbx), %esi
    00000bd8: 	movzbl	0x3(%r8,%rdx), %eax
    00000bde: 	mulb	0x3(%r9,%rdx)
    00000be3: 	addq	$0x4, %rdx
    00000be7: 	movl	%esi, %ebx
    00000be9: 	addl	%r13d, %eax
    00000bec: 	movl	%eax, %r13d
    00000bef: 	cmpq	%rdx, %r12
    00000bf2: 	ja	.Ltmp117 # Offset: 3058
    00000bf4: 	jmp	.Ltmp118 # Offset: 3060
    00000bf9: 	nopl	(%rax) # Size: 7
.Ltmp109:
    00000c00: 	movzbl	(%rdi), %eax
    00000c03: 	mulb	(%rsi)
    00000c05: 	movl	$0x1, %edx
    00000c0a: 	xorl	%esi, %esi
    00000c0c: 	movl	%eax, %ecx
    00000c0e: 	jmp	.Ltmp119 # Offset: 3086
.Ltmp112:
    00000c13: 	movq	%xmm6, %rdx
    00000c18: 	jmp	.Ltmp118 # Offset: 3096
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKaaET0_T_S3_m"

Binary Function "_Z14inner_product9IPKaaET0_T_S3_m" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x5f20
  Size        : 0xb65
  MaxSize     : 0xb70
  Offset      : 0x5f20
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rax
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	subq	$0x50, %rsp
    0000001e: 	subq	$0x7, %rax
    00000022: 	movq	%rax, 0x40(%rsp)
    00000027: 	je	.Ltmp120 # Offset: 39
    0000002d: 	leaq	-0x8(%rdx), %r8
    00000031: 	cmpq	$-0x8, %rax
    00000035: 	ja	.Ltmp121 # Offset: 53
    0000003b: 	cmpq	$0x77, %r8
    0000003f: 	jbe	.Ltmp121 # Offset: 63
    00000045: 	pxor	%xmm2, %xmm2
    00000049: 	shrq	$0x3, %r8
    0000004d: 	movq	%rdi, %rdx
    00000050: 	movq	%r14, %rax
    00000053: 	addq	$0x1, %r8
    00000057: 	movaps	%xmm2, -0x48(%rsp)
    0000005c: 	xorl	%ecx, %ecx
    0000005e: 	movdqa	DATAat0x32530(%rip), %xmm10
    00000067: 	movaps	%xmm2, -0x68(%rsp)
    0000006c: 	movq	%r8, %rsi
    0000006f: 	movaps	%xmm2, -0x78(%rsp)
    00000074: 	shrq	$0x4, %rsi
    00000078: 	movaps	%xmm2, -0x58(%rsp)
    0000007d: 	movdqa	DATAat0x325a0(%rip), %xmm2
    00000085: 	movaps	%xmm2, -0x38(%rsp)
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp122:
    00000090: 	movdqu	(%rdx), %xmm8
    00000095: 	movdqu	0x10(%rdx), %xmm5
    0000009a: 	movdqa	%xmm10, %xmm9
    0000009f: 	movdqa	%xmm10, %xmm15
    000000a4: 	movdqa	-0x38(%rsp), %xmm2
    000000aa: 	movdqu	0x10(%rdx), %xmm7
    000000af: 	addq	$0x1, %rcx
    000000b3: 	subq	$-0x80, %rdx
    000000b7: 	pand	%xmm10, %xmm5
    000000bc: 	pand	%xmm10, %xmm8
    000000c1: 	movdqu	-0x60(%rdx), %xmm4
    000000c6: 	movdqa	DATAat0x325b0(%rip), %xmm6
    000000ce: 	packuswb	%xmm5, %xmm8
    000000d3: 	movdqu	-0x80(%rdx), %xmm5
    000000d8: 	psrlw	$0x8, %xmm7
    000000dd: 	movdqu	-0x30(%rdx), %xmm1
    000000e2: 	paddq	%xmm2, %xmm6
    000000e6: 	psrlw	$0x8, %xmm4
    000000eb: 	movdqu	-0x30(%rdx), %xmm0
    000000f0: 	movdqu	-0x20(%rdx), %xmm3
    000000f5: 	psrlw	$0x8, %xmm5
    000000fa: 	movaps	%xmm6, -0x38(%rsp)
    000000ff: 	movdqu	-0x50(%rdx), %xmm6
    00000104: 	pand	%xmm10, %xmm1
    00000109: 	packuswb	%xmm7, %xmm5
    0000010d: 	movdqu	-0x60(%rdx), %xmm7
    00000112: 	movaps	%xmm2, -0x28(%rsp)
    00000117: 	psrlw	$0x8, %xmm0
    0000011c: 	pand	%xmm10, %xmm6
    00000121: 	pand	%xmm10, %xmm3
    00000126: 	movdqu	(%rax), %xmm14
    0000012b: 	movdqu	0x20(%rax), %xmm13
    00000131: 	pand	%xmm10, %xmm7
    00000136: 	subq	$-0x80, %rax
    0000013a: 	packuswb	%xmm6, %xmm7
    0000013e: 	movdqu	-0x50(%rdx), %xmm6
    00000143: 	pand	%xmm10, %xmm14
    00000148: 	pand	%xmm10, %xmm13
    0000014d: 	pand	%xmm7, %xmm9
    00000152: 	psrlw	$0x8, %xmm7
    00000157: 	psrlw	$0x8, %xmm6
    0000015c: 	packuswb	%xmm6, %xmm4
    00000160: 	movdqu	-0x40(%rdx), %xmm6
    00000165: 	pand	%xmm10, %xmm6
    0000016a: 	packuswb	%xmm1, %xmm6
    0000016e: 	movdqu	-0x40(%rdx), %xmm1
    00000173: 	psrlw	$0x8, %xmm1
    00000178: 	movdqa	%xmm1, %xmm2
    0000017c: 	movdqu	-0x10(%rdx), %xmm1
    00000181: 	packuswb	%xmm0, %xmm2
    00000185: 	movdqa	%xmm3, %xmm0
    00000189: 	movdqu	-0x20(%rdx), %xmm3
    0000018e: 	pand	%xmm10, %xmm1
    00000193: 	packuswb	%xmm1, %xmm0
    00000197: 	movdqu	-0x10(%rdx), %xmm1
    0000019c: 	psrlw	$0x8, %xmm3
    000001a1: 	psrlw	$0x8, %xmm1
    000001a6: 	packuswb	%xmm1, %xmm3
    000001aa: 	movdqa	%xmm10, %xmm1
    000001af: 	pand	%xmm8, %xmm1
    000001b4: 	psrlw	$0x8, %xmm8
    000001ba: 	packuswb	%xmm9, %xmm1
    000001bf: 	movdqa	%xmm8, %xmm9
    000001c4: 	movdqa	%xmm10, %xmm8
    000001c9: 	packuswb	%xmm7, %xmm9
    000001ce: 	movdqa	%xmm10, %xmm7
    000001d3: 	pand	%xmm2, %xmm8
    000001d8: 	pand	%xmm6, %xmm7
    000001dc: 	movaps	%xmm9, -0x18(%rsp)
    000001e2: 	psrlw	$0x8, %xmm6
    000001e7: 	movdqa	%xmm7, %xmm9
    000001ec: 	psrlw	$0x8, %xmm2
    000001f1: 	movdqa	%xmm10, %xmm7
    000001f6: 	pand	%xmm0, %xmm7
    000001fa: 	psrlw	$0x8, %xmm0
    000001ff: 	packuswb	%xmm7, %xmm9
    00000204: 	movdqa	%xmm6, %xmm7
    00000208: 	movdqa	%xmm10, %xmm6
    0000020d: 	packuswb	%xmm0, %xmm7
    00000211: 	movdqa	%xmm10, %xmm0
    00000216: 	pand	%xmm4, %xmm6
    0000021a: 	pand	%xmm5, %xmm0
    0000021e: 	psrlw	$0x8, %xmm5
    00000223: 	movaps	%xmm7, -0x8(%rsp)
    00000228: 	psrlw	$0x8, %xmm4
    0000022d: 	movdqa	%xmm5, %xmm12
    00000232: 	movdqu	-0x80(%rax), %xmm5
    00000237: 	packuswb	%xmm6, %xmm0
    0000023b: 	packuswb	%xmm4, %xmm12
    00000240: 	movdqa	%xmm10, %xmm4
    00000245: 	pand	%xmm3, %xmm4
    00000249: 	psrlw	$0x8, %xmm3
    0000024e: 	movaps	%xmm12, 0x8(%rsp)
    00000254: 	packuswb	%xmm3, %xmm2
    00000258: 	movdqu	-0x70(%rax), %xmm3
    0000025d: 	psrlw	$0x8, %xmm5
    00000262: 	packuswb	%xmm4, %xmm8
    00000267: 	movdqa	%xmm5, %xmm7
    0000026b: 	movdqu	-0x60(%rax), %xmm5
    00000270: 	pand	%xmm10, %xmm3
    00000275: 	packuswb	%xmm3, %xmm14
    0000027a: 	movdqu	-0x70(%rax), %xmm3
    0000027f: 	psrlw	$0x8, %xmm5
    00000284: 	movdqa	%xmm5, %xmm6
    00000288: 	movdqu	-0x40(%rax), %xmm5
    0000028d: 	psrlw	$0x8, %xmm3
    00000292: 	packuswb	%xmm3, %xmm7
    00000296: 	movdqu	-0x50(%rax), %xmm3
    0000029b: 	pand	%xmm10, %xmm5
    000002a0: 	movdqa	%xmm5, %xmm12
    000002a5: 	pand	%xmm10, %xmm3
    000002aa: 	packuswb	%xmm3, %xmm13
    000002af: 	movdqu	-0x50(%rax), %xmm3
    000002b4: 	pand	%xmm13, %xmm15
    000002b9: 	psrlw	$0x8, %xmm13
    000002bf: 	psrlw	$0x8, %xmm3
    000002c4: 	packuswb	%xmm3, %xmm6
    000002c8: 	movdqu	-0x30(%rax), %xmm3
    000002cd: 	movdqu	-0x40(%rax), %xmm5
    000002d2: 	movdqu	-0x20(%rax), %xmm11
    000002d8: 	movdqu	-0x20(%rax), %xmm4
    000002dd: 	pand	%xmm10, %xmm3
    000002e2: 	psrlw	$0x8, %xmm5
    000002e7: 	packuswb	%xmm3, %xmm12
    000002ec: 	movdqu	-0x30(%rax), %xmm3
    000002f1: 	pand	%xmm10, %xmm11
    000002f6: 	psrlw	$0x8, %xmm4
    000002fb: 	psrlw	$0x8, %xmm3
    00000300: 	packuswb	%xmm3, %xmm5
    00000304: 	movdqu	-0x10(%rax), %xmm3
    00000309: 	pand	%xmm10, %xmm3
    0000030e: 	packuswb	%xmm3, %xmm11
    00000313: 	movdqu	-0x10(%rax), %xmm3
    00000318: 	psrlw	$0x8, %xmm3
    0000031d: 	packuswb	%xmm3, %xmm4
    00000321: 	movdqa	%xmm10, %xmm3
    00000326: 	pand	%xmm14, %xmm3
    0000032b: 	psrlw	$0x8, %xmm14
    00000331: 	packuswb	%xmm15, %xmm3
    00000336: 	movdqa	%xmm14, %xmm15
    0000033b: 	movdqa	%xmm10, %xmm14
    00000340: 	packuswb	%xmm13, %xmm15
    00000345: 	movdqa	%xmm10, %xmm13
    0000034a: 	pand	%xmm11, %xmm14
    0000034f: 	pand	%xmm12, %xmm13
    00000354: 	psrlw	$0x8, %xmm12
    0000035a: 	movaps	%xmm15, 0x18(%rsp)
    00000360: 	packuswb	%xmm14, %xmm13
    00000365: 	psrlw	$0x8, %xmm11
    0000036b: 	movdqa	%xmm12, %xmm14
    00000370: 	packuswb	%xmm11, %xmm14
    00000375: 	movdqa	%xmm10, %xmm11
    0000037a: 	movdqa	%xmm10, %xmm12
    0000037f: 	pand	%xmm7, %xmm11
    00000384: 	psrlw	$0x8, %xmm7
    00000389: 	pand	%xmm6, %xmm12
    0000038e: 	movaps	%xmm14, 0x28(%rsp)
    00000394: 	psrlw	$0x8, %xmm6
    00000399: 	movdqa	%xmm7, %xmm15
    0000039e: 	movdqa	%xmm10, %xmm7
    000003a3: 	packuswb	%xmm6, %xmm15
    000003a8: 	movdqa	%xmm10, %xmm6
    000003ad: 	pand	%xmm4, %xmm7
    000003b1: 	pand	%xmm5, %xmm6
    000003b5: 	psrlw	$0x8, %xmm5
    000003ba: 	packuswb	%xmm12, %xmm11
    000003bf: 	psrlw	$0x8, %xmm4
    000003c4: 	movdqa	%xmm5, %xmm14
    000003c9: 	movdqa	%xmm10, %xmm5
    000003ce: 	packuswb	%xmm4, %xmm14
    000003d3: 	movdqa	%xmm10, %xmm4
    000003d8: 	pand	%xmm9, %xmm5
    000003dd: 	pand	%xmm1, %xmm4
    000003e1: 	psrlw	$0x8, %xmm9
    000003e7: 	packuswb	%xmm7, %xmm6
    000003eb: 	packuswb	%xmm5, %xmm4
    000003ef: 	movdqa	%xmm10, %xmm7
    000003f4: 	movdqa	%xmm10, %xmm5
    000003f9: 	pand	%xmm13, %xmm5
    000003fe: 	pand	%xmm3, %xmm7
    00000402: 	movdqa	%xmm4, %xmm12
    00000407: 	packuswb	%xmm5, %xmm7
    0000040b: 	psrlw	$0x8, %xmm13
    00000411: 	punpcklbw	%xmm4, %xmm12
    00000416: 	movdqa	%xmm7, %xmm5
    0000041a: 	psrlw	$0x8, %xmm1
    0000041f: 	punpckhbw	%xmm4, %xmm4
    00000423: 	punpcklbw	%xmm7, %xmm5
    00000427: 	punpckhbw	%xmm7, %xmm7
    0000042b: 	packuswb	%xmm9, %xmm1
    00000430: 	pmullw	%xmm7, %xmm4
    00000434: 	pmullw	%xmm12, %xmm5
    00000439: 	movdqa	-0x8(%rsp), %xmm7
    0000043f: 	psrlw	$0x8, %xmm3
    00000444: 	packuswb	%xmm13, %xmm3
    00000449: 	movdqa	%xmm1, %xmm13
    0000044e: 	punpcklbw	%xmm1, %xmm13
    00000453: 	punpckhbw	%xmm1, %xmm1
    00000457: 	pand	%xmm10, %xmm4
    0000045c: 	pand	%xmm10, %xmm5
    00000461: 	packuswb	%xmm4, %xmm5
    00000465: 	movdqa	%xmm3, %xmm4
    00000469: 	punpcklbw	%xmm3, %xmm4
    0000046d: 	punpckhbw	%xmm3, %xmm3
    00000471: 	pmullw	%xmm3, %xmm1
    00000475: 	pmullw	%xmm13, %xmm4
    0000047a: 	movdqa	%xmm10, %xmm3
    0000047f: 	pand	%xmm8, %xmm3
    00000484: 	psrlw	$0x8, %xmm8
    0000048a: 	pand	%xmm10, %xmm1
    0000048f: 	pand	%xmm10, %xmm4
    00000494: 	packuswb	%xmm1, %xmm4
    00000498: 	movdqa	%xmm10, %xmm1
    0000049d: 	pand	%xmm0, %xmm1
    000004a1: 	psrlw	$0x8, %xmm0
    000004a6: 	paddb	%xmm4, %xmm5
    000004aa: 	packuswb	%xmm3, %xmm1
    000004ae: 	movdqa	%xmm10, %xmm4
    000004b3: 	movdqa	%xmm10, %xmm3
    000004b8: 	pand	%xmm6, %xmm3
    000004bc: 	paddb	-0x58(%rsp), %xmm5
    000004c2: 	pand	%xmm11, %xmm4
    000004c7: 	packuswb	%xmm3, %xmm4
    000004cb: 	psrlw	$0x8, %xmm6
    000004d0: 	packuswb	%xmm8, %xmm0
    000004d5: 	movdqa	0x28(%rsp), %xmm8
    000004dc: 	movdqa	%xmm4, %xmm3
    000004e0: 	movaps	%xmm5, -0x58(%rsp)
    000004e5: 	movdqa	%xmm1, %xmm5
    000004e9: 	punpcklbw	%xmm1, %xmm5
    000004ed: 	punpcklbw	%xmm4, %xmm3
    000004f1: 	punpckhbw	%xmm1, %xmm1
    000004f5: 	pmullw	%xmm5, %xmm3
    000004f9: 	punpckhbw	%xmm4, %xmm4
    000004fd: 	movdqa	0x18(%rsp), %xmm5
    00000503: 	pmullw	%xmm4, %xmm1
    00000507: 	psrlw	$0x8, %xmm11
    0000050d: 	movdqa	%xmm0, %xmm4
    00000511: 	packuswb	%xmm6, %xmm11
    00000516: 	punpcklbw	%xmm0, %xmm4
    0000051a: 	punpckhbw	%xmm0, %xmm0
    0000051e: 	movdqa	-0x18(%rsp), %xmm6
    00000524: 	pand	%xmm10, %xmm3
    00000529: 	pand	%xmm10, %xmm1
    0000052e: 	packuswb	%xmm1, %xmm3
    00000532: 	movdqa	%xmm11, %xmm1
    00000537: 	punpcklbw	%xmm11, %xmm1
    0000053c: 	punpckhbw	%xmm11, %xmm11
    00000541: 	pmullw	%xmm4, %xmm1
    00000545: 	pmullw	%xmm11, %xmm0
    0000054a: 	movdqa	%xmm6, %xmm4
    0000054e: 	pand	%xmm10, %xmm4
    00000553: 	pand	%xmm10, %xmm0
    00000558: 	pand	%xmm10, %xmm1
    0000055d: 	packuswb	%xmm0, %xmm1
    00000561: 	movdqa	%xmm4, %xmm0
    00000565: 	paddb	%xmm1, %xmm3
    00000569: 	movdqa	%xmm7, %xmm1
    0000056d: 	paddb	-0x78(%rsp), %xmm3
    00000573: 	pand	%xmm10, %xmm1
    00000578: 	packuswb	%xmm1, %xmm0
    0000057c: 	movaps	%xmm3, -0x78(%rsp)
    00000581: 	movdqa	%xmm8, %xmm1
    00000586: 	movdqa	%xmm5, %xmm3
    0000058a: 	pand	%xmm10, %xmm1
    0000058f: 	pand	%xmm10, %xmm3
    00000594: 	movdqa	%xmm0, %xmm4
    00000598: 	packuswb	%xmm1, %xmm3
    0000059c: 	punpcklbw	%xmm0, %xmm4
    000005a0: 	punpckhbw	%xmm0, %xmm0
    000005a4: 	movdqa	%xmm3, %xmm1
    000005a8: 	punpcklbw	%xmm3, %xmm1
    000005ac: 	punpckhbw	%xmm3, %xmm3
    000005b0: 	pmullw	%xmm4, %xmm1
    000005b4: 	pmullw	%xmm3, %xmm0
    000005b8: 	movdqa	%xmm6, %xmm4
    000005bc: 	movdqa	0x8(%rsp), %xmm6
    000005c2: 	psrlw	$0x8, %xmm4
    000005c7: 	movdqa	%xmm7, %xmm3
    000005cb: 	movdqa	%xmm10, %xmm7
    000005d0: 	psrlw	$0x8, %xmm3
    000005d5: 	pand	%xmm2, %xmm7
    000005d9: 	pand	%xmm10, %xmm0
    000005de: 	pand	%xmm10, %xmm1
    000005e3: 	packuswb	%xmm0, %xmm1
    000005e7: 	movdqa	%xmm4, %xmm0
    000005eb: 	movdqa	%xmm8, %xmm4
    000005f0: 	packuswb	%xmm3, %xmm0
    000005f4: 	psrlw	$0x8, %xmm4
    000005f9: 	movdqa	%xmm5, %xmm3
    000005fd: 	psrlw	$0x8, %xmm3
    00000602: 	movdqa	%xmm0, %xmm5
    00000606: 	packuswb	%xmm4, %xmm3
    0000060a: 	punpcklbw	%xmm0, %xmm5
    0000060e: 	punpckhbw	%xmm0, %xmm0
    00000612: 	movdqa	%xmm3, %xmm4
    00000616: 	punpcklbw	%xmm3, %xmm4
    0000061a: 	punpckhbw	%xmm3, %xmm3
    0000061e: 	pmullw	%xmm0, %xmm3
    00000622: 	pmullw	%xmm5, %xmm4
    00000626: 	pand	%xmm10, %xmm3
    0000062b: 	pand	%xmm10, %xmm4
    00000630: 	packuswb	%xmm3, %xmm4
    00000634: 	movdqa	%xmm10, %xmm3
    00000639: 	paddb	%xmm4, %xmm1
    0000063d: 	paddb	-0x68(%rsp), %xmm1
    00000643: 	pand	%xmm15, %xmm3
    00000648: 	psrlw	$0x8, %xmm15
    0000064e: 	movaps	%xmm1, -0x68(%rsp)
    00000653: 	movdqa	%xmm6, %xmm1
    00000657: 	pand	%xmm10, %xmm1
    0000065c: 	packuswb	%xmm7, %xmm1
    00000660: 	movdqa	%xmm10, %xmm7
    00000665: 	pand	%xmm14, %xmm7
    0000066a: 	psrlw	$0x8, %xmm14
    00000670: 	movdqa	%xmm1, %xmm4
    00000674: 	packuswb	%xmm7, %xmm3
    00000678: 	punpcklbw	%xmm1, %xmm4
    0000067c: 	punpckhbw	%xmm1, %xmm1
    00000680: 	movdqa	%xmm3, %xmm7
    00000684: 	packuswb	%xmm14, %xmm15
    00000689: 	punpcklbw	%xmm3, %xmm7
    0000068d: 	punpckhbw	%xmm3, %xmm3
    00000691: 	movdqa	%xmm7, %xmm0
    00000695: 	pmullw	%xmm1, %xmm3
    00000699: 	movdqa	%xmm2, %xmm1
    0000069d: 	pmullw	%xmm4, %xmm0
    000006a1: 	psrlw	$0x8, %xmm1
    000006a6: 	pand	%xmm10, %xmm3
    000006ab: 	pand	%xmm10, %xmm0
    000006b0: 	packuswb	%xmm3, %xmm0
    000006b4: 	movdqa	%xmm6, %xmm3
    000006b8: 	psrlw	$0x8, %xmm3
    000006bd: 	movdqa	%xmm3, %xmm6
    000006c1: 	packuswb	%xmm1, %xmm6
    000006c5: 	movdqa	%xmm15, %xmm1
    000006ca: 	movdqa	%xmm6, %xmm2
    000006ce: 	movdqa	%xmm6, %xmm3
    000006d2: 	punpcklbw	%xmm15, %xmm1
    000006d7: 	punpcklbw	%xmm6, %xmm3
    000006db: 	punpckhbw	%xmm6, %xmm2
    000006df: 	punpckhbw	%xmm15, %xmm15
    000006e4: 	movdqa	-0x48(%rsp), %xmm6
    000006ea: 	pmullw	%xmm3, %xmm1
    000006ee: 	pmullw	%xmm2, %xmm15
    000006f3: 	pand	%xmm10, %xmm1
    000006f8: 	pand	%xmm10, %xmm15
    000006fd: 	packuswb	%xmm15, %xmm1
    00000702: 	paddb	%xmm1, %xmm0
    00000706: 	paddb	%xmm0, %xmm6
    0000070a: 	movdqa	-0x28(%rsp), %xmm0
    00000710: 	paddq	DATAat0x325c0(%rip), %xmm0
    00000718: 	movaps	%xmm6, -0x48(%rsp)
    0000071d: 	cmpq	%rcx, %rsi
    00000720: 	ja	.Ltmp122 # Offset: 1824
    00000726: 	movhlps	%xmm0, %xmm1
    00000729: 	movdqa	%xmm6, %xmm0
    0000072d: 	pxor	%xmm2, %xmm2
    00000731: 	movq	%r8, %rax
    00000734: 	psrldq	$0x8, %xmm0
    00000739: 	andq	$-0x10, %rax
    0000073d: 	paddb	%xmm6, %xmm0
    00000741: 	movdqa	-0x68(%rsp), %xmm6
    00000747: 	leaq	(,%rax,8), %r10
    0000074f: 	psadbw	%xmm2, %xmm0
    00000753: 	movd	%xmm0, %esi
    00000757: 	movdqa	%xmm6, %xmm0
    0000075b: 	psrldq	$0x8, %xmm0
    00000760: 	movl	%esi, %ebp
    00000762: 	paddb	%xmm6, %xmm0
    00000766: 	movdqa	-0x78(%rsp), %xmm6
    0000076c: 	psadbw	%xmm2, %xmm0
    00000770: 	movd	%xmm0, %edi
    00000774: 	movdqa	%xmm6, %xmm0
    00000778: 	psrldq	$0x8, %xmm0
    0000077d: 	movl	%edi, %r12d
    00000780: 	paddb	%xmm6, %xmm0
    00000784: 	movdqa	-0x58(%rsp), %xmm6
    0000078a: 	psadbw	%xmm2, %xmm0
    0000078e: 	movd	%xmm0, %ecx
    00000792: 	movdqa	%xmm6, %xmm0
    00000796: 	psrldq	$0x8, %xmm0
    0000079b: 	movl	%ecx, %r15d
    0000079e: 	paddb	%xmm6, %xmm0
    000007a2: 	psadbw	%xmm2, %xmm0
    000007a6: 	movd	%xmm0, %edx
    000007aa: 	movl	%edx, %r11d
    000007ad: 	cmpq	%r8, %rax
    000007b0: 	je	.Ltmp123 # Offset: 1968
    000007b6: 	movq	%r13, -0x78(%rsp)
    000007bb: 	leaq	(%r13,%r10), %r9
    000007c0: 	movq	0x40(%rsp), %r13
    000007c5: 	leaq	(%r14,%r10), %r8
    000007c9: 	nopl	(%rax) # Size: 7
.Ltmp124:
    000007d0: 	movzbl	0x4(%r8), %eax
    000007d5: 	mulb	0x4(%r9)
    000007d9: 	addq	$0x8, %r10
    000007dd: 	addq	$0x8, %r9
    000007e1: 	addq	$0x8, %r8
    000007e5: 	movl	%eax, %edx
    000007e7: 	movzbl	-0x8(%r8), %eax
    000007ec: 	mulb	-0x8(%r9)
    000007f0: 	addl	%eax, %edx
    000007f2: 	movzbl	-0x3(%r8), %eax
    000007f7: 	mulb	-0x3(%r9)
    000007fb: 	addl	%r11d, %edx
    000007fe: 	movl	%edx, %r11d
    00000801: 	movl	%eax, %ecx
    00000803: 	movzbl	-0x7(%r8), %eax
    00000808: 	mulb	-0x7(%r9)
    0000080c: 	addl	%eax, %ecx
    0000080e: 	movzbl	-0x2(%r8), %eax
    00000813: 	mulb	-0x2(%r9)
    00000817: 	addl	%r15d, %ecx
    0000081a: 	movl	%ecx, %r15d
    0000081d: 	movl	%eax, %edi
    0000081f: 	movzbl	-0x6(%r8), %eax
    00000824: 	mulb	-0x6(%r9)
    00000828: 	addl	%eax, %edi
    0000082a: 	movzbl	-0x1(%r8), %eax
    0000082f: 	mulb	-0x1(%r9)
    00000833: 	addl	%r12d, %edi
    00000836: 	movl	%edi, %r12d
    00000839: 	movl	%eax, %esi
    0000083b: 	movzbl	-0x5(%r8), %eax
    00000840: 	mulb	-0x5(%r9)
    00000844: 	addl	%eax, %esi
    00000846: 	addl	%ebp, %esi
    00000848: 	movl	%esi, %ebp
    0000084a: 	cmpq	%r10, %r13
    0000084d: 	ja	.Ltmp124 # Offset: 2125
.Ltmp129:
    0000084f: 	movq	-0x78(%rsp), %r13
.Ltmp131:
    00000854: 	addl	%edi, %ecx
    00000856: 	addl	%esi, %ecx
    00000858: 	cmpq	%rbx, %r10
    0000085b: 	jae	.Ltmp125 # Offset: 2139
    00000861: 	leaq	0x1(%r10), %rsi
    00000865: 	movq	%rbx, %rax
    00000868: 	movl	$0x1, %r8d
    0000086e: 	subq	%r10, %rax
    00000871: 	cmpq	%rsi, %rbx
    00000874: 	cmovaeq	%rax, %r8
    00000878: 	subq	$0x1, %rax
    0000087c: 	cmpq	$0xe, %rax
    00000880: 	jbe	.Ltmp126 # Offset: 2176
    00000886: 	cmpq	%rsi, %rbx
    00000889: 	jb	.Ltmp126 # Offset: 2185
    0000088f: 	movq	%r8, %rdx
    00000892: 	leaq	(%r13,%r10), %rdi
    00000897: 	leaq	(%r14,%r10), %rsi
    0000089b: 	xorl	%eax, %eax
    0000089d: 	movdqa	DATAat0x32530(%rip), %xmm10
    000008a6: 	andq	$-0x10, %rdx
    000008aa: 	pxor	%xmm3, %xmm3
    000008ae: 	nop # Size: 2
.Ltmp127:
    000008b0: 	movdqu	(%rsi,%rax), %xmm2
    000008b5: 	movdqu	(%rdi,%rax), %xmm0
    000008ba: 	addq	$0x10, %rax
    000008be: 	movdqa	%xmm0, %xmm1
    000008c2: 	movdqa	%xmm2, %xmm4
    000008c6: 	punpcklbw	%xmm0, %xmm1
    000008ca: 	punpcklbw	%xmm2, %xmm4
    000008ce: 	punpckhbw	%xmm0, %xmm0
    000008d2: 	punpckhbw	%xmm2, %xmm2
    000008d6: 	pmullw	%xmm4, %xmm1
    000008da: 	pmullw	%xmm2, %xmm0
    000008de: 	pand	%xmm10, %xmm1
    000008e3: 	pand	%xmm10, %xmm0
    000008e8: 	packuswb	%xmm0, %xmm1
    000008ec: 	paddb	%xmm1, %xmm3
    000008f0: 	cmpq	%rdx, %rax
    000008f3: 	jne	.Ltmp127 # Offset: 2291
    000008f5: 	movdqa	%xmm3, %xmm0
    000008f9: 	psrldq	$0x8, %xmm0
    000008fe: 	paddb	%xmm0, %xmm3
    00000902: 	pxor	%xmm0, %xmm0
    00000906: 	psadbw	%xmm0, %xmm3
    0000090a: 	movd	%xmm3, %eax
    0000090e: 	addl	%eax, %r11d
    00000911: 	movq	%r8, %rax
    00000914: 	andq	$-0x10, %rax
    00000918: 	movl	%r11d, %edx
    0000091b: 	addq	%rax, %r10
    0000091e: 	cmpq	%rax, %r8
    00000921: 	je	.Ltmp125 # Offset: 2337
    00000927: 	leaq	0x1(%r10), %rsi
.Ltmp126:
    0000092b: 	movzbl	(%r14,%r10), %eax
    00000930: 	mulb	(%r13,%r10)
    00000935: 	leal	(%rax,%r11), %edx
    00000939: 	cmpq	%rbx, %rsi
    0000093c: 	jae	.Ltmp125 # Offset: 2364
.Ltmp130:
    00000942: 	movzbl	(%r13,%rsi), %eax
    00000948: 	mulb	(%r14,%rsi)
    0000094c: 	addl	%eax, %edx
    0000094e: 	leaq	0x1(%rsi), %rax
    00000952: 	cmpq	%rbx, %rax
    00000955: 	jae	.Ltmp125 # Offset: 2389
    0000095b: 	movzbl	0x1(%r13,%rsi), %eax
    00000961: 	mulb	0x1(%r14,%rsi)
    00000966: 	addl	%eax, %edx
    00000968: 	leaq	0x2(%rsi), %rax
    0000096c: 	cmpq	%rbx, %rax
    0000096f: 	jae	.Ltmp125 # Offset: 2415
    00000975: 	movzbl	0x2(%r13,%rsi), %eax
    0000097b: 	mulb	0x2(%r14,%rsi)
    00000980: 	addl	%eax, %edx
    00000982: 	leaq	0x3(%rsi), %rax
    00000986: 	cmpq	%rbx, %rax
    00000989: 	jae	.Ltmp125 # Offset: 2441
    0000098f: 	movzbl	0x3(%r13,%rsi), %eax
    00000995: 	mulb	0x3(%r14,%rsi)
    0000099a: 	addl	%eax, %edx
    0000099c: 	leaq	0x4(%rsi), %rax
    000009a0: 	cmpq	%rbx, %rax
    000009a3: 	jae	.Ltmp125 # Offset: 2467
    000009a9: 	movzbl	0x4(%r13,%rsi), %eax
    000009af: 	mulb	0x4(%r14,%rsi)
    000009b4: 	addl	%eax, %edx
    000009b6: 	leaq	0x5(%rsi), %rax
    000009ba: 	cmpq	%rax, %rbx
    000009bd: 	jbe	.Ltmp125 # Offset: 2493
    000009c3: 	movzbl	0x5(%r13,%rsi), %eax
    000009c9: 	mulb	0x5(%r14,%rsi)
    000009ce: 	addl	%eax, %edx
    000009d0: 	leaq	0x6(%rsi), %rax
    000009d4: 	cmpq	%rax, %rbx
    000009d7: 	jbe	.Ltmp125 # Offset: 2519
    000009dd: 	movzbl	0x6(%r13,%rsi), %eax
    000009e3: 	mulb	0x6(%r14,%rsi)
    000009e8: 	addl	%eax, %edx
    000009ea: 	leaq	0x7(%rsi), %rax
    000009ee: 	cmpq	%rax, %rbx
    000009f1: 	jbe	.Ltmp125 # Offset: 2545
    000009f7: 	movzbl	0x7(%r13,%rsi), %eax
    000009fd: 	mulb	0x7(%r14,%rsi)
    00000a02: 	addl	%eax, %edx
    00000a04: 	leaq	0x8(%rsi), %rax
    00000a08: 	cmpq	%rax, %rbx
    00000a0b: 	jbe	.Ltmp125 # Offset: 2571
    00000a0d: 	movzbl	0x8(%r13,%rsi), %eax
    00000a13: 	mulb	0x8(%r14,%rsi)
    00000a18: 	addl	%eax, %edx
    00000a1a: 	leaq	0x9(%rsi), %rax
    00000a1e: 	cmpq	%rax, %rbx
    00000a21: 	jbe	.Ltmp125 # Offset: 2593
    00000a23: 	movzbl	0x9(%r13,%rsi), %eax
    00000a29: 	mulb	0x9(%r14,%rsi)
    00000a2e: 	addl	%eax, %edx
    00000a30: 	leaq	0xa(%rsi), %rax
    00000a34: 	cmpq	%rax, %rbx
    00000a37: 	jbe	.Ltmp125 # Offset: 2615
    00000a39: 	movzbl	0xa(%r13,%rsi), %eax
    00000a3f: 	mulb	0xa(%r14,%rsi)
    00000a44: 	addl	%eax, %edx
    00000a46: 	leaq	0xb(%rsi), %rax
    00000a4a: 	cmpq	%rax, %rbx
    00000a4d: 	jbe	.Ltmp125 # Offset: 2637
    00000a4f: 	movzbl	0xb(%r13,%rsi), %eax
    00000a55: 	mulb	0xb(%r14,%rsi)
    00000a5a: 	addl	%eax, %edx
    00000a5c: 	leaq	0xc(%rsi), %rax
    00000a60: 	cmpq	%rax, %rbx
    00000a63: 	jbe	.Ltmp125 # Offset: 2659
    00000a65: 	movzbl	0xc(%r13,%rsi), %eax
    00000a6b: 	mulb	0xc(%r14,%rsi)
    00000a70: 	addl	%eax, %edx
    00000a72: 	leaq	0xd(%rsi), %rax
    00000a76: 	cmpq	%rax, %rbx
    00000a79: 	jbe	.Ltmp125 # Offset: 2681
    00000a7b: 	movzbl	0xd(%r14,%rsi), %eax
    00000a81: 	mulb	0xd(%r13,%rsi)
    00000a86: 	addl	%eax, %edx
.Ltmp125:
    00000a88: 	addq	$0x50, %rsp
    00000a8c: 	leal	(%rcx,%rdx), %eax
    00000a8f: 	popq	%rbx
    00000a90: 	popq	%rbp
    00000a91: 	popq	%r12
    00000a93: 	popq	%r13
    00000a95: 	popq	%r14
    00000a97: 	popq	%r15
    00000a99: 	retq # Offset: 2713
    00000a9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp121:
    00000aa0: 	movq	%r13, -0x78(%rsp)
    00000aa5: 	movq	%r13, %r9
    00000aa8: 	movq	0x40(%rsp), %r13
    00000aad: 	movq	%r14, %r8
    00000ab0: 	xorl	%r12d, %r12d
    00000ab3: 	xorl	%ebp, %ebp
    00000ab5: 	xorl	%r15d, %r15d
    00000ab8: 	xorl	%r11d, %r11d
    00000abb: 	xorl	%r10d, %r10d
    00000abe: 	nop # Size: 2
.Ltmp128:
    00000ac0: 	movzbl	0x4(%r8), %eax
    00000ac5: 	mulb	0x4(%r9)
    00000ac9: 	addq	$0x8, %r10
    00000acd: 	addq	$0x8, %r9
    00000ad1: 	addq	$0x8, %r8
    00000ad5: 	movl	%eax, %edx
    00000ad7: 	movzbl	-0x8(%r8), %eax
    00000adc: 	mulb	-0x8(%r9)
    00000ae0: 	addl	%eax, %edx
    00000ae2: 	movzbl	-0x3(%r8), %eax
    00000ae7: 	mulb	-0x3(%r9)
    00000aeb: 	addl	%r11d, %edx
    00000aee: 	movl	%edx, %r11d
    00000af1: 	movl	%eax, %ecx
    00000af3: 	movzbl	-0x7(%r8), %eax
    00000af8: 	mulb	-0x7(%r9)
    00000afc: 	addl	%eax, %ecx
    00000afe: 	movzbl	-0x2(%r8), %eax
    00000b03: 	mulb	-0x2(%r9)
    00000b07: 	addl	%r15d, %ecx
    00000b0a: 	movl	%ecx, %r15d
    00000b0d: 	movl	%eax, %edi
    00000b0f: 	movzbl	-0x6(%r8), %eax
    00000b14: 	mulb	-0x6(%r9)
    00000b18: 	addl	%eax, %edi
    00000b1a: 	movzbl	-0x1(%r8), %eax
    00000b1f: 	mulb	-0x1(%r9)
    00000b23: 	addl	%ebp, %edi
    00000b25: 	movl	%edi, %ebp
    00000b27: 	movl	%eax, %esi
    00000b29: 	movzbl	-0x5(%r8), %eax
    00000b2e: 	mulb	-0x5(%r9)
    00000b32: 	addl	%eax, %esi
    00000b34: 	addl	%r12d, %esi
    00000b37: 	movl	%esi, %r12d
    00000b3a: 	cmpq	%r10, %r13
    00000b3d: 	ja	.Ltmp128 # Offset: 2877
    00000b3f: 	jmp	.Ltmp129 # Offset: 2879
    00000b44: 	nopl	(%rax) # Size: 4
.Ltmp120:
    00000b48: 	movzbl	(%rdi), %eax
    00000b4b: 	mulb	(%rsi)
    00000b4d: 	xorl	%ecx, %ecx
    00000b4f: 	movl	$0x1, %esi
    00000b54: 	movl	%eax, %edx
    00000b56: 	jmp	.Ltmp130 # Offset: 2902
.Ltmp123:
    00000b5b: 	movq	%xmm1, %r10
    00000b60: 	jmp	.Ltmp131 # Offset: 2912
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKaaET0_T_S3_m"

Binary Function "_Z15inner_product10IPKaaET0_T_S3_m" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x6a90
  Size        : 0x1453
  MaxSize     : 0x1460
  Offset      : 0x6a90
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKaaET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rax
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	movq	%rsi, %r14
    00000011: 	pushq	%r13
    00000013: 	movq	%rdi, %r13
    00000016: 	pushq	%r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x130, %rsp
    00000021: 	subq	$0xf, %rax
    00000025: 	je	.Ltmp132 # Offset: 37
    0000002b: 	movq	%rax, %rsi
    0000002e: 	leaq	-0x10(%rdx), %r11
    00000032: 	cmpq	$-0x10, %rax
    00000036: 	ja	.Ltmp133 # Offset: 54
    0000003c: 	cmpq	$0xff, %r11
    00000043: 	jbe	.Ltmp133 # Offset: 67
    00000049: 	pxor	%xmm7, %xmm7
    0000004d: 	shrq	$0x8, %r11
    00000051: 	movq	%rdi, %rdx
    00000054: 	movq	%r14, %rax
    00000057: 	movdqa	DATAat0x32530(%rip), %xmm15
    00000060: 	xorl	%ecx, %ecx
    00000062: 	movaps	%xmm7, -0x28(%rsp)
    00000067: 	movaps	%xmm7, -0x18(%rsp)
    0000006c: 	movaps	%xmm7, -0x8(%rsp)
    00000071: 	movaps	%xmm7, 0x8(%rsp)
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp134:
    00000080: 	movdqu	(%rdx), %xmm12
    00000085: 	movdqu	0x10(%rdx), %xmm0
    0000008a: 	addq	$0x1, %rcx
    0000008e: 	addq	$0x100, %rdx
    00000095: 	movdqu	-0x100(%rdx), %xmm5
    0000009d: 	movdqu	-0x80(%rdx), %xmm8
    000000a3: 	addq	$0x100, %rax
    000000a9: 	pand	%xmm15, %xmm0
    000000ae: 	pand	%xmm15, %xmm12
    000000b3: 	movdqu	-0xe0(%rdx), %xmm11
    000000bc: 	movdqu	-0xe0(%rdx), %xmm4
    000000c4: 	packuswb	%xmm0, %xmm12
    000000c9: 	movdqu	-0xf0(%rdx), %xmm0
    000000d1: 	psrlw	$0x8, %xmm5
    000000d6: 	movdqu	-0xc0(%rdx), %xmm10
    000000df: 	pand	%xmm15, %xmm11
    000000e4: 	psrlw	$0x8, %xmm4
    000000e9: 	movdqu	-0xc0(%rdx), %xmm3
    000000f1: 	movdqu	-0xa0(%rdx), %xmm9
    000000fa: 	psrlw	$0x8, %xmm0
    000000ff: 	pand	%xmm15, %xmm10
    00000104: 	pand	%xmm15, %xmm8
    00000109: 	movdqu	-0xa0(%rdx), %xmm2
    00000111: 	packuswb	%xmm0, %xmm5
    00000115: 	psrlw	$0x8, %xmm3
    0000011a: 	pand	%xmm15, %xmm9
    0000011f: 	movdqu	-0xd0(%rdx), %xmm0
    00000127: 	psrlw	$0x8, %xmm2
    0000012c: 	movdqu	-0x80(%rdx), %xmm1
    00000131: 	movdqu	-0x60(%rdx), %xmm7
    00000136: 	pand	%xmm15, %xmm0
    0000013b: 	movdqu	-0x50(%rdx), %xmm6
    00000140: 	movdqu	-0x40(%rdx), %xmm13
    00000146: 	packuswb	%xmm0, %xmm11
    0000014b: 	psrlw	$0x8, %xmm1
    00000150: 	pand	%xmm15, %xmm7
    00000155: 	movdqu	-0xd0(%rdx), %xmm0
    0000015d: 	psrlw	$0x8, %xmm6
    00000162: 	pand	%xmm15, %xmm13
    00000167: 	psrlw	$0x8, %xmm0
    0000016c: 	packuswb	%xmm0, %xmm4
    00000170: 	movdqu	-0xb0(%rdx), %xmm0
    00000178: 	pand	%xmm15, %xmm0
    0000017d: 	packuswb	%xmm0, %xmm10
    00000182: 	movdqu	-0xb0(%rdx), %xmm0
    0000018a: 	psrlw	$0x8, %xmm0
    0000018f: 	packuswb	%xmm0, %xmm3
    00000193: 	movdqu	-0x90(%rdx), %xmm0
    0000019b: 	pand	%xmm15, %xmm0
    000001a0: 	packuswb	%xmm0, %xmm9
    000001a5: 	movdqu	-0x90(%rdx), %xmm0
    000001ad: 	psrlw	$0x8, %xmm0
    000001b2: 	packuswb	%xmm0, %xmm2
    000001b6: 	movdqu	-0x70(%rdx), %xmm0
    000001bb: 	pand	%xmm15, %xmm0
    000001c0: 	packuswb	%xmm0, %xmm8
    000001c5: 	movdqu	-0x70(%rdx), %xmm0
    000001ca: 	psrlw	$0x8, %xmm0
    000001cf: 	packuswb	%xmm0, %xmm1
    000001d3: 	movdqu	-0x50(%rdx), %xmm0
    000001d8: 	pand	%xmm15, %xmm0
    000001dd: 	packuswb	%xmm0, %xmm7
    000001e1: 	movdqu	-0x60(%rdx), %xmm0
    000001e6: 	psrlw	$0x8, %xmm0
    000001eb: 	movdqa	%xmm0, %xmm14
    000001f0: 	packuswb	%xmm6, %xmm14
    000001f5: 	movdqu	-0x30(%rdx), %xmm6
    000001fa: 	movaps	%xmm14, -0x48(%rsp)
    00000200: 	movdqa	%xmm13, %xmm14
    00000205: 	movdqu	-0x40(%rdx), %xmm13
    0000020b: 	pand	%xmm15, %xmm6
    00000210: 	packuswb	%xmm6, %xmm14
    00000215: 	movdqu	-0x30(%rdx), %xmm6
    0000021a: 	psrlw	$0x8, %xmm13
    00000220: 	movaps	%xmm14, -0x38(%rsp)
    00000226: 	movdqa	%xmm13, %xmm14
    0000022b: 	psrlw	$0x8, %xmm6
    00000230: 	packuswb	%xmm6, %xmm14
    00000235: 	movdqu	-0x20(%rdx), %xmm6
    0000023a: 	movaps	%xmm14, 0x18(%rsp)
    00000240: 	movdqu	-0x10(%rdx), %xmm13
    00000246: 	movdqu	-0x20(%rdx), %xmm0
    0000024b: 	pand	%xmm15, %xmm6
    00000250: 	pand	%xmm15, %xmm13
    00000255: 	psrlw	$0x8, %xmm0
    0000025a: 	packuswb	%xmm13, %xmm6
    0000025f: 	movdqu	-0x10(%rdx), %xmm13
    00000265: 	movdqa	%xmm0, %xmm14
    0000026a: 	movdqa	%xmm15, %xmm0
    0000026f: 	pand	%xmm11, %xmm0
    00000274: 	psrlw	$0x8, %xmm11
    0000027a: 	psrlw	$0x8, %xmm13
    00000280: 	movaps	%xmm0, -0x78(%rsp)
    00000285: 	packuswb	%xmm13, %xmm14
    0000028a: 	movdqa	%xmm15, %xmm13
    0000028f: 	pand	%xmm12, %xmm13
    00000294: 	psrlw	$0x8, %xmm12
    0000029a: 	movdqa	%xmm13, %xmm0
    0000029f: 	movdqa	%xmm12, %xmm13
    000002a4: 	packuswb	-0x78(%rsp), %xmm0
    000002aa: 	movdqa	%xmm15, %xmm12
    000002af: 	packuswb	%xmm11, %xmm13
    000002b4: 	movdqa	%xmm15, %xmm11
    000002b9: 	pand	%xmm10, %xmm12
    000002be: 	movaps	%xmm0, -0x78(%rsp)
    000002c3: 	psrlw	$0x8, %xmm10
    000002c9: 	pand	%xmm9, %xmm11
    000002ce: 	movdqa	%xmm12, %xmm0
    000002d3: 	movdqa	%xmm10, %xmm12
    000002d8: 	movdqa	%xmm15, %xmm10
    000002dd: 	movaps	%xmm13, 0x28(%rsp)
    000002e3: 	pand	%xmm8, %xmm10
    000002e8: 	psrlw	$0x8, %xmm9
    000002ee: 	packuswb	%xmm11, %xmm0
    000002f3: 	packuswb	%xmm9, %xmm12
    000002f8: 	movdqa	%xmm10, %xmm11
    000002fd: 	movdqa	%xmm15, %xmm9
    00000302: 	movdqa	-0x38(%rsp), %xmm10
    00000309: 	pand	%xmm7, %xmm9
    0000030e: 	psrlw	$0x8, %xmm8
    00000314: 	movaps	%xmm12, 0x38(%rsp)
    0000031a: 	packuswb	%xmm9, %xmm11
    0000031f: 	psrlw	$0x8, %xmm7
    00000324: 	movdqa	%xmm8, %xmm9
    00000329: 	movaps	%xmm0, -0x68(%rsp)
    0000032e: 	movdqa	%xmm10, %xmm8
    00000333: 	packuswb	%xmm7, %xmm9
    00000338: 	movdqa	%xmm15, %xmm7
    0000033d: 	movaps	%xmm11, -0x58(%rsp)
    00000343: 	pand	%xmm15, %xmm8
    00000348: 	psrlw	$0x8, %xmm10
    0000034e: 	pand	%xmm6, %xmm7
    00000352: 	movaps	%xmm9, 0x48(%rsp)
    00000358: 	movdqa	%xmm8, %xmm12
    0000035d: 	psrlw	$0x8, %xmm6
    00000362: 	movdqa	%xmm10, %xmm8
    00000367: 	packuswb	%xmm6, %xmm8
    0000036c: 	movdqa	%xmm15, %xmm10
    00000371: 	movdqa	%xmm15, %xmm6
    00000376: 	pand	%xmm4, %xmm6
    0000037a: 	pand	%xmm5, %xmm10
    0000037f: 	packuswb	%xmm7, %xmm12
    00000384: 	movdqa	0x18(%rsp), %xmm7
    0000038a: 	psrlw	$0x8, %xmm5
    0000038f: 	psrlw	$0x8, %xmm4
    00000394: 	packuswb	%xmm6, %xmm10
    00000399: 	movaps	%xmm12, 0x58(%rsp)
    0000039f: 	movdqa	%xmm5, %xmm6
    000003a3: 	movdqa	%xmm15, %xmm5
    000003a8: 	movaps	%xmm8, 0x68(%rsp)
    000003ae: 	packuswb	%xmm4, %xmm6
    000003b2: 	pand	%xmm3, %xmm5
    000003b6: 	movdqa	%xmm15, %xmm4
    000003bb: 	movaps	%xmm10, 0x78(%rsp)
    000003c1: 	psrlw	$0x8, %xmm3
    000003c6: 	pand	%xmm2, %xmm4
    000003ca: 	movdqa	%xmm5, %xmm13
    000003cf: 	movaps	%xmm6, 0x88(%rsp)
    000003d7: 	psrlw	$0x8, %xmm2
    000003dc: 	movdqa	%xmm3, %xmm5
    000003e0: 	movdqa	%xmm15, %xmm3
    000003e5: 	packuswb	%xmm2, %xmm5
    000003e9: 	pand	%xmm1, %xmm3
    000003ed: 	movdqa	%xmm15, %xmm2
    000003f2: 	movaps	%xmm5, 0xa8(%rsp)
    000003fa: 	movdqa	-0x48(%rsp), %xmm5
    00000400: 	packuswb	%xmm4, %xmm13
    00000405: 	psrlw	$0x8, %xmm1
    0000040a: 	movaps	%xmm13, 0x98(%rsp)
    00000413: 	movdqa	%xmm3, %xmm4
    00000417: 	movdqa	%xmm1, %xmm3
    0000041b: 	movdqa	%xmm7, %xmm1
    0000041f: 	pand	%xmm5, %xmm2
    00000423: 	movdqa	%xmm5, %xmm0
    00000427: 	pand	%xmm15, %xmm1
    0000042c: 	packuswb	%xmm2, %xmm4
    00000430: 	psrlw	$0x8, %xmm0
    00000435: 	movdqa	%xmm15, %xmm2
    0000043a: 	pand	%xmm14, %xmm2
    0000043f: 	packuswb	%xmm0, %xmm3
    00000443: 	movaps	%xmm4, 0xb8(%rsp)
    0000044b: 	movdqa	%xmm2, %xmm0
    0000044f: 	movdqa	%xmm1, %xmm2
    00000453: 	movdqa	%xmm7, %xmm1
    00000457: 	movaps	%xmm3, 0xc8(%rsp)
    0000045f: 	psrlw	$0x8, %xmm1
    00000464: 	packuswb	%xmm0, %xmm2
    00000468: 	movdqu	-0xf0(%rax), %xmm3
    00000470: 	movdqa	%xmm1, %xmm0
    00000474: 	movdqa	%xmm14, %xmm1
    00000479: 	movaps	%xmm2, 0x18(%rsp)
    0000047e: 	psrlw	$0x8, %xmm1
    00000483: 	psrlw	$0x8, %xmm3
    00000488: 	movdqa	%xmm0, %xmm4
    0000048c: 	packuswb	%xmm1, %xmm4
    00000490: 	movdqu	-0x100(%rax), %xmm1
    00000498: 	movaps	%xmm4, 0xd8(%rsp)
    000004a0: 	pand	%xmm15, %xmm1
    000004a5: 	movdqa	%xmm1, %xmm13
    000004aa: 	movdqu	-0xf0(%rax), %xmm1
    000004b2: 	pand	%xmm15, %xmm1
    000004b7: 	packuswb	%xmm1, %xmm13
    000004bc: 	movdqu	-0x100(%rax), %xmm1
    000004c4: 	psrlw	$0x8, %xmm1
    000004c9: 	movdqa	%xmm1, %xmm11
    000004ce: 	movdqu	-0xe0(%rax), %xmm1
    000004d6: 	packuswb	%xmm3, %xmm11
    000004db: 	movaps	%xmm11, 0xe8(%rsp)
    000004e4: 	pand	%xmm15, %xmm1
    000004e9: 	movdqa	%xmm1, %xmm12
    000004ee: 	movdqu	-0xd0(%rax), %xmm1
    000004f6: 	pand	%xmm15, %xmm1
    000004fb: 	packuswb	%xmm1, %xmm12
    00000500: 	movdqu	-0xe0(%rax), %xmm1
    00000508: 	movdqu	-0xd0(%rax), %xmm3
    00000510: 	psrlw	$0x8, %xmm1
    00000515: 	psrlw	$0x8, %xmm3
    0000051a: 	movdqa	%xmm3, %xmm0
    0000051e: 	movdqa	%xmm1, %xmm3
    00000522: 	movdqu	-0xc0(%rax), %xmm1
    0000052a: 	packuswb	%xmm0, %xmm3
    0000052e: 	movdqu	-0xb0(%rax), %xmm0
    00000536: 	pand	%xmm15, %xmm1
    0000053b: 	movaps	%xmm3, 0xf8(%rsp)
    00000543: 	movdqu	-0x30(%rax), %xmm3
    00000548: 	movdqa	%xmm1, %xmm11
    0000054d: 	movdqu	-0xb0(%rax), %xmm1
    00000555: 	psrlw	$0x8, %xmm0
    0000055a: 	psrlw	$0x8, %xmm3
    0000055f: 	pand	%xmm15, %xmm1
    00000564: 	packuswb	%xmm1, %xmm11
    00000569: 	movdqu	-0xc0(%rax), %xmm1
    00000571: 	psrlw	$0x8, %xmm1
    00000576: 	movdqa	%xmm1, %xmm2
    0000057a: 	movdqu	-0xa0(%rax), %xmm1
    00000582: 	packuswb	%xmm0, %xmm2
    00000586: 	pand	%xmm15, %xmm1
    0000058b: 	movdqa	%xmm2, %xmm14
    00000590: 	movdqu	-0x40(%rax), %xmm2
    00000595: 	movdqa	%xmm1, %xmm10
    0000059a: 	movdqu	-0x90(%rax), %xmm1
    000005a2: 	pand	%xmm15, %xmm2
    000005a7: 	pand	%xmm15, %xmm1
    000005ac: 	packuswb	%xmm1, %xmm10
    000005b1: 	movdqu	-0xa0(%rax), %xmm1
    000005b9: 	psrlw	$0x8, %xmm1
    000005be: 	movdqa	%xmm1, %xmm5
    000005c2: 	movdqu	-0x90(%rax), %xmm1
    000005ca: 	psrlw	$0x8, %xmm1
    000005cf: 	packuswb	%xmm1, %xmm5
    000005d3: 	movdqu	-0x80(%rax), %xmm1
    000005d8: 	pand	%xmm15, %xmm1
    000005dd: 	movdqa	%xmm1, %xmm9
    000005e2: 	movdqu	-0x70(%rax), %xmm1
    000005e7: 	pand	%xmm15, %xmm1
    000005ec: 	packuswb	%xmm1, %xmm9
    000005f1: 	movdqu	-0x80(%rax), %xmm1
    000005f6: 	psrlw	$0x8, %xmm1
    000005fb: 	movdqa	%xmm1, %xmm0
    000005ff: 	movdqu	-0x70(%rax), %xmm1
    00000604: 	psrlw	$0x8, %xmm1
    00000609: 	packuswb	%xmm1, %xmm0
    0000060d: 	movdqu	-0x60(%rax), %xmm1
    00000612: 	pand	%xmm15, %xmm1
    00000617: 	movdqa	%xmm1, %xmm8
    0000061c: 	movdqu	-0x50(%rax), %xmm1
    00000621: 	pand	%xmm15, %xmm1
    00000626: 	packuswb	%xmm1, %xmm8
    0000062b: 	movdqu	-0x60(%rax), %xmm1
    00000630: 	psrlw	$0x8, %xmm1
    00000635: 	movdqa	%xmm1, %xmm4
    00000639: 	movdqu	-0x50(%rax), %xmm1
    0000063e: 	psrlw	$0x8, %xmm1
    00000643: 	packuswb	%xmm1, %xmm4
    00000647: 	movdqu	-0x30(%rax), %xmm1
    0000064c: 	pand	%xmm15, %xmm1
    00000651: 	packuswb	%xmm1, %xmm2
    00000655: 	movdqu	-0x40(%rax), %xmm1
    0000065a: 	psrlw	$0x8, %xmm1
    0000065f: 	movdqa	%xmm1, %xmm7
    00000663: 	movdqu	-0x20(%rax), %xmm1
    00000668: 	packuswb	%xmm3, %xmm7
    0000066c: 	pand	%xmm15, %xmm1
    00000671: 	movaps	%xmm7, 0x108(%rsp)
    00000679: 	movdqa	%xmm1, %xmm7
    0000067d: 	movdqu	-0x10(%rax), %xmm1
    00000682: 	pand	%xmm15, %xmm1
    00000687: 	packuswb	%xmm1, %xmm7
    0000068b: 	movdqu	-0x20(%rax), %xmm1
    00000690: 	psrlw	$0x8, %xmm1
    00000695: 	movdqa	%xmm1, %xmm3
    00000699: 	movdqu	-0x10(%rax), %xmm1
    0000069e: 	psrlw	$0x8, %xmm1
    000006a3: 	packuswb	%xmm1, %xmm3
    000006a7: 	movdqa	%xmm15, %xmm1
    000006ac: 	pand	%xmm13, %xmm1
    000006b1: 	psrlw	$0x8, %xmm13
    000006b7: 	movdqa	%xmm1, %xmm6
    000006bb: 	movdqa	%xmm15, %xmm1
    000006c0: 	pand	%xmm12, %xmm1
    000006c5: 	psrlw	$0x8, %xmm12
    000006cb: 	packuswb	%xmm1, %xmm6
    000006cf: 	movdqa	%xmm13, %xmm1
    000006d4: 	movdqa	0xf8(%rsp), %xmm13
    000006de: 	packuswb	%xmm12, %xmm1
    000006e3: 	movaps	%xmm1, -0x48(%rsp)
    000006e8: 	movdqa	%xmm15, %xmm1
    000006ed: 	pand	%xmm11, %xmm1
    000006f2: 	psrlw	$0x8, %xmm11
    000006f8: 	movdqa	%xmm1, %xmm12
    000006fd: 	movdqa	%xmm15, %xmm1
    00000702: 	pand	%xmm10, %xmm1
    00000707: 	psrlw	$0x8, %xmm10
    0000070d: 	packuswb	%xmm1, %xmm12
    00000712: 	movdqa	%xmm11, %xmm1
    00000717: 	movdqa	0xe8(%rsp), %xmm11
    00000721: 	packuswb	%xmm10, %xmm1
    00000726: 	movdqa	%xmm15, %xmm10
    0000072b: 	movaps	%xmm1, -0x38(%rsp)
    00000730: 	movdqa	%xmm15, %xmm1
    00000735: 	pand	%xmm9, %xmm10
    0000073a: 	pand	%xmm8, %xmm1
    0000073f: 	psrlw	$0x8, %xmm9
    00000745: 	packuswb	%xmm1, %xmm10
    0000074a: 	psrlw	$0x8, %xmm8
    00000750: 	movdqa	%xmm9, %xmm1
    00000755: 	movdqa	%xmm15, %xmm9
    0000075a: 	packuswb	%xmm8, %xmm1
    0000075f: 	pand	%xmm2, %xmm9
    00000764: 	psrlw	$0x8, %xmm2
    00000769: 	movaps	%xmm1, 0x118(%rsp)
    00000771: 	movdqa	0x108(%rsp), %xmm1
    0000077a: 	movdqa	%xmm9, %xmm8
    0000077f: 	movdqa	%xmm15, %xmm9
    00000784: 	pand	%xmm7, %xmm9
    00000789: 	psrlw	$0x8, %xmm7
    0000078e: 	packuswb	%xmm9, %xmm8
    00000793: 	packuswb	%xmm7, %xmm2
    00000797: 	movdqa	%xmm11, %xmm9
    0000079c: 	movdqa	%xmm13, %xmm7
    000007a1: 	psrlw	$0x8, %xmm11
    000007a7: 	pand	%xmm15, %xmm9
    000007ac: 	pand	%xmm15, %xmm7
    000007b1: 	packuswb	%xmm7, %xmm9
    000007b6: 	movdqa	%xmm11, %xmm7
    000007bb: 	movdqa	%xmm13, %xmm11
    000007c0: 	psrlw	$0x8, %xmm11
    000007c6: 	movdqa	%xmm15, %xmm13
    000007cb: 	packuswb	%xmm11, %xmm7
    000007d0: 	movdqa	%xmm15, %xmm11
    000007d5: 	pand	%xmm5, %xmm13
    000007da: 	pand	%xmm14, %xmm11
    000007df: 	psrlw	$0x8, %xmm5
    000007e4: 	packuswb	%xmm13, %xmm11
    000007e9: 	movdqa	%xmm14, %xmm13
    000007ee: 	movdqa	%xmm15, %xmm14
    000007f3: 	psrlw	$0x8, %xmm13
    000007f9: 	pand	%xmm4, %xmm14
    000007fe: 	packuswb	%xmm5, %xmm13
    00000803: 	psrlw	$0x8, %xmm4
    00000808: 	movdqa	%xmm15, %xmm5
    0000080d: 	pand	%xmm0, %xmm5
    00000811: 	psrlw	$0x8, %xmm0
    00000816: 	packuswb	%xmm14, %xmm5
    0000081b: 	packuswb	%xmm4, %xmm0
    0000081f: 	movdqa	%xmm15, %xmm14
    00000824: 	movdqa	%xmm15, %xmm4
    00000829: 	pand	%xmm3, %xmm14
    0000082e: 	pand	%xmm1, %xmm4
    00000832: 	psrlw	$0x8, %xmm3
    00000837: 	psrlw	$0x8, %xmm1
    0000083c: 	packuswb	%xmm14, %xmm4
    00000841: 	movdqa	%xmm15, %xmm14
    00000846: 	packuswb	%xmm3, %xmm1
    0000084a: 	movdqa	%xmm15, %xmm3
    0000084f: 	pand	%xmm12, %xmm14
    00000854: 	pand	%xmm6, %xmm3
    00000858: 	psrlw	$0x8, %xmm6
    0000085d: 	packuswb	%xmm14, %xmm3
    00000862: 	psrlw	$0x8, %xmm12
    00000868: 	movdqa	%xmm6, %xmm14
    0000086d: 	packuswb	%xmm12, %xmm14
    00000872: 	movdqa	%xmm15, %xmm6
    00000877: 	movdqa	%xmm15, %xmm12
    0000087c: 	pand	%xmm8, %xmm12
    00000881: 	psrlw	$0x8, %xmm8
    00000887: 	pand	%xmm10, %xmm6
    0000088c: 	psrlw	$0x8, %xmm10
    00000892: 	packuswb	%xmm12, %xmm6
    00000897: 	movdqa	%xmm10, %xmm12
    0000089c: 	movdqa	%xmm15, %xmm10
    000008a1: 	packuswb	%xmm8, %xmm12
    000008a6: 	movdqa	%xmm15, %xmm8
    000008ab: 	pand	%xmm9, %xmm10
    000008b0: 	pand	%xmm11, %xmm8
    000008b5: 	psrlw	$0x8, %xmm9
    000008bb: 	packuswb	%xmm8, %xmm10
    000008c0: 	psrlw	$0x8, %xmm11
    000008c6: 	movdqa	%xmm9, %xmm8
    000008cb: 	packuswb	%xmm11, %xmm8
    000008d0: 	movdqa	%xmm15, %xmm9
    000008d5: 	movdqa	%xmm15, %xmm11
    000008da: 	pand	%xmm4, %xmm11
    000008df: 	pand	%xmm5, %xmm9
    000008e4: 	movaps	%xmm8, 0xe8(%rsp)
    000008ed: 	psrlw	$0x8, %xmm5
    000008f2: 	psrlw	$0x8, %xmm4
    000008f7: 	packuswb	%xmm11, %xmm9
    000008fc: 	movdqa	%xmm5, %xmm11
    00000901: 	movdqa	-0x48(%rsp), %xmm5
    00000907: 	packuswb	%xmm4, %xmm11
    0000090c: 	movdqa	-0x38(%rsp), %xmm4
    00000912: 	pand	%xmm15, %xmm5
    00000917: 	movdqa	%xmm11, %xmm8
    0000091c: 	pand	%xmm15, %xmm4
    00000921: 	movdqa	%xmm5, %xmm11
    00000926: 	movdqa	-0x38(%rsp), %xmm5
    0000092c: 	packuswb	%xmm4, %xmm11
    00000931: 	movdqa	-0x48(%rsp), %xmm4
    00000937: 	movaps	%xmm11, 0xf8(%rsp)
    00000940: 	psrlw	$0x8, %xmm5
    00000945: 	psrlw	$0x8, %xmm4
    0000094a: 	movdqa	%xmm4, %xmm11
    0000094f: 	movdqa	%xmm15, %xmm4
    00000954: 	packuswb	%xmm5, %xmm11
    00000959: 	pand	%xmm2, %xmm4
    0000095d: 	movaps	%xmm11, -0x48(%rsp)
    00000963: 	psrlw	$0x8, %xmm2
    00000968: 	movdqa	0x118(%rsp), %xmm11
    00000972: 	movdqa	%xmm11, %xmm5
    00000977: 	pand	%xmm15, %xmm5
    0000097c: 	packuswb	%xmm4, %xmm5
    00000980: 	movdqa	%xmm11, %xmm4
    00000985: 	psrlw	$0x8, %xmm4
    0000098a: 	movdqa	%xmm4, %xmm11
    0000098f: 	movdqa	%xmm15, %xmm4
    00000994: 	packuswb	%xmm2, %xmm11
    00000999: 	pand	%xmm7, %xmm4
    0000099d: 	movdqa	%xmm15, %xmm2
    000009a2: 	pand	%xmm13, %xmm2
    000009a7: 	movaps	%xmm11, -0x38(%rsp)
    000009ad: 	movdqa	%xmm4, %xmm11
    000009b2: 	movdqa	%xmm15, %xmm4
    000009b7: 	packuswb	%xmm2, %xmm11
    000009bc: 	psrlw	$0x8, %xmm7
    000009c1: 	movdqa	%xmm13, %xmm2
    000009c6: 	psrlw	$0x8, %xmm2
    000009cb: 	movdqa	%xmm7, %xmm13
    000009d0: 	pand	%xmm0, %xmm4
    000009d4: 	movaps	%xmm11, 0x108(%rsp)
    000009dd: 	packuswb	%xmm2, %xmm13
    000009e2: 	movdqa	%xmm15, %xmm2
    000009e7: 	movdqa	0x58(%rsp), %xmm11
    000009ee: 	pand	%xmm1, %xmm2
    000009f2: 	psrlw	$0x8, %xmm0
    000009f7: 	psrlw	$0x8, %xmm1
    000009fc: 	packuswb	%xmm2, %xmm4
    00000a00: 	movdqa	-0x78(%rsp), %xmm2
    00000a06: 	movdqa	%xmm11, %xmm7
    00000a0b: 	packuswb	%xmm1, %xmm0
    00000a0f: 	movdqa	-0x68(%rsp), %xmm1
    00000a15: 	pand	%xmm15, %xmm7
    00000a1a: 	pand	%xmm15, %xmm2
    00000a1f: 	pand	%xmm15, %xmm1
    00000a24: 	packuswb	%xmm1, %xmm2
    00000a28: 	movdqa	-0x58(%rsp), %xmm1
    00000a2e: 	pand	%xmm15, %xmm2
    00000a33: 	pand	%xmm15, %xmm1
    00000a38: 	packuswb	%xmm7, %xmm1
    00000a3c: 	movdqa	%xmm15, %xmm7
    00000a41: 	pand	%xmm15, %xmm1
    00000a46: 	pand	%xmm6, %xmm7
    00000a4a: 	packuswb	%xmm1, %xmm2
    00000a4e: 	psrlw	$0x8, %xmm6
    00000a53: 	movdqa	%xmm15, %xmm1
    00000a58: 	pand	%xmm3, %xmm1
    00000a5c: 	psrlw	$0x8, %xmm3
    00000a61: 	packuswb	%xmm6, %xmm3
    00000a65: 	packuswb	%xmm7, %xmm1
    00000a69: 	movdqa	%xmm12, %xmm7
    00000a6e: 	paddb	%xmm3, %xmm1
    00000a72: 	psrlw	$0x8, %xmm7
    00000a77: 	movdqa	%xmm1, %xmm3
    00000a7b: 	punpcklbw	%xmm1, %xmm3
    00000a7f: 	punpckhbw	%xmm1, %xmm1
    00000a83: 	movdqa	%xmm3, %xmm6
    00000a87: 	movdqa	%xmm2, %xmm3
    00000a8b: 	punpcklbw	%xmm2, %xmm3
    00000a8f: 	punpckhbw	%xmm2, %xmm2
    00000a93: 	pmullw	%xmm6, %xmm3
    00000a97: 	pmullw	%xmm2, %xmm1
    00000a9b: 	movdqa	-0x68(%rsp), %xmm2
    00000aa1: 	movdqa	%xmm11, %xmm6
    00000aa6: 	psrlw	$0x8, %xmm6
    00000aab: 	movdqa	0x18(%rsp), %xmm11
    00000ab2: 	psrlw	$0x8, %xmm2
    00000ab7: 	pand	%xmm15, %xmm1
    00000abc: 	pand	%xmm15, %xmm3
    00000ac1: 	packuswb	%xmm1, %xmm3
    00000ac5: 	movdqa	-0x78(%rsp), %xmm1
    00000acb: 	psrlw	$0x8, %xmm1
    00000ad0: 	packuswb	%xmm2, %xmm1
    00000ad4: 	movdqa	-0x58(%rsp), %xmm2
    00000ada: 	pand	%xmm15, %xmm1
    00000adf: 	psrlw	$0x8, %xmm2
    00000ae4: 	packuswb	%xmm6, %xmm2
    00000ae8: 	movdqa	%xmm15, %xmm6
    00000aed: 	pand	%xmm15, %xmm2
    00000af2: 	pand	%xmm12, %xmm6
    00000af7: 	movdqa	0xb8(%rsp), %xmm12
    00000b01: 	packuswb	%xmm2, %xmm1
    00000b05: 	movdqa	%xmm15, %xmm2
    00000b0a: 	pand	%xmm14, %xmm2
    00000b0f: 	packuswb	%xmm6, %xmm2
    00000b13: 	movdqa	%xmm14, %xmm6
    00000b18: 	movdqa	0x98(%rsp), %xmm14
    00000b22: 	psrlw	$0x8, %xmm6
    00000b27: 	packuswb	%xmm7, %xmm6
    00000b2b: 	movdqa	%xmm1, %xmm7
    00000b2f: 	paddb	%xmm6, %xmm2
    00000b33: 	punpcklbw	%xmm1, %xmm7
    00000b37: 	punpckhbw	%xmm1, %xmm1
    00000b3b: 	movdqa	%xmm2, %xmm6
    00000b3f: 	punpcklbw	%xmm2, %xmm6
    00000b43: 	punpckhbw	%xmm2, %xmm2
    00000b47: 	pmullw	%xmm7, %xmm6
    00000b4b: 	pmullw	%xmm2, %xmm1
    00000b4f: 	movdqa	0x78(%rsp), %xmm7
    00000b55: 	movdqa	%xmm14, %xmm2
    00000b5a: 	pand	%xmm15, %xmm2
    00000b5f: 	pand	%xmm15, %xmm1
    00000b64: 	pand	%xmm15, %xmm6
    00000b69: 	packuswb	%xmm1, %xmm6
    00000b6d: 	movdqa	%xmm7, %xmm1
    00000b71: 	paddb	%xmm6, %xmm3
    00000b75: 	paddb	0x8(%rsp), %xmm3
    00000b7b: 	pand	%xmm15, %xmm1
    00000b80: 	packuswb	%xmm2, %xmm1
    00000b84: 	movdqa	%xmm12, %xmm2
    00000b89: 	movaps	%xmm3, 0x8(%rsp)
    00000b8e: 	movdqa	%xmm11, %xmm3
    00000b93: 	pand	%xmm15, %xmm2
    00000b98: 	pand	%xmm15, %xmm1
    00000b9d: 	pand	%xmm15, %xmm3
    00000ba2: 	packuswb	%xmm3, %xmm2
    00000ba6: 	movdqa	%xmm15, %xmm3
    00000bab: 	pand	%xmm15, %xmm2
    00000bb0: 	pand	%xmm9, %xmm3
    00000bb5: 	packuswb	%xmm2, %xmm1
    00000bb9: 	movdqa	%xmm15, %xmm2
    00000bbe: 	pand	%xmm10, %xmm2
    00000bc3: 	packuswb	%xmm3, %xmm2
    00000bc7: 	movdqa	%xmm10, %xmm3
    00000bcc: 	movdqa	%xmm9, %xmm10
    00000bd1: 	movdqa	0xf8(%rsp), %xmm9
    00000bdb: 	psrlw	$0x8, %xmm10
    00000be1: 	psrlw	$0x8, %xmm3
    00000be6: 	packuswb	%xmm10, %xmm3
    00000beb: 	movdqa	%xmm1, %xmm10
    00000bf0: 	paddb	%xmm3, %xmm2
    00000bf4: 	punpcklbw	%xmm1, %xmm10
    00000bf9: 	punpckhbw	%xmm1, %xmm1
    00000bfd: 	movdqa	%xmm2, %xmm3
    00000c01: 	punpcklbw	%xmm2, %xmm3
    00000c05: 	punpckhbw	%xmm2, %xmm2
    00000c09: 	pmullw	%xmm10, %xmm3
    00000c0e: 	pmullw	%xmm2, %xmm1
    00000c12: 	movdqa	%xmm14, %xmm2
    00000c17: 	movdqa	0xe8(%rsp), %xmm10
    00000c21: 	psrlw	$0x8, %xmm2
    00000c26: 	movdqa	0x48(%rsp), %xmm14
    00000c2d: 	pand	%xmm15, %xmm1
    00000c32: 	pand	%xmm15, %xmm3
    00000c37: 	packuswb	%xmm1, %xmm3
    00000c3b: 	movdqa	%xmm7, %xmm1
    00000c3f: 	movdqa	0x28(%rsp), %xmm7
    00000c45: 	psrlw	$0x8, %xmm1
    00000c4a: 	packuswb	%xmm2, %xmm1
    00000c4e: 	movdqa	%xmm12, %xmm2
    00000c53: 	movdqa	%xmm11, %xmm12
    00000c58: 	psrlw	$0x8, %xmm12
    00000c5e: 	psrlw	$0x8, %xmm2
    00000c63: 	pand	%xmm15, %xmm1
    00000c68: 	packuswb	%xmm12, %xmm2
    00000c6d: 	movdqa	%xmm15, %xmm12
    00000c72: 	pand	%xmm15, %xmm2
    00000c77: 	pand	%xmm8, %xmm12
    00000c7c: 	packuswb	%xmm2, %xmm1
    00000c80: 	movdqa	%xmm10, %xmm2
    00000c85: 	psrlw	$0x8, %xmm10
    00000c8b: 	pand	%xmm15, %xmm2
    00000c90: 	movdqa	%xmm10, %xmm6
    00000c95: 	movdqa	%xmm8, %xmm10
    00000c9a: 	packuswb	%xmm12, %xmm2
    00000c9f: 	movdqa	0x68(%rsp), %xmm8
    00000ca6: 	psrlw	$0x8, %xmm10
    00000cac: 	packuswb	%xmm10, %xmm6
    00000cb1: 	paddb	%xmm6, %xmm2
    00000cb5: 	movdqa	%xmm2, %xmm10
    00000cba: 	punpcklbw	%xmm2, %xmm10
    00000cbf: 	punpckhbw	%xmm2, %xmm2
    00000cc3: 	movdqa	%xmm10, %xmm6
    00000cc8: 	movdqa	%xmm1, %xmm10
    00000ccd: 	punpcklbw	%xmm1, %xmm10
    00000cd2: 	punpckhbw	%xmm1, %xmm1
    00000cd6: 	pmullw	%xmm2, %xmm1
    00000cda: 	pmullw	%xmm10, %xmm6
    00000cdf: 	pand	%xmm15, %xmm1
    00000ce4: 	pand	%xmm15, %xmm6
    00000ce9: 	packuswb	%xmm1, %xmm6
    00000ced: 	movdqa	%xmm7, %xmm1
    00000cf1: 	paddb	%xmm6, %xmm3
    00000cf5: 	movdqa	0x38(%rsp), %xmm6
    00000cfb: 	paddb	-0x8(%rsp), %xmm3
    00000d01: 	pand	%xmm15, %xmm1
    00000d06: 	movdqa	%xmm6, %xmm2
    00000d0a: 	movaps	%xmm3, -0x8(%rsp)
    00000d0f: 	movdqa	%xmm8, %xmm3
    00000d14: 	pand	%xmm15, %xmm2
    00000d19: 	psrlw	$0x8, %xmm8
    00000d1f: 	pand	%xmm15, %xmm3
    00000d24: 	packuswb	%xmm2, %xmm1
    00000d28: 	movdqa	%xmm14, %xmm2
    00000d2d: 	pand	%xmm15, %xmm2
    00000d32: 	pand	%xmm15, %xmm1
    00000d37: 	packuswb	%xmm3, %xmm2
    00000d3b: 	movdqa	%xmm15, %xmm3
    00000d40: 	pand	%xmm15, %xmm2
    00000d45: 	pand	%xmm5, %xmm3
    00000d49: 	packuswb	%xmm2, %xmm1
    00000d4d: 	psrlw	$0x8, %xmm5
    00000d52: 	movdqa	%xmm15, %xmm2
    00000d57: 	pand	%xmm9, %xmm2
    00000d5c: 	movdqa	%xmm1, %xmm12
    00000d61: 	packuswb	%xmm3, %xmm2
    00000d65: 	movdqa	%xmm9, %xmm3
    00000d6a: 	punpcklbw	%xmm1, %xmm12
    00000d6f: 	movdqa	-0x48(%rsp), %xmm9
    00000d76: 	psrlw	$0x8, %xmm3
    00000d7b: 	punpckhbw	%xmm1, %xmm1
    00000d7f: 	movdqa	-0x38(%rsp), %xmm11
    00000d86: 	packuswb	%xmm5, %xmm3
    00000d8a: 	paddb	%xmm3, %xmm2
    00000d8e: 	movdqa	%xmm2, %xmm3
    00000d92: 	punpcklbw	%xmm2, %xmm3
    00000d96: 	punpckhbw	%xmm2, %xmm2
    00000d9a: 	pmullw	%xmm12, %xmm3
    00000d9f: 	pmullw	%xmm2, %xmm1
    00000da3: 	movdqa	%xmm6, %xmm2
    00000da7: 	movdqa	0xc8(%rsp), %xmm6
    00000db0: 	psrlw	$0x8, %xmm2
    00000db5: 	pand	%xmm15, %xmm1
    00000dba: 	pand	%xmm15, %xmm3
    00000dbf: 	packuswb	%xmm1, %xmm3
    00000dc3: 	movdqa	%xmm7, %xmm1
    00000dc7: 	movdqa	0x88(%rsp), %xmm7
    00000dd0: 	psrlw	$0x8, %xmm1
    00000dd5: 	packuswb	%xmm2, %xmm1
    00000dd9: 	movdqa	%xmm14, %xmm2
    00000dde: 	movdqa	0xd8(%rsp), %xmm14
    00000de8: 	psrlw	$0x8, %xmm2
    00000ded: 	pand	%xmm15, %xmm1
    00000df2: 	packuswb	%xmm8, %xmm2
    00000df7: 	movdqa	%xmm11, %xmm8
    00000dfc: 	pand	%xmm15, %xmm2
    00000e01: 	pand	%xmm15, %xmm8
    00000e06: 	packuswb	%xmm2, %xmm1
    00000e0a: 	movdqa	%xmm9, %xmm2
    00000e0f: 	pand	%xmm15, %xmm2
    00000e14: 	movdqa	%xmm1, %xmm12
    00000e19: 	packuswb	%xmm8, %xmm2
    00000e1e: 	movdqa	%xmm9, %xmm8
    00000e23: 	punpcklbw	%xmm1, %xmm12
    00000e28: 	movdqa	0x108(%rsp), %xmm9
    00000e32: 	psrlw	$0x8, %xmm8
    00000e38: 	punpckhbw	%xmm1, %xmm1
    00000e3c: 	movdqa	%xmm8, %xmm5
    00000e41: 	movdqa	%xmm11, %xmm8
    00000e46: 	psrlw	$0x8, %xmm8
    00000e4c: 	packuswb	%xmm8, %xmm5
    00000e51: 	paddb	%xmm5, %xmm2
    00000e55: 	movdqa	%xmm2, %xmm8
    00000e5a: 	punpcklbw	%xmm2, %xmm8
    00000e5f: 	punpckhbw	%xmm2, %xmm2
    00000e63: 	movdqa	%xmm8, %xmm5
    00000e68: 	pmullw	%xmm2, %xmm1
    00000e6c: 	pmullw	%xmm12, %xmm5
    00000e71: 	pand	%xmm15, %xmm1
    00000e76: 	pand	%xmm15, %xmm5
    00000e7b: 	packuswb	%xmm1, %xmm5
    00000e7f: 	movdqa	%xmm7, %xmm1
    00000e83: 	paddb	%xmm5, %xmm3
    00000e87: 	paddb	-0x18(%rsp), %xmm3
    00000e8d: 	pand	%xmm15, %xmm1
    00000e92: 	movdqa	0xa8(%rsp), %xmm5
    00000e9b: 	movdqa	%xmm5, %xmm2
    00000e9f: 	movaps	%xmm3, -0x18(%rsp)
    00000ea4: 	movdqa	%xmm14, %xmm3
    00000ea9: 	pand	%xmm15, %xmm2
    00000eae: 	pand	%xmm15, %xmm3
    00000eb3: 	packuswb	%xmm2, %xmm1
    00000eb7: 	movdqa	%xmm6, %xmm2
    00000ebb: 	pand	%xmm15, %xmm2
    00000ec0: 	pand	%xmm15, %xmm1
    00000ec5: 	packuswb	%xmm3, %xmm2
    00000ec9: 	movdqa	%xmm9, %xmm3
    00000ece: 	pand	%xmm15, %xmm2
    00000ed3: 	pand	%xmm15, %xmm3
    00000ed8: 	packuswb	%xmm2, %xmm1
    00000edc: 	movdqa	%xmm15, %xmm2
    00000ee1: 	pand	%xmm4, %xmm2
    00000ee5: 	psrlw	$0x8, %xmm4
    00000eea: 	packuswb	%xmm2, %xmm3
    00000eee: 	movdqa	%xmm9, %xmm2
    00000ef3: 	psrlw	$0x8, %xmm2
    00000ef8: 	packuswb	%xmm4, %xmm2
    00000efc: 	movdqa	%xmm1, %xmm4
    00000f00: 	paddb	%xmm2, %xmm3
    00000f04: 	punpcklbw	%xmm1, %xmm4
    00000f08: 	punpckhbw	%xmm1, %xmm1
    00000f0c: 	movdqa	%xmm3, %xmm2
    00000f10: 	punpcklbw	%xmm3, %xmm2
    00000f14: 	punpckhbw	%xmm3, %xmm3
    00000f18: 	pmullw	%xmm4, %xmm2
    00000f1c: 	pmullw	%xmm1, %xmm3
    00000f20: 	movdqa	%xmm7, %xmm1
    00000f24: 	psrlw	$0x8, %xmm1
    00000f29: 	movdqa	%xmm14, %xmm4
    00000f2e: 	psrlw	$0x8, %xmm4
    00000f33: 	pand	%xmm15, %xmm3
    00000f38: 	pand	%xmm15, %xmm2
    00000f3d: 	packuswb	%xmm3, %xmm2
    00000f41: 	movdqa	%xmm5, %xmm3
    00000f45: 	psrlw	$0x8, %xmm3
    00000f4a: 	packuswb	%xmm3, %xmm1
    00000f4e: 	movdqa	%xmm6, %xmm3
    00000f52: 	psrlw	$0x8, %xmm3
    00000f57: 	pand	%xmm15, %xmm1
    00000f5c: 	packuswb	%xmm4, %xmm3
    00000f60: 	movdqa	%xmm15, %xmm4
    00000f65: 	pand	%xmm15, %xmm3
    00000f6a: 	pand	%xmm0, %xmm4
    00000f6e: 	packuswb	%xmm3, %xmm1
    00000f72: 	psrlw	$0x8, %xmm0
    00000f77: 	movdqa	%xmm15, %xmm3
    00000f7c: 	pand	%xmm13, %xmm3
    00000f81: 	movdqa	%xmm1, %xmm5
    00000f85: 	packuswb	%xmm4, %xmm3
    00000f89: 	movdqa	%xmm13, %xmm4
    00000f8e: 	punpcklbw	%xmm1, %xmm5
    00000f92: 	psrlw	$0x8, %xmm4
    00000f97: 	packuswb	%xmm0, %xmm4
    00000f9b: 	movdqa	%xmm3, %xmm0
    00000f9f: 	paddb	%xmm4, %xmm0
    00000fa3: 	movdqa	%xmm1, %xmm4
    00000fa7: 	movdqa	%xmm0, %xmm3
    00000fab: 	punpckhbw	%xmm1, %xmm4
    00000faf: 	punpcklbw	%xmm0, %xmm3
    00000fb3: 	punpckhbw	%xmm0, %xmm0
    00000fb7: 	movdqa	%xmm3, %xmm1
    00000fbb: 	pmullw	%xmm4, %xmm0
    00000fbf: 	pmullw	%xmm5, %xmm1
    00000fc3: 	pand	%xmm15, %xmm0
    00000fc8: 	pand	%xmm15, %xmm1
    00000fcd: 	packuswb	%xmm0, %xmm1
    00000fd1: 	paddb	%xmm1, %xmm2
    00000fd5: 	paddb	-0x28(%rsp), %xmm2
    00000fdb: 	movaps	%xmm2, -0x28(%rsp)
    00000fe0: 	cmpq	%rcx, %r11
    00000fe3: 	ja	.Ltmp134 # Offset: 4067
    00000fe9: 	movdqa	%xmm2, %xmm0
    00000fed: 	pxor	%xmm1, %xmm1
    00000ff1: 	movdqa	-0x18(%rsp), %xmm7
    00000ff7: 	shlq	$0x8, %r11
    00000ffb: 	psrldq	$0x8, %xmm0
    00001000: 	movq	%r13, -0x78(%rsp)
    00001005: 	leaq	(%r13,%r11), %r9
    0000100a: 	leaq	(%r14,%r11), %rdx
    0000100e: 	paddb	%xmm2, %xmm0
    00001012: 	movq	%rsi, %r13
    00001015: 	psadbw	%xmm1, %xmm0
    00001019: 	movd	%xmm0, %r12d
    0000101e: 	movdqa	%xmm7, %xmm0
    00001022: 	psrldq	$0x8, %xmm0
    00001027: 	paddb	%xmm7, %xmm0
    0000102b: 	movdqa	-0x8(%rsp), %xmm7
    00001031: 	psadbw	%xmm1, %xmm0
    00001035: 	movd	%xmm0, %ebp
    00001039: 	movdqa	%xmm7, %xmm0
    0000103d: 	psrldq	$0x8, %xmm0
    00001042: 	paddb	%xmm7, %xmm0
    00001046: 	movdqa	0x8(%rsp), %xmm7
    0000104c: 	psadbw	%xmm1, %xmm0
    00001050: 	movd	%xmm0, %ebx
    00001054: 	movdqa	%xmm7, %xmm0
    00001058: 	psrldq	$0x8, %xmm0
    0000105d: 	paddb	%xmm7, %xmm0
    00001061: 	psadbw	%xmm1, %xmm0
    00001065: 	movd	%xmm0, %r10d
    0000106a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp135:
    00001070: 	movzbl	0x4(%rdx), %ecx
    00001074: 	addb	0xc(%rdx), %cl
    00001077: 	addq	$0x10, %r11
    0000107b: 	addq	$0x10, %r9
    0000107f: 	movzbl	-0xc(%r9), %eax
    00001084: 	movzbl	0x5(%rdx), %esi
    00001088: 	addq	$0x10, %rdx
    0000108c: 	addb	-0x3(%rdx), %sil
    00001090: 	movzbl	-0xa(%rdx), %r8d
    00001095: 	imull	%ecx, %eax
    00001098: 	addb	-0x2(%rdx), %r8b
    0000109c: 	movl	%eax, %ecx
    0000109e: 	movzbl	-0x10(%rdx), %eax
    000010a2: 	addb	-0x8(%rdx), %al
    000010a5: 	mulb	-0x10(%r9)
    000010a9: 	addl	%eax, %ecx
    000010ab: 	movzbl	-0xb(%r9), %eax
    000010b0: 	addl	%r10d, %ecx
    000010b3: 	imull	%esi, %eax
    000010b6: 	movl	%ecx, %r10d
    000010b9: 	movl	%eax, %esi
    000010bb: 	movzbl	-0xf(%rdx), %eax
    000010bf: 	addb	-0x7(%rdx), %al
    000010c2: 	mulb	-0xf(%r9)
    000010c6: 	addl	%eax, %esi
    000010c8: 	movzbl	-0xa(%r9), %eax
    000010cd: 	addl	%ebx, %esi
    000010cf: 	imull	%r8d, %eax
    000010d3: 	movl	%esi, %ebx
    000010d5: 	movl	%eax, %r8d
    000010d8: 	movzbl	-0xe(%rdx), %eax
    000010dc: 	addb	-0x6(%rdx), %al
    000010df: 	mulb	-0xe(%r9)
    000010e3: 	addl	%eax, %r8d
    000010e6: 	movzbl	-0x9(%rdx), %eax
    000010ea: 	addb	-0x1(%rdx), %al
    000010ed: 	mulb	-0x9(%r9)
    000010f1: 	addl	%ebp, %r8d
    000010f4: 	movl	%r8d, %ebp
    000010f7: 	movl	%eax, %edi
    000010f9: 	movzbl	-0xd(%rdx), %eax
    000010fd: 	addb	-0x5(%rdx), %al
    00001100: 	mulb	-0xd(%r9)
    00001104: 	addl	%edi, %eax
    00001106: 	addl	%r12d, %eax
    00001109: 	movl	%eax, %r12d
    0000110c: 	cmpq	%r11, %r13
    0000110f: 	ja	.Ltmp135 # Offset: 4367
.Ltmp140:
    00001115: 	addl	%r8d, %esi
    00001118: 	movq	-0x78(%rsp), %r13
    0000111d: 	addl	%eax, %esi
    0000111f: 	cmpq	%r15, %r11
    00001122: 	jae	.Ltmp136 # Offset: 4386
    00001128: 	leaq	0x1(%r11), %rdx
    0000112c: 	movq	%r15, %rax
    0000112f: 	movl	$0x1, %r9d
    00001135: 	subq	%r11, %rax
    00001138: 	cmpq	%rdx, %r15
    0000113b: 	cmovaeq	%rax, %r9
    0000113f: 	subq	$0x1, %rax
    00001143: 	cmpq	$0xe, %rax
    00001147: 	jbe	.Ltmp137 # Offset: 4423
    0000114d: 	cmpq	%rdx, %r15
    00001150: 	jb	.Ltmp137 # Offset: 4432
    00001156: 	movq	%r9, %rdx
    00001159: 	leaq	(%r13,%r11), %r8
    0000115e: 	leaq	(%r14,%r11), %rdi
    00001162: 	xorl	%eax, %eax
    00001164: 	movdqa	DATAat0x32530(%rip), %xmm15
    0000116d: 	andq	$-0x10, %rdx
    00001171: 	pxor	%xmm3, %xmm3
    00001175: 	nopl	(%rax) # Size: 3
.Ltmp138:
    00001178: 	movdqu	(%rdi,%rax), %xmm2
    0000117d: 	movdqu	(%r8,%rax), %xmm0
    00001183: 	addq	$0x10, %rax
    00001187: 	movdqa	%xmm0, %xmm1
    0000118b: 	movdqa	%xmm2, %xmm4
    0000118f: 	punpcklbw	%xmm0, %xmm1
    00001193: 	punpcklbw	%xmm2, %xmm4
    00001197: 	punpckhbw	%xmm0, %xmm0
    0000119b: 	punpckhbw	%xmm2, %xmm2
    0000119f: 	pmullw	%xmm4, %xmm1
    000011a3: 	pmullw	%xmm2, %xmm0
    000011a7: 	pand	%xmm15, %xmm1
    000011ac: 	pand	%xmm15, %xmm0
    000011b1: 	packuswb	%xmm0, %xmm1
    000011b5: 	paddb	%xmm1, %xmm3
    000011b9: 	cmpq	%rax, %rdx
    000011bc: 	jne	.Ltmp138 # Offset: 4540
    000011be: 	movdqa	%xmm3, %xmm0
    000011c2: 	movq	%r9, %rax
    000011c5: 	psrldq	$0x8, %xmm0
    000011ca: 	andq	$-0x10, %rax
    000011ce: 	paddb	%xmm0, %xmm3
    000011d2: 	pxor	%xmm0, %xmm0
    000011d6: 	addq	%rax, %r11
    000011d9: 	psadbw	%xmm0, %xmm3
    000011dd: 	movd	%xmm3, %r10d
    000011e2: 	addl	%ecx, %r10d
    000011e5: 	movl	%r10d, %ecx
    000011e8: 	cmpq	%rax, %r9
    000011eb: 	je	.Ltmp136 # Offset: 4587
    000011f1: 	leaq	0x1(%r11), %rdx
.Ltmp137:
    000011f5: 	movzbl	(%r14,%r11), %eax
    000011fa: 	mulb	(%r13,%r11)
    000011ff: 	leal	(%rax,%r10), %ecx
    00001203: 	cmpq	%rdx, %r15
    00001206: 	jbe	.Ltmp136 # Offset: 4614
.Ltmp141:
    0000120c: 	movzbl	(%r13,%rdx), %eax
    00001212: 	mulb	(%r14,%rdx)
    00001216: 	addl	%eax, %ecx
    00001218: 	leaq	0x1(%rdx), %rax
    0000121c: 	cmpq	%rax, %r15
    0000121f: 	jbe	.Ltmp136 # Offset: 4639
    00001225: 	movzbl	0x1(%r13,%rdx), %eax
    0000122b: 	mulb	0x1(%r14,%rdx)
    00001230: 	addl	%eax, %ecx
    00001232: 	leaq	0x2(%rdx), %rax
    00001236: 	cmpq	%r15, %rax
    00001239: 	jae	.Ltmp136 # Offset: 4665
    0000123f: 	movzbl	0x2(%r13,%rdx), %eax
    00001245: 	mulb	0x2(%r14,%rdx)
    0000124a: 	addl	%eax, %ecx
    0000124c: 	leaq	0x3(%rdx), %rax
    00001250: 	cmpq	%r15, %rax
    00001253: 	jae	.Ltmp136 # Offset: 4691
    00001259: 	movzbl	0x3(%r13,%rdx), %eax
    0000125f: 	mulb	0x3(%r14,%rdx)
    00001264: 	addl	%eax, %ecx
    00001266: 	leaq	0x4(%rdx), %rax
    0000126a: 	cmpq	%r15, %rax
    0000126d: 	jae	.Ltmp136 # Offset: 4717
    00001273: 	movzbl	0x4(%r13,%rdx), %eax
    00001279: 	mulb	0x4(%r14,%rdx)
    0000127e: 	addl	%eax, %ecx
    00001280: 	leaq	0x5(%rdx), %rax
    00001284: 	cmpq	%r15, %rax
    00001287: 	jae	.Ltmp136 # Offset: 4743
    0000128d: 	movzbl	0x5(%r13,%rdx), %eax
    00001293: 	mulb	0x5(%r14,%rdx)
    00001298: 	addl	%eax, %ecx
    0000129a: 	leaq	0x6(%rdx), %rax
    0000129e: 	cmpq	%rax, %r15
    000012a1: 	jbe	.Ltmp136 # Offset: 4769
    000012a7: 	movzbl	0x6(%r13,%rdx), %eax
    000012ad: 	mulb	0x6(%r14,%rdx)
    000012b2: 	addl	%eax, %ecx
    000012b4: 	leaq	0x7(%rdx), %rax
    000012b8: 	cmpq	%r15, %rax
    000012bb: 	jae	.Ltmp136 # Offset: 4795
    000012c1: 	movzbl	0x7(%r14,%rdx), %eax
    000012c7: 	mulb	0x7(%r13,%rdx)
    000012cc: 	addl	%eax, %ecx
    000012ce: 	leaq	0x8(%rdx), %rax
    000012d2: 	cmpq	%r15, %rax
    000012d5: 	jae	.Ltmp136 # Offset: 4821
    000012d7: 	movzbl	0x8(%r14,%rdx), %eax
    000012dd: 	mulb	0x8(%r13,%rdx)
    000012e2: 	addl	%eax, %ecx
    000012e4: 	leaq	0x9(%rdx), %rax
    000012e8: 	cmpq	%r15, %rax
    000012eb: 	jae	.Ltmp136 # Offset: 4843
    000012ed: 	movzbl	0x9(%r14,%rdx), %eax
    000012f3: 	mulb	0x9(%r13,%rdx)
    000012f8: 	addl	%eax, %ecx
    000012fa: 	leaq	0xa(%rdx), %rax
    000012fe: 	cmpq	%r15, %rax
    00001301: 	jae	.Ltmp136 # Offset: 4865
    00001303: 	movzbl	0xa(%r13,%rdx), %eax
    00001309: 	mulb	0xa(%r14,%rdx)
    0000130e: 	addl	%eax, %ecx
    00001310: 	leaq	0xb(%rdx), %rax
    00001314: 	cmpq	%r15, %rax
    00001317: 	jae	.Ltmp136 # Offset: 4887
    00001319: 	movzbl	0xb(%r13,%rdx), %eax
    0000131f: 	mulb	0xb(%r14,%rdx)
    00001324: 	addl	%eax, %ecx
    00001326: 	leaq	0xc(%rdx), %rax
    0000132a: 	cmpq	%rax, %r15
    0000132d: 	jbe	.Ltmp136 # Offset: 4909
    0000132f: 	movzbl	0xc(%r13,%rdx), %eax
    00001335: 	mulb	0xc(%r14,%rdx)
    0000133a: 	addl	%eax, %ecx
    0000133c: 	leaq	0xd(%rdx), %rax
    00001340: 	cmpq	%rax, %r15
    00001343: 	jbe	.Ltmp136 # Offset: 4931
    00001345: 	movzbl	0xd(%r14,%rdx), %eax
    0000134b: 	mulb	0xd(%r13,%rdx)
    00001350: 	addl	%eax, %ecx
.Ltmp136:
    00001352: 	addq	$0x130, %rsp
    00001359: 	leal	(%rsi,%rcx), %eax
    0000135c: 	popq	%rbx
    0000135d: 	popq	%rbp
    0000135e: 	popq	%r12
    00001360: 	popq	%r13
    00001362: 	popq	%r14
    00001364: 	popq	%r15
    00001366: 	retq # Offset: 4966
    00001367: 	nopw	(%rax,%rax) # Size: 9
.Ltmp133:
    00001370: 	movq	%r13, -0x78(%rsp)
    00001375: 	movq	%r13, %rbx
    00001378: 	movq	%r14, %r9
    0000137b: 	xorl	%r12d, %r12d
    0000137e: 	xorl	%ebp, %ebp
    00001380: 	xorl	%edi, %edi
    00001382: 	xorl	%r10d, %r10d
    00001385: 	xorl	%r11d, %r11d
    00001388: 	movq	%rsi, %r13
    0000138b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp139:
    00001390: 	movzbl	0x4(%rbx), %eax
    00001394: 	addq	$0x10, %r11
    00001398: 	addq	$0x10, %rbx
    0000139c: 	addq	$0x10, %r9
    000013a0: 	movzbl	-0xc(%r9), %ecx
    000013a5: 	addb	-0x4(%r9), %cl
    000013a9: 	imull	%ecx, %eax
    000013ac: 	movzbl	-0xb(%r9), %esi
    000013b1: 	addb	-0x3(%r9), %sil
    000013b5: 	movzbl	-0xa(%r9), %r8d
    000013ba: 	addb	-0x2(%r9), %r8b
    000013be: 	movl	%eax, %ecx
    000013c0: 	movzbl	-0x10(%r9), %eax
    000013c5: 	addb	-0x8(%r9), %al
    000013c9: 	mulb	-0x10(%rbx)
    000013cc: 	addl	%eax, %ecx
    000013ce: 	movzbl	-0xb(%rbx), %eax
    000013d2: 	addl	%r10d, %ecx
    000013d5: 	imull	%esi, %eax
    000013d8: 	movl	%ecx, %r10d
    000013db: 	movl	%eax, %esi
    000013dd: 	movzbl	-0xf(%r9), %eax
    000013e2: 	addb	-0x7(%r9), %al
    000013e6: 	mulb	-0xf(%rbx)
    000013e9: 	addl	%eax, %esi
    000013eb: 	movzbl	-0xa(%rbx), %eax
    000013ef: 	addl	%edi, %esi
    000013f1: 	imull	%r8d, %eax
    000013f5: 	movl	%esi, %edi
    000013f7: 	movl	%eax, %r8d
    000013fa: 	movzbl	-0xe(%r9), %eax
    000013ff: 	addb	-0x6(%r9), %al
    00001403: 	mulb	-0xe(%rbx)
    00001406: 	addl	%eax, %r8d
    00001409: 	movzbl	-0x9(%r9), %eax
    0000140e: 	addb	-0x1(%r9), %al
    00001412: 	mulb	-0x9(%rbx)
    00001415: 	addl	%ebp, %r8d
    00001418: 	movl	%r8d, %ebp
    0000141b: 	movl	%eax, %edx
    0000141d: 	movzbl	-0xd(%r9), %eax
    00001422: 	addb	-0x5(%r9), %al
    00001426: 	mulb	-0xd(%rbx)
    00001429: 	addl	%edx, %eax
    0000142b: 	addl	%r12d, %eax
    0000142e: 	movl	%eax, %r12d
    00001431: 	cmpq	%r11, %r13
    00001434: 	ja	.Ltmp139 # Offset: 5172
    0000143a: 	jmp	.Ltmp140 # Offset: 5178
    0000143f: 	nop # Size: 1
.Ltmp132:
    00001440: 	movzbl	(%rdi), %eax
    00001443: 	mulb	(%rsi)
    00001445: 	movl	$0x1, %edx
    0000144a: 	xorl	%esi, %esi
    0000144c: 	movl	%eax, %ecx
    0000144e: 	jmp	.Ltmp141 # Offset: 5198
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKaaET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKhhET0_T_S3_m" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x7ef0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x7ef0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leaq	(%rdi,%rdx), %rdi
    0000000b: 	cmpq	%rcx, %rdi
    0000000e: 	je	.Ltmp142 # Offset: 14
    00000014: 	leaq	-0x1(%rdx), %rax
    00000018: 	cmpq	$0xe, %rax
    0000001c: 	jbe	.Ltmp143 # Offset: 28
    00000022: 	movq	%rdx, %r8
    00000025: 	movdqa	DATAat0x32530(%rip), %xmm4
    0000002d: 	xorl	%eax, %eax
    0000002f: 	pxor	%xmm3, %xmm3
    00000033: 	andq	$-0x10, %r8
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp144:
    00000040: 	movdqu	(%rcx,%rax), %xmm2
    00000045: 	movdqu	(%rsi,%rax), %xmm0
    0000004a: 	addq	$0x10, %rax
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	movdqa	%xmm2, %xmm5
    00000056: 	punpcklbw	%xmm0, %xmm1
    0000005a: 	punpcklbw	%xmm2, %xmm5
    0000005e: 	punpckhbw	%xmm0, %xmm0
    00000062: 	punpckhbw	%xmm2, %xmm2
    00000066: 	pmullw	%xmm5, %xmm1
    0000006a: 	pmullw	%xmm2, %xmm0
    0000006e: 	pand	%xmm4, %xmm1
    00000072: 	pand	%xmm4, %xmm0
    00000076: 	packuswb	%xmm0, %xmm1
    0000007a: 	paddb	%xmm1, %xmm3
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jne	.Ltmp144 # Offset: 129
    00000083: 	movdqa	%xmm3, %xmm0
    00000087: 	movq	%rdx, %rax
    0000008a: 	psrldq	$0x8, %xmm0
    0000008f: 	andq	$-0x10, %rax
    00000093: 	paddb	%xmm0, %xmm3
    00000097: 	pxor	%xmm0, %xmm0
    0000009b: 	addq	%rax, %rcx
    0000009e: 	addq	%rax, %rsi
    000000a1: 	psadbw	%xmm0, %xmm3
    000000a5: 	movd	%xmm3, %r8d
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	je	.Ltmp145 # Offset: 173
.Ltmp146:
    000000b3: 	movzbl	(%rcx), %eax
    000000b6: 	mulb	(%rsi)
    000000b8: 	addl	%eax, %r8d
    000000bb: 	leaq	0x1(%rcx), %rax
    000000bf: 	cmpq	%rax, %rdi
    000000c2: 	je	.Ltmp145 # Offset: 194
    000000c8: 	movzbl	0x1(%rcx), %eax
    000000cc: 	mulb	0x1(%rsi)
    000000cf: 	addl	%eax, %r8d
    000000d2: 	leaq	0x2(%rcx), %rax
    000000d6: 	cmpq	%rax, %rdi
    000000d9: 	je	.Ltmp145 # Offset: 217
    000000df: 	movzbl	0x2(%rcx), %eax
    000000e3: 	mulb	0x2(%rsi)
    000000e6: 	addl	%eax, %r8d
    000000e9: 	leaq	0x3(%rcx), %rax
    000000ed: 	cmpq	%rax, %rdi
    000000f0: 	je	.Ltmp145 # Offset: 240
    000000f6: 	movzbl	0x3(%rcx), %eax
    000000fa: 	mulb	0x3(%rsi)
    000000fd: 	addl	%eax, %r8d
    00000100: 	leaq	0x4(%rcx), %rax
    00000104: 	cmpq	%rax, %rdi
    00000107: 	je	.Ltmp145 # Offset: 263
    0000010d: 	movzbl	0x4(%rcx), %eax
    00000111: 	mulb	0x4(%rsi)
    00000114: 	addl	%eax, %r8d
    00000117: 	leaq	0x5(%rcx), %rax
    0000011b: 	cmpq	%rax, %rdi
    0000011e: 	je	.Ltmp145 # Offset: 286
    00000124: 	movzbl	0x5(%rcx), %eax
    00000128: 	mulb	0x5(%rsi)
    0000012b: 	addl	%eax, %r8d
    0000012e: 	leaq	0x6(%rcx), %rax
    00000132: 	cmpq	%rax, %rdi
    00000135: 	je	.Ltmp145 # Offset: 309
    0000013b: 	movzbl	0x6(%rcx), %eax
    0000013f: 	mulb	0x6(%rsi)
    00000142: 	addl	%eax, %r8d
    00000145: 	leaq	0x7(%rcx), %rax
    00000149: 	cmpq	%rax, %rdi
    0000014c: 	je	.Ltmp145 # Offset: 332
    00000152: 	movzbl	0x7(%rcx), %eax
    00000156: 	mulb	0x7(%rsi)
    00000159: 	addl	%eax, %r8d
    0000015c: 	leaq	0x8(%rcx), %rax
    00000160: 	cmpq	%rax, %rdi
    00000163: 	je	.Ltmp145 # Offset: 355
    00000165: 	movzbl	0x8(%rcx), %eax
    00000169: 	mulb	0x8(%rsi)
    0000016c: 	addl	%eax, %r8d
    0000016f: 	leaq	0x9(%rcx), %rax
    00000173: 	cmpq	%rax, %rdi
    00000176: 	je	.Ltmp145 # Offset: 374
    00000178: 	movzbl	0x9(%rcx), %eax
    0000017c: 	mulb	0x9(%rsi)
    0000017f: 	addl	%eax, %r8d
    00000182: 	leaq	0xa(%rcx), %rax
    00000186: 	cmpq	%rax, %rdi
    00000189: 	je	.Ltmp145 # Offset: 393
    0000018b: 	movzbl	0xa(%rcx), %eax
    0000018f: 	mulb	0xa(%rsi)
    00000192: 	addl	%eax, %r8d
    00000195: 	leaq	0xb(%rcx), %rax
    00000199: 	cmpq	%rax, %rdi
    0000019c: 	je	.Ltmp145 # Offset: 412
    0000019e: 	movzbl	0xb(%rcx), %eax
    000001a2: 	mulb	0xb(%rsi)
    000001a5: 	addl	%eax, %r8d
    000001a8: 	leaq	0xc(%rcx), %rax
    000001ac: 	cmpq	%rax, %rdi
    000001af: 	je	.Ltmp145 # Offset: 431
    000001b1: 	movzbl	0xc(%rcx), %eax
    000001b5: 	mulb	0xc(%rsi)
    000001b8: 	addl	%eax, %r8d
    000001bb: 	leaq	0xd(%rcx), %rax
    000001bf: 	cmpq	%rax, %rdi
    000001c2: 	je	.Ltmp145 # Offset: 450
    000001c4: 	movzbl	0xd(%rcx), %eax
    000001c8: 	mulb	0xd(%rsi)
    000001cb: 	addl	%eax, %r8d
    000001ce: 	leaq	0xe(%rcx), %rax
    000001d2: 	cmpq	%rax, %rdi
    000001d5: 	je	.Ltmp145 # Offset: 469
    000001d7: 	movzbl	0xe(%rcx), %eax
    000001db: 	mulb	0xe(%rsi)
    000001de: 	addl	%eax, %r8d
.Ltmp145:
    000001e1: 	movl	%r8d, %eax
    000001e4: 	retq # Offset: 484
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp142:
    000001e8: 	xorl	%r8d, %r8d
    000001eb: 	movl	%r8d, %eax
    000001ee: 	retq # Offset: 494
.Ltmp143:
    000001ef: 	xorl	%r8d, %r8d
    000001f2: 	jmp	.Ltmp146 # Offset: 498
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKhhET0_T_S3_m"

Binary Function "_Z14inner_product1IPKhhET0_T_S3_m" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x80f0
  Size        : 0x211
  MaxSize     : 0x220
  Offset      : 0x80f0
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rdx, %rdi
    0000000a: 	testq	%rdx, %rdx
    0000000d: 	je	.Ltmp147 # Offset: 13
    00000013: 	leaq	-0x1(%rdx), %rax
    00000017: 	cmpq	$0xe, %rax
    0000001b: 	jbe	.Ltmp148 # Offset: 27
    00000021: 	movdqa	DATAat0x32530(%rip), %xmm4
    00000029: 	andq	$-0x10, %rdx
    0000002d: 	xorl	%eax, %eax
    0000002f: 	pxor	%xmm3, %xmm3
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp149:
    00000038: 	movdqu	(%rcx,%rax), %xmm2
    0000003d: 	movdqu	(%rsi,%rax), %xmm0
    00000042: 	addq	$0x10, %rax
    00000046: 	movdqa	%xmm0, %xmm1
    0000004a: 	movdqa	%xmm2, %xmm5
    0000004e: 	punpcklbw	%xmm0, %xmm1
    00000052: 	punpcklbw	%xmm2, %xmm5
    00000056: 	punpckhbw	%xmm0, %xmm0
    0000005a: 	punpckhbw	%xmm2, %xmm2
    0000005e: 	pmullw	%xmm5, %xmm1
    00000062: 	pmullw	%xmm2, %xmm0
    00000066: 	pand	%xmm4, %xmm1
    0000006a: 	pand	%xmm4, %xmm0
    0000006e: 	packuswb	%xmm0, %xmm1
    00000072: 	paddb	%xmm1, %xmm3
    00000076: 	cmpq	%rdx, %rax
    00000079: 	jne	.Ltmp149 # Offset: 121
    0000007b: 	movdqa	%xmm3, %xmm0
    0000007f: 	movq	%rdi, %rdx
    00000082: 	psrldq	$0x8, %xmm0
    00000087: 	andq	$-0x10, %rdx
    0000008b: 	paddb	%xmm0, %xmm3
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	psadbw	%xmm0, %xmm3
    00000097: 	movd	%xmm3, %r8d
    0000009c: 	testb	$0xf, %dil
    000000a0: 	je	.Ltmp150 # Offset: 160
.Ltmp151:
    000000a6: 	movzbl	(%rcx,%rdx), %eax
    000000aa: 	mulb	(%rsi,%rdx)
    000000ad: 	addl	%eax, %r8d
    000000b0: 	leaq	0x1(%rdx), %rax
    000000b4: 	cmpq	%rax, %rdi
    000000b7: 	jbe	.Ltmp150 # Offset: 183
    000000bd: 	movzbl	0x1(%rcx,%rdx), %eax
    000000c2: 	mulb	0x1(%rsi,%rdx)
    000000c6: 	addl	%eax, %r8d
    000000c9: 	leaq	0x2(%rdx), %rax
    000000cd: 	cmpq	%rax, %rdi
    000000d0: 	jbe	.Ltmp150 # Offset: 208
    000000d6: 	movzbl	0x2(%rcx,%rdx), %eax
    000000db: 	mulb	0x2(%rsi,%rdx)
    000000df: 	addl	%eax, %r8d
    000000e2: 	leaq	0x3(%rdx), %rax
    000000e6: 	cmpq	%rax, %rdi
    000000e9: 	jbe	.Ltmp150 # Offset: 233
    000000ef: 	movzbl	0x3(%rcx,%rdx), %eax
    000000f4: 	mulb	0x3(%rsi,%rdx)
    000000f8: 	addl	%eax, %r8d
    000000fb: 	leaq	0x4(%rdx), %rax
    000000ff: 	cmpq	%rax, %rdi
    00000102: 	jbe	.Ltmp150 # Offset: 258
    00000108: 	movzbl	0x4(%rcx,%rdx), %eax
    0000010d: 	mulb	0x4(%rsi,%rdx)
    00000111: 	addl	%eax, %r8d
    00000114: 	leaq	0x5(%rdx), %rax
    00000118: 	cmpq	%rax, %rdi
    0000011b: 	jbe	.Ltmp150 # Offset: 283
    00000121: 	movzbl	0x5(%rcx,%rdx), %eax
    00000126: 	mulb	0x5(%rsi,%rdx)
    0000012a: 	addl	%eax, %r8d
    0000012d: 	leaq	0x6(%rdx), %rax
    00000131: 	cmpq	%rax, %rdi
    00000134: 	jbe	.Ltmp150 # Offset: 308
    0000013a: 	movzbl	0x6(%rcx,%rdx), %eax
    0000013f: 	mulb	0x6(%rsi,%rdx)
    00000143: 	addl	%eax, %r8d
    00000146: 	leaq	0x7(%rdx), %rax
    0000014a: 	cmpq	%rax, %rdi
    0000014d: 	jbe	.Ltmp150 # Offset: 333
    00000153: 	movzbl	0x7(%rcx,%rdx), %eax
    00000158: 	mulb	0x7(%rsi,%rdx)
    0000015c: 	addl	%eax, %r8d
    0000015f: 	leaq	0x8(%rdx), %rax
    00000163: 	cmpq	%rax, %rdi
    00000166: 	jbe	.Ltmp150 # Offset: 358
    0000016c: 	movzbl	0x8(%rcx,%rdx), %eax
    00000171: 	mulb	0x8(%rsi,%rdx)
    00000175: 	addl	%eax, %r8d
    00000178: 	leaq	0x9(%rdx), %rax
    0000017c: 	cmpq	%rax, %rdi
    0000017f: 	jbe	.Ltmp150 # Offset: 383
    00000181: 	movzbl	0x9(%rcx,%rdx), %eax
    00000186: 	mulb	0x9(%rsi,%rdx)
    0000018a: 	addl	%eax, %r8d
    0000018d: 	leaq	0xa(%rdx), %rax
    00000191: 	cmpq	%rax, %rdi
    00000194: 	jbe	.Ltmp150 # Offset: 404
    00000196: 	movzbl	0xa(%rcx,%rdx), %eax
    0000019b: 	mulb	0xa(%rsi,%rdx)
    0000019f: 	addl	%eax, %r8d
    000001a2: 	leaq	0xb(%rdx), %rax
    000001a6: 	cmpq	%rax, %rdi
    000001a9: 	jbe	.Ltmp150 # Offset: 425
    000001ab: 	movzbl	0xb(%rcx,%rdx), %eax
    000001b0: 	mulb	0xb(%rsi,%rdx)
    000001b4: 	addl	%eax, %r8d
    000001b7: 	leaq	0xc(%rdx), %rax
    000001bb: 	cmpq	%rax, %rdi
    000001be: 	jbe	.Ltmp150 # Offset: 446
    000001c0: 	movzbl	0xc(%rcx,%rdx), %eax
    000001c5: 	mulb	0xc(%rsi,%rdx)
    000001c9: 	addl	%eax, %r8d
    000001cc: 	leaq	0xd(%rdx), %rax
    000001d0: 	cmpq	%rax, %rdi
    000001d3: 	jbe	.Ltmp150 # Offset: 467
    000001d5: 	movzbl	0xd(%rcx,%rdx), %eax
    000001da: 	mulb	0xd(%rsi,%rdx)
    000001de: 	addl	%eax, %r8d
    000001e1: 	leaq	0xe(%rdx), %rax
    000001e5: 	cmpq	%rax, %rdi
    000001e8: 	jbe	.Ltmp150 # Offset: 488
    000001ea: 	movzbl	0xe(%rsi,%rdx), %eax
    000001ef: 	mulb	0xe(%rcx,%rdx)
    000001f3: 	addl	%eax, %r8d
.Ltmp150:
    000001f6: 	movl	%r8d, %eax
    000001f9: 	retq # Offset: 505
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp147:
    00000200: 	xorl	%r8d, %r8d
    00000203: 	movl	%r8d, %eax
    00000206: 	retq # Offset: 518
.Ltmp148:
    00000207: 	xorl	%edx, %edx
    00000209: 	xorl	%r8d, %r8d
    0000020c: 	jmp	.Ltmp151 # Offset: 524
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product2IPKhhET0_T_S3_m" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x8310
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x8310
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leaq	(%rdi,%rdx), %rdi
    0000000b: 	cmpq	%rdi, %rcx
    0000000e: 	je	.Ltmp152 # Offset: 14
    00000014: 	leaq	-0x1(%rdx), %rax
    00000018: 	cmpq	$0xe, %rax
    0000001c: 	jbe	.Ltmp153 # Offset: 28
    00000022: 	movq	%rdx, %r8
    00000025: 	movdqa	DATAat0x32530(%rip), %xmm4
    0000002d: 	xorl	%eax, %eax
    0000002f: 	pxor	%xmm3, %xmm3
    00000033: 	andq	$-0x10, %r8
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp154:
    00000040: 	movdqu	(%rcx,%rax), %xmm2
    00000045: 	movdqu	(%rsi,%rax), %xmm0
    0000004a: 	addq	$0x10, %rax
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	movdqa	%xmm2, %xmm5
    00000056: 	punpcklbw	%xmm0, %xmm1
    0000005a: 	punpcklbw	%xmm2, %xmm5
    0000005e: 	punpckhbw	%xmm0, %xmm0
    00000062: 	punpckhbw	%xmm2, %xmm2
    00000066: 	pmullw	%xmm5, %xmm1
    0000006a: 	pmullw	%xmm2, %xmm0
    0000006e: 	pand	%xmm4, %xmm1
    00000072: 	pand	%xmm4, %xmm0
    00000076: 	packuswb	%xmm0, %xmm1
    0000007a: 	paddb	%xmm1, %xmm3
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jne	.Ltmp154 # Offset: 129
    00000083: 	movdqa	%xmm3, %xmm0
    00000087: 	movq	%rdx, %rax
    0000008a: 	psrldq	$0x8, %xmm0
    0000008f: 	andq	$-0x10, %rax
    00000093: 	paddb	%xmm0, %xmm3
    00000097: 	pxor	%xmm0, %xmm0
    0000009b: 	addq	%rax, %rcx
    0000009e: 	addq	%rax, %rsi
    000000a1: 	psadbw	%xmm0, %xmm3
    000000a5: 	movd	%xmm3, %r8d
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	je	.Ltmp155 # Offset: 173
.Ltmp156:
    000000b3: 	movzbl	(%rcx), %eax
    000000b6: 	mulb	(%rsi)
    000000b8: 	addl	%eax, %r8d
    000000bb: 	leaq	0x1(%rcx), %rax
    000000bf: 	cmpq	%rax, %rdi
    000000c2: 	je	.Ltmp155 # Offset: 194
    000000c8: 	movzbl	0x1(%rcx), %eax
    000000cc: 	mulb	0x1(%rsi)
    000000cf: 	addl	%eax, %r8d
    000000d2: 	leaq	0x2(%rcx), %rax
    000000d6: 	cmpq	%rax, %rdi
    000000d9: 	je	.Ltmp155 # Offset: 217
    000000df: 	movzbl	0x2(%rcx), %eax
    000000e3: 	mulb	0x2(%rsi)
    000000e6: 	addl	%eax, %r8d
    000000e9: 	leaq	0x3(%rcx), %rax
    000000ed: 	cmpq	%rax, %rdi
    000000f0: 	je	.Ltmp155 # Offset: 240
    000000f6: 	movzbl	0x3(%rcx), %eax
    000000fa: 	mulb	0x3(%rsi)
    000000fd: 	addl	%eax, %r8d
    00000100: 	leaq	0x4(%rcx), %rax
    00000104: 	cmpq	%rax, %rdi
    00000107: 	je	.Ltmp155 # Offset: 263
    0000010d: 	movzbl	0x4(%rcx), %eax
    00000111: 	mulb	0x4(%rsi)
    00000114: 	addl	%eax, %r8d
    00000117: 	leaq	0x5(%rcx), %rax
    0000011b: 	cmpq	%rax, %rdi
    0000011e: 	je	.Ltmp155 # Offset: 286
    00000124: 	movzbl	0x5(%rcx), %eax
    00000128: 	mulb	0x5(%rsi)
    0000012b: 	addl	%eax, %r8d
    0000012e: 	leaq	0x6(%rcx), %rax
    00000132: 	cmpq	%rax, %rdi
    00000135: 	je	.Ltmp155 # Offset: 309
    0000013b: 	movzbl	0x6(%rcx), %eax
    0000013f: 	mulb	0x6(%rsi)
    00000142: 	addl	%eax, %r8d
    00000145: 	leaq	0x7(%rcx), %rax
    00000149: 	cmpq	%rax, %rdi
    0000014c: 	je	.Ltmp155 # Offset: 332
    00000152: 	movzbl	0x7(%rcx), %eax
    00000156: 	mulb	0x7(%rsi)
    00000159: 	addl	%eax, %r8d
    0000015c: 	leaq	0x8(%rcx), %rax
    00000160: 	cmpq	%rax, %rdi
    00000163: 	je	.Ltmp155 # Offset: 355
    00000165: 	movzbl	0x8(%rcx), %eax
    00000169: 	mulb	0x8(%rsi)
    0000016c: 	addl	%eax, %r8d
    0000016f: 	leaq	0x9(%rcx), %rax
    00000173: 	cmpq	%rax, %rdi
    00000176: 	je	.Ltmp155 # Offset: 374
    00000178: 	movzbl	0x9(%rcx), %eax
    0000017c: 	mulb	0x9(%rsi)
    0000017f: 	addl	%eax, %r8d
    00000182: 	leaq	0xa(%rcx), %rax
    00000186: 	cmpq	%rax, %rdi
    00000189: 	je	.Ltmp155 # Offset: 393
    0000018b: 	movzbl	0xa(%rcx), %eax
    0000018f: 	mulb	0xa(%rsi)
    00000192: 	addl	%eax, %r8d
    00000195: 	leaq	0xb(%rcx), %rax
    00000199: 	cmpq	%rax, %rdi
    0000019c: 	je	.Ltmp155 # Offset: 412
    0000019e: 	movzbl	0xb(%rcx), %eax
    000001a2: 	mulb	0xb(%rsi)
    000001a5: 	addl	%eax, %r8d
    000001a8: 	leaq	0xc(%rcx), %rax
    000001ac: 	cmpq	%rax, %rdi
    000001af: 	je	.Ltmp155 # Offset: 431
    000001b1: 	movzbl	0xc(%rcx), %eax
    000001b5: 	mulb	0xc(%rsi)
    000001b8: 	addl	%eax, %r8d
    000001bb: 	leaq	0xd(%rcx), %rax
    000001bf: 	cmpq	%rax, %rdi
    000001c2: 	je	.Ltmp155 # Offset: 450
    000001c4: 	movzbl	0xd(%rcx), %eax
    000001c8: 	mulb	0xd(%rsi)
    000001cb: 	addl	%eax, %r8d
    000001ce: 	leaq	0xe(%rcx), %rax
    000001d2: 	cmpq	%rax, %rdi
    000001d5: 	je	.Ltmp155 # Offset: 469
    000001d7: 	movzbl	0xe(%rcx), %eax
    000001db: 	mulb	0xe(%rsi)
    000001de: 	addl	%eax, %r8d
.Ltmp155:
    000001e1: 	movl	%r8d, %eax
    000001e4: 	retq # Offset: 484
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp152:
    000001e8: 	xorl	%r8d, %r8d
    000001eb: 	movl	%r8d, %eax
    000001ee: 	retq # Offset: 494
.Ltmp153:
    000001ef: 	xorl	%r8d, %r8d
    000001f2: 	jmp	.Ltmp156 # Offset: 498
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product3IPKhhET0_T_S3_m" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x8510
  Size        : 0x427
  MaxSize     : 0x430
  Offset      : 0x8510
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rsi, %rcx
    0000000a: 	subq	$0x1, %r11
    0000000e: 	je	.Ltmp157 # Offset: 14
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %r10
    00000018: 	pushq	%rbx
    00000019: 	leaq	-0x2(%rdx), %rbx
    0000001d: 	testq	%rdx, %rdx
    00000020: 	je	.Ltmp158 # Offset: 32
    00000026: 	cmpq	$0x1d, %rbx
    0000002a: 	jbe	.Ltmp158 # Offset: 42
    00000030: 	shrq	%rbx
    00000033: 	movdqa	DATAat0x32540(%rip), %xmm4
    0000003b: 	xorl	%eax, %eax
    0000003d: 	xorl	%edx, %edx
    0000003f: 	addq	$0x1, %rbx
    00000043: 	movdqa	DATAat0x32550(%rip), %xmm6
    0000004b: 	pxor	%xmm3, %xmm3
    0000004f: 	movdqa	DATAat0x32530(%rip), %xmm2
    00000057: 	movq	%rbx, %rsi
    0000005a: 	movdqa	DATAat0x32560(%rip), %xmm5
    00000062: 	shrq	$0x4, %rsi
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp159:
    00000070: 	movdqu	(%rdi,%rax), %xmm7
    00000075: 	movdqu	0x10(%rdi,%rax), %xmm0
    0000007b: 	movdqa	%xmm4, %xmm1
    0000007f: 	addq	$0x1, %rdx
    00000083: 	movdqu	0x10(%rcx,%rax), %xmm8
    0000008a: 	paddq	%xmm6, %xmm4
    0000008e: 	paddq	%xmm5, %xmm1
    00000092: 	pand	%xmm2, %xmm0
    00000096: 	pand	%xmm2, %xmm7
    0000009a: 	packuswb	%xmm0, %xmm7
    0000009e: 	movdqu	(%rcx,%rax), %xmm0
    000000a3: 	pand	%xmm2, %xmm8
    000000a8: 	movdqa	%xmm7, %xmm9
    000000ad: 	pand	%xmm2, %xmm0
    000000b1: 	punpcklbw	%xmm7, %xmm9
    000000b6: 	punpckhbw	%xmm7, %xmm7
    000000ba: 	packuswb	%xmm8, %xmm0
    000000bf: 	movdqa	%xmm0, %xmm8
    000000c4: 	punpcklbw	%xmm0, %xmm8
    000000c9: 	punpckhbw	%xmm0, %xmm0
    000000cd: 	pmullw	%xmm9, %xmm8
    000000d2: 	pmullw	%xmm7, %xmm0
    000000d6: 	movdqu	(%rdi,%rax), %xmm7
    000000db: 	movdqu	0x10(%rcx,%rax), %xmm9
    000000e2: 	psrlw	$0x8, %xmm7
    000000e7: 	psrlw	$0x8, %xmm9
    000000ed: 	pand	%xmm2, %xmm0
    000000f1: 	pand	%xmm2, %xmm8
    000000f6: 	packuswb	%xmm0, %xmm8
    000000fb: 	movdqu	0x10(%rdi,%rax), %xmm0
    00000101: 	psrlw	$0x8, %xmm0
    00000106: 	packuswb	%xmm0, %xmm7
    0000010a: 	movdqu	(%rcx,%rax), %xmm0
    0000010f: 	addq	$0x20, %rax
    00000113: 	movdqa	%xmm7, %xmm10
    00000118: 	psrlw	$0x8, %xmm0
    0000011d: 	punpcklbw	%xmm7, %xmm10
    00000122: 	punpckhbw	%xmm7, %xmm7
    00000126: 	packuswb	%xmm9, %xmm0
    0000012b: 	movdqa	%xmm0, %xmm9
    00000130: 	punpcklbw	%xmm0, %xmm9
    00000135: 	punpckhbw	%xmm0, %xmm0
    00000139: 	pmullw	%xmm10, %xmm9
    0000013e: 	pmullw	%xmm7, %xmm0
    00000142: 	movdqa	%xmm9, %xmm7
    00000147: 	pand	%xmm2, %xmm0
    0000014b: 	pand	%xmm2, %xmm7
    0000014f: 	packuswb	%xmm0, %xmm7
    00000153: 	paddb	%xmm7, %xmm8
    00000158: 	paddb	%xmm8, %xmm3
    0000015d: 	cmpq	%rdx, %rsi
    00000160: 	ja	.Ltmp159 # Offset: 352
    00000166: 	movdqa	%xmm3, %xmm0
    0000016a: 	movq	%rbx, %rbp
    0000016d: 	movhlps	%xmm1, %xmm5
    00000170: 	psrldq	$0x8, %xmm0
    00000175: 	andq	$-0x10, %rbp
    00000179: 	movq	%xmm5, %rdx
    0000017e: 	paddb	%xmm0, %xmm3
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	leaq	(%rbp,%rbp), %rsi
    0000018b: 	psadbw	%xmm0, %xmm3
    0000018f: 	movd	%xmm3, %r9d
    00000194: 	movl	%r9d, %r8d
    00000197: 	cmpq	%rbp, %rbx
    0000019a: 	je	.Ltmp160 # Offset: 410
    000001a0: 	movzbl	(%rdi,%rbp,2), %eax
    000001a4: 	mulb	(%rcx,%rbp,2)
    000001a7: 	leaq	0x2(%rsi), %rdx
    000001ab: 	movl	%eax, %r8d
    000001ae: 	movzbl	0x1(%rdi,%rsi), %eax
    000001b3: 	mulb	0x1(%rcx,%rsi)
    000001b7: 	addl	%eax, %r8d
    000001ba: 	addl	%r9d, %r8d
    000001bd: 	cmpq	%rdx, %r11
    000001c0: 	jbe	.Ltmp160 # Offset: 448
    000001c6: 	movzbl	0x2(%rdi,%rsi), %eax
    000001cb: 	mulb	0x2(%rcx,%rsi)
    000001cf: 	movl	%eax, %edx
    000001d1: 	movzbl	0x3(%rdi,%rsi), %eax
    000001d6: 	mulb	0x3(%rcx,%rsi)
    000001da: 	addl	%edx, %eax
    000001dc: 	leaq	0x4(%rsi), %rdx
    000001e0: 	addl	%eax, %r8d
    000001e3: 	cmpq	%rdx, %r11
    000001e6: 	jbe	.Ltmp160 # Offset: 486
    000001ec: 	movzbl	0x4(%rdi,%rsi), %eax
    000001f1: 	mulb	0x4(%rcx,%rsi)
    000001f5: 	movl	%eax, %edx
    000001f7: 	movzbl	0x5(%rdi,%rsi), %eax
    000001fc: 	mulb	0x5(%rcx,%rsi)
    00000200: 	addl	%edx, %eax
    00000202: 	leaq	0x6(%rsi), %rdx
    00000206: 	addl	%eax, %r8d
    00000209: 	cmpq	%rdx, %r11
    0000020c: 	jbe	.Ltmp160 # Offset: 524
    00000212: 	movzbl	0x6(%rdi,%rsi), %eax
    00000217: 	mulb	0x6(%rcx,%rsi)
    0000021b: 	movl	%eax, %edx
    0000021d: 	movzbl	0x7(%rdi,%rsi), %eax
    00000222: 	mulb	0x7(%rcx,%rsi)
    00000226: 	addl	%edx, %eax
    00000228: 	leaq	0x8(%rsi), %rdx
    0000022c: 	addl	%eax, %r8d
    0000022f: 	cmpq	%rdx, %r11
    00000232: 	jbe	.Ltmp160 # Offset: 562
    00000238: 	movzbl	0x8(%rdi,%rsi), %eax
    0000023d: 	mulb	0x8(%rcx,%rsi)
    00000241: 	movl	%eax, %edx
    00000243: 	movzbl	0x9(%rdi,%rsi), %eax
    00000248: 	mulb	0x9(%rcx,%rsi)
    0000024c: 	addl	%edx, %eax
    0000024e: 	leaq	0xa(%rsi), %rdx
    00000252: 	addl	%eax, %r8d
    00000255: 	cmpq	%rdx, %r11
    00000258: 	jbe	.Ltmp160 # Offset: 600
    0000025e: 	movzbl	0xa(%rdi,%rsi), %eax
    00000263: 	mulb	0xa(%rcx,%rsi)
    00000267: 	movl	%eax, %edx
    00000269: 	movzbl	0xb(%rdi,%rsi), %eax
    0000026e: 	mulb	0xb(%rcx,%rsi)
    00000272: 	addl	%edx, %eax
    00000274: 	leaq	0xc(%rsi), %rdx
    00000278: 	addl	%eax, %r8d
    0000027b: 	cmpq	%rdx, %r11
    0000027e: 	jbe	.Ltmp160 # Offset: 638
    00000284: 	movzbl	0xc(%rdi,%rsi), %eax
    00000289: 	mulb	0xc(%rcx,%rsi)
    0000028d: 	movl	%eax, %edx
    0000028f: 	movzbl	0xd(%rdi,%rsi), %eax
    00000294: 	mulb	0xd(%rcx,%rsi)
    00000298: 	addl	%edx, %eax
    0000029a: 	leaq	0xe(%rsi), %rdx
    0000029e: 	addl	%eax, %r8d
    000002a1: 	cmpq	%rdx, %r11
    000002a4: 	jbe	.Ltmp160 # Offset: 676
    000002aa: 	movzbl	0xe(%rdi,%rsi), %eax
    000002af: 	mulb	0xe(%rcx,%rsi)
    000002b3: 	movl	%eax, %edx
    000002b5: 	movzbl	0xf(%rdi,%rsi), %eax
    000002ba: 	mulb	0xf(%rcx,%rsi)
    000002be: 	addl	%edx, %eax
    000002c0: 	leaq	0x10(%rsi), %rdx
    000002c4: 	addl	%eax, %r8d
    000002c7: 	cmpq	%rdx, %r11
    000002ca: 	jbe	.Ltmp160 # Offset: 714
    000002d0: 	movzbl	0x10(%rdi,%rsi), %eax
    000002d5: 	mulb	0x10(%rcx,%rsi)
    000002d9: 	movl	%eax, %edx
    000002db: 	movzbl	0x11(%rdi,%rsi), %eax
    000002e0: 	mulb	0x11(%rcx,%rsi)
    000002e4: 	addl	%edx, %eax
    000002e6: 	leaq	0x12(%rsi), %rdx
    000002ea: 	addl	%eax, %r8d
    000002ed: 	cmpq	%rdx, %r11
    000002f0: 	jbe	.Ltmp160 # Offset: 752
    000002f6: 	movzbl	0x12(%rdi,%rsi), %eax
    000002fb: 	mulb	0x12(%rcx,%rsi)
    000002ff: 	movl	%eax, %edx
    00000301: 	movzbl	0x13(%rdi,%rsi), %eax
    00000306: 	mulb	0x13(%rcx,%rsi)
    0000030a: 	addl	%edx, %eax
    0000030c: 	leaq	0x14(%rsi), %rdx
    00000310: 	addl	%eax, %r8d
    00000313: 	cmpq	%rdx, %r11
    00000316: 	jbe	.Ltmp160 # Offset: 790
    0000031c: 	movzbl	0x14(%rdi,%rsi), %eax
    00000321: 	mulb	0x14(%rcx,%rsi)
    00000325: 	movl	%eax, %edx
    00000327: 	movzbl	0x15(%rdi,%rsi), %eax
    0000032c: 	mulb	0x15(%rcx,%rsi)
    00000330: 	addl	%edx, %eax
    00000332: 	leaq	0x16(%rsi), %rdx
    00000336: 	addl	%eax, %r8d
    00000339: 	cmpq	%rdx, %r11
    0000033c: 	jbe	.Ltmp160 # Offset: 828
    00000342: 	movzbl	0x16(%rdi,%rsi), %eax
    00000347: 	mulb	0x16(%rcx,%rsi)
    0000034b: 	movl	%eax, %edx
    0000034d: 	movzbl	0x17(%rdi,%rsi), %eax
    00000352: 	mulb	0x17(%rcx,%rsi)
    00000356: 	addl	%edx, %eax
    00000358: 	leaq	0x18(%rsi), %rdx
    0000035c: 	addl	%eax, %r8d
    0000035f: 	cmpq	%rdx, %r11
    00000362: 	jbe	.Ltmp160 # Offset: 866
    00000364: 	movzbl	0x18(%rdi,%rsi), %eax
    00000369: 	mulb	0x18(%rcx,%rsi)
    0000036d: 	movl	%eax, %edx
    0000036f: 	movzbl	0x19(%rdi,%rsi), %eax
    00000374: 	mulb	0x19(%rcx,%rsi)
    00000378: 	addl	%edx, %eax
    0000037a: 	leaq	0x1a(%rsi), %rdx
    0000037e: 	addl	%eax, %r8d
    00000381: 	cmpq	%rdx, %r11
    00000384: 	jbe	.Ltmp160 # Offset: 900
    00000386: 	movzbl	0x1a(%rdi,%rsi), %eax
    0000038b: 	mulb	0x1a(%rcx,%rsi)
    0000038f: 	movl	%eax, %edx
    00000391: 	movzbl	0x1b(%rdi,%rsi), %eax
    00000396: 	mulb	0x1b(%rcx,%rsi)
    0000039a: 	addl	%edx, %eax
    0000039c: 	leaq	0x1c(%rsi), %rdx
    000003a0: 	addl	%eax, %r8d
    000003a3: 	cmpq	%rdx, %r11
    000003a6: 	jbe	.Ltmp160 # Offset: 934
    000003a8: 	movzbl	0x1c(%rcx,%rsi), %eax
    000003ad: 	mulb	0x1c(%rdi,%rsi)
    000003b1: 	movl	%eax, %edx
    000003b3: 	movzbl	0x1d(%rdi,%rsi), %eax
    000003b8: 	mulb	0x1d(%rcx,%rsi)
    000003bc: 	addl	%edx, %eax
    000003be: 	leaq	0x1e(%rsi), %rdx
    000003c2: 	addl	%eax, %r8d
    000003c5: 	nopl	(%rax) # Size: 3
.Ltmp160:
    000003c8: 	cmpq	%rdx, %r10
    000003cb: 	jbe	.Ltmp161 # Offset: 971
    000003cd: 	addq	%rdx, %rdi
    000003d0: 	addq	%rdx, %rcx
    000003d3: 	movzbl	(%rdi), %eax
    000003d6: 	mulb	(%rcx)
    000003d8: 	addl	%eax, %r8d
.Ltmp161:
    000003db: 	movl	%r8d, %eax
    000003de: 	popq	%rbx
    000003df: 	popq	%rbp
    000003e0: 	retq # Offset: 992
    000003e1: 	nopl	(%rax) # Size: 7
.Ltmp158:
    000003e8: 	xorl	%r8d, %r8d
    000003eb: 	xorl	%edx, %edx
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp162:
    000003f0: 	movzbl	0x1(%rcx,%rdx), %eax
    000003f5: 	mulb	0x1(%rdi,%rdx)
    000003f9: 	movl	%eax, %esi
    000003fb: 	movzbl	(%rcx,%rdx), %eax
    000003ff: 	mulb	(%rdi,%rdx)
    00000402: 	addq	$0x2, %rdx
    00000406: 	addl	%esi, %eax
    00000408: 	addl	%eax, %r8d
    0000040b: 	cmpq	%rdx, %r11
    0000040e: 	ja	.Ltmp162 # Offset: 1038
    00000410: 	jmp	.Ltmp160 # Offset: 1040
    00000412: 	nopw	(%rax,%rax) # Size: 6
.Ltmp157:
    00000418: 	movzbl	(%rdi), %eax
    0000041b: 	mulb	(%rsi)
    0000041d: 	xorl	%r8d, %r8d
    00000420: 	addl	%eax, %r8d
    00000423: 	movl	%r8d, %eax
    00000426: 	retq # Offset: 1062
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product4IPKhhET0_T_S3_m" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x8940
  Size        : 0x3fe
  MaxSize     : 0x400
  Offset      : 0x8940
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rdx, %r9
    0000000a: 	subq	$0x3, %r10
    0000000e: 	je	.Ltmp163 # Offset: 14
    00000014: 	leaq	-0x4(%rdx), %r11
    00000018: 	cmpq	$-0x4, %r10
    0000001c: 	ja	.Ltmp164 # Offset: 28
    00000022: 	cmpq	$0x3b, %r11
    00000026: 	jbe	.Ltmp164 # Offset: 38
    0000002c: 	shrq	$0x2, %r11
    00000030: 	movq	%rdi, %rdx
    00000033: 	movq	%rsi, %rax
    00000036: 	xorl	%ecx, %ecx
    00000038: 	addq	$0x1, %r11
    0000003c: 	movdqa	DATAat0x32530(%rip), %xmm0
    00000044: 	pxor	%xmm15, %xmm15
    00000049: 	movdqa	DATAat0x32570(%rip), %xmm14
    00000052: 	movq	%r11, %r8
    00000055: 	shrq	$0x4, %r8
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp165:
    00000060: 	movdqu	(%rdx), %xmm4
    00000064: 	movdqu	(%rdx), %xmm3
    00000068: 	addq	$0x1, %rcx
    0000006c: 	addq	$0x40, %rdx
    00000070: 	movdqu	-0x30(%rdx), %xmm1
    00000075: 	movdqu	-0x20(%rdx), %xmm12
    0000007b: 	movdqa	%xmm14, %xmm13
    00000080: 	addq	$0x40, %rax
    00000084: 	pand	%xmm0, %xmm4
    00000088: 	psrlw	$0x8, %xmm3
    0000008d: 	movdqu	-0x20(%rdx), %xmm8
    00000093: 	movdqu	-0x40(%rax), %xmm2
    00000098: 	pand	%xmm0, %xmm1
    0000009c: 	pand	%xmm0, %xmm12
    000000a1: 	movdqu	-0x30(%rax), %xmm5
    000000a6: 	movdqu	-0x20(%rax), %xmm11
    000000ac: 	packuswb	%xmm1, %xmm4
    000000b0: 	movdqu	-0x30(%rdx), %xmm1
    000000b5: 	psrlw	$0x8, %xmm8
    000000bb: 	pand	%xmm0, %xmm2
    000000bf: 	psrlw	$0x8, %xmm5
    000000c4: 	pand	%xmm0, %xmm11
    000000c9: 	movdqu	-0x20(%rax), %xmm7
    000000ce: 	movdqa	%xmm4, %xmm6
    000000d2: 	psrlw	$0x8, %xmm1
    000000d7: 	psrlw	$0x8, %xmm6
    000000dc: 	pand	%xmm0, %xmm4
    000000e0: 	packuswb	%xmm1, %xmm3
    000000e4: 	movdqu	-0x10(%rdx), %xmm1
    000000e9: 	psrlw	$0x8, %xmm7
    000000ee: 	paddq	DATAat0x32580(%rip), %xmm14
    000000f7: 	paddq	DATAat0x32590(%rip), %xmm13
    00000100: 	pand	%xmm0, %xmm1
    00000104: 	packuswb	%xmm1, %xmm12
    00000109: 	movdqu	-0x10(%rdx), %xmm1
    0000010e: 	psrlw	$0x8, %xmm1
    00000113: 	packuswb	%xmm1, %xmm8
    00000118: 	movdqu	-0x30(%rax), %xmm1
    0000011d: 	pand	%xmm0, %xmm1
    00000121: 	packuswb	%xmm1, %xmm2
    00000125: 	movdqu	-0x40(%rax), %xmm1
    0000012a: 	psrlw	$0x8, %xmm1
    0000012f: 	packuswb	%xmm5, %xmm1
    00000133: 	movdqu	-0x10(%rax), %xmm5
    00000138: 	pand	%xmm0, %xmm5
    0000013c: 	packuswb	%xmm5, %xmm11
    00000141: 	movdqu	-0x10(%rax), %xmm5
    00000146: 	movdqa	%xmm11, %xmm9
    0000014b: 	pand	%xmm0, %xmm11
    00000150: 	psrlw	$0x8, %xmm5
    00000155: 	psrlw	$0x8, %xmm9
    0000015b: 	packuswb	%xmm5, %xmm7
    0000015f: 	movdqa	%xmm12, %xmm5
    00000164: 	pand	%xmm0, %xmm12
    00000169: 	psrlw	$0x8, %xmm5
    0000016e: 	packuswb	%xmm12, %xmm4
    00000173: 	packuswb	%xmm5, %xmm6
    00000177: 	movdqa	%xmm2, %xmm5
    0000017b: 	pand	%xmm0, %xmm2
    0000017f: 	psrlw	$0x8, %xmm5
    00000184: 	packuswb	%xmm11, %xmm2
    00000189: 	packuswb	%xmm9, %xmm5
    0000018e: 	movdqa	%xmm6, %xmm9
    00000193: 	movdqa	%xmm5, %xmm10
    00000198: 	punpcklbw	%xmm6, %xmm9
    0000019d: 	punpckhbw	%xmm6, %xmm6
    000001a1: 	punpcklbw	%xmm5, %xmm10
    000001a6: 	punpckhbw	%xmm5, %xmm5
    000001aa: 	pmullw	%xmm9, %xmm10
    000001af: 	pmullw	%xmm6, %xmm5
    000001b3: 	movdqa	%xmm3, %xmm9
    000001b8: 	psrlw	$0x8, %xmm9
    000001be: 	movdqa	%xmm7, %xmm6
    000001c2: 	pand	%xmm0, %xmm3
    000001c6: 	psrlw	$0x8, %xmm6
    000001cb: 	pand	%xmm0, %xmm7
    000001cf: 	pand	%xmm0, %xmm5
    000001d3: 	pand	%xmm0, %xmm10
    000001d8: 	packuswb	%xmm5, %xmm10
    000001dd: 	movdqa	%xmm8, %xmm5
    000001e2: 	pand	%xmm0, %xmm8
    000001e7: 	psrlw	$0x8, %xmm5
    000001ec: 	packuswb	%xmm8, %xmm3
    000001f1: 	packuswb	%xmm5, %xmm9
    000001f6: 	movdqa	%xmm1, %xmm5
    000001fa: 	pand	%xmm0, %xmm1
    000001fe: 	psrlw	$0x8, %xmm5
    00000203: 	packuswb	%xmm7, %xmm1
    00000207: 	packuswb	%xmm6, %xmm5
    0000020b: 	movdqa	%xmm5, %xmm6
    0000020f: 	punpcklbw	%xmm5, %xmm6
    00000213: 	punpckhbw	%xmm5, %xmm5
    00000217: 	movaps	%xmm6, -0x18(%rsp)
    0000021c: 	movdqa	%xmm9, %xmm6
    00000221: 	punpcklbw	%xmm9, %xmm6
    00000226: 	punpckhbw	%xmm9, %xmm9
    0000022b: 	pmullw	-0x18(%rsp), %xmm6
    00000231: 	pand	%xmm0, %xmm6
    00000235: 	pmullw	%xmm9, %xmm5
    0000023a: 	movdqa	%xmm4, %xmm9
    0000023f: 	punpcklbw	%xmm4, %xmm9
    00000244: 	punpckhbw	%xmm4, %xmm4
    00000248: 	pand	%xmm0, %xmm5
    0000024c: 	packuswb	%xmm5, %xmm6
    00000250: 	movdqa	%xmm2, %xmm5
    00000254: 	punpcklbw	%xmm2, %xmm5
    00000258: 	punpckhbw	%xmm2, %xmm2
    0000025c: 	paddb	%xmm10, %xmm6
    00000261: 	pmullw	%xmm9, %xmm5
    00000266: 	pmullw	%xmm4, %xmm2
    0000026a: 	movdqa	%xmm5, %xmm4
    0000026e: 	pand	%xmm0, %xmm2
    00000272: 	movdqa	%xmm3, %xmm5
    00000276: 	pand	%xmm0, %xmm4
    0000027a: 	punpcklbw	%xmm3, %xmm5
    0000027e: 	punpckhbw	%xmm3, %xmm3
    00000282: 	packuswb	%xmm2, %xmm4
    00000286: 	movdqa	%xmm1, %xmm2
    0000028a: 	punpcklbw	%xmm1, %xmm2
    0000028e: 	punpckhbw	%xmm1, %xmm1
    00000292: 	pmullw	%xmm5, %xmm2
    00000296: 	pmullw	%xmm3, %xmm1
    0000029a: 	pand	%xmm0, %xmm2
    0000029e: 	pand	%xmm0, %xmm1
    000002a2: 	packuswb	%xmm1, %xmm2
    000002a6: 	paddb	%xmm2, %xmm4
    000002aa: 	paddb	%xmm4, %xmm6
    000002ae: 	paddb	%xmm6, %xmm15
    000002b3: 	cmpq	%rcx, %r8
    000002b6: 	ja	.Ltmp165 # Offset: 694
    000002bc: 	movdqa	%xmm15, %xmm0
    000002c1: 	pxor	%xmm1, %xmm1
    000002c5: 	movq	%r11, %rax
    000002c8: 	psrldq	$0x8, %xmm13
    000002ce: 	psrldq	$0x8, %xmm0
    000002d3: 	andq	$-0x10, %rax
    000002d7: 	paddb	%xmm15, %xmm0
    000002dc: 	leaq	(,%rax,4), %rdx
    000002e4: 	psadbw	%xmm1, %xmm0
    000002e8: 	movd	%xmm0, %r8d
    000002ed: 	cmpq	%r11, %rax
    000002f0: 	je	.Ltmp166 # Offset: 752
    000002f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp167:
    00000300: 	movzbl	0x1(%rsi,%rdx), %eax
    00000305: 	mulb	0x1(%rdi,%rdx)
    00000309: 	movl	%eax, %ecx
    0000030b: 	movzbl	(%rsi,%rdx), %eax
    0000030f: 	mulb	(%rdi,%rdx)
    00000312: 	addl	%eax, %ecx
    00000314: 	movzbl	0x2(%rsi,%rdx), %eax
    00000319: 	mulb	0x2(%rdi,%rdx)
    0000031d: 	addl	%eax, %ecx
    0000031f: 	movzbl	0x3(%rsi,%rdx), %eax
    00000324: 	mulb	0x3(%rdi,%rdx)
    00000328: 	addq	$0x4, %rdx
    0000032c: 	addl	%eax, %ecx
    0000032e: 	addl	%ecx, %r8d
    00000331: 	cmpq	%rdx, %r10
    00000334: 	ja	.Ltmp167 # Offset: 820
.Ltmp170:
    00000336: 	cmpq	%rdx, %r9
    00000339: 	jbe	.Ltmp168 # Offset: 825
    0000033b: 	movzbl	(%rdi,%rdx), %eax
    0000033f: 	mulb	(%rsi,%rdx)
    00000342: 	addl	%eax, %r8d
    00000345: 	leaq	0x1(%rdx), %rax
    00000349: 	cmpq	%r9, %rax
    0000034c: 	jae	.Ltmp168 # Offset: 844
    0000034e: 	movzbl	0x1(%rsi,%rdx), %eax
    00000353: 	mulb	0x1(%rdi,%rdx)
    00000357: 	addq	$0x2, %rdx
    0000035b: 	addl	%eax, %r8d
    0000035e: 	cmpq	%r9, %rdx
    00000361: 	jae	.Ltmp168 # Offset: 865
.Ltmp171:
    00000363: 	movzbl	(%rdi,%rdx), %eax
    00000367: 	mulb	(%rsi,%rdx)
    0000036a: 	addl	%eax, %r8d
    0000036d: 	leaq	0x1(%rdx), %rax
    00000371: 	cmpq	%r9, %rax
    00000374: 	jae	.Ltmp168 # Offset: 884
    00000376: 	movzbl	0x1(%rdi,%rdx), %eax
    0000037b: 	mulb	0x1(%rsi,%rdx)
    0000037f: 	addl	%eax, %r8d
.Ltmp168:
    00000382: 	movl	%r8d, %eax
    00000385: 	retq # Offset: 901
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp164:
    00000390: 	xorl	%r8d, %r8d
    00000393: 	xorl	%edx, %edx
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp169:
    00000398: 	movzbl	0x1(%rsi,%rdx), %eax
    0000039d: 	mulb	0x1(%rdi,%rdx)
    000003a1: 	movl	%eax, %ecx
    000003a3: 	movzbl	(%rsi,%rdx), %eax
    000003a7: 	mulb	(%rdi,%rdx)
    000003aa: 	addl	%eax, %ecx
    000003ac: 	movzbl	0x2(%rsi,%rdx), %eax
    000003b1: 	mulb	0x2(%rdi,%rdx)
    000003b5: 	addl	%eax, %ecx
    000003b7: 	movzbl	0x3(%rsi,%rdx), %eax
    000003bc: 	mulb	0x3(%rdi,%rdx)
    000003c0: 	addq	$0x4, %rdx
    000003c4: 	addl	%eax, %ecx
    000003c6: 	addl	%ecx, %r8d
    000003c9: 	cmpq	%rdx, %r10
    000003cc: 	ja	.Ltmp169 # Offset: 972
    000003ce: 	jmp	.Ltmp170 # Offset: 974
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp163:
    000003d8: 	movzbl	(%rsi), %eax
    000003db: 	mulb	(%rdi)
    000003dd: 	movl	$0x2, %edx
    000003e2: 	movl	%eax, %r8d
    000003e5: 	movzbl	0x1(%rdi), %eax
    000003e9: 	mulb	0x1(%rsi)
    000003ec: 	addl	%eax, %r8d
    000003ef: 	jmp	.Ltmp171 # Offset: 1007
.Ltmp166:
    000003f4: 	movq	%xmm13, %rdx
    000003f9: 	jmp	.Ltmp170 # Offset: 1017
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product5IPKhhET0_T_S3_m" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x8d40
  Size        : 0x90e
  MaxSize     : 0x910
  Offset      : 0x8d40
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %rbx
    00000008: 	movq	%rdi, %r10
    0000000b: 	movq	%rsi, %r11
    0000000e: 	movq	%rdx, %r9
    00000011: 	subq	$0x28, %rsp
    00000015: 	subq	$0x7, %rbx
    00000019: 	je	.Ltmp172 # Offset: 25
    0000001f: 	leaq	-0x8(%rdx), %rsi
    00000023: 	cmpq	$-0x8, %rbx
    00000027: 	ja	.Ltmp173 # Offset: 39
    0000002d: 	cmpq	$0x77, %rsi
    00000031: 	jbe	.Ltmp173 # Offset: 49
    00000037: 	pxor	%xmm7, %xmm7
    0000003b: 	shrq	$0x3, %rsi
    0000003f: 	movq	%r10, %rdx
    00000042: 	movq	%r11, %rax
    00000045: 	addq	$0x1, %rsi
    00000049: 	movaps	%xmm7, -0x28(%rsp)
    0000004e: 	movdqa	DATAat0x325a0(%rip), %xmm7
    00000056: 	xorl	%ecx, %ecx
    00000058: 	movdqa	DATAat0x32530(%rip), %xmm10
    00000061: 	movq	%rsi, %rdi
    00000064: 	shrq	$0x4, %rdi
    00000068: 	movaps	%xmm7, -0x18(%rsp)
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp174:
    00000070: 	movdqa	-0x18(%rsp), %xmm7
    00000076: 	movdqu	(%rdx), %xmm6
    0000007a: 	addq	$0x1, %rcx
    0000007e: 	subq	$-0x80, %rdx
    00000082: 	movdqu	-0x70(%rdx), %xmm1
    00000087: 	movdqu	-0x60(%rdx), %xmm8
    0000008d: 	movdqa	%xmm10, %xmm9
    00000092: 	movdqa	%xmm10, %xmm15
    00000097: 	psrlw	$0x8, %xmm6
    0000009c: 	movdqu	-0x60(%rdx), %xmm5
    000000a1: 	movaps	%xmm7, -0x8(%rsp)
    000000a6: 	movdqa	DATAat0x325b0(%rip), %xmm2
    000000ae: 	pand	%xmm10, %xmm1
    000000b3: 	pand	%xmm10, %xmm8
    000000b8: 	movdqu	-0x40(%rdx), %xmm4
    000000bd: 	movdqu	-0x20(%rdx), %xmm3
    000000c2: 	paddq	%xmm7, %xmm2
    000000c6: 	psrlw	$0x8, %xmm5
    000000cb: 	movdqu	(%rax), %xmm13
    000000d0: 	movdqu	0x20(%rax), %xmm12
    000000d6: 	movaps	%xmm2, -0x18(%rsp)
    000000db: 	movdqu	-0x80(%rdx), %xmm2
    000000e0: 	psrlw	$0x8, %xmm4
    000000e5: 	subq	$-0x80, %rax
    000000e9: 	psrlw	$0x8, %xmm3
    000000ee: 	pand	%xmm10, %xmm13
    000000f3: 	pand	%xmm10, %xmm12
    000000f8: 	pand	%xmm10, %xmm2
    000000fd: 	movdqa	%xmm2, %xmm0
    00000101: 	movdqu	-0x40(%rdx), %xmm2
    00000106: 	packuswb	%xmm1, %xmm0
    0000010a: 	movdqu	-0x70(%rdx), %xmm1
    0000010f: 	pand	%xmm10, %xmm2
    00000114: 	psrlw	$0x8, %xmm1
    00000119: 	movdqa	%xmm2, %xmm7
    0000011d: 	movdqu	-0x10(%rdx), %xmm2
    00000122: 	packuswb	%xmm1, %xmm6
    00000126: 	movdqu	-0x50(%rdx), %xmm1
    0000012b: 	pand	%xmm10, %xmm2
    00000130: 	pand	%xmm10, %xmm1
    00000135: 	packuswb	%xmm1, %xmm8
    0000013a: 	movdqu	-0x50(%rdx), %xmm1
    0000013f: 	pand	%xmm8, %xmm9
    00000144: 	psrlw	$0x8, %xmm8
    0000014a: 	psrlw	$0x8, %xmm1
    0000014f: 	packuswb	%xmm1, %xmm5
    00000153: 	movdqu	-0x30(%rdx), %xmm1
    00000158: 	pand	%xmm5, %xmm15
    0000015d: 	psrlw	$0x8, %xmm5
    00000162: 	pand	%xmm10, %xmm1
    00000167: 	packuswb	%xmm1, %xmm7
    0000016b: 	movdqu	-0x30(%rdx), %xmm1
    00000170: 	psrlw	$0x8, %xmm1
    00000175: 	packuswb	%xmm1, %xmm4
    00000179: 	movdqu	-0x20(%rdx), %xmm1
    0000017e: 	pand	%xmm10, %xmm1
    00000183: 	packuswb	%xmm2, %xmm1
    00000187: 	movdqu	-0x10(%rdx), %xmm2
    0000018c: 	psrlw	$0x8, %xmm2
    00000191: 	packuswb	%xmm2, %xmm3
    00000195: 	movdqa	%xmm10, %xmm2
    0000019a: 	pand	%xmm0, %xmm2
    0000019e: 	psrlw	$0x8, %xmm0
    000001a3: 	packuswb	%xmm8, %xmm0
    000001a8: 	movdqa	%xmm10, %xmm8
    000001ad: 	packuswb	%xmm9, %xmm2
    000001b2: 	pand	%xmm7, %xmm8
    000001b7: 	psrlw	$0x8, %xmm7
    000001bc: 	movdqa	%xmm10, %xmm9
    000001c1: 	pand	%xmm1, %xmm9
    000001c6: 	psrlw	$0x8, %xmm1
    000001cb: 	movdqa	%xmm7, %xmm11
    000001d0: 	packuswb	%xmm1, %xmm11
    000001d5: 	movdqa	%xmm10, %xmm1
    000001da: 	movdqa	%xmm15, %xmm7
    000001df: 	pand	%xmm6, %xmm1
    000001e3: 	psrlw	$0x8, %xmm6
    000001e8: 	movaps	%xmm11, -0x78(%rsp)
    000001ee: 	packuswb	%xmm9, %xmm8
    000001f3: 	movdqa	%xmm1, %xmm15
    000001f8: 	packuswb	%xmm7, %xmm15
    000001fd: 	movdqa	%xmm6, %xmm7
    00000201: 	movdqu	-0x80(%rax), %xmm6
    00000206: 	packuswb	%xmm5, %xmm7
    0000020a: 	movdqa	%xmm10, %xmm5
    0000020f: 	movaps	%xmm15, -0x68(%rsp)
    00000215: 	movdqa	%xmm10, %xmm15
    0000021a: 	pand	%xmm4, %xmm5
    0000021e: 	movaps	%xmm7, -0x58(%rsp)
    00000223: 	psrlw	$0x8, %xmm4
    00000228: 	movdqa	%xmm5, %xmm7
    0000022c: 	psrlw	$0x8, %xmm6
    00000231: 	movdqa	%xmm10, %xmm5
    00000236: 	pand	%xmm3, %xmm5
    0000023a: 	psrlw	$0x8, %xmm3
    0000023f: 	packuswb	%xmm5, %xmm7
    00000243: 	movdqa	%xmm4, %xmm5
    00000247: 	packuswb	%xmm3, %xmm5
    0000024b: 	movdqu	-0x70(%rax), %xmm3
    00000250: 	movaps	%xmm5, -0x48(%rsp)
    00000255: 	movdqu	-0x60(%rax), %xmm5
    0000025a: 	pand	%xmm10, %xmm3
    0000025f: 	packuswb	%xmm3, %xmm13
    00000264: 	movdqu	-0x70(%rax), %xmm3
    00000269: 	psrlw	$0x8, %xmm5
    0000026e: 	pand	%xmm13, %xmm15
    00000273: 	psrlw	$0x8, %xmm13
    00000279: 	psrlw	$0x8, %xmm3
    0000027e: 	packuswb	%xmm3, %xmm6
    00000282: 	movdqu	-0x50(%rax), %xmm3
    00000287: 	pand	%xmm10, %xmm3
    0000028c: 	packuswb	%xmm3, %xmm12
    00000291: 	movdqu	-0x50(%rax), %xmm3
    00000296: 	movdqu	-0x40(%rax), %xmm4
    0000029b: 	movdqu	-0x20(%rax), %xmm9
    000002a1: 	movdqu	-0x10(%rax), %xmm14
    000002a7: 	psrlw	$0x8, %xmm3
    000002ac: 	pand	%xmm10, %xmm4
    000002b1: 	packuswb	%xmm3, %xmm5
    000002b5: 	movdqu	-0x30(%rax), %xmm3
    000002ba: 	movdqa	%xmm4, %xmm11
    000002bf: 	movdqu	-0x40(%rax), %xmm4
    000002c4: 	pand	%xmm10, %xmm9
    000002c9: 	psrlw	$0x8, %xmm14
    000002cf: 	pand	%xmm10, %xmm3
    000002d4: 	psrlw	$0x8, %xmm4
    000002d9: 	packuswb	%xmm3, %xmm11
    000002de: 	movdqu	-0x30(%rax), %xmm3
    000002e3: 	psrlw	$0x8, %xmm3
    000002e8: 	packuswb	%xmm3, %xmm4
    000002ec: 	movdqu	-0x10(%rax), %xmm3
    000002f1: 	pand	%xmm10, %xmm3
    000002f6: 	packuswb	%xmm3, %xmm9
    000002fb: 	movdqu	-0x20(%rax), %xmm3
    00000300: 	psrlw	$0x8, %xmm3
    00000305: 	packuswb	%xmm14, %xmm3
    0000030a: 	movdqa	%xmm10, %xmm14
    0000030f: 	pand	%xmm12, %xmm14
    00000314: 	psrlw	$0x8, %xmm12
    0000031a: 	packuswb	%xmm14, %xmm15
    0000031f: 	movdqa	%xmm13, %xmm14
    00000324: 	movdqa	%xmm10, %xmm13
    00000329: 	packuswb	%xmm12, %xmm14
    0000032e: 	movdqa	%xmm10, %xmm12
    00000333: 	pand	%xmm11, %xmm13
    00000338: 	pand	%xmm9, %xmm12
    0000033d: 	psrlw	$0x8, %xmm11
    00000343: 	movaps	%xmm14, -0x38(%rsp)
    00000349: 	packuswb	%xmm12, %xmm13
    0000034e: 	psrlw	$0x8, %xmm9
    00000354: 	movdqa	%xmm11, %xmm12
    00000359: 	movdqa	%xmm10, %xmm11
    0000035e: 	packuswb	%xmm9, %xmm12
    00000363: 	movdqa	%xmm10, %xmm9
    00000368: 	pand	%xmm6, %xmm11
    0000036d: 	pand	%xmm5, %xmm9
    00000372: 	movdqa	%xmm12, %xmm1
    00000377: 	movdqa	%xmm11, %xmm14
    0000037c: 	psrlw	$0x8, %xmm6
    00000381: 	movaps	%xmm1, 0x8(%rsp)
    00000386: 	packuswb	%xmm9, %xmm14
    0000038b: 	psrlw	$0x8, %xmm5
    00000390: 	movdqa	%xmm6, %xmm9
    00000395: 	movdqa	%xmm10, %xmm6
    0000039a: 	packuswb	%xmm5, %xmm9
    0000039f: 	movdqa	%xmm10, %xmm5
    000003a4: 	pand	%xmm4, %xmm6
    000003a8: 	psrlw	$0x8, %xmm4
    000003ad: 	pand	%xmm3, %xmm5
    000003b1: 	movaps	%xmm9, 0x18(%rsp)
    000003b7: 	movdqa	%xmm6, %xmm12
    000003bc: 	psrlw	$0x8, %xmm3
    000003c1: 	movdqa	%xmm4, %xmm6
    000003c5: 	packuswb	%xmm3, %xmm6
    000003c9: 	movdqa	-0x78(%rsp), %xmm3
    000003cf: 	movdqa	%xmm10, %xmm4
    000003d4: 	packuswb	%xmm5, %xmm12
    000003d9: 	pand	%xmm0, %xmm4
    000003dd: 	movdqa	%xmm1, %xmm5
    000003e1: 	movdqa	%xmm6, %xmm11
    000003e6: 	pand	%xmm10, %xmm3
    000003eb: 	psrlw	$0x8, %xmm0
    000003f0: 	pand	%xmm10, %xmm5
    000003f5: 	packuswb	%xmm3, %xmm4
    000003f9: 	movdqa	-0x38(%rsp), %xmm3
    000003ff: 	pand	%xmm10, %xmm3
    00000404: 	packuswb	%xmm5, %xmm3
    00000408: 	movdqa	%xmm4, %xmm5
    0000040c: 	movdqa	%xmm3, %xmm6
    00000410: 	punpcklbw	%xmm4, %xmm5
    00000414: 	punpckhbw	%xmm4, %xmm4
    00000418: 	punpcklbw	%xmm3, %xmm6
    0000041c: 	punpckhbw	%xmm3, %xmm3
    00000420: 	pmullw	%xmm6, %xmm5
    00000424: 	pmullw	%xmm4, %xmm3
    00000428: 	movdqa	-0x48(%rsp), %xmm4
    0000042e: 	movdqa	%xmm10, %xmm6
    00000433: 	pand	%xmm11, %xmm6
    00000438: 	pand	%xmm10, %xmm4
    0000043d: 	pand	%xmm10, %xmm3
    00000442: 	pand	%xmm10, %xmm5
    00000447: 	packuswb	%xmm3, %xmm5
    0000044b: 	movdqa	-0x58(%rsp), %xmm3
    00000451: 	pand	%xmm10, %xmm3
    00000456: 	packuswb	%xmm4, %xmm3
    0000045a: 	movdqa	%xmm9, %xmm4
    0000045f: 	pand	%xmm10, %xmm4
    00000464: 	movdqa	%xmm3, %xmm9
    00000469: 	packuswb	%xmm6, %xmm4
    0000046d: 	punpcklbw	%xmm3, %xmm9
    00000472: 	punpckhbw	%xmm3, %xmm3
    00000476: 	movdqa	%xmm4, %xmm6
    0000047a: 	punpcklbw	%xmm4, %xmm6
    0000047e: 	punpckhbw	%xmm4, %xmm4
    00000482: 	pmullw	%xmm9, %xmm6
    00000487: 	pmullw	%xmm4, %xmm3
    0000048b: 	movdqa	%xmm10, %xmm4
    00000490: 	pand	%xmm13, %xmm4
    00000495: 	psrlw	$0x8, %xmm13
    0000049b: 	pand	%xmm10, %xmm3
    000004a0: 	pand	%xmm10, %xmm6
    000004a5: 	packuswb	%xmm3, %xmm6
    000004a9: 	movdqa	%xmm10, %xmm3
    000004ae: 	paddb	%xmm6, %xmm5
    000004b2: 	movdqa	%xmm10, %xmm6
    000004b7: 	pand	%xmm8, %xmm3
    000004bc: 	pand	%xmm2, %xmm6
    000004c0: 	psrlw	$0x8, %xmm8
    000004c6: 	packuswb	%xmm3, %xmm6
    000004ca: 	psrlw	$0x8, %xmm2
    000004cf: 	movdqa	%xmm10, %xmm3
    000004d4: 	pand	%xmm15, %xmm3
    000004d9: 	psrlw	$0x8, %xmm15
    000004df: 	packuswb	%xmm8, %xmm2
    000004e4: 	packuswb	%xmm4, %xmm3
    000004e8: 	packuswb	%xmm13, %xmm15
    000004ed: 	movdqa	%xmm3, %xmm4
    000004f1: 	punpcklbw	%xmm3, %xmm4
    000004f5: 	punpckhbw	%xmm3, %xmm3
    000004f9: 	movdqa	%xmm4, %xmm9
    000004fe: 	movdqa	%xmm6, %xmm4
    00000502: 	punpcklbw	%xmm6, %xmm4
    00000506: 	punpckhbw	%xmm6, %xmm6
    0000050a: 	pmullw	%xmm9, %xmm4
    0000050f: 	pmullw	%xmm6, %xmm3
    00000513: 	movdqa	%xmm10, %xmm6
    00000518: 	pand	%xmm7, %xmm6
    0000051c: 	psrlw	$0x8, %xmm7
    00000521: 	movdqa	%xmm10, %xmm9
    00000526: 	pand	%xmm12, %xmm9
    0000052b: 	psrlw	$0x8, %xmm12
    00000531: 	pand	%xmm10, %xmm3
    00000536: 	pand	%xmm10, %xmm4
    0000053b: 	packuswb	%xmm3, %xmm4
    0000053f: 	movdqa	-0x68(%rsp), %xmm3
    00000545: 	pand	%xmm10, %xmm3
    0000054a: 	packuswb	%xmm6, %xmm3
    0000054e: 	movdqa	%xmm10, %xmm6
    00000553: 	pand	%xmm14, %xmm6
    00000558: 	psrlw	$0x8, %xmm14
    0000055e: 	movdqa	%xmm3, %xmm1
    00000562: 	packuswb	%xmm9, %xmm6
    00000567: 	punpcklbw	%xmm3, %xmm1
    0000056b: 	punpckhbw	%xmm3, %xmm3
    0000056f: 	movdqa	%xmm6, %xmm9
    00000574: 	packuswb	%xmm12, %xmm14
    00000579: 	punpcklbw	%xmm6, %xmm9
    0000057e: 	punpckhbw	%xmm6, %xmm6
    00000582: 	pmullw	%xmm1, %xmm9
    00000587: 	pmullw	%xmm6, %xmm3
    0000058b: 	movdqa	-0x68(%rsp), %xmm1
    00000591: 	psrlw	$0x8, %xmm1
    00000596: 	packuswb	%xmm7, %xmm1
    0000059a: 	pand	%xmm10, %xmm3
    0000059f: 	pand	%xmm10, %xmm9
    000005a4: 	packuswb	%xmm3, %xmm9
    000005a9: 	movdqa	%xmm15, %xmm3
    000005ae: 	paddb	%xmm9, %xmm4
    000005b3: 	punpcklbw	%xmm15, %xmm3
    000005b8: 	punpckhbw	%xmm15, %xmm15
    000005bd: 	paddb	%xmm5, %xmm4
    000005c1: 	movdqa	%xmm2, %xmm5
    000005c5: 	punpcklbw	%xmm2, %xmm5
    000005c9: 	punpckhbw	%xmm2, %xmm2
    000005cd: 	pmullw	%xmm5, %xmm3
    000005d1: 	pmullw	%xmm15, %xmm2
    000005d6: 	movdqa	%xmm1, %xmm5
    000005da: 	punpcklbw	%xmm1, %xmm5
    000005de: 	punpckhbw	%xmm1, %xmm1
    000005e2: 	pand	%xmm10, %xmm2
    000005e7: 	pand	%xmm10, %xmm3
    000005ec: 	packuswb	%xmm2, %xmm3
    000005f0: 	movdqa	%xmm14, %xmm2
    000005f5: 	punpcklbw	%xmm14, %xmm2
    000005fa: 	punpckhbw	%xmm14, %xmm14
    000005ff: 	pmullw	%xmm5, %xmm2
    00000603: 	pmullw	%xmm14, %xmm1
    00000608: 	pand	%xmm10, %xmm2
    0000060d: 	pand	%xmm10, %xmm1
    00000612: 	packuswb	%xmm1, %xmm2
    00000616: 	movdqa	-0x78(%rsp), %xmm1
    0000061c: 	paddb	%xmm3, %xmm2
    00000620: 	movdqa	0x8(%rsp), %xmm3
    00000626: 	psrlw	$0x8, %xmm1
    0000062b: 	packuswb	%xmm1, %xmm0
    0000062f: 	movdqa	-0x38(%rsp), %xmm1
    00000635: 	psrlw	$0x8, %xmm3
    0000063a: 	movdqa	%xmm0, %xmm6
    0000063e: 	movdqa	%xmm0, %xmm5
    00000642: 	psrlw	$0x8, %xmm1
    00000647: 	punpcklbw	%xmm0, %xmm6
    0000064b: 	punpckhbw	%xmm0, %xmm5
    0000064f: 	packuswb	%xmm3, %xmm1
    00000653: 	movdqa	%xmm1, %xmm3
    00000657: 	punpcklbw	%xmm1, %xmm3
    0000065b: 	punpckhbw	%xmm1, %xmm1
    0000065f: 	movdqa	%xmm3, %xmm0
    00000663: 	pmullw	%xmm5, %xmm1
    00000667: 	movdqa	%xmm11, %xmm3
    0000066c: 	pmullw	%xmm6, %xmm0
    00000670: 	psrlw	$0x8, %xmm3
    00000675: 	pand	%xmm10, %xmm1
    0000067a: 	pand	%xmm10, %xmm0
    0000067f: 	packuswb	%xmm1, %xmm0
    00000683: 	movdqa	-0x58(%rsp), %xmm1
    00000689: 	paddb	%xmm0, %xmm2
    0000068d: 	movdqa	-0x48(%rsp), %xmm0
    00000693: 	psrlw	$0x8, %xmm1
    00000698: 	paddb	%xmm4, %xmm2
    0000069c: 	psrlw	$0x8, %xmm0
    000006a1: 	packuswb	%xmm0, %xmm1
    000006a5: 	movdqa	0x18(%rsp), %xmm0
    000006ab: 	movdqa	%xmm1, %xmm4
    000006af: 	psrlw	$0x8, %xmm0
    000006b4: 	punpcklbw	%xmm1, %xmm4
    000006b8: 	punpckhbw	%xmm1, %xmm1
    000006bc: 	packuswb	%xmm3, %xmm0
    000006c0: 	movdqa	%xmm0, %xmm3
    000006c4: 	punpcklbw	%xmm0, %xmm3
    000006c8: 	punpckhbw	%xmm0, %xmm0
    000006cc: 	pmullw	%xmm4, %xmm3
    000006d0: 	pmullw	%xmm1, %xmm0
    000006d4: 	movdqa	%xmm3, %xmm1
    000006d8: 	pand	%xmm10, %xmm0
    000006dd: 	pand	%xmm10, %xmm1
    000006e2: 	packuswb	%xmm0, %xmm1
    000006e6: 	movdqa	-0x28(%rsp), %xmm0
    000006ec: 	paddb	%xmm1, %xmm0
    000006f0: 	paddb	%xmm0, %xmm2
    000006f4: 	movdqa	-0x8(%rsp), %xmm0
    000006fa: 	paddq	DATAat0x325c0(%rip), %xmm0
    00000702: 	movaps	%xmm2, -0x28(%rsp)
    00000707: 	cmpq	%rcx, %rdi
    0000070a: 	ja	.Ltmp174 # Offset: 1802
    00000710: 	movdqa	%xmm2, %xmm1
    00000714: 	movq	%rsi, %rax
    00000717: 	psrldq	$0x8, %xmm0
    0000071c: 	psrldq	$0x8, %xmm1
    00000721: 	andq	$-0x10, %rax
    00000725: 	paddb	%xmm2, %xmm1
    00000729: 	pxor	%xmm2, %xmm2
    0000072d: 	leaq	(,%rax,8), %rdi
    00000735: 	psadbw	%xmm2, %xmm1
    00000739: 	movd	%xmm1, %r8d
    0000073e: 	cmpq	%rsi, %rax
    00000741: 	je	.Ltmp175 # Offset: 1857
    00000747: 	leaq	(%r10,%rdi), %rsi
    0000074b: 	leaq	(%r11,%rdi), %rcx
    0000074f: 	nop # Size: 1
.Ltmp176:
    00000750: 	movzbl	0x1(%rcx), %eax
    00000754: 	mulb	0x1(%rsi)
    00000757: 	addq	$0x8, %rdi
    0000075b: 	addq	$0x8, %rsi
    0000075f: 	addq	$0x8, %rcx
    00000763: 	movl	%eax, %edx
    00000765: 	movzbl	-0x8(%rcx), %eax
    00000769: 	mulb	-0x8(%rsi)
    0000076c: 	addl	%eax, %edx
    0000076e: 	movzbl	-0x6(%rcx), %eax
    00000772: 	mulb	-0x6(%rsi)
    00000775: 	addl	%eax, %edx
    00000777: 	movzbl	-0x5(%rcx), %eax
    0000077b: 	mulb	-0x5(%rsi)
    0000077e: 	addl	%eax, %edx
    00000780: 	movzbl	-0x4(%rcx), %eax
    00000784: 	mulb	-0x4(%rsi)
    00000787: 	addl	%eax, %edx
    00000789: 	movzbl	-0x3(%rcx), %eax
    0000078d: 	mulb	-0x3(%rsi)
    00000790: 	addl	%eax, %edx
    00000792: 	movzbl	-0x2(%rcx), %eax
    00000796: 	mulb	-0x2(%rsi)
    00000799: 	addl	%eax, %edx
    0000079b: 	movzbl	-0x1(%rcx), %eax
    0000079f: 	mulb	-0x1(%rsi)
    000007a2: 	addl	%eax, %edx
    000007a4: 	addl	%edx, %r8d
    000007a7: 	cmpq	%rdi, %rbx
    000007aa: 	ja	.Ltmp176 # Offset: 1962
.Ltmp179:
    000007ac: 	cmpq	%rdi, %r9
    000007af: 	jbe	.Ltmp177 # Offset: 1967
    000007b5: 	movzbl	(%r10,%rdi), %eax
    000007ba: 	mulb	(%r11,%rdi)
    000007be: 	addl	%eax, %r8d
    000007c1: 	leaq	0x1(%rdi), %rax
    000007c5: 	cmpq	%r9, %rax
    000007c8: 	jae	.Ltmp177 # Offset: 1992
    000007ce: 	movzbl	0x1(%r11,%rdi), %eax
    000007d4: 	mulb	0x1(%r10,%rdi)
    000007d9: 	addq	$0x2, %rdi
    000007dd: 	addl	%eax, %r8d
    000007e0: 	cmpq	%r9, %rdi
    000007e3: 	jae	.Ltmp177 # Offset: 2019
.Ltmp180:
    000007e5: 	movzbl	(%r10,%rdi), %eax
    000007ea: 	mulb	(%r11,%rdi)
    000007ee: 	addl	%eax, %r8d
    000007f1: 	leaq	0x1(%rdi), %rax
    000007f5: 	cmpq	%r9, %rax
    000007f8: 	jae	.Ltmp177 # Offset: 2040
    000007fa: 	movzbl	0x1(%r11,%rdi), %eax
    00000800: 	mulb	0x1(%r10,%rdi)
    00000805: 	addl	%eax, %r8d
    00000808: 	leaq	0x2(%rdi), %rax
    0000080c: 	cmpq	%r9, %rax
    0000080f: 	jae	.Ltmp177 # Offset: 2063
    00000811: 	movzbl	0x2(%r10,%rdi), %eax
    00000817: 	mulb	0x2(%r11,%rdi)
    0000081c: 	addl	%eax, %r8d
    0000081f: 	leaq	0x3(%rdi), %rax
    00000823: 	cmpq	%r9, %rax
    00000826: 	jae	.Ltmp177 # Offset: 2086
    00000828: 	movzbl	0x3(%r11,%rdi), %eax
    0000082e: 	mulb	0x3(%r10,%rdi)
    00000833: 	addl	%eax, %r8d
    00000836: 	leaq	0x4(%rdi), %rax
    0000083a: 	cmpq	%rax, %r9
    0000083d: 	jbe	.Ltmp177 # Offset: 2109
    0000083f: 	movzbl	0x4(%r10,%rdi), %eax
    00000845: 	mulb	0x4(%r11,%rdi)
    0000084a: 	addl	%eax, %r8d
    0000084d: 	leaq	0x5(%rdi), %rax
    00000851: 	cmpq	%rax, %r9
    00000854: 	jbe	.Ltmp177 # Offset: 2132
    00000856: 	movzbl	0x5(%r10,%rdi), %eax
    0000085c: 	mulb	0x5(%r11,%rdi)
    00000861: 	addl	%eax, %r8d
.Ltmp177:
    00000864: 	addq	$0x28, %rsp
    00000868: 	movl	%r8d, %eax
    0000086b: 	popq	%rbx
    0000086c: 	retq # Offset: 2156
    0000086d: 	nopl	(%rax) # Size: 3
.Ltmp173:
    00000870: 	movq	%r10, %rsi
    00000873: 	movq	%r11, %rcx
    00000876: 	xorl	%r8d, %r8d
    00000879: 	xorl	%edi, %edi
    0000087b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp178:
    00000880: 	movzbl	0x1(%rcx), %eax
    00000884: 	mulb	0x1(%rsi)
    00000887: 	addq	$0x8, %rdi
    0000088b: 	addq	$0x8, %rsi
    0000088f: 	addq	$0x8, %rcx
    00000893: 	movl	%eax, %edx
    00000895: 	movzbl	-0x8(%rcx), %eax
    00000899: 	mulb	-0x8(%rsi)
    0000089c: 	addl	%eax, %edx
    0000089e: 	movzbl	-0x6(%rcx), %eax
    000008a2: 	mulb	-0x6(%rsi)
    000008a5: 	addl	%eax, %edx
    000008a7: 	movzbl	-0x5(%rcx), %eax
    000008ab: 	mulb	-0x5(%rsi)
    000008ae: 	addl	%eax, %edx
    000008b0: 	movzbl	-0x4(%rcx), %eax
    000008b4: 	mulb	-0x4(%rsi)
    000008b7: 	addl	%eax, %edx
    000008b9: 	movzbl	-0x3(%rcx), %eax
    000008bd: 	mulb	-0x3(%rsi)
    000008c0: 	addl	%eax, %edx
    000008c2: 	movzbl	-0x2(%rcx), %eax
    000008c6: 	mulb	-0x2(%rsi)
    000008c9: 	addl	%eax, %edx
    000008cb: 	movzbl	-0x1(%rcx), %eax
    000008cf: 	mulb	-0x1(%rsi)
    000008d2: 	addl	%eax, %edx
    000008d4: 	addl	%edx, %r8d
    000008d7: 	cmpq	%rdi, %rbx
    000008da: 	ja	.Ltmp178 # Offset: 2266
    000008dc: 	jmp	.Ltmp179 # Offset: 2268
    000008e1: 	nopl	(%rax) # Size: 7
.Ltmp172:
    000008e8: 	movzbl	0x1(%rsi), %eax
    000008ec: 	mulb	0x1(%rdi)
    000008ef: 	movl	%eax, %r8d
    000008f2: 	movzbl	(%rdi), %eax
    000008f5: 	mulb	(%rsi)
    000008f7: 	movl	$0x2, %edi
    000008fc: 	addl	%eax, %r8d
    000008ff: 	jmp	.Ltmp180 # Offset: 2303
.Ltmp175:
    00000904: 	movq	%xmm0, %rdi
    00000909: 	jmp	.Ltmp179 # Offset: 2313
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product6IPKhhET0_T_S3_m" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x9650
  Size        : 0x12aa
  MaxSize     : 0x12b0
  Offset      : 0x9650
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %rbx
    00000008: 	movq	%rdi, %r10
    0000000b: 	movq	%rsi, %r11
    0000000e: 	movq	%rdx, %r9
    00000011: 	subq	$0xf8, %rsp
    00000018: 	subq	$0xf, %rbx
    0000001c: 	je	.Ltmp181 # Offset: 28
    00000022: 	leaq	-0x10(%rdx), %rdi
    00000026: 	cmpq	$-0x10, %rbx
    0000002a: 	ja	.Ltmp182 # Offset: 42
    00000030: 	cmpq	$0xff, %rdi
    00000037: 	jbe	.Ltmp182 # Offset: 55
    0000003d: 	pxor	%xmm7, %xmm7
    00000041: 	shrq	$0x8, %rdi
    00000045: 	movq	%r10, %rdx
    00000048: 	movq	%rsi, %rax
    0000004b: 	movdqa	DATAat0x32530(%rip), %xmm15
    00000054: 	xorl	%ecx, %ecx
    00000056: 	movaps	%xmm7, 0x38(%rsp)
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp183:
    00000060: 	movdqu	(%rdx), %xmm12
    00000065: 	movdqu	0x10(%rdx), %xmm0
    0000006a: 	addq	$0x1, %rcx
    0000006e: 	addq	$0x100, %rdx
    00000075: 	movdqu	-0x100(%rdx), %xmm4
    0000007d: 	movdqu	-0x80(%rdx), %xmm8
    00000083: 	addq	$0x100, %rax
    00000089: 	pand	%xmm15, %xmm0
    0000008e: 	pand	%xmm15, %xmm12
    00000093: 	movdqu	-0xe0(%rdx), %xmm11
    0000009c: 	movdqu	-0xe0(%rdx), %xmm3
    000000a4: 	packuswb	%xmm0, %xmm12
    000000a9: 	movdqu	-0xf0(%rdx), %xmm0
    000000b1: 	psrlw	$0x8, %xmm4
    000000b6: 	movdqu	-0xc0(%rdx), %xmm10
    000000bf: 	pand	%xmm15, %xmm11
    000000c4: 	psrlw	$0x8, %xmm3
    000000c9: 	movdqu	-0xc0(%rdx), %xmm2
    000000d1: 	movdqu	-0xa0(%rdx), %xmm9
    000000da: 	psrlw	$0x8, %xmm0
    000000df: 	pand	%xmm15, %xmm10
    000000e4: 	pand	%xmm15, %xmm8
    000000e9: 	movdqu	-0xa0(%rdx), %xmm1
    000000f1: 	packuswb	%xmm0, %xmm4
    000000f5: 	psrlw	$0x8, %xmm2
    000000fa: 	pand	%xmm15, %xmm9
    000000ff: 	movdqu	-0xd0(%rdx), %xmm0
    00000107: 	psrlw	$0x8, %xmm1
    0000010c: 	movdqu	-0x70(%rdx), %xmm5
    00000111: 	movdqu	-0x60(%rdx), %xmm6
    00000116: 	pand	%xmm15, %xmm0
    0000011b: 	movdqu	-0x40(%rdx), %xmm13
    00000121: 	psrlw	$0x8, %xmm5
    00000126: 	psrlw	$0x8, %xmm6
    0000012b: 	packuswb	%xmm0, %xmm11
    00000130: 	movdqu	-0xd0(%rdx), %xmm0
    00000138: 	movdqa	%xmm6, %xmm14
    0000013d: 	movdqu	-0x40(%rdx), %xmm6
    00000142: 	psrlw	$0x8, %xmm13
    00000148: 	psrlw	$0x8, %xmm0
    0000014d: 	packuswb	%xmm0, %xmm3
    00000151: 	movdqu	-0xb0(%rdx), %xmm0
    00000159: 	pand	%xmm15, %xmm6
    0000015e: 	pand	%xmm15, %xmm0
    00000163: 	packuswb	%xmm0, %xmm10
    00000168: 	movdqu	-0xb0(%rdx), %xmm0
    00000170: 	psrlw	$0x8, %xmm0
    00000175: 	packuswb	%xmm0, %xmm2
    00000179: 	movdqu	-0x90(%rdx), %xmm0
    00000181: 	pand	%xmm15, %xmm0
    00000186: 	packuswb	%xmm0, %xmm9
    0000018b: 	movdqu	-0x90(%rdx), %xmm0
    00000193: 	psrlw	$0x8, %xmm0
    00000198: 	packuswb	%xmm0, %xmm1
    0000019c: 	movdqu	-0x70(%rdx), %xmm0
    000001a1: 	pand	%xmm15, %xmm0
    000001a6: 	packuswb	%xmm0, %xmm8
    000001ab: 	movdqu	-0x80(%rdx), %xmm0
    000001b0: 	psrlw	$0x8, %xmm0
    000001b5: 	movdqa	%xmm0, %xmm7
    000001b9: 	packuswb	%xmm5, %xmm7
    000001bd: 	movdqu	-0x50(%rdx), %xmm5
    000001c2: 	movaps	%xmm7, -0x8(%rsp)
    000001c7: 	movdqu	-0x60(%rdx), %xmm7
    000001cc: 	pand	%xmm15, %xmm5
    000001d1: 	pand	%xmm15, %xmm7
    000001d6: 	packuswb	%xmm5, %xmm7
    000001da: 	movdqu	-0x50(%rdx), %xmm5
    000001df: 	psrlw	$0x8, %xmm5
    000001e4: 	packuswb	%xmm5, %xmm14
    000001e9: 	movdqu	-0x30(%rdx), %xmm5
    000001ee: 	movaps	%xmm14, 0x8(%rsp)
    000001f4: 	movdqa	%xmm13, %xmm14
    000001f9: 	pand	%xmm15, %xmm5
    000001fe: 	packuswb	%xmm5, %xmm6
    00000202: 	movdqu	-0x30(%rdx), %xmm5
    00000207: 	psrlw	$0x8, %xmm5
    0000020c: 	packuswb	%xmm5, %xmm14
    00000211: 	movdqu	-0x20(%rdx), %xmm5
    00000216: 	movaps	%xmm14, 0x18(%rsp)
    0000021c: 	movdqu	-0x10(%rdx), %xmm13
    00000222: 	movdqu	-0x20(%rdx), %xmm0
    00000227: 	pand	%xmm15, %xmm5
    0000022c: 	pand	%xmm15, %xmm13
    00000231: 	psrlw	$0x8, %xmm0
    00000236: 	packuswb	%xmm13, %xmm5
    0000023b: 	movdqu	-0x10(%rdx), %xmm13
    00000241: 	movdqa	%xmm0, %xmm14
    00000246: 	movdqa	%xmm15, %xmm0
    0000024b: 	pand	%xmm11, %xmm0
    00000250: 	psrlw	$0x8, %xmm11
    00000256: 	psrlw	$0x8, %xmm13
    0000025c: 	movaps	%xmm0, -0x78(%rsp)
    00000261: 	packuswb	%xmm13, %xmm14
    00000266: 	movdqa	%xmm15, %xmm13
    0000026b: 	pand	%xmm12, %xmm13
    00000270: 	psrlw	$0x8, %xmm12
    00000276: 	movdqa	%xmm13, %xmm0
    0000027b: 	packuswb	-0x78(%rsp), %xmm0
    00000281: 	movaps	%xmm0, 0x48(%rsp)
    00000286: 	movdqa	%xmm12, %xmm0
    0000028b: 	movdqa	%xmm15, %xmm12
    00000290: 	packuswb	%xmm11, %xmm0
    00000295: 	pand	%xmm10, %xmm12
    0000029a: 	movdqa	%xmm15, %xmm11
    0000029f: 	pand	%xmm9, %xmm11
    000002a4: 	movdqa	%xmm12, %xmm13
    000002a9: 	movaps	%xmm0, -0x78(%rsp)
    000002ae: 	psrlw	$0x8, %xmm10
    000002b4: 	packuswb	%xmm11, %xmm13
    000002b9: 	psrlw	$0x8, %xmm9
    000002bf: 	movdqa	%xmm10, %xmm11
    000002c4: 	movdqa	%xmm15, %xmm10
    000002c9: 	movaps	%xmm13, 0x58(%rsp)
    000002cf: 	packuswb	%xmm9, %xmm11
    000002d4: 	pand	%xmm8, %xmm10
    000002d9: 	movdqa	%xmm15, %xmm9
    000002de: 	psrlw	$0x8, %xmm8
    000002e4: 	pand	%xmm7, %xmm9
    000002e9: 	movdqa	%xmm10, %xmm12
    000002ee: 	movaps	%xmm11, -0x68(%rsp)
    000002f4: 	psrlw	$0x8, %xmm7
    000002f9: 	movdqa	%xmm8, %xmm10
    000002fe: 	movdqa	%xmm15, %xmm8
    00000303: 	packuswb	%xmm7, %xmm10
    00000308: 	pand	%xmm6, %xmm8
    0000030d: 	movdqa	%xmm15, %xmm7
    00000312: 	psrlw	$0x8, %xmm6
    00000317: 	pand	%xmm5, %xmm7
    0000031b: 	movdqa	%xmm8, %xmm11
    00000320: 	movaps	%xmm10, -0x58(%rsp)
    00000326: 	psrlw	$0x8, %xmm5
    0000032b: 	movdqa	%xmm6, %xmm8
    00000330: 	movdqa	%xmm15, %xmm6
    00000335: 	packuswb	%xmm5, %xmm8
    0000033a: 	pand	%xmm4, %xmm6
    0000033e: 	movdqa	%xmm15, %xmm5
    00000343: 	psrlw	$0x8, %xmm4
    00000348: 	pand	%xmm3, %xmm5
    0000034c: 	movdqa	%xmm6, %xmm10
    00000351: 	movaps	%xmm8, -0x48(%rsp)
    00000357: 	psrlw	$0x8, %xmm3
    0000035c: 	movdqa	%xmm4, %xmm6
    00000360: 	movdqa	%xmm15, %xmm4
    00000365: 	packuswb	%xmm3, %xmm6
    00000369: 	pand	%xmm2, %xmm4
    0000036d: 	movdqa	%xmm15, %xmm3
    00000372: 	psrlw	$0x8, %xmm2
    00000377: 	packuswb	%xmm5, %xmm10
    0000037c: 	pand	%xmm1, %xmm3
    00000380: 	movaps	%xmm6, -0x38(%rsp)
    00000385: 	movdqa	%xmm4, %xmm5
    00000389: 	psrlw	$0x8, %xmm1
    0000038e: 	movdqa	%xmm2, %xmm4
    00000392: 	movaps	%xmm10, 0x88(%rsp)
    0000039b: 	packuswb	%xmm1, %xmm4
    0000039f: 	packuswb	%xmm7, %xmm11
    000003a4: 	movdqa	0x8(%rsp), %xmm7
    000003aa: 	movdqa	%xmm15, %xmm2
    000003af: 	movaps	%xmm4, -0x18(%rsp)
    000003b4: 	movdqa	-0x8(%rsp), %xmm4
    000003ba: 	packuswb	%xmm3, %xmm5
    000003be: 	movdqa	%xmm15, %xmm6
    000003c3: 	movdqa	%xmm7, %xmm1
    000003c7: 	pand	%xmm14, %xmm6
    000003cc: 	packuswb	%xmm9, %xmm12
    000003d1: 	movaps	%xmm11, 0x78(%rsp)
    000003d7: 	pand	%xmm4, %xmm2
    000003db: 	pand	%xmm15, %xmm1
    000003e0: 	movdqa	%xmm4, %xmm0
    000003e4: 	movaps	%xmm12, 0x68(%rsp)
    000003ea: 	movdqa	%xmm2, %xmm3
    000003ee: 	psrlw	$0x8, %xmm0
    000003f3: 	movaps	%xmm5, -0x28(%rsp)
    000003f8: 	packuswb	%xmm1, %xmm3
    000003fc: 	movdqa	%xmm7, %xmm1
    00000400: 	movdqa	0x18(%rsp), %xmm7
    00000406: 	movdqa	%xmm0, %xmm2
    0000040a: 	psrlw	$0x8, %xmm1
    0000040f: 	movdqa	%xmm6, %xmm0
    00000413: 	movaps	%xmm3, -0x8(%rsp)
    00000418: 	packuswb	%xmm1, %xmm2
    0000041c: 	movdqa	%xmm7, %xmm1
    00000420: 	pand	%xmm15, %xmm1
    00000425: 	psrlw	$0x8, %xmm7
    0000042a: 	movaps	%xmm2, 0x8(%rsp)
    0000042f: 	movdqa	%xmm1, %xmm6
    00000433: 	movdqa	%xmm14, %xmm1
    00000438: 	psrlw	$0x8, %xmm1
    0000043d: 	packuswb	%xmm0, %xmm6
    00000441: 	packuswb	%xmm1, %xmm7
    00000445: 	movdqu	-0x100(%rax), %xmm1
    0000044d: 	movaps	%xmm6, 0x18(%rsp)
    00000452: 	movaps	%xmm7, 0x28(%rsp)
    00000457: 	movdqu	-0xf0(%rax), %xmm7
    0000045f: 	pand	%xmm15, %xmm1
    00000464: 	movdqa	%xmm1, %xmm13
    00000469: 	movdqu	-0xf0(%rax), %xmm1
    00000471: 	psrlw	$0x8, %xmm7
    00000476: 	movdqa	%xmm7, %xmm0
    0000047a: 	pand	%xmm15, %xmm1
    0000047f: 	packuswb	%xmm1, %xmm13
    00000484: 	movdqu	-0x100(%rax), %xmm1
    0000048c: 	psrlw	$0x8, %xmm1
    00000491: 	movdqa	%xmm1, %xmm7
    00000495: 	movdqu	-0xe0(%rax), %xmm1
    0000049d: 	packuswb	%xmm0, %xmm7
    000004a1: 	pand	%xmm15, %xmm1
    000004a6: 	movaps	%xmm7, 0x98(%rsp)
    000004ae: 	movdqa	%xmm1, %xmm12
    000004b3: 	movdqu	-0xd0(%rax), %xmm1
    000004bb: 	pand	%xmm15, %xmm1
    000004c0: 	packuswb	%xmm1, %xmm12
    000004c5: 	movdqu	-0xe0(%rax), %xmm1
    000004cd: 	movdqu	-0xd0(%rax), %xmm4
    000004d5: 	movdqu	-0xa0(%rax), %xmm5
    000004dd: 	movdqu	-0x40(%rax), %xmm2
    000004e2: 	psrlw	$0x8, %xmm1
    000004e7: 	psrlw	$0x8, %xmm4
    000004ec: 	movdqu	-0xb0(%rax), %xmm3
    000004f4: 	movdqa	%xmm4, %xmm0
    000004f8: 	movdqa	%xmm1, %xmm4
    000004fc: 	pand	%xmm15, %xmm2
    00000501: 	movdqu	-0xc0(%rax), %xmm1
    00000509: 	psrlw	$0x8, %xmm5
    0000050e: 	psrlw	$0x8, %xmm3
    00000513: 	packuswb	%xmm0, %xmm4
    00000517: 	pand	%xmm15, %xmm1
    0000051c: 	movaps	%xmm4, 0xa8(%rsp)
    00000524: 	movdqa	%xmm1, %xmm11
    00000529: 	movdqu	-0xb0(%rax), %xmm1
    00000531: 	pand	%xmm15, %xmm1
    00000536: 	packuswb	%xmm1, %xmm11
    0000053b: 	movdqu	-0xc0(%rax), %xmm1
    00000543: 	psrlw	$0x8, %xmm1
    00000548: 	movdqa	%xmm1, %xmm14
    0000054d: 	movdqu	-0xa0(%rax), %xmm1
    00000555: 	packuswb	%xmm3, %xmm14
    0000055a: 	movdqu	-0x30(%rax), %xmm3
    0000055f: 	pand	%xmm15, %xmm1
    00000564: 	movdqa	%xmm1, %xmm10
    00000569: 	movdqu	-0x90(%rax), %xmm1
    00000571: 	psrlw	$0x8, %xmm3
    00000576: 	pand	%xmm15, %xmm1
    0000057b: 	packuswb	%xmm1, %xmm10
    00000580: 	movdqu	-0x90(%rax), %xmm1
    00000588: 	psrlw	$0x8, %xmm1
    0000058d: 	packuswb	%xmm1, %xmm5
    00000591: 	movdqu	-0x80(%rax), %xmm1
    00000596: 	pand	%xmm15, %xmm1
    0000059b: 	movdqa	%xmm1, %xmm9
    000005a0: 	movdqu	-0x70(%rax), %xmm1
    000005a5: 	pand	%xmm15, %xmm1
    000005aa: 	packuswb	%xmm1, %xmm9
    000005af: 	movdqu	-0x80(%rax), %xmm1
    000005b4: 	psrlw	$0x8, %xmm1
    000005b9: 	movdqa	%xmm1, %xmm0
    000005bd: 	movdqu	-0x70(%rax), %xmm1
    000005c2: 	psrlw	$0x8, %xmm1
    000005c7: 	packuswb	%xmm1, %xmm0
    000005cb: 	movdqu	-0x60(%rax), %xmm1
    000005d0: 	pand	%xmm15, %xmm1
    000005d5: 	movdqa	%xmm1, %xmm8
    000005da: 	movdqu	-0x50(%rax), %xmm1
    000005df: 	pand	%xmm15, %xmm1
    000005e4: 	packuswb	%xmm1, %xmm8
    000005e9: 	movdqu	-0x60(%rax), %xmm1
    000005ee: 	psrlw	$0x8, %xmm1
    000005f3: 	movdqa	%xmm1, %xmm4
    000005f7: 	movdqu	-0x50(%rax), %xmm1
    000005fc: 	psrlw	$0x8, %xmm1
    00000601: 	packuswb	%xmm1, %xmm4
    00000605: 	movdqu	-0x30(%rax), %xmm1
    0000060a: 	pand	%xmm15, %xmm1
    0000060f: 	packuswb	%xmm1, %xmm2
    00000613: 	movdqu	-0x40(%rax), %xmm1
    00000618: 	psrlw	$0x8, %xmm1
    0000061d: 	movdqa	%xmm1, %xmm7
    00000621: 	movdqu	-0x20(%rax), %xmm1
    00000626: 	packuswb	%xmm3, %xmm7
    0000062a: 	movdqu	-0x10(%rax), %xmm3
    0000062f: 	pand	%xmm15, %xmm1
    00000634: 	movaps	%xmm7, 0xb8(%rsp)
    0000063c: 	pand	%xmm15, %xmm3
    00000641: 	movdqa	%xmm1, %xmm7
    00000645: 	movdqu	-0x10(%rax), %xmm1
    0000064a: 	packuswb	%xmm3, %xmm7
    0000064e: 	movdqu	-0x20(%rax), %xmm3
    00000653: 	psrlw	$0x8, %xmm1
    00000658: 	psrlw	$0x8, %xmm3
    0000065d: 	packuswb	%xmm1, %xmm3
    00000661: 	movdqa	%xmm15, %xmm1
    00000666: 	pand	%xmm13, %xmm1
    0000066b: 	psrlw	$0x8, %xmm13
    00000671: 	movdqa	%xmm1, %xmm6
    00000675: 	movdqa	%xmm15, %xmm1
    0000067a: 	pand	%xmm12, %xmm1
    0000067f: 	psrlw	$0x8, %xmm12
    00000685: 	packuswb	%xmm1, %xmm6
    00000689: 	movdqa	%xmm13, %xmm1
    0000068e: 	movdqa	0x98(%rsp), %xmm13
    00000698: 	packuswb	%xmm12, %xmm1
    0000069d: 	movaps	%xmm1, 0xc8(%rsp)
    000006a5: 	movdqa	%xmm15, %xmm1
    000006aa: 	pand	%xmm11, %xmm1
    000006af: 	psrlw	$0x8, %xmm11
    000006b5: 	movdqa	%xmm1, %xmm12
    000006ba: 	movdqa	%xmm15, %xmm1
    000006bf: 	pand	%xmm10, %xmm1
    000006c4: 	psrlw	$0x8, %xmm10
    000006ca: 	packuswb	%xmm1, %xmm12
    000006cf: 	movdqa	%xmm11, %xmm1
    000006d4: 	movdqa	0xa8(%rsp), %xmm11
    000006de: 	packuswb	%xmm10, %xmm1
    000006e3: 	movdqa	%xmm15, %xmm10
    000006e8: 	movaps	%xmm1, 0xd8(%rsp)
    000006f0: 	movdqa	%xmm15, %xmm1
    000006f5: 	pand	%xmm9, %xmm10
    000006fa: 	pand	%xmm8, %xmm1
    000006ff: 	psrlw	$0x8, %xmm9
    00000705: 	packuswb	%xmm1, %xmm10
    0000070a: 	psrlw	$0x8, %xmm8
    00000710: 	movdqa	%xmm9, %xmm1
    00000715: 	packuswb	%xmm8, %xmm1
    0000071a: 	movdqa	%xmm15, %xmm9
    0000071f: 	movdqa	%xmm15, %xmm8
    00000724: 	pand	%xmm7, %xmm9
    00000729: 	pand	%xmm2, %xmm8
    0000072e: 	movaps	%xmm1, 0xe8(%rsp)
    00000736: 	movdqa	0xb8(%rsp), %xmm1
    0000073f: 	psrlw	$0x8, %xmm7
    00000744: 	psrlw	$0x8, %xmm2
    00000749: 	packuswb	%xmm9, %xmm8
    0000074e: 	packuswb	%xmm7, %xmm2
    00000752: 	movdqa	%xmm13, %xmm7
    00000757: 	pand	%xmm15, %xmm7
    0000075c: 	movdqa	%xmm7, %xmm9
    00000761: 	movdqa	%xmm11, %xmm7
    00000766: 	pand	%xmm15, %xmm7
    0000076b: 	psrlw	$0x8, %xmm11
    00000771: 	packuswb	%xmm7, %xmm9
    00000776: 	movdqa	%xmm13, %xmm7
    0000077b: 	movdqa	%xmm15, %xmm13
    00000780: 	pand	%xmm14, %xmm13
    00000785: 	psrlw	$0x8, %xmm7
    0000078a: 	packuswb	%xmm11, %xmm7
    0000078f: 	psrlw	$0x8, %xmm14
    00000795: 	movdqa	%xmm13, %xmm11
    0000079a: 	movdqa	%xmm15, %xmm13
    0000079f: 	pand	%xmm5, %xmm13
    000007a4: 	psrlw	$0x8, %xmm5
    000007a9: 	packuswb	%xmm13, %xmm11
    000007ae: 	movdqa	%xmm14, %xmm13
    000007b3: 	movdqa	%xmm15, %xmm14
    000007b8: 	packuswb	%xmm5, %xmm13
    000007bd: 	movdqa	%xmm15, %xmm5
    000007c2: 	pand	%xmm4, %xmm14
    000007c7: 	pand	%xmm0, %xmm5
    000007cb: 	psrlw	$0x8, %xmm4
    000007d0: 	psrlw	$0x8, %xmm0
    000007d5: 	packuswb	%xmm14, %xmm5
    000007da: 	movdqa	%xmm15, %xmm14
    000007df: 	packuswb	%xmm4, %xmm0
    000007e3: 	movdqa	%xmm15, %xmm4
    000007e8: 	pand	%xmm3, %xmm14
    000007ed: 	pand	%xmm1, %xmm4
    000007f1: 	psrlw	$0x8, %xmm3
    000007f6: 	psrlw	$0x8, %xmm1
    000007fb: 	packuswb	%xmm14, %xmm4
    00000800: 	movdqa	%xmm15, %xmm14
    00000805: 	packuswb	%xmm3, %xmm1
    00000809: 	movdqa	%xmm15, %xmm3
    0000080e: 	pand	%xmm6, %xmm14
    00000813: 	pand	%xmm12, %xmm3
    00000818: 	psrlw	$0x8, %xmm6
    0000081d: 	packuswb	%xmm3, %xmm14
    00000822: 	psrlw	$0x8, %xmm12
    00000828: 	movdqa	%xmm6, %xmm3
    0000082c: 	packuswb	%xmm12, %xmm3
    00000831: 	movdqa	%xmm15, %xmm6
    00000836: 	movdqa	0xd8(%rsp), %xmm12
    00000840: 	movaps	%xmm3, 0x98(%rsp)
    00000848: 	movdqa	%xmm15, %xmm3
    0000084d: 	pand	%xmm10, %xmm6
    00000852: 	pand	%xmm8, %xmm3
    00000857: 	psrlw	$0x8, %xmm10
    0000085d: 	psrlw	$0x8, %xmm8
    00000863: 	packuswb	%xmm3, %xmm6
    00000867: 	movdqa	%xmm15, %xmm3
    0000086c: 	packuswb	%xmm8, %xmm10
    00000871: 	movdqa	%xmm15, %xmm8
    00000876: 	pand	%xmm11, %xmm3
    0000087b: 	pand	%xmm9, %xmm8
    00000880: 	psrlw	$0x8, %xmm9
    00000886: 	packuswb	%xmm3, %xmm8
    0000088b: 	psrlw	$0x8, %xmm11
    00000891: 	movdqa	%xmm9, %xmm3
    00000896: 	packuswb	%xmm11, %xmm3
    0000089b: 	movdqa	%xmm15, %xmm9
    000008a0: 	movaps	%xmm3, 0xa8(%rsp)
    000008a8: 	movdqa	%xmm15, %xmm3
    000008ad: 	pand	%xmm4, %xmm9
    000008b2: 	pand	%xmm5, %xmm3
    000008b6: 	psrlw	$0x8, %xmm5
    000008bb: 	packuswb	%xmm9, %xmm3
    000008c0: 	psrlw	$0x8, %xmm4
    000008c5: 	movdqa	%xmm5, %xmm9
    000008ca: 	packuswb	%xmm4, %xmm9
    000008cf: 	movdqa	%xmm12, %xmm5
    000008d4: 	movaps	%xmm9, 0xb8(%rsp)
    000008dd: 	pand	%xmm15, %xmm5
    000008e2: 	movdqa	0xc8(%rsp), %xmm9
    000008ec: 	movdqa	%xmm9, %xmm4
    000008f1: 	pand	%xmm15, %xmm4
    000008f6: 	packuswb	%xmm5, %xmm4
    000008fa: 	movdqa	%xmm9, %xmm5
    000008ff: 	movdqa	%xmm12, %xmm9
    00000904: 	psrlw	$0x8, %xmm5
    00000909: 	psrlw	$0x8, %xmm9
    0000090f: 	movdqa	%xmm5, %xmm12
    00000914: 	packuswb	%xmm9, %xmm12
    00000919: 	movdqa	%xmm15, %xmm9
    0000091e: 	movaps	%xmm12, 0xc8(%rsp)
    00000927: 	pand	%xmm2, %xmm9
    0000092c: 	movdqa	0xe8(%rsp), %xmm12
    00000936: 	psrlw	$0x8, %xmm2
    0000093b: 	movdqa	%xmm12, %xmm5
    00000940: 	pand	%xmm15, %xmm5
    00000945: 	packuswb	%xmm9, %xmm5
    0000094a: 	movdqa	%xmm12, %xmm9
    0000094f: 	psrlw	$0x8, %xmm9
    00000955: 	movdqa	%xmm9, %xmm12
    0000095a: 	packuswb	%xmm2, %xmm12
    0000095f: 	movdqa	%xmm15, %xmm2
    00000964: 	movaps	%xmm12, 0xd8(%rsp)
    0000096d: 	pand	%xmm7, %xmm2
    00000971: 	movdqa	-0x48(%rsp), %xmm12
    00000978: 	psrlw	$0x8, %xmm7
    0000097d: 	movdqa	%xmm2, %xmm9
    00000982: 	movdqa	%xmm15, %xmm2
    00000987: 	pand	%xmm13, %xmm2
    0000098c: 	psrlw	$0x8, %xmm13
    00000992: 	pand	%xmm15, %xmm12
    00000997: 	packuswb	%xmm2, %xmm9
    0000099c: 	movdqa	%xmm15, %xmm2
    000009a1: 	packuswb	%xmm13, %xmm7
    000009a6: 	movdqa	0x48(%rsp), %xmm13
    000009ad: 	pand	%xmm0, %xmm2
    000009b1: 	psrlw	$0x8, %xmm0
    000009b6: 	movdqa	%xmm2, %xmm11
    000009bb: 	movdqa	%xmm15, %xmm2
    000009c0: 	pand	%xmm1, %xmm2
    000009c4: 	psrlw	$0x8, %xmm1
    000009c9: 	packuswb	%xmm2, %xmm11
    000009ce: 	packuswb	%xmm1, %xmm0
    000009d2: 	movdqa	-0x78(%rsp), %xmm2
    000009d8: 	movdqa	-0x68(%rsp), %xmm1
    000009de: 	pand	%xmm15, %xmm2
    000009e3: 	pand	%xmm15, %xmm1
    000009e8: 	packuswb	%xmm1, %xmm2
    000009ec: 	movdqa	-0x58(%rsp), %xmm1
    000009f2: 	pand	%xmm15, %xmm2
    000009f7: 	pand	%xmm15, %xmm1
    000009fc: 	packuswb	%xmm12, %xmm1
    00000a01: 	movdqa	%xmm15, %xmm12
    00000a06: 	pand	%xmm15, %xmm1
    00000a0b: 	pand	%xmm5, %xmm12
    00000a10: 	packuswb	%xmm1, %xmm2
    00000a14: 	psrlw	$0x8, %xmm5
    00000a19: 	movdqa	%xmm15, %xmm1
    00000a1e: 	pand	%xmm4, %xmm1
    00000a22: 	psrlw	$0x8, %xmm4
    00000a27: 	packuswb	%xmm5, %xmm4
    00000a2b: 	packuswb	%xmm12, %xmm1
    00000a30: 	movdqa	0x58(%rsp), %xmm12
    00000a37: 	paddb	%xmm4, %xmm1
    00000a3b: 	movdqa	%xmm2, %xmm4
    00000a3f: 	movdqa	%xmm1, %xmm5
    00000a43: 	punpcklbw	%xmm2, %xmm4
    00000a47: 	punpckhbw	%xmm2, %xmm2
    00000a4b: 	punpcklbw	%xmm1, %xmm5
    00000a4f: 	punpckhbw	%xmm1, %xmm1
    00000a53: 	pmullw	%xmm5, %xmm4
    00000a57: 	pmullw	%xmm2, %xmm1
    00000a5b: 	movdqa	-0x18(%rsp), %xmm2
    00000a61: 	movdqa	0x28(%rsp), %xmm5
    00000a67: 	pand	%xmm15, %xmm2
    00000a6c: 	pand	%xmm15, %xmm5
    00000a71: 	pand	%xmm15, %xmm1
    00000a76: 	pand	%xmm15, %xmm4
    00000a7b: 	packuswb	%xmm1, %xmm4
    00000a7f: 	movdqa	-0x38(%rsp), %xmm1
    00000a85: 	pand	%xmm15, %xmm1
    00000a8a: 	packuswb	%xmm2, %xmm1
    00000a8e: 	movdqa	0x8(%rsp), %xmm2
    00000a94: 	pand	%xmm15, %xmm1
    00000a99: 	pand	%xmm15, %xmm2
    00000a9e: 	packuswb	%xmm5, %xmm2
    00000aa2: 	movdqa	%xmm15, %xmm5
    00000aa7: 	pand	%xmm15, %xmm2
    00000aac: 	pand	%xmm11, %xmm5
    00000ab1: 	packuswb	%xmm2, %xmm1
    00000ab5: 	psrlw	$0x8, %xmm11
    00000abb: 	movdqa	%xmm15, %xmm2
    00000ac0: 	pand	%xmm9, %xmm2
    00000ac5: 	psrlw	$0x8, %xmm9
    00000acb: 	packuswb	%xmm11, %xmm9
    00000ad0: 	packuswb	%xmm5, %xmm2
    00000ad4: 	movdqa	0x78(%rsp), %xmm11
    00000adb: 	paddb	%xmm9, %xmm2
    00000ae0: 	movdqa	%xmm1, %xmm9
    00000ae5: 	movdqa	%xmm2, %xmm5
    00000ae9: 	punpcklbw	%xmm1, %xmm9
    00000aee: 	punpckhbw	%xmm1, %xmm1
    00000af2: 	punpcklbw	%xmm2, %xmm5
    00000af6: 	punpckhbw	%xmm2, %xmm2
    00000afa: 	pmullw	%xmm9, %xmm5
    00000aff: 	pmullw	%xmm2, %xmm1
    00000b03: 	movdqa	0x68(%rsp), %xmm9
    00000b0a: 	movdqa	%xmm13, %xmm2
    00000b0f: 	pand	%xmm15, %xmm2
    00000b14: 	pand	%xmm15, %xmm1
    00000b19: 	pand	%xmm15, %xmm5
    00000b1e: 	packuswb	%xmm1, %xmm5
    00000b22: 	movdqa	%xmm12, %xmm1
    00000b27: 	pand	%xmm15, %xmm1
    00000b2c: 	paddb	%xmm4, %xmm5
    00000b30: 	movdqa	%xmm11, %xmm4
    00000b35: 	packuswb	%xmm1, %xmm2
    00000b39: 	movdqa	%xmm9, %xmm1
    00000b3e: 	pand	%xmm15, %xmm4
    00000b43: 	pand	%xmm15, %xmm1
    00000b48: 	pand	%xmm15, %xmm2
    00000b4d: 	packuswb	%xmm4, %xmm1
    00000b51: 	movdqa	%xmm15, %xmm4
    00000b56: 	pand	%xmm15, %xmm1
    00000b5b: 	pand	%xmm6, %xmm4
    00000b5f: 	packuswb	%xmm1, %xmm2
    00000b63: 	psrlw	$0x8, %xmm6
    00000b68: 	movdqa	%xmm15, %xmm1
    00000b6d: 	pand	%xmm14, %xmm1
    00000b72: 	packuswb	%xmm4, %xmm1
    00000b76: 	movdqa	%xmm14, %xmm4
    00000b7b: 	movdqa	0x88(%rsp), %xmm14
    00000b85: 	psrlw	$0x8, %xmm4
    00000b8a: 	packuswb	%xmm6, %xmm4
    00000b8e: 	paddb	%xmm4, %xmm1
    00000b92: 	movdqa	%xmm2, %xmm4
    00000b96: 	movdqa	%xmm1, %xmm6
    00000b9a: 	punpcklbw	%xmm2, %xmm4
    00000b9e: 	punpckhbw	%xmm2, %xmm2
    00000ba2: 	punpcklbw	%xmm1, %xmm6
    00000ba6: 	punpckhbw	%xmm1, %xmm1
    00000baa: 	pmullw	%xmm6, %xmm4
    00000bae: 	pmullw	%xmm2, %xmm1
    00000bb2: 	movdqa	-0x28(%rsp), %xmm2
    00000bb8: 	movdqa	0x18(%rsp), %xmm6
    00000bbe: 	pand	%xmm15, %xmm2
    00000bc3: 	pand	%xmm15, %xmm6
    00000bc8: 	pand	%xmm15, %xmm1
    00000bcd: 	pand	%xmm15, %xmm4
    00000bd2: 	packuswb	%xmm1, %xmm4
    00000bd6: 	movdqa	%xmm14, %xmm1
    00000bdb: 	pand	%xmm15, %xmm1
    00000be0: 	packuswb	%xmm2, %xmm1
    00000be4: 	movdqa	-0x8(%rsp), %xmm2
    00000bea: 	pand	%xmm15, %xmm1
    00000bef: 	pand	%xmm15, %xmm2
    00000bf4: 	packuswb	%xmm6, %xmm2
    00000bf8: 	movdqa	%xmm15, %xmm6
    00000bfd: 	pand	%xmm15, %xmm2
    00000c02: 	pand	%xmm3, %xmm6
    00000c06: 	packuswb	%xmm2, %xmm1
    00000c0a: 	psrlw	$0x8, %xmm3
    00000c0f: 	movdqa	%xmm15, %xmm2
    00000c14: 	pand	%xmm8, %xmm2
    00000c19: 	packuswb	%xmm6, %xmm2
    00000c1d: 	movdqa	%xmm8, %xmm6
    00000c22: 	psrlw	$0x8, %xmm6
    00000c27: 	packuswb	%xmm3, %xmm6
    00000c2b: 	paddb	%xmm6, %xmm2
    00000c2f: 	movdqa	%xmm2, %xmm6
    00000c33: 	punpcklbw	%xmm2, %xmm6
    00000c37: 	punpckhbw	%xmm2, %xmm2
    00000c3b: 	movdqa	%xmm6, %xmm3
    00000c3f: 	movdqa	%xmm1, %xmm6
    00000c43: 	punpcklbw	%xmm1, %xmm6
    00000c47: 	punpckhbw	%xmm1, %xmm1
    00000c4b: 	pmullw	%xmm6, %xmm3
    00000c4f: 	pmullw	%xmm2, %xmm1
    00000c53: 	movdqa	%xmm12, %xmm2
    00000c58: 	psrlw	$0x8, %xmm2
    00000c5d: 	pand	%xmm15, %xmm1
    00000c62: 	pand	%xmm15, %xmm3
    00000c67: 	packuswb	%xmm1, %xmm3
    00000c6b: 	movdqa	%xmm13, %xmm1
    00000c70: 	movdqa	0x98(%rsp), %xmm13
    00000c7a: 	paddb	%xmm3, %xmm4
    00000c7e: 	psrlw	$0x8, %xmm1
    00000c83: 	movdqa	%xmm15, %xmm3
    00000c88: 	paddb	%xmm5, %xmm4
    00000c8c: 	packuswb	%xmm2, %xmm1
    00000c90: 	movdqa	%xmm11, %xmm5
    00000c95: 	movdqa	%xmm9, %xmm2
    00000c9a: 	psrlw	$0x8, %xmm5
    00000c9f: 	pand	%xmm15, %xmm1
    00000ca4: 	psrlw	$0x8, %xmm2
    00000ca9: 	pand	%xmm10, %xmm3
    00000cae: 	packuswb	%xmm5, %xmm2
    00000cb2: 	movdqa	%xmm10, %xmm5
    00000cb7: 	pand	%xmm15, %xmm2
    00000cbc: 	psrlw	$0x8, %xmm5
    00000cc1: 	packuswb	%xmm2, %xmm1
    00000cc5: 	movdqa	%xmm13, %xmm2
    00000cca: 	pand	%xmm15, %xmm2
    00000ccf: 	packuswb	%xmm3, %xmm2
    00000cd3: 	movdqa	%xmm13, %xmm3
    00000cd8: 	movdqa	0xb8(%rsp), %xmm13
    00000ce2: 	psrlw	$0x8, %xmm3
    00000ce7: 	packuswb	%xmm5, %xmm3
    00000ceb: 	movdqa	%xmm1, %xmm5
    00000cef: 	movdqa	%xmm13, %xmm6
    00000cf4: 	paddb	%xmm3, %xmm2
    00000cf8: 	psrlw	$0x8, %xmm6
    00000cfd: 	punpcklbw	%xmm1, %xmm5
    00000d01: 	movdqa	%xmm2, %xmm3
    00000d05: 	punpckhbw	%xmm1, %xmm1
    00000d09: 	punpcklbw	%xmm2, %xmm3
    00000d0d: 	punpckhbw	%xmm2, %xmm2
    00000d11: 	pmullw	%xmm5, %xmm3
    00000d15: 	pmullw	%xmm2, %xmm1
    00000d19: 	movdqa	-0x28(%rsp), %xmm2
    00000d1f: 	movdqa	0x18(%rsp), %xmm5
    00000d25: 	psrlw	$0x8, %xmm2
    00000d2a: 	psrlw	$0x8, %xmm5
    00000d2f: 	pand	%xmm15, %xmm1
    00000d34: 	pand	%xmm15, %xmm3
    00000d39: 	packuswb	%xmm1, %xmm3
    00000d3d: 	movdqa	%xmm14, %xmm1
    00000d42: 	movdqa	0xa8(%rsp), %xmm14
    00000d4c: 	psrlw	$0x8, %xmm1
    00000d51: 	packuswb	%xmm2, %xmm1
    00000d55: 	movdqa	-0x8(%rsp), %xmm2
    00000d5b: 	pand	%xmm15, %xmm1
    00000d60: 	psrlw	$0x8, %xmm2
    00000d65: 	packuswb	%xmm5, %xmm2
    00000d69: 	movdqa	%xmm13, %xmm5
    00000d6e: 	pand	%xmm15, %xmm2
    00000d73: 	pand	%xmm15, %xmm5
    00000d78: 	packuswb	%xmm2, %xmm1
    00000d7c: 	movdqa	%xmm14, %xmm2
    00000d81: 	pand	%xmm15, %xmm2
    00000d86: 	packuswb	%xmm5, %xmm2
    00000d8a: 	movdqa	%xmm14, %xmm5
    00000d8f: 	psrlw	$0x8, %xmm5
    00000d94: 	packuswb	%xmm6, %xmm5
    00000d98: 	movdqa	%xmm1, %xmm6
    00000d9c: 	paddb	%xmm5, %xmm2
    00000da0: 	punpcklbw	%xmm1, %xmm6
    00000da4: 	punpckhbw	%xmm1, %xmm1
    00000da8: 	movdqa	%xmm2, %xmm5
    00000dac: 	punpcklbw	%xmm2, %xmm5
    00000db0: 	punpckhbw	%xmm2, %xmm2
    00000db4: 	pmullw	%xmm6, %xmm5
    00000db8: 	pmullw	%xmm2, %xmm1
    00000dbc: 	movdqa	-0x78(%rsp), %xmm2
    00000dc2: 	psrlw	$0x8, %xmm2
    00000dc7: 	pand	%xmm15, %xmm1
    00000dcc: 	pand	%xmm15, %xmm5
    00000dd1: 	packuswb	%xmm1, %xmm5
    00000dd5: 	movdqa	-0x68(%rsp), %xmm1
    00000ddb: 	movdqa	0xd8(%rsp), %xmm8
    00000de5: 	movdqa	0xc8(%rsp), %xmm14
    00000def: 	paddb	%xmm3, %xmm5
    00000df3: 	movdqa	-0x48(%rsp), %xmm3
    00000df9: 	psrlw	$0x8, %xmm1
    00000dfe: 	movdqa	%xmm8, %xmm6
    00000e03: 	psrlw	$0x8, %xmm3
    00000e08: 	psrlw	$0x8, %xmm6
    00000e0d: 	packuswb	%xmm1, %xmm2
    00000e11: 	movdqa	-0x58(%rsp), %xmm1
    00000e17: 	pand	%xmm15, %xmm2
    00000e1c: 	psrlw	$0x8, %xmm1
    00000e21: 	packuswb	%xmm3, %xmm1
    00000e25: 	movdqa	%xmm8, %xmm3
    00000e2a: 	pand	%xmm15, %xmm1
    00000e2f: 	pand	%xmm15, %xmm3
    00000e34: 	packuswb	%xmm1, %xmm2
    00000e38: 	movdqa	%xmm14, %xmm1
    00000e3d: 	pand	%xmm15, %xmm1
    00000e42: 	movdqa	%xmm2, %xmm8
    00000e47: 	packuswb	%xmm3, %xmm1
    00000e4b: 	movdqa	%xmm14, %xmm3
    00000e50: 	punpcklbw	%xmm2, %xmm8
    00000e55: 	psrlw	$0x8, %xmm3
    00000e5a: 	packuswb	%xmm6, %xmm3
    00000e5e: 	movdqa	%xmm2, %xmm6
    00000e62: 	paddb	%xmm3, %xmm1
    00000e66: 	punpckhbw	%xmm2, %xmm6
    00000e6a: 	movdqa	%xmm1, %xmm3
    00000e6e: 	punpcklbw	%xmm1, %xmm3
    00000e72: 	punpckhbw	%xmm1, %xmm1
    00000e76: 	movdqa	%xmm3, %xmm2
    00000e7a: 	pmullw	%xmm6, %xmm1
    00000e7e: 	movdqa	0x28(%rsp), %xmm3
    00000e84: 	pmullw	%xmm8, %xmm2
    00000e89: 	psrlw	$0x8, %xmm3
    00000e8e: 	pand	%xmm15, %xmm1
    00000e93: 	pand	%xmm15, %xmm2
    00000e98: 	packuswb	%xmm1, %xmm2
    00000e9c: 	movdqa	-0x38(%rsp), %xmm1
    00000ea2: 	paddb	%xmm2, %xmm5
    00000ea6: 	movdqa	-0x18(%rsp), %xmm2
    00000eac: 	psrlw	$0x8, %xmm1
    00000eb1: 	paddb	%xmm4, %xmm5
    00000eb5: 	psrlw	$0x8, %xmm2
    00000eba: 	packuswb	%xmm2, %xmm1
    00000ebe: 	movdqa	0x8(%rsp), %xmm2
    00000ec4: 	pand	%xmm15, %xmm1
    00000ec9: 	psrlw	$0x8, %xmm2
    00000ece: 	packuswb	%xmm3, %xmm2
    00000ed2: 	movdqa	%xmm15, %xmm3
    00000ed7: 	pand	%xmm15, %xmm2
    00000edc: 	pand	%xmm0, %xmm3
    00000ee0: 	packuswb	%xmm2, %xmm1
    00000ee4: 	psrlw	$0x8, %xmm0
    00000ee9: 	movdqa	%xmm15, %xmm2
    00000eee: 	pand	%xmm7, %xmm2
    00000ef2: 	psrlw	$0x8, %xmm7
    00000ef7: 	packuswb	%xmm3, %xmm2
    00000efb: 	packuswb	%xmm0, %xmm7
    00000eff: 	paddb	%xmm2, %xmm7
    00000f03: 	movdqa	%xmm1, %xmm2
    00000f07: 	movdqa	%xmm7, %xmm0
    00000f0b: 	punpcklbw	%xmm1, %xmm2
    00000f0f: 	punpckhbw	%xmm1, %xmm1
    00000f13: 	punpcklbw	%xmm7, %xmm0
    00000f17: 	punpckhbw	%xmm7, %xmm7
    00000f1b: 	pmullw	%xmm2, %xmm0
    00000f1f: 	pmullw	%xmm1, %xmm7
    00000f23: 	pand	%xmm15, %xmm0
    00000f28: 	pand	%xmm15, %xmm7
    00000f2d: 	packuswb	%xmm7, %xmm0
    00000f31: 	paddb	0x38(%rsp), %xmm0
    00000f37: 	paddb	%xmm0, %xmm5
    00000f3b: 	movaps	%xmm5, 0x38(%rsp)
    00000f40: 	cmpq	%rcx, %rdi
    00000f43: 	ja	.Ltmp183 # Offset: 3907
    00000f49: 	movdqa	%xmm5, %xmm0
    00000f4d: 	pxor	%xmm1, %xmm1
    00000f51: 	shlq	$0x8, %rdi
    00000f55: 	psrldq	$0x8, %xmm0
    00000f5a: 	leaq	(%r10,%rdi), %rsi
    00000f5e: 	leaq	(%r11,%rdi), %rcx
    00000f62: 	paddb	%xmm5, %xmm0
    00000f66: 	psadbw	%xmm1, %xmm0
    00000f6a: 	movd	%xmm0, %r8d
    00000f6f: 	nop # Size: 1
.Ltmp184:
    00000f70: 	movzbl	0x1(%rsi), %eax
    00000f74: 	movzbl	0x1(%rcx), %edx
    00000f78: 	addq	$0x10, %rdi
    00000f7c: 	addq	$0x10, %rsi
    00000f80: 	addb	0x9(%rcx), %dl
    00000f83: 	addq	$0x10, %rcx
    00000f87: 	imull	%edx, %eax
    00000f8a: 	movl	%eax, %edx
    00000f8c: 	movzbl	-0x10(%rcx), %eax
    00000f90: 	addb	-0x8(%rcx), %al
    00000f93: 	mulb	-0x10(%rsi)
    00000f96: 	addl	%eax, %edx
    00000f98: 	movzbl	-0xe(%rcx), %eax
    00000f9c: 	addb	-0x6(%rcx), %al
    00000f9f: 	mulb	-0xe(%rsi)
    00000fa2: 	addl	%eax, %edx
    00000fa4: 	movzbl	-0xd(%rcx), %eax
    00000fa8: 	addb	-0x5(%rcx), %al
    00000fab: 	mulb	-0xd(%rsi)
    00000fae: 	addl	%eax, %edx
    00000fb0: 	movzbl	-0xc(%rcx), %eax
    00000fb4: 	addb	-0x4(%rcx), %al
    00000fb7: 	mulb	-0xc(%rsi)
    00000fba: 	addl	%eax, %edx
    00000fbc: 	movzbl	-0xb(%rcx), %eax
    00000fc0: 	addb	-0x3(%rcx), %al
    00000fc3: 	mulb	-0xb(%rsi)
    00000fc6: 	addl	%eax, %edx
    00000fc8: 	movzbl	-0xa(%rcx), %eax
    00000fcc: 	addb	-0x2(%rcx), %al
    00000fcf: 	mulb	-0xa(%rsi)
    00000fd2: 	addl	%eax, %edx
    00000fd4: 	movzbl	-0x9(%rcx), %eax
    00000fd8: 	addb	-0x1(%rcx), %al
    00000fdb: 	mulb	-0x9(%rsi)
    00000fde: 	addl	%eax, %edx
    00000fe0: 	addl	%edx, %r8d
    00000fe3: 	cmpq	%rbx, %rdi
    00000fe6: 	jb	.Ltmp184 # Offset: 4070
.Ltmp188:
    00000fe8: 	cmpq	%rdi, %r9
    00000feb: 	jbe	.Ltmp185 # Offset: 4075
    00000ff1: 	leaq	0x1(%rdi), %rdx
    00000ff5: 	movq	%r9, %rax
    00000ff8: 	movl	$0x1, %ecx
    00000ffd: 	subq	%rdi, %rax
    00001000: 	cmpq	%rdx, %r9
    00001003: 	cmovaeq	%rax, %rcx
    00001007: 	subq	$0x1, %rax
    0000100b: 	cmpq	$0xe, %rax
    0000100f: 	jbe	.Ltmp186 # Offset: 4111
    00001011: 	cmpq	%rdx, %r9
    00001014: 	jb	.Ltmp186 # Offset: 4116
    00001016: 	movdqu	(%r11,%rdi), %xmm2
    0000101c: 	movdqu	(%r10,%rdi), %xmm1
    00001022: 	movdqa	%xmm2, %xmm3
    00001026: 	movdqa	%xmm1, %xmm0
    0000102a: 	punpcklbw	%xmm1, %xmm0
    0000102e: 	punpcklbw	%xmm2, %xmm3
    00001032: 	punpckhbw	%xmm1, %xmm1
    00001036: 	punpckhbw	%xmm2, %xmm2
    0000103a: 	pmullw	%xmm3, %xmm0
    0000103e: 	pmullw	%xmm2, %xmm1
    00001042: 	movdqa	DATAat0x32530(%rip), %xmm2
    0000104a: 	pand	%xmm2, %xmm0
    0000104e: 	pand	%xmm1, %xmm2
    00001052: 	packuswb	%xmm2, %xmm0
    00001056: 	movdqa	%xmm0, %xmm1
    0000105a: 	psrldq	$0x8, %xmm1
    0000105f: 	paddb	%xmm1, %xmm0
    00001063: 	pxor	%xmm1, %xmm1
    00001067: 	psadbw	%xmm1, %xmm0
    0000106b: 	movd	%xmm0, %eax
    0000106f: 	addl	%eax, %r8d
    00001072: 	movq	%rcx, %rax
    00001075: 	andq	$-0x10, %rax
    00001079: 	addq	%rax, %rdi
    0000107c: 	leaq	0x1(%rdi), %rdx
    00001080: 	cmpq	%rcx, %rax
    00001083: 	je	.Ltmp185 # Offset: 4227
.Ltmp186:
    00001089: 	movzbl	(%r10,%rdi), %eax
    0000108e: 	mulb	(%r11,%rdi)
    00001092: 	addl	%eax, %r8d
    00001095: 	cmpq	%rdx, %r9
    00001098: 	jbe	.Ltmp185 # Offset: 4248
.Ltmp189:
    0000109e: 	movzbl	(%r11,%rdx), %eax
    000010a3: 	mulb	(%r10,%rdx)
    000010a7: 	addl	%eax, %r8d
    000010aa: 	leaq	0x1(%rdx), %rax
    000010ae: 	cmpq	%rax, %r9
    000010b1: 	jbe	.Ltmp185 # Offset: 4273
    000010b7: 	movzbl	0x1(%r11,%rdx), %eax
    000010bd: 	mulb	0x1(%r10,%rdx)
    000010c2: 	addl	%eax, %r8d
    000010c5: 	leaq	0x2(%rdx), %rax
    000010c9: 	cmpq	%r9, %rax
    000010cc: 	jae	.Ltmp185 # Offset: 4300
    000010d2: 	movzbl	0x2(%r10,%rdx), %eax
    000010d8: 	mulb	0x2(%r11,%rdx)
    000010dd: 	addl	%eax, %r8d
    000010e0: 	leaq	0x3(%rdx), %rax
    000010e4: 	cmpq	%r9, %rax
    000010e7: 	jae	.Ltmp185 # Offset: 4327
    000010ed: 	movzbl	0x3(%r10,%rdx), %eax
    000010f3: 	mulb	0x3(%r11,%rdx)
    000010f8: 	addl	%eax, %r8d
    000010fb: 	leaq	0x4(%rdx), %rax
    000010ff: 	cmpq	%r9, %rax
    00001102: 	jae	.Ltmp185 # Offset: 4354
    00001108: 	movzbl	0x4(%r10,%rdx), %eax
    0000110e: 	mulb	0x4(%r11,%rdx)
    00001113: 	addl	%eax, %r8d
    00001116: 	leaq	0x5(%rdx), %rax
    0000111a: 	cmpq	%r9, %rax
    0000111d: 	jae	.Ltmp185 # Offset: 4381
    00001123: 	movzbl	0x5(%r10,%rdx), %eax
    00001129: 	mulb	0x5(%r11,%rdx)
    0000112e: 	addl	%eax, %r8d
    00001131: 	leaq	0x6(%rdx), %rax
    00001135: 	cmpq	%r9, %rax
    00001138: 	jae	.Ltmp185 # Offset: 4408
    0000113e: 	movzbl	0x6(%r10,%rdx), %eax
    00001144: 	mulb	0x6(%r11,%rdx)
    00001149: 	addl	%eax, %r8d
    0000114c: 	leaq	0x7(%rdx), %rax
    00001150: 	cmpq	%r9, %rax
    00001153: 	jae	.Ltmp185 # Offset: 4435
    00001159: 	movzbl	0x7(%r11,%rdx), %eax
    0000115f: 	mulb	0x7(%r10,%rdx)
    00001164: 	addl	%eax, %r8d
    00001167: 	leaq	0x8(%rdx), %rax
    0000116b: 	cmpq	%rax, %r9
    0000116e: 	jbe	.Ltmp185 # Offset: 4462
    00001174: 	movzbl	0x8(%r11,%rdx), %eax
    0000117a: 	mulb	0x8(%r10,%rdx)
    0000117f: 	addl	%eax, %r8d
    00001182: 	leaq	0x9(%rdx), %rax
    00001186: 	cmpq	%rax, %r9
    00001189: 	jbe	.Ltmp185 # Offset: 4489
    0000118b: 	movzbl	0x9(%r10,%rdx), %eax
    00001191: 	mulb	0x9(%r11,%rdx)
    00001196: 	addl	%eax, %r8d
    00001199: 	leaq	0xa(%rdx), %rax
    0000119d: 	cmpq	%r9, %rax
    000011a0: 	jae	.Ltmp185 # Offset: 4512
    000011a2: 	movzbl	0xa(%r10,%rdx), %eax
    000011a8: 	mulb	0xa(%r11,%rdx)
    000011ad: 	addl	%eax, %r8d
    000011b0: 	leaq	0xb(%rdx), %rax
    000011b4: 	cmpq	%rax, %r9
    000011b7: 	jbe	.Ltmp185 # Offset: 4535
    000011b9: 	movzbl	0xb(%r10,%rdx), %eax
    000011bf: 	mulb	0xb(%r11,%rdx)
    000011c4: 	addl	%eax, %r8d
    000011c7: 	leaq	0xc(%rdx), %rax
    000011cb: 	cmpq	%rax, %r9
    000011ce: 	jbe	.Ltmp185 # Offset: 4558
    000011d0: 	movzbl	0xc(%r10,%rdx), %eax
    000011d6: 	mulb	0xc(%r11,%rdx)
    000011db: 	addl	%eax, %r8d
    000011de: 	leaq	0xd(%rdx), %rax
    000011e2: 	cmpq	%rax, %r9
    000011e5: 	jbe	.Ltmp185 # Offset: 4581
    000011e7: 	movzbl	0xd(%r11,%rdx), %eax
    000011ed: 	mulb	0xd(%r10,%rdx)
    000011f2: 	addl	%eax, %r8d
.Ltmp185:
    000011f5: 	addq	$0xf8, %rsp
    000011fc: 	movl	%r8d, %eax
    000011ff: 	popq	%rbx
    00001200: 	retq # Offset: 4608
    00001201: 	nopl	(%rax) # Size: 7
.Ltmp182:
    00001208: 	movq	%r10, %rsi
    0000120b: 	movq	%r11, %rcx
    0000120e: 	xorl	%r8d, %r8d
    00001211: 	xorl	%edi, %edi
    00001213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp187:
    00001218: 	movzbl	0x1(%rsi), %eax
    0000121c: 	movzbl	0x1(%rcx), %edx
    00001220: 	addq	$0x10, %rdi
    00001224: 	addq	$0x10, %rsi
    00001228: 	addb	0x9(%rcx), %dl
    0000122b: 	addq	$0x10, %rcx
    0000122f: 	imull	%edx, %eax
    00001232: 	movl	%eax, %edx
    00001234: 	movzbl	-0x10(%rcx), %eax
    00001238: 	addb	-0x8(%rcx), %al
    0000123b: 	mulb	-0x10(%rsi)
    0000123e: 	addl	%eax, %edx
    00001240: 	movzbl	-0xe(%rcx), %eax
    00001244: 	addb	-0x6(%rcx), %al
    00001247: 	mulb	-0xe(%rsi)
    0000124a: 	addl	%eax, %edx
    0000124c: 	movzbl	-0xd(%rcx), %eax
    00001250: 	addb	-0x5(%rcx), %al
    00001253: 	mulb	-0xd(%rsi)
    00001256: 	addl	%eax, %edx
    00001258: 	movzbl	-0xc(%rcx), %eax
    0000125c: 	addb	-0x4(%rcx), %al
    0000125f: 	mulb	-0xc(%rsi)
    00001262: 	addl	%eax, %edx
    00001264: 	movzbl	-0xb(%rcx), %eax
    00001268: 	addb	-0x3(%rcx), %al
    0000126b: 	mulb	-0xb(%rsi)
    0000126e: 	addl	%eax, %edx
    00001270: 	movzbl	-0xa(%rcx), %eax
    00001274: 	addb	-0x2(%rcx), %al
    00001277: 	mulb	-0xa(%rsi)
    0000127a: 	addl	%eax, %edx
    0000127c: 	movzbl	-0x9(%rcx), %eax
    00001280: 	addb	-0x1(%rcx), %al
    00001283: 	mulb	-0x9(%rsi)
    00001286: 	addl	%eax, %edx
    00001288: 	addl	%edx, %r8d
    0000128b: 	cmpq	%rdi, %rbx
    0000128e: 	ja	.Ltmp187 # Offset: 4750
    00001290: 	jmp	.Ltmp188 # Offset: 4752
    00001295: 	nopl	(%rax) # Size: 3
.Ltmp181:
    00001298: 	movzbl	(%rdi), %eax
    0000129b: 	mulb	(%rsi)
    0000129d: 	movl	$0x1, %edx
    000012a2: 	movl	%eax, %r8d
    000012a5: 	jmp	.Ltmp189 # Offset: 4773
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product7IPKhhET0_T_S3_m" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0xa900
  Size        : 0x76d
  MaxSize     : 0x770
  Offset      : 0xa900
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %r8
    0000000a: 	movq	%rsi, %r9
    0000000d: 	subq	$0x1, %r11
    00000011: 	je	.Ltmp190 # Offset: 17
    00000017: 	pushq	%rbp
    00000018: 	movq	%rdx, %r10
    0000001b: 	pushq	%rbx
    0000001c: 	leaq	-0x2(%rdx), %rbx
    00000020: 	subq	$0x170, %rsp
    00000027: 	testq	%rdx, %rdx
    0000002a: 	je	.Ltmp191 # Offset: 42
    00000030: 	cmpq	$0x1d, %rbx
    00000034: 	jbe	.Ltmp191 # Offset: 52
    0000003a: 	shrq	%rbx
    0000003d: 	pxor	%xmm4, %xmm4
    00000041: 	xorl	%eax, %eax
    00000043: 	xorl	%edx, %edx
    00000045: 	addq	$0x1, %rbx
    00000049: 	movdqa	DATAat0x32540(%rip), %xmm6
    00000051: 	movdqa	%xmm4, %xmm5
    00000055: 	movdqa	DATAat0x32550(%rip), %xmm8
    0000005e: 	movq	%rbx, %rcx
    00000061: 	movdqa	DATAat0x32530(%rip), %xmm2
    00000069: 	movdqa	DATAat0x32560(%rip), %xmm7
    00000071: 	shrq	$0x4, %rcx
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp192:
    00000078: 	movdqu	(%r8,%rax), %xmm9
    0000007e: 	movdqu	(%r9,%rax), %xmm1
    00000084: 	movdqa	%xmm6, %xmm0
    00000088: 	addq	$0x1, %rdx
    0000008c: 	paddq	%xmm8, %xmm6
    00000091: 	paddq	%xmm7, %xmm0
    00000095: 	movdqa	%xmm1, %xmm3
    00000099: 	movdqa	%xmm9, %xmm10
    0000009e: 	punpcklbw	%xmm9, %xmm10
    000000a3: 	punpcklbw	%xmm1, %xmm3
    000000a7: 	punpckhbw	%xmm9, %xmm9
    000000ac: 	punpckhbw	%xmm1, %xmm1
    000000b0: 	pmullw	%xmm10, %xmm3
    000000b5: 	pmullw	%xmm9, %xmm1
    000000ba: 	movdqu	0x10(%r8,%rax), %xmm9
    000000c1: 	movdqa	%xmm9, %xmm10
    000000c6: 	punpcklbw	%xmm9, %xmm10
    000000cb: 	punpckhbw	%xmm9, %xmm9
    000000d0: 	pand	%xmm2, %xmm3
    000000d4: 	pand	%xmm2, %xmm1
    000000d8: 	packuswb	%xmm1, %xmm3
    000000dc: 	movdqu	0x10(%r9,%rax), %xmm1
    000000e3: 	addq	$0x20, %rax
    000000e7: 	paddb	%xmm3, %xmm5
    000000eb: 	movdqa	%xmm1, %xmm3
    000000ef: 	punpcklbw	%xmm1, %xmm3
    000000f3: 	punpckhbw	%xmm1, %xmm1
    000000f7: 	pmullw	%xmm10, %xmm3
    000000fc: 	pmullw	%xmm9, %xmm1
    00000101: 	pand	%xmm2, %xmm3
    00000105: 	pand	%xmm2, %xmm1
    00000109: 	packuswb	%xmm1, %xmm3
    0000010d: 	paddb	%xmm3, %xmm4
    00000111: 	cmpq	%rcx, %rdx
    00000114: 	jb	.Ltmp192 # Offset: 276
    0000011a: 	movq	%rbx, %rbp
    0000011d: 	movaps	%xmm5, 0x158(%rsp)
    00000125: 	movhlps	%xmm0, %xmm7
    00000128: 	movd	%xmm5, %ecx
    0000012c: 	movaps	%xmm5, 0x148(%rsp)
    00000134: 	movd	%xmm4, %eax
    00000138: 	addb	0x15a(%rsp), %cl
    0000013f: 	andq	$-0x10, %rbp
    00000143: 	addb	0x14c(%rsp), %cl
    0000014a: 	movaps	%xmm5, 0x138(%rsp)
    00000152: 	addb	0x13e(%rsp), %cl
    00000159: 	movq	%xmm7, %rdx
    0000015e: 	movaps	%xmm5, 0x128(%rsp)
    00000166: 	addb	0x130(%rsp), %cl
    0000016d: 	leaq	(%rbp,%rbp), %rdi
    00000172: 	movaps	%xmm5, 0x118(%rsp)
    0000017a: 	addb	0x122(%rsp), %cl
    00000181: 	movaps	%xmm5, 0x108(%rsp)
    00000189: 	addb	0x114(%rsp), %cl
    00000190: 	movaps	%xmm5, 0xf8(%rsp)
    00000198: 	addb	0x106(%rsp), %cl
    0000019f: 	movaps	%xmm4, 0xe8(%rsp)
    000001a7: 	addl	%eax, %ecx
    000001a9: 	addb	0xea(%rsp), %cl
    000001b0: 	movaps	%xmm4, 0xd8(%rsp)
    000001b8: 	addb	0xdc(%rsp), %cl
    000001bf: 	movaps	%xmm4, 0xc8(%rsp)
    000001c7: 	addb	0xce(%rsp), %cl
    000001ce: 	movaps	%xmm4, 0xb8(%rsp)
    000001d6: 	addb	0xc0(%rsp), %cl
    000001dd: 	movaps	%xmm4, 0xa8(%rsp)
    000001e5: 	addb	0xb2(%rsp), %cl
    000001ec: 	movaps	%xmm4, 0x98(%rsp)
    000001f4: 	addb	0xa4(%rsp), %cl
    000001fb: 	movaps	%xmm4, 0x88(%rsp)
    00000203: 	addb	0x96(%rsp), %cl
    0000020a: 	movaps	%xmm5, 0x78(%rsp)
    0000020f: 	movaps	%xmm5, 0x68(%rsp)
    00000214: 	movzbl	0x6b(%rsp), %esi
    00000219: 	addb	0x79(%rsp), %sil
    0000021e: 	movaps	%xmm5, 0x58(%rsp)
    00000223: 	addb	0x5d(%rsp), %sil
    00000228: 	movaps	%xmm5, 0x48(%rsp)
    0000022d: 	addb	0x4f(%rsp), %sil
    00000232: 	movaps	%xmm5, 0x38(%rsp)
    00000237: 	addb	0x41(%rsp), %sil
    0000023c: 	movaps	%xmm5, 0x28(%rsp)
    00000241: 	addb	0x33(%rsp), %sil
    00000246: 	movaps	%xmm5, 0x18(%rsp)
    0000024b: 	addb	0x25(%rsp), %sil
    00000250: 	movaps	%xmm5, 0x8(%rsp)
    00000255: 	addb	0x17(%rsp), %sil
    0000025a: 	movaps	%xmm4, -0x8(%rsp)
    0000025f: 	addb	-0x7(%rsp), %sil
    00000264: 	movaps	%xmm4, -0x18(%rsp)
    00000269: 	addb	-0x15(%rsp), %sil
    0000026e: 	movaps	%xmm4, -0x28(%rsp)
    00000273: 	addb	-0x23(%rsp), %sil
    00000278: 	movaps	%xmm4, -0x38(%rsp)
    0000027d: 	addb	-0x31(%rsp), %sil
    00000282: 	movaps	%xmm4, -0x48(%rsp)
    00000287: 	addb	-0x3f(%rsp), %sil
    0000028c: 	movaps	%xmm4, -0x58(%rsp)
    00000291: 	addb	-0x4d(%rsp), %sil
    00000296: 	movaps	%xmm4, -0x68(%rsp)
    0000029b: 	addb	-0x5b(%rsp), %sil
    000002a0: 	movaps	%xmm4, -0x78(%rsp)
    000002a5: 	addb	-0x69(%rsp), %sil
    000002aa: 	cmpq	%rbp, %rbx
    000002ad: 	je	.Ltmp193 # Offset: 685
    000002b3: 	movzbl	(%r8,%rbp,2), %eax
    000002b8: 	mulb	(%r9,%rbp,2)
    000002bc: 	leaq	0x2(%rdi), %rdx
    000002c0: 	addl	%eax, %ecx
    000002c2: 	movzbl	0x1(%r8,%rdi), %eax
    000002c8: 	mulb	0x1(%r9,%rdi)
    000002cd: 	addl	%eax, %esi
    000002cf: 	cmpq	%rdx, %r11
    000002d2: 	jbe	.Ltmp193 # Offset: 722
    000002d8: 	movzbl	0x2(%r8,%rdi), %eax
    000002de: 	mulb	0x2(%r9,%rdi)
    000002e3: 	leaq	0x4(%rdi), %rdx
    000002e7: 	addl	%eax, %ecx
    000002e9: 	movzbl	0x3(%r8,%rdi), %eax
    000002ef: 	mulb	0x3(%r9,%rdi)
    000002f4: 	addl	%eax, %esi
    000002f6: 	cmpq	%rdx, %r11
    000002f9: 	jbe	.Ltmp193 # Offset: 761
    000002ff: 	movzbl	0x4(%r8,%rdi), %eax
    00000305: 	mulb	0x4(%r9,%rdi)
    0000030a: 	leaq	0x6(%rdi), %rdx
    0000030e: 	addl	%eax, %ecx
    00000310: 	movzbl	0x5(%r8,%rdi), %eax
    00000316: 	mulb	0x5(%r9,%rdi)
    0000031b: 	addl	%eax, %esi
    0000031d: 	cmpq	%rdx, %r11
    00000320: 	jbe	.Ltmp193 # Offset: 800
    00000326: 	movzbl	0x6(%r8,%rdi), %eax
    0000032c: 	mulb	0x6(%r9,%rdi)
    00000331: 	leaq	0x8(%rdi), %rdx
    00000335: 	addl	%eax, %ecx
    00000337: 	movzbl	0x7(%r8,%rdi), %eax
    0000033d: 	mulb	0x7(%r9,%rdi)
    00000342: 	addl	%eax, %esi
    00000344: 	cmpq	%rdx, %r11
    00000347: 	jbe	.Ltmp193 # Offset: 839
    0000034d: 	movzbl	0x8(%r8,%rdi), %eax
    00000353: 	mulb	0x8(%r9,%rdi)
    00000358: 	leaq	0xa(%rdi), %rdx
    0000035c: 	addl	%eax, %ecx
    0000035e: 	movzbl	0x9(%r8,%rdi), %eax
    00000364: 	mulb	0x9(%r9,%rdi)
    00000369: 	addl	%eax, %esi
    0000036b: 	cmpq	%rdx, %r11
    0000036e: 	jbe	.Ltmp193 # Offset: 878
    00000374: 	movzbl	0xa(%r8,%rdi), %eax
    0000037a: 	mulb	0xa(%r9,%rdi)
    0000037f: 	leaq	0xc(%rdi), %rdx
    00000383: 	addl	%eax, %ecx
    00000385: 	movzbl	0xb(%r8,%rdi), %eax
    0000038b: 	mulb	0xb(%r9,%rdi)
    00000390: 	addl	%eax, %esi
    00000392: 	cmpq	%rdx, %r11
    00000395: 	jbe	.Ltmp193 # Offset: 917
    0000039b: 	movzbl	0xc(%r8,%rdi), %eax
    000003a1: 	mulb	0xc(%r9,%rdi)
    000003a6: 	leaq	0xe(%rdi), %rdx
    000003aa: 	addl	%eax, %ecx
    000003ac: 	movzbl	0xd(%r8,%rdi), %eax
    000003b2: 	mulb	0xd(%r9,%rdi)
    000003b7: 	addl	%eax, %esi
    000003b9: 	cmpq	%rdx, %r11
    000003bc: 	jbe	.Ltmp193 # Offset: 956
    000003c2: 	movzbl	0xe(%r8,%rdi), %eax
    000003c8: 	mulb	0xe(%r9,%rdi)
    000003cd: 	leaq	0x10(%rdi), %rdx
    000003d1: 	addl	%eax, %ecx
    000003d3: 	movzbl	0xf(%r8,%rdi), %eax
    000003d9: 	mulb	0xf(%r9,%rdi)
    000003de: 	addl	%eax, %esi
    000003e0: 	cmpq	%rdx, %r11
    000003e3: 	jbe	.Ltmp193 # Offset: 995
    000003e9: 	movzbl	0x10(%r8,%rdi), %eax
    000003ef: 	mulb	0x10(%r9,%rdi)
    000003f4: 	leaq	0x12(%rdi), %rdx
    000003f8: 	addl	%eax, %ecx
    000003fa: 	movzbl	0x11(%r8,%rdi), %eax
    00000400: 	mulb	0x11(%r9,%rdi)
    00000405: 	addl	%eax, %esi
    00000407: 	cmpq	%rdx, %r11
    0000040a: 	jbe	.Ltmp193 # Offset: 1034
    00000410: 	movzbl	0x12(%r8,%rdi), %eax
    00000416: 	mulb	0x12(%r9,%rdi)
    0000041b: 	leaq	0x14(%rdi), %rdx
    0000041f: 	addl	%eax, %ecx
    00000421: 	movzbl	0x13(%r8,%rdi), %eax
    00000427: 	mulb	0x13(%r9,%rdi)
    0000042c: 	addl	%eax, %esi
    0000042e: 	cmpq	%rdx, %r11
    00000431: 	jbe	.Ltmp193 # Offset: 1073
    00000437: 	movzbl	0x14(%r8,%rdi), %eax
    0000043d: 	mulb	0x14(%r9,%rdi)
    00000442: 	leaq	0x16(%rdi), %rdx
    00000446: 	addl	%eax, %ecx
    00000448: 	movzbl	0x15(%r8,%rdi), %eax
    0000044e: 	mulb	0x15(%r9,%rdi)
    00000453: 	addl	%eax, %esi
    00000455: 	cmpq	%rdx, %r11
    00000458: 	jbe	.Ltmp193 # Offset: 1112
    0000045e: 	movzbl	0x16(%r8,%rdi), %eax
    00000464: 	mulb	0x16(%r9,%rdi)
    00000469: 	leaq	0x18(%rdi), %rdx
    0000046d: 	addl	%eax, %ecx
    0000046f: 	movzbl	0x17(%r8,%rdi), %eax
    00000475: 	mulb	0x17(%r9,%rdi)
    0000047a: 	addl	%eax, %esi
    0000047c: 	cmpq	%rdx, %r11
    0000047f: 	jbe	.Ltmp193 # Offset: 1151
    00000481: 	movzbl	0x18(%r8,%rdi), %eax
    00000487: 	mulb	0x18(%r9,%rdi)
    0000048c: 	leaq	0x1a(%rdi), %rdx
    00000490: 	addl	%eax, %ecx
    00000492: 	movzbl	0x19(%r8,%rdi), %eax
    00000498: 	mulb	0x19(%r9,%rdi)
    0000049d: 	addl	%eax, %esi
    0000049f: 	cmpq	%rdx, %r11
    000004a2: 	jbe	.Ltmp193 # Offset: 1186
    000004a4: 	movzbl	0x1a(%r8,%rdi), %eax
    000004aa: 	mulb	0x1a(%r9,%rdi)
    000004af: 	leaq	0x1c(%rdi), %rdx
    000004b3: 	addl	%eax, %ecx
    000004b5: 	movzbl	0x1b(%r8,%rdi), %eax
    000004bb: 	mulb	0x1b(%r9,%rdi)
    000004c0: 	addl	%eax, %esi
    000004c2: 	cmpq	%rdx, %r11
    000004c5: 	jbe	.Ltmp193 # Offset: 1221
    000004c7: 	movzbl	0x1c(%r8,%rdi), %eax
    000004cd: 	mulb	0x1c(%r9,%rdi)
    000004d2: 	leaq	0x1e(%rdi), %rdx
    000004d6: 	addl	%eax, %ecx
    000004d8: 	movzbl	0x1d(%r8,%rdi), %eax
    000004de: 	mulb	0x1d(%r9,%rdi)
    000004e3: 	addl	%eax, %esi
    000004e5: 	nopl	(%rax) # Size: 3
.Ltmp193:
    000004e8: 	cmpq	%rdx, %r10
    000004eb: 	jbe	.Ltmp194 # Offset: 1259
    000004f1: 	leaq	0x1(%rdx), %rdi
    000004f5: 	movq	%r10, %rax
    000004f8: 	movl	$0x1, %ebp
    000004fd: 	subq	%rdx, %rax
    00000500: 	cmpq	%rdi, %r10
    00000503: 	cmovaeq	%rax, %rbp
    00000507: 	subq	$0x1, %rax
    0000050b: 	cmpq	$0xe, %rax
    0000050f: 	jbe	.Ltmp195 # Offset: 1295
    00000515: 	cmpq	%rdi, %r10
    00000518: 	jb	.Ltmp195 # Offset: 1304
    0000051e: 	movq	%rbp, %rdi
    00000521: 	leaq	(%r8,%rdx), %rbx
    00000525: 	leaq	(%r9,%rdx), %r11
    00000529: 	xorl	%eax, %eax
    0000052b: 	movdqa	DATAat0x32530(%rip), %xmm2
    00000533: 	andq	$-0x10, %rdi
    00000537: 	pxor	%xmm4, %xmm4
    0000053b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp196:
    00000540: 	movdqu	(%r11,%rax), %xmm3
    00000546: 	movdqu	(%rbx,%rax), %xmm0
    0000054b: 	addq	$0x10, %rax
    0000054f: 	movdqa	%xmm0, %xmm1
    00000553: 	movdqa	%xmm3, %xmm5
    00000557: 	punpcklbw	%xmm0, %xmm1
    0000055b: 	punpcklbw	%xmm3, %xmm5
    0000055f: 	punpckhbw	%xmm0, %xmm0
    00000563: 	punpckhbw	%xmm3, %xmm3
    00000567: 	pmullw	%xmm5, %xmm1
    0000056b: 	pmullw	%xmm3, %xmm0
    0000056f: 	pand	%xmm2, %xmm1
    00000573: 	pand	%xmm2, %xmm0
    00000577: 	packuswb	%xmm0, %xmm1
    0000057b: 	paddb	%xmm1, %xmm4
    0000057f: 	cmpq	%rdi, %rax
    00000582: 	jne	.Ltmp196 # Offset: 1410
    00000584: 	movdqa	%xmm4, %xmm0
    00000588: 	psrldq	$0x8, %xmm0
    0000058d: 	paddb	%xmm0, %xmm4
    00000591: 	pxor	%xmm0, %xmm0
    00000595: 	psadbw	%xmm0, %xmm4
    00000599: 	movd	%xmm4, %eax
    0000059d: 	addl	%eax, %ecx
    0000059f: 	movq	%rbp, %rax
    000005a2: 	andq	$-0x10, %rax
    000005a6: 	addq	%rax, %rdx
    000005a9: 	cmpq	%rbp, %rax
    000005ac: 	je	.Ltmp194 # Offset: 1452
    000005b2: 	leaq	0x1(%rdx), %rdi
.Ltmp195:
    000005b6: 	movzbl	(%r8,%rdx), %eax
    000005bb: 	mulb	(%r9,%rdx)
    000005bf: 	addl	%eax, %ecx
    000005c1: 	cmpq	%r10, %rdi
    000005c4: 	jae	.Ltmp194 # Offset: 1476
    000005ca: 	movzbl	0x1(%r8,%rdx), %eax
    000005d0: 	mulb	0x1(%r9,%rdx)
    000005d5: 	addl	%eax, %ecx
    000005d7: 	leaq	0x2(%rdx), %rax
    000005db: 	cmpq	%rax, %r10
    000005de: 	jbe	.Ltmp194 # Offset: 1502
    000005e4: 	movzbl	0x2(%r9,%rdx), %eax
    000005ea: 	mulb	0x2(%r8,%rdx)
    000005ef: 	addl	%eax, %ecx
    000005f1: 	leaq	0x3(%rdx), %rax
    000005f5: 	cmpq	%r10, %rax
    000005f8: 	jae	.Ltmp194 # Offset: 1528
    000005fe: 	movzbl	0x3(%r8,%rdx), %eax
    00000604: 	mulb	0x3(%r9,%rdx)
    00000609: 	addl	%eax, %ecx
    0000060b: 	leaq	0x4(%rdx), %rax
    0000060f: 	cmpq	%rax, %r10
    00000612: 	jbe	.Ltmp194 # Offset: 1554
    00000618: 	movzbl	0x4(%r8,%rdx), %eax
    0000061e: 	mulb	0x4(%r9,%rdx)
    00000623: 	addl	%eax, %ecx
    00000625: 	leaq	0x5(%rdx), %rax
    00000629: 	cmpq	%rax, %r10
    0000062c: 	jbe	.Ltmp194 # Offset: 1580
    00000632: 	movzbl	0x5(%r8,%rdx), %eax
    00000638: 	mulb	0x5(%r9,%rdx)
    0000063d: 	addl	%eax, %ecx
    0000063f: 	leaq	0x6(%rdx), %rax
    00000643: 	cmpq	%rax, %r10
    00000646: 	jbe	.Ltmp194 # Offset: 1606
    0000064c: 	movzbl	0x6(%r8,%rdx), %eax
    00000652: 	mulb	0x6(%r9,%rdx)
    00000657: 	addl	%eax, %ecx
    00000659: 	leaq	0x7(%rdx), %rax
    0000065d: 	cmpq	%rax, %r10
    00000660: 	jbe	.Ltmp194 # Offset: 1632
    00000666: 	movzbl	0x7(%r8,%rdx), %eax
    0000066c: 	mulb	0x7(%r9,%rdx)
    00000671: 	addl	%eax, %ecx
    00000673: 	leaq	0x8(%rdx), %rax
    00000677: 	cmpq	%rax, %r10
    0000067a: 	jbe	.Ltmp194 # Offset: 1658
    00000680: 	movzbl	0x8(%r8,%rdx), %eax
    00000686: 	mulb	0x8(%r9,%rdx)
    0000068b: 	addl	%eax, %ecx
    0000068d: 	leaq	0x9(%rdx), %rax
    00000691: 	cmpq	%rax, %r10
    00000694: 	jbe	.Ltmp194 # Offset: 1684
    00000696: 	movzbl	0x9(%r8,%rdx), %eax
    0000069c: 	mulb	0x9(%r9,%rdx)
    000006a1: 	addl	%eax, %ecx
    000006a3: 	leaq	0xa(%rdx), %rax
    000006a7: 	cmpq	%rax, %r10
    000006aa: 	jbe	.Ltmp194 # Offset: 1706
    000006ac: 	movzbl	0xa(%r8,%rdx), %eax
    000006b2: 	mulb	0xa(%r9,%rdx)
    000006b7: 	addl	%eax, %ecx
    000006b9: 	leaq	0xb(%rdx), %rax
    000006bd: 	cmpq	%rax, %r10
    000006c0: 	jbe	.Ltmp194 # Offset: 1728
    000006c2: 	movzbl	0xb(%r8,%rdx), %eax
    000006c8: 	mulb	0xb(%r9,%rdx)
    000006cd: 	addl	%eax, %ecx
    000006cf: 	leaq	0xc(%rdx), %rax
    000006d3: 	cmpq	%rax, %r10
    000006d6: 	jbe	.Ltmp194 # Offset: 1750
    000006d8: 	movzbl	0xc(%r8,%rdx), %eax
    000006de: 	mulb	0xc(%r9,%rdx)
    000006e3: 	addl	%eax, %ecx
    000006e5: 	leaq	0xd(%rdx), %rax
    000006e9: 	cmpq	%rax, %r10
    000006ec: 	jbe	.Ltmp194 # Offset: 1772
    000006ee: 	movzbl	0xd(%r8,%rdx), %eax
    000006f4: 	mulb	0xd(%r9,%rdx)
    000006f9: 	addl	%eax, %ecx
    000006fb: 	leaq	0xe(%rdx), %rax
    000006ff: 	cmpq	%rax, %r10
    00000702: 	jbe	.Ltmp194 # Offset: 1794
    00000704: 	movzbl	0xe(%r9,%rdx), %eax
    0000070a: 	mulb	0xe(%r8,%rdx)
    0000070f: 	addl	%eax, %ecx
.Ltmp194:
    00000711: 	addq	$0x170, %rsp
    00000718: 	leal	(%rsi,%rcx), %eax
    0000071b: 	popq	%rbx
    0000071c: 	popq	%rbp
    0000071d: 	retq # Offset: 1821
    0000071e: 	nop # Size: 2
.Ltmp191:
    00000720: 	xorl	%esi, %esi
    00000722: 	xorl	%ecx, %ecx
    00000724: 	xorl	%edx, %edx
    00000726: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp197:
    00000730: 	movzbl	(%r9,%rdx), %eax
    00000735: 	mulb	(%r8,%rdx)
    00000739: 	addl	%eax, %ecx
    0000073b: 	movzbl	0x1(%r8,%rdx), %eax
    00000741: 	mulb	0x1(%r9,%rdx)
    00000746: 	addq	$0x2, %rdx
    0000074a: 	addl	%eax, %esi
    0000074c: 	cmpq	%rdx, %r11
    0000074f: 	ja	.Ltmp197 # Offset: 1871
    00000751: 	jmp	.Ltmp193 # Offset: 1873
    00000756: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp190:
    00000760: 	movzbl	(%rdi), %eax
    00000763: 	mulb	(%rsi)
    00000765: 	xorl	%esi, %esi
    00000767: 	movl	%eax, %ecx
    00000769: 	leal	(%rsi,%rcx), %eax
    0000076c: 	retq # Offset: 1900
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product8IPKhhET0_T_S3_m" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0xb070
  Size        : 0x80e
  MaxSize     : 0x810
  Offset      : 0xb070
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %r10
    00000008: 	movq	%rdi, %r8
    0000000b: 	movq	%rdx, %r9
    0000000e: 	pushq	%rbx
    0000000f: 	movq	%rsi, %rdi
    00000012: 	subq	$0x350, %rsp
    00000019: 	subq	$0x3, %r10
    0000001d: 	je	.Ltmp198 # Offset: 29
    00000023: 	leaq	-0x4(%rdx), %rbp
    00000027: 	cmpq	$-0x4, %r10
    0000002b: 	ja	.Ltmp199 # Offset: 43
    00000031: 	cmpq	$0x3b, %rbp
    00000035: 	jbe	.Ltmp199 # Offset: 53
    0000003b: 	shrq	$0x2, %rbp
    0000003f: 	pxor	%xmm2, %xmm2
    00000043: 	movq	%r8, %rdx
    00000046: 	movq	%rdi, %rax
    00000049: 	addq	$0x1, %rbp
    0000004d: 	movdqa	%xmm2, %xmm3
    00000051: 	movdqa	%xmm2, %xmm4
    00000055: 	xorl	%ecx, %ecx
    00000057: 	movq	%rbp, %rsi
    0000005a: 	movdqa	DATAat0x32570(%rip), %xmm7
    00000062: 	movdqa	%xmm2, %xmm5
    00000066: 	movdqa	DATAat0x32580(%rip), %xmm9
    0000006f: 	movdqa	DATAat0x32530(%rip), %xmm1
    00000077: 	shrq	$0x4, %rsi
    0000007b: 	movdqa	DATAat0x32590(%rip), %xmm8
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp200:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	movdqa	%xmm7, %xmm6
    00000090: 	addq	$0x1, %rcx
    00000094: 	addq	$0x40, %rdx
    00000098: 	movdqu	-0x40(%rdx), %xmm11
    0000009e: 	paddq	%xmm9, %xmm7
    000000a3: 	paddq	%xmm8, %xmm6
    000000a8: 	addq	$0x40, %rax
    000000ac: 	movdqa	%xmm0, %xmm10
    000000b1: 	movdqa	%xmm11, %xmm12
    000000b6: 	punpcklbw	%xmm0, %xmm10
    000000bb: 	punpckhbw	%xmm0, %xmm0
    000000bf: 	punpcklbw	%xmm11, %xmm12
    000000c4: 	punpckhbw	%xmm11, %xmm11
    000000c9: 	pmullw	%xmm12, %xmm10
    000000ce: 	pmullw	%xmm11, %xmm0
    000000d3: 	movdqu	-0x30(%rdx), %xmm11
    000000d9: 	movdqa	%xmm11, %xmm12
    000000de: 	punpcklbw	%xmm11, %xmm12
    000000e3: 	punpckhbw	%xmm11, %xmm11
    000000e8: 	pand	%xmm1, %xmm0
    000000ec: 	pand	%xmm1, %xmm10
    000000f1: 	packuswb	%xmm0, %xmm10
    000000f6: 	movdqu	-0x30(%rax), %xmm0
    000000fb: 	paddb	%xmm10, %xmm5
    00000100: 	movdqa	%xmm0, %xmm10
    00000105: 	punpcklbw	%xmm0, %xmm10
    0000010a: 	punpckhbw	%xmm0, %xmm0
    0000010e: 	pmullw	%xmm12, %xmm10
    00000113: 	pmullw	%xmm11, %xmm0
    00000118: 	movdqu	-0x20(%rdx), %xmm11
    0000011e: 	movdqa	%xmm11, %xmm12
    00000123: 	punpcklbw	%xmm11, %xmm12
    00000128: 	punpckhbw	%xmm11, %xmm11
    0000012d: 	pand	%xmm1, %xmm0
    00000131: 	pand	%xmm1, %xmm10
    00000136: 	packuswb	%xmm0, %xmm10
    0000013b: 	movdqu	-0x20(%rax), %xmm0
    00000140: 	paddb	%xmm10, %xmm4
    00000145: 	movdqa	%xmm0, %xmm10
    0000014a: 	punpcklbw	%xmm0, %xmm10
    0000014f: 	punpckhbw	%xmm0, %xmm0
    00000153: 	pmullw	%xmm12, %xmm10
    00000158: 	pmullw	%xmm11, %xmm0
    0000015d: 	movdqu	-0x10(%rdx), %xmm11
    00000163: 	movdqa	%xmm11, %xmm12
    00000168: 	punpcklbw	%xmm11, %xmm12
    0000016d: 	punpckhbw	%xmm11, %xmm11
    00000172: 	pand	%xmm1, %xmm0
    00000176: 	pand	%xmm1, %xmm10
    0000017b: 	packuswb	%xmm0, %xmm10
    00000180: 	movdqu	-0x10(%rax), %xmm0
    00000185: 	paddb	%xmm10, %xmm3
    0000018a: 	movdqa	%xmm0, %xmm10
    0000018f: 	punpcklbw	%xmm0, %xmm10
    00000194: 	punpckhbw	%xmm0, %xmm0
    00000198: 	pmullw	%xmm12, %xmm10
    0000019d: 	pmullw	%xmm11, %xmm0
    000001a2: 	pand	%xmm1, %xmm10
    000001a7: 	pand	%xmm1, %xmm0
    000001ab: 	packuswb	%xmm0, %xmm10
    000001b0: 	paddb	%xmm10, %xmm2
    000001b5: 	cmpq	%rcx, %rsi
    000001b8: 	ja	.Ltmp200 # Offset: 440
    000001be: 	movaps	%xmm5, 0x338(%rsp)
    000001c6: 	movd	%xmm4, %eax
    000001ca: 	movd	%xmm5, %ecx
    000001ce: 	addb	0x33c(%rsp), %cl
    000001d5: 	movaps	%xmm5, 0x328(%rsp)
    000001dd: 	addb	0x330(%rsp), %cl
    000001e4: 	psrldq	$0x8, %xmm6
    000001e9: 	movaps	%xmm5, 0x318(%rsp)
    000001f1: 	addb	0x324(%rsp), %cl
    000001f8: 	addl	%eax, %ecx
    000001fa: 	movaps	%xmm4, 0x308(%rsp)
    00000202: 	movd	%xmm3, %eax
    00000206: 	addb	0x30c(%rsp), %cl
    0000020d: 	movaps	%xmm4, 0x2f8(%rsp)
    00000215: 	addb	0x300(%rsp), %cl
    0000021c: 	movaps	%xmm4, 0x2e8(%rsp)
    00000224: 	addb	0x2f4(%rsp), %cl
    0000022b: 	addl	%eax, %ecx
    0000022d: 	movaps	%xmm3, 0x2d8(%rsp)
    00000235: 	movd	%xmm2, %eax
    00000239: 	addb	0x2dc(%rsp), %cl
    00000240: 	movaps	%xmm3, 0x2c8(%rsp)
    00000248: 	addb	0x2d0(%rsp), %cl
    0000024f: 	movaps	%xmm3, 0x2b8(%rsp)
    00000257: 	addb	0x2c4(%rsp), %cl
    0000025e: 	addl	%eax, %ecx
    00000260: 	movq	%rbp, %rax
    00000263: 	movaps	%xmm2, 0x2a8(%rsp)
    0000026b: 	addb	0x2ac(%rsp), %cl
    00000272: 	movaps	%xmm2, 0x298(%rsp)
    0000027a: 	addb	0x2a0(%rsp), %cl
    00000281: 	movaps	%xmm2, 0x288(%rsp)
    00000289: 	addb	0x294(%rsp), %cl
    00000290: 	movaps	%xmm5, 0x278(%rsp)
    00000298: 	movaps	%xmm5, 0x268(%rsp)
    000002a0: 	movzbl	0x26d(%rsp), %r11d
    000002a9: 	addb	0x279(%rsp), %r11b
    000002b1: 	movaps	%xmm5, 0x258(%rsp)
    000002b9: 	addb	0x261(%rsp), %r11b
    000002c1: 	movaps	%xmm5, 0x248(%rsp)
    000002c9: 	addb	0x255(%rsp), %r11b
    000002d1: 	movaps	%xmm4, 0x238(%rsp)
    000002d9: 	addb	0x239(%rsp), %r11b
    000002e1: 	movaps	%xmm4, 0x228(%rsp)
    000002e9: 	addb	0x22d(%rsp), %r11b
    000002f1: 	movaps	%xmm4, 0x218(%rsp)
    000002f9: 	addb	0x221(%rsp), %r11b
    00000301: 	movaps	%xmm4, 0x208(%rsp)
    00000309: 	addb	0x215(%rsp), %r11b
    00000311: 	movaps	%xmm3, 0x1f8(%rsp)
    00000319: 	addb	0x1f9(%rsp), %r11b
    00000321: 	movaps	%xmm3, 0x1e8(%rsp)
    00000329: 	addb	0x1ed(%rsp), %r11b
    00000331: 	movaps	%xmm3, 0x1d8(%rsp)
    00000339: 	addb	0x1e1(%rsp), %r11b
    00000341: 	movaps	%xmm3, 0x1c8(%rsp)
    00000349: 	addb	0x1d5(%rsp), %r11b
    00000351: 	movaps	%xmm2, 0x1b8(%rsp)
    00000359: 	addb	0x1b9(%rsp), %r11b
    00000361: 	movaps	%xmm2, 0x1a8(%rsp)
    00000369: 	addb	0x1ad(%rsp), %r11b
    00000371: 	movaps	%xmm2, 0x198(%rsp)
    00000379: 	addb	0x1a1(%rsp), %r11b
    00000381: 	movaps	%xmm2, 0x188(%rsp)
    00000389: 	addb	0x195(%rsp), %r11b
    00000391: 	movaps	%xmm5, 0x178(%rsp)
    00000399: 	movaps	%xmm5, 0x168(%rsp)
    000003a1: 	movzbl	0x16e(%rsp), %ebx
    000003a9: 	addb	0x17a(%rsp), %bl
    000003b0: 	movaps	%xmm5, 0x158(%rsp)
    000003b8: 	addb	0x162(%rsp), %bl
    000003bf: 	movaps	%xmm5, 0x148(%rsp)
    000003c7: 	addb	0x156(%rsp), %bl
    000003ce: 	andq	$-0x10, %rax
    000003d2: 	movaps	%xmm4, 0x138(%rsp)
    000003da: 	leaq	(,%rax,4), %rdx
    000003e2: 	addb	0x13a(%rsp), %bl
    000003e9: 	movaps	%xmm4, 0x128(%rsp)
    000003f1: 	addb	0x12e(%rsp), %bl
    000003f8: 	movaps	%xmm4, 0x118(%rsp)
    00000400: 	addb	0x122(%rsp), %bl
    00000407: 	movaps	%xmm4, 0x108(%rsp)
    0000040f: 	addb	0x116(%rsp), %bl
    00000416: 	movaps	%xmm3, 0xf8(%rsp)
    0000041e: 	addb	0xfa(%rsp), %bl
    00000425: 	movaps	%xmm3, 0xe8(%rsp)
    0000042d: 	addb	0xee(%rsp), %bl
    00000434: 	movaps	%xmm3, 0xd8(%rsp)
    0000043c: 	addb	0xe2(%rsp), %bl
    00000443: 	movaps	%xmm3, 0xc8(%rsp)
    0000044b: 	addb	0xd6(%rsp), %bl
    00000452: 	movaps	%xmm2, 0xb8(%rsp)
    0000045a: 	addb	0xba(%rsp), %bl
    00000461: 	movaps	%xmm2, 0xa8(%rsp)
    00000469: 	addb	0xae(%rsp), %bl
    00000470: 	movaps	%xmm2, 0x98(%rsp)
    00000478: 	addb	0xa2(%rsp), %bl
    0000047f: 	movaps	%xmm2, 0x88(%rsp)
    00000487: 	addb	0x96(%rsp), %bl
    0000048e: 	movaps	%xmm5, 0x78(%rsp)
    00000493: 	movaps	%xmm5, 0x68(%rsp)
    00000498: 	movzbl	0x6f(%rsp), %esi
    0000049d: 	addb	0x7b(%rsp), %sil
    000004a2: 	movaps	%xmm5, 0x58(%rsp)
    000004a7: 	addb	0x63(%rsp), %sil
    000004ac: 	movaps	%xmm5, 0x48(%rsp)
    000004b1: 	addb	0x57(%rsp), %sil
    000004b6: 	movaps	%xmm4, 0x38(%rsp)
    000004bb: 	addb	0x3b(%rsp), %sil
    000004c0: 	movaps	%xmm4, 0x28(%rsp)
    000004c5: 	addb	0x2f(%rsp), %sil
    000004ca: 	movaps	%xmm4, 0x18(%rsp)
    000004cf: 	addb	0x23(%rsp), %sil
    000004d4: 	movaps	%xmm4, 0x8(%rsp)
    000004d9: 	addb	0x17(%rsp), %sil
    000004de: 	movaps	%xmm3, -0x8(%rsp)
    000004e3: 	addb	-0x5(%rsp), %sil
    000004e8: 	movaps	%xmm3, -0x18(%rsp)
    000004ed: 	addb	-0x11(%rsp), %sil
    000004f2: 	movaps	%xmm3, -0x28(%rsp)
    000004f7: 	addb	-0x1d(%rsp), %sil
    000004fc: 	movaps	%xmm3, -0x38(%rsp)
    00000501: 	addb	-0x29(%rsp), %sil
    00000506: 	movaps	%xmm2, -0x48(%rsp)
    0000050b: 	addb	-0x45(%rsp), %sil
    00000510: 	movaps	%xmm2, -0x58(%rsp)
    00000515: 	addb	-0x51(%rsp), %sil
    0000051a: 	movaps	%xmm2, -0x68(%rsp)
    0000051f: 	addb	-0x5d(%rsp), %sil
    00000524: 	movaps	%xmm2, -0x78(%rsp)
    00000529: 	addb	-0x69(%rsp), %sil
    0000052e: 	cmpq	%rax, %rbp
    00000531: 	je	.Ltmp201 # Offset: 1329
    00000537: 	nopw	(%rax,%rax) # Size: 9
.Ltmp202:
    00000540: 	movzbl	(%r8,%rdx), %eax
    00000545: 	mulb	(%rdi,%rdx)
    00000548: 	addl	%eax, %ecx
    0000054a: 	movzbl	0x1(%rdi,%rdx), %eax
    0000054f: 	mulb	0x1(%r8,%rdx)
    00000554: 	addl	%eax, %r11d
    00000557: 	movzbl	0x2(%rdi,%rdx), %eax
    0000055c: 	mulb	0x2(%r8,%rdx)
    00000561: 	addl	%eax, %ebx
    00000563: 	movzbl	0x3(%r8,%rdx), %eax
    00000569: 	mulb	0x3(%rdi,%rdx)
    0000056d: 	addq	$0x4, %rdx
    00000571: 	addl	%eax, %esi
    00000573: 	cmpq	%rdx, %r10
    00000576: 	ja	.Ltmp202 # Offset: 1398
.Ltmp207:
    00000578: 	addl	%ebx, %esi
    0000057a: 	addl	%r11d, %esi
    0000057d: 	cmpq	%r9, %rdx
    00000580: 	jae	.Ltmp203 # Offset: 1408
    00000586: 	leaq	0x1(%rdx), %r10
    0000058a: 	movq	%r9, %rax
    0000058d: 	movl	$0x1, %ebp
    00000592: 	subq	%rdx, %rax
    00000595: 	cmpq	%r10, %r9
    00000598: 	cmovaeq	%rax, %rbp
    0000059c: 	subq	$0x1, %rax
    000005a0: 	cmpq	$0xe, %rax
    000005a4: 	jbe	.Ltmp204 # Offset: 1444
    000005aa: 	cmpq	%r10, %r9
    000005ad: 	jb	.Ltmp204 # Offset: 1453
    000005b3: 	movq	%rbp, %r10
    000005b6: 	leaq	(%r8,%rdx), %rbx
    000005ba: 	leaq	(%rdi,%rdx), %r11
    000005be: 	xorl	%eax, %eax
    000005c0: 	movdqa	DATAat0x32530(%rip), %xmm1
    000005c8: 	andq	$-0x10, %r10
    000005cc: 	pxor	%xmm4, %xmm4
.Ltmp205:
    000005d0: 	movdqu	(%r11,%rax), %xmm3
    000005d6: 	movdqu	(%rbx,%rax), %xmm0
    000005db: 	addq	$0x10, %rax
    000005df: 	movdqa	%xmm0, %xmm2
    000005e3: 	movdqa	%xmm3, %xmm5
    000005e7: 	punpcklbw	%xmm0, %xmm2
    000005eb: 	punpcklbw	%xmm3, %xmm5
    000005ef: 	punpckhbw	%xmm0, %xmm0
    000005f3: 	punpckhbw	%xmm3, %xmm3
    000005f7: 	pmullw	%xmm5, %xmm2
    000005fb: 	pmullw	%xmm3, %xmm0
    000005ff: 	pand	%xmm1, %xmm2
    00000603: 	pand	%xmm1, %xmm0
    00000607: 	packuswb	%xmm0, %xmm2
    0000060b: 	paddb	%xmm2, %xmm4
    0000060f: 	cmpq	%r10, %rax
    00000612: 	jne	.Ltmp205 # Offset: 1554
    00000614: 	movdqa	%xmm4, %xmm0
    00000618: 	psrldq	$0x8, %xmm0
    0000061d: 	paddb	%xmm0, %xmm4
    00000621: 	pxor	%xmm0, %xmm0
    00000625: 	psadbw	%xmm0, %xmm4
    00000629: 	movd	%xmm4, %eax
    0000062d: 	addl	%eax, %ecx
    0000062f: 	movq	%rbp, %rax
    00000632: 	andq	$-0x10, %rax
    00000636: 	addq	%rax, %rdx
    00000639: 	cmpq	%rbp, %rax
    0000063c: 	je	.Ltmp203 # Offset: 1596
    00000642: 	leaq	0x1(%rdx), %r10
.Ltmp204:
    00000646: 	movzbl	(%rdi,%rdx), %eax
    0000064a: 	mulb	(%r8,%rdx)
    0000064e: 	movq	%r10, %rdx
    00000651: 	addl	%eax, %ecx
    00000653: 	cmpq	%r9, %r10
    00000656: 	jae	.Ltmp203 # Offset: 1622
.Ltmp208:
    0000065c: 	movzbl	(%r8,%rdx), %eax
    00000661: 	mulb	(%rdi,%rdx)
    00000664: 	addl	%eax, %ecx
    00000666: 	leaq	0x1(%rdx), %rax
    0000066a: 	cmpq	%r9, %rax
    0000066d: 	jae	.Ltmp203 # Offset: 1645
    00000673: 	movzbl	0x1(%rdi,%rdx), %eax
    00000678: 	mulb	0x1(%r8,%rdx)
    0000067d: 	addl	%eax, %ecx
    0000067f: 	leaq	0x2(%rdx), %rax
    00000683: 	cmpq	%r9, %rax
    00000686: 	jae	.Ltmp203 # Offset: 1670
    0000068c: 	movzbl	0x2(%r8,%rdx), %eax
    00000692: 	mulb	0x2(%rdi,%rdx)
    00000696: 	addl	%eax, %ecx
    00000698: 	leaq	0x3(%rdx), %rax
    0000069c: 	cmpq	%rax, %r9
    0000069f: 	jbe	.Ltmp203 # Offset: 1695
    000006a5: 	movzbl	0x3(%r8,%rdx), %eax
    000006ab: 	mulb	0x3(%rdi,%rdx)
    000006af: 	addl	%eax, %ecx
    000006b1: 	leaq	0x4(%rdx), %rax
    000006b5: 	cmpq	%r9, %rax
    000006b8: 	jae	.Ltmp203 # Offset: 1720
    000006be: 	movzbl	0x4(%r8,%rdx), %eax
    000006c4: 	mulb	0x4(%rdi,%rdx)
    000006c8: 	addl	%eax, %ecx
    000006ca: 	leaq	0x5(%rdx), %rax
    000006ce: 	cmpq	%rax, %r9
    000006d1: 	jbe	.Ltmp203 # Offset: 1745
    000006d7: 	movzbl	0x5(%rdi,%rdx), %eax
    000006dc: 	mulb	0x5(%r8,%rdx)
    000006e1: 	addl	%eax, %ecx
    000006e3: 	leaq	0x6(%rdx), %rax
    000006e7: 	cmpq	%rax, %r9
    000006ea: 	jbe	.Ltmp203 # Offset: 1770
    000006f0: 	movzbl	0x6(%r8,%rdx), %eax
    000006f6: 	mulb	0x6(%rdi,%rdx)
    000006fa: 	addl	%eax, %ecx
    000006fc: 	leaq	0x7(%rdx), %rax
    00000700: 	cmpq	%rax, %r9
    00000703: 	jbe	.Ltmp203 # Offset: 1795
    00000709: 	movzbl	0x7(%r8,%rdx), %eax
    0000070f: 	mulb	0x7(%rdi,%rdx)
    00000713: 	addl	%eax, %ecx
    00000715: 	leaq	0x8(%rdx), %rax
    00000719: 	cmpq	%rax, %r9
    0000071c: 	jbe	.Ltmp203 # Offset: 1820
    0000071e: 	movzbl	0x8(%r8,%rdx), %eax
    00000724: 	mulb	0x8(%rdi,%rdx)
    00000728: 	addl	%eax, %ecx
    0000072a: 	leaq	0x9(%rdx), %rax
    0000072e: 	cmpq	%rax, %r9
    00000731: 	jbe	.Ltmp203 # Offset: 1841
    00000733: 	movzbl	0x9(%r8,%rdx), %eax
    00000739: 	mulb	0x9(%rdi,%rdx)
    0000073d: 	addl	%eax, %ecx
    0000073f: 	leaq	0xa(%rdx), %rax
    00000743: 	cmpq	%rax, %r9
    00000746: 	jbe	.Ltmp203 # Offset: 1862
    00000748: 	movzbl	0xa(%r8,%rdx), %eax
    0000074e: 	mulb	0xa(%rdi,%rdx)
    00000752: 	addl	%eax, %ecx
    00000754: 	leaq	0xb(%rdx), %rax
    00000758: 	cmpq	%rax, %r9
    0000075b: 	jbe	.Ltmp203 # Offset: 1883
    0000075d: 	movzbl	0xb(%r8,%rdx), %eax
    00000763: 	mulb	0xb(%rdi,%rdx)
    00000767: 	addl	%eax, %ecx
    00000769: 	leaq	0xc(%rdx), %rax
    0000076d: 	cmpq	%rax, %r9
    00000770: 	jbe	.Ltmp203 # Offset: 1904
    00000772: 	movzbl	0xc(%r8,%rdx), %eax
    00000778: 	mulb	0xc(%rdi,%rdx)
    0000077c: 	addl	%eax, %ecx
    0000077e: 	leaq	0xd(%rdx), %rax
    00000782: 	cmpq	%rax, %r9
    00000785: 	jbe	.Ltmp203 # Offset: 1925
    00000787: 	movzbl	0xd(%rdi,%rdx), %eax
    0000078c: 	mulb	0xd(%r8,%rdx)
    00000791: 	addl	%eax, %ecx
.Ltmp203:
    00000793: 	addq	$0x350, %rsp
    0000079a: 	leal	(%rcx,%rsi), %eax
    0000079d: 	popq	%rbx
    0000079e: 	popq	%rbp
    0000079f: 	retq # Offset: 1951
.Ltmp199:
    000007a0: 	xorl	%esi, %esi
    000007a2: 	xorl	%ebx, %ebx
    000007a4: 	xorl	%r11d, %r11d
    000007a7: 	xorl	%ecx, %ecx
    000007a9: 	xorl	%edx, %edx
    000007ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp206:
    000007b0: 	movzbl	(%rdi,%rdx), %eax
    000007b4: 	mulb	(%r8,%rdx)
    000007b8: 	addl	%eax, %ecx
    000007ba: 	movzbl	0x1(%rdi,%rdx), %eax
    000007bf: 	mulb	0x1(%r8,%rdx)
    000007c4: 	addl	%eax, %r11d
    000007c7: 	movzbl	0x2(%rdi,%rdx), %eax
    000007cc: 	mulb	0x2(%r8,%rdx)
    000007d1: 	addl	%eax, %ebx
    000007d3: 	movzbl	0x3(%rdi,%rdx), %eax
    000007d8: 	mulb	0x3(%r8,%rdx)
    000007dd: 	addq	$0x4, %rdx
    000007e1: 	addl	%eax, %esi
    000007e3: 	cmpq	%rdx, %r10
    000007e6: 	ja	.Ltmp206 # Offset: 2022
    000007e8: 	jmp	.Ltmp207 # Offset: 2024
    000007ed: 	nopl	(%rax) # Size: 3
.Ltmp198:
    000007f0: 	movzbl	(%r8), %eax
    000007f4: 	mulb	(%rsi)
    000007f6: 	movl	$0x1, %edx
    000007fb: 	xorl	%esi, %esi
    000007fd: 	movl	%eax, %ecx
    000007ff: 	jmp	.Ltmp208 # Offset: 2047
.Ltmp201:
    00000804: 	movq	%xmm6, %rdx
    00000809: 	jmp	.Ltmp207 # Offset: 2057
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKhhET0_T_S3_m"

Binary Function "_Z14inner_product9IPKhhET0_T_S3_m" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0xb880
  Size        : 0xa2d
  MaxSize     : 0xa30
  Offset      : 0xb880
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r11
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rsi, %rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x350, %rsp
    0000001d: 	subq	$0x7, %r12
    00000021: 	je	.Ltmp209 # Offset: 33
    00000027: 	leaq	-0x8(%rdx), %rcx
    0000002b: 	cmpq	$-0x8, %r12
    0000002f: 	ja	.Ltmp210 # Offset: 47
    00000035: 	cmpq	$0x77, %rcx
    00000039: 	jbe	.Ltmp210 # Offset: 57
    0000003f: 	shrq	$0x3, %rcx
    00000043: 	pxor	%xmm7, %xmm7
    00000047: 	movq	%rsi, %rax
    0000004a: 	movq	%rbx, %rdx
    0000004d: 	addq	$0x1, %rcx
    00000051: 	movdqa	%xmm7, %xmm8
    00000056: 	movdqa	%xmm7, %xmm9
    0000005b: 	xorl	%esi, %esi
    0000005d: 	movq	%rcx, %rdi
    00000060: 	movdqa	DATAat0x32530(%rip), %xmm0
    00000068: 	movdqa	DATAat0x325a0(%rip), %xmm12
    00000071: 	movdqa	%xmm7, %xmm10
    00000076: 	movdqa	DATAat0x325b0(%rip), %xmm15
    0000007f: 	shrq	$0x4, %rdi
    00000083: 	movdqa	DATAat0x325c0(%rip), %xmm14
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp211:
    00000090: 	movdqu	(%rdx), %xmm2
    00000094: 	movdqu	(%rax), %xmm5
    00000098: 	addq	$0x1, %rsi
    0000009c: 	subq	$-0x80, %rdx
    000000a0: 	movdqu	-0x70(%rdx), %xmm4
    000000a5: 	movdqu	-0x60(%rdx), %xmm1
    000000aa: 	movdqa	%xmm12, %xmm11
    000000af: 	subq	$-0x80, %rax
    000000b3: 	movdqa	%xmm2, %xmm6
    000000b7: 	movdqa	%xmm5, %xmm3
    000000bb: 	paddq	%xmm15, %xmm12
    000000c0: 	shufps	$0x88, %xmm4, %xmm6
    000000c4: 	movdqu	-0x70(%rax), %xmm4
    000000c9: 	paddq	%xmm14, %xmm11
    000000ce: 	shufps	$0x88, %xmm4, %xmm3
    000000d2: 	movdqa	%xmm6, %xmm4
    000000d6: 	movdqa	%xmm3, %xmm13
    000000db: 	punpcklbw	%xmm3, %xmm13
    000000e0: 	punpcklbw	%xmm6, %xmm4
    000000e4: 	punpckhbw	%xmm3, %xmm3
    000000e8: 	punpckhbw	%xmm6, %xmm6
    000000ec: 	pmullw	%xmm13, %xmm4
    000000f1: 	pmullw	%xmm6, %xmm3
    000000f5: 	movdqu	-0x70(%rdx), %xmm6
    000000fa: 	shufps	$0xdd, %xmm6, %xmm2
    000000fe: 	movdqu	-0x70(%rax), %xmm6
    00000103: 	pand	%xmm0, %xmm4
    00000107: 	shufps	$0xdd, %xmm6, %xmm5
    0000010b: 	movdqa	%xmm2, %xmm6
    0000010f: 	pand	%xmm0, %xmm3
    00000113: 	punpcklbw	%xmm2, %xmm6
    00000117: 	punpckhbw	%xmm2, %xmm2
    0000011b: 	packuswb	%xmm3, %xmm4
    0000011f: 	movdqa	%xmm5, %xmm3
    00000123: 	punpcklbw	%xmm5, %xmm3
    00000127: 	punpckhbw	%xmm5, %xmm5
    0000012b: 	pmullw	%xmm6, %xmm3
    0000012f: 	pmullw	%xmm5, %xmm2
    00000133: 	movdqu	-0x50(%rdx), %xmm6
    00000138: 	pand	%xmm0, %xmm2
    0000013c: 	pand	%xmm0, %xmm3
    00000140: 	packuswb	%xmm2, %xmm3
    00000144: 	movdqu	-0x60(%rax), %xmm2
    00000149: 	paddb	%xmm3, %xmm4
    0000014d: 	paddb	%xmm4, %xmm10
    00000152: 	movdqa	%xmm1, %xmm4
    00000156: 	shufps	$0x88, %xmm6, %xmm4
    0000015a: 	movdqu	-0x50(%rax), %xmm6
    0000015f: 	movdqa	%xmm4, %xmm3
    00000163: 	punpcklbw	%xmm4, %xmm3
    00000167: 	punpckhbw	%xmm4, %xmm4
    0000016b: 	shufps	$0x88, %xmm6, %xmm2
    0000016f: 	movdqa	%xmm2, %xmm5
    00000173: 	movdqu	-0x50(%rdx), %xmm6
    00000178: 	punpcklbw	%xmm2, %xmm5
    0000017c: 	punpckhbw	%xmm2, %xmm2
    00000180: 	pmullw	%xmm5, %xmm3
    00000184: 	pmullw	%xmm4, %xmm2
    00000188: 	shufps	$0xdd, %xmm6, %xmm1
    0000018c: 	movdqa	%xmm1, %xmm5
    00000190: 	movdqu	-0x50(%rax), %xmm6
    00000195: 	punpcklbw	%xmm1, %xmm5
    00000199: 	punpckhbw	%xmm1, %xmm1
    0000019d: 	pand	%xmm0, %xmm2
    000001a1: 	pand	%xmm0, %xmm3
    000001a5: 	packuswb	%xmm2, %xmm3
    000001a9: 	movdqu	-0x60(%rax), %xmm2
    000001ae: 	shufps	$0xdd, %xmm6, %xmm2
    000001b2: 	movdqa	%xmm2, %xmm4
    000001b6: 	movdqu	-0x30(%rdx), %xmm6
    000001bb: 	punpcklbw	%xmm2, %xmm4
    000001bf: 	punpckhbw	%xmm2, %xmm2
    000001c3: 	pmullw	%xmm5, %xmm4
    000001c7: 	pmullw	%xmm2, %xmm1
    000001cb: 	pand	%xmm0, %xmm4
    000001cf: 	pand	%xmm0, %xmm1
    000001d3: 	packuswb	%xmm1, %xmm4
    000001d7: 	movdqu	-0x40(%rax), %xmm1
    000001dc: 	paddb	%xmm4, %xmm3
    000001e0: 	paddb	%xmm3, %xmm9
    000001e5: 	movdqu	-0x40(%rdx), %xmm3
    000001ea: 	shufps	$0x88, %xmm6, %xmm3
    000001ee: 	movdqu	-0x30(%rax), %xmm6
    000001f3: 	movdqa	%xmm3, %xmm2
    000001f7: 	punpcklbw	%xmm3, %xmm2
    000001fb: 	punpckhbw	%xmm3, %xmm3
    000001ff: 	shufps	$0x88, %xmm6, %xmm1
    00000203: 	movdqa	%xmm1, %xmm4
    00000207: 	movdqu	-0x30(%rdx), %xmm6
    0000020c: 	punpcklbw	%xmm1, %xmm4
    00000210: 	punpckhbw	%xmm1, %xmm1
    00000214: 	pmullw	%xmm4, %xmm2
    00000218: 	pmullw	%xmm3, %xmm1
    0000021c: 	movdqu	-0x40(%rdx), %xmm4
    00000221: 	shufps	$0xdd, %xmm6, %xmm4
    00000225: 	movdqu	-0x30(%rax), %xmm6
    0000022a: 	movdqa	%xmm4, %xmm5
    0000022e: 	punpcklbw	%xmm4, %xmm5
    00000232: 	punpckhbw	%xmm4, %xmm4
    00000236: 	pand	%xmm0, %xmm1
    0000023a: 	pand	%xmm0, %xmm2
    0000023e: 	packuswb	%xmm1, %xmm2
    00000242: 	movdqu	-0x40(%rax), %xmm1
    00000247: 	shufps	$0xdd, %xmm6, %xmm1
    0000024b: 	movdqa	%xmm1, %xmm3
    0000024f: 	movdqu	-0x10(%rdx), %xmm6
    00000254: 	punpcklbw	%xmm1, %xmm3
    00000258: 	punpckhbw	%xmm1, %xmm1
    0000025c: 	pmullw	%xmm5, %xmm3
    00000260: 	pmullw	%xmm4, %xmm1
    00000264: 	movdqu	-0x10(%rax), %xmm5
    00000269: 	pand	%xmm0, %xmm1
    0000026d: 	pand	%xmm0, %xmm3
    00000271: 	packuswb	%xmm1, %xmm3
    00000275: 	movdqu	-0x20(%rdx), %xmm1
    0000027a: 	paddb	%xmm3, %xmm2
    0000027e: 	movdqu	-0x20(%rax), %xmm3
    00000283: 	shufps	$0x88, %xmm6, %xmm1
    00000287: 	paddb	%xmm2, %xmm8
    0000028c: 	movdqa	%xmm1, %xmm4
    00000290: 	shufps	$0x88, %xmm5, %xmm3
    00000294: 	movdqa	%xmm3, %xmm2
    00000298: 	punpcklbw	%xmm1, %xmm4
    0000029c: 	punpckhbw	%xmm1, %xmm1
    000002a0: 	punpcklbw	%xmm3, %xmm2
    000002a4: 	punpckhbw	%xmm3, %xmm3
    000002a8: 	pmullw	%xmm4, %xmm2
    000002ac: 	pmullw	%xmm3, %xmm1
    000002b0: 	movdqu	-0x20(%rdx), %xmm3
    000002b5: 	shufps	$0xdd, %xmm6, %xmm3
    000002b9: 	pand	%xmm0, %xmm1
    000002bd: 	pand	%xmm0, %xmm2
    000002c1: 	packuswb	%xmm1, %xmm2
    000002c5: 	movdqu	-0x20(%rax), %xmm1
    000002ca: 	shufps	$0xdd, %xmm5, %xmm1
    000002ce: 	movdqa	%xmm3, %xmm5
    000002d2: 	movdqa	%xmm1, %xmm4
    000002d6: 	punpcklbw	%xmm1, %xmm4
    000002da: 	punpcklbw	%xmm3, %xmm5
    000002de: 	punpckhbw	%xmm1, %xmm1
    000002e2: 	punpckhbw	%xmm3, %xmm3
    000002e6: 	pmullw	%xmm5, %xmm4
    000002ea: 	pmullw	%xmm3, %xmm1
    000002ee: 	pand	%xmm0, %xmm4
    000002f2: 	movdqa	%xmm4, %xmm3
    000002f6: 	pand	%xmm0, %xmm1
    000002fa: 	packuswb	%xmm1, %xmm3
    000002fe: 	paddb	%xmm3, %xmm2
    00000302: 	paddb	%xmm2, %xmm7
    00000306: 	cmpq	%rsi, %rdi
    00000309: 	ja	.Ltmp211 # Offset: 777
    0000030f: 	movd	%xmm9, %eax
    00000314: 	movd	%xmm10, %esi
    00000319: 	movaps	%xmm10, 0x338(%rsp)
    00000322: 	addb	0x33c(%rsp), %sil
    0000032a: 	movaps	%xmm10, 0x328(%rsp)
    00000333: 	psrldq	$0x8, %xmm11
    00000339: 	addb	0x330(%rsp), %sil
    00000341: 	movaps	%xmm10, 0x318(%rsp)
    0000034a: 	addb	0x324(%rsp), %sil
    00000352: 	addl	%eax, %esi
    00000354: 	movd	%xmm8, %eax
    00000359: 	movaps	%xmm9, 0x308(%rsp)
    00000362: 	addb	0x30c(%rsp), %sil
    0000036a: 	movaps	%xmm9, 0x2f8(%rsp)
    00000373: 	addb	0x300(%rsp), %sil
    0000037b: 	movaps	%xmm9, 0x2e8(%rsp)
    00000384: 	addb	0x2f4(%rsp), %sil
    0000038c: 	addl	%eax, %esi
    0000038e: 	movd	%xmm7, %eax
    00000392: 	movaps	%xmm8, 0x2d8(%rsp)
    0000039b: 	addb	0x2dc(%rsp), %sil
    000003a3: 	movaps	%xmm8, 0x2c8(%rsp)
    000003ac: 	addb	0x2d0(%rsp), %sil
    000003b4: 	movaps	%xmm8, 0x2b8(%rsp)
    000003bd: 	addb	0x2c4(%rsp), %sil
    000003c5: 	addl	%eax, %esi
    000003c7: 	movq	%rcx, %rax
    000003ca: 	movaps	%xmm7, 0x2a8(%rsp)
    000003d2: 	addb	0x2ac(%rsp), %sil
    000003da: 	movaps	%xmm7, 0x298(%rsp)
    000003e2: 	addb	0x2a0(%rsp), %sil
    000003ea: 	movaps	%xmm7, 0x288(%rsp)
    000003f2: 	addb	0x294(%rsp), %sil
    000003fa: 	movaps	%xmm10, 0x278(%rsp)
    00000403: 	movaps	%xmm10, 0x268(%rsp)
    0000040c: 	movzbl	0x26d(%rsp), %r9d
    00000415: 	addb	0x279(%rsp), %r9b
    0000041d: 	movaps	%xmm10, 0x258(%rsp)
    00000426: 	addb	0x261(%rsp), %r9b
    0000042e: 	movaps	%xmm10, 0x248(%rsp)
    00000437: 	addb	0x255(%rsp), %r9b
    0000043f: 	movaps	%xmm9, 0x238(%rsp)
    00000448: 	addb	0x239(%rsp), %r9b
    00000450: 	movaps	%xmm9, 0x228(%rsp)
    00000459: 	addb	0x22d(%rsp), %r9b
    00000461: 	movaps	%xmm9, 0x218(%rsp)
    0000046a: 	addb	0x221(%rsp), %r9b
    00000472: 	movaps	%xmm9, 0x208(%rsp)
    0000047b: 	addb	0x215(%rsp), %r9b
    00000483: 	movaps	%xmm8, 0x1f8(%rsp)
    0000048c: 	addb	0x1f9(%rsp), %r9b
    00000494: 	movaps	%xmm8, 0x1e8(%rsp)
    0000049d: 	addb	0x1ed(%rsp), %r9b
    000004a5: 	movaps	%xmm8, 0x1d8(%rsp)
    000004ae: 	addb	0x1e1(%rsp), %r9b
    000004b6: 	movaps	%xmm8, 0x1c8(%rsp)
    000004bf: 	addb	0x1d5(%rsp), %r9b
    000004c7: 	movaps	%xmm7, 0x1b8(%rsp)
    000004cf: 	addb	0x1b9(%rsp), %r9b
    000004d7: 	movaps	%xmm7, 0x1a8(%rsp)
    000004df: 	addb	0x1ad(%rsp), %r9b
    000004e7: 	movaps	%xmm7, 0x198(%rsp)
    000004ef: 	addb	0x1a1(%rsp), %r9b
    000004f7: 	movaps	%xmm7, 0x188(%rsp)
    000004ff: 	addb	0x195(%rsp), %r9b
    00000507: 	movaps	%xmm10, 0x178(%rsp)
    00000510: 	movaps	%xmm10, 0x168(%rsp)
    00000519: 	movzbl	0x16e(%rsp), %r8d
    00000522: 	addb	0x17a(%rsp), %r8b
    0000052a: 	movaps	%xmm10, 0x158(%rsp)
    00000533: 	addb	0x162(%rsp), %r8b
    0000053b: 	movaps	%xmm10, 0x148(%rsp)
    00000544: 	addb	0x156(%rsp), %r8b
    0000054c: 	andq	$-0x10, %rax
    00000550: 	movaps	%xmm9, 0x138(%rsp)
    00000559: 	leaq	(,%rax,8), %r13
    00000561: 	addb	0x13a(%rsp), %r8b
    00000569: 	movaps	%xmm9, 0x128(%rsp)
    00000572: 	addb	0x12e(%rsp), %r8b
    0000057a: 	movaps	%xmm9, 0x118(%rsp)
    00000583: 	addb	0x122(%rsp), %r8b
    0000058b: 	movaps	%xmm9, 0x108(%rsp)
    00000594: 	addb	0x116(%rsp), %r8b
    0000059c: 	movaps	%xmm8, 0xf8(%rsp)
    000005a5: 	addb	0xfa(%rsp), %r8b
    000005ad: 	movaps	%xmm8, 0xe8(%rsp)
    000005b6: 	addb	0xee(%rsp), %r8b
    000005be: 	movaps	%xmm8, 0xd8(%rsp)
    000005c7: 	addb	0xe2(%rsp), %r8b
    000005cf: 	movaps	%xmm8, 0xc8(%rsp)
    000005d8: 	addb	0xd6(%rsp), %r8b
    000005e0: 	movaps	%xmm7, 0xb8(%rsp)
    000005e8: 	addb	0xba(%rsp), %r8b
    000005f0: 	movaps	%xmm7, 0xa8(%rsp)
    000005f8: 	addb	0xae(%rsp), %r8b
    00000600: 	movaps	%xmm7, 0x98(%rsp)
    00000608: 	addb	0xa2(%rsp), %r8b
    00000610: 	movaps	%xmm7, 0x88(%rsp)
    00000618: 	addb	0x96(%rsp), %r8b
    00000620: 	movaps	%xmm10, 0x78(%rsp)
    00000626: 	movaps	%xmm10, 0x68(%rsp)
    0000062c: 	movzbl	0x6f(%rsp), %edi
    00000631: 	addb	0x7b(%rsp), %dil
    00000636: 	movaps	%xmm10, 0x58(%rsp)
    0000063c: 	addb	0x63(%rsp), %dil
    00000641: 	movaps	%xmm10, 0x48(%rsp)
    00000647: 	addb	0x57(%rsp), %dil
    0000064c: 	movaps	%xmm9, 0x38(%rsp)
    00000652: 	addb	0x3b(%rsp), %dil
    00000657: 	movaps	%xmm9, 0x28(%rsp)
    0000065d: 	addb	0x2f(%rsp), %dil
    00000662: 	movaps	%xmm9, 0x18(%rsp)
    00000668: 	addb	0x23(%rsp), %dil
    0000066d: 	movaps	%xmm9, 0x8(%rsp)
    00000673: 	addb	0x17(%rsp), %dil
    00000678: 	movaps	%xmm8, -0x8(%rsp)
    0000067e: 	addb	-0x5(%rsp), %dil
    00000683: 	movaps	%xmm8, -0x18(%rsp)
    00000689: 	addb	-0x11(%rsp), %dil
    0000068e: 	movaps	%xmm8, -0x28(%rsp)
    00000694: 	addb	-0x1d(%rsp), %dil
    00000699: 	movaps	%xmm8, -0x38(%rsp)
    0000069f: 	addb	-0x29(%rsp), %dil
    000006a4: 	movaps	%xmm7, -0x48(%rsp)
    000006a9: 	addb	-0x45(%rsp), %dil
    000006ae: 	movaps	%xmm7, -0x58(%rsp)
    000006b3: 	addb	-0x51(%rsp), %dil
    000006b8: 	movaps	%xmm7, -0x68(%rsp)
    000006bd: 	addb	-0x5d(%rsp), %dil
    000006c2: 	movaps	%xmm7, -0x78(%rsp)
    000006c7: 	addb	-0x69(%rsp), %dil
    000006cc: 	cmpq	%rax, %rcx
    000006cf: 	je	.Ltmp212 # Offset: 1743
    000006d5: 	leaq	(%rbx,%r13), %rcx
    000006d9: 	leaq	(%rbp,%r13), %rdx
    000006de: 	nop # Size: 2
.Ltmp213:
    000006e0: 	movzbl	0x4(%rdx), %eax
    000006e4: 	mulb	0x4(%rcx)
    000006e7: 	addq	$0x8, %r13
    000006eb: 	addq	$0x8, %rcx
    000006ef: 	addq	$0x8, %rdx
    000006f3: 	movl	%eax, %r10d
    000006f6: 	movzbl	-0x8(%rdx), %eax
    000006fa: 	mulb	-0x8(%rcx)
    000006fd: 	addl	%r10d, %eax
    00000700: 	addl	%eax, %esi
    00000702: 	movzbl	-0x3(%rdx), %eax
    00000706: 	mulb	-0x3(%rcx)
    00000709: 	movl	%eax, %r10d
    0000070c: 	movzbl	-0x7(%rdx), %eax
    00000710: 	mulb	-0x7(%rcx)
    00000713: 	addl	%r10d, %eax
    00000716: 	addl	%eax, %r9d
    00000719: 	movzbl	-0x2(%rdx), %eax
    0000071d: 	mulb	-0x2(%rcx)
    00000720: 	movl	%eax, %r10d
    00000723: 	movzbl	-0x6(%rdx), %eax
    00000727: 	mulb	-0x6(%rcx)
    0000072a: 	addl	%r10d, %eax
    0000072d: 	addl	%eax, %r8d
    00000730: 	movzbl	-0x1(%rdx), %eax
    00000734: 	mulb	-0x1(%rcx)
    00000737: 	movl	%eax, %r10d
    0000073a: 	movzbl	-0x5(%rdx), %eax
    0000073e: 	mulb	-0x5(%rcx)
    00000741: 	addl	%r10d, %eax
    00000744: 	addl	%eax, %edi
    00000746: 	cmpq	%r13, %r12
    00000749: 	ja	.Ltmp213 # Offset: 1865
.Ltmp218:
    0000074b: 	addl	%r9d, %edi
    0000074e: 	addl	%r8d, %edi
    00000751: 	cmpq	%r11, %r13
    00000754: 	jae	.Ltmp214 # Offset: 1876
    0000075a: 	leaq	0x1(%r13), %rdx
    0000075e: 	movq	%r11, %rax
    00000761: 	movl	$0x1, %r9d
    00000767: 	subq	%r13, %rax
    0000076a: 	cmpq	%rdx, %r11
    0000076d: 	cmovaeq	%rax, %r9
    00000771: 	subq	$0x1, %rax
    00000775: 	cmpq	$0xe, %rax
    00000779: 	jbe	.Ltmp215 # Offset: 1913
    0000077f: 	cmpq	%rdx, %r11
    00000782: 	jb	.Ltmp215 # Offset: 1922
    00000788: 	movq	%r9, %rdx
    0000078b: 	leaq	(%rbx,%r13), %r8
    0000078f: 	leaq	(%rbp,%r13), %rcx
    00000794: 	xorl	%eax, %eax
    00000796: 	movdqa	DATAat0x32530(%rip), %xmm0
    0000079e: 	andq	$-0x10, %rdx
    000007a2: 	pxor	%xmm4, %xmm4
    000007a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp216:
    000007b0: 	movdqu	(%rcx,%rax), %xmm3
    000007b5: 	movdqu	(%r8,%rax), %xmm1
    000007bb: 	addq	$0x10, %rax
    000007bf: 	movdqa	%xmm1, %xmm2
    000007c3: 	movdqa	%xmm3, %xmm5
    000007c7: 	punpcklbw	%xmm1, %xmm2
    000007cb: 	punpcklbw	%xmm3, %xmm5
    000007cf: 	punpckhbw	%xmm1, %xmm1
    000007d3: 	punpckhbw	%xmm3, %xmm3
    000007d7: 	pmullw	%xmm5, %xmm2
    000007db: 	pmullw	%xmm3, %xmm1
    000007df: 	pand	%xmm0, %xmm2
    000007e3: 	pand	%xmm0, %xmm1
    000007e7: 	packuswb	%xmm1, %xmm2
    000007eb: 	paddb	%xmm2, %xmm4
    000007ef: 	cmpq	%rdx, %rax
    000007f2: 	jne	.Ltmp216 # Offset: 2034
    000007f4: 	movdqa	%xmm4, %xmm0
    000007f8: 	psrldq	$0x8, %xmm0
    000007fd: 	paddb	%xmm0, %xmm4
    00000801: 	pxor	%xmm0, %xmm0
    00000805: 	psadbw	%xmm0, %xmm4
    00000809: 	movd	%xmm4, %eax
    0000080d: 	addl	%eax, %esi
    0000080f: 	movq	%r9, %rax
    00000812: 	andq	$-0x10, %rax
    00000816: 	addq	%rax, %r13
    00000819: 	cmpq	%r9, %rax
    0000081c: 	je	.Ltmp214 # Offset: 2076
    00000822: 	leaq	0x1(%r13), %rdx
.Ltmp215:
    00000826: 	movzbl	(%rbx,%r13), %eax
    0000082b: 	mulb	(%rbp,%r13)
    00000830: 	addl	%eax, %esi
    00000832: 	cmpq	%r11, %rdx
    00000835: 	jae	.Ltmp214 # Offset: 2101
.Ltmp219:
    0000083b: 	movzbl	(%rbx,%rdx), %eax
    0000083f: 	mulb	(%rbp,%rdx)
    00000843: 	addl	%eax, %esi
    00000845: 	leaq	0x1(%rdx), %rax
    00000849: 	cmpq	%rax, %r11
    0000084c: 	jbe	.Ltmp214 # Offset: 2124
    00000852: 	movzbl	0x1(%rbx,%rdx), %eax
    00000857: 	mulb	0x1(%rbp,%rdx)
    0000085b: 	addl	%eax, %esi
    0000085d: 	leaq	0x2(%rdx), %rax
    00000861: 	cmpq	%r11, %rax
    00000864: 	jae	.Ltmp214 # Offset: 2148
    0000086a: 	movzbl	0x2(%rbx,%rdx), %eax
    0000086f: 	mulb	0x2(%rbp,%rdx)
    00000873: 	addl	%eax, %esi
    00000875: 	leaq	0x3(%rdx), %rax
    00000879: 	cmpq	%rax, %r11
    0000087c: 	jbe	.Ltmp214 # Offset: 2172
    00000882: 	movzbl	0x3(%rbx,%rdx), %eax
    00000887: 	mulb	0x3(%rbp,%rdx)
    0000088b: 	addl	%eax, %esi
    0000088d: 	leaq	0x4(%rdx), %rax
    00000891: 	cmpq	%rax, %r11
    00000894: 	jbe	.Ltmp214 # Offset: 2196
    0000089a: 	movzbl	0x4(%rbx,%rdx), %eax
    0000089f: 	mulb	0x4(%rbp,%rdx)
    000008a3: 	addl	%eax, %esi
    000008a5: 	leaq	0x5(%rdx), %rax
    000008a9: 	cmpq	%rax, %r11
    000008ac: 	jbe	.Ltmp214 # Offset: 2220
    000008b2: 	movzbl	0x5(%rbx,%rdx), %eax
    000008b7: 	mulb	0x5(%rbp,%rdx)
    000008bb: 	addl	%eax, %esi
    000008bd: 	leaq	0x6(%rdx), %rax
    000008c1: 	cmpq	%rax, %r11
    000008c4: 	jbe	.Ltmp214 # Offset: 2244
    000008ca: 	movzbl	0x6(%rbx,%rdx), %eax
    000008cf: 	mulb	0x6(%rbp,%rdx)
    000008d3: 	addl	%eax, %esi
    000008d5: 	leaq	0x7(%rdx), %rax
    000008d9: 	cmpq	%r11, %rax
    000008dc: 	jae	.Ltmp214 # Offset: 2268
    000008e2: 	movzbl	0x7(%rbx,%rdx), %eax
    000008e7: 	mulb	0x7(%rbp,%rdx)
    000008eb: 	addl	%eax, %esi
    000008ed: 	leaq	0x8(%rdx), %rax
    000008f1: 	cmpq	%rax, %r11
    000008f4: 	jbe	.Ltmp214 # Offset: 2292
    000008f6: 	movzbl	0x8(%rbx,%rdx), %eax
    000008fb: 	mulb	0x8(%rbp,%rdx)
    000008ff: 	addl	%eax, %esi
    00000901: 	leaq	0x9(%rdx), %rax
    00000905: 	cmpq	%rax, %r11
    00000908: 	jbe	.Ltmp214 # Offset: 2312
    0000090a: 	movzbl	0x9(%rbx,%rdx), %eax
    0000090f: 	mulb	0x9(%rbp,%rdx)
    00000913: 	addl	%eax, %esi
    00000915: 	leaq	0xa(%rdx), %rax
    00000919: 	cmpq	%rax, %r11
    0000091c: 	jbe	.Ltmp214 # Offset: 2332
    0000091e: 	movzbl	0xa(%rbx,%rdx), %eax
    00000923: 	mulb	0xa(%rbp,%rdx)
    00000927: 	addl	%eax, %esi
    00000929: 	leaq	0xb(%rdx), %rax
    0000092d: 	cmpq	%rax, %r11
    00000930: 	jbe	.Ltmp214 # Offset: 2352
    00000932: 	movzbl	0xb(%rbx,%rdx), %eax
    00000937: 	mulb	0xb(%rbp,%rdx)
    0000093b: 	addl	%eax, %esi
    0000093d: 	leaq	0xc(%rdx), %rax
    00000941: 	cmpq	%rax, %r11
    00000944: 	jbe	.Ltmp214 # Offset: 2372
    00000946: 	movzbl	0xc(%rbx,%rdx), %eax
    0000094b: 	mulb	0xc(%rbp,%rdx)
    0000094f: 	addl	%eax, %esi
    00000951: 	leaq	0xd(%rdx), %rax
    00000955: 	cmpq	%rax, %r11
    00000958: 	jbe	.Ltmp214 # Offset: 2392
    0000095a: 	movzbl	0xd(%rbp,%rdx), %eax
    0000095f: 	mulb	0xd(%rbx,%rdx)
    00000963: 	addl	%eax, %esi
.Ltmp214:
    00000965: 	addq	$0x350, %rsp
    0000096c: 	leal	(%rsi,%rdi), %eax
    0000096f: 	popq	%rbx
    00000970: 	popq	%rbp
    00000971: 	popq	%r12
    00000973: 	popq	%r13
    00000975: 	retq # Offset: 2421
    00000976: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp210:
    00000980: 	movq	%rbx, %rcx
    00000983: 	movq	%rbp, %rdx
    00000986: 	xorl	%edi, %edi
    00000988: 	xorl	%r8d, %r8d
    0000098b: 	xorl	%r9d, %r9d
    0000098e: 	xorl	%esi, %esi
    00000990: 	xorl	%r13d, %r13d
    00000993: 	nopl	(%rax,%rax) # Size: 5
.Ltmp217:
    00000998: 	movzbl	0x4(%rdx), %eax
    0000099c: 	mulb	0x4(%rcx)
    0000099f: 	addq	$0x8, %r13
    000009a3: 	addq	$0x8, %rcx
    000009a7: 	addq	$0x8, %rdx
    000009ab: 	movl	%eax, %r10d
    000009ae: 	movzbl	-0x8(%rdx), %eax
    000009b2: 	mulb	-0x8(%rcx)
    000009b5: 	addl	%r10d, %eax
    000009b8: 	addl	%eax, %esi
    000009ba: 	movzbl	-0x3(%rdx), %eax
    000009be: 	mulb	-0x3(%rcx)
    000009c1: 	movl	%eax, %r10d
    000009c4: 	movzbl	-0x7(%rdx), %eax
    000009c8: 	mulb	-0x7(%rcx)
    000009cb: 	addl	%r10d, %eax
    000009ce: 	addl	%eax, %r9d
    000009d1: 	movzbl	-0x2(%rdx), %eax
    000009d5: 	mulb	-0x2(%rcx)
    000009d8: 	movl	%eax, %r10d
    000009db: 	movzbl	-0x6(%rdx), %eax
    000009df: 	mulb	-0x6(%rcx)
    000009e2: 	addl	%r10d, %eax
    000009e5: 	addl	%eax, %r8d
    000009e8: 	movzbl	-0x1(%rdx), %eax
    000009ec: 	mulb	-0x1(%rcx)
    000009ef: 	movl	%eax, %r10d
    000009f2: 	movzbl	-0x5(%rdx), %eax
    000009f6: 	mulb	-0x5(%rcx)
    000009f9: 	addl	%r10d, %eax
    000009fc: 	addl	%eax, %edi
    000009fe: 	cmpq	%r13, %r12
    00000a01: 	ja	.Ltmp217 # Offset: 2561
    00000a03: 	jmp	.Ltmp218 # Offset: 2563
    00000a08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp209:
    00000a10: 	movzbl	(%rdi), %eax
    00000a13: 	mulb	(%rsi)
    00000a15: 	movl	$0x1, %edx
    00000a1a: 	xorl	%edi, %edi
    00000a1c: 	movl	%eax, %esi
    00000a1e: 	jmp	.Ltmp219 # Offset: 2590
.Ltmp212:
    00000a23: 	movq	%xmm11, %r13
    00000a28: 	jmp	.Ltmp218 # Offset: 2600
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKhhET0_T_S3_m"

Binary Function "_Z15inner_product10IPKhhET0_T_S3_m" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0xc2b0
  Size        : 0x13f4
  MaxSize     : 0x1400
  Offset      : 0xc2b0
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKhhET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r11
    00000009: 	movq	%rdx, %r10
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdx, %rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rsi, %rbx
    00000016: 	subq	$0x130, %rsp
    0000001d: 	subq	$0xf, %rbp
    00000021: 	je	.Ltmp220 # Offset: 33
    00000027: 	leaq	-0x10(%rdx), %r8
    0000002b: 	cmpq	$-0x10, %rbp
    0000002f: 	ja	.Ltmp221 # Offset: 47
    00000035: 	cmpq	$0xff, %r8
    0000003c: 	jbe	.Ltmp221 # Offset: 60
    00000042: 	pxor	%xmm7, %xmm7
    00000046: 	shrq	$0x8, %r8
    0000004a: 	movq	%rdi, %rdx
    0000004d: 	movq	%rsi, %rax
    00000050: 	movdqa	DATAat0x32530(%rip), %xmm15
    00000059: 	xorl	%ecx, %ecx
    0000005b: 	movaps	%xmm7, -0x28(%rsp)
    00000060: 	movaps	%xmm7, -0x18(%rsp)
    00000065: 	movaps	%xmm7, -0x8(%rsp)
    0000006a: 	movaps	%xmm7, 0x8(%rsp)
    0000006f: 	nop # Size: 1
.Ltmp222:
    00000070: 	movdqu	(%rdx), %xmm12
    00000075: 	movdqu	0x10(%rdx), %xmm0
    0000007a: 	addq	$0x1, %rcx
    0000007e: 	addq	$0x100, %rdx
    00000085: 	movdqu	-0x100(%rdx), %xmm5
    0000008d: 	movdqu	-0x80(%rdx), %xmm8
    00000093: 	addq	$0x100, %rax
    00000099: 	pand	%xmm15, %xmm0
    0000009e: 	pand	%xmm15, %xmm12
    000000a3: 	movdqu	-0xe0(%rdx), %xmm11
    000000ac: 	movdqu	-0xe0(%rdx), %xmm4
    000000b4: 	packuswb	%xmm0, %xmm12
    000000b9: 	movdqu	-0xf0(%rdx), %xmm0
    000000c1: 	psrlw	$0x8, %xmm5
    000000c6: 	movdqu	-0xc0(%rdx), %xmm10
    000000cf: 	pand	%xmm15, %xmm11
    000000d4: 	psrlw	$0x8, %xmm4
    000000d9: 	movdqu	-0xc0(%rdx), %xmm3
    000000e1: 	movdqu	-0xa0(%rdx), %xmm9
    000000ea: 	psrlw	$0x8, %xmm0
    000000ef: 	pand	%xmm15, %xmm10
    000000f4: 	pand	%xmm15, %xmm8
    000000f9: 	movdqu	-0xa0(%rdx), %xmm2
    00000101: 	packuswb	%xmm0, %xmm5
    00000105: 	psrlw	$0x8, %xmm3
    0000010a: 	pand	%xmm15, %xmm9
    0000010f: 	movdqu	-0xd0(%rdx), %xmm0
    00000117: 	psrlw	$0x8, %xmm2
    0000011c: 	movdqu	-0x80(%rdx), %xmm1
    00000121: 	movdqu	-0x60(%rdx), %xmm7
    00000126: 	pand	%xmm15, %xmm0
    0000012b: 	movdqu	-0x50(%rdx), %xmm6
    00000130: 	movdqu	-0x40(%rdx), %xmm13
    00000136: 	packuswb	%xmm0, %xmm11
    0000013b: 	psrlw	$0x8, %xmm1
    00000140: 	pand	%xmm15, %xmm7
    00000145: 	movdqu	-0xd0(%rdx), %xmm0
    0000014d: 	psrlw	$0x8, %xmm6
    00000152: 	pand	%xmm15, %xmm13
    00000157: 	psrlw	$0x8, %xmm0
    0000015c: 	packuswb	%xmm0, %xmm4
    00000160: 	movdqu	-0xb0(%rdx), %xmm0
    00000168: 	pand	%xmm15, %xmm0
    0000016d: 	packuswb	%xmm0, %xmm10
    00000172: 	movdqu	-0xb0(%rdx), %xmm0
    0000017a: 	psrlw	$0x8, %xmm0
    0000017f: 	packuswb	%xmm0, %xmm3
    00000183: 	movdqu	-0x90(%rdx), %xmm0
    0000018b: 	pand	%xmm15, %xmm0
    00000190: 	packuswb	%xmm0, %xmm9
    00000195: 	movdqu	-0x90(%rdx), %xmm0
    0000019d: 	psrlw	$0x8, %xmm0
    000001a2: 	packuswb	%xmm0, %xmm2
    000001a6: 	movdqu	-0x70(%rdx), %xmm0
    000001ab: 	pand	%xmm15, %xmm0
    000001b0: 	packuswb	%xmm0, %xmm8
    000001b5: 	movdqu	-0x70(%rdx), %xmm0
    000001ba: 	psrlw	$0x8, %xmm0
    000001bf: 	packuswb	%xmm0, %xmm1
    000001c3: 	movdqu	-0x50(%rdx), %xmm0
    000001c8: 	pand	%xmm15, %xmm0
    000001cd: 	packuswb	%xmm0, %xmm7
    000001d1: 	movdqu	-0x60(%rdx), %xmm0
    000001d6: 	psrlw	$0x8, %xmm0
    000001db: 	movdqa	%xmm0, %xmm14
    000001e0: 	packuswb	%xmm6, %xmm14
    000001e5: 	movdqu	-0x30(%rdx), %xmm6
    000001ea: 	movaps	%xmm14, -0x48(%rsp)
    000001f0: 	movdqa	%xmm13, %xmm14
    000001f5: 	movdqu	-0x40(%rdx), %xmm13
    000001fb: 	pand	%xmm15, %xmm6
    00000200: 	packuswb	%xmm6, %xmm14
    00000205: 	movdqu	-0x30(%rdx), %xmm6
    0000020a: 	psrlw	$0x8, %xmm13
    00000210: 	movaps	%xmm14, -0x38(%rsp)
    00000216: 	movdqa	%xmm13, %xmm14
    0000021b: 	psrlw	$0x8, %xmm6
    00000220: 	packuswb	%xmm6, %xmm14
    00000225: 	movdqu	-0x20(%rdx), %xmm6
    0000022a: 	movaps	%xmm14, 0x18(%rsp)
    00000230: 	movdqu	-0x10(%rdx), %xmm13
    00000236: 	movdqu	-0x20(%rdx), %xmm0
    0000023b: 	pand	%xmm15, %xmm6
    00000240: 	pand	%xmm15, %xmm13
    00000245: 	psrlw	$0x8, %xmm0
    0000024a: 	packuswb	%xmm13, %xmm6
    0000024f: 	movdqu	-0x10(%rdx), %xmm13
    00000255: 	movdqa	%xmm0, %xmm14
    0000025a: 	movdqa	%xmm15, %xmm0
    0000025f: 	pand	%xmm11, %xmm0
    00000264: 	psrlw	$0x8, %xmm11
    0000026a: 	psrlw	$0x8, %xmm13
    00000270: 	movaps	%xmm0, -0x78(%rsp)
    00000275: 	packuswb	%xmm13, %xmm14
    0000027a: 	movdqa	%xmm15, %xmm13
    0000027f: 	pand	%xmm12, %xmm13
    00000284: 	psrlw	$0x8, %xmm12
    0000028a: 	movdqa	%xmm13, %xmm0
    0000028f: 	movdqa	%xmm12, %xmm13
    00000294: 	packuswb	-0x78(%rsp), %xmm0
    0000029a: 	movdqa	%xmm15, %xmm12
    0000029f: 	packuswb	%xmm11, %xmm13
    000002a4: 	movdqa	%xmm15, %xmm11
    000002a9: 	pand	%xmm10, %xmm12
    000002ae: 	movaps	%xmm0, -0x78(%rsp)
    000002b3: 	psrlw	$0x8, %xmm10
    000002b9: 	pand	%xmm9, %xmm11
    000002be: 	movdqa	%xmm12, %xmm0
    000002c3: 	movdqa	%xmm10, %xmm12
    000002c8: 	movdqa	%xmm15, %xmm10
    000002cd: 	movaps	%xmm13, 0x28(%rsp)
    000002d3: 	pand	%xmm8, %xmm10
    000002d8: 	psrlw	$0x8, %xmm9
    000002de: 	packuswb	%xmm11, %xmm0
    000002e3: 	packuswb	%xmm9, %xmm12
    000002e8: 	movdqa	%xmm10, %xmm11
    000002ed: 	movdqa	%xmm15, %xmm9
    000002f2: 	movdqa	-0x38(%rsp), %xmm10
    000002f9: 	pand	%xmm7, %xmm9
    000002fe: 	psrlw	$0x8, %xmm8
    00000304: 	movaps	%xmm12, 0x38(%rsp)
    0000030a: 	packuswb	%xmm9, %xmm11
    0000030f: 	psrlw	$0x8, %xmm7
    00000314: 	movdqa	%xmm8, %xmm9
    00000319: 	movaps	%xmm0, -0x68(%rsp)
    0000031e: 	movdqa	%xmm10, %xmm8
    00000323: 	packuswb	%xmm7, %xmm9
    00000328: 	movdqa	%xmm15, %xmm7
    0000032d: 	movaps	%xmm11, -0x58(%rsp)
    00000333: 	pand	%xmm15, %xmm8
    00000338: 	psrlw	$0x8, %xmm10
    0000033e: 	pand	%xmm6, %xmm7
    00000342: 	movaps	%xmm9, 0x48(%rsp)
    00000348: 	movdqa	%xmm8, %xmm12
    0000034d: 	psrlw	$0x8, %xmm6
    00000352: 	movdqa	%xmm10, %xmm8
    00000357: 	packuswb	%xmm6, %xmm8
    0000035c: 	movdqa	%xmm15, %xmm10
    00000361: 	movdqa	%xmm15, %xmm6
    00000366: 	pand	%xmm4, %xmm6
    0000036a: 	pand	%xmm5, %xmm10
    0000036f: 	packuswb	%xmm7, %xmm12
    00000374: 	movdqa	0x18(%rsp), %xmm7
    0000037a: 	psrlw	$0x8, %xmm5
    0000037f: 	psrlw	$0x8, %xmm4
    00000384: 	packuswb	%xmm6, %xmm10
    00000389: 	movaps	%xmm12, 0x58(%rsp)
    0000038f: 	movdqa	%xmm5, %xmm6
    00000393: 	movdqa	%xmm15, %xmm5
    00000398: 	movaps	%xmm8, 0x68(%rsp)
    0000039e: 	packuswb	%xmm4, %xmm6
    000003a2: 	pand	%xmm3, %xmm5
    000003a6: 	movdqa	%xmm15, %xmm4
    000003ab: 	movaps	%xmm10, 0x78(%rsp)
    000003b1: 	psrlw	$0x8, %xmm3
    000003b6: 	pand	%xmm2, %xmm4
    000003ba: 	movdqa	%xmm5, %xmm13
    000003bf: 	movaps	%xmm6, 0x88(%rsp)
    000003c7: 	psrlw	$0x8, %xmm2
    000003cc: 	movdqa	%xmm3, %xmm5
    000003d0: 	movdqa	%xmm15, %xmm3
    000003d5: 	packuswb	%xmm2, %xmm5
    000003d9: 	pand	%xmm1, %xmm3
    000003dd: 	movdqa	%xmm15, %xmm2
    000003e2: 	movaps	%xmm5, 0xa8(%rsp)
    000003ea: 	movdqa	-0x48(%rsp), %xmm5
    000003f0: 	packuswb	%xmm4, %xmm13
    000003f5: 	psrlw	$0x8, %xmm1
    000003fa: 	movaps	%xmm13, 0x98(%rsp)
    00000403: 	movdqa	%xmm3, %xmm4
    00000407: 	movdqa	%xmm1, %xmm3
    0000040b: 	movdqa	%xmm7, %xmm1
    0000040f: 	pand	%xmm5, %xmm2
    00000413: 	movdqa	%xmm5, %xmm0
    00000417: 	pand	%xmm15, %xmm1
    0000041c: 	packuswb	%xmm2, %xmm4
    00000420: 	psrlw	$0x8, %xmm0
    00000425: 	movdqa	%xmm15, %xmm2
    0000042a: 	pand	%xmm14, %xmm2
    0000042f: 	packuswb	%xmm0, %xmm3
    00000433: 	movaps	%xmm4, 0xb8(%rsp)
    0000043b: 	movdqa	%xmm2, %xmm0
    0000043f: 	movdqa	%xmm1, %xmm2
    00000443: 	movdqa	%xmm7, %xmm1
    00000447: 	movaps	%xmm3, 0xc8(%rsp)
    0000044f: 	psrlw	$0x8, %xmm1
    00000454: 	packuswb	%xmm0, %xmm2
    00000458: 	movdqu	-0xf0(%rax), %xmm3
    00000460: 	movdqa	%xmm1, %xmm0
    00000464: 	movdqa	%xmm14, %xmm1
    00000469: 	movaps	%xmm2, 0x18(%rsp)
    0000046e: 	psrlw	$0x8, %xmm1
    00000473: 	psrlw	$0x8, %xmm3
    00000478: 	movdqa	%xmm0, %xmm4
    0000047c: 	packuswb	%xmm1, %xmm4
    00000480: 	movdqu	-0x100(%rax), %xmm1
    00000488: 	movaps	%xmm4, 0xd8(%rsp)
    00000490: 	pand	%xmm15, %xmm1
    00000495: 	movdqa	%xmm1, %xmm13
    0000049a: 	movdqu	-0xf0(%rax), %xmm1
    000004a2: 	pand	%xmm15, %xmm1
    000004a7: 	packuswb	%xmm1, %xmm13
    000004ac: 	movdqu	-0x100(%rax), %xmm1
    000004b4: 	psrlw	$0x8, %xmm1
    000004b9: 	movdqa	%xmm1, %xmm11
    000004be: 	movdqu	-0xe0(%rax), %xmm1
    000004c6: 	packuswb	%xmm3, %xmm11
    000004cb: 	movaps	%xmm11, 0xe8(%rsp)
    000004d4: 	pand	%xmm15, %xmm1
    000004d9: 	movdqa	%xmm1, %xmm12
    000004de: 	movdqu	-0xd0(%rax), %xmm1
    000004e6: 	pand	%xmm15, %xmm1
    000004eb: 	packuswb	%xmm1, %xmm12
    000004f0: 	movdqu	-0xe0(%rax), %xmm1
    000004f8: 	movdqu	-0xd0(%rax), %xmm3
    00000500: 	psrlw	$0x8, %xmm1
    00000505: 	psrlw	$0x8, %xmm3
    0000050a: 	movdqa	%xmm3, %xmm0
    0000050e: 	movdqa	%xmm1, %xmm3
    00000512: 	movdqu	-0xc0(%rax), %xmm1
    0000051a: 	packuswb	%xmm0, %xmm3
    0000051e: 	movdqu	-0xb0(%rax), %xmm0
    00000526: 	pand	%xmm15, %xmm1
    0000052b: 	movaps	%xmm3, 0xf8(%rsp)
    00000533: 	movdqu	-0x30(%rax), %xmm3
    00000538: 	movdqa	%xmm1, %xmm11
    0000053d: 	movdqu	-0xb0(%rax), %xmm1
    00000545: 	psrlw	$0x8, %xmm0
    0000054a: 	psrlw	$0x8, %xmm3
    0000054f: 	pand	%xmm15, %xmm1
    00000554: 	packuswb	%xmm1, %xmm11
    00000559: 	movdqu	-0xc0(%rax), %xmm1
    00000561: 	psrlw	$0x8, %xmm1
    00000566: 	movdqa	%xmm1, %xmm2
    0000056a: 	movdqu	-0xa0(%rax), %xmm1
    00000572: 	packuswb	%xmm0, %xmm2
    00000576: 	pand	%xmm15, %xmm1
    0000057b: 	movdqa	%xmm2, %xmm14
    00000580: 	movdqu	-0x40(%rax), %xmm2
    00000585: 	movdqa	%xmm1, %xmm10
    0000058a: 	movdqu	-0x90(%rax), %xmm1
    00000592: 	pand	%xmm15, %xmm2
    00000597: 	pand	%xmm15, %xmm1
    0000059c: 	packuswb	%xmm1, %xmm10
    000005a1: 	movdqu	-0xa0(%rax), %xmm1
    000005a9: 	psrlw	$0x8, %xmm1
    000005ae: 	movdqa	%xmm1, %xmm5
    000005b2: 	movdqu	-0x90(%rax), %xmm1
    000005ba: 	psrlw	$0x8, %xmm1
    000005bf: 	packuswb	%xmm1, %xmm5
    000005c3: 	movdqu	-0x80(%rax), %xmm1
    000005c8: 	pand	%xmm15, %xmm1
    000005cd: 	movdqa	%xmm1, %xmm9
    000005d2: 	movdqu	-0x70(%rax), %xmm1
    000005d7: 	pand	%xmm15, %xmm1
    000005dc: 	packuswb	%xmm1, %xmm9
    000005e1: 	movdqu	-0x80(%rax), %xmm1
    000005e6: 	psrlw	$0x8, %xmm1
    000005eb: 	movdqa	%xmm1, %xmm0
    000005ef: 	movdqu	-0x70(%rax), %xmm1
    000005f4: 	psrlw	$0x8, %xmm1
    000005f9: 	packuswb	%xmm1, %xmm0
    000005fd: 	movdqu	-0x60(%rax), %xmm1
    00000602: 	pand	%xmm15, %xmm1
    00000607: 	movdqa	%xmm1, %xmm8
    0000060c: 	movdqu	-0x50(%rax), %xmm1
    00000611: 	pand	%xmm15, %xmm1
    00000616: 	packuswb	%xmm1, %xmm8
    0000061b: 	movdqu	-0x60(%rax), %xmm1
    00000620: 	psrlw	$0x8, %xmm1
    00000625: 	movdqa	%xmm1, %xmm4
    00000629: 	movdqu	-0x50(%rax), %xmm1
    0000062e: 	psrlw	$0x8, %xmm1
    00000633: 	packuswb	%xmm1, %xmm4
    00000637: 	movdqu	-0x30(%rax), %xmm1
    0000063c: 	pand	%xmm15, %xmm1
    00000641: 	packuswb	%xmm1, %xmm2
    00000645: 	movdqu	-0x40(%rax), %xmm1
    0000064a: 	psrlw	$0x8, %xmm1
    0000064f: 	movdqa	%xmm1, %xmm7
    00000653: 	movdqu	-0x20(%rax), %xmm1
    00000658: 	packuswb	%xmm3, %xmm7
    0000065c: 	pand	%xmm15, %xmm1
    00000661: 	movaps	%xmm7, 0x108(%rsp)
    00000669: 	movdqa	%xmm1, %xmm7
    0000066d: 	movdqu	-0x10(%rax), %xmm1
    00000672: 	pand	%xmm15, %xmm1
    00000677: 	packuswb	%xmm1, %xmm7
    0000067b: 	movdqu	-0x20(%rax), %xmm1
    00000680: 	psrlw	$0x8, %xmm1
    00000685: 	movdqa	%xmm1, %xmm3
    00000689: 	movdqu	-0x10(%rax), %xmm1
    0000068e: 	psrlw	$0x8, %xmm1
    00000693: 	packuswb	%xmm1, %xmm3
    00000697: 	movdqa	%xmm15, %xmm1
    0000069c: 	pand	%xmm13, %xmm1
    000006a1: 	psrlw	$0x8, %xmm13
    000006a7: 	movdqa	%xmm1, %xmm6
    000006ab: 	movdqa	%xmm15, %xmm1
    000006b0: 	pand	%xmm12, %xmm1
    000006b5: 	psrlw	$0x8, %xmm12
    000006bb: 	packuswb	%xmm1, %xmm6
    000006bf: 	movdqa	%xmm13, %xmm1
    000006c4: 	movdqa	0xf8(%rsp), %xmm13
    000006ce: 	packuswb	%xmm12, %xmm1
    000006d3: 	movaps	%xmm1, -0x48(%rsp)
    000006d8: 	movdqa	%xmm15, %xmm1
    000006dd: 	pand	%xmm11, %xmm1
    000006e2: 	psrlw	$0x8, %xmm11
    000006e8: 	movdqa	%xmm1, %xmm12
    000006ed: 	movdqa	%xmm15, %xmm1
    000006f2: 	pand	%xmm10, %xmm1
    000006f7: 	psrlw	$0x8, %xmm10
    000006fd: 	packuswb	%xmm1, %xmm12
    00000702: 	movdqa	%xmm11, %xmm1
    00000707: 	movdqa	0xe8(%rsp), %xmm11
    00000711: 	packuswb	%xmm10, %xmm1
    00000716: 	movdqa	%xmm15, %xmm10
    0000071b: 	movaps	%xmm1, -0x38(%rsp)
    00000720: 	movdqa	%xmm15, %xmm1
    00000725: 	pand	%xmm9, %xmm10
    0000072a: 	pand	%xmm8, %xmm1
    0000072f: 	psrlw	$0x8, %xmm9
    00000735: 	packuswb	%xmm1, %xmm10
    0000073a: 	psrlw	$0x8, %xmm8
    00000740: 	movdqa	%xmm9, %xmm1
    00000745: 	movdqa	%xmm15, %xmm9
    0000074a: 	packuswb	%xmm8, %xmm1
    0000074f: 	pand	%xmm2, %xmm9
    00000754: 	psrlw	$0x8, %xmm2
    00000759: 	movaps	%xmm1, 0x118(%rsp)
    00000761: 	movdqa	0x108(%rsp), %xmm1
    0000076a: 	movdqa	%xmm9, %xmm8
    0000076f: 	movdqa	%xmm15, %xmm9
    00000774: 	pand	%xmm7, %xmm9
    00000779: 	psrlw	$0x8, %xmm7
    0000077e: 	packuswb	%xmm9, %xmm8
    00000783: 	packuswb	%xmm7, %xmm2
    00000787: 	movdqa	%xmm11, %xmm9
    0000078c: 	movdqa	%xmm13, %xmm7
    00000791: 	psrlw	$0x8, %xmm11
    00000797: 	pand	%xmm15, %xmm9
    0000079c: 	pand	%xmm15, %xmm7
    000007a1: 	packuswb	%xmm7, %xmm9
    000007a6: 	movdqa	%xmm11, %xmm7
    000007ab: 	movdqa	%xmm13, %xmm11
    000007b0: 	psrlw	$0x8, %xmm11
    000007b6: 	movdqa	%xmm15, %xmm13
    000007bb: 	packuswb	%xmm11, %xmm7
    000007c0: 	movdqa	%xmm15, %xmm11
    000007c5: 	pand	%xmm5, %xmm13
    000007ca: 	pand	%xmm14, %xmm11
    000007cf: 	psrlw	$0x8, %xmm5
    000007d4: 	packuswb	%xmm13, %xmm11
    000007d9: 	movdqa	%xmm14, %xmm13
    000007de: 	movdqa	%xmm15, %xmm14
    000007e3: 	psrlw	$0x8, %xmm13
    000007e9: 	pand	%xmm4, %xmm14
    000007ee: 	packuswb	%xmm5, %xmm13
    000007f3: 	psrlw	$0x8, %xmm4
    000007f8: 	movdqa	%xmm15, %xmm5
    000007fd: 	pand	%xmm0, %xmm5
    00000801: 	psrlw	$0x8, %xmm0
    00000806: 	packuswb	%xmm14, %xmm5
    0000080b: 	packuswb	%xmm4, %xmm0
    0000080f: 	movdqa	%xmm15, %xmm14
    00000814: 	movdqa	%xmm15, %xmm4
    00000819: 	pand	%xmm3, %xmm14
    0000081e: 	pand	%xmm1, %xmm4
    00000822: 	psrlw	$0x8, %xmm3
    00000827: 	psrlw	$0x8, %xmm1
    0000082c: 	packuswb	%xmm14, %xmm4
    00000831: 	movdqa	%xmm15, %xmm14
    00000836: 	packuswb	%xmm3, %xmm1
    0000083a: 	movdqa	%xmm15, %xmm3
    0000083f: 	pand	%xmm12, %xmm14
    00000844: 	pand	%xmm6, %xmm3
    00000848: 	psrlw	$0x8, %xmm6
    0000084d: 	packuswb	%xmm14, %xmm3
    00000852: 	psrlw	$0x8, %xmm12
    00000858: 	movdqa	%xmm6, %xmm14
    0000085d: 	packuswb	%xmm12, %xmm14
    00000862: 	movdqa	%xmm15, %xmm6
    00000867: 	movdqa	%xmm15, %xmm12
    0000086c: 	pand	%xmm8, %xmm12
    00000871: 	psrlw	$0x8, %xmm8
    00000877: 	pand	%xmm10, %xmm6
    0000087c: 	psrlw	$0x8, %xmm10
    00000882: 	packuswb	%xmm12, %xmm6
    00000887: 	movdqa	%xmm10, %xmm12
    0000088c: 	movdqa	%xmm15, %xmm10
    00000891: 	packuswb	%xmm8, %xmm12
    00000896: 	movdqa	%xmm15, %xmm8
    0000089b: 	pand	%xmm9, %xmm10
    000008a0: 	pand	%xmm11, %xmm8
    000008a5: 	psrlw	$0x8, %xmm9
    000008ab: 	packuswb	%xmm8, %xmm10
    000008b0: 	psrlw	$0x8, %xmm11
    000008b6: 	movdqa	%xmm9, %xmm8
    000008bb: 	packuswb	%xmm11, %xmm8
    000008c0: 	movdqa	%xmm15, %xmm9
    000008c5: 	movdqa	%xmm15, %xmm11
    000008ca: 	pand	%xmm4, %xmm11
    000008cf: 	pand	%xmm5, %xmm9
    000008d4: 	movaps	%xmm8, 0xe8(%rsp)
    000008dd: 	psrlw	$0x8, %xmm5
    000008e2: 	psrlw	$0x8, %xmm4
    000008e7: 	packuswb	%xmm11, %xmm9
    000008ec: 	movdqa	%xmm5, %xmm11
    000008f1: 	movdqa	-0x48(%rsp), %xmm5
    000008f7: 	packuswb	%xmm4, %xmm11
    000008fc: 	movdqa	-0x38(%rsp), %xmm4
    00000902: 	pand	%xmm15, %xmm5
    00000907: 	movdqa	%xmm11, %xmm8
    0000090c: 	pand	%xmm15, %xmm4
    00000911: 	movdqa	%xmm5, %xmm11
    00000916: 	movdqa	-0x38(%rsp), %xmm5
    0000091c: 	packuswb	%xmm4, %xmm11
    00000921: 	movdqa	-0x48(%rsp), %xmm4
    00000927: 	movaps	%xmm11, 0xf8(%rsp)
    00000930: 	psrlw	$0x8, %xmm5
    00000935: 	psrlw	$0x8, %xmm4
    0000093a: 	movdqa	%xmm4, %xmm11
    0000093f: 	movdqa	%xmm15, %xmm4
    00000944: 	packuswb	%xmm5, %xmm11
    00000949: 	pand	%xmm2, %xmm4
    0000094d: 	movaps	%xmm11, -0x48(%rsp)
    00000953: 	psrlw	$0x8, %xmm2
    00000958: 	movdqa	0x118(%rsp), %xmm11
    00000962: 	movdqa	%xmm11, %xmm5
    00000967: 	pand	%xmm15, %xmm5
    0000096c: 	packuswb	%xmm4, %xmm5
    00000970: 	movdqa	%xmm11, %xmm4
    00000975: 	psrlw	$0x8, %xmm4
    0000097a: 	movdqa	%xmm4, %xmm11
    0000097f: 	movdqa	%xmm15, %xmm4
    00000984: 	packuswb	%xmm2, %xmm11
    00000989: 	pand	%xmm7, %xmm4
    0000098d: 	movdqa	%xmm15, %xmm2
    00000992: 	pand	%xmm13, %xmm2
    00000997: 	movaps	%xmm11, -0x38(%rsp)
    0000099d: 	movdqa	%xmm4, %xmm11
    000009a2: 	movdqa	%xmm15, %xmm4
    000009a7: 	packuswb	%xmm2, %xmm11
    000009ac: 	psrlw	$0x8, %xmm7
    000009b1: 	movdqa	%xmm13, %xmm2
    000009b6: 	psrlw	$0x8, %xmm2
    000009bb: 	movdqa	%xmm7, %xmm13
    000009c0: 	pand	%xmm0, %xmm4
    000009c4: 	movaps	%xmm11, 0x108(%rsp)
    000009cd: 	packuswb	%xmm2, %xmm13
    000009d2: 	movdqa	%xmm15, %xmm2
    000009d7: 	movdqa	0x58(%rsp), %xmm11
    000009de: 	pand	%xmm1, %xmm2
    000009e2: 	psrlw	$0x8, %xmm0
    000009e7: 	psrlw	$0x8, %xmm1
    000009ec: 	packuswb	%xmm2, %xmm4
    000009f0: 	movdqa	-0x78(%rsp), %xmm2
    000009f6: 	movdqa	%xmm11, %xmm7
    000009fb: 	packuswb	%xmm1, %xmm0
    000009ff: 	movdqa	-0x68(%rsp), %xmm1
    00000a05: 	pand	%xmm15, %xmm7
    00000a0a: 	pand	%xmm15, %xmm2
    00000a0f: 	pand	%xmm15, %xmm1
    00000a14: 	packuswb	%xmm1, %xmm2
    00000a18: 	movdqa	-0x58(%rsp), %xmm1
    00000a1e: 	pand	%xmm15, %xmm2
    00000a23: 	pand	%xmm15, %xmm1
    00000a28: 	packuswb	%xmm7, %xmm1
    00000a2c: 	movdqa	%xmm15, %xmm7
    00000a31: 	pand	%xmm15, %xmm1
    00000a36: 	pand	%xmm6, %xmm7
    00000a3a: 	packuswb	%xmm1, %xmm2
    00000a3e: 	psrlw	$0x8, %xmm6
    00000a43: 	movdqa	%xmm15, %xmm1
    00000a48: 	pand	%xmm3, %xmm1
    00000a4c: 	psrlw	$0x8, %xmm3
    00000a51: 	packuswb	%xmm6, %xmm3
    00000a55: 	packuswb	%xmm7, %xmm1
    00000a59: 	movdqa	%xmm12, %xmm7
    00000a5e: 	paddb	%xmm3, %xmm1
    00000a62: 	psrlw	$0x8, %xmm7
    00000a67: 	movdqa	%xmm1, %xmm3
    00000a6b: 	punpcklbw	%xmm1, %xmm3
    00000a6f: 	punpckhbw	%xmm1, %xmm1
    00000a73: 	movdqa	%xmm3, %xmm6
    00000a77: 	movdqa	%xmm2, %xmm3
    00000a7b: 	punpcklbw	%xmm2, %xmm3
    00000a7f: 	punpckhbw	%xmm2, %xmm2
    00000a83: 	pmullw	%xmm6, %xmm3
    00000a87: 	pmullw	%xmm2, %xmm1
    00000a8b: 	movdqa	-0x68(%rsp), %xmm2
    00000a91: 	movdqa	%xmm11, %xmm6
    00000a96: 	psrlw	$0x8, %xmm6
    00000a9b: 	movdqa	0x18(%rsp), %xmm11
    00000aa2: 	psrlw	$0x8, %xmm2
    00000aa7: 	pand	%xmm15, %xmm1
    00000aac: 	pand	%xmm15, %xmm3
    00000ab1: 	packuswb	%xmm1, %xmm3
    00000ab5: 	movdqa	-0x78(%rsp), %xmm1
    00000abb: 	psrlw	$0x8, %xmm1
    00000ac0: 	packuswb	%xmm2, %xmm1
    00000ac4: 	movdqa	-0x58(%rsp), %xmm2
    00000aca: 	pand	%xmm15, %xmm1
    00000acf: 	psrlw	$0x8, %xmm2
    00000ad4: 	packuswb	%xmm6, %xmm2
    00000ad8: 	movdqa	%xmm15, %xmm6
    00000add: 	pand	%xmm15, %xmm2
    00000ae2: 	pand	%xmm12, %xmm6
    00000ae7: 	movdqa	0xb8(%rsp), %xmm12
    00000af1: 	packuswb	%xmm2, %xmm1
    00000af5: 	movdqa	%xmm15, %xmm2
    00000afa: 	pand	%xmm14, %xmm2
    00000aff: 	packuswb	%xmm6, %xmm2
    00000b03: 	movdqa	%xmm14, %xmm6
    00000b08: 	movdqa	0x98(%rsp), %xmm14
    00000b12: 	psrlw	$0x8, %xmm6
    00000b17: 	packuswb	%xmm7, %xmm6
    00000b1b: 	movdqa	%xmm1, %xmm7
    00000b1f: 	paddb	%xmm6, %xmm2
    00000b23: 	punpcklbw	%xmm1, %xmm7
    00000b27: 	punpckhbw	%xmm1, %xmm1
    00000b2b: 	movdqa	%xmm2, %xmm6
    00000b2f: 	punpcklbw	%xmm2, %xmm6
    00000b33: 	punpckhbw	%xmm2, %xmm2
    00000b37: 	pmullw	%xmm7, %xmm6
    00000b3b: 	pmullw	%xmm2, %xmm1
    00000b3f: 	movdqa	0x78(%rsp), %xmm7
    00000b45: 	movdqa	%xmm14, %xmm2
    00000b4a: 	pand	%xmm15, %xmm2
    00000b4f: 	pand	%xmm15, %xmm1
    00000b54: 	pand	%xmm15, %xmm6
    00000b59: 	packuswb	%xmm1, %xmm6
    00000b5d: 	movdqa	%xmm7, %xmm1
    00000b61: 	paddb	%xmm6, %xmm3
    00000b65: 	paddb	0x8(%rsp), %xmm3
    00000b6b: 	pand	%xmm15, %xmm1
    00000b70: 	packuswb	%xmm2, %xmm1
    00000b74: 	movdqa	%xmm12, %xmm2
    00000b79: 	movaps	%xmm3, 0x8(%rsp)
    00000b7e: 	movdqa	%xmm11, %xmm3
    00000b83: 	pand	%xmm15, %xmm2
    00000b88: 	pand	%xmm15, %xmm1
    00000b8d: 	pand	%xmm15, %xmm3
    00000b92: 	packuswb	%xmm3, %xmm2
    00000b96: 	movdqa	%xmm15, %xmm3
    00000b9b: 	pand	%xmm15, %xmm2
    00000ba0: 	pand	%xmm9, %xmm3
    00000ba5: 	packuswb	%xmm2, %xmm1
    00000ba9: 	movdqa	%xmm15, %xmm2
    00000bae: 	pand	%xmm10, %xmm2
    00000bb3: 	packuswb	%xmm3, %xmm2
    00000bb7: 	movdqa	%xmm10, %xmm3
    00000bbc: 	movdqa	%xmm9, %xmm10
    00000bc1: 	movdqa	0xf8(%rsp), %xmm9
    00000bcb: 	psrlw	$0x8, %xmm10
    00000bd1: 	psrlw	$0x8, %xmm3
    00000bd6: 	packuswb	%xmm10, %xmm3
    00000bdb: 	movdqa	%xmm1, %xmm10
    00000be0: 	paddb	%xmm3, %xmm2
    00000be4: 	punpcklbw	%xmm1, %xmm10
    00000be9: 	punpckhbw	%xmm1, %xmm1
    00000bed: 	movdqa	%xmm2, %xmm3
    00000bf1: 	punpcklbw	%xmm2, %xmm3
    00000bf5: 	punpckhbw	%xmm2, %xmm2
    00000bf9: 	pmullw	%xmm10, %xmm3
    00000bfe: 	pmullw	%xmm2, %xmm1
    00000c02: 	movdqa	%xmm14, %xmm2
    00000c07: 	movdqa	0xe8(%rsp), %xmm10
    00000c11: 	psrlw	$0x8, %xmm2
    00000c16: 	movdqa	0x48(%rsp), %xmm14
    00000c1d: 	pand	%xmm15, %xmm1
    00000c22: 	pand	%xmm15, %xmm3
    00000c27: 	packuswb	%xmm1, %xmm3
    00000c2b: 	movdqa	%xmm7, %xmm1
    00000c2f: 	movdqa	0x28(%rsp), %xmm7
    00000c35: 	psrlw	$0x8, %xmm1
    00000c3a: 	packuswb	%xmm2, %xmm1
    00000c3e: 	movdqa	%xmm12, %xmm2
    00000c43: 	movdqa	%xmm11, %xmm12
    00000c48: 	psrlw	$0x8, %xmm12
    00000c4e: 	psrlw	$0x8, %xmm2
    00000c53: 	pand	%xmm15, %xmm1
    00000c58: 	packuswb	%xmm12, %xmm2
    00000c5d: 	movdqa	%xmm15, %xmm12
    00000c62: 	pand	%xmm15, %xmm2
    00000c67: 	pand	%xmm8, %xmm12
    00000c6c: 	packuswb	%xmm2, %xmm1
    00000c70: 	movdqa	%xmm10, %xmm2
    00000c75: 	psrlw	$0x8, %xmm10
    00000c7b: 	pand	%xmm15, %xmm2
    00000c80: 	movdqa	%xmm10, %xmm6
    00000c85: 	movdqa	%xmm8, %xmm10
    00000c8a: 	packuswb	%xmm12, %xmm2
    00000c8f: 	movdqa	0x68(%rsp), %xmm8
    00000c96: 	psrlw	$0x8, %xmm10
    00000c9c: 	packuswb	%xmm10, %xmm6
    00000ca1: 	paddb	%xmm6, %xmm2
    00000ca5: 	movdqa	%xmm2, %xmm10
    00000caa: 	punpcklbw	%xmm2, %xmm10
    00000caf: 	punpckhbw	%xmm2, %xmm2
    00000cb3: 	movdqa	%xmm10, %xmm6
    00000cb8: 	movdqa	%xmm1, %xmm10
    00000cbd: 	punpcklbw	%xmm1, %xmm10
    00000cc2: 	punpckhbw	%xmm1, %xmm1
    00000cc6: 	pmullw	%xmm2, %xmm1
    00000cca: 	pmullw	%xmm10, %xmm6
    00000ccf: 	pand	%xmm15, %xmm1
    00000cd4: 	pand	%xmm15, %xmm6
    00000cd9: 	packuswb	%xmm1, %xmm6
    00000cdd: 	movdqa	%xmm7, %xmm1
    00000ce1: 	paddb	%xmm6, %xmm3
    00000ce5: 	movdqa	0x38(%rsp), %xmm6
    00000ceb: 	paddb	-0x8(%rsp), %xmm3
    00000cf1: 	pand	%xmm15, %xmm1
    00000cf6: 	movdqa	%xmm6, %xmm2
    00000cfa: 	movaps	%xmm3, -0x8(%rsp)
    00000cff: 	movdqa	%xmm8, %xmm3
    00000d04: 	pand	%xmm15, %xmm2
    00000d09: 	psrlw	$0x8, %xmm8
    00000d0f: 	pand	%xmm15, %xmm3
    00000d14: 	packuswb	%xmm2, %xmm1
    00000d18: 	movdqa	%xmm14, %xmm2
    00000d1d: 	pand	%xmm15, %xmm2
    00000d22: 	pand	%xmm15, %xmm1
    00000d27: 	packuswb	%xmm3, %xmm2
    00000d2b: 	movdqa	%xmm15, %xmm3
    00000d30: 	pand	%xmm15, %xmm2
    00000d35: 	pand	%xmm5, %xmm3
    00000d39: 	packuswb	%xmm2, %xmm1
    00000d3d: 	psrlw	$0x8, %xmm5
    00000d42: 	movdqa	%xmm15, %xmm2
    00000d47: 	pand	%xmm9, %xmm2
    00000d4c: 	movdqa	%xmm1, %xmm12
    00000d51: 	packuswb	%xmm3, %xmm2
    00000d55: 	movdqa	%xmm9, %xmm3
    00000d5a: 	punpcklbw	%xmm1, %xmm12
    00000d5f: 	movdqa	-0x48(%rsp), %xmm9
    00000d66: 	psrlw	$0x8, %xmm3
    00000d6b: 	punpckhbw	%xmm1, %xmm1
    00000d6f: 	movdqa	-0x38(%rsp), %xmm11
    00000d76: 	packuswb	%xmm5, %xmm3
    00000d7a: 	paddb	%xmm3, %xmm2
    00000d7e: 	movdqa	%xmm2, %xmm3
    00000d82: 	punpcklbw	%xmm2, %xmm3
    00000d86: 	punpckhbw	%xmm2, %xmm2
    00000d8a: 	pmullw	%xmm12, %xmm3
    00000d8f: 	pmullw	%xmm2, %xmm1
    00000d93: 	movdqa	%xmm6, %xmm2
    00000d97: 	movdqa	0xc8(%rsp), %xmm6
    00000da0: 	psrlw	$0x8, %xmm2
    00000da5: 	pand	%xmm15, %xmm1
    00000daa: 	pand	%xmm15, %xmm3
    00000daf: 	packuswb	%xmm1, %xmm3
    00000db3: 	movdqa	%xmm7, %xmm1
    00000db7: 	movdqa	0x88(%rsp), %xmm7
    00000dc0: 	psrlw	$0x8, %xmm1
    00000dc5: 	packuswb	%xmm2, %xmm1
    00000dc9: 	movdqa	%xmm14, %xmm2
    00000dce: 	movdqa	0xd8(%rsp), %xmm14
    00000dd8: 	psrlw	$0x8, %xmm2
    00000ddd: 	pand	%xmm15, %xmm1
    00000de2: 	packuswb	%xmm8, %xmm2
    00000de7: 	movdqa	%xmm11, %xmm8
    00000dec: 	pand	%xmm15, %xmm2
    00000df1: 	pand	%xmm15, %xmm8
    00000df6: 	packuswb	%xmm2, %xmm1
    00000dfa: 	movdqa	%xmm9, %xmm2
    00000dff: 	pand	%xmm15, %xmm2
    00000e04: 	movdqa	%xmm1, %xmm12
    00000e09: 	packuswb	%xmm8, %xmm2
    00000e0e: 	movdqa	%xmm9, %xmm8
    00000e13: 	punpcklbw	%xmm1, %xmm12
    00000e18: 	movdqa	0x108(%rsp), %xmm9
    00000e22: 	psrlw	$0x8, %xmm8
    00000e28: 	punpckhbw	%xmm1, %xmm1
    00000e2c: 	movdqa	%xmm8, %xmm5
    00000e31: 	movdqa	%xmm11, %xmm8
    00000e36: 	psrlw	$0x8, %xmm8
    00000e3c: 	packuswb	%xmm8, %xmm5
    00000e41: 	paddb	%xmm5, %xmm2
    00000e45: 	movdqa	%xmm2, %xmm8
    00000e4a: 	punpcklbw	%xmm2, %xmm8
    00000e4f: 	punpckhbw	%xmm2, %xmm2
    00000e53: 	movdqa	%xmm8, %xmm5
    00000e58: 	pmullw	%xmm2, %xmm1
    00000e5c: 	pmullw	%xmm12, %xmm5
    00000e61: 	pand	%xmm15, %xmm1
    00000e66: 	pand	%xmm15, %xmm5
    00000e6b: 	packuswb	%xmm1, %xmm5
    00000e6f: 	movdqa	%xmm7, %xmm1
    00000e73: 	paddb	%xmm5, %xmm3
    00000e77: 	paddb	-0x18(%rsp), %xmm3
    00000e7d: 	pand	%xmm15, %xmm1
    00000e82: 	movdqa	0xa8(%rsp), %xmm5
    00000e8b: 	movdqa	%xmm5, %xmm2
    00000e8f: 	movaps	%xmm3, -0x18(%rsp)
    00000e94: 	movdqa	%xmm14, %xmm3
    00000e99: 	pand	%xmm15, %xmm2
    00000e9e: 	pand	%xmm15, %xmm3
    00000ea3: 	packuswb	%xmm2, %xmm1
    00000ea7: 	movdqa	%xmm6, %xmm2
    00000eab: 	pand	%xmm15, %xmm2
    00000eb0: 	pand	%xmm15, %xmm1
    00000eb5: 	packuswb	%xmm3, %xmm2
    00000eb9: 	movdqa	%xmm9, %xmm3
    00000ebe: 	pand	%xmm15, %xmm2
    00000ec3: 	pand	%xmm15, %xmm3
    00000ec8: 	packuswb	%xmm2, %xmm1
    00000ecc: 	movdqa	%xmm15, %xmm2
    00000ed1: 	pand	%xmm4, %xmm2
    00000ed5: 	psrlw	$0x8, %xmm4
    00000eda: 	packuswb	%xmm2, %xmm3
    00000ede: 	movdqa	%xmm9, %xmm2
    00000ee3: 	psrlw	$0x8, %xmm2
    00000ee8: 	packuswb	%xmm4, %xmm2
    00000eec: 	movdqa	%xmm1, %xmm4
    00000ef0: 	paddb	%xmm2, %xmm3
    00000ef4: 	punpcklbw	%xmm1, %xmm4
    00000ef8: 	punpckhbw	%xmm1, %xmm1
    00000efc: 	movdqa	%xmm3, %xmm2
    00000f00: 	punpcklbw	%xmm3, %xmm2
    00000f04: 	punpckhbw	%xmm3, %xmm3
    00000f08: 	pmullw	%xmm4, %xmm2
    00000f0c: 	pmullw	%xmm1, %xmm3
    00000f10: 	movdqa	%xmm7, %xmm1
    00000f14: 	psrlw	$0x8, %xmm1
    00000f19: 	movdqa	%xmm14, %xmm4
    00000f1e: 	psrlw	$0x8, %xmm4
    00000f23: 	pand	%xmm15, %xmm3
    00000f28: 	pand	%xmm15, %xmm2
    00000f2d: 	packuswb	%xmm3, %xmm2
    00000f31: 	movdqa	%xmm5, %xmm3
    00000f35: 	psrlw	$0x8, %xmm3
    00000f3a: 	packuswb	%xmm3, %xmm1
    00000f3e: 	movdqa	%xmm6, %xmm3
    00000f42: 	psrlw	$0x8, %xmm3
    00000f47: 	pand	%xmm15, %xmm1
    00000f4c: 	packuswb	%xmm4, %xmm3
    00000f50: 	movdqa	%xmm15, %xmm4
    00000f55: 	pand	%xmm15, %xmm3
    00000f5a: 	pand	%xmm0, %xmm4
    00000f5e: 	packuswb	%xmm3, %xmm1
    00000f62: 	psrlw	$0x8, %xmm0
    00000f67: 	movdqa	%xmm15, %xmm3
    00000f6c: 	pand	%xmm13, %xmm3
    00000f71: 	movdqa	%xmm1, %xmm5
    00000f75: 	packuswb	%xmm4, %xmm3
    00000f79: 	movdqa	%xmm13, %xmm4
    00000f7e: 	punpcklbw	%xmm1, %xmm5
    00000f82: 	psrlw	$0x8, %xmm4
    00000f87: 	packuswb	%xmm0, %xmm4
    00000f8b: 	movdqa	%xmm3, %xmm0
    00000f8f: 	paddb	%xmm4, %xmm0
    00000f93: 	movdqa	%xmm1, %xmm4
    00000f97: 	movdqa	%xmm0, %xmm3
    00000f9b: 	punpckhbw	%xmm1, %xmm4
    00000f9f: 	punpcklbw	%xmm0, %xmm3
    00000fa3: 	punpckhbw	%xmm0, %xmm0
    00000fa7: 	movdqa	%xmm3, %xmm1
    00000fab: 	pmullw	%xmm4, %xmm0
    00000faf: 	pmullw	%xmm5, %xmm1
    00000fb3: 	pand	%xmm15, %xmm0
    00000fb8: 	pand	%xmm15, %xmm1
    00000fbd: 	packuswb	%xmm0, %xmm1
    00000fc1: 	paddb	%xmm1, %xmm2
    00000fc5: 	paddb	-0x28(%rsp), %xmm2
    00000fcb: 	movaps	%xmm2, -0x28(%rsp)
    00000fd0: 	cmpq	%rcx, %r8
    00000fd3: 	ja	.Ltmp222 # Offset: 4051
    00000fd9: 	movdqa	%xmm2, %xmm0
    00000fdd: 	pxor	%xmm1, %xmm1
    00000fe1: 	movdqa	-0x18(%rsp), %xmm7
    00000fe7: 	shlq	$0x8, %r8
    00000feb: 	psrldq	$0x8, %xmm0
    00000ff0: 	leaq	(%r11,%r8), %rcx
    00000ff4: 	leaq	(%rbx,%r8), %rdx
    00000ff8: 	paddb	%xmm2, %xmm0
    00000ffc: 	psadbw	%xmm1, %xmm0
    00001000: 	movd	%xmm0, %r9d
    00001005: 	movdqa	%xmm7, %xmm0
    00001009: 	psrldq	$0x8, %xmm0
    0000100e: 	paddb	%xmm7, %xmm0
    00001012: 	movdqa	-0x8(%rsp), %xmm7
    00001018: 	psadbw	%xmm1, %xmm0
    0000101c: 	movd	%xmm0, %r12d
    00001021: 	movdqa	%xmm7, %xmm0
    00001025: 	psrldq	$0x8, %xmm0
    0000102a: 	paddb	%xmm7, %xmm0
    0000102e: 	movdqa	0x8(%rsp), %xmm7
    00001034: 	psadbw	%xmm1, %xmm0
    00001038: 	movd	%xmm0, %r13d
    0000103d: 	movdqa	%xmm7, %xmm0
    00001041: 	psrldq	$0x8, %xmm0
    00001046: 	paddb	%xmm7, %xmm0
    0000104a: 	psadbw	%xmm1, %xmm0
    0000104e: 	movd	%xmm0, %edi
    00001052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp223:
    00001058: 	movzbl	0x4(%rcx), %eax
    0000105c: 	movzbl	0x4(%rdx), %esi
    00001060: 	addq	$0x10, %r8
    00001064: 	addq	$0x10, %rcx
    00001068: 	addb	0xc(%rdx), %sil
    0000106c: 	addq	$0x10, %rdx
    00001070: 	imull	%esi, %eax
    00001073: 	movl	%eax, %esi
    00001075: 	movzbl	-0x10(%rdx), %eax
    00001079: 	addb	-0x8(%rdx), %al
    0000107c: 	mulb	-0x10(%rcx)
    0000107f: 	addl	%eax, %esi
    00001081: 	movzbl	-0xb(%rcx), %eax
    00001085: 	addl	%esi, %edi
    00001087: 	movzbl	-0xb(%rdx), %esi
    0000108b: 	addb	-0x3(%rdx), %sil
    0000108f: 	imull	%esi, %eax
    00001092: 	movl	%eax, %esi
    00001094: 	movzbl	-0xf(%rdx), %eax
    00001098: 	addb	-0x7(%rdx), %al
    0000109b: 	mulb	-0xf(%rcx)
    0000109e: 	addl	%eax, %esi
    000010a0: 	movzbl	-0xa(%rcx), %eax
    000010a4: 	addl	%esi, %r13d
    000010a7: 	movzbl	-0xa(%rdx), %esi
    000010ab: 	addb	-0x2(%rdx), %sil
    000010af: 	imull	%esi, %eax
    000010b2: 	movl	%eax, %esi
    000010b4: 	movzbl	-0xe(%rdx), %eax
    000010b8: 	addb	-0x6(%rdx), %al
    000010bb: 	mulb	-0xe(%rcx)
    000010be: 	addl	%eax, %esi
    000010c0: 	movzbl	-0x9(%rcx), %eax
    000010c4: 	addl	%esi, %r12d
    000010c7: 	movzbl	-0x9(%rdx), %esi
    000010cb: 	addb	-0x1(%rdx), %sil
    000010cf: 	imull	%esi, %eax
    000010d2: 	movl	%eax, %esi
    000010d4: 	movzbl	-0xd(%rdx), %eax
    000010d8: 	addb	-0x5(%rdx), %al
    000010db: 	mulb	-0xd(%rcx)
    000010de: 	addl	%eax, %esi
    000010e0: 	addl	%esi, %r9d
    000010e3: 	cmpq	%rbp, %r8
    000010e6: 	jb	.Ltmp223 # Offset: 4326
.Ltmp228:
    000010ec: 	addl	%r13d, %r9d
    000010ef: 	addl	%r12d, %r9d
    000010f2: 	cmpq	%r10, %r8
    000010f5: 	jae	.Ltmp224 # Offset: 4341
    000010fb: 	leaq	0x1(%r8), %rdx
    000010ff: 	movq	%r10, %rax
    00001102: 	movl	$0x1, %ebp
    00001107: 	subq	%r8, %rax
    0000110a: 	cmpq	%rdx, %r10
    0000110d: 	cmovaeq	%rax, %rbp
    00001111: 	subq	$0x1, %rax
    00001115: 	cmpq	$0xe, %rax
    00001119: 	jbe	.Ltmp225 # Offset: 4377
    0000111f: 	cmpq	%rdx, %r10
    00001122: 	jb	.Ltmp225 # Offset: 4386
    00001128: 	movq	%rbp, %rdx
    0000112b: 	leaq	(%r11,%r8), %rsi
    0000112f: 	leaq	(%rbx,%r8), %rcx
    00001133: 	xorl	%eax, %eax
    00001135: 	movdqa	DATAat0x32530(%rip), %xmm15
    0000113e: 	andq	$-0x10, %rdx
    00001142: 	pxor	%xmm3, %xmm3
    00001146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp226:
    00001150: 	movdqu	(%rcx,%rax), %xmm2
    00001155: 	movdqu	(%rsi,%rax), %xmm0
    0000115a: 	addq	$0x10, %rax
    0000115e: 	movdqa	%xmm0, %xmm1
    00001162: 	movdqa	%xmm2, %xmm4
    00001166: 	punpcklbw	%xmm0, %xmm1
    0000116a: 	punpcklbw	%xmm2, %xmm4
    0000116e: 	punpckhbw	%xmm0, %xmm0
    00001172: 	punpckhbw	%xmm2, %xmm2
    00001176: 	pmullw	%xmm4, %xmm1
    0000117a: 	pmullw	%xmm2, %xmm0
    0000117e: 	pand	%xmm15, %xmm1
    00001183: 	pand	%xmm15, %xmm0
    00001188: 	packuswb	%xmm0, %xmm1
    0000118c: 	paddb	%xmm1, %xmm3
    00001190: 	cmpq	%rax, %rdx
    00001193: 	jne	.Ltmp226 # Offset: 4499
    00001195: 	movdqa	%xmm3, %xmm0
    00001199: 	psrldq	$0x8, %xmm0
    0000119e: 	paddb	%xmm0, %xmm3
    000011a2: 	pxor	%xmm0, %xmm0
    000011a6: 	psadbw	%xmm0, %xmm3
    000011aa: 	movd	%xmm3, %eax
    000011ae: 	addl	%eax, %edi
    000011b0: 	movq	%rbp, %rax
    000011b3: 	andq	$-0x10, %rax
    000011b7: 	addq	%rax, %r8
    000011ba: 	cmpq	%rbp, %rax
    000011bd: 	je	.Ltmp224 # Offset: 4541
    000011c3: 	leaq	0x1(%r8), %rdx
.Ltmp225:
    000011c7: 	movzbl	(%r11,%r8), %eax
    000011cc: 	mulb	(%rbx,%r8)
    000011d0: 	addl	%eax, %edi
    000011d2: 	cmpq	%rdx, %r10
    000011d5: 	jbe	.Ltmp224 # Offset: 4565
.Ltmp229:
    000011db: 	movzbl	(%rbx,%rdx), %eax
    000011df: 	mulb	(%r11,%rdx)
    000011e3: 	addl	%eax, %edi
    000011e5: 	leaq	0x1(%rdx), %rax
    000011e9: 	cmpq	%r10, %rax
    000011ec: 	jae	.Ltmp224 # Offset: 4588
    000011f2: 	movzbl	0x1(%r11,%rdx), %eax
    000011f8: 	mulb	0x1(%rbx,%rdx)
    000011fc: 	addl	%eax, %edi
    000011fe: 	leaq	0x2(%rdx), %rax
    00001202: 	cmpq	%r10, %rax
    00001205: 	jae	.Ltmp224 # Offset: 4613
    0000120b: 	movzbl	0x2(%r11,%rdx), %eax
    00001211: 	mulb	0x2(%rbx,%rdx)
    00001215: 	addl	%eax, %edi
    00001217: 	leaq	0x3(%rdx), %rax
    0000121b: 	cmpq	%r10, %rax
    0000121e: 	jae	.Ltmp224 # Offset: 4638
    00001224: 	movzbl	0x3(%r11,%rdx), %eax
    0000122a: 	mulb	0x3(%rbx,%rdx)
    0000122e: 	addl	%eax, %edi
    00001230: 	leaq	0x4(%rdx), %rax
    00001234: 	cmpq	%r10, %rax
    00001237: 	jae	.Ltmp224 # Offset: 4663
    0000123d: 	movzbl	0x4(%r11,%rdx), %eax
    00001243: 	mulb	0x4(%rbx,%rdx)
    00001247: 	addl	%eax, %edi
    00001249: 	leaq	0x5(%rdx), %rax
    0000124d: 	cmpq	%r10, %rax
    00001250: 	jae	.Ltmp224 # Offset: 4688
    00001256: 	movzbl	0x5(%r11,%rdx), %eax
    0000125c: 	mulb	0x5(%rbx,%rdx)
    00001260: 	addl	%eax, %edi
    00001262: 	leaq	0x6(%rdx), %rax
    00001266: 	cmpq	%r10, %rax
    00001269: 	jae	.Ltmp224 # Offset: 4713
    0000126f: 	movzbl	0x6(%r11,%rdx), %eax
    00001275: 	mulb	0x6(%rbx,%rdx)
    00001279: 	addl	%eax, %edi
    0000127b: 	leaq	0x7(%rdx), %rax
    0000127f: 	cmpq	%r10, %rax
    00001282: 	jae	.Ltmp224 # Offset: 4738
    00001288: 	movzbl	0x7(%r11,%rdx), %eax
    0000128e: 	mulb	0x7(%rbx,%rdx)
    00001292: 	addl	%eax, %edi
    00001294: 	leaq	0x8(%rdx), %rax
    00001298: 	cmpq	%r10, %rax
    0000129b: 	jae	.Ltmp224 # Offset: 4763
    0000129d: 	movzbl	0x8(%r11,%rdx), %eax
    000012a3: 	mulb	0x8(%rbx,%rdx)
    000012a7: 	addl	%eax, %edi
    000012a9: 	leaq	0x9(%rdx), %rax
    000012ad: 	cmpq	%r10, %rax
    000012b0: 	jae	.Ltmp224 # Offset: 4784
    000012b2: 	movzbl	0x9(%rbx,%rdx), %eax
    000012b7: 	mulb	0x9(%r11,%rdx)
    000012bc: 	addl	%eax, %edi
    000012be: 	leaq	0xa(%rdx), %rax
    000012c2: 	cmpq	%rax, %r10
    000012c5: 	jbe	.Ltmp224 # Offset: 4805
    000012c7: 	movzbl	0xa(%r11,%rdx), %eax
    000012cd: 	mulb	0xa(%rbx,%rdx)
    000012d1: 	addl	%eax, %edi
    000012d3: 	leaq	0xb(%rdx), %rax
    000012d7: 	cmpq	%r10, %rax
    000012da: 	jae	.Ltmp224 # Offset: 4826
    000012dc: 	movzbl	0xb(%r11,%rdx), %eax
    000012e2: 	mulb	0xb(%rbx,%rdx)
    000012e6: 	addl	%eax, %edi
    000012e8: 	leaq	0xc(%rdx), %rax
    000012ec: 	cmpq	%rax, %r10
    000012ef: 	jbe	.Ltmp224 # Offset: 4847
    000012f1: 	movzbl	0xc(%r11,%rdx), %eax
    000012f7: 	mulb	0xc(%rbx,%rdx)
    000012fb: 	addl	%eax, %edi
    000012fd: 	leaq	0xd(%rdx), %rax
    00001301: 	cmpq	%r10, %rax
    00001304: 	jae	.Ltmp224 # Offset: 4868
    00001306: 	movzbl	0xd(%rbx,%rdx), %eax
    0000130b: 	mulb	0xd(%r11,%rdx)
    00001310: 	addl	%eax, %edi
.Ltmp224:
    00001312: 	addq	$0x130, %rsp
    00001319: 	leal	(%rdi,%r9), %eax
    0000131d: 	popq	%rbx
    0000131e: 	popq	%rbp
    0000131f: 	popq	%r12
    00001321: 	popq	%r13
    00001323: 	retq # Offset: 4899
    00001324: 	nopl	(%rax) # Size: 4
.Ltmp221:
    00001328: 	movq	%r11, %rcx
    0000132b: 	movq	%rbx, %rdx
    0000132e: 	xorl	%r9d, %r9d
    00001331: 	xorl	%r12d, %r12d
    00001334: 	xorl	%r13d, %r13d
    00001337: 	xorl	%edi, %edi
    00001339: 	xorl	%r8d, %r8d
    0000133c: 	nopl	(%rax) # Size: 4
.Ltmp227:
    00001340: 	movzbl	0x4(%rcx), %eax
    00001344: 	movzbl	0x4(%rdx), %esi
    00001348: 	addq	$0x10, %r8
    0000134c: 	addq	$0x10, %rcx
    00001350: 	addb	0xc(%rdx), %sil
    00001354: 	addq	$0x10, %rdx
    00001358: 	imull	%esi, %eax
    0000135b: 	movl	%eax, %esi
    0000135d: 	movzbl	-0x10(%rdx), %eax
    00001361: 	addb	-0x8(%rdx), %al
    00001364: 	mulb	-0x10(%rcx)
    00001367: 	addl	%eax, %esi
    00001369: 	movzbl	-0xb(%rcx), %eax
    0000136d: 	addl	%esi, %edi
    0000136f: 	movzbl	-0xb(%rdx), %esi
    00001373: 	addb	-0x3(%rdx), %sil
    00001377: 	imull	%esi, %eax
    0000137a: 	movl	%eax, %esi
    0000137c: 	movzbl	-0xf(%rdx), %eax
    00001380: 	addb	-0x7(%rdx), %al
    00001383: 	mulb	-0xf(%rcx)
    00001386: 	addl	%eax, %esi
    00001388: 	movzbl	-0xa(%rcx), %eax
    0000138c: 	addl	%esi, %r13d
    0000138f: 	movzbl	-0xa(%rdx), %esi
    00001393: 	addb	-0x2(%rdx), %sil
    00001397: 	imull	%esi, %eax
    0000139a: 	movl	%eax, %esi
    0000139c: 	movzbl	-0xe(%rdx), %eax
    000013a0: 	addb	-0x6(%rdx), %al
    000013a3: 	mulb	-0xe(%rcx)
    000013a6: 	addl	%eax, %esi
    000013a8: 	movzbl	-0x9(%rcx), %eax
    000013ac: 	addl	%esi, %r12d
    000013af: 	movzbl	-0x9(%rdx), %esi
    000013b3: 	addb	-0x1(%rdx), %sil
    000013b7: 	imull	%esi, %eax
    000013ba: 	movl	%eax, %esi
    000013bc: 	movzbl	-0xd(%rdx), %eax
    000013c0: 	addb	-0x5(%rdx), %al
    000013c3: 	mulb	-0xd(%rcx)
    000013c6: 	addl	%eax, %esi
    000013c8: 	addl	%esi, %r9d
    000013cb: 	cmpq	%r8, %rbp
    000013ce: 	ja	.Ltmp227 # Offset: 5070
    000013d4: 	jmp	.Ltmp228 # Offset: 5076
    000013d9: 	nopl	(%rax) # Size: 7
.Ltmp220:
    000013e0: 	movzbl	(%rsi), %eax
    000013e3: 	mulb	(%rdi)
    000013e5: 	xorl	%r9d, %r9d
    000013e8: 	movl	$0x1, %edx
    000013ed: 	movl	%eax, %edi
    000013ef: 	jmp	.Ltmp229 # Offset: 5103
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKhhET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKssET0_T_S3_m" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0xd6b0
  Size        : 0x147
  MaxSize     : 0x150
  Offset      : 0xd6b0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	addq	%rdx, %rdx
    00000007: 	movq	%rdi, %rcx
    0000000a: 	leaq	(%rdi,%rdx), %rdi
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	je	.Ltmp230 # Offset: 17
    00000017: 	subq	$0x2, %rdx
    0000001b: 	movq	%rdx, %r10
    0000001e: 	shrq	%r10
    00000021: 	leaq	0x1(%r10), %r11
    00000025: 	cmpq	$0xc, %rdx
    00000029: 	jbe	.Ltmp231 # Offset: 41
    0000002f: 	movq	%r11, %rdx
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm1, %xmm1
    00000038: 	shrq	$0x3, %rdx
    0000003c: 	shlq	$0x4, %rdx
.Ltmp232:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	addq	$0x10, %rax
    0000004e: 	pmullw	%xmm2, %xmm0
    00000052: 	paddw	%xmm0, %xmm1
    00000056: 	cmpq	%rdx, %rax
    00000059: 	jne	.Ltmp232 # Offset: 89
    0000005b: 	movdqa	%xmm1, %xmm0
    0000005f: 	movq	%r11, %rax
    00000062: 	psrldq	$0x8, %xmm0
    00000067: 	andq	$-0x8, %rax
    0000006b: 	paddw	%xmm0, %xmm1
    0000006f: 	leaq	(%rax,%rax), %rdx
    00000073: 	movdqa	%xmm1, %xmm0
    00000077: 	leaq	(%rcx,%rdx), %r9
    0000007b: 	addq	%rsi, %rdx
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	paddw	%xmm0, %xmm1
    00000087: 	movdqa	%xmm1, %xmm0
    0000008b: 	psrldq	$0x2, %xmm0
    00000090: 	paddw	%xmm0, %xmm1
    00000094: 	pextrw	$0x0, %xmm1, %r8d
    0000009a: 	cmpq	%rax, %r11
    0000009d: 	je	.Ltmp233 # Offset: 157
.Ltmp235:
    000000a3: 	subq	%rax, %r10
    000000a6: 	leaq	0x1(%r10), %r11
    000000aa: 	cmpq	$0x2, %r10
    000000ae: 	jbe	.Ltmp234 # Offset: 174
    000000b0: 	movq	(%rcx,%rax,2), %xmm0
    000000b5: 	movq	(%rsi,%rax,2), %xmm1
    000000ba: 	pmullw	%xmm1, %xmm0
    000000be: 	pextrw	$0x1, %xmm0, %ecx
    000000c3: 	pextrw	$0x0, %xmm0, %eax
    000000c8: 	addl	%ecx, %eax
    000000ca: 	pextrw	$0x2, %xmm0, %ecx
    000000cf: 	addl	%ecx, %eax
    000000d1: 	pextrw	$0x3, %xmm0, %ecx
    000000d6: 	addl	%ecx, %eax
    000000d8: 	addl	%eax, %r8d
    000000db: 	movq	%r11, %rax
    000000de: 	andq	$-0x4, %rax
    000000e2: 	leaq	(%rax,%rax), %rcx
    000000e6: 	addq	%rcx, %r9
    000000e9: 	addq	%rcx, %rdx
    000000ec: 	cmpq	%rax, %r11
    000000ef: 	je	.Ltmp233 # Offset: 239
.Ltmp234:
    000000f1: 	movzwl	(%r9), %eax
    000000f5: 	imulw	(%rdx), %ax
    000000f9: 	addl	%eax, %r8d
    000000fc: 	leaq	0x2(%r9), %rax
    00000100: 	cmpq	%rax, %rdi
    00000103: 	je	.Ltmp233 # Offset: 259
    00000105: 	movzwl	0x2(%rdx), %eax
    00000109: 	imulw	0x2(%r9), %ax
    0000010f: 	addl	%eax, %r8d
    00000112: 	leaq	0x4(%r9), %rax
    00000116: 	cmpq	%rax, %rdi
    00000119: 	je	.Ltmp233 # Offset: 281
    0000011b: 	movzwl	0x4(%r9), %eax
    00000120: 	imulw	0x4(%rdx), %ax
    00000125: 	addl	%eax, %r8d
.Ltmp233:
    00000128: 	movl	%r8d, %eax
    0000012b: 	retq # Offset: 299
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp230:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp231:
    00000137: 	movq	%rsi, %rdx
    0000013a: 	movq	%rcx, %r9
    0000013d: 	xorl	%eax, %eax
    0000013f: 	xorl	%r8d, %r8d
    00000142: 	jmp	.Ltmp235 # Offset: 322
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKssET0_T_S3_m"

Binary Function "_Z14inner_product1IPKssET0_T_S3_m" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0xd800
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0xd800
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %rsi
    0000000a: 	testq	%rdx, %rdx
    0000000d: 	je	.Ltmp236 # Offset: 13
    00000013: 	leaq	-0x1(%rdx), %rax
    00000017: 	cmpq	$0x6, %rax
    0000001b: 	jbe	.Ltmp237 # Offset: 27
    00000021: 	shrq	$0x3, %rdx
    00000025: 	xorl	%eax, %eax
    00000027: 	pxor	%xmm1, %xmm1
    0000002b: 	shlq	$0x4, %rdx
    0000002f: 	nop # Size: 1
.Ltmp238:
    00000030: 	movdqu	(%rdi,%rax), %xmm0
    00000035: 	movdqu	(%rcx,%rax), %xmm2
    0000003a: 	addq	$0x10, %rax
    0000003e: 	pmullw	%xmm2, %xmm0
    00000042: 	paddw	%xmm0, %xmm1
    00000046: 	cmpq	%rax, %rdx
    00000049: 	jne	.Ltmp238 # Offset: 73
    0000004b: 	movdqa	%xmm1, %xmm0
    0000004f: 	movq	%rsi, %rax
    00000052: 	psrldq	$0x8, %xmm0
    00000057: 	andq	$-0x8, %rax
    0000005b: 	paddw	%xmm0, %xmm1
    0000005f: 	movdqa	%xmm1, %xmm0
    00000063: 	psrldq	$0x4, %xmm0
    00000068: 	paddw	%xmm0, %xmm1
    0000006c: 	movdqa	%xmm1, %xmm0
    00000070: 	psrldq	$0x2, %xmm0
    00000075: 	paddw	%xmm0, %xmm1
    00000079: 	pextrw	$0x0, %xmm1, %r8d
    0000007f: 	testb	$0x7, %sil
    00000083: 	je	.Ltmp239 # Offset: 131
.Ltmp241:
    00000089: 	movq	%rsi, %r9
    0000008c: 	subq	%rax, %r9
    0000008f: 	leaq	-0x1(%r9), %rdx
    00000093: 	cmpq	$0x2, %rdx
    00000097: 	jbe	.Ltmp240 # Offset: 151
    00000099: 	movq	(%rdi,%rax,2), %xmm0
    0000009e: 	movq	(%rcx,%rax,2), %xmm1
    000000a3: 	pmullw	%xmm1, %xmm0
    000000a7: 	pextrw	$0x1, %xmm0, %r10d
    000000ad: 	pextrw	$0x0, %xmm0, %edx
    000000b2: 	addl	%r10d, %edx
    000000b5: 	pextrw	$0x2, %xmm0, %r10d
    000000bb: 	addl	%r10d, %edx
    000000be: 	pextrw	$0x3, %xmm0, %r10d
    000000c4: 	addl	%r10d, %edx
    000000c7: 	addl	%edx, %r8d
    000000ca: 	movq	%r9, %rdx
    000000cd: 	andq	$-0x4, %rdx
    000000d1: 	addq	%rdx, %rax
    000000d4: 	cmpq	%rdx, %r9
    000000d7: 	je	.Ltmp239 # Offset: 215
.Ltmp240:
    000000d9: 	movzwl	(%rdi,%rax,2), %r9d
    000000de: 	imulw	(%rcx,%rax,2), %r9w
    000000e4: 	leaq	(%rax,%rax), %rdx
    000000e8: 	addl	%r9d, %r8d
    000000eb: 	leaq	0x1(%rax), %r9
    000000ef: 	cmpq	%r9, %rsi
    000000f2: 	jbe	.Ltmp239 # Offset: 242
    000000f4: 	movzwl	0x2(%rcx,%rdx), %r9d
    000000fa: 	imulw	0x2(%rdi,%rdx), %r9w
    00000101: 	addq	$0x2, %rax
    00000105: 	addl	%r9d, %r8d
    00000108: 	cmpq	%rax, %rsi
    0000010b: 	jbe	.Ltmp239 # Offset: 267
    0000010d: 	movzwl	0x4(%rdi,%rdx), %eax
    00000112: 	imulw	0x4(%rcx,%rdx), %ax
    00000118: 	addl	%eax, %r8d
.Ltmp239:
    0000011b: 	movl	%r8d, %eax
    0000011e: 	retq # Offset: 286
    0000011f: 	nop # Size: 1
.Ltmp236:
    00000120: 	xorl	%r8d, %r8d
    00000123: 	movl	%r8d, %eax
    00000126: 	retq # Offset: 294
.Ltmp237:
    00000127: 	xorl	%eax, %eax
    00000129: 	xorl	%r8d, %r8d
    0000012c: 	jmp	.Ltmp241 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKssET0_T_S3_m"

Binary Function "_Z14inner_product2IPKssET0_T_S3_m" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0xd940
  Size        : 0x147
  MaxSize     : 0x150
  Offset      : 0xd940
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	addq	%rdx, %rdx
    00000007: 	movq	%rdi, %rcx
    0000000a: 	leaq	(%rdi,%rdx), %rdi
    0000000e: 	cmpq	%rdi, %rcx
    00000011: 	je	.Ltmp242 # Offset: 17
    00000017: 	subq	$0x2, %rdx
    0000001b: 	movq	%rdx, %r10
    0000001e: 	shrq	%r10
    00000021: 	leaq	0x1(%r10), %r11
    00000025: 	cmpq	$0xc, %rdx
    00000029: 	jbe	.Ltmp243 # Offset: 41
    0000002f: 	movq	%r11, %rdx
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm1, %xmm1
    00000038: 	shrq	$0x3, %rdx
    0000003c: 	shlq	$0x4, %rdx
.Ltmp244:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	addq	$0x10, %rax
    0000004e: 	pmullw	%xmm2, %xmm0
    00000052: 	paddw	%xmm0, %xmm1
    00000056: 	cmpq	%rdx, %rax
    00000059: 	jne	.Ltmp244 # Offset: 89
    0000005b: 	movdqa	%xmm1, %xmm0
    0000005f: 	movq	%r11, %rax
    00000062: 	psrldq	$0x8, %xmm0
    00000067: 	andq	$-0x8, %rax
    0000006b: 	paddw	%xmm0, %xmm1
    0000006f: 	leaq	(%rax,%rax), %rdx
    00000073: 	movdqa	%xmm1, %xmm0
    00000077: 	leaq	(%rcx,%rdx), %r9
    0000007b: 	addq	%rsi, %rdx
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	paddw	%xmm0, %xmm1
    00000087: 	movdqa	%xmm1, %xmm0
    0000008b: 	psrldq	$0x2, %xmm0
    00000090: 	paddw	%xmm0, %xmm1
    00000094: 	pextrw	$0x0, %xmm1, %r8d
    0000009a: 	cmpq	%rax, %r11
    0000009d: 	je	.Ltmp245 # Offset: 157
.Ltmp247:
    000000a3: 	subq	%rax, %r10
    000000a6: 	leaq	0x1(%r10), %r11
    000000aa: 	cmpq	$0x2, %r10
    000000ae: 	jbe	.Ltmp246 # Offset: 174
    000000b0: 	movq	(%rcx,%rax,2), %xmm0
    000000b5: 	movq	(%rsi,%rax,2), %xmm1
    000000ba: 	pmullw	%xmm1, %xmm0
    000000be: 	pextrw	$0x1, %xmm0, %ecx
    000000c3: 	pextrw	$0x0, %xmm0, %eax
    000000c8: 	addl	%ecx, %eax
    000000ca: 	pextrw	$0x2, %xmm0, %ecx
    000000cf: 	addl	%ecx, %eax
    000000d1: 	pextrw	$0x3, %xmm0, %ecx
    000000d6: 	addl	%ecx, %eax
    000000d8: 	addl	%eax, %r8d
    000000db: 	movq	%r11, %rax
    000000de: 	andq	$-0x4, %rax
    000000e2: 	leaq	(%rax,%rax), %rcx
    000000e6: 	addq	%rcx, %r9
    000000e9: 	addq	%rcx, %rdx
    000000ec: 	cmpq	%rax, %r11
    000000ef: 	je	.Ltmp245 # Offset: 239
.Ltmp246:
    000000f1: 	movzwl	(%r9), %eax
    000000f5: 	imulw	(%rdx), %ax
    000000f9: 	addl	%eax, %r8d
    000000fc: 	leaq	0x2(%r9), %rax
    00000100: 	cmpq	%rax, %rdi
    00000103: 	je	.Ltmp245 # Offset: 259
    00000105: 	movzwl	0x2(%rdx), %eax
    00000109: 	imulw	0x2(%r9), %ax
    0000010f: 	addl	%eax, %r8d
    00000112: 	leaq	0x4(%r9), %rax
    00000116: 	cmpq	%rax, %rdi
    00000119: 	je	.Ltmp245 # Offset: 281
    0000011b: 	movzwl	0x4(%r9), %eax
    00000120: 	imulw	0x4(%rdx), %ax
    00000125: 	addl	%eax, %r8d
.Ltmp245:
    00000128: 	movl	%r8d, %eax
    0000012b: 	retq # Offset: 299
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp242:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp243:
    00000137: 	movq	%rsi, %rdx
    0000013a: 	movq	%rcx, %r9
    0000013d: 	xorl	%eax, %eax
    0000013f: 	xorl	%r8d, %r8d
    00000142: 	jmp	.Ltmp247 # Offset: 322
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKssET0_T_S3_m"

Binary Function "_Z14inner_product3IPKssET0_T_S3_m" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0xda90
  Size        : 0x2be
  MaxSize     : 0x2c0
  Offset      : 0xda90
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rsi, %rcx
    0000000a: 	subq	$0x1, %r10
    0000000e: 	je	.Ltmp248 # Offset: 14
    00000014: 	movq	%rdx, %r9
    00000017: 	leaq	-0x2(%rdx), %rdx
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdx, %r11
    0000001f: 	pushq	%rbx
    00000020: 	shrq	%r11
    00000023: 	leaq	0x1(%r11), %rbp
    00000027: 	cmpq	$0xd, %rdx
    0000002b: 	jbe	.Ltmp249 # Offset: 43
    00000031: 	movq	%rbp, %rsi
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm4, %xmm4
    0000003a: 	shrq	$0x3, %rsi
    0000003e: 	shlq	$0x5, %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp250:
    00000048: 	movdqu	(%rdi,%rax), %xmm0
    0000004d: 	movdqu	(%rcx,%rax), %xmm2
    00000052: 	movdqu	0x10(%rdi,%rax), %xmm8
    00000059: 	movdqu	0x10(%rcx,%rax), %xmm6
    0000005f: 	addq	$0x20, %rax
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	movdqa	%xmm2, %xmm3
    0000006b: 	movdqa	%xmm0, %xmm7
    0000006f: 	punpcklwd	%xmm8, %xmm1
    00000074: 	movdqa	%xmm2, %xmm5
    00000078: 	punpcklwd	%xmm6, %xmm3
    0000007c: 	punpckhwd	%xmm8, %xmm7
    00000081: 	punpckhwd	%xmm6, %xmm5
    00000085: 	movdqa	%xmm1, %xmm10
    0000008a: 	movdqa	%xmm3, %xmm9
    0000008f: 	punpcklwd	%xmm8, %xmm0
    00000094: 	punpcklwd	%xmm6, %xmm2
    00000098: 	punpckhwd	%xmm7, %xmm10
    0000009d: 	punpckhwd	%xmm5, %xmm9
    000000a2: 	punpcklwd	%xmm7, %xmm1
    000000a6: 	punpcklwd	%xmm5, %xmm3
    000000aa: 	punpcklwd	%xmm7, %xmm0
    000000ae: 	punpcklwd	%xmm5, %xmm2
    000000b2: 	punpcklwd	%xmm10, %xmm1
    000000b7: 	punpcklwd	%xmm9, %xmm3
    000000bc: 	punpckhwd	%xmm10, %xmm0
    000000c1: 	punpckhwd	%xmm9, %xmm2
    000000c6: 	pmullw	%xmm3, %xmm1
    000000ca: 	pmullw	%xmm2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm1
    000000d2: 	paddw	%xmm1, %xmm4
    000000d6: 	cmpq	%rsi, %rax
    000000d9: 	jne	.Ltmp250 # Offset: 217
    000000df: 	movdqa	%xmm4, %xmm0
    000000e3: 	movq	%rbp, %rbx
    000000e6: 	psrldq	$0x8, %xmm0
    000000eb: 	andq	$-0x8, %rbx
    000000ef: 	paddw	%xmm0, %xmm4
    000000f3: 	leaq	(%rbx,%rbx), %rsi
    000000f7: 	movdqa	%xmm4, %xmm0
    000000fb: 	psrldq	$0x4, %xmm0
    00000100: 	paddw	%xmm0, %xmm4
    00000104: 	movdqa	%xmm4, %xmm0
    00000108: 	psrldq	$0x2, %xmm0
    0000010d: 	paddw	%xmm0, %xmm4
    00000111: 	pextrw	$0x0, %xmm4, %r8d
    00000117: 	movl	%r8d, %eax
    0000011a: 	cmpq	%rbp, %rbx
    0000011d: 	je	.Ltmp251 # Offset: 285
.Ltmp254:
    00000123: 	movq	%r11, %rax
    00000126: 	subq	%rbx, %rax
    00000129: 	leaq	0x1(%rax), %r11
    0000012d: 	cmpq	$0x2, %rax
    00000131: 	jbe	.Ltmp252 # Offset: 305
    00000137: 	shlq	$0x2, %rbx
    0000013b: 	leaq	(%rdi,%rbx), %rax
    0000013f: 	addq	%rcx, %rbx
    00000142: 	movq	(%rax), %xmm1
    00000146: 	movq	(%rbx), %xmm2
    0000014a: 	movq	0x8(%rax), %xmm4
    0000014f: 	movq	0x8(%rbx), %xmm3
    00000154: 	movl	%r8d, %ebx
    00000157: 	movdqa	%xmm1, %xmm7
    0000015b: 	movdqa	%xmm2, %xmm6
    0000015f: 	movdqa	%xmm1, %xmm0
    00000163: 	punpcklwd	%xmm4, %xmm7
    00000167: 	punpcklwd	%xmm3, %xmm6
    0000016b: 	movdqa	%xmm2, %xmm5
    0000016f: 	pshufd	$0xe, %xmm7, %xmm7
    00000174: 	pshufd	$0xe, %xmm6, %xmm6
    00000179: 	punpcklwd	%xmm4, %xmm1
    0000017d: 	punpcklwd	%xmm3, %xmm2
    00000181: 	punpcklwd	%xmm4, %xmm0
    00000185: 	punpcklwd	%xmm3, %xmm5
    00000189: 	punpcklwd	%xmm7, %xmm1
    0000018d: 	punpcklwd	%xmm6, %xmm2
    00000191: 	punpcklwd	%xmm7, %xmm0
    00000195: 	punpcklwd	%xmm6, %xmm5
    00000199: 	pshufd	$0xe, %xmm1, %xmm1
    0000019e: 	pshufd	$0xe, %xmm2, %xmm2
    000001a3: 	pmullw	%xmm5, %xmm0
    000001a7: 	pmullw	%xmm2, %xmm1
    000001ab: 	paddw	%xmm1, %xmm0
    000001af: 	pextrw	$0x1, %xmm0, %ebp
    000001b4: 	pextrw	$0x0, %xmm0, %eax
    000001b9: 	addl	%ebp, %eax
    000001bb: 	pextrw	$0x2, %xmm0, %ebp
    000001c0: 	addl	%ebp, %eax
    000001c2: 	pextrw	$0x3, %xmm0, %ebp
    000001c7: 	addl	%ebp, %eax
    000001c9: 	pextrw	$0x1, %xmm0, %ebp
    000001ce: 	addl	%eax, %r8d
    000001d1: 	pextrw	$0x0, %xmm0, %eax
    000001d6: 	addl	%ebp, %eax
    000001d8: 	addl	%ebx, %eax
    000001da: 	pextrw	$0x2, %xmm0, %ebx
    000001df: 	addl	%ebx, %eax
    000001e1: 	pextrw	$0x3, %xmm0, %ebx
    000001e6: 	addl	%ebx, %eax
    000001e8: 	movq	%r11, %rbx
    000001eb: 	andq	$-0x4, %rbx
    000001ef: 	leaq	(%rsi,%rbx,2), %rsi
    000001f3: 	cmpq	%rbx, %r11
    000001f6: 	je	.Ltmp251 # Offset: 502
.Ltmp252:
    000001f8: 	movzwl	(%rdi,%rsi,2), %eax
    000001fc: 	imulw	(%rcx,%rsi,2), %ax
    00000201: 	leaq	(%rsi,%rsi), %r11
    00000205: 	leaq	0x2(%rsi), %rbx
    00000209: 	addl	%r8d, %eax
    0000020c: 	movzwl	0x2(%rdi,%r11), %r8d
    00000212: 	imulw	0x2(%rcx,%r11), %r8w
    00000219: 	addl	%r8d, %eax
    0000021c: 	movl	%eax, %r8d
    0000021f: 	cmpq	%r10, %rbx
    00000222: 	jae	.Ltmp251 # Offset: 546
    00000224: 	movzwl	0x6(%rcx,%r11), %eax
    0000022a: 	imulw	0x6(%rdi,%r11), %ax
    00000231: 	addq	$0x4, %rsi
    00000235: 	addl	%r8d, %eax
    00000238: 	movzwl	0x4(%rcx,%r11), %r8d
    0000023e: 	imulw	0x4(%rdi,%r11), %r8w
    00000245: 	addl	%r8d, %eax
    00000248: 	movl	%eax, %r8d
    0000024b: 	cmpq	%rsi, %r10
    0000024e: 	jbe	.Ltmp251 # Offset: 590
    00000250: 	movzwl	0x8(%rdi,%r11), %eax
    00000256: 	movzwl	0xa(%rdi,%r11), %esi
    0000025c: 	imulw	0x8(%rcx,%r11), %ax
    00000263: 	imulw	0xa(%rcx,%r11), %si
    0000026a: 	addl	%esi, %eax
    0000026c: 	addl	%r8d, %eax
    0000026f: 	movl	%eax, %r8d
.Ltmp251:
    00000272: 	andq	$-0x2, %rdx
    00000276: 	addq	$0x2, %rdx
    0000027a: 	cmpq	%rdx, %r9
    0000027d: 	jbe	.Ltmp253 # Offset: 637
    0000027f: 	addq	%rdx, %rdx
    00000282: 	addq	%rdx, %rdi
    00000285: 	addq	%rdx, %rcx
    00000288: 	movzwl	(%rdi), %r8d
    0000028c: 	imulw	(%rcx), %r8w
    00000291: 	addl	%eax, %r8d
.Ltmp253:
    00000294: 	movl	%r8d, %eax
    00000297: 	popq	%rbx
    00000298: 	popq	%rbp
    00000299: 	retq # Offset: 665
    0000029a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp248:
    000002a0: 	movzwl	(%rdi), %r8d
    000002a4: 	imulw	(%rsi), %r8w
    000002a9: 	xorl	%eax, %eax
    000002ab: 	addl	%eax, %r8d
    000002ae: 	movl	%r8d, %eax
    000002b1: 	retq # Offset: 689
.Ltmp249:
    000002b2: 	xorl	%ebx, %ebx
    000002b4: 	xorl	%r8d, %r8d
    000002b7: 	xorl	%esi, %esi
    000002b9: 	jmp	.Ltmp254 # Offset: 697
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKssET0_T_S3_m"

Binary Function "_Z14inner_product4IPKssET0_T_S3_m" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0xdd50
  Size        : 0x1bb
  MaxSize     : 0x1c0
  Offset      : 0xdd50
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rdx, %rdi
    0000000a: 	cmpq	$0x3, %rdx
    0000000e: 	je	.Ltmp255 # Offset: 14
    00000014: 	leaq	-0x4(%rdx), %rdx
    00000018: 	movq	%rdx, %r9
    0000001b: 	shrq	$0x2, %r9
    0000001f: 	addq	$0x1, %r9
    00000023: 	cmpq	$0x3, %rdx
    00000027: 	jbe	.Ltmp256 # Offset: 39
    0000002d: 	movq	%r9, %r8
    00000030: 	xorl	%eax, %eax
    00000032: 	pxor	%xmm1, %xmm1
    00000036: 	shrq	%r8
    00000039: 	shlq	$0x4, %r8
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp257:
    00000040: 	movdqu	(%rsi,%rax), %xmm0
    00000045: 	movdqu	(%rcx,%rax), %xmm2
    0000004a: 	addq	$0x10, %rax
    0000004e: 	pmullw	%xmm2, %xmm0
    00000052: 	paddw	%xmm0, %xmm1
    00000056: 	cmpq	%r8, %rax
    00000059: 	jne	.Ltmp257 # Offset: 89
    0000005b: 	movdqa	%xmm1, %xmm0
    0000005f: 	movq	%r9, %r8
    00000062: 	psrldq	$0x8, %xmm0
    00000067: 	andq	$-0x2, %r8
    0000006b: 	paddw	%xmm0, %xmm1
    0000006f: 	movdqa	%xmm1, %xmm0
    00000073: 	psrldq	$0x4, %xmm0
    00000078: 	paddw	%xmm0, %xmm1
    0000007c: 	movdqa	%xmm1, %xmm0
    00000080: 	psrldq	$0x2, %xmm0
    00000085: 	paddw	%xmm0, %xmm1
    00000089: 	pextrw	$0x0, %xmm1, %eax
    0000008e: 	cmpq	%r9, %r8
    00000091: 	je	.Ltmp258 # Offset: 145
.Ltmp261:
    00000093: 	movq	(%rsi,%r8,8), %xmm1
    00000099: 	movq	(%rcx,%r8,8), %xmm0
    0000009f: 	pmullw	%xmm1, %xmm0
    000000a3: 	pxor	%xmm1, %xmm1
    000000a7: 	pinsrw	$0x0, %eax, %xmm1
    000000ac: 	paddw	%xmm1, %xmm0
    000000b0: 	pextrw	$0x1, %xmm0, %r8d
    000000b6: 	pextrw	$0x0, %xmm0, %eax
    000000bb: 	addl	%r8d, %eax
    000000be: 	pextrw	$0x2, %xmm0, %r8d
    000000c4: 	addl	%r8d, %eax
    000000c7: 	pextrw	$0x3, %xmm0, %r8d
    000000cd: 	addl	%r8d, %eax
.Ltmp258:
    000000d0: 	andq	$-0x4, %rdx
    000000d4: 	movq	%rdx, %r8
    000000d7: 	leaq	0x4(%rdx), %rdx
    000000db: 	cmpq	%rdx, %rdi
    000000de: 	jbe	.Ltmp259 # Offset: 222
    000000e4: 	addq	$0x5, %r8
    000000e8: 	movq	%rdi, %r10
    000000eb: 	movl	$0x1, %r9d
    000000f1: 	subq	%rdx, %r10
    000000f4: 	cmpq	%r8, %rdi
    000000f7: 	cmovaeq	%r10, %r9
    000000fb: 	subq	$0x1, %r10
    000000ff: 	cmpq	$0x2, %r10
    00000103: 	jbe	.Ltmp260 # Offset: 259
    00000105: 	cmpq	%r8, %rdi
    00000108: 	jb	.Ltmp260 # Offset: 264
    0000010a: 	movq	(%rsi,%rdx,2), %xmm0
    0000010f: 	movq	(%rcx,%rdx,2), %xmm1
    00000114: 	pmullw	%xmm1, %xmm0
    00000118: 	pextrw	$0x0, %xmm0, %r10d
    0000011e: 	pextrw	$0x1, %xmm0, %r8d
    00000124: 	addl	%r10d, %r8d
    00000127: 	pextrw	$0x2, %xmm0, %r10d
    0000012d: 	addl	%r10d, %r8d
    00000130: 	pextrw	$0x3, %xmm0, %r10d
    00000136: 	addl	%r10d, %r8d
    00000139: 	addl	%r8d, %eax
    0000013c: 	movq	%r9, %r8
    0000013f: 	andq	$-0x4, %r8
    00000143: 	addq	%r8, %rdx
    00000146: 	cmpq	%r9, %r8
    00000149: 	je	.Ltmp259 # Offset: 329
.Ltmp260:
    0000014b: 	movzwl	(%rsi,%rdx,2), %r8d
    00000150: 	imulw	(%rcx,%rdx,2), %r8w
    00000156: 	leaq	(%rdx,%rdx), %r9
    0000015a: 	addq	$0x1, %rdx
    0000015e: 	addl	%eax, %r8d
    00000161: 	movl	%r8d, %eax
    00000164: 	cmpq	%rdx, %rdi
    00000167: 	jbe	.Ltmp259 # Offset: 359
.Ltmp262:
    00000169: 	movzwl	0x2(%rsi,%r9), %eax
    0000016f: 	imulw	0x2(%rcx,%r9), %ax
    00000176: 	addq	$0x1, %rdx
    0000017a: 	addl	%r8d, %eax
    0000017d: 	cmpq	%rdx, %rdi
    00000180: 	jbe	.Ltmp259 # Offset: 384
    00000182: 	movzwl	0x4(%rsi,%r9), %edx
    00000188: 	imulw	0x4(%rcx,%r9), %dx
    0000018f: 	addl	%edx, %eax
    00000191: 	retq # Offset: 401
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp259:
    00000198: 	retq # Offset: 408
.Ltmp256:
    00000199: 	xorl	%r8d, %r8d
    0000019c: 	xorl	%eax, %eax
    0000019e: 	jmp	.Ltmp261 # Offset: 414
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp255:
    000001a8: 	movzwl	(%rsi), %r8d
    000001ac: 	xorl	%r9d, %r9d
    000001af: 	imulw	(%rcx), %r8w
    000001b4: 	movl	$0x1, %edx
    000001b9: 	jmp	.Ltmp262 # Offset: 441
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKssET0_T_S3_m"

Binary Function "_Z14inner_product5IPKssET0_T_S3_m" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0xdf10
  Size        : 0x1bf
  MaxSize     : 0x1c0
  Offset      : 0xdf10
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rdx, %r8
    0000000a: 	cmpq	$0x7, %rdx
    0000000e: 	je	.Ltmp263 # Offset: 14
    00000014: 	leaq	-0x8(%rdx), %r10
    00000018: 	xorl	%eax, %eax
    0000001a: 	pxor	%xmm1, %xmm1
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%r10, %rdi
    00000023: 	shrq	$0x3, %rdi
    00000027: 	addq	$0x1, %rdi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp264:
    00000030: 	movdqu	(%rsi,%rax), %xmm0
    00000035: 	movdqu	(%rcx,%rax), %xmm2
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	addq	$0x10, %rax
    00000042: 	pmullw	%xmm2, %xmm0
    00000046: 	paddw	%xmm0, %xmm1
    0000004a: 	cmpq	%rdi, %rdx
    0000004d: 	jb	.Ltmp264 # Offset: 77
    0000004f: 	movdqa	%xmm1, %xmm0
    00000053: 	andq	$-0x8, %r10
    00000057: 	psrldq	$0x8, %xmm0
    0000005c: 	leaq	0x8(%r10), %rax
    00000060: 	paddw	%xmm0, %xmm1
    00000064: 	movdqa	%xmm1, %xmm0
    00000068: 	psrldq	$0x4, %xmm0
    0000006d: 	paddw	%xmm0, %xmm1
    00000071: 	movdqa	%xmm1, %xmm0
    00000075: 	psrldq	$0x2, %xmm0
    0000007a: 	paddw	%xmm0, %xmm1
    0000007e: 	pextrw	$0x0, %xmm1, %r9d
    00000084: 	cmpq	%rax, %r8
    00000087: 	jbe	.Ltmp265 # Offset: 135
    0000008d: 	addq	$0x9, %r10
    00000091: 	movq	%r8, %rdi
    00000094: 	movl	$0x1, %edx
    00000099: 	subq	%rax, %rdi
    0000009c: 	cmpq	%r10, %r8
    0000009f: 	cmovaeq	%rdi, %rdx
    000000a3: 	subq	$0x1, %rdi
    000000a7: 	cmpq	$0x6, %rdi
    000000ab: 	jbe	.Ltmp266 # Offset: 171
    000000b1: 	cmpq	%r10, %r8
    000000b4: 	jb	.Ltmp266 # Offset: 180
    000000ba: 	movdqu	(%rsi,%rax,2), %xmm0
    000000bf: 	movdqu	(%rcx,%rax,2), %xmm3
    000000c4: 	movq	%rdx, %r10
    000000c7: 	andq	$-0x8, %r10
    000000cb: 	pmullw	%xmm3, %xmm0
    000000cf: 	movdqa	%xmm0, %xmm1
    000000d3: 	psrldq	$0x8, %xmm1
    000000d8: 	paddw	%xmm1, %xmm0
    000000dc: 	movdqa	%xmm0, %xmm1
    000000e0: 	psrldq	$0x4, %xmm1
    000000e5: 	paddw	%xmm1, %xmm0
    000000e9: 	movdqa	%xmm0, %xmm1
    000000ed: 	psrldq	$0x2, %xmm1
    000000f2: 	paddw	%xmm1, %xmm0
    000000f6: 	pextrw	$0x0, %xmm0, %edi
    000000fb: 	addl	%edi, %r9d
    000000fe: 	leaq	(%r10,%rax), %rdi
    00000102: 	cmpq	%rdx, %r10
    00000105: 	je	.Ltmp265 # Offset: 261
.Ltmp269:
    0000010b: 	subq	%r10, %rdx
    0000010e: 	leaq	-0x1(%rdx), %r11
    00000112: 	cmpq	$0x2, %r11
    00000116: 	jbe	.Ltmp267 # Offset: 278
.Ltmp268:
    00000118: 	addq	%r10, %rax
    0000011b: 	movq	(%rsi,%rax,2), %xmm0
    00000120: 	movq	(%rcx,%rax,2), %xmm1
    00000125: 	pmullw	%xmm1, %xmm0
    00000129: 	pextrw	$0x0, %xmm0, %r10d
    0000012f: 	pextrw	$0x1, %xmm0, %eax
    00000134: 	addl	%r10d, %eax
    00000137: 	pextrw	$0x2, %xmm0, %r10d
    0000013d: 	addl	%r10d, %eax
    00000140: 	pextrw	$0x3, %xmm0, %r10d
    00000146: 	addl	%r10d, %eax
    00000149: 	addl	%eax, %r9d
    0000014c: 	movq	%rdx, %rax
    0000014f: 	andq	$-0x4, %rax
    00000153: 	addq	%rax, %rdi
    00000156: 	cmpq	%rax, %rdx
    00000159: 	je	.Ltmp265 # Offset: 345
.Ltmp267:
    0000015b: 	movzwl	(%rcx,%rdi,2), %eax
    0000015f: 	imulw	(%rsi,%rdi,2), %ax
    00000164: 	leaq	(%rdi,%rdi), %rdx
    00000168: 	addl	%eax, %r9d
    0000016b: 	leaq	0x1(%rdi), %rax
    0000016f: 	cmpq	%r8, %rax
    00000172: 	jae	.Ltmp265 # Offset: 370
    00000174: 	movzwl	0x2(%rcx,%rdx), %eax
    00000179: 	imulw	0x2(%rsi,%rdx), %ax
    0000017f: 	addl	%eax, %r9d
    00000182: 	leaq	0x2(%rdi), %rax
    00000186: 	cmpq	%r8, %rax
    00000189: 	jae	.Ltmp265 # Offset: 393
    0000018b: 	movzwl	0x4(%rsi,%rdx), %eax
    00000190: 	imulw	0x4(%rcx,%rdx), %ax
    00000196: 	addl	%eax, %r9d
.Ltmp265:
    00000199: 	movl	%r9d, %eax
    0000019c: 	retq # Offset: 412
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp263:
    000001a0: 	movl	$0x7, %edx
    000001a5: 	xorl	%edi, %edi
    000001a7: 	xorl	%r9d, %r9d
    000001aa: 	xorl	%r10d, %r10d
    000001ad: 	xorl	%eax, %eax
    000001af: 	jmp	.Ltmp268 # Offset: 431
.Ltmp266:
    000001b4: 	movq	%rax, %rdi
    000001b7: 	xorl	%r10d, %r10d
    000001ba: 	jmp	.Ltmp269 # Offset: 442
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKssET0_T_S3_m"

Binary Function "_Z14inner_product6IPKssET0_T_S3_m" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0xe0d0
  Size        : 0x24dc
  MaxSize     : 0x24e0
  Offset      : 0xe0d0
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rcx
    00000009: 	movq	%rdx, %r8
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x1c0, %rsp
    0000001b: 	subq	$0xf, %rcx
    0000001f: 	je	.Ltmp270 # Offset: 31
    00000025: 	leaq	-0x10(%rdx), %rbx
    00000029: 	movq	%rbx, %r11
    0000002c: 	shrq	$0x4, %r11
    00000030: 	cmpq	$0x7f, %rbx
    00000034: 	jbe	.Ltmp271 # Offset: 52
    0000003a: 	movq	%rbx, %rdx
    0000003d: 	pxor	%xmm3, %xmm3
    00000041: 	movq	%rsi, %rax
    00000044: 	movq	%rdi, %r9
    00000047: 	shrq	$0x7, %rdx
    0000004b: 	movaps	%xmm3, 0x58(%rsp)
    00000050: 	movq	%rdx, %r10
    00000053: 	shlq	$0x8, %r10
    00000057: 	addq	%rsi, %r10
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp272:
    00000060: 	movdqu	(%r9), %xmm14
    00000065: 	movdqu	0x10(%r9), %xmm10
    0000006b: 	addq	$0x100, %rax
    00000071: 	addq	$0x100, %r9
    00000078: 	movdqu	-0xe0(%r9), %xmm13
    00000081: 	movdqu	-0x80(%r9), %xmm0
    00000087: 	movdqa	%xmm14, %xmm12
    0000008c: 	movdqa	%xmm14, %xmm5
    00000091: 	punpcklwd	%xmm10, %xmm14
    00000096: 	movdqu	-0xd0(%r9), %xmm9
    0000009f: 	punpcklwd	%xmm10, %xmm12
    000000a4: 	punpckhwd	%xmm10, %xmm5
    000000a9: 	movdqa	%xmm13, %xmm15
    000000ae: 	movdqu	-0xc0(%r9), %xmm4
    000000b7: 	movdqa	%xmm12, %xmm11
    000000bc: 	punpcklwd	%xmm5, %xmm14
    000000c1: 	punpcklwd	%xmm5, %xmm12
    000000c6: 	movdqu	-0xb0(%r9), %xmm8
    000000cf: 	punpckhwd	%xmm5, %xmm11
    000000d4: 	movdqa	%xmm13, %xmm5
    000000d9: 	punpcklwd	%xmm9, %xmm15
    000000de: 	movdqu	-0xa0(%r9), %xmm3
    000000e7: 	punpcklwd	%xmm11, %xmm12
    000000ec: 	punpckhwd	%xmm11, %xmm14
    000000f1: 	movdqa	%xmm13, %xmm11
    000000f6: 	movdqu	-0x90(%r9), %xmm7
    000000ff: 	punpcklwd	%xmm9, %xmm11
    00000104: 	punpckhwd	%xmm9, %xmm5
    00000109: 	movdqu	-0x70(%r9), %xmm6
    0000010f: 	movdqu	-0x60(%r9), %xmm2
    00000115: 	movdqa	%xmm11, %xmm10
    0000011a: 	punpcklwd	%xmm5, %xmm15
    0000011f: 	punpcklwd	%xmm5, %xmm11
    00000124: 	movdqu	-0x40(%r9), %xmm1
    0000012a: 	punpckhwd	%xmm5, %xmm10
    0000012f: 	movdqa	%xmm4, %xmm5
    00000133: 	punpcklwd	%xmm10, %xmm11
    00000138: 	punpckhwd	%xmm10, %xmm15
    0000013d: 	movdqa	%xmm4, %xmm10
    00000142: 	punpcklwd	%xmm8, %xmm10
    00000147: 	punpckhwd	%xmm8, %xmm5
    0000014c: 	punpcklwd	%xmm8, %xmm4
    00000151: 	movdqa	%xmm10, %xmm9
    00000156: 	punpcklwd	%xmm5, %xmm4
    0000015a: 	punpcklwd	%xmm5, %xmm10
    0000015f: 	punpckhwd	%xmm5, %xmm9
    00000164: 	movdqa	%xmm3, %xmm5
    00000168: 	punpcklwd	%xmm9, %xmm10
    0000016d: 	punpckhwd	%xmm9, %xmm4
    00000172: 	movdqa	%xmm3, %xmm9
    00000177: 	punpcklwd	%xmm7, %xmm9
    0000017c: 	punpckhwd	%xmm7, %xmm5
    00000180: 	punpcklwd	%xmm7, %xmm3
    00000184: 	movdqa	%xmm9, %xmm8
    00000189: 	punpcklwd	%xmm5, %xmm3
    0000018d: 	punpcklwd	%xmm5, %xmm9
    00000192: 	punpckhwd	%xmm5, %xmm8
    00000197: 	movdqa	%xmm0, %xmm5
    0000019b: 	punpcklwd	%xmm8, %xmm9
    000001a0: 	punpckhwd	%xmm8, %xmm3
    000001a5: 	movdqa	%xmm0, %xmm8
    000001aa: 	punpckhwd	%xmm6, %xmm5
    000001ae: 	punpcklwd	%xmm6, %xmm8
    000001b3: 	punpcklwd	%xmm6, %xmm0
    000001b7: 	movdqa	%xmm8, %xmm7
    000001bc: 	punpcklwd	%xmm5, %xmm0
    000001c0: 	punpcklwd	%xmm5, %xmm8
    000001c5: 	punpckhwd	%xmm5, %xmm7
    000001c9: 	movdqa	%xmm0, %xmm5
    000001cd: 	movdqu	-0x50(%r9), %xmm0
    000001d3: 	punpcklwd	%xmm7, %xmm8
    000001d8: 	punpckhwd	%xmm7, %xmm5
    000001dc: 	movdqa	%xmm2, %xmm7
    000001e0: 	punpcklwd	%xmm0, %xmm7
    000001e4: 	movaps	%xmm5, -0x58(%rsp)
    000001e9: 	movdqa	%xmm2, %xmm5
    000001ed: 	punpcklwd	%xmm0, %xmm2
    000001f1: 	punpckhwd	%xmm0, %xmm5
    000001f5: 	movdqa	%xmm7, %xmm6
    000001f9: 	movdqu	-0x30(%r9), %xmm0
    000001ff: 	punpckhwd	%xmm5, %xmm6
    00000203: 	punpcklwd	%xmm5, %xmm7
    00000207: 	punpcklwd	%xmm5, %xmm2
    0000020b: 	punpckhwd	%xmm6, %xmm2
    0000020f: 	punpcklwd	%xmm6, %xmm7
    00000213: 	movdqa	%xmm1, %xmm6
    00000217: 	punpcklwd	%xmm0, %xmm6
    0000021b: 	movdqa	%xmm1, %xmm5
    0000021f: 	punpcklwd	%xmm0, %xmm1
    00000223: 	punpckhwd	%xmm0, %xmm5
    00000227: 	movdqa	%xmm6, %xmm13
    0000022c: 	movdqa	%xmm1, %xmm0
    00000230: 	movdqu	-0x10(%r9), %xmm1
    00000236: 	punpckhwd	%xmm5, %xmm13
    0000023b: 	punpcklwd	%xmm5, %xmm0
    0000023f: 	punpcklwd	%xmm5, %xmm6
    00000243: 	movdqu	-0x10(%r9), %xmm5
    00000249: 	punpckhwd	%xmm13, %xmm0
    0000024e: 	punpcklwd	%xmm13, %xmm6
    00000253: 	movdqu	-0x10(%r9), %xmm13
    00000259: 	movaps	%xmm0, -0x68(%rsp)
    0000025e: 	movdqu	-0x20(%r9), %xmm0
    00000264: 	punpckhwd	%xmm5, %xmm0
    00000268: 	movdqu	-0x20(%r9), %xmm5
    0000026e: 	punpcklwd	%xmm13, %xmm5
    00000273: 	movdqa	%xmm5, %xmm13
    00000278: 	punpcklwd	%xmm0, %xmm5
    0000027c: 	punpckhwd	%xmm0, %xmm13
    00000281: 	movaps	%xmm13, -0x78(%rsp)
    00000287: 	punpcklwd	%xmm13, %xmm5
    0000028c: 	movdqu	-0x20(%r9), %xmm13
    00000292: 	punpcklwd	%xmm1, %xmm13
    00000297: 	punpcklwd	%xmm0, %xmm13
    0000029c: 	movdqa	%xmm12, %xmm0
    000002a1: 	punpckhwd	-0x78(%rsp), %xmm13
    000002a8: 	punpckhwd	%xmm11, %xmm0
    000002ad: 	movdqa	%xmm0, %xmm1
    000002b1: 	movdqa	%xmm12, %xmm0
    000002b6: 	punpcklwd	%xmm11, %xmm12
    000002bb: 	punpcklwd	%xmm11, %xmm0
    000002c0: 	movaps	%xmm1, -0x48(%rsp)
    000002c5: 	movdqa	%xmm10, %xmm11
    000002ca: 	punpcklwd	-0x48(%rsp), %xmm12
    000002d1: 	movaps	%xmm0, -0x78(%rsp)
    000002d6: 	punpckhwd	%xmm1, %xmm0
    000002da: 	punpckhwd	%xmm9, %xmm11
    000002df: 	movaps	%xmm0, -0x38(%rsp)
    000002e4: 	movdqa	-0x78(%rsp), %xmm0
    000002ea: 	punpcklwd	%xmm1, %xmm0
    000002ee: 	movdqa	-0x38(%rsp), %xmm1
    000002f4: 	punpcklwd	%xmm1, %xmm0
    000002f8: 	punpckhwd	%xmm1, %xmm12
    000002fd: 	movaps	%xmm0, -0x78(%rsp)
    00000302: 	movdqa	%xmm10, %xmm0
    00000307: 	punpcklwd	%xmm9, %xmm10
    0000030c: 	punpcklwd	%xmm9, %xmm0
    00000311: 	movaps	%xmm12, 0x48(%rsp)
    00000317: 	punpcklwd	%xmm11, %xmm10
    0000031c: 	movdqa	%xmm8, %xmm9
    00000321: 	movdqa	%xmm0, %xmm12
    00000326: 	punpcklwd	%xmm11, %xmm0
    0000032b: 	punpcklwd	%xmm7, %xmm9
    00000330: 	punpckhwd	%xmm11, %xmm12
    00000335: 	movdqa	%xmm8, %xmm11
    0000033a: 	movdqa	%xmm9, %xmm8
    0000033f: 	punpcklwd	%xmm12, %xmm0
    00000344: 	punpckhwd	%xmm12, %xmm10
    00000349: 	punpckhwd	%xmm7, %xmm11
    0000034e: 	movaps	%xmm0, 0x38(%rsp)
    00000353: 	movdqa	%xmm9, %xmm0
    00000358: 	movdqa	%xmm6, %xmm7
    0000035c: 	movdqa	-0x58(%rsp), %xmm1
    00000362: 	movaps	%xmm10, 0x28(%rsp)
    00000368: 	movdqa	%xmm11, %xmm10
    0000036d: 	movdqa	%xmm9, %xmm11
    00000372: 	movdqa	%xmm14, %xmm9
    00000377: 	punpckhwd	%xmm10, %xmm11
    0000037c: 	punpcklwd	%xmm10, %xmm0
    00000381: 	punpcklwd	%xmm10, %xmm8
    00000386: 	punpcklwd	%xmm11, %xmm0
    0000038b: 	punpckhwd	%xmm11, %xmm8
    00000390: 	movdqa	%xmm6, %xmm11
    00000395: 	punpcklwd	%xmm5, %xmm11
    0000039a: 	punpcklwd	%xmm5, %xmm6
    0000039e: 	punpckhwd	%xmm5, %xmm7
    000003a2: 	movaps	%xmm8, 0x8(%rsp)
    000003a8: 	punpckhwd	%xmm15, %xmm9
    000003ad: 	movdqa	%xmm11, %xmm8
    000003b2: 	movdqa	%xmm6, %xmm5
    000003b6: 	movaps	%xmm0, 0x18(%rsp)
    000003bb: 	movdqa	%xmm9, %xmm6
    000003c0: 	punpckhwd	%xmm7, %xmm8
    000003c5: 	punpcklwd	%xmm7, %xmm5
    000003c9: 	movdqa	%xmm14, %xmm9
    000003ce: 	punpckhwd	%xmm8, %xmm5
    000003d3: 	punpcklwd	%xmm7, %xmm11
    000003d8: 	punpcklwd	%xmm15, %xmm9
    000003dd: 	movdqa	%xmm4, %xmm15
    000003e2: 	movaps	%xmm5, -0x18(%rsp)
    000003e7: 	punpcklwd	%xmm8, %xmm11
    000003ec: 	punpckhwd	%xmm3, %xmm15
    000003f1: 	movdqa	%xmm9, %xmm5
    000003f6: 	movdqa	%xmm9, %xmm7
    000003fb: 	movaps	%xmm11, -0x8(%rsp)
    00000401: 	movdqa	%xmm9, %xmm14
    00000406: 	punpckhwd	%xmm6, %xmm7
    0000040a: 	punpcklwd	%xmm6, %xmm5
    0000040e: 	punpcklwd	%xmm6, %xmm14
    00000413: 	movdqa	%xmm15, %xmm6
    00000418: 	movdqa	%xmm4, %xmm15
    0000041d: 	punpcklwd	%xmm3, %xmm15
    00000422: 	punpcklwd	%xmm3, %xmm4
    00000426: 	punpcklwd	%xmm7, %xmm5
    0000042a: 	punpckhwd	%xmm7, %xmm14
    0000042f: 	movdqa	%xmm4, %xmm3
    00000433: 	movdqa	%xmm15, %xmm7
    00000438: 	punpckhwd	%xmm6, %xmm7
    0000043c: 	punpcklwd	%xmm6, %xmm3
    00000440: 	movdqa	%xmm1, %xmm4
    00000444: 	movaps	%xmm14, -0x28(%rsp)
    0000044a: 	movdqa	%xmm1, %xmm9
    0000044f: 	punpcklwd	%xmm2, %xmm1
    00000453: 	punpckhwd	%xmm7, %xmm3
    00000457: 	movdqu	-0x90(%rax), %xmm14
    00000460: 	punpcklwd	%xmm2, %xmm9
    00000465: 	movdqa	%xmm1, %xmm0
    00000469: 	movdqa	-0x68(%rsp), %xmm1
    0000046f: 	punpckhwd	%xmm2, %xmm4
    00000473: 	movaps	%xmm3, -0x48(%rsp)
    00000478: 	movdqa	%xmm9, %xmm3
    0000047d: 	punpcklwd	%xmm4, %xmm0
    00000481: 	punpckhwd	%xmm4, %xmm9
    00000486: 	punpcklwd	%xmm4, %xmm3
    0000048a: 	movdqa	%xmm1, %xmm10
    0000048f: 	punpckhwd	%xmm9, %xmm0
    00000494: 	movdqu	-0x60(%rax), %xmm2
    00000499: 	punpcklwd	%xmm9, %xmm3
    0000049e: 	punpcklwd	%xmm13, %xmm10
    000004a3: 	movdqa	%xmm1, %xmm9
    000004a8: 	movdqa	%xmm1, %xmm8
    000004ad: 	punpckhwd	%xmm13, %xmm9
    000004b2: 	movdqa	%xmm10, %xmm4
    000004b7: 	punpcklwd	%xmm13, %xmm8
    000004bc: 	punpckhwd	%xmm9, %xmm4
    000004c1: 	punpcklwd	%xmm9, %xmm10
    000004c6: 	movdqa	%xmm8, %xmm13
    000004cb: 	punpcklwd	%xmm4, %xmm10
    000004d0: 	punpcklwd	%xmm6, %xmm15
    000004d5: 	movdqu	-0xe0(%rax), %xmm8
    000004de: 	punpcklwd	%xmm9, %xmm13
    000004e3: 	movaps	%xmm10, -0x58(%rsp)
    000004e9: 	movdqu	-0x100(%rax), %xmm10
    000004f2: 	punpcklwd	%xmm7, %xmm15
    000004f7: 	punpckhwd	%xmm4, %xmm13
    000004fc: 	movdqu	-0xc0(%rax), %xmm7
    00000504: 	movdqu	-0xa0(%rax), %xmm6
    0000050c: 	movaps	%xmm15, -0x38(%rsp)
    00000512: 	movaps	%xmm13, -0x68(%rsp)
    00000518: 	movdqa	%xmm10, %xmm9
    0000051d: 	movdqa	%xmm10, %xmm12
    00000522: 	movdqu	-0xf0(%rax), %xmm13
    0000052b: 	movdqu	-0x80(%rax), %xmm4
    00000530: 	movdqu	-0x40(%rax), %xmm15
    00000536: 	punpckhwd	%xmm13, %xmm9
    0000053b: 	punpcklwd	%xmm13, %xmm12
    00000540: 	punpcklwd	%xmm13, %xmm10
    00000545: 	movdqu	-0xd0(%rax), %xmm13
    0000054e: 	movdqa	%xmm9, %xmm1
    00000553: 	movdqa	%xmm12, %xmm9
    00000558: 	punpckhwd	%xmm1, %xmm9
    0000055d: 	punpcklwd	%xmm1, %xmm12
    00000562: 	punpcklwd	%xmm1, %xmm10
    00000567: 	punpcklwd	%xmm9, %xmm12
    0000056c: 	punpckhwd	%xmm9, %xmm10
    00000571: 	movdqa	%xmm8, %xmm9
    00000576: 	punpckhwd	%xmm13, %xmm9
    0000057b: 	movaps	%xmm10, 0x68(%rsp)
    00000581: 	movdqa	%xmm9, %xmm1
    00000586: 	movdqa	%xmm8, %xmm9
    0000058b: 	punpcklwd	%xmm13, %xmm8
    00000590: 	punpcklwd	%xmm13, %xmm9
    00000595: 	movdqa	%xmm8, %xmm13
    0000059a: 	movdqu	-0xb0(%rax), %xmm8
    000005a3: 	movdqa	%xmm9, %xmm11
    000005a8: 	punpcklwd	%xmm1, %xmm13
    000005ad: 	punpckhwd	%xmm1, %xmm9
    000005b2: 	punpcklwd	%xmm1, %xmm11
    000005b7: 	movdqu	-0xb0(%rax), %xmm1
    000005bf: 	punpckhwd	%xmm9, %xmm13
    000005c4: 	punpcklwd	%xmm9, %xmm11
    000005c9: 	movdqa	%xmm7, %xmm9
    000005ce: 	movaps	%xmm13, 0x78(%rsp)
    000005d4: 	punpckhwd	%xmm1, %xmm9
    000005d9: 	movdqa	%xmm9, %xmm1
    000005de: 	movdqa	%xmm7, %xmm9
    000005e3: 	punpcklwd	%xmm8, %xmm9
    000005e8: 	movdqa	%xmm9, %xmm10
    000005ed: 	punpckhwd	%xmm1, %xmm9
    000005f2: 	punpcklwd	%xmm1, %xmm10
    000005f7: 	movdqa	%xmm9, %xmm8
    000005fc: 	punpcklwd	%xmm9, %xmm10
    00000601: 	movdqu	-0xb0(%rax), %xmm9
    0000060a: 	punpcklwd	%xmm9, %xmm7
    0000060f: 	movdqa	%xmm6, %xmm9
    00000614: 	punpckhwd	%xmm14, %xmm9
    00000619: 	punpcklwd	%xmm1, %xmm7
    0000061d: 	movdqa	%xmm9, %xmm1
    00000622: 	movdqa	%xmm6, %xmm9
    00000627: 	punpcklwd	%xmm14, %xmm6
    0000062c: 	punpcklwd	%xmm14, %xmm9
    00000631: 	punpckhwd	%xmm8, %xmm7
    00000636: 	movdqa	%xmm6, %xmm14
    0000063b: 	movdqa	%xmm9, %xmm8
    00000640: 	punpcklwd	%xmm1, %xmm14
    00000645: 	punpckhwd	%xmm1, %xmm9
    0000064a: 	movaps	%xmm7, 0x88(%rsp)
    00000652: 	punpcklwd	%xmm1, %xmm8
    00000657: 	movdqu	-0x70(%rax), %xmm1
    0000065c: 	punpckhwd	%xmm9, %xmm14
    00000661: 	movdqu	-0x70(%rax), %xmm7
    00000666: 	movaps	%xmm14, 0x98(%rsp)
    0000066f: 	punpcklwd	%xmm9, %xmm8
    00000674: 	movdqa	%xmm4, %xmm9
    00000679: 	punpckhwd	%xmm1, %xmm9
    0000067e: 	movdqa	%xmm9, %xmm1
    00000683: 	movdqa	%xmm4, %xmm9
    00000688: 	punpcklwd	%xmm7, %xmm9
    0000068d: 	movdqa	%xmm9, %xmm7
    00000692: 	punpckhwd	%xmm1, %xmm9
    00000697: 	punpcklwd	%xmm1, %xmm7
    0000069b: 	movdqa	%xmm9, %xmm6
    000006a0: 	punpcklwd	%xmm9, %xmm7
    000006a5: 	movdqu	-0x70(%rax), %xmm9
    000006ab: 	punpcklwd	%xmm9, %xmm4
    000006b0: 	movdqa	%xmm2, %xmm9
    000006b5: 	movdqa	%xmm4, %xmm14
    000006ba: 	movdqu	-0x50(%rax), %xmm4
    000006bf: 	punpcklwd	%xmm1, %xmm14
    000006c4: 	punpckhwd	%xmm4, %xmm9
    000006c9: 	punpckhwd	%xmm6, %xmm14
    000006ce: 	movdqa	%xmm9, %xmm1
    000006d3: 	movdqa	%xmm2, %xmm9
    000006d8: 	punpcklwd	%xmm4, %xmm9
    000006dd: 	movdqa	%xmm9, %xmm6
    000006e2: 	movdqa	%xmm9, %xmm4
    000006e7: 	movdqu	-0x50(%rax), %xmm9
    000006ed: 	punpckhwd	%xmm1, %xmm4
    000006f1: 	punpcklwd	%xmm1, %xmm6
    000006f5: 	punpcklwd	%xmm9, %xmm2
    000006fa: 	punpcklwd	%xmm4, %xmm6
    000006fe: 	movdqa	%xmm15, %xmm9
    00000703: 	punpcklwd	%xmm1, %xmm2
    00000707: 	punpckhwd	%xmm4, %xmm2
    0000070b: 	movdqu	-0x30(%rax), %xmm4
    00000710: 	movaps	%xmm2, 0xa8(%rsp)
    00000718: 	punpckhwd	%xmm4, %xmm9
    0000071d: 	movdqa	%xmm15, %xmm4
    00000722: 	movdqa	%xmm9, %xmm1
    00000727: 	movdqu	-0x30(%rax), %xmm9
    0000072d: 	punpcklwd	%xmm9, %xmm4
    00000732: 	movdqa	%xmm4, %xmm9
    00000737: 	punpcklwd	%xmm1, %xmm4
    0000073b: 	punpckhwd	%xmm1, %xmm9
    00000740: 	punpcklwd	%xmm9, %xmm4
    00000745: 	movdqa	%xmm9, %xmm2
    0000074a: 	movdqu	-0x30(%rax), %xmm9
    00000750: 	punpcklwd	%xmm9, %xmm15
    00000755: 	movdqu	-0x20(%rax), %xmm9
    0000075b: 	punpcklwd	%xmm1, %xmm15
    00000760: 	movdqu	-0x10(%rax), %xmm1
    00000765: 	punpckhwd	%xmm2, %xmm15
    0000076a: 	movdqu	-0x10(%rax), %xmm2
    0000076f: 	punpckhwd	%xmm1, %xmm9
    00000774: 	movdqa	%xmm9, %xmm1
    00000779: 	movdqu	-0x20(%rax), %xmm9
    0000077f: 	movaps	%xmm1, 0xb8(%rsp)
    00000787: 	punpcklwd	%xmm2, %xmm9
    0000078c: 	movdqa	%xmm9, %xmm2
    00000791: 	punpckhwd	%xmm1, %xmm9
    00000796: 	punpcklwd	%xmm1, %xmm2
    0000079a: 	movdqa	%xmm9, %xmm13
    0000079f: 	movdqu	-0x10(%rax), %xmm1
    000007a4: 	punpcklwd	%xmm9, %xmm2
    000007a9: 	movdqu	-0x20(%rax), %xmm9
    000007af: 	punpcklwd	%xmm1, %xmm9
    000007b4: 	movdqa	%xmm12, %xmm1
    000007b9: 	punpcklwd	0xb8(%rsp), %xmm9
    000007c3: 	punpcklwd	%xmm11, %xmm1
    000007c8: 	punpckhwd	%xmm13, %xmm9
    000007cd: 	movaps	%xmm9, 0xb8(%rsp)
    000007d6: 	movdqa	%xmm12, %xmm9
    000007db: 	punpcklwd	%xmm11, %xmm12
    000007e0: 	punpckhwd	%xmm11, %xmm9
    000007e5: 	movdqa	%xmm10, %xmm11
    000007ea: 	movdqa	%xmm9, %xmm13
    000007ef: 	movdqa	%xmm1, %xmm9
    000007f4: 	punpcklwd	%xmm8, %xmm11
    000007f9: 	punpcklwd	%xmm13, %xmm12
    000007fe: 	punpckhwd	%xmm13, %xmm9
    00000803: 	punpcklwd	%xmm13, %xmm1
    00000808: 	movdqa	%xmm12, %xmm13
    0000080d: 	punpcklwd	%xmm9, %xmm1
    00000812: 	punpckhwd	%xmm9, %xmm13
    00000817: 	movdqa	%xmm10, %xmm9
    0000081c: 	movaps	%xmm13, 0xc8(%rsp)
    00000825: 	punpckhwd	%xmm8, %xmm9
    0000082a: 	movdqa	%xmm9, %xmm12
    0000082f: 	movdqa	%xmm11, %xmm9
    00000834: 	punpckhwd	%xmm12, %xmm9
    00000839: 	punpcklwd	%xmm12, %xmm11
    0000083e: 	punpcklwd	%xmm9, %xmm11
    00000843: 	movdqa	%xmm9, %xmm13
    00000848: 	movdqa	%xmm10, %xmm9
    0000084d: 	punpcklwd	%xmm8, %xmm9
    00000852: 	movdqa	%xmm7, %xmm8
    00000857: 	punpckhwd	%xmm6, %xmm8
    0000085c: 	punpcklwd	%xmm12, %xmm9
    00000861: 	movdqa	%xmm8, %xmm10
    00000866: 	movdqa	%xmm7, %xmm8
    0000086b: 	punpcklwd	%xmm6, %xmm7
    0000086f: 	punpcklwd	%xmm6, %xmm8
    00000874: 	punpcklwd	%xmm10, %xmm7
    00000879: 	movdqa	%xmm4, %xmm6
    0000087d: 	movdqa	%xmm8, %xmm12
    00000882: 	punpcklwd	%xmm10, %xmm8
    00000887: 	punpckhwd	%xmm2, %xmm6
    0000088b: 	punpckhwd	%xmm10, %xmm12
    00000890: 	punpckhwd	%xmm13, %xmm9
    00000895: 	movdqa	0x78(%rsp), %xmm13
    0000089c: 	punpcklwd	%xmm12, %xmm8
    000008a1: 	punpckhwd	%xmm12, %xmm7
    000008a6: 	movdqa	%xmm4, %xmm12
    000008ab: 	movaps	%xmm9, 0xd8(%rsp)
    000008b4: 	punpcklwd	%xmm2, %xmm12
    000008b9: 	punpcklwd	%xmm2, %xmm4
    000008bd: 	movaps	%xmm7, 0xe8(%rsp)
    000008c5: 	movdqa	0xb8(%rsp), %xmm9
    000008cf: 	movdqa	%xmm12, %xmm10
    000008d4: 	punpcklwd	%xmm6, %xmm4
    000008d8: 	punpckhwd	%xmm6, %xmm12
    000008dd: 	punpcklwd	%xmm6, %xmm10
    000008e2: 	movdqa	0x68(%rsp), %xmm6
    000008e8: 	punpckhwd	%xmm12, %xmm4
    000008ed: 	punpcklwd	%xmm12, %xmm10
    000008f2: 	movaps	%xmm4, 0xf8(%rsp)
    000008fa: 	movdqa	0x88(%rsp), %xmm12
    00000904: 	movdqa	%xmm6, %xmm7
    00000908: 	movdqa	%xmm6, %xmm2
    0000090c: 	punpcklwd	%xmm13, %xmm6
    00000911: 	punpcklwd	%xmm13, %xmm7
    00000916: 	punpckhwd	%xmm13, %xmm2
    0000091b: 	movdqa	0x98(%rsp), %xmm13
    00000925: 	movdqa	%xmm7, %xmm4
    00000929: 	punpcklwd	%xmm2, %xmm6
    0000092d: 	punpcklwd	%xmm2, %xmm7
    00000931: 	punpckhwd	%xmm2, %xmm4
    00000935: 	punpcklwd	%xmm4, %xmm7
    00000939: 	punpckhwd	%xmm4, %xmm6
    0000093d: 	movdqa	%xmm12, %xmm4
    00000942: 	punpckhwd	%xmm13, %xmm4
    00000947: 	movaps	%xmm6, 0x68(%rsp)
    0000094c: 	movdqa	%xmm4, %xmm2
    00000950: 	movdqa	%xmm12, %xmm4
    00000955: 	punpcklwd	%xmm13, %xmm12
    0000095a: 	punpcklwd	%xmm13, %xmm4
    0000095f: 	punpcklwd	%xmm2, %xmm12
    00000964: 	movdqa	0xa8(%rsp), %xmm13
    0000096e: 	movdqa	%xmm4, %xmm6
    00000972: 	punpckhwd	%xmm2, %xmm4
    00000976: 	punpcklwd	%xmm2, %xmm6
    0000097a: 	punpckhwd	%xmm4, %xmm12
    0000097f: 	movdqa	%xmm14, %xmm2
    00000984: 	punpcklwd	%xmm4, %xmm6
    00000988: 	movdqa	%xmm14, %xmm4
    0000098d: 	punpckhwd	%xmm13, %xmm2
    00000992: 	movaps	%xmm12, 0x78(%rsp)
    00000998: 	punpcklwd	%xmm13, %xmm4
    0000099d: 	punpcklwd	%xmm13, %xmm14
    000009a2: 	movdqa	%xmm4, %xmm12
    000009a7: 	punpcklwd	%xmm2, %xmm14
    000009ac: 	punpcklwd	%xmm2, %xmm4
    000009b0: 	punpckhwd	%xmm2, %xmm12
    000009b5: 	movdqa	%xmm15, %xmm2
    000009ba: 	punpcklwd	%xmm12, %xmm4
    000009bf: 	punpckhwd	%xmm12, %xmm14
    000009c4: 	movdqa	%xmm15, %xmm12
    000009c9: 	punpckhwd	%xmm9, %xmm12
    000009ce: 	punpcklwd	%xmm9, %xmm2
    000009d3: 	punpcklwd	%xmm9, %xmm15
    000009d8: 	movdqa	%xmm2, %xmm13
    000009dd: 	punpcklwd	%xmm12, %xmm15
    000009e2: 	punpcklwd	%xmm12, %xmm2
    000009e7: 	punpckhwd	%xmm12, %xmm13
    000009ec: 	movdqa	%xmm15, %xmm12
    000009f1: 	punpcklwd	%xmm13, %xmm2
    000009f6: 	punpckhwd	%xmm13, %xmm12
    000009fb: 	movdqa	%xmm1, %xmm13
    00000a00: 	movaps	%xmm12, 0x88(%rsp)
    00000a09: 	punpckhwd	%xmm11, %xmm13
    00000a0e: 	movdqa	%xmm13, %xmm12
    00000a13: 	movdqa	%xmm1, %xmm13
    00000a18: 	punpcklwd	%xmm11, %xmm1
    00000a1d: 	punpcklwd	%xmm11, %xmm13
    00000a22: 	movdqa	%xmm1, %xmm11
    00000a27: 	movdqa	%xmm8, %xmm1
    00000a2c: 	movdqa	%xmm13, %xmm15
    00000a31: 	punpcklwd	%xmm12, %xmm11
    00000a36: 	punpckhwd	%xmm12, %xmm13
    00000a3b: 	punpcklwd	%xmm12, %xmm15
    00000a40: 	movdqa	%xmm8, %xmm12
    00000a45: 	punpckhwd	%xmm13, %xmm11
    00000a4a: 	punpcklwd	%xmm10, %xmm12
    00000a4f: 	punpckhwd	%xmm10, %xmm1
    00000a54: 	punpcklwd	%xmm10, %xmm8
    00000a59: 	movaps	%xmm11, 0x98(%rsp)
    00000a62: 	movdqa	%xmm12, %xmm11
    00000a67: 	punpcklwd	%xmm1, %xmm8
    00000a6c: 	punpcklwd	%xmm1, %xmm12
    00000a71: 	punpckhwd	%xmm1, %xmm11
    00000a76: 	punpcklwd	%xmm13, %xmm15
    00000a7b: 	movdqa	%xmm7, %xmm1
    00000a7f: 	punpcklwd	%xmm11, %xmm12
    00000a84: 	punpckhwd	%xmm11, %xmm8
    00000a89: 	movdqa	%xmm7, %xmm11
    00000a8e: 	punpcklwd	%xmm6, %xmm11
    00000a93: 	punpckhwd	%xmm6, %xmm1
    00000a97: 	movaps	%xmm8, 0xa8(%rsp)
    00000aa0: 	movdqa	%xmm11, %xmm13
    00000aa5: 	movdqa	%xmm11, %xmm8
    00000aaa: 	movdqa	%xmm7, %xmm11
    00000aaf: 	punpcklwd	%xmm6, %xmm11
    00000ab4: 	punpckhwd	%xmm1, %xmm8
    00000ab9: 	punpcklwd	%xmm1, %xmm13
    00000abe: 	punpcklwd	%xmm1, %xmm11
    00000ac3: 	movdqa	%xmm4, %xmm1
    00000ac7: 	punpcklwd	%xmm8, %xmm13
    00000acc: 	punpckhwd	%xmm8, %xmm11
    00000ad1: 	punpckhwd	%xmm2, %xmm1
    00000ad5: 	movaps	%xmm11, 0xb8(%rsp)
    00000ade: 	movdqa	%xmm4, %xmm11
    00000ae3: 	punpcklwd	%xmm2, %xmm4
    00000ae7: 	punpcklwd	%xmm2, %xmm11
    00000aec: 	movdqa	%xmm4, %xmm2
    00000af0: 	movdqa	%xmm11, %xmm6
    00000af5: 	punpcklwd	%xmm1, %xmm2
    00000af9: 	punpcklwd	%xmm1, %xmm11
    00000afe: 	punpckhwd	%xmm1, %xmm6
    00000b02: 	punpckhwd	%xmm6, %xmm2
    00000b06: 	punpcklwd	%xmm6, %xmm11
    00000b0b: 	movaps	%xmm2, 0x108(%rsp)
    00000b13: 	movdqa	0xc8(%rsp), %xmm10
    00000b1d: 	movdqa	0xd8(%rsp), %xmm9
    00000b27: 	movdqa	0xe8(%rsp), %xmm7
    00000b30: 	movdqa	%xmm10, %xmm2
    00000b35: 	movdqa	%xmm10, %xmm1
    00000b3a: 	punpcklwd	%xmm9, %xmm10
    00000b3f: 	punpcklwd	%xmm9, %xmm2
    00000b44: 	punpckhwd	%xmm9, %xmm1
    00000b49: 	movdqa	%xmm7, %xmm8
    00000b4e: 	movdqa	0xf8(%rsp), %xmm9
    00000b58: 	movdqa	%xmm2, %xmm4
    00000b5c: 	punpcklwd	%xmm1, %xmm10
    00000b61: 	punpcklwd	%xmm1, %xmm2
    00000b65: 	punpckhwd	%xmm1, %xmm4
    00000b69: 	movdqa	%xmm7, %xmm1
    00000b6d: 	punpcklwd	%xmm9, %xmm8
    00000b72: 	punpckhwd	%xmm9, %xmm1
    00000b77: 	punpcklwd	%xmm9, %xmm7
    00000b7c: 	punpcklwd	%xmm4, %xmm2
    00000b80: 	movdqa	0x88(%rsp), %xmm9
    00000b8a: 	punpckhwd	%xmm4, %xmm10
    00000b8f: 	punpcklwd	%xmm1, %xmm7
    00000b93: 	movdqa	%xmm8, %xmm4
    00000b98: 	punpckhwd	%xmm1, %xmm4
    00000b9c: 	punpcklwd	%xmm1, %xmm8
    00000ba1: 	movdqa	%xmm7, %xmm1
    00000ba5: 	movdqa	0x68(%rsp), %xmm7
    00000bab: 	movaps	%xmm10, 0xc8(%rsp)
    00000bb4: 	movdqa	0x78(%rsp), %xmm10
    00000bbb: 	punpcklwd	%xmm4, %xmm8
    00000bc0: 	punpckhwd	%xmm4, %xmm1
    00000bc4: 	movdqa	%xmm7, %xmm4
    00000bc8: 	movaps	%xmm1, 0xd8(%rsp)
    00000bd0: 	movdqa	%xmm7, %xmm1
    00000bd4: 	punpcklwd	%xmm10, %xmm4
    00000bd9: 	punpckhwd	%xmm10, %xmm1
    00000bde: 	punpcklwd	%xmm10, %xmm7
    00000be3: 	movdqa	%xmm4, %xmm6
    00000be7: 	punpcklwd	%xmm1, %xmm7
    00000beb: 	punpcklwd	%xmm1, %xmm4
    00000bef: 	punpckhwd	%xmm1, %xmm6
    00000bf3: 	movdqa	%xmm14, %xmm1
    00000bf8: 	punpckhwd	%xmm6, %xmm7
    00000bfc: 	punpckhwd	%xmm9, %xmm1
    00000c01: 	punpcklwd	%xmm6, %xmm4
    00000c05: 	movaps	%xmm7, 0x68(%rsp)
    00000c0a: 	movdqa	%xmm14, %xmm7
    00000c0f: 	punpcklwd	%xmm9, %xmm14
    00000c14: 	punpcklwd	%xmm9, %xmm7
    00000c19: 	punpcklwd	%xmm1, %xmm14
    00000c1e: 	movdqa	%xmm7, %xmm6
    00000c22: 	punpcklwd	%xmm1, %xmm7
    00000c26: 	punpckhwd	%xmm1, %xmm6
    00000c2a: 	movdqa	0x48(%rsp), %xmm1
    00000c30: 	punpcklwd	%xmm6, %xmm7
    00000c34: 	punpckhwd	%xmm6, %xmm14
    00000c39: 	movdqa	0x28(%rsp), %xmm6
    00000c3f: 	movaps	%xmm14, 0x78(%rsp)
    00000c45: 	movdqa	%xmm1, %xmm14
    00000c4a: 	punpcklwd	%xmm6, %xmm1
    00000c4e: 	punpckhwd	%xmm6, %xmm14
    00000c53: 	movdqa	0x8(%rsp), %xmm6
    00000c59: 	movaps	%xmm14, 0x88(%rsp)
    00000c62: 	movdqa	%xmm1, %xmm10
    00000c67: 	punpcklwd	%xmm14, %xmm1
    00000c6c: 	punpckhwd	%xmm14, %xmm10
    00000c71: 	movdqa	-0x18(%rsp), %xmm14
    00000c78: 	movaps	%xmm10, 0xe8(%rsp)
    00000c81: 	punpcklwd	%xmm10, %xmm1
    00000c86: 	movdqa	%xmm6, %xmm10
    00000c8b: 	punpcklwd	%xmm14, %xmm6
    00000c90: 	punpckhwd	%xmm14, %xmm10
    00000c95: 	movdqa	%xmm0, %xmm14
    00000c9a: 	movaps	%xmm10, 0xf8(%rsp)
    00000ca3: 	movdqa	%xmm6, %xmm9
    00000ca8: 	punpcklwd	%xmm10, %xmm6
    00000cad: 	punpckhwd	%xmm10, %xmm9
    00000cb2: 	movaps	%xmm9, 0x118(%rsp)
    00000cbb: 	punpcklwd	%xmm9, %xmm6
    00000cc0: 	movdqa	%xmm1, %xmm9
    00000cc5: 	punpcklwd	%xmm6, %xmm1
    00000cc9: 	punpckhwd	%xmm6, %xmm9
    00000cce: 	movdqa	%xmm1, %xmm6
    00000cd2: 	punpcklwd	%xmm9, %xmm1
    00000cd7: 	punpckhwd	%xmm9, %xmm6
    00000cdc: 	punpcklwd	%xmm6, %xmm1
    00000ce0: 	movdqa	%xmm2, %xmm6
    00000ce4: 	punpckhwd	%xmm8, %xmm6
    00000ce9: 	movdqa	%xmm6, %xmm10
    00000cee: 	movdqa	%xmm2, %xmm6
    00000cf2: 	punpcklwd	%xmm8, %xmm2
    00000cf7: 	punpcklwd	%xmm8, %xmm6
    00000cfc: 	punpcklwd	%xmm10, %xmm2
    00000d01: 	movdqa	%xmm6, %xmm9
    00000d06: 	punpcklwd	%xmm10, %xmm6
    00000d0b: 	punpckhwd	%xmm10, %xmm9
    00000d10: 	punpckhwd	%xmm9, %xmm2
    00000d15: 	punpcklwd	%xmm9, %xmm6
    00000d1a: 	movdqa	%xmm0, %xmm9
    00000d1f: 	paddw	%xmm2, %xmm6
    00000d23: 	movdqa	-0x28(%rsp), %xmm2
    00000d29: 	pmullw	%xmm1, %xmm6
    00000d2d: 	movdqa	-0x48(%rsp), %xmm1
    00000d33: 	movdqa	%xmm2, %xmm8
    00000d38: 	punpcklwd	%xmm1, %xmm2
    00000d3c: 	punpckhwd	%xmm1, %xmm8
    00000d41: 	movaps	%xmm8, 0x128(%rsp)
    00000d4a: 	movdqa	%xmm2, %xmm1
    00000d4e: 	punpckhwd	%xmm8, %xmm2
    00000d53: 	punpcklwd	%xmm8, %xmm1
    00000d58: 	movdqa	-0x68(%rsp), %xmm8
    00000d5f: 	movaps	%xmm2, 0x138(%rsp)
    00000d67: 	punpcklwd	%xmm2, %xmm1
    00000d6b: 	punpcklwd	%xmm8, %xmm9
    00000d70: 	punpckhwd	%xmm8, %xmm14
    00000d75: 	movdqa	%xmm1, %xmm8
    00000d7a: 	movdqa	%xmm9, %xmm2
    00000d7f: 	punpckhwd	%xmm14, %xmm9
    00000d84: 	movaps	%xmm9, 0x148(%rsp)
    00000d8d: 	punpcklwd	%xmm14, %xmm2
    00000d92: 	punpcklwd	%xmm9, %xmm2
    00000d97: 	punpcklwd	%xmm2, %xmm1
    00000d9b: 	punpckhwd	%xmm2, %xmm8
    00000da0: 	movdqa	%xmm1, %xmm2
    00000da4: 	punpcklwd	%xmm8, %xmm1
    00000da9: 	punpckhwd	%xmm8, %xmm2
    00000dae: 	movdqa	%xmm4, %xmm8
    00000db3: 	punpcklwd	%xmm2, %xmm1
    00000db7: 	movdqa	%xmm4, %xmm2
    00000dbb: 	punpckhwd	%xmm7, %xmm8
    00000dc0: 	punpcklwd	%xmm7, %xmm2
    00000dc4: 	punpcklwd	%xmm7, %xmm4
    00000dc8: 	movdqa	0x38(%rsp), %xmm7
    00000dce: 	movdqa	%xmm2, %xmm10
    00000dd3: 	punpcklwd	%xmm8, %xmm4
    00000dd8: 	punpcklwd	%xmm8, %xmm2
    00000ddd: 	punpckhwd	%xmm8, %xmm10
    00000de2: 	punpckhwd	%xmm10, %xmm4
    00000de7: 	punpcklwd	%xmm10, %xmm2
    00000dec: 	movdqa	%xmm3, %xmm10
    00000df1: 	paddw	%xmm4, %xmm2
    00000df5: 	movdqa	%xmm6, %xmm4
    00000df9: 	pmullw	%xmm2, %xmm1
    00000dfd: 	movdqa	-0x78(%rsp), %xmm2
    00000e03: 	paddw	%xmm1, %xmm4
    00000e07: 	movdqa	%xmm2, %xmm1
    00000e0b: 	punpcklwd	%xmm7, %xmm1
    00000e0f: 	movaps	%xmm4, 0x158(%rsp)
    00000e17: 	movdqa	%xmm2, %xmm4
    00000e1b: 	movdqa	0x18(%rsp), %xmm2
    00000e21: 	punpckhwd	%xmm7, %xmm4
    00000e25: 	movdqa	%xmm1, %xmm6
    00000e29: 	punpckhwd	%xmm4, %xmm6
    00000e2d: 	movaps	%xmm4, 0x168(%rsp)
    00000e35: 	punpcklwd	%xmm4, %xmm1
    00000e39: 	movdqa	-0x8(%rsp), %xmm4
    00000e3f: 	movdqa	%xmm2, %xmm7
    00000e43: 	movdqa	%xmm2, %xmm9
    00000e48: 	punpcklwd	%xmm6, %xmm1
    00000e4c: 	movaps	%xmm6, 0x178(%rsp)
    00000e54: 	punpcklwd	%xmm4, %xmm7
    00000e58: 	punpckhwd	%xmm4, %xmm9
    00000e5d: 	movdqa	%xmm1, %xmm6
    00000e61: 	movaps	%xmm9, 0x188(%rsp)
    00000e6a: 	movdqa	%xmm7, %xmm2
    00000e6e: 	punpckhwd	%xmm9, %xmm7
    00000e73: 	punpcklwd	%xmm9, %xmm2
    00000e78: 	movaps	%xmm7, 0x198(%rsp)
    00000e80: 	movdqa	0x18(%rsp), %xmm9
    00000e87: 	punpcklwd	-0x8(%rsp), %xmm9
    00000e8e: 	punpcklwd	0x188(%rsp), %xmm9
    00000e98: 	punpcklwd	%xmm7, %xmm2
    00000e9c: 	punpckhwd	0x198(%rsp), %xmm9
    00000ea6: 	punpckhwd	%xmm2, %xmm6
    00000eaa: 	punpcklwd	%xmm2, %xmm1
    00000eae: 	movdqa	%xmm6, %xmm4
    00000eb2: 	movdqa	%xmm1, %xmm6
    00000eb6: 	punpckhwd	%xmm4, %xmm6
    00000eba: 	punpcklwd	%xmm4, %xmm1
    00000ebe: 	punpcklwd	%xmm6, %xmm1
    00000ec2: 	movdqa	%xmm15, %xmm6
    00000ec7: 	punpckhwd	%xmm12, %xmm6
    00000ecc: 	movdqa	%xmm6, %xmm7
    00000ed0: 	movdqa	%xmm15, %xmm6
    00000ed5: 	movdqa	-0x38(%rsp), %xmm15
    00000edc: 	punpcklwd	%xmm12, %xmm6
    00000ee1: 	movdqa	%xmm5, %xmm12
    00000ee6: 	movdqa	%xmm6, %xmm4
    00000eea: 	movdqa	%xmm6, %xmm8
    00000eef: 	movdqa	%xmm6, %xmm2
    00000ef3: 	punpckhwd	%xmm7, %xmm8
    00000ef8: 	punpcklwd	%xmm7, %xmm4
    00000efc: 	punpcklwd	%xmm7, %xmm2
    00000f00: 	movdqa	%xmm5, %xmm6
    00000f04: 	punpckhwd	%xmm8, %xmm2
    00000f09: 	punpcklwd	%xmm8, %xmm4
    00000f0e: 	punpcklwd	%xmm15, %xmm6
    00000f13: 	punpckhwd	%xmm15, %xmm12
    00000f18: 	paddw	%xmm2, %xmm4
    00000f1c: 	movdqa	%xmm6, %xmm15
    00000f21: 	movdqa	%xmm6, %xmm2
    00000f25: 	movdqa	%xmm3, %xmm6
    00000f29: 	punpckhwd	%xmm12, %xmm15
    00000f2e: 	punpcklwd	%xmm12, %xmm2
    00000f33: 	movdqa	%xmm13, %xmm8
    00000f38: 	punpcklwd	%xmm15, %xmm2
    00000f3d: 	pmullw	%xmm4, %xmm1
    00000f41: 	punpckhwd	%xmm11, %xmm8
    00000f46: 	movaps	%xmm15, 0x1a8(%rsp)
    00000f4f: 	movdqa	-0x58(%rsp), %xmm15
    00000f56: 	punpcklwd	-0x38(%rsp), %xmm5
    00000f5c: 	punpcklwd	-0x58(%rsp), %xmm3
    00000f62: 	punpcklwd	%xmm15, %xmm6
    00000f67: 	punpckhwd	%xmm15, %xmm10
    00000f6c: 	punpcklwd	%xmm12, %xmm5
    00000f71: 	movdqa	0x108(%rsp), %xmm12
    00000f7b: 	movdqa	%xmm6, %xmm4
    00000f7f: 	movdqa	%xmm6, %xmm15
    00000f84: 	movdqa	%xmm2, %xmm6
    00000f88: 	punpckhwd	%xmm10, %xmm15
    00000f8d: 	punpcklwd	%xmm10, %xmm4
    00000f92: 	punpcklwd	%xmm10, %xmm3
    00000f97: 	punpcklwd	%xmm15, %xmm4
    00000f9c: 	punpckhwd	%xmm15, %xmm3
    00000fa1: 	punpckhwd	0x1a8(%rsp), %xmm5
    00000faa: 	punpckhwd	%xmm4, %xmm6
    00000fae: 	punpcklwd	%xmm4, %xmm2
    00000fb2: 	movdqa	%xmm6, %xmm7
    00000fb6: 	movdqa	%xmm2, %xmm6
    00000fba: 	movdqa	%xmm5, %xmm15
    00000fbf: 	punpckhwd	%xmm7, %xmm6
    00000fc3: 	punpcklwd	%xmm7, %xmm2
    00000fc7: 	punpckhwd	%xmm3, %xmm15
    00000fcc: 	punpcklwd	%xmm6, %xmm2
    00000fd0: 	movdqa	%xmm13, %xmm6
    00000fd5: 	punpcklwd	%xmm11, %xmm13
    00000fda: 	punpcklwd	%xmm11, %xmm6
    00000fdf: 	movdqa	%xmm13, %xmm4
    00000fe4: 	punpcklwd	%xmm3, %xmm5
    00000fe8: 	movdqa	0x98(%rsp), %xmm13
    00000ff2: 	movdqa	%xmm6, %xmm7
    00000ff6: 	punpcklwd	%xmm8, %xmm4
    00000ffb: 	punpckhwd	%xmm8, %xmm6
    00001000: 	punpcklwd	%xmm8, %xmm7
    00001005: 	punpckhwd	%xmm6, %xmm4
    00001009: 	punpcklwd	%xmm6, %xmm7
    0000100d: 	paddw	%xmm4, %xmm7
    00001011: 	pmullw	%xmm7, %xmm2
    00001015: 	paddw	%xmm2, %xmm1
    00001019: 	movdqa	-0x78(%rsp), %xmm2
    0000101f: 	punpcklwd	0x38(%rsp), %xmm2
    00001025: 	paddw	0x158(%rsp), %xmm1
    0000102e: 	movdqa	%xmm2, %xmm6
    00001032: 	punpcklwd	0x168(%rsp), %xmm6
    0000103b: 	punpckhwd	0x178(%rsp), %xmm6
    00001044: 	movdqa	%xmm6, %xmm4
    00001048: 	punpcklwd	%xmm9, %xmm6
    0000104d: 	punpckhwd	%xmm9, %xmm4
    00001052: 	movdqa	0xa8(%rsp), %xmm9
    0000105c: 	movdqa	%xmm4, %xmm2
    00001060: 	movdqa	%xmm6, %xmm4
    00001064: 	punpckhwd	%xmm2, %xmm4
    00001068: 	punpcklwd	%xmm2, %xmm6
    0000106c: 	punpcklwd	%xmm4, %xmm6
    00001070: 	movdqa	%xmm13, %xmm4
    00001075: 	punpckhwd	%xmm9, %xmm4
    0000107a: 	movdqa	%xmm4, %xmm2
    0000107e: 	movdqa	%xmm13, %xmm4
    00001083: 	punpcklwd	%xmm9, %xmm13
    00001088: 	punpcklwd	%xmm9, %xmm4
    0000108d: 	movdqa	%xmm13, %xmm8
    00001092: 	movdqa	0xb8(%rsp), %xmm13
    0000109c: 	movdqa	0xd8(%rsp), %xmm9
    000010a6: 	movdqa	%xmm4, %xmm7
    000010aa: 	punpcklwd	%xmm2, %xmm8
    000010af: 	punpcklwd	%xmm2, %xmm4
    000010b3: 	punpckhwd	%xmm2, %xmm7
    000010b7: 	movdqa	%xmm13, %xmm11
    000010bc: 	movdqa	%xmm15, %xmm2
    000010c1: 	punpcklwd	%xmm7, %xmm4
    000010c5: 	punpckhwd	%xmm7, %xmm8
    000010ca: 	punpckhwd	%xmm12, %xmm11
    000010cf: 	paddw	%xmm8, %xmm4
    000010d4: 	movdqa	%xmm5, %xmm15
    000010d9: 	punpcklwd	%xmm2, %xmm5
    000010dd: 	pmullw	%xmm6, %xmm4
    000010e1: 	movdqa	%xmm11, %xmm6
    000010e6: 	movdqa	%xmm13, %xmm11
    000010eb: 	punpckhwd	%xmm2, %xmm15
    000010f0: 	punpcklwd	%xmm12, %xmm11
    000010f5: 	punpcklwd	%xmm15, %xmm5
    000010fa: 	movdqa	%xmm11, %xmm3
    000010ff: 	movdqa	%xmm11, %xmm15
    00001104: 	movdqa	%xmm11, %xmm2
    00001109: 	punpckhwd	%xmm6, %xmm15
    0000110e: 	punpcklwd	%xmm6, %xmm3
    00001112: 	punpcklwd	%xmm6, %xmm2
    00001116: 	punpcklwd	%xmm15, %xmm3
    0000111b: 	movdqa	0xc8(%rsp), %xmm6
    00001124: 	punpckhwd	%xmm15, %xmm2
    00001129: 	movdqa	-0x28(%rsp), %xmm15
    00001130: 	paddw	%xmm2, %xmm3
    00001134: 	movdqa	0x8(%rsp), %xmm2
    0000113a: 	punpcklwd	-0x18(%rsp), %xmm2
    00001140: 	punpcklwd	0xf8(%rsp), %xmm2
    00001149: 	pmullw	%xmm3, %xmm5
    0000114d: 	punpckhwd	0x118(%rsp), %xmm2
    00001156: 	paddw	%xmm5, %xmm4
    0000115a: 	paddw	0x58(%rsp), %xmm4
    00001160: 	paddw	%xmm1, %xmm4
    00001164: 	movdqa	0x48(%rsp), %xmm1
    0000116a: 	punpcklwd	0x28(%rsp), %xmm1
    00001170: 	punpcklwd	0x88(%rsp), %xmm1
    00001179: 	punpckhwd	0xe8(%rsp), %xmm1
    00001182: 	punpcklwd	-0x48(%rsp), %xmm15
    00001189: 	punpcklwd	-0x68(%rsp), %xmm0
    0000118f: 	movdqa	%xmm1, %xmm3
    00001193: 	punpcklwd	%xmm2, %xmm1
    00001197: 	movdqa	0x78(%rsp), %xmm7
    0000119d: 	punpcklwd	0x128(%rsp), %xmm15
    000011a7: 	punpckhwd	%xmm2, %xmm3
    000011ab: 	movdqa	%xmm1, %xmm5
    000011af: 	movdqa	%xmm6, %xmm2
    000011b3: 	punpckhwd	%xmm3, %xmm5
    000011b7: 	punpcklwd	%xmm3, %xmm1
    000011bb: 	punpcklwd	%xmm9, %xmm2
    000011c0: 	movdqa	%xmm6, %xmm3
    000011c4: 	punpcklwd	%xmm5, %xmm1
    000011c8: 	punpcklwd	%xmm9, %xmm6
    000011cd: 	punpckhwd	%xmm9, %xmm3
    000011d2: 	movdqa	%xmm2, %xmm5
    000011d6: 	punpcklwd	%xmm14, %xmm0
    000011db: 	punpckhwd	%xmm3, %xmm5
    000011df: 	punpcklwd	%xmm3, %xmm2
    000011e3: 	punpcklwd	%xmm3, %xmm6
    000011e7: 	punpckhwd	0x138(%rsp), %xmm15
    000011f1: 	punpcklwd	%xmm5, %xmm2
    000011f5: 	punpckhwd	%xmm5, %xmm6
    000011f9: 	punpckhwd	0x148(%rsp), %xmm0
    00001202: 	paddw	%xmm6, %xmm2
    00001206: 	pmullw	%xmm1, %xmm2
    0000120a: 	movdqa	%xmm15, %xmm1
    0000120f: 	punpckhwd	%xmm0, %xmm1
    00001213: 	punpcklwd	%xmm0, %xmm15
    00001218: 	movdqa	0x68(%rsp), %xmm0
    0000121e: 	movdqa	%xmm15, %xmm3
    00001223: 	punpcklwd	%xmm1, %xmm15
    00001228: 	punpckhwd	%xmm1, %xmm3
    0000122c: 	movdqa	%xmm0, %xmm1
    00001230: 	punpcklwd	%xmm3, %xmm15
    00001235: 	punpcklwd	%xmm7, %xmm1
    00001239: 	movdqa	%xmm0, %xmm3
    0000123d: 	punpckhwd	%xmm7, %xmm3
    00001241: 	movdqa	%xmm1, %xmm5
    00001245: 	punpcklwd	%xmm7, %xmm0
    00001249: 	punpckhwd	%xmm3, %xmm5
    0000124d: 	punpcklwd	%xmm3, %xmm1
    00001251: 	punpcklwd	%xmm3, %xmm0
    00001255: 	punpcklwd	%xmm5, %xmm1
    00001259: 	punpckhwd	%xmm5, %xmm0
    0000125d: 	paddw	%xmm0, %xmm1
    00001261: 	pmullw	%xmm1, %xmm15
    00001266: 	paddw	%xmm15, %xmm2
    0000126b: 	paddw	%xmm2, %xmm4
    0000126f: 	movaps	%xmm4, 0x58(%rsp)
    00001274: 	cmpq	%rax, %r10
    00001277: 	jne	.Ltmp272 # Offset: 4727
    0000127d: 	movdqa	%xmm4, %xmm0
    00001281: 	leaq	(,%rdx,8), %r9
    00001289: 	shlq	$0x7, %rdx
    0000128d: 	psrldq	$0x8, %xmm0
    00001292: 	paddw	%xmm4, %xmm0
    00001296: 	movdqa	%xmm0, %xmm1
    0000129a: 	psrldq	$0x4, %xmm1
    0000129f: 	paddw	%xmm1, %xmm0
    000012a3: 	movdqa	%xmm0, %xmm1
    000012a7: 	psrldq	$0x2, %xmm1
    000012ac: 	paddw	%xmm1, %xmm0
    000012b0: 	pextrw	$0x0, %xmm0, %eax
.Ltmp279:
    000012b5: 	subq	%r9, %r11
    000012b8: 	movq	%r11, %rbp
    000012bb: 	cmpq	$0x3, %r11
    000012bf: 	jbe	.Ltmp273 # Offset: 4799
    000012c5: 	shlq	$0x5, %r9
    000012c9: 	andq	$-0x4, %rbp
    000012cd: 	leaq	(%rdi,%r9), %r10
    000012d1: 	addq	%rsi, %r9
    000012d4: 	shlq	$0x4, %rbp
    000012d8: 	movq	(%r10), %xmm8
    000012dd: 	movq	0x8(%r10), %xmm13
    000012e3: 	addq	%rbp, %rdx
    000012e6: 	movq	0x10(%r10), %xmm6
    000012ec: 	movq	0x18(%r10), %xmm15
    000012f2: 	movdqa	%xmm8, %xmm0
    000012f7: 	movq	0x28(%r10), %xmm14
    000012fd: 	movq	0x60(%r10), %r15
    00001301: 	punpcklwd	%xmm13, %xmm0
    00001306: 	movq	0x38(%r10), %xmm12
    0000130c: 	movq	0x70(%r10), %r14
    00001310: 	pshufd	$0xe, %xmm0, %xmm0
    00001315: 	movq	0x48(%r10), %xmm11
    0000131b: 	movq	0x58(%r10), %xmm10
    00001321: 	movq	%xmm0, %r11
    00001326: 	movdqa	%xmm8, %xmm0
    0000132b: 	movq	0x68(%r10), %xmm9
    00001331: 	movq	0x78(%r10), %xmm7
    00001337: 	movq	%r11, %xmm1
    0000133c: 	punpcklwd	%xmm13, %xmm0
    00001341: 	movq	0x20(%r10), %xmm5
    00001347: 	movq	0x30(%r10), %xmm4
    0000134d: 	punpcklwd	%xmm1, %xmm0
    00001351: 	movq	0x40(%r10), %xmm3
    00001357: 	movq	0x50(%r10), %xmm2
    0000135d: 	punpcklwd	%xmm13, %xmm8
    00001362: 	movq	%xmm0, %r10
    00001367: 	movq	%r11, %xmm0
    0000136c: 	movdqa	%xmm6, %xmm13
    00001371: 	punpcklwd	%xmm0, %xmm8
    00001376: 	movdqa	%xmm6, %xmm0
    0000137a: 	punpcklwd	%xmm15, %xmm13
    0000137f: 	punpcklwd	%xmm15, %xmm0
    00001384: 	punpcklwd	%xmm15, %xmm6
    00001389: 	movdqa	%xmm5, %xmm15
    0000138e: 	pshufd	$0xe, %xmm0, %xmm0
    00001393: 	punpcklwd	%xmm14, %xmm15
    00001398: 	movq	%r15, %xmm1
    0000139d: 	punpcklwd	%xmm0, %xmm13
    000013a2: 	punpcklwd	%xmm0, %xmm6
    000013a6: 	movdqa	%xmm5, %xmm0
    000013aa: 	punpcklwd	%xmm14, %xmm0
    000013af: 	punpcklwd	%xmm14, %xmm5
    000013b4: 	movdqa	%xmm4, %xmm14
    000013b9: 	pshufd	$0xe, %xmm0, %xmm0
    000013be: 	punpcklwd	%xmm12, %xmm14
    000013c3: 	punpcklwd	%xmm9, %xmm1
    000013c8: 	punpcklwd	%xmm0, %xmm15
    000013cd: 	punpcklwd	%xmm0, %xmm5
    000013d1: 	movdqa	%xmm4, %xmm0
    000013d5: 	punpcklwd	%xmm12, %xmm0
    000013da: 	punpcklwd	%xmm12, %xmm4
    000013df: 	movdqa	%xmm3, %xmm12
    000013e4: 	pshufd	$0xe, %xmm0, %xmm0
    000013e9: 	punpcklwd	%xmm11, %xmm12
    000013ee: 	pshufd	$0xe, %xmm8, %xmm8
    000013f4: 	punpcklwd	%xmm0, %xmm14
    000013f9: 	punpcklwd	%xmm0, %xmm4
    000013fd: 	movdqa	%xmm3, %xmm0
    00001401: 	punpcklwd	%xmm11, %xmm0
    00001406: 	punpcklwd	%xmm11, %xmm3
    0000140b: 	movdqa	%xmm2, %xmm11
    00001410: 	pshufd	$0xe, %xmm0, %xmm0
    00001415: 	punpcklwd	%xmm10, %xmm11
    0000141a: 	pshufd	$0xe, %xmm6, %xmm6
    0000141f: 	punpcklwd	%xmm0, %xmm12
    00001424: 	punpcklwd	%xmm0, %xmm3
    00001428: 	movdqa	%xmm2, %xmm0
    0000142c: 	punpcklwd	%xmm10, %xmm0
    00001431: 	punpcklwd	%xmm10, %xmm2
    00001436: 	movq	%r15, %xmm10
    0000143b: 	pshufd	$0xe, %xmm0, %xmm0
    00001440: 	punpcklwd	%xmm9, %xmm10
    00001445: 	pshufd	$0xe, %xmm5, %xmm5
    0000144a: 	punpcklwd	%xmm0, %xmm11
    0000144f: 	punpcklwd	%xmm0, %xmm2
    00001453: 	movq	%r15, %xmm0
    00001458: 	punpcklwd	%xmm9, %xmm0
    0000145d: 	pshufd	$0xe, %xmm4, %xmm4
    00001462: 	pshufd	$0xe, %xmm3, %xmm3
    00001467: 	pshufd	$0xe, %xmm0, %xmm0
    0000146c: 	pshufd	$0xe, %xmm2, %xmm2
    00001471: 	punpcklwd	%xmm0, %xmm10
    00001476: 	punpcklwd	%xmm0, %xmm1
    0000147a: 	movq	%r14, %xmm0
    0000147f: 	punpcklwd	%xmm7, %xmm0
    00001483: 	pshufd	$0xe, %xmm1, %xmm1
    00001488: 	pshufd	$0xe, %xmm0, %xmm0
    0000148d: 	movq	%xmm0, %r11
    00001492: 	movq	%r14, %xmm0
    00001497: 	punpcklwd	%xmm7, %xmm0
    0000149b: 	movdqa	%xmm0, %xmm9
    000014a0: 	movq	%r11, %xmm0
    000014a5: 	punpcklwd	%xmm0, %xmm9
    000014aa: 	movq	%r14, %xmm0
    000014af: 	punpcklwd	%xmm7, %xmm0
    000014b3: 	movq	%r11, %xmm7
    000014b8: 	punpcklwd	%xmm7, %xmm0
    000014bc: 	movq	%r10, %xmm7
    000014c1: 	punpcklwd	%xmm13, %xmm7
    000014c6: 	pshufd	$0xe, %xmm0, %xmm0
    000014cb: 	pshufd	$0xe, %xmm7, %xmm7
    000014d0: 	movq	%xmm0, %r14
    000014d5: 	movq	%xmm7, %r11
    000014da: 	movq	%r10, %xmm7
    000014df: 	punpcklwd	%xmm13, %xmm7
    000014e4: 	movq	%xmm7, %r15
    000014e9: 	movq	%r11, %xmm7
    000014ee: 	movq	%r15, %xmm0
    000014f3: 	punpcklwd	%xmm7, %xmm0
    000014f7: 	movq	%r10, %xmm7
    000014fc: 	punpcklwd	%xmm13, %xmm7
    00001501: 	movq	%r11, %xmm13
    00001506: 	movq	%xmm0, %r15
    0000150b: 	movq	(%r9), %xmm0
    00001510: 	punpcklwd	%xmm13, %xmm7
    00001515: 	movdqa	%xmm15, %xmm13
    0000151a: 	punpcklwd	%xmm14, %xmm13
    0000151f: 	pshufd	$0xe, %xmm7, %xmm7
    00001524: 	pshufd	$0xe, %xmm13, %xmm13
    0000152a: 	movq	%xmm7, -0x78(%rsp)
    00001530: 	movq	%xmm13, %r10
    00001535: 	movdqa	%xmm15, %xmm13
    0000153a: 	punpcklwd	%xmm14, %xmm15
    0000153f: 	punpcklwd	%xmm14, %xmm13
    00001544: 	movq	%r10, %xmm14
    00001549: 	movq	%xmm13, %r12
    0000154e: 	movq	%r10, %xmm13
    00001553: 	movq	%r12, %xmm7
    00001558: 	punpcklwd	%xmm13, %xmm7
    0000155d: 	movdqa	%xmm15, %xmm13
    00001562: 	movdqa	%xmm12, %xmm15
    00001567: 	punpcklwd	%xmm14, %xmm13
    0000156c: 	movdqa	%xmm12, %xmm14
    00001571: 	punpcklwd	%xmm11, %xmm15
    00001576: 	punpcklwd	%xmm11, %xmm14
    0000157b: 	punpcklwd	%xmm11, %xmm12
    00001580: 	movdqa	%xmm10, %xmm11
    00001585: 	pshufd	$0xe, %xmm14, %xmm14
    0000158b: 	punpcklwd	%xmm9, %xmm11
    00001590: 	pshufd	$0xe, %xmm13, %xmm13
    00001596: 	punpcklwd	%xmm14, %xmm15
    0000159b: 	punpcklwd	%xmm14, %xmm12
    000015a0: 	movdqa	%xmm10, %xmm14
    000015a5: 	movq	%xmm13, -0x68(%rsp)
    000015ac: 	pshufd	$0xe, %xmm11, %xmm11
    000015b2: 	punpcklwd	%xmm9, %xmm14
    000015b7: 	punpcklwd	%xmm9, %xmm10
    000015bc: 	movq	%xmm15, -0x58(%rsp)
    000015c3: 	punpcklwd	%xmm11, %xmm14
    000015c8: 	movdqa	%xmm8, %xmm9
    000015cd: 	punpcklwd	%xmm11, %xmm10
    000015d2: 	punpcklwd	%xmm6, %xmm9
    000015d7: 	movdqa	%xmm8, %xmm11
    000015dc: 	movq	%xmm14, -0x38(%rsp)
    000015e3: 	movdqa	%xmm8, %xmm14
    000015e8: 	pshufd	$0xe, %xmm9, %xmm9
    000015ee: 	punpcklwd	%xmm6, %xmm14
    000015f3: 	punpcklwd	%xmm6, %xmm11
    000015f8: 	punpcklwd	%xmm9, %xmm14
    000015fd: 	punpcklwd	%xmm9, %xmm11
    00001602: 	movdqa	%xmm5, %xmm9
    00001607: 	punpcklwd	%xmm4, %xmm9
    0000160c: 	movq	%xmm14, -0x18(%rsp)
    00001613: 	movq	0x8(%r9), %xmm14
    00001619: 	pshufd	$0xe, %xmm12, %xmm12
    0000161f: 	pshufd	$0xe, %xmm9, %xmm9
    00001625: 	pshufd	$0xe, %xmm10, %xmm10
    0000162b: 	pshufd	$0xe, %xmm11, %xmm11
    00001631: 	movq	%xmm12, -0x48(%rsp)
    00001638: 	movdqa	%xmm9, %xmm6
    0000163d: 	movdqa	%xmm5, %xmm9
    00001642: 	punpcklwd	%xmm4, %xmm5
    00001646: 	movq	%xmm10, -0x28(%rsp)
    0000164d: 	punpcklwd	%xmm4, %xmm9
    00001652: 	punpcklwd	%xmm6, %xmm5
    00001656: 	movdqa	%xmm3, %xmm4
    0000165a: 	movq	%xmm11, -0x8(%rsp)
    00001661: 	pshufd	$0xe, %xmm5, %xmm5
    00001666: 	punpcklwd	%xmm2, %xmm4
    0000166a: 	punpcklwd	%xmm6, %xmm9
    0000166f: 	pshufd	$0xe, %xmm4, %xmm4
    00001674: 	movq	%xmm5, 0x8(%rsp)
    0000167a: 	movdqa	%xmm3, %xmm5
    0000167e: 	punpcklwd	%xmm2, %xmm3
    00001682: 	punpcklwd	%xmm4, %xmm3
    00001686: 	punpcklwd	%xmm2, %xmm5
    0000168a: 	movq	%xmm7, %r12
    0000168f: 	movq	%xmm9, 0x58(%rsp)
    00001696: 	pshufd	$0xe, %xmm3, %xmm3
    0000169b: 	punpcklwd	%xmm4, %xmm5
    0000169f: 	movdqa	%xmm1, %xmm4
    000016a3: 	movq	%xmm3, 0x28(%rsp)
    000016a9: 	movq	%r14, %xmm3
    000016ae: 	punpcklwd	%xmm3, %xmm4
    000016b2: 	movq	%xmm5, 0x18(%rsp)
    000016b8: 	pshufd	$0xe, %xmm4, %xmm4
    000016bd: 	movdqa	%xmm4, %xmm2
    000016c1: 	movdqa	%xmm1, %xmm4
    000016c5: 	punpcklwd	%xmm3, %xmm1
    000016c9: 	punpcklwd	%xmm3, %xmm4
    000016cd: 	punpcklwd	%xmm2, %xmm1
    000016d1: 	punpcklwd	%xmm2, %xmm4
    000016d5: 	movdqa	%xmm0, %xmm2
    000016d9: 	pshufd	$0xe, %xmm1, %xmm1
    000016de: 	punpcklwd	%xmm14, %xmm2
    000016e3: 	movq	%xmm4, 0x38(%rsp)
    000016e9: 	pshufd	$0xe, %xmm2, %xmm2
    000016ee: 	movq	%xmm1, 0x48(%rsp)
    000016f4: 	movq	0x10(%r9), %xmm15
    000016fa: 	movq	0x20(%r9), %r14
    000016fe: 	movq	0x28(%r9), %xmm10
    00001704: 	movq	0x58(%r9), %r11
    00001708: 	movq	0x68(%r9), %xmm4
    0000170e: 	movq	0x18(%r9), %r10
    00001712: 	movq	%r14, %xmm13
    00001717: 	movq	0x30(%r9), %xmm9
    0000171d: 	movq	0x38(%r9), %xmm3
    00001723: 	punpcklwd	%xmm10, %xmm13
    00001728: 	movq	0x40(%r9), %xmm1
    0000172e: 	movq	0x48(%r9), %xmm12
    00001734: 	movq	0x50(%r9), %xmm11
    0000173a: 	movq	0x60(%r9), %xmm8
    00001740: 	movq	0x70(%r9), %xmm6
    00001746: 	movq	0x78(%r9), %xmm5
    0000174c: 	movq	%xmm2, %r9
    00001751: 	movdqa	%xmm0, %xmm2
    00001755: 	punpcklwd	%xmm14, %xmm0
    0000175a: 	movq	%r9, %xmm7
    0000175f: 	punpcklwd	%xmm14, %xmm2
    00001764: 	movq	%xmm0, %r13
    00001769: 	punpcklwd	%xmm7, %xmm2
    0000176d: 	movq	%r9, %xmm0
    00001772: 	movq	%r13, %xmm7
    00001777: 	movdqa	%xmm15, %xmm14
    0000177c: 	punpcklwd	%xmm0, %xmm7
    00001780: 	movq	%r10, %xmm0
    00001785: 	pshufd	$0xe, %xmm7, %xmm7
    0000178a: 	punpcklwd	%xmm0, %xmm14
    0000178f: 	movq	%xmm7, %r13
    00001794: 	movdqa	%xmm15, %xmm7
    00001799: 	punpcklwd	%xmm0, %xmm7
    0000179d: 	pshufd	$0xe, %xmm7, %xmm7
    000017a2: 	movdqa	%xmm7, %xmm0
    000017a6: 	punpcklwd	%xmm0, %xmm14
    000017ab: 	movq	%r10, %xmm0
    000017b0: 	punpcklwd	%xmm0, %xmm15
    000017b5: 	movdqa	%xmm7, %xmm0
    000017b9: 	movq	%r14, %xmm7
    000017be: 	punpcklwd	%xmm10, %xmm7
    000017c3: 	punpcklwd	%xmm0, %xmm15
    000017c8: 	movdqa	%xmm13, %xmm0
    000017cd: 	pshufd	$0xe, %xmm7, %xmm7
    000017d2: 	pshufd	$0xe, %xmm15, %xmm15
    000017d8: 	movdqa	%xmm7, %xmm13
    000017dd: 	punpcklwd	%xmm13, %xmm0
    000017e2: 	movq	%r14, %xmm13
    000017e7: 	punpcklwd	%xmm10, %xmm13
    000017ec: 	movq	%xmm0, %r10
    000017f1: 	movdqa	%xmm9, %xmm10
    000017f6: 	movdqa	%xmm13, %xmm0
    000017fb: 	movdqa	%xmm7, %xmm13
    00001800: 	punpcklwd	%xmm3, %xmm10
    00001805: 	punpcklwd	%xmm13, %xmm0
    0000180a: 	pshufd	$0xe, %xmm10, %xmm10
    00001810: 	pshufd	$0xe, %xmm0, %xmm0
    00001815: 	movdqa	%xmm10, %xmm7
    0000181a: 	movq	%xmm0, %r9
    0000181f: 	movdqa	%xmm9, %xmm0
    00001824: 	punpcklwd	%xmm3, %xmm0
    00001828: 	movdqa	%xmm7, %xmm3
    0000182c: 	movq	%r9, %xmm13
    00001831: 	movdqa	%xmm0, %xmm9
    00001836: 	movdqa	%xmm0, %xmm10
    0000183b: 	movdqa	%xmm1, %xmm0
    0000183f: 	punpcklwd	%xmm3, %xmm9
    00001844: 	movdqa	%xmm1, %xmm3
    00001848: 	punpcklwd	%xmm7, %xmm10
    0000184d: 	punpcklwd	%xmm12, %xmm3
    00001852: 	punpcklwd	%xmm12, %xmm0
    00001857: 	pshufd	$0xe, %xmm9, %xmm9
    0000185d: 	pshufd	$0xe, %xmm3, %xmm3
    00001862: 	movdqa	%xmm0, %xmm1
    00001866: 	punpcklwd	%xmm9, %xmm13
    0000186b: 	movdqa	%xmm3, %xmm7
    0000186f: 	movdqa	%xmm0, %xmm3
    00001873: 	movq	%r11, %xmm0
    00001878: 	movdqa	%xmm7, %xmm12
    0000187d: 	punpcklwd	%xmm7, %xmm3
    00001881: 	punpcklwd	%xmm12, %xmm1
    00001886: 	movdqa	%xmm11, %xmm12
    0000188b: 	punpcklwd	%xmm0, %xmm12
    00001890: 	movdqa	%xmm11, %xmm0
    00001895: 	pshufd	$0xe, %xmm1, %xmm1
    0000189a: 	pshufd	$0xe, %xmm12, %xmm12
    000018a0: 	movdqa	%xmm12, %xmm7
    000018a5: 	movq	%r11, %xmm12
    000018aa: 	punpcklwd	%xmm12, %xmm0
    000018af: 	movdqa	%xmm0, %xmm12
    000018b4: 	movq	%r11, %xmm0
    000018b9: 	punpcklwd	%xmm0, %xmm11
    000018be: 	punpcklwd	%xmm7, %xmm12
    000018c3: 	movdqa	%xmm8, %xmm0
    000018c8: 	punpcklwd	%xmm7, %xmm11
    000018cd: 	movdqa	%xmm8, %xmm7
    000018d2: 	punpcklwd	%xmm4, %xmm0
    000018d6: 	punpcklwd	%xmm4, %xmm7
    000018da: 	punpcklwd	%xmm4, %xmm8
    000018df: 	pshufd	$0xe, %xmm11, %xmm11
    000018e5: 	pshufd	$0xe, %xmm7, %xmm7
    000018ea: 	movdqa	%xmm7, %xmm4
    000018ee: 	punpcklwd	%xmm7, %xmm0
    000018f2: 	punpcklwd	%xmm4, %xmm8
    000018f7: 	movdqa	%xmm6, %xmm4
    000018fb: 	movq	%xmm0, %r11
    00001900: 	punpcklwd	%xmm5, %xmm4
    00001904: 	movdqa	%xmm6, %xmm0
    00001908: 	pshufd	$0xe, %xmm8, %xmm8
    0000190e: 	pshufd	$0xe, %xmm4, %xmm4
    00001913: 	punpcklwd	%xmm5, %xmm0
    00001917: 	movdqa	%xmm4, %xmm7
    0000191b: 	movdqa	%xmm0, %xmm6
    0000191f: 	movdqa	%xmm0, %xmm4
    00001923: 	movdqa	%xmm7, %xmm5
    00001927: 	movdqa	%xmm2, %xmm0
    0000192b: 	punpcklwd	%xmm7, %xmm4
    0000192f: 	punpcklwd	%xmm5, %xmm6
    00001933: 	movdqa	%xmm2, %xmm5
    00001937: 	punpcklwd	%xmm14, %xmm0
    0000193c: 	punpcklwd	%xmm14, %xmm5
    00001941: 	movdqa	%xmm0, %xmm2
    00001945: 	pshufd	$0xe, %xmm6, %xmm6
    0000194a: 	pshufd	$0xe, %xmm5, %xmm5
    0000194f: 	movdqa	%xmm5, %xmm7
    00001953: 	movdqa	%xmm0, %xmm5
    00001957: 	movq	%r10, %xmm0
    0000195c: 	punpcklwd	%xmm7, %xmm5
    00001960: 	punpcklwd	%xmm7, %xmm2
    00001964: 	movq	%r10, %xmm7
    00001969: 	punpcklwd	%xmm10, %xmm0
    0000196e: 	punpcklwd	%xmm10, %xmm7
    00001973: 	pshufd	$0xe, %xmm2, %xmm2
    00001978: 	pshufd	$0xe, %xmm7, %xmm7
    0000197d: 	movdqa	%xmm0, %xmm14
    00001982: 	movq	%r10, %xmm0
    00001987: 	punpcklwd	%xmm10, %xmm0
    0000198c: 	movdqa	%xmm7, %xmm10
    00001991: 	punpcklwd	%xmm7, %xmm14
    00001996: 	punpcklwd	%xmm10, %xmm0
    0000199b: 	movdqa	%xmm3, %xmm10
    000019a0: 	pshufd	$0xe, %xmm0, %xmm0
    000019a5: 	punpcklwd	%xmm12, %xmm10
    000019aa: 	movq	%xmm0, %r10
    000019af: 	pshufd	$0xe, %xmm10, %xmm10
    000019b5: 	movdqa	%xmm3, %xmm0
    000019b9: 	movdqa	%xmm10, %xmm7
    000019be: 	punpcklwd	%xmm12, %xmm0
    000019c3: 	movdqa	%xmm0, %xmm3
    000019c7: 	movdqa	%xmm7, %xmm12
    000019cc: 	movdqa	%xmm0, %xmm10
    000019d1: 	punpcklwd	%xmm12, %xmm3
    000019d6: 	movq	%r11, %xmm12
    000019db: 	movq	%r11, %xmm0
    000019e0: 	punpcklwd	%xmm4, %xmm12
    000019e5: 	punpcklwd	%xmm4, %xmm0
    000019e9: 	punpcklwd	%xmm7, %xmm10
    000019ee: 	pshufd	$0xe, %xmm12, %xmm12
    000019f4: 	pshufd	$0xe, %xmm3, %xmm3
    000019f9: 	movdqa	%xmm12, %xmm7
    000019fe: 	movdqa	%xmm0, %xmm12
    00001a03: 	movq	%r11, %xmm0
    00001a08: 	punpcklwd	%xmm4, %xmm0
    00001a0c: 	movdqa	%xmm7, %xmm4
    00001a10: 	punpcklwd	%xmm7, %xmm12
    00001a15: 	punpcklwd	%xmm4, %xmm0
    00001a19: 	movq	%r13, %xmm4
    00001a1e: 	pshufd	$0xe, %xmm0, %xmm0
    00001a23: 	punpcklwd	%xmm15, %xmm4
    00001a28: 	movq	%xmm0, %r11
    00001a2d: 	movq	%r13, %xmm0
    00001a32: 	pshufd	$0xe, %xmm4, %xmm4
    00001a37: 	punpcklwd	%xmm15, %xmm0
    00001a3c: 	movdqa	%xmm4, %xmm7
    00001a40: 	movdqa	%xmm0, %xmm4
    00001a44: 	movq	%r13, %xmm0
    00001a49: 	punpcklwd	%xmm15, %xmm0
    00001a4e: 	movdqa	%xmm7, %xmm15
    00001a53: 	punpcklwd	%xmm7, %xmm4
    00001a57: 	punpcklwd	%xmm15, %xmm0
    00001a5c: 	movq	%r9, %xmm15
    00001a61: 	punpcklwd	%xmm9, %xmm15
    00001a66: 	pshufd	$0xe, %xmm0, %xmm0
    00001a6b: 	pshufd	$0xe, %xmm15, %xmm15
    00001a71: 	movdqa	%xmm15, %xmm7
    00001a76: 	movq	%r9, %xmm15
    00001a7b: 	punpcklwd	%xmm9, %xmm15
    00001a80: 	movdqa	%xmm7, %xmm9
    00001a85: 	punpcklwd	%xmm9, %xmm13
    00001a8a: 	movdqa	%xmm1, %xmm9
    00001a8f: 	punpcklwd	%xmm7, %xmm15
    00001a94: 	punpcklwd	%xmm11, %xmm9
    00001a99: 	pshufd	$0xe, %xmm13, %xmm13
    00001a9f: 	pshufd	$0xe, %xmm9, %xmm9
    00001aa5: 	movq	%xmm13, %r9
    00001aaa: 	movdqa	%xmm9, %xmm7
    00001aaf: 	movdqa	%xmm1, %xmm9
    00001ab4: 	punpcklwd	%xmm11, %xmm1
    00001ab9: 	punpcklwd	%xmm11, %xmm9
    00001abe: 	movdqa	%xmm7, %xmm11
    00001ac3: 	punpcklwd	%xmm11, %xmm1
    00001ac8: 	movdqa	%xmm8, %xmm11
    00001acd: 	punpcklwd	%xmm7, %xmm9
    00001ad2: 	punpcklwd	%xmm6, %xmm11
    00001ad7: 	movdqa	%xmm8, %xmm7
    00001adc: 	punpcklwd	%xmm6, %xmm8
    00001ae1: 	pshufd	$0xe, %xmm11, %xmm11
    00001ae7: 	punpcklwd	%xmm6, %xmm7
    00001aeb: 	movdqa	%xmm5, %xmm6
    00001aef: 	punpcklwd	%xmm11, %xmm7
    00001af4: 	punpcklwd	%xmm11, %xmm8
    00001af9: 	punpcklwd	%xmm14, %xmm6
    00001afe: 	movdqa	%xmm5, %xmm11
    00001b03: 	pshufd	$0xe, %xmm6, %xmm6
    00001b08: 	punpcklwd	%xmm14, %xmm5
    00001b0d: 	punpcklwd	%xmm14, %xmm11
    00001b12: 	punpcklwd	%xmm6, %xmm5
    00001b16: 	movdqa	%xmm10, %xmm14
    00001b1b: 	punpcklwd	%xmm6, %xmm11
    00001b20: 	movdqa	%xmm10, %xmm6
    00001b25: 	punpcklwd	%xmm12, %xmm14
    00001b2a: 	punpcklwd	%xmm12, %xmm6
    00001b2f: 	punpcklwd	%xmm12, %xmm10
    00001b34: 	movdqa	%xmm4, %xmm12
    00001b39: 	pshufd	$0xe, %xmm6, %xmm6
    00001b3e: 	punpcklwd	%xmm15, %xmm12
    00001b43: 	movdqa	%xmm9, %xmm13
    00001b48: 	punpcklwd	%xmm6, %xmm14
    00001b4d: 	punpcklwd	%xmm6, %xmm10
    00001b52: 	movdqa	%xmm4, %xmm6
    00001b56: 	punpcklwd	%xmm15, %xmm6
    00001b5b: 	punpcklwd	%xmm15, %xmm4
    00001b60: 	movdqa	%xmm7, %xmm15
    00001b65: 	pshufd	$0xe, %xmm6, %xmm6
    00001b6a: 	punpcklwd	%xmm15, %xmm13
    00001b6f: 	movq	%r10, %xmm7
    00001b74: 	punpcklwd	%xmm6, %xmm12
    00001b79: 	punpcklwd	%xmm6, %xmm4
    00001b7d: 	movdqa	%xmm9, %xmm6
    00001b82: 	punpcklwd	%xmm15, %xmm6
    00001b87: 	movdqa	%xmm13, %xmm9
    00001b8c: 	movdqa	%xmm13, %xmm15
    00001b91: 	pshufd	$0xe, %xmm6, %xmm6
    00001b96: 	movq	%r10, %xmm13
    00001b9b: 	pshufd	$0xe, %xmm1, %xmm1
    00001ba0: 	punpcklwd	%xmm6, %xmm15
    00001ba5: 	punpcklwd	%xmm6, %xmm9
    00001baa: 	movdqa	%xmm2, %xmm6
    00001bae: 	punpcklwd	%xmm7, %xmm6
    00001bb2: 	pshufd	$0xe, %xmm5, %xmm5
    00001bb7: 	pshufd	$0xe, %xmm4, %xmm4
    00001bbc: 	pshufd	$0xe, %xmm6, %xmm6
    00001bc1: 	pshufd	$0xe, %xmm8, %xmm8
    00001bc7: 	pshufd	$0xe, %xmm10, %xmm10
    00001bcd: 	movdqa	%xmm6, %xmm7
    00001bd1: 	movdqa	%xmm2, %xmm6
    00001bd5: 	punpcklwd	%xmm13, %xmm2
    00001bda: 	movq	%xmm2, %r14
    00001bdf: 	punpcklwd	%xmm13, %xmm6
    00001be4: 	movdqa	%xmm7, %xmm2
    00001be8: 	punpcklwd	%xmm7, %xmm6
    00001bec: 	movq	%r14, %xmm7
    00001bf1: 	movq	%r11, %xmm13
    00001bf6: 	punpcklwd	%xmm2, %xmm7
    00001bfa: 	movdqa	%xmm3, %xmm2
    00001bfe: 	pshufd	$0xe, %xmm9, %xmm9
    00001c04: 	pshufd	$0xe, %xmm7, %xmm7
    00001c09: 	movq	%xmm7, %r14
    00001c0e: 	movq	%r11, %xmm7
    00001c13: 	punpcklwd	%xmm7, %xmm2
    00001c17: 	movdqa	%xmm3, %xmm7
    00001c1b: 	pshufd	$0xe, %xmm2, %xmm2
    00001c20: 	punpcklwd	%xmm13, %xmm7
    00001c25: 	movq	-0x68(%rsp), %xmm13
    00001c2c: 	punpcklwd	%xmm2, %xmm7
    00001c30: 	movq	%xmm7, %r10
    00001c35: 	movq	%r11, %xmm7
    00001c3a: 	punpcklwd	%xmm7, %xmm3
    00001c3e: 	movq	%r9, %xmm7
    00001c43: 	punpcklwd	%xmm2, %xmm3
    00001c47: 	movdqa	%xmm0, %xmm2
    00001c4b: 	punpcklwd	%xmm7, %xmm2
    00001c4f: 	movdqa	%xmm0, %xmm7
    00001c53: 	pshufd	$0xe, %xmm3, %xmm3
    00001c58: 	pshufd	$0xe, %xmm2, %xmm2
    00001c5d: 	movq	%xmm2, %r11
    00001c62: 	movq	%r9, %xmm2
    00001c67: 	punpcklwd	%xmm2, %xmm7
    00001c6b: 	movq	%r11, %xmm2
    00001c70: 	punpcklwd	%xmm2, %xmm7
    00001c74: 	movq	%r9, %xmm2
    00001c79: 	punpcklwd	%xmm2, %xmm0
    00001c7d: 	movq	%r11, %xmm2
    00001c82: 	movq	%xmm7, %r13
    00001c87: 	punpcklwd	%xmm2, %xmm0
    00001c8b: 	movdqa	%xmm1, %xmm2
    00001c8f: 	punpcklwd	%xmm8, %xmm2
    00001c94: 	pshufd	$0xe, %xmm0, %xmm0
    00001c99: 	pshufd	$0xe, %xmm2, %xmm2
    00001c9e: 	movq	%xmm2, %r9
    00001ca3: 	movdqa	%xmm1, %xmm2
    00001ca7: 	punpcklwd	%xmm8, %xmm1
    00001cac: 	movq	%r9, %xmm7
    00001cb1: 	punpcklwd	%xmm8, %xmm2
    00001cb6: 	punpcklwd	%xmm7, %xmm2
    00001cba: 	movq	-0x78(%rsp), %xmm7
    00001cc0: 	movq	%xmm2, 0x68(%rsp)
    00001cc6: 	movq	%r9, %xmm2
    00001ccb: 	punpcklwd	%xmm2, %xmm1
    00001ccf: 	movdqa	%xmm7, %xmm2
    00001cd3: 	movdqa	%xmm7, %xmm8
    00001cd8: 	movq	-0x48(%rsp), %xmm7
    00001cde: 	punpcklwd	%xmm13, %xmm2
    00001ce3: 	punpcklwd	%xmm13, %xmm8
    00001ce8: 	pshufd	$0xe, %xmm1, %xmm1
    00001ced: 	movq	-0x28(%rsp), %xmm13
    00001cf4: 	pshufd	$0xe, %xmm2, %xmm2
    00001cf9: 	punpcklwd	%xmm2, %xmm8
    00001cfe: 	movq	%xmm2, 0x78(%rsp)
    00001d04: 	movdqa	%xmm7, %xmm2
    00001d08: 	punpcklwd	%xmm13, %xmm7
    00001d0d: 	punpcklwd	%xmm13, %xmm2
    00001d12: 	movdqa	%xmm7, %xmm13
    00001d17: 	movq	%r10, %xmm7
    00001d1c: 	pshufd	$0xe, %xmm2, %xmm2
    00001d21: 	punpcklwd	%xmm2, %xmm13
    00001d26: 	movq	%xmm2, %r11
    00001d2b: 	movq	%xmm13, %r9
    00001d30: 	movdqa	%xmm8, %xmm13
    00001d35: 	movq	%r9, %xmm2
    00001d3a: 	punpcklwd	%xmm2, %xmm13
    00001d3f: 	punpcklwd	%xmm2, %xmm8
    00001d44: 	movq	%r10, %xmm2
    00001d49: 	pshufd	$0xe, %xmm13, %xmm13
    00001d4f: 	punpcklwd	%xmm13, %xmm8
    00001d54: 	movdqa	%xmm6, %xmm13
    00001d59: 	punpcklwd	%xmm2, %xmm13
    00001d5e: 	movdqa	%xmm6, %xmm2
    00001d62: 	pshufd	$0xe, %xmm13, %xmm13
    00001d68: 	punpcklwd	%xmm7, %xmm2
    00001d6c: 	punpcklwd	%xmm13, %xmm2
    00001d71: 	movq	%xmm2, %r9
    00001d76: 	movq	%r10, %xmm2
    00001d7b: 	punpcklwd	%xmm2, %xmm6
    00001d7f: 	punpcklwd	%xmm13, %xmm6
    00001d84: 	movq	%r9, %xmm13
    00001d89: 	pshufd	$0xe, %xmm6, %xmm6
    00001d8e: 	paddw	%xmm13, %xmm6
    00001d93: 	movq	0x8(%rsp), %xmm13
    00001d9a: 	pmullw	%xmm6, %xmm8
    00001d9f: 	movq	-0x8(%rsp), %xmm6
    00001da5: 	movdqa	%xmm6, %xmm2
    00001da9: 	punpcklwd	%xmm13, %xmm6
    00001dae: 	punpcklwd	%xmm13, %xmm2
    00001db3: 	movq	0x68(%rsp), %xmm13
    00001dba: 	pshufd	$0xe, %xmm2, %xmm2
    00001dbf: 	movq	%xmm8, 0x88(%rsp)
    00001dc9: 	movdqa	%xmm2, %xmm7
    00001dcd: 	movq	%xmm2, %r10
    00001dd2: 	movq	0x28(%rsp), %xmm8
    00001dd9: 	punpcklwd	%xmm7, %xmm6
    00001ddd: 	movq	0x48(%rsp), %xmm7
    00001de3: 	movdqa	%xmm8, %xmm2
    00001de8: 	punpcklwd	%xmm7, %xmm2
    00001dec: 	punpcklwd	%xmm7, %xmm8
    00001df1: 	movq	%r13, %xmm7
    00001df6: 	pshufd	$0xe, %xmm2, %xmm2
    00001dfb: 	punpcklwd	%xmm2, %xmm8
    00001e00: 	movq	%xmm2, %r9
    00001e05: 	movdqa	%xmm6, %xmm2
    00001e09: 	punpcklwd	%xmm8, %xmm2
    00001e0e: 	punpcklwd	%xmm8, %xmm6
    00001e13: 	movq	%r13, %xmm8
    00001e18: 	pshufd	$0xe, %xmm2, %xmm2
    00001e1d: 	punpcklwd	%xmm2, %xmm6
    00001e21: 	movdqa	%xmm13, %xmm2
    00001e26: 	punpcklwd	%xmm2, %xmm7
    00001e2a: 	pshufd	$0xe, %xmm7, %xmm7
    00001e2f: 	movq	%xmm7, %r13
    00001e34: 	movdqa	%xmm8, %xmm7
    00001e39: 	punpcklwd	%xmm13, %xmm8
    00001e3e: 	punpcklwd	%xmm2, %xmm7
    00001e42: 	movq	%r13, %xmm2
    00001e47: 	punpcklwd	%xmm2, %xmm8
    00001e4c: 	punpcklwd	%xmm2, %xmm7
    00001e50: 	movq	%r12, %xmm2
    00001e55: 	pshufd	$0xe, %xmm8, %xmm8
    00001e5b: 	paddw	%xmm8, %xmm7
    00001e60: 	movq	0x88(%rsp), %xmm8
    00001e6a: 	pmullw	%xmm7, %xmm6
    00001e6e: 	movq	%r12, %xmm7
    00001e73: 	paddw	%xmm6, %xmm8
    00001e78: 	movq	%r15, %xmm6
    00001e7d: 	punpcklwd	%xmm2, %xmm6
    00001e81: 	pshufd	$0xe, %xmm6, %xmm6
    00001e86: 	movdqa	%xmm6, %xmm2
    00001e8a: 	movq	%r15, %xmm6
    00001e8f: 	movq	%xmm8, %r13
    00001e94: 	movq	-0x58(%rsp), %xmm8
    00001e9b: 	punpcklwd	%xmm7, %xmm6
    00001e9f: 	movq	%xmm2, 0x68(%rsp)
    00001ea5: 	punpcklwd	%xmm2, %xmm6
    00001ea9: 	movq	-0x38(%rsp), %xmm2
    00001eaf: 	movdqa	%xmm8, %xmm7
    00001eb4: 	movdqa	%xmm6, %xmm13
    00001eb9: 	punpcklwd	%xmm2, %xmm7
    00001ebd: 	punpcklwd	%xmm2, %xmm8
    00001ec2: 	pshufd	$0xe, %xmm7, %xmm7
    00001ec7: 	punpcklwd	%xmm7, %xmm8
    00001ecc: 	movdqa	%xmm7, %xmm2
    00001ed0: 	punpcklwd	%xmm8, %xmm13
    00001ed5: 	punpcklwd	%xmm8, %xmm6
    00001eda: 	movdqa	%xmm11, %xmm8
    00001edf: 	pshufd	$0xe, %xmm13, %xmm13
    00001ee5: 	punpcklwd	%xmm14, %xmm8
    00001eea: 	punpcklwd	%xmm13, %xmm6
    00001eef: 	movdqa	%xmm11, %xmm13
    00001ef4: 	punpcklwd	%xmm14, %xmm11
    00001ef9: 	punpcklwd	%xmm14, %xmm13
    00001efe: 	pshufd	$0xe, %xmm13, %xmm13
    00001f04: 	movdqa	%xmm13, %xmm14
    00001f09: 	punpcklwd	%xmm13, %xmm8
    00001f0e: 	movq	0x58(%rsp), %xmm13
    00001f15: 	punpcklwd	%xmm14, %xmm11
    00001f1a: 	movq	-0x18(%rsp), %xmm14
    00001f21: 	pshufd	$0xe, %xmm11, %xmm11
    00001f27: 	paddw	%xmm8, %xmm11
    00001f2c: 	pmullw	%xmm11, %xmm6
    00001f31: 	movdqa	%xmm13, %xmm11
    00001f36: 	movdqa	%xmm6, %xmm8
    00001f3b: 	movdqa	%xmm14, %xmm6
    00001f40: 	punpcklwd	%xmm11, %xmm6
    00001f45: 	movdqa	%xmm14, %xmm11
    00001f4a: 	pshufd	$0xe, %xmm6, %xmm6
    00001f4f: 	punpcklwd	%xmm13, %xmm11
    00001f54: 	movq	%xmm6, 0x58(%rsp)
    00001f5a: 	movq	0x18(%rsp), %xmm14
    00001f61: 	punpcklwd	%xmm6, %xmm11
    00001f66: 	movq	0x38(%rsp), %xmm6
    00001f6c: 	movdqa	%xmm14, %xmm7
    00001f71: 	punpcklwd	%xmm6, %xmm14
    00001f76: 	punpcklwd	%xmm6, %xmm7
    00001f7a: 	movdqa	%xmm11, %xmm6
    00001f7f: 	pshufd	$0xe, %xmm7, %xmm7
    00001f84: 	movq	%xmm7, 0x88(%rsp)
    00001f8d: 	punpcklwd	%xmm7, %xmm14
    00001f92: 	movq	%r15, %xmm7
    00001f97: 	punpcklwd	%xmm14, %xmm6
    00001f9c: 	punpcklwd	%xmm14, %xmm11
    00001fa1: 	movdqa	%xmm12, %xmm14
    00001fa6: 	punpcklwd	%xmm15, %xmm14
    00001fab: 	pshufd	$0xe, %xmm6, %xmm6
    00001fb0: 	pshufd	$0xe, %xmm14, %xmm14
    00001fb6: 	punpcklwd	%xmm6, %xmm11
    00001fbb: 	movdqa	%xmm14, %xmm6
    00001fc0: 	movdqa	%xmm12, %xmm14
    00001fc5: 	punpcklwd	%xmm15, %xmm12
    00001fca: 	punpcklwd	%xmm15, %xmm14
    00001fcf: 	punpcklwd	%xmm6, %xmm12
    00001fd4: 	movdqa	%xmm8, %xmm15
    00001fd9: 	movq	-0x58(%rsp), %xmm8
    00001fe0: 	punpcklwd	%xmm6, %xmm14
    00001fe5: 	pshufd	$0xe, %xmm12, %xmm12
    00001feb: 	paddw	%xmm12, %xmm14
    00001ff0: 	movq	%r13, %xmm12
    00001ff5: 	pmullw	%xmm14, %xmm11
    00001ffa: 	movq	%r12, %xmm14
    00001fff: 	punpcklwd	%xmm14, %xmm7
    00002004: 	movq	0x18(%rsp), %xmm14
    0000200b: 	paddw	%xmm11, %xmm15
    00002010: 	movdqa	%xmm15, %xmm6
    00002015: 	movdqa	%xmm2, %xmm15
    0000201a: 	movq	0x78(%rsp), %xmm2
    00002020: 	paddw	%xmm12, %xmm6
    00002025: 	movq	0x68(%rsp), %xmm12
    0000202c: 	punpcklwd	%xmm12, %xmm7
    00002031: 	movq	-0x38(%rsp), %xmm12
    00002038: 	pshufd	$0xe, %xmm7, %xmm7
    0000203d: 	punpcklwd	%xmm12, %xmm8
    00002042: 	movdqa	%xmm7, %xmm12
    00002047: 	punpcklwd	%xmm15, %xmm8
    0000204c: 	movq	0x58(%rsp), %xmm15
    00002053: 	pshufd	$0xe, %xmm8, %xmm8
    00002059: 	punpcklwd	%xmm8, %xmm12
    0000205e: 	punpcklwd	%xmm8, %xmm7
    00002063: 	pshufd	$0xe, %xmm12, %xmm12
    00002069: 	movdqa	%xmm12, %xmm11
    0000206e: 	movdqa	%xmm5, %xmm12
    00002073: 	punpcklwd	%xmm10, %xmm12
    00002078: 	punpcklwd	%xmm11, %xmm7
    0000207d: 	pshufd	$0xe, %xmm12, %xmm12
    00002083: 	movdqa	%xmm12, %xmm11
    00002088: 	movdqa	%xmm5, %xmm12
    0000208d: 	punpcklwd	%xmm10, %xmm12
    00002092: 	movdqa	%xmm12, %xmm5
    00002097: 	movdqa	%xmm12, %xmm8
    0000209c: 	punpcklwd	%xmm11, %xmm5
    000020a1: 	punpcklwd	%xmm11, %xmm8
    000020a6: 	movdqa	%xmm13, %xmm11
    000020ab: 	movq	-0x68(%rsp), %xmm13
    000020b2: 	pshufd	$0xe, %xmm5, %xmm5
    000020b7: 	paddw	%xmm5, %xmm8
    000020bc: 	movq	-0x18(%rsp), %xmm5
    000020c2: 	punpcklwd	%xmm11, %xmm5
    000020c7: 	movq	0x38(%rsp), %xmm11
    000020ce: 	pmullw	%xmm7, %xmm8
    000020d3: 	punpcklwd	%xmm15, %xmm5
    000020d8: 	movq	0x88(%rsp), %xmm15
    000020e2: 	punpcklwd	%xmm11, %xmm14
    000020e7: 	pshufd	$0xe, %xmm5, %xmm5
    000020ec: 	movdqa	%xmm14, %xmm7
    000020f1: 	movdqa	%xmm5, %xmm10
    000020f6: 	movdqa	%xmm4, %xmm14
    000020fb: 	punpcklwd	%xmm15, %xmm7
    00002100: 	punpcklwd	%xmm9, %xmm14
    00002105: 	pshufd	$0xe, %xmm7, %xmm7
    0000210a: 	punpcklwd	%xmm7, %xmm10
    0000210f: 	punpcklwd	%xmm7, %xmm5
    00002113: 	movdqa	%xmm14, %xmm7
    00002118: 	pshufd	$0xe, %xmm10, %xmm10
    0000211e: 	punpcklwd	%xmm10, %xmm5
    00002123: 	movdqa	%xmm4, %xmm10
    00002128: 	movdqa	%xmm14, %xmm4
    0000212d: 	punpcklwd	%xmm9, %xmm10
    00002132: 	pshufd	$0xe, %xmm10, %xmm10
    00002138: 	punpcklwd	%xmm10, %xmm4
    0000213d: 	punpcklwd	%xmm10, %xmm7
    00002142: 	pshufd	$0xe, %xmm4, %xmm4
    00002147: 	paddw	%xmm4, %xmm7
    0000214b: 	pmullw	%xmm7, %xmm5
    0000214f: 	movq	-0x48(%rsp), %xmm7
    00002155: 	paddw	%xmm5, %xmm8
    0000215a: 	movq	%r11, %xmm5
    0000215f: 	paddw	%xmm6, %xmm8
    00002164: 	movq	-0x78(%rsp), %xmm6
    0000216a: 	punpcklwd	%xmm13, %xmm6
    0000216f: 	movq	-0x28(%rsp), %xmm13
    00002176: 	punpcklwd	%xmm2, %xmm6
    0000217a: 	movq	%r14, %xmm2
    0000217f: 	punpcklwd	%xmm13, %xmm7
    00002184: 	pshufd	$0xe, %xmm6, %xmm6
    00002189: 	punpcklwd	%xmm3, %xmm2
    0000218d: 	movq	0x8(%rsp), %xmm13
    00002194: 	movdqa	%xmm7, %xmm4
    00002198: 	movq	0x48(%rsp), %xmm7
    0000219e: 	punpcklwd	%xmm5, %xmm4
    000021a2: 	movdqa	%xmm6, %xmm5
    000021a6: 	pshufd	$0xe, %xmm4, %xmm4
    000021ab: 	punpcklwd	%xmm4, %xmm5
    000021af: 	punpcklwd	%xmm4, %xmm6
    000021b3: 	movq	%r14, %xmm4
    000021b8: 	pshufd	$0xe, %xmm5, %xmm5
    000021bd: 	punpcklwd	%xmm3, %xmm4
    000021c1: 	punpcklwd	%xmm5, %xmm6
    000021c5: 	movq	%r14, %xmm5
    000021ca: 	punpcklwd	%xmm3, %xmm5
    000021ce: 	movq	0x28(%rsp), %xmm3
    000021d4: 	pshufd	$0xe, %xmm5, %xmm5
    000021d9: 	punpcklwd	%xmm5, %xmm2
    000021dd: 	punpcklwd	%xmm5, %xmm4
    000021e1: 	movq	%r10, %xmm5
    000021e6: 	pshufd	$0xe, %xmm2, %xmm2
    000021eb: 	punpcklwd	%xmm7, %xmm3
    000021ef: 	paddw	%xmm2, %xmm4
    000021f3: 	movq	-0x8(%rsp), %xmm2
    000021f9: 	punpcklwd	%xmm13, %xmm2
    000021fe: 	pmullw	%xmm4, %xmm6
    00002202: 	punpcklwd	%xmm5, %xmm2
    00002206: 	movq	%r9, %xmm5
    0000220b: 	pshufd	$0xe, %xmm2, %xmm2
    00002210: 	punpcklwd	%xmm5, %xmm3
    00002214: 	pshufd	$0xe, %xmm3, %xmm3
    00002219: 	movdqa	%xmm2, %xmm4
    0000221d: 	punpcklwd	%xmm3, %xmm4
    00002221: 	punpcklwd	%xmm3, %xmm2
    00002225: 	movdqa	%xmm0, %xmm3
    00002229: 	pshufd	$0xe, %xmm4, %xmm4
    0000222e: 	punpcklwd	%xmm1, %xmm3
    00002232: 	punpcklwd	%xmm4, %xmm2
    00002236: 	movdqa	%xmm0, %xmm4
    0000223a: 	punpcklwd	%xmm1, %xmm0
    0000223e: 	punpcklwd	%xmm1, %xmm4
    00002242: 	pshufd	$0xe, %xmm4, %xmm4
    00002247: 	punpcklwd	%xmm4, %xmm0
    0000224b: 	punpcklwd	%xmm4, %xmm3
    0000224f: 	pshufd	$0xe, %xmm0, %xmm0
    00002254: 	paddw	%xmm0, %xmm3
    00002258: 	pmullw	%xmm3, %xmm2
    0000225c: 	paddw	%xmm2, %xmm6
    00002260: 	paddw	%xmm6, %xmm8
    00002265: 	pextrw	$0x1, %xmm8, %r10d
    0000226b: 	pextrw	$0x0, %xmm8, %r9d
    00002271: 	addl	%r10d, %r9d
    00002274: 	pextrw	$0x2, %xmm8, %r10d
    0000227a: 	addl	%r10d, %r9d
    0000227d: 	pextrw	$0x3, %xmm8, %r10d
    00002283: 	addl	%r10d, %r9d
    00002286: 	addl	%r9d, %eax
.Ltmp273:
    00002289: 	leaq	(%rdx,%rdx), %r10
    0000228d: 	movl	%eax, %r9d
    00002290: 	leaq	(%rdi,%r10), %r11
    00002294: 	addq	%rsi, %r10
    00002297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp274:
    000022a0: 	movzwl	0x10(%r10), %eax
    000022a5: 	addw	(%r10), %ax
    000022a9: 	addq	$0x10, %rdx
    000022ad: 	addq	$0x20, %r11
    000022b1: 	movzwl	0x12(%r10), %ebp
    000022b6: 	imulw	-0x20(%r11), %ax
    000022bc: 	addq	$0x20, %r10
    000022c0: 	addw	-0x1e(%r10), %bp
    000022c5: 	imulw	-0x1e(%r11), %bp
    000022cb: 	addl	%ebp, %eax
    000022cd: 	addl	%r9d, %eax
    000022d0: 	movzwl	-0xc(%r10), %r9d
    000022d5: 	addw	-0x1c(%r10), %r9w
    000022da: 	imulw	-0x1c(%r11), %r9w
    000022e0: 	addl	%r9d, %eax
    000022e3: 	movzwl	-0xa(%r10), %r9d
    000022e8: 	addw	-0x1a(%r10), %r9w
    000022ed: 	imulw	-0x1a(%r11), %r9w
    000022f3: 	addl	%r9d, %eax
    000022f6: 	movzwl	-0x8(%r10), %r9d
    000022fb: 	addw	-0x18(%r10), %r9w
    00002300: 	imulw	-0x18(%r11), %r9w
    00002306: 	addl	%r9d, %eax
    00002309: 	movzwl	-0x6(%r10), %r9d
    0000230e: 	addw	-0x16(%r10), %r9w
    00002313: 	imulw	-0x16(%r11), %r9w
    00002319: 	addl	%r9d, %eax
    0000231c: 	movzwl	-0x4(%r10), %r9d
    00002321: 	addw	-0x14(%r10), %r9w
    00002326: 	imulw	-0x14(%r11), %r9w
    0000232c: 	addl	%r9d, %eax
    0000232f: 	movzwl	-0x2(%r10), %r9d
    00002334: 	addw	-0x12(%r10), %r9w
    00002339: 	imulw	-0x12(%r11), %r9w
    0000233f: 	addl	%eax, %r9d
    00002342: 	cmpq	%rdx, %rcx
    00002345: 	ja	.Ltmp274 # Offset: 9029
    0000234b: 	andq	$-0x10, %rbx
    0000234f: 	movl	%r9d, %eax
    00002352: 	leaq	0x10(%rbx), %rcx
    00002356: 	cmpq	%rcx, %r8
    00002359: 	jbe	.Ltmp275 # Offset: 9049
    0000235f: 	addq	$0x11, %rbx
    00002363: 	movq	%r8, %rdx
    00002366: 	movl	$0x1, %r9d
    0000236c: 	subq	%rcx, %rdx
    0000236f: 	cmpq	%rbx, %r8
    00002372: 	cmovaeq	%rdx, %r9
    00002376: 	subq	$0x1, %rdx
    0000237a: 	cmpq	$0x6, %rdx
    0000237e: 	jbe	.Ltmp276 # Offset: 9086
    00002384: 	cmpq	%rbx, %r8
    00002387: 	jb	.Ltmp276 # Offset: 9095
    0000238d: 	leaq	(%rcx,%rcx), %r10
    00002391: 	movq	%r9, %rdx
    00002394: 	leaq	(%rdi,%r10), %r11
    00002398: 	addq	%rsi, %r10
    0000239b: 	shrq	$0x3, %rdx
    0000239f: 	movdqu	(%r11), %xmm0
    000023a4: 	movdqu	(%r10), %xmm3
    000023a9: 	pmullw	%xmm3, %xmm0
    000023ad: 	cmpq	$0x1, %rdx
    000023b1: 	je	.Ltmp277 # Offset: 9137
    000023b3: 	movdqu	0x10(%r10), %xmm1
    000023b9: 	movdqu	0x10(%r11), %xmm2
    000023bf: 	pmullw	%xmm2, %xmm1
    000023c3: 	paddw	%xmm1, %xmm0
.Ltmp277:
    000023c7: 	movdqa	%xmm0, %xmm1
    000023cb: 	shlq	$0x3, %rdx
    000023cf: 	psrldq	$0x8, %xmm1
    000023d4: 	paddw	%xmm1, %xmm0
    000023d8: 	movdqa	%xmm0, %xmm1
    000023dc: 	psrldq	$0x4, %xmm1
    000023e1: 	paddw	%xmm1, %xmm0
    000023e5: 	movdqa	%xmm0, %xmm1
    000023e9: 	psrldq	$0x2, %xmm1
    000023ee: 	paddw	%xmm1, %xmm0
    000023f2: 	pextrw	$0x0, %xmm0, %r10d
    000023f8: 	addl	%r10d, %eax
    000023fb: 	leaq	(%rdx,%rcx), %r10
    000023ff: 	cmpq	%r9, %rdx
    00002402: 	je	.Ltmp275 # Offset: 9218
.Ltmp280:
    00002408: 	subq	%rdx, %r9
    0000240b: 	leaq	-0x1(%r9), %r11
    0000240f: 	cmpq	$0x2, %r11
    00002413: 	jbe	.Ltmp278 # Offset: 9235
    00002415: 	addq	%rcx, %rdx
    00002418: 	movq	(%rsi,%rdx,2), %xmm0
    0000241d: 	movq	(%rdi,%rdx,2), %xmm1
    00002422: 	pmullw	%xmm1, %xmm0
    00002426: 	pextrw	$0x0, %xmm0, %ecx
    0000242b: 	pextrw	$0x1, %xmm0, %edx
    00002430: 	addl	%ecx, %edx
    00002432: 	pextrw	$0x2, %xmm0, %ecx
    00002437: 	addl	%ecx, %edx
    00002439: 	pextrw	$0x3, %xmm0, %ecx
    0000243e: 	addl	%ecx, %edx
    00002440: 	addl	%edx, %eax
    00002442: 	movq	%r9, %rdx
    00002445: 	andq	$-0x4, %rdx
    00002449: 	addq	%rdx, %r10
    0000244c: 	cmpq	%r9, %rdx
    0000244f: 	je	.Ltmp275 # Offset: 9295
.Ltmp278:
    00002451: 	movzwl	(%rsi,%r10,2), %ecx
    00002456: 	imulw	(%rdi,%r10,2), %cx
    0000245c: 	leaq	(%r10,%r10), %rdx
    00002460: 	addl	%ecx, %eax
    00002462: 	leaq	0x1(%r10), %rcx
    00002466: 	cmpq	%r8, %rcx
    00002469: 	jae	.Ltmp275 # Offset: 9321
    0000246b: 	movzwl	0x2(%rdi,%rdx), %ecx
    00002470: 	imulw	0x2(%rsi,%rdx), %cx
    00002476: 	addq	$0x2, %r10
    0000247a: 	addl	%ecx, %eax
    0000247c: 	cmpq	%r8, %r10
    0000247f: 	jae	.Ltmp275 # Offset: 9343
    00002481: 	movzwl	0x4(%rsi,%rdx), %ecx
    00002486: 	imulw	0x4(%rdi,%rdx), %cx
    0000248c: 	movl	%ecx, %edx
    0000248e: 	addl	%edx, %eax
.Ltmp275:
    00002490: 	addq	$0x1c0, %rsp
    00002497: 	popq	%rbx
    00002498: 	popq	%rbp
    00002499: 	popq	%r12
    0000249b: 	popq	%r13
    0000249d: 	popq	%r14
    0000249f: 	popq	%r15
    000024a1: 	retq # Offset: 9377
    000024a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp270:
    000024a8: 	movdqu	(%rdi), %xmm0
    000024ac: 	movdqu	(%rsi), %xmm3
    000024b0: 	movl	$0xf, %r9d
    000024b6: 	xorl	%eax, %eax
    000024b8: 	movl	$0x1, %edx
    000024bd: 	pmullw	%xmm3, %xmm0
    000024c1: 	jmp	.Ltmp277 # Offset: 9409
.Ltmp271:
    000024c6: 	xorl	%r9d, %r9d
    000024c9: 	xorl	%eax, %eax
    000024cb: 	xorl	%edx, %edx
    000024cd: 	jmp	.Ltmp279 # Offset: 9421
.Ltmp276:
    000024d2: 	movq	%rcx, %r10
    000024d5: 	xorl	%edx, %edx
    000024d7: 	jmp	.Ltmp280 # Offset: 9431
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKssET0_T_S3_m"

Binary Function "_Z14inner_product7IPKssET0_T_S3_m" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x105b0
  Size        : 0x312
  MaxSize     : 0x320
  Offset      : 0x105b0
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r8
    00000009: 	movq	%rdx, %r9
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	cmpq	$0x1, %rdx
    00000012: 	je	.Ltmp281 # Offset: 18
    00000018: 	leaq	-0x2(%rdx), %r10
    0000001c: 	movq	%r10, %r12
    0000001f: 	shrq	%r12
    00000022: 	leaq	0x1(%r12), %rbx
    00000027: 	cmpq	$0x5, %r10
    0000002b: 	jbe	.Ltmp282 # Offset: 43
    00000031: 	movq	%rbx, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp283:
    00000048: 	movdqu	(%rdi,%rax), %xmm1
    0000004d: 	movdqu	(%r8,%rax), %xmm2
    00000053: 	addq	$0x10, %rax
    00000057: 	pmullw	%xmm2, %xmm1
    0000005b: 	paddw	%xmm1, %xmm0
    0000005f: 	cmpq	%rdx, %rax
    00000062: 	jne	.Ltmp283 # Offset: 98
    00000064: 	pextrw	$0x2, %xmm0, %eax
    00000069: 	pextrw	$0x0, %xmm0, %esi
    0000006e: 	pextrw	$0x1, %xmm0, %r11d
    00000074: 	movq	%rbx, %rbp
    00000077: 	addl	%eax, %esi
    00000079: 	pextrw	$0x4, %xmm0, %eax
    0000007e: 	pextrw	$0x2, %xmm0, %edx
    00000083: 	andq	$-0x4, %rbp
    00000087: 	addl	%eax, %esi
    00000089: 	pextrw	$0x6, %xmm0, %eax
    0000008e: 	pextrw	$0x3, %xmm0, %ecx
    00000093: 	addl	%eax, %esi
    00000095: 	pextrw	$0x3, %xmm0, %eax
    0000009a: 	addl	%eax, %r11d
    0000009d: 	pextrw	$0x5, %xmm0, %eax
    000000a2: 	addl	%eax, %r11d
    000000a5: 	pextrw	$0x7, %xmm0, %eax
    000000aa: 	addl	%eax, %r11d
    000000ad: 	pextrw	$0x0, %xmm0, %eax
    000000b2: 	addl	%edx, %eax
    000000b4: 	pextrw	$0x4, %xmm0, %edx
    000000b9: 	addl	%edx, %eax
    000000bb: 	pextrw	$0x6, %xmm0, %edx
    000000c0: 	addl	%edx, %eax
    000000c2: 	pextrw	$0x1, %xmm0, %edx
    000000c7: 	addl	%ecx, %edx
    000000c9: 	pextrw	$0x5, %xmm0, %ecx
    000000ce: 	addl	%ecx, %edx
    000000d0: 	pextrw	$0x7, %xmm0, %ecx
    000000d5: 	addl	%edx, %ecx
    000000d7: 	leaq	(%rbp,%rbp), %rdx
    000000dc: 	cmpq	%rbp, %rbx
    000000df: 	je	.Ltmp284 # Offset: 223
.Ltmp290:
    000000e5: 	subq	%rbp, %rbx
    000000e8: 	cmpq	%rbp, %r12
    000000eb: 	je	.Ltmp285 # Offset: 235
    000000ed: 	movq	(%rdi,%rbp,4), %xmm0
    000000f2: 	movq	(%r8,%rbp,4), %xmm1
    000000f8: 	movzwl	%r11w, %r11d
    000000fc: 	movzwl	%si, %esi
    000000ff: 	shlq	$0x10, %r11
    00000103: 	pmullw	%xmm1, %xmm0
    00000107: 	orq	%rsi, %r11
    0000010a: 	movq	%r11, %xmm4
    0000010f: 	paddw	%xmm4, %xmm0
    00000113: 	pextrw	$0x2, %xmm0, %eax
    00000118: 	pextrw	$0x0, %xmm0, %esi
    0000011d: 	pextrw	$0x1, %xmm0, %r11d
    00000123: 	addl	%eax, %esi
    00000125: 	pextrw	$0x3, %xmm0, %eax
    0000012a: 	pextrw	$0x2, %xmm0, %ecx
    0000012f: 	addl	%eax, %r11d
    00000132: 	pextrw	$0x0, %xmm0, %eax
    00000137: 	pextrw	$0x3, %xmm0, %ebp
    0000013c: 	addl	%ecx, %eax
    0000013e: 	pextrw	$0x1, %xmm0, %ecx
    00000143: 	addl	%ebp, %ecx
    00000145: 	movq	%rbx, %rbp
    00000148: 	andq	$-0x2, %rbp
    0000014c: 	leaq	(%rdx,%rbp,2), %rdx
    00000150: 	cmpq	%rbp, %rbx
    00000153: 	je	.Ltmp284 # Offset: 339
.Ltmp285:
    00000155: 	movzwl	(%rdi,%rdx,2), %eax
    00000159: 	movzwl	0x2(%rdi,%rdx,2), %ecx
    0000015e: 	imulw	(%r8,%rdx,2), %ax
    00000164: 	imulw	0x2(%r8,%rdx,2), %cx
    0000016b: 	addl	%esi, %eax
    0000016d: 	movl	%ecx, %edx
    0000016f: 	movl	%eax, %esi
    00000171: 	leal	(%rdx,%r11), %ecx
.Ltmp284:
    00000175: 	andq	$-0x2, %r10
    00000179: 	leaq	0x2(%r10), %rbx
    0000017d: 	cmpq	%rbx, %r9
    00000180: 	jbe	.Ltmp286 # Offset: 384
    00000186: 	addq	$0x3, %r10
    0000018a: 	movq	%r9, %rax
    0000018d: 	movl	$0x1, %edx
    00000192: 	subq	%rbx, %rax
    00000195: 	cmpq	%r10, %r9
    00000198: 	cmovaeq	%rax, %rdx
    0000019c: 	subq	$0x1, %rax
    000001a0: 	cmpq	$0x6, %rax
    000001a4: 	jbe	.Ltmp287 # Offset: 420
    000001aa: 	cmpq	%r10, %r9
    000001ad: 	jb	.Ltmp287 # Offset: 429
    000001b3: 	movq	%rdx, %r11
    000001b6: 	leaq	(%rbx,%rbx), %r10
    000001ba: 	pxor	%xmm0, %xmm0
    000001be: 	xorl	%eax, %eax
    000001c0: 	shrq	$0x3, %r11
    000001c4: 	leaq	(%rdi,%r10), %rbp
    000001c8: 	addq	%r8, %r10
    000001cb: 	shlq	$0x4, %r11
    000001cf: 	nop # Size: 1
.Ltmp288:
    000001d0: 	movdqu	(%r10,%rax), %xmm1
    000001d6: 	movdqu	(%rbp,%rax), %xmm3
    000001dc: 	addq	$0x10, %rax
    000001e0: 	pmullw	%xmm3, %xmm1
    000001e4: 	paddw	%xmm1, %xmm0
    000001e8: 	cmpq	%r11, %rax
    000001eb: 	jne	.Ltmp288 # Offset: 491
    000001ed: 	movdqa	%xmm0, %xmm1
    000001f1: 	movq	%rdx, %r11
    000001f4: 	movl	%esi, %r10d
    000001f7: 	psrldq	$0x8, %xmm1
    000001fc: 	andq	$-0x8, %r11
    00000200: 	paddw	%xmm1, %xmm0
    00000204: 	movdqa	%xmm0, %xmm1
    00000208: 	psrldq	$0x4, %xmm1
    0000020d: 	paddw	%xmm1, %xmm0
    00000211: 	movdqa	%xmm0, %xmm1
    00000215: 	psrldq	$0x2, %xmm1
    0000021a: 	paddw	%xmm1, %xmm0
    0000021e: 	pextrw	$0x0, %xmm0, %eax
    00000223: 	addl	%eax, %esi
    00000225: 	addl	%r10d, %eax
    00000228: 	leaq	(%r11,%rbx), %r10
    0000022c: 	cmpq	%rdx, %r11
    0000022f: 	je	.Ltmp286 # Offset: 559
.Ltmp291:
    00000235: 	subq	%r11, %rdx
    00000238: 	leaq	-0x1(%rdx), %rax
    0000023c: 	cmpq	$0x2, %rax
    00000240: 	jbe	.Ltmp289 # Offset: 576
    00000242: 	addq	%rbx, %r11
    00000245: 	movq	(%rdi,%r11,2), %xmm0
    0000024b: 	movq	(%r8,%r11,2), %xmm1
    00000251: 	movl	%esi, %r11d
    00000254: 	pmullw	%xmm1, %xmm0
    00000258: 	pextrw	$0x1, %xmm0, %ebx
    0000025d: 	pextrw	$0x0, %xmm0, %eax
    00000262: 	addl	%ebx, %eax
    00000264: 	pextrw	$0x2, %xmm0, %ebx
    00000269: 	addl	%ebx, %eax
    0000026b: 	pextrw	$0x3, %xmm0, %ebx
    00000270: 	addl	%ebx, %eax
    00000272: 	pextrw	$0x1, %xmm0, %ebx
    00000277: 	addl	%eax, %esi
    00000279: 	pextrw	$0x0, %xmm0, %eax
    0000027e: 	addl	%ebx, %eax
    00000280: 	addl	%r11d, %eax
    00000283: 	pextrw	$0x2, %xmm0, %r11d
    00000289: 	addl	%r11d, %eax
    0000028c: 	pextrw	$0x3, %xmm0, %r11d
    00000292: 	addl	%r11d, %eax
    00000295: 	movq	%rdx, %r11
    00000298: 	andq	$-0x4, %r11
    0000029c: 	addq	%r11, %r10
    0000029f: 	cmpq	%r11, %rdx
    000002a2: 	je	.Ltmp286 # Offset: 674
.Ltmp289:
    000002a4: 	movzwl	(%rdi,%r10,2), %eax
    000002a9: 	imulw	(%r8,%r10,2), %ax
    000002af: 	leaq	(%r10,%r10), %rdx
    000002b3: 	addl	%esi, %eax
    000002b5: 	leaq	0x1(%r10), %rsi
    000002b9: 	cmpq	%r9, %rsi
    000002bc: 	jae	.Ltmp286 # Offset: 700
    000002be: 	movzwl	0x2(%rdi,%rdx), %esi
    000002c3: 	imulw	0x2(%r8,%rdx), %si
    000002ca: 	addq	$0x2, %r10
    000002ce: 	addl	%esi, %eax
    000002d0: 	cmpq	%r10, %r9
    000002d3: 	jbe	.Ltmp286 # Offset: 723
    000002d5: 	movzwl	0x4(%r8,%rdx), %esi
    000002db: 	imulw	0x4(%rdi,%rdx), %si
    000002e1: 	movl	%esi, %edx
    000002e3: 	addl	%edx, %eax
.Ltmp286:
    000002e5: 	popq	%rbx
    000002e6: 	addl	%ecx, %eax
    000002e8: 	popq	%rbp
    000002e9: 	popq	%r12
    000002eb: 	retq # Offset: 747
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp281:
    000002f0: 	xorl	%ecx, %ecx
    000002f2: 	xorl	%esi, %esi
    000002f4: 	xorl	%r10d, %r10d
    000002f7: 	jmp	.Ltmp289 # Offset: 759
.Ltmp282:
    000002f9: 	xorl	%ebp, %ebp
    000002fb: 	xorl	%r11d, %r11d
    000002fe: 	xorl	%esi, %esi
    00000300: 	xorl	%edx, %edx
    00000302: 	jmp	.Ltmp290 # Offset: 770
.Ltmp287:
    00000307: 	movq	%rbx, %r10
    0000030a: 	xorl	%r11d, %r11d
    0000030d: 	jmp	.Ltmp291 # Offset: 781
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKssET0_T_S3_m"

Binary Function "_Z14inner_product8IPKssET0_T_S3_m" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x108d0
  Size        : 0x2d3
  MaxSize     : 0x2e0
  Offset      : 0x108d0
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdx, %r8
    00000009: 	pushq	%r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	pushq	%rbx
    0000000f: 	cmpq	$0x3, %rdx
    00000013: 	je	.Ltmp292 # Offset: 19
    00000019: 	leaq	-0x4(%rdx), %r9
    0000001d: 	movq	%r9, %r11
    00000020: 	shrq	$0x2, %r11
    00000024: 	addq	$0x1, %r11
    00000028: 	cmpq	$0x3, %r9
    0000002c: 	jbe	.Ltmp293 # Offset: 44
    00000032: 	movq	%r11, %rdx
    00000035: 	xorl	%eax, %eax
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	shrq	%rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp294:
    00000048: 	movdqu	(%rdi,%rax), %xmm1
    0000004d: 	movdqu	(%rsi,%rax), %xmm2
    00000052: 	addq	$0x10, %rax
    00000056: 	pmullw	%xmm2, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	cmpq	%rdx, %rax
    00000061: 	jne	.Ltmp294 # Offset: 97
    00000063: 	pextrw	$0x4, %xmm0, %eax
    00000068: 	pextrw	$0x0, %xmm0, %ecx
    0000006d: 	pextrw	$0x1, %xmm0, %ebx
    00000072: 	addl	%eax, %ecx
    00000074: 	pextrw	$0x5, %xmm0, %eax
    00000079: 	pextrw	$0x2, %xmm0, %ebp
    0000007e: 	addl	%eax, %ebx
    00000080: 	pextrw	$0x6, %xmm0, %eax
    00000085: 	pextrw	$0x7, %xmm0, %edx
    0000008a: 	addl	%eax, %ebp
    0000008c: 	pextrw	$0x3, %xmm0, %eax
    00000091: 	pextrw	$0x4, %xmm0, %r10d
    00000097: 	addl	%edx, %eax
    00000099: 	pextrw	$0x0, %xmm0, %edx
    0000009e: 	pextrw	$0x5, %xmm0, %r12d
    000000a4: 	addl	%r10d, %edx
    000000a7: 	pextrw	$0x1, %xmm0, %r10d
    000000ad: 	pextrw	$0x6, %xmm0, %r13d
    000000b3: 	addl	%r12d, %r10d
    000000b6: 	pextrw	$0x2, %xmm0, %r12d
    000000bc: 	pextrw	$0x7, %xmm0, %r14d
    000000c2: 	addl	%r13d, %r12d
    000000c5: 	pextrw	$0x3, %xmm0, %r13d
    000000cb: 	addl	%r14d, %r13d
    000000ce: 	movq	%r11, %r14
    000000d1: 	andq	$-0x2, %r14
    000000d5: 	cmpq	%r14, %r11
    000000d8: 	je	.Ltmp295 # Offset: 216
.Ltmp300:
    000000da: 	movzwl	%ax, %eax
    000000dd: 	movq	(%rdi,%r14,8), %xmm0
    000000e3: 	movzwl	%bp, %ebp
    000000e6: 	movzwl	%bx, %ebx
    000000e9: 	movq	(%rsi,%r14,8), %xmm1
    000000ef: 	shlq	$0x10, %rax
    000000f3: 	movzwl	%cx, %ecx
    000000f6: 	orq	%rbp, %rax
    000000f9: 	pmullw	%xmm1, %xmm0
    000000fd: 	shlq	$0x10, %rax
    00000101: 	orq	%rbx, %rax
    00000104: 	shlq	$0x10, %rax
    00000108: 	orq	%rcx, %rax
    0000010b: 	movq	%rax, %xmm4
    00000110: 	paddw	%xmm4, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %ecx
    00000119: 	pextrw	$0x1, %xmm0, %r10d
    0000011f: 	pextrw	$0x2, %xmm0, %r12d
    00000125: 	movl	%ecx, %edx
    00000127: 	pextrw	$0x3, %xmm0, %r13d
.Ltmp295:
    0000012d: 	andq	$-0x4, %r9
    00000131: 	leal	(%r10,%r12), %eax
    00000135: 	leaq	0x4(%r9), %r11
    00000139: 	addl	%r13d, %eax
    0000013c: 	cmpq	%r8, %r11
    0000013f: 	jae	.Ltmp296 # Offset: 319
    00000145: 	leaq	0x5(%r9), %rdx
    00000149: 	movq	%r8, %r10
    0000014c: 	movl	$0x1, %r9d
    00000152: 	subq	%r11, %r10
    00000155: 	cmpq	%rdx, %r8
    00000158: 	cmovaeq	%r10, %r9
    0000015c: 	subq	$0x1, %r10
    00000160: 	cmpq	$0x6, %r10
    00000164: 	jbe	.Ltmp297 # Offset: 356
    0000016a: 	cmpq	%rdx, %r8
    0000016d: 	jb	.Ltmp297 # Offset: 365
    00000173: 	movq	%r9, %rbx
    00000176: 	leaq	(%r11,%r11), %r10
    0000017a: 	pxor	%xmm0, %xmm0
    0000017e: 	xorl	%edx, %edx
    00000180: 	shrq	$0x3, %rbx
    00000184: 	leaq	(%rdi,%r10), %rbp
    00000188: 	addq	%rsi, %r10
    0000018b: 	shlq	$0x4, %rbx
    0000018f: 	nop # Size: 1
.Ltmp298:
    00000190: 	movdqu	(%r10,%rdx), %xmm1
    00000196: 	movdqu	(%rbp,%rdx), %xmm3
    0000019c: 	addq	$0x10, %rdx
    000001a0: 	pmullw	%xmm3, %xmm1
    000001a4: 	paddw	%xmm1, %xmm0
    000001a8: 	cmpq	%rbx, %rdx
    000001ab: 	jne	.Ltmp298 # Offset: 427
    000001ad: 	movdqa	%xmm0, %xmm1
    000001b1: 	movq	%r9, %rbx
    000001b4: 	movl	%ecx, %r10d
    000001b7: 	psrldq	$0x8, %xmm1
    000001bc: 	andq	$-0x8, %rbx
    000001c0: 	paddw	%xmm1, %xmm0
    000001c4: 	movdqa	%xmm0, %xmm1
    000001c8: 	psrldq	$0x4, %xmm1
    000001cd: 	paddw	%xmm1, %xmm0
    000001d1: 	movdqa	%xmm0, %xmm1
    000001d5: 	psrldq	$0x2, %xmm1
    000001da: 	paddw	%xmm1, %xmm0
    000001de: 	pextrw	$0x0, %xmm0, %edx
    000001e3: 	addl	%edx, %ecx
    000001e5: 	addl	%r10d, %edx
    000001e8: 	leaq	(%r11,%rbx), %r10
    000001ec: 	cmpq	%rbx, %r9
    000001ef: 	je	.Ltmp296 # Offset: 495
.Ltmp301:
    000001f5: 	subq	%rbx, %r9
    000001f8: 	leaq	-0x1(%r9), %rdx
    000001fc: 	cmpq	$0x2, %rdx
    00000200: 	jbe	.Ltmp299 # Offset: 512
    00000202: 	addq	%rbx, %r11
    00000205: 	movq	(%rsi,%r11,2), %xmm0
    0000020b: 	movq	(%rdi,%r11,2), %xmm1
    00000211: 	movl	%ecx, %r11d
    00000214: 	pmullw	%xmm1, %xmm0
    00000218: 	pextrw	$0x0, %xmm0, %ebx
    0000021d: 	pextrw	$0x1, %xmm0, %edx
    00000222: 	addl	%ebx, %edx
    00000224: 	pextrw	$0x2, %xmm0, %ebx
    00000229: 	addl	%ebx, %edx
    0000022b: 	pextrw	$0x3, %xmm0, %ebx
    00000230: 	addl	%ebx, %edx
    00000232: 	pextrw	$0x0, %xmm0, %ebx
    00000237: 	addl	%edx, %ecx
    00000239: 	pextrw	$0x1, %xmm0, %edx
    0000023e: 	addl	%ebx, %edx
    00000240: 	addl	%r11d, %edx
    00000243: 	pextrw	$0x2, %xmm0, %r11d
    00000249: 	addl	%r11d, %edx
    0000024c: 	pextrw	$0x3, %xmm0, %r11d
    00000252: 	addl	%r11d, %edx
    00000255: 	movq	%r9, %r11
    00000258: 	andq	$-0x4, %r11
    0000025c: 	addq	%r11, %r10
    0000025f: 	cmpq	%r9, %r11
    00000262: 	je	.Ltmp296 # Offset: 610
.Ltmp299:
    00000264: 	movzwl	(%rdi,%r10,2), %edx
    00000269: 	imulw	(%rsi,%r10,2), %dx
    0000026f: 	leaq	(%r10,%r10), %r9
    00000273: 	addl	%ecx, %edx
    00000275: 	leaq	0x1(%r10), %rcx
    00000279: 	cmpq	%r8, %rcx
    0000027c: 	jae	.Ltmp296 # Offset: 636
    0000027e: 	movzwl	0x2(%rsi,%r9), %ecx
    00000284: 	imulw	0x2(%rdi,%r9), %cx
    0000028b: 	addq	$0x2, %r10
    0000028f: 	addl	%ecx, %edx
    00000291: 	cmpq	%r10, %r8
    00000294: 	jbe	.Ltmp296 # Offset: 660
    00000296: 	movzwl	0x4(%rsi,%r9), %ecx
    0000029c: 	imulw	0x4(%rdi,%r9), %cx
    000002a3: 	addl	%ecx, %edx
.Ltmp296:
    000002a5: 	popq	%rbx
    000002a6: 	addl	%edx, %eax
    000002a8: 	popq	%rbp
    000002a9: 	popq	%r12
    000002ab: 	popq	%r13
    000002ad: 	popq	%r14
    000002af: 	retq # Offset: 687
.Ltmp292:
    000002b0: 	xorl	%eax, %eax
    000002b2: 	xorl	%ecx, %ecx
    000002b4: 	xorl	%r10d, %r10d
    000002b7: 	jmp	.Ltmp299 # Offset: 695
.Ltmp293:
    000002b9: 	xorl	%r14d, %r14d
    000002bc: 	xorl	%eax, %eax
    000002be: 	xorl	%ebp, %ebp
    000002c0: 	xorl	%ebx, %ebx
    000002c2: 	xorl	%ecx, %ecx
    000002c4: 	jmp	.Ltmp300 # Offset: 708
.Ltmp297:
    000002c9: 	movq	%r11, %r10
    000002cc: 	xorl	%ebx, %ebx
    000002ce: 	jmp	.Ltmp301 # Offset: 718
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKssET0_T_S3_m"

Binary Function "_Z14inner_product9IPKssET0_T_S3_m" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x10bb0
  Size        : 0x1167
  MaxSize     : 0x1170
  Offset      : 0x10bb0
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rcx
    00000009: 	movq	%rdx, %r11
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x40, %rsp
    0000001b: 	subq	$0x7, %rbp
    0000001f: 	je	.Ltmp302 # Offset: 31
    00000025: 	leaq	-0x8(%rdx), %rax
    00000029: 	movq	%rax, %r14
    0000002c: 	movq	%rax, 0x30(%rsp)
    00000031: 	shrq	$0x3, %r14
    00000035: 	leaq	0x1(%r14), %r15
    00000039: 	cmpq	$0x37, %rax
    0000003d: 	jbe	.Ltmp303 # Offset: 61
    00000043: 	movq	%rdi, %rax
    00000046: 	movq	%r15, %rdi
    00000049: 	pxor	%xmm2, %xmm2
    0000004d: 	movq	%rsi, %rdx
    00000050: 	shrq	$0x3, %rdi
    00000054: 	movaps	%xmm2, -0x68(%rsp)
    00000059: 	shlq	$0x7, %rdi
    0000005d: 	movaps	%xmm2, -0x58(%rsp)
    00000062: 	addq	%rcx, %rdi
    00000065: 	movaps	%xmm2, -0x48(%rsp)
    0000006a: 	movaps	%xmm2, -0x38(%rsp)
    0000006f: 	nop # Size: 1
.Ltmp304:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	movdqu	0x10(%rax), %xmm8
    0000007a: 	subq	$-0x80, %rax
    0000007e: 	subq	$-0x80, %rdx
    00000082: 	movdqu	-0x60(%rax), %xmm7
    00000087: 	movdqu	-0x50(%rax), %xmm4
    0000008c: 	movdqa	%xmm0, %xmm1
    00000090: 	movdqa	%xmm0, %xmm3
    00000094: 	punpcklwd	%xmm8, %xmm0
    00000099: 	movdqu	-0x40(%rax), %xmm2
    0000009e: 	punpcklwd	%xmm8, %xmm1
    000000a3: 	punpckhwd	%xmm8, %xmm3
    000000a8: 	movdqa	%xmm7, %xmm8
    000000ad: 	movdqu	-0x30(%rax), %xmm5
    000000b2: 	movdqa	%xmm1, %xmm10
    000000b7: 	punpcklwd	%xmm4, %xmm8
    000000bc: 	punpcklwd	%xmm3, %xmm1
    000000c0: 	movdqu	-0x20(%rax), %xmm6
    000000c5: 	punpckhwd	%xmm3, %xmm10
    000000ca: 	punpcklwd	%xmm3, %xmm0
    000000ce: 	movdqa	%xmm7, %xmm3
    000000d2: 	movdqu	-0x10(%rax), %xmm9
    000000d8: 	punpckhwd	%xmm4, %xmm3
    000000dc: 	punpcklwd	%xmm10, %xmm1
    000000e1: 	punpckhwd	%xmm10, %xmm0
    000000e6: 	movdqu	-0x60(%rdx), %xmm13
    000000ec: 	movdqa	%xmm8, %xmm10
    000000f1: 	punpcklwd	%xmm4, %xmm7
    000000f5: 	punpcklwd	%xmm3, %xmm8
    000000fa: 	punpckhwd	%xmm3, %xmm10
    000000ff: 	punpcklwd	%xmm3, %xmm7
    00000103: 	movdqa	%xmm2, %xmm3
    00000107: 	punpcklwd	%xmm5, %xmm3
    0000010b: 	movdqa	%xmm2, %xmm4
    0000010f: 	punpcklwd	%xmm10, %xmm8
    00000114: 	punpckhwd	%xmm10, %xmm7
    00000119: 	punpckhwd	%xmm5, %xmm4
    0000011d: 	movdqa	%xmm3, %xmm10
    00000122: 	punpcklwd	%xmm5, %xmm2
    00000126: 	punpckhwd	%xmm4, %xmm10
    0000012b: 	punpcklwd	%xmm4, %xmm3
    0000012f: 	punpcklwd	%xmm4, %xmm2
    00000133: 	movdqa	%xmm6, %xmm4
    00000137: 	movdqa	%xmm6, %xmm5
    0000013b: 	punpcklwd	%xmm9, %xmm4
    00000140: 	punpckhwd	%xmm10, %xmm2
    00000145: 	punpckhwd	%xmm9, %xmm5
    0000014a: 	punpcklwd	%xmm10, %xmm3
    0000014f: 	punpcklwd	%xmm9, %xmm6
    00000154: 	movdqa	%xmm4, %xmm10
    00000159: 	punpckhwd	%xmm5, %xmm10
    0000015e: 	punpcklwd	%xmm5, %xmm4
    00000162: 	punpcklwd	%xmm5, %xmm6
    00000166: 	movdqa	%xmm1, %xmm5
    0000016a: 	punpcklwd	%xmm10, %xmm4
    0000016f: 	movdqa	%xmm1, %xmm9
    00000174: 	punpcklwd	%xmm8, %xmm5
    00000179: 	movdqa	%xmm3, %xmm14
    0000017e: 	punpckhwd	%xmm10, %xmm6
    00000183: 	punpckhwd	%xmm8, %xmm9
    00000188: 	punpcklwd	%xmm4, %xmm14
    0000018d: 	movdqa	%xmm5, %xmm10
    00000192: 	punpcklwd	%xmm8, %xmm1
    00000197: 	movdqa	%xmm3, %xmm8
    0000019c: 	punpckhwd	%xmm9, %xmm10
    000001a1: 	punpckhwd	%xmm4, %xmm8
    000001a6: 	punpcklwd	%xmm9, %xmm5
    000001ab: 	punpcklwd	%xmm9, %xmm1
    000001b0: 	punpcklwd	%xmm4, %xmm3
    000001b4: 	movdqa	%xmm14, %xmm9
    000001b9: 	movdqa	%xmm0, %xmm4
    000001bd: 	punpckhwd	%xmm8, %xmm9
    000001c2: 	punpcklwd	%xmm7, %xmm4
    000001c6: 	punpcklwd	%xmm8, %xmm14
    000001cb: 	punpcklwd	%xmm8, %xmm3
    000001d0: 	movdqa	%xmm0, %xmm8
    000001d5: 	punpcklwd	%xmm9, %xmm14
    000001da: 	punpckhwd	%xmm7, %xmm8
    000001df: 	punpckhwd	%xmm9, %xmm3
    000001e4: 	punpcklwd	%xmm7, %xmm0
    000001e8: 	movaps	%xmm14, -0x78(%rsp)
    000001ee: 	movdqa	%xmm4, %xmm9
    000001f3: 	punpcklwd	%xmm8, %xmm0
    000001f8: 	punpcklwd	%xmm8, %xmm4
    000001fd: 	movdqu	-0x20(%rdx), %xmm7
    00000202: 	punpckhwd	%xmm8, %xmm9
    00000207: 	movdqa	%xmm2, %xmm15
    0000020c: 	punpcklwd	%xmm10, %xmm5
    00000211: 	movaps	%xmm3, -0x28(%rsp)
    00000216: 	punpcklwd	%xmm9, %xmm4
    0000021b: 	punpckhwd	%xmm9, %xmm0
    00000220: 	movdqa	%xmm2, %xmm9
    00000225: 	movdqu	-0x10(%rdx), %xmm3
    0000022a: 	punpcklwd	%xmm6, %xmm9
    0000022f: 	movaps	%xmm0, -0x18(%rsp)
    00000234: 	movdqa	%xmm2, %xmm0
    00000238: 	punpcklwd	%xmm6, %xmm15
    0000023d: 	punpckhwd	%xmm6, %xmm0
    00000241: 	movdqa	%xmm9, %xmm8
    00000246: 	punpckhwd	%xmm10, %xmm1
    0000024b: 	movdqu	-0x40(%rdx), %xmm10
    00000251: 	punpckhwd	%xmm0, %xmm8
    00000256: 	punpcklwd	%xmm0, %xmm15
    0000025b: 	punpcklwd	%xmm0, %xmm9
    00000260: 	movdqu	-0x30(%rdx), %xmm2
    00000265: 	punpckhwd	%xmm8, %xmm15
    0000026a: 	punpcklwd	%xmm8, %xmm9
    0000026f: 	movdqu	-0x70(%rdx), %xmm8
    00000275: 	movaps	%xmm15, -0x8(%rsp)
    0000027b: 	movdqu	-0x80(%rdx), %xmm15
    00000281: 	movdqa	%xmm15, %xmm12
    00000286: 	movdqa	%xmm15, %xmm0
    0000028b: 	movdqa	%xmm15, %xmm6
    00000290: 	punpcklwd	%xmm8, %xmm12
    00000295: 	punpcklwd	%xmm8, %xmm0
    0000029a: 	punpckhwd	%xmm8, %xmm6
    0000029f: 	movdqa	%xmm12, %xmm11
    000002a4: 	movdqa	%xmm0, %xmm14
    000002a9: 	punpcklwd	%xmm6, %xmm12
    000002ae: 	movdqu	-0x50(%rdx), %xmm0
    000002b3: 	punpckhwd	%xmm6, %xmm11
    000002b8: 	punpcklwd	%xmm6, %xmm14
    000002bd: 	movdqa	%xmm13, %xmm6
    000002c2: 	punpcklwd	%xmm11, %xmm12
    000002c7: 	punpckhwd	%xmm11, %xmm14
    000002cc: 	movdqa	%xmm13, %xmm11
    000002d1: 	punpcklwd	%xmm0, %xmm11
    000002d6: 	punpckhwd	%xmm0, %xmm6
    000002da: 	punpcklwd	%xmm0, %xmm13
    000002df: 	movdqa	%xmm11, %xmm8
    000002e4: 	punpcklwd	%xmm6, %xmm13
    000002e9: 	punpcklwd	%xmm6, %xmm11
    000002ee: 	punpckhwd	%xmm6, %xmm8
    000002f3: 	movdqa	%xmm10, %xmm6
    000002f8: 	punpcklwd	%xmm8, %xmm11
    000002fd: 	punpckhwd	%xmm8, %xmm13
    00000302: 	movdqa	%xmm10, %xmm8
    00000307: 	punpcklwd	%xmm2, %xmm8
    0000030c: 	punpcklwd	%xmm2, %xmm10
    00000311: 	punpckhwd	%xmm2, %xmm6
    00000315: 	movaps	%xmm13, 0x8(%rsp)
    0000031b: 	movdqa	%xmm8, %xmm0
    00000320: 	movdqa	%xmm10, %xmm15
    00000325: 	punpcklwd	%xmm6, %xmm8
    0000032a: 	punpckhwd	%xmm6, %xmm0
    0000032e: 	punpcklwd	%xmm6, %xmm15
    00000333: 	movdqa	%xmm7, %xmm6
    00000337: 	punpckhwd	%xmm3, %xmm6
    0000033b: 	punpckhwd	%xmm0, %xmm15
    00000340: 	punpcklwd	%xmm0, %xmm8
    00000345: 	movdqa	%xmm6, %xmm13
    0000034a: 	movdqa	%xmm7, %xmm6
    0000034e: 	punpcklwd	%xmm3, %xmm7
    00000352: 	punpcklwd	%xmm3, %xmm6
    00000356: 	punpcklwd	%xmm13, %xmm7
    0000035b: 	movdqa	%xmm12, %xmm10
    00000360: 	movdqa	%xmm6, %xmm0
    00000364: 	punpcklwd	%xmm13, %xmm6
    00000369: 	punpcklwd	%xmm11, %xmm10
    0000036e: 	punpckhwd	%xmm13, %xmm0
    00000373: 	punpcklwd	%xmm0, %xmm6
    00000377: 	punpckhwd	%xmm0, %xmm7
    0000037b: 	movdqa	%xmm12, %xmm0
    00000380: 	punpckhwd	%xmm11, %xmm0
    00000385: 	movdqa	%xmm0, %xmm13
    0000038a: 	movdqa	%xmm10, %xmm0
    0000038f: 	punpckhwd	%xmm13, %xmm0
    00000394: 	punpcklwd	%xmm13, %xmm10
    00000399: 	punpcklwd	%xmm0, %xmm10
    0000039e: 	movdqa	%xmm0, %xmm2
    000003a2: 	movdqa	%xmm12, %xmm0
    000003a7: 	movdqa	0x8(%rsp), %xmm12
    000003ae: 	punpcklwd	%xmm11, %xmm0
    000003b3: 	movdqa	%xmm8, %xmm11
    000003b8: 	movdqa	%xmm0, %xmm3
    000003bc: 	movdqa	%xmm8, %xmm0
    000003c1: 	punpckhwd	%xmm6, %xmm11
    000003c6: 	punpcklwd	%xmm6, %xmm0
    000003ca: 	punpcklwd	%xmm13, %xmm3
    000003cf: 	punpcklwd	%xmm6, %xmm8
    000003d4: 	movdqa	%xmm14, %xmm13
    000003d9: 	punpckhwd	%xmm2, %xmm3
    000003dd: 	punpcklwd	%xmm11, %xmm8
    000003e2: 	punpcklwd	%xmm12, %xmm13
    000003e7: 	movdqa	%xmm0, %xmm2
    000003eb: 	movdqa	%xmm14, %xmm6
    000003f0: 	punpckhwd	%xmm12, %xmm6
    000003f5: 	punpckhwd	%xmm11, %xmm0
    000003fa: 	punpcklwd	%xmm11, %xmm2
    000003ff: 	punpcklwd	%xmm12, %xmm14
    00000404: 	movdqa	%xmm8, %xmm11
    00000409: 	movdqa	%xmm13, %xmm8
    0000040e: 	punpckhwd	%xmm6, %xmm8
    00000413: 	punpcklwd	%xmm6, %xmm13
    00000418: 	punpcklwd	%xmm6, %xmm14
    0000041d: 	punpcklwd	%xmm8, %xmm13
    00000422: 	punpckhwd	%xmm8, %xmm14
    00000427: 	movdqa	%xmm15, %xmm8
    0000042c: 	punpcklwd	%xmm7, %xmm8
    00000431: 	movdqa	%xmm15, %xmm6
    00000436: 	punpckhwd	%xmm0, %xmm11
    0000043b: 	punpckhwd	%xmm7, %xmm6
    0000043f: 	movdqa	%xmm8, %xmm12
    00000444: 	movaps	%xmm11, 0x18(%rsp)
    0000044a: 	punpcklwd	%xmm0, %xmm2
    0000044e: 	punpckhwd	%xmm6, %xmm12
    00000453: 	movdqa	%xmm6, %xmm11
    00000458: 	punpcklwd	%xmm6, %xmm8
    0000045d: 	movdqa	%xmm15, %xmm6
    00000462: 	movdqa	%xmm5, %xmm0
    00000466: 	punpcklwd	%xmm12, %xmm8
    0000046b: 	punpcklwd	%xmm7, %xmm6
    0000046f: 	movdqa	-0x78(%rsp), %xmm7
    00000475: 	punpcklwd	%xmm11, %xmm6
    0000047a: 	punpckhwd	%xmm7, %xmm0
    0000047e: 	punpckhwd	%xmm12, %xmm6
    00000483: 	movdqa	%xmm0, %xmm15
    00000488: 	movdqa	%xmm5, %xmm0
    0000048c: 	punpcklwd	-0x78(%rsp), %xmm5
    00000492: 	punpcklwd	%xmm7, %xmm0
    00000496: 	movdqa	%xmm0, %xmm11
    0000049b: 	movdqa	%xmm0, %xmm12
    000004a0: 	movdqa	%xmm10, %xmm0
    000004a5: 	punpckhwd	%xmm15, %xmm12
    000004aa: 	punpckhwd	%xmm2, %xmm0
    000004ae: 	punpcklwd	%xmm15, %xmm11
    000004b3: 	movaps	%xmm12, 0x8(%rsp)
    000004b9: 	punpcklwd	%xmm12, %xmm11
    000004be: 	movdqa	%xmm0, %xmm12
    000004c3: 	movdqa	%xmm10, %xmm0
    000004c8: 	punpcklwd	%xmm2, %xmm0
    000004cc: 	punpcklwd	%xmm2, %xmm10
    000004d1: 	punpcklwd	%xmm15, %xmm5
    000004d6: 	movdqa	%xmm0, %xmm7
    000004da: 	punpckhwd	0x8(%rsp), %xmm5
    000004e0: 	punpckhwd	%xmm12, %xmm0
    000004e5: 	punpcklwd	%xmm12, %xmm7
    000004ea: 	punpcklwd	%xmm12, %xmm10
    000004ef: 	punpckhwd	%xmm0, %xmm10
    000004f4: 	punpcklwd	%xmm0, %xmm7
    000004f8: 	pmullw	%xmm10, %xmm5
    000004fd: 	pmullw	%xmm11, %xmm7
    00000502: 	movdqa	%xmm13, %xmm10
    00000507: 	punpckhwd	%xmm8, %xmm10
    0000050c: 	paddw	%xmm5, %xmm7
    00000510: 	paddw	-0x38(%rsp), %xmm7
    00000516: 	movdqa	%xmm4, %xmm5
    0000051a: 	punpckhwd	%xmm9, %xmm5
    0000051f: 	movaps	%xmm7, -0x38(%rsp)
    00000524: 	movdqa	%xmm4, %xmm7
    00000528: 	movdqa	%xmm5, %xmm11
    0000052d: 	punpcklwd	%xmm9, %xmm4
    00000532: 	punpcklwd	%xmm9, %xmm7
    00000537: 	punpcklwd	%xmm11, %xmm4
    0000053c: 	movdqa	%xmm7, %xmm5
    00000540: 	punpcklwd	%xmm11, %xmm7
    00000545: 	punpckhwd	%xmm11, %xmm5
    0000054a: 	movdqa	%xmm5, %xmm2
    0000054e: 	punpcklwd	%xmm5, %xmm7
    00000552: 	movdqa	%xmm13, %xmm5
    00000557: 	punpcklwd	%xmm8, %xmm5
    0000055c: 	punpckhwd	%xmm2, %xmm4
    00000560: 	movdqa	-0x28(%rsp), %xmm2
    00000566: 	movdqa	%xmm5, %xmm12
    0000056b: 	punpcklwd	%xmm10, %xmm5
    00000570: 	punpckhwd	%xmm10, %xmm12
    00000575: 	punpcklwd	%xmm12, %xmm5
    0000057a: 	pmullw	%xmm7, %xmm5
    0000057e: 	movdqa	%xmm13, %xmm7
    00000583: 	punpcklwd	%xmm8, %xmm7
    00000588: 	movdqa	%xmm1, %xmm8
    0000058d: 	punpcklwd	%xmm10, %xmm7
    00000592: 	punpckhwd	%xmm2, %xmm8
    00000597: 	punpckhwd	%xmm12, %xmm7
    0000059c: 	pmullw	%xmm7, %xmm4
    000005a0: 	movdqa	%xmm3, %xmm7
    000005a4: 	paddw	%xmm4, %xmm5
    000005a8: 	paddw	-0x48(%rsp), %xmm5
    000005ae: 	movdqa	%xmm3, %xmm4
    000005b2: 	movaps	%xmm5, -0x48(%rsp)
    000005b7: 	movdqa	0x18(%rsp), %xmm11
    000005be: 	movdqa	%xmm1, %xmm5
    000005c2: 	punpcklwd	%xmm2, %xmm1
    000005c6: 	punpcklwd	%xmm2, %xmm5
    000005ca: 	punpcklwd	%xmm8, %xmm1
    000005cf: 	movdqa	-0x18(%rsp), %xmm0
    000005d5: 	movdqa	-0x8(%rsp), %xmm2
    000005db: 	punpcklwd	%xmm11, %xmm4
    000005e0: 	punpckhwd	%xmm11, %xmm7
    000005e5: 	movdqa	%xmm5, %xmm10
    000005ea: 	movdqa	%xmm4, %xmm9
    000005ef: 	punpcklwd	%xmm11, %xmm3
    000005f4: 	punpckhwd	%xmm8, %xmm10
    000005f9: 	punpckhwd	%xmm7, %xmm9
    000005fe: 	punpcklwd	%xmm8, %xmm5
    00000603: 	punpcklwd	%xmm7, %xmm4
    00000607: 	punpcklwd	%xmm7, %xmm3
    0000060b: 	punpcklwd	%xmm10, %xmm5
    00000610: 	punpcklwd	%xmm9, %xmm4
    00000615: 	punpckhwd	%xmm9, %xmm3
    0000061a: 	pmullw	%xmm5, %xmm4
    0000061e: 	punpckhwd	%xmm10, %xmm1
    00000623: 	pmullw	%xmm3, %xmm1
    00000627: 	movdqa	%xmm14, %xmm3
    0000062c: 	movdqa	%xmm0, %xmm5
    00000630: 	punpcklwd	%xmm6, %xmm3
    00000634: 	punpckhwd	%xmm2, %xmm5
    00000638: 	movdqa	%xmm3, %xmm7
    0000063c: 	paddw	%xmm1, %xmm4
    00000640: 	paddw	-0x58(%rsp), %xmm4
    00000646: 	movdqa	%xmm0, %xmm1
    0000064a: 	punpcklwd	%xmm2, %xmm1
    0000064e: 	punpcklwd	%xmm2, %xmm0
    00000652: 	movaps	%xmm4, -0x58(%rsp)
    00000657: 	movdqa	%xmm14, %xmm4
    0000065c: 	movdqa	%xmm1, %xmm8
    00000661: 	punpcklwd	%xmm5, %xmm1
    00000665: 	punpckhwd	%xmm6, %xmm4
    00000669: 	punpckhwd	%xmm5, %xmm8
    0000066e: 	punpcklwd	%xmm5, %xmm0
    00000672: 	punpckhwd	%xmm4, %xmm7
    00000676: 	punpcklwd	%xmm4, %xmm3
    0000067a: 	punpcklwd	%xmm8, %xmm1
    0000067f: 	punpcklwd	%xmm7, %xmm3
    00000683: 	punpckhwd	%xmm8, %xmm0
    00000688: 	pmullw	%xmm1, %xmm3
    0000068c: 	movdqa	%xmm14, %xmm1
    00000691: 	punpcklwd	%xmm6, %xmm1
    00000695: 	punpcklwd	%xmm4, %xmm1
    00000699: 	punpckhwd	%xmm7, %xmm1
    0000069d: 	pmullw	%xmm1, %xmm0
    000006a1: 	movdqa	%xmm3, %xmm1
    000006a5: 	paddw	%xmm0, %xmm1
    000006a9: 	paddw	-0x68(%rsp), %xmm1
    000006af: 	movaps	%xmm1, -0x68(%rsp)
    000006b4: 	cmpq	%rax, %rdi
    000006b7: 	jne	.Ltmp304 # Offset: 1719
    000006bd: 	movdqa	%xmm1, %xmm0
    000006c1: 	movdqa	-0x58(%rsp), %xmm2
    000006c7: 	psrldq	$0x8, %xmm0
    000006cc: 	paddw	%xmm1, %xmm0
    000006d0: 	movdqa	%xmm0, %xmm1
    000006d4: 	psrldq	$0x4, %xmm1
    000006d9: 	paddw	%xmm1, %xmm0
    000006dd: 	movdqa	%xmm0, %xmm1
    000006e1: 	psrldq	$0x2, %xmm1
    000006e6: 	paddw	%xmm1, %xmm0
    000006ea: 	pextrw	$0x0, %xmm0, %eax
    000006ef: 	movdqa	%xmm2, %xmm0
    000006f3: 	psrldq	$0x8, %xmm0
    000006f8: 	movl	%eax, -0x78(%rsp)
    000006fc: 	movl	%eax, %edi
    000006fe: 	movq	%r15, %rax
    00000701: 	paddw	%xmm2, %xmm0
    00000705: 	movdqa	-0x48(%rsp), %xmm2
    0000070b: 	andq	$-0x8, %rax
    0000070f: 	movdqa	%xmm0, %xmm1
    00000713: 	leaq	(,%rax,8), %rbx
    0000071b: 	psrldq	$0x4, %xmm1
    00000720: 	paddw	%xmm1, %xmm0
    00000724: 	movdqa	%xmm0, %xmm1
    00000728: 	psrldq	$0x2, %xmm1
    0000072d: 	paddw	%xmm1, %xmm0
    00000731: 	pextrw	$0x0, %xmm0, %r12d
    00000737: 	movdqa	%xmm2, %xmm0
    0000073b: 	psrldq	$0x8, %xmm0
    00000740: 	movl	%r12d, %r10d
    00000743: 	paddw	%xmm2, %xmm0
    00000747: 	movdqa	-0x38(%rsp), %xmm2
    0000074d: 	movdqa	%xmm0, %xmm1
    00000751: 	psrldq	$0x4, %xmm1
    00000756: 	paddw	%xmm1, %xmm0
    0000075a: 	movdqa	%xmm0, %xmm1
    0000075e: 	psrldq	$0x2, %xmm1
    00000763: 	paddw	%xmm1, %xmm0
    00000767: 	pextrw	$0x0, %xmm0, %r13d
    0000076d: 	movdqa	%xmm2, %xmm0
    00000771: 	psrldq	$0x8, %xmm0
    00000776: 	movl	%r13d, %r9d
    00000779: 	paddw	%xmm2, %xmm0
    0000077d: 	movdqa	%xmm0, %xmm1
    00000781: 	psrldq	$0x4, %xmm1
    00000786: 	paddw	%xmm1, %xmm0
    0000078a: 	movdqa	%xmm0, %xmm1
    0000078e: 	psrldq	$0x2, %xmm1
    00000793: 	paddw	%xmm1, %xmm0
    00000797: 	pextrw	$0x0, %xmm0, %r8d
    0000079d: 	movl	%r8d, %edx
    000007a0: 	cmpq	%r15, %rax
    000007a3: 	je	.Ltmp305 # Offset: 1955
.Ltmp312:
    000007a9: 	subq	%rax, %r14
    000007ac: 	leaq	0x1(%r14), %r15
    000007b0: 	cmpq	$0x2, %r14
    000007b4: 	jbe	.Ltmp306 # Offset: 1972
    000007ba: 	shlq	$0x4, %rax
    000007be: 	leaq	(%rcx,%rax), %rdx
    000007c2: 	addq	%rsi, %rax
    000007c5: 	movq	(%rdx), %xmm0
    000007c9: 	movq	0x8(%rdx), %xmm4
    000007ce: 	movq	0x10(%rdx), %xmm7
    000007d3: 	movq	0x18(%rdx), %xmm6
    000007d8: 	movdqa	%xmm0, %xmm8
    000007dd: 	movdqa	%xmm0, %xmm2
    000007e1: 	punpcklwd	%xmm4, %xmm0
    000007e5: 	movq	0x20(%rdx), %xmm11
    000007eb: 	punpcklwd	%xmm4, %xmm8
    000007f0: 	punpcklwd	%xmm4, %xmm2
    000007f4: 	movdqa	%xmm7, %xmm4
    000007f8: 	movq	0x28(%rdx), %xmm3
    000007fd: 	pshufd	$0xe, %xmm8, %xmm8
    00000803: 	punpcklwd	%xmm6, %xmm4
    00000807: 	movdqa	%xmm11, %xmm13
    0000080c: 	movq	0x30(%rdx), %xmm1
    00000811: 	punpcklwd	%xmm8, %xmm2
    00000816: 	punpcklwd	%xmm8, %xmm0
    0000081b: 	movdqa	%xmm7, %xmm8
    00000820: 	movq	0x38(%rdx), %xmm5
    00000825: 	punpcklwd	%xmm6, %xmm8
    0000082a: 	punpcklwd	%xmm6, %xmm7
    0000082e: 	movdqa	%xmm11, %xmm6
    00000833: 	movq	0x10(%rax), %xmm15
    00000839: 	punpcklwd	%xmm3, %xmm6
    0000083d: 	punpcklwd	%xmm3, %xmm13
    00000842: 	punpcklwd	%xmm3, %xmm11
    00000847: 	movq	0x18(%rax), %xmm12
    0000084d: 	pshufd	$0xe, %xmm6, %xmm6
    00000852: 	movdqa	%xmm1, %xmm3
    00000856: 	pshufd	$0xe, %xmm0, %xmm0
    0000085b: 	movq	0x20(%rax), %xmm10
    00000861: 	punpcklwd	%xmm6, %xmm13
    00000866: 	punpcklwd	%xmm6, %xmm11
    0000086b: 	movdqa	%xmm1, %xmm6
    0000086f: 	movq	0x28(%rax), %xmm14
    00000875: 	punpcklwd	%xmm5, %xmm6
    00000879: 	pshufd	$0xe, %xmm8, %xmm8
    0000087f: 	punpcklwd	%xmm5, %xmm3
    00000883: 	pshufd	$0xe, %xmm6, %xmm6
    00000888: 	punpcklwd	%xmm5, %xmm1
    0000088c: 	punpcklwd	%xmm8, %xmm4
    00000891: 	punpcklwd	%xmm6, %xmm3
    00000895: 	punpcklwd	%xmm6, %xmm1
    00000899: 	movdqa	%xmm2, %xmm5
    0000089d: 	movdqa	%xmm2, %xmm6
    000008a1: 	punpcklwd	%xmm4, %xmm5
    000008a5: 	punpcklwd	%xmm4, %xmm2
    000008a9: 	punpcklwd	%xmm4, %xmm6
    000008ad: 	movdqa	%xmm13, %xmm4
    000008b2: 	punpcklwd	%xmm8, %xmm7
    000008b7: 	punpcklwd	%xmm3, %xmm4
    000008bb: 	movdqa	%xmm13, %xmm8
    000008c0: 	pshufd	$0xe, %xmm7, %xmm7
    000008c5: 	pshufd	$0xe, %xmm4, %xmm4
    000008ca: 	punpcklwd	%xmm3, %xmm8
    000008cf: 	punpcklwd	%xmm3, %xmm13
    000008d4: 	movdqa	%xmm0, %xmm3
    000008d8: 	punpcklwd	%xmm4, %xmm8
    000008dd: 	pshufd	$0xe, %xmm5, %xmm5
    000008e2: 	punpcklwd	%xmm4, %xmm13
    000008e7: 	punpcklwd	%xmm7, %xmm3
    000008eb: 	movdqa	%xmm0, %xmm4
    000008ef: 	punpcklwd	%xmm7, %xmm0
    000008f3: 	punpcklwd	%xmm5, %xmm6
    000008f7: 	pshufd	$0xe, %xmm3, %xmm3
    000008fc: 	punpcklwd	%xmm5, %xmm2
    00000900: 	movdqa	%xmm0, %xmm5
    00000904: 	pshufd	$0xe, %xmm11, %xmm11
    0000090a: 	punpcklwd	%xmm3, %xmm5
    0000090e: 	punpcklwd	%xmm7, %xmm4
    00000912: 	pshufd	$0xe, %xmm1, %xmm1
    00000917: 	movq	0x8(%rax), %xmm7
    0000091c: 	pshufd	$0xe, %xmm5, %xmm5
    00000921: 	punpcklwd	%xmm3, %xmm4
    00000925: 	movdqa	%xmm11, %xmm3
    0000092a: 	movq	%xmm5, %r14
    0000092f: 	movdqa	%xmm11, %xmm5
    00000934: 	punpcklwd	%xmm1, %xmm3
    00000938: 	punpcklwd	%xmm1, %xmm5
    0000093c: 	punpcklwd	%xmm1, %xmm11
    00000941: 	movq	(%rax), %xmm1
    00000945: 	pshufd	$0xe, %xmm3, %xmm3
    0000094a: 	punpcklwd	%xmm3, %xmm5
    0000094e: 	punpcklwd	%xmm3, %xmm11
    00000953: 	pshufd	$0xe, %xmm2, %xmm2
    00000958: 	movdqa	%xmm1, %xmm9
    0000095d: 	movdqa	%xmm1, %xmm3
    00000961: 	punpcklwd	%xmm7, %xmm1
    00000965: 	punpcklwd	%xmm7, %xmm9
    0000096a: 	punpcklwd	%xmm7, %xmm3
    0000096e: 	movdqa	%xmm15, %xmm7
    00000973: 	pshufd	$0xe, %xmm9, %xmm9
    00000979: 	punpcklwd	%xmm12, %xmm7
    0000097e: 	movq	%xmm5, %rdx
    00000983: 	movq	0x30(%rax), %xmm5
    00000988: 	punpcklwd	%xmm9, %xmm3
    0000098d: 	punpcklwd	%xmm9, %xmm1
    00000992: 	movdqa	%xmm15, %xmm9
    00000997: 	movq	0x38(%rax), %rax
    0000099b: 	pshufd	$0xe, %xmm7, %xmm7
    000009a0: 	punpcklwd	%xmm12, %xmm9
    000009a5: 	punpcklwd	%xmm12, %xmm15
    000009aa: 	punpcklwd	%xmm7, %xmm9
    000009af: 	punpcklwd	%xmm7, %xmm15
    000009b4: 	movdqa	%xmm10, %xmm7
    000009b9: 	punpcklwd	%xmm14, %xmm7
    000009be: 	movdqa	%xmm10, %xmm12
    000009c3: 	punpcklwd	%xmm14, %xmm10
    000009c8: 	pshufd	$0xe, %xmm7, %xmm7
    000009cd: 	punpcklwd	%xmm14, %xmm12
    000009d2: 	movq	%rax, %xmm0
    000009d7: 	punpcklwd	%xmm7, %xmm12
    000009dc: 	punpcklwd	%xmm7, %xmm10
    000009e1: 	movdqa	%xmm5, %xmm7
    000009e5: 	punpcklwd	%xmm0, %xmm7
    000009e9: 	movdqa	%xmm5, %xmm14
    000009ee: 	punpcklwd	%xmm0, %xmm5
    000009f2: 	pshufd	$0xe, %xmm7, %xmm7
    000009f7: 	punpcklwd	%xmm0, %xmm14
    000009fc: 	pshufd	$0xe, %xmm1, %xmm1
    00000a01: 	punpcklwd	%xmm7, %xmm14
    00000a06: 	punpcklwd	%xmm7, %xmm5
    00000a0a: 	movdqa	%xmm3, %xmm7
    00000a0e: 	punpcklwd	%xmm9, %xmm7
    00000a13: 	pshufd	$0xe, %xmm15, %xmm15
    00000a19: 	pshufd	$0xe, %xmm5, %xmm5
    00000a1e: 	pshufd	$0xe, %xmm7, %xmm7
    00000a23: 	pshufd	$0xe, %xmm10, %xmm10
    00000a29: 	pshufd	$0xe, %xmm13, %xmm13
    00000a2f: 	movq	%xmm7, %rax
    00000a34: 	movdqa	%xmm3, %xmm7
    00000a38: 	punpcklwd	%xmm9, %xmm3
    00000a3d: 	punpcklwd	%xmm9, %xmm7
    00000a42: 	movdqa	%xmm12, %xmm9
    00000a47: 	movq	%rax, %xmm0
    00000a4c: 	punpcklwd	%xmm14, %xmm9
    00000a51: 	punpcklwd	%xmm0, %xmm7
    00000a55: 	punpcklwd	%xmm0, %xmm3
    00000a59: 	pshufd	$0xe, %xmm9, %xmm9
    00000a5f: 	pshufd	$0xe, %xmm3, %xmm3
    00000a64: 	pshufd	$0xe, %xmm11, %xmm11
    00000a6a: 	movq	%xmm9, %rax
    00000a6f: 	movdqa	%xmm12, %xmm9
    00000a74: 	punpcklwd	%xmm14, %xmm12
    00000a79: 	punpcklwd	%xmm14, %xmm9
    00000a7e: 	movdqa	%xmm1, %xmm14
    00000a83: 	movq	%rax, %xmm0
    00000a88: 	punpcklwd	%xmm15, %xmm14
    00000a8d: 	punpcklwd	%xmm0, %xmm9
    00000a92: 	punpcklwd	%xmm0, %xmm12
    00000a97: 	pshufd	$0xe, %xmm14, %xmm14
    00000a9d: 	pshufd	$0xe, %xmm12, %xmm12
    00000aa3: 	movq	%xmm14, %rax
    00000aa8: 	movdqa	%xmm1, %xmm14
    00000aad: 	punpcklwd	%xmm15, %xmm1
    00000ab2: 	punpcklwd	%xmm15, %xmm14
    00000ab7: 	movdqa	%xmm10, %xmm15
    00000abc: 	movq	%rax, %xmm0
    00000ac1: 	punpcklwd	%xmm5, %xmm15
    00000ac6: 	punpcklwd	%xmm0, %xmm14
    00000acb: 	punpcklwd	%xmm0, %xmm1
    00000acf: 	pshufd	$0xe, %xmm15, %xmm15
    00000ad5: 	pshufd	$0xe, %xmm1, %xmm1
    00000ada: 	movq	%xmm15, %rax
    00000adf: 	movdqa	%xmm10, %xmm15
    00000ae4: 	punpcklwd	%xmm5, %xmm10
    00000ae9: 	movq	%rax, %xmm0
    00000aee: 	punpcklwd	%xmm5, %xmm15
    00000af3: 	movq	%rax, %xmm5
    00000af8: 	punpcklwd	%xmm0, %xmm15
    00000afd: 	punpcklwd	%xmm5, %xmm10
    00000b02: 	movq	%rdx, %xmm0
    00000b07: 	movdqa	%xmm4, %xmm5
    00000b0b: 	pshufd	$0xe, %xmm10, %xmm10
    00000b11: 	punpcklwd	%xmm0, %xmm5
    00000b15: 	pshufd	$0xe, %xmm5, %xmm5
    00000b1a: 	movq	%xmm5, %rdi
    00000b1f: 	movdqa	%xmm4, %xmm5
    00000b23: 	punpcklwd	%xmm0, %xmm5
    00000b27: 	movq	%rdi, %xmm0
    00000b2c: 	punpcklwd	%xmm0, %xmm5
    00000b30: 	movdqa	%xmm14, %xmm0
    00000b35: 	punpcklwd	%xmm15, %xmm0
    00000b3a: 	movq	%xmm5, %r10
    00000b3f: 	pshufd	$0xe, %xmm0, %xmm0
    00000b44: 	movq	%xmm0, %rax
    00000b49: 	movdqa	%xmm14, %xmm0
    00000b4e: 	punpcklwd	%xmm15, %xmm14
    00000b53: 	movq	%rax, %xmm5
    00000b58: 	punpcklwd	%xmm15, %xmm0
    00000b5d: 	movdqa	%xmm3, %xmm15
    00000b62: 	punpcklwd	%xmm5, %xmm0
    00000b66: 	punpcklwd	%xmm12, %xmm15
    00000b6b: 	movdqa	%xmm0, %xmm5
    00000b6f: 	movq	%r10, %xmm0
    00000b74: 	pshufd	$0xe, %xmm15, %xmm15
    00000b7a: 	pmullw	%xmm5, %xmm0
    00000b7e: 	movdqa	%xmm0, %xmm5
    00000b82: 	movq	%rdx, %xmm0
    00000b87: 	punpcklwd	%xmm0, %xmm4
    00000b8b: 	movq	%rdi, %xmm0
    00000b90: 	punpcklwd	%xmm0, %xmm4
    00000b94: 	movq	%rax, %xmm0
    00000b99: 	punpcklwd	%xmm0, %xmm14
    00000b9e: 	pshufd	$0xe, %xmm4, %xmm4
    00000ba3: 	pshufd	$0xe, %xmm14, %xmm14
    00000ba9: 	pmullw	%xmm14, %xmm4
    00000bae: 	movdqa	%xmm3, %xmm14
    00000bb3: 	punpcklwd	%xmm12, %xmm3
    00000bb8: 	punpcklwd	%xmm12, %xmm14
    00000bbd: 	punpcklwd	%xmm15, %xmm3
    00000bc2: 	movdqa	%xmm1, %xmm12
    00000bc7: 	pshufd	$0xe, %xmm3, %xmm3
    00000bcc: 	punpcklwd	%xmm15, %xmm14
    00000bd1: 	punpcklwd	%xmm10, %xmm12
    00000bd6: 	pshufd	$0xe, %xmm12, %xmm12
    00000bdc: 	paddw	%xmm4, %xmm5
    00000be0: 	movdqa	%xmm2, %xmm4
    00000be4: 	punpcklwd	%xmm13, %xmm4
    00000be9: 	pshufd	$0xe, %xmm4, %xmm4
    00000bee: 	movq	%xmm4, %rax
    00000bf3: 	movdqa	%xmm2, %xmm4
    00000bf7: 	punpcklwd	%xmm13, %xmm2
    00000bfc: 	movq	%rax, %xmm0
    00000c01: 	punpcklwd	%xmm13, %xmm4
    00000c06: 	punpcklwd	%xmm0, %xmm2
    00000c0a: 	punpcklwd	%xmm0, %xmm4
    00000c0e: 	movq	%r14, %xmm0
    00000c13: 	pmullw	%xmm14, %xmm4
    00000c18: 	pshufd	$0xe, %xmm2, %xmm2
    00000c1d: 	punpcklwd	%xmm11, %xmm0
    00000c22: 	pmullw	%xmm3, %xmm2
    00000c26: 	pshufd	$0xe, %xmm0, %xmm0
    00000c2b: 	movdqa	%xmm1, %xmm3
    00000c2f: 	movdqa	%xmm0, %xmm13
    00000c34: 	movq	%r14, %xmm0
    00000c39: 	punpcklwd	%xmm10, %xmm1
    00000c3e: 	punpcklwd	%xmm11, %xmm0
    00000c43: 	punpcklwd	%xmm10, %xmm3
    00000c48: 	punpcklwd	%xmm12, %xmm1
    00000c4d: 	punpcklwd	%xmm13, %xmm0
    00000c52: 	punpcklwd	%xmm12, %xmm3
    00000c57: 	pshufd	$0xe, %xmm1, %xmm1
    00000c5c: 	pshufd	$0xe, %xmm0, %xmm0
    00000c61: 	movdqa	%xmm6, %xmm10
    00000c66: 	paddw	%xmm4, %xmm2
    00000c6a: 	movq	%r14, %xmm4
    00000c6f: 	movzwl	-0x78(%rsp), %r14d
    00000c75: 	punpcklwd	%xmm8, %xmm10
    00000c7a: 	pmullw	%xmm1, %xmm0
    00000c7e: 	punpcklwd	%xmm11, %xmm4
    00000c83: 	movdqa	%xmm7, %xmm1
    00000c87: 	punpcklwd	%xmm13, %xmm4
    00000c8c: 	movl	%r14d, %edx
    00000c8f: 	pshufd	$0xe, %xmm10, %xmm10
    00000c95: 	pmullw	%xmm3, %xmm4
    00000c99: 	pextrw	$0x0, %xmm2, %r9d
    00000c9f: 	movdqa	%xmm7, %xmm3
    00000ca3: 	punpcklwd	%xmm9, %xmm3
    00000ca8: 	punpcklwd	%xmm9, %xmm1
    00000cad: 	punpcklwd	%xmm9, %xmm7
    00000cb2: 	pshufd	$0xe, %xmm3, %xmm3
    00000cb7: 	pextrw	$0x2, %xmm2, %r10d
    00000cbd: 	punpcklwd	%xmm3, %xmm1
    00000cc1: 	punpcklwd	%xmm3, %xmm7
    00000cc5: 	pshufd	$0xe, %xmm7, %xmm7
    00000cca: 	paddw	%xmm4, %xmm0
    00000cce: 	movdqa	%xmm6, %xmm4
    00000cd2: 	punpcklwd	%xmm8, %xmm4
    00000cd7: 	punpcklwd	%xmm10, %xmm4
    00000cdc: 	pmullw	%xmm1, %xmm4
    00000ce0: 	pextrw	$0x0, %xmm0, %edi
    00000ce5: 	pextrw	$0x1, %xmm0, %eax
    00000cea: 	addl	%edi, %eax
    00000cec: 	pextrw	$0x2, %xmm0, %edi
    00000cf1: 	movdqa	%xmm6, %xmm1
    00000cf5: 	addl	%eax, %edi
    00000cf7: 	pextrw	$0x3, %xmm0, %eax
    00000cfc: 	punpcklwd	%xmm8, %xmm1
    00000d01: 	addl	%edi, %eax
    00000d03: 	pextrw	$0x0, %xmm0, %edi
    00000d08: 	punpcklwd	%xmm10, %xmm1
    00000d0d: 	addl	%eax, %r14d
    00000d10: 	pextrw	$0x1, %xmm0, %eax
    00000d15: 	pshufd	$0xe, %xmm1, %xmm1
    00000d1a: 	pmullw	%xmm7, %xmm1
    00000d1e: 	addl	%edi, %eax
    00000d20: 	pextrw	$0x2, %xmm0, %edi
    00000d25: 	movw	%r14w, -0x78(%rsp)
    00000d2b: 	addl	%edx, %eax
    00000d2d: 	movl	%r12d, %edx
    00000d30: 	addl	%eax, %edi
    00000d32: 	pextrw	$0x3, %xmm0, %eax
    00000d37: 	addl	%eax, %edi
    00000d39: 	pextrw	$0x1, %xmm2, %eax
    00000d3e: 	addl	%r9d, %eax
    00000d41: 	pextrw	$0x2, %xmm2, %r9d
    00000d47: 	addl	%eax, %r9d
    00000d4a: 	pextrw	$0x3, %xmm2, %eax
    00000d4f: 	paddw	%xmm1, %xmm4
    00000d53: 	addl	%r9d, %eax
    00000d56: 	pextrw	$0x0, %xmm2, %r9d
    00000d5c: 	addl	%eax, %r12d
    00000d5f: 	pextrw	$0x1, %xmm2, %eax
    00000d64: 	addl	%r9d, %eax
    00000d67: 	pextrw	$0x0, %xmm5, %r9d
    00000d6d: 	pextrw	$0x1, %xmm4, %r14d
    00000d73: 	addl	%edx, %eax
    00000d75: 	movl	%r13d, %edx
    00000d78: 	addl	%eax, %r10d
    00000d7b: 	pextrw	$0x3, %xmm2, %eax
    00000d80: 	addl	%eax, %r10d
    00000d83: 	pextrw	$0x1, %xmm5, %eax
    00000d88: 	addl	%r9d, %eax
    00000d8b: 	pextrw	$0x2, %xmm5, %r9d
    00000d91: 	addl	%eax, %r9d
    00000d94: 	pextrw	$0x3, %xmm5, %eax
    00000d99: 	addl	%r9d, %eax
    00000d9c: 	pextrw	$0x0, %xmm5, %r9d
    00000da2: 	addl	%eax, %r13d
    00000da5: 	pextrw	$0x1, %xmm5, %eax
    00000daa: 	addl	%r9d, %eax
    00000dad: 	pextrw	$0x2, %xmm5, %r9d
    00000db3: 	addl	%edx, %eax
    00000db5: 	movl	%r8d, %edx
    00000db8: 	addl	%eax, %r9d
    00000dbb: 	pextrw	$0x3, %xmm5, %eax
    00000dc0: 	addl	%eax, %r9d
    00000dc3: 	pextrw	$0x0, %xmm4, %eax
    00000dc8: 	addl	%eax, %r14d
    00000dcb: 	pextrw	$0x2, %xmm4, %eax
    00000dd0: 	addl	%r14d, %eax
    00000dd3: 	pextrw	$0x3, %xmm4, %r14d
    00000dd9: 	addl	%r14d, %eax
    00000ddc: 	pextrw	$0x1, %xmm4, %r14d
    00000de2: 	addl	%eax, %r8d
    00000de5: 	pextrw	$0x0, %xmm4, %eax
    00000dea: 	addl	%r14d, %eax
    00000ded: 	addl	%edx, %eax
    00000def: 	pextrw	$0x2, %xmm4, %edx
    00000df4: 	addl	%eax, %edx
    00000df6: 	pextrw	$0x3, %xmm4, %eax
    00000dfb: 	addl	%eax, %edx
    00000dfd: 	movq	%r15, %rax
    00000e00: 	andq	$-0x4, %rax
    00000e04: 	leaq	(%rbx,%rax,8), %rbx
    00000e08: 	cmpq	%rax, %r15
    00000e0b: 	je	.Ltmp305 # Offset: 3595
.Ltmp306:
    00000e11: 	leaq	(%rbx,%rbx), %rax
    00000e15: 	movzwl	(%rcx,%rbx,2), %edx
    00000e19: 	imulw	(%rsi,%rbx,2), %dx
    00000e1e: 	movzwl	0x8(%rcx,%rax), %edi
    00000e23: 	imulw	0x8(%rsi,%rax), %di
    00000e29: 	movzwl	0x2(%rcx,%rax), %r9d
    00000e2f: 	imulw	0x2(%rsi,%rax), %r9w
    00000e36: 	movzwl	0x4(%rcx,%rax), %r10d
    00000e3c: 	addl	%r8d, %edx
    00000e3f: 	imulw	0x4(%rsi,%rax), %r10w
    00000e46: 	addl	%edi, %edx
    00000e48: 	movzwl	0xa(%rsi,%rax), %edi
    00000e4d: 	imulw	0xa(%rcx,%rax), %di
    00000e53: 	movl	%edx, %r8d
    00000e56: 	addl	%edi, %r9d
    00000e59: 	movzwl	0xc(%rcx,%rax), %edi
    00000e5e: 	imulw	0xc(%rsi,%rax), %di
    00000e64: 	addl	%r13d, %r9d
    00000e67: 	addl	%edi, %r10d
    00000e6a: 	movzwl	0x6(%rcx,%rax), %edi
    00000e6f: 	imulw	0x6(%rsi,%rax), %di
    00000e75: 	addl	%r12d, %r10d
    00000e78: 	movzwl	0xe(%rcx,%rax), %r12d
    00000e7e: 	imulw	0xe(%rsi,%rax), %r12w
    00000e85: 	addl	%r12d, %edi
    00000e88: 	leaq	0x8(%rbx), %r12
    00000e8c: 	addw	-0x78(%rsp), %di
    00000e91: 	cmpq	%r12, %rbp
    00000e94: 	jbe	.Ltmp305 # Offset: 3732
    00000e9a: 	movzwl	0x1a(%rsi,%rax), %r12d
    00000ea0: 	movzwl	0x12(%rsi,%rax), %r13d
    00000ea6: 	addq	$0x10, %rbx
    00000eaa: 	imulw	0x12(%rcx,%rax), %r13w
    00000eb1: 	movzwl	0x18(%rsi,%rax), %edx
    00000eb6: 	imulw	0x1a(%rcx,%rax), %r12w
    00000ebd: 	imulw	0x18(%rcx,%rax), %dx
    00000ec3: 	addl	%r13d, %r12d
    00000ec6: 	movzwl	0x14(%rsi,%rax), %r13d
    00000ecc: 	imulw	0x14(%rcx,%rax), %r13w
    00000ed3: 	addl	%r12d, %r9d
    00000ed6: 	movzwl	0x1c(%rsi,%rax), %r12d
    00000edc: 	imulw	0x1c(%rcx,%rax), %r12w
    00000ee3: 	addl	%r8d, %edx
    00000ee6: 	movzwl	0x10(%rsi,%rax), %r8d
    00000eec: 	imulw	0x10(%rcx,%rax), %r8w
    00000ef3: 	addl	%r13d, %r12d
    00000ef6: 	movzwl	0x16(%rsi,%rax), %r13d
    00000efc: 	imulw	0x16(%rcx,%rax), %r13w
    00000f03: 	addl	%r12d, %r10d
    00000f06: 	movzwl	0x1e(%rsi,%rax), %r12d
    00000f0c: 	imulw	0x1e(%rcx,%rax), %r12w
    00000f13: 	addl	%r8d, %edx
    00000f16: 	movl	%edx, %r8d
    00000f19: 	addl	%r13d, %r12d
    00000f1c: 	addl	%r12d, %edi
    00000f1f: 	cmpq	%rbx, %rbp
    00000f22: 	jbe	.Ltmp305 # Offset: 3874
    00000f24: 	movzwl	0x20(%rcx,%rax), %edx
    00000f29: 	movzwl	0x28(%rcx,%rax), %ebx
    00000f2e: 	imulw	0x20(%rsi,%rax), %dx
    00000f34: 	movzwl	0x2a(%rcx,%rax), %ebp
    00000f39: 	imulw	0x28(%rsi,%rax), %bx
    00000f3f: 	imulw	0x2a(%rsi,%rax), %bp
    00000f45: 	addl	%ebx, %edx
    00000f47: 	movzwl	0x22(%rcx,%rax), %ebx
    00000f4c: 	imulw	0x22(%rsi,%rax), %bx
    00000f52: 	addl	%r8d, %edx
    00000f55: 	movl	%edx, %r8d
    00000f58: 	addl	%ebp, %ebx
    00000f5a: 	movzwl	0x2c(%rcx,%rax), %ebp
    00000f5f: 	imulw	0x2c(%rsi,%rax), %bp
    00000f65: 	addl	%ebx, %r9d
    00000f68: 	movzwl	0x24(%rcx,%rax), %ebx
    00000f6d: 	imulw	0x24(%rsi,%rax), %bx
    00000f73: 	addl	%ebp, %ebx
    00000f75: 	movzwl	0x2e(%rcx,%rax), %ebp
    00000f7a: 	imulw	0x2e(%rsi,%rax), %bp
    00000f80: 	addl	%ebx, %r10d
    00000f83: 	movzwl	0x26(%rcx,%rax), %ebx
    00000f88: 	imulw	0x26(%rsi,%rax), %bx
    00000f8e: 	movl	%ebp, %eax
    00000f90: 	addl	%ebx, %eax
    00000f92: 	addl	%eax, %edi
.Ltmp305:
    00000f94: 	movq	0x30(%rsp), %rbp
    00000f99: 	leal	(%rdi,%r10), %eax
    00000f9d: 	addl	%r9d, %eax
    00000fa0: 	andq	$-0x8, %rbp
    00000fa4: 	leaq	0x8(%rbp), %rbx
    00000fa8: 	cmpq	%r11, %rbx
    00000fab: 	jae	.Ltmp307 # Offset: 4011
    00000fb1: 	addq	$0x9, %rbp
    00000fb5: 	movq	%r11, %rdx
    00000fb8: 	movl	$0x1, %edi
    00000fbd: 	subq	%rbx, %rdx
    00000fc0: 	cmpq	%rbp, %r11
    00000fc3: 	cmovaeq	%rdx, %rdi
    00000fc7: 	subq	$0x1, %rdx
    00000fcb: 	cmpq	$0x6, %rdx
    00000fcf: 	jbe	.Ltmp308 # Offset: 4047
    00000fd5: 	cmpq	%rbp, %r11
    00000fd8: 	jb	.Ltmp308 # Offset: 4056
    00000fde: 	movq	%rdi, %r10
    00000fe1: 	leaq	(%rbx,%rbx), %r9
    00000fe5: 	pxor	%xmm0, %xmm0
    00000fe9: 	xorl	%edx, %edx
    00000feb: 	shrq	$0x3, %r10
    00000fef: 	leaq	(%rcx,%r9), %rbp
    00000ff3: 	addq	%rsi, %r9
    00000ff6: 	shlq	$0x4, %r10
    00000ffa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp309:
    00001000: 	movdqu	(%r9,%rdx), %xmm1
    00001006: 	movdqu	(%rbp,%rdx), %xmm2
    0000100c: 	addq	$0x10, %rdx
    00001010: 	pmullw	%xmm2, %xmm1
    00001014: 	paddw	%xmm1, %xmm0
    00001018: 	cmpq	%r10, %rdx
    0000101b: 	jne	.Ltmp309 # Offset: 4123
    0000101d: 	movdqa	%xmm0, %xmm1
    00001021: 	movq	%rdi, %rbp
    00001024: 	movl	%r8d, %r9d
    00001027: 	psrldq	$0x8, %xmm1
    0000102c: 	andq	$-0x8, %rbp
    00001030: 	paddw	%xmm1, %xmm0
    00001034: 	movdqa	%xmm0, %xmm1
    00001038: 	psrldq	$0x4, %xmm1
    0000103d: 	paddw	%xmm1, %xmm0
    00001041: 	movdqa	%xmm0, %xmm1
    00001045: 	psrldq	$0x2, %xmm1
    0000104a: 	paddw	%xmm1, %xmm0
    0000104e: 	pextrw	$0x0, %xmm0, %edx
    00001053: 	addl	%edx, %r8d
    00001056: 	addl	%r9d, %edx
    00001059: 	leaq	(%rbx,%rbp), %r9
    0000105d: 	cmpq	%rbp, %rdi
    00001060: 	je	.Ltmp307 # Offset: 4192
.Ltmp313:
    00001066: 	subq	%rbp, %rdi
    00001069: 	leaq	-0x1(%rdi), %rdx
    0000106d: 	cmpq	$0x2, %rdx
    00001071: 	jbe	.Ltmp310 # Offset: 4209
.Ltmp311:
    00001073: 	addq	%rbp, %rbx
    00001076: 	movl	%r8d, %r10d
    00001079: 	movq	(%rsi,%rbx,2), %xmm0
    0000107e: 	movq	(%rcx,%rbx,2), %xmm1
    00001083: 	pmullw	%xmm1, %xmm0
    00001087: 	pextrw	$0x0, %xmm0, %ebx
    0000108c: 	pextrw	$0x1, %xmm0, %edx
    00001091: 	addl	%ebx, %edx
    00001093: 	pextrw	$0x2, %xmm0, %ebx
    00001098: 	addl	%ebx, %edx
    0000109a: 	pextrw	$0x3, %xmm0, %ebx
    0000109f: 	addl	%ebx, %edx
    000010a1: 	pextrw	$0x0, %xmm0, %ebx
    000010a6: 	addl	%edx, %r8d
    000010a9: 	pextrw	$0x1, %xmm0, %edx
    000010ae: 	addl	%ebx, %edx
    000010b0: 	addl	%r10d, %edx
    000010b3: 	pextrw	$0x2, %xmm0, %r10d
    000010b9: 	addl	%r10d, %edx
    000010bc: 	pextrw	$0x3, %xmm0, %r10d
    000010c2: 	addl	%r10d, %edx
    000010c5: 	movq	%rdi, %r10
    000010c8: 	andq	$-0x4, %r10
    000010cc: 	addq	%r10, %r9
    000010cf: 	cmpq	%rdi, %r10
    000010d2: 	je	.Ltmp307 # Offset: 4306
.Ltmp310:
    000010d4: 	movzwl	(%rcx,%r9,2), %edx
    000010d9: 	imulw	(%rsi,%r9,2), %dx
    000010df: 	leaq	(%r9,%r9), %rdi
    000010e3: 	addl	%r8d, %edx
    000010e6: 	leaq	0x1(%r9), %r8
    000010ea: 	cmpq	%r11, %r8
    000010ed: 	jae	.Ltmp307 # Offset: 4333
    000010ef: 	movzwl	0x2(%rcx,%rdi), %r8d
    000010f5: 	imulw	0x2(%rsi,%rdi), %r8w
    000010fc: 	addq	$0x2, %r9
    00001100: 	addl	%r8d, %edx
    00001103: 	cmpq	%r11, %r9
    00001106: 	jae	.Ltmp307 # Offset: 4358
    00001108: 	movzwl	0x4(%rsi,%rdi), %esi
    0000110d: 	imulw	0x4(%rcx,%rdi), %si
    00001113: 	movl	%esi, %ecx
    00001115: 	addl	%ecx, %edx
.Ltmp307:
    00001117: 	addq	$0x40, %rsp
    0000111b: 	addl	%edx, %eax
    0000111d: 	popq	%rbx
    0000111e: 	popq	%rbp
    0000111f: 	popq	%r12
    00001121: 	popq	%r13
    00001123: 	popq	%r14
    00001125: 	popq	%r15
    00001127: 	retq # Offset: 4391
    00001128: 	nopl	(%rax,%rax) # Size: 8
.Ltmp302:
    00001130: 	xorl	%ebx, %ebx
    00001132: 	xorl	%r9d, %r9d
    00001135: 	xorl	%eax, %eax
    00001137: 	xorl	%r8d, %r8d
    0000113a: 	movl	$0x7, %edi
    0000113f: 	jmp	.Ltmp311 # Offset: 4415
.Ltmp303:
    00001144: 	xorl	%edx, %edx
    00001146: 	xorl	%eax, %eax
    00001148: 	xorl	%r12d, %r12d
    0000114b: 	xorl	%r13d, %r13d
    0000114e: 	movw	%dx, -0x78(%rsp)
    00001153: 	xorl	%r8d, %r8d
    00001156: 	xorl	%ebx, %ebx
    00001158: 	jmp	.Ltmp312 # Offset: 4440
.Ltmp308:
    0000115d: 	movq	%rbx, %r9
    00001160: 	xorl	%ebp, %ebp
    00001162: 	jmp	.Ltmp313 # Offset: 4450
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKssET0_T_S3_m"

Binary Function "_Z15inner_product10IPKssET0_T_S3_m" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x11d20
  Size        : 0x3f7
  MaxSize     : 0x400
  Offset      : 0x11d20
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKssET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rsi, %rcx
    0000000c: 	movq	%rdx, %r11
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	cmpq	$0xf, %rdx
    00000017: 	je	.Ltmp314 # Offset: 23
    0000001d: 	leaq	-0x10(%rdx), %r9
    00000021: 	movq	%r9, %rbx
    00000024: 	shrq	$0x4, %rbx
    00000028: 	cmpq	$0x1f, %r9
    0000002c: 	jbe	.Ltmp315 # Offset: 44
    00000032: 	movq	%r9, %rdi
    00000035: 	movq	%rsi, %rax
    00000038: 	pxor	%xmm4, %xmm4
    0000003c: 	movq	%r8, %rdx
    0000003f: 	shrq	$0x5, %rdi
    00000043: 	movq	%rdi, %rsi
    00000046: 	shlq	$0x6, %rsi
    0000004a: 	addq	%rcx, %rsi
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp316:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	(%rdx), %xmm2
    00000058: 	addq	$0x40, %rax
    0000005c: 	addq	$0x40, %rdx
    00000060: 	movdqu	-0x30(%rax), %xmm3
    00000065: 	movdqu	-0x10(%rax), %xmm6
    0000006a: 	movdqu	-0x20(%rax), %xmm7
    0000006f: 	movdqa	%xmm0, %xmm1
    00000073: 	movdqa	%xmm3, %xmm5
    00000077: 	punpckhqdq	%xmm6, %xmm5
    0000007b: 	punpckhqdq	%xmm7, %xmm1
    0000007f: 	movdqu	-0x20(%rdx), %xmm6
    00000084: 	movdqu	-0x10(%rax), %xmm7
    00000089: 	paddw	%xmm5, %xmm1
    0000008d: 	movdqa	%xmm2, %xmm5
    00000091: 	punpckhqdq	%xmm6, %xmm5
    00000095: 	movdqu	-0x20(%rax), %xmm6
    0000009a: 	punpcklqdq	%xmm7, %xmm3
    0000009e: 	movdqu	-0x20(%rdx), %xmm7
    000000a3: 	pmullw	%xmm5, %xmm1
    000000a7: 	punpcklqdq	%xmm6, %xmm0
    000000ab: 	punpcklqdq	%xmm7, %xmm2
    000000af: 	paddw	%xmm3, %xmm0
    000000b3: 	pmullw	%xmm2, %xmm0
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	paddw	%xmm0, %xmm4
    000000bf: 	cmpq	%rax, %rsi
    000000c2: 	jne	.Ltmp316 # Offset: 194
    000000c4: 	pextrw	$0x4, %xmm4, %eax
    000000c9: 	pextrw	$0x0, %xmm4, %r10d
    000000cf: 	pextrw	$0x1, %xmm4, %esi
    000000d4: 	addl	%eax, %r10d
    000000d7: 	pextrw	$0x5, %xmm4, %eax
    000000dc: 	pextrw	$0x2, %xmm4, %r12d
    000000e2: 	addl	%eax, %esi
    000000e4: 	pextrw	$0x6, %xmm4, %eax
    000000e9: 	pextrw	$0x7, %xmm4, %ebp
    000000ee: 	addl	%eax, %r12d
    000000f1: 	pextrw	$0x3, %xmm4, %eax
    000000f6: 	leaq	(%rdi,%rdi), %rdx
    000000fa: 	shlq	$0x5, %rdi
    000000fe: 	addl	%eax, %ebp
.Ltmp323:
    00000100: 	movq	%rbx, %r13
    00000103: 	subq	%rdx, %r13
    00000106: 	cmpq	%rbx, %rdx
    00000109: 	je	.Ltmp317 # Offset: 265
    0000010f: 	shlq	$0x5, %rdx
    00000113: 	movzwl	%bp, %eax
    00000116: 	movzwl	%r12w, %r12d
    0000011a: 	movzwl	%si, %esi
    0000011d: 	leaq	(%rcx,%rdx), %rbx
    00000121: 	addq	%r8, %rdx
    00000124: 	shlq	$0x10, %rax
    00000128: 	movzwl	%r10w, %r10d
    0000012c: 	movq	0x18(%rbx), %xmm1
    00000131: 	movq	0x8(%rbx), %xmm0
    00000136: 	orq	%r12, %rax
    00000139: 	shlq	$0x4, %r13
    0000013d: 	movq	0x10(%rbx), %xmm2
    00000142: 	shlq	$0x10, %rax
    00000146: 	addq	%r13, %rdi
    00000149: 	paddw	%xmm1, %xmm0
    0000014d: 	movq	0x8(%rdx), %xmm1
    00000152: 	orq	%rsi, %rax
    00000155: 	shlq	$0x10, %rax
    00000159: 	orq	%r10, %rax
    0000015c: 	pmullw	%xmm1, %xmm0
    00000160: 	movq	(%rbx), %xmm1
    00000164: 	movq	%rax, %xmm4
    00000169: 	paddw	%xmm2, %xmm1
    0000016d: 	movq	(%rdx), %xmm2
    00000171: 	pmullw	%xmm2, %xmm1
    00000175: 	paddw	%xmm4, %xmm0
    00000179: 	paddw	%xmm1, %xmm0
    0000017d: 	pextrw	$0x0, %xmm0, %r10d
    00000183: 	pextrw	$0x1, %xmm0, %esi
    00000188: 	pextrw	$0x2, %xmm0, %r12d
    0000018e: 	pextrw	$0x3, %xmm0, %ebp
.Ltmp317:
    00000193: 	leaq	(%rdi,%rdi), %rax
    00000197: 	movzwl	(%rcx,%rdi,2), %edx
    0000019b: 	addw	0x10(%rcx,%rdi,2), %dx
    000001a0: 	andq	$-0x10, %r9
    000001a4: 	imulw	(%r8,%rdi,2), %dx
    000001aa: 	movzwl	0x8(%rcx,%rax), %edi
    000001af: 	addw	0x18(%rcx,%rax), %di
    000001b4: 	imulw	0x8(%r8,%rax), %di
    000001bb: 	movzwl	0xa(%rcx,%rax), %r13d
    000001c1: 	addw	0x1a(%rcx,%rax), %r13w
    000001c7: 	imulw	0xa(%r8,%rax), %r13w
    000001ce: 	addl	%edi, %edx
    000001d0: 	movzwl	0x2(%rcx,%rax), %edi
    000001d5: 	addw	0x12(%rcx,%rax), %di
    000001da: 	imulw	0x2(%r8,%rax), %di
    000001e1: 	addl	%r10d, %edx
    000001e4: 	leaq	0x10(%r9), %r10
    000001e8: 	movl	%edx, %ebx
    000001ea: 	addl	%r13d, %edi
    000001ed: 	movzwl	0xc(%rcx,%rax), %r13d
    000001f3: 	addw	0x1c(%rcx,%rax), %r13w
    000001f9: 	addl	%esi, %edi
    000001fb: 	imulw	0xc(%r8,%rax), %r13w
    00000202: 	movzwl	0x4(%rcx,%rax), %esi
    00000207: 	addw	0x14(%rcx,%rax), %si
    0000020c: 	imulw	0x4(%r8,%rax), %si
    00000213: 	addl	%r13d, %esi
    00000216: 	addl	%r12d, %esi
    00000219: 	movzwl	0xe(%rcx,%rax), %r12d
    0000021f: 	addw	0x1e(%rcx,%rax), %r12w
    00000225: 	imulw	0xe(%r8,%rax), %r12w
    0000022c: 	addl	%edi, %esi
    0000022e: 	movzwl	0x6(%rcx,%rax), %edi
    00000233: 	addw	0x16(%rcx,%rax), %di
    00000238: 	imulw	0x6(%r8,%rax), %di
    0000023f: 	movl	%r12d, %eax
    00000242: 	addl	%edi, %eax
    00000244: 	addl	%ebp, %eax
    00000246: 	addl	%esi, %eax
    00000248: 	cmpq	%r11, %r10
    0000024b: 	jae	.Ltmp318 # Offset: 587
    00000251: 	addq	$0x11, %r9
    00000255: 	movq	%r11, %rdx
    00000258: 	movl	$0x1, %esi
    0000025d: 	subq	%r10, %rdx
    00000260: 	cmpq	%r9, %r11
    00000263: 	cmovaeq	%rdx, %rsi
    00000267: 	subq	$0x1, %rdx
    0000026b: 	cmpq	$0x6, %rdx
    0000026f: 	jbe	.Ltmp319 # Offset: 623
    00000275: 	cmpq	%r9, %r11
    00000278: 	jb	.Ltmp319 # Offset: 632
.Ltmp322:
    0000027e: 	movq	%rsi, %r9
    00000281: 	leaq	(%r10,%r10), %rdi
    00000285: 	pxor	%xmm0, %xmm0
    00000289: 	xorl	%edx, %edx
    0000028b: 	shrq	$0x3, %r9
    0000028f: 	leaq	(%r8,%rdi), %rbp
    00000293: 	addq	%rcx, %rdi
    00000296: 	shlq	$0x4, %r9
    0000029a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp320:
    000002a0: 	movdqu	(%rdi,%rdx), %xmm1
    000002a5: 	movdqu	(%rbp,%rdx), %xmm4
    000002ab: 	addq	$0x10, %rdx
    000002af: 	pmullw	%xmm4, %xmm1
    000002b3: 	paddw	%xmm1, %xmm0
    000002b7: 	cmpq	%rdx, %r9
    000002ba: 	jne	.Ltmp320 # Offset: 698
    000002bc: 	movdqa	%xmm0, %xmm1
    000002c0: 	movq	%rsi, %r9
    000002c3: 	movl	%ebx, %edi
    000002c5: 	psrldq	$0x8, %xmm1
    000002ca: 	andq	$-0x8, %r9
    000002ce: 	paddw	%xmm1, %xmm0
    000002d2: 	movdqa	%xmm0, %xmm1
    000002d6: 	psrldq	$0x4, %xmm1
    000002db: 	paddw	%xmm1, %xmm0
    000002df: 	movdqa	%xmm0, %xmm1
    000002e3: 	psrldq	$0x2, %xmm1
    000002e8: 	paddw	%xmm1, %xmm0
    000002ec: 	pextrw	$0x0, %xmm0, %edx
    000002f1: 	addl	%edx, %ebx
    000002f3: 	addl	%edi, %edx
    000002f5: 	leaq	(%r10,%r9), %rdi
    000002f9: 	cmpq	%r9, %rsi
    000002fc: 	je	.Ltmp318 # Offset: 764
.Ltmp324:
    00000302: 	subq	%r9, %rsi
    00000305: 	leaq	-0x1(%rsi), %rdx
    00000309: 	cmpq	$0x2, %rdx
    0000030d: 	jbe	.Ltmp321 # Offset: 781
    0000030f: 	addq	%r9, %r10
    00000312: 	movl	%ebx, %r9d
    00000315: 	movq	(%rcx,%r10,2), %xmm0
    0000031b: 	movq	(%r8,%r10,2), %xmm1
    00000321: 	pmullw	%xmm1, %xmm0
    00000325: 	pextrw	$0x0, %xmm0, %r10d
    0000032b: 	pextrw	$0x1, %xmm0, %edx
    00000330: 	addl	%r10d, %edx
    00000333: 	pextrw	$0x2, %xmm0, %r10d
    00000339: 	addl	%r10d, %edx
    0000033c: 	pextrw	$0x3, %xmm0, %r10d
    00000342: 	addl	%r10d, %edx
    00000345: 	pextrw	$0x0, %xmm0, %r10d
    0000034b: 	addl	%edx, %ebx
    0000034d: 	pextrw	$0x1, %xmm0, %edx
    00000352: 	addl	%r10d, %edx
    00000355: 	addl	%r9d, %edx
    00000358: 	pextrw	$0x2, %xmm0, %r9d
    0000035e: 	addl	%r9d, %edx
    00000361: 	pextrw	$0x3, %xmm0, %r9d
    00000367: 	addl	%r9d, %edx
    0000036a: 	movq	%rsi, %r9
    0000036d: 	andq	$-0x4, %r9
    00000371: 	addq	%r9, %rdi
    00000374: 	cmpq	%rsi, %r9
    00000377: 	je	.Ltmp318 # Offset: 887
.Ltmp321:
    00000379: 	movzwl	(%r8,%rdi,2), %edx
    0000037e: 	imulw	(%rcx,%rdi,2), %dx
    00000383: 	leaq	0x1(%rdi), %r9
    00000387: 	leaq	(%rdi,%rdi), %rsi
    0000038b: 	addl	%ebx, %edx
    0000038d: 	cmpq	%r11, %r9
    00000390: 	jae	.Ltmp318 # Offset: 912
    00000392: 	movzwl	0x2(%r8,%rsi), %r9d
    00000398: 	imulw	0x2(%rcx,%rsi), %r9w
    0000039f: 	addq	$0x2, %rdi
    000003a3: 	addl	%r9d, %edx
    000003a6: 	cmpq	%r11, %rdi
    000003a9: 	jae	.Ltmp318 # Offset: 937
    000003ab: 	movzwl	0x4(%rcx,%rsi), %ecx
    000003b0: 	imulw	0x4(%r8,%rsi), %cx
    000003b7: 	addl	%ecx, %edx
.Ltmp318:
    000003b9: 	popq	%rbx
    000003ba: 	addl	%edx, %eax
    000003bc: 	popq	%rbp
    000003bd: 	popq	%r12
    000003bf: 	popq	%r13
    000003c1: 	retq # Offset: 961
    000003c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp314:
    000003c8: 	movl	$0xf, %esi
    000003cd: 	xorl	%eax, %eax
    000003cf: 	xorl	%r10d, %r10d
    000003d2: 	xorl	%ebx, %ebx
    000003d4: 	jmp	.Ltmp322 # Offset: 980
.Ltmp315:
    000003d9: 	xorl	%edx, %edx
    000003db: 	xorl	%ebp, %ebp
    000003dd: 	xorl	%r12d, %r12d
    000003e0: 	xorl	%esi, %esi
    000003e2: 	xorl	%r10d, %r10d
    000003e5: 	xorl	%edi, %edi
    000003e7: 	jmp	.Ltmp323 # Offset: 999
.Ltmp319:
    000003ec: 	movq	%r10, %rdi
    000003ef: 	xorl	%r9d, %r9d
    000003f2: 	jmp	.Ltmp324 # Offset: 1010
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKssET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKttET0_T_S3_m" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x12120
  Size        : 0x147
  MaxSize     : 0x150
  Offset      : 0x12120
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	addq	%rdx, %rdx
    00000007: 	movq	%rdi, %rcx
    0000000a: 	leaq	(%rdi,%rdx), %rdi
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	je	.Ltmp325 # Offset: 17
    00000017: 	subq	$0x2, %rdx
    0000001b: 	movq	%rdx, %r10
    0000001e: 	shrq	%r10
    00000021: 	leaq	0x1(%r10), %r11
    00000025: 	cmpq	$0xc, %rdx
    00000029: 	jbe	.Ltmp326 # Offset: 41
    0000002f: 	movq	%r11, %rdx
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm1, %xmm1
    00000038: 	shrq	$0x3, %rdx
    0000003c: 	shlq	$0x4, %rdx
.Ltmp327:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	addq	$0x10, %rax
    0000004e: 	pmullw	%xmm2, %xmm0
    00000052: 	paddw	%xmm0, %xmm1
    00000056: 	cmpq	%rdx, %rax
    00000059: 	jne	.Ltmp327 # Offset: 89
    0000005b: 	movdqa	%xmm1, %xmm0
    0000005f: 	movq	%r11, %rax
    00000062: 	psrldq	$0x8, %xmm0
    00000067: 	andq	$-0x8, %rax
    0000006b: 	paddw	%xmm0, %xmm1
    0000006f: 	leaq	(%rax,%rax), %rdx
    00000073: 	movdqa	%xmm1, %xmm0
    00000077: 	leaq	(%rcx,%rdx), %r9
    0000007b: 	addq	%rsi, %rdx
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	paddw	%xmm0, %xmm1
    00000087: 	movdqa	%xmm1, %xmm0
    0000008b: 	psrldq	$0x2, %xmm0
    00000090: 	paddw	%xmm0, %xmm1
    00000094: 	pextrw	$0x0, %xmm1, %r8d
    0000009a: 	cmpq	%rax, %r11
    0000009d: 	je	.Ltmp328 # Offset: 157
.Ltmp330:
    000000a3: 	subq	%rax, %r10
    000000a6: 	leaq	0x1(%r10), %r11
    000000aa: 	cmpq	$0x2, %r10
    000000ae: 	jbe	.Ltmp329 # Offset: 174
    000000b0: 	movq	(%rcx,%rax,2), %xmm0
    000000b5: 	movq	(%rsi,%rax,2), %xmm1
    000000ba: 	pmullw	%xmm1, %xmm0
    000000be: 	pextrw	$0x1, %xmm0, %ecx
    000000c3: 	pextrw	$0x0, %xmm0, %eax
    000000c8: 	addl	%ecx, %eax
    000000ca: 	pextrw	$0x2, %xmm0, %ecx
    000000cf: 	addl	%r8d, %eax
    000000d2: 	pextrw	$0x3, %xmm0, %r8d
    000000d8: 	addl	%ecx, %eax
    000000da: 	addl	%eax, %r8d
    000000dd: 	movq	%r11, %rax
    000000e0: 	andq	$-0x4, %rax
    000000e4: 	leaq	(%rax,%rax), %rcx
    000000e8: 	addq	%rcx, %r9
    000000eb: 	addq	%rcx, %rdx
    000000ee: 	cmpq	%rax, %r11
    000000f1: 	je	.Ltmp328 # Offset: 241
.Ltmp329:
    000000f3: 	movzwl	(%r9), %eax
    000000f7: 	imulw	(%rdx), %ax
    000000fb: 	addl	%eax, %r8d
    000000fe: 	leaq	0x2(%r9), %rax
    00000102: 	cmpq	%rax, %rdi
    00000105: 	je	.Ltmp328 # Offset: 261
    00000107: 	movzwl	0x2(%r9), %eax
    0000010c: 	imulw	0x2(%rdx), %ax
    00000111: 	addl	%eax, %r8d
    00000114: 	leaq	0x4(%r9), %rax
    00000118: 	cmpq	%rax, %rdi
    0000011b: 	je	.Ltmp328 # Offset: 283
    0000011d: 	movzwl	0x4(%r9), %eax
    00000122: 	imulw	0x4(%rdx), %ax
    00000127: 	addl	%eax, %r8d
.Ltmp328:
    0000012a: 	movl	%r8d, %eax
    0000012d: 	retq # Offset: 301
    0000012e: 	nop # Size: 2
.Ltmp325:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp326:
    00000137: 	movq	%rsi, %rdx
    0000013a: 	movq	%rcx, %r9
    0000013d: 	xorl	%eax, %eax
    0000013f: 	xorl	%r8d, %r8d
    00000142: 	jmp	.Ltmp330 # Offset: 322
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKttET0_T_S3_m"

Binary Function "_Z14inner_product1IPKttET0_T_S3_m" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x12270
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0x12270
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %rsi
    0000000a: 	testq	%rdx, %rdx
    0000000d: 	je	.Ltmp331 # Offset: 13
    00000013: 	leaq	-0x1(%rdx), %rax
    00000017: 	cmpq	$0x6, %rax
    0000001b: 	jbe	.Ltmp332 # Offset: 27
    00000021: 	shrq	$0x3, %rdx
    00000025: 	xorl	%eax, %eax
    00000027: 	pxor	%xmm1, %xmm1
    0000002b: 	shlq	$0x4, %rdx
    0000002f: 	nop # Size: 1
.Ltmp333:
    00000030: 	movdqu	(%rdi,%rax), %xmm0
    00000035: 	movdqu	(%rcx,%rax), %xmm2
    0000003a: 	addq	$0x10, %rax
    0000003e: 	pmullw	%xmm2, %xmm0
    00000042: 	paddw	%xmm0, %xmm1
    00000046: 	cmpq	%rdx, %rax
    00000049: 	jne	.Ltmp333 # Offset: 73
    0000004b: 	movdqa	%xmm1, %xmm0
    0000004f: 	movq	%rsi, %rax
    00000052: 	psrldq	$0x8, %xmm0
    00000057: 	andq	$-0x8, %rax
    0000005b: 	paddw	%xmm0, %xmm1
    0000005f: 	movdqa	%xmm1, %xmm0
    00000063: 	psrldq	$0x4, %xmm0
    00000068: 	paddw	%xmm0, %xmm1
    0000006c: 	movdqa	%xmm1, %xmm0
    00000070: 	psrldq	$0x2, %xmm0
    00000075: 	paddw	%xmm0, %xmm1
    00000079: 	pextrw	$0x0, %xmm1, %r8d
    0000007f: 	testb	$0x7, %sil
    00000083: 	je	.Ltmp334 # Offset: 131
.Ltmp336:
    00000089: 	movq	%rsi, %r9
    0000008c: 	subq	%rax, %r9
    0000008f: 	leaq	-0x1(%r9), %rdx
    00000093: 	cmpq	$0x2, %rdx
    00000097: 	jbe	.Ltmp335 # Offset: 151
    00000099: 	movq	(%rdi,%rax,2), %xmm0
    0000009e: 	movq	(%rcx,%rax,2), %xmm1
    000000a3: 	pmullw	%xmm1, %xmm0
    000000a7: 	pextrw	$0x0, %xmm0, %edx
    000000ac: 	pextrw	$0x1, %xmm0, %r10d
    000000b2: 	addl	%r10d, %edx
    000000b5: 	addl	%r8d, %edx
    000000b8: 	pextrw	$0x2, %xmm0, %r8d
    000000be: 	addl	%r8d, %edx
    000000c1: 	pextrw	$0x3, %xmm0, %r8d
    000000c7: 	addl	%edx, %r8d
    000000ca: 	movq	%r9, %rdx
    000000cd: 	andq	$-0x4, %rdx
    000000d1: 	addq	%rdx, %rax
    000000d4: 	cmpq	%rdx, %r9
    000000d7: 	je	.Ltmp334 # Offset: 215
.Ltmp335:
    000000d9: 	movzwl	(%rdi,%rax,2), %r9d
    000000de: 	imulw	(%rcx,%rax,2), %r9w
    000000e4: 	leaq	(%rax,%rax), %rdx
    000000e8: 	addl	%r9d, %r8d
    000000eb: 	leaq	0x1(%rax), %r9
    000000ef: 	cmpq	%r9, %rsi
    000000f2: 	jbe	.Ltmp334 # Offset: 242
    000000f4: 	movzwl	0x2(%rcx,%rdx), %r9d
    000000fa: 	imulw	0x2(%rdi,%rdx), %r9w
    00000101: 	addq	$0x2, %rax
    00000105: 	addl	%r9d, %r8d
    00000108: 	cmpq	%rax, %rsi
    0000010b: 	jbe	.Ltmp334 # Offset: 267
    0000010d: 	movzwl	0x4(%rdi,%rdx), %eax
    00000112: 	imulw	0x4(%rcx,%rdx), %ax
    00000118: 	addl	%eax, %r8d
.Ltmp334:
    0000011b: 	movl	%r8d, %eax
    0000011e: 	retq # Offset: 286
    0000011f: 	nop # Size: 1
.Ltmp331:
    00000120: 	xorl	%r8d, %r8d
    00000123: 	movl	%r8d, %eax
    00000126: 	retq # Offset: 294
.Ltmp332:
    00000127: 	xorl	%eax, %eax
    00000129: 	xorl	%r8d, %r8d
    0000012c: 	jmp	.Ltmp336 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKttET0_T_S3_m"

Binary Function "_Z14inner_product2IPKttET0_T_S3_m" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x123b0
  Size        : 0x147
  MaxSize     : 0x150
  Offset      : 0x123b0
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	addq	%rdx, %rdx
    00000007: 	movq	%rdi, %rcx
    0000000a: 	leaq	(%rdi,%rdx), %rdi
    0000000e: 	cmpq	%rdi, %rcx
    00000011: 	je	.Ltmp337 # Offset: 17
    00000017: 	subq	$0x2, %rdx
    0000001b: 	movq	%rdx, %r10
    0000001e: 	shrq	%r10
    00000021: 	leaq	0x1(%r10), %r11
    00000025: 	cmpq	$0xc, %rdx
    00000029: 	jbe	.Ltmp338 # Offset: 41
    0000002f: 	movq	%r11, %rdx
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm1, %xmm1
    00000038: 	shrq	$0x3, %rdx
    0000003c: 	shlq	$0x4, %rdx
.Ltmp339:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	addq	$0x10, %rax
    0000004e: 	pmullw	%xmm2, %xmm0
    00000052: 	paddw	%xmm0, %xmm1
    00000056: 	cmpq	%rdx, %rax
    00000059: 	jne	.Ltmp339 # Offset: 89
    0000005b: 	movdqa	%xmm1, %xmm0
    0000005f: 	movq	%r11, %rax
    00000062: 	psrldq	$0x8, %xmm0
    00000067: 	andq	$-0x8, %rax
    0000006b: 	paddw	%xmm0, %xmm1
    0000006f: 	leaq	(%rax,%rax), %rdx
    00000073: 	movdqa	%xmm1, %xmm0
    00000077: 	leaq	(%rcx,%rdx), %r9
    0000007b: 	addq	%rsi, %rdx
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	paddw	%xmm0, %xmm1
    00000087: 	movdqa	%xmm1, %xmm0
    0000008b: 	psrldq	$0x2, %xmm0
    00000090: 	paddw	%xmm0, %xmm1
    00000094: 	pextrw	$0x0, %xmm1, %r8d
    0000009a: 	cmpq	%rax, %r11
    0000009d: 	je	.Ltmp340 # Offset: 157
.Ltmp342:
    000000a3: 	subq	%rax, %r10
    000000a6: 	leaq	0x1(%r10), %r11
    000000aa: 	cmpq	$0x2, %r10
    000000ae: 	jbe	.Ltmp341 # Offset: 174
    000000b0: 	movq	(%rcx,%rax,2), %xmm0
    000000b5: 	movq	(%rsi,%rax,2), %xmm1
    000000ba: 	pmullw	%xmm1, %xmm0
    000000be: 	pextrw	$0x1, %xmm0, %ecx
    000000c3: 	pextrw	$0x0, %xmm0, %eax
    000000c8: 	addl	%ecx, %eax
    000000ca: 	pextrw	$0x2, %xmm0, %ecx
    000000cf: 	addl	%r8d, %eax
    000000d2: 	pextrw	$0x3, %xmm0, %r8d
    000000d8: 	addl	%ecx, %eax
    000000da: 	addl	%eax, %r8d
    000000dd: 	movq	%r11, %rax
    000000e0: 	andq	$-0x4, %rax
    000000e4: 	leaq	(%rax,%rax), %rcx
    000000e8: 	addq	%rcx, %r9
    000000eb: 	addq	%rcx, %rdx
    000000ee: 	cmpq	%rax, %r11
    000000f1: 	je	.Ltmp340 # Offset: 241
.Ltmp341:
    000000f3: 	movzwl	(%r9), %eax
    000000f7: 	imulw	(%rdx), %ax
    000000fb: 	addl	%eax, %r8d
    000000fe: 	leaq	0x2(%r9), %rax
    00000102: 	cmpq	%rax, %rdi
    00000105: 	je	.Ltmp340 # Offset: 261
    00000107: 	movzwl	0x2(%r9), %eax
    0000010c: 	imulw	0x2(%rdx), %ax
    00000111: 	addl	%eax, %r8d
    00000114: 	leaq	0x4(%r9), %rax
    00000118: 	cmpq	%rax, %rdi
    0000011b: 	je	.Ltmp340 # Offset: 283
    0000011d: 	movzwl	0x4(%r9), %eax
    00000122: 	imulw	0x4(%rdx), %ax
    00000127: 	addl	%eax, %r8d
.Ltmp340:
    0000012a: 	movl	%r8d, %eax
    0000012d: 	retq # Offset: 301
    0000012e: 	nop # Size: 2
.Ltmp337:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp338:
    00000137: 	movq	%rsi, %rdx
    0000013a: 	movq	%rcx, %r9
    0000013d: 	xorl	%eax, %eax
    0000013f: 	xorl	%r8d, %r8d
    00000142: 	jmp	.Ltmp342 # Offset: 322
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKttET0_T_S3_m"

Binary Function "_Z14inner_product3IPKttET0_T_S3_m" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x12500
  Size        : 0x290
  MaxSize     : 0x290
  Offset      : 0x12500
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rsi, %rcx
    0000000a: 	subq	$0x1, %r10
    0000000e: 	je	.Ltmp343 # Offset: 14
    00000014: 	leaq	-0x2(%rdx), %rsi
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdx, %r9
    0000001c: 	movq	%rsi, %r11
    0000001f: 	shrq	%r11
    00000022: 	leaq	0x1(%r11), %rbx
    00000026: 	cmpq	$0xd, %rsi
    0000002a: 	jbe	.Ltmp344 # Offset: 42
    00000030: 	movq	%rbx, %rdx
    00000033: 	xorl	%eax, %eax
    00000035: 	pxor	%xmm8, %xmm8
    0000003a: 	shrq	$0x3, %rdx
    0000003e: 	shlq	$0x5, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp345:
    00000048: 	movdqu	(%rdi,%rax), %xmm0
    0000004d: 	movdqu	(%rcx,%rax), %xmm2
    00000052: 	movdqu	0x10(%rdi,%rax), %xmm7
    00000058: 	movdqu	0x10(%rcx,%rax), %xmm5
    0000005e: 	addq	$0x20, %rax
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	movdqa	%xmm2, %xmm3
    0000006a: 	movdqa	%xmm0, %xmm6
    0000006e: 	punpcklwd	%xmm7, %xmm1
    00000072: 	movdqa	%xmm2, %xmm4
    00000076: 	punpcklwd	%xmm5, %xmm3
    0000007a: 	punpckhwd	%xmm7, %xmm6
    0000007e: 	punpckhwd	%xmm5, %xmm4
    00000082: 	movdqa	%xmm1, %xmm10
    00000087: 	movdqa	%xmm3, %xmm9
    0000008c: 	punpcklwd	%xmm7, %xmm0
    00000090: 	punpcklwd	%xmm5, %xmm2
    00000094: 	punpckhwd	%xmm6, %xmm10
    00000099: 	punpckhwd	%xmm4, %xmm9
    0000009e: 	punpcklwd	%xmm6, %xmm1
    000000a2: 	punpcklwd	%xmm4, %xmm3
    000000a6: 	punpcklwd	%xmm6, %xmm0
    000000aa: 	punpcklwd	%xmm4, %xmm2
    000000ae: 	punpcklwd	%xmm10, %xmm1
    000000b3: 	punpcklwd	%xmm9, %xmm3
    000000b8: 	punpckhwd	%xmm10, %xmm0
    000000bd: 	punpckhwd	%xmm9, %xmm2
    000000c2: 	pmullw	%xmm3, %xmm1
    000000c6: 	pmullw	%xmm2, %xmm0
    000000ca: 	paddw	%xmm0, %xmm1
    000000ce: 	paddw	%xmm1, %xmm8
    000000d3: 	cmpq	%rdx, %rax
    000000d6: 	jne	.Ltmp345 # Offset: 214
    000000dc: 	movdqa	%xmm8, %xmm0
    000000e1: 	movq	%rbx, %rdx
    000000e4: 	psrldq	$0x8, %xmm0
    000000e9: 	andq	$-0x8, %rdx
    000000ed: 	paddw	%xmm0, %xmm8
    000000f2: 	leaq	(%rdx,%rdx), %r8
    000000f6: 	movdqa	%xmm8, %xmm0
    000000fb: 	psrldq	$0x4, %xmm0
    00000100: 	paddw	%xmm0, %xmm8
    00000105: 	movdqa	%xmm8, %xmm0
    0000010a: 	psrldq	$0x2, %xmm0
    0000010f: 	paddw	%xmm0, %xmm8
    00000114: 	pextrw	$0x0, %xmm8, %eax
    0000011a: 	cmpq	%rbx, %rdx
    0000011d: 	je	.Ltmp346 # Offset: 285
.Ltmp349:
    00000123: 	movq	%r11, %rbx
    00000126: 	subq	%rdx, %rbx
    00000129: 	leaq	0x1(%rbx), %r11
    0000012d: 	cmpq	$0x2, %rbx
    00000131: 	jbe	.Ltmp347 # Offset: 305
    00000137: 	shlq	$0x2, %rdx
    0000013b: 	leaq	(%rdi,%rdx), %rbx
    0000013f: 	addq	%rcx, %rdx
    00000142: 	movq	(%rbx), %xmm1
    00000146: 	movq	(%rdx), %xmm2
    0000014a: 	movq	0x8(%rbx), %xmm4
    0000014f: 	movq	0x8(%rdx), %xmm3
    00000154: 	movdqa	%xmm1, %xmm7
    00000158: 	movdqa	%xmm2, %xmm6
    0000015c: 	movdqa	%xmm1, %xmm0
    00000160: 	punpcklwd	%xmm4, %xmm7
    00000164: 	punpcklwd	%xmm3, %xmm6
    00000168: 	movdqa	%xmm2, %xmm5
    0000016c: 	pshufd	$0xe, %xmm7, %xmm7
    00000171: 	pshufd	$0xe, %xmm6, %xmm6
    00000176: 	punpcklwd	%xmm4, %xmm1
    0000017a: 	punpcklwd	%xmm3, %xmm2
    0000017e: 	punpcklwd	%xmm4, %xmm0
    00000182: 	punpcklwd	%xmm3, %xmm5
    00000186: 	punpcklwd	%xmm7, %xmm1
    0000018a: 	punpcklwd	%xmm6, %xmm2
    0000018e: 	punpcklwd	%xmm7, %xmm0
    00000192: 	punpcklwd	%xmm6, %xmm5
    00000196: 	pshufd	$0xe, %xmm1, %xmm1
    0000019b: 	pshufd	$0xe, %xmm2, %xmm2
    000001a0: 	pmullw	%xmm5, %xmm0
    000001a4: 	pmullw	%xmm2, %xmm1
    000001a8: 	paddw	%xmm1, %xmm0
    000001ac: 	pextrw	$0x0, %xmm0, %edx
    000001b1: 	pextrw	$0x1, %xmm0, %ebx
    000001b6: 	addl	%ebx, %edx
    000001b8: 	addl	%eax, %edx
    000001ba: 	pextrw	$0x2, %xmm0, %eax
    000001bf: 	addl	%eax, %edx
    000001c1: 	pextrw	$0x3, %xmm0, %eax
    000001c6: 	addl	%edx, %eax
    000001c8: 	movq	%r11, %rdx
    000001cb: 	andq	$-0x4, %rdx
    000001cf: 	leaq	(%r8,%rdx,2), %r8
    000001d3: 	cmpq	%rdx, %r11
    000001d6: 	je	.Ltmp346 # Offset: 470
.Ltmp347:
    000001d8: 	movzwl	(%rdi,%r8,2), %r11d
    000001dd: 	imulw	(%rcx,%r8,2), %r11w
    000001e3: 	leaq	(%r8,%r8), %rdx
    000001e7: 	addl	%eax, %r11d
    000001ea: 	movzwl	0x2(%rdi,%rdx), %eax
    000001ef: 	imulw	0x2(%rcx,%rdx), %ax
    000001f5: 	addl	%r11d, %eax
    000001f8: 	leaq	0x2(%r8), %r11
    000001fc: 	cmpq	%r10, %r11
    000001ff: 	jae	.Ltmp346 # Offset: 511
    00000201: 	movzwl	0x6(%rcx,%rdx), %r11d
    00000207: 	movzwl	0x4(%rcx,%rdx), %ebx
    0000020c: 	addq	$0x4, %r8
    00000210: 	imulw	0x6(%rdi,%rdx), %r11w
    00000217: 	imulw	0x4(%rdi,%rdx), %bx
    0000021d: 	addl	%ebx, %r11d
    00000220: 	addl	%r11d, %eax
    00000223: 	cmpq	%r8, %r10
    00000226: 	jbe	.Ltmp346 # Offset: 550
    00000228: 	movzwl	0xa(%rdi,%rdx), %r10d
    0000022e: 	imulw	0xa(%rcx,%rdx), %r10w
    00000235: 	movzwl	0x8(%rdi,%rdx), %r8d
    0000023b: 	imulw	0x8(%rcx,%rdx), %r8w
    00000242: 	movl	%r10d, %edx
    00000245: 	addl	%r8d, %edx
    00000248: 	addl	%edx, %eax
.Ltmp346:
    0000024a: 	andq	$-0x2, %rsi
    0000024e: 	addq	$0x2, %rsi
    00000252: 	cmpq	%rsi, %r9
    00000255: 	ja	.Ltmp348 # Offset: 597
    00000257: 	popq	%rbx
    00000258: 	retq # Offset: 600
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp348:
    00000260: 	addq	%rsi, %rsi
    00000263: 	popq	%rbx
    00000264: 	addq	%rsi, %rdi
    00000267: 	addq	%rsi, %rcx
    0000026a: 	movzwl	(%rdi), %edx
    0000026d: 	imulw	(%rcx), %dx
    00000271: 	addl	%edx, %eax
    00000273: 	retq # Offset: 627
    00000274: 	nopl	(%rax) # Size: 4
.Ltmp343:
    00000278: 	movzwl	(%rdi), %edx
    0000027b: 	imulw	(%rsi), %dx
    0000027f: 	xorl	%eax, %eax
    00000281: 	addl	%edx, %eax
    00000283: 	retq # Offset: 643
.Ltmp344:
    00000284: 	xorl	%edx, %edx
    00000286: 	xorl	%eax, %eax
    00000288: 	xorl	%r8d, %r8d
    0000028b: 	jmp	.Ltmp349 # Offset: 651
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKttET0_T_S3_m"

Binary Function "_Z14inner_product4IPKttET0_T_S3_m" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x12790
  Size        : 0x63e
  MaxSize     : 0x640
  Offset      : 0x12790
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r9
    00000007: 	pushq	%rbp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movq	%rdx, %rdi
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x3, %r9
    00000013: 	je	.Ltmp350 # Offset: 19
    00000019: 	leaq	-0x4(%rdx), %r8
    0000001d: 	movq	%r8, %rbx
    00000020: 	shrq	$0x2, %rbx
    00000024: 	leaq	0x1(%rbx), %rbp
    00000028: 	cmpq	$0x1b, %r8
    0000002c: 	jbe	.Ltmp351 # Offset: 44
    00000032: 	movq	%rbp, %r10
    00000035: 	pxor	%xmm6, %xmm6
    00000039: 	movq	%rcx, %rax
    0000003c: 	movq	%rsi, %rdx
    0000003f: 	shrq	$0x3, %r10
    00000043: 	movaps	%xmm6, -0x48(%rsp)
    00000048: 	shlq	$0x6, %r10
    0000004c: 	addq	%rcx, %r10
    0000004f: 	nop # Size: 1
.Ltmp352:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	addq	$0x40, %rdx
    00000061: 	movdqu	-0x20(%rax), %xmm6
    00000066: 	movdqu	-0x10(%rax), %xmm3
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	movdqa	%xmm0, %xmm2
    00000073: 	punpcklwd	%xmm4, %xmm0
    00000077: 	movdqu	-0x30(%rdx), %xmm7
    0000007c: 	punpcklwd	%xmm4, %xmm1
    00000080: 	punpckhwd	%xmm4, %xmm2
    00000084: 	movdqa	%xmm6, %xmm8
    00000089: 	movdqu	-0x10(%rdx), %xmm9
    0000008f: 	movdqa	%xmm1, %xmm5
    00000093: 	punpcklwd	%xmm3, %xmm8
    00000098: 	punpcklwd	%xmm2, %xmm1
    0000009c: 	punpckhwd	%xmm2, %xmm5
    000000a0: 	punpcklwd	%xmm2, %xmm0
    000000a4: 	movdqa	%xmm6, %xmm2
    000000a8: 	punpckhwd	%xmm3, %xmm2
    000000ac: 	movdqa	%xmm8, %xmm4
    000000b1: 	punpcklwd	%xmm3, %xmm6
    000000b5: 	punpckhwd	%xmm2, %xmm4
    000000b9: 	punpcklwd	%xmm2, %xmm8
    000000be: 	punpcklwd	%xmm2, %xmm6
    000000c2: 	movdqu	-0x40(%rdx), %xmm2
    000000c7: 	punpcklwd	%xmm5, %xmm1
    000000cb: 	punpckhwd	%xmm5, %xmm0
    000000cf: 	movdqu	-0x20(%rdx), %xmm5
    000000d4: 	punpckhwd	%xmm4, %xmm6
    000000d8: 	movdqa	%xmm2, %xmm3
    000000dc: 	punpcklwd	%xmm4, %xmm8
    000000e1: 	movdqa	%xmm2, %xmm4
    000000e5: 	punpcklwd	%xmm7, %xmm3
    000000e9: 	punpckhwd	%xmm7, %xmm4
    000000ed: 	punpcklwd	%xmm7, %xmm2
    000000f1: 	movdqa	%xmm3, %xmm10
    000000f6: 	movdqa	%xmm5, %xmm7
    000000fa: 	punpcklwd	%xmm4, %xmm3
    000000fe: 	punpckhwd	%xmm4, %xmm10
    00000103: 	punpcklwd	%xmm9, %xmm7
    00000108: 	punpcklwd	%xmm4, %xmm2
    0000010c: 	movdqa	%xmm5, %xmm4
    00000110: 	punpcklwd	%xmm10, %xmm3
    00000115: 	punpckhwd	%xmm10, %xmm2
    0000011a: 	punpckhwd	%xmm9, %xmm4
    0000011f: 	movdqa	%xmm7, %xmm10
    00000124: 	punpcklwd	%xmm9, %xmm5
    00000129: 	punpckhwd	%xmm4, %xmm10
    0000012e: 	punpcklwd	%xmm4, %xmm7
    00000132: 	punpcklwd	%xmm4, %xmm5
    00000136: 	punpcklwd	%xmm10, %xmm7
    0000013b: 	movdqa	%xmm1, %xmm9
    00000140: 	movdqa	%xmm3, %xmm4
    00000144: 	movdqa	%xmm1, %xmm12
    00000149: 	punpcklwd	%xmm8, %xmm9
    0000014e: 	movdqa	%xmm3, %xmm11
    00000153: 	punpcklwd	%xmm7, %xmm4
    00000157: 	punpckhwd	%xmm8, %xmm12
    0000015c: 	punpckhwd	%xmm7, %xmm11
    00000161: 	movdqa	%xmm9, %xmm15
    00000166: 	movdqa	%xmm4, %xmm14
    0000016b: 	punpcklwd	%xmm12, %xmm9
    00000170: 	punpckhwd	%xmm11, %xmm14
    00000175: 	punpckhwd	%xmm12, %xmm15
    0000017a: 	punpcklwd	%xmm11, %xmm4
    0000017f: 	punpcklwd	%xmm14, %xmm4
    00000184: 	punpcklwd	%xmm15, %xmm9
    00000189: 	punpckhwd	%xmm10, %xmm5
    0000018e: 	movaps	%xmm14, -0x38(%rsp)
    00000194: 	pmullw	%xmm4, %xmm9
    00000199: 	movdqa	%xmm0, %xmm4
    0000019d: 	movdqa	%xmm0, %xmm10
    000001a2: 	punpcklwd	%xmm6, %xmm4
    000001a6: 	punpckhwd	%xmm6, %xmm10
    000001ab: 	movdqa	%xmm2, %xmm14
    000001b0: 	movdqa	%xmm4, %xmm13
    000001b5: 	punpckhwd	%xmm5, %xmm14
    000001ba: 	punpcklwd	%xmm10, %xmm4
    000001bf: 	punpckhwd	%xmm10, %xmm13
    000001c4: 	punpcklwd	%xmm8, %xmm1
    000001c9: 	punpcklwd	%xmm7, %xmm3
    000001cd: 	movaps	%xmm13, -0x18(%rsp)
    000001d3: 	punpcklwd	%xmm13, %xmm4
    000001d8: 	movdqa	%xmm14, %xmm13
    000001dd: 	movdqa	%xmm2, %xmm14
    000001e2: 	punpcklwd	%xmm5, %xmm14
    000001e7: 	punpcklwd	%xmm6, %xmm0
    000001eb: 	punpcklwd	%xmm5, %xmm2
    000001ef: 	movaps	%xmm9, -0x28(%rsp)
    000001f5: 	punpcklwd	%xmm12, %xmm1
    000001fa: 	movdqa	%xmm14, %xmm9
    000001ff: 	punpcklwd	%xmm11, %xmm3
    00000204: 	punpckhwd	%xmm13, %xmm14
    00000209: 	punpcklwd	%xmm10, %xmm0
    0000020e: 	punpcklwd	%xmm13, %xmm2
    00000213: 	punpckhwd	-0x38(%rsp), %xmm3
    00000219: 	punpckhwd	-0x18(%rsp), %xmm0
    0000021f: 	punpckhwd	%xmm15, %xmm1
    00000224: 	punpckhwd	%xmm14, %xmm2
    00000229: 	punpcklwd	%xmm13, %xmm9
    0000022e: 	pmullw	%xmm3, %xmm1
    00000232: 	pmullw	%xmm2, %xmm0
    00000236: 	punpcklwd	%xmm14, %xmm9
    0000023b: 	pmullw	%xmm9, %xmm4
    00000240: 	paddw	-0x28(%rsp), %xmm4
    00000246: 	paddw	%xmm0, %xmm1
    0000024a: 	paddw	%xmm1, %xmm4
    0000024e: 	paddw	-0x48(%rsp), %xmm4
    00000254: 	movaps	%xmm4, -0x48(%rsp)
    00000259: 	cmpq	%rax, %r10
    0000025c: 	jne	.Ltmp352 # Offset: 604
    00000262: 	movdqa	%xmm4, %xmm0
    00000266: 	movq	%rbp, %r11
    00000269: 	psrldq	$0x8, %xmm0
    0000026e: 	andq	$-0x8, %r11
    00000272: 	paddw	%xmm4, %xmm0
    00000276: 	leaq	(,%r11,4), %rdx
    0000027e: 	movdqa	%xmm0, %xmm1
    00000282: 	psrldq	$0x4, %xmm1
    00000287: 	paddw	%xmm1, %xmm0
    0000028b: 	movdqa	%xmm0, %xmm1
    0000028f: 	psrldq	$0x2, %xmm1
    00000294: 	paddw	%xmm1, %xmm0
    00000298: 	pextrw	$0x0, %xmm0, %eax
    0000029d: 	cmpq	%rbp, %r11
    000002a0: 	je	.Ltmp353 # Offset: 672
.Ltmp357:
    000002a6: 	subq	%r11, %rbx
    000002a9: 	leaq	0x1(%rbx), %r10
    000002ad: 	cmpq	$0x2, %rbx
    000002b1: 	jbe	.Ltmp354 # Offset: 689
    000002b7: 	shlq	$0x3, %r11
    000002bb: 	leaq	(%rcx,%r11), %rbx
    000002bf: 	addq	%rsi, %r11
    000002c2: 	movq	(%rbx), %xmm0
    000002c6: 	movq	0x8(%rbx), %xmm3
    000002cb: 	movq	0x10(%rbx), %xmm9
    000002d1: 	movq	0x18(%rbx), %xmm2
    000002d6: 	movdqa	%xmm0, %xmm4
    000002da: 	movdqa	%xmm0, %xmm1
    000002de: 	punpcklwd	%xmm3, %xmm0
    000002e2: 	movq	0x8(%r11), %xmm6
    000002e8: 	punpcklwd	%xmm3, %xmm4
    000002ec: 	punpcklwd	%xmm3, %xmm1
    000002f0: 	movdqa	%xmm9, %xmm10
    000002f5: 	movdqa	%xmm9, %xmm3
    000002fa: 	punpcklwd	%xmm2, %xmm10
    000002ff: 	punpcklwd	%xmm2, %xmm9
    00000304: 	punpcklwd	%xmm2, %xmm3
    00000308: 	movq	(%r11), %xmm2
    0000030d: 	pshufd	$0xe, %xmm4, %xmm4
    00000312: 	punpcklwd	%xmm4, %xmm1
    00000316: 	pshufd	$0xe, %xmm3, %xmm3
    0000031b: 	punpcklwd	%xmm4, %xmm0
    0000031f: 	movq	0x10(%r11), %xmm4
    00000325: 	movdqa	%xmm2, %xmm7
    00000329: 	movdqa	%xmm2, %xmm5
    0000032d: 	punpcklwd	%xmm3, %xmm10
    00000332: 	punpcklwd	%xmm6, %xmm7
    00000336: 	punpcklwd	%xmm3, %xmm9
    0000033b: 	punpcklwd	%xmm6, %xmm5
    0000033f: 	movq	0x18(%r11), %xmm3
    00000345: 	pshufd	$0xe, %xmm7, %xmm7
    0000034a: 	punpcklwd	%xmm6, %xmm2
    0000034e: 	movdqa	%xmm4, %xmm6
    00000352: 	punpcklwd	%xmm7, %xmm5
    00000356: 	punpcklwd	%xmm7, %xmm2
    0000035a: 	movdqa	%xmm4, %xmm7
    0000035e: 	punpcklwd	%xmm3, %xmm7
    00000362: 	punpcklwd	%xmm3, %xmm6
    00000366: 	punpcklwd	%xmm3, %xmm4
    0000036a: 	pshufd	$0xe, %xmm7, %xmm7
    0000036f: 	movdqa	%xmm1, %xmm14
    00000374: 	movdqa	%xmm5, %xmm13
    00000379: 	punpcklwd	%xmm7, %xmm6
    0000037d: 	pshufd	$0xe, %xmm0, %xmm0
    00000382: 	pshufd	$0xe, %xmm2, %xmm2
    00000387: 	punpcklwd	%xmm7, %xmm4
    0000038b: 	movdqa	%xmm1, %xmm3
    0000038f: 	movdqa	%xmm5, %xmm7
    00000393: 	punpcklwd	%xmm10, %xmm14
    00000398: 	punpcklwd	%xmm6, %xmm13
    0000039d: 	pshufd	$0xe, %xmm9, %xmm9
    000003a3: 	pshufd	$0xe, %xmm4, %xmm4
    000003a8: 	pshufd	$0xe, %xmm14, %xmm14
    000003ae: 	pshufd	$0xe, %xmm13, %xmm13
    000003b4: 	movdqa	%xmm0, %xmm12
    000003b9: 	movdqa	%xmm2, %xmm11
    000003be: 	punpcklwd	%xmm10, %xmm3
    000003c3: 	punpcklwd	%xmm6, %xmm7
    000003c7: 	punpcklwd	%xmm14, %xmm3
    000003cc: 	punpcklwd	%xmm9, %xmm12
    000003d1: 	punpcklwd	%xmm13, %xmm7
    000003d6: 	punpcklwd	%xmm4, %xmm11
    000003db: 	pshufd	$0xe, %xmm12, %xmm12
    000003e1: 	pmullw	%xmm7, %xmm3
    000003e5: 	pshufd	$0xe, %xmm11, %xmm11
    000003eb: 	movdqa	%xmm0, %xmm7
    000003ef: 	movdqa	%xmm2, %xmm8
    000003f4: 	punpcklwd	%xmm10, %xmm1
    000003f9: 	punpcklwd	%xmm6, %xmm5
    000003fd: 	punpcklwd	%xmm9, %xmm0
    00000402: 	punpcklwd	%xmm4, %xmm2
    00000406: 	punpcklwd	%xmm9, %xmm7
    0000040b: 	punpcklwd	%xmm4, %xmm8
    00000410: 	punpcklwd	%xmm14, %xmm1
    00000415: 	punpcklwd	%xmm13, %xmm5
    0000041a: 	punpcklwd	%xmm12, %xmm0
    0000041f: 	punpcklwd	%xmm11, %xmm2
    00000424: 	punpcklwd	%xmm12, %xmm7
    00000429: 	punpcklwd	%xmm11, %xmm8
    0000042e: 	pshufd	$0xe, %xmm1, %xmm1
    00000433: 	pshufd	$0xe, %xmm5, %xmm5
    00000438: 	pmullw	%xmm8, %xmm7
    0000043d: 	pshufd	$0xe, %xmm0, %xmm0
    00000442: 	pshufd	$0xe, %xmm2, %xmm2
    00000447: 	pmullw	%xmm5, %xmm1
    0000044b: 	pmullw	%xmm2, %xmm0
    0000044f: 	paddw	%xmm7, %xmm3
    00000453: 	paddw	%xmm0, %xmm1
    00000457: 	paddw	%xmm3, %xmm1
    0000045b: 	pextrw	$0x0, %xmm1, %r11d
    00000461: 	pextrw	$0x1, %xmm1, %ebx
    00000466: 	addl	%ebx, %r11d
    00000469: 	addl	%eax, %r11d
    0000046c: 	pextrw	$0x2, %xmm1, %eax
    00000471: 	addl	%eax, %r11d
    00000474: 	pextrw	$0x3, %xmm1, %eax
    00000479: 	addl	%r11d, %eax
    0000047c: 	movq	%r10, %r11
    0000047f: 	andq	$-0x4, %r11
    00000483: 	leaq	(%rdx,%r11,4), %rdx
    00000487: 	cmpq	%r11, %r10
    0000048a: 	je	.Ltmp353 # Offset: 1162
.Ltmp354:
    00000490: 	movzwl	(%rcx,%rdx,2), %r10d
    00000495: 	imulw	(%rsi,%rdx,2), %r10w
    0000049b: 	leaq	(%rdx,%rdx), %r11
    0000049f: 	addl	%eax, %r10d
    000004a2: 	movzwl	0x2(%rcx,%r11), %eax
    000004a8: 	imulw	0x2(%rsi,%r11), %ax
    000004af: 	addl	%eax, %r10d
    000004b2: 	movzwl	0x4(%rcx,%r11), %eax
    000004b8: 	imulw	0x4(%rsi,%r11), %ax
    000004bf: 	addl	%eax, %r10d
    000004c2: 	movzwl	0x6(%rsi,%r11), %eax
    000004c8: 	imulw	0x6(%rcx,%r11), %ax
    000004cf: 	addl	%r10d, %eax
    000004d2: 	leaq	0x4(%rdx), %r10
    000004d6: 	cmpq	%r10, %r9
    000004d9: 	jbe	.Ltmp353 # Offset: 1241
    000004df: 	movzwl	0xc(%rsi,%r11), %r10d
    000004e5: 	movzwl	0xa(%rsi,%r11), %ebx
    000004eb: 	addq	$0x8, %rdx
    000004ef: 	imulw	0xa(%rcx,%r11), %bx
    000004f6: 	imulw	0xc(%rcx,%r11), %r10w
    000004fd: 	addl	%ebx, %r10d
    00000500: 	movzwl	0x8(%rsi,%r11), %ebx
    00000506: 	imulw	0x8(%rcx,%r11), %bx
    0000050d: 	addl	%ebx, %r10d
    00000510: 	movzwl	0xe(%rcx,%r11), %ebx
    00000516: 	imulw	0xe(%rsi,%r11), %bx
    0000051d: 	addl	%ebx, %r10d
    00000520: 	addl	%r10d, %eax
    00000523: 	cmpq	%rdx, %r9
    00000526: 	jbe	.Ltmp353 # Offset: 1318
    00000528: 	movzwl	0x12(%rcx,%r11), %edx
    0000052e: 	movzwl	0x14(%rcx,%r11), %r9d
    00000534: 	imulw	0x12(%rsi,%r11), %dx
    0000053b: 	imulw	0x14(%rsi,%r11), %r9w
    00000542: 	addl	%r9d, %edx
    00000545: 	movzwl	0x10(%rcx,%r11), %r9d
    0000054b: 	imulw	0x10(%rsi,%r11), %r9w
    00000552: 	addl	%r9d, %edx
    00000555: 	movzwl	0x16(%rcx,%r11), %r9d
    0000055b: 	imulw	0x16(%rsi,%r11), %r9w
    00000562: 	addl	%r9d, %edx
    00000565: 	addl	%edx, %eax
.Ltmp353:
    00000567: 	andq	$-0x4, %r8
    0000056b: 	leaq	0x4(%r8), %rdx
    0000056f: 	cmpq	%rdx, %rdi
    00000572: 	jbe	.Ltmp355 # Offset: 1394
    00000578: 	addq	$0x5, %r8
    0000057c: 	movq	%rdi, %r10
    0000057f: 	movl	$0x1, %r9d
    00000585: 	subq	%rdx, %r10
    00000588: 	cmpq	%r8, %rdi
    0000058b: 	cmovaeq	%r10, %r9
    0000058f: 	subq	$0x1, %r10
    00000593: 	cmpq	$0x2, %r10
    00000597: 	jbe	.Ltmp356 # Offset: 1431
    00000599: 	cmpq	%r8, %rdi
    0000059c: 	jb	.Ltmp356 # Offset: 1436
    0000059e: 	movq	(%rsi,%rdx,2), %xmm0
    000005a3: 	movq	(%rcx,%rdx,2), %xmm1
    000005a8: 	pmullw	%xmm1, %xmm0
    000005ac: 	pextrw	$0x1, %xmm0, %r8d
    000005b2: 	pextrw	$0x0, %xmm0, %r10d
    000005b8: 	addl	%r10d, %r8d
    000005bb: 	addl	%eax, %r8d
    000005be: 	pextrw	$0x2, %xmm0, %eax
    000005c3: 	addl	%eax, %r8d
    000005c6: 	pextrw	$0x3, %xmm0, %eax
    000005cb: 	addl	%r8d, %eax
    000005ce: 	movq	%r9, %r8
    000005d1: 	andq	$-0x4, %r8
    000005d5: 	addq	%r8, %rdx
    000005d8: 	cmpq	%r9, %r8
    000005db: 	je	.Ltmp355 # Offset: 1499
.Ltmp356:
    000005dd: 	movzwl	(%rcx,%rdx,2), %r8d
    000005e2: 	imulw	(%rsi,%rdx,2), %r8w
    000005e8: 	leaq	(%rdx,%rdx), %r9
    000005ec: 	addq	$0x1, %rdx
    000005f0: 	addl	%r8d, %eax
    000005f3: 	cmpq	%rdi, %rdx
    000005f6: 	jae	.Ltmp355 # Offset: 1526
.Ltmp358:
    000005f8: 	movzwl	0x2(%rsi,%r9), %r8d
    000005fe: 	imulw	0x2(%rcx,%r9), %r8w
    00000605: 	addq	$0x1, %rdx
    00000609: 	addl	%r8d, %eax
    0000060c: 	cmpq	%rdi, %rdx
    0000060f: 	jae	.Ltmp355 # Offset: 1551
    00000611: 	movzwl	0x4(%rsi,%r9), %edx
    00000617: 	imulw	0x4(%rcx,%r9), %dx
    0000061e: 	addl	%edx, %eax
.Ltmp355:
    00000620: 	popq	%rbx
    00000621: 	popq	%rbp
    00000622: 	retq # Offset: 1570
.Ltmp351:
    00000623: 	xorl	%r11d, %r11d
    00000626: 	xorl	%eax, %eax
    00000628: 	xorl	%edx, %edx
    0000062a: 	jmp	.Ltmp357 # Offset: 1578
    0000062f: 	nop # Size: 1
.Ltmp350:
    00000630: 	movzwl	(%rcx), %eax
    00000633: 	movl	$0x1, %edx
    00000638: 	imulw	(%rsi), %ax
    0000063c: 	jmp	.Ltmp358 # Offset: 1596
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKttET0_T_S3_m"

Binary Function "_Z14inner_product5IPKttET0_T_S3_m" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x12dd0
  Size        : 0x1032
  MaxSize     : 0x1040
  Offset      : 0x12dd0
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %rcx
    00000009: 	movq	%rdx, %rdi
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xe8, %rsp
    00000015: 	subq	$0x7, %rdx
    00000019: 	je	.Ltmp359 # Offset: 25
    0000001f: 	leaq	-0x8(%rdi), %r8
    00000023: 	movq	%r8, %rbx
    00000026: 	shrq	$0x3, %rbx
    0000002a: 	leaq	0x1(%rbx), %rbp
    0000002e: 	cmpq	$0x37, %r8
    00000032: 	jbe	.Ltmp360 # Offset: 50
    00000038: 	movq	%rbp, %r10
    0000003b: 	pxor	%xmm5, %xmm5
    0000003f: 	movq	%rcx, %rax
    00000042: 	movq	%rsi, %r9
    00000045: 	shrq	$0x3, %r10
    00000049: 	movaps	%xmm5, -0x18(%rsp)
    0000004e: 	shlq	$0x7, %r10
    00000052: 	addq	%rcx, %r10
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp361:
    00000058: 	movdqu	(%rax), %xmm0
    0000005c: 	movdqu	0x10(%rax), %xmm7
    00000061: 	subq	$-0x80, %rax
    00000065: 	subq	$-0x80, %r9
    00000069: 	movdqu	-0x60(%rax), %xmm5
    0000006e: 	movdqu	-0x50(%rax), %xmm6
    00000073: 	movdqa	%xmm0, %xmm2
    00000077: 	movdqa	%xmm0, %xmm4
    0000007b: 	movdqu	-0x40(%rax), %xmm3
    00000080: 	punpcklwd	%xmm7, %xmm0
    00000084: 	punpcklwd	%xmm7, %xmm2
    00000088: 	punpckhwd	%xmm7, %xmm4
    0000008c: 	movdqa	%xmm5, %xmm7
    00000090: 	movdqu	-0x30(%rax), %xmm8
    00000096: 	movdqa	%xmm2, %xmm10
    0000009b: 	punpcklwd	%xmm6, %xmm7
    0000009f: 	punpcklwd	%xmm4, %xmm2
    000000a3: 	movdqu	-0x20(%rax), %xmm1
    000000a8: 	punpckhwd	%xmm4, %xmm10
    000000ad: 	punpcklwd	%xmm4, %xmm0
    000000b1: 	movdqa	%xmm5, %xmm4
    000000b5: 	movdqu	-0x10(%rax), %xmm9
    000000bb: 	punpckhwd	%xmm6, %xmm4
    000000bf: 	punpcklwd	%xmm10, %xmm2
    000000c4: 	punpckhwd	%xmm10, %xmm0
    000000c9: 	movdqu	-0x60(%r9), %xmm11
    000000cf: 	movdqa	%xmm7, %xmm10
    000000d4: 	punpcklwd	%xmm6, %xmm5
    000000d8: 	movdqa	%xmm3, %xmm6
    000000dc: 	movdqu	-0x20(%r9), %xmm15
    000000e2: 	punpckhwd	%xmm4, %xmm10
    000000e7: 	punpcklwd	%xmm8, %xmm6
    000000ec: 	punpcklwd	%xmm4, %xmm7
    000000f0: 	punpcklwd	%xmm4, %xmm5
    000000f4: 	movdqa	%xmm3, %xmm4
    000000f8: 	punpcklwd	%xmm10, %xmm7
    000000fd: 	punpckhwd	%xmm10, %xmm5
    00000102: 	punpckhwd	%xmm8, %xmm4
    00000107: 	movdqa	%xmm6, %xmm10
    0000010c: 	punpcklwd	%xmm8, %xmm3
    00000111: 	punpckhwd	%xmm4, %xmm10
    00000116: 	punpcklwd	%xmm4, %xmm6
    0000011a: 	punpcklwd	%xmm4, %xmm3
    0000011e: 	movdqa	%xmm1, %xmm4
    00000122: 	movdqa	%xmm1, %xmm8
    00000127: 	punpcklwd	%xmm9, %xmm4
    0000012c: 	punpckhwd	%xmm9, %xmm8
    00000131: 	punpcklwd	%xmm10, %xmm6
    00000136: 	punpckhwd	%xmm10, %xmm3
    0000013b: 	punpcklwd	%xmm9, %xmm1
    00000140: 	movdqa	%xmm4, %xmm10
    00000145: 	punpckhwd	%xmm8, %xmm10
    0000014a: 	punpcklwd	%xmm8, %xmm4
    0000014f: 	punpcklwd	%xmm8, %xmm1
    00000154: 	punpcklwd	%xmm10, %xmm4
    00000159: 	punpckhwd	%xmm10, %xmm1
    0000015e: 	movdqa	%xmm2, %xmm10
    00000163: 	punpcklwd	%xmm7, %xmm10
    00000168: 	movdqa	%xmm2, %xmm8
    0000016d: 	movdqa	%xmm6, %xmm13
    00000172: 	punpckhwd	%xmm7, %xmm8
    00000177: 	punpcklwd	%xmm4, %xmm13
    0000017c: 	movdqa	%xmm10, %xmm9
    00000181: 	punpcklwd	%xmm7, %xmm2
    00000185: 	movdqa	%xmm6, %xmm7
    00000189: 	punpckhwd	%xmm8, %xmm9
    0000018e: 	punpckhwd	%xmm4, %xmm7
    00000192: 	punpcklwd	%xmm8, %xmm10
    00000197: 	punpcklwd	%xmm8, %xmm2
    0000019c: 	punpcklwd	%xmm4, %xmm6
    000001a0: 	movdqa	%xmm13, %xmm8
    000001a5: 	movdqa	%xmm0, %xmm4
    000001a9: 	punpckhwd	%xmm7, %xmm8
    000001ae: 	punpcklwd	%xmm7, %xmm6
    000001b2: 	punpckhwd	%xmm5, %xmm4
    000001b6: 	punpckhwd	%xmm8, %xmm6
    000001bb: 	punpcklwd	%xmm7, %xmm13
    000001c0: 	movdqa	%xmm3, %xmm14
    000001c5: 	movaps	%xmm6, -0x78(%rsp)
    000001ca: 	movdqa	%xmm4, %xmm6
    000001ce: 	movdqa	%xmm0, %xmm4
    000001d2: 	punpcklwd	%xmm5, %xmm0
    000001d6: 	punpcklwd	%xmm5, %xmm4
    000001da: 	movdqa	%xmm3, %xmm5
    000001de: 	punpcklwd	%xmm1, %xmm14
    000001e3: 	movdqa	%xmm4, %xmm7
    000001e7: 	punpckhwd	%xmm1, %xmm5
    000001eb: 	punpcklwd	%xmm6, %xmm4
    000001ef: 	punpckhwd	%xmm6, %xmm7
    000001f3: 	punpcklwd	%xmm6, %xmm0
    000001f7: 	punpcklwd	%xmm1, %xmm3
    000001fb: 	movdqu	-0x80(%r9), %xmm1
    00000201: 	punpcklwd	%xmm7, %xmm4
    00000205: 	punpckhwd	%xmm7, %xmm0
    00000209: 	movdqu	-0x70(%r9), %xmm7
    0000020f: 	movdqa	%xmm14, %xmm6
    00000214: 	movaps	%xmm0, -0x68(%rsp)
    00000219: 	movdqa	%xmm1, %xmm0
    0000021d: 	punpckhwd	%xmm5, %xmm6
    00000221: 	punpcklwd	%xmm5, %xmm14
    00000226: 	punpckhwd	%xmm7, %xmm0
    0000022a: 	punpcklwd	%xmm5, %xmm3
    0000022e: 	punpcklwd	%xmm6, %xmm14
    00000233: 	movdqu	-0x40(%r9), %xmm5
    00000239: 	punpckhwd	%xmm6, %xmm3
    0000023d: 	movdqa	%xmm0, %xmm6
    00000241: 	movdqa	%xmm1, %xmm0
    00000245: 	movaps	%xmm14, -0x58(%rsp)
    0000024b: 	punpcklwd	%xmm7, %xmm0
    0000024f: 	punpcklwd	%xmm9, %xmm10
    00000254: 	punpckhwd	%xmm9, %xmm2
    00000259: 	movaps	%xmm3, -0x48(%rsp)
    0000025e: 	movdqu	-0x50(%r9), %xmm9
    00000264: 	movdqa	%xmm0, %xmm3
    00000268: 	punpcklwd	%xmm7, %xmm1
    0000026c: 	punpckhwd	%xmm6, %xmm0
    00000270: 	punpcklwd	%xmm6, %xmm3
    00000274: 	punpcklwd	%xmm6, %xmm1
    00000278: 	movdqa	%xmm11, %xmm12
    0000027d: 	movdqu	-0x30(%r9), %xmm14
    00000283: 	punpcklwd	%xmm0, %xmm3
    00000287: 	punpckhwd	%xmm0, %xmm1
    0000028b: 	punpcklwd	%xmm9, %xmm12
    00000290: 	movaps	%xmm10, -0x8(%rsp)
    00000296: 	movdqa	%xmm11, %xmm0
    0000029b: 	movdqa	%xmm12, %xmm7
    000002a0: 	punpcklwd	%xmm9, %xmm11
    000002a5: 	punpckhwd	%xmm9, %xmm0
    000002aa: 	movdqa	%xmm15, %xmm9
    000002af: 	punpcklwd	%xmm8, %xmm13
    000002b4: 	punpckhwd	%xmm0, %xmm7
    000002b8: 	punpcklwd	%xmm0, %xmm12
    000002bd: 	punpcklwd	%xmm0, %xmm11
    000002c2: 	movdqa	%xmm5, %xmm0
    000002c6: 	punpcklwd	%xmm7, %xmm12
    000002cb: 	punpckhwd	%xmm7, %xmm11
    000002d0: 	punpcklwd	%xmm14, %xmm0
    000002d5: 	movdqa	%xmm5, %xmm7
    000002d9: 	punpcklwd	%xmm14, %xmm5
    000002de: 	punpckhwd	%xmm14, %xmm7
    000002e3: 	movdqa	%xmm0, %xmm6
    000002e7: 	punpcklwd	%xmm7, %xmm6
    000002eb: 	punpckhwd	%xmm7, %xmm0
    000002ef: 	punpcklwd	%xmm7, %xmm5
    000002f3: 	punpcklwd	%xmm0, %xmm6
    000002f7: 	punpckhwd	%xmm0, %xmm5
    000002fb: 	movdqu	-0x10(%r9), %xmm0
    00000301: 	movdqa	%xmm15, %xmm7
    00000306: 	punpcklwd	%xmm0, %xmm9
    0000030b: 	punpckhwd	%xmm0, %xmm7
    0000030f: 	movdqa	%xmm9, %xmm0
    00000314: 	punpcklwd	%xmm7, %xmm9
    00000319: 	punpckhwd	%xmm7, %xmm0
    0000031d: 	punpcklwd	%xmm0, %xmm9
    00000322: 	movdqa	%xmm0, %xmm14
    00000327: 	movdqu	-0x10(%r9), %xmm0
    0000032d: 	punpcklwd	%xmm0, %xmm15
    00000332: 	movdqa	%xmm3, %xmm0
    00000336: 	movdqa	%xmm15, %xmm8
    0000033b: 	punpckhwd	%xmm12, %xmm0
    00000340: 	punpcklwd	%xmm7, %xmm8
    00000345: 	movdqa	%xmm3, %xmm7
    00000349: 	punpcklwd	%xmm12, %xmm3
    0000034e: 	punpcklwd	%xmm12, %xmm7
    00000353: 	punpcklwd	%xmm0, %xmm3
    00000357: 	movdqa	%xmm6, %xmm12
    0000035c: 	movdqa	%xmm7, %xmm15
    00000361: 	punpcklwd	%xmm0, %xmm7
    00000365: 	punpckhwd	%xmm9, %xmm12
    0000036a: 	punpckhwd	%xmm0, %xmm15
    0000036f: 	punpckhwd	%xmm14, %xmm8
    00000374: 	punpcklwd	%xmm15, %xmm7
    00000379: 	punpckhwd	%xmm15, %xmm3
    0000037e: 	movdqa	%xmm6, %xmm15
    00000383: 	punpcklwd	%xmm9, %xmm15
    00000388: 	punpcklwd	%xmm9, %xmm6
    0000038d: 	movdqa	%xmm1, %xmm9
    00000392: 	movdqa	%xmm15, %xmm0
    00000397: 	punpcklwd	%xmm11, %xmm9
    0000039c: 	punpcklwd	%xmm12, %xmm15
    000003a1: 	punpckhwd	%xmm12, %xmm0
    000003a6: 	punpcklwd	%xmm12, %xmm6
    000003ab: 	movdqa	%xmm1, %xmm12
    000003b0: 	punpckhwd	%xmm11, %xmm12
    000003b5: 	punpcklwd	%xmm0, %xmm15
    000003ba: 	punpckhwd	%xmm0, %xmm6
    000003be: 	punpcklwd	%xmm11, %xmm1
    000003c3: 	movdqa	%xmm9, %xmm0
    000003c8: 	punpcklwd	%xmm12, %xmm9
    000003cd: 	punpckhwd	%xmm12, %xmm0
    000003d2: 	punpcklwd	%xmm12, %xmm1
    000003d7: 	movdqa	%xmm5, %xmm12
    000003dc: 	punpcklwd	%xmm0, %xmm9
    000003e1: 	punpckhwd	%xmm0, %xmm1
    000003e5: 	movdqa	%xmm5, %xmm0
    000003e9: 	punpckhwd	%xmm8, %xmm0
    000003ee: 	punpcklwd	%xmm8, %xmm12
    000003f3: 	punpcklwd	%xmm8, %xmm5
    000003f8: 	movdqa	%xmm0, %xmm11
    000003fd: 	movdqa	%xmm10, %xmm8
    00000402: 	movdqa	%xmm12, %xmm0
    00000407: 	punpcklwd	%xmm13, %xmm10
    0000040c: 	punpckhwd	%xmm11, %xmm0
    00000411: 	punpckhwd	%xmm13, %xmm8
    00000416: 	punpcklwd	%xmm11, %xmm12
    0000041b: 	punpcklwd	%xmm11, %xmm5
    00000420: 	movdqa	%xmm10, %xmm14
    00000425: 	movaps	%xmm8, 0x8(%rsp)
    0000042b: 	movdqa	%xmm10, %xmm11
    00000430: 	punpcklwd	%xmm0, %xmm12
    00000435: 	punpckhwd	%xmm0, %xmm5
    00000439: 	punpckhwd	%xmm8, %xmm14
    0000043e: 	punpcklwd	%xmm8, %xmm11
    00000443: 	movdqa	%xmm7, %xmm0
    00000447: 	punpcklwd	%xmm15, %xmm0
    0000044c: 	movaps	%xmm14, 0x18(%rsp)
    00000452: 	punpcklwd	%xmm14, %xmm11
    00000457: 	movdqa	%xmm7, %xmm14
    0000045c: 	punpckhwd	%xmm15, %xmm14
    00000461: 	movdqa	%xmm0, %xmm8
    00000466: 	movdqa	%xmm0, %xmm10
    0000046b: 	punpckhwd	%xmm14, %xmm10
    00000470: 	punpcklwd	%xmm14, %xmm8
    00000475: 	movaps	%xmm14, 0x28(%rsp)
    0000047b: 	movdqa	-0x58(%rsp), %xmm14
    00000482: 	punpcklwd	%xmm10, %xmm8
    00000487: 	movdqa	%xmm4, %xmm0
    0000048b: 	movaps	%xmm10, 0x38(%rsp)
    00000491: 	punpcklwd	%xmm15, %xmm7
    00000496: 	pmullw	%xmm8, %xmm11
    0000049b: 	movdqa	%xmm4, %xmm8
    000004a0: 	punpcklwd	%xmm14, %xmm0
    000004a5: 	punpckhwd	%xmm14, %xmm8
    000004aa: 	movdqa	%xmm0, %xmm10
    000004af: 	movaps	%xmm8, -0x38(%rsp)
    000004b5: 	movdqa	-0x38(%rsp), %xmm14
    000004bc: 	movdqa	%xmm0, %xmm8
    000004c1: 	movdqa	%xmm9, %xmm0
    000004c6: 	punpcklwd	%xmm12, %xmm0
    000004cb: 	punpckhwd	%xmm14, %xmm10
    000004d0: 	punpcklwd	%xmm14, %xmm8
    000004d5: 	movdqa	%xmm9, %xmm14
    000004da: 	punpckhwd	%xmm12, %xmm14
    000004df: 	movaps	%xmm10, 0x48(%rsp)
    000004e5: 	punpcklwd	%xmm10, %xmm8
    000004ea: 	movdqa	%xmm0, %xmm10
    000004ef: 	movaps	%xmm14, -0x28(%rsp)
    000004f5: 	movdqa	%xmm0, %xmm14
    000004fa: 	punpcklwd	%xmm12, %xmm9
    000004ff: 	movdqa	-0x28(%rsp), %xmm0
    00000505: 	punpckhwd	%xmm0, %xmm10
    0000050a: 	punpcklwd	%xmm0, %xmm14
    0000050f: 	movdqa	%xmm11, %xmm0
    00000514: 	punpcklwd	%xmm10, %xmm14
    00000519: 	movaps	%xmm10, 0x58(%rsp)
    0000051f: 	movdqa	-0x78(%rsp), %xmm11
    00000526: 	punpcklwd	0x28(%rsp), %xmm7
    0000052c: 	pmullw	%xmm14, %xmm8
    00000531: 	punpckhwd	0x38(%rsp), %xmm7
    00000537: 	punpcklwd	-0x58(%rsp), %xmm4
    0000053d: 	punpcklwd	-0x28(%rsp), %xmm9
    00000544: 	punpcklwd	-0x38(%rsp), %xmm4
    0000054a: 	punpckhwd	0x58(%rsp), %xmm9
    00000551: 	punpckhwd	0x48(%rsp), %xmm4
    00000557: 	pmullw	%xmm9, %xmm4
    0000055c: 	paddw	%xmm8, %xmm0
    00000561: 	movdqa	%xmm2, %xmm8
    00000566: 	movaps	%xmm0, 0x68(%rsp)
    0000056b: 	movdqa	%xmm2, %xmm0
    0000056f: 	punpckhwd	%xmm11, %xmm8
    00000574: 	punpcklwd	-0x78(%rsp), %xmm2
    0000057a: 	punpcklwd	%xmm11, %xmm0
    0000057f: 	movdqa	%xmm8, %xmm14
    00000584: 	movdqa	%xmm3, %xmm11
    00000589: 	movdqa	%xmm0, %xmm8
    0000058e: 	movdqa	%xmm0, %xmm10
    00000593: 	movdqa	%xmm3, %xmm0
    00000597: 	movaps	%xmm14, 0x78(%rsp)
    0000059d: 	punpckhwd	%xmm14, %xmm10
    000005a2: 	punpcklwd	%xmm6, %xmm0
    000005a6: 	punpcklwd	%xmm14, %xmm8
    000005ab: 	punpckhwd	%xmm6, %xmm11
    000005b0: 	punpcklwd	%xmm10, %xmm8
    000005b5: 	movdqa	%xmm0, %xmm14
    000005ba: 	movaps	%xmm10, 0x88(%rsp)
    000005c3: 	movdqa	%xmm0, %xmm10
    000005c8: 	punpcklwd	%xmm11, %xmm14
    000005cd: 	movdqa	-0x68(%rsp), %xmm0
    000005d3: 	movaps	%xmm11, 0x98(%rsp)
    000005dc: 	punpckhwd	%xmm11, %xmm10
    000005e1: 	punpcklwd	0x78(%rsp), %xmm2
    000005e7: 	punpcklwd	%xmm6, %xmm3
    000005eb: 	punpcklwd	%xmm10, %xmm14
    000005f0: 	movdqa	%xmm0, %xmm11
    000005f5: 	movaps	%xmm10, 0xa8(%rsp)
    000005fe: 	punpckhwd	0x88(%rsp), %xmm2
    00000607: 	punpcklwd	0x98(%rsp), %xmm3
    00000610: 	pmullw	%xmm14, %xmm8
    00000615: 	punpckhwd	0xa8(%rsp), %xmm3
    0000061e: 	pmullw	%xmm3, %xmm2
    00000622: 	movdqa	%xmm8, %xmm10
    00000627: 	movdqa	-0x48(%rsp), %xmm8
    0000062e: 	punpcklwd	%xmm8, %xmm0
    00000633: 	punpckhwd	%xmm8, %xmm11
    00000638: 	movaps	%xmm11, 0xb8(%rsp)
    00000641: 	movdqa	%xmm0, %xmm14
    00000646: 	punpckhwd	%xmm11, %xmm0
    0000064b: 	punpcklwd	%xmm11, %xmm14
    00000650: 	movaps	%xmm0, 0xc8(%rsp)
    00000658: 	punpcklwd	%xmm0, %xmm14
    0000065d: 	movdqa	%xmm1, %xmm0
    00000661: 	punpckhwd	%xmm5, %xmm0
    00000665: 	movdqa	%xmm0, %xmm11
    0000066a: 	movdqa	%xmm1, %xmm0
    0000066e: 	punpcklwd	%xmm5, %xmm1
    00000672: 	punpcklwd	%xmm5, %xmm0
    00000676: 	punpcklwd	%xmm11, %xmm1
    0000067b: 	movdqa	%xmm0, %xmm8
    00000680: 	punpckhwd	%xmm11, %xmm0
    00000685: 	punpcklwd	%xmm11, %xmm8
    0000068a: 	movaps	%xmm0, 0xd8(%rsp)
    00000692: 	punpckhwd	0xd8(%rsp), %xmm1
    0000069b: 	punpcklwd	%xmm0, %xmm8
    000006a0: 	movdqa	-0x68(%rsp), %xmm0
    000006a6: 	punpcklwd	-0x48(%rsp), %xmm0
    000006ac: 	punpcklwd	0xb8(%rsp), %xmm0
    000006b5: 	pmullw	%xmm8, %xmm14
    000006ba: 	movdqa	%xmm10, %xmm8
    000006bf: 	movdqa	-0x8(%rsp), %xmm10
    000006c6: 	punpckhwd	0xc8(%rsp), %xmm0
    000006cf: 	punpcklwd	%xmm13, %xmm10
    000006d4: 	punpcklwd	0x8(%rsp), %xmm10
    000006db: 	punpckhwd	0x18(%rsp), %xmm10
    000006e2: 	pmullw	%xmm1, %xmm0
    000006e6: 	pmullw	%xmm10, %xmm7
    000006eb: 	paddw	%xmm14, %xmm8
    000006f0: 	paddw	0x68(%rsp), %xmm8
    000006f7: 	paddw	-0x18(%rsp), %xmm0
    000006fd: 	paddw	%xmm7, %xmm4
    00000701: 	paddw	%xmm2, %xmm4
    00000705: 	paddw	%xmm4, %xmm8
    0000070a: 	paddw	%xmm0, %xmm8
    0000070f: 	movaps	%xmm8, -0x18(%rsp)
    00000715: 	cmpq	%r10, %rax
    00000718: 	jne	.Ltmp361 # Offset: 1816
    0000071e: 	movdqa	%xmm8, %xmm0
    00000723: 	movq	%rbp, %r11
    00000726: 	psrldq	$0x8, %xmm0
    0000072b: 	andq	$-0x8, %r11
    0000072f: 	paddw	%xmm8, %xmm0
    00000734: 	leaq	(,%r11,8), %r9
    0000073c: 	movdqa	%xmm0, %xmm1
    00000740: 	psrldq	$0x4, %xmm1
    00000745: 	paddw	%xmm1, %xmm0
    00000749: 	movdqa	%xmm0, %xmm1
    0000074d: 	psrldq	$0x2, %xmm1
    00000752: 	paddw	%xmm1, %xmm0
    00000756: 	pextrw	$0x0, %xmm0, %eax
    0000075b: 	cmpq	%rbp, %r11
    0000075e: 	je	.Ltmp362 # Offset: 1886
.Ltmp368:
    00000764: 	subq	%r11, %rbx
    00000767: 	leaq	0x1(%rbx), %r10
    0000076b: 	cmpq	$0x2, %rbx
    0000076f: 	jbe	.Ltmp363 # Offset: 1903
    00000775: 	shlq	$0x4, %r11
    00000779: 	leaq	(%rcx,%r11), %rbx
    0000077d: 	addq	%rsi, %r11
    00000780: 	movq	(%rbx), %xmm8
    00000785: 	movq	0x8(%rbx), %xmm5
    0000078a: 	movq	0x10(%rbx), %xmm7
    0000078f: 	movq	0x18(%rbx), %xmm3
    00000794: 	movdqa	%xmm8, %xmm9
    00000799: 	movdqa	%xmm8, %xmm6
    0000079e: 	punpcklwd	%xmm5, %xmm8
    000007a3: 	movq	0x20(%rbx), %xmm1
    000007a8: 	punpcklwd	%xmm5, %xmm9
    000007ad: 	punpcklwd	%xmm5, %xmm6
    000007b1: 	movdqa	%xmm7, %xmm5
    000007b5: 	movq	0x28(%rbx), %xmm2
    000007ba: 	pshufd	$0xe, %xmm9, %xmm9
    000007c0: 	punpcklwd	%xmm3, %xmm5
    000007c4: 	movq	0x30(%rbx), %xmm0
    000007c9: 	movq	0x38(%rbx), %xmm4
    000007ce: 	punpcklwd	%xmm9, %xmm6
    000007d3: 	punpcklwd	%xmm9, %xmm8
    000007d8: 	movdqa	%xmm7, %xmm9
    000007dd: 	movq	0x28(%r11), %xmm11
    000007e3: 	punpcklwd	%xmm3, %xmm9
    000007e8: 	punpcklwd	%xmm3, %xmm7
    000007ec: 	movdqa	%xmm1, %xmm3
    000007f0: 	pshufd	$0xe, %xmm9, %xmm9
    000007f6: 	punpcklwd	%xmm2, %xmm3
    000007fa: 	pshufd	$0xe, %xmm8, %xmm8
    00000800: 	punpcklwd	%xmm9, %xmm5
    00000805: 	punpcklwd	%xmm9, %xmm7
    0000080a: 	movdqa	%xmm1, %xmm9
    0000080f: 	punpcklwd	%xmm2, %xmm9
    00000814: 	punpcklwd	%xmm2, %xmm1
    00000818: 	movdqa	%xmm0, %xmm2
    0000081c: 	pshufd	$0xe, %xmm9, %xmm9
    00000822: 	punpcklwd	%xmm4, %xmm2
    00000826: 	pshufd	$0xe, %xmm7, %xmm7
    0000082b: 	punpcklwd	%xmm9, %xmm3
    00000830: 	punpcklwd	%xmm9, %xmm1
    00000835: 	movdqa	%xmm0, %xmm9
    0000083a: 	punpcklwd	%xmm4, %xmm9
    0000083f: 	punpcklwd	%xmm4, %xmm0
    00000843: 	movdqa	%xmm6, %xmm4
    00000847: 	pshufd	$0xe, %xmm9, %xmm9
    0000084d: 	punpcklwd	%xmm5, %xmm4
    00000851: 	movdqa	%xmm3, %xmm12
    00000856: 	punpcklwd	%xmm9, %xmm2
    0000085b: 	punpcklwd	%xmm9, %xmm0
    00000860: 	movdqa	%xmm6, %xmm9
    00000865: 	punpcklwd	%xmm5, %xmm9
    0000086a: 	punpcklwd	%xmm5, %xmm6
    0000086e: 	movdqa	%xmm3, %xmm5
    00000872: 	punpcklwd	%xmm2, %xmm5
    00000876: 	pshufd	$0xe, %xmm9, %xmm9
    0000087c: 	punpcklwd	%xmm2, %xmm12
    00000881: 	pshufd	$0xe, %xmm5, %xmm5
    00000886: 	punpcklwd	%xmm2, %xmm3
    0000088a: 	punpcklwd	%xmm9, %xmm6
    0000088f: 	punpcklwd	%xmm5, %xmm12
    00000894: 	punpcklwd	%xmm5, %xmm3
    00000898: 	movdqa	%xmm8, %xmm2
    0000089d: 	movdqa	%xmm8, %xmm5
    000008a2: 	pshufd	$0xe, %xmm6, %xmm6
    000008a7: 	punpcklwd	%xmm7, %xmm2
    000008ab: 	movq	0x38(%r11), %xmm8
    000008b1: 	punpcklwd	%xmm7, %xmm5
    000008b5: 	pshufd	$0xe, %xmm1, %xmm1
    000008ba: 	pshufd	$0xe, %xmm2, %xmm2
    000008bf: 	movq	%xmm6, -0x78(%rsp)
    000008c5: 	movdqa	%xmm5, %xmm14
    000008ca: 	movdqa	%xmm5, %xmm6
    000008ce: 	pshufd	$0xe, %xmm0, %xmm0
    000008d3: 	movq	0x8(%r11), %xmm7
    000008d9: 	punpcklwd	%xmm2, %xmm6
    000008dd: 	punpcklwd	%xmm2, %xmm14
    000008e2: 	movdqa	%xmm1, %xmm13
    000008e7: 	movq	0x18(%r11), %xmm5
    000008ed: 	movdqa	%xmm1, %xmm2
    000008f1: 	movdqa	%xmm1, %xmm15
    000008f6: 	punpcklwd	%xmm0, %xmm13
    000008fb: 	movq	0x30(%r11), %xmm1
    00000901: 	punpcklwd	%xmm0, %xmm2
    00000905: 	punpcklwd	%xmm0, %xmm15
    0000090a: 	movq	(%r11), %xmm0
    0000090f: 	punpcklwd	%xmm9, %xmm4
    00000914: 	pshufd	$0xe, %xmm3, %xmm3
    00000919: 	movq	0x10(%r11), %xmm9
    0000091f: 	pshufd	$0xe, %xmm2, %xmm2
    00000924: 	pshufd	$0xe, %xmm14, %xmm14
    0000092a: 	movdqa	%xmm0, %xmm10
    0000092f: 	punpcklwd	%xmm2, %xmm13
    00000934: 	punpcklwd	%xmm2, %xmm15
    00000939: 	movq	%xmm3, -0x68(%rsp)
    0000093f: 	punpcklwd	%xmm7, %xmm10
    00000944: 	movdqa	%xmm0, %xmm3
    00000948: 	punpcklwd	%xmm7, %xmm0
    0000094c: 	movq	0x20(%r11), %xmm2
    00000952: 	pshufd	$0xe, %xmm10, %xmm10
    00000958: 	punpcklwd	%xmm7, %xmm3
    0000095c: 	movdqa	%xmm9, %xmm7
    00000961: 	movq	%xmm13, -0x48(%rsp)
    00000968: 	punpcklwd	%xmm10, %xmm3
    0000096d: 	punpcklwd	%xmm10, %xmm0
    00000972: 	punpcklwd	%xmm5, %xmm7
    00000976: 	movdqa	%xmm9, %xmm10
    0000097b: 	pshufd	$0xe, %xmm7, %xmm7
    00000980: 	punpcklwd	%xmm5, %xmm9
    00000985: 	punpcklwd	%xmm5, %xmm10
    0000098a: 	punpcklwd	%xmm7, %xmm9
    0000098f: 	movdqa	%xmm2, %xmm5
    00000993: 	punpcklwd	%xmm7, %xmm10
    00000998: 	movdqa	%xmm2, %xmm7
    0000099c: 	punpcklwd	%xmm11, %xmm5
    000009a1: 	punpcklwd	%xmm11, %xmm7
    000009a6: 	punpcklwd	%xmm11, %xmm2
    000009ab: 	movdqa	%xmm1, %xmm11
    000009b0: 	pshufd	$0xe, %xmm7, %xmm7
    000009b5: 	punpcklwd	%xmm8, %xmm11
    000009ba: 	pshufd	$0xe, %xmm0, %xmm0
    000009bf: 	punpcklwd	%xmm7, %xmm5
    000009c3: 	punpcklwd	%xmm7, %xmm2
    000009c7: 	movdqa	%xmm1, %xmm7
    000009cb: 	pshufd	$0xe, %xmm11, %xmm11
    000009d1: 	punpcklwd	%xmm8, %xmm7
    000009d6: 	punpcklwd	%xmm8, %xmm1
    000009db: 	punpcklwd	%xmm11, %xmm7
    000009e0: 	punpcklwd	%xmm11, %xmm1
    000009e5: 	movdqa	%xmm3, %xmm11
    000009ea: 	punpcklwd	%xmm10, %xmm11
    000009ef: 	movdqa	%xmm3, %xmm8
    000009f4: 	punpcklwd	%xmm10, %xmm3
    000009f9: 	pshufd	$0xe, %xmm11, %xmm11
    000009ff: 	punpcklwd	%xmm10, %xmm8
    00000a04: 	movdqa	%xmm5, %xmm10
    00000a09: 	punpcklwd	%xmm11, %xmm8
    00000a0e: 	punpcklwd	%xmm11, %xmm3
    00000a13: 	punpcklwd	%xmm7, %xmm10
    00000a18: 	movdqa	%xmm5, %xmm11
    00000a1d: 	pshufd	$0xe, %xmm10, %xmm10
    00000a23: 	punpcklwd	%xmm7, %xmm5
    00000a27: 	punpcklwd	%xmm7, %xmm11
    00000a2c: 	pshufd	$0xe, %xmm9, %xmm9
    00000a32: 	pshufd	$0xe, %xmm2, %xmm2
    00000a37: 	punpcklwd	%xmm10, %xmm11
    00000a3c: 	punpcklwd	%xmm10, %xmm5
    00000a41: 	movdqa	%xmm0, %xmm7
    00000a45: 	movdqa	%xmm0, %xmm10
    00000a4a: 	pshufd	$0xe, %xmm1, %xmm1
    00000a4f: 	punpcklwd	%xmm9, %xmm7
    00000a54: 	punpcklwd	%xmm9, %xmm10
    00000a59: 	punpcklwd	%xmm9, %xmm0
    00000a5e: 	movdqa	%xmm2, %xmm9
    00000a63: 	pshufd	$0xe, %xmm10, %xmm10
    00000a69: 	punpcklwd	%xmm1, %xmm9
    00000a6e: 	pshufd	$0xe, %xmm3, %xmm3
    00000a73: 	punpcklwd	%xmm10, %xmm7
    00000a78: 	pshufd	$0xe, %xmm9, %xmm9
    00000a7e: 	punpcklwd	%xmm10, %xmm0
    00000a83: 	movdqa	%xmm2, %xmm10
    00000a88: 	punpcklwd	%xmm1, %xmm2
    00000a8c: 	pshufd	$0xe, %xmm5, %xmm5
    00000a91: 	punpcklwd	%xmm9, %xmm2
    00000a96: 	punpcklwd	%xmm1, %xmm10
    00000a9b: 	movdqa	%xmm4, %xmm1
    00000a9f: 	pshufd	$0xe, %xmm2, %xmm2
    00000aa4: 	punpcklwd	%xmm12, %xmm1
    00000aa9: 	punpcklwd	%xmm9, %xmm10
    00000aae: 	movq	%xmm2, %r14
    00000ab3: 	movdqa	%xmm4, %xmm2
    00000ab7: 	pshufd	$0xe, %xmm1, %xmm1
    00000abc: 	punpcklwd	%xmm12, %xmm2
    00000ac1: 	pshufd	$0xe, %xmm15, %xmm15
    00000ac7: 	pshufd	$0xe, %xmm0, %xmm0
    00000acc: 	movq	%xmm1, -0x38(%rsp)
    00000ad2: 	movdqa	%xmm2, %xmm9
    00000ad7: 	movdqa	%xmm8, %xmm2
    00000adc: 	punpcklwd	%xmm12, %xmm4
    00000ae1: 	movq	-0x38(%rsp), %xmm12
    00000ae8: 	punpcklwd	%xmm1, %xmm9
    00000aed: 	movdqa	%xmm8, %xmm1
    00000af2: 	punpcklwd	%xmm11, %xmm2
    00000af7: 	punpcklwd	%xmm11, %xmm1
    00000afc: 	punpcklwd	%xmm12, %xmm4
    00000b01: 	punpcklwd	%xmm11, %xmm8
    00000b06: 	movq	-0x48(%rsp), %xmm12
    00000b0d: 	pshufd	$0xe, %xmm1, %xmm1
    00000b12: 	pshufd	$0xe, %xmm4, %xmm4
    00000b17: 	movq	%xmm1, -0x58(%rsp)
    00000b1d: 	movdqa	%xmm2, %xmm1
    00000b21: 	movq	-0x58(%rsp), %xmm2
    00000b27: 	punpcklwd	%xmm2, %xmm1
    00000b2b: 	movdqa	%xmm6, %xmm2
    00000b2f: 	pmullw	%xmm1, %xmm9
    00000b34: 	movdqa	%xmm6, %xmm1
    00000b38: 	punpcklwd	%xmm13, %xmm2
    00000b3d: 	punpcklwd	%xmm13, %xmm1
    00000b42: 	movdqa	%xmm7, %xmm13
    00000b47: 	pshufd	$0xe, %xmm2, %xmm2
    00000b4c: 	punpcklwd	%xmm10, %xmm13
    00000b51: 	movq	%xmm2, -0x28(%rsp)
    00000b57: 	punpcklwd	%xmm2, %xmm1
    00000b5b: 	punpcklwd	%xmm12, %xmm6
    00000b60: 	pshufd	$0xe, %xmm13, %xmm13
    00000b66: 	movdqa	%xmm13, %xmm2
    00000b6b: 	movdqa	%xmm7, %xmm13
    00000b70: 	punpcklwd	%xmm10, %xmm7
    00000b75: 	punpcklwd	%xmm10, %xmm13
    00000b7a: 	movq	%xmm2, -0x18(%rsp)
    00000b80: 	punpcklwd	%xmm2, %xmm13
    00000b85: 	movq	%r14, %xmm2
    00000b8a: 	pmullw	%xmm13, %xmm1
    00000b8f: 	paddw	%xmm1, %xmm9
    00000b94: 	movq	-0x78(%rsp), %xmm1
    00000b9a: 	movdqa	%xmm1, %xmm13
    00000b9f: 	movq	%xmm9, %rbx
    00000ba4: 	movq	-0x68(%rsp), %xmm9
    00000bab: 	punpcklwd	%xmm9, %xmm13
    00000bb0: 	punpcklwd	%xmm9, %xmm1
    00000bb5: 	movdqa	%xmm3, %xmm9
    00000bba: 	pshufd	$0xe, %xmm13, %xmm13
    00000bc0: 	punpcklwd	%xmm5, %xmm9
    00000bc5: 	movq	%xmm13, -0x8(%rsp)
    00000bcc: 	punpcklwd	%xmm13, %xmm1
    00000bd1: 	movdqa	%xmm3, %xmm13
    00000bd6: 	punpcklwd	%xmm5, %xmm3
    00000bda: 	pshufd	$0xe, %xmm9, %xmm9
    00000be0: 	punpcklwd	%xmm5, %xmm13
    00000be5: 	punpcklwd	%xmm9, %xmm13
    00000bea: 	movq	%xmm9, 0x8(%rsp)
    00000bf1: 	movdqa	%xmm14, %xmm9
    00000bf6: 	pmullw	%xmm13, %xmm1
    00000bfb: 	punpcklwd	%xmm15, %xmm9
    00000c00: 	movdqa	%xmm14, %xmm13
    00000c05: 	pshufd	$0xe, %xmm9, %xmm9
    00000c0b: 	punpcklwd	%xmm15, %xmm13
    00000c10: 	movq	%xmm9, %r11
    00000c15: 	punpcklwd	%xmm9, %xmm13
    00000c1a: 	movdqa	%xmm0, %xmm9
    00000c1f: 	punpcklwd	%xmm2, %xmm9
    00000c24: 	pshufd	$0xe, %xmm9, %xmm9
    00000c2a: 	movq	%xmm9, %rbp
    00000c2f: 	movdqa	%xmm0, %xmm9
    00000c34: 	punpcklwd	%xmm2, %xmm9
    00000c39: 	movq	%rbp, %xmm2
    00000c3e: 	punpcklwd	%xmm2, %xmm9
    00000c43: 	movq	-0x58(%rsp), %xmm2
    00000c49: 	pmullw	%xmm9, %xmm13
    00000c4e: 	movq	%rbx, %xmm9
    00000c53: 	punpcklwd	%xmm2, %xmm8
    00000c58: 	movq	-0x28(%rsp), %xmm2
    00000c5e: 	pshufd	$0xe, %xmm8, %xmm8
    00000c64: 	pmullw	%xmm8, %xmm4
    00000c69: 	punpcklwd	%xmm2, %xmm6
    00000c6d: 	movq	-0x18(%rsp), %xmm2
    00000c73: 	movq	0x8(%rsp), %xmm5
    00000c79: 	pshufd	$0xe, %xmm6, %xmm6
    00000c7e: 	punpcklwd	%xmm2, %xmm7
    00000c82: 	paddw	%xmm13, %xmm1
    00000c87: 	movq	-0x8(%rsp), %xmm13
    00000c8e: 	punpcklwd	%xmm5, %xmm3
    00000c92: 	pshufd	$0xe, %xmm7, %xmm7
    00000c97: 	pshufd	$0xe, %xmm3, %xmm3
    00000c9c: 	movq	%r11, %xmm5
    00000ca1: 	pmullw	%xmm7, %xmm6
    00000ca5: 	movq	%r14, %xmm2
    00000caa: 	paddw	%xmm9, %xmm1
    00000caf: 	movq	-0x78(%rsp), %xmm9
    00000cb6: 	punpcklwd	%xmm2, %xmm0
    00000cba: 	paddw	%xmm6, %xmm4
    00000cbe: 	paddw	%xmm4, %xmm1
    00000cc2: 	movq	-0x68(%rsp), %xmm4
    00000cc8: 	punpcklwd	%xmm4, %xmm9
    00000ccd: 	punpcklwd	%xmm13, %xmm9
    00000cd2: 	pshufd	$0xe, %xmm9, %xmm9
    00000cd8: 	pmullw	%xmm3, %xmm9
    00000cdd: 	movdqa	%xmm14, %xmm3
    00000ce2: 	punpcklwd	%xmm15, %xmm3
    00000ce7: 	punpcklwd	%xmm5, %xmm3
    00000ceb: 	movq	%rbp, %xmm5
    00000cf0: 	punpcklwd	%xmm5, %xmm0
    00000cf4: 	pshufd	$0xe, %xmm3, %xmm3
    00000cf9: 	pshufd	$0xe, %xmm0, %xmm0
    00000cfe: 	pmullw	%xmm0, %xmm3
    00000d02: 	paddw	%xmm3, %xmm9
    00000d07: 	paddw	%xmm9, %xmm1
    00000d0c: 	pextrw	$0x0, %xmm1, %r11d
    00000d12: 	pextrw	$0x1, %xmm1, %ebx
    00000d17: 	addl	%ebx, %r11d
    00000d1a: 	addl	%eax, %r11d
    00000d1d: 	pextrw	$0x2, %xmm1, %eax
    00000d22: 	addl	%eax, %r11d
    00000d25: 	pextrw	$0x3, %xmm1, %eax
    00000d2a: 	addl	%r11d, %eax
    00000d2d: 	movq	%r10, %r11
    00000d30: 	andq	$-0x4, %r11
    00000d34: 	leaq	(%r9,%r11,8), %r9
    00000d38: 	cmpq	%r11, %r10
    00000d3b: 	je	.Ltmp362 # Offset: 3387
.Ltmp363:
    00000d41: 	movzwl	(%rcx,%r9,2), %r11d
    00000d46: 	imulw	(%rsi,%r9,2), %r11w
    00000d4c: 	leaq	(%r9,%r9), %r10
    00000d50: 	addl	%eax, %r11d
    00000d53: 	movzwl	0x2(%rcx,%r10), %eax
    00000d59: 	imulw	0x2(%rsi,%r10), %ax
    00000d60: 	addl	%eax, %r11d
    00000d63: 	movzwl	0x4(%rcx,%r10), %eax
    00000d69: 	imulw	0x4(%rsi,%r10), %ax
    00000d70: 	addl	%eax, %r11d
    00000d73: 	movzwl	0x6(%rcx,%r10), %eax
    00000d79: 	imulw	0x6(%rsi,%r10), %ax
    00000d80: 	addl	%eax, %r11d
    00000d83: 	movzwl	0x8(%rcx,%r10), %eax
    00000d89: 	imulw	0x8(%rsi,%r10), %ax
    00000d90: 	addl	%eax, %r11d
    00000d93: 	movzwl	0xa(%rcx,%r10), %eax
    00000d99: 	imulw	0xa(%rsi,%r10), %ax
    00000da0: 	addl	%eax, %r11d
    00000da3: 	movzwl	0xc(%rsi,%r10), %eax
    00000da9: 	imulw	0xc(%rcx,%r10), %ax
    00000db0: 	addl	%eax, %r11d
    00000db3: 	movzwl	0xe(%rcx,%r10), %eax
    00000db9: 	imulw	0xe(%rsi,%r10), %ax
    00000dc0: 	addl	%r11d, %eax
    00000dc3: 	leaq	0x8(%r9), %r11
    00000dc7: 	cmpq	%r11, %rdx
    00000dca: 	jbe	.Ltmp362 # Offset: 3530
    00000dd0: 	movzwl	0x14(%rsi,%r10), %r11d
    00000dd6: 	movzwl	0x12(%rsi,%r10), %ebx
    00000ddc: 	addq	$0x10, %r9
    00000de0: 	imulw	0x12(%rcx,%r10), %bx
    00000de7: 	imulw	0x14(%rcx,%r10), %r11w
    00000dee: 	addl	%ebx, %r11d
    00000df1: 	movzwl	0x10(%rsi,%r10), %ebx
    00000df7: 	imulw	0x10(%rcx,%r10), %bx
    00000dfe: 	addl	%ebx, %r11d
    00000e01: 	movzwl	0x16(%rsi,%r10), %ebx
    00000e07: 	imulw	0x16(%rcx,%r10), %bx
    00000e0e: 	addl	%ebx, %r11d
    00000e11: 	movzwl	0x18(%rsi,%r10), %ebx
    00000e17: 	imulw	0x18(%rcx,%r10), %bx
    00000e1e: 	addl	%ebx, %r11d
    00000e21: 	movzwl	0x1a(%rsi,%r10), %ebx
    00000e27: 	imulw	0x1a(%rcx,%r10), %bx
    00000e2e: 	addl	%ebx, %r11d
    00000e31: 	movzwl	0x1c(%rsi,%r10), %ebx
    00000e37: 	imulw	0x1c(%rcx,%r10), %bx
    00000e3e: 	addl	%ebx, %r11d
    00000e41: 	movzwl	0x1e(%rsi,%r10), %ebx
    00000e47: 	imulw	0x1e(%rcx,%r10), %bx
    00000e4e: 	addl	%ebx, %r11d
    00000e51: 	addl	%r11d, %eax
    00000e54: 	cmpq	%r9, %rdx
    00000e57: 	jbe	.Ltmp362 # Offset: 3671
    00000e59: 	movzwl	0x22(%rcx,%r10), %edx
    00000e5f: 	movzwl	0x24(%rcx,%r10), %r9d
    00000e65: 	imulw	0x22(%rsi,%r10), %dx
    00000e6c: 	imulw	0x24(%rsi,%r10), %r9w
    00000e73: 	addl	%r9d, %edx
    00000e76: 	movzwl	0x20(%rcx,%r10), %r9d
    00000e7c: 	imulw	0x20(%rsi,%r10), %r9w
    00000e83: 	addl	%r9d, %edx
    00000e86: 	movzwl	0x26(%rcx,%r10), %r9d
    00000e8c: 	imulw	0x26(%rsi,%r10), %r9w
    00000e93: 	addl	%r9d, %edx
    00000e96: 	movzwl	0x28(%rcx,%r10), %r9d
    00000e9c: 	imulw	0x28(%rsi,%r10), %r9w
    00000ea3: 	addl	%r9d, %edx
    00000ea6: 	movzwl	0x2a(%rcx,%r10), %r9d
    00000eac: 	imulw	0x2a(%rsi,%r10), %r9w
    00000eb3: 	addl	%r9d, %edx
    00000eb6: 	movzwl	0x2c(%rcx,%r10), %r9d
    00000ebc: 	imulw	0x2c(%rsi,%r10), %r9w
    00000ec3: 	addl	%r9d, %edx
    00000ec6: 	movzwl	0x2e(%rcx,%r10), %r9d
    00000ecc: 	imulw	0x2e(%rsi,%r10), %r9w
    00000ed3: 	addl	%r9d, %edx
    00000ed6: 	addl	%edx, %eax
.Ltmp362:
    00000ed8: 	andq	$-0x8, %r8
    00000edc: 	leaq	0x8(%r8), %r9
    00000ee0: 	cmpq	%r9, %rdi
    00000ee3: 	jbe	.Ltmp364 # Offset: 3811
    00000ee9: 	leaq	0x9(%r8), %rdx
    00000eed: 	movq	%rdi, %r10
    00000ef0: 	movl	$0x1, %r8d
    00000ef6: 	subq	%r9, %r10
    00000ef9: 	cmpq	%rdx, %rdi
    00000efc: 	cmovaeq	%r10, %r8
    00000f00: 	subq	$0x1, %r10
    00000f04: 	cmpq	$0x6, %r10
    00000f08: 	jbe	.Ltmp365 # Offset: 3848
    00000f0e: 	cmpq	%rdx, %rdi
    00000f11: 	jb	.Ltmp365 # Offset: 3857
    00000f17: 	movdqu	(%rsi,%r9,2), %xmm0
    00000f1d: 	movdqu	(%rcx,%r9,2), %xmm5
    00000f23: 	pmullw	%xmm5, %xmm0
    00000f27: 	movdqa	%xmm0, %xmm1
    00000f2b: 	psrldq	$0x8, %xmm1
    00000f30: 	paddw	%xmm1, %xmm0
    00000f34: 	movdqa	%xmm0, %xmm1
    00000f38: 	psrldq	$0x4, %xmm1
    00000f3d: 	paddw	%xmm1, %xmm0
    00000f41: 	movdqa	%xmm0, %xmm1
    00000f45: 	psrldq	$0x2, %xmm1
    00000f4a: 	paddw	%xmm1, %xmm0
    00000f4e: 	pextrw	$0x0, %xmm0, %edx
    00000f53: 	addl	%edx, %eax
    00000f55: 	movq	%r8, %rdx
    00000f58: 	andq	$-0x8, %rdx
    00000f5c: 	leaq	(%rdx,%r9), %r10
    00000f60: 	cmpq	%r8, %rdx
    00000f63: 	je	.Ltmp364 # Offset: 3939
.Ltmp369:
    00000f69: 	subq	%rdx, %r8
    00000f6c: 	leaq	-0x1(%r8), %r11
    00000f70: 	cmpq	$0x2, %r11
    00000f74: 	jbe	.Ltmp366 # Offset: 3956
.Ltmp367:
    00000f76: 	addq	%r9, %rdx
    00000f79: 	movq	(%rsi,%rdx,2), %xmm0
    00000f7e: 	movq	(%rcx,%rdx,2), %xmm1
    00000f83: 	pmullw	%xmm1, %xmm0
    00000f87: 	pextrw	$0x1, %xmm0, %edx
    00000f8c: 	pextrw	$0x0, %xmm0, %r9d
    00000f92: 	addl	%r9d, %edx
    00000f95: 	addl	%eax, %edx
    00000f97: 	pextrw	$0x2, %xmm0, %eax
    00000f9c: 	addl	%eax, %edx
    00000f9e: 	pextrw	$0x3, %xmm0, %eax
    00000fa3: 	addl	%edx, %eax
    00000fa5: 	movq	%r8, %rdx
    00000fa8: 	andq	$-0x4, %rdx
    00000fac: 	addq	%rdx, %r10
    00000faf: 	cmpq	%rdx, %r8
    00000fb2: 	je	.Ltmp364 # Offset: 4018
.Ltmp366:
    00000fb4: 	movzwl	(%rcx,%r10,2), %edx
    00000fb9: 	imulw	(%rsi,%r10,2), %dx
    00000fbf: 	leaq	(%r10,%r10), %r8
    00000fc3: 	addl	%edx, %eax
    00000fc5: 	leaq	0x1(%r10), %rdx
    00000fc9: 	cmpq	%rdi, %rdx
    00000fcc: 	jae	.Ltmp364 # Offset: 4044
    00000fce: 	movzwl	0x2(%rsi,%r8), %edx
    00000fd4: 	imulw	0x2(%rcx,%r8), %dx
    00000fdb: 	addl	%edx, %eax
    00000fdd: 	leaq	0x2(%r10), %rdx
    00000fe1: 	cmpq	%rdi, %rdx
    00000fe4: 	jae	.Ltmp364 # Offset: 4068
    00000fe6: 	movzwl	0x4(%rsi,%r8), %edx
    00000fec: 	imulw	0x4(%rcx,%r8), %dx
    00000ff3: 	addl	%edx, %eax
.Ltmp364:
    00000ff5: 	addq	$0xe8, %rsp
    00000ffc: 	popq	%rbx
    00000ffd: 	popq	%rbp
    00000ffe: 	popq	%r14
    00001000: 	retq # Offset: 4096
    00001001: 	nopl	(%rax) # Size: 7
.Ltmp359:
    00001008: 	xorl	%r9d, %r9d
    0000100b: 	xorl	%r10d, %r10d
    0000100e: 	xorl	%eax, %eax
    00001010: 	movl	$0x7, %r8d
    00001016: 	jmp	.Ltmp367 # Offset: 4118
.Ltmp360:
    0000101b: 	xorl	%r11d, %r11d
    0000101e: 	xorl	%eax, %eax
    00001020: 	xorl	%r9d, %r9d
    00001023: 	jmp	.Ltmp368 # Offset: 4131
.Ltmp365:
    00001028: 	movq	%r9, %r10
    0000102b: 	xorl	%edx, %edx
    0000102d: 	jmp	.Ltmp369 # Offset: 4141
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKttET0_T_S3_m"

Binary Function "_Z14inner_product6IPKttET0_T_S3_m" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x13e10
  Size        : 0x24c4
  MaxSize     : 0x24d0
  Offset      : 0x13e10
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rcx
    00000009: 	movq	%rdx, %r8
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x1b0, %rsp
    0000001b: 	subq	$0xf, %rcx
    0000001f: 	je	.Ltmp370 # Offset: 31
    00000025: 	leaq	-0x10(%rdx), %rbx
    00000029: 	movq	%rbx, %r11
    0000002c: 	shrq	$0x4, %r11
    00000030: 	cmpq	$0x7f, %rbx
    00000034: 	jbe	.Ltmp371 # Offset: 52
    0000003a: 	movq	%rbx, %rdx
    0000003d: 	pxor	%xmm3, %xmm3
    00000041: 	movq	%rdi, %rax
    00000044: 	movq	%rsi, %r9
    00000047: 	shrq	$0x7, %rdx
    0000004b: 	movaps	%xmm3, 0x58(%rsp)
    00000050: 	movq	%rdx, %r10
    00000053: 	shlq	$0x8, %r10
    00000057: 	addq	%rdi, %r10
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp372:
    00000060: 	movdqu	(%rax), %xmm14
    00000065: 	movdqu	0x10(%rax), %xmm10
    0000006b: 	addq	$0x100, %rax
    00000071: 	addq	$0x100, %r9
    00000078: 	movdqu	-0xe0(%rax), %xmm13
    00000081: 	movdqu	-0x80(%rax), %xmm0
    00000086: 	movdqa	%xmm14, %xmm12
    0000008b: 	movdqa	%xmm14, %xmm5
    00000090: 	punpcklwd	%xmm10, %xmm14
    00000095: 	movdqu	-0xd0(%rax), %xmm9
    0000009e: 	punpcklwd	%xmm10, %xmm12
    000000a3: 	punpckhwd	%xmm10, %xmm5
    000000a8: 	movdqa	%xmm13, %xmm15
    000000ad: 	movdqu	-0xc0(%rax), %xmm4
    000000b5: 	movdqa	%xmm12, %xmm11
    000000ba: 	punpcklwd	%xmm5, %xmm14
    000000bf: 	punpcklwd	%xmm5, %xmm12
    000000c4: 	movdqu	-0xb0(%rax), %xmm8
    000000cd: 	punpckhwd	%xmm5, %xmm11
    000000d2: 	movdqa	%xmm13, %xmm5
    000000d7: 	punpcklwd	%xmm9, %xmm15
    000000dc: 	movdqu	-0xa0(%rax), %xmm3
    000000e4: 	punpcklwd	%xmm11, %xmm12
    000000e9: 	punpckhwd	%xmm11, %xmm14
    000000ee: 	movdqa	%xmm13, %xmm11
    000000f3: 	movdqu	-0x90(%rax), %xmm7
    000000fb: 	punpcklwd	%xmm9, %xmm11
    00000100: 	punpckhwd	%xmm9, %xmm5
    00000105: 	movdqu	-0x70(%rax), %xmm6
    0000010a: 	movdqu	-0x60(%rax), %xmm2
    0000010f: 	movdqa	%xmm11, %xmm10
    00000114: 	punpcklwd	%xmm5, %xmm15
    00000119: 	punpcklwd	%xmm5, %xmm11
    0000011e: 	movdqu	-0x40(%rax), %xmm1
    00000123: 	punpckhwd	%xmm5, %xmm10
    00000128: 	movdqa	%xmm4, %xmm5
    0000012c: 	punpcklwd	%xmm10, %xmm11
    00000131: 	punpckhwd	%xmm10, %xmm15
    00000136: 	movdqa	%xmm4, %xmm10
    0000013b: 	punpcklwd	%xmm8, %xmm10
    00000140: 	punpckhwd	%xmm8, %xmm5
    00000145: 	punpcklwd	%xmm8, %xmm4
    0000014a: 	movdqa	%xmm10, %xmm9
    0000014f: 	punpcklwd	%xmm5, %xmm4
    00000153: 	punpcklwd	%xmm5, %xmm10
    00000158: 	punpckhwd	%xmm5, %xmm9
    0000015d: 	movdqa	%xmm3, %xmm5
    00000161: 	punpcklwd	%xmm9, %xmm10
    00000166: 	punpckhwd	%xmm9, %xmm4
    0000016b: 	movdqa	%xmm3, %xmm9
    00000170: 	punpcklwd	%xmm7, %xmm9
    00000175: 	punpckhwd	%xmm7, %xmm5
    00000179: 	punpcklwd	%xmm7, %xmm3
    0000017d: 	movdqa	%xmm9, %xmm8
    00000182: 	punpcklwd	%xmm5, %xmm3
    00000186: 	punpcklwd	%xmm5, %xmm9
    0000018b: 	punpckhwd	%xmm5, %xmm8
    00000190: 	movdqa	%xmm0, %xmm5
    00000194: 	punpcklwd	%xmm8, %xmm9
    00000199: 	punpckhwd	%xmm8, %xmm3
    0000019e: 	movdqa	%xmm0, %xmm8
    000001a3: 	punpckhwd	%xmm6, %xmm5
    000001a7: 	punpcklwd	%xmm6, %xmm8
    000001ac: 	punpcklwd	%xmm6, %xmm0
    000001b0: 	movdqa	%xmm8, %xmm7
    000001b5: 	punpcklwd	%xmm5, %xmm0
    000001b9: 	punpcklwd	%xmm5, %xmm8
    000001be: 	punpckhwd	%xmm5, %xmm7
    000001c2: 	movdqa	%xmm0, %xmm5
    000001c6: 	movdqu	-0x50(%rax), %xmm0
    000001cb: 	punpcklwd	%xmm7, %xmm8
    000001d0: 	punpckhwd	%xmm7, %xmm5
    000001d4: 	movdqa	%xmm2, %xmm7
    000001d8: 	punpcklwd	%xmm0, %xmm7
    000001dc: 	movaps	%xmm5, -0x58(%rsp)
    000001e1: 	movdqa	%xmm2, %xmm5
    000001e5: 	punpcklwd	%xmm0, %xmm2
    000001e9: 	punpckhwd	%xmm0, %xmm5
    000001ed: 	movdqa	%xmm7, %xmm6
    000001f1: 	movdqu	-0x30(%rax), %xmm0
    000001f6: 	punpckhwd	%xmm5, %xmm6
    000001fa: 	punpcklwd	%xmm5, %xmm7
    000001fe: 	punpcklwd	%xmm5, %xmm2
    00000202: 	punpckhwd	%xmm6, %xmm2
    00000206: 	punpcklwd	%xmm6, %xmm7
    0000020a: 	movdqa	%xmm1, %xmm6
    0000020e: 	punpcklwd	%xmm0, %xmm6
    00000212: 	movdqa	%xmm1, %xmm5
    00000216: 	punpcklwd	%xmm0, %xmm1
    0000021a: 	punpckhwd	%xmm0, %xmm5
    0000021e: 	movdqa	%xmm6, %xmm13
    00000223: 	movdqa	%xmm1, %xmm0
    00000227: 	movdqu	-0x10(%rax), %xmm1
    0000022c: 	punpckhwd	%xmm5, %xmm13
    00000231: 	punpcklwd	%xmm5, %xmm0
    00000235: 	punpcklwd	%xmm5, %xmm6
    00000239: 	movdqu	-0x10(%rax), %xmm5
    0000023e: 	punpckhwd	%xmm13, %xmm0
    00000243: 	punpcklwd	%xmm13, %xmm6
    00000248: 	movdqu	-0x10(%rax), %xmm13
    0000024e: 	movaps	%xmm0, -0x68(%rsp)
    00000253: 	movdqu	-0x20(%rax), %xmm0
    00000258: 	punpckhwd	%xmm5, %xmm0
    0000025c: 	movdqu	-0x20(%rax), %xmm5
    00000261: 	punpcklwd	%xmm13, %xmm5
    00000266: 	movdqa	%xmm5, %xmm13
    0000026b: 	punpcklwd	%xmm0, %xmm5
    0000026f: 	punpckhwd	%xmm0, %xmm13
    00000274: 	movaps	%xmm13, -0x78(%rsp)
    0000027a: 	punpcklwd	%xmm13, %xmm5
    0000027f: 	movdqu	-0x20(%rax), %xmm13
    00000285: 	punpcklwd	%xmm1, %xmm13
    0000028a: 	punpcklwd	%xmm0, %xmm13
    0000028f: 	movdqa	%xmm12, %xmm0
    00000294: 	punpckhwd	-0x78(%rsp), %xmm13
    0000029b: 	punpckhwd	%xmm11, %xmm0
    000002a0: 	movdqa	%xmm0, %xmm1
    000002a4: 	movdqa	%xmm12, %xmm0
    000002a9: 	punpcklwd	%xmm11, %xmm12
    000002ae: 	punpcklwd	%xmm11, %xmm0
    000002b3: 	movaps	%xmm1, -0x48(%rsp)
    000002b8: 	movdqa	%xmm10, %xmm11
    000002bd: 	punpcklwd	-0x48(%rsp), %xmm12
    000002c4: 	movaps	%xmm0, -0x78(%rsp)
    000002c9: 	punpckhwd	%xmm1, %xmm0
    000002cd: 	punpckhwd	%xmm9, %xmm11
    000002d2: 	movaps	%xmm0, -0x38(%rsp)
    000002d7: 	movdqa	-0x78(%rsp), %xmm0
    000002dd: 	punpcklwd	%xmm1, %xmm0
    000002e1: 	movdqa	-0x38(%rsp), %xmm1
    000002e7: 	punpcklwd	%xmm1, %xmm0
    000002eb: 	punpckhwd	%xmm1, %xmm12
    000002f0: 	movaps	%xmm0, -0x78(%rsp)
    000002f5: 	movdqa	%xmm10, %xmm0
    000002fa: 	punpcklwd	%xmm9, %xmm10
    000002ff: 	punpcklwd	%xmm9, %xmm0
    00000304: 	movaps	%xmm12, 0x48(%rsp)
    0000030a: 	punpcklwd	%xmm11, %xmm10
    0000030f: 	movdqa	%xmm8, %xmm9
    00000314: 	movdqa	%xmm0, %xmm12
    00000319: 	punpcklwd	%xmm11, %xmm0
    0000031e: 	punpcklwd	%xmm7, %xmm9
    00000323: 	punpckhwd	%xmm11, %xmm12
    00000328: 	movdqa	%xmm8, %xmm11
    0000032d: 	movdqa	%xmm9, %xmm8
    00000332: 	punpcklwd	%xmm12, %xmm0
    00000337: 	punpckhwd	%xmm12, %xmm10
    0000033c: 	punpckhwd	%xmm7, %xmm11
    00000341: 	movaps	%xmm0, 0x38(%rsp)
    00000346: 	movdqa	%xmm9, %xmm0
    0000034b: 	movdqa	%xmm6, %xmm12
    00000350: 	movdqa	%xmm6, %xmm7
    00000354: 	movaps	%xmm10, 0x28(%rsp)
    0000035a: 	movdqa	%xmm11, %xmm10
    0000035f: 	punpckhwd	%xmm5, %xmm7
    00000363: 	movdqa	%xmm9, %xmm11
    00000368: 	punpckhwd	%xmm10, %xmm11
    0000036d: 	punpcklwd	%xmm10, %xmm0
    00000372: 	punpcklwd	%xmm10, %xmm8
    00000377: 	movdqa	-0x58(%rsp), %xmm1
    0000037d: 	punpcklwd	%xmm11, %xmm0
    00000382: 	punpckhwd	%xmm11, %xmm8
    00000387: 	movdqa	%xmm6, %xmm11
    0000038c: 	punpcklwd	%xmm5, %xmm11
    00000391: 	punpcklwd	%xmm5, %xmm12
    00000396: 	movdqa	%xmm14, %xmm9
    0000039b: 	movaps	%xmm8, 0x8(%rsp)
    000003a1: 	punpckhwd	%xmm15, %xmm9
    000003a6: 	movdqa	%xmm11, %xmm8
    000003ab: 	movdqa	%xmm12, %xmm5
    000003b0: 	movaps	%xmm0, 0x18(%rsp)
    000003b5: 	movdqa	%xmm9, %xmm6
    000003ba: 	punpckhwd	%xmm7, %xmm8
    000003bf: 	punpcklwd	%xmm7, %xmm5
    000003c3: 	movdqa	%xmm14, %xmm9
    000003c8: 	punpckhwd	%xmm8, %xmm5
    000003cd: 	punpcklwd	%xmm7, %xmm11
    000003d2: 	punpcklwd	%xmm15, %xmm9
    000003d7: 	movdqa	%xmm4, %xmm15
    000003dc: 	movaps	%xmm5, -0x18(%rsp)
    000003e1: 	punpcklwd	%xmm8, %xmm11
    000003e6: 	punpckhwd	%xmm3, %xmm15
    000003eb: 	movdqa	%xmm9, %xmm5
    000003f0: 	movdqa	%xmm9, %xmm7
    000003f5: 	movdqu	-0xe0(%r9), %xmm8
    000003fe: 	movdqa	%xmm9, %xmm14
    00000403: 	punpckhwd	%xmm6, %xmm7
    00000407: 	punpcklwd	%xmm6, %xmm5
    0000040b: 	movaps	%xmm11, -0x8(%rsp)
    00000411: 	punpcklwd	%xmm6, %xmm14
    00000416: 	movdqa	%xmm15, %xmm6
    0000041b: 	movdqa	%xmm4, %xmm15
    00000420: 	punpcklwd	%xmm3, %xmm15
    00000425: 	punpcklwd	%xmm3, %xmm4
    00000429: 	punpcklwd	%xmm7, %xmm5
    0000042d: 	punpckhwd	%xmm7, %xmm14
    00000432: 	movdqa	%xmm4, %xmm3
    00000436: 	movdqa	%xmm15, %xmm7
    0000043b: 	movaps	%xmm5, -0x28(%rsp)
    00000440: 	punpckhwd	%xmm6, %xmm7
    00000444: 	punpcklwd	%xmm6, %xmm15
    00000449: 	punpcklwd	%xmm6, %xmm3
    0000044d: 	movdqa	-0x68(%rsp), %xmm6
    00000453: 	movdqa	%xmm1, %xmm9
    00000458: 	punpckhwd	%xmm7, %xmm3
    0000045c: 	movdqa	%xmm1, %xmm4
    00000460: 	movaps	%xmm14, -0x38(%rsp)
    00000466: 	punpcklwd	%xmm2, %xmm9
    0000046b: 	punpcklwd	%xmm2, %xmm1
    0000046f: 	movdqa	%xmm6, %xmm10
    00000474: 	movaps	%xmm3, -0x48(%rsp)
    00000479: 	punpckhwd	%xmm2, %xmm4
    0000047d: 	punpcklwd	%xmm13, %xmm10
    00000482: 	movdqa	%xmm9, %xmm3
    00000487: 	movdqu	-0x90(%r9), %xmm14
    00000490: 	movdqa	%xmm1, %xmm0
    00000494: 	movdqa	%xmm6, %xmm2
    00000498: 	movdqa	%xmm6, %xmm1
    0000049c: 	movdqu	-0xa0(%r9), %xmm6
    000004a5: 	punpckhwd	%xmm13, %xmm2
    000004aa: 	punpckhwd	%xmm4, %xmm9
    000004af: 	punpcklwd	%xmm4, %xmm3
    000004b3: 	punpcklwd	%xmm4, %xmm0
    000004b7: 	punpcklwd	%xmm13, %xmm1
    000004bc: 	movdqa	%xmm10, %xmm4
    000004c1: 	punpckhwd	%xmm2, %xmm4
    000004c5: 	punpcklwd	%xmm2, %xmm10
    000004ca: 	movdqa	%xmm1, %xmm13
    000004cf: 	punpcklwd	%xmm4, %xmm10
    000004d4: 	punpcklwd	%xmm2, %xmm13
    000004d9: 	punpcklwd	%xmm9, %xmm3
    000004de: 	movdqu	-0x60(%r9), %xmm2
    000004e4: 	punpckhwd	%xmm4, %xmm13
    000004e9: 	movaps	%xmm10, -0x58(%rsp)
    000004ef: 	punpckhwd	%xmm9, %xmm0
    000004f4: 	movdqu	-0x100(%r9), %xmm10
    000004fd: 	movaps	%xmm13, -0x68(%rsp)
    00000503: 	punpcklwd	%xmm7, %xmm15
    00000508: 	movdqu	-0xf0(%r9), %xmm13
    00000511: 	movdqu	-0xc0(%r9), %xmm7
    0000051a: 	movdqa	%xmm10, %xmm12
    0000051f: 	movdqa	%xmm10, %xmm1
    00000524: 	movdqu	-0x80(%r9), %xmm4
    0000052a: 	movaps	%xmm15, 0x68(%rsp)
    00000530: 	punpcklwd	%xmm13, %xmm12
    00000535: 	punpckhwd	%xmm13, %xmm1
    0000053a: 	punpcklwd	%xmm13, %xmm10
    0000053f: 	movdqu	-0xd0(%r9), %xmm13
    00000548: 	movdqa	%xmm12, %xmm9
    0000054d: 	punpcklwd	%xmm1, %xmm10
    00000552: 	punpcklwd	%xmm1, %xmm12
    00000557: 	movdqu	-0x40(%r9), %xmm15
    0000055d: 	punpckhwd	%xmm1, %xmm9
    00000562: 	movdqa	%xmm8, %xmm1
    00000567: 	punpcklwd	%xmm9, %xmm12
    0000056c: 	punpckhwd	%xmm9, %xmm10
    00000571: 	movdqu	-0xd0(%r9), %xmm9
    0000057a: 	movaps	%xmm10, 0x78(%rsp)
    00000580: 	punpckhwd	%xmm9, %xmm1
    00000585: 	movdqa	%xmm8, %xmm9
    0000058a: 	punpcklwd	%xmm13, %xmm9
    0000058f: 	movdqa	%xmm8, %xmm13
    00000594: 	movdqu	-0xb0(%r9), %xmm8
    0000059d: 	movdqa	%xmm9, %xmm11
    000005a2: 	punpckhwd	%xmm1, %xmm9
    000005a7: 	punpcklwd	%xmm1, %xmm11
    000005ac: 	movdqa	%xmm9, %xmm10
    000005b1: 	punpcklwd	%xmm9, %xmm11
    000005b6: 	movdqu	-0xd0(%r9), %xmm9
    000005bf: 	punpcklwd	%xmm9, %xmm13
    000005c4: 	movdqu	-0xb0(%r9), %xmm9
    000005cd: 	punpcklwd	%xmm1, %xmm13
    000005d2: 	movdqa	%xmm7, %xmm1
    000005d6: 	punpckhwd	%xmm9, %xmm1
    000005db: 	movdqa	%xmm7, %xmm9
    000005e0: 	punpckhwd	%xmm10, %xmm13
    000005e5: 	movaps	%xmm13, 0x88(%rsp)
    000005ee: 	punpcklwd	%xmm8, %xmm9
    000005f3: 	movdqa	%xmm9, %xmm10
    000005f8: 	punpckhwd	%xmm1, %xmm9
    000005fd: 	punpcklwd	%xmm1, %xmm10
    00000602: 	movdqa	%xmm9, %xmm8
    00000607: 	punpcklwd	%xmm9, %xmm10
    0000060c: 	movdqu	-0xb0(%r9), %xmm9
    00000615: 	punpcklwd	%xmm9, %xmm7
    0000061a: 	movdqa	%xmm6, %xmm9
    0000061f: 	punpcklwd	%xmm1, %xmm7
    00000623: 	movdqa	%xmm6, %xmm1
    00000627: 	punpcklwd	%xmm14, %xmm6
    0000062c: 	punpckhwd	%xmm14, %xmm1
    00000631: 	punpcklwd	%xmm14, %xmm9
    00000636: 	movdqa	%xmm6, %xmm14
    0000063b: 	punpckhwd	%xmm8, %xmm7
    00000640: 	punpcklwd	%xmm1, %xmm14
    00000645: 	movdqa	%xmm9, %xmm8
    0000064a: 	punpcklwd	%xmm1, %xmm8
    0000064f: 	punpckhwd	%xmm1, %xmm9
    00000654: 	movdqa	%xmm14, %xmm1
    00000659: 	movaps	%xmm7, 0x98(%rsp)
    00000661: 	punpckhwd	%xmm9, %xmm1
    00000666: 	punpcklwd	%xmm9, %xmm8
    0000066b: 	movdqa	%xmm4, %xmm9
    00000670: 	movaps	%xmm1, 0xa8(%rsp)
    00000678: 	movdqu	-0x70(%r9), %xmm1
    0000067e: 	movdqu	-0x70(%r9), %xmm14
    00000684: 	movdqu	-0x10(%r9), %xmm5
    0000068a: 	punpckhwd	%xmm1, %xmm9
    0000068f: 	movdqa	%xmm9, %xmm1
    00000694: 	movdqa	%xmm4, %xmm9
    00000699: 	punpcklwd	%xmm14, %xmm4
    0000069e: 	punpcklwd	%xmm14, %xmm9
    000006a3: 	movdqa	%xmm4, %xmm14
    000006a8: 	movdqu	-0x50(%r9), %xmm4
    000006ae: 	movdqa	%xmm9, %xmm7
    000006b3: 	punpcklwd	%xmm1, %xmm14
    000006b8: 	punpckhwd	%xmm1, %xmm9
    000006bd: 	punpcklwd	%xmm1, %xmm7
    000006c1: 	punpckhwd	%xmm9, %xmm14
    000006c6: 	punpcklwd	%xmm9, %xmm7
    000006cb: 	movdqa	%xmm2, %xmm9
    000006d0: 	punpckhwd	%xmm4, %xmm9
    000006d5: 	movdqa	%xmm9, %xmm1
    000006da: 	movdqa	%xmm2, %xmm9
    000006df: 	punpcklwd	%xmm4, %xmm9
    000006e4: 	movdqa	%xmm9, %xmm6
    000006e9: 	movdqa	%xmm9, %xmm4
    000006ee: 	movdqu	-0x50(%r9), %xmm9
    000006f4: 	punpckhwd	%xmm1, %xmm4
    000006f8: 	punpcklwd	%xmm1, %xmm6
    000006fc: 	punpcklwd	%xmm9, %xmm2
    00000701: 	punpcklwd	%xmm4, %xmm6
    00000705: 	movdqa	%xmm15, %xmm9
    0000070a: 	punpcklwd	%xmm1, %xmm2
    0000070e: 	punpckhwd	%xmm4, %xmm2
    00000712: 	movdqu	-0x30(%r9), %xmm4
    00000718: 	movaps	%xmm2, 0xb8(%rsp)
    00000720: 	punpckhwd	%xmm4, %xmm9
    00000725: 	movdqa	%xmm15, %xmm4
    0000072a: 	movdqa	%xmm9, %xmm1
    0000072f: 	movdqu	-0x30(%r9), %xmm9
    00000735: 	punpcklwd	%xmm9, %xmm4
    0000073a: 	movdqa	%xmm4, %xmm9
    0000073f: 	punpcklwd	%xmm1, %xmm4
    00000743: 	punpckhwd	%xmm1, %xmm9
    00000748: 	punpcklwd	%xmm9, %xmm4
    0000074d: 	movdqa	%xmm9, %xmm2
    00000752: 	movdqu	-0x30(%r9), %xmm9
    00000758: 	punpcklwd	%xmm9, %xmm15
    0000075d: 	movdqu	-0x20(%r9), %xmm9
    00000763: 	punpcklwd	%xmm1, %xmm15
    00000768: 	punpckhwd	%xmm2, %xmm15
    0000076d: 	movdqu	-0x10(%r9), %xmm2
    00000773: 	punpckhwd	%xmm2, %xmm9
    00000778: 	movdqa	%xmm9, %xmm1
    0000077d: 	movdqu	-0x20(%r9), %xmm9
    00000783: 	punpcklwd	%xmm2, %xmm9
    00000788: 	movdqa	%xmm9, %xmm2
    0000078d: 	punpckhwd	%xmm1, %xmm9
    00000792: 	punpcklwd	%xmm1, %xmm2
    00000796: 	movdqa	%xmm9, %xmm13
    0000079b: 	punpcklwd	%xmm9, %xmm2
    000007a0: 	movdqu	-0x20(%r9), %xmm9
    000007a6: 	punpcklwd	%xmm5, %xmm9
    000007ab: 	punpcklwd	%xmm1, %xmm9
    000007b0: 	movdqa	%xmm12, %xmm1
    000007b5: 	punpckhwd	%xmm13, %xmm9
    000007ba: 	punpcklwd	%xmm11, %xmm1
    000007bf: 	movdqa	%xmm9, %xmm5
    000007c4: 	movdqa	%xmm12, %xmm9
    000007c9: 	punpcklwd	%xmm11, %xmm12
    000007ce: 	punpckhwd	%xmm11, %xmm9
    000007d3: 	movdqa	%xmm10, %xmm11
    000007d8: 	movdqa	%xmm9, %xmm13
    000007dd: 	movdqa	%xmm1, %xmm9
    000007e2: 	punpcklwd	%xmm8, %xmm11
    000007e7: 	punpcklwd	%xmm13, %xmm12
    000007ec: 	punpckhwd	%xmm13, %xmm9
    000007f1: 	punpcklwd	%xmm13, %xmm1
    000007f6: 	movdqa	%xmm12, %xmm13
    000007fb: 	punpcklwd	%xmm9, %xmm1
    00000800: 	punpckhwd	%xmm9, %xmm13
    00000805: 	movdqa	%xmm10, %xmm9
    0000080a: 	movaps	%xmm13, 0xc8(%rsp)
    00000813: 	punpckhwd	%xmm8, %xmm9
    00000818: 	movdqa	%xmm9, %xmm12
    0000081d: 	movdqa	%xmm11, %xmm9
    00000822: 	punpckhwd	%xmm12, %xmm9
    00000827: 	punpcklwd	%xmm12, %xmm11
    0000082c: 	punpcklwd	%xmm9, %xmm11
    00000831: 	movdqa	%xmm9, %xmm13
    00000836: 	movdqa	%xmm10, %xmm9
    0000083b: 	punpcklwd	%xmm8, %xmm9
    00000840: 	punpcklwd	%xmm12, %xmm9
    00000845: 	movdqa	%xmm7, %xmm12
    0000084a: 	punpckhwd	%xmm6, %xmm12
    0000084f: 	punpckhwd	%xmm13, %xmm9
    00000854: 	movdqa	0x88(%rsp), %xmm13
    0000085e: 	movaps	%xmm9, 0xd8(%rsp)
    00000867: 	movdqa	%xmm12, %xmm10
    0000086c: 	movdqa	%xmm7, %xmm12
    00000871: 	punpcklwd	%xmm6, %xmm7
    00000875: 	punpcklwd	%xmm6, %xmm12
    0000087a: 	punpcklwd	%xmm10, %xmm7
    0000087f: 	movdqa	0xd8(%rsp), %xmm9
    00000889: 	movdqa	%xmm12, %xmm8
    0000088e: 	punpckhwd	%xmm10, %xmm12
    00000893: 	punpcklwd	%xmm10, %xmm8
    00000898: 	punpckhwd	%xmm12, %xmm7
    0000089d: 	punpcklwd	%xmm12, %xmm8
    000008a2: 	movdqa	%xmm4, %xmm12
    000008a7: 	movaps	%xmm7, 0xe8(%rsp)
    000008af: 	punpckhwd	%xmm2, %xmm12
    000008b4: 	movdqa	%xmm12, %xmm6
    000008b9: 	movdqa	%xmm4, %xmm12
    000008be: 	punpcklwd	%xmm2, %xmm4
    000008c2: 	punpcklwd	%xmm2, %xmm12
    000008c7: 	punpcklwd	%xmm6, %xmm4
    000008cb: 	movdqa	%xmm12, %xmm10
    000008d0: 	punpckhwd	%xmm6, %xmm12
    000008d5: 	punpcklwd	%xmm6, %xmm10
    000008da: 	movdqa	0x78(%rsp), %xmm6
    000008e0: 	punpckhwd	%xmm12, %xmm4
    000008e5: 	punpcklwd	%xmm12, %xmm10
    000008ea: 	movaps	%xmm4, 0xf8(%rsp)
    000008f2: 	movdqa	0x98(%rsp), %xmm12
    000008fc: 	movdqa	%xmm6, %xmm7
    00000900: 	movdqa	%xmm6, %xmm2
    00000904: 	punpcklwd	%xmm13, %xmm6
    00000909: 	punpcklwd	%xmm13, %xmm7
    0000090e: 	punpckhwd	%xmm13, %xmm2
    00000913: 	movdqa	0xa8(%rsp), %xmm13
    0000091d: 	movdqa	%xmm7, %xmm4
    00000921: 	punpcklwd	%xmm2, %xmm6
    00000925: 	punpcklwd	%xmm2, %xmm7
    00000929: 	punpckhwd	%xmm2, %xmm4
    0000092d: 	movdqa	%xmm12, %xmm2
    00000932: 	punpcklwd	%xmm4, %xmm7
    00000936: 	punpckhwd	%xmm4, %xmm6
    0000093a: 	movdqa	%xmm12, %xmm4
    0000093f: 	punpcklwd	%xmm13, %xmm4
    00000944: 	punpckhwd	%xmm13, %xmm2
    00000949: 	movaps	%xmm6, 0x78(%rsp)
    0000094e: 	punpcklwd	%xmm13, %xmm12
    00000953: 	movdqa	%xmm4, %xmm6
    00000957: 	punpcklwd	%xmm2, %xmm12
    0000095c: 	movdqa	0xb8(%rsp), %xmm13
    00000966: 	punpckhwd	%xmm2, %xmm4
    0000096a: 	punpcklwd	%xmm2, %xmm6
    0000096e: 	punpckhwd	%xmm4, %xmm12
    00000973: 	movdqa	%xmm14, %xmm2
    00000978: 	punpcklwd	%xmm4, %xmm6
    0000097c: 	movdqa	%xmm14, %xmm4
    00000981: 	punpckhwd	%xmm13, %xmm2
    00000986: 	movaps	%xmm12, 0x88(%rsp)
    0000098f: 	punpcklwd	%xmm13, %xmm4
    00000994: 	punpcklwd	%xmm13, %xmm14
    00000999: 	movdqa	%xmm15, %xmm13
    0000099e: 	movdqa	%xmm4, %xmm12
    000009a3: 	punpcklwd	%xmm2, %xmm14
    000009a8: 	punpcklwd	%xmm2, %xmm4
    000009ac: 	punpckhwd	%xmm2, %xmm12
    000009b1: 	punpcklwd	%xmm5, %xmm13
    000009b6: 	punpcklwd	%xmm12, %xmm4
    000009bb: 	punpckhwd	%xmm12, %xmm14
    000009c0: 	movdqa	%xmm15, %xmm12
    000009c5: 	punpckhwd	%xmm5, %xmm12
    000009ca: 	punpcklwd	%xmm5, %xmm15
    000009cf: 	movdqa	%xmm13, %xmm2
    000009d4: 	punpcklwd	%xmm12, %xmm15
    000009d9: 	punpckhwd	%xmm12, %xmm13
    000009de: 	punpcklwd	%xmm12, %xmm2
    000009e3: 	punpckhwd	%xmm13, %xmm15
    000009e8: 	movdqa	%xmm1, %xmm12
    000009ed: 	punpcklwd	%xmm13, %xmm2
    000009f2: 	movdqa	%xmm15, %xmm5
    000009f7: 	movdqa	%xmm1, %xmm15
    000009fc: 	punpckhwd	%xmm11, %xmm12
    00000a01: 	punpcklwd	%xmm11, %xmm15
    00000a06: 	punpcklwd	%xmm11, %xmm1
    00000a0b: 	movdqa	%xmm15, %xmm13
    00000a10: 	punpcklwd	%xmm12, %xmm1
    00000a15: 	punpcklwd	%xmm12, %xmm15
    00000a1a: 	punpckhwd	%xmm12, %xmm13
    00000a1f: 	movdqa	%xmm8, %xmm12
    00000a24: 	punpckhwd	%xmm13, %xmm1
    00000a29: 	punpcklwd	%xmm10, %xmm12
    00000a2e: 	punpcklwd	%xmm13, %xmm15
    00000a33: 	movaps	%xmm1, 0x98(%rsp)
    00000a3b: 	movdqa	%xmm8, %xmm1
    00000a40: 	punpcklwd	%xmm10, %xmm8
    00000a45: 	movdqa	%xmm12, %xmm11
    00000a4a: 	punpckhwd	%xmm10, %xmm1
    00000a4f: 	movdqa	0xc8(%rsp), %xmm10
    00000a59: 	punpcklwd	%xmm1, %xmm8
    00000a5e: 	punpckhwd	%xmm1, %xmm11
    00000a63: 	punpcklwd	%xmm1, %xmm12
    00000a68: 	movdqa	%xmm8, %xmm1
    00000a6d: 	punpcklwd	%xmm11, %xmm12
    00000a72: 	punpckhwd	%xmm11, %xmm1
    00000a77: 	movdqa	%xmm7, %xmm11
    00000a7c: 	punpckhwd	%xmm6, %xmm11
    00000a81: 	movaps	%xmm1, 0xa8(%rsp)
    00000a89: 	movdqa	%xmm11, %xmm1
    00000a8e: 	movdqa	%xmm7, %xmm11
    00000a93: 	punpcklwd	%xmm6, %xmm11
    00000a98: 	movdqa	%xmm11, %xmm13
    00000a9d: 	punpckhwd	%xmm1, %xmm11
    00000aa2: 	punpcklwd	%xmm1, %xmm13
    00000aa7: 	movdqa	%xmm11, %xmm8
    00000aac: 	punpcklwd	%xmm11, %xmm13
    00000ab1: 	movdqa	%xmm7, %xmm11
    00000ab6: 	movdqa	0xe8(%rsp), %xmm7
    00000abf: 	punpcklwd	%xmm6, %xmm11
    00000ac4: 	punpcklwd	%xmm1, %xmm11
    00000ac9: 	movdqa	%xmm4, %xmm1
    00000acd: 	punpckhwd	%xmm8, %xmm11
    00000ad2: 	punpckhwd	%xmm2, %xmm1
    00000ad6: 	movdqa	%xmm7, %xmm8
    00000adb: 	movaps	%xmm11, 0xb8(%rsp)
    00000ae4: 	movdqa	%xmm4, %xmm11
    00000ae9: 	punpcklwd	%xmm2, %xmm4
    00000aed: 	punpcklwd	%xmm2, %xmm11
    00000af2: 	movdqa	%xmm4, %xmm2
    00000af6: 	movdqa	%xmm11, %xmm6
    00000afb: 	punpcklwd	%xmm1, %xmm2
    00000aff: 	punpcklwd	%xmm1, %xmm11
    00000b04: 	punpckhwd	%xmm1, %xmm6
    00000b08: 	movdqa	%xmm10, %xmm1
    00000b0d: 	punpckhwd	%xmm6, %xmm2
    00000b11: 	punpckhwd	%xmm9, %xmm1
    00000b16: 	punpcklwd	%xmm6, %xmm11
    00000b1b: 	movaps	%xmm2, 0x108(%rsp)
    00000b23: 	movdqa	%xmm10, %xmm2
    00000b28: 	punpcklwd	%xmm9, %xmm10
    00000b2d: 	punpcklwd	%xmm9, %xmm2
    00000b32: 	punpcklwd	%xmm1, %xmm10
    00000b37: 	movdqa	%xmm2, %xmm4
    00000b3b: 	punpcklwd	%xmm1, %xmm2
    00000b3f: 	punpckhwd	%xmm1, %xmm4
    00000b43: 	movdqa	%xmm7, %xmm1
    00000b47: 	punpckhwd	%xmm4, %xmm10
    00000b4c: 	punpcklwd	%xmm4, %xmm2
    00000b50: 	movaps	%xmm10, 0xc8(%rsp)
    00000b59: 	movdqa	0xf8(%rsp), %xmm9
    00000b63: 	movdqa	0x88(%rsp), %xmm10
    00000b6d: 	punpckhwd	%xmm9, %xmm1
    00000b72: 	punpcklwd	%xmm9, %xmm8
    00000b77: 	punpcklwd	%xmm9, %xmm7
    00000b7c: 	movdqa	%xmm8, %xmm4
    00000b81: 	punpcklwd	%xmm1, %xmm7
    00000b85: 	punpcklwd	%xmm1, %xmm8
    00000b8a: 	punpckhwd	%xmm1, %xmm4
    00000b8e: 	movdqa	%xmm7, %xmm1
    00000b92: 	movdqa	0x78(%rsp), %xmm7
    00000b98: 	punpcklwd	%xmm4, %xmm8
    00000b9d: 	punpckhwd	%xmm4, %xmm1
    00000ba1: 	movdqa	%xmm7, %xmm4
    00000ba5: 	movaps	%xmm1, 0xd8(%rsp)
    00000bad: 	movdqa	%xmm7, %xmm1
    00000bb1: 	punpcklwd	%xmm10, %xmm7
    00000bb6: 	punpcklwd	%xmm10, %xmm4
    00000bbb: 	punpckhwd	%xmm10, %xmm1
    00000bc0: 	movdqa	0x28(%rsp), %xmm10
    00000bc7: 	movdqa	%xmm4, %xmm6
    00000bcb: 	punpcklwd	%xmm1, %xmm7
    00000bcf: 	punpcklwd	%xmm1, %xmm4
    00000bd3: 	punpckhwd	%xmm1, %xmm6
    00000bd7: 	punpckhwd	%xmm6, %xmm7
    00000bdb: 	punpcklwd	%xmm6, %xmm4
    00000bdf: 	movdqa	%xmm14, %xmm6
    00000be4: 	movaps	%xmm7, 0x78(%rsp)
    00000be9: 	movdqa	%xmm14, %xmm7
    00000bee: 	punpckhwd	%xmm5, %xmm6
    00000bf2: 	punpcklwd	%xmm5, %xmm14
    00000bf7: 	punpcklwd	%xmm5, %xmm7
    00000bfb: 	movdqa	%xmm6, %xmm1
    00000bff: 	movdqa	-0x28(%rsp), %xmm5
    00000c05: 	movdqa	%xmm7, %xmm6
    00000c09: 	punpcklwd	%xmm1, %xmm14
    00000c0e: 	punpcklwd	%xmm1, %xmm7
    00000c12: 	punpckhwd	%xmm1, %xmm6
    00000c16: 	punpcklwd	%xmm6, %xmm7
    00000c1a: 	punpckhwd	%xmm6, %xmm14
    00000c1f: 	movdqa	0x48(%rsp), %xmm6
    00000c25: 	movaps	%xmm14, 0x88(%rsp)
    00000c2e: 	movdqa	%xmm6, %xmm1
    00000c32: 	movdqa	%xmm6, %xmm14
    00000c37: 	movdqa	0x8(%rsp), %xmm6
    00000c3d: 	punpcklwd	%xmm10, %xmm1
    00000c42: 	punpckhwd	%xmm10, %xmm14
    00000c47: 	movdqa	%xmm1, %xmm9
    00000c4c: 	punpcklwd	%xmm14, %xmm1
    00000c51: 	movdqa	%xmm6, %xmm10
    00000c56: 	movaps	%xmm14, 0xe8(%rsp)
    00000c5f: 	punpckhwd	%xmm14, %xmm9
    00000c64: 	movdqa	-0x18(%rsp), %xmm14
    00000c6b: 	movaps	%xmm9, 0xf8(%rsp)
    00000c74: 	punpcklwd	%xmm9, %xmm1
    00000c79: 	punpcklwd	%xmm14, %xmm6
    00000c7e: 	punpckhwd	%xmm14, %xmm10
    00000c83: 	movaps	%xmm10, 0x118(%rsp)
    00000c8c: 	movdqa	%xmm6, %xmm9
    00000c91: 	punpcklwd	%xmm10, %xmm6
    00000c96: 	punpckhwd	%xmm10, %xmm9
    00000c9b: 	movdqa	%xmm1, %xmm10
    00000ca0: 	movaps	%xmm9, 0x128(%rsp)
    00000ca9: 	punpcklwd	%xmm9, %xmm6
    00000cae: 	punpcklwd	%xmm6, %xmm1
    00000cb2: 	punpckhwd	%xmm6, %xmm10
    00000cb7: 	movdqa	%xmm1, %xmm6
    00000cbb: 	punpcklwd	%xmm10, %xmm1
    00000cc0: 	punpckhwd	%xmm10, %xmm6
    00000cc5: 	movdqa	%xmm2, %xmm10
    00000cca: 	punpcklwd	%xmm6, %xmm1
    00000cce: 	movdqa	%xmm2, %xmm6
    00000cd2: 	punpckhwd	%xmm8, %xmm10
    00000cd7: 	punpcklwd	%xmm8, %xmm6
    00000cdc: 	punpcklwd	%xmm8, %xmm2
    00000ce1: 	movdqa	-0x38(%rsp), %xmm8
    00000ce8: 	movdqa	%xmm6, %xmm14
    00000ced: 	punpcklwd	%xmm10, %xmm2
    00000cf2: 	punpcklwd	%xmm10, %xmm6
    00000cf7: 	punpckhwd	%xmm10, %xmm14
    00000cfc: 	punpckhwd	%xmm14, %xmm2
    00000d01: 	punpcklwd	%xmm14, %xmm6
    00000d06: 	paddw	%xmm2, %xmm6
    00000d0a: 	movdqa	%xmm8, %xmm2
    00000d0f: 	pmullw	%xmm1, %xmm6
    00000d13: 	movdqa	-0x48(%rsp), %xmm1
    00000d19: 	punpcklwd	%xmm1, %xmm8
    00000d1e: 	punpckhwd	%xmm1, %xmm2
    00000d22: 	movdqa	%xmm8, %xmm1
    00000d27: 	punpckhwd	%xmm2, %xmm8
    00000d2c: 	movaps	%xmm2, 0x138(%rsp)
    00000d34: 	movaps	%xmm8, 0x148(%rsp)
    00000d3d: 	punpcklwd	%xmm2, %xmm1
    00000d41: 	movdqa	%xmm0, %xmm2
    00000d45: 	punpcklwd	%xmm8, %xmm1
    00000d4a: 	movdqa	-0x68(%rsp), %xmm8
    00000d51: 	movdqa	%xmm1, %xmm10
    00000d56: 	punpckhwd	%xmm8, %xmm2
    00000d5b: 	movdqa	%xmm2, %xmm14
    00000d60: 	movdqa	%xmm0, %xmm2
    00000d64: 	punpcklwd	%xmm8, %xmm2
    00000d69: 	movdqa	%xmm2, %xmm9
    00000d6e: 	punpcklwd	%xmm14, %xmm2
    00000d73: 	punpckhwd	%xmm14, %xmm9
    00000d78: 	movaps	%xmm9, 0x158(%rsp)
    00000d81: 	punpcklwd	%xmm9, %xmm2
    00000d86: 	punpcklwd	%xmm2, %xmm1
    00000d8a: 	punpckhwd	%xmm2, %xmm10
    00000d8f: 	movdqa	%xmm1, %xmm2
    00000d93: 	punpcklwd	%xmm10, %xmm1
    00000d98: 	punpckhwd	%xmm10, %xmm2
    00000d9d: 	punpcklwd	%xmm2, %xmm1
    00000da1: 	movdqa	%xmm4, %xmm2
    00000da5: 	punpckhwd	%xmm7, %xmm2
    00000da9: 	movdqa	%xmm2, %xmm8
    00000dae: 	movdqa	%xmm4, %xmm2
    00000db2: 	punpcklwd	%xmm7, %xmm4
    00000db6: 	punpcklwd	%xmm7, %xmm2
    00000dba: 	punpcklwd	%xmm8, %xmm4
    00000dbf: 	movdqa	%xmm6, %xmm7
    00000dc3: 	movdqa	-0x78(%rsp), %xmm6
    00000dc9: 	movdqa	%xmm2, %xmm10
    00000dce: 	punpcklwd	%xmm8, %xmm2
    00000dd3: 	punpckhwd	%xmm8, %xmm10
    00000dd8: 	movdqa	-0x8(%rsp), %xmm8
    00000ddf: 	punpckhwd	%xmm10, %xmm4
    00000de4: 	punpcklwd	%xmm10, %xmm2
    00000de9: 	paddw	%xmm4, %xmm2
    00000ded: 	movdqa	%xmm6, %xmm4
    00000df1: 	pmullw	%xmm2, %xmm1
    00000df5: 	paddw	%xmm1, %xmm7
    00000df9: 	movdqa	%xmm6, %xmm1
    00000dfd: 	movaps	%xmm7, 0x168(%rsp)
    00000e05: 	movdqa	0x38(%rsp), %xmm7
    00000e0b: 	punpcklwd	%xmm7, %xmm1
    00000e0f: 	punpckhwd	%xmm7, %xmm4
    00000e13: 	movdqa	%xmm1, %xmm2
    00000e17: 	movaps	%xmm4, 0x178(%rsp)
    00000e1f: 	punpcklwd	%xmm4, %xmm1
    00000e23: 	punpckhwd	%xmm4, %xmm2
    00000e27: 	movdqa	0x18(%rsp), %xmm4
    00000e2d: 	movdqa	%xmm2, %xmm9
    00000e32: 	punpcklwd	%xmm2, %xmm1
    00000e36: 	movdqa	%xmm4, %xmm2
    00000e3a: 	movdqa	%xmm4, %xmm6
    00000e3e: 	movdqa	%xmm1, %xmm4
    00000e42: 	punpcklwd	%xmm8, %xmm2
    00000e47: 	punpckhwd	%xmm8, %xmm6
    00000e4c: 	movdqa	%xmm2, %xmm7
    00000e50: 	punpcklwd	%xmm6, %xmm2
    00000e54: 	punpckhwd	%xmm6, %xmm7
    00000e58: 	punpcklwd	%xmm7, %xmm2
    00000e5c: 	movaps	%xmm7, 0x188(%rsp)
    00000e64: 	punpcklwd	%xmm2, %xmm1
    00000e68: 	punpckhwd	%xmm2, %xmm4
    00000e6c: 	movdqa	%xmm1, %xmm2
    00000e70: 	punpcklwd	%xmm4, %xmm1
    00000e74: 	punpckhwd	%xmm4, %xmm2
    00000e78: 	movdqa	%xmm15, %xmm4
    00000e7d: 	punpcklwd	%xmm2, %xmm1
    00000e81: 	movdqa	%xmm15, %xmm2
    00000e86: 	punpcklwd	%xmm12, %xmm4
    00000e8b: 	punpckhwd	%xmm12, %xmm2
    00000e90: 	punpcklwd	%xmm12, %xmm15
    00000e95: 	movdqa	%xmm1, %xmm12
    00000e9a: 	movdqa	%xmm2, %xmm7
    00000e9e: 	movdqa	%xmm4, %xmm2
    00000ea2: 	movdqa	%xmm3, %xmm1
    00000ea6: 	punpckhwd	%xmm7, %xmm2
    00000eaa: 	punpcklwd	%xmm7, %xmm4
    00000eae: 	movdqa	%xmm2, %xmm8
    00000eb3: 	punpcklwd	%xmm2, %xmm4
    00000eb7: 	movdqa	%xmm15, %xmm2
    00000ebc: 	punpcklwd	%xmm7, %xmm2
    00000ec0: 	movdqa	-0x58(%rsp), %xmm7
    00000ec6: 	punpckhwd	%xmm8, %xmm2
    00000ecb: 	paddw	%xmm2, %xmm4
    00000ecf: 	movdqa	%xmm5, %xmm2
    00000ed3: 	punpckhwd	%xmm7, %xmm1
    00000ed7: 	pmullw	%xmm4, %xmm12
    00000edc: 	movdqa	0x68(%rsp), %xmm4
    00000ee2: 	punpckhwd	%xmm4, %xmm2
    00000ee6: 	movdqa	%xmm12, %xmm15
    00000eeb: 	movdqa	%xmm2, %xmm12
    00000ef0: 	movdqa	%xmm5, %xmm2
    00000ef4: 	punpcklwd	%xmm4, %xmm2
    00000ef8: 	movdqa	%xmm4, %xmm5
    00000efc: 	movdqa	%xmm2, %xmm10
    00000f01: 	punpcklwd	%xmm12, %xmm2
    00000f06: 	punpckhwd	%xmm12, %xmm10
    00000f0b: 	punpcklwd	%xmm10, %xmm2
    00000f10: 	movaps	%xmm10, 0x68(%rsp)
    00000f16: 	movdqa	%xmm1, %xmm10
    00000f1b: 	movdqa	%xmm3, %xmm1
    00000f1f: 	punpcklwd	%xmm7, %xmm1
    00000f23: 	movdqa	%xmm2, %xmm7
    00000f27: 	movdqa	%xmm1, %xmm4
    00000f2b: 	punpckhwd	%xmm10, %xmm1
    00000f30: 	punpcklwd	%xmm10, %xmm4
    00000f35: 	movaps	%xmm1, 0x198(%rsp)
    00000f3d: 	punpcklwd	%xmm1, %xmm4
    00000f41: 	punpcklwd	%xmm4, %xmm2
    00000f45: 	punpckhwd	%xmm4, %xmm7
    00000f49: 	movdqa	%xmm2, %xmm4
    00000f4d: 	punpcklwd	%xmm7, %xmm2
    00000f51: 	punpckhwd	%xmm7, %xmm4
    00000f55: 	punpcklwd	%xmm4, %xmm2
    00000f59: 	movdqa	%xmm13, %xmm4
    00000f5e: 	punpckhwd	%xmm11, %xmm4
    00000f63: 	movdqa	%xmm4, %xmm8
    00000f68: 	movdqa	%xmm13, %xmm4
    00000f6d: 	punpcklwd	%xmm11, %xmm13
    00000f72: 	punpcklwd	%xmm11, %xmm4
    00000f77: 	movdqa	%xmm4, %xmm7
    00000f7b: 	punpckhwd	%xmm8, %xmm4
    00000f80: 	punpcklwd	%xmm8, %xmm7
    00000f85: 	movdqa	%xmm4, %xmm1
    00000f89: 	punpcklwd	%xmm4, %xmm7
    00000f8d: 	movdqa	%xmm13, %xmm4
    00000f92: 	punpcklwd	%xmm8, %xmm4
    00000f97: 	punpckhwd	%xmm1, %xmm4
    00000f9b: 	movdqa	0x168(%rsp), %xmm1
    00000fa4: 	punpcklwd	-0x58(%rsp), %xmm3
    00000faa: 	paddw	%xmm4, %xmm7
    00000fae: 	movdqa	-0x78(%rsp), %xmm4
    00000fb4: 	punpcklwd	0x38(%rsp), %xmm4
    00000fba: 	pmullw	%xmm7, %xmm2
    00000fbe: 	punpcklwd	%xmm10, %xmm3
    00000fc3: 	punpcklwd	-0x68(%rsp), %xmm0
    00000fc9: 	movdqa	0x98(%rsp), %xmm13
    00000fd3: 	punpcklwd	0x178(%rsp), %xmm4
    00000fdc: 	punpckhwd	0x198(%rsp), %xmm3
    00000fe5: 	punpcklwd	%xmm14, %xmm0
    00000fea: 	punpckhwd	0x158(%rsp), %xmm0
    00000ff3: 	punpckhwd	%xmm9, %xmm4
    00000ff8: 	movdqa	0x18(%rsp), %xmm9
    00000fff: 	punpcklwd	-0x8(%rsp), %xmm9
    00001006: 	movdqa	%xmm4, %xmm11
    0000100b: 	punpcklwd	%xmm6, %xmm9
    00001010: 	paddw	%xmm2, %xmm15
    00001015: 	punpckhwd	0x188(%rsp), %xmm9
    0000101f: 	paddw	%xmm15, %xmm1
    00001024: 	movdqa	0xa8(%rsp), %xmm15
    0000102e: 	punpckhwd	%xmm9, %xmm11
    00001033: 	punpcklwd	%xmm9, %xmm4
    00001038: 	movdqa	0xd8(%rsp), %xmm9
    00001042: 	movdqa	%xmm11, %xmm2
    00001047: 	movdqa	%xmm4, %xmm11
    0000104c: 	punpckhwd	%xmm2, %xmm11
    00001051: 	punpcklwd	%xmm2, %xmm4
    00001055: 	punpcklwd	%xmm11, %xmm4
    0000105a: 	movdqa	%xmm13, %xmm11
    0000105f: 	punpckhwd	%xmm15, %xmm11
    00001064: 	movdqa	%xmm11, %xmm2
    00001069: 	movdqa	%xmm13, %xmm11
    0000106e: 	punpcklwd	%xmm15, %xmm13
    00001073: 	punpcklwd	%xmm15, %xmm11
    00001078: 	movdqa	%xmm13, %xmm6
    0000107d: 	movdqa	0xb8(%rsp), %xmm13
    00001087: 	movdqa	0xc8(%rsp), %xmm15
    00001091: 	movdqa	%xmm11, %xmm8
    00001096: 	punpcklwd	%xmm2, %xmm6
    0000109a: 	punpckhwd	%xmm2, %xmm11
    0000109f: 	punpcklwd	%xmm2, %xmm8
    000010a4: 	punpckhwd	%xmm11, %xmm6
    000010a9: 	punpcklwd	%xmm11, %xmm8
    000010ae: 	movdqa	%xmm13, %xmm11
    000010b3: 	paddw	%xmm6, %xmm8
    000010b8: 	pmullw	%xmm4, %xmm8
    000010bd: 	movdqa	%xmm5, %xmm4
    000010c1: 	movdqa	-0x28(%rsp), %xmm5
    000010c7: 	punpcklwd	%xmm4, %xmm5
    000010cb: 	movdqa	%xmm13, %xmm4
    000010d0: 	punpcklwd	%xmm12, %xmm5
    000010d5: 	punpckhwd	0x68(%rsp), %xmm5
    000010db: 	movdqa	0x108(%rsp), %xmm12
    000010e5: 	movdqa	%xmm5, %xmm7
    000010e9: 	punpcklwd	%xmm3, %xmm5
    000010ed: 	punpcklwd	%xmm12, %xmm11
    000010f2: 	punpckhwd	%xmm3, %xmm7
    000010f6: 	punpcklwd	%xmm12, %xmm13
    000010fb: 	punpckhwd	%xmm12, %xmm4
    00001100: 	movdqa	%xmm7, %xmm2
    00001104: 	movdqa	%xmm5, %xmm7
    00001108: 	movdqa	%xmm11, %xmm3
    0000110d: 	punpckhwd	%xmm2, %xmm7
    00001111: 	punpcklwd	%xmm2, %xmm5
    00001115: 	movdqa	%xmm13, %xmm2
    0000111a: 	punpckhwd	%xmm4, %xmm11
    0000111f: 	punpcklwd	%xmm4, %xmm3
    00001123: 	punpcklwd	%xmm4, %xmm2
    00001127: 	punpckhwd	%xmm11, %xmm2
    0000112c: 	punpcklwd	%xmm11, %xmm3
    00001131: 	punpcklwd	%xmm7, %xmm5
    00001135: 	paddw	%xmm2, %xmm3
    00001139: 	movdqa	0x48(%rsp), %xmm2
    0000113f: 	punpcklwd	0x28(%rsp), %xmm2
    00001145: 	punpcklwd	0xe8(%rsp), %xmm2
    0000114e: 	pmullw	%xmm3, %xmm5
    00001152: 	punpckhwd	0xf8(%rsp), %xmm2
    0000115b: 	movdqa	0x8(%rsp), %xmm3
    00001161: 	punpcklwd	-0x18(%rsp), %xmm3
    00001167: 	punpcklwd	0x118(%rsp), %xmm3
    00001170: 	movdqa	%xmm2, %xmm4
    00001174: 	punpckhwd	0x128(%rsp), %xmm3
    0000117d: 	punpcklwd	%xmm3, %xmm2
    00001181: 	punpckhwd	%xmm3, %xmm4
    00001185: 	movdqa	%xmm15, %xmm3
    0000118a: 	movdqa	%xmm2, %xmm13
    0000118f: 	punpcklwd	%xmm9, %xmm3
    00001194: 	punpcklwd	%xmm4, %xmm2
    00001198: 	punpckhwd	%xmm4, %xmm13
    0000119d: 	movdqa	%xmm15, %xmm4
    000011a2: 	punpcklwd	%xmm9, %xmm15
    000011a7: 	punpckhwd	%xmm9, %xmm4
    000011ac: 	movdqa	%xmm3, %xmm11
    000011b1: 	movdqa	%xmm15, %xmm7
    000011b6: 	punpckhwd	%xmm4, %xmm11
    000011bb: 	punpcklwd	%xmm4, %xmm3
    000011bf: 	punpcklwd	%xmm4, %xmm7
    000011c3: 	punpcklwd	%xmm11, %xmm3
    000011c8: 	punpckhwd	%xmm11, %xmm7
    000011cd: 	punpcklwd	%xmm13, %xmm2
    000011d2: 	paddw	%xmm7, %xmm3
    000011d6: 	paddw	%xmm8, %xmm5
    000011db: 	pmullw	%xmm3, %xmm2
    000011df: 	paddw	%xmm2, %xmm5
    000011e3: 	paddw	%xmm1, %xmm5
    000011e7: 	movdqa	-0x38(%rsp), %xmm1
    000011ed: 	punpcklwd	-0x48(%rsp), %xmm1
    000011f3: 	punpcklwd	0x138(%rsp), %xmm1
    000011fc: 	punpckhwd	0x148(%rsp), %xmm1
    00001205: 	movdqa	%xmm1, %xmm2
    00001209: 	punpcklwd	%xmm0, %xmm1
    0000120d: 	punpckhwd	%xmm0, %xmm2
    00001211: 	movdqa	0x78(%rsp), %xmm0
    00001217: 	movdqa	%xmm1, %xmm3
    0000121b: 	movdqa	0x88(%rsp), %xmm6
    00001224: 	punpckhwd	%xmm2, %xmm3
    00001228: 	punpcklwd	%xmm2, %xmm1
    0000122c: 	movdqa	%xmm0, %xmm2
    00001230: 	punpcklwd	%xmm3, %xmm1
    00001234: 	movdqa	%xmm0, %xmm3
    00001238: 	punpcklwd	%xmm6, %xmm2
    0000123c: 	punpckhwd	%xmm6, %xmm3
    00001240: 	punpcklwd	%xmm6, %xmm0
    00001244: 	movdqa	%xmm2, %xmm4
    00001248: 	punpcklwd	%xmm3, %xmm0
    0000124c: 	punpcklwd	%xmm3, %xmm2
    00001250: 	punpckhwd	%xmm3, %xmm4
    00001254: 	punpcklwd	%xmm4, %xmm2
    00001258: 	punpckhwd	%xmm4, %xmm0
    0000125c: 	paddw	%xmm0, %xmm2
    00001260: 	pmullw	%xmm2, %xmm1
    00001264: 	paddw	0x58(%rsp), %xmm1
    0000126a: 	paddw	%xmm1, %xmm5
    0000126e: 	movaps	%xmm5, 0x58(%rsp)
    00001273: 	cmpq	%rax, %r10
    00001276: 	jne	.Ltmp372 # Offset: 4726
    0000127c: 	movdqa	%xmm5, %xmm0
    00001280: 	leaq	(,%rdx,8), %r9
    00001288: 	shlq	$0x7, %rdx
    0000128c: 	psrldq	$0x8, %xmm0
    00001291: 	paddw	%xmm5, %xmm0
    00001295: 	movdqa	%xmm0, %xmm1
    00001299: 	psrldq	$0x4, %xmm1
    0000129e: 	paddw	%xmm1, %xmm0
    000012a2: 	movdqa	%xmm0, %xmm1
    000012a6: 	psrldq	$0x2, %xmm1
    000012ab: 	paddw	%xmm1, %xmm0
    000012af: 	pextrw	$0x0, %xmm0, %eax
.Ltmp379:
    000012b4: 	subq	%r9, %r11
    000012b7: 	movq	%r11, %rbp
    000012ba: 	cmpq	$0x3, %r11
    000012be: 	jbe	.Ltmp373 # Offset: 4798
    000012c4: 	shlq	$0x5, %r9
    000012c8: 	andq	$-0x4, %rbp
    000012cc: 	leaq	(%rdi,%r9), %r10
    000012d0: 	addq	%rsi, %r9
    000012d3: 	shlq	$0x4, %rbp
    000012d7: 	movq	(%r10), %xmm8
    000012dc: 	movq	0x8(%r10), %xmm13
    000012e2: 	addq	%rbp, %rdx
    000012e5: 	movq	0x10(%r10), %xmm6
    000012eb: 	movq	0x18(%r10), %xmm15
    000012f1: 	movdqa	%xmm8, %xmm0
    000012f6: 	movq	0x28(%r10), %xmm14
    000012fc: 	movq	0x60(%r10), %r15
    00001300: 	punpcklwd	%xmm13, %xmm0
    00001305: 	movq	0x38(%r10), %xmm12
    0000130b: 	movq	0x70(%r10), %r14
    0000130f: 	pshufd	$0xe, %xmm0, %xmm0
    00001314: 	movq	0x48(%r10), %xmm11
    0000131a: 	movq	0x58(%r10), %xmm10
    00001320: 	movq	%xmm0, %r11
    00001325: 	movdqa	%xmm8, %xmm0
    0000132a: 	movq	0x68(%r10), %xmm9
    00001330: 	movq	0x78(%r10), %xmm7
    00001336: 	movq	%r11, %xmm1
    0000133b: 	punpcklwd	%xmm13, %xmm0
    00001340: 	movq	0x20(%r10), %xmm5
    00001346: 	movq	0x30(%r10), %xmm4
    0000134c: 	punpcklwd	%xmm1, %xmm0
    00001350: 	movq	0x40(%r10), %xmm3
    00001356: 	movq	0x50(%r10), %xmm2
    0000135c: 	punpcklwd	%xmm13, %xmm8
    00001361: 	movq	%xmm0, %r10
    00001366: 	movq	%r11, %xmm0
    0000136b: 	movdqa	%xmm6, %xmm13
    00001370: 	punpcklwd	%xmm0, %xmm8
    00001375: 	movdqa	%xmm6, %xmm0
    00001379: 	punpcklwd	%xmm15, %xmm13
    0000137e: 	punpcklwd	%xmm15, %xmm0
    00001383: 	punpcklwd	%xmm15, %xmm6
    00001388: 	movdqa	%xmm5, %xmm15
    0000138d: 	pshufd	$0xe, %xmm0, %xmm0
    00001392: 	punpcklwd	%xmm14, %xmm15
    00001397: 	movq	%r15, %xmm1
    0000139c: 	punpcklwd	%xmm0, %xmm13
    000013a1: 	punpcklwd	%xmm0, %xmm6
    000013a5: 	movdqa	%xmm5, %xmm0
    000013a9: 	punpcklwd	%xmm14, %xmm0
    000013ae: 	punpcklwd	%xmm14, %xmm5
    000013b3: 	movdqa	%xmm4, %xmm14
    000013b8: 	pshufd	$0xe, %xmm0, %xmm0
    000013bd: 	punpcklwd	%xmm12, %xmm14
    000013c2: 	punpcklwd	%xmm9, %xmm1
    000013c7: 	punpcklwd	%xmm0, %xmm15
    000013cc: 	punpcklwd	%xmm0, %xmm5
    000013d0: 	movdqa	%xmm4, %xmm0
    000013d4: 	punpcklwd	%xmm12, %xmm0
    000013d9: 	punpcklwd	%xmm12, %xmm4
    000013de: 	movdqa	%xmm3, %xmm12
    000013e3: 	pshufd	$0xe, %xmm0, %xmm0
    000013e8: 	punpcklwd	%xmm11, %xmm12
    000013ed: 	pshufd	$0xe, %xmm8, %xmm8
    000013f3: 	punpcklwd	%xmm0, %xmm14
    000013f8: 	punpcklwd	%xmm0, %xmm4
    000013fc: 	movdqa	%xmm3, %xmm0
    00001400: 	punpcklwd	%xmm11, %xmm0
    00001405: 	punpcklwd	%xmm11, %xmm3
    0000140a: 	movdqa	%xmm2, %xmm11
    0000140f: 	pshufd	$0xe, %xmm0, %xmm0
    00001414: 	punpcklwd	%xmm10, %xmm11
    00001419: 	pshufd	$0xe, %xmm6, %xmm6
    0000141e: 	punpcklwd	%xmm0, %xmm12
    00001423: 	punpcklwd	%xmm0, %xmm3
    00001427: 	movdqa	%xmm2, %xmm0
    0000142b: 	punpcklwd	%xmm10, %xmm0
    00001430: 	punpcklwd	%xmm10, %xmm2
    00001435: 	movq	%r15, %xmm10
    0000143a: 	pshufd	$0xe, %xmm0, %xmm0
    0000143f: 	punpcklwd	%xmm9, %xmm10
    00001444: 	pshufd	$0xe, %xmm5, %xmm5
    00001449: 	punpcklwd	%xmm0, %xmm11
    0000144e: 	punpcklwd	%xmm0, %xmm2
    00001452: 	movq	%r15, %xmm0
    00001457: 	punpcklwd	%xmm9, %xmm0
    0000145c: 	pshufd	$0xe, %xmm4, %xmm4
    00001461: 	pshufd	$0xe, %xmm3, %xmm3
    00001466: 	pshufd	$0xe, %xmm0, %xmm0
    0000146b: 	pshufd	$0xe, %xmm2, %xmm2
    00001470: 	punpcklwd	%xmm0, %xmm10
    00001475: 	punpcklwd	%xmm0, %xmm1
    00001479: 	movq	%r14, %xmm0
    0000147e: 	punpcklwd	%xmm7, %xmm0
    00001482: 	pshufd	$0xe, %xmm1, %xmm1
    00001487: 	pshufd	$0xe, %xmm0, %xmm0
    0000148c: 	movq	%xmm0, %r11
    00001491: 	movq	%r14, %xmm0
    00001496: 	punpcklwd	%xmm7, %xmm0
    0000149a: 	movdqa	%xmm0, %xmm9
    0000149f: 	movq	%r11, %xmm0
    000014a4: 	punpcklwd	%xmm0, %xmm9
    000014a9: 	movq	%r14, %xmm0
    000014ae: 	punpcklwd	%xmm7, %xmm0
    000014b2: 	movq	%r11, %xmm7
    000014b7: 	punpcklwd	%xmm7, %xmm0
    000014bb: 	movq	%r10, %xmm7
    000014c0: 	punpcklwd	%xmm13, %xmm7
    000014c5: 	pshufd	$0xe, %xmm0, %xmm0
    000014ca: 	pshufd	$0xe, %xmm7, %xmm7
    000014cf: 	movq	%xmm0, %r14
    000014d4: 	movq	%xmm7, %r11
    000014d9: 	movq	%r10, %xmm7
    000014de: 	punpcklwd	%xmm13, %xmm7
    000014e3: 	movq	%xmm7, %r15
    000014e8: 	movq	%r11, %xmm7
    000014ed: 	movq	%r15, %xmm0
    000014f2: 	punpcklwd	%xmm7, %xmm0
    000014f6: 	movq	%r10, %xmm7
    000014fb: 	punpcklwd	%xmm13, %xmm7
    00001500: 	movq	%r11, %xmm13
    00001505: 	movq	%xmm0, %r15
    0000150a: 	movq	(%r9), %xmm0
    0000150f: 	punpcklwd	%xmm13, %xmm7
    00001514: 	movdqa	%xmm15, %xmm13
    00001519: 	punpcklwd	%xmm14, %xmm13
    0000151e: 	pshufd	$0xe, %xmm7, %xmm7
    00001523: 	pshufd	$0xe, %xmm13, %xmm13
    00001529: 	movq	%xmm7, -0x78(%rsp)
    0000152f: 	movq	%xmm13, %r10
    00001534: 	movdqa	%xmm15, %xmm13
    00001539: 	punpcklwd	%xmm14, %xmm15
    0000153e: 	punpcklwd	%xmm14, %xmm13
    00001543: 	movdqa	%xmm12, %xmm14
    00001548: 	movq	%xmm13, %r12
    0000154d: 	movq	%r10, %xmm13
    00001552: 	punpcklwd	%xmm11, %xmm14
    00001557: 	movq	%r12, %xmm7
    0000155c: 	pshufd	$0xe, %xmm14, %xmm14
    00001562: 	punpcklwd	%xmm13, %xmm7
    00001567: 	movdqa	%xmm15, %xmm13
    0000156c: 	movq	%r10, %xmm15
    00001571: 	punpcklwd	%xmm15, %xmm13
    00001576: 	movdqa	%xmm12, %xmm15
    0000157b: 	punpcklwd	%xmm11, %xmm12
    00001580: 	punpcklwd	%xmm11, %xmm15
    00001585: 	movdqa	%xmm10, %xmm11
    0000158a: 	punpcklwd	%xmm14, %xmm12
    0000158f: 	punpcklwd	%xmm14, %xmm15
    00001594: 	punpcklwd	%xmm9, %xmm11
    00001599: 	movdqa	%xmm10, %xmm14
    0000159e: 	pshufd	$0xe, %xmm11, %xmm11
    000015a4: 	punpcklwd	%xmm9, %xmm14
    000015a9: 	punpcklwd	%xmm9, %xmm10
    000015ae: 	movq	%xmm15, -0x58(%rsp)
    000015b5: 	punpcklwd	%xmm11, %xmm14
    000015ba: 	movdqa	%xmm8, %xmm9
    000015bf: 	punpcklwd	%xmm11, %xmm10
    000015c4: 	punpcklwd	%xmm6, %xmm9
    000015c9: 	movdqa	%xmm8, %xmm11
    000015ce: 	movq	%xmm14, -0x38(%rsp)
    000015d5: 	movdqa	%xmm8, %xmm14
    000015da: 	pshufd	$0xe, %xmm9, %xmm9
    000015e0: 	punpcklwd	%xmm6, %xmm14
    000015e5: 	punpcklwd	%xmm6, %xmm11
    000015ea: 	punpcklwd	%xmm9, %xmm14
    000015ef: 	punpcklwd	%xmm9, %xmm11
    000015f4: 	movdqa	%xmm5, %xmm9
    000015f9: 	punpcklwd	%xmm4, %xmm9
    000015fe: 	movq	%xmm14, -0x18(%rsp)
    00001605: 	movq	0x8(%r9), %xmm14
    0000160b: 	pshufd	$0xe, %xmm13, %xmm13
    00001611: 	pshufd	$0xe, %xmm9, %xmm9
    00001617: 	pshufd	$0xe, %xmm12, %xmm12
    0000161d: 	pshufd	$0xe, %xmm10, %xmm10
    00001623: 	movq	%xmm13, -0x68(%rsp)
    0000162a: 	movdqa	%xmm9, %xmm6
    0000162f: 	movdqa	%xmm5, %xmm9
    00001634: 	punpcklwd	%xmm4, %xmm5
    00001638: 	movq	%xmm12, -0x48(%rsp)
    0000163f: 	punpcklwd	%xmm4, %xmm9
    00001644: 	punpcklwd	%xmm6, %xmm5
    00001648: 	movdqa	%xmm3, %xmm4
    0000164c: 	movq	%xmm10, -0x28(%rsp)
    00001653: 	pshufd	$0xe, %xmm5, %xmm5
    00001658: 	punpcklwd	%xmm2, %xmm4
    0000165c: 	punpcklwd	%xmm6, %xmm9
    00001661: 	pshufd	$0xe, %xmm4, %xmm4
    00001666: 	movq	%xmm5, 0x8(%rsp)
    0000166c: 	movdqa	%xmm3, %xmm5
    00001670: 	punpcklwd	%xmm2, %xmm3
    00001674: 	punpcklwd	%xmm4, %xmm3
    00001678: 	punpcklwd	%xmm2, %xmm5
    0000167c: 	pshufd	$0xe, %xmm11, %xmm11
    00001682: 	movq	%xmm9, 0x58(%rsp)
    00001689: 	pshufd	$0xe, %xmm3, %xmm3
    0000168e: 	punpcklwd	%xmm4, %xmm5
    00001692: 	movdqa	%xmm1, %xmm4
    00001696: 	movq	%xmm11, -0x8(%rsp)
    0000169d: 	movq	%xmm3, 0x28(%rsp)
    000016a3: 	movq	%r14, %xmm3
    000016a8: 	movq	%xmm7, %r12
    000016ad: 	punpcklwd	%xmm3, %xmm4
    000016b1: 	movq	%xmm5, 0x18(%rsp)
    000016b7: 	pshufd	$0xe, %xmm4, %xmm4
    000016bc: 	movdqa	%xmm4, %xmm2
    000016c0: 	movdqa	%xmm1, %xmm4
    000016c4: 	punpcklwd	%xmm3, %xmm1
    000016c8: 	punpcklwd	%xmm3, %xmm4
    000016cc: 	punpcklwd	%xmm2, %xmm1
    000016d0: 	punpcklwd	%xmm2, %xmm4
    000016d4: 	movdqa	%xmm0, %xmm2
    000016d8: 	pshufd	$0xe, %xmm1, %xmm1
    000016dd: 	punpcklwd	%xmm14, %xmm2
    000016e2: 	movq	%xmm4, 0x38(%rsp)
    000016e8: 	pshufd	$0xe, %xmm2, %xmm2
    000016ed: 	movq	%xmm1, 0x48(%rsp)
    000016f3: 	movq	0x10(%r9), %xmm15
    000016f9: 	movq	0x20(%r9), %r14
    000016fd: 	movq	0x28(%r9), %xmm10
    00001703: 	movq	0x58(%r9), %r11
    00001707: 	movq	0x68(%r9), %xmm4
    0000170d: 	movq	0x18(%r9), %r10
    00001711: 	movq	%r14, %xmm13
    00001716: 	movq	0x30(%r9), %xmm9
    0000171c: 	movq	0x38(%r9), %xmm3
    00001722: 	punpcklwd	%xmm10, %xmm13
    00001727: 	movq	0x40(%r9), %xmm1
    0000172d: 	movq	0x48(%r9), %xmm12
    00001733: 	movq	0x50(%r9), %xmm11
    00001739: 	movq	0x60(%r9), %xmm8
    0000173f: 	movq	0x70(%r9), %xmm6
    00001745: 	movq	0x78(%r9), %xmm5
    0000174b: 	movq	%xmm2, %r9
    00001750: 	movdqa	%xmm0, %xmm2
    00001754: 	punpcklwd	%xmm14, %xmm0
    00001759: 	movq	%r9, %xmm7
    0000175e: 	punpcklwd	%xmm14, %xmm2
    00001763: 	movq	%xmm0, %r13
    00001768: 	punpcklwd	%xmm7, %xmm2
    0000176c: 	movq	%r9, %xmm0
    00001771: 	movq	%r13, %xmm7
    00001776: 	movdqa	%xmm15, %xmm14
    0000177b: 	punpcklwd	%xmm0, %xmm7
    0000177f: 	movq	%r10, %xmm0
    00001784: 	pshufd	$0xe, %xmm7, %xmm7
    00001789: 	punpcklwd	%xmm0, %xmm14
    0000178e: 	movq	%xmm7, %r13
    00001793: 	movdqa	%xmm15, %xmm7
    00001798: 	punpcklwd	%xmm0, %xmm7
    0000179c: 	pshufd	$0xe, %xmm7, %xmm7
    000017a1: 	movdqa	%xmm7, %xmm0
    000017a5: 	punpcklwd	%xmm0, %xmm14
    000017aa: 	movq	%r10, %xmm0
    000017af: 	punpcklwd	%xmm0, %xmm15
    000017b4: 	movdqa	%xmm7, %xmm0
    000017b8: 	movq	%r14, %xmm7
    000017bd: 	punpcklwd	%xmm10, %xmm7
    000017c2: 	punpcklwd	%xmm0, %xmm15
    000017c7: 	movdqa	%xmm13, %xmm0
    000017cc: 	pshufd	$0xe, %xmm7, %xmm7
    000017d1: 	pshufd	$0xe, %xmm15, %xmm15
    000017d7: 	movdqa	%xmm7, %xmm13
    000017dc: 	punpcklwd	%xmm13, %xmm0
    000017e1: 	movq	%r14, %xmm13
    000017e6: 	punpcklwd	%xmm10, %xmm13
    000017eb: 	movq	%xmm0, %r10
    000017f0: 	movdqa	%xmm9, %xmm10
    000017f5: 	movdqa	%xmm13, %xmm0
    000017fa: 	movdqa	%xmm7, %xmm13
    000017ff: 	punpcklwd	%xmm3, %xmm10
    00001804: 	punpcklwd	%xmm13, %xmm0
    00001809: 	pshufd	$0xe, %xmm10, %xmm10
    0000180f: 	pshufd	$0xe, %xmm0, %xmm0
    00001814: 	movdqa	%xmm10, %xmm7
    00001819: 	movq	%xmm0, %r9
    0000181e: 	movdqa	%xmm9, %xmm0
    00001823: 	punpcklwd	%xmm3, %xmm0
    00001827: 	movdqa	%xmm7, %xmm3
    0000182b: 	movq	%r9, %xmm13
    00001830: 	movdqa	%xmm0, %xmm9
    00001835: 	movdqa	%xmm0, %xmm10
    0000183a: 	movdqa	%xmm1, %xmm0
    0000183e: 	punpcklwd	%xmm3, %xmm9
    00001843: 	movdqa	%xmm1, %xmm3
    00001847: 	punpcklwd	%xmm7, %xmm10
    0000184c: 	punpcklwd	%xmm12, %xmm3
    00001851: 	punpcklwd	%xmm12, %xmm0
    00001856: 	pshufd	$0xe, %xmm9, %xmm9
    0000185c: 	pshufd	$0xe, %xmm3, %xmm3
    00001861: 	movdqa	%xmm0, %xmm1
    00001865: 	punpcklwd	%xmm9, %xmm13
    0000186a: 	movdqa	%xmm3, %xmm7
    0000186e: 	movdqa	%xmm0, %xmm3
    00001872: 	movq	%r11, %xmm0
    00001877: 	movdqa	%xmm7, %xmm12
    0000187c: 	punpcklwd	%xmm7, %xmm3
    00001880: 	punpcklwd	%xmm12, %xmm1
    00001885: 	movdqa	%xmm11, %xmm12
    0000188a: 	punpcklwd	%xmm0, %xmm12
    0000188f: 	movdqa	%xmm11, %xmm0
    00001894: 	pshufd	$0xe, %xmm1, %xmm1
    00001899: 	pshufd	$0xe, %xmm12, %xmm12
    0000189f: 	movdqa	%xmm12, %xmm7
    000018a4: 	movq	%r11, %xmm12
    000018a9: 	punpcklwd	%xmm12, %xmm0
    000018ae: 	movdqa	%xmm0, %xmm12
    000018b3: 	movq	%r11, %xmm0
    000018b8: 	punpcklwd	%xmm0, %xmm11
    000018bd: 	punpcklwd	%xmm7, %xmm12
    000018c2: 	movdqa	%xmm8, %xmm0
    000018c7: 	punpcklwd	%xmm7, %xmm11
    000018cc: 	movdqa	%xmm8, %xmm7
    000018d1: 	punpcklwd	%xmm4, %xmm0
    000018d5: 	punpcklwd	%xmm4, %xmm7
    000018d9: 	punpcklwd	%xmm4, %xmm8
    000018de: 	pshufd	$0xe, %xmm11, %xmm11
    000018e4: 	pshufd	$0xe, %xmm7, %xmm7
    000018e9: 	movdqa	%xmm7, %xmm4
    000018ed: 	punpcklwd	%xmm7, %xmm0
    000018f1: 	punpcklwd	%xmm4, %xmm8
    000018f6: 	movdqa	%xmm6, %xmm4
    000018fa: 	movq	%xmm0, %r11
    000018ff: 	punpcklwd	%xmm5, %xmm4
    00001903: 	movdqa	%xmm6, %xmm0
    00001907: 	pshufd	$0xe, %xmm8, %xmm8
    0000190d: 	pshufd	$0xe, %xmm4, %xmm4
    00001912: 	punpcklwd	%xmm5, %xmm0
    00001916: 	movdqa	%xmm4, %xmm7
    0000191a: 	movdqa	%xmm0, %xmm6
    0000191e: 	movdqa	%xmm0, %xmm4
    00001922: 	movdqa	%xmm7, %xmm5
    00001926: 	movdqa	%xmm2, %xmm0
    0000192a: 	punpcklwd	%xmm7, %xmm4
    0000192e: 	punpcklwd	%xmm5, %xmm6
    00001932: 	movdqa	%xmm2, %xmm5
    00001936: 	punpcklwd	%xmm14, %xmm0
    0000193b: 	punpcklwd	%xmm14, %xmm5
    00001940: 	movdqa	%xmm0, %xmm2
    00001944: 	pshufd	$0xe, %xmm6, %xmm6
    00001949: 	pshufd	$0xe, %xmm5, %xmm5
    0000194e: 	movdqa	%xmm5, %xmm7
    00001952: 	movdqa	%xmm0, %xmm5
    00001956: 	movq	%r10, %xmm0
    0000195b: 	punpcklwd	%xmm7, %xmm5
    0000195f: 	punpcklwd	%xmm7, %xmm2
    00001963: 	movq	%r10, %xmm7
    00001968: 	punpcklwd	%xmm10, %xmm0
    0000196d: 	punpcklwd	%xmm10, %xmm7
    00001972: 	pshufd	$0xe, %xmm2, %xmm2
    00001977: 	pshufd	$0xe, %xmm7, %xmm7
    0000197c: 	movdqa	%xmm0, %xmm14
    00001981: 	movq	%r10, %xmm0
    00001986: 	punpcklwd	%xmm10, %xmm0
    0000198b: 	movdqa	%xmm7, %xmm10
    00001990: 	punpcklwd	%xmm7, %xmm14
    00001995: 	punpcklwd	%xmm10, %xmm0
    0000199a: 	movdqa	%xmm3, %xmm10
    0000199f: 	pshufd	$0xe, %xmm0, %xmm0
    000019a4: 	punpcklwd	%xmm12, %xmm10
    000019a9: 	movq	%xmm0, %r10
    000019ae: 	pshufd	$0xe, %xmm10, %xmm10
    000019b4: 	movdqa	%xmm3, %xmm0
    000019b8: 	movdqa	%xmm10, %xmm7
    000019bd: 	punpcklwd	%xmm12, %xmm0
    000019c2: 	movdqa	%xmm0, %xmm3
    000019c6: 	movdqa	%xmm7, %xmm12
    000019cb: 	movdqa	%xmm0, %xmm10
    000019d0: 	punpcklwd	%xmm12, %xmm3
    000019d5: 	movq	%r11, %xmm12
    000019da: 	movq	%r11, %xmm0
    000019df: 	punpcklwd	%xmm4, %xmm12
    000019e4: 	punpcklwd	%xmm4, %xmm0
    000019e8: 	punpcklwd	%xmm7, %xmm10
    000019ed: 	pshufd	$0xe, %xmm12, %xmm12
    000019f3: 	pshufd	$0xe, %xmm3, %xmm3
    000019f8: 	movdqa	%xmm12, %xmm7
    000019fd: 	movdqa	%xmm0, %xmm12
    00001a02: 	movq	%r11, %xmm0
    00001a07: 	punpcklwd	%xmm4, %xmm0
    00001a0b: 	movdqa	%xmm7, %xmm4
    00001a0f: 	punpcklwd	%xmm7, %xmm12
    00001a14: 	punpcklwd	%xmm4, %xmm0
    00001a18: 	movq	%r13, %xmm4
    00001a1d: 	pshufd	$0xe, %xmm0, %xmm0
    00001a22: 	punpcklwd	%xmm15, %xmm4
    00001a27: 	movq	%xmm0, %r11
    00001a2c: 	movq	%r13, %xmm0
    00001a31: 	pshufd	$0xe, %xmm4, %xmm4
    00001a36: 	punpcklwd	%xmm15, %xmm0
    00001a3b: 	movdqa	%xmm4, %xmm7
    00001a3f: 	movdqa	%xmm0, %xmm4
    00001a43: 	movq	%r13, %xmm0
    00001a48: 	punpcklwd	%xmm15, %xmm0
    00001a4d: 	movdqa	%xmm7, %xmm15
    00001a52: 	punpcklwd	%xmm7, %xmm4
    00001a56: 	punpcklwd	%xmm15, %xmm0
    00001a5b: 	movq	%r9, %xmm15
    00001a60: 	punpcklwd	%xmm9, %xmm15
    00001a65: 	pshufd	$0xe, %xmm0, %xmm0
    00001a6a: 	pshufd	$0xe, %xmm15, %xmm15
    00001a70: 	movdqa	%xmm15, %xmm7
    00001a75: 	movq	%r9, %xmm15
    00001a7a: 	punpcklwd	%xmm9, %xmm15
    00001a7f: 	movdqa	%xmm7, %xmm9
    00001a84: 	punpcklwd	%xmm9, %xmm13
    00001a89: 	movdqa	%xmm1, %xmm9
    00001a8e: 	punpcklwd	%xmm7, %xmm15
    00001a93: 	punpcklwd	%xmm11, %xmm9
    00001a98: 	pshufd	$0xe, %xmm13, %xmm13
    00001a9e: 	pshufd	$0xe, %xmm9, %xmm9
    00001aa4: 	movq	%xmm13, %r9
    00001aa9: 	movdqa	%xmm9, %xmm7
    00001aae: 	movdqa	%xmm1, %xmm9
    00001ab3: 	punpcklwd	%xmm11, %xmm1
    00001ab8: 	punpcklwd	%xmm11, %xmm9
    00001abd: 	movdqa	%xmm7, %xmm11
    00001ac2: 	punpcklwd	%xmm11, %xmm1
    00001ac7: 	movdqa	%xmm8, %xmm11
    00001acc: 	punpcklwd	%xmm7, %xmm9
    00001ad1: 	punpcklwd	%xmm6, %xmm11
    00001ad6: 	movdqa	%xmm8, %xmm7
    00001adb: 	punpcklwd	%xmm6, %xmm8
    00001ae0: 	pshufd	$0xe, %xmm11, %xmm11
    00001ae6: 	punpcklwd	%xmm6, %xmm7
    00001aea: 	movdqa	%xmm5, %xmm6
    00001aee: 	punpcklwd	%xmm11, %xmm7
    00001af3: 	punpcklwd	%xmm11, %xmm8
    00001af8: 	punpcklwd	%xmm14, %xmm6
    00001afd: 	movdqa	%xmm5, %xmm11
    00001b02: 	pshufd	$0xe, %xmm6, %xmm6
    00001b07: 	punpcklwd	%xmm14, %xmm5
    00001b0c: 	punpcklwd	%xmm14, %xmm11
    00001b11: 	punpcklwd	%xmm6, %xmm5
    00001b15: 	movdqa	%xmm10, %xmm14
    00001b1a: 	punpcklwd	%xmm6, %xmm11
    00001b1f: 	movdqa	%xmm10, %xmm6
    00001b24: 	punpcklwd	%xmm12, %xmm14
    00001b29: 	punpcklwd	%xmm12, %xmm6
    00001b2e: 	punpcklwd	%xmm12, %xmm10
    00001b33: 	movdqa	%xmm4, %xmm12
    00001b38: 	pshufd	$0xe, %xmm6, %xmm6
    00001b3d: 	punpcklwd	%xmm15, %xmm12
    00001b42: 	movdqa	%xmm9, %xmm13
    00001b47: 	punpcklwd	%xmm6, %xmm14
    00001b4c: 	punpcklwd	%xmm6, %xmm10
    00001b51: 	movdqa	%xmm4, %xmm6
    00001b55: 	punpcklwd	%xmm15, %xmm6
    00001b5a: 	punpcklwd	%xmm15, %xmm4
    00001b5f: 	movdqa	%xmm7, %xmm15
    00001b64: 	pshufd	$0xe, %xmm6, %xmm6
    00001b69: 	punpcklwd	%xmm15, %xmm13
    00001b6e: 	movq	%r10, %xmm7
    00001b73: 	punpcklwd	%xmm6, %xmm12
    00001b78: 	punpcklwd	%xmm6, %xmm4
    00001b7c: 	movdqa	%xmm9, %xmm6
    00001b81: 	punpcklwd	%xmm15, %xmm6
    00001b86: 	movdqa	%xmm13, %xmm9
    00001b8b: 	movdqa	%xmm13, %xmm15
    00001b90: 	pshufd	$0xe, %xmm6, %xmm6
    00001b95: 	movq	%r10, %xmm13
    00001b9a: 	pshufd	$0xe, %xmm1, %xmm1
    00001b9f: 	punpcklwd	%xmm6, %xmm15
    00001ba4: 	punpcklwd	%xmm6, %xmm9
    00001ba9: 	movdqa	%xmm2, %xmm6
    00001bad: 	punpcklwd	%xmm7, %xmm6
    00001bb1: 	pshufd	$0xe, %xmm5, %xmm5
    00001bb6: 	pshufd	$0xe, %xmm4, %xmm4
    00001bbb: 	pshufd	$0xe, %xmm6, %xmm6
    00001bc0: 	pshufd	$0xe, %xmm8, %xmm8
    00001bc6: 	pshufd	$0xe, %xmm10, %xmm10
    00001bcc: 	movdqa	%xmm6, %xmm7
    00001bd0: 	movdqa	%xmm2, %xmm6
    00001bd4: 	punpcklwd	%xmm13, %xmm2
    00001bd9: 	movq	%xmm2, %r14
    00001bde: 	punpcklwd	%xmm13, %xmm6
    00001be3: 	movdqa	%xmm7, %xmm2
    00001be7: 	punpcklwd	%xmm7, %xmm6
    00001beb: 	movq	%r14, %xmm7
    00001bf0: 	movq	%r11, %xmm13
    00001bf5: 	punpcklwd	%xmm2, %xmm7
    00001bf9: 	movdqa	%xmm3, %xmm2
    00001bfd: 	pshufd	$0xe, %xmm9, %xmm9
    00001c03: 	pshufd	$0xe, %xmm7, %xmm7
    00001c08: 	movq	%xmm7, %r14
    00001c0d: 	movq	%r11, %xmm7
    00001c12: 	punpcklwd	%xmm7, %xmm2
    00001c16: 	movdqa	%xmm3, %xmm7
    00001c1a: 	pshufd	$0xe, %xmm2, %xmm2
    00001c1f: 	punpcklwd	%xmm13, %xmm7
    00001c24: 	movq	-0x68(%rsp), %xmm13
    00001c2b: 	punpcklwd	%xmm2, %xmm7
    00001c2f: 	movq	%xmm7, %r10
    00001c34: 	movq	%r11, %xmm7
    00001c39: 	punpcklwd	%xmm7, %xmm3
    00001c3d: 	movq	%r9, %xmm7
    00001c42: 	punpcklwd	%xmm2, %xmm3
    00001c46: 	movdqa	%xmm0, %xmm2
    00001c4a: 	punpcklwd	%xmm7, %xmm2
    00001c4e: 	movdqa	%xmm0, %xmm7
    00001c52: 	pshufd	$0xe, %xmm3, %xmm3
    00001c57: 	pshufd	$0xe, %xmm2, %xmm2
    00001c5c: 	movq	%xmm2, %r11
    00001c61: 	movq	%r9, %xmm2
    00001c66: 	punpcklwd	%xmm2, %xmm7
    00001c6a: 	movq	%r11, %xmm2
    00001c6f: 	punpcklwd	%xmm2, %xmm7
    00001c73: 	movq	%r9, %xmm2
    00001c78: 	punpcklwd	%xmm2, %xmm0
    00001c7c: 	movq	%r11, %xmm2
    00001c81: 	movq	%xmm7, %r13
    00001c86: 	punpcklwd	%xmm2, %xmm0
    00001c8a: 	movdqa	%xmm1, %xmm2
    00001c8e: 	punpcklwd	%xmm8, %xmm2
    00001c93: 	pshufd	$0xe, %xmm0, %xmm0
    00001c98: 	pshufd	$0xe, %xmm2, %xmm2
    00001c9d: 	movq	%xmm2, %r9
    00001ca2: 	movdqa	%xmm1, %xmm2
    00001ca6: 	punpcklwd	%xmm8, %xmm1
    00001cab: 	movq	%r9, %xmm7
    00001cb0: 	punpcklwd	%xmm8, %xmm2
    00001cb5: 	punpcklwd	%xmm7, %xmm2
    00001cb9: 	movq	-0x78(%rsp), %xmm7
    00001cbf: 	movq	%xmm2, 0x68(%rsp)
    00001cc5: 	movq	%r9, %xmm2
    00001cca: 	punpcklwd	%xmm2, %xmm1
    00001cce: 	movdqa	%xmm7, %xmm2
    00001cd2: 	movdqa	%xmm7, %xmm8
    00001cd7: 	movq	-0x48(%rsp), %xmm7
    00001cdd: 	punpcklwd	%xmm13, %xmm2
    00001ce2: 	punpcklwd	%xmm13, %xmm8
    00001ce7: 	pshufd	$0xe, %xmm1, %xmm1
    00001cec: 	movq	-0x28(%rsp), %xmm13
    00001cf3: 	pshufd	$0xe, %xmm2, %xmm2
    00001cf8: 	punpcklwd	%xmm2, %xmm8
    00001cfd: 	movq	%xmm2, 0x78(%rsp)
    00001d03: 	movdqa	%xmm7, %xmm2
    00001d07: 	punpcklwd	%xmm13, %xmm7
    00001d0c: 	punpcklwd	%xmm13, %xmm2
    00001d11: 	movdqa	%xmm7, %xmm13
    00001d16: 	pshufd	$0xe, %xmm2, %xmm2
    00001d1b: 	movdqa	%xmm2, %xmm7
    00001d1f: 	movq	%xmm2, %r11
    00001d24: 	movq	%r10, %xmm2
    00001d29: 	punpcklwd	%xmm7, %xmm13
    00001d2e: 	movq	%xmm13, %r9
    00001d33: 	movdqa	%xmm8, %xmm13
    00001d38: 	movq	%r9, %xmm7
    00001d3d: 	punpcklwd	%xmm7, %xmm13
    00001d42: 	punpcklwd	%xmm7, %xmm8
    00001d47: 	movq	%r10, %xmm7
    00001d4c: 	pshufd	$0xe, %xmm13, %xmm13
    00001d52: 	punpcklwd	%xmm13, %xmm8
    00001d57: 	movdqa	%xmm6, %xmm13
    00001d5c: 	punpcklwd	%xmm7, %xmm13
    00001d61: 	movdqa	%xmm6, %xmm7
    00001d65: 	pshufd	$0xe, %xmm13, %xmm13
    00001d6b: 	punpcklwd	%xmm2, %xmm7
    00001d6f: 	punpcklwd	%xmm13, %xmm7
    00001d74: 	movq	%xmm7, %r9
    00001d79: 	movq	%r10, %xmm7
    00001d7e: 	punpcklwd	%xmm7, %xmm6
    00001d82: 	punpcklwd	%xmm13, %xmm6
    00001d87: 	movq	%r9, %xmm13
    00001d8c: 	pshufd	$0xe, %xmm6, %xmm6
    00001d91: 	paddw	%xmm13, %xmm6
    00001d96: 	movq	0x8(%rsp), %xmm13
    00001d9d: 	pmullw	%xmm6, %xmm8
    00001da2: 	movq	-0x8(%rsp), %xmm6
    00001da8: 	movdqa	%xmm6, %xmm2
    00001dac: 	punpcklwd	%xmm13, %xmm6
    00001db1: 	punpcklwd	%xmm13, %xmm2
    00001db6: 	movq	0x68(%rsp), %xmm13
    00001dbd: 	pshufd	$0xe, %xmm2, %xmm2
    00001dc2: 	movq	%xmm8, 0x88(%rsp)
    00001dcc: 	movdqa	%xmm2, %xmm7
    00001dd0: 	movq	%xmm2, %r10
    00001dd5: 	movq	0x28(%rsp), %xmm8
    00001ddc: 	punpcklwd	%xmm7, %xmm6
    00001de0: 	movq	0x48(%rsp), %xmm7
    00001de6: 	movdqa	%xmm8, %xmm2
    00001deb: 	punpcklwd	%xmm7, %xmm2
    00001def: 	punpcklwd	%xmm7, %xmm8
    00001df4: 	movq	%r13, %xmm7
    00001df9: 	pshufd	$0xe, %xmm2, %xmm2
    00001dfe: 	punpcklwd	%xmm2, %xmm8
    00001e03: 	movq	%xmm2, %r9
    00001e08: 	movdqa	%xmm6, %xmm2
    00001e0c: 	punpcklwd	%xmm8, %xmm2
    00001e11: 	punpcklwd	%xmm8, %xmm6
    00001e16: 	movq	%r13, %xmm8
    00001e1b: 	pshufd	$0xe, %xmm2, %xmm2
    00001e20: 	punpcklwd	%xmm2, %xmm6
    00001e24: 	movdqa	%xmm13, %xmm2
    00001e29: 	punpcklwd	%xmm2, %xmm7
    00001e2d: 	pshufd	$0xe, %xmm7, %xmm7
    00001e32: 	movq	%xmm7, %r13
    00001e37: 	movdqa	%xmm8, %xmm7
    00001e3c: 	punpcklwd	%xmm13, %xmm8
    00001e41: 	punpcklwd	%xmm2, %xmm7
    00001e45: 	movq	%r13, %xmm2
    00001e4a: 	punpcklwd	%xmm2, %xmm8
    00001e4f: 	punpcklwd	%xmm2, %xmm7
    00001e53: 	movq	%r12, %xmm2
    00001e58: 	pshufd	$0xe, %xmm8, %xmm8
    00001e5e: 	paddw	%xmm8, %xmm7
    00001e63: 	movq	0x88(%rsp), %xmm8
    00001e6d: 	pmullw	%xmm7, %xmm6
    00001e71: 	movq	%r12, %xmm7
    00001e76: 	paddw	%xmm6, %xmm8
    00001e7b: 	movq	%r15, %xmm6
    00001e80: 	punpcklwd	%xmm2, %xmm6
    00001e84: 	pshufd	$0xe, %xmm6, %xmm6
    00001e89: 	movdqa	%xmm6, %xmm2
    00001e8d: 	movq	%r15, %xmm6
    00001e92: 	movq	%xmm8, %r13
    00001e97: 	movq	-0x58(%rsp), %xmm8
    00001e9e: 	punpcklwd	%xmm7, %xmm6
    00001ea2: 	movq	%xmm2, 0x68(%rsp)
    00001ea8: 	punpcklwd	%xmm2, %xmm6
    00001eac: 	movq	-0x38(%rsp), %xmm2
    00001eb2: 	movdqa	%xmm8, %xmm7
    00001eb7: 	movdqa	%xmm6, %xmm13
    00001ebc: 	punpcklwd	%xmm2, %xmm7
    00001ec0: 	punpcklwd	%xmm2, %xmm8
    00001ec5: 	pshufd	$0xe, %xmm7, %xmm7
    00001eca: 	punpcklwd	%xmm7, %xmm8
    00001ecf: 	movdqa	%xmm7, %xmm2
    00001ed3: 	punpcklwd	%xmm8, %xmm13
    00001ed8: 	punpcklwd	%xmm8, %xmm6
    00001edd: 	movdqa	%xmm11, %xmm8
    00001ee2: 	pshufd	$0xe, %xmm13, %xmm13
    00001ee8: 	punpcklwd	%xmm14, %xmm8
    00001eed: 	punpcklwd	%xmm13, %xmm6
    00001ef2: 	movdqa	%xmm11, %xmm13
    00001ef7: 	punpcklwd	%xmm14, %xmm11
    00001efc: 	punpcklwd	%xmm14, %xmm13
    00001f01: 	pshufd	$0xe, %xmm13, %xmm13
    00001f07: 	movdqa	%xmm13, %xmm14
    00001f0c: 	punpcklwd	%xmm13, %xmm8
    00001f11: 	movq	0x58(%rsp), %xmm13
    00001f18: 	punpcklwd	%xmm14, %xmm11
    00001f1d: 	movq	-0x18(%rsp), %xmm14
    00001f24: 	pshufd	$0xe, %xmm11, %xmm11
    00001f2a: 	paddw	%xmm8, %xmm11
    00001f2f: 	pmullw	%xmm11, %xmm6
    00001f34: 	movdqa	%xmm13, %xmm11
    00001f39: 	movdqa	%xmm6, %xmm8
    00001f3e: 	movdqa	%xmm14, %xmm6
    00001f43: 	punpcklwd	%xmm11, %xmm6
    00001f48: 	movdqa	%xmm14, %xmm11
    00001f4d: 	pshufd	$0xe, %xmm6, %xmm6
    00001f52: 	punpcklwd	%xmm13, %xmm11
    00001f57: 	movq	%xmm6, 0x58(%rsp)
    00001f5d: 	movq	0x18(%rsp), %xmm14
    00001f64: 	punpcklwd	%xmm6, %xmm11
    00001f69: 	movq	0x38(%rsp), %xmm6
    00001f6f: 	movdqa	%xmm14, %xmm7
    00001f74: 	punpcklwd	%xmm6, %xmm14
    00001f79: 	punpcklwd	%xmm6, %xmm7
    00001f7d: 	movdqa	%xmm11, %xmm6
    00001f82: 	pshufd	$0xe, %xmm7, %xmm7
    00001f87: 	movq	%xmm7, 0x88(%rsp)
    00001f90: 	punpcklwd	%xmm7, %xmm14
    00001f95: 	movq	%r15, %xmm7
    00001f9a: 	punpcklwd	%xmm14, %xmm6
    00001f9f: 	punpcklwd	%xmm14, %xmm11
    00001fa4: 	movdqa	%xmm12, %xmm14
    00001fa9: 	punpcklwd	%xmm15, %xmm14
    00001fae: 	pshufd	$0xe, %xmm6, %xmm6
    00001fb3: 	pshufd	$0xe, %xmm14, %xmm14
    00001fb9: 	punpcklwd	%xmm6, %xmm11
    00001fbe: 	movdqa	%xmm14, %xmm6
    00001fc3: 	movdqa	%xmm12, %xmm14
    00001fc8: 	punpcklwd	%xmm15, %xmm12
    00001fcd: 	punpcklwd	%xmm15, %xmm14
    00001fd2: 	punpcklwd	%xmm6, %xmm12
    00001fd7: 	movdqa	%xmm8, %xmm15
    00001fdc: 	movq	-0x58(%rsp), %xmm8
    00001fe3: 	punpcklwd	%xmm6, %xmm14
    00001fe8: 	pshufd	$0xe, %xmm12, %xmm12
    00001fee: 	paddw	%xmm12, %xmm14
    00001ff3: 	movq	-0x38(%rsp), %xmm12
    00001ffa: 	punpcklwd	%xmm12, %xmm8
    00001fff: 	movdqa	%xmm5, %xmm12
    00002004: 	pmullw	%xmm14, %xmm11
    00002009: 	punpcklwd	%xmm10, %xmm12
    0000200e: 	movq	0x18(%rsp), %xmm14
    00002015: 	paddw	%xmm11, %xmm15
    0000201a: 	movq	%r13, %xmm11
    0000201f: 	movdqa	%xmm15, %xmm6
    00002024: 	movq	%r12, %xmm15
    00002029: 	paddw	%xmm11, %xmm6
    0000202e: 	movq	0x68(%rsp), %xmm11
    00002035: 	punpcklwd	%xmm15, %xmm7
    0000203a: 	movdqa	%xmm2, %xmm15
    0000203f: 	punpcklwd	%xmm15, %xmm8
    00002044: 	movq	0x58(%rsp), %xmm15
    0000204b: 	movq	0x78(%rsp), %xmm2
    00002051: 	punpcklwd	%xmm11, %xmm7
    00002056: 	pshufd	$0xe, %xmm8, %xmm8
    0000205c: 	pshufd	$0xe, %xmm7, %xmm7
    00002061: 	movdqa	%xmm7, %xmm11
    00002066: 	punpcklwd	%xmm8, %xmm7
    0000206b: 	punpcklwd	%xmm8, %xmm11
    00002070: 	movdqa	%xmm12, %xmm8
    00002075: 	pshufd	$0xe, %xmm11, %xmm11
    0000207b: 	punpcklwd	%xmm11, %xmm7
    00002080: 	movdqa	%xmm5, %xmm11
    00002085: 	movdqa	%xmm12, %xmm5
    0000208a: 	punpcklwd	%xmm10, %xmm11
    0000208f: 	movdqa	%xmm13, %xmm12
    00002094: 	movq	-0x68(%rsp), %xmm13
    0000209b: 	pshufd	$0xe, %xmm11, %xmm11
    000020a1: 	punpcklwd	%xmm11, %xmm5
    000020a6: 	punpcklwd	%xmm11, %xmm8
    000020ab: 	pshufd	$0xe, %xmm5, %xmm5
    000020b0: 	paddw	%xmm5, %xmm8
    000020b5: 	movq	-0x18(%rsp), %xmm5
    000020bb: 	punpcklwd	%xmm12, %xmm5
    000020c0: 	movq	0x38(%rsp), %xmm12
    000020c7: 	pmullw	%xmm7, %xmm8
    000020cc: 	punpcklwd	%xmm15, %xmm5
    000020d1: 	movq	0x88(%rsp), %xmm15
    000020db: 	punpcklwd	%xmm12, %xmm14
    000020e0: 	pshufd	$0xe, %xmm5, %xmm5
    000020e5: 	movdqa	%xmm14, %xmm7
    000020ea: 	movdqa	%xmm5, %xmm10
    000020ef: 	punpcklwd	%xmm15, %xmm7
    000020f4: 	movdqa	%xmm4, %xmm15
    000020f9: 	pshufd	$0xe, %xmm7, %xmm7
    000020fe: 	punpcklwd	%xmm9, %xmm15
    00002103: 	punpcklwd	%xmm7, %xmm10
    00002108: 	punpcklwd	%xmm7, %xmm5
    0000210c: 	movdqa	%xmm15, %xmm7
    00002111: 	pshufd	$0xe, %xmm10, %xmm10
    00002117: 	punpcklwd	%xmm10, %xmm5
    0000211c: 	movdqa	%xmm4, %xmm10
    00002121: 	movdqa	%xmm15, %xmm4
    00002126: 	punpcklwd	%xmm9, %xmm10
    0000212b: 	pshufd	$0xe, %xmm10, %xmm10
    00002131: 	punpcklwd	%xmm10, %xmm4
    00002136: 	punpcklwd	%xmm10, %xmm7
    0000213b: 	pshufd	$0xe, %xmm4, %xmm4
    00002140: 	paddw	%xmm4, %xmm7
    00002144: 	pmullw	%xmm7, %xmm5
    00002148: 	movq	-0x48(%rsp), %xmm7
    0000214e: 	paddw	%xmm5, %xmm8
    00002153: 	movq	%r11, %xmm5
    00002158: 	paddw	%xmm6, %xmm8
    0000215d: 	movq	-0x78(%rsp), %xmm6
    00002163: 	punpcklwd	%xmm13, %xmm6
    00002168: 	movq	-0x28(%rsp), %xmm13
    0000216f: 	punpcklwd	%xmm2, %xmm6
    00002173: 	movq	%r14, %xmm2
    00002178: 	punpcklwd	%xmm13, %xmm7
    0000217d: 	pshufd	$0xe, %xmm6, %xmm6
    00002182: 	punpcklwd	%xmm3, %xmm2
    00002186: 	movq	0x8(%rsp), %xmm13
    0000218d: 	movdqa	%xmm7, %xmm4
    00002191: 	movq	0x48(%rsp), %xmm7
    00002197: 	punpcklwd	%xmm5, %xmm4
    0000219b: 	movdqa	%xmm6, %xmm5
    0000219f: 	pshufd	$0xe, %xmm4, %xmm4
    000021a4: 	punpcklwd	%xmm4, %xmm5
    000021a8: 	punpcklwd	%xmm4, %xmm6
    000021ac: 	movq	%r14, %xmm4
    000021b1: 	pshufd	$0xe, %xmm5, %xmm5
    000021b6: 	punpcklwd	%xmm3, %xmm4
    000021ba: 	punpcklwd	%xmm5, %xmm6
    000021be: 	movq	%r14, %xmm5
    000021c3: 	punpcklwd	%xmm3, %xmm5
    000021c7: 	movq	0x28(%rsp), %xmm3
    000021cd: 	pshufd	$0xe, %xmm5, %xmm5
    000021d2: 	punpcklwd	%xmm5, %xmm2
    000021d6: 	punpcklwd	%xmm5, %xmm4
    000021da: 	movq	%r10, %xmm5
    000021df: 	pshufd	$0xe, %xmm2, %xmm2
    000021e4: 	punpcklwd	%xmm7, %xmm3
    000021e8: 	paddw	%xmm2, %xmm4
    000021ec: 	movq	-0x8(%rsp), %xmm2
    000021f2: 	punpcklwd	%xmm13, %xmm2
    000021f7: 	pmullw	%xmm4, %xmm6
    000021fb: 	punpcklwd	%xmm5, %xmm2
    000021ff: 	movq	%r9, %xmm5
    00002204: 	pshufd	$0xe, %xmm2, %xmm2
    00002209: 	punpcklwd	%xmm5, %xmm3
    0000220d: 	pshufd	$0xe, %xmm3, %xmm3
    00002212: 	movdqa	%xmm2, %xmm4
    00002216: 	punpcklwd	%xmm3, %xmm4
    0000221a: 	punpcklwd	%xmm3, %xmm2
    0000221e: 	movdqa	%xmm0, %xmm3
    00002222: 	pshufd	$0xe, %xmm4, %xmm4
    00002227: 	punpcklwd	%xmm1, %xmm3
    0000222b: 	punpcklwd	%xmm4, %xmm2
    0000222f: 	movdqa	%xmm0, %xmm4
    00002233: 	punpcklwd	%xmm1, %xmm0
    00002237: 	punpcklwd	%xmm1, %xmm4
    0000223b: 	pshufd	$0xe, %xmm4, %xmm4
    00002240: 	punpcklwd	%xmm4, %xmm0
    00002244: 	punpcklwd	%xmm4, %xmm3
    00002248: 	pshufd	$0xe, %xmm0, %xmm0
    0000224d: 	paddw	%xmm0, %xmm3
    00002251: 	pmullw	%xmm3, %xmm2
    00002255: 	paddw	%xmm2, %xmm6
    00002259: 	paddw	%xmm6, %xmm8
    0000225e: 	pextrw	$0x0, %xmm8, %r9d
    00002264: 	pextrw	$0x1, %xmm8, %r10d
    0000226a: 	addl	%r10d, %r9d
    0000226d: 	addl	%eax, %r9d
    00002270: 	pextrw	$0x2, %xmm8, %eax
    00002276: 	addl	%eax, %r9d
    00002279: 	pextrw	$0x3, %xmm8, %eax
    0000227f: 	addl	%r9d, %eax
.Ltmp373:
    00002282: 	leaq	(%rdx,%rdx), %r10
    00002286: 	leaq	(%rdi,%r10), %r11
    0000228a: 	addq	%rsi, %r10
    0000228d: 	nopl	(%rax) # Size: 3
.Ltmp374:
    00002290: 	movzwl	0x10(%r10), %r9d
    00002295: 	addw	(%r10), %r9w
    00002299: 	addq	$0x10, %rdx
    0000229d: 	addq	$0x20, %r11
    000022a1: 	movzwl	0x12(%r10), %ebp
    000022a6: 	imulw	-0x20(%r11), %r9w
    000022ac: 	addq	$0x20, %r10
    000022b0: 	addw	-0x1e(%r10), %bp
    000022b5: 	imulw	-0x1e(%r11), %bp
    000022bb: 	addl	%ebp, %r9d
    000022be: 	movzwl	-0xc(%r10), %ebp
    000022c3: 	addw	-0x1c(%r10), %bp
    000022c8: 	imulw	-0x1c(%r11), %bp
    000022ce: 	addl	%ebp, %r9d
    000022d1: 	movzwl	-0xa(%r10), %ebp
    000022d6: 	addw	-0x1a(%r10), %bp
    000022db: 	imulw	-0x1a(%r11), %bp
    000022e1: 	addl	%ebp, %r9d
    000022e4: 	movzwl	-0x8(%r10), %ebp
    000022e9: 	addw	-0x18(%r10), %bp
    000022ee: 	imulw	-0x18(%r11), %bp
    000022f4: 	addl	%ebp, %r9d
    000022f7: 	movzwl	-0x6(%r10), %ebp
    000022fc: 	addw	-0x16(%r10), %bp
    00002301: 	imulw	-0x16(%r11), %bp
    00002307: 	addl	%ebp, %r9d
    0000230a: 	movzwl	-0x4(%r10), %ebp
    0000230f: 	addw	-0x14(%r10), %bp
    00002314: 	imulw	-0x14(%r11), %bp
    0000231a: 	addl	%ebp, %r9d
    0000231d: 	movzwl	-0x2(%r10), %ebp
    00002322: 	addw	-0x12(%r10), %bp
    00002327: 	imulw	-0x12(%r11), %bp
    0000232d: 	addl	%ebp, %r9d
    00002330: 	addl	%r9d, %eax
    00002333: 	cmpq	%rdx, %rcx
    00002336: 	ja	.Ltmp374 # Offset: 9014
    0000233c: 	andq	$-0x10, %rbx
    00002340: 	leaq	0x10(%rbx), %rcx
    00002344: 	cmpq	%rcx, %r8
    00002347: 	jbe	.Ltmp375 # Offset: 9031
    0000234d: 	addq	$0x11, %rbx
    00002351: 	movq	%r8, %rdx
    00002354: 	movl	$0x1, %r9d
    0000235a: 	subq	%rcx, %rdx
    0000235d: 	cmpq	%rbx, %r8
    00002360: 	cmovaeq	%rdx, %r9
    00002364: 	subq	$0x1, %rdx
    00002368: 	cmpq	$0x6, %rdx
    0000236c: 	jbe	.Ltmp376 # Offset: 9068
    00002372: 	cmpq	%rbx, %r8
    00002375: 	jb	.Ltmp376 # Offset: 9077
    0000237b: 	leaq	(%rcx,%rcx), %r10
    0000237f: 	movq	%r9, %rdx
    00002382: 	leaq	(%rdi,%r10), %r11
    00002386: 	addq	%rsi, %r10
    00002389: 	shrq	$0x3, %rdx
    0000238d: 	movdqu	(%r11), %xmm0
    00002392: 	movdqu	(%r10), %xmm3
    00002397: 	pmullw	%xmm3, %xmm0
    0000239b: 	cmpq	$0x1, %rdx
    0000239f: 	je	.Ltmp377 # Offset: 9119
    000023a1: 	movdqu	0x10(%r10), %xmm1
    000023a7: 	movdqu	0x10(%r11), %xmm2
    000023ad: 	pmullw	%xmm2, %xmm1
    000023b1: 	paddw	%xmm1, %xmm0
.Ltmp377:
    000023b5: 	movdqa	%xmm0, %xmm1
    000023b9: 	shlq	$0x3, %rdx
    000023bd: 	psrldq	$0x8, %xmm1
    000023c2: 	paddw	%xmm1, %xmm0
    000023c6: 	movdqa	%xmm0, %xmm1
    000023ca: 	psrldq	$0x4, %xmm1
    000023cf: 	paddw	%xmm1, %xmm0
    000023d3: 	movdqa	%xmm0, %xmm1
    000023d7: 	psrldq	$0x2, %xmm1
    000023dc: 	paddw	%xmm1, %xmm0
    000023e0: 	pextrw	$0x0, %xmm0, %r10d
    000023e6: 	addl	%r10d, %eax
    000023e9: 	leaq	(%rdx,%rcx), %r10
    000023ed: 	cmpq	%r9, %rdx
    000023f0: 	je	.Ltmp375 # Offset: 9200
.Ltmp380:
    000023f6: 	subq	%rdx, %r9
    000023f9: 	leaq	-0x1(%r9), %r11
    000023fd: 	cmpq	$0x2, %r11
    00002401: 	jbe	.Ltmp378 # Offset: 9217
    00002403: 	addq	%rcx, %rdx
    00002406: 	movq	(%rsi,%rdx,2), %xmm0
    0000240b: 	movq	(%rdi,%rdx,2), %xmm1
    00002410: 	pmullw	%xmm1, %xmm0
    00002414: 	pextrw	$0x1, %xmm0, %edx
    00002419: 	pextrw	$0x0, %xmm0, %ecx
    0000241e: 	addl	%ecx, %edx
    00002420: 	addl	%eax, %edx
    00002422: 	pextrw	$0x2, %xmm0, %eax
    00002427: 	addl	%eax, %edx
    00002429: 	pextrw	$0x3, %xmm0, %eax
    0000242e: 	addl	%edx, %eax
    00002430: 	movq	%r9, %rdx
    00002433: 	andq	$-0x4, %rdx
    00002437: 	addq	%rdx, %r10
    0000243a: 	cmpq	%r9, %rdx
    0000243d: 	je	.Ltmp375 # Offset: 9277
.Ltmp378:
    0000243f: 	movzwl	(%rdi,%r10,2), %ecx
    00002444: 	imulw	(%rsi,%r10,2), %cx
    0000244a: 	leaq	(%r10,%r10), %rdx
    0000244e: 	addl	%ecx, %eax
    00002450: 	leaq	0x1(%r10), %rcx
    00002454: 	cmpq	%rcx, %r8
    00002457: 	jbe	.Ltmp375 # Offset: 9303
    00002459: 	movzwl	0x2(%rdi,%rdx), %ecx
    0000245e: 	imulw	0x2(%rsi,%rdx), %cx
    00002464: 	addq	$0x2, %r10
    00002468: 	addl	%ecx, %eax
    0000246a: 	cmpq	%r8, %r10
    0000246d: 	jae	.Ltmp375 # Offset: 9325
    0000246f: 	movzwl	0x4(%rsi,%rdx), %ecx
    00002474: 	imulw	0x4(%rdi,%rdx), %cx
    0000247a: 	movl	%ecx, %edx
    0000247c: 	addl	%edx, %eax
.Ltmp375:
    0000247e: 	addq	$0x1b0, %rsp
    00002485: 	popq	%rbx
    00002486: 	popq	%rbp
    00002487: 	popq	%r12
    00002489: 	popq	%r13
    0000248b: 	popq	%r14
    0000248d: 	popq	%r15
    0000248f: 	retq # Offset: 9359
.Ltmp370:
    00002490: 	movdqu	(%rdi), %xmm0
    00002494: 	movdqu	(%rsi), %xmm3
    00002498: 	movl	$0x1, %edx
    0000249d: 	xorl	%eax, %eax
    0000249f: 	movl	$0xf, %r9d
    000024a5: 	pmullw	%xmm3, %xmm0
    000024a9: 	jmp	.Ltmp377 # Offset: 9385
.Ltmp371:
    000024ae: 	xorl	%r9d, %r9d
    000024b1: 	xorl	%eax, %eax
    000024b3: 	xorl	%edx, %edx
    000024b5: 	jmp	.Ltmp379 # Offset: 9397
.Ltmp376:
    000024ba: 	movq	%rcx, %r10
    000024bd: 	xorl	%edx, %edx
    000024bf: 	jmp	.Ltmp380 # Offset: 9407
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKttET0_T_S3_m"

Binary Function "_Z14inner_product7IPKttET0_T_S3_m" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x162e0
  Size        : 0x299
  MaxSize     : 0x2a0
  Offset      : 0x162e0
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r8
    00000008: 	movq	%rdx, %r9
    0000000b: 	movq	%rsi, %rdi
    0000000e: 	pushq	%rbx
    0000000f: 	cmpq	$0x1, %rdx
    00000013: 	je	.Ltmp381 # Offset: 19
    00000019: 	leaq	-0x2(%rdx), %r10
    0000001d: 	movq	%r10, %rbx
    00000020: 	shrq	%rbx
    00000023: 	leaq	0x1(%rbx), %rsi
    00000027: 	cmpq	$0x5, %r10
    0000002b: 	jbe	.Ltmp382 # Offset: 43
    00000031: 	movq	%rsi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm1, %xmm1
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp383:
    00000048: 	movdqu	(%r8,%rax), %xmm0
    0000004e: 	movdqu	(%rdi,%rax), %xmm2
    00000053: 	addq	$0x10, %rax
    00000057: 	pmullw	%xmm2, %xmm0
    0000005b: 	paddw	%xmm0, %xmm1
    0000005f: 	cmpq	%rdx, %rax
    00000062: 	jne	.Ltmp383 # Offset: 98
    00000064: 	pextrw	$0x2, %xmm1, %eax
    00000069: 	pextrw	$0x0, %xmm1, %edx
    0000006e: 	pextrw	$0x3, %xmm1, %ecx
    00000073: 	movq	%rsi, %r11
    00000076: 	addl	%eax, %edx
    00000078: 	pextrw	$0x4, %xmm1, %eax
    0000007d: 	andq	$-0x4, %r11
    00000081: 	addl	%eax, %edx
    00000083: 	pextrw	$0x6, %xmm1, %eax
    00000088: 	addl	%eax, %edx
    0000008a: 	pextrw	$0x1, %xmm1, %eax
    0000008f: 	addl	%ecx, %eax
    00000091: 	pextrw	$0x5, %xmm1, %ecx
    00000096: 	addl	%ecx, %eax
    00000098: 	pextrw	$0x7, %xmm1, %ecx
    0000009d: 	addl	%ecx, %eax
    0000009f: 	leaq	(%r11,%r11), %rcx
    000000a3: 	cmpq	%r11, %rsi
    000000a6: 	je	.Ltmp384 # Offset: 166
.Ltmp390:
    000000a8: 	subq	%r11, %rsi
    000000ab: 	cmpq	%r11, %rbx
    000000ae: 	je	.Ltmp385 # Offset: 174
    000000b0: 	movq	(%r8,%r11,4), %xmm0
    000000b6: 	movq	(%rdi,%r11,4), %xmm1
    000000bc: 	movzwl	%ax, %eax
    000000bf: 	movzwl	%dx, %edx
    000000c2: 	shlq	$0x10, %rax
    000000c6: 	pmullw	%xmm1, %xmm0
    000000ca: 	orq	%rdx, %rax
    000000cd: 	movq	%rax, %xmm4
    000000d2: 	paddw	%xmm4, %xmm0
    000000d6: 	pextrw	$0x2, %xmm0, %eax
    000000db: 	pextrw	$0x0, %xmm0, %edx
    000000e0: 	pextrw	$0x3, %xmm0, %r11d
    000000e6: 	addl	%eax, %edx
    000000e8: 	pextrw	$0x1, %xmm0, %eax
    000000ed: 	addl	%r11d, %eax
    000000f0: 	movq	%rsi, %r11
    000000f3: 	andq	$-0x2, %r11
    000000f7: 	leaq	(%rcx,%r11,2), %rcx
    000000fb: 	cmpq	%r11, %rsi
    000000fe: 	je	.Ltmp384 # Offset: 254
.Ltmp385:
    00000100: 	movzwl	(%r8,%rcx,2), %esi
    00000105: 	imulw	(%rdi,%rcx,2), %si
    0000010a: 	addl	%esi, %edx
    0000010c: 	movzwl	0x2(%r8,%rcx,2), %esi
    00000112: 	imulw	0x2(%rdi,%rcx,2), %si
    00000118: 	movl	%esi, %ecx
    0000011a: 	addl	%ecx, %eax
.Ltmp384:
    0000011c: 	andq	$-0x2, %r10
    00000120: 	leaq	0x2(%r10), %rbx
    00000124: 	cmpq	%rbx, %r9
    00000127: 	jbe	.Ltmp386 # Offset: 295
    0000012d: 	addq	$0x3, %r10
    00000131: 	movq	%r9, %rcx
    00000134: 	movl	$0x1, %esi
    00000139: 	subq	%rbx, %rcx
    0000013c: 	cmpq	%r10, %r9
    0000013f: 	cmovaeq	%rcx, %rsi
    00000143: 	subq	$0x1, %rcx
    00000147: 	cmpq	$0x6, %rcx
    0000014b: 	jbe	.Ltmp387 # Offset: 331
    00000151: 	cmpq	%r10, %r9
    00000154: 	jb	.Ltmp387 # Offset: 340
    0000015a: 	movq	%rsi, %r11
    0000015d: 	leaq	(%rbx,%rbx), %r10
    00000161: 	pxor	%xmm1, %xmm1
    00000165: 	xorl	%ecx, %ecx
    00000167: 	shrq	$0x3, %r11
    0000016b: 	leaq	(%r8,%r10), %rbp
    0000016f: 	addq	%rdi, %r10
    00000172: 	shlq	$0x4, %r11
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp388:
    00000180: 	movdqu	(%r10,%rcx), %xmm0
    00000186: 	movdqu	(%rbp,%rcx), %xmm3
    0000018c: 	addq	$0x10, %rcx
    00000190: 	pmullw	%xmm3, %xmm0
    00000194: 	paddw	%xmm0, %xmm1
    00000198: 	cmpq	%r11, %rcx
    0000019b: 	jne	.Ltmp388 # Offset: 411
    0000019d: 	movdqa	%xmm1, %xmm0
    000001a1: 	psrldq	$0x8, %xmm0
    000001a6: 	paddw	%xmm0, %xmm1
    000001aa: 	movdqa	%xmm1, %xmm0
    000001ae: 	psrldq	$0x4, %xmm0
    000001b3: 	paddw	%xmm0, %xmm1
    000001b7: 	movdqa	%xmm1, %xmm0
    000001bb: 	psrldq	$0x2, %xmm0
    000001c0: 	paddw	%xmm0, %xmm1
    000001c4: 	pextrw	$0x0, %xmm1, %ecx
    000001c9: 	addl	%ecx, %edx
    000001cb: 	movq	%rsi, %rcx
    000001ce: 	andq	$-0x8, %rcx
    000001d2: 	leaq	(%rcx,%rbx), %r10
    000001d6: 	cmpq	%rsi, %rcx
    000001d9: 	je	.Ltmp386 # Offset: 473
.Ltmp391:
    000001df: 	subq	%rcx, %rsi
    000001e2: 	leaq	-0x1(%rsi), %r11
    000001e6: 	cmpq	$0x2, %r11
    000001ea: 	jbe	.Ltmp389 # Offset: 490
    000001ec: 	addq	%rbx, %rcx
    000001ef: 	movq	(%r8,%rcx,2), %xmm0
    000001f5: 	movq	(%rdi,%rcx,2), %xmm1
    000001fa: 	pmullw	%xmm1, %xmm0
    000001fe: 	pextrw	$0x0, %xmm0, %ecx
    00000203: 	pextrw	$0x1, %xmm0, %r11d
    00000209: 	addl	%r11d, %ecx
    0000020c: 	addl	%edx, %ecx
    0000020e: 	pextrw	$0x2, %xmm0, %edx
    00000213: 	addl	%edx, %ecx
    00000215: 	pextrw	$0x3, %xmm0, %edx
    0000021a: 	addl	%ecx, %edx
    0000021c: 	movq	%rsi, %rcx
    0000021f: 	andq	$-0x4, %rcx
    00000223: 	addq	%rcx, %r10
    00000226: 	cmpq	%rcx, %rsi
    00000229: 	je	.Ltmp386 # Offset: 553
.Ltmp389:
    0000022b: 	movzwl	(%r8,%r10,2), %esi
    00000230: 	imulw	(%rdi,%r10,2), %si
    00000236: 	leaq	(%r10,%r10), %rcx
    0000023a: 	addl	%esi, %edx
    0000023c: 	leaq	0x1(%r10), %rsi
    00000240: 	cmpq	%r9, %rsi
    00000243: 	jae	.Ltmp386 # Offset: 579
    00000245: 	movzwl	0x2(%r8,%rcx), %esi
    0000024b: 	imulw	0x2(%rdi,%rcx), %si
    00000251: 	addq	$0x2, %r10
    00000255: 	addl	%esi, %edx
    00000257: 	cmpq	%r10, %r9
    0000025a: 	jbe	.Ltmp386 # Offset: 602
    0000025c: 	movzwl	0x4(%r8,%rcx), %esi
    00000262: 	imulw	0x4(%rdi,%rcx), %si
    00000268: 	movl	%esi, %ecx
    0000026a: 	addl	%ecx, %edx
.Ltmp386:
    0000026c: 	addl	%edx, %eax
    0000026e: 	popq	%rbx
    0000026f: 	popq	%rbp
    00000270: 	retq # Offset: 624
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp381:
    00000278: 	xorl	%eax, %eax
    0000027a: 	xorl	%edx, %edx
    0000027c: 	xorl	%r10d, %r10d
    0000027f: 	jmp	.Ltmp389 # Offset: 639
.Ltmp382:
    00000281: 	xorl	%r11d, %r11d
    00000284: 	xorl	%eax, %eax
    00000286: 	xorl	%edx, %edx
    00000288: 	xorl	%ecx, %ecx
    0000028a: 	jmp	.Ltmp390 # Offset: 650
.Ltmp387:
    0000028f: 	movq	%rbx, %r10
    00000292: 	xorl	%ecx, %ecx
    00000294: 	jmp	.Ltmp391 # Offset: 660
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKttET0_T_S3_m"

Binary Function "_Z14inner_product8IPKttET0_T_S3_m" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x16580
  Size        : 0x276
  MaxSize     : 0x280
  Offset      : 0x16580
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rcx
    00000008: 	movq	%rdx, %rdi
    0000000b: 	pushq	%rbx
    0000000c: 	cmpq	$0x3, %rdx
    00000010: 	je	.Ltmp392 # Offset: 16
    00000016: 	leaq	-0x4(%rdx), %r8
    0000001a: 	movq	%r8, %rax
    0000001d: 	shrq	$0x2, %rax
    00000021: 	leaq	0x1(%rax), %rbx
    00000025: 	cmpq	$0x3, %r8
    00000029: 	jbe	.Ltmp393 # Offset: 41
    0000002f: 	movq	%rbx, %rdx
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm1, %xmm1
    00000038: 	shrq	%rdx
    0000003b: 	shlq	$0x4, %rdx
    0000003f: 	nop # Size: 1
.Ltmp394:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	addq	$0x10, %rax
    0000004e: 	pmullw	%xmm2, %xmm0
    00000052: 	paddw	%xmm0, %xmm1
    00000056: 	cmpq	%rdx, %rax
    00000059: 	jne	.Ltmp394 # Offset: 89
    0000005b: 	pextrw	$0x4, %xmm1, %edx
    00000060: 	pextrw	$0x0, %xmm1, %eax
    00000065: 	pextrw	$0x1, %xmm1, %r9d
    0000006b: 	addl	%edx, %eax
    0000006d: 	pextrw	$0x5, %xmm1, %edx
    00000072: 	pextrw	$0x2, %xmm1, %r11d
    00000078: 	addl	%edx, %r9d
    0000007b: 	pextrw	$0x6, %xmm1, %edx
    00000080: 	pextrw	$0x7, %xmm1, %r10d
    00000086: 	addl	%edx, %r11d
    00000089: 	pextrw	$0x3, %xmm1, %edx
    0000008e: 	addl	%r10d, %edx
    00000091: 	movq	%rbx, %r10
    00000094: 	andq	$-0x2, %r10
    00000098: 	cmpq	%r10, %rbx
    0000009b: 	je	.Ltmp395 # Offset: 155
.Ltmp400:
    0000009d: 	movzwl	%dx, %edx
    000000a0: 	movzwl	%r11w, %r11d
    000000a4: 	movq	(%rcx,%r10,8), %xmm0
    000000aa: 	movzwl	%ax, %eax
    000000ad: 	movq	(%rsi,%r10,8), %xmm1
    000000b3: 	shlq	$0x10, %rdx
    000000b7: 	movzwl	%r9w, %r9d
    000000bb: 	orq	%r11, %rdx
    000000be: 	pmullw	%xmm1, %xmm0
    000000c2: 	shlq	$0x10, %rdx
    000000c6: 	orq	%r9, %rdx
    000000c9: 	shlq	$0x10, %rdx
    000000cd: 	orq	%rax, %rdx
    000000d0: 	movq	%rdx, %xmm4
    000000d5: 	paddw	%xmm4, %xmm0
    000000d9: 	pextrw	$0x0, %xmm0, %eax
    000000de: 	pextrw	$0x1, %xmm0, %r9d
    000000e4: 	pextrw	$0x2, %xmm0, %r11d
    000000ea: 	pextrw	$0x3, %xmm0, %edx
.Ltmp395:
    000000ef: 	andq	$-0x4, %r8
    000000f3: 	addl	%r11d, %r9d
    000000f6: 	movq	%r8, %r10
    000000f9: 	leaq	0x4(%r8), %r8
    000000fd: 	addl	%edx, %r9d
    00000100: 	cmpq	%rdi, %r8
    00000103: 	jae	.Ltmp396 # Offset: 259
    00000109: 	addq	$0x5, %r10
    0000010d: 	movq	%rdi, %rdx
    00000110: 	movl	$0x1, %ebp
    00000115: 	subq	%r8, %rdx
    00000118: 	cmpq	%r10, %rdi
    0000011b: 	cmovaeq	%rdx, %rbp
    0000011f: 	subq	$0x1, %rdx
    00000123: 	cmpq	$0x6, %rdx
    00000127: 	jbe	.Ltmp397 # Offset: 295
    0000012d: 	cmpq	%r10, %rdi
    00000130: 	jb	.Ltmp397 # Offset: 304
    00000136: 	movq	%rbp, %r11
    00000139: 	leaq	(%r8,%r8), %r10
    0000013d: 	pxor	%xmm1, %xmm1
    00000141: 	xorl	%edx, %edx
    00000143: 	shrq	$0x3, %r11
    00000147: 	leaq	(%rcx,%r10), %rbx
    0000014b: 	addq	%rsi, %r10
    0000014e: 	shlq	$0x4, %r11
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp398:
    00000158: 	movdqu	(%r10,%rdx), %xmm0
    0000015e: 	movdqu	(%rbx,%rdx), %xmm3
    00000163: 	addq	$0x10, %rdx
    00000167: 	pmullw	%xmm3, %xmm0
    0000016b: 	paddw	%xmm0, %xmm1
    0000016f: 	cmpq	%r11, %rdx
    00000172: 	jne	.Ltmp398 # Offset: 370
    00000174: 	movdqa	%xmm1, %xmm0
    00000178: 	psrldq	$0x8, %xmm0
    0000017d: 	paddw	%xmm0, %xmm1
    00000181: 	movdqa	%xmm1, %xmm0
    00000185: 	psrldq	$0x4, %xmm0
    0000018a: 	paddw	%xmm0, %xmm1
    0000018e: 	movdqa	%xmm1, %xmm0
    00000192: 	psrldq	$0x2, %xmm0
    00000197: 	paddw	%xmm0, %xmm1
    0000019b: 	pextrw	$0x0, %xmm1, %edx
    000001a0: 	addl	%edx, %eax
    000001a2: 	movq	%rbp, %rdx
    000001a5: 	andq	$-0x8, %rdx
    000001a9: 	leaq	(%r8,%rdx), %r11
    000001ad: 	cmpq	%rbp, %rdx
    000001b0: 	je	.Ltmp396 # Offset: 432
.Ltmp401:
    000001b6: 	movq	%rbp, %r10
    000001b9: 	subq	%rdx, %r10
    000001bc: 	leaq	-0x1(%r10), %rbx
    000001c0: 	cmpq	$0x2, %rbx
    000001c4: 	jbe	.Ltmp399 # Offset: 452
    000001c6: 	addq	%r8, %rdx
    000001c9: 	movq	(%rsi,%rdx,2), %xmm0
    000001ce: 	movq	(%rcx,%rdx,2), %xmm1
    000001d3: 	pmullw	%xmm1, %xmm0
    000001d7: 	pextrw	$0x1, %xmm0, %edx
    000001dc: 	pextrw	$0x0, %xmm0, %r8d
    000001e2: 	addl	%r8d, %edx
    000001e5: 	addl	%eax, %edx
    000001e7: 	pextrw	$0x2, %xmm0, %eax
    000001ec: 	addl	%eax, %edx
    000001ee: 	pextrw	$0x3, %xmm0, %eax
    000001f3: 	addl	%edx, %eax
    000001f5: 	movq	%r10, %rdx
    000001f8: 	andq	$-0x4, %rdx
    000001fc: 	addq	%rdx, %r11
    000001ff: 	cmpq	%r10, %rdx
    00000202: 	je	.Ltmp396 # Offset: 514
.Ltmp399:
    00000204: 	movzwl	(%rsi,%r11,2), %edx
    00000209: 	imulw	(%rcx,%r11,2), %dx
    0000020f: 	leaq	(%r11,%r11), %r8
    00000213: 	addl	%edx, %eax
    00000215: 	leaq	0x1(%r11), %rdx
    00000219: 	cmpq	%rdx, %rdi
    0000021c: 	jbe	.Ltmp396 # Offset: 540
    0000021e: 	movzwl	0x2(%rcx,%r8), %edx
    00000224: 	imulw	0x2(%rsi,%r8), %dx
    0000022b: 	addl	%edx, %eax
    0000022d: 	leaq	0x2(%r11), %rdx
    00000231: 	cmpq	%rdx, %rdi
    00000234: 	jbe	.Ltmp396 # Offset: 564
    00000236: 	movzwl	0x4(%rsi,%r8), %edx
    0000023c: 	imulw	0x4(%rcx,%r8), %dx
    00000243: 	addl	%edx, %eax
.Ltmp396:
    00000245: 	addl	%r9d, %eax
    00000248: 	popq	%rbx
    00000249: 	popq	%rbp
    0000024a: 	retq # Offset: 586
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp392:
    00000250: 	xorl	%r9d, %r9d
    00000253: 	xorl	%eax, %eax
    00000255: 	xorl	%r11d, %r11d
    00000258: 	jmp	.Ltmp399 # Offset: 600
.Ltmp393:
    0000025a: 	xorl	%r10d, %r10d
    0000025d: 	xorl	%edx, %edx
    0000025f: 	xorl	%r11d, %r11d
    00000262: 	xorl	%r9d, %r9d
    00000265: 	xorl	%eax, %eax
    00000267: 	jmp	.Ltmp400 # Offset: 615
.Ltmp397:
    0000026c: 	movq	%r8, %r11
    0000026f: 	xorl	%edx, %edx
    00000271: 	jmp	.Ltmp401 # Offset: 625
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKttET0_T_S3_m"

Binary Function "_Z14inner_product9IPKttET0_T_S3_m" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x16800
  Size        : 0x2c3
  MaxSize     : 0x2d0
  Offset      : 0x16800
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rcx
    00000008: 	movq	%rdx, %rdi
    0000000b: 	pushq	%rbx
    0000000c: 	cmpq	$0x7, %rdx
    00000010: 	je	.Ltmp402 # Offset: 16
    00000016: 	leaq	-0x8(%rdx), %r8
    0000001a: 	movq	%r8, %r11
    0000001d: 	shrq	$0x3, %r11
    00000021: 	addq	$0x1, %r11
    00000025: 	cmpq	$0x7, %r8
    00000029: 	jbe	.Ltmp403 # Offset: 41
    0000002f: 	movq	%r11, %rdx
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm3, %xmm3
    00000038: 	shrq	%rdx
    0000003b: 	shlq	$0x5, %rdx
    0000003f: 	nop # Size: 1
.Ltmp404:
    00000040: 	movdqu	(%rcx,%rax), %xmm2
    00000045: 	movdqu	(%rsi,%rax), %xmm0
    0000004a: 	movdqu	0x10(%rsi,%rax), %xmm5
    00000050: 	movdqu	0x10(%rcx,%rax), %xmm6
    00000056: 	addq	$0x20, %rax
    0000005a: 	movdqa	%xmm0, %xmm4
    0000005e: 	movdqa	%xmm2, %xmm1
    00000062: 	punpcklqdq	%xmm5, %xmm4
    00000066: 	punpcklqdq	%xmm6, %xmm1
    0000006a: 	punpckhqdq	%xmm6, %xmm2
    0000006e: 	punpckhqdq	%xmm5, %xmm0
    00000072: 	pmullw	%xmm4, %xmm1
    00000076: 	pmullw	%xmm2, %xmm0
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	paddw	%xmm0, %xmm3
    00000082: 	cmpq	%rax, %rdx
    00000085: 	jne	.Ltmp404 # Offset: 133
    00000087: 	pextrw	$0x4, %xmm3, %edx
    0000008c: 	pextrw	$0x0, %xmm3, %eax
    00000091: 	pextrw	$0x2, %xmm3, %ebx
    00000096: 	addl	%edx, %eax
    00000098: 	pextrw	$0x1, %xmm3, %r9d
    0000009e: 	pextrw	$0x5, %xmm3, %edx
    000000a3: 	addl	%edx, %r9d
    000000a6: 	pextrw	$0x6, %xmm3, %edx
    000000ab: 	pextrw	$0x7, %xmm3, %r10d
    000000b1: 	addl	%edx, %ebx
    000000b3: 	pextrw	$0x3, %xmm3, %edx
    000000b8: 	addl	%r10d, %edx
    000000bb: 	movq	%r11, %r10
    000000be: 	andq	$-0x2, %r10
    000000c2: 	cmpq	%r11, %r10
    000000c5: 	je	.Ltmp405 # Offset: 197
.Ltmp411:
    000000c7: 	shlq	$0x4, %r10
    000000cb: 	movzwl	%dx, %edx
    000000ce: 	movzwl	%bx, %ebx
    000000d1: 	movzwl	%r9w, %r9d
    000000d5: 	leaq	(%rcx,%r10), %r11
    000000d9: 	addq	%rsi, %r10
    000000dc: 	shlq	$0x10, %rdx
    000000e0: 	movzwl	%ax, %eax
    000000e3: 	movq	(%r10), %xmm1
    000000e8: 	movq	(%r11), %xmm0
    000000ed: 	orq	%rbx, %rdx
    000000f0: 	shlq	$0x10, %rdx
    000000f4: 	movq	0x8(%r10), %xmm2
    000000fa: 	pmullw	%xmm1, %xmm0
    000000fe: 	orq	%r9, %rdx
    00000101: 	movq	0x8(%r11), %xmm1
    00000107: 	shlq	$0x10, %rdx
    0000010b: 	pmullw	%xmm2, %xmm1
    0000010f: 	orq	%rax, %rdx
    00000112: 	movq	%rdx, %xmm7
    00000117: 	paddw	%xmm7, %xmm0
    0000011b: 	paddw	%xmm1, %xmm0
    0000011f: 	pextrw	$0x0, %xmm0, %eax
    00000124: 	pextrw	$0x1, %xmm0, %r9d
    0000012a: 	pextrw	$0x2, %xmm0, %ebx
    0000012f: 	pextrw	$0x3, %xmm0, %edx
.Ltmp405:
    00000134: 	andq	$-0x8, %r8
    00000138: 	addl	%ebx, %r9d
    0000013b: 	leaq	0x8(%r8), %r11
    0000013f: 	addl	%edx, %r9d
    00000142: 	cmpq	%rdi, %r11
    00000145: 	jae	.Ltmp406 # Offset: 325
    0000014b: 	leaq	0x9(%r8), %rdx
    0000014f: 	movq	%rdi, %r10
    00000152: 	movl	$0x1, %r8d
    00000158: 	subq	%r11, %r10
    0000015b: 	cmpq	%rdx, %rdi
    0000015e: 	cmovaeq	%r10, %r8
    00000162: 	subq	$0x1, %r10
    00000166: 	cmpq	$0x6, %r10
    0000016a: 	jbe	.Ltmp407 # Offset: 362
    00000170: 	cmpq	%rdx, %rdi
    00000173: 	jb	.Ltmp407 # Offset: 371
    00000179: 	movq	%r8, %rbx
    0000017c: 	leaq	(%r11,%r11), %r10
    00000180: 	pxor	%xmm1, %xmm1
    00000184: 	xorl	%edx, %edx
    00000186: 	shrq	$0x3, %rbx
    0000018a: 	leaq	(%rcx,%r10), %rbp
    0000018e: 	addq	%rsi, %r10
    00000191: 	shlq	$0x4, %rbx
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp408:
    00000198: 	movdqu	(%r10,%rdx), %xmm0
    0000019e: 	movdqu	(%rbp,%rdx), %xmm6
    000001a4: 	addq	$0x10, %rdx
    000001a8: 	pmullw	%xmm6, %xmm0
    000001ac: 	paddw	%xmm0, %xmm1
    000001b0: 	cmpq	%rdx, %rbx
    000001b3: 	jne	.Ltmp408 # Offset: 435
    000001b5: 	movdqa	%xmm1, %xmm0
    000001b9: 	psrldq	$0x8, %xmm0
    000001be: 	paddw	%xmm0, %xmm1
    000001c2: 	movdqa	%xmm1, %xmm0
    000001c6: 	psrldq	$0x4, %xmm0
    000001cb: 	paddw	%xmm0, %xmm1
    000001cf: 	movdqa	%xmm1, %xmm0
    000001d3: 	psrldq	$0x2, %xmm0
    000001d8: 	paddw	%xmm0, %xmm1
    000001dc: 	pextrw	$0x0, %xmm1, %edx
    000001e1: 	addl	%edx, %eax
    000001e3: 	movq	%r8, %rdx
    000001e6: 	andq	$-0x8, %rdx
    000001ea: 	leaq	(%r11,%rdx), %r10
    000001ee: 	cmpq	%r8, %rdx
    000001f1: 	je	.Ltmp406 # Offset: 497
.Ltmp412:
    000001f7: 	subq	%rdx, %r8
    000001fa: 	leaq	-0x1(%r8), %rbx
    000001fe: 	cmpq	$0x2, %rbx
    00000202: 	jbe	.Ltmp409 # Offset: 514
.Ltmp410:
    00000204: 	addq	%r11, %rdx
    00000207: 	movq	(%rsi,%rdx,2), %xmm0
    0000020c: 	movq	(%rcx,%rdx,2), %xmm1
    00000211: 	pmullw	%xmm1, %xmm0
    00000215: 	pextrw	$0x1, %xmm0, %edx
    0000021a: 	pextrw	$0x0, %xmm0, %r11d
    00000220: 	addl	%r11d, %edx
    00000223: 	addl	%eax, %edx
    00000225: 	pextrw	$0x2, %xmm0, %eax
    0000022a: 	addl	%eax, %edx
    0000022c: 	pextrw	$0x3, %xmm0, %eax
    00000231: 	addl	%edx, %eax
    00000233: 	movq	%r8, %rdx
    00000236: 	andq	$-0x4, %rdx
    0000023a: 	addq	%rdx, %r10
    0000023d: 	cmpq	%rdx, %r8
    00000240: 	je	.Ltmp406 # Offset: 576
.Ltmp409:
    00000242: 	movzwl	(%rsi,%r10,2), %r8d
    00000247: 	imulw	(%rcx,%r10,2), %r8w
    0000024d: 	leaq	(%r10,%r10), %rdx
    00000251: 	addl	%r8d, %eax
    00000254: 	leaq	0x1(%r10), %r8
    00000258: 	cmpq	%r8, %rdi
    0000025b: 	jbe	.Ltmp406 # Offset: 603
    0000025d: 	movzwl	0x2(%rsi,%rdx), %r8d
    00000263: 	imulw	0x2(%rcx,%rdx), %r8w
    0000026a: 	addq	$0x2, %r10
    0000026e: 	addl	%r8d, %eax
    00000271: 	cmpq	%r10, %rdi
    00000274: 	jbe	.Ltmp406 # Offset: 628
    00000276: 	movzwl	0x4(%rsi,%rdx), %esi
    0000027b: 	imulw	0x4(%rcx,%rdx), %si
    00000281: 	movl	%esi, %edx
    00000283: 	addl	%edx, %eax
.Ltmp406:
    00000285: 	addl	%r9d, %eax
    00000288: 	popq	%rbx
    00000289: 	popq	%rbp
    0000028a: 	retq # Offset: 650
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp402:
    00000290: 	movl	$0x7, %r8d
    00000296: 	xorl	%r10d, %r10d
    00000299: 	xorl	%eax, %eax
    0000029b: 	xorl	%edx, %edx
    0000029d: 	xorl	%r9d, %r9d
    000002a0: 	xorl	%r11d, %r11d
    000002a3: 	jmp	.Ltmp410 # Offset: 675
.Ltmp403:
    000002a8: 	xorl	%r10d, %r10d
    000002ab: 	xorl	%edx, %edx
    000002ad: 	xorl	%ebx, %ebx
    000002af: 	xorl	%r9d, %r9d
    000002b2: 	xorl	%eax, %eax
    000002b4: 	jmp	.Ltmp411 # Offset: 692
.Ltmp407:
    000002b9: 	movq	%r11, %r10
    000002bc: 	xorl	%edx, %edx
    000002be: 	jmp	.Ltmp412 # Offset: 702
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKttET0_T_S3_m"

Binary Function "_Z15inner_product10IPKttET0_T_S3_m" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x16ad0
  Size        : 0x3ce
  MaxSize     : 0x3d0
  Offset      : 0x16ad0
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKttET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rdx, %r10
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	cmpq	$0xf, %rdx
    00000014: 	je	.Ltmp413 # Offset: 20
    0000001a: 	leaq	-0x10(%rdx), %r8
    0000001e: 	movq	%r8, %r13
    00000021: 	shrq	$0x4, %r13
    00000025: 	cmpq	$0x1f, %r8
    00000029: 	jbe	.Ltmp414 # Offset: 41
    0000002f: 	movq	%r8, %rsi
    00000032: 	movq	%rcx, %rax
    00000035: 	pxor	%xmm4, %xmm4
    00000039: 	movq	%rdi, %rdx
    0000003c: 	shrq	$0x5, %rsi
    00000040: 	movq	%rsi, %r9
    00000043: 	shlq	$0x6, %r9
    00000047: 	addq	%rcx, %r9
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp415:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	(%rdx), %xmm2
    00000058: 	addq	$0x40, %rax
    0000005c: 	addq	$0x40, %rdx
    00000060: 	movdqu	-0x30(%rax), %xmm3
    00000065: 	movdqu	-0x10(%rax), %xmm6
    0000006a: 	movdqu	-0x20(%rax), %xmm7
    0000006f: 	movdqa	%xmm0, %xmm1
    00000073: 	movdqa	%xmm3, %xmm5
    00000077: 	punpckhqdq	%xmm6, %xmm5
    0000007b: 	punpckhqdq	%xmm7, %xmm1
    0000007f: 	movdqu	-0x20(%rdx), %xmm6
    00000084: 	movdqu	-0x10(%rax), %xmm7
    00000089: 	paddw	%xmm5, %xmm1
    0000008d: 	movdqa	%xmm2, %xmm5
    00000091: 	punpckhqdq	%xmm6, %xmm5
    00000095: 	movdqu	-0x20(%rax), %xmm6
    0000009a: 	punpcklqdq	%xmm7, %xmm3
    0000009e: 	movdqu	-0x20(%rdx), %xmm7
    000000a3: 	pmullw	%xmm5, %xmm1
    000000a7: 	punpcklqdq	%xmm6, %xmm0
    000000ab: 	punpcklqdq	%xmm7, %xmm2
    000000af: 	paddw	%xmm3, %xmm0
    000000b3: 	pmullw	%xmm2, %xmm0
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	paddw	%xmm0, %xmm4
    000000bf: 	cmpq	%rax, %r9
    000000c2: 	jne	.Ltmp415 # Offset: 194
    000000c4: 	pextrw	$0x0, %xmm4, %eax
    000000c9: 	pextrw	$0x4, %xmm4, %r9d
    000000cf: 	pextrw	$0x1, %xmm4, %r11d
    000000d5: 	addl	%eax, %r9d
    000000d8: 	pextrw	$0x5, %xmm4, %eax
    000000dd: 	pextrw	$0x6, %xmm4, %ebp
    000000e2: 	addl	%eax, %r11d
    000000e5: 	pextrw	$0x2, %xmm4, %eax
    000000ea: 	pextrw	$0x3, %xmm4, %ebx
    000000ef: 	addl	%eax, %ebp
    000000f1: 	pextrw	$0x7, %xmm4, %eax
    000000f6: 	leaq	(%rsi,%rsi), %rdx
    000000fa: 	shlq	$0x5, %rsi
    000000fe: 	addl	%eax, %ebx
.Ltmp422:
    00000100: 	movq	%r13, %r12
    00000103: 	subq	%rdx, %r12
    00000106: 	cmpq	%r13, %rdx
    00000109: 	je	.Ltmp416 # Offset: 265
    0000010f: 	shlq	$0x5, %rdx
    00000113: 	movzwl	%bx, %eax
    00000116: 	movzwl	%bp, %ebp
    00000119: 	movzwl	%r11w, %r11d
    0000011d: 	leaq	(%rdi,%rdx), %r13
    00000121: 	addq	%rcx, %rdx
    00000124: 	shlq	$0x10, %rax
    00000128: 	movzwl	%r9w, %r9d
    0000012c: 	movq	0x18(%rdx), %xmm1
    00000131: 	movq	0x8(%rdx), %xmm0
    00000136: 	orq	%rbp, %rax
    00000139: 	shlq	$0x4, %r12
    0000013d: 	movq	0x10(%rdx), %xmm2
    00000142: 	shlq	$0x10, %rax
    00000146: 	addq	%r12, %rsi
    00000149: 	paddw	%xmm1, %xmm0
    0000014d: 	movq	0x8(%r13), %xmm1
    00000153: 	orq	%r11, %rax
    00000156: 	shlq	$0x10, %rax
    0000015a: 	orq	%r9, %rax
    0000015d: 	pmullw	%xmm1, %xmm0
    00000161: 	movq	(%rdx), %xmm1
    00000165: 	movq	%rax, %xmm4
    0000016a: 	paddw	%xmm2, %xmm1
    0000016e: 	movq	(%r13), %xmm2
    00000174: 	pmullw	%xmm2, %xmm1
    00000178: 	paddw	%xmm4, %xmm0
    0000017c: 	paddw	%xmm1, %xmm0
    00000180: 	pextrw	$0x0, %xmm0, %r9d
    00000186: 	pextrw	$0x1, %xmm0, %r11d
    0000018c: 	pextrw	$0x2, %xmm0, %ebp
    00000191: 	pextrw	$0x3, %xmm0, %ebx
.Ltmp416:
    00000196: 	leaq	(%rsi,%rsi), %rdx
    0000019a: 	movzwl	(%rcx,%rsi,2), %eax
    0000019e: 	addw	0x10(%rcx,%rsi,2), %ax
    000001a3: 	addl	%ebp, %r11d
    000001a6: 	imulw	(%rdi,%rsi,2), %ax
    000001ab: 	movzwl	0x8(%rcx,%rdx), %esi
    000001b0: 	addl	%ebx, %r11d
    000001b3: 	andq	$-0x10, %r8
    000001b7: 	addw	0x18(%rcx,%rdx), %si
    000001bc: 	imulw	0x8(%rdi,%rdx), %si
    000001c2: 	addl	%esi, %eax
    000001c4: 	movzwl	0x2(%rcx,%rdx), %esi
    000001c9: 	addw	0x12(%rcx,%rdx), %si
    000001ce: 	imulw	0x2(%rdi,%rdx), %si
    000001d4: 	addl	%r9d, %eax
    000001d7: 	leaq	0x10(%r8), %r9
    000001db: 	addl	%r11d, %esi
    000001de: 	movzwl	0x4(%rcx,%rdx), %r11d
    000001e4: 	addw	0x14(%rcx,%rdx), %r11w
    000001ea: 	imulw	0x4(%rdi,%rdx), %r11w
    000001f1: 	addl	%r11d, %esi
    000001f4: 	movzwl	0x6(%rcx,%rdx), %r11d
    000001fa: 	addw	0x16(%rcx,%rdx), %r11w
    00000200: 	imulw	0x6(%rdi,%rdx), %r11w
    00000207: 	addl	%r11d, %esi
    0000020a: 	movzwl	0xa(%rcx,%rdx), %r11d
    00000210: 	addw	0x1a(%rcx,%rdx), %r11w
    00000216: 	imulw	0xa(%rdi,%rdx), %r11w
    0000021d: 	addl	%r11d, %esi
    00000220: 	movzwl	0xc(%rcx,%rdx), %r11d
    00000226: 	addw	0x1c(%rcx,%rdx), %r11w
    0000022c: 	imulw	0xc(%rdi,%rdx), %r11w
    00000233: 	addl	%r11d, %esi
    00000236: 	movzwl	0xe(%rcx,%rdx), %r11d
    0000023c: 	addw	0x1e(%rcx,%rdx), %r11w
    00000242: 	imulw	0xe(%rdi,%rdx), %r11w
    00000249: 	movl	%r11d, %edx
    0000024c: 	addl	%edx, %esi
    0000024e: 	cmpq	%r10, %r9
    00000251: 	jae	.Ltmp417 # Offset: 593
    00000257: 	addq	$0x11, %r8
    0000025b: 	movq	%r10, %rdx
    0000025e: 	movl	$0x1, %ebp
    00000263: 	subq	%r9, %rdx
    00000266: 	cmpq	%r8, %r10
    00000269: 	cmovaeq	%rdx, %rbp
    0000026d: 	subq	$0x1, %rdx
    00000271: 	cmpq	$0x6, %rdx
    00000275: 	jbe	.Ltmp418 # Offset: 629
    0000027b: 	cmpq	%r8, %r10
    0000027e: 	jb	.Ltmp418 # Offset: 638
.Ltmp421:
    00000284: 	movq	%rbp, %r11
    00000287: 	leaq	(%r9,%r9), %r8
    0000028b: 	pxor	%xmm1, %xmm1
    0000028f: 	xorl	%edx, %edx
    00000291: 	shrq	$0x3, %r11
    00000295: 	leaq	(%rdi,%r8), %rbx
    00000299: 	addq	%rcx, %r8
    0000029c: 	shlq	$0x4, %r11
.Ltmp419:
    000002a0: 	movdqu	(%r8,%rdx), %xmm0
    000002a6: 	movdqu	(%rbx,%rdx), %xmm4
    000002ab: 	addq	$0x10, %rdx
    000002af: 	pmullw	%xmm4, %xmm0
    000002b3: 	paddw	%xmm0, %xmm1
    000002b7: 	cmpq	%r11, %rdx
    000002ba: 	jne	.Ltmp419 # Offset: 698
    000002bc: 	movdqa	%xmm1, %xmm0
    000002c0: 	psrldq	$0x8, %xmm0
    000002c5: 	paddw	%xmm0, %xmm1
    000002c9: 	movdqa	%xmm1, %xmm0
    000002cd: 	psrldq	$0x4, %xmm0
    000002d2: 	paddw	%xmm0, %xmm1
    000002d6: 	movdqa	%xmm1, %xmm0
    000002da: 	psrldq	$0x2, %xmm0
    000002df: 	paddw	%xmm0, %xmm1
    000002e3: 	pextrw	$0x0, %xmm1, %edx
    000002e8: 	addl	%edx, %eax
    000002ea: 	movq	%rbp, %rdx
    000002ed: 	andq	$-0x8, %rdx
    000002f1: 	leaq	(%r9,%rdx), %r11
    000002f5: 	cmpq	%rbp, %rdx
    000002f8: 	je	.Ltmp417 # Offset: 760
.Ltmp423:
    000002fe: 	movq	%rbp, %r8
    00000301: 	subq	%rdx, %r8
    00000304: 	leaq	-0x1(%r8), %rbx
    00000308: 	cmpq	$0x2, %rbx
    0000030c: 	jbe	.Ltmp420 # Offset: 780
    0000030e: 	addq	%rdx, %r9
    00000311: 	movq	(%rcx,%r9,2), %xmm0
    00000317: 	movq	(%rdi,%r9,2), %xmm1
    0000031d: 	pmullw	%xmm1, %xmm0
    00000321: 	pextrw	$0x1, %xmm0, %edx
    00000326: 	pextrw	$0x0, %xmm0, %r9d
    0000032c: 	addl	%r9d, %edx
    0000032f: 	addl	%eax, %edx
    00000331: 	pextrw	$0x2, %xmm0, %eax
    00000336: 	addl	%eax, %edx
    00000338: 	pextrw	$0x3, %xmm0, %eax
    0000033d: 	addl	%edx, %eax
    0000033f: 	movq	%r8, %rdx
    00000342: 	andq	$-0x4, %rdx
    00000346: 	addq	%rdx, %r11
    00000349: 	cmpq	%r8, %rdx
    0000034c: 	je	.Ltmp417 # Offset: 844
.Ltmp420:
    0000034e: 	movzwl	(%rdi,%r11,2), %edx
    00000353: 	imulw	(%rcx,%r11,2), %dx
    00000359: 	leaq	(%r11,%r11), %r8
    0000035d: 	addl	%edx, %eax
    0000035f: 	leaq	0x1(%r11), %rdx
    00000363: 	cmpq	%r10, %rdx
    00000366: 	jae	.Ltmp417 # Offset: 870
    00000368: 	movzwl	0x2(%rdi,%r8), %edx
    0000036e: 	imulw	0x2(%rcx,%r8), %dx
    00000375: 	addl	%edx, %eax
    00000377: 	leaq	0x2(%r11), %rdx
    0000037b: 	cmpq	%r10, %rdx
    0000037e: 	jae	.Ltmp417 # Offset: 894
    00000380: 	movzwl	0x4(%rcx,%r8), %edx
    00000386: 	imulw	0x4(%rdi,%r8), %dx
    0000038d: 	addl	%edx, %eax
.Ltmp417:
    0000038f: 	popq	%rbx
    00000390: 	addl	%esi, %eax
    00000392: 	popq	%rbp
    00000393: 	popq	%r12
    00000395: 	popq	%r13
    00000397: 	retq # Offset: 919
    00000398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp413:
    000003a0: 	movl	$0xf, %ebp
    000003a5: 	xorl	%esi, %esi
    000003a7: 	xorl	%r9d, %r9d
    000003aa: 	xorl	%eax, %eax
    000003ac: 	jmp	.Ltmp421 # Offset: 940
.Ltmp414:
    000003b1: 	xorl	%edx, %edx
    000003b3: 	xorl	%ebx, %ebx
    000003b5: 	xorl	%ebp, %ebp
    000003b7: 	xorl	%r11d, %r11d
    000003ba: 	xorl	%r9d, %r9d
    000003bd: 	xorl	%esi, %esi
    000003bf: 	jmp	.Ltmp422 # Offset: 959
.Ltmp418:
    000003c4: 	movq	%r9, %r11
    000003c7: 	xorl	%edx, %edx
    000003c9: 	jmp	.Ltmp423 # Offset: 969
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKttET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKiiET0_T_S3_m" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x16ea0
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x16ea0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rdx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leaq	(%rdi,%rdx), %r8
    0000000f: 	cmpq	%rdi, %r8
    00000012: 	je	.Ltmp424 # Offset: 18
    00000018: 	subq	$0x4, %rdx
    0000001c: 	movq	%rdx, %rdi
    0000001f: 	shrq	$0x2, %rdi
    00000023: 	addq	$0x1, %rdi
    00000027: 	cmpq	$0x8, %rdx
    0000002b: 	jbe	.Ltmp425 # Offset: 43
    00000031: 	movq	%rdi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm3, %xmm3
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp426:
    00000048: 	movdqu	(%rcx,%rax), %xmm0
    0000004d: 	movdqu	(%rsi,%rax), %xmm2
    00000052: 	movdqu	(%rcx,%rax), %xmm1
    00000057: 	movdqu	(%rsi,%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	psrlq	$0x20, %xmm0
    00000065: 	psrlq	$0x20, %xmm2
    0000006a: 	pmuludq	%xmm4, %xmm1
    0000006e: 	pmuludq	%xmm2, %xmm0
    00000072: 	pshufd	$0x8, %xmm1, %xmm1
    00000077: 	pshufd	$0x8, %xmm0, %xmm0
    0000007c: 	punpckldq	%xmm0, %xmm1
    00000080: 	paddd	%xmm1, %xmm3
    00000084: 	cmpq	%rdx, %rax
    00000087: 	jne	.Ltmp426 # Offset: 135
    00000089: 	movdqa	%xmm3, %xmm0
    0000008d: 	movq	%rdi, %rdx
    00000090: 	psrldq	$0x8, %xmm0
    00000095: 	andq	$-0x4, %rdx
    00000099: 	paddd	%xmm0, %xmm3
    0000009d: 	leaq	(,%rdx,4), %r9
    000000a5: 	movdqa	%xmm3, %xmm0
    000000a9: 	addq	%r9, %rcx
    000000ac: 	addq	%r9, %rsi
    000000af: 	psrldq	$0x4, %xmm0
    000000b4: 	paddd	%xmm0, %xmm3
    000000b8: 	movd	%xmm3, %eax
    000000bc: 	cmpq	%rdx, %rdi
    000000bf: 	je	.Ltmp427 # Offset: 191
.Ltmp429:
    000000c1: 	movl	(%rcx), %edx
    000000c3: 	imull	(%rsi), %edx
    000000c6: 	addl	%edx, %eax
    000000c8: 	leaq	0x4(%rcx), %rdx
    000000cc: 	cmpq	%rdx, %r8
    000000cf: 	je	.Ltmp428 # Offset: 207
    000000d1: 	movl	0x4(%rcx), %edx
    000000d4: 	imull	0x4(%rsi), %edx
    000000d8: 	addl	%edx, %eax
    000000da: 	leaq	0x8(%rcx), %rdx
    000000de: 	cmpq	%rdx, %r8
    000000e1: 	je	.Ltmp428 # Offset: 225
    000000e3: 	movl	0x8(%rcx), %edx
    000000e6: 	imull	0x8(%rsi), %edx
    000000ea: 	addl	%edx, %eax
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp424:
    000000f0: 	xorl	%eax, %eax
.Ltmp428:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp427:
    000000f8: 	retq # Offset: 248
.Ltmp425:
    000000f9: 	xorl	%eax, %eax
    000000fb: 	jmp	.Ltmp429 # Offset: 251
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKiiET0_T_S3_m"

Binary Function "_Z14inner_product1IPKiiET0_T_S3_m" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x16fa0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x16fa0
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp430 # Offset: 10
    00000010: 	leaq	-0x1(%rdx), %rax
    00000014: 	cmpq	$0x2, %rax
    00000018: 	jbe	.Ltmp431 # Offset: 24
    0000001e: 	movq	%rdx, %rdi
    00000021: 	xorl	%eax, %eax
    00000023: 	pxor	%xmm3, %xmm3
    00000027: 	shrq	$0x2, %rdi
    0000002b: 	shlq	$0x4, %rdi
    0000002f: 	nop # Size: 1
.Ltmp432:
    00000030: 	movdqu	(%rcx,%rax), %xmm0
    00000035: 	movdqu	(%rsi,%rax), %xmm2
    0000003a: 	movdqu	(%rcx,%rax), %xmm1
    0000003f: 	movdqu	(%rsi,%rax), %xmm4
    00000044: 	addq	$0x10, %rax
    00000048: 	psrlq	$0x20, %xmm0
    0000004d: 	psrlq	$0x20, %xmm2
    00000052: 	pmuludq	%xmm4, %xmm1
    00000056: 	pmuludq	%xmm2, %xmm0
    0000005a: 	pshufd	$0x8, %xmm1, %xmm1
    0000005f: 	pshufd	$0x8, %xmm0, %xmm0
    00000064: 	punpckldq	%xmm0, %xmm1
    00000068: 	paddd	%xmm1, %xmm3
    0000006c: 	cmpq	%rdi, %rax
    0000006f: 	jne	.Ltmp432 # Offset: 111
    00000071: 	movdqa	%xmm3, %xmm0
    00000075: 	movq	%rdx, %rdi
    00000078: 	psrldq	$0x8, %xmm0
    0000007d: 	andq	$-0x4, %rdi
    00000081: 	paddd	%xmm0, %xmm3
    00000085: 	movdqa	%xmm3, %xmm0
    00000089: 	psrldq	$0x4, %xmm0
    0000008e: 	paddd	%xmm0, %xmm3
    00000092: 	movd	%xmm3, %eax
    00000096: 	testb	$0x3, %dl
    00000099: 	je	.Ltmp433 # Offset: 153
.Ltmp435:
    0000009b: 	movl	(%rcx,%rdi,4), %r9d
    0000009f: 	imull	(%rsi,%rdi,4), %r9d
    000000a4: 	leaq	(,%rdi,4), %r8
    000000ac: 	addl	%r9d, %eax
    000000af: 	leaq	0x1(%rdi), %r9
    000000b3: 	cmpq	%r9, %rdx
    000000b6: 	jbe	.Ltmp434 # Offset: 182
    000000b8: 	movl	0x4(%rcx,%r8), %r9d
    000000bd: 	imull	0x4(%rsi,%r8), %r9d
    000000c3: 	addq	$0x2, %rdi
    000000c7: 	addl	%r9d, %eax
    000000ca: 	cmpq	%rdi, %rdx
    000000cd: 	jbe	.Ltmp434 # Offset: 205
    000000cf: 	movl	0x8(%rsi,%r8), %edx
    000000d4: 	imull	0x8(%rcx,%r8), %edx
    000000da: 	addl	%edx, %eax
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp430:
    000000e0: 	xorl	%eax, %eax
.Ltmp434:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp433:
    000000e8: 	retq # Offset: 232
.Ltmp431:
    000000e9: 	xorl	%edi, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	jmp	.Ltmp435 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product2IPKiiET0_T_S3_m" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x17090
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x17090
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rdx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leaq	(%rdi,%rdx), %r8
    0000000f: 	cmpq	%r8, %rdi
    00000012: 	je	.Ltmp436 # Offset: 18
    00000018: 	subq	$0x4, %rdx
    0000001c: 	movq	%rdx, %rdi
    0000001f: 	shrq	$0x2, %rdi
    00000023: 	addq	$0x1, %rdi
    00000027: 	cmpq	$0x8, %rdx
    0000002b: 	jbe	.Ltmp437 # Offset: 43
    00000031: 	movq	%rdi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm3, %xmm3
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp438:
    00000048: 	movdqu	(%rcx,%rax), %xmm0
    0000004d: 	movdqu	(%rsi,%rax), %xmm2
    00000052: 	movdqu	(%rcx,%rax), %xmm1
    00000057: 	movdqu	(%rsi,%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	psrlq	$0x20, %xmm0
    00000065: 	psrlq	$0x20, %xmm2
    0000006a: 	pmuludq	%xmm4, %xmm1
    0000006e: 	pmuludq	%xmm2, %xmm0
    00000072: 	pshufd	$0x8, %xmm1, %xmm1
    00000077: 	pshufd	$0x8, %xmm0, %xmm0
    0000007c: 	punpckldq	%xmm0, %xmm1
    00000080: 	paddd	%xmm1, %xmm3
    00000084: 	cmpq	%rdx, %rax
    00000087: 	jne	.Ltmp438 # Offset: 135
    00000089: 	movdqa	%xmm3, %xmm0
    0000008d: 	movq	%rdi, %rdx
    00000090: 	psrldq	$0x8, %xmm0
    00000095: 	andq	$-0x4, %rdx
    00000099: 	paddd	%xmm0, %xmm3
    0000009d: 	leaq	(,%rdx,4), %r9
    000000a5: 	movdqa	%xmm3, %xmm0
    000000a9: 	addq	%r9, %rcx
    000000ac: 	addq	%r9, %rsi
    000000af: 	psrldq	$0x4, %xmm0
    000000b4: 	paddd	%xmm0, %xmm3
    000000b8: 	movd	%xmm3, %eax
    000000bc: 	cmpq	%rdx, %rdi
    000000bf: 	je	.Ltmp439 # Offset: 191
.Ltmp441:
    000000c1: 	movl	(%rcx), %edx
    000000c3: 	imull	(%rsi), %edx
    000000c6: 	addl	%edx, %eax
    000000c8: 	leaq	0x4(%rcx), %rdx
    000000cc: 	cmpq	%rdx, %r8
    000000cf: 	je	.Ltmp440 # Offset: 207
    000000d1: 	movl	0x4(%rcx), %edx
    000000d4: 	imull	0x4(%rsi), %edx
    000000d8: 	addl	%edx, %eax
    000000da: 	leaq	0x8(%rcx), %rdx
    000000de: 	cmpq	%rdx, %r8
    000000e1: 	je	.Ltmp440 # Offset: 225
    000000e3: 	movl	0x8(%rcx), %edx
    000000e6: 	imull	0x8(%rsi), %edx
    000000ea: 	addl	%edx, %eax
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp436:
    000000f0: 	xorl	%eax, %eax
.Ltmp440:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp439:
    000000f8: 	retq # Offset: 248
.Ltmp437:
    000000f9: 	xorl	%eax, %eax
    000000fb: 	jmp	.Ltmp441 # Offset: 251
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product3IPKiiET0_T_S3_m" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x17190
  Size        : 0xfa
  MaxSize     : 0x100
  Offset      : 0x17190
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r9
    00000007: 	cmpq	$0x1, %rdx
    0000000b: 	je	.Ltmp442 # Offset: 11
    00000011: 	leaq	-0x2(%rdx), %r8
    00000015: 	movq	%r8, %rcx
    00000018: 	shrq	%rcx
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	$0x1, %r8
    00000023: 	jbe	.Ltmp443 # Offset: 35
    00000029: 	movq	%rcx, %rdx
    0000002c: 	xorl	%eax, %eax
    0000002e: 	pxor	%xmm1, %xmm1
    00000032: 	shrq	%rdx
    00000035: 	shlq	$0x4, %rdx
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp444:
    00000040: 	movdqu	(%rsi,%rax), %xmm0
    00000045: 	movdqu	(%rdi,%rax), %xmm3
    0000004a: 	movdqu	(%rsi,%rax), %xmm2
    0000004f: 	movdqu	(%rdi,%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	psrlq	$0x20, %xmm0
    0000005d: 	psrlq	$0x20, %xmm3
    00000062: 	pmuludq	%xmm4, %xmm2
    00000066: 	pmuludq	%xmm3, %xmm0
    0000006a: 	pshufd	$0x8, %xmm2, %xmm2
    0000006f: 	pshufd	$0x8, %xmm0, %xmm0
    00000074: 	punpckldq	%xmm0, %xmm2
    00000078: 	paddd	%xmm2, %xmm1
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp444 # Offset: 127
    00000081: 	movdqa	%xmm1, %xmm0
    00000085: 	movq	%rcx, %r10
    00000088: 	psrldq	$0x8, %xmm0
    0000008d: 	andq	$-0x2, %r10
    00000091: 	paddd	%xmm0, %xmm1
    00000095: 	leaq	(%r10,%r10), %rdx
    00000099: 	movdqa	%xmm1, %xmm0
    0000009d: 	psrldq	$0x4, %xmm0
    000000a2: 	paddd	%xmm0, %xmm1
    000000a6: 	movd	%xmm1, %eax
    000000aa: 	cmpq	%rcx, %r10
    000000ad: 	je	.Ltmp445 # Offset: 173
.Ltmp448:
    000000af: 	movl	(%rsi,%rdx,4), %ecx
    000000b2: 	imull	(%rdi,%rdx,4), %ecx
    000000b6: 	addl	%ecx, %eax
    000000b8: 	movl	0x4(%rsi,%rdx,4), %ecx
    000000bc: 	imull	0x4(%rdi,%rdx,4), %ecx
    000000c1: 	addl	%ecx, %eax
.Ltmp445:
    000000c3: 	andq	$-0x2, %r8
    000000c7: 	addq	$0x2, %r8
    000000cb: 	cmpq	%r8, %r9
    000000ce: 	ja	.Ltmp446 # Offset: 206
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp446:
    000000d8: 	shlq	$0x2, %r8
    000000dc: 	addq	%r8, %rdi
    000000df: 	addq	%r8, %rsi
.Ltmp447:
    000000e2: 	movl	(%rdi), %edx
    000000e4: 	imull	(%rsi), %edx
    000000e7: 	addl	%edx, %eax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp442:
    000000f0: 	xorl	%eax, %eax
    000000f2: 	jmp	.Ltmp447 # Offset: 242
.Ltmp443:
    000000f4: 	xorl	%eax, %eax
    000000f6: 	xorl	%edx, %edx
    000000f8: 	jmp	.Ltmp448 # Offset: 248
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product4IPKiiET0_T_S3_m" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x17290
  Size        : 0x122
  MaxSize     : 0x130
  Offset      : 0x17290
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rdx, %r9
    0000000a: 	cmpq	$0x3, %rdx
    0000000e: 	je	.Ltmp449 # Offset: 14
    00000014: 	leaq	-0x4(%rdx), %r8
    00000018: 	xorl	%eax, %eax
    0000001a: 	pxor	%xmm3, %xmm3
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%r8, %rdi
    00000023: 	shrq	$0x2, %rdi
    00000027: 	addq	$0x1, %rdi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp450:
    00000030: 	movdqu	(%rsi,%rax), %xmm0
    00000035: 	movdqu	(%rcx,%rax), %xmm2
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	movdqu	(%rsi,%rax), %xmm1
    00000043: 	movdqu	(%rcx,%rax), %xmm4
    00000048: 	addq	$0x10, %rax
    0000004c: 	psrlq	$0x20, %xmm0
    00000051: 	psrlq	$0x20, %xmm2
    00000056: 	pmuludq	%xmm4, %xmm1
    0000005a: 	pmuludq	%xmm2, %xmm0
    0000005e: 	pshufd	$0x8, %xmm1, %xmm1
    00000063: 	pshufd	$0x8, %xmm0, %xmm0
    00000068: 	punpckldq	%xmm0, %xmm1
    0000006c: 	paddd	%xmm1, %xmm3
    00000070: 	cmpq	%rdi, %rdx
    00000073: 	jb	.Ltmp450 # Offset: 115
    00000075: 	movdqa	%xmm3, %xmm0
    00000079: 	movq	%r8, %rdx
    0000007c: 	psrldq	$0x8, %xmm0
    00000081: 	andq	$-0x4, %rdx
    00000085: 	paddd	%xmm0, %xmm3
    00000089: 	leaq	0x4(%rdx), %rdi
    0000008d: 	movdqa	%xmm3, %xmm0
    00000091: 	psrldq	$0x4, %xmm0
    00000096: 	paddd	%xmm0, %xmm3
    0000009a: 	movd	%xmm3, %eax
    0000009e: 	cmpq	%rdi, %r9
    000000a1: 	jbe	.Ltmp451 # Offset: 161
    000000a3: 	movl	(%rsi,%rdi,4), %r8d
    000000a7: 	imull	(%rcx,%rdi,4), %r8d
    000000ac: 	leaq	(,%rdi,4), %r10
    000000b4: 	leaq	0x5(%rdx), %rdi
    000000b8: 	addl	%r8d, %eax
    000000bb: 	cmpq	%r9, %rdi
    000000be: 	jae	.Ltmp451 # Offset: 190
    000000c0: 	movl	0x4(%rcx,%r10), %r8d
    000000c5: 	imull	0x4(%rsi,%r10), %r8d
    000000cb: 	addq	$0x6, %rdx
    000000cf: 	leaq	0x4(%r10), %rdi
    000000d3: 	addl	%r8d, %eax
    000000d6: 	cmpq	%r9, %rdx
    000000d9: 	jae	.Ltmp451 # Offset: 217
.Ltmp452:
    000000db: 	movl	0x4(%rsi,%rdi), %r8d
    000000e0: 	imull	0x4(%rcx,%rdi), %r8d
    000000e6: 	addq	$0x1, %rdx
    000000ea: 	addl	%r8d, %eax
    000000ed: 	cmpq	%r9, %rdx
    000000f0: 	jae	.Ltmp451 # Offset: 240
    000000f2: 	movl	0x8(%rcx,%rdi), %edx
    000000f6: 	imull	0x8(%rsi,%rdi), %edx
    000000fb: 	addl	%edx, %eax
    000000fd: 	retq # Offset: 253
    000000fe: 	nop # Size: 2
.Ltmp451:
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp449:
    00000108: 	movl	(%rsi), %eax
    0000010a: 	movl	0x4(%rsi), %edx
    0000010d: 	imull	(%rdi), %eax
    00000110: 	imull	0x4(%rdi), %edx
    00000114: 	movl	$0x4, %edi
    00000119: 	addl	%edx, %eax
    0000011b: 	movl	$0x2, %edx
    00000120: 	jmp	.Ltmp452 # Offset: 288
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product5IPKiiET0_T_S3_m" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x173c0
  Size        : 0x25d
  MaxSize     : 0x260
  Offset      : 0x173c0
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %r8
    0000000a: 	cmpq	$0x7, %rdx
    0000000e: 	je	.Ltmp453 # Offset: 14
    00000014: 	leaq	-0x8(%rdx), %r9
    00000018: 	pxor	%xmm3, %xmm3
    0000001c: 	xorl	%eax, %eax
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%r9, %rsi
    00000023: 	movdqa	%xmm3, %xmm4
    00000027: 	shrq	$0x3, %rsi
    0000002b: 	addq	$0x1, %rsi
    0000002f: 	nop # Size: 1
.Ltmp454:
    00000030: 	movdqu	(%rcx,%rax), %xmm0
    00000035: 	movdqu	(%rdi,%rax), %xmm2
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	movdqu	(%rcx,%rax), %xmm1
    00000043: 	movdqu	(%rdi,%rax), %xmm5
    00000048: 	psrlq	$0x20, %xmm2
    0000004d: 	psrlq	$0x20, %xmm0
    00000052: 	movdqu	0x10(%rdi,%rax), %xmm6
    00000058: 	pmuludq	%xmm2, %xmm0
    0000005c: 	pmuludq	%xmm5, %xmm1
    00000060: 	movdqu	0x10(%rdi,%rax), %xmm2
    00000066: 	psrlq	$0x20, %xmm2
    0000006b: 	pshufd	$0x8, %xmm0, %xmm0
    00000070: 	pshufd	$0x8, %xmm1, %xmm1
    00000075: 	punpckldq	%xmm0, %xmm1
    00000079: 	movdqu	0x10(%rcx,%rax), %xmm0
    0000007f: 	paddd	%xmm1, %xmm4
    00000083: 	movdqu	0x10(%rcx,%rax), %xmm1
    00000089: 	addq	$0x20, %rax
    0000008d: 	psrlq	$0x20, %xmm0
    00000092: 	pmuludq	%xmm6, %xmm1
    00000096: 	pmuludq	%xmm2, %xmm0
    0000009a: 	pshufd	$0x8, %xmm1, %xmm1
    0000009f: 	pshufd	$0x8, %xmm0, %xmm0
    000000a4: 	punpckldq	%xmm0, %xmm1
    000000a8: 	paddd	%xmm1, %xmm3
    000000ac: 	cmpq	%rdx, %rsi
    000000af: 	ja	.Ltmp454 # Offset: 175
    000000b5: 	paddd	%xmm4, %xmm3
    000000b9: 	andq	$-0x8, %r9
    000000bd: 	movdqa	%xmm3, %xmm0
    000000c1: 	leaq	0x8(%r9), %rsi
    000000c5: 	psrldq	$0x8, %xmm0
    000000ca: 	paddd	%xmm0, %xmm3
    000000ce: 	movdqa	%xmm3, %xmm0
    000000d2: 	psrldq	$0x4, %xmm0
    000000d7: 	paddd	%xmm0, %xmm3
    000000db: 	movd	%xmm3, %eax
    000000df: 	cmpq	%rsi, %r8
    000000e2: 	jbe	.Ltmp455 # Offset: 226
    000000e8: 	addq	$0x9, %r9
    000000ec: 	movq	%r8, %rdx
    000000ef: 	movl	$0x1, %r10d
    000000f5: 	subq	%rsi, %rdx
    000000f8: 	cmpq	%r9, %r8
    000000fb: 	cmovaeq	%rdx, %r10
    000000ff: 	subq	$0x1, %rdx
    00000103: 	cmpq	$0x2, %rdx
    00000107: 	jbe	.Ltmp456 # Offset: 263
    0000010d: 	cmpq	%r9, %r8
    00000110: 	jb	.Ltmp456 # Offset: 272
    00000116: 	leaq	(,%rsi,4), %rdx
    0000011e: 	movq	%r10, %r9
    00000121: 	leaq	(%rdi,%rdx), %r11
    00000125: 	addq	%rcx, %rdx
    00000128: 	shrq	$0x2, %r9
    0000012c: 	movdqu	(%rdx), %xmm1
    00000130: 	movdqu	(%r11), %xmm2
    00000135: 	movdqu	(%rdx), %xmm0
    00000139: 	movdqu	(%r11), %xmm7
    0000013e: 	psrlq	$0x20, %xmm1
    00000143: 	psrlq	$0x20, %xmm2
    00000148: 	pmuludq	%xmm7, %xmm0
    0000014c: 	pmuludq	%xmm2, %xmm1
    00000150: 	pshufd	$0x8, %xmm0, %xmm0
    00000155: 	pshufd	$0x8, %xmm1, %xmm1
    0000015a: 	punpckldq	%xmm1, %xmm0
    0000015e: 	cmpq	$0x1, %r9
    00000162: 	je	.Ltmp457 # Offset: 354
    00000164: 	movdqu	0x10(%rdx), %xmm1
    00000169: 	movdqu	0x10(%r11), %xmm3
    0000016f: 	movdqa	%xmm1, %xmm2
    00000173: 	psrlq	$0x20, %xmm1
    00000178: 	pmuludq	%xmm3, %xmm2
    0000017c: 	psrlq	$0x20, %xmm3
    00000181: 	pmuludq	%xmm3, %xmm1
    00000185: 	pshufd	$0x8, %xmm2, %xmm2
    0000018a: 	pshufd	$0x8, %xmm1, %xmm1
    0000018f: 	punpckldq	%xmm1, %xmm2
    00000193: 	paddd	%xmm2, %xmm0
.Ltmp457:
    00000197: 	movdqa	%xmm0, %xmm1
    0000019b: 	psrldq	$0x8, %xmm1
    000001a0: 	paddd	%xmm1, %xmm0
    000001a4: 	movdqa	%xmm0, %xmm1
    000001a8: 	psrldq	$0x4, %xmm1
    000001ad: 	paddd	%xmm1, %xmm0
    000001b1: 	movd	%xmm0, %edx
    000001b5: 	addl	%edx, %eax
    000001b7: 	leaq	(,%r9,4), %rdx
    000001bf: 	addq	%rdx, %rsi
    000001c2: 	cmpq	%rdx, %r10
    000001c5: 	je	.Ltmp455 # Offset: 453
.Ltmp456:
    000001c7: 	movl	(%rcx,%rsi,4), %r9d
    000001cb: 	imull	(%rdi,%rsi,4), %r9d
    000001d0: 	leaq	(,%rsi,4), %rdx
    000001d8: 	addl	%r9d, %eax
    000001db: 	leaq	0x1(%rsi), %r9
    000001df: 	cmpq	%r8, %r9
    000001e2: 	jae	.Ltmp455 # Offset: 482
    000001e4: 	movl	0x4(%rdi,%rdx), %r9d
    000001e9: 	imull	0x4(%rcx,%rdx), %r9d
    000001ef: 	addq	$0x2, %rsi
    000001f3: 	addl	%r9d, %eax
    000001f6: 	cmpq	%r8, %rsi
    000001f9: 	jae	.Ltmp455 # Offset: 505
    000001fb: 	movl	0x8(%rcx,%rdx), %ecx
    000001ff: 	imull	0x8(%rdi,%rdx), %ecx
    00000204: 	addl	%ecx, %eax
    00000206: 	retq # Offset: 518
    00000207: 	nopw	(%rax,%rax) # Size: 9
.Ltmp455:
    00000210: 	retq # Offset: 528
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp453:
    00000218: 	movdqu	(%rsi), %xmm2
    0000021c: 	movdqu	(%rdi), %xmm1
    00000220: 	movl	$0x7, %r10d
    00000226: 	xorl	%eax, %eax
    00000228: 	movdqu	(%rsi), %xmm7
    0000022c: 	movdqu	(%rdi), %xmm0
    00000230: 	movl	$0x1, %r9d
    00000236: 	xorl	%esi, %esi
    00000238: 	psrlq	$0x20, %xmm1
    0000023d: 	psrlq	$0x20, %xmm2
    00000242: 	pmuludq	%xmm7, %xmm0
    00000246: 	pmuludq	%xmm2, %xmm1
    0000024a: 	pshufd	$0x8, %xmm0, %xmm0
    0000024f: 	pshufd	$0x8, %xmm1, %xmm1
    00000254: 	punpckldq	%xmm1, %xmm0
    00000258: 	jmp	.Ltmp457 # Offset: 600
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product6IPKiiET0_T_S3_m" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x17620
  Size        : 0x44c
  MaxSize     : 0x450
  Offset      : 0x17620
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rdx, %r11
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpq	$0xf, %rdx
    00000018: 	je	.Ltmp458 # Offset: 24
    0000001e: 	leaq	-0x10(%rdx), %r10
    00000022: 	movq	%r10, %r15
    00000025: 	shrq	$0x4, %r15
    00000029: 	cmpq	$0xf, %r10
    0000002d: 	jbe	.Ltmp459 # Offset: 45
    00000033: 	pxor	%xmm4, %xmm4
    00000037: 	movq	%rsi, %rax
    0000003a: 	movq	%rdi, %rdx
    0000003d: 	xorl	%esi, %esi
    0000003f: 	movdqa	%xmm4, %xmm5
    00000043: 	movdqa	%xmm4, %xmm3
    00000047: 	movdqa	%xmm4, %xmm6
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp460:
    00000050: 	movdqu	(%rdx), %xmm1
    00000054: 	movdqu	(%rax), %xmm2
    00000058: 	addq	$0x1, %rsi
    0000005c: 	addq	$0x40, %rax
    00000060: 	movdqu	-0x40(%rax), %xmm7
    00000065: 	movdqu	0x10(%rdx), %xmm0
    0000006a: 	addq	$0x40, %rdx
    0000006e: 	movdqa	%xmm1, %xmm8
    00000073: 	psrlq	$0x20, %xmm2
    00000078: 	movdqu	-0x30(%rax), %xmm9
    0000007e: 	psrlq	$0x20, %xmm8
    00000084: 	pmuludq	%xmm1, %xmm7
    00000088: 	pmuludq	%xmm8, %xmm2
    0000008d: 	pmuludq	%xmm0, %xmm9
    00000092: 	pshufd	$0x8, %xmm7, %xmm7
    00000097: 	pshufd	$0x8, %xmm2, %xmm2
    0000009c: 	pshufd	$0x8, %xmm9, %xmm9
    000000a2: 	punpckldq	%xmm2, %xmm7
    000000a6: 	movdqu	-0x30(%rax), %xmm2
    000000ab: 	paddd	%xmm7, %xmm6
    000000af: 	movdqa	%xmm0, %xmm7
    000000b3: 	psrlq	$0x20, %xmm7
    000000b8: 	psrlq	$0x20, %xmm2
    000000bd: 	pmuludq	%xmm7, %xmm2
    000000c1: 	pshufd	$0x8, %xmm2, %xmm2
    000000c6: 	punpckldq	%xmm2, %xmm9
    000000cb: 	movdqu	-0x20(%rax), %xmm2
    000000d0: 	paddd	%xmm9, %xmm3
    000000d5: 	pmuludq	%xmm2, %xmm1
    000000d9: 	movdqu	-0x20(%rax), %xmm2
    000000de: 	psrlq	$0x20, %xmm2
    000000e3: 	pmuludq	%xmm8, %xmm2
    000000e8: 	pshufd	$0x8, %xmm1, %xmm1
    000000ed: 	pshufd	$0x8, %xmm2, %xmm2
    000000f2: 	punpckldq	%xmm2, %xmm1
    000000f6: 	paddd	%xmm1, %xmm5
    000000fa: 	movdqu	-0x10(%rax), %xmm1
    000000ff: 	pmuludq	%xmm1, %xmm0
    00000103: 	movdqu	-0x10(%rax), %xmm1
    00000108: 	psrlq	$0x20, %xmm1
    0000010d: 	pmuludq	%xmm7, %xmm1
    00000111: 	pshufd	$0x8, %xmm0, %xmm0
    00000116: 	pshufd	$0x8, %xmm1, %xmm1
    0000011b: 	punpckldq	%xmm1, %xmm0
    0000011f: 	paddd	%xmm0, %xmm4
    00000123: 	cmpq	%r15, %rsi
    00000126: 	jb	.Ltmp460 # Offset: 294
    0000012c: 	paddd	%xmm6, %xmm3
    00000130: 	shlq	$0x4, %r15
    00000134: 	paddd	%xmm5, %xmm3
    00000138: 	paddd	%xmm4, %xmm3
    0000013c: 	movdqa	%xmm3, %xmm0
    00000140: 	psrldq	$0x8, %xmm0
    00000145: 	paddd	%xmm0, %xmm3
    00000149: 	movdqa	%xmm3, %xmm0
    0000014d: 	psrldq	$0x4, %xmm0
    00000152: 	paddd	%xmm0, %xmm3
    00000156: 	movd	%xmm3, -0xc(%rsp)
.Ltmp465:
    0000015c: 	movl	(%rdi,%r15,4), %r13d
    00000160: 	movl	(%rcx,%r15,4), %r14d
    00000164: 	leaq	(,%r15,4), %rax
    0000016c: 	movl	-0xc(%rsp), %r15d
    00000171: 	movl	0x4(%rdi,%rax), %r12d
    00000176: 	imull	%r13d, %r14d
    0000017a: 	movl	0x8(%rdi,%rax), %ebp
    0000017e: 	movl	0xc(%rdi,%rax), %ebx
    00000182: 	movl	0x10(%rdi,%rax), %r8d
    00000187: 	movl	0x14(%rdi,%rax), %esi
    0000018b: 	movl	0x18(%rdi,%rax), %edx
    0000018f: 	movl	0x1c(%rdi,%rax), %r9d
    00000194: 	addl	%r14d, %r15d
    00000197: 	movl	0x4(%rcx,%rax), %r14d
    0000019c: 	imull	0x20(%rcx,%rax), %r13d
    000001a2: 	imull	%r12d, %r14d
    000001a6: 	imull	0x24(%rcx,%rax), %r12d
    000001ac: 	addl	%r15d, %r14d
    000001af: 	movl	0x8(%rcx,%rax), %r15d
    000001b4: 	imull	%ebp, %r15d
    000001b8: 	imull	0x28(%rcx,%rax), %ebp
    000001bd: 	addl	%r14d, %r15d
    000001c0: 	movl	0xc(%rcx,%rax), %r14d
    000001c5: 	imull	%ebx, %r14d
    000001c9: 	imull	0x2c(%rcx,%rax), %ebx
    000001ce: 	addl	%r15d, %r14d
    000001d1: 	movl	0x10(%rcx,%rax), %r15d
    000001d6: 	imull	%r8d, %r15d
    000001da: 	imull	0x30(%rcx,%rax), %r8d
    000001e0: 	addl	%r14d, %r15d
    000001e3: 	movl	0x14(%rcx,%rax), %r14d
    000001e8: 	imull	%esi, %r14d
    000001ec: 	imull	0x34(%rcx,%rax), %esi
    000001f1: 	addl	%r15d, %r14d
    000001f4: 	movl	0x18(%rcx,%rax), %r15d
    000001f9: 	imull	%edx, %r15d
    000001fd: 	imull	0x38(%rcx,%rax), %edx
    00000202: 	addl	%r14d, %r15d
    00000205: 	movl	0x1c(%rcx,%rax), %r14d
    0000020a: 	imull	%r9d, %r14d
    0000020e: 	imull	0x3c(%rcx,%rax), %r9d
    00000214: 	addl	%r15d, %r14d
    00000217: 	addl	%r14d, %r13d
    0000021a: 	addl	%r13d, %r12d
    0000021d: 	addl	%r12d, %ebp
    00000220: 	addl	%ebp, %ebx
    00000222: 	addl	%ebx, %r8d
    00000225: 	addl	%r8d, %esi
    00000228: 	addl	%esi, %edx
    0000022a: 	addl	%edx, %r9d
    0000022d: 	andq	$-0x10, %r10
    00000231: 	leaq	0x10(%r10), %rax
    00000235: 	cmpq	%rax, %r11
    00000238: 	jbe	.Ltmp461 # Offset: 568
    0000023e: 	addq	$0x11, %r10
    00000242: 	movq	%r11, %rdx
    00000245: 	movl	$0x1, %ebx
    0000024a: 	subq	%rax, %rdx
    0000024d: 	cmpq	%r10, %r11
    00000250: 	cmovaeq	%rdx, %rbx
    00000254: 	subq	$0x1, %rdx
    00000258: 	cmpq	$0x2, %rdx
    0000025c: 	jbe	.Ltmp462 # Offset: 604
    00000262: 	cmpq	%r10, %r11
    00000265: 	jb	.Ltmp462 # Offset: 613
    0000026b: 	leaq	(,%rax,4), %rdx
    00000273: 	movq	%rbx, %rsi
    00000276: 	leaq	(%rdi,%rdx), %r8
    0000027a: 	addq	%rcx, %rdx
    0000027d: 	shrq	$0x2, %rsi
    00000281: 	movdqu	(%rdx), %xmm2
    00000285: 	movdqu	(%rdx), %xmm4
    00000289: 	addq	$0x10, %r8
    0000028d: 	addq	$0x10, %rdx
    00000291: 	movdqu	-0x10(%r8), %xmm1
    00000297: 	movdqu	-0x10(%r8), %xmm0
    0000029d: 	psrlq	$0x20, %xmm2
    000002a2: 	psrlq	$0x20, %xmm1
    000002a7: 	pmuludq	%xmm4, %xmm0
    000002ab: 	pmuludq	%xmm2, %xmm1
    000002af: 	pshufd	$0x8, %xmm0, %xmm0
    000002b4: 	pshufd	$0x8, %xmm1, %xmm1
    000002b9: 	punpckldq	%xmm1, %xmm0
    000002bd: 	cmpq	$0x1, %rsi
    000002c1: 	je	.Ltmp463 # Offset: 705
.Ltmp464:
    000002c7: 	movdqu	(%r8), %xmm1
    000002cc: 	movdqu	(%rdx), %xmm3
    000002d0: 	movdqu	(%r8), %xmm2
    000002d5: 	movdqu	(%rdx), %xmm5
    000002d9: 	psrlq	$0x20, %xmm1
    000002de: 	psrlq	$0x20, %xmm3
    000002e3: 	pmuludq	%xmm5, %xmm2
    000002e7: 	pmuludq	%xmm3, %xmm1
    000002eb: 	pshufd	$0x8, %xmm2, %xmm2
    000002f0: 	pshufd	$0x8, %xmm1, %xmm1
    000002f5: 	punpckldq	%xmm1, %xmm2
    000002f9: 	paddd	%xmm2, %xmm0
    000002fd: 	cmpq	$0x2, %rsi
    00000301: 	je	.Ltmp463 # Offset: 769
    00000303: 	movdqu	0x10(%r8), %xmm1
    00000309: 	movdqu	0x10(%rdx), %xmm3
    0000030e: 	movdqu	0x10(%r8), %xmm2
    00000314: 	movdqu	0x10(%rdx), %xmm6
    00000319: 	psrlq	$0x20, %xmm1
    0000031e: 	psrlq	$0x20, %xmm3
    00000323: 	pmuludq	%xmm6, %xmm2
    00000327: 	pmuludq	%xmm3, %xmm1
    0000032b: 	pshufd	$0x8, %xmm2, %xmm2
    00000330: 	pshufd	$0x8, %xmm1, %xmm1
    00000335: 	punpckldq	%xmm1, %xmm2
    00000339: 	paddd	%xmm2, %xmm0
    0000033d: 	cmpq	$0x3, %rsi
    00000341: 	je	.Ltmp463 # Offset: 833
    00000343: 	movdqu	0x20(%rdx), %xmm1
    00000348: 	movdqu	0x20(%r8), %xmm3
    0000034e: 	movdqa	%xmm1, %xmm2
    00000352: 	psrlq	$0x20, %xmm1
    00000357: 	pmuludq	%xmm3, %xmm2
    0000035b: 	psrlq	$0x20, %xmm3
    00000360: 	pmuludq	%xmm3, %xmm1
    00000364: 	pshufd	$0x8, %xmm2, %xmm2
    00000369: 	pshufd	$0x8, %xmm1, %xmm1
    0000036e: 	punpckldq	%xmm1, %xmm2
    00000372: 	paddd	%xmm2, %xmm0
.Ltmp463:
    00000376: 	movdqa	%xmm0, %xmm1
    0000037a: 	shlq	$0x2, %rsi
    0000037e: 	psrldq	$0x8, %xmm1
    00000383: 	addq	%rsi, %rax
    00000386: 	paddd	%xmm1, %xmm0
    0000038a: 	movdqa	%xmm0, %xmm1
    0000038e: 	psrldq	$0x4, %xmm1
    00000393: 	paddd	%xmm1, %xmm0
    00000397: 	movd	%xmm0, %edx
    0000039b: 	addl	%edx, %r9d
    0000039e: 	cmpq	%rsi, %rbx
    000003a1: 	je	.Ltmp461 # Offset: 929
.Ltmp462:
    000003a3: 	movl	(%rcx,%rax,4), %esi
    000003a6: 	imull	(%rdi,%rax,4), %esi
    000003aa: 	leaq	(,%rax,4), %rdx
    000003b2: 	addl	%esi, %r9d
    000003b5: 	leaq	0x1(%rax), %rsi
    000003b9: 	cmpq	%rsi, %r11
    000003bc: 	jbe	.Ltmp461 # Offset: 956
    000003be: 	movl	0x4(%rdi,%rdx), %esi
    000003c2: 	imull	0x4(%rcx,%rdx), %esi
    000003c7: 	addq	$0x2, %rax
    000003cb: 	addl	%esi, %r9d
    000003ce: 	cmpq	%r11, %rax
    000003d1: 	jae	.Ltmp461 # Offset: 977
    000003d3: 	movl	0x8(%rcx,%rdx), %eax
    000003d7: 	imull	0x8(%rdi,%rdx), %eax
    000003dc: 	addl	%eax, %r9d
.Ltmp461:
    000003df: 	popq	%rbx
    000003e0: 	movl	%r9d, %eax
    000003e3: 	popq	%rbp
    000003e4: 	popq	%r12
    000003e6: 	popq	%r13
    000003e8: 	popq	%r14
    000003ea: 	popq	%r15
    000003ec: 	retq # Offset: 1004
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp458:
    000003f0: 	movdqu	(%rsi), %xmm0
    000003f4: 	movdqu	(%rdi), %xmm1
    000003f8: 	leaq	0x10(%rsi), %rdx
    000003fc: 	leaq	0x10(%rdi), %r8
    00000400: 	movdqu	(%rsi), %xmm6
    00000404: 	movdqu	(%rdi), %xmm2
    00000408: 	movl	$0xf, %ebx
    0000040d: 	xorl	%r9d, %r9d
    00000410: 	psrlq	$0x20, %xmm0
    00000415: 	psrlq	$0x20, %xmm1
    0000041a: 	movl	$0x3, %esi
    0000041f: 	xorl	%eax, %eax
    00000421: 	pmuludq	%xmm0, %xmm1
    00000425: 	pmuludq	%xmm6, %xmm2
    00000429: 	pshufd	$0x8, %xmm1, %xmm1
    0000042e: 	pshufd	$0x8, %xmm2, %xmm0
    00000433: 	punpckldq	%xmm1, %xmm0
    00000437: 	jmp	.Ltmp464 # Offset: 1079
.Ltmp459:
    0000043c: 	movl	$0x0, -0xc(%rsp)
    00000444: 	xorl	%r15d, %r15d
    00000447: 	jmp	.Ltmp465 # Offset: 1095
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product7IPKiiET0_T_S3_m" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x17a70
  Size        : 0x209
  MaxSize     : 0x210
  Offset      : 0x17a70
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	cmpq	$0x1, %rdx
    00000008: 	je	.Ltmp466 # Offset: 8
    0000000e: 	leaq	-0x2(%rdx), %r10
    00000012: 	movq	%rdx, %r9
    00000015: 	movq	%r10, %rcx
    00000018: 	shrq	%rcx
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	$0x1, %r10
    00000023: 	jbe	.Ltmp467 # Offset: 35
    00000029: 	movq	%rcx, %rdx
    0000002c: 	xorl	%eax, %eax
    0000002e: 	pxor	%xmm3, %xmm3
    00000032: 	shrq	%rdx
    00000035: 	shlq	$0x4, %rdx
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp468:
    00000040: 	movdqu	(%rdi,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	movdqu	(%rdi,%rax), %xmm1
    0000004f: 	movdqu	(%rsi,%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	psrlq	$0x20, %xmm0
    0000005d: 	psrlq	$0x20, %xmm2
    00000062: 	pmuludq	%xmm4, %xmm1
    00000066: 	pmuludq	%xmm2, %xmm0
    0000006a: 	pshufd	$0x8, %xmm1, %xmm1
    0000006f: 	pshufd	$0x8, %xmm0, %xmm0
    00000074: 	punpckldq	%xmm0, %xmm1
    00000078: 	paddd	%xmm1, %xmm3
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp468 # Offset: 127
    00000081: 	movdqa	%xmm3, %xmm0
    00000085: 	movd	%xmm3, %r8d
    0000008a: 	movq	%rcx, %r11
    0000008d: 	punpckhdq	%xmm3, %xmm0
    00000091: 	andq	$-0x2, %r11
    00000095: 	movd	%xmm0, %eax
    00000099: 	pshufd	$0x55, %xmm3, %xmm0
    0000009e: 	pshufd	$0xff, %xmm3, %xmm3
    000000a3: 	movd	%xmm3, %edx
    000000a7: 	addl	%eax, %r8d
    000000aa: 	movd	%xmm0, %eax
    000000ae: 	addl	%edx, %eax
    000000b0: 	leaq	(%r11,%r11), %rdx
    000000b4: 	cmpq	%r11, %rcx
    000000b7: 	je	.Ltmp469 # Offset: 183
.Ltmp474:
    000000b9: 	movl	(%rsi,%rdx,4), %ecx
    000000bc: 	imull	(%rdi,%rdx,4), %ecx
    000000c0: 	addl	%ecx, %r8d
    000000c3: 	movl	0x4(%rdi,%rdx,4), %ecx
    000000c7: 	imull	0x4(%rsi,%rdx,4), %ecx
    000000cc: 	addl	%ecx, %eax
.Ltmp469:
    000000ce: 	andq	$-0x2, %r10
    000000d2: 	leaq	0x2(%r10), %rcx
    000000d6: 	cmpq	%rcx, %r9
    000000d9: 	jbe	.Ltmp470 # Offset: 217
    000000df: 	addq	$0x3, %r10
    000000e3: 	movq	%r9, %rdx
    000000e6: 	pushq	%rbp
    000000e7: 	movl	$0x1, %ebp
    000000ec: 	subq	%rcx, %rdx
    000000ef: 	cmpq	%r10, %r9
    000000f2: 	pushq	%rbx
    000000f3: 	cmovaeq	%rdx, %rbp
    000000f7: 	subq	$0x1, %rdx
    000000fb: 	cmpq	$0x2, %rdx
    000000ff: 	jbe	.Ltmp471 # Offset: 255
    00000105: 	cmpq	%r10, %r9
    00000108: 	jb	.Ltmp471 # Offset: 264
    0000010e: 	movq	%rbp, %r11
    00000111: 	leaq	(,%rcx,4), %r10
    00000119: 	pxor	%xmm3, %xmm3
    0000011d: 	xorl	%edx, %edx
    0000011f: 	shrq	$0x2, %r11
    00000123: 	leaq	(%rdi,%r10), %rbx
    00000127: 	addq	%rsi, %r10
    0000012a: 	shlq	$0x4, %r11
    0000012e: 	nop # Size: 2
.Ltmp472:
    00000130: 	movdqu	(%r10,%rdx), %xmm0
    00000136: 	movdqu	(%rbx,%rdx), %xmm2
    0000013b: 	movdqu	(%r10,%rdx), %xmm1
    00000141: 	movdqu	(%rbx,%rdx), %xmm5
    00000146: 	addq	$0x10, %rdx
    0000014a: 	psrlq	$0x20, %xmm0
    0000014f: 	psrlq	$0x20, %xmm2
    00000154: 	pmuludq	%xmm5, %xmm1
    00000158: 	pmuludq	%xmm2, %xmm0
    0000015c: 	pshufd	$0x8, %xmm1, %xmm1
    00000161: 	pshufd	$0x8, %xmm0, %xmm0
    00000166: 	punpckldq	%xmm0, %xmm1
    0000016a: 	paddd	%xmm1, %xmm3
    0000016e: 	cmpq	%rdx, %r11
    00000171: 	jne	.Ltmp472 # Offset: 369
    00000173: 	movdqa	%xmm3, %xmm0
    00000177: 	psrldq	$0x8, %xmm0
    0000017c: 	paddd	%xmm0, %xmm3
    00000180: 	movdqa	%xmm3, %xmm0
    00000184: 	psrldq	$0x4, %xmm0
    00000189: 	paddd	%xmm0, %xmm3
    0000018d: 	movd	%xmm3, %edx
    00000191: 	addl	%edx, %r8d
    00000194: 	movq	%rbp, %rdx
    00000197: 	andq	$-0x4, %rdx
    0000019b: 	addq	%rdx, %rcx
    0000019e: 	cmpq	%rbp, %rdx
    000001a1: 	je	.Ltmp473 # Offset: 417
.Ltmp471:
    000001a3: 	movl	(%rdi,%rcx,4), %r10d
    000001a7: 	imull	(%rsi,%rcx,4), %r10d
    000001ac: 	leaq	(,%rcx,4), %rdx
    000001b4: 	addl	%r10d, %r8d
    000001b7: 	leaq	0x1(%rcx), %r10
    000001bb: 	cmpq	%r9, %r10
    000001be: 	jae	.Ltmp473 # Offset: 446
    000001c0: 	movl	0x4(%rdi,%rdx), %r10d
    000001c5: 	imull	0x4(%rsi,%rdx), %r10d
    000001cb: 	addq	$0x2, %rcx
    000001cf: 	addl	%r10d, %r8d
    000001d2: 	cmpq	%rcx, %r9
    000001d5: 	jbe	.Ltmp473 # Offset: 469
    000001d7: 	movl	0x8(%rsi,%rdx), %ecx
    000001db: 	imull	0x8(%rdi,%rdx), %ecx
    000001e0: 	addl	%ecx, %r8d
.Ltmp473:
    000001e3: 	addl	%r8d, %eax
    000001e6: 	popq	%rbx
    000001e7: 	popq	%rbp
    000001e8: 	retq # Offset: 488
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp466:
    000001f0: 	movl	(%rdi), %r8d
    000001f3: 	imull	(%rsi), %r8d
    000001f7: 	xorl	%eax, %eax
.Ltmp470:
    000001f9: 	addl	%r8d, %eax
    000001fc: 	retq # Offset: 508
.Ltmp467:
    000001fd: 	xorl	%eax, %eax
    000001ff: 	xorl	%r8d, %r8d
    00000202: 	xorl	%edx, %edx
    00000204: 	jmp	.Ltmp474 # Offset: 516
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product8IPKiiET0_T_S3_m" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x17c80
  Size        : 0x1d1
  MaxSize     : 0x1e0
  Offset      : 0x17c80
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsi, %rcx
    00000008: 	movq	%rdx, %r8
    0000000b: 	pushq	%rbx
    0000000c: 	cmpq	$0x3, %rdx
    00000010: 	je	.Ltmp475 # Offset: 16
    00000016: 	leaq	-0x4(%rdx), %r9
    0000001a: 	xorl	%eax, %eax
    0000001c: 	pxor	%xmm3, %xmm3
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%r9, %rsi
    00000025: 	shrq	$0x2, %rsi
    00000029: 	addq	$0x1, %rsi
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp476:
    00000030: 	movdqu	(%rcx,%rax), %xmm0
    00000035: 	movdqu	(%rdi,%rax), %xmm2
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	movdqu	(%rcx,%rax), %xmm1
    00000043: 	movdqu	(%rdi,%rax), %xmm4
    00000048: 	addq	$0x10, %rax
    0000004c: 	psrlq	$0x20, %xmm0
    00000051: 	psrlq	$0x20, %xmm2
    00000056: 	pmuludq	%xmm4, %xmm1
    0000005a: 	pmuludq	%xmm2, %xmm0
    0000005e: 	pshufd	$0x8, %xmm1, %xmm1
    00000063: 	pshufd	$0x8, %xmm0, %xmm0
    00000068: 	punpckldq	%xmm0, %xmm1
    0000006c: 	paddd	%xmm1, %xmm3
    00000070: 	cmpq	%rsi, %rdx
    00000073: 	jb	.Ltmp476 # Offset: 115
    00000075: 	movdqa	%xmm3, %xmm0
    00000079: 	movd	%xmm3, %eax
    0000007d: 	andq	$-0x4, %r9
    00000081: 	punpckhdq	%xmm3, %xmm0
    00000085: 	leaq	0x4(%r9), %rsi
    00000089: 	movd	%xmm0, %r10d
    0000008e: 	pshufd	$0x55, %xmm3, %xmm0
    00000093: 	pshufd	$0xff, %xmm3, %xmm3
    00000098: 	movd	%xmm0, %edx
    0000009c: 	addl	%edx, %r10d
    0000009f: 	movd	%xmm3, %edx
    000000a3: 	addl	%edx, %r10d
    000000a6: 	cmpq	%r8, %rsi
    000000a9: 	jae	.Ltmp477 # Offset: 169
    000000af: 	addq	$0x5, %r9
    000000b3: 	movq	%r8, %rdx
    000000b6: 	movl	$0x1, %ebp
    000000bb: 	subq	%rsi, %rdx
    000000be: 	cmpq	%r9, %r8
    000000c1: 	cmovaeq	%rdx, %rbp
    000000c5: 	subq	$0x1, %rdx
    000000c9: 	cmpq	$0x2, %rdx
    000000cd: 	jbe	.Ltmp478 # Offset: 205
    000000d3: 	cmpq	%r9, %r8
    000000d6: 	jb	.Ltmp478 # Offset: 214
    000000dc: 	movq	%rbp, %r11
    000000df: 	leaq	(,%rsi,4), %r9
    000000e7: 	pxor	%xmm3, %xmm3
    000000eb: 	xorl	%edx, %edx
    000000ed: 	shrq	$0x2, %r11
    000000f1: 	leaq	(%rdi,%r9), %rbx
    000000f5: 	addq	%rcx, %r9
    000000f8: 	shlq	$0x4, %r11
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp479:
    00000100: 	movdqu	(%r9,%rdx), %xmm0
    00000106: 	movdqu	(%rbx,%rdx), %xmm2
    0000010b: 	movdqu	(%r9,%rdx), %xmm1
    00000111: 	movdqu	(%rbx,%rdx), %xmm5
    00000116: 	addq	$0x10, %rdx
    0000011a: 	psrlq	$0x20, %xmm0
    0000011f: 	psrlq	$0x20, %xmm2
    00000124: 	pmuludq	%xmm5, %xmm1
    00000128: 	pmuludq	%xmm2, %xmm0
    0000012c: 	pshufd	$0x8, %xmm1, %xmm1
    00000131: 	pshufd	$0x8, %xmm0, %xmm0
    00000136: 	punpckldq	%xmm0, %xmm1
    0000013a: 	paddd	%xmm1, %xmm3
    0000013e: 	cmpq	%rdx, %r11
    00000141: 	jne	.Ltmp479 # Offset: 321
    00000143: 	movdqa	%xmm3, %xmm0
    00000147: 	psrldq	$0x8, %xmm0
    0000014c: 	paddd	%xmm0, %xmm3
    00000150: 	movdqa	%xmm3, %xmm0
    00000154: 	psrldq	$0x4, %xmm0
    00000159: 	paddd	%xmm0, %xmm3
    0000015d: 	movd	%xmm3, %edx
    00000161: 	addl	%edx, %eax
    00000163: 	movq	%rbp, %rdx
    00000166: 	andq	$-0x4, %rdx
    0000016a: 	addq	%rdx, %rsi
    0000016d: 	cmpq	%rbp, %rdx
    00000170: 	je	.Ltmp477 # Offset: 368
.Ltmp478:
    00000172: 	movl	(%rcx,%rsi,4), %r9d
    00000176: 	imull	(%rdi,%rsi,4), %r9d
    0000017b: 	leaq	(,%rsi,4), %rdx
    00000183: 	addq	$0x1, %rsi
    00000187: 	addl	%r9d, %eax
    0000018a: 	cmpq	%r8, %rsi
    0000018d: 	jae	.Ltmp477 # Offset: 397
.Ltmp480:
    0000018f: 	movl	0x4(%rdi,%rdx), %r9d
    00000194: 	imull	0x4(%rcx,%rdx), %r9d
    0000019a: 	addq	$0x1, %rsi
    0000019e: 	addl	%r9d, %eax
    000001a1: 	cmpq	%r8, %rsi
    000001a4: 	jae	.Ltmp477 # Offset: 420
    000001a6: 	movl	0x8(%rcx,%rdx), %ecx
    000001aa: 	imull	0x8(%rdi,%rdx), %ecx
    000001af: 	addl	%ecx, %eax
.Ltmp477:
    000001b1: 	addl	%r10d, %eax
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	retq # Offset: 438
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp475:
    000001c0: 	movl	(%rdi), %eax
    000001c2: 	xorl	%r10d, %r10d
    000001c5: 	imull	(%rsi), %eax
    000001c8: 	xorl	%edx, %edx
    000001ca: 	movl	$0x1, %esi
    000001cf: 	jmp	.Ltmp480 # Offset: 463
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKiiET0_T_S3_m"

Binary Function "_Z14inner_product9IPKiiET0_T_S3_m" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x17e60
  Size        : 0x1e9
  MaxSize     : 0x1f0
  Offset      : 0x17e60
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r11
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	cmpq	$0x7, %rdx
    0000001b: 	je	.Ltmp481 # Offset: 27
    00000021: 	leaq	-0x8(%r11), %r13
    00000025: 	movq	%rdi, %rdx
    00000028: 	movq	%rsi, %rcx
    0000002b: 	xorl	%r8d, %r8d
    0000002e: 	movq	%r13, %rax
    00000031: 	xorl	%esi, %esi
    00000033: 	shrq	$0x3, %rax
    00000037: 	shlq	$0x5, %rax
    0000003b: 	leaq	0x20(%rdi,%rax), %rbx
    00000040: 	xorl	%edi, %edi
    00000042: 	xorl	%eax, %eax
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp482:
    00000048: 	movl	(%rdx), %r15d
    0000004b: 	movl	0x4(%rdx), %r14d
    0000004f: 	addq	$0x20, %rdx
    00000053: 	addq	$0x20, %rcx
    00000057: 	imull	-0x20(%rcx), %r15d
    0000005c: 	movl	-0x18(%rdx), %r10d
    00000060: 	imull	-0x1c(%rcx), %r14d
    00000065: 	movl	-0x14(%rdx), %r9d
    00000069: 	imull	-0x18(%rcx), %r10d
    0000006e: 	imull	-0x14(%rcx), %r9d
    00000073: 	addl	%eax, %r15d
    00000076: 	movl	-0x10(%rdx), %eax
    00000079: 	addl	%esi, %r14d
    0000007c: 	imull	-0x10(%rcx), %eax
    00000080: 	movl	-0xc(%rdx), %esi
    00000083: 	addl	%r8d, %r10d
    00000086: 	imull	-0xc(%rcx), %esi
    0000008a: 	movl	-0x8(%rdx), %r8d
    0000008e: 	addl	%edi, %r9d
    00000091: 	imull	-0x8(%rcx), %r8d
    00000096: 	movl	-0x4(%rdx), %edi
    00000099: 	imull	-0x4(%rcx), %edi
    0000009d: 	addl	%r15d, %eax
    000000a0: 	addl	%r14d, %esi
    000000a3: 	addl	%r10d, %r8d
    000000a6: 	addl	%r9d, %edi
    000000a9: 	cmpq	%rdx, %rbx
    000000ac: 	jne	.Ltmp482 # Offset: 172
    000000ae: 	andq	$-0x8, %r13
    000000b2: 	addl	%r8d, %esi
    000000b5: 	leaq	0x8(%r13), %rcx
    000000b9: 	addl	%edi, %esi
    000000bb: 	cmpq	%r11, %rcx
    000000be: 	jae	.Ltmp483 # Offset: 190
    000000c4: 	addq	$0x9, %r13
    000000c8: 	movq	%r11, %rdx
    000000cb: 	movl	$0x1, %r10d
    000000d1: 	subq	%rcx, %rdx
    000000d4: 	cmpq	%r13, %r11
    000000d7: 	cmovaeq	%rdx, %r10
    000000db: 	subq	$0x1, %rdx
    000000df: 	cmpq	$0x2, %rdx
    000000e3: 	jbe	.Ltmp484 # Offset: 227
    000000e9: 	cmpq	%r13, %r11
    000000ec: 	jb	.Ltmp484 # Offset: 236
.Ltmp486:
    000000f2: 	movq	%r10, %r8
    000000f5: 	leaq	(,%rcx,4), %rdi
    000000fd: 	pxor	%xmm3, %xmm3
    00000101: 	xorl	%edx, %edx
    00000103: 	shrq	$0x2, %r8
    00000107: 	leaq	(%rbp,%rdi), %r9
    0000010c: 	addq	%r12, %rdi
    0000010f: 	shlq	$0x4, %r8
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp485:
    00000118: 	movdqu	(%rdi,%rdx), %xmm0
    0000011d: 	movdqu	(%r9,%rdx), %xmm2
    00000123: 	movdqu	(%rdi,%rdx), %xmm1
    00000128: 	movdqu	(%r9,%rdx), %xmm4
    0000012e: 	addq	$0x10, %rdx
    00000132: 	psrlq	$0x20, %xmm0
    00000137: 	psrlq	$0x20, %xmm2
    0000013c: 	pmuludq	%xmm4, %xmm1
    00000140: 	pmuludq	%xmm2, %xmm0
    00000144: 	pshufd	$0x8, %xmm1, %xmm1
    00000149: 	pshufd	$0x8, %xmm0, %xmm0
    0000014e: 	punpckldq	%xmm0, %xmm1
    00000152: 	paddd	%xmm1, %xmm3
    00000156: 	cmpq	%rdx, %r8
    00000159: 	jne	.Ltmp485 # Offset: 345
    0000015b: 	movdqa	%xmm3, %xmm0
    0000015f: 	psrldq	$0x8, %xmm0
    00000164: 	paddd	%xmm0, %xmm3
    00000168: 	movdqa	%xmm3, %xmm0
    0000016c: 	psrldq	$0x4, %xmm0
    00000171: 	paddd	%xmm0, %xmm3
    00000175: 	movd	%xmm3, %edx
    00000179: 	addl	%edx, %eax
    0000017b: 	movq	%r10, %rdx
    0000017e: 	andq	$-0x4, %rdx
    00000182: 	addq	%rdx, %rcx
    00000185: 	cmpq	%r10, %rdx
    00000188: 	je	.Ltmp483 # Offset: 392
.Ltmp484:
    0000018a: 	movl	(%rbp,%rcx,4), %edi
    0000018e: 	imull	(%r12,%rcx,4), %edi
    00000193: 	leaq	(,%rcx,4), %rdx
    0000019b: 	addl	%edi, %eax
    0000019d: 	leaq	0x1(%rcx), %rdi
    000001a1: 	cmpq	%rdi, %r11
    000001a4: 	jbe	.Ltmp483 # Offset: 420
    000001a6: 	movl	0x4(%r12,%rdx), %edi
    000001ab: 	imull	0x4(%rbp,%rdx), %edi
    000001b0: 	addq	$0x2, %rcx
    000001b4: 	addl	%edi, %eax
    000001b6: 	cmpq	%rcx, %r11
    000001b9: 	jbe	.Ltmp483 # Offset: 441
    000001bb: 	movl	0x8(%r12,%rdx), %ecx
    000001c0: 	imull	0x8(%rbp,%rdx), %ecx
    000001c5: 	addl	%ecx, %eax
.Ltmp483:
    000001c7: 	popq	%rbx
    000001c8: 	addl	%esi, %eax
    000001ca: 	popq	%rbp
    000001cb: 	popq	%r12
    000001cd: 	popq	%r13
    000001cf: 	popq	%r14
    000001d1: 	popq	%r15
    000001d3: 	retq # Offset: 467
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp481:
    000001d8: 	movl	$0x7, %r10d
    000001de: 	xorl	%esi, %esi
    000001e0: 	xorl	%ecx, %ecx
    000001e2: 	xorl	%eax, %eax
    000001e4: 	jmp	.Ltmp486 # Offset: 484
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKiiET0_T_S3_m"

Binary Function "_Z15inner_product10IPKiiET0_T_S3_m" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x18050
  Size        : 0x272
  MaxSize     : 0x280
  Offset      : 0x18050
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKiiET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, -0x20(%rsp)
    00000013: 	movq	%rsi, -0x18(%rsp)
    00000018: 	movq	%rdx, -0x28(%rsp)
    0000001d: 	cmpq	$0xf, %rdx
    00000021: 	je	.Ltmp487 # Offset: 33
    00000027: 	movq	%rdx, %rax
    0000002a: 	movq	%rdi, %rcx
    0000002d: 	movq	%rsi, %rdx
    00000030: 	xorl	%ebp, %ebp
    00000032: 	subq	$0x10, %rax
    00000036: 	xorl	%r14d, %r14d
    00000039: 	xorl	%r8d, %r8d
    0000003c: 	movq	%rax, -0x10(%rsp)
    00000041: 	shrq	$0x4, %rax
    00000045: 	shlq	$0x6, %rax
    00000049: 	leaq	0x40(%rsi,%rax), %rax
    0000004e: 	movq	%rax, -0x30(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp488:
    00000058: 	movl	(%rcx), %r10d
    0000005b: 	movl	(%rdx), %r15d
    0000005e: 	addq	$0x40, %rcx
    00000062: 	addq	$0x40, %rdx
    00000066: 	movl	-0x3c(%rcx), %r9d
    0000006a: 	movl	-0x38(%rcx), %edi
    0000006d: 	imull	%r10d, %r15d
    00000071: 	movl	-0x34(%rcx), %esi
    00000074: 	movl	-0x30(%rcx), %r13d
    00000078: 	movl	-0x2c(%rcx), %r12d
    0000007c: 	movl	-0x28(%rcx), %ebx
    0000007f: 	movl	-0x24(%rcx), %r11d
    00000083: 	imull	-0x20(%rdx), %r10d
    00000088: 	addl	%r15d, %eax
    0000008b: 	movl	-0x3c(%rdx), %r15d
    0000008f: 	imull	%r9d, %r15d
    00000093: 	imull	-0x1c(%rdx), %r9d
    00000098: 	addl	%r15d, %r8d
    0000009b: 	movl	-0x38(%rdx), %r15d
    0000009f: 	imull	%edi, %r15d
    000000a3: 	imull	-0x18(%rdx), %edi
    000000a7: 	addl	%r15d, %r14d
    000000aa: 	movl	-0x34(%rdx), %r15d
    000000ae: 	imull	%esi, %r15d
    000000b2: 	imull	-0x14(%rdx), %esi
    000000b6: 	addl	%r15d, %ebp
    000000b9: 	movl	-0x30(%rdx), %r15d
    000000bd: 	imull	%r13d, %r15d
    000000c1: 	imull	-0x10(%rdx), %r13d
    000000c6: 	addl	%eax, %r15d
    000000c9: 	movl	-0x2c(%rdx), %eax
    000000cc: 	addl	%r15d, %r10d
    000000cf: 	imull	%r12d, %eax
    000000d3: 	imull	-0xc(%rdx), %r12d
    000000d8: 	addl	%eax, %r8d
    000000db: 	movl	-0x28(%rdx), %eax
    000000de: 	addl	%r8d, %r9d
    000000e1: 	imull	%ebx, %eax
    000000e4: 	leal	(%r12,%r9), %r8d
    000000e8: 	imull	-0x8(%rdx), %ebx
    000000ec: 	addl	%eax, %r14d
    000000ef: 	movl	-0x24(%rdx), %eax
    000000f2: 	addl	%r14d, %edi
    000000f5: 	imull	%r11d, %eax
    000000f9: 	leal	(%rbx,%rdi), %r14d
    000000fd: 	imull	-0x4(%rdx), %r11d
    00000102: 	addl	%ebp, %eax
    00000104: 	addl	%eax, %esi
    00000106: 	leal	(%r13,%r10), %eax
    0000010b: 	leal	(%r11,%rsi), %ebp
    0000010f: 	cmpq	%rdx, -0x30(%rsp)
    00000114: 	jne	.Ltmp488 # Offset: 276
    0000011a: 	movq	-0x10(%rsp), %rdx
    0000011f: 	movq	-0x28(%rsp), %rbx
    00000124: 	addl	%r14d, %r8d
    00000127: 	addl	%ebp, %r8d
    0000012a: 	andq	$-0x10, %rdx
    0000012e: 	leaq	0x10(%rdx), %rcx
    00000132: 	cmpq	%rbx, %rcx
    00000135: 	jae	.Ltmp489 # Offset: 309
    0000013b: 	addq	$0x11, %rdx
    0000013f: 	movq	%rbx, %rsi
    00000142: 	movl	$0x1, %r10d
    00000148: 	subq	%rcx, %rsi
    0000014b: 	cmpq	%rdx, %rbx
    0000014e: 	cmovaeq	%rsi, %r10
    00000152: 	subq	$0x1, %rsi
    00000156: 	cmpq	$0x2, %rsi
    0000015a: 	jbe	.Ltmp490 # Offset: 346
    00000160: 	cmpq	%rdx, %rbx
    00000163: 	jb	.Ltmp490 # Offset: 355
.Ltmp492:
    00000169: 	movq	-0x20(%rsp), %rbx
    0000016e: 	movq	%r10, %rdi
    00000171: 	xorl	%edx, %edx
    00000173: 	pxor	%xmm3, %xmm3
    00000177: 	leaq	(,%rcx,4), %rsi
    0000017f: 	shrq	$0x2, %rdi
    00000183: 	leaq	(%rbx,%rsi), %r9
    00000187: 	shlq	$0x4, %rdi
    0000018b: 	addq	-0x18(%rsp), %rsi
.Ltmp491:
    00000190: 	movdqu	(%rsi,%rdx), %xmm0
    00000195: 	movdqu	(%r9,%rdx), %xmm2
    0000019b: 	movdqu	(%rsi,%rdx), %xmm1
    000001a0: 	movdqu	(%r9,%rdx), %xmm4
    000001a6: 	addq	$0x10, %rdx
    000001aa: 	psrlq	$0x20, %xmm0
    000001af: 	psrlq	$0x20, %xmm2
    000001b4: 	pmuludq	%xmm4, %xmm1
    000001b8: 	pmuludq	%xmm2, %xmm0
    000001bc: 	pshufd	$0x8, %xmm1, %xmm1
    000001c1: 	pshufd	$0x8, %xmm0, %xmm0
    000001c6: 	punpckldq	%xmm0, %xmm1
    000001ca: 	paddd	%xmm1, %xmm3
    000001ce: 	cmpq	%rdx, %rdi
    000001d1: 	jne	.Ltmp491 # Offset: 465
    000001d3: 	movdqa	%xmm3, %xmm0
    000001d7: 	psrldq	$0x8, %xmm0
    000001dc: 	paddd	%xmm0, %xmm3
    000001e0: 	movdqa	%xmm3, %xmm0
    000001e4: 	psrldq	$0x4, %xmm0
    000001e9: 	paddd	%xmm0, %xmm3
    000001ed: 	movd	%xmm3, %edx
    000001f1: 	addl	%edx, %eax
    000001f3: 	movq	%r10, %rdx
    000001f6: 	andq	$-0x4, %rdx
    000001fa: 	addq	%rdx, %rcx
    000001fd: 	cmpq	%rdx, %r10
    00000200: 	je	.Ltmp489 # Offset: 512
.Ltmp490:
    00000202: 	movq	-0x20(%rsp), %rbx
    00000207: 	movq	-0x18(%rsp), %rdi
    0000020c: 	leaq	(,%rcx,4), %rdx
    00000214: 	movq	-0x28(%rsp), %r11
    00000219: 	movl	(%rbx,%rcx,4), %esi
    0000021c: 	imull	(%rdi,%rcx,4), %esi
    00000220: 	addl	%esi, %eax
    00000222: 	leaq	0x1(%rcx), %rsi
    00000226: 	cmpq	%rsi, %r11
    00000229: 	jbe	.Ltmp489 # Offset: 553
    0000022b: 	movl	0x4(%rdi,%rdx), %esi
    0000022f: 	imull	0x4(%rbx,%rdx), %esi
    00000234: 	addq	$0x2, %rcx
    00000238: 	addl	%esi, %eax
    0000023a: 	cmpq	%rcx, %r11
    0000023d: 	jbe	.Ltmp489 # Offset: 573
    0000023f: 	movl	0x8(%rdi,%rdx), %ecx
    00000243: 	imull	0x8(%rbx,%rdx), %ecx
    00000248: 	addl	%ecx, %eax
.Ltmp489:
    0000024a: 	popq	%rbx
    0000024b: 	addl	%r8d, %eax
    0000024e: 	popq	%rbp
    0000024f: 	popq	%r12
    00000251: 	popq	%r13
    00000253: 	popq	%r14
    00000255: 	popq	%r15
    00000257: 	retq # Offset: 599
    00000258: 	nopl	(%rax,%rax) # Size: 8
.Ltmp487:
    00000260: 	movl	$0xf, %r10d
    00000266: 	xorl	%r8d, %r8d
    00000269: 	xorl	%ecx, %ecx
    0000026b: 	xorl	%eax, %eax
    0000026d: 	jmp	.Ltmp492 # Offset: 621
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKiiET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKjjET0_T_S3_m" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x182d0
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x182d0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rdx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leaq	(%rdi,%rdx), %r8
    0000000f: 	cmpq	%rdi, %r8
    00000012: 	je	.Ltmp493 # Offset: 18
    00000018: 	subq	$0x4, %rdx
    0000001c: 	movq	%rdx, %rdi
    0000001f: 	shrq	$0x2, %rdi
    00000023: 	addq	$0x1, %rdi
    00000027: 	cmpq	$0x8, %rdx
    0000002b: 	jbe	.Ltmp494 # Offset: 43
    00000031: 	movq	%rdi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm3, %xmm3
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp495:
    00000048: 	movdqu	(%rcx,%rax), %xmm0
    0000004d: 	movdqu	(%rsi,%rax), %xmm2
    00000052: 	movdqu	(%rcx,%rax), %xmm1
    00000057: 	movdqu	(%rsi,%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	psrlq	$0x20, %xmm0
    00000065: 	psrlq	$0x20, %xmm2
    0000006a: 	pmuludq	%xmm4, %xmm1
    0000006e: 	pmuludq	%xmm2, %xmm0
    00000072: 	pshufd	$0x8, %xmm1, %xmm1
    00000077: 	pshufd	$0x8, %xmm0, %xmm0
    0000007c: 	punpckldq	%xmm0, %xmm1
    00000080: 	paddd	%xmm1, %xmm3
    00000084: 	cmpq	%rdx, %rax
    00000087: 	jne	.Ltmp495 # Offset: 135
    00000089: 	movdqa	%xmm3, %xmm0
    0000008d: 	movq	%rdi, %rdx
    00000090: 	psrldq	$0x8, %xmm0
    00000095: 	andq	$-0x4, %rdx
    00000099: 	paddd	%xmm0, %xmm3
    0000009d: 	leaq	(,%rdx,4), %r9
    000000a5: 	movdqa	%xmm3, %xmm0
    000000a9: 	addq	%r9, %rcx
    000000ac: 	addq	%r9, %rsi
    000000af: 	psrldq	$0x4, %xmm0
    000000b4: 	paddd	%xmm0, %xmm3
    000000b8: 	movd	%xmm3, %eax
    000000bc: 	cmpq	%rdx, %rdi
    000000bf: 	je	.Ltmp496 # Offset: 191
.Ltmp498:
    000000c1: 	movl	(%rcx), %edx
    000000c3: 	imull	(%rsi), %edx
    000000c6: 	addl	%edx, %eax
    000000c8: 	leaq	0x4(%rcx), %rdx
    000000cc: 	cmpq	%rdx, %r8
    000000cf: 	je	.Ltmp497 # Offset: 207
    000000d1: 	movl	0x4(%rcx), %edx
    000000d4: 	imull	0x4(%rsi), %edx
    000000d8: 	addl	%edx, %eax
    000000da: 	leaq	0x8(%rcx), %rdx
    000000de: 	cmpq	%rdx, %r8
    000000e1: 	je	.Ltmp497 # Offset: 225
    000000e3: 	movl	0x8(%rcx), %edx
    000000e6: 	imull	0x8(%rsi), %edx
    000000ea: 	addl	%edx, %eax
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp493:
    000000f0: 	xorl	%eax, %eax
.Ltmp497:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp496:
    000000f8: 	retq # Offset: 248
.Ltmp494:
    000000f9: 	xorl	%eax, %eax
    000000fb: 	jmp	.Ltmp498 # Offset: 251
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKjjET0_T_S3_m"

Binary Function "_Z14inner_product1IPKjjET0_T_S3_m" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x183d0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x183d0
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp499 # Offset: 10
    00000010: 	leaq	-0x1(%rdx), %rax
    00000014: 	cmpq	$0x2, %rax
    00000018: 	jbe	.Ltmp500 # Offset: 24
    0000001e: 	movq	%rdx, %rdi
    00000021: 	xorl	%eax, %eax
    00000023: 	pxor	%xmm3, %xmm3
    00000027: 	shrq	$0x2, %rdi
    0000002b: 	shlq	$0x4, %rdi
    0000002f: 	nop # Size: 1
.Ltmp501:
    00000030: 	movdqu	(%rcx,%rax), %xmm0
    00000035: 	movdqu	(%rsi,%rax), %xmm2
    0000003a: 	movdqu	(%rcx,%rax), %xmm1
    0000003f: 	movdqu	(%rsi,%rax), %xmm4
    00000044: 	addq	$0x10, %rax
    00000048: 	psrlq	$0x20, %xmm0
    0000004d: 	psrlq	$0x20, %xmm2
    00000052: 	pmuludq	%xmm4, %xmm1
    00000056: 	pmuludq	%xmm2, %xmm0
    0000005a: 	pshufd	$0x8, %xmm1, %xmm1
    0000005f: 	pshufd	$0x8, %xmm0, %xmm0
    00000064: 	punpckldq	%xmm0, %xmm1
    00000068: 	paddd	%xmm1, %xmm3
    0000006c: 	cmpq	%rdi, %rax
    0000006f: 	jne	.Ltmp501 # Offset: 111
    00000071: 	movdqa	%xmm3, %xmm0
    00000075: 	movq	%rdx, %rdi
    00000078: 	psrldq	$0x8, %xmm0
    0000007d: 	andq	$-0x4, %rdi
    00000081: 	paddd	%xmm0, %xmm3
    00000085: 	movdqa	%xmm3, %xmm0
    00000089: 	psrldq	$0x4, %xmm0
    0000008e: 	paddd	%xmm0, %xmm3
    00000092: 	movd	%xmm3, %eax
    00000096: 	testb	$0x3, %dl
    00000099: 	je	.Ltmp502 # Offset: 153
.Ltmp504:
    0000009b: 	movl	(%rcx,%rdi,4), %r9d
    0000009f: 	imull	(%rsi,%rdi,4), %r9d
    000000a4: 	leaq	(,%rdi,4), %r8
    000000ac: 	addl	%r9d, %eax
    000000af: 	leaq	0x1(%rdi), %r9
    000000b3: 	cmpq	%r9, %rdx
    000000b6: 	jbe	.Ltmp503 # Offset: 182
    000000b8: 	movl	0x4(%rcx,%r8), %r9d
    000000bd: 	imull	0x4(%rsi,%r8), %r9d
    000000c3: 	addq	$0x2, %rdi
    000000c7: 	addl	%r9d, %eax
    000000ca: 	cmpq	%rdi, %rdx
    000000cd: 	jbe	.Ltmp503 # Offset: 205
    000000cf: 	movl	0x8(%rsi,%r8), %edx
    000000d4: 	imull	0x8(%rcx,%r8), %edx
    000000da: 	addl	%edx, %eax
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp499:
    000000e0: 	xorl	%eax, %eax
.Ltmp503:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp502:
    000000e8: 	retq # Offset: 232
.Ltmp500:
    000000e9: 	xorl	%edi, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	jmp	.Ltmp504 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product2IPKjjET0_T_S3_m" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x184c0
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x184c0
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rdx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leaq	(%rdi,%rdx), %r8
    0000000f: 	cmpq	%r8, %rdi
    00000012: 	je	.Ltmp505 # Offset: 18
    00000018: 	subq	$0x4, %rdx
    0000001c: 	movq	%rdx, %rdi
    0000001f: 	shrq	$0x2, %rdi
    00000023: 	addq	$0x1, %rdi
    00000027: 	cmpq	$0x8, %rdx
    0000002b: 	jbe	.Ltmp506 # Offset: 43
    00000031: 	movq	%rdi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm3, %xmm3
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp507:
    00000048: 	movdqu	(%rcx,%rax), %xmm0
    0000004d: 	movdqu	(%rsi,%rax), %xmm2
    00000052: 	movdqu	(%rcx,%rax), %xmm1
    00000057: 	movdqu	(%rsi,%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	psrlq	$0x20, %xmm0
    00000065: 	psrlq	$0x20, %xmm2
    0000006a: 	pmuludq	%xmm4, %xmm1
    0000006e: 	pmuludq	%xmm2, %xmm0
    00000072: 	pshufd	$0x8, %xmm1, %xmm1
    00000077: 	pshufd	$0x8, %xmm0, %xmm0
    0000007c: 	punpckldq	%xmm0, %xmm1
    00000080: 	paddd	%xmm1, %xmm3
    00000084: 	cmpq	%rdx, %rax
    00000087: 	jne	.Ltmp507 # Offset: 135
    00000089: 	movdqa	%xmm3, %xmm0
    0000008d: 	movq	%rdi, %rdx
    00000090: 	psrldq	$0x8, %xmm0
    00000095: 	andq	$-0x4, %rdx
    00000099: 	paddd	%xmm0, %xmm3
    0000009d: 	leaq	(,%rdx,4), %r9
    000000a5: 	movdqa	%xmm3, %xmm0
    000000a9: 	addq	%r9, %rcx
    000000ac: 	addq	%r9, %rsi
    000000af: 	psrldq	$0x4, %xmm0
    000000b4: 	paddd	%xmm0, %xmm3
    000000b8: 	movd	%xmm3, %eax
    000000bc: 	cmpq	%rdx, %rdi
    000000bf: 	je	.Ltmp508 # Offset: 191
.Ltmp510:
    000000c1: 	movl	(%rcx), %edx
    000000c3: 	imull	(%rsi), %edx
    000000c6: 	addl	%edx, %eax
    000000c8: 	leaq	0x4(%rcx), %rdx
    000000cc: 	cmpq	%rdx, %r8
    000000cf: 	je	.Ltmp509 # Offset: 207
    000000d1: 	movl	0x4(%rcx), %edx
    000000d4: 	imull	0x4(%rsi), %edx
    000000d8: 	addl	%edx, %eax
    000000da: 	leaq	0x8(%rcx), %rdx
    000000de: 	cmpq	%rdx, %r8
    000000e1: 	je	.Ltmp509 # Offset: 225
    000000e3: 	movl	0x8(%rcx), %edx
    000000e6: 	imull	0x8(%rsi), %edx
    000000ea: 	addl	%edx, %eax
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp505:
    000000f0: 	xorl	%eax, %eax
.Ltmp509:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp508:
    000000f8: 	retq # Offset: 248
.Ltmp506:
    000000f9: 	xorl	%eax, %eax
    000000fb: 	jmp	.Ltmp510 # Offset: 251
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product3IPKjjET0_T_S3_m" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x185c0
  Size        : 0x1cc
  MaxSize     : 0x1d0
  Offset      : 0x185c0
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rsi, %rcx
    0000000a: 	subq	$0x1, %r11
    0000000e: 	je	.Ltmp511 # Offset: 14
    00000014: 	movq	%rdx, %r8
    00000017: 	leaq	-0x2(%rdx), %rdx
    0000001b: 	movq	%rdx, %r10
    0000001e: 	shrq	%r10
    00000021: 	addq	$0x1, %r10
    00000025: 	cmpq	$0x5, %rdx
    00000029: 	jbe	.Ltmp512 # Offset: 41
    0000002f: 	movq	%r10, %rsi
    00000032: 	xorl	%eax, %eax
    00000034: 	pxor	%xmm4, %xmm4
    00000038: 	shrq	$0x2, %rsi
    0000003c: 	shlq	$0x5, %rsi
.Ltmp513:
    00000040: 	movdqu	(%rdi,%rax), %xmm0
    00000045: 	movdqu	(%rcx,%rax), %xmm3
    0000004a: 	movdqu	0x10(%rdi,%rax), %xmm6
    00000050: 	movdqu	0x10(%rcx,%rax), %xmm7
    00000056: 	addq	$0x20, %rax
    0000005a: 	movdqa	%xmm0, %xmm1
    0000005e: 	movdqa	%xmm3, %xmm5
    00000062: 	shufps	$0x88, %xmm6, %xmm1
    00000066: 	movdqa	%xmm1, %xmm2
    0000006a: 	shufps	$0x88, %xmm7, %xmm5
    0000006e: 	shufps	$0xdd, %xmm6, %xmm0
    00000072: 	pmuludq	%xmm5, %xmm2
    00000076: 	psrlq	$0x20, %xmm1
    0000007b: 	shufps	$0xdd, %xmm7, %xmm3
    0000007f: 	psrlq	$0x20, %xmm5
    00000084: 	pmuludq	%xmm5, %xmm1
    00000088: 	pshufd	$0x8, %xmm2, %xmm2
    0000008d: 	pshufd	$0x8, %xmm1, %xmm1
    00000092: 	punpckldq	%xmm1, %xmm2
    00000096: 	movdqa	%xmm3, %xmm1
    0000009a: 	movdqa	%xmm0, %xmm3
    0000009e: 	pmuludq	%xmm1, %xmm3
    000000a2: 	psrlq	$0x20, %xmm0
    000000a7: 	psrlq	$0x20, %xmm1
    000000ac: 	pmuludq	%xmm1, %xmm0
    000000b0: 	pshufd	$0x8, %xmm3, %xmm1
    000000b5: 	pshufd	$0x8, %xmm0, %xmm0
    000000ba: 	punpckldq	%xmm0, %xmm1
    000000be: 	paddd	%xmm1, %xmm2
    000000c2: 	paddd	%xmm2, %xmm4
    000000c6: 	cmpq	%rax, %rsi
    000000c9: 	jne	.Ltmp513 # Offset: 201
    000000cf: 	movdqa	%xmm4, %xmm0
    000000d3: 	movq	%r10, %rsi
    000000d6: 	psrldq	$0x8, %xmm0
    000000db: 	andq	$-0x4, %rsi
    000000df: 	paddd	%xmm0, %xmm4
    000000e3: 	leaq	(%rsi,%rsi), %r9
    000000e7: 	movdqa	%xmm4, %xmm0
    000000eb: 	psrldq	$0x4, %xmm0
    000000f0: 	paddd	%xmm0, %xmm4
    000000f4: 	movd	%xmm4, %eax
    000000f8: 	cmpq	%r10, %rsi
    000000fb: 	je	.Ltmp514 # Offset: 251
.Ltmp518:
    00000101: 	movl	(%rdi,%r9,4), %r10d
    00000105: 	imull	(%rcx,%r9,4), %r10d
    0000010a: 	leaq	(,%r9,4), %rsi
    00000112: 	addl	%eax, %r10d
    00000115: 	movl	0x4(%rdi,%rsi), %eax
    00000119: 	imull	0x4(%rcx,%rsi), %eax
    0000011e: 	addl	%r10d, %eax
    00000121: 	leaq	0x2(%r9), %r10
    00000125: 	cmpq	%r11, %r10
    00000128: 	jae	.Ltmp514 # Offset: 296
    0000012a: 	pushq	%rbx
    0000012b: 	movl	0x8(%rdi,%rsi), %r10d
    00000130: 	addq	$0x4, %r9
    00000134: 	imull	0x8(%rcx,%rsi), %r10d
    0000013a: 	movl	0xc(%rdi,%rsi), %ebx
    0000013e: 	imull	0xc(%rcx,%rsi), %ebx
    00000143: 	addl	%ebx, %r10d
    00000146: 	addl	%r10d, %eax
    00000149: 	cmpq	%r9, %r11
    0000014c: 	jbe	.Ltmp515 # Offset: 332
    0000014e: 	movl	0x10(%rcx,%rsi), %r10d
    00000153: 	imull	0x10(%rdi,%rsi), %r10d
    00000159: 	movl	0x14(%rcx,%rsi), %r9d
    0000015e: 	imull	0x14(%rdi,%rsi), %r9d
    00000164: 	movl	%r10d, %esi
    00000167: 	addl	%r9d, %esi
    0000016a: 	addl	%esi, %eax
.Ltmp515:
    0000016c: 	andq	$-0x2, %rdx
    00000170: 	addq	$0x2, %rdx
    00000174: 	cmpq	%rdx, %r8
    00000177: 	ja	.Ltmp516 # Offset: 375
    00000179: 	popq	%rbx
    0000017a: 	retq # Offset: 378
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp516:
    00000180: 	shlq	$0x2, %rdx
    00000184: 	popq	%rbx
    00000185: 	addq	%rdx, %rcx
    00000188: 	addq	%rdx, %rdi
    0000018b: 	movl	(%rdi), %edx
    0000018d: 	imull	(%rcx), %edx
    00000190: 	addl	%edx, %eax
    00000192: 	retq # Offset: 402
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp511:
    00000198: 	xorl	%eax, %eax
.Ltmp519:
    0000019a: 	movl	(%rdi), %edx
    0000019c: 	imull	(%rcx), %edx
    0000019f: 	addl	%edx, %eax
    000001a1: 	retq # Offset: 417
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp514:
    000001a8: 	andq	$-0x2, %rdx
    000001ac: 	addq	$0x2, %rdx
    000001b0: 	cmpq	%rdx, %r8
    000001b3: 	ja	.Ltmp517 # Offset: 435
    000001b5: 	retq # Offset: 437
.Ltmp512:
    000001b6: 	xorl	%eax, %eax
    000001b8: 	xorl	%r9d, %r9d
    000001bb: 	jmp	.Ltmp518 # Offset: 443
.Ltmp517:
    000001c0: 	shlq	$0x2, %rdx
    000001c4: 	addq	%rdx, %rdi
    000001c7: 	addq	%rdx, %rcx
    000001ca: 	jmp	.Ltmp519 # Offset: 458
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product4IPKjjET0_T_S3_m" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x18790
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x18790
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	pushq	%rbx
    00000008: 	movq	%rsi, %rcx
    0000000b: 	movq	%rdx, %r9
    0000000e: 	subq	$0x3, %r10
    00000012: 	je	.Ltmp520 # Offset: 18
    00000018: 	leaq	-0x4(%rdx), %r8
    0000001c: 	movq	%r8, %rbx
    0000001f: 	shrq	$0x2, %rbx
    00000023: 	addq	$0x1, %rbx
    00000027: 	cmpq	$0xb, %r8
    0000002b: 	jbe	.Ltmp521 # Offset: 43
    00000031: 	movq	%rsi, %rax
    00000034: 	movq	%rbx, %rsi
    00000037: 	pxor	%xmm5, %xmm5
    0000003b: 	movq	%rdi, %rdx
    0000003e: 	shrq	$0x2, %rsi
    00000042: 	shlq	$0x6, %rsi
    00000046: 	addq	%rcx, %rsi
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp522:
    00000050: 	movdqu	(%rdx), %xmm2
    00000054: 	movdqu	(%rax), %xmm1
    00000058: 	addq	$0x40, %rax
    0000005c: 	addq	$0x40, %rdx
    00000060: 	movdqu	-0x30(%rdx), %xmm7
    00000065: 	movdqu	-0x20(%rdx), %xmm9
    0000006b: 	movdqu	-0x10(%rdx), %xmm3
    00000070: 	movdqa	%xmm2, %xmm6
    00000074: 	movdqu	-0x20(%rax), %xmm10
    0000007a: 	movdqa	%xmm1, %xmm0
    0000007e: 	shufps	$0x88, %xmm7, %xmm6
    00000082: 	shufps	$0xdd, %xmm7, %xmm2
    00000086: 	movdqa	%xmm9, %xmm7
    0000008b: 	movdqa	%xmm2, %xmm11
    00000090: 	shufps	$0x88, %xmm3, %xmm7
    00000094: 	shufps	$0xdd, %xmm3, %xmm9
    00000099: 	movdqu	-0x30(%rax), %xmm3
    0000009e: 	movdqa	%xmm10, %xmm8
    000000a3: 	shufps	$0x88, %xmm9, %xmm11
    000000a8: 	movdqa	%xmm6, %xmm12
    000000ad: 	shufps	$0xdd, %xmm9, %xmm2
    000000b2: 	shufps	$0xdd, %xmm7, %xmm6
    000000b6: 	shufps	$0x88, %xmm3, %xmm0
    000000ba: 	shufps	$0xdd, %xmm3, %xmm1
    000000be: 	movdqu	-0x10(%rax), %xmm3
    000000c3: 	movdqa	%xmm1, %xmm4
    000000c7: 	shufps	$0x88, %xmm7, %xmm12
    000000cc: 	shufps	$0x88, %xmm3, %xmm8
    000000d1: 	shufps	$0xdd, %xmm3, %xmm10
    000000d6: 	shufps	$0x88, %xmm10, %xmm4
    000000db: 	movdqa	%xmm4, %xmm3
    000000df: 	pmuludq	%xmm11, %xmm3
    000000e4: 	psrlq	$0x20, %xmm4
    000000e9: 	shufps	$0xdd, %xmm10, %xmm1
    000000ee: 	psrlq	$0x20, %xmm11
    000000f4: 	pmuludq	%xmm11, %xmm4
    000000f9: 	pshufd	$0x8, %xmm3, %xmm3
    000000fe: 	pshufd	$0x8, %xmm4, %xmm4
    00000103: 	punpckldq	%xmm4, %xmm3
    00000107: 	movdqa	%xmm0, %xmm4
    0000010b: 	shufps	$0xdd, %xmm8, %xmm0
    00000110: 	shufps	$0x88, %xmm8, %xmm4
    00000115: 	movdqa	%xmm4, %xmm11
    0000011a: 	psrlq	$0x20, %xmm4
    0000011f: 	pmuludq	%xmm12, %xmm11
    00000124: 	psrlq	$0x20, %xmm12
    0000012a: 	pmuludq	%xmm12, %xmm4
    0000012f: 	pshufd	$0x8, %xmm11, %xmm11
    00000135: 	pshufd	$0x8, %xmm4, %xmm4
    0000013a: 	punpckldq	%xmm4, %xmm11
    0000013f: 	movdqa	%xmm1, %xmm4
    00000143: 	pmuludq	%xmm2, %xmm4
    00000147: 	psrlq	$0x20, %xmm1
    0000014c: 	paddd	%xmm11, %xmm3
    00000151: 	psrlq	$0x20, %xmm2
    00000156: 	pmuludq	%xmm2, %xmm1
    0000015a: 	pshufd	$0x8, %xmm4, %xmm2
    0000015f: 	pshufd	$0x8, %xmm1, %xmm1
    00000164: 	punpckldq	%xmm1, %xmm2
    00000168: 	movdqa	%xmm0, %xmm1
    0000016c: 	pmuludq	%xmm6, %xmm1
    00000170: 	psrlq	$0x20, %xmm0
    00000175: 	psrlq	$0x20, %xmm6
    0000017a: 	pmuludq	%xmm6, %xmm0
    0000017e: 	pshufd	$0x8, %xmm1, %xmm1
    00000183: 	pshufd	$0x8, %xmm0, %xmm0
    00000188: 	punpckldq	%xmm0, %xmm1
    0000018c: 	paddd	%xmm1, %xmm2
    00000190: 	paddd	%xmm2, %xmm3
    00000194: 	paddd	%xmm3, %xmm5
    00000198: 	cmpq	%rsi, %rax
    0000019b: 	jne	.Ltmp522 # Offset: 411
    000001a1: 	movdqa	%xmm5, %xmm0
    000001a5: 	movq	%rbx, %rdx
    000001a8: 	psrldq	$0x8, %xmm0
    000001ad: 	andq	$-0x4, %rdx
    000001b1: 	paddd	%xmm0, %xmm5
    000001b5: 	leaq	(,%rdx,4), %r11
    000001bd: 	movdqa	%xmm5, %xmm0
    000001c1: 	psrldq	$0x4, %xmm0
    000001c6: 	paddd	%xmm0, %xmm5
    000001ca: 	movd	%xmm5, %eax
    000001ce: 	cmpq	%rbx, %rdx
    000001d1: 	je	.Ltmp523 # Offset: 465
.Ltmp526:
    000001d7: 	movl	(%rcx,%r11,4), %esi
    000001db: 	imull	(%rdi,%r11,4), %esi
    000001e0: 	leaq	(,%r11,4), %rdx
    000001e8: 	addl	%eax, %esi
    000001ea: 	movl	0x4(%rcx,%rdx), %eax
    000001ee: 	imull	0x4(%rdi,%rdx), %eax
    000001f3: 	addl	%eax, %esi
    000001f5: 	movl	0x8(%rdi,%rdx), %eax
    000001f9: 	imull	0x8(%rcx,%rdx), %eax
    000001fe: 	addl	%eax, %esi
    00000200: 	movl	0xc(%rdi,%rdx), %eax
    00000204: 	imull	0xc(%rcx,%rdx), %eax
    00000209: 	addl	%esi, %eax
    0000020b: 	leaq	0x4(%r11), %rsi
    0000020f: 	cmpq	%rsi, %r10
    00000212: 	jbe	.Ltmp523 # Offset: 530
    00000214: 	movl	0x14(%rdi,%rdx), %esi
    00000218: 	movl	0x18(%rdi,%rdx), %ebx
    0000021c: 	addq	$0x8, %r11
    00000220: 	imull	0x18(%rcx,%rdx), %ebx
    00000225: 	imull	0x14(%rcx,%rdx), %esi
    0000022a: 	addl	%ebx, %esi
    0000022c: 	movl	0x10(%rdi,%rdx), %ebx
    00000230: 	imull	0x10(%rcx,%rdx), %ebx
    00000235: 	addl	%ebx, %esi
    00000237: 	movl	0x1c(%rdi,%rdx), %ebx
    0000023b: 	imull	0x1c(%rcx,%rdx), %ebx
    00000240: 	addl	%ebx, %esi
    00000242: 	addl	%esi, %eax
    00000244: 	cmpq	%r11, %r10
    00000247: 	jbe	.Ltmp523 # Offset: 583
    00000249: 	movl	0x28(%rcx,%rdx), %esi
    0000024d: 	movl	0x24(%rcx,%rdx), %r10d
    00000252: 	imull	0x28(%rdi,%rdx), %esi
    00000257: 	imull	0x24(%rdi,%rdx), %r10d
    0000025d: 	addl	%r10d, %esi
    00000260: 	movl	0x20(%rcx,%rdx), %r10d
    00000265: 	imull	0x20(%rdi,%rdx), %r10d
    0000026b: 	addl	%r10d, %esi
    0000026e: 	movl	0x2c(%rcx,%rdx), %r10d
    00000273: 	imull	0x2c(%rdi,%rdx), %r10d
    00000279: 	movl	%r10d, %edx
    0000027c: 	addl	%esi, %edx
    0000027e: 	addl	%edx, %eax
.Ltmp523:
    00000280: 	andq	$-0x4, %r8
    00000284: 	leaq	0x4(%r8), %rdx
    00000288: 	cmpq	%rdx, %r9
    0000028b: 	jbe	.Ltmp524 # Offset: 651
    0000028d: 	movl	(%rdi,%rdx,4), %esi
    00000290: 	imull	(%rcx,%rdx,4), %esi
    00000294: 	leaq	(,%rdx,4), %r10
    0000029c: 	leaq	0x5(%r8), %rdx
    000002a0: 	addl	%esi, %eax
    000002a2: 	cmpq	%r9, %rdx
    000002a5: 	jae	.Ltmp524 # Offset: 677
    000002a7: 	movl	0x4(%rcx,%r10), %esi
    000002ac: 	imull	0x4(%rdi,%r10), %esi
    000002b2: 	addq	$0x6, %r8
    000002b6: 	leaq	0x4(%r10), %rdx
    000002ba: 	addl	%esi, %eax
    000002bc: 	cmpq	%r9, %r8
    000002bf: 	jae	.Ltmp524 # Offset: 703
.Ltmp525:
    000002c1: 	movl	0x4(%rdi,%rdx), %esi
    000002c5: 	imull	0x4(%rcx,%rdx), %esi
    000002ca: 	addq	$0x1, %r8
    000002ce: 	addl	%esi, %eax
    000002d0: 	cmpq	%r8, %r9
    000002d3: 	jbe	.Ltmp524 # Offset: 723
    000002d5: 	movl	0x8(%rdi,%rdx), %esi
    000002d9: 	imull	0x8(%rcx,%rdx), %esi
    000002de: 	addl	%esi, %eax
.Ltmp524:
    000002e0: 	popq	%rbx
    000002e1: 	retq # Offset: 737
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp520:
    000002e8: 	movl	(%rsi), %eax
    000002ea: 	movl	0x4(%rdi), %edx
    000002ed: 	movl	$0x2, %r8d
    000002f3: 	imull	0x4(%rsi), %edx
    000002f7: 	imull	(%rdi), %eax
    000002fa: 	addl	%edx, %eax
    000002fc: 	movl	$0x4, %edx
    00000301: 	jmp	.Ltmp525 # Offset: 769
.Ltmp521:
    00000303: 	xorl	%eax, %eax
    00000305: 	xorl	%r11d, %r11d
    00000308: 	jmp	.Ltmp526 # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product5IPKjjET0_T_S3_m" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x18aa0
  Size        : 0x69c
  MaxSize     : 0x6a0
  Offset      : 0x18aa0
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	pushq	%rbx
    00000008: 	movq	%rsi, %rcx
    0000000b: 	movq	%rdx, %r9
    0000000e: 	subq	$0x7, %r8
    00000012: 	je	.Ltmp527 # Offset: 18
    00000018: 	leaq	-0x8(%rdx), %r10
    0000001c: 	movq	%r10, %rbx
    0000001f: 	shrq	$0x3, %rbx
    00000023: 	addq	$0x1, %rbx
    00000027: 	cmpq	$0x17, %r10
    0000002b: 	jbe	.Ltmp528 # Offset: 43
    00000031: 	movq	%rsi, %rax
    00000034: 	movq	%rbx, %rsi
    00000037: 	pxor	%xmm6, %xmm6
    0000003b: 	movq	%rdi, %rdx
    0000003e: 	shrq	$0x2, %rsi
    00000042: 	movaps	%xmm6, -0x30(%rsp)
    00000047: 	shlq	$0x7, %rsi
    0000004b: 	addq	%rcx, %rsi
    0000004e: 	nop # Size: 2
.Ltmp529:
    00000050: 	movdqu	(%rdx), %xmm0
    00000054: 	movdqu	0x10(%rdx), %xmm7
    00000059: 	subq	$-0x80, %rax
    0000005d: 	subq	$-0x80, %rdx
    00000061: 	movdqu	-0x60(%rdx), %xmm3
    00000066: 	movdqu	-0x40(%rdx), %xmm8
    0000006c: 	movdqa	%xmm0, %xmm1
    00000070: 	shufps	$0xdd, %xmm7, %xmm0
    00000074: 	movdqu	-0x20(%rdx), %xmm2
    00000079: 	movdqu	-0x60(%rax), %xmm9
    0000007f: 	shufps	$0x88, %xmm7, %xmm1
    00000083: 	movdqu	-0x50(%rdx), %xmm7
    00000088: 	movdqa	%xmm3, %xmm6
    0000008c: 	movdqa	%xmm8, %xmm5
    00000091: 	movdqa	%xmm2, %xmm4
    00000095: 	movdqa	%xmm1, %xmm11
    0000009a: 	movdqa	%xmm9, %xmm13
    0000009f: 	shufps	$0x88, %xmm7, %xmm6
    000000a3: 	shufps	$0xdd, %xmm7, %xmm3
    000000a7: 	movdqu	-0x30(%rdx), %xmm7
    000000ac: 	shufps	$0xdd, %xmm6, %xmm1
    000000b0: 	shufps	$0x88, %xmm6, %xmm11
    000000b5: 	shufps	$0x88, %xmm7, %xmm5
    000000b9: 	shufps	$0xdd, %xmm7, %xmm8
    000000be: 	movdqu	-0x10(%rdx), %xmm7
    000000c3: 	movdqa	%xmm5, %xmm15
    000000c8: 	shufps	$0x88, %xmm7, %xmm4
    000000cc: 	shufps	$0xdd, %xmm7, %xmm2
    000000d0: 	movdqa	%xmm8, %xmm7
    000000d5: 	shufps	$0xdd, %xmm2, %xmm8
    000000da: 	shufps	$0x88, %xmm2, %xmm7
    000000de: 	movdqu	-0x80(%rax), %xmm2
    000000e3: 	shufps	$0xdd, %xmm4, %xmm5
    000000e7: 	movdqa	%xmm5, %xmm14
    000000ec: 	movdqu	-0x70(%rax), %xmm5
    000000f1: 	movaps	%xmm7, -0x60(%rsp)
    000000f6: 	movdqu	-0x40(%rax), %xmm7
    000000fb: 	shufps	$0x88, %xmm4, %xmm15
    00000100: 	movdqa	%xmm2, %xmm6
    00000104: 	movdqa	%xmm0, %xmm4
    00000108: 	shufps	$0xdd, %xmm3, %xmm0
    0000010c: 	movaps	%xmm14, -0x20(%rsp)
    00000112: 	shufps	$0x88, %xmm5, %xmm6
    00000116: 	shufps	$0xdd, %xmm5, %xmm2
    0000011a: 	movdqu	-0x50(%rax), %xmm5
    0000011f: 	shufps	$0x88, %xmm3, %xmm4
    00000123: 	movdqa	%xmm7, %xmm12
    00000128: 	movdqu	-0x20(%rax), %xmm3
    0000012d: 	shufps	$0x88, %xmm5, %xmm13
    00000132: 	shufps	$0xdd, %xmm5, %xmm9
    00000137: 	movdqu	-0x30(%rax), %xmm5
    0000013c: 	movdqa	%xmm3, %xmm10
    00000141: 	shufps	$0x88, %xmm5, %xmm12
    00000146: 	shufps	$0xdd, %xmm5, %xmm7
    0000014a: 	movdqu	-0x10(%rax), %xmm5
    0000014f: 	shufps	$0x88, %xmm5, %xmm10
    00000154: 	shufps	$0xdd, %xmm5, %xmm3
    00000158: 	movdqa	%xmm6, %xmm5
    0000015c: 	shufps	$0xdd, %xmm13, %xmm6
    00000161: 	shufps	$0x88, %xmm13, %xmm5
    00000166: 	movdqa	%xmm12, %xmm13
    0000016b: 	shufps	$0xdd, %xmm10, %xmm12
    00000170: 	movaps	%xmm12, -0x50(%rsp)
    00000176: 	shufps	$0x88, %xmm10, %xmm13
    0000017b: 	movdqa	%xmm2, %xmm10
    00000180: 	shufps	$0xdd, %xmm9, %xmm2
    00000185: 	movaps	%xmm13, -0x10(%rsp)
    0000018b: 	shufps	$0x88, %xmm9, %xmm10
    00000190: 	movdqa	%xmm7, %xmm9
    00000195: 	shufps	$0xdd, %xmm3, %xmm7
    00000199: 	shufps	$0x88, %xmm3, %xmm9
    0000019e: 	movaps	%xmm9, -0x40(%rsp)
    000001a4: 	movdqa	%xmm11, %xmm9
    000001a9: 	movdqa	%xmm5, %xmm3
    000001ad: 	shufps	$0x88, %xmm15, %xmm9
    000001b2: 	movdqa	%xmm9, %xmm12
    000001b7: 	shufps	$0x88, %xmm13, %xmm3
    000001bc: 	psrlq	$0x20, %xmm9
    000001c2: 	pmuludq	%xmm3, %xmm12
    000001c7: 	psrlq	$0x20, %xmm3
    000001cc: 	shufps	$0xdd, %xmm15, %xmm11
    000001d1: 	shufps	$0xdd, -0x10(%rsp), %xmm5
    000001d7: 	pmuludq	%xmm9, %xmm3
    000001dc: 	movdqa	%xmm4, %xmm9
    000001e1: 	shufps	$0xdd, -0x60(%rsp), %xmm4
    000001e7: 	shufps	$0x88, -0x60(%rsp), %xmm9
    000001ee: 	movdqa	%xmm9, %xmm13
    000001f3: 	psrlq	$0x20, %xmm13
    000001f9: 	pshufd	$0x8, %xmm12, %xmm12
    000001ff: 	pshufd	$0x8, %xmm3, %xmm3
    00000204: 	punpckldq	%xmm3, %xmm12
    00000209: 	movdqa	%xmm10, %xmm3
    0000020e: 	shufps	$0x88, -0x40(%rsp), %xmm3
    00000214: 	shufps	$0xdd, -0x40(%rsp), %xmm10
    0000021b: 	pmuludq	%xmm3, %xmm9
    00000220: 	psrlq	$0x20, %xmm3
    00000225: 	pmuludq	%xmm13, %xmm3
    0000022a: 	pshufd	$0x8, %xmm9, %xmm9
    00000230: 	pshufd	$0x8, %xmm3, %xmm3
    00000235: 	punpckldq	%xmm3, %xmm9
    0000023a: 	movdqa	%xmm1, %xmm3
    0000023e: 	shufps	$0xdd, -0x20(%rsp), %xmm1
    00000244: 	shufps	$0x88, %xmm14, %xmm3
    00000249: 	movdqa	%xmm3, %xmm13
    0000024e: 	paddd	%xmm9, %xmm12
    00000253: 	movdqa	%xmm6, %xmm9
    00000258: 	psrlq	$0x20, %xmm13
    0000025e: 	shufps	$0x88, -0x50(%rsp), %xmm9
    00000265: 	pmuludq	%xmm9, %xmm3
    0000026a: 	shufps	$0xdd, -0x50(%rsp), %xmm6
    00000270: 	psrlq	$0x20, %xmm9
    00000276: 	pmuludq	%xmm13, %xmm9
    0000027b: 	pshufd	$0x8, %xmm3, %xmm3
    00000280: 	pshufd	$0x8, %xmm9, %xmm9
    00000286: 	punpckldq	%xmm9, %xmm3
    0000028b: 	movdqa	%xmm0, %xmm9
    00000290: 	shufps	$0xdd, %xmm8, %xmm0
    00000295: 	shufps	$0x88, %xmm8, %xmm9
    0000029a: 	movdqa	%xmm9, %xmm14
    0000029f: 	movdqa	%xmm2, %xmm9
    000002a4: 	shufps	$0xdd, %xmm7, %xmm2
    000002a8: 	movdqa	%xmm14, %xmm13
    000002ad: 	shufps	$0x88, %xmm7, %xmm9
    000002b2: 	psrlq	$0x20, %xmm14
    000002b8: 	pmuludq	%xmm9, %xmm13
    000002bd: 	psrlq	$0x20, %xmm9
    000002c3: 	pmuludq	%xmm14, %xmm9
    000002c8: 	pshufd	$0x8, %xmm13, %xmm13
    000002ce: 	pshufd	$0x8, %xmm9, %xmm9
    000002d4: 	punpckldq	%xmm9, %xmm13
    000002d9: 	movdqa	%xmm11, %xmm9
    000002de: 	pmuludq	%xmm5, %xmm9
    000002e3: 	psrlq	$0x20, %xmm11
    000002e9: 	paddd	%xmm13, %xmm3
    000002ee: 	psrlq	$0x20, %xmm5
    000002f3: 	paddd	%xmm12, %xmm3
    000002f8: 	pmuludq	%xmm11, %xmm5
    000002fd: 	pshufd	$0x8, %xmm9, %xmm9
    00000303: 	pshufd	$0x8, %xmm5, %xmm5
    00000308: 	punpckldq	%xmm5, %xmm9
    0000030d: 	movdqa	%xmm4, %xmm5
    00000311: 	pmuludq	%xmm10, %xmm5
    00000316: 	psrlq	$0x20, %xmm4
    0000031b: 	psrlq	$0x20, %xmm10
    00000321: 	pmuludq	%xmm10, %xmm4
    00000326: 	pshufd	$0x8, %xmm5, %xmm5
    0000032b: 	pshufd	$0x8, %xmm4, %xmm4
    00000330: 	punpckldq	%xmm4, %xmm5
    00000334: 	movdqa	%xmm1, %xmm4
    00000338: 	pmuludq	%xmm6, %xmm4
    0000033c: 	psrlq	$0x20, %xmm1
    00000341: 	paddd	%xmm5, %xmm9
    00000346: 	psrlq	$0x20, %xmm6
    0000034b: 	pmuludq	%xmm6, %xmm1
    0000034f: 	pshufd	$0x8, %xmm4, %xmm4
    00000354: 	pshufd	$0x8, %xmm1, %xmm1
    00000359: 	punpckldq	%xmm1, %xmm4
    0000035d: 	movdqa	%xmm0, %xmm1
    00000361: 	pmuludq	%xmm2, %xmm1
    00000365: 	psrlq	$0x20, %xmm0
    0000036a: 	paddd	%xmm4, %xmm9
    0000036f: 	psrlq	$0x20, %xmm2
    00000374: 	paddd	%xmm9, %xmm3
    00000379: 	pmuludq	%xmm2, %xmm0
    0000037d: 	pshufd	$0x8, %xmm1, %xmm1
    00000382: 	pshufd	$0x8, %xmm0, %xmm0
    00000387: 	punpckldq	%xmm0, %xmm1
    0000038b: 	movdqa	-0x30(%rsp), %xmm0
    00000391: 	paddd	%xmm1, %xmm0
    00000395: 	paddd	%xmm0, %xmm3
    00000399: 	movaps	%xmm3, -0x30(%rsp)
    0000039e: 	cmpq	%rax, %rsi
    000003a1: 	jne	.Ltmp529 # Offset: 929
    000003a7: 	movdqa	%xmm3, %xmm0
    000003ab: 	movq	%rbx, %rdx
    000003ae: 	psrldq	$0x8, %xmm0
    000003b3: 	andq	$-0x4, %rdx
    000003b7: 	paddd	%xmm3, %xmm0
    000003bb: 	leaq	(,%rdx,8), %r11
    000003c3: 	movdqa	%xmm0, %xmm1
    000003c7: 	psrldq	$0x4, %xmm1
    000003cc: 	paddd	%xmm1, %xmm0
    000003d0: 	movd	%xmm0, %eax
    000003d4: 	cmpq	%rbx, %rdx
    000003d7: 	je	.Ltmp530 # Offset: 983
.Ltmp534:
    000003dd: 	movl	(%rcx,%r11,4), %esi
    000003e1: 	imull	(%rdi,%r11,4), %esi
    000003e6: 	leaq	(,%r11,4), %rdx
    000003ee: 	addl	%eax, %esi
    000003f0: 	movl	0x4(%rcx,%rdx), %eax
    000003f4: 	imull	0x4(%rdi,%rdx), %eax
    000003f9: 	addl	%eax, %esi
    000003fb: 	movl	0x8(%rcx,%rdx), %eax
    000003ff: 	imull	0x8(%rdi,%rdx), %eax
    00000404: 	addl	%eax, %esi
    00000406: 	movl	0xc(%rcx,%rdx), %eax
    0000040a: 	imull	0xc(%rdi,%rdx), %eax
    0000040f: 	addl	%eax, %esi
    00000411: 	movl	0x10(%rdi,%rdx), %eax
    00000415: 	imull	0x10(%rcx,%rdx), %eax
    0000041a: 	addl	%eax, %esi
    0000041c: 	movl	0x14(%rdi,%rdx), %eax
    00000420: 	imull	0x14(%rcx,%rdx), %eax
    00000425: 	addl	%eax, %esi
    00000427: 	movl	0x18(%rdi,%rdx), %eax
    0000042b: 	imull	0x18(%rcx,%rdx), %eax
    00000430: 	addl	%eax, %esi
    00000432: 	movl	0x1c(%rdi,%rdx), %eax
    00000436: 	imull	0x1c(%rcx,%rdx), %eax
    0000043b: 	addl	%esi, %eax
    0000043d: 	leaq	0x8(%r11), %rsi
    00000441: 	cmpq	%rsi, %r8
    00000444: 	jbe	.Ltmp530 # Offset: 1092
    0000044a: 	movl	0x24(%rdi,%rdx), %esi
    0000044e: 	movl	0x28(%rdi,%rdx), %ebx
    00000452: 	addq	$0x10, %r11
    00000456: 	imull	0x28(%rcx,%rdx), %ebx
    0000045b: 	imull	0x24(%rcx,%rdx), %esi
    00000460: 	addl	%ebx, %esi
    00000462: 	movl	0x20(%rdi,%rdx), %ebx
    00000466: 	imull	0x20(%rcx,%rdx), %ebx
    0000046b: 	addl	%ebx, %esi
    0000046d: 	movl	0x2c(%rdi,%rdx), %ebx
    00000471: 	imull	0x2c(%rcx,%rdx), %ebx
    00000476: 	addl	%ebx, %esi
    00000478: 	movl	0x30(%rdi,%rdx), %ebx
    0000047c: 	imull	0x30(%rcx,%rdx), %ebx
    00000481: 	addl	%ebx, %esi
    00000483: 	movl	0x34(%rdi,%rdx), %ebx
    00000487: 	imull	0x34(%rcx,%rdx), %ebx
    0000048c: 	addl	%ebx, %esi
    0000048e: 	movl	0x38(%rdi,%rdx), %ebx
    00000492: 	imull	0x38(%rcx,%rdx), %ebx
    00000497: 	addl	%ebx, %esi
    00000499: 	movl	0x3c(%rdi,%rdx), %ebx
    0000049d: 	imull	0x3c(%rcx,%rdx), %ebx
    000004a2: 	addl	%ebx, %esi
    000004a4: 	addl	%esi, %eax
    000004a6: 	cmpq	%r11, %r8
    000004a9: 	jbe	.Ltmp530 # Offset: 1193
    000004ab: 	movl	0x48(%rcx,%rdx), %esi
    000004af: 	movl	0x44(%rcx,%rdx), %r8d
    000004b4: 	imull	0x48(%rdi,%rdx), %esi
    000004b9: 	imull	0x44(%rdi,%rdx), %r8d
    000004bf: 	addl	%r8d, %esi
    000004c2: 	movl	0x40(%rcx,%rdx), %r8d
    000004c7: 	imull	0x40(%rdi,%rdx), %r8d
    000004cd: 	addl	%r8d, %esi
    000004d0: 	movl	0x4c(%rcx,%rdx), %r8d
    000004d5: 	imull	0x4c(%rdi,%rdx), %r8d
    000004db: 	addl	%r8d, %esi
    000004de: 	movl	0x50(%rcx,%rdx), %r8d
    000004e3: 	imull	0x50(%rdi,%rdx), %r8d
    000004e9: 	addl	%r8d, %esi
    000004ec: 	movl	0x54(%rcx,%rdx), %r8d
    000004f1: 	imull	0x54(%rdi,%rdx), %r8d
    000004f7: 	addl	%r8d, %esi
    000004fa: 	movl	0x58(%rcx,%rdx), %r8d
    000004ff: 	imull	0x58(%rdi,%rdx), %r8d
    00000505: 	addl	%r8d, %esi
    00000508: 	movl	0x5c(%rcx,%rdx), %r8d
    0000050d: 	imull	0x5c(%rdi,%rdx), %r8d
    00000513: 	movl	%r8d, %edx
    00000516: 	addl	%esi, %edx
    00000518: 	addl	%edx, %eax
.Ltmp530:
    0000051a: 	andq	$-0x8, %r10
    0000051e: 	leaq	0x8(%r10), %r8
    00000522: 	cmpq	%r8, %r9
    00000525: 	jbe	.Ltmp531 # Offset: 1317
    0000052b: 	addq	$0x9, %r10
    0000052f: 	movq	%r9, %rdx
    00000532: 	movl	$0x1, %r11d
    00000538: 	subq	%r8, %rdx
    0000053b: 	cmpq	%r10, %r9
    0000053e: 	cmovaeq	%rdx, %r11
    00000542: 	subq	$0x1, %rdx
    00000546: 	cmpq	$0x2, %rdx
    0000054a: 	jbe	.Ltmp532 # Offset: 1354
    00000550: 	cmpq	%r10, %r9
    00000553: 	jb	.Ltmp532 # Offset: 1363
    00000559: 	leaq	(,%r8,4), %rdx
    00000561: 	movq	%r11, %rsi
    00000564: 	leaq	(%rdi,%rdx), %r10
    00000568: 	addq	%rcx, %rdx
    0000056b: 	shrq	$0x2, %rsi
    0000056f: 	movdqu	(%r10), %xmm1
    00000574: 	movdqu	(%rdx), %xmm2
    00000578: 	movdqu	(%r10), %xmm0
    0000057d: 	movdqu	(%rdx), %xmm6
    00000581: 	psrlq	$0x20, %xmm1
    00000586: 	psrlq	$0x20, %xmm2
    0000058b: 	pmuludq	%xmm6, %xmm0
    0000058f: 	pmuludq	%xmm2, %xmm1
    00000593: 	pshufd	$0x8, %xmm0, %xmm0
    00000598: 	pshufd	$0x8, %xmm1, %xmm1
    0000059d: 	punpckldq	%xmm1, %xmm0
    000005a1: 	cmpq	$0x1, %rsi
    000005a5: 	je	.Ltmp533 # Offset: 1445
    000005a7: 	movdqu	0x10(%rdx), %xmm1
    000005ac: 	movdqu	0x10(%r10), %xmm3
    000005b2: 	movdqa	%xmm1, %xmm2
    000005b6: 	psrlq	$0x20, %xmm1
    000005bb: 	pmuludq	%xmm3, %xmm2
    000005bf: 	psrlq	$0x20, %xmm3
    000005c4: 	pmuludq	%xmm3, %xmm1
    000005c8: 	pshufd	$0x8, %xmm2, %xmm2
    000005cd: 	pshufd	$0x8, %xmm1, %xmm1
    000005d2: 	punpckldq	%xmm1, %xmm2
    000005d6: 	paddd	%xmm2, %xmm0
.Ltmp533:
    000005da: 	movdqa	%xmm0, %xmm1
    000005de: 	psrldq	$0x8, %xmm1
    000005e3: 	paddd	%xmm1, %xmm0
    000005e7: 	movdqa	%xmm0, %xmm1
    000005eb: 	psrldq	$0x4, %xmm1
    000005f0: 	paddd	%xmm1, %xmm0
    000005f4: 	movd	%xmm0, %edx
    000005f8: 	addl	%edx, %eax
    000005fa: 	leaq	(,%rsi,4), %rdx
    00000602: 	addq	%rdx, %r8
    00000605: 	cmpq	%r11, %rdx
    00000608: 	je	.Ltmp531 # Offset: 1544
.Ltmp532:
    0000060a: 	movl	(%rdi,%r8,4), %esi
    0000060e: 	imull	(%rcx,%r8,4), %esi
    00000613: 	leaq	(,%r8,4), %rdx
    0000061b: 	addl	%esi, %eax
    0000061d: 	leaq	0x1(%r8), %rsi
    00000621: 	cmpq	%r9, %rsi
    00000624: 	jae	.Ltmp531 # Offset: 1572
    00000626: 	movl	0x4(%rcx,%rdx), %esi
    0000062a: 	imull	0x4(%rdi,%rdx), %esi
    0000062f: 	addq	$0x2, %r8
    00000633: 	addl	%esi, %eax
    00000635: 	cmpq	%r9, %r8
    00000638: 	jae	.Ltmp531 # Offset: 1592
    0000063a: 	movl	0x8(%rcx,%rdx), %ecx
    0000063e: 	imull	0x8(%rdi,%rdx), %ecx
    00000643: 	addl	%ecx, %eax
.Ltmp531:
    00000645: 	popq	%rbx
    00000646: 	retq # Offset: 1606
    00000647: 	nopw	(%rax,%rax) # Size: 9
.Ltmp527:
    00000650: 	movdqu	(%rsi), %xmm2
    00000654: 	movdqu	(%rdi), %xmm1
    00000658: 	xorl	%eax, %eax
    0000065a: 	movl	$0x7, %r11d
    00000660: 	movdqu	(%rsi), %xmm6
    00000664: 	movdqu	(%rdi), %xmm0
    00000668: 	movl	$0x1, %esi
    0000066d: 	psrlq	$0x20, %xmm1
    00000672: 	psrlq	$0x20, %xmm2
    00000677: 	pmuludq	%xmm6, %xmm0
    0000067b: 	pmuludq	%xmm2, %xmm1
    0000067f: 	pshufd	$0x8, %xmm0, %xmm0
    00000684: 	pshufd	$0x8, %xmm1, %xmm1
    00000689: 	punpckldq	%xmm1, %xmm0
    0000068d: 	jmp	.Ltmp533 # Offset: 1677
.Ltmp528:
    00000692: 	xorl	%eax, %eax
    00000694: 	xorl	%r11d, %r11d
    00000697: 	jmp	.Ltmp534 # Offset: 1687
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product6IPKjjET0_T_S3_m" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x19140
  Size        : 0xa06
  MaxSize     : 0xa10
  Offset      : 0x19140
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movq	%rdx, %rdi
    0000000b: 	movq	%rsi, %r11
    0000000e: 	pushq	%rbx
    0000000f: 	movq	%rdx, %r9
    00000012: 	subq	$0xd0, %rsp
    00000019: 	subq	$0xf, %rdi
    0000001d: 	je	.Ltmp535 # Offset: 29
    00000023: 	leaq	-0x10(%rdx), %rbx
    00000027: 	cmpq	$0x3f, %rbx
    0000002b: 	jbe	.Ltmp536 # Offset: 43
    00000031: 	movq	%rbx, %rsi
    00000034: 	pxor	%xmm5, %xmm5
    00000038: 	movq	%r11, %rax
    0000003b: 	movq	%r10, %rdx
    0000003e: 	shrq	$0x6, %rsi
    00000042: 	movaps	%xmm5, 0x58(%rsp)
    00000047: 	movq	%rsi, %rcx
    0000004a: 	shlq	$0x8, %rcx
    0000004e: 	addq	%r11, %rcx
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp537:
    00000058: 	movdqu	(%rdx), %xmm6
    0000005c: 	movdqu	0x20(%rdx), %xmm5
    00000061: 	addq	$0x100, %rax
    00000067: 	addq	$0x100, %rdx
    0000006e: 	movdqu	-0xf0(%rdx), %xmm8
    00000077: 	movdqu	-0xc0(%rdx), %xmm4
    0000007f: 	movdqa	%xmm6, %xmm15
    00000084: 	movdqa	%xmm5, %xmm14
    00000089: 	movdqu	-0x80(%rdx), %xmm2
    0000008e: 	movdqu	-0xa0(%rdx), %xmm3
    00000096: 	shufps	$0x88, %xmm8, %xmm15
    0000009b: 	shufps	$0xdd, %xmm8, %xmm6
    000000a0: 	movdqa	%xmm4, %xmm13
    000000a5: 	movdqu	-0xd0(%rdx), %xmm8
    000000ae: 	movdqa	%xmm3, %xmm12
    000000b3: 	movdqu	-0x60(%rdx), %xmm1
    000000b8: 	movdqa	%xmm2, %xmm11
    000000bd: 	movdqu	-0x50(%rdx), %xmm9
    000000c3: 	shufps	$0x88, %xmm8, %xmm14
    000000c8: 	shufps	$0xdd, %xmm8, %xmm5
    000000cd: 	movdqu	-0x40(%rdx), %xmm0
    000000d2: 	movdqu	-0xb0(%rdx), %xmm8
    000000db: 	movdqu	-0x20(%rdx), %xmm7
    000000e0: 	movdqa	%xmm1, %xmm10
    000000e5: 	shufps	$0xdd, %xmm9, %xmm1
    000000ea: 	shufps	$0x88, %xmm8, %xmm13
    000000ef: 	shufps	$0xdd, %xmm8, %xmm4
    000000f4: 	shufps	$0x88, %xmm9, %xmm10
    000000f9: 	movdqu	-0x90(%rdx), %xmm8
    00000102: 	movdqa	%xmm0, %xmm9
    00000107: 	shufps	$0x88, %xmm8, %xmm12
    0000010c: 	shufps	$0xdd, %xmm8, %xmm3
    00000111: 	movdqu	-0x70(%rdx), %xmm8
    00000117: 	shufps	$0x88, %xmm8, %xmm11
    0000011c: 	shufps	$0xdd, %xmm8, %xmm2
    00000121: 	movdqu	-0x30(%rdx), %xmm8
    00000127: 	shufps	$0xdd, %xmm8, %xmm0
    0000012c: 	movaps	%xmm0, -0x78(%rsp)
    00000131: 	movdqu	-0x10(%rdx), %xmm0
    00000136: 	shufps	$0x88, %xmm8, %xmm9
    0000013b: 	movdqa	%xmm7, %xmm8
    00000140: 	shufps	$0x88, %xmm0, %xmm8
    00000145: 	shufps	$0xdd, %xmm0, %xmm7
    00000149: 	movdqa	%xmm15, %xmm0
    0000014e: 	shufps	$0xdd, %xmm14, %xmm15
    00000153: 	shufps	$0x88, %xmm14, %xmm0
    00000158: 	movdqa	%xmm13, %xmm14
    0000015d: 	shufps	$0xdd, %xmm12, %xmm13
    00000162: 	movaps	%xmm13, 0x18(%rsp)
    00000168: 	shufps	$0x88, %xmm12, %xmm14
    0000016d: 	movdqa	%xmm9, %xmm12
    00000172: 	movaps	%xmm14, 0x28(%rsp)
    00000178: 	movdqa	%xmm6, %xmm14
    0000017d: 	shufps	$0x88, %xmm5, %xmm14
    00000182: 	shufps	$0xdd, %xmm5, %xmm6
    00000186: 	movdqa	%xmm4, %xmm5
    0000018a: 	shufps	$0x88, %xmm8, %xmm12
    0000018f: 	shufps	$0x88, %xmm3, %xmm5
    00000193: 	movaps	%xmm5, -0x38(%rsp)
    00000198: 	movdqa	%xmm2, %xmm5
    0000019c: 	shufps	$0xdd, %xmm3, %xmm4
    000001a0: 	shufps	$0x88, %xmm1, %xmm5
    000001a4: 	movaps	%xmm5, 0x68(%rsp)
    000001a9: 	movdqa	-0x78(%rsp), %xmm5
    000001af: 	shufps	$0xdd, %xmm1, %xmm2
    000001b3: 	shufps	$0xdd, %xmm8, %xmm9
    000001b8: 	movdqa	%xmm11, %xmm13
    000001bd: 	movaps	%xmm0, 0x98(%rsp)
    000001c5: 	shufps	$0xdd, %xmm10, %xmm11
    000001ca: 	movdqa	%xmm5, %xmm8
    000001cf: 	shufps	$0x88, %xmm10, %xmm13
    000001d4: 	movaps	%xmm15, 0x38(%rsp)
    000001da: 	movdqa	%xmm5, %xmm10
    000001df: 	shufps	$0x88, %xmm7, %xmm8
    000001e4: 	movaps	%xmm11, 0x8(%rsp)
    000001ea: 	shufps	$0xdd, %xmm7, %xmm10
    000001ef: 	movaps	%xmm13, 0x88(%rsp)
    000001f8: 	movaps	%xmm12, -0x8(%rsp)
    000001fe: 	movaps	%xmm9, -0x18(%rsp)
    00000204: 	movaps	%xmm14, 0x78(%rsp)
    0000020a: 	movaps	%xmm6, -0x28(%rsp)
    0000020f: 	movaps	%xmm4, -0x48(%rsp)
    00000214: 	movaps	%xmm2, -0x58(%rsp)
    00000219: 	movaps	%xmm8, -0x68(%rsp)
    0000021f: 	movdqu	-0x80(%rax), %xmm1
    00000224: 	movdqu	-0x100(%rax), %xmm3
    0000022c: 	movaps	%xmm10, -0x78(%rsp)
    00000232: 	movdqu	-0xc0(%rax), %xmm2
    0000023a: 	movdqu	-0xf0(%rax), %xmm12
    00000243: 	movdqa	%xmm3, %xmm15
    00000248: 	movdqu	-0x70(%rax), %xmm11
    0000024e: 	movdqu	-0xe0(%rax), %xmm9
    00000257: 	movdqa	%xmm1, %xmm5
    0000025b: 	shufps	$0x88, %xmm12, %xmm15
    00000260: 	shufps	$0xdd, %xmm12, %xmm3
    00000265: 	movdqu	-0xd0(%rax), %xmm10
    0000026e: 	movdqu	-0xa0(%rax), %xmm8
    00000277: 	movdqa	%xmm9, %xmm12
    0000027c: 	movdqa	%xmm2, %xmm13
    00000281: 	movdqu	-0x60(%rax), %xmm7
    00000286: 	movdqu	-0x40(%rax), %xmm0
    0000028b: 	shufps	$0x88, %xmm10, %xmm12
    00000290: 	movdqa	%xmm12, %xmm14
    00000295: 	shufps	$0xdd, %xmm10, %xmm9
    0000029a: 	movdqu	-0xb0(%rax), %xmm12
    000002a3: 	movdqu	-0x30(%rax), %xmm4
    000002a8: 	shufps	$0x88, %xmm11, %xmm5
    000002ad: 	shufps	$0xdd, %xmm11, %xmm1
    000002b2: 	movdqu	-0x90(%rax), %xmm10
    000002bb: 	shufps	$0x88, %xmm12, %xmm13
    000002c0: 	shufps	$0xdd, %xmm12, %xmm2
    000002c5: 	movdqa	%xmm8, %xmm12
    000002ca: 	movdqa	%xmm7, %xmm11
    000002cf: 	shufps	$0x88, %xmm10, %xmm12
    000002d4: 	shufps	$0xdd, %xmm10, %xmm8
    000002d9: 	movdqu	-0x50(%rax), %xmm10
    000002df: 	movdqu	-0x20(%rax), %xmm6
    000002e4: 	movaps	%xmm1, 0x48(%rsp)
    000002e9: 	shufps	$0x88, %xmm10, %xmm11
    000002ee: 	shufps	$0xdd, %xmm10, %xmm7
    000002f3: 	movdqa	%xmm0, %xmm10
    000002f8: 	shufps	$0xdd, %xmm4, %xmm0
    000002fc: 	shufps	$0x88, %xmm4, %xmm10
    00000301: 	movdqu	-0x10(%rax), %xmm4
    00000306: 	movdqa	%xmm10, %xmm1
    0000030b: 	movdqa	%xmm6, %xmm10
    00000310: 	shufps	$0x88, %xmm4, %xmm10
    00000315: 	shufps	$0xdd, %xmm4, %xmm6
    00000319: 	movdqa	%xmm15, %xmm4
    0000031e: 	shufps	$0xdd, %xmm14, %xmm15
    00000323: 	shufps	$0x88, %xmm14, %xmm4
    00000328: 	movdqa	%xmm13, %xmm14
    0000032d: 	shufps	$0xdd, %xmm12, %xmm13
    00000332: 	shufps	$0x88, %xmm12, %xmm14
    00000337: 	movdqa	%xmm5, %xmm12
    0000033c: 	shufps	$0xdd, %xmm11, %xmm5
    00000341: 	shufps	$0x88, %xmm11, %xmm12
    00000346: 	movdqa	%xmm1, %xmm11
    0000034b: 	shufps	$0xdd, %xmm10, %xmm1
    00000350: 	movaps	%xmm1, 0xa8(%rsp)
    00000358: 	shufps	$0x88, %xmm10, %xmm11
    0000035d: 	movdqa	%xmm3, %xmm10
    00000362: 	shufps	$0xdd, %xmm9, %xmm3
    00000367: 	movdqa	0x48(%rsp), %xmm1
    0000036d: 	shufps	$0x88, %xmm9, %xmm10
    00000372: 	movdqa	%xmm2, %xmm9
    00000377: 	shufps	$0xdd, %xmm8, %xmm2
    0000037c: 	shufps	$0x88, %xmm8, %xmm9
    00000381: 	movdqa	0x48(%rsp), %xmm8
    00000388: 	shufps	$0xdd, %xmm7, %xmm1
    0000038c: 	shufps	$0x88, %xmm7, %xmm8
    00000391: 	movdqa	%xmm0, %xmm7
    00000395: 	shufps	$0xdd, %xmm6, %xmm0
    00000399: 	shufps	$0x88, %xmm6, %xmm7
    0000039d: 	movdqa	%xmm4, %xmm6
    000003a1: 	shufps	$0xdd, %xmm14, %xmm4
    000003a6: 	movaps	%xmm4, 0x48(%rsp)
    000003ab: 	movdqa	0xa8(%rsp), %xmm4
    000003b4: 	shufps	$0x88, %xmm14, %xmm6
    000003b9: 	movdqa	%xmm12, %xmm14
    000003be: 	shufps	$0xdd, %xmm11, %xmm12
    000003c3: 	movaps	%xmm12, 0xb8(%rsp)
    000003cc: 	shufps	$0x88, %xmm11, %xmm14
    000003d1: 	movdqa	%xmm10, %xmm11
    000003d6: 	shufps	$0xdd, %xmm9, %xmm10
    000003db: 	shufps	$0x88, %xmm9, %xmm11
    000003e0: 	movdqa	%xmm8, %xmm9
    000003e5: 	shufps	$0xdd, %xmm7, %xmm8
    000003ea: 	shufps	$0x88, %xmm7, %xmm9
    000003ef: 	movdqa	%xmm15, %xmm7
    000003f4: 	shufps	$0xdd, %xmm13, %xmm15
    000003f9: 	movdqa	%xmm15, %xmm12
    000003fe: 	movdqa	%xmm5, %xmm15
    00000403: 	shufps	$0xdd, %xmm4, %xmm5
    00000407: 	shufps	$0x88, %xmm13, %xmm7
    0000040c: 	shufps	$0x88, %xmm4, %xmm15
    00000411: 	movaps	%xmm15, 0xa8(%rsp)
    0000041a: 	movdqa	%xmm5, %xmm15
    0000041f: 	movdqa	%xmm3, %xmm5
    00000423: 	shufps	$0x88, %xmm2, %xmm5
    00000427: 	movdqa	%xmm5, %xmm4
    0000042b: 	movdqa	%xmm3, %xmm5
    0000042f: 	movdqa	0x8(%rsp), %xmm3
    00000435: 	shufps	$0xdd, %xmm2, %xmm5
    00000439: 	movdqa	%xmm1, %xmm2
    0000043d: 	shufps	$0xdd, %xmm0, %xmm1
    00000441: 	movdqa	%xmm1, %xmm13
    00000446: 	shufps	$0x88, %xmm0, %xmm2
    0000044a: 	movdqa	0x38(%rsp), %xmm1
    00000450: 	shufps	$0x88, 0x18(%rsp), %xmm1
    00000456: 	movdqa	%xmm1, %xmm0
    0000045a: 	shufps	$0x88, -0x18(%rsp), %xmm3
    00000460: 	shufps	$0x88, %xmm3, %xmm0
    00000464: 	movdqa	%xmm7, %xmm1
    00000468: 	movdqa	0xa8(%rsp), %xmm3
    00000471: 	shufps	$0x88, %xmm3, %xmm1
    00000475: 	shufps	$0xdd, %xmm3, %xmm7
    00000479: 	paddd	%xmm1, %xmm7
    0000047d: 	movdqa	%xmm0, %xmm1
    00000481: 	pmuludq	%xmm7, %xmm1
    00000485: 	psrlq	$0x20, %xmm0
    0000048a: 	psrlq	$0x20, %xmm7
    0000048f: 	pmuludq	%xmm0, %xmm7
    00000493: 	pshufd	$0x8, %xmm1, %xmm1
    00000498: 	pshufd	$0x8, %xmm7, %xmm7
    0000049d: 	punpckldq	%xmm7, %xmm1
    000004a1: 	movdqa	-0x28(%rsp), %xmm7
    000004a7: 	shufps	$0x88, -0x48(%rsp), %xmm7
    000004ad: 	movdqa	%xmm7, %xmm0
    000004b1: 	movdqa	-0x58(%rsp), %xmm3
    000004b7: 	shufps	$0x88, -0x78(%rsp), %xmm3
    000004bd: 	shufps	$0x88, %xmm3, %xmm0
    000004c1: 	movdqa	%xmm4, %xmm3
    000004c5: 	shufps	$0x88, %xmm2, %xmm3
    000004c9: 	shufps	$0xdd, %xmm2, %xmm4
    000004cd: 	movdqa	%xmm0, %xmm2
    000004d1: 	paddd	%xmm3, %xmm4
    000004d5: 	pmuludq	%xmm4, %xmm2
    000004d9: 	psrlq	$0x20, %xmm0
    000004de: 	movdqa	0x98(%rsp), %xmm7
    000004e7: 	psrlq	$0x20, %xmm4
    000004ec: 	pmuludq	%xmm0, %xmm4
    000004f0: 	movdqa	%xmm7, %xmm0
    000004f4: 	shufps	$0x88, 0x28(%rsp), %xmm0
    000004fa: 	shufps	$0xdd, 0x28(%rsp), %xmm7
    00000500: 	pshufd	$0x8, %xmm2, %xmm2
    00000505: 	pshufd	$0x8, %xmm4, %xmm4
    0000050a: 	punpckldq	%xmm4, %xmm2
    0000050e: 	movdqa	0x88(%rsp), %xmm4
    00000517: 	paddd	%xmm1, %xmm2
    0000051b: 	movdqa	%xmm4, %xmm1
    0000051f: 	shufps	$0x88, -0x8(%rsp), %xmm1
    00000525: 	shufps	$0x88, %xmm1, %xmm0
    00000529: 	movdqa	%xmm6, %xmm1
    0000052d: 	shufps	$0x88, %xmm14, %xmm1
    00000532: 	shufps	$0xdd, %xmm14, %xmm6
    00000537: 	paddd	%xmm1, %xmm6
    0000053b: 	movdqa	%xmm0, %xmm1
    0000053f: 	pmuludq	%xmm6, %xmm1
    00000543: 	psrlq	$0x20, %xmm0
    00000548: 	movdqa	0x78(%rsp), %xmm14
    0000054f: 	psrlq	$0x20, %xmm6
    00000554: 	pmuludq	%xmm0, %xmm6
    00000558: 	movdqa	%xmm14, %xmm0
    0000055d: 	shufps	$0x88, -0x38(%rsp), %xmm0
    00000563: 	shufps	$0xdd, -0x38(%rsp), %xmm14
    0000056a: 	pshufd	$0x8, %xmm1, %xmm1
    0000056f: 	pshufd	$0x8, %xmm6, %xmm6
    00000574: 	punpckldq	%xmm6, %xmm1
    00000578: 	movdqa	0x68(%rsp), %xmm6
    0000057e: 	movdqa	%xmm6, %xmm3
    00000582: 	shufps	$0x88, -0x68(%rsp), %xmm3
    00000588: 	shufps	$0x88, %xmm3, %xmm0
    0000058c: 	movdqa	%xmm11, %xmm3
    00000591: 	shufps	$0x88, %xmm9, %xmm3
    00000596: 	shufps	$0xdd, %xmm9, %xmm11
    0000059b: 	movdqa	%xmm0, %xmm9
    000005a0: 	paddd	%xmm3, %xmm11
    000005a5: 	pmuludq	%xmm11, %xmm9
    000005aa: 	psrlq	$0x20, %xmm0
    000005af: 	shufps	$0xdd, -0x68(%rsp), %xmm6
    000005b5: 	psrlq	$0x20, %xmm11
    000005bb: 	pmuludq	%xmm0, %xmm11
    000005c0: 	movdqa	%xmm7, %xmm0
    000005c4: 	pshufd	$0x8, %xmm9, %xmm3
    000005ca: 	pshufd	$0x8, %xmm11, %xmm11
    000005d0: 	punpckldq	%xmm11, %xmm3
    000005d5: 	movdqa	0xb8(%rsp), %xmm11
    000005df: 	paddd	%xmm3, %xmm1
    000005e3: 	paddd	%xmm2, %xmm1
    000005e7: 	movdqa	%xmm4, %xmm2
    000005eb: 	movdqa	0x48(%rsp), %xmm4
    000005f1: 	shufps	$0xdd, -0x8(%rsp), %xmm2
    000005f7: 	shufps	$0x88, %xmm2, %xmm0
    000005fb: 	movdqa	%xmm4, %xmm2
    000005ff: 	shufps	$0xdd, %xmm11, %xmm4
    00000604: 	movdqa	%xmm4, %xmm3
    00000608: 	movdqa	%xmm0, %xmm4
    0000060c: 	shufps	$0x88, %xmm11, %xmm2
    00000611: 	paddd	%xmm2, %xmm3
    00000615: 	psrlq	$0x20, %xmm0
    0000061a: 	pmuludq	%xmm3, %xmm4
    0000061e: 	psrlq	$0x20, %xmm3
    00000623: 	pmuludq	%xmm0, %xmm3
    00000627: 	movdqa	%xmm14, %xmm0
    0000062c: 	shufps	$0x88, %xmm6, %xmm0
    00000630: 	movdqa	%xmm10, %xmm6
    00000635: 	shufps	$0xdd, %xmm8, %xmm10
    0000063a: 	shufps	$0x88, %xmm8, %xmm6
    0000063f: 	paddd	%xmm6, %xmm10
    00000644: 	movdqa	%xmm0, %xmm6
    00000648: 	pmuludq	%xmm10, %xmm6
    0000064d: 	psrlq	$0x20, %xmm0
    00000652: 	psrlq	$0x20, %xmm10
    00000658: 	pshufd	$0x8, %xmm4, %xmm2
    0000065d: 	pmuludq	%xmm0, %xmm10
    00000662: 	pshufd	$0x8, %xmm3, %xmm3
    00000667: 	movdqa	0x38(%rsp), %xmm0
    0000066d: 	shufps	$0xdd, 0x18(%rsp), %xmm0
    00000673: 	punpckldq	%xmm3, %xmm2
    00000677: 	pshufd	$0x8, %xmm6, %xmm3
    0000067c: 	pshufd	$0x8, %xmm10, %xmm10
    00000682: 	punpckldq	%xmm10, %xmm3
    00000687: 	paddd	%xmm2, %xmm3
    0000068b: 	movdqa	0x8(%rsp), %xmm2
    00000691: 	shufps	$0xdd, -0x18(%rsp), %xmm2
    00000697: 	shufps	$0x88, %xmm2, %xmm0
    0000069b: 	movdqa	%xmm12, %xmm2
    000006a0: 	shufps	$0xdd, %xmm15, %xmm12
    000006a5: 	shufps	$0x88, %xmm15, %xmm2
    000006aa: 	paddd	%xmm2, %xmm12
    000006af: 	movdqa	%xmm0, %xmm2
    000006b3: 	pmuludq	%xmm12, %xmm2
    000006b8: 	psrlq	$0x20, %xmm0
    000006bd: 	psrlq	$0x20, %xmm12
    000006c3: 	pmuludq	%xmm12, %xmm0
    000006c8: 	pshufd	$0x8, %xmm2, %xmm2
    000006cd: 	pshufd	$0x8, %xmm0, %xmm0
    000006d2: 	punpckldq	%xmm0, %xmm2
    000006d6: 	movdqa	-0x28(%rsp), %xmm0
    000006dc: 	shufps	$0xdd, -0x48(%rsp), %xmm0
    000006e2: 	paddd	%xmm2, %xmm3
    000006e6: 	paddd	%xmm1, %xmm3
    000006ea: 	movdqa	-0x58(%rsp), %xmm1
    000006f0: 	shufps	$0xdd, -0x78(%rsp), %xmm1
    000006f6: 	shufps	$0x88, %xmm1, %xmm0
    000006fa: 	movdqa	%xmm5, %xmm1
    000006fe: 	shufps	$0xdd, %xmm13, %xmm5
    00000703: 	shufps	$0x88, %xmm13, %xmm1
    00000708: 	paddd	%xmm1, %xmm5
    0000070c: 	movdqa	%xmm0, %xmm1
    00000710: 	pmuludq	%xmm5, %xmm1
    00000714: 	psrlq	$0x20, %xmm0
    00000719: 	psrlq	$0x20, %xmm5
    0000071e: 	pmuludq	%xmm5, %xmm0
    00000722: 	pshufd	$0x8, %xmm1, %xmm1
    00000727: 	pshufd	$0x8, %xmm0, %xmm0
    0000072c: 	punpckldq	%xmm0, %xmm1
    00000730: 	movdqa	0x58(%rsp), %xmm0
    00000736: 	paddd	%xmm1, %xmm0
    0000073a: 	paddd	%xmm0, %xmm3
    0000073e: 	movaps	%xmm3, 0x58(%rsp)
    00000743: 	cmpq	%rcx, %rax
    00000746: 	jne	.Ltmp537 # Offset: 1862
    0000074c: 	movdqa	%xmm3, %xmm0
    00000750: 	shlq	$0x6, %rsi
    00000754: 	psrldq	$0x8, %xmm0
    00000759: 	paddd	%xmm3, %xmm0
    0000075d: 	movdqa	%xmm0, %xmm1
    00000761: 	psrldq	$0x4, %xmm1
    00000766: 	paddd	%xmm1, %xmm0
    0000076a: 	movd	%xmm0, %r8d
.Ltmp543:
    0000076f: 	leaq	(,%rsi,4), %rdx
    00000777: 	leaq	(%r10,%rdx), %rcx
    0000077b: 	addq	%r11, %rdx
    0000077e: 	nop # Size: 2
.Ltmp538:
    00000780: 	movl	0x4(%rdx), %eax
    00000783: 	movl	(%rdx), %ebp
    00000785: 	addq	$0x10, %rsi
    00000789: 	addq	$0x40, %rcx
    0000078d: 	addl	0x24(%rdx), %eax
    00000790: 	addl	0x20(%rdx), %ebp
    00000793: 	addq	$0x40, %rdx
    00000797: 	imull	-0x40(%rcx), %ebp
    0000079b: 	imull	-0x3c(%rcx), %eax
    0000079f: 	addl	%ebp, %eax
    000007a1: 	movl	-0x38(%rdx), %ebp
    000007a4: 	addl	-0x18(%rdx), %ebp
    000007a7: 	imull	-0x38(%rcx), %ebp
    000007ab: 	addl	%ebp, %eax
    000007ad: 	movl	-0x34(%rdx), %ebp
    000007b0: 	addl	-0x14(%rdx), %ebp
    000007b3: 	imull	-0x34(%rcx), %ebp
    000007b7: 	addl	%ebp, %eax
    000007b9: 	movl	-0x30(%rdx), %ebp
    000007bc: 	addl	-0x10(%rdx), %ebp
    000007bf: 	imull	-0x30(%rcx), %ebp
    000007c3: 	addl	%ebp, %eax
    000007c5: 	movl	-0x2c(%rdx), %ebp
    000007c8: 	addl	-0xc(%rdx), %ebp
    000007cb: 	imull	-0x2c(%rcx), %ebp
    000007cf: 	addl	%ebp, %eax
    000007d1: 	movl	-0x28(%rdx), %ebp
    000007d4: 	addl	-0x8(%rdx), %ebp
    000007d7: 	imull	-0x28(%rcx), %ebp
    000007db: 	addl	%ebp, %eax
    000007dd: 	movl	-0x24(%rdx), %ebp
    000007e0: 	addl	-0x4(%rdx), %ebp
    000007e3: 	imull	-0x24(%rcx), %ebp
    000007e7: 	addl	%ebp, %eax
    000007e9: 	addl	%eax, %r8d
    000007ec: 	cmpq	%rsi, %rdi
    000007ef: 	ja	.Ltmp538 # Offset: 2031
    000007f1: 	andq	$-0x10, %rbx
    000007f5: 	leaq	0x10(%rbx), %rdi
    000007f9: 	cmpq	%rdi, %r9
    000007fc: 	jbe	.Ltmp539 # Offset: 2044
    00000802: 	addq	$0x11, %rbx
    00000806: 	movq	%r9, %rax
    00000809: 	movl	$0x1, %esi
    0000080e: 	subq	%rdi, %rax
    00000811: 	cmpq	%rbx, %r9
    00000814: 	cmovaeq	%rax, %rsi
    00000818: 	subq	$0x1, %rax
    0000081c: 	cmpq	$0x2, %rax
    00000820: 	jbe	.Ltmp540 # Offset: 2080
    00000826: 	cmpq	%rbx, %r9
    00000829: 	jb	.Ltmp540 # Offset: 2089
    0000082f: 	leaq	(,%rdi,4), %rax
    00000837: 	movq	%rsi, %rdx
    0000083a: 	leaq	(%r10,%rax), %rcx
    0000083e: 	addq	%r11, %rax
    00000841: 	shrq	$0x2, %rdx
    00000845: 	movdqu	(%rcx), %xmm1
    00000849: 	movdqu	(%rax), %xmm2
    0000084d: 	addq	$0x10, %rcx
    00000851: 	addq	$0x10, %rax
    00000855: 	movdqu	-0x10(%rcx), %xmm0
    0000085a: 	movdqu	-0x10(%rax), %xmm5
    0000085f: 	psrlq	$0x20, %xmm1
    00000864: 	psrlq	$0x20, %xmm2
    00000869: 	pmuludq	%xmm5, %xmm0
    0000086d: 	pmuludq	%xmm2, %xmm1
    00000871: 	pshufd	$0x8, %xmm0, %xmm0
    00000876: 	pshufd	$0x8, %xmm1, %xmm1
    0000087b: 	punpckldq	%xmm1, %xmm0
    0000087f: 	cmpq	$0x1, %rdx
    00000883: 	je	.Ltmp541 # Offset: 2179
.Ltmp542:
    00000889: 	movdqu	(%rcx), %xmm1
    0000088d: 	movdqu	(%rax), %xmm3
    00000891: 	movdqu	(%rcx), %xmm2
    00000895: 	movdqu	(%rax), %xmm5
    00000899: 	psrlq	$0x20, %xmm1
    0000089e: 	psrlq	$0x20, %xmm3
    000008a3: 	pmuludq	%xmm5, %xmm2
    000008a7: 	pmuludq	%xmm3, %xmm1
    000008ab: 	pshufd	$0x8, %xmm2, %xmm2
    000008b0: 	pshufd	$0x8, %xmm1, %xmm1
    000008b5: 	punpckldq	%xmm1, %xmm2
    000008b9: 	paddd	%xmm2, %xmm0
    000008bd: 	cmpq	$0x2, %rdx
    000008c1: 	je	.Ltmp541 # Offset: 2241
    000008c3: 	movdqu	0x10(%rcx), %xmm1
    000008c8: 	movdqu	0x10(%rax), %xmm3
    000008cd: 	movdqu	0x10(%rcx), %xmm2
    000008d2: 	movdqu	0x10(%rax), %xmm5
    000008d7: 	psrlq	$0x20, %xmm1
    000008dc: 	psrlq	$0x20, %xmm3
    000008e1: 	pmuludq	%xmm5, %xmm2
    000008e5: 	pmuludq	%xmm3, %xmm1
    000008e9: 	pshufd	$0x8, %xmm2, %xmm2
    000008ee: 	pshufd	$0x8, %xmm1, %xmm1
    000008f3: 	punpckldq	%xmm1, %xmm2
    000008f7: 	paddd	%xmm2, %xmm0
    000008fb: 	cmpq	$0x3, %rdx
    000008ff: 	je	.Ltmp541 # Offset: 2303
    00000901: 	movdqu	0x20(%rax), %xmm1
    00000906: 	movdqu	0x20(%rcx), %xmm3
    0000090b: 	movdqa	%xmm1, %xmm2
    0000090f: 	psrlq	$0x20, %xmm1
    00000914: 	pmuludq	%xmm3, %xmm2
    00000918: 	psrlq	$0x20, %xmm3
    0000091d: 	pmuludq	%xmm3, %xmm1
    00000921: 	pshufd	$0x8, %xmm2, %xmm2
    00000926: 	pshufd	$0x8, %xmm1, %xmm1
    0000092b: 	punpckldq	%xmm1, %xmm2
    0000092f: 	paddd	%xmm2, %xmm0
.Ltmp541:
    00000933: 	movdqa	%xmm0, %xmm1
    00000937: 	shlq	$0x2, %rdx
    0000093b: 	psrldq	$0x8, %xmm1
    00000940: 	addq	%rdx, %rdi
    00000943: 	paddd	%xmm1, %xmm0
    00000947: 	movdqa	%xmm0, %xmm1
    0000094b: 	psrldq	$0x4, %xmm1
    00000950: 	paddd	%xmm1, %xmm0
    00000954: 	movd	%xmm0, %eax
    00000958: 	addl	%eax, %r8d
    0000095b: 	cmpq	%rdx, %rsi
    0000095e: 	je	.Ltmp539 # Offset: 2398
.Ltmp540:
    00000960: 	movl	(%r11,%rdi,4), %edx
    00000964: 	imull	(%r10,%rdi,4), %edx
    00000969: 	leaq	(,%rdi,4), %rax
    00000971: 	addl	%edx, %r8d
    00000974: 	leaq	0x1(%rdi), %rdx
    00000978: 	cmpq	%rdx, %r9
    0000097b: 	jbe	.Ltmp539 # Offset: 2427
    0000097d: 	movl	0x4(%r10,%rax), %edx
    00000982: 	imull	0x4(%r11,%rax), %edx
    00000988: 	addq	$0x2, %rdi
    0000098c: 	addl	%edx, %r8d
    0000098f: 	cmpq	%r9, %rdi
    00000992: 	jae	.Ltmp539 # Offset: 2450
    00000994: 	movl	0x8(%r11,%rax), %edx
    00000999: 	imull	0x8(%r10,%rax), %edx
    0000099f: 	addl	%edx, %r8d
.Ltmp539:
    000009a2: 	addq	$0xd0, %rsp
    000009a9: 	movl	%r8d, %eax
    000009ac: 	popq	%rbx
    000009ad: 	popq	%rbp
    000009ae: 	retq # Offset: 2478
    000009af: 	nop # Size: 1
.Ltmp535:
    000009b0: 	movdqu	(%rsi), %xmm1
    000009b4: 	movdqu	(%r10), %xmm0
    000009b9: 	leaq	0x10(%rsi), %rax
    000009bd: 	xorl	%r8d, %r8d
    000009c0: 	movdqu	(%rsi), %xmm2
    000009c4: 	movdqu	(%r10), %xmm5
    000009c9: 	leaq	0x10(%r10), %rcx
    000009cd: 	movl	$0x3, %edx
    000009d2: 	psrlq	$0x20, %xmm0
    000009d7: 	psrlq	$0x20, %xmm1
    000009dc: 	movl	$0xf, %esi
    000009e1: 	pmuludq	%xmm0, %xmm1
    000009e5: 	pmuludq	%xmm5, %xmm2
    000009e9: 	pshufd	$0x8, %xmm1, %xmm1
    000009ee: 	pshufd	$0x8, %xmm2, %xmm0
    000009f3: 	punpckldq	%xmm1, %xmm0
    000009f7: 	jmp	.Ltmp542 # Offset: 2551
.Ltmp536:
    000009fc: 	xorl	%r8d, %r8d
    000009ff: 	xorl	%esi, %esi
    00000a01: 	jmp	.Ltmp543 # Offset: 2561
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product7IPKjjET0_T_S3_m" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x19b50
  Size        : 0x209
  MaxSize     : 0x210
  Offset      : 0x19b50
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	cmpq	$0x1, %rdx
    00000008: 	je	.Ltmp544 # Offset: 8
    0000000e: 	leaq	-0x2(%rdx), %r10
    00000012: 	movq	%rdx, %r9
    00000015: 	movq	%r10, %rcx
    00000018: 	shrq	%rcx
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	$0x1, %r10
    00000023: 	jbe	.Ltmp545 # Offset: 35
    00000029: 	movq	%rcx, %rdx
    0000002c: 	xorl	%eax, %eax
    0000002e: 	pxor	%xmm3, %xmm3
    00000032: 	shrq	%rdx
    00000035: 	shlq	$0x4, %rdx
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp546:
    00000040: 	movdqu	(%rdi,%rax), %xmm0
    00000045: 	movdqu	(%rsi,%rax), %xmm2
    0000004a: 	movdqu	(%rdi,%rax), %xmm1
    0000004f: 	movdqu	(%rsi,%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	psrlq	$0x20, %xmm0
    0000005d: 	psrlq	$0x20, %xmm2
    00000062: 	pmuludq	%xmm4, %xmm1
    00000066: 	pmuludq	%xmm2, %xmm0
    0000006a: 	pshufd	$0x8, %xmm1, %xmm1
    0000006f: 	pshufd	$0x8, %xmm0, %xmm0
    00000074: 	punpckldq	%xmm0, %xmm1
    00000078: 	paddd	%xmm1, %xmm3
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp546 # Offset: 127
    00000081: 	movdqa	%xmm3, %xmm0
    00000085: 	movd	%xmm3, %r8d
    0000008a: 	movq	%rcx, %r11
    0000008d: 	punpckhdq	%xmm3, %xmm0
    00000091: 	andq	$-0x2, %r11
    00000095: 	movd	%xmm0, %eax
    00000099: 	pshufd	$0x55, %xmm3, %xmm0
    0000009e: 	pshufd	$0xff, %xmm3, %xmm3
    000000a3: 	movd	%xmm3, %edx
    000000a7: 	addl	%eax, %r8d
    000000aa: 	movd	%xmm0, %eax
    000000ae: 	addl	%edx, %eax
    000000b0: 	leaq	(%r11,%r11), %rdx
    000000b4: 	cmpq	%r11, %rcx
    000000b7: 	je	.Ltmp547 # Offset: 183
.Ltmp552:
    000000b9: 	movl	(%rsi,%rdx,4), %ecx
    000000bc: 	imull	(%rdi,%rdx,4), %ecx
    000000c0: 	addl	%ecx, %r8d
    000000c3: 	movl	0x4(%rdi,%rdx,4), %ecx
    000000c7: 	imull	0x4(%rsi,%rdx,4), %ecx
    000000cc: 	addl	%ecx, %eax
.Ltmp547:
    000000ce: 	andq	$-0x2, %r10
    000000d2: 	leaq	0x2(%r10), %rcx
    000000d6: 	cmpq	%rcx, %r9
    000000d9: 	jbe	.Ltmp548 # Offset: 217
    000000df: 	addq	$0x3, %r10
    000000e3: 	movq	%r9, %rdx
    000000e6: 	pushq	%rbp
    000000e7: 	movl	$0x1, %ebp
    000000ec: 	subq	%rcx, %rdx
    000000ef: 	cmpq	%r10, %r9
    000000f2: 	pushq	%rbx
    000000f3: 	cmovaeq	%rdx, %rbp
    000000f7: 	subq	$0x1, %rdx
    000000fb: 	cmpq	$0x2, %rdx
    000000ff: 	jbe	.Ltmp549 # Offset: 255
    00000105: 	cmpq	%r10, %r9
    00000108: 	jb	.Ltmp549 # Offset: 264
    0000010e: 	movq	%rbp, %r11
    00000111: 	leaq	(,%rcx,4), %r10
    00000119: 	pxor	%xmm3, %xmm3
    0000011d: 	xorl	%edx, %edx
    0000011f: 	shrq	$0x2, %r11
    00000123: 	leaq	(%rdi,%r10), %rbx
    00000127: 	addq	%rsi, %r10
    0000012a: 	shlq	$0x4, %r11
    0000012e: 	nop # Size: 2
.Ltmp550:
    00000130: 	movdqu	(%r10,%rdx), %xmm0
    00000136: 	movdqu	(%rbx,%rdx), %xmm2
    0000013b: 	movdqu	(%r10,%rdx), %xmm1
    00000141: 	movdqu	(%rbx,%rdx), %xmm5
    00000146: 	addq	$0x10, %rdx
    0000014a: 	psrlq	$0x20, %xmm0
    0000014f: 	psrlq	$0x20, %xmm2
    00000154: 	pmuludq	%xmm5, %xmm1
    00000158: 	pmuludq	%xmm2, %xmm0
    0000015c: 	pshufd	$0x8, %xmm1, %xmm1
    00000161: 	pshufd	$0x8, %xmm0, %xmm0
    00000166: 	punpckldq	%xmm0, %xmm1
    0000016a: 	paddd	%xmm1, %xmm3
    0000016e: 	cmpq	%rdx, %r11
    00000171: 	jne	.Ltmp550 # Offset: 369
    00000173: 	movdqa	%xmm3, %xmm0
    00000177: 	psrldq	$0x8, %xmm0
    0000017c: 	paddd	%xmm0, %xmm3
    00000180: 	movdqa	%xmm3, %xmm0
    00000184: 	psrldq	$0x4, %xmm0
    00000189: 	paddd	%xmm0, %xmm3
    0000018d: 	movd	%xmm3, %edx
    00000191: 	addl	%edx, %r8d
    00000194: 	movq	%rbp, %rdx
    00000197: 	andq	$-0x4, %rdx
    0000019b: 	addq	%rdx, %rcx
    0000019e: 	cmpq	%rbp, %rdx
    000001a1: 	je	.Ltmp551 # Offset: 417
.Ltmp549:
    000001a3: 	movl	(%rdi,%rcx,4), %r10d
    000001a7: 	imull	(%rsi,%rcx,4), %r10d
    000001ac: 	leaq	(,%rcx,4), %rdx
    000001b4: 	addl	%r10d, %r8d
    000001b7: 	leaq	0x1(%rcx), %r10
    000001bb: 	cmpq	%r9, %r10
    000001be: 	jae	.Ltmp551 # Offset: 446
    000001c0: 	movl	0x4(%rdi,%rdx), %r10d
    000001c5: 	imull	0x4(%rsi,%rdx), %r10d
    000001cb: 	addq	$0x2, %rcx
    000001cf: 	addl	%r10d, %r8d
    000001d2: 	cmpq	%rcx, %r9
    000001d5: 	jbe	.Ltmp551 # Offset: 469
    000001d7: 	movl	0x8(%rsi,%rdx), %ecx
    000001db: 	imull	0x8(%rdi,%rdx), %ecx
    000001e0: 	addl	%ecx, %r8d
.Ltmp551:
    000001e3: 	addl	%r8d, %eax
    000001e6: 	popq	%rbx
    000001e7: 	popq	%rbp
    000001e8: 	retq # Offset: 488
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp544:
    000001f0: 	movl	(%rdi), %r8d
    000001f3: 	imull	(%rsi), %r8d
    000001f7: 	xorl	%eax, %eax
.Ltmp548:
    000001f9: 	addl	%r8d, %eax
    000001fc: 	retq # Offset: 508
.Ltmp545:
    000001fd: 	xorl	%eax, %eax
    000001ff: 	xorl	%r8d, %r8d
    00000202: 	xorl	%edx, %edx
    00000204: 	jmp	.Ltmp552 # Offset: 516
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product8IPKjjET0_T_S3_m" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x19d60
  Size        : 0x1d1
  MaxSize     : 0x1e0
  Offset      : 0x19d60
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsi, %rcx
    00000008: 	movq	%rdx, %r8
    0000000b: 	pushq	%rbx
    0000000c: 	cmpq	$0x3, %rdx
    00000010: 	je	.Ltmp553 # Offset: 16
    00000016: 	leaq	-0x4(%rdx), %r9
    0000001a: 	xorl	%eax, %eax
    0000001c: 	pxor	%xmm3, %xmm3
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%r9, %rsi
    00000025: 	shrq	$0x2, %rsi
    00000029: 	addq	$0x1, %rsi
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp554:
    00000030: 	movdqu	(%rcx,%rax), %xmm0
    00000035: 	movdqu	(%rdi,%rax), %xmm2
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	movdqu	(%rcx,%rax), %xmm1
    00000043: 	movdqu	(%rdi,%rax), %xmm4
    00000048: 	addq	$0x10, %rax
    0000004c: 	psrlq	$0x20, %xmm0
    00000051: 	psrlq	$0x20, %xmm2
    00000056: 	pmuludq	%xmm4, %xmm1
    0000005a: 	pmuludq	%xmm2, %xmm0
    0000005e: 	pshufd	$0x8, %xmm1, %xmm1
    00000063: 	pshufd	$0x8, %xmm0, %xmm0
    00000068: 	punpckldq	%xmm0, %xmm1
    0000006c: 	paddd	%xmm1, %xmm3
    00000070: 	cmpq	%rsi, %rdx
    00000073: 	jb	.Ltmp554 # Offset: 115
    00000075: 	movdqa	%xmm3, %xmm0
    00000079: 	movd	%xmm3, %eax
    0000007d: 	andq	$-0x4, %r9
    00000081: 	punpckhdq	%xmm3, %xmm0
    00000085: 	leaq	0x4(%r9), %rsi
    00000089: 	movd	%xmm0, %r10d
    0000008e: 	pshufd	$0x55, %xmm3, %xmm0
    00000093: 	pshufd	$0xff, %xmm3, %xmm3
    00000098: 	movd	%xmm0, %edx
    0000009c: 	addl	%edx, %r10d
    0000009f: 	movd	%xmm3, %edx
    000000a3: 	addl	%edx, %r10d
    000000a6: 	cmpq	%r8, %rsi
    000000a9: 	jae	.Ltmp555 # Offset: 169
    000000af: 	addq	$0x5, %r9
    000000b3: 	movq	%r8, %rdx
    000000b6: 	movl	$0x1, %ebp
    000000bb: 	subq	%rsi, %rdx
    000000be: 	cmpq	%r9, %r8
    000000c1: 	cmovaeq	%rdx, %rbp
    000000c5: 	subq	$0x1, %rdx
    000000c9: 	cmpq	$0x2, %rdx
    000000cd: 	jbe	.Ltmp556 # Offset: 205
    000000d3: 	cmpq	%r9, %r8
    000000d6: 	jb	.Ltmp556 # Offset: 214
    000000dc: 	movq	%rbp, %r11
    000000df: 	leaq	(,%rsi,4), %r9
    000000e7: 	pxor	%xmm3, %xmm3
    000000eb: 	xorl	%edx, %edx
    000000ed: 	shrq	$0x2, %r11
    000000f1: 	leaq	(%rdi,%r9), %rbx
    000000f5: 	addq	%rcx, %r9
    000000f8: 	shlq	$0x4, %r11
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp557:
    00000100: 	movdqu	(%r9,%rdx), %xmm0
    00000106: 	movdqu	(%rbx,%rdx), %xmm2
    0000010b: 	movdqu	(%r9,%rdx), %xmm1
    00000111: 	movdqu	(%rbx,%rdx), %xmm5
    00000116: 	addq	$0x10, %rdx
    0000011a: 	psrlq	$0x20, %xmm0
    0000011f: 	psrlq	$0x20, %xmm2
    00000124: 	pmuludq	%xmm5, %xmm1
    00000128: 	pmuludq	%xmm2, %xmm0
    0000012c: 	pshufd	$0x8, %xmm1, %xmm1
    00000131: 	pshufd	$0x8, %xmm0, %xmm0
    00000136: 	punpckldq	%xmm0, %xmm1
    0000013a: 	paddd	%xmm1, %xmm3
    0000013e: 	cmpq	%rdx, %r11
    00000141: 	jne	.Ltmp557 # Offset: 321
    00000143: 	movdqa	%xmm3, %xmm0
    00000147: 	psrldq	$0x8, %xmm0
    0000014c: 	paddd	%xmm0, %xmm3
    00000150: 	movdqa	%xmm3, %xmm0
    00000154: 	psrldq	$0x4, %xmm0
    00000159: 	paddd	%xmm0, %xmm3
    0000015d: 	movd	%xmm3, %edx
    00000161: 	addl	%edx, %eax
    00000163: 	movq	%rbp, %rdx
    00000166: 	andq	$-0x4, %rdx
    0000016a: 	addq	%rdx, %rsi
    0000016d: 	cmpq	%rbp, %rdx
    00000170: 	je	.Ltmp555 # Offset: 368
.Ltmp556:
    00000172: 	movl	(%rcx,%rsi,4), %r9d
    00000176: 	imull	(%rdi,%rsi,4), %r9d
    0000017b: 	leaq	(,%rsi,4), %rdx
    00000183: 	addq	$0x1, %rsi
    00000187: 	addl	%r9d, %eax
    0000018a: 	cmpq	%r8, %rsi
    0000018d: 	jae	.Ltmp555 # Offset: 397
.Ltmp558:
    0000018f: 	movl	0x4(%rdi,%rdx), %r9d
    00000194: 	imull	0x4(%rcx,%rdx), %r9d
    0000019a: 	addq	$0x1, %rsi
    0000019e: 	addl	%r9d, %eax
    000001a1: 	cmpq	%r8, %rsi
    000001a4: 	jae	.Ltmp555 # Offset: 420
    000001a6: 	movl	0x8(%rcx,%rdx), %ecx
    000001aa: 	imull	0x8(%rdi,%rdx), %ecx
    000001af: 	addl	%ecx, %eax
.Ltmp555:
    000001b1: 	addl	%r10d, %eax
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	retq # Offset: 438
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp553:
    000001c0: 	movl	(%rdi), %eax
    000001c2: 	xorl	%r10d, %r10d
    000001c5: 	imull	(%rsi), %eax
    000001c8: 	xorl	%edx, %edx
    000001ca: 	movl	$0x1, %esi
    000001cf: 	jmp	.Ltmp558 # Offset: 463
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKjjET0_T_S3_m"

Binary Function "_Z14inner_product9IPKjjET0_T_S3_m" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x19f40
  Size        : 0x211
  MaxSize     : 0x220
  Offset      : 0x19f40
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rcx
    00000008: 	movq	%rdx, %r8
    0000000b: 	pushq	%rbx
    0000000c: 	cmpq	$0x7, %rdx
    00000010: 	je	.Ltmp559 # Offset: 16
    00000016: 	leaq	-0x8(%rdx), %r9
    0000001a: 	xorl	%eax, %eax
    0000001c: 	pxor	%xmm4, %xmm4
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%r9, %rdi
    00000025: 	shrq	$0x3, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp560:
    00000030: 	movdqu	0x10(%rsi,%rax), %xmm0
    00000036: 	movdqu	0x10(%rcx,%rax), %xmm2
    0000003c: 	addq	$0x1, %rdx
    00000040: 	movdqu	0x10(%rsi,%rax), %xmm1
    00000046: 	movdqu	0x10(%rcx,%rax), %xmm5
    0000004c: 	psrlq	$0x20, %xmm2
    00000051: 	psrlq	$0x20, %xmm0
    00000056: 	movdqu	(%rcx,%rax), %xmm3
    0000005b: 	movdqu	(%rcx,%rax), %xmm6
    00000060: 	pmuludq	%xmm2, %xmm0
    00000064: 	pmuludq	%xmm5, %xmm1
    00000068: 	movdqu	(%rsi,%rax), %xmm2
    0000006d: 	psrlq	$0x20, %xmm3
    00000072: 	pmuludq	%xmm6, %xmm2
    00000076: 	pshufd	$0x8, %xmm0, %xmm0
    0000007b: 	pshufd	$0x8, %xmm1, %xmm1
    00000080: 	punpckldq	%xmm0, %xmm1
    00000084: 	movdqu	(%rsi,%rax), %xmm0
    00000089: 	addq	$0x20, %rax
    0000008d: 	pshufd	$0x8, %xmm2, %xmm2
    00000092: 	psrlq	$0x20, %xmm0
    00000097: 	pmuludq	%xmm3, %xmm0
    0000009b: 	pshufd	$0x8, %xmm0, %xmm0
    000000a0: 	punpckldq	%xmm0, %xmm2
    000000a4: 	paddd	%xmm2, %xmm1
    000000a8: 	paddd	%xmm1, %xmm4
    000000ac: 	cmpq	%rdx, %rdi
    000000af: 	ja	.Ltmp560 # Offset: 175
    000000b5: 	movdqa	%xmm4, %xmm0
    000000b9: 	movd	%xmm4, %eax
    000000bd: 	andq	$-0x8, %r9
    000000c1: 	punpckhdq	%xmm4, %xmm0
    000000c5: 	leaq	0x8(%r9), %rdi
    000000c9: 	movd	%xmm0, %r10d
    000000ce: 	pshufd	$0x55, %xmm4, %xmm0
    000000d3: 	pshufd	$0xff, %xmm4, %xmm4
    000000d8: 	movd	%xmm0, %edx
    000000dc: 	addl	%edx, %r10d
    000000df: 	movd	%xmm4, %edx
    000000e3: 	addl	%edx, %r10d
    000000e6: 	cmpq	%r8, %rdi
    000000e9: 	jae	.Ltmp561 # Offset: 233
    000000ef: 	addq	$0x9, %r9
    000000f3: 	movq	%r8, %rdx
    000000f6: 	movl	$0x1, %ebp
    000000fb: 	subq	%rdi, %rdx
    000000fe: 	cmpq	%r9, %r8
    00000101: 	cmovaeq	%rdx, %rbp
    00000105: 	subq	$0x1, %rdx
    00000109: 	cmpq	$0x2, %rdx
    0000010d: 	jbe	.Ltmp562 # Offset: 269
    00000113: 	cmpq	%r9, %r8
    00000116: 	jb	.Ltmp562 # Offset: 278
.Ltmp564:
    0000011c: 	movq	%rbp, %r11
    0000011f: 	leaq	(,%rdi,4), %r9
    00000127: 	pxor	%xmm3, %xmm3
    0000012b: 	xorl	%edx, %edx
    0000012d: 	shrq	$0x2, %r11
    00000131: 	leaq	(%rcx,%r9), %rbx
    00000135: 	addq	%rsi, %r9
    00000138: 	shlq	$0x4, %r11
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp563:
    00000140: 	movdqu	(%r9,%rdx), %xmm0
    00000146: 	movdqu	(%rbx,%rdx), %xmm2
    0000014b: 	movdqu	(%r9,%rdx), %xmm1
    00000151: 	movdqu	(%rbx,%rdx), %xmm7
    00000156: 	addq	$0x10, %rdx
    0000015a: 	psrlq	$0x20, %xmm0
    0000015f: 	psrlq	$0x20, %xmm2
    00000164: 	pmuludq	%xmm7, %xmm1
    00000168: 	pmuludq	%xmm2, %xmm0
    0000016c: 	pshufd	$0x8, %xmm1, %xmm1
    00000171: 	pshufd	$0x8, %xmm0, %xmm0
    00000176: 	punpckldq	%xmm0, %xmm1
    0000017a: 	paddd	%xmm1, %xmm3
    0000017e: 	cmpq	%rdx, %r11
    00000181: 	jne	.Ltmp563 # Offset: 385
    00000183: 	movdqa	%xmm3, %xmm0
    00000187: 	psrldq	$0x8, %xmm0
    0000018c: 	paddd	%xmm0, %xmm3
    00000190: 	movdqa	%xmm3, %xmm0
    00000194: 	psrldq	$0x4, %xmm0
    00000199: 	paddd	%xmm0, %xmm3
    0000019d: 	movd	%xmm3, %edx
    000001a1: 	addl	%edx, %eax
    000001a3: 	movq	%rbp, %rdx
    000001a6: 	andq	$-0x4, %rdx
    000001aa: 	addq	%rdx, %rdi
    000001ad: 	cmpq	%rdx, %rbp
    000001b0: 	je	.Ltmp561 # Offset: 432
.Ltmp562:
    000001b2: 	movl	(%rsi,%rdi,4), %r9d
    000001b6: 	imull	(%rcx,%rdi,4), %r9d
    000001bb: 	leaq	(,%rdi,4), %rdx
    000001c3: 	addl	%r9d, %eax
    000001c6: 	leaq	0x1(%rdi), %r9
    000001ca: 	cmpq	%r8, %r9
    000001cd: 	jae	.Ltmp561 # Offset: 461
    000001cf: 	movl	0x4(%rcx,%rdx), %r9d
    000001d4: 	imull	0x4(%rsi,%rdx), %r9d
    000001da: 	addq	$0x2, %rdi
    000001de: 	addl	%r9d, %eax
    000001e1: 	cmpq	%r8, %rdi
    000001e4: 	jae	.Ltmp561 # Offset: 484
    000001e6: 	movl	0x8(%rsi,%rdx), %esi
    000001ea: 	imull	0x8(%rcx,%rdx), %esi
    000001ef: 	addl	%esi, %eax
.Ltmp561:
    000001f1: 	addl	%r10d, %eax
    000001f4: 	popq	%rbx
    000001f5: 	popq	%rbp
    000001f6: 	retq # Offset: 502
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp559:
    00000200: 	movl	$0x7, %ebp
    00000205: 	xorl	%r10d, %r10d
    00000208: 	xorl	%edi, %edi
    0000020a: 	xorl	%eax, %eax
    0000020c: 	jmp	.Ltmp564 # Offset: 524
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKjjET0_T_S3_m"

Binary Function "_Z15inner_product10IPKjjET0_T_S3_m" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x1a160
  Size        : 0x2d3
  MaxSize     : 0x2e0
  Offset      : 0x1a160
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKjjET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	cmpq	$0xf, %rdx
    0000000f: 	je	.Ltmp565 # Offset: 15
    00000015: 	leaq	-0x10(%rdx), %r8
    00000019: 	movq	%r8, %r12
    0000001c: 	shrq	$0x4, %r12
    00000020: 	cmpq	$0xf, %r8
    00000024: 	jbe	.Ltmp566 # Offset: 36
    0000002a: 	movq	%rsi, %rax
    0000002d: 	movq	%rdi, %rdx
    00000030: 	pxor	%xmm3, %xmm3
    00000034: 	xorl	%ecx, %ecx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp567:
    00000040: 	movdqu	0x30(%rax), %xmm0
    00000045: 	movdqu	0x10(%rax), %xmm5
    0000004a: 	addq	$0x1, %rcx
    0000004e: 	addq	$0x40, %rax
    00000052: 	movdqu	0x10(%rdx), %xmm1
    00000057: 	movdqu	0x10(%rdx), %xmm2
    0000005c: 	addq	$0x40, %rdx
    00000060: 	paddd	%xmm5, %xmm0
    00000064: 	movdqu	-0x40(%rax), %xmm6
    00000069: 	movdqu	-0x40(%rdx), %xmm4
    0000006e: 	pmuludq	%xmm0, %xmm1
    00000072: 	psrlq	$0x20, %xmm2
    00000077: 	psrlq	$0x20, %xmm0
    0000007c: 	psrlq	$0x20, %xmm4
    00000081: 	pmuludq	%xmm2, %xmm0
    00000085: 	movdqu	-0x40(%rdx), %xmm2
    0000008a: 	pshufd	$0x8, %xmm1, %xmm1
    0000008f: 	pshufd	$0x8, %xmm0, %xmm0
    00000094: 	punpckldq	%xmm0, %xmm1
    00000098: 	movdqu	-0x20(%rax), %xmm0
    0000009d: 	paddd	%xmm6, %xmm0
    000000a1: 	pmuludq	%xmm0, %xmm2
    000000a5: 	psrlq	$0x20, %xmm0
    000000aa: 	pmuludq	%xmm4, %xmm0
    000000ae: 	pshufd	$0x8, %xmm2, %xmm2
    000000b3: 	pshufd	$0x8, %xmm0, %xmm0
    000000b8: 	punpckldq	%xmm0, %xmm2
    000000bc: 	paddd	%xmm2, %xmm1
    000000c0: 	paddd	%xmm1, %xmm3
    000000c4: 	cmpq	%rcx, %r12
    000000c7: 	ja	.Ltmp567 # Offset: 199
    000000cd: 	pshufd	$0x55, %xmm3, %xmm0
    000000d2: 	movd	%xmm3, %r9d
    000000d7: 	shlq	$0x4, %r12
    000000db: 	movd	%xmm0, %ebx
    000000df: 	movdqa	%xmm3, %xmm0
    000000e3: 	punpckhdq	%xmm3, %xmm0
    000000e7: 	pshufd	$0xff, %xmm3, %xmm3
    000000ec: 	movd	%xmm0, %ebp
    000000f0: 	movd	%xmm3, %r11d
.Ltmp572:
    000000f5: 	leaq	(,%r12,4), %rdx
    000000fd: 	movl	(%rsi,%r12,4), %ecx
    00000101: 	addl	%ebp, %r11d
    00000104: 	andq	$-0x10, %r8
    00000108: 	movl	0x10(%rsi,%rdx), %eax
    0000010c: 	addl	0x20(%rsi,%rdx), %ecx
    00000110: 	addl	%ebx, %r11d
    00000113: 	imull	(%rdi,%r12,4), %ecx
    00000118: 	addl	0x30(%rsi,%rdx), %eax
    0000011c: 	imull	0x10(%rdi,%rdx), %eax
    00000121: 	addl	%ecx, %eax
    00000123: 	movl	0x4(%rsi,%rdx), %ecx
    00000127: 	addl	0x24(%rsi,%rdx), %ecx
    0000012b: 	imull	0x4(%rdi,%rdx), %ecx
    00000130: 	addl	%r9d, %eax
    00000133: 	leaq	0x10(%r8), %r9
    00000137: 	addl	%r11d, %ecx
    0000013a: 	movl	0x8(%rsi,%rdx), %r11d
    0000013f: 	addl	0x28(%rsi,%rdx), %r11d
    00000144: 	imull	0x8(%rdi,%rdx), %r11d
    0000014a: 	addl	%r11d, %ecx
    0000014d: 	movl	0xc(%rsi,%rdx), %r11d
    00000152: 	addl	0x2c(%rsi,%rdx), %r11d
    00000157: 	imull	0xc(%rdi,%rdx), %r11d
    0000015d: 	addl	%r11d, %ecx
    00000160: 	movl	0x14(%rsi,%rdx), %r11d
    00000165: 	addl	0x34(%rsi,%rdx), %r11d
    0000016a: 	imull	0x14(%rdi,%rdx), %r11d
    00000170: 	addl	%r11d, %ecx
    00000173: 	movl	0x18(%rsi,%rdx), %r11d
    00000178: 	addl	0x38(%rsi,%rdx), %r11d
    0000017d: 	imull	0x18(%rdi,%rdx), %r11d
    00000183: 	addl	%r11d, %ecx
    00000186: 	movl	0x1c(%rsi,%rdx), %r11d
    0000018b: 	addl	0x3c(%rsi,%rdx), %r11d
    00000190: 	imull	0x1c(%rdi,%rdx), %r11d
    00000196: 	addl	%r11d, %ecx
    00000199: 	cmpq	%r10, %r9
    0000019c: 	jae	.Ltmp568 # Offset: 412
    000001a2: 	addq	$0x11, %r8
    000001a6: 	movq	%r10, %rdx
    000001a9: 	movl	$0x1, %ebp
    000001ae: 	subq	%r9, %rdx
    000001b1: 	cmpq	%r8, %r10
    000001b4: 	cmovaeq	%rdx, %rbp
    000001b8: 	subq	$0x1, %rdx
    000001bc: 	cmpq	$0x2, %rdx
    000001c0: 	jbe	.Ltmp569 # Offset: 448
    000001c6: 	cmpq	%r8, %r10
    000001c9: 	jb	.Ltmp569 # Offset: 457
.Ltmp571:
    000001cf: 	movq	%rbp, %r11
    000001d2: 	leaq	(,%r9,4), %r8
    000001da: 	pxor	%xmm3, %xmm3
    000001de: 	xorl	%edx, %edx
    000001e0: 	shrq	$0x2, %r11
    000001e4: 	leaq	(%rdi,%r8), %rbx
    000001e8: 	addq	%rsi, %r8
    000001eb: 	shlq	$0x4, %r11
    000001ef: 	nop # Size: 1
.Ltmp570:
    000001f0: 	movdqu	(%r8,%rdx), %xmm0
    000001f6: 	movdqu	(%rbx,%rdx), %xmm2
    000001fb: 	movdqu	(%r8,%rdx), %xmm1
    00000201: 	movdqu	(%rbx,%rdx), %xmm7
    00000206: 	addq	$0x10, %rdx
    0000020a: 	psrlq	$0x20, %xmm0
    0000020f: 	psrlq	$0x20, %xmm2
    00000214: 	pmuludq	%xmm7, %xmm1
    00000218: 	pmuludq	%xmm2, %xmm0
    0000021c: 	pshufd	$0x8, %xmm1, %xmm1
    00000221: 	pshufd	$0x8, %xmm0, %xmm0
    00000226: 	punpckldq	%xmm0, %xmm1
    0000022a: 	paddd	%xmm1, %xmm3
    0000022e: 	cmpq	%r11, %rdx
    00000231: 	jne	.Ltmp570 # Offset: 561
    00000233: 	movdqa	%xmm3, %xmm0
    00000237: 	psrldq	$0x8, %xmm0
    0000023c: 	paddd	%xmm0, %xmm3
    00000240: 	movdqa	%xmm3, %xmm0
    00000244: 	psrldq	$0x4, %xmm0
    00000249: 	paddd	%xmm0, %xmm3
    0000024d: 	movd	%xmm3, %edx
    00000251: 	addl	%edx, %eax
    00000253: 	movq	%rbp, %rdx
    00000256: 	andq	$-0x4, %rdx
    0000025a: 	addq	%rdx, %r9
    0000025d: 	cmpq	%rbp, %rdx
    00000260: 	je	.Ltmp568 # Offset: 608
.Ltmp569:
    00000262: 	movl	(%rsi,%r9,4), %r8d
    00000266: 	imull	(%rdi,%r9,4), %r8d
    0000026b: 	leaq	(,%r9,4), %rdx
    00000273: 	addl	%r8d, %eax
    00000276: 	leaq	0x1(%r9), %r8
    0000027a: 	cmpq	%r10, %r8
    0000027d: 	jae	.Ltmp568 # Offset: 637
    0000027f: 	movl	0x4(%rdi,%rdx), %r8d
    00000284: 	imull	0x4(%rsi,%rdx), %r8d
    0000028a: 	addq	$0x2, %r9
    0000028e: 	addl	%r8d, %eax
    00000291: 	cmpq	%r10, %r9
    00000294: 	jae	.Ltmp568 # Offset: 660
    00000296: 	movl	0x8(%rsi,%rdx), %esi
    0000029a: 	imull	0x8(%rdi,%rdx), %esi
    0000029f: 	addl	%esi, %eax
.Ltmp568:
    000002a1: 	popq	%rbx
    000002a2: 	addl	%ecx, %eax
    000002a4: 	popq	%rbp
    000002a5: 	popq	%r12
    000002a7: 	retq # Offset: 679
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp565:
    000002b0: 	movl	$0xf, %ebp
    000002b5: 	xorl	%ecx, %ecx
    000002b7: 	xorl	%r9d, %r9d
    000002ba: 	xorl	%eax, %eax
    000002bc: 	jmp	.Ltmp571 # Offset: 700
.Ltmp566:
    000002c1: 	xorl	%r11d, %r11d
    000002c4: 	xorl	%ebp, %ebp
    000002c6: 	xorl	%ebx, %ebx
    000002c8: 	xorl	%r9d, %r9d
    000002cb: 	xorl	%r12d, %r12d
    000002ce: 	jmp	.Ltmp572 # Offset: 718
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKjjET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKllET0_T_S3_m" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x1a440
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x1a440
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	shlq	$0x3, %rdx
    00000008: 	je	.Ltmp573 # Offset: 8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp574:
    00000010: 	movq	(%rdi,%rax), %rcx
    00000014: 	imulq	(%rsi,%rax), %rcx
    00000019: 	addq	$0x8, %rax
    0000001d: 	addq	%rcx, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	jne	.Ltmp574 # Offset: 35
    00000025: 	movq	%r8, %rax
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp573:
    00000030: 	xorl	%r8d, %r8d
    00000033: 	movq	%r8, %rax
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKllET0_T_S3_m"

Binary Function "_Z14inner_product1IPKllET0_T_S3_m" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x1a480
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x1a480
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp575 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	xorl	%r8d, %r8d
    0000000e: 	nop # Size: 2
.Ltmp576:
    00000010: 	movq	(%rdi,%rax,8), %rcx
    00000014: 	imulq	(%rsi,%rax,8), %rcx
    00000019: 	addq	$0x1, %rax
    0000001d: 	addq	%rcx, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	jne	.Ltmp576 # Offset: 35
    00000025: 	movq	%r8, %rax
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp575:
    00000030: 	xorl	%r8d, %r8d
    00000033: 	movq	%r8, %rax
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKllET0_T_S3_m"

Binary Function "_Z14inner_product2IPKllET0_T_S3_m" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x1a4c0
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x1a4c0
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	shlq	$0x3, %rdx
    00000008: 	je	.Ltmp577 # Offset: 8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp578:
    00000010: 	movq	(%rdi,%rax), %rcx
    00000014: 	imulq	(%rsi,%rax), %rcx
    00000019: 	addq	$0x8, %rax
    0000001d: 	addq	%rcx, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	jne	.Ltmp578 # Offset: 35
    00000025: 	movq	%r8, %rax
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp577:
    00000030: 	xorl	%r8d, %r8d
    00000033: 	movq	%r8, %rax
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKllET0_T_S3_m"

Binary Function "_Z14inner_product3IPKllET0_T_S3_m" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x1a500
  Size        : 0x6d
  MaxSize     : 0x70
  Offset      : 0x1a500
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r9
    00000007: 	movq	%rdi, %r8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	subq	$0x1, %r9
    00000013: 	je	.Ltmp579 # Offset: 19
    00000015: 	xorl	%ecx, %ecx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp580:
    00000020: 	movq	(%r8,%rcx,8), %rsi
    00000024: 	imulq	(%rdi,%rcx,8), %rsi
    00000029: 	addq	%rsi, %rax
    0000002c: 	movq	0x8(%r8,%rcx,8), %rsi
    00000031: 	imulq	0x8(%rdi,%rcx,8), %rsi
    00000037: 	addq	$0x2, %rcx
    0000003b: 	addq	%rsi, %rax
    0000003e: 	cmpq	%r9, %rcx
    00000041: 	jb	.Ltmp580 # Offset: 65
    00000043: 	leaq	-0x2(%rdx), %rcx
    00000047: 	andq	$-0x2, %rcx
    0000004b: 	addq	$0x2, %rcx
    0000004f: 	cmpq	%rcx, %rdx
    00000052: 	ja	.Ltmp581 # Offset: 82
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp581:
    00000058: 	shlq	$0x3, %rcx
    0000005c: 	addq	%rcx, %r8
    0000005f: 	addq	%rcx, %rdi
.Ltmp579:
    00000062: 	movq	(%r8), %rdx
    00000065: 	imulq	(%rdi), %rdx
    00000069: 	addq	%rdx, %rax
    0000006c: 	retq # Offset: 108
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKllET0_T_S3_m"

Binary Function "_Z14inner_product4IPKllET0_T_S3_m" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x1a570
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x1a570
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movq	%rsi, %r11
    0000000b: 	movq	%rdx, %rbx
    0000000e: 	cmpq	$0x3, %rdx
    00000012: 	je	.Ltmp582 # Offset: 18
    00000018: 	leaq	-0x4(%rbx), %r9
    0000001c: 	movq	%rdi, %rax
    0000001f: 	movq	%rsi, %rdx
    00000022: 	xorl	%r8d, %r8d
    00000025: 	movq	%r9, %rcx
    00000028: 	shrq	$0x2, %rcx
    0000002c: 	shlq	$0x5, %rcx
    00000030: 	leaq	0x20(%rdi,%rcx), %rdi
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp583:
    00000038: 	movq	(%rax), %rcx
    0000003b: 	imulq	(%rdx), %rcx
    0000003f: 	addq	$0x20, %rax
    00000043: 	addq	$0x20, %rdx
    00000047: 	movq	-0x18(%rax), %rsi
    0000004b: 	imulq	-0x18(%rdx), %rsi
    00000050: 	addq	%r8, %rcx
    00000053: 	movq	-0x8(%rax), %r8
    00000057: 	imulq	-0x8(%rdx), %r8
    0000005c: 	addq	%rcx, %rsi
    0000005f: 	movq	-0x10(%rax), %rcx
    00000063: 	imulq	-0x10(%rdx), %rcx
    00000068: 	addq	%rsi, %rcx
    0000006b: 	addq	%rcx, %r8
    0000006e: 	cmpq	%rax, %rdi
    00000071: 	jne	.Ltmp583 # Offset: 113
    00000073: 	andq	$-0x4, %r9
    00000077: 	leaq	0x4(%r9), %rax
    0000007b: 	cmpq	%rax, %rbx
    0000007e: 	jbe	.Ltmp584 # Offset: 126
    00000080: 	movq	(%r11,%rax,8), %rdx
    00000084: 	imulq	(%r10,%rax,8), %rdx
    00000089: 	leaq	(,%rax,8), %rcx
    00000091: 	leaq	0x5(%r9), %rax
    00000095: 	addq	%rdx, %r8
    00000098: 	cmpq	%rax, %rbx
    0000009b: 	jbe	.Ltmp584 # Offset: 155
    0000009d: 	movq	0x8(%r11,%rcx), %rdx
    000000a2: 	imulq	0x8(%r10,%rcx), %rdx
    000000a8: 	addq	$0x6, %r9
    000000ac: 	leaq	0x8(%rcx), %rax
    000000b0: 	addq	%rdx, %r8
    000000b3: 	cmpq	%r9, %rbx
    000000b6: 	jbe	.Ltmp584 # Offset: 182
.Ltmp585:
    000000b8: 	movq	0x8(%r11,%rax), %rdx
    000000bd: 	imulq	0x8(%r10,%rax), %rdx
    000000c3: 	addq	$0x1, %r9
    000000c7: 	addq	%rdx, %r8
    000000ca: 	cmpq	%r9, %rbx
    000000cd: 	jbe	.Ltmp584 # Offset: 205
    000000cf: 	movq	0x10(%r10,%rax), %rdx
    000000d4: 	imulq	0x10(%r11,%rax), %rdx
    000000da: 	addq	%rdx, %r8
.Ltmp584:
    000000dd: 	movq	%r8, %rax
    000000e0: 	popq	%rbx
    000000e1: 	retq # Offset: 225
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp582:
    000000e8: 	movq	0x8(%rsi), %r8
    000000ec: 	movq	(%rsi), %rax
    000000ef: 	movl	$0x2, %r9d
    000000f5: 	imulq	(%rdi), %rax
    000000f9: 	imulq	0x8(%rdi), %r8
    000000fe: 	addq	%rax, %r8
    00000101: 	movl	$0x8, %eax
    00000106: 	jmp	.Ltmp585 # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKllET0_T_S3_m"

Binary Function "_Z14inner_product5IPKllET0_T_S3_m" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x1a680
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x1a680
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movq	%rsi, %r11
    0000000b: 	movq	%rdx, %r9
    0000000e: 	cmpq	$0x7, %rdx
    00000012: 	je	.Ltmp586 # Offset: 18
    00000018: 	movq	%rdi, %rax
    0000001b: 	leaq	-0x8(%r9), %rdi
    0000001f: 	movq	%rsi, %rdx
    00000022: 	xorl	%r8d, %r8d
    00000025: 	movq	%rdi, %rcx
    00000028: 	shrq	$0x3, %rcx
    0000002c: 	shlq	$0x6, %rcx
    00000030: 	leaq	0x40(%r10,%rcx), %rbx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp587:
    00000038: 	movq	(%rax), %rcx
    0000003b: 	imulq	(%rdx), %rcx
    0000003f: 	addq	$0x40, %rax
    00000043: 	addq	$0x40, %rdx
    00000047: 	movq	-0x38(%rax), %rsi
    0000004b: 	imulq	-0x38(%rdx), %rsi
    00000050: 	addq	%r8, %rcx
    00000053: 	movq	-0x8(%rax), %r8
    00000057: 	imulq	-0x8(%rdx), %r8
    0000005c: 	addq	%rcx, %rsi
    0000005f: 	movq	-0x30(%rax), %rcx
    00000063: 	imulq	-0x30(%rdx), %rcx
    00000068: 	addq	%rsi, %rcx
    0000006b: 	movq	-0x28(%rax), %rsi
    0000006f: 	imulq	-0x28(%rdx), %rsi
    00000074: 	addq	%rcx, %rsi
    00000077: 	movq	-0x20(%rax), %rcx
    0000007b: 	imulq	-0x20(%rdx), %rcx
    00000080: 	addq	%rsi, %rcx
    00000083: 	movq	-0x18(%rax), %rsi
    00000087: 	imulq	-0x18(%rdx), %rsi
    0000008c: 	addq	%rcx, %rsi
    0000008f: 	movq	-0x10(%rax), %rcx
    00000093: 	imulq	-0x10(%rdx), %rcx
    00000098: 	addq	%rsi, %rcx
    0000009b: 	addq	%rcx, %r8
    0000009e: 	cmpq	%rax, %rbx
    000000a1: 	jne	.Ltmp587 # Offset: 161
    000000a3: 	andq	$-0x8, %rdi
    000000a7: 	leaq	0x8(%rdi), %rax
    000000ab: 	cmpq	%rax, %r9
    000000ae: 	jbe	.Ltmp588 # Offset: 174
    000000b4: 	movq	(%r11,%rax,8), %rdx
    000000b8: 	imulq	(%r10,%rax,8), %rdx
    000000bd: 	leaq	(,%rax,8), %rcx
    000000c5: 	leaq	0x9(%rdi), %rax
    000000c9: 	addq	%rdx, %r8
    000000cc: 	cmpq	%rax, %r9
    000000cf: 	jbe	.Ltmp588 # Offset: 207
    000000d5: 	movq	0x8(%r11,%rcx), %rdx
    000000da: 	imulq	0x8(%r10,%rcx), %rdx
    000000e0: 	addq	$0xa, %rdi
    000000e4: 	leaq	0x8(%rcx), %rax
    000000e8: 	addq	%rdx, %r8
    000000eb: 	cmpq	%rdi, %r9
    000000ee: 	jbe	.Ltmp588 # Offset: 238
.Ltmp589:
    000000f4: 	movq	0x8(%r11,%rax), %rdx
    000000f9: 	imulq	0x8(%r10,%rax), %rdx
    000000ff: 	addq	%rdx, %r8
    00000102: 	leaq	0x1(%rdi), %rdx
    00000106: 	cmpq	%rdx, %r9
    00000109: 	jbe	.Ltmp588 # Offset: 265
    0000010b: 	movq	0x10(%r11,%rax), %rdx
    00000110: 	imulq	0x10(%r10,%rax), %rdx
    00000116: 	addq	%rdx, %r8
    00000119: 	leaq	0x2(%rdi), %rdx
    0000011d: 	cmpq	%rdx, %r9
    00000120: 	jbe	.Ltmp588 # Offset: 288
    00000122: 	movq	0x18(%r11,%rax), %rdx
    00000127: 	imulq	0x18(%r10,%rax), %rdx
    0000012d: 	addq	%rdx, %r8
    00000130: 	leaq	0x3(%rdi), %rdx
    00000134: 	cmpq	%rdx, %r9
    00000137: 	jbe	.Ltmp588 # Offset: 311
    00000139: 	movq	0x20(%r11,%rax), %rdx
    0000013e: 	imulq	0x20(%r10,%rax), %rdx
    00000144: 	addq	%rdx, %r8
    00000147: 	leaq	0x4(%rdi), %rdx
    0000014b: 	cmpq	%rdx, %r9
    0000014e: 	jbe	.Ltmp588 # Offset: 334
    00000150: 	movq	0x28(%r11,%rax), %rdx
    00000155: 	imulq	0x28(%r10,%rax), %rdx
    0000015b: 	addq	$0x5, %rdi
    0000015f: 	addq	%rdx, %r8
    00000162: 	cmpq	%rdi, %r9
    00000165: 	jbe	.Ltmp588 # Offset: 357
    00000167: 	movq	0x30(%r10,%rax), %rdx
    0000016c: 	imulq	0x30(%r11,%rax), %rdx
    00000172: 	addq	%rdx, %r8
.Ltmp588:
    00000175: 	movq	%r8, %rax
    00000178: 	popq	%rbx
    00000179: 	retq # Offset: 377
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp586:
    00000180: 	movq	0x8(%rdi), %r8
    00000184: 	movq	(%rsi), %rax
    00000187: 	imulq	0x8(%rsi), %r8
    0000018c: 	imulq	(%rdi), %rax
    00000190: 	movl	$0x2, %edi
    00000195: 	addq	%rax, %r8
    00000198: 	movl	$0x8, %eax
    0000019d: 	jmp	.Ltmp589 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKllET0_T_S3_m"

Binary Function "_Z14inner_product6IPKllET0_T_S3_m" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x1a830
  Size        : 0x302
  MaxSize     : 0x310
  Offset      : 0x1a830
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	cmpq	$0xf, %rdx
    0000001b: 	je	.Ltmp590 # Offset: 27
    00000021: 	leaq	-0x10(%r14), %rax
    00000025: 	movq	%rdi, -0x8(%rsp)
    0000002a: 	movq	%rdi, %rsi
    0000002d: 	movq	%r13, %rdx
    00000030: 	movq	%rax, -0x10(%rsp)
    00000035: 	shrq	$0x4, %rax
    00000039: 	xorl	%r15d, %r15d
    0000003c: 	shlq	$0x7, %rax
    00000040: 	leaq	0x80(%r13,%rax), %rax
    00000048: 	movq	%rax, %r12
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp591:
    00000050: 	movq	(%rsi), %rbx
    00000053: 	movq	(%rdx), %rax
    00000056: 	subq	$-0x80, %rsi
    0000005a: 	movq	-0x78(%rsi), %r11
    0000005e: 	movq	-0x70(%rsi), %r10
    00000062: 	imulq	%rbx, %rax
    00000066: 	movq	-0x68(%rsi), %r9
    0000006a: 	movq	-0x60(%rsi), %r8
    0000006e: 	movq	-0x58(%rsi), %rdi
    00000072: 	movq	-0x50(%rsi), %rcx
    00000076: 	movq	-0x48(%rsi), %rbp
    0000007a: 	imulq	0x40(%rdx), %rbx
    0000007f: 	addq	%r15, %rax
    00000082: 	movq	0x8(%rdx), %r15
    00000086: 	imulq	%r11, %r15
    0000008a: 	imulq	0x48(%rdx), %r11
    0000008f: 	addq	%r15, %rax
    00000092: 	movq	0x10(%rdx), %r15
    00000096: 	imulq	%r10, %r15
    0000009a: 	imulq	0x50(%rdx), %r10
    0000009f: 	addq	%r15, %rax
    000000a2: 	movq	0x18(%rdx), %r15
    000000a6: 	imulq	%r9, %r15
    000000aa: 	imulq	0x58(%rdx), %r9
    000000af: 	addq	%r15, %rax
    000000b2: 	movq	0x20(%rdx), %r15
    000000b6: 	imulq	%r8, %r15
    000000ba: 	imulq	0x60(%rdx), %r8
    000000bf: 	addq	%r15, %rax
    000000c2: 	movq	0x28(%rdx), %r15
    000000c6: 	imulq	%rdi, %r15
    000000ca: 	imulq	0x68(%rdx), %rdi
    000000cf: 	addq	%r15, %rax
    000000d2: 	movq	0x30(%rdx), %r15
    000000d6: 	imulq	%rcx, %r15
    000000da: 	imulq	0x70(%rdx), %rcx
    000000df: 	addq	%r15, %rax
    000000e2: 	movq	0x38(%rdx), %r15
    000000e6: 	imulq	%rbp, %r15
    000000ea: 	imulq	0x78(%rdx), %rbp
    000000ef: 	addq	%r15, %rax
    000000f2: 	addq	%rax, %rbx
    000000f5: 	addq	%rbx, %r11
    000000f8: 	addq	%r11, %r10
    000000fb: 	addq	%r10, %r9
    000000fe: 	addq	%r9, %r8
    00000101: 	addq	%r8, %rdi
    00000104: 	addq	%rdi, %rcx
    00000107: 	subq	$-0x80, %rdx
    0000010b: 	leaq	(%rbp,%rcx), %r15
    00000110: 	cmpq	%rdx, %r12
    00000113: 	jne	.Ltmp591 # Offset: 275
    00000119: 	movq	-0x10(%rsp), %rax
    0000011e: 	movq	-0x8(%rsp), %r12
    00000123: 	andq	$-0x10, %rax
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	cmpq	%rdx, %r14
    0000012e: 	jbe	.Ltmp592 # Offset: 302
    00000134: 	movq	(%r13,%rdx,8), %rcx
    00000139: 	imulq	(%r12,%rdx,8), %rcx
    0000013e: 	leaq	(,%rdx,8), %rsi
    00000146: 	leaq	0x11(%rax), %rdx
    0000014a: 	addq	%rcx, %r15
    0000014d: 	cmpq	%rdx, %r14
    00000150: 	jbe	.Ltmp592 # Offset: 336
    00000156: 	movq	0x8(%r13,%rsi), %rcx
    0000015b: 	imulq	0x8(%r12,%rsi), %rcx
    00000161: 	addq	$0x12, %rax
    00000165: 	leaq	0x8(%rsi), %rdx
    00000169: 	addq	%rcx, %r15
    0000016c: 	cmpq	%rax, %r14
    0000016f: 	jbe	.Ltmp592 # Offset: 367
.Ltmp593:
    00000175: 	movq	0x8(%r13,%rdx), %rcx
    0000017a: 	imulq	0x8(%r12,%rdx), %rcx
    00000180: 	addq	%rcx, %r15
    00000183: 	leaq	0x1(%rax), %rcx
    00000187: 	cmpq	%rcx, %r14
    0000018a: 	jbe	.Ltmp592 # Offset: 394
    00000190: 	movq	0x10(%r13,%rdx), %rcx
    00000195: 	imulq	0x10(%r12,%rdx), %rcx
    0000019b: 	addq	%rcx, %r15
    0000019e: 	leaq	0x2(%rax), %rcx
    000001a2: 	cmpq	%rcx, %r14
    000001a5: 	jbe	.Ltmp592 # Offset: 421
    000001ab: 	movq	0x18(%r13,%rdx), %rcx
    000001b0: 	imulq	0x18(%r12,%rdx), %rcx
    000001b6: 	addq	%rcx, %r15
    000001b9: 	leaq	0x3(%rax), %rcx
    000001bd: 	cmpq	%rcx, %r14
    000001c0: 	jbe	.Ltmp592 # Offset: 448
    000001c6: 	movq	0x20(%r13,%rdx), %rcx
    000001cb: 	imulq	0x20(%r12,%rdx), %rcx
    000001d1: 	addq	%rcx, %r15
    000001d4: 	leaq	0x4(%rax), %rcx
    000001d8: 	cmpq	%rcx, %r14
    000001db: 	jbe	.Ltmp592 # Offset: 475
    000001e1: 	movq	0x28(%r13,%rdx), %rcx
    000001e6: 	imulq	0x28(%r12,%rdx), %rcx
    000001ec: 	addq	%rcx, %r15
    000001ef: 	leaq	0x5(%rax), %rcx
    000001f3: 	cmpq	%rcx, %r14
    000001f6: 	jbe	.Ltmp592 # Offset: 502
    000001fc: 	movq	0x30(%r13,%rdx), %rcx
    00000201: 	imulq	0x30(%r12,%rdx), %rcx
    00000207: 	addq	%rcx, %r15
    0000020a: 	leaq	0x6(%rax), %rcx
    0000020e: 	cmpq	%rcx, %r14
    00000211: 	jbe	.Ltmp592 # Offset: 529
    00000217: 	movq	0x38(%r13,%rdx), %rcx
    0000021c: 	imulq	0x38(%r12,%rdx), %rcx
    00000222: 	addq	%rcx, %r15
    00000225: 	leaq	0x7(%rax), %rcx
    00000229: 	cmpq	%rcx, %r14
    0000022c: 	jbe	.Ltmp592 # Offset: 556
    00000232: 	movq	0x40(%r13,%rdx), %rcx
    00000237: 	imulq	0x40(%r12,%rdx), %rcx
    0000023d: 	addq	%rcx, %r15
    00000240: 	leaq	0x8(%rax), %rcx
    00000244: 	cmpq	%rcx, %r14
    00000247: 	jbe	.Ltmp592 # Offset: 583
    0000024d: 	movq	0x48(%r13,%rdx), %rcx
    00000252: 	imulq	0x48(%r12,%rdx), %rcx
    00000258: 	addq	%rcx, %r15
    0000025b: 	leaq	0x9(%rax), %rcx
    0000025f: 	cmpq	%rcx, %r14
    00000262: 	jbe	.Ltmp592 # Offset: 610
    00000264: 	movq	0x50(%r13,%rdx), %rcx
    00000269: 	imulq	0x50(%r12,%rdx), %rcx
    0000026f: 	addq	%rcx, %r15
    00000272: 	leaq	0xa(%rax), %rcx
    00000276: 	cmpq	%rcx, %r14
    00000279: 	jbe	.Ltmp592 # Offset: 633
    0000027b: 	movq	0x58(%r13,%rdx), %rcx
    00000280: 	imulq	0x58(%r12,%rdx), %rcx
    00000286: 	addq	%rcx, %r15
    00000289: 	leaq	0xb(%rax), %rcx
    0000028d: 	cmpq	%rcx, %r14
    00000290: 	jbe	.Ltmp592 # Offset: 656
    00000292: 	movq	0x60(%r13,%rdx), %rcx
    00000297: 	imulq	0x60(%r12,%rdx), %rcx
    0000029d: 	addq	%rcx, %r15
    000002a0: 	leaq	0xc(%rax), %rcx
    000002a4: 	cmpq	%rcx, %r14
    000002a7: 	jbe	.Ltmp592 # Offset: 679
    000002a9: 	movq	0x68(%r13,%rdx), %rcx
    000002ae: 	imulq	0x68(%r12,%rdx), %rcx
    000002b4: 	addq	$0xd, %rax
    000002b8: 	addq	%rcx, %r15
    000002bb: 	cmpq	%rax, %r14
    000002be: 	jbe	.Ltmp592 # Offset: 702
    000002c0: 	movq	0x70(%r12,%rdx), %rax
    000002c5: 	imulq	0x70(%r13,%rdx), %rax
    000002cb: 	addq	%rax, %r15
.Ltmp592:
    000002ce: 	popq	%rbx
    000002cf: 	movq	%r15, %rax
    000002d2: 	popq	%rbp
    000002d3: 	popq	%r12
    000002d5: 	popq	%r13
    000002d7: 	popq	%r14
    000002d9: 	popq	%r15
    000002db: 	retq # Offset: 731
    000002dc: 	nopl	(%rax) # Size: 4
.Ltmp590:
    000002e0: 	movq	0x8(%rdi), %r15
    000002e4: 	movq	(%rsi), %rax
    000002e7: 	movl	$0x8, %edx
    000002ec: 	imulq	(%rdi), %rax
    000002f0: 	imulq	0x8(%rsi), %r15
    000002f5: 	addq	%rax, %r15
    000002f8: 	movl	$0x2, %eax
    000002fd: 	jmp	.Ltmp593 # Offset: 765
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKllET0_T_S3_m"

Binary Function "_Z14inner_product7IPKllET0_T_S3_m" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x1ab40
  Size        : 0x85
  MaxSize     : 0x90
  Offset      : 0x1ab40
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %r9
    0000000d: 	subq	$0x1, %r10
    00000011: 	je	.Ltmp594 # Offset: 17
    00000013: 	xorl	%eax, %eax
    00000015: 	xorl	%ecx, %ecx
    00000017: 	xorl	%edx, %edx
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp595:
    00000020: 	movq	(%rdi,%rdx,8), %rsi
    00000024: 	imulq	(%r8,%rdx,8), %rsi
    00000029: 	addq	%rsi, %rcx
    0000002c: 	movq	0x8(%rdi,%rdx,8), %rsi
    00000031: 	imulq	0x8(%r8,%rdx,8), %rsi
    00000037: 	addq	$0x2, %rdx
    0000003b: 	addq	%rsi, %rax
    0000003e: 	cmpq	%r10, %rdx
    00000041: 	jb	.Ltmp595 # Offset: 65
    00000043: 	leaq	-0x2(%r9), %rdx
    00000047: 	andq	$-0x2, %rdx
    0000004b: 	addq	$0x2, %rdx
    0000004f: 	cmpq	%rdx, %r9
    00000052: 	jbe	.Ltmp596 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp597:
    00000058: 	movq	(%rdi,%rdx,8), %rsi
    0000005c: 	imulq	(%r8,%rdx,8), %rsi
    00000061: 	addq	$0x1, %rdx
    00000065: 	addq	%rsi, %rcx
    00000068: 	cmpq	%rdx, %r9
    0000006b: 	ja	.Ltmp597 # Offset: 107
.Ltmp596:
    0000006d: 	addq	%rcx, %rax
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp594:
    00000078: 	movq	(%rsi), %rcx
    0000007b: 	imulq	(%rdi), %rcx
    0000007f: 	xorl	%eax, %eax
    00000081: 	addq	%rcx, %rax
    00000084: 	retq # Offset: 132
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKllET0_T_S3_m"

Binary Function "_Z14inner_product8IPKllET0_T_S3_m" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x1abd0
  Size        : 0xb9
  MaxSize     : 0xc0
  Offset      : 0x1abd0
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r9
    00000009: 	movq	%rsi, %r10
    0000000c: 	movq	%rdx, %r11
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	cmpq	$0x3, %rdx
    00000015: 	je	.Ltmp598 # Offset: 21
    0000001b: 	movq	%rsi, %rcx
    0000001e: 	leaq	-0x4(%r11), %rsi
    00000022: 	movq	%rdi, %rdx
    00000025: 	xorl	%ebx, %ebx
    00000027: 	movq	%rsi, %rax
    0000002a: 	xorl	%ebp, %ebp
    0000002c: 	xorl	%r8d, %r8d
    0000002f: 	shrq	$0x2, %rax
    00000033: 	shlq	$0x5, %rax
    00000037: 	leaq	0x20(%rdi,%rax), %r12
    0000003c: 	xorl	%eax, %eax
    0000003e: 	nop # Size: 2
.Ltmp599:
    00000040: 	movq	(%rdx), %rdi
    00000043: 	imulq	(%rcx), %rdi
    00000047: 	addq	$0x20, %rdx
    0000004b: 	addq	$0x20, %rcx
    0000004f: 	addq	%rdi, %rax
    00000052: 	movq	-0x18(%rdx), %rdi
    00000056: 	imulq	-0x18(%rcx), %rdi
    0000005b: 	addq	%rdi, %r8
    0000005e: 	movq	-0x10(%rdx), %rdi
    00000062: 	imulq	-0x10(%rcx), %rdi
    00000067: 	addq	%rdi, %rbp
    0000006a: 	movq	-0x8(%rdx), %rdi
    0000006e: 	imulq	-0x8(%rcx), %rdi
    00000073: 	addq	%rdi, %rbx
    00000076: 	cmpq	%rdx, %r12
    00000079: 	jne	.Ltmp599 # Offset: 121
    0000007b: 	andq	$-0x4, %rsi
    0000007f: 	addq	%rbp, %r8
    00000082: 	leaq	0x4(%rsi), %rdx
    00000086: 	addq	%rbx, %r8
    00000089: 	cmpq	%r11, %rdx
    0000008c: 	jae	.Ltmp600 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp601:
    00000090: 	movq	(%r9,%rdx,8), %rcx
    00000094: 	imulq	(%r10,%rdx,8), %rcx
    00000099: 	addq	$0x1, %rdx
    0000009d: 	addq	%rcx, %rax
    000000a0: 	cmpq	%rdx, %r11
    000000a3: 	ja	.Ltmp601 # Offset: 163
.Ltmp600:
    000000a5: 	popq	%rbx
    000000a6: 	addq	%r8, %rax
    000000a9: 	popq	%rbp
    000000aa: 	popq	%r12
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp598:
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	xorl	%eax, %eax
    000000b5: 	xorl	%edx, %edx
    000000b7: 	jmp	.Ltmp601 # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKllET0_T_S3_m"

Binary Function "_Z14inner_product9IPKllET0_T_S3_m" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x1ac90
  Size        : 0x100
  MaxSize     : 0x100
  Offset      : 0x1ac90
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	cmpq	$0x7, %rdx
    0000001b: 	je	.Ltmp602 # Offset: 27
    00000021: 	leaq	-0x8(%r14), %rbp
    00000025: 	movq	%rdi, %rdx
    00000028: 	movq	%rsi, %rcx
    0000002b: 	xorl	%r8d, %r8d
    0000002e: 	movq	%rbp, %rax
    00000031: 	xorl	%esi, %esi
    00000033: 	shrq	$0x3, %rax
    00000037: 	shlq	$0x6, %rax
    0000003b: 	leaq	0x40(%rdi,%rax), %r15
    00000040: 	xorl	%edi, %edi
    00000042: 	xorl	%eax, %eax
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp603:
    00000048: 	movq	(%rdx), %rbx
    0000004b: 	movq	0x8(%rdx), %r11
    0000004f: 	addq	$0x40, %rdx
    00000053: 	addq	$0x40, %rcx
    00000057: 	imulq	-0x40(%rcx), %rbx
    0000005c: 	movq	-0x30(%rdx), %r10
    00000060: 	imulq	-0x38(%rcx), %r11
    00000065: 	movq	-0x28(%rdx), %r9
    00000069: 	imulq	-0x30(%rcx), %r10
    0000006e: 	imulq	-0x28(%rcx), %r9
    00000073: 	addq	%rax, %rbx
    00000076: 	movq	-0x20(%rdx), %rax
    0000007a: 	addq	%rsi, %r11
    0000007d: 	imulq	-0x20(%rcx), %rax
    00000082: 	movq	-0x18(%rdx), %rsi
    00000086: 	addq	%r8, %r10
    00000089: 	imulq	-0x18(%rcx), %rsi
    0000008e: 	movq	-0x10(%rdx), %r8
    00000092: 	addq	%rdi, %r9
    00000095: 	imulq	-0x10(%rcx), %r8
    0000009a: 	movq	-0x8(%rdx), %rdi
    0000009e: 	imulq	-0x8(%rcx), %rdi
    000000a3: 	addq	%rbx, %rax
    000000a6: 	addq	%r11, %rsi
    000000a9: 	addq	%r10, %r8
    000000ac: 	addq	%r9, %rdi
    000000af: 	cmpq	%rdx, %r15
    000000b2: 	jne	.Ltmp603 # Offset: 178
    000000b4: 	andq	$-0x8, %rbp
    000000b8: 	addq	%r8, %rsi
    000000bb: 	leaq	0x8(%rbp), %rdx
    000000bf: 	addq	%rdi, %rsi
    000000c2: 	cmpq	%r14, %rdx
    000000c5: 	jae	.Ltmp604 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp605:
    000000d0: 	movq	(%r12,%rdx,8), %rcx
    000000d4: 	imulq	(%r13,%rdx,8), %rcx
    000000da: 	addq	$0x1, %rdx
    000000de: 	addq	%rcx, %rax
    000000e1: 	cmpq	%rdx, %r14
    000000e4: 	ja	.Ltmp605 # Offset: 228
.Ltmp604:
    000000e6: 	popq	%rbx
    000000e7: 	addq	%rsi, %rax
    000000ea: 	popq	%rbp
    000000eb: 	popq	%r12
    000000ed: 	popq	%r13
    000000ef: 	popq	%r14
    000000f1: 	popq	%r15
    000000f3: 	retq # Offset: 243
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp602:
    000000f8: 	xorl	%esi, %esi
    000000fa: 	xorl	%eax, %eax
    000000fc: 	xorl	%edx, %edx
    000000fe: 	jmp	.Ltmp605 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKllET0_T_S3_m"

Binary Function "_Z15inner_product10IPKllET0_T_S3_m" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x1ad90
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0x1ad90
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKllET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, -0x18(%rsp)
    00000016: 	movq	%rsi, -0x10(%rsp)
    0000001b: 	movq	%rdx, -0x20(%rsp)
    00000020: 	cmpq	$0xf, %rdx
    00000024: 	je	.Ltmp606 # Offset: 36
    0000002a: 	subq	$0x10, %rax
    0000002e: 	movq	%rdi, %rcx
    00000031: 	movq	%rsi, %rdx
    00000034: 	xorl	%ebp, %ebp
    00000036: 	movq	%rax, -0x8(%rsp)
    0000003b: 	shrq	$0x4, %rax
    0000003f: 	xorl	%r14d, %r14d
    00000042: 	xorl	%r8d, %r8d
    00000045: 	shlq	$0x7, %rax
    00000049: 	leaq	0x80(%rsi,%rax), %rax
    00000051: 	movq	%rax, -0x28(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp607:
    00000060: 	movq	(%rcx), %r10
    00000063: 	movq	(%rdx), %r15
    00000066: 	subq	$-0x80, %rcx
    0000006a: 	subq	$-0x80, %rdx
    0000006e: 	movq	-0x78(%rcx), %r9
    00000072: 	movq	-0x70(%rcx), %rdi
    00000076: 	imulq	%r10, %r15
    0000007a: 	movq	-0x68(%rcx), %rsi
    0000007e: 	movq	-0x60(%rcx), %r13
    00000082: 	movq	-0x58(%rcx), %r12
    00000086: 	movq	-0x50(%rcx), %rbx
    0000008a: 	movq	-0x48(%rcx), %r11
    0000008e: 	imulq	-0x40(%rdx), %r10
    00000093: 	addq	%r15, %rax
    00000096: 	movq	-0x78(%rdx), %r15
    0000009a: 	imulq	%r9, %r15
    0000009e: 	imulq	-0x38(%rdx), %r9
    000000a3: 	addq	%r15, %r8
    000000a6: 	movq	-0x70(%rdx), %r15
    000000aa: 	imulq	%rdi, %r15
    000000ae: 	imulq	-0x30(%rdx), %rdi
    000000b3: 	addq	%r15, %r14
    000000b6: 	movq	-0x68(%rdx), %r15
    000000ba: 	imulq	%rsi, %r15
    000000be: 	imulq	-0x28(%rdx), %rsi
    000000c3: 	addq	%r15, %rbp
    000000c6: 	movq	-0x60(%rdx), %r15
    000000ca: 	imulq	%r13, %r15
    000000ce: 	imulq	-0x20(%rdx), %r13
    000000d3: 	addq	%rax, %r15
    000000d6: 	movq	-0x58(%rdx), %rax
    000000da: 	addq	%r15, %r10
    000000dd: 	imulq	%r12, %rax
    000000e1: 	imulq	-0x18(%rdx), %r12
    000000e6: 	addq	%rax, %r8
    000000e9: 	movq	-0x50(%rdx), %rax
    000000ed: 	addq	%r8, %r9
    000000f0: 	imulq	%rbx, %rax
    000000f4: 	leaq	(%r12,%r9), %r8
    000000f8: 	imulq	-0x10(%rdx), %rbx
    000000fd: 	addq	%rax, %r14
    00000100: 	movq	-0x48(%rdx), %rax
    00000104: 	addq	%r14, %rdi
    00000107: 	imulq	%r11, %rax
    0000010b: 	leaq	(%rbx,%rdi), %r14
    0000010f: 	imulq	-0x8(%rdx), %r11
    00000114: 	addq	%rbp, %rax
    00000117: 	addq	%rax, %rsi
    0000011a: 	leaq	(%r13,%r10), %rax
    0000011f: 	leaq	(%r11,%rsi), %rbp
    00000123: 	cmpq	%rdx, -0x28(%rsp)
    00000128: 	jne	.Ltmp607 # Offset: 296
    0000012e: 	movq	-0x8(%rsp), %rdx
    00000133: 	addq	%r14, %r8
    00000136: 	addq	%rbp, %r8
    00000139: 	andq	$-0x10, %rdx
    0000013d: 	addq	$0x10, %rdx
    00000141: 	cmpq	-0x20(%rsp), %rdx
    00000146: 	jae	.Ltmp608 # Offset: 326
    00000148: 	movq	-0x18(%rsp), %rsi
    0000014d: 	movq	-0x10(%rsp), %rdi
    00000152: 	movq	-0x20(%rsp), %r9
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp609:
    00000160: 	movq	(%rsi,%rdx,8), %rcx
    00000164: 	imulq	(%rdi,%rdx,8), %rcx
    00000169: 	addq	$0x1, %rdx
    0000016d: 	addq	%rcx, %rax
    00000170: 	cmpq	%rdx, %r9
    00000173: 	ja	.Ltmp609 # Offset: 371
.Ltmp608:
    00000175: 	popq	%rbx
    00000176: 	addq	%r8, %rax
    00000179: 	popq	%rbp
    0000017a: 	popq	%r12
    0000017c: 	popq	%r13
    0000017e: 	popq	%r14
    00000180: 	popq	%r15
    00000182: 	retq # Offset: 386
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp606:
    00000188: 	movq	%rdi, %rsi
    0000018b: 	movq	%rdx, %r9
    0000018e: 	movq	-0x10(%rsp), %rdi
    00000193: 	xorl	%r8d, %r8d
    00000196: 	xorl	%eax, %eax
    00000198: 	xorl	%edx, %edx
    0000019a: 	jmp	.Ltmp609 # Offset: 410
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKllET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKmmET0_T_S3_m" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x1af30
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x1af30
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	shlq	$0x3, %rdx
    00000008: 	je	.Ltmp610 # Offset: 8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp611:
    00000010: 	movq	(%rdi,%rax), %rcx
    00000014: 	imulq	(%rsi,%rax), %rcx
    00000019: 	addq	$0x8, %rax
    0000001d: 	addq	%rcx, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	jne	.Ltmp611 # Offset: 35
    00000025: 	movq	%r8, %rax
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp610:
    00000030: 	xorl	%r8d, %r8d
    00000033: 	movq	%r8, %rax
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKmmET0_T_S3_m"

Binary Function "_Z14inner_product1IPKmmET0_T_S3_m" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x1af70
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x1af70
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp612 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	xorl	%r8d, %r8d
    0000000e: 	nop # Size: 2
.Ltmp613:
    00000010: 	movq	(%rdi,%rax,8), %rcx
    00000014: 	imulq	(%rsi,%rax,8), %rcx
    00000019: 	addq	$0x1, %rax
    0000001d: 	addq	%rcx, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	jne	.Ltmp613 # Offset: 35
    00000025: 	movq	%r8, %rax
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp612:
    00000030: 	xorl	%r8d, %r8d
    00000033: 	movq	%r8, %rax
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product2IPKmmET0_T_S3_m" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x1afb0
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x1afb0
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	shlq	$0x3, %rdx
    00000008: 	je	.Ltmp614 # Offset: 8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp615:
    00000010: 	movq	(%rdi,%rax), %rcx
    00000014: 	imulq	(%rsi,%rax), %rcx
    00000019: 	addq	$0x8, %rax
    0000001d: 	addq	%rcx, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	jne	.Ltmp615 # Offset: 35
    00000025: 	movq	%r8, %rax
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp614:
    00000030: 	xorl	%r8d, %r8d
    00000033: 	movq	%r8, %rax
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product3IPKmmET0_T_S3_m" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x1aff0
  Size        : 0x78
  MaxSize     : 0x80
  Offset      : 0x1aff0
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rdi, %r8
    0000000a: 	xorl	%r9d, %r9d
    0000000d: 	movq	%rsi, %rdi
    00000010: 	subq	$0x1, %r10
    00000014: 	je	.Ltmp616 # Offset: 20
    00000016: 	xorl	%eax, %eax
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp617:
    00000020: 	movq	(%r8,%rax,8), %rcx
    00000024: 	movq	0x8(%r8,%rax,8), %rsi
    00000029: 	imulq	(%rdi,%rax,8), %rcx
    0000002e: 	imulq	0x8(%rdi,%rax,8), %rsi
    00000034: 	addq	$0x2, %rax
    00000038: 	addq	%rsi, %rcx
    0000003b: 	addq	%rcx, %r9
    0000003e: 	cmpq	%r10, %rax
    00000041: 	jb	.Ltmp617 # Offset: 65
    00000043: 	leaq	-0x2(%rdx), %rax
    00000047: 	andq	$-0x2, %rax
    0000004b: 	addq	$0x2, %rax
    0000004f: 	cmpq	%rax, %rdx
    00000052: 	ja	.Ltmp618 # Offset: 82
    00000054: 	movq	%r9, %rax
    00000057: 	retq # Offset: 87
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp618:
    00000060: 	shlq	$0x3, %rax
    00000064: 	addq	%rax, %r8
    00000067: 	addq	%rax, %rdi
.Ltmp616:
    0000006a: 	movq	(%r8), %rax
    0000006d: 	imulq	(%rdi), %rax
    00000071: 	addq	%rax, %r9
    00000074: 	movq	%r9, %rax
    00000077: 	retq # Offset: 119
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product4IPKmmET0_T_S3_m" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x1b070
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x1b070
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movq	%rsi, %r11
    0000000b: 	movq	%rdx, %rbx
    0000000e: 	cmpq	$0x3, %rdx
    00000012: 	je	.Ltmp619 # Offset: 18
    00000018: 	leaq	-0x4(%rbx), %r9
    0000001c: 	movq	%rdi, %rdx
    0000001f: 	movq	%rsi, %rcx
    00000022: 	xorl	%r8d, %r8d
    00000025: 	movq	%r9, %rax
    00000028: 	shrq	$0x2, %rax
    0000002c: 	shlq	$0x5, %rax
    00000030: 	leaq	0x20(%rdi,%rax), %rdi
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp620:
    00000038: 	movq	(%rdx), %rax
    0000003b: 	movq	0x8(%rdx), %rsi
    0000003f: 	addq	$0x20, %rdx
    00000043: 	addq	$0x20, %rcx
    00000047: 	imulq	-0x18(%rcx), %rsi
    0000004c: 	imulq	-0x20(%rcx), %rax
    00000051: 	addq	%rsi, %rax
    00000054: 	movq	-0x10(%rdx), %rsi
    00000058: 	imulq	-0x10(%rcx), %rsi
    0000005d: 	addq	%rsi, %rax
    00000060: 	movq	-0x8(%rdx), %rsi
    00000064: 	imulq	-0x8(%rcx), %rsi
    00000069: 	addq	%rsi, %rax
    0000006c: 	addq	%rax, %r8
    0000006f: 	cmpq	%rdx, %rdi
    00000072: 	jne	.Ltmp620 # Offset: 114
    00000074: 	andq	$-0x4, %r9
    00000078: 	leaq	0x4(%r9), %rax
    0000007c: 	cmpq	%rax, %rbx
    0000007f: 	jbe	.Ltmp621 # Offset: 127
    00000081: 	movq	(%r11,%rax,8), %rdx
    00000085: 	imulq	(%r10,%rax,8), %rdx
    0000008a: 	leaq	(,%rax,8), %rcx
    00000092: 	leaq	0x5(%r9), %rax
    00000096: 	addq	%rdx, %r8
    00000099: 	cmpq	%rax, %rbx
    0000009c: 	jbe	.Ltmp621 # Offset: 156
    0000009e: 	movq	0x8(%r11,%rcx), %rdx
    000000a3: 	imulq	0x8(%r10,%rcx), %rdx
    000000a9: 	addq	$0x6, %r9
    000000ad: 	leaq	0x8(%rcx), %rax
    000000b1: 	addq	%rdx, %r8
    000000b4: 	cmpq	%r9, %rbx
    000000b7: 	jbe	.Ltmp621 # Offset: 183
.Ltmp622:
    000000b9: 	movq	0x8(%r11,%rax), %rdx
    000000be: 	imulq	0x8(%r10,%rax), %rdx
    000000c4: 	addq	$0x1, %r9
    000000c8: 	addq	%rdx, %r8
    000000cb: 	cmpq	%r9, %rbx
    000000ce: 	jbe	.Ltmp621 # Offset: 206
    000000d0: 	movq	0x10(%r10,%rax), %rdx
    000000d5: 	imulq	0x10(%r11,%rax), %rdx
    000000db: 	addq	%rdx, %r8
.Ltmp621:
    000000de: 	movq	%r8, %rax
    000000e1: 	popq	%rbx
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp619:
    000000e8: 	movq	0x8(%rsi), %r8
    000000ec: 	movq	(%rsi), %rax
    000000ef: 	movl	$0x2, %r9d
    000000f5: 	imulq	(%rdi), %rax
    000000f9: 	imulq	0x8(%rdi), %r8
    000000fe: 	addq	%rax, %r8
    00000101: 	movl	$0x8, %eax
    00000106: 	jmp	.Ltmp622 # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product5IPKmmET0_T_S3_m" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x1b180
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x1b180
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	pushq	%rbx
    00000008: 	movq	%rsi, %r10
    0000000b: 	movq	%rdx, %rdi
    0000000e: 	cmpq	$0x7, %rdx
    00000012: 	je	.Ltmp623 # Offset: 18
    00000018: 	movq	%rsi, %rcx
    0000001b: 	leaq	-0x8(%rdi), %rsi
    0000001f: 	movq	%r9, %rdx
    00000022: 	xorl	%r8d, %r8d
    00000025: 	movq	%rsi, %rax
    00000028: 	shrq	$0x3, %rax
    0000002c: 	shlq	$0x6, %rax
    00000030: 	leaq	0x40(%r9,%rax), %r11
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp624:
    00000038: 	movq	(%rdx), %rax
    0000003b: 	movq	0x8(%rdx), %rbx
    0000003f: 	addq	$0x40, %rdx
    00000043: 	addq	$0x40, %rcx
    00000047: 	imulq	-0x38(%rcx), %rbx
    0000004c: 	imulq	-0x40(%rcx), %rax
    00000051: 	addq	%rbx, %rax
    00000054: 	movq	-0x30(%rdx), %rbx
    00000058: 	imulq	-0x30(%rcx), %rbx
    0000005d: 	addq	%rbx, %rax
    00000060: 	movq	-0x28(%rdx), %rbx
    00000064: 	imulq	-0x28(%rcx), %rbx
    00000069: 	addq	%rbx, %rax
    0000006c: 	movq	-0x20(%rdx), %rbx
    00000070: 	imulq	-0x20(%rcx), %rbx
    00000075: 	addq	%rbx, %rax
    00000078: 	movq	-0x18(%rdx), %rbx
    0000007c: 	imulq	-0x18(%rcx), %rbx
    00000081: 	addq	%rbx, %rax
    00000084: 	movq	-0x10(%rdx), %rbx
    00000088: 	imulq	-0x10(%rcx), %rbx
    0000008d: 	addq	%rbx, %rax
    00000090: 	movq	-0x8(%rdx), %rbx
    00000094: 	imulq	-0x8(%rcx), %rbx
    00000099: 	addq	%rbx, %rax
    0000009c: 	addq	%rax, %r8
    0000009f: 	cmpq	%rdx, %r11
    000000a2: 	jne	.Ltmp624 # Offset: 162
    000000a4: 	andq	$-0x8, %rsi
    000000a8: 	leaq	0x8(%rsi), %rax
    000000ac: 	cmpq	%rax, %rdi
    000000af: 	jbe	.Ltmp625 # Offset: 175
    000000b5: 	movq	(%r10,%rax,8), %rdx
    000000b9: 	imulq	(%r9,%rax,8), %rdx
    000000be: 	leaq	(,%rax,8), %rcx
    000000c6: 	leaq	0x9(%rsi), %rax
    000000ca: 	addq	%rdx, %r8
    000000cd: 	cmpq	%rax, %rdi
    000000d0: 	jbe	.Ltmp625 # Offset: 208
    000000d6: 	movq	0x8(%r10,%rcx), %rdx
    000000db: 	imulq	0x8(%r9,%rcx), %rdx
    000000e1: 	addq	$0xa, %rsi
    000000e5: 	leaq	0x8(%rcx), %rax
    000000e9: 	addq	%rdx, %r8
    000000ec: 	cmpq	%rsi, %rdi
    000000ef: 	jbe	.Ltmp625 # Offset: 239
.Ltmp626:
    000000f5: 	movq	0x8(%r10,%rax), %rdx
    000000fa: 	imulq	0x8(%r9,%rax), %rdx
    00000100: 	addq	%rdx, %r8
    00000103: 	leaq	0x1(%rsi), %rdx
    00000107: 	cmpq	%rdx, %rdi
    0000010a: 	jbe	.Ltmp625 # Offset: 266
    0000010c: 	movq	0x10(%r10,%rax), %rdx
    00000111: 	imulq	0x10(%r9,%rax), %rdx
    00000117: 	addq	%rdx, %r8
    0000011a: 	leaq	0x2(%rsi), %rdx
    0000011e: 	cmpq	%rdx, %rdi
    00000121: 	jbe	.Ltmp625 # Offset: 289
    00000123: 	movq	0x18(%r10,%rax), %rdx
    00000128: 	imulq	0x18(%r9,%rax), %rdx
    0000012e: 	addq	%rdx, %r8
    00000131: 	leaq	0x3(%rsi), %rdx
    00000135: 	cmpq	%rdx, %rdi
    00000138: 	jbe	.Ltmp625 # Offset: 312
    0000013a: 	movq	0x20(%r10,%rax), %rdx
    0000013f: 	imulq	0x20(%r9,%rax), %rdx
    00000145: 	addq	%rdx, %r8
    00000148: 	leaq	0x4(%rsi), %rdx
    0000014c: 	cmpq	%rdx, %rdi
    0000014f: 	jbe	.Ltmp625 # Offset: 335
    00000151: 	movq	0x28(%r10,%rax), %rdx
    00000156: 	imulq	0x28(%r9,%rax), %rdx
    0000015c: 	addq	$0x5, %rsi
    00000160: 	addq	%rdx, %r8
    00000163: 	cmpq	%rsi, %rdi
    00000166: 	jbe	.Ltmp625 # Offset: 358
    00000168: 	movq	0x30(%r9,%rax), %rdx
    0000016d: 	imulq	0x30(%r10,%rax), %rdx
    00000173: 	addq	%rdx, %r8
.Ltmp625:
    00000176: 	movq	%r8, %rax
    00000179: 	popq	%rbx
    0000017a: 	retq # Offset: 378
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp623:
    00000180: 	movq	(%rsi), %rax
    00000183: 	movq	0x8(%r9), %r8
    00000187: 	imulq	(%r9), %rax
    0000018b: 	imulq	0x8(%rsi), %r8
    00000190: 	movl	$0x2, %esi
    00000195: 	addq	%rax, %r8
    00000198: 	movl	$0x8, %eax
    0000019d: 	jmp	.Ltmp626 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product6IPKmmET0_T_S3_m" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x1b330
  Size        : 0x2a2
  MaxSize     : 0x2b0
  Offset      : 0x1b330
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	pushq	%rbx
    00000008: 	movq	%rsi, %r10
    0000000b: 	movq	%rdx, %rdi
    0000000e: 	cmpq	$0xf, %rdx
    00000012: 	je	.Ltmp627 # Offset: 18
    00000018: 	movq	%rsi, %rdx
    0000001b: 	leaq	-0x10(%rdi), %rsi
    0000001f: 	movq	%r9, %rcx
    00000022: 	xorl	%r8d, %r8d
    00000025: 	movq	%rsi, %rax
    00000028: 	shrq	$0x4, %rax
    0000002c: 	shlq	$0x7, %rax
    00000030: 	leaq	0x80(%r10,%rax), %r11
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp628:
    00000040: 	movq	0x40(%rdx), %rax
    00000044: 	movq	0x48(%rdx), %rbx
    00000048: 	subq	$-0x80, %rdx
    0000004c: 	subq	$-0x80, %rcx
    00000050: 	addq	-0x80(%rdx), %rax
    00000054: 	addq	-0x78(%rdx), %rbx
    00000058: 	imulq	-0x80(%rcx), %rax
    0000005d: 	imulq	-0x78(%rcx), %rbx
    00000062: 	addq	%rbx, %rax
    00000065: 	movq	-0x30(%rdx), %rbx
    00000069: 	addq	-0x70(%rdx), %rbx
    0000006d: 	imulq	-0x70(%rcx), %rbx
    00000072: 	addq	%rbx, %rax
    00000075: 	movq	-0x28(%rdx), %rbx
    00000079: 	addq	-0x68(%rdx), %rbx
    0000007d: 	imulq	-0x68(%rcx), %rbx
    00000082: 	addq	%rbx, %rax
    00000085: 	movq	-0x20(%rdx), %rbx
    00000089: 	addq	-0x60(%rdx), %rbx
    0000008d: 	imulq	-0x60(%rcx), %rbx
    00000092: 	addq	%rbx, %rax
    00000095: 	movq	-0x18(%rdx), %rbx
    00000099: 	addq	-0x58(%rdx), %rbx
    0000009d: 	imulq	-0x58(%rcx), %rbx
    000000a2: 	addq	%rbx, %rax
    000000a5: 	movq	-0x10(%rdx), %rbx
    000000a9: 	addq	-0x50(%rdx), %rbx
    000000ad: 	imulq	-0x50(%rcx), %rbx
    000000b2: 	addq	%rbx, %rax
    000000b5: 	movq	-0x8(%rdx), %rbx
    000000b9: 	addq	-0x48(%rdx), %rbx
    000000bd: 	imulq	-0x48(%rcx), %rbx
    000000c2: 	addq	%rbx, %rax
    000000c5: 	addq	%rax, %r8
    000000c8: 	cmpq	%rdx, %r11
    000000cb: 	jne	.Ltmp628 # Offset: 203
    000000d1: 	andq	$-0x10, %rsi
    000000d5: 	leaq	0x10(%rsi), %rax
    000000d9: 	cmpq	%rax, %rdi
    000000dc: 	jbe	.Ltmp629 # Offset: 220
    000000e2: 	movq	(%r10,%rax,8), %rdx
    000000e6: 	imulq	(%r9,%rax,8), %rdx
    000000eb: 	leaq	(,%rax,8), %rcx
    000000f3: 	leaq	0x11(%rsi), %rax
    000000f7: 	addq	%rdx, %r8
    000000fa: 	cmpq	%rax, %rdi
    000000fd: 	jbe	.Ltmp629 # Offset: 253
    00000103: 	movq	0x8(%r10,%rcx), %rdx
    00000108: 	imulq	0x8(%r9,%rcx), %rdx
    0000010e: 	addq	$0x12, %rsi
    00000112: 	leaq	0x8(%rcx), %rax
    00000116: 	addq	%rdx, %r8
    00000119: 	cmpq	%rsi, %rdi
    0000011c: 	jbe	.Ltmp629 # Offset: 284
.Ltmp630:
    00000122: 	movq	0x8(%r10,%rax), %rdx
    00000127: 	imulq	0x8(%r9,%rax), %rdx
    0000012d: 	addq	%rdx, %r8
    00000130: 	leaq	0x1(%rsi), %rdx
    00000134: 	cmpq	%rdx, %rdi
    00000137: 	jbe	.Ltmp629 # Offset: 311
    0000013d: 	movq	0x10(%r10,%rax), %rdx
    00000142: 	imulq	0x10(%r9,%rax), %rdx
    00000148: 	addq	%rdx, %r8
    0000014b: 	leaq	0x2(%rsi), %rdx
    0000014f: 	cmpq	%rdx, %rdi
    00000152: 	jbe	.Ltmp629 # Offset: 338
    00000158: 	movq	0x18(%r10,%rax), %rdx
    0000015d: 	imulq	0x18(%r9,%rax), %rdx
    00000163: 	addq	%rdx, %r8
    00000166: 	leaq	0x3(%rsi), %rdx
    0000016a: 	cmpq	%rdx, %rdi
    0000016d: 	jbe	.Ltmp629 # Offset: 365
    00000173: 	movq	0x20(%r10,%rax), %rdx
    00000178: 	imulq	0x20(%r9,%rax), %rdx
    0000017e: 	addq	%rdx, %r8
    00000181: 	leaq	0x4(%rsi), %rdx
    00000185: 	cmpq	%rdx, %rdi
    00000188: 	jbe	.Ltmp629 # Offset: 392
    0000018e: 	movq	0x28(%r10,%rax), %rdx
    00000193: 	imulq	0x28(%r9,%rax), %rdx
    00000199: 	addq	%rdx, %r8
    0000019c: 	leaq	0x5(%rsi), %rdx
    000001a0: 	cmpq	%rdx, %rdi
    000001a3: 	jbe	.Ltmp629 # Offset: 419
    000001a9: 	movq	0x30(%r10,%rax), %rdx
    000001ae: 	imulq	0x30(%r9,%rax), %rdx
    000001b4: 	addq	%rdx, %r8
    000001b7: 	leaq	0x6(%rsi), %rdx
    000001bb: 	cmpq	%rdx, %rdi
    000001be: 	jbe	.Ltmp629 # Offset: 446
    000001c4: 	movq	0x38(%r10,%rax), %rdx
    000001c9: 	imulq	0x38(%r9,%rax), %rdx
    000001cf: 	addq	%rdx, %r8
    000001d2: 	leaq	0x7(%rsi), %rdx
    000001d6: 	cmpq	%rdx, %rdi
    000001d9: 	jbe	.Ltmp629 # Offset: 473
    000001df: 	movq	0x40(%r10,%rax), %rdx
    000001e4: 	imulq	0x40(%r9,%rax), %rdx
    000001ea: 	addq	%rdx, %r8
    000001ed: 	leaq	0x8(%rsi), %rdx
    000001f1: 	cmpq	%rdx, %rdi
    000001f4: 	jbe	.Ltmp629 # Offset: 500
    000001fa: 	movq	0x48(%r10,%rax), %rdx
    000001ff: 	imulq	0x48(%r9,%rax), %rdx
    00000205: 	addq	%rdx, %r8
    00000208: 	leaq	0x9(%rsi), %rdx
    0000020c: 	cmpq	%rdx, %rdi
    0000020f: 	jbe	.Ltmp629 # Offset: 527
    00000211: 	movq	0x50(%r10,%rax), %rdx
    00000216: 	imulq	0x50(%r9,%rax), %rdx
    0000021c: 	addq	%rdx, %r8
    0000021f: 	leaq	0xa(%rsi), %rdx
    00000223: 	cmpq	%rdx, %rdi
    00000226: 	jbe	.Ltmp629 # Offset: 550
    00000228: 	movq	0x58(%r10,%rax), %rdx
    0000022d: 	imulq	0x58(%r9,%rax), %rdx
    00000233: 	addq	%rdx, %r8
    00000236: 	leaq	0xb(%rsi), %rdx
    0000023a: 	cmpq	%rdx, %rdi
    0000023d: 	jbe	.Ltmp629 # Offset: 573
    0000023f: 	movq	0x60(%r10,%rax), %rdx
    00000244: 	imulq	0x60(%r9,%rax), %rdx
    0000024a: 	addq	%rdx, %r8
    0000024d: 	leaq	0xc(%rsi), %rdx
    00000251: 	cmpq	%rdx, %rdi
    00000254: 	jbe	.Ltmp629 # Offset: 596
    00000256: 	movq	0x68(%r10,%rax), %rdx
    0000025b: 	imulq	0x68(%r9,%rax), %rdx
    00000261: 	addq	$0xd, %rsi
    00000265: 	addq	%rdx, %r8
    00000268: 	cmpq	%rsi, %rdi
    0000026b: 	jbe	.Ltmp629 # Offset: 619
    0000026d: 	movq	0x70(%r9,%rax), %rdx
    00000272: 	imulq	0x70(%r10,%rax), %rdx
    00000278: 	addq	%rdx, %r8
.Ltmp629:
    0000027b: 	movq	%r8, %rax
    0000027e: 	popq	%rbx
    0000027f: 	retq # Offset: 639
.Ltmp627:
    00000280: 	movq	(%rsi), %rax
    00000283: 	movq	0x8(%r9), %r8
    00000287: 	imulq	(%r9), %rax
    0000028b: 	imulq	0x8(%rsi), %r8
    00000290: 	movl	$0x2, %esi
    00000295: 	addq	%rax, %r8
    00000298: 	movl	$0x8, %eax
    0000029d: 	jmp	.Ltmp630 # Offset: 669
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product7IPKmmET0_T_S3_m" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x1b5e0
  Size        : 0x85
  MaxSize     : 0x90
  Offset      : 0x1b5e0
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r10
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %r9
    0000000d: 	subq	$0x1, %r10
    00000011: 	je	.Ltmp631 # Offset: 17
    00000013: 	xorl	%eax, %eax
    00000015: 	xorl	%ecx, %ecx
    00000017: 	xorl	%edx, %edx
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp632:
    00000020: 	movq	(%rdi,%rdx,8), %rsi
    00000024: 	imulq	(%r8,%rdx,8), %rsi
    00000029: 	addq	%rsi, %rcx
    0000002c: 	movq	0x8(%rdi,%rdx,8), %rsi
    00000031: 	imulq	0x8(%r8,%rdx,8), %rsi
    00000037: 	addq	$0x2, %rdx
    0000003b: 	addq	%rsi, %rax
    0000003e: 	cmpq	%r10, %rdx
    00000041: 	jb	.Ltmp632 # Offset: 65
    00000043: 	leaq	-0x2(%r9), %rdx
    00000047: 	andq	$-0x2, %rdx
    0000004b: 	addq	$0x2, %rdx
    0000004f: 	cmpq	%rdx, %r9
    00000052: 	jbe	.Ltmp633 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp634:
    00000058: 	movq	(%rdi,%rdx,8), %rsi
    0000005c: 	imulq	(%r8,%rdx,8), %rsi
    00000061: 	addq	$0x1, %rdx
    00000065: 	addq	%rsi, %rcx
    00000068: 	cmpq	%rdx, %r9
    0000006b: 	ja	.Ltmp634 # Offset: 107
.Ltmp633:
    0000006d: 	addq	%rcx, %rax
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp631:
    00000078: 	movq	(%rsi), %rcx
    0000007b: 	imulq	(%rdi), %rcx
    0000007f: 	xorl	%eax, %eax
    00000081: 	addq	%rcx, %rax
    00000084: 	retq # Offset: 132
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product8IPKmmET0_T_S3_m" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x1b670
  Size        : 0xb9
  MaxSize     : 0xc0
  Offset      : 0x1b670
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r9
    00000009: 	movq	%rsi, %r10
    0000000c: 	movq	%rdx, %r11
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	cmpq	$0x3, %rdx
    00000015: 	je	.Ltmp635 # Offset: 21
    0000001b: 	movq	%rsi, %rcx
    0000001e: 	leaq	-0x4(%r11), %rsi
    00000022: 	movq	%rdi, %rdx
    00000025: 	xorl	%ebx, %ebx
    00000027: 	movq	%rsi, %rax
    0000002a: 	xorl	%ebp, %ebp
    0000002c: 	xorl	%r8d, %r8d
    0000002f: 	shrq	$0x2, %rax
    00000033: 	shlq	$0x5, %rax
    00000037: 	leaq	0x20(%rdi,%rax), %r12
    0000003c: 	xorl	%eax, %eax
    0000003e: 	nop # Size: 2
.Ltmp636:
    00000040: 	movq	(%rdx), %rdi
    00000043: 	imulq	(%rcx), %rdi
    00000047: 	addq	$0x20, %rdx
    0000004b: 	addq	$0x20, %rcx
    0000004f: 	addq	%rdi, %rax
    00000052: 	movq	-0x18(%rdx), %rdi
    00000056: 	imulq	-0x18(%rcx), %rdi
    0000005b: 	addq	%rdi, %r8
    0000005e: 	movq	-0x10(%rdx), %rdi
    00000062: 	imulq	-0x10(%rcx), %rdi
    00000067: 	addq	%rdi, %rbp
    0000006a: 	movq	-0x8(%rdx), %rdi
    0000006e: 	imulq	-0x8(%rcx), %rdi
    00000073: 	addq	%rdi, %rbx
    00000076: 	cmpq	%rdx, %r12
    00000079: 	jne	.Ltmp636 # Offset: 121
    0000007b: 	andq	$-0x4, %rsi
    0000007f: 	addq	%rbp, %r8
    00000082: 	leaq	0x4(%rsi), %rdx
    00000086: 	addq	%rbx, %r8
    00000089: 	cmpq	%r11, %rdx
    0000008c: 	jae	.Ltmp637 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp638:
    00000090: 	movq	(%r9,%rdx,8), %rcx
    00000094: 	imulq	(%r10,%rdx,8), %rcx
    00000099: 	addq	$0x1, %rdx
    0000009d: 	addq	%rcx, %rax
    000000a0: 	cmpq	%rdx, %r11
    000000a3: 	ja	.Ltmp638 # Offset: 163
.Ltmp637:
    000000a5: 	popq	%rbx
    000000a6: 	addq	%r8, %rax
    000000a9: 	popq	%rbp
    000000aa: 	popq	%r12
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp635:
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	xorl	%eax, %eax
    000000b5: 	xorl	%edx, %edx
    000000b7: 	jmp	.Ltmp638 # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKmmET0_T_S3_m"

Binary Function "_Z14inner_product9IPKmmET0_T_S3_m" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x1b730
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x1b730
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r11
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rsi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpq	$0x7, %rdx
    00000017: 	je	.Ltmp639 # Offset: 23
    0000001d: 	movq	%rdi, %rdx
    00000020: 	leaq	-0x8(%r11), %rdi
    00000024: 	movq	%rsi, %rcx
    00000027: 	xorl	%r9d, %r9d
    0000002a: 	movq	%rdi, %rax
    0000002d: 	xorl	%r10d, %r10d
    00000030: 	xorl	%r8d, %r8d
    00000033: 	shrq	$0x3, %rax
    00000037: 	shlq	$0x6, %rax
    0000003b: 	leaq	0x40(%rbx,%rax), %r12
    00000040: 	xorl	%eax, %eax
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp640:
    00000048: 	movq	(%rdx), %rsi
    0000004b: 	movq	0x20(%rdx), %r13
    0000004f: 	addq	$0x40, %rdx
    00000053: 	addq	$0x40, %rcx
    00000057: 	imulq	-0x20(%rcx), %r13
    0000005c: 	imulq	-0x40(%rcx), %rsi
    00000061: 	addq	%r13, %rsi
    00000064: 	movq	-0x18(%rdx), %r13
    00000068: 	imulq	-0x18(%rcx), %r13
    0000006d: 	addq	%rsi, %rax
    00000070: 	movq	-0x38(%rdx), %rsi
    00000074: 	imulq	-0x38(%rcx), %rsi
    00000079: 	addq	%r13, %rsi
    0000007c: 	movq	-0x10(%rdx), %r13
    00000080: 	imulq	-0x10(%rcx), %r13
    00000085: 	addq	%rsi, %r8
    00000088: 	movq	-0x30(%rdx), %rsi
    0000008c: 	imulq	-0x30(%rcx), %rsi
    00000091: 	addq	%r13, %rsi
    00000094: 	movq	-0x8(%rdx), %r13
    00000098: 	imulq	-0x8(%rcx), %r13
    0000009d: 	addq	%rsi, %r10
    000000a0: 	movq	-0x28(%rdx), %rsi
    000000a4: 	imulq	-0x28(%rcx), %rsi
    000000a9: 	addq	%r13, %rsi
    000000ac: 	addq	%rsi, %r9
    000000af: 	cmpq	%rdx, %r12
    000000b2: 	jne	.Ltmp640 # Offset: 178
    000000b4: 	andq	$-0x8, %rdi
    000000b8: 	addq	%r10, %r8
    000000bb: 	addq	$0x8, %rdi
    000000bf: 	addq	%r9, %r8
    000000c2: 	cmpq	%r11, %rdi
    000000c5: 	jae	.Ltmp641 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp642:
    000000d0: 	movq	(%rbx,%rdi,8), %rdx
    000000d4: 	imulq	(%rbp,%rdi,8), %rdx
    000000da: 	addq	$0x1, %rdi
    000000de: 	addq	%rdx, %rax
    000000e1: 	cmpq	%rdi, %r11
    000000e4: 	ja	.Ltmp642 # Offset: 228
.Ltmp641:
    000000e6: 	popq	%rbx
    000000e7: 	addq	%r8, %rax
    000000ea: 	popq	%rbp
    000000eb: 	popq	%r12
    000000ed: 	popq	%r13
    000000ef: 	retq # Offset: 239
.Ltmp639:
    000000f0: 	xorl	%r8d, %r8d
    000000f3: 	xorl	%eax, %eax
    000000f5: 	xorl	%edi, %edi
    000000f7: 	jmp	.Ltmp642 # Offset: 247
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKmmET0_T_S3_m"

Binary Function "_Z15inner_product10IPKmmET0_T_S3_m" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x1b830
  Size        : 0x27b
  MaxSize     : 0x280
  Offset      : 0x1b830
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKmmET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rdx, %r8
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	cmpq	$0xf, %rdx
    00000012: 	je	.Ltmp643 # Offset: 18
    00000018: 	leaq	-0x10(%rdx), %r9
    0000001c: 	movq	%r9, %r12
    0000001f: 	shrq	$0x4, %r12
    00000023: 	cmpq	$0xf, %r9
    00000027: 	jbe	.Ltmp644 # Offset: 39
    0000002d: 	pxor	%xmm3, %xmm3
    00000031: 	movq	%rsi, %rax
    00000034: 	movq	%rdi, %rdx
    00000037: 	xorl	%esi, %esi
    00000039: 	movdqa	%xmm3, %xmm4
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp645:
    00000040: 	movdqu	0x20(%rax), %xmm7
    00000045: 	addq	$0x1, %rsi
    00000049: 	subq	$-0x80, %rax
    0000004d: 	subq	$-0x80, %rdx
    00000051: 	movdqu	-0x20(%rax), %xmm2
    00000056: 	movdqu	-0x60(%rdx), %xmm6
    0000005b: 	paddq	%xmm7, %xmm2
    0000005f: 	movdqa	%xmm6, %xmm5
    00000063: 	movdqu	-0x80(%rax), %xmm7
    00000068: 	movdqa	%xmm2, %xmm0
    0000006c: 	psrlq	$0x20, %xmm5
    00000071: 	movdqa	%xmm2, %xmm1
    00000075: 	psrlq	$0x20, %xmm0
    0000007a: 	pmuludq	%xmm5, %xmm2
    0000007e: 	pmuludq	%xmm6, %xmm0
    00000082: 	pmuludq	%xmm6, %xmm1
    00000086: 	paddq	%xmm2, %xmm0
    0000008a: 	movdqu	-0x40(%rax), %xmm2
    0000008f: 	psllq	$0x20, %xmm0
    00000094: 	paddq	%xmm7, %xmm2
    00000098: 	movdqu	-0x80(%rdx), %xmm7
    0000009d: 	paddq	%xmm0, %xmm1
    000000a1: 	movdqa	%xmm2, %xmm0
    000000a5: 	movdqa	%xmm2, %xmm5
    000000a9: 	psrlq	$0x20, %xmm0
    000000ae: 	pmuludq	%xmm7, %xmm5
    000000b2: 	movdqa	%xmm7, %xmm6
    000000b6: 	psrlq	$0x20, %xmm6
    000000bb: 	pmuludq	%xmm7, %xmm0
    000000bf: 	movdqu	-0x50(%rax), %xmm7
    000000c4: 	pmuludq	%xmm6, %xmm2
    000000c8: 	movdqu	-0x50(%rdx), %xmm6
    000000cd: 	paddq	%xmm2, %xmm0
    000000d1: 	movdqu	-0x10(%rax), %xmm2
    000000d6: 	psllq	$0x20, %xmm0
    000000db: 	paddq	%xmm5, %xmm0
    000000df: 	paddq	%xmm7, %xmm2
    000000e3: 	movdqa	%xmm6, %xmm5
    000000e7: 	movdqu	-0x70(%rax), %xmm7
    000000ec: 	paddq	%xmm1, %xmm0
    000000f0: 	psrlq	$0x20, %xmm5
    000000f5: 	movdqa	%xmm2, %xmm1
    000000f9: 	paddq	%xmm0, %xmm4
    000000fd: 	pmuludq	%xmm6, %xmm1
    00000101: 	movdqa	%xmm2, %xmm0
    00000105: 	psrlq	$0x20, %xmm0
    0000010a: 	pmuludq	%xmm5, %xmm2
    0000010e: 	pmuludq	%xmm6, %xmm0
    00000112: 	paddq	%xmm2, %xmm0
    00000116: 	movdqu	-0x30(%rax), %xmm2
    0000011b: 	psllq	$0x20, %xmm0
    00000120: 	paddq	%xmm7, %xmm2
    00000124: 	movdqu	-0x70(%rdx), %xmm7
    00000129: 	paddq	%xmm0, %xmm1
    0000012d: 	movdqa	%xmm2, %xmm0
    00000131: 	movdqa	%xmm2, %xmm5
    00000135: 	psrlq	$0x20, %xmm0
    0000013a: 	pmuludq	%xmm7, %xmm5
    0000013e: 	movdqa	%xmm7, %xmm6
    00000142: 	psrlq	$0x20, %xmm6
    00000147: 	pmuludq	%xmm7, %xmm0
    0000014b: 	pmuludq	%xmm6, %xmm2
    0000014f: 	paddq	%xmm2, %xmm0
    00000153: 	psllq	$0x20, %xmm0
    00000158: 	paddq	%xmm5, %xmm0
    0000015c: 	paddq	%xmm1, %xmm0
    00000160: 	paddq	%xmm0, %xmm3
    00000164: 	cmpq	%r12, %rsi
    00000167: 	jb	.Ltmp645 # Offset: 359
    0000016d: 	movq	%xmm4, %rbp
    00000172: 	movq	%xmm3, %rbx
    00000177: 	psrldq	$0x8, %xmm4
    0000017c: 	psrldq	$0x8, %xmm3
    00000181: 	movq	%xmm4, %r11
    00000186: 	movq	%xmm3, %r10
    0000018b: 	shlq	$0x4, %r12
.Ltmp648:
    0000018f: 	leaq	(,%r12,8), %rdx
    00000197: 	movq	(%rcx,%r12,8), %rsi
    0000019b: 	addq	%rbx, %r10
    0000019e: 	andq	$-0x10, %r9
    000001a2: 	movq	0x20(%rcx,%rdx), %rax
    000001a7: 	addq	0x40(%rcx,%rdx), %rsi
    000001ac: 	addq	%r11, %r10
    000001af: 	addq	$0x10, %r9
    000001b3: 	imulq	(%rdi,%r12,8), %rsi
    000001b8: 	addq	0x60(%rcx,%rdx), %rax
    000001bd: 	imulq	0x20(%rdi,%rdx), %rax
    000001c3: 	addq	%rsi, %rax
    000001c6: 	movq	0x8(%rcx,%rdx), %rsi
    000001cb: 	addq	0x48(%rcx,%rdx), %rsi
    000001d0: 	imulq	0x8(%rdi,%rdx), %rsi
    000001d6: 	addq	%rbp, %rax
    000001d9: 	addq	%r10, %rsi
    000001dc: 	movq	0x10(%rcx,%rdx), %r10
    000001e1: 	addq	0x50(%rcx,%rdx), %r10
    000001e6: 	imulq	0x10(%rdi,%rdx), %r10
    000001ec: 	addq	%r10, %rsi
    000001ef: 	movq	0x18(%rcx,%rdx), %r10
    000001f4: 	addq	0x58(%rcx,%rdx), %r10
    000001f9: 	imulq	0x18(%rdi,%rdx), %r10
    000001ff: 	addq	%r10, %rsi
    00000202: 	movq	0x28(%rcx,%rdx), %r10
    00000207: 	addq	0x68(%rcx,%rdx), %r10
    0000020c: 	imulq	0x28(%rdi,%rdx), %r10
    00000212: 	addq	%r10, %rsi
    00000215: 	movq	0x30(%rcx,%rdx), %r10
    0000021a: 	addq	0x70(%rcx,%rdx), %r10
    0000021f: 	imulq	0x30(%rdi,%rdx), %r10
    00000225: 	addq	%r10, %rsi
    00000228: 	movq	0x38(%rcx,%rdx), %r10
    0000022d: 	addq	0x78(%rcx,%rdx), %r10
    00000232: 	imulq	0x38(%rdi,%rdx), %r10
    00000238: 	addq	%r10, %rsi
    0000023b: 	cmpq	%r8, %r9
    0000023e: 	jae	.Ltmp646 # Offset: 574
.Ltmp647:
    00000240: 	movq	(%rdi,%r9,8), %rdx
    00000244: 	imulq	(%rcx,%r9,8), %rdx
    00000249: 	addq	$0x1, %r9
    0000024d: 	addq	%rdx, %rax
    00000250: 	cmpq	%r9, %r8
    00000253: 	ja	.Ltmp647 # Offset: 595
.Ltmp646:
    00000255: 	popq	%rbx
    00000256: 	addq	%rsi, %rax
    00000259: 	popq	%rbp
    0000025a: 	popq	%r12
    0000025c: 	retq # Offset: 604
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp643:
    00000260: 	xorl	%esi, %esi
    00000262: 	xorl	%eax, %eax
    00000264: 	xorl	%r9d, %r9d
    00000267: 	jmp	.Ltmp647 # Offset: 615
.Ltmp644:
    00000269: 	xorl	%r10d, %r10d
    0000026c: 	xorl	%ebx, %ebx
    0000026e: 	xorl	%r11d, %r11d
    00000271: 	xorl	%ebp, %ebp
    00000273: 	xorl	%r12d, %r12d
    00000276: 	jmp	.Ltmp648 # Offset: 630
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKmmET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKffET0_T_S3_m" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x1bab0
  Size        : 0xe7
  MaxSize     : 0xf0
  Offset      : 0x1bab0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rdx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leaq	(%rdi,%rdx), %r8
    0000000f: 	cmpq	%rdi, %r8
    00000012: 	je	.Ltmp649 # Offset: 18
    00000018: 	subq	$0x4, %rdx
    0000001c: 	movq	%rdx, %rdi
    0000001f: 	shrq	$0x2, %rdi
    00000023: 	addq	$0x1, %rdi
    00000027: 	cmpq	$0x8, %rdx
    0000002b: 	jbe	.Ltmp650 # Offset: 43
    00000031: 	movq	%rdi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp651:
    00000048: 	movups	(%rcx,%rax), %xmm1
    0000004c: 	movups	(%rsi,%rax), %xmm3
    00000050: 	addq	$0x10, %rax
    00000054: 	mulps	%xmm3, %xmm1
    00000057: 	addss	%xmm1, %xmm0
    0000005b: 	movaps	%xmm1, %xmm2
    0000005e: 	shufps	$0x55, %xmm1, %xmm2
    00000062: 	addss	%xmm2, %xmm0
    00000066: 	movaps	%xmm1, %xmm2
    00000069: 	unpckhps	%xmm1, %xmm2
    0000006c: 	shufps	$0xff, %xmm1, %xmm1
    00000070: 	addss	%xmm2, %xmm0
    00000074: 	addss	%xmm1, %xmm0
    00000078: 	cmpq	%rdx, %rax
    0000007b: 	jne	.Ltmp651 # Offset: 123
    0000007d: 	movq	%rdi, %rax
    00000080: 	andq	$-0x4, %rax
    00000084: 	leaq	(,%rax,4), %rdx
    0000008c: 	addq	%rdx, %rcx
    0000008f: 	addq	%rdx, %rsi
    00000092: 	cmpq	%rax, %rdi
    00000095: 	je	.Ltmp652 # Offset: 149
.Ltmp654:
    00000097: 	movss	(%rcx), %xmm1
    0000009b: 	mulss	(%rsi), %xmm1
    0000009f: 	leaq	0x4(%rcx), %rax
    000000a3: 	addss	%xmm1, %xmm0
    000000a7: 	cmpq	%rax, %r8
    000000aa: 	je	.Ltmp653 # Offset: 170
    000000ac: 	movss	0x4(%rcx), %xmm1
    000000b1: 	mulss	0x4(%rsi), %xmm1
    000000b6: 	leaq	0x8(%rcx), %rax
    000000ba: 	addss	%xmm1, %xmm0
    000000be: 	cmpq	%rax, %r8
    000000c1: 	je	.Ltmp653 # Offset: 193
    000000c3: 	movss	0x8(%rcx), %xmm1
    000000c8: 	mulss	0x8(%rsi), %xmm1
    000000cd: 	addss	%xmm1, %xmm0
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    000000d8: 	pxor	%xmm0, %xmm0
.Ltmp653:
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp652:
    000000e0: 	retq # Offset: 224
.Ltmp650:
    000000e1: 	pxor	%xmm0, %xmm0
    000000e5: 	jmp	.Ltmp654 # Offset: 229
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKffET0_T_S3_m"

Binary Function "_Z14inner_product1IPKffET0_T_S3_m" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x1bba0
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0x1bba0
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp655 # Offset: 10
    00000010: 	leaq	-0x1(%rdx), %rax
    00000014: 	cmpq	$0x2, %rax
    00000018: 	jbe	.Ltmp656 # Offset: 24
    0000001e: 	movq	%rdx, %rdi
    00000021: 	xorl	%eax, %eax
    00000023: 	pxor	%xmm0, %xmm0
    00000027: 	shrq	$0x2, %rdi
    0000002b: 	shlq	$0x4, %rdi
    0000002f: 	nop # Size: 1
.Ltmp657:
    00000030: 	movups	(%rcx,%rax), %xmm1
    00000034: 	movups	(%rsi,%rax), %xmm3
    00000038: 	addq	$0x10, %rax
    0000003c: 	mulps	%xmm3, %xmm1
    0000003f: 	addss	%xmm1, %xmm0
    00000043: 	movaps	%xmm1, %xmm2
    00000046: 	shufps	$0x55, %xmm1, %xmm2
    0000004a: 	addss	%xmm2, %xmm0
    0000004e: 	movaps	%xmm1, %xmm2
    00000051: 	unpckhps	%xmm1, %xmm2
    00000054: 	shufps	$0xff, %xmm1, %xmm1
    00000058: 	addss	%xmm2, %xmm0
    0000005c: 	addss	%xmm1, %xmm0
    00000060: 	cmpq	%rdi, %rax
    00000063: 	jne	.Ltmp657 # Offset: 99
    00000065: 	movq	%rdx, %rax
    00000068: 	andq	$-0x4, %rax
    0000006c: 	testb	$0x3, %dl
    0000006f: 	je	.Ltmp658 # Offset: 111
.Ltmp660:
    00000071: 	movss	(%rcx,%rax,4), %xmm1
    00000076: 	mulss	(%rsi,%rax,4), %xmm1
    0000007b: 	leaq	0x1(%rax), %r8
    0000007f: 	leaq	(,%rax,4), %rdi
    00000087: 	addss	%xmm1, %xmm0
    0000008b: 	cmpq	%r8, %rdx
    0000008e: 	jbe	.Ltmp659 # Offset: 142
    00000090: 	movss	0x4(%rcx,%rdi), %xmm1
    00000096: 	mulss	0x4(%rsi,%rdi), %xmm1
    0000009c: 	addq	$0x2, %rax
    000000a0: 	addss	%xmm1, %xmm0
    000000a4: 	cmpq	%rax, %rdx
    000000a7: 	jbe	.Ltmp659 # Offset: 167
    000000a9: 	movss	0x8(%rsi,%rdi), %xmm1
    000000af: 	mulss	0x8(%rcx,%rdi), %xmm1
    000000b5: 	addss	%xmm1, %xmm0
    000000b9: 	retq # Offset: 185
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp655:
    000000c0: 	pxor	%xmm0, %xmm0
.Ltmp659:
    000000c4: 	retq # Offset: 196
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp658:
    000000c8: 	retq # Offset: 200
.Ltmp656:
    000000c9: 	xorl	%eax, %eax
    000000cb: 	pxor	%xmm0, %xmm0
    000000cf: 	jmp	.Ltmp660 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKffET0_T_S3_m"

Binary Function "_Z14inner_product2IPKffET0_T_S3_m" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x1bc80
  Size        : 0xe7
  MaxSize     : 0xf0
  Offset      : 0x1bc80
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rdx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leaq	(%rdi,%rdx), %r8
    0000000f: 	cmpq	%r8, %rdi
    00000012: 	je	.Ltmp661 # Offset: 18
    00000018: 	subq	$0x4, %rdx
    0000001c: 	movq	%rdx, %rdi
    0000001f: 	shrq	$0x2, %rdi
    00000023: 	addq	$0x1, %rdi
    00000027: 	cmpq	$0x8, %rdx
    0000002b: 	jbe	.Ltmp662 # Offset: 43
    00000031: 	movq	%rdi, %rdx
    00000034: 	xorl	%eax, %eax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rdx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp663:
    00000048: 	movups	(%rcx,%rax), %xmm1
    0000004c: 	movups	(%rsi,%rax), %xmm3
    00000050: 	addq	$0x10, %rax
    00000054: 	mulps	%xmm3, %xmm1
    00000057: 	addss	%xmm1, %xmm0
    0000005b: 	movaps	%xmm1, %xmm2
    0000005e: 	shufps	$0x55, %xmm1, %xmm2
    00000062: 	addss	%xmm2, %xmm0
    00000066: 	movaps	%xmm1, %xmm2
    00000069: 	unpckhps	%xmm1, %xmm2
    0000006c: 	shufps	$0xff, %xmm1, %xmm1
    00000070: 	addss	%xmm2, %xmm0
    00000074: 	addss	%xmm1, %xmm0
    00000078: 	cmpq	%rdx, %rax
    0000007b: 	jne	.Ltmp663 # Offset: 123
    0000007d: 	movq	%rdi, %rax
    00000080: 	andq	$-0x4, %rax
    00000084: 	leaq	(,%rax,4), %rdx
    0000008c: 	addq	%rdx, %rcx
    0000008f: 	addq	%rdx, %rsi
    00000092: 	cmpq	%rax, %rdi
    00000095: 	je	.Ltmp664 # Offset: 149
.Ltmp666:
    00000097: 	movss	(%rcx), %xmm1
    0000009b: 	mulss	(%rsi), %xmm1
    0000009f: 	leaq	0x4(%rcx), %rax
    000000a3: 	addss	%xmm1, %xmm0
    000000a7: 	cmpq	%rax, %r8
    000000aa: 	je	.Ltmp665 # Offset: 170
    000000ac: 	movss	0x4(%rcx), %xmm1
    000000b1: 	mulss	0x4(%rsi), %xmm1
    000000b6: 	leaq	0x8(%rcx), %rax
    000000ba: 	addss	%xmm1, %xmm0
    000000be: 	cmpq	%rax, %r8
    000000c1: 	je	.Ltmp665 # Offset: 193
    000000c3: 	movss	0x8(%rcx), %xmm1
    000000c8: 	mulss	0x8(%rsi), %xmm1
    000000cd: 	addss	%xmm1, %xmm0
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp661:
    000000d8: 	pxor	%xmm0, %xmm0
.Ltmp665:
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp664:
    000000e0: 	retq # Offset: 224
.Ltmp662:
    000000e1: 	pxor	%xmm0, %xmm0
    000000e5: 	jmp	.Ltmp666 # Offset: 229
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKffET0_T_S3_m"

Binary Function "_Z14inner_product3IPKffET0_T_S3_m" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x1bd70
  Size        : 0xde
  MaxSize     : 0xe0
  Offset      : 0x1bd70
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	$0x1, %rdx
    0000000b: 	je	.Ltmp667 # Offset: 11
    00000011: 	leaq	-0x2(%rdx), %rsi
    00000015: 	movq	%rsi, %r9
    00000018: 	shrq	%r9
    0000001b: 	addq	$0x1, %r9
    0000001f: 	cmpq	$0x1, %rsi
    00000023: 	jbe	.Ltmp668 # Offset: 35
    00000029: 	movq	%r9, %r8
    0000002c: 	xorl	%eax, %eax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	shrq	%r8
    00000035: 	shlq	$0x4, %r8
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp669:
    00000040: 	movups	(%rdi,%rax), %xmm1
    00000044: 	movups	(%rcx,%rax), %xmm3
    00000048: 	addq	$0x10, %rax
    0000004c: 	mulps	%xmm3, %xmm1
    0000004f: 	addss	%xmm1, %xmm0
    00000053: 	movaps	%xmm1, %xmm2
    00000056: 	shufps	$0x55, %xmm1, %xmm2
    0000005a: 	addss	%xmm2, %xmm0
    0000005e: 	movaps	%xmm1, %xmm2
    00000061: 	unpckhps	%xmm1, %xmm2
    00000064: 	shufps	$0xff, %xmm1, %xmm1
    00000068: 	addss	%xmm2, %xmm0
    0000006c: 	addss	%xmm1, %xmm0
    00000070: 	cmpq	%r8, %rax
    00000073: 	jne	.Ltmp669 # Offset: 115
    00000075: 	movq	%r9, %rax
    00000078: 	andq	$-0x2, %rax
    0000007c: 	andl	$0x1, %r9d
    00000080: 	je	.Ltmp670 # Offset: 128
.Ltmp673:
    00000082: 	movq	(%rdi,%rax,8), %xmm1
    00000087: 	movq	(%rcx,%rax,8), %xmm2
    0000008c: 	mulps	%xmm2, %xmm1
    0000008f: 	addss	%xmm1, %xmm0
    00000093: 	shufps	$0xe5, %xmm1, %xmm1
    00000097: 	addss	%xmm1, %xmm0
.Ltmp670:
    0000009b: 	andq	$-0x2, %rsi
    0000009f: 	addq	$0x2, %rsi
    000000a3: 	cmpq	%rsi, %rdx
    000000a6: 	ja	.Ltmp671 # Offset: 166
    000000a8: 	retq # Offset: 168
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp671:
    000000b0: 	shlq	$0x2, %rsi
    000000b4: 	addq	%rsi, %rdi
    000000b7: 	addq	%rsi, %rcx
.Ltmp672:
    000000ba: 	movss	(%rdi), %xmm1
    000000be: 	mulss	(%rcx), %xmm1
    000000c2: 	addss	%xmm1, %xmm0
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp667:
    000000d0: 	pxor	%xmm0, %xmm0
    000000d4: 	jmp	.Ltmp672 # Offset: 212
.Ltmp668:
    000000d6: 	xorl	%eax, %eax
    000000d8: 	pxor	%xmm0, %xmm0
    000000dc: 	jmp	.Ltmp673 # Offset: 220
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKffET0_T_S3_m"

Binary Function "_Z14inner_product4IPKffET0_T_S3_m" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x1be50
  Size        : 0x149
  MaxSize     : 0x150
  Offset      : 0x1be50
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %r8
    0000000a: 	cmpq	$0x3, %rdx
    0000000e: 	je	.Ltmp674 # Offset: 14
    00000014: 	leaq	-0x4(%rdx), %r9
    00000018: 	xorl	%eax, %eax
    0000001a: 	pxor	%xmm0, %xmm0
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%r9, %rsi
    00000023: 	shrq	$0x2, %rsi
    00000027: 	addq	$0x1, %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp675:
    00000030: 	movups	(%rcx,%rax), %xmm1
    00000034: 	movups	(%rdi,%rax), %xmm3
    00000038: 	addq	$0x1, %rdx
    0000003c: 	addq	$0x10, %rax
    00000040: 	mulps	%xmm3, %xmm1
    00000043: 	addss	%xmm1, %xmm0
    00000047: 	movaps	%xmm1, %xmm2
    0000004a: 	shufps	$0x55, %xmm1, %xmm2
    0000004e: 	addss	%xmm0, %xmm2
    00000052: 	movaps	%xmm1, %xmm0
    00000055: 	unpckhps	%xmm1, %xmm0
    00000058: 	shufps	$0xff, %xmm1, %xmm1
    0000005c: 	addss	%xmm2, %xmm0
    00000060: 	addss	%xmm1, %xmm0
    00000064: 	cmpq	%rsi, %rdx
    00000067: 	jb	.Ltmp675 # Offset: 103
    00000069: 	andq	$-0x4, %r9
    0000006d: 	leaq	0x4(%r9), %rax
    00000071: 	cmpq	%rax, %r8
    00000074: 	jbe	.Ltmp676 # Offset: 116
    0000007a: 	addq	$0x5, %r9
    0000007e: 	movq	%r8, %rsi
    00000081: 	movl	$0x1, %edx
    00000086: 	subq	%rax, %rsi
    00000089: 	cmpq	%r9, %r8
    0000008c: 	cmovaeq	%rsi, %rdx
    00000090: 	subq	$0x1, %rsi
    00000094: 	cmpq	$0x2, %rsi
    00000098: 	jbe	.Ltmp677 # Offset: 152
    0000009a: 	cmpq	%r9, %r8
    0000009d: 	jb	.Ltmp677 # Offset: 157
    0000009f: 	movups	(%rcx,%rax,4), %xmm1
    000000a3: 	movups	(%rdi,%rax,4), %xmm4
    000000a7: 	movq	%rdx, %rsi
    000000aa: 	andq	$-0x4, %rsi
    000000ae: 	mulps	%xmm4, %xmm1
    000000b1: 	addq	%rsi, %rax
    000000b4: 	addss	%xmm1, %xmm0
    000000b8: 	movaps	%xmm1, %xmm2
    000000bb: 	shufps	$0x55, %xmm1, %xmm2
    000000bf: 	addss	%xmm0, %xmm2
    000000c3: 	movaps	%xmm1, %xmm0
    000000c6: 	unpckhps	%xmm1, %xmm0
    000000c9: 	shufps	$0xff, %xmm1, %xmm1
    000000cd: 	addss	%xmm2, %xmm0
    000000d1: 	addss	%xmm1, %xmm0
    000000d5: 	cmpq	%rdx, %rsi
    000000d8: 	je	.Ltmp676 # Offset: 216
.Ltmp677:
    000000da: 	movss	(%rdi,%rax,4), %xmm1
    000000df: 	mulss	(%rcx,%rax,4), %xmm1
    000000e4: 	leaq	(,%rax,4), %rdx
    000000ec: 	addq	$0x1, %rax
    000000f0: 	addss	%xmm1, %xmm0
    000000f4: 	cmpq	%rax, %r8
    000000f7: 	jbe	.Ltmp676 # Offset: 247
.Ltmp678:
    000000f9: 	movss	0x4(%rdi,%rdx), %xmm1
    000000ff: 	mulss	0x4(%rcx,%rdx), %xmm1
    00000105: 	addq	$0x1, %rax
    00000109: 	addss	%xmm1, %xmm0
    0000010d: 	cmpq	%r8, %rax
    00000110: 	jae	.Ltmp676 # Offset: 272
    00000112: 	movss	0x8(%rcx,%rdx), %xmm1
    00000118: 	mulss	0x8(%rdi,%rdx), %xmm1
    0000011e: 	addss	%xmm1, %xmm0
    00000122: 	retq # Offset: 290
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp676:
    00000128: 	retq # Offset: 296
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp674:
    00000130: 	movss	(%rdi), %xmm0
    00000134: 	mulss	(%rsi), %xmm0
    00000138: 	xorl	%edx, %edx
    0000013a: 	movl	$0x1, %eax
    0000013f: 	addss	DATAat0x32540(%rip), %xmm0
    00000147: 	jmp	.Ltmp678 # Offset: 327
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKffET0_T_S3_m"

Binary Function "_Z14inner_product5IPKffET0_T_S3_m" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x1bfa0
  Size        : 0x1c0
  MaxSize     : 0x1c0
  Offset      : 0x1bfa0
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rdx, %r8
    0000000a: 	cmpq	$0x7, %rdx
    0000000e: 	je	.Ltmp679 # Offset: 14
    00000014: 	leaq	-0x8(%rdx), %r9
    00000018: 	xorl	%eax, %eax
    0000001a: 	pxor	%xmm0, %xmm0
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%r9, %rdi
    00000023: 	shrq	$0x3, %rdi
    00000027: 	addq	$0x1, %rdi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp680:
    00000030: 	movups	(%rsi,%rax), %xmm1
    00000034: 	movups	(%rcx,%rax), %xmm4
    00000038: 	addq	$0x1, %rdx
    0000003c: 	movups	0x10(%rsi,%rax), %xmm2
    00000041: 	movups	0x10(%rcx,%rax), %xmm5
    00000046: 	addq	$0x20, %rax
    0000004a: 	mulps	%xmm4, %xmm1
    0000004d: 	mulps	%xmm5, %xmm2
    00000050: 	addss	%xmm1, %xmm0
    00000054: 	movaps	%xmm1, %xmm3
    00000057: 	shufps	$0x55, %xmm1, %xmm3
    0000005b: 	addss	%xmm0, %xmm3
    0000005f: 	movaps	%xmm1, %xmm0
    00000062: 	unpckhps	%xmm1, %xmm0
    00000065: 	shufps	$0xff, %xmm1, %xmm1
    00000069: 	addss	%xmm3, %xmm0
    0000006d: 	addss	%xmm0, %xmm1
    00000071: 	movaps	%xmm2, %xmm0
    00000074: 	addss	%xmm1, %xmm0
    00000078: 	movaps	%xmm2, %xmm1
    0000007b: 	shufps	$0x55, %xmm2, %xmm1
    0000007f: 	addss	%xmm0, %xmm1
    00000083: 	movaps	%xmm2, %xmm0
    00000086: 	unpckhps	%xmm2, %xmm0
    00000089: 	shufps	$0xff, %xmm2, %xmm2
    0000008d: 	addss	%xmm1, %xmm0
    00000091: 	addss	%xmm2, %xmm0
    00000095: 	cmpq	%rdx, %rdi
    00000098: 	ja	.Ltmp680 # Offset: 152
    0000009a: 	andq	$-0x8, %r9
    0000009e: 	leaq	0x8(%r9), %rax
    000000a2: 	cmpq	%rax, %r8
    000000a5: 	jbe	.Ltmp681 # Offset: 165
    000000ab: 	addq	$0x9, %r9
    000000af: 	movq	%r8, %rdi
    000000b2: 	movl	$0x1, %edx
    000000b7: 	subq	%rax, %rdi
    000000ba: 	cmpq	%r9, %r8
    000000bd: 	cmovaeq	%rdi, %rdx
    000000c1: 	subq	$0x1, %rdi
    000000c5: 	cmpq	$0x2, %rdi
    000000c9: 	jbe	.Ltmp682 # Offset: 201
    000000cb: 	cmpq	%r9, %r8
    000000ce: 	jb	.Ltmp682 # Offset: 206
.Ltmp685:
    000000d0: 	leaq	(,%rax,4), %rdi
    000000d8: 	movq	%rdx, %r10
    000000db: 	leaq	(%rcx,%rdi), %r9
    000000df: 	addq	%rsi, %rdi
    000000e2: 	shrq	$0x2, %r10
    000000e6: 	movups	(%r9), %xmm1
    000000ea: 	movups	(%rdi), %xmm6
    000000ed: 	mulps	%xmm6, %xmm1
    000000f0: 	movaps	%xmm1, %xmm2
    000000f3: 	addss	%xmm0, %xmm2
    000000f7: 	movaps	%xmm1, %xmm0
    000000fa: 	shufps	$0x55, %xmm1, %xmm0
    000000fe: 	addss	%xmm0, %xmm2
    00000102: 	movaps	%xmm1, %xmm0
    00000105: 	unpckhps	%xmm1, %xmm0
    00000108: 	shufps	$0xff, %xmm1, %xmm1
    0000010c: 	addss	%xmm2, %xmm0
    00000110: 	addss	%xmm1, %xmm0
    00000114: 	cmpq	$0x1, %r10
    00000118: 	jne	.Ltmp683 # Offset: 280
.Ltmp684:
    0000011a: 	movq	%rdx, %rdi
    0000011d: 	andq	$-0x4, %rdi
    00000121: 	addq	%rdi, %rax
    00000124: 	cmpq	%rdi, %rdx
    00000127: 	je	.Ltmp681 # Offset: 295
.Ltmp682:
    00000129: 	movss	(%rcx,%rax,4), %xmm1
    0000012e: 	mulss	(%rsi,%rax,4), %xmm1
    00000133: 	leaq	0x1(%rax), %rdi
    00000137: 	leaq	(,%rax,4), %rdx
    0000013f: 	addss	%xmm1, %xmm0
    00000143: 	cmpq	%rdi, %r8
    00000146: 	jbe	.Ltmp681 # Offset: 326
    00000148: 	movss	0x4(%rcx,%rdx), %xmm1
    0000014e: 	mulss	0x4(%rsi,%rdx), %xmm1
    00000154: 	addq	$0x2, %rax
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	cmpq	%r8, %rax
    0000015f: 	jae	.Ltmp681 # Offset: 351
    00000161: 	movss	0x8(%rsi,%rdx), %xmm1
    00000167: 	mulss	0x8(%rcx,%rdx), %xmm1
    0000016d: 	addss	%xmm1, %xmm0
.Ltmp681:
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp683:
    00000178: 	movups	0x10(%r9), %xmm2
    0000017d: 	movups	0x10(%rdi), %xmm1
    00000181: 	mulps	%xmm2, %xmm1
    00000184: 	addss	%xmm1, %xmm0
    00000188: 	movaps	%xmm1, %xmm2
    0000018b: 	shufps	$0x55, %xmm1, %xmm2
    0000018f: 	addss	%xmm0, %xmm2
    00000193: 	movaps	%xmm1, %xmm0
    00000196: 	unpckhps	%xmm1, %xmm0
    00000199: 	shufps	$0xff, %xmm1, %xmm1
    0000019d: 	addss	%xmm2, %xmm0
    000001a1: 	addss	%xmm1, %xmm0
    000001a5: 	jmp	.Ltmp684 # Offset: 421
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp679:
    000001b0: 	movl	$0x7, %edx
    000001b5: 	xorl	%eax, %eax
    000001b7: 	pxor	%xmm0, %xmm0
    000001bb: 	jmp	.Ltmp685 # Offset: 443
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKffET0_T_S3_m"

Binary Function "_Z14inner_product6IPKffET0_T_S3_m" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x1c160
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0x1c160
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %r10
    0000000a: 	cmpq	$0xf, %rdx
    0000000e: 	je	.Ltmp686 # Offset: 14
    00000014: 	leaq	-0x10(%rdx), %rsi
    00000018: 	movq	%rsi, %rdx
    0000001b: 	shrq	$0x4, %rdx
    0000001f: 	cmpq	$0xf, %rsi
    00000023: 	jbe	.Ltmp687 # Offset: 35
    00000029: 	movq	%rcx, %rax
    0000002c: 	movq	%rdi, %r8
    0000002f: 	pxor	%xmm4, %xmm4
    00000033: 	xorl	%r9d, %r9d
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp688:
    00000040: 	movups	(%r8), %xmm6
    00000044: 	movups	(%rax), %xmm2
    00000047: 	addq	$0x1, %r9
    0000004b: 	addq	$0x40, %rax
    0000004f: 	movups	0x10(%r8), %xmm7
    00000054: 	movups	-0x30(%rax), %xmm1
    00000058: 	addq	$0x40, %r8
    0000005c: 	mulps	%xmm6, %xmm2
    0000005f: 	movups	-0x20(%rax), %xmm0
    00000063: 	movups	-0x10(%rax), %xmm3
    00000067: 	mulps	%xmm7, %xmm1
    0000006a: 	mulps	%xmm6, %xmm0
    0000006d: 	mulps	%xmm7, %xmm3
    00000070: 	addss	%xmm2, %xmm4
    00000074: 	movaps	%xmm2, %xmm5
    00000077: 	shufps	$0x55, %xmm2, %xmm5
    0000007b: 	addss	%xmm4, %xmm5
    0000007f: 	movaps	%xmm2, %xmm4
    00000082: 	unpckhps	%xmm2, %xmm4
    00000085: 	shufps	$0xff, %xmm2, %xmm2
    00000089: 	addss	%xmm5, %xmm4
    0000008d: 	addss	%xmm4, %xmm2
    00000091: 	movaps	%xmm1, %xmm4
    00000094: 	shufps	$0x55, %xmm1, %xmm4
    00000098: 	addss	%xmm1, %xmm2
    0000009c: 	addss	%xmm2, %xmm4
    000000a0: 	movaps	%xmm1, %xmm2
    000000a3: 	unpckhps	%xmm1, %xmm2
    000000a6: 	shufps	$0xff, %xmm1, %xmm1
    000000aa: 	addss	%xmm4, %xmm2
    000000ae: 	movaps	%xmm3, %xmm4
    000000b1: 	unpckhps	%xmm3, %xmm4
    000000b4: 	addss	%xmm2, %xmm1
    000000b8: 	movaps	%xmm0, %xmm2
    000000bb: 	shufps	$0x55, %xmm0, %xmm2
    000000bf: 	addss	%xmm0, %xmm1
    000000c3: 	addss	%xmm1, %xmm2
    000000c7: 	movaps	%xmm0, %xmm1
    000000ca: 	unpckhps	%xmm0, %xmm1
    000000cd: 	shufps	$0xff, %xmm0, %xmm0
    000000d1: 	addss	%xmm2, %xmm1
    000000d5: 	addss	%xmm1, %xmm0
    000000d9: 	movaps	%xmm3, %xmm1
    000000dc: 	addss	%xmm0, %xmm1
    000000e0: 	movaps	%xmm3, %xmm0
    000000e3: 	shufps	$0x55, %xmm3, %xmm0
    000000e7: 	shufps	$0xff, %xmm3, %xmm3
    000000eb: 	addss	%xmm1, %xmm0
    000000ef: 	addss	%xmm0, %xmm4
    000000f3: 	addss	%xmm3, %xmm4
    000000f7: 	cmpq	%rdx, %r9
    000000fa: 	jb	.Ltmp688 # Offset: 250
    00000100: 	shlq	$0x4, %rdx
.Ltmp693:
    00000104: 	movss	(%rdi,%rdx,4), %xmm7
    00000109: 	movss	(%rcx,%rdx,4), %xmm9
    0000010f: 	leaq	(,%rdx,4), %rax
    00000117: 	movss	0x4(%rdi,%rax), %xmm6
    0000011d: 	movss	0x8(%rdi,%rax), %xmm5
    00000123: 	mulss	%xmm7, %xmm9
    00000128: 	movss	0xc(%rdi,%rax), %xmm8
    0000012f: 	movss	0x10(%rdi,%rax), %xmm3
    00000135: 	movss	0x14(%rdi,%rax), %xmm2
    0000013b: 	movss	0x18(%rdi,%rax), %xmm1
    00000141: 	movss	0x1c(%rdi,%rax), %xmm0
    00000147: 	mulss	0x20(%rcx,%rax), %xmm7
    0000014d: 	addss	%xmm4, %xmm9
    00000152: 	movss	0x4(%rcx,%rax), %xmm4
    00000158: 	mulss	%xmm6, %xmm4
    0000015c: 	mulss	0x24(%rcx,%rax), %xmm6
    00000162: 	addss	%xmm9, %xmm4
    00000167: 	movss	0x8(%rcx,%rax), %xmm9
    0000016e: 	mulss	%xmm5, %xmm9
    00000173: 	mulss	0x28(%rcx,%rax), %xmm5
    00000179: 	addss	%xmm4, %xmm9
    0000017e: 	movss	0xc(%rcx,%rax), %xmm4
    00000184: 	mulss	%xmm8, %xmm4
    00000189: 	addss	%xmm9, %xmm4
    0000018e: 	movss	0x10(%rcx,%rax), %xmm9
    00000195: 	mulss	%xmm3, %xmm9
    0000019a: 	mulss	0x30(%rcx,%rax), %xmm3
    000001a0: 	addss	%xmm4, %xmm9
    000001a5: 	movss	0x14(%rcx,%rax), %xmm4
    000001ab: 	mulss	%xmm2, %xmm4
    000001af: 	mulss	0x34(%rcx,%rax), %xmm2
    000001b5: 	addss	%xmm9, %xmm4
    000001ba: 	movss	0x18(%rcx,%rax), %xmm9
    000001c1: 	mulss	%xmm1, %xmm9
    000001c6: 	mulss	0x38(%rcx,%rax), %xmm1
    000001cc: 	addss	%xmm4, %xmm9
    000001d1: 	movss	0x1c(%rcx,%rax), %xmm4
    000001d7: 	mulss	%xmm0, %xmm4
    000001db: 	mulss	0x3c(%rcx,%rax), %xmm0
    000001e1: 	addss	%xmm9, %xmm4
    000001e6: 	addss	%xmm4, %xmm7
    000001ea: 	movss	0x2c(%rcx,%rax), %xmm4
    000001f0: 	movq	%rsi, %rax
    000001f3: 	andq	$-0x10, %rax
    000001f7: 	mulss	%xmm8, %xmm4
    000001fc: 	leaq	0x10(%rax), %rdx
    00000200: 	addss	%xmm7, %xmm6
    00000204: 	addss	%xmm6, %xmm5
    00000208: 	addss	%xmm5, %xmm4
    0000020c: 	addss	%xmm4, %xmm3
    00000210: 	addss	%xmm3, %xmm2
    00000214: 	addss	%xmm2, %xmm1
    00000218: 	addss	%xmm1, %xmm0
    0000021c: 	cmpq	%rdx, %r10
    0000021f: 	jbe	.Ltmp689 # Offset: 543
    00000225: 	addq	$0x11, %rax
    00000229: 	movq	%r10, %r8
    0000022c: 	movl	$0x1, %esi
    00000231: 	subq	%rdx, %r8
    00000234: 	cmpq	%rax, %r10
    00000237: 	cmovaeq	%r8, %rsi
    0000023b: 	subq	$0x1, %r8
    0000023f: 	cmpq	$0x2, %r8
    00000243: 	jbe	.Ltmp690 # Offset: 579
    00000249: 	cmpq	%rax, %r10
    0000024c: 	jb	.Ltmp690 # Offset: 588
.Ltmp692:
    00000252: 	leaq	(,%rdx,4), %rax
    0000025a: 	movq	%rsi, %r9
    0000025d: 	leaq	(%rdi,%rax), %r8
    00000261: 	addq	%rcx, %rax
    00000264: 	shrq	$0x2, %r9
    00000268: 	movups	(%r8), %xmm1
    0000026c: 	movups	(%rax), %xmm6
    0000026f: 	mulps	%xmm6, %xmm1
    00000272: 	movaps	%xmm1, %xmm2
    00000275: 	addss	%xmm0, %xmm2
    00000279: 	movaps	%xmm1, %xmm0
    0000027c: 	shufps	$0x55, %xmm1, %xmm0
    00000280: 	addss	%xmm0, %xmm2
    00000284: 	movaps	%xmm1, %xmm0
    00000287: 	unpckhps	%xmm1, %xmm0
    0000028a: 	shufps	$0xff, %xmm1, %xmm1
    0000028e: 	addss	%xmm0, %xmm2
    00000292: 	movaps	%xmm2, %xmm0
    00000295: 	addss	%xmm1, %xmm0
    00000299: 	cmpq	$0x1, %r9
    0000029d: 	je	.Ltmp691 # Offset: 669
    000002a3: 	movups	0x10(%r8), %xmm1
    000002a8: 	movups	0x10(%rax), %xmm7
    000002ac: 	mulps	%xmm7, %xmm1
    000002af: 	movaps	%xmm1, %xmm2
    000002b2: 	addss	%xmm0, %xmm2
    000002b6: 	movaps	%xmm1, %xmm0
    000002b9: 	shufps	$0x55, %xmm1, %xmm0
    000002bd: 	addss	%xmm0, %xmm2
    000002c1: 	movaps	%xmm1, %xmm0
    000002c4: 	unpckhps	%xmm1, %xmm0
    000002c7: 	shufps	$0xff, %xmm1, %xmm1
    000002cb: 	addss	%xmm0, %xmm2
    000002cf: 	movaps	%xmm2, %xmm0
    000002d2: 	addss	%xmm1, %xmm0
    000002d6: 	cmpq	$0x2, %r9
    000002da: 	je	.Ltmp691 # Offset: 730
    000002dc: 	movups	0x20(%r8), %xmm1
    000002e1: 	movups	0x20(%rax), %xmm7
    000002e5: 	mulps	%xmm7, %xmm1
    000002e8: 	movaps	%xmm1, %xmm2
    000002eb: 	addss	%xmm0, %xmm2
    000002ef: 	movaps	%xmm1, %xmm0
    000002f2: 	shufps	$0x55, %xmm1, %xmm0
    000002f6: 	addss	%xmm0, %xmm2
    000002fa: 	movaps	%xmm1, %xmm0
    000002fd: 	unpckhps	%xmm1, %xmm0
    00000300: 	shufps	$0xff, %xmm1, %xmm1
    00000304: 	addss	%xmm0, %xmm2
    00000308: 	movaps	%xmm2, %xmm0
    0000030b: 	addss	%xmm1, %xmm0
    0000030f: 	cmpq	$0x3, %r9
    00000313: 	je	.Ltmp691 # Offset: 787
    00000315: 	movups	0x30(%r8), %xmm2
    0000031a: 	movups	0x30(%rax), %xmm1
    0000031e: 	mulps	%xmm2, %xmm1
    00000321: 	addss	%xmm1, %xmm0
    00000325: 	movaps	%xmm1, %xmm2
    00000328: 	shufps	$0x55, %xmm1, %xmm2
    0000032c: 	addss	%xmm0, %xmm2
    00000330: 	movaps	%xmm1, %xmm0
    00000333: 	unpckhps	%xmm1, %xmm0
    00000336: 	shufps	$0xff, %xmm1, %xmm1
    0000033a: 	addss	%xmm2, %xmm0
    0000033e: 	addss	%xmm1, %xmm0
.Ltmp691:
    00000342: 	movq	%rsi, %rax
    00000345: 	andq	$-0x4, %rax
    00000349: 	addq	%rax, %rdx
    0000034c: 	cmpq	%rax, %rsi
    0000034f: 	je	.Ltmp689 # Offset: 847
.Ltmp690:
    00000351: 	movss	(%rcx,%rdx,4), %xmm1
    00000356: 	mulss	(%rdi,%rdx,4), %xmm1
    0000035b: 	leaq	0x1(%rdx), %rsi
    0000035f: 	leaq	(,%rdx,4), %rax
    00000367: 	addss	%xmm1, %xmm0
    0000036b: 	cmpq	%r10, %rsi
    0000036e: 	jae	.Ltmp689 # Offset: 878
    00000370: 	movss	0x4(%rdi,%rax), %xmm1
    00000376: 	mulss	0x4(%rcx,%rax), %xmm1
    0000037c: 	addq	$0x2, %rdx
    00000380: 	addss	%xmm1, %xmm0
    00000384: 	cmpq	%r10, %rdx
    00000387: 	jae	.Ltmp689 # Offset: 903
    00000389: 	movss	0x8(%rcx,%rax), %xmm1
    0000038f: 	mulss	0x8(%rdi,%rax), %xmm1
    00000395: 	addss	%xmm1, %xmm0
.Ltmp689:
    00000399: 	retq # Offset: 921
    0000039a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp686:
    000003a0: 	movl	$0xf, %esi
    000003a5: 	xorl	%edx, %edx
    000003a7: 	pxor	%xmm0, %xmm0
    000003ab: 	jmp	.Ltmp692 # Offset: 939
.Ltmp687:
    000003b0: 	pxor	%xmm4, %xmm4
    000003b4: 	xorl	%edx, %edx
    000003b6: 	jmp	.Ltmp693 # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKffET0_T_S3_m"

Binary Function "_Z14inner_product7IPKffET0_T_S3_m" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x1c520
  Size        : 0x25d
  MaxSize     : 0x260
  Offset      : 0x1c520
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	$0x1, %rdx
    0000000b: 	je	.Ltmp694 # Offset: 11
    00000011: 	leaq	-0x2(%rdx), %rsi
    00000015: 	movq	%rsi, %r8
    00000018: 	shrq	%r8
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	$0x5, %rsi
    00000023: 	jbe	.Ltmp695 # Offset: 35
    00000029: 	movq	%r8, %r9
    0000002c: 	pxor	%xmm4, %xmm4
    00000030: 	xorl	%eax, %eax
    00000032: 	shrq	$0x2, %r9
    00000036: 	movaps	%xmm4, %xmm6
    00000039: 	shlq	$0x5, %r9
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp696:
    00000040: 	movups	(%rdi,%rax), %xmm5
    00000044: 	movups	0x10(%rdi,%rax), %xmm7
    00000049: 	movups	(%rcx,%rax), %xmm3
    0000004d: 	movaps	%xmm5, %xmm2
    00000050: 	shufps	$0x88, %xmm7, %xmm2
    00000054: 	movups	0x10(%rcx,%rax), %xmm7
    00000059: 	movaps	%xmm3, %xmm0
    0000005c: 	shufps	$0x88, %xmm7, %xmm0
    00000060: 	mulps	%xmm0, %xmm2
    00000063: 	movups	0x10(%rdi,%rax), %xmm7
    00000068: 	shufps	$0xdd, %xmm7, %xmm5
    0000006c: 	movaps	%xmm5, %xmm1
    0000006f: 	movups	0x10(%rcx,%rax), %xmm5
    00000074: 	addq	$0x20, %rax
    00000078: 	shufps	$0xdd, %xmm5, %xmm3
    0000007c: 	mulps	%xmm3, %xmm1
    0000007f: 	movaps	%xmm2, %xmm3
    00000082: 	movaps	%xmm2, %xmm0
    00000085: 	addss	%xmm6, %xmm3
    00000089: 	shufps	$0x55, %xmm2, %xmm0
    0000008d: 	addss	%xmm0, %xmm3
    00000091: 	movaps	%xmm2, %xmm0
    00000094: 	unpckhps	%xmm2, %xmm0
    00000097: 	shufps	$0xff, %xmm2, %xmm2
    0000009b: 	addss	%xmm0, %xmm3
    0000009f: 	movaps	%xmm1, %xmm0
    000000a2: 	addss	%xmm4, %xmm0
    000000a6: 	movaps	%xmm3, %xmm6
    000000a9: 	addss	%xmm2, %xmm6
    000000ad: 	movaps	%xmm1, %xmm2
    000000b0: 	shufps	$0x55, %xmm1, %xmm2
    000000b4: 	addss	%xmm2, %xmm0
    000000b8: 	movaps	%xmm1, %xmm2
    000000bb: 	unpckhps	%xmm1, %xmm2
    000000be: 	shufps	$0xff, %xmm1, %xmm1
    000000c2: 	addss	%xmm2, %xmm0
    000000c6: 	movaps	%xmm0, %xmm4
    000000c9: 	addss	%xmm1, %xmm4
    000000cd: 	cmpq	%rax, %r9
    000000d0: 	jne	.Ltmp696 # Offset: 208
    000000d6: 	movq	%r8, %rax
    000000d9: 	andq	$-0x4, %rax
    000000dd: 	testb	$0x3, %r8b
    000000e1: 	je	.Ltmp697 # Offset: 225
.Ltmp702:
    000000e3: 	subq	%rax, %r8
    000000e6: 	shlq	$0x3, %rax
    000000ea: 	unpcklps	%xmm4, %xmm6
    000000ed: 	leaq	(%rdi,%rax), %r9
    000000f1: 	addq	%rcx, %rax
    000000f4: 	movq	(%rax), %xmm1
    000000f8: 	movq	(%r9), %xmm0
    000000fd: 	mulps	%xmm0, %xmm1
    00000100: 	addps	%xmm6, %xmm1
    00000103: 	cmpq	$0x1, %r8
    00000107: 	je	.Ltmp698 # Offset: 263
    00000109: 	movq	0x8(%r9), %xmm0
    0000010f: 	movq	0x8(%rax), %xmm2
    00000114: 	mulps	%xmm2, %xmm0
    00000117: 	addps	%xmm0, %xmm1
    0000011a: 	cmpq	$0x2, %r8
    0000011e: 	je	.Ltmp698 # Offset: 286
    00000120: 	movq	0x10(%r9), %xmm0
    00000126: 	movq	0x10(%rax), %xmm2
    0000012b: 	mulps	%xmm2, %xmm0
    0000012e: 	addps	%xmm0, %xmm1
.Ltmp698:
    00000131: 	movaps	%xmm1, %xmm6
    00000134: 	shufps	$0xe5, %xmm1, %xmm1
    00000138: 	movaps	%xmm1, %xmm4
.Ltmp697:
    0000013b: 	movq	%rsi, %rax
    0000013e: 	andq	$-0x2, %rax
    00000142: 	leaq	0x2(%rax), %rsi
    00000146: 	cmpq	%rsi, %rdx
    00000149: 	jbe	.Ltmp699 # Offset: 329
    0000014f: 	addq	$0x3, %rax
    00000153: 	movq	%rdx, %r8
    00000156: 	movl	$0x1, %r11d
    0000015c: 	subq	%rsi, %r8
    0000015f: 	cmpq	%rax, %rdx
    00000162: 	cmovaeq	%r8, %r11
    00000166: 	subq	$0x1, %r8
    0000016a: 	cmpq	$0x2, %r8
    0000016e: 	jbe	.Ltmp700 # Offset: 366
    00000170: 	cmpq	%rax, %rdx
    00000173: 	jb	.Ltmp700 # Offset: 371
    00000175: 	movq	%r11, %r9
    00000178: 	leaq	(,%rsi,4), %r8
    00000180: 	xorl	%eax, %eax
    00000182: 	shrq	$0x2, %r9
    00000186: 	leaq	(%rdi,%r8), %r10
    0000018a: 	addq	%rcx, %r8
    0000018d: 	shlq	$0x4, %r9
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp701:
    00000198: 	movups	(%r8,%rax), %xmm2
    0000019d: 	movups	(%r10,%rax), %xmm7
    000001a2: 	addq	$0x10, %rax
    000001a6: 	mulps	%xmm7, %xmm2
    000001a9: 	movaps	%xmm2, %xmm1
    000001ac: 	movaps	%xmm2, %xmm0
    000001af: 	addss	%xmm6, %xmm1
    000001b3: 	shufps	$0x55, %xmm2, %xmm0
    000001b7: 	addss	%xmm1, %xmm0
    000001bb: 	movaps	%xmm2, %xmm1
    000001be: 	unpckhps	%xmm2, %xmm1
    000001c1: 	shufps	$0xff, %xmm2, %xmm2
    000001c5: 	addss	%xmm0, %xmm1
    000001c9: 	movaps	%xmm1, %xmm6
    000001cc: 	addss	%xmm2, %xmm6
    000001d0: 	cmpq	%rax, %r9
    000001d3: 	jne	.Ltmp701 # Offset: 467
    000001d5: 	movq	%r11, %rax
    000001d8: 	andq	$-0x4, %rax
    000001dc: 	addq	%rax, %rsi
    000001df: 	cmpq	%r11, %rax
    000001e2: 	je	.Ltmp699 # Offset: 482
.Ltmp700:
    000001e4: 	movss	(%rcx,%rsi,4), %xmm0
    000001e9: 	mulss	(%rdi,%rsi,4), %xmm0
    000001ee: 	leaq	0x1(%rsi), %r8
    000001f2: 	leaq	(,%rsi,4), %rax
    000001fa: 	addss	%xmm0, %xmm6
    000001fe: 	cmpq	%r8, %rdx
    00000201: 	jbe	.Ltmp699 # Offset: 513
    00000203: 	movss	0x4(%rdi,%rax), %xmm0
    00000209: 	mulss	0x4(%rcx,%rax), %xmm0
    0000020f: 	addq	$0x2, %rsi
    00000213: 	addss	%xmm0, %xmm6
    00000217: 	cmpq	%rsi, %rdx
    0000021a: 	jbe	.Ltmp699 # Offset: 538
    0000021c: 	movss	0x8(%rcx,%rax), %xmm0
    00000222: 	mulss	0x8(%rdi,%rax), %xmm0
    00000228: 	addss	%xmm0, %xmm6
.Ltmp699:
    0000022c: 	addss	%xmm6, %xmm4
    00000230: 	movaps	%xmm4, %xmm0
    00000233: 	retq # Offset: 563
.Ltmp695:
    00000234: 	pxor	%xmm4, %xmm4
    00000238: 	xorl	%eax, %eax
    0000023a: 	movaps	%xmm4, %xmm6
    0000023d: 	jmp	.Ltmp702 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp694:
    00000248: 	movss	(%rdi), %xmm1
    0000024c: 	mulss	(%rsi), %xmm1
    00000250: 	pxor	%xmm4, %xmm4
    00000254: 	movaps	%xmm1, %xmm6
    00000257: 	addss	%xmm4, %xmm6
    0000025b: 	jmp	.Ltmp699 # Offset: 603
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKffET0_T_S3_m"

Binary Function "_Z14inner_product8IPKffET0_T_S3_m" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x1c780
  Size        : 0x171
  MaxSize     : 0x180
  Offset      : 0x1c780
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %r8
    0000000a: 	cmpq	$0x3, %rdx
    0000000e: 	je	.Ltmp703 # Offset: 14
    00000014: 	leaq	-0x4(%rdx), %r9
    00000018: 	xorl	%eax, %eax
    0000001a: 	pxor	%xmm2, %xmm2
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%r9, %rsi
    00000023: 	shrq	$0x2, %rsi
    00000027: 	addq	$0x1, %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp704:
    00000030: 	movups	(%rcx,%rax), %xmm1
    00000034: 	movups	(%rdi,%rax), %xmm5
    00000038: 	addq	$0x1, %rdx
    0000003c: 	addq	$0x10, %rax
    00000040: 	mulps	%xmm5, %xmm1
    00000043: 	addps	%xmm1, %xmm2
    00000046: 	cmpq	%rsi, %rdx
    00000049: 	jb	.Ltmp704 # Offset: 73
    0000004b: 	movaps	%xmm2, %xmm4
    0000004e: 	movaps	%xmm2, %xmm1
    00000051: 	movaps	%xmm2, %xmm0
    00000054: 	andq	$-0x4, %r9
    00000058: 	unpckhps	%xmm2, %xmm4
    0000005b: 	shufps	$0x55, %xmm2, %xmm1
    0000005f: 	leaq	0x4(%r9), %rdx
    00000063: 	shufps	$0xff, %xmm2, %xmm2
    00000067: 	addss	%xmm1, %xmm4
    0000006b: 	addss	%xmm2, %xmm4
    0000006f: 	cmpq	%r8, %rdx
    00000072: 	jae	.Ltmp705 # Offset: 114
    00000078: 	addq	$0x5, %r9
    0000007c: 	movq	%r8, %rax
    0000007f: 	movl	$0x1, %r11d
    00000085: 	subq	%rdx, %rax
    00000088: 	cmpq	%r9, %r8
    0000008b: 	cmovaeq	%rax, %r11
    0000008f: 	subq	$0x1, %rax
    00000093: 	cmpq	$0x2, %rax
    00000097: 	jbe	.Ltmp706 # Offset: 151
    00000099: 	cmpq	%r9, %r8
    0000009c: 	jb	.Ltmp706 # Offset: 156
    0000009e: 	movq	%r11, %r9
    000000a1: 	leaq	(,%rdx,4), %rsi
    000000a9: 	xorl	%eax, %eax
    000000ab: 	shrq	$0x2, %r9
    000000af: 	leaq	(%rdi,%rsi), %r10
    000000b3: 	addq	%rcx, %rsi
    000000b6: 	shlq	$0x4, %r9
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp707:
    000000c0: 	movups	(%rsi,%rax), %xmm1
    000000c4: 	movups	(%r10,%rax), %xmm6
    000000c9: 	addq	$0x10, %rax
    000000cd: 	mulps	%xmm6, %xmm1
    000000d0: 	movaps	%xmm1, %xmm3
    000000d3: 	movaps	%xmm1, %xmm2
    000000d6: 	addss	%xmm0, %xmm3
    000000da: 	shufps	$0x55, %xmm1, %xmm2
    000000de: 	movaps	%xmm1, %xmm0
    000000e1: 	unpckhps	%xmm1, %xmm0
    000000e4: 	shufps	$0xff, %xmm1, %xmm1
    000000e8: 	addss	%xmm3, %xmm2
    000000ec: 	addss	%xmm2, %xmm0
    000000f0: 	addss	%xmm1, %xmm0
    000000f4: 	cmpq	%rax, %r9
    000000f7: 	jne	.Ltmp707 # Offset: 247
    000000f9: 	movq	%r11, %rax
    000000fc: 	andq	$-0x4, %rax
    00000100: 	addq	%rax, %rdx
    00000103: 	cmpq	%r11, %rax
    00000106: 	je	.Ltmp705 # Offset: 262
.Ltmp706:
    00000108: 	movss	(%rcx,%rdx,4), %xmm1
    0000010d: 	mulss	(%rdi,%rdx,4), %xmm1
    00000112: 	leaq	(,%rdx,4), %rax
    0000011a: 	addq	$0x1, %rdx
    0000011e: 	addss	%xmm1, %xmm0
    00000122: 	cmpq	%r8, %rdx
    00000125: 	jae	.Ltmp705 # Offset: 293
.Ltmp708:
    00000127: 	movss	0x4(%rdi,%rax), %xmm1
    0000012d: 	mulss	0x4(%rcx,%rax), %xmm1
    00000133: 	addq	$0x1, %rdx
    00000137: 	addss	%xmm1, %xmm0
    0000013b: 	cmpq	%r8, %rdx
    0000013e: 	jae	.Ltmp705 # Offset: 318
    00000140: 	movss	0x8(%rcx,%rax), %xmm1
    00000146: 	mulss	0x8(%rdi,%rax), %xmm1
    0000014c: 	addss	%xmm1, %xmm0
.Ltmp705:
    00000150: 	addss	%xmm4, %xmm0
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp703:
    00000158: 	movss	(%rdi), %xmm0
    0000015c: 	mulss	(%rsi), %xmm0
    00000160: 	pxor	%xmm4, %xmm4
    00000164: 	xorl	%eax, %eax
    00000166: 	movl	$0x1, %edx
    0000016b: 	addss	%xmm4, %xmm0
    0000016f: 	jmp	.Ltmp708 # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKffET0_T_S3_m"

Binary Function "_Z14inner_product9IPKffET0_T_S3_m" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x1c900
  Size        : 0x1d4
  MaxSize     : 0x1e0
  Offset      : 0x1c900
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rdx, %rcx
    0000000d: 	cmpq	$0x7, %rdx
    00000011: 	je	.Ltmp709 # Offset: 17
    00000017: 	movq	%rdi, %rax
    0000001a: 	leaq	-0x8(%rcx), %rdi
    0000001e: 	pxor	%xmm2, %xmm2
    00000022: 	movq	%rsi, %rdx
    00000025: 	movaps	%xmm2, %xmm4
    00000028: 	movaps	%xmm2, %xmm3
    0000002b: 	movaps	%xmm2, %xmm0
    0000002e: 	movq	%rdi, %rsi
    00000031: 	shrq	$0x3, %rsi
    00000035: 	shlq	$0x5, %rsi
    00000039: 	leaq	0x20(%r8,%rsi), %rsi
    0000003e: 	nop # Size: 2
.Ltmp710:
    00000040: 	movss	(%rax), %xmm1
    00000044: 	mulss	(%rdx), %xmm1
    00000048: 	addq	$0x20, %rax
    0000004c: 	addq	$0x20, %rdx
    00000050: 	addss	%xmm0, %xmm1
    00000054: 	movss	-0x1c(%rax), %xmm0
    00000059: 	mulss	-0x1c(%rdx), %xmm0
    0000005e: 	addss	%xmm0, %xmm3
    00000062: 	movss	-0x18(%rax), %xmm0
    00000067: 	mulss	-0x18(%rdx), %xmm0
    0000006c: 	addss	%xmm0, %xmm4
    00000070: 	movss	-0x14(%rax), %xmm0
    00000075: 	mulss	-0x14(%rdx), %xmm0
    0000007a: 	addss	%xmm0, %xmm2
    0000007e: 	movss	-0x10(%rax), %xmm0
    00000083: 	mulss	-0x10(%rdx), %xmm0
    00000088: 	addss	%xmm1, %xmm0
    0000008c: 	movss	-0xc(%rax), %xmm1
    00000091: 	mulss	-0xc(%rdx), %xmm1
    00000096: 	addss	%xmm1, %xmm3
    0000009a: 	movss	-0x8(%rax), %xmm1
    0000009f: 	mulss	-0x8(%rdx), %xmm1
    000000a4: 	addss	%xmm1, %xmm4
    000000a8: 	movss	-0x4(%rax), %xmm1
    000000ad: 	mulss	-0x4(%rdx), %xmm1
    000000b2: 	addss	%xmm1, %xmm2
    000000b6: 	cmpq	%rax, %rsi
    000000b9: 	jne	.Ltmp710 # Offset: 185
    000000bb: 	addss	%xmm4, %xmm3
    000000bf: 	andq	$-0x8, %rdi
    000000c3: 	leaq	0x8(%rdi), %rdx
    000000c7: 	addss	%xmm2, %xmm3
    000000cb: 	cmpq	%rcx, %rdx
    000000ce: 	jae	.Ltmp711 # Offset: 206
    000000d4: 	addq	$0x9, %rdi
    000000d8: 	movq	%rcx, %rax
    000000db: 	movl	$0x1, %r11d
    000000e1: 	subq	%rdx, %rax
    000000e4: 	cmpq	%rdi, %rcx
    000000e7: 	cmovaeq	%rax, %r11
    000000eb: 	subq	$0x1, %rax
    000000ef: 	cmpq	$0x2, %rax
    000000f3: 	jbe	.Ltmp712 # Offset: 243
    000000f5: 	cmpq	%rdi, %rcx
    000000f8: 	jb	.Ltmp712 # Offset: 248
.Ltmp714:
    000000fa: 	movq	%r11, %rdi
    000000fd: 	leaq	(,%rdx,4), %rsi
    00000105: 	xorl	%eax, %eax
    00000107: 	shrq	$0x2, %rdi
    0000010b: 	leaq	(%r8,%rsi), %r10
    0000010f: 	addq	%r9, %rsi
    00000112: 	shlq	$0x4, %rdi
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp713:
    00000120: 	movups	(%rsi,%rax), %xmm1
    00000124: 	movups	(%r10,%rax), %xmm5
    00000129: 	addq	$0x10, %rax
    0000012d: 	mulps	%xmm5, %xmm1
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	movaps	%xmm1, %xmm2
    00000137: 	shufps	$0x55, %xmm1, %xmm2
    0000013b: 	addss	%xmm0, %xmm2
    0000013f: 	movaps	%xmm1, %xmm0
    00000142: 	unpckhps	%xmm1, %xmm0
    00000145: 	shufps	$0xff, %xmm1, %xmm1
    00000149: 	addss	%xmm2, %xmm0
    0000014d: 	addss	%xmm1, %xmm0
    00000151: 	cmpq	%rax, %rdi
    00000154: 	jne	.Ltmp713 # Offset: 340
    00000156: 	movq	%r11, %rax
    00000159: 	andq	$-0x4, %rax
    0000015d: 	addq	%rax, %rdx
    00000160: 	cmpq	%r11, %rax
    00000163: 	je	.Ltmp711 # Offset: 355
.Ltmp712:
    00000165: 	movss	(%r8,%rdx,4), %xmm1
    0000016b: 	mulss	(%r9,%rdx,4), %xmm1
    00000171: 	leaq	0x1(%rdx), %rsi
    00000175: 	leaq	(,%rdx,4), %rax
    0000017d: 	addss	%xmm1, %xmm0
    00000181: 	cmpq	%rcx, %rsi
    00000184: 	jae	.Ltmp711 # Offset: 388
    00000186: 	movss	0x4(%r9,%rax), %xmm1
    0000018d: 	mulss	0x4(%r8,%rax), %xmm1
    00000194: 	addq	$0x2, %rdx
    00000198: 	addss	%xmm1, %xmm0
    0000019c: 	cmpq	%rdx, %rcx
    0000019f: 	jbe	.Ltmp711 # Offset: 415
    000001a1: 	movss	0x8(%r9,%rax), %xmm1
    000001a8: 	mulss	0x8(%r8,%rax), %xmm1
    000001af: 	addss	%xmm1, %xmm0
.Ltmp711:
    000001b3: 	addss	%xmm3, %xmm0
    000001b7: 	retq # Offset: 439
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp709:
    000001c0: 	pxor	%xmm3, %xmm3
    000001c4: 	movl	$0x7, %r11d
    000001ca: 	xorl	%edx, %edx
    000001cc: 	movaps	%xmm3, %xmm0
    000001cf: 	jmp	.Ltmp714 # Offset: 463
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKffET0_T_S3_m"

Binary Function "_Z15inner_product10IPKffET0_T_S3_m" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x1cae0
  Size        : 0x276
  MaxSize     : 0x280
  Offset      : 0x1cae0
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKffET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rdx, %rcx
    0000000d: 	cmpq	$0xf, %rdx
    00000011: 	je	.Ltmp715 # Offset: 17
    00000017: 	movq	%rdi, %rdx
    0000001a: 	leaq	-0x10(%rcx), %rdi
    0000001e: 	pxor	%xmm13, %xmm13
    00000023: 	movq	%rsi, %rax
    00000026: 	movaps	%xmm13, %xmm12
    0000002a: 	movaps	%xmm13, %xmm11
    0000002e: 	movaps	%xmm13, %xmm0
    00000032: 	movq	%rdi, %rsi
    00000035: 	shrq	$0x4, %rsi
    00000039: 	shlq	$0x6, %rsi
    0000003d: 	leaq	0x40(%r9,%rsi), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp716:
    00000048: 	movss	0x4(%rdx), %xmm6
    0000004d: 	movss	0x4(%rax), %xmm9
    00000053: 	addq	$0x40, %rax
    00000057: 	addq	$0x40, %rdx
    0000005b: 	movss	-0x40(%rdx), %xmm7
    00000060: 	movss	-0x40(%rax), %xmm10
    00000066: 	mulss	%xmm6, %xmm9
    0000006b: 	movss	-0x30(%rdx), %xmm5
    00000070: 	movss	-0x2c(%rdx), %xmm4
    00000075: 	mulss	%xmm7, %xmm10
    0000007a: 	movss	-0x38(%rdx), %xmm2
    0000007f: 	movss	-0x28(%rdx), %xmm3
    00000084: 	movss	-0x34(%rdx), %xmm1
    00000089: 	movss	-0x24(%rdx), %xmm8
    0000008f: 	mulss	-0x20(%rax), %xmm7
    00000094: 	mulss	-0x1c(%rax), %xmm6
    00000099: 	addss	%xmm11, %xmm9
    0000009e: 	movss	-0x30(%rax), %xmm11
    000000a4: 	addss	%xmm0, %xmm10
    000000a9: 	movss	-0x38(%rax), %xmm0
    000000ae: 	mulss	%xmm5, %xmm11
    000000b3: 	mulss	%xmm2, %xmm0
    000000b7: 	mulss	-0x18(%rax), %xmm2
    000000bc: 	mulss	-0x10(%rax), %xmm5
    000000c1: 	addss	%xmm10, %xmm11
    000000c6: 	movss	-0x2c(%rax), %xmm10
    000000cc: 	addss	%xmm12, %xmm0
    000000d1: 	movss	-0x34(%rax), %xmm12
    000000d7: 	mulss	%xmm4, %xmm10
    000000dc: 	mulss	%xmm1, %xmm12
    000000e1: 	addss	%xmm11, %xmm7
    000000e6: 	mulss	-0x14(%rax), %xmm1
    000000eb: 	mulss	-0xc(%rax), %xmm4
    000000f0: 	addss	%xmm7, %xmm5
    000000f4: 	addss	%xmm9, %xmm10
    000000f9: 	movss	-0x28(%rax), %xmm9
    000000ff: 	addss	%xmm13, %xmm12
    00000104: 	mulss	%xmm3, %xmm9
    00000109: 	mulss	-0x8(%rax), %xmm3
    0000010e: 	addss	%xmm10, %xmm6
    00000113: 	addss	%xmm6, %xmm4
    00000117: 	addss	%xmm0, %xmm9
    0000011c: 	movss	-0x24(%rax), %xmm0
    00000121: 	mulss	%xmm8, %xmm0
    00000126: 	movaps	%xmm4, %xmm11
    0000012a: 	addss	%xmm9, %xmm2
    0000012f: 	addss	%xmm2, %xmm3
    00000133: 	movss	-0x4(%rax), %xmm2
    00000138: 	addss	%xmm12, %xmm0
    0000013d: 	mulss	%xmm8, %xmm2
    00000142: 	movaps	%xmm3, %xmm12
    00000146: 	addss	%xmm0, %xmm1
    0000014a: 	movaps	%xmm5, %xmm0
    0000014d: 	addss	%xmm1, %xmm2
    00000151: 	movaps	%xmm2, %xmm13
    00000155: 	cmpq	%rax, %rsi
    00000158: 	jne	.Ltmp716 # Offset: 344
    0000015e: 	addss	%xmm3, %xmm11
    00000163: 	andq	$-0x10, %rdi
    00000167: 	leaq	0x10(%rdi), %rdx
    0000016b: 	addss	%xmm2, %xmm11
    00000170: 	cmpq	%rcx, %rdx
    00000173: 	jae	.Ltmp717 # Offset: 371
    00000179: 	addq	$0x11, %rdi
    0000017d: 	movq	%rcx, %rax
    00000180: 	movl	$0x1, %r11d
    00000186: 	subq	%rdx, %rax
    00000189: 	cmpq	%rdi, %rcx
    0000018c: 	cmovaeq	%rax, %r11
    00000190: 	subq	$0x1, %rax
    00000194: 	cmpq	$0x2, %rax
    00000198: 	jbe	.Ltmp718 # Offset: 408
    0000019a: 	cmpq	%rdi, %rcx
    0000019d: 	jb	.Ltmp718 # Offset: 413
.Ltmp720:
    0000019f: 	movq	%r11, %rdi
    000001a2: 	leaq	(,%rdx,4), %rsi
    000001aa: 	xorl	%eax, %eax
    000001ac: 	shrq	$0x2, %rdi
    000001b0: 	leaq	(%r8,%rsi), %r10
    000001b4: 	addq	%r9, %rsi
    000001b7: 	shlq	$0x4, %rdi
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp719:
    000001c0: 	movups	(%rsi,%rax), %xmm1
    000001c4: 	movups	(%r10,%rax), %xmm6
    000001c9: 	addq	$0x10, %rax
    000001cd: 	mulps	%xmm6, %xmm1
    000001d0: 	addss	%xmm1, %xmm0
    000001d4: 	movaps	%xmm1, %xmm2
    000001d7: 	shufps	$0x55, %xmm1, %xmm2
    000001db: 	addss	%xmm0, %xmm2
    000001df: 	movaps	%xmm1, %xmm0
    000001e2: 	unpckhps	%xmm1, %xmm0
    000001e5: 	shufps	$0xff, %xmm1, %xmm1
    000001e9: 	addss	%xmm2, %xmm0
    000001ed: 	addss	%xmm1, %xmm0
    000001f1: 	cmpq	%rax, %rdi
    000001f4: 	jne	.Ltmp719 # Offset: 500
    000001f6: 	movq	%r11, %rax
    000001f9: 	andq	$-0x4, %rax
    000001fd: 	addq	%rax, %rdx
    00000200: 	cmpq	%rax, %r11
    00000203: 	je	.Ltmp717 # Offset: 515
.Ltmp718:
    00000205: 	movss	(%r8,%rdx,4), %xmm1
    0000020b: 	mulss	(%r9,%rdx,4), %xmm1
    00000211: 	leaq	0x1(%rdx), %rsi
    00000215: 	leaq	(,%rdx,4), %rax
    0000021d: 	addss	%xmm1, %xmm0
    00000221: 	cmpq	%rcx, %rsi
    00000224: 	jae	.Ltmp717 # Offset: 548
    00000226: 	movss	0x4(%r9,%rax), %xmm1
    0000022d: 	mulss	0x4(%r8,%rax), %xmm1
    00000234: 	addq	$0x2, %rdx
    00000238: 	addss	%xmm1, %xmm0
    0000023c: 	cmpq	%rdx, %rcx
    0000023f: 	jbe	.Ltmp717 # Offset: 575
    00000241: 	movss	0x8(%r9,%rax), %xmm1
    00000248: 	mulss	0x8(%r8,%rax), %xmm1
    0000024f: 	addss	%xmm1, %xmm0
.Ltmp717:
    00000253: 	addss	%xmm11, %xmm0
    00000258: 	retq # Offset: 600
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp715:
    00000260: 	pxor	%xmm11, %xmm11
    00000265: 	movl	$0xf, %r11d
    0000026b: 	xorl	%edx, %edx
    0000026d: 	movaps	%xmm11, %xmm0
    00000271: 	jmp	.Ltmp720 # Offset: 625
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKffET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKddET0_T_S3_m" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x1cd60
  Size        : 0x93
  MaxSize     : 0xa0
  Offset      : 0x1cd60
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	shlq	$0x3, %rdx
    00000008: 	je	.Ltmp721 # Offset: 8
    0000000a: 	leaq	-0x8(%rdx), %rcx
    0000000e: 	shrq	$0x3, %rcx
    00000012: 	addq	$0x1, %rcx
    00000016: 	cmpq	$0x8, %rdx
    0000001a: 	je	.Ltmp722 # Offset: 26
    0000001c: 	movq	%rcx, %rdx
    0000001f: 	xorl	%eax, %eax
    00000021: 	pxor	%xmm0, %xmm0
    00000025: 	shrq	%rdx
    00000028: 	shlq	$0x4, %rdx
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp723:
    00000030: 	movupd	(%rdi,%rax), %xmm1
    00000035: 	movupd	(%rsi,%rax), %xmm3
    0000003a: 	addq	$0x10, %rax
    0000003e: 	mulpd	%xmm3, %xmm1
    00000042: 	addsd	%xmm1, %xmm0
    00000046: 	unpckhpd	%xmm1, %xmm1
    0000004a: 	addsd	%xmm1, %xmm0
    0000004e: 	cmpq	%rdx, %rax
    00000051: 	jne	.Ltmp723 # Offset: 81
    00000053: 	movq	%rcx, %rax
    00000056: 	andq	$-0x2, %rax
    0000005a: 	leaq	(,%rax,8), %rdx
    00000062: 	addq	%rdx, %rdi
    00000065: 	addq	%rdx, %rsi
    00000068: 	cmpq	%rax, %rcx
    0000006b: 	je	.Ltmp724 # Offset: 107
.Ltmp725:
    0000006d: 	movsd	(%rdi), %xmm1
    00000071: 	mulsd	(%rsi), %xmm1
    00000075: 	addsd	%xmm1, %xmm0
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp724:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp721:
    00000088: 	pxor	%xmm0, %xmm0
    0000008c: 	retq # Offset: 140
.Ltmp722:
    0000008d: 	pxor	%xmm0, %xmm0
    00000091: 	jmp	.Ltmp725 # Offset: 145
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKddET0_T_S3_m"

Binary Function "_Z14inner_product1IPKddET0_T_S3_m" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x1ce00
  Size        : 0x75
  MaxSize     : 0x80
  Offset      : 0x1ce00
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp726 # Offset: 7
    00000009: 	cmpq	$0x1, %rdx
    0000000d: 	je	.Ltmp727 # Offset: 13
    0000000f: 	movq	%rdx, %rcx
    00000012: 	xorl	%eax, %eax
    00000014: 	pxor	%xmm0, %xmm0
    00000018: 	shrq	%rcx
    0000001b: 	shlq	$0x4, %rcx
    0000001f: 	nop # Size: 1
.Ltmp728:
    00000020: 	movupd	(%rdi,%rax), %xmm1
    00000025: 	movupd	(%rsi,%rax), %xmm3
    0000002a: 	addq	$0x10, %rax
    0000002e: 	mulpd	%xmm3, %xmm1
    00000032: 	addsd	%xmm1, %xmm0
    00000036: 	unpckhpd	%xmm1, %xmm1
    0000003a: 	addsd	%xmm1, %xmm0
    0000003e: 	cmpq	%rcx, %rax
    00000041: 	jne	.Ltmp728 # Offset: 65
    00000043: 	movq	%rdx, %rax
    00000046: 	andq	$-0x2, %rax
    0000004a: 	andl	$0x1, %edx
    0000004d: 	je	.Ltmp729 # Offset: 77
.Ltmp730:
    0000004f: 	movsd	(%rsi,%rax,8), %xmm1
    00000054: 	mulsd	(%rdi,%rax,8), %xmm1
    00000059: 	addsd	%xmm1, %xmm0
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp729:
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp726:
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	retq # Offset: 108
.Ltmp727:
    0000006d: 	xorl	%eax, %eax
    0000006f: 	pxor	%xmm0, %xmm0
    00000073: 	jmp	.Ltmp730 # Offset: 115
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKddET0_T_S3_m"

Binary Function "_Z14inner_product2IPKddET0_T_S3_m" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x1ce80
  Size        : 0x93
  MaxSize     : 0xa0
  Offset      : 0x1ce80
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	shlq	$0x3, %rdx
    00000008: 	je	.Ltmp731 # Offset: 8
    0000000a: 	leaq	-0x8(%rdx), %rcx
    0000000e: 	shrq	$0x3, %rcx
    00000012: 	addq	$0x1, %rcx
    00000016: 	cmpq	$0x8, %rdx
    0000001a: 	je	.Ltmp732 # Offset: 26
    0000001c: 	movq	%rcx, %rdx
    0000001f: 	xorl	%eax, %eax
    00000021: 	pxor	%xmm0, %xmm0
    00000025: 	shrq	%rdx
    00000028: 	shlq	$0x4, %rdx
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp733:
    00000030: 	movupd	(%rdi,%rax), %xmm1
    00000035: 	movupd	(%rsi,%rax), %xmm3
    0000003a: 	addq	$0x10, %rax
    0000003e: 	mulpd	%xmm3, %xmm1
    00000042: 	addsd	%xmm1, %xmm0
    00000046: 	unpckhpd	%xmm1, %xmm1
    0000004a: 	addsd	%xmm1, %xmm0
    0000004e: 	cmpq	%rdx, %rax
    00000051: 	jne	.Ltmp733 # Offset: 81
    00000053: 	movq	%rcx, %rax
    00000056: 	andq	$-0x2, %rax
    0000005a: 	leaq	(,%rax,8), %rdx
    00000062: 	addq	%rdx, %rdi
    00000065: 	addq	%rdx, %rsi
    00000068: 	cmpq	%rax, %rcx
    0000006b: 	je	.Ltmp734 # Offset: 107
.Ltmp735:
    0000006d: 	movsd	(%rdi), %xmm1
    00000071: 	mulsd	(%rsi), %xmm1
    00000075: 	addsd	%xmm1, %xmm0
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp734:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp731:
    00000088: 	pxor	%xmm0, %xmm0
    0000008c: 	retq # Offset: 140
.Ltmp732:
    0000008d: 	pxor	%xmm0, %xmm0
    00000091: 	jmp	.Ltmp735 # Offset: 145
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKddET0_T_S3_m"

Binary Function "_Z14inner_product3IPKddET0_T_S3_m" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x1cf20
  Size        : 0x76
  MaxSize     : 0x80
  Offset      : 0x1cf20
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	cmpq	$0x1, %rdx
    00000008: 	je	.Ltmp736 # Offset: 8
    0000000a: 	leaq	-0x2(%rdx), %r9
    0000000e: 	xorl	%eax, %eax
    00000010: 	pxor	%xmm0, %xmm0
    00000014: 	xorl	%ecx, %ecx
    00000016: 	movq	%r9, %r8
    00000019: 	shrq	%r8
    0000001c: 	addq	$0x1, %r8
.Ltmp737:
    00000020: 	movupd	(%rsi,%rax), %xmm1
    00000025: 	movupd	(%rdi,%rax), %xmm3
    0000002a: 	addq	$0x1, %rcx
    0000002e: 	addq	$0x10, %rax
    00000032: 	mulpd	%xmm3, %xmm1
    00000036: 	addsd	%xmm1, %xmm0
    0000003a: 	unpckhpd	%xmm1, %xmm1
    0000003e: 	addsd	%xmm1, %xmm0
    00000042: 	cmpq	%r8, %rcx
    00000045: 	jb	.Ltmp737 # Offset: 69
    00000047: 	andq	$-0x2, %r9
    0000004b: 	addq	$0x2, %r9
    0000004f: 	cmpq	%r9, %rdx
    00000052: 	ja	.Ltmp738 # Offset: 82
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp738:
    00000058: 	shlq	$0x3, %r9
    0000005c: 	addq	%r9, %rdi
    0000005f: 	addq	%r9, %rsi
.Ltmp739:
    00000062: 	movsd	(%rdi), %xmm1
    00000066: 	mulsd	(%rsi), %xmm1
    0000006a: 	addsd	%xmm1, %xmm0
    0000006e: 	retq # Offset: 110
    0000006f: 	nop # Size: 1
.Ltmp736:
    00000070: 	pxor	%xmm0, %xmm0
    00000074: 	jmp	.Ltmp739 # Offset: 116
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKddET0_T_S3_m"

Binary Function "_Z14inner_product4IPKddET0_T_S3_m" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x1cfa0
  Size        : 0x14d
  MaxSize     : 0x150
  Offset      : 0x1cfa0
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	cmpq	$0x3, %rdx
    00000008: 	je	.Ltmp740 # Offset: 8
    0000000e: 	leaq	-0x4(%rdx), %r9
    00000012: 	xorl	%eax, %eax
    00000014: 	pxor	%xmm0, %xmm0
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	movq	%r9, %r8
    0000001d: 	shrq	$0x2, %r8
    00000021: 	addq	$0x1, %r8
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp741:
    00000028: 	movupd	(%rsi,%rax), %xmm1
    0000002d: 	movupd	(%rdi,%rax), %xmm4
    00000032: 	addq	$0x1, %rcx
    00000036: 	movupd	0x10(%rsi,%rax), %xmm2
    0000003c: 	movupd	0x10(%rdi,%rax), %xmm5
    00000042: 	addq	$0x20, %rax
    00000046: 	mulpd	%xmm4, %xmm1
    0000004a: 	mulpd	%xmm5, %xmm2
    0000004e: 	addsd	%xmm1, %xmm0
    00000052: 	unpckhpd	%xmm1, %xmm1
    00000056: 	addsd	%xmm0, %xmm1
    0000005a: 	movapd	%xmm2, %xmm0
    0000005e: 	unpckhpd	%xmm2, %xmm2
    00000062: 	addsd	%xmm1, %xmm0
    00000066: 	addsd	%xmm2, %xmm0
    0000006a: 	cmpq	%rcx, %r8
    0000006d: 	ja	.Ltmp741 # Offset: 109
    0000006f: 	andq	$-0x4, %r9
    00000073: 	leaq	0x4(%r9), %rax
    00000077: 	cmpq	%rax, %rdx
    0000007a: 	jbe	.Ltmp742 # Offset: 122
    00000080: 	addq	$0x5, %r9
    00000084: 	movq	%rdx, %r8
    00000087: 	movl	$0x1, %ecx
    0000008c: 	subq	%rax, %r8
    0000008f: 	cmpq	%r9, %rdx
    00000092: 	cmovaeq	%r8, %rcx
    00000096: 	cmpq	$0x1, %r8
    0000009a: 	je	.Ltmp743 # Offset: 154
    0000009c: 	cmpq	%r9, %rdx
    0000009f: 	jb	.Ltmp743 # Offset: 159
    000000a1: 	leaq	(,%rax,8), %r8
    000000a9: 	movq	%rcx, %rdx
    000000ac: 	leaq	(%rdi,%r8), %r9
    000000b0: 	addq	%rsi, %r8
    000000b3: 	shrq	%rdx
    000000b6: 	movupd	(%r9), %xmm1
    000000bb: 	movupd	(%r8), %xmm6
    000000c0: 	mulpd	%xmm6, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	unpckhpd	%xmm1, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	cmpq	$0x1, %rdx
    000000d4: 	je	.Ltmp744 # Offset: 212
    000000d6: 	movupd	0x10(%r8), %xmm1
    000000dc: 	movupd	0x10(%r9), %xmm2
    000000e2: 	mulpd	%xmm2, %xmm1
    000000e6: 	addsd	%xmm1, %xmm0
    000000ea: 	unpckhpd	%xmm1, %xmm1
    000000ee: 	addsd	%xmm1, %xmm0
.Ltmp744:
    000000f2: 	addq	%rdx, %rdx
    000000f5: 	addq	%rdx, %rax
    000000f8: 	cmpq	%rdx, %rcx
    000000fb: 	je	.Ltmp742 # Offset: 251
.Ltmp743:
    000000fd: 	movsd	(%rsi,%rax,8), %xmm1
    00000102: 	mulsd	(%rdi,%rax,8), %xmm1
    00000107: 	addsd	%xmm1, %xmm0
    0000010b: 	retq # Offset: 267
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp742:
    00000110: 	retq # Offset: 272
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp740:
    00000118: 	movupd	(%rdi), %xmm1
    0000011c: 	movupd	(%rsi), %xmm7
    00000120: 	pxor	%xmm0, %xmm0
    00000124: 	xorl	%eax, %eax
    00000126: 	movl	$0x1, %edx
    0000012b: 	movl	$0x3, %ecx
    00000130: 	mulpd	%xmm7, %xmm1
    00000134: 	addq	%rdx, %rdx
    00000137: 	addq	%rdx, %rax
    0000013a: 	addsd	%xmm1, %xmm0
    0000013e: 	unpckhpd	%xmm1, %xmm1
    00000142: 	addsd	%xmm1, %xmm0
    00000146: 	cmpq	%rdx, %rcx
    00000149: 	jne	.Ltmp743 # Offset: 329
    0000014b: 	jmp	.Ltmp742 # Offset: 331
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKddET0_T_S3_m"

Binary Function "_Z14inner_product5IPKddET0_T_S3_m" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x1d0f0
  Size        : 0x1f5
  MaxSize     : 0x200
  Offset      : 0x1d0f0
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r8
    0000000a: 	cmpq	$0x7, %rdx
    0000000e: 	je	.Ltmp745 # Offset: 14
    00000014: 	leaq	-0x8(%rdx), %r10
    00000018: 	movq	%rsi, %rcx
    0000001b: 	movq	%r9, %rax
    0000001e: 	xorl	%esi, %esi
    00000020: 	movq	%r10, %rdi
    00000023: 	pxor	%xmm3, %xmm3
    00000027: 	shrq	$0x3, %rdi
    0000002b: 	addq	$0x1, %rdi
    0000002f: 	nop # Size: 1
.Ltmp746:
    00000030: 	movupd	(%rax), %xmm6
    00000034: 	movupd	(%rcx), %xmm2
    00000038: 	addq	$0x1, %rsi
    0000003c: 	addq	$0x40, %rcx
    00000040: 	movupd	0x10(%rax), %xmm7
    00000045: 	movupd	-0x30(%rcx), %xmm1
    0000004a: 	addq	$0x40, %rax
    0000004e: 	mulpd	%xmm6, %xmm2
    00000052: 	movupd	-0x20(%rcx), %xmm0
    00000057: 	movupd	-0x20(%rax), %xmm6
    0000005c: 	mulpd	%xmm7, %xmm1
    00000060: 	movupd	-0x10(%rcx), %xmm4
    00000065: 	movupd	-0x10(%rax), %xmm7
    0000006a: 	mulpd	%xmm6, %xmm0
    0000006e: 	mulpd	%xmm7, %xmm4
    00000072: 	movapd	%xmm2, %xmm5
    00000076: 	unpckhpd	%xmm2, %xmm2
    0000007a: 	addsd	%xmm3, %xmm5
    0000007e: 	movapd	%xmm4, %xmm3
    00000082: 	unpckhpd	%xmm4, %xmm4
    00000086: 	addsd	%xmm5, %xmm2
    0000008a: 	addsd	%xmm1, %xmm2
    0000008e: 	unpckhpd	%xmm1, %xmm1
    00000092: 	addsd	%xmm2, %xmm1
    00000096: 	addsd	%xmm0, %xmm1
    0000009a: 	unpckhpd	%xmm0, %xmm0
    0000009e: 	addsd	%xmm1, %xmm0
    000000a2: 	addsd	%xmm0, %xmm3
    000000a6: 	addsd	%xmm4, %xmm3
    000000aa: 	cmpq	%rsi, %rdi
    000000ad: 	ja	.Ltmp746 # Offset: 173
    000000af: 	andq	$-0x8, %r10
    000000b3: 	leaq	0x8(%r10), %rax
    000000b7: 	cmpq	%rax, %rdx
    000000ba: 	jbe	.Ltmp747 # Offset: 186
    000000c0: 	addq	$0x9, %r10
    000000c4: 	movq	%rdx, %rcx
    000000c7: 	movl	$0x1, %edi
    000000cc: 	subq	%rax, %rcx
    000000cf: 	cmpq	%r10, %rdx
    000000d2: 	cmovaeq	%rcx, %rdi
    000000d6: 	cmpq	$0x1, %rcx
    000000da: 	je	.Ltmp748 # Offset: 218
    000000e0: 	cmpq	%r10, %rdx
    000000e3: 	jb	.Ltmp748 # Offset: 227
    000000e9: 	leaq	(,%rax,8), %rdx
    000000f1: 	movq	%rdi, %rcx
    000000f4: 	leaq	(%r9,%rdx), %rsi
    000000f8: 	addq	%r8, %rdx
    000000fb: 	shrq	%rcx
    000000fe: 	movupd	(%rsi), %xmm0
    00000102: 	movupd	(%rdx), %xmm5
    00000106: 	addq	$0x10, %rsi
    0000010a: 	addq	$0x10, %rdx
    0000010e: 	mulpd	%xmm5, %xmm0
    00000112: 	movapd	%xmm0, %xmm1
    00000116: 	unpckhpd	%xmm0, %xmm0
    0000011a: 	addsd	%xmm3, %xmm1
    0000011e: 	movapd	%xmm0, %xmm3
    00000122: 	addsd	%xmm1, %xmm3
    00000126: 	cmpq	$0x1, %rcx
    0000012a: 	je	.Ltmp749 # Offset: 298
.Ltmp750:
    0000012c: 	movupd	(%rsi), %xmm0
    00000130: 	movupd	(%rdx), %xmm6
    00000134: 	mulpd	%xmm6, %xmm0
    00000138: 	movapd	%xmm0, %xmm1
    0000013c: 	unpckhpd	%xmm0, %xmm0
    00000140: 	addsd	%xmm3, %xmm1
    00000144: 	movapd	%xmm0, %xmm3
    00000148: 	addsd	%xmm1, %xmm3
    0000014c: 	cmpq	$0x2, %rcx
    00000150: 	je	.Ltmp749 # Offset: 336
    00000152: 	movupd	0x10(%rsi), %xmm0
    00000157: 	movupd	0x10(%rdx), %xmm7
    0000015c: 	mulpd	%xmm7, %xmm0
    00000160: 	movapd	%xmm0, %xmm1
    00000164: 	unpckhpd	%xmm0, %xmm0
    00000168: 	addsd	%xmm3, %xmm1
    0000016c: 	movapd	%xmm0, %xmm3
    00000170: 	addsd	%xmm1, %xmm3
    00000174: 	cmpq	$0x3, %rcx
    00000178: 	je	.Ltmp749 # Offset: 376
    0000017a: 	movupd	0x20(%rsi), %xmm1
    0000017f: 	movupd	0x20(%rdx), %xmm0
    00000184: 	mulpd	%xmm1, %xmm0
    00000188: 	movapd	%xmm0, %xmm1
    0000018c: 	unpckhpd	%xmm0, %xmm0
    00000190: 	addsd	%xmm3, %xmm1
    00000194: 	movapd	%xmm0, %xmm3
    00000198: 	addsd	%xmm1, %xmm3
.Ltmp749:
    0000019c: 	addq	%rcx, %rcx
    0000019f: 	addq	%rcx, %rax
    000001a2: 	cmpq	%rcx, %rdi
    000001a5: 	je	.Ltmp747 # Offset: 421
.Ltmp748:
    000001a7: 	movsd	(%r8,%rax,8), %xmm0
    000001ad: 	mulsd	(%r9,%rax,8), %xmm0
    000001b3: 	addsd	%xmm0, %xmm3
.Ltmp747:
    000001b7: 	movapd	%xmm3, %xmm0
    000001bb: 	retq # Offset: 443
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp745:
    000001c0: 	movupd	(%rdi), %xmm0
    000001c4: 	movupd	(%rsi), %xmm7
    000001c8: 	pxor	%xmm3, %xmm3
    000001cc: 	leaq	0x10(%rdi), %rsi
    000001d0: 	leaq	0x10(%r8), %rdx
    000001d4: 	movl	$0x7, %edi
    000001d9: 	movl	$0x3, %ecx
    000001de: 	xorl	%eax, %eax
    000001e0: 	mulpd	%xmm7, %xmm0
    000001e4: 	addsd	%xmm0, %xmm3
    000001e8: 	unpckhpd	%xmm0, %xmm0
    000001ec: 	addsd	%xmm0, %xmm3
    000001f0: 	jmp	.Ltmp750 # Offset: 496
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKddET0_T_S3_m"

Binary Function "_Z14inner_product6IPKddET0_T_S3_m" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x1d2f0
  Size        : 0x46a
  MaxSize     : 0x470
  Offset      : 0x1d2f0
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %r10
    0000000a: 	cmpq	$0xf, %rdx
    0000000e: 	je	.Ltmp751 # Offset: 14
    00000014: 	leaq	-0x10(%rdx), %r8
    00000018: 	movq	%r8, %rsi
    0000001b: 	shrq	$0x4, %rsi
    0000001f: 	cmpq	$0xf, %r8
    00000023: 	jbe	.Ltmp752 # Offset: 35
    00000029: 	movq	%rcx, %rax
    0000002c: 	movq	%rdi, %rdx
    0000002f: 	pxor	%xmm8, %xmm8
    00000034: 	xorl	%r9d, %r9d
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp753:
    00000040: 	movupd	(%rdx), %xmm5
    00000044: 	movupd	(%rax), %xmm1
    00000048: 	addq	$0x1, %r9
    0000004c: 	subq	$-0x80, %rax
    00000050: 	movupd	0x10(%rdx), %xmm3
    00000055: 	movupd	-0x70(%rax), %xmm0
    0000005a: 	subq	$-0x80, %rdx
    0000005e: 	mulpd	%xmm5, %xmm1
    00000062: 	movupd	-0x60(%rax), %xmm4
    00000067: 	movupd	-0x60(%rdx), %xmm5
    0000006c: 	mulpd	%xmm3, %xmm0
    00000070: 	movupd	-0x50(%rdx), %xmm6
    00000075: 	movupd	-0x50(%rax), %xmm3
    0000007a: 	mulpd	%xmm5, %xmm4
    0000007e: 	movupd	-0x80(%rdx), %xmm7
    00000083: 	movupd	-0x40(%rax), %xmm2
    00000088: 	mulpd	%xmm6, %xmm3
    0000008c: 	movupd	-0x70(%rdx), %xmm5
    00000091: 	movupd	-0x20(%rax), %xmm6
    00000096: 	mulpd	%xmm7, %xmm2
    0000009a: 	movupd	-0x30(%rax), %xmm7
    0000009f: 	movupd	-0x50(%rdx), %xmm10
    000000a5: 	addsd	%xmm1, %xmm8
    000000aa: 	unpckhpd	%xmm1, %xmm1
    000000ae: 	mulpd	%xmm5, %xmm7
    000000b2: 	movupd	-0x60(%rdx), %xmm5
    000000b7: 	addsd	%xmm8, %xmm1
    000000bc: 	mulpd	%xmm5, %xmm6
    000000c0: 	movupd	-0x10(%rax), %xmm5
    000000c5: 	mulpd	%xmm10, %xmm5
    000000ca: 	addsd	%xmm0, %xmm1
    000000ce: 	unpckhpd	%xmm0, %xmm0
    000000d2: 	addsd	%xmm1, %xmm0
    000000d6: 	movapd	%xmm5, %xmm8
    000000db: 	unpckhpd	%xmm5, %xmm5
    000000df: 	addsd	%xmm4, %xmm0
    000000e3: 	unpckhpd	%xmm4, %xmm4
    000000e7: 	addsd	%xmm0, %xmm4
    000000eb: 	movapd	%xmm3, %xmm0
    000000ef: 	unpckhpd	%xmm3, %xmm3
    000000f3: 	addsd	%xmm4, %xmm0
    000000f7: 	addsd	%xmm0, %xmm3
    000000fb: 	movapd	%xmm2, %xmm0
    000000ff: 	unpckhpd	%xmm2, %xmm2
    00000103: 	addsd	%xmm3, %xmm0
    00000107: 	addsd	%xmm0, %xmm2
    0000010b: 	movapd	%xmm7, %xmm0
    0000010f: 	unpckhpd	%xmm7, %xmm7
    00000113: 	movapd	%xmm7, %xmm1
    00000117: 	addsd	%xmm2, %xmm0
    0000011b: 	addsd	%xmm0, %xmm1
    0000011f: 	addsd	%xmm6, %xmm1
    00000123: 	unpckhpd	%xmm6, %xmm6
    00000127: 	movapd	%xmm6, %xmm0
    0000012b: 	addsd	%xmm1, %xmm0
    0000012f: 	addsd	%xmm0, %xmm8
    00000134: 	addsd	%xmm5, %xmm8
    00000139: 	cmpq	%rsi, %r9
    0000013c: 	jb	.Ltmp753 # Offset: 316
    00000142: 	shlq	$0x4, %rsi
    00000146: 	movq	%rsi, %rdx
.Ltmp758:
    00000149: 	movsd	(%rdi,%rdx,8), %xmm7
    0000014e: 	movsd	(%rcx,%rdx,8), %xmm9
    00000154: 	leaq	(,%rdx,8), %rax
    0000015c: 	movq	%r8, %rdx
    0000015f: 	movsd	0x8(%rdi,%rax), %xmm6
    00000165: 	movsd	0x10(%rdi,%rax), %xmm5
    0000016b: 	andq	$-0x10, %rdx
    0000016f: 	mulsd	%xmm7, %xmm9
    00000174: 	movsd	0x18(%rdi,%rax), %xmm4
    0000017a: 	movsd	0x20(%rdi,%rax), %xmm3
    00000180: 	movsd	0x28(%rdi,%rax), %xmm2
    00000186: 	movsd	0x30(%rdi,%rax), %xmm1
    0000018c: 	movsd	0x38(%rdi,%rax), %xmm0
    00000192: 	mulsd	0x40(%rcx,%rax), %xmm7
    00000198: 	addsd	%xmm8, %xmm9
    0000019d: 	movsd	0x8(%rcx,%rax), %xmm8
    000001a4: 	mulsd	%xmm6, %xmm8
    000001a9: 	mulsd	0x48(%rcx,%rax), %xmm6
    000001af: 	addsd	%xmm9, %xmm8
    000001b4: 	movsd	0x10(%rcx,%rax), %xmm9
    000001bb: 	mulsd	%xmm5, %xmm9
    000001c0: 	mulsd	0x50(%rcx,%rax), %xmm5
    000001c6: 	addsd	%xmm8, %xmm9
    000001cb: 	movsd	0x18(%rcx,%rax), %xmm8
    000001d2: 	mulsd	%xmm4, %xmm8
    000001d7: 	mulsd	0x58(%rcx,%rax), %xmm4
    000001dd: 	addsd	%xmm9, %xmm8
    000001e2: 	movsd	0x20(%rcx,%rax), %xmm9
    000001e9: 	mulsd	%xmm3, %xmm9
    000001ee: 	mulsd	0x60(%rcx,%rax), %xmm3
    000001f4: 	addsd	%xmm8, %xmm9
    000001f9: 	movsd	0x28(%rcx,%rax), %xmm8
    00000200: 	mulsd	%xmm2, %xmm8
    00000205: 	mulsd	0x68(%rcx,%rax), %xmm2
    0000020b: 	addsd	%xmm9, %xmm8
    00000210: 	movsd	0x30(%rcx,%rax), %xmm9
    00000217: 	mulsd	%xmm1, %xmm9
    0000021c: 	mulsd	0x70(%rcx,%rax), %xmm1
    00000222: 	addsd	%xmm8, %xmm9
    00000227: 	movsd	0x38(%rcx,%rax), %xmm8
    0000022e: 	mulsd	%xmm0, %xmm8
    00000233: 	mulsd	0x78(%rcx,%rax), %xmm0
    00000239: 	leaq	0x10(%rdx), %rax
    0000023d: 	addsd	%xmm9, %xmm8
    00000242: 	addsd	%xmm8, %xmm7
    00000247: 	addsd	%xmm7, %xmm6
    0000024b: 	addsd	%xmm6, %xmm5
    0000024f: 	addsd	%xmm5, %xmm4
    00000253: 	addsd	%xmm4, %xmm3
    00000257: 	addsd	%xmm3, %xmm2
    0000025b: 	addsd	%xmm2, %xmm1
    0000025f: 	addsd	%xmm1, %xmm0
    00000263: 	cmpq	%rax, %r10
    00000266: 	jbe	.Ltmp754 # Offset: 614
    0000026c: 	addq	$0x11, %rdx
    00000270: 	movq	%r10, %rsi
    00000273: 	movl	$0x1, %r9d
    00000279: 	subq	%rax, %rsi
    0000027c: 	cmpq	%rdx, %r10
    0000027f: 	cmovaeq	%rsi, %r9
    00000283: 	cmpq	$0x1, %rsi
    00000287: 	je	.Ltmp755 # Offset: 647
    0000028d: 	cmpq	%rdx, %r10
    00000290: 	jb	.Ltmp755 # Offset: 656
    00000296: 	leaq	(,%rax,8), %rdx
    0000029e: 	movq	%r9, %rsi
    000002a1: 	leaq	(%rdi,%rdx), %r8
    000002a5: 	addq	%rcx, %rdx
    000002a8: 	shrq	%rsi
    000002ab: 	movupd	(%rdx), %xmm1
    000002af: 	movupd	(%r8), %xmm4
    000002b4: 	addq	$0x10, %rdx
    000002b8: 	addq	$0x10, %r8
    000002bc: 	mulpd	%xmm4, %xmm1
    000002c0: 	movapd	%xmm1, %xmm2
    000002c4: 	unpckhpd	%xmm1, %xmm1
    000002c8: 	addsd	%xmm0, %xmm2
    000002cc: 	addsd	%xmm2, %xmm1
    000002d0: 	movapd	%xmm1, %xmm0
    000002d4: 	cmpq	$0x1, %rsi
    000002d8: 	je	.Ltmp756 # Offset: 728
.Ltmp757:
    000002de: 	movupd	(%r8), %xmm1
    000002e3: 	movupd	(%rdx), %xmm4
    000002e7: 	mulpd	%xmm4, %xmm1
    000002eb: 	movapd	%xmm1, %xmm2
    000002ef: 	unpckhpd	%xmm1, %xmm1
    000002f3: 	addsd	%xmm0, %xmm2
    000002f7: 	addsd	%xmm2, %xmm1
    000002fb: 	movapd	%xmm1, %xmm0
    000002ff: 	cmpq	$0x2, %rsi
    00000303: 	je	.Ltmp756 # Offset: 771
    00000309: 	movupd	0x10(%r8), %xmm1
    0000030f: 	movupd	0x10(%rdx), %xmm4
    00000314: 	mulpd	%xmm4, %xmm1
    00000318: 	movapd	%xmm1, %xmm2
    0000031c: 	unpckhpd	%xmm1, %xmm1
    00000320: 	addsd	%xmm0, %xmm2
    00000324: 	addsd	%xmm2, %xmm1
    00000328: 	movapd	%xmm1, %xmm0
    0000032c: 	cmpq	$0x3, %rsi
    00000330: 	je	.Ltmp756 # Offset: 816
    00000336: 	movupd	0x20(%r8), %xmm1
    0000033c: 	movupd	0x20(%rdx), %xmm4
    00000341: 	mulpd	%xmm4, %xmm1
    00000345: 	movapd	%xmm1, %xmm2
    00000349: 	unpckhpd	%xmm1, %xmm1
    0000034d: 	addsd	%xmm0, %xmm2
    00000351: 	addsd	%xmm2, %xmm1
    00000355: 	movapd	%xmm1, %xmm0
    00000359: 	cmpq	$0x4, %rsi
    0000035d: 	je	.Ltmp756 # Offset: 861
    00000363: 	movupd	0x30(%r8), %xmm1
    00000369: 	movupd	0x30(%rdx), %xmm4
    0000036e: 	mulpd	%xmm4, %xmm1
    00000372: 	movapd	%xmm1, %xmm2
    00000376: 	unpckhpd	%xmm1, %xmm1
    0000037a: 	addsd	%xmm0, %xmm2
    0000037e: 	addsd	%xmm2, %xmm1
    00000382: 	movapd	%xmm1, %xmm0
    00000386: 	cmpq	$0x5, %rsi
    0000038a: 	je	.Ltmp756 # Offset: 906
    0000038c: 	movupd	0x40(%rdx), %xmm1
    00000391: 	movupd	0x40(%r8), %xmm4
    00000397: 	mulpd	%xmm4, %xmm1
    0000039b: 	movapd	%xmm1, %xmm2
    0000039f: 	unpckhpd	%xmm1, %xmm1
    000003a3: 	addsd	%xmm0, %xmm2
    000003a7: 	addsd	%xmm2, %xmm1
    000003ab: 	movapd	%xmm1, %xmm0
    000003af: 	cmpq	$0x6, %rsi
    000003b3: 	je	.Ltmp756 # Offset: 947
    000003b5: 	movupd	0x50(%r8), %xmm1
    000003bb: 	movupd	0x50(%rdx), %xmm4
    000003c0: 	mulpd	%xmm4, %xmm1
    000003c4: 	movapd	%xmm1, %xmm2
    000003c8: 	unpckhpd	%xmm1, %xmm1
    000003cc: 	addsd	%xmm0, %xmm2
    000003d0: 	addsd	%xmm2, %xmm1
    000003d4: 	movapd	%xmm1, %xmm0
    000003d8: 	cmpq	$0x7, %rsi
    000003dc: 	je	.Ltmp756 # Offset: 988
    000003de: 	movupd	0x60(%r8), %xmm2
    000003e4: 	movupd	0x60(%rdx), %xmm1
    000003e9: 	mulpd	%xmm2, %xmm1
    000003ed: 	movapd	%xmm1, %xmm2
    000003f1: 	unpckhpd	%xmm1, %xmm1
    000003f5: 	addsd	%xmm0, %xmm2
    000003f9: 	addsd	%xmm2, %xmm1
    000003fd: 	movapd	%xmm1, %xmm0
.Ltmp756:
    00000401: 	addq	%rsi, %rsi
    00000404: 	addq	%rsi, %rax
    00000407: 	cmpq	%rsi, %r9
    0000040a: 	je	.Ltmp754 # Offset: 1034
.Ltmp755:
    0000040c: 	movsd	(%rcx,%rax,8), %xmm1
    00000411: 	mulsd	(%rdi,%rax,8), %xmm1
    00000416: 	addsd	%xmm1, %xmm0
    0000041a: 	retq # Offset: 1050
    0000041b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp754:
    00000420: 	retq # Offset: 1056
    00000421: 	nopl	(%rax) # Size: 7
.Ltmp751:
    00000428: 	movupd	(%rsi), %xmm4
    0000042c: 	movupd	(%rdi), %xmm1
    00000430: 	pxor	%xmm0, %xmm0
    00000434: 	leaq	0x10(%rsi), %rdx
    00000438: 	leaq	0x10(%rdi), %r8
    0000043c: 	movl	$0xf, %r9d
    00000442: 	movl	$0x7, %esi
    00000447: 	xorl	%eax, %eax
    00000449: 	mulpd	%xmm4, %xmm1
    0000044d: 	addsd	%xmm1, %xmm0
    00000451: 	unpckhpd	%xmm1, %xmm1
    00000455: 	addsd	%xmm1, %xmm0
    00000459: 	jmp	.Ltmp757 # Offset: 1113
.Ltmp752:
    0000045e: 	pxor	%xmm8, %xmm8
    00000463: 	xorl	%edx, %edx
    00000465: 	jmp	.Ltmp758 # Offset: 1125
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKddET0_T_S3_m"

Binary Function "_Z14inner_product7IPKddET0_T_S3_m" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x1d760
  Size        : 0xfc
  MaxSize     : 0x100
  Offset      : 0x1d760
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	cmpq	$0x1, %rdx
    00000008: 	je	.Ltmp759 # Offset: 8
    0000000e: 	leaq	-0x2(%rdx), %r9
    00000012: 	xorl	%eax, %eax
    00000014: 	pxor	%xmm0, %xmm0
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	movq	%r9, %r8
    0000001d: 	shrq	%r8
    00000020: 	addq	$0x1, %r8
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp760:
    00000028: 	movupd	(%rdi,%rax), %xmm1
    0000002d: 	movupd	(%rsi,%rax), %xmm4
    00000032: 	addq	$0x1, %rcx
    00000036: 	addq	$0x10, %rax
    0000003a: 	mulpd	%xmm4, %xmm1
    0000003e: 	addpd	%xmm1, %xmm0
    00000042: 	cmpq	%rcx, %r8
    00000045: 	ja	.Ltmp760 # Offset: 69
    00000047: 	andq	$-0x2, %r9
    0000004b: 	movapd	%xmm0, %xmm2
    0000004f: 	unpckhpd	%xmm0, %xmm0
    00000053: 	leaq	0x2(%r9), %rcx
    00000057: 	cmpq	%rcx, %rdx
    0000005a: 	jbe	.Ltmp761 # Offset: 90
    00000060: 	addq	$0x3, %r9
    00000064: 	movq	%rdx, %rax
    00000067: 	movl	$0x1, %r10d
    0000006d: 	subq	%rcx, %rax
    00000070: 	cmpq	%r9, %rdx
    00000073: 	cmovaeq	%rax, %r10
    00000077: 	cmpq	$0x1, %rax
    0000007b: 	je	.Ltmp762 # Offset: 123
    0000007d: 	cmpq	%r9, %rdx
    00000080: 	jb	.Ltmp762 # Offset: 128
    00000082: 	movq	%r10, %r8
    00000085: 	leaq	(,%rcx,8), %rdx
    0000008d: 	xorl	%eax, %eax
    0000008f: 	shrq	%r8
    00000092: 	leaq	(%rdi,%rdx), %r9
    00000096: 	addq	%rsi, %rdx
    00000099: 	shlq	$0x4, %r8
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp763:
    000000a0: 	movupd	(%rdx,%rax), %xmm1
    000000a5: 	movupd	(%r9,%rax), %xmm5
    000000ab: 	addq	$0x10, %rax
    000000af: 	mulpd	%xmm5, %xmm1
    000000b3: 	addsd	%xmm1, %xmm2
    000000b7: 	unpckhpd	%xmm1, %xmm1
    000000bb: 	addsd	%xmm1, %xmm2
    000000bf: 	cmpq	%rax, %r8
    000000c2: 	jne	.Ltmp763 # Offset: 194
    000000c4: 	movq	%r10, %rax
    000000c7: 	andq	$-0x2, %rax
    000000cb: 	addq	%rax, %rcx
    000000ce: 	cmpq	%r10, %rax
    000000d1: 	je	.Ltmp761 # Offset: 209
.Ltmp762:
    000000d3: 	movsd	(%rsi,%rcx,8), %xmm1
    000000d8: 	mulsd	(%rdi,%rcx,8), %xmm1
    000000dd: 	addsd	%xmm1, %xmm2
.Ltmp761:
    000000e1: 	addsd	%xmm2, %xmm0
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp759:
    000000f0: 	pxor	%xmm0, %xmm0
    000000f4: 	xorl	%ecx, %ecx
    000000f6: 	movapd	%xmm0, %xmm2
    000000fa: 	jmp	.Ltmp762 # Offset: 250
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKddET0_T_S3_m"

Binary Function "_Z14inner_product8IPKddET0_T_S3_m" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x1d860
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x1d860
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	$0x3, %rdx
    0000000b: 	je	.Ltmp764 # Offset: 11
    00000011: 	leaq	-0x4(%rdx), %r9
    00000015: 	pxor	%xmm1, %xmm1
    00000019: 	xorl	%eax, %eax
    0000001b: 	xorl	%edi, %edi
    0000001d: 	movq	%r9, %r8
    00000020: 	movapd	%xmm1, %xmm2
    00000024: 	shrq	$0x2, %r8
    00000028: 	addq	$0x1, %r8
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp765:
    00000030: 	movupd	(%rsi,%rax), %xmm0
    00000035: 	movupd	(%rcx,%rax), %xmm4
    0000003a: 	addq	$0x1, %rdi
    0000003e: 	movupd	0x10(%rcx,%rax), %xmm5
    00000044: 	mulpd	%xmm4, %xmm0
    00000048: 	addpd	%xmm0, %xmm2
    0000004c: 	movupd	0x10(%rsi,%rax), %xmm0
    00000052: 	addq	$0x20, %rax
    00000056: 	mulpd	%xmm5, %xmm0
    0000005a: 	addpd	%xmm0, %xmm1
    0000005e: 	cmpq	%rdi, %r8
    00000061: 	ja	.Ltmp765 # Offset: 97
    00000063: 	movapd	%xmm1, %xmm3
    00000067: 	movapd	%xmm2, %xmm0
    0000006b: 	unpckhpd	%xmm2, %xmm2
    0000006f: 	andq	$-0x4, %r9
    00000073: 	addsd	%xmm2, %xmm3
    00000077: 	unpckhpd	%xmm1, %xmm1
    0000007b: 	leaq	0x4(%r9), %rdi
    0000007f: 	addsd	%xmm1, %xmm3
    00000083: 	cmpq	%rdx, %rdi
    00000086: 	jae	.Ltmp766 # Offset: 134
    0000008c: 	addq	$0x5, %r9
    00000090: 	movq	%rdx, %rax
    00000093: 	movl	$0x1, %r10d
    00000099: 	subq	%rdi, %rax
    0000009c: 	cmpq	%r9, %rdx
    0000009f: 	cmovaeq	%rax, %r10
    000000a3: 	cmpq	$0x1, %rax
    000000a7: 	je	.Ltmp767 # Offset: 167
    000000a9: 	cmpq	%r9, %rdx
    000000ac: 	jb	.Ltmp767 # Offset: 172
.Ltmp769:
    000000ae: 	movq	%r10, %r8
    000000b1: 	leaq	(,%rdi,8), %rdx
    000000b9: 	xorl	%eax, %eax
    000000bb: 	shrq	%r8
    000000be: 	leaq	(%rcx,%rdx), %r9
    000000c2: 	addq	%rsi, %rdx
    000000c5: 	shlq	$0x4, %r8
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp768:
    000000d0: 	movupd	(%rdx,%rax), %xmm1
    000000d5: 	movupd	(%r9,%rax), %xmm6
    000000db: 	addq	$0x10, %rax
    000000df: 	mulpd	%xmm6, %xmm1
    000000e3: 	addsd	%xmm1, %xmm0
    000000e7: 	unpckhpd	%xmm1, %xmm1
    000000eb: 	addsd	%xmm1, %xmm0
    000000ef: 	cmpq	%rax, %r8
    000000f2: 	jne	.Ltmp768 # Offset: 242
    000000f4: 	movq	%r10, %rax
    000000f7: 	andq	$-0x2, %rax
    000000fb: 	addq	%rax, %rdi
    000000fe: 	cmpq	%rax, %r10
    00000101: 	je	.Ltmp766 # Offset: 257
.Ltmp767:
    00000103: 	movsd	(%rsi,%rdi,8), %xmm1
    00000108: 	mulsd	(%rcx,%rdi,8), %xmm1
    0000010d: 	addsd	%xmm1, %xmm0
.Ltmp766:
    00000111: 	addsd	%xmm3, %xmm0
    00000115: 	retq # Offset: 277
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp764:
    00000120: 	pxor	%xmm3, %xmm3
    00000124: 	movl	$0x3, %r10d
    0000012a: 	xorl	%edi, %edi
    0000012c: 	movapd	%xmm3, %xmm0
    00000130: 	jmp	.Ltmp769 # Offset: 304
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKddET0_T_S3_m"

Binary Function "_Z14inner_product9IPKddET0_T_S3_m" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x1d9a0
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x1d9a0
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	cmpq	$0x7, %rdx
    0000000e: 	je	.Ltmp770 # Offset: 14
    00000014: 	leaq	-0x8(%rdx), %r10
    00000018: 	pxor	%xmm8, %xmm8
    0000001d: 	movq	%rsi, %rcx
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%r10, %rdi
    00000026: 	movapd	%xmm8, %xmm7
    0000002b: 	movapd	%xmm8, %xmm6
    00000030: 	xorl	%esi, %esi
    00000032: 	shrq	$0x3, %rdi
    00000036: 	movapd	%xmm8, %xmm0
    0000003b: 	addq	$0x1, %rdi
    0000003f: 	nop # Size: 1
.Ltmp771:
    00000040: 	movupd	(%rcx), %xmm4
    00000044: 	movupd	(%rax), %xmm1
    00000048: 	addq	$0x1, %rsi
    0000004c: 	addq	$0x40, %rcx
    00000050: 	movupd	-0x20(%rcx), %xmm2
    00000055: 	movlpd	-0x38(%rcx), %xmm2
    0000005a: 	addq	$0x40, %rax
    0000005e: 	movhpd	-0x20(%rax), %xmm1
    00000063: 	movhpd	-0x20(%rcx), %xmm4
    00000068: 	movupd	-0x30(%rcx), %xmm3
    0000006d: 	movupd	-0x10(%rax), %xmm5
    00000072: 	mulpd	%xmm1, %xmm4
    00000076: 	movupd	-0x20(%rax), %xmm1
    0000007b: 	movlpd	-0x38(%rax), %xmm1
    00000080: 	movhpd	-0x10(%rcx), %xmm3
    00000085: 	movlpd	-0x28(%rax), %xmm5
    0000008a: 	mulpd	%xmm1, %xmm2
    0000008e: 	movupd	-0x30(%rax), %xmm1
    00000093: 	movhpd	-0x10(%rax), %xmm1
    00000098: 	mulpd	%xmm1, %xmm3
    0000009c: 	movupd	-0x10(%rcx), %xmm1
    000000a1: 	movlpd	-0x28(%rcx), %xmm1
    000000a6: 	addsd	%xmm4, %xmm0
    000000aa: 	unpckhpd	%xmm4, %xmm4
    000000ae: 	mulpd	%xmm5, %xmm1
    000000b2: 	addsd	%xmm2, %xmm6
    000000b6: 	unpckhpd	%xmm2, %xmm2
    000000ba: 	addsd	%xmm4, %xmm0
    000000be: 	addsd	%xmm3, %xmm7
    000000c2: 	unpckhpd	%xmm3, %xmm3
    000000c6: 	addsd	%xmm2, %xmm6
    000000ca: 	movapd	%xmm1, %xmm5
    000000ce: 	unpckhpd	%xmm1, %xmm1
    000000d2: 	addsd	%xmm8, %xmm5
    000000d7: 	addsd	%xmm3, %xmm7
    000000db: 	addsd	%xmm5, %xmm1
    000000df: 	movapd	%xmm1, %xmm8
    000000e4: 	cmpq	%rdi, %rsi
    000000e7: 	jb	.Ltmp771 # Offset: 231
    000000ed: 	addsd	%xmm7, %xmm6
    000000f1: 	andq	$-0x8, %r10
    000000f5: 	leaq	0x8(%r10), %rcx
    000000f9: 	addsd	%xmm1, %xmm6
    000000fd: 	cmpq	%rdx, %rcx
    00000100: 	jae	.Ltmp772 # Offset: 256
    00000106: 	addq	$0x9, %r10
    0000010a: 	movq	%rdx, %rax
    0000010d: 	movl	$0x1, %r11d
    00000113: 	subq	%rcx, %rax
    00000116: 	cmpq	%r10, %rdx
    00000119: 	cmovaeq	%rax, %r11
    0000011d: 	cmpq	$0x1, %rax
    00000121: 	je	.Ltmp773 # Offset: 289
    00000123: 	cmpq	%r10, %rdx
    00000126: 	jb	.Ltmp773 # Offset: 294
.Ltmp775:
    00000128: 	movq	%r11, %rsi
    0000012b: 	leaq	(,%rcx,8), %rdx
    00000133: 	xorl	%eax, %eax
    00000135: 	shrq	%rsi
    00000138: 	leaq	(%r8,%rdx), %rdi
    0000013c: 	addq	%r9, %rdx
    0000013f: 	shlq	$0x4, %rsi
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp774:
    00000148: 	movupd	(%rdx,%rax), %xmm1
    0000014d: 	movupd	(%rdi,%rax), %xmm7
    00000152: 	addq	$0x10, %rax
    00000156: 	mulpd	%xmm7, %xmm1
    0000015a: 	addsd	%xmm1, %xmm0
    0000015e: 	unpckhpd	%xmm1, %xmm1
    00000162: 	addsd	%xmm1, %xmm0
    00000166: 	cmpq	%rax, %rsi
    00000169: 	jne	.Ltmp774 # Offset: 361
    0000016b: 	movq	%r11, %rax
    0000016e: 	andq	$-0x2, %rax
    00000172: 	addq	%rax, %rcx
    00000175: 	cmpq	%rax, %r11
    00000178: 	je	.Ltmp772 # Offset: 376
.Ltmp773:
    0000017a: 	movsd	(%r9,%rcx,8), %xmm1
    00000180: 	mulsd	(%r8,%rcx,8), %xmm1
    00000186: 	addsd	%xmm1, %xmm0
.Ltmp772:
    0000018a: 	addsd	%xmm6, %xmm0
    0000018e: 	retq # Offset: 398
    0000018f: 	nop # Size: 1
.Ltmp770:
    00000190: 	pxor	%xmm6, %xmm6
    00000194: 	movl	$0x7, %r11d
    0000019a: 	xorl	%ecx, %ecx
    0000019c: 	movapd	%xmm6, %xmm0
    000001a0: 	jmp	.Ltmp775 # Offset: 416
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKddET0_T_S3_m"

Binary Function "_Z15inner_product10IPKddET0_T_S3_m" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x1db50
  Size        : 0x37e
  MaxSize     : 0x380
  Offset      : 0x1db50
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKddET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %r10
    0000000a: 	cmpq	$0xf, %rdx
    0000000e: 	je	.Ltmp776 # Offset: 14
    00000014: 	leaq	-0x10(%rdx), %r8
    00000018: 	movq	%r8, %rsi
    0000001b: 	shrq	$0x4, %rsi
    0000001f: 	cmpq	$0xf, %r8
    00000023: 	jbe	.Ltmp777 # Offset: 35
    00000029: 	pxor	%xmm6, %xmm6
    0000002d: 	movq	%rcx, %rax
    00000030: 	movq	%rdi, %rdx
    00000033: 	xorl	%r9d, %r9d
    00000036: 	movapd	%xmm6, %xmm7
    0000003a: 	movapd	%xmm6, %xmm10
    0000003f: 	movapd	%xmm6, %xmm9
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp778:
    00000048: 	movupd	(%rdx), %xmm1
    0000004c: 	movupd	(%rax), %xmm0
    00000050: 	addq	$0x1, %r9
    00000054: 	subq	$-0x80, %rax
    00000058: 	movupd	-0x40(%rax), %xmm8
    0000005e: 	movupd	-0x20(%rax), %xmm3
    00000063: 	subq	$-0x80, %rdx
    00000067: 	movhpd	-0x60(%rdx), %xmm1
    0000006c: 	movhpd	-0x60(%rax), %xmm0
    00000071: 	movlpd	-0x38(%rax), %xmm3
    00000076: 	movupd	-0x70(%rax), %xmm4
    0000007b: 	mulpd	%xmm1, %xmm0
    0000007f: 	movhpd	-0x20(%rax), %xmm8
    00000085: 	movupd	-0x30(%rax), %xmm11
    0000008b: 	movupd	-0x50(%rdx), %xmm12
    00000091: 	mulpd	%xmm1, %xmm8
    00000096: 	movhpd	-0x50(%rax), %xmm4
    0000009b: 	movlpd	-0x68(%rdx), %xmm12
    000000a1: 	movhpd	-0x10(%rax), %xmm11
    000000a7: 	movapd	%xmm0, %xmm1
    000000ab: 	unpckhpd	%xmm0, %xmm0
    000000af: 	addsd	%xmm9, %xmm1
    000000b4: 	movapd	%xmm1, %xmm5
    000000b8: 	movupd	-0x60(%rdx), %xmm1
    000000bd: 	movlpd	-0x78(%rdx), %xmm1
    000000c2: 	addsd	%xmm0, %xmm5
    000000c6: 	movupd	-0x60(%rax), %xmm0
    000000cb: 	movlpd	-0x78(%rax), %xmm0
    000000d0: 	mulpd	%xmm1, %xmm3
    000000d4: 	mulpd	%xmm1, %xmm0
    000000d8: 	addsd	%xmm8, %xmm5
    000000dd: 	unpckhpd	%xmm8, %xmm8
    000000e2: 	addsd	%xmm8, %xmm5
    000000e7: 	movapd	%xmm0, %xmm1
    000000eb: 	unpckhpd	%xmm0, %xmm0
    000000ef: 	movapd	%xmm0, %xmm2
    000000f3: 	movupd	-0x70(%rdx), %xmm0
    000000f8: 	addsd	%xmm10, %xmm1
    000000fd: 	movapd	%xmm3, %xmm10
    00000102: 	unpckhpd	%xmm3, %xmm3
    00000106: 	movapd	%xmm5, %xmm9
    0000010b: 	movhpd	-0x50(%rdx), %xmm0
    00000110: 	mulpd	%xmm0, %xmm4
    00000114: 	addsd	%xmm1, %xmm2
    00000118: 	movupd	-0x10(%rax), %xmm1
    0000011d: 	movlpd	-0x28(%rax), %xmm1
    00000122: 	mulpd	%xmm0, %xmm11
    00000127: 	mulpd	%xmm12, %xmm1
    0000012c: 	addsd	%xmm2, %xmm10
    00000131: 	movapd	%xmm4, %xmm0
    00000135: 	unpckhpd	%xmm4, %xmm4
    00000139: 	addsd	%xmm7, %xmm0
    0000013d: 	movapd	%xmm11, %xmm7
    00000142: 	unpckhpd	%xmm11, %xmm11
    00000147: 	addsd	%xmm3, %xmm10
    0000014c: 	addsd	%xmm0, %xmm4
    00000150: 	movupd	-0x50(%rax), %xmm0
    00000155: 	movlpd	-0x68(%rax), %xmm0
    0000015a: 	mulpd	%xmm12, %xmm0
    0000015f: 	addsd	%xmm4, %xmm7
    00000163: 	addsd	%xmm11, %xmm7
    00000168: 	addsd	%xmm0, %xmm6
    0000016c: 	unpckhpd	%xmm0, %xmm0
    00000170: 	addsd	%xmm6, %xmm0
    00000174: 	movapd	%xmm1, %xmm6
    00000178: 	unpckhpd	%xmm1, %xmm1
    0000017c: 	addsd	%xmm0, %xmm6
    00000180: 	addsd	%xmm1, %xmm6
    00000184: 	cmpq	%r9, %rsi
    00000187: 	ja	.Ltmp778 # Offset: 391
    0000018d: 	shlq	$0x4, %rsi
    00000191: 	movq	%rsi, %rdx
.Ltmp783:
    00000194: 	movsd	(%rdi,%rdx,8), %xmm11
    0000019a: 	leaq	(,%rdx,8), %rax
    000001a2: 	movsd	(%rcx,%rdx,8), %xmm12
    000001a8: 	movq	%r8, %rsi
    000001ab: 	movsd	0x10(%rdi,%rax), %xmm5
    000001b1: 	movsd	0x20(%rdi,%rax), %xmm0
    000001b7: 	andq	$-0x10, %rsi
    000001bb: 	movsd	0x8(%rdi,%rax), %xmm8
    000001c2: 	mulsd	%xmm11, %xmm12
    000001c7: 	movsd	0x8(%rcx,%rax), %xmm14
    000001ce: 	leaq	0x10(%rsi), %rdx
    000001d2: 	movsd	0x10(%rcx,%rax), %xmm13
    000001d9: 	movsd	0x18(%rdi,%rax), %xmm4
    000001df: 	mulsd	%xmm8, %xmm14
    000001e4: 	movsd	0x28(%rdi,%rax), %xmm3
    000001ea: 	movsd	0x30(%rdi,%rax), %xmm1
    000001f0: 	mulsd	%xmm5, %xmm13
    000001f5: 	movsd	0x38(%rdi,%rax), %xmm2
    000001fb: 	mulsd	0x48(%rcx,%rax), %xmm8
    00000202: 	addsd	%xmm12, %xmm9
    00000207: 	movsd	0x18(%rcx,%rax), %xmm12
    0000020e: 	mulsd	0x50(%rcx,%rax), %xmm5
    00000214: 	mulsd	0x40(%rcx,%rax), %xmm11
    0000021b: 	addsd	%xmm10, %xmm14
    00000220: 	movsd	0x20(%rcx,%rax), %xmm10
    00000227: 	mulsd	%xmm4, %xmm12
    0000022c: 	addsd	%xmm7, %xmm13
    00000231: 	movsd	0x30(%rcx,%rax), %xmm7
    00000237: 	mulsd	0x58(%rcx,%rax), %xmm4
    0000023d: 	mulsd	%xmm0, %xmm10
    00000242: 	mulsd	%xmm1, %xmm7
    00000246: 	mulsd	0x70(%rcx,%rax), %xmm1
    0000024c: 	addsd	%xmm6, %xmm12
    00000251: 	movsd	0x38(%rcx,%rax), %xmm6
    00000257: 	mulsd	0x60(%rcx,%rax), %xmm0
    0000025d: 	addsd	%xmm9, %xmm10
    00000262: 	movsd	0x28(%rcx,%rax), %xmm9
    00000269: 	mulsd	%xmm2, %xmm6
    0000026d: 	addsd	%xmm13, %xmm7
    00000272: 	mulsd	0x78(%rcx,%rax), %xmm2
    00000278: 	mulsd	%xmm3, %xmm9
    0000027d: 	mulsd	0x68(%rcx,%rax), %xmm3
    00000283: 	addsd	%xmm10, %xmm11
    00000288: 	addsd	%xmm7, %xmm5
    0000028c: 	addsd	%xmm12, %xmm6
    00000291: 	addsd	%xmm11, %xmm0
    00000296: 	addsd	%xmm14, %xmm9
    0000029b: 	addsd	%xmm5, %xmm1
    0000029f: 	addsd	%xmm6, %xmm4
    000002a3: 	addsd	%xmm9, %xmm8
    000002a8: 	addsd	%xmm4, %xmm2
    000002ac: 	addsd	%xmm8, %xmm3
    000002b1: 	addsd	%xmm3, %xmm1
    000002b5: 	addsd	%xmm2, %xmm1
    000002b9: 	cmpq	%r10, %rdx
    000002bc: 	jae	.Ltmp779 # Offset: 700
    000002c2: 	addq	$0x11, %rsi
    000002c6: 	movq	%r10, %rax
    000002c9: 	movl	$0x1, %r11d
    000002cf: 	subq	%rdx, %rax
    000002d2: 	cmpq	%rsi, %r10
    000002d5: 	cmovaeq	%rax, %r11
    000002d9: 	cmpq	$0x1, %rax
    000002dd: 	je	.Ltmp780 # Offset: 733
    000002df: 	cmpq	%rsi, %r10
    000002e2: 	jb	.Ltmp780 # Offset: 738
.Ltmp782:
    000002e4: 	movq	%r11, %r8
    000002e7: 	leaq	(,%rdx,8), %rsi
    000002ef: 	xorl	%eax, %eax
    000002f1: 	shrq	%r8
    000002f4: 	leaq	(%rdi,%rsi), %r9
    000002f8: 	addq	%rcx, %rsi
    000002fb: 	shlq	$0x4, %r8
    000002ff: 	nop # Size: 1
.Ltmp781:
    00000300: 	movupd	(%rsi,%rax), %xmm2
    00000305: 	movupd	(%r9,%rax), %xmm7
    0000030b: 	addq	$0x10, %rax
    0000030f: 	mulpd	%xmm7, %xmm2
    00000313: 	addsd	%xmm2, %xmm0
    00000317: 	unpckhpd	%xmm2, %xmm2
    0000031b: 	addsd	%xmm2, %xmm0
    0000031f: 	cmpq	%r8, %rax
    00000322: 	jne	.Ltmp781 # Offset: 802
    00000324: 	movq	%r11, %rax
    00000327: 	andq	$-0x2, %rax
    0000032b: 	addq	%rax, %rdx
    0000032e: 	cmpq	%r11, %rax
    00000331: 	je	.Ltmp779 # Offset: 817
.Ltmp780:
    00000333: 	movsd	(%rcx,%rdx,8), %xmm2
    00000338: 	mulsd	(%rdi,%rdx,8), %xmm2
    0000033d: 	addsd	%xmm2, %xmm0
.Ltmp779:
    00000341: 	addsd	%xmm1, %xmm0
    00000345: 	retq # Offset: 837
    00000346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp776:
    00000350: 	pxor	%xmm1, %xmm1
    00000354: 	movl	$0xf, %r11d
    0000035a: 	xorl	%edx, %edx
    0000035c: 	movapd	%xmm1, %xmm0
    00000360: 	jmp	.Ltmp782 # Offset: 864
.Ltmp777:
    00000365: 	pxor	%xmm6, %xmm6
    00000369: 	xorl	%edx, %edx
    0000036b: 	movapd	%xmm6, %xmm7
    0000036f: 	movapd	%xmm6, %xmm10
    00000374: 	movapd	%xmm6, %xmm9
    00000379: 	jmp	.Ltmp783 # Offset: 889
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKddET0_T_S3_m"

Binary Function "_Z17inner_product_stdIPKeeET0_T_S3_m" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x1ded0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1ded0
  Section     : .text
  Orc Section : .local.text._Z17inner_product_stdIPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	shlq	$0x4, %rdx
    00000008: 	je	.Ltmp784 # Offset: 8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	fldz
    0000000e: 	nop # Size: 2
.Ltmp785:
    00000010: 	fldt	(%rdi,%rax)
    00000013: 	fldt	(%rsi,%rax)
    00000016: 	addq	$0x10, %rax
    0000001a: 	fmulp	%st, %st(1)
    0000001c: 	faddp	%st, %st(1)
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	jne	.Ltmp785 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp784:
    00000028: 	fldz
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z17inner_product_stdIPKeeET0_T_S3_m"

Binary Function "_Z14inner_product1IPKeeET0_T_S3_m" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x1df00
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x1df00
  Section     : .text
  Orc Section : .local.text._Z14inner_product1IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp786 # Offset: 7
    00000009: 	shlq	$0x4, %rdx
    0000000d: 	fldz
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp787:
    00000018: 	fldt	(%rdi,%rax)
    0000001b: 	fldt	(%rsi,%rax)
    0000001e: 	addq	$0x10, %rax
    00000022: 	fmulp	%st, %st(1)
    00000024: 	faddp	%st, %st(1)
    00000026: 	cmpq	%rax, %rdx
    00000029: 	jne	.Ltmp787 # Offset: 41
    0000002b: 	retq # Offset: 43
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp786:
    00000030: 	fldz
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product1IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product2IPKeeET0_T_S3_m" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x1df40
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1df40
  Section     : .text
  Orc Section : .local.text._Z14inner_product2IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	shlq	$0x4, %rdx
    00000008: 	je	.Ltmp788 # Offset: 8
    0000000a: 	xorl	%eax, %eax
    0000000c: 	fldz
    0000000e: 	nop # Size: 2
.Ltmp789:
    00000010: 	fldt	(%rdi,%rax)
    00000013: 	fldt	(%rsi,%rax)
    00000016: 	addq	$0x10, %rax
    0000001a: 	fmulp	%st, %st(1)
    0000001c: 	faddp	%st, %st(1)
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	jne	.Ltmp789 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp788:
    00000028: 	fldz
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product2IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product3IPKeeET0_T_S3_m" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x1df70
  Size        : 0x6c
  MaxSize     : 0x70
  Offset      : 0x1df70
  Section     : .text
  Orc Section : .local.text._Z14inner_product3IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	cmpq	$0x1, %rdx
    00000008: 	je	.Ltmp790 # Offset: 8
    0000000a: 	leaq	-0x2(%rdx), %r8
    0000000e: 	fldz
    00000010: 	xorl	%eax, %eax
    00000012: 	movq	%r8, %rcx
    00000015: 	shrq	%rcx
    00000018: 	addq	$0x1, %rcx
    0000001c: 	shlq	$0x5, %rcx
.Ltmp791:
    00000020: 	fldt	(%rdi,%rax)
    00000023: 	fldt	(%rsi,%rax)
    00000026: 	fmulp	%st, %st(1)
    00000028: 	faddp	%st, %st(1)
    0000002a: 	fldt	0x10(%rdi,%rax)
    0000002e: 	fldt	0x10(%rsi,%rax)
    00000032: 	addq	$0x20, %rax
    00000036: 	fmulp	%st, %st(1)
    00000038: 	faddp	%st, %st(1)
    0000003a: 	cmpq	%rax, %rcx
    0000003d: 	jne	.Ltmp791 # Offset: 61
    0000003f: 	andq	$-0x2, %r8
    00000043: 	addq	$0x2, %r8
    00000047: 	cmpq	%r8, %rdx
    0000004a: 	ja	.Ltmp792 # Offset: 74
    0000004c: 	retq # Offset: 76
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp792:
    00000050: 	shlq	$0x4, %r8
    00000054: 	addq	%r8, %rdi
    00000057: 	addq	%r8, %rsi
.Ltmp793:
    0000005a: 	fldt	(%rdi)
    0000005c: 	fldt	(%rsi)
    0000005e: 	fmulp	%st, %st(1)
    00000060: 	faddp	%st, %st(1)
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp790:
    00000068: 	fldz
    0000006a: 	jmp	.Ltmp793 # Offset: 106
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product3IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product4IPKeeET0_T_S3_m" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x1dfe0
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x1dfe0
  Section     : .text
  Orc Section : .local.text._Z14inner_product4IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rdx, %rdi
    0000000d: 	cmpq	$0x3, %rdx
    00000011: 	je	.Ltmp794 # Offset: 17
    00000017: 	movq	%rsi, %rdx
    0000001a: 	fldz
    0000001c: 	leaq	-0x4(%rdi), %rsi
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rsi, %rcx
    00000026: 	shrq	$0x2, %rcx
    0000002a: 	shlq	$0x6, %rcx
    0000002e: 	leaq	0x40(%r8,%rcx), %rcx
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp795:
    00000038: 	fldt	(%rax)
    0000003a: 	addq	$0x40, %rax
    0000003e: 	addq	$0x40, %rdx
    00000042: 	fldt	-0x40(%rdx)
    00000045: 	fmulp	%st, %st(1)
    00000047: 	faddp	%st, %st(1)
    00000049: 	fldt	-0x30(%rax)
    0000004c: 	fldt	-0x30(%rdx)
    0000004f: 	fmulp	%st, %st(1)
    00000051: 	faddp	%st, %st(1)
    00000053: 	fldt	-0x20(%rax)
    00000056: 	fldt	-0x20(%rdx)
    00000059: 	fmulp	%st, %st(1)
    0000005b: 	faddp	%st, %st(1)
    0000005d: 	fldt	-0x10(%rax)
    00000060: 	fldt	-0x10(%rdx)
    00000063: 	fmulp	%st, %st(1)
    00000065: 	faddp	%st, %st(1)
    00000067: 	cmpq	%rax, %rcx
    0000006a: 	jne	.Ltmp795 # Offset: 106
    0000006c: 	movq	%rsi, %rax
    0000006f: 	andq	$-0x4, %rax
    00000073: 	leaq	0x4(%rax), %rdx
    00000077: 	cmpq	%rdx, %rdi
    0000007a: 	jbe	.Ltmp796 # Offset: 122
    0000007c: 	shlq	$0x4, %rdx
    00000080: 	leaq	0x5(%rax), %rcx
    00000084: 	fldt	(%r9,%rdx)
    00000088: 	fldt	(%r8,%rdx)
    0000008c: 	fmulp	%st, %st(1)
    0000008e: 	faddp	%st, %st(1)
    00000090: 	cmpq	%rcx, %rdi
    00000093: 	jbe	.Ltmp796 # Offset: 147
    00000095: 	fldt	0x10(%r9,%rdx)
    0000009a: 	addq	$0x6, %rax
    0000009e: 	leaq	0x10(%rdx), %rcx
    000000a2: 	fldt	0x10(%r8,%rdx)
    000000a7: 	fmulp	%st, %st(1)
    000000a9: 	faddp	%st, %st(1)
    000000ab: 	cmpq	%rax, %rdi
    000000ae: 	jbe	.Ltmp796 # Offset: 174
.Ltmp797:
    000000b0: 	fldt	0x10(%r9,%rcx)
    000000b5: 	addq	$0x1, %rax
    000000b9: 	fldt	0x10(%r8,%rcx)
    000000be: 	fmulp	%st, %st(1)
    000000c0: 	faddp	%st, %st(1)
    000000c2: 	cmpq	%rax, %rdi
    000000c5: 	jbe	.Ltmp796 # Offset: 197
    000000c7: 	fldt	0x20(%r8,%rcx)
    000000cc: 	fldt	0x20(%r9,%rcx)
    000000d1: 	fmulp	%st, %st(1)
    000000d3: 	faddp	%st, %st(1)
    000000d5: 	retq # Offset: 213
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp796:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp794:
    000000e8: 	fldt	(%rsi)
    000000ea: 	movl	$0x10, %ecx
    000000ef: 	movl	$0x2, %eax
    000000f4: 	fldt	(%r8)
    000000f7: 	fmulp	%st, %st(1)
    000000f9: 	fadds	DATAat0x32540(%rip)
    000000ff: 	fldt	0x10(%rsi)
    00000102: 	fldt	0x10(%r8)
    00000106: 	fmulp	%st, %st(1)
    00000108: 	faddp	%st, %st(1)
    0000010a: 	jmp	.Ltmp797 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product4IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product5IPKeeET0_T_S3_m" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x1e0f0
  Size        : 0x18f
  MaxSize     : 0x190
  Offset      : 0x1e0f0
  Section     : .text
  Orc Section : .local.text._Z14inner_product5IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	movq	%rdx, %rsi
    0000000a: 	cmpq	$0x7, %rdx
    0000000e: 	je	.Ltmp798 # Offset: 14
    00000014: 	leaq	-0x8(%rsi), %rcx
    00000018: 	fldz
    0000001a: 	movq	%rdi, %rax
    0000001d: 	movq	%r9, %rdx
    00000020: 	movq	%rcx, %r8
    00000023: 	shrq	$0x3, %r8
    00000027: 	shlq	$0x7, %r8
    0000002b: 	leaq	0x80(%rdi,%r8), %r8
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp799:
    00000038: 	fldt	(%rax)
    0000003a: 	subq	$-0x80, %rax
    0000003e: 	subq	$-0x80, %rdx
    00000042: 	fldt	-0x80(%rdx)
    00000045: 	fmulp	%st, %st(1)
    00000047: 	faddp	%st, %st(1)
    00000049: 	fldt	-0x70(%rax)
    0000004c: 	fldt	-0x70(%rdx)
    0000004f: 	fmulp	%st, %st(1)
    00000051: 	faddp	%st, %st(1)
    00000053: 	fldt	-0x60(%rax)
    00000056: 	fldt	-0x60(%rdx)
    00000059: 	fmulp	%st, %st(1)
    0000005b: 	faddp	%st, %st(1)
    0000005d: 	fldt	-0x50(%rax)
    00000060: 	fldt	-0x50(%rdx)
    00000063: 	fmulp	%st, %st(1)
    00000065: 	faddp	%st, %st(1)
    00000067: 	fldt	-0x40(%rax)
    0000006a: 	fldt	-0x40(%rdx)
    0000006d: 	fmulp	%st, %st(1)
    0000006f: 	faddp	%st, %st(1)
    00000071: 	fldt	-0x30(%rax)
    00000074: 	fldt	-0x30(%rdx)
    00000077: 	fmulp	%st, %st(1)
    00000079: 	faddp	%st, %st(1)
    0000007b: 	fldt	-0x20(%rax)
    0000007e: 	fldt	-0x20(%rdx)
    00000081: 	fmulp	%st, %st(1)
    00000083: 	faddp	%st, %st(1)
    00000085: 	fldt	-0x10(%rax)
    00000088: 	fldt	-0x10(%rdx)
    0000008b: 	fmulp	%st, %st(1)
    0000008d: 	faddp	%st, %st(1)
    0000008f: 	cmpq	%rax, %r8
    00000092: 	jne	.Ltmp799 # Offset: 146
    00000094: 	movq	%rcx, %rax
    00000097: 	andq	$-0x8, %rax
    0000009b: 	leaq	0x8(%rax), %rdx
    0000009f: 	cmpq	%rdx, %rsi
    000000a2: 	jbe	.Ltmp800 # Offset: 162
    000000a8: 	shlq	$0x4, %rdx
    000000ac: 	leaq	0x9(%rax), %rcx
    000000b0: 	fldt	(%r9,%rdx)
    000000b4: 	fldt	(%rdi,%rdx)
    000000b7: 	fmulp	%st, %st(1)
    000000b9: 	faddp	%st, %st(1)
    000000bb: 	cmpq	%rcx, %rsi
    000000be: 	jbe	.Ltmp800 # Offset: 190
    000000c4: 	fldt	0x10(%r9,%rdx)
    000000c9: 	addq	$0xa, %rax
    000000cd: 	leaq	0x10(%rdx), %rcx
    000000d1: 	fldt	0x10(%rdi,%rdx)
    000000d5: 	fmulp	%st, %st(1)
    000000d7: 	faddp	%st, %st(1)
    000000d9: 	cmpq	%rax, %rsi
    000000dc: 	jbe	.Ltmp800 # Offset: 220
.Ltmp801:
    000000e2: 	fldt	0x10(%r9,%rcx)
    000000e7: 	leaq	0x1(%rax), %rdx
    000000eb: 	fldt	0x10(%rdi,%rcx)
    000000ef: 	fmulp	%st, %st(1)
    000000f1: 	faddp	%st, %st(1)
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	jbe	.Ltmp800 # Offset: 246
    000000f8: 	fldt	0x20(%r9,%rcx)
    000000fd: 	leaq	0x2(%rax), %rdx
    00000101: 	fldt	0x20(%rdi,%rcx)
    00000105: 	fmulp	%st, %st(1)
    00000107: 	faddp	%st, %st(1)
    00000109: 	cmpq	%rdx, %rsi
    0000010c: 	jbe	.Ltmp800 # Offset: 268
    0000010e: 	fldt	0x30(%r9,%rcx)
    00000113: 	leaq	0x3(%rax), %rdx
    00000117: 	fldt	0x30(%rdi,%rcx)
    0000011b: 	fmulp	%st, %st(1)
    0000011d: 	faddp	%st, %st(1)
    0000011f: 	cmpq	%rdx, %rsi
    00000122: 	jbe	.Ltmp800 # Offset: 290
    00000124: 	fldt	0x40(%r9,%rcx)
    00000129: 	leaq	0x4(%rax), %rdx
    0000012d: 	fldt	0x40(%rdi,%rcx)
    00000131: 	fmulp	%st, %st(1)
    00000133: 	faddp	%st, %st(1)
    00000135: 	cmpq	%rdx, %rsi
    00000138: 	jbe	.Ltmp800 # Offset: 312
    0000013a: 	fldt	0x50(%r9,%rcx)
    0000013f: 	addq	$0x5, %rax
    00000143: 	fldt	0x50(%rdi,%rcx)
    00000147: 	fmulp	%st, %st(1)
    00000149: 	faddp	%st, %st(1)
    0000014b: 	cmpq	%rax, %rsi
    0000014e: 	jbe	.Ltmp800 # Offset: 334
    00000150: 	fldt	0x60(%rdi,%rcx)
    00000154: 	fldt	0x60(%r9,%rcx)
    00000159: 	fmulp	%st, %st(1)
    0000015b: 	faddp	%st, %st(1)
    0000015d: 	retq # Offset: 349
    0000015e: 	nop # Size: 2
.Ltmp800:
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp798:
    00000168: 	fldt	(%r9)
    0000016b: 	movl	$0x10, %ecx
    00000170: 	movl	$0x2, %eax
    00000175: 	fldt	(%rdi)
    00000177: 	fmulp	%st, %st(1)
    00000179: 	fadds	DATAat0x32540(%rip)
    0000017f: 	fldt	0x10(%rdi)
    00000182: 	fldt	0x10(%r9)
    00000186: 	fmulp	%st, %st(1)
    00000188: 	faddp	%st, %st(1)
    0000018a: 	jmp	.Ltmp801 # Offset: 394
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product5IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product6IPKeeET0_T_S3_m" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x1e280
  Size        : 0x327
  MaxSize     : 0x330
  Offset      : 0x1e280
  Section     : .text
  Orc Section : .local.text._Z14inner_product6IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %rdi
    0000000d: 	cmpq	$0xf, %rdx
    00000011: 	je	.Ltmp802 # Offset: 17
    00000017: 	movq	%rsi, %rax
    0000001a: 	fldz
    0000001c: 	leaq	-0x10(%rdi), %rsi
    00000020: 	movq	%r9, %rdx
    00000023: 	movq	%rsi, %rcx
    00000026: 	shrq	$0x4, %rcx
    0000002a: 	shlq	$0x8, %rcx
    0000002e: 	leaq	0x100(%r8,%rcx), %rcx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp803:
    00000040: 	fldt	(%rdx)
    00000042: 	addq	$0x100, %rax
    00000048: 	addq	$0x100, %rdx
    0000004f: 	fldt	-0xf0(%rdx)
    00000055: 	fldt	-0xe0(%rdx)
    0000005b: 	fldt	-0xd0(%rdx)
    00000061: 	fldt	-0xc0(%rdx)
    00000067: 	fldt	-0xb0(%rdx)
    0000006d: 	fldt	-0x100(%rax)
    00000073: 	fmul	%st(6), %st
    00000075: 	faddp	%st, %st(7)
    00000077: 	fldt	-0xf0(%rax)
    0000007d: 	fmul	%st(5), %st
    0000007f: 	faddp	%st, %st(7)
    00000081: 	fldt	-0xe0(%rax)
    00000087: 	fmul	%st(4), %st
    00000089: 	faddp	%st, %st(7)
    0000008b: 	fldt	-0xd0(%rax)
    00000091: 	fmul	%st(3), %st
    00000093: 	faddp	%st, %st(7)
    00000095: 	fldt	-0xc0(%rax)
    0000009b: 	fmul	%st(2), %st
    0000009d: 	faddp	%st, %st(7)
    0000009f: 	fldt	-0xb0(%rax)
    000000a5: 	fxch	%st(1)
    000000a7: 	fstpt	-0x18(%rsp)
    000000ab: 	fldt	-0x18(%rsp)
    000000af: 	fmulp	%st, %st(1)
    000000b1: 	faddp	%st, %st(6)
    000000b3: 	fldt	-0xa0(%rax)
    000000b9: 	fldt	-0xa0(%rdx)
    000000bf: 	fmulp	%st, %st(1)
    000000c1: 	faddp	%st, %st(6)
    000000c3: 	fldt	-0x90(%rax)
    000000c9: 	fldt	-0x90(%rdx)
    000000cf: 	fmulp	%st, %st(1)
    000000d1: 	faddp	%st, %st(6)
    000000d3: 	fldt	-0x80(%rax)
    000000d6: 	fmulp	%st, %st(5)
    000000d8: 	fxch	%st(4)
    000000da: 	faddp	%st, %st(5)
    000000dc: 	fldt	-0x70(%rax)
    000000df: 	fmulp	%st, %st(3)
    000000e1: 	fxch	%st(2)
    000000e3: 	faddp	%st, %st(4)
    000000e5: 	fldt	-0x60(%rax)
    000000e8: 	fmulp	%st, %st(1)
    000000ea: 	faddp	%st, %st(3)
    000000ec: 	fldt	-0x50(%rax)
    000000ef: 	fmulp	%st, %st(1)
    000000f1: 	faddp	%st, %st(2)
    000000f3: 	fldt	-0x40(%rax)
    000000f6: 	fmulp	%st, %st(1)
    000000f8: 	faddp	%st, %st(1)
    000000fa: 	fldt	-0x30(%rax)
    000000fd: 	fldt	-0x18(%rsp)
    00000101: 	fmulp	%st, %st(1)
    00000103: 	faddp	%st, %st(1)
    00000105: 	fldt	-0x20(%rax)
    00000108: 	fldt	-0xa0(%rdx)
    0000010e: 	fmulp	%st, %st(1)
    00000110: 	faddp	%st, %st(1)
    00000112: 	fldt	-0x10(%rax)
    00000115: 	fldt	-0x90(%rdx)
    0000011b: 	fmulp	%st, %st(1)
    0000011d: 	faddp	%st, %st(1)
    0000011f: 	cmpq	%rax, %rcx
    00000122: 	jne	.Ltmp803 # Offset: 290
    00000128: 	movq	%rsi, %rax
    0000012b: 	andq	$-0x10, %rax
    0000012f: 	leaq	0x10(%rax), %rdx
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	jbe	.Ltmp804 # Offset: 310
    0000013c: 	shlq	$0x4, %rdx
    00000140: 	leaq	0x11(%rax), %rcx
    00000144: 	fldt	(%r8,%rdx)
    00000148: 	fldt	(%r9,%rdx)
    0000014c: 	fmulp	%st, %st(1)
    0000014e: 	faddp	%st, %st(1)
    00000150: 	cmpq	%rcx, %rdi
    00000153: 	jbe	.Ltmp804 # Offset: 339
    00000159: 	fldt	0x10(%r8,%rdx)
    0000015e: 	addq	$0x12, %rax
    00000162: 	leaq	0x10(%rdx), %rcx
    00000166: 	fldt	0x10(%r9,%rdx)
    0000016b: 	fmulp	%st, %st(1)
    0000016d: 	faddp	%st, %st(1)
    0000016f: 	cmpq	%rax, %rdi
    00000172: 	jbe	.Ltmp804 # Offset: 370
.Ltmp805:
    00000178: 	fldt	0x10(%r8,%rcx)
    0000017d: 	leaq	0x1(%rax), %rdx
    00000181: 	fldt	0x10(%r9,%rcx)
    00000186: 	fmulp	%st, %st(1)
    00000188: 	faddp	%st, %st(1)
    0000018a: 	cmpq	%rdx, %rdi
    0000018d: 	jbe	.Ltmp804 # Offset: 397
    00000193: 	fldt	0x20(%r8,%rcx)
    00000198: 	leaq	0x2(%rax), %rdx
    0000019c: 	fldt	0x20(%r9,%rcx)
    000001a1: 	fmulp	%st, %st(1)
    000001a3: 	faddp	%st, %st(1)
    000001a5: 	cmpq	%rdx, %rdi
    000001a8: 	jbe	.Ltmp804 # Offset: 424
    000001ae: 	fldt	0x30(%r8,%rcx)
    000001b3: 	leaq	0x3(%rax), %rdx
    000001b7: 	fldt	0x30(%r9,%rcx)
    000001bc: 	fmulp	%st, %st(1)
    000001be: 	faddp	%st, %st(1)
    000001c0: 	cmpq	%rdx, %rdi
    000001c3: 	jbe	.Ltmp804 # Offset: 451
    000001c9: 	fldt	0x40(%r8,%rcx)
    000001ce: 	leaq	0x4(%rax), %rdx
    000001d2: 	fldt	0x40(%r9,%rcx)
    000001d7: 	fmulp	%st, %st(1)
    000001d9: 	faddp	%st, %st(1)
    000001db: 	cmpq	%rdx, %rdi
    000001de: 	jbe	.Ltmp804 # Offset: 478
    000001e4: 	fldt	0x50(%r8,%rcx)
    000001e9: 	leaq	0x5(%rax), %rdx
    000001ed: 	fldt	0x50(%r9,%rcx)
    000001f2: 	fmulp	%st, %st(1)
    000001f4: 	faddp	%st, %st(1)
    000001f6: 	cmpq	%rdx, %rdi
    000001f9: 	jbe	.Ltmp804 # Offset: 505
    000001ff: 	fldt	0x60(%r8,%rcx)
    00000204: 	leaq	0x6(%rax), %rdx
    00000208: 	fldt	0x60(%r9,%rcx)
    0000020d: 	fmulp	%st, %st(1)
    0000020f: 	faddp	%st, %st(1)
    00000211: 	cmpq	%rdx, %rdi
    00000214: 	jbe	.Ltmp804 # Offset: 532
    0000021a: 	fldt	0x70(%r8,%rcx)
    0000021f: 	leaq	0x7(%rax), %rdx
    00000223: 	fldt	0x70(%r9,%rcx)
    00000228: 	fmulp	%st, %st(1)
    0000022a: 	faddp	%st, %st(1)
    0000022c: 	cmpq	%rdx, %rdi
    0000022f: 	jbe	.Ltmp804 # Offset: 559
    00000235: 	fldt	0x80(%r8,%rcx)
    0000023d: 	leaq	0x8(%rax), %rdx
    00000241: 	fldt	0x80(%r9,%rcx)
    00000249: 	fmulp	%st, %st(1)
    0000024b: 	faddp	%st, %st(1)
    0000024d: 	cmpq	%rdx, %rdi
    00000250: 	jbe	.Ltmp804 # Offset: 592
    00000256: 	fldt	0x90(%r8,%rcx)
    0000025e: 	leaq	0x9(%rax), %rdx
    00000262: 	fldt	0x90(%r9,%rcx)
    0000026a: 	fmulp	%st, %st(1)
    0000026c: 	faddp	%st, %st(1)
    0000026e: 	cmpq	%rdx, %rdi
    00000271: 	jbe	.Ltmp804 # Offset: 625
    00000277: 	fldt	0xa0(%r8,%rcx)
    0000027f: 	leaq	0xa(%rax), %rdx
    00000283: 	fldt	0xa0(%r9,%rcx)
    0000028b: 	fmulp	%st, %st(1)
    0000028d: 	faddp	%st, %st(1)
    0000028f: 	cmpq	%rdx, %rdi
    00000292: 	jbe	.Ltmp804 # Offset: 658
    00000294: 	fldt	0xb0(%r8,%rcx)
    0000029c: 	leaq	0xb(%rax), %rdx
    000002a0: 	fldt	0xb0(%r9,%rcx)
    000002a8: 	fmulp	%st, %st(1)
    000002aa: 	faddp	%st, %st(1)
    000002ac: 	cmpq	%rdx, %rdi
    000002af: 	jbe	.Ltmp804 # Offset: 687
    000002b1: 	fldt	0xc0(%r8,%rcx)
    000002b9: 	leaq	0xc(%rax), %rdx
    000002bd: 	fldt	0xc0(%r9,%rcx)
    000002c5: 	fmulp	%st, %st(1)
    000002c7: 	faddp	%st, %st(1)
    000002c9: 	cmpq	%rdx, %rdi
    000002cc: 	jbe	.Ltmp804 # Offset: 716
    000002ce: 	fldt	0xd0(%r8,%rcx)
    000002d6: 	addq	$0xd, %rax
    000002da: 	fldt	0xd0(%r9,%rcx)
    000002e2: 	fmulp	%st, %st(1)
    000002e4: 	faddp	%st, %st(1)
    000002e6: 	cmpq	%rax, %rdi
    000002e9: 	jbe	.Ltmp804 # Offset: 745
    000002eb: 	fldt	0xe0(%r9,%rcx)
    000002f3: 	fldt	0xe0(%r8,%rcx)
    000002fb: 	fmulp	%st, %st(1)
    000002fd: 	faddp	%st, %st(1)
.Ltmp804:
    000002ff: 	retq # Offset: 767
.Ltmp802:
    00000300: 	fldt	(%rsi)
    00000302: 	movl	$0x10, %ecx
    00000307: 	movl	$0x2, %eax
    0000030c: 	fldt	(%r9)
    0000030f: 	fmulp	%st, %st(1)
    00000311: 	fadds	DATAat0x32540(%rip)
    00000317: 	fldt	0x10(%r9)
    0000031b: 	fldt	0x10(%rsi)
    0000031e: 	fmulp	%st, %st(1)
    00000320: 	faddp	%st, %st(1)
    00000322: 	jmp	.Ltmp805 # Offset: 802
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product6IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product7IPKeeET0_T_S3_m" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x1e5b0
  Size        : 0x88
  MaxSize     : 0x90
  Offset      : 0x1e5b0
  Section     : .text
  Orc Section : .local.text._Z14inner_product7IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	cmpq	$0x1, %rdx
    00000008: 	je	.Ltmp806 # Offset: 8
    0000000a: 	leaq	-0x2(%rdx), %rcx
    0000000e: 	fldz
    00000010: 	xorl	%eax, %eax
    00000012: 	movq	%rcx, %r8
    00000015: 	fld	%st(0)
    00000017: 	shrq	%r8
    0000001a: 	addq	$0x1, %r8
    0000001e: 	shlq	$0x5, %r8
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp807:
    00000028: 	fldt	(%rdi,%rax)
    0000002b: 	fldt	(%rsi,%rax)
    0000002e: 	fmulp	%st, %st(1)
    00000030: 	faddp	%st, %st(2)
    00000032: 	fldt	0x10(%rdi,%rax)
    00000036: 	fldt	0x10(%rsi,%rax)
    0000003a: 	addq	$0x20, %rax
    0000003e: 	fmulp	%st, %st(1)
    00000040: 	faddp	%st, %st(1)
    00000042: 	cmpq	%rax, %r8
    00000045: 	jne	.Ltmp807 # Offset: 69
    00000047: 	andq	$-0x2, %rcx
    0000004b: 	addq	$0x2, %rcx
    0000004f: 	cmpq	%rcx, %rdx
    00000052: 	jbe	.Ltmp808 # Offset: 82
.Ltmp810:
    00000054: 	movq	%rcx, %rax
    00000057: 	shlq	$0x4, %rax
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp809:
    00000060: 	fldt	(%rdi,%rax)
    00000063: 	addq	$0x1, %rcx
    00000067: 	fldt	(%rsi,%rax)
    0000006a: 	addq	$0x10, %rax
    0000006e: 	fmulp	%st, %st(1)
    00000070: 	faddp	%st, %st(2)
    00000072: 	cmpq	%rcx, %rdx
    00000075: 	ja	.Ltmp809 # Offset: 117
.Ltmp808:
    00000077: 	faddp	%st, %st(1)
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp806:
    00000080: 	fldz
    00000082: 	xorl	%ecx, %ecx
    00000084: 	fld	%st(0)
    00000086: 	jmp	.Ltmp810 # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product7IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product8IPKeeET0_T_S3_m" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x1e640
  Size        : 0xb0
  MaxSize     : 0xb0
  Offset      : 0x1e640
  Section     : .text
  Orc Section : .local.text._Z14inner_product8IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	$0x3, %rdx
    0000000b: 	je	.Ltmp811 # Offset: 11
    00000011: 	fldz
    00000013: 	movq	%rdi, %rax
    00000016: 	leaq	-0x4(%rdx), %rdi
    0000001a: 	movq	%rsi, %rcx
    0000001d: 	movq	%rdi, %r9
    00000020: 	fld	%st(0)
    00000022: 	shrq	$0x2, %r9
    00000026: 	fld	%st(1)
    00000028: 	shlq	$0x6, %r9
    0000002c: 	fld	%st(2)
    0000002e: 	leaq	0x40(%r8,%r9), %r9
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp812:
    00000038: 	fldt	(%rax)
    0000003a: 	addq	$0x40, %rax
    0000003e: 	addq	$0x40, %rcx
    00000042: 	fldt	-0x40(%rcx)
    00000045: 	fmulp	%st, %st(1)
    00000047: 	faddp	%st, %st(4)
    00000049: 	fldt	-0x30(%rax)
    0000004c: 	fldt	-0x30(%rcx)
    0000004f: 	fmulp	%st, %st(1)
    00000051: 	faddp	%st, %st(1)
    00000053: 	fldt	-0x20(%rax)
    00000056: 	fldt	-0x20(%rcx)
    00000059: 	fmulp	%st, %st(1)
    0000005b: 	faddp	%st, %st(2)
    0000005d: 	fldt	-0x10(%rax)
    00000060: 	fldt	-0x10(%rcx)
    00000063: 	fmulp	%st, %st(1)
    00000065: 	faddp	%st, %st(3)
    00000067: 	cmpq	%rax, %r9
    0000006a: 	jne	.Ltmp812 # Offset: 106
    0000006c: 	faddp	%st, %st(1)
    0000006e: 	andq	$-0x4, %rdi
    00000072: 	leaq	0x4(%rdi), %rcx
    00000076: 	faddp	%st, %st(1)
    00000078: 	cmpq	%rdx, %rcx
    0000007b: 	jae	.Ltmp813 # Offset: 123
.Ltmp815:
    0000007d: 	movq	%rcx, %rax
    00000080: 	shlq	$0x4, %rax
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp814:
    00000088: 	fldt	(%r8,%rax)
    0000008c: 	addq	$0x1, %rcx
    00000090: 	fldt	(%rsi,%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	fmulp	%st, %st(1)
    00000099: 	faddp	%st, %st(2)
    0000009b: 	cmpq	%rcx, %rdx
    0000009e: 	ja	.Ltmp814 # Offset: 158
.Ltmp813:
    000000a0: 	faddp	%st, %st(1)
    000000a2: 	retq # Offset: 162
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp811:
    000000a8: 	fldz
    000000aa: 	xorl	%ecx, %ecx
    000000ac: 	fld	%st(0)
    000000ae: 	jmp	.Ltmp815 # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product8IPKeeET0_T_S3_m"

Binary Function "_Z14inner_product9IPKeeET0_T_S3_m" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x1e6f0
  Size        : 0xe0
  MaxSize     : 0xe0
  Offset      : 0x1e6f0
  Section     : .text
  Orc Section : .local.text._Z14inner_product9IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	$0x7, %rdx
    0000000b: 	je	.Ltmp816 # Offset: 11
    00000011: 	fldz
    00000013: 	movq	%rdi, %rax
    00000016: 	leaq	-0x8(%rdx), %rdi
    0000001a: 	movq	%rsi, %rcx
    0000001d: 	movq	%rdi, %r9
    00000020: 	fld	%st(0)
    00000022: 	shrq	$0x3, %r9
    00000026: 	fld	%st(1)
    00000028: 	shlq	$0x7, %r9
    0000002c: 	fld	%st(2)
    0000002e: 	leaq	0x80(%r8,%r9), %r9
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp817:
    00000040: 	fldt	(%rax)
    00000042: 	subq	$-0x80, %rax
    00000046: 	subq	$-0x80, %rcx
    0000004a: 	fldt	-0x80(%rcx)
    0000004d: 	fmulp	%st, %st(1)
    0000004f: 	faddp	%st, %st(4)
    00000051: 	fldt	-0x70(%rax)
    00000054: 	fldt	-0x70(%rcx)
    00000057: 	fmulp	%st, %st(1)
    00000059: 	faddp	%st, %st(1)
    0000005b: 	fldt	-0x60(%rax)
    0000005e: 	fldt	-0x60(%rcx)
    00000061: 	fmulp	%st, %st(1)
    00000063: 	faddp	%st, %st(2)
    00000065: 	fldt	-0x50(%rax)
    00000068: 	fldt	-0x50(%rcx)
    0000006b: 	fmulp	%st, %st(1)
    0000006d: 	faddp	%st, %st(3)
    0000006f: 	fldt	-0x40(%rax)
    00000072: 	fldt	-0x40(%rcx)
    00000075: 	fmulp	%st, %st(1)
    00000077: 	faddp	%st, %st(4)
    00000079: 	fldt	-0x30(%rax)
    0000007c: 	fldt	-0x30(%rcx)
    0000007f: 	fmulp	%st, %st(1)
    00000081: 	faddp	%st, %st(1)
    00000083: 	fldt	-0x20(%rax)
    00000086: 	fldt	-0x20(%rcx)
    00000089: 	fmulp	%st, %st(1)
    0000008b: 	faddp	%st, %st(2)
    0000008d: 	fldt	-0x10(%rax)
    00000090: 	fldt	-0x10(%rcx)
    00000093: 	fmulp	%st, %st(1)
    00000095: 	faddp	%st, %st(3)
    00000097: 	cmpq	%rax, %r9
    0000009a: 	jne	.Ltmp817 # Offset: 154
    0000009c: 	faddp	%st, %st(1)
    0000009e: 	andq	$-0x8, %rdi
    000000a2: 	leaq	0x8(%rdi), %rcx
    000000a6: 	faddp	%st, %st(1)
    000000a8: 	cmpq	%rdx, %rcx
    000000ab: 	jae	.Ltmp818 # Offset: 171
.Ltmp820:
    000000ad: 	movq	%rcx, %rax
    000000b0: 	shlq	$0x4, %rax
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp819:
    000000b8: 	fldt	(%r8,%rax)
    000000bc: 	addq	$0x1, %rcx
    000000c0: 	fldt	(%rsi,%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	fmulp	%st, %st(1)
    000000c9: 	faddp	%st, %st(2)
    000000cb: 	cmpq	%rcx, %rdx
    000000ce: 	ja	.Ltmp819 # Offset: 206
.Ltmp818:
    000000d0: 	faddp	%st, %st(1)
    000000d2: 	retq # Offset: 210
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp816:
    000000d8: 	fldz
    000000da: 	xorl	%ecx, %ecx
    000000dc: 	fld	%st(0)
    000000de: 	jmp	.Ltmp820 # Offset: 222
DWARF CFI Instructions:
    <empty>
End of Function "_Z14inner_product9IPKeeET0_T_S3_m"

Binary Function "_Z15inner_product10IPKeeET0_T_S3_m" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x1e7d0
  Size        : 0x180
  MaxSize     : 0x180
  Offset      : 0x1e7d0
  Section     : .text
  Orc Section : .local.text._Z15inner_product10IPKeeET0_T_S3_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	$0xf, %rdx
    0000000b: 	je	.Ltmp821 # Offset: 11
    00000011: 	fldz
    00000013: 	movq	%rdi, %rcx
    00000016: 	leaq	-0x10(%rdx), %rdi
    0000001a: 	movq	%rsi, %rax
    0000001d: 	movq	%rdi, %r9
    00000020: 	fld	%st(0)
    00000022: 	fld	%st(1)
    00000024: 	shrq	$0x4, %r9
    00000028: 	shlq	$0x8, %r9
    0000002c: 	leaq	0x100(%rsi,%r9), %r9
    00000034: 	fld	%st(0)
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp822:
    00000040: 	fldt	(%rcx)
    00000042: 	addq	$0x100, %rax
    00000048: 	addq	$0x100, %rcx
    0000004f: 	fldt	-0xf0(%rcx)
    00000055: 	fldt	-0xe0(%rcx)
    0000005b: 	fldt	-0x100(%rax)
    00000061: 	fmul	%st(3), %st
    00000063: 	faddp	%st, %st(5)
    00000065: 	fldt	-0xf0(%rax)
    0000006b: 	fmul	%st(2), %st
    0000006d: 	faddp	%st, %st(6)
    0000006f: 	fldt	-0xe0(%rax)
    00000075: 	fxch	%st(1)
    00000077: 	fstpt	-0x18(%rsp)
    0000007b: 	fldt	-0x18(%rsp)
    0000007f: 	fmulp	%st, %st(1)
    00000081: 	faddp	%st, %st(3)
    00000083: 	fldt	-0xd0(%rax)
    00000089: 	fldt	-0xd0(%rcx)
    0000008f: 	fmulp	%st, %st(1)
    00000091: 	faddp	%st, %st(6)
    00000093: 	fldt	-0xc0(%rax)
    00000099: 	fldt	-0xc0(%rcx)
    0000009f: 	fmulp	%st, %st(1)
    000000a1: 	faddp	%st, %st(4)
    000000a3: 	fldt	-0xb0(%rax)
    000000a9: 	fldt	-0xb0(%rcx)
    000000af: 	fmulp	%st, %st(1)
    000000b1: 	faddp	%st, %st(5)
    000000b3: 	fldt	-0xa0(%rax)
    000000b9: 	fldt	-0xa0(%rcx)
    000000bf: 	fmulp	%st, %st(1)
    000000c1: 	faddp	%st, %st(3)
    000000c3: 	fldt	-0x90(%rax)
    000000c9: 	fldt	-0x90(%rcx)
    000000cf: 	fmulp	%st, %st(1)
    000000d1: 	faddp	%st, %st(6)
    000000d3: 	fldt	-0x80(%rax)
    000000d6: 	fmulp	%st, %st(2)
    000000d8: 	fxch	%st(1)
    000000da: 	faddp	%st, %st(3)
    000000dc: 	fldt	-0x70(%rax)
    000000df: 	fmulp	%st, %st(1)
    000000e1: 	faddp	%st, %st(3)
    000000e3: 	fldt	-0x60(%rax)
    000000e6: 	fldt	-0x18(%rsp)
    000000ea: 	fmulp	%st, %st(1)
    000000ec: 	faddp	%st, %st(1)
    000000ee: 	fldt	-0x50(%rax)
    000000f1: 	fldt	-0xd0(%rcx)
    000000f7: 	fmulp	%st, %st(1)
    000000f9: 	faddp	%st, %st(4)
    000000fb: 	fldt	-0x40(%rax)
    000000fe: 	fldt	-0xc0(%rcx)
    00000104: 	fmulp	%st, %st(1)
    00000106: 	faddp	%st, %st(2)
    00000108: 	fldt	-0x30(%rax)
    0000010b: 	fldt	-0xb0(%rcx)
    00000111: 	fmulp	%st, %st(1)
    00000113: 	faddp	%st, %st(3)
    00000115: 	fldt	-0x20(%rax)
    00000118: 	fldt	-0xa0(%rcx)
    0000011e: 	fmulp	%st, %st(1)
    00000120: 	faddp	%st, %st(1)
    00000122: 	fldt	-0x10(%rax)
    00000125: 	fldt	-0x90(%rcx)
    0000012b: 	fmulp	%st, %st(1)
    0000012d: 	faddp	%st, %st(4)
    0000012f: 	cmpq	%rax, %r9
    00000132: 	jne	.Ltmp822 # Offset: 306
    00000138: 	andq	$-0x10, %rdi
    0000013c: 	leaq	0x10(%rdi), %rcx
    00000140: 	faddp	%st, %st(2)
    00000142: 	fxch	%st(1)
    00000144: 	faddp	%st, %st(2)
    00000146: 	cmpq	%rdx, %rcx
    00000149: 	jae	.Ltmp823 # Offset: 329
.Ltmp825:
    0000014b: 	movq	%rcx, %rax
    0000014e: 	shlq	$0x4, %rax
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp824:
    00000158: 	fldt	(%r8,%rax)
    0000015c: 	addq	$0x1, %rcx
    00000160: 	fldt	(%rsi,%rax)
    00000163: 	addq	$0x10, %rax
    00000167: 	fmulp	%st, %st(1)
    00000169: 	faddp	%st, %st(1)
    0000016b: 	cmpq	%rcx, %rdx
    0000016e: 	ja	.Ltmp824 # Offset: 366
.Ltmp823:
    00000170: 	faddp	%st, %st(1)
    00000172: 	retq # Offset: 370
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp821:
    00000178: 	fldz
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	fld	%st(0)
    0000017e: 	jmp	.Ltmp825 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z15inner_product10IPKeeET0_T_S3_m"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 167
  State       : disassembled
  Address     : 0x1e950
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x1e950
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp826 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp829:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp828:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp827 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp828 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp829 # Offset: 142
.Ltmp826:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp830 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp831 # Offset: 164
.Ltmp834:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp832 # Offset: 177
.Ltmp833:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp831 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp833 # Offset: 214
.Ltmp832:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp834 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp835 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp837:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp836 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp836:
    0000010a: 	addq	$0x20, %r13
.Ltmp831:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp837 # Offset: 275
.Ltmp835:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp838 # Offset: 283
.Ltmp844:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp839 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp840:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp840 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp839:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp827:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp828 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp829 # Offset: 389
    0000018b: 	jmp	.Ltmp826 # Offset: 395
.Ltmp830:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp835 # Offset: 405
.Ltmp843:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp841 # Offset: 422
.Ltmp842:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp835 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp842 # Offset: 463
.Ltmp841:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp843 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp844 # Offset: 482
.Ltmp838:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x1eb50
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x1eb50
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp845 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp846 # Offset: 63
.Ltmp845:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp847 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp848 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp852:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp849 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp850 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp848:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp851 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp852 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp847:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp853:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp852 # Offset: 248
.Ltmp846:
    000000fd: 	leaq	DATAat0x32158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp849:
    00000109: 	leaq	DATAat0x32182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp850:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp851:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp853 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp854 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp854:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x1eca0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x1eca0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp855 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp856 # Offset: 152
.Ltmp867:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp857 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp858 # Offset: 204
.Ltmp857:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp859 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp860 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp862:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp861 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp860:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp862 # Offset: 339
    00000155: 	jmp	.Ltmp863 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp856:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp864 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp865 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp866 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp866:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp869:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp867 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp859:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp863:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp862 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp864:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp868 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp869 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp869 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp868:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp869 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp869 # Offset: 696
.Ltmp858:
    000002bd: 	leaq	DATAat0x32158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp865:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp870 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp870:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp855:
    000002e0: 	leaq	DATAat0x32198(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp861:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x1efd0
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x1efd0
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x321c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x28, %rsp
    00000027: 	movq	%r8, 0x8(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x18(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp871 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp873:
    00000058: 	movq	%r12, %rdx
    0000005b: 	movq	%r13, %rsi
    0000005e: 	movq	%r14, %rdi
    00000061: 	callq	*%rbp # Offset: 97
    00000063: 	movl	%eax, %r8d
    00000066: 	movl	init_value(%rip), %eax
    0000006c: 	imull	%eax, %eax
    0000006f: 	imull	$0x1f40, %eax, %eax
    00000075: 	cmpl	%eax, %r8d
    00000078: 	je	.Ltmp872 # Offset: 120
    0000007e: 	movq	0x8(%rsp), %rax
    00000083: 	movq	%r15, %rsi
    00000086: 	movl	$0x1, %edi
    0000008b: 	addl	$0x1, %ebx
    0000008e: 	movq	(%rax), %rdx
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	cmpl	%ebx, iterations(%rip)
    0000009e: 	jg	.Ltmp873 # Offset: 158
.Ltmp871:
    000000a0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ae: 	subq	$0x20, %rax
    000000b2: 	cmpq	%rax, %rbx
    000000b5: 	je	.Ltmp874 # Offset: 181
    000000bb: 	movq	0x8(%rsp), %rax
    000000c0: 	leaq	0x10(%rbx), %rdi
    000000c4: 	movq	%rdi, (%rbx)
    000000c7: 	movq	(%rax), %rbp
    000000ca: 	movq	0x8(%rax), %r12
    000000ce: 	movq	%rbp, %rax
    000000d1: 	addq	%r12, %rax
    000000d4: 	je	.Ltmp875 # Offset: 212
    000000d6: 	testq	%rbp, %rbp
    000000d9: 	je	.Ltmp876 # Offset: 217
.Ltmp875:
    000000df: 	movq	%r12, 0x10(%rsp)
    000000e4: 	cmpq	$0xf, %r12
    000000e8: 	ja	.Ltmp877 # Offset: 232
    000000ee: 	cmpq	$0x1, %r12
    000000f2: 	jne	.Ltmp878 # Offset: 242
    000000f8: 	movzbl	(%rbp), %eax
    000000fc: 	movb	%al, 0x10(%rbx)
.Ltmp881:
    000000ff: 	movq	%r12, 0x8(%rbx)
    00000103: 	movb	$0x0, (%rdi,%r12)
    00000108: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000116: 	addq	$0x20, %rax
    0000011a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000121: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000128: 	je	.Ltmp879 # Offset: 296
.Ltmp882:
    0000012e: 	movq	-0x20(%rax), %rbp
    00000132: 	callq	clock@PLT # Offset: 306
    00000137: 	movq	%rax, end_time(%rip)
    0000013e: 	movq	0x18(%rsp), %rdx
    00000143: 	subq	%fs:0x28, %rdx
    0000014c: 	jne	.Ltmp880 # Offset: 332
    00000152: 	subq	start_time(%rip), %rax
    00000159: 	pxor	%xmm0, %xmm0
    0000015d: 	movq	%rbp, %rdi
    00000160: 	cvtsi2sd	%rax, %xmm0
    00000165: 	divsd	DATAat0x32600(%rip), %xmm0
    0000016d: 	addq	$0x28, %rsp
    00000171: 	popq	%rbx
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 379
.Ltmp872:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp873 # Offset: 393
    0000018f: 	jmp	.Ltmp871 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp877:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp883:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp881 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp874:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp882 # Offset: 502
.Ltmp879:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp882 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp878:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp881 # Offset: 531
    00000219: 	jmp	.Ltmp883 # Offset: 537
.Ltmp880:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp876:
    00000220: 	leaq	DATAat0x32158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x1f200
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x1f200
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x321c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x28, %rsp
    00000027: 	movq	%r8, 0x8(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x18(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp884 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp886:
    00000058: 	movq	%r12, %rdx
    0000005b: 	movq	%r13, %rsi
    0000005e: 	movq	%r14, %rdi
    00000061: 	callq	*%rbp # Offset: 97
    00000063: 	movq	%rax, %r8
    00000066: 	movslq	init_value(%rip), %rax
    0000006d: 	imulq	%rax, %rax
    00000071: 	imulq	$0x1f40, %rax, %rax
    00000078: 	cmpq	%rax, %r8
    0000007b: 	je	.Ltmp885 # Offset: 123
    00000081: 	movq	0x8(%rsp), %rax
    00000086: 	movq	%r15, %rsi
    00000089: 	movl	$0x1, %edi
    0000008e: 	addl	$0x1, %ebx
    00000091: 	movq	(%rax), %rdx
    00000094: 	xorl	%eax, %eax
    00000096: 	callq	__printf_chk@PLT # Offset: 150
    0000009b: 	cmpl	%ebx, iterations(%rip)
    000000a1: 	jg	.Ltmp886 # Offset: 161
.Ltmp884:
    000000a3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b1: 	subq	$0x20, %rax
    000000b5: 	cmpq	%rax, %rbx
    000000b8: 	je	.Ltmp887 # Offset: 184
    000000be: 	movq	0x8(%rsp), %rax
    000000c3: 	leaq	0x10(%rbx), %rdi
    000000c7: 	movq	%rdi, (%rbx)
    000000ca: 	movq	(%rax), %rbp
    000000cd: 	movq	0x8(%rax), %r12
    000000d1: 	movq	%rbp, %rax
    000000d4: 	addq	%r12, %rax
    000000d7: 	je	.Ltmp888 # Offset: 215
    000000d9: 	testq	%rbp, %rbp
    000000dc: 	je	.Ltmp889 # Offset: 220
.Ltmp888:
    000000e2: 	movq	%r12, 0x10(%rsp)
    000000e7: 	cmpq	$0xf, %r12
    000000eb: 	ja	.Ltmp890 # Offset: 235
    000000f1: 	cmpq	$0x1, %r12
    000000f5: 	jne	.Ltmp891 # Offset: 245
    000000fb: 	movzbl	(%rbp), %eax
    000000ff: 	movb	%al, 0x10(%rbx)
.Ltmp894:
    00000102: 	movq	%r12, 0x8(%rbx)
    00000106: 	movb	$0x0, (%rdi,%r12)
    0000010b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000112: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000119: 	addq	$0x20, %rax
    0000011d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000124: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012b: 	je	.Ltmp892 # Offset: 299
.Ltmp895:
    00000131: 	movq	-0x20(%rax), %rbp
    00000135: 	callq	clock@PLT # Offset: 309
    0000013a: 	movq	%rax, end_time(%rip)
    00000141: 	movq	0x18(%rsp), %rdx
    00000146: 	subq	%fs:0x28, %rdx
    0000014f: 	jne	.Ltmp893 # Offset: 335
    00000155: 	subq	start_time(%rip), %rax
    0000015c: 	pxor	%xmm0, %xmm0
    00000160: 	movq	%rbp, %rdi
    00000163: 	cvtsi2sd	%rax, %xmm0
    00000168: 	divsd	DATAat0x32600(%rip), %xmm0
    00000170: 	addq	$0x28, %rsp
    00000174: 	popq	%rbx
    00000175: 	popq	%rbp
    00000176: 	popq	%r12
    00000178: 	popq	%r13
    0000017a: 	popq	%r14
    0000017c: 	popq	%r15
    0000017e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 382
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp885:
    00000188: 	addl	$0x1, %ebx
    0000018b: 	cmpl	%ebx, iterations(%rip)
    00000191: 	jg	.Ltmp886 # Offset: 401
    00000197: 	jmp	.Ltmp884 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp890:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	leaq	0x10(%rsp), %rsi
    000001a8: 	xorl	%edx, %edx
    000001aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 426
    000001af: 	movq	%rax, (%rbx)
    000001b2: 	movq	%rax, %rdi
    000001b5: 	movq	0x10(%rsp), %rax
    000001ba: 	movq	%rax, 0x10(%rbx)
.Ltmp896:
    000001be: 	movq	%r12, %rdx
    000001c1: 	movq	%rbp, %rsi
    000001c4: 	callq	memcpy@PLT # Offset: 452
    000001c9: 	movq	0x10(%rsp), %r12
    000001ce: 	movq	(%rbx), %rdi
    000001d1: 	jmp	.Ltmp894 # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp887:
    000001e0: 	movq	0x8(%rsp), %rsi
    000001e5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 492
    000001f1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000206: 	jne	.Ltmp895 # Offset: 518
.Ltmp892:
    0000020c: 	movq	-0x8(%rdx), %rax
    00000210: 	addq	$0x200, %rax
    00000216: 	jmp	.Ltmp895 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp891:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp894 # Offset: 547
    00000229: 	jmp	.Ltmp896 # Offset: 553
.Ltmp893:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp889:
    00000230: 	leaq	DATAat0x32158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x1f440
  Size        : 0x151c
  MaxSize     : 0x1520
  Offset      : 0x1f440
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x1f000(%rsp), %r11
.Ltmp897:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp897 # Offset: 37
    00000027: 	subq	$0x4c8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm1
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm2
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x1f4b8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movq	$0x8, 0x58(%rsp)
    00000064: 	movq	%rax, 0x20(%rsp)
    00000069: 	leaq	0xb0(%rsp), %r14
    00000071: 	leaq	0xfab0(%rsp), %r13
    00000079: 	movq	%rax, 0x50(%rsp)
    0000007e: 	movabsq	$0x745f3436746e6975, %rax
    00000088: 	movq	%rax, 0x60(%rsp)
    0000008d: 	movb	$0x0, 0x68(%rsp)
    00000092: 	movq	%rdi, 0x18(%rsp)
    00000097: 	movaps	%xmm1, 0x30(%rsp)
    0000009c: 	movaps	%xmm2, 0x40(%rsp)
    000000a1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 161
    000000a6: 	movslq	init_value(%rip), %rax
    000000ad: 	movq	%rax, %xmm0
    000000b2: 	movq	%r14, %rax
    000000b5: 	punpcklqdq	%xmm0, %xmm0
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp898:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%r13, %rax
    000000ca: 	jne	.Ltmp898 # Offset: 202
    000000cc: 	movq	%r13, %rax
    000000cf: 	leaq	0x1f4b0(%rsp), %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp899:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rdx, %rax
    000000ea: 	jne	.Ltmp899 # Offset: 234
    000000ec: 	leaq	0x50(%rsp), %rax
    000000f1: 	leaq	0x70(%rsp), %rbp
    000000f6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%rbp, %rdi
    00000103: 	movq	%rax, 0x10(%rsp)
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	movq	0x58(%rsp), %rdx
    00000112: 	movq	0x50(%rsp), %rsi
    00000117: 	movq	%rbp, %rdi
    0000011a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 282
    0000011f: 	leaq	0xa0(%rsp), %r12
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	movq	%r12, 0x90(%rsp)
    00000133: 	movq	(%rax), %rcx
    00000136: 	cmpq	%rdx, %rcx
    00000139: 	je	.Ltmp900 # Offset: 313
    0000013f: 	movq	%rcx, 0x90(%rsp)
    00000147: 	movq	0x10(%rax), %rcx
    0000014b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp994:
    00000153: 	movq	0x8(%rax), %rcx
    00000157: 	leaq	0x90(%rsp), %r15
    0000015f: 	movq	%r13, %rsi
    00000162: 	movq	%r14, %rdi
    00000165: 	movq	%r15, %r8
    00000168: 	movq	%rcx, 0x98(%rsp)
    00000170: 	leaq	_Z17inner_product_stdIPKmmET0_T_S3_m(%rip), %rcx
    00000177: 	movq	%rdx, (%rax)
    0000017a: 	movl	$0x1f40, %edx
    0000017f: 	movq	$0x0, 0x8(%rax)
    00000187: 	movb	$0x0, 0x10(%rax)
    0000018b: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 395
    00000190: 	movq	0x90(%rsp), %rdi
    00000198: 	cmpq	%r12, %rdi
    0000019b: 	je	.Ltmp901 # Offset: 411
    0000019d: 	movq	0xa0(%rsp), %rax
    000001a5: 	leaq	0x1(%rax), %rsi
    000001a9: 	callq	_ZdlPvm@PLT # Offset: 425
.Ltmp901:
    000001ae: 	movq	0x70(%rsp), %rdi
    000001b3: 	leaq	0x80(%rsp), %rbx
    000001bb: 	cmpq	%rbx, %rdi
    000001be: 	je	.Ltmp902 # Offset: 446
    000001c0: 	movq	0x80(%rsp), %rax
    000001c8: 	leaq	0x1(%rax), %rsi
    000001cc: 	callq	_ZdlPvm@PLT # Offset: 460
.Ltmp902:
    000001d1: 	movq	0x10(%rsp), %rsi
    000001d6: 	leaq	DATAat0x321f0(%rip), %rdx
    000001dd: 	movq	%rbp, %rdi
    000001e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 480
    000001e5: 	movq	0x58(%rsp), %rdx
    000001ea: 	movq	0x50(%rsp), %rsi
    000001ef: 	movq	%rbp, %rdi
    000001f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 498
    000001f7: 	movq	%r12, 0x90(%rsp)
    000001ff: 	movq	(%rax), %rcx
    00000202: 	leaq	0x10(%rax), %rdx
    00000206: 	cmpq	%rdx, %rcx
    00000209: 	je	.Ltmp903 # Offset: 521
    0000020f: 	movq	%rcx, 0x90(%rsp)
    00000217: 	movq	0x10(%rax), %rcx
    0000021b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp995:
    00000223: 	movq	0x8(%rax), %rcx
    00000227: 	movq	%r15, %r8
    0000022a: 	movq	%r13, %rsi
    0000022d: 	movq	%r14, %rdi
    00000230: 	movq	%rcx, 0x98(%rsp)
    00000238: 	leaq	_Z14inner_product1IPKmmET0_T_S3_m(%rip), %rcx
    0000023f: 	movq	%rdx, (%rax)
    00000242: 	movl	$0x1f40, %edx
    00000247: 	movq	$0x0, 0x8(%rax)
    0000024f: 	movb	$0x0, 0x10(%rax)
    00000253: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 595
    00000258: 	movq	0x90(%rsp), %rdi
    00000260: 	cmpq	%r12, %rdi
    00000263: 	je	.Ltmp904 # Offset: 611
    00000265: 	movq	0xa0(%rsp), %rax
    0000026d: 	leaq	0x1(%rax), %rsi
    00000271: 	callq	_ZdlPvm@PLT # Offset: 625
.Ltmp904:
    00000276: 	movq	0x70(%rsp), %rdi
    0000027b: 	cmpq	%rbx, %rdi
    0000027e: 	je	.Ltmp905 # Offset: 638
    00000280: 	movq	0x80(%rsp), %rax
    00000288: 	leaq	0x1(%rax), %rsi
    0000028c: 	callq	_ZdlPvm@PLT # Offset: 652
.Ltmp905:
    00000291: 	movq	0x50(%rsp), %rdx
    00000296: 	movq	0x58(%rsp), %rcx
    0000029b: 	movq	%rbx, 0x70(%rsp)
    000002a0: 	movq	%rdx, %rax
    000002a3: 	movq	%rdx, 0x28(%rsp)
    000002a8: 	addq	%rcx, %rax
    000002ab: 	movq	%rcx, 0x8(%rsp)
    000002b0: 	je	.Ltmp906 # Offset: 688
    000002b2: 	testq	%rdx, %rdx
    000002b5: 	je	.Ltmp907 # Offset: 693
.Ltmp906:
    000002bb: 	movq	0x8(%rsp), %rax
    000002c0: 	movq	%rax, 0x30(%rsp)
    000002c5: 	cmpq	$0xf, %rax
    000002c9: 	ja	.Ltmp908 # Offset: 713
    000002cf: 	cmpq	$0x1, 0x8(%rsp)
    000002d5: 	jne	.Ltmp909 # Offset: 725
    000002db: 	movq	0x28(%rsp), %rax
    000002e0: 	movzbl	(%rax), %eax
    000002e3: 	movb	%al, 0x80(%rsp)
    000002ea: 	movq	%rbx, %rax
.Ltmp977:
    000002ed: 	movq	0x8(%rsp), %rdx
    000002f2: 	movq	%rdx, 0x78(%rsp)
    000002f7: 	movb	$0x0, (%rax,%rdx)
    000002fb: 	movabsq	$0x3fffffffffffffff, %rax
    00000305: 	subq	0x78(%rsp), %rax
    0000030a: 	cmpq	$0x12, %rax
    0000030e: 	jbe	.Ltmp910 # Offset: 782
    00000314: 	movl	$0x13, %edx
    00000319: 	leaq	DATAat0x32204(%rip), %rsi
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 803
    00000328: 	movq	0x58(%rsp), %rdx
    0000032d: 	movq	0x50(%rsp), %rsi
    00000332: 	movq	%rbp, %rdi
    00000335: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 821
    0000033a: 	movq	%r12, 0x90(%rsp)
    00000342: 	movq	(%rax), %rcx
    00000345: 	leaq	0x10(%rax), %rdx
    00000349: 	cmpq	%rdx, %rcx
    0000034c: 	je	.Ltmp911 # Offset: 844
    00000352: 	movq	%rcx, 0x90(%rsp)
    0000035a: 	movq	0x10(%rax), %rcx
    0000035e: 	movq	%rcx, 0xa0(%rsp)
.Ltmp993:
    00000366: 	movq	0x8(%rax), %rcx
    0000036a: 	movq	%r15, %r8
    0000036d: 	movq	%r13, %rsi
    00000370: 	movq	%r14, %rdi
    00000373: 	movq	%rcx, 0x98(%rsp)
    0000037b: 	leaq	_Z14inner_product2IPKmmET0_T_S3_m(%rip), %rcx
    00000382: 	movq	%rdx, (%rax)
    00000385: 	movl	$0x1f40, %edx
    0000038a: 	movq	$0x0, 0x8(%rax)
    00000392: 	movb	$0x0, 0x10(%rax)
    00000396: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 918
    0000039b: 	movq	0x90(%rsp), %rdi
    000003a3: 	cmpq	%r12, %rdi
    000003a6: 	je	.Ltmp912 # Offset: 934
    000003a8: 	movq	0xa0(%rsp), %rax
    000003b0: 	leaq	0x1(%rax), %rsi
    000003b4: 	callq	_ZdlPvm@PLT # Offset: 948
.Ltmp912:
    000003b9: 	movq	0x70(%rsp), %rdi
    000003be: 	cmpq	%rbx, %rdi
    000003c1: 	je	.Ltmp913 # Offset: 961
    000003c3: 	movq	0x80(%rsp), %rax
    000003cb: 	leaq	0x1(%rax), %rsi
    000003cf: 	callq	_ZdlPvm@PLT # Offset: 975
.Ltmp913:
    000003d4: 	movq	0x50(%rsp), %rsi
    000003d9: 	movq	0x58(%rsp), %rdx
    000003de: 	movq	%rbx, 0x70(%rsp)
    000003e3: 	movq	%rsi, %rax
    000003e6: 	movq	%rsi, 0x28(%rsp)
    000003eb: 	addq	%rdx, %rax
    000003ee: 	movq	%rdx, 0x8(%rsp)
    000003f3: 	je	.Ltmp914 # Offset: 1011
    000003f5: 	testq	%rsi, %rsi
    000003f8: 	je	.Ltmp915 # Offset: 1016
.Ltmp914:
    000003fe: 	movq	0x8(%rsp), %rax
    00000403: 	movq	%rax, 0x30(%rsp)
    00000408: 	cmpq	$0xf, %rax
    0000040c: 	ja	.Ltmp916 # Offset: 1036
    00000412: 	cmpq	$0x1, 0x8(%rsp)
    00000418: 	jne	.Ltmp917 # Offset: 1048
    0000041e: 	movq	0x28(%rsp), %rax
    00000423: 	movzbl	(%rax), %eax
    00000426: 	movb	%al, 0x80(%rsp)
    0000042d: 	movq	%rbx, %rax
.Ltmp981:
    00000430: 	movq	0x8(%rsp), %rsi
    00000435: 	movq	%rsi, 0x78(%rsp)
    0000043a: 	movb	$0x0, (%rax,%rsi)
    0000043e: 	movabsq	$0x3fffffffffffffff, %rax
    00000448: 	subq	0x78(%rsp), %rax
    0000044d: 	cmpq	$0x12, %rax
    00000451: 	jbe	.Ltmp918 # Offset: 1105
    00000457: 	movl	$0x13, %edx
    0000045c: 	leaq	DATAat0x32218(%rip), %rsi
    00000463: 	movq	%rbp, %rdi
    00000466: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1126
    0000046b: 	movq	0x58(%rsp), %rdx
    00000470: 	movq	0x50(%rsp), %rsi
    00000475: 	movq	%rbp, %rdi
    00000478: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1144
    0000047d: 	movq	%r12, 0x90(%rsp)
    00000485: 	movq	(%rax), %rcx
    00000488: 	leaq	0x10(%rax), %rdx
    0000048c: 	cmpq	%rdx, %rcx
    0000048f: 	je	.Ltmp919 # Offset: 1167
    00000495: 	movq	%rcx, 0x90(%rsp)
    0000049d: 	movq	0x10(%rax), %rcx
    000004a1: 	movq	%rcx, 0xa0(%rsp)
.Ltmp992:
    000004a9: 	movq	0x8(%rax), %rcx
    000004ad: 	movq	%r15, %r8
    000004b0: 	movq	%r13, %rsi
    000004b3: 	movq	%r14, %rdi
    000004b6: 	movq	%rcx, 0x98(%rsp)
    000004be: 	leaq	_Z14inner_product3IPKmmET0_T_S3_m(%rip), %rcx
    000004c5: 	movq	%rdx, (%rax)
    000004c8: 	movl	$0x1f40, %edx
    000004cd: 	movq	$0x0, 0x8(%rax)
    000004d5: 	movb	$0x0, 0x10(%rax)
    000004d9: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1241
    000004de: 	movq	0x90(%rsp), %rdi
    000004e6: 	cmpq	%r12, %rdi
    000004e9: 	je	.Ltmp920 # Offset: 1257
    000004eb: 	movq	0xa0(%rsp), %rax
    000004f3: 	leaq	0x1(%rax), %rsi
    000004f7: 	callq	_ZdlPvm@PLT # Offset: 1271
.Ltmp920:
    000004fc: 	movq	0x70(%rsp), %rdi
    00000501: 	cmpq	%rbx, %rdi
    00000504: 	je	.Ltmp921 # Offset: 1284
    00000506: 	movq	0x80(%rsp), %rax
    0000050e: 	leaq	0x1(%rax), %rsi
    00000512: 	callq	_ZdlPvm@PLT # Offset: 1298
.Ltmp921:
    00000517: 	movq	0x50(%rsp), %rdx
    0000051c: 	movq	0x58(%rsp), %rcx
    00000521: 	movq	%rbx, 0x70(%rsp)
    00000526: 	movq	%rdx, %rax
    00000529: 	movq	%rdx, 0x28(%rsp)
    0000052e: 	addq	%rcx, %rax
    00000531: 	movq	%rcx, 0x8(%rsp)
    00000536: 	je	.Ltmp922 # Offset: 1334
    00000538: 	testq	%rdx, %rdx
    0000053b: 	je	.Ltmp923 # Offset: 1339
.Ltmp922:
    00000541: 	movq	0x8(%rsp), %rax
    00000546: 	movq	%rax, 0x30(%rsp)
    0000054b: 	cmpq	$0xf, %rax
    0000054f: 	ja	.Ltmp924 # Offset: 1359
    00000555: 	cmpq	$0x1, 0x8(%rsp)
    0000055b: 	jne	.Ltmp925 # Offset: 1371
    00000561: 	movq	0x28(%rsp), %rax
    00000566: 	movzbl	(%rax), %eax
    00000569: 	movb	%al, 0x80(%rsp)
    00000570: 	movq	%rbx, %rax
.Ltmp979:
    00000573: 	movq	0x8(%rsp), %rdi
    00000578: 	movq	%rdi, 0x78(%rsp)
    0000057d: 	movb	$0x0, (%rax,%rdi)
    00000581: 	movabsq	$0x3fffffffffffffff, %rax
    0000058b: 	subq	0x78(%rsp), %rax
    00000590: 	cmpq	$0x12, %rax
    00000594: 	jbe	.Ltmp926 # Offset: 1428
    0000059a: 	movl	$0x13, %edx
    0000059f: 	leaq	DATAat0x3222c(%rip), %rsi
    000005a6: 	movq	%rbp, %rdi
    000005a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1449
    000005ae: 	movq	0x58(%rsp), %rdx
    000005b3: 	movq	0x50(%rsp), %rsi
    000005b8: 	movq	%rbp, %rdi
    000005bb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1467
    000005c0: 	movq	%r12, 0x90(%rsp)
    000005c8: 	movq	(%rax), %rcx
    000005cb: 	leaq	0x10(%rax), %rdx
    000005cf: 	cmpq	%rdx, %rcx
    000005d2: 	je	.Ltmp927 # Offset: 1490
    000005d8: 	movq	%rcx, 0x90(%rsp)
    000005e0: 	movq	0x10(%rax), %rcx
    000005e4: 	movq	%rcx, 0xa0(%rsp)
.Ltmp997:
    000005ec: 	movq	0x8(%rax), %rcx
    000005f0: 	movq	%r15, %r8
    000005f3: 	movq	%r13, %rsi
    000005f6: 	movq	%r14, %rdi
    000005f9: 	movq	%rcx, 0x98(%rsp)
    00000601: 	leaq	_Z14inner_product4IPKmmET0_T_S3_m(%rip), %rcx
    00000608: 	movq	%rdx, (%rax)
    0000060b: 	movl	$0x1f40, %edx
    00000610: 	movq	$0x0, 0x8(%rax)
    00000618: 	movb	$0x0, 0x10(%rax)
    0000061c: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1564
    00000621: 	movq	0x90(%rsp), %rdi
    00000629: 	cmpq	%r12, %rdi
    0000062c: 	je	.Ltmp928 # Offset: 1580
    0000062e: 	movq	0xa0(%rsp), %rax
    00000636: 	leaq	0x1(%rax), %rsi
    0000063a: 	callq	_ZdlPvm@PLT # Offset: 1594
.Ltmp928:
    0000063f: 	movq	0x70(%rsp), %rdi
    00000644: 	cmpq	%rbx, %rdi
    00000647: 	je	.Ltmp929 # Offset: 1607
    00000649: 	movq	0x80(%rsp), %rax
    00000651: 	leaq	0x1(%rax), %rsi
    00000655: 	callq	_ZdlPvm@PLT # Offset: 1621
.Ltmp929:
    0000065a: 	movq	0x50(%rsp), %rcx
    0000065f: 	movq	0x58(%rsp), %rsi
    00000664: 	movq	%rbx, 0x70(%rsp)
    00000669: 	movq	%rcx, %rax
    0000066c: 	movq	%rcx, 0x28(%rsp)
    00000671: 	addq	%rsi, %rax
    00000674: 	movq	%rsi, 0x8(%rsp)
    00000679: 	je	.Ltmp930 # Offset: 1657
    0000067b: 	testq	%rcx, %rcx
    0000067e: 	je	.Ltmp931 # Offset: 1662
.Ltmp930:
    00000684: 	movq	0x8(%rsp), %rax
    00000689: 	movq	%rax, 0x30(%rsp)
    0000068e: 	cmpq	$0xf, %rax
    00000692: 	ja	.Ltmp932 # Offset: 1682
    00000698: 	cmpq	$0x1, 0x8(%rsp)
    0000069e: 	jne	.Ltmp933 # Offset: 1694
    000006a4: 	movq	0x28(%rsp), %rax
    000006a9: 	movzbl	(%rax), %eax
    000006ac: 	movb	%al, 0x80(%rsp)
    000006b3: 	movq	%rbx, %rax
.Ltmp983:
    000006b6: 	movq	0x8(%rsp), %rdx
    000006bb: 	movq	%rdx, 0x78(%rsp)
    000006c0: 	movb	$0x0, (%rax,%rdx)
    000006c4: 	movabsq	$0x3fffffffffffffff, %rax
    000006ce: 	subq	0x78(%rsp), %rax
    000006d3: 	cmpq	$0x12, %rax
    000006d7: 	jbe	.Ltmp934 # Offset: 1751
    000006dd: 	movl	$0x13, %edx
    000006e2: 	leaq	DATAat0x32240(%rip), %rsi
    000006e9: 	movq	%rbp, %rdi
    000006ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1772
    000006f1: 	movq	0x58(%rsp), %rdx
    000006f6: 	movq	0x50(%rsp), %rsi
    000006fb: 	movq	%rbp, %rdi
    000006fe: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1790
    00000703: 	movq	%r12, 0x90(%rsp)
    0000070b: 	movq	(%rax), %rcx
    0000070e: 	leaq	0x10(%rax), %rdx
    00000712: 	cmpq	%rdx, %rcx
    00000715: 	je	.Ltmp935 # Offset: 1813
    0000071b: 	movq	%rcx, 0x90(%rsp)
    00000723: 	movq	0x10(%rax), %rcx
    00000727: 	movq	%rcx, 0xa0(%rsp)
.Ltmp998:
    0000072f: 	movq	0x8(%rax), %rcx
    00000733: 	movq	%r15, %r8
    00000736: 	movq	%r13, %rsi
    00000739: 	movq	%r14, %rdi
    0000073c: 	movq	%rcx, 0x98(%rsp)
    00000744: 	leaq	_Z14inner_product5IPKmmET0_T_S3_m(%rip), %rcx
    0000074b: 	movq	%rdx, (%rax)
    0000074e: 	movl	$0x1f40, %edx
    00000753: 	movq	$0x0, 0x8(%rax)
    0000075b: 	movb	$0x0, 0x10(%rax)
    0000075f: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1887
    00000764: 	movq	0x90(%rsp), %rdi
    0000076c: 	cmpq	%r12, %rdi
    0000076f: 	je	.Ltmp936 # Offset: 1903
    00000771: 	movq	0xa0(%rsp), %rax
    00000779: 	leaq	0x1(%rax), %rsi
    0000077d: 	callq	_ZdlPvm@PLT # Offset: 1917
.Ltmp936:
    00000782: 	movq	0x70(%rsp), %rdi
    00000787: 	cmpq	%rbx, %rdi
    0000078a: 	je	.Ltmp937 # Offset: 1930
    0000078c: 	movq	0x80(%rsp), %rax
    00000794: 	leaq	0x1(%rax), %rsi
    00000798: 	callq	_ZdlPvm@PLT # Offset: 1944
.Ltmp937:
    0000079d: 	movq	0x50(%rsp), %rsi
    000007a2: 	movq	0x58(%rsp), %rcx
    000007a7: 	movq	%rbx, 0x70(%rsp)
    000007ac: 	movq	%rsi, %rax
    000007af: 	movq	%rsi, 0x28(%rsp)
    000007b4: 	addq	%rcx, %rax
    000007b7: 	movq	%rcx, 0x8(%rsp)
    000007bc: 	je	.Ltmp938 # Offset: 1980
    000007be: 	testq	%rsi, %rsi
    000007c1: 	je	.Ltmp939 # Offset: 1985
.Ltmp938:
    000007c7: 	movq	0x8(%rsp), %rax
    000007cc: 	movq	%rax, 0x30(%rsp)
    000007d1: 	cmpq	$0xf, %rax
    000007d5: 	ja	.Ltmp940 # Offset: 2005
    000007db: 	cmpq	$0x1, 0x8(%rsp)
    000007e1: 	jne	.Ltmp941 # Offset: 2017
    000007e7: 	movq	0x28(%rsp), %rax
    000007ec: 	movzbl	(%rax), %eax
    000007ef: 	movb	%al, 0x80(%rsp)
    000007f6: 	movq	%rbx, %rax
.Ltmp985:
    000007f9: 	movq	0x8(%rsp), %rdi
    000007fe: 	movq	%rdi, 0x78(%rsp)
    00000803: 	movb	$0x0, (%rax,%rdi)
    00000807: 	movabsq	$0x3fffffffffffffff, %rax
    00000811: 	subq	0x78(%rsp), %rax
    00000816: 	cmpq	$0x12, %rax
    0000081a: 	jbe	.Ltmp942 # Offset: 2074
    00000820: 	movl	$0x13, %edx
    00000825: 	leaq	DATAat0x32254(%rip), %rsi
    0000082c: 	movq	%rbp, %rdi
    0000082f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2095
    00000834: 	movq	0x58(%rsp), %rdx
    00000839: 	movq	0x50(%rsp), %rsi
    0000083e: 	movq	%rbp, %rdi
    00000841: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2113
    00000846: 	movq	%r12, 0x90(%rsp)
    0000084e: 	movq	(%rax), %rcx
    00000851: 	leaq	0x10(%rax), %rdx
    00000855: 	cmpq	%rdx, %rcx
    00000858: 	je	.Ltmp943 # Offset: 2136
    0000085e: 	movq	%rcx, 0x90(%rsp)
    00000866: 	movq	0x10(%rax), %rcx
    0000086a: 	movq	%rcx, 0xa0(%rsp)
.Ltmp996:
    00000872: 	movq	0x8(%rax), %rcx
    00000876: 	movq	%r15, %r8
    00000879: 	movq	%r13, %rsi
    0000087c: 	movq	%r14, %rdi
    0000087f: 	movq	%rcx, 0x98(%rsp)
    00000887: 	leaq	_Z14inner_product6IPKmmET0_T_S3_m(%rip), %rcx
    0000088e: 	movq	%rdx, (%rax)
    00000891: 	movl	$0x1f40, %edx
    00000896: 	movq	$0x0, 0x8(%rax)
    0000089e: 	movb	$0x0, 0x10(%rax)
    000008a2: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2210
    000008a7: 	movq	0x90(%rsp), %rdi
    000008af: 	cmpq	%r12, %rdi
    000008b2: 	je	.Ltmp944 # Offset: 2226
    000008b4: 	movq	0xa0(%rsp), %rax
    000008bc: 	leaq	0x1(%rax), %rsi
    000008c0: 	callq	_ZdlPvm@PLT # Offset: 2240
.Ltmp944:
    000008c5: 	movq	0x70(%rsp), %rdi
    000008ca: 	cmpq	%rbx, %rdi
    000008cd: 	je	.Ltmp945 # Offset: 2253
    000008cf: 	movq	0x80(%rsp), %rax
    000008d7: 	leaq	0x1(%rax), %rsi
    000008db: 	callq	_ZdlPvm@PLT # Offset: 2267
.Ltmp945:
    000008e0: 	movq	0x50(%rsp), %rdx
    000008e5: 	movq	0x58(%rsp), %rsi
    000008ea: 	movq	%rbx, 0x70(%rsp)
    000008ef: 	movq	%rdx, %rax
    000008f2: 	movq	%rdx, 0x28(%rsp)
    000008f7: 	addq	%rsi, %rax
    000008fa: 	movq	%rsi, 0x8(%rsp)
    000008ff: 	je	.Ltmp946 # Offset: 2303
    00000901: 	testq	%rdx, %rdx
    00000904: 	je	.Ltmp947 # Offset: 2308
.Ltmp946:
    0000090a: 	movq	0x8(%rsp), %rax
    0000090f: 	movq	%rax, 0x30(%rsp)
    00000914: 	cmpq	$0xf, %rax
    00000918: 	ja	.Ltmp948 # Offset: 2328
    0000091e: 	cmpq	$0x1, 0x8(%rsp)
    00000924: 	jne	.Ltmp949 # Offset: 2340
    0000092a: 	movq	0x28(%rsp), %rax
    0000092f: 	movzbl	(%rax), %eax
    00000932: 	movb	%al, 0x80(%rsp)
    00000939: 	movq	%rbx, %rax
.Ltmp991:
    0000093c: 	movq	0x8(%rsp), %rdx
    00000941: 	movq	%rdx, 0x78(%rsp)
    00000946: 	movb	$0x0, (%rax,%rdx)
    0000094a: 	movabsq	$0x3fffffffffffffff, %rax
    00000954: 	subq	0x78(%rsp), %rax
    00000959: 	cmpq	$0x12, %rax
    0000095d: 	jbe	.Ltmp950 # Offset: 2397
    00000963: 	movl	$0x13, %edx
    00000968: 	leaq	DATAat0x32268(%rip), %rsi
    0000096f: 	movq	%rbp, %rdi
    00000972: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2418
    00000977: 	movq	0x58(%rsp), %rdx
    0000097c: 	movq	0x50(%rsp), %rsi
    00000981: 	movq	%rbp, %rdi
    00000984: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2436
    00000989: 	movq	%r12, 0x90(%rsp)
    00000991: 	movq	(%rax), %rcx
    00000994: 	leaq	0x10(%rax), %rdx
    00000998: 	cmpq	%rdx, %rcx
    0000099b: 	je	.Ltmp951 # Offset: 2459
    000009a1: 	movq	%rcx, 0x90(%rsp)
    000009a9: 	movq	0x10(%rax), %rcx
    000009ad: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1001:
    000009b5: 	movq	0x8(%rax), %rcx
    000009b9: 	movq	%r15, %r8
    000009bc: 	movq	%r13, %rsi
    000009bf: 	movq	%r14, %rdi
    000009c2: 	movq	%rcx, 0x98(%rsp)
    000009ca: 	leaq	_Z14inner_product7IPKmmET0_T_S3_m(%rip), %rcx
    000009d1: 	movq	%rdx, (%rax)
    000009d4: 	movl	$0x1f40, %edx
    000009d9: 	movq	$0x0, 0x8(%rax)
    000009e1: 	movb	$0x0, 0x10(%rax)
    000009e5: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2533
    000009ea: 	movq	0x90(%rsp), %rdi
    000009f2: 	cmpq	%r12, %rdi
    000009f5: 	je	.Ltmp952 # Offset: 2549
    000009f7: 	movq	0xa0(%rsp), %rax
    000009ff: 	leaq	0x1(%rax), %rsi
    00000a03: 	callq	_ZdlPvm@PLT # Offset: 2563
.Ltmp952:
    00000a08: 	movq	0x70(%rsp), %rdi
    00000a0d: 	cmpq	%rbx, %rdi
    00000a10: 	je	.Ltmp953 # Offset: 2576
    00000a12: 	movq	0x80(%rsp), %rax
    00000a1a: 	leaq	0x1(%rax), %rsi
    00000a1e: 	callq	_ZdlPvm@PLT # Offset: 2590
.Ltmp953:
    00000a23: 	movq	0x10(%rsp), %rsi
    00000a28: 	leaq	DATAat0x3227c(%rip), %rdx
    00000a2f: 	movq	%rbp, %rdi
    00000a32: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2610
    00000a37: 	movq	0x58(%rsp), %rdx
    00000a3c: 	movq	0x50(%rsp), %rsi
    00000a41: 	movq	%rbp, %rdi
    00000a44: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2628
    00000a49: 	movq	%r12, 0x90(%rsp)
    00000a51: 	movq	(%rax), %rcx
    00000a54: 	leaq	0x10(%rax), %rdx
    00000a58: 	cmpq	%rdx, %rcx
    00000a5b: 	je	.Ltmp954 # Offset: 2651
    00000a61: 	movq	%rcx, 0x90(%rsp)
    00000a69: 	movq	0x10(%rax), %rcx
    00000a6d: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1000:
    00000a75: 	movq	0x8(%rax), %rcx
    00000a79: 	movq	%r15, %r8
    00000a7c: 	movq	%r13, %rsi
    00000a7f: 	movq	%r14, %rdi
    00000a82: 	movq	%rcx, 0x98(%rsp)
    00000a8a: 	leaq	_Z14inner_product8IPKmmET0_T_S3_m(%rip), %rcx
    00000a91: 	movq	%rdx, (%rax)
    00000a94: 	movl	$0x1f40, %edx
    00000a99: 	movq	$0x0, 0x8(%rax)
    00000aa1: 	movb	$0x0, 0x10(%rax)
    00000aa5: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2725
    00000aaa: 	movq	0x90(%rsp), %rdi
    00000ab2: 	cmpq	%r12, %rdi
    00000ab5: 	je	.Ltmp955 # Offset: 2741
    00000ab7: 	movq	0xa0(%rsp), %rax
    00000abf: 	leaq	0x1(%rax), %rsi
    00000ac3: 	callq	_ZdlPvm@PLT # Offset: 2755
.Ltmp955:
    00000ac8: 	movq	0x70(%rsp), %rdi
    00000acd: 	cmpq	%rbx, %rdi
    00000ad0: 	je	.Ltmp956 # Offset: 2768
    00000ad2: 	movq	0x80(%rsp), %rax
    00000ada: 	leaq	0x1(%rax), %rsi
    00000ade: 	callq	_ZdlPvm@PLT # Offset: 2782
.Ltmp956:
    00000ae3: 	movq	0x50(%rsp), %rcx
    00000ae8: 	movq	0x58(%rsp), %rdi
    00000aed: 	movq	%rbx, 0x70(%rsp)
    00000af2: 	movq	%rcx, %rax
    00000af5: 	movq	%rcx, 0x28(%rsp)
    00000afa: 	addq	%rdi, %rax
    00000afd: 	movq	%rdi, 0x8(%rsp)
    00000b02: 	je	.Ltmp957 # Offset: 2818
    00000b04: 	testq	%rcx, %rcx
    00000b07: 	je	.Ltmp958 # Offset: 2823
.Ltmp957:
    00000b0d: 	movq	0x8(%rsp), %rax
    00000b12: 	movq	%rax, 0x30(%rsp)
    00000b17: 	cmpq	$0xf, %rax
    00000b1b: 	ja	.Ltmp959 # Offset: 2843
    00000b21: 	cmpq	$0x1, 0x8(%rsp)
    00000b27: 	jne	.Ltmp960 # Offset: 2855
    00000b2d: 	movq	0x28(%rsp), %rax
    00000b32: 	movzbl	(%rax), %eax
    00000b35: 	movb	%al, 0x80(%rsp)
    00000b3c: 	movq	%rbx, %rax
.Ltmp989:
    00000b3f: 	movq	0x8(%rsp), %rcx
    00000b44: 	movq	%rcx, 0x78(%rsp)
    00000b49: 	movb	$0x0, (%rax,%rcx)
    00000b4d: 	movabsq	$0x3fffffffffffffff, %rax
    00000b57: 	subq	0x78(%rsp), %rax
    00000b5c: 	cmpq	$0x12, %rax
    00000b60: 	jbe	.Ltmp961 # Offset: 2912
    00000b66: 	movl	$0x13, %edx
    00000b6b: 	leaq	DATAat0x32290(%rip), %rsi
    00000b72: 	movq	%rbp, %rdi
    00000b75: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2933
    00000b7a: 	movq	0x58(%rsp), %rdx
    00000b7f: 	movq	0x50(%rsp), %rsi
    00000b84: 	movq	%rbp, %rdi
    00000b87: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2951
    00000b8c: 	movq	%r12, 0x90(%rsp)
    00000b94: 	movq	(%rax), %rcx
    00000b97: 	leaq	0x10(%rax), %rdx
    00000b9b: 	cmpq	%rdx, %rcx
    00000b9e: 	je	.Ltmp962 # Offset: 2974
    00000ba4: 	movq	%rcx, 0x90(%rsp)
    00000bac: 	movq	0x10(%rax), %rcx
    00000bb0: 	movq	%rcx, 0xa0(%rsp)
.Ltmp999:
    00000bb8: 	movq	0x8(%rax), %rcx
    00000bbc: 	movq	%r15, %r8
    00000bbf: 	movq	%r13, %rsi
    00000bc2: 	movq	%r14, %rdi
    00000bc5: 	movq	%rcx, 0x98(%rsp)
    00000bcd: 	leaq	_Z14inner_product9IPKmmET0_T_S3_m(%rip), %rcx
    00000bd4: 	movq	%rdx, (%rax)
    00000bd7: 	movl	$0x1f40, %edx
    00000bdc: 	movq	$0x0, 0x8(%rax)
    00000be4: 	movb	$0x0, 0x10(%rax)
    00000be8: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3048
    00000bed: 	movq	0x90(%rsp), %rdi
    00000bf5: 	cmpq	%r12, %rdi
    00000bf8: 	je	.Ltmp963 # Offset: 3064
    00000bfa: 	movq	0xa0(%rsp), %rax
    00000c02: 	leaq	0x1(%rax), %rsi
    00000c06: 	callq	_ZdlPvm@PLT # Offset: 3078
.Ltmp963:
    00000c0b: 	movq	0x70(%rsp), %rdi
    00000c10: 	cmpq	%rbx, %rdi
    00000c13: 	je	.Ltmp964 # Offset: 3091
    00000c15: 	movq	0x80(%rsp), %rax
    00000c1d: 	leaq	0x1(%rax), %rsi
    00000c21: 	callq	_ZdlPvm@PLT # Offset: 3105
.Ltmp964:
    00000c26: 	movq	0x50(%rsp), %rsi
    00000c2b: 	movq	0x58(%rsp), %rdx
    00000c30: 	movq	%rbx, 0x70(%rsp)
    00000c35: 	movq	%rsi, %rax
    00000c38: 	movq	%rsi, 0x28(%rsp)
    00000c3d: 	addq	%rdx, %rax
    00000c40: 	movq	%rdx, 0x8(%rsp)
    00000c45: 	je	.Ltmp965 # Offset: 3141
    00000c47: 	testq	%rsi, %rsi
    00000c4a: 	je	.Ltmp966 # Offset: 3146
.Ltmp965:
    00000c50: 	movq	0x8(%rsp), %rax
    00000c55: 	movq	%rax, 0x30(%rsp)
    00000c5a: 	cmpq	$0xf, %rax
    00000c5e: 	ja	.Ltmp967 # Offset: 3166
    00000c64: 	cmpq	$0x1, 0x8(%rsp)
    00000c6a: 	jne	.Ltmp968 # Offset: 3178
    00000c70: 	movq	0x28(%rsp), %rax
    00000c75: 	movzbl	(%rax), %eax
    00000c78: 	movb	%al, 0x80(%rsp)
    00000c7f: 	movq	%rbx, %rax
.Ltmp987:
    00000c82: 	movq	0x8(%rsp), %rsi
    00000c87: 	movq	%rsi, 0x78(%rsp)
    00000c8c: 	movb	$0x0, (%rax,%rsi)
    00000c90: 	movabsq	$0x3fffffffffffffff, %rax
    00000c9a: 	subq	0x78(%rsp), %rax
    00000c9f: 	cmpq	$0x13, %rax
    00000ca3: 	jbe	.Ltmp969 # Offset: 3235
    00000ca9: 	movl	$0x14, %edx
    00000cae: 	leaq	DATAat0x322a4(%rip), %rsi
    00000cb5: 	movq	%rbp, %rdi
    00000cb8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3256
    00000cbd: 	movq	0x58(%rsp), %rdx
    00000cc2: 	movq	0x50(%rsp), %rsi
    00000cc7: 	movq	%rbp, %rdi
    00000cca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3274
    00000ccf: 	movq	%r12, 0x90(%rsp)
    00000cd7: 	movq	(%rax), %rcx
    00000cda: 	leaq	0x10(%rax), %rdx
    00000cde: 	cmpq	%rdx, %rcx
    00000ce1: 	je	.Ltmp970 # Offset: 3297
    00000ce7: 	movq	%rcx, 0x90(%rsp)
    00000cef: 	movq	0x10(%rax), %rcx
    00000cf3: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1002:
    00000cfb: 	movq	0x8(%rax), %rcx
    00000cff: 	movq	%r15, %r8
    00000d02: 	movq	%r13, %rsi
    00000d05: 	movq	%r14, %rdi
    00000d08: 	movq	%rcx, 0x98(%rsp)
    00000d10: 	leaq	_Z15inner_product10IPKmmET0_T_S3_m(%rip), %rcx
    00000d17: 	movq	%rdx, (%rax)
    00000d1a: 	movl	$0x1f40, %edx
    00000d1f: 	movq	$0x0, 0x8(%rax)
    00000d27: 	movb	$0x0, 0x10(%rax)
    00000d2b: 	callq	_Z18test_inner_productImPFmPKmS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3371
    00000d30: 	movq	0x90(%rsp), %rdi
    00000d38: 	cmpq	%r12, %rdi
    00000d3b: 	je	.Ltmp971 # Offset: 3387
    00000d3d: 	movq	0xa0(%rsp), %rax
    00000d45: 	leaq	0x1(%rax), %rsi
    00000d49: 	callq	_ZdlPvm@PLT # Offset: 3401
.Ltmp971:
    00000d4e: 	movq	0x70(%rsp), %rdi
    00000d53: 	cmpq	%rbx, %rdi
    00000d56: 	je	.Ltmp972 # Offset: 3414
    00000d58: 	movq	0x80(%rsp), %rax
    00000d60: 	leaq	0x1(%rax), %rsi
    00000d64: 	callq	_ZdlPvm@PLT # Offset: 3428
.Ltmp972:
    00000d69: 	movq	0x10(%rsp), %rsi
    00000d6e: 	leaq	DATAat0x322b9(%rip), %rdx
    00000d75: 	movq	%r15, %rdi
    00000d78: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3448
    00000d7d: 	movl	iterations(%rip), %edx
    00000d83: 	xorl	%r8d, %r8d
    00000d86: 	xorl	%ecx, %ecx
    00000d88: 	movl	$0x1f40, %esi
    00000d8d: 	movq	0x90(%rsp), %rdi
    00000d95: 	callq	_Z9summarizePKciiii # Offset: 3477
    00000d9a: 	movq	0x90(%rsp), %rdi
    00000da2: 	cmpq	%r12, %rdi
    00000da5: 	je	.Ltmp973 # Offset: 3493
    00000da7: 	movq	0xa0(%rsp), %rax
    00000daf: 	leaq	0x1(%rax), %rsi
    00000db3: 	callq	_ZdlPvm@PLT # Offset: 3507
.Ltmp973:
    00000db8: 	movq	0x50(%rsp), %rdi
    00000dbd: 	cmpq	0x20(%rsp), %rdi
    00000dc2: 	je	.Ltmp974 # Offset: 3522
    00000dc4: 	movq	0x60(%rsp), %rax
    00000dc9: 	leaq	0x1(%rax), %rsi
    00000dcd: 	callq	_ZdlPvm@PLT # Offset: 3533
.Ltmp974:
    00000dd2: 	movq	0x1f4b8(%rsp), %rax
    00000dda: 	subq	%fs:0x28, %rax
    00000de3: 	jne	.Ltmp975 # Offset: 3555
    00000de9: 	addq	$0x1f4c8, %rsp
    00000df0: 	popq	%rbx
    00000df1: 	popq	%rbp
    00000df2: 	popq	%r12
    00000df4: 	popq	%r13
    00000df6: 	popq	%r14
    00000df8: 	popq	%r15
    00000dfa: 	retq # Offset: 3578
    00000dfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp909:
    00000e00: 	cmpq	$0x0, 0x8(%rsp)
    00000e06: 	jne	.Ltmp976 # Offset: 3590
    00000e0c: 	movq	%rbx, %rax
    00000e0f: 	jmp	.Ltmp977 # Offset: 3599
    00000e14: 	nopl	(%rax) # Size: 4
.Ltmp925:
    00000e18: 	cmpq	$0x0, 0x8(%rsp)
    00000e1e: 	jne	.Ltmp978 # Offset: 3614
    00000e24: 	movq	%rbx, %rax
    00000e27: 	jmp	.Ltmp979 # Offset: 3623
    00000e2c: 	nopl	(%rax) # Size: 4
.Ltmp917:
    00000e30: 	cmpq	$0x0, 0x8(%rsp)
    00000e36: 	jne	.Ltmp980 # Offset: 3638
    00000e3c: 	movq	%rbx, %rax
    00000e3f: 	jmp	.Ltmp981 # Offset: 3647
    00000e44: 	nopl	(%rax) # Size: 4
.Ltmp933:
    00000e48: 	cmpq	$0x0, 0x8(%rsp)
    00000e4e: 	jne	.Ltmp982 # Offset: 3662
    00000e54: 	movq	%rbx, %rax
    00000e57: 	jmp	.Ltmp983 # Offset: 3671
    00000e5c: 	nopl	(%rax) # Size: 4
.Ltmp941:
    00000e60: 	cmpq	$0x0, 0x8(%rsp)
    00000e66: 	jne	.Ltmp984 # Offset: 3686
    00000e6c: 	movq	%rbx, %rax
    00000e6f: 	jmp	.Ltmp985 # Offset: 3695
    00000e74: 	nopl	(%rax) # Size: 4
.Ltmp968:
    00000e78: 	cmpq	$0x0, 0x8(%rsp)
    00000e7e: 	jne	.Ltmp986 # Offset: 3710
    00000e84: 	movq	%rbx, %rax
    00000e87: 	jmp	.Ltmp987 # Offset: 3719
    00000e8c: 	nopl	(%rax) # Size: 4
.Ltmp960:
    00000e90: 	cmpq	$0x0, 0x8(%rsp)
    00000e96: 	jne	.Ltmp988 # Offset: 3734
    00000e9c: 	movq	%rbx, %rax
    00000e9f: 	jmp	.Ltmp989 # Offset: 3743
    00000ea4: 	nopl	(%rax) # Size: 4
.Ltmp949:
    00000ea8: 	cmpq	$0x0, 0x8(%rsp)
    00000eae: 	jne	.Ltmp990 # Offset: 3758
    00000eb4: 	movq	%rbx, %rax
    00000eb7: 	jmp	.Ltmp991 # Offset: 3767
    00000ebc: 	nopl	(%rax) # Size: 4
.Ltmp916:
    00000ec0: 	movq	0x18(%rsp), %rsi
    00000ec5: 	xorl	%edx, %edx
    00000ec7: 	movq	%rbp, %rdi
    00000eca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3786
    00000ecf: 	movq	%rax, 0x70(%rsp)
    00000ed4: 	movq	%rax, %rdi
    00000ed7: 	movq	0x30(%rsp), %rax
    00000edc: 	movq	%rax, 0x80(%rsp)
.Ltmp1005:
    00000ee4: 	movq	0x8(%rsp), %rdx
    00000ee9: 	movq	0x28(%rsp), %rsi
    00000eee: 	callq	memcpy@PLT # Offset: 3822
    00000ef3: 	movq	0x30(%rsp), %rax
    00000ef8: 	movq	%rax, 0x8(%rsp)
    00000efd: 	movq	0x70(%rsp), %rax
    00000f02: 	jmp	.Ltmp981 # Offset: 3842
    00000f07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp908:
    00000f10: 	movq	0x18(%rsp), %rsi
    00000f15: 	xorl	%edx, %edx
    00000f17: 	movq	%rbp, %rdi
    00000f1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3866
    00000f1f: 	movq	%rax, 0x70(%rsp)
    00000f24: 	movq	%rax, %rdi
    00000f27: 	movq	0x30(%rsp), %rax
    00000f2c: 	movq	%rax, 0x80(%rsp)
.Ltmp1003:
    00000f34: 	movq	0x8(%rsp), %rdx
    00000f39: 	movq	0x28(%rsp), %rsi
    00000f3e: 	callq	memcpy@PLT # Offset: 3902
    00000f43: 	movq	0x30(%rsp), %rax
    00000f48: 	movq	%rax, 0x8(%rsp)
    00000f4d: 	movq	0x70(%rsp), %rax
    00000f52: 	jmp	.Ltmp977 # Offset: 3922
    00000f57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp924:
    00000f60: 	movq	0x18(%rsp), %rsi
    00000f65: 	xorl	%edx, %edx
    00000f67: 	movq	%rbp, %rdi
    00000f6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3946
    00000f6f: 	movq	%rax, 0x70(%rsp)
    00000f74: 	movq	%rax, %rdi
    00000f77: 	movq	0x30(%rsp), %rax
    00000f7c: 	movq	%rax, 0x80(%rsp)
.Ltmp1004:
    00000f84: 	movq	0x8(%rsp), %rdx
    00000f89: 	movq	0x28(%rsp), %rsi
    00000f8e: 	callq	memcpy@PLT # Offset: 3982
    00000f93: 	movq	0x30(%rsp), %rax
    00000f98: 	movq	%rax, 0x8(%rsp)
    00000f9d: 	movq	0x70(%rsp), %rax
    00000fa2: 	jmp	.Ltmp979 # Offset: 4002
    00000fa7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp967:
    00000fb0: 	movq	0x18(%rsp), %rsi
    00000fb5: 	xorl	%edx, %edx
    00000fb7: 	movq	%rbp, %rdi
    00000fba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4026
    00000fbf: 	movq	%rax, 0x70(%rsp)
    00000fc4: 	movq	%rax, %rdi
    00000fc7: 	movq	0x30(%rsp), %rax
    00000fcc: 	movq	%rax, 0x80(%rsp)
.Ltmp1008:
    00000fd4: 	movq	0x8(%rsp), %rdx
    00000fd9: 	movq	0x28(%rsp), %rsi
    00000fde: 	callq	memcpy@PLT # Offset: 4062
    00000fe3: 	movq	0x30(%rsp), %rax
    00000fe8: 	movq	%rax, 0x8(%rsp)
    00000fed: 	movq	0x70(%rsp), %rax
    00000ff2: 	jmp	.Ltmp987 # Offset: 4082
    00000ff7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp959:
    00001000: 	movq	0x18(%rsp), %rsi
    00001005: 	xorl	%edx, %edx
    00001007: 	movq	%rbp, %rdi
    0000100a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4106
    0000100f: 	movq	%rax, 0x70(%rsp)
    00001014: 	movq	%rax, %rdi
    00001017: 	movq	0x30(%rsp), %rax
    0000101c: 	movq	%rax, 0x80(%rsp)
.Ltmp1009:
    00001024: 	movq	0x8(%rsp), %rdx
    00001029: 	movq	0x28(%rsp), %rsi
    0000102e: 	callq	memcpy@PLT # Offset: 4142
    00001033: 	movq	0x30(%rsp), %rax
    00001038: 	movq	%rax, 0x8(%rsp)
    0000103d: 	movq	0x70(%rsp), %rax
    00001042: 	jmp	.Ltmp989 # Offset: 4162
    00001047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp932:
    00001050: 	movq	0x18(%rsp), %rsi
    00001055: 	xorl	%edx, %edx
    00001057: 	movq	%rbp, %rdi
    0000105a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4186
    0000105f: 	movq	%rax, 0x70(%rsp)
    00001064: 	movq	%rax, %rdi
    00001067: 	movq	0x30(%rsp), %rax
    0000106c: 	movq	%rax, 0x80(%rsp)
.Ltmp1006:
    00001074: 	movq	0x8(%rsp), %rdx
    00001079: 	movq	0x28(%rsp), %rsi
    0000107e: 	callq	memcpy@PLT # Offset: 4222
    00001083: 	movq	0x30(%rsp), %rax
    00001088: 	movq	%rax, 0x8(%rsp)
    0000108d: 	movq	0x70(%rsp), %rax
    00001092: 	jmp	.Ltmp983 # Offset: 4242
    00001097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp940:
    000010a0: 	movq	0x18(%rsp), %rsi
    000010a5: 	xorl	%edx, %edx
    000010a7: 	movq	%rbp, %rdi
    000010aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4266
    000010af: 	movq	%rax, 0x70(%rsp)
    000010b4: 	movq	%rax, %rdi
    000010b7: 	movq	0x30(%rsp), %rax
    000010bc: 	movq	%rax, 0x80(%rsp)
.Ltmp1007:
    000010c4: 	movq	0x8(%rsp), %rdx
    000010c9: 	movq	0x28(%rsp), %rsi
    000010ce: 	callq	memcpy@PLT # Offset: 4302
    000010d3: 	movq	0x30(%rsp), %rax
    000010d8: 	movq	%rax, 0x8(%rsp)
    000010dd: 	movq	0x70(%rsp), %rax
    000010e2: 	jmp	.Ltmp985 # Offset: 4322
    000010e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp948:
    000010f0: 	movq	0x18(%rsp), %rsi
    000010f5: 	xorl	%edx, %edx
    000010f7: 	movq	%rbp, %rdi
    000010fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4346
    000010ff: 	movq	%rax, 0x70(%rsp)
    00001104: 	movq	%rax, %rdi
    00001107: 	movq	0x30(%rsp), %rax
    0000110c: 	movq	%rax, 0x80(%rsp)
.Ltmp1010:
    00001114: 	movq	0x8(%rsp), %rdx
    00001119: 	movq	0x28(%rsp), %rsi
    0000111e: 	callq	memcpy@PLT # Offset: 4382
    00001123: 	movq	0x30(%rsp), %rax
    00001128: 	movq	%rax, 0x8(%rsp)
    0000112d: 	movq	0x70(%rsp), %rax
    00001132: 	jmp	.Ltmp991 # Offset: 4402
    00001137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp919:
    00001140: 	movdqu	0x10(%rax), %xmm6
    00001145: 	movaps	%xmm6, 0xa0(%rsp)
    0000114d: 	jmp	.Ltmp992 # Offset: 4429
    00001152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp911:
    00001158: 	movdqu	0x10(%rax), %xmm5
    0000115d: 	movaps	%xmm5, 0xa0(%rsp)
    00001165: 	jmp	.Ltmp993 # Offset: 4453
    0000116a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp900:
    00001170: 	movdqu	0x10(%rax), %xmm3
    00001175: 	movaps	%xmm3, 0xa0(%rsp)
    0000117d: 	jmp	.Ltmp994 # Offset: 4477
    00001182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp903:
    00001188: 	movdqu	0x10(%rax), %xmm4
    0000118d: 	movaps	%xmm4, 0xa0(%rsp)
    00001195: 	jmp	.Ltmp995 # Offset: 4501
    0000119a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp943:
    000011a0: 	movdqu	0x10(%rax), %xmm3
    000011a5: 	movaps	%xmm3, 0xa0(%rsp)
    000011ad: 	jmp	.Ltmp996 # Offset: 4525
    000011b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp927:
    000011b8: 	movdqu	0x10(%rax), %xmm7
    000011bd: 	movaps	%xmm7, 0xa0(%rsp)
    000011c5: 	jmp	.Ltmp997 # Offset: 4549
    000011ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp935:
    000011d0: 	movdqu	0x10(%rax), %xmm7
    000011d5: 	movaps	%xmm7, 0xa0(%rsp)
    000011dd: 	jmp	.Ltmp998 # Offset: 4573
    000011e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp962:
    000011e8: 	movdqu	0x10(%rax), %xmm6
    000011ed: 	movaps	%xmm6, 0xa0(%rsp)
    000011f5: 	jmp	.Ltmp999 # Offset: 4597
    000011fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp954:
    00001200: 	movdqu	0x10(%rax), %xmm5
    00001205: 	movaps	%xmm5, 0xa0(%rsp)
    0000120d: 	jmp	.Ltmp1000 # Offset: 4621
    00001212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp951:
    00001218: 	movdqu	0x10(%rax), %xmm4
    0000121d: 	movaps	%xmm4, 0xa0(%rsp)
    00001225: 	jmp	.Ltmp1001 # Offset: 4645
    0000122a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp970:
    00001230: 	movdqu	0x10(%rax), %xmm7
    00001235: 	movaps	%xmm7, 0xa0(%rsp)
    0000123d: 	jmp	.Ltmp1002 # Offset: 4669
.Ltmp910:
    00001242: 	leaq	DATAat0x32182(%rip), %rdi
    00001249: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4681
.Ltmp915:
    0000124e: 	leaq	DATAat0x32158(%rip), %rdi
    00001255: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4693
.Ltmp918:
    0000125a: 	leaq	DATAat0x32182(%rip), %rdi
    00001261: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4705
.Ltmp923:
    00001266: 	leaq	DATAat0x32158(%rip), %rdi
    0000126d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4717
.Ltmp926:
    00001272: 	leaq	DATAat0x32182(%rip), %rdi
    00001279: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4729
.Ltmp931:
    0000127e: 	leaq	DATAat0x32158(%rip), %rdi
    00001285: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4741
.Ltmp934:
    0000128a: 	leaq	DATAat0x32182(%rip), %rdi
    00001291: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4753
.Ltmp939:
    00001296: 	leaq	DATAat0x32158(%rip), %rdi
    0000129d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4765
.Ltmp942:
    000012a2: 	leaq	DATAat0x32182(%rip), %rdi
    000012a9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4777
.Ltmp947:
    000012ae: 	leaq	DATAat0x32158(%rip), %rdi
    000012b5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4789
.Ltmp950:
    000012ba: 	leaq	DATAat0x32182(%rip), %rdi
    000012c1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4801
.Ltmp958:
    000012c6: 	leaq	DATAat0x32158(%rip), %rdi
    000012cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4813
.Ltmp961:
    000012d2: 	leaq	DATAat0x32182(%rip), %rdi
    000012d9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4825
.Ltmp966:
    000012de: 	leaq	DATAat0x32158(%rip), %rdi
    000012e5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4837
.Ltmp969:
    000012ea: 	leaq	DATAat0x32182(%rip), %rdi
    000012f1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4849
.Ltmp975:
    000012f6: 	callq	__stack_chk_fail@PLT # Offset: 4854
.Ltmp976:
    000012fb: 	movq	%rbx, %rdi
    000012fe: 	jmp	.Ltmp1003 # Offset: 4862
.Ltmp978:
    00001303: 	movq	%rbx, %rdi
    00001306: 	jmp	.Ltmp1004 # Offset: 4870
.Ltmp980:
    0000130b: 	movq	%rbx, %rdi
    0000130e: 	jmp	.Ltmp1005 # Offset: 4878
.Ltmp982:
    00001313: 	movq	%rbx, %rdi
    00001316: 	jmp	.Ltmp1006 # Offset: 4886
.Ltmp984:
    0000131b: 	movq	%rbx, %rdi
    0000131e: 	jmp	.Ltmp1007 # Offset: 4894
.Ltmp986:
    00001323: 	movq	%rbx, %rdi
    00001326: 	jmp	.Ltmp1008 # Offset: 4902
.Ltmp988:
    0000132b: 	movq	%rbx, %rdi
    0000132e: 	jmp	.Ltmp1009 # Offset: 4910
.Ltmp990:
    00001333: 	movq	%rbx, %rdi
    00001336: 	jmp	.Ltmp1010 # Offset: 4918
.Ltmp907:
    0000133b: 	leaq	DATAat0x32158(%rip), %rdi
    00001342: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4930
    00001347: 	endbr64
.Ltmp1016:
    0000134b: 	movq	%rax, %rbp
    0000134e: 	jmp	.Ltmp1011 # Offset: 4942
    00001350: 	endbr64
.Ltmp1017:
    00001354: 	movq	%rax, %rbp
    00001357: 	movq	0x90(%rsp), %rdi
    0000135f: 	cmpq	%r12, %rdi
    00001362: 	je	.Ltmp1011 # Offset: 4962
    00001364: 	movq	0xa0(%rsp), %rax
    0000136c: 	leaq	0x1(%rax), %rsi
    00001370: 	callq	_ZdlPvm@PLT # Offset: 4976
.Ltmp1011:
    00001375: 	movq	0x70(%rsp), %rdi
    0000137a: 	cmpq	%rbx, %rdi
    0000137d: 	je	.Ltmp1012 # Offset: 4989
.Ltmp1015:
    0000137f: 	movq	0x80(%rsp), %rax
    00001387: 	leaq	0x1(%rax), %rsi
    0000138b: 	callq	_ZdlPvm@PLT # Offset: 5003
.Ltmp1012:
    00001390: 	movq	0x50(%rsp), %rdi
    00001395: 	cmpq	0x20(%rsp), %rdi
    0000139a: 	je	.Ltmp1013 # Offset: 5018
    0000139c: 	movq	0x60(%rsp), %rax
    000013a1: 	leaq	0x1(%rax), %rsi
    000013a5: 	callq	_ZdlPvm@PLT # Offset: 5029
.Ltmp1013:
    000013aa: 	movq	%rbp, %rdi
    000013ad: 	callq	_Unwind_Resume@PLT # Offset: 5037
    000013b2: 	endbr64
    000013b6: 	movq	%rax, %rbp
    000013b9: 	jmp	.Ltmp1014 # Offset: 5049
    000013bb: 	endbr64
    000013bf: 	movq	%rax, %rbp
    000013c2: 	jmp	.Ltmp1012 # Offset: 5058
.Ltmp1019:
    000013c4: 	movq	0x90(%rsp), %rdi
    000013cc: 	cmpq	%r12, %rdi
    000013cf: 	je	.Ltmp1014 # Offset: 5071
    000013d1: 	movq	0xa0(%rsp), %rax
    000013d9: 	leaq	0x1(%rax), %rsi
    000013dd: 	callq	_ZdlPvm@PLT # Offset: 5085
.Ltmp1014:
    000013e2: 	movq	0x70(%rsp), %rdi
    000013e7: 	leaq	0x80(%rsp), %rax
    000013ef: 	cmpq	%rax, %rdi
    000013f2: 	jne	.Ltmp1015 # Offset: 5106
    000013f4: 	jmp	.Ltmp1012 # Offset: 5108
    000013f6: 	endbr64
    000013fa: 	jmp	.Ltmp1016 # Offset: 5114
    000013ff: 	endbr64
    00001403: 	jmp	.Ltmp1017 # Offset: 5123
    00001408: 	endbr64
    0000140c: 	jmp	.Ltmp1017 # Offset: 5132
    00001411: 	endbr64
    00001415: 	jmp	.Ltmp1016 # Offset: 5141
    0000141a: 	endbr64
    0000141e: 	jmp	.Ltmp1016 # Offset: 5150
    00001423: 	endbr64
    00001427: 	jmp	.Ltmp1016 # Offset: 5159
    0000142c: 	endbr64
    00001430: 	jmp	.Ltmp1017 # Offset: 5168
    00001435: 	endbr64
    00001439: 	jmp	.Ltmp1016 # Offset: 5177
    0000143e: 	endbr64
    00001442: 	jmp	.Ltmp1016 # Offset: 5186
    00001447: 	endbr64
    0000144b: 	jmp	.Ltmp1016 # Offset: 5195
    00001450: 	endbr64
    00001454: 	jmp	.Ltmp1017 # Offset: 5204
    00001459: 	endbr64
    0000145d: 	jmp	.Ltmp1016 # Offset: 5213
    00001462: 	endbr64
    00001466: 	movq	%rax, %rbp
    00001469: 	jmp	.Ltmp1018 # Offset: 5225
    0000146b: 	endbr64
    0000146f: 	jmp	.Ltmp1017 # Offset: 5231
.Ltmp1018:
    00001474: 	movq	0x90(%rsp), %rdi
    0000147c: 	cmpq	%r12, %rdi
    0000147f: 	je	.Ltmp1012 # Offset: 5247
    00001485: 	movq	0xa0(%rsp), %rax
    0000148d: 	leaq	0x1(%rax), %rsi
    00001491: 	callq	_ZdlPvm@PLT # Offset: 5265
    00001496: 	jmp	.Ltmp1012 # Offset: 5270
    0000149b: 	endbr64
    0000149f: 	jmp	.Ltmp1016 # Offset: 5279
    000014a4: 	endbr64
    000014a8: 	jmp	.Ltmp1017 # Offset: 5288
    000014ad: 	endbr64
    000014b1: 	jmp	.Ltmp1016 # Offset: 5297
    000014b6: 	endbr64
    000014ba: 	jmp	.Ltmp1016 # Offset: 5306
    000014bf: 	endbr64
    000014c3: 	jmp	.Ltmp1016 # Offset: 5315
    000014c8: 	endbr64
    000014cc: 	jmp	.Ltmp1016 # Offset: 5324
    000014d1: 	endbr64
    000014d5: 	jmp	.Ltmp1017 # Offset: 5333
    000014da: 	endbr64
    000014de: 	jmp	.Ltmp1016 # Offset: 5342
    000014e3: 	endbr64
    000014e7: 	jmp	.Ltmp1016 # Offset: 5351
    000014ec: 	endbr64
    000014f0: 	jmp	.Ltmp1017 # Offset: 5360
    000014f5: 	endbr64
    000014f9: 	jmp	.Ltmp1016 # Offset: 5369
    000014fe: 	endbr64
    00001502: 	jmp	.Ltmp1017 # Offset: 5378
    00001507: 	endbr64
    0000150b: 	jmp	.Ltmp1016 # Offset: 5387
    00001510: 	endbr64
    00001514: 	movq	%rax, %rbp
    00001517: 	jmp	.Ltmp1019 # Offset: 5399
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x20960
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x20960
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1020 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1022:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r12, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	*%rbx # Offset: 89
    0000005b: 	movl	%eax, %r8d
    0000005e: 	movl	init_value(%rip), %eax
    00000064: 	imull	%eax, %eax
    00000067: 	imulw	$0x1f40, %ax, %ax
    0000006c: 	cmpw	%ax, %r8w
    00000070: 	jne	.Ltmp1021 # Offset: 112
    00000076: 	addl	$0x1, %r15d
    0000007a: 	cmpl	%r15d, iterations(%rip)
    00000081: 	jg	.Ltmp1022 # Offset: 129
.Ltmp1020:
    00000083: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000008a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000091: 	subq	$0x20, %rax
    00000095: 	cmpq	%rax, %rbx
    00000098: 	je	.Ltmp1023 # Offset: 152
    0000009e: 	leaq	0x10(%rbx), %rdi
    000000a2: 	movq	0x8(%r14), %r12
    000000a6: 	movq	%rdi, (%rbx)
    000000a9: 	movq	(%r14), %rbp
    000000ac: 	movq	%rbp, %rax
    000000af: 	addq	%r12, %rax
    000000b2: 	je	.Ltmp1024 # Offset: 178
    000000b4: 	testq	%rbp, %rbp
    000000b7: 	je	.Ltmp1025 # Offset: 183
.Ltmp1024:
    000000bd: 	movq	%r12, (%rsp)
    000000c1: 	cmpq	$0xf, %r12
    000000c5: 	ja	.Ltmp1026 # Offset: 197
    000000cb: 	cmpq	$0x1, %r12
    000000cf: 	jne	.Ltmp1027 # Offset: 207
    000000d5: 	movzbl	(%rbp), %eax
    000000d9: 	movb	%al, 0x10(%rbx)
.Ltmp1030:
    000000dc: 	movq	%r12, 0x8(%rbx)
    000000e0: 	movb	$0x0, (%rdi,%r12)
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f3: 	addq	$0x20, %rax
    000000f7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000fe: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000105: 	je	.Ltmp1028 # Offset: 261
.Ltmp1031:
    0000010b: 	movq	-0x20(%rax), %rbp
    0000010f: 	callq	clock@PLT # Offset: 271
    00000114: 	movq	%rax, end_time(%rip)
    0000011b: 	movq	0x8(%rsp), %rdx
    00000120: 	subq	%fs:0x28, %rdx
    00000129: 	jne	.Ltmp1029 # Offset: 297
    0000012f: 	subq	start_time(%rip), %rax
    00000136: 	pxor	%xmm0, %xmm0
    0000013a: 	movq	%rbp, %rdi
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x32600(%rip), %xmm0
    0000014a: 	addq	$0x18, %rsp
    0000014e: 	popq	%rbx
    0000014f: 	popq	%rbp
    00000150: 	popq	%r12
    00000152: 	popq	%r13
    00000154: 	popq	%r14
    00000156: 	popq	%r15
    00000158: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 344
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1021:
    00000160: 	movq	(%r14), %rdx
    00000163: 	xorl	%eax, %eax
    00000165: 	leaq	DATAat0x321c8(%rip), %rsi
    0000016c: 	addl	$0x1, %r15d
    00000170: 	movl	$0x1, %edi
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	cmpl	%r15d, iterations(%rip)
    00000181: 	jg	.Ltmp1022 # Offset: 385
    00000187: 	jmp	.Ltmp1020 # Offset: 391
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1026:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1032:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp1030 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1023:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1031 # Offset: 492
.Ltmp1028:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1031 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1027:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1030 # Offset: 523
    00000211: 	jmp	.Ltmp1032 # Offset: 529
.Ltmp1029:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp1025:
    00000218: 	leaq	DATAat0x32158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x20b90
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x20b90
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1033 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1035:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r12, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	*%rbx # Offset: 89
    0000005b: 	movl	%eax, %r8d
    0000005e: 	movl	init_value(%rip), %eax
    00000064: 	imull	%eax, %eax
    00000067: 	shll	$0x6, %eax
    0000006a: 	cmpb	%al, %r8b
    0000006d: 	jne	.Ltmp1034 # Offset: 109
    00000073: 	addl	$0x1, %r15d
    00000077: 	cmpl	%r15d, iterations(%rip)
    0000007e: 	jg	.Ltmp1035 # Offset: 126
.Ltmp1033:
    00000080: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000087: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000008e: 	subq	$0x20, %rax
    00000092: 	cmpq	%rax, %rbx
    00000095: 	je	.Ltmp1036 # Offset: 149
    0000009b: 	leaq	0x10(%rbx), %rdi
    0000009f: 	movq	0x8(%r14), %r12
    000000a3: 	movq	%rdi, (%rbx)
    000000a6: 	movq	(%r14), %rbp
    000000a9: 	movq	%rbp, %rax
    000000ac: 	addq	%r12, %rax
    000000af: 	je	.Ltmp1037 # Offset: 175
    000000b1: 	testq	%rbp, %rbp
    000000b4: 	je	.Ltmp1038 # Offset: 180
.Ltmp1037:
    000000ba: 	movq	%r12, (%rsp)
    000000be: 	cmpq	$0xf, %r12
    000000c2: 	ja	.Ltmp1039 # Offset: 194
    000000c8: 	cmpq	$0x1, %r12
    000000cc: 	jne	.Ltmp1040 # Offset: 204
    000000d2: 	movzbl	(%rbp), %eax
    000000d6: 	movb	%al, 0x10(%rbx)
.Ltmp1043:
    000000d9: 	movq	%r12, 0x8(%rbx)
    000000dd: 	movb	$0x0, (%rdi,%r12)
    000000e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000e9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f0: 	addq	$0x20, %rax
    000000f4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000fb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000102: 	je	.Ltmp1041 # Offset: 258
.Ltmp1044:
    00000108: 	movq	-0x20(%rax), %rbp
    0000010c: 	callq	clock@PLT # Offset: 268
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	movq	0x8(%rsp), %rdx
    0000011d: 	subq	%fs:0x28, %rdx
    00000126: 	jne	.Ltmp1042 # Offset: 294
    0000012c: 	subq	start_time(%rip), %rax
    00000133: 	pxor	%xmm0, %xmm0
    00000137: 	movq	%rbp, %rdi
    0000013a: 	cvtsi2sd	%rax, %xmm0
    0000013f: 	divsd	DATAat0x32600(%rip), %xmm0
    00000147: 	addq	$0x18, %rsp
    0000014b: 	popq	%rbx
    0000014c: 	popq	%rbp
    0000014d: 	popq	%r12
    0000014f: 	popq	%r13
    00000151: 	popq	%r14
    00000153: 	popq	%r15
    00000155: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1034:
    00000160: 	movq	(%r14), %rdx
    00000163: 	xorl	%eax, %eax
    00000165: 	leaq	DATAat0x321c8(%rip), %rsi
    0000016c: 	addl	$0x1, %r15d
    00000170: 	movl	$0x1, %edi
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	cmpl	%r15d, iterations(%rip)
    00000181: 	jg	.Ltmp1035 # Offset: 385
    00000187: 	jmp	.Ltmp1033 # Offset: 391
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1039:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1045:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp1043 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1036:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1044 # Offset: 492
.Ltmp1041:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1044 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1040:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1043 # Offset: 523
    00000211: 	jmp	.Ltmp1045 # Offset: 529
.Ltmp1042:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp1038:
    00000218: 	leaq	DATAat0x32158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x20dc0
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x20dc0
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1046 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1048:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r12, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	*%rbx # Offset: 89
    0000005b: 	movl	%eax, %r8d
    0000005e: 	movl	init_value(%rip), %eax
    00000064: 	imull	%eax, %eax
    00000067: 	imull	$0x1f40, %eax, %eax
    0000006d: 	cmpl	%eax, %r8d
    00000070: 	jne	.Ltmp1047 # Offset: 112
    00000076: 	addl	$0x1, %r15d
    0000007a: 	cmpl	%r15d, iterations(%rip)
    00000081: 	jg	.Ltmp1048 # Offset: 129
.Ltmp1046:
    00000083: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000008a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000091: 	subq	$0x20, %rax
    00000095: 	cmpq	%rax, %rbx
    00000098: 	je	.Ltmp1049 # Offset: 152
    0000009e: 	leaq	0x10(%rbx), %rdi
    000000a2: 	movq	0x8(%r14), %r12
    000000a6: 	movq	%rdi, (%rbx)
    000000a9: 	movq	(%r14), %rbp
    000000ac: 	movq	%rbp, %rax
    000000af: 	addq	%r12, %rax
    000000b2: 	je	.Ltmp1050 # Offset: 178
    000000b4: 	testq	%rbp, %rbp
    000000b7: 	je	.Ltmp1051 # Offset: 183
.Ltmp1050:
    000000bd: 	movq	%r12, (%rsp)
    000000c1: 	cmpq	$0xf, %r12
    000000c5: 	ja	.Ltmp1052 # Offset: 197
    000000cb: 	cmpq	$0x1, %r12
    000000cf: 	jne	.Ltmp1053 # Offset: 207
    000000d5: 	movzbl	(%rbp), %eax
    000000d9: 	movb	%al, 0x10(%rbx)
.Ltmp1056:
    000000dc: 	movq	%r12, 0x8(%rbx)
    000000e0: 	movb	$0x0, (%rdi,%r12)
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f3: 	addq	$0x20, %rax
    000000f7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000fe: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000105: 	je	.Ltmp1054 # Offset: 261
.Ltmp1057:
    0000010b: 	movq	-0x20(%rax), %rbp
    0000010f: 	callq	clock@PLT # Offset: 271
    00000114: 	movq	%rax, end_time(%rip)
    0000011b: 	movq	0x8(%rsp), %rdx
    00000120: 	subq	%fs:0x28, %rdx
    00000129: 	jne	.Ltmp1055 # Offset: 297
    0000012f: 	subq	start_time(%rip), %rax
    00000136: 	pxor	%xmm0, %xmm0
    0000013a: 	movq	%rbp, %rdi
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x32600(%rip), %xmm0
    0000014a: 	addq	$0x18, %rsp
    0000014e: 	popq	%rbx
    0000014f: 	popq	%rbp
    00000150: 	popq	%r12
    00000152: 	popq	%r13
    00000154: 	popq	%r14
    00000156: 	popq	%r15
    00000158: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 344
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1047:
    00000160: 	movq	(%r14), %rdx
    00000163: 	xorl	%eax, %eax
    00000165: 	leaq	DATAat0x321c8(%rip), %rsi
    0000016c: 	addl	$0x1, %r15d
    00000170: 	movl	$0x1, %edi
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	cmpl	%r15d, iterations(%rip)
    00000181: 	jg	.Ltmp1048 # Offset: 385
    00000187: 	jmp	.Ltmp1046 # Offset: 391
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1052:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1058:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp1056 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1049:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1057 # Offset: 492
.Ltmp1054:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1057 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1053:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1056 # Offset: 523
    00000211: 	jmp	.Ltmp1058 # Offset: 529
.Ltmp1055:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp1051:
    00000218: 	leaq	DATAat0x32158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x20ff0
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x20ff0
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1059 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1061:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r12, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	*%rbx # Offset: 89
    0000005b: 	movl	%eax, %r8d
    0000005e: 	movl	init_value(%rip), %eax
    00000064: 	imull	%eax, %eax
    00000067: 	shll	$0x6, %eax
    0000006a: 	cmpb	%al, %r8b
    0000006d: 	jne	.Ltmp1060 # Offset: 109
    00000073: 	addl	$0x1, %r15d
    00000077: 	cmpl	%r15d, iterations(%rip)
    0000007e: 	jg	.Ltmp1061 # Offset: 126
.Ltmp1059:
    00000080: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000087: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000008e: 	subq	$0x20, %rax
    00000092: 	cmpq	%rax, %rbx
    00000095: 	je	.Ltmp1062 # Offset: 149
    0000009b: 	leaq	0x10(%rbx), %rdi
    0000009f: 	movq	0x8(%r14), %r12
    000000a3: 	movq	%rdi, (%rbx)
    000000a6: 	movq	(%r14), %rbp
    000000a9: 	movq	%rbp, %rax
    000000ac: 	addq	%r12, %rax
    000000af: 	je	.Ltmp1063 # Offset: 175
    000000b1: 	testq	%rbp, %rbp
    000000b4: 	je	.Ltmp1064 # Offset: 180
.Ltmp1063:
    000000ba: 	movq	%r12, (%rsp)
    000000be: 	cmpq	$0xf, %r12
    000000c2: 	ja	.Ltmp1065 # Offset: 194
    000000c8: 	cmpq	$0x1, %r12
    000000cc: 	jne	.Ltmp1066 # Offset: 204
    000000d2: 	movzbl	(%rbp), %eax
    000000d6: 	movb	%al, 0x10(%rbx)
.Ltmp1069:
    000000d9: 	movq	%r12, 0x8(%rbx)
    000000dd: 	movb	$0x0, (%rdi,%r12)
    000000e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000e9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f0: 	addq	$0x20, %rax
    000000f4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000fb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000102: 	je	.Ltmp1067 # Offset: 258
.Ltmp1070:
    00000108: 	movq	-0x20(%rax), %rbp
    0000010c: 	callq	clock@PLT # Offset: 268
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	movq	0x8(%rsp), %rdx
    0000011d: 	subq	%fs:0x28, %rdx
    00000126: 	jne	.Ltmp1068 # Offset: 294
    0000012c: 	subq	start_time(%rip), %rax
    00000133: 	pxor	%xmm0, %xmm0
    00000137: 	movq	%rbp, %rdi
    0000013a: 	cvtsi2sd	%rax, %xmm0
    0000013f: 	divsd	DATAat0x32600(%rip), %xmm0
    00000147: 	addq	$0x18, %rsp
    0000014b: 	popq	%rbx
    0000014c: 	popq	%rbp
    0000014d: 	popq	%r12
    0000014f: 	popq	%r13
    00000151: 	popq	%r14
    00000153: 	popq	%r15
    00000155: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1060:
    00000160: 	movq	(%r14), %rdx
    00000163: 	xorl	%eax, %eax
    00000165: 	leaq	DATAat0x321c8(%rip), %rsi
    0000016c: 	addl	$0x1, %r15d
    00000170: 	movl	$0x1, %edi
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	cmpl	%r15d, iterations(%rip)
    00000181: 	jg	.Ltmp1061 # Offset: 385
    00000187: 	jmp	.Ltmp1059 # Offset: 391
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1065:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1071:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp1069 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1062:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1070 # Offset: 492
.Ltmp1067:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1070 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1066:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1069 # Offset: 523
    00000211: 	jmp	.Ltmp1071 # Offset: 529
.Ltmp1068:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp1064:
    00000218: 	leaq	DATAat0x32158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x21220
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x21220
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1072 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1074:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r12, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	*%rbx # Offset: 89
    0000005b: 	movl	%eax, %r8d
    0000005e: 	movl	init_value(%rip), %eax
    00000064: 	imull	%eax, %eax
    00000067: 	imulw	$0x1f40, %ax, %ax
    0000006c: 	cmpw	%ax, %r8w
    00000070: 	jne	.Ltmp1073 # Offset: 112
    00000076: 	addl	$0x1, %r15d
    0000007a: 	cmpl	%r15d, iterations(%rip)
    00000081: 	jg	.Ltmp1074 # Offset: 129
.Ltmp1072:
    00000083: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000008a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000091: 	subq	$0x20, %rax
    00000095: 	cmpq	%rax, %rbx
    00000098: 	je	.Ltmp1075 # Offset: 152
    0000009e: 	leaq	0x10(%rbx), %rdi
    000000a2: 	movq	0x8(%r14), %r12
    000000a6: 	movq	%rdi, (%rbx)
    000000a9: 	movq	(%r14), %rbp
    000000ac: 	movq	%rbp, %rax
    000000af: 	addq	%r12, %rax
    000000b2: 	je	.Ltmp1076 # Offset: 178
    000000b4: 	testq	%rbp, %rbp
    000000b7: 	je	.Ltmp1077 # Offset: 183
.Ltmp1076:
    000000bd: 	movq	%r12, (%rsp)
    000000c1: 	cmpq	$0xf, %r12
    000000c5: 	ja	.Ltmp1078 # Offset: 197
    000000cb: 	cmpq	$0x1, %r12
    000000cf: 	jne	.Ltmp1079 # Offset: 207
    000000d5: 	movzbl	(%rbp), %eax
    000000d9: 	movb	%al, 0x10(%rbx)
.Ltmp1082:
    000000dc: 	movq	%r12, 0x8(%rbx)
    000000e0: 	movb	$0x0, (%rdi,%r12)
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f3: 	addq	$0x20, %rax
    000000f7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000fe: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000105: 	je	.Ltmp1080 # Offset: 261
.Ltmp1083:
    0000010b: 	movq	-0x20(%rax), %rbp
    0000010f: 	callq	clock@PLT # Offset: 271
    00000114: 	movq	%rax, end_time(%rip)
    0000011b: 	movq	0x8(%rsp), %rdx
    00000120: 	subq	%fs:0x28, %rdx
    00000129: 	jne	.Ltmp1081 # Offset: 297
    0000012f: 	subq	start_time(%rip), %rax
    00000136: 	pxor	%xmm0, %xmm0
    0000013a: 	movq	%rbp, %rdi
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x32600(%rip), %xmm0
    0000014a: 	addq	$0x18, %rsp
    0000014e: 	popq	%rbx
    0000014f: 	popq	%rbp
    00000150: 	popq	%r12
    00000152: 	popq	%r13
    00000154: 	popq	%r14
    00000156: 	popq	%r15
    00000158: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 344
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1073:
    00000160: 	movq	(%r14), %rdx
    00000163: 	xorl	%eax, %eax
    00000165: 	leaq	DATAat0x321c8(%rip), %rsi
    0000016c: 	addl	$0x1, %r15d
    00000170: 	movl	$0x1, %edi
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	cmpl	%r15d, iterations(%rip)
    00000181: 	jg	.Ltmp1074 # Offset: 385
    00000187: 	jmp	.Ltmp1072 # Offset: 391
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1078:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1084:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp1082 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1075:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1083 # Offset: 492
.Ltmp1080:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1083 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1079:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1082 # Offset: 523
    00000211: 	jmp	.Ltmp1084 # Offset: 529
.Ltmp1081:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp1077:
    00000218: 	leaq	DATAat0x32158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x21450
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x21450
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1085 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1087:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r12, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	*%rbx # Offset: 89
    0000005b: 	movq	%rax, %r8
    0000005e: 	movslq	init_value(%rip), %rax
    00000065: 	imulq	%rax, %rax
    00000069: 	imulq	$0x1f40, %rax, %rax
    00000070: 	cmpq	%rax, %r8
    00000073: 	jne	.Ltmp1086 # Offset: 115
    00000079: 	addl	$0x1, %r15d
    0000007d: 	cmpl	%r15d, iterations(%rip)
    00000084: 	jg	.Ltmp1087 # Offset: 132
.Ltmp1085:
    00000086: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000008d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000094: 	subq	$0x20, %rax
    00000098: 	cmpq	%rax, %rbx
    0000009b: 	je	.Ltmp1088 # Offset: 155
    000000a1: 	leaq	0x10(%rbx), %rdi
    000000a5: 	movq	0x8(%r14), %r12
    000000a9: 	movq	%rdi, (%rbx)
    000000ac: 	movq	(%r14), %rbp
    000000af: 	movq	%rbp, %rax
    000000b2: 	addq	%r12, %rax
    000000b5: 	je	.Ltmp1089 # Offset: 181
    000000b7: 	testq	%rbp, %rbp
    000000ba: 	je	.Ltmp1090 # Offset: 186
.Ltmp1089:
    000000c0: 	movq	%r12, (%rsp)
    000000c4: 	cmpq	$0xf, %r12
    000000c8: 	ja	.Ltmp1091 # Offset: 200
    000000ce: 	cmpq	$0x1, %r12
    000000d2: 	jne	.Ltmp1092 # Offset: 210
    000000d8: 	movzbl	(%rbp), %eax
    000000dc: 	movb	%al, 0x10(%rbx)
.Ltmp1095:
    000000df: 	movq	%r12, 0x8(%rbx)
    000000e3: 	movb	$0x0, (%rdi,%r12)
    000000e8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f6: 	addq	$0x20, %rax
    000000fa: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000101: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000108: 	je	.Ltmp1093 # Offset: 264
.Ltmp1096:
    0000010e: 	movq	-0x20(%rax), %rbp
    00000112: 	callq	clock@PLT # Offset: 274
    00000117: 	movq	%rax, end_time(%rip)
    0000011e: 	movq	0x8(%rsp), %rdx
    00000123: 	subq	%fs:0x28, %rdx
    0000012c: 	jne	.Ltmp1094 # Offset: 300
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	pxor	%xmm0, %xmm0
    0000013d: 	movq	%rbp, %rdi
    00000140: 	cvtsi2sd	%rax, %xmm0
    00000145: 	divsd	DATAat0x32600(%rip), %xmm0
    0000014d: 	addq	$0x18, %rsp
    00000151: 	popq	%rbx
    00000152: 	popq	%rbp
    00000153: 	popq	%r12
    00000155: 	popq	%r13
    00000157: 	popq	%r14
    00000159: 	popq	%r15
    0000015b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 347
.Ltmp1086:
    00000160: 	movq	(%r14), %rdx
    00000163: 	xorl	%eax, %eax
    00000165: 	leaq	DATAat0x321c8(%rip), %rsi
    0000016c: 	addl	$0x1, %r15d
    00000170: 	movl	$0x1, %edi
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	cmpl	%r15d, iterations(%rip)
    00000181: 	jg	.Ltmp1087 # Offset: 385
    00000187: 	jmp	.Ltmp1085 # Offset: 391
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1091:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp1097:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp1095 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1088:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1096 # Offset: 492
.Ltmp1093:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1096 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1092:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1095 # Offset: 523
    00000211: 	jmp	.Ltmp1097 # Offset: 529
.Ltmp1094:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp1090:
    00000218: 	leaq	DATAat0x32158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIlEvv" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x21680
  Size        : 0x1384
  MaxSize     : 0x1390
  Offset      : 0x21680
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIlEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x1f000(%rsp), %r11
.Ltmp1098:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1098 # Offset: 37
    00000027: 	subq	$0x4c8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm1
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm2
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x1f4b8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movl	$0x36746e69, 0x60(%rsp)
    00000063: 	movq	%rax, 0x20(%rsp)
    00000068: 	leaq	0xb0(%rsp), %r15
    00000070: 	leaq	0xfab0(%rsp), %r13
    00000078: 	movq	%rax, 0x50(%rsp)
    0000007d: 	movl	$0x5f34, %eax
    00000082: 	movw	%ax, 0x64(%rsp)
    00000087: 	movb	$0x74, 0x66(%rsp)
    0000008c: 	movq	$0x7, 0x58(%rsp)
    00000095: 	movb	$0x0, 0x67(%rsp)
    0000009a: 	movq	%rdi, 0x18(%rsp)
    0000009f: 	movaps	%xmm1, 0x30(%rsp)
    000000a4: 	movaps	%xmm2, 0x40(%rsp)
    000000a9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 169
    000000ae: 	movslq	init_value(%rip), %rax
    000000b5: 	movq	%rax, %xmm0
    000000ba: 	movq	%r15, %rax
    000000bd: 	punpcklqdq	%xmm0, %xmm0
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp1099:
    000000c8: 	movaps	%xmm0, (%rax)
    000000cb: 	addq	$0x10, %rax
    000000cf: 	cmpq	%r13, %rax
    000000d2: 	jne	.Ltmp1099 # Offset: 210
    000000d4: 	movq	%r13, %rax
    000000d7: 	leaq	0x1f4b0(%rsp), %rdx
    000000df: 	nop # Size: 1
.Ltmp1100:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rdx, %rax
    000000ea: 	jne	.Ltmp1100 # Offset: 234
    000000ec: 	movq	0x50(%rsp), %rbp
    000000f1: 	movq	0x58(%rsp), %r14
    000000f6: 	leaq	0x80(%rsp), %r12
    000000fe: 	movq	%r12, 0x70(%rsp)
    00000103: 	movq	%rbp, %rax
    00000106: 	addq	%r14, %rax
    00000109: 	je	.Ltmp1101 # Offset: 265
    0000010b: 	testq	%rbp, %rbp
    0000010e: 	je	.Ltmp1102 # Offset: 270
.Ltmp1101:
    00000114: 	movq	%r14, 0x30(%rsp)
    00000119: 	cmpq	$0xf, %r14
    0000011d: 	ja	.Ltmp1103 # Offset: 285
    00000123: 	cmpq	$0x1, %r14
    00000127: 	jne	.Ltmp1104 # Offset: 295
    0000012d: 	movzbl	(%rbp), %eax
    00000131: 	movb	%al, 0x80(%rsp)
    00000138: 	movq	%r12, %rax
.Ltmp1173:
    0000013b: 	movq	%r14, 0x78(%rsp)
    00000140: 	movb	$0x0, (%rax,%r14)
    00000145: 	movabsq	$0x3fffffffffffffff, %rax
    0000014f: 	subq	0x78(%rsp), %rax
    00000154: 	cmpq	$0x16, %rax
    00000158: 	jbe	.Ltmp1105 # Offset: 344
    0000015e: 	leaq	0x70(%rsp), %rbp
    00000163: 	movl	$0x17, %edx
    00000168: 	leaq	DATAat0x321d8(%rip), %rsi
    0000016f: 	movq	%rbp, %rdi
    00000172: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 370
    00000177: 	movq	0x58(%rsp), %rdx
    0000017c: 	movq	0x50(%rsp), %rsi
    00000181: 	movq	%rbp, %rdi
    00000184: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 388
    00000189: 	leaq	0xa0(%rsp), %rbx
    00000191: 	leaq	0x10(%rax), %rdx
    00000195: 	movq	%rbx, 0x90(%rsp)
    0000019d: 	movq	(%rax), %rcx
    000001a0: 	cmpq	%rdx, %rcx
    000001a3: 	je	.Ltmp1106 # Offset: 419
    000001a9: 	movq	%rcx, 0x90(%rsp)
    000001b1: 	movq	0x10(%rax), %rcx
    000001b5: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1189:
    000001bd: 	movq	0x8(%rax), %rcx
    000001c1: 	leaq	0x90(%rsp), %r14
    000001c9: 	movq	%r13, %rsi
    000001cc: 	movq	%r15, %rdi
    000001cf: 	movq	%r14, %r8
    000001d2: 	movq	%rcx, 0x98(%rsp)
    000001da: 	leaq	_Z17inner_product_stdIPKllET0_T_S3_m(%rip), %rcx
    000001e1: 	movq	%rdx, (%rax)
    000001e4: 	movl	$0x1f40, %edx
    000001e9: 	movq	$0x0, 0x8(%rax)
    000001f1: 	movb	$0x0, 0x10(%rax)
    000001f5: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 501
    000001fa: 	movq	0x90(%rsp), %rdi
    00000202: 	cmpq	%rbx, %rdi
    00000205: 	je	.Ltmp1107 # Offset: 517
    00000207: 	movq	0xa0(%rsp), %rax
    0000020f: 	leaq	0x1(%rax), %rsi
    00000213: 	callq	_ZdlPvm@PLT # Offset: 531
.Ltmp1107:
    00000218: 	movq	0x70(%rsp), %rdi
    0000021d: 	cmpq	%r12, %rdi
    00000220: 	je	.Ltmp1108 # Offset: 544
    00000222: 	movq	0x80(%rsp), %rax
    0000022a: 	leaq	0x1(%rax), %rsi
    0000022e: 	callq	_ZdlPvm@PLT # Offset: 558
.Ltmp1108:
    00000233: 	leaq	0x50(%rsp), %rax
    00000238: 	leaq	DATAat0x321f0(%rip), %rdx
    0000023f: 	movq	%rbp, %rdi
    00000242: 	movq	%rax, %rsi
    00000245: 	movq	%rax, 0x8(%rsp)
    0000024a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 586
    0000024f: 	movq	0x58(%rsp), %rdx
    00000254: 	movq	0x50(%rsp), %rsi
    00000259: 	movq	%rbp, %rdi
    0000025c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 604
    00000261: 	movq	%rbx, 0x90(%rsp)
    00000269: 	movq	(%rax), %rcx
    0000026c: 	leaq	0x10(%rax), %rdx
    00000270: 	cmpq	%rdx, %rcx
    00000273: 	je	.Ltmp1109 # Offset: 627
    00000279: 	movq	%rcx, 0x90(%rsp)
    00000281: 	movq	0x10(%rax), %rcx
    00000285: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1188:
    0000028d: 	movq	0x8(%rax), %rcx
    00000291: 	movq	%r14, %r8
    00000294: 	movq	%r13, %rsi
    00000297: 	movq	%r15, %rdi
    0000029a: 	movq	%rcx, 0x98(%rsp)
    000002a2: 	leaq	_Z14inner_product1IPKllET0_T_S3_m(%rip), %rcx
    000002a9: 	movq	%rdx, (%rax)
    000002ac: 	movl	$0x1f40, %edx
    000002b1: 	movq	$0x0, 0x8(%rax)
    000002b9: 	movb	$0x0, 0x10(%rax)
    000002bd: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 701
    000002c2: 	movq	0x90(%rsp), %rdi
    000002ca: 	cmpq	%rbx, %rdi
    000002cd: 	je	.Ltmp1110 # Offset: 717
    000002cf: 	movq	0xa0(%rsp), %rax
    000002d7: 	leaq	0x1(%rax), %rsi
    000002db: 	callq	_ZdlPvm@PLT # Offset: 731
.Ltmp1110:
    000002e0: 	movq	0x70(%rsp), %rdi
    000002e5: 	cmpq	%r12, %rdi
    000002e8: 	je	.Ltmp1111 # Offset: 744
    000002ea: 	movq	0x80(%rsp), %rax
    000002f2: 	leaq	0x1(%rax), %rsi
    000002f6: 	callq	_ZdlPvm@PLT # Offset: 758
.Ltmp1111:
    000002fb: 	movq	0x8(%rsp), %rsi
    00000300: 	leaq	DATAat0x32204(%rip), %rdx
    00000307: 	movq	%rbp, %rdi
    0000030a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 778
    0000030f: 	movq	0x58(%rsp), %rdx
    00000314: 	movq	0x50(%rsp), %rsi
    00000319: 	movq	%rbp, %rdi
    0000031c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 796
    00000321: 	movq	%rbx, 0x90(%rsp)
    00000329: 	movq	(%rax), %rcx
    0000032c: 	leaq	0x10(%rax), %rdx
    00000330: 	cmpq	%rdx, %rcx
    00000333: 	je	.Ltmp1112 # Offset: 819
    00000339: 	movq	%rcx, 0x90(%rsp)
    00000341: 	movq	0x10(%rax), %rcx
    00000345: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1187:
    0000034d: 	movq	0x8(%rax), %rcx
    00000351: 	movq	%r14, %r8
    00000354: 	movq	%r13, %rsi
    00000357: 	movq	%r15, %rdi
    0000035a: 	movq	%rcx, 0x98(%rsp)
    00000362: 	leaq	_Z14inner_product2IPKllET0_T_S3_m(%rip), %rcx
    00000369: 	movq	%rdx, (%rax)
    0000036c: 	movl	$0x1f40, %edx
    00000371: 	movq	$0x0, 0x8(%rax)
    00000379: 	movb	$0x0, 0x10(%rax)
    0000037d: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 893
    00000382: 	movq	0x90(%rsp), %rdi
    0000038a: 	cmpq	%rbx, %rdi
    0000038d: 	je	.Ltmp1113 # Offset: 909
    0000038f: 	movq	0xa0(%rsp), %rax
    00000397: 	leaq	0x1(%rax), %rsi
    0000039b: 	callq	_ZdlPvm@PLT # Offset: 923
.Ltmp1113:
    000003a0: 	movq	0x70(%rsp), %rdi
    000003a5: 	cmpq	%r12, %rdi
    000003a8: 	je	.Ltmp1114 # Offset: 936
    000003aa: 	movq	0x80(%rsp), %rax
    000003b2: 	leaq	0x1(%rax), %rsi
    000003b6: 	callq	_ZdlPvm@PLT # Offset: 950
.Ltmp1114:
    000003bb: 	movq	0x50(%rsp), %rdx
    000003c0: 	movq	0x58(%rsp), %rcx
    000003c5: 	movq	%r12, 0x70(%rsp)
    000003ca: 	movq	%rdx, %rax
    000003cd: 	movq	%rdx, 0x28(%rsp)
    000003d2: 	addq	%rcx, %rax
    000003d5: 	movq	%rcx, 0x10(%rsp)
    000003da: 	je	.Ltmp1115 # Offset: 986
    000003dc: 	testq	%rdx, %rdx
    000003df: 	je	.Ltmp1116 # Offset: 991
.Ltmp1115:
    000003e5: 	movq	0x10(%rsp), %rax
    000003ea: 	movq	%rax, 0x30(%rsp)
    000003ef: 	cmpq	$0xf, %rax
    000003f3: 	ja	.Ltmp1117 # Offset: 1011
    000003f9: 	cmpq	$0x1, 0x10(%rsp)
    000003ff: 	jne	.Ltmp1118 # Offset: 1023
    00000405: 	movq	0x28(%rsp), %rax
    0000040a: 	movzbl	(%rax), %eax
    0000040d: 	movb	%al, 0x80(%rsp)
    00000414: 	movq	%r12, %rax
.Ltmp1175:
    00000417: 	movq	0x10(%rsp), %rdx
    0000041c: 	movq	%rdx, 0x78(%rsp)
    00000421: 	movb	$0x0, (%rax,%rdx)
    00000425: 	movabsq	$0x3fffffffffffffff, %rax
    0000042f: 	subq	0x78(%rsp), %rax
    00000434: 	cmpq	$0x12, %rax
    00000438: 	jbe	.Ltmp1119 # Offset: 1080
    0000043e: 	movl	$0x13, %edx
    00000443: 	leaq	DATAat0x32218(%rip), %rsi
    0000044a: 	movq	%rbp, %rdi
    0000044d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1101
    00000452: 	movq	0x58(%rsp), %rdx
    00000457: 	movq	0x50(%rsp), %rsi
    0000045c: 	movq	%rbp, %rdi
    0000045f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1119
    00000464: 	movq	%rbx, 0x90(%rsp)
    0000046c: 	movq	(%rax), %rcx
    0000046f: 	leaq	0x10(%rax), %rdx
    00000473: 	cmpq	%rdx, %rcx
    00000476: 	je	.Ltmp1120 # Offset: 1142
    0000047c: 	movq	%rcx, 0x90(%rsp)
    00000484: 	movq	0x10(%rax), %rcx
    00000488: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1186:
    00000490: 	movq	0x8(%rax), %rcx
    00000494: 	movq	%r14, %r8
    00000497: 	movq	%r13, %rsi
    0000049a: 	movq	%r15, %rdi
    0000049d: 	movq	%rcx, 0x98(%rsp)
    000004a5: 	leaq	_Z14inner_product3IPKllET0_T_S3_m(%rip), %rcx
    000004ac: 	movq	%rdx, (%rax)
    000004af: 	movl	$0x1f40, %edx
    000004b4: 	movq	$0x0, 0x8(%rax)
    000004bc: 	movb	$0x0, 0x10(%rax)
    000004c0: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1216
    000004c5: 	movq	0x90(%rsp), %rdi
    000004cd: 	cmpq	%rbx, %rdi
    000004d0: 	je	.Ltmp1121 # Offset: 1232
    000004d2: 	movq	0xa0(%rsp), %rax
    000004da: 	leaq	0x1(%rax), %rsi
    000004de: 	callq	_ZdlPvm@PLT # Offset: 1246
.Ltmp1121:
    000004e3: 	movq	0x70(%rsp), %rdi
    000004e8: 	cmpq	%r12, %rdi
    000004eb: 	je	.Ltmp1122 # Offset: 1259
    000004ed: 	movq	0x80(%rsp), %rax
    000004f5: 	leaq	0x1(%rax), %rsi
    000004f9: 	callq	_ZdlPvm@PLT # Offset: 1273
.Ltmp1122:
    000004fe: 	movq	0x50(%rsp), %rsi
    00000503: 	movq	0x58(%rsp), %rdx
    00000508: 	movq	%r12, 0x70(%rsp)
    0000050d: 	movq	%rsi, %rax
    00000510: 	movq	%rsi, 0x28(%rsp)
    00000515: 	addq	%rdx, %rax
    00000518: 	movq	%rdx, 0x10(%rsp)
    0000051d: 	je	.Ltmp1123 # Offset: 1309
    0000051f: 	testq	%rsi, %rsi
    00000522: 	je	.Ltmp1124 # Offset: 1314
.Ltmp1123:
    00000528: 	movq	0x10(%rsp), %rax
    0000052d: 	movq	%rax, 0x30(%rsp)
    00000532: 	cmpq	$0xf, %rax
    00000536: 	ja	.Ltmp1125 # Offset: 1334
    0000053c: 	cmpq	$0x1, 0x10(%rsp)
    00000542: 	jne	.Ltmp1126 # Offset: 1346
    00000548: 	movq	0x28(%rsp), %rax
    0000054d: 	movzbl	(%rax), %eax
    00000550: 	movb	%al, 0x80(%rsp)
    00000557: 	movq	%r12, %rax
.Ltmp1179:
    0000055a: 	movq	0x10(%rsp), %rsi
    0000055f: 	movq	%rsi, 0x78(%rsp)
    00000564: 	movb	$0x0, (%rax,%rsi)
    00000568: 	movabsq	$0x3fffffffffffffff, %rax
    00000572: 	subq	0x78(%rsp), %rax
    00000577: 	cmpq	$0x12, %rax
    0000057b: 	jbe	.Ltmp1127 # Offset: 1403
    00000581: 	movl	$0x13, %edx
    00000586: 	leaq	DATAat0x3222c(%rip), %rsi
    0000058d: 	movq	%rbp, %rdi
    00000590: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1424
    00000595: 	movq	0x58(%rsp), %rdx
    0000059a: 	movq	0x50(%rsp), %rsi
    0000059f: 	movq	%rbp, %rdi
    000005a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1442
    000005a7: 	movq	%rbx, 0x90(%rsp)
    000005af: 	movq	(%rax), %rcx
    000005b2: 	leaq	0x10(%rax), %rdx
    000005b6: 	cmpq	%rdx, %rcx
    000005b9: 	je	.Ltmp1128 # Offset: 1465
    000005bf: 	movq	%rcx, 0x90(%rsp)
    000005c7: 	movq	0x10(%rax), %rcx
    000005cb: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1194:
    000005d3: 	movq	0x8(%rax), %rcx
    000005d7: 	movq	%r14, %r8
    000005da: 	movq	%r13, %rsi
    000005dd: 	movq	%r15, %rdi
    000005e0: 	movq	%rcx, 0x98(%rsp)
    000005e8: 	leaq	_Z14inner_product4IPKllET0_T_S3_m(%rip), %rcx
    000005ef: 	movq	%rdx, (%rax)
    000005f2: 	movl	$0x1f40, %edx
    000005f7: 	movq	$0x0, 0x8(%rax)
    000005ff: 	movb	$0x0, 0x10(%rax)
    00000603: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1539
    00000608: 	movq	0x90(%rsp), %rdi
    00000610: 	cmpq	%rbx, %rdi
    00000613: 	je	.Ltmp1129 # Offset: 1555
    00000615: 	movq	0xa0(%rsp), %rax
    0000061d: 	leaq	0x1(%rax), %rsi
    00000621: 	callq	_ZdlPvm@PLT # Offset: 1569
.Ltmp1129:
    00000626: 	movq	0x70(%rsp), %rdi
    0000062b: 	cmpq	%r12, %rdi
    0000062e: 	je	.Ltmp1130 # Offset: 1582
    00000630: 	movq	0x80(%rsp), %rax
    00000638: 	leaq	0x1(%rax), %rsi
    0000063c: 	callq	_ZdlPvm@PLT # Offset: 1596
.Ltmp1130:
    00000641: 	movq	0x8(%rsp), %rsi
    00000646: 	leaq	DATAat0x32240(%rip), %rdx
    0000064d: 	movq	%rbp, %rdi
    00000650: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1616
    00000655: 	movq	0x58(%rsp), %rdx
    0000065a: 	movq	0x50(%rsp), %rsi
    0000065f: 	movq	%rbp, %rdi
    00000662: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1634
    00000667: 	movq	%rbx, 0x90(%rsp)
    0000066f: 	movq	(%rax), %rcx
    00000672: 	leaq	0x10(%rax), %rdx
    00000676: 	cmpq	%rdx, %rcx
    00000679: 	je	.Ltmp1131 # Offset: 1657
    0000067f: 	movq	%rcx, 0x90(%rsp)
    00000687: 	movq	0x10(%rax), %rcx
    0000068b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1190:
    00000693: 	movq	0x8(%rax), %rcx
    00000697: 	movq	%r14, %r8
    0000069a: 	movq	%r13, %rsi
    0000069d: 	movq	%r15, %rdi
    000006a0: 	movq	%rcx, 0x98(%rsp)
    000006a8: 	leaq	_Z14inner_product5IPKllET0_T_S3_m(%rip), %rcx
    000006af: 	movq	%rdx, (%rax)
    000006b2: 	movl	$0x1f40, %edx
    000006b7: 	movq	$0x0, 0x8(%rax)
    000006bf: 	movb	$0x0, 0x10(%rax)
    000006c3: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1731
    000006c8: 	movq	0x90(%rsp), %rdi
    000006d0: 	cmpq	%rbx, %rdi
    000006d3: 	je	.Ltmp1132 # Offset: 1747
    000006d5: 	movq	0xa0(%rsp), %rax
    000006dd: 	leaq	0x1(%rax), %rsi
    000006e1: 	callq	_ZdlPvm@PLT # Offset: 1761
.Ltmp1132:
    000006e6: 	movq	0x70(%rsp), %rdi
    000006eb: 	cmpq	%r12, %rdi
    000006ee: 	je	.Ltmp1133 # Offset: 1774
    000006f0: 	movq	0x80(%rsp), %rax
    000006f8: 	leaq	0x1(%rax), %rsi
    000006fc: 	callq	_ZdlPvm@PLT # Offset: 1788
.Ltmp1133:
    00000701: 	movq	0x50(%rsp), %rdx
    00000706: 	movq	0x58(%rsp), %rcx
    0000070b: 	movq	%r12, 0x70(%rsp)
    00000710: 	movq	%rdx, %rax
    00000713: 	movq	%rdx, 0x28(%rsp)
    00000718: 	addq	%rcx, %rax
    0000071b: 	movq	%rcx, 0x10(%rsp)
    00000720: 	je	.Ltmp1134 # Offset: 1824
    00000722: 	testq	%rdx, %rdx
    00000725: 	je	.Ltmp1135 # Offset: 1829
.Ltmp1134:
    0000072b: 	movq	0x10(%rsp), %rax
    00000730: 	movq	%rax, 0x30(%rsp)
    00000735: 	cmpq	$0xf, %rax
    00000739: 	ja	.Ltmp1136 # Offset: 1849
    0000073f: 	cmpq	$0x1, 0x10(%rsp)
    00000745: 	jne	.Ltmp1137 # Offset: 1861
    0000074b: 	movq	0x28(%rsp), %rax
    00000750: 	movzbl	(%rax), %eax
    00000753: 	movb	%al, 0x80(%rsp)
    0000075a: 	movq	%r12, %rax
.Ltmp1177:
    0000075d: 	movq	0x10(%rsp), %rsi
    00000762: 	movq	%rsi, 0x78(%rsp)
    00000767: 	movb	$0x0, (%rax,%rsi)
    0000076b: 	movabsq	$0x3fffffffffffffff, %rax
    00000775: 	subq	0x78(%rsp), %rax
    0000077a: 	cmpq	$0x12, %rax
    0000077e: 	jbe	.Ltmp1138 # Offset: 1918
    00000784: 	movl	$0x13, %edx
    00000789: 	leaq	DATAat0x32254(%rip), %rsi
    00000790: 	movq	%rbp, %rdi
    00000793: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1939
    00000798: 	movq	0x58(%rsp), %rdx
    0000079d: 	movq	0x50(%rsp), %rsi
    000007a2: 	movq	%rbp, %rdi
    000007a5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1957
    000007aa: 	movq	%rbx, 0x90(%rsp)
    000007b2: 	movq	(%rax), %rcx
    000007b5: 	leaq	0x10(%rax), %rdx
    000007b9: 	cmpq	%rdx, %rcx
    000007bc: 	je	.Ltmp1139 # Offset: 1980
    000007c2: 	movq	%rcx, 0x90(%rsp)
    000007ca: 	movq	0x10(%rax), %rcx
    000007ce: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1193:
    000007d6: 	movq	0x8(%rax), %rcx
    000007da: 	movq	%r14, %r8
    000007dd: 	movq	%r13, %rsi
    000007e0: 	movq	%r15, %rdi
    000007e3: 	movq	%rcx, 0x98(%rsp)
    000007eb: 	leaq	_Z14inner_product6IPKllET0_T_S3_m(%rip), %rcx
    000007f2: 	movq	%rdx, (%rax)
    000007f5: 	movl	$0x1f40, %edx
    000007fa: 	movq	$0x0, 0x8(%rax)
    00000802: 	movb	$0x0, 0x10(%rax)
    00000806: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2054
    0000080b: 	movq	0x90(%rsp), %rdi
    00000813: 	cmpq	%rbx, %rdi
    00000816: 	je	.Ltmp1140 # Offset: 2070
    00000818: 	movq	0xa0(%rsp), %rax
    00000820: 	leaq	0x1(%rax), %rsi
    00000824: 	callq	_ZdlPvm@PLT # Offset: 2084
.Ltmp1140:
    00000829: 	movq	0x70(%rsp), %rdi
    0000082e: 	cmpq	%r12, %rdi
    00000831: 	je	.Ltmp1141 # Offset: 2097
    00000833: 	movq	0x80(%rsp), %rax
    0000083b: 	leaq	0x1(%rax), %rsi
    0000083f: 	callq	_ZdlPvm@PLT # Offset: 2111
.Ltmp1141:
    00000844: 	movq	0x50(%rsp), %rcx
    00000849: 	movq	0x58(%rsp), %rdx
    0000084e: 	movq	%r12, 0x70(%rsp)
    00000853: 	movq	%rcx, %rax
    00000856: 	movq	%rcx, 0x28(%rsp)
    0000085b: 	addq	%rdx, %rax
    0000085e: 	movq	%rdx, 0x10(%rsp)
    00000863: 	je	.Ltmp1142 # Offset: 2147
    00000865: 	testq	%rcx, %rcx
    00000868: 	je	.Ltmp1143 # Offset: 2152
.Ltmp1142:
    0000086e: 	movq	0x10(%rsp), %rax
    00000873: 	movq	%rax, 0x30(%rsp)
    00000878: 	cmpq	$0xf, %rax
    0000087c: 	ja	.Ltmp1144 # Offset: 2172
    00000882: 	cmpq	$0x1, 0x10(%rsp)
    00000888: 	jne	.Ltmp1145 # Offset: 2184
    0000088e: 	movq	0x28(%rsp), %rax
    00000893: 	movzbl	(%rax), %eax
    00000896: 	movb	%al, 0x80(%rsp)
    0000089d: 	movq	%r12, %rax
.Ltmp1183:
    000008a0: 	movq	0x10(%rsp), %rcx
    000008a5: 	movq	%rcx, 0x78(%rsp)
    000008aa: 	movb	$0x0, (%rax,%rcx)
    000008ae: 	movabsq	$0x3fffffffffffffff, %rax
    000008b8: 	subq	0x78(%rsp), %rax
    000008bd: 	cmpq	$0x12, %rax
    000008c1: 	jbe	.Ltmp1146 # Offset: 2241
    000008c7: 	movl	$0x13, %edx
    000008cc: 	leaq	DATAat0x32268(%rip), %rsi
    000008d3: 	movq	%rbp, %rdi
    000008d6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2262
    000008db: 	movq	0x58(%rsp), %rdx
    000008e0: 	movq	0x50(%rsp), %rsi
    000008e5: 	movq	%rbp, %rdi
    000008e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2280
    000008ed: 	movq	%rbx, 0x90(%rsp)
    000008f5: 	movq	(%rax), %rcx
    000008f8: 	leaq	0x10(%rax), %rdx
    000008fc: 	cmpq	%rdx, %rcx
    000008ff: 	je	.Ltmp1147 # Offset: 2303
    00000905: 	movq	%rcx, 0x90(%rsp)
    0000090d: 	movq	0x10(%rax), %rcx
    00000911: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1196:
    00000919: 	movq	0x8(%rax), %rcx
    0000091d: 	movq	%r14, %r8
    00000920: 	movq	%r13, %rsi
    00000923: 	movq	%r15, %rdi
    00000926: 	movq	%rcx, 0x98(%rsp)
    0000092e: 	leaq	_Z14inner_product7IPKllET0_T_S3_m(%rip), %rcx
    00000935: 	movq	%rdx, (%rax)
    00000938: 	movl	$0x1f40, %edx
    0000093d: 	movq	$0x0, 0x8(%rax)
    00000945: 	movb	$0x0, 0x10(%rax)
    00000949: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2377
    0000094e: 	movq	0x90(%rsp), %rdi
    00000956: 	cmpq	%rbx, %rdi
    00000959: 	je	.Ltmp1148 # Offset: 2393
    0000095b: 	movq	0xa0(%rsp), %rax
    00000963: 	leaq	0x1(%rax), %rsi
    00000967: 	callq	_ZdlPvm@PLT # Offset: 2407
.Ltmp1148:
    0000096c: 	movq	0x70(%rsp), %rdi
    00000971: 	cmpq	%r12, %rdi
    00000974: 	je	.Ltmp1149 # Offset: 2420
    00000976: 	movq	0x80(%rsp), %rax
    0000097e: 	leaq	0x1(%rax), %rsi
    00000982: 	callq	_ZdlPvm@PLT # Offset: 2434
.Ltmp1149:
    00000987: 	movq	0x8(%rsp), %rsi
    0000098c: 	leaq	DATAat0x3227c(%rip), %rdx
    00000993: 	movq	%rbp, %rdi
    00000996: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2454
    0000099b: 	movq	0x58(%rsp), %rdx
    000009a0: 	movq	0x50(%rsp), %rsi
    000009a5: 	movq	%rbp, %rdi
    000009a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2472
    000009ad: 	movq	%rbx, 0x90(%rsp)
    000009b5: 	movq	(%rax), %rcx
    000009b8: 	leaq	0x10(%rax), %rdx
    000009bc: 	cmpq	%rdx, %rcx
    000009bf: 	je	.Ltmp1150 # Offset: 2495
    000009c5: 	movq	%rcx, 0x90(%rsp)
    000009cd: 	movq	0x10(%rax), %rcx
    000009d1: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1195:
    000009d9: 	movq	0x8(%rax), %rcx
    000009dd: 	movq	%r14, %r8
    000009e0: 	movq	%r13, %rsi
    000009e3: 	movq	%r15, %rdi
    000009e6: 	movq	%rcx, 0x98(%rsp)
    000009ee: 	leaq	_Z14inner_product8IPKllET0_T_S3_m(%rip), %rcx
    000009f5: 	movq	%rdx, (%rax)
    000009f8: 	movl	$0x1f40, %edx
    000009fd: 	movq	$0x0, 0x8(%rax)
    00000a05: 	movb	$0x0, 0x10(%rax)
    00000a09: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2569
    00000a0e: 	movq	0x90(%rsp), %rdi
    00000a16: 	cmpq	%rbx, %rdi
    00000a19: 	je	.Ltmp1151 # Offset: 2585
    00000a1b: 	movq	0xa0(%rsp), %rax
    00000a23: 	leaq	0x1(%rax), %rsi
    00000a27: 	callq	_ZdlPvm@PLT # Offset: 2599
.Ltmp1151:
    00000a2c: 	movq	0x70(%rsp), %rdi
    00000a31: 	cmpq	%r12, %rdi
    00000a34: 	je	.Ltmp1152 # Offset: 2612
    00000a36: 	movq	0x80(%rsp), %rax
    00000a3e: 	leaq	0x1(%rax), %rsi
    00000a42: 	callq	_ZdlPvm@PLT # Offset: 2626
.Ltmp1152:
    00000a47: 	movq	0x50(%rsp), %rsi
    00000a4c: 	movq	0x58(%rsp), %rdi
    00000a51: 	movq	%r12, 0x70(%rsp)
    00000a56: 	movq	%rsi, %rax
    00000a59: 	movq	%rsi, 0x28(%rsp)
    00000a5e: 	addq	%rdi, %rax
    00000a61: 	movq	%rdi, 0x10(%rsp)
    00000a66: 	je	.Ltmp1153 # Offset: 2662
    00000a68: 	testq	%rsi, %rsi
    00000a6b: 	je	.Ltmp1154 # Offset: 2667
.Ltmp1153:
    00000a71: 	movq	0x10(%rsp), %rax
    00000a76: 	movq	%rax, 0x30(%rsp)
    00000a7b: 	cmpq	$0xf, %rax
    00000a7f: 	ja	.Ltmp1155 # Offset: 2687
    00000a85: 	cmpq	$0x1, 0x10(%rsp)
    00000a8b: 	jne	.Ltmp1156 # Offset: 2699
    00000a91: 	movq	0x28(%rsp), %rax
    00000a96: 	movzbl	(%rax), %eax
    00000a99: 	movb	%al, 0x80(%rsp)
    00000aa0: 	movq	%r12, %rax
.Ltmp1181:
    00000aa3: 	movq	0x10(%rsp), %rsi
    00000aa8: 	movq	%rsi, 0x78(%rsp)
    00000aad: 	movb	$0x0, (%rax,%rsi)
    00000ab1: 	movabsq	$0x3fffffffffffffff, %rax
    00000abb: 	subq	0x78(%rsp), %rax
    00000ac0: 	cmpq	$0x12, %rax
    00000ac4: 	jbe	.Ltmp1157 # Offset: 2756
    00000aca: 	movl	$0x13, %edx
    00000acf: 	leaq	DATAat0x32290(%rip), %rsi
    00000ad6: 	movq	%rbp, %rdi
    00000ad9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2777
    00000ade: 	movq	0x58(%rsp), %rdx
    00000ae3: 	movq	0x50(%rsp), %rsi
    00000ae8: 	movq	%rbp, %rdi
    00000aeb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2795
    00000af0: 	movq	%rbx, 0x90(%rsp)
    00000af8: 	movq	(%rax), %rcx
    00000afb: 	leaq	0x10(%rax), %rdx
    00000aff: 	cmpq	%rdx, %rcx
    00000b02: 	je	.Ltmp1158 # Offset: 2818
    00000b08: 	movq	%rcx, 0x90(%rsp)
    00000b10: 	movq	0x10(%rax), %rcx
    00000b14: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1192:
    00000b1c: 	movq	0x8(%rax), %rcx
    00000b20: 	movq	%r14, %r8
    00000b23: 	movq	%r13, %rsi
    00000b26: 	movq	%r15, %rdi
    00000b29: 	movq	%rcx, 0x98(%rsp)
    00000b31: 	leaq	_Z14inner_product9IPKllET0_T_S3_m(%rip), %rcx
    00000b38: 	movq	%rdx, (%rax)
    00000b3b: 	movl	$0x1f40, %edx
    00000b40: 	movq	$0x0, 0x8(%rax)
    00000b48: 	movb	$0x0, 0x10(%rax)
    00000b4c: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2892
    00000b51: 	movq	0x90(%rsp), %rdi
    00000b59: 	cmpq	%rbx, %rdi
    00000b5c: 	je	.Ltmp1159 # Offset: 2908
    00000b5e: 	movq	0xa0(%rsp), %rax
    00000b66: 	leaq	0x1(%rax), %rsi
    00000b6a: 	callq	_ZdlPvm@PLT # Offset: 2922
.Ltmp1159:
    00000b6f: 	movq	0x70(%rsp), %rdi
    00000b74: 	cmpq	%r12, %rdi
    00000b77: 	je	.Ltmp1160 # Offset: 2935
    00000b79: 	movq	0x80(%rsp), %rax
    00000b81: 	leaq	0x1(%rax), %rsi
    00000b85: 	callq	_ZdlPvm@PLT # Offset: 2949
.Ltmp1160:
    00000b8a: 	movq	0x8(%rsp), %rsi
    00000b8f: 	leaq	DATAat0x322a4(%rip), %rdx
    00000b96: 	movq	%rbp, %rdi
    00000b99: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2969
    00000b9e: 	movq	0x58(%rsp), %rdx
    00000ba3: 	movq	0x50(%rsp), %rsi
    00000ba8: 	movq	%rbp, %rdi
    00000bab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2987
    00000bb0: 	movq	%rbx, 0x90(%rsp)
    00000bb8: 	movq	(%rax), %rcx
    00000bbb: 	leaq	0x10(%rax), %rdx
    00000bbf: 	cmpq	%rdx, %rcx
    00000bc2: 	je	.Ltmp1161 # Offset: 3010
    00000bc8: 	movq	%rcx, 0x90(%rsp)
    00000bd0: 	movq	0x10(%rax), %rcx
    00000bd4: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1191:
    00000bdc: 	movq	0x8(%rax), %rcx
    00000be0: 	movq	%r14, %r8
    00000be3: 	movq	%r13, %rsi
    00000be6: 	movq	%r15, %rdi
    00000be9: 	movq	%rcx, 0x98(%rsp)
    00000bf1: 	leaq	_Z15inner_product10IPKllET0_T_S3_m(%rip), %rcx
    00000bf8: 	movq	%rdx, (%rax)
    00000bfb: 	movl	$0x1f40, %edx
    00000c00: 	movq	$0x0, 0x8(%rax)
    00000c08: 	movb	$0x0, 0x10(%rax)
    00000c0c: 	callq	_Z18test_inner_productIlPFlPKlS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3084
    00000c11: 	movq	0x90(%rsp), %rdi
    00000c19: 	cmpq	%rbx, %rdi
    00000c1c: 	je	.Ltmp1162 # Offset: 3100
    00000c1e: 	movq	0xa0(%rsp), %rax
    00000c26: 	leaq	0x1(%rax), %rsi
    00000c2a: 	callq	_ZdlPvm@PLT # Offset: 3114
.Ltmp1162:
    00000c2f: 	movq	0x70(%rsp), %rdi
    00000c34: 	cmpq	%r12, %rdi
    00000c37: 	je	.Ltmp1163 # Offset: 3127
    00000c39: 	movq	0x80(%rsp), %rax
    00000c41: 	leaq	0x1(%rax), %rsi
    00000c45: 	callq	_ZdlPvm@PLT # Offset: 3141
.Ltmp1163:
    00000c4a: 	movq	0x50(%rsp), %rbp
    00000c4f: 	movq	0x58(%rsp), %r12
    00000c54: 	movq	%rbx, 0x90(%rsp)
    00000c5c: 	movq	%rbp, %rax
    00000c5f: 	addq	%r12, %rax
    00000c62: 	je	.Ltmp1164 # Offset: 3170
    00000c64: 	testq	%rbp, %rbp
    00000c67: 	je	.Ltmp1165 # Offset: 3175
.Ltmp1164:
    00000c6d: 	movq	%r12, 0x30(%rsp)
    00000c72: 	cmpq	$0xf, %r12
    00000c76: 	ja	.Ltmp1166 # Offset: 3190
    00000c7c: 	cmpq	$0x1, %r12
    00000c80: 	jne	.Ltmp1167 # Offset: 3200
    00000c86: 	movzbl	(%rbp), %eax
    00000c8a: 	movb	%al, 0xa0(%rsp)
    00000c91: 	movq	%rbx, %rax
.Ltmp1185:
    00000c94: 	movq	%r12, 0x98(%rsp)
    00000c9c: 	movb	$0x0, (%rax,%r12)
    00000ca1: 	movabsq	$0x3fffffffffffffff, %rax
    00000cab: 	subq	0x98(%rsp), %rax
    00000cb3: 	cmpq	$0xd, %rax
    00000cb7: 	jbe	.Ltmp1168 # Offset: 3255
    00000cbd: 	movl	$0xe, %edx
    00000cc2: 	leaq	DATAat0x322b9(%rip), %rsi
    00000cc9: 	movq	%r14, %rdi
    00000ccc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3276
    00000cd1: 	movl	iterations(%rip), %edx
    00000cd7: 	xorl	%r8d, %r8d
    00000cda: 	xorl	%ecx, %ecx
    00000cdc: 	movl	$0x1f40, %esi
    00000ce1: 	movq	0x90(%rsp), %rdi
    00000ce9: 	callq	_Z9summarizePKciiii # Offset: 3305
    00000cee: 	movq	0x90(%rsp), %rdi
    00000cf6: 	cmpq	%rbx, %rdi
    00000cf9: 	je	.Ltmp1169 # Offset: 3321
    00000cfb: 	movq	0xa0(%rsp), %rax
    00000d03: 	leaq	0x1(%rax), %rsi
    00000d07: 	callq	_ZdlPvm@PLT # Offset: 3335
.Ltmp1169:
    00000d0c: 	movq	0x50(%rsp), %rdi
    00000d11: 	cmpq	0x20(%rsp), %rdi
    00000d16: 	je	.Ltmp1170 # Offset: 3350
    00000d18: 	movq	0x60(%rsp), %rax
    00000d1d: 	leaq	0x1(%rax), %rsi
    00000d21: 	callq	_ZdlPvm@PLT # Offset: 3361
.Ltmp1170:
    00000d26: 	movq	0x1f4b8(%rsp), %rax
    00000d2e: 	subq	%fs:0x28, %rax
    00000d37: 	jne	.Ltmp1171 # Offset: 3383
    00000d3d: 	addq	$0x1f4c8, %rsp
    00000d44: 	popq	%rbx
    00000d45: 	popq	%rbp
    00000d46: 	popq	%r12
    00000d48: 	popq	%r13
    00000d4a: 	popq	%r14
    00000d4c: 	popq	%r15
    00000d4e: 	retq # Offset: 3406
    00000d4f: 	nop # Size: 1
.Ltmp1104:
    00000d50: 	testq	%r14, %r14
    00000d53: 	jne	.Ltmp1172 # Offset: 3411
    00000d59: 	movq	%r12, %rax
    00000d5c: 	jmp	.Ltmp1173 # Offset: 3420
    00000d61: 	nopl	(%rax) # Size: 7
.Ltmp1118:
    00000d68: 	cmpq	$0x0, 0x10(%rsp)
    00000d6e: 	jne	.Ltmp1174 # Offset: 3438
    00000d74: 	movq	%r12, %rax
    00000d77: 	jmp	.Ltmp1175 # Offset: 3447
    00000d7c: 	nopl	(%rax) # Size: 4
.Ltmp1137:
    00000d80: 	cmpq	$0x0, 0x10(%rsp)
    00000d86: 	jne	.Ltmp1176 # Offset: 3462
    00000d8c: 	movq	%r12, %rax
    00000d8f: 	jmp	.Ltmp1177 # Offset: 3471
    00000d94: 	nopl	(%rax) # Size: 4
.Ltmp1126:
    00000d98: 	cmpq	$0x0, 0x10(%rsp)
    00000d9e: 	jne	.Ltmp1178 # Offset: 3486
    00000da4: 	movq	%r12, %rax
    00000da7: 	jmp	.Ltmp1179 # Offset: 3495
    00000dac: 	nopl	(%rax) # Size: 4
.Ltmp1156:
    00000db0: 	cmpq	$0x0, 0x10(%rsp)
    00000db6: 	jne	.Ltmp1180 # Offset: 3510
    00000dbc: 	movq	%r12, %rax
    00000dbf: 	jmp	.Ltmp1181 # Offset: 3519
    00000dc4: 	nopl	(%rax) # Size: 4
.Ltmp1145:
    00000dc8: 	cmpq	$0x0, 0x10(%rsp)
    00000dce: 	jne	.Ltmp1182 # Offset: 3534
    00000dd4: 	movq	%r12, %rax
    00000dd7: 	jmp	.Ltmp1183 # Offset: 3543
    00000ddc: 	nopl	(%rax) # Size: 4
.Ltmp1167:
    00000de0: 	testq	%r12, %r12
    00000de3: 	jne	.Ltmp1184 # Offset: 3555
    00000de9: 	movq	%rbx, %rax
    00000dec: 	jmp	.Ltmp1185 # Offset: 3564
    00000df1: 	nopl	(%rax) # Size: 7
.Ltmp1103:
    00000df8: 	movq	0x18(%rsp), %rsi
    00000dfd: 	leaq	0x70(%rsp), %rdi
    00000e02: 	xorl	%edx, %edx
    00000e04: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3588
    00000e09: 	movq	%rax, 0x70(%rsp)
    00000e0e: 	movq	%rax, %rdi
    00000e11: 	movq	0x30(%rsp), %rax
    00000e16: 	movq	%rax, 0x80(%rsp)
.Ltmp1197:
    00000e1e: 	movq	%r14, %rdx
    00000e21: 	movq	%rbp, %rsi
    00000e24: 	callq	memcpy@PLT # Offset: 3620
    00000e29: 	movq	0x30(%rsp), %r14
    00000e2e: 	movq	0x70(%rsp), %rax
    00000e33: 	jmp	.Ltmp1173 # Offset: 3635
    00000e38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1125:
    00000e40: 	movq	0x18(%rsp), %rsi
    00000e45: 	xorl	%edx, %edx
    00000e47: 	movq	%rbp, %rdi
    00000e4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3658
    00000e4f: 	movq	%rax, 0x70(%rsp)
    00000e54: 	movq	%rax, %rdi
    00000e57: 	movq	0x30(%rsp), %rax
    00000e5c: 	movq	%rax, 0x80(%rsp)
.Ltmp1200:
    00000e64: 	movq	0x10(%rsp), %rdx
    00000e69: 	movq	0x28(%rsp), %rsi
    00000e6e: 	callq	memcpy@PLT # Offset: 3694
    00000e73: 	movq	0x30(%rsp), %rax
    00000e78: 	movq	%rax, 0x10(%rsp)
    00000e7d: 	movq	0x70(%rsp), %rax
    00000e82: 	jmp	.Ltmp1179 # Offset: 3714
    00000e87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1117:
    00000e90: 	movq	0x18(%rsp), %rsi
    00000e95: 	xorl	%edx, %edx
    00000e97: 	movq	%rbp, %rdi
    00000e9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3738
    00000e9f: 	movq	%rax, 0x70(%rsp)
    00000ea4: 	movq	%rax, %rdi
    00000ea7: 	movq	0x30(%rsp), %rax
    00000eac: 	movq	%rax, 0x80(%rsp)
.Ltmp1198:
    00000eb4: 	movq	0x10(%rsp), %rdx
    00000eb9: 	movq	0x28(%rsp), %rsi
    00000ebe: 	callq	memcpy@PLT # Offset: 3774
    00000ec3: 	movq	0x30(%rsp), %rax
    00000ec8: 	movq	%rax, 0x10(%rsp)
    00000ecd: 	movq	0x70(%rsp), %rax
    00000ed2: 	jmp	.Ltmp1175 # Offset: 3794
    00000ed7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1166:
    00000ee0: 	movq	0x18(%rsp), %rsi
    00000ee5: 	xorl	%edx, %edx
    00000ee7: 	movq	%r14, %rdi
    00000eea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3818
    00000eef: 	movq	%rax, 0x90(%rsp)
    00000ef7: 	movq	%rax, %rdi
    00000efa: 	movq	0x30(%rsp), %rax
    00000eff: 	movq	%rax, 0xa0(%rsp)
.Ltmp1203:
    00000f07: 	movq	%r12, %rdx
    00000f0a: 	movq	%rbp, %rsi
    00000f0d: 	callq	memcpy@PLT # Offset: 3853
    00000f12: 	movq	0x30(%rsp), %r12
    00000f17: 	movq	0x90(%rsp), %rax
    00000f1f: 	jmp	.Ltmp1185 # Offset: 3871
    00000f24: 	nopl	(%rax) # Size: 4
.Ltmp1155:
    00000f28: 	movq	0x18(%rsp), %rsi
    00000f2d: 	xorl	%edx, %edx
    00000f2f: 	movq	%rbp, %rdi
    00000f32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3890
    00000f37: 	movq	%rax, 0x70(%rsp)
    00000f3c: 	movq	%rax, %rdi
    00000f3f: 	movq	0x30(%rsp), %rax
    00000f44: 	movq	%rax, 0x80(%rsp)
.Ltmp1201:
    00000f4c: 	movq	0x10(%rsp), %rdx
    00000f51: 	movq	0x28(%rsp), %rsi
    00000f56: 	callq	memcpy@PLT # Offset: 3926
    00000f5b: 	movq	0x30(%rsp), %rax
    00000f60: 	movq	%rax, 0x10(%rsp)
    00000f65: 	movq	0x70(%rsp), %rax
    00000f6a: 	jmp	.Ltmp1181 # Offset: 3946
    00000f6f: 	nop # Size: 1
.Ltmp1144:
    00000f70: 	movq	0x18(%rsp), %rsi
    00000f75: 	xorl	%edx, %edx
    00000f77: 	movq	%rbp, %rdi
    00000f7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3962
    00000f7f: 	movq	%rax, 0x70(%rsp)
    00000f84: 	movq	%rax, %rdi
    00000f87: 	movq	0x30(%rsp), %rax
    00000f8c: 	movq	%rax, 0x80(%rsp)
.Ltmp1202:
    00000f94: 	movq	0x10(%rsp), %rdx
    00000f99: 	movq	0x28(%rsp), %rsi
    00000f9e: 	callq	memcpy@PLT # Offset: 3998
    00000fa3: 	movq	0x30(%rsp), %rax
    00000fa8: 	movq	%rax, 0x10(%rsp)
    00000fad: 	movq	0x70(%rsp), %rax
    00000fb2: 	jmp	.Ltmp1183 # Offset: 4018
    00000fb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1136:
    00000fc0: 	movq	0x18(%rsp), %rsi
    00000fc5: 	xorl	%edx, %edx
    00000fc7: 	movq	%rbp, %rdi
    00000fca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4042
    00000fcf: 	movq	%rax, 0x70(%rsp)
    00000fd4: 	movq	%rax, %rdi
    00000fd7: 	movq	0x30(%rsp), %rax
    00000fdc: 	movq	%rax, 0x80(%rsp)
.Ltmp1199:
    00000fe4: 	movq	0x10(%rsp), %rdx
    00000fe9: 	movq	0x28(%rsp), %rsi
    00000fee: 	callq	memcpy@PLT # Offset: 4078
    00000ff3: 	movq	0x30(%rsp), %rax
    00000ff8: 	movq	%rax, 0x10(%rsp)
    00000ffd: 	movq	0x70(%rsp), %rax
    00001002: 	jmp	.Ltmp1177 # Offset: 4098
    00001007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1120:
    00001010: 	movdqu	0x10(%rax), %xmm6
    00001015: 	movaps	%xmm6, 0xa0(%rsp)
    0000101d: 	jmp	.Ltmp1186 # Offset: 4125
    00001022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1112:
    00001028: 	movdqu	0x10(%rax), %xmm5
    0000102d: 	movaps	%xmm5, 0xa0(%rsp)
    00001035: 	jmp	.Ltmp1187 # Offset: 4149
    0000103a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1109:
    00001040: 	movdqu	0x10(%rax), %xmm4
    00001045: 	movaps	%xmm4, 0xa0(%rsp)
    0000104d: 	jmp	.Ltmp1188 # Offset: 4173
    00001052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1106:
    00001058: 	movdqu	0x10(%rax), %xmm3
    0000105d: 	movaps	%xmm3, 0xa0(%rsp)
    00001065: 	jmp	.Ltmp1189 # Offset: 4197
    0000106a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1131:
    00001070: 	movdqu	0x10(%rax), %xmm7
    00001075: 	movaps	%xmm7, 0xa0(%rsp)
    0000107d: 	jmp	.Ltmp1190 # Offset: 4221
    00001082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1161:
    00001088: 	movdqu	0x10(%rax), %xmm7
    0000108d: 	movaps	%xmm7, 0xa0(%rsp)
    00001095: 	jmp	.Ltmp1191 # Offset: 4245
    0000109a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1158:
    000010a0: 	movdqu	0x10(%rax), %xmm6
    000010a5: 	movaps	%xmm6, 0xa0(%rsp)
    000010ad: 	jmp	.Ltmp1192 # Offset: 4269
    000010b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1139:
    000010b8: 	movdqu	0x10(%rax), %xmm3
    000010bd: 	movaps	%xmm3, 0xa0(%rsp)
    000010c5: 	jmp	.Ltmp1193 # Offset: 4293
    000010ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1128:
    000010d0: 	movdqu	0x10(%rax), %xmm7
    000010d5: 	movaps	%xmm7, 0xa0(%rsp)
    000010dd: 	jmp	.Ltmp1194 # Offset: 4317
    000010e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1150:
    000010e8: 	movdqu	0x10(%rax), %xmm5
    000010ed: 	movaps	%xmm5, 0xa0(%rsp)
    000010f5: 	jmp	.Ltmp1195 # Offset: 4341
    000010fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1147:
    00001100: 	movdqu	0x10(%rax), %xmm4
    00001105: 	movaps	%xmm4, 0xa0(%rsp)
    0000110d: 	jmp	.Ltmp1196 # Offset: 4365
.Ltmp1105:
    00001112: 	leaq	DATAat0x32182(%rip), %rdi
    00001119: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4377
.Ltmp1116:
    0000111e: 	leaq	DATAat0x32158(%rip), %rdi
    00001125: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4389
.Ltmp1119:
    0000112a: 	leaq	DATAat0x32182(%rip), %rdi
    00001131: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4401
.Ltmp1124:
    00001136: 	leaq	DATAat0x32158(%rip), %rdi
    0000113d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4413
.Ltmp1127:
    00001142: 	leaq	DATAat0x32182(%rip), %rdi
    00001149: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4425
.Ltmp1135:
    0000114e: 	leaq	DATAat0x32158(%rip), %rdi
    00001155: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4437
.Ltmp1138:
    0000115a: 	leaq	DATAat0x32182(%rip), %rdi
    00001161: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4449
.Ltmp1143:
    00001166: 	leaq	DATAat0x32158(%rip), %rdi
    0000116d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4461
.Ltmp1146:
    00001172: 	leaq	DATAat0x32182(%rip), %rdi
    00001179: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4473
.Ltmp1154:
    0000117e: 	leaq	DATAat0x32158(%rip), %rdi
    00001185: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4485
.Ltmp1157:
    0000118a: 	leaq	DATAat0x32182(%rip), %rdi
    00001191: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4497
.Ltmp1165:
    00001196: 	leaq	DATAat0x32158(%rip), %rdi
    0000119d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4509
.Ltmp1168:
    000011a2: 	leaq	DATAat0x32182(%rip), %rdi
    000011a9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4521
.Ltmp1171:
    000011ae: 	callq	__stack_chk_fail@PLT # Offset: 4526
.Ltmp1172:
    000011b3: 	movq	%r12, %rdi
    000011b6: 	jmp	.Ltmp1197 # Offset: 4534
.Ltmp1174:
    000011bb: 	movq	%r12, %rdi
    000011be: 	jmp	.Ltmp1198 # Offset: 4542
.Ltmp1176:
    000011c3: 	movq	%r12, %rdi
    000011c6: 	jmp	.Ltmp1199 # Offset: 4550
.Ltmp1178:
    000011cb: 	movq	%r12, %rdi
    000011ce: 	jmp	.Ltmp1200 # Offset: 4558
.Ltmp1180:
    000011d3: 	movq	%r12, %rdi
    000011d6: 	jmp	.Ltmp1201 # Offset: 4566
.Ltmp1182:
    000011db: 	movq	%r12, %rdi
    000011de: 	jmp	.Ltmp1202 # Offset: 4574
.Ltmp1184:
    000011e3: 	movq	%rbx, %rdi
    000011e6: 	jmp	.Ltmp1203 # Offset: 4582
.Ltmp1102:
    000011eb: 	leaq	DATAat0x32158(%rip), %rdi
    000011f2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4594
    000011f7: 	endbr64
.Ltmp1209:
    000011fb: 	movq	%rax, %rbp
    000011fe: 	jmp	.Ltmp1204 # Offset: 4606
    00001200: 	endbr64
.Ltmp1206:
    00001204: 	movq	%rax, %rbp
    00001207: 	jmp	.Ltmp1205 # Offset: 4615
    00001209: 	endbr64
    0000120d: 	jmp	.Ltmp1206 # Offset: 4621
.Ltmp1204:
    0000120f: 	movq	0x90(%rsp), %rdi
    00001217: 	cmpq	%rbx, %rdi
    0000121a: 	je	.Ltmp1205 # Offset: 4634
    0000121c: 	movq	0xa0(%rsp), %rax
    00001224: 	leaq	0x1(%rax), %rsi
    00001228: 	callq	_ZdlPvm@PLT # Offset: 4648
.Ltmp1205:
    0000122d: 	movq	0x70(%rsp), %rdi
    00001232: 	cmpq	%r12, %rdi
    00001235: 	je	.Ltmp1207 # Offset: 4661
    00001237: 	movq	0x80(%rsp), %rax
    0000123f: 	leaq	0x1(%rax), %rsi
    00001243: 	callq	_ZdlPvm@PLT # Offset: 4675
.Ltmp1207:
    00001248: 	movq	0x50(%rsp), %rdi
    0000124d: 	cmpq	0x20(%rsp), %rdi
    00001252: 	je	.Ltmp1208 # Offset: 4690
    00001254: 	movq	0x60(%rsp), %rax
    00001259: 	leaq	0x1(%rax), %rsi
    0000125d: 	callq	_ZdlPvm@PLT # Offset: 4701
.Ltmp1208:
    00001262: 	movq	%rbp, %rdi
    00001265: 	callq	_Unwind_Resume@PLT # Offset: 4709
    0000126a: 	endbr64
    0000126e: 	jmp	.Ltmp1206 # Offset: 4718
    00001270: 	endbr64
    00001274: 	jmp	.Ltmp1209 # Offset: 4724
    00001276: 	endbr64
    0000127a: 	jmp	.Ltmp1206 # Offset: 4730
    0000127c: 	endbr64
    00001280: 	jmp	.Ltmp1209 # Offset: 4736
    00001285: 	endbr64
    00001289: 	jmp	.Ltmp1206 # Offset: 4745
    0000128e: 	endbr64
    00001292: 	jmp	.Ltmp1209 # Offset: 4754
    00001297: 	endbr64
    0000129b: 	jmp	.Ltmp1206 # Offset: 4763
    000012a0: 	endbr64
    000012a4: 	jmp	.Ltmp1209 # Offset: 4772
    000012a9: 	endbr64
    000012ad: 	jmp	.Ltmp1206 # Offset: 4781
    000012b2: 	endbr64
    000012b6: 	jmp	.Ltmp1209 # Offset: 4790
    000012bb: 	endbr64
    000012bf: 	jmp	.Ltmp1206 # Offset: 4799
    000012c4: 	endbr64
    000012c8: 	jmp	.Ltmp1206 # Offset: 4808
    000012cd: 	endbr64
    000012d1: 	jmp	.Ltmp1206 # Offset: 4817
    000012d6: 	endbr64
    000012da: 	jmp	.Ltmp1209 # Offset: 4826
    000012df: 	endbr64
    000012e3: 	jmp	.Ltmp1206 # Offset: 4835
    000012e8: 	endbr64
    000012ec: 	jmp	.Ltmp1206 # Offset: 4844
    000012f1: 	endbr64
    000012f5: 	jmp	.Ltmp1206 # Offset: 4853
    000012fa: 	endbr64
    000012fe: 	jmp	.Ltmp1209 # Offset: 4862
    00001303: 	endbr64
    00001307: 	jmp	.Ltmp1206 # Offset: 4871
    0000130c: 	endbr64
    00001310: 	jmp	.Ltmp1209 # Offset: 4880
    00001315: 	endbr64
    00001319: 	jmp	.Ltmp1209 # Offset: 4889
    0000131e: 	endbr64
    00001322: 	jmp	.Ltmp1206 # Offset: 4898
    00001327: 	endbr64
.Ltmp1211:
    0000132b: 	movq	%rax, %rbp
    0000132e: 	jmp	.Ltmp1210 # Offset: 4910
    00001330: 	endbr64
    00001334: 	jmp	.Ltmp1211 # Offset: 4916
    00001336: 	endbr64
    0000133a: 	jmp	.Ltmp1206 # Offset: 4922
    0000133f: 	endbr64
    00001343: 	jmp	.Ltmp1209 # Offset: 4931
    00001348: 	endbr64
    0000134c: 	movq	%rax, %rbp
    0000134f: 	jmp	.Ltmp1207 # Offset: 4943
    00001354: 	endbr64
    00001358: 	jmp	.Ltmp1206 # Offset: 4952
.Ltmp1210:
    0000135d: 	movq	0x90(%rsp), %rdi
    00001365: 	cmpq	%rbx, %rdi
    00001368: 	je	.Ltmp1207 # Offset: 4968
    0000136e: 	movq	0xa0(%rsp), %rax
    00001376: 	leaq	0x1(%rax), %rsi
    0000137a: 	callq	_ZdlPvm@PLT # Offset: 4986
    0000137f: 	jmp	.Ltmp1207 # Offset: 4991
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIlEvv"

Binary Function "_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x22a10
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x22a10
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1212 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1214:
    00000050: 	movq	%r12, %rdx
    00000053: 	movq	%rbp, %rsi
    00000056: 	movq	%rbx, %rdi
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	pxor	%xmm1, %xmm1
    00000060: 	cvtsi2ssl	init_value(%rip), %xmm1
    00000068: 	mulss	%xmm1, %xmm1
    0000006c: 	mulss	DATAat0x32620(%rip), %xmm1
    00000074: 	subss	%xmm1, %xmm0
    00000078: 	andps	DATAat0x325d0(%rip), %xmm0
    0000007f: 	comiss	DATAat0x32624(%rip), %xmm0
    00000086: 	ja	.Ltmp1213 # Offset: 134
    0000008c: 	addl	$0x1, %r15d
    00000090: 	cmpl	%r15d, iterations(%rip)
    00000097: 	jg	.Ltmp1214 # Offset: 151
.Ltmp1212:
    00000099: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a7: 	subq	$0x20, %rax
    000000ab: 	cmpq	%rax, %rbx
    000000ae: 	je	.Ltmp1215 # Offset: 174
    000000b4: 	leaq	0x10(%rbx), %rdi
    000000b8: 	movq	0x8(%r14), %r12
    000000bc: 	movq	%rdi, (%rbx)
    000000bf: 	movq	(%r14), %rbp
    000000c2: 	movq	%rbp, %rax
    000000c5: 	addq	%r12, %rax
    000000c8: 	je	.Ltmp1216 # Offset: 200
    000000ca: 	testq	%rbp, %rbp
    000000cd: 	je	.Ltmp1217 # Offset: 205
.Ltmp1216:
    000000d3: 	movq	%r12, (%rsp)
    000000d7: 	cmpq	$0xf, %r12
    000000db: 	ja	.Ltmp1218 # Offset: 219
    000000e1: 	cmpq	$0x1, %r12
    000000e5: 	jne	.Ltmp1219 # Offset: 229
    000000eb: 	movzbl	(%rbp), %eax
    000000ef: 	movb	%al, 0x10(%rbx)
.Ltmp1222:
    000000f2: 	movq	%r12, 0x8(%rbx)
    000000f6: 	movb	$0x0, (%rdi,%r12)
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000109: 	addq	$0x20, %rax
    0000010d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000114: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000011b: 	je	.Ltmp1220 # Offset: 283
.Ltmp1223:
    00000121: 	movq	-0x20(%rax), %rbp
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	movq	%rax, end_time(%rip)
    00000131: 	movq	0x8(%rsp), %rdx
    00000136: 	subq	%fs:0x28, %rdx
    0000013f: 	jne	.Ltmp1221 # Offset: 319
    00000145: 	subq	start_time(%rip), %rax
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	movq	%rbp, %rdi
    00000153: 	cvtsi2sd	%rax, %xmm0
    00000158: 	divsd	DATAat0x32600(%rip), %xmm0
    00000160: 	addq	$0x18, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 366
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1213:
    00000178: 	movq	(%r14), %rdx
    0000017b: 	xorl	%eax, %eax
    0000017d: 	leaq	DATAat0x321c8(%rip), %rsi
    00000184: 	addl	$0x1, %r15d
    00000188: 	movl	$0x1, %edi
    0000018d: 	callq	__printf_chk@PLT # Offset: 397
    00000192: 	cmpl	%r15d, iterations(%rip)
    00000199: 	jg	.Ltmp1214 # Offset: 409
    0000019f: 	jmp	.Ltmp1212 # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1218:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	%rsp, %rsi
    000001ae: 	xorl	%edx, %edx
    000001b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 432
    000001b5: 	movq	%rax, (%rbx)
    000001b8: 	movq	%rax, %rdi
    000001bb: 	movq	(%rsp), %rax
    000001bf: 	movq	%rax, 0x10(%rbx)
.Ltmp1224:
    000001c3: 	movq	%r12, %rdx
    000001c6: 	movq	%rbp, %rsi
    000001c9: 	callq	memcpy@PLT # Offset: 457
    000001ce: 	movq	(%rsp), %r12
    000001d2: 	movq	(%rbx), %rdi
    000001d5: 	jmp	.Ltmp1222 # Offset: 469
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1215:
    000001e0: 	movq	%r14, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp1223 # Offset: 516
.Ltmp1220:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp1223 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1219:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1222 # Offset: 547
    00000229: 	jmp	.Ltmp1224 # Offset: 553
.Ltmp1221:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1217:
    00000230: 	leaq	DATAat0x32158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x22c50
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x22c50
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1225 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1227:
    00000050: 	movq	%r12, %rdx
    00000053: 	movq	%rbp, %rsi
    00000056: 	movq	%rbx, %rdi
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	pxor	%xmm1, %xmm1
    00000060: 	cvtsi2sdl	init_value(%rip), %xmm1
    00000068: 	mulsd	%xmm1, %xmm1
    0000006c: 	mulsd	DATAat0x32610(%rip), %xmm1
    00000074: 	subsd	%xmm1, %xmm0
    00000078: 	andpd	DATAat0x325e0(%rip), %xmm0
    00000080: 	comisd	DATAat0x32618(%rip), %xmm0
    00000088: 	ja	.Ltmp1226 # Offset: 136
    0000008e: 	addl	$0x1, %r15d
    00000092: 	cmpl	%r15d, iterations(%rip)
    00000099: 	jg	.Ltmp1227 # Offset: 153
.Ltmp1225:
    0000009b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a9: 	subq	$0x20, %rax
    000000ad: 	cmpq	%rax, %rbx
    000000b0: 	je	.Ltmp1228 # Offset: 176
    000000b6: 	leaq	0x10(%rbx), %rdi
    000000ba: 	movq	0x8(%r14), %r12
    000000be: 	movq	%rdi, (%rbx)
    000000c1: 	movq	(%r14), %rbp
    000000c4: 	movq	%rbp, %rax
    000000c7: 	addq	%r12, %rax
    000000ca: 	je	.Ltmp1229 # Offset: 202
    000000cc: 	testq	%rbp, %rbp
    000000cf: 	je	.Ltmp1230 # Offset: 207
.Ltmp1229:
    000000d5: 	movq	%r12, (%rsp)
    000000d9: 	cmpq	$0xf, %r12
    000000dd: 	ja	.Ltmp1231 # Offset: 221
    000000e3: 	cmpq	$0x1, %r12
    000000e7: 	jne	.Ltmp1232 # Offset: 231
    000000ed: 	movzbl	(%rbp), %eax
    000000f1: 	movb	%al, 0x10(%rbx)
.Ltmp1235:
    000000f4: 	movq	%r12, 0x8(%rbx)
    000000f8: 	movb	$0x0, (%rdi,%r12)
    000000fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000104: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000010b: 	addq	$0x20, %rax
    0000010f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000116: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000011d: 	je	.Ltmp1233 # Offset: 285
.Ltmp1236:
    00000123: 	movq	-0x20(%rax), %rbp
    00000127: 	callq	clock@PLT # Offset: 295
    0000012c: 	movq	%rax, end_time(%rip)
    00000133: 	movq	0x8(%rsp), %rdx
    00000138: 	subq	%fs:0x28, %rdx
    00000141: 	jne	.Ltmp1234 # Offset: 321
    00000147: 	subq	start_time(%rip), %rax
    0000014e: 	pxor	%xmm0, %xmm0
    00000152: 	movq	%rbp, %rdi
    00000155: 	cvtsi2sd	%rax, %xmm0
    0000015a: 	divsd	DATAat0x32600(%rip), %xmm0
    00000162: 	addq	$0x18, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 368
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp1226:
    00000178: 	movq	(%r14), %rdx
    0000017b: 	xorl	%eax, %eax
    0000017d: 	leaq	DATAat0x321c8(%rip), %rsi
    00000184: 	addl	$0x1, %r15d
    00000188: 	movl	$0x1, %edi
    0000018d: 	callq	__printf_chk@PLT # Offset: 397
    00000192: 	cmpl	%r15d, iterations(%rip)
    00000199: 	jg	.Ltmp1227 # Offset: 409
    0000019f: 	jmp	.Ltmp1225 # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1231:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	%rsp, %rsi
    000001ae: 	xorl	%edx, %edx
    000001b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 432
    000001b5: 	movq	%rax, (%rbx)
    000001b8: 	movq	%rax, %rdi
    000001bb: 	movq	(%rsp), %rax
    000001bf: 	movq	%rax, 0x10(%rbx)
.Ltmp1237:
    000001c3: 	movq	%r12, %rdx
    000001c6: 	movq	%rbp, %rsi
    000001c9: 	callq	memcpy@PLT # Offset: 457
    000001ce: 	movq	(%rsp), %r12
    000001d2: 	movq	(%rbx), %rdi
    000001d5: 	jmp	.Ltmp1235 # Offset: 469
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1228:
    000001e0: 	movq	%r14, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp1236 # Offset: 516
.Ltmp1233:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp1236 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1232:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1235 # Offset: 547
    00000229: 	jmp	.Ltmp1237 # Offset: 553
.Ltmp1234:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1230:
    00000230: 	leaq	DATAat0x32158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x22e90
  Size        : 0x13e0
  MaxSize     : 0x13e0
  Offset      : 0x22e90
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x1f000(%rsp), %r11
.Ltmp1238:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1238 # Offset: 37
    00000027: 	subq	$0x4c8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm1
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm2
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x1f4b8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movl	$0x62756f64, 0x60(%rsp)
    00000063: 	movq	%rax, 0x20(%rsp)
    00000068: 	leaq	0xb0(%rsp), %r15
    00000070: 	leaq	0xfab0(%rsp), %r13
    00000078: 	movq	%rax, 0x50(%rsp)
    0000007d: 	movl	$0x656c, %eax
    00000082: 	movw	%ax, 0x64(%rsp)
    00000087: 	movq	$0x6, 0x58(%rsp)
    00000090: 	movb	$0x0, 0x66(%rsp)
    00000095: 	movq	%rdi, 0x18(%rsp)
    0000009a: 	movaps	%xmm1, 0x30(%rsp)
    0000009f: 	movaps	%xmm2, 0x40(%rsp)
    000000a4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 164
    000000a9: 	pxor	%xmm0, %xmm0
    000000ad: 	movq	%r15, %rax
    000000b0: 	cvtsi2sdl	init_value(%rip), %xmm0
    000000b8: 	unpcklpd	%xmm0, %xmm0
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp1239:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%r13, %rax
    000000ca: 	jne	.Ltmp1239 # Offset: 202
    000000cc: 	movq	%r13, %rax
    000000cf: 	leaq	0x1f4b0(%rsp), %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1240:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rdx, %rax
    000000ea: 	jne	.Ltmp1240 # Offset: 234
    000000ec: 	leaq	0x50(%rsp), %rax
    000000f1: 	leaq	0x70(%rsp), %rbp
    000000f6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%rbp, %rdi
    00000103: 	movq	%rax, 0x8(%rsp)
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	movq	0x58(%rsp), %rdx
    00000112: 	movq	0x50(%rsp), %rsi
    00000117: 	movq	%rbp, %rdi
    0000011a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 282
    0000011f: 	leaq	0xa0(%rsp), %rbx
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	movq	%rbx, 0x90(%rsp)
    00000133: 	movq	(%rax), %rcx
    00000136: 	cmpq	%rdx, %rcx
    00000139: 	je	.Ltmp1241 # Offset: 313
    0000013f: 	movq	%rcx, 0x90(%rsp)
    00000147: 	movq	0x10(%rax), %rcx
    0000014b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1326:
    00000153: 	movq	0x8(%rax), %rcx
    00000157: 	leaq	0x90(%rsp), %r14
    0000015f: 	movq	%r13, %rsi
    00000162: 	movq	%r15, %rdi
    00000165: 	movq	%r14, %r8
    00000168: 	movq	%rcx, 0x98(%rsp)
    00000170: 	leaq	_Z17inner_product_stdIPKddET0_T_S3_m(%rip), %rcx
    00000177: 	movq	%rdx, (%rax)
    0000017a: 	movl	$0x1f40, %edx
    0000017f: 	movq	$0x0, 0x8(%rax)
    00000187: 	movb	$0x0, 0x10(%rax)
    0000018b: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 395
    00000190: 	movq	0x90(%rsp), %rdi
    00000198: 	cmpq	%rbx, %rdi
    0000019b: 	je	.Ltmp1242 # Offset: 411
    0000019d: 	movq	0xa0(%rsp), %rax
    000001a5: 	leaq	0x1(%rax), %rsi
    000001a9: 	callq	_ZdlPvm@PLT # Offset: 425
.Ltmp1242:
    000001ae: 	movq	0x70(%rsp), %rdi
    000001b3: 	leaq	0x80(%rsp), %r12
    000001bb: 	cmpq	%r12, %rdi
    000001be: 	je	.Ltmp1243 # Offset: 446
    000001c0: 	movq	0x80(%rsp), %rax
    000001c8: 	leaq	0x1(%rax), %rsi
    000001cc: 	callq	_ZdlPvm@PLT # Offset: 460
.Ltmp1243:
    000001d1: 	movq	0x50(%rsp), %rdx
    000001d6: 	movq	0x58(%rsp), %rcx
    000001db: 	movq	%r12, 0x70(%rsp)
    000001e0: 	movq	%rdx, %rax
    000001e3: 	movq	%rdx, 0x28(%rsp)
    000001e8: 	addq	%rcx, %rax
    000001eb: 	movq	%rcx, 0x10(%rsp)
    000001f0: 	je	.Ltmp1244 # Offset: 496
    000001f2: 	testq	%rdx, %rdx
    000001f5: 	je	.Ltmp1245 # Offset: 501
.Ltmp1244:
    000001fb: 	movq	0x10(%rsp), %rax
    00000200: 	movq	%rax, 0x30(%rsp)
    00000205: 	cmpq	$0xf, %rax
    00000209: 	ja	.Ltmp1246 # Offset: 521
    0000020f: 	cmpq	$0x1, 0x10(%rsp)
    00000215: 	jne	.Ltmp1247 # Offset: 533
    0000021b: 	movq	0x28(%rsp), %rax
    00000220: 	movzbl	(%rax), %eax
    00000223: 	movb	%al, 0x80(%rsp)
    0000022a: 	movq	%r12, %rax
.Ltmp1313:
    0000022d: 	movq	0x10(%rsp), %rsi
    00000232: 	movq	%rsi, 0x78(%rsp)
    00000237: 	movb	$0x0, (%rax,%rsi)
    0000023b: 	movabsq	$0x3fffffffffffffff, %rax
    00000245: 	subq	0x78(%rsp), %rax
    0000024a: 	cmpq	$0x12, %rax
    0000024e: 	jbe	.Ltmp1248 # Offset: 590
    00000254: 	movl	$0x13, %edx
    00000259: 	leaq	DATAat0x321f0(%rip), %rsi
    00000260: 	movq	%rbp, %rdi
    00000263: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 611
    00000268: 	movq	0x58(%rsp), %rdx
    0000026d: 	movq	0x50(%rsp), %rsi
    00000272: 	movq	%rbp, %rdi
    00000275: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 629
    0000027a: 	movq	%rbx, 0x90(%rsp)
    00000282: 	movq	(%rax), %rcx
    00000285: 	leaq	0x10(%rax), %rdx
    00000289: 	cmpq	%rdx, %rcx
    0000028c: 	je	.Ltmp1249 # Offset: 652
    00000292: 	movq	%rcx, 0x90(%rsp)
    0000029a: 	movq	0x10(%rax), %rcx
    0000029e: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1327:
    000002a6: 	movq	0x8(%rax), %rcx
    000002aa: 	movq	%r14, %r8
    000002ad: 	movq	%r13, %rsi
    000002b0: 	movq	%r15, %rdi
    000002b3: 	movq	%rcx, 0x98(%rsp)
    000002bb: 	leaq	_Z14inner_product1IPKddET0_T_S3_m(%rip), %rcx
    000002c2: 	movq	%rdx, (%rax)
    000002c5: 	movl	$0x1f40, %edx
    000002ca: 	movq	$0x0, 0x8(%rax)
    000002d2: 	movb	$0x0, 0x10(%rax)
    000002d6: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 726
    000002db: 	movq	0x90(%rsp), %rdi
    000002e3: 	cmpq	%rbx, %rdi
    000002e6: 	je	.Ltmp1250 # Offset: 742
    000002e8: 	movq	0xa0(%rsp), %rax
    000002f0: 	leaq	0x1(%rax), %rsi
    000002f4: 	callq	_ZdlPvm@PLT # Offset: 756
.Ltmp1250:
    000002f9: 	movq	0x70(%rsp), %rdi
    000002fe: 	cmpq	%r12, %rdi
    00000301: 	je	.Ltmp1251 # Offset: 769
    00000303: 	movq	0x80(%rsp), %rax
    0000030b: 	leaq	0x1(%rax), %rsi
    0000030f: 	callq	_ZdlPvm@PLT # Offset: 783
.Ltmp1251:
    00000314: 	movq	0x50(%rsp), %rsi
    00000319: 	movq	0x58(%rsp), %rdx
    0000031e: 	movq	%r12, 0x70(%rsp)
    00000323: 	movq	%rsi, %rax
    00000326: 	movq	%rsi, 0x28(%rsp)
    0000032b: 	addq	%rdx, %rax
    0000032e: 	movq	%rdx, 0x10(%rsp)
    00000333: 	je	.Ltmp1252 # Offset: 819
    00000335: 	testq	%rsi, %rsi
    00000338: 	je	.Ltmp1253 # Offset: 824
.Ltmp1252:
    0000033e: 	movq	0x10(%rsp), %rax
    00000343: 	movq	%rax, 0x30(%rsp)
    00000348: 	cmpq	$0xf, %rax
    0000034c: 	ja	.Ltmp1254 # Offset: 844
    00000352: 	cmpq	$0x1, 0x10(%rsp)
    00000358: 	jne	.Ltmp1255 # Offset: 856
    0000035e: 	movq	0x28(%rsp), %rax
    00000363: 	movzbl	(%rax), %eax
    00000366: 	movb	%al, 0x80(%rsp)
    0000036d: 	movq	%r12, %rax
.Ltmp1319:
    00000370: 	movq	0x10(%rsp), %rcx
    00000375: 	movq	%rcx, 0x78(%rsp)
    0000037a: 	movb	$0x0, (%rax,%rcx)
    0000037e: 	movabsq	$0x3fffffffffffffff, %rax
    00000388: 	subq	0x78(%rsp), %rax
    0000038d: 	cmpq	$0x12, %rax
    00000391: 	jbe	.Ltmp1256 # Offset: 913
    00000397: 	movl	$0x13, %edx
    0000039c: 	leaq	DATAat0x32204(%rip), %rsi
    000003a3: 	movq	%rbp, %rdi
    000003a6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 934
    000003ab: 	movq	0x58(%rsp), %rdx
    000003b0: 	movq	0x50(%rsp), %rsi
    000003b5: 	movq	%rbp, %rdi
    000003b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 952
    000003bd: 	movq	%rbx, 0x90(%rsp)
    000003c5: 	movq	(%rax), %rcx
    000003c8: 	leaq	0x10(%rax), %rdx
    000003cc: 	cmpq	%rdx, %rcx
    000003cf: 	je	.Ltmp1257 # Offset: 975
    000003d5: 	movq	%rcx, 0x90(%rsp)
    000003dd: 	movq	0x10(%rax), %rcx
    000003e1: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1329:
    000003e9: 	movq	0x8(%rax), %rcx
    000003ed: 	movq	%r14, %r8
    000003f0: 	movq	%r13, %rsi
    000003f3: 	movq	%r15, %rdi
    000003f6: 	movq	%rcx, 0x98(%rsp)
    000003fe: 	leaq	_Z14inner_product2IPKddET0_T_S3_m(%rip), %rcx
    00000405: 	movq	%rdx, (%rax)
    00000408: 	movl	$0x1f40, %edx
    0000040d: 	movq	$0x0, 0x8(%rax)
    00000415: 	movb	$0x0, 0x10(%rax)
    00000419: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1049
    0000041e: 	movq	0x90(%rsp), %rdi
    00000426: 	cmpq	%rbx, %rdi
    00000429: 	je	.Ltmp1258 # Offset: 1065
    0000042b: 	movq	0xa0(%rsp), %rax
    00000433: 	leaq	0x1(%rax), %rsi
    00000437: 	callq	_ZdlPvm@PLT # Offset: 1079
.Ltmp1258:
    0000043c: 	movq	0x70(%rsp), %rdi
    00000441: 	cmpq	%r12, %rdi
    00000444: 	je	.Ltmp1259 # Offset: 1092
    00000446: 	movq	0x80(%rsp), %rax
    0000044e: 	leaq	0x1(%rax), %rsi
    00000452: 	callq	_ZdlPvm@PLT # Offset: 1106
.Ltmp1259:
    00000457: 	movq	0x8(%rsp), %rsi
    0000045c: 	leaq	DATAat0x32218(%rip), %rdx
    00000463: 	movq	%rbp, %rdi
    00000466: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1126
    0000046b: 	movq	0x58(%rsp), %rdx
    00000470: 	movq	0x50(%rsp), %rsi
    00000475: 	movq	%rbp, %rdi
    00000478: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1144
    0000047d: 	movq	%rbx, 0x90(%rsp)
    00000485: 	movq	(%rax), %rcx
    00000488: 	leaq	0x10(%rax), %rdx
    0000048c: 	cmpq	%rdx, %rcx
    0000048f: 	je	.Ltmp1260 # Offset: 1167
    00000495: 	movq	%rcx, 0x90(%rsp)
    0000049d: 	movq	0x10(%rax), %rcx
    000004a1: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1328:
    000004a9: 	movq	0x8(%rax), %rcx
    000004ad: 	movq	%r14, %r8
    000004b0: 	movq	%r13, %rsi
    000004b3: 	movq	%r15, %rdi
    000004b6: 	movq	%rcx, 0x98(%rsp)
    000004be: 	leaq	_Z14inner_product3IPKddET0_T_S3_m(%rip), %rcx
    000004c5: 	movq	%rdx, (%rax)
    000004c8: 	movl	$0x1f40, %edx
    000004cd: 	movq	$0x0, 0x8(%rax)
    000004d5: 	movb	$0x0, 0x10(%rax)
    000004d9: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1241
    000004de: 	movq	0x90(%rsp), %rdi
    000004e6: 	cmpq	%rbx, %rdi
    000004e9: 	je	.Ltmp1261 # Offset: 1257
    000004eb: 	movq	0xa0(%rsp), %rax
    000004f3: 	leaq	0x1(%rax), %rsi
    000004f7: 	callq	_ZdlPvm@PLT # Offset: 1271
.Ltmp1261:
    000004fc: 	movq	0x70(%rsp), %rdi
    00000501: 	cmpq	%r12, %rdi
    00000504: 	je	.Ltmp1262 # Offset: 1284
    00000506: 	movq	0x80(%rsp), %rax
    0000050e: 	leaq	0x1(%rax), %rsi
    00000512: 	callq	_ZdlPvm@PLT # Offset: 1298
.Ltmp1262:
    00000517: 	movq	0x8(%rsp), %rsi
    0000051c: 	leaq	DATAat0x3222c(%rip), %rdx
    00000523: 	movq	%rbp, %rdi
    00000526: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1318
    0000052b: 	movq	0x58(%rsp), %rdx
    00000530: 	movq	0x50(%rsp), %rsi
    00000535: 	movq	%rbp, %rdi
    00000538: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1336
    0000053d: 	movq	%rbx, 0x90(%rsp)
    00000545: 	movq	(%rax), %rcx
    00000548: 	leaq	0x10(%rax), %rdx
    0000054c: 	cmpq	%rdx, %rcx
    0000054f: 	je	.Ltmp1263 # Offset: 1359
    00000555: 	movq	%rcx, 0x90(%rsp)
    0000055d: 	movq	0x10(%rax), %rcx
    00000561: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1331:
    00000569: 	movq	0x8(%rax), %rcx
    0000056d: 	movq	%r14, %r8
    00000570: 	movq	%r13, %rsi
    00000573: 	movq	%r15, %rdi
    00000576: 	movq	%rcx, 0x98(%rsp)
    0000057e: 	leaq	_Z14inner_product4IPKddET0_T_S3_m(%rip), %rcx
    00000585: 	movq	%rdx, (%rax)
    00000588: 	movl	$0x1f40, %edx
    0000058d: 	movq	$0x0, 0x8(%rax)
    00000595: 	movb	$0x0, 0x10(%rax)
    00000599: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1433
    0000059e: 	movq	0x90(%rsp), %rdi
    000005a6: 	cmpq	%rbx, %rdi
    000005a9: 	je	.Ltmp1264 # Offset: 1449
    000005ab: 	movq	0xa0(%rsp), %rax
    000005b3: 	leaq	0x1(%rax), %rsi
    000005b7: 	callq	_ZdlPvm@PLT # Offset: 1463
.Ltmp1264:
    000005bc: 	movq	0x70(%rsp), %rdi
    000005c1: 	cmpq	%r12, %rdi
    000005c4: 	je	.Ltmp1265 # Offset: 1476
    000005c6: 	movq	0x80(%rsp), %rax
    000005ce: 	leaq	0x1(%rax), %rsi
    000005d2: 	callq	_ZdlPvm@PLT # Offset: 1490
.Ltmp1265:
    000005d7: 	movq	0x8(%rsp), %rsi
    000005dc: 	leaq	DATAat0x32240(%rip), %rdx
    000005e3: 	movq	%rbp, %rdi
    000005e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1510
    000005eb: 	movq	0x58(%rsp), %rdx
    000005f0: 	movq	0x50(%rsp), %rsi
    000005f5: 	movq	%rbp, %rdi
    000005f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1528
    000005fd: 	movq	%rbx, 0x90(%rsp)
    00000605: 	movq	(%rax), %rcx
    00000608: 	leaq	0x10(%rax), %rdx
    0000060c: 	cmpq	%rdx, %rcx
    0000060f: 	je	.Ltmp1266 # Offset: 1551
    00000615: 	movq	%rcx, 0x90(%rsp)
    0000061d: 	movq	0x10(%rax), %rcx
    00000621: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1330:
    00000629: 	movq	0x8(%rax), %rcx
    0000062d: 	movq	%r14, %r8
    00000630: 	movq	%r13, %rsi
    00000633: 	movq	%r15, %rdi
    00000636: 	movq	%rcx, 0x98(%rsp)
    0000063e: 	leaq	_Z14inner_product5IPKddET0_T_S3_m(%rip), %rcx
    00000645: 	movq	%rdx, (%rax)
    00000648: 	movl	$0x1f40, %edx
    0000064d: 	movq	$0x0, 0x8(%rax)
    00000655: 	movb	$0x0, 0x10(%rax)
    00000659: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1625
    0000065e: 	movq	0x90(%rsp), %rdi
    00000666: 	cmpq	%rbx, %rdi
    00000669: 	je	.Ltmp1267 # Offset: 1641
    0000066b: 	movq	0xa0(%rsp), %rax
    00000673: 	leaq	0x1(%rax), %rsi
    00000677: 	callq	_ZdlPvm@PLT # Offset: 1655
.Ltmp1267:
    0000067c: 	movq	0x70(%rsp), %rdi
    00000681: 	cmpq	%r12, %rdi
    00000684: 	je	.Ltmp1268 # Offset: 1668
    00000686: 	movq	0x80(%rsp), %rax
    0000068e: 	leaq	0x1(%rax), %rsi
    00000692: 	callq	_ZdlPvm@PLT # Offset: 1682
.Ltmp1268:
    00000697: 	movq	0x50(%rsp), %rdx
    0000069c: 	movq	0x58(%rsp), %rsi
    000006a1: 	movq	%r12, 0x70(%rsp)
    000006a6: 	movq	%rdx, %rax
    000006a9: 	movq	%rdx, 0x28(%rsp)
    000006ae: 	addq	%rsi, %rax
    000006b1: 	movq	%rsi, 0x10(%rsp)
    000006b6: 	je	.Ltmp1269 # Offset: 1718
    000006b8: 	testq	%rdx, %rdx
    000006bb: 	je	.Ltmp1270 # Offset: 1723
.Ltmp1269:
    000006c1: 	movq	0x10(%rsp), %rax
    000006c6: 	movq	%rax, 0x30(%rsp)
    000006cb: 	cmpq	$0xf, %rax
    000006cf: 	ja	.Ltmp1271 # Offset: 1743
    000006d5: 	cmpq	$0x1, 0x10(%rsp)
    000006db: 	jne	.Ltmp1272 # Offset: 1755
    000006e1: 	movq	0x28(%rsp), %rax
    000006e6: 	movzbl	(%rax), %eax
    000006e9: 	movb	%al, 0x80(%rsp)
    000006f0: 	movq	%r12, %rax
.Ltmp1317:
    000006f3: 	movq	0x10(%rsp), %rdx
    000006f8: 	movq	%rdx, 0x78(%rsp)
    000006fd: 	movb	$0x0, (%rax,%rdx)
    00000701: 	movabsq	$0x3fffffffffffffff, %rax
    0000070b: 	subq	0x78(%rsp), %rax
    00000710: 	cmpq	$0x12, %rax
    00000714: 	jbe	.Ltmp1273 # Offset: 1812
    0000071a: 	movl	$0x13, %edx
    0000071f: 	leaq	DATAat0x32254(%rip), %rsi
    00000726: 	movq	%rbp, %rdi
    00000729: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1833
    0000072e: 	movq	0x58(%rsp), %rdx
    00000733: 	movq	0x50(%rsp), %rsi
    00000738: 	movq	%rbp, %rdi
    0000073b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1851
    00000740: 	movq	%rbx, 0x90(%rsp)
    00000748: 	movq	(%rax), %rcx
    0000074b: 	leaq	0x10(%rax), %rdx
    0000074f: 	cmpq	%rdx, %rcx
    00000752: 	je	.Ltmp1274 # Offset: 1874
    00000758: 	movq	%rcx, 0x90(%rsp)
    00000760: 	movq	0x10(%rax), %rcx
    00000764: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1334:
    0000076c: 	movq	0x8(%rax), %rcx
    00000770: 	movq	%r14, %r8
    00000773: 	movq	%r13, %rsi
    00000776: 	movq	%r15, %rdi
    00000779: 	movq	%rcx, 0x98(%rsp)
    00000781: 	leaq	_Z14inner_product6IPKddET0_T_S3_m(%rip), %rcx
    00000788: 	movq	%rdx, (%rax)
    0000078b: 	movl	$0x1f40, %edx
    00000790: 	movq	$0x0, 0x8(%rax)
    00000798: 	movb	$0x0, 0x10(%rax)
    0000079c: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1948
    000007a1: 	movq	0x90(%rsp), %rdi
    000007a9: 	cmpq	%rbx, %rdi
    000007ac: 	je	.Ltmp1275 # Offset: 1964
    000007ae: 	movq	0xa0(%rsp), %rax
    000007b6: 	leaq	0x1(%rax), %rsi
    000007ba: 	callq	_ZdlPvm@PLT # Offset: 1978
.Ltmp1275:
    000007bf: 	movq	0x70(%rsp), %rdi
    000007c4: 	cmpq	%r12, %rdi
    000007c7: 	je	.Ltmp1276 # Offset: 1991
    000007c9: 	movq	0x80(%rsp), %rax
    000007d1: 	leaq	0x1(%rax), %rsi
    000007d5: 	callq	_ZdlPvm@PLT # Offset: 2005
.Ltmp1276:
    000007da: 	movq	0x50(%rsp), %rcx
    000007df: 	movq	0x58(%rsp), %rsi
    000007e4: 	movq	%r12, 0x70(%rsp)
    000007e9: 	movq	%rcx, %rax
    000007ec: 	movq	%rcx, 0x28(%rsp)
    000007f1: 	addq	%rsi, %rax
    000007f4: 	movq	%rsi, 0x10(%rsp)
    000007f9: 	je	.Ltmp1277 # Offset: 2041
    000007fb: 	testq	%rcx, %rcx
    000007fe: 	je	.Ltmp1278 # Offset: 2046
.Ltmp1277:
    00000804: 	movq	0x10(%rsp), %rax
    00000809: 	movq	%rax, 0x30(%rsp)
    0000080e: 	cmpq	$0xf, %rax
    00000812: 	ja	.Ltmp1279 # Offset: 2066
    00000818: 	cmpq	$0x1, 0x10(%rsp)
    0000081e: 	jne	.Ltmp1280 # Offset: 2078
    00000824: 	movq	0x28(%rsp), %rax
    00000829: 	movzbl	(%rax), %eax
    0000082c: 	movb	%al, 0x80(%rsp)
    00000833: 	movq	%r12, %rax
.Ltmp1315:
    00000836: 	movq	0x10(%rsp), %rcx
    0000083b: 	movq	%rcx, 0x78(%rsp)
    00000840: 	movb	$0x0, (%rax,%rcx)
    00000844: 	movabsq	$0x3fffffffffffffff, %rax
    0000084e: 	subq	0x78(%rsp), %rax
    00000853: 	cmpq	$0x12, %rax
    00000857: 	jbe	.Ltmp1281 # Offset: 2135
    0000085d: 	movl	$0x13, %edx
    00000862: 	leaq	DATAat0x32268(%rip), %rsi
    00000869: 	movq	%rbp, %rdi
    0000086c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2156
    00000871: 	movq	0x58(%rsp), %rdx
    00000876: 	movq	0x50(%rsp), %rsi
    0000087b: 	movq	%rbp, %rdi
    0000087e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2174
    00000883: 	movq	%rbx, 0x90(%rsp)
    0000088b: 	movq	(%rax), %rcx
    0000088e: 	leaq	0x10(%rax), %rdx
    00000892: 	cmpq	%rdx, %rcx
    00000895: 	je	.Ltmp1282 # Offset: 2197
    0000089b: 	movq	%rcx, 0x90(%rsp)
    000008a3: 	movq	0x10(%rax), %rcx
    000008a7: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1335:
    000008af: 	movq	0x8(%rax), %rcx
    000008b3: 	movq	%r14, %r8
    000008b6: 	movq	%r13, %rsi
    000008b9: 	movq	%r15, %rdi
    000008bc: 	movq	%rcx, 0x98(%rsp)
    000008c4: 	leaq	_Z14inner_product7IPKddET0_T_S3_m(%rip), %rcx
    000008cb: 	movq	%rdx, (%rax)
    000008ce: 	movl	$0x1f40, %edx
    000008d3: 	movq	$0x0, 0x8(%rax)
    000008db: 	movb	$0x0, 0x10(%rax)
    000008df: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2271
    000008e4: 	movq	0x90(%rsp), %rdi
    000008ec: 	cmpq	%rbx, %rdi
    000008ef: 	je	.Ltmp1283 # Offset: 2287
    000008f1: 	movq	0xa0(%rsp), %rax
    000008f9: 	leaq	0x1(%rax), %rsi
    000008fd: 	callq	_ZdlPvm@PLT # Offset: 2301
.Ltmp1283:
    00000902: 	movq	0x70(%rsp), %rdi
    00000907: 	cmpq	%r12, %rdi
    0000090a: 	je	.Ltmp1284 # Offset: 2314
    0000090c: 	movq	0x80(%rsp), %rax
    00000914: 	leaq	0x1(%rax), %rsi
    00000918: 	callq	_ZdlPvm@PLT # Offset: 2328
.Ltmp1284:
    0000091d: 	movq	0x50(%rsp), %rsi
    00000922: 	movq	0x58(%rsp), %rdi
    00000927: 	movq	%r12, 0x70(%rsp)
    0000092c: 	movq	%rsi, %rax
    0000092f: 	movq	%rsi, 0x28(%rsp)
    00000934: 	addq	%rdi, %rax
    00000937: 	movq	%rdi, 0x10(%rsp)
    0000093c: 	je	.Ltmp1285 # Offset: 2364
    0000093e: 	testq	%rsi, %rsi
    00000941: 	je	.Ltmp1286 # Offset: 2369
.Ltmp1285:
    00000947: 	movq	0x10(%rsp), %rax
    0000094c: 	movq	%rax, 0x30(%rsp)
    00000951: 	cmpq	$0xf, %rax
    00000955: 	ja	.Ltmp1287 # Offset: 2389
    0000095b: 	cmpq	$0x1, 0x10(%rsp)
    00000961: 	jne	.Ltmp1288 # Offset: 2401
    00000967: 	movq	0x28(%rsp), %rax
    0000096c: 	movzbl	(%rax), %eax
    0000096f: 	movb	%al, 0x80(%rsp)
    00000976: 	movq	%r12, %rax
.Ltmp1323:
    00000979: 	movq	0x10(%rsp), %rdx
    0000097e: 	movq	%rdx, 0x78(%rsp)
    00000983: 	movb	$0x0, (%rax,%rdx)
    00000987: 	movabsq	$0x3fffffffffffffff, %rax
    00000991: 	subq	0x78(%rsp), %rax
    00000996: 	cmpq	$0x12, %rax
    0000099a: 	jbe	.Ltmp1289 # Offset: 2458
    000009a0: 	movl	$0x13, %edx
    000009a5: 	leaq	DATAat0x3227c(%rip), %rsi
    000009ac: 	movq	%rbp, %rdi
    000009af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2479
    000009b4: 	movq	0x58(%rsp), %rdx
    000009b9: 	movq	0x50(%rsp), %rsi
    000009be: 	movq	%rbp, %rdi
    000009c1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2497
    000009c6: 	movq	%rbx, 0x90(%rsp)
    000009ce: 	movq	(%rax), %rcx
    000009d1: 	leaq	0x10(%rax), %rdx
    000009d5: 	cmpq	%rdx, %rcx
    000009d8: 	je	.Ltmp1290 # Offset: 2520
    000009de: 	movq	%rcx, 0x90(%rsp)
    000009e6: 	movq	0x10(%rax), %rcx
    000009ea: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1336:
    000009f2: 	movq	0x8(%rax), %rcx
    000009f6: 	movq	%r14, %r8
    000009f9: 	movq	%r13, %rsi
    000009fc: 	movq	%r15, %rdi
    000009ff: 	movq	%rcx, 0x98(%rsp)
    00000a07: 	leaq	_Z14inner_product8IPKddET0_T_S3_m(%rip), %rcx
    00000a0e: 	movq	%rdx, (%rax)
    00000a11: 	movl	$0x1f40, %edx
    00000a16: 	movq	$0x0, 0x8(%rax)
    00000a1e: 	movb	$0x0, 0x10(%rax)
    00000a22: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2594
    00000a27: 	movq	0x90(%rsp), %rdi
    00000a2f: 	cmpq	%rbx, %rdi
    00000a32: 	je	.Ltmp1291 # Offset: 2610
    00000a34: 	movq	0xa0(%rsp), %rax
    00000a3c: 	leaq	0x1(%rax), %rsi
    00000a40: 	callq	_ZdlPvm@PLT # Offset: 2624
.Ltmp1291:
    00000a45: 	movq	0x70(%rsp), %rdi
    00000a4a: 	cmpq	%r12, %rdi
    00000a4d: 	je	.Ltmp1292 # Offset: 2637
    00000a4f: 	movq	0x80(%rsp), %rax
    00000a57: 	leaq	0x1(%rax), %rsi
    00000a5b: 	callq	_ZdlPvm@PLT # Offset: 2651
.Ltmp1292:
    00000a60: 	movq	0x50(%rsp), %rdx
    00000a65: 	movq	0x58(%rsp), %rcx
    00000a6a: 	movq	%r12, 0x70(%rsp)
    00000a6f: 	movq	%rdx, %rax
    00000a72: 	movq	%rdx, 0x28(%rsp)
    00000a77: 	addq	%rcx, %rax
    00000a7a: 	movq	%rcx, 0x10(%rsp)
    00000a7f: 	je	.Ltmp1293 # Offset: 2687
    00000a81: 	testq	%rdx, %rdx
    00000a84: 	je	.Ltmp1294 # Offset: 2692
.Ltmp1293:
    00000a8a: 	movq	0x10(%rsp), %rax
    00000a8f: 	movq	%rax, 0x30(%rsp)
    00000a94: 	cmpq	$0xf, %rax
    00000a98: 	ja	.Ltmp1295 # Offset: 2712
    00000a9e: 	cmpq	$0x1, 0x10(%rsp)
    00000aa4: 	jne	.Ltmp1296 # Offset: 2724
    00000aaa: 	movq	0x28(%rsp), %rax
    00000aaf: 	movzbl	(%rax), %eax
    00000ab2: 	movb	%al, 0x80(%rsp)
    00000ab9: 	movq	%r12, %rax
.Ltmp1321:
    00000abc: 	movq	0x10(%rsp), %rsi
    00000ac1: 	movq	%rsi, 0x78(%rsp)
    00000ac6: 	movb	$0x0, (%rax,%rsi)
    00000aca: 	movabsq	$0x3fffffffffffffff, %rax
    00000ad4: 	subq	0x78(%rsp), %rax
    00000ad9: 	cmpq	$0x12, %rax
    00000add: 	jbe	.Ltmp1297 # Offset: 2781
    00000ae3: 	movl	$0x13, %edx
    00000ae8: 	leaq	DATAat0x32290(%rip), %rsi
    00000aef: 	movq	%rbp, %rdi
    00000af2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2802
    00000af7: 	movq	0x58(%rsp), %rdx
    00000afc: 	movq	0x50(%rsp), %rsi
    00000b01: 	movq	%rbp, %rdi
    00000b04: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2820
    00000b09: 	movq	%rbx, 0x90(%rsp)
    00000b11: 	movq	(%rax), %rcx
    00000b14: 	leaq	0x10(%rax), %rdx
    00000b18: 	cmpq	%rdx, %rcx
    00000b1b: 	je	.Ltmp1298 # Offset: 2843
    00000b21: 	movq	%rcx, 0x90(%rsp)
    00000b29: 	movq	0x10(%rax), %rcx
    00000b2d: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1332:
    00000b35: 	movq	0x8(%rax), %rcx
    00000b39: 	movq	%r14, %r8
    00000b3c: 	movq	%r13, %rsi
    00000b3f: 	movq	%r15, %rdi
    00000b42: 	movq	%rcx, 0x98(%rsp)
    00000b4a: 	leaq	_Z14inner_product9IPKddET0_T_S3_m(%rip), %rcx
    00000b51: 	movq	%rdx, (%rax)
    00000b54: 	movl	$0x1f40, %edx
    00000b59: 	movq	$0x0, 0x8(%rax)
    00000b61: 	movb	$0x0, 0x10(%rax)
    00000b65: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2917
    00000b6a: 	movq	0x90(%rsp), %rdi
    00000b72: 	cmpq	%rbx, %rdi
    00000b75: 	je	.Ltmp1299 # Offset: 2933
    00000b77: 	movq	0xa0(%rsp), %rax
    00000b7f: 	leaq	0x1(%rax), %rsi
    00000b83: 	callq	_ZdlPvm@PLT # Offset: 2947
.Ltmp1299:
    00000b88: 	movq	0x70(%rsp), %rdi
    00000b8d: 	cmpq	%r12, %rdi
    00000b90: 	je	.Ltmp1300 # Offset: 2960
    00000b92: 	movq	0x80(%rsp), %rax
    00000b9a: 	leaq	0x1(%rax), %rsi
    00000b9e: 	callq	_ZdlPvm@PLT # Offset: 2974
.Ltmp1300:
    00000ba3: 	movq	0x8(%rsp), %rsi
    00000ba8: 	leaq	DATAat0x322a4(%rip), %rdx
    00000baf: 	movq	%rbp, %rdi
    00000bb2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2994
    00000bb7: 	movq	0x58(%rsp), %rdx
    00000bbc: 	movq	0x50(%rsp), %rsi
    00000bc1: 	movq	%rbp, %rdi
    00000bc4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3012
    00000bc9: 	movq	%rbx, 0x90(%rsp)
    00000bd1: 	movq	(%rax), %rcx
    00000bd4: 	leaq	0x10(%rax), %rdx
    00000bd8: 	cmpq	%rdx, %rcx
    00000bdb: 	je	.Ltmp1301 # Offset: 3035
    00000be1: 	movq	%rcx, 0x90(%rsp)
    00000be9: 	movq	0x10(%rax), %rcx
    00000bed: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1333:
    00000bf5: 	movq	0x8(%rax), %rcx
    00000bf9: 	movq	%r14, %r8
    00000bfc: 	movq	%r13, %rsi
    00000bff: 	movq	%r15, %rdi
    00000c02: 	movq	%rcx, 0x98(%rsp)
    00000c0a: 	leaq	_Z15inner_product10IPKddET0_T_S3_m(%rip), %rcx
    00000c11: 	movq	%rdx, (%rax)
    00000c14: 	movl	$0x1f40, %edx
    00000c19: 	movq	$0x0, 0x8(%rax)
    00000c21: 	movb	$0x0, 0x10(%rax)
    00000c25: 	callq	_Z18test_inner_productIdPFdPKdS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3109
    00000c2a: 	movq	0x90(%rsp), %rdi
    00000c32: 	cmpq	%rbx, %rdi
    00000c35: 	je	.Ltmp1302 # Offset: 3125
    00000c37: 	movq	0xa0(%rsp), %rax
    00000c3f: 	leaq	0x1(%rax), %rsi
    00000c43: 	callq	_ZdlPvm@PLT # Offset: 3139
.Ltmp1302:
    00000c48: 	movq	0x70(%rsp), %rdi
    00000c4d: 	cmpq	%r12, %rdi
    00000c50: 	je	.Ltmp1303 # Offset: 3152
    00000c52: 	movq	0x80(%rsp), %rax
    00000c5a: 	leaq	0x1(%rax), %rsi
    00000c5e: 	callq	_ZdlPvm@PLT # Offset: 3166
.Ltmp1303:
    00000c63: 	movq	0x50(%rsp), %rbp
    00000c68: 	movq	0x58(%rsp), %r12
    00000c6d: 	movq	%rbx, 0x90(%rsp)
    00000c75: 	movq	%rbp, %rax
    00000c78: 	addq	%r12, %rax
    00000c7b: 	je	.Ltmp1304 # Offset: 3195
    00000c7d: 	testq	%rbp, %rbp
    00000c80: 	je	.Ltmp1305 # Offset: 3200
.Ltmp1304:
    00000c86: 	movq	%r12, 0x30(%rsp)
    00000c8b: 	cmpq	$0xf, %r12
    00000c8f: 	ja	.Ltmp1306 # Offset: 3215
    00000c95: 	cmpq	$0x1, %r12
    00000c99: 	jne	.Ltmp1307 # Offset: 3225
    00000c9f: 	movzbl	(%rbp), %eax
    00000ca3: 	movb	%al, 0xa0(%rsp)
    00000caa: 	movq	%rbx, %rax
.Ltmp1325:
    00000cad: 	movq	%r12, 0x98(%rsp)
    00000cb5: 	movb	$0x0, (%rax,%r12)
    00000cba: 	movabsq	$0x3fffffffffffffff, %rax
    00000cc4: 	subq	0x98(%rsp), %rax
    00000ccc: 	cmpq	$0xd, %rax
    00000cd0: 	jbe	.Ltmp1308 # Offset: 3280
    00000cd6: 	movl	$0xe, %edx
    00000cdb: 	leaq	DATAat0x322b9(%rip), %rsi
    00000ce2: 	movq	%r14, %rdi
    00000ce5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3301
    00000cea: 	movl	iterations(%rip), %edx
    00000cf0: 	xorl	%r8d, %r8d
    00000cf3: 	xorl	%ecx, %ecx
    00000cf5: 	movl	$0x1f40, %esi
    00000cfa: 	movq	0x90(%rsp), %rdi
    00000d02: 	callq	_Z9summarizePKciiii # Offset: 3330
    00000d07: 	movq	0x90(%rsp), %rdi
    00000d0f: 	cmpq	%rbx, %rdi
    00000d12: 	je	.Ltmp1309 # Offset: 3346
    00000d14: 	movq	0xa0(%rsp), %rax
    00000d1c: 	leaq	0x1(%rax), %rsi
    00000d20: 	callq	_ZdlPvm@PLT # Offset: 3360
.Ltmp1309:
    00000d25: 	movq	0x50(%rsp), %rdi
    00000d2a: 	cmpq	0x20(%rsp), %rdi
    00000d2f: 	je	.Ltmp1310 # Offset: 3375
    00000d31: 	movq	0x60(%rsp), %rax
    00000d36: 	leaq	0x1(%rax), %rsi
    00000d3a: 	callq	_ZdlPvm@PLT # Offset: 3386
.Ltmp1310:
    00000d3f: 	movq	0x1f4b8(%rsp), %rax
    00000d47: 	subq	%fs:0x28, %rax
    00000d50: 	jne	.Ltmp1311 # Offset: 3408
    00000d56: 	addq	$0x1f4c8, %rsp
    00000d5d: 	popq	%rbx
    00000d5e: 	popq	%rbp
    00000d5f: 	popq	%r12
    00000d61: 	popq	%r13
    00000d63: 	popq	%r14
    00000d65: 	popq	%r15
    00000d67: 	retq # Offset: 3431
    00000d68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1247:
    00000d70: 	cmpq	$0x0, 0x10(%rsp)
    00000d76: 	jne	.Ltmp1312 # Offset: 3446
    00000d7c: 	movq	%r12, %rax
    00000d7f: 	jmp	.Ltmp1313 # Offset: 3455
    00000d84: 	nopl	(%rax) # Size: 4
.Ltmp1280:
    00000d88: 	cmpq	$0x0, 0x10(%rsp)
    00000d8e: 	jne	.Ltmp1314 # Offset: 3470
    00000d94: 	movq	%r12, %rax
    00000d97: 	jmp	.Ltmp1315 # Offset: 3479
    00000d9c: 	nopl	(%rax) # Size: 4
.Ltmp1272:
    00000da0: 	cmpq	$0x0, 0x10(%rsp)
    00000da6: 	jne	.Ltmp1316 # Offset: 3494
    00000dac: 	movq	%r12, %rax
    00000daf: 	jmp	.Ltmp1317 # Offset: 3503
    00000db4: 	nopl	(%rax) # Size: 4
.Ltmp1255:
    00000db8: 	cmpq	$0x0, 0x10(%rsp)
    00000dbe: 	jne	.Ltmp1318 # Offset: 3518
    00000dc4: 	movq	%r12, %rax
    00000dc7: 	jmp	.Ltmp1319 # Offset: 3527
    00000dcc: 	nopl	(%rax) # Size: 4
.Ltmp1296:
    00000dd0: 	cmpq	$0x0, 0x10(%rsp)
    00000dd6: 	jne	.Ltmp1320 # Offset: 3542
    00000ddc: 	movq	%r12, %rax
    00000ddf: 	jmp	.Ltmp1321 # Offset: 3551
    00000de4: 	nopl	(%rax) # Size: 4
.Ltmp1288:
    00000de8: 	cmpq	$0x0, 0x10(%rsp)
    00000dee: 	jne	.Ltmp1322 # Offset: 3566
    00000df4: 	movq	%r12, %rax
    00000df7: 	jmp	.Ltmp1323 # Offset: 3575
    00000dfc: 	nopl	(%rax) # Size: 4
.Ltmp1307:
    00000e00: 	testq	%r12, %r12
    00000e03: 	jne	.Ltmp1324 # Offset: 3587
    00000e09: 	movq	%rbx, %rax
    00000e0c: 	jmp	.Ltmp1325 # Offset: 3596
    00000e11: 	nopl	(%rax) # Size: 7
.Ltmp1254:
    00000e18: 	movq	0x18(%rsp), %rsi
    00000e1d: 	xorl	%edx, %edx
    00000e1f: 	movq	%rbp, %rdi
    00000e22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3618
    00000e27: 	movq	%rax, 0x70(%rsp)
    00000e2c: 	movq	%rax, %rdi
    00000e2f: 	movq	0x30(%rsp), %rax
    00000e34: 	movq	%rax, 0x80(%rsp)
.Ltmp1340:
    00000e3c: 	movq	0x10(%rsp), %rdx
    00000e41: 	movq	0x28(%rsp), %rsi
    00000e46: 	callq	memcpy@PLT # Offset: 3654
    00000e4b: 	movq	0x30(%rsp), %rax
    00000e50: 	movq	%rax, 0x10(%rsp)
    00000e55: 	movq	0x70(%rsp), %rax
    00000e5a: 	jmp	.Ltmp1319 # Offset: 3674
    00000e5f: 	nop # Size: 1
.Ltmp1246:
    00000e60: 	movq	0x18(%rsp), %rsi
    00000e65: 	xorl	%edx, %edx
    00000e67: 	movq	%rbp, %rdi
    00000e6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3690
    00000e6f: 	movq	%rax, 0x70(%rsp)
    00000e74: 	movq	%rax, %rdi
    00000e77: 	movq	0x30(%rsp), %rax
    00000e7c: 	movq	%rax, 0x80(%rsp)
.Ltmp1337:
    00000e84: 	movq	0x10(%rsp), %rdx
    00000e89: 	movq	0x28(%rsp), %rsi
    00000e8e: 	callq	memcpy@PLT # Offset: 3726
    00000e93: 	movq	0x30(%rsp), %rax
    00000e98: 	movq	%rax, 0x10(%rsp)
    00000e9d: 	movq	0x70(%rsp), %rax
    00000ea2: 	jmp	.Ltmp1313 # Offset: 3746
    00000ea7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1271:
    00000eb0: 	movq	0x18(%rsp), %rsi
    00000eb5: 	xorl	%edx, %edx
    00000eb7: 	movq	%rbp, %rdi
    00000eba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3770
    00000ebf: 	movq	%rax, 0x70(%rsp)
    00000ec4: 	movq	%rax, %rdi
    00000ec7: 	movq	0x30(%rsp), %rax
    00000ecc: 	movq	%rax, 0x80(%rsp)
.Ltmp1339:
    00000ed4: 	movq	0x10(%rsp), %rdx
    00000ed9: 	movq	0x28(%rsp), %rsi
    00000ede: 	callq	memcpy@PLT # Offset: 3806
    00000ee3: 	movq	0x30(%rsp), %rax
    00000ee8: 	movq	%rax, 0x10(%rsp)
    00000eed: 	movq	0x70(%rsp), %rax
    00000ef2: 	jmp	.Ltmp1317 # Offset: 3826
    00000ef7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1295:
    00000f00: 	movq	0x18(%rsp), %rsi
    00000f05: 	xorl	%edx, %edx
    00000f07: 	movq	%rbp, %rdi
    00000f0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3850
    00000f0f: 	movq	%rax, 0x70(%rsp)
    00000f14: 	movq	%rax, %rdi
    00000f17: 	movq	0x30(%rsp), %rax
    00000f1c: 	movq	%rax, 0x80(%rsp)
.Ltmp1341:
    00000f24: 	movq	0x10(%rsp), %rdx
    00000f29: 	movq	0x28(%rsp), %rsi
    00000f2e: 	callq	memcpy@PLT # Offset: 3886
    00000f33: 	movq	0x30(%rsp), %rax
    00000f38: 	movq	%rax, 0x10(%rsp)
    00000f3d: 	movq	0x70(%rsp), %rax
    00000f42: 	jmp	.Ltmp1321 # Offset: 3906
    00000f47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1306:
    00000f50: 	movq	0x18(%rsp), %rsi
    00000f55: 	xorl	%edx, %edx
    00000f57: 	movq	%r14, %rdi
    00000f5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3930
    00000f5f: 	movq	%rax, 0x90(%rsp)
    00000f67: 	movq	%rax, %rdi
    00000f6a: 	movq	0x30(%rsp), %rax
    00000f6f: 	movq	%rax, 0xa0(%rsp)
.Ltmp1343:
    00000f77: 	movq	%r12, %rdx
    00000f7a: 	movq	%rbp, %rsi
    00000f7d: 	callq	memcpy@PLT # Offset: 3965
    00000f82: 	movq	0x30(%rsp), %r12
    00000f87: 	movq	0x90(%rsp), %rax
    00000f8f: 	jmp	.Ltmp1325 # Offset: 3983
    00000f94: 	nopl	(%rax) # Size: 4
.Ltmp1279:
    00000f98: 	movq	0x18(%rsp), %rsi
    00000f9d: 	xorl	%edx, %edx
    00000f9f: 	movq	%rbp, %rdi
    00000fa2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4002
    00000fa7: 	movq	%rax, 0x70(%rsp)
    00000fac: 	movq	%rax, %rdi
    00000faf: 	movq	0x30(%rsp), %rax
    00000fb4: 	movq	%rax, 0x80(%rsp)
.Ltmp1338:
    00000fbc: 	movq	0x10(%rsp), %rdx
    00000fc1: 	movq	0x28(%rsp), %rsi
    00000fc6: 	callq	memcpy@PLT # Offset: 4038
    00000fcb: 	movq	0x30(%rsp), %rax
    00000fd0: 	movq	%rax, 0x10(%rsp)
    00000fd5: 	movq	0x70(%rsp), %rax
    00000fda: 	jmp	.Ltmp1315 # Offset: 4058
    00000fdf: 	nop # Size: 1
.Ltmp1287:
    00000fe0: 	movq	0x18(%rsp), %rsi
    00000fe5: 	xorl	%edx, %edx
    00000fe7: 	movq	%rbp, %rdi
    00000fea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4074
    00000fef: 	movq	%rax, 0x70(%rsp)
    00000ff4: 	movq	%rax, %rdi
    00000ff7: 	movq	0x30(%rsp), %rax
    00000ffc: 	movq	%rax, 0x80(%rsp)
.Ltmp1342:
    00001004: 	movq	0x10(%rsp), %rdx
    00001009: 	movq	0x28(%rsp), %rsi
    0000100e: 	callq	memcpy@PLT # Offset: 4110
    00001013: 	movq	0x30(%rsp), %rax
    00001018: 	movq	%rax, 0x10(%rsp)
    0000101d: 	movq	0x70(%rsp), %rax
    00001022: 	jmp	.Ltmp1323 # Offset: 4130
    00001027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1241:
    00001030: 	movdqu	0x10(%rax), %xmm3
    00001035: 	movaps	%xmm3, 0xa0(%rsp)
    0000103d: 	jmp	.Ltmp1326 # Offset: 4157
    00001042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1249:
    00001048: 	movdqu	0x10(%rax), %xmm4
    0000104d: 	movaps	%xmm4, 0xa0(%rsp)
    00001055: 	jmp	.Ltmp1327 # Offset: 4181
    0000105a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1260:
    00001060: 	movdqu	0x10(%rax), %xmm6
    00001065: 	movaps	%xmm6, 0xa0(%rsp)
    0000106d: 	jmp	.Ltmp1328 # Offset: 4205
    00001072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1257:
    00001078: 	movdqu	0x10(%rax), %xmm5
    0000107d: 	movaps	%xmm5, 0xa0(%rsp)
    00001085: 	jmp	.Ltmp1329 # Offset: 4229
    0000108a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1266:
    00001090: 	movdqu	0x10(%rax), %xmm3
    00001095: 	movaps	%xmm3, 0xa0(%rsp)
    0000109d: 	jmp	.Ltmp1330 # Offset: 4253
    000010a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1263:
    000010a8: 	movdqu	0x10(%rax), %xmm7
    000010ad: 	movaps	%xmm7, 0xa0(%rsp)
    000010b5: 	jmp	.Ltmp1331 # Offset: 4277
    000010ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1298:
    000010c0: 	movdqu	0x10(%rax), %xmm7
    000010c5: 	movaps	%xmm7, 0xa0(%rsp)
    000010cd: 	jmp	.Ltmp1332 # Offset: 4301
    000010d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1301:
    000010d8: 	movdqu	0x10(%rax), %xmm4
    000010dd: 	movaps	%xmm4, 0xa0(%rsp)
    000010e5: 	jmp	.Ltmp1333 # Offset: 4325
    000010ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1274:
    000010f0: 	movdqu	0x10(%rax), %xmm4
    000010f5: 	movaps	%xmm4, 0xa0(%rsp)
    000010fd: 	jmp	.Ltmp1334 # Offset: 4349
    00001102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1282:
    00001108: 	movdqu	0x10(%rax), %xmm5
    0000110d: 	movaps	%xmm5, 0xa0(%rsp)
    00001115: 	jmp	.Ltmp1335 # Offset: 4373
    0000111a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1290:
    00001120: 	movdqu	0x10(%rax), %xmm6
    00001125: 	movaps	%xmm6, 0xa0(%rsp)
    0000112d: 	jmp	.Ltmp1336 # Offset: 4397
.Ltmp1248:
    00001132: 	leaq	DATAat0x32182(%rip), %rdi
    00001139: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4409
.Ltmp1253:
    0000113e: 	leaq	DATAat0x32158(%rip), %rdi
    00001145: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4421
.Ltmp1256:
    0000114a: 	leaq	DATAat0x32182(%rip), %rdi
    00001151: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4433
.Ltmp1270:
    00001156: 	leaq	DATAat0x32158(%rip), %rdi
    0000115d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4445
.Ltmp1273:
    00001162: 	leaq	DATAat0x32182(%rip), %rdi
    00001169: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4457
.Ltmp1278:
    0000116e: 	leaq	DATAat0x32158(%rip), %rdi
    00001175: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4469
.Ltmp1281:
    0000117a: 	leaq	DATAat0x32182(%rip), %rdi
    00001181: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4481
.Ltmp1286:
    00001186: 	leaq	DATAat0x32158(%rip), %rdi
    0000118d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4493
.Ltmp1289:
    00001192: 	leaq	DATAat0x32182(%rip), %rdi
    00001199: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4505
.Ltmp1294:
    0000119e: 	leaq	DATAat0x32158(%rip), %rdi
    000011a5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4517
.Ltmp1297:
    000011aa: 	leaq	DATAat0x32182(%rip), %rdi
    000011b1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4529
.Ltmp1305:
    000011b6: 	leaq	DATAat0x32158(%rip), %rdi
    000011bd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4541
.Ltmp1308:
    000011c2: 	leaq	DATAat0x32182(%rip), %rdi
    000011c9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4553
.Ltmp1311:
    000011ce: 	callq	__stack_chk_fail@PLT # Offset: 4558
.Ltmp1312:
    000011d3: 	movq	%r12, %rdi
    000011d6: 	jmp	.Ltmp1337 # Offset: 4566
.Ltmp1314:
    000011db: 	movq	%r12, %rdi
    000011de: 	jmp	.Ltmp1338 # Offset: 4574
.Ltmp1316:
    000011e3: 	movq	%r12, %rdi
    000011e6: 	jmp	.Ltmp1339 # Offset: 4582
.Ltmp1318:
    000011eb: 	movq	%r12, %rdi
    000011ee: 	jmp	.Ltmp1340 # Offset: 4590
.Ltmp1320:
    000011f3: 	movq	%r12, %rdi
    000011f6: 	jmp	.Ltmp1341 # Offset: 4598
.Ltmp1322:
    000011fb: 	movq	%r12, %rdi
    000011fe: 	jmp	.Ltmp1342 # Offset: 4606
.Ltmp1324:
    00001203: 	movq	%rbx, %rdi
    00001206: 	jmp	.Ltmp1343 # Offset: 4614
.Ltmp1245:
    0000120b: 	leaq	DATAat0x32158(%rip), %rdi
    00001212: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4626
    00001217: 	endbr64
.Ltmp1349:
    0000121b: 	movq	%rax, %rbp
    0000121e: 	jmp	.Ltmp1344 # Offset: 4638
    00001220: 	endbr64
.Ltmp1346:
    00001224: 	movq	%rax, %rbp
    00001227: 	jmp	.Ltmp1345 # Offset: 4647
    00001229: 	endbr64
    0000122d: 	jmp	.Ltmp1346 # Offset: 4653
.Ltmp1344:
    0000122f: 	movq	0x90(%rsp), %rdi
    00001237: 	cmpq	%rbx, %rdi
    0000123a: 	je	.Ltmp1345 # Offset: 4666
    0000123c: 	movq	0xa0(%rsp), %rax
    00001244: 	leaq	0x1(%rax), %rsi
    00001248: 	callq	_ZdlPvm@PLT # Offset: 4680
.Ltmp1345:
    0000124d: 	movq	0x70(%rsp), %rdi
    00001252: 	cmpq	%r12, %rdi
    00001255: 	je	.Ltmp1347 # Offset: 4693
.Ltmp1353:
    00001257: 	movq	0x80(%rsp), %rax
    0000125f: 	leaq	0x1(%rax), %rsi
    00001263: 	callq	_ZdlPvm@PLT # Offset: 4707
.Ltmp1347:
    00001268: 	movq	0x50(%rsp), %rdi
    0000126d: 	cmpq	0x20(%rsp), %rdi
    00001272: 	je	.Ltmp1348 # Offset: 4722
    00001274: 	movq	0x60(%rsp), %rax
    00001279: 	leaq	0x1(%rax), %rsi
    0000127d: 	callq	_ZdlPvm@PLT # Offset: 4733
.Ltmp1348:
    00001282: 	movq	%rbp, %rdi
    00001285: 	callq	_Unwind_Resume@PLT # Offset: 4741
    0000128a: 	endbr64
    0000128e: 	jmp	.Ltmp1346 # Offset: 4750
    00001290: 	endbr64
    00001294: 	jmp	.Ltmp1349 # Offset: 4756
    00001296: 	endbr64
    0000129a: 	jmp	.Ltmp1346 # Offset: 4762
    0000129c: 	endbr64
    000012a0: 	jmp	.Ltmp1349 # Offset: 4768
    000012a5: 	endbr64
    000012a9: 	jmp	.Ltmp1346 # Offset: 4777
    000012ae: 	endbr64
    000012b2: 	jmp	.Ltmp1349 # Offset: 4786
    000012b7: 	endbr64
    000012bb: 	jmp	.Ltmp1346 # Offset: 4795
    000012c0: 	endbr64
    000012c4: 	jmp	.Ltmp1346 # Offset: 4804
    000012c9: 	endbr64
    000012cd: 	jmp	.Ltmp1346 # Offset: 4813
    000012d2: 	endbr64
    000012d6: 	jmp	.Ltmp1349 # Offset: 4822
    000012db: 	endbr64
    000012df: 	jmp	.Ltmp1346 # Offset: 4831
    000012e4: 	endbr64
    000012e8: 	jmp	.Ltmp1349 # Offset: 4840
    000012ed: 	endbr64
.Ltmp1351:
    000012f1: 	movq	%rax, %rbp
    000012f4: 	jmp	.Ltmp1350 # Offset: 4852
    000012f6: 	endbr64
    000012fa: 	jmp	.Ltmp1351 # Offset: 4858
    000012fc: 	endbr64
    00001300: 	movq	%rax, %rbp
    00001303: 	jmp	.Ltmp1347 # Offset: 4867
    00001308: 	endbr64
    0000130c: 	movq	%rax, %rbp
    0000130f: 	jmp	.Ltmp1352 # Offset: 4879
.Ltmp1350:
    00001311: 	movq	0x90(%rsp), %rdi
    00001319: 	cmpq	%rbx, %rdi
    0000131c: 	je	.Ltmp1347 # Offset: 4892
    00001322: 	movq	0xa0(%rsp), %rax
    0000132a: 	leaq	0x1(%rax), %rsi
    0000132e: 	callq	_ZdlPvm@PLT # Offset: 4910
    00001333: 	jmp	.Ltmp1347 # Offset: 4915
.Ltmp1354:
    00001338: 	movq	0x90(%rsp), %rdi
    00001340: 	cmpq	%rbx, %rdi
    00001343: 	je	.Ltmp1352 # Offset: 4931
    00001345: 	movq	0xa0(%rsp), %rax
    0000134d: 	leaq	0x1(%rax), %rsi
    00001351: 	callq	_ZdlPvm@PLT # Offset: 4945
.Ltmp1352:
    00001356: 	movq	0x70(%rsp), %rdi
    0000135b: 	leaq	0x80(%rsp), %rax
    00001363: 	cmpq	%rax, %rdi
    00001366: 	jne	.Ltmp1353 # Offset: 4966
    0000136c: 	jmp	.Ltmp1347 # Offset: 4972
    00001371: 	endbr64
    00001375: 	jmp	.Ltmp1346 # Offset: 4981
    0000137a: 	endbr64
    0000137e: 	jmp	.Ltmp1349 # Offset: 4990
    00001383: 	endbr64
    00001387: 	jmp	.Ltmp1346 # Offset: 4999
    0000138c: 	endbr64
    00001390: 	jmp	.Ltmp1349 # Offset: 5008
    00001395: 	endbr64
    00001399: 	jmp	.Ltmp1346 # Offset: 5017
    0000139e: 	endbr64
    000013a2: 	jmp	.Ltmp1346 # Offset: 5026
    000013a7: 	endbr64
    000013ab: 	jmp	.Ltmp1346 # Offset: 5035
    000013b0: 	endbr64
    000013b4: 	movq	%rax, %rbp
    000013b7: 	jmp	.Ltmp1354 # Offset: 5047
    000013bc: 	endbr64
    000013c0: 	jmp	.Ltmp1346 # Offset: 5056
    000013c5: 	endbr64
    000013c9: 	jmp	.Ltmp1346 # Offset: 5065
    000013ce: 	endbr64
    000013d2: 	jmp	.Ltmp1349 # Offset: 5074
    000013d7: 	endbr64
    000013db: 	jmp	.Ltmp1349 # Offset: 5083
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x24270
  Size        : 0x234
  MaxSize     : 0x240
  Offset      : 0x24270
  Section     : .text
  Orc Section : .local.text._Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x8(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp1355 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1357:
    00000050: 	movq	%r12, %rdx
    00000053: 	movq	%rbp, %rsi
    00000056: 	movq	%rbx, %rdi
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	fildl	init_value(%rip)
    00000062: 	fmul	%st(0), %st
    00000064: 	fmuls	DATAat0x32620(%rip)
    0000006a: 	fsubrp	%st, %st(1)
    0000006c: 	fabs
    0000006e: 	fldl	DATAat0x32618(%rip)
    00000074: 	fxch	%st(1)
    00000076: 	fcompi	%st(1), %st
    00000078: 	fstp	%st(0)
    0000007a: 	ja	.Ltmp1356 # Offset: 122
    00000080: 	addl	$0x1, %r15d
    00000084: 	cmpl	%r15d, iterations(%rip)
    0000008b: 	jg	.Ltmp1357 # Offset: 139
.Ltmp1355:
    0000008d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000094: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000009b: 	subq	$0x20, %rax
    0000009f: 	cmpq	%rax, %rbx
    000000a2: 	je	.Ltmp1358 # Offset: 162
    000000a8: 	leaq	0x10(%rbx), %rdi
    000000ac: 	movq	0x8(%r14), %r12
    000000b0: 	movq	%rdi, (%rbx)
    000000b3: 	movq	(%r14), %rbp
    000000b6: 	movq	%rbp, %rax
    000000b9: 	addq	%r12, %rax
    000000bc: 	je	.Ltmp1359 # Offset: 188
    000000be: 	testq	%rbp, %rbp
    000000c1: 	je	.Ltmp1360 # Offset: 193
.Ltmp1359:
    000000c7: 	movq	%r12, (%rsp)
    000000cb: 	cmpq	$0xf, %r12
    000000cf: 	ja	.Ltmp1361 # Offset: 207
    000000d5: 	cmpq	$0x1, %r12
    000000d9: 	jne	.Ltmp1362 # Offset: 217
    000000df: 	movzbl	(%rbp), %eax
    000000e3: 	movb	%al, 0x10(%rbx)
.Ltmp1365:
    000000e6: 	movq	%r12, 0x8(%rbx)
    000000ea: 	movb	$0x0, (%rdi,%r12)
    000000ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000f6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000fd: 	addq	$0x20, %rax
    00000101: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000108: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000010f: 	je	.Ltmp1363 # Offset: 271
.Ltmp1366:
    00000115: 	movq	-0x20(%rax), %rbp
    00000119: 	callq	clock@PLT # Offset: 281
    0000011e: 	movq	%rax, end_time(%rip)
    00000125: 	movq	0x8(%rsp), %rdx
    0000012a: 	subq	%fs:0x28, %rdx
    00000133: 	jne	.Ltmp1364 # Offset: 307
    00000139: 	subq	start_time(%rip), %rax
    00000140: 	pxor	%xmm0, %xmm0
    00000144: 	movq	%rbp, %rdi
    00000147: 	cvtsi2sd	%rax, %xmm0
    0000014c: 	divsd	DATAat0x32600(%rip), %xmm0
    00000154: 	addq	$0x18, %rsp
    00000158: 	popq	%rbx
    00000159: 	popq	%rbp
    0000015a: 	popq	%r12
    0000015c: 	popq	%r13
    0000015e: 	popq	%r14
    00000160: 	popq	%r15
    00000162: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 354
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1356:
    00000170: 	movq	(%r14), %rdx
    00000173: 	xorl	%eax, %eax
    00000175: 	leaq	DATAat0x321c8(%rip), %rsi
    0000017c: 	addl	$0x1, %r15d
    00000180: 	movl	$0x1, %edi
    00000185: 	callq	__printf_chk@PLT # Offset: 389
    0000018a: 	cmpl	%r15d, iterations(%rip)
    00000191: 	jg	.Ltmp1357 # Offset: 401
    00000197: 	jmp	.Ltmp1355 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1361:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	%rsp, %rsi
    000001a6: 	xorl	%edx, %edx
    000001a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 424
    000001ad: 	movq	%rax, (%rbx)
    000001b0: 	movq	%rax, %rdi
    000001b3: 	movq	(%rsp), %rax
    000001b7: 	movq	%rax, 0x10(%rbx)
.Ltmp1367:
    000001bb: 	movq	%r12, %rdx
    000001be: 	movq	%rbp, %rsi
    000001c1: 	callq	memcpy@PLT # Offset: 449
    000001c6: 	movq	(%rsp), %r12
    000001ca: 	movq	(%rbx), %rdi
    000001cd: 	jmp	.Ltmp1365 # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1358:
    000001d8: 	movq	%r14, %rsi
    000001db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fc: 	jne	.Ltmp1366 # Offset: 508
.Ltmp1363:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp1366 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp1362:
    00000218: 	testq	%r12, %r12
    0000021b: 	je	.Ltmp1365 # Offset: 539
    00000221: 	jmp	.Ltmp1367 # Offset: 545
.Ltmp1364:
    00000223: 	callq	__stack_chk_fail@PLT # Offset: 547
.Ltmp1360:
    00000228: 	leaq	DATAat0x32158(%rip), %rdi
    0000022f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIeEvv" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x244b0
  Size        : 0x13a7
  MaxSize     : 0x13b0
  Offset      : 0x244b0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIeEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x3e000(%rsp), %r11
.Ltmp1368:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1368 # Offset: 37
    00000027: 	subq	$0x8c8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm0
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x3e8b8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movb	$0x65, 0x6a(%rsp)
    00000060: 	movq	%rax, 0x20(%rsp)
    00000065: 	leaq	0xb0(%rsp), %r14
    0000006d: 	leaq	0x1f4b0(%rsp), %r13
    00000075: 	movq	%rax, 0x50(%rsp)
    0000007a: 	movabsq	$0x756f6420676e6f6c, %rax
    00000084: 	movq	%rax, 0x60(%rsp)
    00000089: 	movl	$0x6c62, %eax
    0000008e: 	movw	%ax, 0x68(%rsp)
    00000093: 	movq	$0xb, 0x58(%rsp)
    0000009c: 	movb	$0x0, 0x6b(%rsp)
    000000a1: 	movq	%rdi, 0x18(%rsp)
    000000a6: 	movaps	%xmm0, 0x30(%rsp)
    000000ab: 	movaps	%xmm1, 0x40(%rsp)
    000000b0: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 176
    000000b5: 	fildl	init_value(%rip)
    000000bb: 	movq	%r14, %rax
    000000be: 	nop # Size: 2
.Ltmp1369:
    000000c0: 	addq	$0x10, %rax
    000000c4: 	fld	%st(0)
    000000c6: 	fstpt	-0x10(%rax)
    000000c9: 	cmpq	%r13, %rax
    000000cc: 	jne	.Ltmp1369 # Offset: 204
    000000ce: 	movq	%r13, %rax
    000000d1: 	leaq	0x3e8b0(%rsp), %rdx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1370:
    000000e0: 	addq	$0x10, %rax
    000000e4: 	fld	%st(0)
    000000e6: 	fstpt	-0x10(%rax)
    000000e9: 	cmpq	%rdx, %rax
    000000ec: 	jne	.Ltmp1370 # Offset: 236
    000000ee: 	fstp	%st(0)
    000000f0: 	movq	0x50(%rsp), %rbp
    000000f5: 	movq	0x58(%rsp), %r15
    000000fa: 	leaq	0x80(%rsp), %r12
    00000102: 	movq	%r12, 0x70(%rsp)
    00000107: 	movq	%rbp, %rax
    0000010a: 	addq	%r15, %rax
    0000010d: 	je	.Ltmp1371 # Offset: 269
    0000010f: 	testq	%rbp, %rbp
    00000112: 	je	.Ltmp1372 # Offset: 274
.Ltmp1371:
    00000118: 	movq	%r15, 0x30(%rsp)
    0000011d: 	cmpq	$0xf, %r15
    00000121: 	ja	.Ltmp1373 # Offset: 289
    00000127: 	cmpq	$0x1, %r15
    0000012b: 	jne	.Ltmp1374 # Offset: 299
    00000131: 	movzbl	(%rbp), %eax
    00000135: 	movb	%al, 0x80(%rsp)
    0000013c: 	movq	%r12, %rax
.Ltmp1443:
    0000013f: 	movq	%r15, 0x78(%rsp)
    00000144: 	movb	$0x0, (%rax,%r15)
    00000149: 	movabsq	$0x3fffffffffffffff, %rax
    00000153: 	subq	0x78(%rsp), %rax
    00000158: 	cmpq	$0x16, %rax
    0000015c: 	jbe	.Ltmp1375 # Offset: 348
    00000162: 	leaq	0x70(%rsp), %rbp
    00000167: 	movl	$0x17, %edx
    0000016c: 	leaq	DATAat0x321d8(%rip), %rsi
    00000173: 	movq	%rbp, %rdi
    00000176: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 374
    0000017b: 	movq	0x58(%rsp), %rdx
    00000180: 	movq	0x50(%rsp), %rsi
    00000185: 	movq	%rbp, %rdi
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 392
    0000018d: 	leaq	0xa0(%rsp), %rbx
    00000195: 	leaq	0x10(%rax), %rdx
    00000199: 	movq	%rbx, 0x90(%rsp)
    000001a1: 	movq	(%rax), %rcx
    000001a4: 	cmpq	%rdx, %rcx
    000001a7: 	je	.Ltmp1376 # Offset: 423
    000001ad: 	movq	%rcx, 0x90(%rsp)
    000001b5: 	movq	0x10(%rax), %rcx
    000001b9: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1457:
    000001c1: 	movq	0x8(%rax), %rcx
    000001c5: 	leaq	0x90(%rsp), %r15
    000001cd: 	movq	%r13, %rsi
    000001d0: 	movq	%r14, %rdi
    000001d3: 	movq	%r15, %r8
    000001d6: 	movq	%rcx, 0x98(%rsp)
    000001de: 	leaq	_Z17inner_product_stdIPKeeET0_T_S3_m(%rip), %rcx
    000001e5: 	movq	%rdx, (%rax)
    000001e8: 	movl	$0x1f40, %edx
    000001ed: 	movq	$0x0, 0x8(%rax)
    000001f5: 	movb	$0x0, 0x10(%rax)
    000001f9: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 505
    000001fe: 	movq	0x90(%rsp), %rdi
    00000206: 	cmpq	%rbx, %rdi
    00000209: 	je	.Ltmp1377 # Offset: 521
    0000020b: 	movq	0xa0(%rsp), %rax
    00000213: 	leaq	0x1(%rax), %rsi
    00000217: 	callq	_ZdlPvm@PLT # Offset: 535
.Ltmp1377:
    0000021c: 	movq	0x70(%rsp), %rdi
    00000221: 	cmpq	%r12, %rdi
    00000224: 	je	.Ltmp1378 # Offset: 548
    00000226: 	movq	0x80(%rsp), %rax
    0000022e: 	leaq	0x1(%rax), %rsi
    00000232: 	callq	_ZdlPvm@PLT # Offset: 562
.Ltmp1378:
    00000237: 	movq	0x50(%rsp), %rdx
    0000023c: 	movq	0x58(%rsp), %rcx
    00000241: 	movq	%r12, 0x70(%rsp)
    00000246: 	movq	%rdx, %rax
    00000249: 	movq	%rdx, 0x10(%rsp)
    0000024e: 	addq	%rcx, %rax
    00000251: 	movq	%rcx, 0x8(%rsp)
    00000256: 	je	.Ltmp1379 # Offset: 598
    00000258: 	testq	%rdx, %rdx
    0000025b: 	je	.Ltmp1380 # Offset: 603
.Ltmp1379:
    00000261: 	movq	0x8(%rsp), %rax
    00000266: 	movq	%rax, 0x30(%rsp)
    0000026b: 	cmpq	$0xf, %rax
    0000026f: 	ja	.Ltmp1381 # Offset: 623
    00000275: 	cmpq	$0x1, 0x8(%rsp)
    0000027b: 	jne	.Ltmp1382 # Offset: 635
    00000281: 	movq	0x10(%rsp), %rax
    00000286: 	movzbl	(%rax), %eax
    00000289: 	movb	%al, 0x80(%rsp)
    00000290: 	movq	%r12, %rax
.Ltmp1445:
    00000293: 	movq	0x8(%rsp), %rsi
    00000298: 	movq	%rsi, 0x78(%rsp)
    0000029d: 	movb	$0x0, (%rax,%rsi)
    000002a1: 	movabsq	$0x3fffffffffffffff, %rax
    000002ab: 	subq	0x78(%rsp), %rax
    000002b0: 	cmpq	$0x12, %rax
    000002b4: 	jbe	.Ltmp1383 # Offset: 692
    000002ba: 	movl	$0x13, %edx
    000002bf: 	leaq	DATAat0x321f0(%rip), %rsi
    000002c6: 	movq	%rbp, %rdi
    000002c9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 713
    000002ce: 	movq	0x58(%rsp), %rdx
    000002d3: 	movq	0x50(%rsp), %rsi
    000002d8: 	movq	%rbp, %rdi
    000002db: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 731
    000002e0: 	movq	%rbx, 0x90(%rsp)
    000002e8: 	movq	(%rax), %rcx
    000002eb: 	leaq	0x10(%rax), %rdx
    000002ef: 	cmpq	%rdx, %rcx
    000002f2: 	je	.Ltmp1384 # Offset: 754
    000002f8: 	movq	%rcx, 0x90(%rsp)
    00000300: 	movq	0x10(%rax), %rcx
    00000304: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1456:
    0000030c: 	movq	0x8(%rax), %rcx
    00000310: 	movq	%r15, %r8
    00000313: 	movq	%r13, %rsi
    00000316: 	movq	%r14, %rdi
    00000319: 	movq	%rcx, 0x98(%rsp)
    00000321: 	leaq	_Z14inner_product1IPKeeET0_T_S3_m(%rip), %rcx
    00000328: 	movq	%rdx, (%rax)
    0000032b: 	movl	$0x1f40, %edx
    00000330: 	movq	$0x0, 0x8(%rax)
    00000338: 	movb	$0x0, 0x10(%rax)
    0000033c: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 828
    00000341: 	movq	0x90(%rsp), %rdi
    00000349: 	cmpq	%rbx, %rdi
    0000034c: 	je	.Ltmp1385 # Offset: 844
    0000034e: 	movq	0xa0(%rsp), %rax
    00000356: 	leaq	0x1(%rax), %rsi
    0000035a: 	callq	_ZdlPvm@PLT # Offset: 858
.Ltmp1385:
    0000035f: 	movq	0x70(%rsp), %rdi
    00000364: 	cmpq	%r12, %rdi
    00000367: 	je	.Ltmp1386 # Offset: 871
    00000369: 	movq	0x80(%rsp), %rax
    00000371: 	leaq	0x1(%rax), %rsi
    00000375: 	callq	_ZdlPvm@PLT # Offset: 885
.Ltmp1386:
    0000037a: 	movq	0x50(%rsp), %rsi
    0000037f: 	movq	0x58(%rsp), %rcx
    00000384: 	movq	%r12, 0x70(%rsp)
    00000389: 	movq	%rsi, %rax
    0000038c: 	movq	%rsi, 0x10(%rsp)
    00000391: 	addq	%rcx, %rax
    00000394: 	movq	%rcx, 0x8(%rsp)
    00000399: 	je	.Ltmp1387 # Offset: 921
    0000039b: 	testq	%rsi, %rsi
    0000039e: 	je	.Ltmp1388 # Offset: 926
.Ltmp1387:
    000003a4: 	movq	0x8(%rsp), %rax
    000003a9: 	movq	%rax, 0x30(%rsp)
    000003ae: 	cmpq	$0xf, %rax
    000003b2: 	ja	.Ltmp1389 # Offset: 946
    000003b8: 	cmpq	$0x1, 0x8(%rsp)
    000003be: 	jne	.Ltmp1390 # Offset: 958
    000003c4: 	movq	0x10(%rsp), %rax
    000003c9: 	movzbl	(%rax), %eax
    000003cc: 	movb	%al, 0x80(%rsp)
    000003d3: 	movq	%r12, %rax
.Ltmp1449:
    000003d6: 	movq	0x8(%rsp), %rsi
    000003db: 	movq	%rsi, 0x78(%rsp)
    000003e0: 	movb	$0x0, (%rax,%rsi)
    000003e4: 	movabsq	$0x3fffffffffffffff, %rax
    000003ee: 	subq	0x78(%rsp), %rax
    000003f3: 	cmpq	$0x12, %rax
    000003f7: 	jbe	.Ltmp1391 # Offset: 1015
    000003fd: 	movl	$0x13, %edx
    00000402: 	leaq	DATAat0x32204(%rip), %rsi
    00000409: 	movq	%rbp, %rdi
    0000040c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1036
    00000411: 	movq	0x58(%rsp), %rdx
    00000416: 	movq	0x50(%rsp), %rsi
    0000041b: 	movq	%rbp, %rdi
    0000041e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1054
    00000423: 	movq	%rbx, 0x90(%rsp)
    0000042b: 	movq	(%rax), %rcx
    0000042e: 	leaq	0x10(%rax), %rdx
    00000432: 	cmpq	%rdx, %rcx
    00000435: 	je	.Ltmp1392 # Offset: 1077
    0000043b: 	movq	%rcx, 0x90(%rsp)
    00000443: 	movq	0x10(%rax), %rcx
    00000447: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1466:
    0000044f: 	movq	0x8(%rax), %rcx
    00000453: 	movq	%r15, %r8
    00000456: 	movq	%r13, %rsi
    00000459: 	movq	%r14, %rdi
    0000045c: 	movq	%rcx, 0x98(%rsp)
    00000464: 	leaq	_Z14inner_product2IPKeeET0_T_S3_m(%rip), %rcx
    0000046b: 	movq	%rdx, (%rax)
    0000046e: 	movl	$0x1f40, %edx
    00000473: 	movq	$0x0, 0x8(%rax)
    0000047b: 	movb	$0x0, 0x10(%rax)
    0000047f: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1151
    00000484: 	movq	0x90(%rsp), %rdi
    0000048c: 	cmpq	%rbx, %rdi
    0000048f: 	je	.Ltmp1393 # Offset: 1167
    00000491: 	movq	0xa0(%rsp), %rax
    00000499: 	leaq	0x1(%rax), %rsi
    0000049d: 	callq	_ZdlPvm@PLT # Offset: 1181
.Ltmp1393:
    000004a2: 	movq	0x70(%rsp), %rdi
    000004a7: 	cmpq	%r12, %rdi
    000004aa: 	je	.Ltmp1394 # Offset: 1194
    000004ac: 	movq	0x80(%rsp), %rax
    000004b4: 	leaq	0x1(%rax), %rsi
    000004b8: 	callq	_ZdlPvm@PLT # Offset: 1208
.Ltmp1394:
    000004bd: 	movq	0x50(%rsp), %rdx
    000004c2: 	movq	0x58(%rsp), %rcx
    000004c7: 	movq	%r12, 0x70(%rsp)
    000004cc: 	movq	%rdx, %rax
    000004cf: 	movq	%rdx, 0x10(%rsp)
    000004d4: 	addq	%rcx, %rax
    000004d7: 	movq	%rcx, 0x8(%rsp)
    000004dc: 	je	.Ltmp1395 # Offset: 1244
    000004de: 	testq	%rdx, %rdx
    000004e1: 	je	.Ltmp1396 # Offset: 1249
.Ltmp1395:
    000004e7: 	movq	0x8(%rsp), %rax
    000004ec: 	movq	%rax, 0x30(%rsp)
    000004f1: 	cmpq	$0xf, %rax
    000004f5: 	ja	.Ltmp1397 # Offset: 1269
    000004fb: 	cmpq	$0x1, 0x8(%rsp)
    00000501: 	jne	.Ltmp1398 # Offset: 1281
    00000507: 	movq	0x10(%rsp), %rax
    0000050c: 	movzbl	(%rax), %eax
    0000050f: 	movb	%al, 0x80(%rsp)
    00000516: 	movq	%r12, %rax
.Ltmp1447:
    00000519: 	movq	0x8(%rsp), %rdx
    0000051e: 	movq	%rdx, 0x78(%rsp)
    00000523: 	movb	$0x0, (%rax,%rdx)
    00000527: 	movabsq	$0x3fffffffffffffff, %rax
    00000531: 	subq	0x78(%rsp), %rax
    00000536: 	cmpq	$0x12, %rax
    0000053a: 	jbe	.Ltmp1399 # Offset: 1338
    00000540: 	movl	$0x13, %edx
    00000545: 	leaq	DATAat0x32218(%rip), %rsi
    0000054c: 	movq	%rbp, %rdi
    0000054f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1359
    00000554: 	movq	0x58(%rsp), %rdx
    00000559: 	movq	0x50(%rsp), %rsi
    0000055e: 	movq	%rbp, %rdi
    00000561: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1377
    00000566: 	movq	%rbx, 0x90(%rsp)
    0000056e: 	movq	(%rax), %rcx
    00000571: 	leaq	0x10(%rax), %rdx
    00000575: 	cmpq	%rdx, %rcx
    00000578: 	je	.Ltmp1400 # Offset: 1400
    0000057e: 	movq	%rcx, 0x90(%rsp)
    00000586: 	movq	0x10(%rax), %rcx
    0000058a: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1460:
    00000592: 	movq	0x8(%rax), %rcx
    00000596: 	movq	%r15, %r8
    00000599: 	movq	%r13, %rsi
    0000059c: 	movq	%r14, %rdi
    0000059f: 	movq	%rcx, 0x98(%rsp)
    000005a7: 	leaq	_Z14inner_product3IPKeeET0_T_S3_m(%rip), %rcx
    000005ae: 	movq	%rdx, (%rax)
    000005b1: 	movl	$0x1f40, %edx
    000005b6: 	movq	$0x0, 0x8(%rax)
    000005be: 	movb	$0x0, 0x10(%rax)
    000005c2: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1474
    000005c7: 	movq	0x90(%rsp), %rdi
    000005cf: 	cmpq	%rbx, %rdi
    000005d2: 	je	.Ltmp1401 # Offset: 1490
    000005d4: 	movq	0xa0(%rsp), %rax
    000005dc: 	leaq	0x1(%rax), %rsi
    000005e0: 	callq	_ZdlPvm@PLT # Offset: 1504
.Ltmp1401:
    000005e5: 	movq	0x70(%rsp), %rdi
    000005ea: 	cmpq	%r12, %rdi
    000005ed: 	je	.Ltmp1402 # Offset: 1517
    000005ef: 	movq	0x80(%rsp), %rax
    000005f7: 	leaq	0x1(%rax), %rsi
    000005fb: 	callq	_ZdlPvm@PLT # Offset: 1531
.Ltmp1402:
    00000600: 	movq	0x50(%rsp), %rcx
    00000605: 	movq	0x58(%rsp), %rsi
    0000060a: 	movq	%r12, 0x70(%rsp)
    0000060f: 	movq	%rcx, %rax
    00000612: 	movq	%rcx, 0x10(%rsp)
    00000617: 	addq	%rsi, %rax
    0000061a: 	movq	%rsi, 0x8(%rsp)
    0000061f: 	je	.Ltmp1403 # Offset: 1567
    00000621: 	testq	%rcx, %rcx
    00000624: 	je	.Ltmp1404 # Offset: 1572
.Ltmp1403:
    0000062a: 	movq	0x8(%rsp), %rax
    0000062f: 	movq	%rax, 0x30(%rsp)
    00000634: 	cmpq	$0xf, %rax
    00000638: 	ja	.Ltmp1405 # Offset: 1592
    0000063e: 	cmpq	$0x1, 0x8(%rsp)
    00000644: 	jne	.Ltmp1406 # Offset: 1604
    0000064a: 	movq	0x10(%rsp), %rax
    0000064f: 	movzbl	(%rax), %eax
    00000652: 	movb	%al, 0x80(%rsp)
    00000659: 	movq	%r12, %rax
.Ltmp1451:
    0000065c: 	movq	0x8(%rsp), %rdx
    00000661: 	movq	%rdx, 0x78(%rsp)
    00000666: 	movb	$0x0, (%rax,%rdx)
    0000066a: 	movabsq	$0x3fffffffffffffff, %rax
    00000674: 	subq	0x78(%rsp), %rax
    00000679: 	cmpq	$0x12, %rax
    0000067d: 	jbe	.Ltmp1407 # Offset: 1661
    00000683: 	movl	$0x13, %edx
    00000688: 	leaq	DATAat0x3222c(%rip), %rsi
    0000068f: 	movq	%rbp, %rdi
    00000692: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1682
    00000697: 	movq	0x58(%rsp), %rdx
    0000069c: 	movq	0x50(%rsp), %rsi
    000006a1: 	movq	%rbp, %rdi
    000006a4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1700
    000006a9: 	movq	%rbx, 0x90(%rsp)
    000006b1: 	movq	(%rax), %rcx
    000006b4: 	leaq	0x10(%rax), %rdx
    000006b8: 	cmpq	%rdx, %rcx
    000006bb: 	je	.Ltmp1408 # Offset: 1723
    000006c1: 	movq	%rcx, 0x90(%rsp)
    000006c9: 	movq	0x10(%rax), %rcx
    000006cd: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1461:
    000006d5: 	movq	0x8(%rax), %rcx
    000006d9: 	movq	%r15, %r8
    000006dc: 	movq	%r13, %rsi
    000006df: 	movq	%r14, %rdi
    000006e2: 	movq	%rcx, 0x98(%rsp)
    000006ea: 	leaq	_Z14inner_product4IPKeeET0_T_S3_m(%rip), %rcx
    000006f1: 	movq	%rdx, (%rax)
    000006f4: 	movl	$0x1f40, %edx
    000006f9: 	movq	$0x0, 0x8(%rax)
    00000701: 	movb	$0x0, 0x10(%rax)
    00000705: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1797
    0000070a: 	movq	0x90(%rsp), %rdi
    00000712: 	cmpq	%rbx, %rdi
    00000715: 	je	.Ltmp1409 # Offset: 1813
    00000717: 	movq	0xa0(%rsp), %rax
    0000071f: 	leaq	0x1(%rax), %rsi
    00000723: 	callq	_ZdlPvm@PLT # Offset: 1827
.Ltmp1409:
    00000728: 	movq	0x70(%rsp), %rdi
    0000072d: 	cmpq	%r12, %rdi
    00000730: 	je	.Ltmp1410 # Offset: 1840
    00000732: 	movq	0x80(%rsp), %rax
    0000073a: 	leaq	0x1(%rax), %rsi
    0000073e: 	callq	_ZdlPvm@PLT # Offset: 1854
.Ltmp1410:
    00000743: 	leaq	0x50(%rsp), %rax
    00000748: 	leaq	DATAat0x32240(%rip), %rdx
    0000074f: 	movq	%rbp, %rdi
    00000752: 	movq	%rax, %rsi
    00000755: 	movq	%rax, 0x8(%rsp)
    0000075a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1882
    0000075f: 	movq	0x58(%rsp), %rdx
    00000764: 	movq	0x50(%rsp), %rsi
    00000769: 	movq	%rbp, %rdi
    0000076c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1900
    00000771: 	movq	%rbx, 0x90(%rsp)
    00000779: 	movq	(%rax), %rcx
    0000077c: 	leaq	0x10(%rax), %rdx
    00000780: 	cmpq	%rdx, %rcx
    00000783: 	je	.Ltmp1411 # Offset: 1923
    00000789: 	movq	%rcx, 0x90(%rsp)
    00000791: 	movq	0x10(%rax), %rcx
    00000795: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1465:
    0000079d: 	movq	0x8(%rax), %rcx
    000007a1: 	movq	%r15, %r8
    000007a4: 	movq	%r13, %rsi
    000007a7: 	movq	%r14, %rdi
    000007aa: 	movq	%rcx, 0x98(%rsp)
    000007b2: 	leaq	_Z14inner_product5IPKeeET0_T_S3_m(%rip), %rcx
    000007b9: 	movq	%rdx, (%rax)
    000007bc: 	movl	$0x1f40, %edx
    000007c1: 	movq	$0x0, 0x8(%rax)
    000007c9: 	movb	$0x0, 0x10(%rax)
    000007cd: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1997
    000007d2: 	movq	0x90(%rsp), %rdi
    000007da: 	cmpq	%rbx, %rdi
    000007dd: 	je	.Ltmp1412 # Offset: 2013
    000007df: 	movq	0xa0(%rsp), %rax
    000007e7: 	leaq	0x1(%rax), %rsi
    000007eb: 	callq	_ZdlPvm@PLT # Offset: 2027
.Ltmp1412:
    000007f0: 	movq	0x70(%rsp), %rdi
    000007f5: 	cmpq	%r12, %rdi
    000007f8: 	je	.Ltmp1413 # Offset: 2040
    000007fa: 	movq	0x80(%rsp), %rax
    00000802: 	leaq	0x1(%rax), %rsi
    00000806: 	callq	_ZdlPvm@PLT # Offset: 2054
.Ltmp1413:
    0000080b: 	movq	0x50(%rsp), %rsi
    00000810: 	movq	0x58(%rsp), %rdi
    00000815: 	movq	%r12, 0x70(%rsp)
    0000081a: 	movq	%rsi, %rax
    0000081d: 	movq	%rsi, 0x28(%rsp)
    00000822: 	addq	%rdi, %rax
    00000825: 	movq	%rdi, 0x10(%rsp)
    0000082a: 	je	.Ltmp1414 # Offset: 2090
    0000082c: 	testq	%rsi, %rsi
    0000082f: 	je	.Ltmp1415 # Offset: 2095
.Ltmp1414:
    00000835: 	movq	0x10(%rsp), %rax
    0000083a: 	movq	%rax, 0x30(%rsp)
    0000083f: 	cmpq	$0xf, %rax
    00000843: 	ja	.Ltmp1416 # Offset: 2115
    00000849: 	cmpq	$0x1, 0x10(%rsp)
    0000084f: 	jne	.Ltmp1417 # Offset: 2127
    00000855: 	movq	0x28(%rsp), %rax
    0000085a: 	movzbl	(%rax), %eax
    0000085d: 	movb	%al, 0x80(%rsp)
    00000864: 	movq	%r12, %rax
.Ltmp1455:
    00000867: 	movq	0x10(%rsp), %rcx
    0000086c: 	movq	%rcx, 0x78(%rsp)
    00000871: 	movb	$0x0, (%rax,%rcx)
    00000875: 	movabsq	$0x3fffffffffffffff, %rax
    0000087f: 	subq	0x78(%rsp), %rax
    00000884: 	cmpq	$0x12, %rax
    00000888: 	jbe	.Ltmp1418 # Offset: 2184
    0000088e: 	movl	$0x13, %edx
    00000893: 	leaq	DATAat0x32254(%rip), %rsi
    0000089a: 	movq	%rbp, %rdi
    0000089d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2205
    000008a2: 	movq	0x58(%rsp), %rdx
    000008a7: 	movq	0x50(%rsp), %rsi
    000008ac: 	movq	%rbp, %rdi
    000008af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2223
    000008b4: 	movq	%rbx, 0x90(%rsp)
    000008bc: 	movq	(%rax), %rcx
    000008bf: 	leaq	0x10(%rax), %rdx
    000008c3: 	cmpq	%rdx, %rcx
    000008c6: 	je	.Ltmp1419 # Offset: 2246
    000008cc: 	movq	%rcx, 0x90(%rsp)
    000008d4: 	movq	0x10(%rax), %rcx
    000008d8: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1464:
    000008e0: 	movq	0x8(%rax), %rcx
    000008e4: 	movq	%r15, %r8
    000008e7: 	movq	%r13, %rsi
    000008ea: 	movq	%r14, %rdi
    000008ed: 	movq	%rcx, 0x98(%rsp)
    000008f5: 	leaq	_Z14inner_product6IPKeeET0_T_S3_m(%rip), %rcx
    000008fc: 	movq	%rdx, (%rax)
    000008ff: 	movl	$0x1f40, %edx
    00000904: 	movq	$0x0, 0x8(%rax)
    0000090c: 	movb	$0x0, 0x10(%rax)
    00000910: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2320
    00000915: 	movq	0x90(%rsp), %rdi
    0000091d: 	cmpq	%rbx, %rdi
    00000920: 	je	.Ltmp1420 # Offset: 2336
    00000922: 	movq	0xa0(%rsp), %rax
    0000092a: 	leaq	0x1(%rax), %rsi
    0000092e: 	callq	_ZdlPvm@PLT # Offset: 2350
.Ltmp1420:
    00000933: 	movq	0x70(%rsp), %rdi
    00000938: 	cmpq	%r12, %rdi
    0000093b: 	je	.Ltmp1421 # Offset: 2363
    0000093d: 	movq	0x80(%rsp), %rax
    00000945: 	leaq	0x1(%rax), %rsi
    00000949: 	callq	_ZdlPvm@PLT # Offset: 2377
.Ltmp1421:
    0000094e: 	movq	0x8(%rsp), %rsi
    00000953: 	leaq	DATAat0x32268(%rip), %rdx
    0000095a: 	movq	%rbp, %rdi
    0000095d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2397
    00000962: 	movq	0x58(%rsp), %rdx
    00000967: 	movq	0x50(%rsp), %rsi
    0000096c: 	movq	%rbp, %rdi
    0000096f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2415
    00000974: 	movq	%rbx, 0x90(%rsp)
    0000097c: 	movq	(%rax), %rcx
    0000097f: 	leaq	0x10(%rax), %rdx
    00000983: 	cmpq	%rdx, %rcx
    00000986: 	je	.Ltmp1422 # Offset: 2438
    0000098c: 	movq	%rcx, 0x90(%rsp)
    00000994: 	movq	0x10(%rax), %rcx
    00000998: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1463:
    000009a0: 	movq	0x8(%rax), %rcx
    000009a4: 	movq	%r15, %r8
    000009a7: 	movq	%r13, %rsi
    000009aa: 	movq	%r14, %rdi
    000009ad: 	movq	%rcx, 0x98(%rsp)
    000009b5: 	leaq	_Z14inner_product7IPKeeET0_T_S3_m(%rip), %rcx
    000009bc: 	movq	%rdx, (%rax)
    000009bf: 	movl	$0x1f40, %edx
    000009c4: 	movq	$0x0, 0x8(%rax)
    000009cc: 	movb	$0x0, 0x10(%rax)
    000009d0: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2512
    000009d5: 	movq	0x90(%rsp), %rdi
    000009dd: 	cmpq	%rbx, %rdi
    000009e0: 	je	.Ltmp1423 # Offset: 2528
    000009e2: 	movq	0xa0(%rsp), %rax
    000009ea: 	leaq	0x1(%rax), %rsi
    000009ee: 	callq	_ZdlPvm@PLT # Offset: 2542
.Ltmp1423:
    000009f3: 	movq	0x70(%rsp), %rdi
    000009f8: 	cmpq	%r12, %rdi
    000009fb: 	je	.Ltmp1424 # Offset: 2555
    000009fd: 	movq	0x80(%rsp), %rax
    00000a05: 	leaq	0x1(%rax), %rsi
    00000a09: 	callq	_ZdlPvm@PLT # Offset: 2569
.Ltmp1424:
    00000a0e: 	movq	0x8(%rsp), %rsi
    00000a13: 	leaq	DATAat0x3227c(%rip), %rdx
    00000a1a: 	movq	%rbp, %rdi
    00000a1d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2589
    00000a22: 	movq	0x58(%rsp), %rdx
    00000a27: 	movq	0x50(%rsp), %rsi
    00000a2c: 	movq	%rbp, %rdi
    00000a2f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2607
    00000a34: 	movq	%rbx, 0x90(%rsp)
    00000a3c: 	movq	(%rax), %rcx
    00000a3f: 	leaq	0x10(%rax), %rdx
    00000a43: 	cmpq	%rdx, %rcx
    00000a46: 	je	.Ltmp1425 # Offset: 2630
    00000a4c: 	movq	%rcx, 0x90(%rsp)
    00000a54: 	movq	0x10(%rax), %rcx
    00000a58: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1462:
    00000a60: 	movq	0x8(%rax), %rcx
    00000a64: 	movq	%r15, %r8
    00000a67: 	movq	%r13, %rsi
    00000a6a: 	movq	%r14, %rdi
    00000a6d: 	movq	%rcx, 0x98(%rsp)
    00000a75: 	leaq	_Z14inner_product8IPKeeET0_T_S3_m(%rip), %rcx
    00000a7c: 	movq	%rdx, (%rax)
    00000a7f: 	movl	$0x1f40, %edx
    00000a84: 	movq	$0x0, 0x8(%rax)
    00000a8c: 	movb	$0x0, 0x10(%rax)
    00000a90: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2704
    00000a95: 	movq	0x90(%rsp), %rdi
    00000a9d: 	cmpq	%rbx, %rdi
    00000aa0: 	je	.Ltmp1426 # Offset: 2720
    00000aa2: 	movq	0xa0(%rsp), %rax
    00000aaa: 	leaq	0x1(%rax), %rsi
    00000aae: 	callq	_ZdlPvm@PLT # Offset: 2734
.Ltmp1426:
    00000ab3: 	movq	0x70(%rsp), %rdi
    00000ab8: 	cmpq	%r12, %rdi
    00000abb: 	je	.Ltmp1427 # Offset: 2747
    00000abd: 	movq	0x80(%rsp), %rax
    00000ac5: 	leaq	0x1(%rax), %rsi
    00000ac9: 	callq	_ZdlPvm@PLT # Offset: 2761
.Ltmp1427:
    00000ace: 	movq	0x50(%rsp), %rdx
    00000ad3: 	movq	0x58(%rsp), %rsi
    00000ad8: 	movq	%r12, 0x70(%rsp)
    00000add: 	movq	%rdx, %rax
    00000ae0: 	movq	%rdx, 0x28(%rsp)
    00000ae5: 	addq	%rsi, %rax
    00000ae8: 	movq	%rsi, 0x10(%rsp)
    00000aed: 	je	.Ltmp1428 # Offset: 2797
    00000aef: 	testq	%rdx, %rdx
    00000af2: 	je	.Ltmp1429 # Offset: 2802
.Ltmp1428:
    00000af8: 	movq	0x10(%rsp), %rax
    00000afd: 	movq	%rax, 0x30(%rsp)
    00000b02: 	cmpq	$0xf, %rax
    00000b06: 	ja	.Ltmp1430 # Offset: 2822
    00000b0c: 	cmpq	$0x1, 0x10(%rsp)
    00000b12: 	jne	.Ltmp1431 # Offset: 2834
    00000b18: 	movq	0x28(%rsp), %rax
    00000b1d: 	movzbl	(%rax), %eax
    00000b20: 	movb	%al, 0x80(%rsp)
    00000b27: 	movq	%r12, %rax
.Ltmp1453:
    00000b2a: 	movq	0x10(%rsp), %rdx
    00000b2f: 	movq	%rdx, 0x78(%rsp)
    00000b34: 	movb	$0x0, (%rax,%rdx)
    00000b38: 	movabsq	$0x3fffffffffffffff, %rax
    00000b42: 	subq	0x78(%rsp), %rax
    00000b47: 	cmpq	$0x12, %rax
    00000b4b: 	jbe	.Ltmp1432 # Offset: 2891
    00000b51: 	movl	$0x13, %edx
    00000b56: 	leaq	DATAat0x32290(%rip), %rsi
    00000b5d: 	movq	%rbp, %rdi
    00000b60: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2912
    00000b65: 	movq	0x58(%rsp), %rdx
    00000b6a: 	movq	0x50(%rsp), %rsi
    00000b6f: 	movq	%rbp, %rdi
    00000b72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2930
    00000b77: 	movq	%rbx, 0x90(%rsp)
    00000b7f: 	movq	(%rax), %rcx
    00000b82: 	leaq	0x10(%rax), %rdx
    00000b86: 	cmpq	%rdx, %rcx
    00000b89: 	je	.Ltmp1433 # Offset: 2953
    00000b8f: 	movq	%rcx, 0x90(%rsp)
    00000b97: 	movq	0x10(%rax), %rcx
    00000b9b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1459:
    00000ba3: 	movq	0x8(%rax), %rcx
    00000ba7: 	movq	%r15, %r8
    00000baa: 	movq	%r13, %rsi
    00000bad: 	movq	%r14, %rdi
    00000bb0: 	movq	%rcx, 0x98(%rsp)
    00000bb8: 	leaq	_Z14inner_product9IPKeeET0_T_S3_m(%rip), %rcx
    00000bbf: 	movq	%rdx, (%rax)
    00000bc2: 	movl	$0x1f40, %edx
    00000bc7: 	movq	$0x0, 0x8(%rax)
    00000bcf: 	movb	$0x0, 0x10(%rax)
    00000bd3: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3027
    00000bd8: 	movq	0x90(%rsp), %rdi
    00000be0: 	cmpq	%rbx, %rdi
    00000be3: 	je	.Ltmp1434 # Offset: 3043
    00000be5: 	movq	0xa0(%rsp), %rax
    00000bed: 	leaq	0x1(%rax), %rsi
    00000bf1: 	callq	_ZdlPvm@PLT # Offset: 3057
.Ltmp1434:
    00000bf6: 	movq	0x70(%rsp), %rdi
    00000bfb: 	cmpq	%r12, %rdi
    00000bfe: 	je	.Ltmp1435 # Offset: 3070
    00000c00: 	movq	0x80(%rsp), %rax
    00000c08: 	leaq	0x1(%rax), %rsi
    00000c0c: 	callq	_ZdlPvm@PLT # Offset: 3084
.Ltmp1435:
    00000c11: 	movq	0x8(%rsp), %rsi
    00000c16: 	leaq	DATAat0x322a4(%rip), %rdx
    00000c1d: 	movq	%rbp, %rdi
    00000c20: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3104
    00000c25: 	movq	0x58(%rsp), %rdx
    00000c2a: 	movq	0x50(%rsp), %rsi
    00000c2f: 	movq	%rbp, %rdi
    00000c32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3122
    00000c37: 	movq	%rbx, 0x90(%rsp)
    00000c3f: 	movq	(%rax), %rcx
    00000c42: 	leaq	0x10(%rax), %rdx
    00000c46: 	cmpq	%rdx, %rcx
    00000c49: 	je	.Ltmp1436 # Offset: 3145
    00000c4f: 	movq	%rcx, 0x90(%rsp)
    00000c57: 	movq	0x10(%rax), %rcx
    00000c5b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1458:
    00000c63: 	movq	0x8(%rax), %rcx
    00000c67: 	movq	%r15, %r8
    00000c6a: 	movq	%r13, %rsi
    00000c6d: 	movq	%r14, %rdi
    00000c70: 	movq	%rcx, 0x98(%rsp)
    00000c78: 	leaq	_Z15inner_product10IPKeeET0_T_S3_m(%rip), %rcx
    00000c7f: 	movq	%rdx, (%rax)
    00000c82: 	movl	$0x1f40, %edx
    00000c87: 	movq	$0x0, 0x8(%rax)
    00000c8f: 	movb	$0x0, 0x10(%rax)
    00000c93: 	callq	_Z18test_inner_productIePFePKeS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3219
    00000c98: 	movq	0x90(%rsp), %rdi
    00000ca0: 	cmpq	%rbx, %rdi
    00000ca3: 	je	.Ltmp1437 # Offset: 3235
    00000ca5: 	movq	0xa0(%rsp), %rax
    00000cad: 	leaq	0x1(%rax), %rsi
    00000cb1: 	callq	_ZdlPvm@PLT # Offset: 3249
.Ltmp1437:
    00000cb6: 	movq	0x70(%rsp), %rdi
    00000cbb: 	cmpq	%r12, %rdi
    00000cbe: 	je	.Ltmp1438 # Offset: 3262
    00000cc0: 	movq	0x80(%rsp), %rax
    00000cc8: 	leaq	0x1(%rax), %rsi
    00000ccc: 	callq	_ZdlPvm@PLT # Offset: 3276
.Ltmp1438:
    00000cd1: 	movq	0x8(%rsp), %rsi
    00000cd6: 	leaq	DATAat0x322b9(%rip), %rdx
    00000cdd: 	movq	%r15, %rdi
    00000ce0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3296
    00000ce5: 	movl	iterations(%rip), %edx
    00000ceb: 	xorl	%r8d, %r8d
    00000cee: 	xorl	%ecx, %ecx
    00000cf0: 	movl	$0x1f40, %esi
    00000cf5: 	movq	0x90(%rsp), %rdi
    00000cfd: 	callq	_Z9summarizePKciiii # Offset: 3325
    00000d02: 	movq	0x90(%rsp), %rdi
    00000d0a: 	cmpq	%rbx, %rdi
    00000d0d: 	je	.Ltmp1439 # Offset: 3341
    00000d0f: 	movq	0xa0(%rsp), %rax
    00000d17: 	leaq	0x1(%rax), %rsi
    00000d1b: 	callq	_ZdlPvm@PLT # Offset: 3355
.Ltmp1439:
    00000d20: 	movq	0x50(%rsp), %rdi
    00000d25: 	cmpq	0x20(%rsp), %rdi
    00000d2a: 	je	.Ltmp1440 # Offset: 3370
    00000d2c: 	movq	0x60(%rsp), %rax
    00000d31: 	leaq	0x1(%rax), %rsi
    00000d35: 	callq	_ZdlPvm@PLT # Offset: 3381
.Ltmp1440:
    00000d3a: 	movq	0x3e8b8(%rsp), %rax
    00000d42: 	subq	%fs:0x28, %rax
    00000d4b: 	jne	.Ltmp1441 # Offset: 3403
    00000d51: 	addq	$0x3e8c8, %rsp
    00000d58: 	popq	%rbx
    00000d59: 	popq	%rbp
    00000d5a: 	popq	%r12
    00000d5c: 	popq	%r13
    00000d5e: 	popq	%r14
    00000d60: 	popq	%r15
    00000d62: 	retq # Offset: 3426
    00000d63: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1374:
    00000d68: 	testq	%r15, %r15
    00000d6b: 	jne	.Ltmp1442 # Offset: 3435
    00000d71: 	movq	%r12, %rax
    00000d74: 	jmp	.Ltmp1443 # Offset: 3444
    00000d79: 	nopl	(%rax) # Size: 7
.Ltmp1382:
    00000d80: 	cmpq	$0x0, 0x8(%rsp)
    00000d86: 	jne	.Ltmp1444 # Offset: 3462
    00000d8c: 	movq	%r12, %rax
    00000d8f: 	jmp	.Ltmp1445 # Offset: 3471
    00000d94: 	nopl	(%rax) # Size: 4
.Ltmp1398:
    00000d98: 	cmpq	$0x0, 0x8(%rsp)
    00000d9e: 	jne	.Ltmp1446 # Offset: 3486
    00000da4: 	movq	%r12, %rax
    00000da7: 	jmp	.Ltmp1447 # Offset: 3495
    00000dac: 	nopl	(%rax) # Size: 4
.Ltmp1390:
    00000db0: 	cmpq	$0x0, 0x8(%rsp)
    00000db6: 	jne	.Ltmp1448 # Offset: 3510
    00000dbc: 	movq	%r12, %rax
    00000dbf: 	jmp	.Ltmp1449 # Offset: 3519
    00000dc4: 	nopl	(%rax) # Size: 4
.Ltmp1406:
    00000dc8: 	cmpq	$0x0, 0x8(%rsp)
    00000dce: 	jne	.Ltmp1450 # Offset: 3534
    00000dd4: 	movq	%r12, %rax
    00000dd7: 	jmp	.Ltmp1451 # Offset: 3543
    00000ddc: 	nopl	(%rax) # Size: 4
.Ltmp1431:
    00000de0: 	cmpq	$0x0, 0x10(%rsp)
    00000de6: 	jne	.Ltmp1452 # Offset: 3558
    00000dec: 	movq	%r12, %rax
    00000def: 	jmp	.Ltmp1453 # Offset: 3567
    00000df4: 	nopl	(%rax) # Size: 4
.Ltmp1417:
    00000df8: 	cmpq	$0x0, 0x10(%rsp)
    00000dfe: 	jne	.Ltmp1454 # Offset: 3582
    00000e04: 	movq	%r12, %rax
    00000e07: 	jmp	.Ltmp1455 # Offset: 3591
    00000e0c: 	nopl	(%rax) # Size: 4
.Ltmp1381:
    00000e10: 	movq	0x18(%rsp), %rsi
    00000e15: 	xorl	%edx, %edx
    00000e17: 	movq	%rbp, %rdi
    00000e1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3610
    00000e1f: 	movq	%rax, 0x70(%rsp)
    00000e24: 	movq	%rax, %rdi
    00000e27: 	movq	0x30(%rsp), %rax
    00000e2c: 	movq	%rax, 0x80(%rsp)
.Ltmp1468:
    00000e34: 	movq	0x8(%rsp), %rdx
    00000e39: 	movq	0x10(%rsp), %rsi
    00000e3e: 	callq	memcpy@PLT # Offset: 3646
    00000e43: 	movq	0x30(%rsp), %rax
    00000e48: 	movq	%rax, 0x8(%rsp)
    00000e4d: 	movq	0x70(%rsp), %rax
    00000e52: 	jmp	.Ltmp1445 # Offset: 3666
    00000e57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1389:
    00000e60: 	movq	0x18(%rsp), %rsi
    00000e65: 	xorl	%edx, %edx
    00000e67: 	movq	%rbp, %rdi
    00000e6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3690
    00000e6f: 	movq	%rax, 0x70(%rsp)
    00000e74: 	movq	%rax, %rdi
    00000e77: 	movq	0x30(%rsp), %rax
    00000e7c: 	movq	%rax, 0x80(%rsp)
.Ltmp1470:
    00000e84: 	movq	0x8(%rsp), %rdx
    00000e89: 	movq	0x10(%rsp), %rsi
    00000e8e: 	callq	memcpy@PLT # Offset: 3726
    00000e93: 	movq	0x30(%rsp), %rax
    00000e98: 	movq	%rax, 0x8(%rsp)
    00000e9d: 	movq	0x70(%rsp), %rax
    00000ea2: 	jmp	.Ltmp1449 # Offset: 3746
    00000ea7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1373:
    00000eb0: 	movq	0x18(%rsp), %rsi
    00000eb5: 	leaq	0x70(%rsp), %rdi
    00000eba: 	xorl	%edx, %edx
    00000ebc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3772
    00000ec1: 	movq	%rax, 0x70(%rsp)
    00000ec6: 	movq	%rax, %rdi
    00000ec9: 	movq	0x30(%rsp), %rax
    00000ece: 	movq	%rax, 0x80(%rsp)
.Ltmp1467:
    00000ed6: 	movq	%r15, %rdx
    00000ed9: 	movq	%rbp, %rsi
    00000edc: 	callq	memcpy@PLT # Offset: 3804
    00000ee1: 	movq	0x30(%rsp), %r15
    00000ee6: 	movq	0x70(%rsp), %rax
    00000eeb: 	jmp	.Ltmp1443 # Offset: 3819
.Ltmp1416:
    00000ef0: 	movq	0x18(%rsp), %rsi
    00000ef5: 	xorl	%edx, %edx
    00000ef7: 	movq	%rbp, %rdi
    00000efa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3834
    00000eff: 	movq	%rax, 0x70(%rsp)
    00000f04: 	movq	%rax, %rdi
    00000f07: 	movq	0x30(%rsp), %rax
    00000f0c: 	movq	%rax, 0x80(%rsp)
.Ltmp1473:
    00000f14: 	movq	0x10(%rsp), %rdx
    00000f19: 	movq	0x28(%rsp), %rsi
    00000f1e: 	callq	memcpy@PLT # Offset: 3870
    00000f23: 	movq	0x30(%rsp), %rax
    00000f28: 	movq	%rax, 0x10(%rsp)
    00000f2d: 	movq	0x70(%rsp), %rax
    00000f32: 	jmp	.Ltmp1455 # Offset: 3890
    00000f37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1397:
    00000f40: 	movq	0x18(%rsp), %rsi
    00000f45: 	xorl	%edx, %edx
    00000f47: 	movq	%rbp, %rdi
    00000f4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3914
    00000f4f: 	movq	%rax, 0x70(%rsp)
    00000f54: 	movq	%rax, %rdi
    00000f57: 	movq	0x30(%rsp), %rax
    00000f5c: 	movq	%rax, 0x80(%rsp)
.Ltmp1469:
    00000f64: 	movq	0x8(%rsp), %rdx
    00000f69: 	movq	0x10(%rsp), %rsi
    00000f6e: 	callq	memcpy@PLT # Offset: 3950
    00000f73: 	movq	0x30(%rsp), %rax
    00000f78: 	movq	%rax, 0x8(%rsp)
    00000f7d: 	movq	0x70(%rsp), %rax
    00000f82: 	jmp	.Ltmp1447 # Offset: 3970
    00000f87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1405:
    00000f90: 	movq	0x18(%rsp), %rsi
    00000f95: 	xorl	%edx, %edx
    00000f97: 	movq	%rbp, %rdi
    00000f9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3994
    00000f9f: 	movq	%rax, 0x70(%rsp)
    00000fa4: 	movq	%rax, %rdi
    00000fa7: 	movq	0x30(%rsp), %rax
    00000fac: 	movq	%rax, 0x80(%rsp)
.Ltmp1471:
    00000fb4: 	movq	0x8(%rsp), %rdx
    00000fb9: 	movq	0x10(%rsp), %rsi
    00000fbe: 	callq	memcpy@PLT # Offset: 4030
    00000fc3: 	movq	0x30(%rsp), %rax
    00000fc8: 	movq	%rax, 0x8(%rsp)
    00000fcd: 	movq	0x70(%rsp), %rax
    00000fd2: 	jmp	.Ltmp1451 # Offset: 4050
    00000fd7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1430:
    00000fe0: 	movq	0x18(%rsp), %rsi
    00000fe5: 	xorl	%edx, %edx
    00000fe7: 	movq	%rbp, %rdi
    00000fea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4074
    00000fef: 	movq	%rax, 0x70(%rsp)
    00000ff4: 	movq	%rax, %rdi
    00000ff7: 	movq	0x30(%rsp), %rax
    00000ffc: 	movq	%rax, 0x80(%rsp)
.Ltmp1472:
    00001004: 	movq	0x10(%rsp), %rdx
    00001009: 	movq	0x28(%rsp), %rsi
    0000100e: 	callq	memcpy@PLT # Offset: 4110
    00001013: 	movq	0x30(%rsp), %rax
    00001018: 	movq	%rax, 0x10(%rsp)
    0000101d: 	movq	0x70(%rsp), %rax
    00001022: 	jmp	.Ltmp1453 # Offset: 4130
    00001027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1384:
    00001030: 	movdqu	0x10(%rax), %xmm3
    00001035: 	movaps	%xmm3, 0xa0(%rsp)
    0000103d: 	jmp	.Ltmp1456 # Offset: 4157
    00001042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1376:
    00001048: 	movdqu	0x10(%rax), %xmm2
    0000104d: 	movaps	%xmm2, 0xa0(%rsp)
    00001055: 	jmp	.Ltmp1457 # Offset: 4181
    0000105a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1436:
    00001060: 	movdqu	0x10(%rax), %xmm2
    00001065: 	movaps	%xmm2, 0xa0(%rsp)
    0000106d: 	jmp	.Ltmp1458 # Offset: 4205
    00001072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1433:
    00001078: 	movdqu	0x10(%rax), %xmm7
    0000107d: 	movaps	%xmm7, 0xa0(%rsp)
    00001085: 	jmp	.Ltmp1459 # Offset: 4229
    0000108a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1400:
    00001090: 	movdqu	0x10(%rax), %xmm5
    00001095: 	movaps	%xmm5, 0xa0(%rsp)
    0000109d: 	jmp	.Ltmp1460 # Offset: 4253
    000010a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1408:
    000010a8: 	movdqu	0x10(%rax), %xmm6
    000010ad: 	movaps	%xmm6, 0xa0(%rsp)
    000010b5: 	jmp	.Ltmp1461 # Offset: 4277
    000010ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1425:
    000010c0: 	movdqu	0x10(%rax), %xmm6
    000010c5: 	movaps	%xmm6, 0xa0(%rsp)
    000010cd: 	jmp	.Ltmp1462 # Offset: 4301
    000010d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1422:
    000010d8: 	movdqu	0x10(%rax), %xmm5
    000010dd: 	movaps	%xmm5, 0xa0(%rsp)
    000010e5: 	jmp	.Ltmp1463 # Offset: 4325
    000010ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1419:
    000010f0: 	movdqu	0x10(%rax), %xmm4
    000010f5: 	movaps	%xmm4, 0xa0(%rsp)
    000010fd: 	jmp	.Ltmp1464 # Offset: 4349
    00001102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1411:
    00001108: 	movdqu	0x10(%rax), %xmm7
    0000110d: 	movaps	%xmm7, 0xa0(%rsp)
    00001115: 	jmp	.Ltmp1465 # Offset: 4373
    0000111a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1392:
    00001120: 	movdqu	0x10(%rax), %xmm4
    00001125: 	movaps	%xmm4, 0xa0(%rsp)
    0000112d: 	jmp	.Ltmp1466 # Offset: 4397
.Ltmp1375:
    00001132: 	leaq	DATAat0x32182(%rip), %rdi
    00001139: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4409
.Ltmp1380:
    0000113e: 	leaq	DATAat0x32158(%rip), %rdi
    00001145: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4421
.Ltmp1383:
    0000114a: 	leaq	DATAat0x32182(%rip), %rdi
    00001151: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4433
.Ltmp1388:
    00001156: 	leaq	DATAat0x32158(%rip), %rdi
    0000115d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4445
.Ltmp1391:
    00001162: 	leaq	DATAat0x32182(%rip), %rdi
    00001169: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4457
.Ltmp1396:
    0000116e: 	leaq	DATAat0x32158(%rip), %rdi
    00001175: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4469
.Ltmp1399:
    0000117a: 	leaq	DATAat0x32182(%rip), %rdi
    00001181: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4481
.Ltmp1404:
    00001186: 	leaq	DATAat0x32158(%rip), %rdi
    0000118d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4493
.Ltmp1407:
    00001192: 	leaq	DATAat0x32182(%rip), %rdi
    00001199: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4505
.Ltmp1415:
    0000119e: 	leaq	DATAat0x32158(%rip), %rdi
    000011a5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4517
.Ltmp1418:
    000011aa: 	leaq	DATAat0x32182(%rip), %rdi
    000011b1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4529
.Ltmp1429:
    000011b6: 	leaq	DATAat0x32158(%rip), %rdi
    000011bd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4541
.Ltmp1432:
    000011c2: 	leaq	DATAat0x32182(%rip), %rdi
    000011c9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4553
.Ltmp1441:
    000011ce: 	callq	__stack_chk_fail@PLT # Offset: 4558
.Ltmp1442:
    000011d3: 	movq	%r12, %rdi
    000011d6: 	jmp	.Ltmp1467 # Offset: 4566
.Ltmp1444:
    000011db: 	movq	%r12, %rdi
    000011de: 	jmp	.Ltmp1468 # Offset: 4574
.Ltmp1446:
    000011e3: 	movq	%r12, %rdi
    000011e6: 	jmp	.Ltmp1469 # Offset: 4582
.Ltmp1448:
    000011eb: 	movq	%r12, %rdi
    000011ee: 	jmp	.Ltmp1470 # Offset: 4590
.Ltmp1450:
    000011f3: 	movq	%r12, %rdi
    000011f6: 	jmp	.Ltmp1471 # Offset: 4598
.Ltmp1452:
    000011fb: 	movq	%r12, %rdi
    000011fe: 	jmp	.Ltmp1472 # Offset: 4606
.Ltmp1454:
    00001203: 	movq	%r12, %rdi
    00001206: 	jmp	.Ltmp1473 # Offset: 4614
.Ltmp1372:
    0000120b: 	leaq	DATAat0x32158(%rip), %rdi
    00001212: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4626
    00001217: 	endbr64
.Ltmp1479:
    0000121b: 	movq	%rax, %rbp
    0000121e: 	jmp	.Ltmp1474 # Offset: 4638
    00001220: 	endbr64
.Ltmp1476:
    00001224: 	movq	%rax, %rbp
    00001227: 	jmp	.Ltmp1475 # Offset: 4647
    00001229: 	endbr64
    0000122d: 	jmp	.Ltmp1476 # Offset: 4653
.Ltmp1474:
    0000122f: 	movq	0x90(%rsp), %rdi
    00001237: 	cmpq	%rbx, %rdi
    0000123a: 	je	.Ltmp1475 # Offset: 4666
    0000123c: 	movq	0xa0(%rsp), %rax
    00001244: 	leaq	0x1(%rax), %rsi
    00001248: 	callq	_ZdlPvm@PLT # Offset: 4680
.Ltmp1475:
    0000124d: 	movq	0x70(%rsp), %rdi
    00001252: 	cmpq	%r12, %rdi
    00001255: 	je	.Ltmp1477 # Offset: 4693
    00001257: 	movq	0x80(%rsp), %rax
    0000125f: 	leaq	0x1(%rax), %rsi
    00001263: 	callq	_ZdlPvm@PLT # Offset: 4707
.Ltmp1477:
    00001268: 	movq	0x50(%rsp), %rdi
    0000126d: 	cmpq	0x20(%rsp), %rdi
    00001272: 	je	.Ltmp1478 # Offset: 4722
    00001274: 	movq	0x60(%rsp), %rax
    00001279: 	leaq	0x1(%rax), %rsi
    0000127d: 	callq	_ZdlPvm@PLT # Offset: 4733
.Ltmp1478:
    00001282: 	movq	%rbp, %rdi
    00001285: 	callq	_Unwind_Resume@PLT # Offset: 4741
    0000128a: 	endbr64
    0000128e: 	jmp	.Ltmp1476 # Offset: 4750
    00001290: 	endbr64
    00001294: 	jmp	.Ltmp1479 # Offset: 4756
    00001296: 	endbr64
    0000129a: 	jmp	.Ltmp1476 # Offset: 4762
    0000129c: 	endbr64
    000012a0: 	movq	%rax, %rbp
    000012a3: 	jmp	.Ltmp1480 # Offset: 4771
    000012a5: 	endbr64
    000012a9: 	jmp	.Ltmp1476 # Offset: 4777
    000012ae: 	endbr64
    000012b2: 	jmp	.Ltmp1476 # Offset: 4786
    000012b7: 	endbr64
    000012bb: 	jmp	.Ltmp1479 # Offset: 4795
    000012c0: 	endbr64
    000012c4: 	jmp	.Ltmp1476 # Offset: 4804
    000012c9: 	endbr64
    000012cd: 	jmp	.Ltmp1479 # Offset: 4813
    000012d2: 	endbr64
    000012d6: 	jmp	.Ltmp1476 # Offset: 4822
    000012db: 	endbr64
    000012df: 	jmp	.Ltmp1479 # Offset: 4831
    000012e4: 	endbr64
    000012e8: 	jmp	.Ltmp1476 # Offset: 4840
.Ltmp1480:
    000012ed: 	movq	0x90(%rsp), %rdi
    000012f5: 	cmpq	%rbx, %rdi
    000012f8: 	je	.Ltmp1477 # Offset: 4856
    000012fe: 	movq	0xa0(%rsp), %rax
    00001306: 	leaq	0x1(%rax), %rsi
    0000130a: 	callq	_ZdlPvm@PLT # Offset: 4874
    0000130f: 	jmp	.Ltmp1477 # Offset: 4879
    00001314: 	endbr64
    00001318: 	jmp	.Ltmp1479 # Offset: 4888
    0000131d: 	endbr64
    00001321: 	jmp	.Ltmp1476 # Offset: 4897
    00001326: 	endbr64
    0000132a: 	jmp	.Ltmp1479 # Offset: 4906
    0000132f: 	endbr64
    00001333: 	jmp	.Ltmp1476 # Offset: 4915
    00001338: 	endbr64
    0000133c: 	jmp	.Ltmp1479 # Offset: 4924
    00001341: 	endbr64
    00001345: 	jmp	.Ltmp1476 # Offset: 4933
    0000134a: 	endbr64
    0000134e: 	jmp	.Ltmp1476 # Offset: 4942
    00001353: 	endbr64
    00001357: 	jmp	.Ltmp1479 # Offset: 4951
    0000135c: 	endbr64
    00001360: 	jmp	.Ltmp1476 # Offset: 4960
    00001365: 	endbr64
    00001369: 	jmp	.Ltmp1476 # Offset: 4969
    0000136e: 	endbr64
    00001372: 	jmp	.Ltmp1476 # Offset: 4978
    00001377: 	endbr64
    0000137b: 	jmp	.Ltmp1479 # Offset: 4987
    00001380: 	endbr64
    00001384: 	movq	%rax, %rbp
    00001387: 	jmp	.Ltmp1477 # Offset: 4999
    0000138c: 	endbr64
    00001390: 	jmp	.Ltmp1476 # Offset: 5008
    00001395: 	endbr64
    00001399: 	jmp	.Ltmp1479 # Offset: 5017
    0000139e: 	endbr64
    000013a2: 	jmp	.Ltmp1476 # Offset: 5026
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIeEvv"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x25860
  Size        : 0x14f3
  MaxSize     : 0x1500
  Offset      : 0x25860
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1481:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1481 # Offset: 37
    00000027: 	subq	$0xac8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm5
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0xfab8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movl	$0x33746e69, 0x60(%rsp)
    00000063: 	movq	%rax, 0x18(%rsp)
    00000068: 	leaq	0xb0(%rsp), %r12
    00000070: 	leaq	0x7db0(%rsp), %rbp
    00000078: 	movq	%rax, 0x50(%rsp)
    0000007d: 	movl	$0x5f32, %eax
    00000082: 	movw	%ax, 0x64(%rsp)
    00000087: 	movb	$0x74, 0x66(%rsp)
    0000008c: 	movq	$0x7, 0x58(%rsp)
    00000095: 	movb	$0x0, 0x67(%rsp)
    0000009a: 	movq	%rdi, 0x20(%rsp)
    0000009f: 	movaps	%xmm5, 0x30(%rsp)
    000000a4: 	movaps	%xmm6, 0x40(%rsp)
    000000a9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 169
    000000ae: 	movd	init_value(%rip), %xmm7
    000000b6: 	movq	%r12, %rax
    000000b9: 	pshufd	$0x0, %xmm7, %xmm0
    000000be: 	nop # Size: 2
.Ltmp1482:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rbp, %rax
    000000ca: 	jne	.Ltmp1482 # Offset: 202
    000000cc: 	movq	%rbp, %rax
    000000cf: 	leaq	0xfab0(%rsp), %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1483:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rax, %rdx
    000000ea: 	jne	.Ltmp1483 # Offset: 234
    000000ec: 	leaq	0x50(%rsp), %rax
    000000f1: 	leaq	0x70(%rsp), %r13
    000000f6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%r13, %rdi
    00000103: 	movq	%rax, 0x8(%rsp)
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	movq	0x58(%rsp), %rdx
    00000112: 	movq	0x50(%rsp), %rsi
    00000117: 	movq	%r13, %rdi
    0000011a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 282
    0000011f: 	leaq	0xa0(%rsp), %rsi
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	movq	%rsi, 0x90(%rsp)
    00000133: 	movq	(%rax), %rcx
    00000136: 	movq	%rsi, (%rsp)
    0000013a: 	cmpq	%rdx, %rcx
    0000013d: 	je	.Ltmp1484 # Offset: 317
    00000143: 	movq	%rcx, 0x90(%rsp)
    0000014b: 	movq	0x10(%rax), %rcx
    0000014f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1575:
    00000157: 	movq	0x8(%rax), %rcx
    0000015b: 	leaq	0x90(%rsp), %r14
    00000163: 	movq	%rbp, %rsi
    00000166: 	movq	%r12, %rdi
    00000169: 	movq	%r14, %r8
    0000016c: 	movq	%rcx, 0x98(%rsp)
    00000174: 	leaq	_Z17inner_product_stdIPKiiET0_T_S3_m(%rip), %rcx
    0000017b: 	movq	%rdx, (%rax)
    0000017e: 	movl	$0x1f40, %edx
    00000183: 	movq	$0x0, 0x8(%rax)
    0000018b: 	movb	$0x0, 0x10(%rax)
    0000018f: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 399
    00000194: 	movq	0x90(%rsp), %rdi
    0000019c: 	cmpq	(%rsp), %rdi
    000001a0: 	je	.Ltmp1485 # Offset: 416
    000001a2: 	movq	0xa0(%rsp), %rax
    000001aa: 	leaq	0x1(%rax), %rsi
    000001ae: 	callq	_ZdlPvm@PLT # Offset: 430
.Ltmp1485:
    000001b3: 	movq	0x70(%rsp), %rdi
    000001b8: 	leaq	0x80(%rsp), %rax
    000001c0: 	movq	%rax, 0x10(%rsp)
    000001c5: 	cmpq	%rax, %rdi
    000001c8: 	je	.Ltmp1486 # Offset: 456
    000001ca: 	movq	0x80(%rsp), %rax
    000001d2: 	leaq	0x1(%rax), %rsi
    000001d6: 	callq	_ZdlPvm@PLT # Offset: 470
.Ltmp1486:
    000001db: 	movq	0x8(%rsp), %rsi
    000001e0: 	leaq	DATAat0x322c8(%rip), %rdx
    000001e7: 	movq	%r14, %rdi
    000001ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 490
    000001ef: 	callq	clock@PLT # Offset: 495
    000001f4: 	movl	iterations(%rip), %ecx
    000001fa: 	xorl	%ebx, %ebx
    000001fc: 	leaq	DATAat0x321c8(%rip), %r15
    00000203: 	movq	%rax, start_time(%rip)
    0000020a: 	testl	%ecx, %ecx
    0000020c: 	jle	.Ltmp1487 # Offset: 524
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1490:
    00000218: 	xorl	%eax, %eax
    0000021a: 	pxor	%xmm2, %xmm2
    0000021e: 	pxor	%xmm4, %xmm4
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1488:
    00000228: 	movdqa	(%rbp,%rax), %xmm1
    0000022e: 	movdqa	(%r12,%rax), %xmm3
    00000234: 	movdqa	(%rbp,%rax), %xmm0
    0000023a: 	pmuludq	(%r12,%rax), %xmm0
    00000240: 	addq	$0x10, %rax
    00000244: 	pshufd	$0x8, %xmm0, %xmm0
    00000249: 	psrlq	$0x20, %xmm3
    0000024e: 	psrlq	$0x20, %xmm1
    00000253: 	pmuludq	%xmm3, %xmm1
    00000257: 	movdqa	%xmm4, %xmm3
    0000025b: 	pshufd	$0x8, %xmm1, %xmm1
    00000260: 	punpckldq	%xmm1, %xmm0
    00000264: 	pcmpgtd	%xmm0, %xmm3
    00000268: 	movdqa	%xmm0, %xmm1
    0000026c: 	punpckldq	%xmm3, %xmm1
    00000270: 	punpckhdq	%xmm3, %xmm0
    00000274: 	paddq	%xmm1, %xmm2
    00000278: 	paddq	%xmm0, %xmm2
    0000027c: 	cmpq	$0x7d00, %rax
    00000282: 	jne	.Ltmp1488 # Offset: 642
    00000284: 	movl	init_value(%rip), %edx
    0000028a: 	movdqa	%xmm2, %xmm0
    0000028e: 	psrldq	$0x8, %xmm0
    00000293: 	imull	%edx, %edx
    00000296: 	paddq	%xmm0, %xmm2
    0000029a: 	movq	%xmm2, %rax
    0000029f: 	imull	$0x1f40, %edx, %edx
    000002a5: 	cmpl	%eax, %edx
    000002a7: 	jne	.Ltmp1489 # Offset: 679
.Ltmp1558:
    000002ad: 	addl	$0x1, %ebx
    000002b0: 	cmpl	%ecx, %ebx
    000002b2: 	jl	.Ltmp1490 # Offset: 690
.Ltmp1487:
    000002b8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002bf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000002c6: 	subq	$0x20, %rax
    000002ca: 	cmpq	%rax, %rbx
    000002cd: 	je	.Ltmp1491 # Offset: 717
    000002d3: 	leaq	0x10(%rbx), %rdi
    000002d7: 	movq	0x98(%rsp), %r15
    000002df: 	movq	%rdi, (%rbx)
    000002e2: 	movq	0x90(%rsp), %rax
    000002ea: 	movq	%rax, %rsi
    000002ed: 	movq	%rax, 0x28(%rsp)
    000002f2: 	addq	%r15, %rsi
    000002f5: 	je	.Ltmp1492 # Offset: 757
    000002f7: 	testq	%rax, %rax
    000002fa: 	je	.Ltmp1493 # Offset: 762
.Ltmp1492:
    00000300: 	movq	%r15, 0x30(%rsp)
    00000305: 	cmpq	$0xf, %r15
    00000309: 	ja	.Ltmp1494 # Offset: 777
    0000030f: 	cmpq	$0x1, %r15
    00000313: 	jne	.Ltmp1495 # Offset: 787
    00000319: 	movq	0x28(%rsp), %rax
    0000031e: 	movzbl	(%rax), %eax
    00000321: 	movb	%al, 0x10(%rbx)
.Ltmp1559:
    00000324: 	movq	%r15, 0x8(%rbx)
    00000328: 	movb	$0x0, (%rdi,%r15)
    0000032d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000334: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033b: 	addq	$0x20, %rax
    0000033f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000346: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000034d: 	je	.Ltmp1496 # Offset: 845
.Ltmp1566:
    00000353: 	movq	-0x20(%rax), %r15
    00000357: 	callq	clock@PLT # Offset: 855
    0000035c: 	pxor	%xmm0, %xmm0
    00000360: 	movq	%rax, end_time(%rip)
    00000367: 	movq	%r15, %rdi
    0000036a: 	subq	start_time(%rip), %rax
    00000371: 	cvtsi2sd	%rax, %xmm0
    00000376: 	divsd	DATAat0x32600(%rip), %xmm0
    0000037e: 	callq	_Z13record_resultdPKc # Offset: 894
    00000383: 	movq	0x90(%rsp), %rdi
    0000038b: 	cmpq	(%rsp), %rdi
    0000038f: 	je	.Ltmp1497 # Offset: 911
    00000391: 	movq	0xa0(%rsp), %rax
    00000399: 	leaq	0x1(%rax), %rsi
    0000039d: 	callq	_ZdlPvm@PLT # Offset: 925
.Ltmp1497:
    000003a2: 	movq	0x8(%rsp), %rsi
    000003a7: 	leaq	DATAat0x321f0(%rip), %rdx
    000003ae: 	movq	%r13, %rdi
    000003b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 945
    000003b6: 	movq	0x58(%rsp), %rdx
    000003bb: 	movq	0x50(%rsp), %rsi
    000003c0: 	movq	%r13, %rdi
    000003c3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 963
    000003c8: 	movq	(%rsp), %rsi
    000003cc: 	leaq	0x10(%rax), %rdx
    000003d0: 	movq	%rsi, 0x90(%rsp)
    000003d8: 	movq	(%rax), %rcx
    000003db: 	cmpq	%rdx, %rcx
    000003de: 	je	.Ltmp1498 # Offset: 990
    000003e4: 	movq	%rcx, 0x90(%rsp)
    000003ec: 	movq	0x10(%rax), %rcx
    000003f0: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1572:
    000003f8: 	movq	0x8(%rax), %rcx
    000003fc: 	movq	%r14, %r8
    000003ff: 	movq	%rbp, %rsi
    00000402: 	movq	%r12, %rdi
    00000405: 	movq	%rcx, 0x98(%rsp)
    0000040d: 	leaq	_Z14inner_product1IPKiiET0_T_S3_m(%rip), %rcx
    00000414: 	movq	%rdx, (%rax)
    00000417: 	movl	$0x1f40, %edx
    0000041c: 	movq	$0x0, 0x8(%rax)
    00000424: 	movb	$0x0, 0x10(%rax)
    00000428: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1064
    0000042d: 	movq	0x90(%rsp), %rdi
    00000435: 	cmpq	(%rsp), %rdi
    00000439: 	je	.Ltmp1499 # Offset: 1081
    0000043b: 	movq	0xa0(%rsp), %rax
    00000443: 	leaq	0x1(%rax), %rsi
    00000447: 	callq	_ZdlPvm@PLT # Offset: 1095
.Ltmp1499:
    0000044c: 	movq	0x70(%rsp), %rdi
    00000451: 	cmpq	0x10(%rsp), %rdi
    00000456: 	je	.Ltmp1500 # Offset: 1110
    00000458: 	movq	0x80(%rsp), %rax
    00000460: 	leaq	0x1(%rax), %rsi
    00000464: 	callq	_ZdlPvm@PLT # Offset: 1124
.Ltmp1500:
    00000469: 	movq	0x8(%rsp), %rsi
    0000046e: 	leaq	DATAat0x322e7(%rip), %rdx
    00000475: 	movq	%r14, %rdi
    00000478: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1144
    0000047d: 	callq	clock@PLT # Offset: 1149
    00000482: 	movl	iterations(%rip), %ecx
    00000488: 	xorl	%ebx, %ebx
    0000048a: 	leaq	DATAat0x321c8(%rip), %r15
    00000491: 	movq	%rax, start_time(%rip)
    00000498: 	testl	%ecx, %ecx
    0000049a: 	jle	.Ltmp1501 # Offset: 1178
.Ltmp1504:
    000004a0: 	xorl	%eax, %eax
    000004a2: 	pxor	%xmm2, %xmm2
    000004a6: 	pxor	%xmm4, %xmm4
    000004aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1502:
    000004b0: 	movdqa	(%rbp,%rax), %xmm1
    000004b6: 	movdqa	(%r12,%rax), %xmm3
    000004bc: 	movdqa	(%rbp,%rax), %xmm0
    000004c2: 	pmuludq	(%r12,%rax), %xmm0
    000004c8: 	addq	$0x10, %rax
    000004cc: 	pshufd	$0x8, %xmm0, %xmm0
    000004d1: 	psrlq	$0x20, %xmm3
    000004d6: 	psrlq	$0x20, %xmm1
    000004db: 	pmuludq	%xmm3, %xmm1
    000004df: 	movdqa	%xmm4, %xmm3
    000004e3: 	pshufd	$0x8, %xmm1, %xmm1
    000004e8: 	punpckldq	%xmm1, %xmm0
    000004ec: 	pcmpgtd	%xmm0, %xmm3
    000004f0: 	movdqa	%xmm0, %xmm1
    000004f4: 	punpckldq	%xmm3, %xmm1
    000004f8: 	punpckhdq	%xmm3, %xmm0
    000004fc: 	paddq	%xmm1, %xmm2
    00000500: 	paddq	%xmm0, %xmm2
    00000504: 	cmpq	$0x7d00, %rax
    0000050a: 	jne	.Ltmp1502 # Offset: 1290
    0000050c: 	movl	init_value(%rip), %edx
    00000512: 	movdqa	%xmm2, %xmm0
    00000516: 	psrldq	$0x8, %xmm0
    0000051b: 	imull	%edx, %edx
    0000051e: 	paddq	%xmm0, %xmm2
    00000522: 	movq	%xmm2, %rax
    00000527: 	imull	$0x1f40, %edx, %edx
    0000052d: 	cmpl	%eax, %edx
    0000052f: 	jne	.Ltmp1503 # Offset: 1327
.Ltmp1560:
    00000535: 	addl	$0x1, %ebx
    00000538: 	cmpl	%ecx, %ebx
    0000053a: 	jl	.Ltmp1504 # Offset: 1338
.Ltmp1501:
    00000540: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000547: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000054e: 	subq	$0x20, %rax
    00000552: 	cmpq	%rax, %rbx
    00000555: 	je	.Ltmp1505 # Offset: 1365
    0000055b: 	leaq	0x10(%rbx), %rdi
    0000055f: 	movq	0x98(%rsp), %r15
    00000567: 	movq	%rdi, (%rbx)
    0000056a: 	movq	0x90(%rsp), %rax
    00000572: 	movq	%rax, %rsi
    00000575: 	movq	%rax, 0x28(%rsp)
    0000057a: 	addq	%r15, %rsi
    0000057d: 	je	.Ltmp1506 # Offset: 1405
    0000057f: 	testq	%rax, %rax
    00000582: 	je	.Ltmp1507 # Offset: 1410
.Ltmp1506:
    00000588: 	movq	%r15, 0x30(%rsp)
    0000058d: 	cmpq	$0xf, %r15
    00000591: 	ja	.Ltmp1508 # Offset: 1425
    00000597: 	cmpq	$0x1, %r15
    0000059b: 	jne	.Ltmp1509 # Offset: 1435
    000005a1: 	movq	0x28(%rsp), %rax
    000005a6: 	movzbl	(%rax), %eax
    000005a9: 	movb	%al, 0x10(%rbx)
.Ltmp1580:
    000005ac: 	movq	%r15, 0x8(%rbx)
    000005b0: 	movb	$0x0, (%rdi,%r15)
    000005b5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005bc: 	addq	$0x20, %rax
    000005c0: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1568:
    000005c7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005ce: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005d5: 	je	.Ltmp1510 # Offset: 1493
.Ltmp1567:
    000005db: 	movq	-0x20(%rax), %r15
    000005df: 	callq	clock@PLT # Offset: 1503
    000005e4: 	pxor	%xmm0, %xmm0
    000005e8: 	movq	%rax, end_time(%rip)
    000005ef: 	movq	%r15, %rdi
    000005f2: 	subq	start_time(%rip), %rax
    000005f9: 	cvtsi2sd	%rax, %xmm0
    000005fe: 	divsd	DATAat0x32600(%rip), %xmm0
    00000606: 	callq	_Z13record_resultdPKc # Offset: 1542
    0000060b: 	movq	0x90(%rsp), %rdi
    00000613: 	cmpq	(%rsp), %rdi
    00000617: 	je	.Ltmp1511 # Offset: 1559
    00000619: 	movq	0xa0(%rsp), %rax
    00000621: 	leaq	0x1(%rax), %rsi
    00000625: 	callq	_ZdlPvm@PLT # Offset: 1573
.Ltmp1511:
    0000062a: 	movq	0x8(%rsp), %rsi
    0000062f: 	leaq	DATAat0x32204(%rip), %rdx
    00000636: 	movq	%r13, %rdi
    00000639: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1593
    0000063e: 	movq	0x58(%rsp), %rdx
    00000643: 	movq	0x50(%rsp), %rsi
    00000648: 	movq	%r13, %rdi
    0000064b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1611
    00000650: 	movq	(%rsp), %rsi
    00000654: 	leaq	0x10(%rax), %rdx
    00000658: 	movq	%rsi, 0x90(%rsp)
    00000660: 	movq	(%rax), %rcx
    00000663: 	cmpq	%rdx, %rcx
    00000666: 	je	.Ltmp1512 # Offset: 1638
    0000066c: 	movq	%rcx, 0x90(%rsp)
    00000674: 	movq	0x10(%rax), %rcx
    00000678: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1573:
    00000680: 	movq	0x8(%rax), %rcx
    00000684: 	movq	%r14, %r8
    00000687: 	movq	%rbp, %rsi
    0000068a: 	movq	%r12, %rdi
    0000068d: 	movq	%rcx, 0x98(%rsp)
    00000695: 	leaq	_Z14inner_product2IPKiiET0_T_S3_m(%rip), %rcx
    0000069c: 	movq	%rdx, (%rax)
    0000069f: 	movl	$0x1f40, %edx
    000006a4: 	movq	$0x0, 0x8(%rax)
    000006ac: 	movb	$0x0, 0x10(%rax)
    000006b0: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1712
    000006b5: 	movq	0x90(%rsp), %rdi
    000006bd: 	cmpq	(%rsp), %rdi
    000006c1: 	je	.Ltmp1513 # Offset: 1729
    000006c3: 	movq	0xa0(%rsp), %rax
    000006cb: 	leaq	0x1(%rax), %rsi
    000006cf: 	callq	_ZdlPvm@PLT # Offset: 1743
.Ltmp1513:
    000006d4: 	movq	0x70(%rsp), %rdi
    000006d9: 	cmpq	0x10(%rsp), %rdi
    000006de: 	je	.Ltmp1514 # Offset: 1758
    000006e0: 	movq	0x80(%rsp), %rax
    000006e8: 	leaq	0x1(%rax), %rsi
    000006ec: 	callq	_ZdlPvm@PLT # Offset: 1772
.Ltmp1514:
    000006f1: 	movq	0x8(%rsp), %rsi
    000006f6: 	leaq	DATAat0x32302(%rip), %rdx
    000006fd: 	movq	%r14, %rdi
    00000700: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1792
    00000705: 	callq	clock@PLT # Offset: 1797
    0000070a: 	movl	iterations(%rip), %ecx
    00000710: 	xorl	%ebx, %ebx
    00000712: 	leaq	DATAat0x321c8(%rip), %r15
    00000719: 	movq	%rax, start_time(%rip)
    00000720: 	testl	%ecx, %ecx
    00000722: 	jle	.Ltmp1515 # Offset: 1826
    00000728: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1518:
    00000730: 	xorl	%eax, %eax
    00000732: 	pxor	%xmm2, %xmm2
    00000736: 	pxor	%xmm4, %xmm4
    0000073a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1516:
    00000740: 	movdqa	(%rbp,%rax), %xmm1
    00000746: 	movdqa	(%r12,%rax), %xmm3
    0000074c: 	movdqa	(%rbp,%rax), %xmm0
    00000752: 	pmuludq	(%r12,%rax), %xmm0
    00000758: 	addq	$0x10, %rax
    0000075c: 	pshufd	$0x8, %xmm0, %xmm0
    00000761: 	psrlq	$0x20, %xmm3
    00000766: 	psrlq	$0x20, %xmm1
    0000076b: 	pmuludq	%xmm3, %xmm1
    0000076f: 	movdqa	%xmm4, %xmm3
    00000773: 	pshufd	$0x8, %xmm1, %xmm1
    00000778: 	punpckldq	%xmm1, %xmm0
    0000077c: 	pcmpgtd	%xmm0, %xmm3
    00000780: 	movdqa	%xmm0, %xmm1
    00000784: 	punpckldq	%xmm3, %xmm1
    00000788: 	punpckhdq	%xmm3, %xmm0
    0000078c: 	paddq	%xmm1, %xmm2
    00000790: 	paddq	%xmm0, %xmm2
    00000794: 	cmpq	$0x7d00, %rax
    0000079a: 	jne	.Ltmp1516 # Offset: 1946
    0000079c: 	movl	init_value(%rip), %edx
    000007a2: 	movdqa	%xmm2, %xmm0
    000007a6: 	psrldq	$0x8, %xmm0
    000007ab: 	imull	%edx, %edx
    000007ae: 	paddq	%xmm0, %xmm2
    000007b2: 	movq	%xmm2, %rax
    000007b7: 	imull	$0x1f40, %edx, %edx
    000007bd: 	cmpl	%eax, %edx
    000007bf: 	jne	.Ltmp1517 # Offset: 1983
.Ltmp1561:
    000007c5: 	addl	$0x1, %ebx
    000007c8: 	cmpl	%ecx, %ebx
    000007ca: 	jl	.Ltmp1518 # Offset: 1994
.Ltmp1515:
    000007d0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000007d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    000007de: 	subq	$0x20, %rax
    000007e2: 	cmpq	%rax, %r15
    000007e5: 	je	.Ltmp1519 # Offset: 2021
    000007eb: 	leaq	0x10(%r15), %rdi
    000007ef: 	movq	0x98(%rsp), %rbx
    000007f7: 	movq	%rdi, (%r15)
    000007fa: 	movq	0x90(%rsp), %rax
    00000802: 	movq	%rax, %rsi
    00000805: 	movq	%rax, 0x28(%rsp)
    0000080a: 	addq	%rbx, %rsi
    0000080d: 	je	.Ltmp1520 # Offset: 2061
    0000080f: 	testq	%rax, %rax
    00000812: 	je	.Ltmp1521 # Offset: 2066
.Ltmp1520:
    00000818: 	movq	%rbx, 0x30(%rsp)
    0000081d: 	cmpq	$0xf, %rbx
    00000821: 	ja	.Ltmp1522 # Offset: 2081
    00000827: 	cmpq	$0x1, %rbx
    0000082b: 	jne	.Ltmp1523 # Offset: 2091
    00000831: 	movq	0x28(%rsp), %rax
    00000836: 	movzbl	(%rax), %eax
    00000839: 	movb	%al, 0x10(%r15)
.Ltmp1583:
    0000083d: 	movq	%rbx, 0x8(%r15)
    00000841: 	movb	$0x0, (%rdi,%rbx)
    00000845: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000084c: 	addq	$0x20, %rax
    00000850: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1574:
    00000857: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000085e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000865: 	je	.Ltmp1524 # Offset: 2149
.Ltmp1571:
    0000086b: 	movq	-0x20(%rax), %r15
    0000086f: 	callq	clock@PLT # Offset: 2159
    00000874: 	pxor	%xmm0, %xmm0
    00000878: 	movq	%rax, end_time(%rip)
    0000087f: 	movq	%r15, %rdi
    00000882: 	subq	start_time(%rip), %rax
    00000889: 	cvtsi2sd	%rax, %xmm0
    0000088e: 	divsd	DATAat0x32600(%rip), %xmm0
    00000896: 	callq	_Z13record_resultdPKc # Offset: 2198
    0000089b: 	movq	0x90(%rsp), %rdi
    000008a3: 	cmpq	(%rsp), %rdi
    000008a7: 	je	.Ltmp1525 # Offset: 2215
    000008a9: 	movq	0xa0(%rsp), %rax
    000008b1: 	leaq	0x1(%rax), %rsi
    000008b5: 	callq	_ZdlPvm@PLT # Offset: 2229
.Ltmp1525:
    000008ba: 	movq	0x8(%rsp), %rsi
    000008bf: 	leaq	DATAat0x32218(%rip), %rdx
    000008c6: 	movq	%r13, %rdi
    000008c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2249
    000008ce: 	movq	0x58(%rsp), %rdx
    000008d3: 	movq	0x50(%rsp), %rsi
    000008d8: 	movq	%r13, %rdi
    000008db: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2267
    000008e0: 	movq	(%rsp), %rsi
    000008e4: 	leaq	0x10(%rax), %rdx
    000008e8: 	movq	%rsi, 0x90(%rsp)
    000008f0: 	movq	(%rax), %rcx
    000008f3: 	cmpq	%rdx, %rcx
    000008f6: 	je	.Ltmp1526 # Offset: 2294
    000008fc: 	movq	%rcx, 0x90(%rsp)
    00000904: 	movq	0x10(%rax), %rcx
    00000908: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1570:
    00000910: 	movq	0x8(%rax), %rcx
    00000914: 	movq	%r14, %r8
    00000917: 	movq	%rbp, %rsi
    0000091a: 	movq	%r12, %rdi
    0000091d: 	movq	%rcx, 0x98(%rsp)
    00000925: 	leaq	_Z14inner_product3IPKiiET0_T_S3_m(%rip), %rcx
    0000092c: 	movq	%rdx, (%rax)
    0000092f: 	movl	$0x1f40, %edx
    00000934: 	movq	$0x0, 0x8(%rax)
    0000093c: 	movb	$0x0, 0x10(%rax)
    00000940: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2368
    00000945: 	movq	0x90(%rsp), %rdi
    0000094d: 	cmpq	(%rsp), %rdi
    00000951: 	je	.Ltmp1527 # Offset: 2385
    00000953: 	movq	0xa0(%rsp), %rax
    0000095b: 	leaq	0x1(%rax), %rsi
    0000095f: 	callq	_ZdlPvm@PLT # Offset: 2399
.Ltmp1527:
    00000964: 	movq	0x70(%rsp), %rdi
    00000969: 	cmpq	0x10(%rsp), %rdi
    0000096e: 	je	.Ltmp1528 # Offset: 2414
    00000970: 	movq	0x80(%rsp), %rax
    00000978: 	leaq	0x1(%rax), %rsi
    0000097c: 	callq	_ZdlPvm@PLT # Offset: 2428
.Ltmp1528:
    00000981: 	movq	0x10(%rsp), %rax
    00000986: 	movq	0x50(%rsp), %r15
    0000098b: 	movq	0x58(%rsp), %rbx
    00000990: 	movq	%rax, 0x70(%rsp)
    00000995: 	movq	%r15, %rax
    00000998: 	addq	%rbx, %rax
    0000099b: 	je	.Ltmp1529 # Offset: 2459
    0000099d: 	testq	%r15, %r15
    000009a0: 	je	.Ltmp1530 # Offset: 2464
.Ltmp1529:
    000009a6: 	movq	%rbx, 0x30(%rsp)
    000009ab: 	cmpq	$0xf, %rbx
    000009af: 	ja	.Ltmp1531 # Offset: 2479
    000009b5: 	cmpq	$0x1, %rbx
    000009b9: 	jne	.Ltmp1532 # Offset: 2489
    000009bf: 	movzbl	(%r15), %eax
    000009c3: 	movb	%al, 0x80(%rsp)
    000009ca: 	movq	0x10(%rsp), %rax
.Ltmp1563:
    000009cf: 	movq	%rbx, 0x78(%rsp)
    000009d4: 	movb	$0x0, (%rax,%rbx)
    000009d8: 	movabsq	$0x3fffffffffffffff, %rax
    000009e2: 	subq	0x78(%rsp), %rax
    000009e7: 	cmpq	$0x12, %rax
    000009eb: 	jbe	.Ltmp1533 # Offset: 2539
    000009f1: 	movl	$0x13, %edx
    000009f6: 	leaq	DATAat0x3222c(%rip), %rsi
    000009fd: 	movq	%r13, %rdi
    00000a00: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2560
    00000a05: 	movq	0x58(%rsp), %rdx
    00000a0a: 	movq	0x50(%rsp), %rsi
    00000a0f: 	movq	%r13, %rdi
    00000a12: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2578
    00000a17: 	movq	(%rsp), %rsi
    00000a1b: 	leaq	0x10(%rax), %rdx
    00000a1f: 	movq	%rsi, 0x90(%rsp)
    00000a27: 	movq	(%rax), %rcx
    00000a2a: 	cmpq	%rdx, %rcx
    00000a2d: 	je	.Ltmp1534 # Offset: 2605
    00000a33: 	movq	%rcx, 0x90(%rsp)
    00000a3b: 	movq	0x10(%rax), %rcx
    00000a3f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1569:
    00000a47: 	movq	0x8(%rax), %rcx
    00000a4b: 	movq	%r14, %r8
    00000a4e: 	movq	%rbp, %rsi
    00000a51: 	movq	%r12, %rdi
    00000a54: 	movq	%rcx, 0x98(%rsp)
    00000a5c: 	leaq	_Z14inner_product4IPKiiET0_T_S3_m(%rip), %rcx
    00000a63: 	movq	%rdx, (%rax)
    00000a66: 	movl	$0x1f40, %edx
    00000a6b: 	movq	$0x0, 0x8(%rax)
    00000a73: 	movb	$0x0, 0x10(%rax)
    00000a77: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2679
    00000a7c: 	movq	0x90(%rsp), %rdi
    00000a84: 	cmpq	(%rsp), %rdi
    00000a88: 	je	.Ltmp1535 # Offset: 2696
    00000a8a: 	movq	0xa0(%rsp), %rax
    00000a92: 	leaq	0x1(%rax), %rsi
    00000a96: 	callq	_ZdlPvm@PLT # Offset: 2710
.Ltmp1535:
    00000a9b: 	movq	0x70(%rsp), %rdi
    00000aa0: 	cmpq	0x10(%rsp), %rdi
    00000aa5: 	je	.Ltmp1536 # Offset: 2725
    00000aa7: 	movq	0x80(%rsp), %rax
    00000aaf: 	leaq	0x1(%rax), %rsi
    00000ab3: 	callq	_ZdlPvm@PLT # Offset: 2739
.Ltmp1536:
    00000ab8: 	movq	0x8(%rsp), %rsi
    00000abd: 	leaq	DATAat0x32240(%rip), %rdx
    00000ac4: 	movq	%r13, %rdi
    00000ac7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2759
    00000acc: 	movq	0x58(%rsp), %rdx
    00000ad1: 	movq	0x50(%rsp), %rsi
    00000ad6: 	movq	%r13, %rdi
    00000ad9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2777
    00000ade: 	movq	(%rsp), %rsi
    00000ae2: 	leaq	0x10(%rax), %rdx
    00000ae6: 	movq	%rsi, 0x90(%rsp)
    00000aee: 	movq	(%rax), %rcx
    00000af1: 	cmpq	%rdx, %rcx
    00000af4: 	je	.Ltmp1537 # Offset: 2804
    00000afa: 	movq	%rcx, 0x90(%rsp)
    00000b02: 	movq	0x10(%rax), %rcx
    00000b06: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1565:
    00000b0e: 	movq	0x8(%rax), %rcx
    00000b12: 	movq	%r14, %r8
    00000b15: 	movq	%rbp, %rsi
    00000b18: 	movq	%r12, %rdi
    00000b1b: 	movq	%rcx, 0x98(%rsp)
    00000b23: 	leaq	_Z14inner_product5IPKiiET0_T_S3_m(%rip), %rcx
    00000b2a: 	movq	%rdx, (%rax)
    00000b2d: 	movl	$0x1f40, %edx
    00000b32: 	movq	$0x0, 0x8(%rax)
    00000b3a: 	movb	$0x0, 0x10(%rax)
    00000b3e: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2878
    00000b43: 	movq	0x90(%rsp), %rdi
    00000b4b: 	cmpq	(%rsp), %rdi
    00000b4f: 	je	.Ltmp1538 # Offset: 2895
    00000b51: 	movq	0xa0(%rsp), %rax
    00000b59: 	leaq	0x1(%rax), %rsi
    00000b5d: 	callq	_ZdlPvm@PLT # Offset: 2909
.Ltmp1538:
    00000b62: 	movq	0x70(%rsp), %rdi
    00000b67: 	cmpq	0x10(%rsp), %rdi
    00000b6c: 	je	.Ltmp1539 # Offset: 2924
    00000b6e: 	movq	0x80(%rsp), %rax
    00000b76: 	leaq	0x1(%rax), %rsi
    00000b7a: 	callq	_ZdlPvm@PLT # Offset: 2938
.Ltmp1539:
    00000b7f: 	movq	0x8(%rsp), %rsi
    00000b84: 	leaq	DATAat0x32254(%rip), %rdx
    00000b8b: 	movq	%r13, %rdi
    00000b8e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2958
    00000b93: 	movq	0x58(%rsp), %rdx
    00000b98: 	movq	0x50(%rsp), %rsi
    00000b9d: 	movq	%r13, %rdi
    00000ba0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2976
    00000ba5: 	movq	(%rsp), %rsi
    00000ba9: 	leaq	0x10(%rax), %rdx
    00000bad: 	movq	%rsi, 0x90(%rsp)
    00000bb5: 	movq	(%rax), %rcx
    00000bb8: 	cmpq	%rdx, %rcx
    00000bbb: 	je	.Ltmp1540 # Offset: 3003
    00000bc1: 	movq	%rcx, 0x90(%rsp)
    00000bc9: 	movq	0x10(%rax), %rcx
    00000bcd: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1564:
    00000bd5: 	movq	0x8(%rax), %rcx
    00000bd9: 	movq	%r14, %r8
    00000bdc: 	movq	%rbp, %rsi
    00000bdf: 	movq	%r12, %rdi
    00000be2: 	movq	%rcx, 0x98(%rsp)
    00000bea: 	leaq	_Z14inner_product6IPKiiET0_T_S3_m(%rip), %rcx
    00000bf1: 	movq	%rdx, (%rax)
    00000bf4: 	movl	$0x1f40, %edx
    00000bf9: 	movq	$0x0, 0x8(%rax)
    00000c01: 	movb	$0x0, 0x10(%rax)
    00000c05: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3077
    00000c0a: 	movq	0x90(%rsp), %rdi
    00000c12: 	cmpq	(%rsp), %rdi
    00000c16: 	je	.Ltmp1541 # Offset: 3094
    00000c18: 	movq	0xa0(%rsp), %rax
    00000c20: 	leaq	0x1(%rax), %rsi
    00000c24: 	callq	_ZdlPvm@PLT # Offset: 3108
.Ltmp1541:
    00000c29: 	movq	0x70(%rsp), %rdi
    00000c2e: 	cmpq	0x10(%rsp), %rdi
    00000c33: 	je	.Ltmp1542 # Offset: 3123
    00000c35: 	movq	0x80(%rsp), %rax
    00000c3d: 	leaq	0x1(%rax), %rsi
    00000c41: 	callq	_ZdlPvm@PLT # Offset: 3137
.Ltmp1542:
    00000c46: 	movq	0x8(%rsp), %rsi
    00000c4b: 	leaq	DATAat0x32268(%rip), %rdx
    00000c52: 	movq	%r13, %rdi
    00000c55: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3157
    00000c5a: 	movq	0x58(%rsp), %rdx
    00000c5f: 	movq	0x50(%rsp), %rsi
    00000c64: 	movq	%r13, %rdi
    00000c67: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3175
    00000c6c: 	movq	(%rsp), %rsi
    00000c70: 	leaq	0x10(%rax), %rdx
    00000c74: 	movq	%rsi, 0x90(%rsp)
    00000c7c: 	movq	(%rax), %rcx
    00000c7f: 	cmpq	%rdx, %rcx
    00000c82: 	je	.Ltmp1543 # Offset: 3202
    00000c88: 	movq	%rcx, 0x90(%rsp)
    00000c90: 	movq	0x10(%rax), %rcx
    00000c94: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1579:
    00000c9c: 	movq	0x8(%rax), %rcx
    00000ca0: 	movq	%r14, %r8
    00000ca3: 	movq	%rbp, %rsi
    00000ca6: 	movq	%r12, %rdi
    00000ca9: 	movq	%rcx, 0x98(%rsp)
    00000cb1: 	leaq	_Z14inner_product7IPKiiET0_T_S3_m(%rip), %rcx
    00000cb8: 	movq	%rdx, (%rax)
    00000cbb: 	movl	$0x1f40, %edx
    00000cc0: 	movq	$0x0, 0x8(%rax)
    00000cc8: 	movb	$0x0, 0x10(%rax)
    00000ccc: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3276
    00000cd1: 	movq	0x90(%rsp), %rdi
    00000cd9: 	cmpq	(%rsp), %rdi
    00000cdd: 	je	.Ltmp1544 # Offset: 3293
    00000cdf: 	movq	0xa0(%rsp), %rax
    00000ce7: 	leaq	0x1(%rax), %rsi
    00000ceb: 	callq	_ZdlPvm@PLT # Offset: 3307
.Ltmp1544:
    00000cf0: 	movq	0x70(%rsp), %rdi
    00000cf5: 	cmpq	0x10(%rsp), %rdi
    00000cfa: 	je	.Ltmp1545 # Offset: 3322
    00000cfc: 	movq	0x80(%rsp), %rax
    00000d04: 	leaq	0x1(%rax), %rsi
    00000d08: 	callq	_ZdlPvm@PLT # Offset: 3336
.Ltmp1545:
    00000d0d: 	movq	0x8(%rsp), %rsi
    00000d12: 	leaq	DATAat0x3227c(%rip), %rdx
    00000d19: 	movq	%r13, %rdi
    00000d1c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3356
    00000d21: 	movq	0x58(%rsp), %rdx
    00000d26: 	movq	0x50(%rsp), %rsi
    00000d2b: 	movq	%r13, %rdi
    00000d2e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3374
    00000d33: 	movq	(%rsp), %rsi
    00000d37: 	leaq	0x10(%rax), %rdx
    00000d3b: 	movq	%rsi, 0x90(%rsp)
    00000d43: 	movq	(%rax), %rcx
    00000d46: 	cmpq	%rdx, %rcx
    00000d49: 	je	.Ltmp1546 # Offset: 3401
    00000d4f: 	movq	%rcx, 0x90(%rsp)
    00000d57: 	movq	0x10(%rax), %rcx
    00000d5b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1578:
    00000d63: 	movq	0x8(%rax), %rcx
    00000d67: 	movq	%r14, %r8
    00000d6a: 	movq	%rbp, %rsi
    00000d6d: 	movq	%r12, %rdi
    00000d70: 	movq	%rcx, 0x98(%rsp)
    00000d78: 	leaq	_Z14inner_product8IPKiiET0_T_S3_m(%rip), %rcx
    00000d7f: 	movq	%rdx, (%rax)
    00000d82: 	movl	$0x1f40, %edx
    00000d87: 	movq	$0x0, 0x8(%rax)
    00000d8f: 	movb	$0x0, 0x10(%rax)
    00000d93: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3475
    00000d98: 	movq	0x90(%rsp), %rdi
    00000da0: 	cmpq	(%rsp), %rdi
    00000da4: 	je	.Ltmp1547 # Offset: 3492
    00000da6: 	movq	0xa0(%rsp), %rax
    00000dae: 	leaq	0x1(%rax), %rsi
    00000db2: 	callq	_ZdlPvm@PLT # Offset: 3506
.Ltmp1547:
    00000db7: 	movq	0x70(%rsp), %rdi
    00000dbc: 	cmpq	0x10(%rsp), %rdi
    00000dc1: 	je	.Ltmp1548 # Offset: 3521
    00000dc3: 	movq	0x80(%rsp), %rax
    00000dcb: 	leaq	0x1(%rax), %rsi
    00000dcf: 	callq	_ZdlPvm@PLT # Offset: 3535
.Ltmp1548:
    00000dd4: 	movq	0x8(%rsp), %rsi
    00000dd9: 	leaq	DATAat0x32290(%rip), %rdx
    00000de0: 	movq	%r13, %rdi
    00000de3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3555
    00000de8: 	movq	0x58(%rsp), %rdx
    00000ded: 	movq	0x50(%rsp), %rsi
    00000df2: 	movq	%r13, %rdi
    00000df5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3573
    00000dfa: 	movq	(%rsp), %rsi
    00000dfe: 	leaq	0x10(%rax), %rdx
    00000e02: 	movq	%rsi, 0x90(%rsp)
    00000e0a: 	movq	(%rax), %rcx
    00000e0d: 	cmpq	%rdx, %rcx
    00000e10: 	je	.Ltmp1549 # Offset: 3600
    00000e16: 	movq	%rcx, 0x90(%rsp)
    00000e1e: 	movq	0x10(%rax), %rcx
    00000e22: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1577:
    00000e2a: 	movq	0x8(%rax), %rcx
    00000e2e: 	movq	%r14, %r8
    00000e31: 	movq	%rbp, %rsi
    00000e34: 	movq	%r12, %rdi
    00000e37: 	movq	%rcx, 0x98(%rsp)
    00000e3f: 	leaq	_Z14inner_product9IPKiiET0_T_S3_m(%rip), %rcx
    00000e46: 	movq	%rdx, (%rax)
    00000e49: 	movl	$0x1f40, %edx
    00000e4e: 	movq	$0x0, 0x8(%rax)
    00000e56: 	movb	$0x0, 0x10(%rax)
    00000e5a: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3674
    00000e5f: 	movq	0x90(%rsp), %rdi
    00000e67: 	cmpq	(%rsp), %rdi
    00000e6b: 	je	.Ltmp1550 # Offset: 3691
    00000e6d: 	movq	0xa0(%rsp), %rax
    00000e75: 	leaq	0x1(%rax), %rsi
    00000e79: 	callq	_ZdlPvm@PLT # Offset: 3705
.Ltmp1550:
    00000e7e: 	movq	0x70(%rsp), %rdi
    00000e83: 	cmpq	0x10(%rsp), %rdi
    00000e88: 	je	.Ltmp1551 # Offset: 3720
    00000e8a: 	movq	0x80(%rsp), %rax
    00000e92: 	leaq	0x1(%rax), %rsi
    00000e96: 	callq	_ZdlPvm@PLT # Offset: 3734
.Ltmp1551:
    00000e9b: 	movq	0x8(%rsp), %rsi
    00000ea0: 	leaq	DATAat0x322a4(%rip), %rdx
    00000ea7: 	movq	%r13, %rdi
    00000eaa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3754
    00000eaf: 	movq	0x58(%rsp), %rdx
    00000eb4: 	movq	0x50(%rsp), %rsi
    00000eb9: 	movq	%r13, %rdi
    00000ebc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3772
    00000ec1: 	movq	(%rsp), %rsi
    00000ec5: 	leaq	0x10(%rax), %rdx
    00000ec9: 	movq	%rsi, 0x90(%rsp)
    00000ed1: 	movq	(%rax), %rcx
    00000ed4: 	cmpq	%rdx, %rcx
    00000ed7: 	je	.Ltmp1552 # Offset: 3799
    00000edd: 	movq	%rcx, 0x90(%rsp)
    00000ee5: 	movq	0x10(%rax), %rcx
    00000ee9: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1576:
    00000ef1: 	movq	0x8(%rax), %rcx
    00000ef5: 	movq	%r14, %r8
    00000ef8: 	movq	%rbp, %rsi
    00000efb: 	movq	%r12, %rdi
    00000efe: 	movq	%rcx, 0x98(%rsp)
    00000f06: 	leaq	_Z15inner_product10IPKiiET0_T_S3_m(%rip), %rcx
    00000f0d: 	movq	%rdx, (%rax)
    00000f10: 	movl	$0x1f40, %edx
    00000f15: 	movq	$0x0, 0x8(%rax)
    00000f1d: 	movb	$0x0, 0x10(%rax)
    00000f21: 	callq	_Z18test_inner_productIiPFiPKiS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3873
    00000f26: 	movq	0x90(%rsp), %rdi
    00000f2e: 	cmpq	(%rsp), %rdi
    00000f32: 	je	.Ltmp1553 # Offset: 3890
    00000f34: 	movq	0xa0(%rsp), %rax
    00000f3c: 	leaq	0x1(%rax), %rsi
    00000f40: 	callq	_ZdlPvm@PLT # Offset: 3904
.Ltmp1553:
    00000f45: 	movq	0x70(%rsp), %rdi
    00000f4a: 	cmpq	0x10(%rsp), %rdi
    00000f4f: 	je	.Ltmp1554 # Offset: 3919
    00000f51: 	movq	0x80(%rsp), %rax
    00000f59: 	leaq	0x1(%rax), %rsi
    00000f5d: 	callq	_ZdlPvm@PLT # Offset: 3933
.Ltmp1554:
    00000f62: 	movq	0x8(%rsp), %rsi
    00000f67: 	leaq	DATAat0x322b9(%rip), %rdx
    00000f6e: 	movq	%r14, %rdi
    00000f71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3953
    00000f76: 	movl	iterations(%rip), %edx
    00000f7c: 	xorl	%r8d, %r8d
    00000f7f: 	xorl	%ecx, %ecx
    00000f81: 	movl	$0x1f40, %esi
    00000f86: 	movq	0x90(%rsp), %rdi
    00000f8e: 	callq	_Z9summarizePKciiii # Offset: 3982
    00000f93: 	movq	0x90(%rsp), %rdi
    00000f9b: 	cmpq	(%rsp), %rdi
    00000f9f: 	je	.Ltmp1555 # Offset: 3999
    00000fa1: 	movq	0xa0(%rsp), %rax
    00000fa9: 	leaq	0x1(%rax), %rsi
    00000fad: 	callq	_ZdlPvm@PLT # Offset: 4013
.Ltmp1555:
    00000fb2: 	movq	0x50(%rsp), %rdi
    00000fb7: 	cmpq	0x18(%rsp), %rdi
    00000fbc: 	je	.Ltmp1556 # Offset: 4028
    00000fbe: 	movq	0x60(%rsp), %rax
    00000fc3: 	leaq	0x1(%rax), %rsi
    00000fc7: 	callq	_ZdlPvm@PLT # Offset: 4039
.Ltmp1556:
    00000fcc: 	movq	0xfab8(%rsp), %rax
    00000fd4: 	subq	%fs:0x28, %rax
    00000fdd: 	jne	.Ltmp1557 # Offset: 4061
    00000fe3: 	addq	$0xfac8, %rsp
    00000fea: 	popq	%rbx
    00000feb: 	popq	%rbp
    00000fec: 	popq	%r12
    00000fee: 	popq	%r13
    00000ff0: 	popq	%r14
    00000ff2: 	popq	%r15
    00000ff4: 	retq # Offset: 4084
    00000ff5: 	nopl	(%rax) # Size: 3
.Ltmp1489:
    00000ff8: 	movq	0x90(%rsp), %rdx
    00001000: 	movq	%r15, %rsi
    00001003: 	movl	$0x1, %edi
    00001008: 	xorl	%eax, %eax
    0000100a: 	callq	__printf_chk@PLT # Offset: 4106
    0000100f: 	movl	iterations(%rip), %ecx
    00001015: 	jmp	.Ltmp1558 # Offset: 4117
.Ltmp1494:
    0000101a: 	movq	0x20(%rsp), %rsi
    0000101f: 	xorl	%edx, %edx
    00001021: 	movq	%rbx, %rdi
    00001024: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4132
    00001029: 	movq	%rax, (%rbx)
    0000102c: 	movq	%rax, %rdi
    0000102f: 	movq	0x30(%rsp), %rax
    00001034: 	movq	%rax, 0x10(%rbx)
.Ltmp1582:
    00001038: 	movq	0x28(%rsp), %rsi
    0000103d: 	movq	%r15, %rdx
    00001040: 	callq	memcpy@PLT # Offset: 4160
    00001045: 	movq	0x30(%rsp), %r15
    0000104a: 	movq	(%rbx), %rdi
    0000104d: 	jmp	.Ltmp1559 # Offset: 4173
    00001052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1503:
    00001058: 	movq	0x90(%rsp), %rdx
    00001060: 	movq	%r15, %rsi
    00001063: 	movl	$0x1, %edi
    00001068: 	xorl	%eax, %eax
    0000106a: 	callq	__printf_chk@PLT # Offset: 4202
    0000106f: 	movl	iterations(%rip), %ecx
    00001075: 	jmp	.Ltmp1560 # Offset: 4213
    0000107a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1517:
    00001080: 	movq	0x90(%rsp), %rdx
    00001088: 	movq	%r15, %rsi
    0000108b: 	movl	$0x1, %edi
    00001090: 	xorl	%eax, %eax
    00001092: 	callq	__printf_chk@PLT # Offset: 4242
    00001097: 	movl	iterations(%rip), %ecx
    0000109d: 	jmp	.Ltmp1561 # Offset: 4253
.Ltmp1532:
    000010a2: 	testq	%rbx, %rbx
    000010a5: 	jne	.Ltmp1562 # Offset: 4261
    000010ab: 	movq	0x10(%rsp), %rax
    000010b0: 	jmp	.Ltmp1563 # Offset: 4272
.Ltmp1531:
    000010b5: 	movq	0x20(%rsp), %rsi
    000010ba: 	xorl	%edx, %edx
    000010bc: 	movq	%r13, %rdi
    000010bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4287
    000010c4: 	movq	%rax, 0x70(%rsp)
    000010c9: 	movq	%rax, %rdi
    000010cc: 	movq	0x30(%rsp), %rax
    000010d1: 	movq	%rax, 0x80(%rsp)
.Ltmp1585:
    000010d9: 	movq	%rbx, %rdx
    000010dc: 	movq	%r15, %rsi
    000010df: 	callq	memcpy@PLT # Offset: 4319
    000010e4: 	movq	0x30(%rsp), %rbx
    000010e9: 	movq	0x70(%rsp), %rax
    000010ee: 	jmp	.Ltmp1563 # Offset: 4334
.Ltmp1540:
    000010f3: 	movdqu	0x10(%rax), %xmm5
    000010f8: 	movaps	%xmm5, 0xa0(%rsp)
    00001100: 	jmp	.Ltmp1564 # Offset: 4352
.Ltmp1537:
    00001105: 	movdqu	0x10(%rax), %xmm7
    0000110a: 	movaps	%xmm7, 0xa0(%rsp)
    00001112: 	jmp	.Ltmp1565 # Offset: 4370
.Ltmp1491:
    00001117: 	movq	%r14, %rsi
    0000111a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001121: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4385
    00001126: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000112d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001134: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000113b: 	jne	.Ltmp1566 # Offset: 4411
.Ltmp1496:
    00001141: 	movq	-0x8(%rdx), %rax
    00001145: 	addq	$0x200, %rax
    0000114b: 	jmp	.Ltmp1566 # Offset: 4427
.Ltmp1510:
    00001150: 	movq	-0x8(%rdx), %rax
    00001154: 	addq	$0x200, %rax
    0000115a: 	jmp	.Ltmp1567 # Offset: 4442
.Ltmp1505:
    0000115f: 	movq	%r14, %rsi
    00001162: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001169: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4457
    0000116e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001175: 	jmp	.Ltmp1568 # Offset: 4469
.Ltmp1534:
    0000117a: 	movdqu	0x10(%rax), %xmm6
    0000117f: 	movaps	%xmm6, 0xa0(%rsp)
    00001187: 	jmp	.Ltmp1569 # Offset: 4487
.Ltmp1526:
    0000118c: 	movdqu	0x10(%rax), %xmm5
    00001191: 	movaps	%xmm5, 0xa0(%rsp)
    00001199: 	jmp	.Ltmp1570 # Offset: 4505
.Ltmp1524:
    0000119e: 	movq	-0x8(%rdx), %rax
    000011a2: 	addq	$0x200, %rax
    000011a8: 	jmp	.Ltmp1571 # Offset: 4520
.Ltmp1498:
    000011ad: 	movdqu	0x10(%rax), %xmm6
    000011b2: 	movaps	%xmm6, 0xa0(%rsp)
    000011ba: 	jmp	.Ltmp1572 # Offset: 4538
.Ltmp1512:
    000011bf: 	movdqu	0x10(%rax), %xmm7
    000011c4: 	movaps	%xmm7, 0xa0(%rsp)
    000011cc: 	jmp	.Ltmp1573 # Offset: 4556
.Ltmp1519:
    000011d1: 	movq	%r14, %rsi
    000011d4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011db: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4571
    000011e0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011e7: 	jmp	.Ltmp1574 # Offset: 4583
.Ltmp1484:
    000011ec: 	movdqu	0x10(%rax), %xmm5
    000011f1: 	movaps	%xmm5, 0xa0(%rsp)
    000011f9: 	jmp	.Ltmp1575 # Offset: 4601
.Ltmp1552:
    000011fe: 	movdqu	0x10(%rax), %xmm6
    00001203: 	movaps	%xmm6, 0xa0(%rsp)
    0000120b: 	jmp	.Ltmp1576 # Offset: 4619
.Ltmp1549:
    00001210: 	movdqu	0x10(%rax), %xmm5
    00001215: 	movaps	%xmm5, 0xa0(%rsp)
    0000121d: 	jmp	.Ltmp1577 # Offset: 4637
.Ltmp1546:
    00001222: 	movdqu	0x10(%rax), %xmm7
    00001227: 	movaps	%xmm7, 0xa0(%rsp)
    0000122f: 	jmp	.Ltmp1578 # Offset: 4655
.Ltmp1543:
    00001234: 	movdqu	0x10(%rax), %xmm6
    00001239: 	movaps	%xmm6, 0xa0(%rsp)
    00001241: 	jmp	.Ltmp1579 # Offset: 4673
.Ltmp1509:
    00001246: 	testq	%r15, %r15
    00001249: 	je	.Ltmp1580 # Offset: 4681
    0000124f: 	jmp	.Ltmp1581 # Offset: 4687
    00001254: 	nopl	(%rax) # Size: 4
.Ltmp1495:
    00001258: 	testq	%r15, %r15
    0000125b: 	je	.Ltmp1559 # Offset: 4699
    00001261: 	jmp	.Ltmp1582 # Offset: 4705
    00001266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1523:
    00001270: 	testq	%rbx, %rbx
    00001273: 	je	.Ltmp1583 # Offset: 4723
    00001279: 	jmp	.Ltmp1584 # Offset: 4729
    0000127b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1522:
    00001280: 	movq	0x20(%rsp), %rsi
    00001285: 	xorl	%edx, %edx
    00001287: 	movq	%r15, %rdi
    0000128a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4746
    0000128f: 	movq	%rax, (%r15)
    00001292: 	movq	%rax, %rdi
    00001295: 	movq	0x30(%rsp), %rax
    0000129a: 	movq	%rax, 0x10(%r15)
.Ltmp1584:
    0000129e: 	movq	0x28(%rsp), %rsi
    000012a3: 	movq	%rbx, %rdx
    000012a6: 	callq	memcpy@PLT # Offset: 4774
    000012ab: 	movq	0x30(%rsp), %rbx
    000012b0: 	movq	(%r15), %rdi
    000012b3: 	jmp	.Ltmp1583 # Offset: 4787
.Ltmp1508:
    000012b8: 	movq	0x20(%rsp), %rsi
    000012bd: 	xorl	%edx, %edx
    000012bf: 	movq	%rbx, %rdi
    000012c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4802
    000012c7: 	movq	%rax, (%rbx)
    000012ca: 	movq	%rax, %rdi
    000012cd: 	movq	0x30(%rsp), %rax
    000012d2: 	movq	%rax, 0x10(%rbx)
.Ltmp1581:
    000012d6: 	movq	0x28(%rsp), %rsi
    000012db: 	movq	%r15, %rdx
    000012de: 	callq	memcpy@PLT # Offset: 4830
    000012e3: 	movq	0x30(%rsp), %r15
    000012e8: 	movq	(%rbx), %rdi
    000012eb: 	jmp	.Ltmp1580 # Offset: 4843
.Ltmp1507:
    000012f0: 	leaq	DATAat0x32158(%rip), %rdi
    000012f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4855
.Ltmp1521:
    000012fc: 	leaq	DATAat0x32158(%rip), %rdi
    00001303: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4867
.Ltmp1530:
    00001308: 	leaq	DATAat0x32158(%rip), %rdi
    0000130f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4879
.Ltmp1533:
    00001314: 	leaq	DATAat0x32182(%rip), %rdi
    0000131b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4891
.Ltmp1557:
    00001320: 	callq	__stack_chk_fail@PLT # Offset: 4896
.Ltmp1493:
    00001325: 	leaq	DATAat0x32158(%rip), %rdi
    0000132c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4908
.Ltmp1562:
    00001331: 	movq	0x10(%rsp), %rdi
    00001336: 	jmp	.Ltmp1585 # Offset: 4918
    0000133b: 	endbr64
.Ltmp1590:
    0000133f: 	movq	%rax, %rbp
    00001342: 	jmp	.Ltmp1586 # Offset: 4930
    00001344: 	endbr64
.Ltmp1591:
    00001348: 	movq	%rax, %rbp
    0000134b: 	movq	0x90(%rsp), %rdi
    00001353: 	cmpq	(%rsp), %rdi
    00001357: 	je	.Ltmp1586 # Offset: 4951
    00001359: 	movq	0xa0(%rsp), %rax
    00001361: 	leaq	0x1(%rax), %rsi
    00001365: 	callq	_ZdlPvm@PLT # Offset: 4965
.Ltmp1586:
    0000136a: 	movq	0x70(%rsp), %rdi
    0000136f: 	cmpq	0x10(%rsp), %rdi
    00001374: 	je	.Ltmp1587 # Offset: 4980
.Ltmp1593:
    00001376: 	movq	0x80(%rsp), %rax
    0000137e: 	leaq	0x1(%rax), %rsi
    00001382: 	callq	_ZdlPvm@PLT # Offset: 4994
.Ltmp1587:
    00001387: 	movq	0x50(%rsp), %rdi
    0000138c: 	cmpq	0x18(%rsp), %rdi
    00001391: 	je	.Ltmp1588 # Offset: 5009
    00001393: 	movq	0x60(%rsp), %rax
    00001398: 	leaq	0x1(%rax), %rsi
    0000139c: 	callq	_ZdlPvm@PLT # Offset: 5020
.Ltmp1588:
    000013a1: 	movq	%rbp, %rdi
    000013a4: 	callq	_Unwind_Resume@PLT # Offset: 5028
    000013a9: 	endbr64
    000013ad: 	movq	%rax, %rbp
    000013b0: 	jmp	.Ltmp1587 # Offset: 5040
    000013b2: 	endbr64
.Ltmp1594:
    000013b6: 	movq	%rax, %rbp
    000013b9: 	jmp	.Ltmp1589 # Offset: 5049
    000013bb: 	endbr64
    000013bf: 	jmp	.Ltmp1590 # Offset: 5055
    000013c4: 	endbr64
    000013c8: 	jmp	.Ltmp1590 # Offset: 5064
    000013cd: 	endbr64
    000013d1: 	jmp	.Ltmp1591 # Offset: 5073
    000013d6: 	endbr64
    000013da: 	movq	%rax, %rbp
    000013dd: 	jmp	.Ltmp1592 # Offset: 5085
    000013df: 	endbr64
    000013e3: 	movq	%rax, %rbp
    000013e6: 	movq	0x90(%rsp), %rdi
    000013ee: 	cmpq	(%rsp), %rdi
    000013f2: 	je	.Ltmp1592 # Offset: 5106
    000013f4: 	movq	0xa0(%rsp), %rax
    000013fc: 	leaq	0x1(%rax), %rsi
    00001400: 	callq	_ZdlPvm@PLT # Offset: 5120
.Ltmp1592:
    00001405: 	movq	0x70(%rsp), %rdi
    0000140a: 	leaq	0x80(%rsp), %rax
    00001412: 	cmpq	%rax, %rdi
    00001415: 	jne	.Ltmp1593 # Offset: 5141
    0000141b: 	jmp	.Ltmp1587 # Offset: 5147
    00001420: 	endbr64
    00001424: 	jmp	.Ltmp1590 # Offset: 5156
    00001429: 	endbr64
    0000142d: 	jmp	.Ltmp1591 # Offset: 5165
.Ltmp1589:
    00001432: 	movq	0x90(%rsp), %rdi
    0000143a: 	cmpq	(%rsp), %rdi
    0000143e: 	je	.Ltmp1587 # Offset: 5182
    00001444: 	movq	0xa0(%rsp), %rax
    0000144c: 	leaq	0x1(%rax), %rsi
    00001450: 	callq	_ZdlPvm@PLT # Offset: 5200
    00001455: 	jmp	.Ltmp1587 # Offset: 5205
    0000145a: 	endbr64
    0000145e: 	jmp	.Ltmp1591 # Offset: 5214
    00001463: 	endbr64
    00001467: 	jmp	.Ltmp1590 # Offset: 5223
    0000146c: 	endbr64
    00001470: 	jmp	.Ltmp1591 # Offset: 5232
    00001475: 	endbr64
    00001479: 	jmp	.Ltmp1590 # Offset: 5241
    0000147e: 	endbr64
    00001482: 	jmp	.Ltmp1591 # Offset: 5250
    00001487: 	endbr64
    0000148b: 	jmp	.Ltmp1590 # Offset: 5259
    00001490: 	endbr64
    00001494: 	jmp	.Ltmp1594 # Offset: 5268
    00001499: 	endbr64
    0000149d: 	jmp	.Ltmp1594 # Offset: 5277
    000014a2: 	endbr64
    000014a6: 	jmp	.Ltmp1590 # Offset: 5286
    000014ab: 	endbr64
    000014af: 	jmp	.Ltmp1590 # Offset: 5295
    000014b4: 	endbr64
    000014b8: 	jmp	.Ltmp1591 # Offset: 5304
    000014bd: 	endbr64
    000014c1: 	jmp	.Ltmp1594 # Offset: 5313
    000014c6: 	endbr64
    000014ca: 	jmp	.Ltmp1590 # Offset: 5322
    000014cf: 	endbr64
    000014d3: 	jmp	.Ltmp1591 # Offset: 5331
    000014d8: 	endbr64
    000014dc: 	jmp	.Ltmp1591 # Offset: 5340
    000014e1: 	endbr64
    000014e5: 	jmp	.Ltmp1590 # Offset: 5349
    000014ea: 	endbr64
    000014ee: 	jmp	.Ltmp1591 # Offset: 5358
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x26d60
  Size        : 0x1511
  MaxSize     : 0x1520
  Offset      : 0x26d60
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1595:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1595 # Offset: 37
    00000027: 	subq	$0xae8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm3
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0xfad8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x50(%rsp), %rdi
    00000056: 	leaq	0x80(%rsp), %rax
    0000005e: 	movl	$0x616f6c66, 0x80(%rsp)
    00000069: 	movq	%rax, 0x40(%rsp)
    0000006e: 	leaq	0xd0(%rsp), %r12
    00000076: 	leaq	0x7dd0(%rsp), %rbp
    0000007e: 	movq	%rax, 0x70(%rsp)
    00000083: 	movb	$0x74, 0x84(%rsp)
    0000008b: 	movq	$0x5, 0x78(%rsp)
    00000094: 	movb	$0x0, 0x85(%rsp)
    0000009c: 	movq	%rdi, 0x48(%rsp)
    000000a1: 	movaps	%xmm2, 0x50(%rsp)
    000000a6: 	movaps	%xmm3, 0x60(%rsp)
    000000ab: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 171
    000000b0: 	pxor	%xmm0, %xmm0
    000000b4: 	movq	%r12, %rax
    000000b7: 	cvtsi2ssl	init_value(%rip), %xmm0
    000000bf: 	shufps	$0x0, %xmm0, %xmm0
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1596:
    000000c8: 	movaps	%xmm0, (%rax)
    000000cb: 	addq	$0x10, %rax
    000000cf: 	cmpq	%rax, %rbp
    000000d2: 	jne	.Ltmp1596 # Offset: 210
    000000d4: 	movq	%rbp, %rax
    000000d7: 	leaq	0xfad0(%rsp), %rdx
    000000df: 	nop # Size: 1
.Ltmp1597:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rdx, %rax
    000000ea: 	jne	.Ltmp1597 # Offset: 234
    000000ec: 	leaq	0x70(%rsp), %rax
    000000f1: 	leaq	0x90(%rsp), %r13
    000000f9: 	leaq	DATAat0x321d8(%rip), %rdx
    00000100: 	movq	%rax, %rsi
    00000103: 	movq	%r13, %rdi
    00000106: 	movq	%rax, 0x30(%rsp)
    0000010b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 267
    00000110: 	movq	0x78(%rsp), %rdx
    00000115: 	movq	0x70(%rsp), %rsi
    0000011a: 	movq	%r13, %rdi
    0000011d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 285
    00000122: 	leaq	0xc0(%rsp), %rsi
    0000012a: 	leaq	0x10(%rax), %rdx
    0000012e: 	movq	%rsi, 0xb0(%rsp)
    00000136: 	movq	(%rax), %rcx
    00000139: 	movq	%rsi, 0x28(%rsp)
    0000013e: 	cmpq	%rdx, %rcx
    00000141: 	je	.Ltmp1598 # Offset: 321
    00000147: 	movq	%rcx, 0xb0(%rsp)
    0000014f: 	movq	0x10(%rax), %rcx
    00000153: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1683:
    0000015b: 	movq	0x8(%rax), %rcx
    0000015f: 	leaq	0xb0(%rsp), %r15
    00000167: 	movq	%rbp, %rsi
    0000016a: 	movq	%r12, %rdi
    0000016d: 	movq	%r15, %r8
    00000170: 	movq	%rcx, 0xb8(%rsp)
    00000178: 	leaq	_Z17inner_product_stdIPKffET0_T_S3_m(%rip), %rcx
    0000017f: 	movq	%rdx, (%rax)
    00000182: 	movl	$0x1f40, %edx
    00000187: 	movq	$0x0, 0x8(%rax)
    0000018f: 	movb	$0x0, 0x10(%rax)
    00000193: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 403
    00000198: 	movq	0xb0(%rsp), %rdi
    000001a0: 	cmpq	0x28(%rsp), %rdi
    000001a5: 	je	.Ltmp1599 # Offset: 421
    000001a7: 	movq	0xc0(%rsp), %rax
    000001af: 	leaq	0x1(%rax), %rsi
    000001b3: 	callq	_ZdlPvm@PLT # Offset: 435
.Ltmp1599:
    000001b8: 	movq	0x90(%rsp), %rdi
    000001c0: 	leaq	0xa0(%rsp), %rax
    000001c8: 	movq	%rax, 0x38(%rsp)
    000001cd: 	cmpq	%rax, %rdi
    000001d0: 	je	.Ltmp1600 # Offset: 464
    000001d2: 	movq	0xa0(%rsp), %rax
    000001da: 	leaq	0x1(%rax), %rsi
    000001de: 	callq	_ZdlPvm@PLT # Offset: 478
.Ltmp1600:
    000001e3: 	movq	0x30(%rsp), %rsi
    000001e8: 	leaq	DATAat0x3231d(%rip), %rdx
    000001ef: 	movq	%r15, %rdi
    000001f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 498
    000001f7: 	callq	clock@PLT # Offset: 503
    000001fc: 	movl	iterations(%rip), %ecx
    00000202: 	movq	%rax, start_time(%rip)
    00000209: 	testl	%ecx, %ecx
    0000020b: 	jle	.Ltmp1601 # Offset: 523
    00000211: 	movss	DATAat0x32620(%rip), %xmm5
    00000219: 	pxor	%xmm4, %xmm4
    0000021d: 	movss	DATAat0x325d0(%rip), %xmm6
    00000225: 	xorl	%ebx, %ebx
    00000227: 	movsd	%xmm4, 0x20(%rsp)
    0000022d: 	leaq	DATAat0x321c8(%rip), %r14
    00000234: 	movss	%xmm5, 0x8(%rsp)
    0000023a: 	movaps	%xmm6, 0x10(%rsp)
    0000023f: 	nop # Size: 1
.Ltmp1604:
    00000240: 	pxor	%xmm1, %xmm1
    00000244: 	movq	%rbp, %rdx
    00000247: 	movq	%r12, %rax
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1602:
    00000250: 	movss	(%rax), %xmm0
    00000254: 	mulss	(%rdx), %xmm0
    00000258: 	addq	$0x4, %rax
    0000025c: 	addq	$0x4, %rdx
    00000260: 	cvtss2sd	%xmm0, %xmm0
    00000264: 	addsd	%xmm0, %xmm1
    00000268: 	cmpq	%rbp, %rax
    0000026b: 	jne	.Ltmp1602 # Offset: 619
    0000026d: 	pxor	%xmm0, %xmm0
    00000271: 	cvtsd2ss	%xmm1, %xmm1
    00000275: 	cvtsi2ssl	init_value(%rip), %xmm0
    0000027d: 	mulss	%xmm0, %xmm0
    00000281: 	mulss	0x8(%rsp), %xmm0
    00000287: 	subss	%xmm0, %xmm1
    0000028b: 	andps	0x10(%rsp), %xmm1
    00000290: 	comiss	DATAat0x32624(%rip), %xmm1
    00000297: 	ja	.Ltmp1603 # Offset: 663
.Ltmp1672:
    0000029d: 	addl	$0x1, %ebx
    000002a0: 	cmpl	%ecx, %ebx
    000002a2: 	jl	.Ltmp1604 # Offset: 674
.Ltmp1601:
    000002a4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002ab: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000002b2: 	subq	$0x20, %rax
    000002b6: 	cmpq	%rax, %rbx
    000002b9: 	je	.Ltmp1605 # Offset: 697
    000002bf: 	leaq	0x10(%rbx), %rdi
    000002c3: 	movq	0xb8(%rsp), %r14
    000002cb: 	movq	%rdi, (%rbx)
    000002ce: 	movq	0xb0(%rsp), %rax
    000002d6: 	movq	%rax, %rsi
    000002d9: 	movq	%rax, 0x8(%rsp)
    000002de: 	addq	%r14, %rsi
    000002e1: 	je	.Ltmp1606 # Offset: 737
    000002e3: 	testq	%rax, %rax
    000002e6: 	je	.Ltmp1607 # Offset: 742
.Ltmp1606:
    000002ec: 	movq	%r14, 0x50(%rsp)
    000002f1: 	cmpq	$0xf, %r14
    000002f5: 	ja	.Ltmp1608 # Offset: 757
    000002fb: 	cmpq	$0x1, %r14
    000002ff: 	jne	.Ltmp1609 # Offset: 767
    00000305: 	movq	0x8(%rsp), %rax
    0000030a: 	movzbl	(%rax), %eax
    0000030d: 	movb	%al, 0x10(%rbx)
.Ltmp1673:
    00000310: 	movq	%r14, 0x8(%rbx)
    00000314: 	movb	$0x0, (%rdi,%r14)
    00000319: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000320: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000327: 	addq	$0x20, %rax
    0000032b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000332: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000339: 	je	.Ltmp1610 # Offset: 825
.Ltmp1680:
    0000033f: 	movq	-0x20(%rax), %r14
    00000343: 	callq	clock@PLT # Offset: 835
    00000348: 	pxor	%xmm0, %xmm0
    0000034c: 	movq	%rax, end_time(%rip)
    00000353: 	movq	%r14, %rdi
    00000356: 	subq	start_time(%rip), %rax
    0000035d: 	cvtsi2sd	%rax, %xmm0
    00000362: 	divsd	DATAat0x32600(%rip), %xmm0
    0000036a: 	callq	_Z13record_resultdPKc # Offset: 874
    0000036f: 	movq	0xb0(%rsp), %rdi
    00000377: 	cmpq	0x28(%rsp), %rdi
    0000037c: 	je	.Ltmp1611 # Offset: 892
    0000037e: 	movq	0xc0(%rsp), %rax
    00000386: 	leaq	0x1(%rax), %rsi
    0000038a: 	callq	_ZdlPvm@PLT # Offset: 906
.Ltmp1611:
    0000038f: 	movq	0x30(%rsp), %rsi
    00000394: 	leaq	DATAat0x321f0(%rip), %rdx
    0000039b: 	movq	%r13, %rdi
    0000039e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 926
    000003a3: 	movq	0x78(%rsp), %rdx
    000003a8: 	movq	0x70(%rsp), %rsi
    000003ad: 	movq	%r13, %rdi
    000003b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 944
    000003b5: 	movq	0x28(%rsp), %rsi
    000003ba: 	leaq	0x10(%rax), %rdx
    000003be: 	movq	%rsi, 0xb0(%rsp)
    000003c6: 	movq	(%rax), %rcx
    000003c9: 	cmpq	%rdx, %rcx
    000003cc: 	je	.Ltmp1612 # Offset: 972
    000003d2: 	movq	%rcx, 0xb0(%rsp)
    000003da: 	movq	0x10(%rax), %rcx
    000003de: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1688:
    000003e6: 	movq	0x8(%rax), %rcx
    000003ea: 	movq	%r15, %r8
    000003ed: 	movq	%rbp, %rsi
    000003f0: 	movq	%r12, %rdi
    000003f3: 	movq	%rcx, 0xb8(%rsp)
    000003fb: 	leaq	_Z14inner_product1IPKffET0_T_S3_m(%rip), %rcx
    00000402: 	movq	%rdx, (%rax)
    00000405: 	movl	$0x1f40, %edx
    0000040a: 	movq	$0x0, 0x8(%rax)
    00000412: 	movb	$0x0, 0x10(%rax)
    00000416: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1046
    0000041b: 	movq	0xb0(%rsp), %rdi
    00000423: 	cmpq	0x28(%rsp), %rdi
    00000428: 	je	.Ltmp1613 # Offset: 1064
    0000042a: 	movq	0xc0(%rsp), %rax
    00000432: 	leaq	0x1(%rax), %rsi
    00000436: 	callq	_ZdlPvm@PLT # Offset: 1078
.Ltmp1613:
    0000043b: 	movq	0x90(%rsp), %rdi
    00000443: 	cmpq	0x38(%rsp), %rdi
    00000448: 	je	.Ltmp1614 # Offset: 1096
    0000044a: 	movq	0xa0(%rsp), %rax
    00000452: 	leaq	0x1(%rax), %rsi
    00000456: 	callq	_ZdlPvm@PLT # Offset: 1110
.Ltmp1614:
    0000045b: 	movq	0x30(%rsp), %rsi
    00000460: 	leaq	DATAat0x3233b(%rip), %rdx
    00000467: 	movq	%r15, %rdi
    0000046a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1130
    0000046f: 	callq	clock@PLT # Offset: 1135
    00000474: 	movl	iterations(%rip), %edx
    0000047a: 	movq	%rax, start_time(%rip)
    00000481: 	testl	%edx, %edx
    00000483: 	jle	.Ltmp1615 # Offset: 1155
    00000489: 	movss	DATAat0x32620(%rip), %xmm4
    00000491: 	pxor	%xmm7, %xmm7
    00000495: 	movss	DATAat0x325d0(%rip), %xmm5
    0000049d: 	xorl	%ebx, %ebx
    0000049f: 	movsd	%xmm7, 0x20(%rsp)
    000004a5: 	leaq	DATAat0x321c8(%rip), %r14
    000004ac: 	movss	%xmm4, 0x8(%rsp)
    000004b2: 	movaps	%xmm5, 0x10(%rsp)
    000004b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1618:
    000004c0: 	pxor	%xmm1, %xmm1
    000004c4: 	xorl	%eax, %eax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1616:
    000004d0: 	movss	(%r12,%rax,4), %xmm0
    000004d6: 	mulss	(%rbp,%rax,4), %xmm0
    000004dc: 	addq	$0x1, %rax
    000004e0: 	cvtss2sd	%xmm0, %xmm0
    000004e4: 	addsd	%xmm0, %xmm1
    000004e8: 	cmpq	$0x1f40, %rax
    000004ee: 	jne	.Ltmp1616 # Offset: 1262
    000004f0: 	pxor	%xmm0, %xmm0
    000004f4: 	cvtsd2ss	%xmm1, %xmm1
    000004f8: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000500: 	mulss	%xmm0, %xmm0
    00000504: 	mulss	0x8(%rsp), %xmm0
    0000050a: 	subss	%xmm0, %xmm1
    0000050e: 	andps	0x10(%rsp), %xmm1
    00000513: 	comiss	DATAat0x32624(%rip), %xmm1
    0000051a: 	ja	.Ltmp1617 # Offset: 1306
.Ltmp1674:
    00000520: 	addl	$0x1, %ebx
    00000523: 	cmpl	%edx, %ebx
    00000525: 	jl	.Ltmp1618 # Offset: 1317
.Ltmp1615:
    00000527: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000052e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000535: 	subq	$0x20, %rax
    00000539: 	cmpq	%rax, %rbx
    0000053c: 	je	.Ltmp1619 # Offset: 1340
    00000542: 	leaq	0x10(%rbx), %rdi
    00000546: 	movq	0xb8(%rsp), %r14
    0000054e: 	movq	%rdi, (%rbx)
    00000551: 	movq	0xb0(%rsp), %rax
    00000559: 	movq	%rax, %rsi
    0000055c: 	movq	%rax, 0x8(%rsp)
    00000561: 	addq	%r14, %rsi
    00000564: 	je	.Ltmp1620 # Offset: 1380
    00000566: 	testq	%rax, %rax
    00000569: 	je	.Ltmp1621 # Offset: 1385
.Ltmp1620:
    0000056f: 	movq	%r14, 0x50(%rsp)
    00000574: 	cmpq	$0xf, %r14
    00000578: 	ja	.Ltmp1622 # Offset: 1400
    0000057e: 	cmpq	$0x1, %r14
    00000582: 	jne	.Ltmp1623 # Offset: 1410
    00000588: 	movq	0x8(%rsp), %rax
    0000058d: 	movzbl	(%rax), %eax
    00000590: 	movb	%al, 0x10(%rbx)
.Ltmp1695:
    00000593: 	movq	%r14, 0x8(%rbx)
    00000597: 	movb	$0x0, (%rdi,%r14)
    0000059c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005a3: 	addq	$0x20, %rax
    000005a7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1682:
    000005ae: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005bc: 	je	.Ltmp1624 # Offset: 1468
.Ltmp1681:
    000005c2: 	movq	-0x20(%rax), %r14
    000005c6: 	callq	clock@PLT # Offset: 1478
    000005cb: 	pxor	%xmm0, %xmm0
    000005cf: 	movq	%rax, end_time(%rip)
    000005d6: 	movq	%r14, %rdi
    000005d9: 	subq	start_time(%rip), %rax
    000005e0: 	cvtsi2sd	%rax, %xmm0
    000005e5: 	divsd	DATAat0x32600(%rip), %xmm0
    000005ed: 	callq	_Z13record_resultdPKc # Offset: 1517
    000005f2: 	movq	0xb0(%rsp), %rdi
    000005fa: 	cmpq	0x28(%rsp), %rdi
    000005ff: 	je	.Ltmp1625 # Offset: 1535
    00000601: 	movq	0xc0(%rsp), %rax
    00000609: 	leaq	0x1(%rax), %rsi
    0000060d: 	callq	_ZdlPvm@PLT # Offset: 1549
.Ltmp1625:
    00000612: 	movq	0x30(%rsp), %rsi
    00000617: 	leaq	DATAat0x32204(%rip), %rdx
    0000061e: 	movq	%r13, %rdi
    00000621: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1569
    00000626: 	movq	0x78(%rsp), %rdx
    0000062b: 	movq	0x70(%rsp), %rsi
    00000630: 	movq	%r13, %rdi
    00000633: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1587
    00000638: 	movq	0x28(%rsp), %rsi
    0000063d: 	leaq	0x10(%rax), %rdx
    00000641: 	movq	%rsi, 0xb0(%rsp)
    00000649: 	movq	(%rax), %rcx
    0000064c: 	cmpq	%rdx, %rcx
    0000064f: 	je	.Ltmp1626 # Offset: 1615
    00000655: 	movq	%rcx, 0xb0(%rsp)
    0000065d: 	movq	0x10(%rax), %rcx
    00000661: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1689:
    00000669: 	movq	0x8(%rax), %rcx
    0000066d: 	movq	%r15, %r8
    00000670: 	movq	%rbp, %rsi
    00000673: 	movq	%r12, %rdi
    00000676: 	movq	%rcx, 0xb8(%rsp)
    0000067e: 	leaq	_Z14inner_product2IPKffET0_T_S3_m(%rip), %rcx
    00000685: 	movq	%rdx, (%rax)
    00000688: 	movl	$0x1f40, %edx
    0000068d: 	movq	$0x0, 0x8(%rax)
    00000695: 	movb	$0x0, 0x10(%rax)
    00000699: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1689
    0000069e: 	movq	0xb0(%rsp), %rdi
    000006a6: 	cmpq	0x28(%rsp), %rdi
    000006ab: 	je	.Ltmp1627 # Offset: 1707
    000006ad: 	movq	0xc0(%rsp), %rax
    000006b5: 	leaq	0x1(%rax), %rsi
    000006b9: 	callq	_ZdlPvm@PLT # Offset: 1721
.Ltmp1627:
    000006be: 	movq	0x90(%rsp), %rdi
    000006c6: 	cmpq	0x38(%rsp), %rdi
    000006cb: 	je	.Ltmp1628 # Offset: 1739
    000006cd: 	movq	0xa0(%rsp), %rax
    000006d5: 	leaq	0x1(%rax), %rsi
    000006d9: 	callq	_ZdlPvm@PLT # Offset: 1753
.Ltmp1628:
    000006de: 	movq	0x30(%rsp), %rsi
    000006e3: 	leaq	DATAat0x32355(%rip), %rdx
    000006ea: 	movq	%r15, %rdi
    000006ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1773
    000006f2: 	callq	clock@PLT # Offset: 1778
    000006f7: 	movl	iterations(%rip), %ecx
    000006fd: 	movq	%rax, start_time(%rip)
    00000704: 	testl	%ecx, %ecx
    00000706: 	jle	.Ltmp1629 # Offset: 1798
    0000070c: 	movss	DATAat0x32620(%rip), %xmm7
    00000714: 	pxor	%xmm6, %xmm6
    00000718: 	movss	DATAat0x325d0(%rip), %xmm2
    00000720: 	xorl	%ebx, %ebx
    00000722: 	movsd	%xmm6, 0x20(%rsp)
    00000728: 	leaq	DATAat0x321c8(%rip), %r14
    0000072f: 	movss	%xmm7, 0x8(%rsp)
    00000735: 	movaps	%xmm2, 0x10(%rsp)
    0000073a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1632:
    00000740: 	pxor	%xmm1, %xmm1
    00000744: 	movq	%rbp, %rdx
    00000747: 	movq	%r12, %rax
    0000074a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1630:
    00000750: 	movss	(%rax), %xmm0
    00000754: 	mulss	(%rdx), %xmm0
    00000758: 	addq	$0x4, %rax
    0000075c: 	addq	$0x4, %rdx
    00000760: 	cvtss2sd	%xmm0, %xmm0
    00000764: 	addsd	%xmm0, %xmm1
    00000768: 	cmpq	%rbp, %rax
    0000076b: 	jne	.Ltmp1630 # Offset: 1899
    0000076d: 	pxor	%xmm0, %xmm0
    00000771: 	cvtsd2ss	%xmm1, %xmm1
    00000775: 	cvtsi2ssl	init_value(%rip), %xmm0
    0000077d: 	mulss	%xmm0, %xmm0
    00000781: 	mulss	0x8(%rsp), %xmm0
    00000787: 	subss	%xmm0, %xmm1
    0000078b: 	andps	0x10(%rsp), %xmm1
    00000790: 	comiss	DATAat0x32624(%rip), %xmm1
    00000797: 	ja	.Ltmp1631 # Offset: 1943
.Ltmp1675:
    0000079d: 	addl	$0x1, %ebx
    000007a0: 	cmpl	%ecx, %ebx
    000007a2: 	jl	.Ltmp1632 # Offset: 1954
.Ltmp1629:
    000007a4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000007ab: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000007b2: 	subq	$0x20, %rax
    000007b6: 	cmpq	%rax, %rbx
    000007b9: 	je	.Ltmp1633 # Offset: 1977
    000007bf: 	leaq	0x10(%rbx), %rdi
    000007c3: 	movq	0xb8(%rsp), %r14
    000007cb: 	movq	%rdi, (%rbx)
    000007ce: 	movq	0xb0(%rsp), %rax
    000007d6: 	movq	%rax, %rsi
    000007d9: 	movq	%rax, 0x8(%rsp)
    000007de: 	addq	%r14, %rsi
    000007e1: 	je	.Ltmp1634 # Offset: 2017
    000007e3: 	testq	%rax, %rax
    000007e6: 	je	.Ltmp1635 # Offset: 2022
.Ltmp1634:
    000007ec: 	movq	%r14, 0x50(%rsp)
    000007f1: 	cmpq	$0xf, %r14
    000007f5: 	ja	.Ltmp1636 # Offset: 2037
    000007fb: 	cmpq	$0x1, %r14
    000007ff: 	jne	.Ltmp1637 # Offset: 2047
    00000805: 	movq	0x8(%rsp), %rax
    0000080a: 	movzbl	(%rax), %eax
    0000080d: 	movb	%al, 0x10(%rbx)
.Ltmp1693:
    00000810: 	movq	%r14, 0x8(%rbx)
    00000814: 	movb	$0x0, (%rdi,%r14)
    00000819: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000820: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000827: 	addq	$0x20, %rax
    0000082b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000832: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000839: 	je	.Ltmp1638 # Offset: 2105
.Ltmp1690:
    0000083f: 	movq	-0x20(%rax), %r14
    00000843: 	callq	clock@PLT # Offset: 2115
    00000848: 	pxor	%xmm0, %xmm0
    0000084c: 	movq	%rax, end_time(%rip)
    00000853: 	movq	%r14, %rdi
    00000856: 	subq	start_time(%rip), %rax
    0000085d: 	cvtsi2sd	%rax, %xmm0
    00000862: 	divsd	DATAat0x32600(%rip), %xmm0
    0000086a: 	callq	_Z13record_resultdPKc # Offset: 2154
    0000086f: 	movq	0xb0(%rsp), %rdi
    00000877: 	cmpq	0x28(%rsp), %rdi
    0000087c: 	je	.Ltmp1639 # Offset: 2172
    0000087e: 	movq	0xc0(%rsp), %rax
    00000886: 	leaq	0x1(%rax), %rsi
    0000088a: 	callq	_ZdlPvm@PLT # Offset: 2186
.Ltmp1639:
    0000088f: 	movq	0x30(%rsp), %rsi
    00000894: 	leaq	DATAat0x32218(%rip), %rdx
    0000089b: 	movq	%r13, %rdi
    0000089e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2206
    000008a3: 	movq	0x78(%rsp), %rdx
    000008a8: 	movq	0x70(%rsp), %rsi
    000008ad: 	movq	%r13, %rdi
    000008b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2224
    000008b5: 	movq	0x28(%rsp), %rsi
    000008ba: 	leaq	0x10(%rax), %rdx
    000008be: 	movq	%rsi, 0xb0(%rsp)
    000008c6: 	movq	(%rax), %rcx
    000008c9: 	cmpq	%rdx, %rcx
    000008cc: 	je	.Ltmp1640 # Offset: 2252
    000008d2: 	movq	%rcx, 0xb0(%rsp)
    000008da: 	movq	0x10(%rax), %rcx
    000008de: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1692:
    000008e6: 	movq	0x8(%rax), %rcx
    000008ea: 	movq	%r15, %r8
    000008ed: 	movq	%rbp, %rsi
    000008f0: 	movq	%r12, %rdi
    000008f3: 	movq	%rcx, 0xb8(%rsp)
    000008fb: 	leaq	_Z14inner_product3IPKffET0_T_S3_m(%rip), %rcx
    00000902: 	movq	%rdx, (%rax)
    00000905: 	movl	$0x1f40, %edx
    0000090a: 	movq	$0x0, 0x8(%rax)
    00000912: 	movb	$0x0, 0x10(%rax)
    00000916: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2326
    0000091b: 	movq	0xb0(%rsp), %rdi
    00000923: 	cmpq	0x28(%rsp), %rdi
    00000928: 	je	.Ltmp1641 # Offset: 2344
    0000092a: 	movq	0xc0(%rsp), %rax
    00000932: 	leaq	0x1(%rax), %rsi
    00000936: 	callq	_ZdlPvm@PLT # Offset: 2358
.Ltmp1641:
    0000093b: 	movq	0x90(%rsp), %rdi
    00000943: 	cmpq	0x38(%rsp), %rdi
    00000948: 	je	.Ltmp1642 # Offset: 2376
    0000094a: 	movq	0xa0(%rsp), %rax
    00000952: 	leaq	0x1(%rax), %rsi
    00000956: 	callq	_ZdlPvm@PLT # Offset: 2390
.Ltmp1642:
    0000095b: 	movq	0x30(%rsp), %rsi
    00000960: 	leaq	DATAat0x3222c(%rip), %rdx
    00000967: 	movq	%r13, %rdi
    0000096a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2410
    0000096f: 	movq	0x78(%rsp), %rdx
    00000974: 	movq	0x70(%rsp), %rsi
    00000979: 	movq	%r13, %rdi
    0000097c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2428
    00000981: 	movq	0x28(%rsp), %rsi
    00000986: 	leaq	0x10(%rax), %rdx
    0000098a: 	movq	%rsi, 0xb0(%rsp)
    00000992: 	movq	(%rax), %rcx
    00000995: 	cmpq	%rdx, %rcx
    00000998: 	je	.Ltmp1643 # Offset: 2456
    0000099e: 	movq	%rcx, 0xb0(%rsp)
    000009a6: 	movq	0x10(%rax), %rcx
    000009aa: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1691:
    000009b2: 	movq	0x8(%rax), %rcx
    000009b6: 	movq	%r15, %r8
    000009b9: 	movq	%rbp, %rsi
    000009bc: 	movq	%r12, %rdi
    000009bf: 	movq	%rcx, 0xb8(%rsp)
    000009c7: 	leaq	_Z14inner_product4IPKffET0_T_S3_m(%rip), %rcx
    000009ce: 	movq	%rdx, (%rax)
    000009d1: 	movl	$0x1f40, %edx
    000009d6: 	movq	$0x0, 0x8(%rax)
    000009de: 	movb	$0x0, 0x10(%rax)
    000009e2: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2530
    000009e7: 	movq	0xb0(%rsp), %rdi
    000009ef: 	cmpq	0x28(%rsp), %rdi
    000009f4: 	je	.Ltmp1644 # Offset: 2548
    000009f6: 	movq	0xc0(%rsp), %rax
    000009fe: 	leaq	0x1(%rax), %rsi
    00000a02: 	callq	_ZdlPvm@PLT # Offset: 2562
.Ltmp1644:
    00000a07: 	movq	0x90(%rsp), %rdi
    00000a0f: 	cmpq	0x38(%rsp), %rdi
    00000a14: 	je	.Ltmp1645 # Offset: 2580
    00000a16: 	movq	0xa0(%rsp), %rax
    00000a1e: 	leaq	0x1(%rax), %rsi
    00000a22: 	callq	_ZdlPvm@PLT # Offset: 2594
.Ltmp1645:
    00000a27: 	movq	0x30(%rsp), %rsi
    00000a2c: 	leaq	DATAat0x32240(%rip), %rdx
    00000a33: 	movq	%r13, %rdi
    00000a36: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2614
    00000a3b: 	movq	0x78(%rsp), %rdx
    00000a40: 	movq	0x70(%rsp), %rsi
    00000a45: 	movq	%r13, %rdi
    00000a48: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2632
    00000a4d: 	movq	0x28(%rsp), %rsi
    00000a52: 	leaq	0x10(%rax), %rdx
    00000a56: 	movq	%rsi, 0xb0(%rsp)
    00000a5e: 	movq	(%rax), %rcx
    00000a61: 	cmpq	%rdx, %rcx
    00000a64: 	je	.Ltmp1646 # Offset: 2660
    00000a6a: 	movq	%rcx, 0xb0(%rsp)
    00000a72: 	movq	0x10(%rax), %rcx
    00000a76: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1687:
    00000a7e: 	movq	0x8(%rax), %rcx
    00000a82: 	movq	%r15, %r8
    00000a85: 	movq	%rbp, %rsi
    00000a88: 	movq	%r12, %rdi
    00000a8b: 	movq	%rcx, 0xb8(%rsp)
    00000a93: 	leaq	_Z14inner_product5IPKffET0_T_S3_m(%rip), %rcx
    00000a9a: 	movq	%rdx, (%rax)
    00000a9d: 	movl	$0x1f40, %edx
    00000aa2: 	movq	$0x0, 0x8(%rax)
    00000aaa: 	movb	$0x0, 0x10(%rax)
    00000aae: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2734
    00000ab3: 	movq	0xb0(%rsp), %rdi
    00000abb: 	cmpq	0x28(%rsp), %rdi
    00000ac0: 	je	.Ltmp1647 # Offset: 2752
    00000ac2: 	movq	0xc0(%rsp), %rax
    00000aca: 	leaq	0x1(%rax), %rsi
    00000ace: 	callq	_ZdlPvm@PLT # Offset: 2766
.Ltmp1647:
    00000ad3: 	movq	0x90(%rsp), %rdi
    00000adb: 	cmpq	0x38(%rsp), %rdi
    00000ae0: 	je	.Ltmp1648 # Offset: 2784
    00000ae2: 	movq	0xa0(%rsp), %rax
    00000aea: 	leaq	0x1(%rax), %rsi
    00000aee: 	callq	_ZdlPvm@PLT # Offset: 2798
.Ltmp1648:
    00000af3: 	movq	0x30(%rsp), %rsi
    00000af8: 	leaq	DATAat0x32254(%rip), %rdx
    00000aff: 	movq	%r13, %rdi
    00000b02: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2818
    00000b07: 	movq	0x78(%rsp), %rdx
    00000b0c: 	movq	0x70(%rsp), %rsi
    00000b11: 	movq	%r13, %rdi
    00000b14: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2836
    00000b19: 	movq	0x28(%rsp), %rsi
    00000b1e: 	leaq	0x10(%rax), %rdx
    00000b22: 	movq	%rsi, 0xb0(%rsp)
    00000b2a: 	movq	(%rax), %rcx
    00000b2d: 	cmpq	%rdx, %rcx
    00000b30: 	je	.Ltmp1649 # Offset: 2864
    00000b36: 	movq	%rcx, 0xb0(%rsp)
    00000b3e: 	movq	0x10(%rax), %rcx
    00000b42: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1686:
    00000b4a: 	movq	0x8(%rax), %rcx
    00000b4e: 	movq	%r15, %r8
    00000b51: 	movq	%rbp, %rsi
    00000b54: 	movq	%r12, %rdi
    00000b57: 	movq	%rcx, 0xb8(%rsp)
    00000b5f: 	leaq	_Z14inner_product6IPKffET0_T_S3_m(%rip), %rcx
    00000b66: 	movq	%rdx, (%rax)
    00000b69: 	movl	$0x1f40, %edx
    00000b6e: 	movq	$0x0, 0x8(%rax)
    00000b76: 	movb	$0x0, 0x10(%rax)
    00000b7a: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2938
    00000b7f: 	movq	0xb0(%rsp), %rdi
    00000b87: 	cmpq	0x28(%rsp), %rdi
    00000b8c: 	je	.Ltmp1650 # Offset: 2956
    00000b8e: 	movq	0xc0(%rsp), %rax
    00000b96: 	leaq	0x1(%rax), %rsi
    00000b9a: 	callq	_ZdlPvm@PLT # Offset: 2970
.Ltmp1650:
    00000b9f: 	movq	0x90(%rsp), %rdi
    00000ba7: 	cmpq	0x38(%rsp), %rdi
    00000bac: 	je	.Ltmp1651 # Offset: 2988
    00000bae: 	movq	0xa0(%rsp), %rax
    00000bb6: 	leaq	0x1(%rax), %rsi
    00000bba: 	callq	_ZdlPvm@PLT # Offset: 3002
.Ltmp1651:
    00000bbf: 	movq	0x30(%rsp), %rsi
    00000bc4: 	leaq	DATAat0x32268(%rip), %rdx
    00000bcb: 	movq	%r13, %rdi
    00000bce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3022
    00000bd3: 	movq	0x78(%rsp), %rdx
    00000bd8: 	movq	0x70(%rsp), %rsi
    00000bdd: 	movq	%r13, %rdi
    00000be0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3040
    00000be5: 	movq	0x28(%rsp), %rsi
    00000bea: 	leaq	0x10(%rax), %rdx
    00000bee: 	movq	%rsi, 0xb0(%rsp)
    00000bf6: 	movq	(%rax), %rcx
    00000bf9: 	cmpq	%rdx, %rcx
    00000bfc: 	je	.Ltmp1652 # Offset: 3068
    00000c02: 	movq	%rcx, 0xb0(%rsp)
    00000c0a: 	movq	0x10(%rax), %rcx
    00000c0e: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1685:
    00000c16: 	movq	0x8(%rax), %rcx
    00000c1a: 	movq	%r15, %r8
    00000c1d: 	movq	%rbp, %rsi
    00000c20: 	movq	%r12, %rdi
    00000c23: 	movq	%rcx, 0xb8(%rsp)
    00000c2b: 	leaq	_Z14inner_product7IPKffET0_T_S3_m(%rip), %rcx
    00000c32: 	movq	%rdx, (%rax)
    00000c35: 	movl	$0x1f40, %edx
    00000c3a: 	movq	$0x0, 0x8(%rax)
    00000c42: 	movb	$0x0, 0x10(%rax)
    00000c46: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3142
    00000c4b: 	movq	0xb0(%rsp), %rdi
    00000c53: 	cmpq	0x28(%rsp), %rdi
    00000c58: 	je	.Ltmp1653 # Offset: 3160
    00000c5a: 	movq	0xc0(%rsp), %rax
    00000c62: 	leaq	0x1(%rax), %rsi
    00000c66: 	callq	_ZdlPvm@PLT # Offset: 3174
.Ltmp1653:
    00000c6b: 	movq	0x90(%rsp), %rdi
    00000c73: 	cmpq	0x38(%rsp), %rdi
    00000c78: 	je	.Ltmp1654 # Offset: 3192
    00000c7a: 	movq	0xa0(%rsp), %rax
    00000c82: 	leaq	0x1(%rax), %rsi
    00000c86: 	callq	_ZdlPvm@PLT # Offset: 3206
.Ltmp1654:
    00000c8b: 	movq	0x30(%rsp), %rsi
    00000c90: 	leaq	DATAat0x3227c(%rip), %rdx
    00000c97: 	movq	%r13, %rdi
    00000c9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3226
    00000c9f: 	movq	0x78(%rsp), %rdx
    00000ca4: 	movq	0x70(%rsp), %rsi
    00000ca9: 	movq	%r13, %rdi
    00000cac: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3244
    00000cb1: 	movq	0x28(%rsp), %rsi
    00000cb6: 	leaq	0x10(%rax), %rdx
    00000cba: 	movq	%rsi, 0xb0(%rsp)
    00000cc2: 	movq	(%rax), %rcx
    00000cc5: 	cmpq	%rdx, %rcx
    00000cc8: 	je	.Ltmp1655 # Offset: 3272
    00000cce: 	movq	%rcx, 0xb0(%rsp)
    00000cd6: 	movq	0x10(%rax), %rcx
    00000cda: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1684:
    00000ce2: 	movq	0x8(%rax), %rcx
    00000ce6: 	movq	%r15, %r8
    00000ce9: 	movq	%rbp, %rsi
    00000cec: 	movq	%r12, %rdi
    00000cef: 	movq	%rcx, 0xb8(%rsp)
    00000cf7: 	leaq	_Z14inner_product8IPKffET0_T_S3_m(%rip), %rcx
    00000cfe: 	movq	%rdx, (%rax)
    00000d01: 	movl	$0x1f40, %edx
    00000d06: 	movq	$0x0, 0x8(%rax)
    00000d0e: 	movb	$0x0, 0x10(%rax)
    00000d12: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3346
    00000d17: 	movq	0xb0(%rsp), %rdi
    00000d1f: 	cmpq	0x28(%rsp), %rdi
    00000d24: 	je	.Ltmp1656 # Offset: 3364
    00000d26: 	movq	0xc0(%rsp), %rax
    00000d2e: 	leaq	0x1(%rax), %rsi
    00000d32: 	callq	_ZdlPvm@PLT # Offset: 3378
.Ltmp1656:
    00000d37: 	movq	0x90(%rsp), %rdi
    00000d3f: 	cmpq	0x38(%rsp), %rdi
    00000d44: 	je	.Ltmp1657 # Offset: 3396
    00000d46: 	movq	0xa0(%rsp), %rax
    00000d4e: 	leaq	0x1(%rax), %rsi
    00000d52: 	callq	_ZdlPvm@PLT # Offset: 3410
.Ltmp1657:
    00000d57: 	movq	0x30(%rsp), %rsi
    00000d5c: 	leaq	DATAat0x32290(%rip), %rdx
    00000d63: 	movq	%r13, %rdi
    00000d66: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3430
    00000d6b: 	movq	0x78(%rsp), %rdx
    00000d70: 	movq	0x70(%rsp), %rsi
    00000d75: 	movq	%r13, %rdi
    00000d78: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3448
    00000d7d: 	movq	0x28(%rsp), %rsi
    00000d82: 	leaq	0x10(%rax), %rdx
    00000d86: 	movq	%rsi, 0xb0(%rsp)
    00000d8e: 	movq	(%rax), %rcx
    00000d91: 	cmpq	%rdx, %rcx
    00000d94: 	je	.Ltmp1658 # Offset: 3476
    00000d9a: 	movq	%rcx, 0xb0(%rsp)
    00000da2: 	movq	0x10(%rax), %rcx
    00000da6: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1679:
    00000dae: 	movq	0x8(%rax), %rcx
    00000db2: 	movq	%r15, %r8
    00000db5: 	movq	%rbp, %rsi
    00000db8: 	movq	%r12, %rdi
    00000dbb: 	movq	%rcx, 0xb8(%rsp)
    00000dc3: 	leaq	_Z14inner_product9IPKffET0_T_S3_m(%rip), %rcx
    00000dca: 	movq	%rdx, (%rax)
    00000dcd: 	movl	$0x1f40, %edx
    00000dd2: 	movq	$0x0, 0x8(%rax)
    00000dda: 	movb	$0x0, 0x10(%rax)
    00000dde: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3550
    00000de3: 	movq	0xb0(%rsp), %rdi
    00000deb: 	cmpq	0x28(%rsp), %rdi
    00000df0: 	je	.Ltmp1659 # Offset: 3568
    00000df2: 	movq	0xc0(%rsp), %rax
    00000dfa: 	leaq	0x1(%rax), %rsi
    00000dfe: 	callq	_ZdlPvm@PLT # Offset: 3582
.Ltmp1659:
    00000e03: 	movq	0x90(%rsp), %rdi
    00000e0b: 	cmpq	0x38(%rsp), %rdi
    00000e10: 	je	.Ltmp1660 # Offset: 3600
    00000e12: 	movq	0xa0(%rsp), %rax
    00000e1a: 	leaq	0x1(%rax), %rsi
    00000e1e: 	callq	_ZdlPvm@PLT # Offset: 3614
.Ltmp1660:
    00000e23: 	movq	0x38(%rsp), %rax
    00000e28: 	movq	0x70(%rsp), %rbx
    00000e2d: 	movq	0x78(%rsp), %r14
    00000e32: 	movq	%rax, 0x90(%rsp)
    00000e3a: 	movq	%rbx, %rax
    00000e3d: 	addq	%r14, %rax
    00000e40: 	je	.Ltmp1661 # Offset: 3648
    00000e42: 	testq	%rbx, %rbx
    00000e45: 	je	.Ltmp1662 # Offset: 3653
.Ltmp1661:
    00000e4b: 	movq	%r14, 0x50(%rsp)
    00000e50: 	cmpq	$0xf, %r14
    00000e54: 	ja	.Ltmp1663 # Offset: 3668
    00000e5a: 	cmpq	$0x1, %r14
    00000e5e: 	jne	.Ltmp1664 # Offset: 3678
    00000e64: 	movzbl	(%rbx), %eax
    00000e67: 	movb	%al, 0xa0(%rsp)
    00000e6e: 	movq	0x38(%rsp), %rax
.Ltmp1677:
    00000e73: 	movq	%r14, 0x98(%rsp)
    00000e7b: 	movb	$0x0, (%rax,%r14)
    00000e80: 	movabsq	$0x3fffffffffffffff, %rax
    00000e8a: 	subq	0x98(%rsp), %rax
    00000e92: 	cmpq	$0x13, %rax
    00000e96: 	jbe	.Ltmp1665 # Offset: 3734
    00000e9c: 	movl	$0x14, %edx
    00000ea1: 	leaq	DATAat0x322a4(%rip), %rsi
    00000ea8: 	movq	%r13, %rdi
    00000eab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3755
    00000eb0: 	movq	0x78(%rsp), %rdx
    00000eb5: 	movq	0x70(%rsp), %rsi
    00000eba: 	movq	%r13, %rdi
    00000ebd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3773
    00000ec2: 	movq	0x28(%rsp), %rsi
    00000ec7: 	leaq	0x10(%rax), %rdx
    00000ecb: 	movq	%rsi, 0xb0(%rsp)
    00000ed3: 	movq	(%rax), %rcx
    00000ed6: 	cmpq	%rdx, %rcx
    00000ed9: 	je	.Ltmp1666 # Offset: 3801
    00000edf: 	movq	%rcx, 0xb0(%rsp)
    00000ee7: 	movq	0x10(%rax), %rcx
    00000eeb: 	movq	%rcx, 0xc0(%rsp)
.Ltmp1678:
    00000ef3: 	movq	0x8(%rax), %rcx
    00000ef7: 	movq	%r15, %r8
    00000efa: 	movq	%rbp, %rsi
    00000efd: 	movq	%r12, %rdi
    00000f00: 	movq	%rcx, 0xb8(%rsp)
    00000f08: 	leaq	_Z15inner_product10IPKffET0_T_S3_m(%rip), %rcx
    00000f0f: 	movq	%rdx, (%rax)
    00000f12: 	movl	$0x1f40, %edx
    00000f17: 	movq	$0x0, 0x8(%rax)
    00000f1f: 	movb	$0x0, 0x10(%rax)
    00000f23: 	callq	_Z18test_inner_productIfPFfPKfS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3875
    00000f28: 	movq	0xb0(%rsp), %rdi
    00000f30: 	cmpq	0x28(%rsp), %rdi
    00000f35: 	je	.Ltmp1667 # Offset: 3893
    00000f37: 	movq	0xc0(%rsp), %rax
    00000f3f: 	leaq	0x1(%rax), %rsi
    00000f43: 	callq	_ZdlPvm@PLT # Offset: 3907
.Ltmp1667:
    00000f48: 	movq	0x90(%rsp), %rdi
    00000f50: 	cmpq	0x38(%rsp), %rdi
    00000f55: 	je	.Ltmp1668 # Offset: 3925
    00000f57: 	movq	0xa0(%rsp), %rax
    00000f5f: 	leaq	0x1(%rax), %rsi
    00000f63: 	callq	_ZdlPvm@PLT # Offset: 3939
.Ltmp1668:
    00000f68: 	movq	0x30(%rsp), %rsi
    00000f6d: 	leaq	DATAat0x322b9(%rip), %rdx
    00000f74: 	movq	%r15, %rdi
    00000f77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3959
    00000f7c: 	movl	iterations(%rip), %edx
    00000f82: 	xorl	%r8d, %r8d
    00000f85: 	xorl	%ecx, %ecx
    00000f87: 	movl	$0x1f40, %esi
    00000f8c: 	movq	0xb0(%rsp), %rdi
    00000f94: 	callq	_Z9summarizePKciiii # Offset: 3988
    00000f99: 	movq	0xb0(%rsp), %rdi
    00000fa1: 	cmpq	0x28(%rsp), %rdi
    00000fa6: 	je	.Ltmp1669 # Offset: 4006
    00000fa8: 	movq	0xc0(%rsp), %rax
    00000fb0: 	leaq	0x1(%rax), %rsi
    00000fb4: 	callq	_ZdlPvm@PLT # Offset: 4020
.Ltmp1669:
    00000fb9: 	movq	0x70(%rsp), %rdi
    00000fbe: 	cmpq	0x40(%rsp), %rdi
    00000fc3: 	je	.Ltmp1670 # Offset: 4035
    00000fc5: 	movq	0x80(%rsp), %rax
    00000fcd: 	leaq	0x1(%rax), %rsi
    00000fd1: 	callq	_ZdlPvm@PLT # Offset: 4049
.Ltmp1670:
    00000fd6: 	movq	0xfad8(%rsp), %rax
    00000fde: 	subq	%fs:0x28, %rax
    00000fe7: 	jne	.Ltmp1671 # Offset: 4071
    00000fed: 	addq	$0xfae8, %rsp
    00000ff4: 	popq	%rbx
    00000ff5: 	popq	%rbp
    00000ff6: 	popq	%r12
    00000ff8: 	popq	%r13
    00000ffa: 	popq	%r14
    00000ffc: 	popq	%r15
    00000ffe: 	retq # Offset: 4094
    00000fff: 	nop # Size: 1
.Ltmp1603:
    00001000: 	movq	0xb0(%rsp), %rdx
    00001008: 	movq	%r14, %rsi
    0000100b: 	movl	$0x1, %edi
    00001010: 	xorl	%eax, %eax
    00001012: 	callq	__printf_chk@PLT # Offset: 4114
    00001017: 	movl	iterations(%rip), %ecx
    0000101d: 	jmp	.Ltmp1672 # Offset: 4125
.Ltmp1608:
    00001022: 	movq	0x48(%rsp), %rsi
    00001027: 	xorl	%edx, %edx
    00001029: 	movq	%rbx, %rdi
    0000102c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4140
    00001031: 	movq	%rax, (%rbx)
    00001034: 	movq	%rax, %rdi
    00001037: 	movq	0x50(%rsp), %rax
    0000103c: 	movq	%rax, 0x10(%rbx)
.Ltmp1697:
    00001040: 	movq	0x8(%rsp), %rsi
    00001045: 	movq	%r14, %rdx
    00001048: 	callq	memcpy@PLT # Offset: 4168
    0000104d: 	movq	0x50(%rsp), %r14
    00001052: 	movq	(%rbx), %rdi
    00001055: 	jmp	.Ltmp1673 # Offset: 4181
    0000105a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1617:
    00001060: 	movq	0xb0(%rsp), %rdx
    00001068: 	movq	%r14, %rsi
    0000106b: 	movl	$0x1, %edi
    00001070: 	xorl	%eax, %eax
    00001072: 	callq	__printf_chk@PLT # Offset: 4210
    00001077: 	movl	iterations(%rip), %edx
    0000107d: 	jmp	.Ltmp1674 # Offset: 4221
    00001082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1631:
    00001088: 	movq	0xb0(%rsp), %rdx
    00001090: 	movq	%r14, %rsi
    00001093: 	movl	$0x1, %edi
    00001098: 	xorl	%eax, %eax
    0000109a: 	callq	__printf_chk@PLT # Offset: 4250
    0000109f: 	movl	iterations(%rip), %ecx
    000010a5: 	jmp	.Ltmp1675 # Offset: 4261
.Ltmp1664:
    000010aa: 	testq	%r14, %r14
    000010ad: 	jne	.Ltmp1676 # Offset: 4269
    000010b3: 	movq	0x38(%rsp), %rax
    000010b8: 	jmp	.Ltmp1677 # Offset: 4280
.Ltmp1663:
    000010bd: 	movq	0x48(%rsp), %rsi
    000010c2: 	xorl	%edx, %edx
    000010c4: 	movq	%r13, %rdi
    000010c7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4295
    000010cc: 	movq	%rax, 0x90(%rsp)
    000010d4: 	movq	%rax, %rdi
    000010d7: 	movq	0x50(%rsp), %rax
    000010dc: 	movq	%rax, 0xa0(%rsp)
.Ltmp1698:
    000010e4: 	movq	%r14, %rdx
    000010e7: 	movq	%rbx, %rsi
    000010ea: 	callq	memcpy@PLT # Offset: 4330
    000010ef: 	movq	0x50(%rsp), %r14
    000010f4: 	movq	0x90(%rsp), %rax
    000010fc: 	jmp	.Ltmp1677 # Offset: 4348
.Ltmp1666:
    00001101: 	movdqu	0x10(%rax), %xmm5
    00001106: 	movaps	%xmm5, 0xc0(%rsp)
    0000110e: 	jmp	.Ltmp1678 # Offset: 4366
.Ltmp1658:
    00001113: 	movdqu	0x10(%rax), %xmm4
    00001118: 	movaps	%xmm4, 0xc0(%rsp)
    00001120: 	jmp	.Ltmp1679 # Offset: 4384
.Ltmp1605:
    00001125: 	movq	%r15, %rsi
    00001128: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000112f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4399
    00001134: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000113b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001142: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001149: 	jne	.Ltmp1680 # Offset: 4425
.Ltmp1610:
    0000114f: 	movq	-0x8(%rdx), %rax
    00001153: 	addq	$0x200, %rax
    00001159: 	jmp	.Ltmp1680 # Offset: 4441
.Ltmp1624:
    0000115e: 	movq	-0x8(%rdx), %rax
    00001162: 	addq	$0x200, %rax
    00001168: 	jmp	.Ltmp1681 # Offset: 4456
.Ltmp1619:
    0000116d: 	movq	%r15, %rsi
    00001170: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001177: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4471
    0000117c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001183: 	jmp	.Ltmp1682 # Offset: 4483
.Ltmp1598:
    00001188: 	movdqu	0x10(%rax), %xmm3
    0000118d: 	movaps	%xmm3, 0xc0(%rsp)
    00001195: 	jmp	.Ltmp1683 # Offset: 4501
.Ltmp1655:
    0000119a: 	movdqu	0x10(%rax), %xmm3
    0000119f: 	movaps	%xmm3, 0xc0(%rsp)
    000011a7: 	jmp	.Ltmp1684 # Offset: 4519
.Ltmp1652:
    000011ac: 	movdqu	0x10(%rax), %xmm2
    000011b1: 	movaps	%xmm2, 0xc0(%rsp)
    000011b9: 	jmp	.Ltmp1685 # Offset: 4537
.Ltmp1649:
    000011be: 	movdqu	0x10(%rax), %xmm7
    000011c3: 	movaps	%xmm7, 0xc0(%rsp)
    000011cb: 	jmp	.Ltmp1686 # Offset: 4555
.Ltmp1646:
    000011d0: 	movdqu	0x10(%rax), %xmm6
    000011d5: 	movaps	%xmm6, 0xc0(%rsp)
    000011dd: 	jmp	.Ltmp1687 # Offset: 4573
.Ltmp1612:
    000011e2: 	movdqu	0x10(%rax), %xmm3
    000011e7: 	movaps	%xmm3, 0xc0(%rsp)
    000011ef: 	jmp	.Ltmp1688 # Offset: 4591
.Ltmp1626:
    000011f4: 	movdqu	0x10(%rax), %xmm3
    000011f9: 	movaps	%xmm3, 0xc0(%rsp)
    00001201: 	jmp	.Ltmp1689 # Offset: 4609
.Ltmp1633:
    00001206: 	movq	%r15, %rsi
    00001209: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001210: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4624
    00001215: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000121c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001223: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000122a: 	jne	.Ltmp1690 # Offset: 4650
.Ltmp1638:
    00001230: 	movq	-0x8(%rdx), %rax
    00001234: 	addq	$0x200, %rax
    0000123a: 	jmp	.Ltmp1690 # Offset: 4666
.Ltmp1643:
    0000123f: 	movdqu	0x10(%rax), %xmm5
    00001244: 	movaps	%xmm5, 0xc0(%rsp)
    0000124c: 	jmp	.Ltmp1691 # Offset: 4684
.Ltmp1640:
    00001251: 	movdqu	0x10(%rax), %xmm4
    00001256: 	movaps	%xmm4, 0xc0(%rsp)
    0000125e: 	jmp	.Ltmp1692 # Offset: 4702
.Ltmp1637:
    00001263: 	testq	%r14, %r14
    00001266: 	je	.Ltmp1693 # Offset: 4710
    0000126c: 	jmp	.Ltmp1694 # Offset: 4716
    0000126e: 	nop # Size: 2
.Ltmp1623:
    00001270: 	testq	%r14, %r14
    00001273: 	je	.Ltmp1695 # Offset: 4723
    00001279: 	jmp	.Ltmp1696 # Offset: 4729
    0000127b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1609:
    00001280: 	testq	%r14, %r14
    00001283: 	je	.Ltmp1673 # Offset: 4739
    00001289: 	jmp	.Ltmp1697 # Offset: 4745
    0000128e: 	nop # Size: 2
.Ltmp1636:
    00001290: 	movq	0x48(%rsp), %rsi
    00001295: 	xorl	%edx, %edx
    00001297: 	movq	%rbx, %rdi
    0000129a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4762
    0000129f: 	movq	%rax, (%rbx)
    000012a2: 	movq	%rax, %rdi
    000012a5: 	movq	0x50(%rsp), %rax
    000012aa: 	movq	%rax, 0x10(%rbx)
.Ltmp1694:
    000012ae: 	movq	0x8(%rsp), %rsi
    000012b3: 	movq	%r14, %rdx
    000012b6: 	callq	memcpy@PLT # Offset: 4790
    000012bb: 	movq	0x50(%rsp), %r14
    000012c0: 	movq	(%rbx), %rdi
    000012c3: 	jmp	.Ltmp1693 # Offset: 4803
.Ltmp1622:
    000012c8: 	movq	0x48(%rsp), %rsi
    000012cd: 	xorl	%edx, %edx
    000012cf: 	movq	%rbx, %rdi
    000012d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4818
    000012d7: 	movq	%rax, (%rbx)
    000012da: 	movq	%rax, %rdi
    000012dd: 	movq	0x50(%rsp), %rax
    000012e2: 	movq	%rax, 0x10(%rbx)
.Ltmp1696:
    000012e6: 	movq	0x8(%rsp), %rsi
    000012eb: 	movq	%r14, %rdx
    000012ee: 	callq	memcpy@PLT # Offset: 4846
    000012f3: 	movq	0x50(%rsp), %r14
    000012f8: 	movq	(%rbx), %rdi
    000012fb: 	jmp	.Ltmp1695 # Offset: 4859
.Ltmp1621:
    00001300: 	leaq	DATAat0x32158(%rip), %rdi
    00001307: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4871
.Ltmp1635:
    0000130c: 	leaq	DATAat0x32158(%rip), %rdi
    00001313: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4883
.Ltmp1662:
    00001318: 	leaq	DATAat0x32158(%rip), %rdi
    0000131f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4895
.Ltmp1665:
    00001324: 	leaq	DATAat0x32182(%rip), %rdi
    0000132b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4907
.Ltmp1671:
    00001330: 	callq	__stack_chk_fail@PLT # Offset: 4912
.Ltmp1607:
    00001335: 	leaq	DATAat0x32158(%rip), %rdi
    0000133c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4924
.Ltmp1676:
    00001341: 	movq	0x38(%rsp), %rdi
    00001346: 	jmp	.Ltmp1698 # Offset: 4934
    0000134b: 	endbr64
.Ltmp1705:
    0000134f: 	movq	%rax, %rbp
    00001352: 	jmp	.Ltmp1699 # Offset: 4946
    00001354: 	endbr64
.Ltmp1704:
    00001358: 	movq	%rax, %rbp
    0000135b: 	jmp	.Ltmp1700 # Offset: 4955
.Ltmp1699:
    0000135d: 	movq	0xb0(%rsp), %rdi
    00001365: 	cmpq	0x28(%rsp), %rdi
    0000136a: 	je	.Ltmp1700 # Offset: 4970
    0000136c: 	movq	0xc0(%rsp), %rax
    00001374: 	leaq	0x1(%rax), %rsi
    00001378: 	callq	_ZdlPvm@PLT # Offset: 4984
.Ltmp1700:
    0000137d: 	movq	0x90(%rsp), %rdi
    00001385: 	cmpq	0x38(%rsp), %rdi
    0000138a: 	je	.Ltmp1701 # Offset: 5002
.Ltmp1707:
    0000138c: 	movq	0xa0(%rsp), %rax
    00001394: 	leaq	0x1(%rax), %rsi
    00001398: 	callq	_ZdlPvm@PLT # Offset: 5016
.Ltmp1701:
    0000139d: 	movq	0x70(%rsp), %rdi
    000013a2: 	cmpq	0x40(%rsp), %rdi
    000013a7: 	je	.Ltmp1702 # Offset: 5031
    000013a9: 	movq	0x80(%rsp), %rax
    000013b1: 	leaq	0x1(%rax), %rsi
    000013b5: 	callq	_ZdlPvm@PLT # Offset: 5045
.Ltmp1702:
    000013ba: 	movq	%rbp, %rdi
    000013bd: 	callq	_Unwind_Resume@PLT # Offset: 5053
    000013c2: 	endbr64
    000013c6: 	movq	%rax, %rbp
    000013c9: 	jmp	.Ltmp1701 # Offset: 5065
    000013cb: 	endbr64
.Ltmp1708:
    000013cf: 	movq	%rax, %rbp
    000013d2: 	jmp	.Ltmp1703 # Offset: 5074
    000013d7: 	endbr64
    000013db: 	jmp	.Ltmp1704 # Offset: 5083
    000013e0: 	endbr64
    000013e4: 	jmp	.Ltmp1704 # Offset: 5092
    000013e9: 	endbr64
    000013ed: 	jmp	.Ltmp1705 # Offset: 5101
    000013f2: 	endbr64
    000013f6: 	movq	%rax, %rbp
    000013f9: 	jmp	.Ltmp1706 # Offset: 5113
    000013fb: 	endbr64
    000013ff: 	movq	%rax, %rbp
    00001402: 	movq	0xb0(%rsp), %rdi
    0000140a: 	cmpq	0x28(%rsp), %rdi
    0000140f: 	je	.Ltmp1706 # Offset: 5135
    00001411: 	movq	0xc0(%rsp), %rax
    00001419: 	leaq	0x1(%rax), %rsi
    0000141d: 	callq	_ZdlPvm@PLT # Offset: 5149
.Ltmp1706:
    00001422: 	movq	0x90(%rsp), %rdi
    0000142a: 	leaq	0xa0(%rsp), %rax
    00001432: 	cmpq	%rax, %rdi
    00001435: 	jne	.Ltmp1707 # Offset: 5173
    0000143b: 	jmp	.Ltmp1701 # Offset: 5179
    00001440: 	endbr64
    00001444: 	jmp	.Ltmp1705 # Offset: 5188
    00001449: 	endbr64
    0000144d: 	jmp	.Ltmp1708 # Offset: 5197
    0000144f: 	endbr64
    00001453: 	jmp	.Ltmp1704 # Offset: 5203
.Ltmp1703:
    00001458: 	movq	0xb0(%rsp), %rdi
    00001460: 	cmpq	0x28(%rsp), %rdi
    00001465: 	je	.Ltmp1701 # Offset: 5221
    0000146b: 	movq	0xc0(%rsp), %rax
    00001473: 	leaq	0x1(%rax), %rsi
    00001477: 	callq	_ZdlPvm@PLT # Offset: 5239
    0000147c: 	jmp	.Ltmp1701 # Offset: 5244
    00001481: 	endbr64
    00001485: 	jmp	.Ltmp1705 # Offset: 5253
    0000148a: 	endbr64
    0000148e: 	jmp	.Ltmp1705 # Offset: 5262
    00001493: 	endbr64
    00001497: 	jmp	.Ltmp1704 # Offset: 5271
    0000149c: 	endbr64
    000014a0: 	jmp	.Ltmp1708 # Offset: 5280
    000014a5: 	endbr64
    000014a9: 	jmp	.Ltmp1704 # Offset: 5289
    000014ae: 	endbr64
    000014b2: 	jmp	.Ltmp1705 # Offset: 5298
    000014b7: 	endbr64
    000014bb: 	jmp	.Ltmp1705 # Offset: 5307
    000014c0: 	endbr64
    000014c4: 	jmp	.Ltmp1704 # Offset: 5316
    000014c9: 	endbr64
    000014cd: 	jmp	.Ltmp1705 # Offset: 5325
    000014d2: 	endbr64
    000014d6: 	jmp	.Ltmp1705 # Offset: 5334
    000014db: 	endbr64
    000014df: 	jmp	.Ltmp1704 # Offset: 5343
    000014e4: 	endbr64
    000014e8: 	jmp	.Ltmp1708 # Offset: 5352
    000014ed: 	endbr64
    000014f1: 	jmp	.Ltmp1704 # Offset: 5361
    000014f6: 	endbr64
    000014fa: 	jmp	.Ltmp1705 # Offset: 5370
    000014ff: 	endbr64
    00001503: 	jmp	.Ltmp1704 # Offset: 5379
    00001508: 	endbr64
    0000150c: 	jmp	.Ltmp1704 # Offset: 5388
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x28280
  Size        : 0x1ae9
  MaxSize     : 0x1af0
  Offset      : 0x28280
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1709:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1709 # Offset: 37
    00000027: 	subq	$0xdc8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x7db8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movl	$0x31746e69, 0x60(%rsp)
    00000063: 	movq	%rax, 0x20(%rsp)
    00000068: 	leaq	0xb0(%rsp), %r12
    00000070: 	leaq	0x3f30(%rsp), %rbp
    00000078: 	movq	%rax, 0x50(%rsp)
    0000007d: 	movl	$0x5f36, %eax
    00000082: 	movw	%ax, 0x64(%rsp)
    00000087: 	movb	$0x74, 0x66(%rsp)
    0000008c: 	movq	$0x7, 0x58(%rsp)
    00000095: 	movb	$0x0, 0x67(%rsp)
    0000009a: 	movq	%rdi, 0x18(%rsp)
    0000009f: 	movaps	%xmm6, 0x30(%rsp)
    000000a4: 	movaps	%xmm7, 0x40(%rsp)
    000000a9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 169
    000000ae: 	movd	init_value(%rip), %xmm0
    000000b6: 	movq	%r12, %rax
    000000b9: 	punpcklwd	%xmm0, %xmm0
    000000bd: 	pshufd	$0x0, %xmm0, %xmm0
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1710:
    000000c8: 	movaps	%xmm0, (%rax)
    000000cb: 	addq	$0x10, %rax
    000000cf: 	cmpq	%rbp, %rax
    000000d2: 	jne	.Ltmp1710 # Offset: 210
    000000d4: 	movq	%rbp, %rax
    000000d7: 	leaq	0x7db0(%rsp), %rdx
    000000df: 	nop # Size: 1
.Ltmp1711:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rdx, %rax
    000000ea: 	jne	.Ltmp1711 # Offset: 234
    000000ec: 	leaq	0x50(%rsp), %rax
    000000f1: 	leaq	0x70(%rsp), %r13
    000000f6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%r13, %rdi
    00000103: 	movq	%rax, 0x8(%rsp)
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	movq	0x58(%rsp), %rdx
    00000112: 	movq	0x50(%rsp), %rsi
    00000117: 	movq	%r13, %rdi
    0000011a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 282
    0000011f: 	leaq	0xa0(%rsp), %rsi
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	movq	%rsi, 0x90(%rsp)
    00000133: 	movq	(%rax), %rcx
    00000136: 	movq	%rsi, (%rsp)
    0000013a: 	cmpq	%rdx, %rcx
    0000013d: 	je	.Ltmp1712 # Offset: 317
    00000143: 	movq	%rcx, 0x90(%rsp)
    0000014b: 	movq	0x10(%rax), %rcx
    0000014f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1839:
    00000157: 	movq	0x8(%rax), %rcx
    0000015b: 	leaq	0x90(%rsp), %r15
    00000163: 	movq	%rbp, %rsi
    00000166: 	movq	%r12, %rdi
    00000169: 	movq	%r15, %r8
    0000016c: 	movq	%rcx, 0x98(%rsp)
    00000174: 	leaq	_Z17inner_product_stdIPKssET0_T_S3_m(%rip), %rcx
    0000017b: 	movq	%rdx, (%rax)
    0000017e: 	movl	$0x1f40, %edx
    00000183: 	movq	$0x0, 0x8(%rax)
    0000018b: 	movb	$0x0, 0x10(%rax)
    0000018f: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 399
    00000194: 	movq	0x90(%rsp), %rdi
    0000019c: 	cmpq	(%rsp), %rdi
    000001a0: 	je	.Ltmp1713 # Offset: 416
    000001a2: 	movq	0xa0(%rsp), %rax
    000001aa: 	leaq	0x1(%rax), %rsi
    000001ae: 	callq	_ZdlPvm@PLT # Offset: 430
.Ltmp1713:
    000001b3: 	movq	0x70(%rsp), %rdi
    000001b8: 	leaq	0x80(%rsp), %rax
    000001c0: 	movq	%rax, 0x10(%rsp)
    000001c5: 	cmpq	%rax, %rdi
    000001c8: 	je	.Ltmp1714 # Offset: 456
    000001ca: 	movq	0x80(%rsp), %rax
    000001d2: 	leaq	0x1(%rax), %rsi
    000001d6: 	callq	_ZdlPvm@PLT # Offset: 470
.Ltmp1714:
    000001db: 	movq	0x8(%rsp), %rsi
    000001e0: 	leaq	DATAat0x32370(%rip), %rdx
    000001e7: 	movq	%r15, %rdi
    000001ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 490
    000001ef: 	callq	clock@PLT # Offset: 495
    000001f4: 	movl	iterations(%rip), %ecx
    000001fa: 	xorl	%ebx, %ebx
    000001fc: 	leaq	DATAat0x321c8(%rip), %r14
    00000203: 	movq	%rax, start_time(%rip)
    0000020a: 	testl	%ecx, %ecx
    0000020c: 	jle	.Ltmp1715 # Offset: 524
    0000020e: 	nop # Size: 2
.Ltmp1718:
    00000210: 	xorl	%eax, %eax
    00000212: 	pxor	%xmm1, %xmm1
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1716:
    00000220: 	movdqa	(%rbp,%rax), %xmm0
    00000226: 	pmaddwd	(%r12,%rax), %xmm0
    0000022c: 	addq	$0x10, %rax
    00000230: 	paddd	%xmm0, %xmm1
    00000234: 	cmpq	$0x3e80, %rax
    0000023a: 	jne	.Ltmp1716 # Offset: 570
    0000023c: 	movl	init_value(%rip), %edx
    00000242: 	movdqa	%xmm1, %xmm0
    00000246: 	psrldq	$0x8, %xmm0
    0000024b: 	imull	%edx, %edx
    0000024e: 	paddd	%xmm0, %xmm1
    00000252: 	movdqa	%xmm1, %xmm0
    00000256: 	psrldq	$0x4, %xmm0
    0000025b: 	imulw	$0x1f40, %dx, %dx
    00000260: 	paddd	%xmm0, %xmm1
    00000264: 	movd	%xmm1, %eax
    00000268: 	cmpw	%ax, %dx
    0000026b: 	jne	.Ltmp1717 # Offset: 619
.Ltmp1814:
    00000271: 	addl	$0x1, %ebx
    00000274: 	cmpl	%ecx, %ebx
    00000276: 	jl	.Ltmp1718 # Offset: 630
.Ltmp1715:
    00000278: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000027f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000286: 	subq	$0x20, %rax
    0000028a: 	cmpq	%rax, %rbx
    0000028d: 	je	.Ltmp1719 # Offset: 653
    00000293: 	leaq	0x10(%rbx), %rdi
    00000297: 	movq	0x98(%rsp), %r14
    0000029f: 	movq	%rdi, (%rbx)
    000002a2: 	movq	0x90(%rsp), %rax
    000002aa: 	movq	%rax, %rsi
    000002ad: 	movq	%rax, 0x28(%rsp)
    000002b2: 	addq	%r14, %rsi
    000002b5: 	je	.Ltmp1720 # Offset: 693
    000002b7: 	testq	%rax, %rax
    000002ba: 	je	.Ltmp1721 # Offset: 698
.Ltmp1720:
    000002c0: 	movq	%r14, 0x30(%rsp)
    000002c5: 	cmpq	$0xf, %r14
    000002c9: 	ja	.Ltmp1722 # Offset: 713
    000002cf: 	cmpq	$0x1, %r14
    000002d3: 	jne	.Ltmp1723 # Offset: 723
    000002d9: 	movq	0x28(%rsp), %rax
    000002de: 	movzbl	(%rax), %eax
    000002e1: 	movb	%al, 0x10(%rbx)
.Ltmp1815:
    000002e4: 	movq	%r14, 0x8(%rbx)
    000002e8: 	movb	$0x0, (%rdi,%r14)
    000002ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002f4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fb: 	addq	$0x20, %rax
    000002ff: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000306: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000030d: 	je	.Ltmp1724 # Offset: 781
.Ltmp1833:
    00000313: 	movq	-0x20(%rax), %r14
    00000317: 	callq	clock@PLT # Offset: 791
    0000031c: 	pxor	%xmm0, %xmm0
    00000320: 	movq	%rax, end_time(%rip)
    00000327: 	movq	%r14, %rdi
    0000032a: 	subq	start_time(%rip), %rax
    00000331: 	cvtsi2sd	%rax, %xmm0
    00000336: 	divsd	DATAat0x32600(%rip), %xmm0
    0000033e: 	callq	_Z13record_resultdPKc # Offset: 830
    00000343: 	movq	0x90(%rsp), %rdi
    0000034b: 	cmpq	(%rsp), %rdi
    0000034f: 	je	.Ltmp1725 # Offset: 847
    00000351: 	movq	0xa0(%rsp), %rax
    00000359: 	leaq	0x1(%rax), %rsi
    0000035d: 	callq	_ZdlPvm@PLT # Offset: 861
.Ltmp1725:
    00000362: 	movq	0x8(%rsp), %rsi
    00000367: 	leaq	DATAat0x322c8(%rip), %rdx
    0000036e: 	movq	%r15, %rdi
    00000371: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 881
    00000376: 	callq	clock@PLT # Offset: 886
    0000037b: 	movl	iterations(%rip), %ecx
    00000381: 	xorl	%ebx, %ebx
    00000383: 	leaq	DATAat0x321c8(%rip), %r14
    0000038a: 	movq	%rax, start_time(%rip)
    00000391: 	testl	%ecx, %ecx
    00000393: 	jle	.Ltmp1726 # Offset: 915
    00000399: 	nopl	(%rax) # Size: 7
.Ltmp1729:
    000003a0: 	xorl	%eax, %eax
    000003a2: 	pxor	%xmm0, %xmm0
    000003a6: 	pxor	%xmm5, %xmm5
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1727:
    000003b0: 	movdqa	(%rbp,%rax), %xmm2
    000003b6: 	pmullw	(%r12,%rax), %xmm2
    000003bc: 	movdqa	%xmm2, %xmm3
    000003c0: 	movdqa	(%rbp,%rax), %xmm1
    000003c6: 	movdqa	%xmm5, %xmm4
    000003ca: 	pmulhw	(%r12,%rax), %xmm1
    000003d0: 	punpcklwd	%xmm1, %xmm3
    000003d4: 	punpckhwd	%xmm1, %xmm2
    000003d8: 	pcmpgtd	%xmm3, %xmm4
    000003dc: 	movdqa	%xmm3, %xmm1
    000003e0: 	addq	$0x10, %rax
    000003e4: 	punpckldq	%xmm4, %xmm1
    000003e8: 	punpckhdq	%xmm4, %xmm3
    000003ec: 	paddq	%xmm1, %xmm0
    000003f0: 	movdqa	%xmm5, %xmm1
    000003f4: 	pcmpgtd	%xmm2, %xmm1
    000003f8: 	paddq	%xmm3, %xmm0
    000003fc: 	movdqa	%xmm2, %xmm3
    00000400: 	punpckldq	%xmm1, %xmm3
    00000404: 	punpckhdq	%xmm1, %xmm2
    00000408: 	paddq	%xmm3, %xmm0
    0000040c: 	paddq	%xmm2, %xmm0
    00000410: 	cmpq	$0x3e80, %rax
    00000416: 	jne	.Ltmp1727 # Offset: 1046
    00000418: 	movl	init_value(%rip), %edx
    0000041e: 	movdqa	%xmm0, %xmm1
    00000422: 	psrldq	$0x8, %xmm1
    00000427: 	imull	%edx, %edx
    0000042a: 	paddq	%xmm1, %xmm0
    0000042e: 	movq	%xmm0, %rax
    00000433: 	imulw	$0x1f40, %dx, %dx
    00000438: 	cmpw	%ax, %dx
    0000043b: 	jne	.Ltmp1728 # Offset: 1083
.Ltmp1817:
    00000441: 	addl	$0x1, %ebx
    00000444: 	cmpl	%ecx, %ebx
    00000446: 	jl	.Ltmp1729 # Offset: 1094
.Ltmp1726:
    0000044c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000453: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000045a: 	subq	$0x20, %rax
    0000045e: 	cmpq	%rax, %rbx
    00000461: 	je	.Ltmp1730 # Offset: 1121
    00000467: 	leaq	0x10(%rbx), %rdi
    0000046b: 	movq	0x98(%rsp), %r14
    00000473: 	movq	%rdi, (%rbx)
    00000476: 	movq	0x90(%rsp), %rax
    0000047e: 	movq	%rax, %rsi
    00000481: 	movq	%rax, 0x28(%rsp)
    00000486: 	addq	%r14, %rsi
    00000489: 	je	.Ltmp1731 # Offset: 1161
    0000048b: 	testq	%rax, %rax
    0000048e: 	je	.Ltmp1732 # Offset: 1166
.Ltmp1731:
    00000494: 	movq	%r14, 0x30(%rsp)
    00000499: 	cmpq	$0xf, %r14
    0000049d: 	ja	.Ltmp1733 # Offset: 1181
    000004a3: 	cmpq	$0x1, %r14
    000004a7: 	jne	.Ltmp1734 # Offset: 1191
    000004ad: 	movq	0x28(%rsp), %rax
    000004b2: 	movzbl	(%rax), %eax
    000004b5: 	movb	%al, 0x10(%rbx)
.Ltmp1841:
    000004b8: 	movq	%r14, 0x8(%rbx)
    000004bc: 	movb	$0x0, (%rdi,%r14)
    000004c1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004c8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004cf: 	addq	$0x20, %rax
    000004d3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004da: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000004e1: 	je	.Ltmp1735 # Offset: 1249
.Ltmp1829:
    000004e7: 	movq	-0x20(%rax), %r14
    000004eb: 	callq	clock@PLT # Offset: 1259
    000004f0: 	pxor	%xmm0, %xmm0
    000004f4: 	movq	%rax, end_time(%rip)
    000004fb: 	movq	%r14, %rdi
    000004fe: 	subq	start_time(%rip), %rax
    00000505: 	cvtsi2sd	%rax, %xmm0
    0000050a: 	divsd	DATAat0x32600(%rip), %xmm0
    00000512: 	callq	_Z13record_resultdPKc # Offset: 1298
    00000517: 	movq	0x90(%rsp), %rdi
    0000051f: 	cmpq	(%rsp), %rdi
    00000523: 	je	.Ltmp1736 # Offset: 1315
    00000525: 	movq	0xa0(%rsp), %rax
    0000052d: 	leaq	0x1(%rax), %rsi
    00000531: 	callq	_ZdlPvm@PLT # Offset: 1329
.Ltmp1736:
    00000536: 	movq	0x8(%rsp), %rsi
    0000053b: 	leaq	DATAat0x321f0(%rip), %rdx
    00000542: 	movq	%r13, %rdi
    00000545: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1349
    0000054a: 	movq	0x58(%rsp), %rdx
    0000054f: 	movq	0x50(%rsp), %rsi
    00000554: 	movq	%r13, %rdi
    00000557: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1367
    0000055c: 	movq	(%rsp), %rsi
    00000560: 	leaq	0x10(%rax), %rdx
    00000564: 	movq	%rsi, 0x90(%rsp)
    0000056c: 	movq	(%rax), %rcx
    0000056f: 	cmpq	%rdx, %rcx
    00000572: 	je	.Ltmp1737 # Offset: 1394
    00000578: 	movq	%rcx, 0x90(%rsp)
    00000580: 	movq	0x10(%rax), %rcx
    00000584: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1834:
    0000058c: 	movq	0x8(%rax), %rcx
    00000590: 	movq	%r15, %r8
    00000593: 	movq	%rbp, %rsi
    00000596: 	movq	%r12, %rdi
    00000599: 	movq	%rcx, 0x98(%rsp)
    000005a1: 	leaq	_Z14inner_product1IPKssET0_T_S3_m(%rip), %rcx
    000005a8: 	movq	%rdx, (%rax)
    000005ab: 	movl	$0x1f40, %edx
    000005b0: 	movq	$0x0, 0x8(%rax)
    000005b8: 	movb	$0x0, 0x10(%rax)
    000005bc: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1468
    000005c1: 	movq	0x90(%rsp), %rdi
    000005c9: 	cmpq	(%rsp), %rdi
    000005cd: 	je	.Ltmp1738 # Offset: 1485
    000005cf: 	movq	0xa0(%rsp), %rax
    000005d7: 	leaq	0x1(%rax), %rsi
    000005db: 	callq	_ZdlPvm@PLT # Offset: 1499
.Ltmp1738:
    000005e0: 	movq	0x70(%rsp), %rdi
    000005e5: 	cmpq	0x10(%rsp), %rdi
    000005ea: 	je	.Ltmp1739 # Offset: 1514
    000005ec: 	movq	0x80(%rsp), %rax
    000005f4: 	leaq	0x1(%rax), %rsi
    000005f8: 	callq	_ZdlPvm@PLT # Offset: 1528
.Ltmp1739:
    000005fd: 	movq	0x8(%rsp), %rsi
    00000602: 	leaq	DATAat0x3238f(%rip), %rdx
    00000609: 	movq	%r15, %rdi
    0000060c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1548
    00000611: 	callq	clock@PLT # Offset: 1553
    00000616: 	movl	iterations(%rip), %ecx
    0000061c: 	xorl	%ebx, %ebx
    0000061e: 	leaq	DATAat0x321c8(%rip), %r14
    00000625: 	movq	%rax, start_time(%rip)
    0000062c: 	testl	%ecx, %ecx
    0000062e: 	jle	.Ltmp1740 # Offset: 1582
.Ltmp1743:
    00000630: 	xorl	%eax, %eax
    00000632: 	pxor	%xmm1, %xmm1
    00000636: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1741:
    00000640: 	movdqa	(%rbp,%rax), %xmm0
    00000646: 	pmaddwd	(%r12,%rax), %xmm0
    0000064c: 	addq	$0x10, %rax
    00000650: 	paddd	%xmm0, %xmm1
    00000654: 	cmpq	$0x3e80, %rax
    0000065a: 	jne	.Ltmp1741 # Offset: 1626
    0000065c: 	movl	init_value(%rip), %edx
    00000662: 	movdqa	%xmm1, %xmm0
    00000666: 	psrldq	$0x8, %xmm0
    0000066b: 	imull	%edx, %edx
    0000066e: 	paddd	%xmm0, %xmm1
    00000672: 	movdqa	%xmm1, %xmm0
    00000676: 	psrldq	$0x4, %xmm0
    0000067b: 	imulw	$0x1f40, %dx, %dx
    00000680: 	paddd	%xmm0, %xmm1
    00000684: 	movd	%xmm1, %eax
    00000688: 	cmpw	%ax, %dx
    0000068b: 	jne	.Ltmp1742 # Offset: 1675
.Ltmp1820:
    00000691: 	addl	$0x1, %ebx
    00000694: 	cmpl	%ecx, %ebx
    00000696: 	jl	.Ltmp1743 # Offset: 1686
.Ltmp1740:
    00000698: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000069f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000006a6: 	subq	$0x20, %rax
    000006aa: 	cmpq	%rax, %rbx
    000006ad: 	je	.Ltmp1744 # Offset: 1709
    000006b3: 	leaq	0x10(%rbx), %rdi
    000006b7: 	movq	0x98(%rsp), %r14
    000006bf: 	movq	%rdi, (%rbx)
    000006c2: 	movq	0x90(%rsp), %rax
    000006ca: 	movq	%rax, %rsi
    000006cd: 	movq	%rax, 0x28(%rsp)
    000006d2: 	addq	%r14, %rsi
    000006d5: 	je	.Ltmp1745 # Offset: 1749
    000006d7: 	testq	%rax, %rax
    000006da: 	je	.Ltmp1746 # Offset: 1754
.Ltmp1745:
    000006e0: 	movq	%r14, 0x30(%rsp)
    000006e5: 	cmpq	$0xf, %r14
    000006e9: 	ja	.Ltmp1747 # Offset: 1769
    000006ef: 	cmpq	$0x1, %r14
    000006f3: 	jne	.Ltmp1748 # Offset: 1779
    000006f9: 	movq	0x28(%rsp), %rax
    000006fe: 	movzbl	(%rax), %eax
    00000701: 	movb	%al, 0x10(%rbx)
.Ltmp1845:
    00000704: 	movq	%r14, 0x8(%rbx)
    00000708: 	movb	$0x0, (%rdi,%r14)
    0000070d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000714: 	addq	$0x20, %rax
    00000718: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1823:
    0000071f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000726: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000072d: 	je	.Ltmp1749 # Offset: 1837
.Ltmp1822:
    00000733: 	movq	-0x20(%rax), %r14
    00000737: 	callq	clock@PLT # Offset: 1847
    0000073c: 	pxor	%xmm0, %xmm0
    00000740: 	movq	%rax, end_time(%rip)
    00000747: 	movq	%r14, %rdi
    0000074a: 	subq	start_time(%rip), %rax
    00000751: 	cvtsi2sd	%rax, %xmm0
    00000756: 	divsd	DATAat0x32600(%rip), %xmm0
    0000075e: 	callq	_Z13record_resultdPKc # Offset: 1886
    00000763: 	movq	0x90(%rsp), %rdi
    0000076b: 	cmpq	(%rsp), %rdi
    0000076f: 	je	.Ltmp1750 # Offset: 1903
    00000771: 	movq	0xa0(%rsp), %rax
    00000779: 	leaq	0x1(%rax), %rsi
    0000077d: 	callq	_ZdlPvm@PLT # Offset: 1917
.Ltmp1750:
    00000782: 	movq	0x8(%rsp), %rsi
    00000787: 	leaq	DATAat0x322e7(%rip), %rdx
    0000078e: 	movq	%r15, %rdi
    00000791: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1937
    00000796: 	callq	clock@PLT # Offset: 1942
    0000079b: 	movl	iterations(%rip), %ecx
    000007a1: 	xorl	%ebx, %ebx
    000007a3: 	leaq	DATAat0x321c8(%rip), %r14
    000007aa: 	movq	%rax, start_time(%rip)
    000007b1: 	testl	%ecx, %ecx
    000007b3: 	jle	.Ltmp1751 # Offset: 1971
    000007b9: 	nopl	(%rax) # Size: 7
.Ltmp1754:
    000007c0: 	xorl	%eax, %eax
    000007c2: 	pxor	%xmm0, %xmm0
    000007c6: 	pxor	%xmm5, %xmm5
    000007ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1752:
    000007d0: 	movdqa	(%rbp,%rax), %xmm2
    000007d6: 	pmullw	(%r12,%rax), %xmm2
    000007dc: 	movdqa	%xmm2, %xmm3
    000007e0: 	movdqa	(%rbp,%rax), %xmm1
    000007e6: 	movdqa	%xmm5, %xmm4
    000007ea: 	pmulhw	(%r12,%rax), %xmm1
    000007f0: 	punpcklwd	%xmm1, %xmm3
    000007f4: 	punpckhwd	%xmm1, %xmm2
    000007f8: 	pcmpgtd	%xmm3, %xmm4
    000007fc: 	movdqa	%xmm3, %xmm1
    00000800: 	addq	$0x10, %rax
    00000804: 	punpckldq	%xmm4, %xmm1
    00000808: 	punpckhdq	%xmm4, %xmm3
    0000080c: 	paddq	%xmm1, %xmm0
    00000810: 	movdqa	%xmm5, %xmm1
    00000814: 	pcmpgtd	%xmm2, %xmm1
    00000818: 	paddq	%xmm3, %xmm0
    0000081c: 	movdqa	%xmm2, %xmm3
    00000820: 	punpckldq	%xmm1, %xmm3
    00000824: 	punpckhdq	%xmm1, %xmm2
    00000828: 	paddq	%xmm3, %xmm0
    0000082c: 	paddq	%xmm2, %xmm0
    00000830: 	cmpq	$0x3e80, %rax
    00000836: 	jne	.Ltmp1752 # Offset: 2102
    00000838: 	movl	init_value(%rip), %edx
    0000083e: 	movdqa	%xmm0, %xmm1
    00000842: 	psrldq	$0x8, %xmm1
    00000847: 	imull	%edx, %edx
    0000084a: 	paddq	%xmm1, %xmm0
    0000084e: 	movq	%xmm0, %rax
    00000853: 	imulw	$0x1f40, %dx, %dx
    00000858: 	cmpw	%ax, %dx
    0000085b: 	jne	.Ltmp1753 # Offset: 2139
.Ltmp1819:
    00000861: 	addl	$0x1, %ebx
    00000864: 	cmpl	%ecx, %ebx
    00000866: 	jl	.Ltmp1754 # Offset: 2150
.Ltmp1751:
    0000086c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000873: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000087a: 	subq	$0x20, %rax
    0000087e: 	cmpq	%rax, %rbx
    00000881: 	je	.Ltmp1755 # Offset: 2177
    00000887: 	leaq	0x10(%rbx), %rdi
    0000088b: 	movq	0x98(%rsp), %r14
    00000893: 	movq	%rdi, (%rbx)
    00000896: 	movq	0x90(%rsp), %rax
    0000089e: 	movq	%rax, %rsi
    000008a1: 	movq	%rax, 0x28(%rsp)
    000008a6: 	addq	%r14, %rsi
    000008a9: 	je	.Ltmp1756 # Offset: 2217
    000008ab: 	testq	%rax, %rax
    000008ae: 	je	.Ltmp1757 # Offset: 2222
.Ltmp1756:
    000008b4: 	movq	%r14, 0x30(%rsp)
    000008b9: 	cmpq	$0xf, %r14
    000008bd: 	ja	.Ltmp1758 # Offset: 2237
    000008c3: 	cmpq	$0x1, %r14
    000008c7: 	jne	.Ltmp1759 # Offset: 2247
    000008cd: 	movq	0x28(%rsp), %rax
    000008d2: 	movzbl	(%rax), %eax
    000008d5: 	movb	%al, 0x10(%rbx)
.Ltmp1846:
    000008d8: 	movq	%r14, 0x8(%rbx)
    000008dc: 	movb	$0x0, (%rdi,%r14)
    000008e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008e8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ef: 	addq	$0x20, %rax
    000008f3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000008fa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000901: 	je	.Ltmp1760 # Offset: 2305
.Ltmp1821:
    00000907: 	movq	-0x20(%rax), %r14
    0000090b: 	callq	clock@PLT # Offset: 2315
    00000910: 	pxor	%xmm0, %xmm0
    00000914: 	movq	%rax, end_time(%rip)
    0000091b: 	movq	%r14, %rdi
    0000091e: 	subq	start_time(%rip), %rax
    00000925: 	cvtsi2sd	%rax, %xmm0
    0000092a: 	divsd	DATAat0x32600(%rip), %xmm0
    00000932: 	callq	_Z13record_resultdPKc # Offset: 2354
    00000937: 	movq	0x90(%rsp), %rdi
    0000093f: 	cmpq	(%rsp), %rdi
    00000943: 	je	.Ltmp1761 # Offset: 2371
    00000945: 	movq	0xa0(%rsp), %rax
    0000094d: 	leaq	0x1(%rax), %rsi
    00000951: 	callq	_ZdlPvm@PLT # Offset: 2385
.Ltmp1761:
    00000956: 	movq	0x8(%rsp), %rsi
    0000095b: 	leaq	DATAat0x32204(%rip), %rdx
    00000962: 	movq	%r13, %rdi
    00000965: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2405
    0000096a: 	movq	0x58(%rsp), %rdx
    0000096f: 	movq	0x50(%rsp), %rsi
    00000974: 	movq	%r13, %rdi
    00000977: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2423
    0000097c: 	movq	(%rsp), %rsi
    00000980: 	leaq	0x10(%rax), %rdx
    00000984: 	movq	%rsi, 0x90(%rsp)
    0000098c: 	movq	(%rax), %rcx
    0000098f: 	cmpq	%rdx, %rcx
    00000992: 	je	.Ltmp1762 # Offset: 2450
    00000998: 	movq	%rcx, 0x90(%rsp)
    000009a0: 	movq	0x10(%rax), %rcx
    000009a4: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1830:
    000009ac: 	movq	0x8(%rax), %rcx
    000009b0: 	movq	%r15, %r8
    000009b3: 	movq	%rbp, %rsi
    000009b6: 	movq	%r12, %rdi
    000009b9: 	movq	%rcx, 0x98(%rsp)
    000009c1: 	leaq	_Z14inner_product2IPKssET0_T_S3_m(%rip), %rcx
    000009c8: 	movq	%rdx, (%rax)
    000009cb: 	movl	$0x1f40, %edx
    000009d0: 	movq	$0x0, 0x8(%rax)
    000009d8: 	movb	$0x0, 0x10(%rax)
    000009dc: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2524
    000009e1: 	movq	0x90(%rsp), %rdi
    000009e9: 	cmpq	(%rsp), %rdi
    000009ed: 	je	.Ltmp1763 # Offset: 2541
    000009ef: 	movq	0xa0(%rsp), %rax
    000009f7: 	leaq	0x1(%rax), %rsi
    000009fb: 	callq	_ZdlPvm@PLT # Offset: 2555
.Ltmp1763:
    00000a00: 	movq	0x70(%rsp), %rdi
    00000a05: 	cmpq	0x10(%rsp), %rdi
    00000a0a: 	je	.Ltmp1764 # Offset: 2570
    00000a0c: 	movq	0x80(%rsp), %rax
    00000a14: 	leaq	0x1(%rax), %rsi
    00000a18: 	callq	_ZdlPvm@PLT # Offset: 2584
.Ltmp1764:
    00000a1d: 	movq	0x8(%rsp), %rsi
    00000a22: 	leaq	DATAat0x323aa(%rip), %rdx
    00000a29: 	movq	%r15, %rdi
    00000a2c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2604
    00000a31: 	callq	clock@PLT # Offset: 2609
    00000a36: 	movl	iterations(%rip), %ecx
    00000a3c: 	xorl	%ebx, %ebx
    00000a3e: 	leaq	DATAat0x321c8(%rip), %r14
    00000a45: 	movq	%rax, start_time(%rip)
    00000a4c: 	testl	%ecx, %ecx
    00000a4e: 	jle	.Ltmp1765 # Offset: 2638
.Ltmp1768:
    00000a50: 	xorl	%eax, %eax
    00000a52: 	pxor	%xmm1, %xmm1
    00000a56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1766:
    00000a60: 	movdqa	(%rbp,%rax), %xmm0
    00000a66: 	pmaddwd	(%r12,%rax), %xmm0
    00000a6c: 	addq	$0x10, %rax
    00000a70: 	paddd	%xmm0, %xmm1
    00000a74: 	cmpq	$0x3e80, %rax
    00000a7a: 	jne	.Ltmp1766 # Offset: 2682
    00000a7c: 	movl	init_value(%rip), %edx
    00000a82: 	movdqa	%xmm1, %xmm0
    00000a86: 	psrldq	$0x8, %xmm0
    00000a8b: 	imull	%edx, %edx
    00000a8e: 	paddd	%xmm0, %xmm1
    00000a92: 	movdqa	%xmm1, %xmm0
    00000a96: 	psrldq	$0x4, %xmm0
    00000a9b: 	imulw	$0x1f40, %dx, %dx
    00000aa0: 	paddd	%xmm0, %xmm1
    00000aa4: 	movd	%xmm1, %eax
    00000aa8: 	cmpw	%ax, %dx
    00000aab: 	jne	.Ltmp1767 # Offset: 2731
.Ltmp1818:
    00000ab1: 	addl	$0x1, %ebx
    00000ab4: 	cmpl	%ecx, %ebx
    00000ab6: 	jl	.Ltmp1768 # Offset: 2742
.Ltmp1765:
    00000ab8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000abf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000ac6: 	subq	$0x20, %rax
    00000aca: 	cmpq	%rax, %rbx
    00000acd: 	je	.Ltmp1769 # Offset: 2765
    00000ad3: 	leaq	0x10(%rbx), %rdi
    00000ad7: 	movq	0x98(%rsp), %r14
    00000adf: 	movq	%rdi, (%rbx)
    00000ae2: 	movq	0x90(%rsp), %rax
    00000aea: 	movq	%rax, %rsi
    00000aed: 	movq	%rax, 0x28(%rsp)
    00000af2: 	addq	%r14, %rsi
    00000af5: 	je	.Ltmp1770 # Offset: 2805
    00000af7: 	testq	%rax, %rax
    00000afa: 	je	.Ltmp1771 # Offset: 2810
.Ltmp1770:
    00000b00: 	movq	%r14, 0x30(%rsp)
    00000b05: 	cmpq	$0xf, %r14
    00000b09: 	ja	.Ltmp1772 # Offset: 2825
    00000b0f: 	cmpq	$0x1, %r14
    00000b13: 	jne	.Ltmp1773 # Offset: 2835
    00000b19: 	movq	0x28(%rsp), %rax
    00000b1e: 	movzbl	(%rax), %eax
    00000b21: 	movb	%al, 0x10(%rbx)
.Ltmp1843:
    00000b24: 	movq	%r14, 0x8(%rbx)
    00000b28: 	movb	$0x0, (%rdi,%r14)
    00000b2d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b34: 	addq	$0x20, %rax
    00000b38: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1832:
    00000b3f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000b46: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b4d: 	je	.Ltmp1774 # Offset: 2893
.Ltmp1831:
    00000b53: 	movq	-0x20(%rax), %r14
    00000b57: 	callq	clock@PLT # Offset: 2903
    00000b5c: 	pxor	%xmm0, %xmm0
    00000b60: 	movq	%rax, end_time(%rip)
    00000b67: 	movq	%r14, %rdi
    00000b6a: 	subq	start_time(%rip), %rax
    00000b71: 	cvtsi2sd	%rax, %xmm0
    00000b76: 	divsd	DATAat0x32600(%rip), %xmm0
    00000b7e: 	callq	_Z13record_resultdPKc # Offset: 2942
    00000b83: 	movq	0x90(%rsp), %rdi
    00000b8b: 	cmpq	(%rsp), %rdi
    00000b8f: 	je	.Ltmp1775 # Offset: 2959
    00000b91: 	movq	0xa0(%rsp), %rax
    00000b99: 	leaq	0x1(%rax), %rsi
    00000b9d: 	callq	_ZdlPvm@PLT # Offset: 2973
.Ltmp1775:
    00000ba2: 	movq	0x8(%rsp), %rsi
    00000ba7: 	leaq	DATAat0x32302(%rip), %rdx
    00000bae: 	movq	%r15, %rdi
    00000bb1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2993
    00000bb6: 	callq	clock@PLT # Offset: 2998
    00000bbb: 	movl	iterations(%rip), %ecx
    00000bc1: 	xorl	%ebx, %ebx
    00000bc3: 	leaq	DATAat0x321c8(%rip), %r14
    00000bca: 	movq	%rax, start_time(%rip)
    00000bd1: 	testl	%ecx, %ecx
    00000bd3: 	jle	.Ltmp1776 # Offset: 3027
    00000bd9: 	nopl	(%rax) # Size: 7
.Ltmp1779:
    00000be0: 	xorl	%eax, %eax
    00000be2: 	pxor	%xmm0, %xmm0
    00000be6: 	pxor	%xmm5, %xmm5
    00000bea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1777:
    00000bf0: 	movdqa	(%rbp,%rax), %xmm2
    00000bf6: 	pmullw	(%r12,%rax), %xmm2
    00000bfc: 	movdqa	%xmm2, %xmm3
    00000c00: 	movdqa	(%rbp,%rax), %xmm1
    00000c06: 	movdqa	%xmm5, %xmm4
    00000c0a: 	pmulhw	(%r12,%rax), %xmm1
    00000c10: 	punpcklwd	%xmm1, %xmm3
    00000c14: 	punpckhwd	%xmm1, %xmm2
    00000c18: 	pcmpgtd	%xmm3, %xmm4
    00000c1c: 	movdqa	%xmm3, %xmm1
    00000c20: 	addq	$0x10, %rax
    00000c24: 	punpckldq	%xmm4, %xmm1
    00000c28: 	punpckhdq	%xmm4, %xmm3
    00000c2c: 	paddq	%xmm1, %xmm0
    00000c30: 	movdqa	%xmm5, %xmm1
    00000c34: 	pcmpgtd	%xmm2, %xmm1
    00000c38: 	paddq	%xmm3, %xmm0
    00000c3c: 	movdqa	%xmm2, %xmm3
    00000c40: 	punpckldq	%xmm1, %xmm3
    00000c44: 	punpckhdq	%xmm1, %xmm2
    00000c48: 	paddq	%xmm3, %xmm0
    00000c4c: 	paddq	%xmm2, %xmm0
    00000c50: 	cmpq	$0x3e80, %rax
    00000c56: 	jne	.Ltmp1777 # Offset: 3158
    00000c58: 	movl	init_value(%rip), %edx
    00000c5e: 	movdqa	%xmm0, %xmm1
    00000c62: 	psrldq	$0x8, %xmm1
    00000c67: 	imull	%edx, %edx
    00000c6a: 	paddq	%xmm1, %xmm0
    00000c6e: 	movq	%xmm0, %rax
    00000c73: 	imulw	$0x1f40, %dx, %dx
    00000c78: 	cmpw	%ax, %dx
    00000c7b: 	jne	.Ltmp1778 # Offset: 3195
.Ltmp1816:
    00000c81: 	addl	$0x1, %ebx
    00000c84: 	cmpl	%ecx, %ebx
    00000c86: 	jl	.Ltmp1779 # Offset: 3206
.Ltmp1776:
    00000c8c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000c93: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000c9a: 	subq	$0x20, %rax
    00000c9e: 	cmpq	%rax, %rbx
    00000ca1: 	je	.Ltmp1780 # Offset: 3233
    00000ca7: 	leaq	0x10(%rbx), %rdi
    00000cab: 	movq	0x98(%rsp), %r14
    00000cb3: 	movq	%rdi, (%rbx)
    00000cb6: 	movq	0x90(%rsp), %rax
    00000cbe: 	movq	%rax, %rsi
    00000cc1: 	movq	%rax, 0x28(%rsp)
    00000cc6: 	addq	%r14, %rsi
    00000cc9: 	je	.Ltmp1781 # Offset: 3273
    00000ccb: 	testq	%rax, %rax
    00000cce: 	je	.Ltmp1782 # Offset: 3278
.Ltmp1781:
    00000cd4: 	movq	%r14, 0x30(%rsp)
    00000cd9: 	cmpq	$0xf, %r14
    00000cdd: 	ja	.Ltmp1783 # Offset: 3293
    00000ce3: 	cmpq	$0x1, %r14
    00000ce7: 	jne	.Ltmp1784 # Offset: 3303
    00000ced: 	movq	0x28(%rsp), %rax
    00000cf2: 	movzbl	(%rax), %eax
    00000cf5: 	movb	%al, 0x10(%rbx)
.Ltmp1848:
    00000cf8: 	movq	%r14, 0x8(%rbx)
    00000cfc: 	movb	$0x0, (%rdi,%r14)
    00000d01: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d08: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d0f: 	addq	$0x20, %rax
    00000d13: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000d1a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000d21: 	je	.Ltmp1785 # Offset: 3361
.Ltmp1825:
    00000d27: 	movq	-0x20(%rax), %r14
    00000d2b: 	callq	clock@PLT # Offset: 3371
    00000d30: 	pxor	%xmm0, %xmm0
    00000d34: 	movq	%rax, end_time(%rip)
    00000d3b: 	movq	%r14, %rdi
    00000d3e: 	subq	start_time(%rip), %rax
    00000d45: 	cvtsi2sd	%rax, %xmm0
    00000d4a: 	divsd	DATAat0x32600(%rip), %xmm0
    00000d52: 	callq	_Z13record_resultdPKc # Offset: 3410
    00000d57: 	movq	0x90(%rsp), %rdi
    00000d5f: 	cmpq	(%rsp), %rdi
    00000d63: 	je	.Ltmp1786 # Offset: 3427
    00000d65: 	movq	0xa0(%rsp), %rax
    00000d6d: 	leaq	0x1(%rax), %rsi
    00000d71: 	callq	_ZdlPvm@PLT # Offset: 3441
.Ltmp1786:
    00000d76: 	movq	0x8(%rsp), %rsi
    00000d7b: 	leaq	DATAat0x32218(%rip), %rdx
    00000d82: 	movq	%r13, %rdi
    00000d85: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3461
    00000d8a: 	movq	0x58(%rsp), %rdx
    00000d8f: 	movq	0x50(%rsp), %rsi
    00000d94: 	movq	%r13, %rdi
    00000d97: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3479
    00000d9c: 	movq	(%rsp), %rsi
    00000da0: 	leaq	0x10(%rax), %rdx
    00000da4: 	movq	%rsi, 0x90(%rsp)
    00000dac: 	movq	(%rax), %rcx
    00000daf: 	cmpq	%rdx, %rcx
    00000db2: 	je	.Ltmp1787 # Offset: 3506
    00000db8: 	movq	%rcx, 0x90(%rsp)
    00000dc0: 	movq	0x10(%rax), %rcx
    00000dc4: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1828:
    00000dcc: 	movq	0x8(%rax), %rcx
    00000dd0: 	movq	%r15, %r8
    00000dd3: 	movq	%rbp, %rsi
    00000dd6: 	movq	%r12, %rdi
    00000dd9: 	movq	%rcx, 0x98(%rsp)
    00000de1: 	leaq	_Z14inner_product3IPKssET0_T_S3_m(%rip), %rcx
    00000de8: 	movq	%rdx, (%rax)
    00000deb: 	movl	$0x1f40, %edx
    00000df0: 	movq	$0x0, 0x8(%rax)
    00000df8: 	movb	$0x0, 0x10(%rax)
    00000dfc: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3580
    00000e01: 	movq	0x90(%rsp), %rdi
    00000e09: 	cmpq	(%rsp), %rdi
    00000e0d: 	je	.Ltmp1788 # Offset: 3597
    00000e0f: 	movq	0xa0(%rsp), %rax
    00000e17: 	leaq	0x1(%rax), %rsi
    00000e1b: 	callq	_ZdlPvm@PLT # Offset: 3611
.Ltmp1788:
    00000e20: 	movq	0x70(%rsp), %rdi
    00000e25: 	cmpq	0x10(%rsp), %rdi
    00000e2a: 	je	.Ltmp1789 # Offset: 3626
    00000e2c: 	movq	0x80(%rsp), %rax
    00000e34: 	leaq	0x1(%rax), %rsi
    00000e38: 	callq	_ZdlPvm@PLT # Offset: 3640
.Ltmp1789:
    00000e3d: 	movq	0x8(%rsp), %rsi
    00000e42: 	leaq	DATAat0x3222c(%rip), %rdx
    00000e49: 	movq	%r13, %rdi
    00000e4c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3660
    00000e51: 	movq	0x58(%rsp), %rdx
    00000e56: 	movq	0x50(%rsp), %rsi
    00000e5b: 	movq	%r13, %rdi
    00000e5e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3678
    00000e63: 	movq	(%rsp), %rsi
    00000e67: 	leaq	0x10(%rax), %rdx
    00000e6b: 	movq	%rsi, 0x90(%rsp)
    00000e73: 	movq	(%rax), %rcx
    00000e76: 	cmpq	%rdx, %rcx
    00000e79: 	je	.Ltmp1790 # Offset: 3705
    00000e7f: 	movq	%rcx, 0x90(%rsp)
    00000e87: 	movq	0x10(%rax), %rcx
    00000e8b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1827:
    00000e93: 	movq	0x8(%rax), %rcx
    00000e97: 	movq	%r15, %r8
    00000e9a: 	movq	%rbp, %rsi
    00000e9d: 	movq	%r12, %rdi
    00000ea0: 	movq	%rcx, 0x98(%rsp)
    00000ea8: 	leaq	_Z14inner_product4IPKssET0_T_S3_m(%rip), %rcx
    00000eaf: 	movq	%rdx, (%rax)
    00000eb2: 	movl	$0x1f40, %edx
    00000eb7: 	movq	$0x0, 0x8(%rax)
    00000ebf: 	movb	$0x0, 0x10(%rax)
    00000ec3: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3779
    00000ec8: 	movq	0x90(%rsp), %rdi
    00000ed0: 	cmpq	(%rsp), %rdi
    00000ed4: 	je	.Ltmp1791 # Offset: 3796
    00000ed6: 	movq	0xa0(%rsp), %rax
    00000ede: 	leaq	0x1(%rax), %rsi
    00000ee2: 	callq	_ZdlPvm@PLT # Offset: 3810
.Ltmp1791:
    00000ee7: 	movq	0x70(%rsp), %rdi
    00000eec: 	cmpq	0x10(%rsp), %rdi
    00000ef1: 	je	.Ltmp1792 # Offset: 3825
    00000ef3: 	movq	0x80(%rsp), %rax
    00000efb: 	leaq	0x1(%rax), %rsi
    00000eff: 	callq	_ZdlPvm@PLT # Offset: 3839
.Ltmp1792:
    00000f04: 	movq	0x8(%rsp), %rsi
    00000f09: 	leaq	DATAat0x32240(%rip), %rdx
    00000f10: 	movq	%r13, %rdi
    00000f13: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3859
    00000f18: 	movq	0x58(%rsp), %rdx
    00000f1d: 	movq	0x50(%rsp), %rsi
    00000f22: 	movq	%r13, %rdi
    00000f25: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3877
    00000f2a: 	movq	(%rsp), %rsi
    00000f2e: 	leaq	0x10(%rax), %rdx
    00000f32: 	movq	%rsi, 0x90(%rsp)
    00000f3a: 	movq	(%rax), %rcx
    00000f3d: 	cmpq	%rdx, %rcx
    00000f40: 	je	.Ltmp1793 # Offset: 3904
    00000f46: 	movq	%rcx, 0x90(%rsp)
    00000f4e: 	movq	0x10(%rax), %rcx
    00000f52: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1826:
    00000f5a: 	movq	0x8(%rax), %rcx
    00000f5e: 	movq	%r15, %r8
    00000f61: 	movq	%rbp, %rsi
    00000f64: 	movq	%r12, %rdi
    00000f67: 	movq	%rcx, 0x98(%rsp)
    00000f6f: 	leaq	_Z14inner_product5IPKssET0_T_S3_m(%rip), %rcx
    00000f76: 	movq	%rdx, (%rax)
    00000f79: 	movl	$0x1f40, %edx
    00000f7e: 	movq	$0x0, 0x8(%rax)
    00000f86: 	movb	$0x0, 0x10(%rax)
    00000f8a: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3978
    00000f8f: 	movq	0x90(%rsp), %rdi
    00000f97: 	cmpq	(%rsp), %rdi
    00000f9b: 	je	.Ltmp1794 # Offset: 3995
    00000f9d: 	movq	0xa0(%rsp), %rax
    00000fa5: 	leaq	0x1(%rax), %rsi
    00000fa9: 	callq	_ZdlPvm@PLT # Offset: 4009
.Ltmp1794:
    00000fae: 	movq	0x70(%rsp), %rdi
    00000fb3: 	cmpq	0x10(%rsp), %rdi
    00000fb8: 	je	.Ltmp1795 # Offset: 4024
    00000fba: 	movq	0x80(%rsp), %rax
    00000fc2: 	leaq	0x1(%rax), %rsi
    00000fc6: 	callq	_ZdlPvm@PLT # Offset: 4038
.Ltmp1795:
    00000fcb: 	movq	0x8(%rsp), %rsi
    00000fd0: 	leaq	DATAat0x32254(%rip), %rdx
    00000fd7: 	movq	%r13, %rdi
    00000fda: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4058
    00000fdf: 	movq	0x58(%rsp), %rdx
    00000fe4: 	movq	0x50(%rsp), %rsi
    00000fe9: 	movq	%r13, %rdi
    00000fec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4076
    00000ff1: 	movq	(%rsp), %rsi
    00000ff5: 	leaq	0x10(%rax), %rdx
    00000ff9: 	movq	%rsi, 0x90(%rsp)
    00001001: 	movq	(%rax), %rcx
    00001004: 	cmpq	%rdx, %rcx
    00001007: 	je	.Ltmp1796 # Offset: 4103
    0000100d: 	movq	%rcx, 0x90(%rsp)
    00001015: 	movq	0x10(%rax), %rcx
    00001019: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1838:
    00001021: 	movq	0x8(%rax), %rcx
    00001025: 	movq	%r15, %r8
    00001028: 	movq	%rbp, %rsi
    0000102b: 	movq	%r12, %rdi
    0000102e: 	movq	%rcx, 0x98(%rsp)
    00001036: 	leaq	_Z14inner_product6IPKssET0_T_S3_m(%rip), %rcx
    0000103d: 	movq	%rdx, (%rax)
    00001040: 	movl	$0x1f40, %edx
    00001045: 	movq	$0x0, 0x8(%rax)
    0000104d: 	movb	$0x0, 0x10(%rax)
    00001051: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4177
    00001056: 	movq	0x90(%rsp), %rdi
    0000105e: 	cmpq	(%rsp), %rdi
    00001062: 	je	.Ltmp1797 # Offset: 4194
    00001064: 	movq	0xa0(%rsp), %rax
    0000106c: 	leaq	0x1(%rax), %rsi
    00001070: 	callq	_ZdlPvm@PLT # Offset: 4208
.Ltmp1797:
    00001075: 	movq	0x70(%rsp), %rdi
    0000107a: 	cmpq	0x10(%rsp), %rdi
    0000107f: 	je	.Ltmp1798 # Offset: 4223
    00001081: 	movq	0x80(%rsp), %rax
    00001089: 	leaq	0x1(%rax), %rsi
    0000108d: 	callq	_ZdlPvm@PLT # Offset: 4237
.Ltmp1798:
    00001092: 	movq	0x8(%rsp), %rsi
    00001097: 	leaq	DATAat0x32268(%rip), %rdx
    0000109e: 	movq	%r13, %rdi
    000010a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4257
    000010a6: 	movq	0x58(%rsp), %rdx
    000010ab: 	movq	0x50(%rsp), %rsi
    000010b0: 	movq	%r13, %rdi
    000010b3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4275
    000010b8: 	movq	(%rsp), %rsi
    000010bc: 	leaq	0x10(%rax), %rdx
    000010c0: 	movq	%rsi, 0x90(%rsp)
    000010c8: 	movq	(%rax), %rcx
    000010cb: 	cmpq	%rdx, %rcx
    000010ce: 	je	.Ltmp1799 # Offset: 4302
    000010d4: 	movq	%rcx, 0x90(%rsp)
    000010dc: 	movq	0x10(%rax), %rcx
    000010e0: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1837:
    000010e8: 	movq	0x8(%rax), %rcx
    000010ec: 	movq	%r15, %r8
    000010ef: 	movq	%rbp, %rsi
    000010f2: 	movq	%r12, %rdi
    000010f5: 	movq	%rcx, 0x98(%rsp)
    000010fd: 	leaq	_Z14inner_product7IPKssET0_T_S3_m(%rip), %rcx
    00001104: 	movq	%rdx, (%rax)
    00001107: 	movl	$0x1f40, %edx
    0000110c: 	movq	$0x0, 0x8(%rax)
    00001114: 	movb	$0x0, 0x10(%rax)
    00001118: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4376
    0000111d: 	movq	0x90(%rsp), %rdi
    00001125: 	cmpq	(%rsp), %rdi
    00001129: 	je	.Ltmp1800 # Offset: 4393
    0000112b: 	movq	0xa0(%rsp), %rax
    00001133: 	leaq	0x1(%rax), %rsi
    00001137: 	callq	_ZdlPvm@PLT # Offset: 4407
.Ltmp1800:
    0000113c: 	movq	0x70(%rsp), %rdi
    00001141: 	cmpq	0x10(%rsp), %rdi
    00001146: 	je	.Ltmp1801 # Offset: 4422
    00001148: 	movq	0x80(%rsp), %rax
    00001150: 	leaq	0x1(%rax), %rsi
    00001154: 	callq	_ZdlPvm@PLT # Offset: 4436
.Ltmp1801:
    00001159: 	movq	0x8(%rsp), %rsi
    0000115e: 	leaq	DATAat0x3227c(%rip), %rdx
    00001165: 	movq	%r13, %rdi
    00001168: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4456
    0000116d: 	movq	0x58(%rsp), %rdx
    00001172: 	movq	0x50(%rsp), %rsi
    00001177: 	movq	%r13, %rdi
    0000117a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4474
    0000117f: 	movq	(%rsp), %rsi
    00001183: 	leaq	0x10(%rax), %rdx
    00001187: 	movq	%rsi, 0x90(%rsp)
    0000118f: 	movq	(%rax), %rcx
    00001192: 	cmpq	%rdx, %rcx
    00001195: 	je	.Ltmp1802 # Offset: 4501
    0000119b: 	movq	%rcx, 0x90(%rsp)
    000011a3: 	movq	0x10(%rax), %rcx
    000011a7: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1836:
    000011af: 	movq	0x8(%rax), %rcx
    000011b3: 	movq	%r15, %r8
    000011b6: 	movq	%rbp, %rsi
    000011b9: 	movq	%r12, %rdi
    000011bc: 	movq	%rcx, 0x98(%rsp)
    000011c4: 	leaq	_Z14inner_product8IPKssET0_T_S3_m(%rip), %rcx
    000011cb: 	movq	%rdx, (%rax)
    000011ce: 	movl	$0x1f40, %edx
    000011d3: 	movq	$0x0, 0x8(%rax)
    000011db: 	movb	$0x0, 0x10(%rax)
    000011df: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4575
    000011e4: 	movq	0x90(%rsp), %rdi
    000011ec: 	cmpq	(%rsp), %rdi
    000011f0: 	je	.Ltmp1803 # Offset: 4592
    000011f2: 	movq	0xa0(%rsp), %rax
    000011fa: 	leaq	0x1(%rax), %rsi
    000011fe: 	callq	_ZdlPvm@PLT # Offset: 4606
.Ltmp1803:
    00001203: 	movq	0x70(%rsp), %rdi
    00001208: 	cmpq	0x10(%rsp), %rdi
    0000120d: 	je	.Ltmp1804 # Offset: 4621
    0000120f: 	movq	0x80(%rsp), %rax
    00001217: 	leaq	0x1(%rax), %rsi
    0000121b: 	callq	_ZdlPvm@PLT # Offset: 4635
.Ltmp1804:
    00001220: 	movq	0x8(%rsp), %rsi
    00001225: 	leaq	DATAat0x32290(%rip), %rdx
    0000122c: 	movq	%r13, %rdi
    0000122f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4655
    00001234: 	movq	0x58(%rsp), %rdx
    00001239: 	movq	0x50(%rsp), %rsi
    0000123e: 	movq	%r13, %rdi
    00001241: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4673
    00001246: 	movq	(%rsp), %rsi
    0000124a: 	leaq	0x10(%rax), %rdx
    0000124e: 	movq	%rsi, 0x90(%rsp)
    00001256: 	movq	(%rax), %rcx
    00001259: 	cmpq	%rdx, %rcx
    0000125c: 	je	.Ltmp1805 # Offset: 4700
    00001262: 	movq	%rcx, 0x90(%rsp)
    0000126a: 	movq	0x10(%rax), %rcx
    0000126e: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1835:
    00001276: 	movq	0x8(%rax), %rcx
    0000127a: 	movq	%r15, %r8
    0000127d: 	movq	%rbp, %rsi
    00001280: 	movq	%r12, %rdi
    00001283: 	movq	%rcx, 0x98(%rsp)
    0000128b: 	leaq	_Z14inner_product9IPKssET0_T_S3_m(%rip), %rcx
    00001292: 	movq	%rdx, (%rax)
    00001295: 	movl	$0x1f40, %edx
    0000129a: 	movq	$0x0, 0x8(%rax)
    000012a2: 	movb	$0x0, 0x10(%rax)
    000012a6: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4774
    000012ab: 	movq	0x90(%rsp), %rdi
    000012b3: 	cmpq	(%rsp), %rdi
    000012b7: 	je	.Ltmp1806 # Offset: 4791
    000012b9: 	movq	0xa0(%rsp), %rax
    000012c1: 	leaq	0x1(%rax), %rsi
    000012c5: 	callq	_ZdlPvm@PLT # Offset: 4805
.Ltmp1806:
    000012ca: 	movq	0x70(%rsp), %rdi
    000012cf: 	cmpq	0x10(%rsp), %rdi
    000012d4: 	je	.Ltmp1807 # Offset: 4820
    000012d6: 	movq	0x80(%rsp), %rax
    000012de: 	leaq	0x1(%rax), %rsi
    000012e2: 	callq	_ZdlPvm@PLT # Offset: 4834
.Ltmp1807:
    000012e7: 	movq	0x8(%rsp), %rsi
    000012ec: 	leaq	DATAat0x322a4(%rip), %rdx
    000012f3: 	movq	%r13, %rdi
    000012f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4854
    000012fb: 	movq	0x58(%rsp), %rdx
    00001300: 	movq	0x50(%rsp), %rsi
    00001305: 	movq	%r13, %rdi
    00001308: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4872
    0000130d: 	movq	(%rsp), %rsi
    00001311: 	leaq	0x10(%rax), %rdx
    00001315: 	movq	%rsi, 0x90(%rsp)
    0000131d: 	movq	(%rax), %rcx
    00001320: 	cmpq	%rdx, %rcx
    00001323: 	je	.Ltmp1808 # Offset: 4899
    00001329: 	movq	%rcx, 0x90(%rsp)
    00001331: 	movq	0x10(%rax), %rcx
    00001335: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1824:
    0000133d: 	movq	0x8(%rax), %rcx
    00001341: 	movq	%r15, %r8
    00001344: 	movq	%rbp, %rsi
    00001347: 	movq	%r12, %rdi
    0000134a: 	movq	%rcx, 0x98(%rsp)
    00001352: 	leaq	_Z15inner_product10IPKssET0_T_S3_m(%rip), %rcx
    00001359: 	movq	%rdx, (%rax)
    0000135c: 	movl	$0x1f40, %edx
    00001361: 	movq	$0x0, 0x8(%rax)
    00001369: 	movb	$0x0, 0x10(%rax)
    0000136d: 	callq	_Z18test_inner_productIsPFsPKsS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4973
    00001372: 	movq	0x90(%rsp), %rdi
    0000137a: 	cmpq	(%rsp), %rdi
    0000137e: 	je	.Ltmp1809 # Offset: 4990
    00001380: 	movq	0xa0(%rsp), %rax
    00001388: 	leaq	0x1(%rax), %rsi
    0000138c: 	callq	_ZdlPvm@PLT # Offset: 5004
.Ltmp1809:
    00001391: 	movq	0x70(%rsp), %rdi
    00001396: 	cmpq	0x10(%rsp), %rdi
    0000139b: 	je	.Ltmp1810 # Offset: 5019
    0000139d: 	movq	0x80(%rsp), %rax
    000013a5: 	leaq	0x1(%rax), %rsi
    000013a9: 	callq	_ZdlPvm@PLT # Offset: 5033
.Ltmp1810:
    000013ae: 	movq	0x8(%rsp), %rsi
    000013b3: 	leaq	DATAat0x322b9(%rip), %rdx
    000013ba: 	movq	%r15, %rdi
    000013bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5053
    000013c2: 	movl	iterations(%rip), %edx
    000013c8: 	xorl	%r8d, %r8d
    000013cb: 	xorl	%ecx, %ecx
    000013cd: 	movl	$0x1f40, %esi
    000013d2: 	movq	0x90(%rsp), %rdi
    000013da: 	callq	_Z9summarizePKciiii # Offset: 5082
    000013df: 	movq	0x90(%rsp), %rdi
    000013e7: 	cmpq	(%rsp), %rdi
    000013eb: 	je	.Ltmp1811 # Offset: 5099
    000013ed: 	movq	0xa0(%rsp), %rax
    000013f5: 	leaq	0x1(%rax), %rsi
    000013f9: 	callq	_ZdlPvm@PLT # Offset: 5113
.Ltmp1811:
    000013fe: 	movq	0x50(%rsp), %rdi
    00001403: 	cmpq	0x20(%rsp), %rdi
    00001408: 	je	.Ltmp1812 # Offset: 5128
    0000140a: 	movq	0x60(%rsp), %rax
    0000140f: 	leaq	0x1(%rax), %rsi
    00001413: 	callq	_ZdlPvm@PLT # Offset: 5139
.Ltmp1812:
    00001418: 	movq	0x7db8(%rsp), %rax
    00001420: 	subq	%fs:0x28, %rax
    00001429: 	jne	.Ltmp1813 # Offset: 5161
    0000142f: 	addq	$0x7dc8, %rsp
    00001436: 	popq	%rbx
    00001437: 	popq	%rbp
    00001438: 	popq	%r12
    0000143a: 	popq	%r13
    0000143c: 	popq	%r14
    0000143e: 	popq	%r15
    00001440: 	retq # Offset: 5184
    00001441: 	nopl	(%rax) # Size: 7
.Ltmp1717:
    00001448: 	movq	0x90(%rsp), %rdx
    00001450: 	movq	%r14, %rsi
    00001453: 	movl	$0x1, %edi
    00001458: 	xorl	%eax, %eax
    0000145a: 	callq	__printf_chk@PLT # Offset: 5210
    0000145f: 	movl	iterations(%rip), %ecx
    00001465: 	jmp	.Ltmp1814 # Offset: 5221
.Ltmp1722:
    0000146a: 	movq	0x18(%rsp), %rsi
    0000146f: 	xorl	%edx, %edx
    00001471: 	movq	%rbx, %rdi
    00001474: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5236
    00001479: 	movq	%rax, (%rbx)
    0000147c: 	movq	%rax, %rdi
    0000147f: 	movq	0x30(%rsp), %rax
    00001484: 	movq	%rax, 0x10(%rbx)
.Ltmp1840:
    00001488: 	movq	0x28(%rsp), %rsi
    0000148d: 	movq	%r14, %rdx
    00001490: 	callq	memcpy@PLT # Offset: 5264
    00001495: 	movq	0x30(%rsp), %r14
    0000149a: 	movq	(%rbx), %rdi
    0000149d: 	jmp	.Ltmp1815 # Offset: 5277
    000014a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1778:
    000014a8: 	movq	0x90(%rsp), %rdx
    000014b0: 	movq	%r14, %rsi
    000014b3: 	movl	$0x1, %edi
    000014b8: 	xorl	%eax, %eax
    000014ba: 	callq	__printf_chk@PLT # Offset: 5306
    000014bf: 	movl	iterations(%rip), %ecx
    000014c5: 	jmp	.Ltmp1816 # Offset: 5317
    000014ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1728:
    000014d0: 	movq	0x90(%rsp), %rdx
    000014d8: 	movq	%r14, %rsi
    000014db: 	movl	$0x1, %edi
    000014e0: 	xorl	%eax, %eax
    000014e2: 	callq	__printf_chk@PLT # Offset: 5346
    000014e7: 	movl	iterations(%rip), %ecx
    000014ed: 	jmp	.Ltmp1817 # Offset: 5357
    000014f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1767:
    000014f8: 	movq	0x90(%rsp), %rdx
    00001500: 	movq	%r14, %rsi
    00001503: 	movl	$0x1, %edi
    00001508: 	xorl	%eax, %eax
    0000150a: 	callq	__printf_chk@PLT # Offset: 5386
    0000150f: 	movl	iterations(%rip), %ecx
    00001515: 	jmp	.Ltmp1818 # Offset: 5397
    0000151a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1753:
    00001520: 	movq	0x90(%rsp), %rdx
    00001528: 	movq	%r14, %rsi
    0000152b: 	movl	$0x1, %edi
    00001530: 	xorl	%eax, %eax
    00001532: 	callq	__printf_chk@PLT # Offset: 5426
    00001537: 	movl	iterations(%rip), %ecx
    0000153d: 	jmp	.Ltmp1819 # Offset: 5437
    00001542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1742:
    00001548: 	movq	0x90(%rsp), %rdx
    00001550: 	movq	%r14, %rsi
    00001553: 	movl	$0x1, %edi
    00001558: 	xorl	%eax, %eax
    0000155a: 	callq	__printf_chk@PLT # Offset: 5466
    0000155f: 	movl	iterations(%rip), %ecx
    00001565: 	jmp	.Ltmp1820 # Offset: 5477
.Ltmp1755:
    0000156a: 	movq	%r15, %rsi
    0000156d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001574: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5492
    00001579: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001580: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001587: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000158e: 	jne	.Ltmp1821 # Offset: 5518
.Ltmp1760:
    00001594: 	movq	-0x8(%rdx), %rax
    00001598: 	addq	$0x200, %rax
    0000159e: 	jmp	.Ltmp1821 # Offset: 5534
.Ltmp1749:
    000015a3: 	movq	-0x8(%rdx), %rax
    000015a7: 	addq	$0x200, %rax
    000015ad: 	jmp	.Ltmp1822 # Offset: 5549
.Ltmp1744:
    000015b2: 	movq	%r15, %rsi
    000015b5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000015bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5564
    000015c1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000015c8: 	jmp	.Ltmp1823 # Offset: 5576
.Ltmp1808:
    000015cd: 	movdqu	0x10(%rax), %xmm6
    000015d2: 	movaps	%xmm6, 0xa0(%rsp)
    000015da: 	jmp	.Ltmp1824 # Offset: 5594
.Ltmp1780:
    000015df: 	movq	%r15, %rsi
    000015e2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000015e9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5609
    000015ee: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000015f5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000015fc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001603: 	jne	.Ltmp1825 # Offset: 5635
.Ltmp1785:
    00001609: 	movq	-0x8(%rdx), %rax
    0000160d: 	addq	$0x200, %rax
    00001613: 	jmp	.Ltmp1825 # Offset: 5651
.Ltmp1793:
    00001618: 	movdqu	0x10(%rax), %xmm7
    0000161d: 	movaps	%xmm7, 0xa0(%rsp)
    00001625: 	jmp	.Ltmp1826 # Offset: 5669
.Ltmp1790:
    0000162a: 	movdqu	0x10(%rax), %xmm6
    0000162f: 	movaps	%xmm6, 0xa0(%rsp)
    00001637: 	jmp	.Ltmp1827 # Offset: 5687
.Ltmp1787:
    0000163c: 	movdqu	0x10(%rax), %xmm7
    00001641: 	movaps	%xmm7, 0xa0(%rsp)
    00001649: 	jmp	.Ltmp1828 # Offset: 5705
.Ltmp1730:
    0000164e: 	movq	%r15, %rsi
    00001651: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001658: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5720
    0000165d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001664: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000166b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001672: 	jne	.Ltmp1829 # Offset: 5746
.Ltmp1735:
    00001678: 	movq	-0x8(%rdx), %rax
    0000167c: 	addq	$0x200, %rax
    00001682: 	jmp	.Ltmp1829 # Offset: 5762
.Ltmp1762:
    00001687: 	movdqu	0x10(%rax), %xmm6
    0000168c: 	movaps	%xmm6, 0xa0(%rsp)
    00001694: 	jmp	.Ltmp1830 # Offset: 5780
.Ltmp1774:
    00001699: 	movq	-0x8(%rdx), %rax
    0000169d: 	addq	$0x200, %rax
    000016a3: 	jmp	.Ltmp1831 # Offset: 5795
.Ltmp1769:
    000016a8: 	movq	%r15, %rsi
    000016ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016b2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5810
    000016b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016be: 	jmp	.Ltmp1832 # Offset: 5822
.Ltmp1719:
    000016c3: 	movq	%r15, %rsi
    000016c6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016cd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5837
    000016d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016d9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000016e0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016e7: 	jne	.Ltmp1833 # Offset: 5863
.Ltmp1724:
    000016ed: 	movq	-0x8(%rdx), %rax
    000016f1: 	addq	$0x200, %rax
    000016f7: 	jmp	.Ltmp1833 # Offset: 5879
.Ltmp1737:
    000016fc: 	movdqu	0x10(%rax), %xmm7
    00001701: 	movaps	%xmm7, 0xa0(%rsp)
    00001709: 	jmp	.Ltmp1834 # Offset: 5897
.Ltmp1805:
    0000170e: 	movdqu	0x10(%rax), %xmm7
    00001713: 	movaps	%xmm7, 0xa0(%rsp)
    0000171b: 	jmp	.Ltmp1835 # Offset: 5915
.Ltmp1802:
    00001720: 	movdqu	0x10(%rax), %xmm6
    00001725: 	movaps	%xmm6, 0xa0(%rsp)
    0000172d: 	jmp	.Ltmp1836 # Offset: 5933
.Ltmp1799:
    00001732: 	movdqu	0x10(%rax), %xmm7
    00001737: 	movaps	%xmm7, 0xa0(%rsp)
    0000173f: 	jmp	.Ltmp1837 # Offset: 5951
.Ltmp1796:
    00001744: 	movdqu	0x10(%rax), %xmm6
    00001749: 	movaps	%xmm6, 0xa0(%rsp)
    00001751: 	jmp	.Ltmp1838 # Offset: 5969
.Ltmp1712:
    00001756: 	movdqu	0x10(%rax), %xmm6
    0000175b: 	movaps	%xmm6, 0xa0(%rsp)
    00001763: 	jmp	.Ltmp1839 # Offset: 5987
.Ltmp1723:
    00001768: 	testq	%r14, %r14
    0000176b: 	je	.Ltmp1815 # Offset: 5995
    00001771: 	jmp	.Ltmp1840 # Offset: 6001
    00001776: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1734:
    00001780: 	testq	%r14, %r14
    00001783: 	je	.Ltmp1841 # Offset: 6019
    00001789: 	jmp	.Ltmp1842 # Offset: 6025
    0000178e: 	nop # Size: 2
.Ltmp1773:
    00001790: 	testq	%r14, %r14
    00001793: 	je	.Ltmp1843 # Offset: 6035
    00001799: 	jmp	.Ltmp1844 # Offset: 6041
    0000179e: 	nop # Size: 2
.Ltmp1748:
    000017a0: 	testq	%r14, %r14
    000017a3: 	je	.Ltmp1845 # Offset: 6051
.Ltmp1849:
    000017a9: 	movq	0x28(%rsp), %rsi
    000017ae: 	movq	%r14, %rdx
    000017b1: 	callq	memcpy@PLT # Offset: 6065
    000017b6: 	movq	0x30(%rsp), %r14
    000017bb: 	movq	(%rbx), %rdi
    000017be: 	jmp	.Ltmp1845 # Offset: 6078
.Ltmp1759:
    000017c3: 	testq	%r14, %r14
    000017c6: 	je	.Ltmp1846 # Offset: 6086
    000017cc: 	jmp	.Ltmp1847 # Offset: 6092
    000017d1: 	nopl	(%rax) # Size: 7
.Ltmp1784:
    000017d8: 	testq	%r14, %r14
    000017db: 	je	.Ltmp1848 # Offset: 6107
.Ltmp1850:
    000017e1: 	movq	0x28(%rsp), %rsi
    000017e6: 	movq	%r14, %rdx
    000017e9: 	callq	memcpy@PLT # Offset: 6121
    000017ee: 	movq	0x30(%rsp), %r14
    000017f3: 	movq	(%rbx), %rdi
    000017f6: 	jmp	.Ltmp1848 # Offset: 6134
.Ltmp1733:
    000017fb: 	movq	0x18(%rsp), %rsi
    00001800: 	xorl	%edx, %edx
    00001802: 	movq	%rbx, %rdi
    00001805: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6149
    0000180a: 	movq	%rax, (%rbx)
    0000180d: 	movq	%rax, %rdi
    00001810: 	movq	0x30(%rsp), %rax
    00001815: 	movq	%rax, 0x10(%rbx)
.Ltmp1842:
    00001819: 	movq	0x28(%rsp), %rsi
    0000181e: 	movq	%r14, %rdx
    00001821: 	callq	memcpy@PLT # Offset: 6177
    00001826: 	movq	0x30(%rsp), %r14
    0000182b: 	movq	(%rbx), %rdi
    0000182e: 	jmp	.Ltmp1841 # Offset: 6190
.Ltmp1772:
    00001833: 	movq	0x18(%rsp), %rsi
    00001838: 	xorl	%edx, %edx
    0000183a: 	movq	%rbx, %rdi
    0000183d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6205
    00001842: 	movq	%rax, (%rbx)
    00001845: 	movq	%rax, %rdi
    00001848: 	movq	0x30(%rsp), %rax
    0000184d: 	movq	%rax, 0x10(%rbx)
.Ltmp1844:
    00001851: 	movq	0x28(%rsp), %rsi
    00001856: 	movq	%r14, %rdx
    00001859: 	callq	memcpy@PLT # Offset: 6233
    0000185e: 	movq	0x30(%rsp), %r14
    00001863: 	movq	(%rbx), %rdi
    00001866: 	jmp	.Ltmp1843 # Offset: 6246
.Ltmp1758:
    0000186b: 	movq	0x18(%rsp), %rsi
    00001870: 	xorl	%edx, %edx
    00001872: 	movq	%rbx, %rdi
    00001875: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6261
    0000187a: 	movq	%rax, (%rbx)
    0000187d: 	movq	%rax, %rdi
    00001880: 	movq	0x30(%rsp), %rax
    00001885: 	movq	%rax, 0x10(%rbx)
.Ltmp1847:
    00001889: 	movq	0x28(%rsp), %rsi
    0000188e: 	movq	%r14, %rdx
    00001891: 	callq	memcpy@PLT # Offset: 6289
    00001896: 	movq	0x30(%rsp), %r14
    0000189b: 	movq	(%rbx), %rdi
    0000189e: 	jmp	.Ltmp1846 # Offset: 6302
.Ltmp1747:
    000018a3: 	movq	0x18(%rsp), %rsi
    000018a8: 	xorl	%edx, %edx
    000018aa: 	movq	%rbx, %rdi
    000018ad: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6317
    000018b2: 	movq	%rax, (%rbx)
    000018b5: 	movq	%rax, %rdi
    000018b8: 	movq	0x30(%rsp), %rax
    000018bd: 	movq	%rax, 0x10(%rbx)
    000018c1: 	jmp	.Ltmp1849 # Offset: 6337
.Ltmp1783:
    000018c6: 	movq	0x18(%rsp), %rsi
    000018cb: 	xorl	%edx, %edx
    000018cd: 	movq	%rbx, %rdi
    000018d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6352
    000018d5: 	movq	%rax, (%rbx)
    000018d8: 	movq	%rax, %rdi
    000018db: 	movq	0x30(%rsp), %rax
    000018e0: 	movq	%rax, 0x10(%rbx)
    000018e4: 	jmp	.Ltmp1850 # Offset: 6372
.Ltmp1732:
    000018e9: 	leaq	DATAat0x32158(%rip), %rdi
    000018f0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6384
.Ltmp1746:
    000018f5: 	leaq	DATAat0x32158(%rip), %rdi
    000018fc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6396
.Ltmp1757:
    00001901: 	leaq	DATAat0x32158(%rip), %rdi
    00001908: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6408
.Ltmp1771:
    0000190d: 	leaq	DATAat0x32158(%rip), %rdi
    00001914: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6420
.Ltmp1782:
    00001919: 	leaq	DATAat0x32158(%rip), %rdi
    00001920: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6432
.Ltmp1813:
    00001925: 	callq	__stack_chk_fail@PLT # Offset: 6437
.Ltmp1721:
    0000192a: 	leaq	DATAat0x32158(%rip), %rdi
    00001931: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6449
    00001936: 	endbr64
.Ltmp1858:
    0000193a: 	movq	%rax, %rbp
    0000193d: 	jmp	.Ltmp1851 # Offset: 6461
    0000193f: 	endbr64
.Ltmp1856:
    00001943: 	movq	%rax, %rbp
    00001946: 	jmp	.Ltmp1852 # Offset: 6470
.Ltmp1851:
    00001948: 	movq	0x90(%rsp), %rdi
    00001950: 	cmpq	(%rsp), %rdi
    00001954: 	je	.Ltmp1853 # Offset: 6484
    00001956: 	movq	0xa0(%rsp), %rax
    0000195e: 	leaq	0x1(%rax), %rsi
    00001962: 	callq	_ZdlPvm@PLT # Offset: 6498
.Ltmp1853:
    00001967: 	movq	0x50(%rsp), %rdi
    0000196c: 	cmpq	0x20(%rsp), %rdi
    00001971: 	je	.Ltmp1854 # Offset: 6513
    00001973: 	movq	0x60(%rsp), %rax
    00001978: 	leaq	0x1(%rax), %rsi
    0000197c: 	callq	_ZdlPvm@PLT # Offset: 6524
.Ltmp1854:
    00001981: 	movq	%rbp, %rdi
    00001984: 	callq	_Unwind_Resume@PLT # Offset: 6532
.Ltmp1855:
    00001989: 	movq	0x90(%rsp), %rdi
    00001991: 	cmpq	(%rsp), %rdi
    00001995: 	je	.Ltmp1852 # Offset: 6549
    00001997: 	movq	0xa0(%rsp), %rax
    0000199f: 	leaq	0x1(%rax), %rsi
    000019a3: 	callq	_ZdlPvm@PLT # Offset: 6563
.Ltmp1852:
    000019a8: 	movq	0x70(%rsp), %rdi
    000019ad: 	cmpq	0x10(%rsp), %rdi
    000019b2: 	je	.Ltmp1853 # Offset: 6578
.Ltmp1860:
    000019b4: 	movq	0x80(%rsp), %rax
    000019bc: 	leaq	0x1(%rax), %rsi
    000019c0: 	callq	_ZdlPvm@PLT # Offset: 6592
    000019c5: 	jmp	.Ltmp1853 # Offset: 6597
    000019c7: 	endbr64
.Ltmp1857:
    000019cb: 	movq	%rax, %rbp
    000019ce: 	jmp	.Ltmp1855 # Offset: 6606
    000019d0: 	endbr64
    000019d4: 	jmp	.Ltmp1856 # Offset: 6612
    000019d9: 	endbr64
    000019dd: 	jmp	.Ltmp1857 # Offset: 6621
    000019df: 	endbr64
    000019e3: 	jmp	.Ltmp1856 # Offset: 6627
    000019e8: 	endbr64
    000019ec: 	jmp	.Ltmp1857 # Offset: 6636
    000019ee: 	endbr64
    000019f2: 	jmp	.Ltmp1858 # Offset: 6642
    000019f7: 	endbr64
    000019fb: 	jmp	.Ltmp1856 # Offset: 6651
    00001a00: 	endbr64
    00001a04: 	jmp	.Ltmp1857 # Offset: 6660
    00001a06: 	endbr64
    00001a0a: 	jmp	.Ltmp1858 # Offset: 6666
    00001a0f: 	endbr64
    00001a13: 	jmp	.Ltmp1857 # Offset: 6675
    00001a15: 	endbr64
    00001a19: 	jmp	.Ltmp1858 # Offset: 6681
    00001a1e: 	endbr64
    00001a22: 	jmp	.Ltmp1858 # Offset: 6690
    00001a27: 	endbr64
    00001a2b: 	jmp	.Ltmp1857 # Offset: 6699
    00001a2d: 	endbr64
    00001a31: 	jmp	.Ltmp1856 # Offset: 6705
    00001a36: 	endbr64
    00001a3a: 	jmp	.Ltmp1857 # Offset: 6714
    00001a3c: 	endbr64
    00001a40: 	jmp	.Ltmp1856 # Offset: 6720
    00001a45: 	endbr64
    00001a49: 	jmp	.Ltmp1857 # Offset: 6729
    00001a4b: 	endbr64
    00001a4f: 	jmp	.Ltmp1856 # Offset: 6735
    00001a54: 	endbr64
    00001a58: 	jmp	.Ltmp1857 # Offset: 6744
    00001a5d: 	endbr64
    00001a61: 	jmp	.Ltmp1856 # Offset: 6753
    00001a66: 	endbr64
    00001a6a: 	movq	%rax, %rbp
    00001a6d: 	jmp	.Ltmp1853 # Offset: 6765
    00001a72: 	endbr64
    00001a76: 	jmp	.Ltmp1858 # Offset: 6774
    00001a7b: 	endbr64
    00001a7f: 	movq	%rax, %rbp
    00001a82: 	jmp	.Ltmp1859 # Offset: 6786
    00001a84: 	endbr64
    00001a88: 	movq	%rax, %rbp
    00001a8b: 	movq	0x90(%rsp), %rdi
    00001a93: 	cmpq	(%rsp), %rdi
    00001a97: 	je	.Ltmp1859 # Offset: 6807
    00001a99: 	movq	0xa0(%rsp), %rax
    00001aa1: 	leaq	0x1(%rax), %rsi
    00001aa5: 	callq	_ZdlPvm@PLT # Offset: 6821
.Ltmp1859:
    00001aaa: 	movq	0x70(%rsp), %rdi
    00001aaf: 	leaq	0x80(%rsp), %rax
    00001ab7: 	cmpq	%rax, %rdi
    00001aba: 	jne	.Ltmp1860 # Offset: 6842
    00001ac0: 	jmp	.Ltmp1853 # Offset: 6848
    00001ac5: 	endbr64
    00001ac9: 	jmp	.Ltmp1858 # Offset: 6857
    00001ace: 	endbr64
    00001ad2: 	jmp	.Ltmp1857 # Offset: 6866
    00001ad7: 	endbr64
    00001adb: 	jmp	.Ltmp1856 # Offset: 6875
    00001ae0: 	endbr64
    00001ae4: 	jmp	.Ltmp1856 # Offset: 6884
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z11TestOneTypeItEvv" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x29d70
  Size        : 0x1b49
  MaxSize     : 0x1b50
  Offset      : 0x29d70
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1861:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1861 # Offset: 37
    00000027: 	subq	$0xdc8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x7db8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movq	$0x8, 0x58(%rsp)
    00000064: 	movq	%rax, 0x20(%rsp)
    00000069: 	leaq	0xb0(%rsp), %r12
    00000071: 	leaq	0x3f30(%rsp), %rbp
    00000079: 	movq	%rax, 0x50(%rsp)
    0000007e: 	movabsq	$0x745f3631746e6975, %rax
    00000088: 	movq	%rax, 0x60(%rsp)
    0000008d: 	movb	$0x0, 0x68(%rsp)
    00000092: 	movq	%rdi, 0x18(%rsp)
    00000097: 	movaps	%xmm6, 0x30(%rsp)
    0000009c: 	movaps	%xmm7, 0x40(%rsp)
    000000a1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 161
    000000a6: 	movd	init_value(%rip), %xmm0
    000000ae: 	movq	%r12, %rax
    000000b1: 	punpcklwd	%xmm0, %xmm0
    000000b5: 	pshufd	$0x0, %xmm0, %xmm0
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1862:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rax, %rbp
    000000ca: 	jne	.Ltmp1862 # Offset: 202
    000000cc: 	movq	%rbp, %rax
    000000cf: 	leaq	0x7db0(%rsp), %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1863:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rdx, %rax
    000000ea: 	jne	.Ltmp1863 # Offset: 234
    000000ec: 	leaq	0x50(%rsp), %rax
    000000f1: 	leaq	0x70(%rsp), %r13
    000000f6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%r13, %rdi
    00000103: 	movq	%rax, 0x8(%rsp)
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	movq	0x58(%rsp), %rdx
    00000112: 	movq	0x50(%rsp), %rsi
    00000117: 	movq	%r13, %rdi
    0000011a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 282
    0000011f: 	leaq	0xa0(%rsp), %rsi
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	movq	%rsi, 0x90(%rsp)
    00000133: 	movq	(%rax), %rcx
    00000136: 	movq	%rsi, (%rsp)
    0000013a: 	cmpq	%rdx, %rcx
    0000013d: 	je	.Ltmp1864 # Offset: 317
    00000143: 	movq	%rcx, 0x90(%rsp)
    0000014b: 	movq	0x10(%rax), %rcx
    0000014f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1991:
    00000157: 	movq	0x8(%rax), %rcx
    0000015b: 	leaq	0x90(%rsp), %r15
    00000163: 	movq	%rbp, %rsi
    00000166: 	movq	%r12, %rdi
    00000169: 	movq	%r15, %r8
    0000016c: 	movq	%rcx, 0x98(%rsp)
    00000174: 	leaq	_Z17inner_product_stdIPKttET0_T_S3_m(%rip), %rcx
    0000017b: 	movq	%rdx, (%rax)
    0000017e: 	movl	$0x1f40, %edx
    00000183: 	movq	$0x0, 0x8(%rax)
    0000018b: 	movb	$0x0, 0x10(%rax)
    0000018f: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 399
    00000194: 	movq	0x90(%rsp), %rdi
    0000019c: 	cmpq	(%rsp), %rdi
    000001a0: 	je	.Ltmp1865 # Offset: 416
    000001a2: 	movq	0xa0(%rsp), %rax
    000001aa: 	leaq	0x1(%rax), %rsi
    000001ae: 	callq	_ZdlPvm@PLT # Offset: 430
.Ltmp1865:
    000001b3: 	movq	0x70(%rsp), %rdi
    000001b8: 	leaq	0x80(%rsp), %rax
    000001c0: 	movq	%rax, 0x10(%rsp)
    000001c5: 	cmpq	%rax, %rdi
    000001c8: 	je	.Ltmp1866 # Offset: 456
    000001ca: 	movq	0x80(%rsp), %rax
    000001d2: 	leaq	0x1(%rax), %rsi
    000001d6: 	callq	_ZdlPvm@PLT # Offset: 470
.Ltmp1866:
    000001db: 	movq	0x8(%rsp), %rsi
    000001e0: 	leaq	DATAat0x323c8(%rip), %rdx
    000001e7: 	movq	%r15, %rdi
    000001ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 490
    000001ef: 	callq	clock@PLT # Offset: 495
    000001f4: 	movl	iterations(%rip), %ecx
    000001fa: 	xorl	%ebx, %ebx
    000001fc: 	leaq	DATAat0x321c8(%rip), %r14
    00000203: 	movq	%rax, start_time(%rip)
    0000020a: 	testl	%ecx, %ecx
    0000020c: 	jle	.Ltmp1867 # Offset: 524
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1870:
    00000218: 	xorl	%eax, %eax
    0000021a: 	pxor	%xmm2, %xmm2
    0000021e: 	nop # Size: 2
.Ltmp1868:
    00000220: 	movdqa	(%rbp,%rax), %xmm0
    00000226: 	pmullw	(%r12,%rax), %xmm0
    0000022c: 	movdqa	%xmm0, %xmm3
    00000230: 	movdqa	(%rbp,%rax), %xmm1
    00000236: 	pmulhuw	(%r12,%rax), %xmm1
    0000023c: 	punpckhwd	%xmm1, %xmm3
    00000240: 	punpcklwd	%xmm1, %xmm0
    00000244: 	addq	$0x10, %rax
    00000248: 	paddd	%xmm3, %xmm0
    0000024c: 	paddd	%xmm0, %xmm2
    00000250: 	cmpq	$0x3e80, %rax
    00000256: 	jne	.Ltmp1868 # Offset: 598
    00000258: 	movl	init_value(%rip), %edx
    0000025e: 	movdqa	%xmm2, %xmm0
    00000262: 	psrldq	$0x8, %xmm0
    00000267: 	imull	%edx, %edx
    0000026a: 	paddd	%xmm0, %xmm2
    0000026e: 	movdqa	%xmm2, %xmm0
    00000272: 	psrldq	$0x4, %xmm0
    00000277: 	imulw	$0x1f40, %dx, %dx
    0000027c: 	paddd	%xmm0, %xmm2
    00000280: 	movd	%xmm2, %eax
    00000284: 	movzwl	%ax, %eax
    00000287: 	movzwl	%dx, %edx
    0000028a: 	cmpl	%edx, %eax
    0000028c: 	jne	.Ltmp1869 # Offset: 652
.Ltmp1966:
    00000292: 	addl	$0x1, %ebx
    00000295: 	cmpl	%ecx, %ebx
    00000297: 	jl	.Ltmp1870 # Offset: 663
.Ltmp1867:
    0000029d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002a4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000002ab: 	subq	$0x20, %rax
    000002af: 	cmpq	%rax, %rbx
    000002b2: 	je	.Ltmp1871 # Offset: 690
    000002b8: 	leaq	0x10(%rbx), %rdi
    000002bc: 	movq	0x98(%rsp), %r14
    000002c4: 	movq	%rdi, (%rbx)
    000002c7: 	movq	0x90(%rsp), %rax
    000002cf: 	movq	%rax, %rsi
    000002d2: 	movq	%rax, 0x28(%rsp)
    000002d7: 	addq	%r14, %rsi
    000002da: 	je	.Ltmp1872 # Offset: 730
    000002dc: 	testq	%rax, %rax
    000002df: 	je	.Ltmp1873 # Offset: 735
.Ltmp1872:
    000002e5: 	movq	%r14, 0x30(%rsp)
    000002ea: 	cmpq	$0xf, %r14
    000002ee: 	ja	.Ltmp1874 # Offset: 750
    000002f4: 	cmpq	$0x1, %r14
    000002f8: 	jne	.Ltmp1875 # Offset: 760
    000002fe: 	movq	0x28(%rsp), %rax
    00000303: 	movzbl	(%rax), %eax
    00000306: 	movb	%al, 0x10(%rbx)
.Ltmp1967:
    00000309: 	movq	%r14, 0x8(%rbx)
    0000030d: 	movb	$0x0, (%rdi,%r14)
    00000312: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000319: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000320: 	addq	$0x20, %rax
    00000324: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000032b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000332: 	je	.Ltmp1876 # Offset: 818
.Ltmp1985:
    00000338: 	movq	-0x20(%rax), %r14
    0000033c: 	callq	clock@PLT # Offset: 828
    00000341: 	pxor	%xmm0, %xmm0
    00000345: 	movq	%rax, end_time(%rip)
    0000034c: 	movq	%r14, %rdi
    0000034f: 	subq	start_time(%rip), %rax
    00000356: 	cvtsi2sd	%rax, %xmm0
    0000035b: 	divsd	DATAat0x32600(%rip), %xmm0
    00000363: 	callq	_Z13record_resultdPKc # Offset: 867
    00000368: 	movq	0x90(%rsp), %rdi
    00000370: 	cmpq	(%rsp), %rdi
    00000374: 	je	.Ltmp1877 # Offset: 884
    00000376: 	movq	0xa0(%rsp), %rax
    0000037e: 	leaq	0x1(%rax), %rsi
    00000382: 	callq	_ZdlPvm@PLT # Offset: 898
.Ltmp1877:
    00000387: 	movq	0x8(%rsp), %rsi
    0000038c: 	leaq	DATAat0x323e8(%rip), %rdx
    00000393: 	movq	%r15, %rdi
    00000396: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 918
    0000039b: 	callq	clock@PLT # Offset: 923
    000003a0: 	movl	iterations(%rip), %ecx
    000003a6: 	xorl	%ebx, %ebx
    000003a8: 	leaq	DATAat0x321c8(%rip), %r14
    000003af: 	movq	%rax, start_time(%rip)
    000003b6: 	testl	%ecx, %ecx
    000003b8: 	jle	.Ltmp1878 # Offset: 952
    000003be: 	nop # Size: 2
.Ltmp1881:
    000003c0: 	xorl	%eax, %eax
    000003c2: 	pxor	%xmm3, %xmm3
    000003c6: 	pxor	%xmm4, %xmm4
    000003ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1879:
    000003d0: 	movdqa	(%rbp,%rax), %xmm0
    000003d6: 	pmullw	(%r12,%rax), %xmm0
    000003dc: 	movdqa	%xmm0, %xmm1
    000003e0: 	movdqa	(%rbp,%rax), %xmm2
    000003e6: 	pmulhuw	(%r12,%rax), %xmm2
    000003ec: 	punpcklwd	%xmm2, %xmm1
    000003f0: 	punpckhwd	%xmm2, %xmm0
    000003f4: 	movdqa	%xmm4, %xmm2
    000003f8: 	pcmpgtd	%xmm1, %xmm2
    000003fc: 	movdqa	%xmm1, %xmm5
    00000400: 	addq	$0x10, %rax
    00000404: 	punpckhdq	%xmm2, %xmm5
    00000408: 	punpckldq	%xmm2, %xmm1
    0000040c: 	movdqa	%xmm4, %xmm2
    00000410: 	pcmpgtd	%xmm0, %xmm2
    00000414: 	paddq	%xmm5, %xmm1
    00000418: 	movdqa	%xmm0, %xmm5
    0000041c: 	punpckhdq	%xmm2, %xmm5
    00000420: 	punpckldq	%xmm2, %xmm0
    00000424: 	paddq	%xmm5, %xmm0
    00000428: 	paddq	%xmm0, %xmm1
    0000042c: 	paddq	%xmm1, %xmm3
    00000430: 	cmpq	$0x3e80, %rax
    00000436: 	jne	.Ltmp1879 # Offset: 1078
    00000438: 	movl	init_value(%rip), %edx
    0000043e: 	movdqa	%xmm3, %xmm0
    00000442: 	psrldq	$0x8, %xmm0
    00000447: 	imull	%edx, %edx
    0000044a: 	paddq	%xmm0, %xmm3
    0000044e: 	movq	%xmm3, %rax
    00000453: 	imulw	$0x1f40, %dx, %dx
    00000458: 	cmpw	%ax, %dx
    0000045b: 	jne	.Ltmp1880 # Offset: 1115
.Ltmp1969:
    00000461: 	addl	$0x1, %ebx
    00000464: 	cmpl	%ecx, %ebx
    00000466: 	jl	.Ltmp1881 # Offset: 1126
.Ltmp1878:
    0000046c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000473: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000047a: 	subq	$0x20, %rax
    0000047e: 	cmpq	%rax, %rbx
    00000481: 	je	.Ltmp1882 # Offset: 1153
    00000487: 	leaq	0x10(%rbx), %rdi
    0000048b: 	movq	0x98(%rsp), %r14
    00000493: 	movq	%rdi, (%rbx)
    00000496: 	movq	0x90(%rsp), %rax
    0000049e: 	movq	%rax, %rsi
    000004a1: 	movq	%rax, 0x28(%rsp)
    000004a6: 	addq	%r14, %rsi
    000004a9: 	je	.Ltmp1883 # Offset: 1193
    000004ab: 	testq	%rax, %rax
    000004ae: 	je	.Ltmp1884 # Offset: 1198
.Ltmp1883:
    000004b4: 	movq	%r14, 0x30(%rsp)
    000004b9: 	cmpq	$0xf, %r14
    000004bd: 	ja	.Ltmp1885 # Offset: 1213
    000004c3: 	cmpq	$0x1, %r14
    000004c7: 	jne	.Ltmp1886 # Offset: 1223
    000004cd: 	movq	0x28(%rsp), %rax
    000004d2: 	movzbl	(%rax), %eax
    000004d5: 	movb	%al, 0x10(%rbx)
.Ltmp1993:
    000004d8: 	movq	%r14, 0x8(%rbx)
    000004dc: 	movb	$0x0, (%rdi,%r14)
    000004e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004e8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004ef: 	addq	$0x20, %rax
    000004f3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004fa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000501: 	je	.Ltmp1887 # Offset: 1281
.Ltmp1981:
    00000507: 	movq	-0x20(%rax), %r14
    0000050b: 	callq	clock@PLT # Offset: 1291
    00000510: 	pxor	%xmm0, %xmm0
    00000514: 	movq	%rax, end_time(%rip)
    0000051b: 	movq	%r14, %rdi
    0000051e: 	subq	start_time(%rip), %rax
    00000525: 	cvtsi2sd	%rax, %xmm0
    0000052a: 	divsd	DATAat0x32600(%rip), %xmm0
    00000532: 	callq	_Z13record_resultdPKc # Offset: 1330
    00000537: 	movq	0x90(%rsp), %rdi
    0000053f: 	cmpq	(%rsp), %rdi
    00000543: 	je	.Ltmp1888 # Offset: 1347
    00000545: 	movq	0xa0(%rsp), %rax
    0000054d: 	leaq	0x1(%rax), %rsi
    00000551: 	callq	_ZdlPvm@PLT # Offset: 1361
.Ltmp1888:
    00000556: 	movq	0x8(%rsp), %rsi
    0000055b: 	leaq	DATAat0x321f0(%rip), %rdx
    00000562: 	movq	%r13, %rdi
    00000565: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1381
    0000056a: 	movq	0x58(%rsp), %rdx
    0000056f: 	movq	0x50(%rsp), %rsi
    00000574: 	movq	%r13, %rdi
    00000577: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1399
    0000057c: 	movq	(%rsp), %rsi
    00000580: 	leaq	0x10(%rax), %rdx
    00000584: 	movq	%rsi, 0x90(%rsp)
    0000058c: 	movq	(%rax), %rcx
    0000058f: 	cmpq	%rdx, %rcx
    00000592: 	je	.Ltmp1889 # Offset: 1426
    00000598: 	movq	%rcx, 0x90(%rsp)
    000005a0: 	movq	0x10(%rax), %rcx
    000005a4: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1986:
    000005ac: 	movq	0x8(%rax), %rcx
    000005b0: 	movq	%r15, %r8
    000005b3: 	movq	%rbp, %rsi
    000005b6: 	movq	%r12, %rdi
    000005b9: 	movq	%rcx, 0x98(%rsp)
    000005c1: 	leaq	_Z14inner_product1IPKttET0_T_S3_m(%rip), %rcx
    000005c8: 	movq	%rdx, (%rax)
    000005cb: 	movl	$0x1f40, %edx
    000005d0: 	movq	$0x0, 0x8(%rax)
    000005d8: 	movb	$0x0, 0x10(%rax)
    000005dc: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1500
    000005e1: 	movq	0x90(%rsp), %rdi
    000005e9: 	cmpq	(%rsp), %rdi
    000005ed: 	je	.Ltmp1890 # Offset: 1517
    000005ef: 	movq	0xa0(%rsp), %rax
    000005f7: 	leaq	0x1(%rax), %rsi
    000005fb: 	callq	_ZdlPvm@PLT # Offset: 1531
.Ltmp1890:
    00000600: 	movq	0x70(%rsp), %rdi
    00000605: 	cmpq	0x10(%rsp), %rdi
    0000060a: 	je	.Ltmp1891 # Offset: 1546
    0000060c: 	movq	0x80(%rsp), %rax
    00000614: 	leaq	0x1(%rax), %rsi
    00000618: 	callq	_ZdlPvm@PLT # Offset: 1560
.Ltmp1891:
    0000061d: 	movq	0x8(%rsp), %rsi
    00000622: 	leaq	DATAat0x32408(%rip), %rdx
    00000629: 	movq	%r15, %rdi
    0000062c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1580
    00000631: 	callq	clock@PLT # Offset: 1585
    00000636: 	movl	iterations(%rip), %ecx
    0000063c: 	xorl	%ebx, %ebx
    0000063e: 	leaq	DATAat0x321c8(%rip), %r14
    00000645: 	movq	%rax, start_time(%rip)
    0000064c: 	testl	%ecx, %ecx
    0000064e: 	jle	.Ltmp1892 # Offset: 1614
    00000654: 	nopl	(%rax) # Size: 4
.Ltmp1895:
    00000658: 	xorl	%eax, %eax
    0000065a: 	pxor	%xmm2, %xmm2
    0000065e: 	nop # Size: 2
.Ltmp1893:
    00000660: 	movdqa	(%rbp,%rax), %xmm0
    00000666: 	pmullw	(%r12,%rax), %xmm0
    0000066c: 	movdqa	%xmm0, %xmm3
    00000670: 	movdqa	(%rbp,%rax), %xmm1
    00000676: 	pmulhuw	(%r12,%rax), %xmm1
    0000067c: 	punpckhwd	%xmm1, %xmm3
    00000680: 	punpcklwd	%xmm1, %xmm0
    00000684: 	addq	$0x10, %rax
    00000688: 	paddd	%xmm3, %xmm0
    0000068c: 	paddd	%xmm0, %xmm2
    00000690: 	cmpq	$0x3e80, %rax
    00000696: 	jne	.Ltmp1893 # Offset: 1686
    00000698: 	movl	init_value(%rip), %edx
    0000069e: 	movdqa	%xmm2, %xmm0
    000006a2: 	psrldq	$0x8, %xmm0
    000006a7: 	imull	%edx, %edx
    000006aa: 	paddd	%xmm0, %xmm2
    000006ae: 	movdqa	%xmm2, %xmm0
    000006b2: 	psrldq	$0x4, %xmm0
    000006b7: 	imulw	$0x1f40, %dx, %dx
    000006bc: 	paddd	%xmm0, %xmm2
    000006c0: 	movd	%xmm2, %eax
    000006c4: 	movzwl	%ax, %eax
    000006c7: 	movzwl	%dx, %edx
    000006ca: 	cmpl	%edx, %eax
    000006cc: 	jne	.Ltmp1894 # Offset: 1740
.Ltmp1972:
    000006d2: 	addl	$0x1, %ebx
    000006d5: 	cmpl	%ecx, %ebx
    000006d7: 	jl	.Ltmp1895 # Offset: 1751
.Ltmp1892:
    000006dd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000006e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000006eb: 	subq	$0x20, %rax
    000006ef: 	cmpq	%rax, %rbx
    000006f2: 	je	.Ltmp1896 # Offset: 1778
    000006f8: 	leaq	0x10(%rbx), %rdi
    000006fc: 	movq	0x98(%rsp), %r14
    00000704: 	movq	%rdi, (%rbx)
    00000707: 	movq	0x90(%rsp), %rax
    0000070f: 	movq	%rax, %rsi
    00000712: 	movq	%rax, 0x28(%rsp)
    00000717: 	addq	%r14, %rsi
    0000071a: 	je	.Ltmp1897 # Offset: 1818
    0000071c: 	testq	%rax, %rax
    0000071f: 	je	.Ltmp1898 # Offset: 1823
.Ltmp1897:
    00000725: 	movq	%r14, 0x30(%rsp)
    0000072a: 	cmpq	$0xf, %r14
    0000072e: 	ja	.Ltmp1899 # Offset: 1838
    00000734: 	cmpq	$0x1, %r14
    00000738: 	jne	.Ltmp1900 # Offset: 1848
    0000073e: 	movq	0x28(%rsp), %rax
    00000743: 	movzbl	(%rax), %eax
    00000746: 	movb	%al, 0x10(%rbx)
.Ltmp1997:
    00000749: 	movq	%r14, 0x8(%rbx)
    0000074d: 	movb	$0x0, (%rdi,%r14)
    00000752: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000759: 	addq	$0x20, %rax
    0000075d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1975:
    00000764: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000076b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000772: 	je	.Ltmp1901 # Offset: 1906
.Ltmp1974:
    00000778: 	movq	-0x20(%rax), %r14
    0000077c: 	callq	clock@PLT # Offset: 1916
    00000781: 	pxor	%xmm0, %xmm0
    00000785: 	movq	%rax, end_time(%rip)
    0000078c: 	movq	%r14, %rdi
    0000078f: 	subq	start_time(%rip), %rax
    00000796: 	cvtsi2sd	%rax, %xmm0
    0000079b: 	divsd	DATAat0x32600(%rip), %xmm0
    000007a3: 	callq	_Z13record_resultdPKc # Offset: 1955
    000007a8: 	movq	0x90(%rsp), %rdi
    000007b0: 	cmpq	(%rsp), %rdi
    000007b4: 	je	.Ltmp1902 # Offset: 1972
    000007b6: 	movq	0xa0(%rsp), %rax
    000007be: 	leaq	0x1(%rax), %rsi
    000007c2: 	callq	_ZdlPvm@PLT # Offset: 1986
.Ltmp1902:
    000007c7: 	movq	0x8(%rsp), %rsi
    000007cc: 	leaq	DATAat0x32424(%rip), %rdx
    000007d3: 	movq	%r15, %rdi
    000007d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2006
    000007db: 	callq	clock@PLT # Offset: 2011
    000007e0: 	movl	iterations(%rip), %ecx
    000007e6: 	xorl	%ebx, %ebx
    000007e8: 	leaq	DATAat0x321c8(%rip), %r14
    000007ef: 	movq	%rax, start_time(%rip)
    000007f6: 	testl	%ecx, %ecx
    000007f8: 	jle	.Ltmp1903 # Offset: 2040
    000007fe: 	nop # Size: 2
.Ltmp1906:
    00000800: 	xorl	%eax, %eax
    00000802: 	pxor	%xmm3, %xmm3
    00000806: 	pxor	%xmm4, %xmm4
    0000080a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1904:
    00000810: 	movdqa	(%rbp,%rax), %xmm0
    00000816: 	pmullw	(%r12,%rax), %xmm0
    0000081c: 	movdqa	%xmm0, %xmm1
    00000820: 	movdqa	(%rbp,%rax), %xmm2
    00000826: 	pmulhuw	(%r12,%rax), %xmm2
    0000082c: 	punpcklwd	%xmm2, %xmm1
    00000830: 	punpckhwd	%xmm2, %xmm0
    00000834: 	movdqa	%xmm4, %xmm2
    00000838: 	pcmpgtd	%xmm1, %xmm2
    0000083c: 	movdqa	%xmm1, %xmm5
    00000840: 	addq	$0x10, %rax
    00000844: 	punpckhdq	%xmm2, %xmm5
    00000848: 	punpckldq	%xmm2, %xmm1
    0000084c: 	movdqa	%xmm4, %xmm2
    00000850: 	pcmpgtd	%xmm0, %xmm2
    00000854: 	paddq	%xmm5, %xmm1
    00000858: 	movdqa	%xmm0, %xmm5
    0000085c: 	punpckhdq	%xmm2, %xmm5
    00000860: 	punpckldq	%xmm2, %xmm0
    00000864: 	paddq	%xmm5, %xmm0
    00000868: 	paddq	%xmm0, %xmm1
    0000086c: 	paddq	%xmm1, %xmm3
    00000870: 	cmpq	$0x3e80, %rax
    00000876: 	jne	.Ltmp1904 # Offset: 2166
    00000878: 	movl	init_value(%rip), %edx
    0000087e: 	movdqa	%xmm3, %xmm0
    00000882: 	psrldq	$0x8, %xmm0
    00000887: 	imull	%edx, %edx
    0000088a: 	paddq	%xmm0, %xmm3
    0000088e: 	movq	%xmm3, %rax
    00000893: 	imulw	$0x1f40, %dx, %dx
    00000898: 	cmpw	%ax, %dx
    0000089b: 	jne	.Ltmp1905 # Offset: 2203
.Ltmp1971:
    000008a1: 	addl	$0x1, %ebx
    000008a4: 	cmpl	%ecx, %ebx
    000008a6: 	jl	.Ltmp1906 # Offset: 2214
.Ltmp1903:
    000008ac: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000008b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000008ba: 	subq	$0x20, %rax
    000008be: 	cmpq	%rax, %rbx
    000008c1: 	je	.Ltmp1907 # Offset: 2241
    000008c7: 	leaq	0x10(%rbx), %rdi
    000008cb: 	movq	0x98(%rsp), %r14
    000008d3: 	movq	%rdi, (%rbx)
    000008d6: 	movq	0x90(%rsp), %rax
    000008de: 	movq	%rax, %rsi
    000008e1: 	movq	%rax, 0x28(%rsp)
    000008e6: 	addq	%r14, %rsi
    000008e9: 	je	.Ltmp1908 # Offset: 2281
    000008eb: 	testq	%rax, %rax
    000008ee: 	je	.Ltmp1909 # Offset: 2286
.Ltmp1908:
    000008f4: 	movq	%r14, 0x30(%rsp)
    000008f9: 	cmpq	$0xf, %r14
    000008fd: 	ja	.Ltmp1910 # Offset: 2301
    00000903: 	cmpq	$0x1, %r14
    00000907: 	jne	.Ltmp1911 # Offset: 2311
    0000090d: 	movq	0x28(%rsp), %rax
    00000912: 	movzbl	(%rax), %eax
    00000915: 	movb	%al, 0x10(%rbx)
.Ltmp1998:
    00000918: 	movq	%r14, 0x8(%rbx)
    0000091c: 	movb	$0x0, (%rdi,%r14)
    00000921: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000928: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000092f: 	addq	$0x20, %rax
    00000933: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000093a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000941: 	je	.Ltmp1912 # Offset: 2369
.Ltmp1973:
    00000947: 	movq	-0x20(%rax), %r14
    0000094b: 	callq	clock@PLT # Offset: 2379
    00000950: 	pxor	%xmm0, %xmm0
    00000954: 	movq	%rax, end_time(%rip)
    0000095b: 	movq	%r14, %rdi
    0000095e: 	subq	start_time(%rip), %rax
    00000965: 	cvtsi2sd	%rax, %xmm0
    0000096a: 	divsd	DATAat0x32600(%rip), %xmm0
    00000972: 	callq	_Z13record_resultdPKc # Offset: 2418
    00000977: 	movq	0x90(%rsp), %rdi
    0000097f: 	cmpq	(%rsp), %rdi
    00000983: 	je	.Ltmp1913 # Offset: 2435
    00000985: 	movq	0xa0(%rsp), %rax
    0000098d: 	leaq	0x1(%rax), %rsi
    00000991: 	callq	_ZdlPvm@PLT # Offset: 2449
.Ltmp1913:
    00000996: 	movq	0x8(%rsp), %rsi
    0000099b: 	leaq	DATAat0x32204(%rip), %rdx
    000009a2: 	movq	%r13, %rdi
    000009a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2469
    000009aa: 	movq	0x58(%rsp), %rdx
    000009af: 	movq	0x50(%rsp), %rsi
    000009b4: 	movq	%r13, %rdi
    000009b7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2487
    000009bc: 	movq	(%rsp), %rsi
    000009c0: 	leaq	0x10(%rax), %rdx
    000009c4: 	movq	%rsi, 0x90(%rsp)
    000009cc: 	movq	(%rax), %rcx
    000009cf: 	cmpq	%rdx, %rcx
    000009d2: 	je	.Ltmp1914 # Offset: 2514
    000009d8: 	movq	%rcx, 0x90(%rsp)
    000009e0: 	movq	0x10(%rax), %rcx
    000009e4: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1982:
    000009ec: 	movq	0x8(%rax), %rcx
    000009f0: 	movq	%r15, %r8
    000009f3: 	movq	%rbp, %rsi
    000009f6: 	movq	%r12, %rdi
    000009f9: 	movq	%rcx, 0x98(%rsp)
    00000a01: 	leaq	_Z14inner_product2IPKttET0_T_S3_m(%rip), %rcx
    00000a08: 	movq	%rdx, (%rax)
    00000a0b: 	movl	$0x1f40, %edx
    00000a10: 	movq	$0x0, 0x8(%rax)
    00000a18: 	movb	$0x0, 0x10(%rax)
    00000a1c: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2588
    00000a21: 	movq	0x90(%rsp), %rdi
    00000a29: 	cmpq	(%rsp), %rdi
    00000a2d: 	je	.Ltmp1915 # Offset: 2605
    00000a2f: 	movq	0xa0(%rsp), %rax
    00000a37: 	leaq	0x1(%rax), %rsi
    00000a3b: 	callq	_ZdlPvm@PLT # Offset: 2619
.Ltmp1915:
    00000a40: 	movq	0x70(%rsp), %rdi
    00000a45: 	cmpq	0x10(%rsp), %rdi
    00000a4a: 	je	.Ltmp1916 # Offset: 2634
    00000a4c: 	movq	0x80(%rsp), %rax
    00000a54: 	leaq	0x1(%rax), %rsi
    00000a58: 	callq	_ZdlPvm@PLT # Offset: 2648
.Ltmp1916:
    00000a5d: 	movq	0x8(%rsp), %rsi
    00000a62: 	leaq	DATAat0x32440(%rip), %rdx
    00000a69: 	movq	%r15, %rdi
    00000a6c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2668
    00000a71: 	callq	clock@PLT # Offset: 2673
    00000a76: 	movl	iterations(%rip), %ecx
    00000a7c: 	xorl	%ebx, %ebx
    00000a7e: 	leaq	DATAat0x321c8(%rip), %r14
    00000a85: 	movq	%rax, start_time(%rip)
    00000a8c: 	testl	%ecx, %ecx
    00000a8e: 	jle	.Ltmp1917 # Offset: 2702
    00000a94: 	nopl	(%rax) # Size: 4
.Ltmp1920:
    00000a98: 	xorl	%eax, %eax
    00000a9a: 	pxor	%xmm2, %xmm2
    00000a9e: 	nop # Size: 2
.Ltmp1918:
    00000aa0: 	movdqa	(%rbp,%rax), %xmm0
    00000aa6: 	pmullw	(%r12,%rax), %xmm0
    00000aac: 	movdqa	%xmm0, %xmm3
    00000ab0: 	movdqa	(%rbp,%rax), %xmm1
    00000ab6: 	pmulhuw	(%r12,%rax), %xmm1
    00000abc: 	punpckhwd	%xmm1, %xmm3
    00000ac0: 	punpcklwd	%xmm1, %xmm0
    00000ac4: 	addq	$0x10, %rax
    00000ac8: 	paddd	%xmm3, %xmm0
    00000acc: 	paddd	%xmm0, %xmm2
    00000ad0: 	cmpq	$0x3e80, %rax
    00000ad6: 	jne	.Ltmp1918 # Offset: 2774
    00000ad8: 	movl	init_value(%rip), %eax
    00000ade: 	movdqa	%xmm2, %xmm0
    00000ae2: 	psrldq	$0x8, %xmm0
    00000ae7: 	imull	%eax, %eax
    00000aea: 	paddd	%xmm0, %xmm2
    00000aee: 	movdqa	%xmm2, %xmm0
    00000af2: 	psrldq	$0x4, %xmm0
    00000af7: 	imulw	$0x1f40, %ax, %dx
    00000afc: 	paddd	%xmm0, %xmm2
    00000b00: 	movd	%xmm2, %eax
    00000b04: 	movzwl	%ax, %eax
    00000b07: 	movzwl	%dx, %edx
    00000b0a: 	cmpl	%eax, %edx
    00000b0c: 	jne	.Ltmp1919 # Offset: 2828
.Ltmp1970:
    00000b12: 	addl	$0x1, %ebx
    00000b15: 	cmpl	%ecx, %ebx
    00000b17: 	jl	.Ltmp1920 # Offset: 2839
.Ltmp1917:
    00000b1d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000b24: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000b2b: 	subq	$0x20, %rax
    00000b2f: 	cmpq	%rax, %rbx
    00000b32: 	je	.Ltmp1921 # Offset: 2866
    00000b38: 	leaq	0x10(%rbx), %rdi
    00000b3c: 	movq	0x98(%rsp), %r14
    00000b44: 	movq	%rdi, (%rbx)
    00000b47: 	movq	0x90(%rsp), %rax
    00000b4f: 	movq	%rax, %rsi
    00000b52: 	movq	%rax, 0x28(%rsp)
    00000b57: 	addq	%r14, %rsi
    00000b5a: 	je	.Ltmp1922 # Offset: 2906
    00000b5c: 	testq	%rax, %rax
    00000b5f: 	je	.Ltmp1923 # Offset: 2911
.Ltmp1922:
    00000b65: 	movq	%r14, 0x30(%rsp)
    00000b6a: 	cmpq	$0xf, %r14
    00000b6e: 	ja	.Ltmp1924 # Offset: 2926
    00000b74: 	cmpq	$0x1, %r14
    00000b78: 	jne	.Ltmp1925 # Offset: 2936
    00000b7e: 	movq	0x28(%rsp), %rax
    00000b83: 	movzbl	(%rax), %eax
    00000b86: 	movb	%al, 0x10(%rbx)
.Ltmp1995:
    00000b89: 	movq	%r14, 0x8(%rbx)
    00000b8d: 	movb	$0x0, (%rdi,%r14)
    00000b92: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b99: 	addq	$0x20, %rax
    00000b9d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp1984:
    00000ba4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000bab: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bb2: 	je	.Ltmp1926 # Offset: 2994
.Ltmp1983:
    00000bb8: 	movq	-0x20(%rax), %r14
    00000bbc: 	callq	clock@PLT # Offset: 3004
    00000bc1: 	pxor	%xmm0, %xmm0
    00000bc5: 	movq	%rax, end_time(%rip)
    00000bcc: 	movq	%r14, %rdi
    00000bcf: 	subq	start_time(%rip), %rax
    00000bd6: 	cvtsi2sd	%rax, %xmm0
    00000bdb: 	divsd	DATAat0x32600(%rip), %xmm0
    00000be3: 	callq	_Z13record_resultdPKc # Offset: 3043
    00000be8: 	movq	0x90(%rsp), %rdi
    00000bf0: 	cmpq	(%rsp), %rdi
    00000bf4: 	je	.Ltmp1927 # Offset: 3060
    00000bf6: 	movq	0xa0(%rsp), %rax
    00000bfe: 	leaq	0x1(%rax), %rsi
    00000c02: 	callq	_ZdlPvm@PLT # Offset: 3074
.Ltmp1927:
    00000c07: 	movq	0x8(%rsp), %rsi
    00000c0c: 	leaq	DATAat0x3245c(%rip), %rdx
    00000c13: 	movq	%r15, %rdi
    00000c16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3094
    00000c1b: 	callq	clock@PLT # Offset: 3099
    00000c20: 	movl	iterations(%rip), %ecx
    00000c26: 	xorl	%ebx, %ebx
    00000c28: 	leaq	DATAat0x321c8(%rip), %r14
    00000c2f: 	movq	%rax, start_time(%rip)
    00000c36: 	testl	%ecx, %ecx
    00000c38: 	jle	.Ltmp1928 # Offset: 3128
    00000c3e: 	nop # Size: 2
.Ltmp1931:
    00000c40: 	xorl	%eax, %eax
    00000c42: 	pxor	%xmm3, %xmm3
    00000c46: 	pxor	%xmm4, %xmm4
    00000c4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1929:
    00000c50: 	movdqa	(%rbp,%rax), %xmm0
    00000c56: 	pmullw	(%r12,%rax), %xmm0
    00000c5c: 	movdqa	%xmm0, %xmm1
    00000c60: 	movdqa	(%rbp,%rax), %xmm2
    00000c66: 	pmulhuw	(%r12,%rax), %xmm2
    00000c6c: 	punpcklwd	%xmm2, %xmm1
    00000c70: 	punpckhwd	%xmm2, %xmm0
    00000c74: 	movdqa	%xmm4, %xmm2
    00000c78: 	pcmpgtd	%xmm1, %xmm2
    00000c7c: 	movdqa	%xmm1, %xmm5
    00000c80: 	addq	$0x10, %rax
    00000c84: 	punpckhdq	%xmm2, %xmm5
    00000c88: 	punpckldq	%xmm2, %xmm1
    00000c8c: 	movdqa	%xmm4, %xmm2
    00000c90: 	pcmpgtd	%xmm0, %xmm2
    00000c94: 	paddq	%xmm5, %xmm1
    00000c98: 	movdqa	%xmm0, %xmm5
    00000c9c: 	punpckhdq	%xmm2, %xmm5
    00000ca0: 	punpckldq	%xmm2, %xmm0
    00000ca4: 	paddq	%xmm5, %xmm0
    00000ca8: 	paddq	%xmm0, %xmm1
    00000cac: 	paddq	%xmm1, %xmm3
    00000cb0: 	cmpq	$0x3e80, %rax
    00000cb6: 	jne	.Ltmp1929 # Offset: 3254
    00000cb8: 	movl	init_value(%rip), %edx
    00000cbe: 	movdqa	%xmm3, %xmm0
    00000cc2: 	psrldq	$0x8, %xmm0
    00000cc7: 	imull	%edx, %edx
    00000cca: 	paddq	%xmm0, %xmm3
    00000cce: 	movq	%xmm3, %rax
    00000cd3: 	imulw	$0x1f40, %dx, %dx
    00000cd8: 	cmpw	%ax, %dx
    00000cdb: 	jne	.Ltmp1930 # Offset: 3291
.Ltmp1968:
    00000ce1: 	addl	$0x1, %ebx
    00000ce4: 	cmpl	%ecx, %ebx
    00000ce6: 	jl	.Ltmp1931 # Offset: 3302
.Ltmp1928:
    00000cec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000cf3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000cfa: 	subq	$0x20, %rax
    00000cfe: 	cmpq	%rax, %rbx
    00000d01: 	je	.Ltmp1932 # Offset: 3329
    00000d07: 	leaq	0x10(%rbx), %rdi
    00000d0b: 	movq	0x98(%rsp), %r14
    00000d13: 	movq	%rdi, (%rbx)
    00000d16: 	movq	0x90(%rsp), %rax
    00000d1e: 	movq	%rax, %rsi
    00000d21: 	movq	%rax, 0x28(%rsp)
    00000d26: 	addq	%r14, %rsi
    00000d29: 	je	.Ltmp1933 # Offset: 3369
    00000d2b: 	testq	%rax, %rax
    00000d2e: 	je	.Ltmp1934 # Offset: 3374
.Ltmp1933:
    00000d34: 	movq	%r14, 0x30(%rsp)
    00000d39: 	cmpq	$0xf, %r14
    00000d3d: 	ja	.Ltmp1935 # Offset: 3389
    00000d43: 	cmpq	$0x1, %r14
    00000d47: 	jne	.Ltmp1936 # Offset: 3399
    00000d4d: 	movq	0x28(%rsp), %rax
    00000d52: 	movzbl	(%rax), %eax
    00000d55: 	movb	%al, 0x10(%rbx)
.Ltmp2000:
    00000d58: 	movq	%r14, 0x8(%rbx)
    00000d5c: 	movb	$0x0, (%rdi,%r14)
    00000d61: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d68: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d6f: 	addq	$0x20, %rax
    00000d73: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000d7a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000d81: 	je	.Ltmp1937 # Offset: 3457
.Ltmp1977:
    00000d87: 	movq	-0x20(%rax), %r14
    00000d8b: 	callq	clock@PLT # Offset: 3467
    00000d90: 	pxor	%xmm0, %xmm0
    00000d94: 	movq	%rax, end_time(%rip)
    00000d9b: 	movq	%r14, %rdi
    00000d9e: 	subq	start_time(%rip), %rax
    00000da5: 	cvtsi2sd	%rax, %xmm0
    00000daa: 	divsd	DATAat0x32600(%rip), %xmm0
    00000db2: 	callq	_Z13record_resultdPKc # Offset: 3506
    00000db7: 	movq	0x90(%rsp), %rdi
    00000dbf: 	cmpq	(%rsp), %rdi
    00000dc3: 	je	.Ltmp1938 # Offset: 3523
    00000dc5: 	movq	0xa0(%rsp), %rax
    00000dcd: 	leaq	0x1(%rax), %rsi
    00000dd1: 	callq	_ZdlPvm@PLT # Offset: 3537
.Ltmp1938:
    00000dd6: 	movq	0x8(%rsp), %rsi
    00000ddb: 	leaq	DATAat0x32218(%rip), %rdx
    00000de2: 	movq	%r13, %rdi
    00000de5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3557
    00000dea: 	movq	0x58(%rsp), %rdx
    00000def: 	movq	0x50(%rsp), %rsi
    00000df4: 	movq	%r13, %rdi
    00000df7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3575
    00000dfc: 	movq	(%rsp), %rsi
    00000e00: 	leaq	0x10(%rax), %rdx
    00000e04: 	movq	%rsi, 0x90(%rsp)
    00000e0c: 	movq	(%rax), %rcx
    00000e0f: 	cmpq	%rdx, %rcx
    00000e12: 	je	.Ltmp1939 # Offset: 3602
    00000e18: 	movq	%rcx, 0x90(%rsp)
    00000e20: 	movq	0x10(%rax), %rcx
    00000e24: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1980:
    00000e2c: 	movq	0x8(%rax), %rcx
    00000e30: 	movq	%r15, %r8
    00000e33: 	movq	%rbp, %rsi
    00000e36: 	movq	%r12, %rdi
    00000e39: 	movq	%rcx, 0x98(%rsp)
    00000e41: 	leaq	_Z14inner_product3IPKttET0_T_S3_m(%rip), %rcx
    00000e48: 	movq	%rdx, (%rax)
    00000e4b: 	movl	$0x1f40, %edx
    00000e50: 	movq	$0x0, 0x8(%rax)
    00000e58: 	movb	$0x0, 0x10(%rax)
    00000e5c: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3676
    00000e61: 	movq	0x90(%rsp), %rdi
    00000e69: 	cmpq	(%rsp), %rdi
    00000e6d: 	je	.Ltmp1940 # Offset: 3693
    00000e6f: 	movq	0xa0(%rsp), %rax
    00000e77: 	leaq	0x1(%rax), %rsi
    00000e7b: 	callq	_ZdlPvm@PLT # Offset: 3707
.Ltmp1940:
    00000e80: 	movq	0x70(%rsp), %rdi
    00000e85: 	cmpq	0x10(%rsp), %rdi
    00000e8a: 	je	.Ltmp1941 # Offset: 3722
    00000e8c: 	movq	0x80(%rsp), %rax
    00000e94: 	leaq	0x1(%rax), %rsi
    00000e98: 	callq	_ZdlPvm@PLT # Offset: 3736
.Ltmp1941:
    00000e9d: 	movq	0x8(%rsp), %rsi
    00000ea2: 	leaq	DATAat0x3222c(%rip), %rdx
    00000ea9: 	movq	%r13, %rdi
    00000eac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3756
    00000eb1: 	movq	0x58(%rsp), %rdx
    00000eb6: 	movq	0x50(%rsp), %rsi
    00000ebb: 	movq	%r13, %rdi
    00000ebe: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3774
    00000ec3: 	movq	(%rsp), %rsi
    00000ec7: 	leaq	0x10(%rax), %rdx
    00000ecb: 	movq	%rsi, 0x90(%rsp)
    00000ed3: 	movq	(%rax), %rcx
    00000ed6: 	cmpq	%rdx, %rcx
    00000ed9: 	je	.Ltmp1942 # Offset: 3801
    00000edf: 	movq	%rcx, 0x90(%rsp)
    00000ee7: 	movq	0x10(%rax), %rcx
    00000eeb: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1979:
    00000ef3: 	movq	0x8(%rax), %rcx
    00000ef7: 	movq	%r15, %r8
    00000efa: 	movq	%rbp, %rsi
    00000efd: 	movq	%r12, %rdi
    00000f00: 	movq	%rcx, 0x98(%rsp)
    00000f08: 	leaq	_Z14inner_product4IPKttET0_T_S3_m(%rip), %rcx
    00000f0f: 	movq	%rdx, (%rax)
    00000f12: 	movl	$0x1f40, %edx
    00000f17: 	movq	$0x0, 0x8(%rax)
    00000f1f: 	movb	$0x0, 0x10(%rax)
    00000f23: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3875
    00000f28: 	movq	0x90(%rsp), %rdi
    00000f30: 	cmpq	(%rsp), %rdi
    00000f34: 	je	.Ltmp1943 # Offset: 3892
    00000f36: 	movq	0xa0(%rsp), %rax
    00000f3e: 	leaq	0x1(%rax), %rsi
    00000f42: 	callq	_ZdlPvm@PLT # Offset: 3906
.Ltmp1943:
    00000f47: 	movq	0x70(%rsp), %rdi
    00000f4c: 	cmpq	0x10(%rsp), %rdi
    00000f51: 	je	.Ltmp1944 # Offset: 3921
    00000f53: 	movq	0x80(%rsp), %rax
    00000f5b: 	leaq	0x1(%rax), %rsi
    00000f5f: 	callq	_ZdlPvm@PLT # Offset: 3935
.Ltmp1944:
    00000f64: 	movq	0x8(%rsp), %rsi
    00000f69: 	leaq	DATAat0x32240(%rip), %rdx
    00000f70: 	movq	%r13, %rdi
    00000f73: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3955
    00000f78: 	movq	0x58(%rsp), %rdx
    00000f7d: 	movq	0x50(%rsp), %rsi
    00000f82: 	movq	%r13, %rdi
    00000f85: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3973
    00000f8a: 	movq	(%rsp), %rsi
    00000f8e: 	leaq	0x10(%rax), %rdx
    00000f92: 	movq	%rsi, 0x90(%rsp)
    00000f9a: 	movq	(%rax), %rcx
    00000f9d: 	cmpq	%rdx, %rcx
    00000fa0: 	je	.Ltmp1945 # Offset: 4000
    00000fa6: 	movq	%rcx, 0x90(%rsp)
    00000fae: 	movq	0x10(%rax), %rcx
    00000fb2: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1978:
    00000fba: 	movq	0x8(%rax), %rcx
    00000fbe: 	movq	%r15, %r8
    00000fc1: 	movq	%rbp, %rsi
    00000fc4: 	movq	%r12, %rdi
    00000fc7: 	movq	%rcx, 0x98(%rsp)
    00000fcf: 	leaq	_Z14inner_product5IPKttET0_T_S3_m(%rip), %rcx
    00000fd6: 	movq	%rdx, (%rax)
    00000fd9: 	movl	$0x1f40, %edx
    00000fde: 	movq	$0x0, 0x8(%rax)
    00000fe6: 	movb	$0x0, 0x10(%rax)
    00000fea: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4074
    00000fef: 	movq	0x90(%rsp), %rdi
    00000ff7: 	cmpq	(%rsp), %rdi
    00000ffb: 	je	.Ltmp1946 # Offset: 4091
    00000ffd: 	movq	0xa0(%rsp), %rax
    00001005: 	leaq	0x1(%rax), %rsi
    00001009: 	callq	_ZdlPvm@PLT # Offset: 4105
.Ltmp1946:
    0000100e: 	movq	0x70(%rsp), %rdi
    00001013: 	cmpq	0x10(%rsp), %rdi
    00001018: 	je	.Ltmp1947 # Offset: 4120
    0000101a: 	movq	0x80(%rsp), %rax
    00001022: 	leaq	0x1(%rax), %rsi
    00001026: 	callq	_ZdlPvm@PLT # Offset: 4134
.Ltmp1947:
    0000102b: 	movq	0x8(%rsp), %rsi
    00001030: 	leaq	DATAat0x32254(%rip), %rdx
    00001037: 	movq	%r13, %rdi
    0000103a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4154
    0000103f: 	movq	0x58(%rsp), %rdx
    00001044: 	movq	0x50(%rsp), %rsi
    00001049: 	movq	%r13, %rdi
    0000104c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4172
    00001051: 	movq	(%rsp), %rsi
    00001055: 	leaq	0x10(%rax), %rdx
    00001059: 	movq	%rsi, 0x90(%rsp)
    00001061: 	movq	(%rax), %rcx
    00001064: 	cmpq	%rdx, %rcx
    00001067: 	je	.Ltmp1948 # Offset: 4199
    0000106d: 	movq	%rcx, 0x90(%rsp)
    00001075: 	movq	0x10(%rax), %rcx
    00001079: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1990:
    00001081: 	movq	0x8(%rax), %rcx
    00001085: 	movq	%r15, %r8
    00001088: 	movq	%rbp, %rsi
    0000108b: 	movq	%r12, %rdi
    0000108e: 	movq	%rcx, 0x98(%rsp)
    00001096: 	leaq	_Z14inner_product6IPKttET0_T_S3_m(%rip), %rcx
    0000109d: 	movq	%rdx, (%rax)
    000010a0: 	movl	$0x1f40, %edx
    000010a5: 	movq	$0x0, 0x8(%rax)
    000010ad: 	movb	$0x0, 0x10(%rax)
    000010b1: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4273
    000010b6: 	movq	0x90(%rsp), %rdi
    000010be: 	cmpq	(%rsp), %rdi
    000010c2: 	je	.Ltmp1949 # Offset: 4290
    000010c4: 	movq	0xa0(%rsp), %rax
    000010cc: 	leaq	0x1(%rax), %rsi
    000010d0: 	callq	_ZdlPvm@PLT # Offset: 4304
.Ltmp1949:
    000010d5: 	movq	0x70(%rsp), %rdi
    000010da: 	cmpq	0x10(%rsp), %rdi
    000010df: 	je	.Ltmp1950 # Offset: 4319
    000010e1: 	movq	0x80(%rsp), %rax
    000010e9: 	leaq	0x1(%rax), %rsi
    000010ed: 	callq	_ZdlPvm@PLT # Offset: 4333
.Ltmp1950:
    000010f2: 	movq	0x8(%rsp), %rsi
    000010f7: 	leaq	DATAat0x32268(%rip), %rdx
    000010fe: 	movq	%r13, %rdi
    00001101: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4353
    00001106: 	movq	0x58(%rsp), %rdx
    0000110b: 	movq	0x50(%rsp), %rsi
    00001110: 	movq	%r13, %rdi
    00001113: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4371
    00001118: 	movq	(%rsp), %rsi
    0000111c: 	leaq	0x10(%rax), %rdx
    00001120: 	movq	%rsi, 0x90(%rsp)
    00001128: 	movq	(%rax), %rcx
    0000112b: 	cmpq	%rdx, %rcx
    0000112e: 	je	.Ltmp1951 # Offset: 4398
    00001134: 	movq	%rcx, 0x90(%rsp)
    0000113c: 	movq	0x10(%rax), %rcx
    00001140: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1989:
    00001148: 	movq	0x8(%rax), %rcx
    0000114c: 	movq	%r15, %r8
    0000114f: 	movq	%rbp, %rsi
    00001152: 	movq	%r12, %rdi
    00001155: 	movq	%rcx, 0x98(%rsp)
    0000115d: 	leaq	_Z14inner_product7IPKttET0_T_S3_m(%rip), %rcx
    00001164: 	movq	%rdx, (%rax)
    00001167: 	movl	$0x1f40, %edx
    0000116c: 	movq	$0x0, 0x8(%rax)
    00001174: 	movb	$0x0, 0x10(%rax)
    00001178: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4472
    0000117d: 	movq	0x90(%rsp), %rdi
    00001185: 	cmpq	(%rsp), %rdi
    00001189: 	je	.Ltmp1952 # Offset: 4489
    0000118b: 	movq	0xa0(%rsp), %rax
    00001193: 	leaq	0x1(%rax), %rsi
    00001197: 	callq	_ZdlPvm@PLT # Offset: 4503
.Ltmp1952:
    0000119c: 	movq	0x70(%rsp), %rdi
    000011a1: 	cmpq	0x10(%rsp), %rdi
    000011a6: 	je	.Ltmp1953 # Offset: 4518
    000011a8: 	movq	0x80(%rsp), %rax
    000011b0: 	leaq	0x1(%rax), %rsi
    000011b4: 	callq	_ZdlPvm@PLT # Offset: 4532
.Ltmp1953:
    000011b9: 	movq	0x8(%rsp), %rsi
    000011be: 	leaq	DATAat0x3227c(%rip), %rdx
    000011c5: 	movq	%r13, %rdi
    000011c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4552
    000011cd: 	movq	0x58(%rsp), %rdx
    000011d2: 	movq	0x50(%rsp), %rsi
    000011d7: 	movq	%r13, %rdi
    000011da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4570
    000011df: 	movq	(%rsp), %rsi
    000011e3: 	leaq	0x10(%rax), %rdx
    000011e7: 	movq	%rsi, 0x90(%rsp)
    000011ef: 	movq	(%rax), %rcx
    000011f2: 	cmpq	%rdx, %rcx
    000011f5: 	je	.Ltmp1954 # Offset: 4597
    000011fb: 	movq	%rcx, 0x90(%rsp)
    00001203: 	movq	0x10(%rax), %rcx
    00001207: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1988:
    0000120f: 	movq	0x8(%rax), %rcx
    00001213: 	movq	%r15, %r8
    00001216: 	movq	%rbp, %rsi
    00001219: 	movq	%r12, %rdi
    0000121c: 	movq	%rcx, 0x98(%rsp)
    00001224: 	leaq	_Z14inner_product8IPKttET0_T_S3_m(%rip), %rcx
    0000122b: 	movq	%rdx, (%rax)
    0000122e: 	movl	$0x1f40, %edx
    00001233: 	movq	$0x0, 0x8(%rax)
    0000123b: 	movb	$0x0, 0x10(%rax)
    0000123f: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4671
    00001244: 	movq	0x90(%rsp), %rdi
    0000124c: 	cmpq	(%rsp), %rdi
    00001250: 	je	.Ltmp1955 # Offset: 4688
    00001252: 	movq	0xa0(%rsp), %rax
    0000125a: 	leaq	0x1(%rax), %rsi
    0000125e: 	callq	_ZdlPvm@PLT # Offset: 4702
.Ltmp1955:
    00001263: 	movq	0x70(%rsp), %rdi
    00001268: 	cmpq	0x10(%rsp), %rdi
    0000126d: 	je	.Ltmp1956 # Offset: 4717
    0000126f: 	movq	0x80(%rsp), %rax
    00001277: 	leaq	0x1(%rax), %rsi
    0000127b: 	callq	_ZdlPvm@PLT # Offset: 4731
.Ltmp1956:
    00001280: 	movq	0x8(%rsp), %rsi
    00001285: 	leaq	DATAat0x32290(%rip), %rdx
    0000128c: 	movq	%r13, %rdi
    0000128f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4751
    00001294: 	movq	0x58(%rsp), %rdx
    00001299: 	movq	0x50(%rsp), %rsi
    0000129e: 	movq	%r13, %rdi
    000012a1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4769
    000012a6: 	movq	(%rsp), %rsi
    000012aa: 	leaq	0x10(%rax), %rdx
    000012ae: 	movq	%rsi, 0x90(%rsp)
    000012b6: 	movq	(%rax), %rcx
    000012b9: 	cmpq	%rdx, %rcx
    000012bc: 	je	.Ltmp1957 # Offset: 4796
    000012c2: 	movq	%rcx, 0x90(%rsp)
    000012ca: 	movq	0x10(%rax), %rcx
    000012ce: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1987:
    000012d6: 	movq	0x8(%rax), %rcx
    000012da: 	movq	%r15, %r8
    000012dd: 	movq	%rbp, %rsi
    000012e0: 	movq	%r12, %rdi
    000012e3: 	movq	%rcx, 0x98(%rsp)
    000012eb: 	leaq	_Z14inner_product9IPKttET0_T_S3_m(%rip), %rcx
    000012f2: 	movq	%rdx, (%rax)
    000012f5: 	movl	$0x1f40, %edx
    000012fa: 	movq	$0x0, 0x8(%rax)
    00001302: 	movb	$0x0, 0x10(%rax)
    00001306: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4870
    0000130b: 	movq	0x90(%rsp), %rdi
    00001313: 	cmpq	(%rsp), %rdi
    00001317: 	je	.Ltmp1958 # Offset: 4887
    00001319: 	movq	0xa0(%rsp), %rax
    00001321: 	leaq	0x1(%rax), %rsi
    00001325: 	callq	_ZdlPvm@PLT # Offset: 4901
.Ltmp1958:
    0000132a: 	movq	0x70(%rsp), %rdi
    0000132f: 	cmpq	0x10(%rsp), %rdi
    00001334: 	je	.Ltmp1959 # Offset: 4916
    00001336: 	movq	0x80(%rsp), %rax
    0000133e: 	leaq	0x1(%rax), %rsi
    00001342: 	callq	_ZdlPvm@PLT # Offset: 4930
.Ltmp1959:
    00001347: 	movq	0x8(%rsp), %rsi
    0000134c: 	leaq	DATAat0x322a4(%rip), %rdx
    00001353: 	movq	%r13, %rdi
    00001356: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4950
    0000135b: 	movq	0x58(%rsp), %rdx
    00001360: 	movq	0x50(%rsp), %rsi
    00001365: 	movq	%r13, %rdi
    00001368: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4968
    0000136d: 	movq	(%rsp), %rsi
    00001371: 	leaq	0x10(%rax), %rdx
    00001375: 	movq	%rsi, 0x90(%rsp)
    0000137d: 	movq	(%rax), %rcx
    00001380: 	cmpq	%rdx, %rcx
    00001383: 	je	.Ltmp1960 # Offset: 4995
    00001389: 	movq	%rcx, 0x90(%rsp)
    00001391: 	movq	0x10(%rax), %rcx
    00001395: 	movq	%rcx, 0xa0(%rsp)
.Ltmp1976:
    0000139d: 	movq	0x8(%rax), %rcx
    000013a1: 	movq	%r15, %r8
    000013a4: 	movq	%rbp, %rsi
    000013a7: 	movq	%r12, %rdi
    000013aa: 	movq	%rcx, 0x98(%rsp)
    000013b2: 	leaq	_Z15inner_product10IPKttET0_T_S3_m(%rip), %rcx
    000013b9: 	movq	%rdx, (%rax)
    000013bc: 	movl	$0x1f40, %edx
    000013c1: 	movq	$0x0, 0x8(%rax)
    000013c9: 	movb	$0x0, 0x10(%rax)
    000013cd: 	callq	_Z18test_inner_productItPFtPKtS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5069
    000013d2: 	movq	0x90(%rsp), %rdi
    000013da: 	cmpq	(%rsp), %rdi
    000013de: 	je	.Ltmp1961 # Offset: 5086
    000013e0: 	movq	0xa0(%rsp), %rax
    000013e8: 	leaq	0x1(%rax), %rsi
    000013ec: 	callq	_ZdlPvm@PLT # Offset: 5100
.Ltmp1961:
    000013f1: 	movq	0x70(%rsp), %rdi
    000013f6: 	cmpq	0x10(%rsp), %rdi
    000013fb: 	je	.Ltmp1962 # Offset: 5115
    000013fd: 	movq	0x80(%rsp), %rax
    00001405: 	leaq	0x1(%rax), %rsi
    00001409: 	callq	_ZdlPvm@PLT # Offset: 5129
.Ltmp1962:
    0000140e: 	movq	0x8(%rsp), %rsi
    00001413: 	leaq	DATAat0x322b9(%rip), %rdx
    0000141a: 	movq	%r15, %rdi
    0000141d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5149
    00001422: 	movl	iterations(%rip), %edx
    00001428: 	xorl	%r8d, %r8d
    0000142b: 	xorl	%ecx, %ecx
    0000142d: 	movl	$0x1f40, %esi
    00001432: 	movq	0x90(%rsp), %rdi
    0000143a: 	callq	_Z9summarizePKciiii # Offset: 5178
    0000143f: 	movq	0x90(%rsp), %rdi
    00001447: 	cmpq	(%rsp), %rdi
    0000144b: 	je	.Ltmp1963 # Offset: 5195
    0000144d: 	movq	0xa0(%rsp), %rax
    00001455: 	leaq	0x1(%rax), %rsi
    00001459: 	callq	_ZdlPvm@PLT # Offset: 5209
.Ltmp1963:
    0000145e: 	movq	0x50(%rsp), %rdi
    00001463: 	cmpq	0x20(%rsp), %rdi
    00001468: 	je	.Ltmp1964 # Offset: 5224
    0000146a: 	movq	0x60(%rsp), %rax
    0000146f: 	leaq	0x1(%rax), %rsi
    00001473: 	callq	_ZdlPvm@PLT # Offset: 5235
.Ltmp1964:
    00001478: 	movq	0x7db8(%rsp), %rax
    00001480: 	subq	%fs:0x28, %rax
    00001489: 	jne	.Ltmp1965 # Offset: 5257
    0000148f: 	addq	$0x7dc8, %rsp
    00001496: 	popq	%rbx
    00001497: 	popq	%rbp
    00001498: 	popq	%r12
    0000149a: 	popq	%r13
    0000149c: 	popq	%r14
    0000149e: 	popq	%r15
    000014a0: 	retq # Offset: 5280
    000014a1: 	nopl	(%rax) # Size: 7
.Ltmp1869:
    000014a8: 	movq	0x90(%rsp), %rdx
    000014b0: 	movq	%r14, %rsi
    000014b3: 	movl	$0x1, %edi
    000014b8: 	xorl	%eax, %eax
    000014ba: 	callq	__printf_chk@PLT # Offset: 5306
    000014bf: 	movl	iterations(%rip), %ecx
    000014c5: 	jmp	.Ltmp1966 # Offset: 5317
.Ltmp1874:
    000014ca: 	movq	0x18(%rsp), %rsi
    000014cf: 	xorl	%edx, %edx
    000014d1: 	movq	%rbx, %rdi
    000014d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5332
    000014d9: 	movq	%rax, (%rbx)
    000014dc: 	movq	%rax, %rdi
    000014df: 	movq	0x30(%rsp), %rax
    000014e4: 	movq	%rax, 0x10(%rbx)
.Ltmp1992:
    000014e8: 	movq	0x28(%rsp), %rsi
    000014ed: 	movq	%r14, %rdx
    000014f0: 	callq	memcpy@PLT # Offset: 5360
    000014f5: 	movq	0x30(%rsp), %r14
    000014fa: 	movq	(%rbx), %rdi
    000014fd: 	jmp	.Ltmp1967 # Offset: 5373
    00001502: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1930:
    00001508: 	movq	0x90(%rsp), %rdx
    00001510: 	movq	%r14, %rsi
    00001513: 	movl	$0x1, %edi
    00001518: 	xorl	%eax, %eax
    0000151a: 	callq	__printf_chk@PLT # Offset: 5402
    0000151f: 	movl	iterations(%rip), %ecx
    00001525: 	jmp	.Ltmp1968 # Offset: 5413
    0000152a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1880:
    00001530: 	movq	0x90(%rsp), %rdx
    00001538: 	movq	%r14, %rsi
    0000153b: 	movl	$0x1, %edi
    00001540: 	xorl	%eax, %eax
    00001542: 	callq	__printf_chk@PLT # Offset: 5442
    00001547: 	movl	iterations(%rip), %ecx
    0000154d: 	jmp	.Ltmp1969 # Offset: 5453
    00001552: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1919:
    00001558: 	movq	0x90(%rsp), %rdx
    00001560: 	movq	%r14, %rsi
    00001563: 	movl	$0x1, %edi
    00001568: 	xorl	%eax, %eax
    0000156a: 	callq	__printf_chk@PLT # Offset: 5482
    0000156f: 	movl	iterations(%rip), %ecx
    00001575: 	jmp	.Ltmp1970 # Offset: 5493
    0000157a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1905:
    00001580: 	movq	0x90(%rsp), %rdx
    00001588: 	movq	%r14, %rsi
    0000158b: 	movl	$0x1, %edi
    00001590: 	xorl	%eax, %eax
    00001592: 	callq	__printf_chk@PLT # Offset: 5522
    00001597: 	movl	iterations(%rip), %ecx
    0000159d: 	jmp	.Ltmp1971 # Offset: 5533
    000015a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1894:
    000015a8: 	movq	0x90(%rsp), %rdx
    000015b0: 	movq	%r14, %rsi
    000015b3: 	movl	$0x1, %edi
    000015b8: 	xorl	%eax, %eax
    000015ba: 	callq	__printf_chk@PLT # Offset: 5562
    000015bf: 	movl	iterations(%rip), %ecx
    000015c5: 	jmp	.Ltmp1972 # Offset: 5573
.Ltmp1907:
    000015ca: 	movq	%r15, %rsi
    000015cd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000015d4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5588
    000015d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000015e0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000015e7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000015ee: 	jne	.Ltmp1973 # Offset: 5614
.Ltmp1912:
    000015f4: 	movq	-0x8(%rdx), %rax
    000015f8: 	addq	$0x200, %rax
    000015fe: 	jmp	.Ltmp1973 # Offset: 5630
.Ltmp1901:
    00001603: 	movq	-0x8(%rdx), %rax
    00001607: 	addq	$0x200, %rax
    0000160d: 	jmp	.Ltmp1974 # Offset: 5645
.Ltmp1896:
    00001612: 	movq	%r15, %rsi
    00001615: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000161c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5660
    00001621: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001628: 	jmp	.Ltmp1975 # Offset: 5672
.Ltmp1960:
    0000162d: 	movdqu	0x10(%rax), %xmm6
    00001632: 	movaps	%xmm6, 0xa0(%rsp)
    0000163a: 	jmp	.Ltmp1976 # Offset: 5690
.Ltmp1932:
    0000163f: 	movq	%r15, %rsi
    00001642: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001649: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5705
    0000164e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001655: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000165c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001663: 	jne	.Ltmp1977 # Offset: 5731
.Ltmp1937:
    00001669: 	movq	-0x8(%rdx), %rax
    0000166d: 	addq	$0x200, %rax
    00001673: 	jmp	.Ltmp1977 # Offset: 5747
.Ltmp1945:
    00001678: 	movdqu	0x10(%rax), %xmm7
    0000167d: 	movaps	%xmm7, 0xa0(%rsp)
    00001685: 	jmp	.Ltmp1978 # Offset: 5765
.Ltmp1942:
    0000168a: 	movdqu	0x10(%rax), %xmm6
    0000168f: 	movaps	%xmm6, 0xa0(%rsp)
    00001697: 	jmp	.Ltmp1979 # Offset: 5783
.Ltmp1939:
    0000169c: 	movdqu	0x10(%rax), %xmm7
    000016a1: 	movaps	%xmm7, 0xa0(%rsp)
    000016a9: 	jmp	.Ltmp1980 # Offset: 5801
.Ltmp1882:
    000016ae: 	movq	%r15, %rsi
    000016b1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016b8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5816
    000016bd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016c4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000016cb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016d2: 	jne	.Ltmp1981 # Offset: 5842
.Ltmp1887:
    000016d8: 	movq	-0x8(%rdx), %rax
    000016dc: 	addq	$0x200, %rax
    000016e2: 	jmp	.Ltmp1981 # Offset: 5858
.Ltmp1914:
    000016e7: 	movdqu	0x10(%rax), %xmm6
    000016ec: 	movaps	%xmm6, 0xa0(%rsp)
    000016f4: 	jmp	.Ltmp1982 # Offset: 5876
.Ltmp1926:
    000016f9: 	movq	-0x8(%rdx), %rax
    000016fd: 	addq	$0x200, %rax
    00001703: 	jmp	.Ltmp1983 # Offset: 5891
.Ltmp1921:
    00001708: 	movq	%r15, %rsi
    0000170b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001712: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5906
    00001717: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000171e: 	jmp	.Ltmp1984 # Offset: 5918
.Ltmp1871:
    00001723: 	movq	%r15, %rsi
    00001726: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000172d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5933
    00001732: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001739: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001740: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001747: 	jne	.Ltmp1985 # Offset: 5959
.Ltmp1876:
    0000174d: 	movq	-0x8(%rdx), %rax
    00001751: 	addq	$0x200, %rax
    00001757: 	jmp	.Ltmp1985 # Offset: 5975
.Ltmp1889:
    0000175c: 	movdqu	0x10(%rax), %xmm7
    00001761: 	movaps	%xmm7, 0xa0(%rsp)
    00001769: 	jmp	.Ltmp1986 # Offset: 5993
.Ltmp1957:
    0000176e: 	movdqu	0x10(%rax), %xmm7
    00001773: 	movaps	%xmm7, 0xa0(%rsp)
    0000177b: 	jmp	.Ltmp1987 # Offset: 6011
.Ltmp1954:
    00001780: 	movdqu	0x10(%rax), %xmm6
    00001785: 	movaps	%xmm6, 0xa0(%rsp)
    0000178d: 	jmp	.Ltmp1988 # Offset: 6029
.Ltmp1951:
    00001792: 	movdqu	0x10(%rax), %xmm7
    00001797: 	movaps	%xmm7, 0xa0(%rsp)
    0000179f: 	jmp	.Ltmp1989 # Offset: 6047
.Ltmp1948:
    000017a4: 	movdqu	0x10(%rax), %xmm6
    000017a9: 	movaps	%xmm6, 0xa0(%rsp)
    000017b1: 	jmp	.Ltmp1990 # Offset: 6065
.Ltmp1864:
    000017b6: 	movdqu	0x10(%rax), %xmm6
    000017bb: 	movaps	%xmm6, 0xa0(%rsp)
    000017c3: 	jmp	.Ltmp1991 # Offset: 6083
.Ltmp1875:
    000017c8: 	testq	%r14, %r14
    000017cb: 	je	.Ltmp1967 # Offset: 6091
    000017d1: 	jmp	.Ltmp1992 # Offset: 6097
    000017d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1886:
    000017e0: 	testq	%r14, %r14
    000017e3: 	je	.Ltmp1993 # Offset: 6115
    000017e9: 	jmp	.Ltmp1994 # Offset: 6121
    000017ee: 	nop # Size: 2
.Ltmp1925:
    000017f0: 	testq	%r14, %r14
    000017f3: 	je	.Ltmp1995 # Offset: 6131
    000017f9: 	jmp	.Ltmp1996 # Offset: 6137
    000017fe: 	nop # Size: 2
.Ltmp1900:
    00001800: 	testq	%r14, %r14
    00001803: 	je	.Ltmp1997 # Offset: 6147
.Ltmp2001:
    00001809: 	movq	0x28(%rsp), %rsi
    0000180e: 	movq	%r14, %rdx
    00001811: 	callq	memcpy@PLT # Offset: 6161
    00001816: 	movq	0x30(%rsp), %r14
    0000181b: 	movq	(%rbx), %rdi
    0000181e: 	jmp	.Ltmp1997 # Offset: 6174
.Ltmp1911:
    00001823: 	testq	%r14, %r14
    00001826: 	je	.Ltmp1998 # Offset: 6182
    0000182c: 	jmp	.Ltmp1999 # Offset: 6188
    00001831: 	nopl	(%rax) # Size: 7
.Ltmp1936:
    00001838: 	testq	%r14, %r14
    0000183b: 	je	.Ltmp2000 # Offset: 6203
.Ltmp2002:
    00001841: 	movq	0x28(%rsp), %rsi
    00001846: 	movq	%r14, %rdx
    00001849: 	callq	memcpy@PLT # Offset: 6217
    0000184e: 	movq	0x30(%rsp), %r14
    00001853: 	movq	(%rbx), %rdi
    00001856: 	jmp	.Ltmp2000 # Offset: 6230
.Ltmp1885:
    0000185b: 	movq	0x18(%rsp), %rsi
    00001860: 	xorl	%edx, %edx
    00001862: 	movq	%rbx, %rdi
    00001865: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6245
    0000186a: 	movq	%rax, (%rbx)
    0000186d: 	movq	%rax, %rdi
    00001870: 	movq	0x30(%rsp), %rax
    00001875: 	movq	%rax, 0x10(%rbx)
.Ltmp1994:
    00001879: 	movq	0x28(%rsp), %rsi
    0000187e: 	movq	%r14, %rdx
    00001881: 	callq	memcpy@PLT # Offset: 6273
    00001886: 	movq	0x30(%rsp), %r14
    0000188b: 	movq	(%rbx), %rdi
    0000188e: 	jmp	.Ltmp1993 # Offset: 6286
.Ltmp1924:
    00001893: 	movq	0x18(%rsp), %rsi
    00001898: 	xorl	%edx, %edx
    0000189a: 	movq	%rbx, %rdi
    0000189d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6301
    000018a2: 	movq	%rax, (%rbx)
    000018a5: 	movq	%rax, %rdi
    000018a8: 	movq	0x30(%rsp), %rax
    000018ad: 	movq	%rax, 0x10(%rbx)
.Ltmp1996:
    000018b1: 	movq	0x28(%rsp), %rsi
    000018b6: 	movq	%r14, %rdx
    000018b9: 	callq	memcpy@PLT # Offset: 6329
    000018be: 	movq	0x30(%rsp), %r14
    000018c3: 	movq	(%rbx), %rdi
    000018c6: 	jmp	.Ltmp1995 # Offset: 6342
.Ltmp1910:
    000018cb: 	movq	0x18(%rsp), %rsi
    000018d0: 	xorl	%edx, %edx
    000018d2: 	movq	%rbx, %rdi
    000018d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6357
    000018da: 	movq	%rax, (%rbx)
    000018dd: 	movq	%rax, %rdi
    000018e0: 	movq	0x30(%rsp), %rax
    000018e5: 	movq	%rax, 0x10(%rbx)
.Ltmp1999:
    000018e9: 	movq	0x28(%rsp), %rsi
    000018ee: 	movq	%r14, %rdx
    000018f1: 	callq	memcpy@PLT # Offset: 6385
    000018f6: 	movq	0x30(%rsp), %r14
    000018fb: 	movq	(%rbx), %rdi
    000018fe: 	jmp	.Ltmp1998 # Offset: 6398
.Ltmp1899:
    00001903: 	movq	0x18(%rsp), %rsi
    00001908: 	xorl	%edx, %edx
    0000190a: 	movq	%rbx, %rdi
    0000190d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6413
    00001912: 	movq	%rax, (%rbx)
    00001915: 	movq	%rax, %rdi
    00001918: 	movq	0x30(%rsp), %rax
    0000191d: 	movq	%rax, 0x10(%rbx)
    00001921: 	jmp	.Ltmp2001 # Offset: 6433
.Ltmp1935:
    00001926: 	movq	0x18(%rsp), %rsi
    0000192b: 	xorl	%edx, %edx
    0000192d: 	movq	%rbx, %rdi
    00001930: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6448
    00001935: 	movq	%rax, (%rbx)
    00001938: 	movq	%rax, %rdi
    0000193b: 	movq	0x30(%rsp), %rax
    00001940: 	movq	%rax, 0x10(%rbx)
    00001944: 	jmp	.Ltmp2002 # Offset: 6468
.Ltmp1884:
    00001949: 	leaq	DATAat0x32158(%rip), %rdi
    00001950: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6480
.Ltmp1898:
    00001955: 	leaq	DATAat0x32158(%rip), %rdi
    0000195c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6492
.Ltmp1909:
    00001961: 	leaq	DATAat0x32158(%rip), %rdi
    00001968: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6504
.Ltmp1923:
    0000196d: 	leaq	DATAat0x32158(%rip), %rdi
    00001974: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6516
.Ltmp1934:
    00001979: 	leaq	DATAat0x32158(%rip), %rdi
    00001980: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6528
.Ltmp1965:
    00001985: 	callq	__stack_chk_fail@PLT # Offset: 6533
.Ltmp1873:
    0000198a: 	leaq	DATAat0x32158(%rip), %rdi
    00001991: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6545
    00001996: 	endbr64
.Ltmp2010:
    0000199a: 	movq	%rax, %rbp
    0000199d: 	jmp	.Ltmp2003 # Offset: 6557
    0000199f: 	endbr64
.Ltmp2008:
    000019a3: 	movq	%rax, %rbp
    000019a6: 	jmp	.Ltmp2004 # Offset: 6566
.Ltmp2003:
    000019a8: 	movq	0x90(%rsp), %rdi
    000019b0: 	cmpq	(%rsp), %rdi
    000019b4: 	je	.Ltmp2005 # Offset: 6580
    000019b6: 	movq	0xa0(%rsp), %rax
    000019be: 	leaq	0x1(%rax), %rsi
    000019c2: 	callq	_ZdlPvm@PLT # Offset: 6594
.Ltmp2005:
    000019c7: 	movq	0x50(%rsp), %rdi
    000019cc: 	cmpq	0x20(%rsp), %rdi
    000019d1: 	je	.Ltmp2006 # Offset: 6609
    000019d3: 	movq	0x60(%rsp), %rax
    000019d8: 	leaq	0x1(%rax), %rsi
    000019dc: 	callq	_ZdlPvm@PLT # Offset: 6620
.Ltmp2006:
    000019e1: 	movq	%rbp, %rdi
    000019e4: 	callq	_Unwind_Resume@PLT # Offset: 6628
.Ltmp2007:
    000019e9: 	movq	0x90(%rsp), %rdi
    000019f1: 	cmpq	(%rsp), %rdi
    000019f5: 	je	.Ltmp2004 # Offset: 6645
    000019f7: 	movq	0xa0(%rsp), %rax
    000019ff: 	leaq	0x1(%rax), %rsi
    00001a03: 	callq	_ZdlPvm@PLT # Offset: 6659
.Ltmp2004:
    00001a08: 	movq	0x70(%rsp), %rdi
    00001a0d: 	cmpq	0x10(%rsp), %rdi
    00001a12: 	je	.Ltmp2005 # Offset: 6674
.Ltmp2012:
    00001a14: 	movq	0x80(%rsp), %rax
    00001a1c: 	leaq	0x1(%rax), %rsi
    00001a20: 	callq	_ZdlPvm@PLT # Offset: 6688
    00001a25: 	jmp	.Ltmp2005 # Offset: 6693
    00001a27: 	endbr64
.Ltmp2009:
    00001a2b: 	movq	%rax, %rbp
    00001a2e: 	jmp	.Ltmp2007 # Offset: 6702
    00001a30: 	endbr64
    00001a34: 	jmp	.Ltmp2008 # Offset: 6708
    00001a39: 	endbr64
    00001a3d: 	jmp	.Ltmp2009 # Offset: 6717
    00001a3f: 	endbr64
    00001a43: 	jmp	.Ltmp2008 # Offset: 6723
    00001a48: 	endbr64
    00001a4c: 	jmp	.Ltmp2009 # Offset: 6732
    00001a4e: 	endbr64
    00001a52: 	jmp	.Ltmp2010 # Offset: 6738
    00001a57: 	endbr64
    00001a5b: 	jmp	.Ltmp2008 # Offset: 6747
    00001a60: 	endbr64
    00001a64: 	jmp	.Ltmp2009 # Offset: 6756
    00001a66: 	endbr64
    00001a6a: 	jmp	.Ltmp2010 # Offset: 6762
    00001a6f: 	endbr64
    00001a73: 	jmp	.Ltmp2009 # Offset: 6771
    00001a75: 	endbr64
    00001a79: 	jmp	.Ltmp2010 # Offset: 6777
    00001a7e: 	endbr64
    00001a82: 	jmp	.Ltmp2010 # Offset: 6786
    00001a87: 	endbr64
    00001a8b: 	jmp	.Ltmp2009 # Offset: 6795
    00001a8d: 	endbr64
    00001a91: 	jmp	.Ltmp2008 # Offset: 6801
    00001a96: 	endbr64
    00001a9a: 	jmp	.Ltmp2009 # Offset: 6810
    00001a9c: 	endbr64
    00001aa0: 	jmp	.Ltmp2008 # Offset: 6816
    00001aa5: 	endbr64
    00001aa9: 	jmp	.Ltmp2009 # Offset: 6825
    00001aab: 	endbr64
    00001aaf: 	jmp	.Ltmp2008 # Offset: 6831
    00001ab4: 	endbr64
    00001ab8: 	jmp	.Ltmp2009 # Offset: 6840
    00001abd: 	endbr64
    00001ac1: 	jmp	.Ltmp2008 # Offset: 6849
    00001ac6: 	endbr64
    00001aca: 	movq	%rax, %rbp
    00001acd: 	jmp	.Ltmp2005 # Offset: 6861
    00001ad2: 	endbr64
    00001ad6: 	jmp	.Ltmp2010 # Offset: 6870
    00001adb: 	endbr64
    00001adf: 	movq	%rax, %rbp
    00001ae2: 	jmp	.Ltmp2011 # Offset: 6882
    00001ae4: 	endbr64
    00001ae8: 	movq	%rax, %rbp
    00001aeb: 	movq	0x90(%rsp), %rdi
    00001af3: 	cmpq	(%rsp), %rdi
    00001af7: 	je	.Ltmp2011 # Offset: 6903
    00001af9: 	movq	0xa0(%rsp), %rax
    00001b01: 	leaq	0x1(%rax), %rsi
    00001b05: 	callq	_ZdlPvm@PLT # Offset: 6917
.Ltmp2011:
    00001b0a: 	movq	0x70(%rsp), %rdi
    00001b0f: 	leaq	0x80(%rsp), %rax
    00001b17: 	cmpq	%rax, %rdi
    00001b1a: 	jne	.Ltmp2012 # Offset: 6938
    00001b20: 	jmp	.Ltmp2005 # Offset: 6944
    00001b25: 	endbr64
    00001b29: 	jmp	.Ltmp2010 # Offset: 6953
    00001b2e: 	endbr64
    00001b32: 	jmp	.Ltmp2009 # Offset: 6962
    00001b37: 	endbr64
    00001b3b: 	jmp	.Ltmp2008 # Offset: 6971
    00001b40: 	endbr64
    00001b44: 	jmp	.Ltmp2008 # Offset: 6980
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvv"

Binary Function "_Z11TestOneTypeIjEvv" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x2b8c0
  Size        : 0x14ac
  MaxSize     : 0x14b0
  Offset      : 0x2b8c0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp2013:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2013 # Offset: 37
    00000027: 	subq	$0xac8, %rsp
    0000002e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm5
    00000036: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0xfab8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movq	$0x8, 0x58(%rsp)
    00000064: 	movq	%rax, 0x18(%rsp)
    00000069: 	leaq	0xb0(%rsp), %r12
    00000071: 	leaq	0x7db0(%rsp), %rbp
    00000079: 	movq	%rax, 0x50(%rsp)
    0000007e: 	movabsq	$0x745f3233746e6975, %rax
    00000088: 	movq	%rax, 0x60(%rsp)
    0000008d: 	movb	$0x0, 0x68(%rsp)
    00000092: 	movq	%rdi, 0x20(%rsp)
    00000097: 	movaps	%xmm5, 0x30(%rsp)
    0000009c: 	movaps	%xmm6, 0x40(%rsp)
    000000a1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 161
    000000a6: 	movd	init_value(%rip), %xmm7
    000000ae: 	movq	%r12, %rax
    000000b1: 	pshufd	$0x0, %xmm7, %xmm0
    000000b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2014:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rbp, %rax
    000000ca: 	jne	.Ltmp2014 # Offset: 202
    000000cc: 	movq	%rbp, %rax
    000000cf: 	leaq	0xfab0(%rsp), %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2015:
    000000e0: 	movaps	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rax, %rdx
    000000ea: 	jne	.Ltmp2015 # Offset: 234
    000000ec: 	leaq	0x50(%rsp), %rax
    000000f1: 	leaq	0x70(%rsp), %r13
    000000f6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%r13, %rdi
    00000103: 	movq	%rax, 0x8(%rsp)
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	movq	0x58(%rsp), %rdx
    00000112: 	movq	0x50(%rsp), %rsi
    00000117: 	movq	%r13, %rdi
    0000011a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 282
    0000011f: 	leaq	0xa0(%rsp), %rsi
    00000127: 	leaq	0x10(%rax), %rdx
    0000012b: 	movq	%rsi, 0x90(%rsp)
    00000133: 	movq	(%rax), %rcx
    00000136: 	movq	%rsi, (%rsp)
    0000013a: 	cmpq	%rdx, %rcx
    0000013d: 	je	.Ltmp2016 # Offset: 317
    00000143: 	movq	%rcx, 0x90(%rsp)
    0000014b: 	movq	0x10(%rax), %rcx
    0000014f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2104:
    00000157: 	movq	0x8(%rax), %rcx
    0000015b: 	leaq	0x90(%rsp), %r14
    00000163: 	movq	%rbp, %rsi
    00000166: 	movq	%r12, %rdi
    00000169: 	movq	%r14, %r8
    0000016c: 	movq	%rcx, 0x98(%rsp)
    00000174: 	leaq	_Z17inner_product_stdIPKjjET0_T_S3_m(%rip), %rcx
    0000017b: 	movq	%rdx, (%rax)
    0000017e: 	movl	$0x1f40, %edx
    00000183: 	movq	$0x0, 0x8(%rax)
    0000018b: 	movb	$0x0, 0x10(%rax)
    0000018f: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 399
    00000194: 	movq	0x90(%rsp), %rdi
    0000019c: 	cmpq	(%rsp), %rdi
    000001a0: 	je	.Ltmp2017 # Offset: 416
    000001a2: 	movq	0xa0(%rsp), %rax
    000001aa: 	leaq	0x1(%rax), %rsi
    000001ae: 	callq	_ZdlPvm@PLT # Offset: 430
.Ltmp2017:
    000001b3: 	movq	0x70(%rsp), %rdi
    000001b8: 	leaq	0x80(%rsp), %rax
    000001c0: 	movq	%rax, 0x10(%rsp)
    000001c5: 	cmpq	%rax, %rdi
    000001c8: 	je	.Ltmp2018 # Offset: 456
    000001ca: 	movq	0x80(%rsp), %rax
    000001d2: 	leaq	0x1(%rax), %rsi
    000001d6: 	callq	_ZdlPvm@PLT # Offset: 470
.Ltmp2018:
    000001db: 	movq	0x8(%rsp), %rsi
    000001e0: 	leaq	DATAat0x323e8(%rip), %rdx
    000001e7: 	movq	%r14, %rdi
    000001ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 490
    000001ef: 	callq	clock@PLT # Offset: 495
    000001f4: 	movl	iterations(%rip), %ecx
    000001fa: 	xorl	%ebx, %ebx
    000001fc: 	leaq	DATAat0x321c8(%rip), %r15
    00000203: 	movq	%rax, start_time(%rip)
    0000020a: 	testl	%ecx, %ecx
    0000020c: 	jle	.Ltmp2019 # Offset: 524
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2022:
    00000218: 	xorl	%eax, %eax
    0000021a: 	pxor	%xmm3, %xmm3
    0000021e: 	pxor	%xmm4, %xmm4
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2020:
    00000228: 	movdqa	(%rbp,%rax), %xmm1
    0000022e: 	movdqa	(%r12,%rax), %xmm2
    00000234: 	movdqa	(%rbp,%rax), %xmm0
    0000023a: 	pmuludq	(%r12,%rax), %xmm0
    00000240: 	addq	$0x10, %rax
    00000244: 	pshufd	$0x8, %xmm0, %xmm0
    00000249: 	psrlq	$0x20, %xmm1
    0000024e: 	psrlq	$0x20, %xmm2
    00000253: 	pmuludq	%xmm2, %xmm1
    00000257: 	pshufd	$0x8, %xmm1, %xmm1
    0000025c: 	punpckldq	%xmm1, %xmm0
    00000260: 	movdqa	%xmm0, %xmm1
    00000264: 	punpckldq	%xmm4, %xmm0
    00000268: 	punpckhdq	%xmm4, %xmm1
    0000026c: 	paddq	%xmm1, %xmm0
    00000270: 	paddq	%xmm0, %xmm3
    00000274: 	cmpq	$0x7d00, %rax
    0000027a: 	jne	.Ltmp2020 # Offset: 634
    0000027c: 	movl	init_value(%rip), %edx
    00000282: 	movdqa	%xmm3, %xmm0
    00000286: 	psrldq	$0x8, %xmm0
    0000028b: 	imull	%edx, %edx
    0000028e: 	paddq	%xmm0, %xmm3
    00000292: 	movq	%xmm3, %rax
    00000297: 	imull	$0x1f40, %edx, %edx
    0000029d: 	cmpl	%eax, %edx
    0000029f: 	je	.Ltmp2021 # Offset: 671
    000002a1: 	movq	0x90(%rsp), %rdx
    000002a9: 	movq	%r15, %rsi
    000002ac: 	movl	$0x1, %edi
    000002b1: 	xorl	%eax, %eax
    000002b3: 	callq	__printf_chk@PLT # Offset: 691
    000002b8: 	movl	iterations(%rip), %ecx
.Ltmp2021:
    000002be: 	addl	$0x1, %ebx
    000002c1: 	cmpl	%ecx, %ebx
    000002c3: 	jl	.Ltmp2022 # Offset: 707
.Ltmp2019:
    000002c9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000002d7: 	subq	$0x20, %rax
    000002db: 	cmpq	%rax, %rbx
    000002de: 	je	.Ltmp2023 # Offset: 734
    000002e4: 	leaq	0x10(%rbx), %rdi
    000002e8: 	movq	0x98(%rsp), %r15
    000002f0: 	movq	%rdi, (%rbx)
    000002f3: 	movq	0x90(%rsp), %rax
    000002fb: 	movq	%rax, %rsi
    000002fe: 	movq	%rax, 0x28(%rsp)
    00000303: 	addq	%r15, %rsi
    00000306: 	je	.Ltmp2024 # Offset: 774
    00000308: 	testq	%rax, %rax
    0000030b: 	je	.Ltmp2025 # Offset: 779
.Ltmp2024:
    00000311: 	movq	%r15, 0x30(%rsp)
    00000316: 	cmpq	$0xf, %r15
    0000031a: 	ja	.Ltmp2026 # Offset: 794
    00000320: 	cmpq	$0x1, %r15
    00000324: 	jne	.Ltmp2027 # Offset: 804
    0000032a: 	movq	0x28(%rsp), %rax
    0000032f: 	movzbl	(%rax), %eax
    00000332: 	movb	%al, 0x10(%rbx)
.Ltmp2090:
    00000335: 	movq	%r15, 0x8(%rbx)
    00000339: 	movb	$0x0, (%rdi,%r15)
    0000033e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000345: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000034c: 	addq	$0x20, %rax
    00000350: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000357: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000035e: 	je	.Ltmp2028 # Offset: 862
.Ltmp2103:
    00000364: 	movq	-0x20(%rax), %r15
    00000368: 	callq	clock@PLT # Offset: 872
    0000036d: 	pxor	%xmm0, %xmm0
    00000371: 	movq	%rax, end_time(%rip)
    00000378: 	movq	%r15, %rdi
    0000037b: 	subq	start_time(%rip), %rax
    00000382: 	cvtsi2sd	%rax, %xmm0
    00000387: 	divsd	DATAat0x32600(%rip), %xmm0
    0000038f: 	callq	_Z13record_resultdPKc # Offset: 911
    00000394: 	movq	0x90(%rsp), %rdi
    0000039c: 	cmpq	(%rsp), %rdi
    000003a0: 	je	.Ltmp2029 # Offset: 928
    000003a2: 	movq	0xa0(%rsp), %rax
    000003aa: 	leaq	0x1(%rax), %rsi
    000003ae: 	callq	_ZdlPvm@PLT # Offset: 942
.Ltmp2029:
    000003b3: 	movq	0x8(%rsp), %rsi
    000003b8: 	leaq	DATAat0x321f0(%rip), %rdx
    000003bf: 	movq	%r13, %rdi
    000003c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 962
    000003c7: 	movq	0x58(%rsp), %rdx
    000003cc: 	movq	0x50(%rsp), %rsi
    000003d1: 	movq	%r13, %rdi
    000003d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 980
    000003d9: 	movq	(%rsp), %rsi
    000003dd: 	leaq	0x10(%rax), %rdx
    000003e1: 	movq	%rsi, 0x90(%rsp)
    000003e9: 	movq	(%rax), %rcx
    000003ec: 	cmpq	%rdx, %rcx
    000003ef: 	je	.Ltmp2030 # Offset: 1007
    000003f5: 	movq	%rcx, 0x90(%rsp)
    000003fd: 	movq	0x10(%rax), %rcx
    00000401: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2108:
    00000409: 	movq	0x8(%rax), %rcx
    0000040d: 	movq	%r14, %r8
    00000410: 	movq	%rbp, %rsi
    00000413: 	movq	%r12, %rdi
    00000416: 	movq	%rcx, 0x98(%rsp)
    0000041e: 	leaq	_Z14inner_product1IPKjjET0_T_S3_m(%rip), %rcx
    00000425: 	movq	%rdx, (%rax)
    00000428: 	movl	$0x1f40, %edx
    0000042d: 	movq	$0x0, 0x8(%rax)
    00000435: 	movb	$0x0, 0x10(%rax)
    00000439: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1081
    0000043e: 	movq	0x90(%rsp), %rdi
    00000446: 	cmpq	(%rsp), %rdi
    0000044a: 	je	.Ltmp2031 # Offset: 1098
    0000044c: 	movq	0xa0(%rsp), %rax
    00000454: 	leaq	0x1(%rax), %rsi
    00000458: 	callq	_ZdlPvm@PLT # Offset: 1112
.Ltmp2031:
    0000045d: 	movq	0x70(%rsp), %rdi
    00000462: 	cmpq	0x10(%rsp), %rdi
    00000467: 	je	.Ltmp2032 # Offset: 1127
    00000469: 	movq	0x80(%rsp), %rax
    00000471: 	leaq	0x1(%rax), %rsi
    00000475: 	callq	_ZdlPvm@PLT # Offset: 1141
.Ltmp2032:
    0000047a: 	movq	0x8(%rsp), %rsi
    0000047f: 	leaq	DATAat0x32424(%rip), %rdx
    00000486: 	movq	%r14, %rdi
    00000489: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1161
    0000048e: 	callq	clock@PLT # Offset: 1166
    00000493: 	movl	iterations(%rip), %ecx
    00000499: 	xorl	%ebx, %ebx
    0000049b: 	leaq	DATAat0x321c8(%rip), %r15
    000004a2: 	movq	%rax, start_time(%rip)
    000004a9: 	testl	%ecx, %ecx
    000004ab: 	jle	.Ltmp2033 # Offset: 1195
    000004b1: 	nopl	(%rax) # Size: 7
.Ltmp2036:
    000004b8: 	xorl	%eax, %eax
    000004ba: 	pxor	%xmm3, %xmm3
    000004be: 	pxor	%xmm4, %xmm4
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2034:
    000004c8: 	movdqa	(%rbp,%rax), %xmm1
    000004ce: 	movdqa	(%r12,%rax), %xmm2
    000004d4: 	movdqa	(%rbp,%rax), %xmm0
    000004da: 	pmuludq	(%r12,%rax), %xmm0
    000004e0: 	addq	$0x10, %rax
    000004e4: 	pshufd	$0x8, %xmm0, %xmm0
    000004e9: 	psrlq	$0x20, %xmm1
    000004ee: 	psrlq	$0x20, %xmm2
    000004f3: 	pmuludq	%xmm2, %xmm1
    000004f7: 	pshufd	$0x8, %xmm1, %xmm1
    000004fc: 	punpckldq	%xmm1, %xmm0
    00000500: 	movdqa	%xmm0, %xmm1
    00000504: 	punpckldq	%xmm4, %xmm0
    00000508: 	punpckhdq	%xmm4, %xmm1
    0000050c: 	paddq	%xmm1, %xmm0
    00000510: 	paddq	%xmm0, %xmm3
    00000514: 	cmpq	$0x7d00, %rax
    0000051a: 	jne	.Ltmp2034 # Offset: 1306
    0000051c: 	movl	init_value(%rip), %edx
    00000522: 	movdqa	%xmm3, %xmm0
    00000526: 	psrldq	$0x8, %xmm0
    0000052b: 	imull	%edx, %edx
    0000052e: 	paddq	%xmm0, %xmm3
    00000532: 	movq	%xmm3, %rax
    00000537: 	imull	$0x1f40, %edx, %edx
    0000053d: 	cmpl	%eax, %edx
    0000053f: 	je	.Ltmp2035 # Offset: 1343
    00000541: 	movq	0x90(%rsp), %rdx
    00000549: 	movq	%r15, %rsi
    0000054c: 	movl	$0x1, %edi
    00000551: 	xorl	%eax, %eax
    00000553: 	callq	__printf_chk@PLT # Offset: 1363
    00000558: 	movl	iterations(%rip), %ecx
.Ltmp2035:
    0000055e: 	addl	$0x1, %ebx
    00000561: 	cmpl	%ecx, %ebx
    00000563: 	jl	.Ltmp2036 # Offset: 1379
.Ltmp2033:
    00000569: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000570: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000577: 	subq	$0x20, %rax
    0000057b: 	cmpq	%rax, %rbx
    0000057e: 	je	.Ltmp2037 # Offset: 1406
    00000584: 	leaq	0x10(%rbx), %rdi
    00000588: 	movq	0x98(%rsp), %r15
    00000590: 	movq	%rdi, (%rbx)
    00000593: 	movq	0x90(%rsp), %rax
    0000059b: 	movq	%rax, %rsi
    0000059e: 	movq	%rax, 0x28(%rsp)
    000005a3: 	addq	%r15, %rsi
    000005a6: 	je	.Ltmp2038 # Offset: 1446
    000005a8: 	testq	%rax, %rax
    000005ab: 	je	.Ltmp2039 # Offset: 1451
.Ltmp2038:
    000005b1: 	movq	%r15, 0x30(%rsp)
    000005b6: 	cmpq	$0xf, %r15
    000005ba: 	ja	.Ltmp2040 # Offset: 1466
    000005c0: 	cmpq	$0x1, %r15
    000005c4: 	jne	.Ltmp2041 # Offset: 1476
    000005ca: 	movq	0x28(%rsp), %rax
    000005cf: 	movzbl	(%rax), %eax
    000005d2: 	movb	%al, 0x10(%rbx)
.Ltmp2112:
    000005d5: 	movq	%r15, 0x8(%rbx)
    000005d9: 	movb	$0x0, (%rdi,%r15)
    000005de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005e5: 	addq	$0x20, %rax
    000005e9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2107:
    000005f0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005fe: 	je	.Ltmp2042 # Offset: 1534
.Ltmp2106:
    00000604: 	movq	-0x20(%rax), %r15
    00000608: 	callq	clock@PLT # Offset: 1544
    0000060d: 	pxor	%xmm0, %xmm0
    00000611: 	movq	%rax, end_time(%rip)
    00000618: 	movq	%r15, %rdi
    0000061b: 	subq	start_time(%rip), %rax
    00000622: 	cvtsi2sd	%rax, %xmm0
    00000627: 	divsd	DATAat0x32600(%rip), %xmm0
    0000062f: 	callq	_Z13record_resultdPKc # Offset: 1583
    00000634: 	movq	0x90(%rsp), %rdi
    0000063c: 	cmpq	(%rsp), %rdi
    00000640: 	je	.Ltmp2043 # Offset: 1600
    00000642: 	movq	0xa0(%rsp), %rax
    0000064a: 	leaq	0x1(%rax), %rsi
    0000064e: 	callq	_ZdlPvm@PLT # Offset: 1614
.Ltmp2043:
    00000653: 	movq	0x8(%rsp), %rsi
    00000658: 	leaq	DATAat0x32204(%rip), %rdx
    0000065f: 	movq	%r13, %rdi
    00000662: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1634
    00000667: 	movq	0x58(%rsp), %rdx
    0000066c: 	movq	0x50(%rsp), %rsi
    00000671: 	movq	%r13, %rdi
    00000674: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1652
    00000679: 	movq	(%rsp), %rsi
    0000067d: 	leaq	0x10(%rax), %rdx
    00000681: 	movq	%rsi, 0x90(%rsp)
    00000689: 	movq	(%rax), %rcx
    0000068c: 	cmpq	%rdx, %rcx
    0000068f: 	je	.Ltmp2044 # Offset: 1679
    00000695: 	movq	%rcx, 0x90(%rsp)
    0000069d: 	movq	0x10(%rax), %rcx
    000006a1: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2105:
    000006a9: 	movq	0x8(%rax), %rcx
    000006ad: 	movq	%r14, %r8
    000006b0: 	movq	%rbp, %rsi
    000006b3: 	movq	%r12, %rdi
    000006b6: 	movq	%rcx, 0x98(%rsp)
    000006be: 	leaq	_Z14inner_product2IPKjjET0_T_S3_m(%rip), %rcx
    000006c5: 	movq	%rdx, (%rax)
    000006c8: 	movl	$0x1f40, %edx
    000006cd: 	movq	$0x0, 0x8(%rax)
    000006d5: 	movb	$0x0, 0x10(%rax)
    000006d9: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1753
    000006de: 	movq	0x90(%rsp), %rdi
    000006e6: 	cmpq	(%rsp), %rdi
    000006ea: 	je	.Ltmp2045 # Offset: 1770
    000006ec: 	movq	0xa0(%rsp), %rax
    000006f4: 	leaq	0x1(%rax), %rsi
    000006f8: 	callq	_ZdlPvm@PLT # Offset: 1784
.Ltmp2045:
    000006fd: 	movq	0x70(%rsp), %rdi
    00000702: 	cmpq	0x10(%rsp), %rdi
    00000707: 	je	.Ltmp2046 # Offset: 1799
    00000709: 	movq	0x80(%rsp), %rax
    00000711: 	leaq	0x1(%rax), %rsi
    00000715: 	callq	_ZdlPvm@PLT # Offset: 1813
.Ltmp2046:
    0000071a: 	movq	0x8(%rsp), %rsi
    0000071f: 	leaq	DATAat0x3245c(%rip), %rdx
    00000726: 	movq	%r14, %rdi
    00000729: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1833
    0000072e: 	callq	clock@PLT # Offset: 1838
    00000733: 	movl	iterations(%rip), %ecx
    00000739: 	xorl	%ebx, %ebx
    0000073b: 	leaq	DATAat0x321c8(%rip), %r15
    00000742: 	movq	%rax, start_time(%rip)
    00000749: 	testl	%ecx, %ecx
    0000074b: 	jle	.Ltmp2047 # Offset: 1867
    00000751: 	nopl	(%rax) # Size: 7
.Ltmp2050:
    00000758: 	xorl	%eax, %eax
    0000075a: 	pxor	%xmm3, %xmm3
    0000075e: 	pxor	%xmm4, %xmm4
    00000762: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2048:
    00000768: 	movdqa	(%rbp,%rax), %xmm1
    0000076e: 	movdqa	(%r12,%rax), %xmm2
    00000774: 	movdqa	(%rbp,%rax), %xmm0
    0000077a: 	pmuludq	(%r12,%rax), %xmm0
    00000780: 	addq	$0x10, %rax
    00000784: 	pshufd	$0x8, %xmm0, %xmm0
    00000789: 	psrlq	$0x20, %xmm1
    0000078e: 	psrlq	$0x20, %xmm2
    00000793: 	pmuludq	%xmm2, %xmm1
    00000797: 	pshufd	$0x8, %xmm1, %xmm1
    0000079c: 	punpckldq	%xmm1, %xmm0
    000007a0: 	movdqa	%xmm0, %xmm1
    000007a4: 	punpckldq	%xmm4, %xmm0
    000007a8: 	punpckhdq	%xmm4, %xmm1
    000007ac: 	paddq	%xmm1, %xmm0
    000007b0: 	paddq	%xmm0, %xmm3
    000007b4: 	cmpq	$0x7d00, %rax
    000007ba: 	jne	.Ltmp2048 # Offset: 1978
    000007bc: 	movl	init_value(%rip), %edx
    000007c2: 	movdqa	%xmm3, %xmm0
    000007c6: 	psrldq	$0x8, %xmm0
    000007cb: 	imull	%edx, %edx
    000007ce: 	paddq	%xmm0, %xmm3
    000007d2: 	movq	%xmm3, %rax
    000007d7: 	imull	$0x1f40, %edx, %edx
    000007dd: 	cmpl	%eax, %edx
    000007df: 	je	.Ltmp2049 # Offset: 2015
    000007e1: 	movq	0x90(%rsp), %rdx
    000007e9: 	movq	%r15, %rsi
    000007ec: 	movl	$0x1, %edi
    000007f1: 	xorl	%eax, %eax
    000007f3: 	callq	__printf_chk@PLT # Offset: 2035
    000007f8: 	movl	iterations(%rip), %ecx
.Ltmp2049:
    000007fe: 	addl	$0x1, %ebx
    00000801: 	cmpl	%ecx, %ebx
    00000803: 	jl	.Ltmp2050 # Offset: 2051
.Ltmp2047:
    00000809: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000810: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000817: 	subq	$0x20, %rax
    0000081b: 	cmpq	%rax, %r15
    0000081e: 	je	.Ltmp2051 # Offset: 2078
    00000824: 	leaq	0x10(%r15), %rdi
    00000828: 	movq	0x98(%rsp), %rbx
    00000830: 	movq	%rdi, (%r15)
    00000833: 	movq	0x90(%rsp), %rax
    0000083b: 	movq	%rax, %rsi
    0000083e: 	movq	%rax, 0x28(%rsp)
    00000843: 	addq	%rbx, %rsi
    00000846: 	je	.Ltmp2052 # Offset: 2118
    00000848: 	testq	%rax, %rax
    0000084b: 	je	.Ltmp2053 # Offset: 2123
.Ltmp2052:
    00000851: 	movq	%rbx, 0x30(%rsp)
    00000856: 	cmpq	$0xf, %rbx
    0000085a: 	ja	.Ltmp2054 # Offset: 2138
    00000860: 	cmpq	$0x1, %rbx
    00000864: 	jne	.Ltmp2055 # Offset: 2148
    0000086a: 	movq	0x28(%rsp), %rax
    0000086f: 	movzbl	(%rax), %eax
    00000872: 	movb	%al, 0x10(%r15)
.Ltmp2110:
    00000876: 	movq	%rbx, 0x8(%r15)
    0000087a: 	movb	$0x0, (%rdi,%rbx)
    0000087e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000885: 	addq	$0x20, %rax
    00000889: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2100:
    00000890: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000897: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000089e: 	je	.Ltmp2056 # Offset: 2206
.Ltmp2099:
    000008a4: 	movq	-0x20(%rax), %r15
    000008a8: 	callq	clock@PLT # Offset: 2216
    000008ad: 	pxor	%xmm0, %xmm0
    000008b1: 	movq	%rax, end_time(%rip)
    000008b8: 	movq	%r15, %rdi
    000008bb: 	subq	start_time(%rip), %rax
    000008c2: 	cvtsi2sd	%rax, %xmm0
    000008c7: 	divsd	DATAat0x32600(%rip), %xmm0
    000008cf: 	callq	_Z13record_resultdPKc # Offset: 2255
    000008d4: 	movq	0x90(%rsp), %rdi
    000008dc: 	cmpq	(%rsp), %rdi
    000008e0: 	je	.Ltmp2057 # Offset: 2272
    000008e2: 	movq	0xa0(%rsp), %rax
    000008ea: 	leaq	0x1(%rax), %rsi
    000008ee: 	callq	_ZdlPvm@PLT # Offset: 2286
.Ltmp2057:
    000008f3: 	movq	0x8(%rsp), %rsi
    000008f8: 	leaq	DATAat0x32218(%rip), %rdx
    000008ff: 	movq	%r13, %rdi
    00000902: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2306
    00000907: 	movq	0x58(%rsp), %rdx
    0000090c: 	movq	0x50(%rsp), %rsi
    00000911: 	movq	%r13, %rdi
    00000914: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2324
    00000919: 	movq	(%rsp), %rsi
    0000091d: 	leaq	0x10(%rax), %rdx
    00000921: 	movq	%rsi, 0x90(%rsp)
    00000929: 	movq	(%rax), %rcx
    0000092c: 	cmpq	%rdx, %rcx
    0000092f: 	je	.Ltmp2058 # Offset: 2351
    00000935: 	movq	%rcx, 0x90(%rsp)
    0000093d: 	movq	0x10(%rax), %rcx
    00000941: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2098:
    00000949: 	movq	0x8(%rax), %rcx
    0000094d: 	movq	%r14, %r8
    00000950: 	movq	%rbp, %rsi
    00000953: 	movq	%r12, %rdi
    00000956: 	movq	%rcx, 0x98(%rsp)
    0000095e: 	leaq	_Z14inner_product3IPKjjET0_T_S3_m(%rip), %rcx
    00000965: 	movq	%rdx, (%rax)
    00000968: 	movl	$0x1f40, %edx
    0000096d: 	movq	$0x0, 0x8(%rax)
    00000975: 	movb	$0x0, 0x10(%rax)
    00000979: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2425
    0000097e: 	movq	0x90(%rsp), %rdi
    00000986: 	cmpq	(%rsp), %rdi
    0000098a: 	je	.Ltmp2059 # Offset: 2442
    0000098c: 	movq	0xa0(%rsp), %rax
    00000994: 	leaq	0x1(%rax), %rsi
    00000998: 	callq	_ZdlPvm@PLT # Offset: 2456
.Ltmp2059:
    0000099d: 	movq	0x70(%rsp), %rdi
    000009a2: 	cmpq	0x10(%rsp), %rdi
    000009a7: 	je	.Ltmp2060 # Offset: 2471
    000009a9: 	movq	0x80(%rsp), %rax
    000009b1: 	leaq	0x1(%rax), %rsi
    000009b5: 	callq	_ZdlPvm@PLT # Offset: 2485
.Ltmp2060:
    000009ba: 	movq	0x8(%rsp), %rsi
    000009bf: 	leaq	DATAat0x3222c(%rip), %rdx
    000009c6: 	movq	%r13, %rdi
    000009c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2505
    000009ce: 	movq	0x58(%rsp), %rdx
    000009d3: 	movq	0x50(%rsp), %rsi
    000009d8: 	movq	%r13, %rdi
    000009db: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2523
    000009e0: 	movq	(%rsp), %rsi
    000009e4: 	leaq	0x10(%rax), %rdx
    000009e8: 	movq	%rsi, 0x90(%rsp)
    000009f0: 	movq	(%rax), %rcx
    000009f3: 	cmpq	%rdx, %rcx
    000009f6: 	je	.Ltmp2061 # Offset: 2550
    000009fc: 	movq	%rcx, 0x90(%rsp)
    00000a04: 	movq	0x10(%rax), %rcx
    00000a08: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2097:
    00000a10: 	movq	0x8(%rax), %rcx
    00000a14: 	movq	%r14, %r8
    00000a17: 	movq	%rbp, %rsi
    00000a1a: 	movq	%r12, %rdi
    00000a1d: 	movq	%rcx, 0x98(%rsp)
    00000a25: 	leaq	_Z14inner_product4IPKjjET0_T_S3_m(%rip), %rcx
    00000a2c: 	movq	%rdx, (%rax)
    00000a2f: 	movl	$0x1f40, %edx
    00000a34: 	movq	$0x0, 0x8(%rax)
    00000a3c: 	movb	$0x0, 0x10(%rax)
    00000a40: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2624
    00000a45: 	movq	0x90(%rsp), %rdi
    00000a4d: 	cmpq	(%rsp), %rdi
    00000a51: 	je	.Ltmp2062 # Offset: 2641
    00000a53: 	movq	0xa0(%rsp), %rax
    00000a5b: 	leaq	0x1(%rax), %rsi
    00000a5f: 	callq	_ZdlPvm@PLT # Offset: 2655
.Ltmp2062:
    00000a64: 	movq	0x70(%rsp), %rdi
    00000a69: 	cmpq	0x10(%rsp), %rdi
    00000a6e: 	je	.Ltmp2063 # Offset: 2670
    00000a70: 	movq	0x80(%rsp), %rax
    00000a78: 	leaq	0x1(%rax), %rsi
    00000a7c: 	callq	_ZdlPvm@PLT # Offset: 2684
.Ltmp2063:
    00000a81: 	movq	0x8(%rsp), %rsi
    00000a86: 	leaq	DATAat0x32240(%rip), %rdx
    00000a8d: 	movq	%r13, %rdi
    00000a90: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2704
    00000a95: 	movq	0x58(%rsp), %rdx
    00000a9a: 	movq	0x50(%rsp), %rsi
    00000a9f: 	movq	%r13, %rdi
    00000aa2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2722
    00000aa7: 	movq	(%rsp), %rsi
    00000aab: 	leaq	0x10(%rax), %rdx
    00000aaf: 	movq	%rsi, 0x90(%rsp)
    00000ab7: 	movq	(%rax), %rcx
    00000aba: 	cmpq	%rdx, %rcx
    00000abd: 	je	.Ltmp2064 # Offset: 2749
    00000ac3: 	movq	%rcx, 0x90(%rsp)
    00000acb: 	movq	0x10(%rax), %rcx
    00000acf: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2096:
    00000ad7: 	movq	0x8(%rax), %rcx
    00000adb: 	movq	%r14, %r8
    00000ade: 	movq	%rbp, %rsi
    00000ae1: 	movq	%r12, %rdi
    00000ae4: 	movq	%rcx, 0x98(%rsp)
    00000aec: 	leaq	_Z14inner_product5IPKjjET0_T_S3_m(%rip), %rcx
    00000af3: 	movq	%rdx, (%rax)
    00000af6: 	movl	$0x1f40, %edx
    00000afb: 	movq	$0x0, 0x8(%rax)
    00000b03: 	movb	$0x0, 0x10(%rax)
    00000b07: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2823
    00000b0c: 	movq	0x90(%rsp), %rdi
    00000b14: 	cmpq	(%rsp), %rdi
    00000b18: 	je	.Ltmp2065 # Offset: 2840
    00000b1a: 	movq	0xa0(%rsp), %rax
    00000b22: 	leaq	0x1(%rax), %rsi
    00000b26: 	callq	_ZdlPvm@PLT # Offset: 2854
.Ltmp2065:
    00000b2b: 	movq	0x70(%rsp), %rdi
    00000b30: 	cmpq	0x10(%rsp), %rdi
    00000b35: 	je	.Ltmp2066 # Offset: 2869
    00000b37: 	movq	0x80(%rsp), %rax
    00000b3f: 	leaq	0x1(%rax), %rsi
    00000b43: 	callq	_ZdlPvm@PLT # Offset: 2883
.Ltmp2066:
    00000b48: 	movq	0x8(%rsp), %rsi
    00000b4d: 	leaq	DATAat0x32254(%rip), %rdx
    00000b54: 	movq	%r13, %rdi
    00000b57: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2903
    00000b5c: 	movq	0x58(%rsp), %rdx
    00000b61: 	movq	0x50(%rsp), %rsi
    00000b66: 	movq	%r13, %rdi
    00000b69: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2921
    00000b6e: 	movq	(%rsp), %rsi
    00000b72: 	leaq	0x10(%rax), %rdx
    00000b76: 	movq	%rsi, 0x90(%rsp)
    00000b7e: 	movq	(%rax), %rcx
    00000b81: 	cmpq	%rdx, %rcx
    00000b84: 	je	.Ltmp2067 # Offset: 2948
    00000b8a: 	movq	%rcx, 0x90(%rsp)
    00000b92: 	movq	0x10(%rax), %rcx
    00000b96: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2095:
    00000b9e: 	movq	0x8(%rax), %rcx
    00000ba2: 	movq	%r14, %r8
    00000ba5: 	movq	%rbp, %rsi
    00000ba8: 	movq	%r12, %rdi
    00000bab: 	movq	%rcx, 0x98(%rsp)
    00000bb3: 	leaq	_Z14inner_product6IPKjjET0_T_S3_m(%rip), %rcx
    00000bba: 	movq	%rdx, (%rax)
    00000bbd: 	movl	$0x1f40, %edx
    00000bc2: 	movq	$0x0, 0x8(%rax)
    00000bca: 	movb	$0x0, 0x10(%rax)
    00000bce: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3022
    00000bd3: 	movq	0x90(%rsp), %rdi
    00000bdb: 	cmpq	(%rsp), %rdi
    00000bdf: 	je	.Ltmp2068 # Offset: 3039
    00000be1: 	movq	0xa0(%rsp), %rax
    00000be9: 	leaq	0x1(%rax), %rsi
    00000bed: 	callq	_ZdlPvm@PLT # Offset: 3053
.Ltmp2068:
    00000bf2: 	movq	0x70(%rsp), %rdi
    00000bf7: 	cmpq	0x10(%rsp), %rdi
    00000bfc: 	je	.Ltmp2069 # Offset: 3068
    00000bfe: 	movq	0x80(%rsp), %rax
    00000c06: 	leaq	0x1(%rax), %rsi
    00000c0a: 	callq	_ZdlPvm@PLT # Offset: 3082
.Ltmp2069:
    00000c0f: 	movq	0x8(%rsp), %rsi
    00000c14: 	leaq	DATAat0x32268(%rip), %rdx
    00000c1b: 	movq	%r13, %rdi
    00000c1e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3102
    00000c23: 	movq	0x58(%rsp), %rdx
    00000c28: 	movq	0x50(%rsp), %rsi
    00000c2d: 	movq	%r13, %rdi
    00000c30: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3120
    00000c35: 	movq	(%rsp), %rsi
    00000c39: 	leaq	0x10(%rax), %rdx
    00000c3d: 	movq	%rsi, 0x90(%rsp)
    00000c45: 	movq	(%rax), %rcx
    00000c48: 	cmpq	%rdx, %rcx
    00000c4b: 	je	.Ltmp2070 # Offset: 3147
    00000c51: 	movq	%rcx, 0x90(%rsp)
    00000c59: 	movq	0x10(%rax), %rcx
    00000c5d: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2094:
    00000c65: 	movq	0x8(%rax), %rcx
    00000c69: 	movq	%r14, %r8
    00000c6c: 	movq	%rbp, %rsi
    00000c6f: 	movq	%r12, %rdi
    00000c72: 	movq	%rcx, 0x98(%rsp)
    00000c7a: 	leaq	_Z14inner_product7IPKjjET0_T_S3_m(%rip), %rcx
    00000c81: 	movq	%rdx, (%rax)
    00000c84: 	movl	$0x1f40, %edx
    00000c89: 	movq	$0x0, 0x8(%rax)
    00000c91: 	movb	$0x0, 0x10(%rax)
    00000c95: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3221
    00000c9a: 	movq	0x90(%rsp), %rdi
    00000ca2: 	cmpq	(%rsp), %rdi
    00000ca6: 	je	.Ltmp2071 # Offset: 3238
    00000ca8: 	movq	0xa0(%rsp), %rax
    00000cb0: 	leaq	0x1(%rax), %rsi
    00000cb4: 	callq	_ZdlPvm@PLT # Offset: 3252
.Ltmp2071:
    00000cb9: 	movq	0x70(%rsp), %rdi
    00000cbe: 	cmpq	0x10(%rsp), %rdi
    00000cc3: 	je	.Ltmp2072 # Offset: 3267
    00000cc5: 	movq	0x80(%rsp), %rax
    00000ccd: 	leaq	0x1(%rax), %rsi
    00000cd1: 	callq	_ZdlPvm@PLT # Offset: 3281
.Ltmp2072:
    00000cd6: 	movq	0x8(%rsp), %rsi
    00000cdb: 	leaq	DATAat0x3227c(%rip), %rdx
    00000ce2: 	movq	%r13, %rdi
    00000ce5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3301
    00000cea: 	movq	0x58(%rsp), %rdx
    00000cef: 	movq	0x50(%rsp), %rsi
    00000cf4: 	movq	%r13, %rdi
    00000cf7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3319
    00000cfc: 	movq	(%rsp), %rsi
    00000d00: 	leaq	0x10(%rax), %rdx
    00000d04: 	movq	%rsi, 0x90(%rsp)
    00000d0c: 	movq	(%rax), %rcx
    00000d0f: 	cmpq	%rdx, %rcx
    00000d12: 	je	.Ltmp2073 # Offset: 3346
    00000d18: 	movq	%rcx, 0x90(%rsp)
    00000d20: 	movq	0x10(%rax), %rcx
    00000d24: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2093:
    00000d2c: 	movq	0x8(%rax), %rcx
    00000d30: 	movq	%r14, %r8
    00000d33: 	movq	%rbp, %rsi
    00000d36: 	movq	%r12, %rdi
    00000d39: 	movq	%rcx, 0x98(%rsp)
    00000d41: 	leaq	_Z14inner_product8IPKjjET0_T_S3_m(%rip), %rcx
    00000d48: 	movq	%rdx, (%rax)
    00000d4b: 	movl	$0x1f40, %edx
    00000d50: 	movq	$0x0, 0x8(%rax)
    00000d58: 	movb	$0x0, 0x10(%rax)
    00000d5c: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3420
    00000d61: 	movq	0x90(%rsp), %rdi
    00000d69: 	cmpq	(%rsp), %rdi
    00000d6d: 	je	.Ltmp2074 # Offset: 3437
    00000d6f: 	movq	0xa0(%rsp), %rax
    00000d77: 	leaq	0x1(%rax), %rsi
    00000d7b: 	callq	_ZdlPvm@PLT # Offset: 3451
.Ltmp2074:
    00000d80: 	movq	0x70(%rsp), %rdi
    00000d85: 	cmpq	0x10(%rsp), %rdi
    00000d8a: 	je	.Ltmp2075 # Offset: 3466
    00000d8c: 	movq	0x80(%rsp), %rax
    00000d94: 	leaq	0x1(%rax), %rsi
    00000d98: 	callq	_ZdlPvm@PLT # Offset: 3480
.Ltmp2075:
    00000d9d: 	movq	0x10(%rsp), %rax
    00000da2: 	movq	0x50(%rsp), %r15
    00000da7: 	movq	0x58(%rsp), %rbx
    00000dac: 	movq	%rax, 0x70(%rsp)
    00000db1: 	movq	%r15, %rax
    00000db4: 	addq	%rbx, %rax
    00000db7: 	je	.Ltmp2076 # Offset: 3511
    00000db9: 	testq	%r15, %r15
    00000dbc: 	je	.Ltmp2077 # Offset: 3516
.Ltmp2076:
    00000dc2: 	movq	%rbx, 0x30(%rsp)
    00000dc7: 	cmpq	$0xf, %rbx
    00000dcb: 	ja	.Ltmp2078 # Offset: 3531
    00000dd1: 	cmpq	$0x1, %rbx
    00000dd5: 	jne	.Ltmp2079 # Offset: 3541
    00000ddb: 	movzbl	(%r15), %eax
    00000ddf: 	movb	%al, 0x80(%rsp)
    00000de6: 	movq	0x10(%rsp), %rax
.Ltmp2092:
    00000deb: 	movq	%rbx, 0x78(%rsp)
    00000df0: 	movb	$0x0, (%rax,%rbx)
    00000df4: 	movabsq	$0x3fffffffffffffff, %rax
    00000dfe: 	subq	0x78(%rsp), %rax
    00000e03: 	cmpq	$0x12, %rax
    00000e07: 	jbe	.Ltmp2080 # Offset: 3591
    00000e0d: 	movl	$0x13, %edx
    00000e12: 	leaq	DATAat0x32290(%rip), %rsi
    00000e19: 	movq	%r13, %rdi
    00000e1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3612
    00000e21: 	movq	0x58(%rsp), %rdx
    00000e26: 	movq	0x50(%rsp), %rsi
    00000e2b: 	movq	%r13, %rdi
    00000e2e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3630
    00000e33: 	movq	(%rsp), %rsi
    00000e37: 	leaq	0x10(%rax), %rdx
    00000e3b: 	movq	%rsi, 0x90(%rsp)
    00000e43: 	movq	(%rax), %rcx
    00000e46: 	cmpq	%rdx, %rcx
    00000e49: 	je	.Ltmp2081 # Offset: 3657
    00000e4f: 	movq	%rcx, 0x90(%rsp)
    00000e57: 	movq	0x10(%rax), %rcx
    00000e5b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2102:
    00000e63: 	movq	0x8(%rax), %rcx
    00000e67: 	movq	%r14, %r8
    00000e6a: 	movq	%rbp, %rsi
    00000e6d: 	movq	%r12, %rdi
    00000e70: 	movq	%rcx, 0x98(%rsp)
    00000e78: 	leaq	_Z14inner_product9IPKjjET0_T_S3_m(%rip), %rcx
    00000e7f: 	movq	%rdx, (%rax)
    00000e82: 	movl	$0x1f40, %edx
    00000e87: 	movq	$0x0, 0x8(%rax)
    00000e8f: 	movb	$0x0, 0x10(%rax)
    00000e93: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3731
    00000e98: 	movq	0x90(%rsp), %rdi
    00000ea0: 	cmpq	(%rsp), %rdi
    00000ea4: 	je	.Ltmp2082 # Offset: 3748
    00000ea6: 	movq	0xa0(%rsp), %rax
    00000eae: 	leaq	0x1(%rax), %rsi
    00000eb2: 	callq	_ZdlPvm@PLT # Offset: 3762
.Ltmp2082:
    00000eb7: 	movq	0x70(%rsp), %rdi
    00000ebc: 	cmpq	0x10(%rsp), %rdi
    00000ec1: 	je	.Ltmp2083 # Offset: 3777
    00000ec3: 	movq	0x80(%rsp), %rax
    00000ecb: 	leaq	0x1(%rax), %rsi
    00000ecf: 	callq	_ZdlPvm@PLT # Offset: 3791
.Ltmp2083:
    00000ed4: 	movq	0x8(%rsp), %rsi
    00000ed9: 	leaq	DATAat0x322a4(%rip), %rdx
    00000ee0: 	movq	%r13, %rdi
    00000ee3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3811
    00000ee8: 	movq	0x58(%rsp), %rdx
    00000eed: 	movq	0x50(%rsp), %rsi
    00000ef2: 	movq	%r13, %rdi
    00000ef5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3829
    00000efa: 	movq	(%rsp), %rsi
    00000efe: 	leaq	0x10(%rax), %rdx
    00000f02: 	movq	%rsi, 0x90(%rsp)
    00000f0a: 	movq	(%rax), %rcx
    00000f0d: 	cmpq	%rdx, %rcx
    00000f10: 	je	.Ltmp2084 # Offset: 3856
    00000f16: 	movq	%rcx, 0x90(%rsp)
    00000f1e: 	movq	0x10(%rax), %rcx
    00000f22: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2101:
    00000f2a: 	movq	0x8(%rax), %rcx
    00000f2e: 	movq	%r14, %r8
    00000f31: 	movq	%rbp, %rsi
    00000f34: 	movq	%r12, %rdi
    00000f37: 	movq	%rcx, 0x98(%rsp)
    00000f3f: 	leaq	_Z15inner_product10IPKjjET0_T_S3_m(%rip), %rcx
    00000f46: 	movq	%rdx, (%rax)
    00000f49: 	movl	$0x1f40, %edx
    00000f4e: 	movq	$0x0, 0x8(%rax)
    00000f56: 	movb	$0x0, 0x10(%rax)
    00000f5a: 	callq	_Z18test_inner_productIjPFjPKjS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3930
    00000f5f: 	movq	0x90(%rsp), %rdi
    00000f67: 	cmpq	(%rsp), %rdi
    00000f6b: 	je	.Ltmp2085 # Offset: 3947
    00000f6d: 	movq	0xa0(%rsp), %rax
    00000f75: 	leaq	0x1(%rax), %rsi
    00000f79: 	callq	_ZdlPvm@PLT # Offset: 3961
.Ltmp2085:
    00000f7e: 	movq	0x70(%rsp), %rdi
    00000f83: 	cmpq	0x10(%rsp), %rdi
    00000f88: 	je	.Ltmp2086 # Offset: 3976
    00000f8a: 	movq	0x80(%rsp), %rax
    00000f92: 	leaq	0x1(%rax), %rsi
    00000f96: 	callq	_ZdlPvm@PLT # Offset: 3990
.Ltmp2086:
    00000f9b: 	movq	0x8(%rsp), %rsi
    00000fa0: 	leaq	DATAat0x322b9(%rip), %rdx
    00000fa7: 	movq	%r14, %rdi
    00000faa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4010
    00000faf: 	movl	iterations(%rip), %edx
    00000fb5: 	xorl	%r8d, %r8d
    00000fb8: 	xorl	%ecx, %ecx
    00000fba: 	movl	$0x1f40, %esi
    00000fbf: 	movq	0x90(%rsp), %rdi
    00000fc7: 	callq	_Z9summarizePKciiii # Offset: 4039
    00000fcc: 	movq	0x90(%rsp), %rdi
    00000fd4: 	cmpq	(%rsp), %rdi
    00000fd8: 	je	.Ltmp2087 # Offset: 4056
    00000fda: 	movq	0xa0(%rsp), %rax
    00000fe2: 	leaq	0x1(%rax), %rsi
    00000fe6: 	callq	_ZdlPvm@PLT # Offset: 4070
.Ltmp2087:
    00000feb: 	movq	0x50(%rsp), %rdi
    00000ff0: 	cmpq	0x18(%rsp), %rdi
    00000ff5: 	je	.Ltmp2088 # Offset: 4085
    00000ff7: 	movq	0x60(%rsp), %rax
    00000ffc: 	leaq	0x1(%rax), %rsi
    00001000: 	callq	_ZdlPvm@PLT # Offset: 4096
.Ltmp2088:
    00001005: 	movq	0xfab8(%rsp), %rax
    0000100d: 	subq	%fs:0x28, %rax
    00001016: 	jne	.Ltmp2089 # Offset: 4118
    0000101c: 	addq	$0xfac8, %rsp
    00001023: 	popq	%rbx
    00001024: 	popq	%rbp
    00001025: 	popq	%r12
    00001027: 	popq	%r13
    00001029: 	popq	%r14
    0000102b: 	popq	%r15
    0000102d: 	retq # Offset: 4141
.Ltmp2026:
    0000102e: 	movq	0x20(%rsp), %rsi
    00001033: 	xorl	%edx, %edx
    00001035: 	movq	%rbx, %rdi
    00001038: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4152
    0000103d: 	movq	%rax, (%rbx)
    00001040: 	movq	%rax, %rdi
    00001043: 	movq	0x30(%rsp), %rax
    00001048: 	movq	%rax, 0x10(%rbx)
.Ltmp2109:
    0000104c: 	movq	0x28(%rsp), %rsi
    00001051: 	movq	%r15, %rdx
    00001054: 	callq	memcpy@PLT # Offset: 4180
    00001059: 	movq	0x30(%rsp), %r15
    0000105e: 	movq	(%rbx), %rdi
    00001061: 	jmp	.Ltmp2090 # Offset: 4193
.Ltmp2079:
    00001066: 	testq	%rbx, %rbx
    00001069: 	jne	.Ltmp2091 # Offset: 4201
    0000106f: 	movq	0x10(%rsp), %rax
    00001074: 	jmp	.Ltmp2092 # Offset: 4212
.Ltmp2078:
    00001079: 	movq	0x20(%rsp), %rsi
    0000107e: 	xorl	%edx, %edx
    00001080: 	movq	%r13, %rdi
    00001083: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4227
    00001088: 	movq	%rax, 0x70(%rsp)
    0000108d: 	movq	%rax, %rdi
    00001090: 	movq	0x30(%rsp), %rax
    00001095: 	movq	%rax, 0x80(%rsp)
.Ltmp2114:
    0000109d: 	movq	%rbx, %rdx
    000010a0: 	movq	%r15, %rsi
    000010a3: 	callq	memcpy@PLT # Offset: 4259
    000010a8: 	movq	0x30(%rsp), %rbx
    000010ad: 	movq	0x70(%rsp), %rax
    000010b2: 	jmp	.Ltmp2092 # Offset: 4274
.Ltmp2073:
    000010b7: 	movdqu	0x10(%rax), %xmm7
    000010bc: 	movaps	%xmm7, 0xa0(%rsp)
    000010c4: 	jmp	.Ltmp2093 # Offset: 4292
.Ltmp2070:
    000010c9: 	movdqu	0x10(%rax), %xmm6
    000010ce: 	movaps	%xmm6, 0xa0(%rsp)
    000010d6: 	jmp	.Ltmp2094 # Offset: 4310
.Ltmp2067:
    000010db: 	movdqu	0x10(%rax), %xmm5
    000010e0: 	movaps	%xmm5, 0xa0(%rsp)
    000010e8: 	jmp	.Ltmp2095 # Offset: 4328
.Ltmp2064:
    000010ed: 	movdqu	0x10(%rax), %xmm7
    000010f2: 	movaps	%xmm7, 0xa0(%rsp)
    000010fa: 	jmp	.Ltmp2096 # Offset: 4346
.Ltmp2061:
    000010ff: 	movdqu	0x10(%rax), %xmm6
    00001104: 	movaps	%xmm6, 0xa0(%rsp)
    0000110c: 	jmp	.Ltmp2097 # Offset: 4364
.Ltmp2058:
    00001111: 	movdqu	0x10(%rax), %xmm5
    00001116: 	movaps	%xmm5, 0xa0(%rsp)
    0000111e: 	jmp	.Ltmp2098 # Offset: 4382
.Ltmp2056:
    00001123: 	movq	-0x8(%rdx), %rax
    00001127: 	addq	$0x200, %rax
    0000112d: 	jmp	.Ltmp2099 # Offset: 4397
.Ltmp2051:
    00001132: 	movq	%r14, %rsi
    00001135: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000113c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4412
    00001141: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001148: 	jmp	.Ltmp2100 # Offset: 4424
.Ltmp2084:
    0000114d: 	movdqu	0x10(%rax), %xmm6
    00001152: 	movaps	%xmm6, 0xa0(%rsp)
    0000115a: 	jmp	.Ltmp2101 # Offset: 4442
.Ltmp2081:
    0000115f: 	movdqu	0x10(%rax), %xmm5
    00001164: 	movaps	%xmm5, 0xa0(%rsp)
    0000116c: 	jmp	.Ltmp2102 # Offset: 4460
.Ltmp2023:
    00001171: 	movq	%r14, %rsi
    00001174: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000117b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4475
    00001180: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001187: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000118e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001195: 	jne	.Ltmp2103 # Offset: 4501
.Ltmp2028:
    0000119b: 	movq	-0x8(%rdx), %rax
    0000119f: 	addq	$0x200, %rax
    000011a5: 	jmp	.Ltmp2103 # Offset: 4517
.Ltmp2016:
    000011aa: 	movdqu	0x10(%rax), %xmm5
    000011af: 	movaps	%xmm5, 0xa0(%rsp)
    000011b7: 	jmp	.Ltmp2104 # Offset: 4535
.Ltmp2044:
    000011bc: 	movdqu	0x10(%rax), %xmm7
    000011c1: 	movaps	%xmm7, 0xa0(%rsp)
    000011c9: 	jmp	.Ltmp2105 # Offset: 4553
.Ltmp2042:
    000011ce: 	movq	-0x8(%rdx), %rax
    000011d2: 	addq	$0x200, %rax
    000011d8: 	jmp	.Ltmp2106 # Offset: 4568
.Ltmp2037:
    000011dd: 	movq	%r14, %rsi
    000011e0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011e7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4583
    000011ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011f3: 	jmp	.Ltmp2107 # Offset: 4595
.Ltmp2030:
    000011f8: 	movdqu	0x10(%rax), %xmm6
    000011fd: 	movaps	%xmm6, 0xa0(%rsp)
    00001205: 	jmp	.Ltmp2108 # Offset: 4613
.Ltmp2027:
    0000120a: 	testq	%r15, %r15
    0000120d: 	je	.Ltmp2090 # Offset: 4621
    00001213: 	jmp	.Ltmp2109 # Offset: 4627
    00001218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2055:
    00001220: 	testq	%rbx, %rbx
    00001223: 	je	.Ltmp2110 # Offset: 4643
    00001229: 	jmp	.Ltmp2111 # Offset: 4649
    0000122b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2041:
    00001230: 	testq	%r15, %r15
    00001233: 	je	.Ltmp2112 # Offset: 4659
    00001239: 	jmp	.Ltmp2113 # Offset: 4665
    0000123b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2054:
    00001240: 	movq	0x20(%rsp), %rsi
    00001245: 	xorl	%edx, %edx
    00001247: 	movq	%r15, %rdi
    0000124a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4682
    0000124f: 	movq	%rax, (%r15)
    00001252: 	movq	%rax, %rdi
    00001255: 	movq	0x30(%rsp), %rax
    0000125a: 	movq	%rax, 0x10(%r15)
.Ltmp2111:
    0000125e: 	movq	0x28(%rsp), %rsi
    00001263: 	movq	%rbx, %rdx
    00001266: 	callq	memcpy@PLT # Offset: 4710
    0000126b: 	movq	0x30(%rsp), %rbx
    00001270: 	movq	(%r15), %rdi
    00001273: 	jmp	.Ltmp2110 # Offset: 4723
.Ltmp2040:
    00001278: 	movq	0x20(%rsp), %rsi
    0000127d: 	xorl	%edx, %edx
    0000127f: 	movq	%rbx, %rdi
    00001282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4738
    00001287: 	movq	%rax, (%rbx)
    0000128a: 	movq	%rax, %rdi
    0000128d: 	movq	0x30(%rsp), %rax
    00001292: 	movq	%rax, 0x10(%rbx)
.Ltmp2113:
    00001296: 	movq	0x28(%rsp), %rsi
    0000129b: 	movq	%r15, %rdx
    0000129e: 	callq	memcpy@PLT # Offset: 4766
    000012a3: 	movq	0x30(%rsp), %r15
    000012a8: 	movq	(%rbx), %rdi
    000012ab: 	jmp	.Ltmp2112 # Offset: 4779
.Ltmp2039:
    000012b0: 	leaq	DATAat0x32158(%rip), %rdi
    000012b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4791
.Ltmp2053:
    000012bc: 	leaq	DATAat0x32158(%rip), %rdi
    000012c3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4803
.Ltmp2077:
    000012c8: 	leaq	DATAat0x32158(%rip), %rdi
    000012cf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4815
.Ltmp2080:
    000012d4: 	leaq	DATAat0x32182(%rip), %rdi
    000012db: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4827
.Ltmp2089:
    000012e0: 	callq	__stack_chk_fail@PLT # Offset: 4832
.Ltmp2025:
    000012e5: 	leaq	DATAat0x32158(%rip), %rdi
    000012ec: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4844
.Ltmp2091:
    000012f1: 	movq	0x10(%rsp), %rdi
    000012f6: 	jmp	.Ltmp2114 # Offset: 4854
    000012fb: 	endbr64
.Ltmp2118:
    000012ff: 	movq	%rax, %rbp
    00001302: 	jmp	.Ltmp2115 # Offset: 4866
    00001304: 	endbr64
.Ltmp2119:
    00001308: 	movq	%rax, %rbp
    0000130b: 	movq	0x90(%rsp), %rdi
    00001313: 	cmpq	(%rsp), %rdi
    00001317: 	je	.Ltmp2115 # Offset: 4887
    00001319: 	movq	0xa0(%rsp), %rax
    00001321: 	leaq	0x1(%rax), %rsi
    00001325: 	callq	_ZdlPvm@PLT # Offset: 4901
.Ltmp2115:
    0000132a: 	movq	0x70(%rsp), %rdi
    0000132f: 	cmpq	0x10(%rsp), %rdi
    00001334: 	je	.Ltmp2116 # Offset: 4916
.Ltmp2123:
    00001336: 	movq	0x80(%rsp), %rax
    0000133e: 	leaq	0x1(%rax), %rsi
    00001342: 	callq	_ZdlPvm@PLT # Offset: 4930
.Ltmp2116:
    00001347: 	movq	0x50(%rsp), %rdi
    0000134c: 	cmpq	0x18(%rsp), %rdi
    00001351: 	je	.Ltmp2117 # Offset: 4945
    00001353: 	movq	0x60(%rsp), %rax
    00001358: 	leaq	0x1(%rax), %rsi
    0000135c: 	callq	_ZdlPvm@PLT # Offset: 4956
.Ltmp2117:
    00001361: 	movq	%rbp, %rdi
    00001364: 	callq	_Unwind_Resume@PLT # Offset: 4964
    00001369: 	endbr64
    0000136d: 	movq	%rax, %rbp
    00001370: 	jmp	.Ltmp2116 # Offset: 4976
    00001372: 	endbr64
    00001376: 	jmp	.Ltmp2118 # Offset: 4982
    00001378: 	endbr64
    0000137c: 	jmp	.Ltmp2119 # Offset: 4988
    0000137e: 	endbr64
.Ltmp2124:
    00001382: 	movq	%rax, %rbp
    00001385: 	jmp	.Ltmp2120 # Offset: 4997
    00001387: 	endbr64
    0000138b: 	jmp	.Ltmp2118 # Offset: 5003
    00001390: 	endbr64
    00001394: 	jmp	.Ltmp2118 # Offset: 5012
    00001399: 	endbr64
    0000139d: 	jmp	.Ltmp2119 # Offset: 5021
    000013a2: 	endbr64
    000013a6: 	movq	%rax, %rbp
    000013a9: 	jmp	.Ltmp2121 # Offset: 5033
    000013ab: 	endbr64
    000013af: 	movq	%rax, %rbp
    000013b2: 	jmp	.Ltmp2122 # Offset: 5042
.Ltmp2121:
    000013b4: 	movq	0x90(%rsp), %rdi
    000013bc: 	cmpq	(%rsp), %rdi
    000013c0: 	je	.Ltmp2122 # Offset: 5056
    000013c2: 	movq	0xa0(%rsp), %rax
    000013ca: 	leaq	0x1(%rax), %rsi
    000013ce: 	callq	_ZdlPvm@PLT # Offset: 5070
.Ltmp2122:
    000013d3: 	movq	0x70(%rsp), %rdi
    000013d8: 	leaq	0x80(%rsp), %rax
    000013e0: 	cmpq	%rax, %rdi
    000013e3: 	jne	.Ltmp2123 # Offset: 5091
    000013e9: 	jmp	.Ltmp2116 # Offset: 5097
    000013ee: 	endbr64
    000013f2: 	jmp	.Ltmp2124 # Offset: 5106
.Ltmp2120:
    000013f4: 	movq	0x90(%rsp), %rdi
    000013fc: 	cmpq	(%rsp), %rdi
    00001400: 	je	.Ltmp2116 # Offset: 5120
    00001406: 	movq	0xa0(%rsp), %rax
    0000140e: 	leaq	0x1(%rax), %rsi
    00001412: 	callq	_ZdlPvm@PLT # Offset: 5138
    00001417: 	jmp	.Ltmp2116 # Offset: 5143
    0000141c: 	endbr64
    00001420: 	jmp	.Ltmp2118 # Offset: 5152
    00001425: 	endbr64
    00001429: 	jmp	.Ltmp2118 # Offset: 5161
    0000142e: 	endbr64
    00001432: 	jmp	.Ltmp2119 # Offset: 5170
    00001437: 	endbr64
    0000143b: 	jmp	.Ltmp2118 # Offset: 5179
    00001440: 	endbr64
    00001444: 	jmp	.Ltmp2119 # Offset: 5188
    00001449: 	endbr64
    0000144d: 	jmp	.Ltmp2124 # Offset: 5197
    00001452: 	endbr64
    00001456: 	jmp	.Ltmp2124 # Offset: 5206
    0000145b: 	endbr64
    0000145f: 	jmp	.Ltmp2119 # Offset: 5215
    00001464: 	endbr64
    00001468: 	jmp	.Ltmp2118 # Offset: 5224
    0000146d: 	endbr64
    00001471: 	jmp	.Ltmp2118 # Offset: 5233
    00001476: 	endbr64
    0000147a: 	jmp	.Ltmp2119 # Offset: 5242
    0000147f: 	endbr64
    00001483: 	jmp	.Ltmp2118 # Offset: 5251
    00001488: 	endbr64
    0000148c: 	jmp	.Ltmp2119 # Offset: 5260
    00001491: 	endbr64
    00001495: 	jmp	.Ltmp2118 # Offset: 5269
    0000149a: 	endbr64
    0000149e: 	jmp	.Ltmp2119 # Offset: 5278
    000014a3: 	endbr64
    000014a7: 	jmp	.Ltmp2119 # Offset: 5287
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvv"

Binary Function "_Z11TestOneTypeIaEvv" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x2cd70
  Size        : 0x2562
  MaxSize     : 0x2570
  Offset      : 0x2cd70
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIaEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf48, %rsp
    00000039: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    00000041: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm5
    00000049: 	movq	%fs:0x28, %rax
    00000052: 	movq	%rax, 0x3f38(%rsp)
    0000005a: 	xorl	%eax, %eax
    0000005c: 	leaq	0x60(%rsp), %rax
    00000061: 	leaq	0x30(%rsp), %rdi
    00000066: 	movl	$0x38746e69, 0x60(%rsp)
    0000006e: 	movq	%rax, 0x20(%rsp)
    00000073: 	leaq	0x70(%rsp), %r15
    00000078: 	leaq	0xb0(%rsp), %rbp
    00000080: 	movq	%rax, 0x50(%rsp)
    00000085: 	movl	$0x745f, %eax
    0000008a: 	leaq	0x1ff0(%rsp), %r12
    00000092: 	movw	%ax, 0x64(%rsp)
    00000097: 	movq	%rdi, 0x18(%rsp)
    0000009c: 	movq	$0x6, 0x58(%rsp)
    000000a5: 	movb	$0x0, 0x66(%rsp)
    000000aa: 	movaps	%xmm4, 0x30(%rsp)
    000000af: 	movaps	%xmm5, 0x40(%rsp)
    000000b4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 180
    000000b9: 	movzbl	init_value(%rip), %eax
    000000c0: 	movl	$0x3e8, %ecx
    000000c5: 	movq	%rbp, %rdi
    000000c8: 	movabsq	$0x101010101010101, %rdx
    000000d2: 	imulq	%rdx, %rax
    000000d6: 	leaq	DATAat0x321d8(%rip), %rdx
    000000dd: 	rep		stosq	%rax, %es:(%rdi)
    000000e0: 	movl	$0x3e8, %ecx
    000000e5: 	movq	%r12, %rdi
    000000e8: 	rep		stosq	%rax, %es:(%rdi)
    000000eb: 	leaq	0x50(%rsp), %rax
    000000f0: 	movq	%r15, %rdi
    000000f3: 	movq	%rax, %rsi
    000000f6: 	movq	%rax, 0x8(%rsp)
    000000fb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 251
    00000100: 	movq	0x58(%rsp), %rdx
    00000105: 	movq	0x50(%rsp), %rsi
    0000010a: 	movq	%r15, %rdi
    0000010d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 269
    00000112: 	leaq	0xa0(%rsp), %rsi
    0000011a: 	leaq	0x10(%rax), %rdx
    0000011e: 	movq	%rsi, 0x90(%rsp)
    00000126: 	movq	(%rax), %rcx
    00000129: 	movq	%rsi, (%rsp)
    0000012d: 	cmpq	%rdx, %rcx
    00000130: 	je	.Ltmp2125 # Offset: 304
    00000136: 	movq	%rcx, 0x90(%rsp)
    0000013e: 	movq	0x10(%rax), %rcx
    00000142: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2276:
    0000014a: 	movq	0x8(%rax), %rcx
    0000014e: 	leaq	0x90(%rsp), %r13
    00000156: 	movq	%r12, %rsi
    00000159: 	movq	%rbp, %rdi
    0000015c: 	movq	%r13, %r8
    0000015f: 	movq	%rcx, 0x98(%rsp)
    00000167: 	leaq	_Z17inner_product_stdIPKaaET0_T_S3_m(%rip), %rcx
    0000016e: 	movq	%rdx, (%rax)
    00000171: 	movl	$0x1f40, %edx
    00000176: 	movq	$0x0, 0x8(%rax)
    0000017e: 	movb	$0x0, 0x10(%rax)
    00000182: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 386
    00000187: 	movq	0x90(%rsp), %rdi
    0000018f: 	cmpq	(%rsp), %rdi
    00000193: 	je	.Ltmp2126 # Offset: 403
    00000195: 	movq	0xa0(%rsp), %rax
    0000019d: 	leaq	0x1(%rax), %rsi
    000001a1: 	callq	_ZdlPvm@PLT # Offset: 417
.Ltmp2126:
    000001a6: 	movq	0x70(%rsp), %rdi
    000001ab: 	leaq	0x80(%rsp), %rax
    000001b3: 	movq	%rax, 0x10(%rsp)
    000001b8: 	cmpq	%rax, %rdi
    000001bb: 	je	.Ltmp2127 # Offset: 443
    000001bd: 	movq	0x80(%rsp), %rax
    000001c5: 	leaq	0x1(%rax), %rsi
    000001c9: 	callq	_ZdlPvm@PLT # Offset: 457
.Ltmp2127:
    000001ce: 	movq	0x8(%rsp), %rsi
    000001d3: 	leaq	DATAat0x32478(%rip), %rdx
    000001da: 	movq	%r13, %rdi
    000001dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 477
    000001e2: 	callq	clock@PLT # Offset: 482
    000001e7: 	movl	iterations(%rip), %ecx
    000001ed: 	xorl	%ebx, %ebx
    000001ef: 	leaq	DATAat0x321c8(%rip), %r14
    000001f6: 	movq	%rax, start_time(%rip)
    000001fd: 	testl	%ecx, %ecx
    000001ff: 	jle	.Ltmp2128 # Offset: 511
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp2131:
    00000208: 	pxor	%xmm2, %xmm2
    0000020c: 	xorl	%eax, %eax
    0000020e: 	movdqa	%xmm2, %xmm6
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2129:
    00000218: 	movdqa	(%rbp,%rax), %xmm0
    0000021e: 	movdqa	(%r12,%rax), %xmm1
    00000224: 	pxor	%xmm5, %xmm5
    00000228: 	pxor	%xmm4, %xmm4
    0000022c: 	addq	$0x10, %rax
    00000230: 	pcmpgtb	%xmm1, %xmm5
    00000234: 	pcmpgtb	%xmm0, %xmm4
    00000238: 	movdqa	%xmm1, %xmm7
    0000023c: 	movdqa	%xmm0, %xmm3
    00000240: 	punpcklbw	%xmm5, %xmm7
    00000244: 	punpcklbw	%xmm4, %xmm3
    00000248: 	punpckhbw	%xmm5, %xmm1
    0000024c: 	punpckhbw	%xmm4, %xmm0
    00000250: 	pmullw	%xmm7, %xmm3
    00000254: 	pmullw	%xmm1, %xmm0
    00000258: 	paddw	%xmm3, %xmm6
    0000025c: 	paddw	%xmm0, %xmm2
    00000260: 	cmpq	$0x1f40, %rax
    00000266: 	jne	.Ltmp2129 # Offset: 614
    00000268: 	paddw	%xmm6, %xmm2
    0000026c: 	movl	init_value(%rip), %eax
    00000272: 	movdqa	%xmm2, %xmm0
    00000276: 	psrldq	$0x8, %xmm0
    0000027b: 	imull	%eax, %eax
    0000027e: 	paddw	%xmm0, %xmm2
    00000282: 	movdqa	%xmm2, %xmm0
    00000286: 	psrldq	$0x4, %xmm0
    0000028b: 	shll	$0x6, %eax
    0000028e: 	paddw	%xmm0, %xmm2
    00000292: 	movdqa	%xmm2, %xmm0
    00000296: 	psrldq	$0x2, %xmm0
    0000029b: 	paddw	%xmm0, %xmm2
    0000029f: 	pextrw	$0x0, %xmm2, %edx
    000002a4: 	cmpb	%dl, %al
    000002a6: 	jne	.Ltmp2130 # Offset: 678
.Ltmp2260:
    000002ac: 	addl	$0x1, %ebx
    000002af: 	cmpl	%ecx, %ebx
    000002b1: 	jl	.Ltmp2131 # Offset: 689
.Ltmp2128:
    000002b7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000002c5: 	subq	$0x20, %rax
    000002c9: 	cmpq	%rax, %rbx
    000002cc: 	je	.Ltmp2132 # Offset: 716
    000002d2: 	leaq	0x10(%rbx), %rdi
    000002d6: 	movq	0x98(%rsp), %r14
    000002de: 	movq	%rdi, (%rbx)
    000002e1: 	movq	0x90(%rsp), %rax
    000002e9: 	movq	%rax, %rsi
    000002ec: 	movq	%rax, 0x28(%rsp)
    000002f1: 	addq	%r14, %rsi
    000002f4: 	je	.Ltmp2133 # Offset: 756
    000002f6: 	testq	%rax, %rax
    000002f9: 	je	.Ltmp2134 # Offset: 761
.Ltmp2133:
    000002ff: 	movq	%r14, 0x30(%rsp)
    00000304: 	cmpq	$0xf, %r14
    00000308: 	ja	.Ltmp2135 # Offset: 776
    0000030e: 	cmpq	$0x1, %r14
    00000312: 	jne	.Ltmp2136 # Offset: 786
    00000318: 	movq	0x28(%rsp), %rax
    0000031d: 	movzbl	(%rax), %eax
    00000320: 	movb	%al, 0x10(%rbx)
.Ltmp2261:
    00000323: 	movq	%r14, 0x8(%rbx)
    00000327: 	movb	$0x0, (%rdi,%r14)
    0000032c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000333: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033a: 	addq	$0x20, %rax
    0000033e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000345: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000034c: 	je	.Ltmp2137 # Offset: 844
.Ltmp2275:
    00000352: 	movq	-0x20(%rax), %r14
    00000356: 	callq	clock@PLT # Offset: 854
    0000035b: 	pxor	%xmm0, %xmm0
    0000035f: 	movq	%rax, end_time(%rip)
    00000366: 	movq	%r14, %rdi
    00000369: 	subq	start_time(%rip), %rax
    00000370: 	cvtsi2sd	%rax, %xmm0
    00000375: 	divsd	DATAat0x32600(%rip), %xmm0
    0000037d: 	callq	_Z13record_resultdPKc # Offset: 893
    00000382: 	movq	0x90(%rsp), %rdi
    0000038a: 	cmpq	(%rsp), %rdi
    0000038e: 	je	.Ltmp2138 # Offset: 910
    00000390: 	movq	0xa0(%rsp), %rax
    00000398: 	leaq	0x1(%rax), %rsi
    0000039c: 	callq	_ZdlPvm@PLT # Offset: 924
.Ltmp2138:
    000003a1: 	movq	0x8(%rsp), %rsi
    000003a6: 	leaq	DATAat0x32370(%rip), %rdx
    000003ad: 	movq	%r13, %rdi
    000003b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 944
    000003b5: 	callq	clock@PLT # Offset: 949
    000003ba: 	movl	iterations(%rip), %ecx
    000003c0: 	xorl	%ebx, %ebx
    000003c2: 	leaq	DATAat0x321c8(%rip), %r14
    000003c9: 	movq	%rax, start_time(%rip)
    000003d0: 	testl	%ecx, %ecx
    000003d2: 	jle	.Ltmp2139 # Offset: 978
    000003d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2142:
    000003e0: 	pxor	%xmm1, %xmm1
    000003e4: 	pxor	%xmm5, %xmm5
    000003e8: 	pxor	%xmm4, %xmm4
    000003ec: 	xorl	%eax, %eax
    000003ee: 	nop # Size: 2
.Ltmp2140:
    000003f0: 	movdqa	(%rbp,%rax), %xmm0
    000003f6: 	movdqa	(%r12,%rax), %xmm2
    000003fc: 	movdqa	%xmm5, %xmm7
    00000400: 	movdqa	%xmm5, %xmm6
    00000404: 	addq	$0x10, %rax
    00000408: 	pcmpgtb	%xmm0, %xmm6
    0000040c: 	pcmpgtb	%xmm2, %xmm7
    00000410: 	movdqa	%xmm2, %xmm8
    00000415: 	movdqa	%xmm0, %xmm3
    00000419: 	punpcklbw	%xmm6, %xmm3
    0000041d: 	punpcklbw	%xmm7, %xmm8
    00000422: 	punpckhbw	%xmm7, %xmm2
    00000426: 	pmullw	%xmm8, %xmm3
    0000042b: 	punpckhbw	%xmm6, %xmm0
    0000042f: 	movdqa	%xmm4, %xmm6
    00000433: 	pmullw	%xmm2, %xmm0
    00000437: 	pcmpgtw	%xmm3, %xmm6
    0000043b: 	movdqa	%xmm3, %xmm2
    0000043f: 	punpcklwd	%xmm6, %xmm2
    00000443: 	punpckhwd	%xmm6, %xmm3
    00000447: 	paddd	%xmm2, %xmm1
    0000044b: 	movdqa	%xmm4, %xmm2
    0000044f: 	pcmpgtw	%xmm0, %xmm2
    00000453: 	paddd	%xmm3, %xmm1
    00000457: 	movdqa	%xmm0, %xmm3
    0000045b: 	punpcklwd	%xmm2, %xmm3
    0000045f: 	punpckhwd	%xmm2, %xmm0
    00000463: 	paddd	%xmm3, %xmm1
    00000467: 	paddd	%xmm0, %xmm1
    0000046b: 	cmpq	$0x1f40, %rax
    00000471: 	jne	.Ltmp2140 # Offset: 1137
    00000477: 	movdqa	%xmm1, %xmm0
    0000047b: 	movl	init_value(%rip), %eax
    00000481: 	psrldq	$0x8, %xmm0
    00000486: 	imull	%eax, %eax
    00000489: 	paddd	%xmm0, %xmm1
    0000048d: 	movdqa	%xmm1, %xmm0
    00000491: 	psrldq	$0x4, %xmm0
    00000496: 	paddd	%xmm0, %xmm1
    0000049a: 	shll	$0x6, %eax
    0000049d: 	movd	%xmm1, %edx
    000004a1: 	cmpb	%dl, %al
    000004a3: 	jne	.Ltmp2141 # Offset: 1187
.Ltmp2262:
    000004a9: 	addl	$0x1, %ebx
    000004ac: 	cmpl	%ecx, %ebx
    000004ae: 	jl	.Ltmp2142 # Offset: 1198
.Ltmp2139:
    000004b4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000004bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000004c2: 	subq	$0x20, %rax
    000004c6: 	cmpq	%rax, %rbx
    000004c9: 	je	.Ltmp2143 # Offset: 1225
    000004cf: 	leaq	0x10(%rbx), %rdi
    000004d3: 	movq	0x98(%rsp), %r14
    000004db: 	movq	%rdi, (%rbx)
    000004de: 	movq	0x90(%rsp), %rax
    000004e6: 	movq	%rax, %rsi
    000004e9: 	movq	%rax, 0x28(%rsp)
    000004ee: 	addq	%r14, %rsi
    000004f1: 	je	.Ltmp2144 # Offset: 1265
    000004f3: 	testq	%rax, %rax
    000004f6: 	je	.Ltmp2145 # Offset: 1270
.Ltmp2144:
    000004fc: 	movq	%r14, 0x30(%rsp)
    00000501: 	cmpq	$0xf, %r14
    00000505: 	ja	.Ltmp2146 # Offset: 1285
    0000050b: 	cmpq	$0x1, %r14
    0000050f: 	jne	.Ltmp2147 # Offset: 1295
    00000515: 	movq	0x28(%rsp), %rax
    0000051a: 	movzbl	(%rax), %eax
    0000051d: 	movb	%al, 0x10(%rbx)
.Ltmp2308:
    00000520: 	movq	%r14, 0x8(%rbx)
    00000524: 	movb	$0x0, (%rdi,%r14)
    00000529: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000530: 	addq	$0x20, %rax
    00000534: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2281:
    0000053b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000542: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000549: 	je	.Ltmp2148 # Offset: 1353
.Ltmp2272:
    0000054f: 	movq	-0x20(%rax), %r14
    00000553: 	callq	clock@PLT # Offset: 1363
    00000558: 	pxor	%xmm0, %xmm0
    0000055c: 	movq	%rax, end_time(%rip)
    00000563: 	movq	%r14, %rdi
    00000566: 	subq	start_time(%rip), %rax
    0000056d: 	cvtsi2sd	%rax, %xmm0
    00000572: 	divsd	DATAat0x32600(%rip), %xmm0
    0000057a: 	callq	_Z13record_resultdPKc # Offset: 1402
    0000057f: 	movq	0x90(%rsp), %rdi
    00000587: 	cmpq	(%rsp), %rdi
    0000058b: 	je	.Ltmp2149 # Offset: 1419
    0000058d: 	movq	0xa0(%rsp), %rax
    00000595: 	leaq	0x1(%rax), %rsi
    00000599: 	callq	_ZdlPvm@PLT # Offset: 1433
.Ltmp2149:
    0000059e: 	movq	0x8(%rsp), %rsi
    000005a3: 	leaq	DATAat0x322c8(%rip), %rdx
    000005aa: 	movq	%r13, %rdi
    000005ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1453
    000005b2: 	callq	clock@PLT # Offset: 1458
    000005b7: 	movl	iterations(%rip), %ecx
    000005bd: 	xorl	%ebx, %ebx
    000005bf: 	leaq	DATAat0x321c8(%rip), %r14
    000005c6: 	movq	%rax, start_time(%rip)
    000005cd: 	testl	%ecx, %ecx
    000005cf: 	jle	.Ltmp2150 # Offset: 1487
    000005d5: 	nopl	(%rax) # Size: 3
.Ltmp2153:
    000005d8: 	pxor	%xmm0, %xmm0
    000005dc: 	pxor	%xmm5, %xmm5
    000005e0: 	pxor	%xmm4, %xmm4
    000005e4: 	xorl	%eax, %eax
    000005e6: 	pxor	%xmm3, %xmm3
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2151:
    000005f0: 	movdqa	(%rbp,%rax), %xmm1
    000005f6: 	movdqa	(%r12,%rax), %xmm6
    000005fc: 	movdqa	%xmm5, %xmm7
    00000600: 	addq	$0x10, %rax
    00000604: 	movdqa	%xmm5, %xmm8
    00000609: 	pcmpgtb	%xmm6, %xmm8
    0000060e: 	pcmpgtb	%xmm1, %xmm7
    00000612: 	movdqa	%xmm6, %xmm9
    00000617: 	movdqa	%xmm1, %xmm2
    0000061b: 	punpcklbw	%xmm8, %xmm9
    00000620: 	punpcklbw	%xmm7, %xmm2
    00000624: 	punpckhbw	%xmm8, %xmm6
    00000629: 	pmullw	%xmm9, %xmm2
    0000062e: 	punpckhbw	%xmm7, %xmm1
    00000632: 	movdqa	%xmm4, %xmm9
    00000637: 	pmullw	%xmm6, %xmm1
    0000063b: 	movdqa	%xmm4, %xmm6
    0000063f: 	pcmpgtw	%xmm2, %xmm6
    00000643: 	movdqa	%xmm2, %xmm8
    00000648: 	pcmpgtw	%xmm1, %xmm9
    0000064d: 	movdqa	%xmm1, %xmm7
    00000651: 	punpcklwd	%xmm6, %xmm8
    00000656: 	punpckhwd	%xmm6, %xmm2
    0000065a: 	movdqa	%xmm1, %xmm6
    0000065e: 	punpcklwd	%xmm9, %xmm7
    00000663: 	punpckhwd	%xmm9, %xmm6
    00000668: 	movdqa	%xmm3, %xmm9
    0000066d: 	pcmpgtd	%xmm8, %xmm9
    00000672: 	movdqa	%xmm8, %xmm1
    00000677: 	punpckldq	%xmm9, %xmm1
    0000067c: 	punpckhdq	%xmm9, %xmm8
    00000681: 	paddq	%xmm1, %xmm0
    00000685: 	movdqa	%xmm3, %xmm1
    00000689: 	pcmpgtd	%xmm2, %xmm1
    0000068d: 	paddq	%xmm8, %xmm0
    00000692: 	movdqa	%xmm2, %xmm8
    00000697: 	punpckldq	%xmm1, %xmm8
    0000069c: 	punpckhdq	%xmm1, %xmm2
    000006a0: 	movdqa	%xmm7, %xmm1
    000006a4: 	paddq	%xmm8, %xmm0
    000006a9: 	paddq	%xmm2, %xmm0
    000006ad: 	movdqa	%xmm3, %xmm2
    000006b1: 	pcmpgtd	%xmm7, %xmm2
    000006b5: 	punpckldq	%xmm2, %xmm1
    000006b9: 	paddq	%xmm1, %xmm0
    000006bd: 	movdqa	%xmm7, %xmm1
    000006c1: 	punpckhdq	%xmm2, %xmm1
    000006c5: 	movdqa	%xmm3, %xmm2
    000006c9: 	pcmpgtd	%xmm6, %xmm2
    000006cd: 	paddq	%xmm1, %xmm0
    000006d1: 	movdqa	%xmm6, %xmm1
    000006d5: 	punpckldq	%xmm2, %xmm1
    000006d9: 	paddq	%xmm1, %xmm0
    000006dd: 	movdqa	%xmm6, %xmm1
    000006e1: 	punpckhdq	%xmm2, %xmm1
    000006e5: 	paddq	%xmm1, %xmm0
    000006e9: 	cmpq	$0x1f40, %rax
    000006ef: 	jne	.Ltmp2151 # Offset: 1775
    000006f5: 	movl	init_value(%rip), %eax
    000006fb: 	movdqa	%xmm0, %xmm1
    000006ff: 	psrldq	$0x8, %xmm1
    00000704: 	imull	%eax, %eax
    00000707: 	paddq	%xmm1, %xmm0
    0000070b: 	movq	%xmm0, %rdx
    00000710: 	shll	$0x6, %eax
    00000713: 	cmpb	%dl, %al
    00000715: 	jne	.Ltmp2152 # Offset: 1813
.Ltmp2265:
    0000071b: 	addl	$0x1, %ebx
    0000071e: 	cmpl	%ecx, %ebx
    00000720: 	jl	.Ltmp2153 # Offset: 1824
.Ltmp2150:
    00000726: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000072d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000734: 	subq	$0x20, %rax
    00000738: 	cmpq	%rax, %rbx
    0000073b: 	je	.Ltmp2154 # Offset: 1851
    00000741: 	leaq	0x10(%rbx), %rdi
    00000745: 	movq	0x98(%rsp), %r14
    0000074d: 	movq	%rdi, (%rbx)
    00000750: 	movq	0x90(%rsp), %rax
    00000758: 	movq	%rax, %rsi
    0000075b: 	movq	%rax, 0x28(%rsp)
    00000760: 	addq	%r14, %rsi
    00000763: 	je	.Ltmp2155 # Offset: 1891
    00000765: 	testq	%rax, %rax
    00000768: 	je	.Ltmp2156 # Offset: 1896
.Ltmp2155:
    0000076e: 	movq	%r14, 0x30(%rsp)
    00000773: 	cmpq	$0xf, %r14
    00000777: 	ja	.Ltmp2157 # Offset: 1911
    0000077d: 	cmpq	$0x1, %r14
    00000781: 	jne	.Ltmp2158 # Offset: 1921
    00000787: 	movq	0x28(%rsp), %rax
    0000078c: 	movzbl	(%rax), %eax
    0000078f: 	movb	%al, 0x10(%rbx)
.Ltmp2311:
    00000792: 	movq	%r14, 0x8(%rbx)
    00000796: 	movb	$0x0, (%rdi,%r14)
    0000079b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007a2: 	addq	$0x20, %rax
    000007a6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2274:
    000007ad: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000007b4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007bb: 	je	.Ltmp2159 # Offset: 1979
.Ltmp2273:
    000007c1: 	movq	-0x20(%rax), %r14
    000007c5: 	callq	clock@PLT # Offset: 1989
    000007ca: 	pxor	%xmm0, %xmm0
    000007ce: 	movq	%rax, end_time(%rip)
    000007d5: 	movq	%r14, %rdi
    000007d8: 	subq	start_time(%rip), %rax
    000007df: 	cvtsi2sd	%rax, %xmm0
    000007e4: 	divsd	DATAat0x32600(%rip), %xmm0
    000007ec: 	callq	_Z13record_resultdPKc # Offset: 2028
    000007f1: 	movq	0x90(%rsp), %rdi
    000007f9: 	cmpq	(%rsp), %rdi
    000007fd: 	je	.Ltmp2160 # Offset: 2045
    000007ff: 	movq	0xa0(%rsp), %rax
    00000807: 	leaq	0x1(%rax), %rsi
    0000080b: 	callq	_ZdlPvm@PLT # Offset: 2059
.Ltmp2160:
    00000810: 	movq	0x8(%rsp), %rsi
    00000815: 	leaq	DATAat0x321f0(%rip), %rdx
    0000081c: 	movq	%r15, %rdi
    0000081f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2079
    00000824: 	movq	0x58(%rsp), %rdx
    00000829: 	movq	0x50(%rsp), %rsi
    0000082e: 	movq	%r15, %rdi
    00000831: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2097
    00000836: 	movq	(%rsp), %rsi
    0000083a: 	leaq	0x10(%rax), %rdx
    0000083e: 	movq	%rsi, 0x90(%rsp)
    00000846: 	movq	(%rax), %rcx
    00000849: 	cmpq	%rdx, %rcx
    0000084c: 	je	.Ltmp2161 # Offset: 2124
    00000852: 	movq	%rcx, 0x90(%rsp)
    0000085a: 	movq	0x10(%rax), %rcx
    0000085e: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2271:
    00000866: 	movq	0x8(%rax), %rcx
    0000086a: 	movq	%r13, %r8
    0000086d: 	movq	%r12, %rsi
    00000870: 	movq	%rbp, %rdi
    00000873: 	movq	%rcx, 0x98(%rsp)
    0000087b: 	leaq	_Z14inner_product1IPKaaET0_T_S3_m(%rip), %rcx
    00000882: 	movq	%rdx, (%rax)
    00000885: 	movl	$0x1f40, %edx
    0000088a: 	movq	$0x0, 0x8(%rax)
    00000892: 	movb	$0x0, 0x10(%rax)
    00000896: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2198
    0000089b: 	movq	0x90(%rsp), %rdi
    000008a3: 	cmpq	(%rsp), %rdi
    000008a7: 	je	.Ltmp2162 # Offset: 2215
    000008a9: 	movq	0xa0(%rsp), %rax
    000008b1: 	leaq	0x1(%rax), %rsi
    000008b5: 	callq	_ZdlPvm@PLT # Offset: 2229
.Ltmp2162:
    000008ba: 	movq	0x70(%rsp), %rdi
    000008bf: 	cmpq	0x10(%rsp), %rdi
    000008c4: 	je	.Ltmp2163 # Offset: 2244
    000008c6: 	movq	0x80(%rsp), %rax
    000008ce: 	leaq	0x1(%rax), %rsi
    000008d2: 	callq	_ZdlPvm@PLT # Offset: 2258
.Ltmp2163:
    000008d7: 	movq	0x8(%rsp), %rsi
    000008dc: 	leaq	DATAat0x32497(%rip), %rdx
    000008e3: 	movq	%r13, %rdi
    000008e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2278
    000008eb: 	callq	clock@PLT # Offset: 2283
    000008f0: 	movl	iterations(%rip), %ecx
    000008f6: 	xorl	%ebx, %ebx
    000008f8: 	leaq	DATAat0x321c8(%rip), %r14
    000008ff: 	movq	%rax, start_time(%rip)
    00000906: 	testl	%ecx, %ecx
    00000908: 	jle	.Ltmp2164 # Offset: 2312
    0000090e: 	nop # Size: 2
.Ltmp2167:
    00000910: 	pxor	%xmm2, %xmm2
    00000914: 	xorl	%eax, %eax
    00000916: 	movdqa	%xmm2, %xmm6
    0000091a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2165:
    00000920: 	movdqa	(%rbp,%rax), %xmm0
    00000926: 	movdqa	(%r12,%rax), %xmm1
    0000092c: 	pxor	%xmm5, %xmm5
    00000930: 	pxor	%xmm4, %xmm4
    00000934: 	addq	$0x10, %rax
    00000938: 	pcmpgtb	%xmm1, %xmm5
    0000093c: 	pcmpgtb	%xmm0, %xmm4
    00000940: 	movdqa	%xmm1, %xmm7
    00000944: 	movdqa	%xmm0, %xmm3
    00000948: 	punpcklbw	%xmm5, %xmm7
    0000094c: 	punpcklbw	%xmm4, %xmm3
    00000950: 	punpckhbw	%xmm5, %xmm1
    00000954: 	punpckhbw	%xmm4, %xmm0
    00000958: 	pmullw	%xmm7, %xmm3
    0000095c: 	pmullw	%xmm1, %xmm0
    00000960: 	paddw	%xmm3, %xmm6
    00000964: 	paddw	%xmm0, %xmm2
    00000968: 	cmpq	$0x1f40, %rax
    0000096e: 	jne	.Ltmp2165 # Offset: 2414
    00000970: 	paddw	%xmm6, %xmm2
    00000974: 	movl	init_value(%rip), %eax
    0000097a: 	movdqa	%xmm2, %xmm0
    0000097e: 	psrldq	$0x8, %xmm0
    00000983: 	imull	%eax, %eax
    00000986: 	paddw	%xmm0, %xmm2
    0000098a: 	movdqa	%xmm2, %xmm0
    0000098e: 	psrldq	$0x4, %xmm0
    00000993: 	shll	$0x6, %eax
    00000996: 	paddw	%xmm0, %xmm2
    0000099a: 	movdqa	%xmm2, %xmm0
    0000099e: 	psrldq	$0x2, %xmm0
    000009a3: 	paddw	%xmm0, %xmm2
    000009a7: 	pextrw	$0x0, %xmm2, %edx
    000009ac: 	cmpb	%dl, %al
    000009ae: 	jne	.Ltmp2166 # Offset: 2478
.Ltmp2264:
    000009b4: 	addl	$0x1, %ebx
    000009b7: 	cmpl	%ecx, %ebx
    000009b9: 	jl	.Ltmp2167 # Offset: 2489
.Ltmp2164:
    000009bf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000009c6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000009cd: 	subq	$0x20, %rax
    000009d1: 	cmpq	%rax, %rbx
    000009d4: 	je	.Ltmp2168 # Offset: 2516
    000009da: 	leaq	0x10(%rbx), %rdi
    000009de: 	movq	0x98(%rsp), %r14
    000009e6: 	movq	%rdi, (%rbx)
    000009e9: 	movq	0x90(%rsp), %rax
    000009f1: 	movq	%rax, %rsi
    000009f4: 	movq	%rax, 0x28(%rsp)
    000009f9: 	addq	%r14, %rsi
    000009fc: 	je	.Ltmp2169 # Offset: 2556
    000009fe: 	testq	%rax, %rax
    00000a01: 	je	.Ltmp2170 # Offset: 2561
.Ltmp2169:
    00000a07: 	movq	%r14, 0x30(%rsp)
    00000a0c: 	cmpq	$0xf, %r14
    00000a10: 	ja	.Ltmp2171 # Offset: 2576
    00000a16: 	cmpq	$0x1, %r14
    00000a1a: 	jne	.Ltmp2172 # Offset: 2586
    00000a20: 	movq	0x28(%rsp), %rax
    00000a25: 	movzbl	(%rax), %eax
    00000a28: 	movb	%al, 0x10(%rbx)
.Ltmp2301:
    00000a2b: 	movq	%r14, 0x8(%rbx)
    00000a2f: 	movb	$0x0, (%rdi,%r14)
    00000a34: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a3b: 	addq	$0x20, %rax
    00000a3f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2286:
    00000a46: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a4d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a54: 	je	.Ltmp2173 # Offset: 2644
.Ltmp2283:
    00000a5a: 	movq	-0x20(%rax), %r14
    00000a5e: 	callq	clock@PLT # Offset: 2654
    00000a63: 	pxor	%xmm0, %xmm0
    00000a67: 	movq	%rax, end_time(%rip)
    00000a6e: 	movq	%r14, %rdi
    00000a71: 	subq	start_time(%rip), %rax
    00000a78: 	cvtsi2sd	%rax, %xmm0
    00000a7d: 	divsd	DATAat0x32600(%rip), %xmm0
    00000a85: 	callq	_Z13record_resultdPKc # Offset: 2693
    00000a8a: 	movq	0x90(%rsp), %rdi
    00000a92: 	cmpq	(%rsp), %rdi
    00000a96: 	je	.Ltmp2174 # Offset: 2710
    00000a98: 	movq	0xa0(%rsp), %rax
    00000aa0: 	leaq	0x1(%rax), %rsi
    00000aa4: 	callq	_ZdlPvm@PLT # Offset: 2724
.Ltmp2174:
    00000aa9: 	movq	0x8(%rsp), %rsi
    00000aae: 	leaq	DATAat0x3238f(%rip), %rdx
    00000ab5: 	movq	%r13, %rdi
    00000ab8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2744
    00000abd: 	callq	clock@PLT # Offset: 2749
    00000ac2: 	movl	iterations(%rip), %ecx
    00000ac8: 	xorl	%ebx, %ebx
    00000aca: 	leaq	DATAat0x321c8(%rip), %r14
    00000ad1: 	movq	%rax, start_time(%rip)
    00000ad8: 	testl	%ecx, %ecx
    00000ada: 	jle	.Ltmp2175 # Offset: 2778
.Ltmp2178:
    00000ae0: 	pxor	%xmm1, %xmm1
    00000ae4: 	pxor	%xmm5, %xmm5
    00000ae8: 	pxor	%xmm4, %xmm4
    00000aec: 	xorl	%eax, %eax
    00000aee: 	nop # Size: 2
.Ltmp2176:
    00000af0: 	movdqa	(%rbp,%rax), %xmm0
    00000af6: 	movdqa	(%r12,%rax), %xmm2
    00000afc: 	movdqa	%xmm5, %xmm7
    00000b00: 	movdqa	%xmm5, %xmm6
    00000b04: 	addq	$0x10, %rax
    00000b08: 	pcmpgtb	%xmm0, %xmm6
    00000b0c: 	pcmpgtb	%xmm2, %xmm7
    00000b10: 	movdqa	%xmm2, %xmm8
    00000b15: 	movdqa	%xmm0, %xmm3
    00000b19: 	punpcklbw	%xmm6, %xmm3
    00000b1d: 	punpcklbw	%xmm7, %xmm8
    00000b22: 	punpckhbw	%xmm7, %xmm2
    00000b26: 	pmullw	%xmm8, %xmm3
    00000b2b: 	punpckhbw	%xmm6, %xmm0
    00000b2f: 	movdqa	%xmm4, %xmm6
    00000b33: 	pmullw	%xmm2, %xmm0
    00000b37: 	pcmpgtw	%xmm3, %xmm6
    00000b3b: 	movdqa	%xmm3, %xmm2
    00000b3f: 	punpcklwd	%xmm6, %xmm2
    00000b43: 	punpckhwd	%xmm6, %xmm3
    00000b47: 	paddd	%xmm2, %xmm1
    00000b4b: 	movdqa	%xmm4, %xmm2
    00000b4f: 	pcmpgtw	%xmm0, %xmm2
    00000b53: 	paddd	%xmm3, %xmm1
    00000b57: 	movdqa	%xmm0, %xmm3
    00000b5b: 	punpcklwd	%xmm2, %xmm3
    00000b5f: 	punpckhwd	%xmm2, %xmm0
    00000b63: 	paddd	%xmm3, %xmm1
    00000b67: 	paddd	%xmm0, %xmm1
    00000b6b: 	cmpq	$0x1f40, %rax
    00000b71: 	jne	.Ltmp2176 # Offset: 2929
    00000b77: 	movdqa	%xmm1, %xmm0
    00000b7b: 	movl	init_value(%rip), %eax
    00000b81: 	psrldq	$0x8, %xmm0
    00000b86: 	imull	%eax, %eax
    00000b89: 	paddd	%xmm0, %xmm1
    00000b8d: 	movdqa	%xmm1, %xmm0
    00000b91: 	psrldq	$0x4, %xmm0
    00000b96: 	paddd	%xmm0, %xmm1
    00000b9a: 	shll	$0x6, %eax
    00000b9d: 	movd	%xmm1, %edx
    00000ba1: 	cmpb	%dl, %al
    00000ba3: 	jne	.Ltmp2177 # Offset: 2979
.Ltmp2263:
    00000ba9: 	addl	$0x1, %ebx
    00000bac: 	cmpl	%ecx, %ebx
    00000bae: 	jl	.Ltmp2178 # Offset: 2990
.Ltmp2175:
    00000bb4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000bbb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000bc2: 	subq	$0x20, %rax
    00000bc6: 	cmpq	%rax, %rbx
    00000bc9: 	je	.Ltmp2179 # Offset: 3017
    00000bcf: 	leaq	0x10(%rbx), %rdi
    00000bd3: 	movq	0x98(%rsp), %r14
    00000bdb: 	movq	%rdi, (%rbx)
    00000bde: 	movq	0x90(%rsp), %rax
    00000be6: 	movq	%rax, %rsi
    00000be9: 	movq	%rax, 0x28(%rsp)
    00000bee: 	addq	%r14, %rsi
    00000bf1: 	je	.Ltmp2180 # Offset: 3057
    00000bf3: 	testq	%rax, %rax
    00000bf6: 	je	.Ltmp2181 # Offset: 3062
.Ltmp2180:
    00000bfc: 	movq	%r14, 0x30(%rsp)
    00000c01: 	cmpq	$0xf, %r14
    00000c05: 	ja	.Ltmp2182 # Offset: 3077
    00000c0b: 	cmpq	$0x1, %r14
    00000c0f: 	jne	.Ltmp2183 # Offset: 3087
    00000c15: 	movq	0x28(%rsp), %rax
    00000c1a: 	movzbl	(%rax), %eax
    00000c1d: 	movb	%al, 0x10(%rbx)
.Ltmp2304:
    00000c20: 	movq	%r14, 0x8(%rbx)
    00000c24: 	movb	$0x0, (%rdi,%r14)
    00000c29: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c30: 	addq	$0x20, %rax
    00000c34: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2282:
    00000c3b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000c42: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c49: 	je	.Ltmp2184 # Offset: 3145
.Ltmp2278:
    00000c4f: 	movq	-0x20(%rax), %r14
    00000c53: 	callq	clock@PLT # Offset: 3155
    00000c58: 	pxor	%xmm0, %xmm0
    00000c5c: 	movq	%rax, end_time(%rip)
    00000c63: 	movq	%r14, %rdi
    00000c66: 	subq	start_time(%rip), %rax
    00000c6d: 	cvtsi2sd	%rax, %xmm0
    00000c72: 	divsd	DATAat0x32600(%rip), %xmm0
    00000c7a: 	callq	_Z13record_resultdPKc # Offset: 3194
    00000c7f: 	movq	0x90(%rsp), %rdi
    00000c87: 	cmpq	(%rsp), %rdi
    00000c8b: 	je	.Ltmp2185 # Offset: 3211
    00000c8d: 	movq	0xa0(%rsp), %rax
    00000c95: 	leaq	0x1(%rax), %rsi
    00000c99: 	callq	_ZdlPvm@PLT # Offset: 3225
.Ltmp2185:
    00000c9e: 	movq	0x8(%rsp), %rsi
    00000ca3: 	leaq	DATAat0x322e7(%rip), %rdx
    00000caa: 	movq	%r13, %rdi
    00000cad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3245
    00000cb2: 	callq	clock@PLT # Offset: 3250
    00000cb7: 	movl	iterations(%rip), %ecx
    00000cbd: 	xorl	%ebx, %ebx
    00000cbf: 	leaq	DATAat0x321c8(%rip), %r14
    00000cc6: 	movq	%rax, start_time(%rip)
    00000ccd: 	testl	%ecx, %ecx
    00000ccf: 	jle	.Ltmp2186 # Offset: 3279
    00000cd5: 	nopl	(%rax) # Size: 3
.Ltmp2189:
    00000cd8: 	pxor	%xmm0, %xmm0
    00000cdc: 	pxor	%xmm5, %xmm5
    00000ce0: 	pxor	%xmm4, %xmm4
    00000ce4: 	xorl	%eax, %eax
    00000ce6: 	pxor	%xmm3, %xmm3
    00000cea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2187:
    00000cf0: 	movdqa	(%rbp,%rax), %xmm1
    00000cf6: 	movdqa	(%r12,%rax), %xmm2
    00000cfc: 	movdqa	%xmm5, %xmm7
    00000d00: 	addq	$0x10, %rax
    00000d04: 	movdqa	%xmm5, %xmm8
    00000d09: 	pcmpgtb	%xmm2, %xmm8
    00000d0e: 	pcmpgtb	%xmm1, %xmm7
    00000d12: 	movdqa	%xmm2, %xmm9
    00000d17: 	movdqa	%xmm1, %xmm6
    00000d1b: 	punpcklbw	%xmm8, %xmm9
    00000d20: 	punpcklbw	%xmm7, %xmm6
    00000d24: 	punpckhbw	%xmm8, %xmm2
    00000d29: 	pmullw	%xmm9, %xmm6
    00000d2e: 	punpckhbw	%xmm7, %xmm1
    00000d32: 	movdqa	%xmm4, %xmm9
    00000d37: 	pmullw	%xmm2, %xmm1
    00000d3b: 	movdqa	%xmm4, %xmm2
    00000d3f: 	pcmpgtw	%xmm6, %xmm2
    00000d43: 	movdqa	%xmm6, %xmm7
    00000d47: 	pcmpgtw	%xmm1, %xmm9
    00000d4c: 	movdqa	%xmm1, %xmm8
    00000d51: 	punpcklwd	%xmm2, %xmm7
    00000d55: 	punpckhwd	%xmm2, %xmm6
    00000d59: 	movdqa	%xmm1, %xmm2
    00000d5d: 	punpcklwd	%xmm9, %xmm8
    00000d62: 	punpckhwd	%xmm9, %xmm2
    00000d67: 	movdqa	%xmm3, %xmm9
    00000d6c: 	pcmpgtd	%xmm7, %xmm9
    00000d71: 	movdqa	%xmm7, %xmm1
    00000d75: 	punpckldq	%xmm9, %xmm1
    00000d7a: 	punpckhdq	%xmm9, %xmm7
    00000d7f: 	paddq	%xmm1, %xmm0
    00000d83: 	movdqa	%xmm3, %xmm1
    00000d87: 	pcmpgtd	%xmm6, %xmm1
    00000d8b: 	paddq	%xmm7, %xmm0
    00000d8f: 	movdqa	%xmm6, %xmm7
    00000d93: 	punpckldq	%xmm1, %xmm7
    00000d97: 	punpckhdq	%xmm1, %xmm6
    00000d9b: 	movdqa	%xmm8, %xmm1
    00000da0: 	paddq	%xmm7, %xmm0
    00000da4: 	paddq	%xmm6, %xmm0
    00000da8: 	movdqa	%xmm3, %xmm6
    00000dac: 	pcmpgtd	%xmm8, %xmm6
    00000db1: 	punpckldq	%xmm6, %xmm1
    00000db5: 	paddq	%xmm1, %xmm0
    00000db9: 	movdqa	%xmm8, %xmm1
    00000dbe: 	punpckhdq	%xmm6, %xmm1
    00000dc2: 	movdqa	%xmm3, %xmm6
    00000dc6: 	pcmpgtd	%xmm2, %xmm6
    00000dca: 	paddq	%xmm1, %xmm0
    00000dce: 	movdqa	%xmm2, %xmm1
    00000dd2: 	punpckldq	%xmm6, %xmm1
    00000dd6: 	paddq	%xmm1, %xmm0
    00000dda: 	movdqa	%xmm2, %xmm1
    00000dde: 	punpckhdq	%xmm6, %xmm1
    00000de2: 	paddq	%xmm1, %xmm0
    00000de6: 	cmpq	$0x1f40, %rax
    00000dec: 	jne	.Ltmp2187 # Offset: 3564
    00000df2: 	movl	init_value(%rip), %eax
    00000df8: 	movdqa	%xmm0, %xmm1
    00000dfc: 	psrldq	$0x8, %xmm1
    00000e01: 	imull	%eax, %eax
    00000e04: 	paddq	%xmm1, %xmm0
    00000e08: 	movq	%xmm0, %rdx
    00000e0d: 	shll	$0x6, %eax
    00000e10: 	cmpb	%dl, %al
    00000e12: 	jne	.Ltmp2188 # Offset: 3602
.Ltmp2269:
    00000e18: 	addl	$0x1, %ebx
    00000e1b: 	cmpl	%ecx, %ebx
    00000e1d: 	jl	.Ltmp2189 # Offset: 3613
.Ltmp2186:
    00000e23: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000e2a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000e31: 	subq	$0x20, %rax
    00000e35: 	cmpq	%rax, %rbx
    00000e38: 	je	.Ltmp2190 # Offset: 3640
    00000e3e: 	leaq	0x10(%rbx), %rdi
    00000e42: 	movq	0x98(%rsp), %r14
    00000e4a: 	movq	%rdi, (%rbx)
    00000e4d: 	movq	0x90(%rsp), %rax
    00000e55: 	movq	%rax, %rsi
    00000e58: 	movq	%rax, 0x28(%rsp)
    00000e5d: 	addq	%r14, %rsi
    00000e60: 	je	.Ltmp2191 # Offset: 3680
    00000e62: 	testq	%rax, %rax
    00000e65: 	je	.Ltmp2192 # Offset: 3685
.Ltmp2191:
    00000e6b: 	movq	%r14, 0x30(%rsp)
    00000e70: 	cmpq	$0xf, %r14
    00000e74: 	ja	.Ltmp2193 # Offset: 3700
    00000e7a: 	cmpq	$0x1, %r14
    00000e7e: 	jne	.Ltmp2194 # Offset: 3710
    00000e84: 	movq	0x28(%rsp), %rax
    00000e89: 	movzbl	(%rax), %eax
    00000e8c: 	movb	%al, 0x10(%rbx)
.Ltmp2306:
    00000e8f: 	movq	%r14, 0x8(%rbx)
    00000e93: 	movb	$0x0, (%rdi,%r14)
    00000e98: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e9f: 	addq	$0x20, %rax
    00000ea3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2280:
    00000eaa: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000eb1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000eb8: 	je	.Ltmp2195 # Offset: 3768
.Ltmp2279:
    00000ebe: 	movq	-0x20(%rax), %r14
    00000ec2: 	callq	clock@PLT # Offset: 3778
    00000ec7: 	pxor	%xmm0, %xmm0
    00000ecb: 	movq	%rax, end_time(%rip)
    00000ed2: 	movq	%r14, %rdi
    00000ed5: 	subq	start_time(%rip), %rax
    00000edc: 	cvtsi2sd	%rax, %xmm0
    00000ee1: 	divsd	DATAat0x32600(%rip), %xmm0
    00000ee9: 	callq	_Z13record_resultdPKc # Offset: 3817
    00000eee: 	movq	0x90(%rsp), %rdi
    00000ef6: 	cmpq	(%rsp), %rdi
    00000efa: 	je	.Ltmp2196 # Offset: 3834
    00000efc: 	movq	0xa0(%rsp), %rax
    00000f04: 	leaq	0x1(%rax), %rsi
    00000f08: 	callq	_ZdlPvm@PLT # Offset: 3848
.Ltmp2196:
    00000f0d: 	movq	0x8(%rsp), %rsi
    00000f12: 	leaq	DATAat0x32204(%rip), %rdx
    00000f19: 	movq	%r15, %rdi
    00000f1c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3868
    00000f21: 	movq	0x58(%rsp), %rdx
    00000f26: 	movq	0x50(%rsp), %rsi
    00000f2b: 	movq	%r15, %rdi
    00000f2e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3886
    00000f33: 	movq	(%rsp), %rsi
    00000f37: 	leaq	0x10(%rax), %rdx
    00000f3b: 	movq	%rsi, 0x90(%rsp)
    00000f43: 	movq	(%rax), %rcx
    00000f46: 	cmpq	%rdx, %rcx
    00000f49: 	je	.Ltmp2197 # Offset: 3913
    00000f4f: 	movq	%rcx, 0x90(%rsp)
    00000f57: 	movq	0x10(%rax), %rcx
    00000f5b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2277:
    00000f63: 	movq	0x8(%rax), %rcx
    00000f67: 	movq	%r13, %r8
    00000f6a: 	movq	%r12, %rsi
    00000f6d: 	movq	%rbp, %rdi
    00000f70: 	movq	%rcx, 0x98(%rsp)
    00000f78: 	leaq	_Z14inner_product2IPKaaET0_T_S3_m(%rip), %rcx
    00000f7f: 	movq	%rdx, (%rax)
    00000f82: 	movl	$0x1f40, %edx
    00000f87: 	movq	$0x0, 0x8(%rax)
    00000f8f: 	movb	$0x0, 0x10(%rax)
    00000f93: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3987
    00000f98: 	movq	0x90(%rsp), %rdi
    00000fa0: 	cmpq	(%rsp), %rdi
    00000fa4: 	je	.Ltmp2198 # Offset: 4004
    00000fa6: 	movq	0xa0(%rsp), %rax
    00000fae: 	leaq	0x1(%rax), %rsi
    00000fb2: 	callq	_ZdlPvm@PLT # Offset: 4018
.Ltmp2198:
    00000fb7: 	movq	0x70(%rsp), %rdi
    00000fbc: 	cmpq	0x10(%rsp), %rdi
    00000fc1: 	je	.Ltmp2199 # Offset: 4033
    00000fc3: 	movq	0x80(%rsp), %rax
    00000fcb: 	leaq	0x1(%rax), %rsi
    00000fcf: 	callq	_ZdlPvm@PLT # Offset: 4047
.Ltmp2199:
    00000fd4: 	movq	0x8(%rsp), %rsi
    00000fd9: 	leaq	DATAat0x324b2(%rip), %rdx
    00000fe0: 	movq	%r13, %rdi
    00000fe3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4067
    00000fe8: 	callq	clock@PLT # Offset: 4072
    00000fed: 	movl	iterations(%rip), %ecx
    00000ff3: 	xorl	%ebx, %ebx
    00000ff5: 	leaq	DATAat0x321c8(%rip), %r14
    00000ffc: 	movq	%rax, start_time(%rip)
    00001003: 	testl	%ecx, %ecx
    00001005: 	jle	.Ltmp2200 # Offset: 4101
    0000100b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2203:
    00001010: 	pxor	%xmm2, %xmm2
    00001014: 	xorl	%eax, %eax
    00001016: 	movdqa	%xmm2, %xmm6
    0000101a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2201:
    00001020: 	movdqa	(%rbp,%rax), %xmm0
    00001026: 	movdqa	(%r12,%rax), %xmm1
    0000102c: 	pxor	%xmm5, %xmm5
    00001030: 	pxor	%xmm4, %xmm4
    00001034: 	addq	$0x10, %rax
    00001038: 	pcmpgtb	%xmm1, %xmm5
    0000103c: 	pcmpgtb	%xmm0, %xmm4
    00001040: 	movdqa	%xmm1, %xmm7
    00001044: 	movdqa	%xmm0, %xmm3
    00001048: 	punpcklbw	%xmm5, %xmm7
    0000104c: 	punpcklbw	%xmm4, %xmm3
    00001050: 	punpckhbw	%xmm5, %xmm1
    00001054: 	punpckhbw	%xmm4, %xmm0
    00001058: 	pmullw	%xmm7, %xmm3
    0000105c: 	pmullw	%xmm1, %xmm0
    00001060: 	paddw	%xmm3, %xmm6
    00001064: 	paddw	%xmm0, %xmm2
    00001068: 	cmpq	$0x1f40, %rax
    0000106e: 	jne	.Ltmp2201 # Offset: 4206
    00001070: 	paddw	%xmm6, %xmm2
    00001074: 	movl	init_value(%rip), %eax
    0000107a: 	movdqa	%xmm2, %xmm0
    0000107e: 	psrldq	$0x8, %xmm0
    00001083: 	imull	%eax, %eax
    00001086: 	paddw	%xmm0, %xmm2
    0000108a: 	movdqa	%xmm2, %xmm0
    0000108e: 	psrldq	$0x4, %xmm0
    00001093: 	shll	$0x6, %eax
    00001096: 	paddw	%xmm0, %xmm2
    0000109a: 	movdqa	%xmm2, %xmm0
    0000109e: 	psrldq	$0x2, %xmm0
    000010a3: 	paddw	%xmm0, %xmm2
    000010a7: 	pextrw	$0x0, %xmm2, %edx
    000010ac: 	cmpb	%dl, %al
    000010ae: 	jne	.Ltmp2202 # Offset: 4270
.Ltmp2268:
    000010b4: 	addl	$0x1, %ebx
    000010b7: 	cmpl	%ecx, %ebx
    000010b9: 	jl	.Ltmp2203 # Offset: 4281
.Ltmp2200:
    000010bf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000010c6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000010cd: 	subq	$0x20, %rax
    000010d1: 	cmpq	%rax, %rbx
    000010d4: 	je	.Ltmp2204 # Offset: 4308
    000010da: 	leaq	0x10(%rbx), %rdi
    000010de: 	movq	0x98(%rsp), %r14
    000010e6: 	movq	%rdi, (%rbx)
    000010e9: 	movq	0x90(%rsp), %rax
    000010f1: 	movq	%rax, %rsi
    000010f4: 	movq	%rax, 0x28(%rsp)
    000010f9: 	addq	%r14, %rsi
    000010fc: 	je	.Ltmp2205 # Offset: 4348
    000010fe: 	testq	%rax, %rax
    00001101: 	je	.Ltmp2206 # Offset: 4353
.Ltmp2205:
    00001107: 	movq	%r14, 0x30(%rsp)
    0000110c: 	cmpq	$0xf, %r14
    00001110: 	ja	.Ltmp2207 # Offset: 4368
    00001116: 	cmpq	$0x1, %r14
    0000111a: 	jne	.Ltmp2208 # Offset: 4378
    00001120: 	movq	0x28(%rsp), %rax
    00001125: 	movzbl	(%rax), %eax
    00001128: 	movb	%al, 0x10(%rbx)
.Ltmp2309:
    0000112b: 	movq	%r14, 0x8(%rbx)
    0000112f: 	movb	$0x0, (%rdi,%r14)
    00001134: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000113b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001142: 	addq	$0x20, %rax
    00001146: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000114d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001154: 	je	.Ltmp2209 # Offset: 4436
.Ltmp2270:
    0000115a: 	movq	-0x20(%rax), %r14
    0000115e: 	callq	clock@PLT # Offset: 4446
    00001163: 	pxor	%xmm0, %xmm0
    00001167: 	movq	%rax, end_time(%rip)
    0000116e: 	movq	%r14, %rdi
    00001171: 	subq	start_time(%rip), %rax
    00001178: 	cvtsi2sd	%rax, %xmm0
    0000117d: 	divsd	DATAat0x32600(%rip), %xmm0
    00001185: 	callq	_Z13record_resultdPKc # Offset: 4485
    0000118a: 	movq	0x90(%rsp), %rdi
    00001192: 	cmpq	(%rsp), %rdi
    00001196: 	je	.Ltmp2210 # Offset: 4502
    00001198: 	movq	0xa0(%rsp), %rax
    000011a0: 	leaq	0x1(%rax), %rsi
    000011a4: 	callq	_ZdlPvm@PLT # Offset: 4516
.Ltmp2210:
    000011a9: 	movq	0x8(%rsp), %rsi
    000011ae: 	leaq	DATAat0x323aa(%rip), %rdx
    000011b5: 	movq	%r13, %rdi
    000011b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4536
    000011bd: 	callq	clock@PLT # Offset: 4541
    000011c2: 	movl	iterations(%rip), %ecx
    000011c8: 	xorl	%ebx, %ebx
    000011ca: 	leaq	DATAat0x321c8(%rip), %r14
    000011d1: 	movq	%rax, start_time(%rip)
    000011d8: 	testl	%ecx, %ecx
    000011da: 	jle	.Ltmp2211 # Offset: 4570
.Ltmp2214:
    000011e0: 	pxor	%xmm1, %xmm1
    000011e4: 	pxor	%xmm5, %xmm5
    000011e8: 	pxor	%xmm4, %xmm4
    000011ec: 	xorl	%eax, %eax
    000011ee: 	nop # Size: 2
.Ltmp2212:
    000011f0: 	movdqa	(%rbp,%rax), %xmm0
    000011f6: 	movdqa	(%r12,%rax), %xmm2
    000011fc: 	movdqa	%xmm5, %xmm7
    00001200: 	movdqa	%xmm5, %xmm6
    00001204: 	addq	$0x10, %rax
    00001208: 	pcmpgtb	%xmm0, %xmm6
    0000120c: 	pcmpgtb	%xmm2, %xmm7
    00001210: 	movdqa	%xmm2, %xmm8
    00001215: 	movdqa	%xmm0, %xmm3
    00001219: 	punpcklbw	%xmm6, %xmm3
    0000121d: 	punpcklbw	%xmm7, %xmm8
    00001222: 	punpckhbw	%xmm7, %xmm2
    00001226: 	pmullw	%xmm8, %xmm3
    0000122b: 	punpckhbw	%xmm6, %xmm0
    0000122f: 	movdqa	%xmm4, %xmm6
    00001233: 	pmullw	%xmm2, %xmm0
    00001237: 	pcmpgtw	%xmm3, %xmm6
    0000123b: 	movdqa	%xmm3, %xmm2
    0000123f: 	punpcklwd	%xmm6, %xmm2
    00001243: 	punpckhwd	%xmm6, %xmm3
    00001247: 	paddd	%xmm2, %xmm1
    0000124b: 	movdqa	%xmm4, %xmm2
    0000124f: 	pcmpgtw	%xmm0, %xmm2
    00001253: 	paddd	%xmm3, %xmm1
    00001257: 	movdqa	%xmm0, %xmm3
    0000125b: 	punpcklwd	%xmm2, %xmm3
    0000125f: 	punpckhwd	%xmm2, %xmm0
    00001263: 	paddd	%xmm3, %xmm1
    00001267: 	paddd	%xmm0, %xmm1
    0000126b: 	cmpq	$0x1f40, %rax
    00001271: 	jne	.Ltmp2212 # Offset: 4721
    00001277: 	movdqa	%xmm1, %xmm0
    0000127b: 	movl	init_value(%rip), %eax
    00001281: 	psrldq	$0x8, %xmm0
    00001286: 	imull	%eax, %eax
    00001289: 	paddd	%xmm0, %xmm1
    0000128d: 	movdqa	%xmm1, %xmm0
    00001291: 	psrldq	$0x4, %xmm0
    00001296: 	paddd	%xmm0, %xmm1
    0000129a: 	shll	$0x6, %eax
    0000129d: 	movd	%xmm1, %edx
    000012a1: 	cmpb	%dl, %al
    000012a3: 	jne	.Ltmp2213 # Offset: 4771
.Ltmp2267:
    000012a9: 	addl	$0x1, %ebx
    000012ac: 	cmpl	%ecx, %ebx
    000012ae: 	jl	.Ltmp2214 # Offset: 4782
.Ltmp2211:
    000012b4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000012bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000012c2: 	subq	$0x20, %rax
    000012c6: 	cmpq	%rax, %rbx
    000012c9: 	je	.Ltmp2215 # Offset: 4809
    000012cf: 	leaq	0x10(%rbx), %rdi
    000012d3: 	movq	0x98(%rsp), %r14
    000012db: 	movq	%rdi, (%rbx)
    000012de: 	movq	0x90(%rsp), %rax
    000012e6: 	movq	%rax, %rsi
    000012e9: 	movq	%rax, 0x28(%rsp)
    000012ee: 	addq	%r14, %rsi
    000012f1: 	je	.Ltmp2216 # Offset: 4849
    000012f3: 	testq	%rax, %rax
    000012f6: 	je	.Ltmp2217 # Offset: 4854
.Ltmp2216:
    000012fc: 	movq	%r14, 0x30(%rsp)
    00001301: 	cmpq	$0xf, %r14
    00001305: 	ja	.Ltmp2218 # Offset: 4869
    0000130b: 	cmpq	$0x1, %r14
    0000130f: 	jne	.Ltmp2219 # Offset: 4879
    00001315: 	movq	0x28(%rsp), %rax
    0000131a: 	movzbl	(%rax), %eax
    0000131d: 	movb	%al, 0x10(%rbx)
.Ltmp2297:
    00001320: 	movq	%r14, 0x8(%rbx)
    00001324: 	movb	$0x0, (%rdi,%r14)
    00001329: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001330: 	addq	$0x20, %rax
    00001334: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2285:
    0000133b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001342: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001349: 	je	.Ltmp2220 # Offset: 4937
.Ltmp2284:
    0000134f: 	movq	-0x20(%rax), %r14
    00001353: 	callq	clock@PLT # Offset: 4947
    00001358: 	pxor	%xmm0, %xmm0
    0000135c: 	movq	%rax, end_time(%rip)
    00001363: 	movq	%r14, %rdi
    00001366: 	subq	start_time(%rip), %rax
    0000136d: 	cvtsi2sd	%rax, %xmm0
    00001372: 	divsd	DATAat0x32600(%rip), %xmm0
    0000137a: 	callq	_Z13record_resultdPKc # Offset: 4986
    0000137f: 	movq	0x90(%rsp), %rdi
    00001387: 	cmpq	(%rsp), %rdi
    0000138b: 	je	.Ltmp2221 # Offset: 5003
    0000138d: 	movq	0xa0(%rsp), %rax
    00001395: 	leaq	0x1(%rax), %rsi
    00001399: 	callq	_ZdlPvm@PLT # Offset: 5017
.Ltmp2221:
    0000139e: 	movq	0x8(%rsp), %rsi
    000013a3: 	leaq	DATAat0x32302(%rip), %rdx
    000013aa: 	movq	%r13, %rdi
    000013ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5037
    000013b2: 	callq	clock@PLT # Offset: 5042
    000013b7: 	movl	iterations(%rip), %ecx
    000013bd: 	xorl	%ebx, %ebx
    000013bf: 	leaq	DATAat0x321c8(%rip), %r14
    000013c6: 	movq	%rax, start_time(%rip)
    000013cd: 	testl	%ecx, %ecx
    000013cf: 	jle	.Ltmp2222 # Offset: 5071
    000013d5: 	nopl	(%rax) # Size: 3
.Ltmp2225:
    000013d8: 	pxor	%xmm0, %xmm0
    000013dc: 	pxor	%xmm5, %xmm5
    000013e0: 	pxor	%xmm4, %xmm4
    000013e4: 	xorl	%eax, %eax
    000013e6: 	pxor	%xmm3, %xmm3
    000013ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2223:
    000013f0: 	movdqa	(%rbp,%rax), %xmm1
    000013f6: 	movdqa	(%r12,%rax), %xmm2
    000013fc: 	movdqa	%xmm5, %xmm7
    00001400: 	addq	$0x10, %rax
    00001404: 	movdqa	%xmm5, %xmm8
    00001409: 	pcmpgtb	%xmm2, %xmm8
    0000140e: 	pcmpgtb	%xmm1, %xmm7
    00001412: 	movdqa	%xmm2, %xmm9
    00001417: 	movdqa	%xmm1, %xmm6
    0000141b: 	punpcklbw	%xmm8, %xmm9
    00001420: 	punpcklbw	%xmm7, %xmm6
    00001424: 	punpckhbw	%xmm8, %xmm2
    00001429: 	pmullw	%xmm9, %xmm6
    0000142e: 	punpckhbw	%xmm7, %xmm1
    00001432: 	movdqa	%xmm4, %xmm9
    00001437: 	pmullw	%xmm2, %xmm1
    0000143b: 	movdqa	%xmm4, %xmm2
    0000143f: 	pcmpgtw	%xmm6, %xmm2
    00001443: 	movdqa	%xmm6, %xmm7
    00001447: 	pcmpgtw	%xmm1, %xmm9
    0000144c: 	punpcklwd	%xmm2, %xmm7
    00001450: 	punpckhwd	%xmm2, %xmm6
    00001454: 	movdqa	%xmm1, %xmm2
    00001458: 	punpcklwd	%xmm9, %xmm2
    0000145d: 	punpckhwd	%xmm9, %xmm1
    00001462: 	movdqa	%xmm3, %xmm9
    00001467: 	pcmpgtd	%xmm7, %xmm9
    0000146c: 	movdqa	%xmm1, %xmm8
    00001471: 	movdqa	%xmm7, %xmm1
    00001475: 	punpckldq	%xmm9, %xmm1
    0000147a: 	punpckhdq	%xmm9, %xmm7
    0000147f: 	paddq	%xmm1, %xmm0
    00001483: 	movdqa	%xmm3, %xmm1
    00001487: 	pcmpgtd	%xmm6, %xmm1
    0000148b: 	paddq	%xmm7, %xmm0
    0000148f: 	movdqa	%xmm6, %xmm7
    00001493: 	punpckldq	%xmm1, %xmm7
    00001497: 	punpckhdq	%xmm1, %xmm6
    0000149b: 	movdqa	%xmm3, %xmm1
    0000149f: 	pcmpgtd	%xmm2, %xmm1
    000014a3: 	paddq	%xmm7, %xmm0
    000014a7: 	paddq	%xmm6, %xmm0
    000014ab: 	movdqa	%xmm2, %xmm6
    000014af: 	punpckldq	%xmm1, %xmm6
    000014b3: 	punpckhdq	%xmm1, %xmm2
    000014b7: 	movdqa	%xmm8, %xmm1
    000014bc: 	paddq	%xmm6, %xmm0
    000014c0: 	paddq	%xmm2, %xmm0
    000014c4: 	movdqa	%xmm3, %xmm2
    000014c8: 	pcmpgtd	%xmm8, %xmm2
    000014cd: 	punpckldq	%xmm2, %xmm1
    000014d1: 	paddq	%xmm1, %xmm0
    000014d5: 	movdqa	%xmm8, %xmm1
    000014da: 	punpckhdq	%xmm2, %xmm1
    000014de: 	paddq	%xmm1, %xmm0
    000014e2: 	cmpq	$0x1f40, %rax
    000014e8: 	jne	.Ltmp2223 # Offset: 5352
    000014ee: 	movl	init_value(%rip), %eax
    000014f4: 	movdqa	%xmm0, %xmm1
    000014f8: 	psrldq	$0x8, %xmm1
    000014fd: 	imull	%eax, %eax
    00001500: 	paddq	%xmm1, %xmm0
    00001504: 	movq	%xmm0, %rdx
    00001509: 	shll	$0x6, %eax
    0000150c: 	cmpb	%dl, %al
    0000150e: 	jne	.Ltmp2224 # Offset: 5390
.Ltmp2266:
    00001514: 	addl	$0x1, %ebx
    00001517: 	cmpl	%ecx, %ebx
    00001519: 	jl	.Ltmp2225 # Offset: 5401
.Ltmp2222:
    0000151f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001526: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000152d: 	subq	$0x20, %rax
    00001531: 	cmpq	%rax, %rbx
    00001534: 	je	.Ltmp2226 # Offset: 5428
    0000153a: 	leaq	0x10(%rbx), %rdi
    0000153e: 	movq	0x98(%rsp), %r14
    00001546: 	movq	%rdi, (%rbx)
    00001549: 	movq	0x90(%rsp), %rax
    00001551: 	movq	%rax, %rsi
    00001554: 	movq	%rax, 0x28(%rsp)
    00001559: 	addq	%r14, %rsi
    0000155c: 	je	.Ltmp2227 # Offset: 5468
    0000155e: 	testq	%rax, %rax
    00001561: 	je	.Ltmp2228 # Offset: 5473
.Ltmp2227:
    00001567: 	movq	%r14, 0x30(%rsp)
    0000156c: 	cmpq	$0xf, %r14
    00001570: 	ja	.Ltmp2229 # Offset: 5488
    00001576: 	cmpq	$0x1, %r14
    0000157a: 	jne	.Ltmp2230 # Offset: 5498
    00001580: 	movq	0x28(%rsp), %rax
    00001585: 	movzbl	(%rax), %eax
    00001588: 	movb	%al, 0x10(%rbx)
.Ltmp2299:
    0000158b: 	movq	%r14, 0x8(%rbx)
    0000158f: 	movb	$0x0, (%rdi,%r14)
    00001594: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000159b: 	addq	$0x20, %rax
    0000159f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2288:
    000015a6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000015ad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000015b4: 	je	.Ltmp2231 # Offset: 5556
.Ltmp2287:
    000015ba: 	movq	-0x20(%rax), %r14
    000015be: 	callq	clock@PLT # Offset: 5566
    000015c3: 	pxor	%xmm0, %xmm0
    000015c7: 	movq	%rax, end_time(%rip)
    000015ce: 	movq	%r14, %rdi
    000015d1: 	subq	start_time(%rip), %rax
    000015d8: 	cvtsi2sd	%rax, %xmm0
    000015dd: 	divsd	DATAat0x32600(%rip), %xmm0
    000015e5: 	callq	_Z13record_resultdPKc # Offset: 5605
    000015ea: 	movq	0x90(%rsp), %rdi
    000015f2: 	cmpq	(%rsp), %rdi
    000015f6: 	je	.Ltmp2232 # Offset: 5622
    000015f8: 	movq	0xa0(%rsp), %rax
    00001600: 	leaq	0x1(%rax), %rsi
    00001604: 	callq	_ZdlPvm@PLT # Offset: 5636
.Ltmp2232:
    00001609: 	movq	0x8(%rsp), %rsi
    0000160e: 	leaq	DATAat0x32218(%rip), %rdx
    00001615: 	movq	%r15, %rdi
    00001618: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5656
    0000161d: 	movq	0x58(%rsp), %rdx
    00001622: 	movq	0x50(%rsp), %rsi
    00001627: 	movq	%r15, %rdi
    0000162a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5674
    0000162f: 	movq	(%rsp), %rsi
    00001633: 	leaq	0x10(%rax), %rdx
    00001637: 	movq	%rsi, 0x90(%rsp)
    0000163f: 	movq	(%rax), %rcx
    00001642: 	cmpq	%rdx, %rcx
    00001645: 	je	.Ltmp2233 # Offset: 5701
    0000164b: 	movq	%rcx, 0x90(%rsp)
    00001653: 	movq	0x10(%rax), %rcx
    00001657: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2296:
    0000165f: 	movq	0x8(%rax), %rcx
    00001663: 	movq	%r13, %r8
    00001666: 	movq	%r12, %rsi
    00001669: 	movq	%rbp, %rdi
    0000166c: 	movq	%rcx, 0x98(%rsp)
    00001674: 	leaq	_Z14inner_product3IPKaaET0_T_S3_m(%rip), %rcx
    0000167b: 	movq	%rdx, (%rax)
    0000167e: 	movl	$0x1f40, %edx
    00001683: 	movq	$0x0, 0x8(%rax)
    0000168b: 	movb	$0x0, 0x10(%rax)
    0000168f: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5775
    00001694: 	movq	0x90(%rsp), %rdi
    0000169c: 	cmpq	(%rsp), %rdi
    000016a0: 	je	.Ltmp2234 # Offset: 5792
    000016a2: 	movq	0xa0(%rsp), %rax
    000016aa: 	leaq	0x1(%rax), %rsi
    000016ae: 	callq	_ZdlPvm@PLT # Offset: 5806
.Ltmp2234:
    000016b3: 	movq	0x70(%rsp), %rdi
    000016b8: 	cmpq	0x10(%rsp), %rdi
    000016bd: 	je	.Ltmp2235 # Offset: 5821
    000016bf: 	movq	0x80(%rsp), %rax
    000016c7: 	leaq	0x1(%rax), %rsi
    000016cb: 	callq	_ZdlPvm@PLT # Offset: 5835
.Ltmp2235:
    000016d0: 	movq	0x8(%rsp), %rsi
    000016d5: 	leaq	DATAat0x3222c(%rip), %rdx
    000016dc: 	movq	%r15, %rdi
    000016df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5855
    000016e4: 	movq	0x58(%rsp), %rdx
    000016e9: 	movq	0x50(%rsp), %rsi
    000016ee: 	movq	%r15, %rdi
    000016f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5873
    000016f6: 	movq	(%rsp), %rsi
    000016fa: 	leaq	0x10(%rax), %rdx
    000016fe: 	movq	%rsi, 0x90(%rsp)
    00001706: 	movq	(%rax), %rcx
    00001709: 	cmpq	%rdx, %rcx
    0000170c: 	je	.Ltmp2236 # Offset: 5900
    00001712: 	movq	%rcx, 0x90(%rsp)
    0000171a: 	movq	0x10(%rax), %rcx
    0000171e: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2295:
    00001726: 	movq	0x8(%rax), %rcx
    0000172a: 	movq	%r13, %r8
    0000172d: 	movq	%r12, %rsi
    00001730: 	movq	%rbp, %rdi
    00001733: 	movq	%rcx, 0x98(%rsp)
    0000173b: 	leaq	_Z14inner_product4IPKaaET0_T_S3_m(%rip), %rcx
    00001742: 	movq	%rdx, (%rax)
    00001745: 	movl	$0x1f40, %edx
    0000174a: 	movq	$0x0, 0x8(%rax)
    00001752: 	movb	$0x0, 0x10(%rax)
    00001756: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5974
    0000175b: 	movq	0x90(%rsp), %rdi
    00001763: 	cmpq	(%rsp), %rdi
    00001767: 	je	.Ltmp2237 # Offset: 5991
    00001769: 	movq	0xa0(%rsp), %rax
    00001771: 	leaq	0x1(%rax), %rsi
    00001775: 	callq	_ZdlPvm@PLT # Offset: 6005
.Ltmp2237:
    0000177a: 	movq	0x70(%rsp), %rdi
    0000177f: 	cmpq	0x10(%rsp), %rdi
    00001784: 	je	.Ltmp2238 # Offset: 6020
    00001786: 	movq	0x80(%rsp), %rax
    0000178e: 	leaq	0x1(%rax), %rsi
    00001792: 	callq	_ZdlPvm@PLT # Offset: 6034
.Ltmp2238:
    00001797: 	movq	0x8(%rsp), %rsi
    0000179c: 	leaq	DATAat0x32240(%rip), %rdx
    000017a3: 	movq	%r15, %rdi
    000017a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6054
    000017ab: 	movq	0x58(%rsp), %rdx
    000017b0: 	movq	0x50(%rsp), %rsi
    000017b5: 	movq	%r15, %rdi
    000017b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6072
    000017bd: 	movq	(%rsp), %rsi
    000017c1: 	leaq	0x10(%rax), %rdx
    000017c5: 	movq	%rsi, 0x90(%rsp)
    000017cd: 	movq	(%rax), %rcx
    000017d0: 	cmpq	%rdx, %rcx
    000017d3: 	je	.Ltmp2239 # Offset: 6099
    000017d9: 	movq	%rcx, 0x90(%rsp)
    000017e1: 	movq	0x10(%rax), %rcx
    000017e5: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2294:
    000017ed: 	movq	0x8(%rax), %rcx
    000017f1: 	movq	%r13, %r8
    000017f4: 	movq	%r12, %rsi
    000017f7: 	movq	%rbp, %rdi
    000017fa: 	movq	%rcx, 0x98(%rsp)
    00001802: 	leaq	_Z14inner_product5IPKaaET0_T_S3_m(%rip), %rcx
    00001809: 	movq	%rdx, (%rax)
    0000180c: 	movl	$0x1f40, %edx
    00001811: 	movq	$0x0, 0x8(%rax)
    00001819: 	movb	$0x0, 0x10(%rax)
    0000181d: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6173
    00001822: 	movq	0x90(%rsp), %rdi
    0000182a: 	cmpq	(%rsp), %rdi
    0000182e: 	je	.Ltmp2240 # Offset: 6190
    00001830: 	movq	0xa0(%rsp), %rax
    00001838: 	leaq	0x1(%rax), %rsi
    0000183c: 	callq	_ZdlPvm@PLT # Offset: 6204
.Ltmp2240:
    00001841: 	movq	0x70(%rsp), %rdi
    00001846: 	cmpq	0x10(%rsp), %rdi
    0000184b: 	je	.Ltmp2241 # Offset: 6219
    0000184d: 	movq	0x80(%rsp), %rax
    00001855: 	leaq	0x1(%rax), %rsi
    00001859: 	callq	_ZdlPvm@PLT # Offset: 6233
.Ltmp2241:
    0000185e: 	movq	0x8(%rsp), %rsi
    00001863: 	leaq	DATAat0x32254(%rip), %rdx
    0000186a: 	movq	%r15, %rdi
    0000186d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6253
    00001872: 	movq	0x58(%rsp), %rdx
    00001877: 	movq	0x50(%rsp), %rsi
    0000187c: 	movq	%r15, %rdi
    0000187f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6271
    00001884: 	movq	(%rsp), %rsi
    00001888: 	leaq	0x10(%rax), %rdx
    0000188c: 	movq	%rsi, 0x90(%rsp)
    00001894: 	movq	(%rax), %rcx
    00001897: 	cmpq	%rdx, %rcx
    0000189a: 	je	.Ltmp2242 # Offset: 6298
    000018a0: 	movq	%rcx, 0x90(%rsp)
    000018a8: 	movq	0x10(%rax), %rcx
    000018ac: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2293:
    000018b4: 	movq	0x8(%rax), %rcx
    000018b8: 	movq	%r13, %r8
    000018bb: 	movq	%r12, %rsi
    000018be: 	movq	%rbp, %rdi
    000018c1: 	movq	%rcx, 0x98(%rsp)
    000018c9: 	leaq	_Z14inner_product6IPKaaET0_T_S3_m(%rip), %rcx
    000018d0: 	movq	%rdx, (%rax)
    000018d3: 	movl	$0x1f40, %edx
    000018d8: 	movq	$0x0, 0x8(%rax)
    000018e0: 	movb	$0x0, 0x10(%rax)
    000018e4: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6372
    000018e9: 	movq	0x90(%rsp), %rdi
    000018f1: 	cmpq	(%rsp), %rdi
    000018f5: 	je	.Ltmp2243 # Offset: 6389
    000018f7: 	movq	0xa0(%rsp), %rax
    000018ff: 	leaq	0x1(%rax), %rsi
    00001903: 	callq	_ZdlPvm@PLT # Offset: 6403
.Ltmp2243:
    00001908: 	movq	0x70(%rsp), %rdi
    0000190d: 	cmpq	0x10(%rsp), %rdi
    00001912: 	je	.Ltmp2244 # Offset: 6418
    00001914: 	movq	0x80(%rsp), %rax
    0000191c: 	leaq	0x1(%rax), %rsi
    00001920: 	callq	_ZdlPvm@PLT # Offset: 6432
.Ltmp2244:
    00001925: 	movq	0x8(%rsp), %rsi
    0000192a: 	leaq	DATAat0x32268(%rip), %rdx
    00001931: 	movq	%r15, %rdi
    00001934: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6452
    00001939: 	movq	0x58(%rsp), %rdx
    0000193e: 	movq	0x50(%rsp), %rsi
    00001943: 	movq	%r15, %rdi
    00001946: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6470
    0000194b: 	movq	(%rsp), %rsi
    0000194f: 	leaq	0x10(%rax), %rdx
    00001953: 	movq	%rsi, 0x90(%rsp)
    0000195b: 	movq	(%rax), %rcx
    0000195e: 	cmpq	%rdx, %rcx
    00001961: 	je	.Ltmp2245 # Offset: 6497
    00001967: 	movq	%rcx, 0x90(%rsp)
    0000196f: 	movq	0x10(%rax), %rcx
    00001973: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2292:
    0000197b: 	movq	0x8(%rax), %rcx
    0000197f: 	movq	%r13, %r8
    00001982: 	movq	%r12, %rsi
    00001985: 	movq	%rbp, %rdi
    00001988: 	movq	%rcx, 0x98(%rsp)
    00001990: 	leaq	_Z14inner_product7IPKaaET0_T_S3_m(%rip), %rcx
    00001997: 	movq	%rdx, (%rax)
    0000199a: 	movl	$0x1f40, %edx
    0000199f: 	movq	$0x0, 0x8(%rax)
    000019a7: 	movb	$0x0, 0x10(%rax)
    000019ab: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6571
    000019b0: 	movq	0x90(%rsp), %rdi
    000019b8: 	cmpq	(%rsp), %rdi
    000019bc: 	je	.Ltmp2246 # Offset: 6588
    000019be: 	movq	0xa0(%rsp), %rax
    000019c6: 	leaq	0x1(%rax), %rsi
    000019ca: 	callq	_ZdlPvm@PLT # Offset: 6602
.Ltmp2246:
    000019cf: 	movq	0x70(%rsp), %rdi
    000019d4: 	cmpq	0x10(%rsp), %rdi
    000019d9: 	je	.Ltmp2247 # Offset: 6617
    000019db: 	movq	0x80(%rsp), %rax
    000019e3: 	leaq	0x1(%rax), %rsi
    000019e7: 	callq	_ZdlPvm@PLT # Offset: 6631
.Ltmp2247:
    000019ec: 	movq	0x8(%rsp), %rsi
    000019f1: 	leaq	DATAat0x3227c(%rip), %rdx
    000019f8: 	movq	%r15, %rdi
    000019fb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6651
    00001a00: 	movq	0x58(%rsp), %rdx
    00001a05: 	movq	0x50(%rsp), %rsi
    00001a0a: 	movq	%r15, %rdi
    00001a0d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6669
    00001a12: 	movq	(%rsp), %rsi
    00001a16: 	leaq	0x10(%rax), %rdx
    00001a1a: 	movq	%rsi, 0x90(%rsp)
    00001a22: 	movq	(%rax), %rcx
    00001a25: 	cmpq	%rdx, %rcx
    00001a28: 	je	.Ltmp2248 # Offset: 6696
    00001a2e: 	movq	%rcx, 0x90(%rsp)
    00001a36: 	movq	0x10(%rax), %rcx
    00001a3a: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2291:
    00001a42: 	movq	0x8(%rax), %rcx
    00001a46: 	movq	%r13, %r8
    00001a49: 	movq	%r12, %rsi
    00001a4c: 	movq	%rbp, %rdi
    00001a4f: 	movq	%rcx, 0x98(%rsp)
    00001a57: 	leaq	_Z14inner_product8IPKaaET0_T_S3_m(%rip), %rcx
    00001a5e: 	movq	%rdx, (%rax)
    00001a61: 	movl	$0x1f40, %edx
    00001a66: 	movq	$0x0, 0x8(%rax)
    00001a6e: 	movb	$0x0, 0x10(%rax)
    00001a72: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6770
    00001a77: 	movq	0x90(%rsp), %rdi
    00001a7f: 	cmpq	(%rsp), %rdi
    00001a83: 	je	.Ltmp2249 # Offset: 6787
    00001a85: 	movq	0xa0(%rsp), %rax
    00001a8d: 	leaq	0x1(%rax), %rsi
    00001a91: 	callq	_ZdlPvm@PLT # Offset: 6801
.Ltmp2249:
    00001a96: 	movq	0x70(%rsp), %rdi
    00001a9b: 	cmpq	0x10(%rsp), %rdi
    00001aa0: 	je	.Ltmp2250 # Offset: 6816
    00001aa2: 	movq	0x80(%rsp), %rax
    00001aaa: 	leaq	0x1(%rax), %rsi
    00001aae: 	callq	_ZdlPvm@PLT # Offset: 6830
.Ltmp2250:
    00001ab3: 	movq	0x8(%rsp), %rsi
    00001ab8: 	leaq	DATAat0x32290(%rip), %rdx
    00001abf: 	movq	%r15, %rdi
    00001ac2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6850
    00001ac7: 	movq	0x58(%rsp), %rdx
    00001acc: 	movq	0x50(%rsp), %rsi
    00001ad1: 	movq	%r15, %rdi
    00001ad4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6868
    00001ad9: 	movq	(%rsp), %rsi
    00001add: 	leaq	0x10(%rax), %rdx
    00001ae1: 	movq	%rsi, 0x90(%rsp)
    00001ae9: 	movq	(%rax), %rcx
    00001aec: 	cmpq	%rdx, %rcx
    00001aef: 	je	.Ltmp2251 # Offset: 6895
    00001af5: 	movq	%rcx, 0x90(%rsp)
    00001afd: 	movq	0x10(%rax), %rcx
    00001b01: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2290:
    00001b09: 	movq	0x8(%rax), %rcx
    00001b0d: 	movq	%r13, %r8
    00001b10: 	movq	%r12, %rsi
    00001b13: 	movq	%rbp, %rdi
    00001b16: 	movq	%rcx, 0x98(%rsp)
    00001b1e: 	leaq	_Z14inner_product9IPKaaET0_T_S3_m(%rip), %rcx
    00001b25: 	movq	%rdx, (%rax)
    00001b28: 	movl	$0x1f40, %edx
    00001b2d: 	movq	$0x0, 0x8(%rax)
    00001b35: 	movb	$0x0, 0x10(%rax)
    00001b39: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6969
    00001b3e: 	movq	0x90(%rsp), %rdi
    00001b46: 	cmpq	(%rsp), %rdi
    00001b4a: 	je	.Ltmp2252 # Offset: 6986
    00001b4c: 	movq	0xa0(%rsp), %rax
    00001b54: 	leaq	0x1(%rax), %rsi
    00001b58: 	callq	_ZdlPvm@PLT # Offset: 7000
.Ltmp2252:
    00001b5d: 	movq	0x70(%rsp), %rdi
    00001b62: 	cmpq	0x10(%rsp), %rdi
    00001b67: 	je	.Ltmp2253 # Offset: 7015
    00001b69: 	movq	0x80(%rsp), %rax
    00001b71: 	leaq	0x1(%rax), %rsi
    00001b75: 	callq	_ZdlPvm@PLT # Offset: 7029
.Ltmp2253:
    00001b7a: 	movq	0x8(%rsp), %rsi
    00001b7f: 	leaq	DATAat0x322a4(%rip), %rdx
    00001b86: 	movq	%r15, %rdi
    00001b89: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7049
    00001b8e: 	movq	0x58(%rsp), %rdx
    00001b93: 	movq	0x50(%rsp), %rsi
    00001b98: 	movq	%r15, %rdi
    00001b9b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7067
    00001ba0: 	movq	(%rsp), %rsi
    00001ba4: 	leaq	0x10(%rax), %rdx
    00001ba8: 	movq	%rsi, 0x90(%rsp)
    00001bb0: 	movq	(%rax), %rcx
    00001bb3: 	cmpq	%rdx, %rcx
    00001bb6: 	je	.Ltmp2254 # Offset: 7094
    00001bbc: 	movq	%rcx, 0x90(%rsp)
    00001bc4: 	movq	0x10(%rax), %rcx
    00001bc8: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2289:
    00001bd0: 	movq	0x8(%rax), %rcx
    00001bd4: 	movq	%r13, %r8
    00001bd7: 	movq	%r12, %rsi
    00001bda: 	movq	%rbp, %rdi
    00001bdd: 	movq	%rcx, 0x98(%rsp)
    00001be5: 	leaq	_Z15inner_product10IPKaaET0_T_S3_m(%rip), %rcx
    00001bec: 	movq	%rdx, (%rax)
    00001bef: 	movl	$0x1f40, %edx
    00001bf4: 	movq	$0x0, 0x8(%rax)
    00001bfc: 	movb	$0x0, 0x10(%rax)
    00001c00: 	callq	_Z18test_inner_productIaPFaPKaS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7168
    00001c05: 	movq	0x90(%rsp), %rdi
    00001c0d: 	cmpq	(%rsp), %rdi
    00001c11: 	je	.Ltmp2255 # Offset: 7185
    00001c13: 	movq	0xa0(%rsp), %rax
    00001c1b: 	leaq	0x1(%rax), %rsi
    00001c1f: 	callq	_ZdlPvm@PLT # Offset: 7199
.Ltmp2255:
    00001c24: 	movq	0x70(%rsp), %rdi
    00001c29: 	cmpq	0x10(%rsp), %rdi
    00001c2e: 	je	.Ltmp2256 # Offset: 7214
    00001c30: 	movq	0x80(%rsp), %rax
    00001c38: 	leaq	0x1(%rax), %rsi
    00001c3c: 	callq	_ZdlPvm@PLT # Offset: 7228
.Ltmp2256:
    00001c41: 	movq	0x8(%rsp), %rsi
    00001c46: 	leaq	DATAat0x322b9(%rip), %rdx
    00001c4d: 	movq	%r13, %rdi
    00001c50: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7248
    00001c55: 	movl	iterations(%rip), %edx
    00001c5b: 	xorl	%r8d, %r8d
    00001c5e: 	xorl	%ecx, %ecx
    00001c60: 	movl	$0x1f40, %esi
    00001c65: 	movq	0x90(%rsp), %rdi
    00001c6d: 	callq	_Z9summarizePKciiii # Offset: 7277
    00001c72: 	movq	0x90(%rsp), %rdi
    00001c7a: 	cmpq	(%rsp), %rdi
    00001c7e: 	je	.Ltmp2257 # Offset: 7294
    00001c80: 	movq	0xa0(%rsp), %rax
    00001c88: 	leaq	0x1(%rax), %rsi
    00001c8c: 	callq	_ZdlPvm@PLT # Offset: 7308
.Ltmp2257:
    00001c91: 	movq	0x50(%rsp), %rdi
    00001c96: 	cmpq	0x20(%rsp), %rdi
    00001c9b: 	je	.Ltmp2258 # Offset: 7323
    00001c9d: 	movq	0x60(%rsp), %rax
    00001ca2: 	leaq	0x1(%rax), %rsi
    00001ca6: 	callq	_ZdlPvm@PLT # Offset: 7334
.Ltmp2258:
    00001cab: 	movq	0x3f38(%rsp), %rax
    00001cb3: 	subq	%fs:0x28, %rax
    00001cbc: 	jne	.Ltmp2259 # Offset: 7356
    00001cc2: 	addq	$0x3f48, %rsp
    00001cc9: 	popq	%rbx
    00001cca: 	popq	%rbp
    00001ccb: 	popq	%r12
    00001ccd: 	popq	%r13
    00001ccf: 	popq	%r14
    00001cd1: 	popq	%r15
    00001cd3: 	retq # Offset: 7379
    00001cd4: 	nopl	(%rax) # Size: 4
.Ltmp2130:
    00001cd8: 	movq	0x90(%rsp), %rdx
    00001ce0: 	movq	%r14, %rsi
    00001ce3: 	movl	$0x1, %edi
    00001ce8: 	xorl	%eax, %eax
    00001cea: 	callq	__printf_chk@PLT # Offset: 7402
    00001cef: 	movl	iterations(%rip), %ecx
    00001cf5: 	jmp	.Ltmp2260 # Offset: 7413
.Ltmp2135:
    00001cfa: 	movq	0x18(%rsp), %rsi
    00001cff: 	xorl	%edx, %edx
    00001d01: 	movq	%rbx, %rdi
    00001d04: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7428
    00001d09: 	movq	%rax, (%rbx)
    00001d0c: 	movq	%rax, %rdi
    00001d0f: 	movq	0x30(%rsp), %rax
    00001d14: 	movq	%rax, 0x10(%rbx)
.Ltmp2303:
    00001d18: 	movq	0x28(%rsp), %rsi
    00001d1d: 	movq	%r14, %rdx
    00001d20: 	callq	memcpy@PLT # Offset: 7456
    00001d25: 	movq	0x30(%rsp), %r14
    00001d2a: 	movq	(%rbx), %rdi
    00001d2d: 	jmp	.Ltmp2261 # Offset: 7469
    00001d32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2141:
    00001d38: 	movq	0x90(%rsp), %rdx
    00001d40: 	movq	%r14, %rsi
    00001d43: 	movl	$0x1, %edi
    00001d48: 	xorl	%eax, %eax
    00001d4a: 	callq	__printf_chk@PLT # Offset: 7498
    00001d4f: 	movl	iterations(%rip), %ecx
    00001d55: 	jmp	.Ltmp2262 # Offset: 7509
    00001d5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2177:
    00001d60: 	movq	0x90(%rsp), %rdx
    00001d68: 	movq	%r14, %rsi
    00001d6b: 	movl	$0x1, %edi
    00001d70: 	xorl	%eax, %eax
    00001d72: 	callq	__printf_chk@PLT # Offset: 7538
    00001d77: 	movl	iterations(%rip), %ecx
    00001d7d: 	jmp	.Ltmp2263 # Offset: 7549
    00001d82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2166:
    00001d88: 	movq	0x90(%rsp), %rdx
    00001d90: 	movq	%r14, %rsi
    00001d93: 	movl	$0x1, %edi
    00001d98: 	xorl	%eax, %eax
    00001d9a: 	callq	__printf_chk@PLT # Offset: 7578
    00001d9f: 	movl	iterations(%rip), %ecx
    00001da5: 	jmp	.Ltmp2264 # Offset: 7589
    00001daa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2152:
    00001db0: 	movq	0x90(%rsp), %rdx
    00001db8: 	movq	%r14, %rsi
    00001dbb: 	movl	$0x1, %edi
    00001dc0: 	xorl	%eax, %eax
    00001dc2: 	callq	__printf_chk@PLT # Offset: 7618
    00001dc7: 	movl	iterations(%rip), %ecx
    00001dcd: 	jmp	.Ltmp2265 # Offset: 7629
    00001dd2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2224:
    00001dd8: 	movq	0x90(%rsp), %rdx
    00001de0: 	movq	%r14, %rsi
    00001de3: 	movl	$0x1, %edi
    00001de8: 	xorl	%eax, %eax
    00001dea: 	callq	__printf_chk@PLT # Offset: 7658
    00001def: 	movl	iterations(%rip), %ecx
    00001df5: 	jmp	.Ltmp2266 # Offset: 7669
    00001dfa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2213:
    00001e00: 	movq	0x90(%rsp), %rdx
    00001e08: 	movq	%r14, %rsi
    00001e0b: 	movl	$0x1, %edi
    00001e10: 	xorl	%eax, %eax
    00001e12: 	callq	__printf_chk@PLT # Offset: 7698
    00001e17: 	movl	iterations(%rip), %ecx
    00001e1d: 	jmp	.Ltmp2267 # Offset: 7709
    00001e22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2202:
    00001e28: 	movq	0x90(%rsp), %rdx
    00001e30: 	movq	%r14, %rsi
    00001e33: 	movl	$0x1, %edi
    00001e38: 	xorl	%eax, %eax
    00001e3a: 	callq	__printf_chk@PLT # Offset: 7738
    00001e3f: 	movl	iterations(%rip), %ecx
    00001e45: 	jmp	.Ltmp2268 # Offset: 7749
    00001e4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2188:
    00001e50: 	movq	0x90(%rsp), %rdx
    00001e58: 	movq	%r14, %rsi
    00001e5b: 	movl	$0x1, %edi
    00001e60: 	xorl	%eax, %eax
    00001e62: 	callq	__printf_chk@PLT # Offset: 7778
    00001e67: 	movl	iterations(%rip), %ecx
    00001e6d: 	jmp	.Ltmp2269 # Offset: 7789
.Ltmp2204:
    00001e72: 	movq	%r13, %rsi
    00001e75: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e7c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7804
    00001e81: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e88: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001e8f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e96: 	jne	.Ltmp2270 # Offset: 7830
.Ltmp2209:
    00001e9c: 	movq	-0x8(%rdx), %rax
    00001ea0: 	addq	$0x200, %rax
    00001ea6: 	jmp	.Ltmp2270 # Offset: 7846
.Ltmp2161:
    00001eab: 	movdqu	0x10(%rax), %xmm5
    00001eb0: 	movaps	%xmm5, 0xa0(%rsp)
    00001eb8: 	jmp	.Ltmp2271 # Offset: 7864
.Ltmp2148:
    00001ebd: 	movq	-0x8(%rdx), %rax
    00001ec1: 	addq	$0x200, %rax
    00001ec7: 	jmp	.Ltmp2272 # Offset: 7879
.Ltmp2159:
    00001ecc: 	movq	-0x8(%rdx), %rax
    00001ed0: 	addq	$0x200, %rax
    00001ed6: 	jmp	.Ltmp2273 # Offset: 7894
.Ltmp2154:
    00001edb: 	movq	%r13, %rsi
    00001ede: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ee5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7909
    00001eea: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ef1: 	jmp	.Ltmp2274 # Offset: 7921
.Ltmp2132:
    00001ef6: 	movq	%r13, %rsi
    00001ef9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f00: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7936
    00001f05: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001f0c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001f13: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001f1a: 	jne	.Ltmp2275 # Offset: 7962
.Ltmp2137:
    00001f20: 	movq	-0x8(%rdx), %rax
    00001f24: 	addq	$0x200, %rax
    00001f2a: 	jmp	.Ltmp2275 # Offset: 7978
.Ltmp2125:
    00001f2f: 	movdqu	0x10(%rax), %xmm4
    00001f34: 	movaps	%xmm4, 0xa0(%rsp)
    00001f3c: 	jmp	.Ltmp2276 # Offset: 7996
.Ltmp2197:
    00001f41: 	movdqu	0x10(%rax), %xmm4
    00001f46: 	movaps	%xmm4, 0xa0(%rsp)
    00001f4e: 	jmp	.Ltmp2277 # Offset: 8014
.Ltmp2184:
    00001f53: 	movq	-0x8(%rdx), %rax
    00001f57: 	addq	$0x200, %rax
    00001f5d: 	jmp	.Ltmp2278 # Offset: 8029
.Ltmp2195:
    00001f62: 	movq	-0x8(%rdx), %rax
    00001f66: 	addq	$0x200, %rax
    00001f6c: 	jmp	.Ltmp2279 # Offset: 8044
.Ltmp2190:
    00001f71: 	movq	%r13, %rsi
    00001f74: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f7b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8059
    00001f80: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001f87: 	jmp	.Ltmp2280 # Offset: 8071
.Ltmp2143:
    00001f8c: 	movq	%r13, %rsi
    00001f8f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f96: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8086
    00001f9b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001fa2: 	jmp	.Ltmp2281 # Offset: 8098
.Ltmp2179:
    00001fa7: 	movq	%r13, %rsi
    00001faa: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001fb1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8113
    00001fb6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001fbd: 	jmp	.Ltmp2282 # Offset: 8125
.Ltmp2173:
    00001fc2: 	movq	-0x8(%rdx), %rax
    00001fc6: 	addq	$0x200, %rax
    00001fcc: 	jmp	.Ltmp2283 # Offset: 8140
.Ltmp2220:
    00001fd1: 	movq	-0x8(%rdx), %rax
    00001fd5: 	addq	$0x200, %rax
    00001fdb: 	jmp	.Ltmp2284 # Offset: 8155
.Ltmp2215:
    00001fe0: 	movq	%r13, %rsi
    00001fe3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001fea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8170
    00001fef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ff6: 	jmp	.Ltmp2285 # Offset: 8182
.Ltmp2168:
    00001ffb: 	movq	%r13, %rsi
    00001ffe: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002005: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8197
    0000200a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002011: 	jmp	.Ltmp2286 # Offset: 8209
.Ltmp2231:
    00002016: 	movq	-0x8(%rdx), %rax
    0000201a: 	addq	$0x200, %rax
    00002020: 	jmp	.Ltmp2287 # Offset: 8224
.Ltmp2226:
    00002025: 	movq	%r13, %rsi
    00002028: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000202f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8239
    00002034: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000203b: 	jmp	.Ltmp2288 # Offset: 8251
.Ltmp2254:
    00002040: 	movdqu	0x10(%rax), %xmm4
    00002045: 	movaps	%xmm4, 0xa0(%rsp)
    0000204d: 	jmp	.Ltmp2289 # Offset: 8269
.Ltmp2251:
    00002052: 	movdqu	0x10(%rax), %xmm5
    00002057: 	movaps	%xmm5, 0xa0(%rsp)
    0000205f: 	jmp	.Ltmp2290 # Offset: 8287
.Ltmp2248:
    00002064: 	movdqu	0x10(%rax), %xmm4
    00002069: 	movaps	%xmm4, 0xa0(%rsp)
    00002071: 	jmp	.Ltmp2291 # Offset: 8305
.Ltmp2245:
    00002076: 	movdqu	0x10(%rax), %xmm5
    0000207b: 	movaps	%xmm5, 0xa0(%rsp)
    00002083: 	jmp	.Ltmp2292 # Offset: 8323
.Ltmp2242:
    00002088: 	movdqu	0x10(%rax), %xmm4
    0000208d: 	movaps	%xmm4, 0xa0(%rsp)
    00002095: 	jmp	.Ltmp2293 # Offset: 8341
.Ltmp2239:
    0000209a: 	movdqu	0x10(%rax), %xmm5
    0000209f: 	movaps	%xmm5, 0xa0(%rsp)
    000020a7: 	jmp	.Ltmp2294 # Offset: 8359
.Ltmp2236:
    000020ac: 	movdqu	0x10(%rax), %xmm4
    000020b1: 	movaps	%xmm4, 0xa0(%rsp)
    000020b9: 	jmp	.Ltmp2295 # Offset: 8377
.Ltmp2233:
    000020be: 	movdqu	0x10(%rax), %xmm5
    000020c3: 	movaps	%xmm5, 0xa0(%rsp)
    000020cb: 	jmp	.Ltmp2296 # Offset: 8395
.Ltmp2219:
    000020d0: 	testq	%r14, %r14
    000020d3: 	je	.Ltmp2297 # Offset: 8403
    000020d9: 	jmp	.Ltmp2298 # Offset: 8409
    000020de: 	nop # Size: 2
.Ltmp2230:
    000020e0: 	testq	%r14, %r14
    000020e3: 	je	.Ltmp2299 # Offset: 8419
    000020e9: 	jmp	.Ltmp2300 # Offset: 8425
    000020ee: 	nop # Size: 2
.Ltmp2172:
    000020f0: 	testq	%r14, %r14
    000020f3: 	je	.Ltmp2301 # Offset: 8435
    000020f9: 	jmp	.Ltmp2302 # Offset: 8441
    000020fe: 	nop # Size: 2
.Ltmp2136:
    00002100: 	testq	%r14, %r14
    00002103: 	je	.Ltmp2261 # Offset: 8451
    00002109: 	jmp	.Ltmp2303 # Offset: 8457
    0000210e: 	nop # Size: 2
.Ltmp2183:
    00002110: 	testq	%r14, %r14
    00002113: 	je	.Ltmp2304 # Offset: 8467
    00002119: 	jmp	.Ltmp2305 # Offset: 8473
    0000211e: 	nop # Size: 2
.Ltmp2194:
    00002120: 	testq	%r14, %r14
    00002123: 	je	.Ltmp2306 # Offset: 8483
    00002129: 	jmp	.Ltmp2307 # Offset: 8489
    0000212e: 	nop # Size: 2
.Ltmp2147:
    00002130: 	testq	%r14, %r14
    00002133: 	je	.Ltmp2308 # Offset: 8499
.Ltmp2313:
    00002139: 	movq	0x28(%rsp), %rsi
    0000213e: 	movq	%r14, %rdx
    00002141: 	callq	memcpy@PLT # Offset: 8513
    00002146: 	movq	0x30(%rsp), %r14
    0000214b: 	movq	(%rbx), %rdi
    0000214e: 	jmp	.Ltmp2308 # Offset: 8526
.Ltmp2208:
    00002153: 	testq	%r14, %r14
    00002156: 	je	.Ltmp2309 # Offset: 8534
    0000215c: 	jmp	.Ltmp2310 # Offset: 8540
    00002161: 	nopl	(%rax) # Size: 7
.Ltmp2158:
    00002168: 	testq	%r14, %r14
    0000216b: 	je	.Ltmp2311 # Offset: 8555
.Ltmp2312:
    00002171: 	movq	0x28(%rsp), %rsi
    00002176: 	movq	%r14, %rdx
    00002179: 	callq	memcpy@PLT # Offset: 8569
    0000217e: 	movq	0x30(%rsp), %r14
    00002183: 	movq	(%rbx), %rdi
    00002186: 	jmp	.Ltmp2311 # Offset: 8582
.Ltmp2182:
    0000218b: 	movq	0x18(%rsp), %rsi
    00002190: 	xorl	%edx, %edx
    00002192: 	movq	%rbx, %rdi
    00002195: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8597
    0000219a: 	movq	%rax, (%rbx)
    0000219d: 	movq	%rax, %rdi
    000021a0: 	movq	0x30(%rsp), %rax
    000021a5: 	movq	%rax, 0x10(%rbx)
.Ltmp2305:
    000021a9: 	movq	0x28(%rsp), %rsi
    000021ae: 	movq	%r14, %rdx
    000021b1: 	callq	memcpy@PLT # Offset: 8625
    000021b6: 	movq	0x30(%rsp), %r14
    000021bb: 	movq	(%rbx), %rdi
    000021be: 	jmp	.Ltmp2304 # Offset: 8638
.Ltmp2157:
    000021c3: 	movq	0x18(%rsp), %rsi
    000021c8: 	xorl	%edx, %edx
    000021ca: 	movq	%rbx, %rdi
    000021cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8653
    000021d2: 	movq	%rax, (%rbx)
    000021d5: 	movq	%rax, %rdi
    000021d8: 	movq	0x30(%rsp), %rax
    000021dd: 	movq	%rax, 0x10(%rbx)
    000021e1: 	jmp	.Ltmp2312 # Offset: 8673
.Ltmp2229:
    000021e3: 	movq	0x18(%rsp), %rsi
    000021e8: 	xorl	%edx, %edx
    000021ea: 	movq	%rbx, %rdi
    000021ed: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8685
    000021f2: 	movq	%rax, (%rbx)
    000021f5: 	movq	%rax, %rdi
    000021f8: 	movq	0x30(%rsp), %rax
    000021fd: 	movq	%rax, 0x10(%rbx)
.Ltmp2300:
    00002201: 	movq	0x28(%rsp), %rsi
    00002206: 	movq	%r14, %rdx
    00002209: 	callq	memcpy@PLT # Offset: 8713
    0000220e: 	movq	0x30(%rsp), %r14
    00002213: 	movq	(%rbx), %rdi
    00002216: 	jmp	.Ltmp2299 # Offset: 8726
.Ltmp2193:
    0000221b: 	movq	0x18(%rsp), %rsi
    00002220: 	xorl	%edx, %edx
    00002222: 	movq	%rbx, %rdi
    00002225: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8741
    0000222a: 	movq	%rax, (%rbx)
    0000222d: 	movq	%rax, %rdi
    00002230: 	movq	0x30(%rsp), %rax
    00002235: 	movq	%rax, 0x10(%rbx)
.Ltmp2307:
    00002239: 	movq	0x28(%rsp), %rsi
    0000223e: 	movq	%r14, %rdx
    00002241: 	callq	memcpy@PLT # Offset: 8769
    00002246: 	movq	0x30(%rsp), %r14
    0000224b: 	movq	(%rbx), %rdi
    0000224e: 	jmp	.Ltmp2306 # Offset: 8782
.Ltmp2218:
    00002253: 	movq	0x18(%rsp), %rsi
    00002258: 	xorl	%edx, %edx
    0000225a: 	movq	%rbx, %rdi
    0000225d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8797
    00002262: 	movq	%rax, (%rbx)
    00002265: 	movq	%rax, %rdi
    00002268: 	movq	0x30(%rsp), %rax
    0000226d: 	movq	%rax, 0x10(%rbx)
.Ltmp2298:
    00002271: 	movq	0x28(%rsp), %rsi
    00002276: 	movq	%r14, %rdx
    00002279: 	callq	memcpy@PLT # Offset: 8825
    0000227e: 	movq	0x30(%rsp), %r14
    00002283: 	movq	(%rbx), %rdi
    00002286: 	jmp	.Ltmp2297 # Offset: 8838
.Ltmp2171:
    0000228b: 	movq	0x18(%rsp), %rsi
    00002290: 	xorl	%edx, %edx
    00002292: 	movq	%rbx, %rdi
    00002295: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8853
    0000229a: 	movq	%rax, (%rbx)
    0000229d: 	movq	%rax, %rdi
    000022a0: 	movq	0x30(%rsp), %rax
    000022a5: 	movq	%rax, 0x10(%rbx)
.Ltmp2302:
    000022a9: 	movq	0x28(%rsp), %rsi
    000022ae: 	movq	%r14, %rdx
    000022b1: 	callq	memcpy@PLT # Offset: 8881
    000022b6: 	movq	0x30(%rsp), %r14
    000022bb: 	movq	(%rbx), %rdi
    000022be: 	jmp	.Ltmp2301 # Offset: 8894
.Ltmp2146:
    000022c3: 	movq	0x18(%rsp), %rsi
    000022c8: 	xorl	%edx, %edx
    000022ca: 	movq	%rbx, %rdi
    000022cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8909
    000022d2: 	movq	%rax, (%rbx)
    000022d5: 	movq	%rax, %rdi
    000022d8: 	movq	0x30(%rsp), %rax
    000022dd: 	movq	%rax, 0x10(%rbx)
    000022e1: 	jmp	.Ltmp2313 # Offset: 8929
.Ltmp2207:
    000022e6: 	movq	0x18(%rsp), %rsi
    000022eb: 	xorl	%edx, %edx
    000022ed: 	movq	%rbx, %rdi
    000022f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8944
    000022f5: 	movq	%rax, (%rbx)
    000022f8: 	movq	%rax, %rdi
    000022fb: 	movq	0x30(%rsp), %rax
    00002300: 	movq	%rax, 0x10(%rbx)
.Ltmp2310:
    00002304: 	movq	0x28(%rsp), %rsi
    00002309: 	movq	%r14, %rdx
    0000230c: 	callq	memcpy@PLT # Offset: 8972
    00002311: 	movq	0x30(%rsp), %r14
    00002316: 	movq	(%rbx), %rdi
    00002319: 	jmp	.Ltmp2309 # Offset: 8985
.Ltmp2145:
    0000231e: 	leaq	DATAat0x32158(%rip), %rdi
    00002325: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8997
.Ltmp2156:
    0000232a: 	leaq	DATAat0x32158(%rip), %rdi
    00002331: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9009
.Ltmp2170:
    00002336: 	leaq	DATAat0x32158(%rip), %rdi
    0000233d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9021
.Ltmp2181:
    00002342: 	leaq	DATAat0x32158(%rip), %rdi
    00002349: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9033
.Ltmp2192:
    0000234e: 	leaq	DATAat0x32158(%rip), %rdi
    00002355: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9045
.Ltmp2206:
    0000235a: 	leaq	DATAat0x32158(%rip), %rdi
    00002361: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9057
.Ltmp2217:
    00002366: 	leaq	DATAat0x32158(%rip), %rdi
    0000236d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9069
.Ltmp2228:
    00002372: 	leaq	DATAat0x32158(%rip), %rdi
    00002379: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9081
.Ltmp2259:
    0000237e: 	callq	__stack_chk_fail@PLT # Offset: 9086
.Ltmp2134:
    00002383: 	leaq	DATAat0x32158(%rip), %rdi
    0000238a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9098
    0000238f: 	endbr64
.Ltmp2318:
    00002393: 	movq	%rax, %rbp
    00002396: 	jmp	.Ltmp2314 # Offset: 9110
    0000239b: 	endbr64
.Ltmp2316:
    0000239f: 	movq	%rax, %rbp
    000023a2: 	jmp	.Ltmp2315 # Offset: 9122
    000023a4: 	endbr64
    000023a8: 	jmp	.Ltmp2316 # Offset: 9128
    000023aa: 	endbr64
    000023ae: 	jmp	.Ltmp2316 # Offset: 9134
    000023b0: 	endbr64
.Ltmp2319:
    000023b4: 	movq	%rax, %rbp
    000023b7: 	jmp	.Ltmp2317 # Offset: 9143
    000023b9: 	endbr64
    000023bd: 	jmp	.Ltmp2316 # Offset: 9149
    000023bf: 	endbr64
    000023c3: 	jmp	.Ltmp2318 # Offset: 9155
    000023c5: 	endbr64
    000023c9: 	jmp	.Ltmp2316 # Offset: 9161
    000023cb: 	endbr64
    000023cf: 	jmp	.Ltmp2318 # Offset: 9167
    000023d1: 	endbr64
    000023d5: 	jmp	.Ltmp2319 # Offset: 9173
    000023d7: 	endbr64
    000023db: 	jmp	.Ltmp2319 # Offset: 9179
.Ltmp2315:
    000023dd: 	movq	0x90(%rsp), %rdi
    000023e5: 	cmpq	(%rsp), %rdi
    000023e9: 	je	.Ltmp2317 # Offset: 9193
    000023eb: 	movq	0xa0(%rsp), %rax
    000023f3: 	leaq	0x1(%rax), %rsi
    000023f7: 	callq	_ZdlPvm@PLT # Offset: 9207
.Ltmp2317:
    000023fc: 	movq	0x70(%rsp), %rdi
    00002401: 	cmpq	0x10(%rsp), %rdi
    00002406: 	je	.Ltmp2320 # Offset: 9222
.Ltmp2324:
    00002408: 	movq	0x80(%rsp), %rax
    00002410: 	leaq	0x1(%rax), %rsi
    00002414: 	callq	_ZdlPvm@PLT # Offset: 9236
.Ltmp2320:
    00002419: 	movq	0x50(%rsp), %rdi
    0000241e: 	cmpq	0x20(%rsp), %rdi
    00002423: 	je	.Ltmp2321 # Offset: 9251
    00002425: 	movq	0x60(%rsp), %rax
    0000242a: 	leaq	0x1(%rax), %rsi
    0000242e: 	callq	_ZdlPvm@PLT # Offset: 9262
.Ltmp2321:
    00002433: 	movq	%rbp, %rdi
    00002436: 	callq	_Unwind_Resume@PLT # Offset: 9270
    0000243b: 	endbr64
    0000243f: 	jmp	.Ltmp2316 # Offset: 9279
    00002444: 	endbr64
    00002448: 	jmp	.Ltmp2319 # Offset: 9288
    0000244d: 	endbr64
    00002451: 	jmp	.Ltmp2316 # Offset: 9297
    00002456: 	endbr64
    0000245a: 	jmp	.Ltmp2319 # Offset: 9306
    0000245f: 	endbr64
    00002463: 	jmp	.Ltmp2319 # Offset: 9315
    00002468: 	endbr64
    0000246c: 	jmp	.Ltmp2316 # Offset: 9324
    00002471: 	endbr64
    00002475: 	jmp	.Ltmp2319 # Offset: 9333
.Ltmp2314:
    0000247a: 	movq	0x90(%rsp), %rdi
    00002482: 	cmpq	(%rsp), %rdi
    00002486: 	je	.Ltmp2320 # Offset: 9350
    00002488: 	movq	0xa0(%rsp), %rax
    00002490: 	leaq	0x1(%rax), %rsi
    00002494: 	callq	_ZdlPvm@PLT # Offset: 9364
    00002499: 	jmp	.Ltmp2320 # Offset: 9369
    0000249e: 	endbr64
    000024a2: 	jmp	.Ltmp2318 # Offset: 9378
    000024a7: 	endbr64
    000024ab: 	movq	%rax, %rbp
    000024ae: 	jmp	.Ltmp2320 # Offset: 9390
    000024b3: 	endbr64
    000024b7: 	jmp	.Ltmp2318 # Offset: 9399
    000024bc: 	endbr64
    000024c0: 	jmp	.Ltmp2318 # Offset: 9408
    000024c5: 	endbr64
    000024c9: 	jmp	.Ltmp2318 # Offset: 9417
    000024ce: 	endbr64
    000024d2: 	movq	%rax, %rbp
    000024d5: 	jmp	.Ltmp2322 # Offset: 9429
    000024d7: 	endbr64
    000024db: 	movq	%rax, %rbp
    000024de: 	jmp	.Ltmp2323 # Offset: 9438
.Ltmp2322:
    000024e0: 	movq	0x90(%rsp), %rdi
    000024e8: 	cmpq	(%rsp), %rdi
    000024ec: 	je	.Ltmp2323 # Offset: 9452
    000024ee: 	movq	0xa0(%rsp), %rax
    000024f6: 	leaq	0x1(%rax), %rsi
    000024fa: 	callq	_ZdlPvm@PLT # Offset: 9466
.Ltmp2323:
    000024ff: 	movq	0x70(%rsp), %rdi
    00002504: 	leaq	0x80(%rsp), %rax
    0000250c: 	cmpq	%rax, %rdi
    0000250f: 	jne	.Ltmp2324 # Offset: 9487
    00002515: 	jmp	.Ltmp2320 # Offset: 9493
    0000251a: 	endbr64
    0000251e: 	jmp	.Ltmp2318 # Offset: 9502
    00002523: 	endbr64
    00002527: 	jmp	.Ltmp2318 # Offset: 9511
    0000252c: 	endbr64
    00002530: 	jmp	.Ltmp2318 # Offset: 9520
    00002535: 	endbr64
    00002539: 	jmp	.Ltmp2319 # Offset: 9529
    0000253e: 	endbr64
    00002542: 	jmp	.Ltmp2319 # Offset: 9538
    00002547: 	endbr64
    0000254b: 	jmp	.Ltmp2316 # Offset: 9547
    00002550: 	endbr64
    00002554: 	jmp	.Ltmp2319 # Offset: 9556
    00002559: 	endbr64
    0000255d: 	jmp	.Ltmp2316 # Offset: 9565
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIaEvv"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x2f2e0
  Size        : 0x2452
  MaxSize     : 0x2452
  Offset      : 0x2f2e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf48, %rsp
    00000039: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm7
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x3f38(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	leaq	0x60(%rsp), %rax
    00000059: 	movaps	%xmm7, 0x30(%rsp)
    0000005e: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    00000066: 	leaq	0x30(%rsp), %rdi
    0000006b: 	movq	%rax, 0x20(%rsp)
    00000070: 	leaq	0xb0(%rsp), %rbp
    00000078: 	movq	%rax, 0x50(%rsp)
    0000007d: 	movl	$0x5f38, %eax
    00000082: 	leaq	0x70(%rsp), %r15
    00000087: 	leaq	0x1ff0(%rsp), %r12
    0000008f: 	movw	%ax, 0x64(%rsp)
    00000094: 	movq	%rdi, 0x18(%rsp)
    00000099: 	movl	$0x746e6975, 0x60(%rsp)
    000000a1: 	movb	$0x74, 0x66(%rsp)
    000000a6: 	movq	$0x7, 0x58(%rsp)
    000000af: 	movb	$0x0, 0x67(%rsp)
    000000b4: 	movaps	%xmm7, 0x40(%rsp)
    000000b9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 185
    000000be: 	movzbl	init_value(%rip), %eax
    000000c5: 	movl	$0x3e8, %ecx
    000000ca: 	movq	%rbp, %rdi
    000000cd: 	movabsq	$0x101010101010101, %rdx
    000000d7: 	imulq	%rdx, %rax
    000000db: 	leaq	DATAat0x321d8(%rip), %rdx
    000000e2: 	rep		stosq	%rax, %es:(%rdi)
    000000e5: 	movl	$0x3e8, %ecx
    000000ea: 	movq	%r12, %rdi
    000000ed: 	rep		stosq	%rax, %es:(%rdi)
    000000f0: 	leaq	0x50(%rsp), %rax
    000000f5: 	movq	%r15, %rdi
    000000f8: 	movq	%rax, %rsi
    000000fb: 	movq	%rax, 0x8(%rsp)
    00000100: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 256
    00000105: 	movq	0x58(%rsp), %rdx
    0000010a: 	movq	0x50(%rsp), %rsi
    0000010f: 	movq	%r15, %rdi
    00000112: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 274
    00000117: 	leaq	0xa0(%rsp), %rsi
    0000011f: 	leaq	0x10(%rax), %rdx
    00000123: 	movq	%rsi, 0x90(%rsp)
    0000012b: 	movq	(%rax), %rcx
    0000012e: 	movq	%rsi, (%rsp)
    00000132: 	cmpq	%rdx, %rcx
    00000135: 	je	.Ltmp2325 # Offset: 309
    0000013b: 	movq	%rcx, 0x90(%rsp)
    00000143: 	movq	0x10(%rax), %rcx
    00000147: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2476:
    0000014f: 	movq	0x8(%rax), %rcx
    00000153: 	leaq	0x90(%rsp), %r13
    0000015b: 	movq	%r12, %rsi
    0000015e: 	movq	%rbp, %rdi
    00000161: 	movq	%r13, %r8
    00000164: 	movq	%rcx, 0x98(%rsp)
    0000016c: 	leaq	_Z17inner_product_stdIPKhhET0_T_S3_m(%rip), %rcx
    00000173: 	movq	%rdx, (%rax)
    00000176: 	movl	$0x1f40, %edx
    0000017b: 	movq	$0x0, 0x8(%rax)
    00000183: 	movb	$0x0, 0x10(%rax)
    00000187: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 391
    0000018c: 	movq	0x90(%rsp), %rdi
    00000194: 	cmpq	(%rsp), %rdi
    00000198: 	je	.Ltmp2326 # Offset: 408
    0000019a: 	movq	0xa0(%rsp), %rax
    000001a2: 	leaq	0x1(%rax), %rsi
    000001a6: 	callq	_ZdlPvm@PLT # Offset: 422
.Ltmp2326:
    000001ab: 	movq	0x70(%rsp), %rdi
    000001b0: 	leaq	0x80(%rsp), %rax
    000001b8: 	movq	%rax, 0x10(%rsp)
    000001bd: 	cmpq	%rax, %rdi
    000001c0: 	je	.Ltmp2327 # Offset: 448
    000001c2: 	movq	0x80(%rsp), %rax
    000001ca: 	leaq	0x1(%rax), %rsi
    000001ce: 	callq	_ZdlPvm@PLT # Offset: 462
.Ltmp2327:
    000001d3: 	movq	0x8(%rsp), %rsi
    000001d8: 	leaq	DATAat0x324d0(%rip), %rdx
    000001df: 	movq	%r13, %rdi
    000001e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 482
    000001e7: 	callq	clock@PLT # Offset: 487
    000001ec: 	movl	iterations(%rip), %ecx
    000001f2: 	xorl	%ebx, %ebx
    000001f4: 	leaq	DATAat0x321c8(%rip), %r14
    000001fb: 	movq	%rax, start_time(%rip)
    00000202: 	testl	%ecx, %ecx
    00000204: 	jle	.Ltmp2328 # Offset: 516
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2331:
    00000210: 	xorl	%eax, %eax
    00000212: 	pxor	%xmm4, %xmm4
    00000216: 	pxor	%xmm3, %xmm3
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2329:
    00000220: 	movdqa	(%rbp,%rax), %xmm0
    00000226: 	movdqa	(%r12,%rax), %xmm2
    0000022c: 	addq	$0x10, %rax
    00000230: 	movdqa	%xmm2, %xmm5
    00000234: 	movdqa	%xmm0, %xmm1
    00000238: 	punpcklbw	%xmm3, %xmm2
    0000023c: 	punpckhbw	%xmm3, %xmm5
    00000240: 	punpckhbw	%xmm3, %xmm1
    00000244: 	punpcklbw	%xmm3, %xmm0
    00000248: 	pmullw	%xmm5, %xmm1
    0000024c: 	pmullw	%xmm2, %xmm0
    00000250: 	paddw	%xmm1, %xmm0
    00000254: 	paddw	%xmm0, %xmm4
    00000258: 	cmpq	$0x1f40, %rax
    0000025e: 	jne	.Ltmp2329 # Offset: 606
    00000260: 	movdqa	%xmm4, %xmm0
    00000264: 	movl	init_value(%rip), %eax
    0000026a: 	psrldq	$0x8, %xmm0
    0000026f: 	imull	%eax, %eax
    00000272: 	paddw	%xmm0, %xmm4
    00000276: 	movdqa	%xmm4, %xmm0
    0000027a: 	psrldq	$0x4, %xmm0
    0000027f: 	paddw	%xmm0, %xmm4
    00000283: 	shll	$0x6, %eax
    00000286: 	movdqa	%xmm4, %xmm0
    0000028a: 	psrldq	$0x2, %xmm0
    0000028f: 	paddw	%xmm0, %xmm4
    00000293: 	pextrw	$0x0, %xmm4, %edx
    00000298: 	cmpb	%dl, %al
    0000029a: 	jne	.Ltmp2330 # Offset: 666
.Ltmp2460:
    000002a0: 	addl	$0x1, %ebx
    000002a3: 	cmpl	%ecx, %ebx
    000002a5: 	jl	.Ltmp2331 # Offset: 677
.Ltmp2328:
    000002ab: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000002b9: 	subq	$0x20, %rax
    000002bd: 	cmpq	%rax, %rbx
    000002c0: 	je	.Ltmp2332 # Offset: 704
    000002c6: 	leaq	0x10(%rbx), %rdi
    000002ca: 	movq	0x98(%rsp), %r14
    000002d2: 	movq	%rdi, (%rbx)
    000002d5: 	movq	0x90(%rsp), %rax
    000002dd: 	movq	%rax, %rsi
    000002e0: 	movq	%rax, 0x28(%rsp)
    000002e5: 	addq	%r14, %rsi
    000002e8: 	je	.Ltmp2333 # Offset: 744
    000002ea: 	testq	%rax, %rax
    000002ed: 	je	.Ltmp2334 # Offset: 749
.Ltmp2333:
    000002f3: 	movq	%r14, 0x30(%rsp)
    000002f8: 	cmpq	$0xf, %r14
    000002fc: 	ja	.Ltmp2335 # Offset: 764
    00000302: 	cmpq	$0x1, %r14
    00000306: 	jne	.Ltmp2336 # Offset: 774
    0000030c: 	movq	0x28(%rsp), %rax
    00000311: 	movzbl	(%rax), %eax
    00000314: 	movb	%al, 0x10(%rbx)
.Ltmp2461:
    00000317: 	movq	%r14, 0x8(%rbx)
    0000031b: 	movb	$0x0, (%rdi,%r14)
    00000320: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000327: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000032e: 	addq	$0x20, %rax
    00000332: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000339: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000340: 	je	.Ltmp2337 # Offset: 832
.Ltmp2475:
    00000346: 	movq	-0x20(%rax), %r14
    0000034a: 	callq	clock@PLT # Offset: 842
    0000034f: 	pxor	%xmm0, %xmm0
    00000353: 	movq	%rax, end_time(%rip)
    0000035a: 	movq	%r14, %rdi
    0000035d: 	subq	start_time(%rip), %rax
    00000364: 	cvtsi2sd	%rax, %xmm0
    00000369: 	divsd	DATAat0x32600(%rip), %xmm0
    00000371: 	callq	_Z13record_resultdPKc # Offset: 881
    00000376: 	movq	0x90(%rsp), %rdi
    0000037e: 	cmpq	(%rsp), %rdi
    00000382: 	je	.Ltmp2338 # Offset: 898
    00000384: 	movq	0xa0(%rsp), %rax
    0000038c: 	leaq	0x1(%rax), %rsi
    00000390: 	callq	_ZdlPvm@PLT # Offset: 912
.Ltmp2338:
    00000395: 	movq	0x8(%rsp), %rsi
    0000039a: 	leaq	DATAat0x323c8(%rip), %rdx
    000003a1: 	movq	%r13, %rdi
    000003a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 932
    000003a9: 	callq	clock@PLT # Offset: 937
    000003ae: 	movl	iterations(%rip), %ecx
    000003b4: 	xorl	%ebx, %ebx
    000003b6: 	leaq	DATAat0x321c8(%rip), %r14
    000003bd: 	movq	%rax, start_time(%rip)
    000003c4: 	testl	%ecx, %ecx
    000003c6: 	jle	.Ltmp2339 # Offset: 966
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp2342:
    000003d0: 	pxor	%xmm5, %xmm5
    000003d4: 	pxor	%xmm4, %xmm4
    000003d8: 	pxor	%xmm3, %xmm3
    000003dc: 	xorl	%eax, %eax
    000003de: 	nop # Size: 2
.Ltmp2340:
    000003e0: 	movdqa	(%rbp,%rax), %xmm0
    000003e6: 	movdqa	(%r12,%rax), %xmm2
    000003ec: 	addq	$0x10, %rax
    000003f0: 	movdqa	%xmm2, %xmm6
    000003f4: 	movdqa	%xmm0, %xmm1
    000003f8: 	punpckhbw	%xmm4, %xmm2
    000003fc: 	punpcklbw	%xmm4, %xmm6
    00000400: 	punpcklbw	%xmm4, %xmm1
    00000404: 	punpckhbw	%xmm4, %xmm0
    00000408: 	pmullw	%xmm6, %xmm1
    0000040c: 	pmullw	%xmm2, %xmm0
    00000410: 	movdqa	%xmm1, %xmm2
    00000414: 	punpcklwd	%xmm3, %xmm1
    00000418: 	punpckhwd	%xmm3, %xmm2
    0000041c: 	paddd	%xmm2, %xmm1
    00000420: 	movdqa	%xmm0, %xmm2
    00000424: 	punpcklwd	%xmm3, %xmm0
    00000428: 	punpckhwd	%xmm3, %xmm2
    0000042c: 	paddd	%xmm2, %xmm0
    00000430: 	paddd	%xmm0, %xmm1
    00000434: 	paddd	%xmm1, %xmm5
    00000438: 	cmpq	$0x1f40, %rax
    0000043e: 	jne	.Ltmp2340 # Offset: 1086
    00000440: 	movdqa	%xmm5, %xmm0
    00000444: 	movl	init_value(%rip), %eax
    0000044a: 	psrldq	$0x8, %xmm0
    0000044f: 	imull	%eax, %eax
    00000452: 	paddd	%xmm0, %xmm5
    00000456: 	movdqa	%xmm5, %xmm0
    0000045a: 	psrldq	$0x4, %xmm0
    0000045f: 	paddd	%xmm0, %xmm5
    00000463: 	shll	$0x6, %eax
    00000466: 	movd	%xmm5, %edx
    0000046a: 	movzbl	%al, %eax
    0000046d: 	movzbl	%dl, %edx
    00000470: 	cmpl	%edx, %eax
    00000472: 	jne	.Ltmp2341 # Offset: 1138
.Ltmp2462:
    00000478: 	addl	$0x1, %ebx
    0000047b: 	cmpl	%ecx, %ebx
    0000047d: 	jl	.Ltmp2342 # Offset: 1149
.Ltmp2339:
    00000483: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000048a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000491: 	subq	$0x20, %rax
    00000495: 	cmpq	%rax, %rbx
    00000498: 	je	.Ltmp2343 # Offset: 1176
    0000049e: 	leaq	0x10(%rbx), %rdi
    000004a2: 	movq	0x98(%rsp), %r14
    000004aa: 	movq	%rdi, (%rbx)
    000004ad: 	movq	0x90(%rsp), %rax
    000004b5: 	movq	%rax, %rsi
    000004b8: 	movq	%rax, 0x28(%rsp)
    000004bd: 	addq	%r14, %rsi
    000004c0: 	je	.Ltmp2344 # Offset: 1216
    000004c2: 	testq	%rax, %rax
    000004c5: 	je	.Ltmp2345 # Offset: 1221
.Ltmp2344:
    000004cb: 	movq	%r14, 0x30(%rsp)
    000004d0: 	cmpq	$0xf, %r14
    000004d4: 	ja	.Ltmp2346 # Offset: 1236
    000004da: 	cmpq	$0x1, %r14
    000004de: 	jne	.Ltmp2347 # Offset: 1246
    000004e4: 	movq	0x28(%rsp), %rax
    000004e9: 	movzbl	(%rax), %eax
    000004ec: 	movb	%al, 0x10(%rbx)
.Ltmp2508:
    000004ef: 	movq	%r14, 0x8(%rbx)
    000004f3: 	movb	$0x0, (%rdi,%r14)
    000004f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004ff: 	addq	$0x20, %rax
    00000503: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2481:
    0000050a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000511: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000518: 	je	.Ltmp2348 # Offset: 1304
.Ltmp2472:
    0000051e: 	movq	-0x20(%rax), %r14
    00000522: 	callq	clock@PLT # Offset: 1314
    00000527: 	pxor	%xmm0, %xmm0
    0000052b: 	movq	%rax, end_time(%rip)
    00000532: 	movq	%r14, %rdi
    00000535: 	subq	start_time(%rip), %rax
    0000053c: 	cvtsi2sd	%rax, %xmm0
    00000541: 	divsd	DATAat0x32600(%rip), %xmm0
    00000549: 	callq	_Z13record_resultdPKc # Offset: 1353
    0000054e: 	movq	0x90(%rsp), %rdi
    00000556: 	cmpq	(%rsp), %rdi
    0000055a: 	je	.Ltmp2349 # Offset: 1370
    0000055c: 	movq	0xa0(%rsp), %rax
    00000564: 	leaq	0x1(%rax), %rsi
    00000568: 	callq	_ZdlPvm@PLT # Offset: 1384
.Ltmp2349:
    0000056d: 	movq	0x8(%rsp), %rsi
    00000572: 	leaq	DATAat0x323e8(%rip), %rdx
    00000579: 	movq	%r13, %rdi
    0000057c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1404
    00000581: 	callq	clock@PLT # Offset: 1409
    00000586: 	movl	iterations(%rip), %ecx
    0000058c: 	xorl	%ebx, %ebx
    0000058e: 	leaq	DATAat0x321c8(%rip), %r14
    00000595: 	movq	%rax, start_time(%rip)
    0000059c: 	testl	%ecx, %ecx
    0000059e: 	jle	.Ltmp2350 # Offset: 1438
    000005a4: 	nopl	(%rax) # Size: 4
.Ltmp2353:
    000005a8: 	pxor	%xmm1, %xmm1
    000005ac: 	pxor	%xmm7, %xmm7
    000005b0: 	pxor	%xmm6, %xmm6
    000005b4: 	xorl	%eax, %eax
    000005b6: 	pxor	%xmm5, %xmm5
    000005ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2351:
    000005c0: 	movdqa	(%rbp,%rax), %xmm0
    000005c6: 	movdqa	(%r12,%rax), %xmm3
    000005cc: 	movdqa	%xmm5, %xmm8
    000005d1: 	addq	$0x10, %rax
    000005d5: 	movdqa	%xmm3, %xmm4
    000005d9: 	movdqa	%xmm0, %xmm2
    000005dd: 	punpckhbw	%xmm7, %xmm3
    000005e1: 	punpcklbw	%xmm7, %xmm4
    000005e5: 	punpcklbw	%xmm7, %xmm2
    000005e9: 	punpckhbw	%xmm7, %xmm0
    000005ed: 	pmullw	%xmm4, %xmm2
    000005f1: 	pmullw	%xmm3, %xmm0
    000005f5: 	movdqa	%xmm2, %xmm3
    000005f9: 	punpckhwd	%xmm6, %xmm2
    000005fd: 	movdqa	%xmm0, %xmm4
    00000601: 	punpcklwd	%xmm6, %xmm3
    00000605: 	punpcklwd	%xmm6, %xmm4
    00000609: 	punpckhwd	%xmm6, %xmm0
    0000060d: 	pcmpgtd	%xmm3, %xmm8
    00000612: 	movdqa	%xmm3, %xmm9
    00000617: 	punpckhdq	%xmm8, %xmm9
    0000061c: 	punpckldq	%xmm8, %xmm3
    00000621: 	movdqa	%xmm5, %xmm8
    00000626: 	pcmpgtd	%xmm2, %xmm8
    0000062b: 	paddq	%xmm9, %xmm3
    00000630: 	movdqa	%xmm2, %xmm9
    00000635: 	punpckhdq	%xmm8, %xmm9
    0000063a: 	punpckldq	%xmm8, %xmm2
    0000063f: 	movdqa	%xmm4, %xmm8
    00000644: 	paddq	%xmm9, %xmm2
    00000649: 	paddq	%xmm2, %xmm3
    0000064d: 	movdqa	%xmm5, %xmm2
    00000651: 	pcmpgtd	%xmm4, %xmm2
    00000655: 	punpckhdq	%xmm2, %xmm8
    0000065a: 	punpckldq	%xmm2, %xmm4
    0000065e: 	movdqa	%xmm5, %xmm2
    00000662: 	pcmpgtd	%xmm0, %xmm2
    00000666: 	paddq	%xmm8, %xmm4
    0000066b: 	movdqa	%xmm0, %xmm8
    00000670: 	punpckldq	%xmm2, %xmm8
    00000675: 	punpckhdq	%xmm2, %xmm0
    00000679: 	paddq	%xmm8, %xmm4
    0000067e: 	paddq	%xmm0, %xmm1
    00000682: 	paddq	%xmm4, %xmm3
    00000686: 	paddq	%xmm3, %xmm1
    0000068a: 	cmpq	$0x1f40, %rax
    00000690: 	jne	.Ltmp2351 # Offset: 1680
    00000696: 	movl	init_value(%rip), %eax
    0000069c: 	movdqa	%xmm1, %xmm0
    000006a0: 	psrldq	$0x8, %xmm0
    000006a5: 	imull	%eax, %eax
    000006a8: 	paddq	%xmm0, %xmm1
    000006ac: 	movq	%xmm1, %rdx
    000006b1: 	shll	$0x6, %eax
    000006b4: 	cmpb	%dl, %al
    000006b6: 	jne	.Ltmp2352 # Offset: 1718
.Ltmp2465:
    000006bc: 	addl	$0x1, %ebx
    000006bf: 	cmpl	%ecx, %ebx
    000006c1: 	jl	.Ltmp2353 # Offset: 1729
.Ltmp2350:
    000006c7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000006ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000006d5: 	subq	$0x20, %rax
    000006d9: 	cmpq	%rax, %rbx
    000006dc: 	je	.Ltmp2354 # Offset: 1756
    000006e2: 	leaq	0x10(%rbx), %rdi
    000006e6: 	movq	0x98(%rsp), %r14
    000006ee: 	movq	%rdi, (%rbx)
    000006f1: 	movq	0x90(%rsp), %rax
    000006f9: 	movq	%rax, %rsi
    000006fc: 	movq	%rax, 0x28(%rsp)
    00000701: 	addq	%r14, %rsi
    00000704: 	je	.Ltmp2355 # Offset: 1796
    00000706: 	testq	%rax, %rax
    00000709: 	je	.Ltmp2356 # Offset: 1801
.Ltmp2355:
    0000070f: 	movq	%r14, 0x30(%rsp)
    00000714: 	cmpq	$0xf, %r14
    00000718: 	ja	.Ltmp2357 # Offset: 1816
    0000071e: 	cmpq	$0x1, %r14
    00000722: 	jne	.Ltmp2358 # Offset: 1826
    00000728: 	movq	0x28(%rsp), %rax
    0000072d: 	movzbl	(%rax), %eax
    00000730: 	movb	%al, 0x10(%rbx)
.Ltmp2511:
    00000733: 	movq	%r14, 0x8(%rbx)
    00000737: 	movb	$0x0, (%rdi,%r14)
    0000073c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000743: 	addq	$0x20, %rax
    00000747: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2474:
    0000074e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000755: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000075c: 	je	.Ltmp2359 # Offset: 1884
.Ltmp2473:
    00000762: 	movq	-0x20(%rax), %r14
    00000766: 	callq	clock@PLT # Offset: 1894
    0000076b: 	pxor	%xmm0, %xmm0
    0000076f: 	movq	%rax, end_time(%rip)
    00000776: 	movq	%r14, %rdi
    00000779: 	subq	start_time(%rip), %rax
    00000780: 	cvtsi2sd	%rax, %xmm0
    00000785: 	divsd	DATAat0x32600(%rip), %xmm0
    0000078d: 	callq	_Z13record_resultdPKc # Offset: 1933
    00000792: 	movq	0x90(%rsp), %rdi
    0000079a: 	cmpq	(%rsp), %rdi
    0000079e: 	je	.Ltmp2360 # Offset: 1950
    000007a0: 	movq	0xa0(%rsp), %rax
    000007a8: 	leaq	0x1(%rax), %rsi
    000007ac: 	callq	_ZdlPvm@PLT # Offset: 1964
.Ltmp2360:
    000007b1: 	movq	0x8(%rsp), %rsi
    000007b6: 	leaq	DATAat0x321f0(%rip), %rdx
    000007bd: 	movq	%r15, %rdi
    000007c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1984
    000007c5: 	movq	0x58(%rsp), %rdx
    000007ca: 	movq	0x50(%rsp), %rsi
    000007cf: 	movq	%r15, %rdi
    000007d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2002
    000007d7: 	movq	(%rsp), %rsi
    000007db: 	leaq	0x10(%rax), %rdx
    000007df: 	movq	%rsi, 0x90(%rsp)
    000007e7: 	movq	(%rax), %rcx
    000007ea: 	cmpq	%rdx, %rcx
    000007ed: 	je	.Ltmp2361 # Offset: 2029
    000007f3: 	movq	%rcx, 0x90(%rsp)
    000007fb: 	movq	0x10(%rax), %rcx
    000007ff: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2471:
    00000807: 	movq	0x8(%rax), %rcx
    0000080b: 	movq	%r13, %r8
    0000080e: 	movq	%r12, %rsi
    00000811: 	movq	%rbp, %rdi
    00000814: 	movq	%rcx, 0x98(%rsp)
    0000081c: 	leaq	_Z14inner_product1IPKhhET0_T_S3_m(%rip), %rcx
    00000823: 	movq	%rdx, (%rax)
    00000826: 	movl	$0x1f40, %edx
    0000082b: 	movq	$0x0, 0x8(%rax)
    00000833: 	movb	$0x0, 0x10(%rax)
    00000837: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2103
    0000083c: 	movq	0x90(%rsp), %rdi
    00000844: 	cmpq	(%rsp), %rdi
    00000848: 	je	.Ltmp2362 # Offset: 2120
    0000084a: 	movq	0xa0(%rsp), %rax
    00000852: 	leaq	0x1(%rax), %rsi
    00000856: 	callq	_ZdlPvm@PLT # Offset: 2134
.Ltmp2362:
    0000085b: 	movq	0x70(%rsp), %rdi
    00000860: 	cmpq	0x10(%rsp), %rdi
    00000865: 	je	.Ltmp2363 # Offset: 2149
    00000867: 	movq	0x80(%rsp), %rax
    0000086f: 	leaq	0x1(%rax), %rsi
    00000873: 	callq	_ZdlPvm@PLT # Offset: 2163
.Ltmp2363:
    00000878: 	movq	0x8(%rsp), %rsi
    0000087d: 	leaq	DATAat0x324f0(%rip), %rdx
    00000884: 	movq	%r13, %rdi
    00000887: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2183
    0000088c: 	callq	clock@PLT # Offset: 2188
    00000891: 	movl	iterations(%rip), %ecx
    00000897: 	xorl	%ebx, %ebx
    00000899: 	leaq	DATAat0x321c8(%rip), %r14
    000008a0: 	movq	%rax, start_time(%rip)
    000008a7: 	testl	%ecx, %ecx
    000008a9: 	jle	.Ltmp2364 # Offset: 2217
    000008af: 	nop # Size: 1
.Ltmp2367:
    000008b0: 	xorl	%eax, %eax
    000008b2: 	pxor	%xmm4, %xmm4
    000008b6: 	pxor	%xmm3, %xmm3
    000008ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2365:
    000008c0: 	movdqa	(%rbp,%rax), %xmm0
    000008c6: 	movdqa	(%r12,%rax), %xmm2
    000008cc: 	addq	$0x10, %rax
    000008d0: 	movdqa	%xmm2, %xmm5
    000008d4: 	movdqa	%xmm0, %xmm1
    000008d8: 	punpcklbw	%xmm3, %xmm2
    000008dc: 	punpckhbw	%xmm3, %xmm5
    000008e0: 	punpckhbw	%xmm3, %xmm1
    000008e4: 	punpcklbw	%xmm3, %xmm0
    000008e8: 	pmullw	%xmm5, %xmm1
    000008ec: 	pmullw	%xmm2, %xmm0
    000008f0: 	paddw	%xmm1, %xmm0
    000008f4: 	paddw	%xmm0, %xmm4
    000008f8: 	cmpq	$0x1f40, %rax
    000008fe: 	jne	.Ltmp2365 # Offset: 2302
    00000900: 	movdqa	%xmm4, %xmm0
    00000904: 	movl	init_value(%rip), %eax
    0000090a: 	psrldq	$0x8, %xmm0
    0000090f: 	imull	%eax, %eax
    00000912: 	paddw	%xmm0, %xmm4
    00000916: 	movdqa	%xmm4, %xmm0
    0000091a: 	psrldq	$0x4, %xmm0
    0000091f: 	paddw	%xmm0, %xmm4
    00000923: 	shll	$0x6, %eax
    00000926: 	movdqa	%xmm4, %xmm0
    0000092a: 	psrldq	$0x2, %xmm0
    0000092f: 	paddw	%xmm0, %xmm4
    00000933: 	pextrw	$0x0, %xmm4, %edx
    00000938: 	cmpb	%dl, %al
    0000093a: 	jne	.Ltmp2366 # Offset: 2362
.Ltmp2464:
    00000940: 	addl	$0x1, %ebx
    00000943: 	cmpl	%ecx, %ebx
    00000945: 	jl	.Ltmp2367 # Offset: 2373
.Ltmp2364:
    0000094b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000952: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000959: 	subq	$0x20, %rax
    0000095d: 	cmpq	%rax, %rbx
    00000960: 	je	.Ltmp2368 # Offset: 2400
    00000966: 	leaq	0x10(%rbx), %rdi
    0000096a: 	movq	0x98(%rsp), %r14
    00000972: 	movq	%rdi, (%rbx)
    00000975: 	movq	0x90(%rsp), %rax
    0000097d: 	movq	%rax, %rsi
    00000980: 	movq	%rax, 0x28(%rsp)
    00000985: 	addq	%r14, %rsi
    00000988: 	je	.Ltmp2369 # Offset: 2440
    0000098a: 	testq	%rax, %rax
    0000098d: 	je	.Ltmp2370 # Offset: 2445
.Ltmp2369:
    00000993: 	movq	%r14, 0x30(%rsp)
    00000998: 	cmpq	$0xf, %r14
    0000099c: 	ja	.Ltmp2371 # Offset: 2460
    000009a2: 	cmpq	$0x1, %r14
    000009a6: 	jne	.Ltmp2372 # Offset: 2470
    000009ac: 	movq	0x28(%rsp), %rax
    000009b1: 	movzbl	(%rax), %eax
    000009b4: 	movb	%al, 0x10(%rbx)
.Ltmp2501:
    000009b7: 	movq	%r14, 0x8(%rbx)
    000009bb: 	movb	$0x0, (%rdi,%r14)
    000009c0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009c7: 	addq	$0x20, %rax
    000009cb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2486:
    000009d2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000009d9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009e0: 	je	.Ltmp2373 # Offset: 2528
.Ltmp2483:
    000009e6: 	movq	-0x20(%rax), %r14
    000009ea: 	callq	clock@PLT # Offset: 2538
    000009ef: 	pxor	%xmm0, %xmm0
    000009f3: 	movq	%rax, end_time(%rip)
    000009fa: 	movq	%r14, %rdi
    000009fd: 	subq	start_time(%rip), %rax
    00000a04: 	cvtsi2sd	%rax, %xmm0
    00000a09: 	divsd	DATAat0x32600(%rip), %xmm0
    00000a11: 	callq	_Z13record_resultdPKc # Offset: 2577
    00000a16: 	movq	0x90(%rsp), %rdi
    00000a1e: 	cmpq	(%rsp), %rdi
    00000a22: 	je	.Ltmp2374 # Offset: 2594
    00000a24: 	movq	0xa0(%rsp), %rax
    00000a2c: 	leaq	0x1(%rax), %rsi
    00000a30: 	callq	_ZdlPvm@PLT # Offset: 2608
.Ltmp2374:
    00000a35: 	movq	0x8(%rsp), %rsi
    00000a3a: 	leaq	DATAat0x32408(%rip), %rdx
    00000a41: 	movq	%r13, %rdi
    00000a44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2628
    00000a49: 	callq	clock@PLT # Offset: 2633
    00000a4e: 	movl	iterations(%rip), %ecx
    00000a54: 	xorl	%ebx, %ebx
    00000a56: 	leaq	DATAat0x321c8(%rip), %r14
    00000a5d: 	movq	%rax, start_time(%rip)
    00000a64: 	testl	%ecx, %ecx
    00000a66: 	jle	.Ltmp2375 # Offset: 2662
    00000a6c: 	nopl	(%rax) # Size: 4
.Ltmp2378:
    00000a70: 	pxor	%xmm5, %xmm5
    00000a74: 	pxor	%xmm4, %xmm4
    00000a78: 	pxor	%xmm3, %xmm3
    00000a7c: 	xorl	%eax, %eax
    00000a7e: 	nop # Size: 2
.Ltmp2376:
    00000a80: 	movdqa	(%rbp,%rax), %xmm0
    00000a86: 	movdqa	(%r12,%rax), %xmm2
    00000a8c: 	addq	$0x10, %rax
    00000a90: 	movdqa	%xmm2, %xmm6
    00000a94: 	movdqa	%xmm0, %xmm1
    00000a98: 	punpckhbw	%xmm4, %xmm2
    00000a9c: 	punpcklbw	%xmm4, %xmm6
    00000aa0: 	punpcklbw	%xmm4, %xmm1
    00000aa4: 	punpckhbw	%xmm4, %xmm0
    00000aa8: 	pmullw	%xmm6, %xmm1
    00000aac: 	pmullw	%xmm2, %xmm0
    00000ab0: 	movdqa	%xmm1, %xmm2
    00000ab4: 	punpcklwd	%xmm3, %xmm1
    00000ab8: 	punpckhwd	%xmm3, %xmm2
    00000abc: 	paddd	%xmm2, %xmm1
    00000ac0: 	movdqa	%xmm0, %xmm2
    00000ac4: 	punpcklwd	%xmm3, %xmm0
    00000ac8: 	punpckhwd	%xmm3, %xmm2
    00000acc: 	paddd	%xmm2, %xmm0
    00000ad0: 	paddd	%xmm0, %xmm1
    00000ad4: 	paddd	%xmm1, %xmm5
    00000ad8: 	cmpq	$0x1f40, %rax
    00000ade: 	jne	.Ltmp2376 # Offset: 2782
    00000ae0: 	movdqa	%xmm5, %xmm0
    00000ae4: 	movl	init_value(%rip), %eax
    00000aea: 	psrldq	$0x8, %xmm0
    00000aef: 	imull	%eax, %eax
    00000af2: 	paddd	%xmm0, %xmm5
    00000af6: 	movdqa	%xmm5, %xmm0
    00000afa: 	psrldq	$0x4, %xmm0
    00000aff: 	paddd	%xmm0, %xmm5
    00000b03: 	shll	$0x6, %eax
    00000b06: 	movd	%xmm5, %edx
    00000b0a: 	movzbl	%al, %eax
    00000b0d: 	movzbl	%dl, %edx
    00000b10: 	cmpl	%edx, %eax
    00000b12: 	jne	.Ltmp2377 # Offset: 2834
.Ltmp2463:
    00000b18: 	addl	$0x1, %ebx
    00000b1b: 	cmpl	%ecx, %ebx
    00000b1d: 	jl	.Ltmp2378 # Offset: 2845
.Ltmp2375:
    00000b23: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000b2a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000b31: 	subq	$0x20, %rax
    00000b35: 	cmpq	%rax, %rbx
    00000b38: 	je	.Ltmp2379 # Offset: 2872
    00000b3e: 	leaq	0x10(%rbx), %rdi
    00000b42: 	movq	0x98(%rsp), %r14
    00000b4a: 	movq	%rdi, (%rbx)
    00000b4d: 	movq	0x90(%rsp), %rax
    00000b55: 	movq	%rax, %rsi
    00000b58: 	movq	%rax, 0x28(%rsp)
    00000b5d: 	addq	%r14, %rsi
    00000b60: 	je	.Ltmp2380 # Offset: 2912
    00000b62: 	testq	%rax, %rax
    00000b65: 	je	.Ltmp2381 # Offset: 2917
.Ltmp2380:
    00000b6b: 	movq	%r14, 0x30(%rsp)
    00000b70: 	cmpq	$0xf, %r14
    00000b74: 	ja	.Ltmp2382 # Offset: 2932
    00000b7a: 	cmpq	$0x1, %r14
    00000b7e: 	jne	.Ltmp2383 # Offset: 2942
    00000b84: 	movq	0x28(%rsp), %rax
    00000b89: 	movzbl	(%rax), %eax
    00000b8c: 	movb	%al, 0x10(%rbx)
.Ltmp2504:
    00000b8f: 	movq	%r14, 0x8(%rbx)
    00000b93: 	movb	$0x0, (%rdi,%r14)
    00000b98: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b9f: 	addq	$0x20, %rax
    00000ba3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2482:
    00000baa: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000bb1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bb8: 	je	.Ltmp2384 # Offset: 3000
.Ltmp2478:
    00000bbe: 	movq	-0x20(%rax), %r14
    00000bc2: 	callq	clock@PLT # Offset: 3010
    00000bc7: 	pxor	%xmm0, %xmm0
    00000bcb: 	movq	%rax, end_time(%rip)
    00000bd2: 	movq	%r14, %rdi
    00000bd5: 	subq	start_time(%rip), %rax
    00000bdc: 	cvtsi2sd	%rax, %xmm0
    00000be1: 	divsd	DATAat0x32600(%rip), %xmm0
    00000be9: 	callq	_Z13record_resultdPKc # Offset: 3049
    00000bee: 	movq	0x90(%rsp), %rdi
    00000bf6: 	cmpq	(%rsp), %rdi
    00000bfa: 	je	.Ltmp2385 # Offset: 3066
    00000bfc: 	movq	0xa0(%rsp), %rax
    00000c04: 	leaq	0x1(%rax), %rsi
    00000c08: 	callq	_ZdlPvm@PLT # Offset: 3080
.Ltmp2385:
    00000c0d: 	movq	0x8(%rsp), %rsi
    00000c12: 	leaq	DATAat0x32424(%rip), %rdx
    00000c19: 	movq	%r13, %rdi
    00000c1c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3100
    00000c21: 	callq	clock@PLT # Offset: 3105
    00000c26: 	movl	iterations(%rip), %ecx
    00000c2c: 	xorl	%ebx, %ebx
    00000c2e: 	leaq	DATAat0x321c8(%rip), %r14
    00000c35: 	movq	%rax, start_time(%rip)
    00000c3c: 	testl	%ecx, %ecx
    00000c3e: 	jle	.Ltmp2386 # Offset: 3134
    00000c44: 	nopl	(%rax) # Size: 4
.Ltmp2389:
    00000c48: 	pxor	%xmm1, %xmm1
    00000c4c: 	pxor	%xmm7, %xmm7
    00000c50: 	pxor	%xmm6, %xmm6
    00000c54: 	xorl	%eax, %eax
    00000c56: 	pxor	%xmm5, %xmm5
    00000c5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2387:
    00000c60: 	movdqa	(%rbp,%rax), %xmm0
    00000c66: 	movdqa	(%r12,%rax), %xmm3
    00000c6c: 	movdqa	%xmm5, %xmm8
    00000c71: 	addq	$0x10, %rax
    00000c75: 	movdqa	%xmm3, %xmm4
    00000c79: 	movdqa	%xmm0, %xmm2
    00000c7d: 	punpckhbw	%xmm7, %xmm3
    00000c81: 	punpcklbw	%xmm7, %xmm4
    00000c85: 	punpcklbw	%xmm7, %xmm2
    00000c89: 	punpckhbw	%xmm7, %xmm0
    00000c8d: 	pmullw	%xmm4, %xmm2
    00000c91: 	pmullw	%xmm3, %xmm0
    00000c95: 	movdqa	%xmm2, %xmm3
    00000c99: 	punpckhwd	%xmm6, %xmm2
    00000c9d: 	movdqa	%xmm0, %xmm4
    00000ca1: 	punpcklwd	%xmm6, %xmm3
    00000ca5: 	punpcklwd	%xmm6, %xmm4
    00000ca9: 	punpckhwd	%xmm6, %xmm0
    00000cad: 	pcmpgtd	%xmm3, %xmm8
    00000cb2: 	movdqa	%xmm3, %xmm9
    00000cb7: 	punpckhdq	%xmm8, %xmm9
    00000cbc: 	punpckldq	%xmm8, %xmm3
    00000cc1: 	movdqa	%xmm5, %xmm8
    00000cc6: 	pcmpgtd	%xmm2, %xmm8
    00000ccb: 	paddq	%xmm9, %xmm3
    00000cd0: 	movdqa	%xmm2, %xmm9
    00000cd5: 	punpckhdq	%xmm8, %xmm9
    00000cda: 	punpckldq	%xmm8, %xmm2
    00000cdf: 	movdqa	%xmm4, %xmm8
    00000ce4: 	paddq	%xmm9, %xmm2
    00000ce9: 	paddq	%xmm2, %xmm3
    00000ced: 	movdqa	%xmm5, %xmm2
    00000cf1: 	pcmpgtd	%xmm4, %xmm2
    00000cf5: 	punpckhdq	%xmm2, %xmm8
    00000cfa: 	punpckldq	%xmm2, %xmm4
    00000cfe: 	movdqa	%xmm5, %xmm2
    00000d02: 	pcmpgtd	%xmm0, %xmm2
    00000d06: 	paddq	%xmm8, %xmm4
    00000d0b: 	movdqa	%xmm0, %xmm8
    00000d10: 	punpckldq	%xmm2, %xmm8
    00000d15: 	punpckhdq	%xmm2, %xmm0
    00000d19: 	paddq	%xmm8, %xmm4
    00000d1e: 	paddq	%xmm0, %xmm1
    00000d22: 	paddq	%xmm4, %xmm3
    00000d26: 	paddq	%xmm3, %xmm1
    00000d2a: 	cmpq	$0x1f40, %rax
    00000d30: 	jne	.Ltmp2387 # Offset: 3376
    00000d36: 	movl	init_value(%rip), %eax
    00000d3c: 	movdqa	%xmm1, %xmm0
    00000d40: 	psrldq	$0x8, %xmm0
    00000d45: 	imull	%eax, %eax
    00000d48: 	paddq	%xmm0, %xmm1
    00000d4c: 	movq	%xmm1, %rdx
    00000d51: 	shll	$0x6, %eax
    00000d54: 	cmpb	%dl, %al
    00000d56: 	jne	.Ltmp2388 # Offset: 3414
.Ltmp2469:
    00000d5c: 	addl	$0x1, %ebx
    00000d5f: 	cmpl	%ecx, %ebx
    00000d61: 	jl	.Ltmp2389 # Offset: 3425
.Ltmp2386:
    00000d67: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000d6e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000d75: 	subq	$0x20, %rax
    00000d79: 	cmpq	%rax, %rbx
    00000d7c: 	je	.Ltmp2390 # Offset: 3452
    00000d82: 	leaq	0x10(%rbx), %rdi
    00000d86: 	movq	0x98(%rsp), %r14
    00000d8e: 	movq	%rdi, (%rbx)
    00000d91: 	movq	0x90(%rsp), %rax
    00000d99: 	movq	%rax, %rsi
    00000d9c: 	movq	%rax, 0x28(%rsp)
    00000da1: 	addq	%r14, %rsi
    00000da4: 	je	.Ltmp2391 # Offset: 3492
    00000da6: 	testq	%rax, %rax
    00000da9: 	je	.Ltmp2392 # Offset: 3497
.Ltmp2391:
    00000daf: 	movq	%r14, 0x30(%rsp)
    00000db4: 	cmpq	$0xf, %r14
    00000db8: 	ja	.Ltmp2393 # Offset: 3512
    00000dbe: 	cmpq	$0x1, %r14
    00000dc2: 	jne	.Ltmp2394 # Offset: 3522
    00000dc8: 	movq	0x28(%rsp), %rax
    00000dcd: 	movzbl	(%rax), %eax
    00000dd0: 	movb	%al, 0x10(%rbx)
.Ltmp2506:
    00000dd3: 	movq	%r14, 0x8(%rbx)
    00000dd7: 	movb	$0x0, (%rdi,%r14)
    00000ddc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000de3: 	addq	$0x20, %rax
    00000de7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2480:
    00000dee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000df5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dfc: 	je	.Ltmp2395 # Offset: 3580
.Ltmp2479:
    00000e02: 	movq	-0x20(%rax), %r14
    00000e06: 	callq	clock@PLT # Offset: 3590
    00000e0b: 	pxor	%xmm0, %xmm0
    00000e0f: 	movq	%rax, end_time(%rip)
    00000e16: 	movq	%r14, %rdi
    00000e19: 	subq	start_time(%rip), %rax
    00000e20: 	cvtsi2sd	%rax, %xmm0
    00000e25: 	divsd	DATAat0x32600(%rip), %xmm0
    00000e2d: 	callq	_Z13record_resultdPKc # Offset: 3629
    00000e32: 	movq	0x90(%rsp), %rdi
    00000e3a: 	cmpq	(%rsp), %rdi
    00000e3e: 	je	.Ltmp2396 # Offset: 3646
    00000e40: 	movq	0xa0(%rsp), %rax
    00000e48: 	leaq	0x1(%rax), %rsi
    00000e4c: 	callq	_ZdlPvm@PLT # Offset: 3660
.Ltmp2396:
    00000e51: 	movq	0x8(%rsp), %rsi
    00000e56: 	leaq	DATAat0x32204(%rip), %rdx
    00000e5d: 	movq	%r15, %rdi
    00000e60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3680
    00000e65: 	movq	0x58(%rsp), %rdx
    00000e6a: 	movq	0x50(%rsp), %rsi
    00000e6f: 	movq	%r15, %rdi
    00000e72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3698
    00000e77: 	movq	(%rsp), %rsi
    00000e7b: 	leaq	0x10(%rax), %rdx
    00000e7f: 	movq	%rsi, 0x90(%rsp)
    00000e87: 	movq	(%rax), %rcx
    00000e8a: 	cmpq	%rdx, %rcx
    00000e8d: 	je	.Ltmp2397 # Offset: 3725
    00000e93: 	movq	%rcx, 0x90(%rsp)
    00000e9b: 	movq	0x10(%rax), %rcx
    00000e9f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2477:
    00000ea7: 	movq	0x8(%rax), %rcx
    00000eab: 	movq	%r13, %r8
    00000eae: 	movq	%r12, %rsi
    00000eb1: 	movq	%rbp, %rdi
    00000eb4: 	movq	%rcx, 0x98(%rsp)
    00000ebc: 	leaq	_Z14inner_product2IPKhhET0_T_S3_m(%rip), %rcx
    00000ec3: 	movq	%rdx, (%rax)
    00000ec6: 	movl	$0x1f40, %edx
    00000ecb: 	movq	$0x0, 0x8(%rax)
    00000ed3: 	movb	$0x0, 0x10(%rax)
    00000ed7: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3799
    00000edc: 	movq	0x90(%rsp), %rdi
    00000ee4: 	cmpq	(%rsp), %rdi
    00000ee8: 	je	.Ltmp2398 # Offset: 3816
    00000eea: 	movq	0xa0(%rsp), %rax
    00000ef2: 	leaq	0x1(%rax), %rsi
    00000ef6: 	callq	_ZdlPvm@PLT # Offset: 3830
.Ltmp2398:
    00000efb: 	movq	0x70(%rsp), %rdi
    00000f00: 	cmpq	0x10(%rsp), %rdi
    00000f05: 	je	.Ltmp2399 # Offset: 3845
    00000f07: 	movq	0x80(%rsp), %rax
    00000f0f: 	leaq	0x1(%rax), %rsi
    00000f13: 	callq	_ZdlPvm@PLT # Offset: 3859
.Ltmp2399:
    00000f18: 	movq	0x8(%rsp), %rsi
    00000f1d: 	leaq	DATAat0x3250c(%rip), %rdx
    00000f24: 	movq	%r13, %rdi
    00000f27: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3879
    00000f2c: 	callq	clock@PLT # Offset: 3884
    00000f31: 	movl	iterations(%rip), %ecx
    00000f37: 	xorl	%ebx, %ebx
    00000f39: 	leaq	DATAat0x321c8(%rip), %r14
    00000f40: 	movq	%rax, start_time(%rip)
    00000f47: 	testl	%ecx, %ecx
    00000f49: 	jle	.Ltmp2400 # Offset: 3913
    00000f4f: 	nop # Size: 1
.Ltmp2403:
    00000f50: 	xorl	%eax, %eax
    00000f52: 	pxor	%xmm4, %xmm4
    00000f56: 	pxor	%xmm3, %xmm3
    00000f5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2401:
    00000f60: 	movdqa	(%rbp,%rax), %xmm0
    00000f66: 	movdqa	(%r12,%rax), %xmm2
    00000f6c: 	addq	$0x10, %rax
    00000f70: 	movdqa	%xmm2, %xmm5
    00000f74: 	movdqa	%xmm0, %xmm1
    00000f78: 	punpcklbw	%xmm3, %xmm2
    00000f7c: 	punpckhbw	%xmm3, %xmm5
    00000f80: 	punpckhbw	%xmm3, %xmm1
    00000f84: 	punpcklbw	%xmm3, %xmm0
    00000f88: 	pmullw	%xmm5, %xmm1
    00000f8c: 	pmullw	%xmm2, %xmm0
    00000f90: 	paddw	%xmm1, %xmm0
    00000f94: 	paddw	%xmm0, %xmm4
    00000f98: 	cmpq	$0x1f40, %rax
    00000f9e: 	jne	.Ltmp2401 # Offset: 3998
    00000fa0: 	movdqa	%xmm4, %xmm0
    00000fa4: 	movl	init_value(%rip), %eax
    00000faa: 	psrldq	$0x8, %xmm0
    00000faf: 	imull	%eax, %eax
    00000fb2: 	paddw	%xmm0, %xmm4
    00000fb6: 	movdqa	%xmm4, %xmm0
    00000fba: 	psrldq	$0x4, %xmm0
    00000fbf: 	paddw	%xmm0, %xmm4
    00000fc3: 	shll	$0x6, %eax
    00000fc6: 	movdqa	%xmm4, %xmm0
    00000fca: 	psrldq	$0x2, %xmm0
    00000fcf: 	paddw	%xmm0, %xmm4
    00000fd3: 	pextrw	$0x0, %xmm4, %edx
    00000fd8: 	cmpb	%dl, %al
    00000fda: 	jne	.Ltmp2402 # Offset: 4058
.Ltmp2468:
    00000fe0: 	addl	$0x1, %ebx
    00000fe3: 	cmpl	%ecx, %ebx
    00000fe5: 	jl	.Ltmp2403 # Offset: 4069
.Ltmp2400:
    00000feb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000ff2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000ff9: 	subq	$0x20, %rax
    00000ffd: 	cmpq	%rax, %rbx
    00001000: 	je	.Ltmp2404 # Offset: 4096
    00001006: 	leaq	0x10(%rbx), %rdi
    0000100a: 	movq	0x98(%rsp), %r14
    00001012: 	movq	%rdi, (%rbx)
    00001015: 	movq	0x90(%rsp), %rax
    0000101d: 	movq	%rax, %rsi
    00001020: 	movq	%rax, 0x28(%rsp)
    00001025: 	addq	%r14, %rsi
    00001028: 	je	.Ltmp2405 # Offset: 4136
    0000102a: 	testq	%rax, %rax
    0000102d: 	je	.Ltmp2406 # Offset: 4141
.Ltmp2405:
    00001033: 	movq	%r14, 0x30(%rsp)
    00001038: 	cmpq	$0xf, %r14
    0000103c: 	ja	.Ltmp2407 # Offset: 4156
    00001042: 	cmpq	$0x1, %r14
    00001046: 	jne	.Ltmp2408 # Offset: 4166
    0000104c: 	movq	0x28(%rsp), %rax
    00001051: 	movzbl	(%rax), %eax
    00001054: 	movb	%al, 0x10(%rbx)
.Ltmp2509:
    00001057: 	movq	%r14, 0x8(%rbx)
    0000105b: 	movb	$0x0, (%rdi,%r14)
    00001060: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001067: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000106e: 	addq	$0x20, %rax
    00001072: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001079: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001080: 	je	.Ltmp2409 # Offset: 4224
.Ltmp2470:
    00001086: 	movq	-0x20(%rax), %r14
    0000108a: 	callq	clock@PLT # Offset: 4234
    0000108f: 	pxor	%xmm0, %xmm0
    00001093: 	movq	%rax, end_time(%rip)
    0000109a: 	movq	%r14, %rdi
    0000109d: 	subq	start_time(%rip), %rax
    000010a4: 	cvtsi2sd	%rax, %xmm0
    000010a9: 	divsd	DATAat0x32600(%rip), %xmm0
    000010b1: 	callq	_Z13record_resultdPKc # Offset: 4273
    000010b6: 	movq	0x90(%rsp), %rdi
    000010be: 	cmpq	(%rsp), %rdi
    000010c2: 	je	.Ltmp2410 # Offset: 4290
    000010c4: 	movq	0xa0(%rsp), %rax
    000010cc: 	leaq	0x1(%rax), %rsi
    000010d0: 	callq	_ZdlPvm@PLT # Offset: 4304
.Ltmp2410:
    000010d5: 	movq	0x8(%rsp), %rsi
    000010da: 	leaq	DATAat0x32440(%rip), %rdx
    000010e1: 	movq	%r13, %rdi
    000010e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4324
    000010e9: 	callq	clock@PLT # Offset: 4329
    000010ee: 	movl	iterations(%rip), %ecx
    000010f4: 	xorl	%ebx, %ebx
    000010f6: 	leaq	DATAat0x321c8(%rip), %r14
    000010fd: 	movq	%rax, start_time(%rip)
    00001104: 	testl	%ecx, %ecx
    00001106: 	jle	.Ltmp2411 # Offset: 4358
    0000110c: 	nopl	(%rax) # Size: 4
.Ltmp2414:
    00001110: 	pxor	%xmm5, %xmm5
    00001114: 	pxor	%xmm4, %xmm4
    00001118: 	pxor	%xmm3, %xmm3
    0000111c: 	xorl	%eax, %eax
    0000111e: 	nop # Size: 2
.Ltmp2412:
    00001120: 	movdqa	(%rbp,%rax), %xmm0
    00001126: 	movdqa	(%r12,%rax), %xmm2
    0000112c: 	addq	$0x10, %rax
    00001130: 	movdqa	%xmm2, %xmm6
    00001134: 	movdqa	%xmm0, %xmm1
    00001138: 	punpckhbw	%xmm4, %xmm2
    0000113c: 	punpcklbw	%xmm4, %xmm6
    00001140: 	punpcklbw	%xmm4, %xmm1
    00001144: 	punpckhbw	%xmm4, %xmm0
    00001148: 	pmullw	%xmm6, %xmm1
    0000114c: 	pmullw	%xmm2, %xmm0
    00001150: 	movdqa	%xmm1, %xmm2
    00001154: 	punpcklwd	%xmm3, %xmm1
    00001158: 	punpckhwd	%xmm3, %xmm2
    0000115c: 	paddd	%xmm2, %xmm1
    00001160: 	movdqa	%xmm0, %xmm2
    00001164: 	punpcklwd	%xmm3, %xmm0
    00001168: 	punpckhwd	%xmm3, %xmm2
    0000116c: 	paddd	%xmm2, %xmm0
    00001170: 	paddd	%xmm0, %xmm1
    00001174: 	paddd	%xmm1, %xmm5
    00001178: 	cmpq	$0x1f40, %rax
    0000117e: 	jne	.Ltmp2412 # Offset: 4478
    00001180: 	movdqa	%xmm5, %xmm0
    00001184: 	movl	init_value(%rip), %eax
    0000118a: 	psrldq	$0x8, %xmm0
    0000118f: 	imull	%eax, %eax
    00001192: 	paddd	%xmm0, %xmm5
    00001196: 	movdqa	%xmm5, %xmm0
    0000119a: 	psrldq	$0x4, %xmm0
    0000119f: 	paddd	%xmm0, %xmm5
    000011a3: 	shll	$0x6, %eax
    000011a6: 	movd	%xmm5, %edx
    000011aa: 	movzbl	%al, %eax
    000011ad: 	movzbl	%dl, %edx
    000011b0: 	cmpl	%edx, %eax
    000011b2: 	jne	.Ltmp2413 # Offset: 4530
.Ltmp2467:
    000011b8: 	addl	$0x1, %ebx
    000011bb: 	cmpl	%ecx, %ebx
    000011bd: 	jl	.Ltmp2414 # Offset: 4541
.Ltmp2411:
    000011c3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000011ca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000011d1: 	subq	$0x20, %rax
    000011d5: 	cmpq	%rax, %rbx
    000011d8: 	je	.Ltmp2415 # Offset: 4568
    000011de: 	leaq	0x10(%rbx), %rdi
    000011e2: 	movq	0x98(%rsp), %r14
    000011ea: 	movq	%rdi, (%rbx)
    000011ed: 	movq	0x90(%rsp), %rax
    000011f5: 	movq	%rax, %rsi
    000011f8: 	movq	%rax, 0x28(%rsp)
    000011fd: 	addq	%r14, %rsi
    00001200: 	je	.Ltmp2416 # Offset: 4608
    00001202: 	testq	%rax, %rax
    00001205: 	je	.Ltmp2417 # Offset: 4613
.Ltmp2416:
    0000120b: 	movq	%r14, 0x30(%rsp)
    00001210: 	cmpq	$0xf, %r14
    00001214: 	ja	.Ltmp2418 # Offset: 4628
    0000121a: 	cmpq	$0x1, %r14
    0000121e: 	jne	.Ltmp2419 # Offset: 4638
    00001224: 	movq	0x28(%rsp), %rax
    00001229: 	movzbl	(%rax), %eax
    0000122c: 	movb	%al, 0x10(%rbx)
.Ltmp2497:
    0000122f: 	movq	%r14, 0x8(%rbx)
    00001233: 	movb	$0x0, (%rdi,%r14)
    00001238: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000123f: 	addq	$0x20, %rax
    00001243: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2485:
    0000124a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001251: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001258: 	je	.Ltmp2420 # Offset: 4696
.Ltmp2484:
    0000125e: 	movq	-0x20(%rax), %r14
    00001262: 	callq	clock@PLT # Offset: 4706
    00001267: 	pxor	%xmm0, %xmm0
    0000126b: 	movq	%rax, end_time(%rip)
    00001272: 	movq	%r14, %rdi
    00001275: 	subq	start_time(%rip), %rax
    0000127c: 	cvtsi2sd	%rax, %xmm0
    00001281: 	divsd	DATAat0x32600(%rip), %xmm0
    00001289: 	callq	_Z13record_resultdPKc # Offset: 4745
    0000128e: 	movq	0x90(%rsp), %rdi
    00001296: 	cmpq	(%rsp), %rdi
    0000129a: 	je	.Ltmp2421 # Offset: 4762
    0000129c: 	movq	0xa0(%rsp), %rax
    000012a4: 	leaq	0x1(%rax), %rsi
    000012a8: 	callq	_ZdlPvm@PLT # Offset: 4776
.Ltmp2421:
    000012ad: 	movq	0x8(%rsp), %rsi
    000012b2: 	leaq	DATAat0x3245c(%rip), %rdx
    000012b9: 	movq	%r13, %rdi
    000012bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4796
    000012c1: 	callq	clock@PLT # Offset: 4801
    000012c6: 	movl	iterations(%rip), %ecx
    000012cc: 	xorl	%ebx, %ebx
    000012ce: 	leaq	DATAat0x321c8(%rip), %r14
    000012d5: 	movq	%rax, start_time(%rip)
    000012dc: 	testl	%ecx, %ecx
    000012de: 	jle	.Ltmp2422 # Offset: 4830
    000012e4: 	nopl	(%rax) # Size: 4
.Ltmp2425:
    000012e8: 	pxor	%xmm1, %xmm1
    000012ec: 	pxor	%xmm7, %xmm7
    000012f0: 	pxor	%xmm6, %xmm6
    000012f4: 	xorl	%eax, %eax
    000012f6: 	pxor	%xmm5, %xmm5
    000012fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2423:
    00001300: 	movdqa	(%rbp,%rax), %xmm3
    00001306: 	movdqa	(%r12,%rax), %xmm0
    0000130c: 	movdqa	%xmm5, %xmm8
    00001311: 	addq	$0x10, %rax
    00001315: 	movdqa	%xmm3, %xmm4
    00001319: 	movdqa	%xmm0, %xmm2
    0000131d: 	punpckhbw	%xmm7, %xmm3
    00001321: 	punpcklbw	%xmm7, %xmm4
    00001325: 	punpcklbw	%xmm7, %xmm2
    00001329: 	punpckhbw	%xmm7, %xmm0
    0000132d: 	pmullw	%xmm4, %xmm2
    00001331: 	pmullw	%xmm3, %xmm0
    00001335: 	movdqa	%xmm2, %xmm3
    00001339: 	punpckhwd	%xmm6, %xmm2
    0000133d: 	movdqa	%xmm0, %xmm4
    00001341: 	punpcklwd	%xmm6, %xmm3
    00001345: 	punpcklwd	%xmm6, %xmm4
    00001349: 	punpckhwd	%xmm6, %xmm0
    0000134d: 	pcmpgtd	%xmm3, %xmm8
    00001352: 	movdqa	%xmm3, %xmm9
    00001357: 	punpckhdq	%xmm8, %xmm9
    0000135c: 	punpckldq	%xmm8, %xmm3
    00001361: 	movdqa	%xmm5, %xmm8
    00001366: 	pcmpgtd	%xmm2, %xmm8
    0000136b: 	paddq	%xmm9, %xmm3
    00001370: 	movdqa	%xmm2, %xmm9
    00001375: 	punpckhdq	%xmm8, %xmm9
    0000137a: 	punpckldq	%xmm8, %xmm2
    0000137f: 	movdqa	%xmm4, %xmm8
    00001384: 	paddq	%xmm9, %xmm2
    00001389: 	paddq	%xmm2, %xmm3
    0000138d: 	movdqa	%xmm5, %xmm2
    00001391: 	pcmpgtd	%xmm4, %xmm2
    00001395: 	punpckhdq	%xmm2, %xmm8
    0000139a: 	punpckldq	%xmm2, %xmm4
    0000139e: 	movdqa	%xmm5, %xmm2
    000013a2: 	pcmpgtd	%xmm0, %xmm2
    000013a6: 	paddq	%xmm8, %xmm4
    000013ab: 	movdqa	%xmm0, %xmm8
    000013b0: 	punpckldq	%xmm2, %xmm8
    000013b5: 	punpckhdq	%xmm2, %xmm0
    000013b9: 	paddq	%xmm8, %xmm4
    000013be: 	paddq	%xmm0, %xmm1
    000013c2: 	paddq	%xmm4, %xmm3
    000013c6: 	paddq	%xmm3, %xmm1
    000013ca: 	cmpq	$0x1f40, %rax
    000013d0: 	jne	.Ltmp2423 # Offset: 5072
    000013d6: 	movl	init_value(%rip), %eax
    000013dc: 	movdqa	%xmm1, %xmm0
    000013e0: 	psrldq	$0x8, %xmm0
    000013e5: 	imull	%eax, %eax
    000013e8: 	paddq	%xmm0, %xmm1
    000013ec: 	movq	%xmm1, %rdx
    000013f1: 	shll	$0x6, %eax
    000013f4: 	cmpb	%dl, %al
    000013f6: 	jne	.Ltmp2424 # Offset: 5110
.Ltmp2466:
    000013fc: 	addl	$0x1, %ebx
    000013ff: 	cmpl	%ecx, %ebx
    00001401: 	jl	.Ltmp2425 # Offset: 5121
.Ltmp2422:
    00001407: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000140e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001415: 	subq	$0x20, %rax
    00001419: 	cmpq	%rax, %rbx
    0000141c: 	je	.Ltmp2426 # Offset: 5148
    00001422: 	leaq	0x10(%rbx), %rdi
    00001426: 	movq	0x98(%rsp), %r14
    0000142e: 	movq	%rdi, (%rbx)
    00001431: 	movq	0x90(%rsp), %rax
    00001439: 	movq	%rax, %rsi
    0000143c: 	movq	%rax, 0x28(%rsp)
    00001441: 	addq	%r14, %rsi
    00001444: 	je	.Ltmp2427 # Offset: 5188
    00001446: 	testq	%rax, %rax
    00001449: 	je	.Ltmp2428 # Offset: 5193
.Ltmp2427:
    0000144f: 	movq	%r14, 0x30(%rsp)
    00001454: 	cmpq	$0xf, %r14
    00001458: 	ja	.Ltmp2429 # Offset: 5208
    0000145e: 	cmpq	$0x1, %r14
    00001462: 	jne	.Ltmp2430 # Offset: 5218
    00001468: 	movq	0x28(%rsp), %rax
    0000146d: 	movzbl	(%rax), %eax
    00001470: 	movb	%al, 0x10(%rbx)
.Ltmp2499:
    00001473: 	movq	%r14, 0x8(%rbx)
    00001477: 	movb	$0x0, (%rdi,%r14)
    0000147c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001483: 	addq	$0x20, %rax
    00001487: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2488:
    0000148e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001495: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000149c: 	je	.Ltmp2431 # Offset: 5276
.Ltmp2487:
    000014a2: 	movq	-0x20(%rax), %r14
    000014a6: 	callq	clock@PLT # Offset: 5286
    000014ab: 	pxor	%xmm0, %xmm0
    000014af: 	movq	%rax, end_time(%rip)
    000014b6: 	movq	%r14, %rdi
    000014b9: 	subq	start_time(%rip), %rax
    000014c0: 	cvtsi2sd	%rax, %xmm0
    000014c5: 	divsd	DATAat0x32600(%rip), %xmm0
    000014cd: 	callq	_Z13record_resultdPKc # Offset: 5325
    000014d2: 	movq	0x90(%rsp), %rdi
    000014da: 	cmpq	(%rsp), %rdi
    000014de: 	je	.Ltmp2432 # Offset: 5342
    000014e0: 	movq	0xa0(%rsp), %rax
    000014e8: 	leaq	0x1(%rax), %rsi
    000014ec: 	callq	_ZdlPvm@PLT # Offset: 5356
.Ltmp2432:
    000014f1: 	movq	0x8(%rsp), %rsi
    000014f6: 	leaq	DATAat0x32218(%rip), %rdx
    000014fd: 	movq	%r15, %rdi
    00001500: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5376
    00001505: 	movq	0x58(%rsp), %rdx
    0000150a: 	movq	0x50(%rsp), %rsi
    0000150f: 	movq	%r15, %rdi
    00001512: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5394
    00001517: 	movq	(%rsp), %rsi
    0000151b: 	leaq	0x10(%rax), %rdx
    0000151f: 	movq	%rsi, 0x90(%rsp)
    00001527: 	movq	(%rax), %rcx
    0000152a: 	cmpq	%rdx, %rcx
    0000152d: 	je	.Ltmp2433 # Offset: 5421
    00001533: 	movq	%rcx, 0x90(%rsp)
    0000153b: 	movq	0x10(%rax), %rcx
    0000153f: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2496:
    00001547: 	movq	0x8(%rax), %rcx
    0000154b: 	movq	%r13, %r8
    0000154e: 	movq	%r12, %rsi
    00001551: 	movq	%rbp, %rdi
    00001554: 	movq	%rcx, 0x98(%rsp)
    0000155c: 	leaq	_Z14inner_product3IPKhhET0_T_S3_m(%rip), %rcx
    00001563: 	movq	%rdx, (%rax)
    00001566: 	movl	$0x1f40, %edx
    0000156b: 	movq	$0x0, 0x8(%rax)
    00001573: 	movb	$0x0, 0x10(%rax)
    00001577: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5495
    0000157c: 	movq	0x90(%rsp), %rdi
    00001584: 	cmpq	(%rsp), %rdi
    00001588: 	je	.Ltmp2434 # Offset: 5512
    0000158a: 	movq	0xa0(%rsp), %rax
    00001592: 	leaq	0x1(%rax), %rsi
    00001596: 	callq	_ZdlPvm@PLT # Offset: 5526
.Ltmp2434:
    0000159b: 	movq	0x70(%rsp), %rdi
    000015a0: 	cmpq	0x10(%rsp), %rdi
    000015a5: 	je	.Ltmp2435 # Offset: 5541
    000015a7: 	movq	0x80(%rsp), %rax
    000015af: 	leaq	0x1(%rax), %rsi
    000015b3: 	callq	_ZdlPvm@PLT # Offset: 5555
.Ltmp2435:
    000015b8: 	movq	0x8(%rsp), %rsi
    000015bd: 	leaq	DATAat0x3222c(%rip), %rdx
    000015c4: 	movq	%r15, %rdi
    000015c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5575
    000015cc: 	movq	0x58(%rsp), %rdx
    000015d1: 	movq	0x50(%rsp), %rsi
    000015d6: 	movq	%r15, %rdi
    000015d9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5593
    000015de: 	movq	(%rsp), %rsi
    000015e2: 	leaq	0x10(%rax), %rdx
    000015e6: 	movq	%rsi, 0x90(%rsp)
    000015ee: 	movq	(%rax), %rcx
    000015f1: 	cmpq	%rdx, %rcx
    000015f4: 	je	.Ltmp2436 # Offset: 5620
    000015fa: 	movq	%rcx, 0x90(%rsp)
    00001602: 	movq	0x10(%rax), %rcx
    00001606: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2495:
    0000160e: 	movq	0x8(%rax), %rcx
    00001612: 	movq	%r13, %r8
    00001615: 	movq	%r12, %rsi
    00001618: 	movq	%rbp, %rdi
    0000161b: 	movq	%rcx, 0x98(%rsp)
    00001623: 	leaq	_Z14inner_product4IPKhhET0_T_S3_m(%rip), %rcx
    0000162a: 	movq	%rdx, (%rax)
    0000162d: 	movl	$0x1f40, %edx
    00001632: 	movq	$0x0, 0x8(%rax)
    0000163a: 	movb	$0x0, 0x10(%rax)
    0000163e: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5694
    00001643: 	movq	0x90(%rsp), %rdi
    0000164b: 	cmpq	(%rsp), %rdi
    0000164f: 	je	.Ltmp2437 # Offset: 5711
    00001651: 	movq	0xa0(%rsp), %rax
    00001659: 	leaq	0x1(%rax), %rsi
    0000165d: 	callq	_ZdlPvm@PLT # Offset: 5725
.Ltmp2437:
    00001662: 	movq	0x70(%rsp), %rdi
    00001667: 	cmpq	0x10(%rsp), %rdi
    0000166c: 	je	.Ltmp2438 # Offset: 5740
    0000166e: 	movq	0x80(%rsp), %rax
    00001676: 	leaq	0x1(%rax), %rsi
    0000167a: 	callq	_ZdlPvm@PLT # Offset: 5754
.Ltmp2438:
    0000167f: 	movq	0x8(%rsp), %rsi
    00001684: 	leaq	DATAat0x32240(%rip), %rdx
    0000168b: 	movq	%r15, %rdi
    0000168e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5774
    00001693: 	movq	0x58(%rsp), %rdx
    00001698: 	movq	0x50(%rsp), %rsi
    0000169d: 	movq	%r15, %rdi
    000016a0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5792
    000016a5: 	movq	(%rsp), %rsi
    000016a9: 	leaq	0x10(%rax), %rdx
    000016ad: 	movq	%rsi, 0x90(%rsp)
    000016b5: 	movq	(%rax), %rcx
    000016b8: 	cmpq	%rdx, %rcx
    000016bb: 	je	.Ltmp2439 # Offset: 5819
    000016c1: 	movq	%rcx, 0x90(%rsp)
    000016c9: 	movq	0x10(%rax), %rcx
    000016cd: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2494:
    000016d5: 	movq	0x8(%rax), %rcx
    000016d9: 	movq	%r13, %r8
    000016dc: 	movq	%r12, %rsi
    000016df: 	movq	%rbp, %rdi
    000016e2: 	movq	%rcx, 0x98(%rsp)
    000016ea: 	leaq	_Z14inner_product5IPKhhET0_T_S3_m(%rip), %rcx
    000016f1: 	movq	%rdx, (%rax)
    000016f4: 	movl	$0x1f40, %edx
    000016f9: 	movq	$0x0, 0x8(%rax)
    00001701: 	movb	$0x0, 0x10(%rax)
    00001705: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5893
    0000170a: 	movq	0x90(%rsp), %rdi
    00001712: 	cmpq	(%rsp), %rdi
    00001716: 	je	.Ltmp2440 # Offset: 5910
    00001718: 	movq	0xa0(%rsp), %rax
    00001720: 	leaq	0x1(%rax), %rsi
    00001724: 	callq	_ZdlPvm@PLT # Offset: 5924
.Ltmp2440:
    00001729: 	movq	0x70(%rsp), %rdi
    0000172e: 	cmpq	0x10(%rsp), %rdi
    00001733: 	je	.Ltmp2441 # Offset: 5939
    00001735: 	movq	0x80(%rsp), %rax
    0000173d: 	leaq	0x1(%rax), %rsi
    00001741: 	callq	_ZdlPvm@PLT # Offset: 5953
.Ltmp2441:
    00001746: 	movq	0x8(%rsp), %rsi
    0000174b: 	leaq	DATAat0x32254(%rip), %rdx
    00001752: 	movq	%r15, %rdi
    00001755: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5973
    0000175a: 	movq	0x58(%rsp), %rdx
    0000175f: 	movq	0x50(%rsp), %rsi
    00001764: 	movq	%r15, %rdi
    00001767: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5991
    0000176c: 	movq	(%rsp), %rsi
    00001770: 	leaq	0x10(%rax), %rdx
    00001774: 	movq	%rsi, 0x90(%rsp)
    0000177c: 	movq	(%rax), %rcx
    0000177f: 	cmpq	%rdx, %rcx
    00001782: 	je	.Ltmp2442 # Offset: 6018
    00001788: 	movq	%rcx, 0x90(%rsp)
    00001790: 	movq	0x10(%rax), %rcx
    00001794: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2493:
    0000179c: 	movq	0x8(%rax), %rcx
    000017a0: 	movq	%r13, %r8
    000017a3: 	movq	%r12, %rsi
    000017a6: 	movq	%rbp, %rdi
    000017a9: 	movq	%rcx, 0x98(%rsp)
    000017b1: 	leaq	_Z14inner_product6IPKhhET0_T_S3_m(%rip), %rcx
    000017b8: 	movq	%rdx, (%rax)
    000017bb: 	movl	$0x1f40, %edx
    000017c0: 	movq	$0x0, 0x8(%rax)
    000017c8: 	movb	$0x0, 0x10(%rax)
    000017cc: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6092
    000017d1: 	movq	0x90(%rsp), %rdi
    000017d9: 	cmpq	(%rsp), %rdi
    000017dd: 	je	.Ltmp2443 # Offset: 6109
    000017df: 	movq	0xa0(%rsp), %rax
    000017e7: 	leaq	0x1(%rax), %rsi
    000017eb: 	callq	_ZdlPvm@PLT # Offset: 6123
.Ltmp2443:
    000017f0: 	movq	0x70(%rsp), %rdi
    000017f5: 	cmpq	0x10(%rsp), %rdi
    000017fa: 	je	.Ltmp2444 # Offset: 6138
    000017fc: 	movq	0x80(%rsp), %rax
    00001804: 	leaq	0x1(%rax), %rsi
    00001808: 	callq	_ZdlPvm@PLT # Offset: 6152
.Ltmp2444:
    0000180d: 	movq	0x8(%rsp), %rsi
    00001812: 	leaq	DATAat0x32268(%rip), %rdx
    00001819: 	movq	%r15, %rdi
    0000181c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6172
    00001821: 	movq	0x58(%rsp), %rdx
    00001826: 	movq	0x50(%rsp), %rsi
    0000182b: 	movq	%r15, %rdi
    0000182e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6190
    00001833: 	movq	(%rsp), %rsi
    00001837: 	leaq	0x10(%rax), %rdx
    0000183b: 	movq	%rsi, 0x90(%rsp)
    00001843: 	movq	(%rax), %rcx
    00001846: 	cmpq	%rdx, %rcx
    00001849: 	je	.Ltmp2445 # Offset: 6217
    0000184f: 	movq	%rcx, 0x90(%rsp)
    00001857: 	movq	0x10(%rax), %rcx
    0000185b: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2492:
    00001863: 	movq	0x8(%rax), %rcx
    00001867: 	movq	%r13, %r8
    0000186a: 	movq	%r12, %rsi
    0000186d: 	movq	%rbp, %rdi
    00001870: 	movq	%rcx, 0x98(%rsp)
    00001878: 	leaq	_Z14inner_product7IPKhhET0_T_S3_m(%rip), %rcx
    0000187f: 	movq	%rdx, (%rax)
    00001882: 	movl	$0x1f40, %edx
    00001887: 	movq	$0x0, 0x8(%rax)
    0000188f: 	movb	$0x0, 0x10(%rax)
    00001893: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6291
    00001898: 	movq	0x90(%rsp), %rdi
    000018a0: 	cmpq	(%rsp), %rdi
    000018a4: 	je	.Ltmp2446 # Offset: 6308
    000018a6: 	movq	0xa0(%rsp), %rax
    000018ae: 	leaq	0x1(%rax), %rsi
    000018b2: 	callq	_ZdlPvm@PLT # Offset: 6322
.Ltmp2446:
    000018b7: 	movq	0x70(%rsp), %rdi
    000018bc: 	cmpq	0x10(%rsp), %rdi
    000018c1: 	je	.Ltmp2447 # Offset: 6337
    000018c3: 	movq	0x80(%rsp), %rax
    000018cb: 	leaq	0x1(%rax), %rsi
    000018cf: 	callq	_ZdlPvm@PLT # Offset: 6351
.Ltmp2447:
    000018d4: 	movq	0x8(%rsp), %rsi
    000018d9: 	leaq	DATAat0x3227c(%rip), %rdx
    000018e0: 	movq	%r15, %rdi
    000018e3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6371
    000018e8: 	movq	0x58(%rsp), %rdx
    000018ed: 	movq	0x50(%rsp), %rsi
    000018f2: 	movq	%r15, %rdi
    000018f5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6389
    000018fa: 	movq	(%rsp), %rsi
    000018fe: 	leaq	0x10(%rax), %rdx
    00001902: 	movq	%rsi, 0x90(%rsp)
    0000190a: 	movq	(%rax), %rcx
    0000190d: 	cmpq	%rdx, %rcx
    00001910: 	je	.Ltmp2448 # Offset: 6416
    00001916: 	movq	%rcx, 0x90(%rsp)
    0000191e: 	movq	0x10(%rax), %rcx
    00001922: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2491:
    0000192a: 	movq	0x8(%rax), %rcx
    0000192e: 	movq	%r13, %r8
    00001931: 	movq	%r12, %rsi
    00001934: 	movq	%rbp, %rdi
    00001937: 	movq	%rcx, 0x98(%rsp)
    0000193f: 	leaq	_Z14inner_product8IPKhhET0_T_S3_m(%rip), %rcx
    00001946: 	movq	%rdx, (%rax)
    00001949: 	movl	$0x1f40, %edx
    0000194e: 	movq	$0x0, 0x8(%rax)
    00001956: 	movb	$0x0, 0x10(%rax)
    0000195a: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6490
    0000195f: 	movq	0x90(%rsp), %rdi
    00001967: 	cmpq	(%rsp), %rdi
    0000196b: 	je	.Ltmp2449 # Offset: 6507
    0000196d: 	movq	0xa0(%rsp), %rax
    00001975: 	leaq	0x1(%rax), %rsi
    00001979: 	callq	_ZdlPvm@PLT # Offset: 6521
.Ltmp2449:
    0000197e: 	movq	0x70(%rsp), %rdi
    00001983: 	cmpq	0x10(%rsp), %rdi
    00001988: 	je	.Ltmp2450 # Offset: 6536
    0000198a: 	movq	0x80(%rsp), %rax
    00001992: 	leaq	0x1(%rax), %rsi
    00001996: 	callq	_ZdlPvm@PLT # Offset: 6550
.Ltmp2450:
    0000199b: 	movq	0x8(%rsp), %rsi
    000019a0: 	leaq	DATAat0x32290(%rip), %rdx
    000019a7: 	movq	%r15, %rdi
    000019aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6570
    000019af: 	movq	0x58(%rsp), %rdx
    000019b4: 	movq	0x50(%rsp), %rsi
    000019b9: 	movq	%r15, %rdi
    000019bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6588
    000019c1: 	movq	(%rsp), %rsi
    000019c5: 	leaq	0x10(%rax), %rdx
    000019c9: 	movq	%rsi, 0x90(%rsp)
    000019d1: 	movq	(%rax), %rcx
    000019d4: 	cmpq	%rdx, %rcx
    000019d7: 	je	.Ltmp2451 # Offset: 6615
    000019dd: 	movq	%rcx, 0x90(%rsp)
    000019e5: 	movq	0x10(%rax), %rcx
    000019e9: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2490:
    000019f1: 	movq	0x8(%rax), %rcx
    000019f5: 	movq	%r13, %r8
    000019f8: 	movq	%r12, %rsi
    000019fb: 	movq	%rbp, %rdi
    000019fe: 	movq	%rcx, 0x98(%rsp)
    00001a06: 	leaq	_Z14inner_product9IPKhhET0_T_S3_m(%rip), %rcx
    00001a0d: 	movq	%rdx, (%rax)
    00001a10: 	movl	$0x1f40, %edx
    00001a15: 	movq	$0x0, 0x8(%rax)
    00001a1d: 	movb	$0x0, 0x10(%rax)
    00001a21: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6689
    00001a26: 	movq	0x90(%rsp), %rdi
    00001a2e: 	cmpq	(%rsp), %rdi
    00001a32: 	je	.Ltmp2452 # Offset: 6706
    00001a34: 	movq	0xa0(%rsp), %rax
    00001a3c: 	leaq	0x1(%rax), %rsi
    00001a40: 	callq	_ZdlPvm@PLT # Offset: 6720
.Ltmp2452:
    00001a45: 	movq	0x70(%rsp), %rdi
    00001a4a: 	cmpq	0x10(%rsp), %rdi
    00001a4f: 	je	.Ltmp2453 # Offset: 6735
    00001a51: 	movq	0x80(%rsp), %rax
    00001a59: 	leaq	0x1(%rax), %rsi
    00001a5d: 	callq	_ZdlPvm@PLT # Offset: 6749
.Ltmp2453:
    00001a62: 	movq	0x8(%rsp), %rsi
    00001a67: 	leaq	DATAat0x322a4(%rip), %rdx
    00001a6e: 	movq	%r15, %rdi
    00001a71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6769
    00001a76: 	movq	0x58(%rsp), %rdx
    00001a7b: 	movq	0x50(%rsp), %rsi
    00001a80: 	movq	%r15, %rdi
    00001a83: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6787
    00001a88: 	movq	(%rsp), %rsi
    00001a8c: 	leaq	0x10(%rax), %rdx
    00001a90: 	movq	%rsi, 0x90(%rsp)
    00001a98: 	movq	(%rax), %rcx
    00001a9b: 	cmpq	%rdx, %rcx
    00001a9e: 	je	.Ltmp2454 # Offset: 6814
    00001aa4: 	movq	%rcx, 0x90(%rsp)
    00001aac: 	movq	0x10(%rax), %rcx
    00001ab0: 	movq	%rcx, 0xa0(%rsp)
.Ltmp2489:
    00001ab8: 	movq	0x8(%rax), %rcx
    00001abc: 	movq	%r13, %r8
    00001abf: 	movq	%r12, %rsi
    00001ac2: 	movq	%rbp, %rdi
    00001ac5: 	movq	%rcx, 0x98(%rsp)
    00001acd: 	leaq	_Z15inner_product10IPKhhET0_T_S3_m(%rip), %rcx
    00001ad4: 	movq	%rdx, (%rax)
    00001ad7: 	movl	$0x1f40, %edx
    00001adc: 	movq	$0x0, 0x8(%rax)
    00001ae4: 	movb	$0x0, 0x10(%rax)
    00001ae8: 	callq	_Z18test_inner_productIhPFhPKhS1_mEEvPKT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6888
    00001aed: 	movq	0x90(%rsp), %rdi
    00001af5: 	cmpq	(%rsp), %rdi
    00001af9: 	je	.Ltmp2455 # Offset: 6905
    00001afb: 	movq	0xa0(%rsp), %rax
    00001b03: 	leaq	0x1(%rax), %rsi
    00001b07: 	callq	_ZdlPvm@PLT # Offset: 6919
.Ltmp2455:
    00001b0c: 	movq	0x70(%rsp), %rdi
    00001b11: 	cmpq	0x10(%rsp), %rdi
    00001b16: 	je	.Ltmp2456 # Offset: 6934
    00001b18: 	movq	0x80(%rsp), %rax
    00001b20: 	leaq	0x1(%rax), %rsi
    00001b24: 	callq	_ZdlPvm@PLT # Offset: 6948
.Ltmp2456:
    00001b29: 	movq	0x8(%rsp), %rsi
    00001b2e: 	leaq	DATAat0x322b9(%rip), %rdx
    00001b35: 	movq	%r13, %rdi
    00001b38: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6968
    00001b3d: 	movl	iterations(%rip), %edx
    00001b43: 	xorl	%r8d, %r8d
    00001b46: 	xorl	%ecx, %ecx
    00001b48: 	movl	$0x1f40, %esi
    00001b4d: 	movq	0x90(%rsp), %rdi
    00001b55: 	callq	_Z9summarizePKciiii # Offset: 6997
    00001b5a: 	movq	0x90(%rsp), %rdi
    00001b62: 	cmpq	(%rsp), %rdi
    00001b66: 	je	.Ltmp2457 # Offset: 7014
    00001b68: 	movq	0xa0(%rsp), %rax
    00001b70: 	leaq	0x1(%rax), %rsi
    00001b74: 	callq	_ZdlPvm@PLT # Offset: 7028
.Ltmp2457:
    00001b79: 	movq	0x50(%rsp), %rdi
    00001b7e: 	cmpq	0x20(%rsp), %rdi
    00001b83: 	je	.Ltmp2458 # Offset: 7043
    00001b85: 	movq	0x60(%rsp), %rax
    00001b8a: 	leaq	0x1(%rax), %rsi
    00001b8e: 	callq	_ZdlPvm@PLT # Offset: 7054
.Ltmp2458:
    00001b93: 	movq	0x3f38(%rsp), %rax
    00001b9b: 	subq	%fs:0x28, %rax
    00001ba4: 	jne	.Ltmp2459 # Offset: 7076
    00001baa: 	addq	$0x3f48, %rsp
    00001bb1: 	popq	%rbx
    00001bb2: 	popq	%rbp
    00001bb3: 	popq	%r12
    00001bb5: 	popq	%r13
    00001bb7: 	popq	%r14
    00001bb9: 	popq	%r15
    00001bbb: 	retq # Offset: 7099
    00001bbc: 	nopl	(%rax) # Size: 4
.Ltmp2330:
    00001bc0: 	movq	0x90(%rsp), %rdx
    00001bc8: 	movq	%r14, %rsi
    00001bcb: 	movl	$0x1, %edi
    00001bd0: 	xorl	%eax, %eax
    00001bd2: 	callq	__printf_chk@PLT # Offset: 7122
    00001bd7: 	movl	iterations(%rip), %ecx
    00001bdd: 	jmp	.Ltmp2460 # Offset: 7133
.Ltmp2335:
    00001be2: 	movq	0x18(%rsp), %rsi
    00001be7: 	xorl	%edx, %edx
    00001be9: 	movq	%rbx, %rdi
    00001bec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7148
    00001bf1: 	movq	%rax, (%rbx)
    00001bf4: 	movq	%rax, %rdi
    00001bf7: 	movq	0x30(%rsp), %rax
    00001bfc: 	movq	%rax, 0x10(%rbx)
.Ltmp2503:
    00001c00: 	movq	0x28(%rsp), %rsi
    00001c05: 	movq	%r14, %rdx
    00001c08: 	callq	memcpy@PLT # Offset: 7176
    00001c0d: 	movq	0x30(%rsp), %r14
    00001c12: 	movq	(%rbx), %rdi
    00001c15: 	jmp	.Ltmp2461 # Offset: 7189
    00001c1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2341:
    00001c20: 	movq	0x90(%rsp), %rdx
    00001c28: 	movq	%r14, %rsi
    00001c2b: 	movl	$0x1, %edi
    00001c30: 	xorl	%eax, %eax
    00001c32: 	callq	__printf_chk@PLT # Offset: 7218
    00001c37: 	movl	iterations(%rip), %ecx
    00001c3d: 	jmp	.Ltmp2462 # Offset: 7229
    00001c42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2377:
    00001c48: 	movq	0x90(%rsp), %rdx
    00001c50: 	movq	%r14, %rsi
    00001c53: 	movl	$0x1, %edi
    00001c58: 	xorl	%eax, %eax
    00001c5a: 	callq	__printf_chk@PLT # Offset: 7258
    00001c5f: 	movl	iterations(%rip), %ecx
    00001c65: 	jmp	.Ltmp2463 # Offset: 7269
    00001c6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2366:
    00001c70: 	movq	0x90(%rsp), %rdx
    00001c78: 	movq	%r14, %rsi
    00001c7b: 	movl	$0x1, %edi
    00001c80: 	xorl	%eax, %eax
    00001c82: 	callq	__printf_chk@PLT # Offset: 7298
    00001c87: 	movl	iterations(%rip), %ecx
    00001c8d: 	jmp	.Ltmp2464 # Offset: 7309
    00001c92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2352:
    00001c98: 	movq	0x90(%rsp), %rdx
    00001ca0: 	movq	%r14, %rsi
    00001ca3: 	movl	$0x1, %edi
    00001ca8: 	xorl	%eax, %eax
    00001caa: 	callq	__printf_chk@PLT # Offset: 7338
    00001caf: 	movl	iterations(%rip), %ecx
    00001cb5: 	jmp	.Ltmp2465 # Offset: 7349
    00001cba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2424:
    00001cc0: 	movq	0x90(%rsp), %rdx
    00001cc8: 	movq	%r14, %rsi
    00001ccb: 	movl	$0x1, %edi
    00001cd0: 	xorl	%eax, %eax
    00001cd2: 	callq	__printf_chk@PLT # Offset: 7378
    00001cd7: 	movl	iterations(%rip), %ecx
    00001cdd: 	jmp	.Ltmp2466 # Offset: 7389
    00001ce2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2413:
    00001ce8: 	movq	0x90(%rsp), %rdx
    00001cf0: 	movq	%r14, %rsi
    00001cf3: 	movl	$0x1, %edi
    00001cf8: 	xorl	%eax, %eax
    00001cfa: 	callq	__printf_chk@PLT # Offset: 7418
    00001cff: 	movl	iterations(%rip), %ecx
    00001d05: 	jmp	.Ltmp2467 # Offset: 7429
    00001d0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2402:
    00001d10: 	movq	0x90(%rsp), %rdx
    00001d18: 	movq	%r14, %rsi
    00001d1b: 	movl	$0x1, %edi
    00001d20: 	xorl	%eax, %eax
    00001d22: 	callq	__printf_chk@PLT # Offset: 7458
    00001d27: 	movl	iterations(%rip), %ecx
    00001d2d: 	jmp	.Ltmp2468 # Offset: 7469
    00001d32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2388:
    00001d38: 	movq	0x90(%rsp), %rdx
    00001d40: 	movq	%r14, %rsi
    00001d43: 	movl	$0x1, %edi
    00001d48: 	xorl	%eax, %eax
    00001d4a: 	callq	__printf_chk@PLT # Offset: 7498
    00001d4f: 	movl	iterations(%rip), %ecx
    00001d55: 	jmp	.Ltmp2469 # Offset: 7509
.Ltmp2404:
    00001d5a: 	movq	%r13, %rsi
    00001d5d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001d64: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7524
    00001d69: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001d70: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001d77: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001d7e: 	jne	.Ltmp2470 # Offset: 7550
.Ltmp2409:
    00001d84: 	movq	-0x8(%rdx), %rax
    00001d88: 	addq	$0x200, %rax
    00001d8e: 	jmp	.Ltmp2470 # Offset: 7566
.Ltmp2361:
    00001d93: 	movdqu	0x10(%rax), %xmm7
    00001d98: 	movaps	%xmm7, 0xa0(%rsp)
    00001da0: 	jmp	.Ltmp2471 # Offset: 7584
.Ltmp2348:
    00001da5: 	movq	-0x8(%rdx), %rax
    00001da9: 	addq	$0x200, %rax
    00001daf: 	jmp	.Ltmp2472 # Offset: 7599
.Ltmp2359:
    00001db4: 	movq	-0x8(%rdx), %rax
    00001db8: 	addq	$0x200, %rax
    00001dbe: 	jmp	.Ltmp2473 # Offset: 7614
.Ltmp2354:
    00001dc3: 	movq	%r13, %rsi
    00001dc6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001dcd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7629
    00001dd2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001dd9: 	jmp	.Ltmp2474 # Offset: 7641
.Ltmp2332:
    00001dde: 	movq	%r13, %rsi
    00001de1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001de8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7656
    00001ded: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001df4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001dfb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e02: 	jne	.Ltmp2475 # Offset: 7682
.Ltmp2337:
    00001e08: 	movq	-0x8(%rdx), %rax
    00001e0c: 	addq	$0x200, %rax
    00001e12: 	jmp	.Ltmp2475 # Offset: 7698
.Ltmp2325:
    00001e17: 	movdqu	0x10(%rax), %xmm7
    00001e1c: 	movaps	%xmm7, 0xa0(%rsp)
    00001e24: 	jmp	.Ltmp2476 # Offset: 7716
.Ltmp2397:
    00001e29: 	movdqu	0x10(%rax), %xmm7
    00001e2e: 	movaps	%xmm7, 0xa0(%rsp)
    00001e36: 	jmp	.Ltmp2477 # Offset: 7734
.Ltmp2384:
    00001e3b: 	movq	-0x8(%rdx), %rax
    00001e3f: 	addq	$0x200, %rax
    00001e45: 	jmp	.Ltmp2478 # Offset: 7749
.Ltmp2395:
    00001e4a: 	movq	-0x8(%rdx), %rax
    00001e4e: 	addq	$0x200, %rax
    00001e54: 	jmp	.Ltmp2479 # Offset: 7764
.Ltmp2390:
    00001e59: 	movq	%r13, %rsi
    00001e5c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e63: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7779
    00001e68: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e6f: 	jmp	.Ltmp2480 # Offset: 7791
.Ltmp2343:
    00001e74: 	movq	%r13, %rsi
    00001e77: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e7e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7806
    00001e83: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e8a: 	jmp	.Ltmp2481 # Offset: 7818
.Ltmp2379:
    00001e8f: 	movq	%r13, %rsi
    00001e92: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e99: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7833
    00001e9e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ea5: 	jmp	.Ltmp2482 # Offset: 7845
.Ltmp2373:
    00001eaa: 	movq	-0x8(%rdx), %rax
    00001eae: 	addq	$0x200, %rax
    00001eb4: 	jmp	.Ltmp2483 # Offset: 7860
.Ltmp2420:
    00001eb9: 	movq	-0x8(%rdx), %rax
    00001ebd: 	addq	$0x200, %rax
    00001ec3: 	jmp	.Ltmp2484 # Offset: 7875
.Ltmp2415:
    00001ec8: 	movq	%r13, %rsi
    00001ecb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ed2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7890
    00001ed7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ede: 	jmp	.Ltmp2485 # Offset: 7902
.Ltmp2368:
    00001ee3: 	movq	%r13, %rsi
    00001ee6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001eed: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7917
    00001ef2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ef9: 	jmp	.Ltmp2486 # Offset: 7929
.Ltmp2431:
    00001efe: 	movq	-0x8(%rdx), %rax
    00001f02: 	addq	$0x200, %rax
    00001f08: 	jmp	.Ltmp2487 # Offset: 7944
.Ltmp2426:
    00001f0d: 	movq	%r13, %rsi
    00001f10: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f17: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7959
    00001f1c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001f23: 	jmp	.Ltmp2488 # Offset: 7971
.Ltmp2454:
    00001f28: 	movdqu	0x10(%rax), %xmm7
    00001f2d: 	movaps	%xmm7, 0xa0(%rsp)
    00001f35: 	jmp	.Ltmp2489 # Offset: 7989
.Ltmp2451:
    00001f3a: 	movdqu	0x10(%rax), %xmm7
    00001f3f: 	movaps	%xmm7, 0xa0(%rsp)
    00001f47: 	jmp	.Ltmp2490 # Offset: 8007
.Ltmp2448:
    00001f4c: 	movdqu	0x10(%rax), %xmm7
    00001f51: 	movaps	%xmm7, 0xa0(%rsp)
    00001f59: 	jmp	.Ltmp2491 # Offset: 8025
.Ltmp2445:
    00001f5e: 	movdqu	0x10(%rax), %xmm7
    00001f63: 	movaps	%xmm7, 0xa0(%rsp)
    00001f6b: 	jmp	.Ltmp2492 # Offset: 8043
.Ltmp2442:
    00001f70: 	movdqu	0x10(%rax), %xmm7
    00001f75: 	movaps	%xmm7, 0xa0(%rsp)
    00001f7d: 	jmp	.Ltmp2493 # Offset: 8061
.Ltmp2439:
    00001f82: 	movdqu	0x10(%rax), %xmm7
    00001f87: 	movaps	%xmm7, 0xa0(%rsp)
    00001f8f: 	jmp	.Ltmp2494 # Offset: 8079
.Ltmp2436:
    00001f94: 	movdqu	0x10(%rax), %xmm7
    00001f99: 	movaps	%xmm7, 0xa0(%rsp)
    00001fa1: 	jmp	.Ltmp2495 # Offset: 8097
.Ltmp2433:
    00001fa6: 	movdqu	0x10(%rax), %xmm7
    00001fab: 	movaps	%xmm7, 0xa0(%rsp)
    00001fb3: 	jmp	.Ltmp2496 # Offset: 8115
.Ltmp2419:
    00001fb8: 	testq	%r14, %r14
    00001fbb: 	je	.Ltmp2497 # Offset: 8123
    00001fc1: 	jmp	.Ltmp2498 # Offset: 8129
    00001fc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2430:
    00001fd0: 	testq	%r14, %r14
    00001fd3: 	je	.Ltmp2499 # Offset: 8147
    00001fd9: 	jmp	.Ltmp2500 # Offset: 8153
    00001fde: 	nop # Size: 2
.Ltmp2372:
    00001fe0: 	testq	%r14, %r14
    00001fe3: 	je	.Ltmp2501 # Offset: 8163
    00001fe9: 	jmp	.Ltmp2502 # Offset: 8169
    00001fee: 	nop # Size: 2
.Ltmp2336:
    00001ff0: 	testq	%r14, %r14
    00001ff3: 	je	.Ltmp2461 # Offset: 8179
    00001ff9: 	jmp	.Ltmp2503 # Offset: 8185
    00001ffe: 	nop # Size: 2
.Ltmp2383:
    00002000: 	testq	%r14, %r14
    00002003: 	je	.Ltmp2504 # Offset: 8195
    00002009: 	jmp	.Ltmp2505 # Offset: 8201
    0000200e: 	nop # Size: 2
.Ltmp2394:
    00002010: 	testq	%r14, %r14
    00002013: 	je	.Ltmp2506 # Offset: 8211
    00002019: 	jmp	.Ltmp2507 # Offset: 8217
    0000201e: 	nop # Size: 2
.Ltmp2347:
    00002020: 	testq	%r14, %r14
    00002023: 	je	.Ltmp2508 # Offset: 8227
.Ltmp2513:
    00002029: 	movq	0x28(%rsp), %rsi
    0000202e: 	movq	%r14, %rdx
    00002031: 	callq	memcpy@PLT # Offset: 8241
    00002036: 	movq	0x30(%rsp), %r14
    0000203b: 	movq	(%rbx), %rdi
    0000203e: 	jmp	.Ltmp2508 # Offset: 8254
.Ltmp2408:
    00002043: 	testq	%r14, %r14
    00002046: 	je	.Ltmp2509 # Offset: 8262
    0000204c: 	jmp	.Ltmp2510 # Offset: 8268
    00002051: 	nopl	(%rax) # Size: 7
.Ltmp2358:
    00002058: 	testq	%r14, %r14
    0000205b: 	je	.Ltmp2511 # Offset: 8283
.Ltmp2512:
    00002061: 	movq	0x28(%rsp), %rsi
    00002066: 	movq	%r14, %rdx
    00002069: 	callq	memcpy@PLT # Offset: 8297
    0000206e: 	movq	0x30(%rsp), %r14
    00002073: 	movq	(%rbx), %rdi
    00002076: 	jmp	.Ltmp2511 # Offset: 8310
.Ltmp2382:
    0000207b: 	movq	0x18(%rsp), %rsi
    00002080: 	xorl	%edx, %edx
    00002082: 	movq	%rbx, %rdi
    00002085: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8325
    0000208a: 	movq	%rax, (%rbx)
    0000208d: 	movq	%rax, %rdi
    00002090: 	movq	0x30(%rsp), %rax
    00002095: 	movq	%rax, 0x10(%rbx)
.Ltmp2505:
    00002099: 	movq	0x28(%rsp), %rsi
    0000209e: 	movq	%r14, %rdx
    000020a1: 	callq	memcpy@PLT # Offset: 8353
    000020a6: 	movq	0x30(%rsp), %r14
    000020ab: 	movq	(%rbx), %rdi
    000020ae: 	jmp	.Ltmp2504 # Offset: 8366
.Ltmp2357:
    000020b3: 	movq	0x18(%rsp), %rsi
    000020b8: 	xorl	%edx, %edx
    000020ba: 	movq	%rbx, %rdi
    000020bd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8381
    000020c2: 	movq	%rax, (%rbx)
    000020c5: 	movq	%rax, %rdi
    000020c8: 	movq	0x30(%rsp), %rax
    000020cd: 	movq	%rax, 0x10(%rbx)
    000020d1: 	jmp	.Ltmp2512 # Offset: 8401
.Ltmp2429:
    000020d3: 	movq	0x18(%rsp), %rsi
    000020d8: 	xorl	%edx, %edx
    000020da: 	movq	%rbx, %rdi
    000020dd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8413
    000020e2: 	movq	%rax, (%rbx)
    000020e5: 	movq	%rax, %rdi
    000020e8: 	movq	0x30(%rsp), %rax
    000020ed: 	movq	%rax, 0x10(%rbx)
.Ltmp2500:
    000020f1: 	movq	0x28(%rsp), %rsi
    000020f6: 	movq	%r14, %rdx
    000020f9: 	callq	memcpy@PLT # Offset: 8441
    000020fe: 	movq	0x30(%rsp), %r14
    00002103: 	movq	(%rbx), %rdi
    00002106: 	jmp	.Ltmp2499 # Offset: 8454
.Ltmp2393:
    0000210b: 	movq	0x18(%rsp), %rsi
    00002110: 	xorl	%edx, %edx
    00002112: 	movq	%rbx, %rdi
    00002115: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8469
    0000211a: 	movq	%rax, (%rbx)
    0000211d: 	movq	%rax, %rdi
    00002120: 	movq	0x30(%rsp), %rax
    00002125: 	movq	%rax, 0x10(%rbx)
.Ltmp2507:
    00002129: 	movq	0x28(%rsp), %rsi
    0000212e: 	movq	%r14, %rdx
    00002131: 	callq	memcpy@PLT # Offset: 8497
    00002136: 	movq	0x30(%rsp), %r14
    0000213b: 	movq	(%rbx), %rdi
    0000213e: 	jmp	.Ltmp2506 # Offset: 8510
.Ltmp2418:
    00002143: 	movq	0x18(%rsp), %rsi
    00002148: 	xorl	%edx, %edx
    0000214a: 	movq	%rbx, %rdi
    0000214d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8525
    00002152: 	movq	%rax, (%rbx)
    00002155: 	movq	%rax, %rdi
    00002158: 	movq	0x30(%rsp), %rax
    0000215d: 	movq	%rax, 0x10(%rbx)
.Ltmp2498:
    00002161: 	movq	0x28(%rsp), %rsi
    00002166: 	movq	%r14, %rdx
    00002169: 	callq	memcpy@PLT # Offset: 8553
    0000216e: 	movq	0x30(%rsp), %r14
    00002173: 	movq	(%rbx), %rdi
    00002176: 	jmp	.Ltmp2497 # Offset: 8566
.Ltmp2371:
    0000217b: 	movq	0x18(%rsp), %rsi
    00002180: 	xorl	%edx, %edx
    00002182: 	movq	%rbx, %rdi
    00002185: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8581
    0000218a: 	movq	%rax, (%rbx)
    0000218d: 	movq	%rax, %rdi
    00002190: 	movq	0x30(%rsp), %rax
    00002195: 	movq	%rax, 0x10(%rbx)
.Ltmp2502:
    00002199: 	movq	0x28(%rsp), %rsi
    0000219e: 	movq	%r14, %rdx
    000021a1: 	callq	memcpy@PLT # Offset: 8609
    000021a6: 	movq	0x30(%rsp), %r14
    000021ab: 	movq	(%rbx), %rdi
    000021ae: 	jmp	.Ltmp2501 # Offset: 8622
.Ltmp2346:
    000021b3: 	movq	0x18(%rsp), %rsi
    000021b8: 	xorl	%edx, %edx
    000021ba: 	movq	%rbx, %rdi
    000021bd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8637
    000021c2: 	movq	%rax, (%rbx)
    000021c5: 	movq	%rax, %rdi
    000021c8: 	movq	0x30(%rsp), %rax
    000021cd: 	movq	%rax, 0x10(%rbx)
    000021d1: 	jmp	.Ltmp2513 # Offset: 8657
.Ltmp2407:
    000021d6: 	movq	0x18(%rsp), %rsi
    000021db: 	xorl	%edx, %edx
    000021dd: 	movq	%rbx, %rdi
    000021e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8672
    000021e5: 	movq	%rax, (%rbx)
    000021e8: 	movq	%rax, %rdi
    000021eb: 	movq	0x30(%rsp), %rax
    000021f0: 	movq	%rax, 0x10(%rbx)
.Ltmp2510:
    000021f4: 	movq	0x28(%rsp), %rsi
    000021f9: 	movq	%r14, %rdx
    000021fc: 	callq	memcpy@PLT # Offset: 8700
    00002201: 	movq	0x30(%rsp), %r14
    00002206: 	movq	(%rbx), %rdi
    00002209: 	jmp	.Ltmp2509 # Offset: 8713
.Ltmp2345:
    0000220e: 	leaq	DATAat0x32158(%rip), %rdi
    00002215: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8725
.Ltmp2356:
    0000221a: 	leaq	DATAat0x32158(%rip), %rdi
    00002221: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8737
.Ltmp2370:
    00002226: 	leaq	DATAat0x32158(%rip), %rdi
    0000222d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8749
.Ltmp2381:
    00002232: 	leaq	DATAat0x32158(%rip), %rdi
    00002239: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8761
.Ltmp2392:
    0000223e: 	leaq	DATAat0x32158(%rip), %rdi
    00002245: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8773
.Ltmp2406:
    0000224a: 	leaq	DATAat0x32158(%rip), %rdi
    00002251: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8785
.Ltmp2417:
    00002256: 	leaq	DATAat0x32158(%rip), %rdi
    0000225d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8797
.Ltmp2428:
    00002262: 	leaq	DATAat0x32158(%rip), %rdi
    00002269: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8809
.Ltmp2459:
    0000226e: 	callq	__stack_chk_fail@PLT # Offset: 8814
.Ltmp2334:
    00002273: 	leaq	DATAat0x32158(%rip), %rdi
    0000227a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8826
    0000227f: 	endbr64
.Ltmp2518:
    00002283: 	movq	%rax, %rbp
    00002286: 	jmp	.Ltmp2514 # Offset: 8838
    0000228b: 	endbr64
.Ltmp2516:
    0000228f: 	movq	%rax, %rbp
    00002292: 	jmp	.Ltmp2515 # Offset: 8850
    00002294: 	endbr64
    00002298: 	jmp	.Ltmp2516 # Offset: 8856
    0000229a: 	endbr64
    0000229e: 	jmp	.Ltmp2516 # Offset: 8862
    000022a0: 	endbr64
.Ltmp2519:
    000022a4: 	movq	%rax, %rbp
    000022a7: 	jmp	.Ltmp2517 # Offset: 8871
    000022a9: 	endbr64
    000022ad: 	jmp	.Ltmp2516 # Offset: 8877
    000022af: 	endbr64
    000022b3: 	jmp	.Ltmp2518 # Offset: 8883
    000022b5: 	endbr64
    000022b9: 	jmp	.Ltmp2516 # Offset: 8889
    000022bb: 	endbr64
    000022bf: 	jmp	.Ltmp2518 # Offset: 8895
    000022c1: 	endbr64
    000022c5: 	jmp	.Ltmp2519 # Offset: 8901
    000022c7: 	endbr64
    000022cb: 	jmp	.Ltmp2519 # Offset: 8907
.Ltmp2515:
    000022cd: 	movq	0x90(%rsp), %rdi
    000022d5: 	cmpq	(%rsp), %rdi
    000022d9: 	je	.Ltmp2517 # Offset: 8921
    000022db: 	movq	0xa0(%rsp), %rax
    000022e3: 	leaq	0x1(%rax), %rsi
    000022e7: 	callq	_ZdlPvm@PLT # Offset: 8935
.Ltmp2517:
    000022ec: 	movq	0x70(%rsp), %rdi
    000022f1: 	cmpq	0x10(%rsp), %rdi
    000022f6: 	je	.Ltmp2520 # Offset: 8950
.Ltmp2524:
    000022f8: 	movq	0x80(%rsp), %rax
    00002300: 	leaq	0x1(%rax), %rsi
    00002304: 	callq	_ZdlPvm@PLT # Offset: 8964
.Ltmp2520:
    00002309: 	movq	0x50(%rsp), %rdi
    0000230e: 	cmpq	0x20(%rsp), %rdi
    00002313: 	je	.Ltmp2521 # Offset: 8979
    00002315: 	movq	0x60(%rsp), %rax
    0000231a: 	leaq	0x1(%rax), %rsi
    0000231e: 	callq	_ZdlPvm@PLT # Offset: 8990
.Ltmp2521:
    00002323: 	movq	%rbp, %rdi
    00002326: 	callq	_Unwind_Resume@PLT # Offset: 8998
    0000232b: 	endbr64
    0000232f: 	jmp	.Ltmp2516 # Offset: 9007
    00002334: 	endbr64
    00002338: 	jmp	.Ltmp2519 # Offset: 9016
    0000233d: 	endbr64
    00002341: 	jmp	.Ltmp2516 # Offset: 9025
    00002346: 	endbr64
    0000234a: 	jmp	.Ltmp2519 # Offset: 9034
    0000234f: 	endbr64
    00002353: 	jmp	.Ltmp2519 # Offset: 9043
    00002358: 	endbr64
    0000235c: 	jmp	.Ltmp2516 # Offset: 9052
    00002361: 	endbr64
    00002365: 	jmp	.Ltmp2519 # Offset: 9061
.Ltmp2514:
    0000236a: 	movq	0x90(%rsp), %rdi
    00002372: 	cmpq	(%rsp), %rdi
    00002376: 	je	.Ltmp2520 # Offset: 9078
    00002378: 	movq	0xa0(%rsp), %rax
    00002380: 	leaq	0x1(%rax), %rsi
    00002384: 	callq	_ZdlPvm@PLT # Offset: 9092
    00002389: 	jmp	.Ltmp2520 # Offset: 9097
    0000238e: 	endbr64
    00002392: 	jmp	.Ltmp2518 # Offset: 9106
    00002397: 	endbr64
    0000239b: 	movq	%rax, %rbp
    0000239e: 	jmp	.Ltmp2520 # Offset: 9118
    000023a3: 	endbr64
    000023a7: 	jmp	.Ltmp2518 # Offset: 9127
    000023ac: 	endbr64
    000023b0: 	jmp	.Ltmp2518 # Offset: 9136
    000023b5: 	endbr64
    000023b9: 	jmp	.Ltmp2518 # Offset: 9145
    000023be: 	endbr64
    000023c2: 	movq	%rax, %rbp
    000023c5: 	jmp	.Ltmp2522 # Offset: 9157
    000023c7: 	endbr64
    000023cb: 	movq	%rax, %rbp
    000023ce: 	jmp	.Ltmp2523 # Offset: 9166
.Ltmp2522:
    000023d0: 	movq	0x90(%rsp), %rdi
    000023d8: 	cmpq	(%rsp), %rdi
    000023dc: 	je	.Ltmp2523 # Offset: 9180
    000023de: 	movq	0xa0(%rsp), %rax
    000023e6: 	leaq	0x1(%rax), %rsi
    000023ea: 	callq	_ZdlPvm@PLT # Offset: 9194
.Ltmp2523:
    000023ef: 	movq	0x70(%rsp), %rdi
    000023f4: 	leaq	0x80(%rsp), %rax
    000023fc: 	cmpq	%rax, %rdi
    000023ff: 	jne	.Ltmp2524 # Offset: 9215
    00002405: 	jmp	.Ltmp2520 # Offset: 9221
    0000240a: 	endbr64
    0000240e: 	jmp	.Ltmp2518 # Offset: 9230
    00002413: 	endbr64
    00002417: 	jmp	.Ltmp2518 # Offset: 9239
    0000241c: 	endbr64
    00002420: 	jmp	.Ltmp2518 # Offset: 9248
    00002425: 	endbr64
    00002429: 	jmp	.Ltmp2519 # Offset: 9257
    0000242e: 	endbr64
    00002432: 	jmp	.Ltmp2519 # Offset: 9266
    00002437: 	endbr64
    0000243b: 	jmp	.Ltmp2516 # Offset: 9275
    00002440: 	endbr64
    00002444: 	jmp	.Ltmp2519 # Offset: 9284
    00002449: 	endbr64
    0000244d: 	jmp	.Ltmp2516 # Offset: 9293
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_fini" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x31734
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x31734
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 193 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2281 instructions were shortened
BOLT-INFO: removed 452 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 188 out of 219 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x204e00
