BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x4f028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x2000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x2000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x4efe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x2510
  Size        : 0xce
  MaxSize     : 0xd0
  Offset      : 0x2510
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x49180(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x49166(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIsiEvv # Offset: 100
    00000069: 	callq	_Z11TestOneTypeIilEvv # Offset: 105
    0000006e: 	callq	_Z11TestOneTypeIllEvv # Offset: 110
    00000073: 	callq	_Z11TestOneTypeIffEvv # Offset: 115
    00000078: 	callq	_Z11TestOneTypeIddEvv # Offset: 120
    0000007d: 	popq	%rbx
    0000007e: 	xorl	%eax, %eax
    00000080: 	popq	%rbp
    00000081: 	popq	%r12
    00000083: 	popq	%r13
    00000085: 	popq	%r14
    00000087: 	retq # Offset: 135
.Ltmp3:
    00000088: 	movq	0x8(%r14), %rdi
    0000008c: 	movl	$0xa, %edx
    00000091: 	xorl	%esi, %esi
    00000093: 	callq	strtol@PLT # Offset: 147
    00000098: 	movl	%eax, iterations(%rip)
    0000009e: 	cmpl	$0x2, %r13d
    000000a2: 	jle	.Ltmp4 # Offset: 162
    000000a4: 	movq	0x10(%r14), %rdi
    000000a8: 	xorl	%esi, %esi
    000000aa: 	callq	strtod@PLT # Offset: 170
    000000af: 	movsd	%xmm0, init_value(%rip)
    000000b7: 	jmp	.Ltmp4 # Offset: 183
.Ltmp1:
    000000b9: 	leaq	DATAat0x49166(%rip), %rsi
    000000c0: 	movl	$0x1, %edi
    000000c5: 	xorl	%eax, %eax
    000000c7: 	callq	__printf_chk@PLT # Offset: 199
    000000cc: 	jmp	.Ltmp4 # Offset: 204
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x26e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x26e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x4efd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x2710
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2710
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x4efe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2740
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2740
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x4eff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x2780
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2780
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x27c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x27c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x27d0
  Size        : 0x96a
  MaxSize     : 0x970
  Offset      : 0x27d0
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rsi, -0x38(%rsp)
    0000000f: 	leal	-0x1(%rdx), %esi
    00000012: 	movl	%ecx, -0x24(%rsp)
    00000016: 	movl	%r8d, -0x18(%rsp)
    0000001b: 	movl	%esi, -0x1c(%rsp)
    0000001f: 	cmpl	$0x1, %esi
    00000022: 	jle	.Ltmp9 # Offset: 34
    00000028: 	movl	%ecx, %esi
    0000002a: 	leal	-0x1(%rcx), %ebx
    0000002d: 	movl	$0x1, -0x28(%rsp)
    00000035: 	movq	%rdi, %rax
    00000038: 	subl	$0xa, %esi
    0000003b: 	movl	%ebx, -0x20(%rsp)
    0000003f: 	leal	(%r8,%r8), %ecx
    00000043: 	movl	%r8d, %r15d
    00000046: 	movl	%esi, %ebx
    00000048: 	movl	%esi, -0x14(%rsp)
    0000004c: 	andl	$-0x8, %esi
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	shrl	$0x3, %ebx
    00000055: 	movl	%esi, %edx
    00000057: 	leal	0x1(%rsi), %esi
    0000005a: 	movapd	DATAat0x49400(%rip), %xmm5
    00000062: 	movl	%ebx, -0x10(%rsp)
    00000066: 	leal	0x9(%rdx), %ebx
    00000069: 	pxor	%xmm6, %xmm6
    0000006d: 	movapd	DATAat0x49410(%rip), %xmm4
    00000075: 	movl	%esi, -0xc(%rsp)
    00000079: 	movsd	DATAat0x49410(%rip), %xmm7
    00000081: 	movl	%ecx, %r13d
    00000084: 	movsd	DATAat0x49400(%rip), %xmm8
    0000008d: 	movl	%ebx, -0x2c(%rsp)
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp16:
    00000098: 	addl	$0x1, -0x28(%rsp)
    0000009d: 	cmpl	$0x9, -0x24(%rsp)
    000000a2: 	movl	$0x1, %edx
    000000a7: 	jle	.Ltmp10 # Offset: 167
    000000ad: 	cmpl	$0x7, -0x14(%rsp)
    000000b2: 	jbe	.Ltmp11 # Offset: 178
    000000b8: 	movq	-0x38(%rsp), %rbx
    000000bd: 	movslq	%r15d, %rdx
    000000c0: 	xorl	%r9d, %r9d
    000000c3: 	movapd	%xmm5, %xmm10
    000000c8: 	leaq	0x8(,%rdx,8), %rcx
    000000d0: 	movslq	%r14d, %rdx
    000000d3: 	movapd	%xmm4, %xmm9
    000000d8: 	leaq	0x30(%rbx,%rcx), %r10
    000000dd: 	leaq	0x8(%rax,%rdx,8), %r8
    000000e2: 	movslq	%r13d, %rdx
    000000e5: 	leaq	0x38(%rax,%rcx), %r11
    000000ea: 	leaq	-0x8(%rax,%rcx), %rsi
    000000ef: 	addq	%rbx, %rcx
    000000f2: 	movl	-0x10(%rsp), %ebx
    000000f6: 	leaq	0x8(%rax,%rdx,8), %rdi
    000000fb: 	pxor	%xmm11, %xmm11
    00000100: 	xorl	%edx, %edx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp12:
    00000108: 	movupd	0x10(%rsi), %xmm1
    0000010d: 	movupd	0x20(%rsi), %xmm0
    00000112: 	addl	$0x1, %r9d
    00000116: 	addq	$0x40, %rsi
    0000011a: 	movupd	0x10(%r8,%rdx), %xmm2
    00000121: 	movupd	0x20(%rdi,%rdx), %xmm3
    00000127: 	addq	$0x40, %rcx
    0000012b: 	movupd	(%r8,%rdx), %xmm15
    00000131: 	movupd	(%rdi,%rdx), %xmm13
    00000137: 	addpd	%xmm1, %xmm2
    0000013b: 	movupd	-0x20(%rsi), %xmm1
    00000140: 	movupd	-0x40(%rcx), %xmm14
    00000146: 	addpd	%xmm1, %xmm2
    0000014a: 	movupd	0x10(%rdi,%rdx), %xmm1
    00000150: 	addpd	%xmm1, %xmm2
    00000154: 	movupd	-0x30(%rcx), %xmm1
    00000159: 	addpd	%xmm11, %xmm2
    0000015e: 	mulpd	%xmm5, %xmm2
    00000162: 	subpd	%xmm1, %xmm2
    00000166: 	mulpd	%xmm4, %xmm2
    0000016a: 	addpd	%xmm1, %xmm2
    0000016e: 	movupd	0x20(%r8,%rdx), %xmm1
    00000175: 	addpd	%xmm0, %xmm1
    00000179: 	movupd	-0x10(%rsi), %xmm0
    0000017e: 	addpd	%xmm0, %xmm1
    00000182: 	movupd	-0x20(%rcx), %xmm0
    00000187: 	addpd	%xmm3, %xmm1
    0000018b: 	movupd	-0x10(%rsi), %xmm3
    00000190: 	addpd	%xmm11, %xmm1
    00000195: 	mulpd	%xmm5, %xmm1
    00000199: 	subpd	%xmm0, %xmm1
    0000019d: 	mulpd	%xmm4, %xmm1
    000001a1: 	addpd	%xmm0, %xmm1
    000001a5: 	movupd	0x30(%r8,%rdx), %xmm0
    000001ac: 	addpd	%xmm3, %xmm0
    000001b0: 	movupd	(%r11,%rdx), %xmm3
    000001b6: 	addpd	%xmm3, %xmm0
    000001ba: 	movupd	0x30(%rdi,%rdx), %xmm3
    000001c0: 	addpd	%xmm3, %xmm0
    000001c4: 	movupd	-0x10(%rcx), %xmm3
    000001c9: 	addpd	%xmm11, %xmm0
    000001ce: 	mulpd	%xmm5, %xmm0
    000001d2: 	subpd	%xmm3, %xmm0
    000001d6: 	mulpd	%xmm4, %xmm0
    000001da: 	addpd	%xmm3, %xmm0
    000001de: 	movupd	-0x40(%rsi), %xmm3
    000001e3: 	addpd	%xmm15, %xmm3
    000001e8: 	movupd	-0x30(%rsi), %xmm15
    000001ee: 	movups	%xmm2, -0x30(%rcx)
    000001f2: 	movups	%xmm1, -0x20(%rcx)
    000001f6: 	addpd	%xmm15, %xmm3
    000001fb: 	addpd	%xmm13, %xmm3
    00000200: 	addpd	%xmm11, %xmm3
    00000205: 	mulpd	%xmm5, %xmm3
    00000209: 	subpd	%xmm14, %xmm3
    0000020e: 	mulpd	%xmm4, %xmm3
    00000212: 	addpd	%xmm14, %xmm3
    00000217: 	movups	%xmm3, -0x40(%rcx)
    0000021b: 	movups	%xmm0, (%r10,%rdx)
    00000220: 	addq	$0x40, %rdx
    00000224: 	cmpl	%ebx, %r9d
    00000227: 	jb	.Ltmp12 # Offset: 551
    0000022d: 	movl	-0xc(%rsp), %edx
.Ltmp17:
    00000231: 	movq	-0x38(%rsp), %rbx
    00000236: 	leal	0x6(%rdx), %edi
    00000239: 	leal	0x1(%rdx), %esi
    0000023c: 	pxor	%xmm11, %xmm11
    00000241: 	leal	(%r15,%rdx), %ecx
    00000245: 	movl	%edi, -0x30(%rsp)
    00000249: 	leal	0x7(%rdx), %edi
    0000024c: 	movslq	%ecx, %rcx
    0000024f: 	movl	%edi, -0x3c(%rsp)
    00000253: 	leal	-0x1(%rdx,%r15), %ebp
    00000258: 	leal	0x3(%rdx), %r11d
    0000025c: 	leaq	(%rbx,%rcx,8), %rcx
    00000260: 	leal	0x2(%rdx), %ebx
    00000263: 	movslq	%ebp, %rbp
    00000266: 	leal	(%r14,%rbx), %edi
    0000026a: 	leaq	(%rax,%rbp,8), %r12
    0000026e: 	addl	%r13d, %ebx
    00000271: 	movslq	%edi, %rdi
    00000274: 	leal	(%r14,%r11), %r8d
    00000278: 	leal	(%r15,%rsi), %ebp
    0000027c: 	movslq	%ebx, %rbx
    0000027f: 	movsd	(%rax,%rdi,8), %xmm2
    00000284: 	movslq	%r8d, %r8
    00000287: 	movslq	%ebp, %rbp
    0000028a: 	movsd	(%rax,%rbx,8), %xmm0
    0000028f: 	movupd	0x10(%r12), %xmm1
    00000296: 	leaq	(%rax,%rbp,8), %rbp
    0000029a: 	addl	%r13d, %r11d
    0000029d: 	leal	0x4(%rdx), %r10d
    000002a1: 	movupd	0x10(%rbp), %xmm3
    000002a6: 	movslq	%r11d, %r11
    000002a9: 	leal	(%r14,%r10), %ebx
    000002ad: 	leal	0x5(%rdx), %r9d
    000002b1: 	movhpd	(%rax,%r8,8), %xmm2
    000002b7: 	movhpd	(%rax,%r11,8), %xmm0
    000002bd: 	movslq	%ebx, %rbx
    000002c0: 	addl	%r13d, %r10d
    000002c3: 	addpd	%xmm1, %xmm2
    000002c7: 	movupd	0x10(%rcx), %xmm1
    000002cc: 	leal	(%r14,%r9), %r11d
    000002d0: 	movslq	%r10d, %r10
    000002d3: 	movslq	%r11d, %r11
    000002d6: 	addl	%r13d, %r9d
    000002d9: 	movupd	(%r12), %xmm12
    000002df: 	movslq	%r9d, %r9
    000002e2: 	addpd	%xmm3, %xmm2
    000002e6: 	movupd	0x20(%r12), %xmm3
    000002ed: 	addpd	%xmm0, %xmm2
    000002f1: 	movsd	(%rax,%r10,8), %xmm0
    000002f7: 	movhpd	(%rax,%r9,8), %xmm0
    000002fd: 	addpd	%xmm11, %xmm2
    00000302: 	mulpd	%xmm10, %xmm2
    00000307: 	subpd	%xmm1, %xmm2
    0000030b: 	mulpd	%xmm9, %xmm2
    00000310: 	addpd	%xmm1, %xmm2
    00000314: 	movsd	(%rax,%rbx,8), %xmm1
    00000319: 	movl	-0x3c(%rsp), %ebx
    0000031d: 	movhpd	(%rax,%r11,8), %xmm1
    00000323: 	movl	-0x30(%rsp), %r11d
    00000328: 	leal	(%r14,%rbx), %r9d
    0000032c: 	addl	%r13d, %ebx
    0000032f: 	addpd	%xmm3, %xmm1
    00000333: 	movupd	0x20(%rbp), %xmm3
    00000338: 	movslq	%r9d, %r9
    0000033b: 	movslq	%ebx, %rdi
    0000033e: 	leal	(%r14,%r11), %r10d
    00000342: 	addl	%r13d, %r11d
    00000345: 	movslq	%r10d, %r10
    00000348: 	movslq	%r11d, %r8
    0000034b: 	addpd	%xmm3, %xmm1
    0000034f: 	movupd	0x20(%rcx), %xmm3
    00000354: 	addpd	%xmm0, %xmm1
    00000358: 	movsd	(%rax,%r10,8), %xmm0
    0000035e: 	movhpd	(%rax,%r9,8), %xmm0
    00000364: 	addpd	%xmm11, %xmm1
    00000369: 	mulpd	%xmm10, %xmm1
    0000036e: 	subpd	%xmm3, %xmm1
    00000372: 	mulpd	%xmm9, %xmm1
    00000377: 	addpd	%xmm3, %xmm1
    0000037b: 	movupd	0x30(%r12), %xmm3
    00000382: 	addpd	%xmm3, %xmm0
    00000386: 	movupd	0x30(%rbp), %xmm3
    0000038b: 	addpd	%xmm3, %xmm0
    0000038f: 	movsd	(%rax,%r8,8), %xmm3
    00000395: 	leal	(%r14,%rdx), %r8d
    00000399: 	addl	%r13d, %edx
    0000039c: 	movslq	%r8d, %r8
    0000039f: 	movslq	%edx, %rdx
    000003a2: 	movhpd	(%rax,%rdi,8), %xmm3
    000003a7: 	leal	(%r14,%rsi), %edi
    000003ab: 	addl	%r13d, %esi
    000003ae: 	addpd	%xmm3, %xmm0
    000003b2: 	movupd	0x30(%rcx), %xmm3
    000003b7: 	movslq	%edi, %rdi
    000003ba: 	movslq	%esi, %rsi
    000003bd: 	addpd	%xmm11, %xmm0
    000003c2: 	mulpd	%xmm10, %xmm0
    000003c7: 	subpd	%xmm3, %xmm0
    000003cb: 	mulpd	%xmm9, %xmm0
    000003d0: 	addpd	%xmm3, %xmm0
    000003d4: 	movsd	(%rax,%r8,8), %xmm3
    000003da: 	movhpd	(%rax,%rdi,8), %xmm3
    000003df: 	addpd	%xmm12, %xmm3
    000003e4: 	movupd	(%rbp), %xmm12
    000003ea: 	addpd	%xmm12, %xmm3
    000003ef: 	movsd	(%rax,%rdx,8), %xmm12
    000003f5: 	movhpd	(%rax,%rsi,8), %xmm12
    000003fb: 	movupd	(%rcx), %xmm13
    00000400: 	movl	-0x2c(%rsp), %edx
    00000404: 	movups	%xmm2, 0x10(%rcx)
    00000408: 	addpd	%xmm12, %xmm3
    0000040d: 	movups	%xmm1, 0x20(%rcx)
    00000411: 	movups	%xmm0, 0x30(%rcx)
    00000415: 	addpd	%xmm11, %xmm3
    0000041a: 	mulpd	%xmm10, %xmm3
    0000041f: 	subpd	%xmm13, %xmm3
    00000424: 	mulpd	%xmm9, %xmm3
    00000429: 	addpd	%xmm13, %xmm3
    0000042e: 	movups	%xmm3, (%rcx)
.Ltmp10:
    00000431: 	cmpl	-0x20(%rsp), %edx
    00000435: 	jge	.Ltmp13 # Offset: 1077
    0000043b: 	movslq	%edx, %r8
    0000043e: 	movslq	%r15d, %r9
    00000441: 	movq	-0x38(%rsp), %rbx
    00000446: 	movslq	%r13d, %r10
    00000449: 	addq	%r8, %r9
    0000044c: 	movl	-0x24(%rsp), %esi
    00000450: 	movslq	%r14d, %rdi
    00000453: 	leaq	(,%r9,8), %r11
    0000045b: 	leaq	0x1(%r8,%rdi), %rdi
    00000460: 	leaq	(%rbx,%r11), %rcx
    00000464: 	leaq	0x1(%r8,%r10), %r8
    00000469: 	subq	%rax, %rbx
    0000046c: 	subl	%edx, %esi
    0000046e: 	shlq	$0x3, %rdi
    00000472: 	shlq	$0x3, %r8
    00000476: 	cmpq	$0x10, %rbx
    0000047a: 	seta	%r10b
    0000047e: 	cmpl	$0x2, %esi
    00000481: 	setne	%bl
    00000484: 	andl	%ebx, %r10d
    00000487: 	leaq	(%rax,%rdi), %rbx
    0000048b: 	cmpq	%rbx, %rcx
    0000048e: 	setne	%bl
    00000491: 	testb	%bl, %r10b
    00000494: 	je	.Ltmp14 # Offset: 1172
    0000049a: 	leaq	(%rax,%r8), %r10
    0000049e: 	cmpq	%r10, %rcx
    000004a1: 	je	.Ltmp14 # Offset: 1185
    000004a7: 	leaq	-0x8(%rax,%r11), %r10
    000004ac: 	leaq	-0x8(%rax,%rdi), %rdi
    000004b1: 	pxor	%xmm1, %xmm1
    000004b5: 	subl	$0x1, %esi
    000004b8: 	movupd	(%r10), %xmm2
    000004bd: 	movupd	(%rdi), %xmm0
    000004c1: 	leaq	0x8(%rax,%r11), %r11
    000004c6: 	movl	%esi, %r9d
    000004c9: 	leaq	-0x8(%rax,%r8), %r8
    000004ce: 	shrl	%r9d
    000004d1: 	addpd	%xmm2, %xmm0
    000004d5: 	movupd	(%r11), %xmm2
    000004da: 	addpd	%xmm2, %xmm0
    000004de: 	movupd	(%r8), %xmm2
    000004e3: 	addpd	%xmm2, %xmm0
    000004e7: 	movupd	(%rcx), %xmm2
    000004eb: 	addpd	%xmm1, %xmm0
    000004ef: 	mulpd	%xmm5, %xmm0
    000004f3: 	subpd	%xmm2, %xmm0
    000004f7: 	mulpd	%xmm4, %xmm0
    000004fb: 	addpd	%xmm2, %xmm0
    000004ff: 	movups	%xmm0, (%rcx)
    00000502: 	cmpl	$0x1, %r9d
    00000506: 	je	.Ltmp15 # Offset: 1286
    0000050c: 	movupd	0x10(%r10), %xmm2
    00000512: 	movupd	0x10(%rdi), %xmm0
    00000517: 	addpd	%xmm2, %xmm0
    0000051b: 	movupd	0x10(%r11), %xmm2
    00000521: 	addpd	%xmm2, %xmm0
    00000525: 	movupd	0x10(%r8), %xmm2
    0000052b: 	addpd	%xmm2, %xmm0
    0000052f: 	movupd	0x10(%rcx), %xmm2
    00000534: 	addpd	%xmm1, %xmm0
    00000538: 	mulpd	%xmm5, %xmm0
    0000053c: 	subpd	%xmm2, %xmm0
    00000540: 	mulpd	%xmm4, %xmm0
    00000544: 	addpd	%xmm2, %xmm0
    00000548: 	movups	%xmm0, 0x10(%rcx)
    0000054c: 	cmpl	$0x2, %r9d
    00000550: 	je	.Ltmp15 # Offset: 1360
    00000556: 	movupd	0x20(%r10), %xmm2
    0000055c: 	movupd	0x20(%rdi), %xmm0
    00000561: 	addpd	%xmm2, %xmm0
    00000565: 	movupd	0x20(%r11), %xmm2
    0000056b: 	addpd	%xmm2, %xmm0
    0000056f: 	movupd	0x20(%r8), %xmm2
    00000575: 	addpd	%xmm2, %xmm0
    00000579: 	movupd	0x20(%rcx), %xmm2
    0000057e: 	addpd	%xmm1, %xmm0
    00000582: 	mulpd	%xmm5, %xmm0
    00000586: 	subpd	%xmm2, %xmm0
    0000058a: 	mulpd	%xmm4, %xmm0
    0000058e: 	addpd	%xmm2, %xmm0
    00000592: 	movups	%xmm0, 0x20(%rcx)
    00000596: 	cmpl	$0x3, %r9d
    0000059a: 	je	.Ltmp15 # Offset: 1434
    0000059c: 	movupd	0x30(%rdi), %xmm2
    000005a1: 	movupd	0x30(%r10), %xmm0
    000005a7: 	addpd	%xmm2, %xmm0
    000005ab: 	movupd	0x30(%r11), %xmm2
    000005b1: 	addpd	%xmm2, %xmm0
    000005b5: 	movupd	0x30(%r8), %xmm2
    000005bb: 	addpd	%xmm2, %xmm0
    000005bf: 	movupd	0x30(%rcx), %xmm2
    000005c4: 	addpd	%xmm1, %xmm0
    000005c8: 	mulpd	%xmm5, %xmm0
    000005cc: 	subpd	%xmm2, %xmm0
    000005d0: 	mulpd	%xmm4, %xmm0
    000005d4: 	addpd	%xmm2, %xmm0
    000005d8: 	movups	%xmm0, 0x30(%rcx)
.Ltmp15:
    000005dc: 	movl	%esi, %ecx
    000005de: 	andl	$-0x2, %ecx
    000005e1: 	addl	%ecx, %edx
    000005e3: 	cmpl	%esi, %ecx
    000005e5: 	je	.Ltmp13 # Offset: 1509
    000005e7: 	leal	(%r15,%rdx), %ecx
    000005eb: 	movq	-0x38(%rsp), %rbx
    000005f0: 	movslq	%ecx, %rcx
    000005f3: 	leaq	(%rbx,%rcx,8), %rsi
    000005f7: 	leal	(%r14,%rdx), %ecx
    000005fb: 	movslq	%ecx, %rcx
    000005fe: 	movsd	(%rsi), %xmm1
    00000602: 	movsd	(%rax,%rcx,8), %xmm0
    00000607: 	leal	-0x1(%r15,%rdx), %ecx
    0000060c: 	movslq	%ecx, %rcx
    0000060f: 	addsd	(%rax,%rcx,8), %xmm0
    00000614: 	leal	0x1(%r15,%rdx), %ecx
    00000619: 	addl	%r13d, %edx
    0000061c: 	movslq	%ecx, %rcx
    0000061f: 	movslq	%edx, %rdx
    00000622: 	addsd	(%rax,%rcx,8), %xmm0
    00000627: 	addsd	(%rax,%rdx,8), %xmm0
    0000062c: 	addsd	%xmm6, %xmm0
    00000630: 	mulsd	DATAat0x49400(%rip), %xmm0
    00000638: 	subsd	%xmm1, %xmm0
    0000063c: 	mulsd	DATAat0x49410(%rip), %xmm0
    00000644: 	addsd	%xmm1, %xmm0
    00000648: 	movsd	%xmm0, (%rsi)
.Ltmp13:
    0000064c: 	movl	-0x18(%rsp), %ebx
    00000650: 	movl	-0x28(%rsp), %esi
    00000654: 	addl	%ebx, %r14d
    00000657: 	addl	%ebx, %r15d
    0000065a: 	addl	%ebx, %r13d
    0000065d: 	cmpl	%esi, -0x1c(%rsp)
    00000661: 	jne	.Ltmp16 # Offset: 1633
.Ltmp9:
    00000667: 	popq	%rbx
    00000668: 	popq	%rbp
    00000669: 	popq	%r12
    0000066b: 	popq	%r13
    0000066d: 	popq	%r14
    0000066f: 	popq	%r15
    00000671: 	retq # Offset: 1649
    00000672: 	nopw	(%rax,%rax) # Size: 6
.Ltmp14:
    00000678: 	leal	-0x1(%rdx,%r15), %esi
    0000067d: 	movsd	-0x8(%rax,%rdi), %xmm0
    00000683: 	movsd	(%rcx), %xmm1
    00000687: 	movslq	%esi, %rsi
    0000068a: 	movl	-0x20(%rsp), %ebx
    0000068e: 	addsd	(%rax,%rsi,8), %xmm0
    00000693: 	leal	0x1(%rdx), %esi
    00000696: 	leal	(%rsi,%r15), %r10d
    0000069a: 	movslq	%r10d, %r10
    0000069d: 	shlq	$0x3, %r10
    000006a1: 	leaq	(%rax,%r10), %rdi
    000006a5: 	addsd	(%rdi), %xmm0
    000006a9: 	addsd	-0x8(%rax,%r8), %xmm0
    000006b0: 	addsd	%xmm6, %xmm0
    000006b4: 	mulsd	%xmm8, %xmm0
    000006b9: 	subsd	%xmm1, %xmm0
    000006bd: 	mulsd	%xmm7, %xmm0
    000006c1: 	addsd	%xmm1, %xmm0
    000006c5: 	movsd	%xmm0, (%rcx)
    000006c9: 	cmpl	%ebx, %esi
    000006cb: 	jge	.Ltmp13 # Offset: 1739
    000006d1: 	leal	(%rsi,%r14), %r8d
    000006d5: 	movq	-0x38(%rsp), %r11
    000006da: 	addl	%r13d, %esi
    000006dd: 	movslq	%r8d, %r8
    000006e0: 	movslq	%esi, %rsi
    000006e3: 	movsd	(%rax,%r8,8), %xmm0
    000006e9: 	addsd	(%rax,%r9,8), %xmm0
    000006ef: 	leal	0x2(%rdx), %r9d
    000006f3: 	leal	(%r9,%r15), %r8d
    000006f7: 	leaq	(%r11,%r10), %rcx
    000006fb: 	movslq	%r8d, %r8
    000006fe: 	movsd	(%rcx), %xmm1
    00000702: 	shlq	$0x3, %r8
    00000706: 	leaq	(%rax,%r8), %r10
    0000070a: 	addsd	(%r10), %xmm0
    0000070f: 	addsd	(%rax,%rsi,8), %xmm0
    00000714: 	addsd	%xmm6, %xmm0
    00000718: 	mulsd	%xmm8, %xmm0
    0000071d: 	subsd	%xmm1, %xmm0
    00000721: 	mulsd	%xmm7, %xmm0
    00000725: 	addsd	%xmm1, %xmm0
    00000729: 	movsd	%xmm0, (%rcx)
    0000072d: 	cmpl	%ebx, %r9d
    00000730: 	jge	.Ltmp13 # Offset: 1840
    00000736: 	leal	(%r9,%r14), %ecx
    0000073a: 	leal	0x3(%rdx), %esi
    0000073d: 	addl	%r13d, %r9d
    00000740: 	addq	%r11, %r8
    00000743: 	movslq	%ecx, %rcx
    00000746: 	movslq	%r9d, %r9
    00000749: 	movsd	(%r8), %xmm1
    0000074e: 	movsd	(%rax,%rcx,8), %xmm0
    00000753: 	leal	(%rsi,%r15), %ecx
    00000757: 	addsd	(%rdi), %xmm0
    0000075b: 	movslq	%ecx, %rcx
    0000075e: 	shlq	$0x3, %rcx
    00000762: 	leaq	(%rax,%rcx), %rdi
    00000766: 	addsd	(%rdi), %xmm0
    0000076a: 	addsd	(%rax,%r9,8), %xmm0
    00000770: 	addsd	%xmm6, %xmm0
    00000774: 	mulsd	%xmm8, %xmm0
    00000779: 	subsd	%xmm1, %xmm0
    0000077d: 	mulsd	%xmm7, %xmm0
    00000781: 	addsd	%xmm1, %xmm0
    00000785: 	movsd	%xmm0, (%r8)
    0000078a: 	cmpl	%ebx, %esi
    0000078c: 	jge	.Ltmp13 # Offset: 1932
    00000792: 	leal	(%rsi,%r14), %r8d
    00000796: 	leal	0x4(%rdx), %r9d
    0000079a: 	addl	%r13d, %esi
    0000079d: 	addq	%r11, %rcx
    000007a0: 	movslq	%r8d, %r8
    000007a3: 	movslq	%esi, %rsi
    000007a6: 	movsd	(%rcx), %xmm1
    000007aa: 	movsd	(%rax,%r8,8), %xmm0
    000007b0: 	leal	(%r9,%r15), %r8d
    000007b4: 	addsd	(%r10), %xmm0
    000007b9: 	movslq	%r8d, %r8
    000007bc: 	shlq	$0x3, %r8
    000007c0: 	leaq	(%rax,%r8), %r10
    000007c4: 	addsd	(%r10), %xmm0
    000007c9: 	addsd	(%rax,%rsi,8), %xmm0
    000007ce: 	addsd	%xmm6, %xmm0
    000007d2: 	mulsd	%xmm8, %xmm0
    000007d7: 	subsd	%xmm1, %xmm0
    000007db: 	mulsd	%xmm7, %xmm0
    000007df: 	addsd	%xmm1, %xmm0
    000007e3: 	movsd	%xmm0, (%rcx)
    000007e7: 	cmpl	%ebx, %r9d
    000007ea: 	jge	.Ltmp13 # Offset: 2026
    000007f0: 	leal	(%r9,%r14), %ecx
    000007f4: 	leal	0x5(%rdx), %esi
    000007f7: 	addl	%r13d, %r9d
    000007fa: 	addq	%r11, %r8
    000007fd: 	movslq	%ecx, %rcx
    00000800: 	movslq	%r9d, %r9
    00000803: 	movsd	(%r8), %xmm1
    00000808: 	movsd	(%rax,%rcx,8), %xmm0
    0000080d: 	leal	(%rsi,%r15), %ecx
    00000811: 	addsd	(%rdi), %xmm0
    00000815: 	movslq	%ecx, %rcx
    00000818: 	shlq	$0x3, %rcx
    0000081c: 	leaq	(%rax,%rcx), %rdi
    00000820: 	addsd	(%rdi), %xmm0
    00000824: 	addsd	(%rax,%r9,8), %xmm0
    0000082a: 	addsd	%xmm6, %xmm0
    0000082e: 	mulsd	%xmm8, %xmm0
    00000833: 	subsd	%xmm1, %xmm0
    00000837: 	mulsd	%xmm7, %xmm0
    0000083b: 	addsd	%xmm1, %xmm0
    0000083f: 	movsd	%xmm0, (%r8)
    00000844: 	cmpl	%ebx, %esi
    00000846: 	jge	.Ltmp13 # Offset: 2118
    0000084c: 	leal	(%rsi,%r14), %r8d
    00000850: 	leal	0x6(%rdx), %r9d
    00000854: 	addl	%r13d, %esi
    00000857: 	addq	%r11, %rcx
    0000085a: 	movslq	%r8d, %r8
    0000085d: 	movslq	%esi, %rsi
    00000860: 	movsd	(%rcx), %xmm1
    00000864: 	movsd	(%rax,%r8,8), %xmm0
    0000086a: 	leal	(%r9,%r15), %r8d
    0000086e: 	addsd	(%r10), %xmm0
    00000873: 	movslq	%r8d, %r8
    00000876: 	shlq	$0x3, %r8
    0000087a: 	leaq	(%rax,%r8), %r10
    0000087e: 	addsd	(%r10), %xmm0
    00000883: 	addsd	(%rax,%rsi,8), %xmm0
    00000888: 	addsd	%xmm6, %xmm0
    0000088c: 	mulsd	%xmm8, %xmm0
    00000891: 	subsd	%xmm1, %xmm0
    00000895: 	mulsd	%xmm7, %xmm0
    00000899: 	addsd	%xmm1, %xmm0
    0000089d: 	movsd	%xmm0, (%rcx)
    000008a1: 	cmpl	%ebx, %r9d
    000008a4: 	jge	.Ltmp13 # Offset: 2212
    000008aa: 	leal	(%r9,%r14), %ecx
    000008ae: 	addq	%r11, %r8
    000008b1: 	movslq	%ecx, %rcx
    000008b4: 	movsd	(%r8), %xmm1
    000008b9: 	movsd	(%rax,%rcx,8), %xmm0
    000008be: 	leal	0x7(%rdx), %ecx
    000008c1: 	addsd	(%rdi), %xmm0
    000008c5: 	leal	(%r15,%rcx), %esi
    000008c9: 	movslq	%esi, %rsi
    000008cc: 	addsd	(%rax,%rsi,8), %xmm0
    000008d1: 	leaq	(,%rsi,8), %rdi
    000008d9: 	leal	(%r9,%r13), %esi
    000008dd: 	movslq	%esi, %rsi
    000008e0: 	addsd	(%rax,%rsi,8), %xmm0
    000008e5: 	addsd	%xmm6, %xmm0
    000008e9: 	mulsd	%xmm8, %xmm0
    000008ee: 	subsd	%xmm1, %xmm0
    000008f2: 	mulsd	%xmm7, %xmm0
    000008f6: 	addsd	%xmm1, %xmm0
    000008fa: 	movsd	%xmm0, (%r8)
    000008ff: 	cmpl	%ebx, %ecx
    00000901: 	jge	.Ltmp13 # Offset: 2305
    00000907: 	leal	(%r14,%rcx), %esi
    0000090b: 	leal	0x8(%rdx,%r15), %edx
    00000910: 	addq	%r11, %rdi
    00000913: 	movslq	%edx, %rdx
    00000916: 	movslq	%esi, %rsi
    00000919: 	movsd	(%rdi), %xmm1
    0000091d: 	movsd	(%rax,%rsi,8), %xmm0
    00000922: 	addsd	(%r10), %xmm0
    00000927: 	addsd	(%rax,%rdx,8), %xmm0
    0000092c: 	leal	(%rcx,%r13), %edx
    00000930: 	movslq	%edx, %rdx
    00000933: 	addsd	(%rax,%rdx,8), %xmm0
    00000938: 	addsd	%xmm6, %xmm0
    0000093c: 	mulsd	%xmm8, %xmm0
    00000941: 	subsd	%xmm1, %xmm0
    00000945: 	mulsd	%xmm7, %xmm0
    00000949: 	addsd	%xmm1, %xmm0
    0000094d: 	movsd	%xmm0, (%rdi)
    00000951: 	jmp	.Ltmp13 # Offset: 2385
.Ltmp11:
    00000956: 	movl	$0x1, %edx
    0000095b: 	movapd	%xmm5, %xmm10
    00000960: 	movapd	%xmm4, %xmm9
    00000965: 	jmp	.Ltmp17 # Offset: 2405
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/1
                _ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x3140
  Size        : 0x75e
  MaxSize     : 0x760
  Offset      : 0x3140
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %rax
    00000005: 	leal	-0x1(%rdx), %edi
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, -0x24(%rsp)
    00000014: 	movl	%r8d, -0x18(%rsp)
    00000019: 	movl	%edi, -0x1c(%rsp)
    0000001d: 	cmpl	$0x1, %edi
    00000020: 	jle	.Ltmp18 # Offset: 32
    00000026: 	movl	%ecx, %edi
    00000028: 	movq	%rsi, %rbx
    0000002b: 	movl	$0x1, -0x28(%rsp)
    00000033: 	leal	-0x1(%rcx), %ecx
    00000036: 	subl	$0xa, %edi
    00000039: 	movl	%ecx, -0x20(%rsp)
    0000003d: 	leal	(%r8,%r8), %r11d
    00000041: 	movl	%r8d, %ecx
    00000044: 	movl	%edi, %esi
    00000046: 	movl	%edi, -0x14(%rsp)
    0000004a: 	andl	$-0x8, %edi
    0000004d: 	xorl	%r10d, %r10d
    00000050: 	movl	%edi, %r14d
    00000053: 	shrl	$0x3, %esi
    00000056: 	leal	0x1(%rdi), %edi
    00000059: 	movsd	DATAat0x49400(%rip), %xmm6
    00000061: 	movl	%esi, -0x10(%rsp)
    00000065: 	movapd	DATAat0x49400(%rip), %xmm5
    0000006d: 	addl	$0x9, %r14d
    00000071: 	pxor	%xmm7, %xmm7
    00000075: 	movl	%edi, -0xc(%rsp)
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp25:
    00000080: 	addl	$0x1, -0x28(%rsp)
    00000085: 	cmpl	$0x9, -0x24(%rsp)
    0000008a: 	movl	$0x1, %edx
    0000008f: 	jle	.Ltmp19 # Offset: 143
    00000095: 	cmpl	$0x7, -0x14(%rsp)
    0000009a: 	jbe	.Ltmp20 # Offset: 154
    000000a0: 	movslq	%r10d, %rdx
    000000a3: 	movslq	%ecx, %rsi
    000000a6: 	movl	-0x10(%rsp), %r15d
    000000ab: 	xorl	%r9d, %r9d
    000000ae: 	shlq	$0x3, %rsi
    000000b2: 	leaq	0x8(%rax,%rdx,8), %r8
    000000b7: 	movslq	%r11d, %rdx
    000000ba: 	leaq	0x8(%rax,%rdx,8), %rdi
    000000bf: 	leaq	0x8(%rbx,%rsi), %rbp
    000000c4: 	movapd	%xmm5, %xmm2
    000000c8: 	xorl	%edx, %edx
    000000ca: 	leaq	0x40(%rax,%rsi), %r13
    000000cf: 	leaq	0x38(%rbx,%rsi), %r12
    000000d4: 	pxor	%xmm8, %xmm8
    000000d9: 	addq	%rax, %rsi
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp21:
    000000e0: 	movupd	0x10(%rsi), %xmm4
    000000e5: 	movupd	0x20(%rsi), %xmm1
    000000ea: 	addl	$0x1, %r9d
    000000ee: 	addq	$0x40, %rsi
    000000f2: 	movupd	0x10(%r8,%rdx), %xmm3
    000000f9: 	movupd	0x30(%r8,%rdx), %xmm0
    00000100: 	movupd	(%r8,%rdx), %xmm10
    00000106: 	movupd	-0x30(%rsi), %xmm11
    0000010c: 	addpd	%xmm4, %xmm3
    00000110: 	movupd	0x10(%rdi,%rdx), %xmm4
    00000116: 	movupd	(%rdi,%rdx), %xmm12
    0000011c: 	addpd	%xmm1, %xmm3
    00000120: 	movupd	0x20(%r8,%rdx), %xmm1
    00000127: 	addpd	%xmm4, %xmm3
    0000012b: 	movupd	-0x20(%rsi), %xmm4
    00000130: 	addpd	%xmm4, %xmm1
    00000134: 	movupd	-0x10(%rsi), %xmm4
    00000139: 	addpd	%xmm8, %xmm3
    0000013e: 	addpd	%xmm4, %xmm1
    00000142: 	movupd	0x20(%rdi,%rdx), %xmm4
    00000148: 	mulpd	%xmm5, %xmm3
    0000014c: 	addpd	%xmm4, %xmm1
    00000150: 	movupd	-0x10(%rsi), %xmm4
    00000155: 	addpd	%xmm4, %xmm0
    00000159: 	movupd	(%r13,%rdx), %xmm4
    00000160: 	addpd	%xmm8, %xmm1
    00000165: 	addpd	%xmm4, %xmm0
    00000169: 	movupd	0x30(%rdi,%rdx), %xmm4
    0000016f: 	mulpd	%xmm5, %xmm1
    00000173: 	addpd	%xmm4, %xmm0
    00000177: 	movupd	-0x40(%rsi), %xmm4
    0000017c: 	movups	%xmm3, 0x10(%rbp,%rdx)
    00000181: 	addpd	%xmm10, %xmm4
    00000186: 	addpd	%xmm8, %xmm0
    0000018b: 	movups	%xmm1, 0x20(%rbp,%rdx)
    00000190: 	addpd	%xmm11, %xmm4
    00000195: 	mulpd	%xmm5, %xmm0
    00000199: 	addpd	%xmm12, %xmm4
    0000019e: 	addpd	%xmm8, %xmm4
    000001a3: 	mulpd	%xmm5, %xmm4
    000001a7: 	movups	%xmm4, (%rbp,%rdx)
    000001ac: 	movups	%xmm0, (%r12,%rdx)
    000001b1: 	addq	$0x40, %rdx
    000001b5: 	cmpl	%r15d, %r9d
    000001b8: 	jb	.Ltmp21 # Offset: 440
    000001be: 	movl	-0xc(%rsp), %edx
.Ltmp26:
    000001c2: 	leal	0x1(%rdx), %ebp
    000001c5: 	leal	(%rcx,%rdx), %r8d
    000001c9: 	leal	(%r10,%rbp), %esi
    000001cd: 	leal	(%rcx,%rbp), %edi
    000001d0: 	movslq	%r8d, %r8
    000001d3: 	addl	%r11d, %ebp
    000001d6: 	movslq	%esi, %rsi
    000001d9: 	movslq	%edi, %rdi
    000001dc: 	movsd	(%rax,%r8,8), %xmm3
    000001e2: 	movslq	%ebp, %rbp
    000001e5: 	movsd	(%rax,%rdi,8), %xmm8
    000001eb: 	leaq	(%rax,%rsi,8), %r12
    000001ef: 	leal	0x2(%rcx,%rdx), %r9d
    000001f4: 	movupd	(%r12), %xmm1
    000001fa: 	movslq	%r9d, %r9
    000001fd: 	leaq	(%rax,%rbp,8), %rbp
    00000201: 	leal	0x7(%rdx), %esi
    00000204: 	unpcklpd	%xmm8, %xmm3
    00000209: 	leaq	(%rax,%r9,8), %r9
    0000020d: 	leal	0x3(%rcx,%rdx), %r13d
    00000212: 	movupd	0x10(%r12), %xmm0
    00000219: 	addpd	%xmm1, %xmm3
    0000021d: 	movupd	(%r9), %xmm4
    00000222: 	movupd	(%rbp), %xmm1
    00000227: 	movslq	%r13d, %r13
    0000022a: 	leal	0x4(%rcx,%rdx), %r15d
    0000022f: 	movupd	0x20(%r12), %xmm9
    00000236: 	movslq	%r15d, %r15
    00000239: 	addpd	%xmm4, %xmm3
    0000023d: 	pxor	%xmm4, %xmm4
    00000241: 	addpd	%xmm1, %xmm3
    00000245: 	movsd	(%r9), %xmm1
    0000024a: 	movhpd	(%rax,%r13,8), %xmm1
    00000250: 	leal	0x5(%rcx,%rdx), %r13d
    00000255: 	addpd	%xmm0, %xmm1
    00000259: 	movupd	0x10(%r9), %xmm0
    0000025f: 	movslq	%r13d, %r13
    00000262: 	addpd	%xmm4, %xmm3
    00000266: 	addpd	%xmm0, %xmm1
    0000026a: 	movupd	0x10(%rbp), %xmm0
    0000026f: 	mulpd	%xmm2, %xmm3
    00000273: 	addpd	%xmm0, %xmm1
    00000277: 	movsd	(%rax,%r15,8), %xmm0
    0000027d: 	movhpd	(%rax,%r13,8), %xmm0
    00000283: 	addpd	%xmm9, %xmm0
    00000288: 	movupd	0x20(%r9), %xmm9
    0000028e: 	addpd	%xmm4, %xmm1
    00000292: 	leal	(%r10,%rsi), %r9d
    00000296: 	movslq	%r9d, %r9
    00000299: 	addpd	%xmm9, %xmm0
    0000029e: 	movupd	0x20(%rbp), %xmm9
    000002a4: 	leal	0x6(%rcx,%rdx), %ebp
    000002a8: 	mulpd	%xmm2, %xmm1
    000002ac: 	movslq	%ebp, %rbp
    000002af: 	addpd	%xmm9, %xmm0
    000002b4: 	addpd	%xmm4, %xmm0
    000002b8: 	mulpd	%xmm2, %xmm0
    000002bc: 	movsd	(%rax,%rbp,8), %xmm2
    000002c1: 	addsd	(%rax,%r9,8), %xmm2
    000002c7: 	leal	0x8(%rcx,%rdx), %r9d
    000002cc: 	movslq	%r9d, %r9
    000002cf: 	leal	-0x1(%rcx,%rdx), %ebp
    000002d3: 	addsd	(%rax,%r9,8), %xmm2
    000002d9: 	leal	(%r11,%rsi), %r9d
    000002dd: 	movslq	%ebp, %rbp
    000002e0: 	addl	%ecx, %esi
    000002e2: 	movslq	%r9d, %r9
    000002e5: 	movsd	(%rax,%rbp,8), %xmm4
    000002ea: 	movslq	%esi, %rsi
    000002ed: 	addsd	(%rax,%r9,8), %xmm2
    000002f3: 	leal	(%r10,%rdx), %r9d
    000002f7: 	addl	%r11d, %edx
    000002fa: 	movslq	%r9d, %r9
    000002fd: 	movslq	%edx, %rdx
    00000300: 	addsd	(%rax,%r9,8), %xmm4
    00000306: 	addsd	%xmm7, %xmm2
    0000030a: 	addsd	%xmm8, %xmm4
    0000030f: 	addsd	(%rax,%rdx,8), %xmm4
    00000314: 	mulsd	%xmm6, %xmm2
    00000318: 	leaq	(%rbx,%rdi,8), %rdx
    0000031c: 	addsd	%xmm7, %xmm4
    00000320: 	mulsd	%xmm6, %xmm4
    00000324: 	movsd	%xmm4, (%rbx,%r8,8)
    0000032a: 	movups	%xmm3, (%rdx)
    0000032d: 	movups	%xmm1, 0x10(%rdx)
    00000331: 	movups	%xmm0, 0x20(%rdx)
    00000335: 	movl	%r14d, %edx
    00000338: 	movsd	%xmm2, (%rbx,%rsi,8)
.Ltmp19:
    0000033d: 	cmpl	-0x20(%rsp), %edx
    00000341: 	jge	.Ltmp22 # Offset: 833
    00000347: 	movslq	%edx, %r9
    0000034a: 	movslq	%r11d, %r12
    0000034d: 	movslq	%ecx, %rbp
    00000350: 	movslq	%r10d, %r8
    00000353: 	addq	%r9, %rbp
    00000356: 	leaq	0x1(%r9,%r8), %r8
    0000035b: 	movl	-0x24(%rsp), %esi
    0000035f: 	leaq	0x1(%r9,%r12), %r9
    00000364: 	movq	%rbx, %r12
    00000367: 	shlq	$0x3, %r8
    0000036b: 	leaq	(,%rbp,8), %r13
    00000373: 	subq	%rax, %r12
    00000376: 	subl	%edx, %esi
    00000378: 	shlq	$0x3, %r9
    0000037c: 	leaq	(%rbx,%r13), %rdi
    00000380: 	cmpq	$0x10, %r12
    00000384: 	seta	%r12b
    00000388: 	cmpl	$0x2, %esi
    0000038b: 	setne	%r15b
    0000038f: 	andl	%r15d, %r12d
    00000392: 	leaq	(%rax,%r8), %r15
    00000396: 	cmpq	%r15, %rdi
    00000399: 	setne	%r15b
    0000039d: 	testb	%r15b, %r12b
    000003a0: 	je	.Ltmp23 # Offset: 928
    000003a6: 	leaq	(%rax,%r9), %r12
    000003aa: 	cmpq	%r12, %rdi
    000003ad: 	je	.Ltmp23 # Offset: 941
    000003b3: 	leaq	-0x8(%rax,%r13), %r12
    000003b8: 	leaq	0x8(%rax,%r13), %r13
    000003bd: 	pxor	%xmm1, %xmm1
    000003c1: 	subl	$0x1, %esi
    000003c4: 	movupd	(%r13), %xmm2
    000003ca: 	movupd	(%r12), %xmm0
    000003d0: 	leaq	-0x8(%rax,%r8), %r8
    000003d5: 	movl	%esi, %ebp
    000003d7: 	leaq	-0x8(%rax,%r9), %r9
    000003dc: 	shrl	%ebp
    000003de: 	addpd	%xmm2, %xmm0
    000003e2: 	movupd	(%r8), %xmm2
    000003e7: 	addpd	%xmm2, %xmm0
    000003eb: 	movupd	(%r9), %xmm2
    000003f0: 	addpd	%xmm2, %xmm0
    000003f4: 	addpd	%xmm1, %xmm0
    000003f8: 	mulpd	%xmm5, %xmm0
    000003fc: 	movups	%xmm0, (%rdi)
    000003ff: 	cmpl	$0x1, %ebp
    00000402: 	je	.Ltmp24 # Offset: 1026
    00000408: 	movupd	0x10(%r13), %xmm2
    0000040e: 	movupd	0x10(%r12), %xmm0
    00000415: 	addpd	%xmm2, %xmm0
    00000419: 	movupd	0x10(%r8), %xmm2
    0000041f: 	addpd	%xmm2, %xmm0
    00000423: 	movupd	0x10(%r9), %xmm2
    00000429: 	addpd	%xmm2, %xmm0
    0000042d: 	addpd	%xmm1, %xmm0
    00000431: 	mulpd	%xmm5, %xmm0
    00000435: 	movups	%xmm0, 0x10(%rdi)
    00000439: 	cmpl	$0x2, %ebp
    0000043c: 	je	.Ltmp24 # Offset: 1084
    0000043e: 	movupd	0x20(%r13), %xmm2
    00000444: 	movupd	0x20(%r12), %xmm0
    0000044b: 	addpd	%xmm2, %xmm0
    0000044f: 	movupd	0x20(%r8), %xmm2
    00000455: 	addpd	%xmm2, %xmm0
    00000459: 	movupd	0x20(%r9), %xmm2
    0000045f: 	addpd	%xmm2, %xmm0
    00000463: 	addpd	%xmm1, %xmm0
    00000467: 	mulpd	%xmm5, %xmm0
    0000046b: 	movups	%xmm0, 0x20(%rdi)
    0000046f: 	cmpl	$0x3, %ebp
    00000472: 	je	.Ltmp24 # Offset: 1138
    00000474: 	movupd	0x30(%r12), %xmm2
    0000047b: 	movupd	0x30(%r13), %xmm0
    00000481: 	addpd	%xmm2, %xmm0
    00000485: 	movupd	0x30(%r8), %xmm2
    0000048b: 	addpd	%xmm2, %xmm0
    0000048f: 	movupd	0x30(%r9), %xmm2
    00000495: 	addpd	%xmm2, %xmm0
    00000499: 	addpd	%xmm1, %xmm0
    0000049d: 	mulpd	%xmm5, %xmm0
    000004a1: 	movups	%xmm0, 0x30(%rdi)
.Ltmp24:
    000004a5: 	movl	%esi, %edi
    000004a7: 	andl	$-0x2, %edi
    000004aa: 	addl	%edi, %edx
    000004ac: 	cmpl	%esi, %edi
    000004ae: 	je	.Ltmp22 # Offset: 1198
    000004b0: 	leal	(%r10,%rdx), %esi
    000004b4: 	leal	0x1(%rcx,%rdx), %r8d
    000004b9: 	leal	-0x1(%rcx,%rdx), %edi
    000004bd: 	movslq	%esi, %rsi
    000004c0: 	movslq	%r8d, %r8
    000004c3: 	movslq	%edi, %rdi
    000004c6: 	movsd	(%rax,%r8,8), %xmm0
    000004cc: 	addsd	(%rax,%rdi,8), %xmm0
    000004d1: 	addsd	(%rax,%rsi,8), %xmm0
    000004d6: 	leal	(%rcx,%rdx), %esi
    000004d9: 	addl	%r11d, %edx
    000004dc: 	movslq	%edx, %rdx
    000004df: 	movslq	%esi, %rsi
    000004e2: 	addsd	(%rax,%rdx,8), %xmm0
    000004e7: 	addsd	%xmm7, %xmm0
    000004eb: 	mulsd	%xmm6, %xmm0
    000004ef: 	movsd	%xmm0, (%rbx,%rsi,8)
.Ltmp22:
    000004f4: 	movl	-0x18(%rsp), %edi
    000004f8: 	movl	-0x28(%rsp), %esi
    000004fc: 	addl	%edi, %r10d
    000004ff: 	addl	%edi, %ecx
    00000501: 	addl	%edi, %r11d
    00000504: 	cmpl	%esi, -0x1c(%rsp)
    00000508: 	jne	.Ltmp25 # Offset: 1288
.Ltmp18:
    0000050e: 	popq	%rbx
    0000050f: 	popq	%rbp
    00000510: 	popq	%r12
    00000512: 	popq	%r13
    00000514: 	popq	%r14
    00000516: 	popq	%r15
    00000518: 	retq # Offset: 1304
    00000519: 	nopl	(%rax) # Size: 7
.Ltmp23:
    00000520: 	leal	0x1(%rdx), %esi
    00000523: 	leal	-0x1(%rcx,%rdx), %r13d
    00000528: 	leal	(%rsi,%rcx), %r12d
    0000052c: 	movslq	%r13d, %r13
    0000052f: 	movslq	%r12d, %r12
    00000532: 	movsd	(%rax,%r13,8), %xmm0
    00000538: 	leaq	(%rax,%r12,8), %r15
    0000053c: 	addsd	(%r15), %xmm0
    00000541: 	addsd	-0x8(%rax,%r8), %xmm0
    00000548: 	addsd	-0x8(%rax,%r9), %xmm0
    0000054f: 	addsd	%xmm7, %xmm0
    00000553: 	mulsd	%xmm6, %xmm0
    00000557: 	movsd	%xmm0, (%rdi)
    0000055b: 	cmpl	-0x20(%rsp), %esi
    0000055f: 	jge	.Ltmp22 # Offset: 1375
    00000561: 	leal	0x2(%rdx), %edi
    00000564: 	leal	(%rsi,%r10), %r9d
    00000568: 	addl	%r11d, %esi
    0000056b: 	movsd	(%rax,%rbp,8), %xmm0
    00000570: 	leal	(%rdi,%rcx), %r8d
    00000574: 	movslq	%r9d, %r9
    00000577: 	movslq	%esi, %rsi
    0000057a: 	movslq	%r8d, %r8
    0000057d: 	leaq	(%rax,%r8,8), %r13
    00000581: 	addsd	(%r13), %xmm0
    00000587: 	addsd	(%rax,%r9,8), %xmm0
    0000058d: 	addsd	(%rax,%rsi,8), %xmm0
    00000592: 	addsd	%xmm7, %xmm0
    00000596: 	mulsd	%xmm6, %xmm0
    0000059a: 	movsd	%xmm0, (%rbx,%r12,8)
    000005a0: 	cmpl	-0x20(%rsp), %edi
    000005a4: 	jge	.Ltmp22 # Offset: 1444
    000005aa: 	leal	0x3(%rdx), %esi
    000005ad: 	leal	(%rdi,%r10), %ebp
    000005b1: 	addl	%r11d, %edi
    000005b4: 	movsd	(%r15), %xmm0
    000005b9: 	leal	(%rsi,%rcx), %r9d
    000005bd: 	movslq	%ebp, %rbp
    000005c0: 	movslq	%edi, %rdi
    000005c3: 	movslq	%r9d, %r9
    000005c6: 	leaq	(%rax,%r9,8), %r12
    000005ca: 	addsd	(%r12), %xmm0
    000005d0: 	addsd	(%rax,%rbp,8), %xmm0
    000005d5: 	addsd	(%rax,%rdi,8), %xmm0
    000005da: 	addsd	%xmm7, %xmm0
    000005de: 	mulsd	%xmm6, %xmm0
    000005e2: 	movsd	%xmm0, (%rbx,%r8,8)
    000005e8: 	cmpl	-0x20(%rsp), %esi
    000005ec: 	jge	.Ltmp22 # Offset: 1516
    000005f2: 	leal	0x4(%rdx), %edi
    000005f5: 	leal	(%rsi,%r10), %ebp
    000005f9: 	addl	%r11d, %esi
    000005fc: 	movsd	(%r13), %xmm0
    00000602: 	leal	(%rdi,%rcx), %r8d
    00000606: 	movslq	%ebp, %rbp
    00000609: 	movslq	%esi, %rsi
    0000060c: 	movslq	%r8d, %r8
    0000060f: 	leaq	(%rax,%r8,8), %r15
    00000613: 	addsd	(%r15), %xmm0
    00000618: 	addsd	(%rax,%rbp,8), %xmm0
    0000061d: 	addsd	(%rax,%rsi,8), %xmm0
    00000622: 	addsd	%xmm7, %xmm0
    00000626: 	mulsd	%xmm6, %xmm0
    0000062a: 	movsd	%xmm0, (%rbx,%r9,8)
    00000630: 	cmpl	-0x20(%rsp), %edi
    00000634: 	jge	.Ltmp22 # Offset: 1588
    0000063a: 	leal	0x5(%rdx), %esi
    0000063d: 	leal	(%rdi,%r10), %ebp
    00000641: 	addl	%r11d, %edi
    00000644: 	movsd	(%r12), %xmm0
    0000064a: 	leal	(%rsi,%rcx), %r9d
    0000064e: 	movslq	%ebp, %rbp
    00000651: 	movslq	%edi, %rdi
    00000654: 	movslq	%r9d, %r9
    00000657: 	leaq	(%rax,%r9,8), %r13
    0000065b: 	addsd	(%r13), %xmm0
    00000661: 	addsd	(%rax,%rbp,8), %xmm0
    00000666: 	addsd	(%rax,%rdi,8), %xmm0
    0000066b: 	addsd	%xmm7, %xmm0
    0000066f: 	mulsd	%xmm6, %xmm0
    00000673: 	movsd	%xmm0, (%rbx,%r8,8)
    00000679: 	cmpl	-0x20(%rsp), %esi
    0000067d: 	jge	.Ltmp22 # Offset: 1661
    00000683: 	leal	0x6(%rdx), %edi
    00000686: 	leal	(%rsi,%r10), %r8d
    0000068a: 	addl	%r11d, %esi
    0000068d: 	movsd	(%r15), %xmm0
    00000692: 	leal	(%rdi,%rcx), %ebp
    00000695: 	movslq	%r8d, %r8
    00000698: 	movslq	%esi, %rsi
    0000069b: 	movl	-0x20(%rsp), %r15d
    000006a0: 	movslq	%ebp, %rbp
    000006a3: 	leaq	(%rax,%rbp,8), %r12
    000006a7: 	addsd	(%r12), %xmm0
    000006ad: 	addsd	(%rax,%r8,8), %xmm0
    000006b3: 	addsd	(%rax,%rsi,8), %xmm0
    000006b8: 	addsd	%xmm7, %xmm0
    000006bc: 	mulsd	%xmm6, %xmm0
    000006c0: 	movsd	%xmm0, (%rbx,%r9,8)
    000006c6: 	cmpl	%r15d, %edi
    000006c9: 	jge	.Ltmp22 # Offset: 1737
    000006cf: 	leal	0x7(%rdx), %esi
    000006d2: 	leal	(%rdi,%r10), %r9d
    000006d6: 	addl	%r11d, %edi
    000006d9: 	leal	(%rcx,%rsi), %r8d
    000006dd: 	movslq	%r9d, %r9
    000006e0: 	movslq	%edi, %rdi
    000006e3: 	movslq	%r8d, %r8
    000006e6: 	movsd	(%rax,%r8,8), %xmm0
    000006ec: 	addsd	(%r13), %xmm0
    000006f2: 	addsd	(%rax,%r9,8), %xmm0
    000006f8: 	addsd	(%rax,%rdi,8), %xmm0
    000006fd: 	addsd	%xmm7, %xmm0
    00000701: 	mulsd	%xmm6, %xmm0
    00000705: 	movsd	%xmm0, (%rbx,%rbp,8)
    0000070a: 	cmpl	%r15d, %esi
    0000070d: 	jge	.Ltmp22 # Offset: 1805
    00000713: 	leal	0x8(%rcx,%rdx), %edx
    00000717: 	leal	(%r10,%rsi), %edi
    0000071b: 	movslq	%edx, %rdx
    0000071e: 	movslq	%edi, %rdi
    00000721: 	movsd	(%rax,%rdx,8), %xmm0
    00000726: 	leal	(%rsi,%r11), %edx
    0000072a: 	addsd	(%r12), %xmm0
    00000730: 	movslq	%edx, %rdx
    00000733: 	addsd	(%rax,%rdi,8), %xmm0
    00000738: 	addsd	(%rax,%rdx,8), %xmm0
    0000073d: 	addsd	%xmm7, %xmm0
    00000741: 	mulsd	%xmm6, %xmm0
    00000745: 	movsd	%xmm0, (%rbx,%r8,8)
    0000074b: 	jmp	.Ltmp22 # Offset: 1867
.Ltmp20:
    00000750: 	movl	$0x1, %edx
    00000755: 	movapd	%xmm5, %xmm2
    00000759: 	jmp	.Ltmp26 # Offset: 1881
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 12
  State       : disassembled
  Address     : 0x38a0
  Size        : 0xc74
  MaxSize     : 0xc80
  Offset      : 0x38a0
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x68(%rsp)
    00000012: 	movl	%ecx, -0x3c(%rsp)
    00000016: 	movl	%r8d, -0x2c(%rsp)
    0000001b: 	movl	%eax, -0x30(%rsp)
    0000001f: 	cmpl	$0x1, %eax
    00000022: 	jle	.Ltmp27 # Offset: 34
    00000028: 	movl	%ecx, %eax
    0000002a: 	leal	-0x1(%rcx), %esi
    0000002d: 	movl	$0x1, -0x40(%rsp)
    00000035: 	xorl	%r13d, %r13d
    00000038: 	subl	$0xa, %eax
    0000003b: 	movl	%esi, -0x34(%rsp)
    0000003f: 	leal	(%r8,%r8), %r15d
    00000043: 	movl	%r13d, %r14d
    00000046: 	movl	%eax, %esi
    00000048: 	movl	%eax, -0x38(%rsp)
    0000004c: 	shrl	$0x4, %eax
    0000004f: 	movaps	DATAat0x49420(%rip), %xmm3
    00000056: 	movl	%eax, %edx
    00000058: 	shrl	$0x3, %esi
    0000005b: 	leal	-0x1(%rax), %eax
    0000005e: 	movaps	DATAat0x49430(%rip), %xmm2
    00000065: 	leal	(%rdx,%rdx), %ebx
    00000068: 	shll	$0x4, %edx
    0000006b: 	addq	$0x1, %rax
    0000006f: 	movl	%esi, -0x24(%rsp)
    00000073: 	movl	%ebx, -0x20(%rsp)
    00000077: 	leal	0x1(%rdx), %ebx
    0000007a: 	movl	%esi, %edx
    0000007c: 	shlq	$0x6, %rax
    00000080: 	movl	%ebx, -0x1c(%rsp)
    00000084: 	leal	0x9(,%rsi,8), %esi
    0000008b: 	movl	%r15d, %r13d
    0000008e: 	movq	%rdi, %r12
    00000091: 	leaq	(,%rdx,8), %rbx
    00000099: 	movl	%esi, -0x28(%rsp)
    0000009d: 	movl	%r8d, %r15d
    000000a0: 	movq	%rbx, -0x10(%rsp)
    000000a5: 	movq	%rax, -0x18(%rsp)
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp38:
    000000b0: 	addl	$0x1, -0x40(%rsp)
    000000b5: 	cmpl	$0x9, -0x3c(%rsp)
    000000ba: 	movl	$0x1, %eax
    000000bf: 	jle	.Ltmp28 # Offset: 191
    000000c5: 	movq	-0x68(%rsp), %rdi
    000000ca: 	movslq	%r15d, %rbx
    000000cd: 	movslq	%r14d, %r9
    000000d0: 	movslq	%r13d, %rbp
    000000d3: 	leaq	0x4(,%rbx,4), %rsi
    000000db: 	leaq	0x24(,%r9,4), %r10
    000000e3: 	leaq	0x18(%rdi,%rsi), %rcx
    000000e8: 	leaq	(%rdi,%rsi), %rax
    000000ec: 	leaq	0x1c(%r12,%rsi), %rdx
    000000f1: 	movq	%rcx, %rdi
    000000f4: 	leaq	0x24(,%rbp,4), %r11
    000000fc: 	subq	%rdx, %rdi
    000000ff: 	addq	$0x4, %rdi
    00000103: 	cmpq	$0x28, %rdi
    00000107: 	movq	%rax, %rdi
    0000010a: 	seta	%r8b
    0000010e: 	subq	%rdx, %rdi
    00000111: 	addq	$0x14, %rdi
    00000115: 	cmpq	$0x38, %rdi
    00000119: 	seta	%dil
    0000011d: 	andl	%r8d, %edi
    00000120: 	cmpl	$0x7, -0x38(%rsp)
    00000125: 	seta	%r8b
    00000129: 	andl	%r8d, %edi
    0000012c: 	leaq	(%r12,%r10), %r8
    00000130: 	movb	%dil, -0x60(%rsp)
    00000135: 	movq	%rax, %rdi
    00000138: 	subq	%r8, %rdi
    0000013b: 	leaq	0x1c(%rdi), %r8
    0000013f: 	cmpq	$0x38, %r8
    00000143: 	seta	%r8b
    00000147: 	testb	%r8b, -0x60(%rsp)
    0000014c: 	je	.Ltmp29 # Offset: 332
    00000152: 	leaq	(%r12,%r11), %r8
    00000156: 	movq	%rax, %rdi
    00000159: 	subq	%r8, %rdi
    0000015c: 	addq	$0x1c, %rdi
    00000160: 	cmpq	$0x38, %rdi
    00000164: 	jbe	.Ltmp29 # Offset: 356
    0000016a: 	cmpl	$0xf, -0x38(%rsp)
    0000016f: 	jbe	.Ltmp30 # Offset: 367
    00000175: 	leaq	-0x4(%r12,%rsi), %r8
    0000017a: 	leaq	-0x20(%r12,%r11), %rsi
    0000017f: 	movq	-0x18(%rsp), %r11
    00000184: 	movaps	%xmm3, %xmm5
    00000187: 	leaq	-0x20(%r12,%r10), %rdi
    0000018c: 	movaps	%xmm2, %xmm4
    0000018f: 	pxor	%xmm8, %xmm8
    00000194: 	leaq	(%rax,%r11), %r10
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp31:
    000001a0: 	movups	0x30(%rax), %xmm6
    000001a4: 	movups	0x20(%rax), %xmm1
    000001a8: 	addq	$0x40, %rax
    000001ac: 	addq	$0x40, %rdi
    000001b0: 	movups	-0x30(%rax), %xmm9
    000001b5: 	movups	-0x30(%rax), %xmm0
    000001b9: 	addq	$0x40, %r8
    000001bd: 	addq	$0x40, %rsi
    000001c1: 	movups	-0x30(%r8), %xmm7
    000001c6: 	movups	-0x20(%r8), %xmm11
    000001cb: 	shufps	$0x4e, %xmm6, %xmm1
    000001cf: 	addq	$0x40, %rdx
    000001d3: 	shufps	$0xee, %xmm6, %xmm9
    000001d8: 	movups	-0x30(%rdi), %xmm6
    000001dc: 	movhps	-0x20(%rax), %xmm0
    000001e0: 	movups	-0x10(%r8), %xmm10
    000001e5: 	movaps	%xmm7, %xmm12
    000001e9: 	movups	-0x10(%rdi), %xmm13
    000001ee: 	movups	-0x10(%rsi), %xmm15
    000001f3: 	addq	$0x40, %rcx
    000001f7: 	movhps	-0x20(%rdi), %xmm6
    000001fb: 	movlhps	%xmm11, %xmm12
    000001ff: 	movups	-0x40(%rsi), %xmm14
    00000204: 	addps	%xmm12, %xmm6
    00000208: 	movaps	%xmm7, %xmm12
    0000020c: 	shufps	$0xee, %xmm11, %xmm12
    00000211: 	shufps	$0x4e, %xmm10, %xmm11
    00000216: 	addps	%xmm12, %xmm6
    0000021a: 	movups	-0x30(%rsi), %xmm12
    0000021f: 	movhps	-0x20(%rsi), %xmm12
    00000224: 	addps	%xmm12, %xmm6
    00000228: 	addps	%xmm8, %xmm6
    0000022c: 	mulps	%xmm3, %xmm6
    0000022f: 	subps	%xmm0, %xmm6
    00000232: 	mulps	%xmm2, %xmm6
    00000235: 	addps	%xmm0, %xmm6
    00000238: 	movups	-0x20(%rdi), %xmm0
    0000023c: 	shufps	$0x4e, %xmm13, %xmm0
    00000241: 	addps	%xmm11, %xmm0
    00000245: 	movups	-0x20(%rsi), %xmm11
    0000024a: 	shufps	$0x4e, %xmm15, %xmm11
    0000024f: 	addps	%xmm10, %xmm0
    00000253: 	addps	%xmm11, %xmm0
    00000257: 	movaps	%xmm7, %xmm11
    0000025b: 	shufps	$0xee, %xmm10, %xmm11
    00000260: 	movups	-0x40(%rdx), %xmm10
    00000265: 	addps	%xmm8, %xmm0
    00000269: 	movhps	-0x20(%rdx), %xmm10
    0000026e: 	mulps	%xmm3, %xmm0
    00000271: 	subps	%xmm1, %xmm0
    00000274: 	mulps	%xmm2, %xmm0
    00000277: 	addps	%xmm1, %xmm0
    0000027a: 	movups	-0x30(%rdi), %xmm1
    0000027e: 	shufps	$0xee, %xmm13, %xmm1
    00000283: 	addps	%xmm11, %xmm1
    00000287: 	movups	-0x40(%rax), %xmm13
    0000028c: 	addps	%xmm10, %xmm1
    00000290: 	movups	-0x30(%rsi), %xmm10
    00000295: 	shufps	$0xee, %xmm15, %xmm10
    0000029a: 	movups	-0x40(%r8), %xmm15
    0000029f: 	addps	%xmm10, %xmm1
    000002a3: 	movaps	%xmm15, %xmm10
    000002a7: 	shufps	$0x4e, %xmm7, %xmm10
    000002ac: 	addps	%xmm8, %xmm1
    000002b0: 	mulps	%xmm3, %xmm1
    000002b3: 	subps	%xmm9, %xmm1
    000002b7: 	mulps	%xmm2, %xmm1
    000002ba: 	addps	%xmm9, %xmm1
    000002be: 	movups	-0x40(%rdi), %xmm9
    000002c3: 	movlps	%xmm6, -0x30(%rax)
    000002c7: 	shufps	$0x4e, %xmm0, %xmm6
    000002cb: 	shufps	$0xee, %xmm0, %xmm0
    000002cf: 	movups	%xmm6, -0x20(%rax)
    000002d3: 	addps	%xmm15, %xmm9
    000002d7: 	movlps	%xmm0, -0x10(%rax)
    000002db: 	movaps	%xmm9, %xmm7
    000002df: 	addps	%xmm10, %xmm7
    000002e3: 	addps	%xmm14, %xmm7
    000002e7: 	addps	%xmm8, %xmm7
    000002eb: 	mulps	%xmm3, %xmm7
    000002ee: 	subps	%xmm13, %xmm7
    000002f2: 	mulps	%xmm2, %xmm7
    000002f5: 	addps	%xmm13, %xmm7
    000002f9: 	movups	%xmm7, -0x40(%rax)
    000002fd: 	movq	%xmm1, -0x40(%rcx)
    00000302: 	movhps	%xmm1, -0x20(%rcx)
    00000306: 	cmpq	%rax, %r10
    00000309: 	jne	.Ltmp31 # Offset: 777
    0000030f: 	movl	-0x20(%rsp), %edx
    00000313: 	movl	-0x1c(%rsp), %eax
.Ltmp41:
    00000317: 	movl	-0x24(%rsp), %esi
    0000031b: 	movl	%esi, %r8d
    0000031e: 	subl	%edx, %r8d
    00000321: 	cmpl	%edx, %esi
    00000323: 	je	.Ltmp32 # Offset: 803
    00000329: 	shlq	$0x3, %rdx
    0000032d: 	xorps	%xmm10, %xmm10
    00000331: 	leal	(%rax,%r8,8), %eax
    00000335: 	movq	DATAat0x49420(%rip), %xmm9
    0000033e: 	leaq	(%rbx,%rdx), %r10
    00000342: 	leaq	0x1(%r9,%rdx), %rsi
    00000347: 	movq	-0x68(%rsp), %rbx
    0000034c: 	leaq	(%r12,%rsi,4), %r9
    00000350: 	leaq	0x4(,%r10,4), %rdi
    00000358: 	movq	0x20(%r12,%r10,4), %xmm12
    0000035f: 	leaq	-0x4(%r12,%rdi), %rsi
    00000364: 	movq	0x8(%r9), %xmm0
    0000036a: 	leaq	0x1(%rbp,%rdx), %rdx
    0000036f: 	movq	0x8(%rsi), %xmm11
    00000375: 	movq	0x10(%rsi), %xmm14
    0000037b: 	leaq	(%r12,%rdx,4), %rdx
    0000037f: 	leaq	(%rbx,%rdi), %rcx
    00000383: 	movq	0x8(%rcx), %xmm15
    00000389: 	movq	0x18(%rsi), %xmm7
    0000038e: 	addps	%xmm11, %xmm0
    00000392: 	movq	0x10(%rcx), %xmm13
    00000398: 	movq	0x18(%rcx), %xmm6
    0000039d: 	movq	(%rcx), %xmm8
    000003a2: 	movaps	%xmm0, %xmm1
    000003a5: 	movq	0x8(%rdx), %xmm0
    000003aa: 	addps	%xmm14, %xmm1
    000003ae: 	addps	%xmm1, %xmm0
    000003b1: 	movq	DATAat0x49430(%rip), %xmm1
    000003b9: 	addps	%xmm10, %xmm0
    000003bd: 	mulps	%xmm9, %xmm0
    000003c1: 	subps	%xmm15, %xmm0
    000003c5: 	mulps	%xmm1, %xmm0
    000003c8: 	addps	%xmm0, %xmm15
    000003cc: 	movq	0x10(%r9), %xmm0
    000003d2: 	addps	%xmm14, %xmm0
    000003d6: 	movq	0x10(%rdx), %xmm14
    000003dc: 	addps	%xmm7, %xmm0
    000003df: 	addps	%xmm14, %xmm0
    000003e3: 	movq	0x18(%r9), %xmm14
    000003e9: 	addps	%xmm14, %xmm7
    000003ed: 	addps	%xmm10, %xmm0
    000003f1: 	addps	%xmm7, %xmm12
    000003f5: 	movq	(%r9), %xmm7
    000003fa: 	mulps	%xmm9, %xmm0
    000003fe: 	subps	%xmm13, %xmm0
    00000402: 	mulps	%xmm1, %xmm0
    00000405: 	addps	%xmm13, %xmm0
    00000409: 	movq	0x18(%rdx), %xmm13
    0000040f: 	addps	%xmm13, %xmm12
    00000413: 	addps	%xmm10, %xmm12
    00000417: 	mulps	%xmm9, %xmm12
    0000041b: 	subps	%xmm6, %xmm12
    0000041f: 	mulps	%xmm1, %xmm12
    00000423: 	addps	%xmm12, %xmm6
    00000427: 	movq	(%rsi), %xmm12
    0000042c: 	addps	%xmm12, %xmm7
    00000430: 	addps	%xmm11, %xmm7
    00000434: 	movq	(%rdx), %xmm11
    00000439: 	movlps	%xmm15, 0x8(%rcx)
    0000043e: 	movlps	%xmm0, 0x10(%rcx)
    00000442: 	addps	%xmm11, %xmm7
    00000446: 	addps	%xmm10, %xmm7
    0000044a: 	mulps	%xmm9, %xmm7
    0000044e: 	subps	%xmm8, %xmm7
    00000452: 	mulps	%xmm7, %xmm1
    00000455: 	addps	%xmm8, %xmm1
    00000459: 	movlps	%xmm1, (%rcx)
    0000045c: 	movlps	%xmm6, 0x18(%rbx,%rdi)
.Ltmp32:
    00000461: 	movq	-0x68(%rsp), %rsi
    00000466: 	leal	0x2(%rax), %ebx
    00000469: 	leal	(%r15,%rax), %edx
    0000046d: 	movl	%ebx, -0x60(%rsp)
    00000471: 	movslq	%edx, %rdx
    00000474: 	leal	-0x1(%r15,%rax), %ebx
    00000479: 	leal	0x6(%rax), %r9d
    0000047d: 	leaq	(%rsi,%rdx,4), %r11
    00000481: 	movslq	%ebx, %rbx
    00000484: 	leal	0x1(%rax), %edx
    00000487: 	leaq	(%r12,%rbx,4), %rsi
    0000048b: 	leal	(%r15,%rdx), %ebx
    0000048f: 	movslq	%ebx, %rbx
    00000492: 	leal	0x7(%rax), %r10d
    00000496: 	leal	0x3(%rax), %ebp
    00000499: 	leaq	(%r12,%rbx,4), %rcx
    0000049d: 	leal	0x4(%rax), %edi
    000004a0: 	movl	%ebp, -0x54(%rsp)
    000004a4: 	movq	%rcx, -0x50(%rsp)
    000004a9: 	leal	(%r14,%r9), %ecx
    000004ad: 	leal	0x5(%rax), %r8d
    000004b1: 	addl	%r13d, %r9d
    000004b4: 	movslq	%ecx, %rcx
    000004b7: 	leal	(%r14,%rdi), %ebx
    000004bb: 	leal	(%r14,%r8), %ebp
    000004bf: 	movslq	%r9d, %r9
    000004c2: 	movq	%rcx, -0x48(%rsp)
    000004c7: 	leal	(%r14,%r10), %ecx
    000004cb: 	movslq	%ebx, %rbx
    000004ce: 	movslq	%ebp, %rbp
    000004d1: 	movslq	%ecx, %rcx
    000004d4: 	movss	(%r12,%rbp,4), %xmm6
    000004da: 	addl	%r13d, %r10d
    000004dd: 	addl	%r13d, %edi
    000004e0: 	movss	(%r12,%rcx,4), %xmm0
    000004e6: 	movslq	%r10d, %r10
    000004e9: 	addl	%r13d, %r8d
    000004ec: 	movslq	%edi, %rdi
    000004ef: 	movq	-0x48(%rsp), %rcx
    000004f4: 	movslq	%r8d, %r8
    000004f7: 	movl	-0x54(%rsp), %ebp
    000004fb: 	movss	(%r12,%r8,4), %xmm7
    00000501: 	leal	(%r14,%rdx), %r8d
    00000505: 	addl	%r13d, %edx
    00000508: 	movss	(%r12,%rcx,4), %xmm1
    0000050e: 	movq	-0x50(%rsp), %rcx
    00000513: 	movslq	%r8d, %r8
    00000516: 	movslq	%edx, %rdx
    00000519: 	movss	(%r12,%r8,4), %xmm8
    0000051f: 	movss	(%r12,%rdx,4), %xmm9
    00000525: 	unpcklps	%xmm0, %xmm1
    00000528: 	movss	(%r12,%rbx,4), %xmm0
    0000052e: 	movl	-0x60(%rsp), %ebx
    00000532: 	unpcklps	%xmm6, %xmm0
    00000535: 	movups	0x10(%rsi), %xmm6
    00000539: 	movlhps	%xmm1, %xmm0
    0000053c: 	movss	(%r12,%r10,4), %xmm1
    00000542: 	leal	(%r14,%rbp), %r10d
    00000546: 	addps	%xmm6, %xmm0
    00000549: 	movups	0x10(%rcx), %xmm6
    0000054d: 	movslq	%r10d, %r10
    00000550: 	addps	%xmm6, %xmm0
    00000553: 	movss	(%r12,%r9,4), %xmm6
    00000559: 	leal	(%r14,%rbx), %r9d
    0000055d: 	movslq	%r9d, %r9
    00000560: 	unpcklps	%xmm1, %xmm6
    00000563: 	movss	(%r12,%rdi,4), %xmm1
    00000569: 	leal	(%r14,%rax), %edi
    0000056d: 	addl	%r13d, %eax
    00000570: 	movslq	%edi, %rdi
    00000573: 	cltq
    00000575: 	unpcklps	%xmm7, %xmm1
    00000578: 	movups	0x10(%r11), %xmm7
    0000057d: 	movlhps	%xmm6, %xmm1
    00000580: 	pxor	%xmm6, %xmm6
    00000584: 	addps	%xmm1, %xmm0
    00000587: 	movss	(%r12,%r10,4), %xmm1
    0000058d: 	addps	%xmm6, %xmm0
    00000590: 	mulps	%xmm5, %xmm0
    00000593: 	subps	%xmm7, %xmm0
    00000596: 	mulps	%xmm4, %xmm0
    00000599: 	addps	%xmm7, %xmm0
    0000059c: 	movss	(%r12,%r9,4), %xmm7
    000005a2: 	unpcklps	%xmm1, %xmm7
    000005a5: 	movss	(%r12,%rdi,4), %xmm1
    000005ab: 	unpcklps	%xmm8, %xmm1
    000005af: 	movlhps	%xmm7, %xmm1
    000005b2: 	movups	(%rsi), %xmm7
    000005b5: 	leal	(%r13,%rbp), %esi
    000005ba: 	movslq	%esi, %rsi
    000005bd: 	addps	%xmm7, %xmm1
    000005c0: 	movups	(%rcx), %xmm7
    000005c3: 	leal	(%r13,%rbx), %ecx
    000005c8: 	movslq	%ecx, %rcx
    000005cb: 	movss	(%r12,%rcx,4), %xmm8
    000005d1: 	addps	%xmm7, %xmm1
    000005d4: 	movss	(%r12,%rsi,4), %xmm7
    000005da: 	unpcklps	%xmm7, %xmm8
    000005de: 	movss	(%r12,%rax,4), %xmm7
    000005e4: 	unpcklps	%xmm9, %xmm7
    000005e8: 	movlhps	%xmm8, %xmm7
    000005ec: 	addps	%xmm7, %xmm1
    000005ef: 	addps	%xmm6, %xmm1
    000005f2: 	mulps	%xmm5, %xmm1
    000005f5: 	movups	(%r11), %xmm5
    000005f9: 	subps	%xmm5, %xmm1
    000005fc: 	mulps	%xmm4, %xmm1
    000005ff: 	addps	%xmm5, %xmm1
    00000602: 	movups	%xmm1, (%r11)
    00000606: 	movups	%xmm0, 0x10(%r11)
.Ltmp40:
    0000060b: 	movl	-0x28(%rsp), %eax
.Ltmp28:
    0000060f: 	cmpl	-0x34(%rsp), %eax
    00000613: 	jge	.Ltmp33 # Offset: 1555
    00000619: 	movslq	%eax, %rcx
    0000061c: 	movslq	%r15d, %rdx
    0000061f: 	movq	-0x68(%rsp), %rbx
    00000624: 	movl	-0x3c(%rsp), %esi
    00000628: 	leaq	(%rdx,%rcx), %rdi
    0000062c: 	movslq	%r13d, %r8
    0000062f: 	movslq	%r14d, %rdx
    00000632: 	leaq	(,%rdi,4), %r9
    0000063a: 	addq	%rcx, %rdx
    0000063d: 	addq	%rcx, %r8
    00000640: 	subl	%eax, %esi
    00000642: 	movq	%rdi, -0x60(%rsp)
    00000647: 	leaq	(%rbx,%r9), %rdi
    0000064b: 	subq	%r12, %rbx
    0000064e: 	leaq	0x4(,%rdx,4), %r10
    00000656: 	cmpq	$0x10, %rbx
    0000065a: 	leaq	(%r12,%r10), %rbp
    0000065e: 	leaq	0x4(,%r8,4), %r11
    00000666: 	seta	%cl
    00000669: 	cmpl	$0x2, %esi
    0000066c: 	setne	%bl
    0000066f: 	andl	%ebx, %ecx
    00000671: 	movq	%rdi, %rbx
    00000674: 	subq	%rbp, %rbx
    00000677: 	cmpq	$0x8, %rbx
    0000067b: 	seta	%bl
    0000067e: 	testb	%bl, %cl
    00000680: 	je	.Ltmp34 # Offset: 1664
    00000686: 	leaq	(%r12,%r11), %rbx
    0000068a: 	movq	%rdi, %rcx
    0000068d: 	subq	%rbx, %rcx
    00000690: 	cmpq	$0x8, %rcx
    00000694: 	jbe	.Ltmp34 # Offset: 1684
    0000069a: 	leal	-0x2(%rsi), %ebx
    0000069d: 	leal	-0x1(%rsi), %ecx
    000006a0: 	cmpl	$0x2, %ebx
    000006a3: 	jbe	.Ltmp35 # Offset: 1699
    000006a9: 	leaq	-0x4(%r12,%r9), %rbx
    000006ae: 	leaq	-0x4(%r12,%r10), %r10
    000006b3: 	pxor	%xmm1, %xmm1
    000006b7: 	movups	(%r10), %xmm4
    000006bb: 	movups	(%rbx), %xmm0
    000006be: 	leaq	0x4(%r12,%r9), %rbp
    000006c3: 	leaq	-0x4(%r12,%r11), %r9
    000006c8: 	movl	%ecx, %r11d
    000006cb: 	addps	%xmm4, %xmm0
    000006ce: 	movups	(%rbp), %xmm4
    000006d2: 	shrl	$0x2, %r11d
    000006d6: 	addps	%xmm4, %xmm0
    000006d9: 	movups	(%r9), %xmm4
    000006dd: 	addps	%xmm4, %xmm0
    000006e0: 	movups	(%rdi), %xmm4
    000006e3: 	addps	%xmm1, %xmm0
    000006e6: 	mulps	%xmm3, %xmm0
    000006e9: 	subps	%xmm4, %xmm0
    000006ec: 	mulps	%xmm2, %xmm0
    000006ef: 	addps	%xmm4, %xmm0
    000006f2: 	movups	%xmm0, (%rdi)
    000006f5: 	cmpl	$0x1, %r11d
    000006f9: 	je	.Ltmp36 # Offset: 1785
    000006fb: 	movups	0x10(%r10), %xmm4
    00000700: 	movups	0x10(%rbx), %xmm0
    00000704: 	addps	%xmm4, %xmm0
    00000707: 	movups	0x10(%rbp), %xmm4
    0000070b: 	addps	%xmm4, %xmm0
    0000070e: 	movups	0x10(%r9), %xmm4
    00000713: 	addps	%xmm4, %xmm0
    00000716: 	movups	0x10(%rdi), %xmm4
    0000071a: 	addps	%xmm1, %xmm0
    0000071d: 	mulps	%xmm3, %xmm0
    00000720: 	subps	%xmm4, %xmm0
    00000723: 	mulps	%xmm2, %xmm0
    00000726: 	addps	%xmm4, %xmm0
    00000729: 	movups	%xmm0, 0x10(%rdi)
.Ltmp36:
    0000072d: 	movl	%ecx, %edi
    0000072f: 	andl	$-0x4, %edi
    00000732: 	addl	%edi, %eax
    00000734: 	cmpl	%ecx, %edi
    00000736: 	je	.Ltmp33 # Offset: 1846
    0000073c: 	subl	%edi, %esi
    0000073e: 	leal	-0x1(%rsi), %ecx
    00000741: 	cmpl	$0x2, %esi
    00000744: 	je	.Ltmp37 # Offset: 1860
.Ltmp42:
    00000746: 	movl	%edi, %esi
    00000748: 	movq	-0x60(%rsp), %rdi
    0000074d: 	movq	-0x68(%rsp), %rbx
    00000752: 	addq	%rsi, %rdx
    00000755: 	addq	%rsi, %rdi
    00000758: 	movq	(%r12,%rdx,4), %xmm0
    0000075e: 	addq	%r8, %rsi
    00000761: 	movl	%ecx, %edx
    00000763: 	shlq	$0x2, %rdi
    00000767: 	andl	$-0x2, %edx
    0000076a: 	movq	-0x4(%r12,%rdi), %xmm4
    00000771: 	leaq	(%rbx,%rdi), %r9
    00000775: 	addl	%edx, %eax
    00000777: 	movq	(%r9), %xmm1
    0000077c: 	addps	%xmm4, %xmm0
    0000077f: 	movq	0x4(%r12,%rdi), %xmm4
    00000786: 	addps	%xmm4, %xmm0
    00000789: 	movq	(%r12,%rsi,4), %xmm4
    0000078f: 	addps	%xmm4, %xmm0
    00000792: 	xorps	%xmm4, %xmm4
    00000795: 	addps	%xmm4, %xmm0
    00000798: 	movq	DATAat0x49420(%rip), %xmm4
    000007a0: 	mulps	%xmm4, %xmm0
    000007a3: 	movq	DATAat0x49430(%rip), %xmm4
    000007ab: 	subps	%xmm1, %xmm0
    000007ae: 	mulps	%xmm4, %xmm0
    000007b1: 	addps	%xmm1, %xmm0
    000007b4: 	movlps	%xmm0, (%r9)
    000007b8: 	cmpl	%ecx, %edx
    000007ba: 	je	.Ltmp33 # Offset: 1978
.Ltmp37:
    000007bc: 	leal	(%r15,%rax), %edx
    000007c0: 	movq	-0x68(%rsp), %rsi
    000007c5: 	movslq	%edx, %rdx
    000007c8: 	leaq	(%rsi,%rdx,4), %rcx
    000007cc: 	leal	(%r14,%rax), %edx
    000007d0: 	movslq	%edx, %rdx
    000007d3: 	movss	(%rcx), %xmm1
    000007d7: 	movss	(%r12,%rdx,4), %xmm0
    000007dd: 	leal	-0x1(%rax,%r15), %edx
    000007e2: 	movslq	%edx, %rdx
    000007e5: 	addss	(%r12,%rdx,4), %xmm0
    000007eb: 	leal	0x1(%rax,%r15), %edx
    000007f0: 	addl	%r13d, %eax
    000007f3: 	movslq	%edx, %rdx
    000007f6: 	cltq
    000007f8: 	addss	(%r12,%rdx,4), %xmm0
    000007fe: 	addss	(%r12,%rax,4), %xmm0
    00000804: 	addss	DATAat0x49400(%rip), %xmm0
    0000080c: 	mulss	DATAat0x49420(%rip), %xmm0
    00000814: 	subss	%xmm1, %xmm0
    00000818: 	mulss	DATAat0x49430(%rip), %xmm0
    00000820: 	addss	%xmm1, %xmm0
    00000824: 	movss	%xmm0, (%rcx)
.Ltmp33:
    00000828: 	movl	-0x2c(%rsp), %eax
    0000082c: 	movl	-0x40(%rsp), %esi
    00000830: 	addl	%eax, %r14d
    00000833: 	addl	%eax, %r15d
    00000836: 	addl	%eax, %r13d
    00000839: 	cmpl	%esi, -0x30(%rsp)
    0000083d: 	jne	.Ltmp38 # Offset: 2109
.Ltmp27:
    00000843: 	popq	%rbx
    00000844: 	popq	%rbp
    00000845: 	popq	%r12
    00000847: 	popq	%r13
    00000849: 	popq	%r14
    0000084b: 	popq	%r15
    0000084d: 	retq # Offset: 2125
    0000084e: 	nop # Size: 2
.Ltmp29:
    00000850: 	movq	-0x10(%rsp), %rdi
    00000855: 	movq	-0x68(%rsp), %rax
    0000085a: 	subq	$0x4, %rsi
    0000085e: 	leaq	-0x24(%r12,%r10), %rdx
    00000863: 	leaq	-0x24(%r12,%r11), %rcx
    00000868: 	pxor	%xmm4, %xmm4
    0000086c: 	addq	%rbx, %rdi
    0000086f: 	addq	%rsi, %rax
    00000872: 	addq	%r12, %rsi
    00000875: 	leaq	0x20(%r12,%rdi,4), %rdi
    0000087a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp39:
    00000880: 	movss	0x20(%rdx), %xmm0
    00000885: 	movss	0x1c(%rdx), %xmm1
    0000088a: 	addq	$0x20, %rsi
    0000088e: 	addq	$0x20, %rax
    00000892: 	movss	0x18(%rdx), %xmm5
    00000897: 	movss	0x18(%rcx), %xmm6
    0000089c: 	addq	$0x20, %rdx
    000008a0: 	addq	$0x20, %rcx
    000008a4: 	unpcklps	%xmm0, %xmm1
    000008a7: 	movss	-0xc(%rdx), %xmm0
    000008ac: 	movss	-0x18(%rcx), %xmm7
    000008b1: 	unpcklps	%xmm5, %xmm0
    000008b4: 	movups	-0x10(%rsi), %xmm5
    000008b8: 	movlhps	%xmm1, %xmm0
    000008bb: 	movss	(%rcx), %xmm1
    000008bf: 	addps	%xmm5, %xmm0
    000008c2: 	movups	-0x8(%rsi), %xmm5
    000008c6: 	addps	%xmm5, %xmm0
    000008c9: 	movss	-0x4(%rcx), %xmm5
    000008ce: 	unpcklps	%xmm1, %xmm5
    000008d1: 	movss	-0xc(%rcx), %xmm1
    000008d6: 	unpcklps	%xmm6, %xmm1
    000008d9: 	movss	-0x18(%rdx), %xmm6
    000008de: 	movlhps	%xmm5, %xmm1
    000008e1: 	movups	-0xc(%rax), %xmm5
    000008e5: 	addps	%xmm1, %xmm0
    000008e8: 	movss	-0x10(%rdx), %xmm1
    000008ed: 	addps	%xmm4, %xmm0
    000008f0: 	mulps	%xmm3, %xmm0
    000008f3: 	subps	%xmm5, %xmm0
    000008f6: 	mulps	%xmm2, %xmm0
    000008f9: 	addps	%xmm5, %xmm0
    000008fc: 	movss	-0x14(%rdx), %xmm5
    00000901: 	unpcklps	%xmm1, %xmm5
    00000904: 	movss	-0x1c(%rdx), %xmm1
    00000909: 	unpcklps	%xmm6, %xmm1
    0000090c: 	movss	-0x14(%rcx), %xmm6
    00000911: 	movlhps	%xmm5, %xmm1
    00000914: 	movups	-0x20(%rsi), %xmm5
    00000918: 	addps	%xmm5, %xmm1
    0000091b: 	movups	-0x18(%rsi), %xmm5
    0000091f: 	addps	%xmm5, %xmm1
    00000922: 	movss	-0x10(%rcx), %xmm5
    00000927: 	unpcklps	%xmm5, %xmm6
    0000092a: 	movss	-0x1c(%rcx), %xmm5
    0000092f: 	movups	%xmm0, -0xc(%rax)
    00000933: 	unpcklps	%xmm7, %xmm5
    00000936: 	movlhps	%xmm6, %xmm5
    00000939: 	addps	%xmm5, %xmm1
    0000093c: 	movups	-0x1c(%rax), %xmm5
    00000940: 	addps	%xmm4, %xmm1
    00000943: 	mulps	%xmm3, %xmm1
    00000946: 	subps	%xmm5, %xmm1
    00000949: 	mulps	%xmm2, %xmm1
    0000094c: 	addps	%xmm5, %xmm1
    0000094f: 	movups	%xmm1, -0x1c(%rax)
    00000953: 	cmpq	%rdi, %rsi
    00000956: 	jne	.Ltmp39 # Offset: 2390
    0000095c: 	jmp	.Ltmp40 # Offset: 2396
    00000961: 	nopl	(%rax) # Size: 7
.Ltmp34:
    00000968: 	leal	-0x1(%rax,%r15), %edx
    0000096d: 	leal	0x1(%rax), %ecx
    00000970: 	pxor	%xmm1, %xmm1
    00000974: 	movss	(%rdi), %xmm6
    00000978: 	movslq	%edx, %rdx
    0000097b: 	movss	-0x4(%r12,%r10), %xmm0
    00000982: 	movl	-0x34(%rsp), %ebx
    00000986: 	addss	(%r12,%rdx,4), %xmm0
    0000098c: 	leal	(%rcx,%r15), %edx
    00000990: 	movss	DATAat0x49420(%rip), %xmm4
    00000998: 	movslq	%edx, %rdx
    0000099b: 	movss	DATAat0x49430(%rip), %xmm5
    000009a3: 	shlq	$0x2, %rdx
    000009a7: 	leaq	(%r12,%rdx), %rsi
    000009ab: 	addss	(%rsi), %xmm0
    000009af: 	addss	-0x4(%r12,%r11), %xmm0
    000009b6: 	addss	%xmm1, %xmm0
    000009ba: 	mulss	%xmm4, %xmm0
    000009be: 	subss	%xmm6, %xmm0
    000009c2: 	mulss	%xmm5, %xmm0
    000009c6: 	addss	%xmm6, %xmm0
    000009ca: 	movss	%xmm0, (%rdi)
    000009ce: 	cmpl	%ebx, %ecx
    000009d0: 	jge	.Ltmp33 # Offset: 2512
    000009d6: 	leal	(%rcx,%r14), %edi
    000009da: 	leal	0x2(%rax), %r8d
    000009de: 	addl	%r13d, %ecx
    000009e1: 	movq	-0x68(%rsp), %r11
    000009e6: 	movslq	%edi, %rdi
    000009e9: 	movslq	%ecx, %rcx
    000009ec: 	movss	(%r12,%rdi,4), %xmm0
    000009f2: 	movq	-0x60(%rsp), %rdi
    000009f7: 	addq	%r11, %rdx
    000009fa: 	movss	(%rdx), %xmm6
    000009fe: 	addss	(%r12,%rdi,4), %xmm0
    00000a04: 	leal	(%r8,%r15), %edi
    00000a08: 	movslq	%edi, %rdi
    00000a0b: 	shlq	$0x2, %rdi
    00000a0f: 	leaq	(%r12,%rdi), %r9
    00000a13: 	addss	(%r9), %xmm0
    00000a18: 	addss	(%r12,%rcx,4), %xmm0
    00000a1e: 	addss	%xmm1, %xmm0
    00000a22: 	mulss	%xmm4, %xmm0
    00000a26: 	subss	%xmm6, %xmm0
    00000a2a: 	mulss	%xmm5, %xmm0
    00000a2e: 	addss	%xmm6, %xmm0
    00000a32: 	movss	%xmm0, (%rdx)
    00000a36: 	cmpl	%ebx, %r8d
    00000a39: 	jge	.Ltmp33 # Offset: 2617
    00000a3f: 	leal	(%r8,%r14), %edx
    00000a43: 	leal	0x3(%rax), %ecx
    00000a46: 	addl	%r13d, %r8d
    00000a49: 	addq	%r11, %rdi
    00000a4c: 	movslq	%edx, %rdx
    00000a4f: 	movslq	%r8d, %r8
    00000a52: 	movss	(%rdi), %xmm6
    00000a56: 	movss	(%r12,%rdx,4), %xmm0
    00000a5c: 	leal	(%rcx,%r15), %edx
    00000a60: 	addss	(%rsi), %xmm0
    00000a64: 	movslq	%edx, %rdx
    00000a67: 	shlq	$0x2, %rdx
    00000a6b: 	leaq	(%r12,%rdx), %rsi
    00000a6f: 	addss	(%rsi), %xmm0
    00000a73: 	addss	(%r12,%r8,4), %xmm0
    00000a79: 	addss	%xmm1, %xmm0
    00000a7d: 	mulss	%xmm4, %xmm0
    00000a81: 	subss	%xmm6, %xmm0
    00000a85: 	mulss	%xmm5, %xmm0
    00000a89: 	addss	%xmm6, %xmm0
    00000a8d: 	movss	%xmm0, (%rdi)
    00000a91: 	cmpl	%ebx, %ecx
    00000a93: 	jge	.Ltmp33 # Offset: 2707
    00000a99: 	leal	(%rcx,%r14), %edi
    00000a9d: 	leal	0x4(%rax), %r8d
    00000aa1: 	addl	%r13d, %ecx
    00000aa4: 	addq	%r11, %rdx
    00000aa7: 	movslq	%edi, %rdi
    00000aaa: 	movslq	%ecx, %rcx
    00000aad: 	movss	(%rdx), %xmm6
    00000ab1: 	movss	(%r12,%rdi,4), %xmm0
    00000ab7: 	leal	(%r8,%r15), %edi
    00000abb: 	addss	(%r9), %xmm0
    00000ac0: 	movslq	%edi, %rdi
    00000ac3: 	shlq	$0x2, %rdi
    00000ac7: 	leaq	(%r12,%rdi), %r9
    00000acb: 	addss	(%r9), %xmm0
    00000ad0: 	addss	(%r12,%rcx,4), %xmm0
    00000ad6: 	addss	%xmm1, %xmm0
    00000ada: 	mulss	%xmm4, %xmm0
    00000ade: 	subss	%xmm6, %xmm0
    00000ae2: 	mulss	%xmm5, %xmm0
    00000ae6: 	addss	%xmm6, %xmm0
    00000aea: 	movss	%xmm0, (%rdx)
    00000aee: 	cmpl	%ebx, %r8d
    00000af1: 	jge	.Ltmp33 # Offset: 2801
    00000af7: 	leal	(%r8,%r14), %edx
    00000afb: 	leal	0x5(%rax), %ecx
    00000afe: 	addl	%r13d, %r8d
    00000b01: 	addq	%r11, %rdi
    00000b04: 	movslq	%edx, %rdx
    00000b07: 	movslq	%r8d, %r8
    00000b0a: 	movss	(%rdi), %xmm6
    00000b0e: 	movss	(%r12,%rdx,4), %xmm0
    00000b14: 	leal	(%rcx,%r15), %edx
    00000b18: 	addss	(%rsi), %xmm0
    00000b1c: 	movslq	%edx, %rdx
    00000b1f: 	shlq	$0x2, %rdx
    00000b23: 	leaq	(%r12,%rdx), %rsi
    00000b27: 	addss	(%rsi), %xmm0
    00000b2b: 	addss	(%r12,%r8,4), %xmm0
    00000b31: 	addss	%xmm1, %xmm0
    00000b35: 	mulss	%xmm4, %xmm0
    00000b39: 	subss	%xmm6, %xmm0
    00000b3d: 	mulss	%xmm5, %xmm0
    00000b41: 	addss	%xmm6, %xmm0
    00000b45: 	movss	%xmm0, (%rdi)
    00000b49: 	cmpl	%ebx, %ecx
    00000b4b: 	jge	.Ltmp33 # Offset: 2891
    00000b51: 	leal	(%rcx,%r14), %edi
    00000b55: 	leal	0x6(%rax), %r8d
    00000b59: 	addl	%r13d, %ecx
    00000b5c: 	addq	%r11, %rdx
    00000b5f: 	movslq	%edi, %rdi
    00000b62: 	movslq	%ecx, %rcx
    00000b65: 	movss	(%rdx), %xmm6
    00000b69: 	movss	(%r12,%rdi,4), %xmm0
    00000b6f: 	leal	(%r8,%r15), %edi
    00000b73: 	addss	(%r9), %xmm0
    00000b78: 	movslq	%edi, %rdi
    00000b7b: 	shlq	$0x2, %rdi
    00000b7f: 	leaq	(%r12,%rdi), %r9
    00000b83: 	addss	(%r9), %xmm0
    00000b88: 	addss	(%r12,%rcx,4), %xmm0
    00000b8e: 	addss	%xmm1, %xmm0
    00000b92: 	mulss	%xmm4, %xmm0
    00000b96: 	subss	%xmm6, %xmm0
    00000b9a: 	mulss	%xmm5, %xmm0
    00000b9e: 	addss	%xmm6, %xmm0
    00000ba2: 	movss	%xmm0, (%rdx)
    00000ba6: 	cmpl	%ebx, %r8d
    00000ba9: 	jge	.Ltmp33 # Offset: 2985
    00000baf: 	leal	(%r8,%r14), %edx
    00000bb3: 	addq	%r11, %rdi
    00000bb6: 	movslq	%edx, %rdx
    00000bb9: 	movss	(%rdi), %xmm6
    00000bbd: 	movss	(%r12,%rdx,4), %xmm0
    00000bc3: 	leal	0x7(%rax), %edx
    00000bc6: 	addss	(%rsi), %xmm0
    00000bca: 	leal	(%r15,%rdx), %ecx
    00000bce: 	movslq	%ecx, %rcx
    00000bd1: 	addss	(%r12,%rcx,4), %xmm0
    00000bd7: 	leaq	(,%rcx,4), %rsi
    00000bdf: 	leal	(%r8,%r13), %ecx
    00000be3: 	movslq	%ecx, %rcx
    00000be6: 	addss	(%r12,%rcx,4), %xmm0
    00000bec: 	addss	%xmm1, %xmm0
    00000bf0: 	mulss	%xmm4, %xmm0
    00000bf4: 	subss	%xmm6, %xmm0
    00000bf8: 	mulss	%xmm5, %xmm0
    00000bfc: 	addss	%xmm6, %xmm0
    00000c00: 	movss	%xmm0, (%rdi)
    00000c04: 	cmpl	%ebx, %edx
    00000c06: 	jge	.Ltmp33 # Offset: 3078
    00000c0c: 	leal	(%r14,%rdx), %ecx
    00000c10: 	leal	0x8(%rax,%r15), %eax
    00000c15: 	addq	%r11, %rsi
    00000c18: 	cltq
    00000c1a: 	movslq	%ecx, %rcx
    00000c1d: 	movss	(%rsi), %xmm6
    00000c21: 	movss	(%r12,%rcx,4), %xmm0
    00000c27: 	addss	(%r9), %xmm0
    00000c2c: 	addss	(%r12,%rax,4), %xmm0
    00000c32: 	leal	(%rdx,%r13), %eax
    00000c36: 	cltq
    00000c38: 	addss	(%r12,%rax,4), %xmm0
    00000c3e: 	addss	%xmm1, %xmm0
    00000c42: 	mulss	%xmm4, %xmm0
    00000c46: 	subss	%xmm6, %xmm0
    00000c4a: 	mulss	%xmm5, %xmm0
    00000c4e: 	addss	%xmm6, %xmm0
    00000c52: 	movss	%xmm0, (%rsi)
    00000c56: 	jmp	.Ltmp33 # Offset: 3158
.Ltmp30:
    00000c5b: 	xorl	%edx, %edx
    00000c5d: 	movaps	%xmm3, %xmm5
    00000c60: 	movaps	%xmm2, %xmm4
    00000c63: 	movl	$0x1, %eax
    00000c68: 	jmp	.Ltmp41 # Offset: 3176
.Ltmp35:
    00000c6d: 	xorl	%edi, %edi
    00000c6f: 	jmp	.Ltmp42 # Offset: 3183
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/1
                _ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 13
  State       : disassembled
  Address     : 0x4520
  Size        : 0xaaa
  MaxSize     : 0xab0
  Offset      : 0x4520
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	leal	-0x1(%rdx), %ebx
    0000000d: 	movl	%ecx, -0x44(%rsp)
    00000011: 	movl	%r8d, -0x2c(%rsp)
    00000016: 	movl	%ebx, -0x30(%rsp)
    0000001a: 	cmpl	$0x1, %ebx
    0000001d: 	jle	.Ltmp43 # Offset: 29
    00000023: 	movq	%rdi, %rax
    00000026: 	leal	-0xa(%rcx), %edi
    00000029: 	leal	-0x1(%rcx), %edx
    0000002c: 	movaps	DATAat0x49420(%rip), %xmm7
    00000033: 	movl	%edi, %ebx
    00000035: 	movl	%edi, -0x38(%rsp)
    00000039: 	shrl	$0x4, %edi
    0000003c: 	leal	(%r8,%r8), %r14d
    00000040: 	movl	%edx, -0x34(%rsp)
    00000044: 	movl	%edi, %edx
    00000046: 	leal	-0x1(%rdi), %ecx
    00000049: 	shrl	$0x3, %ebx
    0000004c: 	shll	$0x4, %edx
    0000004f: 	addq	$0x1, %rcx
    00000053: 	movl	%ebx, -0x24(%rsp)
    00000057: 	leal	(%rdi,%rdi), %edi
    0000005a: 	addl	$0x1, %edx
    0000005d: 	shlq	$0x6, %rcx
    00000061: 	movl	%edi, -0x20(%rsp)
    00000065: 	xorl	%r15d, %r15d
    00000068: 	movl	%edx, -0x1c(%rsp)
    0000006c: 	movl	%ebx, %edx
    0000006e: 	pxor	%xmm5, %xmm5
    00000072: 	leal	0x9(,%rbx,8), %ebx
    00000079: 	movl	%ebx, -0x28(%rsp)
    0000007d: 	shlq	$0x3, %rdx
    00000081: 	movss	DATAat0x49420(%rip), %xmm4
    00000089: 	movl	$0x1, -0x48(%rsp)
    00000091: 	movq	%rcx, -0x18(%rsp)
    00000096: 	movq	%rdx, -0x10(%rsp)
    0000009b: 	movl	%r8d, %edx
    0000009e: 	nop # Size: 2
.Ltmp54:
    000000a0: 	addl	$0x1, -0x48(%rsp)
    000000a5: 	cmpl	$0x9, -0x44(%rsp)
    000000aa: 	movl	$0x1, %ecx
    000000af: 	jle	.Ltmp44 # Offset: 175
    000000b5: 	movslq	%edx, %rbx
    000000b8: 	movslq	%r15d, %r10
    000000bb: 	leaq	0x4(,%rbx,4), %r8
    000000c3: 	leaq	0x24(,%r10,4), %rbp
    000000cb: 	movq	%rbx, -0x50(%rsp)
    000000d0: 	movslq	%r14d, %rbx
    000000d3: 	leaq	(%rsi,%r8), %rcx
    000000d7: 	leaq	(%rax,%rbp), %r11
    000000db: 	movq	%rcx, %r9
    000000de: 	leaq	0x1c(%rax,%r8), %rdi
    000000e3: 	leaq	0x3c(%rax,%r8), %r13
    000000e8: 	subq	%r11, %r9
    000000eb: 	leaq	0x24(,%rbx,4), %r12
    000000f3: 	addq	$0x1c, %r9
    000000f7: 	cmpq	$0x38, %r9
    000000fb: 	movq	%rcx, %r9
    000000fe: 	seta	%r11b
    00000102: 	subq	%rdi, %r9
    00000105: 	addq	$0x1c, %r9
    00000109: 	cmpq	$0x38, %r9
    0000010d: 	seta	%r9b
    00000111: 	andl	%r11d, %r9d
    00000114: 	cmpl	$0x7, -0x38(%rsp)
    00000119: 	seta	%r11b
    0000011d: 	andl	%r11d, %r9d
    00000120: 	movq	%rcx, %r11
    00000123: 	subq	%r13, %r11
    00000126: 	addq	$0x1c, %r11
    0000012a: 	cmpq	$0x20, %r11
    0000012e: 	seta	%r11b
    00000132: 	testb	%r11b, %r9b
    00000135: 	je	.Ltmp45 # Offset: 309
    0000013b: 	leaq	(%rax,%r12), %r11
    0000013f: 	movq	%rcx, %r9
    00000142: 	subq	%r11, %r9
    00000145: 	addq	$0x1c, %r9
    00000149: 	cmpq	$0x38, %r9
    0000014d: 	jbe	.Ltmp45 # Offset: 333
    00000153: 	cmpl	$0xf, -0x38(%rsp)
    00000158: 	jbe	.Ltmp46 # Offset: 344
    0000015e: 	leaq	-0x20(%rax,%rbp), %r9
    00000163: 	leaq	-0x20(%rax,%r12), %rbp
    00000168: 	movq	-0x18(%rsp), %r12
    0000016d: 	movaps	%xmm7, %xmm3
    00000170: 	leaq	-0x4(%rax,%r8), %r11
    00000175: 	pxor	%xmm8, %xmm8
    0000017a: 	leaq	0x18(%rsi,%r8), %r8
    0000017f: 	addq	%r9, %r12
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp47:
    00000188: 	movups	0x10(%r11), %xmm6
    0000018d: 	movups	0x20(%r11), %xmm1
    00000192: 	addq	$0x40, %r9
    00000196: 	addq	$0x40, %r11
    0000019a: 	movups	-0x30(%r9), %xmm2
    0000019f: 	movups	-0x10(%r11), %xmm9
    000001a4: 	addq	$0x40, %rbp
    000001a8: 	addq	$0x40, %rcx
    000001ac: 	movaps	%xmm6, %xmm0
    000001af: 	movups	-0x10(%r9), %xmm12
    000001b4: 	movaps	%xmm6, %xmm10
    000001b8: 	addq	$0x40, %rdi
    000001bc: 	movhps	-0x20(%r9), %xmm2
    000001c1: 	movlhps	%xmm1, %xmm0
    000001c4: 	movups	-0x10(%rbp), %xmm13
    000001c9: 	shufps	$0xee, %xmm9, %xmm10
    000001ce: 	addps	%xmm0, %xmm2
    000001d1: 	movaps	%xmm6, %xmm0
    000001d4: 	movups	-0x40(%r11), %xmm11
    000001d9: 	addq	$0x40, %r8
    000001dd: 	shufps	$0xee, %xmm1, %xmm0
    000001e1: 	shufps	$0x4e, %xmm9, %xmm1
    000001e6: 	addps	%xmm0, %xmm2
    000001e9: 	movups	-0x30(%rbp), %xmm0
    000001ed: 	movhps	-0x20(%rbp), %xmm0
    000001f1: 	addps	%xmm0, %xmm2
    000001f4: 	movups	-0x20(%r9), %xmm0
    000001f9: 	shufps	$0x4e, %xmm12, %xmm0
    000001fe: 	addps	%xmm1, %xmm0
    00000201: 	movups	-0x20(%rbp), %xmm1
    00000205: 	addps	%xmm8, %xmm2
    00000209: 	shufps	$0x4e, %xmm13, %xmm1
    0000020e: 	addps	%xmm9, %xmm0
    00000212: 	movups	-0x40(%rdi), %xmm9
    00000217: 	mulps	%xmm7, %xmm2
    0000021a: 	movhps	-0x20(%rdi), %xmm9
    0000021f: 	addps	%xmm1, %xmm0
    00000222: 	movups	-0x30(%r9), %xmm1
    00000227: 	shufps	$0xee, %xmm12, %xmm1
    0000022c: 	addps	%xmm10, %xmm1
    00000230: 	movaps	%xmm11, %xmm10
    00000234: 	movups	-0x40(%rbp), %xmm12
    00000239: 	shufps	$0x4e, %xmm6, %xmm10
    0000023e: 	addps	%xmm8, %xmm0
    00000242: 	addps	%xmm9, %xmm1
    00000246: 	movups	-0x30(%rbp), %xmm9
    0000024b: 	mulps	%xmm7, %xmm0
    0000024e: 	shufps	$0xee, %xmm13, %xmm9
    00000253: 	addps	%xmm9, %xmm1
    00000257: 	movups	-0x40(%r9), %xmm9
    0000025c: 	movlps	%xmm2, -0x30(%rcx)
    00000260: 	addps	%xmm11, %xmm9
    00000264: 	addps	%xmm8, %xmm1
    00000268: 	shufps	$0x4e, %xmm0, %xmm2
    0000026c: 	shufps	$0xee, %xmm0, %xmm0
    00000270: 	movups	%xmm2, -0x20(%rcx)
    00000274: 	movlps	%xmm0, -0x10(%rcx)
    00000278: 	movaps	%xmm9, %xmm6
    0000027c: 	addps	%xmm10, %xmm6
    00000280: 	mulps	%xmm7, %xmm1
    00000283: 	addps	%xmm12, %xmm6
    00000287: 	addps	%xmm8, %xmm6
    0000028b: 	mulps	%xmm7, %xmm6
    0000028e: 	movups	%xmm6, -0x40(%rcx)
    00000292: 	movq	%xmm1, -0x40(%r8)
    00000298: 	movhps	%xmm1, -0x20(%r8)
    0000029d: 	cmpq	%r9, %r12
    000002a0: 	jne	.Ltmp47 # Offset: 672
    000002a6: 	movl	-0x20(%rsp), %edi
    000002aa: 	movl	-0x1c(%rsp), %ecx
.Ltmp57:
    000002ae: 	movl	-0x24(%rsp), %r8d
    000002b3: 	movl	%r8d, %r11d
    000002b6: 	subl	%edi, %r11d
    000002b9: 	cmpl	%edi, %r8d
    000002bc: 	je	.Ltmp48 # Offset: 700
    000002c2: 	movq	-0x50(%rsp), %rbp
    000002c7: 	shlq	$0x3, %rdi
    000002cb: 	xorps	%xmm9, %xmm9
    000002cf: 	movq	DATAat0x49420(%rip), %xmm8
    000002d8: 	leaq	0x1(%r10,%rdi), %r8
    000002dd: 	leal	(%rcx,%r11,8), %ecx
    000002e1: 	addq	%rdi, %rbp
    000002e4: 	leaq	(%rax,%r8,4), %r9
    000002e8: 	leaq	0x1(%rbx,%rdi), %rdi
    000002ed: 	leaq	(,%rbp,4), %r10
    000002f5: 	movq	0x8(%r9), %xmm6
    000002fb: 	leaq	(%rax,%rdi,4), %rdi
    000002ff: 	movq	0x20(%rax,%rbp,4), %xmm2
    00000305: 	leaq	(%rax,%r10), %r8
    00000309: 	movq	0x8(%rdi), %xmm0
    0000030e: 	leaq	0x4(%rsi,%r10), %rbx
    00000313: 	movq	0x8(%r8), %xmm10
    00000319: 	movq	0x10(%r8), %xmm1
    0000031f: 	movq	0x18(%r8), %xmm11
    00000325: 	addps	%xmm10, %xmm6
    00000329: 	addps	%xmm1, %xmm6
    0000032c: 	addps	%xmm0, %xmm6
    0000032f: 	movq	0x10(%r9), %xmm0
    00000335: 	addps	%xmm0, %xmm1
    00000338: 	movq	0x10(%rdi), %xmm0
    0000033d: 	addps	%xmm9, %xmm6
    00000341: 	addps	%xmm11, %xmm1
    00000345: 	mulps	%xmm8, %xmm6
    00000349: 	addps	%xmm0, %xmm1
    0000034c: 	movq	0x18(%r9), %xmm0
    00000352: 	addps	%xmm11, %xmm0
    00000356: 	movq	(%r8), %xmm11
    0000035b: 	addps	%xmm9, %xmm1
    0000035f: 	addps	%xmm0, %xmm2
    00000362: 	movq	0x18(%rdi), %xmm0
    00000367: 	mulps	%xmm8, %xmm1
    0000036b: 	addps	%xmm2, %xmm0
    0000036e: 	movq	(%r9), %xmm2
    00000373: 	addps	%xmm11, %xmm2
    00000377: 	addps	%xmm9, %xmm0
    0000037b: 	addps	%xmm10, %xmm2
    0000037f: 	movq	(%rdi), %xmm10
    00000384: 	movlps	%xmm6, 0x8(%rbx)
    00000388: 	mulps	%xmm8, %xmm0
    0000038c: 	movlps	%xmm1, 0x10(%rbx)
    00000390: 	addps	%xmm10, %xmm2
    00000394: 	addps	%xmm9, %xmm2
    00000398: 	mulps	%xmm8, %xmm2
    0000039c: 	movlps	%xmm2, (%rbx)
    0000039f: 	movlps	%xmm0, 0x1c(%rsi,%r10)
.Ltmp48:
    000003a5: 	leal	0x2(%rdx,%rcx), %r11d
    000003aa: 	leal	0x1(%rcx), %r10d
    000003ae: 	movslq	%r11d, %r11
    000003b1: 	leal	(%rdx,%rcx), %r12d
    000003b5: 	leal	(%rdx,%r10), %ebp
    000003b9: 	leaq	(%rax,%r11,4), %r13
    000003bd: 	movslq	%r12d, %r12
    000003c0: 	leal	0x5(%rcx), %edi
    000003c3: 	movslq	%ebp, %rbp
    000003c6: 	movups	(%r13), %xmm0
    000003cb: 	movq	%r13, -0x50(%rsp)
    000003d0: 	leal	0x6(%rcx), %r9d
    000003d4: 	leal	0x7(%rcx), %r8d
    000003d8: 	leal	0x3(%rdx,%rcx), %r13d
    000003dd: 	movss	(%rax,%rbp,4), %xmm6
    000003e2: 	leal	(%rdx,%r9), %ebx
    000003e6: 	movslq	%r13d, %r13
    000003e9: 	movslq	%ebx, %rbx
    000003ec: 	leal	(%rdx,%r8), %r11d
    000003f0: 	movss	(%rax,%r13,4), %xmm1
    000003f6: 	movq	-0x50(%rsp), %r13
    000003fb: 	movslq	%r11d, %r11
    000003fe: 	movss	(%rax,%rbx,4), %xmm2
    00000403: 	movss	(%r13), %xmm8
    00000409: 	leal	(%r15,%r10), %r13d
    0000040d: 	addl	%r14d, %r10d
    00000410: 	movslq	%r13d, %r13
    00000413: 	movslq	%r10d, %r10
    00000416: 	unpcklps	%xmm1, %xmm8
    0000041a: 	movss	(%rax,%r12,4), %xmm1
    00000420: 	unpcklps	%xmm6, %xmm1
    00000423: 	movlhps	%xmm8, %xmm1
    00000427: 	movups	(%rax,%r13,4), %xmm8
    0000042c: 	leal	0x4(%rdx,%rcx), %r13d
    00000431: 	movslq	%r13d, %r13
    00000434: 	addps	%xmm8, %xmm1
    00000438: 	movups	(%rax,%r10,4), %xmm8
    0000043d: 	leal	(%r15,%rdi), %r10d
    00000441: 	movslq	%r10d, %r10
    00000444: 	addps	%xmm0, %xmm1
    00000447: 	shufps	$0xff, %xmm0, %xmm0
    0000044b: 	addps	%xmm8, %xmm1
    0000044f: 	pxor	%xmm8, %xmm8
    00000454: 	addps	%xmm8, %xmm1
    00000458: 	mulps	%xmm3, %xmm1
    0000045b: 	movss	(%rax,%r13,4), %xmm3
    00000461: 	addss	(%rax,%r10,4), %xmm3
    00000467: 	leal	(%r14,%rdi), %r10d
    0000046b: 	movslq	%r10d, %r10
    0000046e: 	addl	%edx, %edi
    00000470: 	movslq	%edi, %rdi
    00000473: 	addss	%xmm2, %xmm3
    00000477: 	addss	(%rax,%r10,4), %xmm3
    0000047d: 	leal	(%r15,%r9), %r10d
    00000481: 	addl	%r14d, %r9d
    00000484: 	movslq	%r9d, %r9
    00000487: 	movslq	%r10d, %r10
    0000048a: 	addss	(%rax,%r10,4), %xmm0
    00000490: 	addss	(%rax,%r11,4), %xmm0
    00000496: 	addss	(%rax,%r9,4), %xmm0
    0000049c: 	leal	(%r15,%r8), %r9d
    000004a0: 	addl	%r14d, %r8d
    000004a3: 	movslq	%r9d, %r9
    000004a6: 	movslq	%r8d, %r8
    000004a9: 	addss	%xmm5, %xmm3
    000004ad: 	addss	(%rax,%r9,4), %xmm2
    000004b3: 	leal	0x8(%rdx,%rcx), %r9d
    000004b8: 	movslq	%r9d, %r9
    000004bb: 	addss	%xmm5, %xmm0
    000004bf: 	addss	(%rax,%r9,4), %xmm2
    000004c5: 	leal	-0x1(%rdx,%rcx), %r9d
    000004ca: 	mulss	%xmm4, %xmm3
    000004ce: 	addss	(%rax,%r8,4), %xmm2
    000004d4: 	leal	(%r15,%rcx), %r8d
    000004d8: 	movslq	%r9d, %r9
    000004db: 	addl	%r14d, %ecx
    000004de: 	movss	(%rax,%r9,4), %xmm8
    000004e4: 	mulss	%xmm4, %xmm0
    000004e8: 	movslq	%r8d, %r8
    000004eb: 	movslq	%ecx, %rcx
    000004ee: 	addss	(%rax,%r8,4), %xmm8
    000004f4: 	addss	%xmm5, %xmm2
    000004f8: 	addss	%xmm8, %xmm6
    000004fd: 	addss	(%rax,%rcx,4), %xmm6
    00000502: 	mulss	%xmm4, %xmm2
    00000506: 	addss	%xmm5, %xmm6
    0000050a: 	mulss	%xmm4, %xmm6
    0000050e: 	movss	%xmm6, (%rsi,%r12,4)
    00000514: 	movups	%xmm1, (%rsi,%rbp,4)
    00000518: 	movss	%xmm3, (%rsi,%rdi,4)
    0000051d: 	movss	%xmm0, (%rsi,%rbx,4)
    00000522: 	movss	%xmm2, (%rsi,%r11,4)
.Ltmp56:
    00000528: 	movl	-0x28(%rsp), %ecx
.Ltmp44:
    0000052c: 	cmpl	-0x34(%rsp), %ecx
    00000530: 	jge	.Ltmp49 # Offset: 1328
    00000536: 	movslq	%ecx, %r8
    00000539: 	movslq	%edx, %rdi
    0000053c: 	movslq	%r14d, %rbp
    0000053f: 	movl	-0x44(%rsp), %r9d
    00000544: 	leaq	(%rdi,%r8), %rbx
    00000548: 	movslq	%r15d, %rdi
    0000054b: 	addq	%r8, %rdi
    0000054e: 	addq	%rbp, %r8
    00000551: 	subl	%ecx, %r9d
    00000554: 	movq	%rbx, -0x50(%rsp)
    00000559: 	movq	%r8, -0x40(%rsp)
    0000055e: 	leaq	0x4(,%r8,4), %rbp
    00000566: 	movq	%rsi, %r8
    00000569: 	leaq	(,%rbx,4), %r11
    00000571: 	subq	%rax, %r8
    00000574: 	leaq	(%rsi,%r11), %r10
    00000578: 	leaq	0x4(,%rdi,4), %rbx
    00000580: 	cmpq	$0x10, %r8
    00000584: 	leaq	(%rax,%rbx), %r13
    00000588: 	seta	%r8b
    0000058c: 	cmpl	$0x2, %r9d
    00000590: 	setne	%r12b
    00000594: 	andl	%r12d, %r8d
    00000597: 	movq	%r10, %r12
    0000059a: 	subq	%r13, %r12
    0000059d: 	cmpq	$0x8, %r12
    000005a1: 	seta	%r12b
    000005a5: 	testb	%r12b, %r8b
    000005a8: 	je	.Ltmp50 # Offset: 1448
    000005ae: 	leaq	(%rax,%rbp), %r12
    000005b2: 	movq	%r10, %r8
    000005b5: 	subq	%r12, %r8
    000005b8: 	cmpq	$0x8, %r8
    000005bc: 	jbe	.Ltmp50 # Offset: 1468
    000005c2: 	leal	-0x2(%r9), %r12d
    000005c6: 	leal	-0x1(%r9), %r8d
    000005ca: 	cmpl	$0x2, %r12d
    000005ce: 	jbe	.Ltmp51 # Offset: 1486
    000005d4: 	leaq	-0x4(%rax,%r11), %r12
    000005d9: 	leaq	0x4(%rax,%r11), %r13
    000005de: 	pxor	%xmm1, %xmm1
    000005e2: 	movups	(%r12), %xmm3
    000005e7: 	movups	(%r13), %xmm0
    000005ec: 	leaq	-0x4(%rax,%rbx), %rbx
    000005f1: 	leaq	-0x4(%rax,%rbp), %r11
    000005f6: 	movl	%r8d, %ebp
    000005f9: 	addps	%xmm3, %xmm0
    000005fc: 	movups	(%rbx), %xmm3
    000005ff: 	shrl	$0x2, %ebp
    00000602: 	addps	%xmm3, %xmm0
    00000605: 	movups	(%r11), %xmm3
    00000609: 	addps	%xmm3, %xmm0
    0000060c: 	addps	%xmm1, %xmm0
    0000060f: 	mulps	%xmm7, %xmm0
    00000612: 	movups	%xmm0, (%r10)
    00000616: 	cmpl	$0x1, %ebp
    00000619: 	je	.Ltmp52 # Offset: 1561
    0000061b: 	movups	0x10(%r12), %xmm2
    00000621: 	movups	0x10(%r13), %xmm0
    00000626: 	addps	%xmm2, %xmm0
    00000629: 	movups	0x10(%rbx), %xmm2
    0000062d: 	addps	%xmm2, %xmm0
    00000630: 	movups	0x10(%r11), %xmm2
    00000635: 	addps	%xmm2, %xmm0
    00000638: 	addps	%xmm1, %xmm0
    0000063b: 	mulps	%xmm7, %xmm0
    0000063e: 	movups	%xmm0, 0x10(%r10)
.Ltmp52:
    00000643: 	movl	%r8d, %r10d
    00000646: 	andl	$-0x4, %r10d
    0000064a: 	addl	%r10d, %ecx
    0000064d: 	cmpl	%r8d, %r10d
    00000650: 	je	.Ltmp49 # Offset: 1616
    00000656: 	subl	%r10d, %r9d
    00000659: 	leal	-0x1(%r9), %r8d
    0000065d: 	cmpl	$0x2, %r9d
    00000661: 	je	.Ltmp53 # Offset: 1633
.Ltmp58:
    00000663: 	movl	%r10d, %r9d
    00000666: 	movq	-0x50(%rsp), %r10
    0000066b: 	addq	%r9, %rdi
    0000066e: 	addq	%r9, %r10
    00000671: 	addq	-0x40(%rsp), %r9
    00000676: 	leaq	(,%r10,4), %r11
    0000067e: 	movq	-0x4(%rax,%r11), %xmm1
    00000685: 	movq	0x4(%rax,%r11), %xmm0
    0000068c: 	addps	%xmm1, %xmm0
    0000068f: 	movq	(%rax,%rdi,4), %xmm1
    00000694: 	movl	%r8d, %edi
    00000697: 	andl	$-0x2, %edi
    0000069a: 	addl	%edi, %ecx
    0000069c: 	addps	%xmm1, %xmm0
    0000069f: 	movq	(%rax,%r9,4), %xmm1
    000006a5: 	addps	%xmm1, %xmm0
    000006a8: 	xorps	%xmm1, %xmm1
    000006ab: 	addps	%xmm1, %xmm0
    000006ae: 	movq	DATAat0x49420(%rip), %xmm1
    000006b6: 	mulps	%xmm1, %xmm0
    000006b9: 	movlps	%xmm0, (%rsi,%r10,4)
    000006be: 	cmpl	%r8d, %edi
    000006c1: 	je	.Ltmp49 # Offset: 1729
.Ltmp53:
    000006c3: 	leal	(%r15,%rcx), %edi
    000006c7: 	leal	0x1(%rcx,%rdx), %r9d
    000006cc: 	pxor	%xmm2, %xmm2
    000006d0: 	movss	DATAat0x49420(%rip), %xmm1
    000006d8: 	leal	-0x1(%rcx,%rdx), %r8d
    000006dd: 	movslq	%edi, %rdi
    000006e0: 	movslq	%r9d, %r9
    000006e3: 	movslq	%r8d, %r8
    000006e6: 	movss	(%rax,%r9,4), %xmm0
    000006ec: 	addss	(%rax,%r8,4), %xmm0
    000006f2: 	addss	(%rax,%rdi,4), %xmm0
    000006f7: 	leal	(%rdx,%rcx), %edi
    000006fa: 	addl	%r14d, %ecx
    000006fd: 	movslq	%ecx, %rcx
    00000700: 	movslq	%edi, %rdi
    00000703: 	addss	(%rax,%rcx,4), %xmm0
    00000708: 	addss	%xmm2, %xmm0
    0000070c: 	mulss	%xmm1, %xmm0
    00000710: 	movss	%xmm0, (%rsi,%rdi,4)
.Ltmp49:
    00000715: 	movl	-0x2c(%rsp), %ebx
    00000719: 	movl	-0x48(%rsp), %edi
    0000071d: 	addl	%ebx, %r15d
    00000720: 	addl	%ebx, %edx
    00000722: 	addl	%ebx, %r14d
    00000725: 	cmpl	%edi, -0x30(%rsp)
    00000729: 	jne	.Ltmp54 # Offset: 1833
.Ltmp43:
    0000072f: 	popq	%rbx
    00000730: 	popq	%rbp
    00000731: 	popq	%r12
    00000733: 	popq	%r13
    00000735: 	popq	%r14
    00000737: 	popq	%r15
    00000739: 	retq # Offset: 1849
    0000073a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp45:
    00000740: 	subq	$0x4, %r8
    00000744: 	addq	-0x10(%rsp), %r10
    00000749: 	leaq	-0x24(%rax,%rbp), %rdi
    0000074e: 	leaq	(%rax,%r8), %rcx
    00000752: 	leaq	-0x24(%rax,%r12), %r9
    00000757: 	pxor	%xmm8, %xmm8
    0000075c: 	addq	%rsi, %r8
    0000075f: 	leaq	0x20(%rax,%r10,4), %r10
    00000764: 	nopl	(%rax) # Size: 4
.Ltmp55:
    00000768: 	movss	0x10(%rcx), %xmm1
    0000076d: 	movups	0xc(%rcx), %xmm0
    00000771: 	addq	$0x20, %rdi
    00000775: 	addq	$0x20, %rcx
    00000779: 	movss	-0x14(%rcx), %xmm3
    0000077e: 	movss	-0x18(%rcx), %xmm6
    00000783: 	addq	$0x20, %r9
    00000787: 	addq	$0x20, %r8
    0000078b: 	movss	-0x20(%rcx), %xmm9
    00000791: 	addss	-0x1c(%rdi), %xmm9
    00000797: 	unpcklps	%xmm1, %xmm3
    0000079a: 	movss	-0x1c(%rcx), %xmm1
    0000079f: 	movss	-0x4(%rcx), %xmm2
    000007a4: 	unpcklps	%xmm6, %xmm1
    000007a7: 	addss	%xmm9, %xmm6
    000007ac: 	addss	-0x1c(%r9), %xmm6
    000007b2: 	movlhps	%xmm3, %xmm1
    000007b5: 	movups	-0x18(%rdi), %xmm3
    000007b9: 	addps	%xmm3, %xmm1
    000007bc: 	movups	-0x18(%r9), %xmm3
    000007c1: 	addss	%xmm5, %xmm6
    000007c5: 	addps	%xmm0, %xmm1
    000007c8: 	shufps	$0xff, %xmm0, %xmm0
    000007cc: 	addss	-0x4(%rdi), %xmm0
    000007d1: 	mulss	%xmm4, %xmm6
    000007d5: 	addss	(%rcx), %xmm0
    000007d9: 	addss	-0x4(%r9), %xmm0
    000007df: 	addps	%xmm3, %xmm1
    000007e2: 	movss	-0xc(%rcx), %xmm3
    000007e7: 	addss	-0x8(%rdi), %xmm3
    000007ec: 	addss	%xmm5, %xmm0
    000007f0: 	addss	%xmm2, %xmm3
    000007f4: 	addss	(%rdi), %xmm2
    000007f8: 	addss	-0x8(%r9), %xmm3
    000007fe: 	addss	0x4(%rcx), %xmm2
    00000803: 	mulss	%xmm4, %xmm0
    00000807: 	addss	(%r9), %xmm2
    0000080c: 	addps	%xmm8, %xmm1
    00000810: 	movss	%xmm6, -0x1c(%r8)
    00000816: 	addss	%xmm5, %xmm3
    0000081a: 	addss	%xmm5, %xmm2
    0000081e: 	mulps	%xmm7, %xmm1
    00000821: 	movss	%xmm0, -0x4(%r8)
    00000827: 	mulss	%xmm4, %xmm3
    0000082b: 	mulss	%xmm4, %xmm2
    0000082f: 	movups	%xmm1, -0x18(%r8)
    00000834: 	movss	%xmm3, -0x8(%r8)
    0000083a: 	movss	%xmm2, (%r8)
    0000083f: 	cmpq	%r10, %rdi
    00000842: 	jne	.Ltmp55 # Offset: 2114
    00000848: 	jmp	.Ltmp56 # Offset: 2120
    0000084d: 	nopl	(%rax) # Size: 3
.Ltmp50:
    00000850: 	leal	0x1(%rcx), %edi
    00000853: 	leal	-0x1(%rcx,%rdx), %r8d
    00000858: 	pxor	%xmm2, %xmm2
    0000085c: 	movss	DATAat0x49420(%rip), %xmm1
    00000864: 	leal	(%rdi,%rdx), %r11d
    00000868: 	movslq	%r8d, %r8
    0000086b: 	movl	-0x34(%rsp), %r12d
    00000870: 	movslq	%r11d, %r11
    00000873: 	movss	(%rax,%r8,4), %xmm0
    00000879: 	leaq	(%rax,%r11,4), %r9
    0000087d: 	addss	(%r9), %xmm0
    00000882: 	addss	-0x4(%rax,%rbx), %xmm0
    00000888: 	addss	-0x4(%rax,%rbp), %xmm0
    0000088e: 	addss	%xmm2, %xmm0
    00000892: 	mulss	%xmm1, %xmm0
    00000896: 	movss	%xmm0, (%r10)
    0000089b: 	cmpl	%r12d, %edi
    0000089e: 	jge	.Ltmp49 # Offset: 2206
    000008a4: 	leal	0x2(%rcx), %r8d
    000008a8: 	movq	-0x50(%rsp), %r13
    000008ad: 	leal	(%rdi,%r15), %ebp
    000008b1: 	addl	%r14d, %edi
    000008b4: 	leal	(%r8,%rdx), %ebx
    000008b8: 	movslq	%ebp, %rbp
    000008bb: 	movslq	%edi, %rdi
    000008be: 	movslq	%ebx, %rbx
    000008c1: 	movss	(%rax,%r13,4), %xmm0
    000008c7: 	movl	%r12d, %r13d
    000008ca: 	leaq	(%rax,%rbx,4), %r10
    000008ce: 	addss	(%r10), %xmm0
    000008d3: 	addss	(%rax,%rbp,4), %xmm0
    000008d8: 	addss	(%rax,%rdi,4), %xmm0
    000008dd: 	addss	%xmm2, %xmm0
    000008e1: 	mulss	%xmm1, %xmm0
    000008e5: 	movss	%xmm0, (%rsi,%r11,4)
    000008eb: 	cmpl	%r12d, %r8d
    000008ee: 	jge	.Ltmp49 # Offset: 2286
    000008f4: 	leal	0x3(%rcx), %edi
    000008f7: 	leal	(%r8,%r15), %r12d
    000008fb: 	addl	%r14d, %r8d
    000008fe: 	movss	(%r9), %xmm0
    00000903: 	leal	(%rdi,%rdx), %ebp
    00000906: 	movslq	%r12d, %r12
    00000909: 	movslq	%r8d, %r8
    0000090c: 	movslq	%ebp, %rbp
    0000090f: 	leaq	(%rax,%rbp,4), %r11
    00000913: 	addss	(%r11), %xmm0
    00000918: 	addss	(%rax,%r12,4), %xmm0
    0000091e: 	addss	(%rax,%r8,4), %xmm0
    00000924: 	addss	%xmm2, %xmm0
    00000928: 	mulss	%xmm1, %xmm0
    0000092c: 	movss	%xmm0, (%rsi,%rbx,4)
    00000931: 	cmpl	%r13d, %edi
    00000934: 	jge	.Ltmp49 # Offset: 2356
    0000093a: 	leal	0x4(%rcx), %r8d
    0000093e: 	leal	(%rdi,%r15), %r12d
    00000942: 	addl	%r14d, %edi
    00000945: 	movss	(%r10), %xmm0
    0000094a: 	leal	(%r8,%rdx), %ebx
    0000094e: 	movslq	%r12d, %r12
    00000951: 	movslq	%edi, %rdi
    00000954: 	movslq	%ebx, %rbx
    00000957: 	leaq	(%rax,%rbx,4), %r9
    0000095b: 	addss	(%r9), %xmm0
    00000960: 	addss	(%rax,%r12,4), %xmm0
    00000966: 	addss	(%rax,%rdi,4), %xmm0
    0000096b: 	addss	%xmm2, %xmm0
    0000096f: 	mulss	%xmm1, %xmm0
    00000973: 	movss	%xmm0, (%rsi,%rbp,4)
    00000978: 	cmpl	%r13d, %r8d
    0000097b: 	jge	.Ltmp49 # Offset: 2427
    00000981: 	leal	0x5(%rcx), %edi
    00000984: 	leal	(%r8,%r15), %r12d
    00000988: 	addl	%r14d, %r8d
    0000098b: 	movss	(%r11), %xmm0
    00000990: 	leal	(%rdi,%rdx), %r10d
    00000994: 	movslq	%r12d, %r12
    00000997: 	movslq	%r8d, %r8
    0000099a: 	movslq	%r10d, %r10
    0000099d: 	leaq	(%rax,%r10,4), %rbp
    000009a1: 	addss	(%rbp), %xmm0
    000009a6: 	addss	(%rax,%r12,4), %xmm0
    000009ac: 	addss	(%rax,%r8,4), %xmm0
    000009b2: 	addss	%xmm2, %xmm0
    000009b6: 	mulss	%xmm1, %xmm0
    000009ba: 	movss	%xmm0, (%rsi,%rbx,4)
    000009bf: 	cmpl	%r13d, %edi
    000009c2: 	jge	.Ltmp49 # Offset: 2498
    000009c8: 	leal	0x6(%rcx), %r8d
    000009cc: 	leal	(%rdi,%r15), %ebx
    000009d0: 	addl	%r14d, %edi
    000009d3: 	movss	(%r9), %xmm0
    000009d8: 	leal	(%r8,%rdx), %r11d
    000009dc: 	movslq	%ebx, %rbx
    000009df: 	movslq	%edi, %rdi
    000009e2: 	movslq	%r11d, %r11
    000009e5: 	leaq	(%rax,%r11,4), %r12
    000009e9: 	addss	(%r12), %xmm0
    000009ef: 	addss	(%rax,%rbx,4), %xmm0
    000009f4: 	addss	(%rax,%rdi,4), %xmm0
    000009f9: 	addss	%xmm2, %xmm0
    000009fd: 	mulss	%xmm1, %xmm0
    00000a01: 	movss	%xmm0, (%rsi,%r10,4)
    00000a07: 	cmpl	%r13d, %r8d
    00000a0a: 	jge	.Ltmp49 # Offset: 2570
    00000a10: 	leal	0x7(%rcx), %edi
    00000a13: 	leal	(%r8,%r15), %r10d
    00000a17: 	addl	%r14d, %r8d
    00000a1a: 	leal	(%rdx,%rdi), %r9d
    00000a1e: 	movslq	%r10d, %r10
    00000a21: 	movslq	%r8d, %r8
    00000a24: 	movslq	%r9d, %r9
    00000a27: 	movss	(%rax,%r9,4), %xmm0
    00000a2d: 	addss	(%rbp), %xmm0
    00000a32: 	addss	(%rax,%r10,4), %xmm0
    00000a38: 	addss	(%rax,%r8,4), %xmm0
    00000a3e: 	addss	%xmm2, %xmm0
    00000a42: 	mulss	%xmm1, %xmm0
    00000a46: 	movss	%xmm0, (%rsi,%r11,4)
    00000a4c: 	cmpl	%r13d, %edi
    00000a4f: 	jge	.Ltmp49 # Offset: 2639
    00000a55: 	leal	0x8(%rcx,%rdx), %ecx
    00000a59: 	leal	(%r15,%rdi), %r8d
    00000a5d: 	movslq	%ecx, %rcx
    00000a60: 	movslq	%r8d, %r8
    00000a63: 	movss	(%rax,%rcx,4), %xmm0
    00000a68: 	leal	(%rdi,%r14), %ecx
    00000a6c: 	addss	(%r12), %xmm0
    00000a72: 	movslq	%ecx, %rcx
    00000a75: 	addss	(%rax,%r8,4), %xmm0
    00000a7b: 	addss	(%rax,%rcx,4), %xmm0
    00000a80: 	addss	%xmm2, %xmm0
    00000a84: 	mulss	%xmm1, %xmm0
    00000a88: 	movss	%xmm0, (%rsi,%r9,4)
    00000a8e: 	jmp	.Ltmp49 # Offset: 2702
.Ltmp46:
    00000a93: 	xorl	%edi, %edi
    00000a95: 	movl	$0x1, %ecx
    00000a9a: 	movaps	%xmm7, %xmm3
    00000a9d: 	jmp	.Ltmp57 # Offset: 2717
.Ltmp51:
    00000aa2: 	xorl	%r10d, %r10d
    00000aa5: 	jmp	.Ltmp58 # Offset: 2725
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 14
  State       : disassembled
  Address     : 0x4fd0
  Size        : 0x603
  MaxSize     : 0x610
  Offset      : 0x4fd0
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x38(%rsp)
    00000012: 	movl	%ecx, -0x24(%rsp)
    00000016: 	movl	%r8d, -0x20(%rsp)
    0000001b: 	movl	%eax, -0x28(%rsp)
    0000001f: 	cmpl	$0x1, %eax
    00000022: 	jle	.Ltmp59 # Offset: 34
    00000028: 	movl	%ecx, %eax
    0000002a: 	leal	-0x1(%rcx), %ebx
    0000002d: 	movl	$0x1, -0x40(%rsp)
    00000035: 	movq	%rdi, %rbp
    00000038: 	subl	$0xa, %eax
    0000003b: 	movl	%ebx, -0x3c(%rsp)
    0000003f: 	movl	%r8d, %r14d
    00000042: 	leal	(%r8,%r8), %r12d
    00000046: 	shrl	$0x3, %eax
    00000049: 	movl	%eax, %edx
    0000004b: 	leal	0x9(,%rax,8), %eax
    00000052: 	movl	%eax, -0x1c(%rsp)
    00000056: 	leaq	0x40(%rsi), %rax
    0000005a: 	leaq	(,%rdx,8), %rbx
    00000062: 	movq	%rax, -0x10(%rsp)
    00000067: 	movq	%rbx, -0x18(%rsp)
    0000006c: 	xorl	%ebx, %ebx
    0000006e: 	nop # Size: 2
.Ltmp63:
    00000070: 	addl	$0x1, -0x40(%rsp)
    00000075: 	cmpl	$0x9, -0x24(%rsp)
    0000007a: 	movl	$0x1, %edx
    0000007f: 	jle	.Ltmp60 # Offset: 127
    00000085: 	movq	-0x38(%rsp), %rsi
    0000008a: 	movslq	%r14d, %rax
    0000008d: 	movslq	%ebx, %rdx
    00000090: 	movl	%ebx, -0x30(%rsp)
    00000094: 	leaq	(,%rax,8), %rdi
    0000009c: 	movl	%r14d, -0x2c(%rsp)
    000000a1: 	leaq	(%rbp,%rdx,8), %r11
    000000a6: 	addq	-0x18(%rsp), %rax
    000000ab: 	leaq	(%rsi,%rdi), %r9
    000000af: 	movq	-0x10(%rsp), %rsi
    000000b4: 	movslq	%r12d, %rdx
    000000b7: 	addq	%rbp, %rdi
    000000ba: 	leaq	(%rbp,%rdx,8), %r10
    000000bf: 	leaq	(%rsi,%rax,8), %r15
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp61:
    000000c8: 	movq	0x10(%rdi), %r13
    000000cc: 	movq	0x18(%r11), %r14
    000000d0: 	movq	0x20(%rdi), %rsi
    000000d4: 	movq	0x18(%rdi), %rbx
    000000d8: 	addq	%r13, %r14
    000000db: 	movq	0x28(%rdi), %rcx
    000000df: 	movq	0x30(%rdi), %rdx
    000000e3: 	addq	%rsi, %r14
    000000e6: 	addq	0x18(%r10), %r14
    000000ea: 	movq	0x38(%rdi), %rax
    000000ee: 	leaq	0x5(%r14), %r8
    000000f2: 	addq	$0x2, %r14
    000000f6: 	movdqu	0x18(%r9), %xmm5
    000000fc: 	movdqu	0x28(%r9), %xmm7
    00000102: 	cmovnsq	%r14, %r8
    00000106: 	movq	0x18(%r9), %r14
    0000010a: 	sarq	$0x2, %r8
    0000010e: 	subq	%r14, %r8
    00000111: 	movq	0x20(%r11), %r14
    00000115: 	imulq	$0x71, %r8, %r8
    00000119: 	addq	%rbx, %r14
    0000011c: 	addq	%rcx, %r14
    0000011f: 	addq	0x20(%r10), %r14
    00000123: 	sarq	$0x6, %r8
    00000127: 	movq	%r8, %xmm2
    0000012c: 	leaq	0x5(%r14), %r8
    00000130: 	addq	$0x2, %r14
    00000134: 	cmovsq	%r8, %r14
    00000138: 	addq	0x28(%r11), %rsi
    0000013c: 	addq	%rdx, %rsi
    0000013f: 	addq	0x28(%r10), %rsi
    00000143: 	movq	%r14, %r8
    00000146: 	movq	0x20(%r9), %r14
    0000014a: 	sarq	$0x2, %r8
    0000014e: 	subq	%r14, %r8
    00000151: 	imulq	$0x71, %r8, %r14
    00000155: 	leaq	0x5(%rsi), %r8
    00000159: 	sarq	$0x6, %r14
    0000015d: 	addq	$0x2, %rsi
    00000161: 	cmovnsq	%rsi, %r8
    00000165: 	movq	0x28(%r9), %rsi
    00000169: 	addq	0x30(%r11), %rcx
    0000016d: 	movq	%r14, %xmm4
    00000172: 	addq	%rax, %rcx
    00000175: 	punpcklqdq	%xmm4, %xmm2
    00000179: 	addq	0x30(%r10), %rcx
    0000017d: 	sarq	$0x2, %r8
    00000181: 	paddq	%xmm5, %xmm2
    00000185: 	movdqu	0x38(%r9), %xmm5
    0000018b: 	subq	%rsi, %r8
    0000018e: 	leaq	0x5(%rcx), %rsi
    00000192: 	imulq	$0x71, %r8, %r8
    00000196: 	sarq	$0x6, %r8
    0000019a: 	addq	$0x2, %rcx
    0000019e: 	cmovsq	%rsi, %rcx
    000001a2: 	movq	0x30(%r9), %rsi
    000001a6: 	addq	0x38(%r11), %rdx
    000001aa: 	movq	%r8, %xmm1
    000001af: 	addq	0x40(%rdi), %rdx
    000001b3: 	addq	0x38(%r10), %rdx
    000001b7: 	sarq	$0x2, %rcx
    000001bb: 	subq	%rsi, %rcx
    000001be: 	imulq	$0x71, %rcx, %rcx
    000001c2: 	sarq	$0x6, %rcx
    000001c6: 	movq	%rcx, %xmm6
    000001cb: 	leaq	0x5(%rdx), %rcx
    000001cf: 	addq	$0x2, %rdx
    000001d3: 	cmovsq	%rcx, %rdx
    000001d7: 	movq	0x38(%r9), %rcx
    000001db: 	addq	0x40(%r11), %rax
    000001df: 	punpcklqdq	%xmm6, %xmm1
    000001e3: 	addq	0x48(%rdi), %rax
    000001e7: 	paddq	%xmm7, %xmm1
    000001eb: 	addq	0x40(%r10), %rax
    000001ef: 	sarq	$0x2, %rdx
    000001f3: 	subq	%rcx, %rdx
    000001f6: 	imulq	$0x71, %rdx, %rdx
    000001fa: 	sarq	$0x6, %rdx
    000001fe: 	movq	%rdx, %xmm0
    00000203: 	leaq	0x5(%rax), %rdx
    00000207: 	addq	$0x2, %rax
    0000020b: 	cmovsq	%rdx, %rax
    0000020f: 	movq	0x40(%r9), %rdx
    00000213: 	sarq	$0x2, %rax
    00000217: 	subq	%rdx, %rax
    0000021a: 	movq	(%rdi), %rdx
    0000021d: 	addq	0x8(%r11), %rdx
    00000221: 	imulq	$0x71, %rax, %rax
    00000225: 	addq	%r13, %rdx
    00000228: 	addq	0x8(%r10), %rdx
    0000022c: 	sarq	$0x6, %rax
    00000230: 	movq	%rax, %xmm4
    00000235: 	leaq	0x5(%rdx), %rax
    00000239: 	addq	$0x2, %rdx
    0000023d: 	cmovnsq	%rdx, %rax
    00000241: 	movq	0x8(%r9), %rdx
    00000245: 	movdqu	0x8(%r9), %xmm7
    0000024b: 	punpcklqdq	%xmm4, %xmm0
    0000024f: 	paddq	%xmm5, %xmm0
    00000253: 	sarq	$0x2, %rax
    00000257: 	subq	%rdx, %rax
    0000025a: 	movq	0x8(%rdi), %rdx
    0000025e: 	addq	0x10(%r11), %rdx
    00000262: 	imulq	$0x71, %rax, %rax
    00000266: 	addq	%rbx, %rdx
    00000269: 	addq	0x10(%r10), %rdx
    0000026d: 	movups	%xmm2, 0x18(%r9)
    00000272: 	movups	%xmm1, 0x28(%r9)
    00000277: 	movups	%xmm0, 0x38(%r9)
    0000027c: 	sarq	$0x6, %rax
    00000280: 	movq	%rax, %xmm3
    00000285: 	leaq	0x5(%rdx), %rax
    00000289: 	addq	$0x2, %rdx
    0000028d: 	cmovnsq	%rdx, %rax
    00000291: 	movq	0x10(%r9), %rdx
    00000295: 	addq	$0x40, %r9
    00000299: 	addq	$0x40, %r11
    0000029d: 	addq	$0x40, %rdi
    000002a1: 	addq	$0x40, %r10
    000002a5: 	sarq	$0x2, %rax
    000002a9: 	subq	%rdx, %rax
    000002ac: 	imulq	$0x71, %rax, %rax
    000002b0: 	sarq	$0x6, %rax
    000002b4: 	movq	%rax, %xmm6
    000002b9: 	punpcklqdq	%xmm6, %xmm3
    000002bd: 	paddq	%xmm7, %xmm3
    000002c1: 	movups	%xmm3, -0x38(%r9)
    000002c6: 	cmpq	%r15, %r9
    000002c9: 	jne	.Ltmp61 # Offset: 713
    000002cf: 	movl	-0x30(%rsp), %ebx
    000002d3: 	movl	-0x2c(%rsp), %r14d
    000002d8: 	movl	-0x1c(%rsp), %edx
.Ltmp60:
    000002dc: 	cmpl	-0x3c(%rsp), %edx
    000002e0: 	jge	.Ltmp62 # Offset: 736
    000002e6: 	leal	0x1(%rdx), %edi
    000002e9: 	leal	(%rbx,%rdx), %eax
    000002ec: 	movq	-0x38(%rsp), %r15
    000002f1: 	movl	-0x3c(%rsp), %r11d
    000002f6: 	leal	-0x1(%rdx,%r14), %ecx
    000002fb: 	cltq
    000002fd: 	leal	(%r14,%rdx), %r8d
    00000301: 	movslq	%ecx, %rcx
    00000304: 	movslq	%r8d, %r8
    00000307: 	movq	(%rbp,%rcx,8), %rsi
    0000030c: 	leal	(%r14,%rdi), %ecx
    00000310: 	addq	(%rbp,%rax,8), %rsi
    00000315: 	leal	(%r12,%rdx), %eax
    00000319: 	movslq	%ecx, %rcx
    0000031c: 	cltq
    0000031e: 	leaq	(%r15,%r8,8), %r10
    00000322: 	shlq	$0x3, %rcx
    00000326: 	leaq	(%rbp,%rcx), %r9
    0000032b: 	addq	(%r9), %rsi
    0000032e: 	addq	(%rbp,%rax,8), %rsi
    00000333: 	leaq	0x5(%rsi), %rax
    00000337: 	addq	$0x2, %rsi
    0000033b: 	cmovnsq	%rsi, %rax
    0000033f: 	sarq	$0x2, %rax
    00000343: 	subq	(%r10), %rax
    00000346: 	imulq	$0x71, %rax, %rax
    0000034a: 	sarq	$0x6, %rax
    0000034e: 	addq	(%r10), %rax
    00000351: 	movq	%rax, (%r10)
    00000354: 	cmpl	%edi, %r11d
    00000357: 	jle	.Ltmp62 # Offset: 855
    0000035d: 	leal	(%rbx,%rdi), %esi
    00000360: 	movq	(%rbp,%r8,8), %rax
    00000365: 	leal	0x2(%rdx), %r8d
    00000369: 	addl	%r12d, %edi
    0000036c: 	movslq	%esi, %rsi
    0000036f: 	movslq	%edi, %rdi
    00000372: 	addq	%r15, %rcx
    00000375: 	addq	(%rbp,%rsi,8), %rax
    0000037a: 	leal	(%r14,%r8), %esi
    0000037e: 	movslq	%esi, %rsi
    00000381: 	shlq	$0x3, %rsi
    00000385: 	leaq	(%rbp,%rsi), %r10
    0000038a: 	addq	(%r10), %rax
    0000038d: 	addq	(%rbp,%rdi,8), %rax
    00000392: 	leaq	0x5(%rax), %rdi
    00000396: 	addq	$0x2, %rax
    0000039a: 	cmovsq	%rdi, %rax
    0000039e: 	sarq	$0x2, %rax
    000003a2: 	subq	(%rcx), %rax
    000003a5: 	imulq	$0x71, %rax, %rax
    000003a9: 	sarq	$0x6, %rax
    000003ad: 	addq	(%rcx), %rax
    000003b0: 	movq	%rax, (%rcx)
    000003b3: 	cmpl	%r8d, %r11d
    000003b6: 	jle	.Ltmp62 # Offset: 950
    000003bc: 	leal	(%rbx,%r8), %ecx
    000003c0: 	leal	0x3(%rdx), %edi
    000003c3: 	movq	(%r9), %rax
    000003c6: 	addl	%r12d, %r8d
    000003c9: 	movslq	%ecx, %rcx
    000003cc: 	movslq	%r8d, %r8
    000003cf: 	addq	%r15, %rsi
    000003d2: 	addq	(%rbp,%rcx,8), %rax
    000003d7: 	leal	(%r14,%rdi), %ecx
    000003db: 	movslq	%ecx, %rcx
    000003de: 	shlq	$0x3, %rcx
    000003e2: 	leaq	(%rbp,%rcx), %r9
    000003e7: 	addq	(%r9), %rax
    000003ea: 	addq	(%rbp,%r8,8), %rax
    000003ef: 	movq	%rax, %r8
    000003f2: 	leaq	0x5(%rax), %rax
    000003f6: 	addq	$0x2, %r8
    000003fa: 	cmovnsq	%r8, %rax
    000003fe: 	sarq	$0x2, %rax
    00000402: 	subq	(%rsi), %rax
    00000405: 	imulq	$0x71, %rax, %rax
    00000409: 	sarq	$0x6, %rax
    0000040d: 	addq	(%rsi), %rax
    00000410: 	movq	%rax, (%rsi)
    00000413: 	cmpl	%edi, %r11d
    00000416: 	jle	.Ltmp62 # Offset: 1046
    0000041c: 	leal	(%rbx,%rdi), %esi
    0000041f: 	leal	0x4(%rdx), %r8d
    00000423: 	movq	(%r10), %rax
    00000426: 	addl	%r12d, %edi
    00000429: 	movslq	%esi, %rsi
    0000042c: 	movslq	%edi, %rdi
    0000042f: 	addq	%r15, %rcx
    00000432: 	addq	(%rbp,%rsi,8), %rax
    00000437: 	leal	(%r14,%r8), %esi
    0000043b: 	movslq	%esi, %rsi
    0000043e: 	shlq	$0x3, %rsi
    00000442: 	leaq	(%rbp,%rsi), %r10
    00000447: 	addq	(%r10), %rax
    0000044a: 	addq	(%rbp,%rdi,8), %rax
    0000044f: 	movq	%rax, %rdi
    00000452: 	leaq	0x5(%rax), %rax
    00000456: 	addq	$0x2, %rdi
    0000045a: 	cmovnsq	%rdi, %rax
    0000045e: 	sarq	$0x2, %rax
    00000462: 	subq	(%rcx), %rax
    00000465: 	imulq	$0x71, %rax, %rax
    00000469: 	sarq	$0x6, %rax
    0000046d: 	addq	(%rcx), %rax
    00000470: 	movq	%rax, (%rcx)
    00000473: 	cmpl	%r8d, %r11d
    00000476: 	jle	.Ltmp62 # Offset: 1142
    0000047c: 	leal	(%rbx,%r8), %ecx
    00000480: 	leal	0x5(%rdx), %edi
    00000483: 	movq	(%r9), %rax
    00000486: 	addl	%r12d, %r8d
    00000489: 	movslq	%ecx, %rcx
    0000048c: 	movslq	%r8d, %r8
    0000048f: 	addq	%r15, %rsi
    00000492: 	addq	(%rbp,%rcx,8), %rax
    00000497: 	leal	(%r14,%rdi), %ecx
    0000049b: 	movslq	%ecx, %rcx
    0000049e: 	shlq	$0x3, %rcx
    000004a2: 	leaq	(%rbp,%rcx), %r9
    000004a7: 	addq	(%r9), %rax
    000004aa: 	addq	(%rbp,%r8,8), %rax
    000004af: 	movq	%rax, %r8
    000004b2: 	leaq	0x5(%rax), %rax
    000004b6: 	addq	$0x2, %r8
    000004ba: 	cmovnsq	%r8, %rax
    000004be: 	sarq	$0x2, %rax
    000004c2: 	subq	(%rsi), %rax
    000004c5: 	imulq	$0x71, %rax, %rax
    000004c9: 	sarq	$0x6, %rax
    000004cd: 	addq	(%rsi), %rax
    000004d0: 	movq	%rax, (%rsi)
    000004d3: 	cmpl	%edi, %r11d
    000004d6: 	jle	.Ltmp62 # Offset: 1238
    000004dc: 	leal	(%rbx,%rdi), %esi
    000004df: 	leal	0x6(%rdx), %r8d
    000004e3: 	movq	(%r10), %rax
    000004e6: 	addl	%r12d, %edi
    000004e9: 	movslq	%esi, %rsi
    000004ec: 	movslq	%edi, %rdi
    000004ef: 	addq	%r15, %rcx
    000004f2: 	addq	(%rbp,%rsi,8), %rax
    000004f7: 	leal	(%r14,%r8), %esi
    000004fb: 	movslq	%esi, %rsi
    000004fe: 	shlq	$0x3, %rsi
    00000502: 	leaq	(%rbp,%rsi), %r10
    00000507: 	addq	(%r10), %rax
    0000050a: 	addq	(%rbp,%rdi,8), %rax
    0000050f: 	movq	%rax, %rdi
    00000512: 	leaq	0x5(%rax), %rax
    00000516: 	addq	$0x2, %rdi
    0000051a: 	cmovnsq	%rdi, %rax
    0000051e: 	sarq	$0x2, %rax
    00000522: 	subq	(%rcx), %rax
    00000525: 	imulq	$0x71, %rax, %rax
    00000529: 	sarq	$0x6, %rax
    0000052d: 	addq	(%rcx), %rax
    00000530: 	movq	%rax, (%rcx)
    00000533: 	cmpl	%r8d, %r11d
    00000536: 	jle	.Ltmp62 # Offset: 1334
    0000053c: 	leal	(%rbx,%r8), %ecx
    00000540: 	movq	(%r9), %rax
    00000543: 	addl	%r12d, %r8d
    00000546: 	addq	%r15, %rsi
    00000549: 	movslq	%ecx, %rcx
    0000054c: 	movslq	%r8d, %r8
    0000054f: 	addq	(%rbp,%rcx,8), %rax
    00000554: 	leal	0x7(%rdx), %ecx
    00000557: 	leal	(%r14,%rcx), %edi
    0000055b: 	movslq	%edi, %rdi
    0000055e: 	addq	(%rbp,%rdi,8), %rax
    00000563: 	addq	(%rbp,%r8,8), %rax
    00000568: 	leaq	(,%rdi,8), %r9
    00000570: 	leaq	0x5(%rax), %rdi
    00000574: 	addq	$0x2, %rax
    00000578: 	cmovsq	%rdi, %rax
    0000057c: 	sarq	$0x2, %rax
    00000580: 	subq	(%rsi), %rax
    00000583: 	imulq	$0x71, %rax, %rax
    00000587: 	sarq	$0x6, %rax
    0000058b: 	addq	(%rsi), %rax
    0000058e: 	movq	%rax, (%rsi)
    00000591: 	cmpl	%ecx, %r11d
    00000594: 	jle	.Ltmp62 # Offset: 1428
    00000596: 	leal	(%rbx,%rcx), %eax
    00000599: 	movq	(%r10), %rsi
    0000059c: 	addl	%r12d, %ecx
    0000059f: 	addq	%r15, %r9
    000005a2: 	cltq
    000005a4: 	movslq	%ecx, %rcx
    000005a7: 	addq	(%rbp,%rax,8), %rsi
    000005ac: 	leal	0x8(%rdx,%r14), %eax
    000005b1: 	cltq
    000005b3: 	addq	(%rbp,%rax,8), %rsi
    000005b8: 	addq	(%rbp,%rcx,8), %rsi
    000005bd: 	leaq	0x5(%rsi), %rax
    000005c1: 	addq	$0x2, %rsi
    000005c5: 	cmovnsq	%rsi, %rax
    000005c9: 	sarq	$0x2, %rax
    000005cd: 	subq	(%r9), %rax
    000005d0: 	imulq	$0x71, %rax, %rax
    000005d4: 	sarq	$0x6, %rax
    000005d8: 	addq	(%r9), %rax
    000005db: 	movq	%rax, (%r9)
.Ltmp62:
    000005de: 	movl	-0x20(%rsp), %eax
    000005e2: 	movl	-0x40(%rsp), %edi
    000005e6: 	addl	%eax, %ebx
    000005e8: 	addl	%eax, %r14d
    000005eb: 	addl	%eax, %r12d
    000005ee: 	cmpl	%edi, -0x28(%rsp)
    000005f2: 	jne	.Ltmp63 # Offset: 1522
.Ltmp59:
    000005f8: 	popq	%rbx
    000005f9: 	popq	%rbp
    000005fa: 	popq	%r12
    000005fc: 	popq	%r13
    000005fe: 	popq	%r14
    00000600: 	popq	%r15
    00000602: 	retq # Offset: 1538
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/1
                _ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 15
  State       : disassembled
  Address     : 0x55e0
  Size        : 0x4ba
  MaxSize     : 0x4c0
  Offset      : 0x55e0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x38(%rsp)
    00000012: 	movl	%ecx, -0x24(%rsp)
    00000016: 	movl	%r8d, -0x20(%rsp)
    0000001b: 	movl	%eax, -0x28(%rsp)
    0000001f: 	cmpl	$0x1, %eax
    00000022: 	jle	.Ltmp64 # Offset: 34
    00000028: 	movl	%ecx, %eax
    0000002a: 	leal	-0x1(%rcx), %ebx
    0000002d: 	movl	$0x1, -0x30(%rsp)
    00000035: 	movq	%rdi, %rbp
    00000038: 	subl	$0xa, %eax
    0000003b: 	movl	%ebx, -0x40(%rsp)
    0000003f: 	leal	(%r8,%r8), %ebx
    00000043: 	movl	%r8d, %r14d
    00000046: 	shrl	$0x3, %eax
    00000049: 	movl	%ebx, -0x3c(%rsp)
    0000004d: 	xorl	%r13d, %r13d
    00000050: 	movl	%eax, %edx
    00000052: 	leal	0x9(,%rax,8), %eax
    00000059: 	movl	%eax, -0x1c(%rsp)
    0000005d: 	leaq	(,%rdx,8), %rbx
    00000065: 	leaq	0x40(%rdi), %rax
    00000069: 	movq	%rbx, -0x18(%rsp)
    0000006e: 	movq	%rax, -0x10(%rsp)
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp68:
    00000078: 	addl	$0x1, -0x30(%rsp)
    0000007d: 	cmpl	$0x9, -0x24(%rsp)
    00000082: 	movl	$0x1, %eax
    00000087: 	jle	.Ltmp65 # Offset: 135
    0000008d: 	movslq	%r13d, %rax
    00000090: 	movslq	-0x3c(%rsp), %rdx
    00000095: 	movq	-0x10(%rsp), %rsi
    0000009a: 	movslq	%r14d, %rbx
    0000009d: 	movl	%r13d, -0x2c(%rsp)
    000000a2: 	shlq	$0x3, %rbx
    000000a6: 	leaq	(%rbp,%rax,8), %r10
    000000ab: 	addq	-0x18(%rsp), %rax
    000000b0: 	leaq	(%rbp,%rbx), %r8
    000000b5: 	leaq	(%rbp,%rdx,8), %r11
    000000ba: 	addq	-0x38(%rsp), %rbx
    000000bf: 	leaq	(%rsi,%rax,8), %r15
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp66:
    000000c8: 	movq	0x18(%r8), %r9
    000000cc: 	movq	0x8(%r8), %rax
    000000d0: 	addq	0x10(%r10), %rax
    000000d4: 	movq	0x10(%r8), %r12
    000000d8: 	addq	%r9, %rax
    000000db: 	addq	0x10(%r11), %rax
    000000df: 	movq	0x20(%r8), %rdi
    000000e3: 	leaq	0x5(%rax), %r13
    000000e7: 	addq	$0x2, %rax
    000000eb: 	movq	0x28(%r8), %rsi
    000000ef: 	movq	0x30(%r8), %rcx
    000000f3: 	cmovnsq	%rax, %r13
    000000f7: 	movq	0x18(%r10), %rax
    000000fb: 	movq	0x38(%r8), %rdx
    000000ff: 	addq	%r12, %rax
    00000102: 	sarq	$0x2, %r13
    00000106: 	addq	%rdi, %rax
    00000109: 	addq	0x18(%r11), %rax
    0000010d: 	movq	%r13, %xmm2
    00000112: 	leaq	0x5(%rax), %r13
    00000116: 	addq	$0x2, %rax
    0000011a: 	cmovsq	%r13, %rax
    0000011e: 	addq	0x20(%r10), %r9
    00000122: 	addq	%rsi, %r9
    00000125: 	addq	0x20(%r11), %r9
    00000129: 	sarq	$0x2, %rax
    0000012d: 	movq	%rax, %xmm3
    00000132: 	leaq	0x5(%r9), %rax
    00000136: 	addq	$0x2, %r9
    0000013a: 	cmovnsq	%r9, %rax
    0000013e: 	addq	0x28(%r10), %rdi
    00000142: 	punpcklqdq	%xmm3, %xmm2
    00000146: 	addq	%rcx, %rdi
    00000149: 	addq	0x28(%r11), %rdi
    0000014d: 	sarq	$0x2, %rax
    00000151: 	leaq	0x5(%rdi), %r9
    00000155: 	addq	$0x2, %rdi
    00000159: 	cmovsq	%r9, %rdi
    0000015d: 	addq	0x30(%r10), %rsi
    00000161: 	movq	%rax, %xmm1
    00000166: 	addq	%rdx, %rsi
    00000169: 	addq	0x30(%r11), %rsi
    0000016d: 	sarq	$0x2, %rdi
    00000171: 	leaq	0x5(%rsi), %rax
    00000175: 	addq	$0x2, %rsi
    00000179: 	cmovnsq	%rsi, %rax
    0000017d: 	addq	0x38(%r10), %rcx
    00000181: 	addq	0x40(%r8), %rcx
    00000185: 	addq	0x38(%r11), %rcx
    00000189: 	movq	%rdi, %xmm4
    0000018e: 	sarq	$0x2, %rax
    00000192: 	punpcklqdq	%xmm4, %xmm1
    00000196: 	movq	%rax, %xmm0
    0000019b: 	leaq	0x5(%rcx), %rax
    0000019f: 	addq	$0x2, %rcx
    000001a3: 	cmovnsq	%rcx, %rax
    000001a7: 	addq	0x40(%r10), %rdx
    000001ab: 	addq	0x48(%r8), %rdx
    000001af: 	addq	0x40(%r11), %rdx
    000001b3: 	sarq	$0x2, %rax
    000001b7: 	movq	%rax, %xmm5
    000001bc: 	leaq	0x5(%rdx), %rax
    000001c0: 	addq	$0x2, %rdx
    000001c4: 	cmovsq	%rax, %rdx
    000001c8: 	movq	(%r8), %rax
    000001cb: 	addq	0x8(%r10), %rax
    000001cf: 	punpcklqdq	%xmm5, %xmm0
    000001d3: 	addq	%r12, %rax
    000001d6: 	addq	0x8(%r11), %rax
    000001da: 	movups	%xmm2, 0x10(%rbx)
    000001de: 	sarq	$0x2, %rdx
    000001e2: 	leaq	0x5(%rax), %rcx
    000001e6: 	addq	$0x2, %rax
    000001ea: 	movups	%xmm1, 0x20(%rbx)
    000001ee: 	cmovsq	%rcx, %rax
    000001f2: 	addq	$0x40, %r10
    000001f6: 	movq	%rdx, 0x40(%rbx)
    000001fa: 	addq	$0x40, %r8
    000001fe: 	movups	%xmm0, 0x30(%rbx)
    00000202: 	addq	$0x40, %r11
    00000206: 	addq	$0x40, %rbx
    0000020a: 	sarq	$0x2, %rax
    0000020e: 	movq	%rax, -0x38(%rbx)
    00000212: 	cmpq	%r15, %r10
    00000215: 	jne	.Ltmp66 # Offset: 533
    0000021b: 	movl	-0x2c(%rsp), %r13d
    00000220: 	movl	-0x1c(%rsp), %eax
.Ltmp65:
    00000224: 	cmpl	-0x40(%rsp), %eax
    00000228: 	jge	.Ltmp67 # Offset: 552
    0000022e: 	leal	0x1(%rax), %edi
    00000231: 	leal	(%r13,%rax), %edx
    00000236: 	movl	-0x3c(%rsp), %r15d
    0000023b: 	movq	-0x38(%rsp), %r12
    00000240: 	leal	(%r14,%rdi), %r8d
    00000244: 	leal	-0x1(%rax,%r14), %ecx
    00000249: 	movslq	%edx, %rdx
    0000024c: 	movslq	%r8d, %r8
    0000024f: 	movslq	%ecx, %rcx
    00000252: 	leaq	(%rbp,%r8,8), %r9
    00000257: 	movq	(%r9), %rsi
    0000025a: 	addq	(%rbp,%rcx,8), %rsi
    0000025f: 	movq	(%rbp,%rdx,8), %rcx
    00000264: 	leal	(%r14,%rax), %edx
    00000268: 	movslq	%edx, %rdx
    0000026b: 	addq	%rsi, %rcx
    0000026e: 	leal	(%r15,%rax), %esi
    00000272: 	movslq	%esi, %rsi
    00000275: 	addq	(%rbp,%rsi,8), %rcx
    0000027a: 	leaq	0x5(%rcx), %rsi
    0000027e: 	addq	$0x2, %rcx
    00000282: 	cmovnsq	%rcx, %rsi
    00000286: 	sarq	$0x2, %rsi
    0000028a: 	movq	%rsi, (%r12,%rdx,8)
    0000028e: 	cmpl	%edi, -0x40(%rsp)
    00000292: 	jle	.Ltmp67 # Offset: 658
    00000298: 	leal	0x2(%rax), %ecx
    0000029b: 	leal	(%r13,%rdi), %r11d
    000002a0: 	addl	%r15d, %edi
    000002a3: 	leal	(%r14,%rcx), %esi
    000002a7: 	movslq	%r11d, %r11
    000002aa: 	movslq	%edi, %rdi
    000002ad: 	movslq	%esi, %rsi
    000002b0: 	leaq	(%rbp,%rsi,8), %r10
    000002b5: 	movq	(%r10), %rbx
    000002b8: 	addq	(%rbp,%rdx,8), %rbx
    000002bd: 	movq	(%rbp,%r11,8), %rdx
    000002c2: 	addq	%rbx, %rdx
    000002c5: 	addq	(%rbp,%rdi,8), %rdx
    000002ca: 	leaq	0x5(%rdx), %rdi
    000002ce: 	addq	$0x2, %rdx
    000002d2: 	cmovnsq	%rdx, %rdi
    000002d6: 	sarq	$0x2, %rdi
    000002da: 	movq	%rdi, (%r12,%r8,8)
    000002de: 	cmpl	%ecx, -0x40(%rsp)
    000002e2: 	jle	.Ltmp67 # Offset: 738
    000002e8: 	leal	0x3(%rax), %edx
    000002eb: 	leal	(%r13,%rcx), %r8d
    000002f0: 	addl	%r15d, %ecx
    000002f3: 	leal	(%r14,%rdx), %edi
    000002f7: 	movslq	%r8d, %r8
    000002fa: 	movslq	%ecx, %rcx
    000002fd: 	movslq	%edi, %rdi
    00000300: 	leaq	(%rbp,%rdi,8), %r11
    00000305: 	movq	(%r11), %rbx
    00000308: 	addq	(%r9), %rbx
    0000030b: 	movq	(%rbp,%r8,8), %r9
    00000310: 	addq	%rbx, %r9
    00000313: 	addq	(%rbp,%rcx,8), %r9
    00000318: 	movl	%r15d, %ebx
    0000031b: 	movq	%r12, %r15
    0000031e: 	leaq	0x5(%r9), %rcx
    00000322: 	addq	$0x2, %r9
    00000326: 	cmovnsq	%r9, %rcx
    0000032a: 	sarq	$0x2, %rcx
    0000032e: 	movq	%rcx, (%r12,%rsi,8)
    00000332: 	movl	-0x40(%rsp), %r12d
    00000337: 	cmpl	%edx, %r12d
    0000033a: 	jle	.Ltmp67 # Offset: 826
    00000340: 	leal	0x4(%rax), %ecx
    00000343: 	leal	(%r13,%rdx), %r8d
    00000348: 	addl	%ebx, %edx
    0000034a: 	movq	(%r10), %r10
    0000034d: 	leal	(%r14,%rcx), %esi
    00000351: 	movslq	%edx, %rdx
    00000354: 	movslq	%r8d, %r8
    00000357: 	movslq	%esi, %rsi
    0000035a: 	leaq	(%rbp,%rsi,8), %r9
    0000035f: 	addq	(%r9), %r10
    00000362: 	addq	(%rbp,%r8,8), %r10
    00000367: 	addq	(%rbp,%rdx,8), %r10
    0000036c: 	leaq	0x5(%r10), %rdx
    00000370: 	addq	$0x2, %r10
    00000374: 	cmovnsq	%r10, %rdx
    00000378: 	sarq	$0x2, %rdx
    0000037c: 	movq	%rdx, (%r15,%rdi,8)
    00000380: 	cmpl	%ecx, %r12d
    00000383: 	jle	.Ltmp67 # Offset: 899
    00000389: 	leal	0x5(%rax), %edx
    0000038c: 	leal	(%r13,%rcx), %r8d
    00000391: 	addl	%ebx, %ecx
    00000393: 	movq	(%r11), %r11
    00000396: 	leal	(%r14,%rdx), %edi
    0000039a: 	movslq	%ecx, %rcx
    0000039d: 	movslq	%r8d, %r8
    000003a0: 	movslq	%edi, %rdi
    000003a3: 	leaq	(%rbp,%rdi,8), %r10
    000003a8: 	addq	(%r10), %r11
    000003ab: 	addq	(%rbp,%r8,8), %r11
    000003b0: 	addq	(%rbp,%rcx,8), %r11
    000003b5: 	leaq	0x5(%r11), %rcx
    000003b9: 	addq	$0x2, %r11
    000003bd: 	cmovnsq	%r11, %rcx
    000003c1: 	sarq	$0x2, %rcx
    000003c5: 	movq	%rcx, (%r15,%rsi,8)
    000003c9: 	cmpl	%edx, %r12d
    000003cc: 	jle	.Ltmp67 # Offset: 972
    000003d2: 	leal	0x6(%rax), %ecx
    000003d5: 	leal	(%r13,%rdx), %r8d
    000003da: 	addl	%ebx, %edx
    000003dc: 	movq	(%r9), %r9
    000003df: 	leal	(%r14,%rcx), %esi
    000003e3: 	movslq	%edx, %rdx
    000003e6: 	movslq	%r8d, %r8
    000003e9: 	movslq	%esi, %rsi
    000003ec: 	leaq	(%rbp,%rsi,8), %r11
    000003f1: 	addq	(%r11), %r9
    000003f4: 	addq	(%rbp,%r8,8), %r9
    000003f9: 	addq	(%rbp,%rdx,8), %r9
    000003fe: 	leaq	0x5(%r9), %rdx
    00000402: 	addq	$0x2, %r9
    00000406: 	cmovnsq	%r9, %rdx
    0000040a: 	sarq	$0x2, %rdx
    0000040e: 	movq	%rdx, (%r15,%rdi,8)
    00000412: 	cmpl	%ecx, %r12d
    00000415: 	jle	.Ltmp67 # Offset: 1045
    00000417: 	leal	0x7(%rax), %edx
    0000041a: 	leal	(%r13,%rcx), %r8d
    0000041f: 	addl	%ebx, %ecx
    00000421: 	movq	(%r10), %r9
    00000424: 	leal	(%r14,%rdx), %edi
    00000428: 	movslq	%ecx, %rcx
    0000042b: 	movslq	%r8d, %r8
    0000042e: 	movslq	%edi, %rdi
    00000431: 	addq	(%rbp,%rdi,8), %r9
    00000436: 	addq	(%rbp,%r8,8), %r9
    0000043b: 	addq	(%rbp,%rcx,8), %r9
    00000440: 	leaq	0x5(%r9), %rcx
    00000444: 	addq	$0x2, %r9
    00000448: 	cmovnsq	%r9, %rcx
    0000044c: 	sarq	$0x2, %rcx
    00000450: 	movq	%rcx, (%r15,%rsi,8)
    00000454: 	cmpl	%edx, %r12d
    00000457: 	jle	.Ltmp67 # Offset: 1111
    00000459: 	leal	(%r13,%rdx), %ecx
    0000045e: 	leal	0x8(%rax,%r14), %eax
    00000463: 	addl	%ebx, %edx
    00000465: 	movq	(%r11), %rsi
    00000468: 	cltq
    0000046a: 	movslq	%ecx, %rcx
    0000046d: 	movslq	%edx, %rdx
    00000470: 	addq	(%rbp,%rax,8), %rsi
    00000475: 	addq	(%rbp,%rcx,8), %rsi
    0000047a: 	addq	(%rbp,%rdx,8), %rsi
    0000047f: 	leaq	0x5(%rsi), %rax
    00000483: 	addq	$0x2, %rsi
    00000487: 	cmovnsq	%rsi, %rax
    0000048b: 	sarq	$0x2, %rax
    0000048f: 	movq	%rax, (%r15,%rdi,8)
.Ltmp67:
    00000493: 	movl	-0x20(%rsp), %eax
    00000497: 	movl	-0x30(%rsp), %ebx
    0000049b: 	addl	%eax, -0x3c(%rsp)
    0000049f: 	addl	%eax, %r13d
    000004a2: 	addl	%eax, %r14d
    000004a5: 	cmpl	%ebx, -0x28(%rsp)
    000004a9: 	jne	.Ltmp68 # Offset: 1193
.Ltmp64:
    000004af: 	popq	%rbx
    000004b0: 	popq	%rbp
    000004b1: 	popq	%r12
    000004b3: 	popq	%r13
    000004b5: 	popq	%r14
    000004b7: 	popq	%r15
    000004b9: 	retq # Offset: 1209
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 16
  State       : disassembled
  Address     : 0x5aa0
  Size        : 0x61e
  MaxSize     : 0x620
  Offset      : 0x5aa0
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x38(%rsp)
    00000012: 	movl	%ecx, -0x24(%rsp)
    00000016: 	movl	%r8d, -0x20(%rsp)
    0000001b: 	movl	%eax, -0x28(%rsp)
    0000001f: 	cmpl	$0x1, %eax
    00000022: 	jle	.Ltmp69 # Offset: 34
    00000028: 	movl	%ecx, %eax
    0000002a: 	movq	%rdi, %rbp
    0000002d: 	leal	-0x1(%rcx), %edi
    00000030: 	movl	$0x0, -0x48(%rsp)
    00000038: 	subl	$0xa, %eax
    0000003b: 	movl	%edi, -0x3c(%rsp)
    0000003f: 	leal	(%r8,%r8), %edi
    00000043: 	movl	%r8d, %r14d
    00000046: 	shrl	$0x3, %eax
    00000049: 	movl	%edi, -0x44(%rsp)
    0000004d: 	movl	%eax, %edx
    0000004f: 	leal	0x9(,%rax,8), %eax
    00000056: 	movl	$0x1, -0x40(%rsp)
    0000005e: 	movl	%eax, -0x1c(%rsp)
    00000062: 	leaq	(,%rdx,8), %rdi
    0000006a: 	leaq	0x20(%rsi), %rax
    0000006e: 	movq	%rdi, -0x18(%rsp)
    00000073: 	movq	%rax, -0x10(%rsp)
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp73:
    00000080: 	addl	$0x1, -0x40(%rsp)
    00000085: 	cmpl	$0x9, -0x24(%rsp)
    0000008a: 	movl	$0x1, %eax
    0000008f: 	jle	.Ltmp70 # Offset: 143
    00000095: 	movslq	-0x48(%rsp), %rdx
    0000009a: 	movslq	%r14d, %rsi
    0000009d: 	movq	-0x38(%rsp), %rdi
    000000a2: 	movq	%rbp, -0x30(%rsp)
    000000a7: 	movq	-0x10(%rsp), %rbx
    000000ac: 	leaq	(,%rsi,4), %rax
    000000b4: 	addq	-0x18(%rsp), %rsi
    000000b9: 	leaq	(%rbp,%rdx,4), %rcx
    000000be: 	movslq	-0x44(%rsp), %rdx
    000000c3: 	addq	%rax, %rdi
    000000c6: 	addq	%rbp, %rax
    000000c9: 	leaq	(%rbx,%rsi,4), %r15
    000000cd: 	leaq	(%rbp,%rdx,4), %rdx
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp71:
    000000d8: 	movslq	0x10(%rax), %r10
    000000dc: 	movslq	0x14(%rcx), %rsi
    000000e0: 	movslq	0x18(%rax), %r12
    000000e4: 	movslq	0x14(%rdx), %r13
    000000e8: 	addq	%r10, %rsi
    000000eb: 	movslq	0x14(%rax), %r8
    000000ef: 	movslq	0x1c(%rax), %rbx
    000000f3: 	addq	%r12, %rsi
    000000f6: 	movslq	0x8(%rax), %r11
    000000fa: 	movslq	0xc(%rax), %r9
    000000fe: 	addq	%r13, %rsi
    00000101: 	movdqu	0x14(%rdi), %xmm5
    00000106: 	leaq	0x5(%rsi), %r13
    0000010a: 	addq	$0x2, %rsi
    0000010e: 	cmovnsq	%rsi, %r13
    00000112: 	movslq	0x18(%rcx), %rsi
    00000116: 	addq	%r8, %rsi
    00000119: 	sarq	$0x2, %r13
    0000011d: 	leaq	(%rsi,%rbx), %rbp
    00000121: 	movslq	0x18(%rdx), %rsi
    00000125: 	movq	%r13, %xmm1
    0000012a: 	addq	%rbp, %rsi
    0000012d: 	leaq	0x5(%rsi), %rbp
    00000131: 	addq	$0x2, %rsi
    00000135: 	cmovsq	%rbp, %rsi
    00000139: 	sarq	$0x2, %rsi
    0000013d: 	movq	%rsi, %xmm3
    00000142: 	movslq	0x1c(%rcx), %rsi
    00000146: 	punpcklqdq	%xmm3, %xmm1
    0000014a: 	addq	%r12, %rsi
    0000014d: 	movslq	0x20(%rax), %r12
    00000151: 	addq	%r12, %rsi
    00000154: 	movslq	0x1c(%rdx), %r12
    00000158: 	addq	%r12, %rsi
    0000015b: 	leaq	0x5(%rsi), %r12
    0000015f: 	addq	$0x2, %rsi
    00000163: 	cmovsq	%r12, %rsi
    00000167: 	sarq	$0x2, %rsi
    0000016b: 	movq	%rsi, %xmm0
    00000170: 	movslq	0x20(%rcx), %rsi
    00000174: 	addq	%rbx, %rsi
    00000177: 	movslq	0x24(%rax), %rbx
    0000017b: 	addq	%rbx, %rsi
    0000017e: 	movslq	0x20(%rdx), %rbx
    00000182: 	addq	%rbx, %rsi
    00000185: 	leaq	0x5(%rsi), %rbx
    00000189: 	addq	$0x2, %rsi
    0000018d: 	cmovsq	%rbx, %rsi
    00000191: 	movslq	(%rax), %rbx
    00000194: 	sarq	$0x2, %rsi
    00000198: 	movq	%rsi, %xmm4
    0000019d: 	movslq	0x4(%rcx), %rsi
    000001a1: 	punpcklqdq	%xmm4, %xmm0
    000001a5: 	movdqu	0x4(%rdi), %xmm4
    000001aa: 	addq	%rbx, %rsi
    000001ad: 	movslq	0x4(%rdx), %rbx
    000001b1: 	shufps	$0x88, %xmm0, %xmm1
    000001b5: 	psubd	%xmm5, %xmm1
    000001b9: 	addq	%r11, %rsi
    000001bc: 	movdqa	%xmm1, %xmm0
    000001c0: 	addq	%rbx, %rsi
    000001c3: 	pslld	$0x3, %xmm0
    000001c8: 	leaq	0x5(%rsi), %rbx
    000001cc: 	addq	$0x2, %rsi
    000001d0: 	psubd	%xmm1, %xmm0
    000001d4: 	cmovsq	%rbx, %rsi
    000001d8: 	movslq	0x4(%rax), %rbx
    000001dc: 	pslld	$0x4, %xmm0
    000001e1: 	paddd	%xmm1, %xmm0
    000001e5: 	sarq	$0x2, %rsi
    000001e9: 	psrad	$0x6, %xmm0
    000001ee: 	movq	%rsi, %xmm2
    000001f3: 	movslq	0x8(%rcx), %rsi
    000001f7: 	paddd	%xmm5, %xmm0
    000001fb: 	addq	%rbx, %rsi
    000001fe: 	movslq	0x8(%rdx), %rbx
    00000202: 	addq	%r9, %rsi
    00000205: 	addq	%rbx, %rsi
    00000208: 	leaq	0x5(%rsi), %rbx
    0000020c: 	addq	$0x2, %rsi
    00000210: 	cmovsq	%rbx, %rsi
    00000214: 	sarq	$0x2, %rsi
    00000218: 	movq	%rsi, %xmm7
    0000021d: 	movslq	0xc(%rcx), %rsi
    00000221: 	punpcklqdq	%xmm7, %xmm2
    00000225: 	addq	%r11, %rsi
    00000228: 	addq	%r10, %rsi
    0000022b: 	movslq	0xc(%rdx), %r10
    0000022f: 	addq	%r10, %rsi
    00000232: 	leaq	0x5(%rsi), %r10
    00000236: 	addq	$0x2, %rsi
    0000023a: 	cmovsq	%r10, %rsi
    0000023e: 	sarq	$0x2, %rsi
    00000242: 	movq	%rsi, %xmm1
    00000247: 	movslq	0x10(%rcx), %rsi
    0000024b: 	addq	%r9, %rsi
    0000024e: 	addq	%r8, %rsi
    00000251: 	movslq	0x10(%rdx), %r8
    00000255: 	movups	%xmm0, 0x14(%rdi)
    00000259: 	addq	%r8, %rsi
    0000025c: 	leaq	0x5(%rsi), %r8
    00000260: 	addq	$0x2, %rsi
    00000264: 	cmovsq	%r8, %rsi
    00000268: 	addq	$0x20, %rdi
    0000026c: 	addq	$0x20, %rcx
    00000270: 	addq	$0x20, %rax
    00000274: 	addq	$0x20, %rdx
    00000278: 	sarq	$0x2, %rsi
    0000027c: 	movq	%rsi, %xmm3
    00000281: 	punpcklqdq	%xmm3, %xmm1
    00000285: 	shufps	$0x88, %xmm1, %xmm2
    00000289: 	psubd	%xmm4, %xmm2
    0000028d: 	movdqa	%xmm2, %xmm1
    00000291: 	pslld	$0x3, %xmm1
    00000296: 	psubd	%xmm2, %xmm1
    0000029a: 	pslld	$0x4, %xmm1
    0000029f: 	paddd	%xmm2, %xmm1
    000002a3: 	psrad	$0x6, %xmm1
    000002a8: 	paddd	%xmm4, %xmm1
    000002ac: 	movups	%xmm1, -0x1c(%rdi)
    000002b0: 	cmpq	%r15, %rdi
    000002b3: 	jne	.Ltmp71 # Offset: 691
    000002b9: 	movq	-0x30(%rsp), %rbp
    000002be: 	movl	-0x1c(%rsp), %eax
.Ltmp70:
    000002c2: 	cmpl	-0x3c(%rsp), %eax
    000002c6: 	jge	.Ltmp72 # Offset: 710
    000002cc: 	movl	-0x48(%rsp), %r15d
    000002d1: 	movl	-0x44(%rsp), %r13d
    000002d6: 	leal	(%r14,%rax), %r8d
    000002da: 	movq	-0x38(%rsp), %rbx
    000002df: 	movslq	%r8d, %r8
    000002e2: 	movl	-0x3c(%rsp), %r12d
    000002e7: 	leal	(%r15,%rax), %edx
    000002eb: 	movslq	%edx, %rdx
    000002ee: 	leaq	(%rbx,%r8,4), %r9
    000002f2: 	movslq	(%rbp,%rdx,4), %rcx
    000002f7: 	leal	-0x1(%rax,%r14), %edx
    000002fc: 	movslq	%edx, %rdx
    000002ff: 	movslq	(%rbp,%rdx,4), %rdi
    00000304: 	addq	%rcx, %rdi
    00000307: 	leal	0x1(%rax), %ecx
    0000030a: 	leal	(%r14,%rcx), %edx
    0000030e: 	movslq	%edx, %rdx
    00000311: 	shlq	$0x2, %rdx
    00000315: 	leaq	(%rbp,%rdx), %r10
    0000031a: 	movslq	(%r10), %rsi
    0000031d: 	addq	%rdi, %rsi
    00000320: 	leal	(%r13,%rax), %edi
    00000325: 	movslq	%edi, %rdi
    00000328: 	movslq	(%rbp,%rdi,4), %rdi
    0000032d: 	addq	%rsi, %rdi
    00000330: 	leaq	0x5(%rdi), %rsi
    00000334: 	addq	$0x2, %rdi
    00000338: 	cmovnsq	%rdi, %rsi
    0000033c: 	sarq	$0x2, %rsi
    00000340: 	subl	(%r9), %esi
    00000343: 	imull	$0x71, %esi, %esi
    00000346: 	sarl	$0x6, %esi
    00000349: 	addl	(%r9), %esi
    0000034c: 	movl	%esi, (%r9)
    0000034f: 	cmpl	%ecx, %r12d
    00000352: 	jle	.Ltmp72 # Offset: 850
    00000358: 	leal	(%r15,%rcx), %esi
    0000035c: 	movslq	(%rbp,%r8,4), %r11
    00000361: 	leal	0x2(%rax), %edi
    00000364: 	addl	%r13d, %ecx
    00000367: 	movslq	%esi, %rsi
    0000036a: 	movslq	%ecx, %rcx
    0000036d: 	addq	%rbx, %rdx
    00000370: 	movslq	(%rbp,%rsi,4), %rsi
    00000375: 	movslq	(%rbp,%rcx,4), %rcx
    0000037a: 	addq	%rsi, %r11
    0000037d: 	leal	(%r14,%rdi), %esi
    00000381: 	movslq	%esi, %rsi
    00000384: 	shlq	$0x2, %rsi
    00000388: 	leaq	(%rbp,%rsi), %r8
    0000038d: 	movslq	(%r8), %r9
    00000390: 	addq	%r11, %r9
    00000393: 	addq	%rcx, %r9
    00000396: 	leaq	0x5(%r9), %rcx
    0000039a: 	addq	$0x2, %r9
    0000039e: 	cmovnsq	%r9, %rcx
    000003a2: 	sarq	$0x2, %rcx
    000003a6: 	subl	(%rdx), %ecx
    000003a8: 	imull	$0x71, %ecx, %ecx
    000003ab: 	sarl	$0x6, %ecx
    000003ae: 	addl	(%rdx), %ecx
    000003b0: 	movl	%ecx, (%rdx)
    000003b2: 	cmpl	%edi, %r12d
    000003b5: 	jle	.Ltmp72 # Offset: 949
    000003bb: 	leal	(%r15,%rdi), %edx
    000003bf: 	movslq	(%r10), %r11
    000003c2: 	leal	0x3(%rax), %r10d
    000003c6: 	addl	%r13d, %edi
    000003c9: 	movslq	%edx, %rdx
    000003cc: 	movslq	%edi, %rdi
    000003cf: 	addq	%rbx, %rsi
    000003d2: 	movslq	(%rbp,%rdx,4), %rdx
    000003d7: 	movslq	(%rbp,%rdi,4), %rdi
    000003dc: 	addq	%rdx, %r11
    000003df: 	leal	(%r14,%r10), %edx
    000003e3: 	movslq	%edx, %rdx
    000003e6: 	shlq	$0x2, %rdx
    000003ea: 	leaq	(%rbp,%rdx), %r9
    000003ef: 	movslq	(%r9), %rcx
    000003f2: 	addq	%r11, %rcx
    000003f5: 	addq	%rcx, %rdi
    000003f8: 	leaq	0x5(%rdi), %rcx
    000003fc: 	addq	$0x2, %rdi
    00000400: 	cmovnsq	%rdi, %rcx
    00000404: 	sarq	$0x2, %rcx
    00000408: 	subl	(%rsi), %ecx
    0000040a: 	imull	$0x71, %ecx, %ecx
    0000040d: 	sarl	$0x6, %ecx
    00000410: 	addl	(%rsi), %ecx
    00000412: 	movl	%ecx, (%rsi)
    00000414: 	cmpl	%r10d, %r12d
    00000417: 	jle	.Ltmp72 # Offset: 1047
    0000041d: 	leal	(%r15,%r10), %ecx
    00000421: 	movslq	(%r8), %r11
    00000424: 	leal	0x4(%rax), %esi
    00000427: 	addl	%r13d, %r10d
    0000042a: 	movslq	%ecx, %rcx
    0000042d: 	movslq	%r10d, %r10
    00000430: 	addq	%rbx, %rdx
    00000433: 	movslq	(%rbp,%rcx,4), %rcx
    00000438: 	movslq	(%rbp,%r10,4), %r10
    0000043d: 	addq	%rcx, %r11
    00000440: 	leal	(%r14,%rsi), %ecx
    00000444: 	movslq	%ecx, %rcx
    00000447: 	shlq	$0x2, %rcx
    0000044b: 	leaq	(%rbp,%rcx), %rdi
    00000450: 	movslq	(%rdi), %r8
    00000453: 	addq	%r11, %r8
    00000456: 	addq	%r8, %r10
    00000459: 	leaq	0x5(%r10), %r8
    0000045d: 	addq	$0x2, %r10
    00000461: 	cmovnsq	%r10, %r8
    00000465: 	sarq	$0x2, %r8
    00000469: 	subl	(%rdx), %r8d
    0000046c: 	imull	$0x71, %r8d, %r8d
    00000470: 	sarl	$0x6, %r8d
    00000474: 	addl	(%rdx), %r8d
    00000477: 	movl	%r8d, (%rdx)
    0000047a: 	cmpl	%esi, %r12d
    0000047d: 	jle	.Ltmp72 # Offset: 1149
    00000483: 	leal	(%r15,%rsi), %edx
    00000487: 	movslq	(%r9), %r11
    0000048a: 	leal	0x5(%rax), %r8d
    0000048e: 	addl	%r13d, %esi
    00000491: 	movslq	%edx, %rdx
    00000494: 	movslq	%esi, %rsi
    00000497: 	addq	%rbx, %rcx
    0000049a: 	movslq	(%rbp,%rdx,4), %rdx
    0000049f: 	movslq	(%rbp,%rsi,4), %rsi
    000004a4: 	addq	%rdx, %r11
    000004a7: 	leal	(%r14,%r8), %edx
    000004ab: 	movslq	%edx, %rdx
    000004ae: 	shlq	$0x2, %rdx
    000004b2: 	leaq	(%rbp,%rdx), %r9
    000004b7: 	movslq	(%r9), %r10
    000004ba: 	addq	%r11, %r10
    000004bd: 	addq	%rsi, %r10
    000004c0: 	leaq	0x5(%r10), %rsi
    000004c4: 	addq	$0x2, %r10
    000004c8: 	cmovnsq	%r10, %rsi
    000004cc: 	sarq	$0x2, %rsi
    000004d0: 	subl	(%rcx), %esi
    000004d2: 	imull	$0x71, %esi, %esi
    000004d5: 	sarl	$0x6, %esi
    000004d8: 	addl	(%rcx), %esi
    000004da: 	movl	%esi, (%rcx)
    000004dc: 	cmpl	%r8d, %r12d
    000004df: 	jle	.Ltmp72 # Offset: 1247
    000004e5: 	leaq	(%rbx,%rdx), %rsi
    000004e9: 	leal	(%r15,%r8), %edx
    000004ed: 	movslq	(%rdi), %r10
    000004f0: 	addl	%r13d, %r8d
    000004f3: 	movslq	%edx, %rdx
    000004f6: 	leal	0x6(%rax), %ecx
    000004f9: 	movslq	%r8d, %r8
    000004fc: 	movslq	(%rbp,%rdx,4), %rdx
    00000501: 	movslq	(%rbp,%r8,4), %r8
    00000506: 	addq	%rdx, %r10
    00000509: 	leal	(%r14,%rcx), %edx
    0000050d: 	movslq	%edx, %rdx
    00000510: 	shlq	$0x2, %rdx
    00000514: 	leaq	(%rbp,%rdx), %r11
    00000519: 	movslq	(%r11), %rdi
    0000051c: 	addq	%r10, %rdi
    0000051f: 	addq	%rdi, %r8
    00000522: 	leaq	0x5(%r8), %rdi
    00000526: 	addq	$0x2, %r8
    0000052a: 	cmovnsq	%r8, %rdi
    0000052e: 	sarq	$0x2, %rdi
    00000532: 	subl	(%rsi), %edi
    00000534: 	imull	$0x71, %edi, %edi
    00000537: 	sarl	$0x6, %edi
    0000053a: 	addl	(%rsi), %edi
    0000053c: 	movl	%edi, (%rsi)
    0000053e: 	cmpl	%ecx, %r12d
    00000541: 	jle	.Ltmp72 # Offset: 1345
    00000547: 	leal	(%r15,%rcx), %esi
    0000054b: 	movslq	(%r9), %r9
    0000054e: 	addl	%r13d, %ecx
    00000551: 	addq	%rbx, %rdx
    00000554: 	movslq	%esi, %rsi
    00000557: 	movslq	%ecx, %rcx
    0000055a: 	movslq	(%rbp,%rsi,4), %rsi
    0000055f: 	movslq	(%rbp,%rcx,4), %rcx
    00000564: 	addq	%rsi, %r9
    00000567: 	leal	0x7(%rax), %esi
    0000056a: 	leal	(%r14,%rsi), %edi
    0000056e: 	movslq	%edi, %rdi
    00000571: 	leaq	(,%rdi,4), %r8
    00000579: 	movslq	(%rbp,%rdi,4), %rdi
    0000057e: 	addq	%r9, %rdi
    00000581: 	addq	%rcx, %rdi
    00000584: 	leaq	0x5(%rdi), %rcx
    00000588: 	addq	$0x2, %rdi
    0000058c: 	cmovnsq	%rdi, %rcx
    00000590: 	sarq	$0x2, %rcx
    00000594: 	subl	(%rdx), %ecx
    00000596: 	imull	$0x71, %ecx, %ecx
    00000599: 	sarl	$0x6, %ecx
    0000059c: 	addl	(%rdx), %ecx
    0000059e: 	movl	%ecx, (%rdx)
    000005a0: 	cmpl	%esi, %r12d
    000005a3: 	jle	.Ltmp72 # Offset: 1443
    000005a5: 	leal	(%r15,%rsi), %edx
    000005a9: 	leal	0x8(%rax,%r14), %eax
    000005ae: 	movslq	(%r11), %rcx
    000005b1: 	addl	%r13d, %esi
    000005b4: 	movslq	%edx, %rdx
    000005b7: 	cltq
    000005b9: 	movslq	%esi, %rsi
    000005bc: 	addq	%rbx, %r8
    000005bf: 	movslq	(%rbp,%rdx,4), %rdx
    000005c4: 	movslq	(%rbp,%rax,4), %rax
    000005c9: 	addq	%rdx, %rcx
    000005cc: 	movslq	(%rbp,%rsi,4), %rdx
    000005d1: 	addq	%rcx, %rax
    000005d4: 	addq	%rax, %rdx
    000005d7: 	leaq	0x5(%rdx), %rax
    000005db: 	addq	$0x2, %rdx
    000005df: 	cmovnsq	%rdx, %rax
    000005e3: 	sarq	$0x2, %rax
    000005e7: 	subl	(%r8), %eax
    000005ea: 	imull	$0x71, %eax, %eax
    000005ed: 	sarl	$0x6, %eax
    000005f0: 	addl	(%r8), %eax
    000005f3: 	movl	%eax, (%r8)
.Ltmp72:
    000005f6: 	movl	-0x20(%rsp), %eax
    000005fa: 	movl	-0x40(%rsp), %edi
    000005fe: 	addl	%eax, -0x48(%rsp)
    00000602: 	addl	%eax, -0x44(%rsp)
    00000606: 	addl	%eax, %r14d
    00000609: 	cmpl	%edi, -0x28(%rsp)
    0000060d: 	jne	.Ltmp73 # Offset: 1549
.Ltmp69:
    00000613: 	popq	%rbx
    00000614: 	popq	%rbp
    00000615: 	popq	%r12
    00000617: 	popq	%r13
    00000619: 	popq	%r14
    0000061b: 	popq	%r15
    0000061d: 	retq # Offset: 1565
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/1
                _ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 17
  State       : disassembled
  Address     : 0x60c0
  Size        : 0x53e
  MaxSize     : 0x540
  Offset      : 0x60c0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x38(%rsp)
    00000012: 	movl	%ecx, -0x24(%rsp)
    00000016: 	movl	%r8d, -0x20(%rsp)
    0000001b: 	movl	%eax, -0x28(%rsp)
    0000001f: 	cmpl	$0x1, %eax
    00000022: 	jle	.Ltmp74 # Offset: 34
    00000028: 	movl	%ecx, %eax
    0000002a: 	movq	%rdi, %rbp
    0000002d: 	leal	-0x1(%rcx), %edi
    00000030: 	movl	$0x0, -0x44(%rsp)
    00000038: 	subl	$0xa, %eax
    0000003b: 	movl	%edi, -0x48(%rsp)
    0000003f: 	leal	(%r8,%r8), %edi
    00000043: 	movl	%r8d, %r14d
    00000046: 	shrl	$0x3, %eax
    00000049: 	movl	%edi, -0x40(%rsp)
    0000004d: 	movl	%eax, %edx
    0000004f: 	leal	0x9(,%rax,8), %eax
    00000056: 	movl	$0x1, -0x3c(%rsp)
    0000005e: 	movl	%eax, -0x1c(%rsp)
    00000062: 	leaq	(,%rdx,8), %rdi
    0000006a: 	leaq	0x20(%rbp), %rax
    0000006e: 	movq	%rdi, -0x18(%rsp)
    00000073: 	movq	%rax, -0x10(%rsp)
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp78:
    00000080: 	addl	$0x1, -0x3c(%rsp)
    00000085: 	cmpl	$0x9, -0x24(%rsp)
    0000008a: 	movl	$0x1, %eax
    0000008f: 	jle	.Ltmp75 # Offset: 143
    00000095: 	movslq	-0x44(%rsp), %rsi
    0000009a: 	movslq	-0x40(%rsp), %rcx
    0000009f: 	movslq	%r14d, %rdi
    000000a2: 	movq	%rbp, -0x30(%rsp)
    000000a7: 	movq	-0x10(%rsp), %rbx
    000000ac: 	shlq	$0x2, %rdi
    000000b0: 	leaq	(%rbp,%rsi,4), %rdx
    000000b5: 	addq	-0x18(%rsp), %rsi
    000000ba: 	leaq	(%rbp,%rdi), %rax
    000000bf: 	addq	-0x38(%rsp), %rdi
    000000c4: 	leaq	(%rbp,%rcx,4), %rcx
    000000c9: 	leaq	(%rbx,%rsi,4), %r15
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp76:
    000000d0: 	movslq	0x4(%rax), %r13
    000000d4: 	movslq	0x8(%rdx), %rsi
    000000d8: 	movslq	0xc(%rax), %r12
    000000dc: 	movslq	0x8(%rax), %r8
    000000e0: 	addq	%r13, %rsi
    000000e3: 	movslq	0x8(%rcx), %r13
    000000e7: 	movslq	0x10(%rax), %rbx
    000000eb: 	addq	%r12, %rsi
    000000ee: 	movslq	0x14(%rax), %r11
    000000f2: 	movslq	0x18(%rax), %r10
    000000f6: 	addq	%r13, %rsi
    000000f9: 	movslq	0x1c(%rax), %r9
    000000fd: 	leaq	0x5(%rsi), %r13
    00000101: 	addq	$0x2, %rsi
    00000105: 	cmovnsq	%rsi, %r13
    00000109: 	movslq	0xc(%rdx), %rsi
    0000010d: 	addq	%r8, %rsi
    00000110: 	sarq	$0x2, %r13
    00000114: 	leaq	(%rsi,%rbx), %rbp
    00000118: 	movslq	0xc(%rcx), %rsi
    0000011c: 	movq	%r13, %xmm0
    00000121: 	addq	%rbp, %rsi
    00000124: 	leaq	0x5(%rsi), %rbp
    00000128: 	addq	$0x2, %rsi
    0000012c: 	cmovsq	%rbp, %rsi
    00000130: 	sarq	$0x2, %rsi
    00000134: 	movq	%rsi, %xmm2
    00000139: 	movslq	0x10(%rdx), %rsi
    0000013d: 	punpcklqdq	%xmm2, %xmm0
    00000141: 	addq	%r12, %rsi
    00000144: 	movslq	0x10(%rcx), %r12
    00000148: 	addq	%r11, %rsi
    0000014b: 	addq	%r12, %rsi
    0000014e: 	leaq	0x5(%rsi), %r12
    00000152: 	addq	$0x2, %rsi
    00000156: 	cmovsq	%r12, %rsi
    0000015a: 	sarq	$0x2, %rsi
    0000015e: 	movq	%rsi, %xmm1
    00000163: 	movslq	0x14(%rdx), %rsi
    00000167: 	addq	%rbx, %rsi
    0000016a: 	movslq	0x14(%rcx), %rbx
    0000016e: 	addq	%r10, %rsi
    00000171: 	addq	%rbx, %rsi
    00000174: 	leaq	0x5(%rsi), %rbx
    00000178: 	addq	$0x2, %rsi
    0000017c: 	cmovsq	%rbx, %rsi
    00000180: 	sarq	$0x2, %rsi
    00000184: 	movq	%rsi, %xmm3
    00000189: 	movslq	0x18(%rdx), %rsi
    0000018d: 	punpcklqdq	%xmm3, %xmm1
    00000191: 	addq	%r11, %rsi
    00000194: 	movslq	0x18(%rcx), %r11
    00000198: 	shufps	$0x88, %xmm1, %xmm0
    0000019c: 	addq	%r9, %rsi
    0000019f: 	addq	%r11, %rsi
    000001a2: 	leaq	0x5(%rsi), %r11
    000001a6: 	addq	$0x2, %rsi
    000001aa: 	cmovsq	%r11, %rsi
    000001ae: 	sarq	$0x2, %rsi
    000001b2: 	movq	%rsi, %xmm1
    000001b7: 	movslq	0x1c(%rdx), %rsi
    000001bb: 	addq	%r10, %rsi
    000001be: 	movslq	0x20(%rax), %r10
    000001c2: 	addq	%r10, %rsi
    000001c5: 	movslq	0x1c(%rcx), %r10
    000001c9: 	addq	%r10, %rsi
    000001cc: 	leaq	0x5(%rsi), %r10
    000001d0: 	addq	$0x2, %rsi
    000001d4: 	cmovsq	%r10, %rsi
    000001d8: 	movslq	(%rax), %r10
    000001db: 	sarq	$0x2, %rsi
    000001df: 	movd	%esi, %xmm4
    000001e3: 	movslq	0x20(%rdx), %rsi
    000001e7: 	punpckldq	%xmm4, %xmm1
    000001eb: 	addq	%r9, %rsi
    000001ee: 	movslq	0x24(%rax), %r9
    000001f2: 	addq	%r9, %rsi
    000001f5: 	movslq	0x20(%rcx), %r9
    000001f9: 	addq	%r9, %rsi
    000001fc: 	leaq	0x5(%rsi), %r9
    00000200: 	addq	$0x2, %rsi
    00000204: 	cmovnsq	%rsi, %r9
    00000208: 	movslq	0x4(%rdx), %rsi
    0000020c: 	addq	%r10, %rsi
    0000020f: 	sarq	$0x2, %r9
    00000213: 	addq	%r8, %rsi
    00000216: 	movslq	0x4(%rcx), %r8
    0000021a: 	movl	%r9d, 0x20(%rdi)
    0000021e: 	movups	%xmm0, 0x8(%rdi)
    00000222: 	addq	%r8, %rsi
    00000225: 	movq	%xmm1, 0x18(%rdi)
    0000022a: 	leaq	0x5(%rsi), %r8
    0000022e: 	addq	$0x2, %rsi
    00000232: 	cmovsq	%r8, %rsi
    00000236: 	addq	$0x20, %rdx
    0000023a: 	addq	$0x20, %rax
    0000023e: 	addq	$0x20, %rcx
    00000242: 	addq	$0x20, %rdi
    00000246: 	sarq	$0x2, %rsi
    0000024a: 	movl	%esi, -0x1c(%rdi)
    0000024d: 	cmpq	%r15, %rdx
    00000250: 	jne	.Ltmp76 # Offset: 592
    00000256: 	movq	-0x30(%rsp), %rbp
    0000025b: 	movl	-0x1c(%rsp), %eax
.Ltmp75:
    0000025f: 	cmpl	-0x48(%rsp), %eax
    00000263: 	jge	.Ltmp77 # Offset: 611
    00000269: 	movl	-0x44(%rsp), %r15d
    0000026e: 	leal	-0x1(%rax,%r14), %esi
    00000273: 	movl	-0x40(%rsp), %r12d
    00000278: 	movslq	%esi, %rsi
    0000027b: 	movq	-0x38(%rsp), %r13
    00000280: 	leal	(%r15,%rax), %edx
    00000284: 	movslq	%edx, %rdx
    00000287: 	movslq	(%rbp,%rdx,4), %rcx
    0000028c: 	leal	0x1(%rax), %edx
    0000028f: 	leal	(%r14,%rdx), %edi
    00000293: 	movslq	%edi, %rdi
    00000296: 	leaq	(%rbp,%rdi,4), %r9
    0000029b: 	movl	(%r9), %r8d
    0000029e: 	addl	(%rbp,%rsi,4), %r8d
    000002a3: 	leal	(%r14,%rax), %esi
    000002a7: 	movslq	%r8d, %r8
    000002aa: 	movslq	%esi, %rsi
    000002ad: 	addq	%rcx, %r8
    000002b0: 	leal	(%r12,%rax), %ecx
    000002b4: 	movslq	%ecx, %rcx
    000002b7: 	movslq	(%rbp,%rcx,4), %rcx
    000002bc: 	addq	%r8, %rcx
    000002bf: 	leaq	0x5(%rcx), %r8
    000002c3: 	addq	$0x2, %rcx
    000002c7: 	cmovnsq	%rcx, %r8
    000002cb: 	sarq	$0x2, %r8
    000002cf: 	movl	%r8d, (%r13,%rsi,4)
    000002d4: 	cmpl	%edx, -0x48(%rsp)
    000002d8: 	jle	.Ltmp77 # Offset: 728
    000002de: 	leal	(%r15,%rdx), %ecx
    000002e2: 	addl	%r12d, %edx
    000002e5: 	movslq	%ecx, %rcx
    000002e8: 	movslq	%edx, %rdx
    000002eb: 	movslq	(%rbp,%rcx,4), %r11
    000002f0: 	leal	0x2(%rax), %ecx
    000002f3: 	movslq	(%rbp,%rdx,4), %rdx
    000002f8: 	leal	(%r14,%rcx), %r8d
    000002fc: 	movslq	%r8d, %r8
    000002ff: 	leaq	(%rbp,%r8,4), %r10
    00000304: 	movl	(%r10), %ebx
    00000307: 	addl	(%rbp,%rsi,4), %ebx
    0000030b: 	movslq	%ebx, %rsi
    0000030e: 	addq	%r11, %rsi
    00000311: 	addq	%rsi, %rdx
    00000314: 	leaq	0x5(%rdx), %rsi
    00000318: 	addq	$0x2, %rdx
    0000031c: 	cmovnsq	%rdx, %rsi
    00000320: 	sarq	$0x2, %rsi
    00000324: 	movl	%esi, (%r13,%rdi,4)
    00000329: 	cmpl	%ecx, -0x48(%rsp)
    0000032d: 	jle	.Ltmp77 # Offset: 813
    00000333: 	leal	(%r15,%rcx), %edx
    00000337: 	addl	%r12d, %ecx
    0000033a: 	movslq	%edx, %rdx
    0000033d: 	movslq	%ecx, %rcx
    00000340: 	movslq	(%rbp,%rdx,4), %r11
    00000345: 	leal	0x3(%rax), %edx
    00000348: 	movslq	(%rbp,%rcx,4), %rcx
    0000034d: 	leal	(%r14,%rdx), %esi
    00000351: 	movslq	%esi, %rsi
    00000354: 	leaq	(%rbp,%rsi,4), %rdi
    00000359: 	movl	(%rdi), %ebx
    0000035b: 	addl	(%r9), %ebx
    0000035e: 	movslq	%ebx, %r9
    00000361: 	addq	%r11, %r9
    00000364: 	addq	%r9, %rcx
    00000367: 	leaq	0x5(%rcx), %r9
    0000036b: 	addq	$0x2, %rcx
    0000036f: 	cmovnsq	%rcx, %r9
    00000373: 	sarq	$0x2, %r9
    00000377: 	movl	%r9d, (%r13,%r8,4)
    0000037c: 	cmpl	%edx, -0x48(%rsp)
    00000380: 	jle	.Ltmp77 # Offset: 896
    00000386: 	leal	(%r15,%rdx), %ecx
    0000038a: 	addl	%r12d, %edx
    0000038d: 	movl	(%r10), %r10d
    00000390: 	movl	%r15d, %ebx
    00000393: 	movslq	%ecx, %rcx
    00000396: 	movslq	%edx, %rdx
    00000399: 	movl	%r12d, %r15d
    0000039c: 	movq	%r13, %r12
    0000039f: 	movslq	(%rbp,%rcx,4), %r11
    000003a4: 	leal	0x4(%rax), %ecx
    000003a7: 	movslq	(%rbp,%rdx,4), %rdx
    000003ac: 	leal	(%r14,%rcx), %r8d
    000003b0: 	movslq	%r8d, %r8
    000003b3: 	leaq	(%rbp,%r8,4), %r9
    000003b8: 	addl	(%r9), %r10d
    000003bb: 	movslq	%r10d, %r10
    000003be: 	addq	%r11, %r10
    000003c1: 	addq	%r10, %rdx
    000003c4: 	leaq	0x5(%rdx), %r10
    000003c8: 	addq	$0x2, %rdx
    000003cc: 	cmovnsq	%rdx, %r10
    000003d0: 	sarq	$0x2, %r10
    000003d4: 	movl	%r10d, (%r13,%rsi,4)
    000003d9: 	movl	-0x48(%rsp), %r13d
    000003de: 	cmpl	%ecx, %r13d
    000003e1: 	jle	.Ltmp77 # Offset: 993
    000003e7: 	leal	(%rbx,%rcx), %edx
    000003ea: 	addl	%r15d, %ecx
    000003ed: 	movl	(%rdi), %edi
    000003ef: 	movslq	%edx, %rdx
    000003f2: 	movslq	%ecx, %rcx
    000003f5: 	movslq	(%rbp,%rdx,4), %r11
    000003fa: 	leal	0x5(%rax), %edx
    000003fd: 	movslq	(%rbp,%rcx,4), %rcx
    00000402: 	leal	(%r14,%rdx), %esi
    00000406: 	movslq	%esi, %rsi
    00000409: 	leaq	(%rbp,%rsi,4), %r10
    0000040e: 	addl	(%r10), %edi
    00000411: 	movslq	%edi, %rdi
    00000414: 	addq	%r11, %rdi
    00000417: 	addq	%rdi, %rcx
    0000041a: 	leaq	0x5(%rcx), %rdi
    0000041e: 	addq	$0x2, %rcx
    00000422: 	cmovnsq	%rcx, %rdi
    00000426: 	sarq	$0x2, %rdi
    0000042a: 	movl	%edi, (%r12,%r8,4)
    0000042e: 	cmpl	%edx, %r13d
    00000431: 	jle	.Ltmp77 # Offset: 1073
    00000437: 	leal	(%rbx,%rdx), %ecx
    0000043a: 	addl	%r15d, %edx
    0000043d: 	movl	(%r9), %r9d
    00000440: 	movslq	%ecx, %rcx
    00000443: 	movslq	%edx, %rdx
    00000446: 	movslq	(%rbp,%rcx,4), %r11
    0000044b: 	leal	0x6(%rax), %ecx
    0000044e: 	movslq	(%rbp,%rdx,4), %rdx
    00000453: 	leal	(%r14,%rcx), %edi
    00000457: 	movslq	%edi, %rdi
    0000045a: 	leaq	(%rbp,%rdi,4), %r8
    0000045f: 	addl	(%r8), %r9d
    00000462: 	movslq	%r9d, %r9
    00000465: 	addq	%r11, %r9
    00000468: 	movq	%r12, %r11
    0000046b: 	addq	%r9, %rdx
    0000046e: 	leaq	0x5(%rdx), %r9
    00000472: 	addq	$0x2, %rdx
    00000476: 	cmovnsq	%rdx, %r9
    0000047a: 	sarq	$0x2, %r9
    0000047e: 	movl	%r9d, (%r12,%rsi,4)
    00000482: 	cmpl	%ecx, %r13d
    00000485: 	jle	.Ltmp77 # Offset: 1157
    0000048b: 	leal	(%rbx,%rcx), %edx
    0000048e: 	addl	%r15d, %ecx
    00000491: 	movl	(%r10), %r10d
    00000494: 	movslq	%edx, %rdx
    00000497: 	movslq	%ecx, %rcx
    0000049a: 	movslq	(%rbp,%rdx,4), %r9
    0000049f: 	leal	0x7(%rax), %edx
    000004a2: 	movslq	(%rbp,%rcx,4), %rcx
    000004a7: 	leal	(%r14,%rdx), %esi
    000004ab: 	movslq	%esi, %rsi
    000004ae: 	addl	(%rbp,%rsi,4), %r10d
    000004b3: 	movslq	%r10d, %r10
    000004b6: 	addq	%r9, %r10
    000004b9: 	addq	%r10, %rcx
    000004bc: 	leaq	0x5(%rcx), %r9
    000004c0: 	addq	$0x2, %rcx
    000004c4: 	cmovnsq	%rcx, %r9
    000004c8: 	sarq	$0x2, %r9
    000004cc: 	movl	%r9d, (%r12,%rdi,4)
    000004d0: 	cmpl	%edx, %r13d
    000004d3: 	jle	.Ltmp77 # Offset: 1235
    000004d5: 	leal	(%rbx,%rdx), %ecx
    000004d8: 	leal	0x8(%rax,%r14), %eax
    000004dd: 	addl	%r15d, %edx
    000004e0: 	movl	(%r8), %edi
    000004e3: 	cltq
    000004e5: 	movslq	%ecx, %rcx
    000004e8: 	movslq	%edx, %rdx
    000004eb: 	addl	(%rbp,%rax,4), %edi
    000004ef: 	movslq	(%rbp,%rcx,4), %rcx
    000004f4: 	movslq	(%rbp,%rdx,4), %rax
    000004f9: 	movslq	%edi, %rdi
    000004fc: 	addq	%rcx, %rdi
    000004ff: 	addq	%rdi, %rax
    00000502: 	leaq	0x5(%rax), %rdx
    00000506: 	addq	$0x2, %rax
    0000050a: 	cmovnsq	%rax, %rdx
    0000050e: 	sarq	$0x2, %rdx
    00000512: 	movl	%edx, (%r11,%rsi,4)
.Ltmp77:
    00000516: 	movl	-0x20(%rsp), %eax
    0000051a: 	movl	-0x3c(%rsp), %edi
    0000051e: 	addl	%eax, -0x44(%rsp)
    00000522: 	addl	%eax, -0x40(%rsp)
    00000526: 	addl	%eax, %r14d
    00000529: 	cmpl	%edi, -0x28(%rsp)
    0000052d: 	jne	.Ltmp78 # Offset: 1325
.Ltmp74:
    00000533: 	popq	%rbx
    00000534: 	popq	%rbp
    00000535: 	popq	%r12
    00000537: 	popq	%r13
    00000539: 	popq	%r14
    0000053b: 	popq	%r15
    0000053d: 	retq # Offset: 1341
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 18
  State       : disassembled
  Address     : 0x6600
  Size        : 0x2a41
  MaxSize     : 0x2a50
  Offset      : 0x6600
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x1c0, %rsp
    00000014: 	movl	%ecx, 0x198(%rsp)
    0000001b: 	movl	%r8d, 0x18c(%rsp)
    00000023: 	movl	%eax, 0x188(%rsp)
    0000002a: 	cmpl	$0x1, %eax
    0000002d: 	jle	.Ltmp79 # Offset: 45
    00000033: 	movl	%ecx, %eax
    00000035: 	leal	-0x1(%rcx), %edx
    00000038: 	leal	-0x8(%rcx), %r14d
    0000003c: 	movq	%rsi, %r10
    0000003f: 	subl	$0xa, %eax
    00000042: 	movl	%edx, 0x174(%rsp)
    00000049: 	movl	%r8d, %r9d
    0000004c: 	xorl	%r15d, %r15d
    0000004f: 	movl	%eax, %edx
    00000051: 	movl	%eax, 0x194(%rsp)
    00000058: 	shrl	$0x6, %eax
    0000005b: 	leal	(%r8,%r8), %ebx
    0000005f: 	leal	-0x1(%rax), %ecx
    00000062: 	shll	$0x6, %eax
    00000065: 	shrl	$0x3, %edx
    00000068: 	movl	%r14d, -0x78(%rsp)
    0000006d: 	addl	$0x1, %eax
    00000070: 	movq	%rcx, 0x1a0(%rsp)
    00000078: 	movl	%eax, 0x19c(%rsp)
    0000007f: 	cltq
    00000081: 	movq	%rax, 0x1a8(%rsp)
    00000089: 	movl	%edx, %eax
    0000008b: 	movl	$0x1, 0x170(%rsp)
    00000096: 	shlq	$0x3, %rax
    0000009a: 	movq	%rax, 0x1b0(%rsp)
    000000a2: 	leal	0x9(,%rdx,8), %eax
    000000a9: 	movl	%ebx, %edx
    000000ab: 	movl	%eax, 0x190(%rsp)
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp86:
    000000b8: 	addl	$0x1, 0x170(%rsp)
    000000c0: 	cmpl	$0x1, -0x78(%rsp)
    000000c5: 	movl	$0x1, %eax
    000000ca: 	jle	.Ltmp80 # Offset: 202
    000000d0: 	movslq	%r9d, %r13
    000000d3: 	movslq	%r15d, %rbx
    000000d6: 	leaq	0x2(%r13,%r13), %r8
    000000db: 	leaq	0x12(%rbx,%rbx), %rbp
    000000e0: 	movq	%rbx, 0x180(%rsp)
    000000e8: 	movslq	%edx, %rbx
    000000eb: 	leaq	0xc(%r10,%r8), %rcx
    000000f0: 	leaq	0xe(%rdi,%r8), %rsi
    000000f5: 	movq	%rbx, 0x178(%rsp)
    000000fd: 	movq	%rcx, %r11
    00000100: 	leaq	(%r10,%r8), %rax
    00000104: 	leaq	0x12(%rbx,%rbx), %r12
    00000109: 	subq	%rsi, %r11
    0000010c: 	movq	%rax, %r14
    0000010f: 	addq	$0x2, %r11
    00000113: 	cmpq	$0x74, %r11
    00000117: 	movq	%rax, %r11
    0000011a: 	seta	%bl
    0000011d: 	subq	%rsi, %r11
    00000120: 	addq	$0xa, %r11
    00000124: 	cmpq	$0x7c, %r11
    00000128: 	seta	%r11b
    0000012c: 	andl	%ebx, %r11d
    0000012f: 	cmpl	$0x3f, 0x194(%rsp)
    00000137: 	seta	%bl
    0000013a: 	andl	%ebx, %r11d
    0000013d: 	leaq	(%rdi,%rbp), %rbx
    00000141: 	subq	%rbx, %r14
    00000144: 	leaq	0xe(%r14), %rbx
    00000148: 	cmpq	$0x7c, %rbx
    0000014c: 	seta	%bl
    0000014f: 	testb	%bl, %r11b
    00000152: 	je	.Ltmp81 # Offset: 338
    00000158: 	leaq	(%rdi,%r12), %rbx
    0000015c: 	movq	%rax, %r11
    0000015f: 	subq	%rbx, %r11
    00000162: 	addq	$0xe, %r11
    00000166: 	cmpq	$0x7c, %r11
    0000016a: 	jbe	.Ltmp81 # Offset: 362
    00000170: 	movq	0x1a0(%rsp), %r14
    00000178: 	leaq	-0x2(%rdi,%r8), %rbx
    0000017d: 	leaq	-0x10(%rdi,%r12), %r8
    00000182: 	leaq	-0x10(%rdi,%rbp), %r11
    00000187: 	leaq	0x1(%r14), %r12
    0000018b: 	movl	-0x78(%rsp), %r14d
    00000190: 	shlq	$0x7, %r12
    00000194: 	addq	%rax, %r12
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp82:
    000001a0: 	movdqu	(%rax), %xmm2
    000001a4: 	movdqu	0x10(%rax), %xmm7
    000001a9: 	subq	$-0x80, %rax
    000001ad: 	subq	$-0x80, %r11
    000001b1: 	movdqu	-0x60(%rax), %xmm4
    000001b6: 	movdqu	-0x50(%rax), %xmm6
    000001bb: 	subq	$-0x80, %rbx
    000001bf: 	subq	$-0x80, %rsi
    000001c3: 	movdqa	%xmm2, %xmm3
    000001c7: 	movdqa	%xmm2, %xmm5
    000001cb: 	punpcklwd	%xmm7, %xmm2
    000001cf: 	movdqu	-0x40(%rax), %xmm0
    000001d4: 	punpcklwd	%xmm7, %xmm3
    000001d8: 	punpckhwd	%xmm7, %xmm5
    000001dc: 	movdqa	%xmm4, %xmm7
    000001e0: 	subq	$-0x80, %r8
    000001e4: 	movdqa	%xmm3, %xmm10
    000001e9: 	punpcklwd	%xmm6, %xmm7
    000001ed: 	punpcklwd	%xmm5, %xmm3
    000001f1: 	movdqu	-0x30(%rax), %xmm8
    000001f7: 	punpckhwd	%xmm5, %xmm10
    000001fc: 	punpcklwd	%xmm5, %xmm2
    00000200: 	movdqa	%xmm4, %xmm5
    00000204: 	movdqu	-0x20(%rax), %xmm1
    00000209: 	punpckhwd	%xmm6, %xmm5
    0000020d: 	punpcklwd	%xmm10, %xmm3
    00000212: 	punpckhwd	%xmm10, %xmm2
    00000217: 	movdqu	-0x10(%rax), %xmm9
    0000021d: 	movdqa	%xmm7, %xmm10
    00000222: 	punpcklwd	%xmm6, %xmm4
    00000226: 	punpcklwd	%xmm5, %xmm7
    0000022a: 	subq	$-0x80, %rcx
    0000022e: 	punpckhwd	%xmm5, %xmm10
    00000233: 	punpcklwd	%xmm5, %xmm4
    00000237: 	movdqa	%xmm0, %xmm5
    0000023b: 	punpcklwd	%xmm8, %xmm5
    00000240: 	movdqa	%xmm0, %xmm6
    00000244: 	punpcklwd	%xmm10, %xmm7
    00000249: 	punpckhwd	%xmm10, %xmm4
    0000024e: 	punpckhwd	%xmm8, %xmm6
    00000253: 	movdqa	%xmm5, %xmm10
    00000258: 	punpcklwd	%xmm8, %xmm0
    0000025d: 	punpckhwd	%xmm6, %xmm10
    00000262: 	punpcklwd	%xmm6, %xmm5
    00000266: 	punpcklwd	%xmm6, %xmm0
    0000026a: 	movdqa	%xmm1, %xmm6
    0000026e: 	movdqa	%xmm1, %xmm8
    00000273: 	punpcklwd	%xmm9, %xmm6
    00000278: 	punpckhwd	%xmm9, %xmm8
    0000027d: 	punpcklwd	%xmm10, %xmm5
    00000282: 	punpckhwd	%xmm10, %xmm0
    00000287: 	punpcklwd	%xmm9, %xmm1
    0000028c: 	movdqa	%xmm6, %xmm10
    00000291: 	punpckhwd	%xmm8, %xmm10
    00000296: 	punpcklwd	%xmm8, %xmm6
    0000029b: 	punpcklwd	%xmm8, %xmm1
    000002a0: 	movdqa	%xmm3, %xmm8
    000002a5: 	movdqa	%xmm3, %xmm9
    000002aa: 	punpcklwd	%xmm10, %xmm6
    000002af: 	punpcklwd	%xmm7, %xmm8
    000002b4: 	punpckhwd	%xmm10, %xmm1
    000002b9: 	punpckhwd	%xmm7, %xmm9
    000002be: 	movdqa	%xmm8, %xmm10
    000002c3: 	punpcklwd	%xmm7, %xmm3
    000002c7: 	movdqa	%xmm5, %xmm7
    000002cb: 	punpckhwd	%xmm9, %xmm10
    000002d0: 	punpcklwd	%xmm6, %xmm7
    000002d4: 	punpcklwd	%xmm9, %xmm8
    000002d9: 	punpcklwd	%xmm9, %xmm3
    000002de: 	movdqa	%xmm5, %xmm9
    000002e3: 	punpcklwd	%xmm10, %xmm8
    000002e8: 	punpckhwd	%xmm6, %xmm9
    000002ed: 	punpckhwd	%xmm10, %xmm3
    000002f2: 	punpcklwd	%xmm6, %xmm5
    000002f6: 	movdqa	%xmm7, %xmm10
    000002fb: 	movdqa	%xmm2, %xmm6
    000002ff: 	punpcklwd	%xmm9, %xmm7
    00000304: 	punpckhwd	%xmm9, %xmm10
    00000309: 	punpcklwd	%xmm4, %xmm6
    0000030d: 	punpcklwd	%xmm9, %xmm5
    00000312: 	movdqa	%xmm2, %xmm9
    00000317: 	punpcklwd	%xmm10, %xmm7
    0000031c: 	punpckhwd	%xmm10, %xmm5
    00000321: 	punpckhwd	%xmm4, %xmm9
    00000326: 	movdqa	%xmm6, %xmm10
    0000032b: 	punpcklwd	%xmm4, %xmm2
    0000032f: 	movdqa	%xmm0, %xmm4
    00000333: 	punpckhwd	%xmm9, %xmm10
    00000338: 	punpcklwd	%xmm9, %xmm6
    0000033d: 	punpcklwd	%xmm1, %xmm4
    00000341: 	punpcklwd	%xmm9, %xmm2
    00000346: 	movdqa	%xmm0, %xmm9
    0000034b: 	punpckhwd	%xmm1, %xmm9
    00000350: 	punpcklwd	%xmm10, %xmm6
    00000355: 	punpckhwd	%xmm10, %xmm2
    0000035a: 	movdqa	%xmm8, %xmm15
    0000035f: 	movdqa	%xmm4, %xmm10
    00000364: 	punpcklwd	%xmm1, %xmm0
    00000368: 	punpckhwd	%xmm9, %xmm10
    0000036d: 	punpcklwd	%xmm7, %xmm15
    00000372: 	punpcklwd	%xmm9, %xmm4
    00000377: 	movdqa	%xmm8, %xmm1
    0000037c: 	punpcklwd	%xmm10, %xmm4
    00000381: 	punpcklwd	%xmm9, %xmm0
    00000386: 	punpckhwd	%xmm7, %xmm1
    0000038a: 	movdqa	%xmm15, %xmm9
    0000038f: 	punpcklwd	%xmm7, %xmm8
    00000394: 	movdqa	%xmm6, %xmm13
    00000399: 	punpckhwd	%xmm1, %xmm9
    0000039e: 	punpcklwd	%xmm1, %xmm15
    000003a3: 	punpcklwd	%xmm4, %xmm13
    000003a8: 	punpcklwd	%xmm1, %xmm8
    000003ad: 	movdqa	%xmm6, %xmm1
    000003b1: 	punpckhwd	%xmm4, %xmm1
    000003b5: 	movdqa	%xmm13, %xmm7
    000003ba: 	punpcklwd	%xmm4, %xmm6
    000003be: 	punpckhwd	%xmm1, %xmm7
    000003c2: 	punpcklwd	%xmm1, %xmm13
    000003c7: 	punpcklwd	%xmm1, %xmm6
    000003cb: 	punpcklwd	%xmm7, %xmm13
    000003d0: 	punpckhwd	%xmm7, %xmm6
    000003d4: 	movdqa	%xmm3, %xmm7
    000003d8: 	punpcklwd	%xmm5, %xmm7
    000003dc: 	movdqa	%xmm3, %xmm1
    000003e0: 	punpcklwd	%xmm5, %xmm3
    000003e4: 	movaps	%xmm6, 0xe8(%rsp)
    000003ec: 	punpckhwd	%xmm5, %xmm1
    000003f0: 	movdqa	%xmm7, %xmm4
    000003f4: 	punpckhwd	%xmm10, %xmm0
    000003f9: 	movdqu	-0x60(%r11), %xmm5
    000003ff: 	punpckhwd	%xmm1, %xmm4
    00000403: 	punpcklwd	%xmm1, %xmm3
    00000407: 	movdqa	%xmm2, %xmm6
    0000040b: 	movaps	%xmm13, -0x18(%rsp)
    00000411: 	punpckhwd	%xmm4, %xmm3
    00000415: 	punpcklwd	%xmm0, %xmm6
    00000419: 	punpcklwd	%xmm1, %xmm7
    0000041d: 	movdqa	%xmm2, %xmm1
    00000421: 	punpcklwd	%xmm0, %xmm2
    00000425: 	punpcklwd	%xmm4, %xmm7
    00000429: 	movaps	%xmm3, 0xf8(%rsp)
    00000431: 	punpckhwd	%xmm0, %xmm1
    00000435: 	movdqa	%xmm6, %xmm3
    00000439: 	movdqa	%xmm2, %xmm4
    0000043d: 	movaps	%xmm7, -0x8(%rsp)
    00000442: 	punpckhwd	%xmm1, %xmm3
    00000446: 	punpcklwd	%xmm1, %xmm6
    0000044a: 	punpcklwd	%xmm1, %xmm4
    0000044e: 	movdqu	-0x80(%r11), %xmm1
    00000454: 	movdqu	-0x70(%r11), %xmm7
    0000045a: 	punpcklwd	%xmm3, %xmm6
    0000045e: 	punpckhwd	%xmm3, %xmm4
    00000462: 	movdqu	-0x40(%r11), %xmm0
    00000468: 	movdqa	%xmm1, %xmm12
    0000046d: 	movdqa	%xmm1, %xmm2
    00000471: 	movaps	%xmm6, 0x8(%rsp)
    00000476: 	movdqu	-0x50(%r11), %xmm6
    0000047c: 	punpcklwd	%xmm7, %xmm12
    00000481: 	punpckhwd	%xmm7, %xmm2
    00000485: 	punpcklwd	%xmm7, %xmm1
    00000489: 	movaps	%xmm4, 0x108(%rsp)
    00000491: 	movdqa	%xmm12, %xmm3
    00000496: 	punpcklwd	%xmm2, %xmm1
    0000049a: 	punpckhwd	%xmm2, %xmm12
    0000049f: 	movdqu	-0x20(%r11), %xmm4
    000004a5: 	punpcklwd	%xmm2, %xmm3
    000004a9: 	punpckhwd	%xmm12, %xmm1
    000004ae: 	movdqa	%xmm5, %xmm2
    000004b2: 	punpcklwd	%xmm12, %xmm3
    000004b7: 	movdqa	%xmm5, %xmm12
    000004bc: 	punpckhwd	%xmm6, %xmm2
    000004c0: 	punpcklwd	%xmm6, %xmm12
    000004c5: 	punpckhwd	%xmm9, %xmm8
    000004ca: 	punpcklwd	%xmm6, %xmm5
    000004ce: 	movdqa	%xmm12, %xmm7
    000004d3: 	punpcklwd	%xmm2, %xmm5
    000004d7: 	punpckhwd	%xmm2, %xmm12
    000004dc: 	movaps	%xmm8, 0xd8(%rsp)
    000004e5: 	punpcklwd	%xmm2, %xmm7
    000004e9: 	movdqu	-0x30(%r11), %xmm8
    000004ef: 	punpckhwd	%xmm12, %xmm5
    000004f4: 	movdqa	%xmm0, %xmm2
    000004f8: 	punpcklwd	%xmm12, %xmm7
    000004fd: 	movdqa	%xmm0, %xmm12
    00000502: 	punpcklwd	%xmm9, %xmm15
    00000507: 	movdqu	-0x10(%r11), %xmm9
    0000050d: 	punpckhwd	%xmm8, %xmm12
    00000512: 	punpcklwd	%xmm8, %xmm2
    00000517: 	punpcklwd	%xmm8, %xmm0
    0000051c: 	movaps	%xmm15, -0x28(%rsp)
    00000522: 	movdqa	%xmm12, %xmm6
    00000527: 	movdqa	%xmm2, %xmm12
    0000052c: 	movdqa	%xmm4, %xmm11
    00000531: 	punpckhwd	%xmm6, %xmm12
    00000536: 	punpcklwd	%xmm6, %xmm2
    0000053a: 	punpcklwd	%xmm6, %xmm0
    0000053e: 	punpcklwd	%xmm12, %xmm2
    00000543: 	punpckhwd	%xmm12, %xmm0
    00000548: 	movdqa	%xmm4, %xmm12
    0000054d: 	punpcklwd	%xmm9, %xmm11
    00000552: 	punpckhwd	%xmm9, %xmm12
    00000557: 	movdqa	%xmm3, %xmm9
    0000055c: 	movdqa	%xmm12, %xmm8
    00000561: 	movdqa	%xmm11, %xmm6
    00000566: 	movdqa	%xmm11, %xmm12
    0000056b: 	movdqa	%xmm11, %xmm4
    00000570: 	movdqa	%xmm3, %xmm11
    00000575: 	punpckhwd	%xmm8, %xmm12
    0000057a: 	punpcklwd	%xmm7, %xmm11
    0000057f: 	punpcklwd	%xmm8, %xmm6
    00000584: 	punpcklwd	%xmm8, %xmm4
    00000589: 	punpckhwd	%xmm12, %xmm4
    0000058e: 	punpckhwd	%xmm7, %xmm9
    00000593: 	punpcklwd	%xmm12, %xmm6
    00000598: 	movdqa	%xmm11, %xmm8
    0000059d: 	movdqa	%xmm11, %xmm12
    000005a2: 	movdqa	%xmm11, %xmm3
    000005a7: 	movdqa	%xmm2, %xmm11
    000005ac: 	punpckhwd	%xmm9, %xmm12
    000005b1: 	punpcklwd	%xmm9, %xmm8
    000005b6: 	punpcklwd	%xmm6, %xmm11
    000005bb: 	punpcklwd	%xmm9, %xmm3
    000005c0: 	movdqa	%xmm2, %xmm9
    000005c5: 	punpckhwd	%xmm6, %xmm9
    000005ca: 	punpcklwd	%xmm12, %xmm8
    000005cf: 	punpckhwd	%xmm12, %xmm3
    000005d4: 	movdqa	%xmm11, %xmm7
    000005d9: 	movdqa	%xmm11, %xmm12
    000005de: 	movdqa	%xmm11, %xmm2
    000005e3: 	movdqa	%xmm1, %xmm11
    000005e8: 	punpckhwd	%xmm9, %xmm12
    000005ed: 	punpcklwd	%xmm9, %xmm7
    000005f2: 	punpcklwd	%xmm5, %xmm11
    000005f7: 	punpcklwd	%xmm9, %xmm2
    000005fc: 	movdqa	%xmm1, %xmm9
    00000601: 	punpckhwd	%xmm12, %xmm2
    00000606: 	punpckhwd	%xmm5, %xmm9
    0000060b: 	punpcklwd	%xmm12, %xmm7
    00000610: 	movdqa	%xmm11, %xmm6
    00000615: 	movdqa	%xmm11, %xmm12
    0000061a: 	movdqa	%xmm11, %xmm1
    0000061f: 	movdqa	%xmm0, %xmm5
    00000623: 	punpckhwd	%xmm9, %xmm12
    00000628: 	punpcklwd	%xmm9, %xmm6
    0000062d: 	punpcklwd	%xmm4, %xmm5
    00000631: 	punpcklwd	%xmm9, %xmm1
    00000636: 	movdqa	%xmm0, %xmm9
    0000063b: 	punpckhwd	%xmm4, %xmm9
    00000640: 	movdqa	%xmm5, %xmm11
    00000645: 	punpcklwd	%xmm4, %xmm0
    00000649: 	punpckhwd	%xmm9, %xmm11
    0000064e: 	punpcklwd	%xmm9, %xmm5
    00000653: 	punpcklwd	%xmm9, %xmm0
    00000658: 	punpcklwd	%xmm11, %xmm5
    0000065d: 	punpckhwd	%xmm11, %xmm0
    00000662: 	movdqa	%xmm8, %xmm11
    00000667: 	punpcklwd	%xmm7, %xmm11
    0000066c: 	punpcklwd	%xmm12, %xmm6
    00000671: 	punpckhwd	%xmm12, %xmm1
    00000676: 	movdqa	%xmm8, %xmm12
    0000067b: 	movdqa	%xmm11, %xmm15
    00000680: 	movdqa	%xmm11, %xmm9
    00000685: 	punpckhwd	%xmm7, %xmm12
    0000068a: 	movdqa	%xmm11, %xmm8
    0000068f: 	movdqa	%xmm3, %xmm11
    00000694: 	punpckhwd	%xmm12, %xmm9
    00000699: 	punpcklwd	%xmm12, %xmm15
    0000069e: 	punpcklwd	%xmm12, %xmm8
    000006a3: 	movdqa	%xmm6, %xmm12
    000006a8: 	punpcklwd	%xmm9, %xmm15
    000006ad: 	punpckhwd	%xmm9, %xmm8
    000006b2: 	punpckhwd	%xmm5, %xmm12
    000006b7: 	movdqa	%xmm3, %xmm9
    000006bc: 	punpcklwd	%xmm2, %xmm3
    000006c0: 	movaps	%xmm8, -0x78(%rsp)
    000006c6: 	movdqa	%xmm12, %xmm4
    000006cb: 	punpcklwd	%xmm2, %xmm9
    000006d0: 	movdqa	%xmm6, %xmm12
    000006d5: 	punpckhwd	%xmm2, %xmm11
    000006da: 	punpcklwd	%xmm5, %xmm12
    000006df: 	punpcklwd	%xmm5, %xmm6
    000006e3: 	movdqa	%xmm9, %xmm5
    000006e8: 	punpcklwd	%xmm11, %xmm3
    000006ed: 	punpcklwd	%xmm11, %xmm9
    000006f2: 	punpckhwd	%xmm11, %xmm5
    000006f7: 	movdqa	%xmm1, %xmm11
    000006fc: 	movdqa	%xmm12, %xmm7
    00000701: 	punpcklwd	%xmm5, %xmm9
    00000706: 	punpckhwd	%xmm5, %xmm3
    0000070a: 	movdqa	%xmm1, %xmm5
    0000070e: 	punpckhwd	%xmm0, %xmm11
    00000713: 	punpcklwd	%xmm0, %xmm5
    00000717: 	punpcklwd	%xmm0, %xmm1
    0000071b: 	movaps	%xmm3, -0x48(%rsp)
    00000720: 	punpcklwd	%xmm11, %xmm1
    00000725: 	movdqa	%xmm5, %xmm3
    00000729: 	punpckhwd	%xmm4, %xmm7
    0000072d: 	movdqu	-0x80(%rbx), %xmm0
    00000732: 	punpckhwd	%xmm11, %xmm3
    00000737: 	punpcklwd	%xmm4, %xmm12
    0000073c: 	punpcklwd	%xmm4, %xmm6
    00000740: 	movaps	%xmm9, 0x118(%rsp)
    00000749: 	punpcklwd	%xmm11, %xmm5
    0000074e: 	movdqa	%xmm1, %xmm11
    00000753: 	punpcklwd	%xmm7, %xmm12
    00000758: 	punpckhwd	%xmm7, %xmm6
    0000075c: 	punpcklwd	%xmm3, %xmm5
    00000760: 	punpckhwd	%xmm3, %xmm11
    00000765: 	movaps	%xmm12, -0x68(%rsp)
    0000076b: 	movaps	%xmm6, -0x58(%rsp)
    00000770: 	movdqa	%xmm0, %xmm1
    00000774: 	movaps	%xmm5, 0x128(%rsp)
    0000077c: 	movaps	%xmm11, 0x138(%rsp)
    00000785: 	movdqu	-0x70(%rbx), %xmm8
    0000078b: 	movdqu	-0x60(%rbx), %xmm7
    00000790: 	movdqu	-0x50(%rbx), %xmm5
    00000795: 	movdqu	-0x40(%rbx), %xmm2
    0000079a: 	punpckhwd	%xmm8, %xmm1
    0000079f: 	movdqa	%xmm7, %xmm14
    000007a4: 	movdqu	-0x30(%rbx), %xmm4
    000007a9: 	movdqu	-0x20(%rbx), %xmm6
    000007ae: 	movdqa	%xmm1, %xmm3
    000007b2: 	movdqa	%xmm0, %xmm1
    000007b6: 	punpckhwd	%xmm5, %xmm14
    000007bb: 	movdqu	-0x10(%rbx), %xmm9
    000007c1: 	punpcklwd	%xmm8, %xmm1
    000007c6: 	punpcklwd	%xmm8, %xmm0
    000007cb: 	movdqa	%xmm1, %xmm10
    000007d0: 	punpcklwd	%xmm3, %xmm0
    000007d4: 	punpcklwd	%xmm3, %xmm1
    000007d8: 	punpckhwd	%xmm3, %xmm10
    000007dd: 	movdqa	%xmm14, %xmm3
    000007e2: 	movdqa	%xmm7, %xmm14
    000007e7: 	punpcklwd	%xmm5, %xmm14
    000007ec: 	punpcklwd	%xmm10, %xmm1
    000007f1: 	punpckhwd	%xmm10, %xmm0
    000007f6: 	movdqa	%xmm14, %xmm8
    000007fb: 	movdqa	%xmm14, %xmm10
    00000800: 	movdqa	%xmm14, %xmm7
    00000805: 	movdqa	%xmm2, %xmm5
    00000809: 	punpckhwd	%xmm3, %xmm10
    0000080e: 	punpcklwd	%xmm3, %xmm8
    00000813: 	punpcklwd	%xmm4, %xmm5
    00000817: 	punpcklwd	%xmm3, %xmm7
    0000081b: 	movdqa	%xmm2, %xmm14
    00000820: 	punpckhwd	%xmm4, %xmm14
    00000825: 	punpcklwd	%xmm10, %xmm8
    0000082a: 	punpckhwd	%xmm10, %xmm7
    0000082f: 	punpcklwd	%xmm4, %xmm2
    00000833: 	movdqa	%xmm5, %xmm10
    00000838: 	punpcklwd	%xmm14, %xmm5
    0000083d: 	punpckhwd	%xmm14, %xmm10
    00000842: 	punpcklwd	%xmm14, %xmm2
    00000847: 	movdqa	%xmm6, %xmm14
    0000084c: 	punpckhwd	%xmm9, %xmm14
    00000851: 	punpcklwd	%xmm10, %xmm5
    00000856: 	punpckhwd	%xmm10, %xmm2
    0000085b: 	movdqa	%xmm14, %xmm4
    00000860: 	movdqa	%xmm6, %xmm14
    00000865: 	punpcklwd	%xmm9, %xmm14
    0000086a: 	movdqa	%xmm14, %xmm3
    0000086f: 	movdqa	%xmm14, %xmm10
    00000874: 	movdqa	%xmm14, %xmm6
    00000879: 	movdqa	%xmm1, %xmm14
    0000087e: 	punpckhwd	%xmm4, %xmm10
    00000883: 	punpcklwd	%xmm4, %xmm3
    00000887: 	punpckhwd	%xmm8, %xmm14
    0000088c: 	punpcklwd	%xmm4, %xmm6
    00000890: 	punpcklwd	%xmm10, %xmm3
    00000895: 	movdqa	%xmm14, %xmm9
    0000089a: 	movdqa	%xmm1, %xmm14
    0000089f: 	punpckhwd	%xmm10, %xmm6
    000008a4: 	punpcklwd	%xmm8, %xmm14
    000008a9: 	movdqa	%xmm14, %xmm4
    000008ae: 	movdqa	%xmm14, %xmm10
    000008b3: 	movdqa	%xmm14, %xmm1
    000008b8: 	movdqa	%xmm5, %xmm14
    000008bd: 	punpckhwd	%xmm9, %xmm10
    000008c2: 	punpcklwd	%xmm9, %xmm4
    000008c7: 	punpckhwd	%xmm3, %xmm14
    000008cc: 	punpcklwd	%xmm9, %xmm1
    000008d1: 	punpcklwd	%xmm10, %xmm4
    000008d6: 	movdqa	%xmm14, %xmm9
    000008db: 	movdqa	%xmm5, %xmm14
    000008e0: 	punpckhwd	%xmm10, %xmm1
    000008e5: 	punpcklwd	%xmm3, %xmm14
    000008ea: 	movdqa	%xmm4, %xmm12
    000008ef: 	movdqa	%xmm14, %xmm8
    000008f4: 	movdqa	%xmm14, %xmm10
    000008f9: 	movdqa	%xmm14, %xmm5
    000008fe: 	movdqa	%xmm0, %xmm14
    00000903: 	punpckhwd	%xmm9, %xmm10
    00000908: 	punpcklwd	%xmm9, %xmm8
    0000090d: 	punpckhwd	%xmm7, %xmm14
    00000912: 	punpcklwd	%xmm9, %xmm5
    00000917: 	punpcklwd	%xmm10, %xmm8
    0000091c: 	movdqa	%xmm14, %xmm9
    00000921: 	movdqa	%xmm0, %xmm14
    00000926: 	punpckhwd	%xmm10, %xmm5
    0000092b: 	punpcklwd	%xmm7, %xmm14
    00000930: 	punpcklwd	%xmm8, %xmm12
    00000935: 	movdqa	%xmm14, %xmm3
    0000093a: 	movdqa	%xmm14, %xmm10
    0000093f: 	movdqa	%xmm14, %xmm0
    00000944: 	movdqa	%xmm2, %xmm14
    00000949: 	punpckhwd	%xmm9, %xmm10
    0000094e: 	punpcklwd	%xmm9, %xmm3
    00000953: 	punpckhwd	%xmm6, %xmm14
    00000958: 	punpcklwd	%xmm9, %xmm0
    0000095d: 	punpcklwd	%xmm10, %xmm3
    00000962: 	movdqa	%xmm14, %xmm9
    00000967: 	movdqa	%xmm2, %xmm14
    0000096c: 	punpckhwd	%xmm10, %xmm0
    00000971: 	punpcklwd	%xmm6, %xmm14
    00000976: 	movdqa	%xmm14, %xmm7
    0000097b: 	movdqa	%xmm14, %xmm10
    00000980: 	movdqa	%xmm14, %xmm2
    00000985: 	movdqa	%xmm4, %xmm14
    0000098a: 	punpcklwd	%xmm8, %xmm4
    0000098f: 	punpckhwd	%xmm9, %xmm10
    00000994: 	punpckhwd	%xmm8, %xmm14
    00000999: 	punpcklwd	%xmm9, %xmm7
    0000099e: 	punpcklwd	%xmm9, %xmm2
    000009a3: 	movdqa	%xmm14, %xmm6
    000009a8: 	movdqa	%xmm12, %xmm14
    000009ad: 	punpcklwd	%xmm10, %xmm7
    000009b2: 	punpckhwd	%xmm6, %xmm14
    000009b7: 	punpcklwd	%xmm6, %xmm12
    000009bc: 	punpcklwd	%xmm6, %xmm4
    000009c0: 	punpckhwd	%xmm14, %xmm4
    000009c5: 	punpcklwd	%xmm14, %xmm12
    000009ca: 	movdqa	%xmm3, %xmm14
    000009cf: 	punpckhwd	%xmm10, %xmm2
    000009d4: 	punpckhwd	%xmm7, %xmm14
    000009d9: 	movdqa	%xmm1, %xmm10
    000009de: 	movaps	%xmm12, 0x148(%rsp)
    000009e7: 	movdqa	%xmm14, %xmm6
    000009ec: 	punpckhwd	%xmm5, %xmm10
    000009f1: 	movdqa	%xmm3, %xmm14
    000009f6: 	movdqu	-0x70(%rsi), %xmm12
    000009fc: 	punpcklwd	%xmm7, %xmm14
    00000a01: 	punpcklwd	%xmm7, %xmm3
    00000a05: 	movdqa	%xmm10, %xmm7
    00000a0a: 	movdqa	%xmm1, %xmm10
    00000a0f: 	movdqa	%xmm14, %xmm8
    00000a14: 	punpcklwd	%xmm6, %xmm3
    00000a18: 	punpcklwd	%xmm5, %xmm10
    00000a1d: 	punpckhwd	%xmm6, %xmm8
    00000a22: 	punpcklwd	%xmm6, %xmm14
    00000a27: 	punpcklwd	%xmm5, %xmm1
    00000a2b: 	movdqa	%xmm10, %xmm6
    00000a30: 	punpckhwd	%xmm7, %xmm10
    00000a35: 	punpcklwd	%xmm7, %xmm6
    00000a39: 	punpcklwd	%xmm7, %xmm1
    00000a3d: 	movdqa	%xmm0, %xmm5
    00000a41: 	punpcklwd	%xmm10, %xmm6
    00000a46: 	punpckhwd	%xmm10, %xmm1
    00000a4b: 	movdqa	%xmm0, %xmm10
    00000a50: 	punpckhwd	%xmm2, %xmm10
    00000a55: 	punpcklwd	%xmm2, %xmm5
    00000a59: 	punpcklwd	%xmm2, %xmm0
    00000a5d: 	pxor	%xmm2, %xmm2
    00000a61: 	movdqa	%xmm10, %xmm7
    00000a66: 	movdqa	%xmm5, %xmm10
    00000a6b: 	pcmpgtw	%xmm6, %xmm2
    00000a6f: 	punpckhwd	%xmm7, %xmm10
    00000a74: 	punpcklwd	%xmm7, %xmm5
    00000a78: 	punpcklwd	%xmm7, %xmm0
    00000a7c: 	punpcklwd	%xmm10, %xmm5
    00000a81: 	movdqa	%xmm6, %xmm13
    00000a86: 	punpckhwd	%xmm10, %xmm0
    00000a8b: 	movdqa	%xmm6, %xmm10
    00000a90: 	punpcklwd	%xmm8, %xmm14
    00000a95: 	movdqu	-0x20(%rsi), %xmm6
    00000a9a: 	punpcklwd	%xmm2, %xmm10
    00000a9f: 	punpckhwd	%xmm2, %xmm13
    00000aa4: 	pxor	%xmm2, %xmm2
    00000aa8: 	movaps	%xmm14, -0x38(%rsp)
    00000aae: 	pcmpgtw	%xmm5, %xmm2
    00000ab2: 	movaps	%xmm10, 0x18(%rsp)
    00000ab8: 	movdqa	%xmm5, %xmm10
    00000abd: 	movdqa	%xmm4, %xmm14
    00000ac2: 	movdqa	%xmm4, %xmm11
    00000ac7: 	punpckhwd	%xmm8, %xmm3
    00000acc: 	movaps	%xmm13, 0x28(%rsp)
    00000ad2: 	movdqa	%xmm3, %xmm8
    00000ad7: 	punpcklwd	%xmm2, %xmm10
    00000adc: 	punpckhwd	%xmm2, %xmm5
    00000ae0: 	pxor	%xmm2, %xmm2
    00000ae4: 	pcmpgtw	%xmm4, %xmm2
    00000ae8: 	movaps	%xmm5, 0x48(%rsp)
    00000aed: 	movdqa	%xmm1, %xmm5
    00000af1: 	movaps	%xmm10, 0x38(%rsp)
    00000af7: 	punpcklwd	%xmm2, %xmm14
    00000afc: 	punpckhwd	%xmm2, %xmm11
    00000b01: 	pxor	%xmm2, %xmm2
    00000b05: 	pcmpgtw	%xmm3, %xmm2
    00000b09: 	movaps	%xmm14, 0x58(%rsp)
    00000b0f: 	movaps	%xmm11, 0x68(%rsp)
    00000b15: 	punpcklwd	%xmm2, %xmm8
    00000b1a: 	punpckhwd	%xmm2, %xmm3
    00000b1e: 	pxor	%xmm2, %xmm2
    00000b22: 	pcmpgtw	%xmm1, %xmm2
    00000b26: 	movaps	%xmm3, 0x88(%rsp)
    00000b2e: 	movaps	%xmm8, 0x78(%rsp)
    00000b34: 	punpckhwd	%xmm2, %xmm1
    00000b38: 	punpcklwd	%xmm2, %xmm5
    00000b3c: 	movdqa	%xmm0, %xmm2
    00000b40: 	movaps	%xmm1, 0xa8(%rsp)
    00000b48: 	pxor	%xmm1, %xmm1
    00000b4c: 	pcmpgtw	%xmm0, %xmm1
    00000b50: 	movaps	%xmm5, 0x98(%rsp)
    00000b58: 	movdqu	-0x60(%rsi), %xmm5
    00000b5d: 	movdqa	%xmm5, %xmm7
    00000b61: 	punpcklwd	%xmm1, %xmm2
    00000b65: 	punpckhwd	%xmm1, %xmm0
    00000b69: 	movdqu	-0x80(%rsi), %xmm1
    00000b6e: 	movaps	%xmm2, 0xb8(%rsp)
    00000b76: 	movdqa	%xmm5, %xmm2
    00000b7a: 	movdqa	%xmm1, %xmm10
    00000b7f: 	movdqa	%xmm1, %xmm3
    00000b83: 	movaps	%xmm0, 0xc8(%rsp)
    00000b8b: 	movdqu	-0x40(%rsi), %xmm0
    00000b90: 	punpckhwd	%xmm12, %xmm10
    00000b95: 	punpcklwd	%xmm12, %xmm3
    00000b9a: 	movdqu	-0x50(%rsi), %xmm12
    00000ba0: 	movdqa	%xmm3, %xmm14
    00000ba5: 	punpcklwd	%xmm10, %xmm3
    00000baa: 	movdqa	%xmm0, %xmm8
    00000baf: 	punpcklwd	%xmm12, %xmm2
    00000bb4: 	punpckhwd	%xmm12, %xmm7
    00000bb9: 	punpckhwd	%xmm10, %xmm14
    00000bbe: 	movdqu	-0x30(%rsi), %xmm12
    00000bc4: 	movdqa	%xmm2, %xmm13
    00000bc9: 	punpcklwd	%xmm7, %xmm2
    00000bcd: 	punpcklwd	%xmm14, %xmm3
    00000bd2: 	punpckhwd	%xmm7, %xmm13
    00000bd7: 	movdqa	%xmm7, %xmm9
    00000bdc: 	movdqa	%xmm3, %xmm7
    00000be0: 	punpcklwd	%xmm13, %xmm2
    00000be5: 	punpckhwd	%xmm12, %xmm8
    00000bea: 	punpcklwd	%xmm2, %xmm3
    00000bee: 	punpckhwd	%xmm2, %xmm7
    00000bf2: 	movdqa	%xmm3, %xmm2
    00000bf6: 	punpcklwd	%xmm7, %xmm3
    00000bfa: 	punpckhwd	%xmm7, %xmm2
    00000bfe: 	movdqu	-0x20(%rsi), %xmm7
    00000c03: 	punpcklwd	%xmm2, %xmm3
    00000c07: 	movdqa	%xmm0, %xmm2
    00000c0b: 	punpcklwd	%xmm12, %xmm2
    00000c10: 	movdqu	-0x10(%rsi), %xmm12
    00000c16: 	movdqa	%xmm2, %xmm4
    00000c1a: 	punpcklwd	%xmm8, %xmm2
    00000c1f: 	punpcklwd	%xmm12, %xmm6
    00000c24: 	punpckhwd	%xmm12, %xmm7
    00000c29: 	movdqu	-0x70(%rsi), %xmm12
    00000c2f: 	punpckhwd	%xmm8, %xmm4
    00000c34: 	movdqa	%xmm6, %xmm11
    00000c39: 	punpcklwd	%xmm7, %xmm6
    00000c3d: 	punpcklwd	%xmm4, %xmm2
    00000c41: 	punpckhwd	%xmm7, %xmm11
    00000c46: 	punpcklwd	%xmm12, %xmm1
    00000c4b: 	movaps	%xmm11, 0x158(%rsp)
    00000c54: 	movdqu	-0x50(%rsi), %xmm12
    00000c5a: 	punpcklwd	%xmm11, %xmm6
    00000c5f: 	movdqa	%xmm2, %xmm11
    00000c64: 	punpcklwd	%xmm6, %xmm2
    00000c68: 	punpckhwd	%xmm6, %xmm11
    00000c6d: 	punpcklwd	%xmm10, %xmm1
    00000c72: 	punpcklwd	%xmm12, %xmm5
    00000c77: 	movdqu	-0x30(%rsi), %xmm12
    00000c7d: 	movdqa	%xmm2, %xmm6
    00000c81: 	punpcklwd	%xmm11, %xmm2
    00000c86: 	punpckhwd	%xmm11, %xmm6
    00000c8b: 	punpcklwd	%xmm9, %xmm5
    00000c90: 	punpckhwd	%xmm14, %xmm1
    00000c95: 	movdqu	-0x80(%r8), %xmm9
    00000c9b: 	punpcklwd	%xmm12, %xmm0
    00000ca0: 	punpcklwd	%xmm6, %xmm2
    00000ca4: 	movdqu	-0x10(%rsi), %xmm12
    00000caa: 	movdqa	%xmm3, %xmm6
    00000cae: 	punpcklwd	%xmm8, %xmm0
    00000cb3: 	punpcklwd	%xmm2, %xmm3
    00000cb7: 	punpckhwd	%xmm2, %xmm6
    00000cbb: 	movdqu	-0x10(%r8), %xmm8
    00000cc1: 	punpckhwd	%xmm4, %xmm0
    00000cc5: 	movdqu	-0x20(%rsi), %xmm4
    00000cca: 	movdqa	%xmm3, %xmm11
    00000ccf: 	movdqa	%xmm3, %xmm2
    00000cd3: 	punpckhwd	%xmm13, %xmm5
    00000cd8: 	punpckhwd	%xmm6, %xmm2
    00000cdc: 	punpcklwd	%xmm6, %xmm11
    00000ce1: 	movdqu	-0x70(%r8), %xmm6
    00000ce7: 	punpcklwd	%xmm12, %xmm4
    00000cec: 	punpcklwd	%xmm2, %xmm11
    00000cf1: 	movdqa	%xmm1, %xmm2
    00000cf5: 	punpcklwd	%xmm7, %xmm4
    00000cf9: 	punpcklwd	%xmm5, %xmm1
    00000cfd: 	punpckhwd	%xmm5, %xmm2
    00000d01: 	movdqu	-0x60(%r8), %xmm5
    00000d07: 	movdqa	%xmm1, %xmm3
    00000d0b: 	punpcklwd	%xmm2, %xmm1
    00000d0f: 	movdqu	-0x20(%r8), %xmm7
    00000d15: 	punpckhwd	0x158(%rsp), %xmm4
    00000d1e: 	punpckhwd	%xmm2, %xmm3
    00000d22: 	movdqa	%xmm0, %xmm2
    00000d26: 	movdqa	%xmm5, %xmm13
    00000d2b: 	punpcklwd	%xmm4, %xmm0
    00000d2f: 	punpckhwd	%xmm4, %xmm2
    00000d33: 	punpcklwd	%xmm3, %xmm1
    00000d37: 	movdqu	-0x50(%r8), %xmm4
    00000d3d: 	movdqa	%xmm0, %xmm3
    00000d41: 	punpcklwd	%xmm2, %xmm0
    00000d45: 	pxor	%xmm12, %xmm12
    00000d4a: 	punpckhwd	%xmm2, %xmm3
    00000d4e: 	movdqa	%xmm1, %xmm2
    00000d52: 	punpcklwd	%xmm4, %xmm13
    00000d57: 	punpcklwd	%xmm3, %xmm0
    00000d5b: 	movdqu	-0x40(%r8), %xmm3
    00000d61: 	punpcklwd	%xmm0, %xmm1
    00000d65: 	punpckhwd	%xmm0, %xmm2
    00000d69: 	movdqa	%xmm1, %xmm14
    00000d6e: 	movdqa	%xmm1, %xmm0
    00000d72: 	movdqa	%xmm9, %xmm1
    00000d77: 	punpckhwd	%xmm2, %xmm0
    00000d7b: 	punpcklwd	%xmm2, %xmm14
    00000d80: 	punpckhwd	%xmm6, %xmm1
    00000d84: 	movdqu	-0x30(%r8), %xmm2
    00000d8a: 	punpcklwd	%xmm0, %xmm14
    00000d8f: 	movdqa	%xmm9, %xmm0
    00000d94: 	punpcklwd	%xmm6, %xmm9
    00000d99: 	punpcklwd	%xmm6, %xmm0
    00000d9d: 	punpcklwd	%xmm1, %xmm9
    00000da2: 	movdqa	%xmm13, %xmm6
    00000da7: 	movdqa	%xmm0, %xmm10
    00000dac: 	punpcklwd	%xmm1, %xmm0
    00000db0: 	punpckhwd	%xmm1, %xmm10
    00000db5: 	movdqa	%xmm5, %xmm1
    00000db9: 	movdqa	%xmm13, %xmm5
    00000dbe: 	punpckhwd	%xmm4, %xmm1
    00000dc2: 	punpcklwd	%xmm10, %xmm0
    00000dc7: 	punpckhwd	%xmm10, %xmm9
    00000dcc: 	movdqa	%xmm3, %xmm4
    00000dd0: 	movdqa	%xmm13, %xmm10
    00000dd5: 	punpcklwd	%xmm1, %xmm6
    00000dd9: 	punpckhwd	%xmm1, %xmm10
    00000dde: 	punpcklwd	%xmm2, %xmm4
    00000de2: 	punpcklwd	%xmm1, %xmm5
    00000de6: 	movdqa	%xmm3, %xmm1
    00000dea: 	punpcklwd	%xmm10, %xmm6
    00000def: 	punpckhwd	%xmm10, %xmm5
    00000df4: 	punpckhwd	%xmm2, %xmm1
    00000df8: 	movdqa	%xmm4, %xmm10
    00000dfd: 	punpcklwd	%xmm2, %xmm3
    00000e01: 	punpckhwd	%xmm1, %xmm10
    00000e06: 	punpcklwd	%xmm1, %xmm4
    00000e0a: 	punpcklwd	%xmm1, %xmm3
    00000e0e: 	movdqa	%xmm7, %xmm1
    00000e12: 	punpcklwd	%xmm10, %xmm4
    00000e17: 	punpckhwd	%xmm10, %xmm3
    00000e1c: 	punpckhwd	%xmm8, %xmm1
    00000e21: 	movdqa	%xmm4, %xmm13
    00000e26: 	movdqa	%xmm1, %xmm2
    00000e2a: 	movdqa	%xmm7, %xmm1
    00000e2e: 	punpcklwd	%xmm8, %xmm7
    00000e33: 	punpcklwd	%xmm8, %xmm1
    00000e38: 	punpcklwd	%xmm2, %xmm7
    00000e3c: 	movdqa	%xmm0, %xmm8
    00000e41: 	movdqa	%xmm1, %xmm10
    00000e46: 	punpcklwd	%xmm2, %xmm1
    00000e4a: 	punpckhwd	%xmm6, %xmm8
    00000e4f: 	punpckhwd	%xmm2, %xmm10
    00000e54: 	movdqa	%xmm0, %xmm2
    00000e58: 	punpcklwd	%xmm6, %xmm0
    00000e5c: 	punpcklwd	%xmm6, %xmm2
    00000e60: 	punpckhwd	%xmm10, %xmm7
    00000e65: 	punpcklwd	%xmm10, %xmm1
    00000e6a: 	movdqa	%xmm2, %xmm10
    00000e6f: 	punpcklwd	%xmm8, %xmm0
    00000e74: 	punpcklwd	%xmm8, %xmm2
    00000e79: 	punpckhwd	%xmm8, %xmm10
    00000e7e: 	movdqa	%xmm4, %xmm8
    00000e83: 	punpcklwd	%xmm1, %xmm13
    00000e88: 	punpckhwd	%xmm1, %xmm8
    00000e8d: 	movdqa	%xmm9, %xmm1
    00000e92: 	punpcklwd	%xmm10, %xmm2
    00000e97: 	punpckhwd	%xmm10, %xmm0
    00000e9c: 	punpckhwd	%xmm5, %xmm1
    00000ea0: 	movdqa	%xmm13, %xmm6
    00000ea5: 	movdqa	%xmm13, %xmm10
    00000eaa: 	movdqa	%xmm13, %xmm4
    00000eaf: 	punpcklwd	%xmm8, %xmm6
    00000eb4: 	punpckhwd	%xmm8, %xmm10
    00000eb9: 	punpcklwd	%xmm8, %xmm4
    00000ebe: 	movdqa	%xmm1, %xmm8
    00000ec3: 	movdqa	%xmm9, %xmm1
    00000ec8: 	punpcklwd	%xmm10, %xmm6
    00000ecd: 	punpckhwd	%xmm10, %xmm4
    00000ed2: 	punpcklwd	%xmm5, %xmm1
    00000ed6: 	punpcklwd	%xmm5, %xmm9
    00000edb: 	movdqa	%xmm3, %xmm5
    00000edf: 	movdqa	%xmm1, %xmm10
    00000ee4: 	punpcklwd	%xmm7, %xmm5
    00000ee8: 	punpcklwd	%xmm8, %xmm1
    00000eed: 	punpckhwd	%xmm8, %xmm10
    00000ef2: 	punpcklwd	%xmm8, %xmm9
    00000ef7: 	movdqa	%xmm3, %xmm8
    00000efc: 	punpckhwd	%xmm10, %xmm9
    00000f01: 	punpckhwd	%xmm7, %xmm8
    00000f06: 	punpcklwd	%xmm10, %xmm1
    00000f0b: 	punpcklwd	%xmm7, %xmm3
    00000f0f: 	movdqa	%xmm5, %xmm10
    00000f14: 	movdqa	%xmm2, %xmm13
    00000f19: 	punpckhwd	%xmm8, %xmm10
    00000f1e: 	punpcklwd	%xmm6, %xmm13
    00000f23: 	punpcklwd	%xmm8, %xmm5
    00000f28: 	punpcklwd	%xmm8, %xmm3
    00000f2d: 	movdqa	%xmm2, %xmm7
    00000f31: 	punpcklwd	%xmm10, %xmm5
    00000f36: 	punpckhwd	%xmm10, %xmm3
    00000f3b: 	punpckhwd	%xmm6, %xmm7
    00000f3f: 	movdqa	%xmm13, %xmm8
    00000f44: 	punpcklwd	%xmm6, %xmm2
    00000f48: 	movdqa	%xmm1, %xmm10
    00000f4d: 	punpckhwd	%xmm7, %xmm8
    00000f52: 	punpcklwd	%xmm5, %xmm10
    00000f57: 	punpcklwd	%xmm7, %xmm13
    00000f5c: 	punpcklwd	%xmm7, %xmm2
    00000f60: 	movdqa	%xmm1, %xmm7
    00000f64: 	punpcklwd	%xmm8, %xmm13
    00000f69: 	punpckhwd	%xmm8, %xmm2
    00000f6e: 	punpckhwd	%xmm5, %xmm7
    00000f72: 	movdqa	%xmm10, %xmm6
    00000f77: 	movdqa	%xmm10, %xmm8
    00000f7c: 	movdqa	%xmm10, %xmm1
    00000f81: 	movdqa	%xmm0, %xmm5
    00000f85: 	punpckhwd	%xmm7, %xmm8
    00000f8a: 	punpcklwd	%xmm4, %xmm5
    00000f8e: 	punpcklwd	%xmm7, %xmm6
    00000f92: 	punpcklwd	%xmm7, %xmm1
    00000f96: 	movdqa	%xmm0, %xmm7
    00000f9a: 	punpcklwd	%xmm8, %xmm6
    00000f9f: 	punpckhwd	%xmm8, %xmm1
    00000fa4: 	punpckhwd	%xmm4, %xmm7
    00000fa8: 	movdqa	%xmm5, %xmm8
    00000fad: 	punpcklwd	%xmm4, %xmm0
    00000fb1: 	punpckhwd	%xmm7, %xmm8
    00000fb6: 	punpcklwd	%xmm7, %xmm5
    00000fba: 	punpcklwd	%xmm7, %xmm0
    00000fbe: 	movdqa	%xmm9, %xmm4
    00000fc3: 	movdqa	%xmm9, %xmm7
    00000fc8: 	movdqa	%xmm9, %xmm10
    00000fcd: 	movdqa	-0x38(%rsp), %xmm9
    00000fd4: 	punpcklwd	%xmm3, %xmm4
    00000fd8: 	punpckhwd	%xmm3, %xmm7
    00000fdc: 	punpcklwd	%xmm8, %xmm5
    00000fe1: 	punpckhwd	%xmm8, %xmm0
    00000fe6: 	pcmpgtw	%xmm9, %xmm12
    00000feb: 	movdqa	%xmm4, %xmm8
    00000ff0: 	punpcklwd	%xmm3, %xmm10
    00000ff5: 	punpckhwd	%xmm7, %xmm8
    00000ffa: 	punpcklwd	%xmm7, %xmm4
    00000ffe: 	punpcklwd	%xmm7, %xmm10
    00001003: 	movdqa	-0x68(%rsp), %xmm7
    00001009: 	pxor	%xmm3, %xmm3
    0000100d: 	punpcklwd	%xmm8, %xmm4
    00001012: 	punpckhwd	%xmm8, %xmm10
    00001017: 	punpcklwd	%xmm12, %xmm9
    0000101c: 	movdqa	%xmm12, %xmm8
    00001021: 	pcmpgtw	%xmm7, %xmm3
    00001025: 	pxor	%xmm12, %xmm12
    0000102a: 	pcmpgtw	%xmm6, %xmm12
    0000102f: 	punpcklwd	%xmm3, %xmm7
    00001033: 	paddd	%xmm7, %xmm9
    00001038: 	movdqa	%xmm12, %xmm7
    0000103d: 	paddd	0x38(%rsp), %xmm9
    00001044: 	movdqa	%xmm6, %xmm12
    00001049: 	punpckhwd	%xmm7, %xmm6
    0000104d: 	punpcklwd	%xmm7, %xmm12
    00001052: 	paddd	%xmm12, %xmm9
    00001057: 	pxor	%xmm12, %xmm12
    0000105c: 	movaps	%xmm9, 0x158(%rsp)
    00001065: 	movdqa	-0x68(%rsp), %xmm9
    0000106c: 	punpckhwd	%xmm3, %xmm9
    00001071: 	movdqa	-0x38(%rsp), %xmm3
    00001077: 	punpckhwd	%xmm8, %xmm3
    0000107c: 	paddd	%xmm9, %xmm3
    00001081: 	paddd	0x48(%rsp), %xmm3
    00001087: 	movdqa	0x118(%rsp), %xmm9
    00001091: 	pcmpgtw	%xmm9, %xmm12
    00001096: 	paddd	%xmm6, %xmm3
    0000109a: 	movaps	%xmm3, -0x68(%rsp)
    0000109f: 	movdqa	%xmm9, %xmm3
    000010a4: 	movdqa	%xmm12, %xmm7
    000010a9: 	punpcklwd	%xmm12, %xmm3
    000010ae: 	pxor	%xmm12, %xmm12
    000010b3: 	pcmpgtw	%xmm5, %xmm12
    000010b8: 	paddd	0x18(%rsp), %xmm3
    000010be: 	paddd	0x58(%rsp), %xmm3
    000010c4: 	movdqa	%xmm12, %xmm6
    000010c9: 	movdqa	%xmm5, %xmm12
    000010ce: 	punpcklwd	%xmm6, %xmm12
    000010d3: 	punpckhwd	%xmm6, %xmm5
    000010d7: 	movdqa	%xmm12, %xmm8
    000010dc: 	pxor	%xmm12, %xmm12
    000010e1: 	paddd	%xmm3, %xmm8
    000010e6: 	movdqa	%xmm9, %xmm3
    000010eb: 	movdqa	0x128(%rsp), %xmm9
    000010f5: 	punpckhwd	%xmm7, %xmm3
    000010f9: 	paddd	0x28(%rsp), %xmm3
    000010ff: 	paddd	0x68(%rsp), %xmm3
    00001105: 	pcmpgtw	%xmm9, %xmm12
    0000110a: 	movdqa	%xmm3, %xmm7
    0000110e: 	movdqa	%xmm9, %xmm3
    00001113: 	paddd	%xmm5, %xmm7
    00001117: 	pxor	%xmm5, %xmm5
    0000111b: 	pcmpgtw	%xmm4, %xmm5
    0000111f: 	movdqa	%xmm12, %xmm6
    00001124: 	punpcklwd	%xmm12, %xmm3
    00001129: 	movaps	%xmm7, -0x38(%rsp)
    0000112e: 	movdqa	%xmm4, %xmm12
    00001133: 	paddd	0x38(%rsp), %xmm3
    00001139: 	paddd	0x78(%rsp), %xmm3
    0000113f: 	punpcklwd	%xmm5, %xmm12
    00001144: 	punpckhwd	%xmm5, %xmm4
    00001148: 	movdqa	%xmm12, %xmm7
    0000114d: 	pxor	%xmm12, %xmm12
    00001152: 	paddd	%xmm3, %xmm7
    00001156: 	pcmpgtw	%xmm2, %xmm12
    0000115b: 	movdqa	%xmm9, %xmm3
    00001160: 	punpckhwd	%xmm6, %xmm3
    00001164: 	paddd	0x48(%rsp), %xmm3
    0000116a: 	paddd	0x88(%rsp), %xmm3
    00001173: 	movdqa	%xmm3, %xmm5
    00001177: 	paddd	%xmm4, %xmm5
    0000117b: 	movdqa	-0x78(%rsp), %xmm4
    00001181: 	movdqa	%xmm5, %xmm6
    00001185: 	pxor	%xmm5, %xmm5
    00001189: 	pcmpgtw	%xmm4, %xmm5
    0000118d: 	movdqa	%xmm4, %xmm3
    00001191: 	movdqa	%xmm12, %xmm4
    00001196: 	movdqa	%xmm2, %xmm12
    0000119b: 	punpckhwd	%xmm4, %xmm2
    0000119f: 	punpcklwd	%xmm4, %xmm12
    000011a4: 	punpcklwd	%xmm5, %xmm3
    000011a8: 	paddd	0x58(%rsp), %xmm3
    000011ae: 	paddd	0x98(%rsp), %xmm3
    000011b7: 	paddd	%xmm12, %xmm3
    000011bc: 	pxor	%xmm12, %xmm12
    000011c1: 	movaps	%xmm3, 0x38(%rsp)
    000011c6: 	movdqa	-0x78(%rsp), %xmm3
    000011cc: 	punpckhwd	%xmm5, %xmm3
    000011d0: 	paddd	0x68(%rsp), %xmm3
    000011d6: 	paddd	0xa8(%rsp), %xmm3
    000011df: 	movdqa	%xmm3, %xmm5
    000011e3: 	paddd	%xmm2, %xmm5
    000011e7: 	movdqa	-0x58(%rsp), %xmm2
    000011ed: 	pcmpgtw	%xmm2, %xmm12
    000011f2: 	movdqa	%xmm12, %xmm4
    000011f7: 	punpcklwd	%xmm12, %xmm2
    000011fc: 	pxor	%xmm12, %xmm12
    00001201: 	pcmpgtw	%xmm1, %xmm12
    00001206: 	paddd	0x78(%rsp), %xmm2
    0000120c: 	paddd	0xb8(%rsp), %xmm2
    00001215: 	movdqa	%xmm12, %xmm3
    0000121a: 	movdqa	%xmm1, %xmm12
    0000121f: 	punpcklwd	%xmm3, %xmm12
    00001224: 	punpckhwd	%xmm3, %xmm1
    00001228: 	paddd	%xmm12, %xmm2
    0000122d: 	pxor	%xmm12, %xmm12
    00001232: 	movaps	%xmm2, -0x78(%rsp)
    00001237: 	movdqa	-0x58(%rsp), %xmm2
    0000123d: 	pcmpgtw	%xmm11, %xmm12
    00001242: 	punpckhwd	%xmm4, %xmm2
    00001246: 	movdqa	-0x48(%rsp), %xmm4
    0000124c: 	paddd	0x88(%rsp), %xmm2
    00001255: 	paddd	0xc8(%rsp), %xmm2
    0000125e: 	paddd	%xmm1, %xmm2
    00001262: 	pxor	%xmm1, %xmm1
    00001266: 	pcmpgtw	%xmm4, %xmm1
    0000126a: 	movaps	%xmm2, -0x58(%rsp)
    0000126f: 	movdqa	%xmm1, %xmm3
    00001273: 	movdqa	%xmm4, %xmm1
    00001277: 	movdqa	%xmm12, %xmm4
    0000127c: 	punpcklwd	%xmm3, %xmm1
    00001280: 	movdqa	%xmm11, %xmm12
    00001285: 	paddd	0x98(%rsp), %xmm1
    0000128e: 	punpcklwd	%xmm4, %xmm12
    00001293: 	paddd	%xmm12, %xmm1
    00001298: 	pxor	%xmm12, %xmm12
    0000129d: 	pcmpgtw	%xmm0, %xmm12
    000012a2: 	movdqa	%xmm12, %xmm2
    000012a7: 	movdqa	%xmm0, %xmm12
    000012ac: 	punpcklwd	%xmm2, %xmm12
    000012b1: 	punpckhwd	%xmm2, %xmm0
    000012b5: 	paddd	%xmm12, %xmm1
    000012ba: 	movdqa	%xmm11, %xmm12
    000012bf: 	movdqa	0x138(%rsp), %xmm11
    000012c9: 	movaps	%xmm1, 0x48(%rsp)
    000012ce: 	movdqa	-0x48(%rsp), %xmm1
    000012d4: 	punpckhwd	%xmm4, %xmm12
    000012d9: 	movdqa	%xmm11, %xmm4
    000012de: 	punpckhwd	%xmm3, %xmm1
    000012e2: 	movdqa	%xmm12, %xmm3
    000012e7: 	paddd	0xa8(%rsp), %xmm1
    000012f0: 	movdqa	0x148(%rsp), %xmm12
    000012fa: 	paddd	%xmm1, %xmm3
    000012fe: 	paddd	%xmm0, %xmm3
    00001302: 	pxor	%xmm0, %xmm0
    00001306: 	pcmpgtw	%xmm11, %xmm0
    0000130b: 	movdqa	%xmm0, %xmm2
    0000130f: 	punpcklwd	%xmm0, %xmm4
    00001313: 	pxor	%xmm0, %xmm0
    00001317: 	paddd	0xb8(%rsp), %xmm4
    00001320: 	pcmpgtw	%xmm14, %xmm0
    00001325: 	movdqa	%xmm0, %xmm9
    0000132a: 	movdqa	%xmm14, %xmm0
    0000132f: 	punpcklwd	%xmm9, %xmm0
    00001334: 	punpckhwd	%xmm9, %xmm14
    00001339: 	paddd	%xmm0, %xmm4
    0000133d: 	pxor	%xmm0, %xmm0
    00001341: 	pcmpgtw	%xmm10, %xmm0
    00001346: 	movdqa	%xmm0, %xmm1
    0000134a: 	movdqa	%xmm10, %xmm0
    0000134f: 	punpcklwd	%xmm1, %xmm0
    00001353: 	punpckhwd	%xmm1, %xmm10
    00001358: 	movdqa	%xmm12, %xmm1
    0000135d: 	paddd	%xmm0, %xmm4
    00001361: 	movdqa	%xmm11, %xmm0
    00001366: 	movdqa	%xmm13, %xmm11
    0000136b: 	punpckhwd	%xmm2, %xmm0
    0000136f: 	movdqa	%xmm14, %xmm2
    00001374: 	movdqa	%xmm15, %xmm14
    00001379: 	paddd	0xc8(%rsp), %xmm0
    00001382: 	paddd	%xmm0, %xmm2
    00001386: 	pxor	%xmm0, %xmm0
    0000138a: 	pcmpgtw	%xmm15, %xmm0
    0000138f: 	paddd	%xmm10, %xmm2
    00001394: 	punpcklwd	%xmm0, %xmm14
    00001399: 	movdqa	%xmm14, %xmm9
    0000139e: 	pxor	%xmm14, %xmm14
    000013a3: 	pcmpgtw	%xmm12, %xmm14
    000013a8: 	movdqa	%xmm14, %xmm10
    000013ad: 	punpcklwd	%xmm14, %xmm1
    000013b2: 	pxor	%xmm14, %xmm14
    000013b7: 	pcmpgtw	%xmm13, %xmm14
    000013bc: 	paddd	%xmm9, %xmm1
    000013c1: 	paddd	0x18(%rsp), %xmm1
    000013c7: 	punpcklwd	%xmm14, %xmm11
    000013cc: 	punpckhwd	%xmm14, %xmm13
    000013d1: 	pxor	%xmm14, %xmm14
    000013d6: 	paddd	%xmm11, %xmm1
    000013db: 	movdqa	%xmm15, %xmm11
    000013e0: 	paddd	DATAat0x49440(%rip), %xmm1
    000013e8: 	punpckhwd	%xmm0, %xmm11
    000013ed: 	movdqa	%xmm12, %xmm0
    000013f2: 	pxor	%xmm12, %xmm12
    000013f7: 	punpckhwd	%xmm10, %xmm0
    000013fc: 	pcmpgtd	%xmm1, %xmm14
    00001401: 	pand	DATAat0x49450(%rip), %xmm14
    0000140a: 	paddd	%xmm11, %xmm0
    0000140f: 	paddd	0x28(%rsp), %xmm0
    00001415: 	movdqa	0x158(%rsp), %xmm11
    0000141f: 	movaps	%xmm14, -0x48(%rsp)
    00001425: 	paddd	%xmm13, %xmm0
    0000142a: 	paddd	DATAat0x49440(%rip), %xmm0
    00001432: 	pxor	%xmm13, %xmm13
    00001437: 	pcmpgtd	%xmm0, %xmm13
    0000143c: 	pand	DATAat0x49450(%rip), %xmm13
    00001445: 	paddd	DATAat0x49440(%rip), %xmm11
    0000144e: 	movdqa	DATAat0x49440(%rip), %xmm14
    00001457: 	paddd	DATAat0x49440(%rip), %xmm5
    0000145f: 	pcmpgtd	%xmm11, %xmm12
    00001464: 	paddd	DATAat0x49440(%rip), %xmm7
    0000146c: 	pand	DATAat0x49450(%rip), %xmm12
    00001475: 	paddd	%xmm8, %xmm14
    0000147a: 	pxor	%xmm8, %xmm8
    0000147f: 	movdqa	DATAat0x49440(%rip), %xmm15
    00001488: 	movdqa	0x38(%rsp), %xmm10
    0000148f: 	pcmpgtd	%xmm14, %xmm8
    00001494: 	movaps	%xmm7, 0x78(%rsp)
    00001499: 	paddd	%xmm13, %xmm0
    0000149e: 	pand	DATAat0x49450(%rip), %xmm8
    000014a7: 	paddd	%xmm6, %xmm15
    000014ac: 	movaps	%xmm12, 0x28(%rsp)
    000014b2: 	pxor	%xmm6, %xmm6
    000014b6: 	paddd	DATAat0x49440(%rip), %xmm10
    000014bf: 	movdqa	-0x68(%rsp), %xmm9
    000014c6: 	movdqa	-0x38(%rsp), %xmm12
    000014cd: 	movaps	%xmm8, 0x68(%rsp)
    000014d3: 	pxor	%xmm8, %xmm8
    000014d8: 	movaps	%xmm14, -0x38(%rsp)
    000014de: 	movdqa	%xmm5, %xmm14
    000014e3: 	pxor	%xmm5, %xmm5
    000014e7: 	paddd	DATAat0x49440(%rip), %xmm9
    000014f0: 	pcmpgtd	%xmm7, %xmm8
    000014f5: 	pcmpgtd	%xmm10, %xmm6
    000014fa: 	movaps	%xmm11, -0x68(%rsp)
    00001500: 	paddd	DATAat0x49440(%rip), %xmm12
    00001509: 	pcmpgtd	%xmm14, %xmm5
    0000150e: 	pxor	%xmm11, %xmm11
    00001513: 	pxor	%xmm7, %xmm7
    00001517: 	movaps	%xmm9, 0x18(%rsp)
    0000151d: 	pcmpgtd	%xmm9, %xmm11
    00001522: 	pxor	%xmm9, %xmm9
    00001527: 	movaps	%xmm12, 0x58(%rsp)
    0000152d: 	pand	DATAat0x49450(%rip), %xmm8
    00001536: 	pcmpgtd	%xmm12, %xmm9
    0000153b: 	pcmpgtd	%xmm15, %xmm7
    00001540: 	pand	DATAat0x49450(%rip), %xmm6
    00001548: 	movaps	%xmm15, 0x88(%rsp)
    00001551: 	pand	DATAat0x49450(%rip), %xmm5
    00001559: 	pand	DATAat0x49450(%rip), %xmm7
    00001561: 	movaps	%xmm8, 0x98(%rsp)
    0000156a: 	pxor	%xmm15, %xmm15
    0000156f: 	pand	DATAat0x49450(%rip), %xmm11
    00001578: 	movaps	%xmm10, 0x38(%rsp)
    0000157e: 	pand	DATAat0x49450(%rip), %xmm9
    00001587: 	movaps	%xmm6, 0xa8(%rsp)
    0000158f: 	psrad	$0x2, %xmm0
    00001594: 	movaps	%xmm5, 0xb8(%rsp)
    0000159c: 	movdqa	-0x78(%rsp), %xmm5
    000015a2: 	paddd	DATAat0x49440(%rip), %xmm5
    000015aa: 	movdqa	DATAat0x49440(%rip), %xmm6
    000015b2: 	paddd	DATAat0x49440(%rip), %xmm4
    000015ba: 	paddd	-0x48(%rsp), %xmm1
    000015c0: 	movdqa	0x48(%rsp), %xmm10
    000015c7: 	movdqa	%xmm5, %xmm12
    000015cc: 	paddd	%xmm2, %xmm6
    000015d0: 	pxor	%xmm2, %xmm2
    000015d4: 	paddd	DATAat0x49440(%rip), %xmm3
    000015dc: 	movdqa	-0x58(%rsp), %xmm5
    000015e2: 	pcmpgtd	%xmm4, %xmm2
    000015e6: 	pand	DATAat0x49450(%rip), %xmm2
    000015ee: 	paddd	DATAat0x49440(%rip), %xmm10
    000015f7: 	psrad	$0x2, %xmm1
    000015fc: 	movdqa	%xmm3, %xmm8
    00001601: 	pxor	%xmm3, %xmm3
    00001605: 	movaps	%xmm2, 0x48(%rsp)
    0000160a: 	pxor	%xmm2, %xmm2
    0000160e: 	movdqa	%xmm1, %xmm13
    00001613: 	punpcklwd	%xmm0, %xmm1
    00001617: 	pcmpgtd	%xmm6, %xmm2
    0000161b: 	pcmpgtd	%xmm12, %xmm15
    00001620: 	punpckhwd	%xmm0, %xmm13
    00001625: 	movdqa	-0x68(%rsp), %xmm0
    0000162b: 	pand	DATAat0x49450(%rip), %xmm2
    00001633: 	pcmpgtd	%xmm10, %xmm3
    00001638: 	paddd	0x28(%rsp), %xmm0
    0000163e: 	pand	DATAat0x49450(%rip), %xmm3
    00001646: 	paddd	DATAat0x49440(%rip), %xmm5
    0000164e: 	movaps	%xmm2, 0xc8(%rsp)
    00001656: 	movdqa	%xmm13, %xmm2
    0000165b: 	movdqa	%xmm1, %xmm13
    00001660: 	pand	DATAat0x49450(%rip), %xmm15
    00001669: 	punpckhwd	%xmm2, %xmm13
    0000166e: 	punpcklwd	%xmm2, %xmm1
    00001672: 	movaps	%xmm3, -0x58(%rsp)
    00001677: 	pxor	%xmm3, %xmm3
    0000167b: 	punpcklwd	%xmm13, %xmm1
    00001680: 	psrad	$0x2, %xmm0
    00001685: 	movaps	%xmm15, -0x78(%rsp)
    0000168b: 	pxor	%xmm15, %xmm15
    00001690: 	pcmpgtd	%xmm5, %xmm15
    00001695: 	pcmpgtd	%xmm8, %xmm3
    0000169a: 	movdqa	%xmm1, %xmm13
    0000169f: 	movdqa	0x18(%rsp), %xmm1
    000016a5: 	pand	DATAat0x49450(%rip), %xmm15
    000016ae: 	psubw	-0x28(%rsp), %xmm13
    000016b5: 	paddd	%xmm11, %xmm1
    000016ba: 	movdqa	%xmm0, %xmm11
    000016bf: 	pand	DATAat0x49450(%rip), %xmm3
    000016c7: 	psrad	$0x2, %xmm1
    000016cc: 	paddd	%xmm15, %xmm5
    000016d1: 	punpckhwd	%xmm1, %xmm11
    000016d6: 	punpcklwd	%xmm1, %xmm0
    000016da: 	movdqa	0x58(%rsp), %xmm1
    000016e0: 	paddd	%xmm8, %xmm3
    000016e5: 	movdqa	%xmm11, %xmm2
    000016ea: 	psrad	$0x2, %xmm3
    000016ef: 	movdqa	%xmm0, %xmm11
    000016f4: 	punpckhwd	%xmm2, %xmm11
    000016f9: 	punpcklwd	%xmm2, %xmm0
    000016fd: 	paddd	%xmm9, %xmm1
    00001702: 	punpcklwd	%xmm11, %xmm0
    00001707: 	psrad	$0x2, %xmm1
    0000170c: 	movdqa	%xmm0, %xmm11
    00001711: 	movdqa	-0x38(%rsp), %xmm0
    00001717: 	paddd	0x68(%rsp), %xmm0
    0000171d: 	psubw	-0x18(%rsp), %xmm11
    00001724: 	psrad	$0x2, %xmm0
    00001729: 	movdqa	%xmm0, %xmm9
    0000172e: 	punpcklwd	%xmm1, %xmm0
    00001732: 	punpckhwd	%xmm1, %xmm9
    00001737: 	movdqa	0x88(%rsp), %xmm1
    00001740: 	movdqa	%xmm9, %xmm2
    00001745: 	movdqa	%xmm0, %xmm9
    0000174a: 	punpckhwd	%xmm2, %xmm9
    0000174f: 	punpcklwd	%xmm2, %xmm0
    00001753: 	paddd	%xmm7, %xmm1
    00001757: 	punpcklwd	%xmm9, %xmm0
    0000175c: 	psrad	$0x2, %xmm1
    00001761: 	movdqa	%xmm0, %xmm9
    00001766: 	movdqa	0x78(%rsp), %xmm0
    0000176c: 	paddd	0x98(%rsp), %xmm0
    00001775: 	psubw	-0x8(%rsp), %xmm9
    0000177c: 	psrad	$0x2, %xmm0
    00001781: 	movdqa	%xmm0, %xmm7
    00001785: 	punpcklwd	%xmm1, %xmm0
    00001789: 	punpckhwd	%xmm1, %xmm7
    0000178d: 	movdqa	%xmm7, %xmm2
    00001791: 	movdqa	%xmm0, %xmm7
    00001795: 	punpckhwd	%xmm2, %xmm7
    00001799: 	punpcklwd	%xmm2, %xmm0
    0000179d: 	movdqa	%xmm5, %xmm2
    000017a1: 	punpcklwd	%xmm7, %xmm0
    000017a5: 	psrad	$0x2, %xmm2
    000017aa: 	psubw	0x8(%rsp), %xmm0
    000017b0: 	movdqa	%xmm0, %xmm7
    000017b4: 	movdqa	0x38(%rsp), %xmm0
    000017ba: 	paddd	0x48(%rsp), %xmm4
    000017c0: 	movdqa	0xb8(%rsp), %xmm1
    000017c9: 	paddd	0xa8(%rsp), %xmm0
    000017d2: 	psrad	$0x2, %xmm4
    000017d7: 	paddd	%xmm14, %xmm1
    000017dc: 	psrad	$0x2, %xmm0
    000017e1: 	psrad	$0x2, %xmm1
    000017e6: 	movdqa	%xmm0, %xmm14
    000017eb: 	punpcklwd	%xmm1, %xmm0
    000017ef: 	punpckhwd	%xmm1, %xmm14
    000017f4: 	movdqa	%xmm0, %xmm1
    000017f8: 	punpcklwd	%xmm14, %xmm0
    000017fd: 	punpckhwd	%xmm14, %xmm1
    00001802: 	movdqa	0xd8(%rsp), %xmm14
    0000180c: 	punpcklwd	%xmm1, %xmm0
    00001810: 	movdqa	-0x78(%rsp), %xmm1
    00001816: 	psubw	%xmm14, %xmm0
    0000181b: 	paddd	%xmm12, %xmm1
    00001820: 	movdqa	0x108(%rsp), %xmm12
    0000182a: 	psrad	$0x2, %xmm1
    0000182f: 	movdqa	%xmm1, %xmm5
    00001833: 	punpcklwd	%xmm2, %xmm1
    00001837: 	punpckhwd	%xmm2, %xmm5
    0000183b: 	movdqa	%xmm1, %xmm15
    00001840: 	punpckhwd	%xmm5, %xmm15
    00001845: 	punpcklwd	%xmm5, %xmm1
    00001849: 	movdqa	-0x58(%rsp), %xmm5
    0000184f: 	punpcklwd	%xmm15, %xmm1
    00001854: 	movdqa	0xe8(%rsp), %xmm15
    0000185e: 	paddd	%xmm10, %xmm5
    00001863: 	movdqa	%xmm5, %xmm2
    00001867: 	psubw	%xmm15, %xmm1
    0000186c: 	psrad	$0x2, %xmm2
    00001871: 	movdqa	%xmm2, %xmm5
    00001875: 	punpcklwd	%xmm3, %xmm2
    00001879: 	punpckhwd	%xmm3, %xmm5
    0000187d: 	movdqa	%xmm2, %xmm10
    00001882: 	movdqa	0xc8(%rsp), %xmm3
    0000188b: 	punpckhwd	%xmm5, %xmm10
    00001890: 	punpcklwd	%xmm5, %xmm2
    00001894: 	movdqa	%xmm4, %xmm5
    00001898: 	paddd	%xmm6, %xmm3
    0000189c: 	movdqa	%xmm13, %xmm6
    000018a1: 	punpcklwd	%xmm10, %xmm2
    000018a6: 	pmulhw	DATAat0x49460(%rip), %xmm6
    000018ae: 	movdqa	0xf8(%rsp), %xmm10
    000018b8: 	psrad	$0x2, %xmm3
    000018bd: 	punpcklwd	%xmm3, %xmm4
    000018c1: 	punpckhwd	%xmm3, %xmm5
    000018c5: 	movdqa	%xmm4, %xmm3
    000018c9: 	punpcklwd	%xmm5, %xmm4
    000018cd: 	psubw	%xmm10, %xmm2
    000018d2: 	punpckhwd	%xmm5, %xmm3
    000018d6: 	movdqa	DATAat0x49460(%rip), %xmm5
    000018de: 	punpcklwd	%xmm3, %xmm4
    000018e2: 	pmullw	%xmm13, %xmm5
    000018e7: 	psubw	%xmm12, %xmm4
    000018ec: 	movdqa	%xmm5, %xmm3
    000018f0: 	punpckhwd	%xmm6, %xmm5
    000018f4: 	punpcklwd	%xmm6, %xmm3
    000018f8: 	psrad	$0x6, %xmm5
    000018fd: 	psrad	$0x6, %xmm3
    00001902: 	movdqa	%xmm3, %xmm6
    00001906: 	punpcklwd	%xmm5, %xmm3
    0000190a: 	punpckhwd	%xmm5, %xmm6
    0000190e: 	movdqa	%xmm3, %xmm5
    00001912: 	punpckhwd	%xmm6, %xmm5
    00001916: 	punpcklwd	%xmm6, %xmm3
    0000191a: 	movdqa	DATAat0x49460(%rip), %xmm6
    00001922: 	punpcklwd	%xmm5, %xmm3
    00001926: 	paddw	-0x28(%rsp), %xmm3
    0000192c: 	pmullw	%xmm11, %xmm6
    00001931: 	pmulhw	DATAat0x49460(%rip), %xmm11
    0000193a: 	pextrw	$0x0, %xmm3, %ebp
    0000193f: 	movw	%bp, -0x80(%rax)
    00001943: 	pextrw	$0x1, %xmm3, %ebp
    00001948: 	movdqa	%xmm6, %xmm5
    0000194c: 	punpckhwd	%xmm11, %xmm6
    00001951: 	punpcklwd	%xmm11, %xmm5
    00001956: 	psrad	$0x6, %xmm6
    0000195b: 	psrad	$0x6, %xmm5
    00001960: 	movdqa	%xmm5, %xmm8
    00001965: 	punpcklwd	%xmm6, %xmm5
    00001969: 	punpckhwd	%xmm6, %xmm8
    0000196e: 	movdqa	%xmm5, %xmm6
    00001972: 	punpckhwd	%xmm8, %xmm6
    00001977: 	punpcklwd	%xmm8, %xmm5
    0000197c: 	movdqa	DATAat0x49460(%rip), %xmm8
    00001985: 	punpcklwd	%xmm6, %xmm5
    00001989: 	paddw	-0x18(%rsp), %xmm5
    0000198f: 	pmullw	%xmm9, %xmm8
    00001994: 	pmulhw	DATAat0x49460(%rip), %xmm9
    0000199d: 	movdqa	%xmm8, %xmm6
    000019a2: 	punpckhwd	%xmm9, %xmm8
    000019a7: 	punpcklwd	%xmm9, %xmm6
    000019ac: 	psrad	$0x6, %xmm8
    000019b2: 	psrad	$0x6, %xmm6
    000019b7: 	movdqa	%xmm6, %xmm9
    000019bc: 	punpcklwd	%xmm8, %xmm6
    000019c1: 	punpckhwd	%xmm8, %xmm9
    000019c6: 	movdqa	%xmm6, %xmm8
    000019cb: 	punpckhwd	%xmm9, %xmm8
    000019d0: 	punpcklwd	%xmm9, %xmm6
    000019d5: 	movdqa	%xmm7, %xmm9
    000019da: 	pmulhw	DATAat0x49460(%rip), %xmm9
    000019e3: 	punpcklwd	%xmm8, %xmm6
    000019e8: 	paddw	-0x8(%rsp), %xmm6
    000019ee: 	movdqa	DATAat0x49460(%rip), %xmm8
    000019f7: 	pmullw	%xmm7, %xmm8
    000019fc: 	movdqa	%xmm8, %xmm7
    00001a01: 	punpckhwd	%xmm9, %xmm8
    00001a06: 	punpcklwd	%xmm9, %xmm7
    00001a0b: 	psrad	$0x6, %xmm8
    00001a11: 	psrad	$0x6, %xmm7
    00001a16: 	movdqa	%xmm7, %xmm9
    00001a1b: 	punpcklwd	%xmm8, %xmm7
    00001a20: 	punpckhwd	%xmm8, %xmm9
    00001a25: 	movdqa	%xmm7, %xmm8
    00001a2a: 	punpckhwd	%xmm9, %xmm8
    00001a2f: 	punpcklwd	%xmm9, %xmm7
    00001a34: 	movdqa	DATAat0x49460(%rip), %xmm9
    00001a3d: 	punpcklwd	%xmm8, %xmm7
    00001a42: 	paddw	0x8(%rsp), %xmm7
    00001a48: 	pmullw	%xmm0, %xmm9
    00001a4d: 	pmulhw	DATAat0x49460(%rip), %xmm0
    00001a55: 	movdqa	%xmm9, %xmm8
    00001a5a: 	punpckhwd	%xmm0, %xmm9
    00001a5f: 	punpcklwd	%xmm0, %xmm8
    00001a64: 	movdqa	%xmm9, %xmm0
    00001a69: 	psrad	$0x6, %xmm0
    00001a6e: 	psrad	$0x6, %xmm8
    00001a74: 	movdqa	%xmm8, %xmm9
    00001a79: 	punpcklwd	%xmm0, %xmm8
    00001a7e: 	punpckhwd	%xmm0, %xmm9
    00001a83: 	movdqa	%xmm8, %xmm0
    00001a88: 	punpckhwd	%xmm9, %xmm0
    00001a8d: 	punpcklwd	%xmm9, %xmm8
    00001a92: 	punpcklwd	%xmm0, %xmm8
    00001a97: 	movdqa	DATAat0x49460(%rip), %xmm0
    00001a9f: 	paddw	%xmm14, %xmm8
    00001aa4: 	pmullw	%xmm1, %xmm0
    00001aa8: 	pmulhw	DATAat0x49460(%rip), %xmm1
    00001ab0: 	movdqa	%xmm0, %xmm9
    00001ab5: 	punpckhwd	%xmm1, %xmm0
    00001ab9: 	punpcklwd	%xmm1, %xmm9
    00001abe: 	psrad	$0x6, %xmm0
    00001ac3: 	psrad	$0x6, %xmm9
    00001ac9: 	movdqa	%xmm9, %xmm1
    00001ace: 	punpcklwd	%xmm0, %xmm9
    00001ad3: 	punpckhwd	%xmm0, %xmm1
    00001ad7: 	movdqa	%xmm9, %xmm0
    00001adc: 	punpckhwd	%xmm1, %xmm0
    00001ae0: 	punpcklwd	%xmm1, %xmm9
    00001ae5: 	punpcklwd	%xmm0, %xmm9
    00001aea: 	movdqa	DATAat0x49460(%rip), %xmm0
    00001af2: 	paddw	%xmm15, %xmm9
    00001af7: 	pmullw	%xmm2, %xmm0
    00001afb: 	pmulhw	DATAat0x49460(%rip), %xmm2
    00001b03: 	movdqa	%xmm0, %xmm1
    00001b07: 	punpckhwd	%xmm2, %xmm0
    00001b0b: 	punpcklwd	%xmm2, %xmm1
    00001b0f: 	psrad	$0x6, %xmm0
    00001b14: 	psrad	$0x6, %xmm1
    00001b19: 	movdqa	%xmm1, %xmm2
    00001b1d: 	punpcklwd	%xmm0, %xmm1
    00001b21: 	punpckhwd	%xmm0, %xmm2
    00001b25: 	movdqa	%xmm1, %xmm0
    00001b29: 	punpckhwd	%xmm2, %xmm0
    00001b2d: 	punpcklwd	%xmm2, %xmm1
    00001b31: 	movdqa	DATAat0x49460(%rip), %xmm2
    00001b39: 	punpcklwd	%xmm0, %xmm1
    00001b3d: 	pmullw	%xmm4, %xmm2
    00001b41: 	pmulhw	DATAat0x49460(%rip), %xmm4
    00001b49: 	movw	%bp, -0x70(%rax)
    00001b4d: 	pextrw	$0x2, %xmm3, %ebp
    00001b52: 	movw	%bp, -0x60(%rax)
    00001b56: 	pextrw	$0x3, %xmm3, %ebp
    00001b5b: 	paddw	%xmm10, %xmm1
    00001b60: 	movw	%bp, -0x50(%rax)
    00001b64: 	pextrw	$0x4, %xmm3, %ebp
    00001b69: 	movw	%bp, -0x40(%rax)
    00001b6d: 	pextrw	$0x5, %xmm3, %ebp
    00001b72: 	movw	%bp, -0x30(%rax)
    00001b76: 	pextrw	$0x6, %xmm3, %ebp
    00001b7b: 	movw	%bp, -0x20(%rax)
    00001b7f: 	pextrw	$0x7, %xmm3, %ebp
    00001b84: 	movdqa	%xmm2, %xmm0
    00001b88: 	punpckhwd	%xmm4, %xmm2
    00001b8c: 	movw	%bp, -0x10(%rax)
    00001b90: 	pextrw	$0x0, %xmm5, %ebp
    00001b95: 	punpcklwd	%xmm4, %xmm0
    00001b99: 	movw	%bp, -0x7e(%rax)
    00001b9d: 	pextrw	$0x1, %xmm5, %ebp
    00001ba2: 	psrad	$0x6, %xmm2
    00001ba7: 	movw	%bp, -0x6e(%rax)
    00001bab: 	pextrw	$0x2, %xmm5, %ebp
    00001bb0: 	psrad	$0x6, %xmm0
    00001bb5: 	movw	%bp, -0x5e(%rax)
    00001bb9: 	pextrw	$0x3, %xmm5, %ebp
    00001bbe: 	movdqa	%xmm0, %xmm15
    00001bc3: 	punpcklwd	%xmm2, %xmm0
    00001bc7: 	movw	%bp, -0x4e(%rax)
    00001bcb: 	pextrw	$0x4, %xmm5, %ebp
    00001bd0: 	punpckhwd	%xmm2, %xmm15
    00001bd5: 	movdqa	%xmm0, %xmm2
    00001bd9: 	movw	%bp, -0x3e(%rax)
    00001bdd: 	pextrw	$0x5, %xmm5, %ebp
    00001be2: 	punpckhwd	%xmm15, %xmm2
    00001be7: 	punpcklwd	%xmm15, %xmm0
    00001bec: 	movw	%bp, -0x2e(%rax)
    00001bf0: 	pextrw	$0x6, %xmm5, %ebp
    00001bf5: 	punpcklwd	%xmm2, %xmm0
    00001bf9: 	movw	%bp, -0x1e(%rax)
    00001bfd: 	pextrw	$0x7, %xmm5, %ebp
    00001c02: 	paddw	%xmm12, %xmm0
    00001c07: 	movw	%bp, -0xe(%rax)
    00001c0b: 	pextrw	$0x0, %xmm6, %ebp
    00001c10: 	movw	%bp, -0x7c(%rax)
    00001c14: 	pextrw	$0x1, %xmm6, %ebp
    00001c19: 	movw	%bp, -0x6c(%rax)
    00001c1d: 	pextrw	$0x2, %xmm6, %ebp
    00001c22: 	movw	%bp, -0x5c(%rax)
    00001c26: 	pextrw	$0x3, %xmm6, %ebp
    00001c2b: 	movw	%bp, -0x4c(%rax)
    00001c2f: 	pextrw	$0x4, %xmm6, %ebp
    00001c34: 	movw	%bp, -0x3c(%rax)
    00001c38: 	pextrw	$0x5, %xmm6, %ebp
    00001c3d: 	movw	%bp, -0x2c(%rax)
    00001c41: 	pextrw	$0x6, %xmm6, %ebp
    00001c46: 	movw	%bp, -0x1c(%rax)
    00001c4a: 	pextrw	$0x7, %xmm6, %ebp
    00001c4f: 	movw	%bp, -0xc(%rax)
    00001c53: 	pextrw	$0x0, %xmm7, %ebp
    00001c58: 	movw	%bp, -0x7a(%rax)
    00001c5c: 	pextrw	$0x1, %xmm7, %ebp
    00001c61: 	movw	%bp, -0x6a(%rax)
    00001c65: 	pextrw	$0x2, %xmm7, %ebp
    00001c6a: 	movw	%bp, -0x5a(%rax)
    00001c6e: 	pextrw	$0x3, %xmm7, %ebp
    00001c73: 	movw	%bp, -0x4a(%rax)
    00001c77: 	pextrw	$0x4, %xmm7, %ebp
    00001c7c: 	movw	%bp, -0x3a(%rax)
    00001c80: 	pextrw	$0x5, %xmm7, %ebp
    00001c85: 	movw	%bp, -0x2a(%rax)
    00001c89: 	pextrw	$0x6, %xmm7, %ebp
    00001c8e: 	movw	%bp, -0x1a(%rax)
    00001c92: 	pextrw	$0x7, %xmm7, %ebp
    00001c97: 	movw	%bp, -0xa(%rax)
    00001c9b: 	pextrw	$0x0, %xmm8, %ebp
    00001ca1: 	movw	%bp, -0x78(%rax)
    00001ca5: 	pextrw	$0x1, %xmm8, %ebp
    00001cab: 	movw	%bp, -0x68(%rax)
    00001caf: 	pextrw	$0x2, %xmm8, %ebp
    00001cb5: 	movw	%bp, -0x58(%rax)
    00001cb9: 	pextrw	$0x3, %xmm8, %ebp
    00001cbf: 	movw	%bp, -0x48(%rax)
    00001cc3: 	pextrw	$0x4, %xmm8, %ebp
    00001cc9: 	movw	%bp, -0x38(%rax)
    00001ccd: 	pextrw	$0x5, %xmm8, %ebp
    00001cd3: 	movw	%bp, -0x28(%rax)
    00001cd7: 	pextrw	$0x6, %xmm8, %ebp
    00001cdd: 	movw	%bp, -0x18(%rax)
    00001ce1: 	pextrw	$0x7, %xmm8, %ebp
    00001ce7: 	movw	%bp, -0x8(%rax)
    00001ceb: 	pextrw	$0x0, %xmm9, %ebp
    00001cf1: 	movw	%bp, -0x76(%rax)
    00001cf5: 	pextrw	$0x1, %xmm9, %ebp
    00001cfb: 	movw	%bp, -0x66(%rax)
    00001cff: 	pextrw	$0x2, %xmm9, %ebp
    00001d05: 	movw	%bp, -0x56(%rax)
    00001d09: 	pextrw	$0x3, %xmm9, %ebp
    00001d0f: 	movw	%bp, -0x46(%rax)
    00001d13: 	pextrw	$0x4, %xmm9, %ebp
    00001d19: 	movw	%bp, -0x36(%rax)
    00001d1d: 	pextrw	$0x5, %xmm9, %ebp
    00001d23: 	movw	%bp, -0x26(%rax)
    00001d27: 	pextrw	$0x6, %xmm9, %ebp
    00001d2d: 	movw	%bp, -0x16(%rax)
    00001d31: 	pextrw	$0x7, %xmm9, %ebp
    00001d37: 	movw	%bp, -0x6(%rax)
    00001d3b: 	pextrw	$0x0, %xmm1, %ebp
    00001d40: 	movw	%bp, -0x80(%rcx)
    00001d44: 	pextrw	$0x1, %xmm1, %ebp
    00001d49: 	movw	%bp, -0x70(%rcx)
    00001d4d: 	pextrw	$0x2, %xmm1, %ebp
    00001d52: 	movw	%bp, -0x60(%rcx)
    00001d56: 	pextrw	$0x3, %xmm1, %ebp
    00001d5b: 	movw	%bp, -0x50(%rcx)
    00001d5f: 	pextrw	$0x4, %xmm1, %ebp
    00001d64: 	movw	%bp, -0x40(%rcx)
    00001d68: 	pextrw	$0x5, %xmm1, %ebp
    00001d6d: 	movw	%bp, -0x30(%rcx)
    00001d71: 	pextrw	$0x6, %xmm1, %ebp
    00001d76: 	movw	%bp, -0x20(%rcx)
    00001d7a: 	pextrw	$0x7, %xmm1, %ebp
    00001d7f: 	movw	%bp, -0x10(%rcx)
    00001d83: 	pextrw	$0x0, %xmm0, %ebp
    00001d88: 	movw	%bp, -0x7e(%rcx)
    00001d8c: 	pextrw	$0x1, %xmm0, %ebp
    00001d91: 	movw	%bp, -0x6e(%rcx)
    00001d95: 	pextrw	$0x2, %xmm0, %ebp
    00001d9a: 	movw	%bp, -0x5e(%rcx)
    00001d9e: 	pextrw	$0x3, %xmm0, %ebp
    00001da3: 	movw	%bp, -0x4e(%rcx)
    00001da7: 	pextrw	$0x4, %xmm0, %ebp
    00001dac: 	movw	%bp, -0x3e(%rcx)
    00001db0: 	pextrw	$0x5, %xmm0, %ebp
    00001db5: 	movw	%bp, -0x2e(%rcx)
    00001db9: 	pextrw	$0x6, %xmm0, %ebp
    00001dbe: 	movw	%bp, -0x1e(%rcx)
    00001dc2: 	pextrw	$0x7, %xmm0, %ebp
    00001dc7: 	movw	%bp, -0xe(%rcx)
    00001dcb: 	cmpq	%r12, %rax
    00001dce: 	jne	.Ltmp82 # Offset: 7630
    00001dd4: 	movq	0x1a8(%rsp), %rbx
    00001ddc: 	movq	0x180(%rsp), %rax
    00001de4: 	pxor	%xmm2, %xmm2
    00001de8: 	pxor	%xmm3, %xmm3
    00001dec: 	addq	%rbx, %rax
    00001def: 	leaq	(%r13,%rbx), %r11
    00001df4: 	leaq	(%rdi,%rax,2), %rsi
    00001df8: 	movq	0x178(%rsp), %rax
    00001e00: 	addq	%r11, %r11
    00001e03: 	leaq	(%r10,%r11), %r8
    00001e07: 	addq	%rdi, %r11
    00001e0a: 	addq	%rbx, %rax
    00001e0d: 	movl	0x19c(%rsp), %ebx
    00001e14: 	leaq	(%rdi,%rax,2), %rcx
    00001e18: 	nopl	(%rax,%rax) # Size: 8
.Ltmp83:
    00001e20: 	movzwl	(%rsi), %eax
    00001e23: 	movdqa	%xmm2, %xmm10
    00001e28: 	movdqa	%xmm2, %xmm9
    00001e2d: 	addl	$0x8, %ebx
    00001e30: 	addq	$0x10, %r8
    00001e34: 	addq	$0x10, %rsi
    00001e38: 	addq	$0x10, %r11
    00001e3c: 	addq	$0x10, %rcx
    00001e40: 	movd	%eax, %xmm6
    00001e44: 	movzwl	-0xc(%rsi), %eax
    00001e48: 	pinsrw	$0x1, -0xe(%rsi), %xmm6
    00001e4e: 	movdqu	-0xe(%r11), %xmm5
    00001e54: 	movd	%eax, %xmm4
    00001e58: 	movzwl	-0x8(%rsi), %eax
    00001e5c: 	pinsrw	$0x1, -0xa(%rsi), %xmm4
    00001e62: 	movd	%eax, %xmm0
    00001e66: 	movzwl	-0x4(%rsi), %eax
    00001e6a: 	punpckldq	%xmm4, %xmm6
    00001e6e: 	pinsrw	$0x1, -0x6(%rsi), %xmm0
    00001e74: 	movd	%eax, %xmm1
    00001e78: 	movzwl	-0x10(%rcx), %eax
    00001e7c: 	pinsrw	$0x1, -0x2(%rsi), %xmm1
    00001e82: 	movd	%eax, %xmm4
    00001e86: 	movzwl	-0xc(%rcx), %eax
    00001e8a: 	punpckldq	%xmm1, %xmm0
    00001e8e: 	movdqu	-0x12(%r11), %xmm1
    00001e94: 	punpcklqdq	%xmm0, %xmm6
    00001e98: 	pinsrw	$0x1, -0xe(%rcx), %xmm4
    00001e9e: 	pcmpgtw	%xmm6, %xmm10
    00001ea3: 	pcmpgtw	%xmm1, %xmm9
    00001ea8: 	movd	%eax, %xmm8
    00001ead: 	movzwl	-0x8(%rcx), %eax
    00001eb1: 	pinsrw	$0x1, -0xa(%rcx), %xmm8
    00001eb8: 	movd	%eax, %xmm0
    00001ebc: 	movzwl	-0x4(%rcx), %eax
    00001ec0: 	pinsrw	$0x1, -0x6(%rcx), %xmm0
    00001ec6: 	punpckldq	%xmm8, %xmm4
    00001ecb: 	movdqa	%xmm2, %xmm8
    00001ed0: 	movd	%eax, %xmm7
    00001ed4: 	pcmpgtw	%xmm5, %xmm8
    00001ed9: 	pinsrw	$0x1, -0x2(%rcx), %xmm7
    00001edf: 	punpckldq	%xmm7, %xmm0
    00001ee3: 	movdqa	%xmm6, %xmm7
    00001ee7: 	punpckhwd	%xmm10, %xmm6
    00001eec: 	punpcklqdq	%xmm0, %xmm4
    00001ef0: 	movdqa	%xmm1, %xmm0
    00001ef4: 	punpcklwd	%xmm10, %xmm7
    00001ef9: 	punpcklwd	%xmm9, %xmm0
    00001efe: 	punpckhwd	%xmm9, %xmm1
    00001f03: 	movdqa	%xmm4, %xmm11
    00001f08: 	paddd	%xmm7, %xmm0
    00001f0c: 	movdqa	%xmm5, %xmm7
    00001f10: 	paddd	%xmm6, %xmm1
    00001f14: 	punpcklwd	%xmm8, %xmm7
    00001f19: 	punpckhwd	%xmm8, %xmm5
    00001f1e: 	paddd	%xmm7, %xmm0
    00001f22: 	movdqa	%xmm2, %xmm7
    00001f26: 	paddd	%xmm5, %xmm1
    00001f2a: 	pcmpgtw	%xmm4, %xmm7
    00001f2e: 	movdqa	%xmm3, %xmm5
    00001f32: 	punpckhwd	%xmm7, %xmm4
    00001f36: 	punpcklwd	%xmm7, %xmm11
    00001f3b: 	movdqu	-0x10(%r8), %xmm7
    00001f41: 	paddd	%xmm4, %xmm1
    00001f45: 	paddd	%xmm11, %xmm0
    00001f4a: 	movdqa	%xmm3, %xmm4
    00001f4e: 	paddd	DATAat0x49440(%rip), %xmm0
    00001f56: 	paddd	DATAat0x49440(%rip), %xmm1
    00001f5e: 	pcmpgtd	%xmm0, %xmm5
    00001f62: 	pcmpgtd	%xmm1, %xmm4
    00001f66: 	pand	DATAat0x49450(%rip), %xmm5
    00001f6e: 	pand	DATAat0x49450(%rip), %xmm4
    00001f76: 	paddd	%xmm5, %xmm0
    00001f7a: 	paddd	%xmm4, %xmm1
    00001f7e: 	psrad	$0x2, %xmm0
    00001f83: 	psrad	$0x2, %xmm1
    00001f88: 	movdqa	%xmm0, %xmm4
    00001f8c: 	punpcklwd	%xmm1, %xmm0
    00001f90: 	punpckhwd	%xmm1, %xmm4
    00001f94: 	movdqa	%xmm0, %xmm1
    00001f98: 	punpcklwd	%xmm4, %xmm0
    00001f9c: 	punpckhwd	%xmm4, %xmm1
    00001fa0: 	movdqa	DATAat0x49460(%rip), %xmm4
    00001fa8: 	punpcklwd	%xmm1, %xmm0
    00001fac: 	psubw	%xmm7, %xmm0
    00001fb0: 	pmullw	%xmm0, %xmm4
    00001fb4: 	pmulhw	DATAat0x49460(%rip), %xmm0
    00001fbc: 	movdqa	%xmm4, %xmm1
    00001fc0: 	punpckhwd	%xmm0, %xmm4
    00001fc4: 	punpcklwd	%xmm0, %xmm1
    00001fc8: 	psrad	$0x6, %xmm4
    00001fcd: 	psrad	$0x6, %xmm1
    00001fd2: 	movdqa	%xmm1, %xmm0
    00001fd6: 	movdqa	%xmm1, %xmm5
    00001fda: 	punpcklwd	%xmm4, %xmm0
    00001fde: 	punpckhwd	%xmm4, %xmm5
    00001fe2: 	movdqa	%xmm0, %xmm1
    00001fe6: 	punpcklwd	%xmm5, %xmm0
    00001fea: 	punpckhwd	%xmm5, %xmm1
    00001fee: 	punpcklwd	%xmm1, %xmm0
    00001ff2: 	paddw	%xmm7, %xmm0
    00001ff6: 	movups	%xmm0, -0x10(%r8)
    00001ffb: 	cmpl	%ebx, %r14d
    00001ffe: 	jg	.Ltmp83 # Offset: 8190
.Ltmp88:
    00002004: 	movl	%r14d, -0x78(%rsp)
    00002009: 	movl	0x190(%rsp), %eax
.Ltmp80:
    00002010: 	cmpl	0x174(%rsp), %eax
    00002017: 	jge	.Ltmp84 # Offset: 8215
    0000201d: 	movslq	%eax, %r11
    00002020: 	movslq	%edx, %rbp
    00002023: 	movl	0x198(%rsp), %ecx
    0000202a: 	movslq	%r9d, %rbx
    0000202d: 	movslq	%r15d, %rsi
    00002030: 	addq	%r11, %rbx
    00002033: 	leaq	0x1(%r11,%rsi), %rsi
    00002038: 	leaq	0x1(%r11,%rbp), %r11
    0000203d: 	movq	%r10, %rbp
    00002040: 	subl	%eax, %ecx
    00002042: 	subq	%rdi, %rbp
    00002045: 	addq	%rsi, %rsi
    00002048: 	leal	-0x2(%rcx), %r13d
    0000204c: 	addq	%r11, %r11
    0000204f: 	cmpq	$0x10, %rbp
    00002053: 	leaq	(%rbx,%rbx), %r12
    00002057: 	seta	%bpl
    0000205b: 	cmpl	$0x6, %r13d
    0000205f: 	leaq	(%r10,%r12), %r8
    00002063: 	seta	%r13b
    00002067: 	movq	%r8, %r14
    0000206a: 	andl	%r13d, %ebp
    0000206d: 	leaq	(%rdi,%rsi), %r13
    00002071: 	subq	%r13, %r14
    00002074: 	cmpq	$0xc, %r14
    00002078: 	seta	%r13b
    0000207c: 	testb	%r13b, %bpl
    0000207f: 	je	.Ltmp85 # Offset: 8319
    00002085: 	leaq	(%rdi,%r11), %r13
    00002089: 	movq	%r8, %rbp
    0000208c: 	subq	%r13, %rbp
    0000208f: 	cmpq	$0xc, %rbp
    00002093: 	jbe	.Ltmp85 # Offset: 8339
    00002099: 	movdqu	-0x2(%rdi,%rsi), %xmm0
    0000209f: 	pxor	%xmm4, %xmm4
    000020a3: 	movdqu	-0x2(%rdi,%r12), %xmm1
    000020aa: 	subl	$0x1, %ecx
    000020ad: 	movdqa	%xmm4, %xmm9
    000020b2: 	movdqa	%xmm4, %xmm8
    000020b7: 	movdqa	%xmm4, %xmm7
    000020bb: 	movl	%ecx, %esi
    000020bd: 	pcmpgtw	%xmm1, %xmm9
    000020c2: 	movdqa	%xmm1, %xmm5
    000020c6: 	movdqa	%xmm0, %xmm3
    000020ca: 	andl	$-0x8, %esi
    000020cd: 	movdqu	0x2(%rdi,%r12), %xmm2
    000020d4: 	pcmpgtw	%xmm0, %xmm8
    000020d9: 	movdqu	-0x2(%rdi,%r11), %xmm6
    000020e0: 	addl	%esi, %eax
    000020e2: 	pcmpgtw	%xmm2, %xmm7
    000020e6: 	pcmpgtw	%xmm6, %xmm4
    000020ea: 	punpcklwd	%xmm9, %xmm5
    000020ef: 	punpcklwd	%xmm8, %xmm3
    000020f4: 	punpckhwd	%xmm8, %xmm0
    000020f9: 	paddd	%xmm5, %xmm3
    000020fd: 	movdqa	%xmm2, %xmm5
    00002101: 	punpcklwd	%xmm7, %xmm5
    00002105: 	punpckhwd	%xmm7, %xmm2
    00002109: 	paddd	%xmm5, %xmm3
    0000210d: 	movdqa	%xmm4, %xmm5
    00002111: 	movdqa	%xmm6, %xmm4
    00002115: 	punpcklwd	%xmm5, %xmm4
    00002119: 	punpckhwd	%xmm5, %xmm6
    0000211d: 	paddd	%xmm4, %xmm3
    00002121: 	movdqa	%xmm1, %xmm4
    00002125: 	movdqa	%xmm0, %xmm1
    00002129: 	punpckhwd	%xmm9, %xmm4
    0000212e: 	paddd	DATAat0x49440(%rip), %xmm3
    00002136: 	paddd	%xmm4, %xmm1
    0000213a: 	movdqu	(%r8), %xmm4
    0000213f: 	paddd	%xmm2, %xmm1
    00002143: 	pxor	%xmm2, %xmm2
    00002147: 	paddd	%xmm6, %xmm1
    0000214b: 	paddd	DATAat0x49440(%rip), %xmm1
    00002153: 	movdqa	%xmm2, %xmm0
    00002157: 	pcmpgtd	%xmm3, %xmm0
    0000215b: 	pand	DATAat0x49450(%rip), %xmm0
    00002163: 	pcmpgtd	%xmm1, %xmm2
    00002167: 	pand	DATAat0x49450(%rip), %xmm2
    0000216f: 	paddd	%xmm3, %xmm0
    00002173: 	paddd	%xmm2, %xmm1
    00002177: 	psrad	$0x2, %xmm0
    0000217c: 	psrad	$0x2, %xmm1
    00002181: 	movdqa	%xmm0, %xmm2
    00002185: 	punpcklwd	%xmm1, %xmm0
    00002189: 	punpckhwd	%xmm1, %xmm2
    0000218d: 	movdqa	%xmm0, %xmm1
    00002191: 	punpcklwd	%xmm2, %xmm0
    00002195: 	punpckhwd	%xmm2, %xmm1
    00002199: 	movdqa	DATAat0x49460(%rip), %xmm2
    000021a1: 	punpcklwd	%xmm1, %xmm0
    000021a5: 	psubw	%xmm4, %xmm0
    000021a9: 	pmullw	%xmm0, %xmm2
    000021ad: 	pmulhw	DATAat0x49460(%rip), %xmm0
    000021b5: 	movdqa	%xmm2, %xmm1
    000021b9: 	punpckhwd	%xmm0, %xmm2
    000021bd: 	punpcklwd	%xmm0, %xmm1
    000021c1: 	psrad	$0x6, %xmm2
    000021c6: 	psrad	$0x6, %xmm1
    000021cb: 	movdqa	%xmm1, %xmm0
    000021cf: 	movdqa	%xmm1, %xmm3
    000021d3: 	punpcklwd	%xmm2, %xmm0
    000021d7: 	punpckhwd	%xmm2, %xmm3
    000021db: 	movdqa	%xmm0, %xmm1
    000021df: 	punpcklwd	%xmm3, %xmm0
    000021e3: 	punpckhwd	%xmm3, %xmm1
    000021e7: 	punpcklwd	%xmm1, %xmm0
    000021eb: 	paddw	%xmm4, %xmm0
    000021ef: 	movups	%xmm0, (%r8)
    000021f3: 	cmpl	%ecx, %esi
    000021f5: 	je	.Ltmp84 # Offset: 8693
    000021fb: 	leal	(%r15,%rax), %ecx
    000021ff: 	leal	(%r9,%rax), %ebx
    00002203: 	movl	0x174(%rsp), %r14d
    0000220b: 	movslq	%ecx, %rcx
    0000220e: 	movslq	%ebx, %rbx
    00002211: 	movswl	(%rdi,%rcx,2), %esi
    00002215: 	leal	-0x1(%rax,%r9), %ecx
    0000221a: 	leaq	(%r10,%rbx,2), %rbp
    0000221e: 	movslq	%ecx, %rcx
    00002221: 	movswl	(%rdi,%rcx,2), %r11d
    00002226: 	addl	%esi, %r11d
    00002229: 	leal	0x1(%rax), %esi
    0000222c: 	leal	(%r9,%rsi), %ecx
    00002230: 	movslq	%ecx, %rcx
    00002233: 	addq	%rcx, %rcx
    00002236: 	leaq	(%rdi,%rcx), %r12
    0000223a: 	movswl	(%r12), %r8d
    0000223f: 	addl	%r11d, %r8d
    00002242: 	leal	(%rdx,%rax), %r11d
    00002246: 	movslq	%r11d, %r11
    00002249: 	movswl	(%rdi,%r11,2), %r11d
    0000224e: 	addl	%r8d, %r11d
    00002251: 	leal	0x5(%r11), %r8d
    00002255: 	addl	$0x2, %r11d
    00002259: 	cmovnsl	%r11d, %r8d
    0000225d: 	sarl	$0x2, %r8d
    00002261: 	subw	(%rbp), %r8w
    00002266: 	movswl	%r8w, %r8d
    0000226a: 	imull	$0x71, %r8d, %r8d
    0000226e: 	sarl	$0x6, %r8d
    00002272: 	addw	(%rbp), %r8w
    00002277: 	movw	%r8w, (%rbp)
    0000227c: 	cmpl	%r14d, %esi
    0000227f: 	jge	.Ltmp84 # Offset: 8831
    00002285: 	leal	(%r15,%rsi), %r8d
    00002289: 	movswl	(%rdi,%rbx,2), %r13d
    0000228e: 	leal	0x2(%rax), %r11d
    00002292: 	addl	%edx, %esi
    00002294: 	movslq	%r8d, %r8
    00002297: 	movslq	%esi, %rsi
    0000229a: 	addq	%r10, %rcx
    0000229d: 	movswl	(%rdi,%r8,2), %r8d
    000022a2: 	movswl	(%rdi,%rsi,2), %esi
    000022a6: 	addl	%r8d, %r13d
    000022a9: 	leal	(%r9,%r11), %r8d
    000022ad: 	movslq	%r8d, %r8
    000022b0: 	addq	%r8, %r8
    000022b3: 	leaq	(%rdi,%r8), %rbx
    000022b7: 	movswl	(%rbx), %ebp
    000022ba: 	addl	%r13d, %ebp
    000022bd: 	addl	%esi, %ebp
    000022bf: 	leal	0x5(%rbp), %esi
    000022c2: 	addl	$0x2, %ebp
    000022c5: 	cmovnsl	%ebp, %esi
    000022c8: 	sarl	$0x2, %esi
    000022cb: 	subw	(%rcx), %si
    000022ce: 	movswl	%si, %esi
    000022d1: 	imull	$0x71, %esi, %esi
    000022d4: 	sarl	$0x6, %esi
    000022d7: 	addw	(%rcx), %si
    000022da: 	movw	%si, (%rcx)
    000022dd: 	cmpl	%r11d, %r14d
    000022e0: 	jle	.Ltmp84 # Offset: 8928
    000022e6: 	leal	(%r15,%r11), %ecx
    000022ea: 	movswl	(%r12), %r13d
    000022ef: 	leal	0x3(%rax), %ebp
    000022f2: 	addl	%edx, %r11d
    000022f5: 	movslq	%ecx, %rcx
    000022f8: 	movslq	%r11d, %r11
    000022fb: 	addq	%r10, %r8
    000022fe: 	movswl	(%rdi,%rcx,2), %ecx
    00002302: 	movswl	(%rdi,%r11,2), %r11d
    00002307: 	addl	%ecx, %r13d
    0000230a: 	leal	(%r9,%rbp), %ecx
    0000230e: 	movslq	%ecx, %rcx
    00002311: 	addq	%rcx, %rcx
    00002314: 	leaq	(%rdi,%rcx), %r12
    00002318: 	movswl	(%r12), %esi
    0000231d: 	addl	%r13d, %esi
    00002320: 	addl	%esi, %r11d
    00002323: 	leal	0x5(%r11), %esi
    00002327: 	addl	$0x2, %r11d
    0000232b: 	cmovnsl	%r11d, %esi
    0000232f: 	sarl	$0x2, %esi
    00002332: 	subw	(%r8), %si
    00002336: 	movswl	%si, %esi
    00002339: 	imull	$0x71, %esi, %esi
    0000233c: 	sarl	$0x6, %esi
    0000233f: 	addw	(%r8), %si
    00002343: 	movw	%si, (%r8)
    00002347: 	cmpl	%ebp, %r14d
    0000234a: 	jle	.Ltmp84 # Offset: 9034
    00002350: 	leal	(%r15,%rbp), %esi
    00002354: 	movswl	(%rbx), %r13d
    00002358: 	leal	0x4(%rax), %r8d
    0000235c: 	addl	%edx, %ebp
    0000235e: 	movslq	%esi, %rsi
    00002361: 	movslq	%ebp, %rbp
    00002364: 	addq	%r10, %rcx
    00002367: 	movswl	(%rdi,%rsi,2), %esi
    0000236b: 	movswl	(%rdi,%rbp,2), %ebp
    0000236f: 	addl	%esi, %r13d
    00002372: 	leal	(%r9,%r8), %esi
    00002376: 	movslq	%esi, %rsi
    00002379: 	addq	%rsi, %rsi
    0000237c: 	leaq	(%rdi,%rsi), %r11
    00002380: 	movswl	(%r11), %ebx
    00002384: 	addl	%r13d, %ebx
    00002387: 	addl	%ebx, %ebp
    00002389: 	leal	0x5(%rbp), %ebx
    0000238c: 	addl	$0x2, %ebp
    0000238f: 	cmovnsl	%ebp, %ebx
    00002392: 	sarl	$0x2, %ebx
    00002395: 	subw	(%rcx), %bx
    00002398: 	movswl	%bx, %ebx
    0000239b: 	imull	$0x71, %ebx, %ebx
    0000239e: 	sarl	$0x6, %ebx
    000023a1: 	addw	(%rcx), %bx
    000023a4: 	movw	%bx, (%rcx)
    000023a7: 	cmpl	%r14d, %r8d
    000023aa: 	jge	.Ltmp84 # Offset: 9130
    000023b0: 	leal	(%r15,%r8), %ecx
    000023b4: 	movswl	(%r12), %r12d
    000023b9: 	leaq	(%r10,%rsi), %rbx
    000023bd: 	addl	%edx, %r8d
    000023c0: 	movslq	%ecx, %rcx
    000023c3: 	leal	0x5(%rax), %esi
    000023c6: 	movslq	%r8d, %r8
    000023c9: 	movswl	(%rdi,%rcx,2), %ecx
    000023cd: 	movswl	(%rdi,%r8,2), %r8d
    000023d2: 	addl	%ecx, %r12d
    000023d5: 	leal	(%r9,%rsi), %ecx
    000023d9: 	movslq	%ecx, %rcx
    000023dc: 	addq	%rcx, %rcx
    000023df: 	leaq	(%rdi,%rcx), %r13
    000023e3: 	movswl	(%r13), %ebp
    000023e8: 	addl	%r12d, %ebp
    000023eb: 	addl	%r8d, %ebp
    000023ee: 	leal	0x5(%rbp), %r8d
    000023f2: 	addl	$0x2, %ebp
    000023f5: 	cmovnsl	%ebp, %r8d
    000023f9: 	sarl	$0x2, %r8d
    000023fd: 	subw	(%rbx), %r8w
    00002401: 	movswl	%r8w, %r8d
    00002405: 	imull	$0x71, %r8d, %r8d
    00002409: 	sarl	$0x6, %r8d
    0000240d: 	addw	(%rbx), %r8w
    00002411: 	movw	%r8w, (%rbx)
    00002415: 	cmpl	%esi, %r14d
    00002418: 	jle	.Ltmp84 # Offset: 9240
    0000241e: 	leal	(%r15,%rsi), %r8d
    00002422: 	movswl	(%r11), %ebp
    00002426: 	addl	%edx, %esi
    00002428: 	addq	%r10, %rcx
    0000242b: 	movslq	%r8d, %r8
    0000242e: 	movslq	%esi, %rsi
    00002431: 	movswl	(%rdi,%r8,2), %r8d
    00002436: 	movswl	(%rdi,%rsi,2), %esi
    0000243a: 	addl	%r8d, %ebp
    0000243d: 	leal	0x6(%rax), %r8d
    00002441: 	leal	(%r9,%r8), %r11d
    00002445: 	movslq	%r11d, %r11
    00002448: 	leaq	(%r11,%r11), %rbx
    0000244c: 	movswl	(%rdi,%r11,2), %r11d
    00002451: 	addl	%ebp, %r11d
    00002454: 	addl	%esi, %r11d
    00002457: 	leal	0x5(%r11), %esi
    0000245b: 	addl	$0x2, %r11d
    0000245f: 	cmovnsl	%r11d, %esi
    00002463: 	sarl	$0x2, %esi
    00002466: 	subw	(%rcx), %si
    00002469: 	movswl	%si, %esi
    0000246c: 	imull	$0x71, %esi, %esi
    0000246f: 	sarl	$0x6, %esi
    00002472: 	addw	(%rcx), %si
    00002475: 	movw	%si, (%rcx)
    00002478: 	cmpl	%r8d, %r14d
    0000247b: 	jle	.Ltmp84 # Offset: 9339
    0000247d: 	leal	(%r15,%r8), %ecx
    00002481: 	leal	0x7(%rax,%r9), %eax
    00002486: 	movswl	(%r13), %esi
    0000248b: 	addl	%edx, %r8d
    0000248e: 	movslq	%ecx, %rcx
    00002491: 	cltq
    00002493: 	movslq	%r8d, %r8
    00002496: 	addq	%r10, %rbx
    00002499: 	movswl	(%rdi,%rcx,2), %ecx
    0000249d: 	movswl	(%rdi,%rax,2), %eax
    000024a1: 	addl	%ecx, %esi
    000024a3: 	movswl	(%rdi,%r8,2), %ecx
    000024a8: 	addl	%esi, %eax
.Ltmp89:
    000024aa: 	addl	%eax, %ecx
    000024ac: 	leal	0x5(%rcx), %eax
    000024af: 	addl	$0x2, %ecx
    000024b2: 	cmovnsl	%ecx, %eax
    000024b5: 	sarl	$0x2, %eax
    000024b8: 	subw	(%rbx), %ax
    000024bb: 	cwtl
    000024bc: 	imull	$0x71, %eax, %eax
    000024bf: 	sarl	$0x6, %eax
    000024c2: 	addw	(%rbx), %ax
    000024c5: 	movw	%ax, (%rbx)
.Ltmp84:
    000024c8: 	movl	0x18c(%rsp), %eax
    000024cf: 	movl	0x170(%rsp), %ebx
    000024d6: 	addl	%eax, %r15d
    000024d9: 	addl	%eax, %r9d
    000024dc: 	addl	%eax, %edx
    000024de: 	cmpl	%ebx, 0x188(%rsp)
    000024e5: 	jne	.Ltmp86 # Offset: 9445
.Ltmp79:
    000024eb: 	addq	$0x1c0, %rsp
    000024f2: 	popq	%rbx
    000024f3: 	popq	%rbp
    000024f4: 	popq	%r12
    000024f6: 	popq	%r13
    000024f8: 	popq	%r14
    000024fa: 	popq	%r15
    000024fc: 	retq # Offset: 9468
    000024fd: 	nopl	(%rax) # Size: 3
.Ltmp81:
    00002500: 	movq	0x1b0(%rsp), %rax
    00002508: 	subq	$0x2, %r8
    0000250c: 	movl	-0x78(%rsp), %r14d
    00002511: 	leaq	-0x12(%rdi,%rbp), %rcx
    00002516: 	leaq	(%r10,%r8), %rsi
    0000251a: 	leaq	-0x12(%rdi,%r12), %r11
    0000251f: 	pxor	%xmm2, %xmm2
    00002523: 	addq	%rdi, %r8
    00002526: 	addq	%r13, %rax
    00002529: 	pxor	%xmm3, %xmm3
    0000252d: 	leaq	0x10(%rdi,%rax,2), %rbx
    00002532: 	nopw	(%rax,%rax) # Size: 6
.Ltmp87:
    00002538: 	movzwl	0x2(%rcx), %eax
    0000253c: 	addq	$0x10, %r8
    00002540: 	addq	$0x10, %rsi
    00002544: 	addq	$0x10, %rcx
    00002548: 	movdqa	%xmm2, %xmm10
    0000254d: 	movdqa	%xmm2, %xmm9
    00002552: 	movdqu	-0xc(%r8), %xmm5
    00002558: 	addq	$0x10, %r11
    0000255c: 	movd	%eax, %xmm6
    00002560: 	movzwl	-0xa(%rcx), %eax
    00002564: 	pinsrw	$0x1, -0xc(%rcx), %xmm6
    0000256a: 	movd	%eax, %xmm4
    0000256e: 	movzwl	-0x6(%rcx), %eax
    00002572: 	pinsrw	$0x1, -0x8(%rcx), %xmm4
    00002578: 	movd	%eax, %xmm0
    0000257c: 	movzwl	-0x2(%rcx), %eax
    00002580: 	punpckldq	%xmm4, %xmm6
    00002584: 	pinsrw	$0x1, -0x4(%rcx), %xmm0
    0000258a: 	movd	%eax, %xmm1
    0000258e: 	movzwl	-0xe(%r11), %eax
    00002593: 	pinsrw	$0x1, (%rcx), %xmm1
    00002598: 	movd	%eax, %xmm4
    0000259c: 	movzwl	-0xa(%r11), %eax
    000025a1: 	punpckldq	%xmm1, %xmm0
    000025a5: 	movdqu	-0x10(%r8), %xmm1
    000025ab: 	punpcklqdq	%xmm0, %xmm6
    000025af: 	pinsrw	$0x1, -0xc(%r11), %xmm4
    000025b6: 	pcmpgtw	%xmm6, %xmm10
    000025bb: 	pcmpgtw	%xmm1, %xmm9
    000025c0: 	movd	%eax, %xmm8
    000025c5: 	movzwl	-0x6(%r11), %eax
    000025ca: 	pinsrw	$0x1, -0x8(%r11), %xmm8
    000025d1: 	movd	%eax, %xmm0
    000025d5: 	movzwl	-0x2(%r11), %eax
    000025da: 	pinsrw	$0x1, -0x4(%r11), %xmm0
    000025e1: 	punpckldq	%xmm8, %xmm4
    000025e6: 	movdqa	%xmm2, %xmm8
    000025eb: 	movd	%eax, %xmm7
    000025ef: 	pcmpgtw	%xmm5, %xmm8
    000025f4: 	pinsrw	$0x1, (%r11), %xmm7
    000025fa: 	punpckldq	%xmm7, %xmm0
    000025fe: 	movdqa	%xmm6, %xmm7
    00002602: 	punpckhwd	%xmm10, %xmm6
    00002607: 	punpcklqdq	%xmm0, %xmm4
    0000260b: 	movdqa	%xmm1, %xmm0
    0000260f: 	punpcklwd	%xmm10, %xmm7
    00002614: 	punpcklwd	%xmm9, %xmm0
    00002619: 	punpckhwd	%xmm9, %xmm1
    0000261e: 	movdqa	%xmm4, %xmm11
    00002623: 	paddd	%xmm7, %xmm0
    00002627: 	movdqa	%xmm5, %xmm7
    0000262b: 	paddd	%xmm6, %xmm1
    0000262f: 	punpcklwd	%xmm8, %xmm7
    00002634: 	punpckhwd	%xmm8, %xmm5
    00002639: 	paddd	%xmm7, %xmm0
    0000263d: 	movdqa	%xmm2, %xmm7
    00002641: 	paddd	%xmm5, %xmm1
    00002645: 	pcmpgtw	%xmm4, %xmm7
    00002649: 	movdqa	%xmm3, %xmm5
    0000264d: 	punpckhwd	%xmm7, %xmm4
    00002651: 	punpcklwd	%xmm7, %xmm11
    00002656: 	paddd	%xmm4, %xmm1
    0000265a: 	paddd	%xmm11, %xmm0
    0000265f: 	movdqa	%xmm3, %xmm4
    00002663: 	paddd	DATAat0x49440(%rip), %xmm0
    0000266b: 	paddd	DATAat0x49440(%rip), %xmm1
    00002673: 	pcmpgtd	%xmm0, %xmm5
    00002677: 	pcmpgtd	%xmm1, %xmm4
    0000267b: 	pand	DATAat0x49450(%rip), %xmm5
    00002683: 	pand	DATAat0x49450(%rip), %xmm4
    0000268b: 	paddd	%xmm5, %xmm0
    0000268f: 	paddd	%xmm4, %xmm1
    00002693: 	psrad	$0x2, %xmm0
    00002698: 	psrad	$0x2, %xmm1
    0000269d: 	movdqa	%xmm0, %xmm4
    000026a1: 	punpcklwd	%xmm1, %xmm0
    000026a5: 	punpckhwd	%xmm1, %xmm4
    000026a9: 	movdqa	%xmm0, %xmm1
    000026ad: 	punpcklwd	%xmm4, %xmm0
    000026b1: 	punpckhwd	%xmm4, %xmm1
    000026b5: 	movdqu	-0xe(%rsi), %xmm4
    000026ba: 	punpcklwd	%xmm1, %xmm0
    000026be: 	psubw	%xmm4, %xmm0
    000026c2: 	movdqa	DATAat0x49460(%rip), %xmm4
    000026ca: 	pmullw	%xmm0, %xmm4
    000026ce: 	pmulhw	DATAat0x49460(%rip), %xmm0
    000026d6: 	movdqa	%xmm4, %xmm1
    000026da: 	punpckhwd	%xmm0, %xmm4
    000026de: 	punpcklwd	%xmm0, %xmm1
    000026e2: 	psrad	$0x6, %xmm4
    000026e7: 	psrad	$0x6, %xmm1
    000026ec: 	movdqa	%xmm1, %xmm0
    000026f0: 	movdqa	%xmm1, %xmm5
    000026f4: 	punpcklwd	%xmm4, %xmm0
    000026f8: 	punpckhwd	%xmm4, %xmm5
    000026fc: 	movdqu	-0xe(%rsi), %xmm4
    00002701: 	movdqa	%xmm0, %xmm1
    00002705: 	punpcklwd	%xmm5, %xmm0
    00002709: 	punpckhwd	%xmm5, %xmm1
    0000270d: 	punpcklwd	%xmm1, %xmm0
    00002711: 	paddw	%xmm4, %xmm0
    00002715: 	movups	%xmm0, -0xe(%rsi)
    00002719: 	cmpq	%r8, %rbx
    0000271c: 	jne	.Ltmp87 # Offset: 10012
    00002722: 	jmp	.Ltmp88 # Offset: 10018
    00002727: 	nopw	(%rax,%rax) # Size: 9
.Ltmp85:
    00002730: 	leal	-0x1(%rax,%r9), %ecx
    00002735: 	movswl	-0x2(%rdi,%rsi), %esi
    0000273a: 	movswl	-0x2(%rdi,%r11), %r11d
    00002740: 	movslq	%ecx, %rcx
    00002743: 	movl	0x174(%rsp), %r14d
    0000274b: 	movswl	(%rdi,%rcx,2), %r13d
    00002750: 	addl	%esi, %r13d
    00002753: 	leal	0x1(%rax), %esi
    00002756: 	leal	(%rsi,%r9), %ecx
    0000275a: 	movslq	%ecx, %rcx
    0000275d: 	addq	%rcx, %rcx
    00002760: 	leaq	(%rdi,%rcx), %rbp
    00002764: 	movswl	(%rbp), %r12d
    00002769: 	addl	%r13d, %r12d
    0000276c: 	addl	%r11d, %r12d
    0000276f: 	leal	0x5(%r12), %r11d
    00002774: 	addl	$0x2, %r12d
    00002778: 	cmovnsl	%r12d, %r11d
    0000277c: 	sarl	$0x2, %r11d
    00002780: 	subw	(%r8), %r11w
    00002784: 	movswl	%r11w, %r11d
    00002788: 	imull	$0x71, %r11d, %r11d
    0000278c: 	sarl	$0x6, %r11d
    00002790: 	addw	(%r8), %r11w
    00002794: 	movw	%r11w, (%r8)
    00002798: 	cmpl	%r14d, %esi
    0000279b: 	jge	.Ltmp84 # Offset: 10139
    000027a1: 	leal	(%rsi,%r15), %r8d
    000027a5: 	movswl	(%rdi,%rbx,2), %r13d
    000027aa: 	leal	0x2(%rax), %ebx
    000027ad: 	addl	%edx, %esi
    000027af: 	movslq	%r8d, %r8
    000027b2: 	movslq	%esi, %rsi
    000027b5: 	addq	%r10, %rcx
    000027b8: 	movswl	(%rdi,%r8,2), %r8d
    000027bd: 	movswl	(%rdi,%rsi,2), %esi
    000027c1: 	addl	%r8d, %r13d
    000027c4: 	leal	(%rbx,%r9), %r8d
    000027c8: 	movslq	%r8d, %r8
    000027cb: 	addq	%r8, %r8
    000027ce: 	leaq	(%rdi,%r8), %r11
    000027d2: 	movswl	(%r11), %r12d
    000027d6: 	addl	%r13d, %r12d
    000027d9: 	addl	%esi, %r12d
    000027dc: 	leal	0x5(%r12), %esi
    000027e1: 	addl	$0x2, %r12d
    000027e5: 	cmovnsl	%r12d, %esi
    000027e9: 	sarl	$0x2, %esi
    000027ec: 	subw	(%rcx), %si
    000027ef: 	movswl	%si, %esi
    000027f2: 	imull	$0x71, %esi, %esi
    000027f5: 	sarl	$0x6, %esi
    000027f8: 	addw	(%rcx), %si
    000027fb: 	movw	%si, (%rcx)
    000027fe: 	cmpl	%r14d, %ebx
    00002801: 	jge	.Ltmp84 # Offset: 10241
    00002807: 	leal	(%rbx,%r15), %ecx
    0000280b: 	movswl	(%rbp), %r13d
    00002810: 	leal	0x3(%rax), %r12d
    00002814: 	addl	%edx, %ebx
    00002816: 	movslq	%ecx, %rcx
    00002819: 	movslq	%ebx, %rbx
    0000281c: 	addq	%r10, %r8
    0000281f: 	movswl	(%rdi,%rcx,2), %ecx
    00002823: 	movswl	(%rdi,%rbx,2), %ebx
    00002827: 	addl	%ecx, %r13d
    0000282a: 	leal	(%r12,%r9), %ecx
    0000282e: 	movslq	%ecx, %rcx
    00002831: 	addq	%rcx, %rcx
    00002834: 	leaq	(%rdi,%rcx), %rbp
    00002838: 	movswl	(%rbp), %esi
    0000283c: 	addl	%r13d, %esi
    0000283f: 	addl	%esi, %ebx
    00002841: 	leal	0x5(%rbx), %esi
    00002844: 	addl	$0x2, %ebx
    00002847: 	cmovnsl	%ebx, %esi
    0000284a: 	sarl	$0x2, %esi
    0000284d: 	subw	(%r8), %si
    00002851: 	movswl	%si, %esi
    00002854: 	imull	$0x71, %esi, %esi
    00002857: 	sarl	$0x6, %esi
    0000285a: 	addw	(%r8), %si
    0000285e: 	movw	%si, (%r8)
    00002862: 	cmpl	%r14d, %r12d
    00002865: 	jge	.Ltmp84 # Offset: 10341
    0000286b: 	leal	(%r12,%r15), %esi
    0000286f: 	movswl	(%r11), %r13d
    00002873: 	leal	0x4(%rax), %r8d
    00002877: 	addl	%edx, %r12d
    0000287a: 	movslq	%esi, %rsi
    0000287d: 	movslq	%r12d, %r12
    00002880: 	addq	%r10, %rcx
    00002883: 	movswl	(%rdi,%rsi,2), %esi
    00002887: 	movswl	(%rdi,%r12,2), %r12d
    0000288c: 	addl	%esi, %r13d
    0000288f: 	leal	(%r8,%r9), %esi
    00002893: 	movslq	%esi, %rsi
    00002896: 	addq	%rsi, %rsi
    00002899: 	leaq	(%rdi,%rsi), %r11
    0000289d: 	movswl	(%r11), %ebx
    000028a1: 	addl	%r13d, %ebx
    000028a4: 	addl	%ebx, %r12d
    000028a7: 	leal	0x5(%r12), %ebx
    000028ac: 	addl	$0x2, %r12d
    000028b0: 	cmovnsl	%r12d, %ebx
    000028b4: 	sarl	$0x2, %ebx
    000028b7: 	subw	(%rcx), %bx
    000028ba: 	movswl	%bx, %ebx
    000028bd: 	imull	$0x71, %ebx, %ebx
    000028c0: 	sarl	$0x6, %ebx
    000028c3: 	addw	(%rcx), %bx
    000028c6: 	movw	%bx, (%rcx)
    000028c9: 	cmpl	%r14d, %r8d
    000028cc: 	jge	.Ltmp84 # Offset: 10444
    000028d2: 	leal	(%r8,%r15), %ecx
    000028d6: 	movswl	(%rbp), %r13d
    000028db: 	leal	0x5(%rax), %ebx
    000028de: 	addl	%edx, %r8d
    000028e1: 	movslq	%ecx, %rcx
    000028e4: 	movslq	%r8d, %r8
    000028e7: 	addq	%r10, %rsi
    000028ea: 	movswl	(%rdi,%rcx,2), %ecx
    000028ee: 	movswl	(%rdi,%r8,2), %r8d
    000028f3: 	addl	%ecx, %r13d
    000028f6: 	leal	(%rbx,%r9), %ecx
    000028fa: 	movslq	%ecx, %rcx
    000028fd: 	addq	%rcx, %rcx
    00002900: 	leaq	(%rdi,%rcx), %rbp
    00002904: 	movswl	(%rbp), %r12d
    00002909: 	addl	%r13d, %r12d
    0000290c: 	addl	%r8d, %r12d
    0000290f: 	leal	0x5(%r12), %r8d
    00002914: 	addl	$0x2, %r12d
    00002918: 	cmovnsl	%r12d, %r8d
    0000291c: 	sarl	$0x2, %r8d
    00002920: 	subw	(%rsi), %r8w
    00002924: 	movswl	%r8w, %r8d
    00002928: 	imull	$0x71, %r8d, %r8d
    0000292c: 	sarl	$0x6, %r8d
    00002930: 	addw	(%rsi), %r8w
    00002934: 	movw	%r8w, (%rsi)
    00002938: 	cmpl	%r14d, %ebx
    0000293b: 	jge	.Ltmp84 # Offset: 10555
    00002941: 	leaq	(%r10,%rcx), %r8
    00002945: 	leal	(%rbx,%r15), %ecx
    00002949: 	movswl	(%r11), %r12d
    0000294d: 	addl	%edx, %ebx
    0000294f: 	movslq	%ecx, %rcx
    00002952: 	leal	0x6(%rax), %esi
    00002955: 	movslq	%ebx, %rbx
    00002958: 	movswl	(%rdi,%rcx,2), %ecx
    0000295c: 	movswl	(%rdi,%rbx,2), %ebx
    00002960: 	addl	%ecx, %r12d
    00002963: 	leal	(%rsi,%r9), %ecx
    00002967: 	movslq	%ecx, %rcx
    0000296a: 	addq	%rcx, %rcx
    0000296d: 	leaq	(%rdi,%rcx), %r13
    00002971: 	movswl	(%r13), %r11d
    00002976: 	addl	%r12d, %r11d
    00002979: 	addl	%r11d, %ebx
    0000297c: 	leal	0x5(%rbx), %r11d
    00002980: 	addl	$0x2, %ebx
    00002983: 	cmovnsl	%ebx, %r11d
    00002987: 	sarl	$0x2, %r11d
    0000298b: 	subw	(%r8), %r11w
    0000298f: 	movswl	%r11w, %r11d
    00002993: 	imull	$0x71, %r11d, %r11d
    00002997: 	sarl	$0x6, %r11d
    0000299b: 	addw	(%r8), %r11w
    0000299f: 	movw	%r11w, (%r8)
    000029a3: 	cmpl	%r14d, %esi
    000029a6: 	jge	.Ltmp84 # Offset: 10662
    000029ac: 	leal	(%rsi,%r15), %r8d
    000029b0: 	movswl	(%rbp), %ebp
    000029b4: 	addl	%edx, %esi
    000029b6: 	addq	%r10, %rcx
    000029b9: 	movslq	%r8d, %r8
    000029bc: 	movslq	%esi, %rsi
    000029bf: 	movswl	(%rdi,%r8,2), %r8d
    000029c4: 	movswl	(%rdi,%rsi,2), %esi
    000029c8: 	addl	%r8d, %ebp
    000029cb: 	leal	0x7(%rax), %r8d
    000029cf: 	leal	(%r9,%r8), %r11d
    000029d3: 	movslq	%r11d, %r11
    000029d6: 	leaq	(%r11,%r11), %rbx
    000029da: 	movswl	(%rdi,%r11,2), %r11d
    000029df: 	addl	%ebp, %r11d
    000029e2: 	addl	%esi, %r11d
    000029e5: 	leal	0x5(%r11), %esi
    000029e9: 	addl	$0x2, %r11d
    000029ed: 	cmovnsl	%r11d, %esi
    000029f1: 	sarl	$0x2, %esi
    000029f4: 	subw	(%rcx), %si
    000029f7: 	movswl	%si, %esi
    000029fa: 	imull	$0x71, %esi, %esi
    000029fd: 	sarl	$0x6, %esi
    00002a00: 	addw	(%rcx), %si
    00002a03: 	movw	%si, (%rcx)
    00002a06: 	cmpl	%r8d, %r14d
    00002a09: 	jle	.Ltmp84 # Offset: 10761
    00002a0f: 	leal	(%r15,%r8), %ecx
    00002a13: 	movswl	(%r13), %esi
    00002a18: 	leal	0x8(%rax,%r9), %eax
    00002a1d: 	addq	%r10, %rbx
    00002a20: 	movslq	%ecx, %rcx
    00002a23: 	cltq
    00002a25: 	movswl	(%rdi,%rcx,2), %ecx
    00002a29: 	movswl	(%rdi,%rax,2), %eax
    00002a2d: 	addl	%ecx, %esi
    00002a2f: 	leal	(%rdx,%r8), %ecx
    00002a33: 	movslq	%ecx, %rcx
    00002a36: 	addl	%esi, %eax
    00002a38: 	movswl	(%rdi,%rcx,2), %ecx
    00002a3c: 	jmp	.Ltmp89 # Offset: 10812
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/1(*2)"

Binary Function "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1(*2)" after disassembly {
  All names   : _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1
                _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 19
  State       : disassembled
  Address     : 0x9050
  Size        : 0x4c
  MaxSize     : 0x50
  Offset      : 0x9050
  Section     : .text
  Orc Section : .local.text._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdi, %r12
    00000005: 	pushq	%rbp
    00000006: 	subq	$0x8, %rsp
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp90 # Offset: 13
    0000000f: 	movq	%rsi, %rdi
    00000012: 	movq	%rsi, %rbp
    00000015: 	callq	strlen@PLT # Offset: 21
    0000001a: 	addq	$0x8, %rsp
    0000001e: 	movq	%rbp, %rsi
    00000021: 	movq	%r12, %rdi
    00000024: 	popq	%rbp
    00000025: 	movq	%rax, %rdx
    00000028: 	popq	%r12
    0000002a: 	jmp	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # TAILCALL  # Offset: 42
    0000002f: 	nop # Size: 1
.Ltmp90:
    00000030: 	movq	(%rdi), %rax
    00000033: 	movq	-0x18(%rax), %rdi
    00000037: 	addq	%r12, %rdi
    0000003a: 	movl	0x20(%rdi), %esi
    0000003d: 	addq	$0x8, %rsp
    00000041: 	popq	%rbp
    00000042: 	popq	%r12
    00000044: 	orl	$0x1, %esi
    00000047: 	jmp	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # TAILCALL  # Offset: 71
DWARF CFI Instructions:
    <empty>
End of Function "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/1
                _ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 20
  State       : disassembled
  Address     : 0x90a0
  Size        : 0x2153
  MaxSize     : 0x2160
  Offset      : 0x90a0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x150, %rsp
    00000014: 	movq	%rsi, 0x100(%rsp)
    0000001c: 	movl	%ecx, 0x120(%rsp)
    00000023: 	movl	%r8d, 0x114(%rsp)
    0000002b: 	movl	%eax, 0x110(%rsp)
    00000032: 	cmpl	$0x1, %eax
    00000035: 	jle	.Ltmp91 # Offset: 53
    0000003b: 	movq	%rdi, %rbx
    0000003e: 	movl	%ecx, %eax
    00000040: 	leal	-0x8(%rcx), %edi
    00000043: 	movl	%r8d, 0xf8(%rsp)
    0000004b: 	subl	$0xa, %eax
    0000004e: 	pxor	%xmm4, %xmm4
    00000052: 	movl	%edi, 0x10c(%rsp)
    00000059: 	leal	-0x1(%rcx), %edi
    0000005c: 	leal	(%r8,%r8), %ecx
    00000060: 	movl	%eax, 0x11c(%rsp)
    00000067: 	movl	%ecx, 0xf4(%rsp)
    0000006e: 	movl	%eax, %ecx
    00000070: 	shrl	$0x6, %eax
    00000073: 	movl	%eax, %edx
    00000075: 	shrl	$0x3, %ecx
    00000078: 	leal	-0x1(%rax), %eax
    0000007b: 	movl	%edi, 0xf0(%rsp)
    00000082: 	shll	$0x6, %edx
    00000085: 	addq	$0x1, %rax
    00000089: 	leaq	0x10(%rbx), %rdi
    0000008d: 	movl	$0x0, 0xfc(%rsp)
    00000098: 	addl	$0x1, %edx
    0000009b: 	shlq	$0x7, %rax
    0000009f: 	movl	$0x1, 0x108(%rsp)
    000000aa: 	movl	%edx, 0x124(%rsp)
    000000b1: 	movslq	%edx, %rdx
    000000b4: 	movq	%rdx, 0x128(%rsp)
    000000bc: 	movl	%ecx, %edx
    000000be: 	leal	0x9(,%rcx,8), %ecx
    000000c5: 	shlq	$0x3, %rdx
    000000c9: 	movl	%ecx, 0x118(%rsp)
    000000d0: 	movq	%rdx, 0x138(%rsp)
    000000d8: 	movq	%rdi, 0x140(%rsp)
    000000e0: 	movq	%rax, 0x130(%rsp)
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp98:
    000000f0: 	addl	$0x1, 0x108(%rsp)
    000000f8: 	cmpl	$0x1, 0x10c(%rsp)
    00000100: 	movl	$0x1, %eax
    00000105: 	jle	.Ltmp92 # Offset: 261
    0000010b: 	movslq	0xf8(%rsp), %rbp
    00000113: 	movq	0x100(%rsp), %r15
    0000011b: 	movslq	0xfc(%rsp), %r11
    00000123: 	movslq	0xf4(%rsp), %r12
    0000012b: 	leaq	0x2(%rbp,%rbp), %rsi
    00000130: 	leaq	(%r15,%rsi), %rax
    00000134: 	leaq	0x12(%r11,%r11), %r9
    00000139: 	leaq	(%rbx,%r9), %rcx
    0000013d: 	movq	%rax, %rdx
    00000140: 	leaq	0xe(%rbx,%rsi), %rdi
    00000145: 	subq	%rcx, %rdx
    00000148: 	leaq	0x1e(%rbx,%rsi), %r10
    0000014d: 	leaq	0x12(%r12,%r12), %r8
    00000152: 	addq	$0xe, %rdx
    00000156: 	cmpq	$0x7c, %rdx
    0000015a: 	movq	%rax, %rdx
    0000015d: 	seta	%cl
    00000160: 	subq	%rdi, %rdx
    00000163: 	addq	$0xe, %rdx
    00000167: 	cmpq	$0x7c, %rdx
    0000016b: 	seta	%dl
    0000016e: 	andl	%ecx, %edx
    00000170: 	cmpl	$0x3f, 0x11c(%rsp)
    00000178: 	seta	%cl
    0000017b: 	andl	%ecx, %edx
    0000017d: 	movq	%rax, %rcx
    00000180: 	subq	%r10, %rcx
    00000183: 	addq	$0xe, %rcx
    00000187: 	cmpq	$0x70, %rcx
    0000018b: 	seta	%cl
    0000018e: 	testb	%cl, %dl
    00000190: 	je	.Ltmp93 # Offset: 400
    00000196: 	leaq	(%rbx,%r8), %rcx
    0000019a: 	movq	%rax, %rdx
    0000019d: 	subq	%rcx, %rdx
    000001a0: 	addq	$0xe, %rdx
    000001a4: 	cmpq	$0x7c, %rdx
    000001a8: 	jbe	.Ltmp93 # Offset: 424
    000001ae: 	leaq	-0x10(%rbx,%r9), %rcx
    000001b3: 	leaq	0xc(%r15,%rsi), %rdx
    000001b8: 	leaq	-0x2(%rbx,%rsi), %r9
    000001bd: 	movq	0x130(%rsp), %rsi
    000001c5: 	leaq	-0x10(%rbx,%r8), %r8
    000001ca: 	leaq	(%rsi,%rcx), %r10
    000001ce: 	nop # Size: 2
.Ltmp94:
    000001d0: 	movdqu	(%rcx), %xmm3
    000001d4: 	movdqu	0x10(%rcx), %xmm7
    000001d9: 	subq	$-0x80, %rcx
    000001dd: 	subq	$-0x80, %r9
    000001e1: 	movdqu	-0x60(%rcx), %xmm1
    000001e6: 	movdqu	-0x50(%rcx), %xmm8
    000001ec: 	subq	$-0x80, %rdi
    000001f0: 	subq	$-0x80, %r8
    000001f4: 	movdqa	%xmm3, %xmm6
    000001f8: 	movdqa	%xmm3, %xmm5
    000001fc: 	punpcklwd	%xmm7, %xmm3
    00000200: 	movdqu	-0x40(%rcx), %xmm2
    00000205: 	punpcklwd	%xmm7, %xmm6
    00000209: 	punpckhwd	%xmm7, %xmm5
    0000020d: 	movdqa	%xmm1, %xmm7
    00000211: 	movdqu	-0x30(%rcx), %xmm9
    00000217: 	movdqa	%xmm6, %xmm11
    0000021c: 	punpcklwd	%xmm5, %xmm3
    00000220: 	punpcklwd	%xmm5, %xmm6
    00000224: 	movdqu	-0x20(%rcx), %xmm0
    00000229: 	punpckhwd	%xmm5, %xmm11
    0000022e: 	movdqa	%xmm1, %xmm5
    00000232: 	subq	$-0x80, %rax
    00000236: 	movdqu	-0x10(%rcx), %xmm10
    0000023c: 	punpcklwd	%xmm8, %xmm5
    00000241: 	punpckhwd	%xmm8, %xmm7
    00000246: 	punpcklwd	%xmm11, %xmm6
    0000024b: 	movdqu	-0x50(%r9), %xmm13
    00000251: 	punpckhwd	%xmm11, %xmm3
    00000256: 	punpcklwd	%xmm8, %xmm1
    0000025b: 	movdqa	%xmm5, %xmm11
    00000260: 	subq	$-0x80, %rdx
    00000264: 	punpckhwd	%xmm7, %xmm11
    00000269: 	punpcklwd	%xmm7, %xmm5
    0000026d: 	punpcklwd	%xmm7, %xmm1
    00000271: 	movdqa	%xmm2, %xmm7
    00000275: 	movdqa	%xmm2, %xmm8
    0000027a: 	punpcklwd	%xmm11, %xmm5
    0000027f: 	punpcklwd	%xmm9, %xmm7
    00000284: 	punpckhwd	%xmm11, %xmm1
    00000289: 	punpckhwd	%xmm9, %xmm8
    0000028e: 	movdqa	%xmm7, %xmm11
    00000293: 	punpcklwd	%xmm9, %xmm2
    00000298: 	punpcklwd	%xmm8, %xmm7
    0000029d: 	punpckhwd	%xmm8, %xmm11
    000002a2: 	punpcklwd	%xmm8, %xmm2
    000002a7: 	movdqa	%xmm0, %xmm8
    000002ac: 	punpcklwd	%xmm10, %xmm8
    000002b1: 	movdqa	%xmm0, %xmm9
    000002b6: 	punpcklwd	%xmm11, %xmm7
    000002bb: 	punpckhwd	%xmm10, %xmm9
    000002c0: 	punpckhwd	%xmm11, %xmm2
    000002c5: 	punpcklwd	%xmm10, %xmm0
    000002ca: 	movdqa	%xmm8, %xmm11
    000002cf: 	punpcklwd	%xmm9, %xmm0
    000002d4: 	punpcklwd	%xmm9, %xmm8
    000002d9: 	punpckhwd	%xmm9, %xmm11
    000002de: 	movdqa	%xmm6, %xmm9
    000002e3: 	movdqa	%xmm6, %xmm10
    000002e8: 	punpcklwd	%xmm5, %xmm9
    000002ed: 	punpcklwd	%xmm11, %xmm8
    000002f2: 	punpckhwd	%xmm11, %xmm0
    000002f7: 	punpckhwd	%xmm5, %xmm10
    000002fc: 	movdqa	%xmm9, %xmm11
    00000301: 	punpcklwd	%xmm5, %xmm6
    00000305: 	movdqa	%xmm7, %xmm5
    00000309: 	punpckhwd	%xmm10, %xmm11
    0000030e: 	punpcklwd	%xmm10, %xmm9
    00000313: 	punpcklwd	%xmm8, %xmm5
    00000318: 	punpcklwd	%xmm10, %xmm6
    0000031d: 	movdqa	%xmm7, %xmm10
    00000322: 	punpckhwd	%xmm8, %xmm10
    00000327: 	punpcklwd	%xmm11, %xmm9
    0000032c: 	punpckhwd	%xmm11, %xmm6
    00000331: 	punpcklwd	%xmm8, %xmm7
    00000336: 	movdqa	%xmm5, %xmm11
    0000033b: 	movdqa	%xmm3, %xmm8
    00000340: 	punpckhwd	%xmm10, %xmm11
    00000345: 	punpcklwd	%xmm1, %xmm8
    0000034a: 	punpcklwd	%xmm10, %xmm5
    0000034f: 	punpcklwd	%xmm10, %xmm7
    00000354: 	movdqa	%xmm3, %xmm10
    00000359: 	punpcklwd	%xmm11, %xmm5
    0000035e: 	punpckhwd	%xmm11, %xmm7
    00000363: 	punpckhwd	%xmm1, %xmm10
    00000368: 	movdqa	%xmm8, %xmm11
    0000036d: 	punpcklwd	%xmm1, %xmm3
    00000371: 	movdqa	%xmm2, %xmm1
    00000375: 	punpckhwd	%xmm10, %xmm11
    0000037a: 	punpcklwd	%xmm0, %xmm1
    0000037e: 	punpcklwd	%xmm10, %xmm8
    00000383: 	punpcklwd	%xmm10, %xmm3
    00000388: 	movdqa	%xmm2, %xmm10
    0000038d: 	punpcklwd	%xmm11, %xmm8
    00000392: 	punpckhwd	%xmm11, %xmm3
    00000397: 	punpckhwd	%xmm0, %xmm10
    0000039c: 	movdqa	%xmm1, %xmm11
    000003a1: 	movdqa	%xmm9, %xmm15
    000003a6: 	punpckhwd	%xmm10, %xmm11
    000003ab: 	punpcklwd	%xmm5, %xmm15
    000003b0: 	punpcklwd	%xmm10, %xmm1
    000003b5: 	punpcklwd	%xmm0, %xmm2
    000003b9: 	movdqa	%xmm9, %xmm0
    000003be: 	punpcklwd	%xmm11, %xmm1
    000003c3: 	punpckhwd	%xmm5, %xmm0
    000003c7: 	punpcklwd	%xmm10, %xmm2
    000003cc: 	punpcklwd	%xmm5, %xmm9
    000003d1: 	movdqa	%xmm15, %xmm10
    000003d6: 	movdqa	%xmm8, %xmm5
    000003db: 	punpcklwd	%xmm0, %xmm15
    000003e0: 	punpckhwd	%xmm0, %xmm10
    000003e5: 	punpcklwd	%xmm1, %xmm5
    000003e9: 	punpcklwd	%xmm0, %xmm9
    000003ee: 	movdqa	%xmm8, %xmm0
    000003f3: 	movdqa	%xmm5, %xmm14
    000003f8: 	punpcklwd	%xmm1, %xmm8
    000003fd: 	punpckhwd	%xmm1, %xmm0
    00000401: 	movdqa	%xmm6, %xmm1
    00000405: 	punpckhwd	%xmm11, %xmm2
    0000040a: 	movdqu	-0x60(%r9), %xmm11
    00000410: 	punpckhwd	%xmm0, %xmm14
    00000415: 	punpcklwd	%xmm0, %xmm5
    00000419: 	punpcklwd	%xmm0, %xmm8
    0000041e: 	movdqa	%xmm6, %xmm0
    00000422: 	punpcklwd	%xmm7, %xmm1
    00000426: 	punpcklwd	%xmm7, %xmm6
    0000042a: 	punpckhwd	%xmm7, %xmm0
    0000042e: 	movdqa	%xmm1, %xmm12
    00000433: 	punpckhwd	%xmm14, %xmm8
    00000438: 	punpcklwd	%xmm0, %xmm6
    0000043c: 	punpckhwd	%xmm0, %xmm12
    00000441: 	punpcklwd	%xmm0, %xmm1
    00000445: 	movaps	%xmm8, 0x98(%rsp)
    0000044e: 	movdqa	%xmm6, %xmm0
    00000452: 	punpcklwd	%xmm12, %xmm1
    00000457: 	movdqa	%xmm3, %xmm6
    0000045b: 	movdqu	-0x70(%r9), %xmm8
    00000461: 	punpckhwd	%xmm12, %xmm0
    00000466: 	movdqa	%xmm3, %xmm12
    0000046b: 	punpckhwd	%xmm2, %xmm6
    0000046f: 	punpcklwd	%xmm2, %xmm12
    00000474: 	punpcklwd	%xmm2, %xmm3
    00000478: 	movdqu	-0x80(%r9), %xmm2
    0000047e: 	movaps	%xmm0, 0xa8(%rsp)
    00000486: 	movdqa	%xmm12, %xmm0
    0000048b: 	punpcklwd	%xmm6, %xmm3
    0000048f: 	punpckhwd	%xmm6, %xmm12
    00000494: 	punpcklwd	%xmm6, %xmm0
    00000498: 	punpckhwd	%xmm12, %xmm3
    0000049d: 	movdqu	-0x40(%r9), %xmm6
    000004a3: 	punpcklwd	%xmm14, %xmm5
    000004a8: 	punpcklwd	%xmm12, %xmm0
    000004ad: 	movdqa	%xmm2, %xmm12
    000004b2: 	movaps	%xmm3, -0x68(%rsp)
    000004b7: 	movdqu	-0x30(%r9), %xmm14
    000004bd: 	punpckhwd	%xmm8, %xmm12
    000004c2: 	punpckhwd	%xmm10, %xmm9
    000004c7: 	punpcklwd	%xmm10, %xmm15
    000004cc: 	movdqu	-0x20(%r9), %xmm10
    000004d2: 	movdqa	%xmm12, %xmm7
    000004d7: 	movdqa	%xmm2, %xmm12
    000004dc: 	punpcklwd	%xmm8, %xmm2
    000004e1: 	movaps	%xmm9, 0x88(%rsp)
    000004ea: 	punpcklwd	%xmm8, %xmm12
    000004ef: 	punpcklwd	%xmm7, %xmm2
    000004f3: 	movaps	%xmm15, -0x78(%rsp)
    000004f9: 	movdqu	-0x10(%r9), %xmm15
    000004ff: 	movdqa	%xmm12, %xmm3
    00000504: 	punpckhwd	%xmm7, %xmm12
    00000509: 	punpcklwd	%xmm7, %xmm3
    0000050d: 	punpckhwd	%xmm12, %xmm2
    00000512: 	punpcklwd	%xmm12, %xmm3
    00000517: 	movdqa	%xmm11, %xmm12
    0000051c: 	punpckhwd	%xmm13, %xmm12
    00000521: 	movdqa	%xmm12, %xmm7
    00000526: 	movdqa	%xmm11, %xmm12
    0000052b: 	punpcklwd	%xmm13, %xmm11
    00000530: 	punpcklwd	%xmm13, %xmm12
    00000535: 	movdqa	%xmm6, %xmm13
    0000053a: 	punpcklwd	%xmm7, %xmm11
    0000053f: 	punpckhwd	%xmm14, %xmm13
    00000544: 	movdqa	%xmm12, %xmm8
    00000549: 	punpcklwd	%xmm7, %xmm12
    0000054e: 	punpckhwd	%xmm7, %xmm8
    00000553: 	movdqa	%xmm13, %xmm7
    00000558: 	movdqa	%xmm6, %xmm13
    0000055d: 	punpcklwd	%xmm14, %xmm13
    00000562: 	punpcklwd	%xmm14, %xmm6
    00000567: 	punpcklwd	%xmm8, %xmm12
    0000056c: 	movdqa	%xmm13, %xmm9
    00000571: 	punpcklwd	%xmm7, %xmm6
    00000575: 	punpckhwd	%xmm7, %xmm13
    0000057a: 	punpcklwd	%xmm7, %xmm9
    0000057f: 	punpckhwd	%xmm13, %xmm6
    00000584: 	punpckhwd	%xmm8, %xmm11
    00000589: 	punpcklwd	%xmm13, %xmm9
    0000058e: 	movdqa	%xmm10, %xmm13
    00000593: 	punpckhwd	%xmm15, %xmm13
    00000598: 	movdqa	%xmm13, %xmm8
    0000059d: 	movdqa	%xmm10, %xmm13
    000005a2: 	punpcklwd	%xmm15, %xmm10
    000005a7: 	punpcklwd	%xmm15, %xmm13
    000005ac: 	punpcklwd	%xmm8, %xmm10
    000005b1: 	movdqa	%xmm13, %xmm7
    000005b6: 	punpckhwd	%xmm8, %xmm13
    000005bb: 	punpcklwd	%xmm8, %xmm7
    000005c0: 	movdqa	%xmm3, %xmm8
    000005c5: 	punpckhwd	%xmm13, %xmm10
    000005ca: 	punpcklwd	%xmm13, %xmm7
    000005cf: 	punpcklwd	%xmm12, %xmm8
    000005d4: 	movdqa	%xmm3, %xmm13
    000005d9: 	punpckhwd	%xmm12, %xmm13
    000005de: 	movdqa	%xmm8, %xmm14
    000005e3: 	punpcklwd	%xmm12, %xmm3
    000005e8: 	movdqa	%xmm9, %xmm12
    000005ed: 	punpckhwd	%xmm13, %xmm14
    000005f2: 	punpcklwd	%xmm13, %xmm8
    000005f7: 	punpcklwd	%xmm7, %xmm12
    000005fc: 	punpcklwd	%xmm13, %xmm3
    00000601: 	movdqa	%xmm9, %xmm13
    00000606: 	punpckhwd	%xmm7, %xmm13
    0000060b: 	punpcklwd	%xmm14, %xmm8
    00000610: 	punpckhwd	%xmm14, %xmm3
    00000615: 	punpcklwd	%xmm7, %xmm9
    0000061a: 	movdqa	%xmm12, %xmm14
    0000061f: 	punpcklwd	%xmm13, %xmm12
    00000624: 	punpckhwd	%xmm13, %xmm14
    00000629: 	punpcklwd	%xmm13, %xmm9
    0000062e: 	movdqa	%xmm2, %xmm13
    00000633: 	punpcklwd	%xmm14, %xmm12
    00000638: 	punpckhwd	%xmm14, %xmm9
    0000063d: 	movdqa	%xmm2, %xmm14
    00000642: 	punpcklwd	%xmm11, %xmm14
    00000647: 	punpckhwd	%xmm11, %xmm13
    0000064c: 	punpcklwd	%xmm11, %xmm2
    00000651: 	movdqa	%xmm14, %xmm7
    00000656: 	movdqa	%xmm6, %xmm11
    0000065b: 	punpckhwd	%xmm13, %xmm14
    00000660: 	punpcklwd	%xmm10, %xmm11
    00000665: 	punpcklwd	%xmm13, %xmm7
    0000066a: 	punpcklwd	%xmm13, %xmm2
    0000066f: 	movdqa	%xmm6, %xmm13
    00000674: 	punpcklwd	%xmm14, %xmm7
    00000679: 	punpckhwd	%xmm14, %xmm2
    0000067e: 	punpckhwd	%xmm10, %xmm13
    00000683: 	movdqa	%xmm11, %xmm14
    00000688: 	punpcklwd	%xmm10, %xmm6
    0000068d: 	punpckhwd	%xmm13, %xmm14
    00000692: 	punpcklwd	%xmm13, %xmm11
    00000697: 	punpcklwd	%xmm13, %xmm6
    0000069c: 	punpcklwd	%xmm14, %xmm11
    000006a1: 	punpckhwd	%xmm14, %xmm6
    000006a6: 	movdqa	%xmm8, %xmm14
    000006ab: 	punpcklwd	%xmm12, %xmm14
    000006b0: 	movdqa	%xmm8, %xmm10
    000006b5: 	punpcklwd	%xmm12, %xmm8
    000006ba: 	punpckhwd	%xmm12, %xmm10
    000006bf: 	movdqa	%xmm14, %xmm13
    000006c4: 	punpckhwd	%xmm10, %xmm13
    000006c9: 	punpcklwd	%xmm10, %xmm14
    000006ce: 	punpcklwd	%xmm10, %xmm8
    000006d3: 	punpckhwd	%xmm13, %xmm8
    000006d8: 	punpcklwd	%xmm13, %xmm14
    000006dd: 	movdqa	%xmm7, %xmm13
    000006e2: 	punpcklwd	%xmm11, %xmm13
    000006e7: 	movdqa	%xmm7, %xmm10
    000006ec: 	punpcklwd	%xmm11, %xmm7
    000006f1: 	movaps	%xmm14, -0x58(%rsp)
    000006f7: 	punpckhwd	%xmm11, %xmm10
    000006fc: 	movdqa	%xmm13, %xmm12
    00000701: 	movdqa	%xmm3, %xmm11
    00000706: 	punpckhwd	%xmm10, %xmm12
    0000070b: 	punpcklwd	%xmm10, %xmm13
    00000710: 	punpcklwd	%xmm10, %xmm7
    00000715: 	movdqa	%xmm3, %xmm10
    0000071a: 	punpckhwd	%xmm12, %xmm7
    0000071f: 	punpckhwd	%xmm9, %xmm11
    00000724: 	punpcklwd	%xmm9, %xmm10
    00000729: 	punpcklwd	%xmm12, %xmm13
    0000072e: 	punpcklwd	%xmm9, %xmm3
    00000733: 	movdqa	%xmm10, %xmm12
    00000738: 	punpcklwd	%xmm11, %xmm3
    0000073d: 	punpcklwd	%xmm11, %xmm10
    00000742: 	movaps	%xmm13, -0x48(%rsp)
    00000748: 	punpckhwd	%xmm11, %xmm12
    0000074d: 	movdqa	%xmm2, %xmm11
    00000752: 	punpcklwd	%xmm12, %xmm10
    00000757: 	punpckhwd	%xmm12, %xmm3
    0000075c: 	movdqa	%xmm2, %xmm12
    00000761: 	punpckhwd	%xmm6, %xmm11
    00000766: 	punpcklwd	%xmm6, %xmm12
    0000076b: 	punpcklwd	%xmm6, %xmm2
    0000076f: 	movdqa	%xmm4, %xmm6
    00000773: 	movdqa	%xmm12, %xmm9
    00000778: 	punpcklwd	%xmm11, %xmm2
    0000077d: 	pcmpgtw	%xmm10, %xmm6
    00000782: 	punpckhwd	%xmm11, %xmm12
    00000787: 	punpcklwd	%xmm11, %xmm9
    0000078c: 	punpcklwd	%xmm12, %xmm9
    00000791: 	punpckhwd	%xmm12, %xmm2
    00000796: 	movdqa	%xmm10, %xmm12
    0000079b: 	movdqa	%xmm9, %xmm11
    000007a0: 	movdqa	%xmm3, %xmm15
    000007a5: 	punpcklwd	%xmm6, %xmm12
    000007aa: 	punpckhwd	%xmm6, %xmm10
    000007af: 	movdqa	%xmm4, %xmm6
    000007b3: 	pcmpgtw	%xmm9, %xmm6
    000007b8: 	movaps	%xmm12, -0x38(%rsp)
    000007be: 	movdqa	%xmm8, %xmm12
    000007c3: 	movaps	%xmm10, -0x28(%rsp)
    000007c9: 	movdqa	%xmm7, %xmm10
    000007ce: 	punpcklwd	%xmm6, %xmm11
    000007d3: 	punpckhwd	%xmm6, %xmm9
    000007d8: 	movdqa	%xmm4, %xmm6
    000007dc: 	pcmpgtw	%xmm8, %xmm6
    000007e1: 	movaps	%xmm11, -0x18(%rsp)
    000007e7: 	movdqa	%xmm7, %xmm11
    000007ec: 	movaps	%xmm9, -0x8(%rsp)
    000007f2: 	punpcklwd	%xmm6, %xmm12
    000007f7: 	punpckhwd	%xmm6, %xmm8
    000007fc: 	movdqa	%xmm4, %xmm6
    00000800: 	pcmpgtw	%xmm7, %xmm6
    00000804: 	movaps	%xmm12, 0x8(%rsp)
    0000080a: 	movaps	%xmm8, 0x18(%rsp)
    00000810: 	punpcklwd	%xmm6, %xmm11
    00000815: 	punpckhwd	%xmm6, %xmm10
    0000081a: 	movdqa	%xmm4, %xmm6
    0000081e: 	pcmpgtw	%xmm3, %xmm6
    00000822: 	movaps	%xmm11, 0x28(%rsp)
    00000828: 	movaps	%xmm10, 0x38(%rsp)
    0000082e: 	punpcklwd	%xmm6, %xmm15
    00000833: 	punpckhwd	%xmm6, %xmm3
    00000837: 	movdqa	%xmm4, %xmm6
    0000083b: 	pcmpgtw	%xmm2, %xmm6
    0000083f: 	movaps	%xmm15, 0x48(%rsp)
    00000845: 	movaps	%xmm3, 0x58(%rsp)
    0000084a: 	movdqu	-0x10(%rdi), %xmm11
    00000850: 	movdqa	%xmm6, %xmm3
    00000854: 	movdqa	%xmm2, %xmm6
    00000858: 	punpcklwd	%xmm3, %xmm6
    0000085c: 	punpckhwd	%xmm3, %xmm2
    00000860: 	movaps	%xmm6, 0x68(%rsp)
    00000865: 	movdqu	-0x70(%rdi), %xmm6
    0000086a: 	movaps	%xmm2, 0x78(%rsp)
    0000086f: 	movdqu	-0x80(%rdi), %xmm2
    00000874: 	punpckhwd	%xmm6, %xmm2
    00000878: 	movdqa	%xmm2, %xmm10
    0000087d: 	movdqu	-0x80(%rdi), %xmm2
    00000882: 	punpcklwd	%xmm6, %xmm2
    00000886: 	movdqu	-0x50(%rdi), %xmm6
    0000088b: 	movdqa	%xmm2, %xmm3
    0000088f: 	punpckhwd	%xmm10, %xmm2
    00000894: 	punpcklwd	%xmm10, %xmm3
    00000899: 	movdqa	%xmm2, %xmm14
    0000089e: 	punpcklwd	%xmm2, %xmm3
    000008a2: 	movdqu	-0x60(%rdi), %xmm2
    000008a7: 	punpckhwd	%xmm6, %xmm2
    000008ab: 	movdqa	%xmm2, %xmm9
    000008b0: 	movdqu	-0x60(%rdi), %xmm2
    000008b5: 	punpcklwd	%xmm6, %xmm2
    000008b9: 	movdqa	%xmm3, %xmm6
    000008bd: 	movdqa	%xmm2, %xmm13
    000008c2: 	punpcklwd	%xmm9, %xmm2
    000008c7: 	punpckhwd	%xmm9, %xmm13
    000008cc: 	punpcklwd	%xmm13, %xmm2
    000008d1: 	punpcklwd	%xmm2, %xmm3
    000008d5: 	punpckhwd	%xmm2, %xmm6
    000008d9: 	movdqa	%xmm3, %xmm2
    000008dd: 	punpcklwd	%xmm6, %xmm3
    000008e1: 	punpckhwd	%xmm6, %xmm2
    000008e5: 	movdqu	-0x30(%rdi), %xmm6
    000008ea: 	punpcklwd	%xmm2, %xmm3
    000008ee: 	movdqu	-0x40(%rdi), %xmm2
    000008f3: 	punpckhwd	%xmm6, %xmm2
    000008f7: 	movdqa	%xmm2, %xmm8
    000008fc: 	movdqu	-0x40(%rdi), %xmm2
    00000901: 	punpcklwd	%xmm6, %xmm2
    00000905: 	movdqa	%xmm2, %xmm6
    00000909: 	punpcklwd	%xmm8, %xmm2
    0000090e: 	punpckhwd	%xmm8, %xmm6
    00000913: 	movdqa	%xmm6, %xmm12
    00000918: 	punpcklwd	%xmm6, %xmm2
    0000091c: 	movdqu	-0x20(%rdi), %xmm6
    00000921: 	movdqa	%xmm2, %xmm15
    00000926: 	punpckhwd	%xmm11, %xmm6
    0000092b: 	movdqa	%xmm6, %xmm7
    0000092f: 	movdqu	-0x20(%rdi), %xmm6
    00000934: 	punpcklwd	%xmm11, %xmm6
    00000939: 	movdqa	%xmm6, %xmm11
    0000093e: 	punpcklwd	%xmm7, %xmm6
    00000942: 	punpckhwd	%xmm7, %xmm11
    00000947: 	punpcklwd	%xmm11, %xmm6
    0000094c: 	punpcklwd	%xmm6, %xmm2
    00000950: 	punpckhwd	%xmm6, %xmm15
    00000955: 	movdqa	%xmm2, %xmm6
    00000959: 	punpcklwd	%xmm15, %xmm2
    0000095e: 	punpckhwd	%xmm15, %xmm6
    00000963: 	punpcklwd	%xmm6, %xmm2
    00000967: 	movdqa	%xmm3, %xmm6
    0000096b: 	punpcklwd	%xmm2, %xmm3
    0000096f: 	punpckhwd	%xmm2, %xmm6
    00000973: 	movdqa	%xmm3, %xmm2
    00000977: 	punpcklwd	%xmm6, %xmm3
    0000097b: 	punpckhwd	%xmm6, %xmm2
    0000097f: 	movdqu	-0x70(%rdi), %xmm6
    00000984: 	punpcklwd	%xmm2, %xmm3
    00000988: 	movdqu	-0x80(%rdi), %xmm2
    0000098d: 	movaps	%xmm3, 0xb8(%rsp)
    00000995: 	punpcklwd	%xmm6, %xmm2
    00000999: 	movdqu	-0x60(%rdi), %xmm6
    0000099e: 	punpcklwd	%xmm10, %xmm2
    000009a3: 	movdqu	-0x50(%rdi), %xmm10
    000009a9: 	punpckhwd	%xmm14, %xmm2
    000009ae: 	movdqu	-0x10(%r8), %xmm14
    000009b4: 	punpcklwd	%xmm10, %xmm6
    000009b9: 	movdqa	%xmm6, %xmm3
    000009bd: 	movdqa	%xmm2, %xmm6
    000009c1: 	punpcklwd	%xmm9, %xmm3
    000009c6: 	movdqu	-0x60(%r8), %xmm9
    000009cc: 	punpckhwd	%xmm13, %xmm3
    000009d1: 	movdqu	-0x30(%r8), %xmm13
    000009d7: 	punpcklwd	%xmm3, %xmm2
    000009db: 	punpckhwd	%xmm3, %xmm6
    000009df: 	movdqa	%xmm2, %xmm10
    000009e4: 	punpcklwd	%xmm6, %xmm2
    000009e8: 	punpckhwd	%xmm6, %xmm10
    000009ed: 	movdqu	-0x40(%rdi), %xmm6
    000009f2: 	punpcklwd	%xmm10, %xmm2
    000009f7: 	movdqu	-0x30(%rdi), %xmm10
    000009fd: 	punpcklwd	%xmm10, %xmm6
    00000a02: 	movdqu	-0x70(%r8), %xmm10
    00000a08: 	movdqa	%xmm6, %xmm3
    00000a0c: 	movdqu	-0x20(%rdi), %xmm6
    00000a11: 	punpcklwd	%xmm8, %xmm3
    00000a16: 	movdqu	-0x20(%r8), %xmm8
    00000a1c: 	punpckhwd	%xmm12, %xmm3
    00000a21: 	movdqu	-0x10(%rdi), %xmm12
    00000a27: 	punpcklwd	%xmm12, %xmm6
    00000a2c: 	movdqa	%xmm3, %xmm12
    00000a31: 	punpcklwd	%xmm7, %xmm6
    00000a35: 	punpckhwd	%xmm11, %xmm6
    00000a3a: 	punpcklwd	%xmm6, %xmm3
    00000a3e: 	punpckhwd	%xmm6, %xmm12
    00000a43: 	movdqa	%xmm3, %xmm6
    00000a47: 	punpcklwd	%xmm12, %xmm3
    00000a4c: 	punpckhwd	%xmm12, %xmm6
    00000a51: 	punpcklwd	%xmm6, %xmm3
    00000a55: 	movdqa	%xmm2, %xmm6
    00000a59: 	punpckhwd	%xmm3, %xmm6
    00000a5d: 	punpcklwd	%xmm3, %xmm2
    00000a61: 	movdqu	-0x80(%r8), %xmm3
    00000a67: 	movdqa	%xmm2, %xmm12
    00000a6c: 	punpckhwd	%xmm6, %xmm2
    00000a70: 	movdqa	%xmm3, %xmm11
    00000a75: 	punpcklwd	%xmm6, %xmm12
    00000a7a: 	movdqa	%xmm3, %xmm6
    00000a7e: 	punpcklwd	%xmm10, %xmm11
    00000a83: 	punpckhwd	%xmm10, %xmm6
    00000a88: 	punpcklwd	%xmm2, %xmm12
    00000a8d: 	movdqu	-0x40(%r8), %xmm2
    00000a93: 	movdqa	%xmm11, %xmm7
    00000a98: 	punpcklwd	%xmm10, %xmm3
    00000a9d: 	punpckhwd	%xmm6, %xmm11
    00000aa2: 	movaps	%xmm12, 0xc8(%rsp)
    00000aab: 	punpcklwd	%xmm6, %xmm7
    00000aaf: 	movdqu	-0x50(%r8), %xmm12
    00000ab5: 	punpcklwd	%xmm6, %xmm3
    00000ab9: 	movdqa	%xmm9, %xmm6
    00000abe: 	punpcklwd	%xmm11, %xmm7
    00000ac3: 	punpckhwd	%xmm11, %xmm3
    00000ac8: 	movdqa	%xmm9, %xmm11
    00000acd: 	punpcklwd	%xmm12, %xmm11
    00000ad2: 	punpckhwd	%xmm12, %xmm6
    00000ad7: 	punpcklwd	%xmm12, %xmm9
    00000adc: 	movdqa	%xmm11, %xmm10
    00000ae1: 	punpcklwd	%xmm6, %xmm9
    00000ae6: 	punpcklwd	%xmm6, %xmm11
    00000aeb: 	punpckhwd	%xmm6, %xmm10
    00000af0: 	movdqa	%xmm2, %xmm6
    00000af4: 	punpckhwd	%xmm13, %xmm6
    00000af9: 	punpcklwd	%xmm10, %xmm11
    00000afe: 	punpckhwd	%xmm10, %xmm9
    00000b03: 	movdqa	%xmm6, %xmm10
    00000b08: 	movdqa	%xmm2, %xmm6
    00000b0c: 	punpcklwd	%xmm13, %xmm2
    00000b11: 	punpcklwd	%xmm13, %xmm6
    00000b16: 	punpcklwd	%xmm10, %xmm2
    00000b1b: 	movdqa	%xmm6, %xmm12
    00000b20: 	punpcklwd	%xmm10, %xmm6
    00000b25: 	punpckhwd	%xmm10, %xmm12
    00000b2a: 	movdqa	%xmm8, %xmm10
    00000b2f: 	punpcklwd	%xmm12, %xmm6
    00000b34: 	punpckhwd	%xmm12, %xmm2
    00000b39: 	punpcklwd	%xmm14, %xmm10
    00000b3e: 	movdqa	%xmm8, %xmm12
    00000b43: 	movdqa	%xmm10, %xmm13
    00000b48: 	punpcklwd	%xmm14, %xmm8
    00000b4d: 	punpckhwd	%xmm14, %xmm12
    00000b52: 	punpckhwd	%xmm12, %xmm13
    00000b57: 	punpcklwd	%xmm12, %xmm10
    00000b5c: 	punpcklwd	%xmm12, %xmm8
    00000b61: 	movdqa	%xmm7, %xmm12
    00000b66: 	punpcklwd	%xmm13, %xmm10
    00000b6b: 	punpckhwd	%xmm13, %xmm8
    00000b70: 	punpcklwd	%xmm11, %xmm12
    00000b75: 	movdqa	%xmm7, %xmm13
    00000b7a: 	punpcklwd	%xmm11, %xmm7
    00000b7f: 	punpckhwd	%xmm11, %xmm13
    00000b84: 	movdqa	%xmm12, %xmm14
    00000b89: 	movdqa	%xmm6, %xmm11
    00000b8e: 	punpckhwd	%xmm13, %xmm14
    00000b93: 	punpcklwd	%xmm10, %xmm11
    00000b98: 	punpcklwd	%xmm13, %xmm12
    00000b9d: 	punpcklwd	%xmm13, %xmm7
    00000ba2: 	movdqa	%xmm6, %xmm13
    00000ba7: 	punpcklwd	%xmm14, %xmm12
    00000bac: 	punpckhwd	%xmm14, %xmm7
    00000bb1: 	punpckhwd	%xmm10, %xmm13
    00000bb6: 	movdqa	%xmm11, %xmm14
    00000bbb: 	punpcklwd	%xmm10, %xmm6
    00000bc0: 	movdqa	%xmm3, %xmm10
    00000bc5: 	punpckhwd	%xmm13, %xmm14
    00000bca: 	punpcklwd	%xmm9, %xmm10
    00000bcf: 	punpcklwd	%xmm13, %xmm11
    00000bd4: 	punpcklwd	%xmm13, %xmm6
    00000bd9: 	movdqa	%xmm3, %xmm13
    00000bde: 	punpcklwd	%xmm14, %xmm11
    00000be3: 	punpckhwd	%xmm14, %xmm6
    00000be8: 	punpckhwd	%xmm9, %xmm13
    00000bed: 	movdqa	%xmm10, %xmm14
    00000bf2: 	punpcklwd	%xmm9, %xmm3
    00000bf7: 	movdqa	%xmm2, %xmm9
    00000bfc: 	punpckhwd	%xmm13, %xmm14
    00000c01: 	punpcklwd	%xmm13, %xmm10
    00000c06: 	punpcklwd	%xmm8, %xmm9
    00000c0b: 	punpcklwd	%xmm13, %xmm3
    00000c10: 	movdqa	%xmm2, %xmm13
    00000c15: 	punpckhwd	%xmm14, %xmm3
    00000c1a: 	punpckhwd	%xmm8, %xmm13
    00000c1f: 	punpcklwd	%xmm14, %xmm10
    00000c24: 	punpcklwd	%xmm8, %xmm2
    00000c29: 	movdqa	%xmm9, %xmm14
    00000c2e: 	movdqa	%xmm12, %xmm15
    00000c33: 	punpckhwd	%xmm13, %xmm14
    00000c38: 	punpcklwd	%xmm13, %xmm9
    00000c3d: 	punpcklwd	%xmm13, %xmm2
    00000c42: 	punpcklwd	%xmm14, %xmm9
    00000c47: 	punpckhwd	%xmm14, %xmm2
    00000c4c: 	punpcklwd	%xmm11, %xmm15
    00000c51: 	movdqa	%xmm12, %xmm8
    00000c56: 	movdqa	%xmm12, %xmm14
    00000c5b: 	movdqa	%xmm15, %xmm13
    00000c60: 	punpckhwd	%xmm11, %xmm8
    00000c65: 	punpcklwd	%xmm11, %xmm14
    00000c6a: 	movdqa	%xmm10, %xmm11
    00000c6f: 	punpckhwd	%xmm8, %xmm13
    00000c74: 	punpcklwd	%xmm8, %xmm15
    00000c79: 	punpcklwd	%xmm8, %xmm14
    00000c7e: 	movdqa	%xmm10, %xmm8
    00000c83: 	punpcklwd	%xmm9, %xmm10
    00000c88: 	punpckhwd	%xmm9, %xmm11
    00000c8d: 	punpcklwd	%xmm9, %xmm8
    00000c92: 	punpcklwd	%xmm13, %xmm15
    00000c97: 	punpckhwd	%xmm13, %xmm14
    00000c9c: 	movdqa	%xmm8, %xmm12
    00000ca1: 	movdqa	%xmm10, %xmm13
    00000ca6: 	punpcklwd	%xmm11, %xmm8
    00000cab: 	punpckhwd	%xmm11, %xmm12
    00000cb0: 	punpcklwd	%xmm11, %xmm13
    00000cb5: 	movdqa	%xmm7, %xmm9
    00000cba: 	punpcklwd	%xmm12, %xmm8
    00000cbf: 	punpckhwd	%xmm12, %xmm13
    00000cc4: 	punpcklwd	%xmm6, %xmm9
    00000cc9: 	movdqa	%xmm7, %xmm10
    00000cce: 	movdqa	%xmm7, %xmm12
    00000cd3: 	movdqa	%xmm9, %xmm11
    00000cd8: 	punpckhwd	%xmm6, %xmm10
    00000cdd: 	punpcklwd	%xmm6, %xmm12
    00000ce2: 	movdqa	%xmm3, %xmm6
    00000ce6: 	punpckhwd	%xmm10, %xmm11
    00000ceb: 	punpckhwd	%xmm2, %xmm6
    00000cef: 	punpcklwd	%xmm10, %xmm9
    00000cf4: 	punpcklwd	%xmm10, %xmm12
    00000cf9: 	movdqa	%xmm6, %xmm7
    00000cfd: 	punpcklwd	%xmm11, %xmm9
    00000d02: 	punpckhwd	%xmm11, %xmm12
    00000d07: 	movdqa	%xmm3, %xmm6
    00000d0b: 	movdqa	%xmm3, %xmm11
    00000d10: 	punpcklwd	%xmm2, %xmm6
    00000d14: 	punpcklwd	%xmm2, %xmm11
    00000d19: 	movdqa	%xmm4, %xmm2
    00000d1d: 	pcmpgtw	%xmm5, %xmm2
    00000d21: 	movdqa	%xmm6, %xmm10
    00000d26: 	punpcklwd	%xmm7, %xmm11
    00000d2b: 	punpckhwd	%xmm7, %xmm10
    00000d30: 	punpcklwd	%xmm7, %xmm6
    00000d34: 	punpcklwd	%xmm10, %xmm6
    00000d39: 	punpckhwd	%xmm10, %xmm11
    00000d3e: 	movdqa	%xmm5, %xmm10
    00000d43: 	movaps	%xmm2, 0xd8(%rsp)
    00000d4b: 	punpcklwd	%xmm2, %xmm10
    00000d50: 	movdqa	-0x48(%rsp), %xmm7
    00000d56: 	punpckhwd	0xd8(%rsp), %xmm5
    00000d5f: 	movdqa	%xmm10, %xmm2
    00000d64: 	movdqa	%xmm4, %xmm10
    00000d69: 	pcmpgtw	%xmm7, %xmm10
    00000d6e: 	movdqa	%xmm7, %xmm3
    00000d72: 	movdqa	%xmm4, %xmm7
    00000d76: 	pcmpgtw	%xmm8, %xmm7
    00000d7b: 	punpcklwd	%xmm10, %xmm3
    00000d80: 	paddd	%xmm2, %xmm3
    00000d84: 	movdqa	%xmm8, %xmm2
    00000d89: 	paddd	-0x18(%rsp), %xmm3
    00000d8f: 	punpcklwd	%xmm7, %xmm2
    00000d93: 	punpckhwd	%xmm7, %xmm8
    00000d98: 	movdqa	%xmm9, %xmm7
    00000d9d: 	paddd	%xmm3, %xmm2
    00000da1: 	movdqa	-0x48(%rsp), %xmm3
    00000da7: 	punpckhwd	%xmm10, %xmm3
    00000dac: 	movdqa	%xmm1, %xmm10
    00000db1: 	paddd	%xmm5, %xmm3
    00000db5: 	paddd	-0x8(%rsp), %xmm3
    00000dbb: 	movdqa	%xmm4, %xmm5
    00000dbf: 	pcmpgtw	%xmm1, %xmm5
    00000dc3: 	paddd	%xmm3, %xmm8
    00000dc8: 	movdqa	%xmm4, %xmm3
    00000dcc: 	pcmpgtw	%xmm9, %xmm3
    00000dd1: 	punpcklwd	%xmm5, %xmm10
    00000dd6: 	punpckhwd	%xmm5, %xmm1
    00000dda: 	movdqa	%xmm4, %xmm5
    00000dde: 	pcmpgtw	%xmm0, %xmm5
    00000de2: 	paddd	-0x28(%rsp), %xmm1
    00000de8: 	paddd	0x18(%rsp), %xmm1
    00000dee: 	punpcklwd	%xmm3, %xmm7
    00000df2: 	punpckhwd	%xmm3, %xmm9
    00000df7: 	movdqa	%xmm4, %xmm3
    00000dfb: 	pcmpgtw	%xmm6, %xmm3
    00000dff: 	paddd	-0x38(%rsp), %xmm10
    00000e06: 	paddd	%xmm1, %xmm9
    00000e0b: 	paddd	0x8(%rsp), %xmm10
    00000e12: 	movdqa	%xmm0, %xmm1
    00000e16: 	punpckhwd	%xmm5, %xmm0
    00000e1a: 	punpcklwd	%xmm5, %xmm1
    00000e1e: 	paddd	-0x18(%rsp), %xmm1
    00000e24: 	paddd	0x28(%rsp), %xmm1
    00000e2a: 	paddd	%xmm7, %xmm10
    00000e2f: 	movdqa	%xmm6, %xmm7
    00000e33: 	movdqa	%xmm4, %xmm5
    00000e37: 	punpcklwd	%xmm3, %xmm7
    00000e3b: 	paddd	-0x8(%rsp), %xmm0
    00000e41: 	paddd	0x38(%rsp), %xmm0
    00000e47: 	paddd	%xmm7, %xmm1
    00000e4b: 	punpckhwd	%xmm3, %xmm6
    00000e4f: 	movdqa	0x88(%rsp), %xmm7
    00000e58: 	paddd	%xmm0, %xmm6
    00000e5c: 	movaps	%xmm1, -0x48(%rsp)
    00000e61: 	pcmpgtw	%xmm7, %xmm5
    00000e65: 	movdqa	%xmm7, %xmm0
    00000e69: 	movdqa	%xmm5, %xmm3
    00000e6d: 	punpcklwd	%xmm5, %xmm0
    00000e71: 	movdqa	%xmm4, %xmm5
    00000e75: 	pcmpgtw	%xmm14, %xmm5
    00000e7a: 	paddd	0x8(%rsp), %xmm0
    00000e80: 	punpckhwd	%xmm3, %xmm7
    00000e84: 	paddd	0x48(%rsp), %xmm0
    00000e8a: 	movdqa	%xmm5, %xmm1
    00000e8e: 	movdqa	%xmm14, %xmm5
    00000e93: 	punpcklwd	%xmm1, %xmm5
    00000e97: 	punpckhwd	%xmm1, %xmm14
    00000e9c: 	paddd	%xmm5, %xmm0
    00000ea0: 	movaps	%xmm0, -0x18(%rsp)
    00000ea5: 	movdqa	%xmm7, %xmm0
    00000ea9: 	paddd	0x18(%rsp), %xmm0
    00000eaf: 	paddd	0x58(%rsp), %xmm0
    00000eb5: 	movdqa	0x98(%rsp), %xmm7
    00000ebe: 	movdqa	%xmm0, %xmm5
    00000ec2: 	paddd	%xmm14, %xmm5
    00000ec7: 	movdqa	%xmm7, %xmm0
    00000ecb: 	movaps	%xmm5, -0x8(%rsp)
    00000ed0: 	movdqa	%xmm4, %xmm5
    00000ed4: 	pcmpgtw	%xmm7, %xmm5
    00000ed8: 	movdqa	%xmm5, %xmm3
    00000edc: 	punpcklwd	%xmm5, %xmm0
    00000ee0: 	movdqa	%xmm4, %xmm5
    00000ee4: 	paddd	0x28(%rsp), %xmm0
    00000eea: 	paddd	0x68(%rsp), %xmm0
    00000ef0: 	pcmpgtw	%xmm13, %xmm5
    00000ef5: 	movdqa	%xmm0, %xmm14
    00000efa: 	movdqa	%xmm7, %xmm0
    00000efe: 	punpckhwd	%xmm3, %xmm0
    00000f02: 	paddd	0x38(%rsp), %xmm0
    00000f08: 	paddd	0x78(%rsp), %xmm0
    00000f0e: 	movdqa	%xmm5, %xmm1
    00000f12: 	movdqa	%xmm13, %xmm5
    00000f17: 	punpcklwd	%xmm1, %xmm5
    00000f1b: 	punpckhwd	%xmm1, %xmm13
    00000f20: 	movdqa	%xmm0, %xmm7
    00000f24: 	paddd	%xmm5, %xmm14
    00000f29: 	paddd	%xmm13, %xmm7
    00000f2e: 	movdqa	%xmm4, %xmm5
    00000f32: 	movdqa	0xb8(%rsp), %xmm13
    00000f3c: 	movaps	%xmm14, 0x8(%rsp)
    00000f42: 	movdqa	0xa8(%rsp), %xmm14
    00000f4c: 	pcmpgtw	%xmm13, %xmm5
    00000f51: 	movaps	%xmm7, 0x18(%rsp)
    00000f56: 	movdqa	%xmm4, %xmm7
    00000f5a: 	movdqa	%xmm13, %xmm0
    00000f5f: 	pcmpgtw	%xmm14, %xmm7
    00000f64: 	movdqa	%xmm5, %xmm1
    00000f68: 	punpcklwd	%xmm5, %xmm0
    00000f6c: 	movdqa	%xmm4, %xmm5
    00000f70: 	movdqa	%xmm7, %xmm3
    00000f74: 	pcmpgtw	%xmm12, %xmm5
    00000f79: 	movdqa	%xmm14, %xmm7
    00000f7e: 	punpcklwd	%xmm3, %xmm7
    00000f82: 	paddd	0x48(%rsp), %xmm7
    00000f88: 	paddd	%xmm0, %xmm7
    00000f8c: 	movdqa	%xmm5, %xmm0
    00000f90: 	movdqa	%xmm12, %xmm5
    00000f95: 	punpcklwd	%xmm0, %xmm5
    00000f99: 	paddd	%xmm5, %xmm7
    00000f9d: 	movdqa	%xmm14, %xmm5
    00000fa2: 	punpckhwd	%xmm3, %xmm5
    00000fa6: 	movdqa	%xmm13, %xmm3
    00000fab: 	paddd	0x58(%rsp), %xmm5
    00000fb1: 	punpckhwd	%xmm1, %xmm3
    00000fb5: 	movdqa	%xmm12, %xmm13
    00000fba: 	paddd	%xmm5, %xmm3
    00000fbe: 	punpckhwd	%xmm0, %xmm13
    00000fc3: 	movdqa	-0x68(%rsp), %xmm0
    00000fc9: 	movdqa	0xc8(%rsp), %xmm14
    00000fd3: 	movdqa	%xmm13, %xmm1
    00000fd8: 	movdqa	%xmm3, %xmm13
    00000fdd: 	movdqa	%xmm4, %xmm5
    00000fe1: 	paddd	%xmm1, %xmm13
    00000fe6: 	movdqa	%xmm4, %xmm1
    00000fea: 	movdqa	%xmm0, %xmm3
    00000fee: 	pcmpgtw	%xmm14, %xmm1
    00000ff3: 	movdqa	%xmm13, %xmm12
    00000ff8: 	movdqa	%xmm4, %xmm13
    00000ffd: 	pcmpgtw	%xmm0, %xmm13
    00001002: 	pcmpgtw	%xmm11, %xmm5
    00001007: 	movdqa	%xmm14, %xmm0
    0000100c: 	paddd	DATAat0x49440(%rip), %xmm2
    00001014: 	paddd	DATAat0x49440(%rip), %xmm8
    0000101d: 	punpcklwd	%xmm1, %xmm0
    00001021: 	paddd	DATAat0x49440(%rip), %xmm6
    00001029: 	paddd	DATAat0x49440(%rip), %xmm10
    00001032: 	paddd	DATAat0x49440(%rip), %xmm9
    0000103b: 	punpcklwd	%xmm13, %xmm3
    00001040: 	paddd	0x68(%rsp), %xmm3
    00001046: 	paddd	%xmm0, %xmm3
    0000104a: 	movdqa	%xmm5, %xmm0
    0000104e: 	movdqa	%xmm11, %xmm5
    00001053: 	punpcklwd	%xmm0, %xmm5
    00001057: 	punpckhwd	%xmm0, %xmm11
    0000105c: 	paddd	%xmm5, %xmm3
    00001060: 	movdqa	-0x68(%rsp), %xmm5
    00001066: 	punpckhwd	%xmm13, %xmm5
    0000106b: 	movdqa	%xmm14, %xmm13
    00001070: 	paddd	0x78(%rsp), %xmm5
    00001076: 	movdqa	-0x58(%rsp), %xmm14
    0000107d: 	punpckhwd	%xmm1, %xmm13
    00001082: 	movdqa	-0x78(%rsp), %xmm1
    00001088: 	paddd	%xmm13, %xmm5
    0000108d: 	movdqa	%xmm4, %xmm13
    00001092: 	paddd	%xmm11, %xmm5
    00001097: 	movdqa	%xmm4, %xmm11
    0000109c: 	movdqa	%xmm1, %xmm0
    000010a0: 	pcmpgtw	%xmm14, %xmm11
    000010a5: 	pcmpgtw	%xmm1, %xmm13
    000010aa: 	movdqa	%xmm11, %xmm1
    000010af: 	movdqa	%xmm14, %xmm11
    000010b4: 	punpcklwd	%xmm13, %xmm0
    000010b9: 	punpcklwd	%xmm1, %xmm11
    000010be: 	movdqa	%xmm15, %xmm14
    000010c3: 	paddd	%xmm0, %xmm11
    000010c8: 	movdqa	%xmm4, %xmm0
    000010cc: 	paddd	-0x38(%rsp), %xmm11
    000010d3: 	pcmpgtw	%xmm15, %xmm0
    000010d8: 	punpcklwd	%xmm0, %xmm14
    000010dd: 	punpckhwd	%xmm0, %xmm15
    000010e2: 	movdqa	DATAat0x49450(%rip), %xmm0
    000010ea: 	paddd	%xmm14, %xmm11
    000010ef: 	movdqa	-0x78(%rsp), %xmm14
    000010f6: 	paddd	DATAat0x49440(%rip), %xmm11
    000010ff: 	punpckhwd	%xmm13, %xmm14
    00001104: 	movdqa	-0x58(%rsp), %xmm13
    0000110b: 	punpckhwd	%xmm1, %xmm13
    00001110: 	movdqa	DATAat0x49450(%rip), %xmm1
    00001118: 	paddd	%xmm14, %xmm13
    0000111d: 	paddd	-0x28(%rsp), %xmm13
    00001124: 	paddd	%xmm15, %xmm13
    00001129: 	pxor	%xmm15, %xmm15
    0000112e: 	paddd	DATAat0x49440(%rip), %xmm13
    00001137: 	pcmpgtd	%xmm11, %xmm15
    0000113c: 	pand	%xmm15, %xmm1
    00001141: 	pxor	%xmm15, %xmm15
    00001146: 	pcmpgtd	%xmm13, %xmm15
    0000114b: 	paddd	%xmm1, %xmm11
    00001150: 	movdqa	DATAat0x49450(%rip), %xmm1
    00001158: 	psrad	$0x2, %xmm11
    0000115e: 	pand	%xmm15, %xmm0
    00001163: 	movdqa	%xmm11, %xmm15
    00001168: 	paddd	%xmm0, %xmm13
    0000116d: 	psrad	$0x2, %xmm13
    00001173: 	punpckhwd	%xmm13, %xmm15
    00001178: 	punpcklwd	%xmm13, %xmm11
    0000117d: 	pxor	%xmm13, %xmm13
    00001182: 	movdqa	%xmm15, %xmm0
    00001187: 	movdqa	%xmm11, %xmm15
    0000118c: 	punpckhwd	%xmm0, %xmm15
    00001191: 	punpcklwd	%xmm0, %xmm11
    00001196: 	movdqa	DATAat0x49450(%rip), %xmm0
    0000119e: 	punpcklwd	%xmm15, %xmm11
    000011a3: 	pxor	%xmm15, %xmm15
    000011a8: 	pcmpgtd	%xmm2, %xmm15
    000011ad: 	pextrw	$0x0, %xmm11, %esi
    000011b3: 	pand	%xmm15, %xmm1
    000011b8: 	pxor	%xmm15, %xmm15
    000011bd: 	pcmpgtd	%xmm8, %xmm15
    000011c2: 	paddd	%xmm1, %xmm2
    000011c6: 	movdqa	DATAat0x49450(%rip), %xmm1
    000011ce: 	psrad	$0x2, %xmm2
    000011d3: 	pand	%xmm15, %xmm0
    000011d8: 	movdqa	%xmm2, %xmm15
    000011dd: 	paddd	%xmm0, %xmm8
    000011e2: 	psrad	$0x2, %xmm8
    000011e8: 	punpckhwd	%xmm8, %xmm15
    000011ed: 	punpcklwd	%xmm8, %xmm2
    000011f2: 	movdqa	DATAat0x49450(%rip), %xmm8
    000011fb: 	movdqa	%xmm15, %xmm0
    00001200: 	movdqa	%xmm2, %xmm15
    00001205: 	punpckhwd	%xmm0, %xmm15
    0000120a: 	punpcklwd	%xmm0, %xmm2
    0000120e: 	movdqa	DATAat0x49450(%rip), %xmm0
    00001216: 	punpcklwd	%xmm15, %xmm2
    0000121b: 	pxor	%xmm15, %xmm15
    00001220: 	pcmpgtd	%xmm10, %xmm15
    00001225: 	pand	%xmm15, %xmm1
    0000122a: 	pxor	%xmm15, %xmm15
    0000122f: 	pcmpgtd	%xmm9, %xmm15
    00001234: 	paddd	%xmm1, %xmm10
    00001239: 	pxor	%xmm1, %xmm1
    0000123d: 	psrad	$0x2, %xmm10
    00001243: 	pcmpgtd	%xmm6, %xmm1
    00001247: 	pand	DATAat0x49450(%rip), %xmm1
    0000124f: 	pand	%xmm15, %xmm0
    00001254: 	movdqa	%xmm10, %xmm15
    00001259: 	paddd	%xmm1, %xmm6
    0000125d: 	paddd	%xmm0, %xmm9
    00001262: 	psrad	$0x2, %xmm6
    00001267: 	psrad	$0x2, %xmm9
    0000126d: 	punpckhwd	%xmm9, %xmm15
    00001272: 	punpcklwd	%xmm9, %xmm10
    00001277: 	pxor	%xmm9, %xmm9
    0000127c: 	movdqa	%xmm15, %xmm0
    00001281: 	movdqa	%xmm10, %xmm15
    00001286: 	punpckhwd	%xmm0, %xmm15
    0000128b: 	punpcklwd	%xmm0, %xmm10
    00001290: 	movdqa	-0x48(%rsp), %xmm0
    00001296: 	paddd	DATAat0x49440(%rip), %xmm0
    0000129e: 	punpcklwd	%xmm15, %xmm10
    000012a3: 	pxor	%xmm15, %xmm15
    000012a8: 	pcmpgtd	%xmm0, %xmm15
    000012ad: 	pand	%xmm15, %xmm8
    000012b2: 	paddd	%xmm8, %xmm0
    000012b7: 	psrad	$0x2, %xmm0
    000012bc: 	movdqa	%xmm0, %xmm1
    000012c0: 	punpcklwd	%xmm6, %xmm0
    000012c4: 	punpckhwd	%xmm6, %xmm1
    000012c8: 	movdqa	%xmm0, %xmm15
    000012cd: 	movdqa	-0x8(%rsp), %xmm6
    000012d3: 	paddd	DATAat0x49440(%rip), %xmm6
    000012db: 	punpckhwd	%xmm1, %xmm15
    000012e0: 	punpcklwd	%xmm1, %xmm0
    000012e4: 	movdqa	-0x18(%rsp), %xmm1
    000012ea: 	paddd	DATAat0x49440(%rip), %xmm1
    000012f2: 	punpcklwd	%xmm15, %xmm0
    000012f7: 	pxor	%xmm15, %xmm15
    000012fc: 	pcmpgtd	%xmm6, %xmm15
    00001301: 	pcmpgtd	%xmm1, %xmm9
    00001306: 	pand	DATAat0x49450(%rip), %xmm9
    0000130f: 	movw	%si, -0x80(%rax)
    00001313: 	movdqa	DATAat0x49450(%rip), %xmm8
    0000131c: 	pextrw	$0x1, %xmm11, %esi
    00001322: 	paddd	DATAat0x49440(%rip), %xmm7
    0000132a: 	paddd	%xmm9, %xmm1
    0000132f: 	pxor	%xmm9, %xmm9
    00001334: 	movw	%si, -0x70(%rax)
    00001338: 	pextrw	$0x2, %xmm11, %esi
    0000133e: 	pand	%xmm15, %xmm8
    00001343: 	psrad	$0x2, %xmm1
    00001348: 	movw	%si, -0x60(%rax)
    0000134c: 	pextrw	$0x3, %xmm11, %esi
    00001352: 	paddd	%xmm8, %xmm6
    00001357: 	movdqa	%xmm1, %xmm15
    0000135c: 	movdqa	0x18(%rsp), %xmm8
    00001363: 	paddd	DATAat0x49440(%rip), %xmm8
    0000136c: 	psrad	$0x2, %xmm6
    00001371: 	movw	%si, -0x50(%rax)
    00001375: 	pextrw	$0x4, %xmm11, %esi
    0000137b: 	paddd	DATAat0x49440(%rip), %xmm12
    00001384: 	punpcklwd	%xmm6, %xmm1
    00001388: 	punpckhwd	%xmm6, %xmm15
    0000138d: 	movw	%si, -0x40(%rax)
    00001391: 	pextrw	$0x5, %xmm11, %esi
    00001397: 	movdqa	%xmm1, %xmm6
    0000139b: 	punpcklwd	%xmm15, %xmm1
    000013a0: 	movw	%si, -0x30(%rax)
    000013a4: 	pextrw	$0x6, %xmm11, %esi
    000013aa: 	punpckhwd	%xmm15, %xmm6
    000013af: 	pcmpgtd	%xmm8, %xmm9
    000013b4: 	pand	DATAat0x49450(%rip), %xmm9
    000013bd: 	movw	%si, -0x20(%rax)
    000013c1: 	punpcklwd	%xmm6, %xmm1
    000013c5: 	movdqa	0x8(%rsp), %xmm6
    000013cb: 	paddd	DATAat0x49440(%rip), %xmm6
    000013d3: 	pextrw	$0x7, %xmm11, %esi
    000013d9: 	paddd	%xmm9, %xmm8
    000013de: 	movw	%si, -0x10(%rax)
    000013e2: 	pextrw	$0x0, %xmm2, %esi
    000013e7: 	paddd	DATAat0x49440(%rip), %xmm3
    000013ef: 	pcmpgtd	%xmm6, %xmm13
    000013f4: 	psrad	$0x2, %xmm8
    000013fa: 	pand	DATAat0x49450(%rip), %xmm13
    00001403: 	movw	%si, -0x7e(%rax)
    00001407: 	pextrw	$0x1, %xmm2, %esi
    0000140c: 	paddd	DATAat0x49440(%rip), %xmm5
    00001414: 	paddd	%xmm13, %xmm6
    00001419: 	movw	%si, -0x6e(%rax)
    0000141d: 	pextrw	$0x2, %xmm2, %esi
    00001422: 	psrad	$0x2, %xmm6
    00001427: 	movw	%si, -0x5e(%rax)
    0000142b: 	pextrw	$0x3, %xmm2, %esi
    00001430: 	movdqa	%xmm6, %xmm9
    00001435: 	punpcklwd	%xmm8, %xmm6
    0000143a: 	movw	%si, -0x4e(%rax)
    0000143e: 	pextrw	$0x4, %xmm2, %esi
    00001443: 	punpckhwd	%xmm8, %xmm9
    00001448: 	movdqa	%xmm6, %xmm8
    0000144d: 	movw	%si, -0x3e(%rax)
    00001451: 	pextrw	$0x5, %xmm2, %esi
    00001456: 	punpckhwd	%xmm9, %xmm8
    0000145b: 	punpcklwd	%xmm9, %xmm6
    00001460: 	pxor	%xmm9, %xmm9
    00001465: 	movw	%si, -0x2e(%rax)
    00001469: 	punpcklwd	%xmm8, %xmm6
    0000146e: 	pxor	%xmm8, %xmm8
    00001473: 	pextrw	$0x6, %xmm2, %esi
    00001478: 	pcmpgtd	%xmm7, %xmm9
    0000147d: 	pcmpgtd	%xmm12, %xmm8
    00001482: 	movw	%si, -0x1e(%rax)
    00001486: 	pand	DATAat0x49450(%rip), %xmm9
    0000148f: 	pand	DATAat0x49450(%rip), %xmm8
    00001498: 	pextrw	$0x7, %xmm2, %esi
    0000149d: 	paddd	%xmm9, %xmm7
    000014a2: 	movw	%si, -0xe(%rax)
    000014a6: 	pextrw	$0x0, %xmm10, %esi
    000014ac: 	paddd	%xmm8, %xmm12
    000014b1: 	psrad	$0x2, %xmm7
    000014b6: 	psrad	$0x2, %xmm12
    000014bc: 	movdqa	%xmm7, %xmm8
    000014c1: 	punpcklwd	%xmm12, %xmm7
    000014c6: 	punpckhwd	%xmm12, %xmm8
    000014cb: 	movdqa	%xmm7, %xmm9
    000014d0: 	punpcklwd	%xmm8, %xmm7
    000014d5: 	punpckhwd	%xmm8, %xmm9
    000014da: 	pxor	%xmm8, %xmm8
    000014df: 	punpcklwd	%xmm9, %xmm7
    000014e4: 	pcmpgtd	%xmm5, %xmm8
    000014e9: 	pxor	%xmm9, %xmm9
    000014ee: 	pand	DATAat0x49450(%rip), %xmm8
    000014f7: 	pcmpgtd	%xmm3, %xmm9
    000014fc: 	pand	DATAat0x49450(%rip), %xmm9
    00001505: 	movw	%si, -0x7c(%rax)
    00001509: 	pextrw	$0x1, %xmm10, %esi
    0000150f: 	movw	%si, -0x6c(%rax)
    00001513: 	pextrw	$0x2, %xmm10, %esi
    00001519: 	paddd	%xmm8, %xmm5
    0000151e: 	paddd	%xmm9, %xmm3
    00001523: 	movw	%si, -0x5c(%rax)
    00001527: 	pextrw	$0x3, %xmm10, %esi
    0000152d: 	psrad	$0x2, %xmm5
    00001532: 	movw	%si, -0x4c(%rax)
    00001536: 	pextrw	$0x4, %xmm10, %esi
    0000153c: 	psrad	$0x2, %xmm3
    00001541: 	movw	%si, -0x3c(%rax)
    00001545: 	pextrw	$0x5, %xmm10, %esi
    0000154b: 	movdqa	%xmm3, %xmm8
    00001550: 	punpcklwd	%xmm5, %xmm3
    00001554: 	movw	%si, -0x2c(%rax)
    00001558: 	pextrw	$0x6, %xmm10, %esi
    0000155e: 	punpckhwd	%xmm5, %xmm8
    00001563: 	movdqa	%xmm3, %xmm5
    00001567: 	movw	%si, -0x1c(%rax)
    0000156b: 	pextrw	$0x7, %xmm10, %esi
    00001571: 	punpckhwd	%xmm8, %xmm5
    00001576: 	punpcklwd	%xmm8, %xmm3
    0000157b: 	movw	%si, -0xc(%rax)
    0000157f: 	pextrw	$0x0, %xmm0, %esi
    00001584: 	punpcklwd	%xmm5, %xmm3
    00001588: 	movw	%si, -0x7a(%rax)
    0000158c: 	pextrw	$0x1, %xmm0, %esi
    00001591: 	movw	%si, -0x6a(%rax)
    00001595: 	pextrw	$0x2, %xmm0, %esi
    0000159a: 	movw	%si, -0x5a(%rax)
    0000159e: 	pextrw	$0x3, %xmm0, %esi
    000015a3: 	movw	%si, -0x4a(%rax)
    000015a7: 	pextrw	$0x4, %xmm0, %esi
    000015ac: 	movw	%si, -0x3a(%rax)
    000015b0: 	pextrw	$0x5, %xmm0, %esi
    000015b5: 	movw	%si, -0x2a(%rax)
    000015b9: 	pextrw	$0x6, %xmm0, %esi
    000015be: 	movw	%si, -0x1a(%rax)
    000015c2: 	pextrw	$0x7, %xmm0, %esi
    000015c7: 	movw	%si, -0xa(%rax)
    000015cb: 	pextrw	$0x0, %xmm1, %esi
    000015d0: 	movw	%si, -0x78(%rax)
    000015d4: 	pextrw	$0x1, %xmm1, %esi
    000015d9: 	movw	%si, -0x68(%rax)
    000015dd: 	pextrw	$0x2, %xmm1, %esi
    000015e2: 	movw	%si, -0x58(%rax)
    000015e6: 	pextrw	$0x3, %xmm1, %esi
    000015eb: 	movw	%si, -0x48(%rax)
    000015ef: 	pextrw	$0x4, %xmm1, %esi
    000015f4: 	movw	%si, -0x38(%rax)
    000015f8: 	pextrw	$0x5, %xmm1, %esi
    000015fd: 	movw	%si, -0x28(%rax)
    00001601: 	pextrw	$0x6, %xmm1, %esi
    00001606: 	movw	%si, -0x18(%rax)
    0000160a: 	pextrw	$0x7, %xmm1, %esi
    0000160f: 	movw	%si, -0x8(%rax)
    00001613: 	pextrw	$0x0, %xmm6, %esi
    00001618: 	movw	%si, -0x76(%rax)
    0000161c: 	pextrw	$0x1, %xmm6, %esi
    00001621: 	movw	%si, -0x66(%rax)
    00001625: 	pextrw	$0x2, %xmm6, %esi
    0000162a: 	movw	%si, -0x56(%rax)
    0000162e: 	pextrw	$0x3, %xmm6, %esi
    00001633: 	movw	%si, -0x46(%rax)
    00001637: 	pextrw	$0x4, %xmm6, %esi
    0000163c: 	movw	%si, -0x36(%rax)
    00001640: 	pextrw	$0x5, %xmm6, %esi
    00001645: 	movw	%si, -0x26(%rax)
    00001649: 	pextrw	$0x6, %xmm6, %esi
    0000164e: 	movw	%si, -0x16(%rax)
    00001652: 	pextrw	$0x7, %xmm6, %esi
    00001657: 	movw	%si, -0x6(%rax)
    0000165b: 	pextrw	$0x0, %xmm7, %esi
    00001660: 	movw	%si, -0x80(%rdx)
    00001664: 	pextrw	$0x1, %xmm7, %esi
    00001669: 	movw	%si, -0x70(%rdx)
    0000166d: 	pextrw	$0x2, %xmm7, %esi
    00001672: 	movw	%si, -0x60(%rdx)
    00001676: 	pextrw	$0x3, %xmm7, %esi
    0000167b: 	movw	%si, -0x50(%rdx)
    0000167f: 	pextrw	$0x4, %xmm7, %esi
    00001684: 	movw	%si, -0x40(%rdx)
    00001688: 	pextrw	$0x5, %xmm7, %esi
    0000168d: 	movw	%si, -0x30(%rdx)
    00001691: 	pextrw	$0x6, %xmm7, %esi
    00001696: 	movw	%si, -0x20(%rdx)
    0000169a: 	pextrw	$0x7, %xmm7, %esi
    0000169f: 	movw	%si, -0x10(%rdx)
    000016a3: 	pextrw	$0x0, %xmm3, %esi
    000016a8: 	movw	%si, -0x7e(%rdx)
    000016ac: 	pextrw	$0x1, %xmm3, %esi
    000016b1: 	movw	%si, -0x6e(%rdx)
    000016b5: 	pextrw	$0x2, %xmm3, %esi
    000016ba: 	movw	%si, -0x5e(%rdx)
    000016be: 	pextrw	$0x3, %xmm3, %esi
    000016c3: 	movw	%si, -0x4e(%rdx)
    000016c7: 	pextrw	$0x4, %xmm3, %esi
    000016cc: 	movw	%si, -0x3e(%rdx)
    000016d0: 	pextrw	$0x5, %xmm3, %esi
    000016d5: 	movw	%si, -0x2e(%rdx)
    000016d9: 	pextrw	$0x6, %xmm3, %esi
    000016de: 	movw	%si, -0x1e(%rdx)
    000016e2: 	pextrw	$0x7, %xmm3, %esi
    000016e7: 	movw	%si, -0xe(%rdx)
    000016eb: 	cmpq	%r10, %rcx
    000016ee: 	jne	.Ltmp94 # Offset: 5870
    000016f4: 	movq	0x128(%rsp), %rdi
    000016fc: 	movq	%rbx, -0x78(%rsp)
    00001701: 	leaq	(%r11,%rdi), %rax
    00001705: 	leaq	(%rbx,%rax,2), %rsi
    00001709: 	movq	%rdi, %rax
    0000170c: 	leaq	(%rbp,%rdi), %rdi
    00001711: 	movl	0x124(%rsp), %ebp
    00001718: 	addq	%rdi, %rdi
    0000171b: 	addq	%rax, %r12
    0000171e: 	leaq	(%rbx,%rdi), %rdx
    00001722: 	leaq	(%rbx,%r12,2), %rcx
    00001726: 	movl	0x10c(%rsp), %ebx
    0000172d: 	addq	0x100(%rsp), %rdi
    00001735: 	nopl	(%rax) # Size: 3
.Ltmp95:
    00001738: 	movswl	0x2(%rsi), %r8d
    0000173d: 	movswl	(%rdx), %eax
    00001740: 	addl	$0x8, %ebp
    00001743: 	movswl	0x4(%rdx), %r10d
    00001748: 	movswl	0x2(%rdx), %r12d
    0000174d: 	addl	%r8d, %eax
    00001750: 	movswl	0x2(%rcx), %r8d
    00001755: 	movswl	0x4(%rsi), %r9d
    0000175a: 	addl	%r10d, %eax
    0000175d: 	movswl	0x6(%rdx), %r11d
    00001762: 	movswl	0x8(%rdx), %r15d
    00001767: 	addl	%r8d, %eax
    0000176a: 	movswl	0xa(%rdx), %r14d
    0000176f: 	movswl	0xc(%rdx), %r13d
    00001774: 	leal	0x5(%rax), %r8d
    00001778: 	addl	$0x2, %eax
    0000177b: 	cmovnsl	%eax, %r8d
    0000177f: 	movswl	0x4(%rcx), %eax
    00001783: 	addl	%r12d, %r9d
    00001786: 	addl	%r11d, %r9d
    00001789: 	addl	%r9d, %eax
    0000178c: 	sarl	$0x2, %r8d
    00001790: 	leal	0x5(%rax), %r9d
    00001794: 	addl	$0x2, %eax
    00001797: 	cmovnsl	%eax, %r9d
    0000179b: 	movswl	0x6(%rsi), %eax
    0000179f: 	addl	%eax, %r10d
    000017a2: 	movswl	0x6(%rcx), %eax
    000017a6: 	sarl	$0x2, %r9d
    000017aa: 	addl	%r15d, %r10d
    000017ad: 	addl	%r10d, %eax
    000017b0: 	leal	0x5(%rax), %r10d
    000017b4: 	addl	$0x2, %eax
    000017b7: 	cmovnsl	%eax, %r10d
    000017bb: 	movswl	0x8(%rsi), %eax
    000017bf: 	addl	%r11d, %eax
    000017c2: 	movswl	0x8(%rcx), %r11d
    000017c7: 	sarl	$0x2, %r10d
    000017cb: 	addl	%r14d, %eax
    000017ce: 	addl	%eax, %r11d
    000017d1: 	leal	0x5(%r11), %eax
    000017d5: 	addl	$0x2, %r11d
    000017d9: 	cmovnsl	%r11d, %eax
    000017dd: 	movzwl	%r10w, %r11d
    000017e1: 	sarl	$0x2, %eax
    000017e4: 	movzwl	%ax, %eax
    000017e7: 	shlq	$0x10, %rax
    000017eb: 	movq	%rax, %r10
    000017ee: 	movzwl	%r9w, %eax
    000017f2: 	orq	%r11, %r10
    000017f5: 	movswl	0x10(%rdx), %r11d
    000017fa: 	shlq	$0x10, %r10
    000017fe: 	movq	%r10, %r9
    00001801: 	movswl	0xe(%rdx), %r10d
    00001806: 	orq	%rax, %r9
    00001809: 	movzwl	%r8w, %eax
    0000180d: 	movq	%r9, %r8
    00001810: 	movswl	0xa(%rcx), %r9d
    00001815: 	shlq	$0x10, %r8
    00001819: 	orq	%rax, %r8
    0000181c: 	movswl	0xa(%rsi), %eax
    00001820: 	addl	%r15d, %eax
    00001823: 	addl	%r13d, %eax
    00001826: 	addl	%r9d, %eax
    00001829: 	leal	0x5(%rax), %r9d
    0000182d: 	addl	$0x2, %eax
    00001830: 	cmovnsl	%eax, %r9d
    00001834: 	movswl	0xc(%rsi), %eax
    00001838: 	addl	%r14d, %eax
    0000183b: 	sarl	$0x2, %r9d
    0000183f: 	addl	%r10d, %eax
    00001842: 	movswl	0xc(%rcx), %r10d
    00001847: 	addl	%r10d, %eax
    0000184a: 	leal	0x5(%rax), %r10d
    0000184e: 	addl	$0x2, %eax
    00001851: 	cmovnsl	%eax, %r10d
    00001855: 	movswl	0xe(%rsi), %eax
    00001859: 	addl	%r13d, %eax
    0000185c: 	sarl	$0x2, %r10d
    00001860: 	movswl	(%rsi), %r13d
    00001864: 	addl	%r11d, %eax
    00001867: 	movswl	0xe(%rcx), %r11d
    0000186c: 	addl	%r11d, %eax
    0000186f: 	leal	0x5(%rax), %r11d
    00001873: 	addl	$0x2, %eax
    00001876: 	cmovnsl	%eax, %r11d
    0000187a: 	movswl	-0x2(%rdx), %eax
    0000187e: 	addl	%r13d, %eax
    00001881: 	sarl	$0x2, %r11d
    00001885: 	addl	%r12d, %eax
    00001888: 	movswl	(%rcx), %r12d
    0000188c: 	movq	%r8, 0x2(%rdi)
    00001890: 	movw	%r9w, 0xa(%rdi)
    00001895: 	addl	%r12d, %eax
    00001898: 	movw	%r10w, 0xc(%rdi)
    0000189d: 	leal	0x5(%rax), %r12d
    000018a1: 	addl	$0x2, %eax
    000018a4: 	movw	%r11w, 0xe(%rdi)
    000018a9: 	cmovsl	%r12d, %eax
    000018ad: 	addq	$0x10, %rsi
    000018b1: 	addq	$0x10, %rdx
    000018b5: 	addq	$0x10, %rcx
    000018b9: 	addq	$0x10, %rdi
    000018bd: 	sarl	$0x2, %eax
    000018c0: 	movw	%ax, -0x10(%rdi)
    000018c4: 	cmpl	%ebp, %ebx
    000018c6: 	jg	.Ltmp95 # Offset: 6342
    000018cc: 	movq	-0x78(%rsp), %rbx
.Ltmp100:
    000018d1: 	movl	0x118(%rsp), %eax
.Ltmp92:
    000018d8: 	cmpl	0xf0(%rsp), %eax
    000018df: 	jge	.Ltmp96 # Offset: 6367
    000018e5: 	movslq	0xf4(%rsp), %r8
    000018ed: 	movslq	0xf8(%rsp), %rdi
    000018f5: 	movslq	%eax, %rsi
    000018f8: 	movq	0x100(%rsp), %r15
    00001900: 	movslq	0xfc(%rsp), %rcx
    00001908: 	movl	0x120(%rsp), %edx
    0000190f: 	movq	%rdi, %r14
    00001912: 	movq	%r8, %r12
    00001915: 	addq	%rsi, %rdi
    00001918: 	movq	%rcx, %r13
    0000191b: 	leaq	0x1(%rsi,%rcx), %rcx
    00001920: 	leaq	0x1(%rsi,%r8), %rsi
    00001925: 	movq	%r15, %r8
    00001928: 	subl	%eax, %edx
    0000192a: 	subq	%rbx, %r8
    0000192d: 	addq	%rcx, %rcx
    00001930: 	addq	%rsi, %rsi
    00001933: 	leal	-0x2(%rdx), %r11d
    00001937: 	cmpq	$0x10, %r8
    0000193b: 	leaq	(%rdi,%rdi), %r10
    0000193f: 	seta	%r8b
    00001943: 	leaq	(%r15,%r10), %r9
    00001947: 	leaq	(%rbx,%rcx), %rbp
    0000194b: 	cmpl	$0x6, %r11d
    0000194f: 	seta	%r11b
    00001953: 	andl	%r11d, %r8d
    00001956: 	movq	%r9, %r11
    00001959: 	subq	%rbp, %r11
    0000195c: 	cmpq	$0xc, %r11
    00001960: 	seta	%r11b
    00001964: 	testb	%r11b, %r8b
    00001967: 	je	.Ltmp97 # Offset: 6503
    0000196d: 	leaq	(%rbx,%rsi), %r11
    00001971: 	movq	%r9, %r8
    00001974: 	subq	%r11, %r8
    00001977: 	cmpq	$0xc, %r8
    0000197b: 	jbe	.Ltmp97 # Offset: 6523
    00001981: 	movdqu	-0x2(%rbx,%r10), %xmm0
    00001988: 	movdqu	0x2(%rbx,%r10), %xmm1
    0000198f: 	movdqa	%xmm4, %xmm10
    00001994: 	movdqa	%xmm4, %xmm9
    00001999: 	movdqu	-0x2(%rbx,%rcx), %xmm5
    0000199f: 	movdqa	%xmm4, %xmm8
    000019a4: 	movdqa	%xmm4, %xmm7
    000019a8: 	subl	$0x1, %edx
    000019ab: 	pcmpgtw	%xmm0, %xmm9
    000019b0: 	pcmpgtw	%xmm1, %xmm10
    000019b5: 	movdqa	%xmm1, %xmm6
    000019b9: 	movl	%edx, %ecx
    000019bb: 	movdqu	-0x2(%rbx,%rsi), %xmm2
    000019c1: 	pcmpgtw	%xmm5, %xmm8
    000019c6: 	movdqa	%xmm0, %xmm3
    000019ca: 	andl	$-0x8, %ecx
    000019cd: 	addl	%ecx, %eax
    000019cf: 	punpcklwd	%xmm10, %xmm6
    000019d4: 	punpcklwd	%xmm9, %xmm3
    000019d9: 	punpckhwd	%xmm10, %xmm1
    000019de: 	pcmpgtw	%xmm2, %xmm7
    000019e2: 	paddd	%xmm6, %xmm3
    000019e6: 	movdqa	%xmm5, %xmm6
    000019ea: 	punpcklwd	%xmm8, %xmm6
    000019ef: 	punpckhwd	%xmm8, %xmm5
    000019f4: 	paddd	%xmm6, %xmm3
    000019f8: 	movdqa	%xmm2, %xmm6
    000019fc: 	punpcklwd	%xmm7, %xmm6
    00001a00: 	punpckhwd	%xmm7, %xmm2
    00001a04: 	paddd	%xmm6, %xmm3
    00001a08: 	movdqa	%xmm1, %xmm6
    00001a0c: 	movdqa	%xmm0, %xmm1
    00001a10: 	punpckhwd	%xmm9, %xmm1
    00001a15: 	paddd	DATAat0x49440(%rip), %xmm3
    00001a1d: 	paddd	%xmm6, %xmm1
    00001a21: 	paddd	%xmm5, %xmm1
    00001a25: 	paddd	%xmm2, %xmm1
    00001a29: 	pxor	%xmm2, %xmm2
    00001a2d: 	paddd	DATAat0x49440(%rip), %xmm1
    00001a35: 	movdqa	%xmm2, %xmm0
    00001a39: 	pcmpgtd	%xmm3, %xmm0
    00001a3d: 	pcmpgtd	%xmm1, %xmm2
    00001a41: 	pand	DATAat0x49450(%rip), %xmm0
    00001a49: 	pand	DATAat0x49450(%rip), %xmm2
    00001a51: 	paddd	%xmm3, %xmm0
    00001a55: 	paddd	%xmm2, %xmm1
    00001a59: 	psrad	$0x2, %xmm0
    00001a5e: 	psrad	$0x2, %xmm1
    00001a63: 	movdqa	%xmm0, %xmm2
    00001a67: 	punpcklwd	%xmm1, %xmm0
    00001a6b: 	punpckhwd	%xmm1, %xmm2
    00001a6f: 	movdqa	%xmm0, %xmm1
    00001a73: 	punpcklwd	%xmm2, %xmm0
    00001a77: 	punpckhwd	%xmm2, %xmm1
    00001a7b: 	punpcklwd	%xmm1, %xmm0
    00001a7f: 	movups	%xmm0, (%r9)
    00001a83: 	cmpl	%edx, %ecx
    00001a85: 	je	.Ltmp96 # Offset: 6789
    00001a8b: 	leal	(%r13,%rax), %edx
    00001a90: 	leal	-0x1(%rax,%r14), %esi
    00001a95: 	movslq	%edx, %rdx
    00001a98: 	movslq	%esi, %rsi
    00001a9b: 	movswl	(%rbx,%rdx,2), %ecx
    00001a9f: 	leal	0x1(%rax), %edx
    00001aa2: 	movswl	(%rbx,%rsi,2), %r8d
    00001aa7: 	leal	(%r14,%rdx), %edi
    00001aab: 	movslq	%edi, %rdi
    00001aae: 	leaq	(%rbx,%rdi,2), %r10
    00001ab2: 	movswl	(%r10), %esi
    00001ab6: 	addl	%esi, %r8d
    00001ab9: 	leal	(%r14,%rax), %esi
    00001abd: 	addl	%ecx, %r8d
    00001ac0: 	leal	(%r12,%rax), %ecx
    00001ac4: 	movslq	%esi, %rsi
    00001ac7: 	movslq	%ecx, %rcx
    00001aca: 	movswl	(%rbx,%rcx,2), %ecx
    00001ace: 	addl	%r8d, %ecx
    00001ad1: 	leal	0x5(%rcx), %r8d
    00001ad5: 	addl	$0x2, %ecx
    00001ad8: 	cmovnsl	%ecx, %r8d
    00001adc: 	sarl	$0x2, %r8d
    00001ae0: 	movw	%r8w, (%r15,%rsi,2)
    00001ae5: 	cmpl	0xf0(%rsp), %edx
    00001aec: 	jge	.Ltmp96 # Offset: 6892
    00001af2: 	leal	(%r13,%rdx), %ecx
    00001af7: 	movswl	(%rbx,%rsi,2), %esi
    00001afb: 	addl	%r12d, %edx
    00001afe: 	movslq	%ecx, %rcx
    00001b01: 	movslq	%edx, %rdx
    00001b04: 	movswl	(%rbx,%rcx,2), %r11d
    00001b09: 	leal	0x2(%rax), %ecx
    00001b0c: 	movswl	(%rbx,%rdx,2), %edx
    00001b10: 	leal	(%r14,%rcx), %r8d
    00001b14: 	movslq	%r8d, %r8
    00001b17: 	leaq	(%rbx,%r8,2), %r9
    00001b1b: 	movswl	(%r9), %ebp
    00001b1f: 	addl	%ebp, %esi
    00001b21: 	addl	%r11d, %esi
    00001b24: 	addl	%esi, %edx
    00001b26: 	leal	0x5(%rdx), %esi
    00001b29: 	addl	$0x2, %edx
    00001b2c: 	cmovnsl	%edx, %esi
    00001b2f: 	sarl	$0x2, %esi
    00001b32: 	movw	%si, (%r15,%rdi,2)
    00001b37: 	cmpl	%ecx, 0xf0(%rsp)
    00001b3e: 	jle	.Ltmp96 # Offset: 6974
    00001b44: 	leal	(%r13,%rcx), %edx
    00001b49: 	movswl	(%r10), %r10d
    00001b4d: 	addl	%r12d, %ecx
    00001b50: 	movslq	%edx, %rdx
    00001b53: 	movslq	%ecx, %rcx
    00001b56: 	movswl	(%rbx,%rdx,2), %ebp
    00001b5a: 	leal	0x3(%rax), %edx
    00001b5d: 	movswl	(%rbx,%rcx,2), %ecx
    00001b61: 	leal	(%r14,%rdx), %r11d
    00001b65: 	movslq	%r11d, %r11
    00001b68: 	leaq	(%rbx,%r11,2), %rdi
    00001b6c: 	movswl	(%rdi), %esi
    00001b6f: 	addl	%r10d, %esi
    00001b72: 	addl	%ebp, %esi
    00001b74: 	addl	%esi, %ecx
    00001b76: 	leal	0x5(%rcx), %esi
    00001b79: 	addl	$0x2, %ecx
    00001b7c: 	cmovnsl	%ecx, %esi
    00001b7f: 	sarl	$0x2, %esi
    00001b82: 	movw	%si, (%r15,%r8,2)
    00001b87: 	cmpl	%edx, 0xf0(%rsp)
    00001b8e: 	jle	.Ltmp96 # Offset: 7054
    00001b94: 	leal	(%r13,%rdx), %ecx
    00001b99: 	movswl	(%r9), %esi
    00001b9d: 	addl	%r12d, %edx
    00001ba0: 	movslq	%ecx, %rcx
    00001ba3: 	movslq	%edx, %rdx
    00001ba6: 	movswl	(%rbx,%rcx,2), %ebp
    00001baa: 	leal	0x4(%rax), %ecx
    00001bad: 	movswl	(%rbx,%rdx,2), %edx
    00001bb1: 	leal	(%r14,%rcx), %r8d
    00001bb5: 	movslq	%r8d, %r8
    00001bb8: 	leaq	(%rbx,%r8,2), %r10
    00001bbc: 	movswl	(%r10), %r9d
    00001bc0: 	addl	%r9d, %esi
    00001bc3: 	addl	%ebp, %esi
    00001bc5: 	addl	%esi, %edx
    00001bc7: 	leal	0x5(%rdx), %esi
    00001bca: 	addl	$0x2, %edx
    00001bcd: 	cmovnsl	%edx, %esi
    00001bd0: 	sarl	$0x2, %esi
    00001bd3: 	movw	%si, (%r15,%r11,2)
    00001bd8: 	cmpl	%ecx, 0xf0(%rsp)
    00001bdf: 	jle	.Ltmp96 # Offset: 7135
    00001be5: 	leal	(%r13,%rcx), %edx
    00001bea: 	movswl	(%rdi), %esi
    00001bed: 	addl	%r12d, %ecx
    00001bf0: 	movslq	%edx, %rdx
    00001bf3: 	movslq	%ecx, %rcx
    00001bf6: 	movswl	(%rbx,%rdx,2), %ebp
    00001bfa: 	leal	0x5(%rax), %edx
    00001bfd: 	movswl	(%rbx,%rcx,2), %ecx
    00001c01: 	leal	(%r14,%rdx), %r9d
    00001c05: 	movslq	%r9d, %r9
    00001c08: 	leaq	(%rbx,%r9,2), %r11
    00001c0c: 	movswl	(%r11), %edi
    00001c10: 	addl	%edi, %esi
    00001c12: 	addl	%ebp, %esi
    00001c14: 	movl	0xf0(%rsp), %ebp
    00001c1b: 	addl	%esi, %ecx
    00001c1d: 	leal	0x5(%rcx), %esi
    00001c20: 	addl	$0x2, %ecx
    00001c23: 	cmovnsl	%ecx, %esi
    00001c26: 	sarl	$0x2, %esi
    00001c29: 	movw	%si, (%r15,%r8,2)
    00001c2e: 	cmpl	%edx, %ebp
    00001c30: 	jle	.Ltmp96 # Offset: 7216
    00001c36: 	leal	(%r13,%rdx), %ecx
    00001c3b: 	movswl	(%r10), %r10d
    00001c3f: 	addl	%r12d, %edx
    00001c42: 	movslq	%ecx, %rcx
    00001c45: 	movslq	%edx, %rdx
    00001c48: 	movswl	(%rbx,%rcx,2), %r8d
    00001c4d: 	leal	0x6(%rax), %ecx
    00001c50: 	movswl	(%rbx,%rdx,2), %edx
    00001c54: 	leal	(%r14,%rcx), %edi
    00001c58: 	movslq	%edi, %rdi
    00001c5b: 	movswl	(%rbx,%rdi,2), %esi
    00001c5f: 	addl	%r10d, %esi
    00001c62: 	addl	%r8d, %esi
    00001c65: 	addl	%esi, %edx
    00001c67: 	leal	0x5(%rdx), %esi
    00001c6a: 	addl	$0x2, %edx
    00001c6d: 	cmovnsl	%edx, %esi
    00001c70: 	sarl	$0x2, %esi
    00001c73: 	movw	%si, (%r15,%r9,2)
    00001c78: 	cmpl	%ecx, %ebp
    00001c7a: 	jle	.Ltmp96 # Offset: 7290
    00001c7c: 	leal	0x7(%rax,%r14), %eax
    00001c81: 	leal	(%r13,%rcx), %edx
    00001c86: 	movswl	(%r11), %esi
    00001c8a: 	addl	%r12d, %ecx
    00001c8d: 	cltq
    00001c8f: 	movslq	%edx, %rdx
    00001c92: 	movslq	%ecx, %rcx
    00001c95: 	movswl	(%rbx,%rax,2), %eax
    00001c99: 	movswl	(%rbx,%rdx,2), %edx
    00001c9d: 	addl	%esi, %eax
    00001c9f: 	addl	%edx, %eax
    00001ca1: 	movswl	(%rbx,%rcx,2), %edx
    00001ca5: 	addl	%edx, %eax
    00001ca7: 	leal	0x5(%rax), %edx
    00001caa: 	addl	$0x2, %eax
    00001cad: 	cmovnsl	%eax, %edx
    00001cb0: 	sarl	$0x2, %edx
    00001cb3: 	movw	%dx, (%r15,%rdi,2)
.Ltmp96:
    00001cb8: 	movl	0x114(%rsp), %eax
    00001cbf: 	movl	0x108(%rsp), %edi
    00001cc6: 	addl	%eax, 0xfc(%rsp)
    00001ccd: 	addl	%eax, 0xf8(%rsp)
    00001cd4: 	addl	%eax, 0xf4(%rsp)
    00001cdb: 	cmpl	%edi, 0x110(%rsp)
    00001ce2: 	jne	.Ltmp98 # Offset: 7394
.Ltmp91:
    00001ce8: 	addq	$0x150, %rsp
    00001cef: 	popq	%rbx
    00001cf0: 	popq	%rbp
    00001cf1: 	popq	%r12
    00001cf3: 	popq	%r13
    00001cf5: 	popq	%r14
    00001cf7: 	popq	%r15
    00001cf9: 	retq # Offset: 7417
    00001cfa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp93:
    00001d00: 	subq	$0x2, %rsi
    00001d04: 	leaq	-0x12(%rbx,%r9), %rcx
    00001d09: 	leaq	-0x12(%rbx,%r8), %rdi
    00001d0e: 	movq	0x140(%rsp), %rax
    00001d16: 	addq	0x138(%rsp), %r11
    00001d1e: 	leaq	(%rbx,%rsi), %rdx
    00001d22: 	addq	0x100(%rsp), %rsi
    00001d2a: 	leaq	(%rax,%r11,2), %r15
    00001d2e: 	nop # Size: 2
.Ltmp99:
    00001d30: 	movswl	0x4(%rcx), %ebp
    00001d34: 	movswl	0x2(%rdx), %r12d
    00001d39: 	movswl	0x6(%rdx), %r13d
    00001d3e: 	movswl	0x4(%rdx), %r8d
    00001d43: 	addl	%ebp, %r12d
    00001d46: 	movswl	0x4(%rdi), %ebp
    00001d4a: 	movswl	0x6(%rcx), %r14d
    00001d4f: 	addl	%r13d, %r12d
    00001d52: 	movswl	0x8(%rdx), %eax
    00001d56: 	movswl	0xa(%rdx), %r11d
    00001d5b: 	addl	%ebp, %r12d
    00001d5e: 	movswl	0xc(%rdx), %r10d
    00001d63: 	movswl	0xe(%rdx), %r9d
    00001d68: 	leal	0x5(%r12), %ebp
    00001d6d: 	addl	$0x2, %r12d
    00001d71: 	cmovnsl	%r12d, %ebp
    00001d75: 	movswl	0x6(%rdi), %r12d
    00001d7a: 	addl	%r8d, %r14d
    00001d7d: 	addl	%eax, %r14d
    00001d80: 	addl	%r12d, %r14d
    00001d83: 	sarl	$0x2, %ebp
    00001d86: 	leal	0x5(%r14), %r12d
    00001d8a: 	addl	$0x2, %r14d
    00001d8e: 	movzwl	%bp, %ebp
    00001d91: 	cmovnsl	%r14d, %r12d
    00001d95: 	movswl	0x8(%rcx), %r14d
    00001d9a: 	addl	%r13d, %r14d
    00001d9d: 	movswl	0x8(%rdi), %r13d
    00001da2: 	sarl	$0x2, %r12d
    00001da6: 	addl	%r11d, %r14d
    00001da9: 	movzwl	%r12w, %r12d
    00001dad: 	addl	%r13d, %r14d
    00001db0: 	leal	0x5(%r14), %r13d
    00001db4: 	addl	$0x2, %r14d
    00001db8: 	cmovnsl	%r14d, %r13d
    00001dbc: 	movswl	0xa(%rcx), %r14d
    00001dc1: 	addl	%eax, %r14d
    00001dc4: 	movswl	0xa(%rdi), %eax
    00001dc8: 	sarl	$0x2, %r13d
    00001dcc: 	addl	%r10d, %r14d
    00001dcf: 	movzwl	%r13w, %r13d
    00001dd3: 	addl	%eax, %r14d
    00001dd6: 	leal	0x5(%r14), %eax
    00001dda: 	addl	$0x2, %r14d
    00001dde: 	cmovnsl	%r14d, %eax
    00001de2: 	sarl	$0x2, %eax
    00001de5: 	movzwl	%ax, %eax
    00001de8: 	shlq	$0x10, %rax
    00001dec: 	orq	%r13, %rax
    00001def: 	shlq	$0x10, %rax
    00001df3: 	orq	%r12, %rax
    00001df6: 	movswl	0x2(%rcx), %r12d
    00001dfb: 	shlq	$0x10, %rax
    00001dff: 	orq	%rbp, %rax
    00001e02: 	movswl	0xc(%rcx), %ebp
    00001e06: 	addl	%r11d, %ebp
    00001e09: 	movswl	0xc(%rdi), %r11d
    00001e0e: 	addl	%r9d, %ebp
    00001e11: 	addl	%r11d, %ebp
    00001e14: 	leal	0x5(%rbp), %r11d
    00001e18: 	addl	$0x2, %ebp
    00001e1b: 	cmovnsl	%ebp, %r11d
    00001e1f: 	movswl	0xe(%rcx), %ebp
    00001e23: 	addl	%r10d, %ebp
    00001e26: 	movswl	0x10(%rdx), %r10d
    00001e2b: 	sarl	$0x2, %r11d
    00001e2f: 	addl	%r10d, %ebp
    00001e32: 	movswl	0xe(%rdi), %r10d
    00001e37: 	addl	%r10d, %ebp
    00001e3a: 	leal	0x5(%rbp), %r10d
    00001e3e: 	addl	$0x2, %ebp
    00001e41: 	cmovnsl	%ebp, %r10d
    00001e45: 	movswl	0x10(%rcx), %ebp
    00001e49: 	addl	%ebp, %r9d
    00001e4c: 	movswl	0x12(%rdx), %ebp
    00001e50: 	sarl	$0x2, %r10d
    00001e54: 	addl	%ebp, %r9d
    00001e57: 	movswl	0x10(%rdi), %ebp
    00001e5b: 	addl	%ebp, %r9d
    00001e5e: 	leal	0x5(%r9), %ebp
    00001e62: 	addl	$0x2, %r9d
    00001e66: 	cmovnsl	%r9d, %ebp
    00001e6a: 	movswl	(%rdx), %r9d
    00001e6e: 	addl	%r12d, %r9d
    00001e71: 	sarl	$0x2, %ebp
    00001e74: 	addl	%r9d, %r8d
    00001e77: 	movswl	0x2(%rdi), %r9d
    00001e7c: 	movq	%rax, 0x4(%rsi)
    00001e80: 	movw	%r11w, 0xc(%rsi)
    00001e85: 	addl	%r9d, %r8d
    00001e88: 	movw	%r10w, 0xe(%rsi)
    00001e8d: 	leal	0x5(%r8), %r9d
    00001e91: 	addl	$0x2, %r8d
    00001e95: 	movw	%bp, 0x10(%rsi)
    00001e99: 	cmovsl	%r9d, %r8d
    00001e9d: 	addq	$0x10, %rcx
    00001ea1: 	addq	$0x10, %rdx
    00001ea5: 	addq	$0x10, %rdi
    00001ea9: 	addq	$0x10, %rsi
    00001ead: 	sarl	$0x2, %r8d
    00001eb1: 	movw	%r8w, -0xe(%rsi)
    00001eb6: 	cmpq	%rcx, %r15
    00001eb9: 	jne	.Ltmp99 # Offset: 7865
    00001ebf: 	jmp	.Ltmp100 # Offset: 7871
    00001ec4: 	nopl	(%rax) # Size: 4
.Ltmp97:
    00001ec8: 	movl	0xf8(%rsp), %r15d
    00001ed0: 	leal	0x1(%rax), %edx
    00001ed3: 	movswl	-0x2(%rbx,%rcx), %r11d
    00001ed9: 	movswl	-0x2(%rbx,%rsi), %esi
    00001ede: 	movl	0xf0(%rsp), %r14d
    00001ee6: 	leal	(%rdx,%r15), %r10d
    00001eea: 	leal	-0x1(%rax,%r15), %ecx
    00001eef: 	movslq	%r10d, %r10
    00001ef2: 	movslq	%ecx, %rcx
    00001ef5: 	leaq	(%rbx,%r10,2), %r8
    00001ef9: 	movswl	(%rbx,%rcx,2), %ecx
    00001efd: 	movswl	(%r8), %ebp
    00001f01: 	addl	%ebp, %ecx
    00001f03: 	addl	%r11d, %ecx
    00001f06: 	addl	%esi, %ecx
    00001f08: 	leal	0x5(%rcx), %esi
    00001f0b: 	addl	$0x2, %ecx
    00001f0e: 	cmovnsl	%ecx, %esi
    00001f11: 	sarl	$0x2, %esi
    00001f14: 	movw	%si, (%r9)
    00001f18: 	cmpl	%r14d, %edx
    00001f1b: 	jge	.Ltmp96 # Offset: 7963
    00001f21: 	movl	0xfc(%rsp), %r13d
    00001f29: 	movswl	(%rbx,%rdi,2), %esi
    00001f2d: 	movq	0x100(%rsp), %r12
    00001f35: 	leal	(%rdx,%r13), %ecx
    00001f39: 	addl	0xf4(%rsp), %edx
    00001f40: 	movslq	%ecx, %rcx
    00001f43: 	movslq	%edx, %rdx
    00001f46: 	movswl	(%rbx,%rcx,2), %ebp
    00001f4a: 	leal	0x2(%rax), %ecx
    00001f4d: 	movswl	(%rbx,%rdx,2), %edx
    00001f51: 	leal	(%rcx,%r15), %r11d
    00001f55: 	movslq	%r11d, %r11
    00001f58: 	leaq	(%rbx,%r11,2), %r9
    00001f5c: 	movswl	(%r9), %edi
    00001f60: 	addl	%edi, %esi
    00001f62: 	addl	%ebp, %esi
    00001f64: 	addl	%esi, %edx
    00001f66: 	leal	0x5(%rdx), %esi
    00001f69: 	addl	$0x2, %edx
    00001f6c: 	cmovnsl	%edx, %esi
    00001f6f: 	sarl	$0x2, %esi
    00001f72: 	movw	%si, (%r12,%r10,2)
    00001f77: 	cmpl	%r14d, %ecx
    00001f7a: 	jge	.Ltmp96 # Offset: 8058
    00001f80: 	leal	(%rcx,%r13), %edx
    00001f84: 	movswl	(%r8), %esi
    00001f88: 	addl	0xf4(%rsp), %ecx
    00001f8f: 	movslq	%edx, %rdx
    00001f92: 	movslq	%ecx, %rcx
    00001f95: 	movswl	(%rbx,%rdx,2), %ebp
    00001f99: 	leal	0x3(%rax), %edx
    00001f9c: 	movswl	(%rbx,%rcx,2), %ecx
    00001fa0: 	leal	(%rdx,%r15), %r10d
    00001fa4: 	movslq	%r10d, %r10
    00001fa7: 	leaq	(%rbx,%r10,2), %rdi
    00001fab: 	movswl	(%rdi), %r8d
    00001faf: 	addl	%r8d, %esi
    00001fb2: 	addl	%ebp, %esi
    00001fb4: 	addl	%esi, %ecx
    00001fb6: 	leal	0x5(%rcx), %esi
    00001fb9: 	addl	$0x2, %ecx
    00001fbc: 	cmovnsl	%ecx, %esi
    00001fbf: 	sarl	$0x2, %esi
    00001fc2: 	movw	%si, (%r12,%r11,2)
    00001fc7: 	cmpl	%r14d, %edx
    00001fca: 	jge	.Ltmp96 # Offset: 8138
    00001fd0: 	leal	(%rdx,%r13), %ecx
    00001fd4: 	movswl	(%r9), %r9d
    00001fd8: 	addl	0xf4(%rsp), %edx
    00001fdf: 	movslq	%ecx, %rcx
    00001fe2: 	movslq	%edx, %rdx
    00001fe5: 	movswl	(%rbx,%rcx,2), %ebp
    00001fe9: 	leal	0x4(%rax), %ecx
    00001fec: 	movswl	(%rbx,%rdx,2), %edx
    00001ff0: 	leal	(%r15,%rcx), %r11d
    00001ff4: 	movslq	%r11d, %r11
    00001ff7: 	leaq	(%rbx,%r11,2), %r8
    00001ffb: 	movswl	(%r8), %esi
    00001fff: 	addl	%r9d, %esi
    00002002: 	addl	%ebp, %esi
    00002004: 	addl	%esi, %edx
    00002006: 	leal	0x5(%rdx), %esi
    00002009: 	addl	$0x2, %edx
    0000200c: 	cmovnsl	%edx, %esi
    0000200f: 	sarl	$0x2, %esi
    00002012: 	movw	%si, (%r12,%r10,2)
    00002017: 	cmpl	%ecx, %r14d
    0000201a: 	jle	.Ltmp96 # Offset: 8218
    00002020: 	leal	(%r13,%rcx), %edx
    00002025: 	movswl	(%rdi), %esi
    00002028: 	addl	0xf4(%rsp), %ecx
    0000202f: 	movslq	%edx, %rdx
    00002032: 	movslq	%ecx, %rcx
    00002035: 	movswl	(%rbx,%rdx,2), %ebp
    00002039: 	leal	0x5(%rax), %edx
    0000203c: 	movswl	(%rbx,%rcx,2), %ecx
    00002040: 	leal	(%rdx,%r15), %r9d
    00002044: 	movslq	%r9d, %r9
    00002047: 	leaq	(%rbx,%r9,2), %r10
    0000204b: 	movswl	(%r10), %edi
    0000204f: 	addl	%edi, %esi
    00002051: 	addl	%ebp, %esi
    00002053: 	addl	%esi, %ecx
    00002055: 	leal	0x5(%rcx), %esi
    00002058: 	addl	$0x2, %ecx
    0000205b: 	cmovnsl	%ecx, %esi
    0000205e: 	sarl	$0x2, %esi
    00002061: 	movw	%si, (%r12,%r11,2)
    00002066: 	cmpl	%r14d, %edx
    00002069: 	jge	.Ltmp96 # Offset: 8297
    0000206f: 	leal	(%rdx,%r13), %ecx
    00002073: 	movswl	(%r8), %esi
    00002077: 	addl	0xf4(%rsp), %edx
    0000207e: 	movslq	%ecx, %rcx
    00002081: 	movslq	%edx, %rdx
    00002084: 	movswl	(%rbx,%rcx,2), %ebp
    00002088: 	leal	0x6(%rax), %ecx
    0000208b: 	movswl	(%rbx,%rdx,2), %edx
    0000208f: 	leal	(%rcx,%r15), %edi
    00002093: 	movslq	%edi, %rdi
    00002096: 	leaq	(%rbx,%rdi,2), %r11
    0000209a: 	movswl	(%r11), %r8d
    0000209e: 	addl	%r8d, %esi
    000020a1: 	addl	%ebp, %esi
    000020a3: 	addl	%esi, %edx
    000020a5: 	leal	0x5(%rdx), %esi
    000020a8: 	addl	$0x2, %edx
    000020ab: 	cmovnsl	%edx, %esi
    000020ae: 	sarl	$0x2, %esi
    000020b1: 	movw	%si, (%r12,%r9,2)
    000020b6: 	cmpl	%r14d, %ecx
    000020b9: 	jge	.Ltmp96 # Offset: 8377
    000020bf: 	leal	(%rcx,%r13), %edx
    000020c3: 	movswl	(%r10), %r10d
    000020c7: 	movslq	%edx, %rdx
    000020ca: 	movswl	(%rbx,%rdx,2), %r9d
    000020cf: 	leal	0x7(%rax), %edx
    000020d2: 	leal	(%r15,%rdx), %r8d
    000020d6: 	movslq	%r8d, %r8
    000020d9: 	movswl	(%rbx,%r8,2), %esi
    000020de: 	addl	%r10d, %esi
    000020e1: 	addl	%r9d, %esi
    000020e4: 	movl	0xf4(%rsp), %r9d
    000020ec: 	addl	%r9d, %ecx
    000020ef: 	movslq	%ecx, %rcx
    000020f2: 	movswl	(%rbx,%rcx,2), %ecx
    000020f6: 	addl	%esi, %ecx
    000020f8: 	leal	0x5(%rcx), %esi
    000020fb: 	addl	$0x2, %ecx
    000020fe: 	cmovnsl	%ecx, %esi
    00002101: 	sarl	$0x2, %esi
    00002104: 	movw	%si, (%r12,%rdi,2)
    00002109: 	cmpl	%r14d, %edx
    0000210c: 	jge	.Ltmp96 # Offset: 8460
    00002112: 	leal	0x8(%rax,%r15), %eax
    00002117: 	leal	(%r13,%rdx), %ecx
    0000211c: 	movswl	(%r11), %esi
    00002120: 	addl	%r9d, %edx
    00002123: 	cltq
    00002125: 	movslq	%ecx, %rcx
    00002128: 	movslq	%edx, %rdx
    0000212b: 	movswl	(%rbx,%rax,2), %eax
    0000212f: 	movswl	(%rbx,%rcx,2), %ecx
    00002133: 	movswl	(%rbx,%rdx,2), %edx
    00002137: 	addl	%esi, %eax
    00002139: 	addl	%ecx, %eax
    0000213b: 	addl	%edx, %eax
    0000213d: 	leal	0x5(%rax), %edx
    00002140: 	addl	$0x2, %eax
    00002143: 	cmovnsl	%eax, %edx
    00002146: 	sarl	$0x2, %edx
    00002149: 	movw	%dx, (%r12,%r8,2)
    0000214e: 	jmp	.Ltmp96 # Offset: 8526
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/pde_laplace_jacobi.cpp/1
  Number      : 21
  State       : disassembled
  Address     : 0xb200
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0xb200
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp101 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp102 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp103 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp105:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp104 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp103:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp105 # Offset: 131
    00000085: 	jmp	.Ltmp106 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp102:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp106:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp105 # Offset: 192
.Ltmp104:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp101:
    000000c7: 	leaq	DATAat0x49008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0xb2e0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0xb2e0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp107 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp108 # Offset: 38
.Ltmp107:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp109 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp108:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp109:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x49038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0xb380
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0xb380
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp110 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp111 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp112:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp112 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp125:
    00000069: 	leaq	DATAat0x491e9(%rip), %rbp
    00000070: 	leaq	DATAat0x49058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x49098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp113 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x49528(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x490c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x49520(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp114 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp118:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp115 # Offset: 244
    000000fa: 	movq	DATAat0x49510(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp119:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x49510(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp116 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp116:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x49167(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x49528(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp117 # Offset: 398
.Ltmp114:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp118 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp119 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp115:
    000001c8: 	movq	DATAat0x49518(%rip), %rsi
    000001cf: 	movq	DATAat0x49510(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp116 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp117:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp113 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp120 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp121:
    00000210: 	addq	$0x10, %rax
.Ltmp120:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp121 # Offset: 542
.Ltmp126:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x490f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp122 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp123 # Offset: 592
.Ltmp122:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp110:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp123:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp124:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp124 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x49142(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp110 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp111:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp125 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp113:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp126 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0xb6b0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0xb6b0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp127 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp128 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp129:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp129 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp134:
    0000006a: 	leaq	DATAat0x491e9(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x49120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x49168(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x491e9(%rip), %r8
    000000a1: 	leaq	DATAat0x49156(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp130 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp131:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x49167(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp131 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp130 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp132 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp133:
    00000140: 	addq	$0x10, %rax
.Ltmp132:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp133 # Offset: 334
.Ltmp135:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x490f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp127:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp128:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp134 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp130:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp135 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0xb860
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0xb860
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0xb880
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0xb880
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x49520(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0xb8c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xb8c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0xb8f0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xb8f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0xb920
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xb920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0xb950
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xb950
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0xb980
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xb980
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0xb9b0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xb9b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0xb9e0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xb9e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0xba10
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xba10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0xba40
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xba40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0xba70
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0xba70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0xbaa0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xbaa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0xbad0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0xbad0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0xbb10
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xbb10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0xbb40
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0xbb40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0xbb70
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0xbb70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0xbba0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0xbba0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0xbbd0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xbbd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0xbc00
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xbc00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0xbc30
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xbc30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0xbc60
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xbc60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0xbc90
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xbc90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0xbcc0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xbcc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0xbcf0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0xbcf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z6swab16Ptm" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0xbd20
  Size        : 0xcd
  MaxSize     : 0xd0
  Offset      : 0xbd20
  Section     : .text
  Orc Section : .local.text._Z6swab16Ptm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movq	%rsi, %rcx
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp136 # Offset: 13
    00000013: 	leaq	-0x1(%rsi), %rax
    00000017: 	cmpq	$0x6, %rax
    0000001b: 	jbe	.Ltmp137 # Offset: 27
    00000021: 	shrq	$0x3, %rsi
    00000025: 	movq	%rdi, %rax
    00000028: 	shlq	$0x4, %rsi
    0000002c: 	addq	%rdi, %rsi
    0000002f: 	nop # Size: 1
.Ltmp138:
    00000030: 	movdqu	(%rax), %xmm0
    00000034: 	addq	$0x10, %rax
    00000038: 	movdqa	%xmm0, %xmm1
    0000003c: 	psllw	$0x8, %xmm0
    00000041: 	psrlw	$0x8, %xmm1
    00000046: 	por	%xmm1, %xmm0
    0000004a: 	movups	%xmm0, -0x10(%rax)
    0000004e: 	cmpq	%rax, %rsi
    00000051: 	jne	.Ltmp138 # Offset: 81
    00000053: 	movq	%rcx, %rax
    00000056: 	andq	$-0x8, %rax
    0000005a: 	testb	$0x7, %cl
    0000005d: 	je	.Ltmp139 # Offset: 93
.Ltmp141:
    0000005f: 	movq	%rcx, %rsi
    00000062: 	subq	%rax, %rsi
    00000065: 	leaq	-0x1(%rsi), %rdi
    00000069: 	cmpq	$0x2, %rdi
    0000006d: 	jbe	.Ltmp140 # Offset: 109
    0000006f: 	leaq	(%rdx,%rax,2), %rdi
    00000073: 	movq	(%rdi), %xmm0
    00000077: 	movdqa	%xmm0, %xmm1
    0000007b: 	psllw	$0x8, %xmm0
    00000080: 	psrlw	$0x8, %xmm1
    00000085: 	por	%xmm1, %xmm0
    00000089: 	movq	%xmm0, (%rdi)
    0000008d: 	movq	%rsi, %rdi
    00000090: 	andq	$-0x4, %rdi
    00000094: 	addq	%rdi, %rax
    00000097: 	cmpq	%rdi, %rsi
    0000009a: 	je	.Ltmp136 # Offset: 154
.Ltmp140:
    0000009c: 	leaq	(%rax,%rax), %rsi
    000000a0: 	leaq	0x1(%rax), %rdi
    000000a4: 	rolw	$0x8, (%rdx,%rsi)
    000000a9: 	cmpq	%rdi, %rcx
    000000ac: 	jbe	.Ltmp136 # Offset: 172
    000000ae: 	addq	$0x2, %rax
    000000b2: 	rolw	$0x8, 0x2(%rdx,%rsi)
    000000b8: 	cmpq	%rax, %rcx
    000000bb: 	jbe	.Ltmp136 # Offset: 187
    000000bd: 	rolw	$0x8, 0x4(%rdx,%rsi)
.Ltmp136:
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp139:
    000000c8: 	retq # Offset: 200
.Ltmp137:
    000000c9: 	xorl	%eax, %eax
    000000cb: 	jmp	.Ltmp141 # Offset: 203
DWARF CFI Instructions:
    <empty>
End of Function "_Z6swab16Ptm"

Binary Function "_Z14isLittleEndianv" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0xbdf0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0xbdf0
  Section     : .text
  Orc Section : .local.text._Z14isLittleEndianv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movl	$0x1, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z14isLittleEndianv"

Binary Function "_ZN22jacobi_sor2D_unrolled2IddEclEPdS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled2IddEclEPdS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled2IddEclEPdS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 52
  State       : disassembled
  Address     : 0xbe00
  Size        : 0x5c6
  MaxSize     : 0x5d0
  Offset      : 0xbe00
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled2IddEclEPdS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	leal	-0x1(%rdx), %ebx
    0000000d: 	movl	%ecx, -0x24(%rsp)
    00000011: 	movl	%r8d, -0x18(%rsp)
    00000016: 	movl	%ebx, -0x1c(%rsp)
    0000001a: 	cmpl	$0x1, %ebx
    0000001d: 	jle	.Ltmp142 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %ebx
    00000026: 	movq	%rdi, %rax
    00000029: 	movl	$0x1, -0x28(%rsp)
    00000031: 	movapd	DATAat0x49400(%rip), %xmm3
    00000039: 	movl	%ebx, -0x20(%rsp)
    0000003d: 	leal	-0x6(%rcx), %ebx
    00000040: 	movq	%rsi, %r12
    00000043: 	movl	%r8d, %r11d
    00000046: 	movl	%ebx, %edi
    00000048: 	movl	%ebx, -0x14(%rsp)
    0000004c: 	andl	$-0x4, %ebx
    0000004f: 	leal	(%r8,%r8), %r10d
    00000053: 	movl	%ebx, %r15d
    00000056: 	shrl	$0x2, %edi
    00000059: 	xorl	%r9d, %r9d
    0000005c: 	pxor	%xmm4, %xmm4
    00000060: 	movl	%edi, -0x10(%rsp)
    00000064: 	leal	0x1(%rbx), %edi
    00000067: 	movapd	DATAat0x49410(%rip), %xmm2
    0000006f: 	addl	$0x5, %r15d
    00000073: 	movl	%edi, -0xc(%rsp)
    00000077: 	movsd	DATAat0x49400(%rip), %xmm6
    0000007f: 	movsd	DATAat0x49410(%rip), %xmm5
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp149:
    00000090: 	addl	$0x1, -0x28(%rsp)
    00000095: 	cmpl	$0x5, -0x24(%rsp)
    0000009a: 	movl	$0x1, %edx
    0000009f: 	jle	.Ltmp143 # Offset: 159
    000000a5: 	cmpl	$0x3, -0x14(%rsp)
    000000aa: 	jbe	.Ltmp144 # Offset: 170
    000000b0: 	movslq	%r9d, %rcx
    000000b3: 	movslq	%r11d, %rdx
    000000b6: 	movl	-0x10(%rsp), %r14d
    000000bb: 	movapd	%xmm3, %xmm8
    000000c0: 	leaq	0x8(%rax,%rcx,8), %rbx
    000000c5: 	leaq	0x8(,%rdx,8), %rdx
    000000cd: 	movslq	%r10d, %rcx
    000000d0: 	leaq	(%r12,%rdx), %rsi
    000000d4: 	leaq	-0x8(%rax,%rdx), %r8
    000000d9: 	movapd	%xmm2, %xmm7
    000000dd: 	leaq	0x8(%rax,%rcx,8), %rdi
    000000e2: 	leaq	0x18(%rax,%rdx), %r13
    000000e7: 	pxor	%xmm9, %xmm9
    000000ec: 	xorl	%ecx, %ecx
    000000ee: 	leaq	0x10(%r12,%rdx), %rbp
    000000f3: 	xorl	%edx, %edx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp145:
    000000f8: 	movupd	0x10(%r8,%rdx), %xmm1
    000000ff: 	movupd	0x10(%rbx,%rdx), %xmm0
    00000105: 	addl	$0x1, %ecx
    00000108: 	movupd	(%rbx,%rdx), %xmm12
    0000010e: 	movupd	0x10(%r8,%rdx), %xmm13
    00000115: 	addpd	%xmm1, %xmm0
    00000119: 	movupd	(%rdi,%rdx), %xmm14
    0000011f: 	movupd	(%rsi,%rdx), %xmm15
    00000125: 	movupd	(%r13,%rdx), %xmm1
    0000012c: 	addpd	%xmm1, %xmm0
    00000130: 	movupd	0x10(%rdi,%rdx), %xmm1
    00000136: 	addpd	%xmm1, %xmm0
    0000013a: 	movupd	0x10(%rsi,%rdx), %xmm1
    00000140: 	addpd	%xmm9, %xmm0
    00000145: 	mulpd	%xmm3, %xmm0
    00000149: 	subpd	%xmm1, %xmm0
    0000014d: 	mulpd	%xmm2, %xmm0
    00000151: 	addpd	%xmm1, %xmm0
    00000155: 	movupd	(%r8,%rdx), %xmm1
    0000015b: 	addpd	%xmm12, %xmm1
    00000160: 	addpd	%xmm13, %xmm1
    00000165: 	addpd	%xmm14, %xmm1
    0000016a: 	addpd	%xmm9, %xmm1
    0000016f: 	mulpd	%xmm3, %xmm1
    00000173: 	subpd	%xmm15, %xmm1
    00000178: 	mulpd	%xmm2, %xmm1
    0000017c: 	addpd	%xmm15, %xmm1
    00000181: 	movups	%xmm1, (%rsi,%rdx)
    00000185: 	movups	%xmm0, (%rbp,%rdx)
    0000018a: 	addq	$0x20, %rdx
    0000018e: 	cmpl	%ecx, %r14d
    00000191: 	ja	.Ltmp145 # Offset: 401
    00000197: 	movl	-0xc(%rsp), %edx
.Ltmp150:
    0000019b: 	leal	(%r11,%rdx), %ecx
    0000019f: 	leal	-0x1(%r11,%rdx), %ebx
    000001a4: 	pxor	%xmm9, %xmm9
    000001a9: 	movslq	%ecx, %rcx
    000001ac: 	leal	0x2(%rdx), %edi
    000001af: 	leal	0x3(%rdx), %esi
    000001b2: 	movslq	%ebx, %rbx
    000001b5: 	leaq	(%r12,%rcx,8), %r8
    000001b9: 	leal	0x1(%rdx), %ecx
    000001bc: 	leaq	(%rax,%rbx,8), %r14
    000001c0: 	leal	(%r9,%rdi), %ebp
    000001c4: 	addl	%r10d, %edi
    000001c7: 	movupd	(%r8), %xmm11
    000001cc: 	leal	(%r11,%rcx), %ebx
    000001d0: 	movslq	%ebp, %rbp
    000001d3: 	movupd	0x10(%r14), %xmm1
    000001d9: 	movslq	%edi, %rdi
    000001dc: 	movslq	%ebx, %rbx
    000001df: 	movsd	(%rax,%rbp,8), %xmm0
    000001e4: 	movupd	(%r14), %xmm10
    000001e9: 	leaq	(%rax,%rbx,8), %r13
    000001ed: 	leal	(%r9,%rsi), %ebx
    000001f1: 	addl	%r10d, %esi
    000001f4: 	movslq	%ebx, %rbx
    000001f7: 	movslq	%esi, %rsi
    000001fa: 	movhpd	(%rax,%rbx,8), %xmm0
    000001ff: 	addpd	%xmm1, %xmm0
    00000203: 	movupd	0x10(%r13), %xmm1
    00000209: 	addpd	%xmm1, %xmm0
    0000020d: 	movsd	(%rax,%rdi,8), %xmm1
    00000212: 	leal	(%r9,%rdx), %edi
    00000216: 	addl	%r10d, %edx
    00000219: 	movslq	%edi, %rdi
    0000021c: 	movslq	%edx, %rdx
    0000021f: 	movhpd	(%rax,%rsi,8), %xmm1
    00000224: 	leal	(%r9,%rcx), %esi
    00000228: 	addl	%r10d, %ecx
    0000022b: 	addpd	%xmm1, %xmm0
    0000022f: 	movupd	0x10(%r8), %xmm1
    00000235: 	movslq	%esi, %rsi
    00000238: 	movslq	%ecx, %rcx
    0000023b: 	addpd	%xmm9, %xmm0
    00000240: 	mulpd	%xmm8, %xmm0
    00000245: 	subpd	%xmm1, %xmm0
    00000249: 	mulpd	%xmm7, %xmm0
    0000024d: 	addpd	%xmm1, %xmm0
    00000251: 	movsd	(%rax,%rdi,8), %xmm1
    00000256: 	movhpd	(%rax,%rsi,8), %xmm1
    0000025b: 	addpd	%xmm10, %xmm1
    00000260: 	movupd	(%r13), %xmm10
    00000266: 	addpd	%xmm10, %xmm1
    0000026b: 	movsd	(%rax,%rdx,8), %xmm10
    00000271: 	movl	%r15d, %edx
    00000274: 	movhpd	(%rax,%rcx,8), %xmm10
    0000027a: 	movups	%xmm0, 0x10(%r8)
    0000027f: 	addpd	%xmm10, %xmm1
    00000284: 	addpd	%xmm9, %xmm1
    00000289: 	mulpd	%xmm8, %xmm1
    0000028e: 	subpd	%xmm11, %xmm1
    00000293: 	mulpd	%xmm7, %xmm1
    00000297: 	addpd	%xmm11, %xmm1
    0000029c: 	movups	%xmm1, (%r8)
.Ltmp143:
    000002a0: 	cmpl	-0x20(%rsp), %edx
    000002a4: 	jge	.Ltmp146 # Offset: 676
    000002aa: 	movslq	%edx, %r8
    000002ad: 	movslq	%r10d, %rbp
    000002b0: 	movslq	%r11d, %rbx
    000002b3: 	movslq	%r9d, %rdi
    000002b6: 	addq	%r8, %rbx
    000002b9: 	leaq	0x1(%r8,%rdi), %rdi
    000002be: 	movl	-0x24(%rsp), %ecx
    000002c2: 	leaq	0x1(%r8,%rbp), %r8
    000002c7: 	movq	%r12, %rbp
    000002ca: 	shlq	$0x3, %rdi
    000002ce: 	leaq	(,%rbx,8), %r13
    000002d6: 	subq	%rax, %rbp
    000002d9: 	subl	%edx, %ecx
    000002db: 	shlq	$0x3, %r8
    000002df: 	leaq	(%r12,%r13), %rsi
    000002e3: 	cmpq	$0x10, %rbp
    000002e7: 	seta	%bpl
    000002eb: 	cmpl	$0x2, %ecx
    000002ee: 	setne	%r14b
    000002f2: 	andl	%r14d, %ebp
    000002f5: 	leaq	(%rax,%rdi), %r14
    000002f9: 	cmpq	%r14, %rsi
    000002fc: 	setne	%r14b
    00000300: 	testb	%r14b, %bpl
    00000303: 	je	.Ltmp147 # Offset: 771
    00000309: 	leaq	(%rax,%r8), %rbp
    0000030d: 	cmpq	%rbp, %rsi
    00000310: 	je	.Ltmp147 # Offset: 784
    00000316: 	leaq	-0x8(%rax,%rdi), %rbx
    0000031b: 	leaq	-0x8(%rax,%r13), %rbp
    00000320: 	pxor	%xmm1, %xmm1
    00000324: 	subl	$0x1, %ecx
    00000327: 	movupd	(%rbp), %xmm7
    0000032c: 	movupd	(%rbx), %xmm0
    00000330: 	leaq	0x8(%rax,%r13), %r13
    00000335: 	leaq	-0x8(%rax,%r8), %rdi
    0000033a: 	movl	%ecx, %r8d
    0000033d: 	addpd	%xmm7, %xmm0
    00000341: 	movupd	(%r13), %xmm7
    00000347: 	shrl	%r8d
    0000034a: 	addpd	%xmm7, %xmm0
    0000034e: 	movupd	(%rdi), %xmm7
    00000352: 	addpd	%xmm7, %xmm0
    00000356: 	movupd	(%rsi), %xmm7
    0000035a: 	addpd	%xmm1, %xmm0
    0000035e: 	mulpd	%xmm3, %xmm0
    00000362: 	subpd	%xmm7, %xmm0
    00000366: 	mulpd	%xmm2, %xmm0
    0000036a: 	addpd	%xmm7, %xmm0
    0000036e: 	movups	%xmm0, (%rsi)
    00000371: 	cmpl	$0x1, %r8d
    00000375: 	je	.Ltmp148 # Offset: 885
    00000377: 	movupd	0x10(%rbx), %xmm7
    0000037c: 	movupd	0x10(%rbp), %xmm0
    00000381: 	addpd	%xmm7, %xmm0
    00000385: 	movupd	0x10(%r13), %xmm7
    0000038b: 	addpd	%xmm7, %xmm0
    0000038f: 	movupd	0x10(%rdi), %xmm7
    00000394: 	addpd	%xmm7, %xmm0
    00000398: 	movupd	0x10(%rsi), %xmm7
    0000039d: 	addpd	%xmm1, %xmm0
    000003a1: 	mulpd	%xmm3, %xmm0
    000003a5: 	subpd	%xmm7, %xmm0
    000003a9: 	mulpd	%xmm2, %xmm0
    000003ad: 	addpd	%xmm7, %xmm0
    000003b1: 	movups	%xmm0, 0x10(%rsi)
.Ltmp148:
    000003b5: 	movl	%ecx, %esi
    000003b7: 	andl	$-0x2, %esi
    000003ba: 	addl	%esi, %edx
    000003bc: 	cmpl	%ecx, %esi
    000003be: 	je	.Ltmp146 # Offset: 958
    000003c0: 	leal	(%r11,%rdx), %ecx
    000003c4: 	movslq	%ecx, %rcx
    000003c7: 	leaq	(%r12,%rcx,8), %rsi
    000003cb: 	leal	(%r9,%rdx), %ecx
    000003cf: 	movslq	%ecx, %rcx
    000003d2: 	movsd	(%rsi), %xmm1
    000003d6: 	movsd	(%rax,%rcx,8), %xmm0
    000003db: 	leal	-0x1(%r11,%rdx), %ecx
    000003e0: 	movslq	%ecx, %rcx
    000003e3: 	addsd	(%rax,%rcx,8), %xmm0
    000003e8: 	leal	0x1(%r11,%rdx), %ecx
    000003ed: 	addl	%r10d, %edx
    000003f0: 	movslq	%ecx, %rcx
    000003f3: 	movslq	%edx, %rdx
    000003f6: 	addsd	(%rax,%rcx,8), %xmm0
    000003fb: 	addsd	(%rax,%rdx,8), %xmm0
    00000400: 	addsd	%xmm4, %xmm0
    00000404: 	mulsd	DATAat0x49400(%rip), %xmm0
    0000040c: 	subsd	%xmm1, %xmm0
    00000410: 	mulsd	DATAat0x49410(%rip), %xmm0
    00000418: 	addsd	%xmm1, %xmm0
    0000041c: 	movsd	%xmm0, (%rsi)
.Ltmp146:
    00000420: 	movl	-0x18(%rsp), %edi
    00000424: 	addl	%edi, %r9d
    00000427: 	addl	%edi, %r11d
    0000042a: 	addl	%edi, %r10d
    0000042d: 	movl	-0x28(%rsp), %edi
    00000431: 	cmpl	%edi, -0x1c(%rsp)
    00000435: 	jne	.Ltmp149 # Offset: 1077
.Ltmp142:
    0000043b: 	popq	%rbx
    0000043c: 	popq	%rbp
    0000043d: 	popq	%r12
    0000043f: 	popq	%r13
    00000441: 	popq	%r14
    00000443: 	popq	%r15
    00000445: 	retq # Offset: 1093
    00000446: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp147:
    00000450: 	leal	-0x1(%r11,%rdx), %ecx
    00000455: 	movsd	-0x8(%rax,%rdi), %xmm0
    0000045b: 	leal	0x1(%rdx), %edi
    0000045e: 	movsd	(%rsi), %xmm1
    00000462: 	movslq	%ecx, %rcx
    00000465: 	movl	-0x20(%rsp), %r14d
    0000046a: 	addsd	(%rax,%rcx,8), %xmm0
    0000046f: 	leal	(%rdi,%r11), %ecx
    00000473: 	movslq	%ecx, %rcx
    00000476: 	shlq	$0x3, %rcx
    0000047a: 	leaq	(%rax,%rcx), %rbp
    0000047e: 	addsd	(%rbp), %xmm0
    00000483: 	addsd	-0x8(%rax,%r8), %xmm0
    0000048a: 	addsd	%xmm4, %xmm0
    0000048e: 	mulsd	%xmm6, %xmm0
    00000492: 	subsd	%xmm1, %xmm0
    00000496: 	mulsd	%xmm5, %xmm0
    0000049a: 	addsd	%xmm1, %xmm0
    0000049e: 	movsd	%xmm0, (%rsi)
    000004a2: 	cmpl	%r14d, %edi
    000004a5: 	jge	.Ltmp146 # Offset: 1189
    000004ab: 	leal	(%rdi,%r9), %esi
    000004af: 	leal	0x2(%rdx), %r8d
    000004b3: 	addl	%r10d, %edi
    000004b6: 	addq	%r12, %rcx
    000004b9: 	movslq	%esi, %rsi
    000004bc: 	movslq	%edi, %rdi
    000004bf: 	movsd	(%rcx), %xmm1
    000004c3: 	movsd	(%rax,%rsi,8), %xmm0
    000004c8: 	leal	(%r11,%r8), %esi
    000004cc: 	addsd	(%rax,%rbx,8), %xmm0
    000004d1: 	movslq	%esi, %rsi
    000004d4: 	shlq	$0x3, %rsi
    000004d8: 	leaq	(%rax,%rsi), %r13
    000004dc: 	addsd	(%r13), %xmm0
    000004e2: 	addsd	(%rax,%rdi,8), %xmm0
    000004e7: 	addsd	%xmm4, %xmm0
    000004eb: 	mulsd	%xmm6, %xmm0
    000004ef: 	subsd	%xmm1, %xmm0
    000004f3: 	mulsd	%xmm5, %xmm0
    000004f7: 	addsd	%xmm1, %xmm0
    000004fb: 	movsd	%xmm0, (%rcx)
    000004ff: 	cmpl	%r14d, %r8d
    00000502: 	jge	.Ltmp146 # Offset: 1282
    00000508: 	leal	(%r9,%r8), %ecx
    0000050c: 	addq	%r12, %rsi
    0000050f: 	movslq	%ecx, %rcx
    00000512: 	movsd	(%rsi), %xmm1
    00000516: 	movsd	(%rax,%rcx,8), %xmm0
    0000051b: 	leal	0x3(%rdx), %ecx
    0000051e: 	addsd	(%rbp), %xmm0
    00000523: 	leal	(%rcx,%r11), %edi
    00000527: 	movslq	%edi, %rdi
    0000052a: 	addsd	(%rax,%rdi,8), %xmm0
    0000052f: 	leaq	(,%rdi,8), %rbx
    00000537: 	leal	(%r10,%r8), %edi
    0000053b: 	movslq	%edi, %rdi
    0000053e: 	addsd	(%rax,%rdi,8), %xmm0
    00000543: 	addsd	%xmm4, %xmm0
    00000547: 	mulsd	%xmm6, %xmm0
    0000054b: 	subsd	%xmm1, %xmm0
    0000054f: 	mulsd	%xmm5, %xmm0
    00000553: 	addsd	%xmm1, %xmm0
    00000557: 	movsd	%xmm0, (%rsi)
    0000055b: 	cmpl	%r14d, %ecx
    0000055e: 	jge	.Ltmp146 # Offset: 1374
    00000564: 	leal	(%rcx,%r9), %esi
    00000568: 	leal	0x4(%r11,%rdx), %edx
    0000056d: 	addq	%r12, %rbx
    00000570: 	movslq	%edx, %rdx
    00000573: 	movslq	%esi, %rsi
    00000576: 	movsd	(%rbx), %xmm1
    0000057a: 	movsd	(%rax,%rsi,8), %xmm0
    0000057f: 	addsd	(%r13), %xmm0
    00000585: 	addsd	(%rax,%rdx,8), %xmm0
    0000058a: 	leal	(%rcx,%r10), %edx
    0000058e: 	movslq	%edx, %rdx
    00000591: 	addsd	(%rax,%rdx,8), %xmm0
    00000596: 	addsd	%xmm4, %xmm0
    0000059a: 	mulsd	%xmm6, %xmm0
    0000059e: 	subsd	%xmm1, %xmm0
    000005a2: 	mulsd	%xmm5, %xmm0
    000005a6: 	addsd	%xmm1, %xmm0
    000005aa: 	movsd	%xmm0, (%rbx)
    000005ae: 	jmp	.Ltmp146 # Offset: 1454
.Ltmp144:
    000005b3: 	movl	$0x1, %edx
    000005b8: 	movapd	%xmm3, %xmm8
    000005bd: 	movapd	%xmm2, %xmm7
    000005c1: 	jmp	.Ltmp150 # Offset: 1473
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled2IddEclEPdS1_iiii.isra.0/1(*2)"

Binary Function "_ZN21jacobi_sor2D_unrolledIddEclEPdS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN21jacobi_sor2D_unrolledIddEclEPdS1_iiii.isra.0/1
                _ZN21jacobi_sor2D_unrolledIddEclEPdS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 53
  State       : disassembled
  Address     : 0xc3d0
  Size        : 0x5ec
  MaxSize     : 0x5f0
  Offset      : 0xc3d0
  Section     : .text
  Orc Section : .local.text._ZN21jacobi_sor2D_unrolledIddEclEPdS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r9
    00000005: 	leal	-0x1(%rdx), %esi
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, -0x28(%rsp)
    00000014: 	movl	%r8d, -0x14(%rsp)
    00000019: 	movl	%esi, -0x18(%rsp)
    0000001d: 	cmpl	$0x1, %esi
    00000020: 	jle	.Ltmp151 # Offset: 32
    00000026: 	leal	-0x1(%rcx), %esi
    00000029: 	subl	$0x6, %ecx
    0000002c: 	movl	$0x1, -0x2c(%rsp)
    00000034: 	movl	%r8d, %edx
    00000037: 	movl	%ecx, %r15d
    0000003a: 	movl	%ecx, -0x10(%rsp)
    0000003e: 	andl	$-0x4, %ecx
    00000041: 	movapd	DATAat0x49400(%rip), %xmm3
    00000049: 	shrl	$0x2, %r15d
    0000004d: 	movl	%esi, -0x1c(%rsp)
    00000051: 	leal	(%r8,%r8), %esi
    00000055: 	movl	%ecx, %r8d
    00000058: 	movl	%r15d, -0x24(%rsp)
    0000005d: 	leal	0x1(%rcx), %ecx
    00000060: 	movq	%rdi, %rax
    00000063: 	addl	$0x5, %r8d
    00000067: 	movapd	DATAat0x49410(%rip), %xmm2
    0000006f: 	movsd	DATAat0x49400(%rip), %xmm6
    00000077: 	movl	%ecx, -0xc(%rsp)
    0000007b: 	pxor	%xmm4, %xmm4
    0000007f: 	movsd	DATAat0x49410(%rip), %xmm5
    00000087: 	xorl	%ecx, %ecx
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp158:
    00000090: 	addl	$0x1, -0x2c(%rsp)
    00000095: 	cmpl	$0x5, -0x28(%rsp)
    0000009a: 	movl	$0x1, %edi
    0000009f: 	jle	.Ltmp152 # Offset: 159
    000000a5: 	cmpl	$0x3, -0x10(%rsp)
    000000aa: 	jbe	.Ltmp153 # Offset: 170
    000000b0: 	movslq	%ecx, %r10
    000000b3: 	movslq	%edx, %rdi
    000000b6: 	movl	-0x24(%rsp), %r15d
    000000bb: 	movapd	%xmm3, %xmm8
    000000c0: 	leaq	0x8(%rax,%r10,8), %r12
    000000c5: 	leaq	0x8(,%rdi,8), %rdi
    000000cd: 	movslq	%esi, %r10
    000000d0: 	leaq	(%r9,%rdi), %r11
    000000d4: 	leaq	-0x8(%rax,%rdi), %rbp
    000000d9: 	movapd	%xmm2, %xmm7
    000000dd: 	leaq	0x8(%rax,%r10,8), %rbx
    000000e2: 	leaq	0x18(%rax,%rdi), %r14
    000000e7: 	pxor	%xmm9, %xmm9
    000000ec: 	xorl	%r10d, %r10d
    000000ef: 	leaq	0x10(%r9,%rdi), %r13
    000000f4: 	xorl	%edi, %edi
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp154:
    00000100: 	movupd	0x10(%rbp,%rdi), %xmm1
    00000106: 	movupd	0x10(%r12,%rdi), %xmm0
    0000010d: 	addl	$0x1, %r10d
    00000111: 	movupd	(%r12,%rdi), %xmm13
    00000117: 	movupd	0x10(%rbp,%rdi), %xmm14
    0000011e: 	addpd	%xmm1, %xmm0
    00000122: 	movupd	(%r14,%rdi), %xmm1
    00000128: 	movupd	(%rbx,%rdi), %xmm15
    0000012e: 	addpd	%xmm1, %xmm0
    00000132: 	movupd	0x10(%rbx,%rdi), %xmm1
    00000138: 	addpd	%xmm1, %xmm0
    0000013c: 	movupd	0x10(%r11,%rdi), %xmm1
    00000143: 	addpd	%xmm9, %xmm0
    00000148: 	mulpd	%xmm3, %xmm0
    0000014c: 	subpd	%xmm1, %xmm0
    00000150: 	mulpd	%xmm2, %xmm0
    00000154: 	addpd	%xmm1, %xmm0
    00000158: 	movupd	(%rbp,%rdi), %xmm1
    0000015e: 	addpd	%xmm13, %xmm1
    00000163: 	movupd	(%r11,%rdi), %xmm13
    00000169: 	addpd	%xmm14, %xmm1
    0000016e: 	addpd	%xmm15, %xmm1
    00000173: 	addpd	%xmm9, %xmm1
    00000178: 	mulpd	%xmm3, %xmm1
    0000017c: 	subpd	%xmm13, %xmm1
    00000181: 	mulpd	%xmm2, %xmm1
    00000185: 	addpd	%xmm13, %xmm1
    0000018a: 	movups	%xmm1, (%r11,%rdi)
    0000018f: 	movups	%xmm0, (%r13,%rdi)
    00000195: 	addq	$0x20, %rdi
    00000199: 	cmpl	%r10d, %r15d
    0000019c: 	ja	.Ltmp154 # Offset: 412
    000001a2: 	movl	%r15d, -0x24(%rsp)
    000001a7: 	movl	-0xc(%rsp), %edi
.Ltmp159:
    000001ab: 	leal	(%rdx,%rdi), %r10d
    000001af: 	leal	0x2(%rdi), %r11d
    000001b3: 	pxor	%xmm9, %xmm9
    000001b8: 	movslq	%r10d, %r10
    000001bb: 	leal	(%rdx,%r11), %ebx
    000001bf: 	leaq	(%r9,%r10,8), %rbp
    000001c3: 	leal	0x1(%rdi), %r10d
    000001c7: 	movslq	%ebx, %rbx
    000001ca: 	leal	(%rdx,%r10), %r12d
    000001ce: 	leaq	(%r9,%rbx,8), %rbx
    000001d2: 	movupd	(%rbp), %xmm12
    000001d8: 	movslq	%r12d, %r12
    000001db: 	movupd	(%rax,%r12,8), %xmm10
    000001e1: 	leal	(%rcx,%r11), %r12d
    000001e5: 	addl	%esi, %r11d
    000001e8: 	movslq	%r12d, %r12
    000001eb: 	movslq	%r11d, %r11
    000001ee: 	movupd	(%rax,%r12,8), %xmm1
    000001f4: 	leal	0x3(%rdx,%rdi), %r12d
    000001f9: 	movslq	%r12d, %r12
    000001fc: 	addpd	%xmm10, %xmm1
    00000201: 	movupd	(%rax,%r12,8), %xmm0
    00000207: 	leal	(%rcx,%rdi), %r12d
    0000020b: 	movslq	%r12d, %r12
    0000020e: 	addpd	%xmm0, %xmm1
    00000212: 	movupd	(%rax,%r11,8), %xmm0
    00000218: 	leal	(%rcx,%r10), %r11d
    0000021c: 	addl	%esi, %r10d
    0000021f: 	movslq	%r11d, %r11
    00000222: 	movslq	%r10d, %r10
    00000225: 	addpd	%xmm0, %xmm1
    00000229: 	movupd	(%rbx), %xmm0
    0000022d: 	addpd	%xmm9, %xmm1
    00000232: 	mulpd	%xmm8, %xmm1
    00000237: 	subpd	%xmm0, %xmm1
    0000023b: 	mulpd	%xmm7, %xmm1
    0000023f: 	addpd	%xmm0, %xmm1
    00000243: 	movsd	(%rax,%r12,8), %xmm0
    00000249: 	movhpd	(%rax,%r11,8), %xmm0
    0000024f: 	leal	-0x1(%rdx,%rdi), %r11d
    00000254: 	addl	%esi, %edi
    00000256: 	movslq	%r11d, %r11
    00000259: 	movslq	%edi, %rdi
    0000025c: 	movupd	(%rax,%r11,8), %xmm11
    00000262: 	addpd	%xmm11, %xmm0
    00000267: 	addpd	%xmm10, %xmm0
    0000026c: 	movsd	(%rax,%rdi,8), %xmm10
    00000272: 	movl	%r8d, %edi
    00000275: 	movhpd	(%rax,%r10,8), %xmm10
    0000027b: 	addpd	%xmm10, %xmm0
    00000280: 	addpd	%xmm9, %xmm0
    00000285: 	mulpd	%xmm8, %xmm0
    0000028a: 	subpd	%xmm12, %xmm0
    0000028f: 	mulpd	%xmm7, %xmm0
    00000293: 	addpd	%xmm12, %xmm0
    00000298: 	movups	%xmm0, (%rbp)
    0000029c: 	movups	%xmm1, (%rbx)
.Ltmp152:
    0000029f: 	cmpl	-0x1c(%rsp), %edi
    000002a3: 	jge	.Ltmp155 # Offset: 675
    000002a9: 	movslq	%edi, %rbp
    000002ac: 	movslq	%esi, %r13
    000002af: 	movslq	%edx, %r12
    000002b2: 	movslq	%ecx, %rbx
    000002b5: 	addq	%rbp, %r12
    000002b8: 	leaq	0x1(%rbp,%rbx), %rbx
    000002bd: 	movl	-0x28(%rsp), %r10d
    000002c2: 	leaq	0x1(%rbp,%r13), %rbp
    000002c7: 	movq	%r9, %r13
    000002ca: 	shlq	$0x3, %rbx
    000002ce: 	leaq	(,%r12,8), %r14
    000002d6: 	subq	%rax, %r13
    000002d9: 	subl	%edi, %r10d
    000002dc: 	shlq	$0x3, %rbp
    000002e0: 	leaq	(%r9,%r14), %r11
    000002e4: 	cmpq	$0x10, %r13
    000002e8: 	seta	%r13b
    000002ec: 	cmpl	$0x2, %r10d
    000002f0: 	setne	-0x1d(%rsp)
    000002f5: 	movzbl	-0x1d(%rsp), %r15d
    000002fb: 	andl	%r15d, %r13d
    000002fe: 	leaq	(%rax,%rbx), %r15
    00000302: 	cmpq	%r15, %r11
    00000305: 	setne	-0x1d(%rsp)
    0000030a: 	movzbl	-0x1d(%rsp), %r15d
    00000310: 	testb	%r13b, %r15b
    00000313: 	je	.Ltmp156 # Offset: 787
    00000319: 	leaq	(%rax,%rbp), %r13
    0000031d: 	cmpq	%r13, %r11
    00000320: 	je	.Ltmp156 # Offset: 800
    00000326: 	leaq	-0x8(%rax,%rbx), %r12
    0000032b: 	leaq	-0x8(%rax,%r14), %r13
    00000330: 	pxor	%xmm1, %xmm1
    00000334: 	subl	$0x1, %r10d
    00000338: 	movupd	(%r13), %xmm7
    0000033e: 	movupd	(%r12), %xmm0
    00000344: 	leaq	0x8(%rax,%r14), %r14
    00000349: 	leaq	-0x8(%rax,%rbp), %rbx
    0000034e: 	movl	%r10d, %ebp
    00000351: 	addpd	%xmm7, %xmm0
    00000355: 	movupd	(%r14), %xmm7
    0000035a: 	shrl	%ebp
    0000035c: 	addpd	%xmm7, %xmm0
    00000360: 	movupd	(%rbx), %xmm7
    00000364: 	addpd	%xmm7, %xmm0
    00000368: 	movupd	(%r11), %xmm7
    0000036d: 	addpd	%xmm1, %xmm0
    00000371: 	mulpd	%xmm3, %xmm0
    00000375: 	subpd	%xmm7, %xmm0
    00000379: 	mulpd	%xmm2, %xmm0
    0000037d: 	addpd	%xmm7, %xmm0
    00000381: 	movups	%xmm0, (%r11)
    00000385: 	cmpl	$0x1, %ebp
    00000388: 	je	.Ltmp157 # Offset: 904
    0000038a: 	movupd	0x10(%r12), %xmm7
    00000391: 	movupd	0x10(%r13), %xmm0
    00000397: 	addpd	%xmm7, %xmm0
    0000039b: 	movupd	0x10(%r14), %xmm7
    000003a1: 	addpd	%xmm7, %xmm0
    000003a5: 	movupd	0x10(%rbx), %xmm7
    000003aa: 	addpd	%xmm7, %xmm0
    000003ae: 	movupd	0x10(%r11), %xmm7
    000003b4: 	addpd	%xmm1, %xmm0
    000003b8: 	mulpd	%xmm3, %xmm0
    000003bc: 	subpd	%xmm7, %xmm0
    000003c0: 	mulpd	%xmm2, %xmm0
    000003c4: 	addpd	%xmm7, %xmm0
    000003c8: 	movups	%xmm0, 0x10(%r11)
.Ltmp157:
    000003cd: 	movl	%r10d, %r11d
    000003d0: 	andl	$-0x2, %r11d
    000003d4: 	addl	%r11d, %edi
    000003d7: 	cmpl	%r10d, %r11d
    000003da: 	je	.Ltmp155 # Offset: 986
    000003dc: 	leal	(%rdx,%rdi), %r10d
    000003e0: 	movslq	%r10d, %r10
    000003e3: 	leaq	(%r9,%r10,8), %r11
    000003e7: 	leal	(%rcx,%rdi), %r10d
    000003eb: 	movslq	%r10d, %r10
    000003ee: 	movsd	(%r11), %xmm1
    000003f3: 	movsd	(%rax,%r10,8), %xmm0
    000003f9: 	leal	-0x1(%rdx,%rdi), %r10d
    000003fe: 	movslq	%r10d, %r10
    00000401: 	addsd	(%rax,%r10,8), %xmm0
    00000407: 	leal	0x1(%rdx,%rdi), %r10d
    0000040c: 	addl	%esi, %edi
    0000040e: 	movslq	%r10d, %r10
    00000411: 	movslq	%edi, %rdi
    00000414: 	addsd	(%rax,%r10,8), %xmm0
    0000041a: 	addsd	(%rax,%rdi,8), %xmm0
    0000041f: 	addsd	%xmm4, %xmm0
    00000423: 	mulsd	DATAat0x49400(%rip), %xmm0
    0000042b: 	subsd	%xmm1, %xmm0
    0000042f: 	mulsd	DATAat0x49410(%rip), %xmm0
    00000437: 	addsd	%xmm1, %xmm0
    0000043b: 	movsd	%xmm0, (%r11)
.Ltmp155:
    00000440: 	movl	-0x14(%rsp), %ebx
    00000444: 	movl	-0x2c(%rsp), %edi
    00000448: 	addl	%ebx, %ecx
    0000044a: 	addl	%ebx, %edx
    0000044c: 	addl	%ebx, %esi
    0000044e: 	cmpl	%edi, -0x18(%rsp)
    00000452: 	jne	.Ltmp158 # Offset: 1106
.Ltmp151:
    00000458: 	popq	%rbx
    00000459: 	popq	%rbp
    0000045a: 	popq	%r12
    0000045c: 	popq	%r13
    0000045e: 	popq	%r14
    00000460: 	popq	%r15
    00000462: 	retq # Offset: 1122
    00000463: 	nopl	(%rax,%rax) # Size: 5
.Ltmp156:
    00000468: 	leal	-0x1(%rdx,%rdi), %r10d
    0000046d: 	movsd	-0x8(%rax,%rbx), %xmm0
    00000473: 	leal	0x1(%rdi), %ebx
    00000476: 	movsd	(%r11), %xmm1
    0000047b: 	movslq	%r10d, %r10
    0000047e: 	movl	-0x1c(%rsp), %r15d
    00000483: 	addsd	(%rax,%r10,8), %xmm0
    00000489: 	leal	(%rbx,%rdx), %r10d
    0000048d: 	movslq	%r10d, %r10
    00000490: 	shlq	$0x3, %r10
    00000494: 	leaq	(%rax,%r10), %r13
    00000498: 	addsd	(%r13), %xmm0
    0000049e: 	addsd	-0x8(%rax,%rbp), %xmm0
    000004a4: 	addsd	%xmm4, %xmm0
    000004a8: 	mulsd	%xmm6, %xmm0
    000004ac: 	subsd	%xmm1, %xmm0
    000004b0: 	mulsd	%xmm5, %xmm0
    000004b4: 	addsd	%xmm1, %xmm0
    000004b8: 	movsd	%xmm0, (%r11)
    000004bd: 	cmpl	%r15d, %ebx
    000004c0: 	jge	.Ltmp155 # Offset: 1216
    000004c6: 	leal	(%rbx,%rcx), %r11d
    000004ca: 	leal	0x2(%rdi), %ebp
    000004cd: 	addl	%esi, %ebx
    000004cf: 	addq	%r9, %r10
    000004d2: 	movslq	%r11d, %r11
    000004d5: 	movslq	%ebx, %rbx
    000004d8: 	movsd	(%r10), %xmm1
    000004dd: 	movsd	(%rax,%r11,8), %xmm0
    000004e3: 	leal	(%rbp,%rdx), %r11d
    000004e8: 	addsd	(%rax,%r12,8), %xmm0
    000004ee: 	movslq	%r11d, %r11
    000004f1: 	shlq	$0x3, %r11
    000004f5: 	leaq	(%rax,%r11), %r14
    000004f9: 	addsd	(%r14), %xmm0
    000004fe: 	addsd	(%rax,%rbx,8), %xmm0
    00000503: 	addsd	%xmm4, %xmm0
    00000507: 	mulsd	%xmm6, %xmm0
    0000050b: 	subsd	%xmm1, %xmm0
    0000050f: 	mulsd	%xmm5, %xmm0
    00000513: 	addsd	%xmm1, %xmm0
    00000517: 	movsd	%xmm0, (%r10)
    0000051c: 	cmpl	%r15d, %ebp
    0000051f: 	jge	.Ltmp155 # Offset: 1311
    00000525: 	leal	(%rbp,%rcx), %r10d
    0000052a: 	addq	%r9, %r11
    0000052d: 	movslq	%r10d, %r10
    00000530: 	movsd	(%r11), %xmm1
    00000535: 	movsd	(%rax,%r10,8), %xmm0
    0000053b: 	leal	0x3(%rdi), %r10d
    0000053f: 	addsd	(%r13), %xmm0
    00000545: 	leal	(%r10,%rdx), %ebx
    00000549: 	movslq	%ebx, %rbx
    0000054c: 	addsd	(%rax,%rbx,8), %xmm0
    00000551: 	leaq	(,%rbx,8), %r12
    00000559: 	leal	(%rbp,%rsi), %ebx
    0000055d: 	movslq	%ebx, %rbx
    00000560: 	addsd	(%rax,%rbx,8), %xmm0
    00000565: 	addsd	%xmm4, %xmm0
    00000569: 	mulsd	%xmm6, %xmm0
    0000056d: 	subsd	%xmm1, %xmm0
    00000571: 	mulsd	%xmm5, %xmm0
    00000575: 	addsd	%xmm1, %xmm0
    00000579: 	movsd	%xmm0, (%r11)
    0000057e: 	cmpl	%r15d, %r10d
    00000581: 	jge	.Ltmp155 # Offset: 1409
    00000587: 	leal	(%r10,%rcx), %r11d
    0000058b: 	leal	0x4(%rdx,%rdi), %edi
    0000058f: 	addq	%r9, %r12
    00000592: 	movslq	%edi, %rdi
    00000595: 	movslq	%r11d, %r11
    00000598: 	movsd	(%r12), %xmm1
    0000059e: 	movsd	(%rax,%r11,8), %xmm0
    000005a4: 	addsd	(%r14), %xmm0
    000005a9: 	addsd	(%rax,%rdi,8), %xmm0
    000005ae: 	leal	(%r10,%rsi), %edi
    000005b2: 	movslq	%edi, %rdi
    000005b5: 	addsd	(%rax,%rdi,8), %xmm0
    000005ba: 	addsd	%xmm4, %xmm0
    000005be: 	mulsd	%xmm6, %xmm0
    000005c2: 	subsd	%xmm1, %xmm0
    000005c6: 	mulsd	%xmm5, %xmm0
    000005ca: 	addsd	%xmm1, %xmm0
    000005ce: 	movsd	%xmm0, (%r12)
    000005d4: 	jmp	.Ltmp155 # Offset: 1492
.Ltmp153:
    000005d9: 	movl	$0x1, %edi
    000005de: 	movapd	%xmm3, %xmm8
    000005e3: 	movapd	%xmm2, %xmm7
    000005e7: 	jmp	.Ltmp159 # Offset: 1511
DWARF CFI Instructions:
    <empty>
End of Function "_ZN21jacobi_sor2D_unrolledIddEclEPdS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled2IddEclEPKdPdiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled2IddEclEPKdPdiiii.isra.0/1
                _ZN18jacobi2D_unrolled2IddEclEPKdPdiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 54
  State       : disassembled
  Address     : 0xc9c0
  Size        : 0x507
  MaxSize     : 0x510
  Offset      : 0xc9c0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled2IddEclEPKdPdiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %rax
    00000005: 	movq	%rsi, %rdi
    00000008: 	leal	-0x1(%rdx), %esi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	movl	%ecx, -0x2c(%rsp)
    00000017: 	movl	%r8d, -0x14(%rsp)
    0000001c: 	movl	%esi, -0x18(%rsp)
    00000020: 	cmpl	$0x1, %esi
    00000023: 	jle	.Ltmp160 # Offset: 35
    00000029: 	leal	-0x1(%rcx), %esi
    0000002c: 	subl	$0x6, %ecx
    0000002f: 	movl	$0x1, -0x30(%rsp)
    00000037: 	movsd	DATAat0x49400(%rip), %xmm3
    0000003f: 	movl	%ecx, %r15d
    00000042: 	movl	%ecx, -0x10(%rsp)
    00000046: 	andl	$-0x4, %ecx
    00000049: 	movl	%r8d, %edx
    0000004c: 	shrl	$0x2, %r15d
    00000050: 	movl	%ecx, %r9d
    00000053: 	leal	0x1(%rcx), %ecx
    00000056: 	movl	%esi, -0x1c(%rsp)
    0000005a: 	movl	%ecx, -0xc(%rsp)
    0000005e: 	leal	(%r8,%r8), %esi
    00000062: 	addl	$0x5, %r9d
    00000066: 	xorl	%ecx, %ecx
    00000068: 	movl	%r15d, -0x20(%rsp)
    0000006d: 	movapd	DATAat0x49400(%rip), %xmm5
    00000075: 	pxor	%xmm4, %xmm4
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp167:
    00000080: 	addl	$0x1, -0x30(%rsp)
    00000085: 	cmpl	$0x5, -0x2c(%rsp)
    0000008a: 	movl	$0x1, %r8d
    00000090: 	jle	.Ltmp161 # Offset: 144
    00000096: 	cmpl	$0x3, -0x10(%rsp)
    0000009b: 	jbe	.Ltmp162 # Offset: 155
    000000a1: 	movslq	%ecx, %r8
    000000a4: 	movslq	%esi, %r10
    000000a7: 	movl	-0x20(%rsp), %r15d
    000000ac: 	movapd	%xmm5, %xmm2
    000000b0: 	leaq	0x8(%rax,%r8,8), %rbp
    000000b5: 	movslq	%edx, %r8
    000000b8: 	leaq	0x8(%rax,%r10,8), %r11
    000000bd: 	xorl	%r10d, %r10d
    000000c0: 	shlq	$0x3, %r8
    000000c4: 	pxor	%xmm6, %xmm6
    000000c8: 	leaq	(%rax,%r8), %rbx
    000000cc: 	leaq	0x8(%rdi,%r8), %r14
    000000d1: 	leaq	0x20(%rax,%r8), %r13
    000000d6: 	leaq	0x18(%rdi,%r8), %r12
    000000db: 	xorl	%r8d, %r8d
    000000de: 	nop # Size: 2
.Ltmp163:
    000000e0: 	movupd	0x10(%rbx,%r8), %xmm7
    000000e7: 	movupd	0x10(%rbp,%r8), %xmm0
    000000ee: 	addl	$0x1, %r10d
    000000f2: 	movupd	(%rbx,%r8), %xmm1
    000000f8: 	addpd	%xmm7, %xmm0
    000000fc: 	movupd	(%r13,%r8), %xmm7
    00000103: 	addpd	%xmm7, %xmm0
    00000107: 	movupd	0x10(%r11,%r8), %xmm7
    0000010e: 	addpd	%xmm7, %xmm0
    00000112: 	movupd	(%rbp,%r8), %xmm7
    00000119: 	addpd	%xmm7, %xmm1
    0000011d: 	movupd	0x10(%rbx,%r8), %xmm7
    00000124: 	addpd	%xmm6, %xmm0
    00000128: 	addpd	%xmm7, %xmm1
    0000012c: 	movupd	(%r11,%r8), %xmm7
    00000132: 	mulpd	%xmm5, %xmm0
    00000136: 	addpd	%xmm7, %xmm1
    0000013a: 	addpd	%xmm6, %xmm1
    0000013e: 	mulpd	%xmm5, %xmm1
    00000142: 	movups	%xmm1, (%r14,%r8)
    00000147: 	movups	%xmm0, (%r12,%r8)
    0000014c: 	addq	$0x20, %r8
    00000150: 	cmpl	%r15d, %r10d
    00000153: 	jb	.Ltmp163 # Offset: 339
    00000155: 	movl	%r15d, -0x20(%rsp)
    0000015a: 	movl	-0xc(%rsp), %r8d
.Ltmp168:
    0000015f: 	leal	0x1(%r8), %r11d
    00000163: 	leal	0x2(%rdx,%r8), %r12d
    00000168: 	leal	(%rdx,%r8), %ebp
    0000016c: 	leal	(%rdx,%r11), %ebx
    00000170: 	movslq	%r12d, %r12
    00000173: 	leaq	(%rax,%r12,8), %r13
    00000177: 	movslq	%ebp, %rbp
    0000017a: 	leal	(%rcx,%r11), %r12d
    0000017e: 	movslq	%ebx, %rbx
    00000181: 	movsd	(%rax,%rbx,8), %xmm6
    00000186: 	movsd	(%rax,%rbp,8), %xmm0
    0000018b: 	movslq	%r12d, %r12
    0000018e: 	addl	%esi, %r11d
    00000191: 	movupd	(%rax,%r12,8), %xmm1
    00000197: 	movslq	%r11d, %r11
    0000019a: 	leal	0x3(%r8), %r10d
    0000019e: 	leal	-0x1(%rdx,%r8), %r12d
    000001a3: 	unpcklpd	%xmm6, %xmm0
    000001a7: 	movupd	(%r13), %xmm7
    000001ad: 	movslq	%r12d, %r12
    000001b0: 	addpd	%xmm0, %xmm1
    000001b4: 	movupd	(%rax,%r11,8), %xmm0
    000001ba: 	leal	(%rcx,%r10), %r11d
    000001be: 	movslq	%r11d, %r11
    000001c1: 	addpd	%xmm7, %xmm1
    000001c5: 	addpd	%xmm0, %xmm1
    000001c9: 	pxor	%xmm0, %xmm0
    000001cd: 	addpd	%xmm0, %xmm1
    000001d1: 	movsd	(%rax,%r11,8), %xmm0
    000001d7: 	leal	0x4(%rdx,%r8), %r11d
    000001dc: 	movslq	%r11d, %r11
    000001df: 	addsd	(%r13), %xmm0
    000001e5: 	addsd	(%rax,%r11,8), %xmm0
    000001eb: 	leal	(%rsi,%r10), %r11d
    000001ef: 	addl	%edx, %r10d
    000001f2: 	mulpd	%xmm2, %xmm1
    000001f6: 	movslq	%r11d, %r11
    000001f9: 	movsd	(%rax,%r12,8), %xmm2
    000001ff: 	movslq	%r10d, %r10
    00000202: 	addsd	(%rax,%r11,8), %xmm0
    00000208: 	leal	(%rcx,%r8), %r11d
    0000020c: 	addl	%esi, %r8d
    0000020f: 	movslq	%r11d, %r11
    00000212: 	movslq	%r8d, %r8
    00000215: 	addsd	(%rax,%r11,8), %xmm2
    0000021b: 	addsd	%xmm4, %xmm0
    0000021f: 	addsd	%xmm6, %xmm2
    00000223: 	addsd	(%rax,%r8,8), %xmm2
    00000229: 	movl	%r9d, %r8d
    0000022c: 	mulsd	%xmm3, %xmm0
    00000230: 	addsd	%xmm4, %xmm2
    00000234: 	mulsd	%xmm3, %xmm2
    00000238: 	movsd	%xmm2, (%rdi,%rbp,8)
    0000023d: 	movups	%xmm1, (%rdi,%rbx,8)
    00000241: 	movsd	%xmm0, (%rdi,%r10,8)
.Ltmp161:
    00000247: 	cmpl	-0x1c(%rsp), %r8d
    0000024c: 	jge	.Ltmp164 # Offset: 588
    00000252: 	movslq	%r8d, %rbx
    00000255: 	movslq	%esi, %r13
    00000258: 	movslq	%edx, %r12
    0000025b: 	movslq	%ecx, %r11
    0000025e: 	addq	%rbx, %r12
    00000261: 	leaq	0x1(%rbx,%r11), %r11
    00000266: 	movl	-0x2c(%rsp), %r10d
    0000026b: 	leaq	0x1(%rbx,%r13), %rbx
    00000270: 	movq	%rdi, %r13
    00000273: 	shlq	$0x3, %r11
    00000277: 	leaq	(,%r12,8), %r14
    0000027f: 	subq	%rax, %r13
    00000282: 	subl	%r8d, %r10d
    00000285: 	shlq	$0x3, %rbx
    00000289: 	leaq	(%rdi,%r14), %rbp
    0000028d: 	cmpq	$0x10, %r13
    00000291: 	seta	%r13b
    00000295: 	cmpl	$0x2, %r10d
    00000299: 	setne	-0x28(%rsp)
    0000029e: 	movzbl	-0x28(%rsp), %r15d
    000002a4: 	andl	%r15d, %r13d
    000002a7: 	leaq	(%rax,%r11), %r15
    000002ab: 	cmpq	%r15, %rbp
    000002ae: 	setne	-0x28(%rsp)
    000002b3: 	movzbl	-0x28(%rsp), %r15d
    000002b9: 	testb	%r13b, %r15b
    000002bc: 	je	.Ltmp165 # Offset: 700
    000002c2: 	leaq	(%rax,%rbx), %r13
    000002c6: 	cmpq	%r13, %rbp
    000002c9: 	je	.Ltmp165 # Offset: 713
    000002cf: 	leaq	-0x8(%rax,%r14), %r13
    000002d4: 	leaq	0x8(%rax,%r14), %r14
    000002d9: 	pxor	%xmm1, %xmm1
    000002dd: 	subl	$0x1, %r10d
    000002e1: 	movupd	(%r14), %xmm6
    000002e6: 	movupd	(%r13), %xmm0
    000002ec: 	leaq	-0x8(%rax,%r11), %r12
    000002f1: 	leaq	-0x8(%rax,%rbx), %r11
    000002f6: 	movl	%r10d, %ebx
    000002f9: 	addpd	%xmm6, %xmm0
    000002fd: 	movupd	(%r12), %xmm6
    00000303: 	shrl	%ebx
    00000305: 	addpd	%xmm6, %xmm0
    00000309: 	movupd	(%r11), %xmm6
    0000030e: 	addpd	%xmm6, %xmm0
    00000312: 	addpd	%xmm1, %xmm0
    00000316: 	mulpd	%xmm5, %xmm0
    0000031a: 	movups	%xmm0, (%rbp)
    0000031e: 	cmpl	$0x1, %ebx
    00000321: 	je	.Ltmp166 # Offset: 801
    00000323: 	movupd	0x10(%r13), %xmm2
    00000329: 	movupd	0x10(%r14), %xmm0
    0000032f: 	addpd	%xmm2, %xmm0
    00000333: 	movupd	0x10(%r12), %xmm2
    0000033a: 	addpd	%xmm2, %xmm0
    0000033e: 	movupd	0x10(%r11), %xmm2
    00000344: 	addpd	%xmm2, %xmm0
    00000348: 	addpd	%xmm1, %xmm0
    0000034c: 	mulpd	%xmm5, %xmm0
    00000350: 	movups	%xmm0, 0x10(%rbp)
.Ltmp166:
    00000354: 	movl	%r10d, %r11d
    00000357: 	andl	$-0x2, %r11d
    0000035b: 	addl	%r11d, %r8d
    0000035e: 	cmpl	%r10d, %r11d
    00000361: 	je	.Ltmp164 # Offset: 865
    00000363: 	leal	(%rcx,%r8), %r10d
    00000367: 	leal	0x1(%rdx,%r8), %ebx
    0000036c: 	leal	-0x1(%rdx,%r8), %r11d
    00000371: 	movslq	%r10d, %r10
    00000374: 	movslq	%ebx, %rbx
    00000377: 	movslq	%r11d, %r11
    0000037a: 	movsd	(%rax,%rbx,8), %xmm0
    0000037f: 	addsd	(%rax,%r11,8), %xmm0
    00000385: 	addsd	(%rax,%r10,8), %xmm0
    0000038b: 	leal	(%rdx,%r8), %r10d
    0000038f: 	addl	%esi, %r8d
    00000392: 	movslq	%r8d, %r8
    00000395: 	movslq	%r10d, %r10
    00000398: 	addsd	(%rax,%r8,8), %xmm0
    0000039e: 	addsd	%xmm4, %xmm0
    000003a2: 	mulsd	%xmm3, %xmm0
    000003a6: 	movsd	%xmm0, (%rdi,%r10,8)
.Ltmp164:
    000003ac: 	movl	-0x14(%rsp), %ebx
    000003b0: 	movl	-0x30(%rsp), %r14d
    000003b5: 	addl	%ebx, %ecx
    000003b7: 	addl	%ebx, %edx
    000003b9: 	addl	%ebx, %esi
    000003bb: 	cmpl	%r14d, -0x18(%rsp)
    000003c0: 	jne	.Ltmp167 # Offset: 960
.Ltmp160:
    000003c6: 	popq	%rbx
    000003c7: 	popq	%rbp
    000003c8: 	popq	%r12
    000003ca: 	popq	%r13
    000003cc: 	popq	%r14
    000003ce: 	popq	%r15
    000003d0: 	retq # Offset: 976
    000003d1: 	nopl	(%rax) # Size: 7
.Ltmp165:
    000003d8: 	leal	0x1(%r8), %r10d
    000003dc: 	leal	(%r10,%rdx), %r13d
    000003e0: 	movslq	%r13d, %r14
    000003e3: 	leal	-0x1(%rdx,%r8), %r13d
    000003e8: 	leaq	(%rax,%r14,8), %r15
    000003ec: 	movslq	%r13d, %r13
    000003ef: 	movsd	(%rax,%r13,8), %xmm0
    000003f5: 	addsd	(%r15), %xmm0
    000003fa: 	movq	%r15, -0x28(%rsp)
    000003ff: 	addsd	-0x8(%rax,%r11), %xmm0
    00000406: 	addsd	-0x8(%rax,%rbx), %xmm0
    0000040c: 	movl	-0x1c(%rsp), %r15d
    00000411: 	addsd	%xmm4, %xmm0
    00000415: 	mulsd	%xmm3, %xmm0
    00000419: 	movsd	%xmm0, (%rbp)
    0000041e: 	cmpl	%r15d, %r10d
    00000421: 	jge	.Ltmp164 # Offset: 1057
    00000423: 	leal	0x2(%r8), %r11d
    00000427: 	leal	(%r10,%rcx), %ebx
    0000042b: 	addl	%esi, %r10d
    0000042e: 	movsd	(%rax,%r12,8), %xmm0
    00000434: 	leal	(%r11,%rdx), %ebp
    00000438: 	movslq	%ebx, %rbx
    0000043b: 	movslq	%r10d, %r10
    0000043e: 	movslq	%ebp, %r13
    00000441: 	leaq	(%rax,%r13,8), %rbp
    00000445: 	addsd	(%rbp), %xmm0
    0000044a: 	addsd	(%rax,%rbx,8), %xmm0
    0000044f: 	movq	%rbp, %r12
    00000452: 	addsd	(%rax,%r10,8), %xmm0
    00000458: 	addsd	%xmm4, %xmm0
    0000045c: 	mulsd	%xmm3, %xmm0
    00000460: 	movsd	%xmm0, (%rdi,%r14,8)
    00000466: 	cmpl	%r15d, %r11d
    00000469: 	jge	.Ltmp164 # Offset: 1129
    0000046f: 	leal	0x3(%r8), %r10d
    00000473: 	leal	(%r11,%rcx), %ebp
    00000477: 	movq	-0x28(%rsp), %r14
    0000047c: 	addl	%esi, %r11d
    0000047f: 	leal	(%r10,%rdx), %ebx
    00000483: 	movslq	%ebp, %rbp
    00000486: 	movslq	%r11d, %r11
    00000489: 	movslq	%ebx, %rbx
    0000048c: 	movsd	(%rax,%rbx,8), %xmm0
    00000491: 	addsd	(%r14), %xmm0
    00000496: 	addsd	(%rax,%rbp,8), %xmm0
    0000049b: 	addsd	(%rax,%r11,8), %xmm0
    000004a1: 	addsd	%xmm4, %xmm0
    000004a5: 	mulsd	%xmm3, %xmm0
    000004a9: 	movsd	%xmm0, (%rdi,%r13,8)
    000004af: 	cmpl	%r15d, %r10d
    000004b2: 	jge	.Ltmp164 # Offset: 1202
    000004b8: 	leal	0x4(%rdx,%r8), %r8d
    000004bd: 	leal	(%r10,%rcx), %r11d
    000004c1: 	movslq	%r8d, %r8
    000004c4: 	movslq	%r11d, %r11
    000004c7: 	movsd	(%rax,%r8,8), %xmm0
    000004cd: 	leal	(%r10,%rsi), %r8d
    000004d1: 	addsd	(%r12), %xmm0
    000004d7: 	movslq	%r8d, %r8
    000004da: 	addsd	(%rax,%r11,8), %xmm0
    000004e0: 	addsd	(%rax,%r8,8), %xmm0
    000004e6: 	addsd	%xmm4, %xmm0
    000004ea: 	mulsd	%xmm3, %xmm0
    000004ee: 	movsd	%xmm0, (%rdi,%rbx,8)
    000004f3: 	jmp	.Ltmp164 # Offset: 1267
.Ltmp162:
    000004f8: 	movl	$0x1, %r8d
    000004fe: 	movapd	%xmm5, %xmm2
    00000502: 	jmp	.Ltmp168 # Offset: 1282
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled2IddEclEPKdPdiiii.isra.0/1(*2)"

Binary Function "_ZN17jacobi2D_unrolledIddEclEPKdPdiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN17jacobi2D_unrolledIddEclEPKdPdiiii.isra.0/1
                _ZN17jacobi2D_unrolledIddEclEPKdPdiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 55
  State       : disassembled
  Address     : 0xced0
  Size        : 0x4c4
  MaxSize     : 0x4d0
  Offset      : 0xced0
  Section     : .text
  Orc Section : .local.text._ZN17jacobi2D_unrolledIddEclEPKdPdiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %rax
    00000005: 	leal	-0x1(%rdx), %edi
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, -0x2c(%rsp)
    00000014: 	movl	%r8d, -0x14(%rsp)
    00000019: 	movl	%edi, -0x18(%rsp)
    0000001d: 	cmpl	$0x1, %edi
    00000020: 	jle	.Ltmp169 # Offset: 32
    00000026: 	movl	%ecx, %edi
    00000028: 	leal	-0x1(%rcx), %ecx
    0000002b: 	movl	$0x1, -0x30(%rsp)
    00000033: 	leal	(%r8,%r8), %edx
    00000037: 	subl	$0x6, %edi
    0000003a: 	movl	%ecx, -0x1c(%rsp)
    0000003e: 	movl	%r8d, %ecx
    00000041: 	movq	%rsi, %r9
    00000044: 	movl	%edi, %r15d
    00000047: 	movl	%edi, -0x10(%rsp)
    0000004b: 	andl	$-0x4, %edi
    0000004e: 	pxor	%xmm2, %xmm2
    00000052: 	shrl	$0x2, %r15d
    00000056: 	movl	%edi, %r8d
    00000059: 	leal	0x1(%rdi), %edi
    0000005c: 	movapd	DATAat0x49400(%rip), %xmm4
    00000064: 	movl	%r15d, -0x20(%rsp)
    00000069: 	movsd	DATAat0x49400(%rip), %xmm5
    00000071: 	addl	$0x5, %r8d
    00000075: 	pxor	%xmm6, %xmm6
    00000079: 	movl	%edi, -0xc(%rsp)
    0000007d: 	xorl	%edi, %edi
    0000007f: 	nop # Size: 1
.Ltmp176:
    00000080: 	addl	$0x1, -0x30(%rsp)
    00000085: 	cmpl	$0x5, -0x2c(%rsp)
    0000008a: 	movl	$0x1, %esi
    0000008f: 	jle	.Ltmp170 # Offset: 143
    00000095: 	cmpl	$0x3, -0x10(%rsp)
    0000009a: 	jbe	.Ltmp171 # Offset: 154
    000000a0: 	movslq	%edi, %rsi
    000000a3: 	movslq	%edx, %r10
    000000a6: 	movl	-0x20(%rsp), %r15d
    000000ab: 	movapd	%xmm4, %xmm3
    000000af: 	leaq	0x8(%rax,%rsi,8), %rbp
    000000b4: 	movslq	%ecx, %rsi
    000000b7: 	leaq	0x8(%rax,%r10,8), %r11
    000000bc: 	xorl	%r10d, %r10d
    000000bf: 	shlq	$0x3, %rsi
    000000c3: 	leaq	(%rax,%rsi), %rbx
    000000c7: 	leaq	0x8(%r9,%rsi), %r14
    000000cc: 	leaq	0x20(%rax,%rsi), %r13
    000000d1: 	leaq	0x18(%r9,%rsi), %r12
    000000d6: 	xorl	%esi, %esi
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp172:
    000000e0: 	movupd	0x10(%rbx,%rsi), %xmm7
    000000e6: 	movupd	0x10(%rbp,%rsi), %xmm0
    000000ec: 	addl	$0x1, %r10d
    000000f0: 	movupd	(%rbx,%rsi), %xmm1
    000000f5: 	addpd	%xmm7, %xmm0
    000000f9: 	movupd	(%r13,%rsi), %xmm7
    00000100: 	addpd	%xmm7, %xmm0
    00000104: 	movupd	0x10(%r11,%rsi), %xmm7
    0000010b: 	addpd	%xmm7, %xmm0
    0000010f: 	movupd	(%rbp,%rsi), %xmm7
    00000115: 	addpd	%xmm7, %xmm1
    00000119: 	movupd	0x10(%rbx,%rsi), %xmm7
    0000011f: 	addpd	%xmm2, %xmm0
    00000123: 	addpd	%xmm7, %xmm1
    00000127: 	movupd	(%r11,%rsi), %xmm7
    0000012d: 	mulpd	%xmm4, %xmm0
    00000131: 	addpd	%xmm7, %xmm1
    00000135: 	addpd	%xmm2, %xmm1
    00000139: 	mulpd	%xmm4, %xmm1
    0000013d: 	movups	%xmm1, (%r14,%rsi)
    00000142: 	movups	%xmm0, (%r12,%rsi)
    00000147: 	addq	$0x20, %rsi
    0000014b: 	cmpl	%r15d, %r10d
    0000014e: 	jb	.Ltmp172 # Offset: 334
    00000150: 	movl	%r15d, -0x20(%rsp)
    00000155: 	movl	-0xc(%rsp), %esi
.Ltmp177:
    00000159: 	leal	(%rdi,%rsi), %r10d
    0000015d: 	leal	0x2(%rdx,%rsi), %ebx
    00000161: 	movslq	%r10d, %r10
    00000164: 	movslq	%ebx, %rbx
    00000167: 	leaq	(%rax,%r10,8), %r13
    0000016b: 	leal	-0x1(%rcx,%rsi), %r10d
    00000170: 	movsd	(%rax,%rbx,8), %xmm0
    00000175: 	movslq	%r10d, %r10
    00000178: 	movupd	0x10(%r13), %xmm1
    0000017e: 	leaq	(%rax,%r10,8), %r12
    00000182: 	leal	0x1(%rsi), %r10d
    00000186: 	movupd	0x10(%r12), %xmm7
    0000018d: 	leal	(%rcx,%r10), %r11d
    00000191: 	movupd	(%r12), %xmm8
    00000197: 	addl	%edx, %r10d
    0000019a: 	movslq	%r11d, %r11
    0000019d: 	movslq	%r10d, %r10
    000001a0: 	leaq	(%rax,%r11,8), %rbp
    000001a4: 	addpd	%xmm7, %xmm1
    000001a8: 	movupd	0x10(%rbp), %xmm7
    000001ad: 	leal	0x3(%rdx,%rsi), %r11d
    000001b2: 	movslq	%r11d, %r11
    000001b5: 	addpd	%xmm7, %xmm1
    000001b9: 	movupd	(%r13), %xmm7
    000001bf: 	movhpd	(%rax,%r11,8), %xmm0
    000001c5: 	leal	(%rcx,%rsi), %r11d
    000001c9: 	addl	%edx, %esi
    000001cb: 	movslq	%r11d, %r11
    000001ce: 	addpd	%xmm8, %xmm7
    000001d3: 	movupd	(%rbp), %xmm8
    000001d9: 	movslq	%esi, %rsi
    000001dc: 	leaq	(%r9,%r11,8), %r11
    000001e0: 	addpd	%xmm1, %xmm0
    000001e4: 	movsd	(%rax,%rsi,8), %xmm1
    000001e9: 	movl	%r8d, %esi
    000001ec: 	addpd	%xmm8, %xmm7
    000001f1: 	movhpd	(%rax,%r10,8), %xmm1
    000001f7: 	addpd	%xmm2, %xmm0
    000001fb: 	addpd	%xmm7, %xmm1
    000001ff: 	mulpd	%xmm3, %xmm0
    00000203: 	addpd	%xmm2, %xmm1
    00000207: 	mulpd	%xmm3, %xmm1
    0000020b: 	movups	%xmm0, 0x10(%r11)
    00000210: 	movups	%xmm1, (%r11)
.Ltmp170:
    00000214: 	cmpl	-0x1c(%rsp), %esi
    00000218: 	jge	.Ltmp173 # Offset: 536
    0000021e: 	movslq	%esi, %rbx
    00000221: 	movslq	%edx, %r13
    00000224: 	movslq	%ecx, %r12
    00000227: 	movslq	%edi, %r11
    0000022a: 	addq	%rbx, %r12
    0000022d: 	leaq	0x1(%rbx,%r11), %r11
    00000232: 	movl	-0x2c(%rsp), %r10d
    00000237: 	leaq	0x1(%rbx,%r13), %rbx
    0000023c: 	movq	%r9, %r13
    0000023f: 	shlq	$0x3, %r11
    00000243: 	leaq	(,%r12,8), %r14
    0000024b: 	subq	%rax, %r13
    0000024e: 	subl	%esi, %r10d
    00000251: 	shlq	$0x3, %rbx
    00000255: 	leaq	(%r9,%r14), %rbp
    00000259: 	cmpq	$0x10, %r13
    0000025d: 	seta	%r13b
    00000261: 	cmpl	$0x2, %r10d
    00000265: 	setne	-0x28(%rsp)
    0000026a: 	movzbl	-0x28(%rsp), %r15d
    00000270: 	andl	%r15d, %r13d
    00000273: 	leaq	(%rax,%r11), %r15
    00000277: 	cmpq	%r15, %rbp
    0000027a: 	setne	-0x28(%rsp)
    0000027f: 	movzbl	-0x28(%rsp), %r15d
    00000285: 	testb	%r13b, %r15b
    00000288: 	je	.Ltmp174 # Offset: 648
    0000028e: 	leaq	(%rax,%rbx), %r13
    00000292: 	cmpq	%r13, %rbp
    00000295: 	je	.Ltmp174 # Offset: 661
    0000029b: 	leaq	-0x8(%rax,%r14), %r13
    000002a0: 	leaq	0x8(%rax,%r14), %r14
    000002a5: 	subl	$0x1, %r10d
    000002a9: 	movupd	(%r14), %xmm3
    000002ae: 	movupd	(%r13), %xmm0
    000002b4: 	leaq	-0x8(%rax,%r11), %r12
    000002b9: 	leaq	-0x8(%rax,%rbx), %r11
    000002be: 	movl	%r10d, %ebx
    000002c1: 	addpd	%xmm3, %xmm0
    000002c5: 	movupd	(%r12), %xmm3
    000002cb: 	shrl	%ebx
    000002cd: 	addpd	%xmm3, %xmm0
    000002d1: 	movupd	(%r11), %xmm3
    000002d6: 	addpd	%xmm3, %xmm0
    000002da: 	addpd	%xmm2, %xmm0
    000002de: 	mulpd	%xmm4, %xmm0
    000002e2: 	movups	%xmm0, (%rbp)
    000002e6: 	cmpl	$0x1, %ebx
    000002e9: 	je	.Ltmp175 # Offset: 745
    000002eb: 	movupd	0x10(%r13), %xmm1
    000002f1: 	movupd	0x10(%r14), %xmm0
    000002f7: 	addpd	%xmm1, %xmm0
    000002fb: 	movupd	0x10(%r12), %xmm1
    00000302: 	addpd	%xmm1, %xmm0
    00000306: 	movupd	0x10(%r11), %xmm1
    0000030c: 	addpd	%xmm1, %xmm0
    00000310: 	addpd	%xmm2, %xmm0
    00000314: 	mulpd	%xmm4, %xmm0
    00000318: 	movups	%xmm0, 0x10(%rbp)
.Ltmp175:
    0000031c: 	movl	%r10d, %r11d
    0000031f: 	andl	$-0x2, %r11d
    00000323: 	addl	%r11d, %esi
    00000326: 	cmpl	%r10d, %r11d
    00000329: 	je	.Ltmp173 # Offset: 809
    0000032b: 	leal	(%rdi,%rsi), %r10d
    0000032f: 	leal	0x1(%rcx,%rsi), %ebx
    00000333: 	leal	-0x1(%rcx,%rsi), %r11d
    00000338: 	movslq	%r10d, %r10
    0000033b: 	movslq	%ebx, %rbx
    0000033e: 	movslq	%r11d, %r11
    00000341: 	movsd	(%rax,%rbx,8), %xmm0
    00000346: 	addsd	(%rax,%r11,8), %xmm0
    0000034c: 	addsd	(%rax,%r10,8), %xmm0
    00000352: 	leal	(%rcx,%rsi), %r10d
    00000356: 	addl	%edx, %esi
    00000358: 	movslq	%esi, %rsi
    0000035b: 	movslq	%r10d, %r10
    0000035e: 	addsd	(%rax,%rsi,8), %xmm0
    00000363: 	addsd	%xmm6, %xmm0
    00000367: 	mulsd	%xmm5, %xmm0
    0000036b: 	movsd	%xmm0, (%r9,%r10,8)
.Ltmp173:
    00000371: 	movl	-0x14(%rsp), %ebx
    00000375: 	movl	-0x30(%rsp), %esi
    00000379: 	addl	%ebx, %edi
    0000037b: 	addl	%ebx, %ecx
    0000037d: 	addl	%ebx, %edx
    0000037f: 	cmpl	%esi, -0x18(%rsp)
    00000383: 	jne	.Ltmp176 # Offset: 899
.Ltmp169:
    00000389: 	popq	%rbx
    0000038a: 	popq	%rbp
    0000038b: 	popq	%r12
    0000038d: 	popq	%r13
    0000038f: 	popq	%r14
    00000391: 	popq	%r15
    00000393: 	retq # Offset: 915
    00000394: 	nopl	(%rax) # Size: 4
.Ltmp174:
    00000398: 	leal	0x1(%rsi), %r10d
    0000039c: 	leal	(%r10,%rcx), %r13d
    000003a0: 	movslq	%r13d, %r14
    000003a3: 	leal	-0x1(%rcx,%rsi), %r13d
    000003a8: 	leaq	(%rax,%r14,8), %r15
    000003ac: 	movslq	%r13d, %r13
    000003af: 	movsd	(%rax,%r13,8), %xmm0
    000003b5: 	addsd	(%r15), %xmm0
    000003ba: 	movq	%r15, -0x28(%rsp)
    000003bf: 	addsd	-0x8(%rax,%r11), %xmm0
    000003c6: 	addsd	-0x8(%rax,%rbx), %xmm0
    000003cc: 	movl	-0x1c(%rsp), %r15d
    000003d1: 	addsd	%xmm6, %xmm0
    000003d5: 	mulsd	%xmm5, %xmm0
    000003d9: 	movsd	%xmm0, (%rbp)
    000003de: 	cmpl	%r15d, %r10d
    000003e1: 	jge	.Ltmp173 # Offset: 993
    000003e3: 	leal	0x2(%rsi), %r11d
    000003e7: 	leal	(%r10,%rdi), %ebx
    000003eb: 	addl	%edx, %r10d
    000003ee: 	movsd	(%rax,%r12,8), %xmm0
    000003f4: 	leal	(%r11,%rcx), %ebp
    000003f8: 	movslq	%ebx, %rbx
    000003fb: 	movslq	%r10d, %r10
    000003fe: 	movslq	%ebp, %r13
    00000401: 	leaq	(%rax,%r13,8), %rbp
    00000405: 	addsd	(%rbp), %xmm0
    0000040a: 	addsd	(%rax,%rbx,8), %xmm0
    0000040f: 	movq	%rbp, %r12
    00000412: 	addsd	(%rax,%r10,8), %xmm0
    00000418: 	addsd	%xmm6, %xmm0
    0000041c: 	mulsd	%xmm5, %xmm0
    00000420: 	movsd	%xmm0, (%r9,%r14,8)
    00000426: 	cmpl	%r15d, %r11d
    00000429: 	jge	.Ltmp173 # Offset: 1065
    0000042f: 	leal	0x3(%rsi), %r10d
    00000433: 	leal	(%r11,%rdi), %ebp
    00000437: 	movq	-0x28(%rsp), %r14
    0000043c: 	addl	%edx, %r11d
    0000043f: 	leal	(%r10,%rcx), %ebx
    00000443: 	movslq	%ebp, %rbp
    00000446: 	movslq	%r11d, %r11
    00000449: 	movslq	%ebx, %rbx
    0000044c: 	movsd	(%rax,%rbx,8), %xmm0
    00000451: 	addsd	(%r14), %xmm0
    00000456: 	addsd	(%rax,%rbp,8), %xmm0
    0000045b: 	addsd	(%rax,%r11,8), %xmm0
    00000461: 	addsd	%xmm6, %xmm0
    00000465: 	mulsd	%xmm5, %xmm0
    00000469: 	movsd	%xmm0, (%r9,%r13,8)
    0000046f: 	cmpl	%r15d, %r10d
    00000472: 	jge	.Ltmp173 # Offset: 1138
    00000478: 	leal	0x4(%rcx,%rsi), %esi
    0000047c: 	leal	(%r10,%rdi), %r11d
    00000480: 	movslq	%esi, %rsi
    00000483: 	movslq	%r11d, %r11
    00000486: 	movsd	(%rax,%rsi,8), %xmm0
    0000048b: 	leal	(%r10,%rdx), %esi
    0000048f: 	addsd	(%r12), %xmm0
    00000495: 	movslq	%esi, %rsi
    00000498: 	addsd	(%rax,%r11,8), %xmm0
    0000049e: 	addsd	(%rax,%rsi,8), %xmm0
    000004a3: 	addsd	%xmm6, %xmm0
    000004a7: 	mulsd	%xmm5, %xmm0
    000004ab: 	movsd	%xmm0, (%r9,%rbx,8)
    000004b1: 	jmp	.Ltmp173 # Offset: 1201
.Ltmp171:
    000004b6: 	movl	$0x1, %esi
    000004bb: 	movapd	%xmm4, %xmm3
    000004bf: 	jmp	.Ltmp177 # Offset: 1215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN17jacobi2D_unrolledIddEclEPKdPdiiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled2IffEclEPfS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled2IffEclEPfS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled2IffEclEPfS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 56
  State       : disassembled
  Address     : 0xd3a0
  Size        : 0x882
  MaxSize     : 0x890
  Offset      : 0xd3a0
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled2IffEclEPfS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	leal	-0x1(%rdx), %esi
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, -0x58(%rsp)
    00000014: 	movl	%r8d, -0x4c(%rsp)
    00000019: 	movl	%esi, -0x50(%rsp)
    0000001d: 	cmpl	$0x1, %esi
    00000020: 	jle	.Ltmp178 # Offset: 32
    00000026: 	leal	-0x1(%rcx), %esi
    00000029: 	subl	$0x6, %ecx
    0000002c: 	movq	%rdi, %rax
    0000002f: 	movaps	DATAat0x49420(%rip), %xmm2
    00000036: 	movl	%ecx, -0x44(%rsp)
    0000003a: 	shrl	$0x2, %ecx
    0000003d: 	movaps	DATAat0x49430(%rip), %xmm1
    00000044: 	movl	%r8d, %r15d
    00000047: 	leal	0x1(%rcx), %edi
    0000004a: 	movl	%ecx, %ebx
    0000004c: 	movl	%ecx, -0x30(%rsp)
    00000050: 	movl	%edi, %edx
    00000052: 	movl	%edi, -0x40(%rsp)
    00000056: 	andl	$-0x2, %edi
    00000059: 	shrl	%edx
    0000005b: 	leal	0x1(,%rdi,4), %r14d
    00000063: 	movl	%edi, -0x3c(%rsp)
    00000067: 	subl	$0x1, %edx
    0000006a: 	movl	$0x1, -0x6c(%rsp)
    00000072: 	addq	$0x1, %rdx
    00000076: 	movl	%esi, -0x54(%rsp)
    0000007a: 	leal	(%r8,%r8), %esi
    0000007e: 	shlq	$0x5, %rdx
    00000082: 	movl	%r14d, -0xc(%rsp)
    00000087: 	movq	%rdx, -0x38(%rsp)
    0000008c: 	movl	%ecx, %edx
    0000008e: 	leaq	(,%rdx,4), %rcx
    00000096: 	movl	%edi, %edx
    00000098: 	shlq	$0x2, %rdx
    0000009c: 	movq	%rcx, -0x18(%rsp)
    000000a1: 	leal	0x5(,%rbx,4), %ecx
    000000a8: 	subl	%edi, %ebx
    000000aa: 	movl	%ebx, -0x2c(%rsp)
    000000ae: 	leal	(%r14,%rbx,4), %ebx
    000000b2: 	movq	%r13, %r14
    000000b5: 	movq	%rdx, -0x28(%rsp)
    000000ba: 	addq	$0x4, %rdx
    000000be: 	movq	%rdx, -0x20(%rsp)
    000000c3: 	movl	%ebx, -0x10(%rsp)
    000000c7: 	movl	%ecx, -0x48(%rsp)
    000000cb: 	xorl	%ecx, %ecx
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp189:
    000000d0: 	addl	$0x1, -0x6c(%rsp)
    000000d5: 	cmpl	$0x5, -0x58(%rsp)
    000000da: 	movl	$0x1, %edx
    000000df: 	jle	.Ltmp179 # Offset: 223
    000000e5: 	movslq	%r15d, %r11
    000000e8: 	movslq	%ecx, %rbx
    000000eb: 	movslq	%esi, %r13
    000000ee: 	leaq	0x4(,%r11,4), %rdi
    000000f6: 	leaq	0x14(,%rbx,4), %rbp
    000000fe: 	movq	%rbx, -0x60(%rsp)
    00000103: 	leaq	0x8(%r14,%rdi), %r9
    00000108: 	leaq	0xc(%rax,%rdi), %r8
    0000010d: 	movq	%r9, %r10
    00000110: 	leaq	(%r14,%rdi), %rdx
    00000114: 	leaq	0x14(,%r13,4), %r12
    0000011c: 	subq	%r8, %r10
    0000011f: 	addq	$0x4, %r10
    00000123: 	cmpq	$0x18, %r10
    00000127: 	movq	%rdx, %r10
    0000012a: 	seta	%bl
    0000012d: 	subq	%r8, %r10
    00000130: 	addq	$0x4, %r10
    00000134: 	cmpq	$0x18, %r10
    00000138: 	seta	%r10b
    0000013c: 	andl	%ebx, %r10d
    0000013f: 	cmpl	$0x3, -0x44(%rsp)
    00000144: 	seta	%bl
    00000147: 	andl	%ebx, %r10d
    0000014a: 	leaq	(%rax,%rbp), %rbx
    0000014e: 	movb	%r10b, -0x68(%rsp)
    00000153: 	movq	%rdx, %r10
    00000156: 	subq	%rbx, %r10
    00000159: 	leaq	0xc(%r10), %rbx
    0000015d: 	cmpq	$0x18, %rbx
    00000161: 	seta	%bl
    00000164: 	testb	%bl, -0x68(%rsp)
    00000168: 	je	.Ltmp180 # Offset: 360
    0000016e: 	leaq	(%rax,%r12), %rbx
    00000172: 	movq	%rdx, %r10
    00000175: 	subq	%rbx, %r10
    00000178: 	addq	$0xc, %r10
    0000017c: 	cmpq	$0x18, %r10
    00000180: 	jbe	.Ltmp180 # Offset: 384
    00000186: 	leaq	-0x10(%rax,%rbp), %r10
    0000018b: 	leaq	-0x10(%rax,%r12), %rbp
    00000190: 	movq	-0x38(%rsp), %r12
    00000195: 	pxor	%xmm4, %xmm4
    00000199: 	leaq	-0x4(%rax,%rdi), %rbx
    0000019e: 	xorl	%edi, %edi
.Ltmp181:
    000001a0: 	movups	0x10(%rdx), %xmm7
    000001a4: 	movups	(%rdx), %xmm5
    000001a7: 	addq	$0x20, %rdx
    000001ab: 	movups	0x10(%rbx,%rdi), %xmm3
    000001b0: 	movups	(%rbx,%rdi), %xmm0
    000001b4: 	shufps	$0xee, %xmm7, %xmm5
    000001b8: 	movups	(%rbx,%rdi), %xmm7
    000001bc: 	movups	-0x20(%rdx), %xmm6
    000001c0: 	movhps	0x10(%rbx,%rdi), %xmm0
    000001c5: 	movups	0x10(%r10,%rdi), %xmm10
    000001cb: 	shufps	$0xee, %xmm3, %xmm7
    000001cf: 	movups	(%r10,%rdi), %xmm3
    000001d4: 	movhps	-0x10(%rdx), %xmm6
    000001d8: 	movhps	0x10(%r10,%rdi), %xmm3
    000001de: 	addps	%xmm0, %xmm3
    000001e1: 	movups	(%rbp,%rdi), %xmm0
    000001e6: 	movhps	0x10(%rbp,%rdi), %xmm0
    000001eb: 	addps	%xmm7, %xmm3
    000001ee: 	addps	%xmm0, %xmm3
    000001f1: 	movq	(%r8,%rdi), %xmm0
    000001f7: 	addps	%xmm4, %xmm3
    000001fa: 	mulps	%xmm2, %xmm3
    000001fd: 	subps	%xmm6, %xmm3
    00000200: 	mulps	%xmm1, %xmm3
    00000203: 	addps	%xmm6, %xmm3
    00000206: 	movq	0x10(%r8,%rdi), %xmm6
    0000020d: 	movlhps	%xmm6, %xmm0
    00000210: 	movups	(%r10,%rdi), %xmm6
    00000215: 	shufps	$0xee, %xmm10, %xmm6
    0000021a: 	addps	%xmm7, %xmm6
    0000021d: 	movups	0x10(%rbp,%rdi), %xmm7
    00000222: 	addps	%xmm6, %xmm0
    00000225: 	movups	(%rbp,%rdi), %xmm6
    0000022a: 	movq	%xmm3, -0x20(%rdx)
    0000022f: 	movhps	%xmm3, -0x10(%rdx)
    00000233: 	shufps	$0xee, %xmm7, %xmm6
    00000237: 	addps	%xmm6, %xmm0
    0000023a: 	addps	%xmm4, %xmm0
    0000023d: 	mulps	%xmm2, %xmm0
    00000240: 	subps	%xmm5, %xmm0
    00000243: 	mulps	%xmm1, %xmm0
    00000246: 	addps	%xmm5, %xmm0
    00000249: 	movq	%xmm0, (%r9,%rdi)
    0000024f: 	movhps	%xmm0, 0x10(%r9,%rdi)
    00000255: 	addq	$0x20, %rdi
    00000259: 	cmpq	%rdi, %r12
    0000025c: 	jne	.Ltmp181 # Offset: 604
    00000262: 	movl	-0x3c(%rsp), %ebx
    00000266: 	cmpl	%ebx, -0x40(%rsp)
    0000026a: 	je	.Ltmp182 # Offset: 618
    00000270: 	cmpl	%ebx, -0x30(%rsp)
    00000274: 	je	.Ltmp183 # Offset: 628
    0000027a: 	movq	-0x28(%rsp), %rbx
    0000027f: 	movq	-0x60(%rsp), %rdi
    00000284: 	xorps	%xmm6, %xmm6
    00000287: 	movq	DATAat0x49420(%rip), %xmm4
    0000028f: 	movq	DATAat0x49430(%rip), %xmm5
    00000297: 	leaq	0x1(%r11,%rbx), %rdx
    0000029c: 	leaq	0x1(%rdi,%rbx), %rdi
    000002a1: 	addq	-0x20(%rsp), %r11
    000002a6: 	shlq	$0x2, %rdx
    000002aa: 	leaq	(%rax,%rdi,4), %r10
    000002ae: 	leaq	0x1(%r13,%rbx), %rdi
    000002b3: 	leaq	(%r14,%rdx), %r8
    000002b7: 	leaq	-0x4(%rax,%rdx), %r9
    000002bc: 	leaq	(%rax,%rdi,4), %rbx
    000002c0: 	leaq	0x8(%r14,%rdx), %rbp
    000002c5: 	xorl	%edi, %edi
    000002c7: 	xorl	%edx, %edx
    000002c9: 	leaq	(%rax,%r11,4), %r11
.Ltmp184:
    000002cd: 	movq	0x8(%r10,%rdx), %xmm0
    000002d4: 	movq	0x8(%r9,%rdx), %xmm8
    000002db: 	addl	$0x1, %edi
    000002de: 	movq	0x8(%r8,%rdx), %xmm9
    000002e5: 	movq	(%r8,%rdx), %xmm7
    000002eb: 	movaps	%xmm0, %xmm3
    000002ee: 	movq	(%r11,%rdx), %xmm0
    000002f4: 	addps	%xmm8, %xmm3
    000002f8: 	addps	%xmm0, %xmm3
    000002fb: 	movq	0x8(%rbx,%rdx), %xmm0
    00000301: 	addps	%xmm0, %xmm3
    00000304: 	movq	(%r10,%rdx), %xmm0
    0000030a: 	addps	%xmm6, %xmm3
    0000030d: 	mulps	%xmm4, %xmm3
    00000310: 	subps	%xmm9, %xmm3
    00000314: 	mulps	%xmm5, %xmm3
    00000317: 	addps	%xmm9, %xmm3
    0000031b: 	movq	(%r9,%rdx), %xmm9
    00000321: 	addps	%xmm9, %xmm0
    00000325: 	addps	%xmm8, %xmm0
    00000329: 	movq	(%rbx,%rdx), %xmm8
    0000032f: 	addps	%xmm8, %xmm0
    00000333: 	addps	%xmm6, %xmm0
    00000336: 	mulps	%xmm4, %xmm0
    00000339: 	subps	%xmm7, %xmm0
    0000033c: 	mulps	%xmm5, %xmm0
    0000033f: 	addps	%xmm7, %xmm0
    00000342: 	movlps	%xmm0, (%r8,%rdx)
    00000347: 	movlps	%xmm3, (%rbp,%rdx)
    0000034c: 	addq	$0x10, %rdx
    00000350: 	cmpl	-0x2c(%rsp), %edi
    00000354: 	jb	.Ltmp184 # Offset: 852
    0000035a: 	movl	-0x10(%rsp), %edx
.Ltmp192:
    0000035e: 	leal	0x2(%rdx), %r8d
    00000362: 	leal	0x3(%rdx), %r9d
    00000366: 	leal	(%r15,%rdx), %edi
    0000036a: 	leal	(%rcx,%r8), %ebx
    0000036e: 	addl	%esi, %r8d
    00000371: 	movslq	%edi, %rdi
    00000374: 	leal	(%rcx,%r9), %ebp
    00000378: 	movslq	%ebx, %rbx
    0000037b: 	addl	%esi, %r9d
    0000037e: 	leaq	(%r14,%rdi,4), %r12
    00000382: 	movslq	%ebp, %rbp
    00000385: 	leal	0x1(%rdx), %edi
    00000388: 	movss	(%rax,%rbx,4), %xmm3
    0000038d: 	movss	(%rax,%rbp,4), %xmm0
    00000392: 	leal	(%rcx,%rdx), %r10d
    00000396: 	leal	(%rcx,%rdi), %r11d
    0000039a: 	movslq	%r8d, %r8
    0000039d: 	movslq	%r10d, %r10
    000003a0: 	movslq	%r11d, %r11
    000003a3: 	movslq	%r9d, %r9
    000003a6: 	movups	(%r12), %xmm7
    000003ab: 	movss	(%rax,%r11,4), %xmm4
    000003b1: 	unpcklps	%xmm0, %xmm3
    000003b4: 	movss	(%rax,%r10,4), %xmm0
    000003ba: 	leal	-0x1(%r15,%rdx), %r10d
    000003bf: 	movslq	%r10d, %r10
    000003c2: 	addl	%esi, %edx
    000003c4: 	unpcklps	%xmm4, %xmm0
    000003c7: 	movss	(%rax,%r8,4), %xmm4
    000003cd: 	movslq	%edx, %rdx
    000003d0: 	movlhps	%xmm3, %xmm0
    000003d3: 	movups	(%rax,%r10,4), %xmm3
    000003d8: 	leal	(%r15,%rdi), %r10d
    000003dc: 	addl	%esi, %edi
    000003de: 	movslq	%r10d, %r10
    000003e1: 	movslq	%edi, %rdi
    000003e4: 	addps	%xmm3, %xmm0
    000003e7: 	movups	(%rax,%r10,4), %xmm3
    000003ec: 	movss	(%rax,%rdi,4), %xmm5
    000003f1: 	addps	%xmm3, %xmm0
    000003f4: 	movss	(%rax,%r9,4), %xmm3
    000003fa: 	unpcklps	%xmm3, %xmm4
    000003fd: 	movss	(%rax,%rdx,4), %xmm3
    00000402: 	unpcklps	%xmm5, %xmm3
    00000405: 	movlhps	%xmm4, %xmm3
    00000408: 	addps	%xmm3, %xmm0
    0000040b: 	pxor	%xmm3, %xmm3
    0000040f: 	addps	%xmm3, %xmm0
    00000412: 	mulps	%xmm2, %xmm0
    00000415: 	subps	%xmm7, %xmm0
    00000418: 	mulps	%xmm1, %xmm0
    0000041b: 	addps	%xmm7, %xmm0
    0000041e: 	movups	%xmm0, (%r12)
.Ltmp182:
    00000423: 	movl	-0x48(%rsp), %edx
.Ltmp179:
    00000427: 	cmpl	-0x54(%rsp), %edx
    0000042b: 	jge	.Ltmp185 # Offset: 1067
    00000431: 	movslq	%edx, %r11
    00000434: 	movslq	%r15d, %rdi
    00000437: 	movl	-0x58(%rsp), %r8d
    0000043c: 	movslq	%esi, %r9
    0000043f: 	movq	%r14, %r13
    00000442: 	leaq	(%rdi,%r11), %r12
    00000446: 	addq	%r11, %r9
    00000449: 	movslq	%ecx, %rdi
    0000044c: 	subq	%rax, %r13
    0000044f: 	addq	%r11, %rdi
    00000452: 	subl	%edx, %r8d
    00000455: 	leaq	0x4(,%r9,4), %r11
    0000045d: 	cmpq	$0x10, %r13
    00000461: 	leaq	(,%r12,4), %rbx
    00000469: 	movq	%rdi, -0x68(%rsp)
    0000046e: 	movq	%r11, -0x60(%rsp)
    00000473: 	seta	%r11b
    00000477: 	cmpl	$0x2, %r8d
    0000047b: 	leaq	(%r14,%rbx), %r10
    0000047f: 	setne	%r13b
    00000483: 	leaq	0x4(,%rdi,4), %rbp
    0000048b: 	movq	%r10, %rdi
    0000048e: 	andl	%r13d, %r11d
    00000491: 	leaq	(%rax,%rbp), %r13
    00000495: 	subq	%r13, %rdi
    00000498: 	cmpq	$0x8, %rdi
    0000049c: 	seta	%r13b
    000004a0: 	testb	%r13b, %r11b
    000004a3: 	je	.Ltmp186 # Offset: 1187
    000004a9: 	leaq	0x4(,%r9,4), %r11
    000004b1: 	movq	%r10, %rdi
    000004b4: 	leaq	(%rax,%r11), %r13
    000004b8: 	subq	%r13, %rdi
    000004bb: 	cmpq	$0x8, %rdi
    000004bf: 	jbe	.Ltmp186 # Offset: 1215
    000004c5: 	leal	-0x2(%r8), %r13d
    000004c9: 	leal	-0x1(%r8), %r11d
    000004cd: 	cmpl	$0x2, %r13d
    000004d1: 	jbe	.Ltmp187 # Offset: 1233
    000004d7: 	movups	-0x4(%rax,%rbx), %xmm5
    000004dc: 	movups	-0x4(%rax,%rbp), %xmm0
    000004e1: 	movups	0x4(%rax,%rbx), %xmm3
    000004e6: 	leaq	0x4(,%r9,4), %rbx
    000004ee: 	addps	%xmm5, %xmm0
    000004f1: 	movups	(%r10), %xmm5
    000004f5: 	addps	%xmm3, %xmm0
    000004f8: 	movups	-0x4(%rax,%rbx), %xmm3
    000004fd: 	addps	%xmm3, %xmm0
    00000500: 	pxor	%xmm3, %xmm3
    00000504: 	addps	%xmm3, %xmm0
    00000507: 	mulps	DATAat0x49420(%rip), %xmm0
    0000050e: 	subps	%xmm5, %xmm0
    00000511: 	mulps	DATAat0x49430(%rip), %xmm0
    00000518: 	addps	%xmm5, %xmm0
    0000051b: 	movups	%xmm0, (%r10)
    0000051f: 	movl	%r11d, %r10d
    00000522: 	andl	$-0x4, %r10d
    00000526: 	addl	%r10d, %edx
    00000529: 	cmpl	%r11d, %r10d
    0000052c: 	je	.Ltmp185 # Offset: 1324
    00000532: 	subl	%r10d, %r8d
    00000535: 	leal	-0x1(%r8), %r11d
    00000539: 	cmpl	$0x2, %r8d
    0000053d: 	je	.Ltmp188 # Offset: 1341
.Ltmp191:
    0000053f: 	movl	%r10d, %r8d
    00000542: 	movq	-0x68(%rsp), %rdi
    00000547: 	movq	DATAat0x49430(%rip), %xmm5
    0000054f: 	leaq	(%r8,%r12), %r10
    00000553: 	shlq	$0x2, %r10
    00000557: 	addq	%r8, %rdi
    0000055a: 	addq	%r9, %r8
    0000055d: 	movq	(%rax,%rdi,4), %xmm0
    00000562: 	movq	-0x4(%rax,%r10), %xmm4
    00000569: 	leaq	(%r14,%r10), %rbx
    0000056d: 	movl	%r11d, %edi
    00000570: 	movq	(%rbx), %xmm3
    00000574: 	andl	$-0x2, %edi
    00000577: 	addps	%xmm4, %xmm0
    0000057a: 	movq	0x4(%rax,%r10), %xmm4
    00000581: 	addl	%edi, %edx
    00000583: 	addps	%xmm4, %xmm0
    00000586: 	movq	(%rax,%r8,4), %xmm4
    0000058c: 	addps	%xmm4, %xmm0
    0000058f: 	xorps	%xmm4, %xmm4
    00000592: 	addps	%xmm4, %xmm0
    00000595: 	movq	DATAat0x49420(%rip), %xmm4
    0000059d: 	mulps	%xmm4, %xmm0
    000005a0: 	subps	%xmm3, %xmm0
    000005a3: 	mulps	%xmm5, %xmm0
    000005a6: 	addps	%xmm3, %xmm0
    000005a9: 	movlps	%xmm0, (%rbx)
    000005ac: 	cmpl	%r11d, %edi
    000005af: 	je	.Ltmp185 # Offset: 1455
.Ltmp188:
    000005b1: 	leal	(%r15,%rdx), %edi
    000005b5: 	movslq	%edi, %rdi
    000005b8: 	leaq	(%r14,%rdi,4), %r8
    000005bc: 	leal	(%rcx,%rdx), %edi
    000005bf: 	movslq	%edi, %rdi
    000005c2: 	movss	(%r8), %xmm3
    000005c7: 	movss	(%rax,%rdi,4), %xmm0
    000005cc: 	leal	-0x1(%rdx,%r15), %edi
    000005d1: 	movslq	%edi, %rdi
    000005d4: 	addss	(%rax,%rdi,4), %xmm0
    000005d9: 	leal	0x1(%rdx,%r15), %edi
    000005de: 	addl	%esi, %edx
    000005e0: 	movslq	%edi, %rdi
    000005e3: 	movslq	%edx, %rdx
    000005e6: 	addss	(%rax,%rdi,4), %xmm0
    000005eb: 	addss	(%rax,%rdx,4), %xmm0
    000005f0: 	addss	DATAat0x49400(%rip), %xmm0
    000005f8: 	mulss	DATAat0x49420(%rip), %xmm0
    00000600: 	subss	%xmm3, %xmm0
    00000604: 	mulss	DATAat0x49430(%rip), %xmm0
    0000060c: 	addss	%xmm3, %xmm0
    00000610: 	movss	%xmm0, (%r8)
.Ltmp185:
    00000615: 	movl	-0x4c(%rsp), %ebx
    00000619: 	movl	-0x6c(%rsp), %edx
    0000061d: 	addl	%ebx, %ecx
    0000061f: 	addl	%ebx, %r15d
    00000622: 	addl	%ebx, %esi
    00000624: 	cmpl	%edx, -0x50(%rsp)
    00000628: 	jne	.Ltmp189 # Offset: 1576
.Ltmp178:
    0000062e: 	popq	%rbx
    0000062f: 	popq	%rbp
    00000630: 	popq	%r12
    00000632: 	popq	%r13
    00000634: 	popq	%r14
    00000636: 	popq	%r15
    00000638: 	retq # Offset: 1592
    00000639: 	nopl	(%rax) # Size: 7
.Ltmp180:
    00000640: 	subq	$0x4, %rdi
    00000644: 	addq	-0x18(%rsp), %r11
    00000649: 	leaq	-0x14(%rax,%rbp), %r8
    0000064e: 	leaq	(%r14,%rdi), %rdx
    00000652: 	leaq	-0x14(%rax,%r12), %r9
    00000657: 	pxor	%xmm5, %xmm5
    0000065b: 	addq	%rax, %rdi
    0000065e: 	leaq	0x10(%rax,%r11,4), %r10
    00000663: 	nopl	(%rax,%rax) # Size: 5
.Ltmp190:
    00000668: 	movss	0x10(%r8), %xmm0
    0000066e: 	movups	(%rdi), %xmm7
    00000671: 	addq	$0x10, %rdi
    00000675: 	addq	$0x10, %rdx
    00000679: 	movss	0xc(%r8), %xmm3
    0000067f: 	movss	0x8(%r8), %xmm4
    00000685: 	addq	$0x10, %r9
    00000689: 	addq	$0x10, %r8
    0000068d: 	movss	-0x8(%r9), %xmm6
    00000693: 	unpcklps	%xmm0, %xmm3
    00000696: 	movss	-0xc(%r8), %xmm0
    0000069c: 	unpcklps	%xmm4, %xmm0
    0000069f: 	movss	-0x4(%r9), %xmm4
    000006a5: 	movlhps	%xmm3, %xmm0
    000006a8: 	movss	(%r9), %xmm3
    000006ad: 	addps	%xmm7, %xmm0
    000006b0: 	movups	-0x8(%rdi), %xmm7
    000006b4: 	unpcklps	%xmm3, %xmm4
    000006b7: 	movss	-0xc(%r9), %xmm3
    000006bd: 	addps	%xmm7, %xmm0
    000006c0: 	unpcklps	%xmm6, %xmm3
    000006c3: 	movups	-0xc(%rdx), %xmm7
    000006c7: 	movlhps	%xmm4, %xmm3
    000006ca: 	addps	%xmm3, %xmm0
    000006cd: 	addps	%xmm5, %xmm0
    000006d0: 	mulps	%xmm2, %xmm0
    000006d3: 	subps	%xmm7, %xmm0
    000006d6: 	mulps	%xmm1, %xmm0
    000006d9: 	addps	%xmm7, %xmm0
    000006dc: 	movups	%xmm0, -0xc(%rdx)
    000006e0: 	cmpq	%rdi, %r10
    000006e3: 	jne	.Ltmp190 # Offset: 1763
    000006e5: 	jmp	.Ltmp182 # Offset: 1765
    000006ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp186:
    000006f0: 	leal	-0x1(%rdx,%r15), %edi
    000006f5: 	leal	0x1(%rdx), %r8d
    000006f9: 	movss	-0x4(%rax,%rbp), %xmm0
    000006ff: 	movq	-0x60(%rsp), %rbx
    00000704: 	movslq	%edi, %rdi
    00000707: 	pxor	%xmm3, %xmm3
    0000070b: 	movss	(%r10), %xmm6
    00000710: 	movl	-0x54(%rsp), %ebp
    00000714: 	addss	(%rax,%rdi,4), %xmm0
    00000719: 	leal	(%r8,%r15), %edi
    0000071d: 	movss	DATAat0x49420(%rip), %xmm4
    00000725: 	movslq	%edi, %rdi
    00000728: 	movss	DATAat0x49430(%rip), %xmm5
    00000730: 	shlq	$0x2, %rdi
    00000734: 	leaq	(%rax,%rdi), %r9
    00000738: 	addss	(%r9), %xmm0
    0000073d: 	addss	-0x4(%rax,%rbx), %xmm0
    00000743: 	addss	%xmm3, %xmm0
    00000747: 	mulss	%xmm4, %xmm0
    0000074b: 	subss	%xmm6, %xmm0
    0000074f: 	mulss	%xmm5, %xmm0
    00000753: 	addss	%xmm6, %xmm0
    00000757: 	movss	%xmm0, (%r10)
    0000075c: 	cmpl	%ebp, %r8d
    0000075f: 	jge	.Ltmp185 # Offset: 1887
    00000765: 	leal	(%r8,%rcx), %r10d
    00000769: 	leal	0x2(%rdx), %r11d
    0000076d: 	addl	%esi, %r8d
    00000770: 	addq	%r14, %rdi
    00000773: 	movslq	%r10d, %r10
    00000776: 	movslq	%r8d, %r8
    00000779: 	movss	(%rdi), %xmm6
    0000077d: 	movss	(%rax,%r10,4), %xmm0
    00000783: 	leal	(%r11,%r15), %r10d
    00000787: 	addss	(%rax,%r12,4), %xmm0
    0000078d: 	movslq	%r10d, %r10
    00000790: 	shlq	$0x2, %r10
    00000794: 	leaq	(%rax,%r10), %rbx
    00000798: 	addss	(%rbx), %xmm0
    0000079c: 	addss	(%rax,%r8,4), %xmm0
    000007a2: 	addss	%xmm3, %xmm0
    000007a6: 	mulss	%xmm4, %xmm0
    000007aa: 	subss	%xmm6, %xmm0
    000007ae: 	mulss	%xmm5, %xmm0
    000007b2: 	addss	%xmm6, %xmm0
    000007b6: 	movss	%xmm0, (%rdi)
    000007ba: 	cmpl	%ebp, %r11d
    000007bd: 	jge	.Ltmp185 # Offset: 1981
    000007c3: 	leal	(%r11,%rcx), %edi
    000007c7: 	addq	%r14, %r10
    000007ca: 	movslq	%edi, %rdi
    000007cd: 	movss	(%r10), %xmm6
    000007d2: 	movss	(%rax,%rdi,4), %xmm0
    000007d7: 	leal	0x3(%rdx), %edi
    000007da: 	addss	(%r9), %xmm0
    000007df: 	leal	(%rdi,%r15), %r8d
    000007e3: 	movslq	%r8d, %r8
    000007e6: 	addss	(%rax,%r8,4), %xmm0
    000007ec: 	leaq	(,%r8,4), %r9
    000007f4: 	leal	(%r11,%rsi), %r8d
    000007f8: 	movslq	%r8d, %r8
    000007fb: 	addss	(%rax,%r8,4), %xmm0
    00000801: 	addss	%xmm3, %xmm0
    00000805: 	mulss	%xmm4, %xmm0
    00000809: 	subss	%xmm6, %xmm0
    0000080d: 	mulss	%xmm5, %xmm0
    00000811: 	addss	%xmm6, %xmm0
    00000815: 	movss	%xmm0, (%r10)
    0000081a: 	cmpl	%ebp, %edi
    0000081c: 	jge	.Ltmp185 # Offset: 2076
    00000822: 	leal	(%rdi,%rcx), %r8d
    00000826: 	leal	0x4(%rdx,%r15), %edx
    0000082b: 	addq	%r14, %r9
    0000082e: 	movslq	%edx, %rdx
    00000831: 	movslq	%r8d, %r8
    00000834: 	movss	(%r9), %xmm6
    00000839: 	movss	(%rax,%r8,4), %xmm0
    0000083f: 	addss	(%rbx), %xmm0
    00000843: 	addss	(%rax,%rdx,4), %xmm0
    00000848: 	leal	(%rdi,%rsi), %edx
    0000084b: 	movslq	%edx, %rdx
    0000084e: 	addss	(%rax,%rdx,4), %xmm0
    00000853: 	addss	%xmm3, %xmm0
    00000857: 	mulss	%xmm4, %xmm0
    0000085b: 	subss	%xmm6, %xmm0
    0000085f: 	mulss	%xmm5, %xmm0
    00000863: 	addss	%xmm6, %xmm0
    00000867: 	movss	%xmm0, (%r9)
    0000086c: 	jmp	.Ltmp185 # Offset: 2156
.Ltmp187:
    00000871: 	xorl	%r10d, %r10d
    00000874: 	jmp	.Ltmp191 # Offset: 2164
.Ltmp183:
    00000879: 	movl	-0xc(%rsp), %edx
    0000087d: 	jmp	.Ltmp192 # Offset: 2173
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled2IffEclEPfS1_iiii.isra.0/1(*2)"

Binary Function "_ZN21jacobi_sor2D_unrolledIffEclEPfS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN21jacobi_sor2D_unrolledIffEclEPfS1_iiii.isra.0/1
                _ZN21jacobi_sor2D_unrolledIffEclEPfS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 57
  State       : disassembled
  Address     : 0xdc30
  Size        : 0x8a0
  MaxSize     : 0x8a0
  Offset      : 0xdc30
  Section     : .text
  Orc Section : .local.text._ZN21jacobi_sor2D_unrolledIffEclEPfS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	leal	-0x1(%rdx), %esi
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, -0x58(%rsp)
    00000014: 	movl	%r8d, -0x4c(%rsp)
    00000019: 	movl	%esi, -0x50(%rsp)
    0000001d: 	cmpl	$0x1, %esi
    00000020: 	jle	.Ltmp193 # Offset: 32
    00000026: 	movl	%ecx, %ebx
    00000028: 	movq	%rdi, %rax
    0000002b: 	movl	$0x1, -0x6c(%rsp)
    00000033: 	leal	-0x1(%rcx), %esi
    00000036: 	subl	$0x6, %ebx
    00000039: 	movaps	DATAat0x49420(%rip), %xmm2
    00000040: 	movl	%r8d, %ecx
    00000043: 	xorl	%r15d, %r15d
    00000046: 	movl	%ebx, -0x44(%rsp)
    0000004a: 	shrl	$0x2, %ebx
    0000004d: 	movaps	DATAat0x49430(%rip), %xmm1
    00000054: 	leal	0x1(%rbx), %edi
    00000057: 	movl	%ebx, -0x30(%rsp)
    0000005b: 	movl	%edi, %edx
    0000005d: 	movl	%edi, -0x40(%rsp)
    00000061: 	andl	$-0x2, %edi
    00000064: 	shrl	%edx
    00000066: 	leal	0x1(,%rdi,4), %r14d
    0000006e: 	movl	%edi, -0x3c(%rsp)
    00000072: 	subl	$0x1, %edx
    00000075: 	movl	%esi, -0x54(%rsp)
    00000079: 	leal	(%r8,%r8), %esi
    0000007d: 	addq	$0x1, %rdx
    00000081: 	movl	%r14d, -0xc(%rsp)
    00000086: 	shlq	$0x5, %rdx
    0000008a: 	movq	%rdx, -0x38(%rsp)
    0000008f: 	movl	%ebx, %edx
    00000091: 	shlq	$0x2, %rdx
    00000095: 	movq	%rdx, -0x18(%rsp)
    0000009a: 	leal	0x5(,%rbx,4), %edx
    000000a1: 	subl	%edi, %ebx
    000000a3: 	movl	%edx, -0x48(%rsp)
    000000a7: 	movl	%edi, %edx
    000000a9: 	shlq	$0x2, %rdx
    000000ad: 	movl	%ebx, -0x2c(%rsp)
    000000b1: 	leal	(%r14,%rbx,4), %ebx
    000000b5: 	movq	%r13, %r14
    000000b8: 	movq	%rdx, -0x28(%rsp)
    000000bd: 	addq	$0x4, %rdx
    000000c1: 	movq	%rdx, -0x20(%rsp)
    000000c6: 	movl	%ebx, -0x10(%rsp)
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp204:
    000000d0: 	addl	$0x1, -0x6c(%rsp)
    000000d5: 	cmpl	$0x5, -0x58(%rsp)
    000000da: 	movl	$0x1, %edx
    000000df: 	jle	.Ltmp194 # Offset: 223
    000000e5: 	movslq	%ecx, %r11
    000000e8: 	movslq	%esi, %rbx
    000000eb: 	movslq	%r15d, %r13
    000000ee: 	leaq	0x4(,%r11,4), %rdi
    000000f6: 	movq	%rbx, -0x60(%rsp)
    000000fb: 	leaq	0x14(,%rbx,4), %r12
    00000103: 	leaq	0x8(%r14,%rdi), %r9
    00000108: 	leaq	0xc(%rax,%rdi), %r8
    0000010d: 	movq	%r9, %r10
    00000110: 	leaq	(%r14,%rdi), %rdx
    00000114: 	leaq	0x14(,%r13,4), %rbp
    0000011c: 	subq	%r8, %r10
    0000011f: 	addq	$0x4, %r10
    00000123: 	cmpq	$0x18, %r10
    00000127: 	movq	%rdx, %r10
    0000012a: 	seta	%bl
    0000012d: 	subq	%r8, %r10
    00000130: 	addq	$0x4, %r10
    00000134: 	cmpq	$0x18, %r10
    00000138: 	seta	%r10b
    0000013c: 	andl	%ebx, %r10d
    0000013f: 	cmpl	$0x3, -0x44(%rsp)
    00000144: 	seta	%bl
    00000147: 	andl	%ebx, %r10d
    0000014a: 	leaq	(%rax,%rbp), %rbx
    0000014e: 	movb	%r10b, -0x68(%rsp)
    00000153: 	movq	%rdx, %r10
    00000156: 	subq	%rbx, %r10
    00000159: 	leaq	0xc(%r10), %rbx
    0000015d: 	cmpq	$0x18, %rbx
    00000161: 	seta	%bl
    00000164: 	testb	%bl, -0x68(%rsp)
    00000168: 	je	.Ltmp195 # Offset: 360
    0000016e: 	leaq	(%rax,%r12), %rbx
    00000172: 	movq	%rdx, %r10
    00000175: 	subq	%rbx, %r10
    00000178: 	addq	$0xc, %r10
    0000017c: 	cmpq	$0x18, %r10
    00000180: 	jbe	.Ltmp195 # Offset: 384
    00000186: 	leaq	-0x10(%rax,%rbp), %r10
    0000018b: 	leaq	-0x10(%rax,%r12), %rbp
    00000190: 	movq	-0x38(%rsp), %r12
    00000195: 	pxor	%xmm4, %xmm4
    00000199: 	leaq	-0x4(%rax,%rdi), %rbx
    0000019e: 	xorl	%edi, %edi
.Ltmp196:
    000001a0: 	movups	0x10(%rdx), %xmm7
    000001a4: 	movups	(%rdx), %xmm5
    000001a7: 	addq	$0x20, %rdx
    000001ab: 	movups	0x10(%rbx,%rdi), %xmm3
    000001b0: 	movups	(%rbx,%rdi), %xmm0
    000001b4: 	shufps	$0xee, %xmm7, %xmm5
    000001b8: 	movups	(%rbx,%rdi), %xmm7
    000001bc: 	movups	-0x20(%rdx), %xmm6
    000001c0: 	movhps	0x10(%rbx,%rdi), %xmm0
    000001c5: 	movups	0x10(%r10,%rdi), %xmm10
    000001cb: 	shufps	$0xee, %xmm3, %xmm7
    000001cf: 	movups	(%r10,%rdi), %xmm3
    000001d4: 	movhps	-0x10(%rdx), %xmm6
    000001d8: 	movhps	0x10(%r10,%rdi), %xmm3
    000001de: 	addps	%xmm0, %xmm3
    000001e1: 	movups	(%rbp,%rdi), %xmm0
    000001e6: 	movhps	0x10(%rbp,%rdi), %xmm0
    000001eb: 	addps	%xmm7, %xmm3
    000001ee: 	addps	%xmm0, %xmm3
    000001f1: 	movq	(%r8,%rdi), %xmm0
    000001f7: 	addps	%xmm4, %xmm3
    000001fa: 	mulps	%xmm2, %xmm3
    000001fd: 	subps	%xmm6, %xmm3
    00000200: 	mulps	%xmm1, %xmm3
    00000203: 	addps	%xmm6, %xmm3
    00000206: 	movq	0x10(%r8,%rdi), %xmm6
    0000020d: 	movlhps	%xmm6, %xmm0
    00000210: 	movups	(%r10,%rdi), %xmm6
    00000215: 	shufps	$0xee, %xmm10, %xmm6
    0000021a: 	addps	%xmm7, %xmm6
    0000021d: 	movups	0x10(%rbp,%rdi), %xmm7
    00000222: 	addps	%xmm6, %xmm0
    00000225: 	movups	(%rbp,%rdi), %xmm6
    0000022a: 	movq	%xmm3, -0x20(%rdx)
    0000022f: 	movhps	%xmm3, -0x10(%rdx)
    00000233: 	shufps	$0xee, %xmm7, %xmm6
    00000237: 	addps	%xmm6, %xmm0
    0000023a: 	addps	%xmm4, %xmm0
    0000023d: 	mulps	%xmm2, %xmm0
    00000240: 	subps	%xmm5, %xmm0
    00000243: 	mulps	%xmm1, %xmm0
    00000246: 	addps	%xmm5, %xmm0
    00000249: 	movq	%xmm0, (%r9,%rdi)
    0000024f: 	movhps	%xmm0, 0x10(%r9,%rdi)
    00000255: 	addq	$0x20, %rdi
    00000259: 	cmpq	%rdi, %r12
    0000025c: 	jne	.Ltmp196 # Offset: 604
    00000262: 	movl	-0x3c(%rsp), %ebx
    00000266: 	cmpl	%ebx, -0x40(%rsp)
    0000026a: 	je	.Ltmp197 # Offset: 618
    00000270: 	cmpl	%ebx, -0x30(%rsp)
    00000274: 	je	.Ltmp198 # Offset: 628
    0000027a: 	movq	-0x28(%rsp), %rbx
    0000027f: 	xorps	%xmm6, %xmm6
    00000282: 	movq	DATAat0x49420(%rip), %xmm4
    0000028a: 	movq	DATAat0x49430(%rip), %xmm5
    00000292: 	leaq	0x1(%r13,%rbx), %rdi
    00000297: 	leaq	0x1(%r11,%rbx), %rdx
    0000029c: 	addq	-0x20(%rsp), %r11
    000002a1: 	leaq	(%rax,%rdi,4), %r10
    000002a5: 	movq	-0x60(%rsp), %rdi
    000002aa: 	shlq	$0x2, %rdx
    000002ae: 	leaq	(%rax,%r11,4), %r11
    000002b2: 	leaq	(%r14,%rdx), %r8
    000002b6: 	leaq	-0x4(%rax,%rdx), %r9
    000002bb: 	leaq	0x1(%rdi,%rbx), %rdi
    000002c0: 	leaq	0x8(%r14,%rdx), %rbp
    000002c5: 	xorl	%edx, %edx
    000002c7: 	leaq	(%rax,%rdi,4), %rbx
    000002cb: 	xorl	%edi, %edi
.Ltmp199:
    000002cd: 	movq	0x8(%r10,%rdx), %xmm0
    000002d4: 	movq	0x8(%r9,%rdx), %xmm8
    000002db: 	addl	$0x1, %edi
    000002de: 	movq	0x8(%r8,%rdx), %xmm9
    000002e5: 	movq	(%r8,%rdx), %xmm7
    000002eb: 	movaps	%xmm0, %xmm3
    000002ee: 	movq	(%r11,%rdx), %xmm0
    000002f4: 	addps	%xmm8, %xmm3
    000002f8: 	addps	%xmm0, %xmm3
    000002fb: 	movq	0x8(%rbx,%rdx), %xmm0
    00000301: 	addps	%xmm0, %xmm3
    00000304: 	movq	(%r10,%rdx), %xmm0
    0000030a: 	addps	%xmm6, %xmm3
    0000030d: 	mulps	%xmm4, %xmm3
    00000310: 	subps	%xmm9, %xmm3
    00000314: 	mulps	%xmm5, %xmm3
    00000317: 	addps	%xmm9, %xmm3
    0000031b: 	movq	(%r9,%rdx), %xmm9
    00000321: 	addps	%xmm9, %xmm0
    00000325: 	addps	%xmm8, %xmm0
    00000329: 	movq	(%rbx,%rdx), %xmm8
    0000032f: 	addps	%xmm8, %xmm0
    00000333: 	addps	%xmm6, %xmm0
    00000336: 	mulps	%xmm4, %xmm0
    00000339: 	subps	%xmm7, %xmm0
    0000033c: 	mulps	%xmm5, %xmm0
    0000033f: 	addps	%xmm7, %xmm0
    00000342: 	movlps	%xmm0, (%r8,%rdx)
    00000347: 	movlps	%xmm3, (%rbp,%rdx)
    0000034c: 	addq	$0x10, %rdx
    00000350: 	cmpl	-0x2c(%rsp), %edi
    00000354: 	jb	.Ltmp199 # Offset: 852
    0000035a: 	movl	-0x10(%rsp), %edx
.Ltmp207:
    0000035e: 	leal	(%r15,%rdx), %r11d
    00000362: 	leal	0x1(%rdx), %edi
    00000365: 	movslq	%r11d, %r11
    00000368: 	leal	0x2(%rdx), %r8d
    0000036c: 	leal	0x3(%rdx), %r9d
    00000370: 	movss	(%rax,%r11,4), %xmm0
    00000376: 	leal	(%rcx,%rdi), %r11d
    0000037a: 	leal	(%rcx,%rdx), %r10d
    0000037e: 	movslq	%r11d, %r11
    00000381: 	movslq	%r10d, %r10
    00000384: 	leaq	(%rax,%r11,4), %rbp
    00000388: 	leal	(%r15,%rdi), %r11d
    0000038c: 	addl	%esi, %edi
    0000038e: 	movslq	%r11d, %r11
    00000391: 	leaq	(%r14,%r10,4), %rbx
    00000395: 	movslq	%edi, %rdi
    00000398: 	movss	(%rax,%r11,4), %xmm4
    0000039e: 	leal	(%r15,%r8), %r11d
    000003a2: 	addss	(%rax,%r10,4), %xmm4
    000003a8: 	movslq	%r11d, %r11
    000003ab: 	leal	(%rcx,%r8), %r10d
    000003af: 	addl	%esi, %r8d
    000003b2: 	movups	(%rbx), %xmm7
    000003b5: 	movss	(%rax,%r11,4), %xmm3
    000003bb: 	leal	(%r15,%r9), %r11d
    000003bf: 	movslq	%r10d, %r10
    000003c2: 	addl	%esi, %r9d
    000003c5: 	movslq	%r11d, %r11
    000003c8: 	addss	(%rbp), %xmm3
    000003cd: 	movslq	%r8d, %r8
    000003d0: 	movslq	%r9d, %r9
    000003d3: 	movss	(%rax,%r11,4), %xmm5
    000003d9: 	leal	-0x1(%rcx,%rdx), %r11d
    000003de: 	addl	%esi, %edx
    000003e0: 	addss	(%rax,%r10,4), %xmm5
    000003e6: 	movslq	%r11d, %r11
    000003e9: 	movslq	%edx, %rdx
    000003ec: 	addss	(%rax,%r11,4), %xmm0
    000003f2: 	unpcklps	%xmm5, %xmm3
    000003f5: 	movss	(%rax,%rdi,4), %xmm5
    000003fa: 	unpcklps	%xmm4, %xmm0
    000003fd: 	movss	(%rax,%r8,4), %xmm4
    00000403: 	movlhps	%xmm3, %xmm0
    00000406: 	movups	(%rbp), %xmm3
    0000040a: 	addps	%xmm3, %xmm0
    0000040d: 	movss	(%rax,%r9,4), %xmm3
    00000413: 	unpcklps	%xmm3, %xmm4
    00000416: 	movss	(%rax,%rdx,4), %xmm3
    0000041b: 	unpcklps	%xmm5, %xmm3
    0000041e: 	movlhps	%xmm4, %xmm3
    00000421: 	addps	%xmm3, %xmm0
    00000424: 	pxor	%xmm3, %xmm3
    00000428: 	addps	%xmm3, %xmm0
    0000042b: 	mulps	%xmm2, %xmm0
    0000042e: 	subps	%xmm7, %xmm0
    00000431: 	mulps	%xmm1, %xmm0
    00000434: 	addps	%xmm7, %xmm0
    00000437: 	movups	%xmm0, (%rbx)
.Ltmp197:
    0000043a: 	movl	-0x48(%rsp), %edx
.Ltmp194:
    0000043e: 	cmpl	-0x54(%rsp), %edx
    00000442: 	jge	.Ltmp200 # Offset: 1090
    00000448: 	movslq	%edx, %r11
    0000044b: 	movslq	%ecx, %rdi
    0000044e: 	movl	-0x58(%rsp), %r8d
    00000453: 	movslq	%esi, %r9
    00000456: 	movq	%r14, %r13
    00000459: 	leaq	(%rdi,%r11), %r12
    0000045d: 	addq	%r11, %r9
    00000460: 	movslq	%r15d, %rdi
    00000463: 	subq	%rax, %r13
    00000466: 	addq	%r11, %rdi
    00000469: 	subl	%edx, %r8d
    0000046c: 	leaq	0x4(,%r9,4), %r11
    00000474: 	cmpq	$0x10, %r13
    00000478: 	leaq	(,%r12,4), %rbx
    00000480: 	movq	%rdi, -0x68(%rsp)
    00000485: 	movq	%r11, -0x60(%rsp)
    0000048a: 	seta	%r11b
    0000048e: 	cmpl	$0x2, %r8d
    00000492: 	leaq	(%r14,%rbx), %r10
    00000496: 	setne	%r13b
    0000049a: 	leaq	0x4(,%rdi,4), %rbp
    000004a2: 	movq	%r10, %rdi
    000004a5: 	andl	%r13d, %r11d
    000004a8: 	leaq	(%rax,%rbp), %r13
    000004ac: 	subq	%r13, %rdi
    000004af: 	cmpq	$0x8, %rdi
    000004b3: 	seta	%r13b
    000004b7: 	testb	%r13b, %r11b
    000004ba: 	je	.Ltmp201 # Offset: 1210
    000004c0: 	leaq	0x4(,%r9,4), %r11
    000004c8: 	movq	%r10, %rdi
    000004cb: 	leaq	(%rax,%r11), %r13
    000004cf: 	subq	%r13, %rdi
    000004d2: 	cmpq	$0x8, %rdi
    000004d6: 	jbe	.Ltmp201 # Offset: 1238
    000004dc: 	leal	-0x2(%r8), %r13d
    000004e0: 	leal	-0x1(%r8), %r11d
    000004e4: 	cmpl	$0x2, %r13d
    000004e8: 	jbe	.Ltmp202 # Offset: 1256
    000004ee: 	movups	-0x4(%rax,%rbx), %xmm4
    000004f3: 	movups	-0x4(%rax,%rbp), %xmm0
    000004f8: 	movups	0x4(%rax,%rbx), %xmm3
    000004fd: 	leaq	0x4(,%r9,4), %rbx
    00000505: 	movups	(%r10), %xmm7
    00000509: 	addps	%xmm4, %xmm0
    0000050c: 	addps	%xmm3, %xmm0
    0000050f: 	movups	-0x4(%rax,%rbx), %xmm3
    00000514: 	addps	%xmm3, %xmm0
    00000517: 	pxor	%xmm3, %xmm3
    0000051b: 	addps	%xmm3, %xmm0
    0000051e: 	mulps	DATAat0x49420(%rip), %xmm0
    00000525: 	subps	%xmm7, %xmm0
    00000528: 	mulps	DATAat0x49430(%rip), %xmm0
    0000052f: 	addps	%xmm7, %xmm0
    00000532: 	movups	%xmm0, (%r10)
    00000536: 	movl	%r11d, %r10d
    00000539: 	andl	$-0x4, %r10d
    0000053d: 	addl	%r10d, %edx
    00000540: 	cmpl	%r11d, %r10d
    00000543: 	je	.Ltmp200 # Offset: 1347
    00000549: 	subl	%r10d, %r8d
    0000054c: 	leal	-0x1(%r8), %r11d
    00000550: 	cmpl	$0x2, %r8d
    00000554: 	je	.Ltmp203 # Offset: 1364
.Ltmp206:
    00000556: 	movl	%r10d, %r8d
    00000559: 	movq	-0x68(%rsp), %rdi
    0000055e: 	movq	DATAat0x49430(%rip), %xmm5
    00000566: 	leaq	(%r8,%r12), %r10
    0000056a: 	shlq	$0x2, %r10
    0000056e: 	addq	%r8, %rdi
    00000571: 	addq	%r9, %r8
    00000574: 	movq	(%rax,%rdi,4), %xmm0
    00000579: 	movq	-0x4(%rax,%r10), %xmm4
    00000580: 	leaq	(%r14,%r10), %rbx
    00000584: 	movl	%r11d, %edi
    00000587: 	movq	(%rbx), %xmm3
    0000058b: 	andl	$-0x2, %edi
    0000058e: 	addps	%xmm4, %xmm0
    00000591: 	movq	0x4(%rax,%r10), %xmm4
    00000598: 	addl	%edi, %edx
    0000059a: 	addps	%xmm4, %xmm0
    0000059d: 	movq	(%rax,%r8,4), %xmm4
    000005a3: 	addps	%xmm4, %xmm0
    000005a6: 	xorps	%xmm4, %xmm4
    000005a9: 	addps	%xmm4, %xmm0
    000005ac: 	movq	DATAat0x49420(%rip), %xmm4
    000005b4: 	mulps	%xmm4, %xmm0
    000005b7: 	subps	%xmm3, %xmm0
    000005ba: 	mulps	%xmm5, %xmm0
    000005bd: 	addps	%xmm3, %xmm0
    000005c0: 	movlps	%xmm0, (%rbx)
    000005c3: 	cmpl	%r11d, %edi
    000005c6: 	je	.Ltmp200 # Offset: 1478
.Ltmp203:
    000005c8: 	leal	(%rcx,%rdx), %edi
    000005cb: 	movslq	%edi, %rdi
    000005ce: 	leaq	(%r14,%rdi,4), %r8
    000005d2: 	leal	(%r15,%rdx), %edi
    000005d6: 	movslq	%edi, %rdi
    000005d9: 	movss	(%r8), %xmm3
    000005de: 	movss	(%rax,%rdi,4), %xmm0
    000005e3: 	leal	-0x1(%rdx,%rcx), %edi
    000005e7: 	movslq	%edi, %rdi
    000005ea: 	addss	(%rax,%rdi,4), %xmm0
    000005ef: 	leal	0x1(%rdx,%rcx), %edi
    000005f3: 	addl	%esi, %edx
    000005f5: 	movslq	%edi, %rdi
    000005f8: 	movslq	%edx, %rdx
    000005fb: 	addss	(%rax,%rdi,4), %xmm0
    00000600: 	addss	(%rax,%rdx,4), %xmm0
    00000605: 	addss	DATAat0x49400(%rip), %xmm0
    0000060d: 	mulss	DATAat0x49420(%rip), %xmm0
    00000615: 	subss	%xmm3, %xmm0
    00000619: 	mulss	DATAat0x49430(%rip), %xmm0
    00000621: 	addss	%xmm3, %xmm0
    00000625: 	movss	%xmm0, (%r8)
.Ltmp200:
    0000062a: 	movl	-0x4c(%rsp), %ebx
    0000062e: 	movl	-0x6c(%rsp), %edx
    00000632: 	addl	%ebx, %r15d
    00000635: 	addl	%ebx, %ecx
    00000637: 	addl	%ebx, %esi
    00000639: 	cmpl	%edx, -0x50(%rsp)
    0000063d: 	jne	.Ltmp204 # Offset: 1597
.Ltmp193:
    00000643: 	popq	%rbx
    00000644: 	popq	%rbp
    00000645: 	popq	%r12
    00000647: 	popq	%r13
    00000649: 	popq	%r14
    0000064b: 	popq	%r15
    0000064d: 	retq # Offset: 1613
    0000064e: 	nop # Size: 2
.Ltmp195:
    00000650: 	subq	$0x4, %rdi
    00000654: 	addq	-0x18(%rsp), %r11
    00000659: 	leaq	-0x14(%rax,%rbp), %r8
    0000065e: 	leaq	(%r14,%rdi), %rdx
    00000662: 	leaq	-0x14(%rax,%r12), %r9
    00000667: 	pxor	%xmm4, %xmm4
    0000066b: 	addq	%rax, %rdi
    0000066e: 	leaq	0x10(%rax,%r11,4), %r10
    00000673: 	nopl	(%rax,%rax) # Size: 5
.Ltmp205:
    00000678: 	movss	0x4(%r8), %xmm0
    0000067e: 	movss	0x8(%r8), %xmm5
    00000684: 	addq	$0x10, %rdi
    00000688: 	addq	$0x10, %rdx
    0000068c: 	addss	-0xc(%rdi), %xmm5
    00000691: 	movss	0xc(%r8), %xmm3
    00000697: 	addq	$0x10, %r9
    0000069b: 	addq	$0x10, %r8
    0000069f: 	movss	(%r8), %xmm6
    000006a4: 	addss	-0x10(%rdi), %xmm0
    000006a9: 	addss	-0x4(%rdi), %xmm6
    000006ae: 	addss	-0x8(%rdi), %xmm3
    000006b3: 	movups	-0x8(%rdi), %xmm7
    000006b7: 	unpcklps	%xmm5, %xmm0
    000006ba: 	movss	-0x4(%r9), %xmm5
    000006c0: 	unpcklps	%xmm6, %xmm3
    000006c3: 	movss	-0x8(%r9), %xmm6
    000006c9: 	movlhps	%xmm3, %xmm0
    000006cc: 	movss	(%r9), %xmm3
    000006d1: 	addps	%xmm7, %xmm0
    000006d4: 	movups	-0xc(%rdx), %xmm7
    000006d8: 	unpcklps	%xmm3, %xmm5
    000006db: 	movss	-0xc(%r9), %xmm3
    000006e1: 	unpcklps	%xmm6, %xmm3
    000006e4: 	movlhps	%xmm5, %xmm3
    000006e7: 	addps	%xmm3, %xmm0
    000006ea: 	addps	%xmm4, %xmm0
    000006ed: 	mulps	%xmm2, %xmm0
    000006f0: 	subps	%xmm7, %xmm0
    000006f3: 	mulps	%xmm1, %xmm0
    000006f6: 	addps	%xmm7, %xmm0
    000006f9: 	movups	%xmm0, -0xc(%rdx)
    000006fd: 	cmpq	%rdi, %r10
    00000700: 	jne	.Ltmp205 # Offset: 1792
    00000706: 	jmp	.Ltmp197 # Offset: 1798
    0000070b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp201:
    00000710: 	leal	-0x1(%rdx,%rcx), %edi
    00000714: 	leal	0x1(%rdx), %r8d
    00000718: 	movss	-0x4(%rax,%rbp), %xmm0
    0000071e: 	movq	-0x60(%rsp), %rbx
    00000723: 	movslq	%edi, %rdi
    00000726: 	pxor	%xmm3, %xmm3
    0000072a: 	movss	(%r10), %xmm6
    0000072f: 	movl	-0x54(%rsp), %ebp
    00000733: 	addss	(%rax,%rdi,4), %xmm0
    00000738: 	leal	(%r8,%rcx), %edi
    0000073c: 	movss	DATAat0x49420(%rip), %xmm4
    00000744: 	movslq	%edi, %rdi
    00000747: 	movss	DATAat0x49430(%rip), %xmm5
    0000074f: 	shlq	$0x2, %rdi
    00000753: 	leaq	(%rax,%rdi), %r9
    00000757: 	addss	(%r9), %xmm0
    0000075c: 	addss	-0x4(%rax,%rbx), %xmm0
    00000762: 	addss	%xmm3, %xmm0
    00000766: 	mulss	%xmm4, %xmm0
    0000076a: 	subss	%xmm6, %xmm0
    0000076e: 	mulss	%xmm5, %xmm0
    00000772: 	addss	%xmm6, %xmm0
    00000776: 	movss	%xmm0, (%r10)
    0000077b: 	cmpl	%ebp, %r8d
    0000077e: 	jge	.Ltmp200 # Offset: 1918
    00000784: 	leal	(%r8,%r15), %r10d
    00000788: 	leal	0x2(%rdx), %r11d
    0000078c: 	addl	%esi, %r8d
    0000078f: 	addq	%r14, %rdi
    00000792: 	movslq	%r10d, %r10
    00000795: 	movslq	%r8d, %r8
    00000798: 	movss	(%rdi), %xmm6
    0000079c: 	movss	(%rax,%r10,4), %xmm0
    000007a2: 	leal	(%r11,%rcx), %r10d
    000007a6: 	addss	(%rax,%r12,4), %xmm0
    000007ac: 	movslq	%r10d, %r10
    000007af: 	shlq	$0x2, %r10
    000007b3: 	leaq	(%rax,%r10), %rbx
    000007b7: 	addss	(%rbx), %xmm0
    000007bb: 	addss	(%rax,%r8,4), %xmm0
    000007c1: 	addss	%xmm3, %xmm0
    000007c5: 	mulss	%xmm4, %xmm0
    000007c9: 	subss	%xmm6, %xmm0
    000007cd: 	mulss	%xmm5, %xmm0
    000007d1: 	addss	%xmm6, %xmm0
    000007d5: 	movss	%xmm0, (%rdi)
    000007d9: 	cmpl	%ebp, %r11d
    000007dc: 	jge	.Ltmp200 # Offset: 2012
    000007e2: 	leal	(%r11,%r15), %edi
    000007e6: 	addq	%r14, %r10
    000007e9: 	movslq	%edi, %rdi
    000007ec: 	movss	(%r10), %xmm6
    000007f1: 	movss	(%rax,%rdi,4), %xmm0
    000007f6: 	leal	0x3(%rdx), %edi
    000007f9: 	addss	(%r9), %xmm0
    000007fe: 	leal	(%rdi,%rcx), %r8d
    00000802: 	movslq	%r8d, %r8
    00000805: 	addss	(%rax,%r8,4), %xmm0
    0000080b: 	leaq	(,%r8,4), %r9
    00000813: 	leal	(%r11,%rsi), %r8d
    00000817: 	movslq	%r8d, %r8
    0000081a: 	addss	(%rax,%r8,4), %xmm0
    00000820: 	addss	%xmm3, %xmm0
    00000824: 	mulss	%xmm4, %xmm0
    00000828: 	subss	%xmm6, %xmm0
    0000082c: 	mulss	%xmm5, %xmm0
    00000830: 	addss	%xmm6, %xmm0
    00000834: 	movss	%xmm0, (%r10)
    00000839: 	cmpl	%ebp, %edi
    0000083b: 	jge	.Ltmp200 # Offset: 2107
    00000841: 	leal	(%rdi,%r15), %r8d
    00000845: 	leal	0x4(%rdx,%rcx), %edx
    00000849: 	addq	%r14, %r9
    0000084c: 	movslq	%edx, %rdx
    0000084f: 	movslq	%r8d, %r8
    00000852: 	movss	(%r9), %xmm6
    00000857: 	movss	(%rax,%r8,4), %xmm0
    0000085d: 	addss	(%rbx), %xmm0
    00000861: 	addss	(%rax,%rdx,4), %xmm0
    00000866: 	leal	(%rdi,%rsi), %edx
    00000869: 	movslq	%edx, %rdx
    0000086c: 	addss	(%rax,%rdx,4), %xmm0
    00000871: 	addss	%xmm3, %xmm0
    00000875: 	mulss	%xmm4, %xmm0
    00000879: 	subss	%xmm6, %xmm0
    0000087d: 	mulss	%xmm5, %xmm0
    00000881: 	addss	%xmm6, %xmm0
    00000885: 	movss	%xmm0, (%r9)
    0000088a: 	jmp	.Ltmp200 # Offset: 2186
.Ltmp202:
    0000088f: 	xorl	%r10d, %r10d
    00000892: 	jmp	.Ltmp206 # Offset: 2194
.Ltmp198:
    00000897: 	movl	-0xc(%rsp), %edx
    0000089b: 	jmp	.Ltmp207 # Offset: 2203
DWARF CFI Instructions:
    <empty>
End of Function "_ZN21jacobi_sor2D_unrolledIffEclEPfS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled2IffEclEPKfPfiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled2IffEclEPKfPfiiii.isra.0/1
                _ZN18jacobi2D_unrolled2IffEclEPKfPfiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 58
  State       : disassembled
  Address     : 0xe4d0
  Size        : 0x7db
  MaxSize     : 0x7e0
  Offset      : 0xe4d0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled2IffEclEPKfPfiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	pushq	%r15
    00000002: 	subl	$0x1, %edx
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%ecx, -0x64(%rsp)
    00000011: 	movl	%r8d, -0x4c(%rsp)
    00000016: 	movl	%edx, -0x50(%rsp)
    0000001a: 	cmpl	$0x1, %edx
    0000001d: 	jle	.Ltmp208 # Offset: 29
    00000023: 	movl	%ecx, %ebx
    00000025: 	leal	-0x1(%rcx), %edx
    00000028: 	movq	%rdi, %rax
    0000002b: 	movl	$0x1, -0x68(%rsp)
    00000033: 	subl	$0x6, %ebx
    00000036: 	movl	%edx, -0x54(%rsp)
    0000003a: 	leal	(%r8,%r8), %r13d
    0000003e: 	xorl	%r15d, %r15d
    00000041: 	movl	%ebx, -0x44(%rsp)
    00000045: 	shrl	$0x2, %ebx
    00000048: 	movaps	DATAat0x49420(%rip), %xmm4
    0000004f: 	pxor	%xmm5, %xmm5
    00000053: 	movq	DATAat0x49420(%rip), %xmm6
    0000005b: 	leal	0x1(%rbx), %edi
    0000005e: 	movl	%ebx, -0x30(%rsp)
    00000062: 	movl	%edi, %edx
    00000064: 	movl	%edi, -0x40(%rsp)
    00000068: 	andl	$-0x2, %edi
    0000006b: 	shrl	%edx
    0000006d: 	movl	%edi, %ecx
    0000006f: 	leal	0x1(,%rdi,4), %r14d
    00000077: 	movl	%edi, -0x3c(%rsp)
    0000007b: 	subl	$0x1, %edx
    0000007e: 	movl	%r14d, -0xc(%rsp)
    00000083: 	addq	$0x1, %rdx
    00000087: 	shlq	$0x5, %rdx
    0000008b: 	movq	%rdx, -0x38(%rsp)
    00000090: 	movl	%ebx, %edx
    00000092: 	shlq	$0x2, %rdx
    00000096: 	movq	%rdx, -0x18(%rsp)
    0000009b: 	leal	0x5(,%rbx,4), %edx
    000000a2: 	subl	%edi, %ebx
    000000a4: 	leaq	(,%rcx,4), %rdi
    000000ac: 	movl	%ebx, -0x2c(%rsp)
    000000b0: 	leal	(%r14,%rbx,4), %ebx
    000000b4: 	movq	%rdi, -0x28(%rsp)
    000000b9: 	addq	$0x4, %rdi
    000000bd: 	movq	%rdi, -0x20(%rsp)
    000000c2: 	movl	%ebx, -0x10(%rsp)
    000000c6: 	movl	%edx, -0x48(%rsp)
    000000ca: 	movl	%r8d, %edx
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp219:
    000000d0: 	addl	$0x1, -0x68(%rsp)
    000000d5: 	cmpl	$0x5, -0x64(%rsp)
    000000da: 	movl	$0x1, %ecx
    000000df: 	jle	.Ltmp209 # Offset: 223
    000000e5: 	movslq	%edx, %r10
    000000e8: 	movslq	%r15d, %r12
    000000eb: 	movslq	%r13d, %r14
    000000ee: 	leaq	0x4(,%r10,4), %rcx
    000000f6: 	leaq	0x14(,%r12,4), %rbx
    000000fe: 	leaq	(%rsi,%rcx), %rdi
    00000102: 	leaq	(%rax,%rbx), %r11
    00000106: 	movq	%rdi, %r9
    00000109: 	leaq	0xc(%rax,%rcx), %r8
    0000010e: 	leaq	0x14(,%r14,4), %rbp
    00000116: 	subq	%r11, %r9
    00000119: 	addq	$0xc, %r9
    0000011d: 	cmpq	$0x18, %r9
    00000121: 	movq	%rdi, %r9
    00000124: 	seta	%r11b
    00000128: 	subq	%r8, %r9
    0000012b: 	addq	$0xc, %r9
    0000012f: 	cmpq	$0x18, %r9
    00000133: 	seta	%r9b
    00000137: 	andl	%r11d, %r9d
    0000013a: 	cmpl	$0x3, -0x44(%rsp)
    0000013f: 	seta	%r11b
    00000143: 	andl	%r11d, %r9d
    00000146: 	leaq	0x1c(%rax,%rcx), %r11
    0000014b: 	movb	%r9b, -0x60(%rsp)
    00000150: 	movq	%rdi, %r9
    00000153: 	subq	%r11, %r9
    00000156: 	leaq	0xc(%r9), %r11
    0000015a: 	cmpq	$0x10, %r11
    0000015e: 	seta	%r11b
    00000162: 	testb	%r11b, -0x60(%rsp)
    00000167: 	je	.Ltmp210 # Offset: 359
    0000016d: 	leaq	(%rax,%rbp), %r11
    00000171: 	movq	%rdi, %r9
    00000174: 	subq	%r11, %r9
    00000177: 	addq	$0xc, %r9
    0000017b: 	cmpq	$0x18, %r9
    0000017f: 	jbe	.Ltmp210 # Offset: 383
    00000185: 	leaq	-0x10(%rax,%rbx), %r11
    0000018a: 	leaq	-0x4(%rax,%rcx), %r9
    0000018f: 	movq	%rax, -0x60(%rsp)
    00000194: 	pxor	%xmm2, %xmm2
    00000198: 	leaq	-0x10(%rax,%rbp), %rbx
    0000019d: 	movq	-0x38(%rsp), %rax
    000001a2: 	leaq	0x8(%rsi,%rcx), %rbp
    000001a7: 	xorl	%ecx, %ecx
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp211:
    000001b0: 	movups	0x10(%r9,%rcx), %xmm3
    000001b6: 	movups	(%r11,%rcx), %xmm1
    000001bb: 	movups	(%r9,%rcx), %xmm0
    000001c0: 	movups	(%r9,%rcx), %xmm7
    000001c5: 	movhps	0x10(%r11,%rcx), %xmm1
    000001cb: 	movups	0x10(%r11,%rcx), %xmm10
    000001d1: 	movlhps	%xmm3, %xmm0
    000001d4: 	shufps	$0xee, %xmm3, %xmm7
    000001d8: 	movq	0x10(%r8,%rcx), %xmm3
    000001df: 	addps	%xmm0, %xmm1
    000001e2: 	movups	(%rbx,%rcx), %xmm0
    000001e6: 	movhps	0x10(%rbx,%rcx), %xmm0
    000001eb: 	addps	%xmm7, %xmm1
    000001ee: 	addps	%xmm0, %xmm1
    000001f1: 	movq	(%r8,%rcx), %xmm0
    000001f7: 	movlhps	%xmm3, %xmm0
    000001fa: 	movups	(%r11,%rcx), %xmm3
    000001ff: 	addps	%xmm2, %xmm1
    00000202: 	shufps	$0xee, %xmm10, %xmm3
    00000207: 	addps	%xmm7, %xmm3
    0000020a: 	movups	0x10(%rbx,%rcx), %xmm7
    0000020f: 	mulps	%xmm4, %xmm1
    00000212: 	addps	%xmm3, %xmm0
    00000215: 	movups	(%rbx,%rcx), %xmm3
    00000219: 	shufps	$0xee, %xmm7, %xmm3
    0000021d: 	addps	%xmm3, %xmm0
    00000220: 	movq	%xmm1, (%rdi,%rcx)
    00000225: 	movhps	%xmm1, 0x10(%rdi,%rcx)
    0000022a: 	addps	%xmm2, %xmm0
    0000022d: 	mulps	%xmm4, %xmm0
    00000230: 	movq	%xmm0, (%rbp,%rcx)
    00000236: 	movhps	%xmm0, 0x10(%rbp,%rcx)
    0000023b: 	addq	$0x20, %rcx
    0000023f: 	cmpq	%rcx, %rax
    00000242: 	jne	.Ltmp211 # Offset: 578
    00000248: 	movq	-0x60(%rsp), %rax
    0000024d: 	movl	-0x3c(%rsp), %ebx
    00000251: 	cmpl	%ebx, -0x40(%rsp)
    00000255: 	je	.Ltmp212 # Offset: 597
    0000025b: 	cmpl	%ebx, -0x30(%rsp)
    0000025f: 	je	.Ltmp213 # Offset: 607
    00000265: 	movq	-0x28(%rsp), %rbx
    0000026a: 	xorps	%xmm2, %xmm2
    0000026d: 	movq	DATAat0x49420(%rip), %xmm3
    00000275: 	leaq	0x1(%r12,%rbx), %rcx
    0000027a: 	leaq	0x1(%r14,%rbx), %rdi
    0000027f: 	leaq	(%rax,%rcx,4), %r11
    00000283: 	leaq	(%r10,%rbx), %rcx
    00000287: 	addq	-0x20(%rsp), %r10
    0000028c: 	shlq	$0x2, %rcx
    00000290: 	leaq	(%rax,%rdi,4), %r8
    00000294: 	leaq	(%rax,%r10,4), %r10
    00000298: 	xorl	%edi, %edi
    0000029a: 	leaq	(%rax,%rcx), %r9
    0000029e: 	leaq	0x4(%rsi,%rcx), %rbx
    000002a3: 	leaq	0xc(%rsi,%rcx), %rbp
    000002a8: 	xorl	%ecx, %ecx
.Ltmp214:
    000002aa: 	movq	0x8(%r9,%rcx), %xmm7
    000002b1: 	movq	0x8(%r11,%rcx), %xmm0
    000002b8: 	addl	$0x1, %edi
    000002bb: 	movq	(%r10,%rcx), %xmm1
    000002c1: 	movq	(%r9,%rcx), %xmm8
    000002c7: 	addps	%xmm7, %xmm0
    000002ca: 	addps	%xmm1, %xmm0
    000002cd: 	movq	0x8(%r8,%rcx), %xmm1
    000002d4: 	addps	%xmm1, %xmm0
    000002d7: 	movq	(%r11,%rcx), %xmm1
    000002dd: 	addps	%xmm8, %xmm1
    000002e1: 	addps	%xmm2, %xmm0
    000002e4: 	addps	%xmm7, %xmm1
    000002e7: 	movq	(%r8,%rcx), %xmm7
    000002ed: 	mulps	%xmm3, %xmm0
    000002f0: 	addps	%xmm1, %xmm7
    000002f3: 	addps	%xmm2, %xmm7
    000002f6: 	mulps	%xmm3, %xmm7
    000002f9: 	movlps	%xmm7, (%rbx,%rcx)
    000002fd: 	movlps	%xmm0, (%rbp,%rcx)
    00000302: 	addq	$0x10, %rcx
    00000306: 	cmpl	%edi, -0x2c(%rsp)
    0000030a: 	ja	.Ltmp214 # Offset: 778
    0000030c: 	movl	-0x10(%rsp), %ecx
.Ltmp222:
    00000310: 	leal	0x1(%rcx), %r8d
    00000314: 	leal	0x2(%rdx,%rcx), %r11d
    00000319: 	pxor	%xmm8, %xmm8
    0000031e: 	movss	DATAat0x49420(%rip), %xmm7
    00000326: 	leal	(%rdx,%rcx), %r10d
    0000032a: 	leal	(%rdx,%r8), %r9d
    0000032e: 	movslq	%r11d, %r11
    00000331: 	leaq	(%rax,%r11,4), %rbx
    00000335: 	movslq	%r10d, %r10
    00000338: 	leal	(%r15,%r8), %r11d
    0000033c: 	movslq	%r9d, %r9
    0000033f: 	movss	(%rax,%r9,4), %xmm2
    00000345: 	movslq	%r11d, %r11
    00000348: 	addl	%r13d, %r8d
    0000034b: 	leal	0x3(%rcx), %edi
    0000034e: 	movss	(%rax,%r10,4), %xmm0
    00000354: 	movq	(%rax,%r11,4), %xmm9
    0000035a: 	movslq	%r8d, %r8
    0000035d: 	leal	-0x1(%rdx,%rcx), %r11d
    00000362: 	movslq	%r11d, %r11
    00000365: 	unpcklps	%xmm2, %xmm0
    00000368: 	addps	%xmm0, %xmm9
    0000036c: 	movq	(%rbx), %xmm0
    00000370: 	addps	%xmm0, %xmm9
    00000374: 	movq	(%rax,%r8,4), %xmm0
    0000037a: 	leal	(%r15,%rdi), %r8d
    0000037e: 	movslq	%r8d, %r8
    00000381: 	movss	(%rax,%r8,4), %xmm1
    00000387: 	leal	0x4(%rdx,%rcx), %r8d
    0000038c: 	addss	(%rbx), %xmm1
    00000390: 	addps	%xmm0, %xmm9
    00000394: 	movslq	%r8d, %r8
    00000397: 	xorps	%xmm0, %xmm0
    0000039a: 	addss	(%rax,%r8,4), %xmm1
    000003a0: 	leal	(%r13,%rdi), %r8d
    000003a5: 	addl	%edx, %edi
    000003a7: 	movslq	%r8d, %r8
    000003aa: 	movslq	%edi, %rdi
    000003ad: 	addps	%xmm0, %xmm9
    000003b1: 	addss	(%rax,%r8,4), %xmm1
    000003b7: 	leal	(%r15,%rcx), %r8d
    000003bb: 	addl	%r13d, %ecx
    000003be: 	movslq	%r8d, %r8
    000003c1: 	movslq	%ecx, %rcx
    000003c4: 	mulps	%xmm3, %xmm9
    000003c8: 	movss	(%rax,%r11,4), %xmm3
    000003ce: 	addss	(%rax,%r8,4), %xmm3
    000003d4: 	addss	%xmm8, %xmm1
    000003d9: 	addss	%xmm3, %xmm2
    000003dd: 	addss	(%rax,%rcx,4), %xmm2
    000003e2: 	mulss	%xmm7, %xmm1
    000003e6: 	addss	%xmm8, %xmm2
    000003eb: 	mulss	%xmm7, %xmm2
    000003ef: 	movss	%xmm2, (%rsi,%r10,4)
    000003f5: 	movlps	%xmm9, (%rsi,%r9,4)
    000003fa: 	movss	%xmm1, (%rsi,%rdi,4)
.Ltmp212:
    000003ff: 	movl	-0x48(%rsp), %ecx
.Ltmp209:
    00000403: 	cmpl	-0x54(%rsp), %ecx
    00000407: 	jge	.Ltmp215 # Offset: 1031
    0000040d: 	movslq	%ecx, %r9
    00000410: 	movslq	%edx, %rdi
    00000413: 	movslq	%r13d, %rbp
    00000416: 	movl	-0x64(%rsp), %r8d
    0000041b: 	leaq	(%rdi,%r9), %r14
    0000041f: 	movslq	%r15d, %rdi
    00000422: 	addq	%r9, %rdi
    00000425: 	addq	%rbp, %r9
    00000428: 	subl	%ecx, %r8d
    0000042b: 	movq	%r9, -0x60(%rsp)
    00000430: 	leaq	0x4(,%r9,4), %rbp
    00000438: 	movq	%rsi, %r9
    0000043b: 	leaq	(,%r14,4), %r11
    00000443: 	subq	%rax, %r9
    00000446: 	leaq	(%rsi,%r11), %r10
    0000044a: 	leaq	0x4(,%rdi,4), %rbx
    00000452: 	cmpq	$0x10, %r9
    00000456: 	seta	%r9b
    0000045a: 	cmpl	$0x2, %r8d
    0000045e: 	setne	%r12b
    00000462: 	andl	%r12d, %r9d
    00000465: 	leaq	(%rax,%rbx), %r12
    00000469: 	movb	%r9b, -0x55(%rsp)
    0000046e: 	movq	%r10, %r9
    00000471: 	subq	%r12, %r9
    00000474: 	cmpq	$0x8, %r9
    00000478: 	seta	%r12b
    0000047c: 	testb	%r12b, -0x55(%rsp)
    00000481: 	je	.Ltmp216 # Offset: 1153
    00000487: 	leaq	(%rax,%rbp), %r12
    0000048b: 	movq	%r10, %r9
    0000048e: 	subq	%r12, %r9
    00000491: 	cmpq	$0x8, %r9
    00000495: 	jbe	.Ltmp216 # Offset: 1173
    0000049b: 	leal	-0x2(%r8), %r12d
    0000049f: 	leal	-0x1(%r8), %r9d
    000004a3: 	cmpl	$0x2, %r12d
    000004a7: 	jbe	.Ltmp217 # Offset: 1191
    000004ad: 	movups	-0x4(%rax,%r11), %xmm1
    000004b3: 	movups	0x4(%rax,%r11), %xmm0
    000004b9: 	addps	%xmm1, %xmm0
    000004bc: 	movups	-0x4(%rax,%rbx), %xmm1
    000004c1: 	addps	%xmm1, %xmm0
    000004c4: 	movups	-0x4(%rax,%rbp), %xmm1
    000004c9: 	addps	%xmm1, %xmm0
    000004cc: 	pxor	%xmm1, %xmm1
    000004d0: 	addps	%xmm1, %xmm0
    000004d3: 	mulps	%xmm4, %xmm0
    000004d6: 	movups	%xmm0, (%r10)
    000004da: 	movl	%r9d, %r10d
    000004dd: 	andl	$-0x4, %r10d
    000004e1: 	addl	%r10d, %ecx
    000004e4: 	cmpl	%r9d, %r10d
    000004e7: 	je	.Ltmp215 # Offset: 1255
    000004ed: 	subl	%r10d, %r8d
    000004f0: 	leal	-0x1(%r8), %r9d
    000004f4: 	cmpl	$0x2, %r8d
    000004f8: 	je	.Ltmp218 # Offset: 1272
.Ltmp221:
    000004fa: 	movq	DATAat0x49420(%rip), %xmm3
    00000502: 	movl	%r10d, %r8d
    00000505: 	leaq	(%r8,%r14), %r10
    00000509: 	addq	%r8, %rdi
    0000050c: 	addq	-0x60(%rsp), %r8
    00000511: 	leaq	(,%r10,4), %r11
    00000519: 	movq	-0x4(%rax,%r11), %xmm1
    00000520: 	movq	0x4(%rax,%r11), %xmm0
    00000527: 	addps	%xmm1, %xmm0
    0000052a: 	movq	(%rax,%rdi,4), %xmm1
    0000052f: 	movl	%r9d, %edi
    00000532: 	andl	$-0x2, %edi
    00000535: 	addl	%edi, %ecx
    00000537: 	addps	%xmm1, %xmm0
    0000053a: 	movq	(%rax,%r8,4), %xmm1
    00000540: 	addps	%xmm1, %xmm0
    00000543: 	xorps	%xmm1, %xmm1
    00000546: 	addps	%xmm1, %xmm0
    00000549: 	mulps	%xmm3, %xmm0
    0000054c: 	movlps	%xmm0, (%rsi,%r10,4)
    00000551: 	cmpl	%r9d, %edi
    00000554: 	je	.Ltmp215 # Offset: 1364
.Ltmp218:
    00000556: 	leal	(%r15,%rcx), %edi
    0000055a: 	leal	0x1(%rcx,%rdx), %r9d
    0000055f: 	pxor	%xmm8, %xmm8
    00000564: 	movss	DATAat0x49420(%rip), %xmm7
    0000056c: 	leal	-0x1(%rcx,%rdx), %r8d
    00000571: 	movslq	%edi, %rdi
    00000574: 	movslq	%r9d, %r9
    00000577: 	movslq	%r8d, %r8
    0000057a: 	movss	(%rax,%r9,4), %xmm0
    00000580: 	addss	(%rax,%r8,4), %xmm0
    00000586: 	addss	(%rax,%rdi,4), %xmm0
    0000058b: 	leal	(%rdx,%rcx), %edi
    0000058e: 	addl	%r13d, %ecx
    00000591: 	movslq	%ecx, %rcx
    00000594: 	movslq	%edi, %rdi
    00000597: 	addss	(%rax,%rcx,4), %xmm0
    0000059c: 	addss	%xmm8, %xmm0
    000005a1: 	mulss	%xmm7, %xmm0
    000005a5: 	movss	%xmm0, (%rsi,%rdi,4)
.Ltmp215:
    000005aa: 	movl	-0x4c(%rsp), %ebx
    000005ae: 	movl	-0x68(%rsp), %edi
    000005b2: 	addl	%ebx, %r15d
    000005b5: 	addl	%ebx, %edx
    000005b7: 	addl	%ebx, %r13d
    000005ba: 	cmpl	%edi, -0x50(%rsp)
    000005be: 	jne	.Ltmp219 # Offset: 1470
.Ltmp208:
    000005c4: 	popq	%rbx
    000005c5: 	popq	%rbp
    000005c6: 	popq	%r12
    000005c8: 	popq	%r13
    000005ca: 	popq	%r14
    000005cc: 	popq	%r15
    000005ce: 	retq # Offset: 1486
    000005cf: 	nop # Size: 1
.Ltmp210:
    000005d0: 	subq	$0x4, %rcx
    000005d4: 	addq	-0x18(%rsp), %r10
    000005d9: 	leaq	-0x14(%rax,%rbx), %r8
    000005de: 	movss	DATAat0x49420(%rip), %xmm7
    000005e6: 	leaq	(%rax,%rcx), %rdi
    000005ea: 	leaq	-0x14(%rax,%rbp), %r9
    000005ef: 	xorps	%xmm9, %xmm9
    000005f3: 	addq	%rsi, %rcx
    000005f6: 	leaq	0x10(%rax,%r10,4), %r10
    000005fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp220:
    00000600: 	movss	0x8(%rdi), %xmm8
    00000606: 	movss	0x4(%rdi), %xmm3
    0000060b: 	addq	$0x10, %rdi
    0000060f: 	addq	$0x10, %r8
    00000613: 	movq	-0x8(%r8), %xmm0
    00000619: 	movss	-0xc(%r8), %xmm2
    0000061f: 	addq	$0x10, %r9
    00000623: 	addq	$0x10, %rcx
    00000627: 	unpcklps	%xmm8, %xmm3
    0000062b: 	addss	-0x10(%rdi), %xmm2
    00000630: 	movss	-0x4(%rdi), %xmm1
    00000635: 	addps	%xmm0, %xmm3
    00000638: 	movq	-0x4(%rdi), %xmm0
    0000063d: 	addss	%xmm8, %xmm2
    00000642: 	addss	-0xc(%r9), %xmm2
    00000648: 	addps	%xmm0, %xmm3
    0000064b: 	movq	-0x8(%r9), %xmm0
    00000651: 	addss	%xmm5, %xmm2
    00000655: 	addps	%xmm0, %xmm3
    00000658: 	movss	(%r8), %xmm0
    0000065d: 	addss	%xmm0, %xmm1
    00000661: 	addss	0x4(%rdi), %xmm1
    00000666: 	mulss	%xmm7, %xmm2
    0000066a: 	addss	(%r9), %xmm1
    0000066f: 	addps	%xmm9, %xmm3
    00000673: 	addss	%xmm5, %xmm1
    00000677: 	mulps	%xmm6, %xmm3
    0000067a: 	movss	%xmm2, -0xc(%rcx)
    0000067f: 	mulss	%xmm7, %xmm1
    00000683: 	movlps	%xmm3, -0x8(%rcx)
    00000687: 	movss	%xmm1, (%rcx)
    0000068b: 	cmpq	%r10, %rdi
    0000068e: 	jne	.Ltmp220 # Offset: 1678
    00000694: 	jmp	.Ltmp212 # Offset: 1684
    00000699: 	nopl	(%rax) # Size: 7
.Ltmp216:
    000006a0: 	leal	0x1(%rcx), %edi
    000006a3: 	leal	-0x1(%rcx,%rdx), %r9d
    000006a8: 	pxor	%xmm8, %xmm8
    000006ad: 	movss	DATAat0x49420(%rip), %xmm7
    000006b5: 	leal	(%rdi,%rdx), %r8d
    000006b9: 	movslq	%r9d, %r9
    000006bc: 	movl	-0x54(%rsp), %r12d
    000006c1: 	movslq	%r8d, %r8
    000006c4: 	movss	(%rax,%r9,4), %xmm0
    000006ca: 	leaq	(%rax,%r8,4), %r11
    000006ce: 	addss	(%r11), %xmm0
    000006d3: 	addss	-0x4(%rax,%rbx), %xmm0
    000006d9: 	addss	-0x4(%rax,%rbp), %xmm0
    000006df: 	addss	%xmm8, %xmm0
    000006e4: 	mulss	%xmm7, %xmm0
    000006e8: 	movss	%xmm0, (%r10)
    000006ed: 	cmpl	%r12d, %edi
    000006f0: 	jge	.Ltmp215 # Offset: 1776
    000006f6: 	leal	0x2(%rcx), %r9d
    000006fa: 	leal	(%rdi,%r15), %ebx
    000006fe: 	addl	%r13d, %edi
    00000701: 	movss	(%rax,%r14,4), %xmm0
    00000707: 	leal	(%r9,%rdx), %r10d
    0000070b: 	movslq	%ebx, %rbx
    0000070e: 	movslq	%edi, %rdi
    00000711: 	movslq	%r10d, %r10
    00000714: 	leaq	(%rax,%r10,4), %rbp
    00000718: 	addss	(%rbp), %xmm0
    0000071d: 	addss	(%rax,%rbx,4), %xmm0
    00000722: 	addss	(%rax,%rdi,4), %xmm0
    00000727: 	addss	%xmm8, %xmm0
    0000072c: 	mulss	%xmm7, %xmm0
    00000730: 	movss	%xmm0, (%rsi,%r8,4)
    00000736: 	cmpl	%r12d, %r9d
    00000739: 	jge	.Ltmp215 # Offset: 1849
    0000073f: 	leal	0x3(%rcx), %edi
    00000742: 	leal	(%r9,%r15), %ebx
    00000746: 	addl	%r13d, %r9d
    00000749: 	leal	(%rdi,%rdx), %r8d
    0000074d: 	movslq	%ebx, %rbx
    00000750: 	movslq	%r9d, %r9
    00000753: 	movslq	%r8d, %r8
    00000756: 	movss	(%rax,%r8,4), %xmm0
    0000075c: 	addss	(%r11), %xmm0
    00000761: 	addss	(%rax,%rbx,4), %xmm0
    00000766: 	addss	(%rax,%r9,4), %xmm0
    0000076c: 	addss	%xmm8, %xmm0
    00000771: 	mulss	%xmm7, %xmm0
    00000775: 	movss	%xmm0, (%rsi,%r10,4)
    0000077b: 	cmpl	%r12d, %edi
    0000077e: 	jge	.Ltmp215 # Offset: 1918
    00000784: 	leal	0x4(%rcx,%rdx), %ecx
    00000788: 	leal	(%rdi,%r15), %r9d
    0000078c: 	movslq	%ecx, %rcx
    0000078f: 	movslq	%r9d, %r9
    00000792: 	movss	(%rax,%rcx,4), %xmm0
    00000797: 	leal	(%rdi,%r13), %ecx
    0000079b: 	addss	(%rbp), %xmm0
    000007a0: 	movslq	%ecx, %rcx
    000007a3: 	addss	(%rax,%r9,4), %xmm0
    000007a9: 	addss	(%rax,%rcx,4), %xmm0
    000007ae: 	addss	%xmm8, %xmm0
    000007b3: 	mulss	%xmm7, %xmm0
    000007b7: 	movss	%xmm0, (%rsi,%r8,4)
    000007bd: 	jmp	.Ltmp215 # Offset: 1981
.Ltmp217:
    000007c2: 	xorl	%r10d, %r10d
    000007c5: 	jmp	.Ltmp221 # Offset: 1989
.Ltmp213:
    000007ca: 	movq	DATAat0x49420(%rip), %xmm3
    000007d2: 	movl	-0xc(%rsp), %ecx
    000007d6: 	jmp	.Ltmp222 # Offset: 2006
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled2IffEclEPKfPfiiii.isra.0/1(*2)"

Binary Function "_ZN17jacobi2D_unrolledIffEclEPKfPfiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN17jacobi2D_unrolledIffEclEPKfPfiiii.isra.0/1
                _ZN17jacobi2D_unrolledIffEclEPKfPfiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 59
  State       : disassembled
  Address     : 0xecb0
  Size        : 0x71c
  MaxSize     : 0x720
  Offset      : 0xecb0
  Section     : .text
  Orc Section : .local.text._ZN17jacobi2D_unrolledIffEclEPKfPfiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	pushq	%r15
    00000002: 	subl	$0x1, %edx
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%ecx, -0x60(%rsp)
    00000011: 	movl	%r8d, -0x54(%rsp)
    00000016: 	movl	%edx, -0x58(%rsp)
    0000001a: 	cmpl	$0x1, %edx
    0000001d: 	jle	.Ltmp223 # Offset: 29
    00000023: 	movl	%ecx, %ebx
    00000025: 	movq	%rsi, %r13
    00000028: 	leal	-0x1(%rcx), %ecx
    0000002b: 	movl	$0x1, -0x6c(%rsp)
    00000033: 	subl	$0x6, %ebx
    00000036: 	movl	%ecx, -0x5c(%rsp)
    0000003a: 	movq	%rdi, %rax
    0000003d: 	leal	(%r8,%r8), %edx
    00000041: 	movl	%ebx, -0x4c(%rsp)
    00000045: 	shrl	$0x2, %ebx
    00000048: 	movaps	DATAat0x49420(%rip), %xmm2
    0000004f: 	xorl	%r15d, %r15d
    00000052: 	movq	DATAat0x49420(%rip), %xmm3
    0000005a: 	leal	0x1(%rbx), %esi
    0000005d: 	movl	%ebx, -0x30(%rsp)
    00000061: 	movl	%esi, %ecx
    00000063: 	movl	%esi, -0x40(%rsp)
    00000067: 	andl	$-0x2, %esi
    0000006a: 	shrl	%ecx
    0000006c: 	leal	0x1(,%rsi,4), %r14d
    00000074: 	movl	%esi, -0x3c(%rsp)
    00000078: 	subl	$0x1, %ecx
    0000007b: 	movl	%r14d, -0xc(%rsp)
    00000080: 	addq	$0x1, %rcx
    00000084: 	shlq	$0x5, %rcx
    00000088: 	movq	%rcx, -0x38(%rsp)
    0000008d: 	movl	%ebx, %ecx
    0000008f: 	shlq	$0x2, %rcx
    00000093: 	movq	%rcx, -0x18(%rsp)
    00000098: 	leal	0x5(,%rbx,4), %ecx
    0000009f: 	subl	%esi, %ebx
    000000a1: 	shlq	$0x2, %rsi
    000000a5: 	movl	%ebx, -0x2c(%rsp)
    000000a9: 	leal	(%r14,%rbx,4), %ebx
    000000ad: 	movq	%rsi, -0x28(%rsp)
    000000b2: 	addq	$0x4, %rsi
    000000b6: 	movq	%rsi, -0x20(%rsp)
    000000bb: 	movl	%ebx, -0x10(%rsp)
    000000bf: 	movl	%ecx, -0x50(%rsp)
    000000c3: 	movl	%r8d, %ecx
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp234:
    000000d0: 	addl	$0x1, -0x6c(%rsp)
    000000d5: 	cmpl	$0x5, -0x60(%rsp)
    000000da: 	movl	$0x1, %esi
    000000df: 	jle	.Ltmp224 # Offset: 223
    000000e5: 	movslq	%ecx, %r10
    000000e8: 	movslq	%r15d, %rbx
    000000eb: 	movslq	%edx, %r14
    000000ee: 	leaq	0x4(,%r10,4), %rdi
    000000f6: 	leaq	0x14(,%rbx,4), %rbp
    000000fe: 	leaq	(%r13,%rdi), %rsi
    00000103: 	leaq	(%rax,%rbp), %r11
    00000107: 	movq	%rsi, %r9
    0000010a: 	leaq	0xc(%rax,%rdi), %r8
    0000010f: 	leaq	0x14(,%r14,4), %r12
    00000117: 	subq	%r11, %r9
    0000011a: 	addq	$0xc, %r9
    0000011e: 	cmpq	$0x18, %r9
    00000122: 	movq	%rsi, %r9
    00000125: 	seta	%r11b
    00000129: 	subq	%r8, %r9
    0000012c: 	addq	$0xc, %r9
    00000130: 	cmpq	$0x18, %r9
    00000134: 	seta	%r9b
    00000138: 	andl	%r11d, %r9d
    0000013b: 	cmpl	$0x3, -0x4c(%rsp)
    00000140: 	seta	%r11b
    00000144: 	andl	%r11d, %r9d
    00000147: 	leaq	0x1c(%rax,%rdi), %r11
    0000014c: 	movb	%r9b, -0x68(%rsp)
    00000151: 	movq	%rsi, %r9
    00000154: 	subq	%r11, %r9
    00000157: 	leaq	0xc(%r9), %r11
    0000015b: 	cmpq	$0x10, %r11
    0000015f: 	seta	%r11b
    00000163: 	testb	%r11b, -0x68(%rsp)
    00000168: 	je	.Ltmp225 # Offset: 360
    0000016e: 	leaq	(%rax,%r12), %r11
    00000172: 	movq	%rsi, %r9
    00000175: 	subq	%r11, %r9
    00000178: 	addq	$0xc, %r9
    0000017c: 	cmpq	$0x18, %r9
    00000180: 	jbe	.Ltmp225 # Offset: 384
    00000186: 	leaq	-0x10(%rax,%rbp), %r11
    0000018b: 	leaq	-0x4(%rax,%rdi), %r9
    00000190: 	movq	%rax, -0x68(%rsp)
    00000195: 	pxor	%xmm5, %xmm5
    00000199: 	leaq	-0x10(%rax,%r12), %rbp
    0000019e: 	movq	-0x38(%rsp), %rax
    000001a3: 	leaq	0x8(%r13,%rdi), %r12
    000001a8: 	xorl	%edi, %edi
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp226:
    000001b0: 	movups	0x10(%r9,%rdi), %xmm7
    000001b6: 	movups	(%r11,%rdi), %xmm1
    000001bb: 	movups	(%r9,%rdi), %xmm0
    000001c0: 	movups	(%r9,%rdi), %xmm6
    000001c5: 	movhps	0x10(%r11,%rdi), %xmm1
    000001cb: 	movq	0x10(%r8,%rdi), %xmm4
    000001d2: 	movlhps	%xmm7, %xmm0
    000001d5: 	shufps	$0xee, %xmm7, %xmm6
    000001d9: 	movups	0x10(%r11,%rdi), %xmm7
    000001df: 	addps	%xmm0, %xmm1
    000001e2: 	movups	(%rbp,%rdi), %xmm0
    000001e7: 	movhps	0x10(%rbp,%rdi), %xmm0
    000001ec: 	addps	%xmm6, %xmm1
    000001ef: 	addps	%xmm0, %xmm1
    000001f2: 	movq	(%r8,%rdi), %xmm0
    000001f8: 	movlhps	%xmm4, %xmm0
    000001fb: 	movups	(%r11,%rdi), %xmm4
    00000200: 	addps	%xmm5, %xmm1
    00000203: 	shufps	$0xee, %xmm7, %xmm4
    00000207: 	addps	%xmm6, %xmm4
    0000020a: 	movups	0x10(%rbp,%rdi), %xmm7
    0000020f: 	mulps	%xmm2, %xmm1
    00000212: 	addps	%xmm4, %xmm0
    00000215: 	movups	(%rbp,%rdi), %xmm4
    0000021a: 	shufps	$0xee, %xmm7, %xmm4
    0000021e: 	addps	%xmm4, %xmm0
    00000221: 	movq	%xmm1, (%rsi,%rdi)
    00000226: 	movhps	%xmm1, 0x10(%rsi,%rdi)
    0000022b: 	addps	%xmm5, %xmm0
    0000022e: 	mulps	%xmm2, %xmm0
    00000231: 	movq	%xmm0, (%r12,%rdi)
    00000237: 	movhps	%xmm0, 0x10(%r12,%rdi)
    0000023d: 	addq	$0x20, %rdi
    00000241: 	cmpq	%rdi, %rax
    00000244: 	jne	.Ltmp226 # Offset: 580
    0000024a: 	movq	-0x68(%rsp), %rax
    0000024f: 	movl	-0x3c(%rsp), %esi
    00000253: 	cmpl	%esi, -0x40(%rsp)
    00000257: 	je	.Ltmp227 # Offset: 599
    0000025d: 	cmpl	%esi, -0x30(%rsp)
    00000261: 	je	.Ltmp228 # Offset: 609
    00000267: 	movq	-0x28(%rsp), %rdi
    0000026c: 	xorps	%xmm4, %xmm4
    0000026f: 	leaq	0x1(%rbx,%rdi), %rsi
    00000274: 	leaq	(%rax,%rsi,4), %r11
    00000278: 	leaq	(%r10,%rdi), %rsi
    0000027c: 	addq	-0x20(%rsp), %r10
    00000281: 	shlq	$0x2, %rsi
    00000285: 	leaq	0x1(%r14,%rdi), %rdi
    0000028a: 	leaq	(%rax,%r10,4), %r10
    0000028e: 	leaq	(%rax,%rsi), %r9
    00000292: 	leaq	(%rax,%rdi,4), %r8
    00000296: 	xorl	%edi, %edi
    00000298: 	leaq	0x4(%r13,%rsi), %rbx
    0000029d: 	leaq	0xc(%r13,%rsi), %rbp
    000002a2: 	xorl	%esi, %esi
.Ltmp229:
    000002a4: 	movq	0x8(%r9,%rsi), %xmm5
    000002ab: 	movq	0x8(%r11,%rsi), %xmm0
    000002b2: 	addl	$0x1, %edi
    000002b5: 	movq	(%r10,%rsi), %xmm1
    000002bb: 	movq	(%r9,%rsi), %xmm6
    000002c1: 	addps	%xmm5, %xmm0
    000002c4: 	addps	%xmm1, %xmm0
    000002c7: 	movq	0x8(%r8,%rsi), %xmm1
    000002ce: 	addps	%xmm1, %xmm0
    000002d1: 	movq	(%r11,%rsi), %xmm1
    000002d7: 	addps	%xmm6, %xmm1
    000002da: 	addps	%xmm4, %xmm0
    000002dd: 	addps	%xmm5, %xmm1
    000002e0: 	movq	(%r8,%rsi), %xmm5
    000002e6: 	mulps	%xmm3, %xmm0
    000002e9: 	addps	%xmm1, %xmm5
    000002ec: 	addps	%xmm4, %xmm5
    000002ef: 	mulps	%xmm3, %xmm5
    000002f2: 	movlps	%xmm5, (%rbx,%rsi)
    000002f6: 	movlps	%xmm0, (%rbp,%rsi)
    000002fb: 	addq	$0x10, %rsi
    000002ff: 	cmpl	%edi, -0x2c(%rsp)
    00000303: 	ja	.Ltmp229 # Offset: 771
    00000305: 	movl	-0x10(%rsp), %esi
.Ltmp237:
    00000309: 	leal	0x2(%rdx,%rsi), %r10d
    0000030e: 	leal	0x3(%rdx,%rsi), %r11d
    00000313: 	leal	0x1(%rsi), %edi
    00000316: 	movslq	%r10d, %r10
    00000319: 	leal	(%rdx,%rsi), %r8d
    0000031d: 	movslq	%r11d, %r11
    00000320: 	movss	(%rax,%r11,4), %xmm0
    00000326: 	movss	(%rax,%r10,4), %xmm1
    0000032c: 	leal	(%rdx,%rdi), %r9d
    00000330: 	movslq	%r8d, %r8
    00000333: 	movslq	%r9d, %r9
    00000336: 	addl	%ecx, %edi
    00000338: 	movss	(%rax,%r9,4), %xmm4
    0000033e: 	unpcklps	%xmm0, %xmm1
    00000341: 	movss	(%rax,%r8,4), %xmm0
    00000347: 	movslq	%edi, %rdi
    0000034a: 	leal	-0x1(%rcx,%rsi), %r8d
    0000034f: 	unpcklps	%xmm4, %xmm0
    00000352: 	movslq	%r8d, %r8
    00000355: 	movlhps	%xmm1, %xmm0
    00000358: 	movups	(%rax,%r8,4), %xmm1
    0000035d: 	leal	(%r15,%rsi), %r8d
    00000361: 	addl	%ecx, %esi
    00000363: 	movslq	%r8d, %r8
    00000366: 	movslq	%esi, %rsi
    00000369: 	movups	(%rax,%r8,4), %xmm4
    0000036e: 	addps	%xmm4, %xmm1
    00000371: 	movups	(%rax,%rdi,4), %xmm4
    00000375: 	addps	%xmm4, %xmm1
    00000378: 	addps	%xmm1, %xmm0
    0000037b: 	pxor	%xmm1, %xmm1
    0000037f: 	addps	%xmm1, %xmm0
    00000382: 	mulps	%xmm2, %xmm0
    00000385: 	movups	%xmm0, (%r13,%rsi,4)
.Ltmp227:
    0000038b: 	movl	-0x50(%rsp), %esi
.Ltmp224:
    0000038f: 	cmpl	-0x5c(%rsp), %esi
    00000393: 	jge	.Ltmp230 # Offset: 915
    00000399: 	movslq	%esi, %r10
    0000039c: 	movslq	%ecx, %rdi
    0000039f: 	movslq	%edx, %r9
    000003a2: 	movl	-0x60(%rsp), %r8d
    000003a7: 	leaq	(%rdi,%r10), %r12
    000003ab: 	movslq	%r15d, %rdi
    000003ae: 	addq	%r10, %r9
    000003b1: 	addq	%r10, %rdi
    000003b4: 	movq	%r13, %r10
    000003b7: 	subl	%esi, %r8d
    000003ba: 	subq	%rax, %r10
    000003bd: 	leaq	0x4(,%r9,4), %r14
    000003c5: 	leaq	(,%r12,4), %rbx
    000003cd: 	movq	%rdi, -0x68(%rsp)
    000003d2: 	cmpq	$0x10, %r10
    000003d6: 	movq	%r14, -0x48(%rsp)
    000003db: 	leaq	(%r13,%rbx), %r11
    000003e0: 	leaq	0x4(,%rdi,4), %rbp
    000003e8: 	seta	%r10b
    000003ec: 	cmpl	$0x2, %r8d
    000003f0: 	movq	%r11, %rdi
    000003f3: 	setne	%r14b
    000003f7: 	andl	%r14d, %r10d
    000003fa: 	leaq	(%rax,%rbp), %r14
    000003fe: 	subq	%r14, %rdi
    00000401: 	cmpq	$0x8, %rdi
    00000405: 	seta	%r14b
    00000409: 	testb	%r14b, %r10b
    0000040c: 	je	.Ltmp231 # Offset: 1036
    00000412: 	leaq	0x4(,%r9,4), %rdi
    0000041a: 	movq	%r11, %r10
    0000041d: 	movq	%rdi, %r14
    00000420: 	addq	%rax, %r14
    00000423: 	subq	%r14, %r10
    00000426: 	cmpq	$0x8, %r10
    0000042a: 	jbe	.Ltmp231 # Offset: 1066
    00000430: 	leal	-0x2(%r8), %r14d
    00000434: 	leal	-0x1(%r8), %r10d
    00000438: 	cmpl	$0x2, %r14d
    0000043c: 	jbe	.Ltmp232 # Offset: 1084
    00000442: 	movups	-0x4(%rax,%rbx), %xmm1
    00000447: 	movups	0x4(%rax,%rbx), %xmm0
    0000044c: 	addps	%xmm1, %xmm0
    0000044f: 	movups	-0x4(%rax,%rbp), %xmm1
    00000454: 	addps	%xmm1, %xmm0
    00000457: 	movups	-0x4(%rax,%rdi), %xmm1
    0000045c: 	addps	%xmm1, %xmm0
    0000045f: 	pxor	%xmm1, %xmm1
    00000463: 	addps	%xmm1, %xmm0
    00000466: 	mulps	%xmm2, %xmm0
    00000469: 	movups	%xmm0, (%r11)
    0000046d: 	movl	%r10d, %r11d
    00000470: 	andl	$-0x4, %r11d
    00000474: 	addl	%r11d, %esi
    00000477: 	cmpl	%r10d, %r11d
    0000047a: 	je	.Ltmp230 # Offset: 1146
    00000480: 	subl	%r11d, %r8d
    00000483: 	leal	-0x1(%r8), %r10d
    00000487: 	cmpl	$0x2, %r8d
    0000048b: 	je	.Ltmp233 # Offset: 1163
.Ltmp236:
    0000048d: 	movl	%r11d, %r8d
    00000490: 	movq	-0x68(%rsp), %rdi
    00000495: 	leaq	(%r8,%r12), %r11
    00000499: 	leaq	(,%r11,4), %rbx
    000004a1: 	addq	%r8, %rdi
    000004a4: 	addq	%r9, %r8
    000004a7: 	movq	-0x4(%rax,%rbx), %xmm1
    000004ad: 	movq	0x4(%rax,%rbx), %xmm0
    000004b3: 	addps	%xmm1, %xmm0
    000004b6: 	movq	(%rax,%rdi,4), %xmm1
    000004bb: 	movl	%r10d, %edi
    000004be: 	andl	$-0x2, %edi
    000004c1: 	addl	%edi, %esi
    000004c3: 	addps	%xmm1, %xmm0
    000004c6: 	movq	(%rax,%r8,4), %xmm1
    000004cc: 	addps	%xmm1, %xmm0
    000004cf: 	xorps	%xmm1, %xmm1
    000004d2: 	addps	%xmm1, %xmm0
    000004d5: 	movq	DATAat0x49420(%rip), %xmm1
    000004dd: 	mulps	%xmm1, %xmm0
    000004e0: 	movlps	%xmm0, (%r13,%r11,4)
    000004e6: 	cmpl	%r10d, %edi
    000004e9: 	je	.Ltmp230 # Offset: 1257
.Ltmp233:
    000004eb: 	leal	(%r15,%rsi), %edi
    000004ef: 	leal	0x1(%rsi,%rcx), %r9d
    000004f4: 	leal	-0x1(%rsi,%rcx), %r8d
    000004f9: 	movslq	%edi, %rdi
    000004fc: 	movslq	%r9d, %r9
    000004ff: 	movslq	%r8d, %r8
    00000502: 	movss	(%rax,%r9,4), %xmm0
    00000508: 	addss	(%rax,%r8,4), %xmm0
    0000050e: 	addss	(%rax,%rdi,4), %xmm0
    00000513: 	leal	(%rcx,%rsi), %edi
    00000516: 	addl	%edx, %esi
    00000518: 	movslq	%esi, %rsi
    0000051b: 	movslq	%edi, %rdi
    0000051e: 	addss	(%rax,%rsi,4), %xmm0
    00000523: 	addss	DATAat0x49400(%rip), %xmm0
    0000052b: 	mulss	DATAat0x49420(%rip), %xmm0
    00000533: 	movss	%xmm0, (%r13,%rdi,4)
.Ltmp230:
    0000053a: 	movl	-0x54(%rsp), %ebx
    0000053e: 	movl	-0x6c(%rsp), %esi
    00000542: 	addl	%ebx, %r15d
    00000545: 	addl	%ebx, %ecx
    00000547: 	addl	%ebx, %edx
    00000549: 	cmpl	%esi, -0x58(%rsp)
    0000054d: 	jne	.Ltmp234 # Offset: 1357
.Ltmp223:
    00000553: 	popq	%rbx
    00000554: 	popq	%rbp
    00000555: 	popq	%r12
    00000557: 	popq	%r13
    00000559: 	popq	%r14
    0000055b: 	popq	%r15
    0000055d: 	retq # Offset: 1373
    0000055e: 	nop # Size: 2
.Ltmp225:
    00000560: 	subq	$0x4, %rdi
    00000564: 	addq	-0x18(%rsp), %rbx
    00000569: 	leaq	-0x14(%rax,%rbp), %r8
    0000056e: 	leaq	(%rax,%rdi), %rsi
    00000572: 	leaq	-0x14(%rax,%r12), %r9
    00000577: 	pxor	%xmm6, %xmm6
    0000057b: 	addq	%r13, %rdi
    0000057e: 	leaq	0x10(%rax,%rbx,4), %r10
    00000583: 	nopl	(%rax,%rax) # Size: 5
.Ltmp235:
    00000588: 	movups	0x4(%r8), %xmm5
    0000058d: 	movups	(%rsi), %xmm0
    00000590: 	addq	$0x10, %r8
    00000594: 	addq	$0x10, %rsi
    00000598: 	movss	0x10(%r9), %xmm1
    0000059e: 	movss	0xc(%r9), %xmm4
    000005a4: 	addq	$0x10, %rdi
    000005a8: 	addq	$0x10, %r9
    000005ac: 	addps	%xmm5, %xmm0
    000005af: 	movups	-0x8(%rsi), %xmm5
    000005b3: 	unpcklps	%xmm1, %xmm4
    000005b6: 	movss	-0xc(%r9), %xmm1
    000005bc: 	addps	%xmm5, %xmm0
    000005bf: 	movss	-0x8(%r9), %xmm5
    000005c5: 	unpcklps	%xmm5, %xmm1
    000005c8: 	movlhps	%xmm4, %xmm1
    000005cb: 	addps	%xmm1, %xmm0
    000005ce: 	addps	%xmm6, %xmm0
    000005d1: 	mulps	%xmm2, %xmm0
    000005d4: 	movups	%xmm0, -0xc(%rdi)
    000005d8: 	cmpq	%r10, %r8
    000005db: 	jne	.Ltmp235 # Offset: 1499
    000005dd: 	jmp	.Ltmp227 # Offset: 1501
    000005e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp231:
    000005e8: 	leal	0x1(%rsi), %edi
    000005eb: 	movq	-0x48(%rsp), %rbx
    000005f0: 	pxor	%xmm1, %xmm1
    000005f4: 	leal	-0x1(%rsi,%rcx), %r9d
    000005f9: 	leal	(%rdi,%rcx), %r8d
    000005fd: 	movslq	%r9d, %r9
    00000600: 	movl	-0x5c(%rsp), %r14d
    00000605: 	movss	DATAat0x49420(%rip), %xmm4
    0000060d: 	movslq	%r8d, %r8
    00000610: 	movss	(%rax,%r9,4), %xmm0
    00000616: 	leaq	(%rax,%r8,4), %r10
    0000061a: 	addss	(%r10), %xmm0
    0000061f: 	addss	-0x4(%rax,%rbp), %xmm0
    00000625: 	addss	-0x4(%rax,%rbx), %xmm0
    0000062b: 	addss	%xmm1, %xmm0
    0000062f: 	mulss	%xmm4, %xmm0
    00000633: 	movss	%xmm0, (%r11)
    00000638: 	cmpl	%r14d, %edi
    0000063b: 	jge	.Ltmp230 # Offset: 1595
    00000641: 	leal	0x2(%rsi), %r9d
    00000645: 	leal	(%rdi,%r15), %ebx
    00000649: 	addl	%edx, %edi
    0000064b: 	movss	(%rax,%r12,4), %xmm0
    00000651: 	leal	(%r9,%rcx), %r11d
    00000655: 	movslq	%ebx, %rbx
    00000658: 	movslq	%edi, %rdi
    0000065b: 	movslq	%r11d, %r11
    0000065e: 	leaq	(%rax,%r11,4), %rbp
    00000662: 	addss	(%rbp), %xmm0
    00000667: 	addss	(%rax,%rbx,4), %xmm0
    0000066c: 	addss	(%rax,%rdi,4), %xmm0
    00000671: 	addss	%xmm1, %xmm0
    00000675: 	mulss	%xmm4, %xmm0
    00000679: 	movss	%xmm0, (%r13,%r8,4)
    00000680: 	cmpl	%r14d, %r9d
    00000683: 	jge	.Ltmp230 # Offset: 1667
    00000689: 	leal	0x3(%rsi), %edi
    0000068c: 	leal	(%r9,%r15), %ebx
    00000690: 	addl	%edx, %r9d
    00000693: 	leal	(%rdi,%rcx), %r8d
    00000697: 	movslq	%ebx, %rbx
    0000069a: 	movslq	%r9d, %r9
    0000069d: 	movslq	%r8d, %r8
    000006a0: 	movss	(%rax,%r8,4), %xmm0
    000006a6: 	addss	(%r10), %xmm0
    000006ab: 	addss	(%rax,%rbx,4), %xmm0
    000006b0: 	addss	(%rax,%r9,4), %xmm0
    000006b6: 	addss	%xmm1, %xmm0
    000006ba: 	mulss	%xmm4, %xmm0
    000006be: 	movss	%xmm0, (%r13,%r11,4)
    000006c5: 	cmpl	%r14d, %edi
    000006c8: 	jge	.Ltmp230 # Offset: 1736
    000006ce: 	leal	0x4(%rsi,%rcx), %esi
    000006d2: 	leal	(%rdi,%r15), %r9d
    000006d6: 	movslq	%esi, %rsi
    000006d9: 	movslq	%r9d, %r9
    000006dc: 	movss	(%rax,%rsi,4), %xmm0
    000006e1: 	leal	(%rdi,%rdx), %esi
    000006e4: 	addss	(%rbp), %xmm0
    000006e9: 	movslq	%esi, %rsi
    000006ec: 	addss	(%rax,%r9,4), %xmm0
    000006f2: 	addss	(%rax,%rsi,4), %xmm0
    000006f7: 	addss	%xmm1, %xmm0
    000006fb: 	mulss	%xmm4, %xmm0
    000006ff: 	movss	%xmm0, (%r13,%r8,4)
    00000706: 	jmp	.Ltmp230 # Offset: 1798
.Ltmp232:
    0000070b: 	xorl	%r11d, %r11d
    0000070e: 	jmp	.Ltmp236 # Offset: 1806
.Ltmp228:
    00000713: 	movl	-0xc(%rsp), %esi
    00000717: 	jmp	.Ltmp237 # Offset: 1815
DWARF CFI Instructions:
    <empty>
End of Function "_ZN17jacobi2D_unrolledIffEclEPKfPfiiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled2IllEclEPlS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled2IllEclEPlS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled2IllEclEPlS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 60
  State       : disassembled
  Address     : 0xf3d0
  Size        : 0x365
  MaxSize     : 0x370
  Offset      : 0xf3d0
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled2IllEclEPlS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%ecx, -0x20(%rsp)
    00000011: 	movl	%eax, -0x24(%rsp)
    00000015: 	cmpl	$0x1, %eax
    00000018: 	jle	.Ltmp238 # Offset: 24
    0000001e: 	leal	-0x1(%rcx), %eax
    00000021: 	movq	%rdi, %rbx
    00000024: 	movq	%rsi, %r12
    00000027: 	movl	%r8d, %r15d
    0000002a: 	movl	%eax, -0x28(%rsp)
    0000002e: 	leal	-0x6(%rcx), %eax
    00000031: 	leal	(%r8,%r8), %r14d
    00000035: 	movl	%r8d, %ebp
    00000038: 	shrl	$0x2, %eax
    0000003b: 	movl	$0x1, -0x2c(%rsp)
    00000043: 	xorl	%r13d, %r13d
    00000046: 	movl	%eax, %edx
    00000048: 	leal	0x5(,%rax,4), %eax
    0000004f: 	movl	%eax, -0x1c(%rsp)
    00000053: 	leaq	(,%rdx,4), %rdi
    0000005b: 	leaq	0x20(%rsi), %rax
    0000005f: 	movq	%rdi, -0x18(%rsp)
    00000064: 	movq	%rax, -0x10(%rsp)
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp242:
    00000070: 	addl	$0x1, -0x2c(%rsp)
    00000075: 	cmpl	$0x5, -0x20(%rsp)
    0000007a: 	movl	$0x1, %ecx
    0000007f: 	jle	.Ltmp239 # Offset: 127
    00000085: 	movslq	%ebp, %rax
    00000088: 	movslq	%r13d, %rsi
    0000008b: 	movq	-0x10(%rsp), %r11
    00000090: 	leaq	(,%rax,8), %rdx
    00000098: 	leaq	(%rbx,%rsi,8), %rdi
    0000009c: 	movslq	%r14d, %rsi
    0000009f: 	addq	-0x18(%rsp), %rax
    000000a4: 	leaq	(%r12,%rdx), %rcx
    000000a8: 	leaq	(%rbx,%rsi,8), %rsi
    000000ac: 	addq	%rbx, %rdx
    000000af: 	leaq	(%r11,%rax,8), %r11
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp240:
    000000b8: 	movq	0x10(%rdx), %rax
    000000bc: 	movq	0x18(%rdi), %r10
    000000c0: 	movq	0x18(%rdx), %r8
    000000c4: 	movdqu	0x18(%rcx), %xmm3
    000000c9: 	addq	%rax, %r10
    000000cc: 	addq	0x20(%rdx), %r10
    000000d0: 	addq	0x18(%rsi), %r10
    000000d4: 	leaq	0x5(%r10), %r9
    000000d8: 	addq	$0x2, %r10
    000000dc: 	movdqu	0x8(%rcx), %xmm5
    000000e1: 	cmovnsq	%r10, %r9
    000000e5: 	movq	0x18(%rcx), %r10
    000000e9: 	sarq	$0x2, %r9
    000000ed: 	subq	%r10, %r9
    000000f0: 	imulq	$0x71, %r9, %r9
    000000f4: 	sarq	$0x6, %r9
    000000f8: 	movq	%r9, %xmm0
    000000fd: 	movq	0x20(%rdi), %r9
    00000101: 	addq	%r8, %r9
    00000104: 	addq	0x28(%rdx), %r9
    00000108: 	addq	0x20(%rsi), %r9
    0000010c: 	leaq	0x5(%r9), %r10
    00000110: 	addq	$0x2, %r9
    00000114: 	cmovnsq	%r9, %r10
    00000118: 	movq	0x20(%rcx), %r9
    0000011c: 	sarq	$0x2, %r10
    00000120: 	subq	%r9, %r10
    00000123: 	movq	(%rdx), %r9
    00000126: 	addq	0x8(%rdi), %r9
    0000012a: 	imulq	$0x71, %r10, %r10
    0000012e: 	addq	%rax, %r9
    00000131: 	addq	0x8(%rsi), %r9
    00000135: 	leaq	0x5(%r9), %rax
    00000139: 	sarq	$0x6, %r10
    0000013d: 	addq	$0x2, %r9
    00000141: 	cmovnsq	%r9, %rax
    00000145: 	movq	0x8(%rcx), %r9
    00000149: 	movq	%r10, %xmm2
    0000014e: 	punpcklqdq	%xmm2, %xmm0
    00000152: 	sarq	$0x2, %rax
    00000156: 	paddq	%xmm3, %xmm0
    0000015a: 	subq	%r9, %rax
    0000015d: 	imulq	$0x71, %rax, %rax
    00000161: 	sarq	$0x6, %rax
    00000165: 	movq	%rax, %xmm1
    0000016a: 	movq	0x8(%rdx), %rax
    0000016e: 	addq	0x10(%rdi), %rax
    00000172: 	addq	%rax, %r8
    00000175: 	addq	0x10(%rsi), %r8
    00000179: 	movups	%xmm0, 0x18(%rcx)
    0000017d: 	leaq	0x5(%r8), %rax
    00000181: 	addq	$0x2, %r8
    00000185: 	cmovnsq	%r8, %rax
    00000189: 	movq	0x10(%rcx), %r8
    0000018d: 	addq	$0x20, %rcx
    00000191: 	addq	$0x20, %rdi
    00000195: 	addq	$0x20, %rdx
    00000199: 	addq	$0x20, %rsi
    0000019d: 	sarq	$0x2, %rax
    000001a1: 	subq	%r8, %rax
    000001a4: 	imulq	$0x71, %rax, %rax
    000001a8: 	sarq	$0x6, %rax
    000001ac: 	movq	%rax, %xmm4
    000001b1: 	punpcklqdq	%xmm4, %xmm1
    000001b5: 	paddq	%xmm5, %xmm1
    000001b9: 	movups	%xmm1, -0x18(%rcx)
    000001bd: 	cmpq	%rcx, %r11
    000001c0: 	jne	.Ltmp240 # Offset: 448
    000001c6: 	movl	-0x1c(%rsp), %ecx
.Ltmp239:
    000001ca: 	cmpl	-0x28(%rsp), %ecx
    000001ce: 	jge	.Ltmp241 # Offset: 462
    000001d4: 	leal	0x1(%rcx), %edi
    000001d7: 	leal	(%r13,%rcx), %eax
    000001dc: 	movl	-0x28(%rsp), %r11d
    000001e1: 	leal	-0x1(%rcx,%rbp), %edx
    000001e5: 	leal	(%rbp,%rdi), %esi
    000001e9: 	cltq
    000001eb: 	movslq	%edx, %rdx
    000001ee: 	movslq	%esi, %rsi
    000001f1: 	leal	(%rbp,%rcx), %r8d
    000001f6: 	movq	(%rbx,%rdx,8), %rdx
    000001fa: 	shlq	$0x3, %rsi
    000001fe: 	addq	(%rbx,%rax,8), %rdx
    00000202: 	leal	(%r14,%rcx), %eax
    00000206: 	cltq
    00000208: 	leaq	(%rbx,%rsi), %r10
    0000020c: 	movslq	%r8d, %r8
    0000020f: 	addq	(%r10), %rdx
    00000212: 	addq	(%rbx,%rax,8), %rdx
    00000216: 	leaq	(%r12,%r8,8), %r9
    0000021a: 	leaq	0x5(%rdx), %rax
    0000021e: 	addq	$0x2, %rdx
    00000222: 	cmovnsq	%rdx, %rax
    00000226: 	sarq	$0x2, %rax
    0000022a: 	subq	(%r9), %rax
    0000022d: 	imulq	$0x71, %rax, %rax
    00000231: 	sarq	$0x6, %rax
    00000235: 	addq	(%r9), %rax
    00000238: 	movq	%rax, (%r9)
    0000023b: 	cmpl	%edi, %r11d
    0000023e: 	jle	.Ltmp241 # Offset: 574
    00000244: 	leal	(%r13,%rdi), %edx
    00000249: 	movq	(%rbx,%r8,8), %rax
    0000024d: 	leal	0x2(%rcx), %r8d
    00000251: 	addl	%r14d, %edi
    00000254: 	movslq	%edx, %rdx
    00000257: 	movslq	%edi, %rdi
    0000025a: 	addq	%r12, %rsi
    0000025d: 	addq	(%rbx,%rdx,8), %rax
    00000261: 	leal	(%rbp,%r8), %edx
    00000266: 	movslq	%edx, %rdx
    00000269: 	shlq	$0x3, %rdx
    0000026d: 	leaq	(%rbx,%rdx), %r9
    00000271: 	addq	(%r9), %rax
    00000274: 	addq	(%rbx,%rdi,8), %rax
    00000278: 	movq	%rax, %rdi
    0000027b: 	leaq	0x5(%rax), %rax
    0000027f: 	addq	$0x2, %rdi
    00000283: 	cmovnsq	%rdi, %rax
    00000287: 	sarq	$0x2, %rax
    0000028b: 	subq	(%rsi), %rax
    0000028e: 	imulq	$0x71, %rax, %rax
    00000292: 	sarq	$0x6, %rax
    00000296: 	addq	(%rsi), %rax
    00000299: 	movq	%rax, (%rsi)
    0000029c: 	cmpl	%r8d, %r11d
    0000029f: 	jle	.Ltmp241 # Offset: 671
    000002a5: 	leal	(%r13,%r8), %esi
    000002aa: 	movq	(%r10), %rax
    000002ad: 	addl	%r14d, %r8d
    000002b0: 	addq	%r12, %rdx
    000002b3: 	movslq	%esi, %rsi
    000002b6: 	movslq	%r8d, %r8
    000002b9: 	addq	(%rbx,%rsi,8), %rax
    000002bd: 	leal	0x3(%rcx), %esi
    000002c0: 	leal	(%rbp,%rsi), %edi
    000002c4: 	movslq	%edi, %rdi
    000002c7: 	addq	(%rbx,%rdi,8), %rax
    000002cb: 	addq	(%rbx,%r8,8), %rax
    000002cf: 	leaq	(,%rdi,8), %r10
    000002d7: 	leaq	0x5(%rax), %rdi
    000002db: 	addq	$0x2, %rax
    000002df: 	cmovsq	%rdi, %rax
    000002e3: 	sarq	$0x2, %rax
    000002e7: 	subq	(%rdx), %rax
    000002ea: 	imulq	$0x71, %rax, %rax
    000002ee: 	sarq	$0x6, %rax
    000002f2: 	addq	(%rdx), %rax
    000002f5: 	movq	%rax, (%rdx)
    000002f8: 	cmpl	%esi, %r11d
    000002fb: 	jle	.Ltmp241 # Offset: 763
    000002fd: 	leal	(%r13,%rsi), %eax
    00000302: 	movq	(%r9), %rdx
    00000305: 	addl	%r14d, %esi
    00000308: 	addq	%r12, %r10
    0000030b: 	cltq
    0000030d: 	movslq	%esi, %rsi
    00000310: 	addq	(%rbx,%rax,8), %rdx
    00000314: 	leal	0x4(%rcx,%rbp), %eax
    00000318: 	cltq
    0000031a: 	addq	(%rbx,%rax,8), %rdx
    0000031e: 	addq	(%rbx,%rsi,8), %rdx
    00000322: 	leaq	0x5(%rdx), %rax
    00000326: 	addq	$0x2, %rdx
    0000032a: 	cmovnsq	%rdx, %rax
    0000032e: 	sarq	$0x2, %rax
    00000332: 	subq	(%r10), %rax
    00000335: 	imulq	$0x71, %rax, %rax
    00000339: 	sarq	$0x6, %rax
    0000033d: 	addq	(%r10), %rax
    00000340: 	movq	%rax, (%r10)
.Ltmp241:
    00000343: 	movl	-0x2c(%rsp), %edi
    00000347: 	addl	%r15d, %r13d
    0000034a: 	addl	%r15d, %ebp
    0000034d: 	addl	%r15d, %r14d
    00000350: 	cmpl	%edi, -0x24(%rsp)
    00000354: 	jne	.Ltmp242 # Offset: 852
.Ltmp238:
    0000035a: 	popq	%rbx
    0000035b: 	popq	%rbp
    0000035c: 	popq	%r12
    0000035e: 	popq	%r13
    00000360: 	popq	%r14
    00000362: 	popq	%r15
    00000364: 	retq # Offset: 868
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled2IllEclEPlS1_iiii.isra.0/1(*2)"

Binary Function "_ZN21jacobi_sor2D_unrolledIllEclEPlS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN21jacobi_sor2D_unrolledIllEclEPlS1_iiii.isra.0/1
                _ZN21jacobi_sor2D_unrolledIllEclEPlS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 61
  State       : disassembled
  Address     : 0xf740
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0xf740
  Section     : .text
  Orc Section : .local.text._ZN21jacobi_sor2D_unrolledIllEclEPlS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x30(%rsp)
    00000012: 	movl	%ecx, -0x20(%rsp)
    00000016: 	movl	%eax, -0x24(%rsp)
    0000001a: 	cmpl	$0x1, %eax
    0000001d: 	jle	.Ltmp243 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %eax
    00000026: 	movq	%rdi, %rbx
    00000029: 	movl	%r8d, %r15d
    0000002c: 	movl	%r8d, %r12d
    0000002f: 	movl	%eax, -0x28(%rsp)
    00000033: 	leal	-0x6(%rcx), %eax
    00000036: 	leal	(%r8,%r8), %r14d
    0000003a: 	xorl	%r13d, %r13d
    0000003d: 	shrl	$0x2, %eax
    00000040: 	movl	$0x1, -0x34(%rsp)
    00000048: 	movl	%eax, %edx
    0000004a: 	leal	0x5(,%rax,4), %eax
    00000051: 	movl	%eax, -0x1c(%rsp)
    00000055: 	leaq	(,%rdx,4), %rcx
    0000005d: 	leaq	0x20(%rsi), %rax
    00000061: 	movq	%rcx, -0x18(%rsp)
    00000066: 	movq	%rax, -0x10(%rsp)
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp247:
    00000070: 	addl	$0x1, -0x34(%rsp)
    00000075: 	cmpl	$0x5, -0x20(%rsp)
    0000007a: 	movl	$0x1, %ecx
    0000007f: 	jle	.Ltmp244 # Offset: 127
    00000085: 	movq	-0x30(%rsp), %rcx
    0000008a: 	movslq	%r12d, %rax
    0000008d: 	movslq	%r13d, %rdx
    00000090: 	leaq	(,%rax,8), %r8
    00000098: 	leaq	(%rbx,%rdx,8), %r11
    0000009c: 	movslq	%r14d, %rdx
    0000009f: 	addq	-0x18(%rsp), %rax
    000000a4: 	leaq	(%rcx,%r8), %r9
    000000a8: 	movq	-0x10(%rsp), %rcx
    000000ad: 	addq	%rbx, %r8
    000000b0: 	leaq	(%rbx,%rdx,8), %r10
    000000b4: 	leaq	(%rcx,%rax,8), %rbp
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp245:
    000000c0: 	movq	0x10(%r8), %rdi
    000000c4: 	movq	0x18(%r8), %rax
    000000c8: 	movq	(%r8), %rcx
    000000cb: 	addq	0x8(%r11), %rcx
    000000cf: 	movq	0x8(%r8), %rdx
    000000d3: 	addq	%rdi, %rcx
    000000d6: 	addq	0x10(%r11), %rdx
    000000da: 	addq	0x18(%r11), %rdi
    000000de: 	addq	0x20(%r8), %rdi
    000000e2: 	addq	%rax, %rdx
    000000e5: 	addq	0x18(%r10), %rdi
    000000e9: 	addq	0x20(%r11), %rax
    000000ed: 	leaq	0x5(%rdi), %rsi
    000000f1: 	addq	0x28(%r8), %rax
    000000f5: 	addq	$0x2, %rdi
    000000f9: 	movdqu	0x18(%r9), %xmm3
    000000ff: 	cmovnsq	%rdi, %rsi
    00000103: 	movq	0x18(%r9), %rdi
    00000107: 	addq	0x20(%r10), %rax
    0000010b: 	movdqu	0x8(%r9), %xmm5
    00000111: 	sarq	$0x2, %rsi
    00000115: 	subq	%rdi, %rsi
    00000118: 	movq	0x20(%r9), %rdi
    0000011c: 	imulq	$0x71, %rsi, %rsi
    00000120: 	sarq	$0x6, %rsi
    00000124: 	movq	%rsi, %xmm0
    00000129: 	leaq	0x5(%rax), %rsi
    0000012d: 	addq	$0x2, %rax
    00000131: 	cmovsq	%rsi, %rax
    00000135: 	addq	0x8(%r10), %rcx
    00000139: 	sarq	$0x2, %rax
    0000013d: 	subq	%rdi, %rax
    00000140: 	imulq	$0x71, %rax, %rax
    00000144: 	sarq	$0x6, %rax
    00000148: 	movq	%rax, %xmm2
    0000014d: 	leaq	0x5(%rcx), %rax
    00000151: 	addq	$0x2, %rcx
    00000155: 	cmovnsq	%rcx, %rax
    00000159: 	movq	0x8(%r9), %rcx
    0000015d: 	addq	0x10(%r10), %rdx
    00000161: 	punpcklqdq	%xmm2, %xmm0
    00000165: 	paddq	%xmm3, %xmm0
    00000169: 	sarq	$0x2, %rax
    0000016d: 	movups	%xmm0, 0x18(%r9)
    00000172: 	subq	%rcx, %rax
    00000175: 	imulq	$0x71, %rax, %rax
    00000179: 	sarq	$0x6, %rax
    0000017d: 	movq	%rax, %xmm1
    00000182: 	leaq	0x5(%rdx), %rax
    00000186: 	addq	$0x2, %rdx
    0000018a: 	cmovnsq	%rdx, %rax
    0000018e: 	movq	0x10(%r9), %rdx
    00000192: 	addq	$0x20, %r9
    00000196: 	addq	$0x20, %r11
    0000019a: 	addq	$0x20, %r8
    0000019e: 	addq	$0x20, %r10
    000001a2: 	sarq	$0x2, %rax
    000001a6: 	subq	%rdx, %rax
    000001a9: 	imulq	$0x71, %rax, %rax
    000001ad: 	sarq	$0x6, %rax
    000001b1: 	movq	%rax, %xmm4
    000001b6: 	punpcklqdq	%xmm4, %xmm1
    000001ba: 	paddq	%xmm5, %xmm1
    000001be: 	movups	%xmm1, -0x18(%r9)
    000001c3: 	cmpq	%r9, %rbp
    000001c6: 	jne	.Ltmp245 # Offset: 454
    000001cc: 	movl	-0x1c(%rsp), %ecx
.Ltmp244:
    000001d0: 	cmpl	-0x28(%rsp), %ecx
    000001d4: 	jge	.Ltmp246 # Offset: 468
    000001da: 	leal	0x1(%rcx), %edi
    000001dd: 	movq	-0x30(%rsp), %r11
    000001e2: 	leal	(%r12,%rcx), %r8d
    000001e6: 	movl	-0x28(%rsp), %ebp
    000001ea: 	leal	(%r13,%rcx), %eax
    000001ef: 	leal	-0x1(%rcx,%r12), %edx
    000001f4: 	movslq	%r8d, %r8
    000001f7: 	leal	(%r12,%rdi), %esi
    000001fb: 	cltq
    000001fd: 	leaq	(%r11,%r8,8), %r9
    00000201: 	movslq	%edx, %rdx
    00000204: 	movslq	%esi, %rsi
    00000207: 	movq	(%rbx,%rdx,8), %rdx
    0000020b: 	addq	(%rbx,%rax,8), %rdx
    0000020f: 	leal	(%r14,%rcx), %eax
    00000213: 	shlq	$0x3, %rsi
    00000217: 	cltq
    00000219: 	leaq	(%rbx,%rsi), %r10
    0000021d: 	addq	(%r10), %rdx
    00000220: 	addq	(%rbx,%rax,8), %rdx
    00000224: 	leaq	0x5(%rdx), %rax
    00000228: 	addq	$0x2, %rdx
    0000022c: 	cmovnsq	%rdx, %rax
    00000230: 	sarq	$0x2, %rax
    00000234: 	subq	(%r9), %rax
    00000237: 	imulq	$0x71, %rax, %rax
    0000023b: 	sarq	$0x6, %rax
    0000023f: 	addq	(%r9), %rax
    00000242: 	movq	%rax, (%r9)
    00000245: 	cmpl	%edi, %ebp
    00000247: 	jle	.Ltmp246 # Offset: 583
    0000024d: 	leal	(%r13,%rdi), %edx
    00000252: 	movq	(%rbx,%r8,8), %rax
    00000256: 	leal	0x2(%rcx), %r8d
    0000025a: 	addl	%r14d, %edi
    0000025d: 	movslq	%edx, %rdx
    00000260: 	movslq	%edi, %rdi
    00000263: 	addq	%r11, %rsi
    00000266: 	addq	(%rbx,%rdx,8), %rax
    0000026a: 	leal	(%r12,%r8), %edx
    0000026e: 	movslq	%edx, %rdx
    00000271: 	shlq	$0x3, %rdx
    00000275: 	leaq	(%rbx,%rdx), %r9
    00000279: 	addq	(%r9), %rax
    0000027c: 	addq	(%rbx,%rdi,8), %rax
    00000280: 	movq	%rax, %rdi
    00000283: 	leaq	0x5(%rax), %rax
    00000287: 	addq	$0x2, %rdi
    0000028b: 	cmovnsq	%rdi, %rax
    0000028f: 	sarq	$0x2, %rax
    00000293: 	subq	(%rsi), %rax
    00000296: 	imulq	$0x71, %rax, %rax
    0000029a: 	sarq	$0x6, %rax
    0000029e: 	addq	(%rsi), %rax
    000002a1: 	movq	%rax, (%rsi)
    000002a4: 	cmpl	%r8d, %ebp
    000002a7: 	jle	.Ltmp246 # Offset: 679
    000002ad: 	leal	(%r13,%r8), %esi
    000002b2: 	movq	(%r10), %rax
    000002b5: 	addl	%r14d, %r8d
    000002b8: 	addq	%r11, %rdx
    000002bb: 	movslq	%esi, %rsi
    000002be: 	movslq	%r8d, %r8
    000002c1: 	addq	(%rbx,%rsi,8), %rax
    000002c5: 	leal	0x3(%rcx), %esi
    000002c8: 	leal	(%r12,%rsi), %edi
    000002cc: 	movslq	%edi, %rdi
    000002cf: 	addq	(%rbx,%rdi,8), %rax
    000002d3: 	addq	(%rbx,%r8,8), %rax
    000002d7: 	leaq	(,%rdi,8), %r10
    000002df: 	leaq	0x5(%rax), %rdi
    000002e3: 	addq	$0x2, %rax
    000002e7: 	cmovsq	%rdi, %rax
    000002eb: 	sarq	$0x2, %rax
    000002ef: 	subq	(%rdx), %rax
    000002f2: 	imulq	$0x71, %rax, %rax
    000002f6: 	sarq	$0x6, %rax
    000002fa: 	addq	(%rdx), %rax
    000002fd: 	movq	%rax, (%rdx)
    00000300: 	cmpl	%esi, %ebp
    00000302: 	jle	.Ltmp246 # Offset: 770
    00000304: 	leal	(%r13,%rsi), %eax
    00000309: 	movq	(%r9), %rdx
    0000030c: 	addl	%r14d, %esi
    0000030f: 	addq	%r11, %r10
    00000312: 	cltq
    00000314: 	movslq	%esi, %rsi
    00000317: 	addq	(%rbx,%rax,8), %rdx
    0000031b: 	leal	0x4(%rcx,%r12), %eax
    00000320: 	cltq
    00000322: 	addq	(%rbx,%rax,8), %rdx
    00000326: 	addq	(%rbx,%rsi,8), %rdx
    0000032a: 	leaq	0x5(%rdx), %rax
    0000032e: 	addq	$0x2, %rdx
    00000332: 	cmovnsq	%rdx, %rax
    00000336: 	sarq	$0x2, %rax
    0000033a: 	subq	(%r10), %rax
    0000033d: 	imulq	$0x71, %rax, %rax
    00000341: 	sarq	$0x6, %rax
    00000345: 	addq	(%r10), %rax
    00000348: 	movq	%rax, (%r10)
.Ltmp246:
    0000034b: 	movl	-0x34(%rsp), %ecx
    0000034f: 	addl	%r15d, %r13d
    00000352: 	addl	%r15d, %r12d
    00000355: 	addl	%r15d, %r14d
    00000358: 	cmpl	%ecx, -0x24(%rsp)
    0000035c: 	jne	.Ltmp247 # Offset: 860
.Ltmp243:
    00000362: 	popq	%rbx
    00000363: 	popq	%rbp
    00000364: 	popq	%r12
    00000366: 	popq	%r13
    00000368: 	popq	%r14
    0000036a: 	popq	%r15
    0000036c: 	retq # Offset: 876
DWARF CFI Instructions:
    <empty>
End of Function "_ZN21jacobi_sor2D_unrolledIllEclEPlS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled2IllEclEPKlPliiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled2IllEclEPKlPliiii.isra.0/1
                _ZN18jacobi2D_unrolled2IllEclEPKlPliiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 62
  State       : disassembled
  Address     : 0xfab0
  Size        : 0x2b5
  MaxSize     : 0x2c0
  Offset      : 0xfab0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled2IllEclEPKlPliiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%ecx, -0x20(%rsp)
    00000011: 	movl	%eax, -0x24(%rsp)
    00000015: 	cmpl	$0x1, %eax
    00000018: 	jle	.Ltmp248 # Offset: 24
    0000001e: 	leal	-0x1(%rcx), %eax
    00000021: 	movq	%rdi, %rbx
    00000024: 	movq	%rsi, %r12
    00000027: 	movl	%r8d, %r15d
    0000002a: 	movl	%eax, -0x2c(%rsp)
    0000002e: 	leal	-0x6(%rcx), %eax
    00000031: 	leal	(%r8,%r8), %r14d
    00000035: 	movl	%r8d, %ebp
    00000038: 	shrl	$0x2, %eax
    0000003b: 	movl	$0x1, -0x28(%rsp)
    00000043: 	xorl	%r13d, %r13d
    00000046: 	movl	%eax, %edx
    00000048: 	leal	0x5(,%rax,4), %eax
    0000004f: 	movl	%eax, -0x1c(%rsp)
    00000053: 	leaq	(,%rdx,4), %rdi
    0000005b: 	leaq	0x20(%rbx), %rax
    0000005f: 	movq	%rdi, -0x18(%rsp)
    00000064: 	movq	%rax, -0x10(%rsp)
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp252:
    00000070: 	addl	$0x1, -0x28(%rsp)
    00000075: 	cmpl	$0x5, -0x20(%rsp)
    0000007a: 	movl	$0x1, %eax
    0000007f: 	jle	.Ltmp249 # Offset: 127
    00000085: 	movslq	%r13d, %rax
    00000088: 	movslq	%r14d, %rdx
    0000008b: 	leaq	(%rbx,%rax,8), %rdi
    0000008f: 	leaq	(%rbx,%rdx,8), %rsi
    00000093: 	movslq	%ebp, %rax
    00000096: 	movq	-0x10(%rsp), %rdx
    0000009b: 	leaq	(,%rax,8), %r9
    000000a3: 	addq	-0x18(%rsp), %rax
    000000a8: 	leaq	(%rbx,%r9), %rcx
    000000ac: 	leaq	(%rdx,%rax,8), %r11
    000000b0: 	addq	%r12, %r9
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp250:
    000000b8: 	movq	0x18(%rcx), %rax
    000000bc: 	movq	0x8(%rcx), %r8
    000000c0: 	addq	0x10(%rdi), %r8
    000000c4: 	movq	0x10(%rcx), %rdx
    000000c8: 	addq	%rax, %r8
    000000cb: 	addq	0x10(%rsi), %r8
    000000cf: 	leaq	0x5(%r8), %r10
    000000d3: 	addq	$0x2, %r8
    000000d7: 	cmovnsq	%r8, %r10
    000000db: 	movq	0x18(%rdi), %r8
    000000df: 	sarq	$0x2, %r10
    000000e3: 	addq	%rdx, %r8
    000000e6: 	addq	0x20(%rcx), %r8
    000000ea: 	addq	0x18(%rsi), %r8
    000000ee: 	movq	%r10, %xmm0
    000000f3: 	leaq	0x5(%r8), %r10
    000000f7: 	addq	$0x2, %r8
    000000fb: 	cmovsq	%r10, %r8
    000000ff: 	addq	0x20(%rdi), %rax
    00000103: 	addq	0x28(%rcx), %rax
    00000107: 	addq	0x20(%rsi), %rax
    0000010b: 	sarq	$0x2, %r8
    0000010f: 	movq	%r8, %xmm1
    00000114: 	leaq	0x5(%rax), %r8
    00000118: 	addq	$0x2, %rax
    0000011c: 	cmovnsq	%rax, %r8
    00000120: 	movq	(%rcx), %rax
    00000123: 	addq	0x8(%rdi), %rax
    00000127: 	punpcklqdq	%xmm1, %xmm0
    0000012b: 	addq	%rdx, %rax
    0000012e: 	addq	0x8(%rsi), %rax
    00000132: 	movups	%xmm0, 0x10(%r9)
    00000137: 	sarq	$0x2, %r8
    0000013b: 	leaq	0x5(%rax), %rdx
    0000013f: 	addq	$0x2, %rax
    00000143: 	cmovsq	%rdx, %rax
    00000147: 	addq	$0x20, %rcx
    0000014b: 	movq	%r8, 0x20(%r9)
    0000014f: 	addq	$0x20, %rdi
    00000153: 	addq	$0x20, %rsi
    00000157: 	addq	$0x20, %r9
    0000015b: 	sarq	$0x2, %rax
    0000015f: 	movq	%rax, -0x18(%r9)
    00000163: 	cmpq	%r11, %rcx
    00000166: 	jne	.Ltmp250 # Offset: 358
    0000016c: 	movl	-0x1c(%rsp), %eax
.Ltmp249:
    00000170: 	cmpl	-0x2c(%rsp), %eax
    00000174: 	jge	.Ltmp251 # Offset: 372
    0000017a: 	leal	0x1(%rax), %ecx
    0000017d: 	leal	(%r13,%rax), %edx
    00000182: 	leal	(%rbp,%rcx), %edi
    00000186: 	leal	-0x1(%rbp,%rax), %esi
    0000018a: 	movslq	%edx, %rdx
    0000018d: 	movslq	%edi, %rdi
    00000190: 	movslq	%esi, %rsi
    00000193: 	leaq	(%rbx,%rdi,8), %r10
    00000197: 	movq	(%r10), %r8
    0000019a: 	addq	(%rbx,%rsi,8), %r8
    0000019e: 	movq	(%rbx,%rdx,8), %rsi
    000001a2: 	leal	(%rbp,%rax), %edx
    000001a6: 	movslq	%edx, %rdx
    000001a9: 	addq	%r8, %rsi
    000001ac: 	leal	(%r14,%rax), %r8d
    000001b0: 	movslq	%r8d, %r8
    000001b3: 	addq	(%rbx,%r8,8), %rsi
    000001b7: 	leaq	0x5(%rsi), %r8
    000001bb: 	addq	$0x2, %rsi
    000001bf: 	cmovnsq	%rsi, %r8
    000001c3: 	sarq	$0x2, %r8
    000001c7: 	movq	%r8, (%r12,%rdx,8)
    000001cb: 	cmpl	%ecx, -0x2c(%rsp)
    000001cf: 	jle	.Ltmp251 # Offset: 463
    000001d5: 	leal	0x2(%rax), %esi
    000001d8: 	leal	(%r13,%rcx), %r9d
    000001dd: 	addl	%r14d, %ecx
    000001e0: 	movq	(%rbx,%rdx,8), %rdx
    000001e4: 	leal	(%rbp,%rsi), %r8d
    000001e9: 	movslq	%ecx, %rcx
    000001ec: 	movslq	%r9d, %r9
    000001ef: 	movslq	%r8d, %r8
    000001f2: 	leaq	(%rbx,%r8,8), %r11
    000001f6: 	addq	(%r11), %rdx
    000001f9: 	addq	(%rbx,%r9,8), %rdx
    000001fd: 	addq	(%rbx,%rcx,8), %rdx
    00000201: 	leaq	0x5(%rdx), %rcx
    00000205: 	addq	$0x2, %rdx
    00000209: 	cmovnsq	%rdx, %rcx
    0000020d: 	sarq	$0x2, %rcx
    00000211: 	movq	%rcx, (%r12,%rdi,8)
    00000215: 	cmpl	%esi, -0x2c(%rsp)
    00000219: 	jle	.Ltmp251 # Offset: 537
    0000021b: 	leal	0x3(%rax), %edx
    0000021e: 	leal	(%r13,%rsi), %edi
    00000223: 	addl	%r14d, %esi
    00000226: 	movq	(%r10), %r9
    00000229: 	leal	(%rbp,%rdx), %ecx
    0000022d: 	movslq	%esi, %rsi
    00000230: 	movslq	%edi, %rdi
    00000233: 	movslq	%ecx, %rcx
    00000236: 	addq	(%rbx,%rcx,8), %r9
    0000023a: 	addq	(%rbx,%rdi,8), %r9
    0000023e: 	addq	(%rbx,%rsi,8), %r9
    00000242: 	leaq	0x5(%r9), %rsi
    00000246: 	addq	$0x2, %r9
    0000024a: 	cmovnsq	%r9, %rsi
    0000024e: 	sarq	$0x2, %rsi
    00000252: 	movq	%rsi, (%r12,%r8,8)
    00000256: 	cmpl	%edx, -0x2c(%rsp)
    0000025a: 	jle	.Ltmp251 # Offset: 602
    0000025c: 	leal	(%r13,%rdx), %esi
    00000261: 	leal	0x4(%rbp,%rax), %eax
    00000265: 	addl	%r14d, %edx
    00000268: 	movq	(%r11), %rdi
    0000026b: 	cltq
    0000026d: 	movslq	%esi, %rsi
    00000270: 	movslq	%edx, %rdx
    00000273: 	addq	(%rbx,%rax,8), %rdi
    00000277: 	addq	(%rbx,%rsi,8), %rdi
    0000027b: 	addq	(%rbx,%rdx,8), %rdi
    0000027f: 	leaq	0x5(%rdi), %rax
    00000283: 	addq	$0x2, %rdi
    00000287: 	cmovnsq	%rdi, %rax
    0000028b: 	sarq	$0x2, %rax
    0000028f: 	movq	%rax, (%r12,%rcx,8)
.Ltmp251:
    00000293: 	movl	-0x28(%rsp), %edi
    00000297: 	addl	%r15d, %r13d
    0000029a: 	addl	%r15d, %ebp
    0000029d: 	addl	%r15d, %r14d
    000002a0: 	cmpl	%edi, -0x24(%rsp)
    000002a4: 	jne	.Ltmp252 # Offset: 676
.Ltmp248:
    000002aa: 	popq	%rbx
    000002ab: 	popq	%rbp
    000002ac: 	popq	%r12
    000002ae: 	popq	%r13
    000002b0: 	popq	%r14
    000002b2: 	popq	%r15
    000002b4: 	retq # Offset: 692
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled2IllEclEPKlPliiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled2IilEclEPiS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled2IilEclEPiS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled2IilEclEPiS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 63
  State       : disassembled
  Address     : 0xfd70
  Size        : 0x379
  MaxSize     : 0x380
  Offset      : 0xfd70
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled2IilEclEPiS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%ecx, -0x20(%rsp)
    00000011: 	movl	%eax, -0x24(%rsp)
    00000015: 	cmpl	$0x1, %eax
    00000018: 	jle	.Ltmp253 # Offset: 24
    0000001e: 	leal	-0x1(%rcx), %eax
    00000021: 	movq	%rsi, %r12
    00000024: 	movq	%rdi, %rbx
    00000027: 	movl	%r8d, %r15d
    0000002a: 	movl	%eax, -0x34(%rsp)
    0000002e: 	leal	-0x6(%rcx), %eax
    00000031: 	leal	(%r8,%r8), %r14d
    00000035: 	movl	%r8d, %ebp
    00000038: 	shrl	$0x2, %eax
    0000003b: 	movl	$0x1, -0x28(%rsp)
    00000043: 	xorl	%r13d, %r13d
    00000046: 	movl	%eax, %edx
    00000048: 	leal	0x5(,%rax,4), %eax
    0000004f: 	movl	%eax, -0x1c(%rsp)
    00000053: 	leaq	(,%rdx,4), %rsi
    0000005b: 	leaq	0x10(%rdi), %rax
    0000005f: 	movq	%rsi, -0x18(%rsp)
    00000064: 	movq	%rax, -0x10(%rsp)
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp257:
    00000070: 	addl	$0x1, -0x28(%rsp)
    00000075: 	cmpl	$0x5, -0x20(%rsp)
    0000007a: 	movl	$0x1, %eax
    0000007f: 	jle	.Ltmp254 # Offset: 127
    00000085: 	movslq	%ebp, %rdx
    00000088: 	movslq	%r13d, %rcx
    0000008b: 	movq	-0x10(%rsp), %rdi
    00000090: 	movq	%rbx, -0x30(%rsp)
    00000095: 	leaq	(,%rdx,4), %rax
    0000009d: 	leaq	(%rbx,%rcx,4), %rsi
    000000a1: 	movslq	%r14d, %rcx
    000000a4: 	addq	-0x18(%rsp), %rdx
    000000a9: 	leaq	(%r12,%rax), %r8
    000000ad: 	leaq	(%rbx,%rcx,4), %rcx
    000000b1: 	addq	%rbx, %rax
    000000b4: 	leaq	(%rdi,%rdx,4), %r11
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp255:
    000000c0: 	movslq	(%rax), %r10
    000000c3: 	movslq	0x4(%rsi), %rdx
    000000c7: 	movslq	0x8(%rax), %r9
    000000cb: 	movslq	0x4(%rax), %rbx
    000000cf: 	addq	%r10, %rdx
    000000d2: 	movslq	0x4(%rcx), %r10
    000000d6: 	movslq	0xc(%rax), %rdi
    000000da: 	addq	%r9, %rdx
    000000dd: 	movdqu	0x4(%r8), %xmm4
    000000e3: 	addq	%r10, %rdx
    000000e6: 	leaq	0x5(%rdx), %r10
    000000ea: 	addq	$0x2, %rdx
    000000ee: 	cmovnsq	%rdx, %r10
    000000f2: 	movslq	0x8(%rsi), %rdx
    000000f6: 	addq	%rbx, %rdx
    000000f9: 	sarq	$0x2, %r10
    000000fd: 	leaq	(%rdx,%rdi), %rbx
    00000101: 	movslq	0x8(%rcx), %rdx
    00000105: 	movq	%r10, %xmm1
    0000010a: 	addq	%rbx, %rdx
    0000010d: 	leaq	0x5(%rdx), %rbx
    00000111: 	addq	$0x2, %rdx
    00000115: 	cmovsq	%rbx, %rdx
    00000119: 	sarq	$0x2, %rdx
    0000011d: 	movq	%rdx, %xmm2
    00000122: 	movslq	0xc(%rsi), %rdx
    00000126: 	punpcklqdq	%xmm2, %xmm1
    0000012a: 	addq	%r9, %rdx
    0000012d: 	movslq	0x10(%rax), %r9
    00000131: 	addq	%r9, %rdx
    00000134: 	movslq	0xc(%rcx), %r9
    00000138: 	addq	%r9, %rdx
    0000013b: 	leaq	0x5(%rdx), %r9
    0000013f: 	addq	$0x2, %rdx
    00000143: 	cmovsq	%r9, %rdx
    00000147: 	sarq	$0x2, %rdx
    0000014b: 	movq	%rdx, %xmm0
    00000150: 	movslq	0x10(%rsi), %rdx
    00000154: 	addq	%rdi, %rdx
    00000157: 	movslq	0x14(%rax), %rdi
    0000015b: 	addq	%rdi, %rdx
    0000015e: 	movslq	0x10(%rcx), %rdi
    00000162: 	addq	%rdi, %rdx
    00000165: 	leaq	0x5(%rdx), %rdi
    00000169: 	addq	$0x2, %rdx
    0000016d: 	cmovsq	%rdi, %rdx
    00000171: 	addq	$0x10, %rax
    00000175: 	addq	$0x10, %r8
    00000179: 	addq	$0x10, %rsi
    0000017d: 	addq	$0x10, %rcx
    00000181: 	sarq	$0x2, %rdx
    00000185: 	movq	%rdx, %xmm3
    0000018a: 	punpcklqdq	%xmm3, %xmm0
    0000018e: 	shufps	$0x88, %xmm0, %xmm1
    00000192: 	psubd	%xmm4, %xmm1
    00000196: 	movdqa	%xmm1, %xmm0
    0000019a: 	pslld	$0x3, %xmm0
    0000019f: 	psubd	%xmm1, %xmm0
    000001a3: 	pslld	$0x4, %xmm0
    000001a8: 	paddd	%xmm1, %xmm0
    000001ac: 	psrad	$0x6, %xmm0
    000001b1: 	paddd	%xmm4, %xmm0
    000001b5: 	movups	%xmm0, -0xc(%r8)
    000001ba: 	cmpq	%rax, %r11
    000001bd: 	jne	.Ltmp255 # Offset: 445
    000001c3: 	movq	-0x30(%rsp), %rbx
    000001c8: 	movl	-0x1c(%rsp), %eax
.Ltmp254:
    000001cc: 	cmpl	-0x34(%rsp), %eax
    000001d0: 	jge	.Ltmp256 # Offset: 464
    000001d6: 	leal	(%r13,%rax), %edx
    000001db: 	leal	(%rbp,%rax), %r8d
    000001e0: 	movslq	%edx, %rdx
    000001e3: 	movslq	%r8d, %r8
    000001e6: 	movslq	(%rbx,%rdx,4), %rcx
    000001ea: 	leal	-0x1(%rbp,%rax), %edx
    000001ee: 	leaq	(%r12,%r8,4), %r9
    000001f2: 	movslq	%edx, %rdx
    000001f5: 	movslq	(%rbx,%rdx,4), %rdi
    000001f9: 	addq	%rcx, %rdi
    000001fc: 	leal	0x1(%rax), %ecx
    000001ff: 	leal	(%rbp,%rcx), %edx
    00000203: 	movslq	%edx, %rdx
    00000206: 	shlq	$0x2, %rdx
    0000020a: 	leaq	(%rbx,%rdx), %r10
    0000020e: 	movslq	(%r10), %rsi
    00000211: 	addq	%rdi, %rsi
    00000214: 	leal	(%r14,%rax), %edi
    00000218: 	movslq	%edi, %rdi
    0000021b: 	movslq	(%rbx,%rdi,4), %rdi
    0000021f: 	addq	%rsi, %rdi
    00000222: 	leaq	0x5(%rdi), %rsi
    00000226: 	addq	$0x2, %rdi
    0000022a: 	cmovnsq	%rdi, %rsi
    0000022e: 	sarq	$0x2, %rsi
    00000232: 	subl	(%r9), %esi
    00000235: 	imull	$0x71, %esi, %esi
    00000238: 	sarl	$0x6, %esi
    0000023b: 	addl	(%r9), %esi
    0000023e: 	movl	%esi, (%r9)
    00000241: 	cmpl	%ecx, -0x34(%rsp)
    00000245: 	jle	.Ltmp256 # Offset: 581
    0000024b: 	leal	(%r13,%rcx), %esi
    00000250: 	movslq	(%rbx,%r8,4), %r9
    00000254: 	leal	0x2(%rax), %edi
    00000257: 	addl	%r14d, %ecx
    0000025a: 	movslq	%esi, %rsi
    0000025d: 	movslq	%ecx, %rcx
    00000260: 	addq	%r12, %rdx
    00000263: 	movslq	(%rbx,%rsi,4), %rsi
    00000267: 	movslq	(%rbx,%rcx,4), %rcx
    0000026b: 	addq	%rsi, %r9
    0000026e: 	leal	(%rbp,%rdi), %esi
    00000272: 	movslq	%esi, %rsi
    00000275: 	shlq	$0x2, %rsi
    00000279: 	leaq	(%rbx,%rsi), %r11
    0000027d: 	movslq	(%r11), %r8
    00000280: 	addq	%r9, %r8
    00000283: 	addq	%rcx, %r8
    00000286: 	leaq	0x5(%r8), %rcx
    0000028a: 	addq	$0x2, %r8
    0000028e: 	cmovnsq	%r8, %rcx
    00000292: 	sarq	$0x2, %rcx
    00000296: 	subl	(%rdx), %ecx
    00000298: 	imull	$0x71, %ecx, %ecx
    0000029b: 	sarl	$0x6, %ecx
    0000029e: 	addl	(%rdx), %ecx
    000002a0: 	movl	%ecx, (%rdx)
    000002a2: 	cmpl	%edi, -0x34(%rsp)
    000002a6: 	jle	.Ltmp256 # Offset: 678
    000002ac: 	leal	(%r13,%rdi), %edx
    000002b1: 	movslq	(%r10), %r8
    000002b4: 	addl	%r14d, %edi
    000002b7: 	addq	%r12, %rsi
    000002ba: 	movslq	%edx, %rdx
    000002bd: 	movslq	%edi, %rdi
    000002c0: 	movslq	(%rbx,%rdx,4), %rdx
    000002c4: 	movslq	(%rbx,%rdi,4), %rdi
    000002c8: 	addq	%rdx, %r8
    000002cb: 	leal	0x3(%rax), %edx
    000002ce: 	leal	(%rbp,%rdx), %ecx
    000002d2: 	movslq	%ecx, %rcx
    000002d5: 	leaq	(,%rcx,4), %r9
    000002dd: 	movslq	(%rbx,%rcx,4), %rcx
    000002e1: 	addq	%r8, %rcx
    000002e4: 	addq	%rcx, %rdi
    000002e7: 	leaq	0x5(%rdi), %rcx
    000002eb: 	addq	$0x2, %rdi
    000002ef: 	cmovnsq	%rdi, %rcx
    000002f3: 	sarq	$0x2, %rcx
    000002f7: 	subl	(%rsi), %ecx
    000002f9: 	imull	$0x71, %ecx, %ecx
    000002fc: 	sarl	$0x6, %ecx
    000002ff: 	addl	(%rsi), %ecx
    00000301: 	movl	%ecx, (%rsi)
    00000303: 	cmpl	%edx, -0x34(%rsp)
    00000307: 	jle	.Ltmp256 # Offset: 775
    00000309: 	leal	(%r13,%rdx), %ecx
    0000030e: 	leal	0x4(%rbp,%rax), %eax
    00000312: 	movslq	(%r11), %rsi
    00000315: 	addl	%r14d, %edx
    00000318: 	movslq	%ecx, %rcx
    0000031b: 	cltq
    0000031d: 	movslq	%edx, %rdx
    00000320: 	addq	%r12, %r9
    00000323: 	movslq	(%rbx,%rcx,4), %rcx
    00000327: 	movslq	(%rbx,%rax,4), %rax
    0000032b: 	movslq	(%rbx,%rdx,4), %rdx
    0000032f: 	addq	%rcx, %rsi
    00000332: 	addq	%rsi, %rax
    00000335: 	addq	%rax, %rdx
    00000338: 	leaq	0x5(%rdx), %rax
    0000033c: 	addq	$0x2, %rdx
    00000340: 	cmovnsq	%rdx, %rax
    00000344: 	sarq	$0x2, %rax
    00000348: 	subl	(%r9), %eax
    0000034b: 	imull	$0x71, %eax, %eax
    0000034e: 	sarl	$0x6, %eax
    00000351: 	addl	(%r9), %eax
    00000354: 	movl	%eax, (%r9)
.Ltmp256:
    00000357: 	movl	-0x28(%rsp), %esi
    0000035b: 	addl	%r15d, %r13d
    0000035e: 	addl	%r15d, %ebp
    00000361: 	addl	%r15d, %r14d
    00000364: 	cmpl	%esi, -0x24(%rsp)
    00000368: 	jne	.Ltmp257 # Offset: 872
.Ltmp253:
    0000036e: 	popq	%rbx
    0000036f: 	popq	%rbp
    00000370: 	popq	%r12
    00000372: 	popq	%r13
    00000374: 	popq	%r14
    00000376: 	popq	%r15
    00000378: 	retq # Offset: 888
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled2IilEclEPiS1_iiii.isra.0/1(*2)"

Binary Function "_ZN21jacobi_sor2D_unrolledIilEclEPiS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN21jacobi_sor2D_unrolledIilEclEPiS1_iiii.isra.0/1
                _ZN21jacobi_sor2D_unrolledIilEclEPiS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 64
  State       : disassembled
  Address     : 0x100f0
  Size        : 0x37a
  MaxSize     : 0x380
  Offset      : 0x100f0
  Section     : .text
  Orc Section : .local.text._ZN21jacobi_sor2D_unrolledIilEclEPiS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x30(%rsp)
    00000012: 	movl	%ecx, -0x20(%rsp)
    00000016: 	movl	%eax, -0x24(%rsp)
    0000001a: 	cmpl	$0x1, %eax
    0000001d: 	jle	.Ltmp258 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %eax
    00000026: 	movq	%rdi, %rbx
    00000029: 	movl	%r8d, %r15d
    0000002c: 	movl	%r8d, %r12d
    0000002f: 	movl	%eax, -0x34(%rsp)
    00000033: 	leal	-0x6(%rcx), %eax
    00000036: 	leal	(%r8,%r8), %r14d
    0000003a: 	xorl	%r13d, %r13d
    0000003d: 	shrl	$0x2, %eax
    00000040: 	movl	$0x1, -0x28(%rsp)
    00000048: 	movl	%eax, %edx
    0000004a: 	leal	0x5(,%rax,4), %eax
    00000051: 	movl	%eax, -0x1c(%rsp)
    00000055: 	leaq	(,%rdx,4), %rsi
    0000005d: 	leaq	0x10(%rdi), %rax
    00000061: 	movq	%rsi, -0x18(%rsp)
    00000066: 	movq	%rax, -0x10(%rsp)
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp262:
    00000070: 	addl	$0x1, -0x28(%rsp)
    00000075: 	cmpl	$0x5, -0x20(%rsp)
    0000007a: 	movl	$0x1, %eax
    0000007f: 	jle	.Ltmp259 # Offset: 127
    00000085: 	movq	-0x30(%rsp), %rsi
    0000008a: 	movslq	%r12d, %rdx
    0000008d: 	movslq	%r13d, %rcx
    00000090: 	movq	-0x10(%rsp), %rdi
    00000095: 	leaq	(,%rdx,4), %rax
    0000009d: 	addq	-0x18(%rsp), %rdx
    000000a2: 	leaq	(%rsi,%rax), %r9
    000000a6: 	leaq	(%rbx,%rcx,4), %rsi
    000000aa: 	movslq	%r14d, %rcx
    000000ad: 	addq	%rbx, %rax
    000000b0: 	leaq	(%rbx,%rcx,4), %rcx
    000000b4: 	leaq	(%rdi,%rdx,4), %rbp
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp260:
    000000c0: 	movslq	0x4(%rsi), %rdx
    000000c4: 	movslq	(%rax), %r11
    000000c7: 	movslq	0x8(%rax), %rdi
    000000cb: 	movslq	0xc(%rsi), %r8
    000000cf: 	addq	%rdx, %r11
    000000d2: 	movslq	0x4(%rax), %r10
    000000d6: 	movslq	0x8(%rsi), %rdx
    000000da: 	addq	%rdi, %r11
    000000dd: 	addq	%r8, %rdi
    000000e0: 	movslq	0x10(%rax), %r8
    000000e4: 	movdqu	0x4(%r9), %xmm4
    000000ea: 	addq	%rdx, %r10
    000000ed: 	movslq	0xc(%rax), %rdx
    000000f1: 	addq	%rdi, %r8
    000000f4: 	movslq	0x10(%rsi), %rdi
    000000f8: 	addq	%rdx, %r10
    000000fb: 	addq	%rdi, %rdx
    000000fe: 	movslq	0x14(%rax), %rdi
    00000102: 	addq	%rdx, %rdi
    00000105: 	movslq	0x4(%rcx), %rdx
    00000109: 	addq	%r11, %rdx
    0000010c: 	leaq	0x5(%rdx), %r11
    00000110: 	addq	$0x2, %rdx
    00000114: 	cmovnsq	%rdx, %r11
    00000118: 	movslq	0x8(%rcx), %rdx
    0000011c: 	addq	%r10, %rdx
    0000011f: 	sarq	$0x2, %r11
    00000123: 	leaq	0x5(%rdx), %r10
    00000127: 	addq	$0x2, %rdx
    0000012b: 	movq	%r11, %xmm1
    00000130: 	cmovsq	%r10, %rdx
    00000134: 	sarq	$0x2, %rdx
    00000138: 	movq	%rdx, %xmm2
    0000013d: 	movslq	0xc(%rcx), %rdx
    00000141: 	punpcklqdq	%xmm2, %xmm1
    00000145: 	addq	%r8, %rdx
    00000148: 	leaq	0x5(%rdx), %r8
    0000014c: 	addq	$0x2, %rdx
    00000150: 	cmovsq	%r8, %rdx
    00000154: 	sarq	$0x2, %rdx
    00000158: 	movq	%rdx, %xmm0
    0000015d: 	movslq	0x10(%rcx), %rdx
    00000161: 	addq	%rdi, %rdx
    00000164: 	leaq	0x5(%rdx), %rdi
    00000168: 	addq	$0x2, %rdx
    0000016c: 	cmovsq	%rdi, %rdx
    00000170: 	addq	$0x10, %rax
    00000174: 	addq	$0x10, %r9
    00000178: 	addq	$0x10, %rsi
    0000017c: 	addq	$0x10, %rcx
    00000180: 	sarq	$0x2, %rdx
    00000184: 	movq	%rdx, %xmm3
    00000189: 	punpcklqdq	%xmm3, %xmm0
    0000018d: 	shufps	$0x88, %xmm0, %xmm1
    00000191: 	psubd	%xmm4, %xmm1
    00000195: 	movdqa	%xmm1, %xmm0
    00000199: 	pslld	$0x3, %xmm0
    0000019e: 	psubd	%xmm1, %xmm0
    000001a2: 	pslld	$0x4, %xmm0
    000001a7: 	paddd	%xmm1, %xmm0
    000001ab: 	psrad	$0x6, %xmm0
    000001b0: 	paddd	%xmm4, %xmm0
    000001b4: 	movups	%xmm0, -0xc(%r9)
    000001b9: 	cmpq	%rax, %rbp
    000001bc: 	jne	.Ltmp260 # Offset: 444
    000001c2: 	movl	-0x1c(%rsp), %eax
.Ltmp259:
    000001c6: 	cmpl	-0x34(%rsp), %eax
    000001ca: 	jge	.Ltmp261 # Offset: 458
    000001d0: 	leal	(%r13,%rax), %edx
    000001d5: 	movq	-0x30(%rsp), %rbp
    000001da: 	leal	(%r12,%rax), %r8d
    000001de: 	movslq	%edx, %rdx
    000001e1: 	movslq	%r8d, %r8
    000001e4: 	movslq	(%rbx,%rdx,4), %rcx
    000001e8: 	leal	-0x1(%r12,%rax), %edx
    000001ed: 	leaq	(%rbp,%r8,4), %r9
    000001f2: 	movslq	%edx, %rdx
    000001f5: 	movslq	(%rbx,%rdx,4), %rdi
    000001f9: 	addq	%rcx, %rdi
    000001fc: 	leal	0x1(%rax), %ecx
    000001ff: 	leal	(%r12,%rcx), %edx
    00000203: 	movslq	%edx, %rdx
    00000206: 	shlq	$0x2, %rdx
    0000020a: 	leaq	(%rbx,%rdx), %r10
    0000020e: 	movslq	(%r10), %rsi
    00000211: 	addq	%rdi, %rsi
    00000214: 	leal	(%r14,%rax), %edi
    00000218: 	movslq	%edi, %rdi
    0000021b: 	movslq	(%rbx,%rdi,4), %rdi
    0000021f: 	addq	%rsi, %rdi
    00000222: 	leaq	0x5(%rdi), %rsi
    00000226: 	addq	$0x2, %rdi
    0000022a: 	cmovnsq	%rdi, %rsi
    0000022e: 	sarq	$0x2, %rsi
    00000232: 	subl	(%r9), %esi
    00000235: 	imull	$0x71, %esi, %esi
    00000238: 	sarl	$0x6, %esi
    0000023b: 	addl	(%r9), %esi
    0000023e: 	movl	%esi, (%r9)
    00000241: 	cmpl	%ecx, -0x34(%rsp)
    00000245: 	jle	.Ltmp261 # Offset: 581
    0000024b: 	leal	(%r13,%rcx), %esi
    00000250: 	movslq	(%rbx,%r8,4), %r9
    00000254: 	leal	0x2(%rax), %edi
    00000257: 	addl	%r14d, %ecx
    0000025a: 	movslq	%esi, %rsi
    0000025d: 	movslq	%ecx, %rcx
    00000260: 	addq	%rbp, %rdx
    00000263: 	movslq	(%rbx,%rsi,4), %rsi
    00000267: 	movslq	(%rbx,%rcx,4), %rcx
    0000026b: 	addq	%rsi, %r9
    0000026e: 	leal	(%r12,%rdi), %esi
    00000272: 	movslq	%esi, %rsi
    00000275: 	shlq	$0x2, %rsi
    00000279: 	leaq	(%rbx,%rsi), %r11
    0000027d: 	movslq	(%r11), %r8
    00000280: 	addq	%r9, %r8
    00000283: 	addq	%rcx, %r8
    00000286: 	leaq	0x5(%r8), %rcx
    0000028a: 	addq	$0x2, %r8
    0000028e: 	cmovnsq	%r8, %rcx
    00000292: 	sarq	$0x2, %rcx
    00000296: 	subl	(%rdx), %ecx
    00000298: 	imull	$0x71, %ecx, %ecx
    0000029b: 	sarl	$0x6, %ecx
    0000029e: 	addl	(%rdx), %ecx
    000002a0: 	movl	%ecx, (%rdx)
    000002a2: 	cmpl	%edi, -0x34(%rsp)
    000002a6: 	jle	.Ltmp261 # Offset: 678
    000002ac: 	leal	(%r13,%rdi), %edx
    000002b1: 	movslq	(%r10), %r8
    000002b4: 	addl	%r14d, %edi
    000002b7: 	addq	%rbp, %rsi
    000002ba: 	movslq	%edx, %rdx
    000002bd: 	movslq	%edi, %rdi
    000002c0: 	movslq	(%rbx,%rdx,4), %rdx
    000002c4: 	movslq	(%rbx,%rdi,4), %rdi
    000002c8: 	addq	%rdx, %r8
    000002cb: 	leal	0x3(%rax), %edx
    000002ce: 	leal	(%r12,%rdx), %ecx
    000002d2: 	movslq	%ecx, %rcx
    000002d5: 	leaq	(,%rcx,4), %r9
    000002dd: 	movslq	(%rbx,%rcx,4), %rcx
    000002e1: 	addq	%r8, %rcx
    000002e4: 	addq	%rcx, %rdi
    000002e7: 	leaq	0x5(%rdi), %rcx
    000002eb: 	addq	$0x2, %rdi
    000002ef: 	cmovnsq	%rdi, %rcx
    000002f3: 	sarq	$0x2, %rcx
    000002f7: 	subl	(%rsi), %ecx
    000002f9: 	imull	$0x71, %ecx, %ecx
    000002fc: 	sarl	$0x6, %ecx
    000002ff: 	addl	(%rsi), %ecx
    00000301: 	movl	%ecx, (%rsi)
    00000303: 	cmpl	%edx, -0x34(%rsp)
    00000307: 	jle	.Ltmp261 # Offset: 775
    00000309: 	leal	(%r13,%rdx), %ecx
    0000030e: 	leal	0x4(%r12,%rax), %eax
    00000313: 	movslq	(%r11), %rsi
    00000316: 	addl	%r14d, %edx
    00000319: 	movslq	%ecx, %rcx
    0000031c: 	cltq
    0000031e: 	movslq	%edx, %rdx
    00000321: 	addq	%rbp, %r9
    00000324: 	movslq	(%rbx,%rcx,4), %rcx
    00000328: 	movslq	(%rbx,%rax,4), %rax
    0000032c: 	movslq	(%rbx,%rdx,4), %rdx
    00000330: 	addq	%rcx, %rsi
    00000333: 	addq	%rsi, %rax
    00000336: 	addq	%rax, %rdx
    00000339: 	leaq	0x5(%rdx), %rax
    0000033d: 	addq	$0x2, %rdx
    00000341: 	cmovnsq	%rdx, %rax
    00000345: 	sarq	$0x2, %rax
    00000349: 	subl	(%r9), %eax
    0000034c: 	imull	$0x71, %eax, %eax
    0000034f: 	sarl	$0x6, %eax
    00000352: 	addl	(%r9), %eax
    00000355: 	movl	%eax, (%r9)
.Ltmp261:
    00000358: 	movl	-0x28(%rsp), %esi
    0000035c: 	addl	%r15d, %r13d
    0000035f: 	addl	%r15d, %r12d
    00000362: 	addl	%r15d, %r14d
    00000365: 	cmpl	%esi, -0x24(%rsp)
    00000369: 	jne	.Ltmp262 # Offset: 873
.Ltmp258:
    0000036f: 	popq	%rbx
    00000370: 	popq	%rbp
    00000371: 	popq	%r12
    00000373: 	popq	%r13
    00000375: 	popq	%r14
    00000377: 	popq	%r15
    00000379: 	retq # Offset: 889
DWARF CFI Instructions:
    <empty>
End of Function "_ZN21jacobi_sor2D_unrolledIilEclEPiS1_iiii.isra.0/1(*2)"

Binary Function "_ZN17jacobi2D_unrolledIilEclEPKiPiiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN17jacobi2D_unrolledIilEclEPKiPiiiii.isra.0/1
                _ZN17jacobi2D_unrolledIilEclEPKiPiiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 65
  State       : disassembled
  Address     : 0x10470
  Size        : 0x308
  MaxSize     : 0x310
  Offset      : 0x10470
  Section     : .text
  Orc Section : .local.text._ZN17jacobi2D_unrolledIilEclEPKiPiiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, -0x30(%rsp)
    00000012: 	movl	%ecx, -0x20(%rsp)
    00000016: 	movl	%eax, -0x24(%rsp)
    0000001a: 	cmpl	$0x1, %eax
    0000001d: 	jle	.Ltmp263 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %eax
    00000026: 	movq	%rdi, %rbx
    00000029: 	movl	%r8d, %r15d
    0000002c: 	movl	%r8d, %r12d
    0000002f: 	movl	%eax, -0x34(%rsp)
    00000033: 	leal	-0x6(%rcx), %eax
    00000036: 	leal	(%r8,%r8), %r14d
    0000003a: 	xorl	%r13d, %r13d
    0000003d: 	shrl	$0x2, %eax
    00000040: 	movl	$0x1, -0x28(%rsp)
    00000048: 	movl	%eax, %edx
    0000004a: 	leal	0x5(,%rax,4), %eax
    00000051: 	movl	%eax, -0x1c(%rsp)
    00000055: 	leaq	(,%rdx,4), %rsi
    0000005d: 	leaq	0x10(%rdi), %rax
    00000061: 	movq	%rsi, -0x18(%rsp)
    00000066: 	movq	%rax, -0x10(%rsp)
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp267:
    00000070: 	addl	$0x1, -0x28(%rsp)
    00000075: 	cmpl	$0x5, -0x20(%rsp)
    0000007a: 	movl	$0x1, %eax
    0000007f: 	jle	.Ltmp264 # Offset: 127
    00000085: 	movslq	%r13d, %rdx
    00000088: 	movq	-0x10(%rsp), %rdi
    0000008d: 	movslq	%r12d, %r11
    00000090: 	movslq	%r14d, %rsi
    00000093: 	shlq	$0x2, %r11
    00000097: 	leaq	(%rbx,%rdx,4), %rcx
    0000009b: 	addq	-0x18(%rsp), %rdx
    000000a0: 	leaq	(%rbx,%r11), %rax
    000000a4: 	leaq	(%rbx,%rsi,4), %rsi
    000000a8: 	addq	-0x30(%rsp), %r11
    000000ad: 	leaq	(%rdi,%rdx,4), %rbp
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp265:
    000000b8: 	movslq	0x4(%rcx), %rdx
    000000bc: 	movslq	(%rax), %r10
    000000bf: 	movslq	0x8(%rax), %rdi
    000000c3: 	movslq	0xc(%rcx), %r8
    000000c7: 	addq	%rdx, %r10
    000000ca: 	movslq	0x4(%rax), %r9
    000000ce: 	movslq	0x8(%rcx), %rdx
    000000d2: 	addq	%rdi, %r10
    000000d5: 	addq	%r8, %rdi
    000000d8: 	movslq	0x10(%rax), %r8
    000000dc: 	addq	%rdx, %r9
    000000df: 	movslq	0xc(%rax), %rdx
    000000e3: 	addq	%rdi, %r8
    000000e6: 	movslq	0x10(%rcx), %rdi
    000000ea: 	addq	%rdx, %r9
    000000ed: 	addq	%rdi, %rdx
    000000f0: 	movslq	0x14(%rax), %rdi
    000000f4: 	addq	%rdx, %rdi
    000000f7: 	movslq	0x4(%rsi), %rdx
    000000fb: 	addq	%r10, %rdx
    000000fe: 	leaq	0x5(%rdx), %r10
    00000102: 	addq	$0x2, %rdx
    00000106: 	cmovnsq	%rdx, %r10
    0000010a: 	movslq	0x8(%rsi), %rdx
    0000010e: 	addq	%r9, %rdx
    00000111: 	sarq	$0x2, %r10
    00000115: 	leaq	0x5(%rdx), %r9
    00000119: 	addq	$0x2, %rdx
    0000011d: 	movq	%r10, %xmm0
    00000122: 	cmovsq	%r9, %rdx
    00000126: 	sarq	$0x2, %rdx
    0000012a: 	movq	%rdx, %xmm2
    0000012f: 	movslq	0xc(%rsi), %rdx
    00000133: 	punpcklqdq	%xmm2, %xmm0
    00000137: 	addq	%r8, %rdx
    0000013a: 	leaq	0x5(%rdx), %r8
    0000013e: 	addq	$0x2, %rdx
    00000142: 	cmovsq	%r8, %rdx
    00000146: 	sarq	$0x2, %rdx
    0000014a: 	movq	%rdx, %xmm1
    0000014f: 	movslq	0x10(%rsi), %rdx
    00000153: 	addq	%rdi, %rdx
    00000156: 	leaq	0x5(%rdx), %rdi
    0000015a: 	addq	$0x2, %rdx
    0000015e: 	cmovsq	%rdi, %rdx
    00000162: 	addq	$0x10, %rcx
    00000166: 	addq	$0x10, %rax
    0000016a: 	addq	$0x10, %rsi
    0000016e: 	addq	$0x10, %r11
    00000172: 	sarq	$0x2, %rdx
    00000176: 	movq	%rdx, %xmm3
    0000017b: 	punpcklqdq	%xmm3, %xmm1
    0000017f: 	shufps	$0x88, %xmm1, %xmm0
    00000183: 	movups	%xmm0, -0xc(%r11)
    00000188: 	cmpq	%rbp, %rcx
    0000018b: 	jne	.Ltmp265 # Offset: 395
    00000191: 	movl	-0x1c(%rsp), %eax
.Ltmp264:
    00000195: 	cmpl	-0x34(%rsp), %eax
    00000199: 	jge	.Ltmp266 # Offset: 409
    0000019f: 	leal	(%r13,%rax), %edx
    000001a4: 	leal	-0x1(%r12,%rax), %esi
    000001a9: 	movq	-0x30(%rsp), %r11
    000001ae: 	movslq	%edx, %rdx
    000001b1: 	movslq	%esi, %rsi
    000001b4: 	movslq	(%rbx,%rdx,4), %rcx
    000001b8: 	leal	0x1(%rax), %edx
    000001bb: 	leal	(%r12,%rdx), %edi
    000001bf: 	movslq	%edi, %rdi
    000001c2: 	leaq	(%rbx,%rdi,4), %r9
    000001c6: 	movl	(%r9), %r8d
    000001c9: 	addl	(%rbx,%rsi,4), %r8d
    000001cd: 	leal	(%r14,%rax), %esi
    000001d1: 	movslq	%esi, %rsi
    000001d4: 	movslq	%r8d, %r8
    000001d7: 	movslq	(%rbx,%rsi,4), %rsi
    000001db: 	addq	%rcx, %r8
    000001de: 	leal	(%r12,%rax), %ecx
    000001e2: 	movslq	%ecx, %rcx
    000001e5: 	addq	%r8, %rsi
    000001e8: 	leaq	0x5(%rsi), %r8
    000001ec: 	addq	$0x2, %rsi
    000001f0: 	cmovnsq	%rsi, %r8
    000001f4: 	sarq	$0x2, %r8
    000001f8: 	movl	%r8d, (%r11,%rcx,4)
    000001fc: 	cmpl	%edx, -0x34(%rsp)
    00000200: 	jle	.Ltmp266 # Offset: 512
    00000206: 	leal	(%r13,%rdx), %esi
    0000020b: 	addl	%r14d, %edx
    0000020e: 	movslq	%esi, %rsi
    00000211: 	movslq	%edx, %rdx
    00000214: 	movslq	(%rbx,%rsi,4), %r11
    00000218: 	leal	0x2(%rax), %esi
    0000021b: 	movslq	(%rbx,%rdx,4), %rdx
    0000021f: 	leal	(%r12,%rsi), %r8d
    00000223: 	movslq	%r8d, %r8
    00000226: 	leaq	(%rbx,%r8,4), %r10
    0000022a: 	movl	(%r10), %ebp
    0000022d: 	addl	(%rbx,%rcx,4), %ebp
    00000230: 	movslq	%ebp, %rcx
    00000233: 	movl	-0x34(%rsp), %ebp
    00000237: 	addq	%r11, %rcx
    0000023a: 	movq	-0x30(%rsp), %r11
    0000023f: 	addq	%rcx, %rdx
    00000242: 	leaq	0x5(%rdx), %rcx
    00000246: 	addq	$0x2, %rdx
    0000024a: 	cmovnsq	%rdx, %rcx
    0000024e: 	sarq	$0x2, %rcx
    00000252: 	movl	%ecx, (%r11,%rdi,4)
    00000256: 	cmpl	%esi, %ebp
    00000258: 	jle	.Ltmp266 # Offset: 600
    0000025e: 	leal	(%r13,%rsi), %edx
    00000263: 	addl	%r14d, %esi
    00000266: 	movl	(%r9), %r9d
    00000269: 	movslq	%edx, %rdx
    0000026c: 	movslq	%esi, %rsi
    0000026f: 	movslq	(%rbx,%rdx,4), %rdi
    00000273: 	leal	0x3(%rax), %edx
    00000276: 	movslq	(%rbx,%rsi,4), %rsi
    0000027a: 	leal	(%r12,%rdx), %ecx
    0000027e: 	movslq	%ecx, %rcx
    00000281: 	addl	(%rbx,%rcx,4), %r9d
    00000285: 	movslq	%r9d, %r9
    00000288: 	addq	%rdi, %r9
    0000028b: 	addq	%r9, %rsi
    0000028e: 	leaq	0x5(%rsi), %rdi
    00000292: 	addq	$0x2, %rsi
    00000296: 	cmovnsq	%rsi, %rdi
    0000029a: 	sarq	$0x2, %rdi
    0000029e: 	movl	%edi, (%r11,%r8,4)
    000002a2: 	cmpl	%edx, %ebp
    000002a4: 	jle	.Ltmp266 # Offset: 676
    000002a6: 	leal	(%r13,%rdx), %esi
    000002ab: 	leal	0x4(%r12,%rax), %eax
    000002b0: 	addl	%r14d, %edx
    000002b3: 	movl	(%r10), %edi
    000002b6: 	cltq
    000002b8: 	movslq	%esi, %rsi
    000002bb: 	movslq	%edx, %rdx
    000002be: 	addl	(%rbx,%rax,4), %edi
    000002c1: 	movslq	(%rbx,%rsi,4), %rsi
    000002c5: 	movslq	(%rbx,%rdx,4), %rax
    000002c9: 	movslq	%edi, %rdi
    000002cc: 	addq	%rsi, %rdi
    000002cf: 	addq	%rdi, %rax
    000002d2: 	leaq	0x5(%rax), %rdx
    000002d6: 	addq	$0x2, %rax
    000002da: 	cmovnsq	%rax, %rdx
    000002de: 	sarq	$0x2, %rdx
    000002e2: 	movl	%edx, (%r11,%rcx,4)
.Ltmp266:
    000002e6: 	movl	-0x28(%rsp), %ecx
    000002ea: 	addl	%r15d, %r13d
    000002ed: 	addl	%r15d, %r12d
    000002f0: 	addl	%r15d, %r14d
    000002f3: 	cmpl	%ecx, -0x24(%rsp)
    000002f7: 	jne	.Ltmp267 # Offset: 759
.Ltmp263:
    000002fd: 	popq	%rbx
    000002fe: 	popq	%rbp
    000002ff: 	popq	%r12
    00000301: 	popq	%r13
    00000303: 	popq	%r14
    00000305: 	popq	%r15
    00000307: 	retq # Offset: 775
DWARF CFI Instructions:
    <empty>
End of Function "_ZN17jacobi2D_unrolledIilEclEPKiPiiiii.isra.0/1(*2)"

Binary Function "_ZN22jacobi_sor2D_unrolled2IsiEclEPsS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN22jacobi_sor2D_unrolled2IsiEclEPsS1_iiii.isra.0/1
                _ZN22jacobi_sor2D_unrolled2IsiEclEPsS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 66
  State       : disassembled
  Address     : 0x10780
  Size        : 0x922
  MaxSize     : 0x930
  Offset      : 0x10780
  Section     : .text
  Orc Section : .local.text._ZN22jacobi_sor2D_unrolled2IsiEclEPsS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%r8d, -0x38(%rsp)
    00000012: 	movl	%eax, -0x3c(%rsp)
    00000016: 	cmpl	$0x1, %eax
    00000019: 	jle	.Ltmp268 # Offset: 25
    0000001f: 	leal	-0x1(%rcx), %eax
    00000022: 	leal	-0x4(%rcx), %r9d
    00000026: 	movq	%rsi, %r14
    00000029: 	movl	%r8d, %r10d
    0000002c: 	movl	%eax, -0x40(%rsp)
    00000030: 	leal	-0x6(%rcx), %eax
    00000033: 	leal	(%r8,%r8), %r15d
    00000037: 	pxor	%xmm5, %xmm5
    0000003b: 	movl	%eax, %edx
    0000003d: 	movl	%eax, -0x28(%rsp)
    00000041: 	shrl	$0x4, %eax
    00000044: 	movdqa	DATAat0x49440(%rip), %xmm10
    0000004d: 	leal	-0x1(%rax), %ecx
    00000050: 	shll	$0x4, %eax
    00000053: 	shrl	$0x2, %edx
    00000056: 	movl	%r9d, -0x78(%rsp)
    0000005b: 	addl	$0x1, %eax
    0000005e: 	addq	$0x1, %rcx
    00000062: 	movl	$0x0, -0x50(%rsp)
    0000006a: 	movdqa	DATAat0x49450(%rip), %xmm6
    00000072: 	movl	%eax, -0x24(%rsp)
    00000076: 	cltq
    00000078: 	shlq	$0x5, %rcx
    0000007c: 	movdqa	DATAat0x49460(%rip), %xmm11
    00000085: 	movq	%rax, -0x30(%rsp)
    0000008a: 	movl	%edx, %eax
    0000008c: 	pxor	%xmm9, %xmm9
    00000091: 	shlq	$0x2, %rax
    00000095: 	movq	%rcx, -0x20(%rsp)
    0000009a: 	movq	%rax, -0x18(%rsp)
    0000009f: 	leal	0x5(,%rdx,4), %eax
    000000a6: 	movl	%eax, -0x34(%rsp)
    000000aa: 	leaq	0x8(%rdi), %rax
    000000ae: 	movl	$0x1, -0x4c(%rsp)
    000000b6: 	movq	%rax, -0x10(%rsp)
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp274:
    000000c0: 	addl	$0x1, -0x4c(%rsp)
    000000c5: 	cmpl	$0x1, -0x78(%rsp)
    000000ca: 	movl	$0x1, %eax
    000000cf: 	jle	.Ltmp269 # Offset: 207
    000000d5: 	movslq	%r10d, %r13
    000000d8: 	movslq	-0x50(%rsp), %rbx
    000000dd: 	movslq	%r15d, %r12
    000000e0: 	leaq	0x2(%r13,%r13), %r8
    000000e5: 	leaq	0x4(%r14,%r8), %rdx
    000000ea: 	leaq	0x6(%rdi,%r8), %rcx
    000000ef: 	movq	%rbx, -0x48(%rsp)
    000000f4: 	movq	%rdx, %rsi
    000000f7: 	leaq	(%r14,%r8), %rax
    000000fb: 	leaq	0xa(%rbx,%rbx), %rbp
    00000100: 	subq	%rcx, %rsi
    00000103: 	movq	%rax, %r9
    00000106: 	leaq	0xa(%r12,%r12), %rbx
    0000010b: 	addq	$0x2, %rsi
    0000010f: 	cmpq	$0x1c, %rsi
    00000113: 	movq	%rax, %rsi
    00000116: 	seta	%r11b
    0000011a: 	subq	%rcx, %rsi
    0000011d: 	addq	$0x2, %rsi
    00000121: 	cmpq	$0x1c, %rsi
    00000125: 	seta	%sil
    00000129: 	andl	%r11d, %esi
    0000012c: 	cmpl	$0xf, -0x28(%rsp)
    00000131: 	seta	%r11b
    00000135: 	andl	%r11d, %esi
    00000138: 	leaq	(%rdi,%rbp), %r11
    0000013c: 	subq	%r11, %r9
    0000013f: 	leaq	0x6(%r9), %r11
    00000143: 	cmpq	$0x1c, %r11
    00000147: 	seta	%r11b
    0000014b: 	testb	%r11b, %sil
    0000014e: 	je	.Ltmp270 # Offset: 334
    00000154: 	leaq	(%rdi,%rbx), %r11
    00000158: 	movq	%rax, %rsi
    0000015b: 	subq	%r11, %rsi
    0000015e: 	addq	$0x6, %rsi
    00000162: 	cmpq	$0x1c, %rsi
    00000166: 	jbe	.Ltmp270 # Offset: 358
    0000016c: 	leaq	-0x8(%rdi,%rbp), %r11
    00000171: 	movl	-0x78(%rsp), %r9d
    00000176: 	movq	-0x20(%rsp), %rbp
    0000017b: 	xorl	%esi, %esi
    0000017d: 	leaq	-0x2(%rdi,%r8), %r8
    00000182: 	leaq	-0x8(%rdi,%rbx), %rbx
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp271:
    00000190: 	movdqu	(%rax), %xmm0
    00000194: 	movdqu	0x10(%rax), %xmm4
    00000199: 	addq	$0x20, %rax
    0000019d: 	movdqa	%xmm5, %xmm14
    000001a2: 	movdqu	-0x10(%rax), %xmm7
    000001a7: 	movdqu	(%r11,%rsi), %xmm1
    000001ad: 	movdqa	%xmm5, %xmm13
    000001b2: 	movdqa	%xmm0, %xmm8
    000001b7: 	movdqu	(%r8,%rsi), %xmm2
    000001bd: 	movdqu	0x10(%r8,%rsi), %xmm3
    000001c4: 	shufps	$0x88, %xmm4, %xmm8
    000001c9: 	movdqa	%xmm0, %xmm4
    000001cd: 	movdqa	%xmm1, %xmm0
    000001d1: 	shufps	$0xdd, %xmm7, %xmm4
    000001d5: 	movdqu	0x10(%r11,%rsi), %xmm7
    000001dc: 	movaps	%xmm4, -0x68(%rsp)
    000001e1: 	shufps	$0x88, %xmm7, %xmm0
    000001e5: 	shufps	$0xdd, %xmm7, %xmm1
    000001e9: 	movdqa	%xmm2, %xmm7
    000001ed: 	shufps	$0xdd, %xmm3, %xmm2
    000001f1: 	shufps	$0x88, %xmm3, %xmm7
    000001f5: 	movdqa	%xmm5, %xmm3
    000001f9: 	movdqa	%xmm2, %xmm12
    000001fe: 	movdqa	%xmm7, %xmm4
    00000202: 	pcmpgtw	%xmm2, %xmm3
    00000206: 	movdqu	0x10(%rcx,%rsi), %xmm7
    0000020c: 	pcmpgtw	%xmm1, %xmm14
    00000211: 	punpcklwd	%xmm3, %xmm12
    00000216: 	punpckhwd	%xmm3, %xmm2
    0000021a: 	movdqu	(%rcx,%rsi), %xmm3
    0000021f: 	shufps	$0x88, %xmm7, %xmm3
    00000223: 	pcmpgtw	%xmm3, %xmm13
    00000228: 	movdqa	%xmm1, %xmm7
    0000022c: 	punpckhwd	%xmm14, %xmm1
    00000231: 	movdqa	%xmm3, %xmm15
    00000236: 	paddd	%xmm2, %xmm1
    0000023a: 	punpcklwd	%xmm14, %xmm7
    0000023f: 	paddd	%xmm12, %xmm7
    00000244: 	movdqa	%xmm4, %xmm14
    00000249: 	punpckhwd	%xmm13, %xmm3
    0000024e: 	punpcklwd	%xmm13, %xmm15
    00000253: 	movdqu	0x10(%rbx,%rsi), %xmm13
    0000025a: 	paddd	%xmm3, %xmm1
    0000025e: 	movdqu	(%rbx,%rsi), %xmm3
    00000263: 	paddd	%xmm7, %xmm15
    00000268: 	movdqa	%xmm5, %xmm7
    0000026c: 	pcmpgtw	%xmm0, %xmm7
    00000270: 	movaps	%xmm1, -0x78(%rsp)
    00000275: 	movdqa	%xmm0, %xmm1
    00000279: 	shufps	$0x88, %xmm13, %xmm3
    0000027e: 	movdqa	%xmm5, %xmm13
    00000283: 	pcmpgtw	%xmm4, %xmm13
    00000288: 	punpcklwd	%xmm7, %xmm1
    0000028c: 	punpckhwd	%xmm7, %xmm0
    00000290: 	punpcklwd	%xmm13, %xmm14
    00000295: 	punpckhwd	%xmm13, %xmm4
    0000029a: 	paddd	%xmm14, %xmm1
    0000029f: 	paddd	%xmm4, %xmm0
    000002a3: 	movdqa	%xmm3, %xmm14
    000002a8: 	movdqa	-0x68(%rsp), %xmm4
    000002ae: 	paddd	%xmm12, %xmm1
    000002b3: 	movdqa	%xmm5, %xmm12
    000002b8: 	paddd	%xmm2, %xmm0
    000002bc: 	pcmpgtw	%xmm3, %xmm12
    000002c1: 	movdqa	%xmm9, %xmm2
    000002c6: 	punpckhwd	%xmm12, %xmm3
    000002cb: 	punpcklwd	%xmm12, %xmm14
    000002d0: 	paddd	%xmm0, %xmm3
    000002d4: 	paddd	%xmm14, %xmm1
    000002d9: 	movdqa	%xmm9, %xmm0
    000002de: 	paddd	%xmm10, %xmm3
    000002e3: 	paddd	%xmm10, %xmm1
    000002e8: 	pcmpgtd	%xmm3, %xmm2
    000002ec: 	pcmpgtd	%xmm1, %xmm0
    000002f0: 	pand	%xmm6, %xmm2
    000002f4: 	pand	%xmm6, %xmm0
    000002f8: 	paddd	%xmm3, %xmm2
    000002fc: 	paddd	%xmm1, %xmm0
    00000300: 	movdqa	%xmm2, %xmm1
    00000304: 	psrad	$0x2, %xmm0
    00000309: 	psrad	$0x2, %xmm1
    0000030e: 	movdqa	%xmm0, %xmm2
    00000312: 	punpcklwd	%xmm1, %xmm0
    00000316: 	punpckhwd	%xmm1, %xmm2
    0000031a: 	movdqa	%xmm0, %xmm3
    0000031e: 	punpcklwd	%xmm2, %xmm0
    00000322: 	punpckhwd	%xmm2, %xmm3
    00000326: 	punpcklwd	%xmm3, %xmm0
    0000032a: 	psubw	%xmm8, %xmm0
    0000032f: 	movdqa	%xmm0, %xmm2
    00000333: 	pmulhw	%xmm11, %xmm0
    00000338: 	pmullw	%xmm11, %xmm2
    0000033d: 	movdqa	%xmm2, %xmm3
    00000341: 	punpckhwd	%xmm0, %xmm2
    00000345: 	punpcklwd	%xmm0, %xmm3
    00000349: 	psrad	$0x6, %xmm2
    0000034e: 	movdqa	%xmm3, %xmm1
    00000352: 	psrad	$0x6, %xmm1
    00000357: 	movdqa	%xmm1, %xmm0
    0000035b: 	movdqa	%xmm1, %xmm3
    0000035f: 	punpcklwd	%xmm2, %xmm0
    00000363: 	punpckhwd	%xmm2, %xmm3
    00000367: 	movdqa	%xmm0, %xmm2
    0000036b: 	punpcklwd	%xmm3, %xmm0
    0000036f: 	punpckhwd	%xmm3, %xmm2
    00000373: 	movdqu	(%rbx,%rsi), %xmm3
    00000378: 	punpcklwd	%xmm2, %xmm0
    0000037c: 	movdqu	0x10(%rbx,%rsi), %xmm2
    00000382: 	paddw	%xmm8, %xmm0
    00000387: 	shufps	$0xdd, %xmm2, %xmm3
    0000038b: 	movdqa	%xmm5, %xmm2
    0000038f: 	movdqa	%xmm3, %xmm1
    00000393: 	movd	%xmm0, -0x20(%rax)
    00000398: 	pcmpgtw	%xmm3, %xmm2
    0000039c: 	punpcklwd	%xmm2, %xmm3
    000003a0: 	punpckhwd	%xmm2, %xmm1
    000003a4: 	paddd	-0x78(%rsp), %xmm1
    000003aa: 	paddd	%xmm3, %xmm15
    000003af: 	movdqa	%xmm9, %xmm2
    000003b4: 	movdqa	%xmm9, %xmm3
    000003b9: 	paddd	%xmm10, %xmm15
    000003be: 	paddd	%xmm10, %xmm1
    000003c3: 	pcmpgtd	%xmm15, %xmm3
    000003c8: 	pcmpgtd	%xmm1, %xmm2
    000003cc: 	pand	%xmm6, %xmm3
    000003d0: 	pand	%xmm6, %xmm2
    000003d4: 	paddd	%xmm3, %xmm15
    000003d9: 	paddd	%xmm2, %xmm1
    000003dd: 	psrad	$0x2, %xmm1
    000003e2: 	psrad	$0x2, %xmm15
    000003e8: 	movdqa	%xmm15, %xmm2
    000003ed: 	punpcklwd	%xmm1, %xmm15
    000003f2: 	punpckhwd	%xmm1, %xmm2
    000003f6: 	movdqa	%xmm15, %xmm1
    000003fb: 	punpckhwd	%xmm2, %xmm1
    000003ff: 	punpcklwd	%xmm2, %xmm15
    00000404: 	punpcklwd	%xmm1, %xmm15
    00000409: 	psubw	%xmm4, %xmm15
    0000040e: 	movdqa	%xmm15, %xmm2
    00000413: 	pmulhw	%xmm11, %xmm15
    00000418: 	pmullw	%xmm11, %xmm2
    0000041d: 	movdqa	%xmm2, %xmm1
    00000421: 	punpckhwd	%xmm15, %xmm2
    00000426: 	punpcklwd	%xmm15, %xmm1
    0000042b: 	psrad	$0x6, %xmm2
    00000430: 	psrad	$0x6, %xmm1
    00000435: 	movdqa	%xmm1, %xmm3
    00000439: 	punpcklwd	%xmm2, %xmm1
    0000043d: 	punpckhwd	%xmm2, %xmm3
    00000441: 	movdqa	%xmm1, %xmm2
    00000445: 	punpckhwd	%xmm3, %xmm2
    00000449: 	punpcklwd	%xmm3, %xmm1
    0000044d: 	punpcklwd	%xmm2, %xmm1
    00000451: 	pshufd	$0x55, %xmm0, %xmm2
    00000456: 	movd	%xmm2, -0x18(%rax)
    0000045b: 	movdqa	%xmm0, %xmm2
    0000045f: 	paddw	%xmm4, %xmm1
    00000463: 	punpckhdq	%xmm0, %xmm2
    00000467: 	pshufd	$0xff, %xmm0, %xmm0
    0000046c: 	movd	%xmm0, -0x8(%rax)
    00000471: 	pshufd	$0x55, %xmm1, %xmm0
    00000476: 	movd	%xmm2, -0x10(%rax)
    0000047b: 	movd	%xmm0, 0x8(%rdx,%rsi)
    00000481: 	movdqa	%xmm1, %xmm0
    00000485: 	movd	%xmm1, (%rdx,%rsi)
    0000048a: 	punpckhdq	%xmm1, %xmm0
    0000048e: 	pshufd	$0xff, %xmm1, %xmm1
    00000493: 	movd	%xmm0, 0x10(%rdx,%rsi)
    00000499: 	movd	%xmm1, 0x18(%rdx,%rsi)
    0000049f: 	addq	$0x20, %rsi
    000004a3: 	cmpq	%rbp, %rsi
    000004a6: 	jne	.Ltmp271 # Offset: 1190
    000004ac: 	movq	-0x30(%rsp), %rbx
    000004b1: 	movq	-0x48(%rsp), %rax
    000004b6: 	leaq	(%rbx,%r13), %r8
    000004ba: 	addq	%rbx, %rax
    000004bd: 	addq	%r8, %r8
    000004c0: 	leaq	(%rdi,%rax,2), %rbp
    000004c4: 	leaq	(%rbx,%r12), %rax
    000004c8: 	movl	-0x24(%rsp), %r12d
    000004cd: 	leaq	(%r14,%r8), %r11
    000004d1: 	leaq	(%rdi,%rax,2), %rbx
    000004d5: 	addq	%rdi, %r8
    000004d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp272:
    000004e0: 	movswl	(%rbp), %edx
    000004e4: 	movswl	-0x2(%r8), %ecx
    000004e9: 	addl	$0x4, %r12d
    000004ed: 	movswl	0x2(%r8), %esi
    000004f2: 	movswl	(%r8), %r13d
    000004f6: 	addl	%edx, %ecx
    000004f8: 	movswl	(%rbx), %edx
    000004fb: 	movswl	0x4(%r8), %eax
    00000500: 	addl	%esi, %ecx
    00000502: 	movq	(%r11), %xmm0
    00000507: 	addl	%edx, %ecx
    00000509: 	leal	0x5(%rcx), %edx
    0000050c: 	addl	$0x2, %ecx
    0000050f: 	cmovnsl	%ecx, %edx
    00000512: 	movswl	0x2(%rbp), %ecx
    00000516: 	sarl	$0x2, %edx
    00000519: 	subw	(%r11), %dx
    0000051d: 	addl	%ecx, %r13d
    00000520: 	movswl	0x2(%rbx), %ecx
    00000524: 	movswl	%dx, %edx
    00000527: 	addl	%eax, %r13d
    0000052a: 	imull	$0x71, %edx, %edx
    0000052d: 	addl	%ecx, %r13d
    00000530: 	leal	0x5(%r13), %ecx
    00000534: 	sarl	$0x6, %edx
    00000537: 	addl	$0x2, %r13d
    0000053b: 	cmovnsl	%r13d, %ecx
    0000053f: 	movswl	0x4(%rbp), %r13d
    00000544: 	movzwl	%dx, %edx
    00000547: 	addl	%esi, %r13d
    0000054a: 	sarl	$0x2, %ecx
    0000054d: 	movswl	0x6(%r8), %esi
    00000552: 	subw	0x2(%r11), %cx
    00000557: 	movswl	%cx, %ecx
    0000055a: 	addl	%esi, %r13d
    0000055d: 	imull	$0x71, %ecx, %ecx
    00000560: 	movswl	0x4(%rbx), %esi
    00000564: 	addl	%esi, %r13d
    00000567: 	sarl	$0x6, %ecx
    0000056a: 	leal	0x5(%r13), %esi
    0000056e: 	addl	$0x2, %r13d
    00000572: 	cmovnsl	%r13d, %esi
    00000576: 	movswl	0x6(%rbp), %r13d
    0000057b: 	movzwl	%cx, %ecx
    0000057e: 	addl	%eax, %r13d
    00000581: 	sarl	$0x2, %esi
    00000584: 	movswl	0x8(%r8), %eax
    00000589: 	subw	0x4(%r11), %si
    0000058e: 	movswl	%si, %esi
    00000591: 	addl	%eax, %r13d
    00000594: 	imull	$0x71, %esi, %esi
    00000597: 	movswl	0x6(%rbx), %eax
    0000059b: 	addl	%eax, %r13d
    0000059e: 	sarl	$0x6, %esi
    000005a1: 	leal	0x5(%r13), %eax
    000005a5: 	addl	$0x2, %r13d
    000005a9: 	cmovnsl	%r13d, %eax
    000005ad: 	movzwl	%si, %esi
    000005b0: 	addq	$0x8, %r11
    000005b4: 	addq	$0x8, %rbp
    000005b8: 	addq	$0x8, %r8
    000005bc: 	addq	$0x8, %rbx
    000005c0: 	sarl	$0x2, %eax
    000005c3: 	subw	-0x2(%r11), %ax
    000005c8: 	cwtl
    000005c9: 	imull	$0x71, %eax, %eax
    000005cc: 	sarl	$0x6, %eax
    000005cf: 	movzwl	%ax, %eax
    000005d2: 	shlq	$0x10, %rax
    000005d6: 	orq	%rsi, %rax
    000005d9: 	shlq	$0x10, %rax
    000005dd: 	orq	%rcx, %rax
    000005e0: 	shlq	$0x10, %rax
    000005e4: 	orq	%rdx, %rax
    000005e7: 	movq	%rax, %xmm7
    000005ec: 	paddw	%xmm7, %xmm0
    000005f0: 	movq	%xmm0, -0x8(%r11)
    000005f6: 	cmpl	%r12d, %r9d
    000005f9: 	jg	.Ltmp272 # Offset: 1529
.Ltmp276:
    000005ff: 	movl	%r9d, -0x78(%rsp)
    00000604: 	movl	-0x34(%rsp), %eax
.Ltmp269:
    00000608: 	cmpl	-0x40(%rsp), %eax
    0000060c: 	jge	.Ltmp273 # Offset: 1548
    00000612: 	movl	-0x50(%rsp), %r13d
    00000617: 	leal	(%r10,%rax), %r11d
    0000061b: 	movl	-0x40(%rsp), %r9d
    00000620: 	movslq	%r11d, %r11
    00000623: 	leal	(%r13,%rax), %edx
    00000628: 	leaq	(%r14,%r11,2), %rbx
    0000062c: 	movslq	%edx, %rdx
    0000062f: 	movswl	(%rdi,%rdx,2), %ecx
    00000633: 	leal	-0x1(%rax,%r10), %edx
    00000638: 	movslq	%edx, %rdx
    0000063b: 	movswl	(%rdi,%rdx,2), %r8d
    00000640: 	addl	%ecx, %r8d
    00000643: 	leal	0x1(%rax), %ecx
    00000646: 	leal	(%rcx,%r10), %edx
    0000064a: 	movslq	%edx, %rdx
    0000064d: 	addq	%rdx, %rdx
    00000650: 	leaq	(%rdi,%rdx), %rbp
    00000654: 	movswl	(%rbp), %esi
    00000658: 	addl	%r8d, %esi
    0000065b: 	leal	(%r15,%rax), %r8d
    0000065f: 	movslq	%r8d, %r8
    00000662: 	movswl	(%rdi,%r8,2), %r8d
    00000667: 	addl	%esi, %r8d
    0000066a: 	leal	0x5(%r8), %esi
    0000066e: 	addl	$0x2, %r8d
    00000672: 	cmovnsl	%r8d, %esi
    00000676: 	sarl	$0x2, %esi
    00000679: 	subw	(%rbx), %si
    0000067c: 	movswl	%si, %esi
    0000067f: 	imull	$0x71, %esi, %esi
    00000682: 	sarl	$0x6, %esi
    00000685: 	addw	(%rbx), %si
    00000688: 	movw	%si, (%rbx)
    0000068b: 	cmpl	%r9d, %ecx
    0000068e: 	jge	.Ltmp273 # Offset: 1678
    00000694: 	leal	(%rcx,%r13), %esi
    00000698: 	movswl	(%rdi,%r11,2), %ebx
    0000069d: 	leal	0x2(%rax), %r8d
    000006a1: 	addl	%r15d, %ecx
    000006a4: 	movslq	%esi, %rsi
    000006a7: 	movslq	%ecx, %rcx
    000006aa: 	addq	%r14, %rdx
    000006ad: 	movswl	(%rdi,%rsi,2), %esi
    000006b1: 	movswl	(%rdi,%rcx,2), %ecx
    000006b5: 	addl	%esi, %ebx
    000006b7: 	leal	(%r8,%r10), %esi
    000006bb: 	movslq	%esi, %rsi
    000006be: 	addq	%rsi, %rsi
    000006c1: 	leaq	(%rdi,%rsi), %r12
    000006c5: 	movswl	(%r12), %r11d
    000006ca: 	addl	%ebx, %r11d
    000006cd: 	addl	%ecx, %r11d
    000006d0: 	leal	0x5(%r11), %ecx
    000006d4: 	addl	$0x2, %r11d
    000006d8: 	cmovnsl	%r11d, %ecx
    000006dc: 	sarl	$0x2, %ecx
    000006df: 	subw	(%rdx), %cx
    000006e2: 	movswl	%cx, %ecx
    000006e5: 	imull	$0x71, %ecx, %ecx
    000006e8: 	sarl	$0x6, %ecx
    000006eb: 	addw	(%rdx), %cx
    000006ee: 	movw	%cx, (%rdx)
    000006f1: 	cmpl	%r9d, %r8d
    000006f4: 	jge	.Ltmp273 # Offset: 1780
    000006fa: 	leal	(%r8,%r13), %edx
    000006fe: 	movswl	(%rbp), %r11d
    00000703: 	addl	%r15d, %r8d
    00000706: 	addq	%r14, %rsi
    00000709: 	movslq	%edx, %rdx
    0000070c: 	movslq	%r8d, %r8
    0000070f: 	movswl	(%rdi,%rdx,2), %edx
    00000713: 	movswl	(%rdi,%r8,2), %r8d
    00000718: 	addl	%edx, %r11d
    0000071b: 	leal	0x3(%rax), %edx
    0000071e: 	leal	(%rdx,%r10), %ecx
    00000722: 	movslq	%ecx, %rcx
    00000725: 	leaq	(%rcx,%rcx), %rbx
    00000729: 	movswl	(%rdi,%rcx,2), %ecx
    0000072d: 	addl	%r11d, %ecx
    00000730: 	addl	%ecx, %r8d
    00000733: 	leal	0x5(%r8), %ecx
    00000737: 	addl	$0x2, %r8d
    0000073b: 	cmovnsl	%r8d, %ecx
    0000073f: 	sarl	$0x2, %ecx
    00000742: 	subw	(%rsi), %cx
    00000745: 	movswl	%cx, %ecx
    00000748: 	imull	$0x71, %ecx, %ecx
    0000074b: 	sarl	$0x6, %ecx
    0000074e: 	addw	(%rsi), %cx
    00000751: 	movw	%cx, (%rsi)
    00000754: 	cmpl	%r9d, %edx
    00000757: 	jge	.Ltmp273 # Offset: 1879
    00000759: 	leal	(%rdx,%r13), %ecx
    0000075d: 	leal	0x4(%rax,%r10), %eax
    00000762: 	movswl	(%r12), %esi
    00000767: 	addl	%r15d, %edx
    0000076a: 	movslq	%ecx, %rcx
    0000076d: 	cltq
    0000076f: 	movslq	%edx, %rdx
    00000772: 	addq	%r14, %rbx
    00000775: 	movswl	(%rdi,%rcx,2), %ecx
    00000779: 	movswl	(%rdi,%rax,2), %eax
    0000077d: 	movswl	(%rdi,%rdx,2), %edx
    00000781: 	addl	%ecx, %esi
    00000783: 	addl	%esi, %eax
    00000785: 	addl	%eax, %edx
    00000787: 	leal	0x5(%rdx), %eax
    0000078a: 	addl	$0x2, %edx
    0000078d: 	cmovnsl	%edx, %eax
    00000790: 	sarl	$0x2, %eax
    00000793: 	subw	(%rbx), %ax
    00000796: 	cwtl
    00000797: 	imull	$0x71, %eax, %eax
    0000079a: 	sarl	$0x6, %eax
    0000079d: 	addw	(%rbx), %ax
    000007a0: 	movw	%ax, (%rbx)
.Ltmp273:
    000007a3: 	movl	-0x38(%rsp), %eax
    000007a7: 	movl	-0x4c(%rsp), %ebx
    000007ab: 	addl	%eax, -0x50(%rsp)
    000007af: 	addl	%eax, %r10d
    000007b2: 	addl	%eax, %r15d
    000007b5: 	cmpl	%ebx, -0x3c(%rsp)
    000007b9: 	jne	.Ltmp274 # Offset: 1977
.Ltmp268:
    000007bf: 	popq	%rbx
    000007c0: 	popq	%rbp
    000007c1: 	popq	%r12
    000007c3: 	popq	%r13
    000007c5: 	popq	%r14
    000007c7: 	popq	%r15
    000007c9: 	retq # Offset: 1993
    000007ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp270:
    000007d0: 	movq	-0x10(%rsp), %rax
    000007d5: 	subq	$0x2, %r8
    000007d9: 	addq	-0x18(%rsp), %r13
    000007de: 	leaq	-0xa(%rdi,%rbp), %rbp
    000007e3: 	movl	-0x78(%rsp), %r9d
    000007e8: 	leaq	(%r14,%r8), %r11
    000007ec: 	leaq	-0xa(%rdi,%rbx), %rbx
    000007f1: 	addq	%rdi, %r8
    000007f4: 	leaq	(%rax,%r13,2), %r12
    000007f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp275:
    00000800: 	movswl	0x2(%rbp), %edx
    00000804: 	movswl	(%r8), %ecx
    00000808: 	movswl	0x4(%r8), %esi
    0000080d: 	movswl	0x2(%r8), %r13d
    00000812: 	addl	%edx, %ecx
    00000814: 	movswl	0x2(%rbx), %edx
    00000818: 	movswl	0x6(%r8), %eax
    0000081d: 	addl	%esi, %ecx
    0000081f: 	movq	0x2(%r11), %xmm0
    00000825: 	addl	%edx, %ecx
    00000827: 	leal	0x5(%rcx), %edx
    0000082a: 	addl	$0x2, %ecx
    0000082d: 	cmovnsl	%ecx, %edx
    00000830: 	movswl	0x4(%rbp), %ecx
    00000834: 	sarl	$0x2, %edx
    00000837: 	subw	0x2(%r11), %dx
    0000083c: 	addl	%ecx, %r13d
    0000083f: 	movswl	0x4(%rbx), %ecx
    00000843: 	movswl	%dx, %edx
    00000846: 	addl	%eax, %r13d
    00000849: 	imull	$0x71, %edx, %edx
    0000084c: 	addl	%ecx, %r13d
    0000084f: 	leal	0x5(%r13), %ecx
    00000853: 	sarl	$0x6, %edx
    00000856: 	addl	$0x2, %r13d
    0000085a: 	cmovnsl	%r13d, %ecx
    0000085e: 	movswl	0x6(%rbp), %r13d
    00000863: 	movzwl	%dx, %edx
    00000866: 	addl	%esi, %r13d
    00000869: 	sarl	$0x2, %ecx
    0000086c: 	movswl	0x8(%r8), %esi
    00000871: 	subw	0x4(%r11), %cx
    00000876: 	movswl	%cx, %ecx
    00000879: 	addl	%esi, %r13d
    0000087c: 	imull	$0x71, %ecx, %ecx
    0000087f: 	movswl	0x6(%rbx), %esi
    00000883: 	addl	%esi, %r13d
    00000886: 	sarl	$0x6, %ecx
    00000889: 	leal	0x5(%r13), %esi
    0000088d: 	addl	$0x2, %r13d
    00000891: 	cmovnsl	%r13d, %esi
    00000895: 	movswl	0x8(%rbp), %r13d
    0000089a: 	movzwl	%cx, %ecx
    0000089d: 	addl	%eax, %r13d
    000008a0: 	sarl	$0x2, %esi
    000008a3: 	movswl	0xa(%r8), %eax
    000008a8: 	subw	0x6(%r11), %si
    000008ad: 	movswl	%si, %esi
    000008b0: 	addl	%eax, %r13d
    000008b3: 	imull	$0x71, %esi, %esi
    000008b6: 	movswl	0x8(%rbx), %eax
    000008ba: 	addl	%eax, %r13d
    000008bd: 	sarl	$0x6, %esi
    000008c0: 	leal	0x5(%r13), %eax
    000008c4: 	addl	$0x2, %r13d
    000008c8: 	cmovnsl	%r13d, %eax
    000008cc: 	movzwl	%si, %esi
    000008cf: 	addq	$0x8, %r8
    000008d3: 	addq	$0x8, %r11
    000008d7: 	addq	$0x8, %rbp
    000008db: 	addq	$0x8, %rbx
    000008df: 	sarl	$0x2, %eax
    000008e2: 	subw	(%r11), %ax
    000008e6: 	cwtl
    000008e7: 	imull	$0x71, %eax, %eax
    000008ea: 	sarl	$0x6, %eax
    000008ed: 	movzwl	%ax, %eax
    000008f0: 	shlq	$0x10, %rax
    000008f4: 	orq	%rsi, %rax
    000008f7: 	shlq	$0x10, %rax
    000008fb: 	orq	%rcx, %rax
    000008fe: 	shlq	$0x10, %rax
    00000902: 	orq	%rdx, %rax
    00000905: 	movq	%rax, %xmm4
    0000090a: 	paddw	%xmm4, %xmm0
    0000090e: 	movq	%xmm0, -0x6(%r11)
    00000914: 	cmpq	%r8, %r12
    00000917: 	jne	.Ltmp275 # Offset: 2327
    0000091d: 	jmp	.Ltmp276 # Offset: 2333
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22jacobi_sor2D_unrolled2IsiEclEPsS1_iiii.isra.0/1(*2)"

Binary Function "_ZN21jacobi_sor2D_unrolledIsiEclEPsS1_iiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN21jacobi_sor2D_unrolledIsiEclEPsS1_iiii.isra.0/1
                _ZN21jacobi_sor2D_unrolledIsiEclEPsS1_iiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 67
  State       : disassembled
  Address     : 0x110b0
  Size        : 0x918
  MaxSize     : 0x920
  Offset      : 0x110b0
  Section     : .text
  Orc Section : .local.text._ZN21jacobi_sor2D_unrolledIsiEclEPsS1_iiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%r8d, -0x38(%rsp)
    00000012: 	movl	%eax, -0x3c(%rsp)
    00000016: 	cmpl	$0x1, %eax
    00000019: 	jle	.Ltmp277 # Offset: 25
    0000001f: 	leal	-0x1(%rcx), %eax
    00000022: 	leal	-0x4(%rcx), %r9d
    00000026: 	movq	%rsi, %r15
    00000029: 	movl	%r8d, %r10d
    0000002c: 	movl	%eax, -0x40(%rsp)
    00000030: 	leal	(%r8,%r8), %eax
    00000034: 	xorl	%r13d, %r13d
    00000037: 	pxor	%xmm3, %xmm3
    0000003b: 	movl	%eax, -0x50(%rsp)
    0000003f: 	leal	-0x6(%rcx), %eax
    00000042: 	pxor	%xmm7, %xmm7
    00000046: 	movdqa	DATAat0x49440(%rip), %xmm9
    0000004f: 	movl	%eax, %edx
    00000051: 	movl	%eax, -0x28(%rsp)
    00000055: 	shrl	$0x4, %eax
    00000058: 	movdqa	DATAat0x49450(%rip), %xmm8
    00000061: 	leal	-0x1(%rax), %ecx
    00000064: 	shll	$0x4, %eax
    00000067: 	shrl	$0x2, %edx
    0000006a: 	movl	%r9d, -0x68(%rsp)
    0000006f: 	addl	$0x1, %eax
    00000072: 	addq	$0x1, %rcx
    00000076: 	movl	$0x1, -0x4c(%rsp)
    0000007e: 	movdqa	DATAat0x49460(%rip), %xmm15
    00000087: 	movl	%eax, -0x24(%rsp)
    0000008b: 	cltq
    0000008d: 	shlq	$0x5, %rcx
    00000091: 	movq	%rax, -0x30(%rsp)
    00000096: 	movl	%edx, %eax
    00000098: 	shlq	$0x2, %rax
    0000009c: 	movq	%rcx, -0x20(%rsp)
    000000a1: 	movq	%rax, -0x18(%rsp)
    000000a6: 	leal	0x5(,%rdx,4), %eax
    000000ad: 	movl	%eax, -0x34(%rsp)
    000000b1: 	leaq	0x8(%rdi), %rax
    000000b5: 	movq	%rax, -0x10(%rsp)
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp283:
    000000c0: 	addl	$0x1, -0x4c(%rsp)
    000000c5: 	cmpl	$0x1, -0x68(%rsp)
    000000ca: 	movl	$0x1, %eax
    000000cf: 	jle	.Ltmp278 # Offset: 207
    000000d5: 	movslq	%r10d, %r14
    000000d8: 	movslq	%r13d, %rbx
    000000db: 	movslq	-0x50(%rsp), %r12
    000000e0: 	leaq	0x2(%r14,%r14), %r8
    000000e5: 	leaq	0xa(%rbx,%rbx), %rbp
    000000ea: 	movq	%rbx, -0x48(%rsp)
    000000ef: 	leaq	0x4(%r15,%r8), %rdx
    000000f4: 	leaq	0x6(%rdi,%r8), %rcx
    000000f9: 	movq	%rdx, %rsi
    000000fc: 	leaq	(%r15,%r8), %rax
    00000100: 	leaq	0xa(%r12,%r12), %rbx
    00000105: 	subq	%rcx, %rsi
    00000108: 	movq	%rax, %r9
    0000010b: 	addq	$0x2, %rsi
    0000010f: 	cmpq	$0x1c, %rsi
    00000113: 	movq	%rax, %rsi
    00000116: 	seta	%r11b
    0000011a: 	subq	%rcx, %rsi
    0000011d: 	addq	$0x2, %rsi
    00000121: 	cmpq	$0x1c, %rsi
    00000125: 	seta	%sil
    00000129: 	andl	%r11d, %esi
    0000012c: 	cmpl	$0xf, -0x28(%rsp)
    00000131: 	seta	%r11b
    00000135: 	andl	%r11d, %esi
    00000138: 	leaq	(%rdi,%rbp), %r11
    0000013c: 	subq	%r11, %r9
    0000013f: 	leaq	0x6(%r9), %r11
    00000143: 	cmpq	$0x1c, %r11
    00000147: 	seta	%r11b
    0000014b: 	testb	%r11b, %sil
    0000014e: 	je	.Ltmp279 # Offset: 334
    00000154: 	leaq	(%rdi,%rbx), %r11
    00000158: 	movq	%rax, %rsi
    0000015b: 	subq	%r11, %rsi
    0000015e: 	addq	$0x6, %rsi
    00000162: 	cmpq	$0x1c, %rsi
    00000166: 	jbe	.Ltmp279 # Offset: 358
    0000016c: 	leaq	-0x8(%rdi,%rbp), %r11
    00000171: 	movl	-0x68(%rsp), %r9d
    00000176: 	movq	-0x20(%rsp), %rbp
    0000017b: 	xorl	%esi, %esi
    0000017d: 	leaq	-0x2(%rdi,%r8), %r8
    00000182: 	leaq	-0x8(%rdi,%rbx), %rbx
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp280:
    00000190: 	movdqu	(%rax), %xmm4
    00000194: 	movdqu	0x10(%rax), %xmm6
    00000199: 	movdqa	%xmm3, %xmm13
    0000019e: 	movdqa	%xmm3, %xmm12
    000001a3: 	movdqu	(%r8,%rsi), %xmm2
    000001a9: 	movdqu	(%r11,%rsi), %xmm0
    000001af: 	addq	$0x20, %rax
    000001b3: 	movdqa	%xmm4, %xmm11
    000001b8: 	shufps	$0xdd, %xmm6, %xmm4
    000001bc: 	movdqu	(%rbx,%rsi), %xmm5
    000001c1: 	movdqu	0x10(%r8,%rsi), %xmm1
    000001c8: 	shufps	$0x88, %xmm6, %xmm11
    000001cd: 	movdqu	0x10(%r11,%rsi), %xmm6
    000001d4: 	shufps	$0x88, %xmm6, %xmm0
    000001d8: 	movdqa	%xmm2, %xmm6
    000001dc: 	shufps	$0xdd, %xmm1, %xmm2
    000001e0: 	movdqa	%xmm2, %xmm10
    000001e5: 	shufps	$0x88, %xmm1, %xmm6
    000001e9: 	movdqa	%xmm3, %xmm1
    000001ed: 	pcmpgtw	%xmm6, %xmm13
    000001f2: 	movdqa	%xmm6, %xmm14
    000001f7: 	pcmpgtw	%xmm2, %xmm1
    000001fb: 	pcmpgtw	%xmm0, %xmm12
    00000200: 	punpcklwd	%xmm13, %xmm14
    00000205: 	punpckhwd	%xmm13, %xmm6
    0000020a: 	movdqa	%xmm3, %xmm13
    0000020f: 	punpcklwd	%xmm1, %xmm10
    00000214: 	punpckhwd	%xmm1, %xmm2
    00000218: 	movdqu	0x10(%rbx,%rsi), %xmm1
    0000021e: 	shufps	$0x88, %xmm1, %xmm5
    00000222: 	movdqa	%xmm0, %xmm1
    00000226: 	punpckhwd	%xmm12, %xmm0
    0000022b: 	punpcklwd	%xmm12, %xmm1
    00000230: 	paddd	%xmm6, %xmm0
    00000234: 	movdqa	%xmm7, %xmm6
    00000238: 	paddd	%xmm14, %xmm1
    0000023d: 	movdqa	%xmm3, %xmm14
    00000242: 	paddd	%xmm2, %xmm0
    00000246: 	pcmpgtw	%xmm5, %xmm14
    0000024b: 	paddd	%xmm10, %xmm1
    00000250: 	movdqa	%xmm3, %xmm12
    00000255: 	movaps	%xmm1, -0x68(%rsp)
    0000025a: 	movdqa	%xmm5, %xmm1
    0000025e: 	punpckhwd	%xmm14, %xmm5
    00000263: 	punpcklwd	%xmm14, %xmm1
    00000268: 	paddd	-0x68(%rsp), %xmm1
    0000026e: 	paddd	%xmm5, %xmm0
    00000272: 	movdqa	%xmm0, %xmm5
    00000276: 	paddd	%xmm9, %xmm1
    0000027b: 	movdqa	%xmm7, %xmm0
    0000027f: 	paddd	%xmm9, %xmm5
    00000284: 	pcmpgtd	%xmm1, %xmm0
    00000288: 	pcmpgtd	%xmm5, %xmm6
    0000028c: 	pand	%xmm8, %xmm0
    00000291: 	pand	%xmm8, %xmm6
    00000296: 	paddd	%xmm1, %xmm0
    0000029a: 	paddd	%xmm5, %xmm6
    0000029e: 	psrad	$0x2, %xmm0
    000002a3: 	movdqa	%xmm6, %xmm1
    000002a7: 	movdqa	%xmm0, %xmm5
    000002ab: 	movdqu	0x10(%r11,%rsi), %xmm6
    000002b2: 	psrad	$0x2, %xmm1
    000002b7: 	punpcklwd	%xmm1, %xmm0
    000002bb: 	punpckhwd	%xmm1, %xmm5
    000002bf: 	movdqa	%xmm0, %xmm1
    000002c3: 	punpcklwd	%xmm5, %xmm0
    000002c7: 	punpckhwd	%xmm5, %xmm1
    000002cb: 	punpcklwd	%xmm1, %xmm0
    000002cf: 	psubw	%xmm11, %xmm0
    000002d4: 	movdqa	%xmm0, %xmm5
    000002d8: 	pmulhw	%xmm15, %xmm0
    000002dd: 	pmullw	%xmm15, %xmm5
    000002e2: 	movdqa	%xmm5, %xmm1
    000002e6: 	punpckhwd	%xmm0, %xmm5
    000002ea: 	punpcklwd	%xmm0, %xmm1
    000002ee: 	movdqa	%xmm5, %xmm0
    000002f2: 	psrad	$0x6, %xmm0
    000002f7: 	psrad	$0x6, %xmm1
    000002fc: 	movdqa	%xmm1, %xmm5
    00000300: 	punpcklwd	%xmm0, %xmm1
    00000304: 	punpckhwd	%xmm0, %xmm5
    00000308: 	movdqa	%xmm1, %xmm0
    0000030c: 	punpckhwd	%xmm5, %xmm0
    00000310: 	punpcklwd	%xmm5, %xmm1
    00000314: 	movdqu	(%r11,%rsi), %xmm5
    0000031a: 	punpcklwd	%xmm0, %xmm1
    0000031e: 	movdqu	0x10(%rcx,%rsi), %xmm0
    00000324: 	shufps	$0xdd, %xmm6, %xmm5
    00000328: 	movdqu	(%rcx,%rsi), %xmm6
    0000032d: 	paddw	%xmm11, %xmm1
    00000332: 	pcmpgtw	%xmm5, %xmm13
    00000337: 	movdqu	(%rbx,%rsi), %xmm11
    0000033d: 	shufps	$0x88, %xmm0, %xmm6
    00000341: 	movdqu	0x10(%rbx,%rsi), %xmm0
    00000347: 	pcmpgtw	%xmm6, %xmm12
    0000034c: 	movd	%xmm1, -0x20(%rax)
    00000351: 	shufps	$0xdd, %xmm0, %xmm11
    00000356: 	movdqa	%xmm5, %xmm0
    0000035a: 	punpckhwd	%xmm13, %xmm5
    0000035f: 	movdqa	%xmm11, %xmm14
    00000364: 	punpcklwd	%xmm13, %xmm0
    00000369: 	paddd	%xmm5, %xmm2
    0000036d: 	movdqa	%xmm7, %xmm5
    00000371: 	paddd	%xmm10, %xmm0
    00000376: 	movdqa	%xmm6, %xmm10
    0000037b: 	punpckhwd	%xmm12, %xmm6
    00000380: 	punpcklwd	%xmm12, %xmm10
    00000385: 	paddd	%xmm6, %xmm2
    00000389: 	movdqa	%xmm7, %xmm6
    0000038d: 	paddd	%xmm10, %xmm0
    00000392: 	movdqa	%xmm3, %xmm10
    00000397: 	pcmpgtw	%xmm11, %xmm10
    0000039c: 	punpcklwd	%xmm10, %xmm14
    000003a1: 	punpckhwd	%xmm10, %xmm11
    000003a6: 	paddd	%xmm14, %xmm0
    000003ab: 	paddd	%xmm11, %xmm2
    000003b0: 	paddd	%xmm9, %xmm0
    000003b5: 	paddd	%xmm9, %xmm2
    000003ba: 	pcmpgtd	%xmm0, %xmm6
    000003be: 	pcmpgtd	%xmm2, %xmm5
    000003c2: 	pand	%xmm8, %xmm6
    000003c7: 	pand	%xmm8, %xmm5
    000003cc: 	paddd	%xmm6, %xmm0
    000003d0: 	paddd	%xmm5, %xmm2
    000003d4: 	psrad	$0x2, %xmm2
    000003d9: 	psrad	$0x2, %xmm0
    000003de: 	movdqa	%xmm0, %xmm5
    000003e2: 	punpcklwd	%xmm2, %xmm0
    000003e6: 	punpckhwd	%xmm2, %xmm5
    000003ea: 	movdqa	%xmm0, %xmm2
    000003ee: 	punpckhwd	%xmm5, %xmm2
    000003f2: 	punpcklwd	%xmm5, %xmm0
    000003f6: 	punpcklwd	%xmm2, %xmm0
    000003fa: 	psubw	%xmm4, %xmm0
    000003fe: 	movdqa	%xmm0, %xmm5
    00000402: 	pmulhw	%xmm15, %xmm0
    00000407: 	pmullw	%xmm15, %xmm5
    0000040c: 	movdqa	%xmm5, %xmm2
    00000410: 	punpckhwd	%xmm0, %xmm5
    00000414: 	punpcklwd	%xmm0, %xmm2
    00000418: 	psrad	$0x6, %xmm5
    0000041d: 	psrad	$0x6, %xmm2
    00000422: 	movdqa	%xmm2, %xmm0
    00000426: 	movdqa	%xmm2, %xmm6
    0000042a: 	punpcklwd	%xmm5, %xmm0
    0000042e: 	punpckhwd	%xmm5, %xmm6
    00000432: 	movdqa	%xmm0, %xmm2
    00000436: 	punpcklwd	%xmm6, %xmm0
    0000043a: 	punpckhwd	%xmm6, %xmm2
    0000043e: 	punpcklwd	%xmm2, %xmm0
    00000442: 	pshufd	$0x55, %xmm1, %xmm2
    00000447: 	movd	%xmm2, -0x18(%rax)
    0000044c: 	movdqa	%xmm1, %xmm2
    00000450: 	paddw	%xmm4, %xmm0
    00000454: 	punpckhdq	%xmm1, %xmm2
    00000458: 	pshufd	$0xff, %xmm1, %xmm1
    0000045d: 	movd	%xmm1, -0x8(%rax)
    00000462: 	pshufd	$0x55, %xmm0, %xmm1
    00000467: 	movd	%xmm2, -0x10(%rax)
    0000046c: 	movd	%xmm1, 0x8(%rdx,%rsi)
    00000472: 	movdqa	%xmm0, %xmm1
    00000476: 	movd	%xmm0, (%rdx,%rsi)
    0000047b: 	punpckhdq	%xmm0, %xmm1
    0000047f: 	pshufd	$0xff, %xmm0, %xmm0
    00000484: 	movd	%xmm1, 0x10(%rdx,%rsi)
    0000048a: 	movd	%xmm0, 0x18(%rdx,%rsi)
    00000490: 	addq	$0x20, %rsi
    00000494: 	cmpq	%rbp, %rsi
    00000497: 	jne	.Ltmp280 # Offset: 1175
    0000049d: 	movq	-0x30(%rsp), %rbx
    000004a2: 	movq	-0x48(%rsp), %rax
    000004a7: 	leaq	(%rbx,%r14), %r8
    000004ab: 	addq	%rbx, %rax
    000004ae: 	addq	%r8, %r8
    000004b1: 	leaq	(%rdi,%rax,2), %rbp
    000004b5: 	leaq	(%rbx,%r12), %rax
    000004b9: 	movl	-0x24(%rsp), %r12d
    000004be: 	leaq	(%r15,%r8), %r11
    000004c2: 	leaq	(%rdi,%rax,2), %rbx
    000004c6: 	addq	%rdi, %r8
    000004c9: 	nopl	(%rax) # Size: 7
.Ltmp281:
    000004d0: 	movswl	(%rbp), %eax
    000004d4: 	movswl	-0x2(%r8), %edx
    000004d9: 	addl	$0x4, %r12d
    000004dd: 	movswl	0x2(%r8), %esi
    000004e2: 	movswl	0x4(%rbp), %r14d
    000004e7: 	addl	%eax, %edx
    000004e9: 	movswl	(%r8), %ecx
    000004ed: 	movswl	0x2(%rbp), %eax
    000004f1: 	addl	%esi, %edx
    000004f3: 	addl	%esi, %r14d
    000004f6: 	movswl	0x6(%r8), %esi
    000004fb: 	movq	(%r11), %xmm0
    00000500: 	addl	%eax, %ecx
    00000502: 	movswl	0x4(%r8), %eax
    00000507: 	addl	%r14d, %esi
    0000050a: 	movswl	0x6(%rbp), %r14d
    0000050f: 	addl	%eax, %ecx
    00000511: 	addl	%eax, %r14d
    00000514: 	movswl	0x8(%r8), %eax
    00000519: 	addl	%r14d, %eax
    0000051c: 	movswl	(%rbx), %r14d
    00000520: 	addl	%edx, %r14d
    00000523: 	leal	0x5(%r14), %edx
    00000527: 	addl	$0x2, %r14d
    0000052b: 	cmovnsl	%r14d, %edx
    0000052f: 	movswl	0x2(%rbx), %r14d
    00000534: 	sarl	$0x2, %edx
    00000537: 	subw	(%r11), %dx
    0000053b: 	addl	%ecx, %r14d
    0000053e: 	movswl	%dx, %edx
    00000541: 	leal	0x5(%r14), %ecx
    00000545: 	imull	$0x71, %edx, %edx
    00000548: 	sarl	$0x6, %edx
    0000054b: 	addl	$0x2, %r14d
    0000054f: 	cmovnsl	%r14d, %ecx
    00000553: 	movswl	0x4(%rbx), %r14d
    00000558: 	movzwl	%dx, %edx
    0000055b: 	sarl	$0x2, %ecx
    0000055e: 	subw	0x2(%r11), %cx
    00000563: 	addl	%esi, %r14d
    00000566: 	movswl	%cx, %ecx
    00000569: 	leal	0x5(%r14), %esi
    0000056d: 	imull	$0x71, %ecx, %ecx
    00000570: 	sarl	$0x6, %ecx
    00000573: 	addl	$0x2, %r14d
    00000577: 	cmovnsl	%r14d, %esi
    0000057b: 	movswl	0x6(%rbx), %r14d
    00000580: 	movzwl	%cx, %ecx
    00000583: 	sarl	$0x2, %esi
    00000586: 	subw	0x4(%r11), %si
    0000058b: 	addl	%eax, %r14d
    0000058e: 	movswl	%si, %esi
    00000591: 	leal	0x5(%r14), %eax
    00000595: 	imull	$0x71, %esi, %esi
    00000598: 	sarl	$0x6, %esi
    0000059b: 	addl	$0x2, %r14d
    0000059f: 	cmovnsl	%r14d, %eax
    000005a3: 	movzwl	%si, %esi
    000005a6: 	addq	$0x8, %r11
    000005aa: 	addq	$0x8, %rbp
    000005ae: 	addq	$0x8, %r8
    000005b2: 	addq	$0x8, %rbx
    000005b6: 	sarl	$0x2, %eax
    000005b9: 	subw	-0x2(%r11), %ax
    000005be: 	cwtl
    000005bf: 	imull	$0x71, %eax, %eax
    000005c2: 	sarl	$0x6, %eax
    000005c5: 	movzwl	%ax, %eax
    000005c8: 	shlq	$0x10, %rax
    000005cc: 	orq	%rsi, %rax
    000005cf: 	shlq	$0x10, %rax
    000005d3: 	orq	%rcx, %rax
    000005d6: 	shlq	$0x10, %rax
    000005da: 	orq	%rdx, %rax
    000005dd: 	movq	%rax, %xmm4
    000005e2: 	paddw	%xmm4, %xmm0
    000005e6: 	movq	%xmm0, -0x8(%r11)
    000005ec: 	cmpl	%r12d, %r9d
    000005ef: 	jg	.Ltmp281 # Offset: 1519
.Ltmp285:
    000005f5: 	movl	%r9d, -0x68(%rsp)
    000005fa: 	movl	-0x34(%rsp), %eax
.Ltmp278:
    000005fe: 	cmpl	-0x40(%rsp), %eax
    00000602: 	jge	.Ltmp282 # Offset: 1538
    00000608: 	leal	(%r13,%rax), %edx
    0000060d: 	movl	-0x50(%rsp), %r14d
    00000612: 	leal	(%r10,%rax), %r11d
    00000616: 	movl	-0x40(%rsp), %r9d
    0000061b: 	movslq	%edx, %rdx
    0000061e: 	movslq	%r11d, %r11
    00000621: 	movswl	(%rdi,%rdx,2), %ecx
    00000625: 	leal	-0x1(%rax,%r10), %edx
    0000062a: 	leaq	(%r15,%r11,2), %rbx
    0000062e: 	movslq	%edx, %rdx
    00000631: 	movswl	(%rdi,%rdx,2), %r8d
    00000636: 	addl	%ecx, %r8d
    00000639: 	leal	0x1(%rax), %ecx
    0000063c: 	leal	(%rcx,%r10), %edx
    00000640: 	movslq	%edx, %rdx
    00000643: 	addq	%rdx, %rdx
    00000646: 	leaq	(%rdi,%rdx), %rbp
    0000064a: 	movswl	(%rbp), %esi
    0000064e: 	addl	%r8d, %esi
    00000651: 	leal	(%r14,%rax), %r8d
    00000655: 	movslq	%r8d, %r8
    00000658: 	movswl	(%rdi,%r8,2), %r8d
    0000065d: 	addl	%esi, %r8d
    00000660: 	leal	0x5(%r8), %esi
    00000664: 	addl	$0x2, %r8d
    00000668: 	cmovnsl	%r8d, %esi
    0000066c: 	sarl	$0x2, %esi
    0000066f: 	subw	(%rbx), %si
    00000672: 	movswl	%si, %esi
    00000675: 	imull	$0x71, %esi, %esi
    00000678: 	sarl	$0x6, %esi
    0000067b: 	addw	(%rbx), %si
    0000067e: 	movw	%si, (%rbx)
    00000681: 	cmpl	%r9d, %ecx
    00000684: 	jge	.Ltmp282 # Offset: 1668
    0000068a: 	leal	(%rcx,%r13), %esi
    0000068e: 	movswl	(%rdi,%r11,2), %ebx
    00000693: 	leal	0x2(%rax), %r8d
    00000697: 	addl	%r14d, %ecx
    0000069a: 	movslq	%esi, %rsi
    0000069d: 	movslq	%ecx, %rcx
    000006a0: 	addq	%r15, %rdx
    000006a3: 	movswl	(%rdi,%rsi,2), %esi
    000006a7: 	movswl	(%rdi,%rcx,2), %ecx
    000006ab: 	addl	%esi, %ebx
    000006ad: 	leal	(%r8,%r10), %esi
    000006b1: 	movslq	%esi, %rsi
    000006b4: 	addq	%rsi, %rsi
    000006b7: 	leaq	(%rdi,%rsi), %r12
    000006bb: 	movswl	(%r12), %r11d
    000006c0: 	addl	%ebx, %r11d
    000006c3: 	addl	%ecx, %r11d
    000006c6: 	leal	0x5(%r11), %ecx
    000006ca: 	addl	$0x2, %r11d
    000006ce: 	cmovnsl	%r11d, %ecx
    000006d2: 	sarl	$0x2, %ecx
    000006d5: 	subw	(%rdx), %cx
    000006d8: 	movswl	%cx, %ecx
    000006db: 	imull	$0x71, %ecx, %ecx
    000006de: 	sarl	$0x6, %ecx
    000006e1: 	addw	(%rdx), %cx
    000006e4: 	movw	%cx, (%rdx)
    000006e7: 	cmpl	%r9d, %r8d
    000006ea: 	jge	.Ltmp282 # Offset: 1770
    000006f0: 	leal	(%r8,%r13), %edx
    000006f4: 	movswl	(%rbp), %r11d
    000006f9: 	addl	%r14d, %r8d
    000006fc: 	addq	%r15, %rsi
    000006ff: 	movslq	%edx, %rdx
    00000702: 	movslq	%r8d, %r8
    00000705: 	movswl	(%rdi,%rdx,2), %edx
    00000709: 	movswl	(%rdi,%r8,2), %r8d
    0000070e: 	addl	%edx, %r11d
    00000711: 	leal	0x3(%rax), %edx
    00000714: 	leal	(%rdx,%r10), %ecx
    00000718: 	movslq	%ecx, %rcx
    0000071b: 	leaq	(%rcx,%rcx), %rbx
    0000071f: 	movswl	(%rdi,%rcx,2), %ecx
    00000723: 	addl	%r11d, %ecx
    00000726: 	addl	%ecx, %r8d
    00000729: 	leal	0x5(%r8), %ecx
    0000072d: 	addl	$0x2, %r8d
    00000731: 	cmovnsl	%r8d, %ecx
    00000735: 	sarl	$0x2, %ecx
    00000738: 	subw	(%rsi), %cx
    0000073b: 	movswl	%cx, %ecx
    0000073e: 	imull	$0x71, %ecx, %ecx
    00000741: 	sarl	$0x6, %ecx
    00000744: 	addw	(%rsi), %cx
    00000747: 	movw	%cx, (%rsi)
    0000074a: 	cmpl	%r9d, %edx
    0000074d: 	jge	.Ltmp282 # Offset: 1869
    0000074f: 	leal	(%rdx,%r13), %ecx
    00000753: 	leal	0x4(%rax,%r10), %eax
    00000758: 	movswl	(%r12), %esi
    0000075d: 	addl	%r14d, %edx
    00000760: 	movslq	%ecx, %rcx
    00000763: 	cltq
    00000765: 	movslq	%edx, %rdx
    00000768: 	addq	%r15, %rbx
    0000076b: 	movswl	(%rdi,%rcx,2), %ecx
    0000076f: 	movswl	(%rdi,%rax,2), %eax
    00000773: 	movswl	(%rdi,%rdx,2), %edx
    00000777: 	addl	%ecx, %esi
    00000779: 	addl	%esi, %eax
    0000077b: 	addl	%eax, %edx
    0000077d: 	leal	0x5(%rdx), %eax
    00000780: 	addl	$0x2, %edx
    00000783: 	cmovnsl	%edx, %eax
    00000786: 	sarl	$0x2, %eax
    00000789: 	subw	(%rbx), %ax
    0000078c: 	cwtl
    0000078d: 	imull	$0x71, %eax, %eax
    00000790: 	sarl	$0x6, %eax
    00000793: 	addw	(%rbx), %ax
    00000796: 	movw	%ax, (%rbx)
.Ltmp282:
    00000799: 	movl	-0x38(%rsp), %eax
    0000079d: 	movl	-0x4c(%rsp), %ebx
    000007a1: 	addl	%eax, -0x50(%rsp)
    000007a5: 	addl	%eax, %r13d
    000007a8: 	addl	%eax, %r10d
    000007ab: 	cmpl	%ebx, -0x3c(%rsp)
    000007af: 	jne	.Ltmp283 # Offset: 1967
.Ltmp277:
    000007b5: 	popq	%rbx
    000007b6: 	popq	%rbp
    000007b7: 	popq	%r12
    000007b9: 	popq	%r13
    000007bb: 	popq	%r14
    000007bd: 	popq	%r15
    000007bf: 	retq # Offset: 1983
.Ltmp279:
    000007c0: 	movq	-0x10(%rsp), %rax
    000007c5: 	subq	$0x2, %r8
    000007c9: 	addq	-0x18(%rsp), %r14
    000007ce: 	leaq	-0xa(%rdi,%rbp), %rbp
    000007d3: 	movl	-0x68(%rsp), %r9d
    000007d8: 	leaq	(%r15,%r8), %r11
    000007dc: 	leaq	-0xa(%rdi,%rbx), %rbx
    000007e1: 	addq	%rdi, %r8
    000007e4: 	leaq	(%rax,%r14,2), %r12
    000007e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp284:
    000007f0: 	movswl	0x2(%rbp), %eax
    000007f4: 	movswl	(%r8), %edx
    000007f8: 	movswl	0x4(%r8), %esi
    000007fd: 	movswl	0x6(%rbp), %r14d
    00000802: 	addl	%eax, %edx
    00000804: 	movswl	0x2(%r8), %ecx
    00000809: 	movswl	0x4(%rbp), %eax
    0000080d: 	addl	%esi, %edx
    0000080f: 	addl	%esi, %r14d
    00000812: 	movswl	0x8(%r8), %esi
    00000817: 	movq	0x2(%r11), %xmm0
    0000081d: 	addl	%eax, %ecx
    0000081f: 	movswl	0x6(%r8), %eax
    00000824: 	addl	%r14d, %esi
    00000827: 	movswl	0x8(%rbp), %r14d
    0000082c: 	addl	%eax, %ecx
    0000082e: 	addl	%eax, %r14d
    00000831: 	movswl	0xa(%r8), %eax
    00000836: 	addl	%r14d, %eax
    00000839: 	movswl	0x2(%rbx), %r14d
    0000083e: 	addl	%edx, %r14d
    00000841: 	leal	0x5(%r14), %edx
    00000845: 	addl	$0x2, %r14d
    00000849: 	cmovnsl	%r14d, %edx
    0000084d: 	movswl	0x4(%rbx), %r14d
    00000852: 	sarl	$0x2, %edx
    00000855: 	subw	0x2(%r11), %dx
    0000085a: 	addl	%ecx, %r14d
    0000085d: 	movswl	%dx, %edx
    00000860: 	leal	0x5(%r14), %ecx
    00000864: 	imull	$0x71, %edx, %edx
    00000867: 	sarl	$0x6, %edx
    0000086a: 	addl	$0x2, %r14d
    0000086e: 	cmovnsl	%r14d, %ecx
    00000872: 	movswl	0x6(%rbx), %r14d
    00000877: 	movzwl	%dx, %edx
    0000087a: 	sarl	$0x2, %ecx
    0000087d: 	subw	0x4(%r11), %cx
    00000882: 	addl	%esi, %r14d
    00000885: 	movswl	%cx, %ecx
    00000888: 	leal	0x5(%r14), %esi
    0000088c: 	imull	$0x71, %ecx, %ecx
    0000088f: 	sarl	$0x6, %ecx
    00000892: 	addl	$0x2, %r14d
    00000896: 	cmovnsl	%r14d, %esi
    0000089a: 	movswl	0x8(%rbx), %r14d
    0000089f: 	movzwl	%cx, %ecx
    000008a2: 	sarl	$0x2, %esi
    000008a5: 	subw	0x6(%r11), %si
    000008aa: 	addl	%eax, %r14d
    000008ad: 	movswl	%si, %esi
    000008b0: 	leal	0x5(%r14), %eax
    000008b4: 	imull	$0x71, %esi, %esi
    000008b7: 	sarl	$0x6, %esi
    000008ba: 	addl	$0x2, %r14d
    000008be: 	cmovnsl	%r14d, %eax
    000008c2: 	movzwl	%si, %esi
    000008c5: 	addq	$0x8, %r8
    000008c9: 	addq	$0x8, %r11
    000008cd: 	addq	$0x8, %rbp
    000008d1: 	addq	$0x8, %rbx
    000008d5: 	sarl	$0x2, %eax
    000008d8: 	subw	(%r11), %ax
    000008dc: 	cwtl
    000008dd: 	imull	$0x71, %eax, %eax
    000008e0: 	sarl	$0x6, %eax
    000008e3: 	movzwl	%ax, %eax
    000008e6: 	shlq	$0x10, %rax
    000008ea: 	orq	%rsi, %rax
    000008ed: 	shlq	$0x10, %rax
    000008f1: 	orq	%rcx, %rax
    000008f4: 	shlq	$0x10, %rax
    000008f8: 	orq	%rdx, %rax
    000008fb: 	movq	%rax, %xmm4
    00000900: 	paddw	%xmm4, %xmm0
    00000904: 	movq	%xmm0, -0x6(%r11)
    0000090a: 	cmpq	%r8, %r12
    0000090d: 	jne	.Ltmp284 # Offset: 2317
    00000913: 	jmp	.Ltmp285 # Offset: 2323
DWARF CFI Instructions:
    <empty>
End of Function "_ZN21jacobi_sor2D_unrolledIsiEclEPsS1_iiii.isra.0/1(*2)"

Binary Function "_ZN18jacobi2D_unrolled2IsiEclEPKsPsiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN18jacobi2D_unrolled2IsiEclEPKsPsiiii.isra.0/1
                _ZN18jacobi2D_unrolled2IsiEclEPKsPsiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 68
  State       : disassembled
  Address     : 0x119d0
  Size        : 0x734
  MaxSize     : 0x740
  Offset      : 0x119d0
  Section     : .text
  Orc Section : .local.text._ZN18jacobi2D_unrolled2IsiEclEPKsPsiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%r8d, -0x38(%rsp)
    00000012: 	movl	%eax, -0x3c(%rsp)
    00000016: 	cmpl	$0x1, %eax
    00000019: 	jle	.Ltmp286 # Offset: 25
    0000001f: 	leal	-0x1(%rcx), %eax
    00000022: 	leal	-0x4(%rcx), %r12d
    00000026: 	movl	$0x0, -0x44(%rsp)
    0000002e: 	movdqa	DATAat0x49440(%rip), %xmm7
    00000036: 	movl	%eax, -0x48(%rsp)
    0000003a: 	leal	(%r8,%r8), %eax
    0000003e: 	movq	%rdi, %r11
    00000041: 	movq	%rsi, %rbx
    00000044: 	movl	%eax, -0x4c(%rsp)
    00000048: 	leal	-0x6(%rcx), %eax
    0000004b: 	movl	%r8d, %r13d
    0000004e: 	pxor	%xmm4, %xmm4
    00000052: 	movl	%eax, %edx
    00000054: 	movl	%eax, -0x28(%rsp)
    00000058: 	shrl	$0x4, %eax
    0000005b: 	movdqa	DATAat0x49450(%rip), %xmm6
    00000063: 	leal	-0x1(%rax), %ecx
    00000066: 	shll	$0x4, %eax
    00000069: 	shrl	$0x2, %edx
    0000006c: 	pxor	%xmm5, %xmm5
    00000070: 	addl	$0x1, %eax
    00000073: 	addq	$0x1, %rcx
    00000077: 	movl	$0x1, -0x40(%rsp)
    0000007f: 	movl	%eax, -0x24(%rsp)
    00000083: 	cltq
    00000085: 	shlq	$0x5, %rcx
    00000089: 	movq	%rax, -0x20(%rsp)
    0000008e: 	movl	%edx, %eax
    00000090: 	shlq	$0x2, %rax
    00000094: 	movq	%rcx, -0x30(%rsp)
    00000099: 	movq	%rax, -0x18(%rsp)
    0000009e: 	leal	0x5(,%rdx,4), %eax
    000000a5: 	movl	%eax, -0x34(%rsp)
    000000a9: 	leaq	0x8(%rdi), %rax
    000000ad: 	movq	%rax, -0x10(%rsp)
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp292:
    000000b8: 	addl	$0x1, -0x40(%rsp)
    000000bd: 	movl	$0x1, %eax
    000000c2: 	cmpl	$0x1, %r12d
    000000c6: 	jle	.Ltmp287 # Offset: 198
    000000cc: 	movslq	-0x44(%rsp), %r9
    000000d1: 	movslq	%r13d, %rdx
    000000d4: 	movslq	-0x4c(%rsp), %r8
    000000d9: 	leaq	0x2(%rdx,%rdx), %rsi
    000000de: 	leaq	(%rbx,%rsi), %rax
    000000e2: 	leaq	0xa(%r9,%r9), %r14
    000000e7: 	leaq	(%r11,%r14), %r10
    000000eb: 	movq	%rax, %rdi
    000000ee: 	leaq	0x6(%r11,%rsi), %rcx
    000000f3: 	subq	%r10, %rdi
    000000f6: 	leaq	0xe(%r11,%rsi), %r15
    000000fb: 	leaq	0xa(%r8,%r8), %rbp
    00000100: 	addq	$0x6, %rdi
    00000104: 	cmpq	$0x1c, %rdi
    00000108: 	movq	%rax, %rdi
    0000010b: 	seta	%r10b
    0000010f: 	subq	%rcx, %rdi
    00000112: 	addq	$0x6, %rdi
    00000116: 	cmpq	$0x1c, %rdi
    0000011a: 	seta	%dil
    0000011e: 	andl	%r10d, %edi
    00000121: 	cmpl	$0xf, -0x28(%rsp)
    00000126: 	seta	%r10b
    0000012a: 	andl	%r10d, %edi
    0000012d: 	movq	%rax, %r10
    00000130: 	subq	%r15, %r10
    00000133: 	addq	$0x6, %r10
    00000137: 	cmpq	$0x18, %r10
    0000013b: 	seta	%r10b
    0000013f: 	testb	%r10b, %dil
    00000142: 	je	.Ltmp288 # Offset: 322
    00000148: 	leaq	(%r11,%rbp), %r10
    0000014c: 	movq	%rax, %rdi
    0000014f: 	subq	%r10, %rdi
    00000152: 	addq	$0x6, %rdi
    00000156: 	cmpq	$0x1c, %rdi
    0000015a: 	jbe	.Ltmp288 # Offset: 346
    00000160: 	movq	-0x30(%rsp), %r15
    00000165: 	leaq	-0x8(%r11,%r14), %r10
    0000016a: 	leaq	-0x2(%r11,%rsi), %rdi
    0000016f: 	leaq	0x4(%rbx,%rsi), %r14
    00000174: 	leaq	-0x8(%r11,%rbp), %rbp
    00000179: 	xorl	%esi, %esi
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp289:
    00000180: 	movdqu	(%r10,%rsi), %xmm2
    00000186: 	movdqu	(%rdi,%rsi), %xmm9
    0000018c: 	movdqa	%xmm4, %xmm10
    00000191: 	movdqa	%xmm4, %xmm8
    00000196: 	movdqu	0x10(%r10,%rsi), %xmm0
    0000019d: 	movdqu	(%rcx,%rsi), %xmm1
    000001a2: 	movdqa	%xmm4, %xmm14
    000001a7: 	movdqa	%xmm2, %xmm3
    000001ab: 	movdqa	%xmm9, %xmm12
    000001b0: 	shufps	$0x88, %xmm0, %xmm3
    000001b4: 	shufps	$0xdd, %xmm0, %xmm2
    000001b8: 	movdqu	0x10(%rdi,%rsi), %xmm0
    000001be: 	pcmpgtw	%xmm2, %xmm10
    000001c3: 	shufps	$0x88, %xmm0, %xmm12
    000001c8: 	shufps	$0xdd, %xmm0, %xmm9
    000001cd: 	movdqa	%xmm4, %xmm0
    000001d1: 	movdqa	%xmm9, %xmm11
    000001d6: 	pcmpgtw	%xmm9, %xmm0
    000001db: 	pcmpgtw	%xmm12, %xmm14
    000001e0: 	movdqa	%xmm12, %xmm15
    000001e5: 	punpcklwd	%xmm0, %xmm11
    000001ea: 	punpckhwd	%xmm0, %xmm9
    000001ef: 	movdqu	0x10(%rcx,%rsi), %xmm0
    000001f5: 	punpcklwd	%xmm14, %xmm15
    000001fa: 	punpckhwd	%xmm14, %xmm12
    000001ff: 	shufps	$0x88, %xmm0, %xmm1
    00000203: 	pcmpgtw	%xmm1, %xmm8
    00000208: 	movdqa	%xmm2, %xmm0
    0000020c: 	movdqa	%xmm1, %xmm13
    00000211: 	punpcklwd	%xmm10, %xmm0
    00000216: 	punpckhwd	%xmm10, %xmm2
    0000021b: 	paddd	%xmm11, %xmm0
    00000220: 	paddd	%xmm9, %xmm2
    00000225: 	punpcklwd	%xmm8, %xmm13
    0000022a: 	punpckhwd	%xmm8, %xmm1
    0000022f: 	movdqu	(%rbp,%rsi), %xmm8
    00000236: 	paddd	%xmm13, %xmm0
    0000023b: 	movdqa	%xmm4, %xmm13
    00000240: 	paddd	%xmm1, %xmm2
    00000244: 	movdqu	0x10(%rbp,%rsi), %xmm1
    0000024a: 	pcmpgtw	%xmm3, %xmm13
    0000024f: 	movdqa	%xmm8, %xmm10
    00000254: 	shufps	$0x88, %xmm1, %xmm10
    00000259: 	movdqa	%xmm3, %xmm1
    0000025d: 	punpcklwd	%xmm13, %xmm1
    00000262: 	punpckhwd	%xmm13, %xmm3
    00000267: 	paddd	%xmm15, %xmm1
    0000026c: 	paddd	%xmm12, %xmm3
    00000271: 	movdqa	%xmm10, %xmm15
    00000276: 	paddd	%xmm11, %xmm1
    0000027b: 	movdqa	%xmm4, %xmm11
    00000280: 	paddd	%xmm9, %xmm3
    00000285: 	pcmpgtw	%xmm10, %xmm11
    0000028a: 	movdqa	%xmm5, %xmm9
    0000028f: 	punpckhwd	%xmm11, %xmm10
    00000294: 	punpcklwd	%xmm11, %xmm15
    00000299: 	paddd	%xmm10, %xmm3
    0000029e: 	paddd	%xmm15, %xmm1
    000002a3: 	movdqa	%xmm5, %xmm10
    000002a8: 	paddd	%xmm7, %xmm1
    000002ac: 	paddd	%xmm7, %xmm3
    000002b0: 	pcmpgtd	%xmm1, %xmm10
    000002b5: 	pcmpgtd	%xmm3, %xmm9
    000002ba: 	pand	%xmm6, %xmm10
    000002bf: 	pand	%xmm6, %xmm9
    000002c4: 	paddd	%xmm9, %xmm3
    000002c9: 	paddd	%xmm10, %xmm1
    000002ce: 	psrad	$0x2, %xmm3
    000002d3: 	psrad	$0x2, %xmm1
    000002d8: 	movdqa	%xmm1, %xmm9
    000002dd: 	punpcklwd	%xmm3, %xmm1
    000002e1: 	punpckhwd	%xmm3, %xmm9
    000002e6: 	movdqa	%xmm1, %xmm3
    000002ea: 	punpckhwd	%xmm9, %xmm3
    000002ef: 	punpcklwd	%xmm9, %xmm1
    000002f4: 	punpcklwd	%xmm3, %xmm1
    000002f8: 	movdqu	0x10(%rbp,%rsi), %xmm3
    000002fe: 	movd	%xmm1, (%rax,%rsi)
    00000303: 	shufps	$0xdd, %xmm3, %xmm8
    00000308: 	movdqa	%xmm4, %xmm3
    0000030c: 	movdqa	%xmm8, %xmm9
    00000311: 	pcmpgtw	%xmm8, %xmm3
    00000316: 	punpckhwd	%xmm3, %xmm8
    0000031b: 	punpcklwd	%xmm3, %xmm9
    00000320: 	movdqa	%xmm5, %xmm3
    00000324: 	paddd	%xmm8, %xmm2
    00000329: 	paddd	%xmm9, %xmm0
    0000032e: 	movdqa	%xmm5, %xmm8
    00000333: 	paddd	%xmm7, %xmm0
    00000337: 	paddd	%xmm7, %xmm2
    0000033b: 	pcmpgtd	%xmm0, %xmm8
    00000340: 	pcmpgtd	%xmm2, %xmm3
    00000344: 	pand	%xmm6, %xmm8
    00000349: 	pand	%xmm6, %xmm3
    0000034d: 	paddd	%xmm3, %xmm2
    00000351: 	paddd	%xmm8, %xmm0
    00000356: 	psrad	$0x2, %xmm2
    0000035b: 	psrad	$0x2, %xmm0
    00000360: 	movdqa	%xmm0, %xmm3
    00000364: 	punpcklwd	%xmm2, %xmm0
    00000368: 	punpckhwd	%xmm2, %xmm3
    0000036c: 	movdqa	%xmm0, %xmm2
    00000370: 	punpckhwd	%xmm3, %xmm2
    00000374: 	punpcklwd	%xmm3, %xmm0
    00000378: 	punpcklwd	%xmm2, %xmm0
    0000037c: 	pshufd	$0x55, %xmm1, %xmm2
    00000381: 	movd	%xmm2, 0x8(%rax,%rsi)
    00000387: 	movdqa	%xmm1, %xmm2
    0000038b: 	punpckhdq	%xmm1, %xmm2
    0000038f: 	pshufd	$0xff, %xmm1, %xmm1
    00000394: 	movd	%xmm1, 0x18(%rax,%rsi)
    0000039a: 	pshufd	$0x55, %xmm0, %xmm1
    0000039f: 	movd	%xmm2, 0x10(%rax,%rsi)
    000003a5: 	movd	%xmm1, 0x8(%r14,%rsi)
    000003ac: 	movdqa	%xmm0, %xmm1
    000003b0: 	movd	%xmm0, (%r14,%rsi)
    000003b6: 	punpckhdq	%xmm0, %xmm1
    000003ba: 	pshufd	$0xff, %xmm0, %xmm0
    000003bf: 	movd	%xmm1, 0x10(%r14,%rsi)
    000003c6: 	movd	%xmm0, 0x18(%r14,%rsi)
    000003cd: 	addq	$0x20, %rsi
    000003d1: 	cmpq	%rsi, %r15
    000003d4: 	jne	.Ltmp289 # Offset: 980
    000003da: 	movq	-0x20(%rsp), %rcx
    000003df: 	movl	-0x24(%rsp), %ebp
    000003e3: 	addq	%rcx, %rdx
    000003e6: 	addq	%rcx, %r9
    000003e9: 	addq	%rcx, %r8
    000003ec: 	addq	%rdx, %rdx
    000003ef: 	leaq	(%r11,%r9,2), %rsi
    000003f3: 	leaq	(%r11,%r8,2), %rcx
    000003f7: 	leaq	(%r11,%rdx), %rax
    000003fb: 	addq	%rbx, %rdx
    000003fe: 	nop # Size: 2
.Ltmp290:
    00000400: 	movswl	0x2(%rsi), %r9d
    00000405: 	movswl	(%rax), %edi
    00000408: 	addl	$0x4, %ebp
    0000040b: 	movswl	0x4(%rax), %r8d
    00000410: 	movswl	0x2(%rax), %r14d
    00000415: 	addl	%r9d, %edi
    00000418: 	movswl	0x2(%rcx), %r9d
    0000041d: 	movswl	(%rsi), %r15d
    00000421: 	addl	%r8d, %edi
    00000424: 	addl	%r9d, %edi
    00000427: 	movswl	0x6(%rax), %r9d
    0000042c: 	leal	0x5(%rdi), %r10d
    00000430: 	addl	$0x2, %edi
    00000433: 	cmovnsl	%edi, %r10d
    00000437: 	movswl	0x4(%rsi), %edi
    0000043b: 	addl	%r14d, %edi
    0000043e: 	sarl	$0x2, %r10d
    00000442: 	addl	%r9d, %edi
    00000445: 	movswl	0x4(%rcx), %r9d
    0000044a: 	addl	%r9d, %edi
    0000044d: 	leal	0x5(%rdi), %r9d
    00000451: 	addl	$0x2, %edi
    00000454: 	cmovnsl	%edi, %r9d
    00000458: 	movswl	0x6(%rsi), %edi
    0000045c: 	addl	%r8d, %edi
    0000045f: 	movswl	0x8(%rax), %r8d
    00000464: 	sarl	$0x2, %r9d
    00000468: 	addl	%r8d, %edi
    0000046b: 	movswl	0x6(%rcx), %r8d
    00000470: 	addl	%r8d, %edi
    00000473: 	leal	0x5(%rdi), %r8d
    00000477: 	addl	$0x2, %edi
    0000047a: 	cmovnsl	%edi, %r8d
    0000047e: 	movswl	-0x2(%rax), %edi
    00000482: 	addl	%r15d, %edi
    00000485: 	sarl	$0x2, %r8d
    00000489: 	addl	%r14d, %edi
    0000048c: 	movswl	(%rcx), %r14d
    00000490: 	movw	%r10w, 0x2(%rdx)
    00000495: 	movw	%r9w, 0x4(%rdx)
    0000049a: 	addl	%r14d, %edi
    0000049d: 	movw	%r8w, 0x6(%rdx)
    000004a2: 	leal	0x5(%rdi), %r14d
    000004a6: 	addl	$0x2, %edi
    000004a9: 	cmovsl	%r14d, %edi
    000004ad: 	addq	$0x8, %rsi
    000004b1: 	addq	$0x8, %rax
    000004b5: 	addq	$0x8, %rcx
    000004b9: 	addq	$0x8, %rdx
    000004bd: 	sarl	$0x2, %edi
    000004c0: 	movw	%di, -0x8(%rdx)
    000004c4: 	cmpl	%ebp, %r12d
    000004c7: 	jg	.Ltmp290 # Offset: 1223
.Ltmp294:
    000004cd: 	movl	-0x34(%rsp), %eax
.Ltmp287:
    000004d1: 	cmpl	-0x48(%rsp), %eax
    000004d5: 	jge	.Ltmp291 # Offset: 1237
    000004db: 	movl	-0x44(%rsp), %r15d
    000004e0: 	leal	-0x1(%r13,%rax), %edi
    000004e5: 	movl	-0x4c(%rsp), %r14d
    000004ea: 	movslq	%edi, %rdi
    000004ed: 	leal	(%r15,%rax), %edx
    000004f1: 	movswl	(%r11,%rdi,2), %r8d
    000004f6: 	movslq	%edx, %rdx
    000004f9: 	movswl	(%r11,%rdx,2), %ecx
    000004fe: 	leal	0x1(%rax), %edx
    00000501: 	leal	(%rdx,%r13), %esi
    00000505: 	movslq	%esi, %rsi
    00000508: 	leaq	(%r11,%rsi,2), %r9
    0000050c: 	movswl	(%r9), %edi
    00000510: 	addl	%edi, %r8d
    00000513: 	leal	(%r13,%rax), %edi
    00000518: 	addl	%ecx, %r8d
    0000051b: 	leal	(%r14,%rax), %ecx
    0000051f: 	movslq	%edi, %rdi
    00000522: 	movslq	%ecx, %rcx
    00000525: 	movswl	(%r11,%rcx,2), %ecx
    0000052a: 	addl	%r8d, %ecx
    0000052d: 	leal	0x5(%rcx), %r8d
    00000531: 	addl	$0x2, %ecx
    00000534: 	cmovnsl	%ecx, %r8d
    00000538: 	sarl	$0x2, %r8d
    0000053c: 	movw	%r8w, (%rbx,%rdi,2)
    00000541: 	cmpl	-0x48(%rsp), %edx
    00000545: 	jge	.Ltmp291 # Offset: 1349
    0000054b: 	leal	(%rdx,%r15), %ecx
    0000054f: 	movswl	(%r11,%rdi,2), %edi
    00000554: 	movslq	%ecx, %rcx
    00000557: 	movswl	(%r11,%rcx,2), %ebp
    0000055c: 	leal	0x2(%rax), %ecx
    0000055f: 	leal	(%rcx,%r13), %r8d
    00000563: 	movslq	%r8d, %r8
    00000566: 	leaq	(%r11,%r8,2), %r10
    0000056a: 	movswl	(%r10), %r14d
    0000056e: 	addl	%r14d, %edi
    00000571: 	movl	-0x4c(%rsp), %r14d
    00000576: 	addl	%ebp, %edi
    00000578: 	addl	%r14d, %edx
    0000057b: 	movslq	%edx, %rdx
    0000057e: 	movswl	(%r11,%rdx,2), %edx
    00000583: 	addl	%edi, %edx
    00000585: 	leal	0x5(%rdx), %edi
    00000588: 	addl	$0x2, %edx
    0000058b: 	cmovnsl	%edx, %edi
    0000058e: 	sarl	$0x2, %edi
    00000591: 	movw	%di, (%rbx,%rsi,2)
    00000595: 	cmpl	-0x48(%rsp), %ecx
    00000599: 	jge	.Ltmp291 # Offset: 1433
    0000059f: 	leal	(%rcx,%r15), %edx
    000005a3: 	movswl	(%r9), %r9d
    000005a7: 	addl	%r14d, %ecx
    000005aa: 	movslq	%edx, %rdx
    000005ad: 	movslq	%ecx, %rcx
    000005b0: 	movswl	(%r11,%rdx,2), %ebp
    000005b5: 	leal	0x3(%rax), %edx
    000005b8: 	movswl	(%r11,%rcx,2), %ecx
    000005bd: 	leal	(%rdx,%r13), %edi
    000005c1: 	movslq	%edi, %rdi
    000005c4: 	movswl	(%r11,%rdi,2), %esi
    000005c9: 	addl	%r9d, %esi
    000005cc: 	addl	%ebp, %esi
    000005ce: 	addl	%esi, %ecx
    000005d0: 	leal	0x5(%rcx), %esi
    000005d3: 	addl	$0x2, %ecx
    000005d6: 	cmovnsl	%ecx, %esi
    000005d9: 	sarl	$0x2, %esi
    000005dc: 	movw	%si, (%rbx,%r8,2)
    000005e1: 	cmpl	-0x48(%rsp), %edx
    000005e5: 	jge	.Ltmp291 # Offset: 1509
    000005e7: 	leal	0x4(%r13,%rax), %eax
    000005ec: 	leal	(%rdx,%r15), %ecx
    000005f0: 	movswl	(%r10), %esi
    000005f4: 	addl	%r14d, %edx
    000005f7: 	cltq
    000005f9: 	movslq	%ecx, %rcx
    000005fc: 	movslq	%edx, %rdx
    000005ff: 	movswl	(%r11,%rax,2), %eax
    00000604: 	movswl	(%r11,%rcx,2), %ecx
    00000609: 	movswl	(%r11,%rdx,2), %edx
    0000060e: 	addl	%esi, %eax
    00000610: 	addl	%ecx, %eax
    00000612: 	addl	%edx, %eax
    00000614: 	leal	0x5(%rax), %edx
    00000617: 	addl	$0x2, %eax
    0000061a: 	cmovnsl	%eax, %edx
    0000061d: 	sarl	$0x2, %edx
    00000620: 	movw	%dx, (%rbx,%rdi,2)
.Ltmp291:
    00000624: 	movl	-0x38(%rsp), %eax
    00000628: 	movl	-0x40(%rsp), %ecx
    0000062c: 	addl	%eax, -0x44(%rsp)
    00000630: 	addl	%eax, -0x4c(%rsp)
    00000634: 	addl	%eax, %r13d
    00000637: 	cmpl	%ecx, -0x3c(%rsp)
    0000063b: 	jne	.Ltmp292 # Offset: 1595
.Ltmp286:
    00000641: 	popq	%rbx
    00000642: 	popq	%rbp
    00000643: 	popq	%r12
    00000645: 	popq	%r13
    00000647: 	popq	%r14
    00000649: 	popq	%r15
    0000064b: 	retq # Offset: 1611
    0000064c: 	nopl	(%rax) # Size: 4
.Ltmp288:
    00000650: 	movq	-0x10(%rsp), %rcx
    00000655: 	leaq	-0x2(%rsi), %rax
    00000659: 	addq	-0x18(%rsp), %rdx
    0000065e: 	leaq	-0xa(%r11,%r14), %r10
    00000663: 	leaq	(%r11,%rax), %r8
    00000667: 	leaq	-0xa(%r11,%rbp), %r9
    0000066c: 	addq	%rbx, %rax
    0000066f: 	leaq	(%rcx,%rdx,2), %r15
    00000673: 	nopl	(%rax,%rax) # Size: 5
.Ltmp293:
    00000678: 	movswl	0x4(%r10), %esi
    0000067d: 	movswl	0x2(%r8), %edx
    00000682: 	movswl	0x6(%r8), %ecx
    00000687: 	movswl	0x4(%r8), %ebp
    0000068c: 	addl	%esi, %edx
    0000068e: 	movswl	0x4(%r9), %esi
    00000693: 	movswl	0x2(%r10), %r14d
    00000698: 	addl	%ecx, %edx
    0000069a: 	addl	%esi, %edx
    0000069c: 	movswl	0x8(%r8), %esi
    000006a1: 	leal	0x5(%rdx), %edi
    000006a4: 	addl	$0x2, %edx
    000006a7: 	cmovnsl	%edx, %edi
    000006aa: 	movswl	0x6(%r10), %edx
    000006af: 	addl	%ebp, %edx
    000006b1: 	sarl	$0x2, %edi
    000006b4: 	addl	%esi, %edx
    000006b6: 	movswl	0x6(%r9), %esi
    000006bb: 	addl	%esi, %edx
    000006bd: 	leal	0x5(%rdx), %esi
    000006c0: 	addl	$0x2, %edx
    000006c3: 	cmovnsl	%edx, %esi
    000006c6: 	movswl	0x8(%r10), %edx
    000006cb: 	addl	%ecx, %edx
    000006cd: 	movswl	0xa(%r8), %ecx
    000006d2: 	sarl	$0x2, %esi
    000006d5: 	addl	%ecx, %edx
    000006d7: 	movswl	0x8(%r9), %ecx
    000006dc: 	addl	%ecx, %edx
    000006de: 	leal	0x5(%rdx), %ecx
    000006e1: 	addl	$0x2, %edx
    000006e4: 	cmovnsl	%edx, %ecx
    000006e7: 	movswl	(%r8), %edx
    000006eb: 	addl	%r14d, %edx
    000006ee: 	sarl	$0x2, %ecx
    000006f1: 	addl	%ebp, %edx
    000006f3: 	movswl	0x2(%r9), %ebp
    000006f8: 	movw	%di, 0x4(%rax)
    000006fc: 	movw	%si, 0x6(%rax)
    00000700: 	addl	%ebp, %edx
    00000702: 	movw	%cx, 0x8(%rax)
    00000706: 	leal	0x5(%rdx), %ebp
    00000709: 	addl	$0x2, %edx
    0000070c: 	cmovsl	%ebp, %edx
    0000070f: 	addq	$0x8, %r8
    00000713: 	addq	$0x8, %r10
    00000717: 	addq	$0x8, %r9
    0000071b: 	addq	$0x8, %rax
    0000071f: 	sarl	$0x2, %edx
    00000722: 	movw	%dx, -0x6(%rax)
    00000726: 	cmpq	%r8, %r15
    00000729: 	jne	.Ltmp293 # Offset: 1833
    0000072f: 	jmp	.Ltmp294 # Offset: 1839
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18jacobi2D_unrolled2IsiEclEPKsPsiiii.isra.0/1(*2)"

Binary Function "_ZN17jacobi2D_unrolledIsiEclEPKsPsiiii.isra.0/1(*2)" after disassembly {
  All names   : _ZN17jacobi2D_unrolledIsiEclEPKsPsiiii.isra.0/1
                _ZN17jacobi2D_unrolledIsiEclEPKsPsiiii.isra.0/pde_laplace_jacobi.cpp/1
  Number      : 69
  State       : disassembled
  Address     : 0x12110
  Size        : 0x768
  MaxSize     : 0x770
  Offset      : 0x12110
  Section     : .text
  Orc Section : .local.text._ZN17jacobi2D_unrolledIsiEclEPKsPsiiii.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	pushq	%r15
    00000002: 	leal	-0x1(%rdx), %eax
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%r8d, -0x34(%rsp)
    00000012: 	movl	%eax, -0x38(%rsp)
    00000016: 	cmpl	$0x1, %eax
    00000019: 	jle	.Ltmp295 # Offset: 25
    0000001f: 	leal	-0x1(%rcx), %eax
    00000022: 	leal	-0x4(%rcx), %ebx
    00000025: 	movq	%rsi, %r12
    00000028: 	movl	%r8d, %ebp
    0000002b: 	movl	%eax, -0x50(%rsp)
    0000002f: 	leal	(%r8,%r8), %eax
    00000033: 	xorl	%r15d, %r15d
    00000036: 	pxor	%xmm3, %xmm3
    0000003a: 	movl	%eax, -0x54(%rsp)
    0000003e: 	leal	-0x6(%rcx), %eax
    00000041: 	pxor	%xmm4, %xmm4
    00000045: 	movdqa	DATAat0x49440(%rip), %xmm6
    0000004d: 	movl	%eax, %edx
    0000004f: 	movl	%eax, -0x2c(%rsp)
    00000053: 	shrl	$0x4, %eax
    00000056: 	movdqa	DATAat0x49450(%rip), %xmm5
    0000005e: 	leal	-0x1(%rax), %ecx
    00000061: 	shll	$0x4, %eax
    00000064: 	shrl	$0x2, %edx
    00000067: 	movl	$0x1, -0x4c(%rsp)
    0000006f: 	addl	$0x1, %eax
    00000072: 	addq	$0x1, %rcx
    00000076: 	cltq
    00000078: 	shlq	$0x5, %rcx
    0000007c: 	movq	%rax, -0x20(%rsp)
    00000081: 	movl	%edx, %eax
    00000083: 	shlq	$0x2, %rax
    00000087: 	movq	%rcx, -0x28(%rsp)
    0000008c: 	movq	%rax, -0x18(%rsp)
    00000091: 	leal	0x5(,%rdx,4), %eax
    00000098: 	movl	%eax, -0x30(%rsp)
    0000009c: 	leaq	0x8(%rdi), %rax
    000000a0: 	movq	%rax, -0x10(%rsp)
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp301:
    000000a8: 	addl	$0x1, -0x4c(%rsp)
    000000ad: 	movl	$0x1, %eax
    000000b2: 	cmpl	$0x1, %ebx
    000000b5: 	jle	.Ltmp296 # Offset: 181
    000000bb: 	movslq	%ebp, %rax
    000000be: 	movslq	%r15d, %r13
    000000c1: 	movslq	-0x54(%rsp), %r14
    000000c6: 	movq	%rax, -0x48(%rsp)
    000000cb: 	leaq	0x2(%rax,%rax), %rax
    000000d0: 	leaq	0xa(%r13,%r13), %r10
    000000d5: 	leaq	(%r12,%rax), %rdx
    000000d9: 	leaq	(%rdi,%r10), %r8
    000000dd: 	movq	%rdx, %rcx
    000000e0: 	leaq	0x6(%rdi,%rax), %rsi
    000000e5: 	leaq	0xe(%rdi,%rax), %r11
    000000ea: 	subq	%r8, %rcx
    000000ed: 	leaq	0xa(%r14,%r14), %r9
    000000f2: 	addq	$0x6, %rcx
    000000f6: 	cmpq	$0x1c, %rcx
    000000fa: 	movq	%rdx, %rcx
    000000fd: 	seta	%r8b
    00000101: 	subq	%rsi, %rcx
    00000104: 	addq	$0x6, %rcx
    00000108: 	cmpq	$0x1c, %rcx
    0000010c: 	seta	%cl
    0000010f: 	andl	%r8d, %ecx
    00000112: 	cmpl	$0xf, -0x2c(%rsp)
    00000117: 	seta	%r8b
    0000011b: 	andl	%r8d, %ecx
    0000011e: 	movq	%rdx, %r8
    00000121: 	subq	%r11, %r8
    00000124: 	addq	$0x6, %r8
    00000128: 	cmpq	$0x18, %r8
    0000012c: 	seta	%r8b
    00000130: 	testb	%r8b, %cl
    00000133: 	je	.Ltmp297 # Offset: 307
    00000139: 	leaq	(%rdi,%r9), %r8
    0000013d: 	movq	%rdx, %rcx
    00000140: 	subq	%r8, %rcx
    00000143: 	addq	$0x6, %rcx
    00000147: 	cmpq	$0x1c, %rcx
    0000014b: 	jbe	.Ltmp297 # Offset: 331
    00000151: 	leaq	-0x2(%rax), %r8
    00000155: 	leaq	-0x8(%rdi,%r10), %r11
    0000015a: 	movq	%rdi, -0x40(%rsp)
    0000015f: 	leaq	(%rdi,%r8), %r10
    00000163: 	leaq	-0x8(%rdi,%r9), %r9
    00000168: 	movq	-0x28(%rsp), %rdi
    0000016d: 	leaq	0x4(%r12,%rax), %rcx
    00000172: 	xorl	%eax, %eax
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp298:
    00000178: 	movdqu	(%r11,%rax), %xmm2
    0000017e: 	movdqu	0x10(%r11,%rax), %xmm1
    00000185: 	movdqa	%xmm3, %xmm0
    00000189: 	movdqa	%xmm3, %xmm14
    0000018e: 	movdqu	(%r10,%rax), %xmm8
    00000194: 	movdqu	(%r9,%rax), %xmm9
    0000019a: 	movdqa	%xmm3, %xmm13
    0000019f: 	movdqa	%xmm2, %xmm7
    000001a3: 	shufps	$0x88, %xmm1, %xmm7
    000001a7: 	movdqu	0x10(%r10,%rax), %xmm1
    000001ae: 	movdqa	%xmm8, %xmm12
    000001b3: 	pcmpgtw	%xmm7, %xmm13
    000001b8: 	shufps	$0xdd, %xmm1, %xmm8
    000001bd: 	pcmpgtw	%xmm8, %xmm0
    000001c2: 	shufps	$0x88, %xmm1, %xmm12
    000001c7: 	movdqa	%xmm8, %xmm10
    000001cc: 	movdqu	0x10(%r9,%rax), %xmm1
    000001d3: 	pcmpgtw	%xmm12, %xmm14
    000001d8: 	movdqa	%xmm12, %xmm11
    000001dd: 	punpcklwd	%xmm0, %xmm10
    000001e2: 	punpckhwd	%xmm0, %xmm8
    000001e7: 	movdqa	%xmm9, %xmm0
    000001ec: 	shufps	$0x88, %xmm1, %xmm0
    000001f0: 	movdqa	%xmm7, %xmm1
    000001f4: 	punpcklwd	%xmm14, %xmm11
    000001f9: 	punpckhwd	%xmm14, %xmm12
    000001fe: 	punpcklwd	%xmm13, %xmm1
    00000203: 	punpckhwd	%xmm13, %xmm7
    00000208: 	movdqa	%xmm0, %xmm15
    0000020d: 	paddd	%xmm11, %xmm1
    00000212: 	movdqa	%xmm3, %xmm11
    00000217: 	paddd	%xmm12, %xmm7
    0000021c: 	pcmpgtw	%xmm0, %xmm11
    00000221: 	paddd	%xmm10, %xmm1
    00000226: 	paddd	%xmm8, %xmm7
    0000022b: 	movdqa	%xmm3, %xmm12
    00000230: 	punpckhwd	%xmm11, %xmm0
    00000235: 	punpcklwd	%xmm11, %xmm15
    0000023a: 	movdqa	%xmm4, %xmm11
    0000023f: 	paddd	%xmm0, %xmm7
    00000243: 	paddd	%xmm15, %xmm1
    00000248: 	movdqa	%xmm4, %xmm0
    0000024c: 	paddd	%xmm6, %xmm1
    00000250: 	paddd	%xmm6, %xmm7
    00000254: 	pcmpgtd	%xmm1, %xmm11
    00000259: 	pcmpgtd	%xmm7, %xmm0
    0000025d: 	pand	%xmm5, %xmm11
    00000262: 	pand	%xmm5, %xmm0
    00000266: 	paddd	%xmm11, %xmm1
    0000026b: 	paddd	%xmm0, %xmm7
    0000026f: 	movdqa	%xmm3, %xmm11
    00000274: 	psrad	$0x2, %xmm7
    00000279: 	psrad	$0x2, %xmm1
    0000027e: 	movdqa	%xmm1, %xmm0
    00000282: 	punpcklwd	%xmm7, %xmm1
    00000286: 	punpckhwd	%xmm7, %xmm0
    0000028a: 	movdqa	%xmm1, %xmm7
    0000028e: 	punpckhwd	%xmm0, %xmm7
    00000292: 	punpcklwd	%xmm0, %xmm1
    00000296: 	movdqu	0x10(%rsi,%rax), %xmm0
    0000029c: 	punpcklwd	%xmm7, %xmm1
    000002a0: 	movdqu	0x10(%r11,%rax), %xmm7
    000002a7: 	shufps	$0xdd, %xmm7, %xmm2
    000002ab: 	movdqu	(%rsi,%rax), %xmm7
    000002b0: 	pcmpgtw	%xmm2, %xmm12
    000002b5: 	shufps	$0x88, %xmm0, %xmm7
    000002b9: 	movdqu	0x10(%r9,%rax), %xmm0
    000002c0: 	pcmpgtw	%xmm7, %xmm11
    000002c5: 	movd	%xmm1, (%rdx,%rax)
    000002ca: 	shufps	$0xdd, %xmm0, %xmm9
    000002cf: 	movdqa	%xmm2, %xmm0
    000002d3: 	punpckhwd	%xmm12, %xmm2
    000002d8: 	movdqa	%xmm9, %xmm13
    000002dd: 	punpcklwd	%xmm12, %xmm0
    000002e2: 	paddd	%xmm8, %xmm2
    000002e7: 	movdqa	%xmm4, %xmm8
    000002ec: 	paddd	%xmm10, %xmm0
    000002f1: 	movdqa	%xmm7, %xmm10
    000002f6: 	punpckhwd	%xmm11, %xmm7
    000002fb: 	punpcklwd	%xmm11, %xmm10
    00000300: 	paddd	%xmm7, %xmm2
    00000304: 	movdqa	%xmm4, %xmm7
    00000308: 	paddd	%xmm10, %xmm0
    0000030d: 	movdqa	%xmm3, %xmm10
    00000312: 	pcmpgtw	%xmm9, %xmm10
    00000317: 	punpcklwd	%xmm10, %xmm13
    0000031c: 	punpckhwd	%xmm10, %xmm9
    00000321: 	paddd	%xmm13, %xmm0
    00000326: 	paddd	%xmm9, %xmm2
    0000032b: 	paddd	%xmm6, %xmm0
    0000032f: 	paddd	%xmm6, %xmm2
    00000333: 	pcmpgtd	%xmm0, %xmm8
    00000338: 	pcmpgtd	%xmm2, %xmm7
    0000033c: 	pand	%xmm5, %xmm8
    00000341: 	pand	%xmm5, %xmm7
    00000345: 	paddd	%xmm7, %xmm2
    00000349: 	paddd	%xmm8, %xmm0
    0000034e: 	psrad	$0x2, %xmm2
    00000353: 	psrad	$0x2, %xmm0
    00000358: 	movdqa	%xmm0, %xmm7
    0000035c: 	punpcklwd	%xmm2, %xmm0
    00000360: 	punpckhwd	%xmm2, %xmm7
    00000364: 	movdqa	%xmm0, %xmm2
    00000368: 	punpckhwd	%xmm7, %xmm2
    0000036c: 	punpcklwd	%xmm7, %xmm0
    00000370: 	punpcklwd	%xmm2, %xmm0
    00000374: 	pshufd	$0x55, %xmm1, %xmm2
    00000379: 	movd	%xmm2, 0x8(%rdx,%rax)
    0000037f: 	movdqa	%xmm1, %xmm2
    00000383: 	punpckhdq	%xmm1, %xmm2
    00000387: 	pshufd	$0xff, %xmm1, %xmm1
    0000038c: 	movd	%xmm1, 0x18(%rdx,%rax)
    00000392: 	pshufd	$0x55, %xmm0, %xmm1
    00000397: 	movd	%xmm2, 0x10(%rdx,%rax)
    0000039d: 	movd	%xmm1, 0x8(%rcx,%rax)
    000003a3: 	movdqa	%xmm0, %xmm1
    000003a7: 	movd	%xmm0, (%rcx,%rax)
    000003ac: 	punpckhdq	%xmm0, %xmm1
    000003b0: 	pshufd	$0xff, %xmm0, %xmm0
    000003b5: 	movd	%xmm1, 0x10(%rcx,%rax)
    000003bb: 	movd	%xmm0, 0x18(%rcx,%rax)
    000003c1: 	addq	$0x20, %rax
    000003c5: 	cmpq	%rax, %rdi
    000003c8: 	jne	.Ltmp298 # Offset: 968
    000003ce: 	movq	-0x20(%rsp), %rsi
    000003d3: 	movq	-0x48(%rsp), %rax
    000003d8: 	addq	%r12, %r8
    000003db: 	movq	-0x40(%rsp), %rdi
    000003e0: 	addq	%rsi, %r13
    000003e3: 	addq	%rsi, %r14
    000003e6: 	addq	%rsi, %rax
    000003e9: 	leaq	(%rdi,%r13,2), %r11
    000003ed: 	leaq	(%rdi,%rax,2), %rdx
    000003f1: 	leaq	(%rdi,%r14,2), %r13
    000003f5: 	movq	%rsi, %r14
    000003f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp299:
    00000400: 	movswl	(%r11), %eax
    00000404: 	movswl	-0x2(%rdx), %ecx
    00000408: 	movswl	0x2(%rdx), %r9d
    0000040d: 	movswl	0x4(%r11), %r10d
    00000412: 	addl	%eax, %ecx
    00000414: 	movswl	(%rdx), %esi
    00000417: 	movswl	0x2(%r11), %eax
    0000041c: 	addl	%r9d, %ecx
    0000041f: 	addl	%r9d, %r10d
    00000422: 	movswl	0x6(%rdx), %r9d
    00000427: 	addl	%eax, %esi
    00000429: 	movswl	0x4(%rdx), %eax
    0000042d: 	addl	%r10d, %r9d
    00000430: 	movswl	0x6(%r11), %r10d
    00000435: 	addl	%eax, %esi
    00000437: 	addl	%eax, %r10d
    0000043a: 	movswl	0x8(%rdx), %eax
    0000043e: 	addl	%r10d, %eax
    00000441: 	movswl	(%r13), %r10d
    00000446: 	addl	%ecx, %r10d
    00000449: 	leal	0x5(%r10), %ecx
    0000044d: 	addl	$0x2, %r10d
    00000451: 	cmovnsl	%r10d, %ecx
    00000455: 	movswl	0x2(%r13), %r10d
    0000045a: 	addl	%esi, %r10d
    0000045d: 	sarl	$0x2, %ecx
    00000460: 	leal	0x5(%r10), %esi
    00000464: 	addl	$0x2, %r10d
    00000468: 	movzwl	%cx, %ecx
    0000046b: 	cmovnsl	%r10d, %esi
    0000046f: 	movswl	0x4(%r13), %r10d
    00000474: 	addl	%r9d, %r10d
    00000477: 	sarl	$0x2, %esi
    0000047a: 	leal	0x5(%r10), %r9d
    0000047e: 	addl	$0x2, %r10d
    00000482: 	movzwl	%si, %esi
    00000485: 	cmovnsl	%r10d, %r9d
    00000489: 	movswl	0x6(%r13), %r10d
    0000048e: 	addl	%eax, %r10d
    00000491: 	sarl	$0x2, %r9d
    00000495: 	leal	0x5(%r10), %eax
    00000499: 	addl	$0x2, %r10d
    0000049d: 	movzwl	%r9w, %r9d
    000004a1: 	cmovnsl	%r10d, %eax
    000004a5: 	addq	$0x8, %r11
    000004a9: 	addq	$0x8, %rdx
    000004ad: 	addq	$0x8, %r13
    000004b1: 	sarl	$0x2, %eax
    000004b4: 	movzwl	%ax, %eax
    000004b7: 	shlq	$0x10, %rax
    000004bb: 	orq	%r9, %rax
    000004be: 	shlq	$0x10, %rax
    000004c2: 	orq	%rsi, %rax
    000004c5: 	shlq	$0x10, %rax
    000004c9: 	orq	%rcx, %rax
    000004cc: 	movq	%rax, (%r8,%r14,2)
    000004d0: 	addq	$0x4, %r14
    000004d4: 	cmpl	%r14d, %ebx
    000004d7: 	jg	.Ltmp299 # Offset: 1239
.Ltmp303:
    000004dd: 	movl	-0x30(%rsp), %eax
.Ltmp296:
    000004e1: 	cmpl	-0x50(%rsp), %eax
    000004e5: 	jge	.Ltmp300 # Offset: 1253
    000004eb: 	leal	(%r15,%rax), %edx
    000004ef: 	leal	-0x1(%rax,%rbp), %r8d
    000004f4: 	movl	-0x54(%rsp), %r14d
    000004f9: 	movslq	%edx, %rdx
    000004fc: 	movslq	%r8d, %r8
    000004ff: 	movswl	(%rdi,%rdx,2), %ecx
    00000503: 	leal	0x1(%rax), %edx
    00000506: 	movswl	(%rdi,%r8,2), %r9d
    0000050b: 	leal	(%rdx,%rbp), %esi
    0000050e: 	movslq	%esi, %rsi
    00000511: 	leaq	(%rdi,%rsi,2), %r10
    00000515: 	movswl	(%r10), %r8d
    00000519: 	addl	%r8d, %r9d
    0000051c: 	leal	(%rbp,%rax), %r8d
    00000521: 	addl	%ecx, %r9d
    00000524: 	leal	(%r14,%rax), %ecx
    00000528: 	movslq	%r8d, %r8
    0000052b: 	movslq	%ecx, %rcx
    0000052e: 	movswl	(%rdi,%rcx,2), %ecx
    00000532: 	addl	%r9d, %ecx
    00000535: 	leal	0x5(%rcx), %r9d
    00000539: 	addl	$0x2, %ecx
    0000053c: 	cmovnsl	%ecx, %r9d
    00000540: 	sarl	$0x2, %r9d
    00000544: 	movw	%r9w, (%r12,%r8,2)
    00000549: 	cmpl	-0x50(%rsp), %edx
    0000054d: 	jge	.Ltmp300 # Offset: 1357
    00000553: 	leal	(%rdx,%r15), %ecx
    00000557: 	movswl	(%rdi,%r8,2), %r8d
    0000055c: 	movslq	%ecx, %rcx
    0000055f: 	movswl	(%rdi,%rcx,2), %r13d
    00000564: 	leal	0x2(%rax), %ecx
    00000567: 	leal	(%rcx,%rbp), %r9d
    0000056b: 	movslq	%r9d, %r9
    0000056e: 	leaq	(%rdi,%r9,2), %r11
    00000572: 	movswl	(%r11), %r14d
    00000576: 	addl	%r14d, %r8d
    00000579: 	movl	-0x54(%rsp), %r14d
    0000057e: 	addl	%r13d, %r8d
    00000581: 	addl	%r14d, %edx
    00000584: 	movslq	%edx, %rdx
    00000587: 	movswl	(%rdi,%rdx,2), %edx
    0000058b: 	addl	%r8d, %edx
    0000058e: 	leal	0x5(%rdx), %r8d
    00000592: 	addl	$0x2, %edx
    00000595: 	cmovnsl	%edx, %r8d
    00000599: 	sarl	$0x2, %r8d
    0000059d: 	movw	%r8w, (%r12,%rsi,2)
    000005a2: 	cmpl	-0x50(%rsp), %ecx
    000005a6: 	jge	.Ltmp300 # Offset: 1446
    000005ac: 	leal	(%rcx,%r15), %edx
    000005b0: 	movswl	(%r10), %r10d
    000005b4: 	addl	%r14d, %ecx
    000005b7: 	movslq	%edx, %rdx
    000005ba: 	movslq	%ecx, %rcx
    000005bd: 	movswl	(%rdi,%rdx,2), %r13d
    000005c2: 	leal	0x3(%rax), %edx
    000005c5: 	movswl	(%rdi,%rcx,2), %ecx
    000005c9: 	leal	(%rdx,%rbp), %r8d
    000005cd: 	movslq	%r8d, %r8
    000005d0: 	movswl	(%rdi,%r8,2), %esi
    000005d5: 	addl	%r10d, %esi
    000005d8: 	addl	%r13d, %esi
    000005db: 	addl	%esi, %ecx
    000005dd: 	leal	0x5(%rcx), %esi
    000005e0: 	addl	$0x2, %ecx
    000005e3: 	cmovnsl	%ecx, %esi
    000005e6: 	sarl	$0x2, %esi
    000005e9: 	movw	%si, (%r12,%r9,2)
    000005ee: 	cmpl	-0x50(%rsp), %edx
    000005f2: 	jge	.Ltmp300 # Offset: 1522
    000005f4: 	leal	0x4(%rax,%rbp), %eax
    000005f8: 	leal	(%rdx,%r15), %ecx
    000005fc: 	movswl	(%r11), %esi
    00000600: 	addl	%r14d, %edx
    00000603: 	cltq
    00000605: 	movslq	%ecx, %rcx
    00000608: 	movslq	%edx, %rdx
    0000060b: 	movswl	(%rdi,%rax,2), %eax
    0000060f: 	movswl	(%rdi,%rcx,2), %ecx
    00000613: 	movswl	(%rdi,%rdx,2), %edx
    00000617: 	addl	%esi, %eax
    00000619: 	addl	%ecx, %eax
    0000061b: 	addl	%edx, %eax
    0000061d: 	leal	0x5(%rax), %edx
    00000620: 	addl	$0x2, %eax
    00000623: 	cmovnsl	%eax, %edx
    00000626: 	sarl	$0x2, %edx
    00000629: 	movw	%dx, (%r12,%r8,2)
.Ltmp300:
    0000062e: 	movl	-0x34(%rsp), %eax
    00000632: 	movl	-0x4c(%rsp), %edx
    00000636: 	addl	%eax, -0x54(%rsp)
    0000063a: 	addl	%eax, %r15d
    0000063d: 	addl	%eax, %ebp
    0000063f: 	cmpl	%edx, -0x38(%rsp)
    00000643: 	jne	.Ltmp301 # Offset: 1603
.Ltmp295:
    00000649: 	popq	%rbx
    0000064a: 	popq	%rbp
    0000064b: 	popq	%r12
    0000064d: 	popq	%r13
    0000064f: 	popq	%r14
    00000651: 	popq	%r15
    00000653: 	retq # Offset: 1619
    00000654: 	nopl	(%rax) # Size: 4
.Ltmp297:
    00000658: 	movq	-0x10(%rsp), %rsi
    0000065d: 	subq	$0x2, %rax
    00000661: 	addq	-0x18(%rsp), %r13
    00000666: 	leaq	-0xa(%rdi,%r10), %r11
    0000066b: 	leaq	(%rdi,%rax), %rcx
    0000066f: 	leaq	-0xa(%rdi,%r9), %r14
    00000674: 	addq	%r12, %rax
    00000677: 	leaq	(%rsi,%r13,2), %r13
    0000067b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp302:
    00000680: 	movswl	0x2(%r11), %edx
    00000685: 	movswl	(%rcx), %esi
    00000688: 	movswl	0x4(%rcx), %r9d
    0000068d: 	movswl	0x6(%r11), %r10d
    00000692: 	addl	%edx, %esi
    00000694: 	movswl	0x2(%rcx), %r8d
    00000699: 	movswl	0x4(%r11), %edx
    0000069e: 	addl	%r9d, %esi
    000006a1: 	addl	%r9d, %r10d
    000006a4: 	movswl	0x8(%rcx), %r9d
    000006a9: 	addl	%edx, %r8d
    000006ac: 	movswl	0x6(%rcx), %edx
    000006b0: 	addl	%r10d, %r9d
    000006b3: 	movswl	0x8(%r11), %r10d
    000006b8: 	addl	%edx, %r8d
    000006bb: 	addl	%edx, %r10d
    000006be: 	movswl	0xa(%rcx), %edx
    000006c2: 	addl	%r10d, %edx
    000006c5: 	movswl	0x2(%r14), %r10d
    000006ca: 	addl	%esi, %r10d
    000006cd: 	leal	0x5(%r10), %esi
    000006d1: 	addl	$0x2, %r10d
    000006d5: 	cmovnsl	%r10d, %esi
    000006d9: 	movswl	0x4(%r14), %r10d
    000006de: 	addl	%r8d, %r10d
    000006e1: 	sarl	$0x2, %esi
    000006e4: 	leal	0x5(%r10), %r8d
    000006e8: 	addl	$0x2, %r10d
    000006ec: 	movzwl	%si, %esi
    000006ef: 	cmovnsl	%r10d, %r8d
    000006f3: 	movswl	0x6(%r14), %r10d
    000006f8: 	addl	%r9d, %r10d
    000006fb: 	sarl	$0x2, %r8d
    000006ff: 	leal	0x5(%r10), %r9d
    00000703: 	addl	$0x2, %r10d
    00000707: 	movzwl	%r8w, %r8d
    0000070b: 	cmovnsl	%r10d, %r9d
    0000070f: 	movswl	0x8(%r14), %r10d
    00000714: 	addl	%edx, %r10d
    00000717: 	sarl	$0x2, %r9d
    0000071b: 	leal	0x5(%r10), %edx
    0000071f: 	addl	$0x2, %r10d
    00000723: 	movzwl	%r9w, %r9d
    00000727: 	cmovnsl	%r10d, %edx
    0000072b: 	addq	$0x8, %r11
    0000072f: 	addq	$0x8, %rcx
    00000733: 	addq	$0x8, %r14
    00000737: 	addq	$0x8, %rax
    0000073b: 	sarl	$0x2, %edx
    0000073e: 	movzwl	%dx, %edx
    00000741: 	shlq	$0x10, %rdx
    00000745: 	orq	%r9, %rdx
    00000748: 	shlq	$0x10, %rdx
    0000074c: 	orq	%r8, %rdx
    0000074f: 	shlq	$0x10, %rdx
    00000753: 	orq	%rsi, %rdx
    00000756: 	movq	%rdx, -0x6(%rax)
    0000075a: 	cmpq	%r13, %r11
    0000075d: 	jne	.Ltmp302 # Offset: 1885
    00000763: 	jmp	.Ltmp303 # Offset: 1891
DWARF CFI Instructions:
    <empty>
End of Function "_ZN17jacobi2D_unrolledIsiEclEPKsPsiiii.isra.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 70
  State       : disassembled
  Address     : 0x12880
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x12880
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp304 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp307:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp306:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp305 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp306 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp307 # Offset: 142
.Ltmp304:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp308 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp309 # Offset: 164
.Ltmp312:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp310 # Offset: 177
.Ltmp311:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp309 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp311 # Offset: 214
.Ltmp310:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp312 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp313 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp315:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp314 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp314:
    0000010a: 	addq	$0x20, %r13
.Ltmp309:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp315 # Offset: 275
.Ltmp313:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp316 # Offset: 283
.Ltmp322:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp317 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp318:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp318 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp317:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp305:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp306 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp307 # Offset: 389
    0000018b: 	jmp	.Ltmp304 # Offset: 395
.Ltmp308:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp313 # Offset: 405
.Ltmp321:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp319 # Offset: 422
.Ltmp320:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp313 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp320 # Offset: 463
.Ltmp319:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp321 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp322 # Offset: 482
.Ltmp316:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x12a80
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x12a80
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp323 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp324 # Offset: 63
.Ltmp323:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp325 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp326 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp330:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp327 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp328 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp326:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp329 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp330 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp325:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp331:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp330 # Offset: 248
.Ltmp324:
    000000fd: 	leaq	DATAat0x49008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp327:
    00000109: 	leaq	DATAat0x49184(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp328:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp329:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp331 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp332 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp332:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x12bd0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x12bd0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp333 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp336:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp335:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp334 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp335 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp336 # Offset: 142
.Ltmp333:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp337 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp338 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp340:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp339 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp340 # Offset: 215
.Ltmp338:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp341 # Offset: 222
.Ltmp343:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp342 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp343 # Offset: 263
.Ltmp341:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp344 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp345:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp345 # Offset: 324
.Ltmp344:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp334:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp335 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp336 # Offset: 397
    00000193: 	jmp	.Ltmp333 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp342:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp343 # Offset: 425
    000001af: 	jmp	.Ltmp341 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp339:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp340 # Offset: 449
    000001c7: 	jmp	.Ltmp338 # Offset: 455
.Ltmp337:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp341 # Offset: 465
.Ltmp348:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp346 # Offset: 482
.Ltmp347:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp341 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp347 # Offset: 523
.Ltmp346:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp348 # Offset: 534
    00000218: 	jmp	.Ltmp341 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x12df0
  Size        : 0x26f
  MaxSize     : 0x270
  Offset      : 0x12df0
  Section     : .text
  Orc Section : .local.text._Z29laplace_initial_condition_setIsET_PS0_iiPKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rcx, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	movl	%edx, %ebp
    00000010: 	pushq	%rbx
    00000011: 	movswl	0x2(%rcx), %edx
    00000015: 	movl	%esi, %ebx
    00000017: 	movswl	(%rcx), %eax
    0000001a: 	movl	%ebx, %r14d
    0000001d: 	movl	%edx, %esi
    0000001f: 	addl	%edx, %eax
    00000021: 	movswl	0x4(%rcx), %edx
    00000025: 	addl	%edx, %eax
    00000027: 	movswl	0x6(%rcx), %edx
    0000002b: 	addl	%edx, %eax
    0000002d: 	leal	0x3(%rax), %r12d
    00000031: 	cmovnsl	%eax, %r12d
    00000035: 	imull	%ebp, %r14d
    00000039: 	sarl	$0x2, %r12d
    0000003d: 	movslq	%r14d, %rdx
    00000040: 	addq	%rdx, %rdx
    00000043: 	je	.Ltmp349 # Offset: 67
    00000045: 	xorl	%esi, %esi
    00000047: 	callq	memset@PLT # Offset: 71
    0000004c: 	movzwl	0x2(%r13), %esi
    00000051: 	movq	%rax, %rdi
.Ltmp349:
    00000054: 	testl	%ebx, %ebx
    00000056: 	jle	.Ltmp350 # Offset: 86
    0000005c: 	movslq	%ebp, %rcx
    0000005f: 	movq	%rdi, %rdx
    00000062: 	xorl	%eax, %eax
    00000064: 	addq	%rcx, %rcx
    00000067: 	cmpl	$0x1, %ebp
    0000006a: 	jne	.Ltmp351 # Offset: 106
.Ltmp352:
    00000070: 	addl	$0x1, %eax
    00000073: 	movw	%si, (%rdx)
    00000076: 	addq	%rcx, %rdx
    00000079: 	cmpl	%ebx, %eax
    0000007b: 	jne	.Ltmp352 # Offset: 123
    0000007d: 	movzwl	0x6(%r13), %esi
    00000082: 	leaq	-0x2(%rdi,%rcx), %rdx
    00000087: 	xorl	%eax, %eax
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp353:
    00000090: 	addl	$0x1, %eax
    00000093: 	movw	%si, (%rdx)
    00000096: 	addq	%rcx, %rdx
    00000099: 	cmpl	%eax, %ebx
    0000009b: 	jne	.Ltmp353 # Offset: 155
    0000009d: 	subl	$0x1, %r14d
    000000a1: 	movzwl	0x4(%r13), %esi
    000000a6: 	movslq	%r14d, %r14
    000000a9: 	leaq	(%rdi,%r14,2), %rcx
.Ltmp364:
    000000ad: 	leal	-0x1(%rbp), %r8d
    000000b1: 	cmpl	$0x6, %r8d
    000000b5: 	jbe	.Ltmp354 # Offset: 181
    000000bb: 	movl	%ebp, %edx
    000000bd: 	movd	%esi, %xmm0
    000000c1: 	movq	%rcx, %rax
    000000c4: 	shrl	$0x3, %edx
    000000c7: 	punpcklwd	%xmm0, %xmm0
    000000cb: 	shlq	$0x4, %rdx
    000000cf: 	pshufd	$0x0, %xmm0, %xmm0
    000000d4: 	addq	%rcx, %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp355:
    000000e0: 	movups	%xmm0, (%rax)
    000000e3: 	addq	$0x10, %rax
    000000e7: 	cmpq	%rax, %rdx
    000000ea: 	jne	.Ltmp355 # Offset: 234
    000000ec: 	movl	%ebp, %eax
    000000ee: 	andl	$-0x8, %eax
    000000f1: 	movl	%eax, %edx
    000000f3: 	leaq	(%rcx,%rdx,2), %rcx
    000000f7: 	movl	%eax, %edx
    000000f9: 	cmpl	%eax, %ebp
    000000fb: 	je	.Ltmp356 # Offset: 251
.Ltmp366:
    00000101: 	movl	%ebp, %r10d
    00000104: 	subl	%eax, %r10d
    00000107: 	leal	-0x1(%r10), %r9d
    0000010b: 	cmpl	$0x2, %r9d
    0000010f: 	jbe	.Ltmp357 # Offset: 271
    00000111: 	movd	%esi, %xmm2
    00000115: 	addq	%r14, %rax
    00000118: 	pshuflw	$0x0, %xmm2, %xmm1
    0000011d: 	movq	%xmm1, (%rdi,%rax,2)
    00000122: 	movl	%r10d, %eax
    00000125: 	andl	$-0x4, %eax
    00000128: 	movl	%eax, %r9d
    0000012b: 	addl	%eax, %edx
    0000012d: 	leaq	(%rcx,%r9,2), %rcx
    00000131: 	cmpl	%eax, %r10d
    00000134: 	je	.Ltmp358 # Offset: 308
.Ltmp357:
    00000136: 	leal	0x1(%rdx), %eax
    00000139: 	movw	%si, (%rcx)
    0000013c: 	cmpl	%ebp, %eax
    0000013e: 	jge	.Ltmp358 # Offset: 318
    00000140: 	addl	$0x2, %edx
    00000143: 	movw	%si, 0x2(%rcx)
    00000147: 	cmpl	%edx, %ebp
    00000149: 	jle	.Ltmp358 # Offset: 329
    0000014b: 	movw	%si, 0x4(%rcx)
.Ltmp358:
    0000014f: 	movzwl	(%r13), %r9d
    00000154: 	cmpl	$0x6, %r8d
    00000158: 	jbe	.Ltmp359 # Offset: 344
.Ltmp365:
    0000015e: 	movl	%ebp, %edx
    00000160: 	movd	%r9d, %xmm0
    00000165: 	movq	%rdi, %rax
    00000168: 	shrl	$0x3, %edx
    0000016b: 	punpcklwd	%xmm0, %xmm0
    0000016f: 	subl	$0x1, %edx
    00000172: 	pshufd	$0x0, %xmm0, %xmm0
    00000177: 	shlq	$0x4, %rdx
    0000017b: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp360:
    00000180: 	movups	%xmm0, (%rax)
    00000183: 	addq	$0x10, %rax
    00000187: 	cmpq	%rdx, %rax
    0000018a: 	jne	.Ltmp360 # Offset: 394
    0000018c: 	movl	%ebp, %eax
    0000018e: 	andl	$-0x8, %eax
    00000191: 	movl	%eax, %edx
    00000193: 	leaq	(%rdi,%rdx,2), %rsi
    00000197: 	movl	%eax, %edx
    00000199: 	cmpl	%ebp, %eax
    0000019b: 	je	.Ltmp361 # Offset: 411
.Ltmp367:
    0000019d: 	movl	%ebp, %r8d
    000001a0: 	subl	%eax, %r8d
    000001a3: 	leal	-0x1(%r8), %ecx
    000001a7: 	cmpl	$0x2, %ecx
    000001aa: 	jbe	.Ltmp362 # Offset: 426
    000001ac: 	movd	%r9d, %xmm4
    000001b1: 	pshuflw	$0x0, %xmm4, %xmm3
    000001b6: 	movq	%xmm3, (%rdi,%rax,2)
    000001bb: 	movl	%r8d, %eax
    000001be: 	andl	$-0x4, %eax
    000001c1: 	movl	%eax, %ecx
    000001c3: 	addl	%eax, %edx
    000001c5: 	leaq	(%rsi,%rcx,2), %rsi
    000001c9: 	cmpl	%eax, %r8d
    000001cc: 	je	.Ltmp361 # Offset: 460
.Ltmp362:
    000001ce: 	leal	0x1(%rdx), %eax
    000001d1: 	movw	%r9w, (%rsi)
    000001d5: 	cmpl	%eax, %ebp
    000001d7: 	jle	.Ltmp361 # Offset: 471
    000001d9: 	addl	$0x2, %edx
    000001dc: 	movw	%r9w, 0x2(%rsi)
    000001e1: 	cmpl	%edx, %ebp
    000001e3: 	jle	.Ltmp361 # Offset: 483
    000001e5: 	movw	%r9w, 0x4(%rsi)
.Ltmp361:
    000001ea: 	popq	%rbx
    000001eb: 	movl	%r12d, %eax
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	retq # Offset: 501
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp351:
    00000200: 	addl	$0x1, %eax
    00000203: 	movw	%si, (%rdx)
    00000206: 	addq	%rcx, %rdx
    00000209: 	cmpl	%eax, %ebx
    0000020b: 	jne	.Ltmp351 # Offset: 523
    0000020d: 	movzwl	0x6(%r13), %esi
    00000212: 	leaq	-0x2(%rdi,%rcx), %rdx
    00000217: 	xorl	%eax, %eax
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp363:
    00000220: 	addl	$0x1, %eax
    00000223: 	movw	%si, (%rdx)
    00000226: 	addq	%rcx, %rdx
    00000229: 	cmpl	%eax, %ebx
    0000022b: 	jne	.Ltmp363 # Offset: 555
.Ltmp350:
    0000022d: 	subl	%ebp, %r14d
    00000230: 	movzwl	0x4(%r13), %esi
    00000235: 	movslq	%r14d, %r14
    00000238: 	leaq	(%rdi,%r14,2), %rcx
    0000023c: 	testl	%ebp, %ebp
    0000023e: 	jg	.Ltmp364 # Offset: 574
    00000244: 	popq	%rbx
    00000245: 	movl	%r12d, %eax
    00000248: 	popq	%rbp
    00000249: 	popq	%r12
    0000024b: 	popq	%r13
    0000024d: 	popq	%r14
    0000024f: 	retq # Offset: 591
.Ltmp356:
    00000250: 	movzwl	(%r13), %r9d
    00000255: 	jmp	.Ltmp365 # Offset: 597
.Ltmp354:
    0000025a: 	xorl	%eax, %eax
    0000025c: 	xorl	%edx, %edx
    0000025e: 	jmp	.Ltmp366 # Offset: 606
.Ltmp359:
    00000263: 	movq	%rdi, %rsi
    00000266: 	xorl	%eax, %eax
    00000268: 	xorl	%edx, %edx
    0000026a: 	jmp	.Ltmp367 # Offset: 618
DWARF CFI Instructions:
    <empty>
End of Function "_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_"

Binary Function "_Z20convergenceLaplace2DIsi18jacobi2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x13060
  Size        : 0x745
  MaxSize     : 0x750
  Offset      : 0x13060
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi18jacobi2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r8d, %r13d
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x58, %rsp
    00000024: 	movl	%edx, 0x28(%rsp)
    00000028: 	movl	%r14d, %edx
    0000002b: 	movl	%ecx, 0x2c(%rsp)
    0000002f: 	leaq	0x40(%rsp), %rcx
    00000034: 	movq	%r9, 0x30(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x48(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movq	DATAat0x49530(%rip), %rax
    00000050: 	movq	%rax, 0x40(%rsp)
    00000055: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 85
    0000005a: 	movl	%r15d, %edi
    0000005d: 	imull	%r14d, %edi
    00000061: 	movw	%ax, 0x3e(%rsp)
    00000066: 	movslq	%edi, %r12
    00000069: 	testl	%r12d, %r12d
    0000006c: 	jle	.Ltmp368 # Offset: 108
    0000006e: 	movslq	%r12d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	addq	%rdx, %rdx
    0000007a: 	callq	memmove@PLT # Offset: 122
.Ltmp368:
    0000007f: 	movl	iterations(%rip), %eax
    00000085: 	movl	$0x2710, iterations(%rip)
    0000008f: 	movl	%eax, 0x38(%rsp)
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	movq	%rax, start_time(%rip)
    0000009f: 	movl	iterations(%rip), %eax
    000000a5: 	movl	%eax, 0x18(%rsp)
    000000a9: 	testl	%eax, %eax
    000000ab: 	jle	.Ltmp369 # Offset: 171
    000000b1: 	movl	0x28(%rsp), %eax
    000000b5: 	movslq	%r13d, %r10
    000000b8: 	movl	$0x0, 0x4(%rsp)
    000000c0: 	pxor	%xmm3, %xmm3
    000000c4: 	addq	%r10, %r10
    000000c7: 	leal	-0x1(%rax), %r14d
    000000cb: 	movl	0x2c(%rsp), %eax
    000000cf: 	leal	-0x2(%rax), %edi
    000000d2: 	leal	(%r13,%r13), %eax
    000000d7: 	movq	%r12, %r13
    000000da: 	cltq
    000000dc: 	movl	%edi, 0x1c(%rsp)
    000000e0: 	shrq	$0x3, %r13
    000000e4: 	movslq	%edi, %r15
    000000e7: 	addq	%rax, %rax
    000000ea: 	shlq	$0x4, %r13
    000000ee: 	movq	%rax, 0x20(%rsp)
    000000f3: 	leaq	-0x1(%r12), %rax
    000000f8: 	movq	%rax, 0x10(%rsp)
    000000fd: 	movq	%r12, %rax
    00000100: 	andq	$-0x8, %rax
    00000104: 	movq	%rax, 0x8(%rsp)
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp383:
    00000110: 	cmpl	$0x1, %r14d
    00000114: 	jle	.Ltmp370 # Offset: 276
    00000116: 	movl	0x1c(%rsp), %eax
    0000011a: 	testl	%eax, %eax
    0000011c: 	jle	.Ltmp370 # Offset: 284
    0000011e: 	movq	0x20(%rsp), %rax
    00000123: 	movq	%rbx, %r9
    00000126: 	leaq	(%rbx,%r10), %rsi
    0000012a: 	leaq	(%rbp,%r10), %rdi
    0000012f: 	movl	$0x1, %r11d
    00000135: 	leaq	(%rbx,%rax), %r8
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp372:
    00000140: 	addl	$0x1, %r11d
    00000144: 	movq	%r15, %rax
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp371:
    00000150: 	movswl	(%r9,%rax,2), %ecx
    00000155: 	movswl	-0x2(%rsi,%rax,2), %edx
    0000015a: 	addl	%ecx, %edx
    0000015c: 	movswl	0x2(%rsi,%rax,2), %ecx
    00000161: 	addl	%edx, %ecx
    00000163: 	movswl	(%r8,%rax,2), %edx
    00000168: 	addl	%ecx, %edx
    0000016a: 	leal	0x5(%rdx), %ecx
    0000016d: 	addl	$0x2, %edx
    00000170: 	cmovnsl	%edx, %ecx
    00000173: 	sarl	$0x2, %ecx
    00000176: 	movw	%cx, (%rdi,%rax,2)
    0000017a: 	subq	$0x1, %rax
    0000017e: 	testl	%eax, %eax
    00000180: 	jg	.Ltmp371 # Offset: 384
    00000182: 	addq	%r10, %r9
    00000185: 	addq	%r10, %rsi
    00000188: 	addq	%r10, %r8
    0000018b: 	addq	%r10, %rdi
    0000018e: 	cmpl	%r11d, %r14d
    00000191: 	jne	.Ltmp372 # Offset: 401
.Ltmp370:
    00000193: 	testq	%r12, %r12
    00000196: 	je	.Ltmp373 # Offset: 406
    0000019c: 	cmpq	$0x6, 0x10(%rsp)
    000001a2: 	jbe	.Ltmp374 # Offset: 418
    000001a8: 	xorl	%eax, %eax
    000001aa: 	pxor	%xmm1, %xmm1
    000001ae: 	nop # Size: 2
.Ltmp375:
    000001b0: 	movdqu	(%rbp,%rax), %xmm5
    000001b6: 	movdqu	(%rbx,%rax), %xmm4
    000001bb: 	movdqa	%xmm3, %xmm0
    000001bf: 	movdqu	(%rbx,%rax), %xmm6
    000001c4: 	addq	$0x10, %rax
    000001c8: 	psubw	%xmm5, %xmm4
    000001cc: 	movdqa	%xmm5, %xmm2
    000001d0: 	pcmpgtw	%xmm4, %xmm0
    000001d4: 	psubw	%xmm6, %xmm2
    000001d8: 	pand	%xmm0, %xmm2
    000001dc: 	pandn	%xmm4, %xmm0
    000001e0: 	movdqa	%xmm3, %xmm4
    000001e4: 	por	%xmm2, %xmm0
    000001e8: 	pcmpgtw	%xmm0, %xmm4
    000001ec: 	movdqa	%xmm0, %xmm2
    000001f0: 	punpcklwd	%xmm4, %xmm2
    000001f4: 	punpckhwd	%xmm4, %xmm0
    000001f8: 	paddd	%xmm2, %xmm1
    000001fc: 	paddd	%xmm0, %xmm1
    00000200: 	cmpq	%rax, %r13
    00000203: 	jne	.Ltmp375 # Offset: 515
    00000205: 	movdqa	%xmm1, %xmm0
    00000209: 	movq	0x8(%rsp), %rax
    0000020e: 	psrldq	$0x8, %xmm0
    00000213: 	paddd	%xmm0, %xmm1
    00000217: 	movdqa	%xmm1, %xmm0
    0000021b: 	psrldq	$0x4, %xmm0
    00000220: 	paddd	%xmm0, %xmm1
    00000224: 	movd	%xmm1, %r8d
    00000229: 	cmpq	%rax, %r12
    0000022c: 	je	.Ltmp376 # Offset: 556
    00000232: 	movq	%rax, %rdx
.Ltmp386:
    00000235: 	movzwl	(%rbp,%rdx,2), %esi
    0000023a: 	movzwl	(%rbx,%rdx,2), %eax
    0000023e: 	leaq	(%rdx,%rdx), %rcx
    00000242: 	movl	%esi, %edi
    00000244: 	subl	%eax, %edi
    00000246: 	subw	%si, %ax
    00000249: 	cmovsl	%edi, %eax
    0000024c: 	cwtl
    0000024d: 	addl	%eax, %r8d
    00000250: 	leaq	0x1(%rdx), %rax
    00000254: 	cmpq	%rax, %r12
    00000257: 	jbe	.Ltmp377 # Offset: 599
    0000025d: 	movzwl	0x2(%rbp,%rcx), %esi
    00000262: 	movzwl	0x2(%rbx,%rcx), %eax
    00000267: 	movl	%esi, %edi
    00000269: 	subl	%eax, %edi
    0000026b: 	subw	%si, %ax
    0000026e: 	cmovsl	%edi, %eax
    00000271: 	cwtl
    00000272: 	addl	%eax, %r8d
    00000275: 	leaq	0x2(%rdx), %rax
    00000279: 	cmpq	%rax, %r12
    0000027c: 	jbe	.Ltmp377 # Offset: 636
    00000282: 	movzwl	0x4(%rbp,%rcx), %esi
    00000287: 	movzwl	0x4(%rbx,%rcx), %eax
    0000028c: 	movl	%esi, %edi
    0000028e: 	subl	%eax, %edi
    00000290: 	subw	%si, %ax
    00000293: 	cmovsl	%edi, %eax
    00000296: 	cwtl
    00000297: 	addl	%eax, %r8d
    0000029a: 	leaq	0x3(%rdx), %rax
    0000029e: 	cmpq	%rax, %r12
    000002a1: 	jbe	.Ltmp377 # Offset: 673
    000002a3: 	movzwl	0x6(%rbp,%rcx), %esi
    000002a8: 	movzwl	0x6(%rbx,%rcx), %eax
    000002ad: 	movl	%esi, %edi
    000002af: 	subl	%eax, %edi
    000002b1: 	subw	%si, %ax
    000002b4: 	cmovsl	%edi, %eax
    000002b7: 	cwtl
    000002b8: 	addl	%eax, %r8d
    000002bb: 	leaq	0x4(%rdx), %rax
    000002bf: 	cmpq	%rax, %r12
    000002c2: 	jbe	.Ltmp377 # Offset: 706
    000002c4: 	movzwl	0x8(%rbp,%rcx), %esi
    000002c9: 	movzwl	0x8(%rbx,%rcx), %eax
    000002ce: 	movl	%esi, %edi
    000002d0: 	subl	%eax, %edi
    000002d2: 	subw	%si, %ax
    000002d5: 	cmovsl	%edi, %eax
    000002d8: 	cwtl
    000002d9: 	addl	%eax, %r8d
    000002dc: 	leaq	0x5(%rdx), %rax
    000002e0: 	cmpq	%rax, %r12
    000002e3: 	jbe	.Ltmp377 # Offset: 739
    000002e5: 	movzwl	0xa(%rbp,%rcx), %esi
    000002ea: 	movzwl	0xa(%rbx,%rcx), %eax
    000002ef: 	movl	%esi, %edi
    000002f1: 	subl	%eax, %edi
    000002f3: 	subw	%si, %ax
    000002f6: 	cmovsl	%edi, %eax
    000002f9: 	addq	$0x6, %rdx
    000002fd: 	cwtl
    000002fe: 	addl	%eax, %r8d
    00000301: 	cmpq	%rdx, %r12
    00000304: 	jbe	.Ltmp377 # Offset: 772
    00000306: 	movzwl	0xc(%rbp,%rcx), %edx
    0000030b: 	movzwl	0xc(%rbx,%rcx), %eax
    00000310: 	movl	%edx, %ecx
    00000312: 	subl	%eax, %ecx
    00000314: 	subw	%dx, %ax
    00000317: 	cmovsl	%ecx, %eax
    0000031a: 	cwtl
    0000031b: 	addl	%eax, %r8d
.Ltmp377:
    0000031e: 	cmpq	$0x6, 0x10(%rsp)
    00000324: 	jbe	.Ltmp378 # Offset: 804
.Ltmp376:
    0000032a: 	xorl	%eax, %eax
    0000032c: 	pxor	%xmm2, %xmm2
.Ltmp379:
    00000330: 	movdqu	(%rbp,%rax), %xmm7
    00000336: 	movdqu	(%rbx,%rax), %xmm4
    0000033b: 	movdqa	%xmm3, %xmm0
    0000033f: 	movdqu	(%rbx,%rax), %xmm5
    00000344: 	addq	$0x10, %rax
    00000348: 	psubw	%xmm7, %xmm4
    0000034c: 	movdqa	%xmm7, %xmm1
    00000350: 	pcmpgtw	%xmm4, %xmm0
    00000354: 	psubw	%xmm5, %xmm1
    00000358: 	pand	%xmm0, %xmm1
    0000035c: 	pandn	%xmm4, %xmm0
    00000360: 	por	%xmm1, %xmm0
    00000364: 	pmaxsw	%xmm0, %xmm2
    00000368: 	cmpq	%rax, %r13
    0000036b: 	jne	.Ltmp379 # Offset: 875
    0000036d: 	movdqa	%xmm2, %xmm0
    00000371: 	movq	0x8(%rsp), %rax
    00000376: 	psrldq	$0x8, %xmm0
    0000037b: 	pmaxsw	%xmm0, %xmm2
    0000037f: 	movdqa	%xmm2, %xmm0
    00000383: 	psrldq	$0x4, %xmm0
    00000388: 	pmaxsw	%xmm0, %xmm2
    0000038c: 	movdqa	%xmm2, %xmm0
    00000390: 	psrldq	$0x2, %xmm0
    00000395: 	pmaxsw	%xmm0, %xmm2
    00000399: 	pextrw	$0x0, %xmm2, %edx
    0000039e: 	cmpq	%rax, %r12
    000003a1: 	je	.Ltmp380 # Offset: 929
.Ltmp385:
    000003a7: 	movzwl	(%rbp,%rax,2), %edi
    000003ac: 	movzwl	(%rbx,%rax,2), %esi
    000003b0: 	leaq	(%rax,%rax), %rcx
    000003b4: 	movl	%edi, %r9d
    000003b7: 	subl	%esi, %r9d
    000003ba: 	subw	%di, %si
    000003bd: 	cmovsl	%r9d, %esi
    000003c1: 	cmpw	%si, %dx
    000003c4: 	cmovll	%esi, %edx
    000003c7: 	leaq	0x1(%rax), %rsi
    000003cb: 	cmpq	%rsi, %r12
    000003ce: 	jbe	.Ltmp380 # Offset: 974
    000003d4: 	movzwl	0x2(%rbp,%rcx), %edi
    000003d9: 	movzwl	0x2(%rbx,%rcx), %esi
    000003de: 	movl	%edi, %r9d
    000003e1: 	subl	%esi, %r9d
    000003e4: 	subw	%di, %si
    000003e7: 	cmovsl	%r9d, %esi
    000003eb: 	cmpw	%si, %dx
    000003ee: 	cmovll	%esi, %edx
    000003f1: 	leaq	0x2(%rax), %rsi
    000003f5: 	cmpq	%rsi, %r12
    000003f8: 	jbe	.Ltmp380 # Offset: 1016
    000003fe: 	movzwl	0x4(%rbp,%rcx), %edi
    00000403: 	movzwl	0x4(%rbx,%rcx), %esi
    00000408: 	movl	%edi, %r9d
    0000040b: 	subl	%esi, %r9d
    0000040e: 	subw	%di, %si
    00000411: 	cmovsl	%r9d, %esi
    00000415: 	cmpw	%si, %dx
    00000418: 	cmovll	%esi, %edx
    0000041b: 	leaq	0x3(%rax), %rsi
    0000041f: 	cmpq	%rsi, %r12
    00000422: 	jbe	.Ltmp380 # Offset: 1058
    00000428: 	movzwl	0x6(%rbp,%rcx), %edi
    0000042d: 	movzwl	0x6(%rbx,%rcx), %esi
    00000432: 	movl	%edi, %r9d
    00000435: 	subl	%esi, %r9d
    00000438: 	subw	%di, %si
    0000043b: 	cmovsl	%r9d, %esi
    0000043f: 	cmpw	%si, %dx
    00000442: 	cmovll	%esi, %edx
    00000445: 	leaq	0x4(%rax), %rsi
    00000449: 	cmpq	%rsi, %r12
    0000044c: 	jbe	.Ltmp380 # Offset: 1100
    0000044e: 	movzwl	0x8(%rbp,%rcx), %edi
    00000453: 	movzwl	0x8(%rbx,%rcx), %esi
    00000458: 	movl	%edi, %r9d
    0000045b: 	subl	%esi, %r9d
    0000045e: 	subw	%di, %si
    00000461: 	cmovsl	%r9d, %esi
    00000465: 	cmpw	%si, %dx
    00000468: 	cmovll	%esi, %edx
    0000046b: 	leaq	0x5(%rax), %rsi
    0000046f: 	cmpq	%rsi, %r12
    00000472: 	jbe	.Ltmp380 # Offset: 1138
    00000474: 	movzwl	0xa(%rbp,%rcx), %edi
    00000479: 	movzwl	0xa(%rbx,%rcx), %esi
    0000047e: 	movl	%edi, %r9d
    00000481: 	subl	%esi, %r9d
    00000484: 	subw	%di, %si
    00000487: 	cmovsl	%r9d, %esi
    0000048b: 	cmpw	%si, %dx
    0000048e: 	cmovll	%esi, %edx
    00000491: 	addq	$0x6, %rax
    00000495: 	cmpq	%rax, %r12
    00000498: 	jbe	.Ltmp380 # Offset: 1176
    0000049a: 	movzwl	0xc(%rbx,%rcx), %eax
    0000049f: 	movzwl	0xc(%rbp,%rcx), %ecx
    000004a4: 	movl	%ecx, %esi
    000004a6: 	subl	%eax, %esi
    000004a8: 	subw	%cx, %ax
    000004ab: 	cmovsl	%esi, %eax
    000004ae: 	cmpw	%ax, %dx
    000004b1: 	cmovll	%eax, %edx
.Ltmp380:
    000004b4: 	movl	0x4(%rsp), %eax
    000004b8: 	cmpl	%eax, 0x90(%rsp)
    000004bf: 	jge	.Ltmp381 # Offset: 1215
    000004c1: 	testw	%dx, %dx
    000004c4: 	jle	.Ltmp382 # Offset: 1220
    000004c6: 	cmpl	$0x9, %r8d
    000004ca: 	jle	.Ltmp382 # Offset: 1226
.Ltmp381:
    000004cc: 	addl	$0x1, 0x4(%rsp)
    000004d1: 	movq	%rbp, %rax
    000004d4: 	movl	0x4(%rsp), %edi
    000004d8: 	movq	%rbx, %rbp
    000004db: 	cmpl	0x18(%rsp), %edi
    000004df: 	je	.Ltmp382 # Offset: 1247
    000004e1: 	movq	%rax, %rbx
    000004e4: 	jmp	.Ltmp383 # Offset: 1252
.Ltmp373:
    000004e9: 	movl	0x4(%rsp), %eax
    000004ed: 	cmpl	%eax, 0x90(%rsp)
    000004f4: 	jl	.Ltmp384 # Offset: 1268
    000004fa: 	xorl	%r8d, %r8d
    000004fd: 	xorl	%edx, %edx
    000004ff: 	jmp	.Ltmp381 # Offset: 1279
.Ltmp378:
    00000501: 	xorl	%edx, %edx
    00000503: 	xorl	%eax, %eax
    00000505: 	jmp	.Ltmp385 # Offset: 1285
.Ltmp374:
    0000050a: 	xorl	%r8d, %r8d
    0000050d: 	xorl	%edx, %edx
    0000050f: 	jmp	.Ltmp386 # Offset: 1295
.Ltmp382:
    00000514: 	movswl	%dx, %r12d
.Ltmp390:
    00000518: 	movl	%r8d, 0x10(%rsp)
    0000051d: 	movl	%edx, 0x8(%rsp)
    00000521: 	callq	clock@PLT # Offset: 1313
    00000526: 	movl	0x28(%rsp), %edi
    0000052a: 	pxor	%xmm0, %xmm0
    0000052e: 	movl	0x10(%rsp), %r8d
    00000533: 	movq	%rax, end_time(%rip)
    0000053a: 	subq	start_time(%rip), %rax
    00000541: 	cvtsi2sd	%rax, %xmm0
    00000546: 	movl	%edi, %eax
    00000548: 	divsd	DATAat0x49520(%rip), %xmm0
    00000550: 	movq	%xmm0, %rbx
    00000555: 	shrl	$0x1f, %eax
    00000558: 	addl	%edi, %eax
    0000055a: 	movl	0x2c(%rsp), %edi
    0000055e: 	sarl	%eax
    00000560: 	movl	%edi, %ecx
    00000562: 	imull	%edi, %eax
    00000565: 	shrl	$0x1f, %ecx
    00000568: 	addl	%edi, %ecx
    0000056a: 	movzwl	0x3e(%rsp), %edi
    0000056f: 	sarl	%ecx
    00000571: 	addl	%ecx, %eax
    00000573: 	cltq
    00000575: 	subw	(%rbp,%rax,2), %di
    0000057a: 	movl	0x4(%rsp), %eax
    0000057e: 	cmpl	%eax, iterations(%rip)
    00000584: 	movl	%edi, %ebp
    00000586: 	jg	.Ltmp387 # Offset: 1414
    0000058c: 	cmpl	$0xa, %r8d
    00000590: 	jle	.Ltmp387 # Offset: 1424
    00000596: 	movl	0x8(%rsp), %edx
    0000059a: 	cmpw	$0x1, %dx
    0000059e: 	jle	.Ltmp387 # Offset: 1438
    000005a4: 	movq	0x30(%rsp), %rax
    000005a9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000005b0: 	movl	%r8d, 0x8(%rsp)
    000005b5: 	movq	%r13, %rdi
    000005b8: 	movq	0x8(%rax), %rdx
    000005bc: 	movq	(%rax), %rsi
    000005bf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1471
    000005c4: 	movl	$0x11, %edx
    000005c9: 	leaq	DATAat0x49199(%rip), %rsi
    000005d0: 	movq	%rax, %rdi
    000005d3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1491
    000005d8: 	movl	0x8(%rsp), %r8d
.Ltmp389:
    000005dd: 	movl	$0x4, %edx
    000005e2: 	movq	%r13, %rdi
    000005e5: 	movl	%r8d, 0x8(%rsp)
    000005ea: 	leaq	DATAat0x491b6(%rip), %rsi
    000005f1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1521
    000005f6: 	movl	0x4(%rsp), %esi
    000005fa: 	movq	%r13, %rdi
    000005fd: 	callq	_ZNSolsEi@PLT # Offset: 1533
    00000602: 	movl	$0xb, %edx
    00000607: 	leaq	DATAat0x491bb(%rip), %rsi
    0000060e: 	movq	%rax, %rdi
    00000611: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1553
    00000616: 	movl	$0xa, %edx
    0000061b: 	movq	%r13, %rdi
    0000061e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000625: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1573
    0000062a: 	movl	0x8(%rsp), %esi
    0000062e: 	movq	%r13, %rdi
    00000631: 	callq	_ZNSolsEi@PLT # Offset: 1585
    00000636: 	movl	$0x7, %edx
    0000063b: 	leaq	DATAat0x491d2(%rip), %rsi
    00000642: 	movq	%rax, %r13
    00000645: 	movq	%rax, %rdi
    00000648: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1608
    0000064d: 	movl	%r12d, %esi
    00000650: 	movq	%r13, %rdi
    00000653: 	callq	_ZNSolsEs@PLT # Offset: 1619
    00000658: 	movl	$0x10, %edx
    0000065d: 	leaq	DATAat0x491da(%rip), %rsi
    00000664: 	movq	%rax, %r12
    00000667: 	movq	%rax, %rdi
    0000066a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1642
    0000066f: 	movswl	%bp, %esi
    00000672: 	movq	%r12, %rdi
    00000675: 	callq	_ZNSolsEs@PLT # Offset: 1653
    0000067a: 	movl	$0x8, %edx
    0000067f: 	leaq	DATAat0x491eb(%rip), %rsi
    00000686: 	movq	%rax, %rbp
    00000689: 	movq	%rax, %rdi
    0000068c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1676
    00000691: 	movq	%rbx, %xmm0
    00000696: 	movq	%rbp, %rdi
    00000699: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1689
    0000069e: 	movl	$0x2, %edx
    000006a3: 	leaq	DATAat0x491f4(%rip), %rsi
    000006aa: 	movq	%rax, %rdi
    000006ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1709
    000006b2: 	movl	0x38(%rsp), %eax
    000006b6: 	movl	%eax, iterations(%rip)
    000006bc: 	movq	0x48(%rsp), %rax
    000006c1: 	subq	%fs:0x28, %rax
    000006ca: 	jne	.Ltmp388 # Offset: 1738
    000006cc: 	addq	$0x58, %rsp
    000006d0: 	popq	%rbx
    000006d1: 	popq	%rbp
    000006d2: 	popq	%r12
    000006d4: 	popq	%r13
    000006d6: 	popq	%r14
    000006d8: 	popq	%r15
    000006da: 	retq # Offset: 1754
.Ltmp387:
    000006db: 	movq	0x30(%rsp), %rax
    000006e0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000006e7: 	movl	%r8d, 0x8(%rsp)
    000006ec: 	movq	%r13, %rdi
    000006ef: 	movq	0x8(%rax), %rdx
    000006f3: 	movq	(%rax), %rsi
    000006f6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1782
    000006fb: 	movl	$0xa, %edx
    00000700: 	leaq	DATAat0x491ab(%rip), %rsi
    00000707: 	movq	%rax, %rdi
    0000070a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1802
    0000070f: 	movl	0x8(%rsp), %r8d
    00000714: 	jmp	.Ltmp389 # Offset: 1812
.Ltmp384:
    00000719: 	xorl	%r12d, %r12d
    0000071c: 	xorl	%edx, %edx
    0000071e: 	xorl	%r8d, %r8d
    00000721: 	jmp	.Ltmp390 # Offset: 1825
.Ltmp388:
    00000726: 	callq	__stack_chk_fail@PLT # Offset: 1830
    0000072b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp369:
    00000730: 	movl	$0x0, 0x4(%rsp)
    00000738: 	xorl	%r12d, %r12d
    0000073b: 	xorl	%edx, %edx
    0000073d: 	xorl	%r8d, %r8d
    00000740: 	jmp	.Ltmp390 # Offset: 1856
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi18jacobi2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi17jacobi2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x137b0
  Size        : 0xe54
  MaxSize     : 0xe60
  Offset      : 0x137b0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi17jacobi2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	movl	%ebx, %esi
    00000018: 	imull	%r14d, %ebx
    0000001c: 	subq	$0xb8, %rsp
    00000023: 	movl	%edx, 0x8c(%rsp)
    0000002a: 	movl	%r14d, %edx
    0000002d: 	movl	%ecx, 0x80(%rsp)
    00000034: 	leaq	0xa0(%rsp), %rcx
    0000003c: 	movl	%r8d, 0x30(%rsp)
    00000041: 	movq	%r9, 0x90(%rsp)
    00000049: 	movq	%fs:0x28, %rax
    00000052: 	movq	%rax, 0xa8(%rsp)
    0000005a: 	xorl	%eax, %eax
    0000005c: 	movq	DATAat0x49530(%rip), %rax
    00000063: 	movq	%rdi, 0x8(%rsp)
    00000068: 	movq	%rax, 0xa0(%rsp)
    00000070: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 112
    00000075: 	testl	%ebx, %ebx
    00000077: 	movq	0x8(%rsp), %r11
    0000007c: 	movw	%ax, 0x9e(%rsp)
    00000084: 	jle	.Ltmp391 # Offset: 132
    00000086: 	movslq	%ebx, %rdx
    00000089: 	movq	%r11, %rsi
    0000008c: 	movq	%r15, %rdi
    0000008f: 	addq	%rdx, %rdx
    00000092: 	callq	memmove@PLT # Offset: 146
    00000097: 	movq	0x8(%rsp), %r11
.Ltmp391:
    0000009c: 	movl	iterations(%rip), %eax
    000000a2: 	movq	%r11, 0x8(%rsp)
    000000a7: 	movl	$0x2710, iterations(%rip)
    000000b1: 	movl	%eax, 0x98(%rsp)
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movq	%rax, start_time(%rip)
    000000c4: 	movl	iterations(%rip), %eax
    000000ca: 	movl	%eax, 0x84(%rsp)
    000000d1: 	testl	%eax, %eax
    000000d3: 	jle	.Ltmp392 # Offset: 211
    000000d9: 	movl	0x8c(%rsp), %eax
    000000e0: 	movslq	%ebx, %rbx
    000000e3: 	movl	0x30(%rsp), %edi
    000000e7: 	movl	$0x0, 0x54(%rsp)
    000000ef: 	movq	%rbx, 0x48(%rsp)
    000000f4: 	movq	0x8(%rsp), %r11
    000000f9: 	pxor	%xmm3, %xmm3
    000000fd: 	subl	$0x1, %eax
    00000100: 	addl	%edi, %edi
    00000102: 	movdqa	DATAat0x49440(%rip), %xmm6
    0000010a: 	movdqa	DATAat0x49450(%rip), %xmm5
    00000112: 	movl	%eax, 0x2c(%rsp)
    00000116: 	movl	0x80(%rsp), %eax
    0000011d: 	movl	%edi, 0x88(%rsp)
    00000124: 	leal	-0x4(%rax), %r14d
    00000128: 	subl	$0x6, %eax
    0000012b: 	movl	%eax, %ecx
    0000012d: 	movl	%eax, 0x34(%rsp)
    00000131: 	shrl	$0x4, %eax
    00000134: 	leal	-0x1(%rax), %edx
    00000137: 	shll	$0x4, %eax
    0000013a: 	shrl	$0x2, %ecx
    0000013d: 	addl	$0x1, %eax
    00000140: 	addq	$0x1, %rdx
    00000144: 	cltq
    00000146: 	shlq	$0x5, %rdx
    0000014a: 	movq	%rax, 0x38(%rsp)
    0000014f: 	movl	%ecx, %eax
    00000151: 	shlq	$0x2, %rax
    00000155: 	movq	%rdx, 0x40(%rsp)
    0000015a: 	movq	%rax, 0x78(%rsp)
    0000015f: 	leal	0x5(,%rcx,4), %eax
    00000166: 	movl	%eax, 0x50(%rsp)
    0000016a: 	leaq	-0x1(%rbx), %rax
    0000016e: 	movq	%rax, 0x68(%rsp)
    00000173: 	movq	%rbx, %rax
    00000176: 	andq	$-0x8, %rbx
    0000017a: 	shrq	$0x3, %rax
    0000017e: 	movq	%rbx, 0x60(%rsp)
    00000183: 	shlq	$0x4, %rax
    00000187: 	movq	%rax, 0x70(%rsp)
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp410:
    00000190: 	cmpl	$0x1, 0x2c(%rsp)
    00000195: 	jle	.Ltmp393 # Offset: 405
    0000019b: 	movl	0x80(%rsp), %eax
    000001a2: 	movl	0x30(%rsp), %ebx
    000001a6: 	xorl	%r13d, %r13d
    000001a9: 	pxor	%xmm4, %xmm4
    000001ad: 	movl	$0x1, 0x28(%rsp)
    000001b5: 	subl	$0x1, %eax
    000001b8: 	movl	%eax, 0x14(%rsp)
    000001bc: 	movl	0x88(%rsp), %eax
    000001c3: 	movl	%eax, 0x8(%rsp)
    000001c7: 	leaq	0x8(%r11), %rax
    000001cb: 	movq	%rax, 0x58(%rsp)
.Ltmp399:
    000001d0: 	addl	$0x1, 0x28(%rsp)
    000001d5: 	movl	$0x1, %eax
    000001da: 	cmpl	$0x1, %r14d
    000001de: 	jle	.Ltmp394 # Offset: 478
    000001e4: 	movslq	%ebx, %rax
    000001e7: 	movslq	%r13d, %rbp
    000001ea: 	movslq	0x8(%rsp), %r12
    000001ef: 	movq	%rax, 0x18(%rsp)
    000001f4: 	leaq	0x2(%rax,%rax), %rax
    000001f9: 	leaq	0xa(%rbp,%rbp), %r9
    000001fe: 	leaq	(%r15,%rax), %rdx
    00000202: 	leaq	(%r11,%r9), %rdi
    00000206: 	movq	%rdx, %rcx
    00000209: 	leaq	0x6(%r11,%rax), %rsi
    0000020e: 	leaq	0xe(%r11,%rax), %r10
    00000213: 	subq	%rdi, %rcx
    00000216: 	leaq	0xa(%r12,%r12), %r8
    0000021b: 	addq	$0x6, %rcx
    0000021f: 	cmpq	$0x1c, %rcx
    00000223: 	movq	%rdx, %rcx
    00000226: 	seta	%dil
    0000022a: 	subq	%rsi, %rcx
    0000022d: 	addq	$0x6, %rcx
    00000231: 	cmpq	$0x1c, %rcx
    00000235: 	seta	%cl
    00000238: 	andl	%edi, %ecx
    0000023a: 	cmpl	$0xf, 0x34(%rsp)
    0000023f: 	seta	%dil
    00000243: 	andl	%edi, %ecx
    00000245: 	movq	%rdx, %rdi
    00000248: 	subq	%r10, %rdi
    0000024b: 	addq	$0x6, %rdi
    0000024f: 	cmpq	$0x18, %rdi
    00000253: 	seta	%dil
    00000257: 	testb	%dil, %cl
    0000025a: 	je	.Ltmp395 # Offset: 602
    00000260: 	leaq	(%r11,%r8), %rdi
    00000264: 	movq	%rdx, %rcx
    00000267: 	subq	%rdi, %rcx
    0000026a: 	addq	$0x6, %rcx
    0000026e: 	cmpq	$0x1c, %rcx
    00000272: 	jbe	.Ltmp395 # Offset: 626
    00000278: 	leaq	-0x2(%rax), %rdi
    0000027c: 	leaq	-0x8(%r11,%r9), %r10
    00000281: 	movq	%rdi, 0x20(%rsp)
    00000286: 	leaq	(%r11,%rdi), %r9
    0000028a: 	movq	0x40(%rsp), %rdi
    0000028f: 	leaq	0x4(%r15,%rax), %rcx
    00000294: 	leaq	-0x8(%r11,%r8), %r8
    00000299: 	xorl	%eax, %eax
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp396:
    000002a0: 	movdqu	(%r10,%rax), %xmm2
    000002a6: 	movdqu	0x10(%r10,%rax), %xmm1
    000002ad: 	movdqa	%xmm3, %xmm0
    000002b1: 	movdqa	%xmm3, %xmm14
    000002b6: 	movdqu	(%r9,%rax), %xmm8
    000002bc: 	movdqu	(%r8,%rax), %xmm9
    000002c2: 	movdqa	%xmm3, %xmm13
    000002c7: 	movdqa	%xmm2, %xmm12
    000002cc: 	shufps	$0x88, %xmm1, %xmm12
    000002d1: 	movdqa	%xmm8, %xmm7
    000002d6: 	pcmpgtw	%xmm12, %xmm14
    000002db: 	movdqu	0x10(%r9,%rax), %xmm1
    000002e2: 	movdqa	%xmm12, %xmm11
    000002e7: 	shufps	$0xdd, %xmm1, %xmm8
    000002ec: 	pcmpgtw	%xmm8, %xmm0
    000002f1: 	shufps	$0x88, %xmm1, %xmm7
    000002f5: 	movdqa	%xmm8, %xmm10
    000002fa: 	pcmpgtw	%xmm7, %xmm13
    000002ff: 	punpcklwd	%xmm14, %xmm11
    00000304: 	punpckhwd	%xmm14, %xmm12
    00000309: 	movdqu	0x10(%r8,%rax), %xmm1
    00000310: 	punpcklwd	%xmm0, %xmm10
    00000315: 	punpckhwd	%xmm0, %xmm8
    0000031a: 	movdqa	%xmm9, %xmm0
    0000031f: 	shufps	$0x88, %xmm1, %xmm0
    00000323: 	movdqa	%xmm7, %xmm1
    00000327: 	punpckhwd	%xmm13, %xmm7
    0000032c: 	movdqa	%xmm0, %xmm15
    00000331: 	punpcklwd	%xmm13, %xmm1
    00000336: 	paddd	%xmm12, %xmm7
    0000033b: 	movdqa	%xmm3, %xmm12
    00000340: 	paddd	%xmm11, %xmm1
    00000345: 	movdqa	%xmm3, %xmm11
    0000034a: 	paddd	%xmm8, %xmm7
    0000034f: 	pcmpgtw	%xmm0, %xmm11
    00000354: 	paddd	%xmm10, %xmm1
    00000359: 	punpckhwd	%xmm11, %xmm0
    0000035e: 	punpcklwd	%xmm11, %xmm15
    00000363: 	movdqa	%xmm4, %xmm11
    00000368: 	paddd	%xmm0, %xmm7
    0000036c: 	paddd	%xmm15, %xmm1
    00000371: 	movdqa	%xmm4, %xmm0
    00000375: 	paddd	%xmm6, %xmm1
    00000379: 	paddd	%xmm6, %xmm7
    0000037d: 	pcmpgtd	%xmm1, %xmm11
    00000382: 	pcmpgtd	%xmm7, %xmm0
    00000386: 	pand	%xmm5, %xmm11
    0000038b: 	pand	%xmm5, %xmm0
    0000038f: 	paddd	%xmm11, %xmm1
    00000394: 	paddd	%xmm0, %xmm7
    00000398: 	movdqa	%xmm3, %xmm11
    0000039d: 	psrad	$0x2, %xmm7
    000003a2: 	psrad	$0x2, %xmm1
    000003a7: 	movdqa	%xmm1, %xmm0
    000003ab: 	punpcklwd	%xmm7, %xmm1
    000003af: 	punpckhwd	%xmm7, %xmm0
    000003b3: 	movdqa	%xmm1, %xmm7
    000003b7: 	punpckhwd	%xmm0, %xmm7
    000003bb: 	punpcklwd	%xmm0, %xmm1
    000003bf: 	movdqu	0x10(%rsi,%rax), %xmm0
    000003c5: 	punpcklwd	%xmm7, %xmm1
    000003c9: 	movdqu	0x10(%r10,%rax), %xmm7
    000003d0: 	shufps	$0xdd, %xmm7, %xmm2
    000003d4: 	movdqu	(%rsi,%rax), %xmm7
    000003d9: 	pcmpgtw	%xmm2, %xmm12
    000003de: 	shufps	$0x88, %xmm0, %xmm7
    000003e2: 	movdqu	0x10(%r8,%rax), %xmm0
    000003e9: 	pcmpgtw	%xmm7, %xmm11
    000003ee: 	movd	%xmm1, (%rdx,%rax)
    000003f3: 	shufps	$0xdd, %xmm0, %xmm9
    000003f8: 	movdqa	%xmm2, %xmm0
    000003fc: 	punpckhwd	%xmm12, %xmm2
    00000401: 	movdqa	%xmm9, %xmm13
    00000406: 	punpcklwd	%xmm12, %xmm0
    0000040b: 	paddd	%xmm8, %xmm2
    00000410: 	movdqa	%xmm4, %xmm8
    00000415: 	paddd	%xmm10, %xmm0
    0000041a: 	movdqa	%xmm7, %xmm10
    0000041f: 	punpckhwd	%xmm11, %xmm7
    00000424: 	punpcklwd	%xmm11, %xmm10
    00000429: 	paddd	%xmm7, %xmm2
    0000042d: 	movdqa	%xmm4, %xmm7
    00000431: 	paddd	%xmm10, %xmm0
    00000436: 	movdqa	%xmm3, %xmm10
    0000043b: 	pcmpgtw	%xmm9, %xmm10
    00000440: 	punpcklwd	%xmm10, %xmm13
    00000445: 	punpckhwd	%xmm10, %xmm9
    0000044a: 	paddd	%xmm13, %xmm0
    0000044f: 	paddd	%xmm9, %xmm2
    00000454: 	paddd	%xmm6, %xmm0
    00000458: 	paddd	%xmm6, %xmm2
    0000045c: 	pcmpgtd	%xmm0, %xmm8
    00000461: 	pcmpgtd	%xmm2, %xmm7
    00000465: 	pand	%xmm5, %xmm8
    0000046a: 	pand	%xmm5, %xmm7
    0000046e: 	paddd	%xmm7, %xmm2
    00000472: 	paddd	%xmm8, %xmm0
    00000477: 	psrad	$0x2, %xmm2
    0000047c: 	psrad	$0x2, %xmm0
    00000481: 	movdqa	%xmm0, %xmm7
    00000485: 	punpcklwd	%xmm2, %xmm0
    00000489: 	punpckhwd	%xmm2, %xmm7
    0000048d: 	movdqa	%xmm0, %xmm2
    00000491: 	punpckhwd	%xmm7, %xmm2
    00000495: 	punpcklwd	%xmm7, %xmm0
    00000499: 	punpcklwd	%xmm2, %xmm0
    0000049d: 	pshufd	$0x55, %xmm1, %xmm2
    000004a2: 	movd	%xmm2, 0x8(%rdx,%rax)
    000004a8: 	movdqa	%xmm1, %xmm2
    000004ac: 	punpckhdq	%xmm1, %xmm2
    000004b0: 	pshufd	$0xff, %xmm1, %xmm1
    000004b5: 	movd	%xmm1, 0x18(%rdx,%rax)
    000004bb: 	pshufd	$0x55, %xmm0, %xmm1
    000004c0: 	movd	%xmm2, 0x10(%rdx,%rax)
    000004c6: 	movd	%xmm1, 0x8(%rcx,%rax)
    000004cc: 	movdqa	%xmm0, %xmm1
    000004d0: 	movd	%xmm0, (%rcx,%rax)
    000004d5: 	punpckhdq	%xmm0, %xmm1
    000004d9: 	pshufd	$0xff, %xmm0, %xmm0
    000004de: 	movd	%xmm1, 0x10(%rcx,%rax)
    000004e4: 	movd	%xmm0, 0x18(%rcx,%rax)
    000004ea: 	addq	$0x20, %rax
    000004ee: 	cmpq	%rax, %rdi
    000004f1: 	jne	.Ltmp396 # Offset: 1265
    000004f7: 	movq	0x38(%rsp), %rsi
    000004fc: 	movq	0x18(%rsp), %rax
    00000501: 	movq	0x20(%rsp), %rdi
    00000506: 	addq	%rsi, %rbp
    00000509: 	addq	%rsi, %r12
    0000050c: 	addq	%rsi, %rax
    0000050f: 	leaq	(%r11,%rbp,2), %r10
    00000513: 	leaq	(%r11,%rax,2), %rdx
    00000517: 	addq	%r15, %rdi
    0000051a: 	leaq	(%r11,%r12,2), %rbp
    0000051e: 	movq	%rsi, %r12
    00000521: 	nopl	(%rax) # Size: 7
.Ltmp397:
    00000528: 	movswl	(%r10), %eax
    0000052c: 	movswl	-0x2(%rdx), %ecx
    00000530: 	movswl	0x2(%rdx), %r8d
    00000535: 	movswl	0x4(%r10), %r9d
    0000053a: 	addl	%eax, %ecx
    0000053c: 	movswl	(%rdx), %esi
    0000053f: 	movswl	0x2(%r10), %eax
    00000544: 	addl	%r8d, %ecx
    00000547: 	addl	%r8d, %r9d
    0000054a: 	movswl	0x6(%rdx), %r8d
    0000054f: 	addl	%eax, %esi
    00000551: 	movswl	0x4(%rdx), %eax
    00000555: 	addl	%r9d, %r8d
    00000558: 	movswl	0x6(%r10), %r9d
    0000055d: 	addl	%eax, %esi
    0000055f: 	addl	%eax, %r9d
    00000562: 	movswl	0x8(%rdx), %eax
    00000566: 	addl	%r9d, %eax
    00000569: 	movswl	(%rbp), %r9d
    0000056e: 	addl	%ecx, %r9d
    00000571: 	leal	0x5(%r9), %ecx
    00000575: 	addl	$0x2, %r9d
    00000579: 	cmovnsl	%r9d, %ecx
    0000057d: 	movswl	0x2(%rbp), %r9d
    00000582: 	addl	%esi, %r9d
    00000585: 	sarl	$0x2, %ecx
    00000588: 	leal	0x5(%r9), %esi
    0000058c: 	addl	$0x2, %r9d
    00000590: 	movzwl	%cx, %ecx
    00000593: 	cmovnsl	%r9d, %esi
    00000597: 	movswl	0x4(%rbp), %r9d
    0000059c: 	addl	%r8d, %r9d
    0000059f: 	sarl	$0x2, %esi
    000005a2: 	leal	0x5(%r9), %r8d
    000005a6: 	addl	$0x2, %r9d
    000005aa: 	movzwl	%si, %esi
    000005ad: 	cmovnsl	%r9d, %r8d
    000005b1: 	movswl	0x6(%rbp), %r9d
    000005b6: 	addl	%eax, %r9d
    000005b9: 	sarl	$0x2, %r8d
    000005bd: 	leal	0x5(%r9), %eax
    000005c1: 	addl	$0x2, %r9d
    000005c5: 	movzwl	%r8w, %r8d
    000005c9: 	cmovnsl	%r9d, %eax
    000005cd: 	addq	$0x8, %r10
    000005d1: 	addq	$0x8, %rdx
    000005d5: 	addq	$0x8, %rbp
    000005d9: 	sarl	$0x2, %eax
    000005dc: 	movzwl	%ax, %eax
    000005df: 	shlq	$0x10, %rax
    000005e3: 	orq	%r8, %rax
    000005e6: 	shlq	$0x10, %rax
    000005ea: 	orq	%rsi, %rax
    000005ed: 	shlq	$0x10, %rax
    000005f1: 	orq	%rcx, %rax
    000005f4: 	movq	%rax, (%rdi,%r12,2)
    000005f8: 	addq	$0x4, %r12
    000005fc: 	cmpl	%r12d, %r14d
    000005ff: 	jg	.Ltmp397 # Offset: 1535
.Ltmp412:
    00000605: 	movl	0x50(%rsp), %eax
.Ltmp394:
    00000609: 	cmpl	0x14(%rsp), %eax
    0000060d: 	jge	.Ltmp398 # Offset: 1549
    00000613: 	leal	(%rax,%r13), %edx
    00000617: 	leal	-0x1(%rax,%rbx), %edi
    0000061b: 	movl	0x8(%rsp), %r12d
    00000620: 	movslq	%edx, %rdx
    00000623: 	movslq	%edi, %rdi
    00000626: 	movswl	(%r11,%rdx,2), %ecx
    0000062b: 	leal	0x1(%rax), %edx
    0000062e: 	movswl	(%r11,%rdi,2), %r8d
    00000633: 	leal	(%rbx,%rdx), %esi
    00000636: 	movslq	%esi, %rsi
    00000639: 	leaq	(%r11,%rsi,2), %r9
    0000063d: 	movswl	(%r9), %edi
    00000641: 	addl	%edi, %r8d
    00000644: 	leal	(%rax,%rbx), %edi
    00000647: 	addl	%ecx, %r8d
    0000064a: 	leal	(%rax,%r12), %ecx
    0000064e: 	movslq	%edi, %rdi
    00000651: 	movslq	%ecx, %rcx
    00000654: 	movswl	(%r11,%rcx,2), %ecx
    00000659: 	addl	%r8d, %ecx
    0000065c: 	leal	0x5(%rcx), %r8d
    00000660: 	addl	$0x2, %ecx
    00000663: 	cmovnsl	%ecx, %r8d
    00000667: 	sarl	$0x2, %r8d
    0000066b: 	movw	%r8w, (%r15,%rdi,2)
    00000670: 	cmpl	0x14(%rsp), %edx
    00000674: 	jge	.Ltmp398 # Offset: 1652
    0000067a: 	leal	(%r13,%rdx), %ecx
    0000067f: 	movswl	(%r11,%rdi,2), %edi
    00000684: 	movslq	%ecx, %rcx
    00000687: 	movswl	(%r11,%rcx,2), %ebp
    0000068c: 	leal	0x2(%rax), %ecx
    0000068f: 	leal	(%rbx,%rcx), %r8d
    00000693: 	movslq	%r8d, %r8
    00000696: 	leaq	(%r11,%r8,2), %r10
    0000069a: 	movswl	(%r10), %r12d
    0000069e: 	addl	%r12d, %edi
    000006a1: 	movl	0x8(%rsp), %r12d
    000006a6: 	addl	%ebp, %edi
    000006a8: 	addl	%r12d, %edx
    000006ab: 	movslq	%edx, %rdx
    000006ae: 	movswl	(%r11,%rdx,2), %edx
    000006b3: 	addl	%edi, %edx
    000006b5: 	leal	0x5(%rdx), %edi
    000006b8: 	addl	$0x2, %edx
    000006bb: 	cmovnsl	%edx, %edi
    000006be: 	sarl	$0x2, %edi
    000006c1: 	movw	%di, (%r15,%rsi,2)
    000006c6: 	cmpl	0x14(%rsp), %ecx
    000006ca: 	jge	.Ltmp398 # Offset: 1738
    000006d0: 	leal	(%r13,%rcx), %edx
    000006d5: 	movswl	(%r9), %r9d
    000006d9: 	addl	%r12d, %ecx
    000006dc: 	movslq	%edx, %rdx
    000006df: 	movslq	%ecx, %rcx
    000006e2: 	movswl	(%r11,%rdx,2), %ebp
    000006e7: 	leal	0x3(%rax), %edx
    000006ea: 	movswl	(%r11,%rcx,2), %ecx
    000006ef: 	leal	(%rbx,%rdx), %edi
    000006f2: 	movslq	%edi, %rdi
    000006f5: 	movswl	(%r11,%rdi,2), %esi
    000006fa: 	addl	%r9d, %esi
    000006fd: 	addl	%ebp, %esi
    000006ff: 	addl	%esi, %ecx
    00000701: 	leal	0x5(%rcx), %esi
    00000704: 	addl	$0x2, %ecx
    00000707: 	cmovnsl	%ecx, %esi
    0000070a: 	sarl	$0x2, %esi
    0000070d: 	movw	%si, (%r15,%r8,2)
    00000712: 	cmpl	%edx, 0x14(%rsp)
    00000716: 	jle	.Ltmp398 # Offset: 1814
    00000718: 	leal	0x4(%rax,%rbx), %eax
    0000071c: 	leal	(%r13,%rdx), %ecx
    00000721: 	movswl	(%r10), %esi
    00000725: 	addl	%r12d, %edx
    00000728: 	cltq
    0000072a: 	movslq	%ecx, %rcx
    0000072d: 	movslq	%edx, %rdx
    00000730: 	movswl	(%r11,%rax,2), %eax
    00000735: 	movswl	(%r11,%rcx,2), %ecx
    0000073a: 	movswl	(%r11,%rdx,2), %edx
    0000073f: 	addl	%esi, %eax
    00000741: 	addl	%ecx, %eax
    00000743: 	addl	%edx, %eax
    00000745: 	leal	0x5(%rax), %edx
    00000748: 	addl	$0x2, %eax
    0000074b: 	cmovnsl	%eax, %edx
    0000074e: 	sarl	$0x2, %edx
    00000751: 	movw	%dx, (%r15,%rdi,2)
.Ltmp398:
    00000756: 	movl	0x30(%rsp), %eax
    0000075a: 	movl	0x28(%rsp), %edi
    0000075e: 	addl	%eax, 0x8(%rsp)
    00000762: 	addl	%eax, %r13d
    00000765: 	addl	%eax, %ebx
    00000767: 	cmpl	%edi, 0x2c(%rsp)
    0000076b: 	jne	.Ltmp399 # Offset: 1899
.Ltmp393:
    00000771: 	cmpq	$0x0, 0x48(%rsp)
    00000777: 	je	.Ltmp400 # Offset: 1911
    0000077d: 	cmpq	$0x6, 0x68(%rsp)
    00000783: 	jbe	.Ltmp401 # Offset: 1923
    00000789: 	movq	0x70(%rsp), %rdx
    0000078e: 	xorl	%eax, %eax
    00000790: 	pxor	%xmm1, %xmm1
    00000794: 	nopl	(%rax) # Size: 4
.Ltmp402:
    00000798: 	movdqu	(%r15,%rax), %xmm2
    0000079e: 	movdqu	(%r11,%rax), %xmm4
    000007a4: 	movdqa	%xmm3, %xmm0
    000007a8: 	movdqu	(%r11,%rax), %xmm7
    000007ae: 	addq	$0x10, %rax
    000007b2: 	psubw	%xmm2, %xmm4
    000007b6: 	pcmpgtw	%xmm4, %xmm0
    000007ba: 	psubw	%xmm7, %xmm2
    000007be: 	pand	%xmm0, %xmm2
    000007c2: 	pandn	%xmm4, %xmm0
    000007c6: 	movdqa	%xmm3, %xmm4
    000007ca: 	por	%xmm2, %xmm0
    000007ce: 	pcmpgtw	%xmm0, %xmm4
    000007d2: 	movdqa	%xmm0, %xmm2
    000007d6: 	punpcklwd	%xmm4, %xmm2
    000007da: 	punpckhwd	%xmm4, %xmm0
    000007de: 	paddd	%xmm2, %xmm1
    000007e2: 	paddd	%xmm0, %xmm1
    000007e6: 	cmpq	%rax, %rdx
    000007e9: 	jne	.Ltmp402 # Offset: 2025
    000007eb: 	movdqa	%xmm1, %xmm0
    000007ef: 	movq	0x60(%rsp), %rax
    000007f4: 	psrldq	$0x8, %xmm0
    000007f9: 	paddd	%xmm0, %xmm1
    000007fd: 	movdqa	%xmm1, %xmm0
    00000801: 	psrldq	$0x4, %xmm0
    00000806: 	paddd	%xmm0, %xmm1
    0000080a: 	movd	%xmm1, %ebp
    0000080e: 	cmpq	%rax, 0x48(%rsp)
    00000813: 	je	.Ltmp403 # Offset: 2067
    00000819: 	movq	%rax, %rdx
.Ltmp415:
    0000081c: 	movzwl	(%r15,%rdx,2), %esi
    00000821: 	movzwl	(%r11,%rdx,2), %eax
    00000826: 	leaq	(%rdx,%rdx), %rcx
    0000082a: 	movq	0x48(%rsp), %rbx
    0000082f: 	movl	%esi, %edi
    00000831: 	subl	%eax, %edi
    00000833: 	subw	%si, %ax
    00000836: 	cmovsl	%edi, %eax
    00000839: 	cwtl
    0000083a: 	addl	%eax, %ebp
    0000083c: 	leaq	0x1(%rdx), %rax
    00000840: 	cmpq	%rax, %rbx
    00000843: 	jbe	.Ltmp404 # Offset: 2115
    00000849: 	movzwl	0x2(%r15,%rcx), %esi
    0000084f: 	movzwl	0x2(%r11,%rcx), %eax
    00000855: 	movl	%esi, %edi
    00000857: 	subl	%eax, %edi
    00000859: 	subw	%si, %ax
    0000085c: 	cmovsl	%edi, %eax
    0000085f: 	cwtl
    00000860: 	addl	%eax, %ebp
    00000862: 	leaq	0x2(%rdx), %rax
    00000866: 	cmpq	%rax, %rbx
    00000869: 	jbe	.Ltmp404 # Offset: 2153
    0000086f: 	movzwl	0x4(%r15,%rcx), %esi
    00000875: 	movzwl	0x4(%r11,%rcx), %eax
    0000087b: 	movl	%esi, %edi
    0000087d: 	subl	%eax, %edi
    0000087f: 	subw	%si, %ax
    00000882: 	cmovsl	%edi, %eax
    00000885: 	cwtl
    00000886: 	addl	%eax, %ebp
    00000888: 	leaq	0x3(%rdx), %rax
    0000088c: 	cmpq	%rax, %rbx
    0000088f: 	jbe	.Ltmp404 # Offset: 2191
    00000891: 	movzwl	0x6(%r15,%rcx), %esi
    00000897: 	movzwl	0x6(%r11,%rcx), %eax
    0000089d: 	movl	%esi, %edi
    0000089f: 	subl	%eax, %edi
    000008a1: 	subw	%si, %ax
    000008a4: 	cmovsl	%edi, %eax
    000008a7: 	cwtl
    000008a8: 	addl	%eax, %ebp
    000008aa: 	leaq	0x4(%rdx), %rax
    000008ae: 	cmpq	%rax, %rbx
    000008b1: 	jbe	.Ltmp404 # Offset: 2225
    000008b3: 	movzwl	0x8(%r15,%rcx), %esi
    000008b9: 	movzwl	0x8(%r11,%rcx), %eax
    000008bf: 	movl	%esi, %edi
    000008c1: 	subl	%eax, %edi
    000008c3: 	subw	%si, %ax
    000008c6: 	cmovsl	%edi, %eax
    000008c9: 	cwtl
    000008ca: 	addl	%eax, %ebp
    000008cc: 	leaq	0x5(%rdx), %rax
    000008d0: 	cmpq	%rax, %rbx
    000008d3: 	jbe	.Ltmp404 # Offset: 2259
    000008d5: 	movzwl	0xa(%r15,%rcx), %esi
    000008db: 	movzwl	0xa(%r11,%rcx), %eax
    000008e1: 	movl	%esi, %edi
    000008e3: 	subl	%eax, %edi
    000008e5: 	subw	%si, %ax
    000008e8: 	cmovsl	%edi, %eax
    000008eb: 	addq	$0x6, %rdx
    000008ef: 	cwtl
    000008f0: 	addl	%eax, %ebp
    000008f2: 	cmpq	%rdx, %rbx
    000008f5: 	jbe	.Ltmp404 # Offset: 2293
    000008f7: 	movzwl	0xc(%r15,%rcx), %edx
    000008fd: 	movzwl	0xc(%r11,%rcx), %eax
    00000903: 	movl	%edx, %ecx
    00000905: 	subl	%eax, %ecx
    00000907: 	subw	%dx, %ax
    0000090a: 	cmovsl	%ecx, %eax
    0000090d: 	cwtl
    0000090e: 	addl	%eax, %ebp
.Ltmp404:
    00000910: 	cmpq	$0x6, 0x68(%rsp)
    00000916: 	jbe	.Ltmp405 # Offset: 2326
.Ltmp403:
    0000091c: 	movq	0x70(%rsp), %rdx
    00000921: 	xorl	%eax, %eax
    00000923: 	pxor	%xmm2, %xmm2
    00000927: 	nopw	(%rax,%rax) # Size: 9
.Ltmp406:
    00000930: 	movdqu	(%r15,%rax), %xmm1
    00000936: 	movdqu	(%r11,%rax), %xmm4
    0000093c: 	movdqa	%xmm3, %xmm0
    00000940: 	movdqu	(%r11,%rax), %xmm7
    00000946: 	addq	$0x10, %rax
    0000094a: 	psubw	%xmm1, %xmm4
    0000094e: 	pcmpgtw	%xmm4, %xmm0
    00000952: 	psubw	%xmm7, %xmm1
    00000956: 	pand	%xmm0, %xmm1
    0000095a: 	pandn	%xmm4, %xmm0
    0000095e: 	por	%xmm1, %xmm0
    00000962: 	pmaxsw	%xmm0, %xmm2
    00000966: 	cmpq	%rax, %rdx
    00000969: 	jne	.Ltmp406 # Offset: 2409
    0000096b: 	movdqa	%xmm2, %xmm0
    0000096f: 	movq	0x60(%rsp), %rax
    00000974: 	psrldq	$0x8, %xmm0
    00000979: 	pmaxsw	%xmm0, %xmm2
    0000097d: 	movdqa	%xmm2, %xmm0
    00000981: 	psrldq	$0x4, %xmm0
    00000986: 	pmaxsw	%xmm0, %xmm2
    0000098a: 	movdqa	%xmm2, %xmm0
    0000098e: 	psrldq	$0x2, %xmm0
    00000993: 	pmaxsw	%xmm0, %xmm2
    00000997: 	pextrw	$0x0, %xmm2, %ebx
    0000099c: 	cmpq	%rax, 0x48(%rsp)
    000009a1: 	je	.Ltmp407 # Offset: 2465
.Ltmp414:
    000009a7: 	movzwl	(%r15,%rax,2), %esi
    000009ac: 	movzwl	(%r11,%rax,2), %ecx
    000009b1: 	leaq	(%rax,%rax), %rdx
    000009b5: 	movq	0x48(%rsp), %r10
    000009ba: 	movl	%esi, %edi
    000009bc: 	subl	%ecx, %edi
    000009be: 	subw	%si, %cx
    000009c1: 	cmovsl	%edi, %ecx
    000009c4: 	cmpw	%cx, %bx
    000009c7: 	cmovll	%ecx, %ebx
    000009ca: 	leaq	0x1(%rax), %rcx
    000009ce: 	cmpq	%rcx, %r10
    000009d1: 	jbe	.Ltmp407 # Offset: 2513
    000009d7: 	movzwl	0x2(%r15,%rdx), %esi
    000009dd: 	movzwl	0x2(%r11,%rdx), %ecx
    000009e3: 	movl	%esi, %edi
    000009e5: 	subl	%ecx, %edi
    000009e7: 	subw	%si, %cx
    000009ea: 	cmovsl	%edi, %ecx
    000009ed: 	cmpw	%cx, %bx
    000009f0: 	cmovll	%ecx, %ebx
    000009f3: 	leaq	0x2(%rax), %rcx
    000009f7: 	cmpq	%rcx, %r10
    000009fa: 	jbe	.Ltmp407 # Offset: 2554
    00000a00: 	movzwl	0x4(%r15,%rdx), %esi
    00000a06: 	movzwl	0x4(%r11,%rdx), %ecx
    00000a0c: 	movl	%esi, %edi
    00000a0e: 	subl	%ecx, %edi
    00000a10: 	subw	%si, %cx
    00000a13: 	cmovsl	%edi, %ecx
    00000a16: 	cmpw	%cx, %bx
    00000a19: 	cmovll	%ecx, %ebx
    00000a1c: 	leaq	0x3(%rax), %rcx
    00000a20: 	cmpq	%rcx, %r10
    00000a23: 	jbe	.Ltmp407 # Offset: 2595
    00000a29: 	movzwl	0x6(%r15,%rdx), %esi
    00000a2f: 	movzwl	0x6(%r11,%rdx), %ecx
    00000a35: 	movl	%esi, %edi
    00000a37: 	subl	%ecx, %edi
    00000a39: 	subw	%si, %cx
    00000a3c: 	cmovsl	%edi, %ecx
    00000a3f: 	cmpw	%cx, %bx
    00000a42: 	cmovll	%ecx, %ebx
    00000a45: 	leaq	0x4(%rax), %rcx
    00000a49: 	cmpq	%rcx, %r10
    00000a4c: 	jbe	.Ltmp407 # Offset: 2636
    00000a4e: 	movzwl	0x8(%r15,%rdx), %esi
    00000a54: 	movzwl	0x8(%r11,%rdx), %ecx
    00000a5a: 	movl	%esi, %edi
    00000a5c: 	subl	%ecx, %edi
    00000a5e: 	subw	%si, %cx
    00000a61: 	cmovsl	%edi, %ecx
    00000a64: 	cmpw	%cx, %bx
    00000a67: 	cmovll	%ecx, %ebx
    00000a6a: 	leaq	0x5(%rax), %rcx
    00000a6e: 	cmpq	%rcx, %r10
    00000a71: 	jbe	.Ltmp407 # Offset: 2673
    00000a73: 	movzwl	0xa(%r15,%rdx), %esi
    00000a79: 	movzwl	0xa(%r11,%rdx), %ecx
    00000a7f: 	movl	%esi, %edi
    00000a81: 	subl	%ecx, %edi
    00000a83: 	subw	%si, %cx
    00000a86: 	cmovsl	%edi, %ecx
    00000a89: 	cmpw	%cx, %bx
    00000a8c: 	cmovll	%ecx, %ebx
    00000a8f: 	addq	$0x6, %rax
    00000a93: 	cmpq	%rax, %r10
    00000a96: 	jbe	.Ltmp407 # Offset: 2710
    00000a98: 	movzwl	0xc(%r11,%rdx), %eax
    00000a9e: 	movzwl	0xc(%r15,%rdx), %edx
    00000aa4: 	movl	%edx, %ecx
    00000aa6: 	subl	%eax, %ecx
    00000aa8: 	subw	%dx, %ax
    00000aab: 	cmovsl	%ecx, %eax
    00000aae: 	cmpw	%ax, %bx
    00000ab1: 	cmovll	%eax, %ebx
.Ltmp407:
    00000ab4: 	movl	0x54(%rsp), %eax
    00000ab8: 	cmpl	%eax, 0xf0(%rsp)
    00000abf: 	jge	.Ltmp408 # Offset: 2751
    00000ac1: 	testw	%bx, %bx
    00000ac4: 	jle	.Ltmp409 # Offset: 2756
    00000aca: 	cmpl	$0x9, %ebp
    00000acd: 	jle	.Ltmp409 # Offset: 2765
.Ltmp408:
    00000ad3: 	addl	$0x1, 0x54(%rsp)
    00000ad8: 	movq	%r15, %rax
    00000adb: 	movl	0x54(%rsp), %edi
    00000adf: 	movq	%r11, %r15
    00000ae2: 	cmpl	0x84(%rsp), %edi
    00000ae9: 	je	.Ltmp409 # Offset: 2793
    00000aef: 	movq	%rax, %r11
    00000af2: 	jmp	.Ltmp410 # Offset: 2802
    00000af7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp395:
    00000b00: 	movq	0x58(%rsp), %rdi
    00000b05: 	subq	$0x2, %rax
    00000b09: 	addq	0x78(%rsp), %rbp
    00000b0e: 	leaq	-0xa(%r11,%r9), %r10
    00000b13: 	leaq	(%r11,%rax), %rcx
    00000b17: 	leaq	-0xa(%r11,%r8), %r12
    00000b1c: 	addq	%r15, %rax
    00000b1f: 	leaq	(%rdi,%rbp,2), %rbp
    00000b23: 	nopl	(%rax,%rax) # Size: 5
.Ltmp411:
    00000b28: 	movswl	0x2(%r10), %edx
    00000b2d: 	movswl	(%rcx), %esi
    00000b30: 	movswl	0x4(%rcx), %r8d
    00000b35: 	movswl	0x6(%r10), %r9d
    00000b3a: 	addl	%edx, %esi
    00000b3c: 	movswl	0x2(%rcx), %edi
    00000b40: 	movswl	0x4(%r10), %edx
    00000b45: 	addl	%r8d, %esi
    00000b48: 	addl	%r8d, %r9d
    00000b4b: 	movswl	0x8(%rcx), %r8d
    00000b50: 	addl	%edx, %edi
    00000b52: 	movswl	0x6(%rcx), %edx
    00000b56: 	addl	%r9d, %r8d
    00000b59: 	movswl	0x8(%r10), %r9d
    00000b5e: 	addl	%edx, %edi
    00000b60: 	addl	%edx, %r9d
    00000b63: 	movswl	0xa(%rcx), %edx
    00000b67: 	addl	%r9d, %edx
    00000b6a: 	movswl	0x2(%r12), %r9d
    00000b70: 	addl	%esi, %r9d
    00000b73: 	leal	0x5(%r9), %esi
    00000b77: 	addl	$0x2, %r9d
    00000b7b: 	cmovnsl	%r9d, %esi
    00000b7f: 	movswl	0x4(%r12), %r9d
    00000b85: 	addl	%edi, %r9d
    00000b88: 	sarl	$0x2, %esi
    00000b8b: 	leal	0x5(%r9), %edi
    00000b8f: 	addl	$0x2, %r9d
    00000b93: 	movzwl	%si, %esi
    00000b96: 	cmovnsl	%r9d, %edi
    00000b9a: 	movswl	0x6(%r12), %r9d
    00000ba0: 	addl	%r8d, %r9d
    00000ba3: 	sarl	$0x2, %edi
    00000ba6: 	leal	0x5(%r9), %r8d
    00000baa: 	addl	$0x2, %r9d
    00000bae: 	movzwl	%di, %edi
    00000bb1: 	cmovnsl	%r9d, %r8d
    00000bb5: 	movswl	0x8(%r12), %r9d
    00000bbb: 	addl	%edx, %r9d
    00000bbe: 	sarl	$0x2, %r8d
    00000bc2: 	leal	0x5(%r9), %edx
    00000bc6: 	addl	$0x2, %r9d
    00000bca: 	movzwl	%r8w, %r8d
    00000bce: 	cmovnsl	%r9d, %edx
    00000bd2: 	addq	$0x8, %r10
    00000bd6: 	addq	$0x8, %rcx
    00000bda: 	addq	$0x8, %r12
    00000bde: 	addq	$0x8, %rax
    00000be2: 	sarl	$0x2, %edx
    00000be5: 	movzwl	%dx, %edx
    00000be8: 	shlq	$0x10, %rdx
    00000bec: 	orq	%r8, %rdx
    00000bef: 	shlq	$0x10, %rdx
    00000bf3: 	orq	%rdi, %rdx
    00000bf6: 	shlq	$0x10, %rdx
    00000bfa: 	orq	%rsi, %rdx
    00000bfd: 	movq	%rdx, -0x6(%rax)
    00000c01: 	cmpq	%r10, %rbp
    00000c04: 	jne	.Ltmp411 # Offset: 3076
    00000c0a: 	jmp	.Ltmp412 # Offset: 3082
.Ltmp400:
    00000c0f: 	movl	0x54(%rsp), %eax
    00000c13: 	cmpl	%eax, 0xf0(%rsp)
    00000c1a: 	jl	.Ltmp413 # Offset: 3098
    00000c20: 	xorl	%ebp, %ebp
    00000c22: 	xorl	%ebx, %ebx
    00000c24: 	jmp	.Ltmp408 # Offset: 3108
.Ltmp405:
    00000c29: 	xorl	%ebx, %ebx
    00000c2b: 	xorl	%eax, %eax
    00000c2d: 	jmp	.Ltmp414 # Offset: 3117
.Ltmp401:
    00000c32: 	xorl	%ebp, %ebp
    00000c34: 	xorl	%edx, %edx
    00000c36: 	jmp	.Ltmp415 # Offset: 3126
.Ltmp409:
    00000c3b: 	movswl	%bx, %r12d
.Ltmp419:
    00000c3f: 	callq	clock@PLT # Offset: 3135
    00000c44: 	movl	0x8c(%rsp), %edi
    00000c4b: 	pxor	%xmm0, %xmm0
    00000c4f: 	movzwl	0x9e(%rsp), %r14d
    00000c58: 	movq	%rax, end_time(%rip)
    00000c5f: 	subq	start_time(%rip), %rax
    00000c66: 	cvtsi2sd	%rax, %xmm0
    00000c6b: 	movl	%edi, %eax
    00000c6d: 	divsd	DATAat0x49520(%rip), %xmm0
    00000c75: 	movq	%xmm0, %r13
    00000c7a: 	shrl	$0x1f, %eax
    00000c7d: 	addl	%edi, %eax
    00000c7f: 	movl	0x80(%rsp), %edi
    00000c86: 	sarl	%eax
    00000c88: 	movl	%edi, %edx
    00000c8a: 	imull	%edi, %eax
    00000c8d: 	shrl	$0x1f, %edx
    00000c90: 	addl	%edi, %edx
    00000c92: 	sarl	%edx
    00000c94: 	addl	%edx, %eax
    00000c96: 	cltq
    00000c98: 	subw	(%r15,%rax,2), %r14w
    00000c9d: 	movl	0x54(%rsp), %eax
    00000ca1: 	cmpl	%eax, iterations(%rip)
    00000ca7: 	jg	.Ltmp416 # Offset: 3239
    00000cad: 	cmpl	$0xa, %ebp
    00000cb0: 	jle	.Ltmp416 # Offset: 3248
    00000cb6: 	cmpw	$0x1, %bx
    00000cba: 	jle	.Ltmp416 # Offset: 3258
    00000cc0: 	movq	0x90(%rsp), %rax
    00000cc8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000ccf: 	movq	%r15, %rdi
    00000cd2: 	movq	0x8(%rax), %rdx
    00000cd6: 	movq	(%rax), %rsi
    00000cd9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3289
    00000cde: 	movl	$0x11, %edx
    00000ce3: 	leaq	DATAat0x49199(%rip), %rsi
    00000cea: 	movq	%rax, %rdi
    00000ced: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3309
.Ltmp418:
    00000cf2: 	movl	$0x4, %edx
    00000cf7: 	leaq	DATAat0x491b6(%rip), %rsi
    00000cfe: 	movq	%r15, %rdi
    00000d01: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3329
    00000d06: 	movl	0x54(%rsp), %esi
    00000d0a: 	movq	%r15, %rdi
    00000d0d: 	callq	_ZNSolsEi@PLT # Offset: 3341
    00000d12: 	movl	$0xb, %edx
    00000d17: 	leaq	DATAat0x491bb(%rip), %rsi
    00000d1e: 	movq	%rax, %rdi
    00000d21: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3361
    00000d26: 	movl	$0xa, %edx
    00000d2b: 	leaq	DATAat0x491c7(%rip), %rsi
    00000d32: 	movq	%r15, %rdi
    00000d35: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3381
    00000d3a: 	movl	%ebp, %esi
    00000d3c: 	movq	%r15, %rdi
    00000d3f: 	callq	_ZNSolsEi@PLT # Offset: 3391
    00000d44: 	movl	$0x7, %edx
    00000d49: 	leaq	DATAat0x491d2(%rip), %rsi
    00000d50: 	movq	%rax, %rbp
    00000d53: 	movq	%rax, %rdi
    00000d56: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3414
    00000d5b: 	movq	%rbp, %rdi
    00000d5e: 	movl	%r12d, %esi
    00000d61: 	callq	_ZNSolsEs@PLT # Offset: 3425
    00000d66: 	movl	$0x10, %edx
    00000d6b: 	leaq	DATAat0x491da(%rip), %rsi
    00000d72: 	movq	%rax, %rbp
    00000d75: 	movq	%rax, %rdi
    00000d78: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3448
    00000d7d: 	movq	%rbp, %rdi
    00000d80: 	movswl	%r14w, %esi
    00000d84: 	callq	_ZNSolsEs@PLT # Offset: 3460
    00000d89: 	movl	$0x8, %edx
    00000d8e: 	leaq	DATAat0x491eb(%rip), %rsi
    00000d95: 	movq	%rax, %rbp
    00000d98: 	movq	%rax, %rdi
    00000d9b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3483
    00000da0: 	movq	%r13, %xmm0
    00000da5: 	movq	%rbp, %rdi
    00000da8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3496
    00000dad: 	movl	$0x2, %edx
    00000db2: 	leaq	DATAat0x491f4(%rip), %rsi
    00000db9: 	movq	%rax, %rdi
    00000dbc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3516
    00000dc1: 	movl	0x98(%rsp), %eax
    00000dc8: 	movl	%eax, iterations(%rip)
    00000dce: 	movq	0xa8(%rsp), %rax
    00000dd6: 	subq	%fs:0x28, %rax
    00000ddf: 	jne	.Ltmp417 # Offset: 3551
    00000de1: 	addq	$0xb8, %rsp
    00000de8: 	popq	%rbx
    00000de9: 	popq	%rbp
    00000dea: 	popq	%r12
    00000dec: 	popq	%r13
    00000dee: 	popq	%r14
    00000df0: 	popq	%r15
    00000df2: 	retq # Offset: 3570
.Ltmp416:
    00000df3: 	movq	0x90(%rsp), %rax
    00000dfb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000e02: 	movq	%r15, %rdi
    00000e05: 	movq	0x8(%rax), %rdx
    00000e09: 	movq	(%rax), %rsi
    00000e0c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3596
    00000e11: 	movl	$0xa, %edx
    00000e16: 	leaq	DATAat0x491ab(%rip), %rsi
    00000e1d: 	movq	%rax, %rdi
    00000e20: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3616
    00000e25: 	jmp	.Ltmp418 # Offset: 3621
.Ltmp413:
    00000e2a: 	xorl	%r12d, %r12d
    00000e2d: 	xorl	%ebx, %ebx
    00000e2f: 	xorl	%ebp, %ebp
    00000e31: 	jmp	.Ltmp419 # Offset: 3633
.Ltmp417:
    00000e36: 	callq	__stack_chk_fail@PLT # Offset: 3638
    00000e3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp392:
    00000e40: 	movl	$0x0, 0x54(%rsp)
    00000e48: 	xorl	%r12d, %r12d
    00000e4b: 	xorl	%ebx, %ebx
    00000e4d: 	xorl	%ebp, %ebp
    00000e4f: 	jmp	.Ltmp419 # Offset: 3663
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi17jacobi2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi18jacobi2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x14610
  Size        : 0xde4
  MaxSize     : 0xdf0
  Offset      : 0x14610
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi18jacobi2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	imull	%ebp, %ebx
    0000001d: 	subq	$0xa8, %rsp
    00000024: 	movl	%edx, 0x7c(%rsp)
    00000028: 	movl	%ebp, %edx
    0000002a: 	movl	%ecx, 0x70(%rsp)
    0000002e: 	leaq	0x90(%rsp), %rcx
    00000036: 	movl	%r8d, 0x1c(%rsp)
    0000003b: 	movq	%r9, 0x80(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0x98(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	movq	DATAat0x49530(%rip), %rax
    0000005d: 	movq	%rax, 0x90(%rsp)
    00000065: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 101
    0000006a: 	movw	%ax, 0x8e(%rsp)
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp420 # Offset: 116
    00000076: 	movslq	%ebx, %rdx
    00000079: 	movq	%r14, %rsi
    0000007c: 	movq	%r15, %rdi
    0000007f: 	addq	%rdx, %rdx
    00000082: 	callq	memmove@PLT # Offset: 130
.Ltmp420:
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movl	$0x2710, iterations(%rip)
    00000097: 	movl	%eax, 0x88(%rsp)
    0000009e: 	callq	clock@PLT # Offset: 158
    000000a3: 	movq	%rax, start_time(%rip)
    000000aa: 	movl	iterations(%rip), %eax
    000000b0: 	movl	%eax, 0x74(%rsp)
    000000b4: 	testl	%eax, %eax
    000000b6: 	jle	.Ltmp421 # Offset: 182
    000000bc: 	movl	0x7c(%rsp), %eax
    000000c0: 	movl	0x1c(%rsp), %ecx
    000000c4: 	movslq	%ebx, %rbx
    000000c7: 	pxor	%xmm4, %xmm4
    000000cb: 	movq	%rbx, 0x38(%rsp)
    000000d0: 	movdqa	DATAat0x49440(%rip), %xmm7
    000000d8: 	subl	$0x1, %eax
    000000db: 	addl	%ecx, %ecx
    000000dd: 	movl	$0x0, 0x44(%rsp)
    000000e5: 	movdqa	DATAat0x49450(%rip), %xmm6
    000000ed: 	movl	%eax, 0x18(%rsp)
    000000f1: 	movl	0x70(%rsp), %eax
    000000f5: 	movl	%ecx, 0x78(%rsp)
    000000f9: 	leal	-0x4(%rax), %r13d
    000000fd: 	subl	$0x6, %eax
    00000100: 	movl	%eax, %ecx
    00000102: 	movl	%eax, 0x20(%rsp)
    00000106: 	shrl	$0x4, %eax
    00000109: 	leal	-0x1(%rax), %edx
    0000010c: 	shll	$0x4, %eax
    0000010f: 	shrl	$0x2, %ecx
    00000112: 	addl	$0x1, %eax
    00000115: 	addq	$0x1, %rdx
    00000119: 	movl	%eax, 0x40(%rsp)
    0000011d: 	cltq
    0000011f: 	shlq	$0x5, %rdx
    00000123: 	movq	%rax, 0x28(%rsp)
    00000128: 	movl	%ecx, %eax
    0000012a: 	shlq	$0x2, %rax
    0000012e: 	movq	%rdx, 0x30(%rsp)
    00000133: 	movq	%rax, 0x68(%rsp)
    00000138: 	leal	0x5(,%rcx,4), %eax
    0000013f: 	movl	%eax, 0x24(%rsp)
    00000143: 	leaq	-0x1(%rbx), %rax
    00000147: 	movq	%rax, 0x58(%rsp)
    0000014c: 	movq	%rbx, %rax
    0000014f: 	andq	$-0x8, %rbx
    00000153: 	shrq	$0x3, %rax
    00000157: 	movq	%rbx, 0x50(%rsp)
    0000015c: 	shlq	$0x4, %rax
    00000160: 	movq	%rax, 0x60(%rsp)
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp439:
    00000168: 	cmpl	$0x1, 0x18(%rsp)
    0000016d: 	jle	.Ltmp422 # Offset: 365
    00000173: 	movl	0x70(%rsp), %eax
    00000177: 	movl	$0x0, 0x10(%rsp)
    0000017f: 	pxor	%xmm5, %xmm5
    00000183: 	movl	$0x1, 0x14(%rsp)
    0000018b: 	movl	0x1c(%rsp), %ebx
    0000018f: 	subl	$0x1, %eax
    00000192: 	movl	%eax, 0xc(%rsp)
    00000196: 	movl	0x78(%rsp), %eax
    0000019a: 	movl	%eax, 0x8(%rsp)
    0000019e: 	leaq	0x8(%r14), %rax
    000001a2: 	movq	%rax, 0x48(%rsp)
    000001a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp428:
    000001b0: 	addl	$0x1, 0x14(%rsp)
    000001b5: 	movl	$0x1, %eax
    000001ba: 	cmpl	$0x1, %r13d
    000001be: 	jle	.Ltmp423 # Offset: 446
    000001c4: 	movslq	0x10(%rsp), %r9
    000001c9: 	movslq	%ebx, %rdx
    000001cc: 	movslq	0x8(%rsp), %r8
    000001d1: 	leaq	0x2(%rdx,%rdx), %rsi
    000001d6: 	leaq	(%r15,%rsi), %rax
    000001da: 	leaq	0xa(%r9,%r9), %rbp
    000001df: 	leaq	(%r14,%rbp), %r10
    000001e3: 	movq	%rax, %rdi
    000001e6: 	leaq	0x6(%r14,%rsi), %rcx
    000001eb: 	subq	%r10, %rdi
    000001ee: 	leaq	0xe(%r14,%rsi), %r12
    000001f3: 	leaq	0xa(%r8,%r8), %r11
    000001f8: 	addq	$0x6, %rdi
    000001fc: 	cmpq	$0x1c, %rdi
    00000200: 	movq	%rax, %rdi
    00000203: 	seta	%r10b
    00000207: 	subq	%rcx, %rdi
    0000020a: 	addq	$0x6, %rdi
    0000020e: 	cmpq	$0x1c, %rdi
    00000212: 	seta	%dil
    00000216: 	andl	%r10d, %edi
    00000219: 	cmpl	$0xf, 0x20(%rsp)
    0000021e: 	seta	%r10b
    00000222: 	andl	%r10d, %edi
    00000225: 	movq	%rax, %r10
    00000228: 	subq	%r12, %r10
    0000022b: 	addq	$0x6, %r10
    0000022f: 	cmpq	$0x18, %r10
    00000233: 	seta	%r10b
    00000237: 	testb	%r10b, %dil
    0000023a: 	je	.Ltmp424 # Offset: 570
    00000240: 	leaq	(%r14,%r11), %r10
    00000244: 	movq	%rax, %rdi
    00000247: 	subq	%r10, %rdi
    0000024a: 	addq	$0x6, %rdi
    0000024e: 	cmpq	$0x1c, %rdi
    00000252: 	jbe	.Ltmp424 # Offset: 594
    00000258: 	movq	0x30(%rsp), %r12
    0000025d: 	leaq	-0x8(%r14,%rbp), %r10
    00000262: 	leaq	-0x2(%r14,%rsi), %rdi
    00000267: 	leaq	0x4(%r15,%rsi), %rbp
    0000026c: 	leaq	-0x8(%r14,%r11), %r11
    00000271: 	xorl	%esi, %esi
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp425:
    00000278: 	movdqu	(%r10,%rsi), %xmm2
    0000027e: 	movdqu	(%rdi,%rsi), %xmm9
    00000284: 	movdqa	%xmm4, %xmm10
    00000289: 	movdqa	%xmm4, %xmm8
    0000028e: 	movdqu	0x10(%r10,%rsi), %xmm0
    00000295: 	movdqu	(%rcx,%rsi), %xmm1
    0000029a: 	movdqa	%xmm4, %xmm14
    0000029f: 	movdqa	%xmm2, %xmm12
    000002a4: 	movdqa	%xmm9, %xmm3
    000002a9: 	shufps	$0x88, %xmm0, %xmm12
    000002ae: 	shufps	$0xdd, %xmm0, %xmm2
    000002b2: 	movdqu	0x10(%rdi,%rsi), %xmm0
    000002b8: 	pcmpgtw	%xmm2, %xmm10
    000002bd: 	pcmpgtw	%xmm12, %xmm14
    000002c2: 	movdqa	%xmm12, %xmm15
    000002c7: 	shufps	$0x88, %xmm0, %xmm3
    000002cb: 	shufps	$0xdd, %xmm0, %xmm9
    000002d0: 	movdqa	%xmm4, %xmm0
    000002d4: 	movdqa	%xmm9, %xmm11
    000002d9: 	pcmpgtw	%xmm9, %xmm0
    000002de: 	punpcklwd	%xmm14, %xmm15
    000002e3: 	punpckhwd	%xmm14, %xmm12
    000002e8: 	punpcklwd	%xmm0, %xmm11
    000002ed: 	punpckhwd	%xmm0, %xmm9
    000002f2: 	movdqu	0x10(%rcx,%rsi), %xmm0
    000002f8: 	shufps	$0x88, %xmm0, %xmm1
    000002fc: 	pcmpgtw	%xmm1, %xmm8
    00000301: 	movdqa	%xmm2, %xmm0
    00000305: 	movdqa	%xmm1, %xmm13
    0000030a: 	punpcklwd	%xmm10, %xmm0
    0000030f: 	punpckhwd	%xmm10, %xmm2
    00000314: 	paddd	%xmm11, %xmm0
    00000319: 	paddd	%xmm9, %xmm2
    0000031e: 	punpcklwd	%xmm8, %xmm13
    00000323: 	punpckhwd	%xmm8, %xmm1
    00000328: 	movdqu	(%r11,%rsi), %xmm8
    0000032e: 	paddd	%xmm13, %xmm0
    00000333: 	movdqa	%xmm4, %xmm13
    00000338: 	paddd	%xmm1, %xmm2
    0000033c: 	movdqu	0x10(%r11,%rsi), %xmm1
    00000343: 	pcmpgtw	%xmm3, %xmm13
    00000348: 	movdqa	%xmm8, %xmm10
    0000034d: 	shufps	$0x88, %xmm1, %xmm10
    00000352: 	movdqa	%xmm3, %xmm1
    00000356: 	punpcklwd	%xmm13, %xmm1
    0000035b: 	punpckhwd	%xmm13, %xmm3
    00000360: 	paddd	%xmm15, %xmm1
    00000365: 	paddd	%xmm12, %xmm3
    0000036a: 	movdqa	%xmm10, %xmm15
    0000036f: 	paddd	%xmm11, %xmm1
    00000374: 	movdqa	%xmm4, %xmm11
    00000379: 	paddd	%xmm9, %xmm3
    0000037e: 	pcmpgtw	%xmm10, %xmm11
    00000383: 	movdqa	%xmm5, %xmm9
    00000388: 	punpckhwd	%xmm11, %xmm10
    0000038d: 	punpcklwd	%xmm11, %xmm15
    00000392: 	paddd	%xmm10, %xmm3
    00000397: 	paddd	%xmm15, %xmm1
    0000039c: 	movdqa	%xmm5, %xmm10
    000003a1: 	paddd	%xmm7, %xmm1
    000003a5: 	paddd	%xmm7, %xmm3
    000003a9: 	pcmpgtd	%xmm1, %xmm10
    000003ae: 	pcmpgtd	%xmm3, %xmm9
    000003b3: 	pand	%xmm6, %xmm10
    000003b8: 	pand	%xmm6, %xmm9
    000003bd: 	paddd	%xmm9, %xmm3
    000003c2: 	paddd	%xmm10, %xmm1
    000003c7: 	psrad	$0x2, %xmm3
    000003cc: 	psrad	$0x2, %xmm1
    000003d1: 	movdqa	%xmm1, %xmm9
    000003d6: 	punpcklwd	%xmm3, %xmm1
    000003da: 	punpckhwd	%xmm3, %xmm9
    000003df: 	movdqa	%xmm1, %xmm3
    000003e3: 	punpckhwd	%xmm9, %xmm3
    000003e8: 	punpcklwd	%xmm9, %xmm1
    000003ed: 	punpcklwd	%xmm3, %xmm1
    000003f1: 	movdqu	0x10(%r11,%rsi), %xmm3
    000003f8: 	movd	%xmm1, (%rax,%rsi)
    000003fd: 	shufps	$0xdd, %xmm3, %xmm8
    00000402: 	movdqa	%xmm4, %xmm3
    00000406: 	movdqa	%xmm8, %xmm9
    0000040b: 	pcmpgtw	%xmm8, %xmm3
    00000410: 	punpckhwd	%xmm3, %xmm8
    00000415: 	punpcklwd	%xmm3, %xmm9
    0000041a: 	movdqa	%xmm5, %xmm3
    0000041e: 	paddd	%xmm8, %xmm2
    00000423: 	paddd	%xmm9, %xmm0
    00000428: 	movdqa	%xmm5, %xmm8
    0000042d: 	paddd	%xmm7, %xmm0
    00000431: 	paddd	%xmm7, %xmm2
    00000435: 	pcmpgtd	%xmm0, %xmm8
    0000043a: 	pcmpgtd	%xmm2, %xmm3
    0000043e: 	pand	%xmm6, %xmm8
    00000443: 	pand	%xmm6, %xmm3
    00000447: 	paddd	%xmm3, %xmm2
    0000044b: 	paddd	%xmm8, %xmm0
    00000450: 	psrad	$0x2, %xmm2
    00000455: 	psrad	$0x2, %xmm0
    0000045a: 	movdqa	%xmm0, %xmm3
    0000045e: 	punpcklwd	%xmm2, %xmm0
    00000462: 	punpckhwd	%xmm2, %xmm3
    00000466: 	movdqa	%xmm0, %xmm2
    0000046a: 	punpckhwd	%xmm3, %xmm2
    0000046e: 	punpcklwd	%xmm3, %xmm0
    00000472: 	punpcklwd	%xmm2, %xmm0
    00000476: 	pshufd	$0x55, %xmm1, %xmm2
    0000047b: 	movd	%xmm2, 0x8(%rax,%rsi)
    00000481: 	movdqa	%xmm1, %xmm2
    00000485: 	punpckhdq	%xmm1, %xmm2
    00000489: 	pshufd	$0xff, %xmm1, %xmm1
    0000048e: 	movd	%xmm1, 0x18(%rax,%rsi)
    00000494: 	pshufd	$0x55, %xmm0, %xmm1
    00000499: 	movd	%xmm2, 0x10(%rax,%rsi)
    0000049f: 	movd	%xmm1, 0x8(%rbp,%rsi)
    000004a5: 	movdqa	%xmm0, %xmm1
    000004a9: 	movd	%xmm0, (%rbp,%rsi)
    000004af: 	punpckhdq	%xmm0, %xmm1
    000004b3: 	pshufd	$0xff, %xmm0, %xmm0
    000004b8: 	movd	%xmm1, 0x10(%rbp,%rsi)
    000004be: 	movd	%xmm0, 0x18(%rbp,%rsi)
    000004c4: 	addq	$0x20, %rsi
    000004c8: 	cmpq	%rsi, %r12
    000004cb: 	jne	.Ltmp425 # Offset: 1227
    000004d1: 	movq	0x28(%rsp), %rcx
    000004d6: 	movl	0x40(%rsp), %r11d
    000004db: 	addq	%rcx, %rdx
    000004de: 	addq	%rcx, %r9
    000004e1: 	addq	%rcx, %r8
    000004e4: 	addq	%rdx, %rdx
    000004e7: 	leaq	(%r14,%r9,2), %rsi
    000004eb: 	leaq	(%r14,%r8,2), %rcx
    000004ef: 	leaq	(%r14,%rdx), %rax
    000004f3: 	addq	%r15, %rdx
    000004f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp426:
    00000500: 	movswl	0x2(%rsi), %r9d
    00000505: 	movswl	(%rax), %edi
    00000508: 	addl	$0x4, %r11d
    0000050c: 	movswl	0x4(%rax), %r8d
    00000511: 	movswl	0x2(%rax), %ebp
    00000515: 	addl	%r9d, %edi
    00000518: 	movswl	0x2(%rcx), %r9d
    0000051d: 	movswl	(%rsi), %r12d
    00000521: 	addl	%r8d, %edi
    00000524: 	addl	%r9d, %edi
    00000527: 	movswl	0x6(%rax), %r9d
    0000052c: 	leal	0x5(%rdi), %r10d
    00000530: 	addl	$0x2, %edi
    00000533: 	cmovnsl	%edi, %r10d
    00000537: 	movswl	0x4(%rsi), %edi
    0000053b: 	addl	%ebp, %edi
    0000053d: 	sarl	$0x2, %r10d
    00000541: 	addl	%r9d, %edi
    00000544: 	movswl	0x4(%rcx), %r9d
    00000549: 	addl	%r9d, %edi
    0000054c: 	leal	0x5(%rdi), %r9d
    00000550: 	addl	$0x2, %edi
    00000553: 	cmovnsl	%edi, %r9d
    00000557: 	movswl	0x6(%rsi), %edi
    0000055b: 	addl	%r8d, %edi
    0000055e: 	movswl	0x8(%rax), %r8d
    00000563: 	sarl	$0x2, %r9d
    00000567: 	addl	%r8d, %edi
    0000056a: 	movswl	0x6(%rcx), %r8d
    0000056f: 	addl	%r8d, %edi
    00000572: 	leal	0x5(%rdi), %r8d
    00000576: 	addl	$0x2, %edi
    00000579: 	cmovnsl	%edi, %r8d
    0000057d: 	movswl	-0x2(%rax), %edi
    00000581: 	addl	%r12d, %edi
    00000584: 	sarl	$0x2, %r8d
    00000588: 	addl	%ebp, %edi
    0000058a: 	movswl	(%rcx), %ebp
    0000058d: 	movw	%r10w, 0x2(%rdx)
    00000592: 	movw	%r9w, 0x4(%rdx)
    00000597: 	addl	%ebp, %edi
    00000599: 	movw	%r8w, 0x6(%rdx)
    0000059e: 	leal	0x5(%rdi), %ebp
    000005a1: 	addl	$0x2, %edi
    000005a4: 	cmovsl	%ebp, %edi
    000005a7: 	addq	$0x8, %rsi
    000005ab: 	addq	$0x8, %rax
    000005af: 	addq	$0x8, %rcx
    000005b3: 	addq	$0x8, %rdx
    000005b7: 	sarl	$0x2, %edi
    000005ba: 	movw	%di, -0x8(%rdx)
    000005be: 	cmpl	%r13d, %r11d
    000005c1: 	jl	.Ltmp426 # Offset: 1473
.Ltmp441:
    000005c7: 	movl	0x24(%rsp), %eax
.Ltmp423:
    000005cb: 	cmpl	0xc(%rsp), %eax
    000005cf: 	jge	.Ltmp427 # Offset: 1487
    000005d5: 	movl	0x10(%rsp), %r12d
    000005da: 	leal	-0x1(%rax,%rbx), %edi
    000005de: 	movslq	%edi, %rdi
    000005e1: 	leal	(%rax,%r12), %edx
    000005e5: 	movswl	(%r14,%rdi,2), %r8d
    000005ea: 	movslq	%edx, %rdx
    000005ed: 	movswl	(%r14,%rdx,2), %ecx
    000005f2: 	leal	0x1(%rax), %edx
    000005f5: 	leal	(%rbx,%rdx), %esi
    000005f8: 	movslq	%esi, %rsi
    000005fb: 	leaq	(%r14,%rsi,2), %r9
    000005ff: 	movswl	(%r9), %edi
    00000603: 	addl	%edi, %r8d
    00000606: 	leal	(%rax,%rbx), %edi
    00000609: 	addl	%ecx, %r8d
    0000060c: 	movl	0x8(%rsp), %ecx
    00000610: 	movslq	%edi, %rdi
    00000613: 	addl	%eax, %ecx
    00000615: 	movslq	%ecx, %rcx
    00000618: 	movswl	(%r14,%rcx,2), %ecx
    0000061d: 	addl	%r8d, %ecx
    00000620: 	leal	0x5(%rcx), %r8d
    00000624: 	addl	$0x2, %ecx
    00000627: 	cmovnsl	%ecx, %r8d
    0000062b: 	sarl	$0x2, %r8d
    0000062f: 	movw	%r8w, (%r15,%rdi,2)
    00000634: 	cmpl	0xc(%rsp), %edx
    00000638: 	jge	.Ltmp427 # Offset: 1592
    0000063e: 	leal	(%r12,%rdx), %ecx
    00000642: 	movswl	(%r14,%rdi,2), %edi
    00000647: 	addl	0x8(%rsp), %edx
    0000064b: 	movslq	%ecx, %rcx
    0000064e: 	movslq	%edx, %rdx
    00000651: 	movswl	(%r14,%rcx,2), %r11d
    00000656: 	leal	0x2(%rax), %ecx
    00000659: 	movswl	(%r14,%rdx,2), %edx
    0000065e: 	leal	(%rbx,%rcx), %r8d
    00000662: 	movslq	%r8d, %r8
    00000665: 	leaq	(%r14,%r8,2), %r10
    00000669: 	movswl	(%r10), %ebp
    0000066d: 	addl	%ebp, %edi
    0000066f: 	addl	%r11d, %edi
    00000672: 	addl	%edi, %edx
    00000674: 	leal	0x5(%rdx), %edi
    00000677: 	addl	$0x2, %edx
    0000067a: 	cmovnsl	%edx, %edi
    0000067d: 	sarl	$0x2, %edi
    00000680: 	movw	%di, (%r15,%rsi,2)
    00000685: 	cmpl	0xc(%rsp), %ecx
    00000689: 	jge	.Ltmp427 # Offset: 1673
    0000068f: 	leal	(%r12,%rcx), %edx
    00000693: 	movswl	(%r9), %r9d
    00000697: 	movslq	%edx, %rdx
    0000069a: 	movswl	(%r14,%rdx,2), %r11d
    0000069f: 	leal	0x3(%rax), %edx
    000006a2: 	leal	(%rbx,%rdx), %edi
    000006a5: 	movslq	%edi, %rdi
    000006a8: 	movswl	(%r14,%rdi,2), %esi
    000006ad: 	addl	%r9d, %esi
    000006b0: 	addl	%r11d, %esi
    000006b3: 	movl	0x8(%rsp), %r11d
    000006b8: 	addl	%r11d, %ecx
    000006bb: 	movslq	%ecx, %rcx
    000006be: 	movswl	(%r14,%rcx,2), %ecx
    000006c3: 	addl	%esi, %ecx
    000006c5: 	leal	0x5(%rcx), %esi
    000006c8: 	addl	$0x2, %ecx
    000006cb: 	cmovnsl	%ecx, %esi
    000006ce: 	sarl	$0x2, %esi
    000006d1: 	movw	%si, (%r15,%r8,2)
    000006d6: 	cmpl	%edx, 0xc(%rsp)
    000006da: 	jle	.Ltmp427 # Offset: 1754
    000006dc: 	leal	0x4(%rax,%rbx), %eax
    000006e0: 	leal	(%r12,%rdx), %ecx
    000006e4: 	movswl	(%r10), %esi
    000006e8: 	addl	%r11d, %edx
    000006eb: 	cltq
    000006ed: 	movslq	%ecx, %rcx
    000006f0: 	movslq	%edx, %rdx
    000006f3: 	movswl	(%r14,%rax,2), %eax
    000006f8: 	movswl	(%r14,%rcx,2), %ecx
    000006fd: 	movswl	(%r14,%rdx,2), %edx
    00000702: 	addl	%esi, %eax
    00000704: 	addl	%ecx, %eax
    00000706: 	addl	%edx, %eax
    00000708: 	leal	0x5(%rax), %edx
    0000070b: 	addl	$0x2, %eax
    0000070e: 	cmovnsl	%eax, %edx
    00000711: 	sarl	$0x2, %edx
    00000714: 	movw	%dx, (%r15,%rdi,2)
.Ltmp427:
    00000719: 	movl	0x1c(%rsp), %eax
    0000071d: 	movl	0x14(%rsp), %ecx
    00000721: 	addl	%eax, 0x10(%rsp)
    00000725: 	addl	%eax, 0x8(%rsp)
    00000729: 	addl	%eax, %ebx
    0000072b: 	cmpl	%ecx, 0x18(%rsp)
    0000072f: 	jne	.Ltmp428 # Offset: 1839
.Ltmp422:
    00000735: 	cmpq	$0x0, 0x38(%rsp)
    0000073b: 	je	.Ltmp429 # Offset: 1851
    00000741: 	cmpq	$0x6, 0x58(%rsp)
    00000747: 	jbe	.Ltmp430 # Offset: 1863
    0000074d: 	movq	0x60(%rsp), %rdx
    00000752: 	xorl	%eax, %eax
    00000754: 	pxor	%xmm1, %xmm1
    00000758: 	nopl	(%rax,%rax) # Size: 8
.Ltmp431:
    00000760: 	movdqu	(%r15,%rax), %xmm5
    00000766: 	movdqu	(%r14,%rax), %xmm3
    0000076c: 	movdqa	%xmm4, %xmm0
    00000770: 	psubw	%xmm5, %xmm3
    00000774: 	movdqa	%xmm5, %xmm2
    00000778: 	movdqu	(%r14,%rax), %xmm5
    0000077e: 	addq	$0x10, %rax
    00000782: 	pcmpgtw	%xmm3, %xmm0
    00000786: 	psubw	%xmm5, %xmm2
    0000078a: 	pand	%xmm0, %xmm2
    0000078e: 	pandn	%xmm3, %xmm0
    00000792: 	movdqa	%xmm4, %xmm3
    00000796: 	por	%xmm2, %xmm0
    0000079a: 	pcmpgtw	%xmm0, %xmm3
    0000079e: 	movdqa	%xmm0, %xmm2
    000007a2: 	punpcklwd	%xmm3, %xmm2
    000007a6: 	punpckhwd	%xmm3, %xmm0
    000007aa: 	paddd	%xmm2, %xmm1
    000007ae: 	paddd	%xmm0, %xmm1
    000007b2: 	cmpq	%rax, %rdx
    000007b5: 	jne	.Ltmp431 # Offset: 1973
    000007b7: 	movdqa	%xmm1, %xmm0
    000007bb: 	movq	0x50(%rsp), %rax
    000007c0: 	psrldq	$0x8, %xmm0
    000007c5: 	paddd	%xmm0, %xmm1
    000007c9: 	movdqa	%xmm1, %xmm0
    000007cd: 	psrldq	$0x4, %xmm0
    000007d2: 	paddd	%xmm0, %xmm1
    000007d6: 	movd	%xmm1, %ebp
    000007da: 	cmpq	%rax, 0x38(%rsp)
    000007df: 	je	.Ltmp432 # Offset: 2015
    000007e5: 	movq	%rax, %rdx
.Ltmp444:
    000007e8: 	movzwl	(%r15,%rdx,2), %esi
    000007ed: 	movzwl	(%r14,%rdx,2), %eax
    000007f2: 	leaq	(%rdx,%rdx), %rcx
    000007f6: 	movq	0x38(%rsp), %rbx
    000007fb: 	movl	%esi, %edi
    000007fd: 	subl	%eax, %edi
    000007ff: 	subw	%si, %ax
    00000802: 	cmovsl	%edi, %eax
    00000805: 	cwtl
    00000806: 	addl	%eax, %ebp
    00000808: 	leaq	0x1(%rdx), %rax
    0000080c: 	cmpq	%rax, %rbx
    0000080f: 	jbe	.Ltmp433 # Offset: 2063
    00000815: 	movzwl	0x2(%r15,%rcx), %esi
    0000081b: 	movzwl	0x2(%r14,%rcx), %eax
    00000821: 	movl	%esi, %edi
    00000823: 	subl	%eax, %edi
    00000825: 	subw	%si, %ax
    00000828: 	cmovsl	%edi, %eax
    0000082b: 	cwtl
    0000082c: 	addl	%eax, %ebp
    0000082e: 	leaq	0x2(%rdx), %rax
    00000832: 	cmpq	%rax, %rbx
    00000835: 	jbe	.Ltmp433 # Offset: 2101
    0000083b: 	movzwl	0x4(%r15,%rcx), %esi
    00000841: 	movzwl	0x4(%r14,%rcx), %eax
    00000847: 	movl	%esi, %edi
    00000849: 	subl	%eax, %edi
    0000084b: 	subw	%si, %ax
    0000084e: 	cmovsl	%edi, %eax
    00000851: 	cwtl
    00000852: 	addl	%eax, %ebp
    00000854: 	leaq	0x3(%rdx), %rax
    00000858: 	cmpq	%rax, %rbx
    0000085b: 	jbe	.Ltmp433 # Offset: 2139
    0000085d: 	movzwl	0x6(%r15,%rcx), %esi
    00000863: 	movzwl	0x6(%r14,%rcx), %eax
    00000869: 	movl	%esi, %edi
    0000086b: 	subl	%eax, %edi
    0000086d: 	subw	%si, %ax
    00000870: 	cmovsl	%edi, %eax
    00000873: 	cwtl
    00000874: 	addl	%eax, %ebp
    00000876: 	leaq	0x4(%rdx), %rax
    0000087a: 	cmpq	%rax, %rbx
    0000087d: 	jbe	.Ltmp433 # Offset: 2173
    0000087f: 	movzwl	0x8(%r15,%rcx), %esi
    00000885: 	movzwl	0x8(%r14,%rcx), %eax
    0000088b: 	movl	%esi, %edi
    0000088d: 	subl	%eax, %edi
    0000088f: 	subw	%si, %ax
    00000892: 	cmovsl	%edi, %eax
    00000895: 	cwtl
    00000896: 	addl	%eax, %ebp
    00000898: 	leaq	0x5(%rdx), %rax
    0000089c: 	cmpq	%rax, %rbx
    0000089f: 	jbe	.Ltmp433 # Offset: 2207
    000008a1: 	movzwl	0xa(%r15,%rcx), %esi
    000008a7: 	movzwl	0xa(%r14,%rcx), %eax
    000008ad: 	movl	%esi, %edi
    000008af: 	subl	%eax, %edi
    000008b1: 	subw	%si, %ax
    000008b4: 	cmovsl	%edi, %eax
    000008b7: 	addq	$0x6, %rdx
    000008bb: 	cwtl
    000008bc: 	addl	%eax, %ebp
    000008be: 	cmpq	%rdx, %rbx
    000008c1: 	jbe	.Ltmp433 # Offset: 2241
    000008c3: 	movzwl	0xc(%r15,%rcx), %edx
    000008c9: 	movzwl	0xc(%r14,%rcx), %eax
    000008cf: 	movl	%edx, %ecx
    000008d1: 	subl	%eax, %ecx
    000008d3: 	subw	%dx, %ax
    000008d6: 	cmovsl	%ecx, %eax
    000008d9: 	cwtl
    000008da: 	addl	%eax, %ebp
.Ltmp433:
    000008dc: 	cmpq	$0x6, 0x58(%rsp)
    000008e2: 	jbe	.Ltmp434 # Offset: 2274
.Ltmp432:
    000008e8: 	movq	0x60(%rsp), %rdx
    000008ed: 	xorl	%eax, %eax
    000008ef: 	pxor	%xmm2, %xmm2
    000008f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp435:
    000008f8: 	movdqu	(%r15,%rax), %xmm5
    000008fe: 	movdqu	(%r14,%rax), %xmm3
    00000904: 	movdqa	%xmm4, %xmm0
    00000908: 	psubw	%xmm5, %xmm3
    0000090c: 	movdqa	%xmm5, %xmm1
    00000910: 	movdqu	(%r14,%rax), %xmm5
    00000916: 	addq	$0x10, %rax
    0000091a: 	pcmpgtw	%xmm3, %xmm0
    0000091e: 	psubw	%xmm5, %xmm1
    00000922: 	pand	%xmm0, %xmm1
    00000926: 	pandn	%xmm3, %xmm0
    0000092a: 	por	%xmm1, %xmm0
    0000092e: 	pmaxsw	%xmm0, %xmm2
    00000932: 	cmpq	%rax, %rdx
    00000935: 	jne	.Ltmp435 # Offset: 2357
    00000937: 	movdqa	%xmm2, %xmm0
    0000093b: 	movq	0x50(%rsp), %rax
    00000940: 	psrldq	$0x8, %xmm0
    00000945: 	pmaxsw	%xmm0, %xmm2
    00000949: 	movdqa	%xmm2, %xmm0
    0000094d: 	psrldq	$0x4, %xmm0
    00000952: 	pmaxsw	%xmm0, %xmm2
    00000956: 	movdqa	%xmm2, %xmm0
    0000095a: 	psrldq	$0x2, %xmm0
    0000095f: 	pmaxsw	%xmm0, %xmm2
    00000963: 	pextrw	$0x0, %xmm2, %ebx
    00000968: 	cmpq	%rax, 0x38(%rsp)
    0000096d: 	je	.Ltmp436 # Offset: 2413
.Ltmp443:
    00000973: 	movzwl	(%r15,%rax,2), %esi
    00000978: 	movzwl	(%r14,%rax,2), %ecx
    0000097d: 	leaq	(%rax,%rax), %rdx
    00000981: 	movq	0x38(%rsp), %r11
    00000986: 	movl	%esi, %edi
    00000988: 	subl	%ecx, %edi
    0000098a: 	subw	%si, %cx
    0000098d: 	cmovsl	%edi, %ecx
    00000990: 	cmpw	%cx, %bx
    00000993: 	cmovll	%ecx, %ebx
    00000996: 	leaq	0x1(%rax), %rcx
    0000099a: 	cmpq	%rcx, %r11
    0000099d: 	jbe	.Ltmp436 # Offset: 2461
    000009a3: 	movzwl	0x2(%r15,%rdx), %esi
    000009a9: 	movzwl	0x2(%r14,%rdx), %ecx
    000009af: 	movl	%esi, %edi
    000009b1: 	subl	%ecx, %edi
    000009b3: 	subw	%si, %cx
    000009b6: 	cmovsl	%edi, %ecx
    000009b9: 	cmpw	%cx, %bx
    000009bc: 	cmovll	%ecx, %ebx
    000009bf: 	leaq	0x2(%rax), %rcx
    000009c3: 	cmpq	%rcx, %r11
    000009c6: 	jbe	.Ltmp436 # Offset: 2502
    000009cc: 	movzwl	0x4(%r15,%rdx), %esi
    000009d2: 	movzwl	0x4(%r14,%rdx), %ecx
    000009d8: 	movl	%esi, %edi
    000009da: 	subl	%ecx, %edi
    000009dc: 	subw	%si, %cx
    000009df: 	cmovsl	%edi, %ecx
    000009e2: 	cmpw	%cx, %bx
    000009e5: 	cmovll	%ecx, %ebx
    000009e8: 	leaq	0x3(%rax), %rcx
    000009ec: 	cmpq	%rcx, %r11
    000009ef: 	jbe	.Ltmp436 # Offset: 2543
    000009f5: 	movzwl	0x6(%r15,%rdx), %esi
    000009fb: 	movzwl	0x6(%r14,%rdx), %ecx
    00000a01: 	movl	%esi, %edi
    00000a03: 	subl	%ecx, %edi
    00000a05: 	subw	%si, %cx
    00000a08: 	cmovsl	%edi, %ecx
    00000a0b: 	cmpw	%cx, %bx
    00000a0e: 	cmovll	%ecx, %ebx
    00000a11: 	leaq	0x4(%rax), %rcx
    00000a15: 	cmpq	%rcx, %r11
    00000a18: 	jbe	.Ltmp436 # Offset: 2584
    00000a1a: 	movzwl	0x8(%r15,%rdx), %esi
    00000a20: 	movzwl	0x8(%r14,%rdx), %ecx
    00000a26: 	movl	%esi, %edi
    00000a28: 	subl	%ecx, %edi
    00000a2a: 	subw	%si, %cx
    00000a2d: 	cmovsl	%edi, %ecx
    00000a30: 	cmpw	%cx, %bx
    00000a33: 	cmovll	%ecx, %ebx
    00000a36: 	leaq	0x5(%rax), %rcx
    00000a3a: 	cmpq	%rcx, %r11
    00000a3d: 	jbe	.Ltmp436 # Offset: 2621
    00000a3f: 	movzwl	0xa(%r15,%rdx), %esi
    00000a45: 	movzwl	0xa(%r14,%rdx), %ecx
    00000a4b: 	movl	%esi, %edi
    00000a4d: 	subl	%ecx, %edi
    00000a4f: 	subw	%si, %cx
    00000a52: 	cmovsl	%edi, %ecx
    00000a55: 	cmpw	%cx, %bx
    00000a58: 	cmovll	%ecx, %ebx
    00000a5b: 	addq	$0x6, %rax
    00000a5f: 	cmpq	%rax, %r11
    00000a62: 	jbe	.Ltmp436 # Offset: 2658
    00000a64: 	movzwl	0xc(%r14,%rdx), %eax
    00000a6a: 	movzwl	0xc(%r15,%rdx), %edx
    00000a70: 	movl	%edx, %ecx
    00000a72: 	subl	%eax, %ecx
    00000a74: 	subw	%dx, %ax
    00000a77: 	cmovsl	%ecx, %eax
    00000a7a: 	cmpw	%ax, %bx
    00000a7d: 	cmovll	%eax, %ebx
.Ltmp436:
    00000a80: 	movl	0x44(%rsp), %eax
    00000a84: 	cmpl	%eax, 0xe0(%rsp)
    00000a8b: 	jge	.Ltmp437 # Offset: 2699
    00000a8d: 	testw	%bx, %bx
    00000a90: 	jle	.Ltmp438 # Offset: 2704
    00000a96: 	cmpl	$0x9, %ebp
    00000a99: 	jle	.Ltmp438 # Offset: 2713
.Ltmp437:
    00000a9f: 	addl	$0x1, 0x44(%rsp)
    00000aa4: 	movq	%r15, %rax
    00000aa7: 	movl	0x44(%rsp), %ecx
    00000aab: 	movq	%r14, %r15
    00000aae: 	cmpl	0x74(%rsp), %ecx
    00000ab2: 	je	.Ltmp438 # Offset: 2738
    00000ab8: 	movq	%rax, %r14
    00000abb: 	jmp	.Ltmp439 # Offset: 2747
.Ltmp424:
    00000ac0: 	movq	0x48(%rsp), %rcx
    00000ac5: 	leaq	-0x2(%rsi), %rax
    00000ac9: 	addq	0x68(%rsp), %rdx
    00000ace: 	leaq	-0xa(%r14,%rbp), %r10
    00000ad3: 	leaq	(%r14,%rax), %r8
    00000ad7: 	leaq	-0xa(%r14,%r11), %r9
    00000adc: 	addq	%r15, %rax
    00000adf: 	leaq	(%rcx,%rdx,2), %r12
    00000ae3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp440:
    00000ae8: 	movswl	0x4(%r10), %esi
    00000aed: 	movswl	0x2(%r8), %edx
    00000af2: 	movswl	0x6(%r8), %ecx
    00000af7: 	movswl	0x4(%r8), %r11d
    00000afc: 	addl	%esi, %edx
    00000afe: 	movswl	0x4(%r9), %esi
    00000b03: 	movswl	0x2(%r10), %ebp
    00000b08: 	addl	%ecx, %edx
    00000b0a: 	addl	%esi, %edx
    00000b0c: 	movswl	0x8(%r8), %esi
    00000b11: 	leal	0x5(%rdx), %edi
    00000b14: 	addl	$0x2, %edx
    00000b17: 	cmovnsl	%edx, %edi
    00000b1a: 	movswl	0x6(%r10), %edx
    00000b1f: 	addl	%r11d, %edx
    00000b22: 	sarl	$0x2, %edi
    00000b25: 	addl	%esi, %edx
    00000b27: 	movswl	0x6(%r9), %esi
    00000b2c: 	addl	%esi, %edx
    00000b2e: 	leal	0x5(%rdx), %esi
    00000b31: 	addl	$0x2, %edx
    00000b34: 	cmovnsl	%edx, %esi
    00000b37: 	movswl	0x8(%r10), %edx
    00000b3c: 	addl	%ecx, %edx
    00000b3e: 	movswl	0xa(%r8), %ecx
    00000b43: 	sarl	$0x2, %esi
    00000b46: 	addl	%ecx, %edx
    00000b48: 	movswl	0x8(%r9), %ecx
    00000b4d: 	addl	%ecx, %edx
    00000b4f: 	leal	0x5(%rdx), %ecx
    00000b52: 	addl	$0x2, %edx
    00000b55: 	cmovnsl	%edx, %ecx
    00000b58: 	movswl	(%r8), %edx
    00000b5c: 	addl	%ebp, %edx
    00000b5e: 	sarl	$0x2, %ecx
    00000b61: 	addl	%r11d, %edx
    00000b64: 	movswl	0x2(%r9), %r11d
    00000b69: 	movw	%di, 0x4(%rax)
    00000b6d: 	movw	%si, 0x6(%rax)
    00000b71: 	addl	%r11d, %edx
    00000b74: 	movw	%cx, 0x8(%rax)
    00000b78: 	leal	0x5(%rdx), %r11d
    00000b7c: 	addl	$0x2, %edx
    00000b7f: 	cmovsl	%r11d, %edx
    00000b83: 	addq	$0x8, %r8
    00000b87: 	addq	$0x8, %r10
    00000b8b: 	addq	$0x8, %r9
    00000b8f: 	addq	$0x8, %rax
    00000b93: 	sarl	$0x2, %edx
    00000b96: 	movw	%dx, -0x6(%rax)
    00000b9a: 	cmpq	%r8, %r12
    00000b9d: 	jne	.Ltmp440 # Offset: 2973
    00000ba3: 	jmp	.Ltmp441 # Offset: 2979
.Ltmp429:
    00000ba8: 	movl	0x44(%rsp), %eax
    00000bac: 	cmpl	%eax, 0xe0(%rsp)
    00000bb3: 	jl	.Ltmp442 # Offset: 2995
    00000bb9: 	xorl	%ebp, %ebp
    00000bbb: 	xorl	%ebx, %ebx
    00000bbd: 	jmp	.Ltmp437 # Offset: 3005
.Ltmp434:
    00000bc2: 	xorl	%ebx, %ebx
    00000bc4: 	xorl	%eax, %eax
    00000bc6: 	jmp	.Ltmp443 # Offset: 3014
.Ltmp430:
    00000bcb: 	xorl	%ebp, %ebp
    00000bcd: 	xorl	%edx, %edx
    00000bcf: 	jmp	.Ltmp444 # Offset: 3023
.Ltmp438:
    00000bd4: 	movswl	%bx, %r12d
.Ltmp448:
    00000bd8: 	callq	clock@PLT # Offset: 3032
    00000bdd: 	movl	0x7c(%rsp), %ecx
    00000be1: 	pxor	%xmm0, %xmm0
    00000be5: 	movzwl	0x8e(%rsp), %r14d
    00000bee: 	movq	%rax, end_time(%rip)
    00000bf5: 	subq	start_time(%rip), %rax
    00000bfc: 	cvtsi2sd	%rax, %xmm0
    00000c01: 	movl	%ecx, %eax
    00000c03: 	divsd	DATAat0x49520(%rip), %xmm0
    00000c0b: 	movq	%xmm0, %r13
    00000c10: 	shrl	$0x1f, %eax
    00000c13: 	addl	%ecx, %eax
    00000c15: 	movl	0x70(%rsp), %ecx
    00000c19: 	sarl	%eax
    00000c1b: 	movl	%ecx, %edx
    00000c1d: 	imull	%ecx, %eax
    00000c20: 	shrl	$0x1f, %edx
    00000c23: 	addl	%ecx, %edx
    00000c25: 	sarl	%edx
    00000c27: 	addl	%edx, %eax
    00000c29: 	cltq
    00000c2b: 	subw	(%r15,%rax,2), %r14w
    00000c30: 	movl	0x44(%rsp), %eax
    00000c34: 	cmpl	%eax, iterations(%rip)
    00000c3a: 	jg	.Ltmp445 # Offset: 3130
    00000c40: 	cmpl	$0xa, %ebp
    00000c43: 	jle	.Ltmp445 # Offset: 3139
    00000c49: 	cmpw	$0x1, %bx
    00000c4d: 	jle	.Ltmp445 # Offset: 3149
    00000c53: 	movq	0x80(%rsp), %rax
    00000c5b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000c62: 	movq	%r15, %rdi
    00000c65: 	movq	0x8(%rax), %rdx
    00000c69: 	movq	(%rax), %rsi
    00000c6c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3180
    00000c71: 	movl	$0x11, %edx
    00000c76: 	leaq	DATAat0x49199(%rip), %rsi
    00000c7d: 	movq	%rax, %rdi
    00000c80: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3200
.Ltmp447:
    00000c85: 	movl	$0x4, %edx
    00000c8a: 	leaq	DATAat0x491b6(%rip), %rsi
    00000c91: 	movq	%r15, %rdi
    00000c94: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3220
    00000c99: 	movl	0x44(%rsp), %esi
    00000c9d: 	movq	%r15, %rdi
    00000ca0: 	callq	_ZNSolsEi@PLT # Offset: 3232
    00000ca5: 	movl	$0xb, %edx
    00000caa: 	leaq	DATAat0x491bb(%rip), %rsi
    00000cb1: 	movq	%rax, %rdi
    00000cb4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3252
    00000cb9: 	movl	$0xa, %edx
    00000cbe: 	leaq	DATAat0x491c7(%rip), %rsi
    00000cc5: 	movq	%r15, %rdi
    00000cc8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3272
    00000ccd: 	movl	%ebp, %esi
    00000ccf: 	movq	%r15, %rdi
    00000cd2: 	callq	_ZNSolsEi@PLT # Offset: 3282
    00000cd7: 	movl	$0x7, %edx
    00000cdc: 	leaq	DATAat0x491d2(%rip), %rsi
    00000ce3: 	movq	%rax, %rbp
    00000ce6: 	movq	%rax, %rdi
    00000ce9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3305
    00000cee: 	movq	%rbp, %rdi
    00000cf1: 	movl	%r12d, %esi
    00000cf4: 	callq	_ZNSolsEs@PLT # Offset: 3316
    00000cf9: 	movl	$0x10, %edx
    00000cfe: 	leaq	DATAat0x491da(%rip), %rsi
    00000d05: 	movq	%rax, %rbp
    00000d08: 	movq	%rax, %rdi
    00000d0b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3339
    00000d10: 	movq	%rbp, %rdi
    00000d13: 	movswl	%r14w, %esi
    00000d17: 	callq	_ZNSolsEs@PLT # Offset: 3351
    00000d1c: 	movl	$0x8, %edx
    00000d21: 	leaq	DATAat0x491eb(%rip), %rsi
    00000d28: 	movq	%rax, %rbp
    00000d2b: 	movq	%rax, %rdi
    00000d2e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3374
    00000d33: 	movq	%r13, %xmm0
    00000d38: 	movq	%rbp, %rdi
    00000d3b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3387
    00000d40: 	movl	$0x2, %edx
    00000d45: 	leaq	DATAat0x491f4(%rip), %rsi
    00000d4c: 	movq	%rax, %rdi
    00000d4f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3407
    00000d54: 	movl	0x88(%rsp), %eax
    00000d5b: 	movl	%eax, iterations(%rip)
    00000d61: 	movq	0x98(%rsp), %rax
    00000d69: 	subq	%fs:0x28, %rax
    00000d72: 	jne	.Ltmp446 # Offset: 3442
    00000d74: 	addq	$0xa8, %rsp
    00000d7b: 	popq	%rbx
    00000d7c: 	popq	%rbp
    00000d7d: 	popq	%r12
    00000d7f: 	popq	%r13
    00000d81: 	popq	%r14
    00000d83: 	popq	%r15
    00000d85: 	retq # Offset: 3461
.Ltmp445:
    00000d86: 	movq	0x80(%rsp), %rax
    00000d8e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000d95: 	movq	%r15, %rdi
    00000d98: 	movq	0x8(%rax), %rdx
    00000d9c: 	movq	(%rax), %rsi
    00000d9f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3487
    00000da4: 	movl	$0xa, %edx
    00000da9: 	leaq	DATAat0x491ab(%rip), %rsi
    00000db0: 	movq	%rax, %rdi
    00000db3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3507
    00000db8: 	jmp	.Ltmp447 # Offset: 3512
.Ltmp442:
    00000dbd: 	xorl	%r12d, %r12d
    00000dc0: 	xorl	%ebx, %ebx
    00000dc2: 	xorl	%ebp, %ebp
    00000dc4: 	jmp	.Ltmp448 # Offset: 3524
.Ltmp446:
    00000dc9: 	callq	__stack_chk_fail@PLT # Offset: 3529
    00000dce: 	nop # Size: 2
.Ltmp421:
    00000dd0: 	movl	$0x0, 0x44(%rsp)
    00000dd8: 	xorl	%r12d, %r12d
    00000ddb: 	xorl	%ebx, %ebx
    00000ddd: 	xorl	%ebp, %ebp
    00000ddf: 	jmp	.Ltmp448 # Offset: 3551
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi18jacobi2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi18jacobi2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x15400
  Size        : 0x6b9
  MaxSize     : 0x6c0
  Offset      : 0x15400
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi18jacobi2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r15d, %esi
    0000001d: 	imull	%r13d, %r15d
    00000021: 	subq	$0x48, %rsp
    00000025: 	movl	%edx, 0x10(%rsp)
    00000029: 	leaq	0x30(%rsp), %rcx
    0000002e: 	movl	%r13d, %edx
    00000031: 	movl	%r8d, 0x18(%rsp)
    00000036: 	movq	%r9, 0x28(%rsp)
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0x38(%rsp)
    00000049: 	xorl	%eax, %eax
    0000004b: 	movq	DATAat0x49530(%rip), %rax
    00000052: 	movq	%rax, 0x30(%rsp)
    00000057: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 87
    0000005c: 	movw	%ax, 0x26(%rsp)
    00000061: 	testl	%r15d, %r15d
    00000064: 	jle	.Ltmp449 # Offset: 100
    00000066: 	movslq	%r15d, %rdx
    00000069: 	movq	%r12, %rsi
    0000006c: 	movq	%rbx, %rdi
    0000006f: 	addq	%rdx, %rdx
    00000072: 	callq	memmove@PLT # Offset: 114
.Ltmp449:
    00000077: 	movl	iterations(%rip), %eax
    0000007d: 	movl	$0x2710, iterations(%rip)
    00000087: 	movl	%eax, 0x20(%rsp)
    0000008b: 	callq	clock@PLT # Offset: 139
    00000090: 	movq	%rax, start_time(%rip)
    00000097: 	movl	iterations(%rip), %eax
    0000009d: 	movl	%eax, 0x1c(%rsp)
    000000a1: 	testl	%eax, %eax
    000000a3: 	jle	.Ltmp450 # Offset: 163
    000000a9: 	movslq	%r15d, %r15
    000000ac: 	xorl	%r14d, %r14d
    000000af: 	movl	%r13d, 0x14(%rsp)
    000000b4: 	leaq	-0x1(%r15), %rax
    000000b8: 	movq	%r15, %r10
    000000bb: 	movq	%r15, %rsi
    000000be: 	movq	%rax, 0x8(%rsp)
    000000c3: 	movq	%r15, %rax
    000000c6: 	andq	$-0x8, %r10
    000000ca: 	movl	%r14d, %r15d
    000000cd: 	shrq	$0x3, %rax
    000000d1: 	movq	%r10, %r13
    000000d4: 	movq	%rsi, %r14
    000000d7: 	shlq	$0x4, %rax
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp461:
    000000e0: 	movl	0x18(%rsp), %r8d
    000000e5: 	movl	0x14(%rsp), %ecx
    000000e9: 	movq	%rbx, %rsi
    000000ec: 	movq	%r12, %rdi
    000000ef: 	movl	0x10(%rsp), %edx
    000000f3: 	movq	%rax, (%rsp)
    000000f7: 	callq	"_ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/1" # Offset: 247
    000000fc: 	testq	%r14, %r14
    000000ff: 	movq	(%rsp), %rax
    00000103: 	pxor	%xmm3, %xmm3
    00000107: 	je	.Ltmp451 # Offset: 263
    0000010d: 	cmpq	$0x6, 0x8(%rsp)
    00000113: 	jbe	.Ltmp452 # Offset: 275
    00000119: 	xorl	%edx, %edx
    0000011b: 	pxor	%xmm1, %xmm1
    0000011f: 	nop # Size: 1
.Ltmp453:
    00000120: 	movdqu	(%rbx,%rdx), %xmm5
    00000125: 	movdqu	(%r12,%rdx), %xmm4
    0000012b: 	movdqa	%xmm3, %xmm0
    0000012f: 	movdqu	(%r12,%rdx), %xmm6
    00000135: 	addq	$0x10, %rdx
    00000139: 	psubw	%xmm5, %xmm4
    0000013d: 	movdqa	%xmm5, %xmm2
    00000141: 	pcmpgtw	%xmm4, %xmm0
    00000145: 	psubw	%xmm6, %xmm2
    00000149: 	pand	%xmm0, %xmm2
    0000014d: 	pandn	%xmm4, %xmm0
    00000151: 	movdqa	%xmm3, %xmm4
    00000155: 	por	%xmm2, %xmm0
    00000159: 	pcmpgtw	%xmm0, %xmm4
    0000015d: 	movdqa	%xmm0, %xmm2
    00000161: 	punpcklwd	%xmm4, %xmm2
    00000165: 	punpckhwd	%xmm4, %xmm0
    00000169: 	paddd	%xmm2, %xmm1
    0000016d: 	paddd	%xmm0, %xmm1
    00000171: 	cmpq	%rdx, %rax
    00000174: 	jne	.Ltmp453 # Offset: 372
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	psrldq	$0x8, %xmm0
    0000017f: 	paddd	%xmm0, %xmm1
    00000183: 	movdqa	%xmm1, %xmm0
    00000187: 	psrldq	$0x4, %xmm0
    0000018c: 	paddd	%xmm0, %xmm1
    00000190: 	movd	%xmm1, %ebp
    00000194: 	cmpq	%r13, %r14
    00000197: 	je	.Ltmp454 # Offset: 407
    0000019d: 	movq	%r13, %rcx
.Ltmp464:
    000001a0: 	movzwl	(%rbx,%rcx,2), %edi
    000001a4: 	movzwl	(%r12,%rcx,2), %edx
    000001a9: 	leaq	(%rcx,%rcx), %rsi
    000001ad: 	movl	%edi, %r8d
    000001b0: 	subl	%edx, %r8d
    000001b3: 	subw	%di, %dx
    000001b6: 	cmovsl	%r8d, %edx
    000001ba: 	movswl	%dx, %edx
    000001bd: 	addl	%edx, %ebp
    000001bf: 	leaq	0x1(%rcx), %rdx
    000001c3: 	cmpq	%rdx, %r14
    000001c6: 	jbe	.Ltmp455 # Offset: 454
    000001cc: 	movzwl	0x2(%rbx,%rsi), %edi
    000001d1: 	movzwl	0x2(%r12,%rsi), %edx
    000001d7: 	movl	%edi, %r8d
    000001da: 	subl	%edx, %r8d
    000001dd: 	subw	%di, %dx
    000001e0: 	cmovsl	%r8d, %edx
    000001e4: 	movswl	%dx, %edx
    000001e7: 	addl	%edx, %ebp
    000001e9: 	leaq	0x2(%rcx), %rdx
    000001ed: 	cmpq	%rdx, %r14
    000001f0: 	jbe	.Ltmp455 # Offset: 496
    000001f6: 	movzwl	0x4(%rbx,%rsi), %edi
    000001fb: 	movzwl	0x4(%r12,%rsi), %edx
    00000201: 	movl	%edi, %r8d
    00000204: 	subl	%edx, %r8d
    00000207: 	subw	%di, %dx
    0000020a: 	cmovsl	%r8d, %edx
    0000020e: 	movswl	%dx, %edx
    00000211: 	addl	%edx, %ebp
    00000213: 	leaq	0x3(%rcx), %rdx
    00000217: 	cmpq	%rdx, %r14
    0000021a: 	jbe	.Ltmp455 # Offset: 538
    00000220: 	movzwl	0x6(%rbx,%rsi), %edi
    00000225: 	movzwl	0x6(%r12,%rsi), %edx
    0000022b: 	movl	%edi, %r8d
    0000022e: 	subl	%edx, %r8d
    00000231: 	subw	%di, %dx
    00000234: 	cmovsl	%r8d, %edx
    00000238: 	movswl	%dx, %edx
    0000023b: 	addl	%edx, %ebp
    0000023d: 	leaq	0x4(%rcx), %rdx
    00000241: 	cmpq	%rdx, %r14
    00000244: 	jbe	.Ltmp455 # Offset: 580
    00000246: 	movzwl	0x8(%rbx,%rsi), %edi
    0000024b: 	movzwl	0x8(%r12,%rsi), %edx
    00000251: 	movl	%edi, %r8d
    00000254: 	subl	%edx, %r8d
    00000257: 	subw	%di, %dx
    0000025a: 	cmovsl	%r8d, %edx
    0000025e: 	movswl	%dx, %edx
    00000261: 	addl	%edx, %ebp
    00000263: 	leaq	0x5(%rcx), %rdx
    00000267: 	cmpq	%rdx, %r14
    0000026a: 	jbe	.Ltmp455 # Offset: 618
    0000026c: 	movzwl	0xa(%rbx,%rsi), %edi
    00000271: 	movzwl	0xa(%r12,%rsi), %edx
    00000277: 	movl	%edi, %r8d
    0000027a: 	subl	%edx, %r8d
    0000027d: 	subw	%di, %dx
    00000280: 	cmovsl	%r8d, %edx
    00000284: 	addq	$0x6, %rcx
    00000288: 	movswl	%dx, %edx
    0000028b: 	addl	%edx, %ebp
    0000028d: 	cmpq	%rcx, %r14
    00000290: 	jbe	.Ltmp455 # Offset: 656
    00000292: 	movzwl	0xc(%rbx,%rsi), %ecx
    00000297: 	movzwl	0xc(%r12,%rsi), %edx
    0000029d: 	movl	%ecx, %esi
    0000029f: 	subl	%edx, %esi
    000002a1: 	subw	%cx, %dx
    000002a4: 	cmovsl	%esi, %edx
    000002a7: 	movswl	%dx, %edx
    000002aa: 	addl	%edx, %ebp
.Ltmp455:
    000002ac: 	cmpq	$0x6, 0x8(%rsp)
    000002b2: 	jbe	.Ltmp456 # Offset: 690
.Ltmp454:
    000002b8: 	xorl	%edx, %edx
    000002ba: 	pxor	%xmm2, %xmm2
    000002be: 	nop # Size: 2
.Ltmp457:
    000002c0: 	movdqu	(%rbx,%rdx), %xmm7
    000002c5: 	movdqu	(%r12,%rdx), %xmm4
    000002cb: 	movdqa	%xmm3, %xmm0
    000002cf: 	movdqu	(%r12,%rdx), %xmm5
    000002d5: 	addq	$0x10, %rdx
    000002d9: 	psubw	%xmm7, %xmm4
    000002dd: 	movdqa	%xmm7, %xmm1
    000002e1: 	pcmpgtw	%xmm4, %xmm0
    000002e5: 	psubw	%xmm5, %xmm1
    000002e9: 	pand	%xmm0, %xmm1
    000002ed: 	pandn	%xmm4, %xmm0
    000002f1: 	por	%xmm1, %xmm0
    000002f5: 	pmaxsw	%xmm0, %xmm2
    000002f9: 	cmpq	%rax, %rdx
    000002fc: 	jne	.Ltmp457 # Offset: 764
    000002fe: 	movdqa	%xmm2, %xmm0
    00000302: 	psrldq	$0x8, %xmm0
    00000307: 	pmaxsw	%xmm0, %xmm2
    0000030b: 	movdqa	%xmm2, %xmm0
    0000030f: 	psrldq	$0x4, %xmm0
    00000314: 	pmaxsw	%xmm0, %xmm2
    00000318: 	movdqa	%xmm2, %xmm0
    0000031c: 	psrldq	$0x2, %xmm0
    00000321: 	pmaxsw	%xmm0, %xmm2
    00000325: 	pextrw	$0x0, %xmm2, %edx
    0000032a: 	cmpq	%r13, %r14
    0000032d: 	je	.Ltmp458 # Offset: 813
    00000333: 	movq	%r13, %rcx
.Ltmp463:
    00000336: 	movzwl	(%rbx,%rcx,2), %r8d
    0000033b: 	movzwl	(%r12,%rcx,2), %edi
    00000340: 	leaq	(%rcx,%rcx), %rsi
    00000344: 	movl	%r8d, %r11d
    00000347: 	subl	%edi, %r11d
    0000034a: 	subw	%r8w, %di
    0000034e: 	cmovsl	%r11d, %edi
    00000352: 	cmpw	%di, %dx
    00000355: 	cmovll	%edi, %edx
    00000358: 	leaq	0x1(%rcx), %rdi
    0000035c: 	cmpq	%rdi, %r14
    0000035f: 	jbe	.Ltmp458 # Offset: 863
    00000365: 	movzwl	0x2(%rbx,%rsi), %r8d
    0000036b: 	movzwl	0x2(%r12,%rsi), %edi
    00000371: 	movl	%r8d, %r11d
    00000374: 	subl	%edi, %r11d
    00000377: 	subw	%r8w, %di
    0000037b: 	cmovsl	%r11d, %edi
    0000037f: 	cmpw	%di, %dx
    00000382: 	cmovll	%edi, %edx
    00000385: 	leaq	0x2(%rcx), %rdi
    00000389: 	cmpq	%r14, %rdi
    0000038c: 	jae	.Ltmp458 # Offset: 908
    00000392: 	movzwl	0x4(%rbx,%rsi), %r8d
    00000398: 	movzwl	0x4(%r12,%rsi), %edi
    0000039e: 	movl	%r8d, %r11d
    000003a1: 	subl	%edi, %r11d
    000003a4: 	subw	%r8w, %di
    000003a8: 	cmovsl	%r11d, %edi
    000003ac: 	cmpw	%di, %dx
    000003af: 	cmovll	%edi, %edx
    000003b2: 	leaq	0x3(%rcx), %rdi
    000003b6: 	cmpq	%rdi, %r14
    000003b9: 	jbe	.Ltmp458 # Offset: 953
    000003bf: 	movzwl	0x6(%rbx,%rsi), %r8d
    000003c5: 	movzwl	0x6(%r12,%rsi), %edi
    000003cb: 	movl	%r8d, %r11d
    000003ce: 	subl	%edi, %r11d
    000003d1: 	subw	%r8w, %di
    000003d5: 	cmovsl	%r11d, %edi
    000003d9: 	cmpw	%di, %dx
    000003dc: 	cmovll	%edi, %edx
    000003df: 	leaq	0x4(%rcx), %rdi
    000003e3: 	cmpq	%rdi, %r14
    000003e6: 	jbe	.Ltmp458 # Offset: 998
    000003e8: 	movzwl	0x8(%rbx,%rsi), %r8d
    000003ee: 	movzwl	0x8(%r12,%rsi), %edi
    000003f4: 	movl	%r8d, %r11d
    000003f7: 	subl	%edi, %r11d
    000003fa: 	subw	%r8w, %di
    000003fe: 	cmovsl	%r11d, %edi
    00000402: 	cmpw	%di, %dx
    00000405: 	cmovll	%edi, %edx
    00000408: 	leaq	0x5(%rcx), %rdi
    0000040c: 	cmpq	%rdi, %r14
    0000040f: 	jbe	.Ltmp458 # Offset: 1039
    00000411: 	movzwl	0xa(%rbx,%rsi), %r8d
    00000417: 	movzwl	0xa(%r12,%rsi), %edi
    0000041d: 	movl	%r8d, %r11d
    00000420: 	subl	%edi, %r11d
    00000423: 	subw	%r8w, %di
    00000427: 	cmovsl	%r11d, %edi
    0000042b: 	cmpw	%di, %dx
    0000042e: 	cmovll	%edi, %edx
    00000431: 	addq	$0x6, %rcx
    00000435: 	cmpq	%rcx, %r14
    00000438: 	jbe	.Ltmp458 # Offset: 1080
    0000043a: 	movzwl	0xc(%r12,%rsi), %ecx
    00000440: 	movzwl	0xc(%rbx,%rsi), %esi
    00000445: 	movl	%esi, %edi
    00000447: 	subl	%ecx, %edi
    00000449: 	subw	%si, %cx
    0000044c: 	cmovsl	%edi, %ecx
    0000044f: 	cmpw	%cx, %dx
    00000452: 	cmovll	%ecx, %edx
.Ltmp458:
    00000455: 	cmpl	%r15d, 0x80(%rsp)
    0000045d: 	jge	.Ltmp459 # Offset: 1117
    0000045f: 	testw	%dx, %dx
    00000462: 	jle	.Ltmp460 # Offset: 1122
    00000468: 	cmpl	$0x9, %ebp
    0000046b: 	jle	.Ltmp460 # Offset: 1131
.Ltmp459:
    00000471: 	movq	%rbx, %rcx
    00000474: 	addl	$0x1, %r15d
    00000478: 	movq	%r12, %rbx
    0000047b: 	cmpl	0x1c(%rsp), %r15d
    00000480: 	je	.Ltmp460 # Offset: 1152
    00000486: 	movq	%rcx, %r12
    00000489: 	jmp	.Ltmp461 # Offset: 1161
    0000048e: 	nop # Size: 2
.Ltmp451:
    00000490: 	cmpl	%r15d, 0x80(%rsp)
    00000498: 	jl	.Ltmp462 # Offset: 1176
    0000049a: 	xorl	%ebp, %ebp
    0000049c: 	xorl	%edx, %edx
    0000049e: 	jmp	.Ltmp459 # Offset: 1182
.Ltmp456:
    000004a0: 	xorl	%edx, %edx
    000004a2: 	xorl	%ecx, %ecx
    000004a4: 	jmp	.Ltmp463 # Offset: 1188
.Ltmp452:
    000004a9: 	xorl	%ebp, %ebp
    000004ab: 	xorl	%ecx, %ecx
    000004ad: 	jmp	.Ltmp464 # Offset: 1197
.Ltmp462:
    000004b2: 	movl	0x14(%rsp), %r13d
    000004b7: 	movl	%r15d, %r14d
    000004ba: 	xorl	%edx, %edx
    000004bc: 	xorl	%r15d, %r15d
    000004bf: 	xorl	%ebp, %ebp
.Ltmp468:
    000004c1: 	movl	%edx, (%rsp)
    000004c4: 	callq	clock@PLT # Offset: 1220
    000004c9: 	movl	0x10(%rsp), %ecx
    000004cd: 	pxor	%xmm0, %xmm0
    000004d1: 	movzwl	0x26(%rsp), %esi
    000004d6: 	movq	%rax, end_time(%rip)
    000004dd: 	subq	start_time(%rip), %rax
    000004e4: 	cvtsi2sd	%rax, %xmm0
    000004e9: 	movl	%ecx, %eax
    000004eb: 	divsd	DATAat0x49520(%rip), %xmm0
    000004f3: 	movq	%xmm0, %r12
    000004f8: 	shrl	$0x1f, %eax
    000004fb: 	addl	%ecx, %eax
    000004fd: 	movl	%r13d, %ecx
    00000500: 	sarl	%eax
    00000502: 	shrl	$0x1f, %ecx
    00000505: 	imull	%r13d, %eax
    00000509: 	addl	%r13d, %ecx
    0000050c: 	sarl	%ecx
    0000050e: 	addl	%ecx, %eax
    00000510: 	cltq
    00000512: 	subw	(%rbx,%rax,2), %si
    00000516: 	cmpl	%r14d, iterations(%rip)
    0000051d: 	movl	%esi, %ebx
    0000051f: 	jg	.Ltmp465 # Offset: 1311
    00000525: 	cmpl	$0xa, %ebp
    00000528: 	jle	.Ltmp465 # Offset: 1320
    0000052e: 	movl	(%rsp), %edx
    00000531: 	cmpw	$0x1, %dx
    00000535: 	jle	.Ltmp465 # Offset: 1333
    0000053b: 	movq	0x28(%rsp), %rax
    00000540: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000547: 	movq	%r13, %rdi
    0000054a: 	movq	0x8(%rax), %rdx
    0000054e: 	movq	(%rax), %rsi
    00000551: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1361
    00000556: 	movl	$0x11, %edx
    0000055b: 	leaq	DATAat0x49199(%rip), %rsi
    00000562: 	movq	%rax, %rdi
    00000565: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1381
.Ltmp467:
    0000056a: 	movl	$0x4, %edx
    0000056f: 	leaq	DATAat0x491b6(%rip), %rsi
    00000576: 	movq	%r13, %rdi
    00000579: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1401
    0000057e: 	movl	%r14d, %esi
    00000581: 	movq	%r13, %rdi
    00000584: 	callq	_ZNSolsEi@PLT # Offset: 1412
    00000589: 	movl	$0xb, %edx
    0000058e: 	leaq	DATAat0x491bb(%rip), %rsi
    00000595: 	movq	%rax, %rdi
    00000598: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1432
    0000059d: 	movl	$0xa, %edx
    000005a2: 	leaq	DATAat0x491c7(%rip), %rsi
    000005a9: 	movq	%r13, %rdi
    000005ac: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1452
    000005b1: 	movl	%ebp, %esi
    000005b3: 	movq	%r13, %rdi
    000005b6: 	callq	_ZNSolsEi@PLT # Offset: 1462
    000005bb: 	movl	$0x7, %edx
    000005c0: 	leaq	DATAat0x491d2(%rip), %rsi
    000005c7: 	movq	%rax, %rbp
    000005ca: 	movq	%rax, %rdi
    000005cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1485
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	movl	%r15d, %esi
    000005d8: 	callq	_ZNSolsEs@PLT # Offset: 1496
    000005dd: 	movl	$0x10, %edx
    000005e2: 	leaq	DATAat0x491da(%rip), %rsi
    000005e9: 	movq	%rax, %rbp
    000005ec: 	movq	%rax, %rdi
    000005ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1519
    000005f4: 	movq	%rbp, %rdi
    000005f7: 	movswl	%bx, %esi
    000005fa: 	callq	_ZNSolsEs@PLT # Offset: 1530
    000005ff: 	movl	$0x8, %edx
    00000604: 	leaq	DATAat0x491eb(%rip), %rsi
    0000060b: 	movq	%rax, %rbp
    0000060e: 	movq	%rax, %rdi
    00000611: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1553
    00000616: 	movq	%r12, %xmm0
    0000061b: 	movq	%rbp, %rdi
    0000061e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1566
    00000623: 	movl	$0x2, %edx
    00000628: 	leaq	DATAat0x491f4(%rip), %rsi
    0000062f: 	movq	%rax, %rdi
    00000632: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1586
    00000637: 	movl	0x20(%rsp), %eax
    0000063b: 	movl	%eax, iterations(%rip)
    00000641: 	movq	0x38(%rsp), %rax
    00000646: 	subq	%fs:0x28, %rax
    0000064f: 	jne	.Ltmp466 # Offset: 1615
    00000651: 	addq	$0x48, %rsp
    00000655: 	popq	%rbx
    00000656: 	popq	%rbp
    00000657: 	popq	%r12
    00000659: 	popq	%r13
    0000065b: 	popq	%r14
    0000065d: 	popq	%r15
    0000065f: 	retq # Offset: 1631
.Ltmp465:
    00000660: 	movq	0x28(%rsp), %rax
    00000665: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000066c: 	movq	%r13, %rdi
    0000066f: 	movq	0x8(%rax), %rdx
    00000673: 	movq	(%rax), %rsi
    00000676: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1654
    0000067b: 	movl	$0xa, %edx
    00000680: 	leaq	DATAat0x491ab(%rip), %rsi
    00000687: 	movq	%rax, %rdi
    0000068a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1674
    0000068f: 	jmp	.Ltmp467 # Offset: 1679
.Ltmp460:
    00000694: 	movl	%r15d, %r14d
    00000697: 	movl	0x14(%rsp), %r13d
    0000069c: 	movswl	%dx, %r15d
    000006a0: 	jmp	.Ltmp468 # Offset: 1696
.Ltmp450:
    000006a5: 	xorl	%r15d, %r15d
    000006a8: 	xorl	%r14d, %r14d
    000006ab: 	xorl	%edx, %edx
    000006ad: 	xorl	%ebp, %ebp
    000006af: 	jmp	.Ltmp468 # Offset: 1711
.Ltmp466:
    000006b4: 	callq	__stack_chk_fail@PLT # Offset: 1716
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi18jacobi2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x15ac0
  Size        : 0xdea
  MaxSize     : 0xdf0
  Offset      : 0x15ac0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%ecx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	movl	%ebx, %esi
    00000018: 	imull	%r14d, %ebx
    0000001c: 	subq	$0xe8, %rsp
    00000023: 	movl	%edx, 0xb8(%rsp)
    0000002a: 	movl	%r14d, %edx
    0000002d: 	movl	%ecx, 0xbc(%rsp)
    00000034: 	leaq	0xd0(%rsp), %rcx
    0000003c: 	movl	%r8d, 0x48(%rsp)
    00000041: 	movq	%r9, 0xc0(%rsp)
    00000049: 	movq	%fs:0x28, %rax
    00000052: 	movq	%rax, 0xd8(%rsp)
    0000005a: 	xorl	%eax, %eax
    0000005c: 	movq	DATAat0x49530(%rip), %rax
    00000063: 	movq	%rdi, 0x8(%rsp)
    00000068: 	movq	%rax, 0xd0(%rsp)
    00000070: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 112
    00000075: 	testl	%ebx, %ebx
    00000077: 	movq	0x8(%rsp), %r10
    0000007c: 	movw	%ax, 0xce(%rsp)
    00000084: 	jle	.Ltmp469 # Offset: 132
    00000086: 	movslq	%ebx, %rdx
    00000089: 	movq	%r10, %rsi
    0000008c: 	movq	%r12, %rdi
    0000008f: 	addq	%rdx, %rdx
    00000092: 	callq	memmove@PLT # Offset: 146
    00000097: 	movq	0x8(%rsp), %r10
.Ltmp469:
    0000009c: 	movl	iterations(%rip), %eax
    000000a2: 	movq	%r10, 0x20(%rsp)
    000000a7: 	movl	$0x2710, iterations(%rip)
    000000b1: 	movl	%eax, 0xc8(%rsp)
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movq	%rax, start_time(%rip)
    000000c4: 	movl	iterations(%rip), %eax
    000000ca: 	movl	%eax, 0xac(%rsp)
    000000d1: 	testl	%eax, %eax
    000000d3: 	jle	.Ltmp470 # Offset: 211
    000000d9: 	movl	0xb8(%rsp), %eax
    000000e0: 	movslq	%ebx, %rdi
    000000e3: 	movl	0xbc(%rsp), %edx
    000000ea: 	movl	$0x0, 0x7c(%rsp)
    000000f2: 	movq	%rdi, 0x70(%rsp)
    000000f7: 	movdqa	DATAat0x49440(%rip), %xmm6
    000000ff: 	subl	$0x1, %eax
    00000102: 	movdqa	DATAat0x49450(%rip), %xmm5
    0000010a: 	movq	0x20(%rsp), %r10
    0000010f: 	movl	%eax, 0x3c(%rsp)
    00000113: 	leal	-0x1(%rdx), %eax
    00000116: 	movdqa	DATAat0x49460(%rip), %xmm4
    0000011e: 	movl	%eax, 0x8(%rsp)
    00000122: 	movslq	0x48(%rsp), %rax
    00000127: 	leaq	(%rax,%rax), %r11
    0000012b: 	shlq	$0x2, %rax
    0000012f: 	movq	%r11, %rbx
    00000132: 	movq	%rax, 0x40(%rsp)
    00000137: 	negq	%rbx
    0000013a: 	movq	%rbx, 0xb0(%rsp)
    00000142: 	leal	-0x2(%rdx), %ebx
    00000145: 	subl	$0x3, %edx
    00000148: 	movl	%ebx, %eax
    0000014a: 	movl	%ebx, 0x6c(%rsp)
    0000014e: 	shrl	$0x3, %eax
    00000151: 	movl	%edx, 0x68(%rsp)
    00000155: 	subl	$0x1, %eax
    00000158: 	addq	$0x1, %rax
    0000015c: 	shlq	$0x4, %rax
    00000160: 	movq	%rax, %rbp
    00000163: 	movl	%ebx, %eax
    00000165: 	andl	$-0x8, %eax
    00000168: 	leal	0x1(%rax), %ebx
    0000016b: 	movl	%eax, 0x38(%rsp)
    0000016f: 	movl	%ebx, 0x18(%rsp)
    00000173: 	leal	0x2(%rax), %ebx
    00000176: 	movl	%ebx, 0x10(%rsp)
    0000017a: 	leal	0x3(%rax), %ebx
    0000017d: 	movl	%ebx, 0x14(%rsp)
    00000181: 	leal	0x4(%rax), %ebx
    00000184: 	movl	%ebx, 0x1c(%rsp)
    00000188: 	leal	0x5(%rax), %ebx
    0000018b: 	movl	%ebx, 0x28(%rsp)
    0000018f: 	leal	0x6(%rax), %ebx
    00000192: 	movl	%ebx, 0x2c(%rsp)
    00000196: 	leal	0x7(%rax), %ebx
    00000199: 	addl	$0x8, %eax
    0000019c: 	movl	%eax, 0xa8(%rsp)
    000001a3: 	leaq	-0x1(%rdi), %rax
    000001a7: 	movq	%rax, 0x90(%rsp)
    000001af: 	movq	%rdi, %rax
    000001b2: 	shrq	$0x3, %rax
    000001b6: 	movl	%ebx, 0x78(%rsp)
    000001ba: 	movq	%rdi, %rbx
    000001bd: 	shlq	$0x4, %rax
    000001c1: 	andq	$-0x8, %rbx
    000001c5: 	movq	%rax, 0x98(%rsp)
    000001cd: 	leaq	0x2(%rdx,%rdx), %rax
    000001d2: 	movq	%rbx, 0x88(%rsp)
    000001da: 	movq	%rax, 0xa0(%rsp)
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp486:
    000001e8: 	cmpl	$0x1, 0x3c(%rsp)
    000001ed: 	jle	.Ltmp471 # Offset: 493
    000001f3: 	cmpl	$0x1, 0x8(%rsp)
    000001f8: 	jle	.Ltmp471 # Offset: 504
    000001fe: 	movq	0xb0(%rsp), %rax
    00000206: 	leaq	0x2(%r12), %rbx
    0000020b: 	leaq	0x4(%r10), %rcx
    0000020f: 	movq	%r11, %rdx
    00000212: 	movl	$0x1, 0x20(%rsp)
    0000021a: 	movq	%rax, 0x30(%rsp)
    0000021f: 	movl	0x48(%rsp), %eax
    00000223: 	movq	%rbx, 0x58(%rsp)
    00000228: 	movl	%eax, %r9d
    0000022b: 	addl	%eax, %eax
    0000022d: 	movl	%eax, 0x4c(%rsp)
    00000231: 	movq	%r12, %rax
    00000234: 	subq	%r10, %rax
    00000237: 	movq	%rax, 0x50(%rsp)
    0000023c: 	movq	0x40(%rsp), %rax
    00000241: 	subq	$0x2, %rax
    00000245: 	movq	%rax, 0x60(%rsp)
    0000024a: 	movq	$-0x4, %rax
    00000251: 	subq	%r10, %rax
    00000254: 	movq	%rax, 0x80(%rsp)
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp475:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%r9d, %r8d
    00000267: 	subl	0x48(%rsp), %r8d
    0000026c: 	movl	%r9d, %edi
    0000026f: 	addl	$0x1, 0x20(%rsp)
    00000274: 	cmpq	$0x10, 0x50(%rsp)
    0000027a: 	leal	(%rax,%r8), %r9d
    0000027e: 	movq	0x58(%rsp), %rax
    00000283: 	leaq	(%rax,%rdx), %rsi
    00000287: 	movq	0x40(%rsp), %rax
    0000028c: 	leaq	(%rcx,%rax), %rbx
    00000290: 	seta	%al
    00000293: 	cmpl	$0x6, 0x68(%rsp)
    00000298: 	seta	%r13b
    0000029c: 	andl	%r13d, %eax
    0000029f: 	movq	%rsi, %r13
    000002a2: 	subq	%rcx, %r13
    000002a5: 	cmpq	$0xc, %r13
    000002a9: 	seta	%r13b
    000002ad: 	testb	%r13b, %al
    000002b0: 	je	.Ltmp472 # Offset: 688
    000002b6: 	movq	%rsi, %rax
    000002b9: 	subq	%rbx, %rax
    000002bc: 	cmpq	$0xc, %rax
    000002c0: 	jbe	.Ltmp472 # Offset: 704
    000002c6: 	movq	%rbx, %r13
    000002c9: 	leaq	-0x2(%rcx), %r15
    000002cd: 	leaq	(%r10,%rdx), %r14
    000002d1: 	addq	0x60(%rsp), %rcx
    000002d6: 	subq	%r11, %r13
    000002d9: 	pxor	%xmm2, %xmm2
    000002dd: 	pxor	%xmm3, %xmm3
    000002e1: 	xorl	%eax, %eax
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp473:
    000002e8: 	movdqu	(%r15,%rax), %xmm9
    000002ee: 	movdqu	(%r14,%rax), %xmm1
    000002f4: 	movdqa	%xmm2, %xmm13
    000002f9: 	movdqa	%xmm2, %xmm12
    000002fe: 	movdqu	(%r13,%rax), %xmm8
    00000305: 	movdqa	%xmm2, %xmm11
    0000030a: 	movdqu	(%rcx,%rax), %xmm7
    0000030f: 	pcmpgtw	%xmm9, %xmm13
    00000314: 	pcmpgtw	%xmm1, %xmm12
    00000319: 	movdqa	%xmm9, %xmm10
    0000031e: 	pcmpgtw	%xmm8, %xmm11
    00000323: 	movdqa	%xmm1, %xmm0
    00000327: 	movdqa	%xmm7, %xmm14
    0000032c: 	punpcklwd	%xmm13, %xmm10
    00000331: 	punpcklwd	%xmm12, %xmm0
    00000336: 	punpckhwd	%xmm13, %xmm9
    0000033b: 	paddd	%xmm10, %xmm0
    00000340: 	movdqa	%xmm8, %xmm10
    00000345: 	punpckhwd	%xmm12, %xmm1
    0000034a: 	punpcklwd	%xmm11, %xmm10
    0000034f: 	punpckhwd	%xmm11, %xmm8
    00000354: 	paddd	%xmm9, %xmm1
    00000359: 	paddd	%xmm10, %xmm0
    0000035e: 	movdqa	%xmm2, %xmm10
    00000363: 	paddd	%xmm8, %xmm1
    00000368: 	pcmpgtw	%xmm7, %xmm10
    0000036d: 	movdqa	%xmm3, %xmm8
    00000372: 	punpckhwd	%xmm10, %xmm7
    00000377: 	punpcklwd	%xmm10, %xmm14
    0000037c: 	paddd	%xmm7, %xmm1
    00000380: 	paddd	%xmm14, %xmm0
    00000385: 	movdqa	%xmm3, %xmm7
    00000389: 	paddd	%xmm6, %xmm0
    0000038d: 	paddd	%xmm6, %xmm1
    00000391: 	pcmpgtd	%xmm0, %xmm8
    00000396: 	pcmpgtd	%xmm1, %xmm7
    0000039a: 	pand	%xmm5, %xmm8
    0000039f: 	pand	%xmm5, %xmm7
    000003a3: 	paddd	%xmm8, %xmm0
    000003a8: 	paddd	%xmm7, %xmm1
    000003ac: 	psrad	$0x2, %xmm1
    000003b1: 	psrad	$0x2, %xmm0
    000003b6: 	movdqa	%xmm0, %xmm7
    000003ba: 	punpcklwd	%xmm1, %xmm0
    000003be: 	punpckhwd	%xmm1, %xmm7
    000003c2: 	movdqa	%xmm0, %xmm1
    000003c6: 	punpckhwd	%xmm7, %xmm1
    000003ca: 	punpcklwd	%xmm7, %xmm0
    000003ce: 	movdqu	(%rsi,%rax), %xmm7
    000003d3: 	punpcklwd	%xmm1, %xmm0
    000003d7: 	psubw	%xmm7, %xmm0
    000003db: 	movdqa	%xmm0, %xmm7
    000003df: 	pmulhw	%xmm4, %xmm0
    000003e3: 	pmullw	%xmm4, %xmm7
    000003e7: 	movdqa	%xmm7, %xmm1
    000003eb: 	punpckhwd	%xmm0, %xmm7
    000003ef: 	punpcklwd	%xmm0, %xmm1
    000003f3: 	psrad	$0x6, %xmm7
    000003f8: 	psrad	$0x6, %xmm1
    000003fd: 	movdqa	%xmm1, %xmm0
    00000401: 	movdqa	%xmm1, %xmm8
    00000406: 	punpcklwd	%xmm7, %xmm0
    0000040a: 	punpckhwd	%xmm7, %xmm8
    0000040f: 	movdqu	(%rsi,%rax), %xmm7
    00000414: 	movdqa	%xmm0, %xmm1
    00000418: 	punpcklwd	%xmm8, %xmm0
    0000041d: 	punpckhwd	%xmm8, %xmm1
    00000422: 	punpcklwd	%xmm1, %xmm0
    00000426: 	paddw	%xmm7, %xmm0
    0000042a: 	movups	%xmm0, (%rsi,%rax)
    0000042e: 	addq	$0x10, %rax
    00000432: 	cmpq	%rbp, %rax
    00000435: 	jne	.Ltmp473 # Offset: 1077
    0000043b: 	movl	0x38(%rsp), %esi
    0000043f: 	cmpl	%esi, 0x6c(%rsp)
    00000443: 	je	.Ltmp474 # Offset: 1091
    00000449: 	movl	0x18(%rsp), %eax
    0000044d: 	leal	(%rdi,%rax), %r14d
    00000451: 	addl	%r8d, %eax
    00000454: 	cltq
    00000456: 	movslq	%r14d, %r14
    00000459: 	movswl	(%r10,%rax,2), %ecx
    0000045e: 	leal	(%rdi,%rsi), %eax
    00000461: 	leaq	(%r12,%r14,2), %r15
    00000465: 	cltq
    00000467: 	movswl	(%r10,%rax,2), %esi
    0000046c: 	addl	%ecx, %esi
    0000046e: 	movl	0x10(%rsp), %ecx
    00000472: 	addl	%edi, %ecx
    00000474: 	movslq	%ecx, %rcx
    00000477: 	addq	%rcx, %rcx
    0000047a: 	leaq	(%r10,%rcx), %r13
    0000047e: 	movswl	(%r13), %eax
    00000483: 	addl	%esi, %eax
    00000485: 	movl	0x18(%rsp), %esi
    00000489: 	addl	%r9d, %esi
    0000048c: 	movslq	%esi, %rsi
    0000048f: 	movswl	(%r10,%rsi,2), %esi
    00000494: 	addl	%eax, %esi
    00000496: 	leal	0x5(%rsi), %eax
    00000499: 	addl	$0x2, %esi
    0000049c: 	cmovnsl	%esi, %eax
    0000049f: 	sarl	$0x2, %eax
    000004a2: 	subw	(%r15), %ax
    000004a6: 	cwtl
    000004a7: 	imull	$0x71, %eax, %eax
    000004aa: 	sarl	$0x6, %eax
    000004ad: 	addw	(%r15), %ax
    000004b1: 	movw	%ax, (%r15)
    000004b5: 	movl	0x10(%rsp), %eax
    000004b9: 	cmpl	%eax, 0x8(%rsp)
    000004bd: 	jle	.Ltmp474 # Offset: 1213
    000004c3: 	movl	0x14(%rsp), %esi
    000004c7: 	addl	%r8d, %eax
    000004ca: 	movswl	(%r10,%r14,2), %r15d
    000004cf: 	addq	%r12, %rcx
    000004d2: 	cltq
    000004d4: 	addl	%edi, %esi
    000004d6: 	movswl	(%r10,%rax,2), %eax
    000004db: 	movslq	%esi, %rsi
    000004de: 	addq	%rsi, %rsi
    000004e1: 	addl	%eax, %r15d
    000004e4: 	leaq	(%r10,%rsi), %r14
    000004e8: 	movswl	(%r14), %eax
    000004ec: 	addl	%r15d, %eax
    000004ef: 	movl	0x10(%rsp), %r15d
    000004f4: 	addl	%r9d, %r15d
    000004f7: 	movslq	%r15d, %r15
    000004fa: 	movswl	(%r10,%r15,2), %r15d
    000004ff: 	addl	%eax, %r15d
    00000502: 	leal	0x5(%r15), %eax
    00000506: 	addl	$0x2, %r15d
    0000050a: 	cmovnsl	%r15d, %eax
    0000050e: 	sarl	$0x2, %eax
    00000511: 	subw	(%rcx), %ax
    00000514: 	cwtl
    00000515: 	imull	$0x71, %eax, %eax
    00000518: 	sarl	$0x6, %eax
    0000051b: 	addw	(%rcx), %ax
    0000051e: 	movw	%ax, (%rcx)
    00000521: 	movl	0x14(%rsp), %eax
    00000525: 	cmpl	%eax, 0x8(%rsp)
    00000529: 	jle	.Ltmp474 # Offset: 1321
    0000052f: 	movl	0x1c(%rsp), %ecx
    00000533: 	addl	%r8d, %eax
    00000536: 	movswl	(%r13), %r15d
    0000053b: 	addq	%r12, %rsi
    0000053e: 	cltq
    00000540: 	addl	%edi, %ecx
    00000542: 	movswl	(%r10,%rax,2), %eax
    00000547: 	movslq	%ecx, %rcx
    0000054a: 	addq	%rcx, %rcx
    0000054d: 	addl	%eax, %r15d
    00000550: 	leaq	(%r10,%rcx), %r13
    00000554: 	movswl	(%r13), %eax
    00000559: 	addl	%r15d, %eax
    0000055c: 	movl	0x14(%rsp), %r15d
    00000561: 	addl	%r9d, %r15d
    00000564: 	movslq	%r15d, %r15
    00000567: 	movswl	(%r10,%r15,2), %r15d
    0000056c: 	addl	%eax, %r15d
    0000056f: 	leal	0x5(%r15), %eax
    00000573: 	addl	$0x2, %r15d
    00000577: 	cmovnsl	%r15d, %eax
    0000057b: 	sarl	$0x2, %eax
    0000057e: 	subw	(%rsi), %ax
    00000581: 	cwtl
    00000582: 	imull	$0x71, %eax, %eax
    00000585: 	sarl	$0x6, %eax
    00000588: 	addw	(%rsi), %ax
    0000058b: 	movw	%ax, (%rsi)
    0000058e: 	movl	0x1c(%rsp), %eax
    00000592: 	cmpl	%eax, 0x8(%rsp)
    00000596: 	jle	.Ltmp474 # Offset: 1430
    0000059c: 	movl	0x28(%rsp), %esi
    000005a0: 	addl	%r8d, %eax
    000005a3: 	movswl	(%r14), %r15d
    000005a7: 	addq	%r12, %rcx
    000005aa: 	cltq
    000005ac: 	addl	%edi, %esi
    000005ae: 	movswl	(%r10,%rax,2), %eax
    000005b3: 	movslq	%esi, %rsi
    000005b6: 	addq	%rsi, %rsi
    000005b9: 	addl	%eax, %r15d
    000005bc: 	leaq	(%r10,%rsi), %r14
    000005c0: 	movswl	(%r14), %eax
    000005c4: 	addl	%r15d, %eax
    000005c7: 	movl	0x1c(%rsp), %r15d
    000005cc: 	addl	%r9d, %r15d
    000005cf: 	movslq	%r15d, %r15
    000005d2: 	movswl	(%r10,%r15,2), %r15d
    000005d7: 	addl	%eax, %r15d
    000005da: 	leal	0x5(%r15), %eax
    000005de: 	addl	$0x2, %r15d
    000005e2: 	cmovnsl	%r15d, %eax
    000005e6: 	sarl	$0x2, %eax
    000005e9: 	subw	(%rcx), %ax
    000005ec: 	cwtl
    000005ed: 	imull	$0x71, %eax, %eax
    000005f0: 	sarl	$0x6, %eax
    000005f3: 	addw	(%rcx), %ax
    000005f6: 	movw	%ax, (%rcx)
    000005f9: 	movl	0x28(%rsp), %eax
    000005fd: 	cmpl	%eax, 0x8(%rsp)
    00000601: 	jle	.Ltmp474 # Offset: 1537
    00000607: 	movl	0x2c(%rsp), %ecx
    0000060b: 	addl	%r8d, %eax
    0000060e: 	movswl	(%r13), %r13d
    00000613: 	addq	%r12, %rsi
    00000616: 	cltq
    00000618: 	addl	%edi, %ecx
    0000061a: 	movswl	(%r10,%rax,2), %eax
    0000061f: 	movslq	%ecx, %rcx
    00000622: 	addq	%rcx, %rcx
    00000625: 	addl	%eax, %r13d
    00000628: 	leaq	(%r10,%rcx), %r15
    0000062c: 	movswl	(%r15), %eax
    00000630: 	addl	%r13d, %eax
    00000633: 	movl	0x28(%rsp), %r13d
    00000638: 	addl	%r9d, %r13d
    0000063b: 	movslq	%r13d, %r13
    0000063e: 	movswl	(%r10,%r13,2), %r13d
    00000643: 	addl	%eax, %r13d
    00000646: 	leal	0x5(%r13), %eax
    0000064a: 	addl	$0x2, %r13d
    0000064e: 	cmovnsl	%r13d, %eax
    00000652: 	sarl	$0x2, %eax
    00000655: 	subw	(%rsi), %ax
    00000658: 	cwtl
    00000659: 	imull	$0x71, %eax, %eax
    0000065c: 	sarl	$0x6, %eax
    0000065f: 	addw	(%rsi), %ax
    00000662: 	movw	%ax, (%rsi)
    00000665: 	movl	0x2c(%rsp), %eax
    00000669: 	cmpl	%eax, 0x8(%rsp)
    0000066d: 	jle	.Ltmp474 # Offset: 1645
    00000673: 	addl	%r8d, %eax
    00000676: 	movswl	(%r14), %esi
    0000067a: 	movl	0x78(%rsp), %r14d
    0000067f: 	addq	%r12, %rcx
    00000682: 	cltq
    00000684: 	movswl	(%r10,%rax,2), %eax
    00000689: 	addl	%eax, %esi
    0000068b: 	leal	(%rdi,%r14), %eax
    0000068f: 	cltq
    00000691: 	leaq	(%rax,%rax), %r13
    00000695: 	movswl	(%r10,%rax,2), %eax
    0000069a: 	addl	%esi, %eax
    0000069c: 	movl	0x2c(%rsp), %esi
    000006a0: 	addl	%r9d, %esi
    000006a3: 	movslq	%esi, %rsi
    000006a6: 	movswl	(%r10,%rsi,2), %esi
    000006ab: 	addl	%eax, %esi
    000006ad: 	leal	0x5(%rsi), %eax
    000006b0: 	addl	$0x2, %esi
    000006b3: 	cmovnsl	%esi, %eax
    000006b6: 	sarl	$0x2, %eax
    000006b9: 	subw	(%rcx), %ax
    000006bc: 	cwtl
    000006bd: 	imull	$0x71, %eax, %eax
    000006c0: 	sarl	$0x6, %eax
    000006c3: 	addw	(%rcx), %ax
    000006c6: 	movw	%ax, (%rcx)
    000006c9: 	cmpl	%r14d, 0x8(%rsp)
    000006ce: 	jle	.Ltmp474 # Offset: 1742
    000006d0: 	addl	%r14d, %r8d
    000006d3: 	movswl	(%r15), %ecx
    000006d7: 	addl	0xa8(%rsp), %edi
    000006de: 	addq	%r12, %r13
    000006e1: 	movslq	%r8d, %r8
    000006e4: 	movslq	%edi, %rdi
    000006e7: 	movswl	(%r10,%r8,2), %eax
    000006ec: 	addl	%eax, %ecx
    000006ee: 	movswl	(%r10,%rdi,2), %eax
    000006f3: 	addl	%ecx, %eax
    000006f5: 	leal	(%r9,%r14), %ecx
    000006f9: 	movslq	%ecx, %rcx
    000006fc: 	movswl	(%r10,%rcx,2), %ecx
    00000701: 	addl	%eax, %ecx
    00000703: 	leal	0x5(%rcx), %eax
    00000706: 	addl	$0x2, %ecx
    00000709: 	cmovnsl	%ecx, %eax
    0000070c: 	sarl	$0x2, %eax
    0000070f: 	subw	(%r13), %ax
    00000714: 	cwtl
    00000715: 	imull	$0x71, %eax, %eax
    00000718: 	sarl	$0x6, %eax
    0000071b: 	addw	(%r13), %ax
    00000720: 	movw	%ax, (%r13)
.Ltmp474:
    00000725: 	leaq	(%r11,%rdx), %rdi
.Ltmp488:
    00000729: 	subq	%r11, %rbx
    0000072c: 	subq	%r11, 0x30(%rsp)
    00000731: 	movq	%rdi, %rdx
    00000734: 	movq	%rbx, %rcx
    00000737: 	movl	0x20(%rsp), %ebx
    0000073b: 	cmpl	%ebx, 0x3c(%rsp)
    0000073f: 	jne	.Ltmp475 # Offset: 1855
.Ltmp471:
    00000745: 	cmpq	$0x0, 0x70(%rsp)
    0000074b: 	je	.Ltmp476 # Offset: 1867
    00000751: 	cmpq	$0x6, 0x90(%rsp)
    0000075a: 	jbe	.Ltmp477 # Offset: 1882
    00000760: 	movq	0x98(%rsp), %rdx
    00000768: 	xorl	%eax, %eax
    0000076a: 	pxor	%xmm1, %xmm1
    0000076e: 	pxor	%xmm7, %xmm7
    00000772: 	nopw	(%rax,%rax) # Size: 6
.Ltmp478:
    00000778: 	movdqu	(%r12,%rax), %xmm2
    0000077e: 	movdqu	(%r10,%rax), %xmm0
    00000784: 	movdqu	(%r10,%rax), %xmm3
    0000078a: 	addq	$0x10, %rax
    0000078e: 	psubw	%xmm2, %xmm3
    00000792: 	psubw	%xmm0, %xmm2
    00000796: 	movdqa	%xmm7, %xmm0
    0000079a: 	pcmpgtw	%xmm3, %xmm0
    0000079e: 	pand	%xmm0, %xmm2
    000007a2: 	pandn	%xmm3, %xmm0
    000007a6: 	movdqa	%xmm7, %xmm3
    000007aa: 	por	%xmm2, %xmm0
    000007ae: 	pcmpgtw	%xmm0, %xmm3
    000007b2: 	movdqa	%xmm0, %xmm2
    000007b6: 	punpcklwd	%xmm3, %xmm2
    000007ba: 	punpckhwd	%xmm3, %xmm0
    000007be: 	paddd	%xmm2, %xmm1
    000007c2: 	paddd	%xmm0, %xmm1
    000007c6: 	cmpq	%rax, %rdx
    000007c9: 	jne	.Ltmp478 # Offset: 1993
    000007cb: 	movdqa	%xmm1, %xmm0
    000007cf: 	movq	0x88(%rsp), %rax
    000007d7: 	psrldq	$0x8, %xmm0
    000007dc: 	paddd	%xmm0, %xmm1
    000007e0: 	movdqa	%xmm1, %xmm0
    000007e4: 	psrldq	$0x4, %xmm0
    000007e9: 	paddd	%xmm0, %xmm1
    000007ed: 	movd	%xmm1, %r8d
    000007f2: 	cmpq	%rax, 0x70(%rsp)
    000007f7: 	je	.Ltmp479 # Offset: 2039
    000007fd: 	movq	%rax, %rdx
.Ltmp491:
    00000800: 	movzwl	(%r12,%rdx,2), %esi
    00000805: 	movzwl	(%r10,%rdx,2), %eax
    0000080a: 	leaq	(%rdx,%rdx), %rcx
    0000080e: 	movq	0x70(%rsp), %rbx
    00000813: 	movl	%esi, %edi
    00000815: 	subl	%eax, %edi
    00000817: 	subw	%si, %ax
    0000081a: 	cmovsl	%edi, %eax
    0000081d: 	cwtl
    0000081e: 	addl	%eax, %r8d
    00000821: 	leaq	0x1(%rdx), %rax
    00000825: 	cmpq	%rax, %rbx
    00000828: 	jbe	.Ltmp480 # Offset: 2088
    0000082e: 	movzwl	0x2(%r12,%rcx), %esi
    00000834: 	movzwl	0x2(%r10,%rcx), %eax
    0000083a: 	movl	%esi, %edi
    0000083c: 	subl	%eax, %edi
    0000083e: 	subw	%si, %ax
    00000841: 	cmovsl	%edi, %eax
    00000844: 	cwtl
    00000845: 	addl	%eax, %r8d
    00000848: 	leaq	0x2(%rdx), %rax
    0000084c: 	cmpq	%rax, %rbx
    0000084f: 	jbe	.Ltmp480 # Offset: 2127
    00000855: 	movzwl	0x4(%r12,%rcx), %esi
    0000085b: 	movzwl	0x4(%r10,%rcx), %eax
    00000861: 	movl	%esi, %edi
    00000863: 	subl	%eax, %edi
    00000865: 	subw	%si, %ax
    00000868: 	cmovsl	%edi, %eax
    0000086b: 	cwtl
    0000086c: 	addl	%eax, %r8d
    0000086f: 	leaq	0x3(%rdx), %rax
    00000873: 	cmpq	%rax, %rbx
    00000876: 	jbe	.Ltmp480 # Offset: 2166
    0000087c: 	movzwl	0x6(%r12,%rcx), %esi
    00000882: 	movzwl	0x6(%r10,%rcx), %eax
    00000888: 	movl	%esi, %edi
    0000088a: 	subl	%eax, %edi
    0000088c: 	subw	%si, %ax
    0000088f: 	cmovsl	%edi, %eax
    00000892: 	cwtl
    00000893: 	addl	%eax, %r8d
    00000896: 	leaq	0x4(%rdx), %rax
    0000089a: 	cmpq	%rax, %rbx
    0000089d: 	jbe	.Ltmp480 # Offset: 2205
    0000089f: 	movzwl	0x8(%r12,%rcx), %esi
    000008a5: 	movzwl	0x8(%r10,%rcx), %eax
    000008ab: 	movl	%esi, %edi
    000008ad: 	subl	%eax, %edi
    000008af: 	subw	%si, %ax
    000008b2: 	cmovsl	%edi, %eax
    000008b5: 	cwtl
    000008b6: 	addl	%eax, %r8d
    000008b9: 	leaq	0x5(%rdx), %rax
    000008bd: 	cmpq	%rax, %rbx
    000008c0: 	jbe	.Ltmp480 # Offset: 2240
    000008c2: 	movzwl	0xa(%r12,%rcx), %esi
    000008c8: 	movzwl	0xa(%r10,%rcx), %eax
    000008ce: 	movl	%esi, %edi
    000008d0: 	subl	%eax, %edi
    000008d2: 	subw	%si, %ax
    000008d5: 	cmovsl	%edi, %eax
    000008d8: 	addq	$0x6, %rdx
    000008dc: 	cwtl
    000008dd: 	addl	%eax, %r8d
    000008e0: 	cmpq	%rdx, %rbx
    000008e3: 	jbe	.Ltmp480 # Offset: 2275
    000008e5: 	movzwl	0xc(%r12,%rcx), %edx
    000008eb: 	movzwl	0xc(%r10,%rcx), %eax
    000008f1: 	movl	%edx, %ecx
    000008f3: 	subl	%eax, %ecx
    000008f5: 	subw	%dx, %ax
    000008f8: 	cmovsl	%ecx, %eax
    000008fb: 	cwtl
    000008fc: 	addl	%eax, %r8d
.Ltmp480:
    000008ff: 	cmpq	$0x6, 0x90(%rsp)
    00000908: 	jbe	.Ltmp481 # Offset: 2312
.Ltmp479:
    0000090e: 	pxor	%xmm2, %xmm2
    00000912: 	movq	0x98(%rsp), %rdx
    0000091a: 	xorl	%eax, %eax
    0000091c: 	movdqa	%xmm2, %xmm7
.Ltmp482:
    00000920: 	movdqu	(%r12,%rax), %xmm1
    00000926: 	movdqu	(%r10,%rax), %xmm0
    0000092c: 	movdqu	(%r10,%rax), %xmm3
    00000932: 	addq	$0x10, %rax
    00000936: 	psubw	%xmm1, %xmm3
    0000093a: 	psubw	%xmm0, %xmm1
    0000093e: 	movdqa	%xmm7, %xmm0
    00000942: 	pcmpgtw	%xmm3, %xmm0
    00000946: 	pand	%xmm0, %xmm1
    0000094a: 	pandn	%xmm3, %xmm0
    0000094e: 	por	%xmm1, %xmm0
    00000952: 	pmaxsw	%xmm0, %xmm2
    00000956: 	cmpq	%rax, %rdx
    00000959: 	jne	.Ltmp482 # Offset: 2393
    0000095b: 	movdqa	%xmm2, %xmm0
    0000095f: 	movq	0x88(%rsp), %rax
    00000967: 	psrldq	$0x8, %xmm0
    0000096c: 	pmaxsw	%xmm0, %xmm2
    00000970: 	movdqa	%xmm2, %xmm0
    00000974: 	psrldq	$0x4, %xmm0
    00000979: 	pmaxsw	%xmm0, %xmm2
    0000097d: 	movdqa	%xmm2, %xmm0
    00000981: 	psrldq	$0x2, %xmm0
    00000986: 	pmaxsw	%xmm0, %xmm2
    0000098a: 	pextrw	$0x0, %xmm2, %ebx
    0000098f: 	cmpq	%rax, 0x70(%rsp)
    00000994: 	je	.Ltmp483 # Offset: 2452
.Ltmp490:
    0000099a: 	movzwl	(%r12,%rax,2), %esi
    0000099f: 	movzwl	(%r10,%rax,2), %ecx
    000009a4: 	leaq	(%rax,%rax), %rdx
    000009a8: 	movq	0x70(%rsp), %r9
    000009ad: 	movl	%esi, %edi
    000009af: 	subl	%ecx, %edi
    000009b1: 	subw	%si, %cx
    000009b4: 	cmovsl	%edi, %ecx
    000009b7: 	cmpw	%cx, %bx
    000009ba: 	cmovll	%ecx, %ebx
    000009bd: 	leaq	0x1(%rax), %rcx
    000009c1: 	cmpq	%rcx, %r9
    000009c4: 	jbe	.Ltmp483 # Offset: 2500
    000009ca: 	movzwl	0x2(%r12,%rdx), %esi
    000009d0: 	movzwl	0x2(%r10,%rdx), %ecx
    000009d6: 	movl	%esi, %edi
    000009d8: 	subl	%ecx, %edi
    000009da: 	subw	%si, %cx
    000009dd: 	cmovsl	%edi, %ecx
    000009e0: 	cmpw	%cx, %bx
    000009e3: 	cmovll	%ecx, %ebx
    000009e6: 	leaq	0x2(%rax), %rcx
    000009ea: 	cmpq	%rcx, %r9
    000009ed: 	jbe	.Ltmp483 # Offset: 2541
    000009f3: 	movzwl	0x4(%r12,%rdx), %esi
    000009f9: 	movzwl	0x4(%r10,%rdx), %ecx
    000009ff: 	movl	%esi, %edi
    00000a01: 	subl	%ecx, %edi
    00000a03: 	subw	%si, %cx
    00000a06: 	cmovsl	%edi, %ecx
    00000a09: 	cmpw	%cx, %bx
    00000a0c: 	cmovll	%ecx, %ebx
    00000a0f: 	leaq	0x3(%rax), %rcx
    00000a13: 	cmpq	%rcx, %r9
    00000a16: 	jbe	.Ltmp483 # Offset: 2582
    00000a1c: 	movzwl	0x6(%r12,%rdx), %esi
    00000a22: 	movzwl	0x6(%r10,%rdx), %ecx
    00000a28: 	movl	%esi, %edi
    00000a2a: 	subl	%ecx, %edi
    00000a2c: 	subw	%si, %cx
    00000a2f: 	cmovsl	%edi, %ecx
    00000a32: 	cmpw	%cx, %bx
    00000a35: 	cmovll	%ecx, %ebx
    00000a38: 	leaq	0x4(%rax), %rcx
    00000a3c: 	cmpq	%rcx, %r9
    00000a3f: 	jbe	.Ltmp483 # Offset: 2623
    00000a41: 	movzwl	0x8(%r12,%rdx), %esi
    00000a47: 	movzwl	0x8(%r10,%rdx), %ecx
    00000a4d: 	movl	%esi, %edi
    00000a4f: 	subl	%ecx, %edi
    00000a51: 	subw	%si, %cx
    00000a54: 	cmovsl	%edi, %ecx
    00000a57: 	cmpw	%cx, %bx
    00000a5a: 	cmovll	%ecx, %ebx
    00000a5d: 	leaq	0x5(%rax), %rcx
    00000a61: 	cmpq	%rcx, %r9
    00000a64: 	jbe	.Ltmp483 # Offset: 2660
    00000a66: 	movzwl	0xa(%r12,%rdx), %esi
    00000a6c: 	movzwl	0xa(%r10,%rdx), %ecx
    00000a72: 	movl	%esi, %edi
    00000a74: 	subl	%ecx, %edi
    00000a76: 	subw	%si, %cx
    00000a79: 	cmovsl	%edi, %ecx
    00000a7c: 	cmpw	%cx, %bx
    00000a7f: 	cmovll	%ecx, %ebx
    00000a82: 	addq	$0x6, %rax
    00000a86: 	cmpq	%rax, %r9
    00000a89: 	jbe	.Ltmp483 # Offset: 2697
    00000a8b: 	movzwl	0xc(%r10,%rdx), %eax
    00000a91: 	movzwl	0xc(%r12,%rdx), %edx
    00000a97: 	movl	%edx, %ecx
    00000a99: 	subl	%eax, %ecx
    00000a9b: 	subw	%dx, %ax
    00000a9e: 	cmovsl	%ecx, %eax
    00000aa1: 	cmpw	%ax, %bx
    00000aa4: 	cmovll	%eax, %ebx
.Ltmp483:
    00000aa7: 	movl	0x7c(%rsp), %eax
    00000aab: 	cmpl	%eax, 0x120(%rsp)
    00000ab2: 	jge	.Ltmp484 # Offset: 2738
    00000ab4: 	testw	%bx, %bx
    00000ab7: 	jle	.Ltmp485 # Offset: 2743
    00000abd: 	cmpl	$0x9, %r8d
    00000ac1: 	jle	.Ltmp485 # Offset: 2753
.Ltmp484:
    00000ac7: 	addl	$0x1, 0x7c(%rsp)
    00000acc: 	movq	%r12, %rax
    00000acf: 	movl	0x7c(%rsp), %edi
    00000ad3: 	movq	%r10, %r12
    00000ad6: 	cmpl	0xac(%rsp), %edi
    00000add: 	je	.Ltmp485 # Offset: 2781
    00000ae3: 	movq	%rax, %r10
    00000ae6: 	jmp	.Ltmp486 # Offset: 2790
    00000aeb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp472:
    00000af0: 	movq	0x30(%rsp), %rax
    00000af5: 	movq	0xa0(%rsp), %r8
    00000afd: 	leaq	(%r11,%rdx), %rdi
    00000b01: 	addq	0x80(%rsp), %rcx
    00000b09: 	leaq	(%rdi,%rax), %rsi
    00000b0d: 	leaq	(%rcx,%rax), %r13
    00000b11: 	addq	%rdx, %r8
    00000b14: 	addq	%r10, %rsi
    00000b17: 	addq	%r10, %r13
    00000b1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp487:
    00000b20: 	movswl	0x2(%r13,%rdx), %eax
    00000b26: 	movswl	(%r10,%rdx), %ecx
    00000b2b: 	addl	%eax, %ecx
    00000b2d: 	movswl	0x4(%r10,%rdx), %eax
    00000b33: 	addl	%ecx, %eax
    00000b35: 	movswl	0x2(%rsi,%rdx), %ecx
    00000b3a: 	addl	%eax, %ecx
    00000b3c: 	leal	0x5(%rcx), %eax
    00000b3f: 	addl	$0x2, %ecx
    00000b42: 	cmovnsl	%ecx, %eax
    00000b45: 	sarl	$0x2, %eax
    00000b48: 	subw	0x2(%r12,%rdx), %ax
    00000b4e: 	cwtl
    00000b4f: 	imull	$0x71, %eax, %eax
    00000b52: 	sarl	$0x6, %eax
    00000b55: 	addw	0x2(%r12,%rdx), %ax
    00000b5b: 	movw	%ax, 0x2(%r12,%rdx)
    00000b61: 	addq	$0x2, %rdx
    00000b65: 	cmpq	%r8, %rdx
    00000b68: 	jne	.Ltmp487 # Offset: 2920
    00000b6a: 	jmp	.Ltmp488 # Offset: 2922
.Ltmp476:
    00000b6f: 	movl	0x7c(%rsp), %eax
    00000b73: 	cmpl	%eax, 0x120(%rsp)
    00000b7a: 	jl	.Ltmp489 # Offset: 2938
    00000b80: 	xorl	%r8d, %r8d
    00000b83: 	xorl	%ebx, %ebx
    00000b85: 	jmp	.Ltmp484 # Offset: 2949
.Ltmp481:
    00000b8a: 	xorl	%ebx, %ebx
    00000b8c: 	xorl	%eax, %eax
    00000b8e: 	jmp	.Ltmp490 # Offset: 2958
.Ltmp477:
    00000b93: 	xorl	%r8d, %r8d
    00000b96: 	xorl	%edx, %edx
    00000b98: 	jmp	.Ltmp491 # Offset: 2968
.Ltmp485:
    00000b9d: 	movswl	%bx, %eax
    00000ba0: 	movl	%eax, 0x8(%rsp)
.Ltmp495:
    00000ba4: 	movl	%r8d, 0x10(%rsp)
    00000ba9: 	callq	clock@PLT # Offset: 2985
    00000bae: 	movl	0xb8(%rsp), %edi
    00000bb5: 	pxor	%xmm0, %xmm0
    00000bb9: 	movzwl	0xce(%rsp), %r14d
    00000bc2: 	movq	%rax, end_time(%rip)
    00000bc9: 	subq	start_time(%rip), %rax
    00000bd0: 	cvtsi2sd	%rax, %xmm0
    00000bd5: 	movl	%edi, %eax
    00000bd7: 	divsd	DATAat0x49520(%rip), %xmm0
    00000bdf: 	movl	0x10(%rsp), %r8d
    00000be4: 	shrl	$0x1f, %eax
    00000be7: 	movq	%xmm0, %r13
    00000bec: 	addl	%edi, %eax
    00000bee: 	movl	0xbc(%rsp), %edi
    00000bf5: 	sarl	%eax
    00000bf7: 	movl	%edi, %edx
    00000bf9: 	imull	%edi, %eax
    00000bfc: 	shrl	$0x1f, %edx
    00000bff: 	addl	%edi, %edx
    00000c01: 	sarl	%edx
    00000c03: 	addl	%edx, %eax
    00000c05: 	cltq
    00000c07: 	subw	(%r12,%rax,2), %r14w
    00000c0c: 	movl	0x7c(%rsp), %eax
    00000c10: 	cmpl	%eax, iterations(%rip)
    00000c16: 	jg	.Ltmp492 # Offset: 3094
    00000c1c: 	cmpl	$0xa, %r8d
    00000c20: 	jle	.Ltmp492 # Offset: 3104
    00000c26: 	cmpw	$0x1, %bx
    00000c2a: 	jle	.Ltmp492 # Offset: 3114
    00000c30: 	movq	0xc0(%rsp), %rax
    00000c38: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000c3f: 	movq	%r15, %rdi
    00000c42: 	movq	0x8(%rax), %rdx
    00000c46: 	movq	(%rax), %rsi
    00000c49: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3145
    00000c4e: 	movl	$0x11, %edx
    00000c53: 	leaq	DATAat0x49199(%rip), %rsi
    00000c5a: 	movq	%rax, %rdi
    00000c5d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3165
    00000c62: 	movl	0x10(%rsp), %r8d
.Ltmp494:
    00000c67: 	movl	$0x4, %edx
    00000c6c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000c73: 	movq	%r15, %rdi
    00000c76: 	movl	%r8d, 0x10(%rsp)
    00000c7b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3195
    00000c80: 	movl	0x7c(%rsp), %esi
    00000c84: 	movq	%r15, %rdi
    00000c87: 	callq	_ZNSolsEi@PLT # Offset: 3207
    00000c8c: 	movl	$0xb, %edx
    00000c91: 	leaq	DATAat0x491bb(%rip), %rsi
    00000c98: 	movq	%rax, %rdi
    00000c9b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3227
    00000ca0: 	movl	$0xa, %edx
    00000ca5: 	leaq	DATAat0x491c7(%rip), %rsi
    00000cac: 	movq	%r15, %rdi
    00000caf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3247
    00000cb4: 	movl	0x10(%rsp), %esi
    00000cb8: 	movq	%r15, %rdi
    00000cbb: 	callq	_ZNSolsEi@PLT # Offset: 3259
    00000cc0: 	movl	$0x7, %edx
    00000cc5: 	leaq	DATAat0x491d2(%rip), %rsi
    00000ccc: 	movq	%rax, %rdi
    00000ccf: 	movq	%rax, %rbp
    00000cd2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3282
    00000cd7: 	movl	0x8(%rsp), %esi
    00000cdb: 	movq	%rbp, %rdi
    00000cde: 	callq	_ZNSolsEs@PLT # Offset: 3294
    00000ce3: 	movl	$0x10, %edx
    00000ce8: 	leaq	DATAat0x491da(%rip), %rsi
    00000cef: 	movq	%rax, %rbp
    00000cf2: 	movq	%rax, %rdi
    00000cf5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3317
    00000cfa: 	movq	%rbp, %rdi
    00000cfd: 	movswl	%r14w, %esi
    00000d01: 	callq	_ZNSolsEs@PLT # Offset: 3329
    00000d06: 	movl	$0x8, %edx
    00000d0b: 	leaq	DATAat0x491eb(%rip), %rsi
    00000d12: 	movq	%rax, %rbp
    00000d15: 	movq	%rax, %rdi
    00000d18: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3352
    00000d1d: 	movq	%r13, %xmm0
    00000d22: 	movq	%rbp, %rdi
    00000d25: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3365
    00000d2a: 	movl	$0x2, %edx
    00000d2f: 	leaq	DATAat0x491f4(%rip), %rsi
    00000d36: 	movq	%rax, %rdi
    00000d39: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3385
    00000d3e: 	movl	0xc8(%rsp), %eax
    00000d45: 	movl	%eax, iterations(%rip)
    00000d4b: 	movq	0xd8(%rsp), %rax
    00000d53: 	subq	%fs:0x28, %rax
    00000d5c: 	jne	.Ltmp493 # Offset: 3420
    00000d5e: 	addq	$0xe8, %rsp
    00000d65: 	popq	%rbx
    00000d66: 	popq	%rbp
    00000d67: 	popq	%r12
    00000d69: 	popq	%r13
    00000d6b: 	popq	%r14
    00000d6d: 	popq	%r15
    00000d6f: 	retq # Offset: 3439
.Ltmp492:
    00000d70: 	movq	0xc0(%rsp), %rax
    00000d78: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000d7f: 	movl	%r8d, 0x10(%rsp)
    00000d84: 	movq	%r15, %rdi
    00000d87: 	movq	0x8(%rax), %rdx
    00000d8b: 	movq	(%rax), %rsi
    00000d8e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3470
    00000d93: 	movl	$0xa, %edx
    00000d98: 	leaq	DATAat0x491ab(%rip), %rsi
    00000d9f: 	movq	%rax, %rdi
    00000da2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3490
    00000da7: 	movl	0x10(%rsp), %r8d
    00000dac: 	jmp	.Ltmp494 # Offset: 3500
.Ltmp489:
    00000db1: 	movl	$0x0, 0x8(%rsp)
    00000db9: 	xorl	%ebx, %ebx
    00000dbb: 	xorl	%r8d, %r8d
    00000dbe: 	jmp	.Ltmp495 # Offset: 3518
.Ltmp493:
    00000dc3: 	callq	__stack_chk_fail@PLT # Offset: 3523
    00000dc8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp470:
    00000dd0: 	movl	$0x0, 0x8(%rsp)
    00000dd8: 	xorl	%ebx, %ebx
    00000dda: 	xorl	%r8d, %r8d
    00000ddd: 	movl	$0x0, 0x7c(%rsp)
    00000de5: 	jmp	.Ltmp495 # Offset: 3557
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi21jacobi_sor2D_reversedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x168b0
  Size        : 0x768
  MaxSize     : 0x770
  Offset      : 0x168b0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi21jacobi_sor2D_reversedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movl	%edx, 0x38(%rsp)
    00000028: 	movl	%r14d, %edx
    0000002b: 	movl	%ecx, 0x3c(%rsp)
    0000002f: 	leaq	0x50(%rsp), %rcx
    00000034: 	movq	%r9, 0x40(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x58(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movq	DATAat0x49530(%rip), %rax
    00000050: 	movq	%rax, 0x50(%rsp)
    00000055: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 85
    0000005a: 	movl	%r15d, %esi
    0000005d: 	imull	%r14d, %esi
    00000061: 	movw	%ax, 0x4e(%rsp)
    00000066: 	movslq	%esi, %r13
    00000069: 	testl	%r13d, %r13d
    0000006c: 	jle	.Ltmp496 # Offset: 108
    0000006e: 	movslq	%r13d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	addq	%rdx, %rdx
    0000007a: 	callq	memmove@PLT # Offset: 122
.Ltmp496:
    0000007f: 	movl	iterations(%rip), %eax
    00000085: 	movl	$0x2710, iterations(%rip)
    0000008f: 	movl	%eax, 0x48(%rsp)
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	movq	%rax, start_time(%rip)
    0000009f: 	movl	iterations(%rip), %eax
    000000a5: 	movl	%eax, 0x18(%rsp)
    000000a9: 	testl	%eax, %eax
    000000ab: 	jle	.Ltmp497 # Offset: 171
    000000b1: 	movl	0x38(%rsp), %esi
    000000b5: 	movl	0x3c(%rsp), %edi
    000000b9: 	movl	%r12d, %r10d
    000000bc: 	movq	%r13, %r14
    000000bf: 	negl	%r10d
    000000c2: 	shrq	$0x3, %r14
    000000c6: 	pxor	%xmm3, %xmm3
    000000ca: 	leal	-0x2(%rsi), %eax
    000000cd: 	subl	$0x2, %edi
    000000d0: 	movslq	%r10d, %r10
    000000d3: 	shlq	$0x4, %r14
    000000d7: 	movl	%eax, 0xc(%rsp)
    000000db: 	imull	%r12d, %eax
    000000df: 	addq	%r10, %r10
    000000e2: 	movslq	%edi, %r15
    000000e5: 	movl	%edi, 0x1c(%rsp)
    000000e9: 	cltq
    000000eb: 	addq	%rax, %rax
    000000ee: 	movq	%rax, 0x20(%rsp)
    000000f3: 	leal	-0x3(%rsi), %eax
    000000f6: 	imull	%r12d, %eax
    000000fa: 	cltq
    000000fc: 	addq	%rax, %rax
    000000ff: 	movq	%rax, 0x28(%rsp)
    00000104: 	leal	-0x1(%rsi), %eax
    00000107: 	imull	%r12d, %eax
    0000010b: 	xorl	%r12d, %r12d
    0000010e: 	cltq
    00000110: 	addq	%rax, %rax
    00000113: 	movq	%rax, 0x30(%rsp)
    00000118: 	leaq	-0x1(%r13), %rax
    0000011c: 	movq	%rax, 0x10(%rsp)
    00000121: 	movq	%r13, %rax
    00000124: 	andq	$-0x8, %rax
    00000128: 	movq	%rax, (%rsp)
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp511:
    00000130: 	movl	0xc(%rsp), %edx
    00000134: 	testl	%edx, %edx
    00000136: 	jle	.Ltmp498 # Offset: 310
    0000013c: 	movl	0x1c(%rsp), %eax
    00000140: 	testl	%eax, %eax
    00000142: 	jle	.Ltmp498 # Offset: 322
    00000148: 	movq	0x20(%rsp), %rax
    0000014d: 	movq	0x28(%rsp), %rsi
    00000152: 	movl	0xc(%rsp), %r11d
    00000157: 	leaq	(%rbp,%rax), %rdi
    0000015c: 	leaq	(%rbx,%rsi), %r9
    00000160: 	leaq	(%rbx,%rax), %rsi
    00000164: 	movq	0x30(%rsp), %rax
    00000169: 	leaq	(%rbx,%rax), %r8
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp500:
    00000170: 	subl	$0x1, %r11d
    00000174: 	movq	%r15, %rdx
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp499:
    00000180: 	movswl	(%r9,%rdx,2), %eax
    00000185: 	movswl	-0x2(%rsi,%rdx,2), %ecx
    0000018a: 	addl	%eax, %ecx
    0000018c: 	movswl	0x2(%rsi,%rdx,2), %eax
    00000191: 	addl	%ecx, %eax
    00000193: 	movswl	(%r8,%rdx,2), %ecx
    00000198: 	addl	%eax, %ecx
    0000019a: 	leal	0x5(%rcx), %eax
    0000019d: 	addl	$0x2, %ecx
    000001a0: 	cmovnsl	%ecx, %eax
    000001a3: 	sarl	$0x2, %eax
    000001a6: 	subw	(%rdi,%rdx,2), %ax
    000001aa: 	cwtl
    000001ab: 	imull	$0x71, %eax, %eax
    000001ae: 	sarl	$0x6, %eax
    000001b1: 	addw	(%rdi,%rdx,2), %ax
    000001b5: 	movw	%ax, (%rdi,%rdx,2)
    000001b9: 	subq	$0x1, %rdx
    000001bd: 	testl	%edx, %edx
    000001bf: 	jg	.Ltmp499 # Offset: 447
    000001c1: 	addq	%r10, %rdi
    000001c4: 	addq	%r10, %r9
    000001c7: 	addq	%r10, %rsi
    000001ca: 	addq	%r10, %r8
    000001cd: 	testl	%r11d, %r11d
    000001d0: 	jne	.Ltmp500 # Offset: 464
.Ltmp498:
    000001d2: 	testq	%r13, %r13
    000001d5: 	je	.Ltmp501 # Offset: 469
    000001db: 	cmpq	$0x6, 0x10(%rsp)
    000001e1: 	jbe	.Ltmp502 # Offset: 481
    000001e7: 	xorl	%eax, %eax
    000001e9: 	pxor	%xmm1, %xmm1
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp503:
    000001f0: 	movdqu	(%rbp,%rax), %xmm5
    000001f6: 	movdqu	(%rbx,%rax), %xmm4
    000001fb: 	movdqa	%xmm3, %xmm0
    000001ff: 	movdqu	(%rbx,%rax), %xmm6
    00000204: 	addq	$0x10, %rax
    00000208: 	psubw	%xmm5, %xmm4
    0000020c: 	movdqa	%xmm5, %xmm2
    00000210: 	pcmpgtw	%xmm4, %xmm0
    00000214: 	psubw	%xmm6, %xmm2
    00000218: 	pand	%xmm0, %xmm2
    0000021c: 	pandn	%xmm4, %xmm0
    00000220: 	movdqa	%xmm3, %xmm4
    00000224: 	por	%xmm2, %xmm0
    00000228: 	pcmpgtw	%xmm0, %xmm4
    0000022c: 	movdqa	%xmm0, %xmm2
    00000230: 	punpcklwd	%xmm4, %xmm2
    00000234: 	punpckhwd	%xmm4, %xmm0
    00000238: 	paddd	%xmm2, %xmm1
    0000023c: 	paddd	%xmm0, %xmm1
    00000240: 	cmpq	%rax, %r14
    00000243: 	jne	.Ltmp503 # Offset: 579
    00000245: 	movdqa	%xmm1, %xmm0
    00000249: 	movq	(%rsp), %rax
    0000024d: 	psrldq	$0x8, %xmm0
    00000252: 	paddd	%xmm0, %xmm1
    00000256: 	movdqa	%xmm1, %xmm0
    0000025a: 	psrldq	$0x4, %xmm0
    0000025f: 	paddd	%xmm0, %xmm1
    00000263: 	movd	%xmm1, %r8d
    00000268: 	cmpq	%rax, %r13
    0000026b: 	je	.Ltmp504 # Offset: 619
    00000271: 	movq	%rax, %rdx
.Ltmp514:
    00000274: 	movzwl	(%rbp,%rdx,2), %esi
    00000279: 	movzwl	(%rbx,%rdx,2), %eax
    0000027d: 	leaq	(%rdx,%rdx), %rcx
    00000281: 	movl	%esi, %edi
    00000283: 	subl	%eax, %edi
    00000285: 	subw	%si, %ax
    00000288: 	cmovsl	%edi, %eax
    0000028b: 	cwtl
    0000028c: 	addl	%eax, %r8d
    0000028f: 	leaq	0x1(%rdx), %rax
    00000293: 	cmpq	%rax, %r13
    00000296: 	jbe	.Ltmp505 # Offset: 662
    0000029c: 	movzwl	0x2(%rbp,%rcx), %esi
    000002a1: 	movzwl	0x2(%rbx,%rcx), %eax
    000002a6: 	movl	%esi, %edi
    000002a8: 	subl	%eax, %edi
    000002aa: 	subw	%si, %ax
    000002ad: 	cmovsl	%edi, %eax
    000002b0: 	cwtl
    000002b1: 	addl	%eax, %r8d
    000002b4: 	leaq	0x2(%rdx), %rax
    000002b8: 	cmpq	%rax, %r13
    000002bb: 	jbe	.Ltmp505 # Offset: 699
    000002c1: 	movzwl	0x4(%rbp,%rcx), %esi
    000002c6: 	movzwl	0x4(%rbx,%rcx), %eax
    000002cb: 	movl	%esi, %edi
    000002cd: 	subl	%eax, %edi
    000002cf: 	subw	%si, %ax
    000002d2: 	cmovsl	%edi, %eax
    000002d5: 	cwtl
    000002d6: 	addl	%eax, %r8d
    000002d9: 	leaq	0x3(%rdx), %rax
    000002dd: 	cmpq	%rax, %r13
    000002e0: 	jbe	.Ltmp505 # Offset: 736
    000002e2: 	movzwl	0x6(%rbp,%rcx), %esi
    000002e7: 	movzwl	0x6(%rbx,%rcx), %eax
    000002ec: 	movl	%esi, %edi
    000002ee: 	subl	%eax, %edi
    000002f0: 	subw	%si, %ax
    000002f3: 	cmovsl	%edi, %eax
    000002f6: 	cwtl
    000002f7: 	addl	%eax, %r8d
    000002fa: 	leaq	0x4(%rdx), %rax
    000002fe: 	cmpq	%rax, %r13
    00000301: 	jbe	.Ltmp505 # Offset: 769
    00000303: 	movzwl	0x8(%rbp,%rcx), %esi
    00000308: 	movzwl	0x8(%rbx,%rcx), %eax
    0000030d: 	movl	%esi, %edi
    0000030f: 	subl	%eax, %edi
    00000311: 	subw	%si, %ax
    00000314: 	cmovsl	%edi, %eax
    00000317: 	cwtl
    00000318: 	addl	%eax, %r8d
    0000031b: 	leaq	0x5(%rdx), %rax
    0000031f: 	cmpq	%rax, %r13
    00000322: 	jbe	.Ltmp505 # Offset: 802
    00000324: 	movzwl	0xa(%rbp,%rcx), %esi
    00000329: 	movzwl	0xa(%rbx,%rcx), %eax
    0000032e: 	movl	%esi, %edi
    00000330: 	subl	%eax, %edi
    00000332: 	subw	%si, %ax
    00000335: 	cmovsl	%edi, %eax
    00000338: 	addq	$0x6, %rdx
    0000033c: 	cwtl
    0000033d: 	addl	%eax, %r8d
    00000340: 	cmpq	%rdx, %r13
    00000343: 	jbe	.Ltmp505 # Offset: 835
    00000345: 	movzwl	0xc(%rbp,%rcx), %edx
    0000034a: 	movzwl	0xc(%rbx,%rcx), %eax
    0000034f: 	movl	%edx, %ecx
    00000351: 	subl	%eax, %ecx
    00000353: 	subw	%dx, %ax
    00000356: 	cmovsl	%ecx, %eax
    00000359: 	cwtl
    0000035a: 	addl	%eax, %r8d
.Ltmp505:
    0000035d: 	cmpq	$0x6, 0x10(%rsp)
    00000363: 	jbe	.Ltmp506 # Offset: 867
.Ltmp504:
    00000369: 	xorl	%eax, %eax
    0000036b: 	pxor	%xmm2, %xmm2
    0000036f: 	nop # Size: 1
.Ltmp507:
    00000370: 	movdqu	(%rbp,%rax), %xmm7
    00000376: 	movdqu	(%rbx,%rax), %xmm4
    0000037b: 	movdqa	%xmm3, %xmm0
    0000037f: 	movdqu	(%rbx,%rax), %xmm5
    00000384: 	addq	$0x10, %rax
    00000388: 	psubw	%xmm7, %xmm4
    0000038c: 	movdqa	%xmm7, %xmm1
    00000390: 	pcmpgtw	%xmm4, %xmm0
    00000394: 	psubw	%xmm5, %xmm1
    00000398: 	pand	%xmm0, %xmm1
    0000039c: 	pandn	%xmm4, %xmm0
    000003a0: 	por	%xmm1, %xmm0
    000003a4: 	pmaxsw	%xmm0, %xmm2
    000003a8: 	cmpq	%rax, %r14
    000003ab: 	jne	.Ltmp507 # Offset: 939
    000003ad: 	movdqa	%xmm2, %xmm0
    000003b1: 	movq	(%rsp), %rax
    000003b5: 	psrldq	$0x8, %xmm0
    000003ba: 	pmaxsw	%xmm0, %xmm2
    000003be: 	movdqa	%xmm2, %xmm0
    000003c2: 	psrldq	$0x4, %xmm0
    000003c7: 	pmaxsw	%xmm0, %xmm2
    000003cb: 	movdqa	%xmm2, %xmm0
    000003cf: 	psrldq	$0x2, %xmm0
    000003d4: 	pmaxsw	%xmm0, %xmm2
    000003d8: 	pextrw	$0x0, %xmm2, %edx
    000003dd: 	cmpq	%rax, %r13
    000003e0: 	je	.Ltmp508 # Offset: 992
.Ltmp513:
    000003e6: 	movzwl	(%rbp,%rax,2), %edi
    000003eb: 	movzwl	(%rbx,%rax,2), %esi
    000003ef: 	leaq	(%rax,%rax), %rcx
    000003f3: 	movl	%edi, %r9d
    000003f6: 	subl	%esi, %r9d
    000003f9: 	subw	%di, %si
    000003fc: 	cmovsl	%r9d, %esi
    00000400: 	cmpw	%si, %dx
    00000403: 	cmovll	%esi, %edx
    00000406: 	leaq	0x1(%rax), %rsi
    0000040a: 	cmpq	%rsi, %r13
    0000040d: 	jbe	.Ltmp508 # Offset: 1037
    00000413: 	movzwl	0x2(%rbp,%rcx), %edi
    00000418: 	movzwl	0x2(%rbx,%rcx), %esi
    0000041d: 	movl	%edi, %r9d
    00000420: 	subl	%esi, %r9d
    00000423: 	subw	%di, %si
    00000426: 	cmovsl	%r9d, %esi
    0000042a: 	cmpw	%si, %dx
    0000042d: 	cmovll	%esi, %edx
    00000430: 	leaq	0x2(%rax), %rsi
    00000434: 	cmpq	%r13, %rsi
    00000437: 	jae	.Ltmp508 # Offset: 1079
    0000043d: 	movzwl	0x4(%rbp,%rcx), %edi
    00000442: 	movzwl	0x4(%rbx,%rcx), %esi
    00000447: 	movl	%edi, %r9d
    0000044a: 	subl	%esi, %r9d
    0000044d: 	subw	%di, %si
    00000450: 	cmovsl	%r9d, %esi
    00000454: 	cmpw	%si, %dx
    00000457: 	cmovll	%esi, %edx
    0000045a: 	leaq	0x3(%rax), %rsi
    0000045e: 	cmpq	%rsi, %r13
    00000461: 	jbe	.Ltmp508 # Offset: 1121
    00000467: 	movzwl	0x6(%rbp,%rcx), %edi
    0000046c: 	movzwl	0x6(%rbx,%rcx), %esi
    00000471: 	movl	%edi, %r9d
    00000474: 	subl	%esi, %r9d
    00000477: 	subw	%di, %si
    0000047a: 	cmovsl	%r9d, %esi
    0000047e: 	cmpw	%si, %dx
    00000481: 	cmovll	%esi, %edx
    00000484: 	leaq	0x4(%rax), %rsi
    00000488: 	cmpq	%rsi, %r13
    0000048b: 	jbe	.Ltmp508 # Offset: 1163
    0000048d: 	movzwl	0x8(%rbp,%rcx), %edi
    00000492: 	movzwl	0x8(%rbx,%rcx), %esi
    00000497: 	movl	%edi, %r9d
    0000049a: 	subl	%esi, %r9d
    0000049d: 	subw	%di, %si
    000004a0: 	cmovsl	%r9d, %esi
    000004a4: 	cmpw	%si, %dx
    000004a7: 	cmovll	%esi, %edx
    000004aa: 	leaq	0x5(%rax), %rsi
    000004ae: 	cmpq	%rsi, %r13
    000004b1: 	jbe	.Ltmp508 # Offset: 1201
    000004b3: 	movzwl	0xa(%rbp,%rcx), %edi
    000004b8: 	movzwl	0xa(%rbx,%rcx), %esi
    000004bd: 	movl	%edi, %r9d
    000004c0: 	subl	%esi, %r9d
    000004c3: 	subw	%di, %si
    000004c6: 	cmovsl	%r9d, %esi
    000004ca: 	cmpw	%si, %dx
    000004cd: 	cmovll	%esi, %edx
    000004d0: 	addq	$0x6, %rax
    000004d4: 	cmpq	%rax, %r13
    000004d7: 	jbe	.Ltmp508 # Offset: 1239
    000004d9: 	movzwl	0xc(%rbx,%rcx), %eax
    000004de: 	movzwl	0xc(%rbp,%rcx), %ecx
    000004e3: 	movl	%ecx, %esi
    000004e5: 	subl	%eax, %esi
    000004e7: 	subw	%cx, %ax
    000004ea: 	cmovsl	%esi, %eax
    000004ed: 	cmpw	%ax, %dx
    000004f0: 	cmovll	%eax, %edx
.Ltmp508:
    000004f3: 	cmpl	%r12d, 0xa0(%rsp)
    000004fb: 	jge	.Ltmp509 # Offset: 1275
    000004fd: 	testw	%dx, %dx
    00000500: 	jle	.Ltmp510 # Offset: 1280
    00000502: 	cmpl	$0x9, %r8d
    00000506: 	jle	.Ltmp510 # Offset: 1286
.Ltmp509:
    00000508: 	movq	%rbp, %rax
    0000050b: 	addl	$0x1, %r12d
    0000050f: 	movq	%rbx, %rbp
    00000512: 	cmpl	0x18(%rsp), %r12d
    00000517: 	je	.Ltmp510 # Offset: 1303
    00000519: 	movq	%rax, %rbx
    0000051c: 	jmp	.Ltmp511 # Offset: 1308
.Ltmp501:
    00000521: 	cmpl	%r12d, 0xa0(%rsp)
    00000529: 	jl	.Ltmp512 # Offset: 1321
    0000052f: 	xorl	%r8d, %r8d
    00000532: 	xorl	%edx, %edx
    00000534: 	jmp	.Ltmp509 # Offset: 1332
.Ltmp506:
    00000536: 	xorl	%edx, %edx
    00000538: 	xorl	%eax, %eax
    0000053a: 	jmp	.Ltmp513 # Offset: 1338
.Ltmp502:
    0000053f: 	xorl	%r8d, %r8d
    00000542: 	xorl	%edx, %edx
    00000544: 	jmp	.Ltmp514 # Offset: 1348
.Ltmp510:
    00000549: 	movswl	%dx, %r13d
.Ltmp518:
    0000054d: 	movl	%r8d, 0xc(%rsp)
    00000552: 	movl	%edx, (%rsp)
    00000555: 	callq	clock@PLT # Offset: 1365
    0000055a: 	movl	0x38(%rsp), %esi
    0000055e: 	pxor	%xmm0, %xmm0
    00000562: 	movl	0xc(%rsp), %r8d
    00000567: 	movq	%rax, end_time(%rip)
    0000056e: 	subq	start_time(%rip), %rax
    00000575: 	cvtsi2sd	%rax, %xmm0
    0000057a: 	movl	%esi, %eax
    0000057c: 	divsd	DATAat0x49520(%rip), %xmm0
    00000584: 	movq	%xmm0, %rbx
    00000589: 	shrl	$0x1f, %eax
    0000058c: 	addl	%esi, %eax
    0000058e: 	movl	0x3c(%rsp), %esi
    00000592: 	sarl	%eax
    00000594: 	movl	%esi, %ecx
    00000596: 	imull	%esi, %eax
    00000599: 	shrl	$0x1f, %ecx
    0000059c: 	addl	%esi, %ecx
    0000059e: 	movzwl	0x4e(%rsp), %esi
    000005a3: 	sarl	%ecx
    000005a5: 	addl	%ecx, %eax
    000005a7: 	cltq
    000005a9: 	subw	(%rbp,%rax,2), %si
    000005ae: 	cmpl	%r12d, iterations(%rip)
    000005b5: 	movl	%esi, %ebp
    000005b7: 	jg	.Ltmp515 # Offset: 1463
    000005bd: 	cmpl	$0xa, %r8d
    000005c1: 	jle	.Ltmp515 # Offset: 1473
    000005c7: 	movl	(%rsp), %edx
    000005ca: 	cmpw	$0x1, %dx
    000005ce: 	jle	.Ltmp515 # Offset: 1486
    000005d4: 	movq	0x40(%rsp), %rax
    000005d9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000005e0: 	movl	%r8d, (%rsp)
    000005e4: 	movq	%r14, %rdi
    000005e7: 	movq	0x8(%rax), %rdx
    000005eb: 	movq	(%rax), %rsi
    000005ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1518
    000005f3: 	movl	$0x11, %edx
    000005f8: 	leaq	DATAat0x49199(%rip), %rsi
    000005ff: 	movq	%rax, %rdi
    00000602: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1538
    00000607: 	movl	(%rsp), %r8d
.Ltmp517:
    0000060b: 	movl	$0x4, %edx
    00000610: 	leaq	DATAat0x491b6(%rip), %rsi
    00000617: 	movq	%r14, %rdi
    0000061a: 	movl	%r8d, (%rsp)
    0000061e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1566
    00000623: 	movl	%r12d, %esi
    00000626: 	movq	%r14, %rdi
    00000629: 	callq	_ZNSolsEi@PLT # Offset: 1577
    0000062e: 	movl	$0xb, %edx
    00000633: 	leaq	DATAat0x491bb(%rip), %rsi
    0000063a: 	movq	%rax, %rdi
    0000063d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1597
    00000642: 	movl	$0xa, %edx
    00000647: 	leaq	DATAat0x491c7(%rip), %rsi
    0000064e: 	movq	%r14, %rdi
    00000651: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1617
    00000656: 	movl	(%rsp), %esi
    00000659: 	movq	%r14, %rdi
    0000065c: 	callq	_ZNSolsEi@PLT # Offset: 1628
    00000661: 	movl	$0x7, %edx
    00000666: 	leaq	DATAat0x491d2(%rip), %rsi
    0000066d: 	movq	%rax, %r12
    00000670: 	movq	%rax, %rdi
    00000673: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1651
    00000678: 	movq	%r12, %rdi
    0000067b: 	movl	%r13d, %esi
    0000067e: 	callq	_ZNSolsEs@PLT # Offset: 1662
    00000683: 	movl	$0x10, %edx
    00000688: 	leaq	DATAat0x491da(%rip), %rsi
    0000068f: 	movq	%rax, %r12
    00000692: 	movq	%rax, %rdi
    00000695: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1685
    0000069a: 	movswl	%bp, %esi
    0000069d: 	movq	%r12, %rdi
    000006a0: 	callq	_ZNSolsEs@PLT # Offset: 1696
    000006a5: 	movl	$0x8, %edx
    000006aa: 	leaq	DATAat0x491eb(%rip), %rsi
    000006b1: 	movq	%rax, %rbp
    000006b4: 	movq	%rax, %rdi
    000006b7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1719
    000006bc: 	movq	%rbx, %xmm0
    000006c1: 	movq	%rbp, %rdi
    000006c4: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1732
    000006c9: 	movl	$0x2, %edx
    000006ce: 	leaq	DATAat0x491f4(%rip), %rsi
    000006d5: 	movq	%rax, %rdi
    000006d8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1752
    000006dd: 	movl	0x48(%rsp), %eax
    000006e1: 	movl	%eax, iterations(%rip)
    000006e7: 	movq	0x58(%rsp), %rax
    000006ec: 	subq	%fs:0x28, %rax
    000006f5: 	jne	.Ltmp516 # Offset: 1781
    000006f7: 	addq	$0x68, %rsp
    000006fb: 	popq	%rbx
    000006fc: 	popq	%rbp
    000006fd: 	popq	%r12
    000006ff: 	popq	%r13
    00000701: 	popq	%r14
    00000703: 	popq	%r15
    00000705: 	retq # Offset: 1797
.Ltmp515:
    00000706: 	movq	0x40(%rsp), %rax
    0000070b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000712: 	movl	%r8d, (%rsp)
    00000716: 	movq	%r14, %rdi
    00000719: 	movq	0x8(%rax), %rdx
    0000071d: 	movq	(%rax), %rsi
    00000720: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1824
    00000725: 	movl	$0xa, %edx
    0000072a: 	leaq	DATAat0x491ab(%rip), %rsi
    00000731: 	movq	%rax, %rdi
    00000734: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1844
    00000739: 	movl	(%rsp), %r8d
    0000073d: 	jmp	.Ltmp517 # Offset: 1853
.Ltmp512:
    00000742: 	xorl	%r13d, %r13d
    00000745: 	xorl	%edx, %edx
    00000747: 	xorl	%r8d, %r8d
    0000074a: 	jmp	.Ltmp518 # Offset: 1866
.Ltmp516:
    0000074f: 	callq	__stack_chk_fail@PLT # Offset: 1871
    00000754: 	nopl	(%rax) # Size: 4
.Ltmp497:
    00000758: 	xorl	%r13d, %r13d
    0000075b: 	xorl	%r12d, %r12d
    0000075e: 	xorl	%edx, %edx
    00000760: 	xorl	%r8d, %r8d
    00000763: 	jmp	.Ltmp518 # Offset: 1891
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi21jacobi_sor2D_reversedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x17020
  Size        : 0x755
  MaxSize     : 0x760
  Offset      : 0x17020
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r8d, %r13d
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x58, %rsp
    00000024: 	movl	%edx, 0x28(%rsp)
    00000028: 	movl	%r14d, %edx
    0000002b: 	movl	%ecx, 0x2c(%rsp)
    0000002f: 	leaq	0x40(%rsp), %rcx
    00000034: 	movq	%r9, 0x30(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x48(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movq	DATAat0x49530(%rip), %rax
    00000050: 	movq	%rax, 0x40(%rsp)
    00000055: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 85
    0000005a: 	movl	%r15d, %esi
    0000005d: 	imull	%r14d, %esi
    00000061: 	movw	%ax, 0x3e(%rsp)
    00000066: 	movslq	%esi, %r12
    00000069: 	testl	%r12d, %r12d
    0000006c: 	jle	.Ltmp519 # Offset: 108
    0000006e: 	movslq	%r12d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	addq	%rdx, %rdx
    0000007a: 	callq	memmove@PLT # Offset: 122
.Ltmp519:
    0000007f: 	movl	iterations(%rip), %eax
    00000085: 	movl	$0x2710, iterations(%rip)
    0000008f: 	movl	%eax, 0x38(%rsp)
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	movq	%rax, start_time(%rip)
    0000009f: 	movl	iterations(%rip), %eax
    000000a5: 	movl	%eax, 0x18(%rsp)
    000000a9: 	testl	%eax, %eax
    000000ab: 	jle	.Ltmp520 # Offset: 171
    000000b1: 	movl	0x28(%rsp), %eax
    000000b5: 	movslq	%r13d, %r10
    000000b8: 	movl	$0x0, 0x4(%rsp)
    000000c0: 	pxor	%xmm3, %xmm3
    000000c4: 	addq	%r10, %r10
    000000c7: 	leal	-0x1(%rax), %r14d
    000000cb: 	movl	0x2c(%rsp), %eax
    000000cf: 	leal	-0x2(%rax), %esi
    000000d2: 	leal	(%r13,%r13), %eax
    000000d7: 	movq	%r12, %r13
    000000da: 	cltq
    000000dc: 	movl	%esi, 0x1c(%rsp)
    000000e0: 	shrq	$0x3, %r13
    000000e4: 	movslq	%esi, %r15
    000000e7: 	addq	%rax, %rax
    000000ea: 	shlq	$0x4, %r13
    000000ee: 	movq	%rax, 0x20(%rsp)
    000000f3: 	leaq	-0x1(%r12), %rax
    000000f8: 	movq	%rax, 0x10(%rsp)
    000000fd: 	movq	%r12, %rax
    00000100: 	andq	$-0x8, %rax
    00000104: 	movq	%rax, 0x8(%rsp)
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp534:
    00000110: 	cmpl	$0x1, %r14d
    00000114: 	jle	.Ltmp521 # Offset: 276
    0000011a: 	movl	0x1c(%rsp), %eax
    0000011e: 	testl	%eax, %eax
    00000120: 	jle	.Ltmp521 # Offset: 288
    00000126: 	movq	0x20(%rsp), %rax
    0000012b: 	leaq	(%rbp,%r10), %rdi
    00000130: 	movq	%rbx, %r9
    00000133: 	leaq	(%rbx,%r10), %rsi
    00000137: 	movl	$0x1, %r11d
    0000013d: 	leaq	(%rbx,%rax), %r8
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp523:
    00000148: 	addl	$0x1, %r11d
    0000014c: 	movq	%r15, %rdx
    0000014f: 	nop # Size: 1
.Ltmp522:
    00000150: 	movswl	(%r9,%rdx,2), %eax
    00000155: 	movswl	-0x2(%rsi,%rdx,2), %ecx
    0000015a: 	addl	%eax, %ecx
    0000015c: 	movswl	0x2(%rsi,%rdx,2), %eax
    00000161: 	addl	%ecx, %eax
    00000163: 	movswl	(%r8,%rdx,2), %ecx
    00000168: 	addl	%eax, %ecx
    0000016a: 	leal	0x5(%rcx), %eax
    0000016d: 	addl	$0x2, %ecx
    00000170: 	cmovnsl	%ecx, %eax
    00000173: 	sarl	$0x2, %eax
    00000176: 	subw	(%rdi,%rdx,2), %ax
    0000017a: 	cwtl
    0000017b: 	imull	$0x71, %eax, %eax
    0000017e: 	sarl	$0x6, %eax
    00000181: 	addw	(%rdi,%rdx,2), %ax
    00000185: 	movw	%ax, (%rdi,%rdx,2)
    00000189: 	subq	$0x1, %rdx
    0000018d: 	testl	%edx, %edx
    0000018f: 	jg	.Ltmp522 # Offset: 399
    00000191: 	addq	%r10, %rdi
    00000194: 	addq	%r10, %r9
    00000197: 	addq	%r10, %rsi
    0000019a: 	addq	%r10, %r8
    0000019d: 	cmpl	%r11d, %r14d
    000001a0: 	jne	.Ltmp523 # Offset: 416
.Ltmp521:
    000001a2: 	testq	%r12, %r12
    000001a5: 	je	.Ltmp524 # Offset: 421
    000001ab: 	cmpq	$0x6, 0x10(%rsp)
    000001b1: 	jbe	.Ltmp525 # Offset: 433
    000001b7: 	xorl	%eax, %eax
    000001b9: 	pxor	%xmm1, %xmm1
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp526:
    000001c0: 	movdqu	(%rbp,%rax), %xmm5
    000001c6: 	movdqu	(%rbx,%rax), %xmm4
    000001cb: 	movdqa	%xmm3, %xmm0
    000001cf: 	movdqu	(%rbx,%rax), %xmm6
    000001d4: 	addq	$0x10, %rax
    000001d8: 	psubw	%xmm5, %xmm4
    000001dc: 	movdqa	%xmm5, %xmm2
    000001e0: 	pcmpgtw	%xmm4, %xmm0
    000001e4: 	psubw	%xmm6, %xmm2
    000001e8: 	pand	%xmm0, %xmm2
    000001ec: 	pandn	%xmm4, %xmm0
    000001f0: 	movdqa	%xmm3, %xmm4
    000001f4: 	por	%xmm2, %xmm0
    000001f8: 	pcmpgtw	%xmm0, %xmm4
    000001fc: 	movdqa	%xmm0, %xmm2
    00000200: 	punpcklwd	%xmm4, %xmm2
    00000204: 	punpckhwd	%xmm4, %xmm0
    00000208: 	paddd	%xmm2, %xmm1
    0000020c: 	paddd	%xmm0, %xmm1
    00000210: 	cmpq	%rax, %r13
    00000213: 	jne	.Ltmp526 # Offset: 531
    00000215: 	movdqa	%xmm1, %xmm0
    00000219: 	movq	0x8(%rsp), %rax
    0000021e: 	psrldq	$0x8, %xmm0
    00000223: 	paddd	%xmm0, %xmm1
    00000227: 	movdqa	%xmm1, %xmm0
    0000022b: 	psrldq	$0x4, %xmm0
    00000230: 	paddd	%xmm0, %xmm1
    00000234: 	movd	%xmm1, %r8d
    00000239: 	cmpq	%rax, %r12
    0000023c: 	je	.Ltmp527 # Offset: 572
    00000242: 	movq	%rax, %rdx
.Ltmp537:
    00000245: 	movzwl	(%rbp,%rdx,2), %esi
    0000024a: 	movzwl	(%rbx,%rdx,2), %eax
    0000024e: 	leaq	(%rdx,%rdx), %rcx
    00000252: 	movl	%esi, %edi
    00000254: 	subl	%eax, %edi
    00000256: 	subw	%si, %ax
    00000259: 	cmovsl	%edi, %eax
    0000025c: 	cwtl
    0000025d: 	addl	%eax, %r8d
    00000260: 	leaq	0x1(%rdx), %rax
    00000264: 	cmpq	%rax, %r12
    00000267: 	jbe	.Ltmp528 # Offset: 615
    0000026d: 	movzwl	0x2(%rbp,%rcx), %esi
    00000272: 	movzwl	0x2(%rbx,%rcx), %eax
    00000277: 	movl	%esi, %edi
    00000279: 	subl	%eax, %edi
    0000027b: 	subw	%si, %ax
    0000027e: 	cmovsl	%edi, %eax
    00000281: 	cwtl
    00000282: 	addl	%eax, %r8d
    00000285: 	leaq	0x2(%rdx), %rax
    00000289: 	cmpq	%rax, %r12
    0000028c: 	jbe	.Ltmp528 # Offset: 652
    00000292: 	movzwl	0x4(%rbp,%rcx), %esi
    00000297: 	movzwl	0x4(%rbx,%rcx), %eax
    0000029c: 	movl	%esi, %edi
    0000029e: 	subl	%eax, %edi
    000002a0: 	subw	%si, %ax
    000002a3: 	cmovsl	%edi, %eax
    000002a6: 	cwtl
    000002a7: 	addl	%eax, %r8d
    000002aa: 	leaq	0x3(%rdx), %rax
    000002ae: 	cmpq	%rax, %r12
    000002b1: 	jbe	.Ltmp528 # Offset: 689
    000002b3: 	movzwl	0x6(%rbp,%rcx), %esi
    000002b8: 	movzwl	0x6(%rbx,%rcx), %eax
    000002bd: 	movl	%esi, %edi
    000002bf: 	subl	%eax, %edi
    000002c1: 	subw	%si, %ax
    000002c4: 	cmovsl	%edi, %eax
    000002c7: 	cwtl
    000002c8: 	addl	%eax, %r8d
    000002cb: 	leaq	0x4(%rdx), %rax
    000002cf: 	cmpq	%rax, %r12
    000002d2: 	jbe	.Ltmp528 # Offset: 722
    000002d4: 	movzwl	0x8(%rbp,%rcx), %esi
    000002d9: 	movzwl	0x8(%rbx,%rcx), %eax
    000002de: 	movl	%esi, %edi
    000002e0: 	subl	%eax, %edi
    000002e2: 	subw	%si, %ax
    000002e5: 	cmovsl	%edi, %eax
    000002e8: 	cwtl
    000002e9: 	addl	%eax, %r8d
    000002ec: 	leaq	0x5(%rdx), %rax
    000002f0: 	cmpq	%rax, %r12
    000002f3: 	jbe	.Ltmp528 # Offset: 755
    000002f5: 	movzwl	0xa(%rbp,%rcx), %esi
    000002fa: 	movzwl	0xa(%rbx,%rcx), %eax
    000002ff: 	movl	%esi, %edi
    00000301: 	subl	%eax, %edi
    00000303: 	subw	%si, %ax
    00000306: 	cmovsl	%edi, %eax
    00000309: 	addq	$0x6, %rdx
    0000030d: 	cwtl
    0000030e: 	addl	%eax, %r8d
    00000311: 	cmpq	%rdx, %r12
    00000314: 	jbe	.Ltmp528 # Offset: 788
    00000316: 	movzwl	0xc(%rbp,%rcx), %edx
    0000031b: 	movzwl	0xc(%rbx,%rcx), %eax
    00000320: 	movl	%edx, %ecx
    00000322: 	subl	%eax, %ecx
    00000324: 	subw	%dx, %ax
    00000327: 	cmovsl	%ecx, %eax
    0000032a: 	cwtl
    0000032b: 	addl	%eax, %r8d
.Ltmp528:
    0000032e: 	cmpq	$0x6, 0x10(%rsp)
    00000334: 	jbe	.Ltmp529 # Offset: 820
.Ltmp527:
    0000033a: 	xorl	%eax, %eax
    0000033c: 	pxor	%xmm2, %xmm2
.Ltmp530:
    00000340: 	movdqu	(%rbp,%rax), %xmm7
    00000346: 	movdqu	(%rbx,%rax), %xmm4
    0000034b: 	movdqa	%xmm3, %xmm0
    0000034f: 	movdqu	(%rbx,%rax), %xmm5
    00000354: 	addq	$0x10, %rax
    00000358: 	psubw	%xmm7, %xmm4
    0000035c: 	movdqa	%xmm7, %xmm1
    00000360: 	pcmpgtw	%xmm4, %xmm0
    00000364: 	psubw	%xmm5, %xmm1
    00000368: 	pand	%xmm0, %xmm1
    0000036c: 	pandn	%xmm4, %xmm0
    00000370: 	por	%xmm1, %xmm0
    00000374: 	pmaxsw	%xmm0, %xmm2
    00000378: 	cmpq	%rax, %r13
    0000037b: 	jne	.Ltmp530 # Offset: 891
    0000037d: 	movdqa	%xmm2, %xmm0
    00000381: 	movq	0x8(%rsp), %rax
    00000386: 	psrldq	$0x8, %xmm0
    0000038b: 	pmaxsw	%xmm0, %xmm2
    0000038f: 	movdqa	%xmm2, %xmm0
    00000393: 	psrldq	$0x4, %xmm0
    00000398: 	pmaxsw	%xmm0, %xmm2
    0000039c: 	movdqa	%xmm2, %xmm0
    000003a0: 	psrldq	$0x2, %xmm0
    000003a5: 	pmaxsw	%xmm0, %xmm2
    000003a9: 	pextrw	$0x0, %xmm2, %edx
    000003ae: 	cmpq	%rax, %r12
    000003b1: 	je	.Ltmp531 # Offset: 945
.Ltmp536:
    000003b7: 	movzwl	(%rbp,%rax,2), %edi
    000003bc: 	movzwl	(%rbx,%rax,2), %esi
    000003c0: 	leaq	(%rax,%rax), %rcx
    000003c4: 	movl	%edi, %r9d
    000003c7: 	subl	%esi, %r9d
    000003ca: 	subw	%di, %si
    000003cd: 	cmovsl	%r9d, %esi
    000003d1: 	cmpw	%si, %dx
    000003d4: 	cmovll	%esi, %edx
    000003d7: 	leaq	0x1(%rax), %rsi
    000003db: 	cmpq	%rsi, %r12
    000003de: 	jbe	.Ltmp531 # Offset: 990
    000003e4: 	movzwl	0x2(%rbp,%rcx), %edi
    000003e9: 	movzwl	0x2(%rbx,%rcx), %esi
    000003ee: 	movl	%edi, %r9d
    000003f1: 	subl	%esi, %r9d
    000003f4: 	subw	%di, %si
    000003f7: 	cmovsl	%r9d, %esi
    000003fb: 	cmpw	%si, %dx
    000003fe: 	cmovll	%esi, %edx
    00000401: 	leaq	0x2(%rax), %rsi
    00000405: 	cmpq	%rsi, %r12
    00000408: 	jbe	.Ltmp531 # Offset: 1032
    0000040e: 	movzwl	0x4(%rbp,%rcx), %edi
    00000413: 	movzwl	0x4(%rbx,%rcx), %esi
    00000418: 	movl	%edi, %r9d
    0000041b: 	subl	%esi, %r9d
    0000041e: 	subw	%di, %si
    00000421: 	cmovsl	%r9d, %esi
    00000425: 	cmpw	%si, %dx
    00000428: 	cmovll	%esi, %edx
    0000042b: 	leaq	0x3(%rax), %rsi
    0000042f: 	cmpq	%rsi, %r12
    00000432: 	jbe	.Ltmp531 # Offset: 1074
    00000438: 	movzwl	0x6(%rbp,%rcx), %edi
    0000043d: 	movzwl	0x6(%rbx,%rcx), %esi
    00000442: 	movl	%edi, %r9d
    00000445: 	subl	%esi, %r9d
    00000448: 	subw	%di, %si
    0000044b: 	cmovsl	%r9d, %esi
    0000044f: 	cmpw	%si, %dx
    00000452: 	cmovll	%esi, %edx
    00000455: 	leaq	0x4(%rax), %rsi
    00000459: 	cmpq	%rsi, %r12
    0000045c: 	jbe	.Ltmp531 # Offset: 1116
    0000045e: 	movzwl	0x8(%rbp,%rcx), %edi
    00000463: 	movzwl	0x8(%rbx,%rcx), %esi
    00000468: 	movl	%edi, %r9d
    0000046b: 	subl	%esi, %r9d
    0000046e: 	subw	%di, %si
    00000471: 	cmovsl	%r9d, %esi
    00000475: 	cmpw	%si, %dx
    00000478: 	cmovll	%esi, %edx
    0000047b: 	leaq	0x5(%rax), %rsi
    0000047f: 	cmpq	%rsi, %r12
    00000482: 	jbe	.Ltmp531 # Offset: 1154
    00000484: 	movzwl	0xa(%rbp,%rcx), %edi
    00000489: 	movzwl	0xa(%rbx,%rcx), %esi
    0000048e: 	movl	%edi, %r9d
    00000491: 	subl	%esi, %r9d
    00000494: 	subw	%di, %si
    00000497: 	cmovsl	%r9d, %esi
    0000049b: 	cmpw	%si, %dx
    0000049e: 	cmovll	%esi, %edx
    000004a1: 	addq	$0x6, %rax
    000004a5: 	cmpq	%rax, %r12
    000004a8: 	jbe	.Ltmp531 # Offset: 1192
    000004aa: 	movzwl	0xc(%rbx,%rcx), %eax
    000004af: 	movzwl	0xc(%rbp,%rcx), %ecx
    000004b4: 	movl	%ecx, %esi
    000004b6: 	subl	%eax, %esi
    000004b8: 	subw	%cx, %ax
    000004bb: 	cmovsl	%esi, %eax
    000004be: 	cmpw	%ax, %dx
    000004c1: 	cmovll	%eax, %edx
.Ltmp531:
    000004c4: 	movl	0x4(%rsp), %eax
    000004c8: 	cmpl	%eax, 0x90(%rsp)
    000004cf: 	jge	.Ltmp532 # Offset: 1231
    000004d1: 	testw	%dx, %dx
    000004d4: 	jle	.Ltmp533 # Offset: 1236
    000004d6: 	cmpl	$0x9, %r8d
    000004da: 	jle	.Ltmp533 # Offset: 1242
.Ltmp532:
    000004dc: 	addl	$0x1, 0x4(%rsp)
    000004e1: 	movq	%rbp, %rax
    000004e4: 	movl	0x4(%rsp), %esi
    000004e8: 	movq	%rbx, %rbp
    000004eb: 	cmpl	0x18(%rsp), %esi
    000004ef: 	je	.Ltmp533 # Offset: 1263
    000004f1: 	movq	%rax, %rbx
    000004f4: 	jmp	.Ltmp534 # Offset: 1268
.Ltmp524:
    000004f9: 	movl	0x4(%rsp), %eax
    000004fd: 	cmpl	%eax, 0x90(%rsp)
    00000504: 	jl	.Ltmp535 # Offset: 1284
    0000050a: 	xorl	%r8d, %r8d
    0000050d: 	xorl	%edx, %edx
    0000050f: 	jmp	.Ltmp532 # Offset: 1295
.Ltmp529:
    00000511: 	xorl	%edx, %edx
    00000513: 	xorl	%eax, %eax
    00000515: 	jmp	.Ltmp536 # Offset: 1301
.Ltmp525:
    0000051a: 	xorl	%r8d, %r8d
    0000051d: 	xorl	%edx, %edx
    0000051f: 	jmp	.Ltmp537 # Offset: 1311
.Ltmp533:
    00000524: 	movswl	%dx, %r12d
.Ltmp541:
    00000528: 	movl	%r8d, 0x10(%rsp)
    0000052d: 	movl	%edx, 0x8(%rsp)
    00000531: 	callq	clock@PLT # Offset: 1329
    00000536: 	movl	0x28(%rsp), %esi
    0000053a: 	pxor	%xmm0, %xmm0
    0000053e: 	movl	0x10(%rsp), %r8d
    00000543: 	movq	%rax, end_time(%rip)
    0000054a: 	subq	start_time(%rip), %rax
    00000551: 	cvtsi2sd	%rax, %xmm0
    00000556: 	movl	%esi, %eax
    00000558: 	divsd	DATAat0x49520(%rip), %xmm0
    00000560: 	movq	%xmm0, %rbx
    00000565: 	shrl	$0x1f, %eax
    00000568: 	addl	%esi, %eax
    0000056a: 	movl	0x2c(%rsp), %esi
    0000056e: 	sarl	%eax
    00000570: 	movl	%esi, %ecx
    00000572: 	imull	%esi, %eax
    00000575: 	shrl	$0x1f, %ecx
    00000578: 	addl	%esi, %ecx
    0000057a: 	movzwl	0x3e(%rsp), %esi
    0000057f: 	sarl	%ecx
    00000581: 	addl	%ecx, %eax
    00000583: 	cltq
    00000585: 	subw	(%rbp,%rax,2), %si
    0000058a: 	movl	0x4(%rsp), %eax
    0000058e: 	cmpl	%eax, iterations(%rip)
    00000594: 	movl	%esi, %ebp
    00000596: 	jg	.Ltmp538 # Offset: 1430
    0000059c: 	cmpl	$0xa, %r8d
    000005a0: 	jle	.Ltmp538 # Offset: 1440
    000005a6: 	movl	0x8(%rsp), %edx
    000005aa: 	cmpw	$0x1, %dx
    000005ae: 	jle	.Ltmp538 # Offset: 1454
    000005b4: 	movq	0x30(%rsp), %rax
    000005b9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000005c0: 	movl	%r8d, 0x8(%rsp)
    000005c5: 	movq	%r13, %rdi
    000005c8: 	movq	0x8(%rax), %rdx
    000005cc: 	movq	(%rax), %rsi
    000005cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1487
    000005d4: 	movl	$0x11, %edx
    000005d9: 	leaq	DATAat0x49199(%rip), %rsi
    000005e0: 	movq	%rax, %rdi
    000005e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1507
    000005e8: 	movl	0x8(%rsp), %r8d
.Ltmp540:
    000005ed: 	movl	$0x4, %edx
    000005f2: 	movq	%r13, %rdi
    000005f5: 	movl	%r8d, 0x8(%rsp)
    000005fa: 	leaq	DATAat0x491b6(%rip), %rsi
    00000601: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1537
    00000606: 	movl	0x4(%rsp), %esi
    0000060a: 	movq	%r13, %rdi
    0000060d: 	callq	_ZNSolsEi@PLT # Offset: 1549
    00000612: 	movl	$0xb, %edx
    00000617: 	leaq	DATAat0x491bb(%rip), %rsi
    0000061e: 	movq	%rax, %rdi
    00000621: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1569
    00000626: 	movl	$0xa, %edx
    0000062b: 	movq	%r13, %rdi
    0000062e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000635: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1589
    0000063a: 	movl	0x8(%rsp), %esi
    0000063e: 	movq	%r13, %rdi
    00000641: 	callq	_ZNSolsEi@PLT # Offset: 1601
    00000646: 	movl	$0x7, %edx
    0000064b: 	leaq	DATAat0x491d2(%rip), %rsi
    00000652: 	movq	%rax, %r13
    00000655: 	movq	%rax, %rdi
    00000658: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1624
    0000065d: 	movl	%r12d, %esi
    00000660: 	movq	%r13, %rdi
    00000663: 	callq	_ZNSolsEs@PLT # Offset: 1635
    00000668: 	movl	$0x10, %edx
    0000066d: 	leaq	DATAat0x491da(%rip), %rsi
    00000674: 	movq	%rax, %r12
    00000677: 	movq	%rax, %rdi
    0000067a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1658
    0000067f: 	movswl	%bp, %esi
    00000682: 	movq	%r12, %rdi
    00000685: 	callq	_ZNSolsEs@PLT # Offset: 1669
    0000068a: 	movl	$0x8, %edx
    0000068f: 	leaq	DATAat0x491eb(%rip), %rsi
    00000696: 	movq	%rax, %rbp
    00000699: 	movq	%rax, %rdi
    0000069c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1692
    000006a1: 	movq	%rbx, %xmm0
    000006a6: 	movq	%rbp, %rdi
    000006a9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1705
    000006ae: 	movl	$0x2, %edx
    000006b3: 	leaq	DATAat0x491f4(%rip), %rsi
    000006ba: 	movq	%rax, %rdi
    000006bd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1725
    000006c2: 	movl	0x38(%rsp), %eax
    000006c6: 	movl	%eax, iterations(%rip)
    000006cc: 	movq	0x48(%rsp), %rax
    000006d1: 	subq	%fs:0x28, %rax
    000006da: 	jne	.Ltmp539 # Offset: 1754
    000006dc: 	addq	$0x58, %rsp
    000006e0: 	popq	%rbx
    000006e1: 	popq	%rbp
    000006e2: 	popq	%r12
    000006e4: 	popq	%r13
    000006e6: 	popq	%r14
    000006e8: 	popq	%r15
    000006ea: 	retq # Offset: 1770
.Ltmp538:
    000006eb: 	movq	0x30(%rsp), %rax
    000006f0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000006f7: 	movl	%r8d, 0x8(%rsp)
    000006fc: 	movq	%r13, %rdi
    000006ff: 	movq	0x8(%rax), %rdx
    00000703: 	movq	(%rax), %rsi
    00000706: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1798
    0000070b: 	movl	$0xa, %edx
    00000710: 	leaq	DATAat0x491ab(%rip), %rsi
    00000717: 	movq	%rax, %rdi
    0000071a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1818
    0000071f: 	movl	0x8(%rsp), %r8d
    00000724: 	jmp	.Ltmp540 # Offset: 1828
.Ltmp535:
    00000729: 	xorl	%r12d, %r12d
    0000072c: 	xorl	%edx, %edx
    0000072e: 	xorl	%r8d, %r8d
    00000731: 	jmp	.Ltmp541 # Offset: 1841
.Ltmp539:
    00000736: 	callq	__stack_chk_fail@PLT # Offset: 1846
    0000073b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp520:
    00000740: 	movl	$0x0, 0x4(%rsp)
    00000748: 	xorl	%r12d, %r12d
    0000074b: 	xorl	%edx, %edx
    0000074d: 	xorl	%r8d, %r8d
    00000750: 	jmp	.Ltmp541 # Offset: 1872
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x17780
  Size        : 0xe9a
  MaxSize     : 0xea0
  Offset      : 0x17780
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%ecx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	movl	%ebx, %esi
    00000018: 	imull	%r14d, %ebx
    0000001c: 	subq	$0x108, %rsp
    00000023: 	movl	%edx, 0xd8(%rsp)
    0000002a: 	movl	%r14d, %edx
    0000002d: 	movl	%ecx, 0xdc(%rsp)
    00000034: 	leaq	0xf0(%rsp), %rcx
    0000003c: 	movl	%r8d, 0x38(%rsp)
    00000041: 	movq	%r9, 0xe0(%rsp)
    00000049: 	movq	%fs:0x28, %rax
    00000052: 	movq	%rax, 0xf8(%rsp)
    0000005a: 	xorl	%eax, %eax
    0000005c: 	movq	DATAat0x49530(%rip), %rax
    00000063: 	movq	%rdi, 0x8(%rsp)
    00000068: 	movq	%rax, 0xf0(%rsp)
    00000070: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 112
    00000075: 	testl	%ebx, %ebx
    00000077: 	movq	0x8(%rsp), %r11
    0000007c: 	movw	%ax, 0xee(%rsp)
    00000084: 	jle	.Ltmp542 # Offset: 132
    00000086: 	movslq	%ebx, %rdx
    00000089: 	movq	%r11, %rsi
    0000008c: 	movq	%r12, %rdi
    0000008f: 	addq	%rdx, %rdx
    00000092: 	callq	memmove@PLT # Offset: 146
    00000097: 	movq	0x8(%rsp), %r11
.Ltmp542:
    0000009c: 	movl	iterations(%rip), %eax
    000000a2: 	movq	%r11, 0x10(%rsp)
    000000a7: 	movl	$0x2710, iterations(%rip)
    000000b1: 	movl	%eax, 0xe8(%rsp)
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movq	%rax, start_time(%rip)
    000000c4: 	movl	iterations(%rip), %eax
    000000ca: 	movl	%eax, 0xa0(%rsp)
    000000d1: 	testl	%eax, %eax
    000000d3: 	jle	.Ltmp543 # Offset: 211
    000000d9: 	movl	0xd8(%rsp), %r10d
    000000e1: 	movl	0x38(%rsp), %esi
    000000e5: 	movslq	%ebx, %rcx
    000000e8: 	pxor	%xmm2, %xmm2
    000000ec: 	movl	0xdc(%rsp), %r14d
    000000f4: 	movq	%rcx, 0x60(%rsp)
    000000f9: 	pxor	%xmm3, %xmm3
    000000fd: 	leal	-0x2(%r10), %edi
    00000101: 	movl	$0x0, 0x6c(%rsp)
    00000109: 	movdqa	DATAat0x49440(%rip), %xmm6
    00000111: 	leal	-0x1(%r14), %eax
    00000115: 	movl	%edi, 0x9c(%rsp)
    0000011c: 	movdqa	DATAat0x49450(%rip), %xmm5
    00000124: 	imull	%esi, %edi
    00000127: 	movl	%eax, 0x8(%rsp)
    0000012b: 	movl	%esi, %eax
    0000012d: 	movdqa	DATAat0x49460(%rip), %xmm4
    00000135: 	negl	%eax
    00000137: 	movq	0x10(%rsp), %r11
    0000013c: 	cltq
    0000013e: 	movslq	%edi, %rdx
    00000141: 	leaq	(%rax,%rax), %rbp
    00000145: 	movl	%edi, 0xa4(%rsp)
    0000014c: 	leaq	0x2(%rdx,%rdx), %rax
    00000151: 	movq	%rax, 0xc0(%rsp)
    00000159: 	leal	-0x3(%r10), %eax
    0000015d: 	imull	%esi, %eax
    00000160: 	cltq
    00000162: 	leaq	0x4(%rax,%rax), %rax
    00000167: 	movq	%rax, 0xb8(%rsp)
    0000016f: 	leal	-0x1(%r10), %eax
    00000173: 	imull	%esi, %eax
    00000176: 	leal	-0x2(%r14), %esi
    0000017a: 	movl	%esi, 0x58(%rsp)
    0000017e: 	cltq
    00000180: 	leaq	0x4(%rax,%rax), %rax
    00000185: 	movq	%rax, 0xb0(%rsp)
    0000018d: 	movq	%rdx, %rax
    00000190: 	negq	%rax
    00000193: 	addq	%rax, %rax
    00000196: 	movq	%rax, 0xd0(%rsp)
    0000019e: 	leaq	0x4(%rdx,%rdx), %rax
    000001a3: 	movq	%rax, 0xa8(%rsp)
    000001ab: 	movl	%esi, %eax
    000001ad: 	shrl	$0x3, %eax
    000001b0: 	subl	$0x1, %eax
    000001b3: 	addq	$0x1, %rax
    000001b7: 	shlq	$0x4, %rax
    000001bb: 	movq	%rax, %r10
    000001be: 	movl	%esi, %eax
    000001c0: 	andl	$-0x8, %eax
    000001c3: 	leal	0x1(%rax), %esi
    000001c6: 	movl	%eax, 0x5c(%rsp)
    000001ca: 	movl	%esi, 0x2c(%rsp)
    000001ce: 	leal	0x2(%rax), %esi
    000001d1: 	movl	%esi, 0x24(%rsp)
    000001d5: 	leal	0x3(%rax), %esi
    000001d8: 	movl	%esi, 0x28(%rsp)
    000001dc: 	leal	0x4(%rax), %esi
    000001df: 	movl	%esi, 0x30(%rsp)
    000001e3: 	leal	0x5(%rax), %esi
    000001e6: 	movl	%esi, 0x3c(%rsp)
    000001ea: 	leal	0x6(%rax), %esi
    000001ed: 	movl	%esi, 0x50(%rsp)
    000001f1: 	leal	0x7(%rax), %esi
    000001f4: 	addl	$0x8, %eax
    000001f7: 	movl	%eax, 0x98(%rsp)
    000001fe: 	leal	-0x3(%r14), %eax
    00000202: 	movl	%eax, 0x54(%rsp)
    00000206: 	addq	%rax, %rax
    00000209: 	movq	%rax, 0xc8(%rsp)
    00000211: 	leaq	-0x1(%rcx), %rax
    00000215: 	movq	%rax, 0x88(%rsp)
    0000021d: 	movq	%rcx, %rax
    00000220: 	movl	%esi, 0x68(%rsp)
    00000224: 	shrq	$0x3, %rax
    00000228: 	movq	%rcx, %rsi
    0000022b: 	shlq	$0x4, %rax
    0000022f: 	andq	$-0x8, %rsi
    00000233: 	movq	%rax, 0x90(%rsp)
    0000023b: 	movq	%rsi, 0x80(%rsp)
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp559:
    00000248: 	movl	0x9c(%rsp), %edi
    0000024f: 	testl	%edi, %edi
    00000251: 	jle	.Ltmp544 # Offset: 593
    00000257: 	cmpl	$0x1, 0x8(%rsp)
    0000025c: 	jle	.Ltmp544 # Offset: 604
    00000262: 	movq	0xb8(%rsp), %rsi
    0000026a: 	movq	%r12, %rbx
    0000026d: 	movq	0xc8(%rsp), %rcx
    00000275: 	movq	$-0x4, %rdx
    0000027c: 	subq	%r11, %rbx
    0000027f: 	subq	%r11, %rdx
    00000282: 	movq	0xc0(%rsp), %rax
    0000028a: 	movl	%edi, 0x34(%rsp)
    0000028e: 	addq	%r11, %rsi
    00000291: 	subq	%r12, %rcx
    00000294: 	movq	%rbx, 0x48(%rsp)
    00000299: 	movq	%rsi, 0x10(%rsp)
    0000029e: 	movq	0xb0(%rsp), %rsi
    000002a6: 	addq	%r12, %rax
    000002a9: 	movq	%rcx, 0x70(%rsp)
    000002ae: 	movq	0xd0(%rsp), %rcx
    000002b6: 	addq	%r11, %rsi
    000002b9: 	movq	%rdx, 0x78(%rsp)
    000002be: 	movq	%rsi, 0x18(%rsp)
    000002c3: 	movq	0xa8(%rsp), %rsi
    000002cb: 	movq	%rcx, 0x40(%rsp)
    000002d0: 	movl	0xa4(%rsp), %ecx
    000002d7: 	addq	%r11, %rsi
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp548:
    000002e0: 	movl	0x38(%rsp), %ebx
    000002e4: 	movl	%ecx, %r8d
    000002e7: 	subl	$0x1, 0x34(%rsp)
    000002ec: 	subl	%ebx, %r8d
    000002ef: 	cmpq	$0x10, 0x48(%rsp)
    000002f5: 	leal	(%rbx,%rcx), %r9d
    000002f9: 	seta	%dl
    000002fc: 	cmpl	$0x6, 0x54(%rsp)
    00000301: 	seta	%dil
    00000305: 	andl	%edi, %edx
    00000307: 	movq	%rax, %rdi
    0000030a: 	subq	0x10(%rsp), %rdi
    0000030f: 	cmpq	$0xc, %rdi
    00000313: 	seta	%dil
    00000317: 	testb	%dil, %dl
    0000031a: 	je	.Ltmp545 # Offset: 794
    00000320: 	movq	%rax, %rdx
    00000323: 	subq	0x18(%rsp), %rdx
    00000328: 	cmpq	$0xc, %rdx
    0000032c: 	jbe	.Ltmp545 # Offset: 812
    00000332: 	movq	0x10(%rsp), %rdi
    00000337: 	leaq	-0x4(%rsi), %rbx
    0000033b: 	xorl	%edx, %edx
    0000033d: 	leaq	-0x2(%rdi), %r13
    00000341: 	movq	0x18(%rsp), %rdi
    00000346: 	subq	$0x2, %rdi
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp546:
    00000350: 	movdqu	(%rbx,%rdx), %xmm1
    00000355: 	movdqa	%xmm2, %xmm13
    0000035a: 	movdqa	%xmm2, %xmm12
    0000035f: 	movdqu	(%r13,%rdx), %xmm9
    00000366: 	movdqu	(%rsi,%rdx), %xmm8
    0000036c: 	movdqa	%xmm2, %xmm11
    00000371: 	movdqu	(%rdi,%rdx), %xmm7
    00000376: 	pcmpgtw	%xmm9, %xmm13
    0000037b: 	pcmpgtw	%xmm1, %xmm12
    00000380: 	movdqa	%xmm9, %xmm10
    00000385: 	pcmpgtw	%xmm8, %xmm11
    0000038a: 	movdqa	%xmm1, %xmm0
    0000038e: 	movdqa	%xmm7, %xmm14
    00000393: 	punpcklwd	%xmm13, %xmm10
    00000398: 	punpcklwd	%xmm12, %xmm0
    0000039d: 	punpckhwd	%xmm13, %xmm9
    000003a2: 	paddd	%xmm10, %xmm0
    000003a7: 	movdqa	%xmm8, %xmm10
    000003ac: 	punpckhwd	%xmm12, %xmm1
    000003b1: 	punpcklwd	%xmm11, %xmm10
    000003b6: 	punpckhwd	%xmm11, %xmm8
    000003bb: 	paddd	%xmm9, %xmm1
    000003c0: 	paddd	%xmm10, %xmm0
    000003c5: 	movdqa	%xmm2, %xmm10
    000003ca: 	paddd	%xmm8, %xmm1
    000003cf: 	pcmpgtw	%xmm7, %xmm10
    000003d4: 	movdqa	%xmm3, %xmm8
    000003d9: 	punpckhwd	%xmm10, %xmm7
    000003de: 	punpcklwd	%xmm10, %xmm14
    000003e3: 	paddd	%xmm7, %xmm1
    000003e7: 	paddd	%xmm14, %xmm0
    000003ec: 	movdqa	%xmm3, %xmm7
    000003f0: 	paddd	%xmm6, %xmm0
    000003f4: 	paddd	%xmm6, %xmm1
    000003f8: 	pcmpgtd	%xmm0, %xmm8
    000003fd: 	pcmpgtd	%xmm1, %xmm7
    00000401: 	pand	%xmm5, %xmm8
    00000406: 	pand	%xmm5, %xmm7
    0000040a: 	paddd	%xmm8, %xmm0
    0000040f: 	paddd	%xmm7, %xmm1
    00000413: 	psrad	$0x2, %xmm1
    00000418: 	psrad	$0x2, %xmm0
    0000041d: 	movdqa	%xmm0, %xmm7
    00000421: 	punpcklwd	%xmm1, %xmm0
    00000425: 	punpckhwd	%xmm1, %xmm7
    00000429: 	movdqa	%xmm0, %xmm1
    0000042d: 	punpckhwd	%xmm7, %xmm1
    00000431: 	punpcklwd	%xmm7, %xmm0
    00000435: 	movdqu	(%rax,%rdx), %xmm7
    0000043a: 	punpcklwd	%xmm1, %xmm0
    0000043e: 	psubw	%xmm7, %xmm0
    00000442: 	movdqa	%xmm0, %xmm7
    00000446: 	pmulhw	%xmm4, %xmm0
    0000044a: 	pmullw	%xmm4, %xmm7
    0000044e: 	movdqa	%xmm7, %xmm1
    00000452: 	punpckhwd	%xmm0, %xmm7
    00000456: 	punpcklwd	%xmm0, %xmm1
    0000045a: 	psrad	$0x6, %xmm7
    0000045f: 	psrad	$0x6, %xmm1
    00000464: 	movdqa	%xmm1, %xmm0
    00000468: 	movdqa	%xmm1, %xmm8
    0000046d: 	punpcklwd	%xmm7, %xmm0
    00000471: 	punpckhwd	%xmm7, %xmm8
    00000476: 	movdqu	(%rax,%rdx), %xmm7
    0000047b: 	movdqa	%xmm0, %xmm1
    0000047f: 	punpcklwd	%xmm8, %xmm0
    00000484: 	punpckhwd	%xmm8, %xmm1
    00000489: 	punpcklwd	%xmm1, %xmm0
    0000048d: 	paddw	%xmm7, %xmm0
    00000491: 	movups	%xmm0, (%rax,%rdx)
    00000495: 	addq	$0x10, %rdx
    00000499: 	cmpq	%r10, %rdx
    0000049c: 	jne	.Ltmp546 # Offset: 1180
    000004a2: 	movl	0x5c(%rsp), %r13d
    000004a7: 	cmpl	%r13d, 0x58(%rsp)
    000004ac: 	je	.Ltmp547 # Offset: 1196
    000004b2: 	movl	0x2c(%rsp), %ebx
    000004b6: 	leal	(%r8,%rbx), %edx
    000004ba: 	leal	(%rcx,%rbx), %r14d
    000004be: 	movslq	%edx, %rdx
    000004c1: 	movslq	%r14d, %r14
    000004c4: 	movswl	(%r11,%rdx,2), %edi
    000004c9: 	leal	(%rcx,%r13), %edx
    000004cd: 	leaq	(%r12,%r14,2), %r15
    000004d1: 	movslq	%edx, %rdx
    000004d4: 	movswl	(%r11,%rdx,2), %ebx
    000004d9: 	movl	0x24(%rsp), %edx
    000004dd: 	addl	%edi, %ebx
    000004df: 	leal	(%rcx,%rdx), %edi
    000004e2: 	movslq	%edi, %rdi
    000004e5: 	addq	%rdi, %rdi
    000004e8: 	leaq	(%r11,%rdi), %r13
    000004ec: 	movswl	(%r13), %edx
    000004f1: 	addl	%ebx, %edx
    000004f3: 	movl	0x2c(%rsp), %ebx
    000004f7: 	addl	%r9d, %ebx
    000004fa: 	movslq	%ebx, %rbx
    000004fd: 	movswl	(%r11,%rbx,2), %ebx
    00000502: 	addl	%edx, %ebx
    00000504: 	leal	0x5(%rbx), %edx
    00000507: 	addl	$0x2, %ebx
    0000050a: 	cmovnsl	%ebx, %edx
    0000050d: 	sarl	$0x2, %edx
    00000510: 	subw	(%r15), %dx
    00000514: 	movswl	%dx, %edx
    00000517: 	imull	$0x71, %edx, %edx
    0000051a: 	sarl	$0x6, %edx
    0000051d: 	addw	(%r15), %dx
    00000521: 	movw	%dx, (%r15)
    00000525: 	movl	0x24(%rsp), %edx
    00000529: 	cmpl	%edx, 0x8(%rsp)
    0000052d: 	jle	.Ltmp547 # Offset: 1325
    00000533: 	movswl	(%r11,%r14,2), %r15d
    00000538: 	movl	0x28(%rsp), %r14d
    0000053d: 	addl	%r8d, %edx
    00000540: 	addq	%r12, %rdi
    00000543: 	movslq	%edx, %rdx
    00000546: 	leal	(%rcx,%r14), %ebx
    0000054a: 	movswl	(%r11,%rdx,2), %edx
    0000054f: 	movslq	%ebx, %rbx
    00000552: 	addq	%rbx, %rbx
    00000555: 	addl	%edx, %r15d
    00000558: 	leaq	(%r11,%rbx), %r14
    0000055c: 	movswl	(%r14), %edx
    00000560: 	addl	%r15d, %edx
    00000563: 	movl	0x24(%rsp), %r15d
    00000568: 	addl	%r9d, %r15d
    0000056b: 	movslq	%r15d, %r15
    0000056e: 	movswl	(%r11,%r15,2), %r15d
    00000573: 	addl	%edx, %r15d
    00000576: 	leal	0x5(%r15), %edx
    0000057a: 	addl	$0x2, %r15d
    0000057e: 	cmovnsl	%r15d, %edx
    00000582: 	sarl	$0x2, %edx
    00000585: 	subw	(%rdi), %dx
    00000588: 	movswl	%dx, %edx
    0000058b: 	imull	$0x71, %edx, %edx
    0000058e: 	sarl	$0x6, %edx
    00000591: 	addw	(%rdi), %dx
    00000594: 	movw	%dx, (%rdi)
    00000597: 	movl	0x28(%rsp), %edx
    0000059b: 	cmpl	%edx, 0x8(%rsp)
    0000059f: 	jle	.Ltmp547 # Offset: 1439
    000005a5: 	movswl	(%r13), %r15d
    000005aa: 	movl	0x30(%rsp), %r13d
    000005af: 	addl	%r8d, %edx
    000005b2: 	addq	%r12, %rbx
    000005b5: 	movslq	%edx, %rdx
    000005b8: 	leal	(%rcx,%r13), %edi
    000005bc: 	movswl	(%r11,%rdx,2), %edx
    000005c1: 	movslq	%edi, %rdi
    000005c4: 	addq	%rdi, %rdi
    000005c7: 	addl	%edx, %r15d
    000005ca: 	leaq	(%r11,%rdi), %r13
    000005ce: 	movswl	(%r13), %edx
    000005d3: 	addl	%r15d, %edx
    000005d6: 	movl	0x28(%rsp), %r15d
    000005db: 	addl	%r9d, %r15d
    000005de: 	movslq	%r15d, %r15
    000005e1: 	movswl	(%r11,%r15,2), %r15d
    000005e6: 	addl	%edx, %r15d
    000005e9: 	leal	0x5(%r15), %edx
    000005ed: 	addl	$0x2, %r15d
    000005f1: 	cmovnsl	%r15d, %edx
    000005f5: 	sarl	$0x2, %edx
    000005f8: 	subw	(%rbx), %dx
    000005fb: 	movswl	%dx, %edx
    000005fe: 	imull	$0x71, %edx, %edx
    00000601: 	sarl	$0x6, %edx
    00000604: 	addw	(%rbx), %dx
    00000607: 	movw	%dx, (%rbx)
    0000060a: 	movl	0x30(%rsp), %edx
    0000060e: 	cmpl	%edx, 0x8(%rsp)
    00000612: 	jle	.Ltmp547 # Offset: 1554
    00000618: 	movswl	(%r14), %r15d
    0000061c: 	movl	0x3c(%rsp), %r14d
    00000621: 	addl	%r8d, %edx
    00000624: 	addq	%r12, %rdi
    00000627: 	movslq	%edx, %rdx
    0000062a: 	leal	(%rcx,%r14), %ebx
    0000062e: 	movswl	(%r11,%rdx,2), %edx
    00000633: 	movslq	%ebx, %rbx
    00000636: 	addq	%rbx, %rbx
    00000639: 	addl	%edx, %r15d
    0000063c: 	leaq	(%r11,%rbx), %r14
    00000640: 	movswl	(%r14), %edx
    00000644: 	addl	%r15d, %edx
    00000647: 	movl	0x30(%rsp), %r15d
    0000064c: 	addl	%r9d, %r15d
    0000064f: 	movslq	%r15d, %r15
    00000652: 	movswl	(%r11,%r15,2), %r15d
    00000657: 	addl	%edx, %r15d
    0000065a: 	leal	0x5(%r15), %edx
    0000065e: 	addl	$0x2, %r15d
    00000662: 	cmovnsl	%r15d, %edx
    00000666: 	sarl	$0x2, %edx
    00000669: 	subw	(%rdi), %dx
    0000066c: 	movswl	%dx, %edx
    0000066f: 	imull	$0x71, %edx, %edx
    00000672: 	sarl	$0x6, %edx
    00000675: 	addw	(%rdi), %dx
    00000678: 	movw	%dx, (%rdi)
    0000067b: 	movl	0x3c(%rsp), %edx
    0000067f: 	cmpl	%edx, 0x8(%rsp)
    00000683: 	jle	.Ltmp547 # Offset: 1667
    00000689: 	movl	0x50(%rsp), %r15d
    0000068e: 	addl	%r8d, %edx
    00000691: 	movswl	(%r13), %r13d
    00000696: 	addq	%r12, %rbx
    00000699: 	movslq	%edx, %rdx
    0000069c: 	leal	(%rcx,%r15), %edi
    000006a0: 	movswl	(%r11,%rdx,2), %edx
    000006a5: 	movslq	%edi, %rdi
    000006a8: 	addq	%rdi, %rdi
    000006ab: 	addl	%edx, %r13d
    000006ae: 	leaq	(%r11,%rdi), %r15
    000006b2: 	movswl	(%r15), %edx
    000006b6: 	addl	%r13d, %edx
    000006b9: 	movl	0x3c(%rsp), %r13d
    000006be: 	addl	%r9d, %r13d
    000006c1: 	movslq	%r13d, %r13
    000006c4: 	movswl	(%r11,%r13,2), %r13d
    000006c9: 	addl	%edx, %r13d
    000006cc: 	leal	0x5(%r13), %edx
    000006d0: 	addl	$0x2, %r13d
    000006d4: 	cmovnsl	%r13d, %edx
    000006d8: 	sarl	$0x2, %edx
    000006db: 	subw	(%rbx), %dx
    000006de: 	movswl	%dx, %edx
    000006e1: 	imull	$0x71, %edx, %edx
    000006e4: 	sarl	$0x6, %edx
    000006e7: 	addw	(%rbx), %dx
    000006ea: 	movw	%dx, (%rbx)
    000006ed: 	movl	0x50(%rsp), %edx
    000006f1: 	cmpl	%edx, 0x8(%rsp)
    000006f5: 	jle	.Ltmp547 # Offset: 1781
    000006fb: 	addl	%r8d, %edx
    000006fe: 	movswl	(%r14), %ebx
    00000702: 	movl	0x68(%rsp), %r13d
    00000707: 	addq	%r12, %rdi
    0000070a: 	movslq	%edx, %rdx
    0000070d: 	movl	0x50(%rsp), %r14d
    00000712: 	movswl	(%r11,%rdx,2), %edx
    00000717: 	addl	%edx, %ebx
    00000719: 	leal	(%rcx,%r13), %edx
    0000071d: 	movslq	%edx, %rdx
    00000720: 	leaq	(%rdx,%rdx), %r13
    00000724: 	movswl	(%r11,%rdx,2), %edx
    00000729: 	addl	%ebx, %edx
    0000072b: 	leal	(%r14,%r9), %ebx
    0000072f: 	movslq	%ebx, %rbx
    00000732: 	movswl	(%r11,%rbx,2), %ebx
    00000737: 	addl	%edx, %ebx
    00000739: 	leal	0x5(%rbx), %edx
    0000073c: 	addl	$0x2, %ebx
    0000073f: 	cmovnsl	%ebx, %edx
    00000742: 	sarl	$0x2, %edx
    00000745: 	subw	(%rdi), %dx
    00000748: 	movswl	%dx, %edx
    0000074b: 	imull	$0x71, %edx, %edx
    0000074e: 	sarl	$0x6, %edx
    00000751: 	addw	(%rdi), %dx
    00000754: 	movw	%dx, (%rdi)
    00000757: 	movl	0x68(%rsp), %edi
    0000075b: 	cmpl	%edi, 0x8(%rsp)
    0000075f: 	jle	.Ltmp547 # Offset: 1887
    00000761: 	addl	%edi, %r8d
    00000764: 	movl	%edi, %ebx
    00000766: 	movswl	(%r15), %edi
    0000076a: 	addq	%r12, %r13
    0000076d: 	movslq	%r8d, %r8
    00000770: 	addl	%ebx, %r9d
    00000773: 	movswl	(%r11,%r8,2), %edx
    00000778: 	movslq	%r9d, %r9
    0000077b: 	addl	%edx, %edi
    0000077d: 	movl	0x98(%rsp), %edx
    00000784: 	addl	%ecx, %edx
    00000786: 	movslq	%edx, %rdx
    00000789: 	movswl	(%r11,%rdx,2), %edx
    0000078e: 	addl	%edi, %edx
    00000790: 	movswl	(%r11,%r9,2), %edi
    00000795: 	addl	%edx, %edi
    00000797: 	leal	0x5(%rdi), %edx
    0000079a: 	addl	$0x2, %edi
    0000079d: 	cmovnsl	%edi, %edx
    000007a0: 	sarl	$0x2, %edx
    000007a3: 	subw	(%r13), %dx
    000007a8: 	movswl	%dx, %edx
    000007ab: 	imull	$0x71, %edx, %edx
    000007ae: 	sarl	$0x6, %edx
    000007b1: 	addw	(%r13), %dx
    000007b6: 	movw	%dx, (%r13)
.Ltmp547:
    000007bb: 	movl	0x34(%rsp), %edx
    000007bf: 	addq	%rbp, 0x10(%rsp)
    000007c4: 	addq	%rbp, %rax
    000007c7: 	addq	%rbp, %rsi
    000007ca: 	addq	%rbp, 0x18(%rsp)
    000007cf: 	subl	0x38(%rsp), %ecx
    000007d3: 	subq	%rbp, 0x40(%rsp)
    000007d8: 	testl	%edx, %edx
    000007da: 	jne	.Ltmp548 # Offset: 2010
.Ltmp544:
    000007e0: 	cmpq	$0x0, 0x60(%rsp)
    000007e6: 	je	.Ltmp549 # Offset: 2022
    000007ec: 	cmpq	$0x6, 0x88(%rsp)
    000007f5: 	jbe	.Ltmp550 # Offset: 2037
    000007fb: 	movq	0x90(%rsp), %rdx
    00000803: 	xorl	%eax, %eax
    00000805: 	pxor	%xmm1, %xmm1
    00000809: 	nopl	(%rax) # Size: 7
.Ltmp551:
    00000810: 	movdqu	(%r12,%rax), %xmm7
    00000816: 	movdqu	(%r11,%rax), %xmm0
    0000081c: 	movdqu	(%r11,%rax), %xmm8
    00000822: 	addq	$0x10, %rax
    00000826: 	psubw	%xmm7, %xmm8
    0000082b: 	psubw	%xmm0, %xmm7
    0000082f: 	movdqa	%xmm2, %xmm0
    00000833: 	pcmpgtw	%xmm8, %xmm0
    00000838: 	pand	%xmm0, %xmm7
    0000083c: 	pandn	%xmm8, %xmm0
    00000841: 	movdqa	%xmm2, %xmm8
    00000846: 	por	%xmm7, %xmm0
    0000084a: 	pcmpgtw	%xmm0, %xmm8
    0000084f: 	movdqa	%xmm0, %xmm7
    00000853: 	punpcklwd	%xmm8, %xmm7
    00000858: 	punpckhwd	%xmm8, %xmm0
    0000085d: 	paddd	%xmm7, %xmm1
    00000861: 	paddd	%xmm0, %xmm1
    00000865: 	cmpq	%rax, %rdx
    00000868: 	jne	.Ltmp551 # Offset: 2152
    0000086a: 	movdqa	%xmm1, %xmm0
    0000086e: 	movq	0x80(%rsp), %rax
    00000876: 	psrldq	$0x8, %xmm0
    0000087b: 	paddd	%xmm0, %xmm1
    0000087f: 	movdqa	%xmm1, %xmm0
    00000883: 	psrldq	$0x4, %xmm0
    00000888: 	paddd	%xmm0, %xmm1
    0000088c: 	movd	%xmm1, %r8d
    00000891: 	cmpq	%rax, 0x60(%rsp)
    00000896: 	je	.Ltmp552 # Offset: 2198
    0000089c: 	movq	%rax, %rdx
.Ltmp563:
    0000089f: 	movzwl	(%r12,%rdx,2), %esi
    000008a4: 	movzwl	(%r11,%rdx,2), %eax
    000008a9: 	leaq	(%rdx,%rdx), %rcx
    000008ad: 	movq	0x60(%rsp), %rbx
    000008b2: 	movl	%esi, %edi
    000008b4: 	subl	%eax, %edi
    000008b6: 	subw	%si, %ax
    000008b9: 	cmovsl	%edi, %eax
    000008bc: 	cwtl
    000008bd: 	addl	%eax, %r8d
    000008c0: 	leaq	0x1(%rdx), %rax
    000008c4: 	cmpq	%rax, %rbx
    000008c7: 	jbe	.Ltmp553 # Offset: 2247
    000008cd: 	movzwl	0x2(%r12,%rcx), %esi
    000008d3: 	movzwl	0x2(%r11,%rcx), %eax
    000008d9: 	movl	%esi, %edi
    000008db: 	subl	%eax, %edi
    000008dd: 	subw	%si, %ax
    000008e0: 	cmovsl	%edi, %eax
    000008e3: 	cwtl
    000008e4: 	addl	%eax, %r8d
    000008e7: 	leaq	0x2(%rdx), %rax
    000008eb: 	cmpq	%rax, %rbx
    000008ee: 	jbe	.Ltmp553 # Offset: 2286
    000008f4: 	movzwl	0x4(%r12,%rcx), %esi
    000008fa: 	movzwl	0x4(%r11,%rcx), %eax
    00000900: 	movl	%esi, %edi
    00000902: 	subl	%eax, %edi
    00000904: 	subw	%si, %ax
    00000907: 	cmovsl	%edi, %eax
    0000090a: 	cwtl
    0000090b: 	addl	%eax, %r8d
    0000090e: 	leaq	0x3(%rdx), %rax
    00000912: 	cmpq	%rax, %rbx
    00000915: 	jbe	.Ltmp553 # Offset: 2325
    0000091b: 	movzwl	0x6(%r12,%rcx), %esi
    00000921: 	movzwl	0x6(%r11,%rcx), %eax
    00000927: 	movl	%esi, %edi
    00000929: 	subl	%eax, %edi
    0000092b: 	subw	%si, %ax
    0000092e: 	cmovsl	%edi, %eax
    00000931: 	cwtl
    00000932: 	addl	%eax, %r8d
    00000935: 	leaq	0x4(%rdx), %rax
    00000939: 	cmpq	%rax, %rbx
    0000093c: 	jbe	.Ltmp553 # Offset: 2364
    0000093e: 	movzwl	0x8(%r12,%rcx), %esi
    00000944: 	movzwl	0x8(%r11,%rcx), %eax
    0000094a: 	movl	%esi, %edi
    0000094c: 	subl	%eax, %edi
    0000094e: 	subw	%si, %ax
    00000951: 	cmovsl	%edi, %eax
    00000954: 	cwtl
    00000955: 	addl	%eax, %r8d
    00000958: 	leaq	0x5(%rdx), %rax
    0000095c: 	cmpq	%rax, %rbx
    0000095f: 	jbe	.Ltmp553 # Offset: 2399
    00000961: 	movzwl	0xa(%r12,%rcx), %esi
    00000967: 	movzwl	0xa(%r11,%rcx), %eax
    0000096d: 	movl	%esi, %edi
    0000096f: 	subl	%eax, %edi
    00000971: 	subw	%si, %ax
    00000974: 	cmovsl	%edi, %eax
    00000977: 	addq	$0x6, %rdx
    0000097b: 	cwtl
    0000097c: 	addl	%eax, %r8d
    0000097f: 	cmpq	%rdx, %rbx
    00000982: 	jbe	.Ltmp553 # Offset: 2434
    00000984: 	movzwl	0xc(%r12,%rcx), %edx
    0000098a: 	movzwl	0xc(%r11,%rcx), %eax
    00000990: 	movl	%edx, %ecx
    00000992: 	subl	%eax, %ecx
    00000994: 	subw	%dx, %ax
    00000997: 	cmovsl	%ecx, %eax
    0000099a: 	cwtl
    0000099b: 	addl	%eax, %r8d
.Ltmp553:
    0000099e: 	cmpq	$0x6, 0x88(%rsp)
    000009a7: 	jbe	.Ltmp554 # Offset: 2471
.Ltmp552:
    000009ad: 	movq	0x90(%rsp), %rdx
    000009b5: 	xorl	%eax, %eax
    000009b7: 	pxor	%xmm7, %xmm7
    000009bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp555:
    000009c0: 	movdqu	(%r12,%rax), %xmm1
    000009c6: 	movdqu	(%r11,%rax), %xmm0
    000009cc: 	movdqu	(%r11,%rax), %xmm8
    000009d2: 	addq	$0x10, %rax
    000009d6: 	psubw	%xmm1, %xmm8
    000009db: 	psubw	%xmm0, %xmm1
    000009df: 	movdqa	%xmm2, %xmm0
    000009e3: 	pcmpgtw	%xmm8, %xmm0
    000009e8: 	pand	%xmm0, %xmm1
    000009ec: 	pandn	%xmm8, %xmm0
    000009f1: 	por	%xmm1, %xmm0
    000009f5: 	pmaxsw	%xmm0, %xmm7
    000009f9: 	cmpq	%rdx, %rax
    000009fc: 	jne	.Ltmp555 # Offset: 2556
    000009fe: 	movdqa	%xmm7, %xmm0
    00000a02: 	movq	0x80(%rsp), %rax
    00000a0a: 	psrldq	$0x8, %xmm0
    00000a0f: 	pmaxsw	%xmm0, %xmm7
    00000a13: 	movdqa	%xmm7, %xmm0
    00000a17: 	psrldq	$0x4, %xmm0
    00000a1c: 	pmaxsw	%xmm0, %xmm7
    00000a20: 	movdqa	%xmm7, %xmm0
    00000a24: 	psrldq	$0x2, %xmm0
    00000a29: 	pmaxsw	%xmm0, %xmm7
    00000a2d: 	pextrw	$0x0, %xmm7, %ebx
    00000a32: 	cmpq	%rax, 0x60(%rsp)
    00000a37: 	je	.Ltmp556 # Offset: 2615
.Ltmp562:
    00000a3d: 	movzwl	(%r12,%rax,2), %esi
    00000a42: 	movzwl	(%r11,%rax,2), %ecx
    00000a47: 	leaq	(%rax,%rax), %rdx
    00000a4b: 	movq	0x60(%rsp), %r14
    00000a50: 	movl	%esi, %edi
    00000a52: 	subl	%ecx, %edi
    00000a54: 	subw	%si, %cx
    00000a57: 	cmovsl	%edi, %ecx
    00000a5a: 	cmpw	%cx, %bx
    00000a5d: 	cmovll	%ecx, %ebx
    00000a60: 	leaq	0x1(%rax), %rcx
    00000a64: 	cmpq	%rcx, %r14
    00000a67: 	jbe	.Ltmp556 # Offset: 2663
    00000a6d: 	movzwl	0x2(%r12,%rdx), %esi
    00000a73: 	movzwl	0x2(%r11,%rdx), %ecx
    00000a79: 	movl	%esi, %edi
    00000a7b: 	subl	%ecx, %edi
    00000a7d: 	subw	%si, %cx
    00000a80: 	cmovsl	%edi, %ecx
    00000a83: 	cmpw	%cx, %bx
    00000a86: 	cmovll	%ecx, %ebx
    00000a89: 	leaq	0x2(%rax), %rcx
    00000a8d: 	cmpq	%rcx, %r14
    00000a90: 	jbe	.Ltmp556 # Offset: 2704
    00000a96: 	movzwl	0x4(%r12,%rdx), %esi
    00000a9c: 	movzwl	0x4(%r11,%rdx), %ecx
    00000aa2: 	movl	%esi, %edi
    00000aa4: 	subl	%ecx, %edi
    00000aa6: 	subw	%si, %cx
    00000aa9: 	cmovsl	%edi, %ecx
    00000aac: 	cmpw	%cx, %bx
    00000aaf: 	cmovll	%ecx, %ebx
    00000ab2: 	leaq	0x3(%rax), %rcx
    00000ab6: 	cmpq	%rcx, %r14
    00000ab9: 	jbe	.Ltmp556 # Offset: 2745
    00000abf: 	movzwl	0x6(%r12,%rdx), %esi
    00000ac5: 	movzwl	0x6(%r11,%rdx), %ecx
    00000acb: 	movl	%esi, %edi
    00000acd: 	subl	%ecx, %edi
    00000acf: 	subw	%si, %cx
    00000ad2: 	cmovsl	%edi, %ecx
    00000ad5: 	cmpw	%cx, %bx
    00000ad8: 	cmovll	%ecx, %ebx
    00000adb: 	leaq	0x4(%rax), %rcx
    00000adf: 	cmpq	%rcx, %r14
    00000ae2: 	jbe	.Ltmp556 # Offset: 2786
    00000ae4: 	movzwl	0x8(%r12,%rdx), %esi
    00000aea: 	movzwl	0x8(%r11,%rdx), %ecx
    00000af0: 	movl	%esi, %edi
    00000af2: 	subl	%ecx, %edi
    00000af4: 	subw	%si, %cx
    00000af7: 	cmovsl	%edi, %ecx
    00000afa: 	cmpw	%cx, %bx
    00000afd: 	cmovll	%ecx, %ebx
    00000b00: 	leaq	0x5(%rax), %rcx
    00000b04: 	cmpq	%rcx, %r14
    00000b07: 	jbe	.Ltmp556 # Offset: 2823
    00000b09: 	movzwl	0xa(%r12,%rdx), %esi
    00000b0f: 	movzwl	0xa(%r11,%rdx), %ecx
    00000b15: 	movl	%esi, %edi
    00000b17: 	subl	%ecx, %edi
    00000b19: 	subw	%si, %cx
    00000b1c: 	cmovsl	%edi, %ecx
    00000b1f: 	cmpw	%cx, %bx
    00000b22: 	cmovll	%ecx, %ebx
    00000b25: 	addq	$0x6, %rax
    00000b29: 	cmpq	%rax, %r14
    00000b2c: 	jbe	.Ltmp556 # Offset: 2860
    00000b2e: 	movzwl	0xc(%r11,%rdx), %eax
    00000b34: 	movzwl	0xc(%r12,%rdx), %edx
    00000b3a: 	movl	%edx, %ecx
    00000b3c: 	subl	%eax, %ecx
    00000b3e: 	subw	%dx, %ax
    00000b41: 	cmovsl	%ecx, %eax
    00000b44: 	cmpw	%ax, %bx
    00000b47: 	cmovll	%eax, %ebx
.Ltmp556:
    00000b4a: 	movl	0x6c(%rsp), %eax
    00000b4e: 	cmpl	%eax, 0x140(%rsp)
    00000b55: 	jge	.Ltmp557 # Offset: 2901
    00000b57: 	testw	%bx, %bx
    00000b5a: 	jle	.Ltmp558 # Offset: 2906
    00000b60: 	cmpl	$0x9, %r8d
    00000b64: 	jle	.Ltmp558 # Offset: 2916
.Ltmp557:
    00000b6a: 	addl	$0x1, 0x6c(%rsp)
    00000b6f: 	movq	%r12, %rax
    00000b72: 	movl	0x6c(%rsp), %esi
    00000b76: 	movq	%r11, %r12
    00000b79: 	cmpl	0xa0(%rsp), %esi
    00000b80: 	je	.Ltmp558 # Offset: 2944
    00000b86: 	movq	%rax, %r11
    00000b89: 	jmp	.Ltmp559 # Offset: 2953
    00000b8e: 	nop # Size: 2
.Ltmp545:
    00000b90: 	movq	0x78(%rsp), %rbx
    00000b95: 	movq	0x70(%rsp), %rdi
    00000b9a: 	movq	0x18(%rsp), %rdx
    00000b9f: 	leaq	(%rbx,%rsi), %r8
    00000ba3: 	leaq	(%rax,%rdi), %r13
    00000ba7: 	movq	%rbx, %rdi
    00000baa: 	movq	0x10(%rsp), %rbx
    00000baf: 	leaq	(%rdi,%rdx), %r9
    00000bb3: 	addq	%rdi, %rbx
    00000bb6: 	movq	0x40(%rsp), %rdi
    00000bbb: 	addq	%rdi, %rbx
    00000bbe: 	addq	%rdi, %r9
    00000bc1: 	addq	%r11, %rbx
    00000bc4: 	addq	%r11, %r9
    00000bc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp560:
    00000bd0: 	movswl	0x2(%rbx,%r8), %edx
    00000bd6: 	movswl	(%r11,%r8), %edi
    00000bdb: 	addl	%edx, %edi
    00000bdd: 	movswl	0x4(%r11,%r8), %edx
    00000be3: 	addl	%edi, %edx
    00000be5: 	movswl	0x2(%r9,%r8), %edi
    00000beb: 	addl	%edx, %edi
    00000bed: 	leal	0x5(%rdi), %edx
    00000bf0: 	addl	$0x2, %edi
    00000bf3: 	cmovnsl	%edi, %edx
    00000bf6: 	sarl	$0x2, %edx
    00000bf9: 	subw	0x2(%r12,%r8), %dx
    00000bff: 	movswl	%dx, %edx
    00000c02: 	imull	$0x71, %edx, %edx
    00000c05: 	sarl	$0x6, %edx
    00000c08: 	addw	0x2(%r12,%r8), %dx
    00000c0e: 	movw	%dx, 0x2(%r12,%r8)
    00000c14: 	addq	$0x2, %r8
    00000c18: 	cmpq	%r13, %r8
    00000c1b: 	jne	.Ltmp560 # Offset: 3099
    00000c1d: 	jmp	.Ltmp547 # Offset: 3101
.Ltmp549:
    00000c22: 	movl	0x6c(%rsp), %eax
    00000c26: 	cmpl	%eax, 0x140(%rsp)
    00000c2d: 	jl	.Ltmp561 # Offset: 3117
    00000c33: 	xorl	%r8d, %r8d
    00000c36: 	xorl	%ebx, %ebx
    00000c38: 	jmp	.Ltmp557 # Offset: 3128
.Ltmp554:
    00000c3d: 	xorl	%ebx, %ebx
    00000c3f: 	xorl	%eax, %eax
    00000c41: 	jmp	.Ltmp562 # Offset: 3137
.Ltmp550:
    00000c46: 	xorl	%r8d, %r8d
    00000c49: 	xorl	%edx, %edx
    00000c4b: 	jmp	.Ltmp563 # Offset: 3147
.Ltmp558:
    00000c50: 	movswl	%bx, %eax
    00000c53: 	movl	%eax, 0x8(%rsp)
.Ltmp567:
    00000c57: 	movl	%r8d, 0x10(%rsp)
    00000c5c: 	callq	clock@PLT # Offset: 3164
    00000c61: 	movl	0xd8(%rsp), %esi
    00000c68: 	pxor	%xmm0, %xmm0
    00000c6c: 	movzwl	0xee(%rsp), %r14d
    00000c75: 	movq	%rax, end_time(%rip)
    00000c7c: 	subq	start_time(%rip), %rax
    00000c83: 	cvtsi2sd	%rax, %xmm0
    00000c88: 	movl	%esi, %eax
    00000c8a: 	divsd	DATAat0x49520(%rip), %xmm0
    00000c92: 	movl	0x10(%rsp), %r8d
    00000c97: 	shrl	$0x1f, %eax
    00000c9a: 	movq	%xmm0, %r13
    00000c9f: 	addl	%esi, %eax
    00000ca1: 	movl	0xdc(%rsp), %esi
    00000ca8: 	sarl	%eax
    00000caa: 	movl	%esi, %edx
    00000cac: 	imull	%esi, %eax
    00000caf: 	shrl	$0x1f, %edx
    00000cb2: 	addl	%esi, %edx
    00000cb4: 	sarl	%edx
    00000cb6: 	addl	%edx, %eax
    00000cb8: 	cltq
    00000cba: 	subw	(%r12,%rax,2), %r14w
    00000cbf: 	movl	0x6c(%rsp), %eax
    00000cc3: 	cmpl	%eax, iterations(%rip)
    00000cc9: 	jg	.Ltmp564 # Offset: 3273
    00000ccf: 	cmpl	$0xa, %r8d
    00000cd3: 	jle	.Ltmp564 # Offset: 3283
    00000cd9: 	cmpw	$0x1, %bx
    00000cdd: 	jle	.Ltmp564 # Offset: 3293
    00000ce3: 	movq	0xe0(%rsp), %rax
    00000ceb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000cf2: 	movq	%r15, %rdi
    00000cf5: 	movq	0x8(%rax), %rdx
    00000cf9: 	movq	(%rax), %rsi
    00000cfc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3324
    00000d01: 	movl	$0x11, %edx
    00000d06: 	leaq	DATAat0x49199(%rip), %rsi
    00000d0d: 	movq	%rax, %rdi
    00000d10: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3344
    00000d15: 	movl	0x10(%rsp), %r8d
.Ltmp566:
    00000d1a: 	movl	$0x4, %edx
    00000d1f: 	leaq	DATAat0x491b6(%rip), %rsi
    00000d26: 	movq	%r15, %rdi
    00000d29: 	movl	%r8d, 0x10(%rsp)
    00000d2e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3374
    00000d33: 	movl	0x6c(%rsp), %esi
    00000d37: 	movq	%r15, %rdi
    00000d3a: 	callq	_ZNSolsEi@PLT # Offset: 3386
    00000d3f: 	movl	$0xb, %edx
    00000d44: 	leaq	DATAat0x491bb(%rip), %rsi
    00000d4b: 	movq	%rax, %rdi
    00000d4e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3406
    00000d53: 	movl	$0xa, %edx
    00000d58: 	leaq	DATAat0x491c7(%rip), %rsi
    00000d5f: 	movq	%r15, %rdi
    00000d62: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3426
    00000d67: 	movl	0x10(%rsp), %esi
    00000d6b: 	movq	%r15, %rdi
    00000d6e: 	callq	_ZNSolsEi@PLT # Offset: 3438
    00000d73: 	movl	$0x7, %edx
    00000d78: 	leaq	DATAat0x491d2(%rip), %rsi
    00000d7f: 	movq	%rax, %rdi
    00000d82: 	movq	%rax, %rbp
    00000d85: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3461
    00000d8a: 	movl	0x8(%rsp), %esi
    00000d8e: 	movq	%rbp, %rdi
    00000d91: 	callq	_ZNSolsEs@PLT # Offset: 3473
    00000d96: 	movl	$0x10, %edx
    00000d9b: 	leaq	DATAat0x491da(%rip), %rsi
    00000da2: 	movq	%rax, %rbp
    00000da5: 	movq	%rax, %rdi
    00000da8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3496
    00000dad: 	movq	%rbp, %rdi
    00000db0: 	movswl	%r14w, %esi
    00000db4: 	callq	_ZNSolsEs@PLT # Offset: 3508
    00000db9: 	movl	$0x8, %edx
    00000dbe: 	leaq	DATAat0x491eb(%rip), %rsi
    00000dc5: 	movq	%rax, %rbp
    00000dc8: 	movq	%rax, %rdi
    00000dcb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3531
    00000dd0: 	movq	%r13, %xmm0
    00000dd5: 	movq	%rbp, %rdi
    00000dd8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3544
    00000ddd: 	movl	$0x2, %edx
    00000de2: 	leaq	DATAat0x491f4(%rip), %rsi
    00000de9: 	movq	%rax, %rdi
    00000dec: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3564
    00000df1: 	movl	0xe8(%rsp), %eax
    00000df8: 	movl	%eax, iterations(%rip)
    00000dfe: 	movq	0xf8(%rsp), %rax
    00000e06: 	subq	%fs:0x28, %rax
    00000e0f: 	jne	.Ltmp565 # Offset: 3599
    00000e11: 	addq	$0x108, %rsp
    00000e18: 	popq	%rbx
    00000e19: 	popq	%rbp
    00000e1a: 	popq	%r12
    00000e1c: 	popq	%r13
    00000e1e: 	popq	%r14
    00000e20: 	popq	%r15
    00000e22: 	retq # Offset: 3618
.Ltmp564:
    00000e23: 	movq	0xe0(%rsp), %rax
    00000e2b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000e32: 	movl	%r8d, 0x10(%rsp)
    00000e37: 	movq	%r15, %rdi
    00000e3a: 	movq	0x8(%rax), %rdx
    00000e3e: 	movq	(%rax), %rsi
    00000e41: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3649
    00000e46: 	movl	$0xa, %edx
    00000e4b: 	leaq	DATAat0x491ab(%rip), %rsi
    00000e52: 	movq	%rax, %rdi
    00000e55: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3669
    00000e5a: 	movl	0x10(%rsp), %r8d
    00000e5f: 	jmp	.Ltmp566 # Offset: 3679
.Ltmp561:
    00000e64: 	movl	$0x0, 0x8(%rsp)
    00000e6c: 	xorl	%ebx, %ebx
    00000e6e: 	xorl	%r8d, %r8d
    00000e71: 	jmp	.Ltmp567 # Offset: 3697
.Ltmp565:
    00000e76: 	callq	__stack_chk_fail@PLT # Offset: 3702
    00000e7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp543:
    00000e80: 	movl	$0x0, 0x8(%rsp)
    00000e88: 	xorl	%ebx, %ebx
    00000e8a: 	xorl	%r8d, %r8d
    00000e8d: 	movl	$0x0, 0x6c(%rsp)
    00000e95: 	jmp	.Ltmp567 # Offset: 3733
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi21jacobi_sor2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x18620
  Size        : 0x1049
  MaxSize     : 0x1050
  Offset      : 0x18620
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi21jacobi_sor2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%ecx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	subq	$0xb8, %rsp
    00000022: 	movl	%edx, 0x8c(%rsp)
    00000029: 	movl	%r14d, %edx
    0000002c: 	movl	%ecx, 0x80(%rsp)
    00000033: 	leaq	0xa0(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x2c(%rsp)
    00000040: 	movq	%r9, 0x90(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0xa8(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	movq	DATAat0x49530(%rip), %rax
    00000062: 	movq	%rax, 0xa0(%rsp)
    0000006a: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 106
    0000006f: 	movl	%ebx, %edi
    00000071: 	imull	%r14d, %edi
    00000075: 	movw	%ax, 0x9e(%rsp)
    0000007d: 	movslq	%edi, %rbx
    00000080: 	testl	%ebx, %ebx
    00000082: 	jle	.Ltmp568 # Offset: 130
    00000084: 	movslq	%ebx, %rdx
    00000087: 	movq	%rbp, %rsi
    0000008a: 	movq	%r12, %rdi
    0000008d: 	addq	%rdx, %rdx
    00000090: 	callq	memmove@PLT # Offset: 144
.Ltmp568:
    00000095: 	movl	iterations(%rip), %eax
    0000009b: 	movl	$0x2710, iterations(%rip)
    000000a5: 	movl	%eax, 0x98(%rsp)
    000000ac: 	callq	clock@PLT # Offset: 172
    000000b1: 	movq	%rax, start_time(%rip)
    000000b8: 	movl	iterations(%rip), %eax
    000000be: 	movl	%eax, 0x84(%rsp)
    000000c5: 	testl	%eax, %eax
    000000c7: 	jle	.Ltmp569 # Offset: 199
    000000cd: 	movl	0x8c(%rsp), %eax
    000000d4: 	movl	0x2c(%rsp), %edx
    000000d8: 	movq	%rbx, 0x48(%rsp)
    000000dd: 	movl	$0x0, 0x54(%rsp)
    000000e5: 	movdqa	DATAat0x49440(%rip), %xmm9
    000000ee: 	movdqa	DATAat0x49450(%rip), %xmm8
    000000f7: 	subl	$0x1, %eax
    000000fa: 	addl	%edx, %edx
    000000fc: 	movdqa	DATAat0x49460(%rip), %xmm15
    00000105: 	movl	%eax, 0x28(%rsp)
    00000109: 	movl	0x80(%rsp), %eax
    00000110: 	movl	%edx, 0x88(%rsp)
    00000117: 	leal	-0x4(%rax), %edi
    0000011a: 	subl	$0x6, %eax
    0000011d: 	movl	%eax, %ecx
    0000011f: 	movl	%eax, 0x30(%rsp)
    00000123: 	shrl	$0x4, %eax
    00000126: 	leal	-0x1(%rax), %edx
    00000129: 	shll	$0x4, %eax
    0000012c: 	shrl	$0x2, %ecx
    0000012f: 	addl	$0x1, %eax
    00000132: 	addq	$0x1, %rdx
    00000136: 	movl	%eax, 0x50(%rsp)
    0000013a: 	cltq
    0000013c: 	shlq	$0x5, %rdx
    00000140: 	movq	%rax, 0x38(%rsp)
    00000145: 	movl	%ecx, %eax
    00000147: 	shlq	$0x2, %rax
    0000014b: 	movq	%rdx, 0x40(%rsp)
    00000150: 	movq	%rax, 0x78(%rsp)
    00000155: 	leal	0x5(,%rcx,4), %eax
    0000015c: 	movl	%eax, 0x34(%rsp)
    00000160: 	leaq	-0x1(%rbx), %rax
    00000164: 	movq	%rax, 0x68(%rsp)
    00000169: 	movq	%rbx, %rax
    0000016c: 	andq	$-0x8, %rbx
    00000170: 	shrq	$0x3, %rax
    00000174: 	movq	%rbx, 0x60(%rsp)
    00000179: 	shlq	$0x4, %rax
    0000017d: 	movq	%rax, 0x70(%rsp)
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp587:
    00000188: 	cmpl	$0x1, 0x28(%rsp)
    0000018d: 	jle	.Ltmp570 # Offset: 397
    00000193: 	movl	0x80(%rsp), %eax
    0000019a: 	movl	$0x0, 0x18(%rsp)
    000001a2: 	pxor	%xmm3, %xmm3
    000001a6: 	pxor	%xmm14, %xmm14
    000001ab: 	movl	$0x1, 0x1c(%rsp)
    000001b3: 	movl	0x88(%rsp), %r14d
    000001bb: 	subl	$0x1, %eax
    000001be: 	movl	0x2c(%rsp), %r8d
    000001c3: 	movl	%eax, 0x14(%rsp)
    000001c7: 	leaq	0x8(%rbp), %rax
    000001cb: 	movq	%rax, 0x58(%rsp)
.Ltmp576:
    000001d0: 	addl	$0x1, 0x1c(%rsp)
    000001d5: 	movl	$0x1, %eax
    000001da: 	cmpl	$0x1, %edi
    000001dd: 	jle	.Ltmp571 # Offset: 477
    000001e3: 	movslq	%r8d, %r13
    000001e6: 	movslq	0x18(%rsp), %r15
    000001eb: 	movslq	%r14d, %rbx
    000001ee: 	leaq	0x2(%r13,%r13), %r9
    000001f3: 	movq	%rbx, 0x20(%rsp)
    000001f8: 	leaq	0xa(%rbx,%rbx), %rsi
    000001fd: 	leaq	(%r12,%r9), %rax
    00000201: 	leaq	0xe(%rbp,%r9), %r10
    00000206: 	movq	%rax, %rcx
    00000209: 	leaq	0x6(%rbp,%r9), %rdx
    0000020e: 	leaq	0xa(%r15,%r15), %r11
    00000213: 	subq	%r10, %rcx
    00000216: 	leaq	(%rbp,%r11), %rbx
    0000021b: 	addq	$0x6, %rcx
    0000021f: 	cmpq	$0x18, %rcx
    00000223: 	movq	%rax, %rcx
    00000226: 	seta	%r10b
    0000022a: 	subq	%rdx, %rcx
    0000022d: 	addq	$0x6, %rcx
    00000231: 	cmpq	$0x1c, %rcx
    00000235: 	seta	%cl
    00000238: 	andl	%r10d, %ecx
    0000023b: 	cmpl	$0xf, 0x30(%rsp)
    00000240: 	seta	%r10b
    00000244: 	andl	%r10d, %ecx
    00000247: 	movq	%rax, %r10
    0000024a: 	subq	%rbx, %r10
    0000024d: 	addq	$0x6, %r10
    00000251: 	cmpq	$0x1c, %r10
    00000255: 	seta	%r10b
    00000259: 	testb	%r10b, %cl
    0000025c: 	je	.Ltmp572 # Offset: 604
    00000262: 	leaq	(%rbp,%rsi), %r10
    00000267: 	movq	%rax, %rcx
    0000026a: 	subq	%r10, %rcx
    0000026d: 	addq	$0x6, %rcx
    00000271: 	cmpq	$0x1c, %rcx
    00000275: 	jbe	.Ltmp572 # Offset: 629
    0000027b: 	movq	0x40(%rsp), %rbx
    00000280: 	leaq	-0x2(%rbp,%r9), %r10
    00000285: 	leaq	-0x8(%rbp,%r11), %r11
    0000028a: 	xorl	%ecx, %ecx
    0000028c: 	leaq	-0x8(%rbp,%rsi), %rsi
    00000291: 	leaq	0x4(%r12,%r9), %r9
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp573:
    000002a0: 	movdqu	(%rax), %xmm4
    000002a4: 	movdqu	0x10(%rax), %xmm7
    000002a9: 	movdqa	%xmm3, %xmm0
    000002ad: 	movdqa	%xmm3, %xmm12
    000002b2: 	movdqu	(%r11,%rcx), %xmm6
    000002b8: 	movdqu	(%r10,%rcx), %xmm2
    000002be: 	movdqa	%xmm3, %xmm11
    000002c3: 	addq	$0x20, %rax
    000002c7: 	movdqa	%xmm4, %xmm10
    000002cc: 	shufps	$0xdd, %xmm7, %xmm4
    000002d0: 	movdqu	(%rsi,%rcx), %xmm5
    000002d5: 	shufps	$0x88, %xmm7, %xmm10
    000002da: 	movdqu	0x10(%r11,%rcx), %xmm7
    000002e1: 	movdqa	%xmm2, %xmm1
    000002e5: 	shufps	$0x88, %xmm7, %xmm6
    000002e9: 	movdqu	0x10(%r10,%rcx), %xmm7
    000002f0: 	pcmpgtw	%xmm6, %xmm12
    000002f5: 	movdqa	%xmm6, %xmm13
    000002fa: 	shufps	$0xdd, %xmm7, %xmm2
    000002fe: 	pcmpgtw	%xmm2, %xmm0
    00000302: 	shufps	$0x88, %xmm7, %xmm1
    00000306: 	movdqa	%xmm2, %xmm7
    0000030a: 	pcmpgtw	%xmm1, %xmm11
    0000030f: 	punpcklwd	%xmm12, %xmm13
    00000314: 	punpckhwd	%xmm12, %xmm6
    00000319: 	movdqa	%xmm3, %xmm12
    0000031e: 	punpcklwd	%xmm0, %xmm7
    00000322: 	punpckhwd	%xmm0, %xmm2
    00000326: 	movdqu	0x10(%rsi,%rcx), %xmm0
    0000032c: 	shufps	$0x88, %xmm0, %xmm5
    00000330: 	movdqa	%xmm1, %xmm0
    00000334: 	punpckhwd	%xmm11, %xmm1
    00000339: 	punpcklwd	%xmm11, %xmm0
    0000033e: 	paddd	%xmm6, %xmm1
    00000342: 	movdqa	%xmm14, %xmm6
    00000347: 	paddd	%xmm13, %xmm0
    0000034c: 	movdqa	%xmm3, %xmm13
    00000351: 	paddd	%xmm2, %xmm1
    00000355: 	pcmpgtw	%xmm5, %xmm13
    0000035a: 	paddd	%xmm7, %xmm0
    0000035e: 	movdqa	%xmm3, %xmm11
    00000363: 	movaps	%xmm0, (%rsp)
    00000367: 	movdqa	%xmm5, %xmm0
    0000036b: 	punpcklwd	%xmm13, %xmm0
    00000370: 	punpckhwd	%xmm13, %xmm5
    00000375: 	paddd	(%rsp), %xmm0
    0000037a: 	paddd	%xmm5, %xmm1
    0000037e: 	movdqa	%xmm14, %xmm5
    00000383: 	paddd	%xmm9, %xmm0
    00000388: 	paddd	%xmm9, %xmm1
    0000038d: 	pcmpgtd	%xmm0, %xmm6
    00000391: 	pcmpgtd	%xmm1, %xmm5
    00000395: 	pand	%xmm8, %xmm6
    0000039a: 	pand	%xmm8, %xmm5
    0000039f: 	paddd	%xmm6, %xmm0
    000003a3: 	paddd	%xmm5, %xmm1
    000003a7: 	movdqu	0x10(%r11,%rcx), %xmm6
    000003ae: 	psrad	$0x2, %xmm1
    000003b3: 	psrad	$0x2, %xmm0
    000003b8: 	movdqa	%xmm0, %xmm5
    000003bc: 	punpcklwd	%xmm1, %xmm0
    000003c0: 	punpckhwd	%xmm1, %xmm5
    000003c4: 	movdqa	%xmm0, %xmm1
    000003c8: 	punpckhwd	%xmm5, %xmm1
    000003cc: 	punpcklwd	%xmm5, %xmm0
    000003d0: 	punpcklwd	%xmm1, %xmm0
    000003d4: 	psubw	%xmm10, %xmm0
    000003d9: 	movdqa	%xmm0, %xmm5
    000003dd: 	pmulhw	%xmm15, %xmm0
    000003e2: 	pmullw	%xmm15, %xmm5
    000003e7: 	movdqa	%xmm5, %xmm1
    000003eb: 	punpckhwd	%xmm0, %xmm5
    000003ef: 	punpcklwd	%xmm0, %xmm1
    000003f3: 	movdqa	%xmm5, %xmm0
    000003f7: 	psrad	$0x6, %xmm0
    000003fc: 	psrad	$0x6, %xmm1
    00000401: 	movdqa	%xmm1, %xmm5
    00000405: 	punpcklwd	%xmm0, %xmm1
    00000409: 	punpckhwd	%xmm0, %xmm5
    0000040d: 	movdqa	%xmm1, %xmm0
    00000411: 	punpckhwd	%xmm5, %xmm0
    00000415: 	punpcklwd	%xmm5, %xmm1
    00000419: 	movdqu	(%r11,%rcx), %xmm5
    0000041f: 	punpcklwd	%xmm0, %xmm1
    00000423: 	movdqu	0x10(%rdx,%rcx), %xmm0
    00000429: 	shufps	$0xdd, %xmm6, %xmm5
    0000042d: 	movdqu	(%rdx,%rcx), %xmm6
    00000432: 	paddw	%xmm10, %xmm1
    00000437: 	pcmpgtw	%xmm5, %xmm12
    0000043c: 	movdqu	(%rsi,%rcx), %xmm10
    00000442: 	shufps	$0x88, %xmm0, %xmm6
    00000446: 	movdqu	0x10(%rsi,%rcx), %xmm0
    0000044c: 	pcmpgtw	%xmm6, %xmm11
    00000451: 	movd	%xmm1, -0x20(%rax)
    00000456: 	shufps	$0xdd, %xmm0, %xmm10
    0000045b: 	movdqa	%xmm5, %xmm0
    0000045f: 	punpckhwd	%xmm12, %xmm5
    00000464: 	movdqa	%xmm10, %xmm13
    00000469: 	punpcklwd	%xmm12, %xmm0
    0000046e: 	paddd	%xmm5, %xmm2
    00000472: 	movdqa	%xmm14, %xmm5
    00000477: 	paddd	%xmm7, %xmm0
    0000047b: 	movdqa	%xmm6, %xmm7
    0000047f: 	punpckhwd	%xmm11, %xmm6
    00000484: 	punpcklwd	%xmm11, %xmm7
    00000489: 	paddd	%xmm6, %xmm2
    0000048d: 	movdqa	%xmm14, %xmm6
    00000492: 	paddd	%xmm7, %xmm0
    00000496: 	movdqa	%xmm3, %xmm7
    0000049a: 	pcmpgtw	%xmm10, %xmm7
    0000049f: 	punpcklwd	%xmm7, %xmm13
    000004a4: 	punpckhwd	%xmm7, %xmm10
    000004a9: 	paddd	%xmm13, %xmm0
    000004ae: 	paddd	%xmm10, %xmm2
    000004b3: 	paddd	%xmm9, %xmm0
    000004b8: 	paddd	%xmm9, %xmm2
    000004bd: 	pcmpgtd	%xmm0, %xmm6
    000004c1: 	pcmpgtd	%xmm2, %xmm5
    000004c5: 	pand	%xmm8, %xmm6
    000004ca: 	pand	%xmm8, %xmm5
    000004cf: 	paddd	%xmm6, %xmm0
    000004d3: 	paddd	%xmm5, %xmm2
    000004d7: 	psrad	$0x2, %xmm2
    000004dc: 	psrad	$0x2, %xmm0
    000004e1: 	movdqa	%xmm0, %xmm5
    000004e5: 	punpcklwd	%xmm2, %xmm0
    000004e9: 	punpckhwd	%xmm2, %xmm5
    000004ed: 	movdqa	%xmm0, %xmm2
    000004f1: 	punpckhwd	%xmm5, %xmm2
    000004f5: 	punpcklwd	%xmm5, %xmm0
    000004f9: 	punpcklwd	%xmm2, %xmm0
    000004fd: 	psubw	%xmm4, %xmm0
    00000501: 	movdqa	%xmm0, %xmm5
    00000505: 	pmulhw	%xmm15, %xmm0
    0000050a: 	pmullw	%xmm15, %xmm5
    0000050f: 	movdqa	%xmm5, %xmm2
    00000513: 	punpckhwd	%xmm0, %xmm5
    00000517: 	punpcklwd	%xmm0, %xmm2
    0000051b: 	psrad	$0x6, %xmm5
    00000520: 	psrad	$0x6, %xmm2
    00000525: 	movdqa	%xmm2, %xmm0
    00000529: 	movdqa	%xmm2, %xmm6
    0000052d: 	punpcklwd	%xmm5, %xmm0
    00000531: 	punpckhwd	%xmm5, %xmm6
    00000535: 	movdqa	%xmm0, %xmm2
    00000539: 	punpcklwd	%xmm6, %xmm0
    0000053d: 	punpckhwd	%xmm6, %xmm2
    00000541: 	punpcklwd	%xmm2, %xmm0
    00000545: 	pshufd	$0x55, %xmm1, %xmm2
    0000054a: 	movd	%xmm2, -0x18(%rax)
    0000054f: 	movdqa	%xmm1, %xmm2
    00000553: 	paddw	%xmm4, %xmm0
    00000557: 	punpckhdq	%xmm1, %xmm2
    0000055b: 	pshufd	$0xff, %xmm1, %xmm1
    00000560: 	movd	%xmm1, -0x8(%rax)
    00000565: 	pshufd	$0x55, %xmm0, %xmm1
    0000056a: 	movd	%xmm2, -0x10(%rax)
    0000056f: 	movd	%xmm1, 0x8(%r9,%rcx)
    00000576: 	movdqa	%xmm0, %xmm1
    0000057a: 	movd	%xmm0, (%r9,%rcx)
    00000580: 	punpckhdq	%xmm0, %xmm1
    00000584: 	pshufd	$0xff, %xmm0, %xmm0
    00000589: 	movd	%xmm1, 0x10(%r9,%rcx)
    00000590: 	movd	%xmm0, 0x18(%r9,%rcx)
    00000597: 	addq	$0x20, %rcx
    0000059b: 	cmpq	%rcx, %rbx
    0000059e: 	jne	.Ltmp573 # Offset: 1438
    000005a4: 	movq	0x38(%rsp), %rdx
    000005a9: 	movq	0x20(%rsp), %rax
    000005ae: 	leaq	(%rdx,%r13), %r9
    000005b2: 	addq	%rdx, %r15
    000005b5: 	addq	%rdx, %rax
    000005b8: 	movl	0x50(%rsp), %r13d
    000005bd: 	addq	%r9, %r9
    000005c0: 	leaq	(%rbp,%r15,2), %rbx
    000005c5: 	leaq	(%rbp,%rax,2), %r11
    000005ca: 	leaq	(%r12,%r9), %r10
    000005ce: 	addq	%rbp, %r9
    000005d1: 	nopl	(%rax) # Size: 7
.Ltmp574:
    000005d8: 	movswl	(%rbx), %eax
    000005db: 	movswl	-0x2(%r9), %edx
    000005e0: 	addl	$0x4, %r13d
    000005e4: 	movswl	0x2(%r9), %esi
    000005e9: 	movswl	0x4(%rbx), %r15d
    000005ee: 	addl	%eax, %edx
    000005f0: 	movswl	(%r9), %ecx
    000005f4: 	movswl	0x2(%rbx), %eax
    000005f8: 	addl	%esi, %edx
    000005fa: 	addl	%esi, %r15d
    000005fd: 	movswl	0x6(%r9), %esi
    00000602: 	movq	(%r10), %xmm0
    00000607: 	addl	%eax, %ecx
    00000609: 	movswl	0x4(%r9), %eax
    0000060e: 	addl	%r15d, %esi
    00000611: 	movswl	0x6(%rbx), %r15d
    00000616: 	addl	%eax, %ecx
    00000618: 	addl	%eax, %r15d
    0000061b: 	movswl	0x8(%r9), %eax
    00000620: 	addl	%r15d, %eax
    00000623: 	movswl	(%r11), %r15d
    00000627: 	addl	%edx, %r15d
    0000062a: 	leal	0x5(%r15), %edx
    0000062e: 	addl	$0x2, %r15d
    00000632: 	cmovnsl	%r15d, %edx
    00000636: 	movswl	0x2(%r11), %r15d
    0000063b: 	sarl	$0x2, %edx
    0000063e: 	subw	(%r10), %dx
    00000642: 	addl	%ecx, %r15d
    00000645: 	movswl	%dx, %edx
    00000648: 	leal	0x5(%r15), %ecx
    0000064c: 	imull	$0x71, %edx, %edx
    0000064f: 	sarl	$0x6, %edx
    00000652: 	addl	$0x2, %r15d
    00000656: 	cmovnsl	%r15d, %ecx
    0000065a: 	movswl	0x4(%r11), %r15d
    0000065f: 	movzwl	%dx, %edx
    00000662: 	sarl	$0x2, %ecx
    00000665: 	subw	0x2(%r10), %cx
    0000066a: 	addl	%esi, %r15d
    0000066d: 	movswl	%cx, %ecx
    00000670: 	leal	0x5(%r15), %esi
    00000674: 	imull	$0x71, %ecx, %ecx
    00000677: 	sarl	$0x6, %ecx
    0000067a: 	addl	$0x2, %r15d
    0000067e: 	cmovnsl	%r15d, %esi
    00000682: 	movswl	0x6(%r11), %r15d
    00000687: 	movzwl	%cx, %ecx
    0000068a: 	sarl	$0x2, %esi
    0000068d: 	subw	0x4(%r10), %si
    00000692: 	addl	%eax, %r15d
    00000695: 	movswl	%si, %esi
    00000698: 	leal	0x5(%r15), %eax
    0000069c: 	imull	$0x71, %esi, %esi
    0000069f: 	sarl	$0x6, %esi
    000006a2: 	addl	$0x2, %r15d
    000006a6: 	cmovnsl	%r15d, %eax
    000006aa: 	movzwl	%si, %esi
    000006ad: 	addq	$0x8, %r10
    000006b1: 	addq	$0x8, %rbx
    000006b5: 	addq	$0x8, %r9
    000006b9: 	addq	$0x8, %r11
    000006bd: 	sarl	$0x2, %eax
    000006c0: 	subw	-0x2(%r10), %ax
    000006c5: 	cwtl
    000006c6: 	imull	$0x71, %eax, %eax
    000006c9: 	sarl	$0x6, %eax
    000006cc: 	movzwl	%ax, %eax
    000006cf: 	shlq	$0x10, %rax
    000006d3: 	orq	%rsi, %rax
    000006d6: 	shlq	$0x10, %rax
    000006da: 	orq	%rcx, %rax
    000006dd: 	shlq	$0x10, %rax
    000006e1: 	orq	%rdx, %rax
    000006e4: 	movq	%rax, %xmm4
    000006e9: 	paddw	%xmm4, %xmm0
    000006ed: 	movq	%xmm0, -0x8(%r10)
    000006f3: 	cmpl	%r13d, %edi
    000006f6: 	jg	.Ltmp574 # Offset: 1782
.Ltmp589:
    000006fc: 	movl	0x34(%rsp), %eax
.Ltmp571:
    00000700: 	cmpl	0x14(%rsp), %eax
    00000704: 	jge	.Ltmp575 # Offset: 1796
    0000070a: 	movl	0x18(%rsp), %r15d
    0000070f: 	leal	(%r8,%rax), %r10d
    00000713: 	movslq	%r10d, %r10
    00000716: 	leal	(%r15,%rax), %edx
    0000071a: 	leaq	(%r12,%r10,2), %r11
    0000071e: 	movslq	%edx, %rdx
    00000721: 	movswl	(%rbp,%rdx,2), %ecx
    00000726: 	leal	-0x1(%r8,%rax), %edx
    0000072b: 	movslq	%edx, %rdx
    0000072e: 	movswl	(%rbp,%rdx,2), %r9d
    00000734: 	addl	%ecx, %r9d
    00000737: 	leal	0x1(%rax), %ecx
    0000073a: 	leal	(%r8,%rcx), %edx
    0000073e: 	movslq	%edx, %rdx
    00000741: 	addq	%rdx, %rdx
    00000744: 	leaq	(%rbp,%rdx), %rbx
    00000749: 	movswl	(%rbx), %esi
    0000074c: 	addl	%r9d, %esi
    0000074f: 	leal	(%r14,%rax), %r9d
    00000753: 	movslq	%r9d, %r9
    00000756: 	movswl	(%rbp,%r9,2), %r9d
    0000075c: 	addl	%esi, %r9d
    0000075f: 	leal	0x5(%r9), %esi
    00000763: 	addl	$0x2, %r9d
    00000767: 	cmovnsl	%r9d, %esi
    0000076b: 	sarl	$0x2, %esi
    0000076e: 	subw	(%r11), %si
    00000772: 	movswl	%si, %esi
    00000775: 	imull	$0x71, %esi, %esi
    00000778: 	sarl	$0x6, %esi
    0000077b: 	addw	(%r11), %si
    0000077f: 	movw	%si, (%r11)
    00000783: 	cmpl	%ecx, 0x14(%rsp)
    00000787: 	jle	.Ltmp575 # Offset: 1927
    0000078d: 	leal	(%r15,%rcx), %esi
    00000791: 	movswl	(%rbp,%r10,2), %r11d
    00000797: 	leal	0x2(%rax), %r9d
    0000079b: 	addl	%r14d, %ecx
    0000079e: 	movslq	%esi, %rsi
    000007a1: 	movslq	%ecx, %rcx
    000007a4: 	addq	%r12, %rdx
    000007a7: 	movswl	(%rbp,%rsi,2), %esi
    000007ac: 	movswl	(%rbp,%rcx,2), %ecx
    000007b1: 	addl	%esi, %r11d
    000007b4: 	leal	(%r8,%r9), %esi
    000007b8: 	movslq	%esi, %rsi
    000007bb: 	addq	%rsi, %rsi
    000007be: 	leaq	(%rbp,%rsi), %r13
    000007c3: 	movswl	(%r13), %r10d
    000007c8: 	addl	%r11d, %r10d
    000007cb: 	addl	%ecx, %r10d
    000007ce: 	leal	0x5(%r10), %ecx
    000007d2: 	addl	$0x2, %r10d
    000007d6: 	cmovnsl	%r10d, %ecx
    000007da: 	sarl	$0x2, %ecx
    000007dd: 	subw	(%rdx), %cx
    000007e0: 	movswl	%cx, %ecx
    000007e3: 	imull	$0x71, %ecx, %ecx
    000007e6: 	sarl	$0x6, %ecx
    000007e9: 	addw	(%rdx), %cx
    000007ec: 	movw	%cx, (%rdx)
    000007ef: 	cmpl	%r9d, 0x14(%rsp)
    000007f4: 	jle	.Ltmp575 # Offset: 2036
    000007fa: 	leal	(%r15,%r9), %edx
    000007fe: 	movswl	(%rbx), %r10d
    00000802: 	addl	%r14d, %r9d
    00000805: 	addq	%r12, %rsi
    00000808: 	movslq	%edx, %rdx
    0000080b: 	movslq	%r9d, %r9
    0000080e: 	movswl	(%rbp,%rdx,2), %edx
    00000813: 	movswl	(%rbp,%r9,2), %r9d
    00000819: 	addl	%edx, %r10d
    0000081c: 	leal	0x3(%rax), %edx
    0000081f: 	leal	(%r8,%rdx), %ecx
    00000823: 	movslq	%ecx, %rcx
    00000826: 	leaq	(%rcx,%rcx), %r11
    0000082a: 	movswl	(%rbp,%rcx,2), %ecx
    0000082f: 	addl	%r10d, %ecx
    00000832: 	addl	%ecx, %r9d
    00000835: 	leal	0x5(%r9), %ecx
    00000839: 	addl	$0x2, %r9d
    0000083d: 	cmovnsl	%r9d, %ecx
    00000841: 	sarl	$0x2, %ecx
    00000844: 	subw	(%rsi), %cx
    00000847: 	movswl	%cx, %ecx
    0000084a: 	imull	$0x71, %ecx, %ecx
    0000084d: 	sarl	$0x6, %ecx
    00000850: 	addw	(%rsi), %cx
    00000853: 	movw	%cx, (%rsi)
    00000856: 	cmpl	0x14(%rsp), %edx
    0000085a: 	jge	.Ltmp575 # Offset: 2138
    0000085c: 	leal	(%r15,%rdx), %ecx
    00000860: 	leal	0x4(%r8,%rax), %eax
    00000865: 	movswl	(%r13), %esi
    0000086a: 	addl	%r14d, %edx
    0000086d: 	movslq	%ecx, %rcx
    00000870: 	cltq
    00000872: 	movslq	%edx, %rdx
    00000875: 	addq	%r12, %r11
    00000878: 	movswl	(%rbp,%rcx,2), %ecx
    0000087d: 	movswl	(%rbp,%rax,2), %eax
    00000882: 	movswl	(%rbp,%rdx,2), %edx
    00000887: 	addl	%ecx, %esi
    00000889: 	addl	%esi, %eax
    0000088b: 	addl	%eax, %edx
    0000088d: 	leal	0x5(%rdx), %eax
    00000890: 	addl	$0x2, %edx
    00000893: 	cmovnsl	%edx, %eax
    00000896: 	sarl	$0x2, %eax
    00000899: 	subw	(%r11), %ax
    0000089d: 	cwtl
    0000089e: 	imull	$0x71, %eax, %eax
    000008a1: 	sarl	$0x6, %eax
    000008a4: 	addw	(%r11), %ax
    000008a8: 	movw	%ax, (%r11)
.Ltmp575:
    000008ac: 	movl	0x2c(%rsp), %eax
    000008b0: 	movl	0x1c(%rsp), %ebx
    000008b4: 	addl	%eax, 0x18(%rsp)
    000008b8: 	addl	%eax, %r8d
    000008bb: 	addl	%eax, %r14d
    000008be: 	cmpl	%ebx, 0x28(%rsp)
    000008c2: 	jne	.Ltmp576 # Offset: 2242
.Ltmp570:
    000008c8: 	cmpq	$0x0, 0x48(%rsp)
    000008ce: 	je	.Ltmp577 # Offset: 2254
    000008d4: 	cmpq	$0x6, 0x68(%rsp)
    000008da: 	jbe	.Ltmp578 # Offset: 2266
    000008e0: 	movq	0x70(%rsp), %rdx
    000008e5: 	xorl	%eax, %eax
    000008e7: 	pxor	%xmm1, %xmm1
    000008eb: 	pxor	%xmm4, %xmm4
    000008ef: 	nop # Size: 1
.Ltmp579:
    000008f0: 	movdqu	(%r12,%rax), %xmm7
    000008f6: 	movdqu	(%rbp,%rax), %xmm3
    000008fc: 	movdqa	%xmm4, %xmm0
    00000900: 	psubw	%xmm7, %xmm3
    00000904: 	movdqa	%xmm7, %xmm2
    00000908: 	movdqu	(%rbp,%rax), %xmm7
    0000090e: 	addq	$0x10, %rax
    00000912: 	pcmpgtw	%xmm3, %xmm0
    00000916: 	psubw	%xmm7, %xmm2
    0000091a: 	pand	%xmm0, %xmm2
    0000091e: 	pandn	%xmm3, %xmm0
    00000922: 	por	%xmm2, %xmm0
    00000926: 	movdqa	%xmm4, %xmm2
    0000092a: 	pcmpgtw	%xmm0, %xmm2
    0000092e: 	movdqa	%xmm0, %xmm3
    00000932: 	punpcklwd	%xmm2, %xmm3
    00000936: 	punpckhwd	%xmm2, %xmm0
    0000093a: 	paddd	%xmm3, %xmm1
    0000093e: 	paddd	%xmm0, %xmm1
    00000942: 	cmpq	%rax, %rdx
    00000945: 	jne	.Ltmp579 # Offset: 2373
    00000947: 	movdqa	%xmm1, %xmm0
    0000094b: 	movq	0x60(%rsp), %rax
    00000950: 	psrldq	$0x8, %xmm0
    00000955: 	paddd	%xmm0, %xmm1
    00000959: 	movdqa	%xmm1, %xmm0
    0000095d: 	psrldq	$0x4, %xmm0
    00000962: 	paddd	%xmm0, %xmm1
    00000966: 	movd	%xmm1, %r8d
    0000096b: 	cmpq	%rax, 0x48(%rsp)
    00000970: 	je	.Ltmp580 # Offset: 2416
    00000976: 	movq	%rax, %rdx
.Ltmp592:
    00000979: 	movzwl	(%r12,%rdx,2), %esi
    0000097e: 	movzwl	(%rbp,%rdx,2), %eax
    00000983: 	leaq	(%rdx,%rdx), %rcx
    00000987: 	movq	0x48(%rsp), %rbx
    0000098c: 	movl	%esi, %r9d
    0000098f: 	subl	%eax, %r9d
    00000992: 	subw	%si, %ax
    00000995: 	cmovsl	%r9d, %eax
    00000999: 	cwtl
    0000099a: 	addl	%eax, %r8d
    0000099d: 	leaq	0x1(%rdx), %rax
    000009a1: 	cmpq	%rax, %rbx
    000009a4: 	jbe	.Ltmp581 # Offset: 2468
    000009aa: 	movzwl	0x2(%r12,%rcx), %esi
    000009b0: 	movzwl	0x2(%rbp,%rcx), %eax
    000009b5: 	movl	%esi, %r9d
    000009b8: 	subl	%eax, %r9d
    000009bb: 	subw	%si, %ax
    000009be: 	cmovsl	%r9d, %eax
    000009c2: 	cwtl
    000009c3: 	addl	%eax, %r8d
    000009c6: 	leaq	0x2(%rdx), %rax
    000009ca: 	cmpq	%rax, %rbx
    000009cd: 	jbe	.Ltmp581 # Offset: 2509
    000009d3: 	movzwl	0x4(%r12,%rcx), %esi
    000009d9: 	movzwl	0x4(%rbp,%rcx), %eax
    000009de: 	movl	%esi, %r9d
    000009e1: 	subl	%eax, %r9d
    000009e4: 	subw	%si, %ax
    000009e7: 	cmovsl	%r9d, %eax
    000009eb: 	cwtl
    000009ec: 	addl	%eax, %r8d
    000009ef: 	leaq	0x3(%rdx), %rax
    000009f3: 	cmpq	%rax, %rbx
    000009f6: 	jbe	.Ltmp581 # Offset: 2550
    000009fc: 	movzwl	0x6(%r12,%rcx), %esi
    00000a02: 	movzwl	0x6(%rbp,%rcx), %eax
    00000a07: 	movl	%esi, %r9d
    00000a0a: 	subl	%eax, %r9d
    00000a0d: 	subw	%si, %ax
    00000a10: 	cmovsl	%r9d, %eax
    00000a14: 	cwtl
    00000a15: 	addl	%eax, %r8d
    00000a18: 	leaq	0x4(%rdx), %rax
    00000a1c: 	cmpq	%rax, %rbx
    00000a1f: 	jbe	.Ltmp581 # Offset: 2591
    00000a21: 	movzwl	0x8(%r12,%rcx), %esi
    00000a27: 	movzwl	0x8(%rbp,%rcx), %eax
    00000a2c: 	movl	%esi, %r9d
    00000a2f: 	subl	%eax, %r9d
    00000a32: 	subw	%si, %ax
    00000a35: 	cmovsl	%r9d, %eax
    00000a39: 	cwtl
    00000a3a: 	addl	%eax, %r8d
    00000a3d: 	leaq	0x5(%rdx), %rax
    00000a41: 	cmpq	%rax, %rbx
    00000a44: 	jbe	.Ltmp581 # Offset: 2628
    00000a46: 	movzwl	0xa(%r12,%rcx), %esi
    00000a4c: 	movzwl	0xa(%rbp,%rcx), %eax
    00000a51: 	movl	%esi, %r9d
    00000a54: 	subl	%eax, %r9d
    00000a57: 	subw	%si, %ax
    00000a5a: 	cmovsl	%r9d, %eax
    00000a5e: 	addq	$0x6, %rdx
    00000a62: 	cwtl
    00000a63: 	addl	%eax, %r8d
    00000a66: 	cmpq	%rdx, %rbx
    00000a69: 	jbe	.Ltmp581 # Offset: 2665
    00000a6b: 	movzwl	0xc(%r12,%rcx), %edx
    00000a71: 	movzwl	0xc(%rbp,%rcx), %eax
    00000a76: 	movl	%edx, %ecx
    00000a78: 	subl	%eax, %ecx
    00000a7a: 	subw	%dx, %ax
    00000a7d: 	cmovsl	%ecx, %eax
    00000a80: 	cwtl
    00000a81: 	addl	%eax, %r8d
.Ltmp581:
    00000a84: 	cmpq	$0x6, 0x68(%rsp)
    00000a8a: 	jbe	.Ltmp582 # Offset: 2698
.Ltmp580:
    00000a90: 	pxor	%xmm2, %xmm2
    00000a94: 	movq	0x70(%rsp), %rdx
    00000a99: 	xorl	%eax, %eax
    00000a9b: 	movdqa	%xmm2, %xmm4
    00000a9f: 	nop # Size: 1
.Ltmp583:
    00000aa0: 	movdqu	(%r12,%rax), %xmm7
    00000aa6: 	movdqu	(%rbp,%rax), %xmm3
    00000aac: 	movdqa	%xmm4, %xmm0
    00000ab0: 	psubw	%xmm7, %xmm3
    00000ab4: 	movdqa	%xmm7, %xmm1
    00000ab8: 	movdqu	(%rbp,%rax), %xmm7
    00000abe: 	addq	$0x10, %rax
    00000ac2: 	pcmpgtw	%xmm3, %xmm0
    00000ac6: 	psubw	%xmm7, %xmm1
    00000aca: 	pand	%xmm0, %xmm1
    00000ace: 	pandn	%xmm3, %xmm0
    00000ad2: 	por	%xmm1, %xmm0
    00000ad6: 	pmaxsw	%xmm0, %xmm2
    00000ada: 	cmpq	%rax, %rdx
    00000add: 	jne	.Ltmp583 # Offset: 2781
    00000adf: 	movdqa	%xmm2, %xmm0
    00000ae3: 	movq	0x60(%rsp), %rax
    00000ae8: 	psrldq	$0x8, %xmm0
    00000aed: 	pmaxsw	%xmm0, %xmm2
    00000af1: 	movdqa	%xmm2, %xmm0
    00000af5: 	psrldq	$0x4, %xmm0
    00000afa: 	pmaxsw	%xmm0, %xmm2
    00000afe: 	movdqa	%xmm2, %xmm0
    00000b02: 	psrldq	$0x2, %xmm0
    00000b07: 	pmaxsw	%xmm0, %xmm2
    00000b0b: 	pextrw	$0x0, %xmm2, %ebx
    00000b10: 	cmpq	%rax, 0x48(%rsp)
    00000b15: 	je	.Ltmp584 # Offset: 2837
.Ltmp591:
    00000b1b: 	movzwl	(%r12,%rax,2), %esi
    00000b20: 	movzwl	(%rbp,%rax,2), %ecx
    00000b25: 	leaq	(%rax,%rax), %rdx
    00000b29: 	movq	0x48(%rsp), %r14
    00000b2e: 	movl	%esi, %r9d
    00000b31: 	subl	%ecx, %r9d
    00000b34: 	subw	%si, %cx
    00000b37: 	cmovsl	%r9d, %ecx
    00000b3b: 	cmpw	%cx, %bx
    00000b3e: 	cmovll	%ecx, %ebx
    00000b41: 	leaq	0x1(%rax), %rcx
    00000b45: 	cmpq	%rcx, %r14
    00000b48: 	jbe	.Ltmp584 # Offset: 2888
    00000b4e: 	movzwl	0x2(%r12,%rdx), %esi
    00000b54: 	movzwl	0x2(%rbp,%rdx), %ecx
    00000b59: 	movl	%esi, %r9d
    00000b5c: 	subl	%ecx, %r9d
    00000b5f: 	subw	%si, %cx
    00000b62: 	cmovsl	%r9d, %ecx
    00000b66: 	cmpw	%cx, %bx
    00000b69: 	cmovll	%ecx, %ebx
    00000b6c: 	leaq	0x2(%rax), %rcx
    00000b70: 	cmpq	%rcx, %r14
    00000b73: 	jbe	.Ltmp584 # Offset: 2931
    00000b79: 	movzwl	0x4(%r12,%rdx), %esi
    00000b7f: 	movzwl	0x4(%rbp,%rdx), %ecx
    00000b84: 	movl	%esi, %r9d
    00000b87: 	subl	%ecx, %r9d
    00000b8a: 	subw	%si, %cx
    00000b8d: 	cmovsl	%r9d, %ecx
    00000b91: 	cmpw	%cx, %bx
    00000b94: 	cmovll	%ecx, %ebx
    00000b97: 	leaq	0x3(%rax), %rcx
    00000b9b: 	cmpq	%rcx, %r14
    00000b9e: 	jbe	.Ltmp584 # Offset: 2974
    00000ba4: 	movzwl	0x6(%r12,%rdx), %esi
    00000baa: 	movzwl	0x6(%rbp,%rdx), %ecx
    00000baf: 	movl	%esi, %r9d
    00000bb2: 	subl	%ecx, %r9d
    00000bb5: 	subw	%si, %cx
    00000bb8: 	cmovsl	%r9d, %ecx
    00000bbc: 	cmpw	%cx, %bx
    00000bbf: 	cmovll	%ecx, %ebx
    00000bc2: 	leaq	0x4(%rax), %rcx
    00000bc6: 	cmpq	%rcx, %r14
    00000bc9: 	jbe	.Ltmp584 # Offset: 3017
    00000bcb: 	movzwl	0x8(%r12,%rdx), %esi
    00000bd1: 	movzwl	0x8(%rbp,%rdx), %ecx
    00000bd6: 	movl	%esi, %r9d
    00000bd9: 	subl	%ecx, %r9d
    00000bdc: 	subw	%si, %cx
    00000bdf: 	cmovsl	%r9d, %ecx
    00000be3: 	cmpw	%cx, %bx
    00000be6: 	cmovll	%ecx, %ebx
    00000be9: 	leaq	0x5(%rax), %rcx
    00000bed: 	cmpq	%rcx, %r14
    00000bf0: 	jbe	.Ltmp584 # Offset: 3056
    00000bf2: 	movzwl	0xa(%r12,%rdx), %esi
    00000bf8: 	movzwl	0xa(%rbp,%rdx), %ecx
    00000bfd: 	movl	%esi, %r9d
    00000c00: 	subl	%ecx, %r9d
    00000c03: 	subw	%si, %cx
    00000c06: 	cmovsl	%r9d, %ecx
    00000c0a: 	cmpw	%cx, %bx
    00000c0d: 	cmovll	%ecx, %ebx
    00000c10: 	addq	$0x6, %rax
    00000c14: 	cmpq	%rax, %r14
    00000c17: 	jbe	.Ltmp584 # Offset: 3095
    00000c19: 	movzwl	0xc(%rbp,%rdx), %eax
    00000c1e: 	movzwl	0xc(%r12,%rdx), %edx
    00000c24: 	movl	%edx, %ecx
    00000c26: 	subl	%eax, %ecx
    00000c28: 	subw	%dx, %ax
    00000c2b: 	cmovsl	%ecx, %eax
    00000c2e: 	cmpw	%ax, %bx
    00000c31: 	cmovll	%eax, %ebx
.Ltmp584:
    00000c34: 	movl	0x54(%rsp), %eax
    00000c38: 	cmpl	%eax, 0xf0(%rsp)
    00000c3f: 	jge	.Ltmp585 # Offset: 3135
    00000c41: 	testw	%bx, %bx
    00000c44: 	jle	.Ltmp586 # Offset: 3140
    00000c4a: 	cmpl	$0x9, %r8d
    00000c4e: 	jle	.Ltmp586 # Offset: 3150
.Ltmp585:
    00000c54: 	addl	$0x1, 0x54(%rsp)
    00000c59: 	movq	%r12, %rax
    00000c5c: 	movl	0x54(%rsp), %edx
    00000c60: 	movq	%rbp, %r12
    00000c63: 	cmpl	0x84(%rsp), %edx
    00000c6a: 	je	.Ltmp586 # Offset: 3178
    00000c70: 	movq	%rax, %rbp
    00000c73: 	jmp	.Ltmp587 # Offset: 3187
    00000c78: 	nopl	(%rax,%rax) # Size: 8
.Ltmp572:
    00000c80: 	movq	0x58(%rsp), %rax
    00000c85: 	subq	$0x2, %r9
    00000c89: 	addq	0x78(%rsp), %r13
    00000c8e: 	leaq	-0xa(%rbp,%r11), %rbx
    00000c93: 	leaq	(%r12,%r9), %r10
    00000c97: 	leaq	-0xa(%rbp,%rsi), %r11
    00000c9c: 	addq	%rbp, %r9
    00000c9f: 	leaq	(%rax,%r13,2), %r13
    00000ca3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp588:
    00000ca8: 	movswl	0x2(%rbx), %eax
    00000cac: 	movswl	(%r9), %edx
    00000cb0: 	movswl	0x4(%r9), %esi
    00000cb5: 	movswl	0x6(%rbx), %r15d
    00000cba: 	addl	%eax, %edx
    00000cbc: 	movswl	0x2(%r9), %ecx
    00000cc1: 	movswl	0x4(%rbx), %eax
    00000cc5: 	addl	%esi, %edx
    00000cc7: 	addl	%esi, %r15d
    00000cca: 	movswl	0x8(%r9), %esi
    00000ccf: 	movq	0x2(%r10), %xmm0
    00000cd5: 	addl	%eax, %ecx
    00000cd7: 	movswl	0x6(%r9), %eax
    00000cdc: 	addl	%r15d, %esi
    00000cdf: 	movswl	0x8(%rbx), %r15d
    00000ce4: 	addl	%eax, %ecx
    00000ce6: 	addl	%eax, %r15d
    00000ce9: 	movswl	0xa(%r9), %eax
    00000cee: 	addl	%r15d, %eax
    00000cf1: 	movswl	0x2(%r11), %r15d
    00000cf6: 	addl	%edx, %r15d
    00000cf9: 	leal	0x5(%r15), %edx
    00000cfd: 	addl	$0x2, %r15d
    00000d01: 	cmovnsl	%r15d, %edx
    00000d05: 	movswl	0x4(%r11), %r15d
    00000d0a: 	sarl	$0x2, %edx
    00000d0d: 	subw	0x2(%r10), %dx
    00000d12: 	addl	%ecx, %r15d
    00000d15: 	movswl	%dx, %edx
    00000d18: 	leal	0x5(%r15), %ecx
    00000d1c: 	imull	$0x71, %edx, %edx
    00000d1f: 	sarl	$0x6, %edx
    00000d22: 	addl	$0x2, %r15d
    00000d26: 	cmovnsl	%r15d, %ecx
    00000d2a: 	movswl	0x6(%r11), %r15d
    00000d2f: 	movzwl	%dx, %edx
    00000d32: 	sarl	$0x2, %ecx
    00000d35: 	subw	0x4(%r10), %cx
    00000d3a: 	addl	%esi, %r15d
    00000d3d: 	movswl	%cx, %ecx
    00000d40: 	leal	0x5(%r15), %esi
    00000d44: 	imull	$0x71, %ecx, %ecx
    00000d47: 	sarl	$0x6, %ecx
    00000d4a: 	addl	$0x2, %r15d
    00000d4e: 	cmovnsl	%r15d, %esi
    00000d52: 	movswl	0x8(%r11), %r15d
    00000d57: 	movzwl	%cx, %ecx
    00000d5a: 	sarl	$0x2, %esi
    00000d5d: 	subw	0x6(%r10), %si
    00000d62: 	addl	%eax, %r15d
    00000d65: 	movswl	%si, %esi
    00000d68: 	leal	0x5(%r15), %eax
    00000d6c: 	imull	$0x71, %esi, %esi
    00000d6f: 	sarl	$0x6, %esi
    00000d72: 	addl	$0x2, %r15d
    00000d76: 	cmovnsl	%r15d, %eax
    00000d7a: 	movzwl	%si, %esi
    00000d7d: 	addq	$0x8, %r9
    00000d81: 	addq	$0x8, %r10
    00000d85: 	addq	$0x8, %rbx
    00000d89: 	addq	$0x8, %r11
    00000d8d: 	sarl	$0x2, %eax
    00000d90: 	subw	(%r10), %ax
    00000d94: 	cwtl
    00000d95: 	imull	$0x71, %eax, %eax
    00000d98: 	sarl	$0x6, %eax
    00000d9b: 	movzwl	%ax, %eax
    00000d9e: 	shlq	$0x10, %rax
    00000da2: 	orq	%rsi, %rax
    00000da5: 	shlq	$0x10, %rax
    00000da9: 	orq	%rcx, %rax
    00000dac: 	shlq	$0x10, %rax
    00000db0: 	orq	%rdx, %rax
    00000db3: 	movq	%rax, %xmm4
    00000db8: 	paddw	%xmm4, %xmm0
    00000dbc: 	movq	%xmm0, -0x6(%r10)
    00000dc2: 	cmpq	%r9, %r13
    00000dc5: 	jne	.Ltmp588 # Offset: 3525
    00000dcb: 	jmp	.Ltmp589 # Offset: 3531
.Ltmp577:
    00000dd0: 	movl	0x54(%rsp), %eax
    00000dd4: 	cmpl	%eax, 0xf0(%rsp)
    00000ddb: 	jl	.Ltmp590 # Offset: 3547
    00000de1: 	xorl	%r8d, %r8d
    00000de4: 	xorl	%ebx, %ebx
    00000de6: 	jmp	.Ltmp585 # Offset: 3558
.Ltmp582:
    00000deb: 	xorl	%ebx, %ebx
    00000ded: 	xorl	%eax, %eax
    00000def: 	jmp	.Ltmp591 # Offset: 3567
.Ltmp578:
    00000df4: 	xorl	%r8d, %r8d
    00000df7: 	xorl	%edx, %edx
    00000df9: 	jmp	.Ltmp592 # Offset: 3577
.Ltmp586:
    00000dfe: 	movswl	%bx, %eax
    00000e01: 	movl	%eax, (%rsp)
.Ltmp596:
    00000e04: 	movl	%r8d, 0x14(%rsp)
    00000e09: 	callq	clock@PLT # Offset: 3593
    00000e0e: 	movl	0x8c(%rsp), %edi
    00000e15: 	pxor	%xmm0, %xmm0
    00000e19: 	movzwl	0x9e(%rsp), %r14d
    00000e22: 	movq	%rax, end_time(%rip)
    00000e29: 	subq	start_time(%rip), %rax
    00000e30: 	cvtsi2sd	%rax, %xmm0
    00000e35: 	movl	%edi, %eax
    00000e37: 	divsd	DATAat0x49520(%rip), %xmm0
    00000e3f: 	movl	0x14(%rsp), %r8d
    00000e44: 	shrl	$0x1f, %eax
    00000e47: 	movq	%xmm0, %r13
    00000e4c: 	addl	%edi, %eax
    00000e4e: 	movl	0x80(%rsp), %edi
    00000e55: 	sarl	%eax
    00000e57: 	movl	%edi, %edx
    00000e59: 	imull	%edi, %eax
    00000e5c: 	shrl	$0x1f, %edx
    00000e5f: 	addl	%edi, %edx
    00000e61: 	sarl	%edx
    00000e63: 	addl	%edx, %eax
    00000e65: 	cltq
    00000e67: 	subw	(%r12,%rax,2), %r14w
    00000e6c: 	movl	0x54(%rsp), %eax
    00000e70: 	cmpl	%eax, iterations(%rip)
    00000e76: 	jg	.Ltmp593 # Offset: 3702
    00000e7c: 	cmpl	$0xa, %r8d
    00000e80: 	jle	.Ltmp593 # Offset: 3712
    00000e86: 	cmpw	$0x1, %bx
    00000e8a: 	jle	.Ltmp593 # Offset: 3722
    00000e90: 	movq	0x90(%rsp), %rax
    00000e98: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000e9f: 	movq	%r15, %rdi
    00000ea2: 	movq	0x8(%rax), %rdx
    00000ea6: 	movq	(%rax), %rsi
    00000ea9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3753
    00000eae: 	movl	$0x11, %edx
    00000eb3: 	leaq	DATAat0x49199(%rip), %rsi
    00000eba: 	movq	%rax, %rdi
    00000ebd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3773
    00000ec2: 	movl	0x14(%rsp), %r8d
.Ltmp595:
    00000ec7: 	movl	$0x4, %edx
    00000ecc: 	leaq	DATAat0x491b6(%rip), %rsi
    00000ed3: 	movq	%r15, %rdi
    00000ed6: 	movl	%r8d, 0x14(%rsp)
    00000edb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3803
    00000ee0: 	movl	0x54(%rsp), %esi
    00000ee4: 	movq	%r15, %rdi
    00000ee7: 	callq	_ZNSolsEi@PLT # Offset: 3815
    00000eec: 	movl	$0xb, %edx
    00000ef1: 	leaq	DATAat0x491bb(%rip), %rsi
    00000ef8: 	movq	%rax, %rdi
    00000efb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3835
    00000f00: 	movl	$0xa, %edx
    00000f05: 	leaq	DATAat0x491c7(%rip), %rsi
    00000f0c: 	movq	%r15, %rdi
    00000f0f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3855
    00000f14: 	movl	0x14(%rsp), %esi
    00000f18: 	movq	%r15, %rdi
    00000f1b: 	callq	_ZNSolsEi@PLT # Offset: 3867
    00000f20: 	movl	$0x7, %edx
    00000f25: 	leaq	DATAat0x491d2(%rip), %rsi
    00000f2c: 	movq	%rax, %rdi
    00000f2f: 	movq	%rax, %rbp
    00000f32: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3890
    00000f37: 	movl	(%rsp), %esi
    00000f3a: 	movq	%rbp, %rdi
    00000f3d: 	callq	_ZNSolsEs@PLT # Offset: 3901
    00000f42: 	movl	$0x10, %edx
    00000f47: 	leaq	DATAat0x491da(%rip), %rsi
    00000f4e: 	movq	%rax, %rbp
    00000f51: 	movq	%rax, %rdi
    00000f54: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3924
    00000f59: 	movq	%rbp, %rdi
    00000f5c: 	movswl	%r14w, %esi
    00000f60: 	callq	_ZNSolsEs@PLT # Offset: 3936
    00000f65: 	movl	$0x8, %edx
    00000f6a: 	leaq	DATAat0x491eb(%rip), %rsi
    00000f71: 	movq	%rax, %rbp
    00000f74: 	movq	%rax, %rdi
    00000f77: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3959
    00000f7c: 	movq	%r13, %xmm0
    00000f81: 	movq	%rbp, %rdi
    00000f84: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3972
    00000f89: 	movl	$0x2, %edx
    00000f8e: 	leaq	DATAat0x491f4(%rip), %rsi
    00000f95: 	movq	%rax, %rdi
    00000f98: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3992
    00000f9d: 	movl	0x98(%rsp), %eax
    00000fa4: 	movl	%eax, iterations(%rip)
    00000faa: 	movq	0xa8(%rsp), %rax
    00000fb2: 	subq	%fs:0x28, %rax
    00000fbb: 	jne	.Ltmp594 # Offset: 4027
    00000fbd: 	addq	$0xb8, %rsp
    00000fc4: 	popq	%rbx
    00000fc5: 	popq	%rbp
    00000fc6: 	popq	%r12
    00000fc8: 	popq	%r13
    00000fca: 	popq	%r14
    00000fcc: 	popq	%r15
    00000fce: 	retq # Offset: 4046
.Ltmp593:
    00000fcf: 	movq	0x90(%rsp), %rax
    00000fd7: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000fde: 	movl	%r8d, 0x14(%rsp)
    00000fe3: 	movq	%r15, %rdi
    00000fe6: 	movq	0x8(%rax), %rdx
    00000fea: 	movq	(%rax), %rsi
    00000fed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4077
    00000ff2: 	movl	$0xa, %edx
    00000ff7: 	leaq	DATAat0x491ab(%rip), %rsi
    00000ffe: 	movq	%rax, %rdi
    00001001: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4097
    00001006: 	movl	0x14(%rsp), %r8d
    0000100b: 	jmp	.Ltmp595 # Offset: 4107
.Ltmp590:
    00001010: 	movl	$0x0, (%rsp)
    00001017: 	xorl	%ebx, %ebx
    00001019: 	xorl	%r8d, %r8d
    0000101c: 	jmp	.Ltmp596 # Offset: 4124
.Ltmp594:
    00001021: 	callq	__stack_chk_fail@PLT # Offset: 4129
    00001026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp569:
    00001030: 	movl	$0x0, (%rsp)
    00001037: 	xorl	%ebx, %ebx
    00001039: 	xorl	%r8d, %r8d
    0000103c: 	movl	$0x0, 0x54(%rsp)
    00001044: 	jmp	.Ltmp596 # Offset: 4164
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi21jacobi_sor2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x19670
  Size        : 0x1069
  MaxSize     : 0x1070
  Offset      : 0x19670
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	subq	$0xc8, %rsp
    00000022: 	movl	%edx, 0x9c(%rsp)
    00000029: 	movl	%r15d, %edx
    0000002c: 	movl	%ecx, 0x90(%rsp)
    00000033: 	leaq	0xb0(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x3c(%rsp)
    00000040: 	movq	%r9, 0xa0(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0xb8(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	movq	DATAat0x49530(%rip), %rax
    00000062: 	movq	%rax, 0xb0(%rsp)
    0000006a: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 106
    0000006f: 	movl	%ebx, %edi
    00000071: 	imull	%r15d, %edi
    00000075: 	movw	%ax, 0xae(%rsp)
    0000007d: 	movslq	%edi, %rbx
    00000080: 	testl	%ebx, %ebx
    00000082: 	jle	.Ltmp597 # Offset: 130
    00000084: 	movslq	%ebx, %rdx
    00000087: 	movq	%rbp, %rsi
    0000008a: 	movq	%r12, %rdi
    0000008d: 	addq	%rdx, %rdx
    00000090: 	callq	memmove@PLT # Offset: 144
.Ltmp597:
    00000095: 	movl	iterations(%rip), %eax
    0000009b: 	movl	$0x2710, iterations(%rip)
    000000a5: 	movl	%eax, 0xa8(%rsp)
    000000ac: 	callq	clock@PLT # Offset: 172
    000000b1: 	movq	%rax, start_time(%rip)
    000000b8: 	movl	iterations(%rip), %eax
    000000be: 	movl	%eax, 0x94(%rsp)
    000000c5: 	testl	%eax, %eax
    000000c7: 	jle	.Ltmp598 # Offset: 199
    000000cd: 	movl	0x9c(%rsp), %eax
    000000d4: 	movl	0x3c(%rsp), %edx
    000000d8: 	movq	%rbx, 0x58(%rsp)
    000000dd: 	movl	$0x0, 0x64(%rsp)
    000000e5: 	movdqa	DATAat0x49440(%rip), %xmm10
    000000ee: 	subl	$0x1, %eax
    000000f1: 	addl	%edx, %edx
    000000f3: 	movdqa	DATAat0x49450(%rip), %xmm6
    000000fb: 	movdqa	DATAat0x49460(%rip), %xmm11
    00000104: 	movl	%eax, 0x38(%rsp)
    00000108: 	movl	0x90(%rsp), %eax
    0000010f: 	movl	%edx, 0x98(%rsp)
    00000116: 	leal	-0x4(%rax), %edi
    00000119: 	subl	$0x6, %eax
    0000011c: 	movl	%eax, %ecx
    0000011e: 	movl	%eax, 0x40(%rsp)
    00000122: 	shrl	$0x4, %eax
    00000125: 	leal	-0x1(%rax), %edx
    00000128: 	shll	$0x4, %eax
    0000012b: 	shrl	$0x2, %ecx
    0000012e: 	addl	$0x1, %eax
    00000131: 	addq	$0x1, %rdx
    00000135: 	movl	%eax, 0x60(%rsp)
    00000139: 	cltq
    0000013b: 	shlq	$0x5, %rdx
    0000013f: 	movq	%rax, 0x48(%rsp)
    00000144: 	movl	%ecx, %eax
    00000146: 	shlq	$0x2, %rax
    0000014a: 	movq	%rdx, 0x50(%rsp)
    0000014f: 	movq	%rax, 0x88(%rsp)
    00000157: 	leal	0x5(,%rcx,4), %eax
    0000015e: 	movl	%eax, 0x44(%rsp)
    00000162: 	leaq	-0x1(%rbx), %rax
    00000166: 	movq	%rax, 0x78(%rsp)
    0000016b: 	movq	%rbx, %rax
    0000016e: 	andq	$-0x8, %rbx
    00000172: 	shrq	$0x3, %rax
    00000176: 	movq	%rbx, 0x70(%rsp)
    0000017b: 	shlq	$0x4, %rax
    0000017f: 	movq	%rax, 0x80(%rsp)
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp616:
    00000190: 	cmpl	$0x1, 0x38(%rsp)
    00000195: 	jle	.Ltmp599 # Offset: 405
    0000019b: 	movl	0x90(%rsp), %eax
    000001a2: 	movl	0x3c(%rsp), %r8d
    000001a7: 	xorl	%r15d, %r15d
    000001aa: 	pxor	%xmm5, %xmm5
    000001ae: 	movl	$0x1, 0x2c(%rsp)
    000001b6: 	pxor	%xmm9, %xmm9
    000001bb: 	subl	$0x1, %eax
    000001be: 	movl	%eax, 0x24(%rsp)
    000001c2: 	movl	0x98(%rsp), %eax
    000001c9: 	movl	%eax, 0x28(%rsp)
    000001cd: 	leaq	0x8(%rbp), %rax
    000001d1: 	movq	%rax, 0x68(%rsp)
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp605:
    000001e0: 	addl	$0x1, 0x2c(%rsp)
    000001e5: 	movl	$0x1, %eax
    000001ea: 	cmpl	$0x1, %edi
    000001ed: 	jle	.Ltmp600 # Offset: 493
    000001f3: 	movslq	%r8d, %r13
    000001f6: 	movslq	0x28(%rsp), %rbx
    000001fb: 	movslq	%r15d, %r14
    000001fe: 	leaq	0x2(%r13,%r13), %r9
    00000203: 	leaq	0xa(%r14,%r14), %r11
    00000208: 	leaq	(%r12,%r9), %rax
    0000020c: 	leaq	0xe(%rbp,%r9), %r10
    00000211: 	movq	%rbx, 0x30(%rsp)
    00000216: 	movq	%rax, %rcx
    00000219: 	leaq	0x6(%rbp,%r9), %rdx
    0000021e: 	leaq	0xa(%rbx,%rbx), %rsi
    00000223: 	subq	%r10, %rcx
    00000226: 	leaq	(%rbp,%r11), %rbx
    0000022b: 	addq	$0x6, %rcx
    0000022f: 	cmpq	$0x18, %rcx
    00000233: 	movq	%rax, %rcx
    00000236: 	seta	%r10b
    0000023a: 	subq	%rdx, %rcx
    0000023d: 	addq	$0x6, %rcx
    00000241: 	cmpq	$0x1c, %rcx
    00000245: 	seta	%cl
    00000248: 	andl	%r10d, %ecx
    0000024b: 	cmpl	$0xf, 0x40(%rsp)
    00000250: 	seta	%r10b
    00000254: 	andl	%r10d, %ecx
    00000257: 	movq	%rax, %r10
    0000025a: 	subq	%rbx, %r10
    0000025d: 	addq	$0x6, %r10
    00000261: 	cmpq	$0x1c, %r10
    00000265: 	seta	%r10b
    00000269: 	testb	%r10b, %cl
    0000026c: 	je	.Ltmp601 # Offset: 620
    00000272: 	leaq	(%rbp,%rsi), %r10
    00000277: 	movq	%rax, %rcx
    0000027a: 	subq	%r10, %rcx
    0000027d: 	addq	$0x6, %rcx
    00000281: 	cmpq	$0x1c, %rcx
    00000285: 	jbe	.Ltmp601 # Offset: 645
    0000028b: 	movq	0x50(%rsp), %rbx
    00000290: 	leaq	-0x2(%rbp,%r9), %r10
    00000295: 	leaq	-0x8(%rbp,%r11), %r11
    0000029a: 	xorl	%ecx, %ecx
    0000029c: 	leaq	-0x8(%rbp,%rsi), %rsi
    000002a1: 	leaq	0x4(%r12,%r9), %r9
    000002a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp602:
    000002b0: 	movdqu	(%rax), %xmm0
    000002b4: 	movdqu	0x10(%rax), %xmm4
    000002b9: 	addq	$0x20, %rax
    000002bd: 	movdqa	%xmm5, %xmm14
    000002c2: 	movdqu	(%r11,%rcx), %xmm1
    000002c8: 	movdqu	-0x10(%rax), %xmm7
    000002cd: 	movdqa	%xmm5, %xmm13
    000002d2: 	movdqa	%xmm0, %xmm8
    000002d7: 	movdqu	0x10(%r11,%rcx), %xmm3
    000002de: 	movdqu	(%r10,%rcx), %xmm2
    000002e4: 	shufps	$0x88, %xmm4, %xmm8
    000002e9: 	movdqa	%xmm0, %xmm4
    000002ed: 	shufps	$0xdd, %xmm7, %xmm4
    000002f1: 	movdqa	%xmm1, %xmm7
    000002f5: 	shufps	$0xdd, %xmm3, %xmm1
    000002f9: 	movdqa	%xmm2, %xmm0
    000002fd: 	shufps	$0x88, %xmm3, %xmm7
    00000301: 	movaps	%xmm4, 0x10(%rsp)
    00000306: 	movdqa	%xmm7, %xmm4
    0000030a: 	movdqu	0x10(%r10,%rcx), %xmm7
    00000311: 	movdqa	%xmm5, %xmm3
    00000315: 	pcmpgtw	%xmm1, %xmm14
    0000031a: 	shufps	$0xdd, %xmm7, %xmm2
    0000031e: 	pcmpgtw	%xmm2, %xmm3
    00000322: 	movdqa	%xmm2, %xmm12
    00000327: 	shufps	$0x88, %xmm7, %xmm0
    0000032b: 	movdqu	0x10(%rdx,%rcx), %xmm7
    00000331: 	punpcklwd	%xmm3, %xmm12
    00000336: 	punpckhwd	%xmm3, %xmm2
    0000033a: 	movdqu	(%rdx,%rcx), %xmm3
    0000033f: 	shufps	$0x88, %xmm7, %xmm3
    00000343: 	pcmpgtw	%xmm3, %xmm13
    00000348: 	movdqa	%xmm1, %xmm7
    0000034c: 	punpckhwd	%xmm14, %xmm1
    00000351: 	movdqa	%xmm3, %xmm15
    00000356: 	paddd	%xmm2, %xmm1
    0000035a: 	punpcklwd	%xmm14, %xmm7
    0000035f: 	paddd	%xmm12, %xmm7
    00000364: 	movdqa	%xmm4, %xmm14
    00000369: 	punpckhwd	%xmm13, %xmm3
    0000036e: 	punpcklwd	%xmm13, %xmm15
    00000373: 	movdqu	0x10(%rsi,%rcx), %xmm13
    0000037a: 	paddd	%xmm3, %xmm1
    0000037e: 	movdqu	(%rsi,%rcx), %xmm3
    00000383: 	paddd	%xmm7, %xmm15
    00000388: 	movdqa	%xmm5, %xmm7
    0000038c: 	pcmpgtw	%xmm0, %xmm7
    00000390: 	movaps	%xmm1, (%rsp)
    00000394: 	movdqa	%xmm0, %xmm1
    00000398: 	shufps	$0x88, %xmm13, %xmm3
    0000039d: 	movdqa	%xmm5, %xmm13
    000003a2: 	pcmpgtw	%xmm4, %xmm13
    000003a7: 	punpcklwd	%xmm7, %xmm1
    000003ab: 	punpckhwd	%xmm7, %xmm0
    000003af: 	punpcklwd	%xmm13, %xmm14
    000003b4: 	punpckhwd	%xmm13, %xmm4
    000003b9: 	paddd	%xmm14, %xmm1
    000003be: 	paddd	%xmm4, %xmm0
    000003c2: 	movdqa	%xmm3, %xmm14
    000003c7: 	movdqa	0x10(%rsp), %xmm4
    000003cd: 	paddd	%xmm12, %xmm1
    000003d2: 	movdqa	%xmm5, %xmm12
    000003d7: 	paddd	%xmm2, %xmm0
    000003db: 	pcmpgtw	%xmm3, %xmm12
    000003e0: 	movdqa	%xmm9, %xmm2
    000003e5: 	punpckhwd	%xmm12, %xmm3
    000003ea: 	punpcklwd	%xmm12, %xmm14
    000003ef: 	paddd	%xmm3, %xmm0
    000003f3: 	paddd	%xmm14, %xmm1
    000003f8: 	movdqa	%xmm9, %xmm3
    000003fd: 	paddd	%xmm10, %xmm1
    00000402: 	paddd	%xmm10, %xmm0
    00000407: 	pcmpgtd	%xmm1, %xmm3
    0000040b: 	pcmpgtd	%xmm0, %xmm2
    0000040f: 	pand	%xmm6, %xmm3
    00000413: 	pand	%xmm6, %xmm2
    00000417: 	paddd	%xmm3, %xmm1
    0000041b: 	paddd	%xmm2, %xmm0
    0000041f: 	psrad	$0x2, %xmm0
    00000424: 	psrad	$0x2, %xmm1
    00000429: 	movdqa	%xmm1, %xmm2
    0000042d: 	punpcklwd	%xmm0, %xmm1
    00000431: 	punpckhwd	%xmm0, %xmm2
    00000435: 	movdqa	%xmm1, %xmm0
    00000439: 	punpckhwd	%xmm2, %xmm0
    0000043d: 	punpcklwd	%xmm2, %xmm1
    00000441: 	punpcklwd	%xmm0, %xmm1
    00000445: 	psubw	%xmm8, %xmm1
    0000044a: 	movdqa	%xmm1, %xmm2
    0000044e: 	pmulhw	%xmm11, %xmm1
    00000453: 	pmullw	%xmm11, %xmm2
    00000458: 	movdqa	%xmm2, %xmm0
    0000045c: 	punpckhwd	%xmm1, %xmm2
    00000460: 	punpcklwd	%xmm1, %xmm0
    00000464: 	movdqa	%xmm2, %xmm3
    00000468: 	psrad	$0x6, %xmm3
    0000046d: 	psrad	$0x6, %xmm0
    00000472: 	movdqa	%xmm0, %xmm2
    00000476: 	punpcklwd	%xmm3, %xmm0
    0000047a: 	punpckhwd	%xmm3, %xmm2
    0000047e: 	movdqa	%xmm0, %xmm3
    00000482: 	punpckhwd	%xmm2, %xmm3
    00000486: 	punpcklwd	%xmm2, %xmm0
    0000048a: 	movdqu	0x10(%rsi,%rcx), %xmm2
    00000490: 	punpcklwd	%xmm3, %xmm0
    00000494: 	movdqu	(%rsi,%rcx), %xmm3
    00000499: 	paddw	%xmm8, %xmm0
    0000049e: 	shufps	$0xdd, %xmm2, %xmm3
    000004a2: 	movdqa	%xmm5, %xmm2
    000004a6: 	movdqa	%xmm3, %xmm1
    000004aa: 	movd	%xmm0, -0x20(%rax)
    000004af: 	pcmpgtw	%xmm3, %xmm2
    000004b3: 	punpcklwd	%xmm2, %xmm3
    000004b7: 	punpckhwd	%xmm2, %xmm1
    000004bb: 	paddd	(%rsp), %xmm1
    000004c0: 	paddd	%xmm3, %xmm15
    000004c5: 	movdqa	%xmm9, %xmm2
    000004ca: 	movdqa	%xmm9, %xmm3
    000004cf: 	paddd	%xmm10, %xmm15
    000004d4: 	paddd	%xmm10, %xmm1
    000004d9: 	pcmpgtd	%xmm15, %xmm3
    000004de: 	pcmpgtd	%xmm1, %xmm2
    000004e2: 	pand	%xmm6, %xmm3
    000004e6: 	pand	%xmm6, %xmm2
    000004ea: 	paddd	%xmm3, %xmm15
    000004ef: 	paddd	%xmm2, %xmm1
    000004f3: 	psrad	$0x2, %xmm1
    000004f8: 	psrad	$0x2, %xmm15
    000004fe: 	movdqa	%xmm15, %xmm2
    00000503: 	punpcklwd	%xmm1, %xmm15
    00000508: 	punpckhwd	%xmm1, %xmm2
    0000050c: 	movdqa	%xmm15, %xmm1
    00000511: 	punpckhwd	%xmm2, %xmm1
    00000515: 	punpcklwd	%xmm2, %xmm15
    0000051a: 	punpcklwd	%xmm1, %xmm15
    0000051f: 	psubw	%xmm4, %xmm15
    00000524: 	movdqa	%xmm15, %xmm2
    00000529: 	pmulhw	%xmm11, %xmm15
    0000052e: 	pmullw	%xmm11, %xmm2
    00000533: 	movdqa	%xmm2, %xmm1
    00000537: 	punpckhwd	%xmm15, %xmm2
    0000053c: 	punpcklwd	%xmm15, %xmm1
    00000541: 	psrad	$0x6, %xmm2
    00000546: 	psrad	$0x6, %xmm1
    0000054b: 	movdqa	%xmm1, %xmm3
    0000054f: 	punpcklwd	%xmm2, %xmm1
    00000553: 	punpckhwd	%xmm2, %xmm3
    00000557: 	movdqa	%xmm1, %xmm2
    0000055b: 	punpckhwd	%xmm3, %xmm2
    0000055f: 	punpcklwd	%xmm3, %xmm1
    00000563: 	punpcklwd	%xmm2, %xmm1
    00000567: 	pshufd	$0x55, %xmm0, %xmm2
    0000056c: 	movd	%xmm2, -0x18(%rax)
    00000571: 	movdqa	%xmm0, %xmm2
    00000575: 	paddw	%xmm4, %xmm1
    00000579: 	punpckhdq	%xmm0, %xmm2
    0000057d: 	pshufd	$0xff, %xmm0, %xmm0
    00000582: 	movd	%xmm0, -0x8(%rax)
    00000587: 	pshufd	$0x55, %xmm1, %xmm0
    0000058c: 	movd	%xmm2, -0x10(%rax)
    00000591: 	movd	%xmm0, 0x8(%r9,%rcx)
    00000598: 	movdqa	%xmm1, %xmm0
    0000059c: 	movd	%xmm1, (%r9,%rcx)
    000005a2: 	punpckhdq	%xmm1, %xmm0
    000005a6: 	pshufd	$0xff, %xmm1, %xmm1
    000005ab: 	movd	%xmm0, 0x10(%r9,%rcx)
    000005b2: 	movd	%xmm1, 0x18(%r9,%rcx)
    000005b9: 	addq	$0x20, %rcx
    000005bd: 	cmpq	%rcx, %rbx
    000005c0: 	jne	.Ltmp602 # Offset: 1472
    000005c6: 	movq	0x48(%rsp), %rdx
    000005cb: 	movq	0x30(%rsp), %rax
    000005d0: 	leaq	(%rdx,%r13), %r9
    000005d4: 	addq	%rdx, %r14
    000005d7: 	addq	%rdx, %rax
    000005da: 	movl	0x60(%rsp), %r13d
    000005df: 	addq	%r9, %r9
    000005e2: 	leaq	(%rbp,%r14,2), %rbx
    000005e7: 	leaq	(%rbp,%rax,2), %r11
    000005ec: 	leaq	(%r12,%r9), %r10
    000005f0: 	addq	%rbp, %r9
    000005f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp603:
    000005f8: 	movswl	(%rbx), %edx
    000005fb: 	movswl	-0x2(%r9), %ecx
    00000600: 	addl	$0x4, %r13d
    00000604: 	movswl	0x2(%r9), %esi
    00000609: 	movswl	(%r9), %r14d
    0000060d: 	addl	%edx, %ecx
    0000060f: 	movswl	(%r11), %edx
    00000613: 	movswl	0x4(%r9), %eax
    00000618: 	addl	%esi, %ecx
    0000061a: 	movq	(%r10), %xmm0
    0000061f: 	addl	%edx, %ecx
    00000621: 	leal	0x5(%rcx), %edx
    00000624: 	addl	$0x2, %ecx
    00000627: 	cmovnsl	%ecx, %edx
    0000062a: 	movswl	0x2(%rbx), %ecx
    0000062e: 	sarl	$0x2, %edx
    00000631: 	subw	(%r10), %dx
    00000635: 	addl	%ecx, %r14d
    00000638: 	movswl	0x2(%r11), %ecx
    0000063d: 	movswl	%dx, %edx
    00000640: 	addl	%eax, %r14d
    00000643: 	imull	$0x71, %edx, %edx
    00000646: 	addl	%ecx, %r14d
    00000649: 	leal	0x5(%r14), %ecx
    0000064d: 	sarl	$0x6, %edx
    00000650: 	addl	$0x2, %r14d
    00000654: 	cmovnsl	%r14d, %ecx
    00000658: 	movswl	0x4(%rbx), %r14d
    0000065d: 	movzwl	%dx, %edx
    00000660: 	addl	%esi, %r14d
    00000663: 	sarl	$0x2, %ecx
    00000666: 	movswl	0x6(%r9), %esi
    0000066b: 	subw	0x2(%r10), %cx
    00000670: 	movswl	%cx, %ecx
    00000673: 	addl	%esi, %r14d
    00000676: 	imull	$0x71, %ecx, %ecx
    00000679: 	movswl	0x4(%r11), %esi
    0000067e: 	addl	%esi, %r14d
    00000681: 	sarl	$0x6, %ecx
    00000684: 	leal	0x5(%r14), %esi
    00000688: 	addl	$0x2, %r14d
    0000068c: 	cmovnsl	%r14d, %esi
    00000690: 	movswl	0x6(%rbx), %r14d
    00000695: 	movzwl	%cx, %ecx
    00000698: 	addl	%eax, %r14d
    0000069b: 	sarl	$0x2, %esi
    0000069e: 	movswl	0x8(%r9), %eax
    000006a3: 	subw	0x4(%r10), %si
    000006a8: 	movswl	%si, %esi
    000006ab: 	addl	%eax, %r14d
    000006ae: 	imull	$0x71, %esi, %esi
    000006b1: 	movswl	0x6(%r11), %eax
    000006b6: 	addl	%eax, %r14d
    000006b9: 	sarl	$0x6, %esi
    000006bc: 	leal	0x5(%r14), %eax
    000006c0: 	addl	$0x2, %r14d
    000006c4: 	cmovnsl	%r14d, %eax
    000006c8: 	movzwl	%si, %esi
    000006cb: 	addq	$0x8, %r10
    000006cf: 	addq	$0x8, %rbx
    000006d3: 	addq	$0x8, %r9
    000006d7: 	addq	$0x8, %r11
    000006db: 	sarl	$0x2, %eax
    000006de: 	subw	-0x2(%r10), %ax
    000006e3: 	cwtl
    000006e4: 	imull	$0x71, %eax, %eax
    000006e7: 	sarl	$0x6, %eax
    000006ea: 	movzwl	%ax, %eax
    000006ed: 	shlq	$0x10, %rax
    000006f1: 	orq	%rsi, %rax
    000006f4: 	shlq	$0x10, %rax
    000006f8: 	orq	%rcx, %rax
    000006fb: 	shlq	$0x10, %rax
    000006ff: 	orq	%rdx, %rax
    00000702: 	movq	%rax, %xmm7
    00000707: 	paddw	%xmm7, %xmm0
    0000070b: 	movq	%xmm0, -0x8(%r10)
    00000711: 	cmpl	%r13d, %edi
    00000714: 	jg	.Ltmp603 # Offset: 1812
.Ltmp618:
    0000071a: 	movl	0x44(%rsp), %eax
.Ltmp600:
    0000071e: 	cmpl	0x24(%rsp), %eax
    00000722: 	jge	.Ltmp604 # Offset: 1826
    00000728: 	leal	(%r15,%rax), %edx
    0000072c: 	movl	0x28(%rsp), %r14d
    00000731: 	leal	(%r8,%rax), %r10d
    00000735: 	movslq	%edx, %rdx
    00000738: 	movslq	%r10d, %r10
    0000073b: 	movswl	(%rbp,%rdx,2), %ecx
    00000740: 	leal	-0x1(%r8,%rax), %edx
    00000745: 	leaq	(%r12,%r10,2), %r11
    00000749: 	movslq	%edx, %rdx
    0000074c: 	movswl	(%rbp,%rdx,2), %r9d
    00000752: 	addl	%ecx, %r9d
    00000755: 	leal	0x1(%rax), %ecx
    00000758: 	leal	(%r8,%rcx), %edx
    0000075c: 	movslq	%edx, %rdx
    0000075f: 	addq	%rdx, %rdx
    00000762: 	leaq	(%rbp,%rdx), %rbx
    00000767: 	movswl	(%rbx), %esi
    0000076a: 	addl	%r9d, %esi
    0000076d: 	leal	(%r14,%rax), %r9d
    00000771: 	movslq	%r9d, %r9
    00000774: 	movswl	(%rbp,%r9,2), %r9d
    0000077a: 	addl	%esi, %r9d
    0000077d: 	leal	0x5(%r9), %esi
    00000781: 	addl	$0x2, %r9d
    00000785: 	cmovnsl	%r9d, %esi
    00000789: 	sarl	$0x2, %esi
    0000078c: 	subw	(%r11), %si
    00000790: 	movswl	%si, %esi
    00000793: 	imull	$0x71, %esi, %esi
    00000796: 	sarl	$0x6, %esi
    00000799: 	addw	(%r11), %si
    0000079d: 	movw	%si, (%r11)
    000007a1: 	cmpl	%ecx, 0x24(%rsp)
    000007a5: 	jle	.Ltmp604 # Offset: 1957
    000007ab: 	leal	(%r15,%rcx), %esi
    000007af: 	movswl	(%rbp,%r10,2), %r11d
    000007b5: 	leal	0x2(%rax), %r9d
    000007b9: 	addl	%r14d, %ecx
    000007bc: 	movslq	%esi, %rsi
    000007bf: 	movslq	%ecx, %rcx
    000007c2: 	addq	%r12, %rdx
    000007c5: 	movswl	(%rbp,%rsi,2), %esi
    000007ca: 	movswl	(%rbp,%rcx,2), %ecx
    000007cf: 	addl	%esi, %r11d
    000007d2: 	leal	(%r8,%r9), %esi
    000007d6: 	movslq	%esi, %rsi
    000007d9: 	addq	%rsi, %rsi
    000007dc: 	leaq	(%rbp,%rsi), %r13
    000007e1: 	movswl	(%r13), %r10d
    000007e6: 	addl	%r11d, %r10d
    000007e9: 	addl	%ecx, %r10d
    000007ec: 	leal	0x5(%r10), %ecx
    000007f0: 	addl	$0x2, %r10d
    000007f4: 	cmovnsl	%r10d, %ecx
    000007f8: 	sarl	$0x2, %ecx
    000007fb: 	subw	(%rdx), %cx
    000007fe: 	movswl	%cx, %ecx
    00000801: 	imull	$0x71, %ecx, %ecx
    00000804: 	sarl	$0x6, %ecx
    00000807: 	addw	(%rdx), %cx
    0000080a: 	movw	%cx, (%rdx)
    0000080d: 	cmpl	%r9d, 0x24(%rsp)
    00000812: 	jle	.Ltmp604 # Offset: 2066
    00000818: 	leal	(%r15,%r9), %edx
    0000081c: 	movswl	(%rbx), %r10d
    00000820: 	addl	%r14d, %r9d
    00000823: 	addq	%r12, %rsi
    00000826: 	movslq	%edx, %rdx
    00000829: 	movslq	%r9d, %r9
    0000082c: 	movswl	(%rbp,%rdx,2), %edx
    00000831: 	movswl	(%rbp,%r9,2), %r9d
    00000837: 	addl	%edx, %r10d
    0000083a: 	leal	0x3(%rax), %edx
    0000083d: 	leal	(%r8,%rdx), %ecx
    00000841: 	movslq	%ecx, %rcx
    00000844: 	leaq	(%rcx,%rcx), %r11
    00000848: 	movswl	(%rbp,%rcx,2), %ecx
    0000084d: 	addl	%r10d, %ecx
    00000850: 	addl	%ecx, %r9d
    00000853: 	leal	0x5(%r9), %ecx
    00000857: 	addl	$0x2, %r9d
    0000085b: 	cmovnsl	%r9d, %ecx
    0000085f: 	sarl	$0x2, %ecx
    00000862: 	subw	(%rsi), %cx
    00000865: 	movswl	%cx, %ecx
    00000868: 	imull	$0x71, %ecx, %ecx
    0000086b: 	sarl	$0x6, %ecx
    0000086e: 	addw	(%rsi), %cx
    00000871: 	movw	%cx, (%rsi)
    00000874: 	cmpl	0x24(%rsp), %edx
    00000878: 	jge	.Ltmp604 # Offset: 2168
    0000087a: 	leal	(%r15,%rdx), %ecx
    0000087e: 	leal	0x4(%r8,%rax), %eax
    00000883: 	movswl	(%r13), %esi
    00000888: 	addl	%r14d, %edx
    0000088b: 	movslq	%ecx, %rcx
    0000088e: 	cltq
    00000890: 	movslq	%edx, %rdx
    00000893: 	addq	%r12, %r11
    00000896: 	movswl	(%rbp,%rcx,2), %ecx
    0000089b: 	movswl	(%rbp,%rax,2), %eax
    000008a0: 	movswl	(%rbp,%rdx,2), %edx
    000008a5: 	addl	%ecx, %esi
    000008a7: 	addl	%esi, %eax
    000008a9: 	addl	%eax, %edx
    000008ab: 	leal	0x5(%rdx), %eax
    000008ae: 	addl	$0x2, %edx
    000008b1: 	cmovnsl	%edx, %eax
    000008b4: 	sarl	$0x2, %eax
    000008b7: 	subw	(%r11), %ax
    000008bb: 	cwtl
    000008bc: 	imull	$0x71, %eax, %eax
    000008bf: 	sarl	$0x6, %eax
    000008c2: 	addw	(%r11), %ax
    000008c6: 	movw	%ax, (%r11)
.Ltmp604:
    000008ca: 	movl	0x3c(%rsp), %eax
    000008ce: 	movl	0x2c(%rsp), %ebx
    000008d2: 	addl	%eax, 0x28(%rsp)
    000008d6: 	addl	%eax, %r15d
    000008d9: 	addl	%eax, %r8d
    000008dc: 	cmpl	%ebx, 0x38(%rsp)
    000008e0: 	jne	.Ltmp605 # Offset: 2272
.Ltmp599:
    000008e6: 	cmpq	$0x0, 0x58(%rsp)
    000008ec: 	je	.Ltmp606 # Offset: 2284
    000008f2: 	cmpq	$0x6, 0x78(%rsp)
    000008f8: 	jbe	.Ltmp607 # Offset: 2296
    000008fe: 	movq	0x80(%rsp), %rdx
    00000906: 	xorl	%eax, %eax
    00000908: 	pxor	%xmm1, %xmm1
    0000090c: 	pxor	%xmm4, %xmm4
.Ltmp608:
    00000910: 	movdqu	(%r12,%rax), %xmm5
    00000916: 	movdqu	(%rbp,%rax), %xmm3
    0000091c: 	movdqa	%xmm4, %xmm0
    00000920: 	psubw	%xmm5, %xmm3
    00000924: 	movdqa	%xmm5, %xmm2
    00000928: 	movdqu	(%rbp,%rax), %xmm5
    0000092e: 	addq	$0x10, %rax
    00000932: 	pcmpgtw	%xmm3, %xmm0
    00000936: 	psubw	%xmm5, %xmm2
    0000093a: 	pand	%xmm0, %xmm2
    0000093e: 	pandn	%xmm3, %xmm0
    00000942: 	por	%xmm2, %xmm0
    00000946: 	movdqa	%xmm4, %xmm2
    0000094a: 	pcmpgtw	%xmm0, %xmm2
    0000094e: 	movdqa	%xmm0, %xmm3
    00000952: 	punpcklwd	%xmm2, %xmm3
    00000956: 	punpckhwd	%xmm2, %xmm0
    0000095a: 	paddd	%xmm3, %xmm1
    0000095e: 	paddd	%xmm0, %xmm1
    00000962: 	cmpq	%rax, %rdx
    00000965: 	jne	.Ltmp608 # Offset: 2405
    00000967: 	movdqa	%xmm1, %xmm0
    0000096b: 	movq	0x70(%rsp), %rax
    00000970: 	psrldq	$0x8, %xmm0
    00000975: 	paddd	%xmm0, %xmm1
    00000979: 	movdqa	%xmm1, %xmm0
    0000097d: 	psrldq	$0x4, %xmm0
    00000982: 	paddd	%xmm0, %xmm1
    00000986: 	movd	%xmm1, %r8d
    0000098b: 	cmpq	%rax, 0x58(%rsp)
    00000990: 	je	.Ltmp609 # Offset: 2448
    00000996: 	movq	%rax, %rdx
.Ltmp621:
    00000999: 	movzwl	(%r12,%rdx,2), %esi
    0000099e: 	movzwl	(%rbp,%rdx,2), %eax
    000009a3: 	leaq	(%rdx,%rdx), %rcx
    000009a7: 	movq	0x58(%rsp), %rbx
    000009ac: 	movl	%esi, %r9d
    000009af: 	subl	%eax, %r9d
    000009b2: 	subw	%si, %ax
    000009b5: 	cmovsl	%r9d, %eax
    000009b9: 	cwtl
    000009ba: 	addl	%eax, %r8d
    000009bd: 	leaq	0x1(%rdx), %rax
    000009c1: 	cmpq	%rax, %rbx
    000009c4: 	jbe	.Ltmp610 # Offset: 2500
    000009ca: 	movzwl	0x2(%r12,%rcx), %esi
    000009d0: 	movzwl	0x2(%rbp,%rcx), %eax
    000009d5: 	movl	%esi, %r9d
    000009d8: 	subl	%eax, %r9d
    000009db: 	subw	%si, %ax
    000009de: 	cmovsl	%r9d, %eax
    000009e2: 	cwtl
    000009e3: 	addl	%eax, %r8d
    000009e6: 	leaq	0x2(%rdx), %rax
    000009ea: 	cmpq	%rax, %rbx
    000009ed: 	jbe	.Ltmp610 # Offset: 2541
    000009f3: 	movzwl	0x4(%r12,%rcx), %esi
    000009f9: 	movzwl	0x4(%rbp,%rcx), %eax
    000009fe: 	movl	%esi, %r9d
    00000a01: 	subl	%eax, %r9d
    00000a04: 	subw	%si, %ax
    00000a07: 	cmovsl	%r9d, %eax
    00000a0b: 	cwtl
    00000a0c: 	addl	%eax, %r8d
    00000a0f: 	leaq	0x3(%rdx), %rax
    00000a13: 	cmpq	%rax, %rbx
    00000a16: 	jbe	.Ltmp610 # Offset: 2582
    00000a1c: 	movzwl	0x6(%r12,%rcx), %esi
    00000a22: 	movzwl	0x6(%rbp,%rcx), %eax
    00000a27: 	movl	%esi, %r9d
    00000a2a: 	subl	%eax, %r9d
    00000a2d: 	subw	%si, %ax
    00000a30: 	cmovsl	%r9d, %eax
    00000a34: 	cwtl
    00000a35: 	addl	%eax, %r8d
    00000a38: 	leaq	0x4(%rdx), %rax
    00000a3c: 	cmpq	%rax, %rbx
    00000a3f: 	jbe	.Ltmp610 # Offset: 2623
    00000a41: 	movzwl	0x8(%r12,%rcx), %esi
    00000a47: 	movzwl	0x8(%rbp,%rcx), %eax
    00000a4c: 	movl	%esi, %r9d
    00000a4f: 	subl	%eax, %r9d
    00000a52: 	subw	%si, %ax
    00000a55: 	cmovsl	%r9d, %eax
    00000a59: 	cwtl
    00000a5a: 	addl	%eax, %r8d
    00000a5d: 	leaq	0x5(%rdx), %rax
    00000a61: 	cmpq	%rax, %rbx
    00000a64: 	jbe	.Ltmp610 # Offset: 2660
    00000a66: 	movzwl	0xa(%r12,%rcx), %esi
    00000a6c: 	movzwl	0xa(%rbp,%rcx), %eax
    00000a71: 	movl	%esi, %r9d
    00000a74: 	subl	%eax, %r9d
    00000a77: 	subw	%si, %ax
    00000a7a: 	cmovsl	%r9d, %eax
    00000a7e: 	addq	$0x6, %rdx
    00000a82: 	cwtl
    00000a83: 	addl	%eax, %r8d
    00000a86: 	cmpq	%rdx, %rbx
    00000a89: 	jbe	.Ltmp610 # Offset: 2697
    00000a8b: 	movzwl	0xc(%r12,%rcx), %edx
    00000a91: 	movzwl	0xc(%rbp,%rcx), %eax
    00000a96: 	movl	%edx, %ecx
    00000a98: 	subl	%eax, %ecx
    00000a9a: 	subw	%dx, %ax
    00000a9d: 	cmovsl	%ecx, %eax
    00000aa0: 	cwtl
    00000aa1: 	addl	%eax, %r8d
.Ltmp610:
    00000aa4: 	cmpq	$0x6, 0x78(%rsp)
    00000aaa: 	jbe	.Ltmp611 # Offset: 2730
.Ltmp609:
    00000ab0: 	pxor	%xmm2, %xmm2
    00000ab4: 	movq	0x80(%rsp), %rdx
    00000abc: 	xorl	%eax, %eax
    00000abe: 	movdqa	%xmm2, %xmm4
    00000ac2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp612:
    00000ac8: 	movdqu	(%r12,%rax), %xmm5
    00000ace: 	movdqu	(%rbp,%rax), %xmm3
    00000ad4: 	movdqa	%xmm4, %xmm0
    00000ad8: 	psubw	%xmm5, %xmm3
    00000adc: 	movdqa	%xmm5, %xmm1
    00000ae0: 	movdqu	(%rbp,%rax), %xmm5
    00000ae6: 	addq	$0x10, %rax
    00000aea: 	pcmpgtw	%xmm3, %xmm0
    00000aee: 	psubw	%xmm5, %xmm1
    00000af2: 	pand	%xmm0, %xmm1
    00000af6: 	pandn	%xmm3, %xmm0
    00000afa: 	por	%xmm1, %xmm0
    00000afe: 	pmaxsw	%xmm0, %xmm2
    00000b02: 	cmpq	%rax, %rdx
    00000b05: 	jne	.Ltmp612 # Offset: 2821
    00000b07: 	movdqa	%xmm2, %xmm0
    00000b0b: 	movq	0x70(%rsp), %rax
    00000b10: 	psrldq	$0x8, %xmm0
    00000b15: 	pmaxsw	%xmm0, %xmm2
    00000b19: 	movdqa	%xmm2, %xmm0
    00000b1d: 	psrldq	$0x4, %xmm0
    00000b22: 	pmaxsw	%xmm0, %xmm2
    00000b26: 	movdqa	%xmm2, %xmm0
    00000b2a: 	psrldq	$0x2, %xmm0
    00000b2f: 	pmaxsw	%xmm0, %xmm2
    00000b33: 	pextrw	$0x0, %xmm2, %ebx
    00000b38: 	cmpq	%rax, 0x58(%rsp)
    00000b3d: 	je	.Ltmp613 # Offset: 2877
.Ltmp620:
    00000b43: 	movzwl	(%r12,%rax,2), %esi
    00000b48: 	movzwl	(%rbp,%rax,2), %ecx
    00000b4d: 	leaq	(%rax,%rax), %rdx
    00000b51: 	movq	0x58(%rsp), %r15
    00000b56: 	movl	%esi, %r9d
    00000b59: 	subl	%ecx, %r9d
    00000b5c: 	subw	%si, %cx
    00000b5f: 	cmovsl	%r9d, %ecx
    00000b63: 	cmpw	%cx, %bx
    00000b66: 	cmovll	%ecx, %ebx
    00000b69: 	leaq	0x1(%rax), %rcx
    00000b6d: 	cmpq	%rcx, %r15
    00000b70: 	jbe	.Ltmp613 # Offset: 2928
    00000b76: 	movzwl	0x2(%r12,%rdx), %esi
    00000b7c: 	movzwl	0x2(%rbp,%rdx), %ecx
    00000b81: 	movl	%esi, %r9d
    00000b84: 	subl	%ecx, %r9d
    00000b87: 	subw	%si, %cx
    00000b8a: 	cmovsl	%r9d, %ecx
    00000b8e: 	cmpw	%cx, %bx
    00000b91: 	cmovll	%ecx, %ebx
    00000b94: 	leaq	0x2(%rax), %rcx
    00000b98: 	cmpq	%rcx, %r15
    00000b9b: 	jbe	.Ltmp613 # Offset: 2971
    00000ba1: 	movzwl	0x4(%r12,%rdx), %esi
    00000ba7: 	movzwl	0x4(%rbp,%rdx), %ecx
    00000bac: 	movl	%esi, %r9d
    00000baf: 	subl	%ecx, %r9d
    00000bb2: 	subw	%si, %cx
    00000bb5: 	cmovsl	%r9d, %ecx
    00000bb9: 	cmpw	%cx, %bx
    00000bbc: 	cmovll	%ecx, %ebx
    00000bbf: 	leaq	0x3(%rax), %rcx
    00000bc3: 	cmpq	%rcx, %r15
    00000bc6: 	jbe	.Ltmp613 # Offset: 3014
    00000bcc: 	movzwl	0x6(%r12,%rdx), %esi
    00000bd2: 	movzwl	0x6(%rbp,%rdx), %ecx
    00000bd7: 	movl	%esi, %r9d
    00000bda: 	subl	%ecx, %r9d
    00000bdd: 	subw	%si, %cx
    00000be0: 	cmovsl	%r9d, %ecx
    00000be4: 	cmpw	%cx, %bx
    00000be7: 	cmovll	%ecx, %ebx
    00000bea: 	leaq	0x4(%rax), %rcx
    00000bee: 	cmpq	%rcx, %r15
    00000bf1: 	jbe	.Ltmp613 # Offset: 3057
    00000bf3: 	movzwl	0x8(%r12,%rdx), %esi
    00000bf9: 	movzwl	0x8(%rbp,%rdx), %ecx
    00000bfe: 	movl	%esi, %r9d
    00000c01: 	subl	%ecx, %r9d
    00000c04: 	subw	%si, %cx
    00000c07: 	cmovsl	%r9d, %ecx
    00000c0b: 	cmpw	%cx, %bx
    00000c0e: 	cmovll	%ecx, %ebx
    00000c11: 	leaq	0x5(%rax), %rcx
    00000c15: 	cmpq	%rcx, %r15
    00000c18: 	jbe	.Ltmp613 # Offset: 3096
    00000c1a: 	movzwl	0xa(%r12,%rdx), %esi
    00000c20: 	movzwl	0xa(%rbp,%rdx), %ecx
    00000c25: 	movl	%esi, %r9d
    00000c28: 	subl	%ecx, %r9d
    00000c2b: 	subw	%si, %cx
    00000c2e: 	cmovsl	%r9d, %ecx
    00000c32: 	cmpw	%cx, %bx
    00000c35: 	cmovll	%ecx, %ebx
    00000c38: 	addq	$0x6, %rax
    00000c3c: 	cmpq	%rax, %r15
    00000c3f: 	jbe	.Ltmp613 # Offset: 3135
    00000c41: 	movzwl	0xc(%rbp,%rdx), %eax
    00000c46: 	movzwl	0xc(%r12,%rdx), %edx
    00000c4c: 	movl	%edx, %ecx
    00000c4e: 	subl	%eax, %ecx
    00000c50: 	subw	%dx, %ax
    00000c53: 	cmovsl	%ecx, %eax
    00000c56: 	cmpw	%ax, %bx
    00000c59: 	cmovll	%eax, %ebx
.Ltmp613:
    00000c5c: 	movl	0x64(%rsp), %eax
    00000c60: 	cmpl	%eax, 0x100(%rsp)
    00000c67: 	jge	.Ltmp614 # Offset: 3175
    00000c69: 	testw	%bx, %bx
    00000c6c: 	jle	.Ltmp615 # Offset: 3180
    00000c72: 	cmpl	$0x9, %r8d
    00000c76: 	jle	.Ltmp615 # Offset: 3190
.Ltmp614:
    00000c7c: 	addl	$0x1, 0x64(%rsp)
    00000c81: 	movq	%r12, %rax
    00000c84: 	movl	0x64(%rsp), %edx
    00000c88: 	movq	%rbp, %r12
    00000c8b: 	cmpl	0x94(%rsp), %edx
    00000c92: 	je	.Ltmp615 # Offset: 3218
    00000c98: 	movq	%rax, %rbp
    00000c9b: 	jmp	.Ltmp616 # Offset: 3227
.Ltmp601:
    00000ca0: 	movq	0x68(%rsp), %rax
    00000ca5: 	subq	$0x2, %r9
    00000ca9: 	leaq	-0xa(%rbp,%r11), %rbx
    00000cae: 	addq	0x88(%rsp), %r13
    00000cb6: 	leaq	(%r12,%r9), %r10
    00000cba: 	leaq	-0xa(%rbp,%rsi), %r11
    00000cbf: 	addq	%rbp, %r9
    00000cc2: 	leaq	(%rax,%r13,2), %r13
    00000cc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp617:
    00000cd0: 	movswl	0x2(%rbx), %edx
    00000cd4: 	movswl	(%r9), %ecx
    00000cd8: 	movswl	0x4(%r9), %esi
    00000cdd: 	movswl	0x2(%r9), %r14d
    00000ce2: 	addl	%edx, %ecx
    00000ce4: 	movswl	0x2(%r11), %edx
    00000ce9: 	movswl	0x6(%r9), %eax
    00000cee: 	addl	%esi, %ecx
    00000cf0: 	movq	0x2(%r10), %xmm0
    00000cf6: 	addl	%edx, %ecx
    00000cf8: 	leal	0x5(%rcx), %edx
    00000cfb: 	addl	$0x2, %ecx
    00000cfe: 	cmovnsl	%ecx, %edx
    00000d01: 	movswl	0x4(%rbx), %ecx
    00000d05: 	sarl	$0x2, %edx
    00000d08: 	subw	0x2(%r10), %dx
    00000d0d: 	addl	%ecx, %r14d
    00000d10: 	movswl	0x4(%r11), %ecx
    00000d15: 	movswl	%dx, %edx
    00000d18: 	addl	%eax, %r14d
    00000d1b: 	imull	$0x71, %edx, %edx
    00000d1e: 	addl	%ecx, %r14d
    00000d21: 	leal	0x5(%r14), %ecx
    00000d25: 	sarl	$0x6, %edx
    00000d28: 	addl	$0x2, %r14d
    00000d2c: 	cmovnsl	%r14d, %ecx
    00000d30: 	movswl	0x6(%rbx), %r14d
    00000d35: 	movzwl	%dx, %edx
    00000d38: 	addl	%esi, %r14d
    00000d3b: 	sarl	$0x2, %ecx
    00000d3e: 	movswl	0x8(%r9), %esi
    00000d43: 	subw	0x4(%r10), %cx
    00000d48: 	movswl	%cx, %ecx
    00000d4b: 	addl	%esi, %r14d
    00000d4e: 	imull	$0x71, %ecx, %ecx
    00000d51: 	movswl	0x6(%r11), %esi
    00000d56: 	addl	%esi, %r14d
    00000d59: 	sarl	$0x6, %ecx
    00000d5c: 	leal	0x5(%r14), %esi
    00000d60: 	addl	$0x2, %r14d
    00000d64: 	cmovnsl	%r14d, %esi
    00000d68: 	movswl	0x8(%rbx), %r14d
    00000d6d: 	movzwl	%cx, %ecx
    00000d70: 	addl	%eax, %r14d
    00000d73: 	sarl	$0x2, %esi
    00000d76: 	movswl	0xa(%r9), %eax
    00000d7b: 	subw	0x6(%r10), %si
    00000d80: 	movswl	%si, %esi
    00000d83: 	addl	%eax, %r14d
    00000d86: 	imull	$0x71, %esi, %esi
    00000d89: 	movswl	0x8(%r11), %eax
    00000d8e: 	addl	%eax, %r14d
    00000d91: 	sarl	$0x6, %esi
    00000d94: 	leal	0x5(%r14), %eax
    00000d98: 	addl	$0x2, %r14d
    00000d9c: 	cmovnsl	%r14d, %eax
    00000da0: 	movzwl	%si, %esi
    00000da3: 	addq	$0x8, %r9
    00000da7: 	addq	$0x8, %r10
    00000dab: 	addq	$0x8, %rbx
    00000daf: 	addq	$0x8, %r11
    00000db3: 	sarl	$0x2, %eax
    00000db6: 	subw	(%r10), %ax
    00000dba: 	cwtl
    00000dbb: 	imull	$0x71, %eax, %eax
    00000dbe: 	sarl	$0x6, %eax
    00000dc1: 	movzwl	%ax, %eax
    00000dc4: 	shlq	$0x10, %rax
    00000dc8: 	orq	%rsi, %rax
    00000dcb: 	shlq	$0x10, %rax
    00000dcf: 	orq	%rcx, %rax
    00000dd2: 	shlq	$0x10, %rax
    00000dd6: 	orq	%rdx, %rax
    00000dd9: 	movq	%rax, %xmm4
    00000dde: 	paddw	%xmm4, %xmm0
    00000de2: 	movq	%xmm0, -0x6(%r10)
    00000de8: 	cmpq	%r9, %r13
    00000deb: 	jne	.Ltmp617 # Offset: 3563
    00000df1: 	jmp	.Ltmp618 # Offset: 3569
.Ltmp606:
    00000df6: 	movl	0x64(%rsp), %eax
    00000dfa: 	cmpl	%eax, 0x100(%rsp)
    00000e01: 	jl	.Ltmp619 # Offset: 3585
    00000e07: 	xorl	%r8d, %r8d
    00000e0a: 	xorl	%ebx, %ebx
    00000e0c: 	jmp	.Ltmp614 # Offset: 3596
.Ltmp611:
    00000e11: 	xorl	%ebx, %ebx
    00000e13: 	xorl	%eax, %eax
    00000e15: 	jmp	.Ltmp620 # Offset: 3605
.Ltmp607:
    00000e1a: 	xorl	%r8d, %r8d
    00000e1d: 	xorl	%edx, %edx
    00000e1f: 	jmp	.Ltmp621 # Offset: 3615
.Ltmp615:
    00000e24: 	movswl	%bx, %eax
    00000e27: 	movl	%eax, (%rsp)
.Ltmp625:
    00000e2a: 	movl	%r8d, 0x10(%rsp)
    00000e2f: 	callq	clock@PLT # Offset: 3631
    00000e34: 	movl	0x9c(%rsp), %edi
    00000e3b: 	pxor	%xmm0, %xmm0
    00000e3f: 	movzwl	0xae(%rsp), %r14d
    00000e48: 	movq	%rax, end_time(%rip)
    00000e4f: 	subq	start_time(%rip), %rax
    00000e56: 	cvtsi2sd	%rax, %xmm0
    00000e5b: 	movl	%edi, %eax
    00000e5d: 	divsd	DATAat0x49520(%rip), %xmm0
    00000e65: 	movl	0x10(%rsp), %r8d
    00000e6a: 	shrl	$0x1f, %eax
    00000e6d: 	movq	%xmm0, %r13
    00000e72: 	addl	%edi, %eax
    00000e74: 	movl	0x90(%rsp), %edi
    00000e7b: 	sarl	%eax
    00000e7d: 	movl	%edi, %edx
    00000e7f: 	imull	%edi, %eax
    00000e82: 	shrl	$0x1f, %edx
    00000e85: 	addl	%edi, %edx
    00000e87: 	sarl	%edx
    00000e89: 	addl	%edx, %eax
    00000e8b: 	cltq
    00000e8d: 	subw	(%r12,%rax,2), %r14w
    00000e92: 	movl	0x64(%rsp), %eax
    00000e96: 	cmpl	%eax, iterations(%rip)
    00000e9c: 	jg	.Ltmp622 # Offset: 3740
    00000ea2: 	cmpl	$0xa, %r8d
    00000ea6: 	jle	.Ltmp622 # Offset: 3750
    00000eac: 	cmpw	$0x1, %bx
    00000eb0: 	jle	.Ltmp622 # Offset: 3760
    00000eb6: 	movq	0xa0(%rsp), %rax
    00000ebe: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000ec5: 	movq	%r15, %rdi
    00000ec8: 	movq	0x8(%rax), %rdx
    00000ecc: 	movq	(%rax), %rsi
    00000ecf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3791
    00000ed4: 	movl	$0x11, %edx
    00000ed9: 	leaq	DATAat0x49199(%rip), %rsi
    00000ee0: 	movq	%rax, %rdi
    00000ee3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3811
    00000ee8: 	movl	0x10(%rsp), %r8d
.Ltmp624:
    00000eed: 	movl	$0x4, %edx
    00000ef2: 	leaq	DATAat0x491b6(%rip), %rsi
    00000ef9: 	movq	%r15, %rdi
    00000efc: 	movl	%r8d, 0x10(%rsp)
    00000f01: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3841
    00000f06: 	movl	0x64(%rsp), %esi
    00000f0a: 	movq	%r15, %rdi
    00000f0d: 	callq	_ZNSolsEi@PLT # Offset: 3853
    00000f12: 	movl	$0xb, %edx
    00000f17: 	leaq	DATAat0x491bb(%rip), %rsi
    00000f1e: 	movq	%rax, %rdi
    00000f21: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3873
    00000f26: 	movl	$0xa, %edx
    00000f2b: 	leaq	DATAat0x491c7(%rip), %rsi
    00000f32: 	movq	%r15, %rdi
    00000f35: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3893
    00000f3a: 	movl	0x10(%rsp), %esi
    00000f3e: 	movq	%r15, %rdi
    00000f41: 	callq	_ZNSolsEi@PLT # Offset: 3905
    00000f46: 	movl	$0x7, %edx
    00000f4b: 	leaq	DATAat0x491d2(%rip), %rsi
    00000f52: 	movq	%rax, %rdi
    00000f55: 	movq	%rax, %rbp
    00000f58: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3928
    00000f5d: 	movl	(%rsp), %esi
    00000f60: 	movq	%rbp, %rdi
    00000f63: 	callq	_ZNSolsEs@PLT # Offset: 3939
    00000f68: 	movl	$0x10, %edx
    00000f6d: 	leaq	DATAat0x491da(%rip), %rsi
    00000f74: 	movq	%rax, %rbp
    00000f77: 	movq	%rax, %rdi
    00000f7a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3962
    00000f7f: 	movq	%rbp, %rdi
    00000f82: 	movswl	%r14w, %esi
    00000f86: 	callq	_ZNSolsEs@PLT # Offset: 3974
    00000f8b: 	movl	$0x8, %edx
    00000f90: 	leaq	DATAat0x491eb(%rip), %rsi
    00000f97: 	movq	%rax, %rbp
    00000f9a: 	movq	%rax, %rdi
    00000f9d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3997
    00000fa2: 	movq	%r13, %xmm0
    00000fa7: 	movq	%rbp, %rdi
    00000faa: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 4010
    00000faf: 	movl	$0x2, %edx
    00000fb4: 	leaq	DATAat0x491f4(%rip), %rsi
    00000fbb: 	movq	%rax, %rdi
    00000fbe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4030
    00000fc3: 	movl	0xa8(%rsp), %eax
    00000fca: 	movl	%eax, iterations(%rip)
    00000fd0: 	movq	0xb8(%rsp), %rax
    00000fd8: 	subq	%fs:0x28, %rax
    00000fe1: 	jne	.Ltmp623 # Offset: 4065
    00000fe3: 	addq	$0xc8, %rsp
    00000fea: 	popq	%rbx
    00000feb: 	popq	%rbp
    00000fec: 	popq	%r12
    00000fee: 	popq	%r13
    00000ff0: 	popq	%r14
    00000ff2: 	popq	%r15
    00000ff4: 	retq # Offset: 4084
.Ltmp622:
    00000ff5: 	movq	0xa0(%rsp), %rax
    00000ffd: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00001004: 	movl	%r8d, 0x10(%rsp)
    00001009: 	movq	%r15, %rdi
    0000100c: 	movq	0x8(%rax), %rdx
    00001010: 	movq	(%rax), %rsi
    00001013: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4115
    00001018: 	movl	$0xa, %edx
    0000101d: 	leaq	DATAat0x491ab(%rip), %rsi
    00001024: 	movq	%rax, %rdi
    00001027: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4135
    0000102c: 	movl	0x10(%rsp), %r8d
    00001031: 	jmp	.Ltmp624 # Offset: 4145
.Ltmp619:
    00001036: 	movl	$0x0, (%rsp)
    0000103d: 	xorl	%ebx, %ebx
    0000103f: 	xorl	%r8d, %r8d
    00001042: 	jmp	.Ltmp625 # Offset: 4162
.Ltmp623:
    00001047: 	callq	__stack_chk_fail@PLT # Offset: 4167
    0000104c: 	nopl	(%rax) # Size: 4
.Ltmp598:
    00001050: 	movl	$0x0, (%rsp)
    00001057: 	xorl	%ebx, %ebx
    00001059: 	xorl	%r8d, %r8d
    0000105c: 	movl	$0x0, 0x64(%rsp)
    00001064: 	jmp	.Ltmp625 # Offset: 4196
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x1a6e0
  Size        : 0x6b9
  MaxSize     : 0x6c0
  Offset      : 0x1a6e0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r15d, %esi
    0000001d: 	imull	%r13d, %r15d
    00000021: 	subq	$0x48, %rsp
    00000025: 	movl	%edx, 0x10(%rsp)
    00000029: 	leaq	0x30(%rsp), %rcx
    0000002e: 	movl	%r13d, %edx
    00000031: 	movl	%r8d, 0x18(%rsp)
    00000036: 	movq	%r9, 0x28(%rsp)
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0x38(%rsp)
    00000049: 	xorl	%eax, %eax
    0000004b: 	movq	DATAat0x49530(%rip), %rax
    00000052: 	movq	%rax, 0x30(%rsp)
    00000057: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 87
    0000005c: 	movw	%ax, 0x26(%rsp)
    00000061: 	testl	%r15d, %r15d
    00000064: 	jle	.Ltmp626 # Offset: 100
    00000066: 	movslq	%r15d, %rdx
    00000069: 	movq	%r12, %rsi
    0000006c: 	movq	%rbx, %rdi
    0000006f: 	addq	%rdx, %rdx
    00000072: 	callq	memmove@PLT # Offset: 114
.Ltmp626:
    00000077: 	movl	iterations(%rip), %eax
    0000007d: 	movl	$0x2710, iterations(%rip)
    00000087: 	movl	%eax, 0x20(%rsp)
    0000008b: 	callq	clock@PLT # Offset: 139
    00000090: 	movq	%rax, start_time(%rip)
    00000097: 	movl	iterations(%rip), %eax
    0000009d: 	movl	%eax, 0x1c(%rsp)
    000000a1: 	testl	%eax, %eax
    000000a3: 	jle	.Ltmp627 # Offset: 163
    000000a9: 	movslq	%r15d, %r15
    000000ac: 	xorl	%r14d, %r14d
    000000af: 	movl	%r13d, 0x14(%rsp)
    000000b4: 	leaq	-0x1(%r15), %rax
    000000b8: 	movq	%r15, %r10
    000000bb: 	movq	%r15, %rsi
    000000be: 	movq	%rax, 0x8(%rsp)
    000000c3: 	movq	%r15, %rax
    000000c6: 	andq	$-0x8, %r10
    000000ca: 	movl	%r14d, %r15d
    000000cd: 	shrq	$0x3, %rax
    000000d1: 	movq	%r10, %r13
    000000d4: 	movq	%rsi, %r14
    000000d7: 	shlq	$0x4, %rax
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp638:
    000000e0: 	movl	0x18(%rsp), %r8d
    000000e5: 	movl	0x14(%rsp), %ecx
    000000e9: 	movq	%rbx, %rsi
    000000ec: 	movq	%r12, %rdi
    000000ef: 	movl	0x10(%rsp), %edx
    000000f3: 	movq	%rax, (%rsp)
    000000f7: 	callq	"_ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/1" # Offset: 247
    000000fc: 	testq	%r14, %r14
    000000ff: 	movq	(%rsp), %rax
    00000103: 	pxor	%xmm3, %xmm3
    00000107: 	je	.Ltmp628 # Offset: 263
    0000010d: 	cmpq	$0x6, 0x8(%rsp)
    00000113: 	jbe	.Ltmp629 # Offset: 275
    00000119: 	xorl	%edx, %edx
    0000011b: 	pxor	%xmm1, %xmm1
    0000011f: 	nop # Size: 1
.Ltmp630:
    00000120: 	movdqu	(%rbx,%rdx), %xmm5
    00000125: 	movdqu	(%r12,%rdx), %xmm4
    0000012b: 	movdqa	%xmm3, %xmm0
    0000012f: 	movdqu	(%r12,%rdx), %xmm6
    00000135: 	addq	$0x10, %rdx
    00000139: 	psubw	%xmm5, %xmm4
    0000013d: 	movdqa	%xmm5, %xmm2
    00000141: 	pcmpgtw	%xmm4, %xmm0
    00000145: 	psubw	%xmm6, %xmm2
    00000149: 	pand	%xmm0, %xmm2
    0000014d: 	pandn	%xmm4, %xmm0
    00000151: 	movdqa	%xmm3, %xmm4
    00000155: 	por	%xmm2, %xmm0
    00000159: 	pcmpgtw	%xmm0, %xmm4
    0000015d: 	movdqa	%xmm0, %xmm2
    00000161: 	punpcklwd	%xmm4, %xmm2
    00000165: 	punpckhwd	%xmm4, %xmm0
    00000169: 	paddd	%xmm2, %xmm1
    0000016d: 	paddd	%xmm0, %xmm1
    00000171: 	cmpq	%rdx, %rax
    00000174: 	jne	.Ltmp630 # Offset: 372
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	psrldq	$0x8, %xmm0
    0000017f: 	paddd	%xmm0, %xmm1
    00000183: 	movdqa	%xmm1, %xmm0
    00000187: 	psrldq	$0x4, %xmm0
    0000018c: 	paddd	%xmm0, %xmm1
    00000190: 	movd	%xmm1, %ebp
    00000194: 	cmpq	%r13, %r14
    00000197: 	je	.Ltmp631 # Offset: 407
    0000019d: 	movq	%r13, %rcx
.Ltmp641:
    000001a0: 	movzwl	(%rbx,%rcx,2), %edi
    000001a4: 	movzwl	(%r12,%rcx,2), %edx
    000001a9: 	leaq	(%rcx,%rcx), %rsi
    000001ad: 	movl	%edi, %r8d
    000001b0: 	subl	%edx, %r8d
    000001b3: 	subw	%di, %dx
    000001b6: 	cmovsl	%r8d, %edx
    000001ba: 	movswl	%dx, %edx
    000001bd: 	addl	%edx, %ebp
    000001bf: 	leaq	0x1(%rcx), %rdx
    000001c3: 	cmpq	%rdx, %r14
    000001c6: 	jbe	.Ltmp632 # Offset: 454
    000001cc: 	movzwl	0x2(%rbx,%rsi), %edi
    000001d1: 	movzwl	0x2(%r12,%rsi), %edx
    000001d7: 	movl	%edi, %r8d
    000001da: 	subl	%edx, %r8d
    000001dd: 	subw	%di, %dx
    000001e0: 	cmovsl	%r8d, %edx
    000001e4: 	movswl	%dx, %edx
    000001e7: 	addl	%edx, %ebp
    000001e9: 	leaq	0x2(%rcx), %rdx
    000001ed: 	cmpq	%rdx, %r14
    000001f0: 	jbe	.Ltmp632 # Offset: 496
    000001f6: 	movzwl	0x4(%rbx,%rsi), %edi
    000001fb: 	movzwl	0x4(%r12,%rsi), %edx
    00000201: 	movl	%edi, %r8d
    00000204: 	subl	%edx, %r8d
    00000207: 	subw	%di, %dx
    0000020a: 	cmovsl	%r8d, %edx
    0000020e: 	movswl	%dx, %edx
    00000211: 	addl	%edx, %ebp
    00000213: 	leaq	0x3(%rcx), %rdx
    00000217: 	cmpq	%rdx, %r14
    0000021a: 	jbe	.Ltmp632 # Offset: 538
    00000220: 	movzwl	0x6(%rbx,%rsi), %edi
    00000225: 	movzwl	0x6(%r12,%rsi), %edx
    0000022b: 	movl	%edi, %r8d
    0000022e: 	subl	%edx, %r8d
    00000231: 	subw	%di, %dx
    00000234: 	cmovsl	%r8d, %edx
    00000238: 	movswl	%dx, %edx
    0000023b: 	addl	%edx, %ebp
    0000023d: 	leaq	0x4(%rcx), %rdx
    00000241: 	cmpq	%rdx, %r14
    00000244: 	jbe	.Ltmp632 # Offset: 580
    00000246: 	movzwl	0x8(%rbx,%rsi), %edi
    0000024b: 	movzwl	0x8(%r12,%rsi), %edx
    00000251: 	movl	%edi, %r8d
    00000254: 	subl	%edx, %r8d
    00000257: 	subw	%di, %dx
    0000025a: 	cmovsl	%r8d, %edx
    0000025e: 	movswl	%dx, %edx
    00000261: 	addl	%edx, %ebp
    00000263: 	leaq	0x5(%rcx), %rdx
    00000267: 	cmpq	%rdx, %r14
    0000026a: 	jbe	.Ltmp632 # Offset: 618
    0000026c: 	movzwl	0xa(%rbx,%rsi), %edi
    00000271: 	movzwl	0xa(%r12,%rsi), %edx
    00000277: 	movl	%edi, %r8d
    0000027a: 	subl	%edx, %r8d
    0000027d: 	subw	%di, %dx
    00000280: 	cmovsl	%r8d, %edx
    00000284: 	addq	$0x6, %rcx
    00000288: 	movswl	%dx, %edx
    0000028b: 	addl	%edx, %ebp
    0000028d: 	cmpq	%rcx, %r14
    00000290: 	jbe	.Ltmp632 # Offset: 656
    00000292: 	movzwl	0xc(%rbx,%rsi), %ecx
    00000297: 	movzwl	0xc(%r12,%rsi), %edx
    0000029d: 	movl	%ecx, %esi
    0000029f: 	subl	%edx, %esi
    000002a1: 	subw	%cx, %dx
    000002a4: 	cmovsl	%esi, %edx
    000002a7: 	movswl	%dx, %edx
    000002aa: 	addl	%edx, %ebp
.Ltmp632:
    000002ac: 	cmpq	$0x6, 0x8(%rsp)
    000002b2: 	jbe	.Ltmp633 # Offset: 690
.Ltmp631:
    000002b8: 	xorl	%edx, %edx
    000002ba: 	pxor	%xmm2, %xmm2
    000002be: 	nop # Size: 2
.Ltmp634:
    000002c0: 	movdqu	(%rbx,%rdx), %xmm7
    000002c5: 	movdqu	(%r12,%rdx), %xmm4
    000002cb: 	movdqa	%xmm3, %xmm0
    000002cf: 	movdqu	(%r12,%rdx), %xmm5
    000002d5: 	addq	$0x10, %rdx
    000002d9: 	psubw	%xmm7, %xmm4
    000002dd: 	movdqa	%xmm7, %xmm1
    000002e1: 	pcmpgtw	%xmm4, %xmm0
    000002e5: 	psubw	%xmm5, %xmm1
    000002e9: 	pand	%xmm0, %xmm1
    000002ed: 	pandn	%xmm4, %xmm0
    000002f1: 	por	%xmm1, %xmm0
    000002f5: 	pmaxsw	%xmm0, %xmm2
    000002f9: 	cmpq	%rax, %rdx
    000002fc: 	jne	.Ltmp634 # Offset: 764
    000002fe: 	movdqa	%xmm2, %xmm0
    00000302: 	psrldq	$0x8, %xmm0
    00000307: 	pmaxsw	%xmm0, %xmm2
    0000030b: 	movdqa	%xmm2, %xmm0
    0000030f: 	psrldq	$0x4, %xmm0
    00000314: 	pmaxsw	%xmm0, %xmm2
    00000318: 	movdqa	%xmm2, %xmm0
    0000031c: 	psrldq	$0x2, %xmm0
    00000321: 	pmaxsw	%xmm0, %xmm2
    00000325: 	pextrw	$0x0, %xmm2, %edx
    0000032a: 	cmpq	%r13, %r14
    0000032d: 	je	.Ltmp635 # Offset: 813
    00000333: 	movq	%r13, %rcx
.Ltmp640:
    00000336: 	movzwl	(%rbx,%rcx,2), %r8d
    0000033b: 	movzwl	(%r12,%rcx,2), %edi
    00000340: 	leaq	(%rcx,%rcx), %rsi
    00000344: 	movl	%r8d, %r11d
    00000347: 	subl	%edi, %r11d
    0000034a: 	subw	%r8w, %di
    0000034e: 	cmovsl	%r11d, %edi
    00000352: 	cmpw	%di, %dx
    00000355: 	cmovll	%edi, %edx
    00000358: 	leaq	0x1(%rcx), %rdi
    0000035c: 	cmpq	%rdi, %r14
    0000035f: 	jbe	.Ltmp635 # Offset: 863
    00000365: 	movzwl	0x2(%rbx,%rsi), %r8d
    0000036b: 	movzwl	0x2(%r12,%rsi), %edi
    00000371: 	movl	%r8d, %r11d
    00000374: 	subl	%edi, %r11d
    00000377: 	subw	%r8w, %di
    0000037b: 	cmovsl	%r11d, %edi
    0000037f: 	cmpw	%di, %dx
    00000382: 	cmovll	%edi, %edx
    00000385: 	leaq	0x2(%rcx), %rdi
    00000389: 	cmpq	%r14, %rdi
    0000038c: 	jae	.Ltmp635 # Offset: 908
    00000392: 	movzwl	0x4(%rbx,%rsi), %r8d
    00000398: 	movzwl	0x4(%r12,%rsi), %edi
    0000039e: 	movl	%r8d, %r11d
    000003a1: 	subl	%edi, %r11d
    000003a4: 	subw	%r8w, %di
    000003a8: 	cmovsl	%r11d, %edi
    000003ac: 	cmpw	%di, %dx
    000003af: 	cmovll	%edi, %edx
    000003b2: 	leaq	0x3(%rcx), %rdi
    000003b6: 	cmpq	%rdi, %r14
    000003b9: 	jbe	.Ltmp635 # Offset: 953
    000003bf: 	movzwl	0x6(%rbx,%rsi), %r8d
    000003c5: 	movzwl	0x6(%r12,%rsi), %edi
    000003cb: 	movl	%r8d, %r11d
    000003ce: 	subl	%edi, %r11d
    000003d1: 	subw	%r8w, %di
    000003d5: 	cmovsl	%r11d, %edi
    000003d9: 	cmpw	%di, %dx
    000003dc: 	cmovll	%edi, %edx
    000003df: 	leaq	0x4(%rcx), %rdi
    000003e3: 	cmpq	%rdi, %r14
    000003e6: 	jbe	.Ltmp635 # Offset: 998
    000003e8: 	movzwl	0x8(%rbx,%rsi), %r8d
    000003ee: 	movzwl	0x8(%r12,%rsi), %edi
    000003f4: 	movl	%r8d, %r11d
    000003f7: 	subl	%edi, %r11d
    000003fa: 	subw	%r8w, %di
    000003fe: 	cmovsl	%r11d, %edi
    00000402: 	cmpw	%di, %dx
    00000405: 	cmovll	%edi, %edx
    00000408: 	leaq	0x5(%rcx), %rdi
    0000040c: 	cmpq	%rdi, %r14
    0000040f: 	jbe	.Ltmp635 # Offset: 1039
    00000411: 	movzwl	0xa(%rbx,%rsi), %r8d
    00000417: 	movzwl	0xa(%r12,%rsi), %edi
    0000041d: 	movl	%r8d, %r11d
    00000420: 	subl	%edi, %r11d
    00000423: 	subw	%r8w, %di
    00000427: 	cmovsl	%r11d, %edi
    0000042b: 	cmpw	%di, %dx
    0000042e: 	cmovll	%edi, %edx
    00000431: 	addq	$0x6, %rcx
    00000435: 	cmpq	%rcx, %r14
    00000438: 	jbe	.Ltmp635 # Offset: 1080
    0000043a: 	movzwl	0xc(%r12,%rsi), %ecx
    00000440: 	movzwl	0xc(%rbx,%rsi), %esi
    00000445: 	movl	%esi, %edi
    00000447: 	subl	%ecx, %edi
    00000449: 	subw	%si, %cx
    0000044c: 	cmovsl	%edi, %ecx
    0000044f: 	cmpw	%cx, %dx
    00000452: 	cmovll	%ecx, %edx
.Ltmp635:
    00000455: 	cmpl	%r15d, 0x80(%rsp)
    0000045d: 	jge	.Ltmp636 # Offset: 1117
    0000045f: 	testw	%dx, %dx
    00000462: 	jle	.Ltmp637 # Offset: 1122
    00000468: 	cmpl	$0x9, %ebp
    0000046b: 	jle	.Ltmp637 # Offset: 1131
.Ltmp636:
    00000471: 	movq	%rbx, %rcx
    00000474: 	addl	$0x1, %r15d
    00000478: 	movq	%r12, %rbx
    0000047b: 	cmpl	0x1c(%rsp), %r15d
    00000480: 	je	.Ltmp637 # Offset: 1152
    00000486: 	movq	%rcx, %r12
    00000489: 	jmp	.Ltmp638 # Offset: 1161
    0000048e: 	nop # Size: 2
.Ltmp628:
    00000490: 	cmpl	%r15d, 0x80(%rsp)
    00000498: 	jl	.Ltmp639 # Offset: 1176
    0000049a: 	xorl	%ebp, %ebp
    0000049c: 	xorl	%edx, %edx
    0000049e: 	jmp	.Ltmp636 # Offset: 1182
.Ltmp633:
    000004a0: 	xorl	%edx, %edx
    000004a2: 	xorl	%ecx, %ecx
    000004a4: 	jmp	.Ltmp640 # Offset: 1188
.Ltmp629:
    000004a9: 	xorl	%ebp, %ebp
    000004ab: 	xorl	%ecx, %ecx
    000004ad: 	jmp	.Ltmp641 # Offset: 1197
.Ltmp639:
    000004b2: 	movl	0x14(%rsp), %r13d
    000004b7: 	movl	%r15d, %r14d
    000004ba: 	xorl	%edx, %edx
    000004bc: 	xorl	%r15d, %r15d
    000004bf: 	xorl	%ebp, %ebp
.Ltmp645:
    000004c1: 	movl	%edx, (%rsp)
    000004c4: 	callq	clock@PLT # Offset: 1220
    000004c9: 	movl	0x10(%rsp), %ecx
    000004cd: 	pxor	%xmm0, %xmm0
    000004d1: 	movzwl	0x26(%rsp), %esi
    000004d6: 	movq	%rax, end_time(%rip)
    000004dd: 	subq	start_time(%rip), %rax
    000004e4: 	cvtsi2sd	%rax, %xmm0
    000004e9: 	movl	%ecx, %eax
    000004eb: 	divsd	DATAat0x49520(%rip), %xmm0
    000004f3: 	movq	%xmm0, %r12
    000004f8: 	shrl	$0x1f, %eax
    000004fb: 	addl	%ecx, %eax
    000004fd: 	movl	%r13d, %ecx
    00000500: 	sarl	%eax
    00000502: 	shrl	$0x1f, %ecx
    00000505: 	imull	%r13d, %eax
    00000509: 	addl	%r13d, %ecx
    0000050c: 	sarl	%ecx
    0000050e: 	addl	%ecx, %eax
    00000510: 	cltq
    00000512: 	subw	(%rbx,%rax,2), %si
    00000516: 	cmpl	%r14d, iterations(%rip)
    0000051d: 	movl	%esi, %ebx
    0000051f: 	jg	.Ltmp642 # Offset: 1311
    00000525: 	cmpl	$0xa, %ebp
    00000528: 	jle	.Ltmp642 # Offset: 1320
    0000052e: 	movl	(%rsp), %edx
    00000531: 	cmpw	$0x1, %dx
    00000535: 	jle	.Ltmp642 # Offset: 1333
    0000053b: 	movq	0x28(%rsp), %rax
    00000540: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000547: 	movq	%r13, %rdi
    0000054a: 	movq	0x8(%rax), %rdx
    0000054e: 	movq	(%rax), %rsi
    00000551: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1361
    00000556: 	movl	$0x11, %edx
    0000055b: 	leaq	DATAat0x49199(%rip), %rsi
    00000562: 	movq	%rax, %rdi
    00000565: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1381
.Ltmp644:
    0000056a: 	movl	$0x4, %edx
    0000056f: 	leaq	DATAat0x491b6(%rip), %rsi
    00000576: 	movq	%r13, %rdi
    00000579: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1401
    0000057e: 	movl	%r14d, %esi
    00000581: 	movq	%r13, %rdi
    00000584: 	callq	_ZNSolsEi@PLT # Offset: 1412
    00000589: 	movl	$0xb, %edx
    0000058e: 	leaq	DATAat0x491bb(%rip), %rsi
    00000595: 	movq	%rax, %rdi
    00000598: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1432
    0000059d: 	movl	$0xa, %edx
    000005a2: 	leaq	DATAat0x491c7(%rip), %rsi
    000005a9: 	movq	%r13, %rdi
    000005ac: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1452
    000005b1: 	movl	%ebp, %esi
    000005b3: 	movq	%r13, %rdi
    000005b6: 	callq	_ZNSolsEi@PLT # Offset: 1462
    000005bb: 	movl	$0x7, %edx
    000005c0: 	leaq	DATAat0x491d2(%rip), %rsi
    000005c7: 	movq	%rax, %rbp
    000005ca: 	movq	%rax, %rdi
    000005cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1485
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	movl	%r15d, %esi
    000005d8: 	callq	_ZNSolsEs@PLT # Offset: 1496
    000005dd: 	movl	$0x10, %edx
    000005e2: 	leaq	DATAat0x491da(%rip), %rsi
    000005e9: 	movq	%rax, %rbp
    000005ec: 	movq	%rax, %rdi
    000005ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1519
    000005f4: 	movq	%rbp, %rdi
    000005f7: 	movswl	%bx, %esi
    000005fa: 	callq	_ZNSolsEs@PLT # Offset: 1530
    000005ff: 	movl	$0x8, %edx
    00000604: 	leaq	DATAat0x491eb(%rip), %rsi
    0000060b: 	movq	%rax, %rbp
    0000060e: 	movq	%rax, %rdi
    00000611: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1553
    00000616: 	movq	%r12, %xmm0
    0000061b: 	movq	%rbp, %rdi
    0000061e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1566
    00000623: 	movl	$0x2, %edx
    00000628: 	leaq	DATAat0x491f4(%rip), %rsi
    0000062f: 	movq	%rax, %rdi
    00000632: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1586
    00000637: 	movl	0x20(%rsp), %eax
    0000063b: 	movl	%eax, iterations(%rip)
    00000641: 	movq	0x38(%rsp), %rax
    00000646: 	subq	%fs:0x28, %rax
    0000064f: 	jne	.Ltmp643 # Offset: 1615
    00000651: 	addq	$0x48, %rsp
    00000655: 	popq	%rbx
    00000656: 	popq	%rbp
    00000657: 	popq	%r12
    00000659: 	popq	%r13
    0000065b: 	popq	%r14
    0000065d: 	popq	%r15
    0000065f: 	retq # Offset: 1631
.Ltmp642:
    00000660: 	movq	0x28(%rsp), %rax
    00000665: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000066c: 	movq	%r13, %rdi
    0000066f: 	movq	0x8(%rax), %rdx
    00000673: 	movq	(%rax), %rsi
    00000676: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1654
    0000067b: 	movl	$0xa, %edx
    00000680: 	leaq	DATAat0x491ab(%rip), %rsi
    00000687: 	movq	%rax, %rdi
    0000068a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1674
    0000068f: 	jmp	.Ltmp644 # Offset: 1679
.Ltmp637:
    00000694: 	movl	%r15d, %r14d
    00000697: 	movl	0x14(%rsp), %r13d
    0000069c: 	movswl	%dx, %r15d
    000006a0: 	jmp	.Ltmp645 # Offset: 1696
.Ltmp627:
    000006a5: 	xorl	%r15d, %r15d
    000006a8: 	xorl	%r14d, %r14d
    000006ab: 	xorl	%edx, %edx
    000006ad: 	xorl	%ebp, %ebp
    000006af: 	jmp	.Ltmp645 # Offset: 1711
.Ltmp643:
    000006b4: 	callq	__stack_chk_fail@PLT # Offset: 1716
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x1ada0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x1ada0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp646 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp647 # Offset: 152
.Ltmp658:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp648 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp649 # Offset: 204
.Ltmp648:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp650 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp651 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp653:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp652 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp651:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp653 # Offset: 339
    00000155: 	jmp	.Ltmp654 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp647:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp655 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp656 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp657 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp657:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp660:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp658 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp650:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp654:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp653 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp655:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp659 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp660 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp660 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp659:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp660 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp660 # Offset: 696
.Ltmp649:
    000002bd: 	leaq	DATAat0x49008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp656:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp661 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp661:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp646:
    000002e0: 	leaq	DATAat0x491f8(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp652:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x1b0d0
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x1b0d0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	0x30(%rdi), %rbx
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x8(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	movq	0x40(%rdi), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp662 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %r13
    00000044: 	movq	%r13, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp663 # Offset: 74
    0000004c: 	testq	%r13, %r13
    0000004f: 	je	.Ltmp664 # Offset: 79
.Ltmp663:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp665 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp666 # Offset: 99
    00000069: 	movzbl	(%r13), %eax
    0000006e: 	movb	%al, 0x10(%rbx)
.Ltmp668:
    00000071: 	movq	%r12, 0x8(%rbx)
    00000075: 	movb	$0x0, (%rdi,%r12)
    0000007a: 	addq	$0x20, 0x30(%rbp)
    0000007f: 	movq	0x8(%rsp), %rax
    00000084: 	subq	%fs:0x28, %rax
    0000008d: 	jne	.Ltmp667 # Offset: 141
    0000008f: 	addq	$0x18, %rsp
    00000093: 	popq	%rbx
    00000094: 	popq	%rbp
    00000095: 	popq	%r12
    00000097: 	popq	%r13
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp665:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp669:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%r13, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp668 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp662:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp667 # Offset: 222
    000000e0: 	addq	$0x18, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 234
    000000ef: 	nop # Size: 1
.Ltmp666:
    000000f0: 	testq	%r12, %r12
    000000f3: 	je	.Ltmp668 # Offset: 243
    000000f9: 	jmp	.Ltmp669 # Offset: 249
.Ltmp664:
    000000fb: 	leaq	DATAat0x49008(%rip), %rdi
    00000102: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 258
.Ltmp667:
    00000107: 	callq	__stack_chk_fail@PLT # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_"

Binary Function "_Z13testLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x1b1e0
  Size        : 0x9a7
  MaxSize     : 0x9b0
  Offset      : 0x1b1e0
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%ecx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	movl	%r13d, %edx
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0xe8, %rsp
    00000020: 	movq	%rsi, 0x8(%rsp)
    00000025: 	leaq	0xd0(%rsp), %rcx
    0000002d: 	movl	%ebp, %esi
    0000002f: 	movl	%r8d, 0x34(%rsp)
    00000034: 	movq	%r9, 0xb8(%rsp)
    0000003c: 	movq	%fs:0x28, %rax
    00000045: 	movq	%rax, 0xd8(%rsp)
    0000004d: 	xorl	%eax, %eax
    0000004f: 	movq	DATAat0x49530(%rip), %rax
    00000056: 	movq	%rax, 0xd0(%rsp)
    0000005e: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 94
    00000063: 	movl	%ebp, %eax
    00000065: 	movq	0x8(%rsp), %r11
    0000006a: 	imull	%r13d, %eax
    0000006e: 	testl	%eax, %eax
    00000070: 	jle	.Ltmp670 # Offset: 112
    00000072: 	cltq
    00000074: 	movq	%r11, %rdi
    00000077: 	movq	%rbx, %rsi
    0000007a: 	leaq	(%rax,%rax), %rdx
    0000007e: 	callq	memmove@PLT # Offset: 126
    00000083: 	movq	%rax, %r11
.Ltmp670:
    00000086: 	movq	%r11, 0x8(%rsp)
    0000008b: 	callq	clock@PLT # Offset: 139
    00000090: 	movq	0x8(%rsp), %r11
    00000095: 	movq	%rax, start_time(%rip)
    0000009c: 	movl	iterations(%rip), %eax
    000000a2: 	testl	%eax, %eax
    000000a4: 	movl	%eax, 0x90(%rsp)
    000000ab: 	jle	.Ltmp671 # Offset: 171
    000000b1: 	leal	-0x2(%rbp), %ecx
    000000b4: 	leal	-0x1(%r13), %eax
    000000b8: 	movl	%ecx, 0x7c(%rsp)
    000000bc: 	movl	%eax, 0x8(%rsp)
    000000c0: 	testl	%ecx, %ecx
    000000c2: 	jle	.Ltmp671 # Offset: 194
    000000c8: 	cmpl	$0x1, %eax
    000000cb: 	jle	.Ltmp671 # Offset: 203
    000000d1: 	movl	0x34(%rsp), %esi
    000000d5: 	movl	$0x0, 0x78(%rsp)
    000000dd: 	pxor	%xmm2, %xmm2
    000000e1: 	pxor	%xmm3, %xmm3
    000000e5: 	movdqa	DATAat0x49440(%rip), %xmm6
    000000ed: 	movdqa	DATAat0x49450(%rip), %xmm5
    000000f5: 	movl	%esi, %eax
    000000f7: 	movdqa	DATAat0x49460(%rip), %xmm4
    000000ff: 	negl	%eax
    00000101: 	cltq
    00000103: 	leaq	(%rax,%rax), %rbp
    00000107: 	movl	%esi, %eax
    00000109: 	imull	%ecx, %eax
    0000010c: 	movslq	%eax, %rdx
    0000010f: 	subl	%esi, %eax
    00000111: 	leaq	0x2(%rdx,%rdx), %rcx
    00000116: 	movslq	%eax, %rdx
    00000119: 	leal	(%rax,%rsi,2), %eax
    0000011c: 	movq	%rcx, 0xa0(%rsp)
    00000124: 	leaq	0x4(%rdx,%rdx), %rcx
    00000129: 	movslq	%eax, %rdx
    0000012c: 	subl	%esi, %eax
    0000012e: 	movl	%eax, 0x94(%rsp)
    00000135: 	negl	%esi
    00000137: 	cltq
    00000139: 	movq	%rcx, 0x98(%rsp)
    00000141: 	leaq	0x4(%rdx,%rdx), %rcx
    00000146: 	movq	%rax, %rdx
    00000149: 	leaq	0x4(%rax,%rax), %rax
    0000014e: 	movl	%esi, 0x50(%rsp)
    00000152: 	leal	-0x2(%r13), %esi
    00000156: 	negq	%rdx
    00000159: 	movq	%rax, 0x80(%rsp)
    00000161: 	movl	%esi, %eax
    00000163: 	shrl	$0x3, %eax
    00000166: 	movl	%esi, 0x58(%rsp)
    0000016a: 	subl	$0x1, %eax
    0000016d: 	movq	%rcx, 0x88(%rsp)
    00000175: 	leaq	(%rdx,%rdx), %rcx
    00000179: 	addq	$0x1, %rax
    0000017d: 	movq	%rcx, 0xb0(%rsp)
    00000185: 	shlq	$0x4, %rax
    00000189: 	movq	%rax, %r12
    0000018c: 	movl	%esi, %eax
    0000018e: 	andl	$-0x8, %eax
    00000191: 	leal	0x1(%rax), %esi
    00000194: 	movl	%eax, 0x5c(%rsp)
    00000198: 	movl	%esi, 0x28(%rsp)
    0000019c: 	leal	0x2(%rax), %esi
    0000019f: 	movl	%esi, 0x20(%rsp)
    000001a3: 	leal	0x3(%rax), %esi
    000001a6: 	movl	%esi, 0x24(%rsp)
    000001aa: 	leal	0x4(%rax), %esi
    000001ad: 	movl	%esi, 0x2c(%rsp)
    000001b1: 	leal	0x5(%rax), %esi
    000001b4: 	movl	%esi, 0x38(%rsp)
    000001b8: 	leal	0x6(%rax), %esi
    000001bb: 	movl	%esi, 0x3c(%rsp)
    000001bf: 	leal	0x7(%rax), %esi
    000001c2: 	addl	$0x8, %eax
    000001c5: 	movl	%eax, 0x64(%rsp)
    000001c9: 	leal	-0x3(%r13), %eax
    000001cd: 	movl	%eax, 0x54(%rsp)
    000001d1: 	addq	%rax, %rax
    000001d4: 	movl	%esi, 0x60(%rsp)
    000001d8: 	movq	%rax, 0xa8(%rsp)
.Ltmp676:
    000001e0: 	movq	0x98(%rsp), %rsi
    000001e8: 	movq	0x88(%rsp), %rcx
    000001f0: 	movq	$-0x4, %rdx
    000001f7: 	movl	0x7c(%rsp), %edi
    000001fb: 	subq	%rbx, %rdx
    000001fe: 	movq	0xa0(%rsp), %rax
    00000206: 	addq	%rbx, %rsi
    00000209: 	movq	%rdx, 0x70(%rsp)
    0000020e: 	movq	%rsi, 0x10(%rsp)
    00000213: 	leaq	(%rbx,%rcx), %rsi
    00000217: 	movq	0xa8(%rsp), %rcx
    0000021f: 	addq	%r11, %rax
    00000222: 	movl	%edi, 0x30(%rsp)
    00000226: 	movq	%r11, %rdi
    00000229: 	subq	%r11, %rcx
    0000022c: 	subq	%rbx, %rdi
    0000022f: 	movq	%rsi, 0x18(%rsp)
    00000234: 	movq	0x80(%rsp), %rsi
    0000023c: 	movq	%rcx, 0x68(%rsp)
    00000241: 	movq	0xb0(%rsp), %rcx
    00000249: 	movq	%rdi, 0x48(%rsp)
    0000024e: 	addq	%rbx, %rsi
    00000251: 	movq	%rcx, 0x40(%rsp)
    00000256: 	movl	0x94(%rsp), %ecx
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp675:
    00000260: 	movl	0x50(%rsp), %edi
    00000264: 	subl	$0x1, 0x30(%rsp)
    00000269: 	cmpq	$0x10, 0x48(%rsp)
    0000026f: 	leal	(%rcx,%rdi), %r8d
    00000273: 	movl	0x34(%rsp), %edi
    00000277: 	seta	%dl
    0000027a: 	cmpl	$0x6, 0x54(%rsp)
    0000027f: 	leal	(%rcx,%rdi), %r9d
    00000283: 	seta	%dil
    00000287: 	andl	%edi, %edx
    00000289: 	movq	%rax, %rdi
    0000028c: 	subq	0x10(%rsp), %rdi
    00000291: 	cmpq	$0xc, %rdi
    00000295: 	seta	%dil
    00000299: 	testb	%dil, %dl
    0000029c: 	je	.Ltmp672 # Offset: 668
    000002a2: 	movq	%rax, %rdx
    000002a5: 	subq	0x18(%rsp), %rdx
    000002aa: 	cmpq	$0xc, %rdx
    000002ae: 	jbe	.Ltmp672 # Offset: 686
    000002b4: 	movq	0x10(%rsp), %rdi
    000002b9: 	leaq	-0x4(%rsi), %r10
    000002bd: 	xorl	%edx, %edx
    000002bf: 	leaq	-0x2(%rdi), %r13
    000002c3: 	movq	0x18(%rsp), %rdi
    000002c8: 	subq	$0x2, %rdi
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp673:
    000002d0: 	movdqu	(%r10,%rdx), %xmm1
    000002d6: 	movdqa	%xmm2, %xmm13
    000002db: 	movdqa	%xmm2, %xmm12
    000002e0: 	movdqu	(%r13,%rdx), %xmm9
    000002e7: 	movdqu	(%rsi,%rdx), %xmm8
    000002ed: 	movdqa	%xmm2, %xmm11
    000002f2: 	movdqu	(%rdi,%rdx), %xmm7
    000002f7: 	pcmpgtw	%xmm9, %xmm13
    000002fc: 	pcmpgtw	%xmm1, %xmm12
    00000301: 	movdqa	%xmm9, %xmm10
    00000306: 	pcmpgtw	%xmm8, %xmm11
    0000030b: 	movdqa	%xmm1, %xmm0
    0000030f: 	movdqa	%xmm7, %xmm14
    00000314: 	punpcklwd	%xmm13, %xmm10
    00000319: 	punpcklwd	%xmm12, %xmm0
    0000031e: 	punpckhwd	%xmm13, %xmm9
    00000323: 	paddd	%xmm10, %xmm0
    00000328: 	movdqa	%xmm8, %xmm10
    0000032d: 	punpckhwd	%xmm12, %xmm1
    00000332: 	punpcklwd	%xmm11, %xmm10
    00000337: 	punpckhwd	%xmm11, %xmm8
    0000033c: 	paddd	%xmm9, %xmm1
    00000341: 	paddd	%xmm10, %xmm0
    00000346: 	movdqa	%xmm2, %xmm10
    0000034b: 	paddd	%xmm8, %xmm1
    00000350: 	pcmpgtw	%xmm7, %xmm10
    00000355: 	movdqa	%xmm3, %xmm8
    0000035a: 	punpckhwd	%xmm10, %xmm7
    0000035f: 	punpcklwd	%xmm10, %xmm14
    00000364: 	paddd	%xmm7, %xmm1
    00000368: 	paddd	%xmm14, %xmm0
    0000036d: 	movdqa	%xmm3, %xmm7
    00000371: 	paddd	%xmm6, %xmm0
    00000375: 	paddd	%xmm6, %xmm1
    00000379: 	pcmpgtd	%xmm0, %xmm8
    0000037e: 	pcmpgtd	%xmm1, %xmm7
    00000382: 	pand	%xmm5, %xmm8
    00000387: 	pand	%xmm5, %xmm7
    0000038b: 	paddd	%xmm8, %xmm0
    00000390: 	paddd	%xmm7, %xmm1
    00000394: 	psrad	$0x2, %xmm1
    00000399: 	psrad	$0x2, %xmm0
    0000039e: 	movdqa	%xmm0, %xmm7
    000003a2: 	punpcklwd	%xmm1, %xmm0
    000003a6: 	punpckhwd	%xmm1, %xmm7
    000003aa: 	movdqa	%xmm0, %xmm1
    000003ae: 	punpckhwd	%xmm7, %xmm1
    000003b2: 	punpcklwd	%xmm7, %xmm0
    000003b6: 	movdqu	(%rax,%rdx), %xmm7
    000003bb: 	punpcklwd	%xmm1, %xmm0
    000003bf: 	psubw	%xmm7, %xmm0
    000003c3: 	movdqa	%xmm0, %xmm7
    000003c7: 	pmulhw	%xmm4, %xmm0
    000003cb: 	pmullw	%xmm4, %xmm7
    000003cf: 	movdqa	%xmm7, %xmm1
    000003d3: 	punpckhwd	%xmm0, %xmm7
    000003d7: 	punpcklwd	%xmm0, %xmm1
    000003db: 	psrad	$0x6, %xmm7
    000003e0: 	psrad	$0x6, %xmm1
    000003e5: 	movdqa	%xmm1, %xmm0
    000003e9: 	movdqa	%xmm1, %xmm8
    000003ee: 	punpcklwd	%xmm7, %xmm0
    000003f2: 	punpckhwd	%xmm7, %xmm8
    000003f7: 	movdqu	(%rax,%rdx), %xmm7
    000003fc: 	movdqa	%xmm0, %xmm1
    00000400: 	punpcklwd	%xmm8, %xmm0
    00000405: 	punpckhwd	%xmm8, %xmm1
    0000040a: 	punpcklwd	%xmm1, %xmm0
    0000040e: 	paddw	%xmm7, %xmm0
    00000412: 	movups	%xmm0, (%rax,%rdx)
    00000416: 	addq	$0x10, %rdx
    0000041a: 	cmpq	%rdx, %r12
    0000041d: 	jne	.Ltmp673 # Offset: 1053
    00000423: 	movl	0x5c(%rsp), %r13d
    00000428: 	cmpl	%r13d, 0x58(%rsp)
    0000042d: 	je	.Ltmp674 # Offset: 1069
    00000433: 	movl	0x28(%rsp), %edi
    00000437: 	leal	(%rdi,%r8), %edx
    0000043b: 	leal	(%rcx,%rdi), %r14d
    0000043f: 	movslq	%edx, %rdx
    00000442: 	movslq	%r14d, %r14
    00000445: 	movswl	(%rbx,%rdx,2), %edi
    00000449: 	leal	(%rcx,%r13), %edx
    0000044d: 	leaq	(%r11,%r14,2), %r15
    00000451: 	movslq	%edx, %rdx
    00000454: 	movswl	(%rbx,%rdx,2), %r10d
    00000459: 	addl	%edi, %r10d
    0000045c: 	movl	0x20(%rsp), %edi
    00000460: 	addl	%ecx, %edi
    00000462: 	movslq	%edi, %rdi
    00000465: 	addq	%rdi, %rdi
    00000468: 	leaq	(%rbx,%rdi), %r13
    0000046c: 	movswl	(%r13), %edx
    00000471: 	addl	%r10d, %edx
    00000474: 	movl	0x28(%rsp), %r10d
    00000479: 	addl	%r9d, %r10d
    0000047c: 	movslq	%r10d, %r10
    0000047f: 	movswl	(%rbx,%r10,2), %r10d
    00000484: 	addl	%edx, %r10d
    00000487: 	leal	0x5(%r10), %edx
    0000048b: 	addl	$0x2, %r10d
    0000048f: 	cmovnsl	%r10d, %edx
    00000493: 	sarl	$0x2, %edx
    00000496: 	subw	(%r15), %dx
    0000049a: 	movswl	%dx, %edx
    0000049d: 	imull	$0x71, %edx, %edx
    000004a0: 	sarl	$0x6, %edx
    000004a3: 	addw	(%r15), %dx
    000004a7: 	movw	%dx, (%r15)
    000004ab: 	movl	0x20(%rsp), %r15d
    000004b0: 	cmpl	0x8(%rsp), %r15d
    000004b5: 	jge	.Ltmp674 # Offset: 1205
    000004bb: 	leal	(%r15,%r8), %edx
    000004bf: 	movswl	(%rbx,%r14,2), %r15d
    000004c4: 	movl	0x24(%rsp), %r14d
    000004c9: 	addq	%r11, %rdi
    000004cc: 	movslq	%edx, %rdx
    000004cf: 	leal	(%rcx,%r14), %r10d
    000004d3: 	movswl	(%rbx,%rdx,2), %edx
    000004d7: 	movslq	%r10d, %r10
    000004da: 	addq	%r10, %r10
    000004dd: 	addl	%edx, %r15d
    000004e0: 	leaq	(%rbx,%r10), %r14
    000004e4: 	movswl	(%r14), %edx
    000004e8: 	addl	%r15d, %edx
    000004eb: 	movl	0x20(%rsp), %r15d
    000004f0: 	addl	%r9d, %r15d
    000004f3: 	movslq	%r15d, %r15
    000004f6: 	movswl	(%rbx,%r15,2), %r15d
    000004fb: 	addl	%edx, %r15d
    000004fe: 	leal	0x5(%r15), %edx
    00000502: 	addl	$0x2, %r15d
    00000506: 	cmovnsl	%r15d, %edx
    0000050a: 	movl	0x24(%rsp), %r15d
    0000050f: 	sarl	$0x2, %edx
    00000512: 	subw	(%rdi), %dx
    00000515: 	movswl	%dx, %edx
    00000518: 	imull	$0x71, %edx, %edx
    0000051b: 	sarl	$0x6, %edx
    0000051e: 	addw	(%rdi), %dx
    00000521: 	movw	%dx, (%rdi)
    00000524: 	cmpl	%r15d, 0x8(%rsp)
    00000529: 	jle	.Ltmp674 # Offset: 1321
    0000052f: 	leal	(%r15,%r8), %edx
    00000533: 	movswl	(%r13), %r15d
    00000538: 	movl	0x2c(%rsp), %r13d
    0000053d: 	addq	%r11, %r10
    00000540: 	movslq	%edx, %rdx
    00000543: 	leal	(%rcx,%r13), %edi
    00000547: 	movswl	(%rbx,%rdx,2), %edx
    0000054b: 	movslq	%edi, %rdi
    0000054e: 	addq	%rdi, %rdi
    00000551: 	addl	%edx, %r15d
    00000554: 	leaq	(%rbx,%rdi), %r13
    00000558: 	movswl	(%r13), %edx
    0000055d: 	addl	%r15d, %edx
    00000560: 	movl	0x24(%rsp), %r15d
    00000565: 	addl	%r9d, %r15d
    00000568: 	movslq	%r15d, %r15
    0000056b: 	movswl	(%rbx,%r15,2), %r15d
    00000570: 	addl	%edx, %r15d
    00000573: 	leal	0x5(%r15), %edx
    00000577: 	addl	$0x2, %r15d
    0000057b: 	cmovnsl	%r15d, %edx
    0000057f: 	sarl	$0x2, %edx
    00000582: 	subw	(%r10), %dx
    00000586: 	movswl	%dx, %edx
    00000589: 	imull	$0x71, %edx, %edx
    0000058c: 	sarl	$0x6, %edx
    0000058f: 	addw	(%r10), %dx
    00000593: 	movw	%dx, (%r10)
    00000597: 	movl	0x2c(%rsp), %r10d
    0000059c: 	cmpl	%r10d, 0x8(%rsp)
    000005a1: 	jle	.Ltmp674 # Offset: 1441
    000005a7: 	movswl	(%r14), %r15d
    000005ab: 	movl	0x38(%rsp), %r14d
    000005b0: 	leal	(%r10,%r8), %edx
    000005b4: 	addq	%r11, %rdi
    000005b7: 	movslq	%edx, %rdx
    000005ba: 	leal	(%rcx,%r14), %r10d
    000005be: 	movswl	(%rbx,%rdx,2), %edx
    000005c2: 	movslq	%r10d, %r10
    000005c5: 	addq	%r10, %r10
    000005c8: 	addl	%edx, %r15d
    000005cb: 	leaq	(%rbx,%r10), %r14
    000005cf: 	movswl	(%r14), %edx
    000005d3: 	addl	%r15d, %edx
    000005d6: 	movl	0x2c(%rsp), %r15d
    000005db: 	addl	%r9d, %r15d
    000005de: 	movslq	%r15d, %r15
    000005e1: 	movswl	(%rbx,%r15,2), %r15d
    000005e6: 	addl	%edx, %r15d
    000005e9: 	leal	0x5(%r15), %edx
    000005ed: 	addl	$0x2, %r15d
    000005f1: 	cmovnsl	%r15d, %edx
    000005f5: 	movl	0x38(%rsp), %r15d
    000005fa: 	sarl	$0x2, %edx
    000005fd: 	subw	(%rdi), %dx
    00000600: 	movswl	%dx, %edx
    00000603: 	imull	$0x71, %edx, %edx
    00000606: 	sarl	$0x6, %edx
    00000609: 	addw	(%rdi), %dx
    0000060c: 	movw	%dx, (%rdi)
    0000060f: 	cmpl	%r15d, 0x8(%rsp)
    00000614: 	jle	.Ltmp674 # Offset: 1556
    0000061a: 	movl	0x3c(%rsp), %edi
    0000061e: 	leal	(%r15,%r8), %edx
    00000622: 	movswl	(%r13), %r13d
    00000627: 	addq	%r11, %r10
    0000062a: 	movslq	%edx, %rdx
    0000062d: 	addl	%ecx, %edi
    0000062f: 	movswl	(%rbx,%rdx,2), %edx
    00000633: 	movslq	%edi, %rdi
    00000636: 	addq	%rdi, %rdi
    00000639: 	addl	%edx, %r13d
    0000063c: 	leaq	(%rbx,%rdi), %r15
    00000640: 	movswl	(%r15), %edx
    00000644: 	addl	%r13d, %edx
    00000647: 	movl	0x38(%rsp), %r13d
    0000064c: 	addl	%r9d, %r13d
    0000064f: 	movslq	%r13d, %r13
    00000652: 	movswl	(%rbx,%r13,2), %r13d
    00000657: 	addl	%edx, %r13d
    0000065a: 	leal	0x5(%r13), %edx
    0000065e: 	addl	$0x2, %r13d
    00000662: 	cmovnsl	%r13d, %edx
    00000666: 	sarl	$0x2, %edx
    00000669: 	subw	(%r10), %dx
    0000066d: 	movswl	%dx, %edx
    00000670: 	imull	$0x71, %edx, %edx
    00000673: 	sarl	$0x6, %edx
    00000676: 	addw	(%r10), %dx
    0000067a: 	movw	%dx, (%r10)
    0000067e: 	movl	0x3c(%rsp), %r10d
    00000683: 	cmpl	%r10d, 0x8(%rsp)
    00000688: 	jle	.Ltmp674 # Offset: 1672
    0000068e: 	leal	(%r10,%r8), %edx
    00000692: 	movswl	(%r14), %r10d
    00000696: 	movl	0x60(%rsp), %r14d
    0000069b: 	addq	%r11, %rdi
    0000069e: 	movslq	%edx, %rdx
    000006a1: 	movswl	(%rbx,%rdx,2), %edx
    000006a5: 	addl	%edx, %r10d
    000006a8: 	leal	(%rcx,%r14), %edx
    000006ac: 	movslq	%edx, %rdx
    000006af: 	leaq	(%rdx,%rdx), %r13
    000006b3: 	movswl	(%rbx,%rdx,2), %edx
    000006b7: 	addl	%r10d, %edx
    000006ba: 	movl	0x3c(%rsp), %r10d
    000006bf: 	addl	%r9d, %r10d
    000006c2: 	movslq	%r10d, %r10
    000006c5: 	movswl	(%rbx,%r10,2), %r10d
    000006ca: 	addl	%edx, %r10d
    000006cd: 	leal	0x5(%r10), %edx
    000006d1: 	addl	$0x2, %r10d
    000006d5: 	cmovnsl	%r10d, %edx
    000006d9: 	sarl	$0x2, %edx
    000006dc: 	subw	(%rdi), %dx
    000006df: 	movswl	%dx, %edx
    000006e2: 	imull	$0x71, %edx, %edx
    000006e5: 	sarl	$0x6, %edx
    000006e8: 	addw	(%rdi), %dx
    000006eb: 	movw	%dx, (%rdi)
    000006ee: 	cmpl	%r14d, 0x8(%rsp)
    000006f3: 	jle	.Ltmp674 # Offset: 1779
    000006f5: 	addl	%r14d, %r8d
    000006f8: 	movswl	(%r15), %edi
    000006fc: 	addl	%r14d, %r9d
    000006ff: 	addq	%r11, %r13
    00000702: 	movslq	%r8d, %r8
    00000705: 	movslq	%r9d, %r9
    00000708: 	movswl	(%rbx,%r8,2), %edx
    0000070d: 	addl	%edx, %edi
    0000070f: 	movl	0x64(%rsp), %edx
    00000713: 	addl	%ecx, %edx
    00000715: 	movslq	%edx, %rdx
    00000718: 	movswl	(%rbx,%rdx,2), %edx
    0000071c: 	addl	%edi, %edx
    0000071e: 	movswl	(%rbx,%r9,2), %edi
    00000723: 	addl	%edx, %edi
    00000725: 	leal	0x5(%rdi), %edx
    00000728: 	addl	$0x2, %edi
    0000072b: 	cmovnsl	%edi, %edx
    0000072e: 	sarl	$0x2, %edx
    00000731: 	subw	(%r13), %dx
    00000736: 	movswl	%dx, %edx
    00000739: 	imull	$0x71, %edx, %edx
    0000073c: 	sarl	$0x6, %edx
    0000073f: 	addw	(%r13), %dx
    00000744: 	movw	%dx, (%r13)
.Ltmp674:
    00000749: 	movl	0x30(%rsp), %edx
    0000074d: 	addq	%rbp, 0x10(%rsp)
    00000752: 	addq	%rbp, %rax
    00000755: 	addq	%rbp, %rsi
    00000758: 	addq	%rbp, 0x18(%rsp)
    0000075d: 	subl	0x34(%rsp), %ecx
    00000761: 	subq	%rbp, 0x40(%rsp)
    00000766: 	testl	%edx, %edx
    00000768: 	jne	.Ltmp675 # Offset: 1896
    0000076e: 	addl	$0x1, 0x78(%rsp)
    00000773: 	movq	%r11, %rax
    00000776: 	movl	0x78(%rsp), %esi
    0000077a: 	movq	%rbx, %r11
    0000077d: 	cmpl	0x90(%rsp), %esi
    00000784: 	je	.Ltmp671 # Offset: 1924
    0000078a: 	movq	%rax, %rbx
    0000078d: 	jmp	.Ltmp676 # Offset: 1933
    00000792: 	nopw	(%rax,%rax) # Size: 6
.Ltmp672:
    00000798: 	movq	0x68(%rsp), %rdx
    0000079d: 	movq	0x70(%rsp), %rdi
    000007a2: 	leaq	(%rax,%rdx), %r13
    000007a6: 	movq	0x10(%rsp), %rdx
    000007ab: 	leaq	(%rdi,%rsi), %r8
    000007af: 	leaq	(%rdi,%rdx), %r10
    000007b3: 	movq	0x18(%rsp), %rdx
    000007b8: 	leaq	(%rdi,%rdx), %r9
    000007bc: 	movq	0x40(%rsp), %rdi
    000007c1: 	addq	%rdi, %r10
    000007c4: 	addq	%rdi, %r9
    000007c7: 	addq	%rbx, %r10
    000007ca: 	addq	%rbx, %r9
    000007cd: 	nopl	(%rax) # Size: 3
.Ltmp677:
    000007d0: 	movswl	0x2(%r10,%r8), %edx
    000007d6: 	movswl	(%rbx,%r8), %edi
    000007db: 	addl	%edx, %edi
    000007dd: 	movswl	0x4(%rbx,%r8), %edx
    000007e3: 	addl	%edi, %edx
    000007e5: 	movswl	0x2(%r9,%r8), %edi
    000007eb: 	addl	%edx, %edi
    000007ed: 	leal	0x5(%rdi), %edx
    000007f0: 	addl	$0x2, %edi
    000007f3: 	cmovnsl	%edi, %edx
    000007f6: 	sarl	$0x2, %edx
    000007f9: 	subw	0x2(%r11,%r8), %dx
    000007ff: 	movswl	%dx, %edx
    00000802: 	imull	$0x71, %edx, %edx
    00000805: 	sarl	$0x6, %edx
    00000808: 	addw	0x2(%r11,%r8), %dx
    0000080e: 	movw	%dx, 0x2(%r11,%r8)
    00000814: 	addq	$0x2, %r8
    00000818: 	cmpq	%r13, %r8
    0000081b: 	jne	.Ltmp677 # Offset: 2075
    0000081d: 	jmp	.Ltmp674 # Offset: 2077
.Ltmp671:
    00000822: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000829: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000830: 	subq	$0x20, %rax
    00000834: 	cmpq	%rax, %rbx
    00000837: 	je	.Ltmp678 # Offset: 2103
    0000083d: 	movq	0xb8(%rsp), %rax
    00000845: 	leaq	0x10(%rbx), %rdi
    00000849: 	movq	%rdi, (%rbx)
    0000084c: 	movq	(%rax), %rbp
    0000084f: 	movq	0x8(%rax), %r12
    00000853: 	movq	%rbp, %rax
    00000856: 	addq	%r12, %rax
    00000859: 	je	.Ltmp679 # Offset: 2137
    0000085b: 	testq	%rbp, %rbp
    0000085e: 	je	.Ltmp680 # Offset: 2142
.Ltmp679:
    00000864: 	movq	%r12, 0xc8(%rsp)
    0000086c: 	cmpq	$0xf, %r12
    00000870: 	ja	.Ltmp681 # Offset: 2160
    00000876: 	cmpq	$0x1, %r12
    0000087a: 	jne	.Ltmp682 # Offset: 2170
    00000880: 	movzbl	(%rbp), %eax
    00000884: 	movb	%al, 0x10(%rbx)
.Ltmp685:
    00000887: 	movq	%r12, 0x8(%rbx)
    0000088b: 	movb	$0x0, (%rdi,%r12)
    00000890: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000897: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000089e: 	addq	$0x20, %rax
    000008a2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000008a9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000008b0: 	je	.Ltmp683 # Offset: 2224
.Ltmp686:
    000008b6: 	movq	-0x20(%rax), %rbp
    000008ba: 	callq	clock@PLT # Offset: 2234
    000008bf: 	movq	%rax, end_time(%rip)
    000008c6: 	movq	0xd8(%rsp), %rdx
    000008ce: 	subq	%fs:0x28, %rdx
    000008d7: 	jne	.Ltmp684 # Offset: 2263
    000008dd: 	subq	start_time(%rip), %rax
    000008e4: 	pxor	%xmm0, %xmm0
    000008e8: 	movq	%rbp, %rdi
    000008eb: 	cvtsi2sd	%rax, %xmm0
    000008f0: 	divsd	DATAat0x49520(%rip), %xmm0
    000008f8: 	addq	$0xe8, %rsp
    000008ff: 	popq	%rbx
    00000900: 	popq	%rbp
    00000901: 	popq	%r12
    00000903: 	popq	%r13
    00000905: 	popq	%r14
    00000907: 	popq	%r15
    00000909: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2313
.Ltmp681:
    0000090e: 	movq	%rbx, %rdi
    00000911: 	leaq	0xc8(%rsp), %rsi
    00000919: 	xorl	%edx, %edx
    0000091b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2331
    00000920: 	movq	%rax, (%rbx)
    00000923: 	movq	%rax, %rdi
    00000926: 	movq	0xc8(%rsp), %rax
    0000092e: 	movq	%rax, 0x10(%rbx)
.Ltmp687:
    00000932: 	movq	%r12, %rdx
    00000935: 	movq	%rbp, %rsi
    00000938: 	callq	memcpy@PLT # Offset: 2360
    0000093d: 	movq	0xc8(%rsp), %r12
    00000945: 	movq	(%rbx), %rdi
    00000948: 	jmp	.Ltmp685 # Offset: 2376
.Ltmp678:
    0000094d: 	movq	0xb8(%rsp), %rsi
    00000955: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000095c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2396
    00000961: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000968: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000096f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000976: 	jne	.Ltmp686 # Offset: 2422
.Ltmp683:
    0000097c: 	movq	-0x8(%rdx), %rax
    00000980: 	addq	$0x200, %rax
    00000986: 	jmp	.Ltmp686 # Offset: 2438
.Ltmp682:
    0000098b: 	testq	%r12, %r12
    0000098e: 	je	.Ltmp685 # Offset: 2446
    00000994: 	jmp	.Ltmp687 # Offset: 2452
.Ltmp684:
    00000996: 	callq	__stack_chk_fail@PLT # Offset: 2454
.Ltmp680:
    0000099b: 	leaq	DATAat0x49008(%rip), %rdi
    000009a2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2466
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x1bb90
  Size        : 0x904
  MaxSize     : 0x910
  Offset      : 0x1bb90
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%ecx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	movl	%r13d, %edx
    00000018: 	pushq	%rbx
    00000019: 	movl	%ebp, %esi
    0000001b: 	subq	$0xc8, %rsp
    00000022: 	movl	%r8d, 0x3c(%rsp)
    00000027: 	leaq	0xb0(%rsp), %rcx
    0000002f: 	movq	%r9, 0x98(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0xb8(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movq	DATAat0x49530(%rip), %rax
    00000051: 	movq	%rdi, 0x8(%rsp)
    00000056: 	movq	%rax, 0xb0(%rsp)
    0000005e: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 94
    00000063: 	movl	%ebp, %eax
    00000065: 	movq	0x8(%rsp), %r11
    0000006a: 	imull	%r13d, %eax
    0000006e: 	testl	%eax, %eax
    00000070: 	jle	.Ltmp688 # Offset: 112
    00000072: 	cltq
    00000074: 	movq	%r11, %rsi
    00000077: 	movq	%r12, %rdi
    0000007a: 	leaq	(%rax,%rax), %rdx
    0000007e: 	callq	memmove@PLT # Offset: 126
    00000083: 	movq	0x8(%rsp), %r11
.Ltmp688:
    00000088: 	movq	%r11, 0x20(%rsp)
    0000008d: 	callq	clock@PLT # Offset: 141
    00000092: 	movq	%rax, start_time(%rip)
    00000099: 	movl	iterations(%rip), %eax
    0000009f: 	movl	%eax, 0x8c(%rsp)
    000000a6: 	testl	%eax, %eax
    000000a8: 	jle	.Ltmp689 # Offset: 168
    000000ae: 	leal	-0x1(%rbp), %eax
    000000b1: 	leal	-0x1(%r13), %ebx
    000000b5: 	movl	%eax, 0x5c(%rsp)
    000000b9: 	movl	%ebx, 0x8(%rsp)
    000000bd: 	cmpl	$0x1, %eax
    000000c0: 	jle	.Ltmp689 # Offset: 192
    000000c6: 	cmpl	$0x1, %ebx
    000000c9: 	jle	.Ltmp689 # Offset: 201
    000000cf: 	movslq	0x3c(%rsp), %rax
    000000d4: 	leal	-0x2(%r13), %edi
    000000d8: 	movl	$0x0, 0x88(%rsp)
    000000e3: 	movl	%edi, 0x6c(%rsp)
    000000e7: 	movdqa	DATAat0x49440(%rip), %xmm6
    000000ef: 	leaq	(%rax,%rax), %rbp
    000000f3: 	shlq	$0x2, %rax
    000000f7: 	movq	0x20(%rsp), %r11
    000000fc: 	movdqa	DATAat0x49450(%rip), %xmm5
    00000104: 	movq	%rax, 0x40(%rsp)
    00000109: 	movl	%edi, %eax
    0000010b: 	movq	%rbp, %rbx
    0000010e: 	movdqa	DATAat0x49460(%rip), %xmm4
    00000116: 	shrl	$0x3, %eax
    00000119: 	negq	%rbx
    0000011c: 	subl	$0x1, %eax
    0000011f: 	movq	%rbx, 0x90(%rsp)
    00000127: 	addq	$0x1, %rax
    0000012b: 	shlq	$0x4, %rax
    0000012f: 	movq	%rax, %rbx
    00000132: 	movl	%edi, %eax
    00000134: 	andl	$-0x8, %eax
    00000137: 	leal	0x1(%rax), %edi
    0000013a: 	movl	%eax, 0x38(%rsp)
    0000013e: 	movl	%edi, 0x18(%rsp)
    00000142: 	leal	0x2(%rax), %edi
    00000145: 	movl	%edi, 0x10(%rsp)
    00000149: 	leal	0x3(%rax), %edi
    0000014c: 	movl	%edi, 0x14(%rsp)
    00000150: 	leal	0x4(%rax), %edi
    00000153: 	movl	%edi, 0x1c(%rsp)
    00000157: 	leal	0x5(%rax), %edi
    0000015a: 	movl	%edi, 0x28(%rsp)
    0000015e: 	leal	0x6(%rax), %edi
    00000161: 	movl	%edi, 0x2c(%rsp)
    00000165: 	leal	0x7(%rax), %edi
    00000168: 	addl	$0x8, %eax
    0000016b: 	movl	%eax, 0x74(%rsp)
    0000016f: 	leal	-0x3(%r13), %eax
    00000173: 	movl	%eax, 0x68(%rsp)
    00000177: 	leaq	0x2(%rax,%rax), %rax
    0000017c: 	movl	%edi, 0x70(%rsp)
    00000180: 	movq	%rax, 0x80(%rsp)
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp694:
    00000190: 	movq	0x90(%rsp), %rax
    00000198: 	leaq	0x2(%r12), %rdi
    0000019d: 	leaq	0x4(%r11), %rcx
    000001a1: 	movq	%rbp, %rdx
    000001a4: 	movl	$0x1, 0x20(%rsp)
    000001ac: 	movq	%rax, 0x30(%rsp)
    000001b1: 	movl	0x3c(%rsp), %eax
    000001b5: 	movq	%rdi, 0x50(%rsp)
    000001ba: 	movl	%eax, %r9d
    000001bd: 	addl	%eax, %eax
    000001bf: 	movl	%eax, 0x58(%rsp)
    000001c3: 	movq	%r12, %rax
    000001c6: 	subq	%r11, %rax
    000001c9: 	movq	%rax, 0x48(%rsp)
    000001ce: 	movq	0x40(%rsp), %rax
    000001d3: 	subq	$0x2, %rax
    000001d7: 	movq	%rax, 0x60(%rsp)
    000001dc: 	movq	$-0x4, %rax
    000001e3: 	subq	%r11, %rax
    000001e6: 	movq	%rax, 0x78(%rsp)
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp693:
    000001f0: 	movl	0x58(%rsp), %eax
    000001f4: 	movl	%r9d, %r8d
    000001f7: 	subl	0x3c(%rsp), %r8d
    000001fc: 	movl	%r9d, %edi
    000001ff: 	addl	$0x1, 0x20(%rsp)
    00000204: 	cmpq	$0x10, 0x48(%rsp)
    0000020a: 	leal	(%rax,%r8), %r9d
    0000020e: 	movq	0x50(%rsp), %rax
    00000213: 	leaq	(%rax,%rdx), %rsi
    00000217: 	movq	0x40(%rsp), %rax
    0000021c: 	leaq	(%rax,%rcx), %r10
    00000220: 	seta	%al
    00000223: 	cmpl	$0x6, 0x68(%rsp)
    00000228: 	seta	%r13b
    0000022c: 	andl	%r13d, %eax
    0000022f: 	movq	%rsi, %r13
    00000232: 	subq	%rcx, %r13
    00000235: 	cmpq	$0xc, %r13
    00000239: 	seta	%r13b
    0000023d: 	testb	%r13b, %al
    00000240: 	je	.Ltmp690 # Offset: 576
    00000246: 	movq	%rsi, %rax
    00000249: 	subq	%r10, %rax
    0000024c: 	cmpq	$0xc, %rax
    00000250: 	jbe	.Ltmp690 # Offset: 592
    00000256: 	movq	%r10, %r13
    00000259: 	leaq	-0x2(%rcx), %r15
    0000025d: 	leaq	(%r11,%rdx), %r14
    00000261: 	addq	0x60(%rsp), %rcx
    00000266: 	subq	%rbp, %r13
    00000269: 	pxor	%xmm2, %xmm2
    0000026d: 	pxor	%xmm3, %xmm3
    00000271: 	xorl	%eax, %eax
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp691:
    00000278: 	movdqu	(%r15,%rax), %xmm9
    0000027e: 	movdqu	(%r14,%rax), %xmm1
    00000284: 	movdqa	%xmm2, %xmm13
    00000289: 	movdqa	%xmm2, %xmm12
    0000028e: 	movdqu	(%r13,%rax), %xmm8
    00000295: 	movdqa	%xmm2, %xmm11
    0000029a: 	movdqu	(%rcx,%rax), %xmm7
    0000029f: 	pcmpgtw	%xmm9, %xmm13
    000002a4: 	pcmpgtw	%xmm1, %xmm12
    000002a9: 	movdqa	%xmm9, %xmm10
    000002ae: 	pcmpgtw	%xmm8, %xmm11
    000002b3: 	movdqa	%xmm1, %xmm0
    000002b7: 	movdqa	%xmm7, %xmm14
    000002bc: 	punpcklwd	%xmm13, %xmm10
    000002c1: 	punpcklwd	%xmm12, %xmm0
    000002c6: 	punpckhwd	%xmm13, %xmm9
    000002cb: 	paddd	%xmm10, %xmm0
    000002d0: 	movdqa	%xmm8, %xmm10
    000002d5: 	punpckhwd	%xmm12, %xmm1
    000002da: 	punpcklwd	%xmm11, %xmm10
    000002df: 	punpckhwd	%xmm11, %xmm8
    000002e4: 	paddd	%xmm9, %xmm1
    000002e9: 	paddd	%xmm10, %xmm0
    000002ee: 	movdqa	%xmm2, %xmm10
    000002f3: 	paddd	%xmm8, %xmm1
    000002f8: 	pcmpgtw	%xmm7, %xmm10
    000002fd: 	movdqa	%xmm3, %xmm8
    00000302: 	punpckhwd	%xmm10, %xmm7
    00000307: 	punpcklwd	%xmm10, %xmm14
    0000030c: 	paddd	%xmm7, %xmm1
    00000310: 	paddd	%xmm14, %xmm0
    00000315: 	movdqa	%xmm3, %xmm7
    00000319: 	paddd	%xmm6, %xmm0
    0000031d: 	paddd	%xmm6, %xmm1
    00000321: 	pcmpgtd	%xmm0, %xmm8
    00000326: 	pcmpgtd	%xmm1, %xmm7
    0000032a: 	pand	%xmm5, %xmm8
    0000032f: 	pand	%xmm5, %xmm7
    00000333: 	paddd	%xmm8, %xmm0
    00000338: 	paddd	%xmm7, %xmm1
    0000033c: 	psrad	$0x2, %xmm1
    00000341: 	psrad	$0x2, %xmm0
    00000346: 	movdqa	%xmm0, %xmm7
    0000034a: 	punpcklwd	%xmm1, %xmm0
    0000034e: 	punpckhwd	%xmm1, %xmm7
    00000352: 	movdqa	%xmm0, %xmm1
    00000356: 	punpckhwd	%xmm7, %xmm1
    0000035a: 	punpcklwd	%xmm7, %xmm0
    0000035e: 	movdqu	(%rsi,%rax), %xmm7
    00000363: 	punpcklwd	%xmm1, %xmm0
    00000367: 	psubw	%xmm7, %xmm0
    0000036b: 	movdqa	%xmm0, %xmm7
    0000036f: 	pmulhw	%xmm4, %xmm0
    00000373: 	pmullw	%xmm4, %xmm7
    00000377: 	movdqa	%xmm7, %xmm1
    0000037b: 	punpckhwd	%xmm0, %xmm7
    0000037f: 	punpcklwd	%xmm0, %xmm1
    00000383: 	psrad	$0x6, %xmm7
    00000388: 	psrad	$0x6, %xmm1
    0000038d: 	movdqa	%xmm1, %xmm0
    00000391: 	movdqa	%xmm1, %xmm8
    00000396: 	punpcklwd	%xmm7, %xmm0
    0000039a: 	punpckhwd	%xmm7, %xmm8
    0000039f: 	movdqu	(%rsi,%rax), %xmm7
    000003a4: 	movdqa	%xmm0, %xmm1
    000003a8: 	punpcklwd	%xmm8, %xmm0
    000003ad: 	punpckhwd	%xmm8, %xmm1
    000003b2: 	punpcklwd	%xmm1, %xmm0
    000003b6: 	paddw	%xmm7, %xmm0
    000003ba: 	movups	%xmm0, (%rsi,%rax)
    000003be: 	addq	$0x10, %rax
    000003c2: 	cmpq	%rax, %rbx
    000003c5: 	jne	.Ltmp691 # Offset: 965
    000003cb: 	movl	0x38(%rsp), %esi
    000003cf: 	cmpl	%esi, 0x6c(%rsp)
    000003d3: 	je	.Ltmp692 # Offset: 979
    000003d9: 	movl	0x18(%rsp), %eax
    000003dd: 	leal	(%rdi,%rax), %r14d
    000003e1: 	addl	%r8d, %eax
    000003e4: 	cltq
    000003e6: 	movslq	%r14d, %r14
    000003e9: 	movswl	(%r11,%rax,2), %ecx
    000003ee: 	leal	(%rdi,%rsi), %eax
    000003f1: 	leaq	(%r12,%r14,2), %r15
    000003f5: 	cltq
    000003f7: 	movswl	(%r11,%rax,2), %esi
    000003fc: 	addl	%ecx, %esi
    000003fe: 	movl	0x10(%rsp), %ecx
    00000402: 	addl	%edi, %ecx
    00000404: 	movslq	%ecx, %rcx
    00000407: 	addq	%rcx, %rcx
    0000040a: 	leaq	(%r11,%rcx), %r13
    0000040e: 	movswl	(%r13), %eax
    00000413: 	addl	%esi, %eax
    00000415: 	movl	0x18(%rsp), %esi
    00000419: 	addl	%r9d, %esi
    0000041c: 	movslq	%esi, %rsi
    0000041f: 	movswl	(%r11,%rsi,2), %esi
    00000424: 	addl	%eax, %esi
    00000426: 	leal	0x5(%rsi), %eax
    00000429: 	addl	$0x2, %esi
    0000042c: 	cmovnsl	%esi, %eax
    0000042f: 	sarl	$0x2, %eax
    00000432: 	subw	(%r15), %ax
    00000436: 	cwtl
    00000437: 	imull	$0x71, %eax, %eax
    0000043a: 	sarl	$0x6, %eax
    0000043d: 	addw	(%r15), %ax
    00000441: 	movw	%ax, (%r15)
    00000445: 	movl	0x10(%rsp), %eax
    00000449: 	cmpl	0x8(%rsp), %eax
    0000044d: 	jge	.Ltmp692 # Offset: 1101
    00000453: 	movl	0x14(%rsp), %esi
    00000457: 	addl	%r8d, %eax
    0000045a: 	movswl	(%r11,%r14,2), %r15d
    0000045f: 	addq	%r12, %rcx
    00000462: 	cltq
    00000464: 	addl	%edi, %esi
    00000466: 	movswl	(%r11,%rax,2), %eax
    0000046b: 	movslq	%esi, %rsi
    0000046e: 	addq	%rsi, %rsi
    00000471: 	addl	%eax, %r15d
    00000474: 	leaq	(%r11,%rsi), %r14
    00000478: 	movswl	(%r14), %eax
    0000047c: 	addl	%r15d, %eax
    0000047f: 	movl	0x10(%rsp), %r15d
    00000484: 	addl	%r9d, %r15d
    00000487: 	movslq	%r15d, %r15
    0000048a: 	movswl	(%r11,%r15,2), %r15d
    0000048f: 	addl	%eax, %r15d
    00000492: 	leal	0x5(%r15), %eax
    00000496: 	addl	$0x2, %r15d
    0000049a: 	cmovnsl	%r15d, %eax
    0000049e: 	sarl	$0x2, %eax
    000004a1: 	subw	(%rcx), %ax
    000004a4: 	cwtl
    000004a5: 	imull	$0x71, %eax, %eax
    000004a8: 	sarl	$0x6, %eax
    000004ab: 	addw	(%rcx), %ax
    000004ae: 	movw	%ax, (%rcx)
    000004b1: 	movl	0x14(%rsp), %eax
    000004b5: 	cmpl	%eax, 0x8(%rsp)
    000004b9: 	jle	.Ltmp692 # Offset: 1209
    000004bf: 	movl	0x1c(%rsp), %ecx
    000004c3: 	addl	%r8d, %eax
    000004c6: 	movswl	(%r13), %r15d
    000004cb: 	addq	%r12, %rsi
    000004ce: 	cltq
    000004d0: 	addl	%edi, %ecx
    000004d2: 	movswl	(%r11,%rax,2), %eax
    000004d7: 	movslq	%ecx, %rcx
    000004da: 	addq	%rcx, %rcx
    000004dd: 	addl	%eax, %r15d
    000004e0: 	leaq	(%r11,%rcx), %r13
    000004e4: 	movswl	(%r13), %eax
    000004e9: 	addl	%r15d, %eax
    000004ec: 	movl	0x14(%rsp), %r15d
    000004f1: 	addl	%r9d, %r15d
    000004f4: 	movslq	%r15d, %r15
    000004f7: 	movswl	(%r11,%r15,2), %r15d
    000004fc: 	addl	%eax, %r15d
    000004ff: 	leal	0x5(%r15), %eax
    00000503: 	addl	$0x2, %r15d
    00000507: 	cmovnsl	%r15d, %eax
    0000050b: 	sarl	$0x2, %eax
    0000050e: 	subw	(%rsi), %ax
    00000511: 	cwtl
    00000512: 	imull	$0x71, %eax, %eax
    00000515: 	sarl	$0x6, %eax
    00000518: 	addw	(%rsi), %ax
    0000051b: 	movw	%ax, (%rsi)
    0000051e: 	movl	0x1c(%rsp), %eax
    00000522: 	cmpl	%eax, 0x8(%rsp)
    00000526: 	jle	.Ltmp692 # Offset: 1318
    0000052c: 	movl	0x28(%rsp), %esi
    00000530: 	addl	%r8d, %eax
    00000533: 	movswl	(%r14), %r15d
    00000537: 	addq	%r12, %rcx
    0000053a: 	cltq
    0000053c: 	addl	%edi, %esi
    0000053e: 	movswl	(%r11,%rax,2), %eax
    00000543: 	movslq	%esi, %rsi
    00000546: 	addq	%rsi, %rsi
    00000549: 	addl	%eax, %r15d
    0000054c: 	leaq	(%r11,%rsi), %r14
    00000550: 	movswl	(%r14), %eax
    00000554: 	addl	%r15d, %eax
    00000557: 	movl	0x1c(%rsp), %r15d
    0000055c: 	addl	%r9d, %r15d
    0000055f: 	movslq	%r15d, %r15
    00000562: 	movswl	(%r11,%r15,2), %r15d
    00000567: 	addl	%eax, %r15d
    0000056a: 	leal	0x5(%r15), %eax
    0000056e: 	addl	$0x2, %r15d
    00000572: 	cmovnsl	%r15d, %eax
    00000576: 	sarl	$0x2, %eax
    00000579: 	subw	(%rcx), %ax
    0000057c: 	cwtl
    0000057d: 	imull	$0x71, %eax, %eax
    00000580: 	sarl	$0x6, %eax
    00000583: 	addw	(%rcx), %ax
    00000586: 	movw	%ax, (%rcx)
    00000589: 	movl	0x28(%rsp), %eax
    0000058d: 	cmpl	%eax, 0x8(%rsp)
    00000591: 	jle	.Ltmp692 # Offset: 1425
    00000597: 	movl	0x2c(%rsp), %ecx
    0000059b: 	addl	%r8d, %eax
    0000059e: 	movswl	(%r13), %r13d
    000005a3: 	addq	%r12, %rsi
    000005a6: 	cltq
    000005a8: 	addl	%edi, %ecx
    000005aa: 	movswl	(%r11,%rax,2), %eax
    000005af: 	movslq	%ecx, %rcx
    000005b2: 	addq	%rcx, %rcx
    000005b5: 	addl	%eax, %r13d
    000005b8: 	leaq	(%r11,%rcx), %r15
    000005bc: 	movswl	(%r15), %eax
    000005c0: 	addl	%r13d, %eax
    000005c3: 	movl	0x28(%rsp), %r13d
    000005c8: 	addl	%r9d, %r13d
    000005cb: 	movslq	%r13d, %r13
    000005ce: 	movswl	(%r11,%r13,2), %r13d
    000005d3: 	addl	%eax, %r13d
    000005d6: 	leal	0x5(%r13), %eax
    000005da: 	addl	$0x2, %r13d
    000005de: 	cmovnsl	%r13d, %eax
    000005e2: 	sarl	$0x2, %eax
    000005e5: 	subw	(%rsi), %ax
    000005e8: 	cwtl
    000005e9: 	imull	$0x71, %eax, %eax
    000005ec: 	sarl	$0x6, %eax
    000005ef: 	addw	(%rsi), %ax
    000005f2: 	movw	%ax, (%rsi)
    000005f5: 	movl	0x2c(%rsp), %eax
    000005f9: 	cmpl	%eax, 0x8(%rsp)
    000005fd: 	jle	.Ltmp692 # Offset: 1533
    00000603: 	addl	%r8d, %eax
    00000606: 	movswl	(%r14), %esi
    0000060a: 	movl	0x70(%rsp), %r14d
    0000060f: 	addq	%r12, %rcx
    00000612: 	cltq
    00000614: 	movswl	(%r11,%rax,2), %eax
    00000619: 	addl	%eax, %esi
    0000061b: 	leal	(%rdi,%r14), %eax
    0000061f: 	cltq
    00000621: 	leaq	(%rax,%rax), %r13
    00000625: 	movswl	(%r11,%rax,2), %eax
    0000062a: 	addl	%esi, %eax
    0000062c: 	movl	0x2c(%rsp), %esi
    00000630: 	addl	%r9d, %esi
    00000633: 	movslq	%esi, %rsi
    00000636: 	movswl	(%r11,%rsi,2), %esi
    0000063b: 	addl	%eax, %esi
    0000063d: 	leal	0x5(%rsi), %eax
    00000640: 	addl	$0x2, %esi
    00000643: 	cmovnsl	%esi, %eax
    00000646: 	sarl	$0x2, %eax
    00000649: 	subw	(%rcx), %ax
    0000064c: 	cwtl
    0000064d: 	imull	$0x71, %eax, %eax
    00000650: 	sarl	$0x6, %eax
    00000653: 	addw	(%rcx), %ax
    00000656: 	movw	%ax, (%rcx)
    00000659: 	cmpl	%r14d, 0x8(%rsp)
    0000065e: 	jle	.Ltmp692 # Offset: 1630
    00000660: 	addl	%r14d, %r8d
    00000663: 	movswl	(%r15), %ecx
    00000667: 	addl	0x74(%rsp), %edi
    0000066b: 	addq	%r12, %r13
    0000066e: 	movslq	%r8d, %r8
    00000671: 	movslq	%edi, %rdi
    00000674: 	movswl	(%r11,%r8,2), %eax
    00000679: 	addl	%eax, %ecx
    0000067b: 	movswl	(%r11,%rdi,2), %eax
    00000680: 	addl	%ecx, %eax
    00000682: 	leal	(%r9,%r14), %ecx
    00000686: 	movslq	%ecx, %rcx
    00000689: 	movswl	(%r11,%rcx,2), %ecx
    0000068e: 	addl	%eax, %ecx
    00000690: 	leal	0x5(%rcx), %eax
    00000693: 	addl	$0x2, %ecx
    00000696: 	cmovnsl	%ecx, %eax
    00000699: 	sarl	$0x2, %eax
    0000069c: 	subw	(%r13), %ax
    000006a1: 	cwtl
    000006a2: 	imull	$0x71, %eax, %eax
    000006a5: 	sarl	$0x6, %eax
    000006a8: 	addw	(%r13), %ax
    000006ad: 	movw	%ax, (%r13)
.Ltmp692:
    000006b2: 	leaq	(%rdx,%rbp), %rdi
.Ltmp696:
    000006b6: 	movq	%r10, %rcx
    000006b9: 	movq	%rdi, %rdx
    000006bc: 	subq	%rbp, 0x30(%rsp)
    000006c1: 	movl	0x20(%rsp), %edi
    000006c5: 	subq	%rbp, %rcx
    000006c8: 	cmpl	%edi, 0x5c(%rsp)
    000006cc: 	jne	.Ltmp693 # Offset: 1740
    000006d2: 	addl	$0x1, 0x88(%rsp)
    000006da: 	movq	%r12, %rax
    000006dd: 	movl	0x88(%rsp), %edi
    000006e4: 	movq	%r11, %r12
    000006e7: 	cmpl	0x8c(%rsp), %edi
    000006ee: 	je	.Ltmp689 # Offset: 1774
    000006f4: 	movq	%rax, %r11
    000006f7: 	jmp	.Ltmp694 # Offset: 1783
    000006fc: 	nopl	(%rax) # Size: 4
.Ltmp690:
    00000700: 	movq	0x30(%rsp), %rax
    00000705: 	leaq	(%rdx,%rbp), %rdi
    00000709: 	addq	0x78(%rsp), %rcx
    0000070e: 	movq	0x80(%rsp), %r8
    00000716: 	leaq	(%rdi,%rax), %rsi
    0000071a: 	leaq	(%rcx,%rax), %r13
    0000071e: 	addq	%r11, %rsi
    00000721: 	addq	%rdx, %r8
    00000724: 	addq	%r11, %r13
    00000727: 	nopw	(%rax,%rax) # Size: 9
.Ltmp695:
    00000730: 	movswl	0x2(%r13,%rdx), %eax
    00000736: 	movswl	(%r11,%rdx), %ecx
    0000073b: 	addl	%eax, %ecx
    0000073d: 	movswl	0x4(%r11,%rdx), %eax
    00000743: 	addl	%ecx, %eax
    00000745: 	movswl	0x2(%rsi,%rdx), %ecx
    0000074a: 	addl	%eax, %ecx
    0000074c: 	leal	0x5(%rcx), %eax
    0000074f: 	addl	$0x2, %ecx
    00000752: 	cmovnsl	%ecx, %eax
    00000755: 	sarl	$0x2, %eax
    00000758: 	subw	0x2(%r12,%rdx), %ax
    0000075e: 	cwtl
    0000075f: 	imull	$0x71, %eax, %eax
    00000762: 	sarl	$0x6, %eax
    00000765: 	addw	0x2(%r12,%rdx), %ax
    0000076b: 	movw	%ax, 0x2(%r12,%rdx)
    00000771: 	addq	$0x2, %rdx
    00000775: 	cmpq	%rdx, %r8
    00000778: 	jne	.Ltmp695 # Offset: 1912
    0000077a: 	jmp	.Ltmp696 # Offset: 1914
.Ltmp689:
    0000077f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000786: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000078d: 	subq	$0x20, %rax
    00000791: 	cmpq	%rax, %rbx
    00000794: 	je	.Ltmp697 # Offset: 1940
    0000079a: 	movq	0x98(%rsp), %rax
    000007a2: 	leaq	0x10(%rbx), %rdi
    000007a6: 	movq	%rdi, (%rbx)
    000007a9: 	movq	(%rax), %rbp
    000007ac: 	movq	0x8(%rax), %r12
    000007b0: 	movq	%rbp, %rax
    000007b3: 	addq	%r12, %rax
    000007b6: 	je	.Ltmp698 # Offset: 1974
    000007b8: 	testq	%rbp, %rbp
    000007bb: 	je	.Ltmp699 # Offset: 1979
.Ltmp698:
    000007c1: 	movq	%r12, 0xa8(%rsp)
    000007c9: 	cmpq	$0xf, %r12
    000007cd: 	ja	.Ltmp700 # Offset: 1997
    000007d3: 	cmpq	$0x1, %r12
    000007d7: 	jne	.Ltmp701 # Offset: 2007
    000007dd: 	movzbl	(%rbp), %eax
    000007e1: 	movb	%al, 0x10(%rbx)
.Ltmp704:
    000007e4: 	movq	%r12, 0x8(%rbx)
    000007e8: 	movb	$0x0, (%rdi,%r12)
    000007ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007f4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007fb: 	addq	$0x20, %rax
    000007ff: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000806: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000080d: 	je	.Ltmp702 # Offset: 2061
.Ltmp705:
    00000813: 	movq	-0x20(%rax), %rbp
    00000817: 	callq	clock@PLT # Offset: 2071
    0000081c: 	movq	%rax, end_time(%rip)
    00000823: 	movq	0xb8(%rsp), %rdx
    0000082b: 	subq	%fs:0x28, %rdx
    00000834: 	jne	.Ltmp703 # Offset: 2100
    0000083a: 	subq	start_time(%rip), %rax
    00000841: 	pxor	%xmm0, %xmm0
    00000845: 	movq	%rbp, %rdi
    00000848: 	cvtsi2sd	%rax, %xmm0
    0000084d: 	divsd	DATAat0x49520(%rip), %xmm0
    00000855: 	addq	$0xc8, %rsp
    0000085c: 	popq	%rbx
    0000085d: 	popq	%rbp
    0000085e: 	popq	%r12
    00000860: 	popq	%r13
    00000862: 	popq	%r14
    00000864: 	popq	%r15
    00000866: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2150
.Ltmp700:
    0000086b: 	movq	%rbx, %rdi
    0000086e: 	leaq	0xa8(%rsp), %rsi
    00000876: 	xorl	%edx, %edx
    00000878: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2168
    0000087d: 	movq	%rax, (%rbx)
    00000880: 	movq	%rax, %rdi
    00000883: 	movq	0xa8(%rsp), %rax
    0000088b: 	movq	%rax, 0x10(%rbx)
.Ltmp706:
    0000088f: 	movq	%r12, %rdx
    00000892: 	movq	%rbp, %rsi
    00000895: 	callq	memcpy@PLT # Offset: 2197
    0000089a: 	movq	0xa8(%rsp), %r12
    000008a2: 	movq	(%rbx), %rdi
    000008a5: 	jmp	.Ltmp704 # Offset: 2213
.Ltmp697:
    000008aa: 	movq	0x98(%rsp), %rsi
    000008b2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000008b9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2233
    000008be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000008cc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008d3: 	jne	.Ltmp705 # Offset: 2259
.Ltmp702:
    000008d9: 	movq	-0x8(%rdx), %rax
    000008dd: 	addq	$0x200, %rax
    000008e3: 	jmp	.Ltmp705 # Offset: 2275
.Ltmp701:
    000008e8: 	testq	%r12, %r12
    000008eb: 	je	.Ltmp704 # Offset: 2283
    000008f1: 	jmp	.Ltmp706 # Offset: 2289
.Ltmp703:
    000008f3: 	callq	__stack_chk_fail@PLT # Offset: 2291
.Ltmp699:
    000008f8: 	leaq	DATAat0x49008(%rip), %rdi
    000008ff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2303
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIsi20jacobi_sor2D_swappedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x1c4a0
  Size        : 0x2da
  MaxSize     : 0x2e0
  Offset      : 0x1c4a0
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIsi20jacobi_sor2D_swappedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%edx, %r13d
    00000010: 	movl	%r15d, %edx
    00000013: 	pushq	%r12
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r13d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x48, %rsp
    00000027: 	movq	%r9, 0x18(%rsp)
    0000002c: 	leaq	0x30(%rsp), %rcx
    00000031: 	movq	%fs:0x28, %rax
    0000003a: 	movq	%rax, 0x38(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	movq	DATAat0x49530(%rip), %rax
    00000048: 	movq	%rax, 0x30(%rsp)
    0000004d: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 77
    00000052: 	movl	%r13d, %eax
    00000055: 	imull	%r15d, %eax
    00000059: 	testl	%eax, %eax
    0000005b: 	jle	.Ltmp707 # Offset: 91
    0000005d: 	cltq
    0000005f: 	movq	%rbx, %rsi
    00000062: 	movq	%rbp, %rdi
    00000065: 	leaq	(%rax,%rax), %rdx
    00000069: 	callq	memmove@PLT # Offset: 105
.Ltmp707:
    0000006e: 	callq	clock@PLT # Offset: 110
    00000073: 	movq	%rax, start_time(%rip)
    0000007a: 	movl	iterations(%rip), %eax
    00000080: 	movl	%eax, 0xc(%rsp)
    00000084: 	testl	%eax, %eax
    00000086: 	jle	.Ltmp708 # Offset: 134
    0000008c: 	subl	$0x1, %r15d
    00000090: 	leal	-0x1(%r13), %r10d
    00000094: 	cmpl	$0x1, %r15d
    00000098: 	jle	.Ltmp708 # Offset: 152
    0000009e: 	cmpl	$0x1, %r10d
    000000a2: 	jle	.Ltmp708 # Offset: 162
    000000a8: 	movslq	%r12d, %r9
    000000ab: 	movl	$0x0, 0x8(%rsp)
    000000b3: 	leaq	0x2(%r9,%r9), %rax
    000000b8: 	movq	%r9, %r11
    000000bb: 	leaq	(%r9,%r9), %r8
    000000bf: 	movq	%rax, 0x10(%rsp)
    000000c4: 	negq	%r11
    000000c7: 	addq	%r11, %r11
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp711:
    000000d0: 	movq	0x10(%rsp), %rax
    000000d5: 	leaq	(%rbx,%r8), %r13
    000000d9: 	movl	$0x1, %r12d
    000000df: 	leaq	(%rbp,%rax), %r14
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp710:
    000000e8: 	addl	$0x1, %r12d
    000000ec: 	movq	%r13, %rdx
    000000ef: 	movq	%r14, %rcx
    000000f2: 	movl	$0x1, %esi
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp709:
    00000100: 	movswl	0x2(%rdx,%r11), %eax
    00000106: 	movswl	(%rdx), %edi
    00000109: 	addl	$0x1, %esi
    0000010c: 	addl	%eax, %edi
    0000010e: 	movswl	0x4(%rdx), %eax
    00000112: 	addl	%edi, %eax
    00000114: 	movswl	0x2(%rdx,%r9,2), %edi
    0000011a: 	addl	%eax, %edi
    0000011c: 	leal	0x5(%rdi), %eax
    0000011f: 	addl	$0x2, %edi
    00000122: 	cmovnsl	%edi, %eax
    00000125: 	addq	%r8, %rdx
    00000128: 	sarl	$0x2, %eax
    0000012b: 	subw	(%rcx), %ax
    0000012e: 	cwtl
    0000012f: 	imull	$0x71, %eax, %eax
    00000132: 	sarl	$0x6, %eax
    00000135: 	addw	(%rcx), %ax
    00000138: 	movw	%ax, (%rcx)
    0000013b: 	addq	%r8, %rcx
    0000013e: 	cmpl	%r10d, %esi
    00000141: 	jne	.Ltmp709 # Offset: 321
    00000143: 	addq	$0x2, %r14
    00000147: 	addq	$0x2, %r13
    0000014b: 	cmpl	%r12d, %r15d
    0000014e: 	jne	.Ltmp710 # Offset: 334
    00000150: 	addl	$0x1, 0x8(%rsp)
    00000155: 	movq	%rbp, %rax
    00000158: 	movl	0x8(%rsp), %esi
    0000015c: 	movq	%rbx, %rbp
    0000015f: 	cmpl	0xc(%rsp), %esi
    00000163: 	je	.Ltmp708 # Offset: 355
    00000165: 	movq	%rax, %rbx
    00000168: 	jmp	.Ltmp711 # Offset: 360
.Ltmp708:
    0000016d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000174: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000017b: 	subq	$0x20, %rax
    0000017f: 	cmpq	%rax, %rbx
    00000182: 	je	.Ltmp712 # Offset: 386
    00000188: 	movq	0x18(%rsp), %rax
    0000018d: 	leaq	0x10(%rbx), %rdi
    00000191: 	movq	%rdi, (%rbx)
    00000194: 	movq	(%rax), %rbp
    00000197: 	movq	0x8(%rax), %r12
    0000019b: 	movq	%rbp, %rax
    0000019e: 	addq	%r12, %rax
    000001a1: 	je	.Ltmp713 # Offset: 417
    000001a3: 	testq	%rbp, %rbp
    000001a6: 	je	.Ltmp714 # Offset: 422
.Ltmp713:
    000001ac: 	movq	%r12, 0x28(%rsp)
    000001b1: 	cmpq	$0xf, %r12
    000001b5: 	ja	.Ltmp715 # Offset: 437
    000001bb: 	cmpq	$0x1, %r12
    000001bf: 	jne	.Ltmp716 # Offset: 447
    000001c5: 	movzbl	(%rbp), %eax
    000001c9: 	movb	%al, 0x10(%rbx)
.Ltmp719:
    000001cc: 	movq	%r12, 0x8(%rbx)
    000001d0: 	movb	$0x0, (%rdi,%r12)
    000001d5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001dc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e3: 	addq	$0x20, %rax
    000001e7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ee: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001f5: 	je	.Ltmp717 # Offset: 501
.Ltmp720:
    000001fb: 	movq	-0x20(%rax), %rbp
    000001ff: 	callq	clock@PLT # Offset: 511
    00000204: 	movq	%rax, end_time(%rip)
    0000020b: 	movq	0x38(%rsp), %rdx
    00000210: 	subq	%fs:0x28, %rdx
    00000219: 	jne	.Ltmp718 # Offset: 537
    0000021f: 	subq	start_time(%rip), %rax
    00000226: 	pxor	%xmm0, %xmm0
    0000022a: 	movq	%rbp, %rdi
    0000022d: 	cvtsi2sd	%rax, %xmm0
    00000232: 	divsd	DATAat0x49520(%rip), %xmm0
    0000023a: 	addq	$0x48, %rsp
    0000023e: 	popq	%rbx
    0000023f: 	popq	%rbp
    00000240: 	popq	%r12
    00000242: 	popq	%r13
    00000244: 	popq	%r14
    00000246: 	popq	%r15
    00000248: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 584
.Ltmp715:
    0000024d: 	movq	%rbx, %rdi
    00000250: 	leaq	0x28(%rsp), %rsi
    00000255: 	xorl	%edx, %edx
    00000257: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 599
    0000025c: 	movq	%rax, (%rbx)
    0000025f: 	movq	%rax, %rdi
    00000262: 	movq	0x28(%rsp), %rax
    00000267: 	movq	%rax, 0x10(%rbx)
.Ltmp721:
    0000026b: 	movq	%r12, %rdx
    0000026e: 	movq	%rbp, %rsi
    00000271: 	callq	memcpy@PLT # Offset: 625
    00000276: 	movq	0x28(%rsp), %r12
    0000027b: 	movq	(%rbx), %rdi
    0000027e: 	jmp	.Ltmp719 # Offset: 638
.Ltmp712:
    00000283: 	movq	0x18(%rsp), %rsi
    00000288: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000028f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 655
    00000294: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000029b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a9: 	jne	.Ltmp720 # Offset: 681
.Ltmp717:
    000002af: 	movq	-0x8(%rdx), %rax
    000002b3: 	addq	$0x200, %rax
    000002b9: 	jmp	.Ltmp720 # Offset: 697
.Ltmp716:
    000002be: 	testq	%r12, %r12
    000002c1: 	je	.Ltmp719 # Offset: 705
    000002c7: 	jmp	.Ltmp721 # Offset: 711
.Ltmp718:
    000002c9: 	callq	__stack_chk_fail@PLT # Offset: 713
.Ltmp714:
    000002ce: 	leaq	DATAat0x49008(%rip), %rdi
    000002d5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 725
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIsi20jacobi_sor2D_swappedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14max_differenceIsET_PKS0_S2_m" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x1c780
  Size        : 0x1f2
  MaxSize     : 0x200
  Offset      : 0x1c780
  Section     : .text
  Orc Section : .local.text._Z14max_differenceIsET_PKS0_S2_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp722 # Offset: 10
    00000010: 	leaq	-0x1(%rdx), %rax
    00000014: 	cmpq	$0x6, %rax
    00000018: 	jbe	.Ltmp723 # Offset: 24
    0000001e: 	movq	%rdx, %rsi
    00000021: 	pxor	%xmm2, %xmm2
    00000025: 	xorl	%eax, %eax
    00000027: 	shrq	$0x3, %rsi
    0000002b: 	movdqa	%xmm2, %xmm4
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp724:
    00000038: 	movdqu	(%rcx,%rax), %xmm5
    0000003d: 	movdqu	(%rdi,%rax), %xmm3
    00000042: 	movdqa	%xmm4, %xmm0
    00000046: 	movdqu	(%rdi,%rax), %xmm6
    0000004b: 	addq	$0x10, %rax
    0000004f: 	psubw	%xmm5, %xmm3
    00000053: 	movdqa	%xmm5, %xmm1
    00000057: 	pcmpgtw	%xmm3, %xmm0
    0000005b: 	psubw	%xmm6, %xmm1
    0000005f: 	pand	%xmm0, %xmm1
    00000063: 	pandn	%xmm3, %xmm0
    00000067: 	por	%xmm1, %xmm0
    0000006b: 	pmaxsw	%xmm0, %xmm2
    0000006f: 	cmpq	%rax, %rsi
    00000072: 	jne	.Ltmp724 # Offset: 114
    00000074: 	movdqa	%xmm2, %xmm0
    00000078: 	movq	%rdx, %rsi
    0000007b: 	psrldq	$0x8, %xmm0
    00000080: 	andq	$-0x8, %rsi
    00000084: 	pmaxsw	%xmm0, %xmm2
    00000088: 	movdqa	%xmm2, %xmm0
    0000008c: 	psrldq	$0x4, %xmm0
    00000091: 	pmaxsw	%xmm0, %xmm2
    00000095: 	movdqa	%xmm2, %xmm0
    00000099: 	psrldq	$0x2, %xmm0
    0000009e: 	pmaxsw	%xmm0, %xmm2
    000000a2: 	pextrw	$0x0, %xmm2, %eax
    000000a7: 	testb	$0x7, %dl
    000000aa: 	je	.Ltmp725 # Offset: 170
.Ltmp727:
    000000b0: 	movzwl	(%rcx,%rsi,2), %r10d
    000000b5: 	movzwl	(%rdi,%rsi,2), %r9d
    000000ba: 	leaq	(%rsi,%rsi), %r8
    000000be: 	movl	%r10d, %r11d
    000000c1: 	subl	%r9d, %r11d
    000000c4: 	subw	%r10w, %r9w
    000000c8: 	cmovsl	%r11d, %r9d
    000000cc: 	cmpw	%r9w, %ax
    000000d0: 	cmovll	%r9d, %eax
    000000d4: 	leaq	0x1(%rsi), %r9
    000000d8: 	cmpq	%r9, %rdx
    000000db: 	jbe	.Ltmp726 # Offset: 219
    000000e1: 	movzwl	0x2(%rcx,%r8), %r10d
    000000e7: 	movzwl	0x2(%rdi,%r8), %r9d
    000000ed: 	movl	%r10d, %r11d
    000000f0: 	subl	%r9d, %r11d
    000000f3: 	subw	%r10w, %r9w
    000000f7: 	cmovsl	%r11d, %r9d
    000000fb: 	cmpw	%r9w, %ax
    000000ff: 	cmovll	%r9d, %eax
    00000103: 	leaq	0x2(%rsi), %r9
    00000107: 	cmpq	%r9, %rdx
    0000010a: 	jbe	.Ltmp726 # Offset: 266
    00000110: 	movzwl	0x4(%rcx,%r8), %r10d
    00000116: 	movzwl	0x4(%rdi,%r8), %r9d
    0000011c: 	movl	%r10d, %r11d
    0000011f: 	subl	%r9d, %r11d
    00000122: 	subw	%r10w, %r9w
    00000126: 	cmovsl	%r11d, %r9d
    0000012a: 	cmpw	%r9w, %ax
    0000012e: 	cmovll	%r9d, %eax
    00000132: 	leaq	0x3(%rsi), %r9
    00000136: 	cmpq	%r9, %rdx
    00000139: 	jbe	.Ltmp726 # Offset: 313
    0000013f: 	movzwl	0x6(%rcx,%r8), %r10d
    00000145: 	movzwl	0x6(%rdi,%r8), %r9d
    0000014b: 	movl	%r10d, %r11d
    0000014e: 	subl	%r9d, %r11d
    00000151: 	subw	%r10w, %r9w
    00000155: 	cmovsl	%r11d, %r9d
    00000159: 	cmpw	%r9w, %ax
    0000015d: 	cmovll	%r9d, %eax
    00000161: 	leaq	0x4(%rsi), %r9
    00000165: 	cmpq	%r9, %rdx
    00000168: 	jbe	.Ltmp726 # Offset: 360
    0000016a: 	movzwl	0x8(%rcx,%r8), %r10d
    00000170: 	movzwl	0x8(%rdi,%r8), %r9d
    00000176: 	movl	%r10d, %r11d
    00000179: 	subl	%r9d, %r11d
    0000017c: 	subw	%r10w, %r9w
    00000180: 	cmovsl	%r11d, %r9d
    00000184: 	cmpw	%r9w, %ax
    00000188: 	cmovll	%r9d, %eax
    0000018c: 	leaq	0x5(%rsi), %r9
    00000190: 	cmpq	%r9, %rdx
    00000193: 	jbe	.Ltmp726 # Offset: 403
    00000195: 	movzwl	0xa(%rcx,%r8), %r10d
    0000019b: 	movzwl	0xa(%rdi,%r8), %r9d
    000001a1: 	movl	%r10d, %r11d
    000001a4: 	subl	%r9d, %r11d
    000001a7: 	subw	%r10w, %r9w
    000001ab: 	cmovsl	%r11d, %r9d
    000001af: 	cmpw	%r9w, %ax
    000001b3: 	cmovll	%r9d, %eax
    000001b7: 	addq	$0x6, %rsi
    000001bb: 	cmpq	%rsi, %rdx
    000001be: 	jbe	.Ltmp726 # Offset: 446
    000001c0: 	movzwl	0xc(%rcx,%r8), %ecx
    000001c6: 	movzwl	0xc(%rdi,%r8), %edx
    000001cc: 	movl	%ecx, %esi
    000001ce: 	subl	%edx, %esi
    000001d0: 	subw	%cx, %dx
    000001d3: 	cmovsl	%esi, %edx
    000001d6: 	cmpw	%dx, %ax
    000001d9: 	cmovll	%edx, %eax
    000001dc: 	retq # Offset: 476
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp722:
    000001e0: 	xorl	%eax, %eax
.Ltmp726:
    000001e2: 	retq # Offset: 482
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp725:
    000001e8: 	retq # Offset: 488
.Ltmp723:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%esi, %esi
    000001ed: 	jmp	.Ltmp727 # Offset: 493
DWARF CFI Instructions:
    <empty>
End of Function "_Z14max_differenceIsET_PKS0_S2_m"

Binary Function "_Z11TestOneTypeIsiEvv" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x1c980
  Size        : 0x3945
  MaxSize     : 0x3950
  Offset      : 0x1c980
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	DATAat0x49228(%rip), %rsi
    0000000c: 	movq	%rsp, %rbp
    0000000f: 	pushq	%r15
    00000011: 	pushq	%r14
    00000013: 	leaq	-0xe0(%rbp), %r15
    0000001a: 	pushq	%r13
    0000001c: 	movq	%r15, %rdi
    0000001f: 	pushq	%r12
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x148, %rsp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, -0x38(%rbp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	%r15, -0x130(%rbp)
    00000043: 	movl	%eax, -0x164(%rbp)
    00000049: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 73
    0000004e: 	leaq	-0xc0(%rbp), %rdi
    00000055: 	leaq	DATAat0x49230(%rip), %rsi
    0000005c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 92
    00000061: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    00000069: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000070: 	leaq	-0x110(%rbp), %rsi
    00000077: 	movaps	%xmm4, -0x110(%rbp)
    0000007e: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    00000086: 	movaps	%xmm4, -0x100(%rbp)
    0000008d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 141
    00000092: 	movl	$0x5b8d80, %edi
    00000097: 	callq	_Znam@PLT # Offset: 151
    0000009c: 	movl	$0x5b8d80, %edi
    000000a1: 	movq	%rax, -0x118(%rbp)
    000000a8: 	movq	%rax, %r14
    000000ab: 	callq	_Znam@PLT # Offset: 171
    000000b0: 	movq	%rax, %r12
    000000b3: 	movl	iterations(%rip), %eax
    000000b9: 	leaq	-0x60(%rbp), %rbx
    000000bd: 	movq	%r15, %rsi
    000000c0: 	leaq	DATAat0x49238(%rip), %rdx
    000000c7: 	movq	%rbx, %rdi
    000000ca: 	addl	$0x1, %eax
    000000cd: 	andl	$-0x2, %eax
    000000d0: 	movl	%eax, iterations(%rip)
    000000d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 214
    000000db: 	movq	%r14, %rdi
    000000de: 	movl	$0x5dc, %edx
    000000e3: 	movl	$0x7d0, %esi
    000000e8: 	movq	%r14, %r15
    000000eb: 	movq	DATAat0x49530(%rip), %rax
    000000f2: 	movq	%rax, -0x80(%rbp)
    000000f6: 	leaq	-0x80(%rbp), %rax
    000000fa: 	movq	%rax, %rcx
    000000fd: 	movq	%rax, -0x138(%rbp)
    00000104: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 260
    00000109: 	movq	%r14, %rsi
    0000010c: 	movq	%r12, %rdi
    0000010f: 	movl	$0x5b8d80, %edx
    00000114: 	callq	memcpy@PLT # Offset: 276
    00000119: 	movq	%r12, %r14
    0000011c: 	callq	clock@PLT # Offset: 284
    00000121: 	movl	iterations(%rip), %edi
    00000127: 	movq	%r15, %r9
    0000012a: 	movq	%rax, start_time(%rip)
    00000131: 	movq	%r15, %rax
    00000134: 	xorl	%r15d, %r15d
    00000137: 	testl	%edi, %edi
    00000139: 	jle	.Ltmp728 # Offset: 313
    0000013f: 	movq	%rax, -0x120(%rbp)
    00000146: 	pxor	%xmm3, %xmm3
    0000014a: 	pxor	%xmm4, %xmm4
    0000014e: 	movdqa	DATAat0x49440(%rip), %xmm6
    00000156: 	movdqa	DATAat0x49450(%rip), %xmm5
    0000015e: 	movq	%rbx, -0x128(%rbp)
    00000165: 	movl	%edi, %ebx
.Ltmp733:
    00000167: 	leaq	0xbba(%r14), %r8
    0000016e: 	leaq	0x4(%r9), %rcx
    00000172: 	movl	$0xbb8, %edi
    00000177: 	movq	$-0xbb8, %r10
    0000017e: 	nop # Size: 2
.Ltmp731:
    00000180: 	movq	%r8, %rax
    00000183: 	subq	%rcx, %rax
    00000186: 	cmpq	$0x177c, %rax
    0000018c: 	jbe	.Ltmp729 # Offset: 396
    00000192: 	leaq	-0x2(%rcx), %r13
    00000196: 	leaq	(%r9,%rdi), %r11
    0000019a: 	xorl	%eax, %eax
    0000019c: 	leaq	0xbb8(%rcx), %rdx
    000001a3: 	leaq	0x176e(%rcx), %rsi
.Ltmp730:
    000001aa: 	movdqu	(%r11,%rax), %xmm1
    000001b0: 	movdqa	%xmm3, %xmm12
    000001b5: 	movdqa	%xmm3, %xmm11
    000001ba: 	movdqu	(%r13,%rax), %xmm0
    000001c1: 	movdqu	(%rdx,%rax), %xmm8
    000001c7: 	movdqa	%xmm3, %xmm10
    000001cc: 	movdqu	(%rsi,%rax), %xmm7
    000001d1: 	pcmpgtw	%xmm0, %xmm11
    000001d6: 	pcmpgtw	%xmm1, %xmm12
    000001db: 	movdqa	%xmm1, %xmm9
    000001e0: 	pcmpgtw	%xmm8, %xmm10
    000001e5: 	movdqa	%xmm0, %xmm2
    000001e9: 	movdqa	%xmm7, %xmm13
    000001ee: 	punpcklwd	%xmm12, %xmm9
    000001f3: 	punpcklwd	%xmm11, %xmm2
    000001f8: 	punpckhwd	%xmm12, %xmm1
    000001fd: 	paddd	%xmm9, %xmm2
    00000202: 	movdqa	%xmm8, %xmm9
    00000207: 	punpckhwd	%xmm10, %xmm8
    0000020c: 	punpcklwd	%xmm10, %xmm9
    00000211: 	paddd	%xmm9, %xmm2
    00000216: 	movdqa	%xmm3, %xmm9
    0000021b: 	pcmpgtw	%xmm7, %xmm9
    00000220: 	punpcklwd	%xmm9, %xmm13
    00000225: 	punpckhwd	%xmm9, %xmm7
    0000022a: 	paddd	%xmm13, %xmm2
    0000022f: 	movdqa	%xmm1, %xmm13
    00000234: 	movdqa	%xmm0, %xmm1
    00000238: 	punpckhwd	%xmm11, %xmm1
    0000023d: 	paddd	%xmm6, %xmm2
    00000241: 	movdqa	%xmm4, %xmm0
    00000245: 	paddd	%xmm13, %xmm1
    0000024a: 	pcmpgtd	%xmm2, %xmm0
    0000024e: 	paddd	%xmm8, %xmm1
    00000253: 	paddd	%xmm7, %xmm1
    00000257: 	movdqa	%xmm4, %xmm7
    0000025b: 	paddd	%xmm6, %xmm1
    0000025f: 	pand	%xmm5, %xmm0
    00000263: 	pcmpgtd	%xmm1, %xmm7
    00000267: 	paddd	%xmm2, %xmm0
    0000026b: 	psrad	$0x2, %xmm0
    00000270: 	movdqa	%xmm0, %xmm2
    00000274: 	pand	%xmm5, %xmm7
    00000278: 	paddd	%xmm7, %xmm1
    0000027c: 	psrad	$0x2, %xmm1
    00000281: 	punpcklwd	%xmm1, %xmm0
    00000285: 	punpckhwd	%xmm1, %xmm2
    00000289: 	movdqa	%xmm0, %xmm1
    0000028d: 	punpcklwd	%xmm2, %xmm0
    00000291: 	punpckhwd	%xmm2, %xmm1
    00000295: 	punpcklwd	%xmm1, %xmm0
    00000299: 	movups	%xmm0, (%r8,%rax)
    0000029e: 	addq	$0x10, %rax
    000002a2: 	cmpq	$0xbb0, %rax
    000002a8: 	jne	.Ltmp730 # Offset: 680
    000002ae: 	movswl	0xbae(%rcx), %esi
    000002b5: 	movswl	0x1764(%rcx), %eax
    000002bc: 	addl	%esi, %eax
    000002be: 	movswl	0x1768(%rcx), %esi
    000002c5: 	addl	%eax, %esi
    000002c7: 	movswl	0x231e(%rcx), %eax
    000002ce: 	addl	%esi, %eax
    000002d0: 	leal	0x5(%rax), %esi
    000002d3: 	addl	$0x2, %eax
    000002d6: 	cmovsl	%esi, %eax
    000002d9: 	sarl	$0x2, %eax
    000002dc: 	movw	%ax, 0xbb0(%r8)
    000002e4: 	movswl	0xbb0(%rcx), %esi
    000002eb: 	movswl	0x1766(%rcx), %eax
    000002f2: 	addl	%esi, %eax
    000002f4: 	movswl	0x176a(%rcx), %esi
    000002fb: 	addl	%eax, %esi
    000002fd: 	movswl	0x2320(%rcx), %eax
    00000304: 	addl	%esi, %eax
    00000306: 	leal	0x5(%rax), %ecx
    00000309: 	addl	$0x2, %eax
    0000030c: 	cmovsl	%ecx, %eax
    0000030f: 	addq	$0xbb8, %rdi
    00000316: 	sarl	$0x2, %eax
    00000319: 	movw	%ax, 0xbb2(%r8)
.Ltmp735:
    00000321: 	addq	$0xbb8, %r8
    00000328: 	movq	%rdx, %rcx
    0000032b: 	subq	$0xbb8, %r10
    00000332: 	cmpq	$0x5b81c8, %rdi
    00000339: 	jne	.Ltmp731 # Offset: 825
    0000033f: 	addl	$0x1, %r15d
    00000343: 	movq	%r14, %rax
    00000346: 	movq	%r9, %r14
    00000349: 	cmpl	%ebx, %r15d
    0000034c: 	je	.Ltmp732 # Offset: 844
    00000352: 	movq	%rax, %r9
    00000355: 	jmp	.Ltmp733 # Offset: 853
    0000035a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp729:
    00000360: 	movq	%rdi, %rax
    00000363: 	leaq	0xbb8(%rdi), %rdi
    0000036a: 	leaq	-0xbb8(%r10,%rax), %rsi
    00000372: 	leaq	(%rdi,%r10), %r11
    00000376: 	addq	%r9, %rsi
    00000379: 	leaq	0xbb4(%rax), %r13
    00000380: 	addq	%r9, %r11
    00000383: 	movq	%rsi, -0x118(%rbp)
.Ltmp734:
    0000038a: 	movq	-0x118(%rbp), %rsi
    00000391: 	movswl	(%r9,%rax), %edx
    00000396: 	movswl	0x2(%rsi,%rax), %esi
    0000039b: 	addl	%esi, %edx
    0000039d: 	movswl	0x4(%r9,%rax), %esi
    000003a3: 	addl	%edx, %esi
    000003a5: 	movswl	0x2(%r11,%rax), %edx
    000003ab: 	addl	%esi, %edx
    000003ad: 	leal	0x5(%rdx), %esi
    000003b0: 	addl	$0x2, %edx
    000003b3: 	cmovnsl	%edx, %esi
    000003b6: 	sarl	$0x2, %esi
    000003b9: 	movw	%si, 0x2(%r14,%rax)
    000003bf: 	addq	$0x2, %rax
    000003c3: 	cmpq	%rax, %r13
    000003c6: 	jne	.Ltmp734 # Offset: 966
    000003c8: 	leaq	0xbb8(%rcx), %rdx
    000003cf: 	jmp	.Ltmp735 # Offset: 975
.Ltmp732:
    000003d4: 	movq	-0x120(%rbp), %rax
    000003db: 	movq	-0x128(%rbp), %rbx
    000003e2: 	movq	%rax, -0x118(%rbp)
.Ltmp728:
    000003e9: 	movq	%rbx, %rsi
    000003ec: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003f3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1011
    000003f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ff: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000406: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000040d: 	je	.Ltmp736 # Offset: 1037
.Ltmp907:
    00000413: 	movq	-0x20(%rax), %r13
    00000417: 	callq	clock@PLT # Offset: 1047
    0000041c: 	pxor	%xmm0, %xmm0
    00000420: 	movq	%rax, end_time(%rip)
    00000427: 	movq	%r13, %rdi
    0000042a: 	subq	start_time(%rip), %rax
    00000431: 	cvtsi2sd	%rax, %xmm0
    00000436: 	divsd	DATAat0x49520(%rip), %xmm0
    0000043e: 	callq	_Z13record_resultdPKc # Offset: 1086
    00000443: 	movq	-0x60(%rbp), %rdi
    00000447: 	leaq	-0x50(%rbp), %rax
    0000044b: 	movq	%rax, -0x128(%rbp)
    00000452: 	cmpq	%rax, %rdi
    00000455: 	je	.Ltmp737 # Offset: 1109
    00000457: 	movq	-0x50(%rbp), %rax
    0000045b: 	leaq	0x1(%rax), %rsi
    0000045f: 	callq	_ZdlPvm@PLT # Offset: 1119
.Ltmp737:
    00000464: 	movq	-0x130(%rbp), %rsi
    0000046b: 	leaq	DATAat0x4924a(%rip), %rdx
    00000472: 	movq	%rbx, %rdi
    00000475: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1141
    0000047a: 	movq	-0x118(%rbp), %r13
    00000481: 	movl	$0x5dc, %edx
    00000486: 	movl	$0x7d0, %esi
    0000048b: 	movq	-0x138(%rbp), %rcx
    00000492: 	movq	DATAat0x49530(%rip), %rax
    00000499: 	movq	%r13, %rdi
    0000049c: 	movq	%rax, -0x80(%rbp)
    000004a0: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 1184
    000004a5: 	movq	%r12, %rdi
    000004a8: 	movl	$0x5b8d80, %edx
    000004ad: 	movq	%r13, %rsi
    000004b0: 	callq	memcpy@PLT # Offset: 1200
    000004b5: 	callq	clock@PLT # Offset: 1205
    000004ba: 	movl	iterations(%rip), %r14d
    000004c1: 	movq	%r12, %r11
    000004c4: 	xorl	%r10d, %r10d
    000004c7: 	movq	%rax, start_time(%rip)
    000004ce: 	movq	-0x118(%rbp), %rdi
    000004d5: 	testl	%r14d, %r14d
    000004d8: 	jle	.Ltmp738 # Offset: 1240
.Ltmp742:
    000004de: 	leaq	0xbba(%r11), %rcx
    000004e5: 	leaq	0x5b81c8(%r13), %rsi
    000004ec: 	movl	$0x1, %edx
    000004f1: 	nopl	(%rax) # Size: 7
.Ltmp740:
    000004f8: 	addl	$0x1, %edx
    000004fb: 	leaq	-0x5b7610(%rsi), %rax
    00000502: 	movq	%rcx, %r8
    00000505: 	movq	%rdi, %r15
.Ltmp739:
    00000508: 	movswl	-0xbb6(%rax), %r9d
    00000510: 	movswl	(%rax), %edi
    00000513: 	addl	%r9d, %edi
    00000516: 	movswl	0x4(%rax), %r9d
    0000051b: 	addl	%edi, %r9d
    0000051e: 	movswl	0xbba(%rax), %edi
    00000525: 	addl	%r9d, %edi
    00000528: 	leal	0x5(%rdi), %r9d
    0000052c: 	addl	$0x2, %edi
    0000052f: 	cmovsl	%r9d, %edi
    00000533: 	addq	$0xbb8, %rax
    00000539: 	addq	$0xbb8, %r8
    00000540: 	sarl	$0x2, %edi
    00000543: 	movw	%di, -0xbb8(%r8)
    0000054b: 	cmpq	%rsi, %rax
    0000054e: 	jne	.Ltmp739 # Offset: 1358
    00000550: 	movq	%r15, %rdi
    00000553: 	addq	$0x2, %rcx
    00000557: 	leaq	0x2(%rax), %rsi
    0000055b: 	cmpl	$0x5db, %edx
    00000561: 	jne	.Ltmp740 # Offset: 1377
    00000563: 	addl	$0x1, %r10d
    00000567: 	movq	%r11, %rax
    0000056a: 	movq	%r13, %r11
    0000056d: 	cmpl	%r14d, %r10d
    00000570: 	je	.Ltmp741 # Offset: 1392
    00000572: 	movq	%rax, %r13
    00000575: 	jmp	.Ltmp742 # Offset: 1397
.Ltmp741:
    0000057a: 	movq	%r15, -0x118(%rbp)
.Ltmp738:
    00000581: 	movq	%rbx, %rsi
    00000584: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000058b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1419
    00000590: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000597: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000059e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005a5: 	je	.Ltmp743 # Offset: 1445
.Ltmp911:
    000005ab: 	movq	-0x20(%rax), %r13
    000005af: 	callq	clock@PLT # Offset: 1455
    000005b4: 	pxor	%xmm0, %xmm0
    000005b8: 	movq	%rax, end_time(%rip)
    000005bf: 	movq	%r13, %rdi
    000005c2: 	subq	start_time(%rip), %rax
    000005c9: 	cvtsi2sd	%rax, %xmm0
    000005ce: 	divsd	DATAat0x49520(%rip), %xmm0
    000005d6: 	callq	_Z13record_resultdPKc # Offset: 1494
    000005db: 	movq	-0x60(%rbp), %rdi
    000005df: 	cmpq	-0x128(%rbp), %rdi
    000005e6: 	je	.Ltmp744 # Offset: 1510
    000005e8: 	movq	-0x50(%rbp), %rax
    000005ec: 	leaq	0x1(%rax), %rsi
    000005f0: 	callq	_ZdlPvm@PLT # Offset: 1520
.Ltmp744:
    000005f5: 	movq	-0x130(%rbp), %rsi
    000005fc: 	leaq	DATAat0x4925d(%rip), %rdx
    00000603: 	movq	%rbx, %rdi
    00000606: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1542
    0000060b: 	movq	-0x118(%rbp), %r14
    00000612: 	movl	$0x5dc, %edx
    00000617: 	movl	$0x7d0, %esi
    0000061c: 	movq	-0x138(%rbp), %rcx
    00000623: 	movq	DATAat0x49530(%rip), %rax
    0000062a: 	movq	%r14, %rdi
    0000062d: 	movq	%rax, -0x80(%rbp)
    00000631: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 1585
    00000636: 	movq	%r12, %rdi
    00000639: 	movl	$0x5b8d80, %edx
    0000063e: 	movq	%r14, %rsi
    00000641: 	callq	memcpy@PLT # Offset: 1601
    00000646: 	callq	clock@PLT # Offset: 1606
    0000064b: 	movq	%r12, %r10
    0000064e: 	movq	%r14, %r9
    00000651: 	xorl	%r11d, %r11d
    00000654: 	movl	iterations(%rip), %r15d
    0000065b: 	movq	%rax, start_time(%rip)
    00000662: 	movq	$-0xbb4, %r8
    00000669: 	movq	-0x118(%rbp), %rdi
    00000670: 	testl	%r15d, %r15d
    00000673: 	jle	.Ltmp745 # Offset: 1651
.Ltmp749:
    00000679: 	movq	$-0x5b7610, %rax
    00000680: 	leaq	-0xbb8(%r9), %r14
    00000687: 	leaq	0xbb8(%r9), %r13
    0000068e: 	movq	%rdi, %rcx
    00000691: 	nopl	(%rax) # Size: 7
.Ltmp747:
    00000698: 	movq	%rcx, -0x118(%rbp)
    0000069f: 	movq	%rax, %rdx
    000006a2: 	movq	%r8, %rdi
    000006a5: 	negq	%rdx
    000006a8: 	subq	%rax, %rdi
.Ltmp746:
    000006ab: 	movswl	0xbb4(%r14,%rdx), %esi
    000006b4: 	movswl	0xbb2(%r9,%rdx), %ecx
    000006bd: 	addl	%esi, %ecx
    000006bf: 	movswl	0xbb6(%r9,%rdx), %esi
    000006c8: 	addl	%ecx, %esi
    000006ca: 	movswl	0xbb4(%r13,%rdx), %ecx
    000006d3: 	addl	%esi, %ecx
    000006d5: 	leal	0x5(%rcx), %esi
    000006d8: 	addl	$0x2, %ecx
    000006db: 	cmovnsl	%ecx, %esi
    000006de: 	sarl	$0x2, %esi
    000006e1: 	movw	%si, 0xbb4(%r10,%rdx)
    000006ea: 	subq	$0x2, %rdx
    000006ee: 	cmpq	%rdx, %rdi
    000006f1: 	jne	.Ltmp746 # Offset: 1777
    000006f3: 	movq	-0x118(%rbp), %rcx
    000006fa: 	addq	$0xbb8, %rax
    00000700: 	jne	.Ltmp747 # Offset: 1792
    00000702: 	addl	$0x1, %r11d
    00000706: 	movq	%r10, %rax
    00000709: 	movq	%rcx, %rdi
    0000070c: 	movq	%r9, %r10
    0000070f: 	cmpl	%r15d, %r11d
    00000712: 	je	.Ltmp748 # Offset: 1810
    00000714: 	movq	%rax, %r9
    00000717: 	jmp	.Ltmp749 # Offset: 1815
.Ltmp748:
    0000071c: 	movq	%rcx, -0x118(%rbp)
.Ltmp745:
    00000723: 	movq	%rbx, %rsi
    00000726: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000072d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1837
    00000732: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000739: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000740: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000747: 	je	.Ltmp750 # Offset: 1863
.Ltmp910:
    0000074d: 	movq	-0x20(%rax), %r13
    00000751: 	callq	clock@PLT # Offset: 1873
    00000756: 	pxor	%xmm0, %xmm0
    0000075a: 	movq	%rax, end_time(%rip)
    00000761: 	movq	%r13, %rdi
    00000764: 	subq	start_time(%rip), %rax
    0000076b: 	cvtsi2sd	%rax, %xmm0
    00000770: 	divsd	DATAat0x49520(%rip), %xmm0
    00000778: 	callq	_Z13record_resultdPKc # Offset: 1912
    0000077d: 	movq	-0x60(%rbp), %rdi
    00000781: 	cmpq	-0x128(%rbp), %rdi
    00000788: 	je	.Ltmp751 # Offset: 1928
    0000078a: 	movq	-0x50(%rbp), %rax
    0000078e: 	leaq	0x1(%rax), %rsi
    00000792: 	callq	_ZdlPvm@PLT # Offset: 1938
.Ltmp751:
    00000797: 	movq	-0x130(%rbp), %rsi
    0000079e: 	leaq	DATAat0x49271(%rip), %rdx
    000007a5: 	movq	%rbx, %rdi
    000007a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1960
    000007ad: 	movq	-0x118(%rbp), %r14
    000007b4: 	movl	$0x5dc, %edx
    000007b9: 	movl	$0x7d0, %esi
    000007be: 	movq	-0x138(%rbp), %rcx
    000007c5: 	movq	DATAat0x49530(%rip), %rax
    000007cc: 	movq	%r14, %rdi
    000007cf: 	movq	%rax, -0x80(%rbp)
    000007d3: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 2003
    000007d8: 	movq	%r12, %rdi
    000007db: 	movl	$0x5b8d80, %edx
    000007e0: 	movq	%r14, %rsi
    000007e3: 	callq	memcpy@PLT # Offset: 2019
    000007e8: 	callq	clock@PLT # Offset: 2024
    000007ed: 	movq	%r12, %r10
    000007f0: 	movq	%r14, %r9
    000007f3: 	xorl	%r11d, %r11d
    000007f6: 	movl	iterations(%rip), %r15d
    000007fd: 	movq	%rax, start_time(%rip)
    00000804: 	movq	$-0xbb4, %r8
    0000080b: 	movq	-0x118(%rbp), %rdi
    00000812: 	testl	%r15d, %r15d
    00000815: 	jle	.Ltmp752 # Offset: 2069
.Ltmp756:
    0000081b: 	movq	$-0xbb8, %rax
    00000822: 	leaq	-0xbb8(%r9), %r14
    00000829: 	leaq	0xbb8(%r9), %r13
    00000830: 	movq	%rdi, %rcx
    00000833: 	nopl	(%rax,%rax) # Size: 5
.Ltmp754:
    00000838: 	movq	%rcx, -0x118(%rbp)
    0000083f: 	movq	%rax, %rdx
    00000842: 	movq	%r8, %rdi
    00000845: 	negq	%rdx
    00000848: 	subq	%rax, %rdi
.Ltmp753:
    0000084b: 	movswl	0xbb4(%r14,%rdx), %esi
    00000854: 	movswl	0xbb2(%r9,%rdx), %ecx
    0000085d: 	addl	%esi, %ecx
    0000085f: 	movswl	0xbb6(%r9,%rdx), %esi
    00000868: 	addl	%ecx, %esi
    0000086a: 	movswl	0xbb4(%r13,%rdx), %ecx
    00000873: 	addl	%esi, %ecx
    00000875: 	leal	0x5(%rcx), %esi
    00000878: 	addl	$0x2, %ecx
    0000087b: 	cmovnsl	%ecx, %esi
    0000087e: 	sarl	$0x2, %esi
    00000881: 	movw	%si, 0xbb4(%r10,%rdx)
    0000088a: 	subq	$0x2, %rdx
    0000088e: 	cmpq	%rdi, %rdx
    00000891: 	jne	.Ltmp753 # Offset: 2193
    00000893: 	subq	$0xbb8, %rax
    00000899: 	movq	-0x118(%rbp), %rcx
    000008a0: 	cmpq	$-0x5b81c8, %rax
    000008a6: 	jne	.Ltmp754 # Offset: 2214
    000008a8: 	addl	$0x1, %r11d
    000008ac: 	movq	%r10, %rax
    000008af: 	movq	%rcx, %rdi
    000008b2: 	movq	%r9, %r10
    000008b5: 	cmpl	%r15d, %r11d
    000008b8: 	je	.Ltmp755 # Offset: 2232
    000008ba: 	movq	%rax, %r9
    000008bd: 	jmp	.Ltmp756 # Offset: 2237
.Ltmp755:
    000008c2: 	movq	%rcx, -0x118(%rbp)
.Ltmp752:
    000008c9: 	movq	%rbx, %rsi
    000008cc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000008d3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2259
    000008d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008df: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000008e6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ed: 	je	.Ltmp757 # Offset: 2285
.Ltmp909:
    000008f3: 	movq	-0x20(%rax), %r13
    000008f7: 	callq	clock@PLT # Offset: 2295
    000008fc: 	pxor	%xmm0, %xmm0
    00000900: 	movq	%rax, end_time(%rip)
    00000907: 	movq	%r13, %rdi
    0000090a: 	subq	start_time(%rip), %rax
    00000911: 	cvtsi2sd	%rax, %xmm0
    00000916: 	divsd	DATAat0x49520(%rip), %xmm0
    0000091e: 	callq	_Z13record_resultdPKc # Offset: 2334
    00000923: 	movq	-0x60(%rbp), %rdi
    00000927: 	cmpq	-0x128(%rbp), %rdi
    0000092e: 	je	.Ltmp758 # Offset: 2350
    00000930: 	movq	-0x50(%rbp), %rax
    00000934: 	leaq	0x1(%rax), %rsi
    00000938: 	callq	_ZdlPvm@PLT # Offset: 2360
.Ltmp758:
    0000093d: 	movq	-0x130(%rbp), %rsi
    00000944: 	leaq	DATAat0x49286(%rip), %rdx
    0000094b: 	movq	%rbx, %rdi
    0000094e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2382
    00000953: 	movq	-0x118(%rbp), %r15
    0000095a: 	movq	-0x138(%rbp), %rcx
    00000961: 	movl	$0x5dc, %edx
    00000966: 	movq	%r12, %r14
    00000969: 	movq	DATAat0x49530(%rip), %rax
    00000970: 	movl	$0x7d0, %esi
    00000975: 	movq	%r15, %rdi
    00000978: 	movq	%rax, -0x80(%rbp)
    0000097c: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 2428
    00000981: 	movq	%r15, %rsi
    00000984: 	movq	%r12, %rdi
    00000987: 	movl	$0x5b8d80, %edx
    0000098c: 	callq	memcpy@PLT # Offset: 2444
    00000991: 	callq	clock@PLT # Offset: 2449
    00000996: 	movl	iterations(%rip), %edi
    0000099c: 	movq	%r15, %r9
    0000099f: 	movq	%rax, start_time(%rip)
    000009a6: 	movq	%r15, %rax
    000009a9: 	xorl	%r15d, %r15d
    000009ac: 	testl	%edi, %edi
    000009ae: 	jle	.Ltmp759 # Offset: 2478
    000009b4: 	movq	%rax, -0x120(%rbp)
    000009bb: 	pxor	%xmm3, %xmm3
    000009bf: 	pxor	%xmm4, %xmm4
    000009c3: 	movdqa	DATAat0x49440(%rip), %xmm6
    000009cb: 	movdqa	DATAat0x49450(%rip), %xmm5
    000009d3: 	movq	%rbx, -0x140(%rbp)
    000009da: 	movl	%edi, %ebx
.Ltmp764:
    000009dc: 	leaq	0x5b7612(%r14), %r8
    000009e3: 	leaq	0x5b6a5c(%r9), %rcx
    000009ea: 	movl	$0x5b7610, %eax
    000009ef: 	movq	$-0x5b7610, %r10
    000009f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp762:
    00000a00: 	movq	%r8, %rdx
    00000a03: 	subq	%rcx, %rdx
    00000a06: 	cmpq	$0x177c, %rdx
    00000a0d: 	jbe	.Ltmp760 # Offset: 2573
    00000a13: 	leaq	-0x2(%rcx), %r13
    00000a17: 	leaq	(%r9,%rax), %r11
    00000a1b: 	xorl	%edx, %edx
    00000a1d: 	leaq	0xbb8(%rcx), %rdi
    00000a24: 	leaq	0x176e(%rcx), %rsi
.Ltmp761:
    00000a2b: 	movdqu	(%r11,%rdx), %xmm1
    00000a31: 	movdqa	%xmm3, %xmm12
    00000a36: 	movdqa	%xmm3, %xmm11
    00000a3b: 	movdqu	(%r13,%rdx), %xmm0
    00000a42: 	movdqu	(%rdi,%rdx), %xmm8
    00000a48: 	movdqa	%xmm3, %xmm10
    00000a4d: 	movdqu	(%rsi,%rdx), %xmm7
    00000a52: 	pcmpgtw	%xmm0, %xmm11
    00000a57: 	pcmpgtw	%xmm1, %xmm12
    00000a5c: 	movdqa	%xmm1, %xmm9
    00000a61: 	pcmpgtw	%xmm8, %xmm10
    00000a66: 	movdqa	%xmm0, %xmm2
    00000a6a: 	movdqa	%xmm7, %xmm13
    00000a6f: 	punpcklwd	%xmm12, %xmm9
    00000a74: 	punpcklwd	%xmm11, %xmm2
    00000a79: 	punpckhwd	%xmm12, %xmm1
    00000a7e: 	paddd	%xmm9, %xmm2
    00000a83: 	movdqa	%xmm8, %xmm9
    00000a88: 	punpckhwd	%xmm10, %xmm8
    00000a8d: 	punpcklwd	%xmm10, %xmm9
    00000a92: 	paddd	%xmm9, %xmm2
    00000a97: 	movdqa	%xmm3, %xmm9
    00000a9c: 	pcmpgtw	%xmm7, %xmm9
    00000aa1: 	punpcklwd	%xmm9, %xmm13
    00000aa6: 	punpckhwd	%xmm9, %xmm7
    00000aab: 	paddd	%xmm13, %xmm2
    00000ab0: 	movdqa	%xmm1, %xmm13
    00000ab5: 	movdqa	%xmm0, %xmm1
    00000ab9: 	punpckhwd	%xmm11, %xmm1
    00000abe: 	paddd	%xmm6, %xmm2
    00000ac2: 	movdqa	%xmm4, %xmm0
    00000ac6: 	paddd	%xmm13, %xmm1
    00000acb: 	pcmpgtd	%xmm2, %xmm0
    00000acf: 	paddd	%xmm8, %xmm1
    00000ad4: 	paddd	%xmm7, %xmm1
    00000ad8: 	movdqa	%xmm4, %xmm7
    00000adc: 	paddd	%xmm6, %xmm1
    00000ae0: 	pand	%xmm5, %xmm0
    00000ae4: 	pcmpgtd	%xmm1, %xmm7
    00000ae8: 	paddd	%xmm2, %xmm0
    00000aec: 	psrad	$0x2, %xmm0
    00000af1: 	movdqa	%xmm0, %xmm2
    00000af5: 	pand	%xmm5, %xmm7
    00000af9: 	paddd	%xmm7, %xmm1
    00000afd: 	psrad	$0x2, %xmm1
    00000b02: 	punpcklwd	%xmm1, %xmm0
    00000b06: 	punpckhwd	%xmm1, %xmm2
    00000b0a: 	movdqa	%xmm0, %xmm1
    00000b0e: 	punpcklwd	%xmm2, %xmm0
    00000b12: 	punpckhwd	%xmm2, %xmm1
    00000b16: 	punpcklwd	%xmm1, %xmm0
    00000b1a: 	movups	%xmm0, (%r8,%rdx)
    00000b1f: 	addq	$0x10, %rdx
    00000b23: 	cmpq	$0xbb0, %rdx
    00000b2a: 	jne	.Ltmp761 # Offset: 2858
    00000b30: 	movswl	0xbae(%rcx), %esi
    00000b37: 	movswl	0x1764(%rcx), %edx
    00000b3e: 	leaq	-0xbb8(%rax), %rdi
    00000b45: 	addl	%esi, %edx
    00000b47: 	movswl	0x1768(%rcx), %esi
    00000b4e: 	addl	%edx, %esi
    00000b50: 	movswl	0x231e(%rcx), %edx
    00000b57: 	addl	%esi, %edx
    00000b59: 	leal	0x5(%rdx), %esi
    00000b5c: 	addl	$0x2, %edx
    00000b5f: 	cmovsl	%esi, %edx
    00000b62: 	sarl	$0x2, %edx
    00000b65: 	movw	%dx, 0xbb0(%r8)
    00000b6d: 	movswl	0xbb0(%rcx), %esi
    00000b74: 	movswl	0x1766(%rcx), %edx
    00000b7b: 	addl	%esi, %edx
    00000b7d: 	movswl	0x176a(%rcx), %esi
    00000b84: 	addl	%edx, %esi
    00000b86: 	movswl	0x2320(%rcx), %edx
    00000b8d: 	addl	%esi, %edx
    00000b8f: 	leal	0x5(%rdx), %esi
    00000b92: 	addl	$0x2, %edx
    00000b95: 	cmovsl	%esi, %edx
    00000b98: 	sarl	$0x2, %edx
    00000b9b: 	movw	%dx, 0xbb2(%r8)
.Ltmp765:
    00000ba3: 	subq	$0xbb8, %r8
    00000baa: 	subq	$0xbb8, %rcx
    00000bb1: 	movq	%rdi, %rax
    00000bb4: 	addq	$0xbb8, %r10
    00000bbb: 	testq	%rdi, %rdi
    00000bbe: 	jne	.Ltmp762 # Offset: 3006
    00000bc4: 	addl	$0x1, %r15d
    00000bc8: 	movq	%r14, %rax
    00000bcb: 	movq	%r9, %r14
    00000bce: 	cmpl	%ebx, %r15d
    00000bd1: 	je	.Ltmp763 # Offset: 3025
    00000bd3: 	movq	%rax, %r9
    00000bd6: 	jmp	.Ltmp764 # Offset: 3030
    00000bdb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp760:
    00000be0: 	leaq	-0xbb8(%rax), %rdi
    00000be7: 	leaq	0xbb8(%r10,%rax), %r11
    00000bef: 	leaq	(%rdi,%r10), %rsi
    00000bf3: 	leaq	0xbb4(%rax), %r13
    00000bfa: 	addq	%r9, %r11
    00000bfd: 	addq	%r9, %rsi
    00000c00: 	movq	%rsi, -0x118(%rbp)
.Ltmp766:
    00000c07: 	movq	-0x118(%rbp), %rsi
    00000c0e: 	movswl	(%r9,%rax), %edx
    00000c13: 	movswl	0x2(%rsi,%rax), %esi
    00000c18: 	addl	%esi, %edx
    00000c1a: 	movswl	0x4(%r9,%rax), %esi
    00000c20: 	addl	%edx, %esi
    00000c22: 	movswl	0x2(%r11,%rax), %edx
    00000c28: 	addl	%esi, %edx
    00000c2a: 	leal	0x5(%rdx), %esi
    00000c2d: 	addl	$0x2, %edx
    00000c30: 	cmovnsl	%edx, %esi
    00000c33: 	sarl	$0x2, %esi
    00000c36: 	movw	%si, 0x2(%r14,%rax)
    00000c3c: 	addq	$0x2, %rax
    00000c40: 	cmpq	%r13, %rax
    00000c43: 	je	.Ltmp765 # Offset: 3139
    00000c49: 	jmp	.Ltmp766 # Offset: 3145
.Ltmp763:
    00000c4b: 	movq	-0x120(%rbp), %rax
    00000c52: 	movq	-0x140(%rbp), %rbx
    00000c59: 	movq	%rax, -0x118(%rbp)
.Ltmp759:
    00000c60: 	movq	%rbx, %rsi
    00000c63: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000c6a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3178
    00000c6f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c76: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000c7d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c84: 	je	.Ltmp767 # Offset: 3204
.Ltmp908:
    00000c8a: 	movq	-0x20(%rax), %r13
    00000c8e: 	callq	clock@PLT # Offset: 3214
    00000c93: 	pxor	%xmm0, %xmm0
    00000c97: 	movq	%rax, end_time(%rip)
    00000c9e: 	movq	%r13, %rdi
    00000ca1: 	subq	start_time(%rip), %rax
    00000ca8: 	cvtsi2sd	%rax, %xmm0
    00000cad: 	divsd	DATAat0x49520(%rip), %xmm0
    00000cb5: 	callq	_Z13record_resultdPKc # Offset: 3253
    00000cba: 	movq	-0x60(%rbp), %rdi
    00000cbe: 	cmpq	-0x128(%rbp), %rdi
    00000cc5: 	je	.Ltmp768 # Offset: 3269
    00000cc7: 	movq	-0x50(%rbp), %rax
    00000ccb: 	leaq	0x1(%rax), %rsi
    00000ccf: 	callq	_ZdlPvm@PLT # Offset: 3279
.Ltmp768:
    00000cd4: 	movq	-0x130(%rbp), %rsi
    00000cdb: 	leaq	DATAat0x4929b(%rip), %rdx
    00000ce2: 	movq	%rbx, %rdi
    00000ce5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3301
    00000cea: 	movl	$0x5dc, %edx
    00000cef: 	movl	$0x7d0, %esi
    00000cf4: 	movq	%r12, %r15
    00000cf7: 	xorl	%r14d, %r14d
    00000cfa: 	movq	-0x118(%rbp), %r13
    00000d01: 	movq	-0x138(%rbp), %rcx
    00000d08: 	movq	DATAat0x49530(%rip), %rax
    00000d0f: 	movq	%r13, %rdi
    00000d12: 	movq	%rax, -0x80(%rbp)
    00000d16: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 3350
    00000d1b: 	movq	%r12, %rdi
    00000d1e: 	movl	$0x5b8d80, %edx
    00000d23: 	movq	%r13, %rsi
    00000d26: 	callq	memcpy@PLT # Offset: 3366
    00000d2b: 	callq	clock@PLT # Offset: 3371
    00000d30: 	movq	%rax, start_time(%rip)
    00000d37: 	movl	iterations(%rip), %eax
    00000d3d: 	movl	%eax, %edi
    00000d3f: 	testl	%eax, %eax
    00000d41: 	jle	.Ltmp769 # Offset: 3393
    00000d43: 	movq	-0x118(%rbp), %rax
    00000d4a: 	movq	%r13, -0x118(%rbp)
    00000d51: 	movq	%rbx, %r13
    00000d54: 	movl	%edi, %ebx
    00000d56: 	movq	-0x118(%rbp), %rdi
    00000d5d: 	movq	%rax, -0x120(%rbp)
    00000d64: 	jmp	.Ltmp770 # Offset: 3428
.Ltmp771:
    00000d66: 	movq	%rdx, -0x118(%rbp)
    00000d6d: 	movq	%rdx, %rdi
.Ltmp770:
    00000d70: 	movl	$0x7d0, %edx
    00000d75: 	movq	%r15, %rsi
    00000d78: 	movl	$0x5dc, %r8d
    00000d7e: 	movl	$0x5dc, %ecx
    00000d83: 	callq	"_ZN17jacobi2D_unrolledIsiEclEPKsPsiiii.isra.0/1" # Offset: 3459
    00000d88: 	addl	$0x1, %r14d
    00000d8c: 	movq	%r15, %rdx
    00000d8f: 	movq	-0x118(%rbp), %r15
    00000d96: 	cmpl	%ebx, %r14d
    00000d99: 	jne	.Ltmp771 # Offset: 3481
    00000d9b: 	movq	-0x120(%rbp), %rax
    00000da2: 	movq	%r13, %rbx
    00000da5: 	movq	%rax, -0x118(%rbp)
.Ltmp769:
    00000dac: 	movq	%rbx, %rsi
    00000daf: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000db6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3510
    00000dbb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000dc2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000dc9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dd0: 	je	.Ltmp772 # Offset: 3536
.Ltmp902:
    00000dd6: 	movq	-0x20(%rax), %r13
    00000dda: 	callq	clock@PLT # Offset: 3546
    00000ddf: 	pxor	%xmm0, %xmm0
    00000de3: 	movq	%rax, end_time(%rip)
    00000dea: 	movq	%r13, %rdi
    00000ded: 	subq	start_time(%rip), %rax
    00000df4: 	cvtsi2sd	%rax, %xmm0
    00000df9: 	divsd	DATAat0x49520(%rip), %xmm0
    00000e01: 	callq	_Z13record_resultdPKc # Offset: 3585
    00000e06: 	movq	-0x60(%rbp), %rdi
    00000e0a: 	cmpq	-0x128(%rbp), %rdi
    00000e11: 	je	.Ltmp773 # Offset: 3601
    00000e13: 	movq	-0x50(%rbp), %rax
    00000e17: 	leaq	0x1(%rax), %rsi
    00000e1b: 	callq	_ZdlPvm@PLT # Offset: 3611
.Ltmp773:
    00000e20: 	movq	-0x130(%rbp), %rsi
    00000e27: 	leaq	DATAat0x492af(%rip), %rdx
    00000e2e: 	movq	%rbx, %rdi
    00000e31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3633
    00000e36: 	movl	$0x5dc, %edx
    00000e3b: 	movl	$0x7d0, %esi
    00000e40: 	movq	%r12, %r15
    00000e43: 	xorl	%r14d, %r14d
    00000e46: 	movq	-0x118(%rbp), %r13
    00000e4d: 	movq	-0x138(%rbp), %rcx
    00000e54: 	movq	DATAat0x49530(%rip), %rax
    00000e5b: 	movq	%r13, %rdi
    00000e5e: 	movq	%rax, -0x80(%rbp)
    00000e62: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 3682
    00000e67: 	movq	%r12, %rdi
    00000e6a: 	movl	$0x5b8d80, %edx
    00000e6f: 	movq	%r13, %rsi
    00000e72: 	callq	memcpy@PLT # Offset: 3698
    00000e77: 	callq	clock@PLT # Offset: 3703
    00000e7c: 	movq	%rax, start_time(%rip)
    00000e83: 	movl	iterations(%rip), %eax
    00000e89: 	movl	%eax, %edi
    00000e8b: 	testl	%eax, %eax
    00000e8d: 	jle	.Ltmp774 # Offset: 3725
    00000e8f: 	movq	-0x118(%rbp), %rax
    00000e96: 	movq	%r13, -0x118(%rbp)
    00000e9d: 	movq	%rbx, %r13
    00000ea0: 	movl	%edi, %ebx
    00000ea2: 	movq	-0x118(%rbp), %rdi
    00000ea9: 	movq	%rax, -0x120(%rbp)
    00000eb0: 	jmp	.Ltmp775 # Offset: 3760
.Ltmp776:
    00000eb2: 	movq	%rdx, -0x118(%rbp)
    00000eb9: 	movq	%rdx, %rdi
.Ltmp775:
    00000ebc: 	movl	$0x7d0, %edx
    00000ec1: 	movq	%r15, %rsi
    00000ec4: 	movl	$0x5dc, %r8d
    00000eca: 	movl	$0x5dc, %ecx
    00000ecf: 	callq	"_ZN18jacobi2D_unrolled2IsiEclEPKsPsiiii.isra.0/1" # Offset: 3791
    00000ed4: 	addl	$0x1, %r14d
    00000ed8: 	movq	%r15, %rdx
    00000edb: 	movq	-0x118(%rbp), %r15
    00000ee2: 	cmpl	%ebx, %r14d
    00000ee5: 	jne	.Ltmp776 # Offset: 3813
    00000ee7: 	movq	-0x120(%rbp), %rax
    00000eee: 	movq	%r13, %rbx
    00000ef1: 	movq	%rax, -0x118(%rbp)
.Ltmp774:
    00000ef8: 	movq	%rbx, %rsi
    00000efb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000f02: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3842
    00000f07: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000f0e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f15: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f1c: 	je	.Ltmp777 # Offset: 3868
.Ltmp901:
    00000f22: 	movq	-0x20(%rax), %r13
    00000f26: 	callq	clock@PLT # Offset: 3878
    00000f2b: 	pxor	%xmm0, %xmm0
    00000f2f: 	movq	%rax, end_time(%rip)
    00000f36: 	movq	%r13, %rdi
    00000f39: 	subq	start_time(%rip), %rax
    00000f40: 	cvtsi2sd	%rax, %xmm0
    00000f45: 	divsd	DATAat0x49520(%rip), %xmm0
    00000f4d: 	callq	_Z13record_resultdPKc # Offset: 3917
    00000f52: 	movq	-0x60(%rbp), %rdi
    00000f56: 	cmpq	-0x128(%rbp), %rdi
    00000f5d: 	je	.Ltmp778 # Offset: 3933
    00000f5f: 	movq	-0x50(%rbp), %rax
    00000f63: 	leaq	0x1(%rax), %rsi
    00000f67: 	callq	_ZdlPvm@PLT # Offset: 3943
.Ltmp778:
    00000f6c: 	movq	-0x130(%rbp), %rsi
    00000f73: 	leaq	DATAat0x492c4(%rip), %rdx
    00000f7a: 	movq	%rbx, %rdi
    00000f7d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3965
    00000f82: 	movl	$0x5dc, %edx
    00000f87: 	movl	$0x7d0, %esi
    00000f8c: 	movq	%r12, %r15
    00000f8f: 	xorl	%r14d, %r14d
    00000f92: 	movq	-0x118(%rbp), %r13
    00000f99: 	movq	-0x138(%rbp), %rcx
    00000fa0: 	movq	DATAat0x49530(%rip), %rax
    00000fa7: 	movq	%r13, %rdi
    00000faa: 	movq	%rax, -0x80(%rbp)
    00000fae: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 4014
    00000fb3: 	movq	%r12, %rdi
    00000fb6: 	movl	$0x5b8d80, %edx
    00000fbb: 	movq	%r13, %rsi
    00000fbe: 	callq	memcpy@PLT # Offset: 4030
    00000fc3: 	callq	clock@PLT # Offset: 4035
    00000fc8: 	movq	%rax, start_time(%rip)
    00000fcf: 	movl	iterations(%rip), %eax
    00000fd5: 	movl	%eax, %edi
    00000fd7: 	testl	%eax, %eax
    00000fd9: 	jle	.Ltmp779 # Offset: 4057
    00000fdb: 	movq	-0x118(%rbp), %rax
    00000fe2: 	movq	%r13, -0x118(%rbp)
    00000fe9: 	movq	%rbx, %r13
    00000fec: 	movl	%edi, %ebx
    00000fee: 	movq	-0x118(%rbp), %rdi
    00000ff5: 	movq	%rax, -0x120(%rbp)
    00000ffc: 	jmp	.Ltmp780 # Offset: 4092
.Ltmp781:
    00000ffe: 	movq	%rdx, -0x118(%rbp)
    00001005: 	movq	%rdx, %rdi
.Ltmp780:
    00001008: 	movl	$0x7d0, %edx
    0000100d: 	movq	%r15, %rsi
    00001010: 	movl	$0x5dc, %r8d
    00001016: 	movl	$0x5dc, %ecx
    0000101b: 	callq	"_ZN18jacobi2D_unrolled3IsiEclEPKsPsiiii.isra.0/1" # Offset: 4123
    00001020: 	addl	$0x1, %r14d
    00001024: 	movq	%r15, %rdx
    00001027: 	movq	-0x118(%rbp), %r15
    0000102e: 	cmpl	%ebx, %r14d
    00001031: 	jne	.Ltmp781 # Offset: 4145
    00001033: 	movq	-0x120(%rbp), %rax
    0000103a: 	movq	%r13, %rbx
    0000103d: 	movq	%rax, -0x118(%rbp)
.Ltmp779:
    00001044: 	movq	%rbx, %rsi
    00001047: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000104e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4174
    00001053: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000105a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001061: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001068: 	je	.Ltmp782 # Offset: 4200
.Ltmp900:
    0000106e: 	movq	-0x20(%rax), %r13
    00001072: 	callq	clock@PLT # Offset: 4210
    00001077: 	pxor	%xmm0, %xmm0
    0000107b: 	movq	%rax, end_time(%rip)
    00001082: 	movq	%r13, %rdi
    00001085: 	subq	start_time(%rip), %rax
    0000108c: 	cvtsi2sd	%rax, %xmm0
    00001091: 	divsd	DATAat0x49520(%rip), %xmm0
    00001099: 	callq	_Z13record_resultdPKc # Offset: 4249
    0000109e: 	movq	-0x60(%rbp), %rdi
    000010a2: 	cmpq	-0x128(%rbp), %rdi
    000010a9: 	je	.Ltmp783 # Offset: 4265
    000010ab: 	movq	-0x50(%rbp), %rax
    000010af: 	leaq	0x1(%rax), %rsi
    000010b3: 	callq	_ZdlPvm@PLT # Offset: 4275
.Ltmp783:
    000010b8: 	movq	-0x130(%rbp), %r14
    000010bf: 	leaq	-0xa0(%rbp), %rdi
    000010c6: 	leaq	DATAat0x492d9(%rip), %rdx
    000010cd: 	movq	%r14, %rsi
    000010d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4304
    000010d5: 	movl	iterations(%rip), %edx
    000010db: 	xorl	%r8d, %r8d
    000010de: 	xorl	%ecx, %ecx
    000010e0: 	movl	$0x2dc6c0, %esi
    000010e5: 	movq	-0xa0(%rbp), %rdi
    000010ec: 	callq	_Z9summarizePKciiii # Offset: 4332
    000010f1: 	leaq	DATAat0x49238(%rip), %rdx
    000010f8: 	movq	%r14, %rsi
    000010fb: 	movq	%rbx, %rdi
    000010fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4350
    00001103: 	movq	-0x118(%rbp), %r15
    0000110a: 	movl	$0xfa, %edx
    0000110f: 	movl	$0x12c, %esi
    00001114: 	movq	-0x138(%rbp), %rcx
    0000111b: 	movq	DATAat0x49530(%rip), %rax
    00001122: 	movq	%r15, %rdi
    00001125: 	movq	%r15, %r13
    00001128: 	movq	%rax, -0x80(%rbp)
    0000112c: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 4396
    00001131: 	movq	%r15, %rsi
    00001134: 	movq	%r12, %rdi
    00001137: 	movl	$0x249f0, %edx
    0000113c: 	movw	%ax, -0x150(%rbp)
    00001143: 	callq	memcpy@PLT # Offset: 4419
    00001148: 	movl	iterations(%rip), %eax
    0000114e: 	movl	$0x2710, iterations(%rip)
    00001158: 	movl	%eax, -0x158(%rbp)
    0000115e: 	callq	clock@PLT # Offset: 4446
    00001163: 	movl	iterations(%rip), %edi
    00001169: 	movq	%rax, start_time(%rip)
    00001170: 	movq	%r15, %rax
    00001173: 	xorl	%r15d, %r15d
    00001176: 	testl	%edi, %edi
    00001178: 	jle	.Ltmp784 # Offset: 4472
    0000117e: 	movq	%rax, -0x120(%rbp)
    00001185: 	pxor	%xmm2, %xmm2
    00001189: 	pxor	%xmm3, %xmm3
    0000118d: 	movdqa	DATAat0x49440(%rip), %xmm5
    00001195: 	movl	%edi, -0x118(%rbp)
    0000119b: 	movdqa	DATAat0x49450(%rip), %xmm4
    000011a3: 	movq	%rbx, -0x140(%rbp)
    000011aa: 	movq	%r12, %rbx
    000011ad: 	nopl	(%rax) # Size: 3
.Ltmp792:
    000011b0: 	movl	-0x118(%rbp), %r10d
    000011b7: 	leaq	0x1f6(%rbx), %rdi
    000011be: 	leaq	0x4(%r13), %rax
    000011c2: 	movq	$-0x1f4, %rcx
    000011c9: 	leaq	-0x1f4(%r13), %r14
    000011d0: 	leaq	0x1f4(%r13), %r11
    000011d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp787:
    000011e0: 	movq	%rdi, %rdx
    000011e3: 	subq	%rax, %rdx
    000011e6: 	cmpq	$0x3f4, %rdx
    000011ed: 	jbe	.Ltmp785 # Offset: 4589
    000011f3: 	movq	%r13, %r8
    000011f6: 	leaq	-0x2(%rax), %r9
    000011fa: 	leaq	0x1f4(%rax), %rsi
    00001201: 	xorl	%edx, %edx
    00001203: 	subq	%rcx, %r8
    00001206: 	addq	$0x3e6, %rax
.Ltmp786:
    0000120c: 	movdqu	(%r9,%rdx), %xmm0
    00001212: 	movdqu	(%r8,%rdx), %xmm1
    00001218: 	movdqa	%xmm2, %xmm12
    0000121d: 	movdqa	%xmm2, %xmm11
    00001222: 	movdqu	(%rsi,%rdx), %xmm8
    00001228: 	movdqa	%xmm2, %xmm10
    0000122d: 	movdqu	(%rax,%rdx), %xmm7
    00001232: 	pcmpgtw	%xmm0, %xmm11
    00001237: 	pcmpgtw	%xmm1, %xmm12
    0000123c: 	movdqa	%xmm1, %xmm9
    00001241: 	pcmpgtw	%xmm8, %xmm10
    00001246: 	movdqa	%xmm0, %xmm6
    0000124a: 	movdqa	%xmm7, %xmm13
    0000124f: 	punpcklwd	%xmm12, %xmm9
    00001254: 	punpcklwd	%xmm11, %xmm6
    00001259: 	punpckhwd	%xmm12, %xmm1
    0000125e: 	paddd	%xmm9, %xmm6
    00001263: 	movdqa	%xmm8, %xmm9
    00001268: 	punpckhwd	%xmm10, %xmm8
    0000126d: 	punpcklwd	%xmm10, %xmm9
    00001272: 	paddd	%xmm9, %xmm6
    00001277: 	movdqa	%xmm2, %xmm9
    0000127c: 	pcmpgtw	%xmm7, %xmm9
    00001281: 	punpcklwd	%xmm9, %xmm13
    00001286: 	punpckhwd	%xmm9, %xmm7
    0000128b: 	paddd	%xmm13, %xmm6
    00001290: 	movdqa	%xmm1, %xmm13
    00001295: 	movdqa	%xmm0, %xmm1
    00001299: 	punpckhwd	%xmm11, %xmm1
    0000129e: 	paddd	%xmm5, %xmm6
    000012a2: 	movdqa	%xmm3, %xmm0
    000012a6: 	paddd	%xmm13, %xmm1
    000012ab: 	pcmpgtd	%xmm6, %xmm0
    000012af: 	paddd	%xmm8, %xmm1
    000012b4: 	paddd	%xmm7, %xmm1
    000012b8: 	movdqa	%xmm3, %xmm7
    000012bc: 	paddd	%xmm5, %xmm1
    000012c0: 	pand	%xmm4, %xmm0
    000012c4: 	pcmpgtd	%xmm1, %xmm7
    000012c8: 	paddd	%xmm6, %xmm0
    000012cc: 	psrad	$0x2, %xmm0
    000012d1: 	movdqa	%xmm0, %xmm6
    000012d5: 	pand	%xmm4, %xmm7
    000012d9: 	paddd	%xmm7, %xmm1
    000012dd: 	psrad	$0x2, %xmm1
    000012e2: 	punpcklwd	%xmm1, %xmm0
    000012e6: 	punpckhwd	%xmm1, %xmm6
    000012ea: 	movdqa	%xmm0, %xmm1
    000012ee: 	punpcklwd	%xmm6, %xmm0
    000012f2: 	punpckhwd	%xmm6, %xmm1
    000012f6: 	punpcklwd	%xmm1, %xmm0
    000012fa: 	movups	%xmm0, (%rdi,%rdx)
    000012fe: 	addq	$0x10, %rdx
    00001302: 	cmpq	$0x1f0, %rdx
    00001309: 	jne	.Ltmp786 # Offset: 4873
    0000130f: 	nop # Size: 1
.Ltmp794:
    00001310: 	subq	$0x1f4, %rcx
    00001317: 	addq	$0x1f4, %rdi
    0000131e: 	movq	%rsi, %rax
    00001321: 	cmpq	$-0x247fc, %rcx
    00001328: 	jne	.Ltmp787 # Offset: 4904
    0000132e: 	movl	%r10d, %edi
    00001331: 	xorl	%eax, %eax
    00001333: 	pxor	%xmm1, %xmm1
    00001337: 	nopw	(%rax,%rax) # Size: 9
.Ltmp788:
    00001340: 	movdqu	(%rbx,%rax), %xmm6
    00001345: 	movdqu	(%r13,%rax), %xmm0
    0000134c: 	movdqu	(%r13,%rax), %xmm7
    00001353: 	addq	$0x10, %rax
    00001357: 	psubw	%xmm6, %xmm7
    0000135b: 	psubw	%xmm0, %xmm6
    0000135f: 	movdqa	%xmm2, %xmm0
    00001363: 	pcmpgtw	%xmm7, %xmm0
    00001367: 	pand	%xmm0, %xmm6
    0000136b: 	pandn	%xmm7, %xmm0
    0000136f: 	movdqa	%xmm2, %xmm7
    00001373: 	por	%xmm6, %xmm0
    00001377: 	pcmpgtw	%xmm0, %xmm7
    0000137b: 	movdqa	%xmm0, %xmm6
    0000137f: 	punpcklwd	%xmm7, %xmm6
    00001383: 	punpckhwd	%xmm7, %xmm0
    00001387: 	paddd	%xmm6, %xmm1
    0000138b: 	paddd	%xmm0, %xmm1
    0000138f: 	cmpq	$0x249f0, %rax
    00001395: 	jne	.Ltmp788 # Offset: 5013
    00001397: 	movdqa	%xmm1, %xmm0
    0000139b: 	movl	%edi, -0x118(%rbp)
    000013a1: 	movl	$0x124f8, %edx
    000013a6: 	movq	%rbx, %rsi
    000013a9: 	psrldq	$0x8, %xmm0
    000013ae: 	movq	%r13, %rdi
    000013b1: 	paddd	%xmm0, %xmm1
    000013b5: 	movdqa	%xmm1, %xmm0
    000013b9: 	psrldq	$0x4, %xmm0
    000013be: 	paddd	%xmm0, %xmm1
    000013c2: 	movd	%xmm1, %r14d
    000013c7: 	callq	_Z14max_differenceIsET_PKS0_S2_m # Offset: 5063
    000013cc: 	cmpl	$0x1, %r15d
    000013d0: 	pxor	%xmm2, %xmm2
    000013d4: 	movdqa	DATAat0x49440(%rip), %xmm5
    000013dc: 	movdqa	DATAat0x49450(%rip), %xmm4
    000013e4: 	pxor	%xmm3, %xmm3
    000013e8: 	jle	.Ltmp789 # Offset: 5096
    000013ea: 	cmpl	$0x9, %r14d
    000013ee: 	jle	.Ltmp790 # Offset: 5102
    000013f4: 	testw	%ax, %ax
    000013f7: 	jle	.Ltmp790 # Offset: 5111
.Ltmp789:
    000013f9: 	movq	%rbx, %rdx
    000013fc: 	addl	$0x1, %r15d
    00001400: 	movq	%r13, %rbx
    00001403: 	cmpl	%r15d, -0x118(%rbp)
    0000140a: 	je	.Ltmp791 # Offset: 5130
    00001410: 	movq	%rdx, %r13
    00001413: 	jmp	.Ltmp792 # Offset: 5139
    00001418: 	nopl	(%rax,%rax) # Size: 8
.Ltmp785:
    00001420: 	movq	%rcx, %rdx
    00001423: 	movl	$0x1f0, %r8d
    00001429: 	negq	%rdx
    0000142c: 	subq	%rcx, %r8
.Ltmp793:
    0000142f: 	movswl	0x2(%r14,%rdx), %r9d
    00001435: 	movswl	(%r13,%rdx), %esi
    0000143b: 	addl	%r9d, %esi
    0000143e: 	movswl	0x4(%r13,%rdx), %r9d
    00001444: 	addl	%esi, %r9d
    00001447: 	movswl	0x2(%r11,%rdx), %esi
    0000144d: 	addl	%r9d, %esi
    00001450: 	leal	0x5(%rsi), %r9d
    00001454: 	addl	$0x2, %esi
    00001457: 	cmovsl	%r9d, %esi
    0000145b: 	sarl	$0x2, %esi
    0000145e: 	movw	%si, 0x2(%rbx,%rdx)
    00001463: 	addq	$0x2, %rdx
    00001467: 	cmpq	%r8, %rdx
    0000146a: 	jne	.Ltmp793 # Offset: 5226
    0000146c: 	leaq	0x1f4(%rax), %rsi
    00001473: 	jmp	.Ltmp794 # Offset: 5235
.Ltmp790:
    00001478: 	movq	-0x120(%rbp), %rdi
    0000147f: 	movw	%ax, -0x120(%rbp)
    00001486: 	movl	%r14d, -0x148(%rbp)
    0000148d: 	movq	%rbx, %r14
    00001490: 	movq	-0x140(%rbp), %rbx
    00001497: 	movq	%rdi, -0x118(%rbp)
    0000149e: 	movq	%r14, %r13
.Ltmp898:
    000014a1: 	callq	clock@PLT # Offset: 5281
    000014a6: 	movzwl	-0x150(%rbp), %r14d
    000014ae: 	pxor	%xmm0, %xmm0
    000014b2: 	subw	0x125f2(%r13), %r14w
    000014ba: 	movq	%rax, end_time(%rip)
    000014c1: 	subq	start_time(%rip), %rax
    000014c8: 	cmpl	iterations(%rip), %r15d
    000014cf: 	cvtsi2sd	%rax, %xmm0
    000014d4: 	divsd	DATAat0x49520(%rip), %xmm0
    000014dc: 	movsd	%xmm0, -0x160(%rbp)
    000014e4: 	jl	.Ltmp795 # Offset: 5348
    000014ea: 	cmpl	$0xa, -0x148(%rbp)
    000014f1: 	jle	.Ltmp795 # Offset: 5361
    000014f7: 	cmpw	$0x1, -0x120(%rbp)
    000014ff: 	jle	.Ltmp795 # Offset: 5375
    00001505: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000150c: 	movq	-0x58(%rbp), %rdx
    00001510: 	movq	-0x60(%rbp), %rsi
    00001514: 	movq	%rax, %rdi
    00001517: 	movq	%rax, -0x140(%rbp)
    0000151e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5406
    00001523: 	movq	%rax, %rdi
    00001526: 	leaq	DATAat0x49199(%rip), %rsi
    0000152d: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5421
.Ltmp805:
    00001532: 	movq	-0x140(%rbp), %r13
    00001539: 	movl	$0x4, %edx
    0000153e: 	leaq	DATAat0x491b6(%rip), %rsi
    00001545: 	movq	%r13, %rdi
    00001548: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5448
    0000154d: 	movl	%r15d, %esi
    00001550: 	movq	%r13, %rdi
    00001553: 	callq	_ZNSolsEi@PLT # Offset: 5459
    00001558: 	movq	%rax, %rdi
    0000155b: 	leaq	DATAat0x491bb(%rip), %rsi
    00001562: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5474
    00001567: 	movl	$0xa, %edx
    0000156c: 	leaq	DATAat0x491c7(%rip), %rsi
    00001573: 	movq	%r13, %rdi
    00001576: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5494
    0000157b: 	movl	-0x148(%rbp), %esi
    00001581: 	movq	%r13, %rdi
    00001584: 	callq	_ZNSolsEi@PLT # Offset: 5508
    00001589: 	movl	$0x7, %edx
    0000158e: 	leaq	DATAat0x491d2(%rip), %rsi
    00001595: 	movq	%rax, %rdi
    00001598: 	movq	%rax, %r13
    0000159b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5531
    000015a0: 	movswl	-0x120(%rbp), %esi
    000015a7: 	movq	%r13, %rdi
    000015aa: 	callq	_ZNSolsEs@PLT # Offset: 5546
    000015af: 	movl	$0x10, %edx
    000015b4: 	leaq	DATAat0x491da(%rip), %rsi
    000015bb: 	movq	%rax, %rdi
    000015be: 	movq	%rax, %r13
    000015c1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5569
    000015c6: 	movswl	%r14w, %esi
    000015ca: 	movq	%r13, %rdi
    000015cd: 	callq	_ZNSolsEs@PLT # Offset: 5581
    000015d2: 	movl	$0x8, %edx
    000015d7: 	leaq	DATAat0x491eb(%rip), %rsi
    000015de: 	movq	%rax, %rdi
    000015e1: 	movq	%rax, %r13
    000015e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5604
    000015e9: 	movsd	-0x160(%rbp), %xmm0
    000015f1: 	movq	%r13, %rdi
    000015f4: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5620
    000015f9: 	movq	%rax, %rdi
    000015fc: 	leaq	DATAat0x491f4(%rip), %rsi
    00001603: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5635
    00001608: 	movl	-0x158(%rbp), %eax
    0000160e: 	movq	-0x60(%rbp), %rdi
    00001612: 	movl	%eax, iterations(%rip)
    00001618: 	cmpq	-0x128(%rbp), %rdi
    0000161f: 	je	.Ltmp796 # Offset: 5663
    00001621: 	movq	-0x50(%rbp), %rax
    00001625: 	leaq	0x1(%rax), %rsi
    00001629: 	callq	_ZdlPvm@PLT # Offset: 5673
.Ltmp796:
    0000162e: 	movq	-0x130(%rbp), %rsi
    00001635: 	leaq	DATAat0x4924a(%rip), %rdx
    0000163c: 	movq	%rbx, %rdi
    0000163f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5695
    00001644: 	movl	$0xfa, %edx
    00001649: 	movl	$0x12c, %esi
    0000164e: 	movq	%r12, %r15
    00001651: 	xorl	%r13d, %r13d
    00001654: 	movq	-0x118(%rbp), %r14
    0000165b: 	movq	-0x138(%rbp), %rcx
    00001662: 	movq	DATAat0x49530(%rip), %rax
    00001669: 	movq	%r14, %rdi
    0000166c: 	movq	%rax, -0x80(%rbp)
    00001670: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 5744
    00001675: 	movq	%r12, %rdi
    00001678: 	movl	$0x249f0, %edx
    0000167d: 	movq	%r14, %rsi
    00001680: 	movw	%ax, -0x160(%rbp)
    00001687: 	callq	memcpy@PLT # Offset: 5767
    0000168c: 	movl	iterations(%rip), %eax
    00001692: 	movl	$0x2710, iterations(%rip)
    0000169c: 	movl	%eax, -0x168(%rbp)
    000016a2: 	callq	clock@PLT # Offset: 5794
    000016a7: 	pxor	%xmm4, %xmm4
    000016ab: 	movq	%rax, start_time(%rip)
    000016b2: 	movl	iterations(%rip), %eax
    000016b8: 	movl	%eax, %edi
    000016ba: 	testl	%eax, %eax
    000016bc: 	jle	.Ltmp797 # Offset: 5820
    000016c2: 	movq	-0x118(%rbp), %rax
    000016c9: 	movl	%r13d, -0x118(%rbp)
    000016d0: 	movq	%rbx, %r13
    000016d3: 	movl	%edi, %ebx
    000016d5: 	movq	%r12, -0x158(%rbp)
    000016dc: 	movq	%r14, %r12
    000016df: 	movq	%rax, -0x150(%rbp)
    000016e6: 	movl	-0x118(%rbp), %eax
    000016ec: 	nopl	(%rax) # Size: 4
.Ltmp804:
    000016f0: 	leaq	0x1f6(%r15), %r10
    000016f7: 	leaq	0x247fc(%r12), %r8
    000016ff: 	movl	$0x1, %r9d
    00001705: 	movl	%eax, %esi
    00001707: 	nopw	(%rax,%rax) # Size: 9
.Ltmp799:
    00001710: 	addl	$0x1, %r9d
    00001714: 	leaq	-0x24608(%r8), %rax
    0000171b: 	movq	%r10, %rcx
    0000171e: 	movl	%esi, %edi
.Ltmp798:
    00001720: 	movswl	-0x1f2(%rax), %esi
    00001727: 	movswl	(%rax), %edx
    0000172a: 	addl	%esi, %edx
    0000172c: 	movswl	0x4(%rax), %esi
    00001730: 	addl	%edx, %esi
    00001732: 	movswl	0x1f6(%rax), %edx
    00001739: 	addl	%esi, %edx
    0000173b: 	leal	0x5(%rdx), %esi
    0000173e: 	addl	$0x2, %edx
    00001741: 	cmovsl	%esi, %edx
    00001744: 	addq	$0x1f4, %rax
    0000174a: 	addq	$0x1f4, %rcx
    00001751: 	sarl	$0x2, %edx
    00001754: 	movw	%dx, -0x1f4(%rcx)
    0000175b: 	cmpq	%r8, %rax
    0000175e: 	jne	.Ltmp798 # Offset: 5982
    00001760: 	movl	%edi, %esi
    00001762: 	addq	$0x2, %r10
    00001766: 	leaq	0x2(%rax), %r8
    0000176a: 	cmpl	$0xf9, %r9d
    00001771: 	jne	.Ltmp799 # Offset: 6001
    00001773: 	xorl	%eax, %eax
    00001775: 	pxor	%xmm1, %xmm1
    00001779: 	nopl	(%rax) # Size: 7
.Ltmp800:
    00001780: 	movdqu	(%r15,%rax), %xmm5
    00001786: 	movdqu	(%r12,%rax), %xmm3
    0000178c: 	movdqa	%xmm4, %xmm0
    00001790: 	psubw	%xmm5, %xmm3
    00001794: 	movdqa	%xmm5, %xmm2
    00001798: 	movdqu	(%r12,%rax), %xmm5
    0000179e: 	addq	$0x10, %rax
    000017a2: 	pcmpgtw	%xmm3, %xmm0
    000017a6: 	psubw	%xmm5, %xmm2
    000017aa: 	pand	%xmm0, %xmm2
    000017ae: 	pandn	%xmm3, %xmm0
    000017b2: 	movdqa	%xmm4, %xmm3
    000017b6: 	por	%xmm2, %xmm0
    000017ba: 	pcmpgtw	%xmm0, %xmm3
    000017be: 	movdqa	%xmm0, %xmm2
    000017c2: 	punpcklwd	%xmm3, %xmm2
    000017c6: 	punpckhwd	%xmm3, %xmm0
    000017ca: 	paddd	%xmm2, %xmm1
    000017ce: 	paddd	%xmm0, %xmm1
    000017d2: 	cmpq	$0x249f0, %rax
    000017d8: 	jne	.Ltmp800 # Offset: 6104
    000017da: 	movdqa	%xmm1, %xmm0
    000017de: 	movl	%esi, -0x118(%rbp)
    000017e4: 	movl	$0x124f8, %edx
    000017e9: 	movq	%r15, %rsi
    000017ec: 	psrldq	$0x8, %xmm0
    000017f1: 	movq	%r12, %rdi
    000017f4: 	paddd	%xmm0, %xmm1
    000017f8: 	movdqa	%xmm1, %xmm0
    000017fc: 	psrldq	$0x4, %xmm0
    00001801: 	paddd	%xmm0, %xmm1
    00001805: 	movd	%xmm1, %r14d
    0000180a: 	callq	_Z14max_differenceIsET_PKS0_S2_m # Offset: 6154
    0000180f: 	cmpl	$0x1, -0x118(%rbp)
    00001816: 	pxor	%xmm4, %xmm4
    0000181a: 	jle	.Ltmp801 # Offset: 6170
    0000181c: 	cmpl	$0x9, %r14d
    00001820: 	jle	.Ltmp802 # Offset: 6176
    00001822: 	testw	%ax, %ax
    00001825: 	jle	.Ltmp802 # Offset: 6181
.Ltmp801:
    00001827: 	addl	$0x1, -0x118(%rbp)
    0000182e: 	movl	-0x118(%rbp), %edi
    00001834: 	movq	%r15, %rdx
    00001837: 	movq	%r12, %r15
    0000183a: 	cmpl	%ebx, %edi
    0000183c: 	je	.Ltmp803 # Offset: 6204
    00001842: 	movq	%rdx, %r12
    00001845: 	movl	%edi, %eax
    00001847: 	jmp	.Ltmp804 # Offset: 6215
.Ltmp795:
    0000184c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001853: 	movq	-0x58(%rbp), %rdx
    00001857: 	movq	-0x60(%rbp), %rsi
    0000185b: 	movq	%rax, %rdi
    0000185e: 	movq	%rax, -0x140(%rbp)
    00001865: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6245
    0000186a: 	movq	%rax, %rdi
    0000186d: 	leaq	DATAat0x491ab(%rip), %rsi
    00001874: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 6260
    00001879: 	jmp	.Ltmp805 # Offset: 6265
.Ltmp802:
    0000187e: 	movw	%ax, -0x120(%rbp)
    00001885: 	movq	-0x150(%rbp), %rax
    0000188c: 	movq	%r13, %rbx
    0000188f: 	movl	-0x118(%rbp), %r13d
    00001896: 	movq	-0x158(%rbp), %r12
    0000189d: 	movl	%r14d, -0x148(%rbp)
    000018a4: 	movq	%r15, %r14
    000018a7: 	movq	%rax, -0x118(%rbp)
.Ltmp897:
    000018ae: 	callq	clock@PLT # Offset: 6318
    000018b3: 	pxor	%xmm0, %xmm0
    000018b7: 	movq	%rax, end_time(%rip)
    000018be: 	subq	start_time(%rip), %rax
    000018c5: 	cvtsi2sd	%rax, %xmm0
    000018ca: 	movzwl	-0x160(%rbp), %eax
    000018d1: 	subw	0x125f2(%r14), %ax
    000018d9: 	divsd	DATAat0x49520(%rip), %xmm0
    000018e1: 	cmpl	%r13d, iterations(%rip)
    000018e8: 	movq	%xmm0, %r15
    000018ed: 	movl	%eax, %r14d
    000018f0: 	jg	.Ltmp806 # Offset: 6384
    000018f6: 	cmpl	$0xa, -0x148(%rbp)
    000018fd: 	jle	.Ltmp806 # Offset: 6397
    00001903: 	cmpw	$0x1, -0x120(%rbp)
    0000190b: 	jle	.Ltmp806 # Offset: 6411
    00001911: 	movq	-0x58(%rbp), %rdx
    00001915: 	movq	-0x60(%rbp), %rsi
    00001919: 	movq	-0x140(%rbp), %rdi
    00001920: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6432
    00001925: 	movq	%rax, %rdi
    00001928: 	leaq	DATAat0x49199(%rip), %rsi
    0000192f: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 6447
.Ltmp816:
    00001934: 	movq	-0x140(%rbp), %rdi
    0000193b: 	movl	$0x4, %edx
    00001940: 	leaq	DATAat0x491b6(%rip), %rsi
    00001947: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6471
    0000194c: 	movl	%r13d, %esi
    0000194f: 	movq	-0x140(%rbp), %r13
    00001956: 	movq	%r13, %rdi
    00001959: 	callq	_ZNSolsEi@PLT # Offset: 6489
    0000195e: 	movq	%rax, %rdi
    00001961: 	leaq	DATAat0x491bb(%rip), %rsi
    00001968: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 6504
    0000196d: 	movl	$0xa, %edx
    00001972: 	leaq	DATAat0x491c7(%rip), %rsi
    00001979: 	movq	%r13, %rdi
    0000197c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6524
    00001981: 	movl	-0x148(%rbp), %esi
    00001987: 	movq	%r13, %rdi
    0000198a: 	callq	_ZNSolsEi@PLT # Offset: 6538
    0000198f: 	movl	$0x7, %edx
    00001994: 	leaq	DATAat0x491d2(%rip), %rsi
    0000199b: 	movq	%rax, %rdi
    0000199e: 	movq	%rax, %r13
    000019a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6561
    000019a6: 	movswl	-0x120(%rbp), %esi
    000019ad: 	movq	%r13, %rdi
    000019b0: 	callq	_ZNSolsEs@PLT # Offset: 6576
    000019b5: 	movl	$0x10, %edx
    000019ba: 	leaq	DATAat0x491da(%rip), %rsi
    000019c1: 	movq	%rax, %rdi
    000019c4: 	movq	%rax, %r13
    000019c7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6599
    000019cc: 	movswl	%r14w, %esi
    000019d0: 	movq	%r13, %rdi
    000019d3: 	callq	_ZNSolsEs@PLT # Offset: 6611
    000019d8: 	movl	$0x8, %edx
    000019dd: 	leaq	DATAat0x491eb(%rip), %rsi
    000019e4: 	movq	%rax, %rdi
    000019e7: 	movq	%rax, %r13
    000019ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6634
    000019ef: 	movq	%r15, %xmm0
    000019f4: 	movq	%r13, %rdi
    000019f7: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6647
    000019fc: 	movq	%rax, %rdi
    000019ff: 	leaq	DATAat0x491f4(%rip), %rsi
    00001a06: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 6662
    00001a0b: 	movl	-0x168(%rbp), %eax
    00001a11: 	movq	-0x60(%rbp), %rdi
    00001a15: 	movl	%eax, iterations(%rip)
    00001a1b: 	cmpq	-0x128(%rbp), %rdi
    00001a22: 	je	.Ltmp807 # Offset: 6690
    00001a24: 	movq	-0x50(%rbp), %rax
    00001a28: 	leaq	0x1(%rax), %rsi
    00001a2c: 	callq	_ZdlPvm@PLT # Offset: 6700
.Ltmp807:
    00001a31: 	movq	-0x130(%rbp), %rsi
    00001a38: 	leaq	DATAat0x4925d(%rip), %rdx
    00001a3f: 	movq	%rbx, %rdi
    00001a42: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6722
    00001a47: 	movq	-0x118(%rbp), %r15
    00001a4e: 	movq	-0x138(%rbp), %rcx
    00001a55: 	movl	$0xfa, %edx
    00001a5a: 	xorl	%r13d, %r13d
    00001a5d: 	movq	DATAat0x49530(%rip), %rax
    00001a64: 	movl	$0x12c, %esi
    00001a69: 	movq	$-0x1f0, %r14
    00001a70: 	movq	%r15, %rdi
    00001a73: 	movq	%rax, -0x80(%rbp)
    00001a77: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 6775
    00001a7c: 	movq	%r12, %rdi
    00001a7f: 	movl	$0x249f0, %edx
    00001a84: 	movq	%r15, %rsi
    00001a87: 	movw	%ax, -0x168(%rbp)
    00001a8e: 	callq	memcpy@PLT # Offset: 6798
    00001a93: 	movl	iterations(%rip), %eax
    00001a99: 	movl	$0x2710, iterations(%rip)
    00001aa3: 	movl	%eax, -0x16c(%rbp)
    00001aa9: 	callq	clock@PLT # Offset: 6825
    00001aae: 	movq	%r12, %r8
    00001ab1: 	pxor	%xmm4, %xmm4
    00001ab5: 	movq	%rax, start_time(%rip)
    00001abc: 	movl	iterations(%rip), %eax
    00001ac2: 	movl	%eax, %edi
    00001ac4: 	testl	%eax, %eax
    00001ac6: 	jle	.Ltmp808 # Offset: 6854
    00001acc: 	movq	-0x118(%rbp), %rax
    00001ad3: 	movl	%r13d, -0x118(%rbp)
    00001ada: 	movq	%r8, %r13
    00001add: 	movq	%r12, -0x158(%rbp)
    00001ae4: 	movq	%r15, %r12
    00001ae7: 	movq	%rax, -0x150(%rbp)
    00001aee: 	movl	-0x118(%rbp), %eax
    00001af4: 	movq	%rbx, -0x160(%rbp)
    00001afb: 	movl	%edi, %ebx
    00001afd: 	nopl	(%rax) # Size: 3
.Ltmp815:
    00001b00: 	movq	$-0x24608, %rdx
    00001b07: 	leaq	-0x1f4(%r12), %r15
    00001b0f: 	leaq	0x1f4(%r12), %r11
    00001b17: 	movl	%eax, %edi
    00001b19: 	nopl	(%rax) # Size: 7
.Ltmp810:
    00001b20: 	movq	%rdx, %rax
    00001b23: 	movq	%r14, %rsi
    00001b26: 	movl	%edi, %r8d
    00001b29: 	negq	%rax
    00001b2c: 	subq	%rdx, %rsi
.Ltmp809:
    00001b2f: 	movswl	0x1f0(%r15,%rax), %edi
    00001b38: 	movswl	0x1ee(%r12,%rax), %ecx
    00001b41: 	addl	%edi, %ecx
    00001b43: 	movswl	0x1f2(%r12,%rax), %edi
    00001b4c: 	addl	%ecx, %edi
    00001b4e: 	movswl	0x1f0(%r11,%rax), %ecx
    00001b57: 	addl	%edi, %ecx
    00001b59: 	leal	0x5(%rcx), %edi
    00001b5c: 	addl	$0x2, %ecx
    00001b5f: 	cmovsl	%edi, %ecx
    00001b62: 	sarl	$0x2, %ecx
    00001b65: 	movw	%cx, 0x1f0(%r13,%rax)
    00001b6e: 	subq	$0x2, %rax
    00001b72: 	cmpq	%rsi, %rax
    00001b75: 	jne	.Ltmp809 # Offset: 7029
    00001b77: 	movl	%r8d, %edi
    00001b7a: 	addq	$0x1f4, %rdx
    00001b81: 	jne	.Ltmp810 # Offset: 7041
    00001b83: 	pxor	%xmm1, %xmm1
    00001b87: 	movl	%r8d, %esi
    00001b8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp811:
    00001b90: 	movdqu	(%r13,%rdx), %xmm5
    00001b97: 	movdqu	(%r12,%rdx), %xmm3
    00001b9d: 	movdqa	%xmm4, %xmm0
    00001ba1: 	psubw	%xmm5, %xmm3
    00001ba5: 	movdqa	%xmm5, %xmm2
    00001ba9: 	movdqu	(%r12,%rdx), %xmm5
    00001baf: 	addq	$0x10, %rdx
    00001bb3: 	pcmpgtw	%xmm3, %xmm0
    00001bb7: 	psubw	%xmm5, %xmm2
    00001bbb: 	pand	%xmm0, %xmm2
    00001bbf: 	pandn	%xmm3, %xmm0
    00001bc3: 	movdqa	%xmm4, %xmm3
    00001bc7: 	por	%xmm2, %xmm0
    00001bcb: 	pcmpgtw	%xmm0, %xmm3
    00001bcf: 	movdqa	%xmm0, %xmm2
    00001bd3: 	punpcklwd	%xmm3, %xmm2
    00001bd7: 	punpckhwd	%xmm3, %xmm0
    00001bdb: 	paddd	%xmm2, %xmm1
    00001bdf: 	paddd	%xmm0, %xmm1
    00001be3: 	cmpq	$0x249f0, %rdx
    00001bea: 	jne	.Ltmp811 # Offset: 7146
    00001bec: 	movdqa	%xmm1, %xmm0
    00001bf0: 	movl	%esi, -0x118(%rbp)
    00001bf6: 	movl	$0x124f8, %edx
    00001bfb: 	movq	%r13, %rsi
    00001bfe: 	psrldq	$0x8, %xmm0
    00001c03: 	movq	%r12, %rdi
    00001c06: 	paddd	%xmm0, %xmm1
    00001c0a: 	movdqa	%xmm1, %xmm0
    00001c0e: 	psrldq	$0x4, %xmm0
    00001c13: 	paddd	%xmm0, %xmm1
    00001c17: 	movd	%xmm1, %r15d
    00001c1c: 	callq	_Z14max_differenceIsET_PKS0_S2_m # Offset: 7196
    00001c21: 	cmpl	$0x1, -0x118(%rbp)
    00001c28: 	pxor	%xmm4, %xmm4
    00001c2c: 	jle	.Ltmp812 # Offset: 7212
    00001c2e: 	cmpl	$0x9, %r15d
    00001c32: 	jle	.Ltmp813 # Offset: 7218
    00001c34: 	testw	%ax, %ax
    00001c37: 	jle	.Ltmp813 # Offset: 7223
.Ltmp812:
    00001c39: 	addl	$0x1, -0x118(%rbp)
    00001c40: 	movl	-0x118(%rbp), %edi
    00001c46: 	movq	%r13, %rdx
    00001c49: 	movq	%r12, %r13
    00001c4c: 	cmpl	%ebx, %edi
    00001c4e: 	je	.Ltmp814 # Offset: 7246
    00001c54: 	movq	%rdx, %r12
    00001c57: 	movl	%edi, %eax
    00001c59: 	jmp	.Ltmp815 # Offset: 7257
.Ltmp806:
    00001c5e: 	movq	-0x58(%rbp), %rdx
    00001c62: 	movq	-0x60(%rbp), %rsi
    00001c66: 	movq	-0x140(%rbp), %rdi
    00001c6d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7277
    00001c72: 	movq	%rax, %rdi
    00001c75: 	leaq	DATAat0x491ab(%rip), %rsi
    00001c7c: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 7292
    00001c81: 	jmp	.Ltmp816 # Offset: 7297
.Ltmp813:
    00001c86: 	movw	%ax, -0x120(%rbp)
    00001c8d: 	movq	-0x150(%rbp), %rax
    00001c94: 	movq	%r13, %r8
    00001c97: 	movl	-0x118(%rbp), %r13d
    00001c9e: 	movq	-0x158(%rbp), %r12
    00001ca5: 	movl	%r15d, -0x148(%rbp)
    00001cac: 	movq	%r8, %r15
    00001caf: 	movq	%rax, -0x118(%rbp)
    00001cb6: 	movq	-0x160(%rbp), %rbx
.Ltmp894:
    00001cbd: 	callq	clock@PLT # Offset: 7357
    00001cc2: 	pxor	%xmm0, %xmm0
    00001cc6: 	movq	%rax, end_time(%rip)
    00001ccd: 	subq	start_time(%rip), %rax
    00001cd4: 	cvtsi2sd	%rax, %xmm0
    00001cd9: 	movzwl	-0x168(%rbp), %eax
    00001ce0: 	subw	0x125f2(%r15), %ax
    00001ce8: 	divsd	DATAat0x49520(%rip), %xmm0
    00001cf0: 	cmpl	iterations(%rip), %r13d
    00001cf7: 	movq	%xmm0, %r14
    00001cfc: 	movl	%eax, %r15d
    00001cff: 	jl	.Ltmp817 # Offset: 7423
    00001d05: 	cmpl	$0xa, -0x148(%rbp)
    00001d0c: 	jle	.Ltmp817 # Offset: 7436
    00001d12: 	cmpw	$0x1, -0x120(%rbp)
    00001d1a: 	jle	.Ltmp817 # Offset: 7450
    00001d20: 	movq	-0x58(%rbp), %rdx
    00001d24: 	movq	-0x60(%rbp), %rsi
    00001d28: 	movq	-0x140(%rbp), %rdi
    00001d2f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7471
    00001d34: 	movq	%rax, %rdi
    00001d37: 	leaq	DATAat0x49199(%rip), %rsi
    00001d3e: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 7486
.Ltmp832:
    00001d43: 	movq	-0x140(%rbp), %rdi
    00001d4a: 	movl	$0x4, %edx
    00001d4f: 	leaq	DATAat0x491b6(%rip), %rsi
    00001d56: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7510
    00001d5b: 	movl	%r13d, %esi
    00001d5e: 	movq	-0x140(%rbp), %r13
    00001d65: 	movq	%r13, %rdi
    00001d68: 	callq	_ZNSolsEi@PLT # Offset: 7528
    00001d6d: 	movq	%rax, %rdi
    00001d70: 	leaq	DATAat0x491bb(%rip), %rsi
    00001d77: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 7543
    00001d7c: 	movl	$0xa, %edx
    00001d81: 	leaq	DATAat0x491c7(%rip), %rsi
    00001d88: 	movq	%r13, %rdi
    00001d8b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7563
    00001d90: 	movl	-0x148(%rbp), %esi
    00001d96: 	movq	%r13, %rdi
    00001d99: 	callq	_ZNSolsEi@PLT # Offset: 7577
    00001d9e: 	movl	$0x7, %edx
    00001da3: 	leaq	DATAat0x491d2(%rip), %rsi
    00001daa: 	movq	%rax, %rdi
    00001dad: 	movq	%rax, %r13
    00001db0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7600
    00001db5: 	movswl	-0x120(%rbp), %esi
    00001dbc: 	movq	%r13, %rdi
    00001dbf: 	callq	_ZNSolsEs@PLT # Offset: 7615
    00001dc4: 	movl	$0x10, %edx
    00001dc9: 	leaq	DATAat0x491da(%rip), %rsi
    00001dd0: 	movq	%rax, %rdi
    00001dd3: 	movq	%rax, %r13
    00001dd6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7638
    00001ddb: 	movswl	%r15w, %esi
    00001ddf: 	movq	%r13, %rdi
    00001de2: 	callq	_ZNSolsEs@PLT # Offset: 7650
    00001de7: 	movl	$0x8, %edx
    00001dec: 	leaq	DATAat0x491eb(%rip), %rsi
    00001df3: 	movq	%rax, %rdi
    00001df6: 	movq	%rax, %r13
    00001df9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7673
    00001dfe: 	movq	%r14, %xmm0
    00001e03: 	movq	%r13, %rdi
    00001e06: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 7686
    00001e0b: 	movq	%rax, %rdi
    00001e0e: 	leaq	DATAat0x491f4(%rip), %rsi
    00001e15: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 7701
    00001e1a: 	movl	-0x16c(%rbp), %eax
    00001e20: 	movq	-0x60(%rbp), %rdi
    00001e24: 	movl	%eax, iterations(%rip)
    00001e2a: 	cmpq	-0x128(%rbp), %rdi
    00001e31: 	je	.Ltmp818 # Offset: 7729
    00001e33: 	movq	-0x50(%rbp), %rax
    00001e37: 	leaq	0x1(%rax), %rsi
    00001e3b: 	callq	_ZdlPvm@PLT # Offset: 7739
.Ltmp818:
    00001e40: 	movq	-0x130(%rbp), %rsi
    00001e47: 	leaq	DATAat0x49271(%rip), %rdx
    00001e4e: 	movq	%rbx, %rdi
    00001e51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7761
    00001e56: 	subq	$0x8, %rsp
    00001e5a: 	movq	%rbx, %r9
    00001e5d: 	movl	$0xfa, %r8d
    00001e63: 	movq	%r12, %rsi
    00001e66: 	pushq	$0x1
    00001e68: 	movl	$0xfa, %ecx
    00001e6d: 	movl	$0x12c, %edx
    00001e72: 	movq	-0x118(%rbp), %rdi
    00001e79: 	callq	_Z20convergenceLaplace2DIsi18jacobi2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7801
    00001e7e: 	popq	%r11
    00001e80: 	movq	-0x60(%rbp), %rdi
    00001e84: 	popq	%r13
    00001e86: 	cmpq	-0x128(%rbp), %rdi
    00001e8d: 	je	.Ltmp819 # Offset: 7821
    00001e8f: 	movq	-0x50(%rbp), %rax
    00001e93: 	leaq	0x1(%rax), %rsi
    00001e97: 	callq	_ZdlPvm@PLT # Offset: 7831
.Ltmp819:
    00001e9c: 	movq	-0x130(%rbp), %rsi
    00001ea3: 	leaq	DATAat0x49286(%rip), %rdx
    00001eaa: 	movq	%rbx, %rdi
    00001ead: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7853
    00001eb2: 	movq	-0x118(%rbp), %r15
    00001eb9: 	movq	-0x138(%rbp), %rcx
    00001ec0: 	movl	$0xfa, %edx
    00001ec5: 	movq	%r12, %r14
    00001ec8: 	movq	DATAat0x49530(%rip), %rax
    00001ecf: 	movl	$0x12c, %esi
    00001ed4: 	movq	%r15, %rdi
    00001ed7: 	movq	%r15, %r13
    00001eda: 	movq	%rax, -0x80(%rbp)
    00001ede: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 7902
    00001ee3: 	movq	%r12, %rdi
    00001ee6: 	movl	$0x249f0, %edx
    00001eeb: 	movq	%r15, %rsi
    00001eee: 	movw	%ax, -0x158(%rbp)
    00001ef5: 	callq	memcpy@PLT # Offset: 7925
    00001efa: 	movl	iterations(%rip), %eax
    00001f00: 	movl	$0x2710, iterations(%rip)
    00001f0a: 	movl	%eax, -0x160(%rbp)
    00001f10: 	callq	clock@PLT # Offset: 7952
    00001f15: 	xorl	%edi, %edi
    00001f17: 	movq	%rax, start_time(%rip)
    00001f1e: 	movl	iterations(%rip), %eax
    00001f24: 	movl	%edi, -0x120(%rbp)
    00001f2a: 	testl	%eax, %eax
    00001f2c: 	jle	.Ltmp820 # Offset: 7980
    00001f32: 	movq	%r15, -0x148(%rbp)
    00001f39: 	pxor	%xmm2, %xmm2
    00001f3d: 	pxor	%xmm3, %xmm3
    00001f41: 	movdqa	DATAat0x49440(%rip), %xmm5
    00001f49: 	movl	%eax, -0x118(%rbp)
    00001f4f: 	movdqa	DATAat0x49450(%rip), %xmm4
    00001f57: 	movq	%r12, -0x150(%rbp)
    00001f5e: 	movl	%edi, %r12d
    00001f61: 	nopl	(%rax) # Size: 7
.Ltmp831:
    00001f68: 	leaq	0x2460a(%r14), %rsi
    00001f6f: 	leaq	0x24418(%r13), %rdx
    00001f76: 	movq	$-0x24608, %rax
    00001f7d: 	leaq	-0x1f4(%r13), %r15
    00001f84: 	leaq	0x1f4(%r13), %r11
    00001f8b: 	jmp	.Ltmp821 # Offset: 8075
.Ltmp824:
    00001f90: 	movq	%rax, -0x120(%rbp)
    00001f97: 	movq	%r13, %r9
    00001f9a: 	leaq	-0x2(%rdx), %r10
    00001f9e: 	xorl	%ecx, %ecx
    00001fa0: 	subq	%rax, %r9
    00001fa3: 	leaq	0x1f4(%rdx), %r8
    00001faa: 	leaq	0x3e6(%rdx), %rdi
.Ltmp822:
    00001fb1: 	movdqu	(%r10,%rcx), %xmm0
    00001fb7: 	movdqu	(%r9,%rcx), %xmm1
    00001fbd: 	movdqa	%xmm2, %xmm12
    00001fc2: 	movdqa	%xmm2, %xmm11
    00001fc7: 	movdqu	(%r8,%rcx), %xmm8
    00001fcd: 	movdqa	%xmm2, %xmm10
    00001fd2: 	movdqu	(%rdi,%rcx), %xmm7
    00001fd7: 	pcmpgtw	%xmm0, %xmm11
    00001fdc: 	pcmpgtw	%xmm1, %xmm12
    00001fe1: 	movdqa	%xmm1, %xmm9
    00001fe6: 	pcmpgtw	%xmm8, %xmm10
    00001feb: 	movdqa	%xmm0, %xmm6
    00001fef: 	movdqa	%xmm7, %xmm13
    00001ff4: 	punpcklwd	%xmm12, %xmm9
    00001ff9: 	punpcklwd	%xmm11, %xmm6
    00001ffe: 	punpckhwd	%xmm12, %xmm1
    00002003: 	paddd	%xmm9, %xmm6
    00002008: 	movdqa	%xmm8, %xmm9
    0000200d: 	punpckhwd	%xmm10, %xmm8
    00002012: 	punpcklwd	%xmm10, %xmm9
    00002017: 	paddd	%xmm9, %xmm6
    0000201c: 	movdqa	%xmm2, %xmm9
    00002021: 	pcmpgtw	%xmm7, %xmm9
    00002026: 	punpcklwd	%xmm9, %xmm13
    0000202b: 	punpckhwd	%xmm9, %xmm7
    00002030: 	paddd	%xmm13, %xmm6
    00002035: 	movdqa	%xmm1, %xmm13
    0000203a: 	movdqa	%xmm0, %xmm1
    0000203e: 	punpckhwd	%xmm11, %xmm1
    00002043: 	paddd	%xmm5, %xmm6
    00002047: 	movdqa	%xmm3, %xmm0
    0000204b: 	paddd	%xmm13, %xmm1
    00002050: 	pcmpgtd	%xmm6, %xmm0
    00002054: 	paddd	%xmm8, %xmm1
    00002059: 	paddd	%xmm7, %xmm1
    0000205d: 	movdqa	%xmm3, %xmm7
    00002061: 	paddd	%xmm5, %xmm1
    00002065: 	pand	%xmm4, %xmm0
    00002069: 	pcmpgtd	%xmm1, %xmm7
    0000206d: 	paddd	%xmm6, %xmm0
    00002071: 	psrad	$0x2, %xmm0
    00002076: 	movdqa	%xmm0, %xmm6
    0000207a: 	pand	%xmm4, %xmm7
    0000207e: 	paddd	%xmm7, %xmm1
    00002082: 	psrad	$0x2, %xmm1
    00002087: 	punpcklwd	%xmm1, %xmm0
    0000208b: 	punpckhwd	%xmm1, %xmm6
    0000208f: 	movdqa	%xmm0, %xmm1
    00002093: 	punpcklwd	%xmm6, %xmm0
    00002097: 	punpckhwd	%xmm6, %xmm1
    0000209b: 	punpcklwd	%xmm1, %xmm0
    0000209f: 	movups	%xmm0, (%rsi,%rcx)
    000020a3: 	addq	$0x10, %rcx
    000020a7: 	cmpq	$0x1f0, %rcx
    000020ae: 	jne	.Ltmp822 # Offset: 8366
    000020b4: 	movq	-0x120(%rbp), %rax
    000020bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp826:
    000020c0: 	subq	$0x1f4, %rsi
    000020c7: 	subq	$0x1f4, %rdx
    000020ce: 	addq	$0x1f4, %rax
    000020d4: 	je	.Ltmp823 # Offset: 8404
.Ltmp821:
    000020d6: 	movq	%rsi, %rcx
    000020d9: 	subq	%rdx, %rcx
    000020dc: 	cmpq	$0x3f4, %rcx
    000020e3: 	ja	.Ltmp824 # Offset: 8419
    000020e9: 	movq	%rax, %rcx
    000020ec: 	movl	$0x1f0, %r8d
    000020f2: 	movl	-0x118(%rbp), %r10d
    000020f9: 	negq	%rcx
    000020fc: 	subq	%rax, %r8
.Ltmp825:
    000020ff: 	movswl	0x2(%r15,%rcx), %r9d
    00002105: 	movswl	(%r13,%rcx), %edi
    0000210b: 	addl	%r9d, %edi
    0000210e: 	movswl	0x4(%r13,%rcx), %r9d
    00002114: 	addl	%edi, %r9d
    00002117: 	movswl	0x2(%r11,%rcx), %edi
    0000211d: 	addl	%r9d, %edi
    00002120: 	leal	0x5(%rdi), %r9d
    00002124: 	addl	$0x2, %edi
    00002127: 	cmovsl	%r9d, %edi
    0000212b: 	sarl	$0x2, %edi
    0000212e: 	movw	%di, 0x2(%r14,%rcx)
    00002134: 	addq	$0x2, %rcx
    00002138: 	cmpq	%rcx, %r8
    0000213b: 	jne	.Ltmp825 # Offset: 8507
    0000213d: 	movl	%r10d, -0x118(%rbp)
    00002144: 	jmp	.Ltmp826 # Offset: 8516
    00002149: 	nopl	(%rax) # Size: 7
.Ltmp823:
    00002150: 	movl	-0x118(%rbp), %edi
    00002156: 	pxor	%xmm1, %xmm1
    0000215a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp827:
    00002160: 	movdqu	(%r14,%rax), %xmm6
    00002166: 	movdqu	(%r13,%rax), %xmm0
    0000216d: 	movdqu	(%r13,%rax), %xmm7
    00002174: 	addq	$0x10, %rax
    00002178: 	psubw	%xmm6, %xmm7
    0000217c: 	psubw	%xmm0, %xmm6
    00002180: 	movdqa	%xmm2, %xmm0
    00002184: 	pcmpgtw	%xmm7, %xmm0
    00002188: 	pand	%xmm0, %xmm6
    0000218c: 	pandn	%xmm7, %xmm0
    00002190: 	movdqa	%xmm2, %xmm7
    00002194: 	por	%xmm6, %xmm0
    00002198: 	pcmpgtw	%xmm0, %xmm7
    0000219c: 	movdqa	%xmm0, %xmm6
    000021a0: 	punpcklwd	%xmm7, %xmm6
    000021a4: 	punpckhwd	%xmm7, %xmm0
    000021a8: 	paddd	%xmm6, %xmm1
    000021ac: 	paddd	%xmm0, %xmm1
    000021b0: 	cmpq	$0x249f0, %rax
    000021b6: 	jne	.Ltmp827 # Offset: 8630
    000021b8: 	movdqa	%xmm1, %xmm0
    000021bc: 	movl	%edi, -0x118(%rbp)
    000021c2: 	movl	$0x124f8, %edx
    000021c7: 	movq	%r14, %rsi
    000021ca: 	psrldq	$0x8, %xmm0
    000021cf: 	movq	%r13, %rdi
    000021d2: 	paddd	%xmm0, %xmm1
    000021d6: 	movdqa	%xmm1, %xmm0
    000021da: 	psrldq	$0x4, %xmm0
    000021df: 	paddd	%xmm0, %xmm1
    000021e3: 	movd	%xmm1, %r15d
    000021e8: 	callq	_Z14max_differenceIsET_PKS0_S2_m # Offset: 8680
    000021ed: 	cmpl	$0x1, %r12d
    000021f1: 	pxor	%xmm2, %xmm2
    000021f5: 	movdqa	DATAat0x49440(%rip), %xmm5
    000021fd: 	movdqa	DATAat0x49450(%rip), %xmm4
    00002205: 	pxor	%xmm3, %xmm3
    00002209: 	jle	.Ltmp828 # Offset: 8713
    0000220b: 	cmpl	$0x9, %r15d
    0000220f: 	jle	.Ltmp829 # Offset: 8719
    00002211: 	testw	%ax, %ax
    00002214: 	jle	.Ltmp829 # Offset: 8724
.Ltmp828:
    00002216: 	movq	%r14, %rdx
    00002219: 	addl	$0x1, %r12d
    0000221d: 	movq	%r13, %r14
    00002220: 	cmpl	-0x118(%rbp), %r12d
    00002227: 	je	.Ltmp830 # Offset: 8743
    0000222d: 	movq	%rdx, %r13
    00002230: 	jmp	.Ltmp831 # Offset: 8752
.Ltmp817:
    00002235: 	movq	-0x58(%rbp), %rdx
    00002239: 	movq	-0x60(%rbp), %rsi
    0000223d: 	movq	-0x140(%rbp), %rdi
    00002244: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8772
    00002249: 	movq	%rax, %rdi
    0000224c: 	leaq	DATAat0x491ab(%rip), %rsi
    00002253: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 8787
    00002258: 	jmp	.Ltmp832 # Offset: 8792
.Ltmp829:
    0000225d: 	movq	-0x148(%rbp), %rdi
    00002264: 	movl	%r12d, -0x120(%rbp)
    0000226b: 	movq	%r14, %r13
    0000226e: 	movq	-0x150(%rbp), %r12
    00002275: 	movl	%r15d, -0x148(%rbp)
    0000227c: 	movl	%eax, %r15d
    0000227f: 	movq	%rdi, -0x118(%rbp)
.Ltmp895:
    00002286: 	callq	clock@PLT # Offset: 8838
    0000228b: 	pxor	%xmm0, %xmm0
    0000228f: 	movzwl	-0x158(%rbp), %r14d
    00002297: 	subw	0x125f2(%r13), %r14w
    0000229f: 	movq	%rax, end_time(%rip)
    000022a6: 	subq	start_time(%rip), %rax
    000022ad: 	cvtsi2sd	%rax, %xmm0
    000022b2: 	movl	-0x120(%rbp), %eax
    000022b8: 	cmpl	iterations(%rip), %eax
    000022be: 	divsd	DATAat0x49520(%rip), %xmm0
    000022c6: 	movsd	%xmm0, -0x150(%rbp)
    000022ce: 	jl	.Ltmp833 # Offset: 8910
    000022d4: 	cmpl	$0xa, -0x148(%rbp)
    000022db: 	jle	.Ltmp833 # Offset: 8923
    000022e1: 	cmpw	$0x1, %r15w
    000022e6: 	jle	.Ltmp833 # Offset: 8934
    000022ec: 	movq	-0x58(%rbp), %rdx
    000022f0: 	movq	-0x60(%rbp), %rsi
    000022f4: 	movq	-0x140(%rbp), %rdi
    000022fb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8955
    00002300: 	movq	%rax, %rdi
    00002303: 	leaq	DATAat0x49199(%rip), %rsi
    0000230a: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 8970
.Ltmp879:
    0000230f: 	movq	-0x140(%rbp), %r13
    00002316: 	movl	$0x4, %edx
    0000231b: 	leaq	DATAat0x491b6(%rip), %rsi
    00002322: 	movq	%r13, %rdi
    00002325: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8997
    0000232a: 	movl	-0x120(%rbp), %esi
    00002330: 	movq	%r13, %rdi
    00002333: 	callq	_ZNSolsEi@PLT # Offset: 9011
    00002338: 	movq	%rax, %rdi
    0000233b: 	leaq	DATAat0x491bb(%rip), %rsi
    00002342: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 9026
    00002347: 	movl	$0xa, %edx
    0000234c: 	leaq	DATAat0x491c7(%rip), %rsi
    00002353: 	movq	%r13, %rdi
    00002356: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9046
    0000235b: 	movl	-0x148(%rbp), %esi
    00002361: 	movq	%r13, %rdi
    00002364: 	callq	_ZNSolsEi@PLT # Offset: 9060
    00002369: 	movl	$0x7, %edx
    0000236e: 	leaq	DATAat0x491d2(%rip), %rsi
    00002375: 	movq	%rax, %rdi
    00002378: 	movq	%rax, %r13
    0000237b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9083
    00002380: 	movswl	%r15w, %esi
    00002384: 	movq	%r13, %rdi
    00002387: 	callq	_ZNSolsEs@PLT # Offset: 9095
    0000238c: 	movl	$0x10, %edx
    00002391: 	leaq	DATAat0x491da(%rip), %rsi
    00002398: 	movq	%rax, %rdi
    0000239b: 	movq	%rax, %r13
    0000239e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9118
    000023a3: 	movswl	%r14w, %esi
    000023a7: 	movq	%r13, %rdi
    000023aa: 	callq	_ZNSolsEs@PLT # Offset: 9130
    000023af: 	movl	$0x8, %edx
    000023b4: 	leaq	DATAat0x491eb(%rip), %rsi
    000023bb: 	movq	%rax, %rdi
    000023be: 	movq	%rax, %r13
    000023c1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9153
    000023c6: 	movsd	-0x150(%rbp), %xmm0
    000023ce: 	movq	%r13, %rdi
    000023d1: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 9169
    000023d6: 	movq	%rax, %rdi
    000023d9: 	leaq	DATAat0x491f4(%rip), %rsi
    000023e0: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 9184
    000023e5: 	movl	-0x160(%rbp), %eax
    000023eb: 	movq	-0x60(%rbp), %rdi
    000023ef: 	movl	%eax, iterations(%rip)
    000023f5: 	cmpq	-0x128(%rbp), %rdi
    000023fc: 	je	.Ltmp834 # Offset: 9212
    000023fe: 	movq	-0x50(%rbp), %rax
    00002402: 	leaq	0x1(%rax), %rsi
    00002406: 	callq	_ZdlPvm@PLT # Offset: 9222
.Ltmp834:
    0000240b: 	movq	-0x130(%rbp), %rsi
    00002412: 	leaq	DATAat0x4929b(%rip), %rdx
    00002419: 	movq	%rbx, %rdi
    0000241c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9244
    00002421: 	subq	$0x8, %rsp
    00002425: 	movq	%rbx, %r9
    00002428: 	movl	$0xfa, %r8d
    0000242e: 	movq	%r12, %rsi
    00002431: 	pushq	$0x1
    00002433: 	movl	$0xfa, %ecx
    00002438: 	movl	$0x12c, %edx
    0000243d: 	movq	-0x118(%rbp), %rdi
    00002444: 	callq	_Z20convergenceLaplace2DIsi17jacobi2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 9284
    00002449: 	popq	%r9
    0000244b: 	movq	-0x60(%rbp), %rdi
    0000244f: 	popq	%r10
    00002451: 	cmpq	-0x128(%rbp), %rdi
    00002458: 	je	.Ltmp835 # Offset: 9304
    0000245a: 	movq	-0x50(%rbp), %rax
    0000245e: 	leaq	0x1(%rax), %rsi
    00002462: 	callq	_ZdlPvm@PLT # Offset: 9314
.Ltmp835:
    00002467: 	movq	-0x130(%rbp), %rsi
    0000246e: 	leaq	DATAat0x492af(%rip), %rdx
    00002475: 	movq	%rbx, %rdi
    00002478: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9336
    0000247d: 	subq	$0x8, %rsp
    00002481: 	movq	%rbx, %r9
    00002484: 	movl	$0xfa, %r8d
    0000248a: 	movq	%r12, %rsi
    0000248d: 	pushq	$0x1
    0000248f: 	movl	$0xfa, %ecx
    00002494: 	movl	$0x12c, %edx
    00002499: 	movq	-0x118(%rbp), %rdi
    000024a0: 	callq	_Z20convergenceLaplace2DIsi18jacobi2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 9376
    000024a5: 	popq	%rdi
    000024a6: 	movq	-0x60(%rbp), %rdi
    000024aa: 	popq	%r8
    000024ac: 	cmpq	-0x128(%rbp), %rdi
    000024b3: 	je	.Ltmp836 # Offset: 9395
    000024b5: 	movq	-0x50(%rbp), %rax
    000024b9: 	leaq	0x1(%rax), %rsi
    000024bd: 	callq	_ZdlPvm@PLT # Offset: 9405
.Ltmp836:
    000024c2: 	movq	-0x130(%rbp), %rsi
    000024c9: 	leaq	DATAat0x492c4(%rip), %rdx
    000024d0: 	movq	%rbx, %rdi
    000024d3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9427
    000024d8: 	subq	$0x8, %rsp
    000024dc: 	movq	%rbx, %r9
    000024df: 	movl	$0xfa, %r8d
    000024e5: 	movq	%r12, %rsi
    000024e8: 	pushq	$0x1
    000024ea: 	movl	$0xfa, %ecx
    000024ef: 	movl	$0x12c, %edx
    000024f4: 	movq	-0x118(%rbp), %rdi
    000024fb: 	callq	_Z20convergenceLaplace2DIsi18jacobi2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 9467
    00002500: 	popq	%rcx
    00002501: 	movq	-0x60(%rbp), %rdi
    00002505: 	popq	%rsi
    00002506: 	cmpq	-0x128(%rbp), %rdi
    0000250d: 	je	.Ltmp837 # Offset: 9485
    0000250f: 	movq	-0x50(%rbp), %rax
    00002513: 	leaq	0x1(%rax), %rsi
    00002517: 	callq	_ZdlPvm@PLT # Offset: 9495
.Ltmp837:
    0000251c: 	movq	-0x130(%rbp), %rsi
    00002523: 	leaq	DATAat0x492f0(%rip), %rdx
    0000252a: 	movq	%rbx, %rdi
    0000252d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9517
    00002532: 	movq	%rbx, %r9
    00002535: 	movl	$0x5dc, %ecx
    0000253a: 	movl	$0x7d0, %edx
    0000253f: 	movq	%r12, %rsi
    00002542: 	movq	-0x118(%rbp), %rdi
    00002549: 	movl	$0x5dc, %r8d
    0000254f: 	callq	_Z13testLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9551
    00002554: 	movq	-0x60(%rbp), %rdi
    00002558: 	cmpq	-0x128(%rbp), %rdi
    0000255f: 	je	.Ltmp838 # Offset: 9567
    00002561: 	movq	-0x50(%rbp), %rax
    00002565: 	leaq	0x1(%rax), %rsi
    00002569: 	callq	_ZdlPvm@PLT # Offset: 9577
.Ltmp838:
    0000256e: 	movq	-0x130(%rbp), %rsi
    00002575: 	leaq	DATAat0x49306(%rip), %rdx
    0000257c: 	movq	%rbx, %rdi
    0000257f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9599
    00002584: 	movq	%rbx, %r9
    00002587: 	movl	$0x5dc, %ecx
    0000258c: 	movl	$0x7d0, %edx
    00002591: 	movq	%r12, %rsi
    00002594: 	movq	-0x118(%rbp), %rdi
    0000259b: 	movl	$0x5dc, %r8d
    000025a1: 	callq	_Z13testLaplace2DIsi20jacobi_sor2D_swappedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9633
    000025a6: 	movq	-0x60(%rbp), %rdi
    000025aa: 	cmpq	-0x128(%rbp), %rdi
    000025b1: 	je	.Ltmp839 # Offset: 9649
    000025b3: 	movq	-0x50(%rbp), %rax
    000025b7: 	leaq	0x1(%rax), %rsi
    000025bb: 	callq	_ZdlPvm@PLT # Offset: 9659
.Ltmp839:
    000025c0: 	movq	-0x130(%rbp), %rsi
    000025c7: 	leaq	DATAat0x4931d(%rip), %rdx
    000025ce: 	movq	%rbx, %rdi
    000025d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9681
    000025d6: 	movq	-0x118(%rbp), %r14
    000025dd: 	movl	$0x5dc, %edx
    000025e2: 	movl	$0x7d0, %esi
    000025e7: 	movq	-0x138(%rbp), %rcx
    000025ee: 	movq	DATAat0x49530(%rip), %rax
    000025f5: 	movq	%r14, %rdi
    000025f8: 	movq	%rax, -0x80(%rbp)
    000025fc: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 9724
    00002601: 	movl	$0x5b8d80, %edx
    00002606: 	movq	%r14, %rsi
    00002609: 	movq	%r12, %rdi
    0000260c: 	callq	memcpy@PLT # Offset: 9740
    00002611: 	callq	clock@PLT # Offset: 9745
    00002616: 	movq	%r12, %r10
    00002619: 	movq	%r14, %r9
    0000261c: 	xorl	%r11d, %r11d
    0000261f: 	movl	iterations(%rip), %r15d
    00002626: 	movq	%rax, start_time(%rip)
    0000262d: 	movq	$-0xbb4, %r8
    00002634: 	movq	-0x118(%rbp), %rcx
    0000263b: 	testl	%r15d, %r15d
    0000263e: 	jle	.Ltmp840 # Offset: 9790
.Ltmp844:
    00002644: 	movq	$-0x5b7610, %rax
    0000264b: 	leaq	-0xbb8(%r9), %r13
    00002652: 	leaq	0xbb8(%r9), %rdi
    00002659: 	movq	%rcx, %rdx
    0000265c: 	nopl	(%rax) # Size: 4
.Ltmp842:
    00002660: 	movq	%rdx, -0x118(%rbp)
    00002667: 	movq	%rax, %rcx
    0000266a: 	movq	%r8, %rsi
    0000266d: 	negq	%rcx
    00002670: 	subq	%rax, %rsi
.Ltmp841:
    00002673: 	movswl	0xbb4(%r13,%rcx), %edx
    0000267c: 	movswl	0xbb2(%r9,%rcx), %r14d
    00002685: 	addl	%edx, %r14d
    00002688: 	movswl	0xbb6(%r9,%rcx), %edx
    00002691: 	addl	%r14d, %edx
    00002694: 	movswl	0xbb4(%rdi,%rcx), %r14d
    0000269d: 	addl	%edx, %r14d
    000026a0: 	leal	0x5(%r14), %edx
    000026a4: 	addl	$0x2, %r14d
    000026a8: 	cmovnsl	%r14d, %edx
    000026ac: 	sarl	$0x2, %edx
    000026af: 	subw	0xbb4(%r10,%rcx), %dx
    000026b8: 	movswl	%dx, %edx
    000026bb: 	imull	$0x71, %edx, %edx
    000026be: 	sarl	$0x6, %edx
    000026c1: 	addw	0xbb4(%r10,%rcx), %dx
    000026ca: 	movw	%dx, 0xbb4(%r10,%rcx)
    000026d3: 	subq	$0x2, %rcx
    000026d7: 	cmpq	%rcx, %rsi
    000026da: 	jne	.Ltmp841 # Offset: 9946
    000026dc: 	movq	-0x118(%rbp), %rdx
    000026e3: 	addq	$0xbb8, %rax
    000026e9: 	jne	.Ltmp842 # Offset: 9961
    000026ef: 	addl	$0x1, %r11d
    000026f3: 	movq	%r10, %rax
    000026f6: 	movq	%rdx, %rcx
    000026f9: 	movq	%r9, %r10
    000026fc: 	cmpl	%r15d, %r11d
    000026ff: 	je	.Ltmp843 # Offset: 9983
    00002701: 	movq	%rax, %r9
    00002704: 	jmp	.Ltmp844 # Offset: 9988
.Ltmp843:
    00002709: 	movq	%rdx, -0x118(%rbp)
.Ltmp840:
    00002710: 	movq	%rbx, %rsi
    00002713: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000271a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10010
    0000271f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002726: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000272d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002734: 	je	.Ltmp845 # Offset: 10036
.Ltmp899:
    0000273a: 	movq	-0x20(%rax), %r13
    0000273e: 	callq	clock@PLT # Offset: 10046
    00002743: 	pxor	%xmm0, %xmm0
    00002747: 	movq	%rax, end_time(%rip)
    0000274e: 	movq	%r13, %rdi
    00002751: 	subq	start_time(%rip), %rax
    00002758: 	cvtsi2sd	%rax, %xmm0
    0000275d: 	divsd	DATAat0x49520(%rip), %xmm0
    00002765: 	callq	_Z13record_resultdPKc # Offset: 10085
    0000276a: 	movq	-0x60(%rbp), %rdi
    0000276e: 	cmpq	-0x128(%rbp), %rdi
    00002775: 	je	.Ltmp846 # Offset: 10101
    00002777: 	movq	-0x50(%rbp), %rax
    0000277b: 	leaq	0x1(%rax), %rsi
    0000277f: 	callq	_ZdlPvm@PLT # Offset: 10111
.Ltmp846:
    00002784: 	movq	-0x130(%rbp), %rsi
    0000278b: 	leaq	DATAat0x49335(%rip), %rdx
    00002792: 	movq	%rbx, %rdi
    00002795: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10133
    0000279a: 	movq	-0x118(%rbp), %r14
    000027a1: 	movl	$0x5dc, %edx
    000027a6: 	movl	$0x7d0, %esi
    000027ab: 	movq	-0x138(%rbp), %rcx
    000027b2: 	movq	DATAat0x49530(%rip), %rax
    000027b9: 	movq	%r14, %rdi
    000027bc: 	movq	%rax, -0x80(%rbp)
    000027c0: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 10176
    000027c5: 	movl	$0x5b8d80, %edx
    000027ca: 	movq	%r14, %rsi
    000027cd: 	movq	%r12, %rdi
    000027d0: 	callq	memcpy@PLT # Offset: 10192
    000027d5: 	callq	clock@PLT # Offset: 10197
    000027da: 	movq	%r12, %r10
    000027dd: 	movq	%r14, %r9
    000027e0: 	xorl	%r11d, %r11d
    000027e3: 	movl	iterations(%rip), %r15d
    000027ea: 	movq	%rax, start_time(%rip)
    000027f1: 	movq	$-0xbb4, %r8
    000027f8: 	movq	-0x118(%rbp), %rcx
    000027ff: 	testl	%r15d, %r15d
    00002802: 	jle	.Ltmp847 # Offset: 10242
.Ltmp851:
    00002808: 	movq	$-0xbb8, %rax
    0000280f: 	leaq	-0xbb8(%r9), %r13
    00002816: 	leaq	0xbb8(%r9), %rdi
    0000281d: 	movq	%rcx, %rdx
.Ltmp849:
    00002820: 	movq	%rdx, -0x118(%rbp)
    00002827: 	movq	%rax, %rcx
    0000282a: 	movq	%r8, %rsi
    0000282d: 	negq	%rcx
    00002830: 	subq	%rax, %rsi
.Ltmp848:
    00002833: 	movswl	0xbb4(%r13,%rcx), %edx
    0000283c: 	movswl	0xbb2(%r9,%rcx), %r14d
    00002845: 	addl	%edx, %r14d
    00002848: 	movswl	0xbb6(%r9,%rcx), %edx
    00002851: 	addl	%r14d, %edx
    00002854: 	movswl	0xbb4(%rdi,%rcx), %r14d
    0000285d: 	addl	%edx, %r14d
    00002860: 	leal	0x5(%r14), %edx
    00002864: 	addl	$0x2, %r14d
    00002868: 	cmovnsl	%r14d, %edx
    0000286c: 	sarl	$0x2, %edx
    0000286f: 	subw	0xbb4(%r10,%rcx), %dx
    00002878: 	movswl	%dx, %edx
    0000287b: 	imull	$0x71, %edx, %edx
    0000287e: 	sarl	$0x6, %edx
    00002881: 	addw	0xbb4(%r10,%rcx), %dx
    0000288a: 	movw	%dx, 0xbb4(%r10,%rcx)
    00002893: 	subq	$0x2, %rcx
    00002897: 	cmpq	%rcx, %rsi
    0000289a: 	jne	.Ltmp848 # Offset: 10394
    0000289c: 	subq	$0xbb8, %rax
    000028a2: 	movq	-0x118(%rbp), %rdx
    000028a9: 	cmpq	$-0x5b81c8, %rax
    000028af: 	jne	.Ltmp849 # Offset: 10415
    000028b5: 	addl	$0x1, %r11d
    000028b9: 	movq	%r10, %rax
    000028bc: 	movq	%rdx, %rcx
    000028bf: 	movq	%r9, %r10
    000028c2: 	cmpl	%r15d, %r11d
    000028c5: 	je	.Ltmp850 # Offset: 10437
    000028c7: 	movq	%rax, %r9
    000028ca: 	jmp	.Ltmp851 # Offset: 10442
.Ltmp850:
    000028cf: 	movq	%rdx, -0x118(%rbp)
.Ltmp847:
    000028d6: 	movq	%rbx, %rsi
    000028d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000028e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10464
    000028e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000028ec: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000028f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000028fa: 	je	.Ltmp852 # Offset: 10490
.Ltmp906:
    00002900: 	movq	-0x20(%rax), %r13
    00002904: 	callq	clock@PLT # Offset: 10500
    00002909: 	pxor	%xmm0, %xmm0
    0000290d: 	movq	%rax, end_time(%rip)
    00002914: 	movq	%r13, %rdi
    00002917: 	subq	start_time(%rip), %rax
    0000291e: 	cvtsi2sd	%rax, %xmm0
    00002923: 	divsd	DATAat0x49520(%rip), %xmm0
    0000292b: 	callq	_Z13record_resultdPKc # Offset: 10539
    00002930: 	movq	-0x60(%rbp), %rdi
    00002934: 	cmpq	-0x128(%rbp), %rdi
    0000293b: 	je	.Ltmp853 # Offset: 10555
    0000293d: 	movq	-0x50(%rbp), %rax
    00002941: 	leaq	0x1(%rax), %rsi
    00002945: 	callq	_ZdlPvm@PLT # Offset: 10565
.Ltmp853:
    0000294a: 	movq	-0x130(%rbp), %rsi
    00002951: 	leaq	DATAat0x4934e(%rip), %rdx
    00002958: 	movq	%rbx, %rdi
    0000295b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10587
    00002960: 	movq	%rbx, %r9
    00002963: 	movl	$0x5dc, %ecx
    00002968: 	movl	$0x7d0, %edx
    0000296d: 	movq	%r12, %rsi
    00002970: 	movq	-0x118(%rbp), %rdi
    00002977: 	movl	$0x5dc, %r8d
    0000297d: 	callq	_Z13testLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10621
    00002982: 	movq	-0x60(%rbp), %rdi
    00002986: 	cmpq	-0x128(%rbp), %rdi
    0000298d: 	je	.Ltmp854 # Offset: 10637
    0000298f: 	movq	-0x50(%rbp), %rax
    00002993: 	leaq	0x1(%rax), %rsi
    00002997: 	callq	_ZdlPvm@PLT # Offset: 10647
.Ltmp854:
    0000299c: 	movq	-0x130(%rbp), %rsi
    000029a3: 	leaq	DATAat0x49367(%rip), %rdx
    000029aa: 	movq	%rbx, %rdi
    000029ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10669
    000029b2: 	movq	-0x118(%rbp), %r14
    000029b9: 	movq	-0x138(%rbp), %rcx
    000029c0: 	movl	$0x5dc, %edx
    000029c5: 	movq	%r12, %r15
    000029c8: 	movq	DATAat0x49530(%rip), %rax
    000029cf: 	movl	$0x7d0, %esi
    000029d4: 	movq	%r14, %rdi
    000029d7: 	movq	%rax, -0x80(%rbp)
    000029db: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 10715
    000029e0: 	movq	%r14, %rsi
    000029e3: 	movq	%r12, %rdi
    000029e6: 	movl	$0x5b8d80, %edx
    000029eb: 	callq	memcpy@PLT # Offset: 10731
    000029f0: 	callq	clock@PLT # Offset: 10736
    000029f5: 	movl	iterations(%rip), %r13d
    000029fc: 	movq	%r14, %rdi
    000029ff: 	xorl	%r14d, %r14d
    00002a02: 	movq	%rax, start_time(%rip)
    00002a09: 	testl	%r13d, %r13d
    00002a0c: 	jg	.Ltmp855 # Offset: 10764
    00002a0e: 	jmp	.Ltmp856 # Offset: 10766
.Ltmp857:
    00002a10: 	movq	%rax, %rdi
.Ltmp855:
    00002a13: 	movq	%r15, %rsi
    00002a16: 	movl	$0x5dc, %r8d
    00002a1c: 	movl	$0x5dc, %ecx
    00002a21: 	movl	$0x7d0, %edx
    00002a26: 	callq	"_ZN21jacobi_sor2D_unrolledIsiEclEPsS1_iiii.isra.0/1" # Offset: 10790
    00002a2b: 	addl	$0x1, %r14d
    00002a2f: 	movq	%r15, %rax
    00002a32: 	movq	%rdi, %r15
    00002a35: 	cmpl	%r13d, %r14d
    00002a38: 	jne	.Ltmp857 # Offset: 10808
.Ltmp856:
    00002a3a: 	movq	%rbx, %rsi
    00002a3d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002a44: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10820
    00002a49: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002a50: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002a57: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002a5e: 	je	.Ltmp858 # Offset: 10846
.Ltmp905:
    00002a64: 	movq	-0x20(%rax), %r13
    00002a68: 	callq	clock@PLT # Offset: 10856
    00002a6d: 	pxor	%xmm0, %xmm0
    00002a71: 	movq	%rax, end_time(%rip)
    00002a78: 	movq	%r13, %rdi
    00002a7b: 	subq	start_time(%rip), %rax
    00002a82: 	cvtsi2sd	%rax, %xmm0
    00002a87: 	divsd	DATAat0x49520(%rip), %xmm0
    00002a8f: 	callq	_Z13record_resultdPKc # Offset: 10895
    00002a94: 	movq	-0x60(%rbp), %rdi
    00002a98: 	cmpq	-0x128(%rbp), %rdi
    00002a9f: 	je	.Ltmp859 # Offset: 10911
    00002aa1: 	movq	-0x50(%rbp), %rax
    00002aa5: 	leaq	0x1(%rax), %rsi
    00002aa9: 	callq	_ZdlPvm@PLT # Offset: 10921
.Ltmp859:
    00002aae: 	movq	-0x130(%rbp), %rsi
    00002ab5: 	leaq	DATAat0x4937f(%rip), %rdx
    00002abc: 	movq	%rbx, %rdi
    00002abf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10943
    00002ac4: 	movq	-0x118(%rbp), %r14
    00002acb: 	movq	-0x138(%rbp), %rcx
    00002ad2: 	movl	$0x5dc, %edx
    00002ad7: 	movq	%r12, %r15
    00002ada: 	movq	DATAat0x49530(%rip), %rax
    00002ae1: 	movl	$0x7d0, %esi
    00002ae6: 	movq	%r14, %rdi
    00002ae9: 	movq	%rax, -0x80(%rbp)
    00002aed: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 10989
    00002af2: 	movq	%r14, %rsi
    00002af5: 	movq	%r12, %rdi
    00002af8: 	movl	$0x5b8d80, %edx
    00002afd: 	callq	memcpy@PLT # Offset: 11005
    00002b02: 	callq	clock@PLT # Offset: 11010
    00002b07: 	movl	iterations(%rip), %r13d
    00002b0e: 	movq	%r14, %rdi
    00002b11: 	xorl	%r14d, %r14d
    00002b14: 	movq	%rax, start_time(%rip)
    00002b1b: 	testl	%r13d, %r13d
    00002b1e: 	jg	.Ltmp860 # Offset: 11038
    00002b20: 	jmp	.Ltmp861 # Offset: 11040
    00002b22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp862:
    00002b28: 	movq	%rax, %rdi
.Ltmp860:
    00002b2b: 	movq	%r15, %rsi
    00002b2e: 	movl	$0x5dc, %r8d
    00002b34: 	movl	$0x5dc, %ecx
    00002b39: 	movl	$0x7d0, %edx
    00002b3e: 	callq	"_ZN22jacobi_sor2D_unrolled2IsiEclEPsS1_iiii.isra.0/1" # Offset: 11070
    00002b43: 	addl	$0x1, %r14d
    00002b47: 	movq	%r15, %rax
    00002b4a: 	movq	%rdi, %r15
    00002b4d: 	cmpl	%r13d, %r14d
    00002b50: 	jne	.Ltmp862 # Offset: 11088
.Ltmp861:
    00002b52: 	movq	%rbx, %rsi
    00002b55: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002b5c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11100
    00002b61: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002b68: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002b6f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002b76: 	je	.Ltmp863 # Offset: 11126
.Ltmp904:
    00002b7c: 	movq	-0x20(%rax), %r13
    00002b80: 	callq	clock@PLT # Offset: 11136
    00002b85: 	pxor	%xmm0, %xmm0
    00002b89: 	movq	%rax, end_time(%rip)
    00002b90: 	movq	%r13, %rdi
    00002b93: 	subq	start_time(%rip), %rax
    00002b9a: 	cvtsi2sd	%rax, %xmm0
    00002b9f: 	divsd	DATAat0x49520(%rip), %xmm0
    00002ba7: 	callq	_Z13record_resultdPKc # Offset: 11175
    00002bac: 	movq	-0x60(%rbp), %rdi
    00002bb0: 	cmpq	-0x128(%rbp), %rdi
    00002bb7: 	je	.Ltmp864 # Offset: 11191
    00002bb9: 	movq	-0x50(%rbp), %rax
    00002bbd: 	leaq	0x1(%rax), %rsi
    00002bc1: 	callq	_ZdlPvm@PLT # Offset: 11201
.Ltmp864:
    00002bc6: 	movq	-0x130(%rbp), %rsi
    00002bcd: 	leaq	DATAat0x49398(%rip), %rdx
    00002bd4: 	movq	%rbx, %rdi
    00002bd7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11223
    00002bdc: 	movq	-0x118(%rbp), %r14
    00002be3: 	movq	-0x138(%rbp), %rcx
    00002bea: 	movl	$0x5dc, %edx
    00002bef: 	movq	%r12, %r15
    00002bf2: 	movq	DATAat0x49530(%rip), %rax
    00002bf9: 	movl	$0x7d0, %esi
    00002bfe: 	movq	%r14, %rdi
    00002c01: 	movq	%rax, -0x80(%rbp)
    00002c05: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 11269
    00002c0a: 	movq	%r14, %rsi
    00002c0d: 	movq	%r12, %rdi
    00002c10: 	movl	$0x5b8d80, %edx
    00002c15: 	callq	memcpy@PLT # Offset: 11285
    00002c1a: 	callq	clock@PLT # Offset: 11290
    00002c1f: 	movl	iterations(%rip), %r13d
    00002c26: 	movq	%r14, %rdi
    00002c29: 	xorl	%r14d, %r14d
    00002c2c: 	movq	%rax, start_time(%rip)
    00002c33: 	testl	%r13d, %r13d
    00002c36: 	jg	.Ltmp865 # Offset: 11318
    00002c38: 	jmp	.Ltmp866 # Offset: 11320
    00002c3a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp867:
    00002c40: 	movq	%rax, %rdi
.Ltmp865:
    00002c43: 	movq	%r15, %rsi
    00002c46: 	movl	$0x5dc, %r8d
    00002c4c: 	movl	$0x5dc, %ecx
    00002c51: 	movl	$0x7d0, %edx
    00002c56: 	callq	"_ZN22jacobi_sor2D_unrolled3IsiEclEPsS1_iiii.isra.0/1" # Offset: 11350
    00002c5b: 	addl	$0x1, %r14d
    00002c5f: 	movq	%r15, %rax
    00002c62: 	movq	%rdi, %r15
    00002c65: 	cmpl	%r13d, %r14d
    00002c68: 	jne	.Ltmp867 # Offset: 11368
.Ltmp866:
    00002c6a: 	movq	%rbx, %rsi
    00002c6d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002c74: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11380
    00002c79: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002c80: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002c87: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002c8e: 	je	.Ltmp868 # Offset: 11406
.Ltmp903:
    00002c94: 	movq	-0x20(%rax), %r13
    00002c98: 	callq	clock@PLT # Offset: 11416
    00002c9d: 	pxor	%xmm0, %xmm0
    00002ca1: 	movq	%rax, end_time(%rip)
    00002ca8: 	movq	%r13, %rdi
    00002cab: 	subq	start_time(%rip), %rax
    00002cb2: 	cvtsi2sd	%rax, %xmm0
    00002cb7: 	divsd	DATAat0x49520(%rip), %xmm0
    00002cbf: 	callq	_Z13record_resultdPKc # Offset: 11455
    00002cc4: 	movq	-0x60(%rbp), %rdi
    00002cc8: 	cmpq	-0x128(%rbp), %rdi
    00002ccf: 	je	.Ltmp869 # Offset: 11471
    00002cd1: 	movq	-0x50(%rbp), %rax
    00002cd5: 	leaq	0x1(%rax), %rsi
    00002cd9: 	callq	_ZdlPvm@PLT # Offset: 11481
.Ltmp869:
    00002cde: 	movq	-0x130(%rbp), %r14
    00002ce5: 	movq	-0x138(%rbp), %rdi
    00002cec: 	leaq	DATAat0x493b1(%rip), %rdx
    00002cf3: 	movq	%r14, %rsi
    00002cf6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11510
    00002cfb: 	movl	iterations(%rip), %edx
    00002d01: 	movq	-0x80(%rbp), %rdi
    00002d05: 	xorl	%r8d, %r8d
    00002d08: 	xorl	%ecx, %ecx
    00002d0a: 	movl	$0x2dc6c0, %esi
    00002d0f: 	callq	_Z9summarizePKciiii # Offset: 11535
    00002d14: 	leaq	DATAat0x492f0(%rip), %rdx
    00002d1b: 	movq	%r14, %rsi
    00002d1e: 	movq	%rbx, %rdi
    00002d21: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11553
    00002d26: 	subq	$0x8, %rsp
    00002d2a: 	movq	%rbx, %r9
    00002d2d: 	movl	$0xfa, %r8d
    00002d33: 	movq	%r12, %rsi
    00002d36: 	pushq	$0x1
    00002d38: 	movl	$0xfa, %ecx
    00002d3d: 	movl	$0x12c, %edx
    00002d42: 	movq	-0x118(%rbp), %rdi
    00002d49: 	callq	_Z20convergenceLaplace2DIsi19jacobi_sor2D_simpleIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 11593
    00002d4e: 	popq	%rax
    00002d4f: 	movq	-0x60(%rbp), %rdi
    00002d53: 	popq	%rdx
    00002d54: 	cmpq	-0x128(%rbp), %rdi
    00002d5b: 	je	.Ltmp870 # Offset: 11611
    00002d5d: 	movq	-0x50(%rbp), %rax
    00002d61: 	leaq	0x1(%rax), %rsi
    00002d65: 	callq	_ZdlPvm@PLT # Offset: 11621
.Ltmp870:
    00002d6a: 	movq	-0x130(%rbp), %rsi
    00002d71: 	leaq	DATAat0x49306(%rip), %rdx
    00002d78: 	movq	%rbx, %rdi
    00002d7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11643
    00002d80: 	movl	$0xfa, %edx
    00002d85: 	movl	$0x12c, %esi
    00002d8a: 	movq	%r12, %r15
    00002d8d: 	xorl	%r13d, %r13d
    00002d90: 	movq	-0x118(%rbp), %r14
    00002d97: 	movq	DATAat0x49530(%rip), %rax
    00002d9e: 	leaq	-0xe8(%rbp), %rcx
    00002da5: 	movq	%r14, %rdi
    00002da8: 	movq	%rax, -0xe8(%rbp)
    00002daf: 	callq	_Z29laplace_initial_condition_setIsET_PS0_iiPKS0_ # Offset: 11695
    00002db4: 	movq	%r12, %rdi
    00002db7: 	movl	$0x249f0, %edx
    00002dbc: 	movq	%r14, %rsi
    00002dbf: 	movw	%ax, -0x158(%rbp)
    00002dc6: 	callq	memcpy@PLT # Offset: 11718
    00002dcb: 	movl	iterations(%rip), %eax
    00002dd1: 	movl	$0x2710, iterations(%rip)
    00002ddb: 	movl	%eax, -0x160(%rbp)
    00002de1: 	callq	clock@PLT # Offset: 11745
    00002de6: 	pxor	%xmm4, %xmm4
    00002dea: 	movq	%rax, start_time(%rip)
    00002df1: 	movl	iterations(%rip), %eax
    00002df7: 	movl	%eax, %edi
    00002df9: 	testl	%eax, %eax
    00002dfb: 	jle	.Ltmp871 # Offset: 11771
    00002e01: 	movq	-0x118(%rbp), %rax
    00002e08: 	movl	%r13d, -0x118(%rbp)
    00002e0f: 	movq	%rbx, %r13
    00002e12: 	movl	%edi, %ebx
    00002e14: 	movq	%r12, -0x150(%rbp)
    00002e1b: 	movq	%r14, %r12
    00002e1e: 	movq	%rax, -0x148(%rbp)
    00002e25: 	movl	-0x118(%rbp), %eax
    00002e2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp878:
    00002e30: 	leaq	0x1f4(%r12), %r10
    00002e38: 	leaq	0x247fe(%r15), %r8
    00002e3f: 	movl	$0x1, %r9d
    00002e45: 	movl	%eax, %esi
    00002e47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp873:
    00002e50: 	addl	$0x1, %r9d
    00002e54: 	leaq	-0x24608(%r8), %rcx
    00002e5b: 	movq	%r10, %rdx
    00002e5e: 	movl	%esi, %edi
.Ltmp872:
    00002e60: 	movswl	-0x1f2(%rdx), %eax
    00002e67: 	movswl	(%rdx), %esi
    00002e6a: 	addl	%eax, %esi
    00002e6c: 	movswl	0x4(%rdx), %eax
    00002e70: 	addl	%esi, %eax
    00002e72: 	movswl	0x1f6(%rdx), %esi
    00002e79: 	addl	%eax, %esi
    00002e7b: 	leal	0x5(%rsi), %eax
    00002e7e: 	addl	$0x2, %esi
    00002e81: 	cmovnsl	%esi, %eax
    00002e84: 	addq	$0x1f4, %rcx
    00002e8b: 	addq	$0x1f4, %rdx
    00002e92: 	sarl	$0x2, %eax
    00002e95: 	subw	-0x1f4(%rcx), %ax
    00002e9c: 	cwtl
    00002e9d: 	imull	$0x71, %eax, %eax
    00002ea0: 	sarl	$0x6, %eax
    00002ea3: 	addw	-0x1f4(%rcx), %ax
    00002eaa: 	movw	%ax, -0x1f4(%rcx)
    00002eb1: 	cmpq	%rcx, %r8
    00002eb4: 	jne	.Ltmp872 # Offset: 11956
    00002eb6: 	movl	%edi, %esi
    00002eb8: 	addq	$0x2, %r10
    00002ebc: 	addq	$0x2, %r8
    00002ec0: 	cmpl	$0xf9, %r9d
    00002ec7: 	jne	.Ltmp873 # Offset: 11975
    00002ec9: 	xorl	%eax, %eax
    00002ecb: 	pxor	%xmm1, %xmm1
    00002ecf: 	nop # Size: 1
.Ltmp874:
    00002ed0: 	movdqu	(%r15,%rax), %xmm5
    00002ed6: 	movdqu	(%r12,%rax), %xmm3
    00002edc: 	movdqa	%xmm4, %xmm0
    00002ee0: 	psubw	%xmm5, %xmm3
    00002ee4: 	movdqa	%xmm5, %xmm2
    00002ee8: 	movdqu	(%r12,%rax), %xmm5
    00002eee: 	addq	$0x10, %rax
    00002ef2: 	pcmpgtw	%xmm3, %xmm0
    00002ef6: 	psubw	%xmm5, %xmm2
    00002efa: 	pand	%xmm0, %xmm2
    00002efe: 	pandn	%xmm3, %xmm0
    00002f02: 	movdqa	%xmm4, %xmm3
    00002f06: 	por	%xmm2, %xmm0
    00002f0a: 	pcmpgtw	%xmm0, %xmm3
    00002f0e: 	movdqa	%xmm0, %xmm2
    00002f12: 	punpcklwd	%xmm3, %xmm2
    00002f16: 	punpckhwd	%xmm3, %xmm0
    00002f1a: 	paddd	%xmm2, %xmm1
    00002f1e: 	paddd	%xmm0, %xmm1
    00002f22: 	cmpq	$0x249f0, %rax
    00002f28: 	jne	.Ltmp874 # Offset: 12072
    00002f2a: 	movdqa	%xmm1, %xmm0
    00002f2e: 	movl	%esi, -0x118(%rbp)
    00002f34: 	movl	$0x124f8, %edx
    00002f39: 	movq	%r15, %rsi
    00002f3c: 	psrldq	$0x8, %xmm0
    00002f41: 	movq	%r12, %rdi
    00002f44: 	paddd	%xmm0, %xmm1
    00002f48: 	movdqa	%xmm1, %xmm0
    00002f4c: 	psrldq	$0x4, %xmm0
    00002f51: 	paddd	%xmm0, %xmm1
    00002f55: 	movd	%xmm1, %r14d
    00002f5a: 	callq	_Z14max_differenceIsET_PKS0_S2_m # Offset: 12122
    00002f5f: 	cmpl	$0x1, -0x118(%rbp)
    00002f66: 	pxor	%xmm4, %xmm4
    00002f6a: 	jle	.Ltmp875 # Offset: 12138
    00002f6c: 	cmpl	$0x9, %r14d
    00002f70: 	jle	.Ltmp876 # Offset: 12144
    00002f72: 	testw	%ax, %ax
    00002f75: 	jle	.Ltmp876 # Offset: 12149
.Ltmp875:
    00002f77: 	addl	$0x1, -0x118(%rbp)
    00002f7e: 	movl	-0x118(%rbp), %edi
    00002f84: 	movq	%r15, %rdx
    00002f87: 	movq	%r12, %r15
    00002f8a: 	cmpl	%edi, %ebx
    00002f8c: 	je	.Ltmp877 # Offset: 12172
    00002f92: 	movq	%rdx, %r12
    00002f95: 	movl	%edi, %eax
    00002f97: 	jmp	.Ltmp878 # Offset: 12183
.Ltmp833:
    00002f9c: 	movq	-0x58(%rbp), %rdx
    00002fa0: 	movq	-0x60(%rbp), %rsi
    00002fa4: 	movq	-0x140(%rbp), %rdi
    00002fab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12203
    00002fb0: 	movq	%rax, %rdi
    00002fb3: 	leaq	DATAat0x491ab(%rip), %rsi
    00002fba: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 12218
    00002fbf: 	jmp	.Ltmp879 # Offset: 12223
.Ltmp876:
    00002fc4: 	movw	%ax, -0x120(%rbp)
    00002fcb: 	movq	-0x148(%rbp), %rax
    00002fd2: 	movq	%r13, %rbx
    00002fd5: 	movl	-0x118(%rbp), %r13d
    00002fdc: 	movq	-0x150(%rbp), %r12
    00002fe3: 	movl	%r14d, -0x138(%rbp)
    00002fea: 	movq	%r15, %r14
    00002fed: 	movq	%rax, -0x118(%rbp)
.Ltmp896:
    00002ff4: 	callq	clock@PLT # Offset: 12276
    00002ff9: 	pxor	%xmm0, %xmm0
    00002ffd: 	movq	%rax, end_time(%rip)
    00003004: 	subq	start_time(%rip), %rax
    0000300b: 	cvtsi2sd	%rax, %xmm0
    00003010: 	movzwl	-0x158(%rbp), %eax
    00003017: 	subw	0x125f2(%r14), %ax
    0000301f: 	divsd	DATAat0x49520(%rip), %xmm0
    00003027: 	cmpl	iterations(%rip), %r13d
    0000302e: 	movq	%xmm0, %r15
    00003033: 	movl	%eax, %r14d
    00003036: 	jl	.Ltmp880 # Offset: 12342
    0000303c: 	cmpl	$0xa, -0x138(%rbp)
    00003043: 	jle	.Ltmp880 # Offset: 12355
    00003049: 	cmpw	$0x1, -0x120(%rbp)
    00003051: 	jle	.Ltmp880 # Offset: 12369
    00003057: 	movq	-0x58(%rbp), %rdx
    0000305b: 	movq	-0x60(%rbp), %rsi
    0000305f: 	movq	-0x140(%rbp), %rdi
    00003066: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12390
    0000306b: 	movq	%rax, %rdi
    0000306e: 	leaq	DATAat0x49199(%rip), %rsi
    00003075: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 12405
.Ltmp893:
    0000307a: 	movq	-0x140(%rbp), %rdi
    00003081: 	movl	$0x4, %edx
    00003086: 	leaq	DATAat0x491b6(%rip), %rsi
    0000308d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12429
    00003092: 	movl	%r13d, %esi
    00003095: 	movq	-0x140(%rbp), %r13
    0000309c: 	movq	%r13, %rdi
    0000309f: 	callq	_ZNSolsEi@PLT # Offset: 12447
    000030a4: 	movq	%rax, %rdi
    000030a7: 	leaq	DATAat0x491bb(%rip), %rsi
    000030ae: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 12462
    000030b3: 	movl	$0xa, %edx
    000030b8: 	leaq	DATAat0x491c7(%rip), %rsi
    000030bf: 	movq	%r13, %rdi
    000030c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12482
    000030c7: 	movl	-0x138(%rbp), %esi
    000030cd: 	movq	%r13, %rdi
    000030d0: 	callq	_ZNSolsEi@PLT # Offset: 12496
    000030d5: 	movl	$0x7, %edx
    000030da: 	leaq	DATAat0x491d2(%rip), %rsi
    000030e1: 	movq	%rax, %rdi
    000030e4: 	movq	%rax, %r13
    000030e7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12519
    000030ec: 	movswl	-0x120(%rbp), %esi
    000030f3: 	movq	%r13, %rdi
    000030f6: 	callq	_ZNSolsEs@PLT # Offset: 12534
    000030fb: 	movl	$0x10, %edx
    00003100: 	leaq	DATAat0x491da(%rip), %rsi
    00003107: 	movq	%rax, %rdi
    0000310a: 	movq	%rax, %r13
    0000310d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12557
    00003112: 	movswl	%r14w, %esi
    00003116: 	movq	%r13, %rdi
    00003119: 	callq	_ZNSolsEs@PLT # Offset: 12569
    0000311e: 	movl	$0x8, %edx
    00003123: 	leaq	DATAat0x491eb(%rip), %rsi
    0000312a: 	movq	%rax, %rdi
    0000312d: 	movq	%rax, %r13
    00003130: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12592
    00003135: 	movq	%r15, %xmm0
    0000313a: 	movq	%r13, %rdi
    0000313d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12605
    00003142: 	movq	%rax, %rdi
    00003145: 	leaq	DATAat0x491f4(%rip), %rsi
    0000314c: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 12620
    00003151: 	movl	-0x160(%rbp), %eax
    00003157: 	movq	-0x60(%rbp), %rdi
    0000315b: 	movl	%eax, iterations(%rip)
    00003161: 	cmpq	-0x128(%rbp), %rdi
    00003168: 	je	.Ltmp881 # Offset: 12648
    0000316a: 	movq	-0x50(%rbp), %rax
    0000316e: 	leaq	0x1(%rax), %rsi
    00003172: 	callq	_ZdlPvm@PLT # Offset: 12658
.Ltmp881:
    00003177: 	movq	-0x130(%rbp), %rsi
    0000317e: 	leaq	DATAat0x4931d(%rip), %rdx
    00003185: 	movq	%rbx, %rdi
    00003188: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12680
    0000318d: 	subq	$0x8, %rsp
    00003191: 	movq	%rbx, %r9
    00003194: 	movl	$0xfa, %r8d
    0000319a: 	movq	%r12, %rsi
    0000319d: 	pushq	$0x1
    0000319f: 	movl	$0xfa, %ecx
    000031a4: 	movl	$0x12c, %edx
    000031a9: 	movq	-0x118(%rbp), %rdi
    000031b0: 	callq	_Z20convergenceLaplace2DIsi21jacobi_sor2D_reversedIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 12720
    000031b5: 	popq	%r14
    000031b7: 	movq	-0x60(%rbp), %rdi
    000031bb: 	popq	%r15
    000031bd: 	cmpq	-0x128(%rbp), %rdi
    000031c4: 	je	.Ltmp882 # Offset: 12740
    000031c6: 	movq	-0x50(%rbp), %rax
    000031ca: 	leaq	0x1(%rax), %rsi
    000031ce: 	callq	_ZdlPvm@PLT # Offset: 12750
.Ltmp882:
    000031d3: 	movq	-0x130(%rbp), %rsi
    000031da: 	leaq	DATAat0x49335(%rip), %rdx
    000031e1: 	movq	%rbx, %rdi
    000031e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12772
    000031e9: 	subq	$0x8, %rsp
    000031ed: 	movq	%rbx, %r9
    000031f0: 	movl	$0xfa, %r8d
    000031f6: 	movq	%r12, %rsi
    000031f9: 	pushq	$0x1
    000031fb: 	movl	$0xfa, %ecx
    00003200: 	movl	$0x12c, %edx
    00003205: 	movq	-0x118(%rbp), %rdi
    0000320c: 	callq	_Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedXIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 12812
    00003211: 	popq	%r11
    00003213: 	movq	-0x60(%rbp), %rdi
    00003217: 	popq	%r13
    00003219: 	cmpq	-0x128(%rbp), %rdi
    00003220: 	je	.Ltmp883 # Offset: 12832
    00003222: 	movq	-0x50(%rbp), %rax
    00003226: 	leaq	0x1(%rax), %rsi
    0000322a: 	callq	_ZdlPvm@PLT # Offset: 12842
.Ltmp883:
    0000322f: 	movq	-0x130(%rbp), %rsi
    00003236: 	leaq	DATAat0x4934e(%rip), %rdx
    0000323d: 	movq	%rbx, %rdi
    00003240: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12864
    00003245: 	subq	$0x8, %rsp
    00003249: 	movq	%rbx, %r9
    0000324c: 	movl	$0xfa, %r8d
    00003252: 	movq	%r12, %rsi
    00003255: 	pushq	$0x1
    00003257: 	movl	$0xfa, %ecx
    0000325c: 	movl	$0x12c, %edx
    00003261: 	movq	-0x118(%rbp), %rdi
    00003268: 	callq	_Z20convergenceLaplace2DIsi22jacobi_sor2D_reversedYIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 12904
    0000326d: 	popq	%r9
    0000326f: 	movq	-0x60(%rbp), %rdi
    00003273: 	popq	%r10
    00003275: 	cmpq	-0x128(%rbp), %rdi
    0000327c: 	je	.Ltmp884 # Offset: 12924
    0000327e: 	movq	-0x50(%rbp), %rax
    00003282: 	leaq	0x1(%rax), %rsi
    00003286: 	callq	_ZdlPvm@PLT # Offset: 12934
.Ltmp884:
    0000328b: 	movq	-0x130(%rbp), %rsi
    00003292: 	leaq	DATAat0x49367(%rip), %rdx
    00003299: 	movq	%rbx, %rdi
    0000329c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12956
    000032a1: 	subq	$0x8, %rsp
    000032a5: 	movq	%rbx, %r9
    000032a8: 	movl	$0xfa, %r8d
    000032ae: 	movq	%r12, %rsi
    000032b1: 	pushq	$0x1
    000032b3: 	movl	$0xfa, %ecx
    000032b8: 	movl	$0x12c, %edx
    000032bd: 	movq	-0x118(%rbp), %rdi
    000032c4: 	callq	_Z20convergenceLaplace2DIsi21jacobi_sor2D_unrolledIsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 12996
    000032c9: 	popq	%rdi
    000032ca: 	movq	-0x60(%rbp), %rdi
    000032ce: 	popq	%r8
    000032d0: 	cmpq	-0x128(%rbp), %rdi
    000032d7: 	je	.Ltmp885 # Offset: 13015
    000032d9: 	movq	-0x50(%rbp), %rax
    000032dd: 	leaq	0x1(%rax), %rsi
    000032e1: 	callq	_ZdlPvm@PLT # Offset: 13025
.Ltmp885:
    000032e6: 	movq	-0x130(%rbp), %rsi
    000032ed: 	leaq	DATAat0x4937f(%rip), %rdx
    000032f4: 	movq	%rbx, %rdi
    000032f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13047
    000032fc: 	subq	$0x8, %rsp
    00003300: 	movq	%rbx, %r9
    00003303: 	movl	$0xfa, %r8d
    00003309: 	movq	%r12, %rsi
    0000330c: 	pushq	$0x1
    0000330e: 	movl	$0xfa, %ecx
    00003313: 	movl	$0x12c, %edx
    00003318: 	movq	-0x118(%rbp), %rdi
    0000331f: 	callq	_Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled2IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13087
    00003324: 	popq	%rcx
    00003325: 	movq	-0x60(%rbp), %rdi
    00003329: 	popq	%rsi
    0000332a: 	cmpq	-0x128(%rbp), %rdi
    00003331: 	je	.Ltmp886 # Offset: 13105
    00003333: 	movq	-0x50(%rbp), %rax
    00003337: 	leaq	0x1(%rax), %rsi
    0000333b: 	callq	_ZdlPvm@PLT # Offset: 13115
.Ltmp886:
    00003340: 	movq	-0x130(%rbp), %rsi
    00003347: 	leaq	DATAat0x49398(%rip), %rdx
    0000334e: 	movq	%rbx, %rdi
    00003351: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13137
    00003356: 	subq	$0x8, %rsp
    0000335a: 	movq	%rbx, %r9
    0000335d: 	movl	$0xfa, %r8d
    00003363: 	movq	%r12, %rsi
    00003366: 	pushq	$0x1
    00003368: 	movl	$0xfa, %ecx
    0000336d: 	movl	$0x12c, %edx
    00003372: 	movq	-0x118(%rbp), %rdi
    00003379: 	callq	_Z20convergenceLaplace2DIsi22jacobi_sor2D_unrolled3IsiEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13177
    0000337e: 	popq	%rax
    0000337f: 	movq	-0x60(%rbp), %rdi
    00003383: 	popq	%rdx
    00003384: 	cmpq	-0x128(%rbp), %rdi
    0000338b: 	je	.Ltmp887 # Offset: 13195
    0000338d: 	movq	-0x50(%rbp), %rax
    00003391: 	leaq	0x1(%rax), %rsi
    00003395: 	callq	_ZdlPvm@PLT # Offset: 13205
.Ltmp887:
    0000339a: 	movl	-0x164(%rbp), %eax
    000033a0: 	movq	-0x80(%rbp), %rdi
    000033a4: 	movl	%eax, iterations(%rip)
    000033aa: 	leaq	-0x70(%rbp), %rax
    000033ae: 	cmpq	%rax, %rdi
    000033b1: 	je	.Ltmp888 # Offset: 13233
    000033b3: 	movq	-0x70(%rbp), %rax
    000033b7: 	leaq	0x1(%rax), %rsi
    000033bb: 	callq	_ZdlPvm@PLT # Offset: 13243
.Ltmp888:
    000033c0: 	movq	-0xa0(%rbp), %rdi
    000033c7: 	leaq	-0x90(%rbp), %rax
    000033ce: 	cmpq	%rax, %rdi
    000033d1: 	je	.Ltmp889 # Offset: 13265
    000033d3: 	movq	-0x90(%rbp), %rax
    000033da: 	leaq	0x1(%rax), %rsi
    000033de: 	callq	_ZdlPvm@PLT # Offset: 13278
.Ltmp889:
    000033e3: 	movl	$0x2, %esi
    000033e8: 	movq	%r12, %rdi
    000033eb: 	callq	_ZdlPvm@PLT # Offset: 13291
    000033f0: 	movq	-0x118(%rbp), %rdi
    000033f7: 	movl	$0x2, %esi
    000033fc: 	callq	_ZdlPvm@PLT # Offset: 13308
    00003401: 	movq	-0xc0(%rbp), %rdi
    00003408: 	leaq	-0xb0(%rbp), %rax
    0000340f: 	cmpq	%rax, %rdi
    00003412: 	je	.Ltmp890 # Offset: 13330
    00003414: 	movq	-0xb0(%rbp), %rax
    0000341b: 	leaq	0x1(%rax), %rsi
    0000341f: 	callq	_ZdlPvm@PLT # Offset: 13343
.Ltmp890:
    00003424: 	movq	-0xe0(%rbp), %rdi
    0000342b: 	leaq	-0xd0(%rbp), %rax
    00003432: 	cmpq	%rax, %rdi
    00003435: 	je	.Ltmp891 # Offset: 13365
    00003437: 	movq	-0xd0(%rbp), %rax
    0000343e: 	leaq	0x1(%rax), %rsi
    00003442: 	callq	_ZdlPvm@PLT # Offset: 13378
.Ltmp891:
    00003447: 	movq	-0x38(%rbp), %rax
    0000344b: 	subq	%fs:0x28, %rax
    00003454: 	jne	.Ltmp892 # Offset: 13396
    0000345a: 	leaq	-0x28(%rbp), %rsp
    0000345e: 	popq	%rbx
    0000345f: 	popq	%r12
    00003461: 	popq	%r13
    00003463: 	popq	%r14
    00003465: 	popq	%r15
    00003467: 	popq	%rbp
    00003468: 	retq # Offset: 13416
.Ltmp880:
    00003469: 	movq	-0x58(%rbp), %rdx
    0000346d: 	movq	-0x60(%rbp), %rsi
    00003471: 	movq	-0x140(%rbp), %rdi
    00003478: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 13432
    0000347d: 	movq	%rax, %rdi
    00003480: 	leaq	DATAat0x491ab(%rip), %rsi
    00003487: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 13447
    0000348c: 	jmp	.Ltmp893 # Offset: 13452
.Ltmp814:
    00003491: 	movq	-0x150(%rbp), %rbx
    00003498: 	movl	%r15d, -0x148(%rbp)
    0000349f: 	movl	%edi, %r13d
    000034a2: 	movq	%r12, %r15
    000034a5: 	movw	%ax, -0x120(%rbp)
    000034ac: 	movq	-0x158(%rbp), %r12
    000034b3: 	movq	%rbx, -0x118(%rbp)
    000034ba: 	movq	-0x160(%rbp), %rbx
    000034c1: 	jmp	.Ltmp894 # Offset: 13505
.Ltmp830:
    000034c6: 	movq	-0x148(%rbp), %rdi
    000034cd: 	movl	%r12d, -0x120(%rbp)
    000034d4: 	movl	%r15d, -0x148(%rbp)
    000034db: 	movq	-0x150(%rbp), %r12
    000034e2: 	movl	%eax, %r15d
    000034e5: 	movq	%rdi, -0x118(%rbp)
    000034ec: 	jmp	.Ltmp895 # Offset: 13548
.Ltmp877:
    000034f1: 	movw	%ax, -0x120(%rbp)
    000034f8: 	movq	-0x148(%rbp), %rax
    000034ff: 	movq	%r13, %rbx
    00003502: 	movl	%r14d, -0x138(%rbp)
    00003509: 	movl	-0x118(%rbp), %r13d
    00003510: 	movq	%r12, %r14
    00003513: 	movq	%rax, -0x118(%rbp)
    0000351a: 	movq	-0x150(%rbp), %r12
    00003521: 	jmp	.Ltmp896 # Offset: 13601
.Ltmp803:
    00003526: 	movw	%ax, -0x120(%rbp)
    0000352d: 	movq	-0x150(%rbp), %rax
    00003534: 	movq	%r13, %rbx
    00003537: 	movl	%r14d, -0x148(%rbp)
    0000353e: 	movl	-0x118(%rbp), %r13d
    00003545: 	movq	%r12, %r14
    00003548: 	movq	%rax, -0x118(%rbp)
    0000354f: 	movq	-0x158(%rbp), %r12
    00003556: 	jmp	.Ltmp897 # Offset: 13654
.Ltmp791:
    0000355b: 	movq	-0x120(%rbp), %rbx
    00003562: 	movl	%r14d, -0x148(%rbp)
    00003569: 	movw	%ax, -0x120(%rbp)
    00003570: 	movq	%rbx, -0x118(%rbp)
    00003577: 	movq	-0x140(%rbp), %rbx
    0000357e: 	jmp	.Ltmp898 # Offset: 13694
.Ltmp845:
    00003583: 	movq	-0x8(%rdx), %rax
    00003587: 	addq	$0x200, %rax
    0000358d: 	jmp	.Ltmp899 # Offset: 13709
.Ltmp782:
    00003592: 	movq	-0x8(%rdx), %rax
    00003596: 	addq	$0x200, %rax
    0000359c: 	jmp	.Ltmp900 # Offset: 13724
.Ltmp777:
    000035a1: 	movq	-0x8(%rdx), %rax
    000035a5: 	addq	$0x200, %rax
    000035ab: 	jmp	.Ltmp901 # Offset: 13739
.Ltmp772:
    000035b0: 	movq	-0x8(%rdx), %rax
    000035b4: 	addq	$0x200, %rax
    000035ba: 	jmp	.Ltmp902 # Offset: 13754
.Ltmp868:
    000035bf: 	movq	-0x8(%rdx), %rax
    000035c3: 	addq	$0x200, %rax
    000035c9: 	jmp	.Ltmp903 # Offset: 13769
.Ltmp863:
    000035ce: 	movq	-0x8(%rdx), %rax
    000035d2: 	addq	$0x200, %rax
    000035d8: 	jmp	.Ltmp904 # Offset: 13784
.Ltmp858:
    000035dd: 	movq	-0x8(%rdx), %rax
    000035e1: 	addq	$0x200, %rax
    000035e7: 	jmp	.Ltmp905 # Offset: 13799
.Ltmp852:
    000035ec: 	movq	-0x8(%rdx), %rax
    000035f0: 	addq	$0x200, %rax
    000035f6: 	jmp	.Ltmp906 # Offset: 13814
.Ltmp736:
    000035fb: 	movq	-0x8(%rdx), %rax
    000035ff: 	addq	$0x200, %rax
    00003605: 	jmp	.Ltmp907 # Offset: 13829
.Ltmp767:
    0000360a: 	movq	-0x8(%rdx), %rax
    0000360e: 	addq	$0x200, %rax
    00003614: 	jmp	.Ltmp908 # Offset: 13844
.Ltmp757:
    00003619: 	movq	-0x8(%rdx), %rax
    0000361d: 	addq	$0x200, %rax
    00003623: 	jmp	.Ltmp909 # Offset: 13859
.Ltmp750:
    00003628: 	movq	-0x8(%rdx), %rax
    0000362c: 	addq	$0x200, %rax
    00003632: 	jmp	.Ltmp910 # Offset: 13874
.Ltmp743:
    00003637: 	movq	-0x8(%rdx), %rax
    0000363b: 	addq	$0x200, %rax
    00003641: 	jmp	.Ltmp911 # Offset: 13889
.Ltmp797:
    00003646: 	movl	$0x0, -0x148(%rbp)
    00003650: 	xorl	%r15d, %r15d
    00003653: 	movq	%r12, %r14
    00003656: 	movw	%r15w, -0x120(%rbp)
    0000365e: 	jmp	.Ltmp897 # Offset: 13918
.Ltmp808:
    00003663: 	movl	$0x0, -0x148(%rbp)
    0000366d: 	xorl	%r14d, %r14d
    00003670: 	movq	%r12, %r15
    00003673: 	movw	%r14w, -0x120(%rbp)
    0000367b: 	jmp	.Ltmp894 # Offset: 13947
.Ltmp820:
    00003680: 	movl	$0x0, -0x148(%rbp)
    0000368a: 	movq	%r12, %r13
    0000368d: 	xorl	%r15d, %r15d
    00003690: 	jmp	.Ltmp895 # Offset: 13968
.Ltmp871:
    00003695: 	movl	$0x0, -0x138(%rbp)
    0000369f: 	xorl	%eax, %eax
    000036a1: 	movq	%r12, %r14
    000036a4: 	movw	%ax, -0x120(%rbp)
    000036ab: 	jmp	.Ltmp896 # Offset: 13995
.Ltmp892:
    000036b0: 	callq	__stack_chk_fail@PLT # Offset: 14000
    000036b5: 	nopl	(%rax) # Size: 3
.Ltmp784:
    000036b8: 	movl	$0x0, -0x148(%rbp)
    000036c2: 	xorl	%eax, %eax
    000036c4: 	movq	%r12, %r13
    000036c7: 	movw	%ax, -0x120(%rbp)
    000036ce: 	jmp	.Ltmp898 # Offset: 14030
    000036d3: 	endbr64
.Ltmp916:
    000036d7: 	movq	%rax, %rbx
    000036da: 	jmp	.Ltmp912 # Offset: 14042
    000036dc: 	endbr64
    000036e0: 	movq	%rax, %rbx
    000036e3: 	jmp	.Ltmp913 # Offset: 14051
.Ltmp912:
    000036e5: 	movq	-0x60(%rbp), %rdi
    000036e9: 	cmpq	-0x128(%rbp), %rdi
    000036f0: 	je	.Ltmp914 # Offset: 14064
.Ltmp926:
    000036f2: 	movq	-0x50(%rbp), %rax
    000036f6: 	leaq	0x1(%rax), %rsi
    000036fa: 	callq	_ZdlPvm@PLT # Offset: 14074
.Ltmp914:
    000036ff: 	movl	$0x2, %esi
    00003704: 	movq	%r12, %rdi
    00003707: 	callq	_ZdlPvm@PLT # Offset: 14087
.Ltmp923:
    0000370c: 	movq	-0x118(%rbp), %rdi
    00003713: 	movl	$0x2, %esi
    00003718: 	callq	_ZdlPvm@PLT # Offset: 14104
.Ltmp924:
    0000371d: 	movq	-0xc0(%rbp), %rdi
    00003724: 	leaq	-0xb0(%rbp), %rax
    0000372b: 	cmpq	%rax, %rdi
    0000372e: 	je	.Ltmp913 # Offset: 14126
    00003730: 	movq	-0xb0(%rbp), %rax
    00003737: 	leaq	0x1(%rax), %rsi
    0000373b: 	callq	_ZdlPvm@PLT # Offset: 14139
.Ltmp913:
    00003740: 	movq	-0xe0(%rbp), %rdi
    00003747: 	leaq	-0xd0(%rbp), %rax
    0000374e: 	cmpq	%rax, %rdi
    00003751: 	je	.Ltmp915 # Offset: 14161
    00003753: 	movq	-0xd0(%rbp), %rax
    0000375a: 	leaq	0x1(%rax), %rsi
    0000375e: 	callq	_ZdlPvm@PLT # Offset: 14174
.Ltmp915:
    00003763: 	movq	%rbx, %rdi
    00003766: 	callq	_Unwind_Resume@PLT # Offset: 14182
    0000376b: 	endbr64
    0000376f: 	jmp	.Ltmp916 # Offset: 14191
    00003774: 	endbr64
.Ltmp918:
    00003778: 	movq	%rax, %rbx
    0000377b: 	jmp	.Ltmp917 # Offset: 14203
    00003780: 	endbr64
    00003784: 	jmp	.Ltmp918 # Offset: 14212
    00003786: 	endbr64
    0000378a: 	jmp	.Ltmp918 # Offset: 14218
    0000378c: 	endbr64
    00003790: 	jmp	.Ltmp918 # Offset: 14224
    00003792: 	endbr64
.Ltmp921:
    00003796: 	movq	%rax, %rbx
    00003799: 	jmp	.Ltmp919 # Offset: 14233
    0000379b: 	endbr64
    0000379f: 	jmp	.Ltmp918 # Offset: 14239
    000037a1: 	endbr64
    000037a5: 	movq	%rax, %rbx
    000037a8: 	jmp	.Ltmp920 # Offset: 14248
    000037aa: 	endbr64
    000037ae: 	jmp	.Ltmp921 # Offset: 14254
.Ltmp919:
    000037b0: 	movq	-0x60(%rbp), %rdi
    000037b4: 	cmpq	-0x128(%rbp), %rdi
    000037bb: 	je	.Ltmp920 # Offset: 14267
    000037bd: 	movq	-0x50(%rbp), %rax
    000037c1: 	leaq	0x1(%rax), %rsi
    000037c5: 	callq	_ZdlPvm@PLT # Offset: 14277
.Ltmp920:
    000037ca: 	movq	-0x80(%rbp), %rdi
    000037ce: 	leaq	-0x70(%rbp), %rax
    000037d2: 	cmpq	%rax, %rdi
    000037d5: 	je	.Ltmp922 # Offset: 14293
    000037d7: 	movq	-0x70(%rbp), %rax
    000037db: 	leaq	0x1(%rax), %rsi
    000037df: 	callq	_ZdlPvm@PLT # Offset: 14303
.Ltmp922:
    000037e4: 	movq	-0xa0(%rbp), %rdi
    000037eb: 	leaq	-0x90(%rbp), %rax
    000037f2: 	cmpq	%rax, %rdi
    000037f5: 	je	.Ltmp914 # Offset: 14325
    000037fb: 	movq	-0x90(%rbp), %rax
    00003802: 	leaq	0x1(%rax), %rsi
    00003806: 	callq	_ZdlPvm@PLT # Offset: 14342
    0000380b: 	jmp	.Ltmp914 # Offset: 14347
    00003810: 	endbr64
    00003814: 	jmp	.Ltmp921 # Offset: 14356
    00003816: 	endbr64
    0000381a: 	jmp	.Ltmp918 # Offset: 14362
    0000381f: 	endbr64
    00003823: 	jmp	.Ltmp918 # Offset: 14371
    00003828: 	endbr64
    0000382c: 	jmp	.Ltmp918 # Offset: 14380
    00003831: 	endbr64
    00003835: 	jmp	.Ltmp918 # Offset: 14389
    0000383a: 	endbr64
    0000383e: 	jmp	.Ltmp918 # Offset: 14398
    00003843: 	endbr64
    00003847: 	jmp	.Ltmp918 # Offset: 14407
    0000384c: 	endbr64
    00003850: 	jmp	.Ltmp918 # Offset: 14416
    00003855: 	endbr64
    00003859: 	jmp	.Ltmp918 # Offset: 14425
    0000385e: 	endbr64
    00003862: 	movq	%rax, %rbx
    00003865: 	jmp	.Ltmp922 # Offset: 14437
    0000386a: 	endbr64
    0000386e: 	jmp	.Ltmp916 # Offset: 14446
    00003873: 	endbr64
    00003877: 	jmp	.Ltmp916 # Offset: 14455
    0000387c: 	endbr64
    00003880: 	jmp	.Ltmp916 # Offset: 14464
    00003885: 	endbr64
    00003889: 	movq	%rax, %rbx
    0000388c: 	jmp	.Ltmp923 # Offset: 14476
    00003891: 	endbr64
    00003895: 	movq	%rax, %rbx
    00003898: 	jmp	.Ltmp924 # Offset: 14488
    0000389d: 	endbr64
    000038a1: 	jmp	.Ltmp916 # Offset: 14497
    000038a6: 	endbr64
    000038aa: 	jmp	.Ltmp916 # Offset: 14506
    000038af: 	endbr64
    000038b3: 	jmp	.Ltmp918 # Offset: 14515
    000038b8: 	endbr64
    000038bc: 	jmp	.Ltmp918 # Offset: 14524
    000038c1: 	endbr64
    000038c5: 	jmp	.Ltmp918 # Offset: 14533
    000038ca: 	endbr64
    000038ce: 	movq	%rax, %rbx
    000038d1: 	jmp	.Ltmp914 # Offset: 14545
    000038d6: 	endbr64
    000038da: 	jmp	.Ltmp921 # Offset: 14554
    000038df: 	endbr64
    000038e3: 	jmp	.Ltmp921 # Offset: 14563
    000038e8: 	endbr64
    000038ec: 	jmp	.Ltmp921 # Offset: 14572
    000038f1: 	endbr64
    000038f5: 	jmp	.Ltmp921 # Offset: 14581
    000038fa: 	endbr64
    000038fe: 	movq	%rax, %rbx
    00003901: 	jmp	.Ltmp925 # Offset: 14593
    00003903: 	endbr64
    00003907: 	jmp	.Ltmp921 # Offset: 14599
.Ltmp917:
    0000390c: 	movq	-0x60(%rbp), %rdi
    00003910: 	cmpq	-0x128(%rbp), %rdi
    00003917: 	je	.Ltmp922 # Offset: 14615
    0000391d: 	movq	-0x50(%rbp), %rax
    00003921: 	leaq	0x1(%rax), %rsi
    00003925: 	callq	_ZdlPvm@PLT # Offset: 14629
    0000392a: 	jmp	.Ltmp922 # Offset: 14634
.Ltmp925:
    0000392f: 	movq	-0x60(%rbp), %rdi
    00003933: 	leaq	-0x50(%rbp), %rax
    00003937: 	cmpq	%rax, %rdi
    0000393a: 	jne	.Ltmp926 # Offset: 14650
    00003940: 	jmp	.Ltmp914 # Offset: 14656
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsiEvv"

Binary Function "_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x202d0
  Size        : 0x208
  MaxSize     : 0x210
  Offset      : 0x202d0
  Section     : .text
  Orc Section : .local.text._Z29laplace_initial_condition_setIiET_PS0_iiPKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rcx, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	movl	%edx, %ebp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	movl	(%rcx), %eax
    00000015: 	movl	0x4(%rcx), %esi
    00000018: 	movl	%ebx, %r14d
    0000001b: 	addl	%esi, %eax
    0000001d: 	addl	0x8(%rcx), %eax
    00000020: 	addl	0xc(%rcx), %eax
    00000023: 	leal	0x3(%rax), %r12d
    00000027: 	cmovnsl	%eax, %r12d
    0000002b: 	imull	%edx, %r14d
    0000002f: 	sarl	$0x2, %r12d
    00000033: 	movslq	%r14d, %rdx
    00000036: 	shlq	$0x2, %rdx
    0000003a: 	je	.Ltmp927 # Offset: 58
    0000003c: 	xorl	%esi, %esi
    0000003e: 	callq	memset@PLT # Offset: 62
    00000043: 	movl	0x4(%r13), %esi
    00000047: 	movq	%rax, %rdi
.Ltmp927:
    0000004a: 	testl	%ebx, %ebx
    0000004c: 	jle	.Ltmp928 # Offset: 76
    00000052: 	movslq	%ebp, %rcx
    00000055: 	movq	%rdi, %rdx
    00000058: 	xorl	%eax, %eax
    0000005a: 	shlq	$0x2, %rcx
    0000005e: 	cmpl	$0x1, %ebp
    00000061: 	jne	.Ltmp929 # Offset: 97
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp930:
    00000070: 	addl	$0x1, %eax
    00000073: 	movl	%esi, (%rdx)
    00000075: 	addq	%rcx, %rdx
    00000078: 	cmpl	%ebx, %eax
    0000007a: 	jne	.Ltmp930 # Offset: 122
    0000007c: 	movl	0xc(%r13), %esi
    00000080: 	leaq	-0x4(%rdi,%rcx), %rdx
    00000085: 	xorl	%eax, %eax
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp931:
    00000090: 	addl	$0x1, %eax
    00000093: 	movl	%esi, (%rdx)
    00000095: 	addq	%rcx, %rdx
    00000098: 	cmpl	%eax, %ebx
    0000009a: 	jne	.Ltmp931 # Offset: 154
    0000009c: 	subl	$0x1, %r14d
    000000a0: 	movl	0x8(%r13), %esi
    000000a4: 	movslq	%r14d, %r14
    000000a7: 	leaq	(%rdi,%r14,4), %rcx
.Ltmp940:
    000000ab: 	leal	-0x1(%rbp), %r8d
    000000af: 	cmpl	$0x2, %r8d
    000000b3: 	jbe	.Ltmp932 # Offset: 179
    000000b9: 	movl	%ebp, %edx
    000000bb: 	movd	%esi, %xmm1
    000000bf: 	movq	%rcx, %rax
    000000c2: 	shrl	$0x2, %edx
    000000c5: 	pshufd	$0x0, %xmm1, %xmm0
    000000ca: 	shlq	$0x4, %rdx
    000000ce: 	addq	%rcx, %rdx
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp933:
    000000d8: 	movups	%xmm0, (%rax)
    000000db: 	addq	$0x10, %rax
    000000df: 	cmpq	%rdx, %rax
    000000e2: 	jne	.Ltmp933 # Offset: 226
    000000e4: 	movl	%ebp, %eax
    000000e6: 	andl	$-0x4, %eax
    000000e9: 	movl	%eax, %edx
    000000eb: 	leaq	(%rcx,%rdx,4), %rcx
    000000ef: 	cmpl	%eax, %ebp
    000000f1: 	je	.Ltmp934 # Offset: 241
    000000f7: 	addl	$0x1, %eax
    000000fa: 	movl	%esi, (%rcx)
    000000fc: 	addq	$0x4, %rcx
    00000100: 	cmpl	%eax, %ebp
    00000102: 	jle	.Ltmp934 # Offset: 258
.Ltmp942:
    00000108: 	addl	$0x1, %eax
    0000010b: 	movl	%esi, (%rcx)
    0000010d: 	cmpl	%eax, %ebp
    0000010f: 	jle	.Ltmp935 # Offset: 271
    00000111: 	movl	%esi, 0x4(%rcx)
.Ltmp935:
    00000114: 	movl	(%r13), %ecx
    00000118: 	cmpl	$0x2, %r8d
    0000011c: 	jbe	.Ltmp936 # Offset: 284
.Ltmp941:
    00000122: 	movl	%ebp, %edx
    00000124: 	movd	%ecx, %xmm2
    00000128: 	movq	%rdi, %rax
    0000012b: 	shrl	$0x2, %edx
    0000012e: 	pshufd	$0x0, %xmm2, %xmm0
    00000133: 	subl	$0x1, %edx
    00000136: 	shlq	$0x4, %rdx
    0000013a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000013f: 	nop # Size: 1
.Ltmp937:
    00000140: 	movups	%xmm0, (%rax)
    00000143: 	addq	$0x10, %rax
    00000147: 	cmpq	%rax, %rdx
    0000014a: 	jne	.Ltmp937 # Offset: 330
    0000014c: 	movl	%ebp, %eax
    0000014e: 	andl	$-0x4, %eax
    00000151: 	movl	%eax, %edx
    00000153: 	leaq	(%rdi,%rdx,4), %rdi
    00000157: 	cmpl	%ebp, %eax
    00000159: 	je	.Ltmp938 # Offset: 345
.Ltmp943:
    0000015b: 	addl	$0x1, %eax
    0000015e: 	movl	%ecx, (%rdi)
    00000160: 	addq	$0x4, %rdi
    00000164: 	cmpl	%eax, %ebp
    00000166: 	jle	.Ltmp938 # Offset: 358
.Ltmp944:
    00000168: 	addl	$0x1, %eax
    0000016b: 	movl	%ecx, (%rdi)
    0000016d: 	cmpl	%eax, %ebp
    0000016f: 	jle	.Ltmp938 # Offset: 367
    00000171: 	movl	%ecx, 0x4(%rdi)
.Ltmp938:
    00000174: 	popq	%rbx
    00000175: 	movl	%r12d, %eax
    00000178: 	popq	%rbp
    00000179: 	popq	%r12
    0000017b: 	popq	%r13
    0000017d: 	popq	%r14
    0000017f: 	retq # Offset: 383
.Ltmp929:
    00000180: 	addl	$0x1, %eax
    00000183: 	movl	%esi, (%rdx)
    00000185: 	addq	%rcx, %rdx
    00000188: 	cmpl	%eax, %ebx
    0000018a: 	jne	.Ltmp929 # Offset: 394
    0000018c: 	movl	0xc(%r13), %esi
    00000190: 	leaq	-0x4(%rdi,%rcx), %rdx
    00000195: 	xorl	%eax, %eax
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp939:
    000001a0: 	addl	$0x1, %eax
    000001a3: 	movl	%esi, (%rdx)
    000001a5: 	addq	%rcx, %rdx
    000001a8: 	cmpl	%eax, %ebx
    000001aa: 	jne	.Ltmp939 # Offset: 426
.Ltmp928:
    000001ac: 	subl	%ebp, %r14d
    000001af: 	movl	0x8(%r13), %esi
    000001b3: 	movslq	%r14d, %r14
    000001b6: 	leaq	(%rdi,%r14,4), %rcx
    000001ba: 	testl	%ebp, %ebp
    000001bc: 	jg	.Ltmp940 # Offset: 444
    000001c2: 	popq	%rbx
    000001c3: 	movl	%r12d, %eax
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	retq # Offset: 461
    000001ce: 	nop # Size: 2
.Ltmp934:
    000001d0: 	movl	(%r13), %ecx
    000001d4: 	jmp	.Ltmp941 # Offset: 468
.Ltmp932:
    000001d9: 	movl	%esi, (%rcx)
    000001db: 	movl	$0x1, %eax
    000001e0: 	addq	$0x4, %rcx
    000001e4: 	cmpl	$0x1, %ebp
    000001e7: 	jne	.Ltmp942 # Offset: 487
    000001ed: 	movl	(%r13), %ecx
    000001f1: 	xorl	%eax, %eax
    000001f3: 	jmp	.Ltmp943 # Offset: 499
.Ltmp936:
    000001f8: 	movl	%ecx, (%rdi)
    000001fa: 	movl	$0x1, %eax
    000001ff: 	addq	$0x4, %rdi
    00000203: 	jmp	.Ltmp944 # Offset: 515
DWARF CFI Instructions:
    <empty>
End of Function "_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_"

Binary Function "_Z20convergenceLaplace2DIil17jacobi2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x204e0
  Size        : 0x623
  MaxSize     : 0x630
  Offset      : 0x204e0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil17jacobi2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x78, %rsp
    00000024: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002c: 	movl	%edx, 0x38(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x3c(%rsp)
    00000037: 	leaq	0x50(%rsp), %rcx
    0000003c: 	movq	%r9, 0x40(%rsp)
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x68(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movaps	%xmm0, 0x50(%rsp)
    00000056: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 86
    0000005b: 	movl	%r15d, %edi
    0000005e: 	imull	%r14d, %edi
    00000062: 	movl	%eax, 0x4c(%rsp)
    00000066: 	movslq	%edi, %r15
    00000069: 	testl	%r15d, %r15d
    0000006c: 	jle	.Ltmp945 # Offset: 108
    0000006e: 	movslq	%r15d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	shlq	$0x2, %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp945:
    00000080: 	movl	iterations(%rip), %eax
    00000086: 	movl	$0x2710, iterations(%rip)
    00000090: 	movl	%eax, 0x48(%rsp)
    00000094: 	callq	clock@PLT # Offset: 148
    00000099: 	movl	iterations(%rip), %ecx
    0000009f: 	movq	%rax, start_time(%rip)
    000000a6: 	testl	%ecx, %ecx
    000000a8: 	jle	.Ltmp946 # Offset: 168
    000000ae: 	movl	0x38(%rsp), %esi
    000000b2: 	movl	0x3c(%rsp), %eax
    000000b6: 	movl	%r12d, %r10d
    000000b9: 	movq	%r15, %r13
    000000bc: 	negl	%r10d
    000000bf: 	shrq	$0x2, %r13
    000000c3: 	pxor	%xmm3, %xmm3
    000000c7: 	leal	-0x2(%rax), %edx
    000000ca: 	leal	-0x3(%rsi), %eax
    000000cd: 	movslq	%r10d, %r10
    000000d0: 	shlq	$0x4, %r13
    000000d4: 	imull	%r12d, %eax
    000000d8: 	leal	-0x2(%rsi), %edi
    000000db: 	movl	%edx, 0x1c(%rsp)
    000000df: 	shlq	$0x2, %r10
    000000e3: 	movl	%edi, 0x8(%rsp)
    000000e7: 	movslq	%edx, %r14
    000000ea: 	cltq
    000000ec: 	shlq	$0x2, %rax
    000000f0: 	movq	%rax, 0x28(%rsp)
    000000f5: 	movl	%edi, %eax
    000000f7: 	imull	%r12d, %eax
    000000fb: 	cltq
    000000fd: 	shlq	$0x2, %rax
    00000101: 	movq	%rax, 0x20(%rsp)
    00000106: 	leal	-0x1(%rsi), %eax
    00000109: 	imull	%r12d, %eax
    0000010d: 	xorl	%r12d, %r12d
    00000110: 	cltq
    00000112: 	shlq	$0x2, %rax
    00000116: 	movq	%rax, 0x30(%rsp)
    0000011b: 	leaq	-0x1(%r15), %rax
    0000011f: 	movq	%rax, 0x10(%rsp)
    00000124: 	movq	%r15, %rax
    00000127: 	andq	$-0x4, %rax
    0000012b: 	movq	%rax, (%rsp)
    0000012f: 	nop # Size: 1
.Ltmp960:
    00000130: 	movl	0x8(%rsp), %edx
    00000134: 	testl	%edx, %edx
    00000136: 	jle	.Ltmp947 # Offset: 310
    00000138: 	movl	0x1c(%rsp), %eax
    0000013c: 	testl	%eax, %eax
    0000013e: 	jle	.Ltmp947 # Offset: 318
    00000140: 	movq	0x28(%rsp), %rax
    00000145: 	movq	0x30(%rsp), %rdi
    0000014a: 	movl	0x8(%rsp), %r11d
    0000014f: 	leaq	(%rbx,%rax), %r9
    00000153: 	movq	0x20(%rsp), %rax
    00000158: 	leaq	(%rbx,%rdi), %r8
    0000015c: 	leaq	(%rbx,%rax), %rsi
    00000160: 	leaq	(%rbp,%rax), %rdi
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp949:
    00000168: 	subl	$0x1, %r11d
    0000016c: 	movq	%r14, %rax
    0000016f: 	nop # Size: 1
.Ltmp948:
    00000170: 	movslq	(%r9,%rax,4), %rcx
    00000174: 	movslq	-0x4(%rsi,%rax,4), %rdx
    00000179: 	addq	%rcx, %rdx
    0000017c: 	movslq	0x4(%rsi,%rax,4), %rcx
    00000181: 	addq	%rdx, %rcx
    00000184: 	movslq	(%r8,%rax,4), %rdx
    00000188: 	addq	%rcx, %rdx
    0000018b: 	leaq	0x5(%rdx), %rcx
    0000018f: 	addq	$0x2, %rdx
    00000193: 	cmovnsq	%rdx, %rcx
    00000197: 	sarq	$0x2, %rcx
    0000019b: 	movl	%ecx, (%rdi,%rax,4)
    0000019e: 	subq	$0x1, %rax
    000001a2: 	testl	%eax, %eax
    000001a4: 	jg	.Ltmp948 # Offset: 420
    000001a6: 	addq	%r10, %r9
    000001a9: 	addq	%r10, %rsi
    000001ac: 	addq	%r10, %r8
    000001af: 	addq	%r10, %rdi
    000001b2: 	testl	%r11d, %r11d
    000001b5: 	jne	.Ltmp949 # Offset: 437
.Ltmp947:
    000001b7: 	testq	%r15, %r15
    000001ba: 	je	.Ltmp950 # Offset: 442
    000001c0: 	cmpq	$0x2, 0x10(%rsp)
    000001c6: 	jbe	.Ltmp951 # Offset: 454
    000001cc: 	xorl	%eax, %eax
    000001ce: 	pxor	%xmm2, %xmm2
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp952:
    000001d8: 	movdqu	(%rbp,%rax), %xmm5
    000001de: 	movdqu	(%rbx,%rax), %xmm4
    000001e3: 	movdqa	%xmm3, %xmm0
    000001e7: 	movdqu	(%rbx,%rax), %xmm6
    000001ec: 	addq	$0x10, %rax
    000001f0: 	psubd	%xmm5, %xmm4
    000001f4: 	movdqa	%xmm5, %xmm1
    000001f8: 	pcmpgtd	%xmm4, %xmm0
    000001fc: 	psubd	%xmm6, %xmm1
    00000200: 	pand	%xmm0, %xmm1
    00000204: 	pandn	%xmm4, %xmm0
    00000208: 	movdqa	%xmm3, %xmm4
    0000020c: 	por	%xmm1, %xmm0
    00000210: 	pcmpgtd	%xmm0, %xmm4
    00000214: 	movdqa	%xmm0, %xmm1
    00000218: 	punpckldq	%xmm4, %xmm1
    0000021c: 	punpckhdq	%xmm4, %xmm0
    00000220: 	paddq	%xmm1, %xmm2
    00000224: 	paddq	%xmm0, %xmm2
    00000228: 	cmpq	%rax, %r13
    0000022b: 	jne	.Ltmp952 # Offset: 555
    0000022d: 	movdqa	%xmm2, %xmm0
    00000231: 	movq	(%rsp), %rax
    00000235: 	psrldq	$0x8, %xmm0
    0000023a: 	paddq	%xmm0, %xmm2
    0000023e: 	movq	%rax, %rdx
    00000241: 	movq	%xmm2, %r8
    00000246: 	cmpq	%rax, %r15
    00000249: 	je	.Ltmp953 # Offset: 585
.Ltmp963:
    0000024b: 	movl	(%rbp,%rdx,4), %esi
    0000024f: 	movl	(%rbx,%rdx,4), %eax
    00000252: 	leaq	(,%rdx,4), %rcx
    0000025a: 	movl	%esi, %edi
    0000025c: 	subl	%eax, %edi
    0000025e: 	subl	%esi, %eax
    00000260: 	cmovsl	%edi, %eax
    00000263: 	cltq
    00000265: 	addq	%rax, %r8
    00000268: 	leaq	0x1(%rdx), %rax
    0000026c: 	cmpq	%rax, %r15
    0000026f: 	jbe	.Ltmp954 # Offset: 623
    00000271: 	movl	0x4(%rbp,%rcx), %esi
    00000275: 	movl	0x4(%rbx,%rcx), %eax
    00000279: 	movl	%esi, %edi
    0000027b: 	subl	%eax, %edi
    0000027d: 	subl	%esi, %eax
    0000027f: 	cmovsl	%edi, %eax
    00000282: 	addq	$0x2, %rdx
    00000286: 	cltq
    00000288: 	addq	%rax, %r8
    0000028b: 	cmpq	%rdx, %r15
    0000028e: 	jbe	.Ltmp954 # Offset: 654
    00000290: 	movl	0x8(%rbp,%rcx), %edx
    00000294: 	movl	0x8(%rbx,%rcx), %eax
    00000298: 	movl	%edx, %ecx
    0000029a: 	subl	%eax, %ecx
    0000029c: 	subl	%edx, %eax
    0000029e: 	cmovsl	%ecx, %eax
    000002a1: 	cltq
    000002a3: 	addq	%rax, %r8
.Ltmp954:
    000002a6: 	cmpq	$0x2, 0x10(%rsp)
    000002ac: 	jbe	.Ltmp955 # Offset: 684
.Ltmp953:
    000002b2: 	xorl	%eax, %eax
    000002b4: 	pxor	%xmm2, %xmm2
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp956:
    000002c0: 	movdqu	(%rbp,%rax), %xmm7
    000002c6: 	movdqu	(%rbx,%rax), %xmm4
    000002cb: 	movdqa	%xmm3, %xmm0
    000002cf: 	movdqu	(%rbx,%rax), %xmm5
    000002d4: 	addq	$0x10, %rax
    000002d8: 	psubd	%xmm7, %xmm4
    000002dc: 	movdqa	%xmm7, %xmm1
    000002e0: 	pcmpgtd	%xmm4, %xmm0
    000002e4: 	psubd	%xmm5, %xmm1
    000002e8: 	pand	%xmm0, %xmm1
    000002ec: 	pandn	%xmm4, %xmm0
    000002f0: 	por	%xmm1, %xmm0
    000002f4: 	movdqa	%xmm0, %xmm1
    000002f8: 	pcmpgtd	%xmm2, %xmm1
    000002fc: 	pand	%xmm1, %xmm0
    00000300: 	pandn	%xmm2, %xmm1
    00000304: 	movdqa	%xmm1, %xmm2
    00000308: 	por	%xmm0, %xmm2
    0000030c: 	cmpq	%rax, %r13
    0000030f: 	jne	.Ltmp956 # Offset: 783
    00000311: 	movdqa	%xmm2, %xmm1
    00000315: 	movq	(%rsp), %rax
    00000319: 	psrldq	$0x8, %xmm1
    0000031e: 	movdqa	%xmm1, %xmm0
    00000322: 	movq	%rax, %rdx
    00000325: 	pcmpgtd	%xmm2, %xmm0
    00000329: 	pand	%xmm0, %xmm1
    0000032d: 	pandn	%xmm2, %xmm0
    00000331: 	por	%xmm1, %xmm0
    00000335: 	movdqa	%xmm0, %xmm2
    00000339: 	psrldq	$0x4, %xmm2
    0000033e: 	movdqa	%xmm2, %xmm1
    00000342: 	pcmpgtd	%xmm0, %xmm1
    00000346: 	pand	%xmm1, %xmm2
    0000034a: 	pandn	%xmm0, %xmm1
    0000034e: 	por	%xmm2, %xmm1
    00000352: 	movd	%xmm1, %r9d
    00000357: 	cmpq	%rax, %r15
    0000035a: 	je	.Ltmp957 # Offset: 858
.Ltmp962:
    0000035c: 	movl	(%rbp,%rdx,4), %esi
    00000360: 	movl	(%rbx,%rdx,4), %eax
    00000363: 	leaq	(,%rdx,4), %rcx
    0000036b: 	movl	%esi, %edi
    0000036d: 	subl	%eax, %edi
    0000036f: 	subl	%esi, %eax
    00000371: 	cmovsl	%edi, %eax
    00000374: 	cmpl	%eax, %r9d
    00000377: 	cmovll	%eax, %r9d
    0000037b: 	leaq	0x1(%rdx), %rax
    0000037f: 	cmpq	%rax, %r15
    00000382: 	jbe	.Ltmp957 # Offset: 898
    00000384: 	movl	0x4(%rbp,%rcx), %esi
    00000388: 	movl	0x4(%rbx,%rcx), %eax
    0000038c: 	movl	%esi, %edi
    0000038e: 	subl	%eax, %edi
    00000390: 	subl	%esi, %eax
    00000392: 	cmovsl	%edi, %eax
    00000395: 	cmpl	%eax, %r9d
    00000398: 	cmovll	%eax, %r9d
    0000039c: 	addq	$0x2, %rdx
    000003a0: 	cmpq	%r15, %rdx
    000003a3: 	jae	.Ltmp957 # Offset: 931
    000003a5: 	movl	0x8(%rbp,%rcx), %edx
    000003a9: 	movl	0x8(%rbx,%rcx), %eax
    000003ad: 	movl	%edx, %ecx
    000003af: 	subl	%eax, %ecx
    000003b1: 	subl	%edx, %eax
    000003b3: 	cmovsl	%ecx, %eax
    000003b6: 	cmpl	%eax, %r9d
    000003b9: 	cmovll	%eax, %r9d
.Ltmp957:
    000003bd: 	cmpl	%r12d, 0xb0(%rsp)
    000003c5: 	jge	.Ltmp958 # Offset: 965
    000003c7: 	testl	%r9d, %r9d
    000003ca: 	jle	.Ltmp959 # Offset: 970
    000003cc: 	cmpq	$0x9, %r8
    000003d0: 	jle	.Ltmp959 # Offset: 976
.Ltmp958:
    000003d2: 	addl	$0x1, %r12d
    000003d6: 	cmpl	%r12d, iterations(%rip)
    000003dd: 	movq	%rbp, %rax
    000003e0: 	movq	%rbx, %rbp
    000003e3: 	jle	.Ltmp959 # Offset: 995
    000003e5: 	movq	%rax, %rbx
    000003e8: 	jmp	.Ltmp960 # Offset: 1000
.Ltmp950:
    000003ed: 	cmpl	%r12d, 0xb0(%rsp)
    000003f5: 	jl	.Ltmp961 # Offset: 1013
    000003f7: 	xorl	%r8d, %r8d
    000003fa: 	xorl	%r9d, %r9d
    000003fd: 	jmp	.Ltmp958 # Offset: 1021
.Ltmp955:
    000003ff: 	xorl	%r9d, %r9d
    00000402: 	xorl	%edx, %edx
    00000404: 	jmp	.Ltmp962 # Offset: 1028
.Ltmp951:
    00000409: 	xorl	%r8d, %r8d
    0000040c: 	xorl	%edx, %edx
    0000040e: 	jmp	.Ltmp963 # Offset: 1038
.Ltmp961:
    00000413: 	xorl	%r9d, %r9d
    00000416: 	xorl	%r8d, %r8d
.Ltmp959:
    00000419: 	movq	%r8, 0x8(%rsp)
    0000041e: 	movl	%r9d, (%rsp)
    00000422: 	callq	clock@PLT # Offset: 1058
    00000427: 	movl	0x38(%rsp), %edi
    0000042b: 	pxor	%xmm0, %xmm0
    0000042f: 	movl	(%rsp), %r9d
    00000433: 	movq	%rax, end_time(%rip)
    0000043a: 	subq	start_time(%rip), %rax
    00000441: 	cvtsi2sd	%rax, %xmm0
    00000446: 	movl	%edi, %eax
    00000448: 	divsd	DATAat0x49520(%rip), %xmm0
    00000450: 	movq	0x8(%rsp), %r8
    00000455: 	shrl	$0x1f, %eax
    00000458: 	movq	%xmm0, %rbx
    0000045d: 	addl	%edi, %eax
    0000045f: 	movl	0x3c(%rsp), %edi
    00000463: 	sarl	%eax
    00000465: 	movl	%edi, %edx
    00000467: 	imull	%edi, %eax
    0000046a: 	shrl	$0x1f, %edx
    0000046d: 	addl	%edi, %edx
    0000046f: 	movl	0x4c(%rsp), %edi
    00000473: 	sarl	%edx
    00000475: 	addl	%edx, %eax
    00000477: 	cltq
    00000479: 	subl	(%rbp,%rax,4), %edi
    0000047d: 	cmpl	%r12d, iterations(%rip)
    00000484: 	movl	%edi, %ebp
    00000486: 	jg	.Ltmp964 # Offset: 1158
    00000488: 	cmpq	$0xa, %r8
    0000048c: 	jle	.Ltmp964 # Offset: 1164
    0000048e: 	cmpl	$0x1, %r9d
    00000492: 	jle	.Ltmp964 # Offset: 1170
    00000494: 	movq	0x40(%rsp), %rax
    00000499: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004a0: 	movq	%r13, %rdi
    000004a3: 	movq	0x8(%rax), %rdx
    000004a7: 	movq	(%rax), %rsi
    000004aa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1194
    000004af: 	movl	$0x11, %edx
    000004b4: 	leaq	DATAat0x49199(%rip), %rsi
    000004bb: 	movq	%rax, %rdi
    000004be: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1214
    000004c3: 	movl	(%rsp), %r9d
    000004c7: 	movq	0x8(%rsp), %r8
    000004cc: 	jmp	.Ltmp965 # Offset: 1228
.Ltmp964:
    000004ce: 	movq	0x40(%rsp), %rax
    000004d3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004da: 	movq	%r8, 0x8(%rsp)
    000004df: 	movq	%r13, %rdi
    000004e2: 	movl	%r9d, (%rsp)
    000004e6: 	movq	0x8(%rax), %rdx
    000004ea: 	movq	(%rax), %rsi
    000004ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1261
    000004f2: 	movl	$0xa, %edx
    000004f7: 	leaq	DATAat0x491ab(%rip), %rsi
    000004fe: 	movq	%rax, %rdi
    00000501: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1281
    00000506: 	movq	0x8(%rsp), %r8
    0000050b: 	movl	(%rsp), %r9d
.Ltmp965:
    0000050f: 	movl	$0x4, %edx
    00000514: 	leaq	DATAat0x491b6(%rip), %rsi
    0000051b: 	movq	%r13, %rdi
    0000051e: 	movl	%r9d, (%rsp)
    00000522: 	movq	%r8, 0x8(%rsp)
    00000527: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1319
    0000052c: 	movl	%r12d, %esi
    0000052f: 	movq	%r13, %rdi
    00000532: 	callq	_ZNSolsEi@PLT # Offset: 1330
    00000537: 	movl	$0xb, %edx
    0000053c: 	leaq	DATAat0x491bb(%rip), %rsi
    00000543: 	movq	%rax, %rdi
    00000546: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1350
    0000054b: 	movl	$0xa, %edx
    00000550: 	leaq	DATAat0x491c7(%rip), %rsi
    00000557: 	movq	%r13, %rdi
    0000055a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1370
    0000055f: 	movq	0x8(%rsp), %rsi
    00000564: 	movq	%r13, %rdi
    00000567: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1383
    0000056c: 	movl	$0x7, %edx
    00000571: 	leaq	DATAat0x491d2(%rip), %rsi
    00000578: 	movq	%rax, %rdi
    0000057b: 	movq	%rax, %r12
    0000057e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1406
    00000583: 	movl	(%rsp), %esi
    00000586: 	movq	%r12, %rdi
    00000589: 	callq	_ZNSolsEi@PLT # Offset: 1417
    0000058e: 	movl	$0x10, %edx
    00000593: 	leaq	DATAat0x491da(%rip), %rsi
    0000059a: 	movq	%rax, %r12
    0000059d: 	movq	%rax, %rdi
    000005a0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1440
    000005a5: 	movl	%ebp, %esi
    000005a7: 	movq	%r12, %rdi
    000005aa: 	callq	_ZNSolsEi@PLT # Offset: 1450
    000005af: 	movl	$0x8, %edx
    000005b4: 	leaq	DATAat0x491eb(%rip), %rsi
    000005bb: 	movq	%rax, %rbp
    000005be: 	movq	%rax, %rdi
    000005c1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1473
    000005c6: 	movq	%rbx, %xmm0
    000005cb: 	movq	%rbp, %rdi
    000005ce: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1486
    000005d3: 	movl	$0x2, %edx
    000005d8: 	leaq	DATAat0x491f4(%rip), %rsi
    000005df: 	movq	%rax, %rdi
    000005e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1506
    000005e7: 	movl	0x48(%rsp), %eax
    000005eb: 	movl	%eax, iterations(%rip)
    000005f1: 	movq	0x68(%rsp), %rax
    000005f6: 	subq	%fs:0x28, %rax
    000005ff: 	jne	.Ltmp966 # Offset: 1535
    00000601: 	addq	$0x78, %rsp
    00000605: 	popq	%rbx
    00000606: 	popq	%rbp
    00000607: 	popq	%r12
    00000609: 	popq	%r13
    0000060b: 	popq	%r14
    0000060d: 	popq	%r15
    0000060f: 	retq # Offset: 1551
.Ltmp946:
    00000610: 	xorl	%r12d, %r12d
    00000613: 	xorl	%r9d, %r9d
    00000616: 	xorl	%r8d, %r8d
    00000619: 	jmp	.Ltmp959 # Offset: 1561
.Ltmp966:
    0000061e: 	callq	__stack_chk_fail@PLT # Offset: 1566
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil17jacobi2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil18jacobi2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x20b10
  Size        : 0x61e
  MaxSize     : 0x620
  Offset      : 0x20b10
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil18jacobi2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002c: 	movl	%edx, 0x28(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x2c(%rsp)
    00000037: 	leaq	0x40(%rsp), %rcx
    0000003c: 	movq	%r9, 0x30(%rsp)
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x58(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movaps	%xmm0, 0x40(%rsp)
    00000056: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 86
    0000005b: 	movl	%r15d, %edi
    0000005e: 	imull	%r14d, %edi
    00000062: 	movl	%eax, 0x3c(%rsp)
    00000066: 	movslq	%edi, %r15
    00000069: 	testl	%r15d, %r15d
    0000006c: 	jle	.Ltmp967 # Offset: 108
    0000006e: 	movslq	%r15d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	shlq	$0x2, %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp967:
    00000080: 	movl	iterations(%rip), %eax
    00000086: 	movl	$0x2710, iterations(%rip)
    00000090: 	movl	%eax, 0x38(%rsp)
    00000094: 	callq	clock@PLT # Offset: 148
    00000099: 	movl	iterations(%rip), %edx
    0000009f: 	movq	%rax, start_time(%rip)
    000000a6: 	testl	%edx, %edx
    000000a8: 	jle	.Ltmp968 # Offset: 168
    000000ae: 	movl	0x28(%rsp), %eax
    000000b2: 	movslq	%r12d, %r10
    000000b5: 	movl	$0x0, 0x18(%rsp)
    000000bd: 	pxor	%xmm3, %xmm3
    000000c1: 	shlq	$0x2, %r10
    000000c5: 	leal	-0x1(%rax), %r13d
    000000c9: 	movl	0x2c(%rsp), %eax
    000000cd: 	leal	-0x2(%rax), %edi
    000000d0: 	leal	(%r12,%r12), %eax
    000000d4: 	movq	%r15, %r12
    000000d7: 	cltq
    000000d9: 	movl	%edi, 0x1c(%rsp)
    000000dd: 	shrq	$0x2, %r12
    000000e1: 	movslq	%edi, %r14
    000000e4: 	shlq	$0x2, %rax
    000000e8: 	shlq	$0x4, %r12
    000000ec: 	movq	%rax, 0x20(%rsp)
    000000f1: 	leaq	-0x1(%r15), %rax
    000000f5: 	movq	%rax, 0x10(%rsp)
    000000fa: 	movq	%r15, %rax
    000000fd: 	andq	$-0x4, %rax
    00000101: 	movq	%rax, 0x8(%rsp)
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp982:
    00000110: 	cmpl	$0x1, %r13d
    00000114: 	jle	.Ltmp969 # Offset: 276
    0000011a: 	movl	0x1c(%rsp), %eax
    0000011e: 	testl	%eax, %eax
    00000120: 	jle	.Ltmp969 # Offset: 288
    00000122: 	movq	0x20(%rsp), %rax
    00000127: 	movq	%rbx, %r9
    0000012a: 	leaq	(%rbx,%r10), %rsi
    0000012e: 	leaq	(%rbp,%r10), %rdi
    00000133: 	movl	$0x1, %r11d
    00000139: 	leaq	(%rbx,%rax), %r8
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp971:
    00000140: 	addl	$0x1, %r11d
    00000144: 	movq	%r14, %rax
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp970:
    00000150: 	movslq	(%r9,%rax,4), %rcx
    00000154: 	movslq	-0x4(%rsi,%rax,4), %rdx
    00000159: 	addq	%rcx, %rdx
    0000015c: 	movslq	0x4(%rsi,%rax,4), %rcx
    00000161: 	addq	%rdx, %rcx
    00000164: 	movslq	(%r8,%rax,4), %rdx
    00000168: 	addq	%rcx, %rdx
    0000016b: 	leaq	0x5(%rdx), %rcx
    0000016f: 	addq	$0x2, %rdx
    00000173: 	cmovnsq	%rdx, %rcx
    00000177: 	sarq	$0x2, %rcx
    0000017b: 	movl	%ecx, (%rdi,%rax,4)
    0000017e: 	subq	$0x1, %rax
    00000182: 	testl	%eax, %eax
    00000184: 	jg	.Ltmp970 # Offset: 388
    00000186: 	addq	%r10, %r9
    00000189: 	addq	%r10, %rsi
    0000018c: 	addq	%r10, %r8
    0000018f: 	addq	%r10, %rdi
    00000192: 	cmpl	%r11d, %r13d
    00000195: 	jne	.Ltmp971 # Offset: 405
.Ltmp969:
    00000197: 	testq	%r15, %r15
    0000019a: 	je	.Ltmp972 # Offset: 410
    000001a0: 	cmpq	$0x2, 0x10(%rsp)
    000001a6: 	jbe	.Ltmp973 # Offset: 422
    000001ac: 	xorl	%eax, %eax
    000001ae: 	pxor	%xmm2, %xmm2
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp974:
    000001b8: 	movdqu	(%rbp,%rax), %xmm5
    000001be: 	movdqu	(%rbx,%rax), %xmm4
    000001c3: 	movdqa	%xmm3, %xmm0
    000001c7: 	movdqu	(%rbx,%rax), %xmm6
    000001cc: 	addq	$0x10, %rax
    000001d0: 	psubd	%xmm5, %xmm4
    000001d4: 	movdqa	%xmm5, %xmm1
    000001d8: 	pcmpgtd	%xmm4, %xmm0
    000001dc: 	psubd	%xmm6, %xmm1
    000001e0: 	pand	%xmm0, %xmm1
    000001e4: 	pandn	%xmm4, %xmm0
    000001e8: 	movdqa	%xmm3, %xmm4
    000001ec: 	por	%xmm1, %xmm0
    000001f0: 	pcmpgtd	%xmm0, %xmm4
    000001f4: 	movdqa	%xmm0, %xmm1
    000001f8: 	punpckldq	%xmm4, %xmm1
    000001fc: 	punpckhdq	%xmm4, %xmm0
    00000200: 	paddq	%xmm1, %xmm2
    00000204: 	paddq	%xmm0, %xmm2
    00000208: 	cmpq	%rax, %r12
    0000020b: 	jne	.Ltmp974 # Offset: 523
    0000020d: 	movdqa	%xmm2, %xmm0
    00000211: 	movq	0x8(%rsp), %rax
    00000216: 	psrldq	$0x8, %xmm0
    0000021b: 	paddq	%xmm0, %xmm2
    0000021f: 	movq	%rax, %rdx
    00000222: 	movq	%xmm2, %r8
    00000227: 	cmpq	%rax, %r15
    0000022a: 	je	.Ltmp975 # Offset: 554
.Ltmp985:
    0000022c: 	movl	(%rbp,%rdx,4), %esi
    00000230: 	movl	(%rbx,%rdx,4), %eax
    00000233: 	leaq	(,%rdx,4), %rcx
    0000023b: 	movl	%esi, %edi
    0000023d: 	subl	%eax, %edi
    0000023f: 	subl	%esi, %eax
    00000241: 	cmovsl	%edi, %eax
    00000244: 	cltq
    00000246: 	addq	%rax, %r8
    00000249: 	leaq	0x1(%rdx), %rax
    0000024d: 	cmpq	%rax, %r15
    00000250: 	jbe	.Ltmp976 # Offset: 592
    00000252: 	movl	0x4(%rbp,%rcx), %esi
    00000256: 	movl	0x4(%rbx,%rcx), %eax
    0000025a: 	movl	%esi, %edi
    0000025c: 	subl	%eax, %edi
    0000025e: 	subl	%esi, %eax
    00000260: 	cmovsl	%edi, %eax
    00000263: 	addq	$0x2, %rdx
    00000267: 	cltq
    00000269: 	addq	%rax, %r8
    0000026c: 	cmpq	%rdx, %r15
    0000026f: 	jbe	.Ltmp976 # Offset: 623
    00000271: 	movl	0x8(%rbp,%rcx), %edx
    00000275: 	movl	0x8(%rbx,%rcx), %eax
    00000279: 	movl	%edx, %ecx
    0000027b: 	subl	%eax, %ecx
    0000027d: 	subl	%edx, %eax
    0000027f: 	cmovsl	%ecx, %eax
    00000282: 	cltq
    00000284: 	addq	%rax, %r8
.Ltmp976:
    00000287: 	cmpq	$0x2, 0x10(%rsp)
    0000028d: 	jbe	.Ltmp977 # Offset: 653
.Ltmp975:
    00000293: 	xorl	%eax, %eax
    00000295: 	pxor	%xmm2, %xmm2
    00000299: 	nopl	(%rax) # Size: 7
.Ltmp978:
    000002a0: 	movdqu	(%rbp,%rax), %xmm7
    000002a6: 	movdqu	(%rbx,%rax), %xmm4
    000002ab: 	movdqa	%xmm3, %xmm0
    000002af: 	movdqu	(%rbx,%rax), %xmm5
    000002b4: 	addq	$0x10, %rax
    000002b8: 	psubd	%xmm7, %xmm4
    000002bc: 	movdqa	%xmm7, %xmm1
    000002c0: 	pcmpgtd	%xmm4, %xmm0
    000002c4: 	psubd	%xmm5, %xmm1
    000002c8: 	pand	%xmm0, %xmm1
    000002cc: 	pandn	%xmm4, %xmm0
    000002d0: 	por	%xmm1, %xmm0
    000002d4: 	movdqa	%xmm0, %xmm1
    000002d8: 	pcmpgtd	%xmm2, %xmm1
    000002dc: 	pand	%xmm1, %xmm0
    000002e0: 	pandn	%xmm2, %xmm1
    000002e4: 	movdqa	%xmm1, %xmm2
    000002e8: 	por	%xmm0, %xmm2
    000002ec: 	cmpq	%rax, %r12
    000002ef: 	jne	.Ltmp978 # Offset: 751
    000002f1: 	movdqa	%xmm2, %xmm1
    000002f5: 	movq	0x8(%rsp), %rax
    000002fa: 	psrldq	$0x8, %xmm1
    000002ff: 	movdqa	%xmm1, %xmm0
    00000303: 	movq	%rax, %rdx
    00000306: 	pcmpgtd	%xmm2, %xmm0
    0000030a: 	pand	%xmm0, %xmm1
    0000030e: 	pandn	%xmm2, %xmm0
    00000312: 	por	%xmm1, %xmm0
    00000316: 	movdqa	%xmm0, %xmm2
    0000031a: 	psrldq	$0x4, %xmm2
    0000031f: 	movdqa	%xmm2, %xmm1
    00000323: 	pcmpgtd	%xmm0, %xmm1
    00000327: 	pand	%xmm1, %xmm2
    0000032b: 	pandn	%xmm0, %xmm1
    0000032f: 	por	%xmm2, %xmm1
    00000333: 	movd	%xmm1, %r9d
    00000338: 	cmpq	%rax, %r15
    0000033b: 	je	.Ltmp979 # Offset: 827
.Ltmp984:
    0000033d: 	movl	(%rbp,%rdx,4), %esi
    00000341: 	movl	(%rbx,%rdx,4), %eax
    00000344: 	leaq	(,%rdx,4), %rcx
    0000034c: 	movl	%esi, %edi
    0000034e: 	subl	%eax, %edi
    00000350: 	subl	%esi, %eax
    00000352: 	cmovsl	%edi, %eax
    00000355: 	cmpl	%eax, %r9d
    00000358: 	cmovll	%eax, %r9d
    0000035c: 	leaq	0x1(%rdx), %rax
    00000360: 	cmpq	%rax, %r15
    00000363: 	jbe	.Ltmp979 # Offset: 867
    00000365: 	movl	0x4(%rbp,%rcx), %esi
    00000369: 	movl	0x4(%rbx,%rcx), %eax
    0000036d: 	movl	%esi, %edi
    0000036f: 	subl	%eax, %edi
    00000371: 	subl	%esi, %eax
    00000373: 	cmovsl	%edi, %eax
    00000376: 	cmpl	%eax, %r9d
    00000379: 	cmovll	%eax, %r9d
    0000037d: 	addq	$0x2, %rdx
    00000381: 	cmpq	%rdx, %r15
    00000384: 	jbe	.Ltmp979 # Offset: 900
    00000386: 	movl	0x8(%rbp,%rcx), %edx
    0000038a: 	movl	0x8(%rbx,%rcx), %eax
    0000038e: 	movl	%edx, %ecx
    00000390: 	subl	%eax, %ecx
    00000392: 	subl	%edx, %eax
    00000394: 	cmovsl	%ecx, %eax
    00000397: 	cmpl	%eax, %r9d
    0000039a: 	cmovll	%eax, %r9d
.Ltmp979:
    0000039e: 	movl	0x18(%rsp), %eax
    000003a2: 	cmpl	%eax, 0xa0(%rsp)
    000003a9: 	jge	.Ltmp980 # Offset: 937
    000003ab: 	testl	%r9d, %r9d
    000003ae: 	jle	.Ltmp981 # Offset: 942
    000003b0: 	cmpq	$0x9, %r8
    000003b4: 	jle	.Ltmp981 # Offset: 948
.Ltmp980:
    000003b6: 	addl	$0x1, 0x18(%rsp)
    000003bb: 	movl	0x18(%rsp), %edi
    000003bf: 	movq	%rbp, %rax
    000003c2: 	movq	%rbx, %rbp
    000003c5: 	cmpl	%edi, iterations(%rip)
    000003cb: 	jle	.Ltmp981 # Offset: 971
    000003cd: 	movq	%rax, %rbx
    000003d0: 	jmp	.Ltmp982 # Offset: 976
.Ltmp972:
    000003d5: 	movl	0x18(%rsp), %eax
    000003d9: 	cmpl	%eax, 0xa0(%rsp)
    000003e0: 	jl	.Ltmp983 # Offset: 992
    000003e2: 	xorl	%r8d, %r8d
    000003e5: 	xorl	%r9d, %r9d
    000003e8: 	jmp	.Ltmp980 # Offset: 1000
.Ltmp977:
    000003ea: 	xorl	%r9d, %r9d
    000003ed: 	xorl	%edx, %edx
    000003ef: 	jmp	.Ltmp984 # Offset: 1007
.Ltmp973:
    000003f4: 	xorl	%r8d, %r8d
    000003f7: 	xorl	%edx, %edx
    000003f9: 	jmp	.Ltmp985 # Offset: 1017
.Ltmp983:
    000003fe: 	xorl	%r9d, %r9d
    00000401: 	xorl	%r8d, %r8d
.Ltmp981:
    00000404: 	movl	%r9d, 0x10(%rsp)
    00000409: 	movq	%r8, 0x8(%rsp)
    0000040e: 	callq	clock@PLT # Offset: 1038
    00000413: 	movl	0x28(%rsp), %edi
    00000417: 	pxor	%xmm0, %xmm0
    0000041b: 	movq	0x8(%rsp), %r8
    00000420: 	movq	%rax, end_time(%rip)
    00000427: 	subq	start_time(%rip), %rax
    0000042e: 	cvtsi2sd	%rax, %xmm0
    00000433: 	movl	%edi, %eax
    00000435: 	divsd	DATAat0x49520(%rip), %xmm0
    0000043d: 	movl	0x10(%rsp), %r9d
    00000442: 	shrl	$0x1f, %eax
    00000445: 	movq	%xmm0, %rbx
    0000044a: 	addl	%edi, %eax
    0000044c: 	movl	0x2c(%rsp), %edi
    00000450: 	sarl	%eax
    00000452: 	movl	%edi, %edx
    00000454: 	imull	%edi, %eax
    00000457: 	shrl	$0x1f, %edx
    0000045a: 	addl	%edi, %edx
    0000045c: 	movl	0x3c(%rsp), %edi
    00000460: 	sarl	%edx
    00000462: 	addl	%edx, %eax
    00000464: 	cltq
    00000466: 	subl	(%rbp,%rax,4), %edi
    0000046a: 	movl	0x18(%rsp), %eax
    0000046e: 	cmpl	%eax, iterations(%rip)
    00000474: 	movl	%edi, %ebp
    00000476: 	jg	.Ltmp986 # Offset: 1142
    00000478: 	cmpq	$0xa, %r8
    0000047c: 	jle	.Ltmp986 # Offset: 1148
    0000047e: 	cmpl	$0x1, %r9d
    00000482: 	jle	.Ltmp986 # Offset: 1154
    00000484: 	movq	0x30(%rsp), %rax
    00000489: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000490: 	movq	%r12, %rdi
    00000493: 	movq	0x8(%rax), %rdx
    00000497: 	movq	(%rax), %rsi
    0000049a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1178
    0000049f: 	movl	$0x11, %edx
    000004a4: 	leaq	DATAat0x49199(%rip), %rsi
    000004ab: 	movq	%rax, %rdi
    000004ae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1198
    000004b3: 	movq	0x8(%rsp), %r8
    000004b8: 	movl	0x10(%rsp), %r9d
    000004bd: 	jmp	.Ltmp987 # Offset: 1213
.Ltmp986:
    000004bf: 	movq	0x30(%rsp), %rax
    000004c4: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000004cb: 	movl	%r9d, 0x10(%rsp)
    000004d0: 	movq	%r12, %rdi
    000004d3: 	movq	%r8, 0x8(%rsp)
    000004d8: 	movq	0x8(%rax), %rdx
    000004dc: 	movq	(%rax), %rsi
    000004df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1247
    000004e4: 	movl	$0xa, %edx
    000004e9: 	leaq	DATAat0x491ab(%rip), %rsi
    000004f0: 	movq	%rax, %rdi
    000004f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1267
    000004f8: 	movl	0x10(%rsp), %r9d
    000004fd: 	movq	0x8(%rsp), %r8
.Ltmp987:
    00000502: 	movl	$0x4, %edx
    00000507: 	movq	%r12, %rdi
    0000050a: 	movl	%r9d, 0x10(%rsp)
    0000050f: 	leaq	DATAat0x491b6(%rip), %rsi
    00000516: 	movq	%r8, 0x8(%rsp)
    0000051b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1307
    00000520: 	movl	0x18(%rsp), %esi
    00000524: 	movq	%r12, %rdi
    00000527: 	callq	_ZNSolsEi@PLT # Offset: 1319
    0000052c: 	movl	$0xb, %edx
    00000531: 	leaq	DATAat0x491bb(%rip), %rsi
    00000538: 	movq	%rax, %rdi
    0000053b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1339
    00000540: 	movl	$0xa, %edx
    00000545: 	movq	%r12, %rdi
    00000548: 	leaq	DATAat0x491c7(%rip), %rsi
    0000054f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1359
    00000554: 	movq	0x8(%rsp), %rsi
    00000559: 	movq	%r12, %rdi
    0000055c: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1372
    00000561: 	movl	$0x7, %edx
    00000566: 	leaq	DATAat0x491d2(%rip), %rsi
    0000056d: 	movq	%rax, %rdi
    00000570: 	movq	%rax, %r12
    00000573: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1395
    00000578: 	movl	0x10(%rsp), %esi
    0000057c: 	movq	%r12, %rdi
    0000057f: 	callq	_ZNSolsEi@PLT # Offset: 1407
    00000584: 	movl	$0x10, %edx
    00000589: 	leaq	DATAat0x491da(%rip), %rsi
    00000590: 	movq	%rax, %r12
    00000593: 	movq	%rax, %rdi
    00000596: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1430
    0000059b: 	movl	%ebp, %esi
    0000059d: 	movq	%r12, %rdi
    000005a0: 	callq	_ZNSolsEi@PLT # Offset: 1440
    000005a5: 	movl	$0x8, %edx
    000005aa: 	leaq	DATAat0x491eb(%rip), %rsi
    000005b1: 	movq	%rax, %rbp
    000005b4: 	movq	%rax, %rdi
    000005b7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1463
    000005bc: 	movq	%rbx, %xmm0
    000005c1: 	movq	%rbp, %rdi
    000005c4: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1476
    000005c9: 	movl	$0x2, %edx
    000005ce: 	leaq	DATAat0x491f4(%rip), %rsi
    000005d5: 	movq	%rax, %rdi
    000005d8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1496
    000005dd: 	movl	0x38(%rsp), %eax
    000005e1: 	movl	%eax, iterations(%rip)
    000005e7: 	movq	0x58(%rsp), %rax
    000005ec: 	subq	%fs:0x28, %rax
    000005f5: 	jne	.Ltmp988 # Offset: 1525
    000005f7: 	addq	$0x68, %rsp
    000005fb: 	popq	%rbx
    000005fc: 	popq	%rbp
    000005fd: 	popq	%r12
    000005ff: 	popq	%r13
    00000601: 	popq	%r14
    00000603: 	popq	%r15
    00000605: 	retq # Offset: 1541
.Ltmp968:
    00000606: 	movl	$0x0, 0x18(%rsp)
    0000060e: 	xorl	%r9d, %r9d
    00000611: 	xorl	%r8d, %r8d
    00000614: 	jmp	.Ltmp981 # Offset: 1556
.Ltmp988:
    00000619: 	callq	__stack_chk_fail@PLT # Offset: 1561
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil18jacobi2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil18jacobi2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x21130
  Size        : 0x669
  MaxSize     : 0x670
  Offset      : 0x21130
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil18jacobi2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x88, %rsp
    00000027: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002f: 	movl	%edx, 0x48(%rsp)
    00000033: 	movl	%r14d, %edx
    00000036: 	movl	%ecx, 0x4c(%rsp)
    0000003a: 	leaq	0x60(%rsp), %rcx
    0000003f: 	movq	%r9, 0x50(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x78(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x60(%rsp)
    00000059: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 89
    0000005e: 	movl	%r15d, %esi
    00000061: 	imull	%r14d, %esi
    00000065: 	movl	%eax, 0x5c(%rsp)
    00000069: 	movl	%esi, %r13d
    0000006c: 	testl	%esi, %esi
    0000006e: 	jle	.Ltmp989 # Offset: 110
    00000070: 	movslq	%esi, %rdx
    00000073: 	movq	%rbp, %rdi
    00000076: 	movq	%rbx, %rsi
    00000079: 	shlq	$0x2, %rdx
    0000007d: 	callq	memmove@PLT # Offset: 125
.Ltmp989:
    00000082: 	movl	iterations(%rip), %eax
    00000088: 	movl	$0x2710, iterations(%rip)
    00000092: 	movl	%eax, 0x58(%rsp)
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	movl	iterations(%rip), %edx
    000000a1: 	movq	%rax, start_time(%rip)
    000000a8: 	testl	%edx, %edx
    000000aa: 	jle	.Ltmp990 # Offset: 170
    000000b0: 	movl	0x48(%rsp), %edi
    000000b4: 	movl	0x4c(%rsp), %ecx
    000000b8: 	movl	%r12d, %r10d
    000000bb: 	pxor	%xmm3, %xmm3
    000000bf: 	negl	%r10d
    000000c2: 	movl	$0x0, 0x4(%rsp)
    000000ca: 	leal	-0x2(%rdi), %eax
    000000cd: 	leal	-0x1(%rcx), %esi
    000000d0: 	movslq	%r10d, %r10
    000000d3: 	movl	%eax, 0x20(%rsp)
    000000d7: 	imull	%r12d, %eax
    000000db: 	negq	%r10
    000000de: 	movl	%esi, 0x24(%rsp)
    000000e2: 	movslq	%r13d, %rsi
    000000e5: 	shlq	$0x2, %r10
    000000e9: 	movq	%rsi, 0x8(%rsp)
    000000ee: 	cltq
    000000f0: 	movq	%rax, %rdx
    000000f3: 	negq	%rdx
    000000f6: 	shlq	$0x2, %rdx
    000000fa: 	movq	%rdx, 0x40(%rsp)
    000000ff: 	leal	-0x3(%rdi), %edx
    00000102: 	imull	%r12d, %edx
    00000106: 	movslq	%edx, %rdx
    00000109: 	shlq	$0x2, %rdx
    0000010d: 	movq	%rdx, 0x30(%rsp)
    00000112: 	leal	-0x1(%rdi), %edx
    00000115: 	imull	%r12d, %edx
    00000119: 	movslq	%edx, %rdx
    0000011c: 	leaq	(,%rdx,4), %rdi
    00000124: 	leal	-0x3(%rcx), %edx
    00000127: 	leaq	0x1(%rdx), %r15
    0000012b: 	movq	%rdi, 0x28(%rsp)
    00000130: 	addq	%r15, %rax
    00000133: 	negq	%r15
    00000136: 	shlq	$0x2, %rax
    0000013a: 	shlq	$0x2, %r15
    0000013e: 	movq	%rax, 0x38(%rsp)
    00000143: 	movq	%rsi, %rax
    00000146: 	leaq	-0x1(%rsi), %rsi
    0000014a: 	movq	%rsi, 0x18(%rsp)
    0000014f: 	movq	%rax, %rsi
    00000152: 	andq	$-0x4, %rax
    00000156: 	shrq	$0x2, %rsi
    0000015a: 	movq	%rax, 0x10(%rsp)
    0000015f: 	movq	%rsi, %r14
    00000162: 	shlq	$0x4, %r14
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1004:
    00000170: 	movl	0x20(%rsp), %eax
    00000174: 	testl	%eax, %eax
    00000176: 	jle	.Ltmp991 # Offset: 374
    0000017c: 	cmpl	$0x1, 0x24(%rsp)
    00000181: 	jle	.Ltmp991 # Offset: 385
    00000187: 	movq	0x38(%rsp), %r8
    0000018c: 	movq	0x28(%rsp), %r13
    00000191: 	movq	0x30(%rsp), %r12
    00000196: 	movq	0x40(%rsp), %r9
    0000019b: 	movl	0x20(%rsp), %r11d
.Ltmp993:
    000001a0: 	leaq	(%r9,%r12), %rdi
    000001a4: 	leaq	(%r13,%r9), %rsi
    000001a9: 	subl	$0x1, %r11d
    000001ad: 	leaq	(%r15,%r8), %rax
    000001b1: 	addq	%rbx, %rdi
    000001b4: 	addq	%rbx, %rsi
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp992:
    000001c0: 	movslq	0x4(%rax,%rdi), %rcx
    000001c5: 	movslq	(%rbx,%rax), %rdx
    000001c9: 	addq	%rcx, %rdx
    000001cc: 	movslq	0x8(%rbx,%rax), %rcx
    000001d1: 	addq	%rdx, %rcx
    000001d4: 	movslq	0x4(%rax,%rsi), %rdx
    000001d9: 	addq	%rcx, %rdx
    000001dc: 	leaq	0x5(%rdx), %rcx
    000001e0: 	addq	$0x2, %rdx
    000001e4: 	cmovnsq	%rdx, %rcx
    000001e8: 	sarq	$0x2, %rcx
    000001ec: 	movl	%ecx, 0x4(%rbp,%rax)
    000001f0: 	addq	$0x4, %rax
    000001f4: 	cmpq	%rax, %r8
    000001f7: 	jne	.Ltmp992 # Offset: 503
    000001f9: 	addq	%r10, %r9
    000001fc: 	subq	%r10, %r12
    000001ff: 	subq	%r10, %r13
    00000202: 	subq	%r10, %r8
    00000205: 	testl	%r11d, %r11d
    00000208: 	jne	.Ltmp993 # Offset: 520
.Ltmp991:
    0000020a: 	cmpq	$0x0, 0x8(%rsp)
    00000210: 	je	.Ltmp994 # Offset: 528
    00000216: 	cmpq	$0x2, 0x18(%rsp)
    0000021c: 	jbe	.Ltmp995 # Offset: 540
    00000222: 	xorl	%eax, %eax
    00000224: 	pxor	%xmm2, %xmm2
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp996:
    00000230: 	movdqu	(%rbp,%rax), %xmm5
    00000236: 	movdqu	(%rbx,%rax), %xmm4
    0000023b: 	movdqa	%xmm3, %xmm0
    0000023f: 	movdqu	(%rbx,%rax), %xmm6
    00000244: 	addq	$0x10, %rax
    00000248: 	psubd	%xmm5, %xmm4
    0000024c: 	movdqa	%xmm5, %xmm1
    00000250: 	pcmpgtd	%xmm4, %xmm0
    00000254: 	psubd	%xmm6, %xmm1
    00000258: 	pand	%xmm0, %xmm1
    0000025c: 	pandn	%xmm4, %xmm0
    00000260: 	movdqa	%xmm3, %xmm4
    00000264: 	por	%xmm1, %xmm0
    00000268: 	pcmpgtd	%xmm0, %xmm4
    0000026c: 	movdqa	%xmm0, %xmm1
    00000270: 	punpckldq	%xmm4, %xmm1
    00000274: 	punpckhdq	%xmm4, %xmm0
    00000278: 	paddq	%xmm1, %xmm2
    0000027c: 	paddq	%xmm0, %xmm2
    00000280: 	cmpq	%rax, %r14
    00000283: 	jne	.Ltmp996 # Offset: 643
    00000285: 	movdqa	%xmm2, %xmm0
    00000289: 	movq	0x10(%rsp), %rax
    0000028e: 	psrldq	$0x8, %xmm0
    00000293: 	paddq	%xmm0, %xmm2
    00000297: 	movq	%rax, %rdx
    0000029a: 	movq	%xmm2, %r12
    0000029f: 	cmpq	%rax, 0x8(%rsp)
    000002a4: 	je	.Ltmp997 # Offset: 676
.Ltmp1007:
    000002a6: 	movl	(%rbp,%rdx,4), %esi
    000002aa: 	movl	(%rbx,%rdx,4), %eax
    000002ad: 	leaq	(,%rdx,4), %rcx
    000002b5: 	movq	0x8(%rsp), %r11
    000002ba: 	movl	%esi, %edi
    000002bc: 	subl	%eax, %edi
    000002be: 	subl	%esi, %eax
    000002c0: 	cmovsl	%edi, %eax
    000002c3: 	cltq
    000002c5: 	addq	%rax, %r12
    000002c8: 	leaq	0x1(%rdx), %rax
    000002cc: 	cmpq	%rax, %r11
    000002cf: 	jbe	.Ltmp998 # Offset: 719
    000002d1: 	movl	0x4(%rbp,%rcx), %esi
    000002d5: 	movl	0x4(%rbx,%rcx), %eax
    000002d9: 	movl	%esi, %edi
    000002db: 	subl	%eax, %edi
    000002dd: 	subl	%esi, %eax
    000002df: 	cmovsl	%edi, %eax
    000002e2: 	addq	$0x2, %rdx
    000002e6: 	cltq
    000002e8: 	addq	%rax, %r12
    000002eb: 	cmpq	%rdx, %r11
    000002ee: 	jbe	.Ltmp998 # Offset: 750
    000002f0: 	movl	0x8(%rbp,%rcx), %edx
    000002f4: 	movl	0x8(%rbx,%rcx), %eax
    000002f8: 	movl	%edx, %ecx
    000002fa: 	subl	%eax, %ecx
    000002fc: 	subl	%edx, %eax
    000002fe: 	cmovsl	%ecx, %eax
    00000301: 	cltq
    00000303: 	addq	%rax, %r12
.Ltmp998:
    00000306: 	cmpq	$0x2, 0x18(%rsp)
    0000030c: 	jbe	.Ltmp999 # Offset: 780
.Ltmp997:
    00000312: 	xorl	%eax, %eax
    00000314: 	pxor	%xmm2, %xmm2
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1000:
    00000320: 	movdqu	(%rbp,%rax), %xmm7
    00000326: 	movdqu	(%rbx,%rax), %xmm4
    0000032b: 	movdqa	%xmm3, %xmm0
    0000032f: 	movdqu	(%rbx,%rax), %xmm5
    00000334: 	addq	$0x10, %rax
    00000338: 	psubd	%xmm7, %xmm4
    0000033c: 	movdqa	%xmm7, %xmm1
    00000340: 	pcmpgtd	%xmm4, %xmm0
    00000344: 	psubd	%xmm5, %xmm1
    00000348: 	pand	%xmm0, %xmm1
    0000034c: 	pandn	%xmm4, %xmm0
    00000350: 	por	%xmm1, %xmm0
    00000354: 	movdqa	%xmm0, %xmm1
    00000358: 	pcmpgtd	%xmm2, %xmm1
    0000035c: 	pand	%xmm1, %xmm0
    00000360: 	pandn	%xmm2, %xmm1
    00000364: 	movdqa	%xmm1, %xmm2
    00000368: 	por	%xmm0, %xmm2
    0000036c: 	cmpq	%rax, %r14
    0000036f: 	jne	.Ltmp1000 # Offset: 879
    00000371: 	movdqa	%xmm2, %xmm1
    00000375: 	movq	0x10(%rsp), %rax
    0000037a: 	psrldq	$0x8, %xmm1
    0000037f: 	movdqa	%xmm1, %xmm0
    00000383: 	movq	%rax, %rdx
    00000386: 	pcmpgtd	%xmm2, %xmm0
    0000038a: 	pand	%xmm0, %xmm1
    0000038e: 	pandn	%xmm2, %xmm0
    00000392: 	por	%xmm1, %xmm0
    00000396: 	movdqa	%xmm0, %xmm2
    0000039a: 	psrldq	$0x4, %xmm2
    0000039f: 	movdqa	%xmm2, %xmm1
    000003a3: 	pcmpgtd	%xmm0, %xmm1
    000003a7: 	pand	%xmm1, %xmm2
    000003ab: 	pandn	%xmm0, %xmm1
    000003af: 	por	%xmm2, %xmm1
    000003b3: 	movd	%xmm1, %r13d
    000003b8: 	cmpq	%rax, 0x8(%rsp)
    000003bd: 	je	.Ltmp1001 # Offset: 957
.Ltmp1006:
    000003bf: 	movl	(%rbp,%rdx,4), %esi
    000003c3: 	movl	(%rbx,%rdx,4), %eax
    000003c6: 	leaq	(,%rdx,4), %rcx
    000003ce: 	movq	0x8(%rsp), %r11
    000003d3: 	movl	%esi, %edi
    000003d5: 	subl	%eax, %edi
    000003d7: 	subl	%esi, %eax
    000003d9: 	cmovsl	%edi, %eax
    000003dc: 	cmpl	%eax, %r13d
    000003df: 	cmovll	%eax, %r13d
    000003e3: 	leaq	0x1(%rdx), %rax
    000003e7: 	cmpq	%rax, %r11
    000003ea: 	jbe	.Ltmp1001 # Offset: 1002
    000003ec: 	movl	0x4(%rbp,%rcx), %esi
    000003f0: 	movl	0x4(%rbx,%rcx), %eax
    000003f4: 	movl	%esi, %edi
    000003f6: 	subl	%eax, %edi
    000003f8: 	subl	%esi, %eax
    000003fa: 	cmovsl	%edi, %eax
    000003fd: 	cmpl	%eax, %r13d
    00000400: 	cmovll	%eax, %r13d
    00000404: 	addq	$0x2, %rdx
    00000408: 	cmpq	%rdx, %r11
    0000040b: 	jbe	.Ltmp1001 # Offset: 1035
    0000040d: 	movl	0x8(%rbp,%rcx), %edx
    00000411: 	movl	0x8(%rbx,%rcx), %eax
    00000415: 	movl	%edx, %ecx
    00000417: 	subl	%eax, %ecx
    00000419: 	subl	%edx, %eax
    0000041b: 	cmovsl	%ecx, %eax
    0000041e: 	cmpl	%eax, %r13d
    00000421: 	cmovll	%eax, %r13d
.Ltmp1001:
    00000425: 	movl	0x4(%rsp), %eax
    00000429: 	cmpl	%eax, 0xc0(%rsp)
    00000430: 	jge	.Ltmp1002 # Offset: 1072
    00000432: 	testl	%r13d, %r13d
    00000435: 	jle	.Ltmp1003 # Offset: 1077
    00000437: 	cmpq	$0x9, %r12
    0000043b: 	jle	.Ltmp1003 # Offset: 1083
.Ltmp1002:
    0000043d: 	addl	$0x1, 0x4(%rsp)
    00000442: 	movl	0x4(%rsp), %edi
    00000446: 	movq	%rbp, %rax
    00000449: 	movq	%rbx, %rbp
    0000044c: 	cmpl	%edi, iterations(%rip)
    00000452: 	jle	.Ltmp1003 # Offset: 1106
    00000454: 	movq	%rax, %rbx
    00000457: 	jmp	.Ltmp1004 # Offset: 1111
.Ltmp994:
    0000045c: 	movl	0x4(%rsp), %eax
    00000460: 	cmpl	%eax, 0xc0(%rsp)
    00000467: 	jl	.Ltmp1005 # Offset: 1127
    00000469: 	xorl	%r12d, %r12d
    0000046c: 	xorl	%r13d, %r13d
    0000046f: 	jmp	.Ltmp1002 # Offset: 1135
.Ltmp999:
    00000471: 	xorl	%r13d, %r13d
    00000474: 	xorl	%edx, %edx
    00000476: 	jmp	.Ltmp1006 # Offset: 1142
.Ltmp995:
    0000047b: 	xorl	%r12d, %r12d
    0000047e: 	xorl	%edx, %edx
    00000480: 	jmp	.Ltmp1007 # Offset: 1152
.Ltmp1005:
    00000485: 	xorl	%r13d, %r13d
    00000488: 	xorl	%r12d, %r12d
.Ltmp1003:
    0000048b: 	callq	clock@PLT # Offset: 1163
    00000490: 	movl	0x48(%rsp), %esi
    00000494: 	pxor	%xmm0, %xmm0
    00000498: 	movq	%rax, end_time(%rip)
    0000049f: 	subq	start_time(%rip), %rax
    000004a6: 	cvtsi2sd	%rax, %xmm0
    000004ab: 	movl	%esi, %eax
    000004ad: 	divsd	DATAat0x49520(%rip), %xmm0
    000004b5: 	movq	%xmm0, %rbx
    000004ba: 	shrl	$0x1f, %eax
    000004bd: 	addl	%esi, %eax
    000004bf: 	movl	0x4c(%rsp), %esi
    000004c3: 	sarl	%eax
    000004c5: 	movl	%esi, %edx
    000004c7: 	imull	%esi, %eax
    000004ca: 	shrl	$0x1f, %edx
    000004cd: 	addl	%esi, %edx
    000004cf: 	movl	0x5c(%rsp), %esi
    000004d3: 	sarl	%edx
    000004d5: 	addl	%edx, %eax
    000004d7: 	cltq
    000004d9: 	subl	(%rbp,%rax,4), %esi
    000004dd: 	movl	0x4(%rsp), %eax
    000004e1: 	cmpl	%eax, iterations(%rip)
    000004e7: 	movl	%esi, %ebp
    000004e9: 	jg	.Ltmp1008 # Offset: 1257
    000004eb: 	cmpq	$0xa, %r12
    000004ef: 	jle	.Ltmp1008 # Offset: 1263
    000004f1: 	cmpl	$0x1, %r13d
    000004f5: 	jle	.Ltmp1008 # Offset: 1269
    000004f7: 	movq	0x50(%rsp), %rax
    000004fc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000503: 	movq	%r14, %rdi
    00000506: 	movq	0x8(%rax), %rdx
    0000050a: 	movq	(%rax), %rsi
    0000050d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1293
    00000512: 	movl	$0x11, %edx
    00000517: 	leaq	DATAat0x49199(%rip), %rsi
    0000051e: 	movq	%rax, %rdi
    00000521: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1313
    00000526: 	jmp	.Ltmp1009 # Offset: 1318
.Ltmp1008:
    00000528: 	movq	0x50(%rsp), %rax
    0000052d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000534: 	movq	%r14, %rdi
    00000537: 	movq	0x8(%rax), %rdx
    0000053b: 	movq	(%rax), %rsi
    0000053e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1342
    00000543: 	movl	$0xa, %edx
    00000548: 	leaq	DATAat0x491ab(%rip), %rsi
    0000054f: 	movq	%rax, %rdi
    00000552: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1362
.Ltmp1009:
    00000557: 	movl	$0x4, %edx
    0000055c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000563: 	movq	%r14, %rdi
    00000566: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1382
    0000056b: 	movl	0x4(%rsp), %esi
    0000056f: 	movq	%r14, %rdi
    00000572: 	callq	_ZNSolsEi@PLT # Offset: 1394
    00000577: 	movl	$0xb, %edx
    0000057c: 	leaq	DATAat0x491bb(%rip), %rsi
    00000583: 	movq	%rax, %rdi
    00000586: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1414
    0000058b: 	movl	$0xa, %edx
    00000590: 	leaq	DATAat0x491c7(%rip), %rsi
    00000597: 	movq	%r14, %rdi
    0000059a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1434
    0000059f: 	movq	%r12, %rsi
    000005a2: 	movq	%r14, %rdi
    000005a5: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1445
    000005aa: 	movl	$0x7, %edx
    000005af: 	leaq	DATAat0x491d2(%rip), %rsi
    000005b6: 	movq	%rax, %r12
    000005b9: 	movq	%rax, %rdi
    000005bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1468
    000005c1: 	movq	%r12, %rdi
    000005c4: 	movl	%r13d, %esi
    000005c7: 	callq	_ZNSolsEi@PLT # Offset: 1479
    000005cc: 	movl	$0x10, %edx
    000005d1: 	leaq	DATAat0x491da(%rip), %rsi
    000005d8: 	movq	%rax, %r12
    000005db: 	movq	%rax, %rdi
    000005de: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1502
    000005e3: 	movl	%ebp, %esi
    000005e5: 	movq	%r12, %rdi
    000005e8: 	callq	_ZNSolsEi@PLT # Offset: 1512
    000005ed: 	movl	$0x8, %edx
    000005f2: 	leaq	DATAat0x491eb(%rip), %rsi
    000005f9: 	movq	%rax, %rbp
    000005fc: 	movq	%rax, %rdi
    000005ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1535
    00000604: 	movq	%rbx, %xmm0
    00000609: 	movq	%rbp, %rdi
    0000060c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1548
    00000611: 	movl	$0x2, %edx
    00000616: 	leaq	DATAat0x491f4(%rip), %rsi
    0000061d: 	movq	%rax, %rdi
    00000620: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1568
    00000625: 	movl	0x58(%rsp), %eax
    00000629: 	movl	%eax, iterations(%rip)
    0000062f: 	movq	0x78(%rsp), %rax
    00000634: 	subq	%fs:0x28, %rax
    0000063d: 	jne	.Ltmp1010 # Offset: 1597
    0000063f: 	addq	$0x88, %rsp
    00000646: 	popq	%rbx
    00000647: 	popq	%rbp
    00000648: 	popq	%r12
    0000064a: 	popq	%r13
    0000064c: 	popq	%r14
    0000064e: 	popq	%r15
    00000650: 	retq # Offset: 1616
.Ltmp990:
    00000651: 	movl	$0x0, 0x4(%rsp)
    00000659: 	xorl	%r13d, %r13d
    0000065c: 	xorl	%r12d, %r12d
    0000065f: 	jmp	.Ltmp1003 # Offset: 1631
.Ltmp1010:
    00000664: 	callq	__stack_chk_fail@PLT # Offset: 1636
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil18jacobi2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil17jacobi2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x217a0
  Size        : 0x847
  MaxSize     : 0x850
  Offset      : 0x217a0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil17jacobi2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	imull	%ebp, %ebx
    0000001d: 	subq	$0x98, %rsp
    00000024: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002c: 	movl	%edx, 0x58(%rsp)
    00000030: 	movl	%ebp, %edx
    00000032: 	movl	%ecx, 0x5c(%rsp)
    00000036: 	leaq	0x70(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x14(%rsp)
    00000040: 	movq	%r9, 0x60(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x88(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	movaps	%xmm0, 0x70(%rsp)
    0000005d: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 93
    00000062: 	movl	%eax, 0x6c(%rsp)
    00000066: 	testl	%ebx, %ebx
    00000068: 	jle	.Ltmp1011 # Offset: 104
    0000006a: 	movslq	%ebx, %rdx
    0000006d: 	movq	%r14, %rsi
    00000070: 	movq	%r15, %rdi
    00000073: 	shlq	$0x2, %rdx
    00000077: 	callq	memmove@PLT # Offset: 119
.Ltmp1011:
    0000007c: 	movl	iterations(%rip), %eax
    00000082: 	movl	$0x2710, iterations(%rip)
    0000008c: 	movl	%eax, 0x68(%rsp)
    00000090: 	callq	clock@PLT # Offset: 144
    00000095: 	movq	%rax, start_time(%rip)
    0000009c: 	movl	iterations(%rip), %eax
    000000a2: 	testl	%eax, %eax
    000000a4: 	jle	.Ltmp1012 # Offset: 164
    000000aa: 	movl	0x58(%rsp), %eax
    000000ae: 	movl	0x5c(%rsp), %ecx
    000000b2: 	movslq	%ebx, %rbx
    000000b5: 	pxor	%xmm2, %xmm2
    000000b9: 	movq	%rbx, 0x30(%rsp)
    000000be: 	subl	$0x1, %eax
    000000c1: 	movl	$0x0, 0x50(%rsp)
    000000c9: 	movl	%eax, 0x10(%rsp)
    000000cd: 	leal	-0x4(%rcx), %eax
    000000d0: 	movl	%eax, 0x28(%rsp)
    000000d4: 	movl	0x14(%rsp), %eax
    000000d8: 	addl	%eax, %eax
    000000da: 	movl	%eax, 0x54(%rsp)
    000000de: 	leal	-0x6(%rcx), %eax
    000000e1: 	shrl	$0x2, %eax
    000000e4: 	movl	%eax, %edx
    000000e6: 	leal	0x5(,%rax,4), %eax
    000000ed: 	movl	%eax, 0x2c(%rsp)
    000000f1: 	leaq	-0x1(%rbx), %rax
    000000f5: 	leaq	(,%rdx,4), %rsi
    000000fd: 	movq	%rax, 0x48(%rsp)
    00000102: 	movq	%rbx, %rax
    00000105: 	andq	$-0x4, %rbx
    00000109: 	shrq	$0x2, %rax
    0000010d: 	movq	%rsi, 0x20(%rsp)
    00000112: 	shlq	$0x4, %rax
    00000116: 	movq	%rbx, 0x38(%rsp)
    0000011b: 	movq	%rax, 0x40(%rsp)
    00000120: 	leal	-0x1(%rcx), %eax
    00000123: 	movl	%eax, 0x8(%rsp)
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1028:
    00000130: 	cmpl	$0x1, 0x10(%rsp)
    00000135: 	jle	.Ltmp1013 # Offset: 309
    0000013b: 	leaq	0x10(%r14), %rax
    0000013f: 	movl	0x54(%rsp), %r13d
    00000144: 	movl	0x14(%rsp), %ebp
    00000148: 	xorl	%r12d, %r12d
    0000014b: 	movl	$0x1, 0xc(%rsp)
    00000153: 	movq	%rax, 0x18(%rsp)
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1017:
    00000160: 	addl	$0x1, 0xc(%rsp)
    00000165: 	cmpl	$0x1, 0x28(%rsp)
    0000016a: 	movl	$0x1, %eax
    0000016f: 	jle	.Ltmp1014 # Offset: 367
    00000175: 	movslq	%r12d, %rdx
    00000178: 	movq	0x18(%rsp), %rbx
    0000017d: 	movslq	%ebp, %r11
    00000180: 	movslq	%r13d, %rsi
    00000183: 	shlq	$0x2, %r11
    00000187: 	leaq	(%r14,%rdx,4), %rcx
    0000018b: 	addq	0x20(%rsp), %rdx
    00000190: 	leaq	(%r14,%r11), %rax
    00000194: 	leaq	(%r14,%rsi,4), %rsi
    00000198: 	addq	%r15, %r11
    0000019b: 	leaq	(%rbx,%rdx,4), %rbx
    0000019f: 	nop # Size: 1
.Ltmp1015:
    000001a0: 	movslq	0x4(%rcx), %rdx
    000001a4: 	movslq	(%rax), %r10
    000001a7: 	movslq	0x8(%rax), %rdi
    000001ab: 	movslq	0xc(%rcx), %r8
    000001af: 	addq	%rdx, %r10
    000001b2: 	movslq	0x4(%rax), %r9
    000001b6: 	movslq	0x8(%rcx), %rdx
    000001ba: 	addq	%rdi, %r10
    000001bd: 	addq	%r8, %rdi
    000001c0: 	movslq	0x10(%rax), %r8
    000001c4: 	addq	%rdx, %r9
    000001c7: 	movslq	0xc(%rax), %rdx
    000001cb: 	addq	%rdi, %r8
    000001ce: 	movslq	0x10(%rcx), %rdi
    000001d2: 	addq	%rdx, %r9
    000001d5: 	addq	%rdi, %rdx
    000001d8: 	movslq	0x14(%rax), %rdi
    000001dc: 	addq	%rdx, %rdi
    000001df: 	movslq	0x4(%rsi), %rdx
    000001e3: 	addq	%r10, %rdx
    000001e6: 	leaq	0x5(%rdx), %r10
    000001ea: 	addq	$0x2, %rdx
    000001ee: 	cmovnsq	%rdx, %r10
    000001f2: 	movslq	0x8(%rsi), %rdx
    000001f6: 	addq	%r9, %rdx
    000001f9: 	sarq	$0x2, %r10
    000001fd: 	leaq	0x5(%rdx), %r9
    00000201: 	addq	$0x2, %rdx
    00000205: 	movq	%r10, %xmm0
    0000020a: 	cmovsq	%r9, %rdx
    0000020e: 	sarq	$0x2, %rdx
    00000212: 	movq	%rdx, %xmm5
    00000217: 	movslq	0xc(%rsi), %rdx
    0000021b: 	punpcklqdq	%xmm5, %xmm0
    0000021f: 	addq	%r8, %rdx
    00000222: 	leaq	0x5(%rdx), %r8
    00000226: 	addq	$0x2, %rdx
    0000022a: 	cmovsq	%r8, %rdx
    0000022e: 	sarq	$0x2, %rdx
    00000232: 	movq	%rdx, %xmm1
    00000237: 	movslq	0x10(%rsi), %rdx
    0000023b: 	addq	%rdi, %rdx
    0000023e: 	leaq	0x5(%rdx), %rdi
    00000242: 	addq	$0x2, %rdx
    00000246: 	cmovsq	%rdi, %rdx
    0000024a: 	addq	$0x10, %rcx
    0000024e: 	addq	$0x10, %rax
    00000252: 	addq	$0x10, %rsi
    00000256: 	addq	$0x10, %r11
    0000025a: 	sarq	$0x2, %rdx
    0000025e: 	movq	%rdx, %xmm6
    00000263: 	punpcklqdq	%xmm6, %xmm1
    00000267: 	shufps	$0x88, %xmm1, %xmm0
    0000026b: 	movups	%xmm0, -0xc(%r11)
    00000270: 	cmpq	%rbx, %rcx
    00000273: 	jne	.Ltmp1015 # Offset: 627
    00000279: 	movl	0x2c(%rsp), %eax
.Ltmp1014:
    0000027d: 	cmpl	0x8(%rsp), %eax
    00000281: 	jge	.Ltmp1016 # Offset: 641
    00000287: 	leal	(%rax,%r12), %edx
    0000028b: 	leal	-0x1(%rax,%rbp), %esi
    0000028f: 	movslq	%edx, %rdx
    00000292: 	movslq	%esi, %rsi
    00000295: 	movslq	(%r14,%rdx,4), %rcx
    00000299: 	leal	0x1(%rax), %edx
    0000029c: 	leal	(%rbp,%rdx), %edi
    000002a0: 	movslq	%edi, %rdi
    000002a3: 	leaq	(%r14,%rdi,4), %r9
    000002a7: 	movl	(%r9), %r8d
    000002aa: 	addl	(%r14,%rsi,4), %r8d
    000002ae: 	leal	(%rax,%r13), %esi
    000002b2: 	movslq	%esi, %rsi
    000002b5: 	movslq	%r8d, %r8
    000002b8: 	movslq	(%r14,%rsi,4), %rsi
    000002bc: 	addq	%rcx, %r8
    000002bf: 	leal	(%rax,%rbp), %ecx
    000002c2: 	movslq	%ecx, %rcx
    000002c5: 	addq	%r8, %rsi
    000002c8: 	leaq	0x5(%rsi), %r8
    000002cc: 	addq	$0x2, %rsi
    000002d0: 	cmovnsq	%rsi, %r8
    000002d4: 	sarq	$0x2, %r8
    000002d8: 	movl	%r8d, (%r15,%rcx,4)
    000002dc: 	cmpl	0x8(%rsp), %edx
    000002e0: 	jge	.Ltmp1016 # Offset: 736
    000002e6: 	leal	(%r12,%rdx), %esi
    000002ea: 	addl	%r13d, %edx
    000002ed: 	movslq	%esi, %rsi
    000002f0: 	movslq	%edx, %rdx
    000002f3: 	movslq	(%r14,%rsi,4), %r11
    000002f7: 	leal	0x2(%rax), %esi
    000002fa: 	movslq	(%r14,%rdx,4), %rdx
    000002fe: 	leal	(%rbp,%rsi), %r8d
    00000303: 	movslq	%r8d, %r8
    00000306: 	leaq	(%r14,%r8,4), %r10
    0000030a: 	movl	(%r10), %ebx
    0000030d: 	addl	(%r14,%rcx,4), %ebx
    00000311: 	movslq	%ebx, %rcx
    00000314: 	movl	0x8(%rsp), %ebx
    00000318: 	addq	%r11, %rcx
    0000031b: 	addq	%rcx, %rdx
    0000031e: 	leaq	0x5(%rdx), %rcx
    00000322: 	addq	$0x2, %rdx
    00000326: 	cmovnsq	%rdx, %rcx
    0000032a: 	sarq	$0x2, %rcx
    0000032e: 	movl	%ecx, (%r15,%rdi,4)
    00000332: 	cmpl	%esi, %ebx
    00000334: 	jle	.Ltmp1016 # Offset: 820
    0000033a: 	leal	(%r12,%rsi), %edx
    0000033e: 	addl	%r13d, %esi
    00000341: 	movl	(%r9), %r9d
    00000344: 	movslq	%edx, %rdx
    00000347: 	movslq	%esi, %rsi
    0000034a: 	movslq	(%r14,%rdx,4), %rdi
    0000034e: 	leal	0x3(%rax), %edx
    00000351: 	movslq	(%r14,%rsi,4), %rsi
    00000355: 	leal	(%rbp,%rdx), %ecx
    00000359: 	movslq	%ecx, %rcx
    0000035c: 	addl	(%r14,%rcx,4), %r9d
    00000360: 	movslq	%r9d, %r9
    00000363: 	addq	%rdi, %r9
    00000366: 	addq	%r9, %rsi
    00000369: 	leaq	0x5(%rsi), %rdi
    0000036d: 	addq	$0x2, %rsi
    00000371: 	cmovnsq	%rsi, %rdi
    00000375: 	sarq	$0x2, %rdi
    00000379: 	movl	%edi, (%r15,%r8,4)
    0000037d: 	cmpl	%ebx, %edx
    0000037f: 	jge	.Ltmp1016 # Offset: 895
    00000381: 	leal	(%r12,%rdx), %esi
    00000385: 	leal	0x4(%rax,%rbp), %eax
    00000389: 	addl	%r13d, %edx
    0000038c: 	movl	(%r10), %edi
    0000038f: 	cltq
    00000391: 	movslq	%esi, %rsi
    00000394: 	movslq	%edx, %rdx
    00000397: 	addl	(%r14,%rax,4), %edi
    0000039b: 	movslq	(%r14,%rsi,4), %rsi
    0000039f: 	movslq	(%r14,%rdx,4), %rax
    000003a3: 	movslq	%edi, %rdi
    000003a6: 	addq	%rsi, %rdi
    000003a9: 	addq	%rdi, %rax
    000003ac: 	leaq	0x5(%rax), %rdx
    000003b0: 	addq	$0x2, %rax
    000003b4: 	cmovnsq	%rax, %rdx
    000003b8: 	sarq	$0x2, %rdx
    000003bc: 	movl	%edx, (%r15,%rcx,4)
.Ltmp1016:
    000003c0: 	movl	0x14(%rsp), %eax
    000003c4: 	movl	0xc(%rsp), %ebx
    000003c8: 	addl	%eax, %r12d
    000003cb: 	addl	%eax, %ebp
    000003cd: 	addl	%eax, %r13d
    000003d0: 	cmpl	%ebx, 0x10(%rsp)
    000003d4: 	jne	.Ltmp1017 # Offset: 980
.Ltmp1013:
    000003da: 	cmpq	$0x0, 0x30(%rsp)
    000003e0: 	je	.Ltmp1018 # Offset: 992
    000003e6: 	cmpq	$0x2, 0x48(%rsp)
    000003ec: 	jbe	.Ltmp1019 # Offset: 1004
    000003f2: 	movq	0x40(%rsp), %rdx
    000003f7: 	xorl	%eax, %eax
    000003f9: 	pxor	%xmm3, %xmm3
    000003fd: 	nopl	(%rax) # Size: 3
.Ltmp1020:
    00000400: 	movdqu	(%r15,%rax), %xmm7
    00000406: 	movdqu	(%r14,%rax), %xmm4
    0000040c: 	movdqa	%xmm2, %xmm0
    00000410: 	psubd	%xmm7, %xmm4
    00000414: 	movdqa	%xmm7, %xmm1
    00000418: 	movdqu	(%r14,%rax), %xmm7
    0000041e: 	addq	$0x10, %rax
    00000422: 	pcmpgtd	%xmm4, %xmm0
    00000426: 	psubd	%xmm7, %xmm1
    0000042a: 	pand	%xmm0, %xmm1
    0000042e: 	pandn	%xmm4, %xmm0
    00000432: 	movdqa	%xmm2, %xmm4
    00000436: 	por	%xmm1, %xmm0
    0000043a: 	pcmpgtd	%xmm0, %xmm4
    0000043e: 	movdqa	%xmm0, %xmm1
    00000442: 	punpckldq	%xmm4, %xmm1
    00000446: 	punpckhdq	%xmm4, %xmm0
    0000044a: 	paddq	%xmm1, %xmm3
    0000044e: 	paddq	%xmm0, %xmm3
    00000452: 	cmpq	%rdx, %rax
    00000455: 	jne	.Ltmp1020 # Offset: 1109
    00000457: 	movdqa	%xmm3, %xmm0
    0000045b: 	movq	0x38(%rsp), %rax
    00000460: 	psrldq	$0x8, %xmm0
    00000465: 	paddq	%xmm0, %xmm3
    00000469: 	movq	%rax, %rdx
    0000046c: 	movq	%xmm3, %rbp
    00000471: 	cmpq	%rax, 0x30(%rsp)
    00000476: 	je	.Ltmp1021 # Offset: 1142
.Ltmp1031:
    00000478: 	movl	(%r15,%rdx,4), %esi
    0000047c: 	movl	(%r14,%rdx,4), %eax
    00000480: 	leaq	(,%rdx,4), %rcx
    00000488: 	movq	0x30(%rsp), %rbx
    0000048d: 	movl	%esi, %edi
    0000048f: 	subl	%eax, %edi
    00000491: 	subl	%esi, %eax
    00000493: 	cmovsl	%edi, %eax
    00000496: 	cltq
    00000498: 	addq	%rax, %rbp
    0000049b: 	leaq	0x1(%rdx), %rax
    0000049f: 	cmpq	%rax, %rbx
    000004a2: 	jbe	.Ltmp1022 # Offset: 1186
    000004a4: 	movl	0x4(%r15,%rcx), %esi
    000004a9: 	movl	0x4(%r14,%rcx), %eax
    000004ae: 	movl	%esi, %edi
    000004b0: 	subl	%eax, %edi
    000004b2: 	subl	%esi, %eax
    000004b4: 	cmovsl	%edi, %eax
    000004b7: 	addq	$0x2, %rdx
    000004bb: 	cltq
    000004bd: 	addq	%rax, %rbp
    000004c0: 	cmpq	%rdx, %rbx
    000004c3: 	jbe	.Ltmp1022 # Offset: 1219
    000004c5: 	movl	0x8(%r15,%rcx), %edx
    000004ca: 	movl	0x8(%r14,%rcx), %eax
    000004cf: 	movl	%edx, %ecx
    000004d1: 	subl	%eax, %ecx
    000004d3: 	subl	%edx, %eax
    000004d5: 	cmovsl	%ecx, %eax
    000004d8: 	cltq
    000004da: 	addq	%rax, %rbp
.Ltmp1022:
    000004dd: 	cmpq	$0x2, 0x48(%rsp)
    000004e3: 	jbe	.Ltmp1023 # Offset: 1251
.Ltmp1021:
    000004e9: 	movq	0x40(%rsp), %rdx
    000004ee: 	xorl	%eax, %eax
    000004f0: 	pxor	%xmm3, %xmm3
    000004f4: 	nopl	(%rax) # Size: 4
.Ltmp1024:
    000004f8: 	movdqu	(%r15,%rax), %xmm7
    000004fe: 	movdqu	(%r14,%rax), %xmm4
    00000504: 	movdqa	%xmm2, %xmm0
    00000508: 	psubd	%xmm7, %xmm4
    0000050c: 	movdqa	%xmm7, %xmm1
    00000510: 	movdqu	(%r14,%rax), %xmm7
    00000516: 	addq	$0x10, %rax
    0000051a: 	pcmpgtd	%xmm4, %xmm0
    0000051e: 	psubd	%xmm7, %xmm1
    00000522: 	pand	%xmm0, %xmm1
    00000526: 	pandn	%xmm4, %xmm0
    0000052a: 	por	%xmm1, %xmm0
    0000052e: 	movdqa	%xmm0, %xmm1
    00000532: 	pcmpgtd	%xmm3, %xmm1
    00000536: 	pand	%xmm1, %xmm0
    0000053a: 	pandn	%xmm3, %xmm1
    0000053e: 	movdqa	%xmm1, %xmm3
    00000542: 	por	%xmm0, %xmm3
    00000546: 	cmpq	%rdx, %rax
    00000549: 	jne	.Ltmp1024 # Offset: 1353
    0000054b: 	movdqa	%xmm3, %xmm1
    0000054f: 	movq	0x38(%rsp), %rax
    00000554: 	psrldq	$0x8, %xmm1
    00000559: 	movdqa	%xmm1, %xmm0
    0000055d: 	movq	%rax, %rdx
    00000560: 	pcmpgtd	%xmm3, %xmm0
    00000564: 	pand	%xmm0, %xmm1
    00000568: 	pandn	%xmm3, %xmm0
    0000056c: 	por	%xmm1, %xmm0
    00000570: 	movdqa	%xmm0, %xmm3
    00000574: 	psrldq	$0x4, %xmm3
    00000579: 	movdqa	%xmm3, %xmm1
    0000057d: 	pcmpgtd	%xmm0, %xmm1
    00000581: 	pand	%xmm1, %xmm3
    00000585: 	pandn	%xmm0, %xmm1
    00000589: 	por	%xmm3, %xmm1
    0000058d: 	movd	%xmm1, %r12d
    00000592: 	cmpq	%rax, 0x30(%rsp)
    00000597: 	je	.Ltmp1025 # Offset: 1431
.Ltmp1030:
    00000599: 	movl	(%r15,%rdx,4), %esi
    0000059d: 	movl	(%r14,%rdx,4), %eax
    000005a1: 	leaq	(,%rdx,4), %rcx
    000005a9: 	movq	0x30(%rsp), %rbx
    000005ae: 	movl	%esi, %edi
    000005b0: 	subl	%eax, %edi
    000005b2: 	subl	%esi, %eax
    000005b4: 	cmovsl	%edi, %eax
    000005b7: 	cmpl	%eax, %r12d
    000005ba: 	cmovll	%eax, %r12d
    000005be: 	leaq	0x1(%rdx), %rax
    000005c2: 	cmpq	%rax, %rbx
    000005c5: 	jbe	.Ltmp1025 # Offset: 1477
    000005c7: 	movl	0x4(%r15,%rcx), %esi
    000005cc: 	movl	0x4(%r14,%rcx), %eax
    000005d1: 	movl	%esi, %edi
    000005d3: 	subl	%eax, %edi
    000005d5: 	subl	%esi, %eax
    000005d7: 	cmovsl	%edi, %eax
    000005da: 	cmpl	%eax, %r12d
    000005dd: 	cmovll	%eax, %r12d
    000005e1: 	addq	$0x2, %rdx
    000005e5: 	cmpq	%rdx, %rbx
    000005e8: 	jbe	.Ltmp1025 # Offset: 1512
    000005ea: 	movl	0x8(%r15,%rcx), %edx
    000005ef: 	movl	0x8(%r14,%rcx), %eax
    000005f4: 	movl	%edx, %ecx
    000005f6: 	subl	%eax, %ecx
    000005f8: 	subl	%edx, %eax
    000005fa: 	cmovsl	%ecx, %eax
    000005fd: 	cmpl	%eax, %r12d
    00000600: 	cmovll	%eax, %r12d
.Ltmp1025:
    00000604: 	movl	0x50(%rsp), %eax
    00000608: 	cmpl	%eax, 0xd0(%rsp)
    0000060f: 	jge	.Ltmp1026 # Offset: 1551
    00000611: 	testl	%r12d, %r12d
    00000614: 	jle	.Ltmp1027 # Offset: 1556
    00000616: 	cmpq	$0x9, %rbp
    0000061a: 	jle	.Ltmp1027 # Offset: 1562
.Ltmp1026:
    0000061c: 	addl	$0x1, 0x50(%rsp)
    00000621: 	movl	0x50(%rsp), %ebx
    00000625: 	movq	%r15, %rax
    00000628: 	movq	%r14, %r15
    0000062b: 	cmpl	%ebx, iterations(%rip)
    00000631: 	jle	.Ltmp1027 # Offset: 1585
    00000633: 	movq	%rax, %r14
    00000636: 	jmp	.Ltmp1028 # Offset: 1590
.Ltmp1018:
    0000063b: 	movl	0x50(%rsp), %eax
    0000063f: 	cmpl	%eax, 0xd0(%rsp)
    00000646: 	jl	.Ltmp1029 # Offset: 1606
    00000648: 	xorl	%ebp, %ebp
    0000064a: 	xorl	%r12d, %r12d
    0000064d: 	jmp	.Ltmp1026 # Offset: 1613
.Ltmp1023:
    0000064f: 	xorl	%r12d, %r12d
    00000652: 	xorl	%edx, %edx
    00000654: 	jmp	.Ltmp1030 # Offset: 1620
.Ltmp1019:
    00000659: 	xorl	%ebp, %ebp
    0000065b: 	xorl	%edx, %edx
    0000065d: 	jmp	.Ltmp1031 # Offset: 1629
.Ltmp1029:
    00000662: 	xorl	%r12d, %r12d
    00000665: 	xorl	%ebp, %ebp
.Ltmp1027:
    00000667: 	callq	clock@PLT # Offset: 1639
    0000066c: 	movl	0x58(%rsp), %ecx
    00000670: 	pxor	%xmm0, %xmm0
    00000674: 	movl	0x6c(%rsp), %r13d
    00000679: 	movq	%rax, end_time(%rip)
    00000680: 	subq	start_time(%rip), %rax
    00000687: 	cvtsi2sd	%rax, %xmm0
    0000068c: 	movl	%ecx, %eax
    0000068e: 	divsd	DATAat0x49520(%rip), %xmm0
    00000696: 	movq	%xmm0, %rbx
    0000069b: 	shrl	$0x1f, %eax
    0000069e: 	addl	%ecx, %eax
    000006a0: 	movl	0x5c(%rsp), %ecx
    000006a4: 	sarl	%eax
    000006a6: 	movl	%ecx, %edx
    000006a8: 	imull	%ecx, %eax
    000006ab: 	shrl	$0x1f, %edx
    000006ae: 	addl	%ecx, %edx
    000006b0: 	sarl	%edx
    000006b2: 	addl	%edx, %eax
    000006b4: 	cltq
    000006b6: 	subl	(%r15,%rax,4), %r13d
    000006ba: 	movl	0x50(%rsp), %eax
    000006be: 	cmpl	%eax, iterations(%rip)
    000006c4: 	jg	.Ltmp1032 # Offset: 1732
    000006c6: 	cmpq	$0xa, %rbp
    000006ca: 	jle	.Ltmp1032 # Offset: 1738
    000006cc: 	cmpl	$0x1, %r12d
    000006d0: 	jle	.Ltmp1032 # Offset: 1744
    000006d2: 	movq	0x60(%rsp), %rax
    000006d7: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000006de: 	movq	%r14, %rdi
    000006e1: 	movq	0x8(%rax), %rdx
    000006e5: 	movq	(%rax), %rsi
    000006e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1768
    000006ed: 	movl	$0x11, %edx
    000006f2: 	leaq	DATAat0x49199(%rip), %rsi
    000006f9: 	movq	%rax, %rdi
    000006fc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1788
    00000701: 	jmp	.Ltmp1033 # Offset: 1793
.Ltmp1032:
    00000703: 	movq	0x60(%rsp), %rax
    00000708: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000070f: 	movq	%r14, %rdi
    00000712: 	movq	0x8(%rax), %rdx
    00000716: 	movq	(%rax), %rsi
    00000719: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1817
    0000071e: 	movl	$0xa, %edx
    00000723: 	leaq	DATAat0x491ab(%rip), %rsi
    0000072a: 	movq	%rax, %rdi
    0000072d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1837
.Ltmp1033:
    00000732: 	movl	$0x4, %edx
    00000737: 	leaq	DATAat0x491b6(%rip), %rsi
    0000073e: 	movq	%r14, %rdi
    00000741: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1857
    00000746: 	movl	0x50(%rsp), %esi
    0000074a: 	movq	%r14, %rdi
    0000074d: 	callq	_ZNSolsEi@PLT # Offset: 1869
    00000752: 	movl	$0xb, %edx
    00000757: 	leaq	DATAat0x491bb(%rip), %rsi
    0000075e: 	movq	%rax, %rdi
    00000761: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1889
    00000766: 	movl	$0xa, %edx
    0000076b: 	leaq	DATAat0x491c7(%rip), %rsi
    00000772: 	movq	%r14, %rdi
    00000775: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1909
    0000077a: 	movq	%rbp, %rsi
    0000077d: 	movq	%r14, %rdi
    00000780: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1920
    00000785: 	movl	$0x7, %edx
    0000078a: 	leaq	DATAat0x491d2(%rip), %rsi
    00000791: 	movq	%rax, %rbp
    00000794: 	movq	%rax, %rdi
    00000797: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1943
    0000079c: 	movq	%rbp, %rdi
    0000079f: 	movl	%r12d, %esi
    000007a2: 	callq	_ZNSolsEi@PLT # Offset: 1954
    000007a7: 	movl	$0x10, %edx
    000007ac: 	leaq	DATAat0x491da(%rip), %rsi
    000007b3: 	movq	%rax, %rbp
    000007b6: 	movq	%rax, %rdi
    000007b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1977
    000007be: 	movq	%rbp, %rdi
    000007c1: 	movl	%r13d, %esi
    000007c4: 	callq	_ZNSolsEi@PLT # Offset: 1988
    000007c9: 	movl	$0x8, %edx
    000007ce: 	leaq	DATAat0x491eb(%rip), %rsi
    000007d5: 	movq	%rax, %rbp
    000007d8: 	movq	%rax, %rdi
    000007db: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2011
    000007e0: 	movq	%rbx, %xmm0
    000007e5: 	movq	%rbp, %rdi
    000007e8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2024
    000007ed: 	movl	$0x2, %edx
    000007f2: 	leaq	DATAat0x491f4(%rip), %rsi
    000007f9: 	movq	%rax, %rdi
    000007fc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2044
    00000801: 	movl	0x68(%rsp), %eax
    00000805: 	movl	%eax, iterations(%rip)
    0000080b: 	movq	0x88(%rsp), %rax
    00000813: 	subq	%fs:0x28, %rax
    0000081c: 	jne	.Ltmp1034 # Offset: 2076
    0000081e: 	addq	$0x98, %rsp
    00000825: 	popq	%rbx
    00000826: 	popq	%rbp
    00000827: 	popq	%r12
    00000829: 	popq	%r13
    0000082b: 	popq	%r14
    0000082d: 	popq	%r15
    0000082f: 	retq # Offset: 2095
.Ltmp1012:
    00000830: 	movl	$0x0, 0x50(%rsp)
    00000838: 	xorl	%r12d, %r12d
    0000083b: 	xorl	%ebp, %ebp
    0000083d: 	jmp	.Ltmp1027 # Offset: 2109
.Ltmp1034:
    00000842: 	callq	__stack_chk_fail@PLT # Offset: 2114
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil17jacobi2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil18jacobi2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x21ff0
  Size        : 0x84a
  MaxSize     : 0x850
  Offset      : 0x21ff0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil18jacobi2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%r8d, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%ecx, %r13d
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%edx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movl	%ebp, %esi
    0000001b: 	movq	%rdi, %rbx
    0000001e: 	subq	$0x98, %rsp
    00000025: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002d: 	movl	%edx, 0x58(%rsp)
    00000031: 	movl	%r13d, %edx
    00000034: 	movl	%ecx, 0x5c(%rsp)
    00000038: 	leaq	0x70(%rsp), %rcx
    0000003d: 	movq	%r9, 0x60(%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0x88(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x70(%rsp)
    0000005a: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 90
    0000005f: 	movl	%ebp, %edi
    00000061: 	imull	%r13d, %edi
    00000065: 	movl	%eax, 0x6c(%rsp)
    00000069: 	movl	%edi, %ebp
    0000006b: 	testl	%edi, %edi
    0000006d: 	jle	.Ltmp1035 # Offset: 109
    0000006f: 	movslq	%edi, %rdx
    00000072: 	movq	%rbx, %rsi
    00000075: 	movq	%r15, %rdi
    00000078: 	shlq	$0x2, %rdx
    0000007c: 	callq	memmove@PLT # Offset: 124
.Ltmp1035:
    00000081: 	movl	iterations(%rip), %eax
    00000087: 	movl	$0x2710, iterations(%rip)
    00000091: 	movl	%eax, 0x68(%rsp)
    00000095: 	callq	clock@PLT # Offset: 149
    0000009a: 	movq	%rax, start_time(%rip)
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	testl	%eax, %eax
    000000a9: 	jle	.Ltmp1036 # Offset: 169
    000000af: 	movl	0x58(%rsp), %eax
    000000b3: 	movl	0x5c(%rsp), %esi
    000000b7: 	movslq	%ebp, %rdi
    000000ba: 	pxor	%xmm2, %xmm2
    000000be: 	movq	%rdi, 0x30(%rsp)
    000000c3: 	subl	$0x1, %eax
    000000c6: 	movl	$0x0, 0x50(%rsp)
    000000ce: 	movl	%eax, 0x14(%rsp)
    000000d2: 	leal	-0x4(%rsi), %eax
    000000d5: 	movl	%eax, 0x28(%rsp)
    000000d9: 	leal	(%r14,%r14), %eax
    000000dd: 	movl	%eax, 0x54(%rsp)
    000000e1: 	leal	-0x6(%rsi), %eax
    000000e4: 	shrl	$0x2, %eax
    000000e7: 	movl	%eax, %edx
    000000e9: 	leal	0x5(,%rax,4), %eax
    000000f0: 	movl	%eax, 0x2c(%rsp)
    000000f4: 	leaq	-0x1(%rdi), %rax
    000000f8: 	leaq	(,%rdx,4), %rcx
    00000100: 	movq	%rax, 0x48(%rsp)
    00000105: 	movq	%rdi, %rax
    00000108: 	andq	$-0x4, %rdi
    0000010c: 	shrq	$0x2, %rax
    00000110: 	movq	%rcx, 0x20(%rsp)
    00000115: 	shlq	$0x4, %rax
    00000119: 	movq	%rdi, 0x38(%rsp)
    0000011e: 	movq	%rax, 0x40(%rsp)
    00000123: 	leal	-0x1(%rsi), %eax
    00000126: 	movl	%eax, 0x4(%rsp)
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1052:
    00000130: 	cmpl	$0x1, 0x14(%rsp)
    00000135: 	jle	.Ltmp1037 # Offset: 309
    0000013b: 	leaq	0x10(%rbx), %rax
    0000013f: 	movl	0x54(%rsp), %r13d
    00000144: 	movl	%r14d, %ebp
    00000147: 	xorl	%r12d, %r12d
    0000014a: 	movl	$0x1, 0x10(%rsp)
    00000152: 	movq	%rax, 0x18(%rsp)
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1041:
    00000160: 	addl	$0x1, 0x10(%rsp)
    00000165: 	cmpl	$0x1, 0x28(%rsp)
    0000016a: 	movl	$0x1, %eax
    0000016f: 	jle	.Ltmp1038 # Offset: 367
    00000175: 	movslq	%r13d, %rcx
    00000178: 	movslq	%ebp, %rdx
    0000017b: 	movq	%rbx, 0x8(%rsp)
    00000180: 	movslq	%r12d, %rax
    00000183: 	leaq	(%rbx,%rcx,4), %rsi
    00000187: 	movq	0x18(%rsp), %rcx
    0000018c: 	leaq	(,%rdx,4), %r8
    00000194: 	addq	0x20(%rsp), %rdx
    00000199: 	leaq	(%rbx,%rax,4), %rdi
    0000019d: 	leaq	(%rbx,%r8), %rax
    000001a1: 	addq	%r15, %r8
    000001a4: 	leaq	(%rcx,%rdx,4), %r11
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1039:
    000001b0: 	movslq	0x4(%rax), %r10
    000001b4: 	movslq	0x8(%rdi), %rdx
    000001b8: 	movslq	0xc(%rax), %rcx
    000001bc: 	movslq	0x8(%rax), %r9
    000001c0: 	addq	%r10, %rdx
    000001c3: 	movslq	0x8(%rsi), %r10
    000001c7: 	addq	%rcx, %rdx
    000001ca: 	addq	%r10, %rdx
    000001cd: 	leaq	0x5(%rdx), %r10
    000001d1: 	addq	$0x2, %rdx
    000001d5: 	cmovnsq	%rdx, %r10
    000001d9: 	movslq	0xc(%rdi), %rdx
    000001dd: 	leaq	(%rdx,%r9), %rbx
    000001e1: 	movslq	0x10(%rax), %rdx
    000001e5: 	sarq	$0x2, %r10
    000001e9: 	movd	%r10d, %xmm0
    000001ee: 	movslq	(%rax), %r10
    000001f1: 	addq	%rdx, %rbx
    000001f4: 	movslq	0xc(%rsi), %rdx
    000001f8: 	addq	%rbx, %rdx
    000001fb: 	leaq	0x5(%rdx), %rbx
    000001ff: 	addq	$0x2, %rdx
    00000203: 	cmovsq	%rbx, %rdx
    00000207: 	sarq	$0x2, %rdx
    0000020b: 	movd	%edx, %xmm5
    0000020f: 	movslq	0x10(%rdi), %rdx
    00000213: 	punpckldq	%xmm5, %xmm0
    00000217: 	addq	%rcx, %rdx
    0000021a: 	movslq	0x14(%rax), %rcx
    0000021e: 	addq	%rcx, %rdx
    00000221: 	movslq	0x10(%rsi), %rcx
    00000225: 	addq	%rcx, %rdx
    00000228: 	leaq	0x5(%rdx), %rcx
    0000022c: 	addq	$0x2, %rdx
    00000230: 	cmovnsq	%rdx, %rcx
    00000234: 	movslq	0x4(%rdi), %rdx
    00000238: 	addq	%r10, %rdx
    0000023b: 	sarq	$0x2, %rcx
    0000023f: 	addq	%r9, %rdx
    00000242: 	movslq	0x4(%rsi), %r9
    00000246: 	movl	%ecx, 0x10(%r8)
    0000024a: 	movq	%xmm0, 0x8(%r8)
    00000250: 	addq	%r9, %rdx
    00000253: 	leaq	0x5(%rdx), %r9
    00000257: 	addq	$0x2, %rdx
    0000025b: 	cmovnsq	%rdx, %r9
    0000025f: 	addq	$0x10, %rax
    00000263: 	addq	$0x10, %rdi
    00000267: 	addq	$0x10, %rsi
    0000026b: 	addq	$0x10, %r8
    0000026f: 	sarq	$0x2, %r9
    00000273: 	movl	%r9d, -0xc(%r8)
    00000277: 	cmpq	%r11, %rax
    0000027a: 	jne	.Ltmp1039 # Offset: 634
    00000280: 	movq	0x8(%rsp), %rbx
    00000285: 	movl	0x2c(%rsp), %eax
.Ltmp1038:
    00000289: 	cmpl	0x4(%rsp), %eax
    0000028d: 	jge	.Ltmp1040 # Offset: 653
    00000293: 	leal	(%rax,%r12), %edx
    00000297: 	leal	-0x1(%rax,%rbp), %esi
    0000029b: 	movslq	%edx, %rdx
    0000029e: 	movslq	%esi, %rsi
    000002a1: 	movslq	(%rbx,%rdx,4), %rcx
    000002a5: 	leal	0x1(%rax), %edx
    000002a8: 	leal	(%rbp,%rdx), %edi
    000002ac: 	movslq	%edi, %rdi
    000002af: 	leaq	(%rbx,%rdi,4), %r9
    000002b3: 	movl	(%r9), %r8d
    000002b6: 	addl	(%rbx,%rsi,4), %r8d
    000002ba: 	leal	(%rax,%r13), %esi
    000002be: 	movslq	%esi, %rsi
    000002c1: 	movslq	%r8d, %r8
    000002c4: 	movslq	(%rbx,%rsi,4), %rsi
    000002c8: 	addq	%rcx, %r8
    000002cb: 	leal	(%rax,%rbp), %ecx
    000002ce: 	movslq	%ecx, %rcx
    000002d1: 	addq	%r8, %rsi
    000002d4: 	leaq	0x5(%rsi), %r8
    000002d8: 	addq	$0x2, %rsi
    000002dc: 	cmovnsq	%rsi, %r8
    000002e0: 	sarq	$0x2, %r8
    000002e4: 	movl	%r8d, (%r15,%rcx,4)
    000002e8: 	cmpl	0x4(%rsp), %edx
    000002ec: 	jge	.Ltmp1040 # Offset: 748
    000002f2: 	leal	(%r12,%rdx), %esi
    000002f6: 	addl	%r13d, %edx
    000002f9: 	movl	(%rbx,%rcx,4), %ecx
    000002fc: 	movslq	%esi, %rsi
    000002ff: 	movslq	%edx, %rdx
    00000302: 	movslq	(%rbx,%rsi,4), %r11
    00000306: 	leal	0x2(%rax), %esi
    00000309: 	movslq	(%rbx,%rdx,4), %rdx
    0000030d: 	leal	(%rbp,%rsi), %r8d
    00000312: 	movslq	%r8d, %r8
    00000315: 	leaq	(%rbx,%r8,4), %r10
    00000319: 	addl	(%r10), %ecx
    0000031c: 	movslq	%ecx, %rcx
    0000031f: 	addq	%r11, %rcx
    00000322: 	movl	0x4(%rsp), %r11d
    00000327: 	addq	%rcx, %rdx
    0000032a: 	leaq	0x5(%rdx), %rcx
    0000032e: 	addq	$0x2, %rdx
    00000332: 	cmovnsq	%rdx, %rcx
    00000336: 	sarq	$0x2, %rcx
    0000033a: 	movl	%ecx, (%r15,%rdi,4)
    0000033e: 	cmpl	%esi, %r11d
    00000341: 	jle	.Ltmp1040 # Offset: 833
    00000347: 	leal	(%r12,%rsi), %edx
    0000034b: 	addl	%r13d, %esi
    0000034e: 	movl	(%r9), %r9d
    00000351: 	movslq	%edx, %rdx
    00000354: 	movslq	%esi, %rsi
    00000357: 	movslq	(%rbx,%rdx,4), %rdi
    0000035b: 	leal	0x3(%rax), %edx
    0000035e: 	movslq	(%rbx,%rsi,4), %rsi
    00000362: 	leal	(%rbp,%rdx), %ecx
    00000366: 	movslq	%ecx, %rcx
    00000369: 	addl	(%rbx,%rcx,4), %r9d
    0000036d: 	movslq	%r9d, %r9
    00000370: 	addq	%rdi, %r9
    00000373: 	addq	%r9, %rsi
    00000376: 	leaq	0x5(%rsi), %rdi
    0000037a: 	addq	$0x2, %rsi
    0000037e: 	cmovnsq	%rsi, %rdi
    00000382: 	sarq	$0x2, %rdi
    00000386: 	movl	%edi, (%r15,%r8,4)
    0000038a: 	cmpl	%r11d, %edx
    0000038d: 	jge	.Ltmp1040 # Offset: 909
    0000038f: 	leal	(%r12,%rdx), %esi
    00000393: 	leal	0x4(%rax,%rbp), %eax
    00000397: 	addl	%r13d, %edx
    0000039a: 	movl	(%r10), %edi
    0000039d: 	cltq
    0000039f: 	movslq	%esi, %rsi
    000003a2: 	movslq	%edx, %rdx
    000003a5: 	addl	(%rbx,%rax,4), %edi
    000003a8: 	movslq	(%rbx,%rsi,4), %rsi
    000003ac: 	movslq	(%rbx,%rdx,4), %rax
    000003b0: 	movslq	%edi, %rdi
    000003b3: 	addq	%rsi, %rdi
    000003b6: 	addq	%rdi, %rax
    000003b9: 	leaq	0x5(%rax), %rdx
    000003bd: 	addq	$0x2, %rax
    000003c1: 	cmovnsq	%rax, %rdx
    000003c5: 	sarq	$0x2, %rdx
    000003c9: 	movl	%edx, (%r15,%rcx,4)
.Ltmp1040:
    000003cd: 	movl	0x10(%rsp), %edi
    000003d1: 	addl	%r14d, %r12d
    000003d4: 	addl	%r14d, %ebp
    000003d7: 	addl	%r14d, %r13d
    000003da: 	cmpl	%edi, 0x14(%rsp)
    000003de: 	jne	.Ltmp1041 # Offset: 990
.Ltmp1037:
    000003e4: 	cmpq	$0x0, 0x30(%rsp)
    000003ea: 	je	.Ltmp1042 # Offset: 1002
    000003f0: 	cmpq	$0x2, 0x48(%rsp)
    000003f6: 	jbe	.Ltmp1043 # Offset: 1014
    000003fc: 	movq	0x40(%rsp), %rdx
    00000401: 	xorl	%eax, %eax
    00000403: 	pxor	%xmm3, %xmm3
    00000407: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1044:
    00000410: 	movdqu	(%r15,%rax), %xmm6
    00000416: 	movdqu	(%rbx,%rax), %xmm4
    0000041b: 	movdqa	%xmm2, %xmm0
    0000041f: 	movdqu	(%rbx,%rax), %xmm7
    00000424: 	addq	$0x10, %rax
    00000428: 	psubd	%xmm6, %xmm4
    0000042c: 	movdqa	%xmm6, %xmm1
    00000430: 	pcmpgtd	%xmm4, %xmm0
    00000434: 	psubd	%xmm7, %xmm1
    00000438: 	pand	%xmm0, %xmm1
    0000043c: 	pandn	%xmm4, %xmm0
    00000440: 	movdqa	%xmm2, %xmm4
    00000444: 	por	%xmm1, %xmm0
    00000448: 	pcmpgtd	%xmm0, %xmm4
    0000044c: 	movdqa	%xmm0, %xmm1
    00000450: 	punpckldq	%xmm4, %xmm1
    00000454: 	punpckhdq	%xmm4, %xmm0
    00000458: 	paddq	%xmm1, %xmm3
    0000045c: 	paddq	%xmm0, %xmm3
    00000460: 	cmpq	%rdx, %rax
    00000463: 	jne	.Ltmp1044 # Offset: 1123
    00000465: 	movdqa	%xmm3, %xmm0
    00000469: 	movq	0x38(%rsp), %rax
    0000046e: 	psrldq	$0x8, %xmm0
    00000473: 	paddq	%xmm0, %xmm3
    00000477: 	movq	%rax, %rdx
    0000047a: 	movq	%xmm3, %rbp
    0000047f: 	cmpq	%rax, 0x30(%rsp)
    00000484: 	je	.Ltmp1045 # Offset: 1156
.Ltmp1055:
    00000486: 	movl	(%r15,%rdx,4), %esi
    0000048a: 	movl	(%rbx,%rdx,4), %eax
    0000048d: 	leaq	(,%rdx,4), %rcx
    00000495: 	movq	0x30(%rsp), %r11
    0000049a: 	movl	%esi, %edi
    0000049c: 	subl	%eax, %edi
    0000049e: 	subl	%esi, %eax
    000004a0: 	cmovsl	%edi, %eax
    000004a3: 	cltq
    000004a5: 	addq	%rax, %rbp
    000004a8: 	leaq	0x1(%rdx), %rax
    000004ac: 	cmpq	%rax, %r11
    000004af: 	jbe	.Ltmp1046 # Offset: 1199
    000004b1: 	movl	0x4(%r15,%rcx), %esi
    000004b6: 	movl	0x4(%rbx,%rcx), %eax
    000004ba: 	movl	%esi, %edi
    000004bc: 	subl	%eax, %edi
    000004be: 	subl	%esi, %eax
    000004c0: 	cmovsl	%edi, %eax
    000004c3: 	addq	$0x2, %rdx
    000004c7: 	cltq
    000004c9: 	addq	%rax, %rbp
    000004cc: 	cmpq	%rdx, %r11
    000004cf: 	jbe	.Ltmp1046 # Offset: 1231
    000004d1: 	movl	0x8(%r15,%rcx), %edx
    000004d6: 	movl	0x8(%rbx,%rcx), %eax
    000004da: 	movl	%edx, %ecx
    000004dc: 	subl	%eax, %ecx
    000004de: 	subl	%edx, %eax
    000004e0: 	cmovsl	%ecx, %eax
    000004e3: 	cltq
    000004e5: 	addq	%rax, %rbp
.Ltmp1046:
    000004e8: 	cmpq	$0x2, 0x48(%rsp)
    000004ee: 	jbe	.Ltmp1047 # Offset: 1262
.Ltmp1045:
    000004f4: 	movq	0x40(%rsp), %rdx
    000004f9: 	xorl	%eax, %eax
    000004fb: 	pxor	%xmm3, %xmm3
    000004ff: 	nop # Size: 1
.Ltmp1048:
    00000500: 	movdqu	(%r15,%rax), %xmm6
    00000506: 	movdqu	(%rbx,%rax), %xmm4
    0000050b: 	movdqa	%xmm2, %xmm0
    0000050f: 	movdqu	(%rbx,%rax), %xmm7
    00000514: 	addq	$0x10, %rax
    00000518: 	psubd	%xmm6, %xmm4
    0000051c: 	movdqa	%xmm6, %xmm1
    00000520: 	pcmpgtd	%xmm4, %xmm0
    00000524: 	psubd	%xmm7, %xmm1
    00000528: 	pand	%xmm0, %xmm1
    0000052c: 	pandn	%xmm4, %xmm0
    00000530: 	por	%xmm1, %xmm0
    00000534: 	movdqa	%xmm0, %xmm1
    00000538: 	pcmpgtd	%xmm3, %xmm1
    0000053c: 	pand	%xmm1, %xmm0
    00000540: 	pandn	%xmm3, %xmm1
    00000544: 	movdqa	%xmm1, %xmm3
    00000548: 	por	%xmm0, %xmm3
    0000054c: 	cmpq	%rdx, %rax
    0000054f: 	jne	.Ltmp1048 # Offset: 1359
    00000551: 	movdqa	%xmm3, %xmm1
    00000555: 	movq	0x38(%rsp), %rax
    0000055a: 	psrldq	$0x8, %xmm1
    0000055f: 	movdqa	%xmm1, %xmm0
    00000563: 	movq	%rax, %rdx
    00000566: 	pcmpgtd	%xmm3, %xmm0
    0000056a: 	pand	%xmm0, %xmm1
    0000056e: 	pandn	%xmm3, %xmm0
    00000572: 	por	%xmm1, %xmm0
    00000576: 	movdqa	%xmm0, %xmm3
    0000057a: 	psrldq	$0x4, %xmm3
    0000057f: 	movdqa	%xmm3, %xmm1
    00000583: 	pcmpgtd	%xmm0, %xmm1
    00000587: 	pand	%xmm1, %xmm3
    0000058b: 	pandn	%xmm0, %xmm1
    0000058f: 	por	%xmm3, %xmm1
    00000593: 	movd	%xmm1, %r12d
    00000598: 	cmpq	%rax, 0x30(%rsp)
    0000059d: 	je	.Ltmp1049 # Offset: 1437
.Ltmp1054:
    0000059f: 	movl	(%r15,%rdx,4), %esi
    000005a3: 	movl	(%rbx,%rdx,4), %eax
    000005a6: 	leaq	(,%rdx,4), %rcx
    000005ae: 	movq	0x30(%rsp), %r11
    000005b3: 	movl	%esi, %edi
    000005b5: 	subl	%eax, %edi
    000005b7: 	subl	%esi, %eax
    000005b9: 	cmovsl	%edi, %eax
    000005bc: 	cmpl	%eax, %r12d
    000005bf: 	cmovll	%eax, %r12d
    000005c3: 	leaq	0x1(%rdx), %rax
    000005c7: 	cmpq	%rax, %r11
    000005ca: 	jbe	.Ltmp1049 # Offset: 1482
    000005cc: 	movl	0x4(%r15,%rcx), %esi
    000005d1: 	movl	0x4(%rbx,%rcx), %eax
    000005d5: 	movl	%esi, %edi
    000005d7: 	subl	%eax, %edi
    000005d9: 	subl	%esi, %eax
    000005db: 	cmovsl	%edi, %eax
    000005de: 	cmpl	%eax, %r12d
    000005e1: 	cmovll	%eax, %r12d
    000005e5: 	addq	$0x2, %rdx
    000005e9: 	cmpq	%rdx, %r11
    000005ec: 	jbe	.Ltmp1049 # Offset: 1516
    000005ee: 	movl	0x8(%r15,%rcx), %edx
    000005f3: 	movl	0x8(%rbx,%rcx), %eax
    000005f7: 	movl	%edx, %ecx
    000005f9: 	subl	%eax, %ecx
    000005fb: 	subl	%edx, %eax
    000005fd: 	cmovsl	%ecx, %eax
    00000600: 	cmpl	%eax, %r12d
    00000603: 	cmovll	%eax, %r12d
.Ltmp1049:
    00000607: 	movl	0x50(%rsp), %eax
    0000060b: 	cmpl	%eax, 0xd0(%rsp)
    00000612: 	jge	.Ltmp1050 # Offset: 1554
    00000614: 	testl	%r12d, %r12d
    00000617: 	jle	.Ltmp1051 # Offset: 1559
    00000619: 	cmpq	$0x9, %rbp
    0000061d: 	jle	.Ltmp1051 # Offset: 1565
.Ltmp1050:
    0000061f: 	addl	$0x1, 0x50(%rsp)
    00000624: 	movl	0x50(%rsp), %edi
    00000628: 	movq	%r15, %rax
    0000062b: 	movq	%rbx, %r15
    0000062e: 	cmpl	%edi, iterations(%rip)
    00000634: 	jle	.Ltmp1051 # Offset: 1588
    00000636: 	movq	%rax, %rbx
    00000639: 	jmp	.Ltmp1052 # Offset: 1593
.Ltmp1042:
    0000063e: 	movl	0x50(%rsp), %eax
    00000642: 	cmpl	%eax, 0xd0(%rsp)
    00000649: 	jl	.Ltmp1053 # Offset: 1609
    0000064b: 	xorl	%ebp, %ebp
    0000064d: 	xorl	%r12d, %r12d
    00000650: 	jmp	.Ltmp1050 # Offset: 1616
.Ltmp1047:
    00000652: 	xorl	%r12d, %r12d
    00000655: 	xorl	%edx, %edx
    00000657: 	jmp	.Ltmp1054 # Offset: 1623
.Ltmp1043:
    0000065c: 	xorl	%ebp, %ebp
    0000065e: 	xorl	%edx, %edx
    00000660: 	jmp	.Ltmp1055 # Offset: 1632
.Ltmp1053:
    00000665: 	xorl	%r12d, %r12d
    00000668: 	xorl	%ebp, %ebp
.Ltmp1051:
    0000066a: 	callq	clock@PLT # Offset: 1642
    0000066f: 	movl	0x58(%rsp), %edi
    00000673: 	pxor	%xmm0, %xmm0
    00000677: 	movl	0x6c(%rsp), %r13d
    0000067c: 	movq	%rax, end_time(%rip)
    00000683: 	subq	start_time(%rip), %rax
    0000068a: 	cvtsi2sd	%rax, %xmm0
    0000068f: 	movl	%edi, %eax
    00000691: 	divsd	DATAat0x49520(%rip), %xmm0
    00000699: 	movq	%xmm0, %rbx
    0000069e: 	shrl	$0x1f, %eax
    000006a1: 	addl	%edi, %eax
    000006a3: 	movl	0x5c(%rsp), %edi
    000006a7: 	sarl	%eax
    000006a9: 	movl	%edi, %edx
    000006ab: 	imull	%edi, %eax
    000006ae: 	shrl	$0x1f, %edx
    000006b1: 	addl	%edi, %edx
    000006b3: 	sarl	%edx
    000006b5: 	addl	%edx, %eax
    000006b7: 	cltq
    000006b9: 	subl	(%r15,%rax,4), %r13d
    000006bd: 	movl	0x50(%rsp), %eax
    000006c1: 	cmpl	%eax, iterations(%rip)
    000006c7: 	jg	.Ltmp1056 # Offset: 1735
    000006c9: 	cmpq	$0xa, %rbp
    000006cd: 	jle	.Ltmp1056 # Offset: 1741
    000006cf: 	cmpl	$0x1, %r12d
    000006d3: 	jle	.Ltmp1056 # Offset: 1747
    000006d5: 	movq	0x60(%rsp), %rax
    000006da: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000006e1: 	movq	%r14, %rdi
    000006e4: 	movq	0x8(%rax), %rdx
    000006e8: 	movq	(%rax), %rsi
    000006eb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1771
    000006f0: 	movl	$0x11, %edx
    000006f5: 	leaq	DATAat0x49199(%rip), %rsi
    000006fc: 	movq	%rax, %rdi
    000006ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1791
    00000704: 	jmp	.Ltmp1057 # Offset: 1796
.Ltmp1056:
    00000706: 	movq	0x60(%rsp), %rax
    0000070b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000712: 	movq	%r14, %rdi
    00000715: 	movq	0x8(%rax), %rdx
    00000719: 	movq	(%rax), %rsi
    0000071c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1820
    00000721: 	movl	$0xa, %edx
    00000726: 	leaq	DATAat0x491ab(%rip), %rsi
    0000072d: 	movq	%rax, %rdi
    00000730: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1840
.Ltmp1057:
    00000735: 	movl	$0x4, %edx
    0000073a: 	leaq	DATAat0x491b6(%rip), %rsi
    00000741: 	movq	%r14, %rdi
    00000744: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1860
    00000749: 	movl	0x50(%rsp), %esi
    0000074d: 	movq	%r14, %rdi
    00000750: 	callq	_ZNSolsEi@PLT # Offset: 1872
    00000755: 	movl	$0xb, %edx
    0000075a: 	leaq	DATAat0x491bb(%rip), %rsi
    00000761: 	movq	%rax, %rdi
    00000764: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1892
    00000769: 	movl	$0xa, %edx
    0000076e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000775: 	movq	%r14, %rdi
    00000778: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1912
    0000077d: 	movq	%rbp, %rsi
    00000780: 	movq	%r14, %rdi
    00000783: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1923
    00000788: 	movl	$0x7, %edx
    0000078d: 	leaq	DATAat0x491d2(%rip), %rsi
    00000794: 	movq	%rax, %rbp
    00000797: 	movq	%rax, %rdi
    0000079a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1946
    0000079f: 	movq	%rbp, %rdi
    000007a2: 	movl	%r12d, %esi
    000007a5: 	callq	_ZNSolsEi@PLT # Offset: 1957
    000007aa: 	movl	$0x10, %edx
    000007af: 	leaq	DATAat0x491da(%rip), %rsi
    000007b6: 	movq	%rax, %rbp
    000007b9: 	movq	%rax, %rdi
    000007bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1980
    000007c1: 	movq	%rbp, %rdi
    000007c4: 	movl	%r13d, %esi
    000007c7: 	callq	_ZNSolsEi@PLT # Offset: 1991
    000007cc: 	movl	$0x8, %edx
    000007d1: 	leaq	DATAat0x491eb(%rip), %rsi
    000007d8: 	movq	%rax, %rbp
    000007db: 	movq	%rax, %rdi
    000007de: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2014
    000007e3: 	movq	%rbx, %xmm0
    000007e8: 	movq	%rbp, %rdi
    000007eb: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2027
    000007f0: 	movl	$0x2, %edx
    000007f5: 	leaq	DATAat0x491f4(%rip), %rsi
    000007fc: 	movq	%rax, %rdi
    000007ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2047
    00000804: 	movl	0x68(%rsp), %eax
    00000808: 	movl	%eax, iterations(%rip)
    0000080e: 	movq	0x88(%rsp), %rax
    00000816: 	subq	%fs:0x28, %rax
    0000081f: 	jne	.Ltmp1058 # Offset: 2079
    00000821: 	addq	$0x98, %rsp
    00000828: 	popq	%rbx
    00000829: 	popq	%rbp
    0000082a: 	popq	%r12
    0000082c: 	popq	%r13
    0000082e: 	popq	%r14
    00000830: 	popq	%r15
    00000832: 	retq # Offset: 2098
.Ltmp1036:
    00000833: 	movl	$0x0, 0x50(%rsp)
    0000083b: 	xorl	%r12d, %r12d
    0000083e: 	xorl	%ebp, %ebp
    00000840: 	jmp	.Ltmp1051 # Offset: 2112
.Ltmp1058:
    00000845: 	callq	__stack_chk_fail@PLT # Offset: 2117
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil18jacobi2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil18jacobi2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x22840
  Size        : 0x56e
  MaxSize     : 0x570
  Offset      : 0x22840
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil18jacobi2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r14d, %esi
    0000001d: 	imull	%r15d, %r14d
    00000021: 	subq	$0x58, %rsp
    00000025: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002d: 	movl	%edx, 0x14(%rsp)
    00000031: 	leaq	0x30(%rsp), %rcx
    00000036: 	movl	%r15d, %edx
    00000039: 	movl	%r14d, %ebp
    0000003c: 	movl	%r8d, 0x1c(%rsp)
    00000041: 	movq	%r9, 0x28(%rsp)
    00000046: 	movq	%fs:0x28, %rax
    0000004f: 	movq	%rax, 0x48(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	movaps	%xmm0, 0x30(%rsp)
    0000005b: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 91
    00000060: 	movl	%eax, 0x24(%rsp)
    00000064: 	testl	%r14d, %r14d
    00000067: 	jle	.Ltmp1059 # Offset: 103
    00000069: 	movslq	%r14d, %rdx
    0000006c: 	movq	%r12, %rsi
    0000006f: 	movq	%rbx, %rdi
    00000072: 	shlq	$0x2, %rdx
    00000076: 	callq	memmove@PLT # Offset: 118
.Ltmp1059:
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	movl	$0x2710, iterations(%rip)
    0000008b: 	movl	%eax, 0x20(%rsp)
    0000008f: 	callq	clock@PLT # Offset: 143
    00000094: 	movq	%rax, start_time(%rip)
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	testl	%eax, %eax
    000000a3: 	jle	.Ltmp1060 # Offset: 163
    000000a9: 	movslq	%ebp, %r10
    000000ac: 	movl	%r15d, 0x18(%rsp)
    000000b1: 	xorl	%r14d, %r14d
    000000b4: 	pxor	%xmm5, %xmm5
    000000b8: 	leaq	-0x1(%r10), %rax
    000000bc: 	movq	%r10, %r11
    000000bf: 	movq	%r10, %r15
    000000c2: 	movq	%rax, 0x8(%rsp)
    000000c7: 	movq	%r10, %rax
    000000ca: 	andq	$-0x4, %r11
    000000ce: 	shrq	$0x2, %rax
    000000d2: 	shlq	$0x4, %rax
    000000d6: 	movq	%rax, %rbp
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1071:
    000000e0: 	movl	0x1c(%rsp), %r8d
    000000e5: 	movl	0x18(%rsp), %ecx
    000000e9: 	movq	%rbx, %rsi
    000000ec: 	movq	%r12, %rdi
    000000ef: 	movl	0x14(%rsp), %edx
    000000f3: 	movq	%r11, (%rsp)
    000000f7: 	callq	"_ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/1" # Offset: 247
    000000fc: 	testq	%r15, %r15
    000000ff: 	movq	(%rsp), %r11
    00000103: 	je	.Ltmp1061 # Offset: 259
    00000109: 	xorl	%eax, %eax
    0000010b: 	cmpq	$0x2, 0x8(%rsp)
    00000111: 	jbe	.Ltmp1062 # Offset: 273
    00000117: 	pxor	%xmm2, %xmm2
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1063:
    00000120: 	movdqu	(%rbx,%rax), %xmm4
    00000125: 	movdqu	(%r12,%rax), %xmm3
    0000012b: 	movdqa	%xmm5, %xmm0
    0000012f: 	movdqu	(%r12,%rax), %xmm6
    00000135: 	addq	$0x10, %rax
    00000139: 	psubd	%xmm4, %xmm3
    0000013d: 	movdqa	%xmm4, %xmm1
    00000141: 	pcmpgtd	%xmm3, %xmm0
    00000145: 	psubd	%xmm6, %xmm1
    00000149: 	pand	%xmm0, %xmm1
    0000014d: 	pandn	%xmm3, %xmm0
    00000151: 	movdqa	%xmm5, %xmm3
    00000155: 	por	%xmm1, %xmm0
    00000159: 	pcmpgtd	%xmm0, %xmm3
    0000015d: 	movdqa	%xmm0, %xmm1
    00000161: 	punpckldq	%xmm3, %xmm1
    00000165: 	punpckhdq	%xmm3, %xmm0
    00000169: 	paddq	%xmm1, %xmm2
    0000016d: 	paddq	%xmm0, %xmm2
    00000171: 	cmpq	%rax, %rbp
    00000174: 	jne	.Ltmp1063 # Offset: 372
    00000176: 	movdqa	%xmm2, %xmm0
    0000017a: 	movq	%r11, %rcx
    0000017d: 	psrldq	$0x8, %xmm0
    00000182: 	paddq	%xmm0, %xmm2
    00000186: 	movq	%xmm2, %rax
    0000018b: 	cmpq	%r11, %r15
    0000018e: 	je	.Ltmp1064 # Offset: 398
.Ltmp1074:
    00000190: 	movl	(%rbx,%rcx,4), %edi
    00000193: 	movl	(%r12,%rcx,4), %edx
    00000197: 	leaq	(,%rcx,4), %rsi
    0000019f: 	movl	%edi, %r8d
    000001a2: 	subl	%edx, %r8d
    000001a5: 	subl	%edi, %edx
    000001a7: 	cmovsl	%r8d, %edx
    000001ab: 	movslq	%edx, %rdx
    000001ae: 	addq	%rdx, %rax
    000001b1: 	leaq	0x1(%rcx), %rdx
    000001b5: 	cmpq	%rdx, %r15
    000001b8: 	jbe	.Ltmp1065 # Offset: 440
    000001ba: 	movl	0x4(%rbx,%rsi), %edi
    000001be: 	movl	0x4(%r12,%rsi), %edx
    000001c3: 	movl	%edi, %r8d
    000001c6: 	subl	%edx, %r8d
    000001c9: 	subl	%edi, %edx
    000001cb: 	cmovsl	%r8d, %edx
    000001cf: 	addq	$0x2, %rcx
    000001d3: 	movslq	%edx, %rdx
    000001d6: 	addq	%rdx, %rax
    000001d9: 	cmpq	%rcx, %r15
    000001dc: 	jbe	.Ltmp1065 # Offset: 476
    000001de: 	movl	0x8(%rbx,%rsi), %ecx
    000001e2: 	movl	0x8(%r12,%rsi), %edx
    000001e7: 	movl	%ecx, %esi
    000001e9: 	subl	%edx, %esi
    000001eb: 	subl	%ecx, %edx
    000001ed: 	cmovsl	%esi, %edx
    000001f0: 	movslq	%edx, %rdx
    000001f3: 	addq	%rdx, %rax
.Ltmp1065:
    000001f6: 	cmpq	$0x2, 0x8(%rsp)
    000001fc: 	jbe	.Ltmp1066 # Offset: 508
.Ltmp1064:
    00000202: 	xorl	%edx, %edx
    00000204: 	pxor	%xmm2, %xmm2
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1067:
    00000210: 	movdqu	(%rbx,%rdx), %xmm7
    00000215: 	movdqu	(%r12,%rdx), %xmm3
    0000021b: 	movdqa	%xmm5, %xmm0
    0000021f: 	movdqu	(%r12,%rdx), %xmm4
    00000225: 	addq	$0x10, %rdx
    00000229: 	psubd	%xmm7, %xmm3
    0000022d: 	movdqa	%xmm7, %xmm1
    00000231: 	pcmpgtd	%xmm3, %xmm0
    00000235: 	psubd	%xmm4, %xmm1
    00000239: 	pand	%xmm0, %xmm1
    0000023d: 	pandn	%xmm3, %xmm0
    00000241: 	por	%xmm1, %xmm0
    00000245: 	movdqa	%xmm2, %xmm1
    00000249: 	pcmpgtd	%xmm0, %xmm1
    0000024d: 	pand	%xmm1, %xmm2
    00000251: 	pandn	%xmm0, %xmm1
    00000255: 	por	%xmm1, %xmm2
    00000259: 	cmpq	%rdx, %rbp
    0000025c: 	jne	.Ltmp1067 # Offset: 604
    0000025e: 	movdqa	%xmm2, %xmm1
    00000262: 	movq	%r11, %rcx
    00000265: 	psrldq	$0x8, %xmm1
    0000026a: 	movdqa	%xmm1, %xmm0
    0000026e: 	pcmpgtd	%xmm2, %xmm0
    00000272: 	pand	%xmm0, %xmm1
    00000276: 	pandn	%xmm2, %xmm0
    0000027a: 	por	%xmm1, %xmm0
    0000027e: 	movdqa	%xmm0, %xmm2
    00000282: 	psrldq	$0x4, %xmm2
    00000287: 	movdqa	%xmm2, %xmm1
    0000028b: 	pcmpgtd	%xmm0, %xmm1
    0000028f: 	pand	%xmm1, %xmm2
    00000293: 	pandn	%xmm0, %xmm1
    00000297: 	por	%xmm2, %xmm1
    0000029b: 	movd	%xmm1, %r13d
    000002a0: 	cmpq	%r11, %r15
    000002a3: 	je	.Ltmp1068 # Offset: 675
.Ltmp1073:
    000002a5: 	movl	(%rbx,%rcx,4), %edi
    000002a8: 	movl	(%r12,%rcx,4), %edx
    000002ac: 	leaq	(,%rcx,4), %rsi
    000002b4: 	movl	%edi, %r8d
    000002b7: 	subl	%edx, %r8d
    000002ba: 	subl	%edi, %edx
    000002bc: 	cmovsl	%r8d, %edx
    000002c0: 	cmpl	%edx, %r13d
    000002c3: 	cmovll	%edx, %r13d
    000002c7: 	leaq	0x1(%rcx), %rdx
    000002cb: 	cmpq	%rdx, %r15
    000002ce: 	jbe	.Ltmp1068 # Offset: 718
    000002d0: 	movl	0x4(%rbx,%rsi), %edi
    000002d4: 	movl	0x4(%r12,%rsi), %edx
    000002d9: 	movl	%edi, %r8d
    000002dc: 	subl	%edx, %r8d
    000002df: 	subl	%edi, %edx
    000002e1: 	cmovsl	%r8d, %edx
    000002e5: 	cmpl	%edx, %r13d
    000002e8: 	cmovll	%edx, %r13d
    000002ec: 	addq	$0x2, %rcx
    000002f0: 	cmpq	%r15, %rcx
    000002f3: 	jae	.Ltmp1068 # Offset: 755
    000002f5: 	movl	0x8(%rbx,%rsi), %ecx
    000002f9: 	movl	0x8(%r12,%rsi), %edx
    000002fe: 	movl	%ecx, %esi
    00000300: 	subl	%edx, %esi
    00000302: 	subl	%ecx, %edx
    00000304: 	cmovsl	%esi, %edx
    00000307: 	cmpl	%edx, %r13d
    0000030a: 	cmovll	%edx, %r13d
.Ltmp1068:
    0000030e: 	cmpl	%r14d, 0x90(%rsp)
    00000316: 	jge	.Ltmp1069 # Offset: 790
    00000318: 	testl	%r13d, %r13d
    0000031b: 	jle	.Ltmp1070 # Offset: 795
    00000321: 	cmpq	$0x9, %rax
    00000325: 	jle	.Ltmp1070 # Offset: 805
.Ltmp1069:
    0000032b: 	addl	$0x1, %r14d
    0000032f: 	cmpl	%r14d, iterations(%rip)
    00000336: 	movq	%rbx, %rdx
    00000339: 	movq	%r12, %rbx
    0000033c: 	jle	.Ltmp1070 # Offset: 828
    00000342: 	movq	%rdx, %r12
    00000345: 	jmp	.Ltmp1071 # Offset: 837
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1061:
    00000350: 	cmpl	%r14d, 0x90(%rsp)
    00000358: 	jl	.Ltmp1072 # Offset: 856
    0000035a: 	xorl	%eax, %eax
    0000035c: 	xorl	%r13d, %r13d
    0000035f: 	jmp	.Ltmp1069 # Offset: 863
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp1066:
    00000368: 	xorl	%r13d, %r13d
    0000036b: 	xorl	%ecx, %ecx
    0000036d: 	jmp	.Ltmp1073 # Offset: 877
.Ltmp1062:
    00000372: 	xorl	%ecx, %ecx
    00000374: 	jmp	.Ltmp1074 # Offset: 884
.Ltmp1072:
    00000379: 	movl	0x18(%rsp), %r15d
    0000037e: 	xorl	%r13d, %r13d
    00000381: 	xorl	%ebp, %ebp
.Ltmp1078:
    00000383: 	callq	clock@PLT # Offset: 899
    00000388: 	movl	0x14(%rsp), %edi
    0000038c: 	pxor	%xmm0, %xmm0
    00000390: 	movl	%r15d, %edx
    00000393: 	movq	%rax, end_time(%rip)
    0000039a: 	subq	start_time(%rip), %rax
    000003a1: 	shrl	$0x1f, %edx
    000003a4: 	cvtsi2sd	%rax, %xmm0
    000003a9: 	movl	%edi, %eax
    000003ab: 	addl	%r15d, %edx
    000003ae: 	divsd	DATAat0x49520(%rip), %xmm0
    000003b6: 	shrl	$0x1f, %eax
    000003b9: 	sarl	%edx
    000003bb: 	movq	%xmm0, %r12
    000003c0: 	addl	%edi, %eax
    000003c2: 	movl	0x24(%rsp), %edi
    000003c6: 	sarl	%eax
    000003c8: 	imull	%r15d, %eax
    000003cc: 	addl	%edx, %eax
    000003ce: 	cltq
    000003d0: 	subl	(%rbx,%rax,4), %edi
    000003d3: 	cmpl	%r14d, iterations(%rip)
    000003da: 	movl	%edi, %ebx
    000003dc: 	jg	.Ltmp1075 # Offset: 988
    000003e2: 	cmpq	$0xa, %rbp
    000003e6: 	jle	.Ltmp1075 # Offset: 998
    000003ec: 	cmpl	$0x1, %r13d
    000003f0: 	jle	.Ltmp1075 # Offset: 1008
    000003f6: 	movq	0x28(%rsp), %rax
    000003fb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000402: 	movq	%r15, %rdi
    00000405: 	movq	0x8(%rax), %rdx
    00000409: 	movq	(%rax), %rsi
    0000040c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1036
    00000411: 	movl	$0x11, %edx
    00000416: 	leaq	DATAat0x49199(%rip), %rsi
    0000041d: 	movq	%rax, %rdi
    00000420: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1056
.Ltmp1077:
    00000425: 	movl	$0x4, %edx
    0000042a: 	leaq	DATAat0x491b6(%rip), %rsi
    00000431: 	movq	%r15, %rdi
    00000434: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1076
    00000439: 	movl	%r14d, %esi
    0000043c: 	movq	%r15, %rdi
    0000043f: 	callq	_ZNSolsEi@PLT # Offset: 1087
    00000444: 	movl	$0xb, %edx
    00000449: 	leaq	DATAat0x491bb(%rip), %rsi
    00000450: 	movq	%rax, %rdi
    00000453: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1107
    00000458: 	movl	$0xa, %edx
    0000045d: 	leaq	DATAat0x491c7(%rip), %rsi
    00000464: 	movq	%r15, %rdi
    00000467: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1127
    0000046c: 	movq	%rbp, %rsi
    0000046f: 	movq	%r15, %rdi
    00000472: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1138
    00000477: 	movl	$0x7, %edx
    0000047c: 	leaq	DATAat0x491d2(%rip), %rsi
    00000483: 	movq	%rax, %rbp
    00000486: 	movq	%rax, %rdi
    00000489: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1161
    0000048e: 	movq	%rbp, %rdi
    00000491: 	movl	%r13d, %esi
    00000494: 	callq	_ZNSolsEi@PLT # Offset: 1172
    00000499: 	movl	$0x10, %edx
    0000049e: 	leaq	DATAat0x491da(%rip), %rsi
    000004a5: 	movq	%rax, %rbp
    000004a8: 	movq	%rax, %rdi
    000004ab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1195
    000004b0: 	movq	%rbp, %rdi
    000004b3: 	movl	%ebx, %esi
    000004b5: 	callq	_ZNSolsEi@PLT # Offset: 1205
    000004ba: 	movl	$0x8, %edx
    000004bf: 	leaq	DATAat0x491eb(%rip), %rsi
    000004c6: 	movq	%rax, %rbp
    000004c9: 	movq	%rax, %rdi
    000004cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1228
    000004d1: 	movq	%r12, %xmm0
    000004d6: 	movq	%rbp, %rdi
    000004d9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1241
    000004de: 	movl	$0x2, %edx
    000004e3: 	leaq	DATAat0x491f4(%rip), %rsi
    000004ea: 	movq	%rax, %rdi
    000004ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1261
    000004f2: 	movl	0x20(%rsp), %eax
    000004f6: 	movl	%eax, iterations(%rip)
    000004fc: 	movq	0x48(%rsp), %rax
    00000501: 	subq	%fs:0x28, %rax
    0000050a: 	jne	.Ltmp1076 # Offset: 1290
    0000050c: 	addq	$0x58, %rsp
    00000510: 	popq	%rbx
    00000511: 	popq	%rbp
    00000512: 	popq	%r12
    00000514: 	popq	%r13
    00000516: 	popq	%r14
    00000518: 	popq	%r15
    0000051a: 	retq # Offset: 1306
.Ltmp1075:
    0000051b: 	movq	0x28(%rsp), %rax
    00000520: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000527: 	movq	%r15, %rdi
    0000052a: 	movq	0x8(%rax), %rdx
    0000052e: 	movq	(%rax), %rsi
    00000531: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1329
    00000536: 	movl	$0xa, %edx
    0000053b: 	leaq	DATAat0x491ab(%rip), %rsi
    00000542: 	movq	%rax, %rdi
    00000545: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1349
    0000054a: 	jmp	.Ltmp1077 # Offset: 1354
.Ltmp1070:
    0000054f: 	movl	0x18(%rsp), %r15d
    00000554: 	movq	%rax, %rbp
    00000557: 	jmp	.Ltmp1078 # Offset: 1367
.Ltmp1060:
    0000055c: 	xorl	%r14d, %r14d
    0000055f: 	xorl	%r13d, %r13d
    00000562: 	xorl	%ebp, %ebp
    00000564: 	jmp	.Ltmp1078 # Offset: 1380
.Ltmp1076:
    00000569: 	callq	__stack_chk_fail@PLT # Offset: 1385
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil18jacobi2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil21jacobi_sor2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x22db0
  Size        : 0x633
  MaxSize     : 0x640
  Offset      : 0x22db0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil21jacobi_sor2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x78, %rsp
    00000024: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002c: 	movl	%edx, 0x38(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x3c(%rsp)
    00000037: 	leaq	0x50(%rsp), %rcx
    0000003c: 	movq	%r9, 0x40(%rsp)
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x68(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movaps	%xmm0, 0x50(%rsp)
    00000056: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 86
    0000005b: 	movl	%r15d, %esi
    0000005e: 	imull	%r14d, %esi
    00000062: 	movl	%eax, 0x4c(%rsp)
    00000066: 	movslq	%esi, %r15
    00000069: 	testl	%r15d, %r15d
    0000006c: 	jle	.Ltmp1079 # Offset: 108
    0000006e: 	movslq	%r15d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	shlq	$0x2, %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp1079:
    00000080: 	movl	iterations(%rip), %eax
    00000086: 	movl	$0x2710, iterations(%rip)
    00000090: 	movl	%eax, 0x48(%rsp)
    00000094: 	callq	clock@PLT # Offset: 148
    00000099: 	movl	iterations(%rip), %ecx
    0000009f: 	movq	%rax, start_time(%rip)
    000000a6: 	testl	%ecx, %ecx
    000000a8: 	jle	.Ltmp1080 # Offset: 168
    000000ae: 	movl	0x38(%rsp), %esi
    000000b2: 	movl	0x3c(%rsp), %edi
    000000b6: 	movl	%r12d, %r10d
    000000b9: 	movq	%r15, %r13
    000000bc: 	negl	%r10d
    000000bf: 	shrq	$0x2, %r13
    000000c3: 	pxor	%xmm3, %xmm3
    000000c7: 	leal	-0x2(%rsi), %eax
    000000ca: 	subl	$0x2, %edi
    000000cd: 	movslq	%r10d, %r10
    000000d0: 	shlq	$0x4, %r13
    000000d4: 	movl	%eax, 0x8(%rsp)
    000000d8: 	imull	%r12d, %eax
    000000dc: 	shlq	$0x2, %r10
    000000e0: 	movslq	%edi, %r14
    000000e3: 	movl	%edi, 0x1c(%rsp)
    000000e7: 	cltq
    000000e9: 	shlq	$0x2, %rax
    000000ed: 	movq	%rax, 0x20(%rsp)
    000000f2: 	leal	-0x3(%rsi), %eax
    000000f5: 	imull	%r12d, %eax
    000000f9: 	cltq
    000000fb: 	shlq	$0x2, %rax
    000000ff: 	movq	%rax, 0x30(%rsp)
    00000104: 	leal	-0x1(%rsi), %eax
    00000107: 	imull	%r12d, %eax
    0000010b: 	xorl	%r12d, %r12d
    0000010e: 	cltq
    00000110: 	shlq	$0x2, %rax
    00000114: 	movq	%rax, 0x28(%rsp)
    00000119: 	leaq	-0x1(%r15), %rax
    0000011d: 	movq	%rax, 0x10(%rsp)
    00000122: 	movq	%r15, %rax
    00000125: 	andq	$-0x4, %rax
    00000129: 	movq	%rax, (%rsp)
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp1094:
    00000130: 	movl	0x8(%rsp), %edx
    00000134: 	testl	%edx, %edx
    00000136: 	jle	.Ltmp1081 # Offset: 310
    0000013c: 	movl	0x1c(%rsp), %eax
    00000140: 	testl	%eax, %eax
    00000142: 	jle	.Ltmp1081 # Offset: 322
    00000148: 	movq	0x20(%rsp), %rax
    0000014d: 	movq	0x30(%rsp), %rsi
    00000152: 	movl	0x8(%rsp), %r11d
    00000157: 	leaq	(%rbp,%rax), %rdi
    0000015c: 	leaq	(%rbx,%rsi), %r9
    00000160: 	leaq	(%rbx,%rax), %rsi
    00000164: 	movq	0x28(%rsp), %rax
    00000169: 	leaq	(%rbx,%rax), %r8
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp1083:
    00000170: 	subl	$0x1, %r11d
    00000174: 	movq	%r14, %rdx
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1082:
    00000180: 	movslq	(%r9,%rdx,4), %rax
    00000184: 	movslq	-0x4(%rsi,%rdx,4), %rcx
    00000189: 	addq	%rax, %rcx
    0000018c: 	movslq	0x4(%rsi,%rdx,4), %rax
    00000191: 	addq	%rcx, %rax
    00000194: 	movslq	(%r8,%rdx,4), %rcx
    00000198: 	addq	%rax, %rcx
    0000019b: 	leaq	0x5(%rcx), %rax
    0000019f: 	addq	$0x2, %rcx
    000001a3: 	cmovnsq	%rcx, %rax
    000001a7: 	sarq	$0x2, %rax
    000001ab: 	subl	(%rdi,%rdx,4), %eax
    000001ae: 	imull	$0x71, %eax, %eax
    000001b1: 	sarl	$0x6, %eax
    000001b4: 	addl	(%rdi,%rdx,4), %eax
    000001b7: 	movl	%eax, (%rdi,%rdx,4)
    000001ba: 	subq	$0x1, %rdx
    000001be: 	testl	%edx, %edx
    000001c0: 	jg	.Ltmp1082 # Offset: 448
    000001c2: 	addq	%r10, %rdi
    000001c5: 	addq	%r10, %r9
    000001c8: 	addq	%r10, %rsi
    000001cb: 	addq	%r10, %r8
    000001ce: 	testl	%r11d, %r11d
    000001d1: 	jne	.Ltmp1083 # Offset: 465
.Ltmp1081:
    000001d3: 	testq	%r15, %r15
    000001d6: 	je	.Ltmp1084 # Offset: 470
    000001dc: 	cmpq	$0x2, 0x10(%rsp)
    000001e2: 	jbe	.Ltmp1085 # Offset: 482
    000001e8: 	xorl	%eax, %eax
    000001ea: 	pxor	%xmm2, %xmm2
    000001ee: 	nop # Size: 2
.Ltmp1086:
    000001f0: 	movdqu	(%rbp,%rax), %xmm5
    000001f6: 	movdqu	(%rbx,%rax), %xmm4
    000001fb: 	movdqa	%xmm3, %xmm0
    000001ff: 	movdqu	(%rbx,%rax), %xmm6
    00000204: 	addq	$0x10, %rax
    00000208: 	psubd	%xmm5, %xmm4
    0000020c: 	movdqa	%xmm5, %xmm1
    00000210: 	pcmpgtd	%xmm4, %xmm0
    00000214: 	psubd	%xmm6, %xmm1
    00000218: 	pand	%xmm0, %xmm1
    0000021c: 	pandn	%xmm4, %xmm0
    00000220: 	movdqa	%xmm3, %xmm4
    00000224: 	por	%xmm1, %xmm0
    00000228: 	pcmpgtd	%xmm0, %xmm4
    0000022c: 	movdqa	%xmm0, %xmm1
    00000230: 	punpckldq	%xmm4, %xmm1
    00000234: 	punpckhdq	%xmm4, %xmm0
    00000238: 	paddq	%xmm1, %xmm2
    0000023c: 	paddq	%xmm0, %xmm2
    00000240: 	cmpq	%rax, %r13
    00000243: 	jne	.Ltmp1086 # Offset: 579
    00000245: 	movdqa	%xmm2, %xmm0
    00000249: 	movq	(%rsp), %rax
    0000024d: 	psrldq	$0x8, %xmm0
    00000252: 	paddq	%xmm0, %xmm2
    00000256: 	movq	%rax, %rdx
    00000259: 	movq	%xmm2, %r8
    0000025e: 	cmpq	%rax, %r15
    00000261: 	je	.Ltmp1087 # Offset: 609
.Ltmp1097:
    00000263: 	movl	(%rbp,%rdx,4), %esi
    00000267: 	movl	(%rbx,%rdx,4), %eax
    0000026a: 	leaq	(,%rdx,4), %rcx
    00000272: 	movl	%esi, %edi
    00000274: 	subl	%eax, %edi
    00000276: 	subl	%esi, %eax
    00000278: 	cmovsl	%edi, %eax
    0000027b: 	cltq
    0000027d: 	addq	%rax, %r8
    00000280: 	leaq	0x1(%rdx), %rax
    00000284: 	cmpq	%rax, %r15
    00000287: 	jbe	.Ltmp1088 # Offset: 647
    00000289: 	movl	0x4(%rbp,%rcx), %esi
    0000028d: 	movl	0x4(%rbx,%rcx), %eax
    00000291: 	movl	%esi, %edi
    00000293: 	subl	%eax, %edi
    00000295: 	subl	%esi, %eax
    00000297: 	cmovsl	%edi, %eax
    0000029a: 	addq	$0x2, %rdx
    0000029e: 	cltq
    000002a0: 	addq	%rax, %r8
    000002a3: 	cmpq	%rdx, %r15
    000002a6: 	jbe	.Ltmp1088 # Offset: 678
    000002a8: 	movl	0x8(%rbp,%rcx), %edx
    000002ac: 	movl	0x8(%rbx,%rcx), %eax
    000002b0: 	movl	%edx, %ecx
    000002b2: 	subl	%eax, %ecx
    000002b4: 	subl	%edx, %eax
    000002b6: 	cmovsl	%ecx, %eax
    000002b9: 	cltq
    000002bb: 	addq	%rax, %r8
.Ltmp1088:
    000002be: 	cmpq	$0x2, 0x10(%rsp)
    000002c4: 	jbe	.Ltmp1089 # Offset: 708
.Ltmp1087:
    000002ca: 	xorl	%eax, %eax
    000002cc: 	pxor	%xmm2, %xmm2
.Ltmp1090:
    000002d0: 	movdqu	(%rbp,%rax), %xmm7
    000002d6: 	movdqu	(%rbx,%rax), %xmm4
    000002db: 	movdqa	%xmm3, %xmm0
    000002df: 	movdqu	(%rbx,%rax), %xmm5
    000002e4: 	addq	$0x10, %rax
    000002e8: 	psubd	%xmm7, %xmm4
    000002ec: 	movdqa	%xmm7, %xmm1
    000002f0: 	pcmpgtd	%xmm4, %xmm0
    000002f4: 	psubd	%xmm5, %xmm1
    000002f8: 	pand	%xmm0, %xmm1
    000002fc: 	pandn	%xmm4, %xmm0
    00000300: 	por	%xmm1, %xmm0
    00000304: 	movdqa	%xmm0, %xmm1
    00000308: 	pcmpgtd	%xmm2, %xmm1
    0000030c: 	pand	%xmm1, %xmm0
    00000310: 	pandn	%xmm2, %xmm1
    00000314: 	movdqa	%xmm1, %xmm2
    00000318: 	por	%xmm0, %xmm2
    0000031c: 	cmpq	%rax, %r13
    0000031f: 	jne	.Ltmp1090 # Offset: 799
    00000321: 	movdqa	%xmm2, %xmm1
    00000325: 	movq	(%rsp), %rax
    00000329: 	psrldq	$0x8, %xmm1
    0000032e: 	movdqa	%xmm1, %xmm0
    00000332: 	movq	%rax, %rdx
    00000335: 	pcmpgtd	%xmm2, %xmm0
    00000339: 	pand	%xmm0, %xmm1
    0000033d: 	pandn	%xmm2, %xmm0
    00000341: 	por	%xmm1, %xmm0
    00000345: 	movdqa	%xmm0, %xmm2
    00000349: 	psrldq	$0x4, %xmm2
    0000034e: 	movdqa	%xmm2, %xmm1
    00000352: 	pcmpgtd	%xmm0, %xmm1
    00000356: 	pand	%xmm1, %xmm2
    0000035a: 	pandn	%xmm0, %xmm1
    0000035e: 	por	%xmm2, %xmm1
    00000362: 	movd	%xmm1, %r9d
    00000367: 	cmpq	%rax, %r15
    0000036a: 	je	.Ltmp1091 # Offset: 874
.Ltmp1096:
    0000036c: 	movl	(%rbp,%rdx,4), %esi
    00000370: 	movl	(%rbx,%rdx,4), %eax
    00000373: 	leaq	(,%rdx,4), %rcx
    0000037b: 	movl	%esi, %edi
    0000037d: 	subl	%eax, %edi
    0000037f: 	subl	%esi, %eax
    00000381: 	cmovsl	%edi, %eax
    00000384: 	cmpl	%eax, %r9d
    00000387: 	cmovll	%eax, %r9d
    0000038b: 	leaq	0x1(%rdx), %rax
    0000038f: 	cmpq	%rax, %r15
    00000392: 	jbe	.Ltmp1091 # Offset: 914
    00000394: 	movl	0x4(%rbp,%rcx), %esi
    00000398: 	movl	0x4(%rbx,%rcx), %eax
    0000039c: 	movl	%esi, %edi
    0000039e: 	subl	%eax, %edi
    000003a0: 	subl	%esi, %eax
    000003a2: 	cmovsl	%edi, %eax
    000003a5: 	cmpl	%eax, %r9d
    000003a8: 	cmovll	%eax, %r9d
    000003ac: 	addq	$0x2, %rdx
    000003b0: 	cmpq	%r15, %rdx
    000003b3: 	jae	.Ltmp1091 # Offset: 947
    000003b5: 	movl	0x8(%rbp,%rcx), %edx
    000003b9: 	movl	0x8(%rbx,%rcx), %eax
    000003bd: 	movl	%edx, %ecx
    000003bf: 	subl	%eax, %ecx
    000003c1: 	subl	%edx, %eax
    000003c3: 	cmovsl	%ecx, %eax
    000003c6: 	cmpl	%eax, %r9d
    000003c9: 	cmovll	%eax, %r9d
.Ltmp1091:
    000003cd: 	cmpl	%r12d, 0xb0(%rsp)
    000003d5: 	jge	.Ltmp1092 # Offset: 981
    000003d7: 	testl	%r9d, %r9d
    000003da: 	jle	.Ltmp1093 # Offset: 986
    000003dc: 	cmpq	$0x9, %r8
    000003e0: 	jle	.Ltmp1093 # Offset: 992
.Ltmp1092:
    000003e2: 	addl	$0x1, %r12d
    000003e6: 	cmpl	%r12d, iterations(%rip)
    000003ed: 	movq	%rbp, %rax
    000003f0: 	movq	%rbx, %rbp
    000003f3: 	jle	.Ltmp1093 # Offset: 1011
    000003f5: 	movq	%rax, %rbx
    000003f8: 	jmp	.Ltmp1094 # Offset: 1016
.Ltmp1084:
    000003fd: 	cmpl	%r12d, 0xb0(%rsp)
    00000405: 	jl	.Ltmp1095 # Offset: 1029
    00000407: 	xorl	%r8d, %r8d
    0000040a: 	xorl	%r9d, %r9d
    0000040d: 	jmp	.Ltmp1092 # Offset: 1037
.Ltmp1089:
    0000040f: 	xorl	%r9d, %r9d
    00000412: 	xorl	%edx, %edx
    00000414: 	jmp	.Ltmp1096 # Offset: 1044
.Ltmp1085:
    00000419: 	xorl	%r8d, %r8d
    0000041c: 	xorl	%edx, %edx
    0000041e: 	jmp	.Ltmp1097 # Offset: 1054
.Ltmp1095:
    00000423: 	xorl	%r9d, %r9d
    00000426: 	xorl	%r8d, %r8d
.Ltmp1093:
    00000429: 	movq	%r8, 0x8(%rsp)
    0000042e: 	movl	%r9d, (%rsp)
    00000432: 	callq	clock@PLT # Offset: 1074
    00000437: 	movl	0x38(%rsp), %esi
    0000043b: 	pxor	%xmm0, %xmm0
    0000043f: 	movl	(%rsp), %r9d
    00000443: 	movq	%rax, end_time(%rip)
    0000044a: 	subq	start_time(%rip), %rax
    00000451: 	cvtsi2sd	%rax, %xmm0
    00000456: 	movl	%esi, %eax
    00000458: 	divsd	DATAat0x49520(%rip), %xmm0
    00000460: 	movq	0x8(%rsp), %r8
    00000465: 	shrl	$0x1f, %eax
    00000468: 	movq	%xmm0, %rbx
    0000046d: 	addl	%esi, %eax
    0000046f: 	movl	0x3c(%rsp), %esi
    00000473: 	sarl	%eax
    00000475: 	movl	%esi, %edx
    00000477: 	imull	%esi, %eax
    0000047a: 	shrl	$0x1f, %edx
    0000047d: 	addl	%esi, %edx
    0000047f: 	movl	0x4c(%rsp), %esi
    00000483: 	sarl	%edx
    00000485: 	addl	%edx, %eax
    00000487: 	cltq
    00000489: 	subl	(%rbp,%rax,4), %esi
    0000048d: 	cmpl	%r12d, iterations(%rip)
    00000494: 	movl	%esi, %ebp
    00000496: 	jg	.Ltmp1098 # Offset: 1174
    00000498: 	cmpq	$0xa, %r8
    0000049c: 	jle	.Ltmp1098 # Offset: 1180
    0000049e: 	cmpl	$0x1, %r9d
    000004a2: 	jle	.Ltmp1098 # Offset: 1186
    000004a4: 	movq	0x40(%rsp), %rax
    000004a9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004b0: 	movq	%r13, %rdi
    000004b3: 	movq	0x8(%rax), %rdx
    000004b7: 	movq	(%rax), %rsi
    000004ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1210
    000004bf: 	movl	$0x11, %edx
    000004c4: 	leaq	DATAat0x49199(%rip), %rsi
    000004cb: 	movq	%rax, %rdi
    000004ce: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1230
    000004d3: 	movl	(%rsp), %r9d
    000004d7: 	movq	0x8(%rsp), %r8
    000004dc: 	jmp	.Ltmp1099 # Offset: 1244
.Ltmp1098:
    000004de: 	movq	0x40(%rsp), %rax
    000004e3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000004ea: 	movq	%r8, 0x8(%rsp)
    000004ef: 	movq	%r13, %rdi
    000004f2: 	movl	%r9d, (%rsp)
    000004f6: 	movq	0x8(%rax), %rdx
    000004fa: 	movq	(%rax), %rsi
    000004fd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1277
    00000502: 	movl	$0xa, %edx
    00000507: 	leaq	DATAat0x491ab(%rip), %rsi
    0000050e: 	movq	%rax, %rdi
    00000511: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1297
    00000516: 	movq	0x8(%rsp), %r8
    0000051b: 	movl	(%rsp), %r9d
.Ltmp1099:
    0000051f: 	movl	$0x4, %edx
    00000524: 	leaq	DATAat0x491b6(%rip), %rsi
    0000052b: 	movq	%r13, %rdi
    0000052e: 	movl	%r9d, (%rsp)
    00000532: 	movq	%r8, 0x8(%rsp)
    00000537: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1335
    0000053c: 	movl	%r12d, %esi
    0000053f: 	movq	%r13, %rdi
    00000542: 	callq	_ZNSolsEi@PLT # Offset: 1346
    00000547: 	movl	$0xb, %edx
    0000054c: 	leaq	DATAat0x491bb(%rip), %rsi
    00000553: 	movq	%rax, %rdi
    00000556: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1366
    0000055b: 	movl	$0xa, %edx
    00000560: 	leaq	DATAat0x491c7(%rip), %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1386
    0000056f: 	movq	0x8(%rsp), %rsi
    00000574: 	movq	%r13, %rdi
    00000577: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1399
    0000057c: 	movl	$0x7, %edx
    00000581: 	leaq	DATAat0x491d2(%rip), %rsi
    00000588: 	movq	%rax, %rdi
    0000058b: 	movq	%rax, %r12
    0000058e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1422
    00000593: 	movl	(%rsp), %esi
    00000596: 	movq	%r12, %rdi
    00000599: 	callq	_ZNSolsEi@PLT # Offset: 1433
    0000059e: 	movl	$0x10, %edx
    000005a3: 	leaq	DATAat0x491da(%rip), %rsi
    000005aa: 	movq	%rax, %r12
    000005ad: 	movq	%rax, %rdi
    000005b0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1456
    000005b5: 	movl	%ebp, %esi
    000005b7: 	movq	%r12, %rdi
    000005ba: 	callq	_ZNSolsEi@PLT # Offset: 1466
    000005bf: 	movl	$0x8, %edx
    000005c4: 	leaq	DATAat0x491eb(%rip), %rsi
    000005cb: 	movq	%rax, %rbp
    000005ce: 	movq	%rax, %rdi
    000005d1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1489
    000005d6: 	movq	%rbx, %xmm0
    000005db: 	movq	%rbp, %rdi
    000005de: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1502
    000005e3: 	movl	$0x2, %edx
    000005e8: 	leaq	DATAat0x491f4(%rip), %rsi
    000005ef: 	movq	%rax, %rdi
    000005f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1522
    000005f7: 	movl	0x48(%rsp), %eax
    000005fb: 	movl	%eax, iterations(%rip)
    00000601: 	movq	0x68(%rsp), %rax
    00000606: 	subq	%fs:0x28, %rax
    0000060f: 	jne	.Ltmp1100 # Offset: 1551
    00000611: 	addq	$0x78, %rsp
    00000615: 	popq	%rbx
    00000616: 	popq	%rbp
    00000617: 	popq	%r12
    00000619: 	popq	%r13
    0000061b: 	popq	%r14
    0000061d: 	popq	%r15
    0000061f: 	retq # Offset: 1567
.Ltmp1080:
    00000620: 	xorl	%r12d, %r12d
    00000623: 	xorl	%r9d, %r9d
    00000626: 	xorl	%r8d, %r8d
    00000629: 	jmp	.Ltmp1093 # Offset: 1577
.Ltmp1100:
    0000062e: 	callq	__stack_chk_fail@PLT # Offset: 1582
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil21jacobi_sor2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x233f0
  Size        : 0x626
  MaxSize     : 0x630
  Offset      : 0x233f0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil22jacobi_sor2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002c: 	movl	%edx, 0x28(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x2c(%rsp)
    00000037: 	leaq	0x40(%rsp), %rcx
    0000003c: 	movq	%r9, 0x30(%rsp)
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x58(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movaps	%xmm0, 0x40(%rsp)
    00000056: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 86
    0000005b: 	movl	%r15d, %esi
    0000005e: 	imull	%r14d, %esi
    00000062: 	movl	%eax, 0x3c(%rsp)
    00000066: 	movslq	%esi, %r15
    00000069: 	testl	%r15d, %r15d
    0000006c: 	jle	.Ltmp1101 # Offset: 108
    0000006e: 	movslq	%r15d, %rdx
    00000071: 	movq	%rbx, %rsi
    00000074: 	movq	%rbp, %rdi
    00000077: 	shlq	$0x2, %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp1101:
    00000080: 	movl	iterations(%rip), %eax
    00000086: 	movl	$0x2710, iterations(%rip)
    00000090: 	movl	%eax, 0x38(%rsp)
    00000094: 	callq	clock@PLT # Offset: 148
    00000099: 	movl	iterations(%rip), %edx
    0000009f: 	movq	%rax, start_time(%rip)
    000000a6: 	testl	%edx, %edx
    000000a8: 	jle	.Ltmp1102 # Offset: 168
    000000ae: 	movl	0x28(%rsp), %eax
    000000b2: 	movslq	%r12d, %r10
    000000b5: 	movl	$0x0, 0x18(%rsp)
    000000bd: 	pxor	%xmm3, %xmm3
    000000c1: 	shlq	$0x2, %r10
    000000c5: 	leal	-0x1(%rax), %r13d
    000000c9: 	movl	0x2c(%rsp), %eax
    000000cd: 	leal	-0x2(%rax), %esi
    000000d0: 	leal	(%r12,%r12), %eax
    000000d4: 	movq	%r15, %r12
    000000d7: 	cltq
    000000d9: 	movl	%esi, 0x1c(%rsp)
    000000dd: 	shrq	$0x2, %r12
    000000e1: 	movslq	%esi, %r14
    000000e4: 	shlq	$0x2, %rax
    000000e8: 	shlq	$0x4, %r12
    000000ec: 	movq	%rax, 0x20(%rsp)
    000000f1: 	leaq	-0x1(%r15), %rax
    000000f5: 	movq	%rax, 0x10(%rsp)
    000000fa: 	movq	%r15, %rax
    000000fd: 	andq	$-0x4, %rax
    00000101: 	movq	%rax, 0x8(%rsp)
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1116:
    00000110: 	cmpl	$0x1, %r13d
    00000114: 	jle	.Ltmp1103 # Offset: 276
    0000011a: 	movl	0x1c(%rsp), %eax
    0000011e: 	testl	%eax, %eax
    00000120: 	jle	.Ltmp1103 # Offset: 288
    00000126: 	movq	0x20(%rsp), %rax
    0000012b: 	leaq	(%rbp,%r10), %rdi
    00000130: 	movq	%rbx, %r9
    00000133: 	leaq	(%rbx,%r10), %rsi
    00000137: 	movl	$0x1, %r11d
    0000013d: 	leaq	(%rbx,%rax), %r8
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1105:
    00000148: 	addl	$0x1, %r11d
    0000014c: 	movq	%r14, %rdx
    0000014f: 	nop # Size: 1
.Ltmp1104:
    00000150: 	movslq	(%r9,%rdx,4), %rax
    00000154: 	movslq	-0x4(%rsi,%rdx,4), %rcx
    00000159: 	addq	%rax, %rcx
    0000015c: 	movslq	0x4(%rsi,%rdx,4), %rax
    00000161: 	addq	%rcx, %rax
    00000164: 	movslq	(%r8,%rdx,4), %rcx
    00000168: 	addq	%rax, %rcx
    0000016b: 	leaq	0x5(%rcx), %rax
    0000016f: 	addq	$0x2, %rcx
    00000173: 	cmovnsq	%rcx, %rax
    00000177: 	sarq	$0x2, %rax
    0000017b: 	subl	(%rdi,%rdx,4), %eax
    0000017e: 	imull	$0x71, %eax, %eax
    00000181: 	sarl	$0x6, %eax
    00000184: 	addl	(%rdi,%rdx,4), %eax
    00000187: 	movl	%eax, (%rdi,%rdx,4)
    0000018a: 	subq	$0x1, %rdx
    0000018e: 	testl	%edx, %edx
    00000190: 	jg	.Ltmp1104 # Offset: 400
    00000192: 	addq	%r10, %rdi
    00000195: 	addq	%r10, %r9
    00000198: 	addq	%r10, %rsi
    0000019b: 	addq	%r10, %r8
    0000019e: 	cmpl	%r11d, %r13d
    000001a1: 	jne	.Ltmp1105 # Offset: 417
.Ltmp1103:
    000001a3: 	testq	%r15, %r15
    000001a6: 	je	.Ltmp1106 # Offset: 422
    000001ac: 	cmpq	$0x2, 0x10(%rsp)
    000001b2: 	jbe	.Ltmp1107 # Offset: 434
    000001b8: 	xorl	%eax, %eax
    000001ba: 	pxor	%xmm2, %xmm2
    000001be: 	nop # Size: 2
.Ltmp1108:
    000001c0: 	movdqu	(%rbp,%rax), %xmm5
    000001c6: 	movdqu	(%rbx,%rax), %xmm4
    000001cb: 	movdqa	%xmm3, %xmm0
    000001cf: 	movdqu	(%rbx,%rax), %xmm6
    000001d4: 	addq	$0x10, %rax
    000001d8: 	psubd	%xmm5, %xmm4
    000001dc: 	movdqa	%xmm5, %xmm1
    000001e0: 	pcmpgtd	%xmm4, %xmm0
    000001e4: 	psubd	%xmm6, %xmm1
    000001e8: 	pand	%xmm0, %xmm1
    000001ec: 	pandn	%xmm4, %xmm0
    000001f0: 	movdqa	%xmm3, %xmm4
    000001f4: 	por	%xmm1, %xmm0
    000001f8: 	pcmpgtd	%xmm0, %xmm4
    000001fc: 	movdqa	%xmm0, %xmm1
    00000200: 	punpckldq	%xmm4, %xmm1
    00000204: 	punpckhdq	%xmm4, %xmm0
    00000208: 	paddq	%xmm1, %xmm2
    0000020c: 	paddq	%xmm0, %xmm2
    00000210: 	cmpq	%rax, %r12
    00000213: 	jne	.Ltmp1108 # Offset: 531
    00000215: 	movdqa	%xmm2, %xmm0
    00000219: 	movq	0x8(%rsp), %rax
    0000021e: 	psrldq	$0x8, %xmm0
    00000223: 	paddq	%xmm0, %xmm2
    00000227: 	movq	%rax, %rdx
    0000022a: 	movq	%xmm2, %r8
    0000022f: 	cmpq	%rax, %r15
    00000232: 	je	.Ltmp1109 # Offset: 562
.Ltmp1119:
    00000234: 	movl	(%rbp,%rdx,4), %esi
    00000238: 	movl	(%rbx,%rdx,4), %eax
    0000023b: 	leaq	(,%rdx,4), %rcx
    00000243: 	movl	%esi, %edi
    00000245: 	subl	%eax, %edi
    00000247: 	subl	%esi, %eax
    00000249: 	cmovsl	%edi, %eax
    0000024c: 	cltq
    0000024e: 	addq	%rax, %r8
    00000251: 	leaq	0x1(%rdx), %rax
    00000255: 	cmpq	%rax, %r15
    00000258: 	jbe	.Ltmp1110 # Offset: 600
    0000025a: 	movl	0x4(%rbp,%rcx), %esi
    0000025e: 	movl	0x4(%rbx,%rcx), %eax
    00000262: 	movl	%esi, %edi
    00000264: 	subl	%eax, %edi
    00000266: 	subl	%esi, %eax
    00000268: 	cmovsl	%edi, %eax
    0000026b: 	addq	$0x2, %rdx
    0000026f: 	cltq
    00000271: 	addq	%rax, %r8
    00000274: 	cmpq	%rdx, %r15
    00000277: 	jbe	.Ltmp1110 # Offset: 631
    00000279: 	movl	0x8(%rbp,%rcx), %edx
    0000027d: 	movl	0x8(%rbx,%rcx), %eax
    00000281: 	movl	%edx, %ecx
    00000283: 	subl	%eax, %ecx
    00000285: 	subl	%edx, %eax
    00000287: 	cmovsl	%ecx, %eax
    0000028a: 	cltq
    0000028c: 	addq	%rax, %r8
.Ltmp1110:
    0000028f: 	cmpq	$0x2, 0x10(%rsp)
    00000295: 	jbe	.Ltmp1111 # Offset: 661
.Ltmp1109:
    0000029b: 	xorl	%eax, %eax
    0000029d: 	pxor	%xmm2, %xmm2
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp1112:
    000002a8: 	movdqu	(%rbp,%rax), %xmm7
    000002ae: 	movdqu	(%rbx,%rax), %xmm4
    000002b3: 	movdqa	%xmm3, %xmm0
    000002b7: 	movdqu	(%rbx,%rax), %xmm5
    000002bc: 	addq	$0x10, %rax
    000002c0: 	psubd	%xmm7, %xmm4
    000002c4: 	movdqa	%xmm7, %xmm1
    000002c8: 	pcmpgtd	%xmm4, %xmm0
    000002cc: 	psubd	%xmm5, %xmm1
    000002d0: 	pand	%xmm0, %xmm1
    000002d4: 	pandn	%xmm4, %xmm0
    000002d8: 	por	%xmm1, %xmm0
    000002dc: 	movdqa	%xmm0, %xmm1
    000002e0: 	pcmpgtd	%xmm2, %xmm1
    000002e4: 	pand	%xmm1, %xmm0
    000002e8: 	pandn	%xmm2, %xmm1
    000002ec: 	movdqa	%xmm1, %xmm2
    000002f0: 	por	%xmm0, %xmm2
    000002f4: 	cmpq	%rax, %r12
    000002f7: 	jne	.Ltmp1112 # Offset: 759
    000002f9: 	movdqa	%xmm2, %xmm1
    000002fd: 	movq	0x8(%rsp), %rax
    00000302: 	psrldq	$0x8, %xmm1
    00000307: 	movdqa	%xmm1, %xmm0
    0000030b: 	movq	%rax, %rdx
    0000030e: 	pcmpgtd	%xmm2, %xmm0
    00000312: 	pand	%xmm0, %xmm1
    00000316: 	pandn	%xmm2, %xmm0
    0000031a: 	por	%xmm1, %xmm0
    0000031e: 	movdqa	%xmm0, %xmm2
    00000322: 	psrldq	$0x4, %xmm2
    00000327: 	movdqa	%xmm2, %xmm1
    0000032b: 	pcmpgtd	%xmm0, %xmm1
    0000032f: 	pand	%xmm1, %xmm2
    00000333: 	pandn	%xmm0, %xmm1
    00000337: 	por	%xmm2, %xmm1
    0000033b: 	movd	%xmm1, %r9d
    00000340: 	cmpq	%rax, %r15
    00000343: 	je	.Ltmp1113 # Offset: 835
.Ltmp1118:
    00000345: 	movl	(%rbp,%rdx,4), %esi
    00000349: 	movl	(%rbx,%rdx,4), %eax
    0000034c: 	leaq	(,%rdx,4), %rcx
    00000354: 	movl	%esi, %edi
    00000356: 	subl	%eax, %edi
    00000358: 	subl	%esi, %eax
    0000035a: 	cmovsl	%edi, %eax
    0000035d: 	cmpl	%eax, %r9d
    00000360: 	cmovll	%eax, %r9d
    00000364: 	leaq	0x1(%rdx), %rax
    00000368: 	cmpq	%rax, %r15
    0000036b: 	jbe	.Ltmp1113 # Offset: 875
    0000036d: 	movl	0x4(%rbp,%rcx), %esi
    00000371: 	movl	0x4(%rbx,%rcx), %eax
    00000375: 	movl	%esi, %edi
    00000377: 	subl	%eax, %edi
    00000379: 	subl	%esi, %eax
    0000037b: 	cmovsl	%edi, %eax
    0000037e: 	cmpl	%eax, %r9d
    00000381: 	cmovll	%eax, %r9d
    00000385: 	addq	$0x2, %rdx
    00000389: 	cmpq	%rdx, %r15
    0000038c: 	jbe	.Ltmp1113 # Offset: 908
    0000038e: 	movl	0x8(%rbp,%rcx), %edx
    00000392: 	movl	0x8(%rbx,%rcx), %eax
    00000396: 	movl	%edx, %ecx
    00000398: 	subl	%eax, %ecx
    0000039a: 	subl	%edx, %eax
    0000039c: 	cmovsl	%ecx, %eax
    0000039f: 	cmpl	%eax, %r9d
    000003a2: 	cmovll	%eax, %r9d
.Ltmp1113:
    000003a6: 	movl	0x18(%rsp), %eax
    000003aa: 	cmpl	%eax, 0xa0(%rsp)
    000003b1: 	jge	.Ltmp1114 # Offset: 945
    000003b3: 	testl	%r9d, %r9d
    000003b6: 	jle	.Ltmp1115 # Offset: 950
    000003b8: 	cmpq	$0x9, %r8
    000003bc: 	jle	.Ltmp1115 # Offset: 956
.Ltmp1114:
    000003be: 	addl	$0x1, 0x18(%rsp)
    000003c3: 	movl	0x18(%rsp), %esi
    000003c7: 	movq	%rbp, %rax
    000003ca: 	movq	%rbx, %rbp
    000003cd: 	cmpl	%esi, iterations(%rip)
    000003d3: 	jle	.Ltmp1115 # Offset: 979
    000003d5: 	movq	%rax, %rbx
    000003d8: 	jmp	.Ltmp1116 # Offset: 984
.Ltmp1106:
    000003dd: 	movl	0x18(%rsp), %eax
    000003e1: 	cmpl	%eax, 0xa0(%rsp)
    000003e8: 	jl	.Ltmp1117 # Offset: 1000
    000003ea: 	xorl	%r8d, %r8d
    000003ed: 	xorl	%r9d, %r9d
    000003f0: 	jmp	.Ltmp1114 # Offset: 1008
.Ltmp1111:
    000003f2: 	xorl	%r9d, %r9d
    000003f5: 	xorl	%edx, %edx
    000003f7: 	jmp	.Ltmp1118 # Offset: 1015
.Ltmp1107:
    000003fc: 	xorl	%r8d, %r8d
    000003ff: 	xorl	%edx, %edx
    00000401: 	jmp	.Ltmp1119 # Offset: 1025
.Ltmp1117:
    00000406: 	xorl	%r9d, %r9d
    00000409: 	xorl	%r8d, %r8d
.Ltmp1115:
    0000040c: 	movl	%r9d, 0x10(%rsp)
    00000411: 	movq	%r8, 0x8(%rsp)
    00000416: 	callq	clock@PLT # Offset: 1046
    0000041b: 	movl	0x28(%rsp), %esi
    0000041f: 	pxor	%xmm0, %xmm0
    00000423: 	movq	0x8(%rsp), %r8
    00000428: 	movq	%rax, end_time(%rip)
    0000042f: 	subq	start_time(%rip), %rax
    00000436: 	cvtsi2sd	%rax, %xmm0
    0000043b: 	movl	%esi, %eax
    0000043d: 	divsd	DATAat0x49520(%rip), %xmm0
    00000445: 	movl	0x10(%rsp), %r9d
    0000044a: 	shrl	$0x1f, %eax
    0000044d: 	movq	%xmm0, %rbx
    00000452: 	addl	%esi, %eax
    00000454: 	movl	0x2c(%rsp), %esi
    00000458: 	sarl	%eax
    0000045a: 	movl	%esi, %edx
    0000045c: 	imull	%esi, %eax
    0000045f: 	shrl	$0x1f, %edx
    00000462: 	addl	%esi, %edx
    00000464: 	movl	0x3c(%rsp), %esi
    00000468: 	sarl	%edx
    0000046a: 	addl	%edx, %eax
    0000046c: 	cltq
    0000046e: 	subl	(%rbp,%rax,4), %esi
    00000472: 	movl	0x18(%rsp), %eax
    00000476: 	cmpl	%eax, iterations(%rip)
    0000047c: 	movl	%esi, %ebp
    0000047e: 	jg	.Ltmp1120 # Offset: 1150
    00000480: 	cmpq	$0xa, %r8
    00000484: 	jle	.Ltmp1120 # Offset: 1156
    00000486: 	cmpl	$0x1, %r9d
    0000048a: 	jle	.Ltmp1120 # Offset: 1162
    0000048c: 	movq	0x30(%rsp), %rax
    00000491: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000498: 	movq	%r12, %rdi
    0000049b: 	movq	0x8(%rax), %rdx
    0000049f: 	movq	(%rax), %rsi
    000004a2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1186
    000004a7: 	movl	$0x11, %edx
    000004ac: 	leaq	DATAat0x49199(%rip), %rsi
    000004b3: 	movq	%rax, %rdi
    000004b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1206
    000004bb: 	movq	0x8(%rsp), %r8
    000004c0: 	movl	0x10(%rsp), %r9d
    000004c5: 	jmp	.Ltmp1121 # Offset: 1221
.Ltmp1120:
    000004c7: 	movq	0x30(%rsp), %rax
    000004cc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000004d3: 	movl	%r9d, 0x10(%rsp)
    000004d8: 	movq	%r12, %rdi
    000004db: 	movq	%r8, 0x8(%rsp)
    000004e0: 	movq	0x8(%rax), %rdx
    000004e4: 	movq	(%rax), %rsi
    000004e7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1255
    000004ec: 	movl	$0xa, %edx
    000004f1: 	leaq	DATAat0x491ab(%rip), %rsi
    000004f8: 	movq	%rax, %rdi
    000004fb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1275
    00000500: 	movl	0x10(%rsp), %r9d
    00000505: 	movq	0x8(%rsp), %r8
.Ltmp1121:
    0000050a: 	movl	$0x4, %edx
    0000050f: 	movq	%r12, %rdi
    00000512: 	movl	%r9d, 0x10(%rsp)
    00000517: 	leaq	DATAat0x491b6(%rip), %rsi
    0000051e: 	movq	%r8, 0x8(%rsp)
    00000523: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1315
    00000528: 	movl	0x18(%rsp), %esi
    0000052c: 	movq	%r12, %rdi
    0000052f: 	callq	_ZNSolsEi@PLT # Offset: 1327
    00000534: 	movl	$0xb, %edx
    00000539: 	leaq	DATAat0x491bb(%rip), %rsi
    00000540: 	movq	%rax, %rdi
    00000543: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1347
    00000548: 	movl	$0xa, %edx
    0000054d: 	movq	%r12, %rdi
    00000550: 	leaq	DATAat0x491c7(%rip), %rsi
    00000557: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1367
    0000055c: 	movq	0x8(%rsp), %rsi
    00000561: 	movq	%r12, %rdi
    00000564: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1380
    00000569: 	movl	$0x7, %edx
    0000056e: 	leaq	DATAat0x491d2(%rip), %rsi
    00000575: 	movq	%rax, %rdi
    00000578: 	movq	%rax, %r12
    0000057b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1403
    00000580: 	movl	0x10(%rsp), %esi
    00000584: 	movq	%r12, %rdi
    00000587: 	callq	_ZNSolsEi@PLT # Offset: 1415
    0000058c: 	movl	$0x10, %edx
    00000591: 	leaq	DATAat0x491da(%rip), %rsi
    00000598: 	movq	%rax, %r12
    0000059b: 	movq	%rax, %rdi
    0000059e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1438
    000005a3: 	movl	%ebp, %esi
    000005a5: 	movq	%r12, %rdi
    000005a8: 	callq	_ZNSolsEi@PLT # Offset: 1448
    000005ad: 	movl	$0x8, %edx
    000005b2: 	leaq	DATAat0x491eb(%rip), %rsi
    000005b9: 	movq	%rax, %rbp
    000005bc: 	movq	%rax, %rdi
    000005bf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1471
    000005c4: 	movq	%rbx, %xmm0
    000005c9: 	movq	%rbp, %rdi
    000005cc: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1484
    000005d1: 	movl	$0x2, %edx
    000005d6: 	leaq	DATAat0x491f4(%rip), %rsi
    000005dd: 	movq	%rax, %rdi
    000005e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1504
    000005e5: 	movl	0x38(%rsp), %eax
    000005e9: 	movl	%eax, iterations(%rip)
    000005ef: 	movq	0x58(%rsp), %rax
    000005f4: 	subq	%fs:0x28, %rax
    000005fd: 	jne	.Ltmp1122 # Offset: 1533
    000005ff: 	addq	$0x68, %rsp
    00000603: 	popq	%rbx
    00000604: 	popq	%rbp
    00000605: 	popq	%r12
    00000607: 	popq	%r13
    00000609: 	popq	%r14
    0000060b: 	popq	%r15
    0000060d: 	retq # Offset: 1549
.Ltmp1102:
    0000060e: 	movl	$0x0, 0x18(%rsp)
    00000616: 	xorl	%r9d, %r9d
    00000619: 	xorl	%r8d, %r8d
    0000061c: 	jmp	.Ltmp1115 # Offset: 1564
.Ltmp1122:
    00000621: 	callq	__stack_chk_fail@PLT # Offset: 1569
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x23a20
  Size        : 0x679
  MaxSize     : 0x680
  Offset      : 0x23a20
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x88, %rsp
    00000027: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002f: 	movl	%edx, 0x48(%rsp)
    00000033: 	movl	%r14d, %edx
    00000036: 	movl	%ecx, 0x4c(%rsp)
    0000003a: 	leaq	0x60(%rsp), %rcx
    0000003f: 	movq	%r9, 0x50(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x78(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x60(%rsp)
    00000059: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 89
    0000005e: 	movl	%r15d, %esi
    00000061: 	imull	%r14d, %esi
    00000065: 	movl	%eax, 0x5c(%rsp)
    00000069: 	movl	%esi, %r13d
    0000006c: 	testl	%esi, %esi
    0000006e: 	jle	.Ltmp1123 # Offset: 110
    00000070: 	movslq	%esi, %rdx
    00000073: 	movq	%rbp, %rdi
    00000076: 	movq	%rbx, %rsi
    00000079: 	shlq	$0x2, %rdx
    0000007d: 	callq	memmove@PLT # Offset: 125
.Ltmp1123:
    00000082: 	movl	iterations(%rip), %eax
    00000088: 	movl	$0x2710, iterations(%rip)
    00000092: 	movl	%eax, 0x58(%rsp)
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	movl	iterations(%rip), %edx
    000000a1: 	movq	%rax, start_time(%rip)
    000000a8: 	testl	%edx, %edx
    000000aa: 	jle	.Ltmp1124 # Offset: 170
    000000b0: 	movl	0x48(%rsp), %ecx
    000000b4: 	movl	0x4c(%rsp), %edi
    000000b8: 	movl	%r12d, %r10d
    000000bb: 	pxor	%xmm3, %xmm3
    000000bf: 	negl	%r10d
    000000c2: 	movl	$0x0, 0x4(%rsp)
    000000ca: 	leal	-0x2(%rcx), %eax
    000000cd: 	leal	-0x1(%rdi), %esi
    000000d0: 	movslq	%r10d, %r10
    000000d3: 	movl	%eax, 0x20(%rsp)
    000000d7: 	imull	%r12d, %eax
    000000db: 	negq	%r10
    000000de: 	movl	%esi, 0x24(%rsp)
    000000e2: 	movslq	%r13d, %rsi
    000000e5: 	shlq	$0x2, %r10
    000000e9: 	movq	%rsi, 0x8(%rsp)
    000000ee: 	cltq
    000000f0: 	movq	%rax, %rdx
    000000f3: 	negq	%rdx
    000000f6: 	shlq	$0x2, %rdx
    000000fa: 	movq	%rdx, 0x40(%rsp)
    000000ff: 	leal	-0x3(%rcx), %edx
    00000102: 	imull	%r12d, %edx
    00000106: 	movslq	%edx, %rdx
    00000109: 	shlq	$0x2, %rdx
    0000010d: 	movq	%rdx, 0x28(%rsp)
    00000112: 	leal	-0x1(%rcx), %edx
    00000115: 	imull	%r12d, %edx
    00000119: 	movslq	%edx, %rdx
    0000011c: 	leaq	(,%rdx,4), %rcx
    00000124: 	leal	-0x3(%rdi), %edx
    00000127: 	leaq	0x1(%rdx), %r15
    0000012b: 	movq	%rcx, 0x30(%rsp)
    00000130: 	addq	%r15, %rax
    00000133: 	negq	%r15
    00000136: 	shlq	$0x2, %rax
    0000013a: 	shlq	$0x2, %r15
    0000013e: 	movq	%rax, 0x38(%rsp)
    00000143: 	movq	%rsi, %rax
    00000146: 	leaq	-0x1(%rsi), %rsi
    0000014a: 	movq	%rsi, 0x18(%rsp)
    0000014f: 	movq	%rax, %rsi
    00000152: 	andq	$-0x4, %rax
    00000156: 	shrq	$0x2, %rsi
    0000015a: 	movq	%rax, 0x10(%rsp)
    0000015f: 	movq	%rsi, %r14
    00000162: 	shlq	$0x4, %r14
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1138:
    00000170: 	movl	0x20(%rsp), %eax
    00000174: 	testl	%eax, %eax
    00000176: 	jle	.Ltmp1125 # Offset: 374
    0000017c: 	cmpl	$0x1, 0x24(%rsp)
    00000181: 	jle	.Ltmp1125 # Offset: 385
    00000187: 	movq	0x38(%rsp), %r8
    0000018c: 	movq	0x30(%rsp), %r13
    00000191: 	movq	0x28(%rsp), %r12
    00000196: 	movq	0x40(%rsp), %r9
    0000019b: 	movl	0x20(%rsp), %r11d
.Ltmp1127:
    000001a0: 	leaq	(%r12,%r9), %rsi
    000001a4: 	leaq	(%r13,%r9), %rcx
    000001a9: 	subl	$0x1, %r11d
    000001ad: 	leaq	(%r15,%r8), %rdx
    000001b1: 	addq	%rbx, %rsi
    000001b4: 	addq	%rbx, %rcx
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1126:
    000001c0: 	movslq	0x4(%rdx,%rsi), %rax
    000001c5: 	movslq	(%rbx,%rdx), %rdi
    000001c9: 	addq	%rax, %rdi
    000001cc: 	movslq	0x8(%rbx,%rdx), %rax
    000001d1: 	addq	%rdi, %rax
    000001d4: 	movslq	0x4(%rdx,%rcx), %rdi
    000001d9: 	addq	%rax, %rdi
    000001dc: 	leaq	0x5(%rdi), %rax
    000001e0: 	addq	$0x2, %rdi
    000001e4: 	cmovnsq	%rdi, %rax
    000001e8: 	sarq	$0x2, %rax
    000001ec: 	subl	0x4(%rbp,%rdx), %eax
    000001f0: 	imull	$0x71, %eax, %eax
    000001f3: 	sarl	$0x6, %eax
    000001f6: 	addl	0x4(%rbp,%rdx), %eax
    000001fa: 	movl	%eax, 0x4(%rbp,%rdx)
    000001fe: 	addq	$0x4, %rdx
    00000202: 	cmpq	%rdx, %r8
    00000205: 	jne	.Ltmp1126 # Offset: 517
    00000207: 	addq	%r10, %r9
    0000020a: 	subq	%r10, %r12
    0000020d: 	subq	%r10, %r13
    00000210: 	subq	%r10, %r8
    00000213: 	testl	%r11d, %r11d
    00000216: 	jne	.Ltmp1127 # Offset: 534
.Ltmp1125:
    00000218: 	cmpq	$0x0, 0x8(%rsp)
    0000021e: 	je	.Ltmp1128 # Offset: 542
    00000224: 	cmpq	$0x2, 0x18(%rsp)
    0000022a: 	jbe	.Ltmp1129 # Offset: 554
    00000230: 	xorl	%eax, %eax
    00000232: 	pxor	%xmm2, %xmm2
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1130:
    00000240: 	movdqu	(%rbp,%rax), %xmm5
    00000246: 	movdqu	(%rbx,%rax), %xmm4
    0000024b: 	movdqa	%xmm3, %xmm0
    0000024f: 	movdqu	(%rbx,%rax), %xmm6
    00000254: 	addq	$0x10, %rax
    00000258: 	psubd	%xmm5, %xmm4
    0000025c: 	movdqa	%xmm5, %xmm1
    00000260: 	pcmpgtd	%xmm4, %xmm0
    00000264: 	psubd	%xmm6, %xmm1
    00000268: 	pand	%xmm0, %xmm1
    0000026c: 	pandn	%xmm4, %xmm0
    00000270: 	movdqa	%xmm3, %xmm4
    00000274: 	por	%xmm1, %xmm0
    00000278: 	pcmpgtd	%xmm0, %xmm4
    0000027c: 	movdqa	%xmm0, %xmm1
    00000280: 	punpckldq	%xmm4, %xmm1
    00000284: 	punpckhdq	%xmm4, %xmm0
    00000288: 	paddq	%xmm1, %xmm2
    0000028c: 	paddq	%xmm0, %xmm2
    00000290: 	cmpq	%rax, %r14
    00000293: 	jne	.Ltmp1130 # Offset: 659
    00000295: 	movdqa	%xmm2, %xmm0
    00000299: 	movq	0x10(%rsp), %rax
    0000029e: 	psrldq	$0x8, %xmm0
    000002a3: 	paddq	%xmm0, %xmm2
    000002a7: 	movq	%rax, %rdx
    000002aa: 	movq	%xmm2, %r12
    000002af: 	cmpq	%rax, 0x8(%rsp)
    000002b4: 	je	.Ltmp1131 # Offset: 692
.Ltmp1141:
    000002b6: 	movl	(%rbp,%rdx,4), %esi
    000002ba: 	movl	(%rbx,%rdx,4), %eax
    000002bd: 	leaq	(,%rdx,4), %rcx
    000002c5: 	movq	0x8(%rsp), %r11
    000002ca: 	movl	%esi, %edi
    000002cc: 	subl	%eax, %edi
    000002ce: 	subl	%esi, %eax
    000002d0: 	cmovsl	%edi, %eax
    000002d3: 	cltq
    000002d5: 	addq	%rax, %r12
    000002d8: 	leaq	0x1(%rdx), %rax
    000002dc: 	cmpq	%rax, %r11
    000002df: 	jbe	.Ltmp1132 # Offset: 735
    000002e1: 	movl	0x4(%rbp,%rcx), %esi
    000002e5: 	movl	0x4(%rbx,%rcx), %eax
    000002e9: 	movl	%esi, %edi
    000002eb: 	subl	%eax, %edi
    000002ed: 	subl	%esi, %eax
    000002ef: 	cmovsl	%edi, %eax
    000002f2: 	addq	$0x2, %rdx
    000002f6: 	cltq
    000002f8: 	addq	%rax, %r12
    000002fb: 	cmpq	%rdx, %r11
    000002fe: 	jbe	.Ltmp1132 # Offset: 766
    00000300: 	movl	0x8(%rbp,%rcx), %edx
    00000304: 	movl	0x8(%rbx,%rcx), %eax
    00000308: 	movl	%edx, %ecx
    0000030a: 	subl	%eax, %ecx
    0000030c: 	subl	%edx, %eax
    0000030e: 	cmovsl	%ecx, %eax
    00000311: 	cltq
    00000313: 	addq	%rax, %r12
.Ltmp1132:
    00000316: 	cmpq	$0x2, 0x18(%rsp)
    0000031c: 	jbe	.Ltmp1133 # Offset: 796
.Ltmp1131:
    00000322: 	xorl	%eax, %eax
    00000324: 	pxor	%xmm2, %xmm2
    00000328: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1134:
    00000330: 	movdqu	(%rbp,%rax), %xmm7
    00000336: 	movdqu	(%rbx,%rax), %xmm4
    0000033b: 	movdqa	%xmm3, %xmm0
    0000033f: 	movdqu	(%rbx,%rax), %xmm5
    00000344: 	addq	$0x10, %rax
    00000348: 	psubd	%xmm7, %xmm4
    0000034c: 	movdqa	%xmm7, %xmm1
    00000350: 	pcmpgtd	%xmm4, %xmm0
    00000354: 	psubd	%xmm5, %xmm1
    00000358: 	pand	%xmm0, %xmm1
    0000035c: 	pandn	%xmm4, %xmm0
    00000360: 	por	%xmm1, %xmm0
    00000364: 	movdqa	%xmm0, %xmm1
    00000368: 	pcmpgtd	%xmm2, %xmm1
    0000036c: 	pand	%xmm1, %xmm0
    00000370: 	pandn	%xmm2, %xmm1
    00000374: 	movdqa	%xmm1, %xmm2
    00000378: 	por	%xmm0, %xmm2
    0000037c: 	cmpq	%rax, %r14
    0000037f: 	jne	.Ltmp1134 # Offset: 895
    00000381: 	movdqa	%xmm2, %xmm1
    00000385: 	movq	0x10(%rsp), %rax
    0000038a: 	psrldq	$0x8, %xmm1
    0000038f: 	movdqa	%xmm1, %xmm0
    00000393: 	movq	%rax, %rdx
    00000396: 	pcmpgtd	%xmm2, %xmm0
    0000039a: 	pand	%xmm0, %xmm1
    0000039e: 	pandn	%xmm2, %xmm0
    000003a2: 	por	%xmm1, %xmm0
    000003a6: 	movdqa	%xmm0, %xmm2
    000003aa: 	psrldq	$0x4, %xmm2
    000003af: 	movdqa	%xmm2, %xmm1
    000003b3: 	pcmpgtd	%xmm0, %xmm1
    000003b7: 	pand	%xmm1, %xmm2
    000003bb: 	pandn	%xmm0, %xmm1
    000003bf: 	por	%xmm2, %xmm1
    000003c3: 	movd	%xmm1, %r13d
    000003c8: 	cmpq	%rax, 0x8(%rsp)
    000003cd: 	je	.Ltmp1135 # Offset: 973
.Ltmp1140:
    000003cf: 	movl	(%rbp,%rdx,4), %esi
    000003d3: 	movl	(%rbx,%rdx,4), %eax
    000003d6: 	leaq	(,%rdx,4), %rcx
    000003de: 	movq	0x8(%rsp), %r11
    000003e3: 	movl	%esi, %edi
    000003e5: 	subl	%eax, %edi
    000003e7: 	subl	%esi, %eax
    000003e9: 	cmovsl	%edi, %eax
    000003ec: 	cmpl	%eax, %r13d
    000003ef: 	cmovll	%eax, %r13d
    000003f3: 	leaq	0x1(%rdx), %rax
    000003f7: 	cmpq	%rax, %r11
    000003fa: 	jbe	.Ltmp1135 # Offset: 1018
    000003fc: 	movl	0x4(%rbp,%rcx), %esi
    00000400: 	movl	0x4(%rbx,%rcx), %eax
    00000404: 	movl	%esi, %edi
    00000406: 	subl	%eax, %edi
    00000408: 	subl	%esi, %eax
    0000040a: 	cmovsl	%edi, %eax
    0000040d: 	cmpl	%eax, %r13d
    00000410: 	cmovll	%eax, %r13d
    00000414: 	addq	$0x2, %rdx
    00000418: 	cmpq	%rdx, %r11
    0000041b: 	jbe	.Ltmp1135 # Offset: 1051
    0000041d: 	movl	0x8(%rbp,%rcx), %edx
    00000421: 	movl	0x8(%rbx,%rcx), %eax
    00000425: 	movl	%edx, %ecx
    00000427: 	subl	%eax, %ecx
    00000429: 	subl	%edx, %eax
    0000042b: 	cmovsl	%ecx, %eax
    0000042e: 	cmpl	%eax, %r13d
    00000431: 	cmovll	%eax, %r13d
.Ltmp1135:
    00000435: 	movl	0x4(%rsp), %eax
    00000439: 	cmpl	%eax, 0xc0(%rsp)
    00000440: 	jge	.Ltmp1136 # Offset: 1088
    00000442: 	testl	%r13d, %r13d
    00000445: 	jle	.Ltmp1137 # Offset: 1093
    00000447: 	cmpq	$0x9, %r12
    0000044b: 	jle	.Ltmp1137 # Offset: 1099
.Ltmp1136:
    0000044d: 	addl	$0x1, 0x4(%rsp)
    00000452: 	movl	0x4(%rsp), %ecx
    00000456: 	movq	%rbp, %rax
    00000459: 	movq	%rbx, %rbp
    0000045c: 	cmpl	%ecx, iterations(%rip)
    00000462: 	jle	.Ltmp1137 # Offset: 1122
    00000464: 	movq	%rax, %rbx
    00000467: 	jmp	.Ltmp1138 # Offset: 1127
.Ltmp1128:
    0000046c: 	movl	0x4(%rsp), %eax
    00000470: 	cmpl	%eax, 0xc0(%rsp)
    00000477: 	jl	.Ltmp1139 # Offset: 1143
    00000479: 	xorl	%r12d, %r12d
    0000047c: 	xorl	%r13d, %r13d
    0000047f: 	jmp	.Ltmp1136 # Offset: 1151
.Ltmp1133:
    00000481: 	xorl	%r13d, %r13d
    00000484: 	xorl	%edx, %edx
    00000486: 	jmp	.Ltmp1140 # Offset: 1158
.Ltmp1129:
    0000048b: 	xorl	%r12d, %r12d
    0000048e: 	xorl	%edx, %edx
    00000490: 	jmp	.Ltmp1141 # Offset: 1168
.Ltmp1139:
    00000495: 	xorl	%r13d, %r13d
    00000498: 	xorl	%r12d, %r12d
.Ltmp1137:
    0000049b: 	callq	clock@PLT # Offset: 1179
    000004a0: 	movl	0x48(%rsp), %esi
    000004a4: 	pxor	%xmm0, %xmm0
    000004a8: 	movq	%rax, end_time(%rip)
    000004af: 	subq	start_time(%rip), %rax
    000004b6: 	cvtsi2sd	%rax, %xmm0
    000004bb: 	movl	%esi, %eax
    000004bd: 	divsd	DATAat0x49520(%rip), %xmm0
    000004c5: 	movq	%xmm0, %rbx
    000004ca: 	shrl	$0x1f, %eax
    000004cd: 	addl	%esi, %eax
    000004cf: 	movl	0x4c(%rsp), %esi
    000004d3: 	sarl	%eax
    000004d5: 	movl	%esi, %edx
    000004d7: 	imull	%esi, %eax
    000004da: 	shrl	$0x1f, %edx
    000004dd: 	addl	%esi, %edx
    000004df: 	movl	0x5c(%rsp), %esi
    000004e3: 	sarl	%edx
    000004e5: 	addl	%edx, %eax
    000004e7: 	cltq
    000004e9: 	subl	(%rbp,%rax,4), %esi
    000004ed: 	movl	0x4(%rsp), %eax
    000004f1: 	cmpl	%eax, iterations(%rip)
    000004f7: 	movl	%esi, %ebp
    000004f9: 	jg	.Ltmp1142 # Offset: 1273
    000004fb: 	cmpq	$0xa, %r12
    000004ff: 	jle	.Ltmp1142 # Offset: 1279
    00000501: 	cmpl	$0x1, %r13d
    00000505: 	jle	.Ltmp1142 # Offset: 1285
    00000507: 	movq	0x50(%rsp), %rax
    0000050c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000513: 	movq	%r14, %rdi
    00000516: 	movq	0x8(%rax), %rdx
    0000051a: 	movq	(%rax), %rsi
    0000051d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1309
    00000522: 	movl	$0x11, %edx
    00000527: 	leaq	DATAat0x49199(%rip), %rsi
    0000052e: 	movq	%rax, %rdi
    00000531: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1329
    00000536: 	jmp	.Ltmp1143 # Offset: 1334
.Ltmp1142:
    00000538: 	movq	0x50(%rsp), %rax
    0000053d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000544: 	movq	%r14, %rdi
    00000547: 	movq	0x8(%rax), %rdx
    0000054b: 	movq	(%rax), %rsi
    0000054e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1358
    00000553: 	movl	$0xa, %edx
    00000558: 	leaq	DATAat0x491ab(%rip), %rsi
    0000055f: 	movq	%rax, %rdi
    00000562: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1378
.Ltmp1143:
    00000567: 	movl	$0x4, %edx
    0000056c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000573: 	movq	%r14, %rdi
    00000576: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1398
    0000057b: 	movl	0x4(%rsp), %esi
    0000057f: 	movq	%r14, %rdi
    00000582: 	callq	_ZNSolsEi@PLT # Offset: 1410
    00000587: 	movl	$0xb, %edx
    0000058c: 	leaq	DATAat0x491bb(%rip), %rsi
    00000593: 	movq	%rax, %rdi
    00000596: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1430
    0000059b: 	movl	$0xa, %edx
    000005a0: 	leaq	DATAat0x491c7(%rip), %rsi
    000005a7: 	movq	%r14, %rdi
    000005aa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1450
    000005af: 	movq	%r12, %rsi
    000005b2: 	movq	%r14, %rdi
    000005b5: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1461
    000005ba: 	movl	$0x7, %edx
    000005bf: 	leaq	DATAat0x491d2(%rip), %rsi
    000005c6: 	movq	%rax, %r12
    000005c9: 	movq	%rax, %rdi
    000005cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1484
    000005d1: 	movq	%r12, %rdi
    000005d4: 	movl	%r13d, %esi
    000005d7: 	callq	_ZNSolsEi@PLT # Offset: 1495
    000005dc: 	movl	$0x10, %edx
    000005e1: 	leaq	DATAat0x491da(%rip), %rsi
    000005e8: 	movq	%rax, %r12
    000005eb: 	movq	%rax, %rdi
    000005ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1518
    000005f3: 	movl	%ebp, %esi
    000005f5: 	movq	%r12, %rdi
    000005f8: 	callq	_ZNSolsEi@PLT # Offset: 1528
    000005fd: 	movl	$0x8, %edx
    00000602: 	leaq	DATAat0x491eb(%rip), %rsi
    00000609: 	movq	%rax, %rbp
    0000060c: 	movq	%rax, %rdi
    0000060f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1551
    00000614: 	movq	%rbx, %xmm0
    00000619: 	movq	%rbp, %rdi
    0000061c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1564
    00000621: 	movl	$0x2, %edx
    00000626: 	leaq	DATAat0x491f4(%rip), %rsi
    0000062d: 	movq	%rax, %rdi
    00000630: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1584
    00000635: 	movl	0x58(%rsp), %eax
    00000639: 	movl	%eax, iterations(%rip)
    0000063f: 	movq	0x78(%rsp), %rax
    00000644: 	subq	%fs:0x28, %rax
    0000064d: 	jne	.Ltmp1144 # Offset: 1613
    0000064f: 	addq	$0x88, %rsp
    00000656: 	popq	%rbx
    00000657: 	popq	%rbp
    00000658: 	popq	%r12
    0000065a: 	popq	%r13
    0000065c: 	popq	%r14
    0000065e: 	popq	%r15
    00000660: 	retq # Offset: 1632
.Ltmp1124:
    00000661: 	movl	$0x0, 0x4(%rsp)
    00000669: 	xorl	%r13d, %r13d
    0000066c: 	xorl	%r12d, %r12d
    0000066f: 	jmp	.Ltmp1137 # Offset: 1647
.Ltmp1144:
    00000674: 	callq	__stack_chk_fail@PLT # Offset: 1652
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil21jacobi_sor2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x240a0
  Size        : 0x8bf
  MaxSize     : 0x8c0
  Offset      : 0x240a0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil21jacobi_sor2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	imull	%ebp, %ebx
    0000001d: 	subq	$0x98, %rsp
    00000024: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002c: 	movl	%edx, 0x58(%rsp)
    00000030: 	movl	%ebp, %edx
    00000032: 	movl	%ecx, 0x5c(%rsp)
    00000036: 	leaq	0x70(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x14(%rsp)
    00000040: 	movq	%r9, 0x60(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x88(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	movaps	%xmm0, 0x70(%rsp)
    0000005d: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 93
    00000062: 	movl	%eax, 0x6c(%rsp)
    00000066: 	testl	%ebx, %ebx
    00000068: 	jle	.Ltmp1145 # Offset: 104
    0000006a: 	movslq	%ebx, %rdx
    0000006d: 	movq	%r14, %rsi
    00000070: 	movq	%r15, %rdi
    00000073: 	shlq	$0x2, %rdx
    00000077: 	callq	memmove@PLT # Offset: 119
.Ltmp1145:
    0000007c: 	movl	iterations(%rip), %eax
    00000082: 	movl	$0x2710, iterations(%rip)
    0000008c: 	movl	%eax, 0x68(%rsp)
    00000090: 	callq	clock@PLT # Offset: 144
    00000095: 	movq	%rax, start_time(%rip)
    0000009c: 	movl	iterations(%rip), %eax
    000000a2: 	testl	%eax, %eax
    000000a4: 	jle	.Ltmp1146 # Offset: 164
    000000aa: 	movl	0x58(%rsp), %eax
    000000ae: 	movl	0x5c(%rsp), %esi
    000000b2: 	movslq	%ebx, %rbx
    000000b5: 	pxor	%xmm2, %xmm2
    000000b9: 	movq	%rbx, 0x30(%rsp)
    000000be: 	subl	$0x1, %eax
    000000c1: 	movl	$0x0, 0x50(%rsp)
    000000c9: 	movl	%eax, 0x10(%rsp)
    000000cd: 	leal	-0x4(%rsi), %eax
    000000d0: 	movl	%eax, 0x28(%rsp)
    000000d4: 	movl	0x14(%rsp), %eax
    000000d8: 	addl	%eax, %eax
    000000da: 	movl	%eax, 0x54(%rsp)
    000000de: 	leal	-0x6(%rsi), %eax
    000000e1: 	shrl	$0x2, %eax
    000000e4: 	movl	%eax, %edx
    000000e6: 	leal	0x5(,%rax,4), %eax
    000000ed: 	movl	%eax, 0x2c(%rsp)
    000000f1: 	leaq	-0x1(%rbx), %rax
    000000f5: 	leaq	(,%rdx,4), %rcx
    000000fd: 	movq	%rax, 0x48(%rsp)
    00000102: 	movq	%rbx, %rax
    00000105: 	andq	$-0x4, %rbx
    00000109: 	shrq	$0x2, %rax
    0000010d: 	movq	%rcx, 0x20(%rsp)
    00000112: 	shlq	$0x4, %rax
    00000116: 	movq	%rbx, 0x38(%rsp)
    0000011b: 	movq	%rax, 0x40(%rsp)
    00000120: 	leal	-0x1(%rsi), %eax
    00000123: 	movl	%eax, 0xc(%rsp)
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1162:
    00000130: 	cmpl	$0x1, 0x10(%rsp)
    00000135: 	jle	.Ltmp1147 # Offset: 309
    0000013b: 	leaq	0x10(%r14), %rax
    0000013f: 	movl	0x54(%rsp), %r13d
    00000144: 	movl	0x14(%rsp), %ebp
    00000148: 	xorl	%r12d, %r12d
    0000014b: 	movl	$0x1, 0x8(%rsp)
    00000153: 	movq	%rax, 0x18(%rsp)
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1151:
    00000160: 	addl	$0x1, 0x8(%rsp)
    00000165: 	cmpl	$0x1, 0x28(%rsp)
    0000016a: 	movl	$0x1, %eax
    0000016f: 	jle	.Ltmp1148 # Offset: 367
    00000175: 	movslq	%ebp, %rdx
    00000178: 	movslq	%r12d, %rcx
    0000017b: 	movq	0x18(%rsp), %rbx
    00000180: 	leaq	(,%rdx,4), %rax
    00000188: 	leaq	(%r14,%rcx,4), %rsi
    0000018c: 	movslq	%r13d, %rcx
    0000018f: 	addq	0x20(%rsp), %rdx
    00000194: 	leaq	(%r15,%rax), %r9
    00000198: 	leaq	(%r14,%rcx,4), %rcx
    0000019c: 	addq	%r14, %rax
    0000019f: 	leaq	(%rbx,%rdx,4), %rbx
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1149:
    000001a8: 	movslq	0x4(%rsi), %rdx
    000001ac: 	movslq	(%rax), %r11
    000001af: 	movslq	0x8(%rax), %rdi
    000001b3: 	movslq	0xc(%rsi), %r8
    000001b7: 	addq	%rdx, %r11
    000001ba: 	movslq	0x4(%rax), %r10
    000001be: 	movslq	0x8(%rsi), %rdx
    000001c2: 	addq	%rdi, %r11
    000001c5: 	addq	%r8, %rdi
    000001c8: 	movslq	0x10(%rax), %r8
    000001cc: 	movdqu	0x4(%r9), %xmm7
    000001d2: 	addq	%rdx, %r10
    000001d5: 	movslq	0xc(%rax), %rdx
    000001d9: 	addq	%rdi, %r8
    000001dc: 	movslq	0x10(%rsi), %rdi
    000001e0: 	addq	%rdx, %r10
    000001e3: 	addq	%rdi, %rdx
    000001e6: 	movslq	0x14(%rax), %rdi
    000001ea: 	addq	%rdx, %rdi
    000001ed: 	movslq	0x4(%rcx), %rdx
    000001f1: 	addq	%r11, %rdx
    000001f4: 	leaq	0x5(%rdx), %r11
    000001f8: 	addq	$0x2, %rdx
    000001fc: 	cmovnsq	%rdx, %r11
    00000200: 	movslq	0x8(%rcx), %rdx
    00000204: 	addq	%r10, %rdx
    00000207: 	sarq	$0x2, %r11
    0000020b: 	leaq	0x5(%rdx), %r10
    0000020f: 	addq	$0x2, %rdx
    00000213: 	movq	%r11, %xmm1
    00000218: 	cmovsq	%r10, %rdx
    0000021c: 	sarq	$0x2, %rdx
    00000220: 	movq	%rdx, %xmm5
    00000225: 	movslq	0xc(%rcx), %rdx
    00000229: 	punpcklqdq	%xmm5, %xmm1
    0000022d: 	addq	%r8, %rdx
    00000230: 	leaq	0x5(%rdx), %r8
    00000234: 	addq	$0x2, %rdx
    00000238: 	cmovsq	%r8, %rdx
    0000023c: 	sarq	$0x2, %rdx
    00000240: 	movq	%rdx, %xmm0
    00000245: 	movslq	0x10(%rcx), %rdx
    00000249: 	addq	%rdi, %rdx
    0000024c: 	leaq	0x5(%rdx), %rdi
    00000250: 	addq	$0x2, %rdx
    00000254: 	cmovsq	%rdi, %rdx
    00000258: 	addq	$0x10, %rax
    0000025c: 	addq	$0x10, %r9
    00000260: 	addq	$0x10, %rsi
    00000264: 	addq	$0x10, %rcx
    00000268: 	sarq	$0x2, %rdx
    0000026c: 	movq	%rdx, %xmm6
    00000271: 	punpcklqdq	%xmm6, %xmm0
    00000275: 	shufps	$0x88, %xmm0, %xmm1
    00000279: 	psubd	%xmm7, %xmm1
    0000027d: 	movdqa	%xmm1, %xmm0
    00000281: 	pslld	$0x3, %xmm0
    00000286: 	psubd	%xmm1, %xmm0
    0000028a: 	pslld	$0x4, %xmm0
    0000028f: 	paddd	%xmm1, %xmm0
    00000293: 	psrad	$0x6, %xmm0
    00000298: 	paddd	%xmm7, %xmm0
    0000029c: 	movups	%xmm0, -0xc(%r9)
    000002a1: 	cmpq	%rbx, %rax
    000002a4: 	jne	.Ltmp1149 # Offset: 676
    000002aa: 	movl	0x2c(%rsp), %eax
.Ltmp1148:
    000002ae: 	cmpl	0xc(%rsp), %eax
    000002b2: 	jge	.Ltmp1150 # Offset: 690
    000002b8: 	leal	(%r12,%rax), %edx
    000002bc: 	leal	(%rbp,%rax), %r8d
    000002c1: 	movl	0xc(%rsp), %ebx
    000002c5: 	movslq	%edx, %rdx
    000002c8: 	movslq	%r8d, %r8
    000002cb: 	movslq	(%r14,%rdx,4), %rcx
    000002cf: 	leal	-0x1(%rax,%rbp), %edx
    000002d3: 	leaq	(%r15,%r8,4), %r9
    000002d7: 	movslq	%edx, %rdx
    000002da: 	movslq	(%r14,%rdx,4), %rdi
    000002de: 	addq	%rcx, %rdi
    000002e1: 	leal	0x1(%rax), %ecx
    000002e4: 	leal	(%rbp,%rcx), %edx
    000002e8: 	movslq	%edx, %rdx
    000002eb: 	shlq	$0x2, %rdx
    000002ef: 	leaq	(%r14,%rdx), %r10
    000002f3: 	movslq	(%r10), %rsi
    000002f6: 	addq	%rdi, %rsi
    000002f9: 	leal	(%r13,%rax), %edi
    000002fe: 	movslq	%edi, %rdi
    00000301: 	movslq	(%r14,%rdi,4), %rdi
    00000305: 	addq	%rsi, %rdi
    00000308: 	leaq	0x5(%rdi), %rsi
    0000030c: 	addq	$0x2, %rdi
    00000310: 	cmovnsq	%rdi, %rsi
    00000314: 	sarq	$0x2, %rsi
    00000318: 	subl	(%r9), %esi
    0000031b: 	imull	$0x71, %esi, %esi
    0000031e: 	sarl	$0x6, %esi
    00000321: 	addl	(%r9), %esi
    00000324: 	movl	%esi, (%r9)
    00000327: 	cmpl	%ebx, %ecx
    00000329: 	jge	.Ltmp1150 # Offset: 809
    0000032f: 	leal	(%r12,%rcx), %esi
    00000333: 	movslq	(%r14,%r8,4), %r9
    00000337: 	leal	0x2(%rax), %edi
    0000033a: 	addl	%r13d, %ecx
    0000033d: 	movslq	%esi, %rsi
    00000340: 	movslq	%ecx, %rcx
    00000343: 	addq	%r15, %rdx
    00000346: 	movslq	(%r14,%rsi,4), %rsi
    0000034a: 	movslq	(%r14,%rcx,4), %rcx
    0000034e: 	addq	%rsi, %r9
    00000351: 	leal	(%rbp,%rdi), %esi
    00000355: 	movslq	%esi, %rsi
    00000358: 	shlq	$0x2, %rsi
    0000035c: 	leaq	(%r14,%rsi), %r11
    00000360: 	movslq	(%r11), %r8
    00000363: 	addq	%r9, %r8
    00000366: 	addq	%rcx, %r8
    00000369: 	leaq	0x5(%r8), %rcx
    0000036d: 	addq	$0x2, %r8
    00000371: 	cmovnsq	%r8, %rcx
    00000375: 	sarq	$0x2, %rcx
    00000379: 	subl	(%rdx), %ecx
    0000037b: 	imull	$0x71, %ecx, %ecx
    0000037e: 	sarl	$0x6, %ecx
    00000381: 	addl	(%rdx), %ecx
    00000383: 	movl	%ecx, (%rdx)
    00000385: 	cmpl	%edi, %ebx
    00000387: 	jle	.Ltmp1150 # Offset: 903
    0000038d: 	leal	(%r12,%rdi), %edx
    00000391: 	movslq	(%r10), %r8
    00000394: 	addl	%r13d, %edi
    00000397: 	addq	%r15, %rsi
    0000039a: 	movslq	%edx, %rdx
    0000039d: 	movslq	%edi, %rdi
    000003a0: 	movslq	(%r14,%rdx,4), %rdx
    000003a4: 	movslq	(%r14,%rdi,4), %rdi
    000003a8: 	addq	%rdx, %r8
    000003ab: 	leal	0x3(%rax), %edx
    000003ae: 	leal	(%rbp,%rdx), %ecx
    000003b2: 	movslq	%ecx, %rcx
    000003b5: 	leaq	(,%rcx,4), %r9
    000003bd: 	movslq	(%r14,%rcx,4), %rcx
    000003c1: 	addq	%r8, %rcx
    000003c4: 	addq	%rcx, %rdi
    000003c7: 	leaq	0x5(%rdi), %rcx
    000003cb: 	addq	$0x2, %rdi
    000003cf: 	cmovnsq	%rdi, %rcx
    000003d3: 	sarq	$0x2, %rcx
    000003d7: 	subl	(%rsi), %ecx
    000003d9: 	imull	$0x71, %ecx, %ecx
    000003dc: 	sarl	$0x6, %ecx
    000003df: 	addl	(%rsi), %ecx
    000003e1: 	movl	%ecx, (%rsi)
    000003e3: 	cmpl	%edx, %ebx
    000003e5: 	jle	.Ltmp1150 # Offset: 997
    000003e7: 	leal	(%r12,%rdx), %ecx
    000003eb: 	leal	0x4(%rax,%rbp), %eax
    000003ef: 	movslq	(%r11), %rsi
    000003f2: 	addl	%r13d, %edx
    000003f5: 	movslq	%ecx, %rcx
    000003f8: 	cltq
    000003fa: 	movslq	%edx, %rdx
    000003fd: 	addq	%r15, %r9
    00000400: 	movslq	(%r14,%rcx,4), %rcx
    00000404: 	movslq	(%r14,%rax,4), %rax
    00000408: 	movslq	(%r14,%rdx,4), %rdx
    0000040c: 	addq	%rcx, %rsi
    0000040f: 	addq	%rsi, %rax
    00000412: 	addq	%rax, %rdx
    00000415: 	leaq	0x5(%rdx), %rax
    00000419: 	addq	$0x2, %rdx
    0000041d: 	cmovnsq	%rdx, %rax
    00000421: 	sarq	$0x2, %rax
    00000425: 	subl	(%r9), %eax
    00000428: 	imull	$0x71, %eax, %eax
    0000042b: 	sarl	$0x6, %eax
    0000042e: 	addl	(%r9), %eax
    00000431: 	movl	%eax, (%r9)
.Ltmp1150:
    00000434: 	movl	0x14(%rsp), %eax
    00000438: 	movl	0x8(%rsp), %ebx
    0000043c: 	addl	%eax, %r12d
    0000043f: 	addl	%eax, %ebp
    00000441: 	addl	%eax, %r13d
    00000444: 	cmpl	%ebx, 0x10(%rsp)
    00000448: 	jne	.Ltmp1151 # Offset: 1096
.Ltmp1147:
    0000044e: 	cmpq	$0x0, 0x30(%rsp)
    00000454: 	je	.Ltmp1152 # Offset: 1108
    0000045a: 	cmpq	$0x2, 0x48(%rsp)
    00000460: 	jbe	.Ltmp1153 # Offset: 1120
    00000466: 	movq	0x40(%rsp), %rdx
    0000046b: 	xorl	%eax, %eax
    0000046d: 	pxor	%xmm3, %xmm3
    00000471: 	nopl	(%rax) # Size: 7
.Ltmp1154:
    00000478: 	movdqu	(%r15,%rax), %xmm5
    0000047e: 	movdqu	(%r14,%rax), %xmm4
    00000484: 	movdqa	%xmm2, %xmm0
    00000488: 	movdqu	(%r14,%rax), %xmm6
    0000048e: 	addq	$0x10, %rax
    00000492: 	psubd	%xmm5, %xmm4
    00000496: 	movdqa	%xmm5, %xmm1
    0000049a: 	pcmpgtd	%xmm4, %xmm0
    0000049e: 	psubd	%xmm6, %xmm1
    000004a2: 	pand	%xmm0, %xmm1
    000004a6: 	pandn	%xmm4, %xmm0
    000004aa: 	movdqa	%xmm2, %xmm4
    000004ae: 	por	%xmm1, %xmm0
    000004b2: 	pcmpgtd	%xmm0, %xmm4
    000004b6: 	movdqa	%xmm0, %xmm1
    000004ba: 	punpckldq	%xmm4, %xmm1
    000004be: 	punpckhdq	%xmm4, %xmm0
    000004c2: 	paddq	%xmm1, %xmm3
    000004c6: 	paddq	%xmm0, %xmm3
    000004ca: 	cmpq	%rdx, %rax
    000004cd: 	jne	.Ltmp1154 # Offset: 1229
    000004cf: 	movdqa	%xmm3, %xmm0
    000004d3: 	movq	0x38(%rsp), %rax
    000004d8: 	psrldq	$0x8, %xmm0
    000004dd: 	paddq	%xmm0, %xmm3
    000004e1: 	movq	%rax, %rdx
    000004e4: 	movq	%xmm3, %rbp
    000004e9: 	cmpq	%rax, 0x30(%rsp)
    000004ee: 	je	.Ltmp1155 # Offset: 1262
.Ltmp1165:
    000004f0: 	movl	(%r15,%rdx,4), %esi
    000004f4: 	movl	(%r14,%rdx,4), %eax
    000004f8: 	leaq	(,%rdx,4), %rcx
    00000500: 	movq	0x30(%rsp), %rbx
    00000505: 	movl	%esi, %edi
    00000507: 	subl	%eax, %edi
    00000509: 	subl	%esi, %eax
    0000050b: 	cmovsl	%edi, %eax
    0000050e: 	cltq
    00000510: 	addq	%rax, %rbp
    00000513: 	leaq	0x1(%rdx), %rax
    00000517: 	cmpq	%rax, %rbx
    0000051a: 	jbe	.Ltmp1156 # Offset: 1306
    0000051c: 	movl	0x4(%r15,%rcx), %esi
    00000521: 	movl	0x4(%r14,%rcx), %eax
    00000526: 	movl	%esi, %edi
    00000528: 	subl	%eax, %edi
    0000052a: 	subl	%esi, %eax
    0000052c: 	cmovsl	%edi, %eax
    0000052f: 	addq	$0x2, %rdx
    00000533: 	cltq
    00000535: 	addq	%rax, %rbp
    00000538: 	cmpq	%rdx, %rbx
    0000053b: 	jbe	.Ltmp1156 # Offset: 1339
    0000053d: 	movl	0x8(%r15,%rcx), %edx
    00000542: 	movl	0x8(%r14,%rcx), %eax
    00000547: 	movl	%edx, %ecx
    00000549: 	subl	%eax, %ecx
    0000054b: 	subl	%edx, %eax
    0000054d: 	cmovsl	%ecx, %eax
    00000550: 	cltq
    00000552: 	addq	%rax, %rbp
.Ltmp1156:
    00000555: 	cmpq	$0x2, 0x48(%rsp)
    0000055b: 	jbe	.Ltmp1157 # Offset: 1371
.Ltmp1155:
    00000561: 	movq	0x40(%rsp), %rdx
    00000566: 	xorl	%eax, %eax
    00000568: 	pxor	%xmm3, %xmm3
    0000056c: 	nopl	(%rax) # Size: 4
.Ltmp1158:
    00000570: 	movdqu	(%r15,%rax), %xmm7
    00000576: 	movdqu	(%r14,%rax), %xmm4
    0000057c: 	movdqa	%xmm2, %xmm0
    00000580: 	movdqu	(%r14,%rax), %xmm5
    00000586: 	addq	$0x10, %rax
    0000058a: 	psubd	%xmm7, %xmm4
    0000058e: 	movdqa	%xmm7, %xmm1
    00000592: 	pcmpgtd	%xmm4, %xmm0
    00000596: 	psubd	%xmm5, %xmm1
    0000059a: 	pand	%xmm0, %xmm1
    0000059e: 	pandn	%xmm4, %xmm0
    000005a2: 	por	%xmm1, %xmm0
    000005a6: 	movdqa	%xmm0, %xmm1
    000005aa: 	pcmpgtd	%xmm3, %xmm1
    000005ae: 	pand	%xmm1, %xmm0
    000005b2: 	pandn	%xmm3, %xmm1
    000005b6: 	movdqa	%xmm1, %xmm3
    000005ba: 	por	%xmm0, %xmm3
    000005be: 	cmpq	%rdx, %rax
    000005c1: 	jne	.Ltmp1158 # Offset: 1473
    000005c3: 	movdqa	%xmm3, %xmm1
    000005c7: 	movq	0x38(%rsp), %rax
    000005cc: 	psrldq	$0x8, %xmm1
    000005d1: 	movdqa	%xmm1, %xmm0
    000005d5: 	movq	%rax, %rdx
    000005d8: 	pcmpgtd	%xmm3, %xmm0
    000005dc: 	pand	%xmm0, %xmm1
    000005e0: 	pandn	%xmm3, %xmm0
    000005e4: 	por	%xmm1, %xmm0
    000005e8: 	movdqa	%xmm0, %xmm3
    000005ec: 	psrldq	$0x4, %xmm3
    000005f1: 	movdqa	%xmm3, %xmm1
    000005f5: 	pcmpgtd	%xmm0, %xmm1
    000005f9: 	pand	%xmm1, %xmm3
    000005fd: 	pandn	%xmm0, %xmm1
    00000601: 	por	%xmm3, %xmm1
    00000605: 	movd	%xmm1, %r12d
    0000060a: 	cmpq	%rax, 0x30(%rsp)
    0000060f: 	je	.Ltmp1159 # Offset: 1551
.Ltmp1164:
    00000611: 	movl	(%r15,%rdx,4), %esi
    00000615: 	movl	(%r14,%rdx,4), %eax
    00000619: 	leaq	(,%rdx,4), %rcx
    00000621: 	movq	0x30(%rsp), %rbx
    00000626: 	movl	%esi, %edi
    00000628: 	subl	%eax, %edi
    0000062a: 	subl	%esi, %eax
    0000062c: 	cmovsl	%edi, %eax
    0000062f: 	cmpl	%eax, %r12d
    00000632: 	cmovll	%eax, %r12d
    00000636: 	leaq	0x1(%rdx), %rax
    0000063a: 	cmpq	%rax, %rbx
    0000063d: 	jbe	.Ltmp1159 # Offset: 1597
    0000063f: 	movl	0x4(%r15,%rcx), %esi
    00000644: 	movl	0x4(%r14,%rcx), %eax
    00000649: 	movl	%esi, %edi
    0000064b: 	subl	%eax, %edi
    0000064d: 	subl	%esi, %eax
    0000064f: 	cmovsl	%edi, %eax
    00000652: 	cmpl	%eax, %r12d
    00000655: 	cmovll	%eax, %r12d
    00000659: 	addq	$0x2, %rdx
    0000065d: 	cmpq	%rdx, %rbx
    00000660: 	jbe	.Ltmp1159 # Offset: 1632
    00000662: 	movl	0x8(%r15,%rcx), %edx
    00000667: 	movl	0x8(%r14,%rcx), %eax
    0000066c: 	movl	%edx, %ecx
    0000066e: 	subl	%eax, %ecx
    00000670: 	subl	%edx, %eax
    00000672: 	cmovsl	%ecx, %eax
    00000675: 	cmpl	%eax, %r12d
    00000678: 	cmovll	%eax, %r12d
.Ltmp1159:
    0000067c: 	movl	0x50(%rsp), %eax
    00000680: 	cmpl	%eax, 0xd0(%rsp)
    00000687: 	jge	.Ltmp1160 # Offset: 1671
    00000689: 	testl	%r12d, %r12d
    0000068c: 	jle	.Ltmp1161 # Offset: 1676
    0000068e: 	cmpq	$0x9, %rbp
    00000692: 	jle	.Ltmp1161 # Offset: 1682
.Ltmp1160:
    00000694: 	addl	$0x1, 0x50(%rsp)
    00000699: 	movl	0x50(%rsp), %ebx
    0000069d: 	movq	%r15, %rax
    000006a0: 	movq	%r14, %r15
    000006a3: 	cmpl	%ebx, iterations(%rip)
    000006a9: 	jle	.Ltmp1161 # Offset: 1705
    000006ab: 	movq	%rax, %r14
    000006ae: 	jmp	.Ltmp1162 # Offset: 1710
.Ltmp1152:
    000006b3: 	movl	0x50(%rsp), %eax
    000006b7: 	cmpl	%eax, 0xd0(%rsp)
    000006be: 	jl	.Ltmp1163 # Offset: 1726
    000006c0: 	xorl	%ebp, %ebp
    000006c2: 	xorl	%r12d, %r12d
    000006c5: 	jmp	.Ltmp1160 # Offset: 1733
.Ltmp1157:
    000006c7: 	xorl	%r12d, %r12d
    000006ca: 	xorl	%edx, %edx
    000006cc: 	jmp	.Ltmp1164 # Offset: 1740
.Ltmp1153:
    000006d1: 	xorl	%ebp, %ebp
    000006d3: 	xorl	%edx, %edx
    000006d5: 	jmp	.Ltmp1165 # Offset: 1749
.Ltmp1163:
    000006da: 	xorl	%r12d, %r12d
    000006dd: 	xorl	%ebp, %ebp
.Ltmp1161:
    000006df: 	callq	clock@PLT # Offset: 1759
    000006e4: 	movl	0x58(%rsp), %esi
    000006e8: 	pxor	%xmm0, %xmm0
    000006ec: 	movl	0x6c(%rsp), %r13d
    000006f1: 	movq	%rax, end_time(%rip)
    000006f8: 	subq	start_time(%rip), %rax
    000006ff: 	cvtsi2sd	%rax, %xmm0
    00000704: 	movl	%esi, %eax
    00000706: 	divsd	DATAat0x49520(%rip), %xmm0
    0000070e: 	movq	%xmm0, %rbx
    00000713: 	shrl	$0x1f, %eax
    00000716: 	addl	%esi, %eax
    00000718: 	movl	0x5c(%rsp), %esi
    0000071c: 	sarl	%eax
    0000071e: 	movl	%esi, %edx
    00000720: 	imull	%esi, %eax
    00000723: 	shrl	$0x1f, %edx
    00000726: 	addl	%esi, %edx
    00000728: 	sarl	%edx
    0000072a: 	addl	%edx, %eax
    0000072c: 	cltq
    0000072e: 	subl	(%r15,%rax,4), %r13d
    00000732: 	movl	0x50(%rsp), %eax
    00000736: 	cmpl	%eax, iterations(%rip)
    0000073c: 	jg	.Ltmp1166 # Offset: 1852
    0000073e: 	cmpq	$0xa, %rbp
    00000742: 	jle	.Ltmp1166 # Offset: 1858
    00000744: 	cmpl	$0x1, %r12d
    00000748: 	jle	.Ltmp1166 # Offset: 1864
    0000074a: 	movq	0x60(%rsp), %rax
    0000074f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000756: 	movq	%r14, %rdi
    00000759: 	movq	0x8(%rax), %rdx
    0000075d: 	movq	(%rax), %rsi
    00000760: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1888
    00000765: 	movl	$0x11, %edx
    0000076a: 	leaq	DATAat0x49199(%rip), %rsi
    00000771: 	movq	%rax, %rdi
    00000774: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1908
    00000779: 	jmp	.Ltmp1167 # Offset: 1913
.Ltmp1166:
    0000077b: 	movq	0x60(%rsp), %rax
    00000780: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000787: 	movq	%r14, %rdi
    0000078a: 	movq	0x8(%rax), %rdx
    0000078e: 	movq	(%rax), %rsi
    00000791: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1937
    00000796: 	movl	$0xa, %edx
    0000079b: 	leaq	DATAat0x491ab(%rip), %rsi
    000007a2: 	movq	%rax, %rdi
    000007a5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1957
.Ltmp1167:
    000007aa: 	movl	$0x4, %edx
    000007af: 	leaq	DATAat0x491b6(%rip), %rsi
    000007b6: 	movq	%r14, %rdi
    000007b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1977
    000007be: 	movl	0x50(%rsp), %esi
    000007c2: 	movq	%r14, %rdi
    000007c5: 	callq	_ZNSolsEi@PLT # Offset: 1989
    000007ca: 	movl	$0xb, %edx
    000007cf: 	leaq	DATAat0x491bb(%rip), %rsi
    000007d6: 	movq	%rax, %rdi
    000007d9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2009
    000007de: 	movl	$0xa, %edx
    000007e3: 	leaq	DATAat0x491c7(%rip), %rsi
    000007ea: 	movq	%r14, %rdi
    000007ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2029
    000007f2: 	movq	%rbp, %rsi
    000007f5: 	movq	%r14, %rdi
    000007f8: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 2040
    000007fd: 	movl	$0x7, %edx
    00000802: 	leaq	DATAat0x491d2(%rip), %rsi
    00000809: 	movq	%rax, %rbp
    0000080c: 	movq	%rax, %rdi
    0000080f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2063
    00000814: 	movq	%rbp, %rdi
    00000817: 	movl	%r12d, %esi
    0000081a: 	callq	_ZNSolsEi@PLT # Offset: 2074
    0000081f: 	movl	$0x10, %edx
    00000824: 	leaq	DATAat0x491da(%rip), %rsi
    0000082b: 	movq	%rax, %rbp
    0000082e: 	movq	%rax, %rdi
    00000831: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2097
    00000836: 	movq	%rbp, %rdi
    00000839: 	movl	%r13d, %esi
    0000083c: 	callq	_ZNSolsEi@PLT # Offset: 2108
    00000841: 	movl	$0x8, %edx
    00000846: 	leaq	DATAat0x491eb(%rip), %rsi
    0000084d: 	movq	%rax, %rbp
    00000850: 	movq	%rax, %rdi
    00000853: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2131
    00000858: 	movq	%rbx, %xmm0
    0000085d: 	movq	%rbp, %rdi
    00000860: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2144
    00000865: 	movl	$0x2, %edx
    0000086a: 	leaq	DATAat0x491f4(%rip), %rsi
    00000871: 	movq	%rax, %rdi
    00000874: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2164
    00000879: 	movl	0x68(%rsp), %eax
    0000087d: 	movl	%eax, iterations(%rip)
    00000883: 	movq	0x88(%rsp), %rax
    0000088b: 	subq	%fs:0x28, %rax
    00000894: 	jne	.Ltmp1168 # Offset: 2196
    00000896: 	addq	$0x98, %rsp
    0000089d: 	popq	%rbx
    0000089e: 	popq	%rbp
    0000089f: 	popq	%r12
    000008a1: 	popq	%r13
    000008a3: 	popq	%r14
    000008a5: 	popq	%r15
    000008a7: 	retq # Offset: 2215
.Ltmp1146:
    000008a8: 	movl	$0x0, 0x50(%rsp)
    000008b0: 	xorl	%r12d, %r12d
    000008b3: 	xorl	%ebp, %ebp
    000008b5: 	jmp	.Ltmp1161 # Offset: 2229
.Ltmp1168:
    000008ba: 	callq	__stack_chk_fail@PLT # Offset: 2234
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil21jacobi_sor2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x24960
  Size        : 0x8ba
  MaxSize     : 0x8c0
  Offset      : 0x24960
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%r8d, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%ecx, %r13d
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%edx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movl	%ebp, %esi
    0000001b: 	movq	%rdi, %rbx
    0000001e: 	subq	$0x98, %rsp
    00000025: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002d: 	movl	%edx, 0x58(%rsp)
    00000031: 	movl	%r13d, %edx
    00000034: 	movl	%ecx, 0x5c(%rsp)
    00000038: 	leaq	0x70(%rsp), %rcx
    0000003d: 	movq	%r9, 0x60(%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0x88(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x70(%rsp)
    0000005a: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 90
    0000005f: 	movl	%ebp, %esi
    00000061: 	imull	%r13d, %esi
    00000065: 	movl	%eax, 0x6c(%rsp)
    00000069: 	movl	%esi, %ebp
    0000006b: 	testl	%esi, %esi
    0000006d: 	jle	.Ltmp1169 # Offset: 109
    0000006f: 	movslq	%esi, %rdx
    00000072: 	movq	%r15, %rdi
    00000075: 	movq	%rbx, %rsi
    00000078: 	shlq	$0x2, %rdx
    0000007c: 	callq	memmove@PLT # Offset: 124
.Ltmp1169:
    00000081: 	movl	iterations(%rip), %eax
    00000087: 	movl	$0x2710, iterations(%rip)
    00000091: 	movl	%eax, 0x68(%rsp)
    00000095: 	callq	clock@PLT # Offset: 149
    0000009a: 	movq	%rax, start_time(%rip)
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	testl	%eax, %eax
    000000a9: 	jle	.Ltmp1170 # Offset: 169
    000000af: 	movl	0x58(%rsp), %eax
    000000b3: 	movl	0x5c(%rsp), %ecx
    000000b7: 	movslq	%ebp, %rsi
    000000ba: 	pxor	%xmm2, %xmm2
    000000be: 	movq	%rsi, 0x30(%rsp)
    000000c3: 	subl	$0x1, %eax
    000000c6: 	movl	$0x0, 0x50(%rsp)
    000000ce: 	movl	%eax, 0x14(%rsp)
    000000d2: 	leal	-0x4(%rcx), %eax
    000000d5: 	movl	%eax, 0x28(%rsp)
    000000d9: 	leal	(%r14,%r14), %eax
    000000dd: 	movl	%eax, 0x54(%rsp)
    000000e1: 	leal	-0x6(%rcx), %eax
    000000e4: 	shrl	$0x2, %eax
    000000e7: 	movl	%eax, %edx
    000000e9: 	leal	0x5(,%rax,4), %eax
    000000f0: 	movl	%eax, 0x2c(%rsp)
    000000f4: 	leaq	-0x1(%rsi), %rax
    000000f8: 	leaq	(,%rdx,4), %rdi
    00000100: 	movq	%rax, 0x48(%rsp)
    00000105: 	movq	%rsi, %rax
    00000108: 	andq	$-0x4, %rsi
    0000010c: 	shrq	$0x2, %rax
    00000110: 	movq	%rdi, 0x20(%rsp)
    00000115: 	shlq	$0x4, %rax
    00000119: 	movq	%rsi, 0x38(%rsp)
    0000011e: 	movq	%rax, 0x40(%rsp)
    00000123: 	leal	-0x1(%rcx), %eax
    00000126: 	movl	%eax, 0x4(%rsp)
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1186:
    00000130: 	cmpl	$0x1, 0x14(%rsp)
    00000135: 	jle	.Ltmp1171 # Offset: 309
    0000013b: 	leaq	0x10(%rbx), %rax
    0000013f: 	movl	0x54(%rsp), %r13d
    00000144: 	movl	%r14d, %ebp
    00000147: 	xorl	%r12d, %r12d
    0000014a: 	movl	$0x1, 0x10(%rsp)
    00000152: 	movq	%rax, 0x18(%rsp)
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1175:
    00000160: 	addl	$0x1, 0x10(%rsp)
    00000165: 	cmpl	$0x1, 0x28(%rsp)
    0000016a: 	movl	$0x1, %eax
    0000016f: 	jle	.Ltmp1172 # Offset: 367
    00000175: 	movslq	%ebp, %rdx
    00000178: 	movslq	%r12d, %rcx
    0000017b: 	movq	0x18(%rsp), %rdi
    00000180: 	movq	%rbx, 0x8(%rsp)
    00000185: 	leaq	(,%rdx,4), %rax
    0000018d: 	leaq	(%rbx,%rcx,4), %rsi
    00000191: 	movslq	%r13d, %rcx
    00000194: 	addq	0x20(%rsp), %rdx
    00000199: 	leaq	(%r15,%rax), %r8
    0000019d: 	leaq	(%rbx,%rcx,4), %rcx
    000001a1: 	addq	%rbx, %rax
    000001a4: 	leaq	(%rdi,%rdx,4), %r11
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1173:
    000001b0: 	movslq	(%rax), %r10
    000001b3: 	movslq	0x4(%rsi), %rdx
    000001b7: 	movslq	0x8(%rax), %r9
    000001bb: 	movslq	0x4(%rax), %rbx
    000001bf: 	addq	%r10, %rdx
    000001c2: 	movslq	0x4(%rcx), %r10
    000001c6: 	movslq	0xc(%rax), %rdi
    000001ca: 	addq	%r9, %rdx
    000001cd: 	movdqu	0x4(%r8), %xmm7
    000001d3: 	addq	%r10, %rdx
    000001d6: 	leaq	0x5(%rdx), %r10
    000001da: 	addq	$0x2, %rdx
    000001de: 	cmovnsq	%rdx, %r10
    000001e2: 	movslq	0x8(%rsi), %rdx
    000001e6: 	addq	%rbx, %rdx
    000001e9: 	sarq	$0x2, %r10
    000001ed: 	leaq	(%rdx,%rdi), %rbx
    000001f1: 	movslq	0x8(%rcx), %rdx
    000001f5: 	movq	%r10, %xmm1
    000001fa: 	addq	%rbx, %rdx
    000001fd: 	leaq	0x5(%rdx), %rbx
    00000201: 	addq	$0x2, %rdx
    00000205: 	cmovsq	%rbx, %rdx
    00000209: 	sarq	$0x2, %rdx
    0000020d: 	movq	%rdx, %xmm5
    00000212: 	movslq	0xc(%rsi), %rdx
    00000216: 	punpcklqdq	%xmm5, %xmm1
    0000021a: 	addq	%r9, %rdx
    0000021d: 	movslq	0x10(%rax), %r9
    00000221: 	addq	%r9, %rdx
    00000224: 	movslq	0xc(%rcx), %r9
    00000228: 	addq	%r9, %rdx
    0000022b: 	leaq	0x5(%rdx), %r9
    0000022f: 	addq	$0x2, %rdx
    00000233: 	cmovsq	%r9, %rdx
    00000237: 	sarq	$0x2, %rdx
    0000023b: 	movq	%rdx, %xmm0
    00000240: 	movslq	0x10(%rsi), %rdx
    00000244: 	addq	%rdi, %rdx
    00000247: 	movslq	0x14(%rax), %rdi
    0000024b: 	addq	%rdi, %rdx
    0000024e: 	movslq	0x10(%rcx), %rdi
    00000252: 	addq	%rdi, %rdx
    00000255: 	leaq	0x5(%rdx), %rdi
    00000259: 	addq	$0x2, %rdx
    0000025d: 	cmovsq	%rdi, %rdx
    00000261: 	addq	$0x10, %rax
    00000265: 	addq	$0x10, %r8
    00000269: 	addq	$0x10, %rsi
    0000026d: 	addq	$0x10, %rcx
    00000271: 	sarq	$0x2, %rdx
    00000275: 	movq	%rdx, %xmm6
    0000027a: 	punpcklqdq	%xmm6, %xmm0
    0000027e: 	shufps	$0x88, %xmm0, %xmm1
    00000282: 	psubd	%xmm7, %xmm1
    00000286: 	movdqa	%xmm1, %xmm0
    0000028a: 	pslld	$0x3, %xmm0
    0000028f: 	psubd	%xmm1, %xmm0
    00000293: 	pslld	$0x4, %xmm0
    00000298: 	paddd	%xmm1, %xmm0
    0000029c: 	psrad	$0x6, %xmm0
    000002a1: 	paddd	%xmm7, %xmm0
    000002a5: 	movups	%xmm0, -0xc(%r8)
    000002aa: 	cmpq	%r11, %rax
    000002ad: 	jne	.Ltmp1173 # Offset: 685
    000002b3: 	movq	0x8(%rsp), %rbx
    000002b8: 	movl	0x2c(%rsp), %eax
.Ltmp1172:
    000002bc: 	cmpl	0x4(%rsp), %eax
    000002c0: 	jge	.Ltmp1174 # Offset: 704
    000002c6: 	leal	(%r12,%rax), %edx
    000002ca: 	leal	(%rbp,%rax), %r8d
    000002cf: 	movslq	%edx, %rdx
    000002d2: 	movslq	%r8d, %r8
    000002d5: 	movslq	(%rbx,%rdx,4), %rcx
    000002d9: 	leal	-0x1(%rax,%rbp), %edx
    000002dd: 	leaq	(%r15,%r8,4), %r9
    000002e1: 	movslq	%edx, %rdx
    000002e4: 	movslq	(%rbx,%rdx,4), %rdi
    000002e8: 	addq	%rcx, %rdi
    000002eb: 	leal	0x1(%rax), %ecx
    000002ee: 	leal	(%rbp,%rcx), %edx
    000002f2: 	movslq	%edx, %rdx
    000002f5: 	shlq	$0x2, %rdx
    000002f9: 	leaq	(%rbx,%rdx), %r10
    000002fd: 	movslq	(%r10), %rsi
    00000300: 	addq	%rdi, %rsi
    00000303: 	leal	(%r13,%rax), %edi
    00000308: 	movslq	%edi, %rdi
    0000030b: 	movslq	(%rbx,%rdi,4), %rdi
    0000030f: 	addq	%rsi, %rdi
    00000312: 	leaq	0x5(%rdi), %rsi
    00000316: 	addq	$0x2, %rdi
    0000031a: 	cmovnsq	%rdi, %rsi
    0000031e: 	sarq	$0x2, %rsi
    00000322: 	subl	(%r9), %esi
    00000325: 	imull	$0x71, %esi, %esi
    00000328: 	sarl	$0x6, %esi
    0000032b: 	addl	(%r9), %esi
    0000032e: 	movl	%esi, (%r9)
    00000331: 	cmpl	0x4(%rsp), %ecx
    00000335: 	jge	.Ltmp1174 # Offset: 821
    0000033b: 	leal	(%r12,%rcx), %esi
    0000033f: 	movslq	(%rbx,%r8,4), %r9
    00000343: 	leal	0x2(%rax), %edi
    00000346: 	addl	%r13d, %ecx
    00000349: 	movslq	%esi, %rsi
    0000034c: 	movslq	%ecx, %rcx
    0000034f: 	addq	%r15, %rdx
    00000352: 	movslq	(%rbx,%rsi,4), %rsi
    00000356: 	movslq	(%rbx,%rcx,4), %rcx
    0000035a: 	addq	%rsi, %r9
    0000035d: 	leal	(%rbp,%rdi), %esi
    00000361: 	movslq	%esi, %rsi
    00000364: 	shlq	$0x2, %rsi
    00000368: 	leaq	(%rbx,%rsi), %r11
    0000036c: 	movslq	(%r11), %r8
    0000036f: 	addq	%r9, %r8
    00000372: 	addq	%rcx, %r8
    00000375: 	leaq	0x5(%r8), %rcx
    00000379: 	addq	$0x2, %r8
    0000037d: 	cmovnsq	%r8, %rcx
    00000381: 	sarq	$0x2, %rcx
    00000385: 	subl	(%rdx), %ecx
    00000387: 	imull	$0x71, %ecx, %ecx
    0000038a: 	sarl	$0x6, %ecx
    0000038d: 	addl	(%rdx), %ecx
    0000038f: 	movl	%ecx, (%rdx)
    00000391: 	cmpl	%edi, 0x4(%rsp)
    00000395: 	jle	.Ltmp1174 # Offset: 917
    0000039b: 	leal	(%r12,%rdi), %edx
    0000039f: 	movslq	(%r10), %r8
    000003a2: 	addl	%r13d, %edi
    000003a5: 	addq	%r15, %rsi
    000003a8: 	movslq	%edx, %rdx
    000003ab: 	movslq	%edi, %rdi
    000003ae: 	movslq	(%rbx,%rdx,4), %rdx
    000003b2: 	movslq	(%rbx,%rdi,4), %rdi
    000003b6: 	addq	%rdx, %r8
    000003b9: 	leal	0x3(%rax), %edx
    000003bc: 	leal	(%rbp,%rdx), %ecx
    000003c0: 	movslq	%ecx, %rcx
    000003c3: 	leaq	(,%rcx,4), %r9
    000003cb: 	movslq	(%rbx,%rcx,4), %rcx
    000003cf: 	addq	%r8, %rcx
    000003d2: 	addq	%rcx, %rdi
    000003d5: 	leaq	0x5(%rdi), %rcx
    000003d9: 	addq	$0x2, %rdi
    000003dd: 	cmovnsq	%rdi, %rcx
    000003e1: 	sarq	$0x2, %rcx
    000003e5: 	subl	(%rsi), %ecx
    000003e7: 	imull	$0x71, %ecx, %ecx
    000003ea: 	sarl	$0x6, %ecx
    000003ed: 	addl	(%rsi), %ecx
    000003ef: 	movl	%ecx, (%rsi)
    000003f1: 	cmpl	%edx, 0x4(%rsp)
    000003f5: 	jle	.Ltmp1174 # Offset: 1013
    000003f7: 	leal	(%r12,%rdx), %ecx
    000003fb: 	leal	0x4(%rax,%rbp), %eax
    000003ff: 	movslq	(%r11), %rsi
    00000402: 	addl	%r13d, %edx
    00000405: 	movslq	%ecx, %rcx
    00000408: 	cltq
    0000040a: 	movslq	%edx, %rdx
    0000040d: 	addq	%r15, %r9
    00000410: 	movslq	(%rbx,%rcx,4), %rcx
    00000414: 	movslq	(%rbx,%rax,4), %rax
    00000418: 	movslq	(%rbx,%rdx,4), %rdx
    0000041c: 	addq	%rcx, %rsi
    0000041f: 	addq	%rsi, %rax
    00000422: 	addq	%rax, %rdx
    00000425: 	leaq	0x5(%rdx), %rax
    00000429: 	addq	$0x2, %rdx
    0000042d: 	cmovnsq	%rdx, %rax
    00000431: 	sarq	$0x2, %rax
    00000435: 	subl	(%r9), %eax
    00000438: 	imull	$0x71, %eax, %eax
    0000043b: 	sarl	$0x6, %eax
    0000043e: 	addl	(%r9), %eax
    00000441: 	movl	%eax, (%r9)
.Ltmp1174:
    00000444: 	movl	0x10(%rsp), %esi
    00000448: 	addl	%r14d, %r12d
    0000044b: 	addl	%r14d, %ebp
    0000044e: 	addl	%r14d, %r13d
    00000451: 	cmpl	%esi, 0x14(%rsp)
    00000455: 	jne	.Ltmp1175 # Offset: 1109
.Ltmp1171:
    0000045b: 	cmpq	$0x0, 0x30(%rsp)
    00000461: 	je	.Ltmp1176 # Offset: 1121
    00000467: 	cmpq	$0x2, 0x48(%rsp)
    0000046d: 	jbe	.Ltmp1177 # Offset: 1133
    00000473: 	movq	0x40(%rsp), %rdx
    00000478: 	xorl	%eax, %eax
    0000047a: 	pxor	%xmm3, %xmm3
    0000047e: 	nop # Size: 2
.Ltmp1178:
    00000480: 	movdqu	(%r15,%rax), %xmm5
    00000486: 	movdqu	(%rbx,%rax), %xmm4
    0000048b: 	movdqa	%xmm2, %xmm0
    0000048f: 	movdqu	(%rbx,%rax), %xmm6
    00000494: 	addq	$0x10, %rax
    00000498: 	psubd	%xmm5, %xmm4
    0000049c: 	movdqa	%xmm5, %xmm1
    000004a0: 	pcmpgtd	%xmm4, %xmm0
    000004a4: 	psubd	%xmm6, %xmm1
    000004a8: 	pand	%xmm0, %xmm1
    000004ac: 	pandn	%xmm4, %xmm0
    000004b0: 	movdqa	%xmm2, %xmm4
    000004b4: 	por	%xmm1, %xmm0
    000004b8: 	pcmpgtd	%xmm0, %xmm4
    000004bc: 	movdqa	%xmm0, %xmm1
    000004c0: 	punpckldq	%xmm4, %xmm1
    000004c4: 	punpckhdq	%xmm4, %xmm0
    000004c8: 	paddq	%xmm1, %xmm3
    000004cc: 	paddq	%xmm0, %xmm3
    000004d0: 	cmpq	%rdx, %rax
    000004d3: 	jne	.Ltmp1178 # Offset: 1235
    000004d5: 	movdqa	%xmm3, %xmm0
    000004d9: 	movq	0x38(%rsp), %rax
    000004de: 	psrldq	$0x8, %xmm0
    000004e3: 	paddq	%xmm0, %xmm3
    000004e7: 	movq	%rax, %rdx
    000004ea: 	movq	%xmm3, %rbp
    000004ef: 	cmpq	%rax, 0x30(%rsp)
    000004f4: 	je	.Ltmp1179 # Offset: 1268
.Ltmp1189:
    000004f6: 	movl	(%r15,%rdx,4), %esi
    000004fa: 	movl	(%rbx,%rdx,4), %eax
    000004fd: 	leaq	(,%rdx,4), %rcx
    00000505: 	movq	0x30(%rsp), %r11
    0000050a: 	movl	%esi, %edi
    0000050c: 	subl	%eax, %edi
    0000050e: 	subl	%esi, %eax
    00000510: 	cmovsl	%edi, %eax
    00000513: 	cltq
    00000515: 	addq	%rax, %rbp
    00000518: 	leaq	0x1(%rdx), %rax
    0000051c: 	cmpq	%rax, %r11
    0000051f: 	jbe	.Ltmp1180 # Offset: 1311
    00000521: 	movl	0x4(%r15,%rcx), %esi
    00000526: 	movl	0x4(%rbx,%rcx), %eax
    0000052a: 	movl	%esi, %edi
    0000052c: 	subl	%eax, %edi
    0000052e: 	subl	%esi, %eax
    00000530: 	cmovsl	%edi, %eax
    00000533: 	addq	$0x2, %rdx
    00000537: 	cltq
    00000539: 	addq	%rax, %rbp
    0000053c: 	cmpq	%rdx, %r11
    0000053f: 	jbe	.Ltmp1180 # Offset: 1343
    00000541: 	movl	0x8(%r15,%rcx), %edx
    00000546: 	movl	0x8(%rbx,%rcx), %eax
    0000054a: 	movl	%edx, %ecx
    0000054c: 	subl	%eax, %ecx
    0000054e: 	subl	%edx, %eax
    00000550: 	cmovsl	%ecx, %eax
    00000553: 	cltq
    00000555: 	addq	%rax, %rbp
.Ltmp1180:
    00000558: 	cmpq	$0x2, 0x48(%rsp)
    0000055e: 	jbe	.Ltmp1181 # Offset: 1374
.Ltmp1179:
    00000564: 	movq	0x40(%rsp), %rdx
    00000569: 	xorl	%eax, %eax
    0000056b: 	pxor	%xmm3, %xmm3
    0000056f: 	nop # Size: 1
.Ltmp1182:
    00000570: 	movdqu	(%r15,%rax), %xmm7
    00000576: 	movdqu	(%rbx,%rax), %xmm4
    0000057b: 	movdqa	%xmm2, %xmm0
    0000057f: 	movdqu	(%rbx,%rax), %xmm5
    00000584: 	addq	$0x10, %rax
    00000588: 	psubd	%xmm7, %xmm4
    0000058c: 	movdqa	%xmm7, %xmm1
    00000590: 	pcmpgtd	%xmm4, %xmm0
    00000594: 	psubd	%xmm5, %xmm1
    00000598: 	pand	%xmm0, %xmm1
    0000059c: 	pandn	%xmm4, %xmm0
    000005a0: 	por	%xmm1, %xmm0
    000005a4: 	movdqa	%xmm0, %xmm1
    000005a8: 	pcmpgtd	%xmm3, %xmm1
    000005ac: 	pand	%xmm1, %xmm0
    000005b0: 	pandn	%xmm3, %xmm1
    000005b4: 	movdqa	%xmm1, %xmm3
    000005b8: 	por	%xmm0, %xmm3
    000005bc: 	cmpq	%rdx, %rax
    000005bf: 	jne	.Ltmp1182 # Offset: 1471
    000005c1: 	movdqa	%xmm3, %xmm1
    000005c5: 	movq	0x38(%rsp), %rax
    000005ca: 	psrldq	$0x8, %xmm1
    000005cf: 	movdqa	%xmm1, %xmm0
    000005d3: 	movq	%rax, %rdx
    000005d6: 	pcmpgtd	%xmm3, %xmm0
    000005da: 	pand	%xmm0, %xmm1
    000005de: 	pandn	%xmm3, %xmm0
    000005e2: 	por	%xmm1, %xmm0
    000005e6: 	movdqa	%xmm0, %xmm3
    000005ea: 	psrldq	$0x4, %xmm3
    000005ef: 	movdqa	%xmm3, %xmm1
    000005f3: 	pcmpgtd	%xmm0, %xmm1
    000005f7: 	pand	%xmm1, %xmm3
    000005fb: 	pandn	%xmm0, %xmm1
    000005ff: 	por	%xmm3, %xmm1
    00000603: 	movd	%xmm1, %r12d
    00000608: 	cmpq	%rax, 0x30(%rsp)
    0000060d: 	je	.Ltmp1183 # Offset: 1549
.Ltmp1188:
    0000060f: 	movl	(%r15,%rdx,4), %esi
    00000613: 	movl	(%rbx,%rdx,4), %eax
    00000616: 	leaq	(,%rdx,4), %rcx
    0000061e: 	movq	0x30(%rsp), %r11
    00000623: 	movl	%esi, %edi
    00000625: 	subl	%eax, %edi
    00000627: 	subl	%esi, %eax
    00000629: 	cmovsl	%edi, %eax
    0000062c: 	cmpl	%eax, %r12d
    0000062f: 	cmovll	%eax, %r12d
    00000633: 	leaq	0x1(%rdx), %rax
    00000637: 	cmpq	%rax, %r11
    0000063a: 	jbe	.Ltmp1183 # Offset: 1594
    0000063c: 	movl	0x4(%r15,%rcx), %esi
    00000641: 	movl	0x4(%rbx,%rcx), %eax
    00000645: 	movl	%esi, %edi
    00000647: 	subl	%eax, %edi
    00000649: 	subl	%esi, %eax
    0000064b: 	cmovsl	%edi, %eax
    0000064e: 	cmpl	%eax, %r12d
    00000651: 	cmovll	%eax, %r12d
    00000655: 	addq	$0x2, %rdx
    00000659: 	cmpq	%rdx, %r11
    0000065c: 	jbe	.Ltmp1183 # Offset: 1628
    0000065e: 	movl	0x8(%r15,%rcx), %edx
    00000663: 	movl	0x8(%rbx,%rcx), %eax
    00000667: 	movl	%edx, %ecx
    00000669: 	subl	%eax, %ecx
    0000066b: 	subl	%edx, %eax
    0000066d: 	cmovsl	%ecx, %eax
    00000670: 	cmpl	%eax, %r12d
    00000673: 	cmovll	%eax, %r12d
.Ltmp1183:
    00000677: 	movl	0x50(%rsp), %eax
    0000067b: 	cmpl	%eax, 0xd0(%rsp)
    00000682: 	jge	.Ltmp1184 # Offset: 1666
    00000684: 	testl	%r12d, %r12d
    00000687: 	jle	.Ltmp1185 # Offset: 1671
    00000689: 	cmpq	$0x9, %rbp
    0000068d: 	jle	.Ltmp1185 # Offset: 1677
.Ltmp1184:
    0000068f: 	addl	$0x1, 0x50(%rsp)
    00000694: 	movl	0x50(%rsp), %esi
    00000698: 	movq	%r15, %rax
    0000069b: 	movq	%rbx, %r15
    0000069e: 	cmpl	%esi, iterations(%rip)
    000006a4: 	jle	.Ltmp1185 # Offset: 1700
    000006a6: 	movq	%rax, %rbx
    000006a9: 	jmp	.Ltmp1186 # Offset: 1705
.Ltmp1176:
    000006ae: 	movl	0x50(%rsp), %eax
    000006b2: 	cmpl	%eax, 0xd0(%rsp)
    000006b9: 	jl	.Ltmp1187 # Offset: 1721
    000006bb: 	xorl	%ebp, %ebp
    000006bd: 	xorl	%r12d, %r12d
    000006c0: 	jmp	.Ltmp1184 # Offset: 1728
.Ltmp1181:
    000006c2: 	xorl	%r12d, %r12d
    000006c5: 	xorl	%edx, %edx
    000006c7: 	jmp	.Ltmp1188 # Offset: 1735
.Ltmp1177:
    000006cc: 	xorl	%ebp, %ebp
    000006ce: 	xorl	%edx, %edx
    000006d0: 	jmp	.Ltmp1189 # Offset: 1744
.Ltmp1187:
    000006d5: 	xorl	%r12d, %r12d
    000006d8: 	xorl	%ebp, %ebp
.Ltmp1185:
    000006da: 	callq	clock@PLT # Offset: 1754
    000006df: 	movl	0x58(%rsp), %esi
    000006e3: 	pxor	%xmm0, %xmm0
    000006e7: 	movl	0x6c(%rsp), %r13d
    000006ec: 	movq	%rax, end_time(%rip)
    000006f3: 	subq	start_time(%rip), %rax
    000006fa: 	cvtsi2sd	%rax, %xmm0
    000006ff: 	movl	%esi, %eax
    00000701: 	divsd	DATAat0x49520(%rip), %xmm0
    00000709: 	movq	%xmm0, %rbx
    0000070e: 	shrl	$0x1f, %eax
    00000711: 	addl	%esi, %eax
    00000713: 	movl	0x5c(%rsp), %esi
    00000717: 	sarl	%eax
    00000719: 	movl	%esi, %edx
    0000071b: 	imull	%esi, %eax
    0000071e: 	shrl	$0x1f, %edx
    00000721: 	addl	%esi, %edx
    00000723: 	sarl	%edx
    00000725: 	addl	%edx, %eax
    00000727: 	cltq
    00000729: 	subl	(%r15,%rax,4), %r13d
    0000072d: 	movl	0x50(%rsp), %eax
    00000731: 	cmpl	%eax, iterations(%rip)
    00000737: 	jg	.Ltmp1190 # Offset: 1847
    00000739: 	cmpq	$0xa, %rbp
    0000073d: 	jle	.Ltmp1190 # Offset: 1853
    0000073f: 	cmpl	$0x1, %r12d
    00000743: 	jle	.Ltmp1190 # Offset: 1859
    00000745: 	movq	0x60(%rsp), %rax
    0000074a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000751: 	movq	%r14, %rdi
    00000754: 	movq	0x8(%rax), %rdx
    00000758: 	movq	(%rax), %rsi
    0000075b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1883
    00000760: 	movl	$0x11, %edx
    00000765: 	leaq	DATAat0x49199(%rip), %rsi
    0000076c: 	movq	%rax, %rdi
    0000076f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1903
    00000774: 	jmp	.Ltmp1191 # Offset: 1908
.Ltmp1190:
    00000776: 	movq	0x60(%rsp), %rax
    0000077b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000782: 	movq	%r14, %rdi
    00000785: 	movq	0x8(%rax), %rdx
    00000789: 	movq	(%rax), %rsi
    0000078c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1932
    00000791: 	movl	$0xa, %edx
    00000796: 	leaq	DATAat0x491ab(%rip), %rsi
    0000079d: 	movq	%rax, %rdi
    000007a0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1952
.Ltmp1191:
    000007a5: 	movl	$0x4, %edx
    000007aa: 	leaq	DATAat0x491b6(%rip), %rsi
    000007b1: 	movq	%r14, %rdi
    000007b4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1972
    000007b9: 	movl	0x50(%rsp), %esi
    000007bd: 	movq	%r14, %rdi
    000007c0: 	callq	_ZNSolsEi@PLT # Offset: 1984
    000007c5: 	movl	$0xb, %edx
    000007ca: 	leaq	DATAat0x491bb(%rip), %rsi
    000007d1: 	movq	%rax, %rdi
    000007d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2004
    000007d9: 	movl	$0xa, %edx
    000007de: 	leaq	DATAat0x491c7(%rip), %rsi
    000007e5: 	movq	%r14, %rdi
    000007e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2024
    000007ed: 	movq	%rbp, %rsi
    000007f0: 	movq	%r14, %rdi
    000007f3: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 2035
    000007f8: 	movl	$0x7, %edx
    000007fd: 	leaq	DATAat0x491d2(%rip), %rsi
    00000804: 	movq	%rax, %rbp
    00000807: 	movq	%rax, %rdi
    0000080a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2058
    0000080f: 	movq	%rbp, %rdi
    00000812: 	movl	%r12d, %esi
    00000815: 	callq	_ZNSolsEi@PLT # Offset: 2069
    0000081a: 	movl	$0x10, %edx
    0000081f: 	leaq	DATAat0x491da(%rip), %rsi
    00000826: 	movq	%rax, %rbp
    00000829: 	movq	%rax, %rdi
    0000082c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2092
    00000831: 	movq	%rbp, %rdi
    00000834: 	movl	%r13d, %esi
    00000837: 	callq	_ZNSolsEi@PLT # Offset: 2103
    0000083c: 	movl	$0x8, %edx
    00000841: 	leaq	DATAat0x491eb(%rip), %rsi
    00000848: 	movq	%rax, %rbp
    0000084b: 	movq	%rax, %rdi
    0000084e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2126
    00000853: 	movq	%rbx, %xmm0
    00000858: 	movq	%rbp, %rdi
    0000085b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2139
    00000860: 	movl	$0x2, %edx
    00000865: 	leaq	DATAat0x491f4(%rip), %rsi
    0000086c: 	movq	%rax, %rdi
    0000086f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2159
    00000874: 	movl	0x68(%rsp), %eax
    00000878: 	movl	%eax, iterations(%rip)
    0000087e: 	movq	0x88(%rsp), %rax
    00000886: 	subq	%fs:0x28, %rax
    0000088f: 	jne	.Ltmp1192 # Offset: 2191
    00000891: 	addq	$0x98, %rsp
    00000898: 	popq	%rbx
    00000899: 	popq	%rbp
    0000089a: 	popq	%r12
    0000089c: 	popq	%r13
    0000089e: 	popq	%r14
    000008a0: 	popq	%r15
    000008a2: 	retq # Offset: 2210
.Ltmp1170:
    000008a3: 	movl	$0x0, 0x50(%rsp)
    000008ab: 	xorl	%r12d, %r12d
    000008ae: 	xorl	%ebp, %ebp
    000008b0: 	jmp	.Ltmp1185 # Offset: 2224
.Ltmp1192:
    000008b5: 	callq	__stack_chk_fail@PLT # Offset: 2229
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x25220
  Size        : 0x56e
  MaxSize     : 0x570
  Offset      : 0x25220
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r14d, %esi
    0000001d: 	imull	%r15d, %r14d
    00000021: 	subq	$0x58, %rsp
    00000025: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002d: 	movl	%edx, 0x14(%rsp)
    00000031: 	leaq	0x30(%rsp), %rcx
    00000036: 	movl	%r15d, %edx
    00000039: 	movl	%r14d, %ebp
    0000003c: 	movl	%r8d, 0x1c(%rsp)
    00000041: 	movq	%r9, 0x28(%rsp)
    00000046: 	movq	%fs:0x28, %rax
    0000004f: 	movq	%rax, 0x48(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	movaps	%xmm0, 0x30(%rsp)
    0000005b: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 91
    00000060: 	movl	%eax, 0x24(%rsp)
    00000064: 	testl	%r14d, %r14d
    00000067: 	jle	.Ltmp1193 # Offset: 103
    00000069: 	movslq	%r14d, %rdx
    0000006c: 	movq	%r12, %rsi
    0000006f: 	movq	%rbx, %rdi
    00000072: 	shlq	$0x2, %rdx
    00000076: 	callq	memmove@PLT # Offset: 118
.Ltmp1193:
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	movl	$0x2710, iterations(%rip)
    0000008b: 	movl	%eax, 0x20(%rsp)
    0000008f: 	callq	clock@PLT # Offset: 143
    00000094: 	movq	%rax, start_time(%rip)
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	testl	%eax, %eax
    000000a3: 	jle	.Ltmp1194 # Offset: 163
    000000a9: 	movslq	%ebp, %r10
    000000ac: 	movl	%r15d, 0x18(%rsp)
    000000b1: 	xorl	%r14d, %r14d
    000000b4: 	pxor	%xmm6, %xmm6
    000000b8: 	leaq	-0x1(%r10), %rax
    000000bc: 	movq	%r10, %r11
    000000bf: 	movq	%r10, %r15
    000000c2: 	movq	%rax, 0x8(%rsp)
    000000c7: 	movq	%r10, %rax
    000000ca: 	andq	$-0x4, %r11
    000000ce: 	shrq	$0x2, %rax
    000000d2: 	shlq	$0x4, %rax
    000000d6: 	movq	%rax, %rbp
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1205:
    000000e0: 	movl	0x1c(%rsp), %r8d
    000000e5: 	movl	0x18(%rsp), %ecx
    000000e9: 	movq	%rbx, %rsi
    000000ec: 	movq	%r12, %rdi
    000000ef: 	movl	0x14(%rsp), %edx
    000000f3: 	movq	%r11, (%rsp)
    000000f7: 	callq	"_ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/1" # Offset: 247
    000000fc: 	testq	%r15, %r15
    000000ff: 	movq	(%rsp), %r11
    00000103: 	je	.Ltmp1195 # Offset: 259
    00000109: 	xorl	%eax, %eax
    0000010b: 	cmpq	$0x2, 0x8(%rsp)
    00000111: 	jbe	.Ltmp1196 # Offset: 273
    00000117: 	pxor	%xmm2, %xmm2
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1197:
    00000120: 	movdqu	(%rbx,%rax), %xmm4
    00000125: 	movdqu	(%r12,%rax), %xmm3
    0000012b: 	movdqa	%xmm6, %xmm0
    0000012f: 	movdqu	(%r12,%rax), %xmm5
    00000135: 	addq	$0x10, %rax
    00000139: 	psubd	%xmm4, %xmm3
    0000013d: 	movdqa	%xmm4, %xmm1
    00000141: 	pcmpgtd	%xmm3, %xmm0
    00000145: 	psubd	%xmm5, %xmm1
    00000149: 	pand	%xmm0, %xmm1
    0000014d: 	pandn	%xmm3, %xmm0
    00000151: 	movdqa	%xmm6, %xmm3
    00000155: 	por	%xmm1, %xmm0
    00000159: 	pcmpgtd	%xmm0, %xmm3
    0000015d: 	movdqa	%xmm0, %xmm1
    00000161: 	punpckldq	%xmm3, %xmm1
    00000165: 	punpckhdq	%xmm3, %xmm0
    00000169: 	paddq	%xmm1, %xmm2
    0000016d: 	paddq	%xmm0, %xmm2
    00000171: 	cmpq	%rax, %rbp
    00000174: 	jne	.Ltmp1197 # Offset: 372
    00000176: 	movdqa	%xmm2, %xmm0
    0000017a: 	movq	%r11, %rcx
    0000017d: 	psrldq	$0x8, %xmm0
    00000182: 	paddq	%xmm0, %xmm2
    00000186: 	movq	%xmm2, %rax
    0000018b: 	cmpq	%r11, %r15
    0000018e: 	je	.Ltmp1198 # Offset: 398
.Ltmp1208:
    00000190: 	movl	(%rbx,%rcx,4), %edi
    00000193: 	movl	(%r12,%rcx,4), %edx
    00000197: 	leaq	(,%rcx,4), %rsi
    0000019f: 	movl	%edi, %r8d
    000001a2: 	subl	%edx, %r8d
    000001a5: 	subl	%edi, %edx
    000001a7: 	cmovsl	%r8d, %edx
    000001ab: 	movslq	%edx, %rdx
    000001ae: 	addq	%rdx, %rax
    000001b1: 	leaq	0x1(%rcx), %rdx
    000001b5: 	cmpq	%rdx, %r15
    000001b8: 	jbe	.Ltmp1199 # Offset: 440
    000001ba: 	movl	0x4(%rbx,%rsi), %edi
    000001be: 	movl	0x4(%r12,%rsi), %edx
    000001c3: 	movl	%edi, %r8d
    000001c6: 	subl	%edx, %r8d
    000001c9: 	subl	%edi, %edx
    000001cb: 	cmovsl	%r8d, %edx
    000001cf: 	addq	$0x2, %rcx
    000001d3: 	movslq	%edx, %rdx
    000001d6: 	addq	%rdx, %rax
    000001d9: 	cmpq	%rcx, %r15
    000001dc: 	jbe	.Ltmp1199 # Offset: 476
    000001de: 	movl	0x8(%rbx,%rsi), %ecx
    000001e2: 	movl	0x8(%r12,%rsi), %edx
    000001e7: 	movl	%ecx, %esi
    000001e9: 	subl	%edx, %esi
    000001eb: 	subl	%ecx, %edx
    000001ed: 	cmovsl	%esi, %edx
    000001f0: 	movslq	%edx, %rdx
    000001f3: 	addq	%rdx, %rax
.Ltmp1199:
    000001f6: 	cmpq	$0x2, 0x8(%rsp)
    000001fc: 	jbe	.Ltmp1200 # Offset: 508
.Ltmp1198:
    00000202: 	xorl	%edx, %edx
    00000204: 	pxor	%xmm2, %xmm2
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1201:
    00000210: 	movdqu	(%rbx,%rdx), %xmm7
    00000215: 	movdqu	(%r12,%rdx), %xmm3
    0000021b: 	movdqa	%xmm6, %xmm0
    0000021f: 	movdqu	(%r12,%rdx), %xmm4
    00000225: 	addq	$0x10, %rdx
    00000229: 	psubd	%xmm7, %xmm3
    0000022d: 	movdqa	%xmm7, %xmm1
    00000231: 	pcmpgtd	%xmm3, %xmm0
    00000235: 	psubd	%xmm4, %xmm1
    00000239: 	pand	%xmm0, %xmm1
    0000023d: 	pandn	%xmm3, %xmm0
    00000241: 	por	%xmm1, %xmm0
    00000245: 	movdqa	%xmm2, %xmm1
    00000249: 	pcmpgtd	%xmm0, %xmm1
    0000024d: 	pand	%xmm1, %xmm2
    00000251: 	pandn	%xmm0, %xmm1
    00000255: 	por	%xmm1, %xmm2
    00000259: 	cmpq	%rdx, %rbp
    0000025c: 	jne	.Ltmp1201 # Offset: 604
    0000025e: 	movdqa	%xmm2, %xmm1
    00000262: 	movq	%r11, %rcx
    00000265: 	psrldq	$0x8, %xmm1
    0000026a: 	movdqa	%xmm1, %xmm0
    0000026e: 	pcmpgtd	%xmm2, %xmm0
    00000272: 	pand	%xmm0, %xmm1
    00000276: 	pandn	%xmm2, %xmm0
    0000027a: 	por	%xmm1, %xmm0
    0000027e: 	movdqa	%xmm0, %xmm2
    00000282: 	psrldq	$0x4, %xmm2
    00000287: 	movdqa	%xmm2, %xmm1
    0000028b: 	pcmpgtd	%xmm0, %xmm1
    0000028f: 	pand	%xmm1, %xmm2
    00000293: 	pandn	%xmm0, %xmm1
    00000297: 	por	%xmm2, %xmm1
    0000029b: 	movd	%xmm1, %r13d
    000002a0: 	cmpq	%r11, %r15
    000002a3: 	je	.Ltmp1202 # Offset: 675
.Ltmp1207:
    000002a5: 	movl	(%rbx,%rcx,4), %edi
    000002a8: 	movl	(%r12,%rcx,4), %edx
    000002ac: 	leaq	(,%rcx,4), %rsi
    000002b4: 	movl	%edi, %r8d
    000002b7: 	subl	%edx, %r8d
    000002ba: 	subl	%edi, %edx
    000002bc: 	cmovsl	%r8d, %edx
    000002c0: 	cmpl	%edx, %r13d
    000002c3: 	cmovll	%edx, %r13d
    000002c7: 	leaq	0x1(%rcx), %rdx
    000002cb: 	cmpq	%rdx, %r15
    000002ce: 	jbe	.Ltmp1202 # Offset: 718
    000002d0: 	movl	0x4(%rbx,%rsi), %edi
    000002d4: 	movl	0x4(%r12,%rsi), %edx
    000002d9: 	movl	%edi, %r8d
    000002dc: 	subl	%edx, %r8d
    000002df: 	subl	%edi, %edx
    000002e1: 	cmovsl	%r8d, %edx
    000002e5: 	cmpl	%edx, %r13d
    000002e8: 	cmovll	%edx, %r13d
    000002ec: 	addq	$0x2, %rcx
    000002f0: 	cmpq	%r15, %rcx
    000002f3: 	jae	.Ltmp1202 # Offset: 755
    000002f5: 	movl	0x8(%rbx,%rsi), %ecx
    000002f9: 	movl	0x8(%r12,%rsi), %edx
    000002fe: 	movl	%ecx, %esi
    00000300: 	subl	%edx, %esi
    00000302: 	subl	%ecx, %edx
    00000304: 	cmovsl	%esi, %edx
    00000307: 	cmpl	%edx, %r13d
    0000030a: 	cmovll	%edx, %r13d
.Ltmp1202:
    0000030e: 	cmpl	%r14d, 0x90(%rsp)
    00000316: 	jge	.Ltmp1203 # Offset: 790
    00000318: 	testl	%r13d, %r13d
    0000031b: 	jle	.Ltmp1204 # Offset: 795
    00000321: 	cmpq	$0x9, %rax
    00000325: 	jle	.Ltmp1204 # Offset: 805
.Ltmp1203:
    0000032b: 	addl	$0x1, %r14d
    0000032f: 	cmpl	%r14d, iterations(%rip)
    00000336: 	movq	%rbx, %rdx
    00000339: 	movq	%r12, %rbx
    0000033c: 	jle	.Ltmp1204 # Offset: 828
    00000342: 	movq	%rdx, %r12
    00000345: 	jmp	.Ltmp1205 # Offset: 837
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1195:
    00000350: 	cmpl	%r14d, 0x90(%rsp)
    00000358: 	jl	.Ltmp1206 # Offset: 856
    0000035a: 	xorl	%eax, %eax
    0000035c: 	xorl	%r13d, %r13d
    0000035f: 	jmp	.Ltmp1203 # Offset: 863
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp1200:
    00000368: 	xorl	%r13d, %r13d
    0000036b: 	xorl	%ecx, %ecx
    0000036d: 	jmp	.Ltmp1207 # Offset: 877
.Ltmp1196:
    00000372: 	xorl	%ecx, %ecx
    00000374: 	jmp	.Ltmp1208 # Offset: 884
.Ltmp1206:
    00000379: 	movl	0x18(%rsp), %r15d
    0000037e: 	xorl	%r13d, %r13d
    00000381: 	xorl	%ebp, %ebp
.Ltmp1212:
    00000383: 	callq	clock@PLT # Offset: 899
    00000388: 	movl	0x14(%rsp), %edi
    0000038c: 	pxor	%xmm0, %xmm0
    00000390: 	movl	%r15d, %edx
    00000393: 	movq	%rax, end_time(%rip)
    0000039a: 	subq	start_time(%rip), %rax
    000003a1: 	shrl	$0x1f, %edx
    000003a4: 	cvtsi2sd	%rax, %xmm0
    000003a9: 	movl	%edi, %eax
    000003ab: 	addl	%r15d, %edx
    000003ae: 	divsd	DATAat0x49520(%rip), %xmm0
    000003b6: 	shrl	$0x1f, %eax
    000003b9: 	sarl	%edx
    000003bb: 	movq	%xmm0, %r12
    000003c0: 	addl	%edi, %eax
    000003c2: 	movl	0x24(%rsp), %edi
    000003c6: 	sarl	%eax
    000003c8: 	imull	%r15d, %eax
    000003cc: 	addl	%edx, %eax
    000003ce: 	cltq
    000003d0: 	subl	(%rbx,%rax,4), %edi
    000003d3: 	cmpl	%r14d, iterations(%rip)
    000003da: 	movl	%edi, %ebx
    000003dc: 	jg	.Ltmp1209 # Offset: 988
    000003e2: 	cmpq	$0xa, %rbp
    000003e6: 	jle	.Ltmp1209 # Offset: 998
    000003ec: 	cmpl	$0x1, %r13d
    000003f0: 	jle	.Ltmp1209 # Offset: 1008
    000003f6: 	movq	0x28(%rsp), %rax
    000003fb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000402: 	movq	%r15, %rdi
    00000405: 	movq	0x8(%rax), %rdx
    00000409: 	movq	(%rax), %rsi
    0000040c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1036
    00000411: 	movl	$0x11, %edx
    00000416: 	leaq	DATAat0x49199(%rip), %rsi
    0000041d: 	movq	%rax, %rdi
    00000420: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1056
.Ltmp1211:
    00000425: 	movl	$0x4, %edx
    0000042a: 	leaq	DATAat0x491b6(%rip), %rsi
    00000431: 	movq	%r15, %rdi
    00000434: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1076
    00000439: 	movl	%r14d, %esi
    0000043c: 	movq	%r15, %rdi
    0000043f: 	callq	_ZNSolsEi@PLT # Offset: 1087
    00000444: 	movl	$0xb, %edx
    00000449: 	leaq	DATAat0x491bb(%rip), %rsi
    00000450: 	movq	%rax, %rdi
    00000453: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1107
    00000458: 	movl	$0xa, %edx
    0000045d: 	leaq	DATAat0x491c7(%rip), %rsi
    00000464: 	movq	%r15, %rdi
    00000467: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1127
    0000046c: 	movq	%rbp, %rsi
    0000046f: 	movq	%r15, %rdi
    00000472: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1138
    00000477: 	movl	$0x7, %edx
    0000047c: 	leaq	DATAat0x491d2(%rip), %rsi
    00000483: 	movq	%rax, %rbp
    00000486: 	movq	%rax, %rdi
    00000489: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1161
    0000048e: 	movq	%rbp, %rdi
    00000491: 	movl	%r13d, %esi
    00000494: 	callq	_ZNSolsEi@PLT # Offset: 1172
    00000499: 	movl	$0x10, %edx
    0000049e: 	leaq	DATAat0x491da(%rip), %rsi
    000004a5: 	movq	%rax, %rbp
    000004a8: 	movq	%rax, %rdi
    000004ab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1195
    000004b0: 	movq	%rbp, %rdi
    000004b3: 	movl	%ebx, %esi
    000004b5: 	callq	_ZNSolsEi@PLT # Offset: 1205
    000004ba: 	movl	$0x8, %edx
    000004bf: 	leaq	DATAat0x491eb(%rip), %rsi
    000004c6: 	movq	%rax, %rbp
    000004c9: 	movq	%rax, %rdi
    000004cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1228
    000004d1: 	movq	%r12, %xmm0
    000004d6: 	movq	%rbp, %rdi
    000004d9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1241
    000004de: 	movl	$0x2, %edx
    000004e3: 	leaq	DATAat0x491f4(%rip), %rsi
    000004ea: 	movq	%rax, %rdi
    000004ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1261
    000004f2: 	movl	0x20(%rsp), %eax
    000004f6: 	movl	%eax, iterations(%rip)
    000004fc: 	movq	0x48(%rsp), %rax
    00000501: 	subq	%fs:0x28, %rax
    0000050a: 	jne	.Ltmp1210 # Offset: 1290
    0000050c: 	addq	$0x58, %rsp
    00000510: 	popq	%rbx
    00000511: 	popq	%rbp
    00000512: 	popq	%r12
    00000514: 	popq	%r13
    00000516: 	popq	%r14
    00000518: 	popq	%r15
    0000051a: 	retq # Offset: 1306
.Ltmp1209:
    0000051b: 	movq	0x28(%rsp), %rax
    00000520: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00000527: 	movq	%r15, %rdi
    0000052a: 	movq	0x8(%rax), %rdx
    0000052e: 	movq	(%rax), %rsi
    00000531: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1329
    00000536: 	movl	$0xa, %edx
    0000053b: 	leaq	DATAat0x491ab(%rip), %rsi
    00000542: 	movq	%rax, %rdi
    00000545: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1349
    0000054a: 	jmp	.Ltmp1211 # Offset: 1354
.Ltmp1204:
    0000054f: 	movl	0x18(%rsp), %r15d
    00000554: 	movq	%rax, %rbp
    00000557: 	jmp	.Ltmp1212 # Offset: 1367
.Ltmp1194:
    0000055c: 	xorl	%r14d, %r14d
    0000055f: 	xorl	%r13d, %r13d
    00000562: 	xorl	%ebp, %ebp
    00000564: 	jmp	.Ltmp1212 # Offset: 1380
.Ltmp1210:
    00000569: 	callq	__stack_chk_fail@PLT # Offset: 1385
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z13testLaplace2DIil19jacobi_sor2D_simpleIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x25790
  Size        : 0x2fd
  MaxSize     : 0x300
  Offset      : 0x25790
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIil19jacobi_sor2D_simpleIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%r13d, %edx
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r14d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x58, %rsp
    00000027: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002f: 	movq	%r9, 0x18(%rsp)
    00000034: 	leaq	0x30(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x48(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x30(%rsp)
    0000004e: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 78
    00000053: 	movl	%r14d, %eax
    00000056: 	imull	%r13d, %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1213 # Offset: 92
    0000005e: 	cltq
    00000060: 	movq	%rbx, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	leaq	(,%rax,4), %rdx
    0000006e: 	callq	memmove@PLT # Offset: 110
.Ltmp1213:
    00000073: 	callq	clock@PLT # Offset: 115
    00000078: 	movq	%rax, start_time(%rip)
    0000007f: 	movl	iterations(%rip), %eax
    00000085: 	testl	%eax, %eax
    00000087: 	jle	.Ltmp1214 # Offset: 135
    0000008d: 	subl	$0x1, %r14d
    00000091: 	leal	-0x1(%r13), %eax
    00000095: 	cmpl	$0x1, %r14d
    00000099: 	jle	.Ltmp1214 # Offset: 153
    0000009f: 	cmpl	$0x1, %eax
    000000a2: 	jle	.Ltmp1214 # Offset: 162
    000000a8: 	movslq	%r12d, %rdx
    000000ab: 	xorl	%r15d, %r15d
    000000ae: 	leaq	(,%rdx,4), %r11
    000000b6: 	movq	%r11, %rax
    000000b9: 	negq	%rax
    000000bc: 	movq	%rax, (%rsp)
    000000c0: 	leal	(%r12,%r12), %eax
    000000c4: 	cltq
    000000c6: 	shlq	$0x2, %rax
    000000ca: 	movq	%rax, 0x10(%rsp)
    000000cf: 	leal	-0x3(%r13), %eax
    000000d3: 	leaq	0x1(%rdx,%rax), %rax
    000000d8: 	shlq	$0x2, %rax
    000000dc: 	movq	%rax, 0x8(%rsp)
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1217:
    000000e8: 	movq	0x8(%rsp), %r8
    000000ed: 	movq	(%rsp), %r10
    000000f1: 	xorl	%r9d, %r9d
    000000f4: 	movl	$0x1, %r12d
    000000fa: 	movq	0x10(%rsp), %r13
    000000ff: 	nop # Size: 1
.Ltmp1216:
    00000100: 	movq	%r9, %rax
    00000103: 	leaq	(%r13,%r10), %rcx
    00000108: 	addq	%r11, %r9
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	leaq	(%rax,%r10), %rsi
    00000113: 	movq	%r9, %rdx
    00000116: 	addq	%rbx, %rcx
    00000119: 	addq	%rbx, %rsi
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1215:
    00000120: 	movslq	0x4(%rdx,%rsi), %rax
    00000125: 	movslq	(%rbx,%rdx), %rdi
    00000129: 	addq	%rax, %rdi
    0000012c: 	movslq	0x8(%rbx,%rdx), %rax
    00000131: 	addq	%rdi, %rax
    00000134: 	movslq	0x4(%rdx,%rcx), %rdi
    00000139: 	addq	%rax, %rdi
    0000013c: 	leaq	0x5(%rdi), %rax
    00000140: 	addq	$0x2, %rdi
    00000144: 	cmovnsq	%rdi, %rax
    00000148: 	sarq	$0x2, %rax
    0000014c: 	subl	0x4(%rbp,%rdx), %eax
    00000150: 	imull	$0x71, %eax, %eax
    00000153: 	sarl	$0x6, %eax
    00000156: 	addl	0x4(%rbp,%rdx), %eax
    0000015a: 	movl	%eax, 0x4(%rbp,%rdx)
    0000015e: 	addq	$0x4, %rdx
    00000162: 	cmpq	%rdx, %r8
    00000165: 	jne	.Ltmp1215 # Offset: 357
    00000167: 	subq	%r11, %r10
    0000016a: 	addq	%r11, %r13
    0000016d: 	addq	%r11, %r8
    00000170: 	cmpl	%r12d, %r14d
    00000173: 	jne	.Ltmp1216 # Offset: 371
    00000175: 	addl	$0x1, %r15d
    00000179: 	cmpl	iterations(%rip), %r15d
    00000180: 	movq	%rbp, %rax
    00000183: 	movq	%rbx, %rbp
    00000186: 	jge	.Ltmp1214 # Offset: 390
    00000188: 	movq	%rax, %rbx
    0000018b: 	jmp	.Ltmp1217 # Offset: 395
.Ltmp1214:
    00000190: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000197: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019e: 	subq	$0x20, %rax
    000001a2: 	cmpq	%rax, %rbx
    000001a5: 	je	.Ltmp1218 # Offset: 421
    000001ab: 	movq	0x18(%rsp), %rax
    000001b0: 	leaq	0x10(%rbx), %rdi
    000001b4: 	movq	%rdi, (%rbx)
    000001b7: 	movq	(%rax), %rbp
    000001ba: 	movq	0x8(%rax), %r12
    000001be: 	movq	%rbp, %rax
    000001c1: 	addq	%r12, %rax
    000001c4: 	je	.Ltmp1219 # Offset: 452
    000001c6: 	testq	%rbp, %rbp
    000001c9: 	je	.Ltmp1220 # Offset: 457
.Ltmp1219:
    000001cf: 	movq	%r12, 0x28(%rsp)
    000001d4: 	cmpq	$0xf, %r12
    000001d8: 	ja	.Ltmp1221 # Offset: 472
    000001de: 	cmpq	$0x1, %r12
    000001e2: 	jne	.Ltmp1222 # Offset: 482
    000001e8: 	movzbl	(%rbp), %eax
    000001ec: 	movb	%al, 0x10(%rbx)
.Ltmp1225:
    000001ef: 	movq	%r12, 0x8(%rbx)
    000001f3: 	movb	$0x0, (%rdi,%r12)
    000001f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000206: 	addq	$0x20, %rax
    0000020a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000211: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000218: 	je	.Ltmp1223 # Offset: 536
.Ltmp1226:
    0000021e: 	movq	-0x20(%rax), %rbp
    00000222: 	callq	clock@PLT # Offset: 546
    00000227: 	movq	%rax, end_time(%rip)
    0000022e: 	movq	0x48(%rsp), %rdx
    00000233: 	subq	%fs:0x28, %rdx
    0000023c: 	jne	.Ltmp1224 # Offset: 572
    00000242: 	subq	start_time(%rip), %rax
    00000249: 	pxor	%xmm0, %xmm0
    0000024d: 	movq	%rbp, %rdi
    00000250: 	cvtsi2sd	%rax, %xmm0
    00000255: 	divsd	DATAat0x49520(%rip), %xmm0
    0000025d: 	addq	$0x58, %rsp
    00000261: 	popq	%rbx
    00000262: 	popq	%rbp
    00000263: 	popq	%r12
    00000265: 	popq	%r13
    00000267: 	popq	%r14
    00000269: 	popq	%r15
    0000026b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 619
.Ltmp1221:
    00000270: 	movq	%rbx, %rdi
    00000273: 	leaq	0x28(%rsp), %rsi
    00000278: 	xorl	%edx, %edx
    0000027a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 634
    0000027f: 	movq	%rax, (%rbx)
    00000282: 	movq	%rax, %rdi
    00000285: 	movq	0x28(%rsp), %rax
    0000028a: 	movq	%rax, 0x10(%rbx)
.Ltmp1227:
    0000028e: 	movq	%r12, %rdx
    00000291: 	movq	%rbp, %rsi
    00000294: 	callq	memcpy@PLT # Offset: 660
    00000299: 	movq	0x28(%rsp), %r12
    0000029e: 	movq	(%rbx), %rdi
    000002a1: 	jmp	.Ltmp1225 # Offset: 673
.Ltmp1218:
    000002a6: 	movq	0x18(%rsp), %rsi
    000002ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002b2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 690
    000002b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002be: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002cc: 	jne	.Ltmp1226 # Offset: 716
.Ltmp1223:
    000002d2: 	movq	-0x8(%rdx), %rax
    000002d6: 	addq	$0x200, %rax
    000002dc: 	jmp	.Ltmp1226 # Offset: 732
.Ltmp1222:
    000002e1: 	testq	%r12, %r12
    000002e4: 	je	.Ltmp1225 # Offset: 740
    000002ea: 	jmp	.Ltmp1227 # Offset: 746
.Ltmp1224:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
.Ltmp1220:
    000002f1: 	leaq	DATAat0x49008(%rip), %rdi
    000002f8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIil19jacobi_sor2D_simpleIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIil20jacobi_sor2D_swappedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x25a90
  Size        : 0x2dd
  MaxSize     : 0x2e0
  Offset      : 0x25a90
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIil20jacobi_sor2D_swappedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%edx, %r13d
    00000010: 	movl	%r15d, %edx
    00000013: 	pushq	%r12
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r13d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x58, %rsp
    00000027: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002f: 	movq	%r9, 0x18(%rsp)
    00000034: 	leaq	0x30(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x48(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x30(%rsp)
    0000004e: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 78
    00000053: 	movl	%r13d, %eax
    00000056: 	imull	%r15d, %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1228 # Offset: 92
    0000005e: 	cltq
    00000060: 	movq	%rbx, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	leaq	(,%rax,4), %rdx
    0000006e: 	callq	memmove@PLT # Offset: 110
.Ltmp1228:
    00000073: 	callq	clock@PLT # Offset: 115
    00000078: 	movq	%rax, start_time(%rip)
    0000007f: 	movl	iterations(%rip), %eax
    00000085: 	testl	%eax, %eax
    00000087: 	jle	.Ltmp1229 # Offset: 135
    0000008d: 	subl	$0x1, %r15d
    00000091: 	leal	-0x1(%r13), %r10d
    00000095: 	cmpl	$0x1, %r15d
    00000099: 	jle	.Ltmp1229 # Offset: 153
    0000009f: 	cmpl	$0x1, %r10d
    000000a3: 	jle	.Ltmp1229 # Offset: 163
    000000a9: 	movslq	%r12d, %r9
    000000ac: 	movl	$0x0, 0xc(%rsp)
    000000b4: 	leaq	0x4(,%r9,4), %rax
    000000bc: 	movq	%r9, %r11
    000000bf: 	leaq	(,%r9,4), %r8
    000000c7: 	movq	%rax, 0x10(%rsp)
    000000cc: 	negq	%r11
    000000cf: 	shlq	$0x2, %r11
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1232:
    000000d8: 	movq	0x10(%rsp), %rax
    000000dd: 	leaq	(%rbx,%r8), %r13
    000000e1: 	movl	$0x1, %r12d
    000000e7: 	leaq	(%rbp,%rax), %r14
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1231:
    000000f0: 	addl	$0x1, %r12d
    000000f4: 	movq	%r13, %rdx
    000000f7: 	movq	%r14, %rcx
    000000fa: 	movl	$0x1, %esi
    000000ff: 	nop # Size: 1
.Ltmp1230:
    00000100: 	movslq	0x4(%rdx,%r11), %rax
    00000105: 	movslq	(%rdx), %rdi
    00000108: 	addl	$0x1, %esi
    0000010b: 	addq	%rax, %rdi
    0000010e: 	movslq	0x8(%rdx), %rax
    00000112: 	addq	%rdi, %rax
    00000115: 	movslq	0x4(%rdx,%r9,4), %rdi
    0000011a: 	addq	%rax, %rdi
    0000011d: 	leaq	0x5(%rdi), %rax
    00000121: 	addq	$0x2, %rdi
    00000125: 	cmovnsq	%rdi, %rax
    00000129: 	addq	%r8, %rdx
    0000012c: 	sarq	$0x2, %rax
    00000130: 	subl	(%rcx), %eax
    00000132: 	imull	$0x71, %eax, %eax
    00000135: 	sarl	$0x6, %eax
    00000138: 	addl	(%rcx), %eax
    0000013a: 	movl	%eax, (%rcx)
    0000013c: 	addq	%r8, %rcx
    0000013f: 	cmpl	%r10d, %esi
    00000142: 	jne	.Ltmp1230 # Offset: 322
    00000144: 	addq	$0x4, %r14
    00000148: 	addq	$0x4, %r13
    0000014c: 	cmpl	%r12d, %r15d
    0000014f: 	jne	.Ltmp1231 # Offset: 335
    00000151: 	addl	$0x1, 0xc(%rsp)
    00000156: 	movl	0xc(%rsp), %esi
    0000015a: 	movq	%rbp, %rax
    0000015d: 	movq	%rbx, %rbp
    00000160: 	cmpl	iterations(%rip), %esi
    00000166: 	jge	.Ltmp1229 # Offset: 358
    00000168: 	movq	%rax, %rbx
    0000016b: 	jmp	.Ltmp1232 # Offset: 363
.Ltmp1229:
    00000170: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000177: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000017e: 	subq	$0x20, %rax
    00000182: 	cmpq	%rax, %rbx
    00000185: 	je	.Ltmp1233 # Offset: 389
    0000018b: 	movq	0x18(%rsp), %rax
    00000190: 	leaq	0x10(%rbx), %rdi
    00000194: 	movq	%rdi, (%rbx)
    00000197: 	movq	(%rax), %rbp
    0000019a: 	movq	0x8(%rax), %r12
    0000019e: 	movq	%rbp, %rax
    000001a1: 	addq	%r12, %rax
    000001a4: 	je	.Ltmp1234 # Offset: 420
    000001a6: 	testq	%rbp, %rbp
    000001a9: 	je	.Ltmp1235 # Offset: 425
.Ltmp1234:
    000001af: 	movq	%r12, 0x28(%rsp)
    000001b4: 	cmpq	$0xf, %r12
    000001b8: 	ja	.Ltmp1236 # Offset: 440
    000001be: 	cmpq	$0x1, %r12
    000001c2: 	jne	.Ltmp1237 # Offset: 450
    000001c8: 	movzbl	(%rbp), %eax
    000001cc: 	movb	%al, 0x10(%rbx)
.Ltmp1240:
    000001cf: 	movq	%r12, 0x8(%rbx)
    000001d3: 	movb	$0x0, (%rdi,%r12)
    000001d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e6: 	addq	$0x20, %rax
    000001ea: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001f8: 	je	.Ltmp1238 # Offset: 504
.Ltmp1241:
    000001fe: 	movq	-0x20(%rax), %rbp
    00000202: 	callq	clock@PLT # Offset: 514
    00000207: 	movq	%rax, end_time(%rip)
    0000020e: 	movq	0x48(%rsp), %rdx
    00000213: 	subq	%fs:0x28, %rdx
    0000021c: 	jne	.Ltmp1239 # Offset: 540
    00000222: 	subq	start_time(%rip), %rax
    00000229: 	pxor	%xmm0, %xmm0
    0000022d: 	movq	%rbp, %rdi
    00000230: 	cvtsi2sd	%rax, %xmm0
    00000235: 	divsd	DATAat0x49520(%rip), %xmm0
    0000023d: 	addq	$0x58, %rsp
    00000241: 	popq	%rbx
    00000242: 	popq	%rbp
    00000243: 	popq	%r12
    00000245: 	popq	%r13
    00000247: 	popq	%r14
    00000249: 	popq	%r15
    0000024b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 587
.Ltmp1236:
    00000250: 	movq	%rbx, %rdi
    00000253: 	leaq	0x28(%rsp), %rsi
    00000258: 	xorl	%edx, %edx
    0000025a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 602
    0000025f: 	movq	%rax, (%rbx)
    00000262: 	movq	%rax, %rdi
    00000265: 	movq	0x28(%rsp), %rax
    0000026a: 	movq	%rax, 0x10(%rbx)
.Ltmp1242:
    0000026e: 	movq	%r12, %rdx
    00000271: 	movq	%rbp, %rsi
    00000274: 	callq	memcpy@PLT # Offset: 628
    00000279: 	movq	0x28(%rsp), %r12
    0000027e: 	movq	(%rbx), %rdi
    00000281: 	jmp	.Ltmp1240 # Offset: 641
.Ltmp1233:
    00000286: 	movq	0x18(%rsp), %rsi
    0000028b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000292: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 658
    00000297: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000029e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ac: 	jne	.Ltmp1241 # Offset: 684
.Ltmp1238:
    000002b2: 	movq	-0x8(%rdx), %rax
    000002b6: 	addq	$0x200, %rax
    000002bc: 	jmp	.Ltmp1241 # Offset: 700
.Ltmp1237:
    000002c1: 	testq	%r12, %r12
    000002c4: 	je	.Ltmp1240 # Offset: 708
    000002ca: 	jmp	.Ltmp1242 # Offset: 714
.Ltmp1239:
    000002cc: 	callq	__stack_chk_fail@PLT # Offset: 716
.Ltmp1235:
    000002d1: 	leaq	DATAat0x49008(%rip), %rdi
    000002d8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 728
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIil20jacobi_sor2D_swappedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x25d70
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0x25d70
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%r13d, %edx
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r14d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x68, %rsp
    00000027: 	movdqa	DATAat0x49470(%rip), %xmm0
    0000002f: 	movq	%r9, 0x28(%rsp)
    00000034: 	leaq	0x40(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x58(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x40(%rsp)
    0000004e: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 78
    00000053: 	movl	%r14d, %eax
    00000056: 	imull	%r13d, %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1243 # Offset: 92
    0000005e: 	cltq
    00000060: 	movq	%rbx, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	leaq	(,%rax,4), %rdx
    0000006e: 	callq	memmove@PLT # Offset: 110
.Ltmp1243:
    00000073: 	callq	clock@PLT # Offset: 115
    00000078: 	movq	%rax, start_time(%rip)
    0000007f: 	movl	iterations(%rip), %eax
    00000085: 	testl	%eax, %eax
    00000087: 	jle	.Ltmp1244 # Offset: 135
    0000008d: 	leal	-0x2(%r14), %ecx
    00000091: 	leal	-0x1(%r13), %eax
    00000095: 	movl	%ecx, 0x4(%rsp)
    00000099: 	testl	%ecx, %ecx
    0000009b: 	jle	.Ltmp1244 # Offset: 155
    000000a1: 	cmpl	$0x1, %eax
    000000a4: 	jle	.Ltmp1244 # Offset: 164
    000000aa: 	movl	%ecx, %eax
    000000ac: 	movl	%r12d, %r10d
    000000af: 	xorl	%r15d, %r15d
    000000b2: 	imull	%r12d, %eax
    000000b6: 	negl	%r10d
    000000b9: 	movslq	%r10d, %r10
    000000bc: 	shlq	$0x2, %r10
    000000c0: 	movl	%eax, %edx
    000000c2: 	subl	%r12d, %edx
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	leaq	(,%rdx,4), %rsi
    000000d0: 	movslq	%eax, %rdx
    000000d3: 	addl	%r12d, %eax
    000000d6: 	cltq
    000000d8: 	movq	%rdx, %rcx
    000000db: 	movq	%rsi, 0x8(%rsp)
    000000e0: 	shlq	$0x2, %rax
    000000e4: 	negq	%rcx
    000000e7: 	movq	%rax, 0x18(%rsp)
    000000ec: 	leal	-0x3(%r13), %eax
    000000f0: 	leaq	(,%rcx,4), %rsi
    000000f8: 	addq	$0x1, %rax
    000000fc: 	movq	%rsi, 0x20(%rsp)
    00000101: 	addq	%rax, %rdx
    00000104: 	negq	%rax
    00000107: 	leaq	(,%rdx,4), %rsi
    0000010f: 	leaq	(,%rax,4), %r14
    00000117: 	movq	%rsi, 0x10(%rsp)
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1247:
    00000120: 	movq	0x10(%rsp), %r8
    00000125: 	movq	0x18(%rsp), %r13
    0000012a: 	movq	0x20(%rsp), %r9
    0000012f: 	movq	0x8(%rsp), %r12
    00000134: 	movl	0x4(%rsp), %r11d
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp1246:
    00000140: 	leaq	(%r9,%r12), %rsi
    00000144: 	leaq	(%r13,%r9), %rcx
    00000149: 	subl	$0x1, %r11d
    0000014d: 	leaq	(%r14,%r8), %rdx
    00000151: 	addq	%rbx, %rsi
    00000154: 	addq	%rbx, %rcx
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1245:
    00000160: 	movslq	0x4(%rdx,%rsi), %rax
    00000165: 	movslq	(%rbx,%rdx), %rdi
    00000169: 	addq	%rax, %rdi
    0000016c: 	movslq	0x8(%rbx,%rdx), %rax
    00000171: 	addq	%rdi, %rax
    00000174: 	movslq	0x4(%rdx,%rcx), %rdi
    00000179: 	addq	%rax, %rdi
    0000017c: 	leaq	0x5(%rdi), %rax
    00000180: 	addq	$0x2, %rdi
    00000184: 	cmovnsq	%rdi, %rax
    00000188: 	sarq	$0x2, %rax
    0000018c: 	subl	0x4(%rbp,%rdx), %eax
    00000190: 	imull	$0x71, %eax, %eax
    00000193: 	sarl	$0x6, %eax
    00000196: 	addl	0x4(%rbp,%rdx), %eax
    0000019a: 	movl	%eax, 0x4(%rbp,%rdx)
    0000019e: 	addq	$0x4, %rdx
    000001a2: 	cmpq	%rdx, %r8
    000001a5: 	jne	.Ltmp1245 # Offset: 421
    000001a7: 	addq	%r10, %r12
    000001aa: 	subq	%r10, %r9
    000001ad: 	addq	%r10, %r13
    000001b0: 	addq	%r10, %r8
    000001b3: 	testl	%r11d, %r11d
    000001b6: 	jne	.Ltmp1246 # Offset: 438
    000001b8: 	addl	$0x1, %r15d
    000001bc: 	cmpl	iterations(%rip), %r15d
    000001c3: 	movq	%rbp, %rax
    000001c6: 	movq	%rbx, %rbp
    000001c9: 	jge	.Ltmp1244 # Offset: 457
    000001cb: 	movq	%rax, %rbx
    000001ce: 	jmp	.Ltmp1247 # Offset: 462
.Ltmp1244:
    000001d3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001da: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e1: 	subq	$0x20, %rax
    000001e5: 	cmpq	%rax, %rbx
    000001e8: 	je	.Ltmp1248 # Offset: 488
    000001ee: 	movq	0x28(%rsp), %rax
    000001f3: 	leaq	0x10(%rbx), %rdi
    000001f7: 	movq	%rdi, (%rbx)
    000001fa: 	movq	(%rax), %rbp
    000001fd: 	movq	0x8(%rax), %r12
    00000201: 	movq	%rbp, %rax
    00000204: 	addq	%r12, %rax
    00000207: 	je	.Ltmp1249 # Offset: 519
    00000209: 	testq	%rbp, %rbp
    0000020c: 	je	.Ltmp1250 # Offset: 524
.Ltmp1249:
    00000212: 	movq	%r12, 0x38(%rsp)
    00000217: 	cmpq	$0xf, %r12
    0000021b: 	ja	.Ltmp1251 # Offset: 539
    00000221: 	cmpq	$0x1, %r12
    00000225: 	jne	.Ltmp1252 # Offset: 549
    0000022b: 	movzbl	(%rbp), %eax
    0000022f: 	movb	%al, 0x10(%rbx)
.Ltmp1255:
    00000232: 	movq	%r12, 0x8(%rbx)
    00000236: 	movb	$0x0, (%rdi,%r12)
    0000023b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000242: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000249: 	addq	$0x20, %rax
    0000024d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000254: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000025b: 	je	.Ltmp1253 # Offset: 603
.Ltmp1256:
    00000261: 	movq	-0x20(%rax), %rbp
    00000265: 	callq	clock@PLT # Offset: 613
    0000026a: 	movq	%rax, end_time(%rip)
    00000271: 	movq	0x58(%rsp), %rdx
    00000276: 	subq	%fs:0x28, %rdx
    0000027f: 	jne	.Ltmp1254 # Offset: 639
    00000285: 	subq	start_time(%rip), %rax
    0000028c: 	pxor	%xmm0, %xmm0
    00000290: 	movq	%rbp, %rdi
    00000293: 	cvtsi2sd	%rax, %xmm0
    00000298: 	divsd	DATAat0x49520(%rip), %xmm0
    000002a0: 	addq	$0x68, %rsp
    000002a4: 	popq	%rbx
    000002a5: 	popq	%rbp
    000002a6: 	popq	%r12
    000002a8: 	popq	%r13
    000002aa: 	popq	%r14
    000002ac: 	popq	%r15
    000002ae: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 686
.Ltmp1251:
    000002b3: 	movq	%rbx, %rdi
    000002b6: 	leaq	0x38(%rsp), %rsi
    000002bb: 	xorl	%edx, %edx
    000002bd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 701
    000002c2: 	movq	%rax, (%rbx)
    000002c5: 	movq	%rax, %rdi
    000002c8: 	movq	0x38(%rsp), %rax
    000002cd: 	movq	%rax, 0x10(%rbx)
.Ltmp1257:
    000002d1: 	movq	%r12, %rdx
    000002d4: 	movq	%rbp, %rsi
    000002d7: 	callq	memcpy@PLT # Offset: 727
    000002dc: 	movq	0x38(%rsp), %r12
    000002e1: 	movq	(%rbx), %rdi
    000002e4: 	jmp	.Ltmp1255 # Offset: 740
.Ltmp1248:
    000002e9: 	movq	0x28(%rsp), %rsi
    000002ee: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 757
    000002fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000301: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000308: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000030f: 	jne	.Ltmp1256 # Offset: 783
.Ltmp1253:
    00000315: 	movq	-0x8(%rdx), %rax
    00000319: 	addq	$0x200, %rax
    0000031f: 	jmp	.Ltmp1256 # Offset: 799
.Ltmp1252:
    00000324: 	testq	%r12, %r12
    00000327: 	je	.Ltmp1255 # Offset: 807
    0000032d: 	jmp	.Ltmp1257 # Offset: 813
.Ltmp1254:
    0000032f: 	callq	__stack_chk_fail@PLT # Offset: 815
.Ltmp1250:
    00000334: 	leaq	DATAat0x49008(%rip), %rdi
    0000033b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14max_differenceIiET_PKS0_S2_m" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x260b0
  Size        : 0x153
  MaxSize     : 0x160
  Offset      : 0x260b0
  Section     : .text
  Orc Section : .local.text._Z14max_differenceIiET_PKS0_S2_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdx, %rsi
    0000000a: 	testq	%rdx, %rdx
    0000000d: 	je	.Ltmp1258 # Offset: 13
    00000013: 	leaq	-0x1(%rdx), %rax
    00000017: 	cmpq	$0x2, %rax
    0000001b: 	jbe	.Ltmp1259 # Offset: 27
    00000021: 	shrq	$0x2, %rdx
    00000025: 	pxor	%xmm2, %xmm2
    00000029: 	xorl	%eax, %eax
    0000002b: 	shlq	$0x4, %rdx
    0000002f: 	movdqa	%xmm2, %xmm4
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1260:
    00000038: 	movdqu	(%rcx,%rax), %xmm5
    0000003d: 	movdqu	(%rdi,%rax), %xmm3
    00000042: 	movdqa	%xmm4, %xmm0
    00000046: 	movdqu	(%rdi,%rax), %xmm6
    0000004b: 	addq	$0x10, %rax
    0000004f: 	psubd	%xmm5, %xmm3
    00000053: 	movdqa	%xmm5, %xmm1
    00000057: 	pcmpgtd	%xmm3, %xmm0
    0000005b: 	psubd	%xmm6, %xmm1
    0000005f: 	pand	%xmm0, %xmm1
    00000063: 	pandn	%xmm3, %xmm0
    00000067: 	por	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm2, %xmm1
    0000006f: 	pcmpgtd	%xmm0, %xmm1
    00000073: 	pand	%xmm1, %xmm2
    00000077: 	pandn	%xmm0, %xmm1
    0000007b: 	por	%xmm1, %xmm2
    0000007f: 	cmpq	%rax, %rdx
    00000082: 	jne	.Ltmp1260 # Offset: 130
    00000084: 	movdqa	%xmm2, %xmm1
    00000088: 	movq	%rsi, %r8
    0000008b: 	psrldq	$0x8, %xmm1
    00000090: 	andq	$-0x4, %r8
    00000094: 	movdqa	%xmm1, %xmm0
    00000098: 	pcmpgtd	%xmm2, %xmm0
    0000009c: 	pand	%xmm0, %xmm1
    000000a0: 	pandn	%xmm2, %xmm0
    000000a4: 	por	%xmm1, %xmm0
    000000a8: 	movdqa	%xmm0, %xmm2
    000000ac: 	psrldq	$0x4, %xmm2
    000000b1: 	movdqa	%xmm2, %xmm1
    000000b5: 	pcmpgtd	%xmm0, %xmm1
    000000b9: 	pand	%xmm1, %xmm2
    000000bd: 	pandn	%xmm0, %xmm1
    000000c1: 	por	%xmm2, %xmm1
    000000c5: 	movd	%xmm1, %eax
    000000c9: 	testb	$0x3, %sil
    000000cd: 	je	.Ltmp1261 # Offset: 205
.Ltmp1263:
    000000cf: 	movl	(%rcx,%r8,4), %r10d
    000000d3: 	movl	(%rdi,%r8,4), %edx
    000000d7: 	leaq	(,%r8,4), %r9
    000000df: 	movl	%r10d, %r11d
    000000e2: 	subl	%edx, %r11d
    000000e5: 	subl	%r10d, %edx
    000000e8: 	cmovsl	%r11d, %edx
    000000ec: 	cmpl	%edx, %eax
    000000ee: 	cmovll	%edx, %eax
    000000f1: 	leaq	0x1(%r8), %rdx
    000000f5: 	cmpq	%rdx, %rsi
    000000f8: 	jbe	.Ltmp1262 # Offset: 248
    000000fa: 	movl	0x4(%rcx,%r9), %r10d
    000000ff: 	movl	0x4(%rdi,%r9), %edx
    00000104: 	movl	%r10d, %r11d
    00000107: 	subl	%edx, %r11d
    0000010a: 	subl	%r10d, %edx
    0000010d: 	cmovsl	%r11d, %edx
    00000111: 	cmpl	%edx, %eax
    00000113: 	cmovll	%edx, %eax
    00000116: 	addq	$0x2, %r8
    0000011a: 	cmpq	%r8, %rsi
    0000011d: 	jbe	.Ltmp1262 # Offset: 285
    0000011f: 	movl	0x8(%rcx,%r9), %ecx
    00000124: 	movl	0x8(%rdi,%r9), %edx
    00000129: 	movl	%ecx, %esi
    0000012b: 	subl	%edx, %esi
    0000012d: 	subl	%ecx, %edx
    0000012f: 	cmovsl	%esi, %edx
    00000132: 	cmpl	%edx, %eax
    00000134: 	cmovll	%edx, %eax
    00000137: 	retq # Offset: 311
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1258:
    00000140: 	xorl	%eax, %eax
.Ltmp1262:
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1261:
    00000148: 	retq # Offset: 328
.Ltmp1259:
    00000149: 	xorl	%eax, %eax
    0000014b: 	xorl	%r8d, %r8d
    0000014e: 	jmp	.Ltmp1263 # Offset: 334
DWARF CFI Instructions:
    <empty>
End of Function "_Z14max_differenceIiET_PKS0_S2_m"

Binary Function "_Z11TestOneTypeIilEvv" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x26210
  Size        : 0x30ae
  MaxSize     : 0x30b0
  Offset      : 0x26210
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIilEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	DATAat0x49230(%rip), %rsi
    0000000c: 	movq	%rsp, %rbp
    0000000f: 	pushq	%r15
    00000011: 	pushq	%r14
    00000013: 	leaq	-0xe0(%rbp), %r15
    0000001a: 	pushq	%r13
    0000001c: 	movq	%r15, %rdi
    0000001f: 	pushq	%r12
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x158, %rsp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, -0x38(%rbp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	%r15, -0x130(%rbp)
    00000043: 	movl	%eax, -0x16c(%rbp)
    00000049: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 73
    0000004e: 	leaq	-0xc0(%rbp), %rdi
    00000055: 	leaq	DATAat0x493cc(%rip), %rsi
    0000005c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 92
    00000061: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm7
    00000069: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000070: 	leaq	-0x110(%rbp), %rsi
    00000077: 	movaps	%xmm7, -0x110(%rbp)
    0000007e: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    00000086: 	movaps	%xmm7, -0x100(%rbp)
    0000008d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 141
    00000092: 	movl	$0xb71b00, %edi
    00000097: 	callq	_Znam@PLT # Offset: 151
    0000009c: 	movl	$0xb71b00, %edi
    000000a1: 	movq	%rax, -0x120(%rbp)
    000000a8: 	movq	%rax, %r14
    000000ab: 	callq	_Znam@PLT # Offset: 171
    000000b0: 	movq	%rax, %r12
    000000b3: 	movl	iterations(%rip), %eax
    000000b9: 	leaq	-0x60(%rbp), %rbx
    000000bd: 	movq	%r15, %rsi
    000000c0: 	leaq	DATAat0x49238(%rip), %rdx
    000000c7: 	movq	%rbx, %rdi
    000000ca: 	addl	$0x1, %eax
    000000cd: 	andl	$-0x2, %eax
    000000d0: 	movl	%eax, iterations(%rip)
    000000d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 214
    000000db: 	movdqa	DATAat0x49470(%rip), %xmm7
    000000e3: 	leaq	-0x80(%rbp), %rax
    000000e7: 	movl	$0x5dc, %edx
    000000ec: 	movq	%r14, %rdi
    000000ef: 	movq	%rax, %rcx
    000000f2: 	movl	$0x7d0, %esi
    000000f7: 	movq	%rax, -0x138(%rbp)
    000000fe: 	movaps	%xmm7, -0x80(%rbp)
    00000102: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 258
    00000107: 	movq	%r12, %rdi
    0000010a: 	movl	$0xb71b00, %edx
    0000010f: 	movq	%r14, %rsi
    00000112: 	callq	memcpy@PLT # Offset: 274
    00000117: 	callq	clock@PLT # Offset: 279
    0000011c: 	movq	%r12, %r10
    0000011f: 	movq	%r14, %r9
    00000122: 	xorl	%r11d, %r11d
    00000125: 	movl	iterations(%rip), %r15d
    0000012c: 	movq	%rax, start_time(%rip)
    00000133: 	movl	$0x1768, %r8d
    00000139: 	movq	-0x120(%rbp), %rdi
    00000140: 	testl	%r15d, %r15d
    00000143: 	jle	.Ltmp1264 # Offset: 323
.Ltmp1268:
    00000149: 	movq	$-0x1770, %rax
    00000150: 	leaq	-0x1770(%r9), %r14
    00000157: 	leaq	0x1770(%r9), %r13
    0000015e: 	movq	%rdi, %rcx
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1266:
    00000168: 	movq	%rcx, -0x120(%rbp)
    0000016f: 	movq	%rax, %rdx
    00000172: 	movq	%r8, %rdi
    00000175: 	negq	%rdx
    00000178: 	subq	%rax, %rdi
.Ltmp1265:
    0000017b: 	movslq	0x4(%r14,%rdx), %rsi
    00000180: 	movslq	(%r9,%rdx), %rcx
    00000184: 	addq	%rsi, %rcx
    00000187: 	movslq	0x8(%r9,%rdx), %rsi
    0000018c: 	addq	%rcx, %rsi
    0000018f: 	movslq	0x4(%r13,%rdx), %rcx
    00000194: 	addq	%rsi, %rcx
    00000197: 	leaq	0x5(%rcx), %rsi
    0000019b: 	addq	$0x2, %rcx
    0000019f: 	cmovnsq	%rcx, %rsi
    000001a3: 	sarq	$0x2, %rsi
    000001a7: 	movl	%esi, 0x4(%r10,%rdx)
    000001ac: 	addq	$0x4, %rdx
    000001b0: 	cmpq	%rdi, %rdx
    000001b3: 	jne	.Ltmp1265 # Offset: 435
    000001b5: 	subq	$0x1770, %rax
    000001bb: 	movq	-0x120(%rbp), %rcx
    000001c2: 	cmpq	$-0xb70390, %rax
    000001c8: 	jne	.Ltmp1266 # Offset: 456
    000001ca: 	addl	$0x1, %r11d
    000001ce: 	movq	%r10, %rax
    000001d1: 	movq	%rcx, %rdi
    000001d4: 	movq	%r9, %r10
    000001d7: 	cmpl	%r15d, %r11d
    000001da: 	je	.Ltmp1267 # Offset: 474
    000001dc: 	movq	%rax, %r9
    000001df: 	jmp	.Ltmp1268 # Offset: 479
.Ltmp1267:
    000001e4: 	movq	%rcx, -0x120(%rbp)
.Ltmp1264:
    000001eb: 	movq	%rbx, %rsi
    000001ee: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 501
    000001fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000201: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000208: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020f: 	je	.Ltmp1269 # Offset: 527
.Ltmp1422:
    00000215: 	movq	-0x20(%rax), %r13
    00000219: 	callq	clock@PLT # Offset: 537
    0000021e: 	pxor	%xmm0, %xmm0
    00000222: 	movq	%rax, end_time(%rip)
    00000229: 	movq	%r13, %rdi
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	cvtsi2sd	%rax, %xmm0
    00000238: 	divsd	DATAat0x49520(%rip), %xmm0
    00000240: 	callq	_Z13record_resultdPKc # Offset: 576
    00000245: 	movq	-0x60(%rbp), %rdi
    00000249: 	leaq	-0x50(%rbp), %rax
    0000024d: 	movq	%rax, -0x128(%rbp)
    00000254: 	cmpq	%rax, %rdi
    00000257: 	je	.Ltmp1270 # Offset: 599
    00000259: 	movq	-0x50(%rbp), %rax
    0000025d: 	leaq	0x1(%rax), %rsi
    00000261: 	callq	_ZdlPvm@PLT # Offset: 609
.Ltmp1270:
    00000266: 	movq	-0x130(%rbp), %rsi
    0000026d: 	leaq	DATAat0x4924a(%rip), %rdx
    00000274: 	movq	%rbx, %rdi
    00000277: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 631
    0000027c: 	movq	-0x120(%rbp), %r13
    00000283: 	movl	$0x5dc, %edx
    00000288: 	movl	$0x7d0, %esi
    0000028d: 	movdqa	DATAat0x49470(%rip), %xmm7
    00000295: 	movq	-0x138(%rbp), %rcx
    0000029c: 	movq	%r13, %rdi
    0000029f: 	movaps	%xmm7, -0x80(%rbp)
    000002a3: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 675
    000002a8: 	movq	%r12, %rdi
    000002ab: 	movl	$0xb71b00, %edx
    000002b0: 	movq	%r13, %rsi
    000002b3: 	callq	memcpy@PLT # Offset: 691
    000002b8: 	callq	clock@PLT # Offset: 696
    000002bd: 	movl	iterations(%rip), %r14d
    000002c4: 	movq	%r12, %r11
    000002c7: 	xorl	%r10d, %r10d
    000002ca: 	movq	%rax, start_time(%rip)
    000002d1: 	movq	-0x120(%rbp), %rdi
    000002d8: 	testl	%r14d, %r14d
    000002db: 	jle	.Ltmp1271 # Offset: 731
.Ltmp1275:
    000002e1: 	leaq	0x1774(%r11), %rcx
    000002e8: 	leaq	0xb70390(%r13), %rsi
    000002ef: 	movl	$0x1, %edx
    000002f4: 	nopl	(%rax) # Size: 4
.Ltmp1273:
    000002f8: 	addl	$0x1, %edx
    000002fb: 	leaq	-0xb6ec20(%rsi), %rax
    00000302: 	movq	%rcx, %r8
    00000305: 	movq	%rdi, %r15
.Ltmp1272:
    00000308: 	movslq	-0x176c(%rax), %r9
    0000030f: 	movslq	(%rax), %rdi
    00000312: 	addq	%r9, %rdi
    00000315: 	movslq	0x8(%rax), %r9
    00000319: 	addq	%rdi, %r9
    0000031c: 	movslq	0x1774(%rax), %rdi
    00000323: 	addq	%r9, %rdi
    00000326: 	leaq	0x5(%rdi), %r9
    0000032a: 	addq	$0x2, %rdi
    0000032e: 	cmovsq	%r9, %rdi
    00000332: 	addq	$0x1770, %rax
    00000338: 	addq	$0x1770, %r8
    0000033f: 	sarq	$0x2, %rdi
    00000343: 	movl	%edi, -0x1770(%r8)
    0000034a: 	cmpq	%rsi, %rax
    0000034d: 	jne	.Ltmp1272 # Offset: 845
    0000034f: 	movq	%r15, %rdi
    00000352: 	addq	$0x4, %rcx
    00000356: 	leaq	0x4(%rax), %rsi
    0000035a: 	cmpl	$0x5db, %edx
    00000360: 	jne	.Ltmp1273 # Offset: 864
    00000362: 	addl	$0x1, %r10d
    00000366: 	movq	%r11, %rax
    00000369: 	movq	%r13, %r11
    0000036c: 	cmpl	%r14d, %r10d
    0000036f: 	je	.Ltmp1274 # Offset: 879
    00000371: 	movq	%rax, %r13
    00000374: 	jmp	.Ltmp1275 # Offset: 884
.Ltmp1274:
    00000379: 	movq	%r15, -0x120(%rbp)
.Ltmp1271:
    00000380: 	movq	%rbx, %rsi
    00000383: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000038a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 906
    0000038f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000396: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000039d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a4: 	je	.Ltmp1276 # Offset: 932
.Ltmp1421:
    000003aa: 	movq	-0x20(%rax), %r13
    000003ae: 	callq	clock@PLT # Offset: 942
    000003b3: 	pxor	%xmm0, %xmm0
    000003b7: 	movq	%rax, end_time(%rip)
    000003be: 	movq	%r13, %rdi
    000003c1: 	subq	start_time(%rip), %rax
    000003c8: 	cvtsi2sd	%rax, %xmm0
    000003cd: 	divsd	DATAat0x49520(%rip), %xmm0
    000003d5: 	callq	_Z13record_resultdPKc # Offset: 981
    000003da: 	movq	-0x60(%rbp), %rdi
    000003de: 	cmpq	-0x128(%rbp), %rdi
    000003e5: 	je	.Ltmp1277 # Offset: 997
    000003e7: 	movq	-0x50(%rbp), %rax
    000003eb: 	leaq	0x1(%rax), %rsi
    000003ef: 	callq	_ZdlPvm@PLT # Offset: 1007
.Ltmp1277:
    000003f4: 	movq	-0x130(%rbp), %rsi
    000003fb: 	leaq	DATAat0x4925d(%rip), %rdx
    00000402: 	movq	%rbx, %rdi
    00000405: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1029
    0000040a: 	movq	-0x120(%rbp), %r14
    00000411: 	movl	$0x5dc, %edx
    00000416: 	movl	$0x7d0, %esi
    0000041b: 	movdqa	DATAat0x49470(%rip), %xmm7
    00000423: 	movq	-0x138(%rbp), %rcx
    0000042a: 	movq	%r14, %rdi
    0000042d: 	movaps	%xmm7, -0x80(%rbp)
    00000431: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 1073
    00000436: 	movq	%r12, %rdi
    00000439: 	movl	$0xb71b00, %edx
    0000043e: 	movq	%r14, %rsi
    00000441: 	callq	memcpy@PLT # Offset: 1089
    00000446: 	callq	clock@PLT # Offset: 1094
    0000044b: 	movq	%r12, %r10
    0000044e: 	movq	%r14, %r9
    00000451: 	xorl	%r11d, %r11d
    00000454: 	movl	iterations(%rip), %r15d
    0000045b: 	movq	%rax, start_time(%rip)
    00000462: 	movq	$-0x1768, %r8
    00000469: 	movq	-0x120(%rbp), %rdi
    00000470: 	testl	%r15d, %r15d
    00000473: 	jle	.Ltmp1278 # Offset: 1139
.Ltmp1282:
    00000479: 	movq	$-0xb6ec20, %rax
    00000480: 	leaq	-0x1770(%r9), %r14
    00000487: 	leaq	0x1770(%r9), %r13
    0000048e: 	movq	%rdi, %rcx
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp1280:
    00000498: 	movq	%rcx, -0x120(%rbp)
    0000049f: 	movq	%rax, %rdx
    000004a2: 	movq	%r8, %rdi
    000004a5: 	negq	%rdx
    000004a8: 	subq	%rax, %rdi
.Ltmp1279:
    000004ab: 	movslq	0x1768(%r14,%rdx), %rsi
    000004b3: 	movslq	0x1764(%r9,%rdx), %rcx
    000004bb: 	addq	%rsi, %rcx
    000004be: 	movslq	0x176c(%r9,%rdx), %rsi
    000004c6: 	addq	%rcx, %rsi
    000004c9: 	movslq	0x1768(%r13,%rdx), %rcx
    000004d1: 	addq	%rsi, %rcx
    000004d4: 	leaq	0x5(%rcx), %rsi
    000004d8: 	addq	$0x2, %rcx
    000004dc: 	cmovnsq	%rcx, %rsi
    000004e0: 	sarq	$0x2, %rsi
    000004e4: 	movl	%esi, 0x1768(%r10,%rdx)
    000004ec: 	subq	$0x4, %rdx
    000004f0: 	cmpq	%rdi, %rdx
    000004f3: 	jne	.Ltmp1279 # Offset: 1267
    000004f5: 	movq	-0x120(%rbp), %rcx
    000004fc: 	addq	$0x1770, %rax
    00000502: 	jne	.Ltmp1280 # Offset: 1282
    00000504: 	addl	$0x1, %r11d
    00000508: 	movq	%r10, %rax
    0000050b: 	movq	%rcx, %rdi
    0000050e: 	movq	%r9, %r10
    00000511: 	cmpl	%r15d, %r11d
    00000514: 	je	.Ltmp1281 # Offset: 1300
    00000516: 	movq	%rax, %r9
    00000519: 	jmp	.Ltmp1282 # Offset: 1305
.Ltmp1281:
    0000051e: 	movq	%rcx, -0x120(%rbp)
.Ltmp1278:
    00000525: 	movq	%rbx, %rsi
    00000528: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000052f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1327
    00000534: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000053b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000542: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000549: 	je	.Ltmp1283 # Offset: 1353
.Ltmp1420:
    0000054f: 	movq	-0x20(%rax), %r13
    00000553: 	callq	clock@PLT # Offset: 1363
    00000558: 	pxor	%xmm0, %xmm0
    0000055c: 	movq	%rax, end_time(%rip)
    00000563: 	movq	%r13, %rdi
    00000566: 	subq	start_time(%rip), %rax
    0000056d: 	cvtsi2sd	%rax, %xmm0
    00000572: 	divsd	DATAat0x49520(%rip), %xmm0
    0000057a: 	callq	_Z13record_resultdPKc # Offset: 1402
    0000057f: 	movq	-0x60(%rbp), %rdi
    00000583: 	cmpq	-0x128(%rbp), %rdi
    0000058a: 	je	.Ltmp1284 # Offset: 1418
    0000058c: 	movq	-0x50(%rbp), %rax
    00000590: 	leaq	0x1(%rax), %rsi
    00000594: 	callq	_ZdlPvm@PLT # Offset: 1428
.Ltmp1284:
    00000599: 	movq	-0x130(%rbp), %rsi
    000005a0: 	leaq	DATAat0x49271(%rip), %rdx
    000005a7: 	movq	%rbx, %rdi
    000005aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1450
    000005af: 	movq	-0x120(%rbp), %r14
    000005b6: 	movl	$0x5dc, %edx
    000005bb: 	movl	$0x7d0, %esi
    000005c0: 	movdqa	DATAat0x49470(%rip), %xmm7
    000005c8: 	movq	-0x138(%rbp), %rcx
    000005cf: 	movq	%r14, %rdi
    000005d2: 	movaps	%xmm7, -0x80(%rbp)
    000005d6: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 1494
    000005db: 	movq	%r12, %rdi
    000005de: 	movl	$0xb71b00, %edx
    000005e3: 	movq	%r14, %rsi
    000005e6: 	callq	memcpy@PLT # Offset: 1510
    000005eb: 	callq	clock@PLT # Offset: 1515
    000005f0: 	movq	%r12, %r10
    000005f3: 	movq	%r14, %r9
    000005f6: 	xorl	%r11d, %r11d
    000005f9: 	movl	iterations(%rip), %r15d
    00000600: 	movq	%rax, start_time(%rip)
    00000607: 	movq	$-0x1768, %r8
    0000060e: 	movq	-0x120(%rbp), %rdi
    00000615: 	testl	%r15d, %r15d
    00000618: 	jle	.Ltmp1285 # Offset: 1560
.Ltmp1289:
    0000061e: 	movq	$-0x1770, %rax
    00000625: 	leaq	-0x1770(%r9), %r14
    0000062c: 	leaq	0x1770(%r9), %r13
    00000633: 	movq	%rdi, %rcx
    00000636: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1287:
    00000640: 	movq	%rcx, -0x120(%rbp)
    00000647: 	movq	%rax, %rdx
    0000064a: 	movq	%r8, %rdi
    0000064d: 	negq	%rdx
    00000650: 	subq	%rax, %rdi
.Ltmp1286:
    00000653: 	movslq	0x1768(%r14,%rdx), %rsi
    0000065b: 	movslq	0x1764(%r9,%rdx), %rcx
    00000663: 	addq	%rsi, %rcx
    00000666: 	movslq	0x176c(%r9,%rdx), %rsi
    0000066e: 	addq	%rcx, %rsi
    00000671: 	movslq	0x1768(%r13,%rdx), %rcx
    00000679: 	addq	%rsi, %rcx
    0000067c: 	leaq	0x5(%rcx), %rsi
    00000680: 	addq	$0x2, %rcx
    00000684: 	cmovnsq	%rcx, %rsi
    00000688: 	sarq	$0x2, %rsi
    0000068c: 	movl	%esi, 0x1768(%r10,%rdx)
    00000694: 	subq	$0x4, %rdx
    00000698: 	cmpq	%rdi, %rdx
    0000069b: 	jne	.Ltmp1286 # Offset: 1691
    0000069d: 	subq	$0x1770, %rax
    000006a3: 	movq	-0x120(%rbp), %rcx
    000006aa: 	cmpq	$-0xb70390, %rax
    000006b0: 	jne	.Ltmp1287 # Offset: 1712
    000006b2: 	addl	$0x1, %r11d
    000006b6: 	movq	%r10, %rax
    000006b9: 	movq	%rcx, %rdi
    000006bc: 	movq	%r9, %r10
    000006bf: 	cmpl	%r15d, %r11d
    000006c2: 	je	.Ltmp1288 # Offset: 1730
    000006c4: 	movq	%rax, %r9
    000006c7: 	jmp	.Ltmp1289 # Offset: 1735
.Ltmp1288:
    000006cc: 	movq	%rcx, -0x120(%rbp)
.Ltmp1285:
    000006d3: 	movq	%rbx, %rsi
    000006d6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000006dd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1757
    000006e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006e9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000006f0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006f7: 	je	.Ltmp1290 # Offset: 1783
.Ltmp1419:
    000006fd: 	movq	-0x20(%rax), %r13
    00000701: 	callq	clock@PLT # Offset: 1793
    00000706: 	pxor	%xmm0, %xmm0
    0000070a: 	movq	%rax, end_time(%rip)
    00000711: 	movq	%r13, %rdi
    00000714: 	subq	start_time(%rip), %rax
    0000071b: 	cvtsi2sd	%rax, %xmm0
    00000720: 	divsd	DATAat0x49520(%rip), %xmm0
    00000728: 	callq	_Z13record_resultdPKc # Offset: 1832
    0000072d: 	movq	-0x60(%rbp), %rdi
    00000731: 	cmpq	-0x128(%rbp), %rdi
    00000738: 	je	.Ltmp1291 # Offset: 1848
    0000073a: 	movq	-0x50(%rbp), %rax
    0000073e: 	leaq	0x1(%rax), %rsi
    00000742: 	callq	_ZdlPvm@PLT # Offset: 1858
.Ltmp1291:
    00000747: 	movq	-0x130(%rbp), %rsi
    0000074e: 	leaq	DATAat0x49286(%rip), %rdx
    00000755: 	movq	%rbx, %rdi
    00000758: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1880
    0000075d: 	movq	-0x120(%rbp), %r14
    00000764: 	movl	$0x5dc, %edx
    00000769: 	movl	$0x7d0, %esi
    0000076e: 	movdqa	DATAat0x49470(%rip), %xmm7
    00000776: 	movq	-0x138(%rbp), %rcx
    0000077d: 	movq	%r14, %rdi
    00000780: 	movaps	%xmm7, -0x80(%rbp)
    00000784: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 1924
    00000789: 	movq	%r12, %rdi
    0000078c: 	movl	$0xb71b00, %edx
    00000791: 	movq	%r14, %rsi
    00000794: 	callq	memcpy@PLT # Offset: 1940
    00000799: 	callq	clock@PLT # Offset: 1945
    0000079e: 	movq	%r12, %r10
    000007a1: 	movq	%r14, %r9
    000007a4: 	xorl	%r11d, %r11d
    000007a7: 	movl	iterations(%rip), %r15d
    000007ae: 	movq	%rax, start_time(%rip)
    000007b5: 	movl	$0x1768, %r8d
    000007bb: 	movq	-0x120(%rbp), %rdi
    000007c2: 	testl	%r15d, %r15d
    000007c5: 	jle	.Ltmp1292 # Offset: 1989
.Ltmp1296:
    000007cb: 	movq	$-0xb6ec20, %rax
    000007d2: 	leaq	-0x1770(%r9), %r14
    000007d9: 	leaq	0x1770(%r9), %r13
    000007e0: 	movq	%rdi, %rcx
    000007e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1294:
    000007e8: 	movq	%rcx, -0x120(%rbp)
    000007ef: 	movq	%rax, %rdx
    000007f2: 	movq	%r8, %rdi
    000007f5: 	negq	%rdx
    000007f8: 	subq	%rax, %rdi
.Ltmp1293:
    000007fb: 	movslq	0x4(%r14,%rdx), %rsi
    00000800: 	movslq	(%r9,%rdx), %rcx
    00000804: 	addq	%rsi, %rcx
    00000807: 	movslq	0x8(%r9,%rdx), %rsi
    0000080c: 	addq	%rcx, %rsi
    0000080f: 	movslq	0x4(%r13,%rdx), %rcx
    00000814: 	addq	%rsi, %rcx
    00000817: 	leaq	0x5(%rcx), %rsi
    0000081b: 	addq	$0x2, %rcx
    0000081f: 	cmovnsq	%rcx, %rsi
    00000823: 	sarq	$0x2, %rsi
    00000827: 	movl	%esi, 0x4(%r10,%rdx)
    0000082c: 	addq	$0x4, %rdx
    00000830: 	cmpq	%rdx, %rdi
    00000833: 	jne	.Ltmp1293 # Offset: 2099
    00000835: 	movq	-0x120(%rbp), %rcx
    0000083c: 	addq	$0x1770, %rax
    00000842: 	jne	.Ltmp1294 # Offset: 2114
    00000844: 	addl	$0x1, %r11d
    00000848: 	movq	%r10, %rax
    0000084b: 	movq	%rcx, %rdi
    0000084e: 	movq	%r9, %r10
    00000851: 	cmpl	%r15d, %r11d
    00000854: 	je	.Ltmp1295 # Offset: 2132
    00000856: 	movq	%rax, %r9
    00000859: 	jmp	.Ltmp1296 # Offset: 2137
.Ltmp1295:
    0000085e: 	movq	%rcx, -0x120(%rbp)
.Ltmp1292:
    00000865: 	movq	%rbx, %rsi
    00000868: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000086f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2159
    00000874: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000087b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000882: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000889: 	je	.Ltmp1297 # Offset: 2185
.Ltmp1418:
    0000088f: 	movq	-0x20(%rax), %r13
    00000893: 	callq	clock@PLT # Offset: 2195
    00000898: 	pxor	%xmm0, %xmm0
    0000089c: 	movq	%rax, end_time(%rip)
    000008a3: 	movq	%r13, %rdi
    000008a6: 	subq	start_time(%rip), %rax
    000008ad: 	cvtsi2sd	%rax, %xmm0
    000008b2: 	divsd	DATAat0x49520(%rip), %xmm0
    000008ba: 	callq	_Z13record_resultdPKc # Offset: 2234
    000008bf: 	movq	-0x60(%rbp), %rdi
    000008c3: 	cmpq	-0x128(%rbp), %rdi
    000008ca: 	je	.Ltmp1298 # Offset: 2250
    000008cc: 	movq	-0x50(%rbp), %rax
    000008d0: 	leaq	0x1(%rax), %rsi
    000008d4: 	callq	_ZdlPvm@PLT # Offset: 2260
.Ltmp1298:
    000008d9: 	movq	-0x130(%rbp), %rsi
    000008e0: 	leaq	DATAat0x4929b(%rip), %rdx
    000008e7: 	movq	%rbx, %rdi
    000008ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2282
    000008ef: 	movl	$0x5dc, %edx
    000008f4: 	movl	$0x7d0, %esi
    000008f9: 	movq	%r12, %r14
    000008fc: 	xorl	%r13d, %r13d
    000008ff: 	movq	-0x120(%rbp), %r15
    00000906: 	movdqa	DATAat0x49470(%rip), %xmm7
    0000090e: 	movq	-0x138(%rbp), %rcx
    00000915: 	movq	%r15, %rdi
    00000918: 	movaps	%xmm7, -0x80(%rbp)
    0000091c: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 2332
    00000921: 	movl	$0xb71b00, %edx
    00000926: 	movq	%r15, %rsi
    00000929: 	movq	%r12, %rdi
    0000092c: 	callq	memcpy@PLT # Offset: 2348
    00000931: 	callq	clock@PLT # Offset: 2353
    00000936: 	movq	%rax, start_time(%rip)
    0000093d: 	movl	iterations(%rip), %eax
    00000943: 	testl	%eax, %eax
    00000945: 	jg	.Ltmp1299 # Offset: 2373
    00000947: 	jmp	.Ltmp1300 # Offset: 2375
    00000949: 	nopl	(%rax) # Size: 7
.Ltmp1301:
    00000950: 	movq	%rax, %r15
.Ltmp1299:
    00000953: 	movq	%r14, %rsi
    00000956: 	movl	$0x5dc, %r8d
    0000095c: 	movq	%r15, %rdi
    0000095f: 	addl	$0x1, %r13d
    00000963: 	movl	$0x5dc, %ecx
    00000968: 	movl	$0x7d0, %edx
    0000096d: 	callq	"_ZN17jacobi2D_unrolledIilEclEPKiPiiiii.isra.0/1" # Offset: 2413
    00000972: 	cmpl	iterations(%rip), %r13d
    00000979: 	movq	%r14, %rax
    0000097c: 	movq	%r15, %r14
    0000097f: 	jl	.Ltmp1301 # Offset: 2431
.Ltmp1300:
    00000981: 	movq	%rbx, %rsi
    00000984: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000098b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2443
    00000990: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000997: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000099e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009a5: 	je	.Ltmp1302 # Offset: 2469
.Ltmp1424:
    000009ab: 	movq	-0x20(%rax), %r13
    000009af: 	callq	clock@PLT # Offset: 2479
    000009b4: 	pxor	%xmm0, %xmm0
    000009b8: 	movq	%rax, end_time(%rip)
    000009bf: 	movq	%r13, %rdi
    000009c2: 	subq	start_time(%rip), %rax
    000009c9: 	cvtsi2sd	%rax, %xmm0
    000009ce: 	divsd	DATAat0x49520(%rip), %xmm0
    000009d6: 	callq	_Z13record_resultdPKc # Offset: 2518
    000009db: 	movq	-0x60(%rbp), %rdi
    000009df: 	cmpq	-0x128(%rbp), %rdi
    000009e6: 	je	.Ltmp1303 # Offset: 2534
    000009e8: 	movq	-0x50(%rbp), %rax
    000009ec: 	leaq	0x1(%rax), %rsi
    000009f0: 	callq	_ZdlPvm@PLT # Offset: 2544
.Ltmp1303:
    000009f5: 	movq	-0x130(%rbp), %rsi
    000009fc: 	leaq	DATAat0x492af(%rip), %rdx
    00000a03: 	movq	%rbx, %rdi
    00000a06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2566
    00000a0b: 	movq	-0x120(%rbp), %r14
    00000a12: 	movl	$0x5dc, %edx
    00000a17: 	movl	$0x7d0, %esi
    00000a1c: 	movdqa	DATAat0x49470(%rip), %xmm7
    00000a24: 	movq	-0x138(%rbp), %rcx
    00000a2b: 	movq	%r14, %rdi
    00000a2e: 	movaps	%xmm7, -0x80(%rbp)
    00000a32: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 2610
    00000a37: 	movq	%r14, %rsi
    00000a3a: 	movq	%r12, %rdi
    00000a3d: 	movl	$0xb71b00, %edx
    00000a42: 	callq	memcpy@PLT # Offset: 2626
    00000a47: 	callq	clock@PLT # Offset: 2631
    00000a4c: 	movq	%r14, %rdi
    00000a4f: 	xorl	%ecx, %ecx
    00000a51: 	movq	%rax, start_time(%rip)
    00000a58: 	movl	iterations(%rip), %eax
    00000a5e: 	movl	%eax, %esi
    00000a60: 	testl	%eax, %eax
    00000a62: 	jle	.Ltmp1304 # Offset: 2658
    00000a68: 	movq	-0x120(%rbp), %rax
    00000a6f: 	movl	%ecx, %r14d
    00000a72: 	movq	%rdi, %r13
    00000a75: 	movq	%r12, %r15
    00000a78: 	movq	%r12, -0x148(%rbp)
    00000a7f: 	movq	%rax, -0x140(%rbp)
    00000a86: 	movq	%rbx, -0x150(%rbp)
    00000a8d: 	movl	%esi, %ebx
.Ltmp1308:
    00000a8f: 	leaq	0x1764(%r13), %rdx
    00000a96: 	leaq	0x1774(%r15), %rcx
    00000a9d: 	leaq	0xb70384(%r13), %r11
    00000aa4: 	nopl	(%rax) # Size: 4
.Ltmp1306:
    00000aa8: 	leaq	-0x1760(%rdx), %rax
    00000aaf: 	leaq	0xc(%rdx), %rdi
    00000ab3: 	movq	%rcx, %r9
    00000ab6: 	leaq	0x1780(%rdx), %r8
.Ltmp1305:
    00000abd: 	movslq	0x8(%rdi), %rsi
    00000ac1: 	movslq	0x4(%rdi), %r12
    00000ac5: 	movslq	0xc(%rdi), %r10
    00000ac9: 	movq	%rsi, -0x120(%rbp)
    00000ad0: 	movslq	0x4(%rax), %rsi
    00000ad4: 	addq	%r12, %rsi
    00000ad7: 	movslq	0x4(%r8), %r12
    00000adb: 	addq	%r10, %rsi
    00000ade: 	addq	%r12, %rsi
    00000ae1: 	leaq	0x5(%rsi), %r12
    00000ae5: 	addq	$0x2, %rsi
    00000ae9: 	cmovnsq	%rsi, %r12
    00000aed: 	movslq	0x8(%rax), %rsi
    00000af1: 	sarq	$0x2, %r12
    00000af5: 	movq	%r12, %xmm0
    00000afa: 	movq	-0x120(%rbp), %r12
    00000b01: 	addq	%rsi, %r12
    00000b04: 	movslq	0x10(%rdi), %rsi
    00000b08: 	addq	%rsi, %r12
    00000b0b: 	movslq	0x8(%r8), %rsi
    00000b0f: 	addq	%r12, %rsi
    00000b12: 	leaq	0x5(%rsi), %r12
    00000b16: 	addq	$0x2, %rsi
    00000b1a: 	cmovsq	%r12, %rsi
    00000b1e: 	movslq	(%rdi), %r12
    00000b21: 	sarq	$0x2, %rsi
    00000b25: 	movd	%esi, %xmm7
    00000b29: 	movslq	0xc(%rax), %rsi
    00000b2d: 	punpckldq	%xmm7, %xmm0
    00000b31: 	addq	%r10, %rsi
    00000b34: 	movslq	0x14(%rdi), %r10
    00000b38: 	addq	%r10, %rsi
    00000b3b: 	movslq	0xc(%r8), %r10
    00000b3f: 	addq	%r10, %rsi
    00000b42: 	leaq	0x5(%rsi), %r10
    00000b46: 	addq	$0x2, %rsi
    00000b4a: 	cmovnsq	%rsi, %r10
    00000b4e: 	movslq	(%rax), %rsi
    00000b51: 	addq	%r12, %rsi
    00000b54: 	movslq	(%r8), %r12
    00000b57: 	addq	-0x120(%rbp), %rsi
    00000b5e: 	sarq	$0x2, %r10
    00000b62: 	movl	%r10d, 0xc(%r9)
    00000b66: 	addq	%r12, %rsi
    00000b69: 	movq	%xmm0, 0x4(%r9)
    00000b6f: 	leaq	0x5(%rsi), %r12
    00000b73: 	addq	$0x2, %rsi
    00000b77: 	cmovsq	%r12, %rsi
    00000b7b: 	addq	$0x10, %rax
    00000b7f: 	addq	$0x10, %rdi
    00000b83: 	addq	$0x10, %r8
    00000b87: 	addq	$0x10, %r9
    00000b8b: 	sarq	$0x2, %rsi
    00000b8f: 	movl	%esi, -0x10(%r9)
    00000b93: 	cmpq	%rdx, %rax
    00000b96: 	jne	.Ltmp1305 # Offset: 2966
    00000b9c: 	movslq	(%rax), %rdx
    00000b9f: 	movl	0x1774(%rax), %esi
    00000ba5: 	addl	0x176c(%rax), %esi
    00000bab: 	movslq	%esi, %rsi
    00000bae: 	addq	%rdx, %rsi
    00000bb1: 	movslq	0x2ee0(%rax), %rdx
    00000bb8: 	addq	%rsi, %rdx
    00000bbb: 	leaq	0x5(%rdx), %rsi
    00000bbf: 	addq	$0x2, %rdx
    00000bc3: 	cmovsq	%rsi, %rdx
    00000bc7: 	sarq	$0x2, %rdx
    00000bcb: 	movl	%edx, 0x1760(%rcx)
    00000bd1: 	movslq	0x4(%rax), %rdx
    00000bd5: 	movl	0x1778(%rax), %esi
    00000bdb: 	addl	0x1770(%rax), %esi
    00000be1: 	movslq	%esi, %rsi
    00000be4: 	addq	%rdx, %rsi
    00000be7: 	movslq	0x2ee4(%rax), %rdx
    00000bee: 	addq	%rsi, %rdx
    00000bf1: 	leaq	0x5(%rdx), %rsi
    00000bf5: 	addq	$0x2, %rdx
    00000bf9: 	cmovsq	%rsi, %rdx
    00000bfd: 	addq	$0x1770, %rcx
    00000c04: 	sarq	$0x2, %rdx
    00000c08: 	movl	%edx, -0xc(%rcx)
    00000c0b: 	leaq	0x1770(%rax), %rdx
    00000c12: 	cmpq	%rdx, %r11
    00000c15: 	jne	.Ltmp1306 # Offset: 3093
    00000c1b: 	addl	$0x1, %r14d
    00000c1f: 	movq	%r15, %rax
    00000c22: 	movq	%r13, %r15
    00000c25: 	cmpl	%ebx, %r14d
    00000c28: 	je	.Ltmp1307 # Offset: 3112
    00000c2a: 	movq	%rax, %r13
    00000c2d: 	jmp	.Ltmp1308 # Offset: 3117
.Ltmp1307:
    00000c32: 	movq	-0x140(%rbp), %rax
    00000c39: 	movq	-0x148(%rbp), %r12
    00000c40: 	movq	-0x150(%rbp), %rbx
    00000c47: 	movq	%rax, -0x120(%rbp)
.Ltmp1304:
    00000c4e: 	movq	%rbx, %rsi
    00000c51: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000c58: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3160
    00000c5d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c64: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000c6b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c72: 	je	.Ltmp1309 # Offset: 3186
.Ltmp1423:
    00000c78: 	movq	-0x20(%rax), %r13
    00000c7c: 	callq	clock@PLT # Offset: 3196
    00000c81: 	pxor	%xmm0, %xmm0
    00000c85: 	movq	%rax, end_time(%rip)
    00000c8c: 	movq	%r13, %rdi
    00000c8f: 	subq	start_time(%rip), %rax
    00000c96: 	cvtsi2sd	%rax, %xmm0
    00000c9b: 	divsd	DATAat0x49520(%rip), %xmm0
    00000ca3: 	callq	_Z13record_resultdPKc # Offset: 3235
    00000ca8: 	movq	-0x60(%rbp), %rdi
    00000cac: 	cmpq	-0x128(%rbp), %rdi
    00000cb3: 	je	.Ltmp1310 # Offset: 3251
    00000cb5: 	movq	-0x50(%rbp), %rax
    00000cb9: 	leaq	0x1(%rax), %rsi
    00000cbd: 	callq	_ZdlPvm@PLT # Offset: 3261
.Ltmp1310:
    00000cc2: 	movq	-0x130(%rbp), %rsi
    00000cc9: 	leaq	DATAat0x492c4(%rip), %rdx
    00000cd0: 	movq	%rbx, %rdi
    00000cd3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3283
    00000cd8: 	movl	$0x5dc, %edx
    00000cdd: 	movl	$0x7d0, %esi
    00000ce2: 	movq	%r12, %r14
    00000ce5: 	xorl	%r13d, %r13d
    00000ce8: 	movq	-0x120(%rbp), %r15
    00000cef: 	movdqa	DATAat0x49470(%rip), %xmm7
    00000cf7: 	movq	-0x138(%rbp), %rcx
    00000cfe: 	movq	%r15, %rdi
    00000d01: 	movaps	%xmm7, -0x80(%rbp)
    00000d05: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 3333
    00000d0a: 	movl	$0xb71b00, %edx
    00000d0f: 	movq	%r15, %rsi
    00000d12: 	movq	%r12, %rdi
    00000d15: 	callq	memcpy@PLT # Offset: 3349
    00000d1a: 	callq	clock@PLT # Offset: 3354
    00000d1f: 	movq	%rax, start_time(%rip)
    00000d26: 	movl	iterations(%rip), %eax
    00000d2c: 	testl	%eax, %eax
    00000d2e: 	jg	.Ltmp1311 # Offset: 3374
    00000d30: 	jmp	.Ltmp1312 # Offset: 3376
    00000d32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1313:
    00000d38: 	movq	%rax, %r15
.Ltmp1311:
    00000d3b: 	movq	%r14, %rsi
    00000d3e: 	movl	$0x5dc, %r8d
    00000d44: 	movq	%r15, %rdi
    00000d47: 	addl	$0x1, %r13d
    00000d4b: 	movl	$0x5dc, %ecx
    00000d50: 	movl	$0x7d0, %edx
    00000d55: 	callq	"_ZN18jacobi2D_unrolled3IilEclEPKiPiiiii.isra.0/1" # Offset: 3413
    00000d5a: 	cmpl	iterations(%rip), %r13d
    00000d61: 	movq	%r14, %rax
    00000d64: 	movq	%r15, %r14
    00000d67: 	jl	.Ltmp1313 # Offset: 3431
.Ltmp1312:
    00000d69: 	movq	%rbx, %rsi
    00000d6c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000d73: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3443
    00000d78: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d7f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000d86: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d8d: 	je	.Ltmp1314 # Offset: 3469
.Ltmp1417:
    00000d93: 	movq	-0x20(%rax), %r13
    00000d97: 	callq	clock@PLT # Offset: 3479
    00000d9c: 	pxor	%xmm0, %xmm0
    00000da0: 	movq	%rax, end_time(%rip)
    00000da7: 	movq	%r13, %rdi
    00000daa: 	subq	start_time(%rip), %rax
    00000db1: 	cvtsi2sd	%rax, %xmm0
    00000db6: 	divsd	DATAat0x49520(%rip), %xmm0
    00000dbe: 	callq	_Z13record_resultdPKc # Offset: 3518
    00000dc3: 	movq	-0x60(%rbp), %rdi
    00000dc7: 	cmpq	-0x128(%rbp), %rdi
    00000dce: 	je	.Ltmp1315 # Offset: 3534
    00000dd0: 	movq	-0x50(%rbp), %rax
    00000dd4: 	leaq	0x1(%rax), %rsi
    00000dd8: 	callq	_ZdlPvm@PLT # Offset: 3544
.Ltmp1315:
    00000ddd: 	movq	-0x130(%rbp), %r14
    00000de4: 	leaq	-0xa0(%rbp), %rdi
    00000deb: 	leaq	DATAat0x492d9(%rip), %rdx
    00000df2: 	movq	%r14, %rsi
    00000df5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3573
    00000dfa: 	movl	iterations(%rip), %edx
    00000e00: 	xorl	%r8d, %r8d
    00000e03: 	xorl	%ecx, %ecx
    00000e05: 	movl	$0x2dc6c0, %esi
    00000e0a: 	movq	-0xa0(%rbp), %rdi
    00000e11: 	callq	_Z9summarizePKciiii # Offset: 3601
    00000e16: 	leaq	DATAat0x49238(%rip), %rdx
    00000e1d: 	movq	%r14, %rsi
    00000e20: 	movq	%rbx, %rdi
    00000e23: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3619
    00000e28: 	movl	$0xfa, %edx
    00000e2d: 	movl	$0x12c, %esi
    00000e32: 	movl	$0x3e0, %r13d
    00000e38: 	movq	-0x120(%rbp), %r14
    00000e3f: 	movdqa	DATAat0x49470(%rip), %xmm7
    00000e47: 	movq	-0x138(%rbp), %rcx
    00000e4e: 	movq	%r14, %rdi
    00000e51: 	movaps	%xmm7, -0x80(%rbp)
    00000e55: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 3669
    00000e5a: 	movl	$0x493e0, %edx
    00000e5f: 	movq	%r14, %rsi
    00000e62: 	movq	%r12, %rdi
    00000e65: 	movl	%eax, -0x140(%rbp)
    00000e6b: 	callq	memcpy@PLT # Offset: 3691
    00000e70: 	movl	iterations(%rip), %eax
    00000e76: 	movl	$0x2710, iterations(%rip)
    00000e80: 	movl	%eax, -0x178(%rbp)
    00000e86: 	callq	clock@PLT # Offset: 3718
    00000e8b: 	pxor	%xmm4, %xmm4
    00000e8f: 	movl	$0x0, -0x158(%rbp)
    00000e99: 	movq	%rax, start_time(%rip)
    00000ea0: 	movl	iterations(%rip), %eax
    00000ea6: 	movl	%eax, %ecx
    00000ea8: 	testl	%eax, %eax
    00000eaa: 	jle	.Ltmp1316 # Offset: 3754
    00000eb0: 	movq	-0x120(%rbp), %rax
    00000eb7: 	movq	%r12, -0x158(%rbp)
    00000ebe: 	movq	%r14, -0x120(%rbp)
    00000ec5: 	xorl	%r14d, %r14d
    00000ec8: 	movq	%rax, -0x160(%rbp)
    00000ecf: 	movq	-0x120(%rbp), %rax
    00000ed6: 	movq	%rbx, -0x168(%rbp)
    00000edd: 	movl	%ecx, %ebx
    00000edf: 	nop # Size: 1
.Ltmp1323:
    00000ee0: 	movq	$-0x3e8, %r9
    00000ee7: 	leaq	-0x3e8(%rax), %r15
    00000eee: 	leaq	0x3e8(%rax), %r11
    00000ef5: 	movq	%rax, %rdi
    00000ef8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1318:
    00000f00: 	movq	%r9, %rax
    00000f03: 	movq	%r13, %rcx
    00000f06: 	negq	%rax
    00000f09: 	subq	%r9, %rcx
.Ltmp1317:
    00000f0c: 	movslq	0x4(%r15,%rax), %rsi
    00000f11: 	movslq	(%rdi,%rax), %rdx
    00000f15: 	addq	%rsi, %rdx
    00000f18: 	movslq	0x8(%rdi,%rax), %rsi
    00000f1d: 	addq	%rdx, %rsi
    00000f20: 	movslq	0x4(%r11,%rax), %rdx
    00000f25: 	addq	%rsi, %rdx
    00000f28: 	leaq	0x5(%rdx), %rsi
    00000f2c: 	addq	$0x2, %rdx
    00000f30: 	cmovsq	%rsi, %rdx
    00000f34: 	sarq	$0x2, %rdx
    00000f38: 	movl	%edx, 0x4(%r12,%rax)
    00000f3d: 	addq	$0x4, %rax
    00000f41: 	cmpq	%rax, %rcx
    00000f44: 	jne	.Ltmp1317 # Offset: 3908
    00000f46: 	subq	$0x3e8, %r9
    00000f4d: 	cmpq	$-0x48ff8, %r9
    00000f54: 	jne	.Ltmp1318 # Offset: 3924
    00000f56: 	xorl	%eax, %eax
    00000f58: 	pxor	%xmm2, %xmm2
    00000f5c: 	movq	%rdi, %rcx
    00000f5f: 	nop # Size: 1
.Ltmp1319:
    00000f60: 	movdqu	(%rcx,%rax), %xmm5
    00000f65: 	movdqu	(%r12,%rax), %xmm6
    00000f6b: 	movdqa	%xmm4, %xmm0
    00000f6f: 	addq	$0x10, %rax
    00000f73: 	movdqa	%xmm5, %xmm3
    00000f77: 	movdqa	%xmm6, %xmm1
    00000f7b: 	movaps	%xmm5, -0x120(%rbp)
    00000f82: 	psubd	%xmm6, %xmm3
    00000f86: 	psubd	%xmm5, %xmm1
    00000f8a: 	pcmpgtd	%xmm3, %xmm0
    00000f8e: 	pand	%xmm0, %xmm1
    00000f92: 	pandn	%xmm3, %xmm0
    00000f96: 	movdqa	%xmm4, %xmm3
    00000f9a: 	por	%xmm1, %xmm0
    00000f9e: 	pcmpgtd	%xmm0, %xmm3
    00000fa2: 	movdqa	%xmm0, %xmm1
    00000fa6: 	punpckldq	%xmm3, %xmm1
    00000faa: 	punpckhdq	%xmm3, %xmm0
    00000fae: 	paddq	%xmm1, %xmm2
    00000fb2: 	paddq	%xmm0, %xmm2
    00000fb6: 	cmpq	$0x493e0, %rax
    00000fbc: 	jne	.Ltmp1319 # Offset: 4028
    00000fbe: 	movdqa	%xmm2, %xmm0
    00000fc2: 	movq	%rcx, %rdi
    00000fc5: 	movl	$0x124f8, %edx
    00000fca: 	movq	%r12, %rsi
    00000fcd: 	psrldq	$0x8, %xmm0
    00000fd2: 	movq	%rcx, -0x120(%rbp)
    00000fd9: 	paddq	%xmm0, %xmm2
    00000fdd: 	movq	%xmm2, %r15
    00000fe2: 	callq	_Z14max_differenceIiET_PKS0_S2_m # Offset: 4066
    00000fe7: 	cmpl	$0x1, %r14d
    00000feb: 	pxor	%xmm4, %xmm4
    00000fef: 	jle	.Ltmp1320 # Offset: 4079
    00000ff1: 	cmpq	$0x9, %r15
    00000ff5: 	jle	.Ltmp1321 # Offset: 4085
    00000ff7: 	testl	%eax, %eax
    00000ff9: 	jle	.Ltmp1321 # Offset: 4089
.Ltmp1320:
    00000ffb: 	addl	$0x1, %r14d
    00000fff: 	movq	%r12, %rdx
    00001002: 	movq	-0x120(%rbp), %r12
    00001009: 	cmpl	%ebx, %r14d
    0000100c: 	je	.Ltmp1322 # Offset: 4108
    00001012: 	movq	%rdx, -0x120(%rbp)
    00001019: 	movq	%rdx, %rax
    0000101c: 	jmp	.Ltmp1323 # Offset: 4124
.Ltmp1321:
    00001021: 	movq	-0x160(%rbp), %rbx
    00001028: 	movl	%eax, -0x148(%rbp)
    0000102e: 	movq	%r15, -0x150(%rbp)
    00001035: 	movq	%r12, %r15
    00001038: 	movq	-0x158(%rbp), %r12
    0000103f: 	movq	%rbx, -0x120(%rbp)
    00001046: 	movq	-0x168(%rbp), %rbx
    0000104d: 	movl	%r14d, -0x158(%rbp)
    00001054: 	movq	%r15, %r14
.Ltmp1416:
    00001057: 	callq	clock@PLT # Offset: 4183
    0000105c: 	pxor	%xmm0, %xmm0
    00001060: 	movl	-0x140(%rbp), %r15d
    00001067: 	subl	0x24be4(%r14), %r15d
    0000106e: 	movq	%rax, end_time(%rip)
    00001075: 	subq	start_time(%rip), %rax
    0000107c: 	cvtsi2sd	%rax, %xmm0
    00001081: 	movl	-0x158(%rbp), %eax
    00001087: 	cmpl	%eax, iterations(%rip)
    0000108d: 	divsd	DATAat0x49520(%rip), %xmm0
    00001095: 	movq	%xmm0, %r13
    0000109a: 	jg	.Ltmp1324 # Offset: 4250
    000010a0: 	cmpq	$0xa, -0x150(%rbp)
    000010a8: 	movq	-0x58(%rbp), %rdx
    000010ac: 	movq	-0x60(%rbp), %rsi
    000010b0: 	jle	.Ltmp1325 # Offset: 4272
    000010b6: 	cmpl	$0x1, -0x148(%rbp)
    000010bd: 	jle	.Ltmp1325 # Offset: 4285
    000010c3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000010ca: 	movq	%rax, %rdi
    000010cd: 	movq	%rax, -0x140(%rbp)
    000010d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4308
    000010d9: 	movq	%rax, %rdi
    000010dc: 	leaq	DATAat0x49199(%rip), %rsi
    000010e3: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 4323
.Ltmp1335:
    000010e8: 	movq	-0x140(%rbp), %r14
    000010ef: 	movl	$0x4, %edx
    000010f4: 	leaq	DATAat0x491b6(%rip), %rsi
    000010fb: 	movq	%r14, %rdi
    000010fe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4350
    00001103: 	movl	-0x158(%rbp), %esi
    00001109: 	movq	%r14, %rdi
    0000110c: 	callq	_ZNSolsEi@PLT # Offset: 4364
    00001111: 	movq	%rax, %rdi
    00001114: 	movl	$0xb, %edx
    00001119: 	leaq	DATAat0x491bb(%rip), %rsi
    00001120: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4384
    00001125: 	movl	$0xa, %edx
    0000112a: 	leaq	DATAat0x491c7(%rip), %rsi
    00001131: 	movq	%r14, %rdi
    00001134: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4404
    00001139: 	movq	-0x150(%rbp), %rsi
    00001140: 	movq	%r14, %rdi
    00001143: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 4419
    00001148: 	movl	$0x7, %edx
    0000114d: 	leaq	DATAat0x491d2(%rip), %rsi
    00001154: 	movq	%rax, %rdi
    00001157: 	movq	%rax, %r14
    0000115a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4442
    0000115f: 	movl	-0x148(%rbp), %esi
    00001165: 	movq	%r14, %rdi
    00001168: 	callq	_ZNSolsEi@PLT # Offset: 4456
    0000116d: 	movl	$0x10, %edx
    00001172: 	leaq	DATAat0x491da(%rip), %rsi
    00001179: 	movq	%rax, %rdi
    0000117c: 	movq	%rax, %r14
    0000117f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4479
    00001184: 	movl	%r15d, %esi
    00001187: 	movq	%r14, %rdi
    0000118a: 	callq	_ZNSolsEi@PLT # Offset: 4490
    0000118f: 	movl	$0x8, %edx
    00001194: 	leaq	DATAat0x491eb(%rip), %rsi
    0000119b: 	movq	%rax, %rdi
    0000119e: 	movq	%rax, %r14
    000011a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4513
    000011a6: 	movq	%r13, %xmm0
    000011ab: 	movq	%r14, %rdi
    000011ae: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 4526
    000011b3: 	movq	%rax, %rdi
    000011b6: 	movl	$0x2, %edx
    000011bb: 	leaq	DATAat0x491f4(%rip), %rsi
    000011c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4546
    000011c7: 	movl	-0x178(%rbp), %eax
    000011cd: 	movq	-0x60(%rbp), %rdi
    000011d1: 	movl	%eax, iterations(%rip)
    000011d7: 	cmpq	-0x128(%rbp), %rdi
    000011de: 	je	.Ltmp1326 # Offset: 4574
    000011e0: 	movq	-0x50(%rbp), %rax
    000011e4: 	leaq	0x1(%rax), %rsi
    000011e8: 	callq	_ZdlPvm@PLT # Offset: 4584
.Ltmp1326:
    000011ed: 	movq	-0x130(%rbp), %rsi
    000011f4: 	leaq	DATAat0x4924a(%rip), %rdx
    000011fb: 	movq	%rbx, %rdi
    000011fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4606
    00001203: 	movl	$0xfa, %edx
    00001208: 	movl	$0x12c, %esi
    0000120d: 	movq	%r12, %r15
    00001210: 	xorl	%r14d, %r14d
    00001213: 	movq	-0x120(%rbp), %r13
    0000121a: 	movdqa	DATAat0x49470(%rip), %xmm7
    00001222: 	movq	-0x138(%rbp), %rcx
    00001229: 	movq	%r13, %rdi
    0000122c: 	movaps	%xmm7, -0x80(%rbp)
    00001230: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 4656
    00001235: 	movl	$0x493e0, %edx
    0000123a: 	movq	%r13, %rsi
    0000123d: 	movq	%r12, %rdi
    00001240: 	movl	%eax, -0x158(%rbp)
    00001246: 	callq	memcpy@PLT # Offset: 4678
    0000124b: 	movl	iterations(%rip), %eax
    00001251: 	movl	$0x2710, iterations(%rip)
    0000125b: 	movl	%eax, -0x178(%rbp)
    00001261: 	callq	clock@PLT # Offset: 4705
    00001266: 	pxor	%xmm4, %xmm4
    0000126a: 	movq	%rax, start_time(%rip)
    00001271: 	movl	iterations(%rip), %eax
    00001277: 	movl	%eax, %ecx
    00001279: 	testl	%eax, %eax
    0000127b: 	jle	.Ltmp1327 # Offset: 4731
    00001281: 	movq	-0x120(%rbp), %rax
    00001288: 	movq	%r13, -0x120(%rbp)
    0000128f: 	movq	%rbx, %r13
    00001292: 	movl	%ecx, %ebx
    00001294: 	movq	%r12, -0x168(%rbp)
    0000129b: 	movl	%r14d, %r12d
    0000129e: 	movq	%rax, -0x160(%rbp)
    000012a5: 	movq	-0x120(%rbp), %rax
    000012ac: 	nopl	(%rax) # Size: 4
.Ltmp1334:
    000012b0: 	leaq	0x3ec(%r15), %r10
    000012b7: 	leaq	0x48ff8(%rax), %r8
    000012be: 	movl	$0x1, %r9d
    000012c4: 	nopl	(%rax) # Size: 4
.Ltmp1329:
    000012c8: 	addl	$0x1, %r9d
    000012cc: 	leaq	-0x48c10(%r8), %rdx
    000012d3: 	movq	%r10, %rcx
    000012d6: 	movq	%rax, %rdi
.Ltmp1328:
    000012d9: 	movslq	-0x3e4(%rdx), %rsi
    000012e0: 	movslq	(%rdx), %rax
    000012e3: 	addq	%rsi, %rax
    000012e6: 	movslq	0x8(%rdx), %rsi
    000012ea: 	addq	%rax, %rsi
    000012ed: 	movslq	0x3ec(%rdx), %rax
    000012f4: 	addq	%rsi, %rax
    000012f7: 	leaq	0x5(%rax), %rsi
    000012fb: 	addq	$0x2, %rax
    000012ff: 	cmovsq	%rsi, %rax
    00001303: 	addq	$0x3e8, %rdx
    0000130a: 	addq	$0x3e8, %rcx
    00001311: 	sarq	$0x2, %rax
    00001315: 	movl	%eax, -0x3e8(%rcx)
    0000131b: 	cmpq	%rdx, %r8
    0000131e: 	jne	.Ltmp1328 # Offset: 4894
    00001320: 	movq	%rdi, %rax
    00001323: 	addq	$0x4, %r10
    00001327: 	addq	$0x4, %r8
    0000132b: 	cmpl	$0xf9, %r9d
    00001332: 	jne	.Ltmp1329 # Offset: 4914
    00001334: 	xorl	%eax, %eax
    00001336: 	pxor	%xmm2, %xmm2
    0000133a: 	movq	%rdi, %rcx
    0000133d: 	nopl	(%rax) # Size: 3
.Ltmp1330:
    00001340: 	movdqu	(%rcx,%rax), %xmm5
    00001345: 	movdqu	(%r15,%rax), %xmm6
    0000134b: 	movdqa	%xmm4, %xmm0
    0000134f: 	movq	%rcx, %rdi
    00001352: 	addq	$0x10, %rax
    00001356: 	movdqa	%xmm5, %xmm3
    0000135a: 	movdqa	%xmm6, %xmm1
    0000135e: 	movaps	%xmm5, -0x120(%rbp)
    00001365: 	psubd	%xmm6, %xmm3
    00001369: 	psubd	%xmm5, %xmm1
    0000136d: 	pcmpgtd	%xmm3, %xmm0
    00001371: 	pand	%xmm0, %xmm1
    00001375: 	pandn	%xmm3, %xmm0
    00001379: 	movdqa	%xmm4, %xmm3
    0000137d: 	por	%xmm1, %xmm0
    00001381: 	pcmpgtd	%xmm0, %xmm3
    00001385: 	movdqa	%xmm0, %xmm1
    00001389: 	punpckldq	%xmm3, %xmm1
    0000138d: 	punpckhdq	%xmm3, %xmm0
    00001391: 	paddq	%xmm1, %xmm2
    00001395: 	paddq	%xmm0, %xmm2
    00001399: 	cmpq	$0x493e0, %rax
    0000139f: 	jne	.Ltmp1330 # Offset: 5023
    000013a1: 	movdqa	%xmm2, %xmm0
    000013a5: 	movl	$0x124f8, %edx
    000013aa: 	movq	%r15, %rsi
    000013ad: 	movq	%rcx, -0x120(%rbp)
    000013b4: 	psrldq	$0x8, %xmm0
    000013b9: 	paddq	%xmm0, %xmm2
    000013bd: 	movq	%xmm2, %r14
    000013c2: 	callq	_Z14max_differenceIiET_PKS0_S2_m # Offset: 5058
    000013c7: 	cmpl	$0x1, %r12d
    000013cb: 	pxor	%xmm4, %xmm4
    000013cf: 	jle	.Ltmp1331 # Offset: 5071
    000013d1: 	cmpq	$0x9, %r14
    000013d5: 	jle	.Ltmp1332 # Offset: 5077
    000013db: 	testl	%eax, %eax
    000013dd: 	jle	.Ltmp1332 # Offset: 5085
.Ltmp1331:
    000013e3: 	addl	$0x1, %r12d
    000013e7: 	movq	%r15, %rdx
    000013ea: 	movq	-0x120(%rbp), %r15
    000013f1: 	cmpl	%ebx, %r12d
    000013f4: 	je	.Ltmp1333 # Offset: 5108
    000013fa: 	movq	%rdx, -0x120(%rbp)
    00001401: 	movq	%rdx, %rax
    00001404: 	jmp	.Ltmp1334 # Offset: 5124
.Ltmp1316:
    00001409: 	callq	clock@PLT # Offset: 5129
    0000140e: 	pxor	%xmm0, %xmm0
    00001412: 	movl	-0x140(%rbp), %r15d
    00001419: 	movl	$0x0, -0x148(%rbp)
    00001423: 	movq	%rax, end_time(%rip)
    0000142a: 	subq	start_time(%rip), %rax
    00001431: 	movq	$0x0, -0x150(%rbp)
    0000143c: 	cvtsi2sd	%rax, %xmm0
    00001441: 	subl	0x24be4(%r12), %r15d
    00001449: 	divsd	DATAat0x49520(%rip), %xmm0
    00001451: 	movq	%xmm0, %r13
.Ltmp1324:
    00001456: 	movq	-0x60(%rbp), %rsi
    0000145a: 	movq	-0x58(%rbp), %rdx
.Ltmp1325:
    0000145e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00001465: 	movq	%rax, %rdi
    00001468: 	movq	%rax, -0x140(%rbp)
    0000146f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5231
    00001474: 	movq	%rax, %rdi
    00001477: 	leaq	DATAat0x491ab(%rip), %rsi
    0000147e: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5246
    00001483: 	jmp	.Ltmp1335 # Offset: 5251
.Ltmp1332:
    00001488: 	movq	-0x160(%rbp), %rbx
    0000148f: 	movl	%eax, -0x148(%rbp)
    00001495: 	movq	%r14, -0x150(%rbp)
    0000149c: 	movl	%r12d, %r14d
    0000149f: 	movq	-0x168(%rbp), %r12
    000014a6: 	movq	%rbx, -0x120(%rbp)
    000014ad: 	movq	%r13, %rbx
    000014b0: 	movq	%r15, %r13
.Ltmp1414:
    000014b3: 	callq	clock@PLT # Offset: 5299
    000014b8: 	pxor	%xmm0, %xmm0
    000014bc: 	movq	%rax, end_time(%rip)
    000014c3: 	subq	start_time(%rip), %rax
    000014ca: 	cvtsi2sd	%rax, %xmm0
    000014cf: 	movl	-0x158(%rbp), %eax
    000014d5: 	subl	0x24be4(%r13), %eax
    000014dc: 	divsd	DATAat0x49520(%rip), %xmm0
    000014e4: 	cmpl	iterations(%rip), %r14d
    000014eb: 	movl	%eax, -0x158(%rbp)
    000014f1: 	movq	%xmm0, %r15
    000014f6: 	jl	.Ltmp1336 # Offset: 5366
    000014fc: 	cmpq	$0xa, -0x150(%rbp)
    00001504: 	movq	-0x58(%rbp), %rdx
    00001508: 	movq	-0x60(%rbp), %rsi
    0000150c: 	jle	.Ltmp1337 # Offset: 5388
    00001512: 	cmpl	$0x1, -0x148(%rbp)
    00001519: 	jle	.Ltmp1337 # Offset: 5401
    0000151f: 	movq	-0x140(%rbp), %rdi
    00001526: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5414
    0000152b: 	movq	%rax, %rdi
    0000152e: 	leaq	DATAat0x49199(%rip), %rsi
    00001535: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5429
.Ltmp1385:
    0000153a: 	movq	-0x140(%rbp), %r13
    00001541: 	movl	$0x4, %edx
    00001546: 	leaq	DATAat0x491b6(%rip), %rsi
    0000154d: 	movq	%r13, %rdi
    00001550: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5456
    00001555: 	movl	%r14d, %esi
    00001558: 	movq	%r13, %rdi
    0000155b: 	callq	_ZNSolsEi@PLT # Offset: 5467
    00001560: 	movq	%rax, %rdi
    00001563: 	leaq	DATAat0x491bb(%rip), %rsi
    0000156a: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5482
    0000156f: 	movl	$0xa, %edx
    00001574: 	leaq	DATAat0x491c7(%rip), %rsi
    0000157b: 	movq	%r13, %rdi
    0000157e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5502
    00001583: 	movq	-0x150(%rbp), %rsi
    0000158a: 	movq	%r13, %rdi
    0000158d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 5517
    00001592: 	movl	$0x7, %edx
    00001597: 	leaq	DATAat0x491d2(%rip), %rsi
    0000159e: 	movq	%rax, %rdi
    000015a1: 	movq	%rax, %r14
    000015a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5540
    000015a9: 	movl	-0x148(%rbp), %esi
    000015af: 	movq	%r14, %rdi
    000015b2: 	callq	_ZNSolsEi@PLT # Offset: 5554
    000015b7: 	movl	$0x10, %edx
    000015bc: 	leaq	DATAat0x491da(%rip), %rsi
    000015c3: 	movq	%rax, %rdi
    000015c6: 	movq	%rax, %r14
    000015c9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5577
    000015ce: 	movl	-0x158(%rbp), %esi
    000015d4: 	movq	%r14, %rdi
    000015d7: 	callq	_ZNSolsEi@PLT # Offset: 5591
    000015dc: 	movl	$0x8, %edx
    000015e1: 	leaq	DATAat0x491eb(%rip), %rsi
    000015e8: 	movq	%rax, %rdi
    000015eb: 	movq	%rax, %r14
    000015ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5614
    000015f3: 	movq	%r15, %xmm0
    000015f8: 	movq	%r14, %rdi
    000015fb: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5627
    00001600: 	movq	%rax, %rdi
    00001603: 	movl	$0x2, %edx
    00001608: 	leaq	DATAat0x491f4(%rip), %rsi
    0000160f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5647
    00001614: 	movl	-0x178(%rbp), %eax
    0000161a: 	movq	-0x60(%rbp), %rdi
    0000161e: 	movl	%eax, iterations(%rip)
    00001624: 	cmpq	-0x128(%rbp), %rdi
    0000162b: 	je	.Ltmp1338 # Offset: 5675
    0000162d: 	movq	-0x50(%rbp), %rax
    00001631: 	leaq	0x1(%rax), %rsi
    00001635: 	callq	_ZdlPvm@PLT # Offset: 5685
.Ltmp1338:
    0000163a: 	movq	-0x130(%rbp), %rsi
    00001641: 	leaq	DATAat0x4925d(%rip), %rdx
    00001648: 	movq	%rbx, %rdi
    0000164b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5707
    00001650: 	subq	$0x8, %rsp
    00001654: 	movq	%rbx, %r9
    00001657: 	movl	$0xfa, %r8d
    0000165d: 	movq	%r12, %rsi
    00001660: 	pushq	$0x1
    00001662: 	movl	$0xfa, %ecx
    00001667: 	movl	$0x12c, %edx
    0000166c: 	movq	-0x120(%rbp), %rdi
    00001673: 	callq	_Z20convergenceLaplace2DIil17jacobi2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5747
    00001678: 	popq	%r14
    0000167a: 	movq	-0x60(%rbp), %rdi
    0000167e: 	popq	%r15
    00001680: 	cmpq	-0x128(%rbp), %rdi
    00001687: 	je	.Ltmp1339 # Offset: 5767
    00001689: 	movq	-0x50(%rbp), %rax
    0000168d: 	leaq	0x1(%rax), %rsi
    00001691: 	callq	_ZdlPvm@PLT # Offset: 5777
.Ltmp1339:
    00001696: 	movq	-0x130(%rbp), %rsi
    0000169d: 	leaq	DATAat0x49271(%rip), %rdx
    000016a4: 	movq	%rbx, %rdi
    000016a7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5799
    000016ac: 	subq	$0x8, %rsp
    000016b0: 	movq	%rbx, %r9
    000016b3: 	movl	$0xfa, %r8d
    000016b9: 	movq	%r12, %rsi
    000016bc: 	pushq	$0x1
    000016be: 	movl	$0xfa, %ecx
    000016c3: 	movl	$0x12c, %edx
    000016c8: 	movq	-0x120(%rbp), %rdi
    000016cf: 	callq	_Z20convergenceLaplace2DIil18jacobi2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5839
    000016d4: 	popq	%r11
    000016d6: 	movq	-0x60(%rbp), %rdi
    000016da: 	popq	%r13
    000016dc: 	cmpq	-0x128(%rbp), %rdi
    000016e3: 	je	.Ltmp1340 # Offset: 5859
    000016e5: 	movq	-0x50(%rbp), %rax
    000016e9: 	leaq	0x1(%rax), %rsi
    000016ed: 	callq	_ZdlPvm@PLT # Offset: 5869
.Ltmp1340:
    000016f2: 	movq	-0x130(%rbp), %rsi
    000016f9: 	leaq	DATAat0x49286(%rip), %rdx
    00001700: 	movq	%rbx, %rdi
    00001703: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5891
    00001708: 	subq	$0x8, %rsp
    0000170c: 	movq	%rbx, %r9
    0000170f: 	movl	$0xfa, %r8d
    00001715: 	movq	%r12, %rsi
    00001718: 	pushq	$0x1
    0000171a: 	movl	$0xfa, %ecx
    0000171f: 	movl	$0x12c, %edx
    00001724: 	movq	-0x120(%rbp), %rdi
    0000172b: 	callq	_Z20convergenceLaplace2DIil18jacobi2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5931
    00001730: 	popq	%r9
    00001732: 	movq	-0x60(%rbp), %rdi
    00001736: 	popq	%r10
    00001738: 	cmpq	-0x128(%rbp), %rdi
    0000173f: 	je	.Ltmp1341 # Offset: 5951
    00001741: 	movq	-0x50(%rbp), %rax
    00001745: 	leaq	0x1(%rax), %rsi
    00001749: 	callq	_ZdlPvm@PLT # Offset: 5961
.Ltmp1341:
    0000174e: 	movq	-0x130(%rbp), %rsi
    00001755: 	leaq	DATAat0x4929b(%rip), %rdx
    0000175c: 	movq	%rbx, %rdi
    0000175f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5983
    00001764: 	subq	$0x8, %rsp
    00001768: 	movq	%rbx, %r9
    0000176b: 	movl	$0xfa, %r8d
    00001771: 	movq	%r12, %rsi
    00001774: 	pushq	$0x1
    00001776: 	movl	$0xfa, %ecx
    0000177b: 	movl	$0x12c, %edx
    00001780: 	movq	-0x120(%rbp), %rdi
    00001787: 	callq	_Z20convergenceLaplace2DIil17jacobi2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6023
    0000178c: 	popq	%rdi
    0000178d: 	movq	-0x60(%rbp), %rdi
    00001791: 	popq	%r8
    00001793: 	cmpq	-0x128(%rbp), %rdi
    0000179a: 	je	.Ltmp1342 # Offset: 6042
    0000179c: 	movq	-0x50(%rbp), %rax
    000017a0: 	leaq	0x1(%rax), %rsi
    000017a4: 	callq	_ZdlPvm@PLT # Offset: 6052
.Ltmp1342:
    000017a9: 	movq	-0x130(%rbp), %rsi
    000017b0: 	leaq	DATAat0x492af(%rip), %rdx
    000017b7: 	movq	%rbx, %rdi
    000017ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6074
    000017bf: 	subq	$0x8, %rsp
    000017c3: 	movq	%rbx, %r9
    000017c6: 	movl	$0xfa, %r8d
    000017cc: 	movq	%r12, %rsi
    000017cf: 	pushq	$0x1
    000017d1: 	movl	$0xfa, %ecx
    000017d6: 	movl	$0x12c, %edx
    000017db: 	movq	-0x120(%rbp), %rdi
    000017e2: 	callq	_Z20convergenceLaplace2DIil18jacobi2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6114
    000017e7: 	popq	%rcx
    000017e8: 	movq	-0x60(%rbp), %rdi
    000017ec: 	popq	%rsi
    000017ed: 	cmpq	-0x128(%rbp), %rdi
    000017f4: 	je	.Ltmp1343 # Offset: 6132
    000017f6: 	movq	-0x50(%rbp), %rax
    000017fa: 	leaq	0x1(%rax), %rsi
    000017fe: 	callq	_ZdlPvm@PLT # Offset: 6142
.Ltmp1343:
    00001803: 	movq	-0x130(%rbp), %rsi
    0000180a: 	leaq	DATAat0x492c4(%rip), %rdx
    00001811: 	movq	%rbx, %rdi
    00001814: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6164
    00001819: 	subq	$0x8, %rsp
    0000181d: 	movq	%rbx, %r9
    00001820: 	movl	$0xfa, %r8d
    00001826: 	movq	%r12, %rsi
    00001829: 	pushq	$0x1
    0000182b: 	movl	$0xfa, %ecx
    00001830: 	movl	$0x12c, %edx
    00001835: 	movq	-0x120(%rbp), %rdi
    0000183c: 	callq	_Z20convergenceLaplace2DIil18jacobi2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6204
    00001841: 	popq	%rax
    00001842: 	movq	-0x60(%rbp), %rdi
    00001846: 	popq	%rdx
    00001847: 	cmpq	-0x128(%rbp), %rdi
    0000184e: 	je	.Ltmp1344 # Offset: 6222
    00001850: 	movq	-0x50(%rbp), %rax
    00001854: 	leaq	0x1(%rax), %rsi
    00001858: 	callq	_ZdlPvm@PLT # Offset: 6232
.Ltmp1344:
    0000185d: 	movq	-0x130(%rbp), %rsi
    00001864: 	leaq	DATAat0x492f0(%rip), %rdx
    0000186b: 	movq	%rbx, %rdi
    0000186e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6254
    00001873: 	movq	%rbx, %r9
    00001876: 	movl	$0x5dc, %ecx
    0000187b: 	movl	$0x7d0, %edx
    00001880: 	movq	%r12, %rsi
    00001883: 	movq	-0x120(%rbp), %rdi
    0000188a: 	movl	$0x5dc, %r8d
    00001890: 	callq	_Z13testLaplace2DIil19jacobi_sor2D_simpleIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6288
    00001895: 	movq	-0x60(%rbp), %rdi
    00001899: 	cmpq	-0x128(%rbp), %rdi
    000018a0: 	je	.Ltmp1345 # Offset: 6304
    000018a2: 	movq	-0x50(%rbp), %rax
    000018a6: 	leaq	0x1(%rax), %rsi
    000018aa: 	callq	_ZdlPvm@PLT # Offset: 6314
.Ltmp1345:
    000018af: 	movq	-0x130(%rbp), %rsi
    000018b6: 	leaq	DATAat0x49306(%rip), %rdx
    000018bd: 	movq	%rbx, %rdi
    000018c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6336
    000018c5: 	movq	%rbx, %r9
    000018c8: 	movl	$0x5dc, %ecx
    000018cd: 	movl	$0x7d0, %edx
    000018d2: 	movq	%r12, %rsi
    000018d5: 	movq	-0x120(%rbp), %rdi
    000018dc: 	movl	$0x5dc, %r8d
    000018e2: 	callq	_Z13testLaplace2DIil20jacobi_sor2D_swappedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6370
    000018e7: 	movq	-0x60(%rbp), %rdi
    000018eb: 	cmpq	-0x128(%rbp), %rdi
    000018f2: 	je	.Ltmp1346 # Offset: 6386
    000018f4: 	movq	-0x50(%rbp), %rax
    000018f8: 	leaq	0x1(%rax), %rsi
    000018fc: 	callq	_ZdlPvm@PLT # Offset: 6396
.Ltmp1346:
    00001901: 	movq	-0x130(%rbp), %rsi
    00001908: 	leaq	DATAat0x4931d(%rip), %rdx
    0000190f: 	movq	%rbx, %rdi
    00001912: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6418
    00001917: 	movq	-0x120(%rbp), %r14
    0000191e: 	movl	$0x5dc, %edx
    00001923: 	movl	$0x7d0, %esi
    00001928: 	movdqa	DATAat0x49470(%rip), %xmm7
    00001930: 	movq	-0x138(%rbp), %rcx
    00001937: 	movq	%r14, %rdi
    0000193a: 	movaps	%xmm7, -0x80(%rbp)
    0000193e: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 6462
    00001943: 	movl	$0xb71b00, %edx
    00001948: 	movq	%r14, %rsi
    0000194b: 	movq	%r12, %rdi
    0000194e: 	callq	memcpy@PLT # Offset: 6478
    00001953: 	callq	clock@PLT # Offset: 6483
    00001958: 	movq	%r12, %r10
    0000195b: 	movq	%r14, %r9
    0000195e: 	xorl	%r11d, %r11d
    00001961: 	movl	iterations(%rip), %r15d
    00001968: 	movq	%rax, start_time(%rip)
    0000196f: 	movq	$-0x1768, %r8
    00001976: 	movq	-0x120(%rbp), %rcx
    0000197d: 	testl	%r15d, %r15d
    00001980: 	jle	.Ltmp1347 # Offset: 6528
.Ltmp1351:
    00001986: 	movq	$-0xb6ec20, %rax
    0000198d: 	leaq	-0x1770(%r9), %r13
    00001994: 	leaq	0x1770(%r9), %rdi
    0000199b: 	movq	%rcx, %rdx
    0000199e: 	nop # Size: 2
.Ltmp1349:
    000019a0: 	movq	%rdx, -0x120(%rbp)
    000019a7: 	movq	%rax, %rcx
    000019aa: 	movq	%r8, %rsi
    000019ad: 	negq	%rcx
    000019b0: 	subq	%rax, %rsi
.Ltmp1348:
    000019b3: 	movslq	0x1768(%r13,%rcx), %rdx
    000019bb: 	movslq	0x1764(%r9,%rcx), %r14
    000019c3: 	addq	%rdx, %r14
    000019c6: 	movslq	0x176c(%r9,%rcx), %rdx
    000019ce: 	addq	%r14, %rdx
    000019d1: 	movslq	0x1768(%rdi,%rcx), %r14
    000019d9: 	addq	%rdx, %r14
    000019dc: 	leaq	0x5(%r14), %rdx
    000019e0: 	addq	$0x2, %r14
    000019e4: 	cmovnsq	%r14, %rdx
    000019e8: 	sarq	$0x2, %rdx
    000019ec: 	subl	0x1768(%r10,%rcx), %edx
    000019f4: 	imull	$0x71, %edx, %edx
    000019f7: 	sarl	$0x6, %edx
    000019fa: 	addl	0x1768(%r10,%rcx), %edx
    00001a02: 	movl	%edx, 0x1768(%r10,%rcx)
    00001a0a: 	subq	$0x4, %rcx
    00001a0e: 	cmpq	%rcx, %rsi
    00001a11: 	jne	.Ltmp1348 # Offset: 6673
    00001a13: 	movq	-0x120(%rbp), %rdx
    00001a1a: 	addq	$0x1770, %rax
    00001a20: 	jne	.Ltmp1349 # Offset: 6688
    00001a26: 	addl	$0x1, %r11d
    00001a2a: 	movq	%r10, %rax
    00001a2d: 	movq	%rdx, %rcx
    00001a30: 	movq	%r9, %r10
    00001a33: 	cmpl	%r15d, %r11d
    00001a36: 	je	.Ltmp1350 # Offset: 6710
    00001a38: 	movq	%rax, %r9
    00001a3b: 	jmp	.Ltmp1351 # Offset: 6715
.Ltmp1350:
    00001a40: 	movq	%rdx, -0x120(%rbp)
.Ltmp1347:
    00001a47: 	movq	%rbx, %rsi
    00001a4a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a51: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6737
    00001a56: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a5d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001a64: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a6b: 	je	.Ltmp1352 # Offset: 6763
.Ltmp1427:
    00001a71: 	movq	-0x20(%rax), %r13
    00001a75: 	callq	clock@PLT # Offset: 6773
    00001a7a: 	pxor	%xmm0, %xmm0
    00001a7e: 	movq	%rax, end_time(%rip)
    00001a85: 	movq	%r13, %rdi
    00001a88: 	subq	start_time(%rip), %rax
    00001a8f: 	cvtsi2sd	%rax, %xmm0
    00001a94: 	divsd	DATAat0x49520(%rip), %xmm0
    00001a9c: 	callq	_Z13record_resultdPKc # Offset: 6812
    00001aa1: 	movq	-0x60(%rbp), %rdi
    00001aa5: 	cmpq	-0x128(%rbp), %rdi
    00001aac: 	je	.Ltmp1353 # Offset: 6828
    00001aae: 	movq	-0x50(%rbp), %rax
    00001ab2: 	leaq	0x1(%rax), %rsi
    00001ab6: 	callq	_ZdlPvm@PLT # Offset: 6838
.Ltmp1353:
    00001abb: 	movq	-0x130(%rbp), %rsi
    00001ac2: 	leaq	DATAat0x49335(%rip), %rdx
    00001ac9: 	movq	%rbx, %rdi
    00001acc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6860
    00001ad1: 	movq	-0x120(%rbp), %r14
    00001ad8: 	movl	$0x5dc, %edx
    00001add: 	movl	$0x7d0, %esi
    00001ae2: 	movdqa	DATAat0x49470(%rip), %xmm7
    00001aea: 	movq	-0x138(%rbp), %rcx
    00001af1: 	movq	%r14, %rdi
    00001af4: 	movaps	%xmm7, -0x80(%rbp)
    00001af8: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 6904
    00001afd: 	movl	$0xb71b00, %edx
    00001b02: 	movq	%r14, %rsi
    00001b05: 	movq	%r12, %rdi
    00001b08: 	callq	memcpy@PLT # Offset: 6920
    00001b0d: 	callq	clock@PLT # Offset: 6925
    00001b12: 	movq	%r12, %r10
    00001b15: 	movq	%r14, %r9
    00001b18: 	xorl	%r11d, %r11d
    00001b1b: 	movl	iterations(%rip), %r15d
    00001b22: 	movq	%rax, start_time(%rip)
    00001b29: 	movq	$-0x1768, %r8
    00001b30: 	movq	-0x120(%rbp), %rcx
    00001b37: 	testl	%r15d, %r15d
    00001b3a: 	jle	.Ltmp1354 # Offset: 6970
.Ltmp1358:
    00001b40: 	movq	$-0x1770, %rax
    00001b47: 	leaq	-0x1770(%r9), %r13
    00001b4e: 	leaq	0x1770(%r9), %rdi
    00001b55: 	movq	%rcx, %rdx
    00001b58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1356:
    00001b60: 	movq	%rdx, -0x120(%rbp)
    00001b67: 	movq	%rax, %rcx
    00001b6a: 	movq	%r8, %rsi
    00001b6d: 	negq	%rcx
    00001b70: 	subq	%rax, %rsi
.Ltmp1355:
    00001b73: 	movslq	0x1768(%r13,%rcx), %rdx
    00001b7b: 	movslq	0x1764(%r9,%rcx), %r14
    00001b83: 	addq	%rdx, %r14
    00001b86: 	movslq	0x176c(%r9,%rcx), %rdx
    00001b8e: 	addq	%r14, %rdx
    00001b91: 	movslq	0x1768(%rdi,%rcx), %r14
    00001b99: 	addq	%rdx, %r14
    00001b9c: 	leaq	0x5(%r14), %rdx
    00001ba0: 	addq	$0x2, %r14
    00001ba4: 	cmovnsq	%r14, %rdx
    00001ba8: 	sarq	$0x2, %rdx
    00001bac: 	subl	0x1768(%r10,%rcx), %edx
    00001bb4: 	imull	$0x71, %edx, %edx
    00001bb7: 	sarl	$0x6, %edx
    00001bba: 	addl	0x1768(%r10,%rcx), %edx
    00001bc2: 	movl	%edx, 0x1768(%r10,%rcx)
    00001bca: 	subq	$0x4, %rcx
    00001bce: 	cmpq	%rsi, %rcx
    00001bd1: 	jne	.Ltmp1355 # Offset: 7121
    00001bd3: 	subq	$0x1770, %rax
    00001bd9: 	movq	-0x120(%rbp), %rdx
    00001be0: 	cmpq	$-0xb70390, %rax
    00001be6: 	jne	.Ltmp1356 # Offset: 7142
    00001bec: 	addl	$0x1, %r11d
    00001bf0: 	movq	%r10, %rax
    00001bf3: 	movq	%rdx, %rcx
    00001bf6: 	movq	%r9, %r10
    00001bf9: 	cmpl	%r15d, %r11d
    00001bfc: 	je	.Ltmp1357 # Offset: 7164
    00001bfe: 	movq	%rax, %r9
    00001c01: 	jmp	.Ltmp1358 # Offset: 7169
.Ltmp1357:
    00001c06: 	movq	%rdx, -0x120(%rbp)
.Ltmp1354:
    00001c0d: 	movq	%rbx, %rsi
    00001c10: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001c17: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7191
    00001c1c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c23: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001c2a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c31: 	je	.Ltmp1359 # Offset: 7217
.Ltmp1429:
    00001c37: 	movq	-0x20(%rax), %r13
    00001c3b: 	callq	clock@PLT # Offset: 7227
    00001c40: 	pxor	%xmm0, %xmm0
    00001c44: 	movq	%rax, end_time(%rip)
    00001c4b: 	movq	%r13, %rdi
    00001c4e: 	subq	start_time(%rip), %rax
    00001c55: 	cvtsi2sd	%rax, %xmm0
    00001c5a: 	divsd	DATAat0x49520(%rip), %xmm0
    00001c62: 	callq	_Z13record_resultdPKc # Offset: 7266
    00001c67: 	movq	-0x60(%rbp), %rdi
    00001c6b: 	cmpq	-0x128(%rbp), %rdi
    00001c72: 	je	.Ltmp1360 # Offset: 7282
    00001c74: 	movq	-0x50(%rbp), %rax
    00001c78: 	leaq	0x1(%rax), %rsi
    00001c7c: 	callq	_ZdlPvm@PLT # Offset: 7292
.Ltmp1360:
    00001c81: 	movq	-0x130(%rbp), %rsi
    00001c88: 	leaq	DATAat0x4934e(%rip), %rdx
    00001c8f: 	movq	%rbx, %rdi
    00001c92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7314
    00001c97: 	movq	%rbx, %r9
    00001c9a: 	movl	$0x5dc, %ecx
    00001c9f: 	movl	$0x7d0, %edx
    00001ca4: 	movq	%r12, %rsi
    00001ca7: 	movq	-0x120(%rbp), %rdi
    00001cae: 	movl	$0x5dc, %r8d
    00001cb4: 	callq	_Z13testLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7348
    00001cb9: 	movq	-0x60(%rbp), %rdi
    00001cbd: 	cmpq	-0x128(%rbp), %rdi
    00001cc4: 	je	.Ltmp1361 # Offset: 7364
    00001cc6: 	movq	-0x50(%rbp), %rax
    00001cca: 	leaq	0x1(%rax), %rsi
    00001cce: 	callq	_ZdlPvm@PLT # Offset: 7374
.Ltmp1361:
    00001cd3: 	movq	-0x130(%rbp), %rsi
    00001cda: 	leaq	DATAat0x49367(%rip), %rdx
    00001ce1: 	movq	%rbx, %rdi
    00001ce4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7396
    00001ce9: 	movl	$0x5dc, %edx
    00001cee: 	movl	$0x7d0, %esi
    00001cf3: 	movq	%r12, %r14
    00001cf6: 	xorl	%r13d, %r13d
    00001cf9: 	movq	-0x120(%rbp), %r15
    00001d00: 	movdqa	DATAat0x49470(%rip), %xmm7
    00001d08: 	movq	-0x138(%rbp), %rcx
    00001d0f: 	movq	%r15, %rdi
    00001d12: 	movaps	%xmm7, -0x80(%rbp)
    00001d16: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 7446
    00001d1b: 	movl	$0xb71b00, %edx
    00001d20: 	movq	%r15, %rsi
    00001d23: 	movq	%r12, %rdi
    00001d26: 	callq	memcpy@PLT # Offset: 7462
    00001d2b: 	callq	clock@PLT # Offset: 7467
    00001d30: 	movq	%rax, start_time(%rip)
    00001d37: 	movl	iterations(%rip), %eax
    00001d3d: 	testl	%eax, %eax
    00001d3f: 	jg	.Ltmp1362 # Offset: 7487
    00001d41: 	jmp	.Ltmp1363 # Offset: 7489
    00001d43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1364:
    00001d48: 	movq	%rax, %r15
.Ltmp1362:
    00001d4b: 	movq	%r14, %rsi
    00001d4e: 	movl	$0x5dc, %r8d
    00001d54: 	movq	%r15, %rdi
    00001d57: 	addl	$0x1, %r13d
    00001d5b: 	movl	$0x5dc, %ecx
    00001d60: 	movl	$0x7d0, %edx
    00001d65: 	callq	"_ZN21jacobi_sor2D_unrolledIilEclEPiS1_iiii.isra.0/1" # Offset: 7525
    00001d6a: 	cmpl	iterations(%rip), %r13d
    00001d71: 	movq	%r14, %rax
    00001d74: 	movq	%r15, %r14
    00001d77: 	jl	.Ltmp1364 # Offset: 7543
.Ltmp1363:
    00001d79: 	movq	%rbx, %rsi
    00001d7c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001d83: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7555
    00001d88: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001d8f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001d96: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001d9d: 	je	.Ltmp1365 # Offset: 7581
.Ltmp1428:
    00001da3: 	movq	-0x20(%rax), %r13
    00001da7: 	callq	clock@PLT # Offset: 7591
    00001dac: 	pxor	%xmm0, %xmm0
    00001db0: 	movq	%rax, end_time(%rip)
    00001db7: 	movq	%r13, %rdi
    00001dba: 	subq	start_time(%rip), %rax
    00001dc1: 	cvtsi2sd	%rax, %xmm0
    00001dc6: 	divsd	DATAat0x49520(%rip), %xmm0
    00001dce: 	callq	_Z13record_resultdPKc # Offset: 7630
    00001dd3: 	movq	-0x60(%rbp), %rdi
    00001dd7: 	cmpq	-0x128(%rbp), %rdi
    00001dde: 	je	.Ltmp1366 # Offset: 7646
    00001de0: 	movq	-0x50(%rbp), %rax
    00001de4: 	leaq	0x1(%rax), %rsi
    00001de8: 	callq	_ZdlPvm@PLT # Offset: 7656
.Ltmp1366:
    00001ded: 	movq	-0x130(%rbp), %rsi
    00001df4: 	leaq	DATAat0x4937f(%rip), %rdx
    00001dfb: 	movq	%rbx, %rdi
    00001dfe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7678
    00001e03: 	movl	$0x5dc, %edx
    00001e08: 	movl	$0x7d0, %esi
    00001e0d: 	movq	%r12, %r14
    00001e10: 	xorl	%r13d, %r13d
    00001e13: 	movq	-0x120(%rbp), %r15
    00001e1a: 	movdqa	DATAat0x49470(%rip), %xmm7
    00001e22: 	movq	-0x138(%rbp), %rcx
    00001e29: 	movq	%r15, %rdi
    00001e2c: 	movaps	%xmm7, -0x80(%rbp)
    00001e30: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 7728
    00001e35: 	movl	$0xb71b00, %edx
    00001e3a: 	movq	%r15, %rsi
    00001e3d: 	movq	%r12, %rdi
    00001e40: 	callq	memcpy@PLT # Offset: 7744
    00001e45: 	callq	clock@PLT # Offset: 7749
    00001e4a: 	movq	%rax, start_time(%rip)
    00001e51: 	movl	iterations(%rip), %eax
    00001e57: 	testl	%eax, %eax
    00001e59: 	jg	.Ltmp1367 # Offset: 7769
    00001e5b: 	jmp	.Ltmp1368 # Offset: 7771
    00001e5d: 	nopl	(%rax) # Size: 3
.Ltmp1369:
    00001e60: 	movq	%rax, %r15
.Ltmp1367:
    00001e63: 	movq	%r14, %rsi
    00001e66: 	movl	$0x5dc, %r8d
    00001e6c: 	movq	%r15, %rdi
    00001e6f: 	addl	$0x1, %r13d
    00001e73: 	movl	$0x5dc, %ecx
    00001e78: 	movl	$0x7d0, %edx
    00001e7d: 	callq	"_ZN22jacobi_sor2D_unrolled2IilEclEPiS1_iiii.isra.0/1" # Offset: 7805
    00001e82: 	cmpl	iterations(%rip), %r13d
    00001e89: 	movq	%r14, %rax
    00001e8c: 	movq	%r15, %r14
    00001e8f: 	jl	.Ltmp1369 # Offset: 7823
.Ltmp1368:
    00001e91: 	movq	%rbx, %rsi
    00001e94: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e9b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7835
    00001ea0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ea7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001eae: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001eb5: 	je	.Ltmp1370 # Offset: 7861
.Ltmp1426:
    00001ebb: 	movq	-0x20(%rax), %r13
    00001ebf: 	callq	clock@PLT # Offset: 7871
    00001ec4: 	pxor	%xmm0, %xmm0
    00001ec8: 	movq	%rax, end_time(%rip)
    00001ecf: 	movq	%r13, %rdi
    00001ed2: 	subq	start_time(%rip), %rax
    00001ed9: 	cvtsi2sd	%rax, %xmm0
    00001ede: 	divsd	DATAat0x49520(%rip), %xmm0
    00001ee6: 	callq	_Z13record_resultdPKc # Offset: 7910
    00001eeb: 	movq	-0x60(%rbp), %rdi
    00001eef: 	cmpq	-0x128(%rbp), %rdi
    00001ef6: 	je	.Ltmp1371 # Offset: 7926
    00001ef8: 	movq	-0x50(%rbp), %rax
    00001efc: 	leaq	0x1(%rax), %rsi
    00001f00: 	callq	_ZdlPvm@PLT # Offset: 7936
.Ltmp1371:
    00001f05: 	movq	-0x130(%rbp), %rsi
    00001f0c: 	leaq	DATAat0x49398(%rip), %rdx
    00001f13: 	movq	%rbx, %rdi
    00001f16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7958
    00001f1b: 	movl	$0x5dc, %edx
    00001f20: 	movl	$0x7d0, %esi
    00001f25: 	movq	%r12, %r14
    00001f28: 	xorl	%r13d, %r13d
    00001f2b: 	movq	-0x120(%rbp), %r15
    00001f32: 	movdqa	DATAat0x49470(%rip), %xmm7
    00001f3a: 	movq	-0x138(%rbp), %rcx
    00001f41: 	movq	%r15, %rdi
    00001f44: 	movaps	%xmm7, -0x80(%rbp)
    00001f48: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 8008
    00001f4d: 	movl	$0xb71b00, %edx
    00001f52: 	movq	%r15, %rsi
    00001f55: 	movq	%r12, %rdi
    00001f58: 	callq	memcpy@PLT # Offset: 8024
    00001f5d: 	callq	clock@PLT # Offset: 8029
    00001f62: 	movq	%rax, start_time(%rip)
    00001f69: 	movl	iterations(%rip), %eax
    00001f6f: 	testl	%eax, %eax
    00001f71: 	jg	.Ltmp1372 # Offset: 8049
    00001f73: 	jmp	.Ltmp1373 # Offset: 8051
    00001f75: 	nopl	(%rax) # Size: 3
.Ltmp1374:
    00001f78: 	movq	%rax, %r15
.Ltmp1372:
    00001f7b: 	movq	%r14, %rsi
    00001f7e: 	movl	$0x5dc, %r8d
    00001f84: 	movq	%r15, %rdi
    00001f87: 	addl	$0x1, %r13d
    00001f8b: 	movl	$0x5dc, %ecx
    00001f90: 	movl	$0x7d0, %edx
    00001f95: 	callq	"_ZN22jacobi_sor2D_unrolled3IilEclEPiS1_iiii.isra.0/1" # Offset: 8085
    00001f9a: 	cmpl	iterations(%rip), %r13d
    00001fa1: 	movq	%r14, %rax
    00001fa4: 	movq	%r15, %r14
    00001fa7: 	jl	.Ltmp1374 # Offset: 8103
.Ltmp1373:
    00001fa9: 	movq	%rbx, %rsi
    00001fac: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001fb3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8115
    00001fb8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001fbf: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001fc6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001fcd: 	je	.Ltmp1375 # Offset: 8141
.Ltmp1425:
    00001fd3: 	movq	-0x20(%rax), %r13
    00001fd7: 	callq	clock@PLT # Offset: 8151
    00001fdc: 	pxor	%xmm0, %xmm0
    00001fe0: 	movq	%rax, end_time(%rip)
    00001fe7: 	movq	%r13, %rdi
    00001fea: 	subq	start_time(%rip), %rax
    00001ff1: 	cvtsi2sd	%rax, %xmm0
    00001ff6: 	divsd	DATAat0x49520(%rip), %xmm0
    00001ffe: 	callq	_Z13record_resultdPKc # Offset: 8190
    00002003: 	movq	-0x60(%rbp), %rdi
    00002007: 	cmpq	-0x128(%rbp), %rdi
    0000200e: 	je	.Ltmp1376 # Offset: 8206
    00002010: 	movq	-0x50(%rbp), %rax
    00002014: 	leaq	0x1(%rax), %rsi
    00002018: 	callq	_ZdlPvm@PLT # Offset: 8216
.Ltmp1376:
    0000201d: 	movq	-0x130(%rbp), %r14
    00002024: 	movq	-0x138(%rbp), %rdi
    0000202b: 	leaq	DATAat0x493b1(%rip), %rdx
    00002032: 	movq	%r14, %rsi
    00002035: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8245
    0000203a: 	movl	iterations(%rip), %edx
    00002040: 	movq	-0x80(%rbp), %rdi
    00002044: 	xorl	%r8d, %r8d
    00002047: 	xorl	%ecx, %ecx
    00002049: 	movl	$0x2dc6c0, %esi
    0000204e: 	callq	_Z9summarizePKciiii # Offset: 8270
    00002053: 	leaq	DATAat0x492f0(%rip), %rdx
    0000205a: 	movq	%r14, %rsi
    0000205d: 	movq	%rbx, %rdi
    00002060: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8288
    00002065: 	movq	-0x120(%rbp), %r14
    0000206c: 	movdqa	DATAat0x49470(%rip), %xmm7
    00002074: 	movl	$0xfa, %edx
    00002079: 	leaq	-0xf0(%rbp), %rax
    00002080: 	movq	%rax, %rcx
    00002083: 	movl	$0x12c, %esi
    00002088: 	movq	%rax, -0x178(%rbp)
    0000208f: 	movq	%r12, %r15
    00002092: 	movq	%r14, %rdi
    00002095: 	movaps	%xmm7, -0xf0(%rbp)
    0000209c: 	movl	$0x3e0, %r13d
    000020a2: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 8354
    000020a7: 	movl	$0x493e0, %edx
    000020ac: 	movq	%r14, %rsi
    000020af: 	movq	%r12, %rdi
    000020b2: 	movl	%eax, -0x158(%rbp)
    000020b8: 	callq	memcpy@PLT # Offset: 8376
    000020bd: 	movl	iterations(%rip), %eax
    000020c3: 	movl	$0x2710, iterations(%rip)
    000020cd: 	movl	%eax, -0x168(%rbp)
    000020d3: 	callq	clock@PLT # Offset: 8403
    000020d8: 	pxor	%xmm4, %xmm4
    000020dc: 	movl	$0x0, -0x138(%rbp)
    000020e6: 	movq	%rax, start_time(%rip)
    000020ed: 	movl	iterations(%rip), %eax
    000020f3: 	movl	%eax, %ecx
    000020f5: 	testl	%eax, %eax
    000020f7: 	jle	.Ltmp1377 # Offset: 8439
    000020fd: 	movq	-0x120(%rbp), %rax
    00002104: 	movq	%r12, -0x150(%rbp)
    0000210b: 	movq	%r14, %r12
    0000210e: 	movq	%r15, %r14
    00002111: 	movq	%rbx, -0x160(%rbp)
    00002118: 	movl	%ecx, %ebx
    0000211a: 	movq	%rax, -0x148(%rbp)
    00002121: 	xorl	%eax, %eax
    00002123: 	movl	%eax, -0x120(%rbp)
    00002129: 	nopl	(%rax) # Size: 7
.Ltmp1384:
    00002130: 	movq	$-0x3e8, %rdi
    00002137: 	leaq	-0x3e8(%r12), %r11
    0000213f: 	leaq	0x3e8(%r12), %r10
    00002147: 	movl	%eax, %esi
    00002149: 	nopl	(%rax) # Size: 7
.Ltmp1379:
    00002150: 	movq	%rdi, %rdx
    00002153: 	movq	%r13, %rcx
    00002156: 	movl	%esi, %r8d
    00002159: 	negq	%rdx
    0000215c: 	subq	%rdi, %rcx
.Ltmp1378:
    0000215f: 	movslq	0x4(%r11,%rdx), %rax
    00002164: 	movslq	(%r12,%rdx), %rsi
    00002168: 	addq	%rax, %rsi
    0000216b: 	movslq	0x8(%r12,%rdx), %rax
    00002170: 	addq	%rsi, %rax
    00002173: 	movslq	0x4(%r10,%rdx), %rsi
    00002178: 	addq	%rax, %rsi
    0000217b: 	leaq	0x5(%rsi), %rax
    0000217f: 	addq	$0x2, %rsi
    00002183: 	cmovnsq	%rsi, %rax
    00002187: 	sarq	$0x2, %rax
    0000218b: 	subl	0x4(%r14,%rdx), %eax
    00002190: 	imull	$0x71, %eax, %eax
    00002193: 	sarl	$0x6, %eax
    00002196: 	addl	0x4(%r14,%rdx), %eax
    0000219b: 	movl	%eax, 0x4(%r14,%rdx)
    000021a0: 	addq	$0x4, %rdx
    000021a4: 	cmpq	%rcx, %rdx
    000021a7: 	jne	.Ltmp1378 # Offset: 8615
    000021a9: 	subq	$0x3e8, %rdi
    000021b0: 	movl	%r8d, %esi
    000021b3: 	cmpq	$-0x48ff8, %rdi
    000021ba: 	jne	.Ltmp1379 # Offset: 8634
    000021bc: 	xorl	%eax, %eax
    000021be: 	pxor	%xmm2, %xmm2
    000021c2: 	movl	%r8d, %esi
    000021c5: 	nopl	(%rax) # Size: 3
.Ltmp1380:
    000021c8: 	movdqu	(%r14,%rax), %xmm5
    000021ce: 	movdqu	(%r12,%rax), %xmm3
    000021d4: 	movdqa	%xmm4, %xmm0
    000021d8: 	movdqu	(%r12,%rax), %xmm6
    000021de: 	addq	$0x10, %rax
    000021e2: 	psubd	%xmm5, %xmm3
    000021e6: 	movdqa	%xmm5, %xmm1
    000021ea: 	pcmpgtd	%xmm3, %xmm0
    000021ee: 	psubd	%xmm6, %xmm1
    000021f2: 	pand	%xmm0, %xmm1
    000021f6: 	pandn	%xmm3, %xmm0
    000021fa: 	movdqa	%xmm4, %xmm3
    000021fe: 	por	%xmm1, %xmm0
    00002202: 	pcmpgtd	%xmm0, %xmm3
    00002206: 	movdqa	%xmm0, %xmm1
    0000220a: 	punpckldq	%xmm3, %xmm1
    0000220e: 	punpckhdq	%xmm3, %xmm0
    00002212: 	paddq	%xmm1, %xmm2
    00002216: 	paddq	%xmm0, %xmm2
    0000221a: 	cmpq	$0x493e0, %rax
    00002220: 	jne	.Ltmp1380 # Offset: 8736
    00002222: 	movdqa	%xmm2, %xmm0
    00002226: 	movl	%esi, -0x120(%rbp)
    0000222c: 	movl	$0x124f8, %edx
    00002231: 	movq	%r14, %rsi
    00002234: 	psrldq	$0x8, %xmm0
    00002239: 	movq	%r12, %rdi
    0000223c: 	paddq	%xmm0, %xmm2
    00002240: 	movq	%xmm2, %r15
    00002245: 	callq	_Z14max_differenceIiET_PKS0_S2_m # Offset: 8773
    0000224a: 	cmpl	$0x1, -0x120(%rbp)
    00002251: 	pxor	%xmm4, %xmm4
    00002255: 	jle	.Ltmp1381 # Offset: 8789
    00002257: 	cmpq	$0x9, %r15
    0000225b: 	jle	.Ltmp1382 # Offset: 8795
    00002261: 	testl	%eax, %eax
    00002263: 	jle	.Ltmp1382 # Offset: 8803
.Ltmp1381:
    00002269: 	addl	$0x1, -0x120(%rbp)
    00002270: 	movl	-0x120(%rbp), %edi
    00002276: 	movq	%r14, %rdx
    00002279: 	movq	%r12, %r14
    0000227c: 	cmpl	%ebx, %edi
    0000227e: 	je	.Ltmp1383 # Offset: 8830
    00002284: 	movq	%rdx, %r12
    00002287: 	movl	%edi, %eax
    00002289: 	jmp	.Ltmp1384 # Offset: 8841
.Ltmp1327:
    0000228e: 	callq	clock@PLT # Offset: 8846
    00002293: 	pxor	%xmm0, %xmm0
    00002297: 	movl	$0x0, -0x148(%rbp)
    000022a1: 	movq	%rax, end_time(%rip)
    000022a8: 	subq	start_time(%rip), %rax
    000022af: 	movq	$0x0, -0x150(%rbp)
    000022ba: 	cvtsi2sd	%rax, %xmm0
    000022bf: 	movl	-0x158(%rbp), %eax
    000022c5: 	divsd	DATAat0x49520(%rip), %xmm0
    000022cd: 	subl	0x24be4(%r12), %eax
    000022d5: 	movq	%xmm0, %r15
    000022da: 	movl	%eax, -0x158(%rbp)
.Ltmp1336:
    000022e0: 	movq	-0x60(%rbp), %rsi
    000022e4: 	movq	-0x58(%rbp), %rdx
.Ltmp1337:
    000022e8: 	movq	-0x140(%rbp), %rdi
    000022ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8943
    000022f4: 	movq	%rax, %rdi
    000022f7: 	leaq	DATAat0x491ab(%rip), %rsi
    000022fe: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 8958
    00002303: 	jmp	.Ltmp1385 # Offset: 8963
.Ltmp1382:
    00002308: 	movl	-0x120(%rbp), %ebx
    0000230e: 	movq	-0x150(%rbp), %r12
    00002315: 	movq	%r15, -0x150(%rbp)
    0000231c: 	movl	%ebx, -0x138(%rbp)
    00002322: 	movq	-0x148(%rbp), %rbx
    00002329: 	movl	%eax, -0x148(%rbp)
    0000232f: 	movq	%rbx, -0x120(%rbp)
    00002336: 	movq	-0x160(%rbp), %rbx
.Ltmp1415:
    0000233d: 	callq	clock@PLT # Offset: 9021
    00002342: 	pxor	%xmm0, %xmm0
    00002346: 	movl	-0x158(%rbp), %r15d
    0000234d: 	subl	0x24be4(%r14), %r15d
    00002354: 	movq	%rax, end_time(%rip)
    0000235b: 	subq	start_time(%rip), %rax
    00002362: 	cvtsi2sd	%rax, %xmm0
    00002367: 	movl	-0x138(%rbp), %eax
    0000236d: 	cmpl	iterations(%rip), %eax
    00002373: 	divsd	DATAat0x49520(%rip), %xmm0
    0000237b: 	movq	%xmm0, %r13
    00002380: 	jl	.Ltmp1386 # Offset: 9088
    00002386: 	cmpq	$0xa, -0x150(%rbp)
    0000238e: 	movq	-0x58(%rbp), %rdx
    00002392: 	movq	-0x60(%rbp), %rsi
    00002396: 	jle	.Ltmp1387 # Offset: 9110
    0000239c: 	cmpl	$0x1, -0x148(%rbp)
    000023a3: 	jle	.Ltmp1387 # Offset: 9123
    000023a9: 	movq	-0x140(%rbp), %rdi
    000023b0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9136
    000023b5: 	movq	%rax, %rdi
    000023b8: 	leaq	DATAat0x49199(%rip), %rsi
    000023bf: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 9151
.Ltmp1397:
    000023c4: 	movq	-0x140(%rbp), %r14
    000023cb: 	movl	$0x4, %edx
    000023d0: 	leaq	DATAat0x491b6(%rip), %rsi
    000023d7: 	movq	%r14, %rdi
    000023da: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9178
    000023df: 	movl	-0x138(%rbp), %esi
    000023e5: 	movq	%r14, %rdi
    000023e8: 	callq	_ZNSolsEi@PLT # Offset: 9192
    000023ed: 	movq	%rax, %rdi
    000023f0: 	movl	$0xb, %edx
    000023f5: 	leaq	DATAat0x491bb(%rip), %rsi
    000023fc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9212
    00002401: 	movl	$0xa, %edx
    00002406: 	leaq	DATAat0x491c7(%rip), %rsi
    0000240d: 	movq	%r14, %rdi
    00002410: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9232
    00002415: 	movq	-0x150(%rbp), %rsi
    0000241c: 	movq	%r14, %rdi
    0000241f: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 9247
    00002424: 	movl	$0x7, %edx
    00002429: 	leaq	DATAat0x491d2(%rip), %rsi
    00002430: 	movq	%rax, %rdi
    00002433: 	movq	%rax, %r14
    00002436: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9270
    0000243b: 	movl	-0x148(%rbp), %esi
    00002441: 	movq	%r14, %rdi
    00002444: 	callq	_ZNSolsEi@PLT # Offset: 9284
    00002449: 	movl	$0x10, %edx
    0000244e: 	leaq	DATAat0x491da(%rip), %rsi
    00002455: 	movq	%rax, %rdi
    00002458: 	movq	%rax, %r14
    0000245b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9307
    00002460: 	movl	%r15d, %esi
    00002463: 	movq	%r14, %rdi
    00002466: 	callq	_ZNSolsEi@PLT # Offset: 9318
    0000246b: 	movl	$0x8, %edx
    00002470: 	leaq	DATAat0x491eb(%rip), %rsi
    00002477: 	movq	%rax, %rdi
    0000247a: 	movq	%rax, %r14
    0000247d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9341
    00002482: 	movq	%r13, %xmm0
    00002487: 	movq	%r14, %rdi
    0000248a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 9354
    0000248f: 	movq	%rax, %rdi
    00002492: 	movl	$0x2, %edx
    00002497: 	leaq	DATAat0x491f4(%rip), %rsi
    0000249e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9374
    000024a3: 	movl	-0x168(%rbp), %eax
    000024a9: 	movq	-0x60(%rbp), %rdi
    000024ad: 	movl	%eax, iterations(%rip)
    000024b3: 	cmpq	-0x128(%rbp), %rdi
    000024ba: 	je	.Ltmp1388 # Offset: 9402
    000024bc: 	movq	-0x50(%rbp), %rax
    000024c0: 	leaq	0x1(%rax), %rsi
    000024c4: 	callq	_ZdlPvm@PLT # Offset: 9412
.Ltmp1388:
    000024c9: 	movq	-0x130(%rbp), %rsi
    000024d0: 	leaq	DATAat0x49306(%rip), %rdx
    000024d7: 	movq	%rbx, %rdi
    000024da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9434
    000024df: 	movl	$0xfa, %edx
    000024e4: 	movl	$0x12c, %esi
    000024e9: 	movq	%r12, %r15
    000024ec: 	xorl	%r14d, %r14d
    000024ef: 	movq	-0x120(%rbp), %r13
    000024f6: 	movdqa	DATAat0x49470(%rip), %xmm7
    000024fe: 	movq	-0x178(%rbp), %rcx
    00002505: 	movq	%r13, %rdi
    00002508: 	movaps	%xmm7, -0xf0(%rbp)
    0000250f: 	callq	_Z29laplace_initial_condition_setIiET_PS0_iiPKS0_ # Offset: 9487
    00002514: 	movl	$0x493e0, %edx
    00002519: 	movq	%r13, %rsi
    0000251c: 	movq	%r12, %rdi
    0000251f: 	movl	%eax, -0x150(%rbp)
    00002525: 	callq	memcpy@PLT # Offset: 9509
    0000252a: 	movl	iterations(%rip), %eax
    00002530: 	movl	$0x2710, iterations(%rip)
    0000253a: 	movl	%eax, -0x168(%rbp)
    00002540: 	callq	clock@PLT # Offset: 9536
    00002545: 	pxor	%xmm4, %xmm4
    00002549: 	movq	%rax, start_time(%rip)
    00002550: 	movl	iterations(%rip), %eax
    00002556: 	movl	%eax, %ecx
    00002558: 	testl	%eax, %eax
    0000255a: 	jle	.Ltmp1389 # Offset: 9562
    00002560: 	movq	-0x120(%rbp), %rax
    00002567: 	movq	%r13, -0x120(%rbp)
    0000256e: 	movq	%rbx, %r13
    00002571: 	movl	%ecx, %ebx
    00002573: 	movq	%r12, -0x160(%rbp)
    0000257a: 	movl	%r14d, %r12d
    0000257d: 	movq	%rax, -0x158(%rbp)
    00002584: 	movq	-0x120(%rbp), %rax
    0000258b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1396:
    00002590: 	leaq	0x3e8(%rax), %r10
    00002597: 	leaq	0x48ffc(%r15), %r8
    0000259e: 	movl	$0x1, %r9d
    000025a4: 	nopl	(%rax) # Size: 4
.Ltmp1391:
    000025a8: 	addl	$0x1, %r9d
    000025ac: 	leaq	-0x48c10(%r8), %rcx
    000025b3: 	movq	%r10, %rdx
    000025b6: 	movq	%rax, %rdi
.Ltmp1390:
    000025b9: 	movslq	-0x3e4(%rdx), %rax
    000025c0: 	movslq	(%rdx), %rsi
    000025c3: 	addq	%rax, %rsi
    000025c6: 	movslq	0x8(%rdx), %rax
    000025ca: 	addq	%rsi, %rax
    000025cd: 	movslq	0x3ec(%rdx), %rsi
    000025d4: 	addq	%rax, %rsi
    000025d7: 	leaq	0x5(%rsi), %rax
    000025db: 	addq	$0x2, %rsi
    000025df: 	cmovnsq	%rsi, %rax
    000025e3: 	addq	$0x3e8, %rcx
    000025ea: 	addq	$0x3e8, %rdx
    000025f1: 	sarq	$0x2, %rax
    000025f5: 	subl	-0x3e8(%rcx), %eax
    000025fb: 	imull	$0x71, %eax, %eax
    000025fe: 	sarl	$0x6, %eax
    00002601: 	addl	-0x3e8(%rcx), %eax
    00002607: 	movl	%eax, -0x3e8(%rcx)
    0000260d: 	cmpq	%rcx, %r8
    00002610: 	jne	.Ltmp1390 # Offset: 9744
    00002612: 	movq	%rdi, %rax
    00002615: 	addq	$0x4, %r10
    00002619: 	addq	$0x4, %r8
    0000261d: 	cmpl	$0xf9, %r9d
    00002624: 	jne	.Ltmp1391 # Offset: 9764
    00002626: 	xorl	%eax, %eax
    00002628: 	pxor	%xmm2, %xmm2
    0000262c: 	movq	%rdi, %rcx
    0000262f: 	nop # Size: 1
.Ltmp1392:
    00002630: 	movdqu	(%rcx,%rax), %xmm7
    00002635: 	movdqu	(%r15,%rax), %xmm5
    0000263b: 	movdqa	%xmm4, %xmm0
    0000263f: 	addq	$0x10, %rax
    00002643: 	movdqa	%xmm7, %xmm3
    00002647: 	movdqa	%xmm5, %xmm1
    0000264b: 	movaps	%xmm7, -0x120(%rbp)
    00002652: 	psubd	%xmm5, %xmm3
    00002656: 	psubd	%xmm7, %xmm1
    0000265a: 	pcmpgtd	%xmm3, %xmm0
    0000265e: 	pand	%xmm0, %xmm1
    00002662: 	pandn	%xmm3, %xmm0
    00002666: 	movdqa	%xmm4, %xmm3
    0000266a: 	por	%xmm1, %xmm0
    0000266e: 	pcmpgtd	%xmm0, %xmm3
    00002672: 	movdqa	%xmm0, %xmm1
    00002676: 	punpckldq	%xmm3, %xmm1
    0000267a: 	punpckhdq	%xmm3, %xmm0
    0000267e: 	paddq	%xmm1, %xmm2
    00002682: 	paddq	%xmm0, %xmm2
    00002686: 	cmpq	$0x493e0, %rax
    0000268c: 	jne	.Ltmp1392 # Offset: 9868
    0000268e: 	movdqa	%xmm2, %xmm0
    00002692: 	movq	%rcx, %rdi
    00002695: 	movl	$0x124f8, %edx
    0000269a: 	movq	%r15, %rsi
    0000269d: 	psrldq	$0x8, %xmm0
    000026a2: 	movq	%rcx, -0x120(%rbp)
    000026a9: 	paddq	%xmm0, %xmm2
    000026ad: 	movq	%xmm2, %r14
    000026b2: 	callq	_Z14max_differenceIiET_PKS0_S2_m # Offset: 9906
    000026b7: 	cmpl	$0x1, %r12d
    000026bb: 	pxor	%xmm4, %xmm4
    000026bf: 	jle	.Ltmp1393 # Offset: 9919
    000026c1: 	cmpq	$0x9, %r14
    000026c5: 	jle	.Ltmp1394 # Offset: 9925
    000026cb: 	testl	%eax, %eax
    000026cd: 	jle	.Ltmp1394 # Offset: 9933
.Ltmp1393:
    000026d3: 	addl	$0x1, %r12d
    000026d7: 	movq	%r15, %rdx
    000026da: 	movq	-0x120(%rbp), %r15
    000026e1: 	cmpl	%ebx, %r12d
    000026e4: 	je	.Ltmp1395 # Offset: 9956
    000026ea: 	movq	%rdx, -0x120(%rbp)
    000026f1: 	movq	%rdx, %rax
    000026f4: 	jmp	.Ltmp1396 # Offset: 9972
.Ltmp1377:
    000026f9: 	callq	clock@PLT # Offset: 9977
    000026fe: 	pxor	%xmm0, %xmm0
    00002702: 	movl	-0x158(%rbp), %r15d
    00002709: 	movl	$0x0, -0x148(%rbp)
    00002713: 	movq	%rax, end_time(%rip)
    0000271a: 	subq	start_time(%rip), %rax
    00002721: 	movq	$0x0, -0x150(%rbp)
    0000272c: 	cvtsi2sd	%rax, %xmm0
    00002731: 	subl	0x24be4(%r12), %r15d
    00002739: 	divsd	DATAat0x49520(%rip), %xmm0
    00002741: 	movq	%xmm0, %r13
.Ltmp1386:
    00002746: 	movq	-0x60(%rbp), %rsi
    0000274a: 	movq	-0x58(%rbp), %rdx
.Ltmp1387:
    0000274e: 	movq	-0x140(%rbp), %rdi
    00002755: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10069
    0000275a: 	movq	%rax, %rdi
    0000275d: 	leaq	DATAat0x491ab(%rip), %rsi
    00002764: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 10084
    00002769: 	jmp	.Ltmp1397 # Offset: 10089
.Ltmp1394:
    0000276e: 	movq	-0x158(%rbp), %rbx
    00002775: 	movl	%eax, -0x138(%rbp)
    0000277b: 	movq	%r14, -0x148(%rbp)
    00002782: 	movl	%r12d, %r14d
    00002785: 	movq	-0x160(%rbp), %r12
    0000278c: 	movq	%rbx, -0x120(%rbp)
    00002793: 	movq	%r13, %rbx
    00002796: 	movq	%r15, %r13
.Ltmp1413:
    00002799: 	callq	clock@PLT # Offset: 10137
    0000279e: 	pxor	%xmm0, %xmm0
    000027a2: 	movq	%rax, end_time(%rip)
    000027a9: 	subq	start_time(%rip), %rax
    000027b0: 	cvtsi2sd	%rax, %xmm0
    000027b5: 	movl	-0x150(%rbp), %eax
    000027bb: 	subl	0x24be4(%r13), %eax
    000027c2: 	divsd	DATAat0x49520(%rip), %xmm0
    000027ca: 	cmpl	iterations(%rip), %r14d
    000027d1: 	movl	%eax, -0x150(%rbp)
    000027d7: 	movq	%xmm0, %r15
    000027dc: 	jl	.Ltmp1398 # Offset: 10204
    000027e2: 	cmpq	$0xa, -0x148(%rbp)
    000027ea: 	movq	-0x58(%rbp), %rdx
    000027ee: 	movq	-0x60(%rbp), %rsi
    000027f2: 	jle	.Ltmp1399 # Offset: 10226
    000027f8: 	cmpl	$0x1, -0x138(%rbp)
    000027ff: 	jle	.Ltmp1399 # Offset: 10239
    00002805: 	movq	-0x140(%rbp), %rdi
    0000280c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10252
    00002811: 	movq	%rax, %rdi
    00002814: 	leaq	DATAat0x49199(%rip), %rsi
    0000281b: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 10267
.Ltmp1412:
    00002820: 	movq	-0x140(%rbp), %r13
    00002827: 	movl	$0x4, %edx
    0000282c: 	leaq	DATAat0x491b6(%rip), %rsi
    00002833: 	movq	%r13, %rdi
    00002836: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10294
    0000283b: 	movl	%r14d, %esi
    0000283e: 	movq	%r13, %rdi
    00002841: 	callq	_ZNSolsEi@PLT # Offset: 10305
    00002846: 	movq	%rax, %rdi
    00002849: 	movl	$0xb, %edx
    0000284e: 	leaq	DATAat0x491bb(%rip), %rsi
    00002855: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10325
    0000285a: 	movl	$0xa, %edx
    0000285f: 	leaq	DATAat0x491c7(%rip), %rsi
    00002866: 	movq	%r13, %rdi
    00002869: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10345
    0000286e: 	movq	-0x148(%rbp), %rsi
    00002875: 	movq	%r13, %rdi
    00002878: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 10360
    0000287d: 	movl	$0x7, %edx
    00002882: 	leaq	DATAat0x491d2(%rip), %rsi
    00002889: 	movq	%rax, %rdi
    0000288c: 	movq	%rax, %r14
    0000288f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10383
    00002894: 	movl	-0x138(%rbp), %esi
    0000289a: 	movq	%r14, %rdi
    0000289d: 	callq	_ZNSolsEi@PLT # Offset: 10397
    000028a2: 	movl	$0x10, %edx
    000028a7: 	leaq	DATAat0x491da(%rip), %rsi
    000028ae: 	movq	%rax, %rdi
    000028b1: 	movq	%rax, %r14
    000028b4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10420
    000028b9: 	movl	-0x150(%rbp), %esi
    000028bf: 	movq	%r14, %rdi
    000028c2: 	callq	_ZNSolsEi@PLT # Offset: 10434
    000028c7: 	movl	$0x8, %edx
    000028cc: 	leaq	DATAat0x491eb(%rip), %rsi
    000028d3: 	movq	%rax, %rdi
    000028d6: 	movq	%rax, %r14
    000028d9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10457
    000028de: 	movq	%r15, %xmm0
    000028e3: 	movq	%r14, %rdi
    000028e6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 10470
    000028eb: 	movq	%rax, %rdi
    000028ee: 	movl	$0x2, %edx
    000028f3: 	leaq	DATAat0x491f4(%rip), %rsi
    000028fa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10490
    000028ff: 	movl	-0x168(%rbp), %eax
    00002905: 	movq	-0x60(%rbp), %rdi
    00002909: 	movl	%eax, iterations(%rip)
    0000290f: 	cmpq	-0x128(%rbp), %rdi
    00002916: 	je	.Ltmp1400 # Offset: 10518
    00002918: 	movq	-0x50(%rbp), %rax
    0000291c: 	leaq	0x1(%rax), %rsi
    00002920: 	callq	_ZdlPvm@PLT # Offset: 10528
.Ltmp1400:
    00002925: 	movq	-0x130(%rbp), %rsi
    0000292c: 	leaq	DATAat0x4931d(%rip), %rdx
    00002933: 	movq	%rbx, %rdi
    00002936: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10550
    0000293b: 	subq	$0x8, %rsp
    0000293f: 	movq	%rbx, %r9
    00002942: 	movl	$0xfa, %r8d
    00002948: 	movq	%r12, %rsi
    0000294b: 	pushq	$0x1
    0000294d: 	movl	$0xfa, %ecx
    00002952: 	movl	$0x12c, %edx
    00002957: 	movq	-0x120(%rbp), %rdi
    0000295e: 	callq	_Z20convergenceLaplace2DIil21jacobi_sor2D_reversedIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10590
    00002963: 	popq	%r14
    00002965: 	movq	-0x60(%rbp), %rdi
    00002969: 	popq	%r15
    0000296b: 	cmpq	-0x128(%rbp), %rdi
    00002972: 	je	.Ltmp1401 # Offset: 10610
    00002974: 	movq	-0x50(%rbp), %rax
    00002978: 	leaq	0x1(%rax), %rsi
    0000297c: 	callq	_ZdlPvm@PLT # Offset: 10620
.Ltmp1401:
    00002981: 	movq	-0x130(%rbp), %rsi
    00002988: 	leaq	DATAat0x49335(%rip), %rdx
    0000298f: 	movq	%rbx, %rdi
    00002992: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10642
    00002997: 	subq	$0x8, %rsp
    0000299b: 	movq	%rbx, %r9
    0000299e: 	movl	$0xfa, %r8d
    000029a4: 	movq	%r12, %rsi
    000029a7: 	pushq	$0x1
    000029a9: 	movl	$0xfa, %ecx
    000029ae: 	movl	$0x12c, %edx
    000029b3: 	movq	-0x120(%rbp), %rdi
    000029ba: 	callq	_Z20convergenceLaplace2DIil22jacobi_sor2D_reversedXIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10682
    000029bf: 	popq	%r11
    000029c1: 	movq	-0x60(%rbp), %rdi
    000029c5: 	popq	%r13
    000029c7: 	cmpq	-0x128(%rbp), %rdi
    000029ce: 	je	.Ltmp1402 # Offset: 10702
    000029d0: 	movq	-0x50(%rbp), %rax
    000029d4: 	leaq	0x1(%rax), %rsi
    000029d8: 	callq	_ZdlPvm@PLT # Offset: 10712
.Ltmp1402:
    000029dd: 	movq	-0x130(%rbp), %rsi
    000029e4: 	leaq	DATAat0x4934e(%rip), %rdx
    000029eb: 	movq	%rbx, %rdi
    000029ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10734
    000029f3: 	subq	$0x8, %rsp
    000029f7: 	movq	%rbx, %r9
    000029fa: 	movl	$0xfa, %r8d
    00002a00: 	movq	%r12, %rsi
    00002a03: 	pushq	$0x1
    00002a05: 	movl	$0xfa, %ecx
    00002a0a: 	movl	$0x12c, %edx
    00002a0f: 	movq	-0x120(%rbp), %rdi
    00002a16: 	callq	_Z20convergenceLaplace2DIil22jacobi_sor2D_reversedYIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10774
    00002a1b: 	popq	%r9
    00002a1d: 	movq	-0x60(%rbp), %rdi
    00002a21: 	popq	%r10
    00002a23: 	cmpq	-0x128(%rbp), %rdi
    00002a2a: 	je	.Ltmp1403 # Offset: 10794
    00002a2c: 	movq	-0x50(%rbp), %rax
    00002a30: 	leaq	0x1(%rax), %rsi
    00002a34: 	callq	_ZdlPvm@PLT # Offset: 10804
.Ltmp1403:
    00002a39: 	movq	-0x130(%rbp), %rsi
    00002a40: 	leaq	DATAat0x49367(%rip), %rdx
    00002a47: 	movq	%rbx, %rdi
    00002a4a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10826
    00002a4f: 	subq	$0x8, %rsp
    00002a53: 	movq	%rbx, %r9
    00002a56: 	movl	$0xfa, %r8d
    00002a5c: 	movq	%r12, %rsi
    00002a5f: 	pushq	$0x1
    00002a61: 	movl	$0xfa, %ecx
    00002a66: 	movl	$0x12c, %edx
    00002a6b: 	movq	-0x120(%rbp), %rdi
    00002a72: 	callq	_Z20convergenceLaplace2DIil21jacobi_sor2D_unrolledIilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10866
    00002a77: 	popq	%rdi
    00002a78: 	movq	-0x60(%rbp), %rdi
    00002a7c: 	popq	%r8
    00002a7e: 	cmpq	-0x128(%rbp), %rdi
    00002a85: 	je	.Ltmp1404 # Offset: 10885
    00002a87: 	movq	-0x50(%rbp), %rax
    00002a8b: 	leaq	0x1(%rax), %rsi
    00002a8f: 	callq	_ZdlPvm@PLT # Offset: 10895
.Ltmp1404:
    00002a94: 	movq	-0x130(%rbp), %rsi
    00002a9b: 	leaq	DATAat0x4937f(%rip), %rdx
    00002aa2: 	movq	%rbx, %rdi
    00002aa5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10917
    00002aaa: 	subq	$0x8, %rsp
    00002aae: 	movq	%rbx, %r9
    00002ab1: 	movl	$0xfa, %r8d
    00002ab7: 	movq	%r12, %rsi
    00002aba: 	pushq	$0x1
    00002abc: 	movl	$0xfa, %ecx
    00002ac1: 	movl	$0x12c, %edx
    00002ac6: 	movq	-0x120(%rbp), %rdi
    00002acd: 	callq	_Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled2IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10957
    00002ad2: 	popq	%rcx
    00002ad3: 	movq	-0x60(%rbp), %rdi
    00002ad7: 	popq	%rsi
    00002ad8: 	cmpq	-0x128(%rbp), %rdi
    00002adf: 	je	.Ltmp1405 # Offset: 10975
    00002ae1: 	movq	-0x50(%rbp), %rax
    00002ae5: 	leaq	0x1(%rax), %rsi
    00002ae9: 	callq	_ZdlPvm@PLT # Offset: 10985
.Ltmp1405:
    00002aee: 	movq	-0x130(%rbp), %rsi
    00002af5: 	leaq	DATAat0x49398(%rip), %rdx
    00002afc: 	movq	%rbx, %rdi
    00002aff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11007
    00002b04: 	subq	$0x8, %rsp
    00002b08: 	movq	%rbx, %r9
    00002b0b: 	movl	$0xfa, %r8d
    00002b11: 	movq	%r12, %rsi
    00002b14: 	pushq	$0x1
    00002b16: 	movl	$0xfa, %ecx
    00002b1b: 	movl	$0x12c, %edx
    00002b20: 	movq	-0x120(%rbp), %rdi
    00002b27: 	callq	_Z20convergenceLaplace2DIil22jacobi_sor2D_unrolled3IilEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 11047
    00002b2c: 	popq	%rax
    00002b2d: 	movq	-0x60(%rbp), %rdi
    00002b31: 	popq	%rdx
    00002b32: 	cmpq	-0x128(%rbp), %rdi
    00002b39: 	je	.Ltmp1406 # Offset: 11065
    00002b3b: 	movq	-0x50(%rbp), %rax
    00002b3f: 	leaq	0x1(%rax), %rsi
    00002b43: 	callq	_ZdlPvm@PLT # Offset: 11075
.Ltmp1406:
    00002b48: 	movl	-0x16c(%rbp), %eax
    00002b4e: 	movq	-0x80(%rbp), %rdi
    00002b52: 	movl	%eax, iterations(%rip)
    00002b58: 	leaq	-0x70(%rbp), %rax
    00002b5c: 	cmpq	%rax, %rdi
    00002b5f: 	je	.Ltmp1407 # Offset: 11103
    00002b61: 	movq	-0x70(%rbp), %rax
    00002b65: 	leaq	0x1(%rax), %rsi
    00002b69: 	callq	_ZdlPvm@PLT # Offset: 11113
.Ltmp1407:
    00002b6e: 	movq	-0xa0(%rbp), %rdi
    00002b75: 	leaq	-0x90(%rbp), %rax
    00002b7c: 	cmpq	%rax, %rdi
    00002b7f: 	je	.Ltmp1408 # Offset: 11135
    00002b81: 	movq	-0x90(%rbp), %rax
    00002b88: 	leaq	0x1(%rax), %rsi
    00002b8c: 	callq	_ZdlPvm@PLT # Offset: 11148
.Ltmp1408:
    00002b91: 	movl	$0x4, %esi
    00002b96: 	movq	%r12, %rdi
    00002b99: 	callq	_ZdlPvm@PLT # Offset: 11161
    00002b9e: 	movq	-0x120(%rbp), %rdi
    00002ba5: 	movl	$0x4, %esi
    00002baa: 	callq	_ZdlPvm@PLT # Offset: 11178
    00002baf: 	movq	-0xc0(%rbp), %rdi
    00002bb6: 	leaq	-0xb0(%rbp), %rax
    00002bbd: 	cmpq	%rax, %rdi
    00002bc0: 	je	.Ltmp1409 # Offset: 11200
    00002bc2: 	movq	-0xb0(%rbp), %rax
    00002bc9: 	leaq	0x1(%rax), %rsi
    00002bcd: 	callq	_ZdlPvm@PLT # Offset: 11213
.Ltmp1409:
    00002bd2: 	movq	-0xe0(%rbp), %rdi
    00002bd9: 	leaq	-0xd0(%rbp), %rax
    00002be0: 	cmpq	%rax, %rdi
    00002be3: 	je	.Ltmp1410 # Offset: 11235
    00002be5: 	movq	-0xd0(%rbp), %rax
    00002bec: 	leaq	0x1(%rax), %rsi
    00002bf0: 	callq	_ZdlPvm@PLT # Offset: 11248
.Ltmp1410:
    00002bf5: 	movq	-0x38(%rbp), %rax
    00002bf9: 	subq	%fs:0x28, %rax
    00002c02: 	jne	.Ltmp1411 # Offset: 11266
    00002c08: 	leaq	-0x28(%rbp), %rsp
    00002c0c: 	popq	%rbx
    00002c0d: 	popq	%r12
    00002c0f: 	popq	%r13
    00002c11: 	popq	%r14
    00002c13: 	popq	%r15
    00002c15: 	popq	%rbp
    00002c16: 	retq # Offset: 11286
.Ltmp1389:
    00002c17: 	callq	clock@PLT # Offset: 11287
    00002c1c: 	pxor	%xmm0, %xmm0
    00002c20: 	movl	$0x0, -0x138(%rbp)
    00002c2a: 	movq	%rax, end_time(%rip)
    00002c31: 	subq	start_time(%rip), %rax
    00002c38: 	movq	$0x0, -0x148(%rbp)
    00002c43: 	cvtsi2sd	%rax, %xmm0
    00002c48: 	movl	-0x150(%rbp), %eax
    00002c4e: 	divsd	DATAat0x49520(%rip), %xmm0
    00002c56: 	subl	0x24be4(%r12), %eax
    00002c5e: 	movq	%xmm0, %r15
    00002c63: 	movl	%eax, -0x150(%rbp)
.Ltmp1398:
    00002c69: 	movq	-0x60(%rbp), %rsi
    00002c6d: 	movq	-0x58(%rbp), %rdx
.Ltmp1399:
    00002c71: 	movq	-0x140(%rbp), %rdi
    00002c78: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11384
    00002c7d: 	movq	%rax, %rdi
    00002c80: 	leaq	DATAat0x491ab(%rip), %rsi
    00002c87: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 11399
    00002c8c: 	jmp	.Ltmp1412 # Offset: 11404
.Ltmp1395:
    00002c91: 	movl	%eax, -0x138(%rbp)
    00002c97: 	movq	-0x158(%rbp), %rax
    00002c9e: 	movq	%r13, %rbx
    00002ca1: 	movq	%r14, -0x148(%rbp)
    00002ca8: 	movq	-0x120(%rbp), %r13
    00002caf: 	movl	%r12d, %r14d
    00002cb2: 	movq	%rax, -0x120(%rbp)
    00002cb9: 	movq	-0x160(%rbp), %r12
    00002cc0: 	jmp	.Ltmp1413 # Offset: 11456
.Ltmp1333:
    00002cc5: 	movl	%eax, -0x148(%rbp)
    00002ccb: 	movq	-0x160(%rbp), %rax
    00002cd2: 	movq	%r13, %rbx
    00002cd5: 	movq	%r14, -0x150(%rbp)
    00002cdc: 	movq	-0x120(%rbp), %r13
    00002ce3: 	movl	%r12d, %r14d
    00002ce6: 	movq	%rax, -0x120(%rbp)
    00002ced: 	movq	-0x168(%rbp), %r12
    00002cf4: 	jmp	.Ltmp1414 # Offset: 11508
.Ltmp1383:
    00002cf9: 	movq	-0x148(%rbp), %rbx
    00002d00: 	movq	-0x150(%rbp), %r12
    00002d07: 	movl	%edi, -0x138(%rbp)
    00002d0d: 	movl	%eax, -0x148(%rbp)
    00002d13: 	movq	%rbx, -0x120(%rbp)
    00002d1a: 	movq	-0x160(%rbp), %rbx
    00002d21: 	movq	%r15, -0x150(%rbp)
    00002d28: 	jmp	.Ltmp1415 # Offset: 11560
.Ltmp1322:
    00002d2d: 	movl	%eax, -0x148(%rbp)
    00002d33: 	movq	-0x160(%rbp), %rax
    00002d3a: 	movq	-0x158(%rbp), %r12
    00002d41: 	movq	%r15, -0x150(%rbp)
    00002d48: 	movl	%r14d, -0x158(%rbp)
    00002d4f: 	movq	-0x168(%rbp), %rbx
    00002d56: 	movq	-0x120(%rbp), %r14
    00002d5d: 	movq	%rax, -0x120(%rbp)
    00002d64: 	jmp	.Ltmp1416 # Offset: 11620
.Ltmp1314:
    00002d69: 	movq	-0x8(%rdx), %rax
    00002d6d: 	addq	$0x200, %rax
    00002d73: 	jmp	.Ltmp1417 # Offset: 11635
.Ltmp1297:
    00002d78: 	movq	-0x8(%rdx), %rax
    00002d7c: 	addq	$0x200, %rax
    00002d82: 	jmp	.Ltmp1418 # Offset: 11650
.Ltmp1290:
    00002d87: 	movq	-0x8(%rdx), %rax
    00002d8b: 	addq	$0x200, %rax
    00002d91: 	jmp	.Ltmp1419 # Offset: 11665
.Ltmp1283:
    00002d96: 	movq	-0x8(%rdx), %rax
    00002d9a: 	addq	$0x200, %rax
    00002da0: 	jmp	.Ltmp1420 # Offset: 11680
.Ltmp1276:
    00002da5: 	movq	-0x8(%rdx), %rax
    00002da9: 	addq	$0x200, %rax
    00002daf: 	jmp	.Ltmp1421 # Offset: 11695
.Ltmp1269:
    00002db4: 	movq	-0x8(%rdx), %rax
    00002db8: 	addq	$0x200, %rax
    00002dbe: 	jmp	.Ltmp1422 # Offset: 11710
.Ltmp1309:
    00002dc3: 	movq	-0x8(%rdx), %rax
    00002dc7: 	addq	$0x200, %rax
    00002dcd: 	jmp	.Ltmp1423 # Offset: 11725
.Ltmp1302:
    00002dd2: 	movq	-0x8(%rdx), %rax
    00002dd6: 	addq	$0x200, %rax
    00002ddc: 	jmp	.Ltmp1424 # Offset: 11740
.Ltmp1375:
    00002de1: 	movq	-0x8(%rdx), %rax
    00002de5: 	addq	$0x200, %rax
    00002deb: 	jmp	.Ltmp1425 # Offset: 11755
.Ltmp1370:
    00002df0: 	movq	-0x8(%rdx), %rax
    00002df4: 	addq	$0x200, %rax
    00002dfa: 	jmp	.Ltmp1426 # Offset: 11770
.Ltmp1352:
    00002dff: 	movq	-0x8(%rdx), %rax
    00002e03: 	addq	$0x200, %rax
    00002e09: 	jmp	.Ltmp1427 # Offset: 11785
.Ltmp1365:
    00002e0e: 	movq	-0x8(%rdx), %rax
    00002e12: 	addq	$0x200, %rax
    00002e18: 	jmp	.Ltmp1428 # Offset: 11800
.Ltmp1359:
    00002e1d: 	movq	-0x8(%rdx), %rax
    00002e21: 	addq	$0x200, %rax
    00002e27: 	jmp	.Ltmp1429 # Offset: 11815
.Ltmp1411:
    00002e2c: 	callq	__stack_chk_fail@PLT # Offset: 11820
    00002e31: 	endbr64
.Ltmp1431:
    00002e35: 	movq	%rax, %rbx
    00002e38: 	jmp	.Ltmp1430 # Offset: 11832
    00002e3a: 	endbr64
    00002e3e: 	jmp	.Ltmp1431 # Offset: 11838
    00002e40: 	endbr64
.Ltmp1433:
    00002e44: 	movq	%rax, %rbx
    00002e47: 	jmp	.Ltmp1432 # Offset: 11847
    00002e4c: 	endbr64
    00002e50: 	jmp	.Ltmp1433 # Offset: 11856
    00002e52: 	endbr64
    00002e56: 	jmp	.Ltmp1433 # Offset: 11862
.Ltmp1430:
    00002e58: 	movq	-0x60(%rbp), %rdi
    00002e5c: 	cmpq	-0x128(%rbp), %rdi
    00002e63: 	je	.Ltmp1434 # Offset: 11875
    00002e65: 	movq	-0x50(%rbp), %rax
    00002e69: 	leaq	0x1(%rax), %rsi
    00002e6d: 	callq	_ZdlPvm@PLT # Offset: 11885
.Ltmp1434:
    00002e72: 	movq	-0xa0(%rbp), %rdi
    00002e79: 	leaq	-0x90(%rbp), %rax
    00002e80: 	cmpq	%rax, %rdi
    00002e83: 	jne	.Ltmp1435 # Offset: 11907
.Ltmp1439:
    00002e89: 	movl	$0x4, %esi
    00002e8e: 	movq	%r12, %rdi
    00002e91: 	callq	_ZdlPvm@PLT # Offset: 11921
.Ltmp1444:
    00002e96: 	movq	-0x120(%rbp), %rdi
    00002e9d: 	movl	$0x4, %esi
    00002ea2: 	callq	_ZdlPvm@PLT # Offset: 11938
.Ltmp1445:
    00002ea7: 	movq	-0xc0(%rbp), %rdi
    00002eae: 	leaq	-0xb0(%rbp), %rax
    00002eb5: 	cmpq	%rax, %rdi
    00002eb8: 	je	.Ltmp1436 # Offset: 11960
    00002eba: 	movq	-0xb0(%rbp), %rax
    00002ec1: 	leaq	0x1(%rax), %rsi
    00002ec5: 	callq	_ZdlPvm@PLT # Offset: 11973
.Ltmp1436:
    00002eca: 	movq	-0xe0(%rbp), %rdi
    00002ed1: 	leaq	-0xd0(%rbp), %rax
    00002ed8: 	cmpq	%rax, %rdi
    00002edb: 	je	.Ltmp1437 # Offset: 11995
    00002edd: 	movq	-0xd0(%rbp), %rax
    00002ee4: 	leaq	0x1(%rax), %rsi
    00002ee8: 	callq	_ZdlPvm@PLT # Offset: 12008
.Ltmp1437:
    00002eed: 	movq	%rbx, %rdi
    00002ef0: 	callq	_Unwind_Resume@PLT # Offset: 12016
    00002ef5: 	endbr64
    00002ef9: 	jmp	.Ltmp1433 # Offset: 12025
.Ltmp1432:
    00002efe: 	movq	-0x60(%rbp), %rdi
    00002f02: 	cmpq	-0x128(%rbp), %rdi
    00002f09: 	je	.Ltmp1438 # Offset: 12041
    00002f0b: 	movq	-0x50(%rbp), %rax
    00002f0f: 	leaq	0x1(%rax), %rsi
    00002f13: 	callq	_ZdlPvm@PLT # Offset: 12051
.Ltmp1438:
    00002f18: 	movq	-0x80(%rbp), %rdi
    00002f1c: 	leaq	-0x70(%rbp), %rax
    00002f20: 	cmpq	%rax, %rdi
    00002f23: 	je	.Ltmp1434 # Offset: 12067
    00002f29: 	movq	-0x70(%rbp), %rax
    00002f2d: 	leaq	0x1(%rax), %rsi
    00002f31: 	callq	_ZdlPvm@PLT # Offset: 12081
    00002f36: 	jmp	.Ltmp1434 # Offset: 12086
.Ltmp1435:
    00002f3b: 	movq	-0x90(%rbp), %rax
    00002f42: 	leaq	0x1(%rax), %rsi
    00002f46: 	callq	_ZdlPvm@PLT # Offset: 12102
    00002f4b: 	jmp	.Ltmp1439 # Offset: 12107
    00002f50: 	endbr64
    00002f54: 	jmp	.Ltmp1431 # Offset: 12116
    00002f59: 	endbr64
    00002f5d: 	jmp	.Ltmp1431 # Offset: 12125
    00002f62: 	endbr64
    00002f66: 	jmp	.Ltmp1431 # Offset: 12134
    00002f6b: 	endbr64
    00002f6f: 	jmp	.Ltmp1431 # Offset: 12143
    00002f74: 	endbr64
    00002f78: 	jmp	.Ltmp1431 # Offset: 12152
    00002f7d: 	endbr64
    00002f81: 	jmp	.Ltmp1431 # Offset: 12161
    00002f86: 	endbr64
    00002f8a: 	jmp	.Ltmp1431 # Offset: 12170
    00002f8f: 	endbr64
    00002f93: 	jmp	.Ltmp1431 # Offset: 12179
    00002f98: 	endbr64
    00002f9c: 	movq	%rax, %rbx
    00002f9f: 	jmp	.Ltmp1436 # Offset: 12191
    00002fa4: 	endbr64
.Ltmp1441:
    00002fa8: 	movq	%rax, %rbx
    00002fab: 	jmp	.Ltmp1440 # Offset: 12203
    00002fad: 	endbr64
    00002fb1: 	jmp	.Ltmp1441 # Offset: 12209
    00002fb3: 	endbr64
    00002fb7: 	jmp	.Ltmp1441 # Offset: 12215
    00002fb9: 	endbr64
    00002fbd: 	jmp	.Ltmp1441 # Offset: 12221
    00002fbf: 	endbr64
    00002fc3: 	jmp	.Ltmp1433 # Offset: 12227
    00002fc8: 	endbr64
    00002fcc: 	jmp	.Ltmp1433 # Offset: 12236
    00002fd1: 	endbr64
    00002fd5: 	movq	%rax, %rbx
    00002fd8: 	jmp	.Ltmp1442 # Offset: 12248
.Ltmp1440:
    00002fda: 	movq	-0x60(%rbp), %rdi
    00002fde: 	cmpq	-0x128(%rbp), %rdi
    00002fe5: 	je	.Ltmp1439 # Offset: 12261
.Ltmp1443:
    00002feb: 	movq	-0x50(%rbp), %rax
    00002fef: 	leaq	0x1(%rax), %rsi
    00002ff3: 	callq	_ZdlPvm@PLT # Offset: 12275
    00002ff8: 	jmp	.Ltmp1439 # Offset: 12280
.Ltmp1442:
    00002ffd: 	movq	-0x60(%rbp), %rdi
    00003001: 	leaq	-0x50(%rbp), %rax
    00003005: 	cmpq	%rax, %rdi
    00003008: 	jne	.Ltmp1443 # Offset: 12296
    0000300a: 	jmp	.Ltmp1439 # Offset: 12298
    0000300f: 	endbr64
    00003013: 	jmp	.Ltmp1431 # Offset: 12307
    00003018: 	endbr64
    0000301c: 	jmp	.Ltmp1431 # Offset: 12316
    00003021: 	endbr64
    00003025: 	jmp	.Ltmp1431 # Offset: 12325
    0000302a: 	endbr64
    0000302e: 	jmp	.Ltmp1431 # Offset: 12334
    00003033: 	endbr64
    00003037: 	jmp	.Ltmp1431 # Offset: 12343
    0000303c: 	endbr64
    00003040: 	movq	%rax, %rbx
    00003043: 	jmp	.Ltmp1438 # Offset: 12355
    00003048: 	endbr64
    0000304c: 	movq	%rax, %rbx
    0000304f: 	jmp	.Ltmp1434 # Offset: 12367
    00003054: 	endbr64
    00003058: 	jmp	.Ltmp1441 # Offset: 12376
    0000305d: 	endbr64
    00003061: 	jmp	.Ltmp1441 # Offset: 12385
    00003066: 	endbr64
    0000306a: 	movq	%rax, %rbx
    0000306d: 	jmp	.Ltmp1444 # Offset: 12397
    00003072: 	endbr64
    00003076: 	jmp	.Ltmp1433 # Offset: 12406
    0000307b: 	endbr64
    0000307f: 	jmp	.Ltmp1433 # Offset: 12415
    00003084: 	endbr64
    00003088: 	movq	%rax, %rbx
    0000308b: 	jmp	.Ltmp1439 # Offset: 12427
    00003090: 	endbr64
    00003094: 	jmp	.Ltmp1431 # Offset: 12436
    00003099: 	endbr64
    0000309d: 	movq	%rax, %rbx
    000030a0: 	jmp	.Ltmp1445 # Offset: 12448
    000030a5: 	endbr64
    000030a9: 	jmp	.Ltmp1441 # Offset: 12457
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIilEvv"

Binary Function "_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x292c0
  Size        : 0x19b
  MaxSize     : 0x1a0
  Offset      : 0x292c0
  Section     : .text
  Orc Section : .local.text._Z29laplace_initial_condition_setIlET_PS0_iiPKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rcx, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	movl	%edx, %ebp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	movq	(%rcx), %rax
    00000016: 	movq	0x8(%rcx), %rsi
    0000001a: 	movl	%ebx, %r14d
    0000001d: 	addq	%rsi, %rax
    00000020: 	addq	0x10(%rcx), %rax
    00000024: 	addq	0x18(%rcx), %rax
    00000028: 	leaq	0x3(%rax), %r12
    0000002c: 	cmovnsq	%rax, %r12
    00000030: 	imull	%edx, %r14d
    00000034: 	sarq	$0x2, %r12
    00000038: 	movslq	%r14d, %rdx
    0000003b: 	shlq	$0x3, %rdx
    0000003f: 	je	.Ltmp1446 # Offset: 63
    00000041: 	xorl	%esi, %esi
    00000043: 	callq	memset@PLT # Offset: 67
    00000048: 	movq	0x8(%r13), %rsi
    0000004c: 	movq	%rax, %rdi
.Ltmp1446:
    0000004f: 	testl	%ebx, %ebx
    00000051: 	jle	.Ltmp1447 # Offset: 81
    00000057: 	movslq	%ebp, %rcx
    0000005a: 	movq	%rdi, %rdx
    0000005d: 	xorl	%eax, %eax
    0000005f: 	shlq	$0x3, %rcx
    00000063: 	cmpl	$0x1, %ebp
    00000066: 	jne	.Ltmp1448 # Offset: 102
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1449:
    00000070: 	addl	$0x1, %eax
    00000073: 	movq	%rsi, (%rdx)
    00000076: 	addq	%rcx, %rdx
    00000079: 	cmpl	%ebx, %eax
    0000007b: 	jne	.Ltmp1449 # Offset: 123
    0000007d: 	movq	0x18(%r13), %rsi
    00000081: 	leaq	-0x8(%rdi,%rcx), %rdx
    00000086: 	xorl	%eax, %eax
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1450:
    00000090: 	addl	$0x1, %eax
    00000093: 	movq	%rsi, (%rdx)
    00000096: 	addq	%rcx, %rdx
    00000099: 	cmpl	%eax, %ebx
    0000009b: 	jne	.Ltmp1450 # Offset: 155
    0000009d: 	subl	$0x1, %r14d
    000000a1: 	movq	0x10(%r13), %rsi
    000000a5: 	movslq	%r14d, %r14
    000000a8: 	leaq	(%rdi,%r14,8), %rcx
.Ltmp1453:
    000000ac: 	movq	%rsi, (%rcx)
    000000af: 	movq	(%r13), %rdx
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1457:
    000000b8: 	movq	%rdx, (%rdi)
.Ltmp1452:
    000000bb: 	popq	%rbx
    000000bc: 	movq	%r12, %rax
    000000bf: 	popq	%rbp
    000000c0: 	popq	%r12
    000000c2: 	popq	%r13
    000000c4: 	popq	%r14
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1448:
    000000d0: 	addl	$0x1, %eax
    000000d3: 	movq	%rsi, (%rdx)
    000000d6: 	addq	%rcx, %rdx
    000000d9: 	cmpl	%eax, %ebx
    000000db: 	jne	.Ltmp1448 # Offset: 219
    000000dd: 	movq	0x18(%r13), %rsi
    000000e1: 	leaq	-0x8(%rdi,%rcx), %rdx
    000000e6: 	xorl	%eax, %eax
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1451:
    000000f0: 	addl	$0x1, %eax
    000000f3: 	movq	%rsi, (%rdx)
    000000f6: 	addq	%rcx, %rdx
    000000f9: 	cmpl	%eax, %ebx
    000000fb: 	jne	.Ltmp1451 # Offset: 251
.Ltmp1447:
    000000fd: 	subl	%ebp, %r14d
    00000100: 	movq	0x10(%r13), %rsi
    00000104: 	movslq	%r14d, %r14
    00000107: 	leaq	(%rdi,%r14,8), %rcx
    0000010b: 	testl	%ebp, %ebp
    0000010d: 	jle	.Ltmp1452 # Offset: 269
    0000010f: 	cmpl	$0x1, %ebp
    00000112: 	je	.Ltmp1453 # Offset: 274
    00000114: 	movl	%ebp, %edx
    00000116: 	movq	%rsi, %xmm0
    0000011b: 	movq	%rcx, %rax
    0000011e: 	shrl	%edx
    00000120: 	punpcklqdq	%xmm0, %xmm0
    00000124: 	shlq	$0x4, %rdx
    00000128: 	addq	%rcx, %rdx
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1454:
    00000130: 	movups	%xmm0, (%rax)
    00000133: 	addq	$0x10, %rax
    00000137: 	cmpq	%rdx, %rax
    0000013a: 	jne	.Ltmp1454 # Offset: 314
    0000013c: 	movl	%ebp, %eax
    0000013e: 	andl	$-0x2, %eax
    00000141: 	movl	%eax, %edx
    00000143: 	leaq	(%rcx,%rdx,8), %rdx
    00000147: 	cmpl	%eax, %ebp
    00000149: 	je	.Ltmp1455 # Offset: 329
    0000014b: 	movq	%rsi, (%rdx)
.Ltmp1455:
    0000014e: 	movl	%ebp, %ecx
    00000150: 	movq	(%r13), %rdx
    00000154: 	movq	%rdi, %rax
    00000157: 	shrl	%ecx
    00000159: 	subl	$0x1, %ecx
    0000015c: 	movq	%rdx, %xmm0
    00000161: 	shlq	$0x4, %rcx
    00000165: 	punpcklqdq	%xmm0, %xmm0
    00000169: 	leaq	0x10(%rdi,%rcx), %rcx
    0000016e: 	nop # Size: 2
.Ltmp1456:
    00000170: 	movups	%xmm0, (%rax)
    00000173: 	addq	$0x10, %rax
    00000177: 	cmpq	%rax, %rcx
    0000017a: 	jne	.Ltmp1456 # Offset: 378
    0000017c: 	movl	%ebp, %eax
    0000017e: 	andl	$-0x2, %eax
    00000181: 	movl	%eax, %ecx
    00000183: 	leaq	(%rdi,%rcx,8), %rdi
    00000187: 	cmpl	%ebp, %eax
    00000189: 	jne	.Ltmp1457 # Offset: 393
    0000018f: 	popq	%rbx
    00000190: 	movq	%r12, %rax
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	retq # Offset: 410
DWARF CFI Instructions:
    <empty>
End of Function "_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_"

Binary Function "_Z20convergenceLaplace2DIll17jacobi2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x29460
  Size        : 0x487
  MaxSize     : 0x490
  Offset      : 0x29460
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll17jacobi2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x88, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movl	%edx, 0x34(%rsp)
    00000033: 	movl	%r14d, %edx
    00000036: 	movl	%ecx, 0x40(%rsp)
    0000003a: 	leaq	0x50(%rsp), %rcx
    0000003f: 	movq	%r9, 0x38(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x78(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x50(%rsp)
    00000059: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000061: 	movaps	%xmm0, 0x60(%rsp)
    00000066: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 102
    0000006b: 	movl	%r15d, %edi
    0000006e: 	imull	%r14d, %edi
    00000072: 	movq	%rax, 0x48(%rsp)
    00000077: 	movslq	%edi, %r13
    0000007a: 	testl	%r13d, %r13d
    0000007d: 	jle	.Ltmp1458 # Offset: 125
    0000007f: 	movslq	%r13d, %rdx
    00000082: 	movq	%rbx, %rsi
    00000085: 	movq	%rbp, %rdi
    00000088: 	shlq	$0x3, %rdx
    0000008c: 	callq	memmove@PLT # Offset: 140
.Ltmp1458:
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movl	$0x2710, iterations(%rip)
    000000a1: 	movl	%eax, 0x44(%rsp)
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0x8(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1459 # Offset: 189
    000000c3: 	movl	0x34(%rsp), %edi
    000000c7: 	movl	0x40(%rsp), %eax
    000000cb: 	movl	%r12d, %r10d
    000000ce: 	negl	%r10d
    000000d1: 	leal	-0x2(%rax), %esi
    000000d4: 	leal	-0x3(%rdi), %eax
    000000d7: 	movslq	%r10d, %r10
    000000da: 	imull	%r12d, %eax
    000000de: 	leal	-0x2(%rdi), %r15d
    000000e2: 	movl	%esi, 0x10(%rsp)
    000000e6: 	shlq	$0x3, %r10
    000000ea: 	movslq	%esi, %r14
    000000ed: 	cltq
    000000ef: 	shlq	$0x3, %rax
    000000f3: 	movq	%rax, 0x20(%rsp)
    000000f8: 	movl	%r15d, %eax
    000000fb: 	imull	%r12d, %eax
    000000ff: 	cltq
    00000101: 	shlq	$0x3, %rax
    00000105: 	movq	%rax, 0x28(%rsp)
    0000010a: 	leal	-0x1(%rdi), %eax
    0000010d: 	imull	%r12d, %eax
    00000111: 	xorl	%r12d, %r12d
    00000114: 	cltq
    00000116: 	shlq	$0x3, %rax
    0000011a: 	movq	%rax, 0x18(%rsp)
    0000011f: 	nop # Size: 1
.Ltmp1470:
    00000120: 	testl	%r15d, %r15d
    00000123: 	jle	.Ltmp1460 # Offset: 291
    00000125: 	movl	0x10(%rsp), %eax
    00000129: 	testl	%eax, %eax
    0000012b: 	jle	.Ltmp1460 # Offset: 299
    0000012d: 	movq	0x20(%rsp), %rax
    00000132: 	movq	0x18(%rsp), %rdi
    00000137: 	movl	%r15d, %r11d
    0000013a: 	leaq	(%rbx,%rax), %r9
    0000013e: 	movq	0x28(%rsp), %rax
    00000143: 	leaq	(%rbx,%rdi), %r8
    00000147: 	leaq	(%rbx,%rax), %rsi
    0000014b: 	leaq	(%rbp,%rax), %rdi
.Ltmp1462:
    00000150: 	subl	$0x1, %r11d
    00000154: 	movq	%r14, %rdx
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1461:
    00000160: 	movq	-0x8(%rsi,%rdx,8), %rax
    00000165: 	addq	(%r9,%rdx,8), %rax
    00000169: 	addq	0x8(%rsi,%rdx,8), %rax
    0000016e: 	addq	(%r8,%rdx,8), %rax
    00000172: 	leaq	0x5(%rax), %rcx
    00000176: 	addq	$0x2, %rax
    0000017a: 	cmovnsq	%rax, %rcx
    0000017e: 	sarq	$0x2, %rcx
    00000182: 	movq	%rcx, (%rdi,%rdx,8)
    00000186: 	subq	$0x1, %rdx
    0000018a: 	testl	%edx, %edx
    0000018c: 	jg	.Ltmp1461 # Offset: 396
    0000018e: 	addq	%r10, %r9
    00000191: 	addq	%r10, %rsi
    00000194: 	addq	%r10, %r8
    00000197: 	addq	%r10, %rdi
    0000019a: 	testl	%r11d, %r11d
    0000019d: 	jne	.Ltmp1462 # Offset: 413
.Ltmp1460:
    0000019f: 	xorl	%r9d, %r9d
    000001a2: 	xorl	%eax, %eax
    000001a4: 	testq	%r13, %r13
    000001a7: 	je	.Ltmp1463 # Offset: 423
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp1465:
    000001b0: 	movq	(%rbx,%rax,8), %rcx
    000001b4: 	movq	(%rbp,%rax,8), %rdx
    000001b9: 	movq	%rcx, %rsi
    000001bc: 	subq	%rdx, %rsi
    000001bf: 	js	.Ltmp1464 # Offset: 447
    000001c1: 	addq	$0x1, %rax
    000001c5: 	addq	%rsi, %r9
    000001c8: 	cmpq	%rax, %r13
    000001cb: 	jne	.Ltmp1465 # Offset: 459
.Ltmp1471:
    000001cd: 	xorl	%r8d, %r8d
    000001d0: 	xorl	%eax, %eax
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1467:
    000001d8: 	movq	(%rbx,%rax,8), %rcx
    000001dc: 	movq	(%rbp,%rax,8), %rdx
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	subq	%rdx, %rsi
    000001e7: 	js	.Ltmp1466 # Offset: 487
    000001e9: 	cmpq	%rsi, %r8
    000001ec: 	cmovlq	%rsi, %r8
    000001f0: 	addq	$0x1, %rax
    000001f4: 	cmpq	%rax, %r13
    000001f7: 	jne	.Ltmp1467 # Offset: 503
.Ltmp1472:
    000001f9: 	cmpl	%r12d, 0xc0(%rsp)
    00000201: 	jge	.Ltmp1468 # Offset: 513
    00000203: 	testq	%r8, %r8
    00000206: 	jle	.Ltmp1469 # Offset: 518
    00000208: 	cmpq	$0x9, %r9
    0000020c: 	jle	.Ltmp1469 # Offset: 524
.Ltmp1468:
    0000020e: 	movq	%rbp, %rax
    00000211: 	addl	$0x1, %r12d
    00000215: 	movq	%rbx, %rbp
    00000218: 	cmpl	0x8(%rsp), %r12d
    0000021d: 	je	.Ltmp1469 # Offset: 541
    0000021f: 	movq	%rax, %rbx
    00000222: 	jmp	.Ltmp1470 # Offset: 546
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1464:
    00000230: 	subq	%rcx, %rdx
    00000233: 	addq	$0x1, %rax
    00000237: 	addq	%rdx, %r9
    0000023a: 	cmpq	%rax, %r13
    0000023d: 	jne	.Ltmp1465 # Offset: 573
    00000243: 	jmp	.Ltmp1471 # Offset: 579
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp1466:
    00000248: 	subq	%rcx, %rdx
    0000024b: 	cmpq	%rdx, %r8
    0000024e: 	cmovlq	%rdx, %r8
    00000252: 	addq	$0x1, %rax
    00000256: 	cmpq	%rax, %r13
    00000259: 	jne	.Ltmp1467 # Offset: 601
    0000025f: 	jmp	.Ltmp1472 # Offset: 607
.Ltmp1463:
    00000261: 	xorl	%r8d, %r8d
    00000264: 	cmpl	%r12d, 0xc0(%rsp)
    0000026c: 	jge	.Ltmp1468 # Offset: 620
.Ltmp1469:
    0000026e: 	movq	%r9, 0x10(%rsp)
    00000273: 	movq	%r8, 0x8(%rsp)
    00000278: 	callq	clock@PLT # Offset: 632
    0000027d: 	movl	0x34(%rsp), %edi
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	0x8(%rsp), %r8
    0000028a: 	movq	%rax, end_time(%rip)
    00000291: 	subq	start_time(%rip), %rax
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	movl	%edi, %eax
    0000029f: 	divsd	DATAat0x49520(%rip), %xmm0
    000002a7: 	movq	0x10(%rsp), %r9
    000002ac: 	shrl	$0x1f, %eax
    000002af: 	movq	%xmm0, %rbx
    000002b4: 	addl	%edi, %eax
    000002b6: 	movl	0x40(%rsp), %edi
    000002ba: 	sarl	%eax
    000002bc: 	movl	%edi, %edx
    000002be: 	imull	%edi, %eax
    000002c1: 	shrl	$0x1f, %edx
    000002c4: 	addl	%edi, %edx
    000002c6: 	movq	0x48(%rsp), %rdi
    000002cb: 	sarl	%edx
    000002cd: 	addl	%edx, %eax
    000002cf: 	cltq
    000002d1: 	subq	(%rbp,%rax,8), %rdi
    000002d6: 	cmpl	%r12d, iterations(%rip)
    000002dd: 	movq	%rdi, %rbp
    000002e0: 	jg	.Ltmp1473 # Offset: 736
    000002e2: 	cmpq	$0xa, %r9
    000002e6: 	jle	.Ltmp1473 # Offset: 742
    000002e8: 	cmpq	$0x1, %r8
    000002ec: 	jle	.Ltmp1473 # Offset: 748
    000002ee: 	movq	0x38(%rsp), %rax
    000002f3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000002fa: 	movq	%r13, %rdi
    000002fd: 	movq	0x8(%rax), %rdx
    00000301: 	movq	(%rax), %rsi
    00000304: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 772
    00000309: 	movl	$0x11, %edx
    0000030e: 	leaq	DATAat0x49199(%rip), %rsi
    00000315: 	movq	%rax, %rdi
    00000318: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 792
    0000031d: 	movq	0x8(%rsp), %r8
    00000322: 	movq	0x10(%rsp), %r9
    00000327: 	jmp	.Ltmp1474 # Offset: 807
.Ltmp1473:
    00000329: 	movq	0x38(%rsp), %rax
    0000032e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000335: 	movq	%r9, 0x10(%rsp)
    0000033a: 	movq	%r13, %rdi
    0000033d: 	movq	%r8, 0x8(%rsp)
    00000342: 	movq	0x8(%rax), %rdx
    00000346: 	movq	(%rax), %rsi
    00000349: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 841
    0000034e: 	movl	$0xa, %edx
    00000353: 	leaq	DATAat0x491ab(%rip), %rsi
    0000035a: 	movq	%rax, %rdi
    0000035d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 861
    00000362: 	movq	0x10(%rsp), %r9
    00000367: 	movq	0x8(%rsp), %r8
.Ltmp1474:
    0000036c: 	movl	$0x4, %edx
    00000371: 	leaq	DATAat0x491b6(%rip), %rsi
    00000378: 	movq	%r13, %rdi
    0000037b: 	movq	%r9, 0x10(%rsp)
    00000380: 	movq	%r8, 0x8(%rsp)
    00000385: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 901
    0000038a: 	movl	%r12d, %esi
    0000038d: 	movq	%r13, %rdi
    00000390: 	callq	_ZNSolsEi@PLT # Offset: 912
    00000395: 	movl	$0xb, %edx
    0000039a: 	leaq	DATAat0x491bb(%rip), %rsi
    000003a1: 	movq	%rax, %rdi
    000003a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 932
    000003a9: 	movl	$0xa, %edx
    000003ae: 	leaq	DATAat0x491c7(%rip), %rsi
    000003b5: 	movq	%r13, %rdi
    000003b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 952
    000003bd: 	movq	0x10(%rsp), %rsi
    000003c2: 	movq	%r13, %rdi
    000003c5: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 965
    000003ca: 	movl	$0x7, %edx
    000003cf: 	leaq	DATAat0x491d2(%rip), %rsi
    000003d6: 	movq	%rax, %rdi
    000003d9: 	movq	%rax, %r12
    000003dc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 988
    000003e1: 	movq	0x8(%rsp), %rsi
    000003e6: 	movq	%r12, %rdi
    000003e9: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1001
    000003ee: 	movl	$0x10, %edx
    000003f3: 	leaq	DATAat0x491da(%rip), %rsi
    000003fa: 	movq	%rax, %r12
    000003fd: 	movq	%rax, %rdi
    00000400: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1024
    00000405: 	movq	%rbp, %rsi
    00000408: 	movq	%r12, %rdi
    0000040b: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1035
    00000410: 	movl	$0x8, %edx
    00000415: 	leaq	DATAat0x491eb(%rip), %rsi
    0000041c: 	movq	%rax, %rbp
    0000041f: 	movq	%rax, %rdi
    00000422: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1058
    00000427: 	movq	%rbx, %xmm0
    0000042c: 	movq	%rbp, %rdi
    0000042f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1071
    00000434: 	movl	$0x2, %edx
    00000439: 	leaq	DATAat0x491f4(%rip), %rsi
    00000440: 	movq	%rax, %rdi
    00000443: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1091
    00000448: 	movl	0x44(%rsp), %eax
    0000044c: 	movl	%eax, iterations(%rip)
    00000452: 	movq	0x78(%rsp), %rax
    00000457: 	subq	%fs:0x28, %rax
    00000460: 	jne	.Ltmp1475 # Offset: 1120
    00000462: 	addq	$0x88, %rsp
    00000469: 	popq	%rbx
    0000046a: 	popq	%rbp
    0000046b: 	popq	%r12
    0000046d: 	popq	%r13
    0000046f: 	popq	%r14
    00000471: 	popq	%r15
    00000473: 	retq # Offset: 1139
.Ltmp1459:
    00000474: 	xorl	%r12d, %r12d
    00000477: 	xorl	%r8d, %r8d
    0000047a: 	xorl	%r9d, %r9d
    0000047d: 	jmp	.Ltmp1469 # Offset: 1149
.Ltmp1475:
    00000482: 	callq	__stack_chk_fail@PLT # Offset: 1154
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll17jacobi2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll18jacobi2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x298f0
  Size        : 0x45f
  MaxSize     : 0x460
  Offset      : 0x298f0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll18jacobi2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x78, %rsp
    00000024: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002c: 	movl	%edx, 0x24(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x30(%rsp)
    00000037: 	leaq	0x40(%rsp), %rcx
    0000003c: 	movq	%r9, 0x28(%rsp)
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x68(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movaps	%xmm0, 0x40(%rsp)
    00000056: 	movdqa	DATAat0x49490(%rip), %xmm0
    0000005e: 	movaps	%xmm0, 0x50(%rsp)
    00000063: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 99
    00000068: 	movl	%r15d, %edi
    0000006b: 	imull	%r14d, %edi
    0000006f: 	movq	%rax, 0x38(%rsp)
    00000074: 	movslq	%edi, %r13
    00000077: 	testl	%r13d, %r13d
    0000007a: 	jle	.Ltmp1476 # Offset: 122
    0000007c: 	movslq	%r13d, %rdx
    0000007f: 	movq	%rbx, %rsi
    00000082: 	movq	%rbp, %rdi
    00000085: 	shlq	$0x3, %rdx
    00000089: 	callq	memmove@PLT # Offset: 137
.Ltmp1476:
    0000008e: 	movl	iterations(%rip), %eax
    00000094: 	movl	$0x2710, iterations(%rip)
    0000009e: 	movl	%eax, 0x34(%rsp)
    000000a2: 	callq	clock@PLT # Offset: 162
    000000a7: 	movq	%rax, start_time(%rip)
    000000ae: 	movl	iterations(%rip), %eax
    000000b4: 	movl	%eax, 0x8(%rsp)
    000000b8: 	testl	%eax, %eax
    000000ba: 	jle	.Ltmp1477 # Offset: 186
    000000c0: 	movl	0x24(%rsp), %eax
    000000c4: 	movslq	%r12d, %r10
    000000c7: 	shlq	$0x3, %r10
    000000cb: 	leal	-0x1(%rax), %r14d
    000000cf: 	movl	0x30(%rsp), %eax
    000000d3: 	leal	-0x2(%rax), %edi
    000000d6: 	leal	(%r12,%r12), %eax
    000000da: 	xorl	%r12d, %r12d
    000000dd: 	cltq
    000000df: 	movl	%edi, 0x10(%rsp)
    000000e3: 	movslq	%edi, %r15
    000000e6: 	shlq	$0x3, %rax
    000000ea: 	movq	%rax, 0x18(%rsp)
    000000ef: 	nop # Size: 1
.Ltmp1488:
    000000f0: 	cmpl	$0x1, %r14d
    000000f4: 	jle	.Ltmp1478 # Offset: 244
    000000f6: 	movl	0x10(%rsp), %eax
    000000fa: 	testl	%eax, %eax
    000000fc: 	jle	.Ltmp1478 # Offset: 252
    000000fe: 	movq	0x18(%rsp), %rax
    00000103: 	movq	%rbx, %r9
    00000106: 	leaq	(%rbx,%r10), %rsi
    0000010a: 	leaq	(%rbp,%r10), %rdi
    0000010f: 	movl	$0x1, %r11d
    00000115: 	leaq	(%rbx,%rax), %r8
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp1480:
    00000120: 	addl	$0x1, %r11d
    00000124: 	movq	%r15, %rdx
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1479:
    00000130: 	movq	-0x8(%rsi,%rdx,8), %rax
    00000135: 	addq	(%r9,%rdx,8), %rax
    00000139: 	addq	0x8(%rsi,%rdx,8), %rax
    0000013e: 	addq	(%r8,%rdx,8), %rax
    00000142: 	leaq	0x5(%rax), %rcx
    00000146: 	addq	$0x2, %rax
    0000014a: 	cmovnsq	%rax, %rcx
    0000014e: 	sarq	$0x2, %rcx
    00000152: 	movq	%rcx, (%rdi,%rdx,8)
    00000156: 	subq	$0x1, %rdx
    0000015a: 	testl	%edx, %edx
    0000015c: 	jg	.Ltmp1479 # Offset: 348
    0000015e: 	addq	%r10, %r9
    00000161: 	addq	%r10, %rsi
    00000164: 	addq	%r10, %r8
    00000167: 	addq	%r10, %rdi
    0000016a: 	cmpl	%r11d, %r14d
    0000016d: 	jne	.Ltmp1480 # Offset: 365
.Ltmp1478:
    0000016f: 	testq	%r13, %r13
    00000172: 	je	.Ltmp1481 # Offset: 370
    00000178: 	xorl	%r9d, %r9d
    0000017b: 	xorl	%eax, %eax
    0000017d: 	nopl	(%rax) # Size: 3
.Ltmp1483:
    00000180: 	movq	(%rbx,%rax,8), %rcx
    00000184: 	movq	(%rbp,%rax,8), %rdx
    00000189: 	movq	%rcx, %rsi
    0000018c: 	subq	%rdx, %rsi
    0000018f: 	js	.Ltmp1482 # Offset: 399
    00000191: 	addq	$0x1, %rax
    00000195: 	addq	%rsi, %r9
    00000198: 	cmpq	%rax, %r13
    0000019b: 	jne	.Ltmp1483 # Offset: 411
.Ltmp1489:
    0000019d: 	xorl	%r8d, %r8d
    000001a0: 	xorl	%eax, %eax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1485:
    000001a8: 	movq	(%rbx,%rax,8), %rcx
    000001ac: 	movq	(%rbp,%rax,8), %rdx
    000001b1: 	movq	%rcx, %rsi
    000001b4: 	subq	%rdx, %rsi
    000001b7: 	js	.Ltmp1484 # Offset: 439
    000001b9: 	cmpq	%rsi, %r8
    000001bc: 	cmovlq	%rsi, %r8
    000001c0: 	addq	$0x1, %rax
    000001c4: 	cmpq	%rax, %r13
    000001c7: 	jne	.Ltmp1485 # Offset: 455
.Ltmp1490:
    000001c9: 	cmpl	%r12d, 0xb0(%rsp)
    000001d1: 	jge	.Ltmp1486 # Offset: 465
    000001d3: 	testq	%r8, %r8
    000001d6: 	jle	.Ltmp1487 # Offset: 470
    000001d8: 	cmpq	$0x9, %r9
    000001dc: 	jle	.Ltmp1487 # Offset: 476
.Ltmp1486:
    000001de: 	movq	%rbp, %rax
    000001e1: 	addl	$0x1, %r12d
    000001e5: 	movq	%rbx, %rbp
    000001e8: 	cmpl	0x8(%rsp), %r12d
    000001ed: 	je	.Ltmp1487 # Offset: 493
    000001ef: 	movq	%rax, %rbx
    000001f2: 	jmp	.Ltmp1488 # Offset: 498
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1482:
    00000200: 	subq	%rcx, %rdx
    00000203: 	addq	$0x1, %rax
    00000207: 	addq	%rdx, %r9
    0000020a: 	cmpq	%rax, %r13
    0000020d: 	jne	.Ltmp1483 # Offset: 525
    00000213: 	jmp	.Ltmp1489 # Offset: 531
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp1484:
    00000218: 	subq	%rcx, %rdx
    0000021b: 	cmpq	%rdx, %r8
    0000021e: 	cmovlq	%rdx, %r8
    00000222: 	addq	$0x1, %rax
    00000226: 	cmpq	%rax, %r13
    00000229: 	jne	.Ltmp1485 # Offset: 553
    0000022f: 	jmp	.Ltmp1490 # Offset: 559
.Ltmp1481:
    00000231: 	cmpl	%r12d, 0xb0(%rsp)
    00000239: 	jl	.Ltmp1491 # Offset: 569
    0000023b: 	xorl	%r9d, %r9d
    0000023e: 	xorl	%r8d, %r8d
    00000241: 	jmp	.Ltmp1486 # Offset: 577
.Ltmp1491:
    00000243: 	xorl	%r8d, %r8d
    00000246: 	xorl	%r9d, %r9d
.Ltmp1487:
    00000249: 	movq	%r9, 0x10(%rsp)
    0000024e: 	movq	%r8, 0x8(%rsp)
    00000253: 	callq	clock@PLT # Offset: 595
    00000258: 	movl	0x24(%rsp), %edi
    0000025c: 	pxor	%xmm0, %xmm0
    00000260: 	movq	0x8(%rsp), %r8
    00000265: 	movq	%rax, end_time(%rip)
    0000026c: 	subq	start_time(%rip), %rax
    00000273: 	cvtsi2sd	%rax, %xmm0
    00000278: 	movl	%edi, %eax
    0000027a: 	divsd	DATAat0x49520(%rip), %xmm0
    00000282: 	movq	0x10(%rsp), %r9
    00000287: 	shrl	$0x1f, %eax
    0000028a: 	movq	%xmm0, %rbx
    0000028f: 	addl	%edi, %eax
    00000291: 	movl	0x30(%rsp), %edi
    00000295: 	sarl	%eax
    00000297: 	movl	%edi, %edx
    00000299: 	imull	%edi, %eax
    0000029c: 	shrl	$0x1f, %edx
    0000029f: 	addl	%edi, %edx
    000002a1: 	movq	0x38(%rsp), %rdi
    000002a6: 	sarl	%edx
    000002a8: 	addl	%edx, %eax
    000002aa: 	cltq
    000002ac: 	subq	(%rbp,%rax,8), %rdi
    000002b1: 	cmpl	%r12d, iterations(%rip)
    000002b8: 	movq	%rdi, %rbp
    000002bb: 	jg	.Ltmp1492 # Offset: 699
    000002bd: 	cmpq	$0xa, %r9
    000002c1: 	jle	.Ltmp1492 # Offset: 705
    000002c3: 	cmpq	$0x1, %r8
    000002c7: 	jle	.Ltmp1492 # Offset: 711
    000002c9: 	movq	0x28(%rsp), %rax
    000002ce: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000002d5: 	movq	%r13, %rdi
    000002d8: 	movq	0x8(%rax), %rdx
    000002dc: 	movq	(%rax), %rsi
    000002df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 735
    000002e4: 	movl	$0x11, %edx
    000002e9: 	leaq	DATAat0x49199(%rip), %rsi
    000002f0: 	movq	%rax, %rdi
    000002f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 755
    000002f8: 	movq	0x8(%rsp), %r8
    000002fd: 	movq	0x10(%rsp), %r9
    00000302: 	jmp	.Ltmp1493 # Offset: 770
.Ltmp1492:
    00000304: 	movq	0x28(%rsp), %rax
    00000309: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000310: 	movq	%r9, 0x10(%rsp)
    00000315: 	movq	%r13, %rdi
    00000318: 	movq	%r8, 0x8(%rsp)
    0000031d: 	movq	0x8(%rax), %rdx
    00000321: 	movq	(%rax), %rsi
    00000324: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 804
    00000329: 	movl	$0xa, %edx
    0000032e: 	leaq	DATAat0x491ab(%rip), %rsi
    00000335: 	movq	%rax, %rdi
    00000338: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 824
    0000033d: 	movq	0x10(%rsp), %r9
    00000342: 	movq	0x8(%rsp), %r8
.Ltmp1493:
    00000347: 	movl	$0x4, %edx
    0000034c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	movq	%r9, 0x10(%rsp)
    0000035b: 	movq	%r8, 0x8(%rsp)
    00000360: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 864
    00000365: 	movl	%r12d, %esi
    00000368: 	movq	%r13, %rdi
    0000036b: 	callq	_ZNSolsEi@PLT # Offset: 875
    00000370: 	movl	$0xb, %edx
    00000375: 	leaq	DATAat0x491bb(%rip), %rsi
    0000037c: 	movq	%rax, %rdi
    0000037f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 895
    00000384: 	movl	$0xa, %edx
    00000389: 	leaq	DATAat0x491c7(%rip), %rsi
    00000390: 	movq	%r13, %rdi
    00000393: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 915
    00000398: 	movq	0x10(%rsp), %rsi
    0000039d: 	movq	%r13, %rdi
    000003a0: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 928
    000003a5: 	movl	$0x7, %edx
    000003aa: 	leaq	DATAat0x491d2(%rip), %rsi
    000003b1: 	movq	%rax, %rdi
    000003b4: 	movq	%rax, %r12
    000003b7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 951
    000003bc: 	movq	0x8(%rsp), %rsi
    000003c1: 	movq	%r12, %rdi
    000003c4: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 964
    000003c9: 	movl	$0x10, %edx
    000003ce: 	leaq	DATAat0x491da(%rip), %rsi
    000003d5: 	movq	%rax, %r12
    000003d8: 	movq	%rax, %rdi
    000003db: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 987
    000003e0: 	movq	%rbp, %rsi
    000003e3: 	movq	%r12, %rdi
    000003e6: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 998
    000003eb: 	movl	$0x8, %edx
    000003f0: 	leaq	DATAat0x491eb(%rip), %rsi
    000003f7: 	movq	%rax, %rbp
    000003fa: 	movq	%rax, %rdi
    000003fd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1021
    00000402: 	movq	%rbx, %xmm0
    00000407: 	movq	%rbp, %rdi
    0000040a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1034
    0000040f: 	movl	$0x2, %edx
    00000414: 	leaq	DATAat0x491f4(%rip), %rsi
    0000041b: 	movq	%rax, %rdi
    0000041e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1054
    00000423: 	movl	0x34(%rsp), %eax
    00000427: 	movl	%eax, iterations(%rip)
    0000042d: 	movq	0x68(%rsp), %rax
    00000432: 	subq	%fs:0x28, %rax
    0000043b: 	jne	.Ltmp1494 # Offset: 1083
    0000043d: 	addq	$0x78, %rsp
    00000441: 	popq	%rbx
    00000442: 	popq	%rbp
    00000443: 	popq	%r12
    00000445: 	popq	%r13
    00000447: 	popq	%r14
    00000449: 	popq	%r15
    0000044b: 	retq # Offset: 1099
.Ltmp1477:
    0000044c: 	xorl	%r12d, %r12d
    0000044f: 	xorl	%r8d, %r8d
    00000452: 	xorl	%r9d, %r9d
    00000455: 	jmp	.Ltmp1487 # Offset: 1109
.Ltmp1494:
    0000045a: 	callq	__stack_chk_fail@PLT # Offset: 1114
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll18jacobi2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll18jacobi2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x29d50
  Size        : 0x49e
  MaxSize     : 0x4a0
  Offset      : 0x29d50
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll18jacobi2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x88, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movl	%edx, 0x34(%rsp)
    00000033: 	movl	%r14d, %edx
    00000036: 	movl	%ecx, 0x40(%rsp)
    0000003a: 	leaq	0x50(%rsp), %rcx
    0000003f: 	movq	%r9, 0x38(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x78(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x50(%rsp)
    00000059: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000061: 	movaps	%xmm0, 0x60(%rsp)
    00000066: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 102
    0000006b: 	movl	%r15d, %edi
    0000006e: 	imull	%r14d, %edi
    00000072: 	movq	%rax, 0x48(%rsp)
    00000077: 	movslq	%edi, %r14
    0000007a: 	testl	%r14d, %r14d
    0000007d: 	jle	.Ltmp1495 # Offset: 125
    0000007f: 	movslq	%r14d, %rdx
    00000082: 	movq	%rbx, %rsi
    00000085: 	movq	%rbp, %rdi
    00000088: 	shlq	$0x3, %rdx
    0000008c: 	callq	memmove@PLT # Offset: 140
.Ltmp1495:
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movl	$0x2710, iterations(%rip)
    000000a1: 	movl	%eax, 0x44(%rsp)
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0xc(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1496 # Offset: 189
    000000c3: 	movl	0x40(%rsp), %ecx
    000000c7: 	movl	0x34(%rsp), %esi
    000000cb: 	movl	%r12d, %r10d
    000000ce: 	movl	$0x0, 0x4(%rsp)
    000000d6: 	negl	%r10d
    000000d9: 	leal	-0x1(%rcx), %eax
    000000dc: 	leal	-0x2(%rsi), %edi
    000000df: 	movslq	%r10d, %r10
    000000e2: 	movl	%eax, 0x30(%rsp)
    000000e6: 	leal	-0x3(%rsi), %eax
    000000e9: 	shlq	$0x3, %r10
    000000ed: 	imull	%r12d, %eax
    000000f1: 	movl	%edi, 0x8(%rsp)
    000000f5: 	cltq
    000000f7: 	shlq	$0x3, %rax
    000000fb: 	movq	%rax, 0x18(%rsp)
    00000100: 	movl	%edi, %eax
    00000102: 	imull	%r12d, %eax
    00000106: 	movslq	%eax, %rdx
    00000109: 	movq	%rdx, %rax
    0000010c: 	negq	%rax
    0000010f: 	shlq	$0x3, %rax
    00000113: 	movq	%rax, 0x28(%rsp)
    00000118: 	leal	-0x1(%rsi), %eax
    0000011b: 	imull	%r12d, %eax
    0000011f: 	cltq
    00000121: 	shlq	$0x3, %rax
    00000125: 	movq	%rax, 0x20(%rsp)
    0000012a: 	leal	-0x3(%rcx), %eax
    0000012d: 	addq	$0x1, %rax
    00000131: 	addq	%rax, %rdx
    00000134: 	negq	%rax
    00000137: 	leaq	(,%rdx,8), %rdi
    0000013f: 	leaq	(,%rax,8), %r15
    00000147: 	movq	%rdi, 0x10(%rsp)
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp1507:
    00000150: 	movl	0x8(%rsp), %eax
    00000154: 	testl	%eax, %eax
    00000156: 	jle	.Ltmp1497 # Offset: 342
    0000015c: 	cmpl	$0x1, 0x30(%rsp)
    00000161: 	jle	.Ltmp1497 # Offset: 353
    00000163: 	movq	0x10(%rsp), %r8
    00000168: 	movq	0x20(%rsp), %r13
    0000016d: 	movq	0x28(%rsp), %r9
    00000172: 	movq	0x18(%rsp), %r12
    00000177: 	movl	0x8(%rsp), %r11d
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp1499:
    00000180: 	leaq	(%r12,%r9), %rdi
    00000184: 	leaq	(%r9,%r13), %rsi
    00000188: 	subl	$0x1, %r11d
    0000018c: 	leaq	(%r15,%r8), %rdx
    00000190: 	addq	%rbx, %rdi
    00000193: 	addq	%rbx, %rsi
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1498:
    000001a0: 	movq	(%rbx,%rdx), %rax
    000001a4: 	addq	0x8(%rdx,%rdi), %rax
    000001a9: 	addq	0x10(%rbx,%rdx), %rax
    000001ae: 	addq	0x8(%rdx,%rsi), %rax
    000001b3: 	leaq	0x5(%rax), %rcx
    000001b7: 	addq	$0x2, %rax
    000001bb: 	cmovnsq	%rax, %rcx
    000001bf: 	sarq	$0x2, %rcx
    000001c3: 	movq	%rcx, 0x8(%rbp,%rdx)
    000001c8: 	addq	$0x8, %rdx
    000001cc: 	cmpq	%r8, %rdx
    000001cf: 	jne	.Ltmp1498 # Offset: 463
    000001d1: 	addq	%r10, %r12
    000001d4: 	subq	%r10, %r9
    000001d7: 	addq	%r10, %r13
    000001da: 	addq	%r10, %r8
    000001dd: 	testl	%r11d, %r11d
    000001e0: 	jne	.Ltmp1499 # Offset: 480
.Ltmp1497:
    000001e2: 	testq	%r14, %r14
    000001e5: 	je	.Ltmp1500 # Offset: 485
    000001eb: 	xorl	%r13d, %r13d
    000001ee: 	xorl	%eax, %eax
.Ltmp1502:
    000001f0: 	movq	(%rbx,%rax,8), %rcx
    000001f4: 	movq	(%rbp,%rax,8), %rdx
    000001f9: 	movq	%rcx, %rsi
    000001fc: 	subq	%rdx, %rsi
    000001ff: 	js	.Ltmp1501 # Offset: 511
    00000201: 	addq	$0x1, %rax
    00000205: 	addq	%rsi, %r13
    00000208: 	cmpq	%rax, %r14
    0000020b: 	jne	.Ltmp1502 # Offset: 523
.Ltmp1508:
    0000020d: 	xorl	%r12d, %r12d
    00000210: 	xorl	%eax, %eax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1504:
    00000218: 	movq	(%rbx,%rax,8), %rcx
    0000021c: 	movq	(%rbp,%rax,8), %rdx
    00000221: 	movq	%rcx, %rsi
    00000224: 	subq	%rdx, %rsi
    00000227: 	js	.Ltmp1503 # Offset: 551
    00000229: 	cmpq	%rsi, %r12
    0000022c: 	cmovlq	%rsi, %r12
    00000230: 	addq	$0x1, %rax
    00000234: 	cmpq	%rax, %r14
    00000237: 	jne	.Ltmp1504 # Offset: 567
.Ltmp1509:
    00000239: 	movl	0x4(%rsp), %eax
    0000023d: 	cmpl	%eax, 0xc0(%rsp)
    00000244: 	jge	.Ltmp1505 # Offset: 580
    00000246: 	testq	%r12, %r12
    00000249: 	jle	.Ltmp1506 # Offset: 585
    0000024b: 	cmpq	$0x9, %r13
    0000024f: 	jle	.Ltmp1506 # Offset: 591
.Ltmp1505:
    00000251: 	addl	$0x1, 0x4(%rsp)
    00000256: 	movq	%rbp, %rax
    00000259: 	movl	0x4(%rsp), %edi
    0000025d: 	movq	%rbx, %rbp
    00000260: 	cmpl	0xc(%rsp), %edi
    00000264: 	je	.Ltmp1506 # Offset: 612
    00000266: 	movq	%rax, %rbx
    00000269: 	jmp	.Ltmp1507 # Offset: 617
    0000026e: 	nop # Size: 2
.Ltmp1501:
    00000270: 	subq	%rcx, %rdx
    00000273: 	addq	$0x1, %rax
    00000277: 	addq	%rdx, %r13
    0000027a: 	cmpq	%rax, %r14
    0000027d: 	jne	.Ltmp1502 # Offset: 637
    00000283: 	jmp	.Ltmp1508 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp1503:
    00000288: 	subq	%rcx, %rdx
    0000028b: 	cmpq	%rdx, %r12
    0000028e: 	cmovlq	%rdx, %r12
    00000292: 	addq	$0x1, %rax
    00000296: 	cmpq	%rax, %r14
    00000299: 	jne	.Ltmp1504 # Offset: 665
    0000029f: 	jmp	.Ltmp1509 # Offset: 671
.Ltmp1500:
    000002a1: 	movl	0x4(%rsp), %eax
    000002a5: 	cmpl	%eax, 0xc0(%rsp)
    000002ac: 	jl	.Ltmp1510 # Offset: 684
    000002ae: 	xorl	%r13d, %r13d
    000002b1: 	xorl	%r12d, %r12d
    000002b4: 	jmp	.Ltmp1505 # Offset: 692
.Ltmp1510:
    000002b6: 	xorl	%r12d, %r12d
    000002b9: 	xorl	%r13d, %r13d
.Ltmp1506:
    000002bc: 	callq	clock@PLT # Offset: 700
    000002c1: 	movl	0x34(%rsp), %edi
    000002c5: 	pxor	%xmm0, %xmm0
    000002c9: 	movq	%rax, end_time(%rip)
    000002d0: 	subq	start_time(%rip), %rax
    000002d7: 	cvtsi2sd	%rax, %xmm0
    000002dc: 	movl	%edi, %eax
    000002de: 	divsd	DATAat0x49520(%rip), %xmm0
    000002e6: 	movq	%xmm0, %rbx
    000002eb: 	shrl	$0x1f, %eax
    000002ee: 	addl	%edi, %eax
    000002f0: 	movl	0x40(%rsp), %edi
    000002f4: 	sarl	%eax
    000002f6: 	movl	%edi, %edx
    000002f8: 	imull	%edi, %eax
    000002fb: 	shrl	$0x1f, %edx
    000002fe: 	addl	%edi, %edx
    00000300: 	movq	0x48(%rsp), %rdi
    00000305: 	sarl	%edx
    00000307: 	addl	%edx, %eax
    00000309: 	cltq
    0000030b: 	subq	(%rbp,%rax,8), %rdi
    00000310: 	movl	0x4(%rsp), %eax
    00000314: 	cmpl	%eax, iterations(%rip)
    0000031a: 	movq	%rdi, %rbp
    0000031d: 	jg	.Ltmp1511 # Offset: 797
    0000031f: 	cmpq	$0xa, %r13
    00000323: 	jle	.Ltmp1511 # Offset: 803
    00000325: 	cmpq	$0x1, %r12
    00000329: 	jle	.Ltmp1511 # Offset: 809
    0000032b: 	movq	0x38(%rsp), %rax
    00000330: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000337: 	movq	%r14, %rdi
    0000033a: 	movq	0x8(%rax), %rdx
    0000033e: 	movq	(%rax), %rsi
    00000341: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 833
    00000346: 	movl	$0x11, %edx
    0000034b: 	leaq	DATAat0x49199(%rip), %rsi
    00000352: 	movq	%rax, %rdi
    00000355: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 853
    0000035a: 	jmp	.Ltmp1512 # Offset: 858
.Ltmp1511:
    0000035c: 	movq	0x38(%rsp), %rax
    00000361: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000368: 	movq	%r14, %rdi
    0000036b: 	movq	0x8(%rax), %rdx
    0000036f: 	movq	(%rax), %rsi
    00000372: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 882
    00000377: 	movl	$0xa, %edx
    0000037c: 	leaq	DATAat0x491ab(%rip), %rsi
    00000383: 	movq	%rax, %rdi
    00000386: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 902
.Ltmp1512:
    0000038b: 	movl	$0x4, %edx
    00000390: 	leaq	DATAat0x491b6(%rip), %rsi
    00000397: 	movq	%r14, %rdi
    0000039a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 922
    0000039f: 	movl	0x4(%rsp), %esi
    000003a3: 	movq	%r14, %rdi
    000003a6: 	callq	_ZNSolsEi@PLT # Offset: 934
    000003ab: 	movl	$0xb, %edx
    000003b0: 	leaq	DATAat0x491bb(%rip), %rsi
    000003b7: 	movq	%rax, %rdi
    000003ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 954
    000003bf: 	movl	$0xa, %edx
    000003c4: 	leaq	DATAat0x491c7(%rip), %rsi
    000003cb: 	movq	%r14, %rdi
    000003ce: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 974
    000003d3: 	movq	%r13, %rsi
    000003d6: 	movq	%r14, %rdi
    000003d9: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 985
    000003de: 	movl	$0x7, %edx
    000003e3: 	leaq	DATAat0x491d2(%rip), %rsi
    000003ea: 	movq	%rax, %r13
    000003ed: 	movq	%rax, %rdi
    000003f0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1008
    000003f5: 	movq	%r12, %rsi
    000003f8: 	movq	%r13, %rdi
    000003fb: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1019
    00000400: 	movl	$0x10, %edx
    00000405: 	leaq	DATAat0x491da(%rip), %rsi
    0000040c: 	movq	%rax, %r12
    0000040f: 	movq	%rax, %rdi
    00000412: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1042
    00000417: 	movq	%rbp, %rsi
    0000041a: 	movq	%r12, %rdi
    0000041d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1053
    00000422: 	movl	$0x8, %edx
    00000427: 	leaq	DATAat0x491eb(%rip), %rsi
    0000042e: 	movq	%rax, %rbp
    00000431: 	movq	%rax, %rdi
    00000434: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1076
    00000439: 	movq	%rbx, %xmm0
    0000043e: 	movq	%rbp, %rdi
    00000441: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1089
    00000446: 	movl	$0x2, %edx
    0000044b: 	leaq	DATAat0x491f4(%rip), %rsi
    00000452: 	movq	%rax, %rdi
    00000455: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1109
    0000045a: 	movl	0x44(%rsp), %eax
    0000045e: 	movl	%eax, iterations(%rip)
    00000464: 	movq	0x78(%rsp), %rax
    00000469: 	subq	%fs:0x28, %rax
    00000472: 	jne	.Ltmp1513 # Offset: 1138
    00000474: 	addq	$0x88, %rsp
    0000047b: 	popq	%rbx
    0000047c: 	popq	%rbp
    0000047d: 	popq	%r12
    0000047f: 	popq	%r13
    00000481: 	popq	%r14
    00000483: 	popq	%r15
    00000485: 	retq # Offset: 1157
.Ltmp1496:
    00000486: 	movl	$0x0, 0x4(%rsp)
    0000048e: 	xorl	%r12d, %r12d
    00000491: 	xorl	%r13d, %r13d
    00000494: 	jmp	.Ltmp1506 # Offset: 1172
.Ltmp1513:
    00000499: 	callq	__stack_chk_fail@PLT # Offset: 1177
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll18jacobi2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll17jacobi2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x2a1f0
  Size        : 0x654
  MaxSize     : 0x660
  Offset      : 0x2a1f0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll17jacobi2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	imull	%ebp, %ebx
    0000001d: 	subq	$0x98, %rsp
    00000024: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002c: 	movl	%edx, 0x44(%rsp)
    00000030: 	movl	%ebp, %edx
    00000032: 	movl	%ecx, 0x50(%rsp)
    00000036: 	leaq	0x60(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x1c(%rsp)
    00000040: 	movq	%r9, 0x48(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x88(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	movaps	%xmm0, 0x60(%rsp)
    0000005d: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000065: 	movaps	%xmm0, 0x70(%rsp)
    0000006a: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 106
    0000006f: 	movq	%rax, 0x58(%rsp)
    00000074: 	testl	%ebx, %ebx
    00000076: 	jle	.Ltmp1514 # Offset: 118
    00000078: 	movslq	%ebx, %rdx
    0000007b: 	movq	%r14, %rsi
    0000007e: 	movq	%r15, %rdi
    00000081: 	shlq	$0x3, %rdx
    00000085: 	callq	memmove@PLT # Offset: 133
.Ltmp1514:
    0000008a: 	movl	iterations(%rip), %eax
    00000090: 	movl	$0x2710, iterations(%rip)
    0000009a: 	movl	%eax, 0x54(%rsp)
    0000009e: 	callq	clock@PLT # Offset: 158
    000000a3: 	movq	%rax, start_time(%rip)
    000000aa: 	movl	iterations(%rip), %eax
    000000b0: 	movl	%eax, 0x3c(%rsp)
    000000b4: 	testl	%eax, %eax
    000000b6: 	jle	.Ltmp1515 # Offset: 182
    000000bc: 	movl	0x44(%rsp), %eax
    000000c0: 	movslq	%ebx, %rbx
    000000c3: 	movl	$0x0, 0x38(%rsp)
    000000cb: 	movq	%rbx, 0x8(%rsp)
    000000d0: 	movl	0x1c(%rsp), %ebx
    000000d4: 	subl	$0x1, %eax
    000000d7: 	movl	%eax, 0x18(%rsp)
    000000db: 	movl	0x50(%rsp), %eax
    000000df: 	addl	%ebx, %ebx
    000000e1: 	movl	%ebx, 0x40(%rsp)
    000000e5: 	leal	-0x4(%rax), %edi
    000000e8: 	movl	%eax, %ebx
    000000ea: 	leal	-0x6(%rax), %eax
    000000ed: 	shrl	$0x2, %eax
    000000f0: 	movl	%edi, 0x30(%rsp)
    000000f4: 	movl	%eax, %edx
    000000f6: 	leal	0x5(,%rax,4), %eax
    000000fd: 	movl	%eax, 0x34(%rsp)
    00000101: 	leaq	(,%rdx,4), %rdi
    00000109: 	leal	-0x1(%rbx), %eax
    0000010c: 	movq	%rdi, 0x28(%rsp)
    00000111: 	movl	%eax, 0x10(%rsp)
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp1528:
    00000118: 	cmpl	$0x1, 0x18(%rsp)
    0000011d: 	jle	.Ltmp1516 # Offset: 285
    00000123: 	leaq	0x20(%r14), %rax
    00000127: 	movl	0x40(%rsp), %r13d
    0000012c: 	movl	0x1c(%rsp), %ebp
    00000130: 	xorl	%r12d, %r12d
    00000133: 	movl	$0x1, 0x14(%rsp)
    0000013b: 	movq	%rax, 0x20(%rsp)
.Ltmp1520:
    00000140: 	addl	$0x1, 0x14(%rsp)
    00000145: 	cmpl	$0x1, 0x30(%rsp)
    0000014a: 	movl	$0x1, %eax
    0000014f: 	jle	.Ltmp1517 # Offset: 335
    00000155: 	movslq	%r12d, %rax
    00000158: 	movq	0x20(%rsp), %rbx
    0000015d: 	movslq	%r13d, %rdx
    00000160: 	leaq	(%r14,%rax,8), %r9
    00000164: 	movslq	%ebp, %rax
    00000167: 	leaq	(%r14,%rdx,8), %r8
    0000016b: 	leaq	(,%rax,8), %r11
    00000173: 	addq	0x28(%rsp), %rax
    00000178: 	leaq	(%r14,%r11), %rdi
    0000017c: 	leaq	(%rbx,%rax,8), %rbx
    00000180: 	addq	%r15, %r11
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1518:
    00000188: 	movq	0x10(%rdi), %rsi
    0000018c: 	movq	0x18(%rdi), %rcx
    00000190: 	movq	(%rdi), %rdx
    00000193: 	addq	0x8(%r9), %rdx
    00000197: 	movq	0x8(%rdi), %rax
    0000019b: 	addq	%rsi, %rdx
    0000019e: 	addq	0x10(%r9), %rax
    000001a2: 	addq	0x18(%r9), %rsi
    000001a6: 	addq	0x20(%rdi), %rsi
    000001aa: 	addq	%rcx, %rax
    000001ad: 	addq	0x18(%r8), %rsi
    000001b1: 	addq	0x20(%r9), %rcx
    000001b5: 	leaq	0x5(%rsi), %r10
    000001b9: 	addq	0x28(%rdi), %rcx
    000001bd: 	addq	$0x2, %rsi
    000001c1: 	cmovnsq	%rsi, %r10
    000001c5: 	addq	0x20(%r8), %rcx
    000001c9: 	leaq	0x5(%rcx), %rsi
    000001cd: 	sarq	$0x2, %r10
    000001d1: 	addq	$0x2, %rcx
    000001d5: 	cmovsq	%rsi, %rcx
    000001d9: 	addq	0x8(%r8), %rdx
    000001dd: 	movq	%r10, %xmm0
    000001e2: 	sarq	$0x2, %rcx
    000001e6: 	movq	%rcx, %xmm2
    000001eb: 	leaq	0x5(%rdx), %rcx
    000001ef: 	addq	$0x2, %rdx
    000001f3: 	cmovsq	%rcx, %rdx
    000001f7: 	addq	0x10(%r8), %rax
    000001fb: 	punpcklqdq	%xmm2, %xmm0
    000001ff: 	movups	%xmm0, 0x18(%r11)
    00000204: 	sarq	$0x2, %rdx
    00000208: 	movq	%rdx, %xmm1
    0000020d: 	leaq	0x5(%rax), %rdx
    00000211: 	addq	$0x2, %rax
    00000215: 	cmovsq	%rdx, %rax
    00000219: 	addq	$0x20, %rdi
    0000021d: 	addq	$0x20, %r9
    00000221: 	addq	$0x20, %r8
    00000225: 	addq	$0x20, %r11
    00000229: 	sarq	$0x2, %rax
    0000022d: 	movq	%rax, %xmm3
    00000232: 	punpcklqdq	%xmm3, %xmm1
    00000236: 	movups	%xmm1, -0x18(%r11)
    0000023b: 	cmpq	%rbx, %rdi
    0000023e: 	jne	.Ltmp1518 # Offset: 574
    00000244: 	movl	0x34(%rsp), %eax
.Ltmp1517:
    00000248: 	cmpl	0x10(%rsp), %eax
    0000024c: 	jge	.Ltmp1519 # Offset: 588
    00000252: 	leal	0x1(%rax), %ecx
    00000255: 	leal	(%rax,%r12), %edx
    00000259: 	leal	(%rbp,%rcx), %edi
    0000025d: 	leal	-0x1(%rax,%rbp), %esi
    00000261: 	movslq	%edx, %rdx
    00000264: 	movslq	%edi, %rdi
    00000267: 	movslq	%esi, %rsi
    0000026a: 	leaq	(%r14,%rdi,8), %r10
    0000026e: 	movq	(%r10), %r8
    00000271: 	addq	(%r14,%rsi,8), %r8
    00000275: 	movq	(%r14,%rdx,8), %rsi
    00000279: 	leal	(%rax,%rbp), %edx
    0000027c: 	movslq	%edx, %rdx
    0000027f: 	addq	%r8, %rsi
    00000282: 	leal	(%rax,%r13), %r8d
    00000286: 	movslq	%r8d, %r8
    00000289: 	addq	(%r14,%r8,8), %rsi
    0000028d: 	leaq	0x5(%rsi), %r8
    00000291: 	addq	$0x2, %rsi
    00000295: 	cmovnsq	%rsi, %r8
    00000299: 	sarq	$0x2, %r8
    0000029d: 	movq	%r8, (%r15,%rdx,8)
    000002a1: 	cmpl	0x10(%rsp), %ecx
    000002a5: 	jge	.Ltmp1519 # Offset: 677
    000002ab: 	leal	0x2(%rax), %esi
    000002ae: 	leal	(%r12,%rcx), %r9d
    000002b2: 	addl	%r13d, %ecx
    000002b5: 	leal	(%rbp,%rsi), %r8d
    000002ba: 	movslq	%r9d, %r9
    000002bd: 	movslq	%ecx, %rcx
    000002c0: 	movslq	%r8d, %r8
    000002c3: 	leaq	(%r14,%r8,8), %r11
    000002c7: 	movq	(%r11), %rbx
    000002ca: 	addq	(%r14,%rdx,8), %rbx
    000002ce: 	movq	(%r14,%r9,8), %rdx
    000002d2: 	addq	%rbx, %rdx
    000002d5: 	addq	(%r14,%rcx,8), %rdx
    000002d9: 	movl	0x10(%rsp), %ebx
    000002dd: 	leaq	0x5(%rdx), %rcx
    000002e1: 	addq	$0x2, %rdx
    000002e5: 	cmovnsq	%rdx, %rcx
    000002e9: 	sarq	$0x2, %rcx
    000002ed: 	movq	%rcx, (%r15,%rdi,8)
    000002f1: 	cmpl	%esi, %ebx
    000002f3: 	jle	.Ltmp1519 # Offset: 755
    000002f5: 	leal	0x3(%rax), %edx
    000002f8: 	leal	(%r12,%rsi), %edi
    000002fc: 	addl	%r13d, %esi
    000002ff: 	movq	(%r10), %r9
    00000302: 	leal	(%rbp,%rdx), %ecx
    00000306: 	movslq	%esi, %rsi
    00000309: 	movslq	%edi, %rdi
    0000030c: 	movslq	%ecx, %rcx
    0000030f: 	addq	(%r14,%rcx,8), %r9
    00000313: 	addq	(%r14,%rdi,8), %r9
    00000317: 	addq	(%r14,%rsi,8), %r9
    0000031b: 	leaq	0x5(%r9), %rsi
    0000031f: 	addq	$0x2, %r9
    00000323: 	cmovnsq	%r9, %rsi
    00000327: 	sarq	$0x2, %rsi
    0000032b: 	movq	%rsi, (%r15,%r8,8)
    0000032f: 	cmpl	%edx, %ebx
    00000331: 	jle	.Ltmp1519 # Offset: 817
    00000333: 	leal	(%r12,%rdx), %esi
    00000337: 	leal	0x4(%rax,%rbp), %eax
    0000033b: 	addl	%r13d, %edx
    0000033e: 	movq	(%r11), %rdi
    00000341: 	cltq
    00000343: 	movslq	%esi, %rsi
    00000346: 	movslq	%edx, %rdx
    00000349: 	addq	(%r14,%rax,8), %rdi
    0000034d: 	addq	(%r14,%rsi,8), %rdi
    00000351: 	addq	(%r14,%rdx,8), %rdi
    00000355: 	leaq	0x5(%rdi), %rax
    00000359: 	addq	$0x2, %rdi
    0000035d: 	cmovnsq	%rdi, %rax
    00000361: 	sarq	$0x2, %rax
    00000365: 	movq	%rax, (%r15,%rcx,8)
.Ltmp1519:
    00000369: 	movl	0x1c(%rsp), %eax
    0000036d: 	movl	0x14(%rsp), %ebx
    00000371: 	addl	%eax, %r12d
    00000374: 	addl	%eax, %ebp
    00000376: 	addl	%eax, %r13d
    00000379: 	cmpl	%ebx, 0x18(%rsp)
    0000037d: 	jne	.Ltmp1520 # Offset: 893
.Ltmp1516:
    00000383: 	cmpq	$0x0, 0x8(%rsp)
    00000389: 	je	.Ltmp1521 # Offset: 905
    0000038f: 	xorl	%r12d, %r12d
    00000392: 	xorl	%eax, %eax
    00000394: 	nopl	(%rax) # Size: 4
.Ltmp1523:
    00000398: 	movq	(%r14,%rax,8), %rcx
    0000039c: 	movq	(%r15,%rax,8), %rdx
    000003a0: 	movq	%rcx, %rsi
    000003a3: 	subq	%rdx, %rsi
    000003a6: 	js	.Ltmp1522 # Offset: 934
    000003a8: 	addq	%rsi, %r12
    000003ab: 	addq	$0x1, %rax
    000003af: 	cmpq	%rax, 0x8(%rsp)
    000003b4: 	jne	.Ltmp1523 # Offset: 948
.Ltmp1529:
    000003b6: 	xorl	%ebp, %ebp
    000003b8: 	xorl	%eax, %eax
    000003ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1525:
    000003c0: 	movq	(%r14,%rax,8), %rcx
    000003c4: 	movq	(%r15,%rax,8), %rdx
    000003c8: 	movq	%rcx, %rsi
    000003cb: 	subq	%rdx, %rsi
    000003ce: 	js	.Ltmp1524 # Offset: 974
    000003d0: 	cmpq	%rsi, %rbp
    000003d3: 	cmovlq	%rsi, %rbp
    000003d7: 	addq	$0x1, %rax
    000003db: 	cmpq	%rax, 0x8(%rsp)
    000003e0: 	jne	.Ltmp1525 # Offset: 992
.Ltmp1530:
    000003e2: 	movl	0x38(%rsp), %eax
    000003e6: 	cmpl	%eax, 0xd0(%rsp)
    000003ed: 	jge	.Ltmp1526 # Offset: 1005
    000003ef: 	testq	%rbp, %rbp
    000003f2: 	jle	.Ltmp1527 # Offset: 1010
    000003f8: 	cmpq	$0x9, %r12
    000003fc: 	jle	.Ltmp1527 # Offset: 1020
.Ltmp1526:
    000003fe: 	addl	$0x1, 0x38(%rsp)
    00000403: 	movq	%r15, %rax
    00000406: 	movl	0x38(%rsp), %ebx
    0000040a: 	movq	%r14, %r15
    0000040d: 	cmpl	0x3c(%rsp), %ebx
    00000411: 	je	.Ltmp1527 # Offset: 1041
    00000413: 	movq	%rax, %r14
    00000416: 	jmp	.Ltmp1528 # Offset: 1046
    0000041b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1522:
    00000420: 	subq	%rcx, %rdx
    00000423: 	addq	$0x1, %rax
    00000427: 	addq	%rdx, %r12
    0000042a: 	cmpq	%rax, 0x8(%rsp)
    0000042f: 	jne	.Ltmp1523 # Offset: 1071
    00000435: 	jmp	.Ltmp1529 # Offset: 1077
    0000043a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1524:
    00000440: 	subq	%rcx, %rdx
    00000443: 	cmpq	%rdx, %rbp
    00000446: 	cmovlq	%rdx, %rbp
    0000044a: 	addq	$0x1, %rax
    0000044e: 	cmpq	%rax, 0x8(%rsp)
    00000453: 	jne	.Ltmp1525 # Offset: 1107
    00000459: 	jmp	.Ltmp1530 # Offset: 1113
.Ltmp1521:
    0000045b: 	movl	0x38(%rsp), %eax
    0000045f: 	cmpl	%eax, 0xd0(%rsp)
    00000466: 	jl	.Ltmp1531 # Offset: 1126
    00000468: 	xorl	%r12d, %r12d
    0000046b: 	xorl	%ebp, %ebp
    0000046d: 	jmp	.Ltmp1526 # Offset: 1133
.Ltmp1531:
    0000046f: 	xorl	%ebp, %ebp
    00000471: 	xorl	%r12d, %r12d
.Ltmp1527:
    00000474: 	callq	clock@PLT # Offset: 1140
    00000479: 	movl	0x44(%rsp), %edi
    0000047d: 	pxor	%xmm0, %xmm0
    00000481: 	movq	0x58(%rsp), %r13
    00000486: 	movq	%rax, end_time(%rip)
    0000048d: 	subq	start_time(%rip), %rax
    00000494: 	cvtsi2sd	%rax, %xmm0
    00000499: 	movl	%edi, %eax
    0000049b: 	divsd	DATAat0x49520(%rip), %xmm0
    000004a3: 	movq	%xmm0, %rbx
    000004a8: 	shrl	$0x1f, %eax
    000004ab: 	addl	%edi, %eax
    000004ad: 	movl	0x50(%rsp), %edi
    000004b1: 	sarl	%eax
    000004b3: 	movl	%edi, %edx
    000004b5: 	imull	%edi, %eax
    000004b8: 	shrl	$0x1f, %edx
    000004bb: 	addl	%edi, %edx
    000004bd: 	sarl	%edx
    000004bf: 	addl	%edx, %eax
    000004c1: 	cltq
    000004c3: 	subq	(%r15,%rax,8), %r13
    000004c7: 	movl	0x38(%rsp), %eax
    000004cb: 	cmpl	%eax, iterations(%rip)
    000004d1: 	jg	.Ltmp1532 # Offset: 1233
    000004d3: 	cmpq	$0xa, %r12
    000004d7: 	jle	.Ltmp1532 # Offset: 1239
    000004d9: 	cmpq	$0x1, %rbp
    000004dd: 	jle	.Ltmp1532 # Offset: 1245
    000004df: 	movq	0x48(%rsp), %rax
    000004e4: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000004eb: 	movq	%r14, %rdi
    000004ee: 	movq	0x8(%rax), %rdx
    000004f2: 	movq	(%rax), %rsi
    000004f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1269
    000004fa: 	movl	$0x11, %edx
    000004ff: 	leaq	DATAat0x49199(%rip), %rsi
    00000506: 	movq	%rax, %rdi
    00000509: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1289
    0000050e: 	jmp	.Ltmp1533 # Offset: 1294
.Ltmp1532:
    00000510: 	movq	0x48(%rsp), %rax
    00000515: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000051c: 	movq	%r14, %rdi
    0000051f: 	movq	0x8(%rax), %rdx
    00000523: 	movq	(%rax), %rsi
    00000526: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1318
    0000052b: 	movl	$0xa, %edx
    00000530: 	leaq	DATAat0x491ab(%rip), %rsi
    00000537: 	movq	%rax, %rdi
    0000053a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1338
.Ltmp1533:
    0000053f: 	movl	$0x4, %edx
    00000544: 	leaq	DATAat0x491b6(%rip), %rsi
    0000054b: 	movq	%r14, %rdi
    0000054e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1358
    00000553: 	movl	0x38(%rsp), %esi
    00000557: 	movq	%r14, %rdi
    0000055a: 	callq	_ZNSolsEi@PLT # Offset: 1370
    0000055f: 	movl	$0xb, %edx
    00000564: 	leaq	DATAat0x491bb(%rip), %rsi
    0000056b: 	movq	%rax, %rdi
    0000056e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1390
    00000573: 	movl	$0xa, %edx
    00000578: 	leaq	DATAat0x491c7(%rip), %rsi
    0000057f: 	movq	%r14, %rdi
    00000582: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1410
    00000587: 	movq	%r12, %rsi
    0000058a: 	movq	%r14, %rdi
    0000058d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1421
    00000592: 	movl	$0x7, %edx
    00000597: 	leaq	DATAat0x491d2(%rip), %rsi
    0000059e: 	movq	%rax, %r12
    000005a1: 	movq	%rax, %rdi
    000005a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1444
    000005a9: 	movq	%rbp, %rsi
    000005ac: 	movq	%r12, %rdi
    000005af: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1455
    000005b4: 	movl	$0x10, %edx
    000005b9: 	leaq	DATAat0x491da(%rip), %rsi
    000005c0: 	movq	%rax, %rbp
    000005c3: 	movq	%rax, %rdi
    000005c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1478
    000005cb: 	movq	%rbp, %rdi
    000005ce: 	movq	%r13, %rsi
    000005d1: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1489
    000005d6: 	movl	$0x8, %edx
    000005db: 	leaq	DATAat0x491eb(%rip), %rsi
    000005e2: 	movq	%rax, %rbp
    000005e5: 	movq	%rax, %rdi
    000005e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1512
    000005ed: 	movq	%rbx, %xmm0
    000005f2: 	movq	%rbp, %rdi
    000005f5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1525
    000005fa: 	movl	$0x2, %edx
    000005ff: 	leaq	DATAat0x491f4(%rip), %rsi
    00000606: 	movq	%rax, %rdi
    00000609: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1545
    0000060e: 	movl	0x54(%rsp), %eax
    00000612: 	movl	%eax, iterations(%rip)
    00000618: 	movq	0x88(%rsp), %rax
    00000620: 	subq	%fs:0x28, %rax
    00000629: 	jne	.Ltmp1534 # Offset: 1577
    0000062b: 	addq	$0x98, %rsp
    00000632: 	popq	%rbx
    00000633: 	popq	%rbp
    00000634: 	popq	%r12
    00000636: 	popq	%r13
    00000638: 	popq	%r14
    0000063a: 	popq	%r15
    0000063c: 	retq # Offset: 1596
.Ltmp1515:
    0000063d: 	movl	$0x0, 0x38(%rsp)
    00000645: 	xorl	%ebp, %ebp
    00000647: 	xorl	%r12d, %r12d
    0000064a: 	jmp	.Ltmp1527 # Offset: 1610
.Ltmp1534:
    0000064f: 	callq	__stack_chk_fail@PLT # Offset: 1615
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll17jacobi2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll18jacobi2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x2a850
  Size        : 0x644
  MaxSize     : 0x650
  Offset      : 0x2a850
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll18jacobi2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%r8d, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%ecx, %r13d
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%edx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movl	%ebp, %esi
    0000001b: 	movq	%rdi, %rbx
    0000001e: 	subq	$0x98, %rsp
    00000025: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002d: 	movl	%edx, 0x44(%rsp)
    00000031: 	movl	%r13d, %edx
    00000034: 	movl	%ecx, 0x50(%rsp)
    00000038: 	leaq	0x60(%rsp), %rcx
    0000003d: 	movq	%r9, 0x48(%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0x88(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x60(%rsp)
    0000005a: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000062: 	movaps	%xmm0, 0x70(%rsp)
    00000067: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 103
    0000006c: 	movl	%ebp, %edi
    0000006e: 	imull	%r13d, %edi
    00000072: 	movq	%rax, 0x58(%rsp)
    00000077: 	movl	%edi, %ebp
    00000079: 	testl	%edi, %edi
    0000007b: 	jle	.Ltmp1535 # Offset: 123
    0000007d: 	movslq	%edi, %rdx
    00000080: 	movq	%rbx, %rsi
    00000083: 	movq	%r15, %rdi
    00000086: 	shlq	$0x3, %rdx
    0000008a: 	callq	memmove@PLT # Offset: 138
.Ltmp1535:
    0000008f: 	movl	iterations(%rip), %eax
    00000095: 	movl	$0x2710, iterations(%rip)
    0000009f: 	movl	%eax, 0x54(%rsp)
    000000a3: 	callq	clock@PLT # Offset: 163
    000000a8: 	movq	%rax, start_time(%rip)
    000000af: 	movl	iterations(%rip), %eax
    000000b5: 	movl	%eax, 0x3c(%rsp)
    000000b9: 	testl	%eax, %eax
    000000bb: 	jle	.Ltmp1536 # Offset: 187
    000000c1: 	movl	0x44(%rsp), %eax
    000000c5: 	movl	0x50(%rsp), %edi
    000000c9: 	movl	$0x0, 0x38(%rsp)
    000000d1: 	subl	$0x1, %eax
    000000d4: 	movl	%eax, 0x1c(%rsp)
    000000d8: 	leal	-0x4(%rdi), %eax
    000000db: 	movl	%eax, 0x30(%rsp)
    000000df: 	movslq	%ebp, %rax
    000000e2: 	movq	%rax, 0x10(%rsp)
    000000e7: 	leal	(%r14,%r14), %eax
    000000eb: 	movl	%eax, 0x40(%rsp)
    000000ef: 	leal	-0x6(%rdi), %eax
    000000f2: 	shrl	$0x2, %eax
    000000f5: 	movl	%eax, %edx
    000000f7: 	leal	0x5(,%rax,4), %eax
    000000fe: 	movl	%eax, 0x34(%rsp)
    00000102: 	shlq	$0x2, %rdx
    00000106: 	leal	-0x1(%rdi), %eax
    00000109: 	movq	%rdx, 0x28(%rsp)
    0000010e: 	movl	%eax, 0xc(%rsp)
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1549:
    00000118: 	cmpl	$0x1, 0x1c(%rsp)
    0000011d: 	jle	.Ltmp1537 # Offset: 285
    00000123: 	leaq	0x20(%rbx), %rax
    00000127: 	movl	0x40(%rsp), %r13d
    0000012c: 	movl	%r14d, %ebp
    0000012f: 	xorl	%r12d, %r12d
    00000132: 	movl	$0x1, 0x18(%rsp)
    0000013a: 	movq	%rax, 0x20(%rsp)
    0000013f: 	nop # Size: 1
.Ltmp1541:
    00000140: 	addl	$0x1, 0x18(%rsp)
    00000145: 	cmpl	$0x1, 0x30(%rsp)
    0000014a: 	movl	$0x1, %eax
    0000014f: 	jle	.Ltmp1538 # Offset: 335
    00000155: 	movslq	%r12d, %rax
    00000158: 	movslq	%r13d, %rdx
    0000015b: 	leaq	(%rbx,%rax,8), %rdi
    0000015f: 	leaq	(%rbx,%rdx,8), %rsi
    00000163: 	movslq	%ebp, %rax
    00000166: 	movq	0x20(%rsp), %rdx
    0000016b: 	leaq	(,%rax,8), %r9
    00000173: 	addq	0x28(%rsp), %rax
    00000178: 	leaq	(%rbx,%r9), %rcx
    0000017c: 	leaq	(%rdx,%rax,8), %r11
    00000180: 	addq	%r15, %r9
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1539:
    00000188: 	movq	0x18(%rcx), %rax
    0000018c: 	movq	0x8(%rcx), %r8
    00000190: 	addq	0x10(%rdi), %r8
    00000194: 	movq	0x10(%rcx), %rdx
    00000198: 	addq	%rax, %r8
    0000019b: 	addq	0x10(%rsi), %r8
    0000019f: 	leaq	0x5(%r8), %r10
    000001a3: 	addq	$0x2, %r8
    000001a7: 	cmovnsq	%r8, %r10
    000001ab: 	movq	0x18(%rdi), %r8
    000001af: 	sarq	$0x2, %r10
    000001b3: 	addq	%rdx, %r8
    000001b6: 	addq	0x20(%rcx), %r8
    000001ba: 	addq	0x18(%rsi), %r8
    000001be: 	movq	%r10, %xmm0
    000001c3: 	leaq	0x5(%r8), %r10
    000001c7: 	addq	$0x2, %r8
    000001cb: 	cmovsq	%r10, %r8
    000001cf: 	addq	0x20(%rdi), %rax
    000001d3: 	addq	0x28(%rcx), %rax
    000001d7: 	addq	0x20(%rsi), %rax
    000001db: 	sarq	$0x2, %r8
    000001df: 	movq	%r8, %xmm1
    000001e4: 	leaq	0x5(%rax), %r8
    000001e8: 	addq	$0x2, %rax
    000001ec: 	cmovnsq	%rax, %r8
    000001f0: 	movq	(%rcx), %rax
    000001f3: 	addq	0x8(%rdi), %rax
    000001f7: 	punpcklqdq	%xmm1, %xmm0
    000001fb: 	addq	%rdx, %rax
    000001fe: 	addq	0x8(%rsi), %rax
    00000202: 	movups	%xmm0, 0x10(%r9)
    00000207: 	sarq	$0x2, %r8
    0000020b: 	leaq	0x5(%rax), %rdx
    0000020f: 	addq	$0x2, %rax
    00000213: 	cmovsq	%rdx, %rax
    00000217: 	addq	$0x20, %rcx
    0000021b: 	movq	%r8, 0x20(%r9)
    0000021f: 	addq	$0x20, %rdi
    00000223: 	addq	$0x20, %rsi
    00000227: 	addq	$0x20, %r9
    0000022b: 	sarq	$0x2, %rax
    0000022f: 	movq	%rax, -0x18(%r9)
    00000233: 	cmpq	%r11, %rcx
    00000236: 	jne	.Ltmp1539 # Offset: 566
    0000023c: 	movl	0x34(%rsp), %eax
.Ltmp1538:
    00000240: 	cmpl	0xc(%rsp), %eax
    00000244: 	jge	.Ltmp1540 # Offset: 580
    0000024a: 	leal	0x1(%rax), %ecx
    0000024d: 	leal	(%rax,%r12), %edx
    00000251: 	leal	(%rbp,%rcx), %edi
    00000255: 	leal	-0x1(%rax,%rbp), %esi
    00000259: 	movslq	%edx, %rdx
    0000025c: 	movslq	%edi, %rdi
    0000025f: 	movslq	%esi, %rsi
    00000262: 	leaq	(%rbx,%rdi,8), %r10
    00000266: 	movq	(%r10), %r8
    00000269: 	addq	(%rbx,%rsi,8), %r8
    0000026d: 	movq	(%rbx,%rdx,8), %rsi
    00000271: 	leal	(%rax,%rbp), %edx
    00000274: 	movslq	%edx, %rdx
    00000277: 	addq	%r8, %rsi
    0000027a: 	leal	(%rax,%r13), %r8d
    0000027e: 	movslq	%r8d, %r8
    00000281: 	addq	(%rbx,%r8,8), %rsi
    00000285: 	leaq	0x5(%rsi), %r8
    00000289: 	addq	$0x2, %rsi
    0000028d: 	cmovnsq	%rsi, %r8
    00000291: 	sarq	$0x2, %r8
    00000295: 	movq	%r8, (%r15,%rdx,8)
    00000299: 	cmpl	0xc(%rsp), %ecx
    0000029d: 	jge	.Ltmp1540 # Offset: 669
    000002a3: 	leal	0x2(%rax), %esi
    000002a6: 	leal	(%r12,%rcx), %r9d
    000002aa: 	addl	%r13d, %ecx
    000002ad: 	movq	(%rbx,%rdx,8), %rdx
    000002b1: 	leal	(%rbp,%rsi), %r8d
    000002b6: 	movslq	%ecx, %rcx
    000002b9: 	movslq	%r9d, %r9
    000002bc: 	movslq	%r8d, %r8
    000002bf: 	leaq	(%rbx,%r8,8), %r11
    000002c3: 	addq	(%r11), %rdx
    000002c6: 	addq	(%rbx,%r9,8), %rdx
    000002ca: 	addq	(%rbx,%rcx,8), %rdx
    000002ce: 	leaq	0x5(%rdx), %rcx
    000002d2: 	addq	$0x2, %rdx
    000002d6: 	cmovnsq	%rdx, %rcx
    000002da: 	sarq	$0x2, %rcx
    000002de: 	movq	%rcx, (%r15,%rdi,8)
    000002e2: 	cmpl	%esi, 0xc(%rsp)
    000002e6: 	jle	.Ltmp1540 # Offset: 742
    000002e8: 	leal	0x3(%rax), %edx
    000002eb: 	leal	(%r12,%rsi), %edi
    000002ef: 	addl	%r13d, %esi
    000002f2: 	movq	(%r10), %r9
    000002f5: 	leal	(%rbp,%rdx), %ecx
    000002f9: 	movslq	%esi, %rsi
    000002fc: 	movslq	%edi, %rdi
    000002ff: 	movslq	%ecx, %rcx
    00000302: 	addq	(%rbx,%rcx,8), %r9
    00000306: 	addq	(%rbx,%rdi,8), %r9
    0000030a: 	addq	(%rbx,%rsi,8), %r9
    0000030e: 	leaq	0x5(%r9), %rsi
    00000312: 	addq	$0x2, %r9
    00000316: 	cmovnsq	%r9, %rsi
    0000031a: 	sarq	$0x2, %rsi
    0000031e: 	movq	%rsi, (%r15,%r8,8)
    00000322: 	cmpl	%edx, 0xc(%rsp)
    00000326: 	jle	.Ltmp1540 # Offset: 806
    00000328: 	leal	(%r12,%rdx), %esi
    0000032c: 	leal	0x4(%rax,%rbp), %eax
    00000330: 	addl	%r13d, %edx
    00000333: 	movq	(%r11), %rdi
    00000336: 	cltq
    00000338: 	movslq	%esi, %rsi
    0000033b: 	movslq	%edx, %rdx
    0000033e: 	addq	(%rbx,%rax,8), %rdi
    00000342: 	addq	(%rbx,%rsi,8), %rdi
    00000346: 	addq	(%rbx,%rdx,8), %rdi
    0000034a: 	leaq	0x5(%rdi), %rax
    0000034e: 	addq	$0x2, %rdi
    00000352: 	cmovnsq	%rdi, %rax
    00000356: 	sarq	$0x2, %rax
    0000035a: 	movq	%rax, (%r15,%rcx,8)
.Ltmp1540:
    0000035e: 	movl	0x18(%rsp), %edi
    00000362: 	addl	%r14d, %r12d
    00000365: 	addl	%r14d, %ebp
    00000368: 	addl	%r14d, %r13d
    0000036b: 	cmpl	%edi, 0x1c(%rsp)
    0000036f: 	jne	.Ltmp1541 # Offset: 879
.Ltmp1537:
    00000375: 	cmpq	$0x0, 0x10(%rsp)
    0000037b: 	je	.Ltmp1542 # Offset: 891
    00000381: 	xorl	%r12d, %r12d
    00000384: 	xorl	%eax, %eax
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1544:
    00000390: 	movq	(%rbx,%rax,8), %rcx
    00000394: 	movq	(%r15,%rax,8), %rdx
    00000398: 	movq	%rcx, %rsi
    0000039b: 	subq	%rdx, %rsi
    0000039e: 	js	.Ltmp1543 # Offset: 926
    000003a0: 	addq	%rsi, %r12
    000003a3: 	addq	$0x1, %rax
    000003a7: 	cmpq	%rax, 0x10(%rsp)
    000003ac: 	jne	.Ltmp1544 # Offset: 940
.Ltmp1550:
    000003ae: 	xorl	%ebp, %ebp
    000003b0: 	xorl	%eax, %eax
    000003b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1546:
    000003b8: 	movq	(%rbx,%rax,8), %rcx
    000003bc: 	movq	(%r15,%rax,8), %rdx
    000003c0: 	movq	%rcx, %rsi
    000003c3: 	subq	%rdx, %rsi
    000003c6: 	js	.Ltmp1545 # Offset: 966
    000003c8: 	cmpq	%rsi, %rbp
    000003cb: 	cmovlq	%rsi, %rbp
    000003cf: 	addq	$0x1, %rax
    000003d3: 	cmpq	%rax, 0x10(%rsp)
    000003d8: 	jne	.Ltmp1546 # Offset: 984
.Ltmp1551:
    000003da: 	movl	0x38(%rsp), %eax
    000003de: 	cmpl	%eax, 0xd0(%rsp)
    000003e5: 	jge	.Ltmp1547 # Offset: 997
    000003e7: 	testq	%rbp, %rbp
    000003ea: 	jle	.Ltmp1548 # Offset: 1002
    000003ec: 	cmpq	$0x9, %r12
    000003f0: 	jle	.Ltmp1548 # Offset: 1008
.Ltmp1547:
    000003f2: 	addl	$0x1, 0x38(%rsp)
    000003f7: 	movq	%r15, %rax
    000003fa: 	movl	0x38(%rsp), %edi
    000003fe: 	movq	%rbx, %r15
    00000401: 	cmpl	0x3c(%rsp), %edi
    00000405: 	je	.Ltmp1548 # Offset: 1029
    00000407: 	movq	%rax, %rbx
    0000040a: 	jmp	.Ltmp1549 # Offset: 1034
    0000040f: 	nop # Size: 1
.Ltmp1543:
    00000410: 	subq	%rcx, %rdx
    00000413: 	addq	$0x1, %rax
    00000417: 	addq	%rdx, %r12
    0000041a: 	cmpq	%rax, 0x10(%rsp)
    0000041f: 	jne	.Ltmp1544 # Offset: 1055
    00000425: 	jmp	.Ltmp1550 # Offset: 1061
    00000427: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1545:
    00000430: 	subq	%rcx, %rdx
    00000433: 	cmpq	%rdx, %rbp
    00000436: 	cmovlq	%rdx, %rbp
    0000043a: 	addq	$0x1, %rax
    0000043e: 	cmpq	%rax, 0x10(%rsp)
    00000443: 	jne	.Ltmp1546 # Offset: 1091
    00000449: 	jmp	.Ltmp1551 # Offset: 1097
.Ltmp1542:
    0000044b: 	movl	0x38(%rsp), %eax
    0000044f: 	cmpl	%eax, 0xd0(%rsp)
    00000456: 	jl	.Ltmp1552 # Offset: 1110
    00000458: 	xorl	%r12d, %r12d
    0000045b: 	xorl	%ebp, %ebp
    0000045d: 	jmp	.Ltmp1547 # Offset: 1117
.Ltmp1552:
    0000045f: 	xorl	%ebp, %ebp
    00000461: 	xorl	%r12d, %r12d
.Ltmp1548:
    00000464: 	callq	clock@PLT # Offset: 1124
    00000469: 	movl	0x44(%rsp), %edi
    0000046d: 	pxor	%xmm0, %xmm0
    00000471: 	movq	0x58(%rsp), %r13
    00000476: 	movq	%rax, end_time(%rip)
    0000047d: 	subq	start_time(%rip), %rax
    00000484: 	cvtsi2sd	%rax, %xmm0
    00000489: 	movl	%edi, %eax
    0000048b: 	divsd	DATAat0x49520(%rip), %xmm0
    00000493: 	movq	%xmm0, %rbx
    00000498: 	shrl	$0x1f, %eax
    0000049b: 	addl	%edi, %eax
    0000049d: 	movl	0x50(%rsp), %edi
    000004a1: 	sarl	%eax
    000004a3: 	movl	%edi, %edx
    000004a5: 	imull	%edi, %eax
    000004a8: 	shrl	$0x1f, %edx
    000004ab: 	addl	%edi, %edx
    000004ad: 	sarl	%edx
    000004af: 	addl	%edx, %eax
    000004b1: 	cltq
    000004b3: 	subq	(%r15,%rax,8), %r13
    000004b7: 	movl	0x38(%rsp), %eax
    000004bb: 	cmpl	%eax, iterations(%rip)
    000004c1: 	jg	.Ltmp1553 # Offset: 1217
    000004c3: 	cmpq	$0xa, %r12
    000004c7: 	jle	.Ltmp1553 # Offset: 1223
    000004c9: 	cmpq	$0x1, %rbp
    000004cd: 	jle	.Ltmp1553 # Offset: 1229
    000004cf: 	movq	0x48(%rsp), %rax
    000004d4: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000004db: 	movq	%r14, %rdi
    000004de: 	movq	0x8(%rax), %rdx
    000004e2: 	movq	(%rax), %rsi
    000004e5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1253
    000004ea: 	movl	$0x11, %edx
    000004ef: 	leaq	DATAat0x49199(%rip), %rsi
    000004f6: 	movq	%rax, %rdi
    000004f9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1273
    000004fe: 	jmp	.Ltmp1554 # Offset: 1278
.Ltmp1553:
    00000500: 	movq	0x48(%rsp), %rax
    00000505: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000050c: 	movq	%r14, %rdi
    0000050f: 	movq	0x8(%rax), %rdx
    00000513: 	movq	(%rax), %rsi
    00000516: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1302
    0000051b: 	movl	$0xa, %edx
    00000520: 	leaq	DATAat0x491ab(%rip), %rsi
    00000527: 	movq	%rax, %rdi
    0000052a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1322
.Ltmp1554:
    0000052f: 	movl	$0x4, %edx
    00000534: 	leaq	DATAat0x491b6(%rip), %rsi
    0000053b: 	movq	%r14, %rdi
    0000053e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1342
    00000543: 	movl	0x38(%rsp), %esi
    00000547: 	movq	%r14, %rdi
    0000054a: 	callq	_ZNSolsEi@PLT # Offset: 1354
    0000054f: 	movl	$0xb, %edx
    00000554: 	leaq	DATAat0x491bb(%rip), %rsi
    0000055b: 	movq	%rax, %rdi
    0000055e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1374
    00000563: 	movl	$0xa, %edx
    00000568: 	leaq	DATAat0x491c7(%rip), %rsi
    0000056f: 	movq	%r14, %rdi
    00000572: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1394
    00000577: 	movq	%r12, %rsi
    0000057a: 	movq	%r14, %rdi
    0000057d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1405
    00000582: 	movl	$0x7, %edx
    00000587: 	leaq	DATAat0x491d2(%rip), %rsi
    0000058e: 	movq	%rax, %r12
    00000591: 	movq	%rax, %rdi
    00000594: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1428
    00000599: 	movq	%rbp, %rsi
    0000059c: 	movq	%r12, %rdi
    0000059f: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1439
    000005a4: 	movl	$0x10, %edx
    000005a9: 	leaq	DATAat0x491da(%rip), %rsi
    000005b0: 	movq	%rax, %rbp
    000005b3: 	movq	%rax, %rdi
    000005b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1462
    000005bb: 	movq	%rbp, %rdi
    000005be: 	movq	%r13, %rsi
    000005c1: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1473
    000005c6: 	movl	$0x8, %edx
    000005cb: 	leaq	DATAat0x491eb(%rip), %rsi
    000005d2: 	movq	%rax, %rbp
    000005d5: 	movq	%rax, %rdi
    000005d8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1496
    000005dd: 	movq	%rbx, %xmm0
    000005e2: 	movq	%rbp, %rdi
    000005e5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1509
    000005ea: 	movl	$0x2, %edx
    000005ef: 	leaq	DATAat0x491f4(%rip), %rsi
    000005f6: 	movq	%rax, %rdi
    000005f9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1529
    000005fe: 	movl	0x54(%rsp), %eax
    00000602: 	movl	%eax, iterations(%rip)
    00000608: 	movq	0x88(%rsp), %rax
    00000610: 	subq	%fs:0x28, %rax
    00000619: 	jne	.Ltmp1555 # Offset: 1561
    0000061b: 	addq	$0x98, %rsp
    00000622: 	popq	%rbx
    00000623: 	popq	%rbp
    00000624: 	popq	%r12
    00000626: 	popq	%r13
    00000628: 	popq	%r14
    0000062a: 	popq	%r15
    0000062c: 	retq # Offset: 1580
.Ltmp1536:
    0000062d: 	movl	$0x0, 0x38(%rsp)
    00000635: 	xorl	%ebp, %ebp
    00000637: 	xorl	%r12d, %r12d
    0000063a: 	jmp	.Ltmp1548 # Offset: 1594
.Ltmp1555:
    0000063f: 	callq	__stack_chk_fail@PLT # Offset: 1599
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll18jacobi2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll18jacobi2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x2aea0
  Size        : 0x3c5
  MaxSize     : 0x3d0
  Offset      : 0x2aea0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll18jacobi2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	movl	%r15d, %esi
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdi, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	movl	%ecx, %ebx
    0000001c: 	imull	%ebx, %r15d
    00000020: 	subq	$0x68, %rsp
    00000024: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002c: 	movl	%edx, 0x8(%rsp)
    00000030: 	leaq	0x30(%rsp), %rcx
    00000035: 	movl	%ebx, %edx
    00000037: 	movslq	%r15d, %r13
    0000003a: 	movl	%r8d, 0x24(%rsp)
    0000003f: 	movq	%r9, 0x28(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x58(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x30(%rsp)
    00000059: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000061: 	movaps	%xmm0, 0x40(%rsp)
    00000066: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 102
    0000006b: 	movq	%rax, 0x18(%rsp)
    00000070: 	testl	%r13d, %r13d
    00000073: 	jle	.Ltmp1556 # Offset: 115
    00000075: 	movslq	%r13d, %rdx
    00000078: 	movq	%r12, %rsi
    0000007b: 	movq	%r14, %rdi
    0000007e: 	shlq	$0x3, %rdx
    00000082: 	callq	memmove@PLT # Offset: 130
.Ltmp1556:
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	xorl	%r15d, %r15d
    00000090: 	movl	$0x2710, iterations(%rip)
    0000009a: 	movl	%eax, 0x20(%rsp)
    0000009e: 	callq	clock@PLT # Offset: 158
    000000a3: 	movq	%rax, start_time(%rip)
    000000aa: 	movl	iterations(%rip), %eax
    000000b0: 	movl	%eax, 0x10(%rsp)
    000000b4: 	testl	%eax, %eax
    000000b6: 	jle	.Ltmp1557 # Offset: 182
    000000bc: 	movq	%r14, %rax
    000000bf: 	movq	%r12, %rbp
    000000c2: 	movl	0x24(%rsp), %r12d
    000000c7: 	movl	%r15d, %r14d
    000000ca: 	movq	%rax, %r15
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1565:
    000000d0: 	movl	0x8(%rsp), %edx
    000000d4: 	movl	%r12d, %r8d
    000000d7: 	movl	%ebx, %ecx
    000000d9: 	movq	%r15, %rsi
    000000dc: 	movq	%rbp, %rdi
    000000df: 	callq	"_ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/1" # Offset: 223
    000000e4: 	testq	%r13, %r13
    000000e7: 	je	.Ltmp1558 # Offset: 231
    000000ed: 	xorl	%r8d, %r8d
    000000f0: 	xorl	%eax, %eax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1560:
    000000f8: 	movq	(%rbp,%rax,8), %rcx
    000000fd: 	movq	(%r15,%rax,8), %rdx
    00000101: 	movq	%rcx, %rsi
    00000104: 	subq	%rdx, %rsi
    00000107: 	js	.Ltmp1559 # Offset: 263
    0000010d: 	addq	$0x1, %rax
    00000111: 	addq	%rsi, %r8
    00000114: 	cmpq	%r13, %rax
    00000117: 	jne	.Ltmp1560 # Offset: 279
.Ltmp1567:
    00000119: 	xorl	%esi, %esi
    0000011b: 	xorl	%eax, %eax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1562:
    00000120: 	movq	(%rbp,%rax,8), %rcx
    00000125: 	movq	(%r15,%rax,8), %rdx
    00000129: 	movq	%rcx, %rdi
    0000012c: 	subq	%rdx, %rdi
    0000012f: 	js	.Ltmp1561 # Offset: 303
    00000131: 	cmpq	%rdi, %rsi
    00000134: 	cmovlq	%rdi, %rsi
    00000138: 	addq	$0x1, %rax
    0000013c: 	cmpq	%rax, %r13
    0000013f: 	jne	.Ltmp1562 # Offset: 319
.Ltmp1566:
    00000141: 	cmpl	%r14d, 0xa0(%rsp)
    00000149: 	jge	.Ltmp1563 # Offset: 329
    0000014b: 	testq	%rsi, %rsi
    0000014e: 	jle	.Ltmp1564 # Offset: 334
    00000154: 	cmpq	$0x9, %r8
    00000158: 	jle	.Ltmp1564 # Offset: 344
.Ltmp1563:
    0000015e: 	movq	%r15, %rax
    00000161: 	addl	$0x1, %r14d
    00000165: 	movq	%rbp, %r15
    00000168: 	cmpl	0x10(%rsp), %r14d
    0000016d: 	je	.Ltmp1564 # Offset: 365
    00000173: 	movq	%rax, %rbp
    00000176: 	jmp	.Ltmp1565 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1561:
    00000180: 	subq	%rcx, %rdx
    00000183: 	cmpq	%rdx, %rsi
    00000186: 	cmovlq	%rdx, %rsi
    0000018a: 	addq	$0x1, %rax
    0000018e: 	cmpq	%rax, %r13
    00000191: 	jne	.Ltmp1562 # Offset: 401
    00000193: 	jmp	.Ltmp1566 # Offset: 403
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp1559:
    00000198: 	subq	%rcx, %rdx
    0000019b: 	addq	$0x1, %rax
    0000019f: 	addq	%rdx, %r8
    000001a2: 	cmpq	%rax, %r13
    000001a5: 	jne	.Ltmp1560 # Offset: 421
    000001ab: 	jmp	.Ltmp1567 # Offset: 427
.Ltmp1558:
    000001b0: 	cmpl	%r14d, 0xa0(%rsp)
    000001b8: 	jl	.Ltmp1568 # Offset: 440
    000001ba: 	xorl	%r8d, %r8d
    000001bd: 	xorl	%esi, %esi
    000001bf: 	jmp	.Ltmp1563 # Offset: 447
.Ltmp1568:
    000001c1: 	movq	%r15, %rax
    000001c4: 	movl	%r14d, %r15d
    000001c7: 	movq	%rax, %r14
.Ltmp1557:
    000001ca: 	xorl	%ebp, %ebp
    000001cc: 	xorl	%r8d, %r8d
.Ltmp1572:
    000001cf: 	movq	%r8, 0x10(%rsp)
    000001d4: 	callq	clock@PLT # Offset: 468
    000001d9: 	movl	0x8(%rsp), %ecx
    000001dd: 	pxor	%xmm0, %xmm0
    000001e1: 	movl	%ebx, %edx
    000001e3: 	movq	%rax, end_time(%rip)
    000001ea: 	subq	start_time(%rip), %rax
    000001f1: 	shrl	$0x1f, %edx
    000001f4: 	cvtsi2sd	%rax, %xmm0
    000001f9: 	movl	%ecx, %eax
    000001fb: 	addl	%ebx, %edx
    000001fd: 	movq	0x18(%rsp), %r12
    00000202: 	shrl	$0x1f, %eax
    00000205: 	sarl	%edx
    00000207: 	movq	0x10(%rsp), %r8
    0000020c: 	divsd	DATAat0x49520(%rip), %xmm0
    00000214: 	addl	%ecx, %eax
    00000216: 	movq	%xmm0, %r13
    0000021b: 	sarl	%eax
    0000021d: 	imull	%ebx, %eax
    00000220: 	addl	%edx, %eax
    00000222: 	cltq
    00000224: 	subq	(%r14,%rax,8), %r12
    00000228: 	cmpl	%r15d, iterations(%rip)
    0000022f: 	jg	.Ltmp1569 # Offset: 559
    00000231: 	cmpq	$0xa, %r8
    00000235: 	jle	.Ltmp1569 # Offset: 565
    00000237: 	cmpq	$0x1, %rbp
    0000023b: 	jle	.Ltmp1569 # Offset: 571
    0000023d: 	movq	0x28(%rsp), %rax
    00000242: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000249: 	movq	%r8, 0x8(%rsp)
    0000024e: 	movq	%r14, %rdi
    00000251: 	movq	0x8(%rax), %rdx
    00000255: 	movq	(%rax), %rsi
    00000258: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 600
    0000025d: 	movl	$0x11, %edx
    00000262: 	leaq	DATAat0x49199(%rip), %rsi
    00000269: 	movq	%rax, %rdi
    0000026c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 620
    00000271: 	movq	0x8(%rsp), %r8
    00000276: 	jmp	.Ltmp1570 # Offset: 630
.Ltmp1569:
    00000278: 	movq	0x28(%rsp), %rax
    0000027d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000284: 	movq	%r8, 0x8(%rsp)
    00000289: 	movq	%r14, %rdi
    0000028c: 	movq	0x8(%rax), %rdx
    00000290: 	movq	(%rax), %rsi
    00000293: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 659
    00000298: 	movl	$0xa, %edx
    0000029d: 	leaq	DATAat0x491ab(%rip), %rsi
    000002a4: 	movq	%rax, %rdi
    000002a7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 679
    000002ac: 	movq	0x8(%rsp), %r8
.Ltmp1570:
    000002b1: 	movl	$0x4, %edx
    000002b6: 	movq	%r14, %rdi
    000002b9: 	movq	%r8, 0x8(%rsp)
    000002be: 	leaq	DATAat0x491b6(%rip), %rsi
    000002c5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 709
    000002ca: 	movq	%r14, %rdi
    000002cd: 	movl	%r15d, %esi
    000002d0: 	callq	_ZNSolsEi@PLT # Offset: 720
    000002d5: 	movl	$0xb, %edx
    000002da: 	leaq	DATAat0x491bb(%rip), %rsi
    000002e1: 	movq	%rax, %rdi
    000002e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 740
    000002e9: 	movl	$0xa, %edx
    000002ee: 	movq	%r14, %rdi
    000002f1: 	leaq	DATAat0x491c7(%rip), %rsi
    000002f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 760
    000002fd: 	movq	0x8(%rsp), %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 773
    0000030a: 	movl	$0x7, %edx
    0000030f: 	leaq	DATAat0x491d2(%rip), %rsi
    00000316: 	movq	%rax, %r14
    00000319: 	movq	%rax, %rdi
    0000031c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 796
    00000321: 	movq	%rbp, %rsi
    00000324: 	movq	%r14, %rdi
    00000327: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 807
    0000032c: 	movl	$0x10, %edx
    00000331: 	leaq	DATAat0x491da(%rip), %rsi
    00000338: 	movq	%rax, %rbp
    0000033b: 	movq	%rax, %rdi
    0000033e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 830
    00000343: 	movq	%rbp, %rdi
    00000346: 	movq	%r12, %rsi
    00000349: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 841
    0000034e: 	movl	$0x8, %edx
    00000353: 	leaq	DATAat0x491eb(%rip), %rsi
    0000035a: 	movq	%rax, %rbp
    0000035d: 	movq	%rax, %rdi
    00000360: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 864
    00000365: 	movq	%r13, %xmm0
    0000036a: 	movq	%rbp, %rdi
    0000036d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 877
    00000372: 	movl	$0x2, %edx
    00000377: 	leaq	DATAat0x491f4(%rip), %rsi
    0000037e: 	movq	%rax, %rdi
    00000381: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 897
    00000386: 	movl	0x20(%rsp), %eax
    0000038a: 	movl	%eax, iterations(%rip)
    00000390: 	movq	0x58(%rsp), %rax
    00000395: 	subq	%fs:0x28, %rax
    0000039e: 	jne	.Ltmp1571 # Offset: 926
    000003a0: 	addq	$0x68, %rsp
    000003a4: 	popq	%rbx
    000003a5: 	popq	%rbp
    000003a6: 	popq	%r12
    000003a8: 	popq	%r13
    000003aa: 	popq	%r14
    000003ac: 	popq	%r15
    000003ae: 	retq # Offset: 942
.Ltmp1564:
    000003af: 	movq	%r15, %rax
    000003b2: 	movq	%rsi, %rbp
    000003b5: 	movl	%r14d, %r15d
    000003b8: 	movq	%rax, %r14
    000003bb: 	jmp	.Ltmp1572 # Offset: 955
.Ltmp1571:
    000003c0: 	callq	__stack_chk_fail@PLT # Offset: 960
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll18jacobi2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll21jacobi_sor2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x2b270
  Size        : 0x497
  MaxSize     : 0x4a0
  Offset      : 0x2b270
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll21jacobi_sor2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x88, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movl	%edx, 0x34(%rsp)
    00000033: 	movl	%r14d, %edx
    00000036: 	movl	%ecx, 0x40(%rsp)
    0000003a: 	leaq	0x50(%rsp), %rcx
    0000003f: 	movq	%r9, 0x38(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x78(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x50(%rsp)
    00000059: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000061: 	movaps	%xmm0, 0x60(%rsp)
    00000066: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 102
    0000006b: 	movl	%r15d, %edi
    0000006e: 	imull	%r14d, %edi
    00000072: 	movq	%rax, 0x48(%rsp)
    00000077: 	movslq	%edi, %r13
    0000007a: 	testl	%r13d, %r13d
    0000007d: 	jle	.Ltmp1573 # Offset: 125
    0000007f: 	movslq	%r13d, %rdx
    00000082: 	movq	%rbx, %rsi
    00000085: 	movq	%rbp, %rdi
    00000088: 	shlq	$0x3, %rdx
    0000008c: 	callq	memmove@PLT # Offset: 140
.Ltmp1573:
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movl	$0x2710, iterations(%rip)
    000000a1: 	movl	%eax, 0x44(%rsp)
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0x8(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1574 # Offset: 189
    000000c3: 	movl	0x34(%rsp), %edi
    000000c7: 	movl	0x40(%rsp), %eax
    000000cb: 	movl	%r12d, %r10d
    000000ce: 	negl	%r10d
    000000d1: 	leal	-0x2(%rdi), %r15d
    000000d5: 	leal	-0x2(%rax), %esi
    000000d8: 	movslq	%r10d, %r10
    000000db: 	movl	%r15d, %eax
    000000de: 	movl	%esi, 0x10(%rsp)
    000000e2: 	shlq	$0x3, %r10
    000000e6: 	movslq	%esi, %r14
    000000e9: 	imull	%r12d, %eax
    000000ed: 	cltq
    000000ef: 	shlq	$0x3, %rax
    000000f3: 	movq	%rax, 0x20(%rsp)
    000000f8: 	leal	-0x3(%rdi), %eax
    000000fb: 	imull	%r12d, %eax
    000000ff: 	cltq
    00000101: 	shlq	$0x3, %rax
    00000105: 	movq	%rax, 0x28(%rsp)
    0000010a: 	leal	-0x1(%rdi), %eax
    0000010d: 	imull	%r12d, %eax
    00000111: 	xorl	%r12d, %r12d
    00000114: 	cltq
    00000116: 	shlq	$0x3, %rax
    0000011a: 	movq	%rax, 0x18(%rsp)
    0000011f: 	nop # Size: 1
.Ltmp1585:
    00000120: 	testl	%r15d, %r15d
    00000123: 	jle	.Ltmp1575 # Offset: 291
    00000129: 	movl	0x10(%rsp), %eax
    0000012d: 	testl	%eax, %eax
    0000012f: 	jle	.Ltmp1575 # Offset: 303
    00000131: 	movq	0x20(%rsp), %rax
    00000136: 	movq	0x28(%rsp), %rsi
    0000013b: 	movl	%r15d, %r11d
    0000013e: 	leaq	(%rbp,%rax), %rdi
    00000143: 	leaq	(%rbx,%rsi), %r9
    00000147: 	leaq	(%rbx,%rax), %rsi
    0000014b: 	movq	0x18(%rsp), %rax
    00000150: 	leaq	(%rbx,%rax), %r8
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp1577:
    00000158: 	subl	$0x1, %r11d
    0000015c: 	movq	%r14, %rdx
    0000015f: 	nop # Size: 1
.Ltmp1576:
    00000160: 	movq	-0x8(%rsi,%rdx,8), %rcx
    00000165: 	addq	(%r9,%rdx,8), %rcx
    00000169: 	addq	0x8(%rsi,%rdx,8), %rcx
    0000016e: 	addq	(%r8,%rdx,8), %rcx
    00000172: 	leaq	0x5(%rcx), %rax
    00000176: 	addq	$0x2, %rcx
    0000017a: 	cmovnsq	%rcx, %rax
    0000017e: 	sarq	$0x2, %rax
    00000182: 	subq	(%rdi,%rdx,8), %rax
    00000186: 	imulq	$0x71, %rax, %rax
    0000018a: 	sarq	$0x6, %rax
    0000018e: 	addq	(%rdi,%rdx,8), %rax
    00000192: 	movq	%rax, (%rdi,%rdx,8)
    00000196: 	subq	$0x1, %rdx
    0000019a: 	testl	%edx, %edx
    0000019c: 	jg	.Ltmp1576 # Offset: 412
    0000019e: 	addq	%r10, %rdi
    000001a1: 	addq	%r10, %r9
    000001a4: 	addq	%r10, %rsi
    000001a7: 	addq	%r10, %r8
    000001aa: 	testl	%r11d, %r11d
    000001ad: 	jne	.Ltmp1577 # Offset: 429
.Ltmp1575:
    000001af: 	xorl	%r9d, %r9d
    000001b2: 	xorl	%eax, %eax
    000001b4: 	testq	%r13, %r13
    000001b7: 	je	.Ltmp1578 # Offset: 439
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp1580:
    000001c0: 	movq	(%rbx,%rax,8), %rcx
    000001c4: 	movq	(%rbp,%rax,8), %rdx
    000001c9: 	movq	%rcx, %rsi
    000001cc: 	subq	%rdx, %rsi
    000001cf: 	js	.Ltmp1579 # Offset: 463
    000001d1: 	addq	$0x1, %rax
    000001d5: 	addq	%rsi, %r9
    000001d8: 	cmpq	%rax, %r13
    000001db: 	jne	.Ltmp1580 # Offset: 475
.Ltmp1586:
    000001dd: 	xorl	%r8d, %r8d
    000001e0: 	xorl	%eax, %eax
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1582:
    000001e8: 	movq	(%rbx,%rax,8), %rcx
    000001ec: 	movq	(%rbp,%rax,8), %rdx
    000001f1: 	movq	%rcx, %rsi
    000001f4: 	subq	%rdx, %rsi
    000001f7: 	js	.Ltmp1581 # Offset: 503
    000001f9: 	cmpq	%rsi, %r8
    000001fc: 	cmovlq	%rsi, %r8
    00000200: 	addq	$0x1, %rax
    00000204: 	cmpq	%rax, %r13
    00000207: 	jne	.Ltmp1582 # Offset: 519
.Ltmp1587:
    00000209: 	cmpl	%r12d, 0xc0(%rsp)
    00000211: 	jge	.Ltmp1583 # Offset: 529
    00000213: 	testq	%r8, %r8
    00000216: 	jle	.Ltmp1584 # Offset: 534
    00000218: 	cmpq	$0x9, %r9
    0000021c: 	jle	.Ltmp1584 # Offset: 540
.Ltmp1583:
    0000021e: 	movq	%rbp, %rax
    00000221: 	addl	$0x1, %r12d
    00000225: 	movq	%rbx, %rbp
    00000228: 	cmpl	0x8(%rsp), %r12d
    0000022d: 	je	.Ltmp1584 # Offset: 557
    0000022f: 	movq	%rax, %rbx
    00000232: 	jmp	.Ltmp1585 # Offset: 562
    00000237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1579:
    00000240: 	subq	%rcx, %rdx
    00000243: 	addq	$0x1, %rax
    00000247: 	addq	%rdx, %r9
    0000024a: 	cmpq	%rax, %r13
    0000024d: 	jne	.Ltmp1580 # Offset: 589
    00000253: 	jmp	.Ltmp1586 # Offset: 595
    00000255: 	nopl	(%rax) # Size: 3
.Ltmp1581:
    00000258: 	subq	%rcx, %rdx
    0000025b: 	cmpq	%rdx, %r8
    0000025e: 	cmovlq	%rdx, %r8
    00000262: 	addq	$0x1, %rax
    00000266: 	cmpq	%rax, %r13
    00000269: 	jne	.Ltmp1582 # Offset: 617
    0000026f: 	jmp	.Ltmp1587 # Offset: 623
.Ltmp1578:
    00000271: 	xorl	%r8d, %r8d
    00000274: 	cmpl	%r12d, 0xc0(%rsp)
    0000027c: 	jge	.Ltmp1583 # Offset: 636
.Ltmp1584:
    0000027e: 	movq	%r9, 0x10(%rsp)
    00000283: 	movq	%r8, 0x8(%rsp)
    00000288: 	callq	clock@PLT # Offset: 648
    0000028d: 	movl	0x34(%rsp), %edi
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	0x8(%rsp), %r8
    0000029a: 	movq	%rax, end_time(%rip)
    000002a1: 	subq	start_time(%rip), %rax
    000002a8: 	cvtsi2sd	%rax, %xmm0
    000002ad: 	movl	%edi, %eax
    000002af: 	divsd	DATAat0x49520(%rip), %xmm0
    000002b7: 	movq	0x10(%rsp), %r9
    000002bc: 	shrl	$0x1f, %eax
    000002bf: 	movq	%xmm0, %rbx
    000002c4: 	addl	%edi, %eax
    000002c6: 	movl	0x40(%rsp), %edi
    000002ca: 	sarl	%eax
    000002cc: 	movl	%edi, %edx
    000002ce: 	imull	%edi, %eax
    000002d1: 	shrl	$0x1f, %edx
    000002d4: 	addl	%edi, %edx
    000002d6: 	movq	0x48(%rsp), %rdi
    000002db: 	sarl	%edx
    000002dd: 	addl	%edx, %eax
    000002df: 	cltq
    000002e1: 	subq	(%rbp,%rax,8), %rdi
    000002e6: 	cmpl	%r12d, iterations(%rip)
    000002ed: 	movq	%rdi, %rbp
    000002f0: 	jg	.Ltmp1588 # Offset: 752
    000002f2: 	cmpq	$0xa, %r9
    000002f6: 	jle	.Ltmp1588 # Offset: 758
    000002f8: 	cmpq	$0x1, %r8
    000002fc: 	jle	.Ltmp1588 # Offset: 764
    000002fe: 	movq	0x38(%rsp), %rax
    00000303: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000030a: 	movq	%r13, %rdi
    0000030d: 	movq	0x8(%rax), %rdx
    00000311: 	movq	(%rax), %rsi
    00000314: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 788
    00000319: 	movl	$0x11, %edx
    0000031e: 	leaq	DATAat0x49199(%rip), %rsi
    00000325: 	movq	%rax, %rdi
    00000328: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 808
    0000032d: 	movq	0x8(%rsp), %r8
    00000332: 	movq	0x10(%rsp), %r9
    00000337: 	jmp	.Ltmp1589 # Offset: 823
.Ltmp1588:
    00000339: 	movq	0x38(%rsp), %rax
    0000033e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000345: 	movq	%r9, 0x10(%rsp)
    0000034a: 	movq	%r13, %rdi
    0000034d: 	movq	%r8, 0x8(%rsp)
    00000352: 	movq	0x8(%rax), %rdx
    00000356: 	movq	(%rax), %rsi
    00000359: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 857
    0000035e: 	movl	$0xa, %edx
    00000363: 	leaq	DATAat0x491ab(%rip), %rsi
    0000036a: 	movq	%rax, %rdi
    0000036d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 877
    00000372: 	movq	0x10(%rsp), %r9
    00000377: 	movq	0x8(%rsp), %r8
.Ltmp1589:
    0000037c: 	movl	$0x4, %edx
    00000381: 	leaq	DATAat0x491b6(%rip), %rsi
    00000388: 	movq	%r13, %rdi
    0000038b: 	movq	%r9, 0x10(%rsp)
    00000390: 	movq	%r8, 0x8(%rsp)
    00000395: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 917
    0000039a: 	movl	%r12d, %esi
    0000039d: 	movq	%r13, %rdi
    000003a0: 	callq	_ZNSolsEi@PLT # Offset: 928
    000003a5: 	movl	$0xb, %edx
    000003aa: 	leaq	DATAat0x491bb(%rip), %rsi
    000003b1: 	movq	%rax, %rdi
    000003b4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 948
    000003b9: 	movl	$0xa, %edx
    000003be: 	leaq	DATAat0x491c7(%rip), %rsi
    000003c5: 	movq	%r13, %rdi
    000003c8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 968
    000003cd: 	movq	0x10(%rsp), %rsi
    000003d2: 	movq	%r13, %rdi
    000003d5: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 981
    000003da: 	movl	$0x7, %edx
    000003df: 	leaq	DATAat0x491d2(%rip), %rsi
    000003e6: 	movq	%rax, %rdi
    000003e9: 	movq	%rax, %r12
    000003ec: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1004
    000003f1: 	movq	0x8(%rsp), %rsi
    000003f6: 	movq	%r12, %rdi
    000003f9: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1017
    000003fe: 	movl	$0x10, %edx
    00000403: 	leaq	DATAat0x491da(%rip), %rsi
    0000040a: 	movq	%rax, %r12
    0000040d: 	movq	%rax, %rdi
    00000410: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1040
    00000415: 	movq	%rbp, %rsi
    00000418: 	movq	%r12, %rdi
    0000041b: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1051
    00000420: 	movl	$0x8, %edx
    00000425: 	leaq	DATAat0x491eb(%rip), %rsi
    0000042c: 	movq	%rax, %rbp
    0000042f: 	movq	%rax, %rdi
    00000432: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1074
    00000437: 	movq	%rbx, %xmm0
    0000043c: 	movq	%rbp, %rdi
    0000043f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1087
    00000444: 	movl	$0x2, %edx
    00000449: 	leaq	DATAat0x491f4(%rip), %rsi
    00000450: 	movq	%rax, %rdi
    00000453: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1107
    00000458: 	movl	0x44(%rsp), %eax
    0000045c: 	movl	%eax, iterations(%rip)
    00000462: 	movq	0x78(%rsp), %rax
    00000467: 	subq	%fs:0x28, %rax
    00000470: 	jne	.Ltmp1590 # Offset: 1136
    00000472: 	addq	$0x88, %rsp
    00000479: 	popq	%rbx
    0000047a: 	popq	%rbp
    0000047b: 	popq	%r12
    0000047d: 	popq	%r13
    0000047f: 	popq	%r14
    00000481: 	popq	%r15
    00000483: 	retq # Offset: 1155
.Ltmp1574:
    00000484: 	xorl	%r12d, %r12d
    00000487: 	xorl	%r8d, %r8d
    0000048a: 	xorl	%r9d, %r9d
    0000048d: 	jmp	.Ltmp1584 # Offset: 1165
.Ltmp1590:
    00000492: 	callq	__stack_chk_fail@PLT # Offset: 1170
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll21jacobi_sor2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x2b710
  Size        : 0x46f
  MaxSize     : 0x470
  Offset      : 0x2b710
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll22jacobi_sor2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x78, %rsp
    00000024: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002c: 	movl	%edx, 0x24(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x30(%rsp)
    00000037: 	leaq	0x40(%rsp), %rcx
    0000003c: 	movq	%r9, 0x28(%rsp)
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x68(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movaps	%xmm0, 0x40(%rsp)
    00000056: 	movdqa	DATAat0x49490(%rip), %xmm0
    0000005e: 	movaps	%xmm0, 0x50(%rsp)
    00000063: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 99
    00000068: 	movl	%r15d, %edi
    0000006b: 	imull	%r14d, %edi
    0000006f: 	movq	%rax, 0x38(%rsp)
    00000074: 	movslq	%edi, %r13
    00000077: 	testl	%r13d, %r13d
    0000007a: 	jle	.Ltmp1591 # Offset: 122
    0000007c: 	movslq	%r13d, %rdx
    0000007f: 	movq	%rbx, %rsi
    00000082: 	movq	%rbp, %rdi
    00000085: 	shlq	$0x3, %rdx
    00000089: 	callq	memmove@PLT # Offset: 137
.Ltmp1591:
    0000008e: 	movl	iterations(%rip), %eax
    00000094: 	movl	$0x2710, iterations(%rip)
    0000009e: 	movl	%eax, 0x34(%rsp)
    000000a2: 	callq	clock@PLT # Offset: 162
    000000a7: 	movq	%rax, start_time(%rip)
    000000ae: 	movl	iterations(%rip), %eax
    000000b4: 	movl	%eax, 0x8(%rsp)
    000000b8: 	testl	%eax, %eax
    000000ba: 	jle	.Ltmp1592 # Offset: 186
    000000c0: 	movl	0x24(%rsp), %eax
    000000c4: 	movslq	%r12d, %r10
    000000c7: 	shlq	$0x3, %r10
    000000cb: 	leal	-0x1(%rax), %r14d
    000000cf: 	movl	0x30(%rsp), %eax
    000000d3: 	leal	-0x2(%rax), %edi
    000000d6: 	leal	(%r12,%r12), %eax
    000000da: 	xorl	%r12d, %r12d
    000000dd: 	cltq
    000000df: 	movl	%edi, 0x10(%rsp)
    000000e3: 	movslq	%edi, %r15
    000000e6: 	shlq	$0x3, %rax
    000000ea: 	movq	%rax, 0x18(%rsp)
    000000ef: 	nop # Size: 1
.Ltmp1603:
    000000f0: 	cmpl	$0x1, %r14d
    000000f4: 	jle	.Ltmp1593 # Offset: 244
    000000fa: 	movl	0x10(%rsp), %eax
    000000fe: 	testl	%eax, %eax
    00000100: 	jle	.Ltmp1593 # Offset: 256
    00000102: 	movq	0x18(%rsp), %rax
    00000107: 	leaq	(%rbp,%r10), %rdi
    0000010c: 	movq	%rbx, %r9
    0000010f: 	leaq	(%rbx,%r10), %rsi
    00000113: 	movl	$0x1, %r11d
    00000119: 	leaq	(%rbx,%rax), %r8
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1595:
    00000120: 	addl	$0x1, %r11d
    00000124: 	movq	%r15, %rdx
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1594:
    00000130: 	movq	-0x8(%rsi,%rdx,8), %rcx
    00000135: 	addq	(%r9,%rdx,8), %rcx
    00000139: 	addq	0x8(%rsi,%rdx,8), %rcx
    0000013e: 	addq	(%r8,%rdx,8), %rcx
    00000142: 	leaq	0x5(%rcx), %rax
    00000146: 	addq	$0x2, %rcx
    0000014a: 	cmovnsq	%rcx, %rax
    0000014e: 	sarq	$0x2, %rax
    00000152: 	subq	(%rdi,%rdx,8), %rax
    00000156: 	imulq	$0x71, %rax, %rax
    0000015a: 	sarq	$0x6, %rax
    0000015e: 	addq	(%rdi,%rdx,8), %rax
    00000162: 	movq	%rax, (%rdi,%rdx,8)
    00000166: 	subq	$0x1, %rdx
    0000016a: 	testl	%edx, %edx
    0000016c: 	jg	.Ltmp1594 # Offset: 364
    0000016e: 	addq	%r10, %rdi
    00000171: 	addq	%r10, %r9
    00000174: 	addq	%r10, %rsi
    00000177: 	addq	%r10, %r8
    0000017a: 	cmpl	%r11d, %r14d
    0000017d: 	jne	.Ltmp1595 # Offset: 381
.Ltmp1593:
    0000017f: 	testq	%r13, %r13
    00000182: 	je	.Ltmp1596 # Offset: 386
    00000188: 	xorl	%r9d, %r9d
    0000018b: 	xorl	%eax, %eax
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp1598:
    00000190: 	movq	(%rbx,%rax,8), %rcx
    00000194: 	movq	(%rbp,%rax,8), %rdx
    00000199: 	movq	%rcx, %rsi
    0000019c: 	subq	%rdx, %rsi
    0000019f: 	js	.Ltmp1597 # Offset: 415
    000001a1: 	addq	$0x1, %rax
    000001a5: 	addq	%rsi, %r9
    000001a8: 	cmpq	%rax, %r13
    000001ab: 	jne	.Ltmp1598 # Offset: 427
.Ltmp1604:
    000001ad: 	xorl	%r8d, %r8d
    000001b0: 	xorl	%eax, %eax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1600:
    000001b8: 	movq	(%rbx,%rax,8), %rcx
    000001bc: 	movq	(%rbp,%rax,8), %rdx
    000001c1: 	movq	%rcx, %rsi
    000001c4: 	subq	%rdx, %rsi
    000001c7: 	js	.Ltmp1599 # Offset: 455
    000001c9: 	cmpq	%rsi, %r8
    000001cc: 	cmovlq	%rsi, %r8
    000001d0: 	addq	$0x1, %rax
    000001d4: 	cmpq	%rax, %r13
    000001d7: 	jne	.Ltmp1600 # Offset: 471
.Ltmp1605:
    000001d9: 	cmpl	%r12d, 0xb0(%rsp)
    000001e1: 	jge	.Ltmp1601 # Offset: 481
    000001e3: 	testq	%r8, %r8
    000001e6: 	jle	.Ltmp1602 # Offset: 486
    000001e8: 	cmpq	$0x9, %r9
    000001ec: 	jle	.Ltmp1602 # Offset: 492
.Ltmp1601:
    000001ee: 	movq	%rbp, %rax
    000001f1: 	addl	$0x1, %r12d
    000001f5: 	movq	%rbx, %rbp
    000001f8: 	cmpl	0x8(%rsp), %r12d
    000001fd: 	je	.Ltmp1602 # Offset: 509
    000001ff: 	movq	%rax, %rbx
    00000202: 	jmp	.Ltmp1603 # Offset: 514
    00000207: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1597:
    00000210: 	subq	%rcx, %rdx
    00000213: 	addq	$0x1, %rax
    00000217: 	addq	%rdx, %r9
    0000021a: 	cmpq	%rax, %r13
    0000021d: 	jne	.Ltmp1598 # Offset: 541
    00000223: 	jmp	.Ltmp1604 # Offset: 547
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1599:
    00000228: 	subq	%rcx, %rdx
    0000022b: 	cmpq	%rdx, %r8
    0000022e: 	cmovlq	%rdx, %r8
    00000232: 	addq	$0x1, %rax
    00000236: 	cmpq	%rax, %r13
    00000239: 	jne	.Ltmp1600 # Offset: 569
    0000023f: 	jmp	.Ltmp1605 # Offset: 575
.Ltmp1596:
    00000241: 	cmpl	%r12d, 0xb0(%rsp)
    00000249: 	jl	.Ltmp1606 # Offset: 585
    0000024b: 	xorl	%r9d, %r9d
    0000024e: 	xorl	%r8d, %r8d
    00000251: 	jmp	.Ltmp1601 # Offset: 593
.Ltmp1606:
    00000253: 	xorl	%r8d, %r8d
    00000256: 	xorl	%r9d, %r9d
.Ltmp1602:
    00000259: 	movq	%r9, 0x10(%rsp)
    0000025e: 	movq	%r8, 0x8(%rsp)
    00000263: 	callq	clock@PLT # Offset: 611
    00000268: 	movl	0x24(%rsp), %edi
    0000026c: 	pxor	%xmm0, %xmm0
    00000270: 	movq	0x8(%rsp), %r8
    00000275: 	movq	%rax, end_time(%rip)
    0000027c: 	subq	start_time(%rip), %rax
    00000283: 	cvtsi2sd	%rax, %xmm0
    00000288: 	movl	%edi, %eax
    0000028a: 	divsd	DATAat0x49520(%rip), %xmm0
    00000292: 	movq	0x10(%rsp), %r9
    00000297: 	shrl	$0x1f, %eax
    0000029a: 	movq	%xmm0, %rbx
    0000029f: 	addl	%edi, %eax
    000002a1: 	movl	0x30(%rsp), %edi
    000002a5: 	sarl	%eax
    000002a7: 	movl	%edi, %edx
    000002a9: 	imull	%edi, %eax
    000002ac: 	shrl	$0x1f, %edx
    000002af: 	addl	%edi, %edx
    000002b1: 	movq	0x38(%rsp), %rdi
    000002b6: 	sarl	%edx
    000002b8: 	addl	%edx, %eax
    000002ba: 	cltq
    000002bc: 	subq	(%rbp,%rax,8), %rdi
    000002c1: 	cmpl	%r12d, iterations(%rip)
    000002c8: 	movq	%rdi, %rbp
    000002cb: 	jg	.Ltmp1607 # Offset: 715
    000002cd: 	cmpq	$0xa, %r9
    000002d1: 	jle	.Ltmp1607 # Offset: 721
    000002d3: 	cmpq	$0x1, %r8
    000002d7: 	jle	.Ltmp1607 # Offset: 727
    000002d9: 	movq	0x28(%rsp), %rax
    000002de: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000002e5: 	movq	%r13, %rdi
    000002e8: 	movq	0x8(%rax), %rdx
    000002ec: 	movq	(%rax), %rsi
    000002ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 751
    000002f4: 	movl	$0x11, %edx
    000002f9: 	leaq	DATAat0x49199(%rip), %rsi
    00000300: 	movq	%rax, %rdi
    00000303: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 771
    00000308: 	movq	0x8(%rsp), %r8
    0000030d: 	movq	0x10(%rsp), %r9
    00000312: 	jmp	.Ltmp1608 # Offset: 786
.Ltmp1607:
    00000314: 	movq	0x28(%rsp), %rax
    00000319: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000320: 	movq	%r9, 0x10(%rsp)
    00000325: 	movq	%r13, %rdi
    00000328: 	movq	%r8, 0x8(%rsp)
    0000032d: 	movq	0x8(%rax), %rdx
    00000331: 	movq	(%rax), %rsi
    00000334: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 820
    00000339: 	movl	$0xa, %edx
    0000033e: 	leaq	DATAat0x491ab(%rip), %rsi
    00000345: 	movq	%rax, %rdi
    00000348: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 840
    0000034d: 	movq	0x10(%rsp), %r9
    00000352: 	movq	0x8(%rsp), %r8
.Ltmp1608:
    00000357: 	movl	$0x4, %edx
    0000035c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000363: 	movq	%r13, %rdi
    00000366: 	movq	%r9, 0x10(%rsp)
    0000036b: 	movq	%r8, 0x8(%rsp)
    00000370: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 880
    00000375: 	movl	%r12d, %esi
    00000378: 	movq	%r13, %rdi
    0000037b: 	callq	_ZNSolsEi@PLT # Offset: 891
    00000380: 	movl	$0xb, %edx
    00000385: 	leaq	DATAat0x491bb(%rip), %rsi
    0000038c: 	movq	%rax, %rdi
    0000038f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 911
    00000394: 	movl	$0xa, %edx
    00000399: 	leaq	DATAat0x491c7(%rip), %rsi
    000003a0: 	movq	%r13, %rdi
    000003a3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 931
    000003a8: 	movq	0x10(%rsp), %rsi
    000003ad: 	movq	%r13, %rdi
    000003b0: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 944
    000003b5: 	movl	$0x7, %edx
    000003ba: 	leaq	DATAat0x491d2(%rip), %rsi
    000003c1: 	movq	%rax, %rdi
    000003c4: 	movq	%rax, %r12
    000003c7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 967
    000003cc: 	movq	0x8(%rsp), %rsi
    000003d1: 	movq	%r12, %rdi
    000003d4: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 980
    000003d9: 	movl	$0x10, %edx
    000003de: 	leaq	DATAat0x491da(%rip), %rsi
    000003e5: 	movq	%rax, %r12
    000003e8: 	movq	%rax, %rdi
    000003eb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1003
    000003f0: 	movq	%rbp, %rsi
    000003f3: 	movq	%r12, %rdi
    000003f6: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1014
    000003fb: 	movl	$0x8, %edx
    00000400: 	leaq	DATAat0x491eb(%rip), %rsi
    00000407: 	movq	%rax, %rbp
    0000040a: 	movq	%rax, %rdi
    0000040d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1037
    00000412: 	movq	%rbx, %xmm0
    00000417: 	movq	%rbp, %rdi
    0000041a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1050
    0000041f: 	movl	$0x2, %edx
    00000424: 	leaq	DATAat0x491f4(%rip), %rsi
    0000042b: 	movq	%rax, %rdi
    0000042e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1070
    00000433: 	movl	0x34(%rsp), %eax
    00000437: 	movl	%eax, iterations(%rip)
    0000043d: 	movq	0x68(%rsp), %rax
    00000442: 	subq	%fs:0x28, %rax
    0000044b: 	jne	.Ltmp1609 # Offset: 1099
    0000044d: 	addq	$0x78, %rsp
    00000451: 	popq	%rbx
    00000452: 	popq	%rbp
    00000453: 	popq	%r12
    00000455: 	popq	%r13
    00000457: 	popq	%r14
    00000459: 	popq	%r15
    0000045b: 	retq # Offset: 1115
.Ltmp1592:
    0000045c: 	xorl	%r12d, %r12d
    0000045f: 	xorl	%r8d, %r8d
    00000462: 	xorl	%r9d, %r9d
    00000465: 	jmp	.Ltmp1602 # Offset: 1125
.Ltmp1609:
    0000046a: 	callq	__stack_chk_fail@PLT # Offset: 1130
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x2bb80
  Size        : 0x4be
  MaxSize     : 0x4c0
  Offset      : 0x2bb80
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movl	%r15d, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x88, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movl	%edx, 0x34(%rsp)
    00000033: 	movl	%r14d, %edx
    00000036: 	movl	%ecx, 0x40(%rsp)
    0000003a: 	leaq	0x50(%rsp), %rcx
    0000003f: 	movq	%r9, 0x38(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x78(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x50(%rsp)
    00000059: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000061: 	movaps	%xmm0, 0x60(%rsp)
    00000066: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 102
    0000006b: 	movl	%r15d, %esi
    0000006e: 	imull	%r14d, %esi
    00000072: 	movq	%rax, 0x48(%rsp)
    00000077: 	movslq	%esi, %r14
    0000007a: 	testl	%r14d, %r14d
    0000007d: 	jle	.Ltmp1610 # Offset: 125
    0000007f: 	movslq	%r14d, %rdx
    00000082: 	movq	%rbx, %rsi
    00000085: 	movq	%rbp, %rdi
    00000088: 	shlq	$0x3, %rdx
    0000008c: 	callq	memmove@PLT # Offset: 140
.Ltmp1610:
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movl	$0x2710, iterations(%rip)
    000000a1: 	movl	%eax, 0x44(%rsp)
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0xc(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1611 # Offset: 189
    000000c3: 	movl	0x40(%rsp), %edi
    000000c7: 	movl	0x34(%rsp), %esi
    000000cb: 	movl	%r12d, %r10d
    000000ce: 	movl	$0x0, 0x4(%rsp)
    000000d6: 	negl	%r10d
    000000d9: 	leal	-0x1(%rdi), %eax
    000000dc: 	leal	-0x2(%rsi), %ecx
    000000df: 	movslq	%r10d, %r10
    000000e2: 	movl	%eax, 0x30(%rsp)
    000000e6: 	leal	-0x3(%rsi), %eax
    000000e9: 	shlq	$0x3, %r10
    000000ed: 	imull	%r12d, %eax
    000000f1: 	movl	%ecx, 0x8(%rsp)
    000000f5: 	cltq
    000000f7: 	shlq	$0x3, %rax
    000000fb: 	movq	%rax, 0x18(%rsp)
    00000100: 	movl	%ecx, %eax
    00000102: 	imull	%r12d, %eax
    00000106: 	movslq	%eax, %rdx
    00000109: 	movq	%rdx, %rax
    0000010c: 	negq	%rax
    0000010f: 	shlq	$0x3, %rax
    00000113: 	movq	%rax, 0x28(%rsp)
    00000118: 	leal	-0x1(%rsi), %eax
    0000011b: 	imull	%r12d, %eax
    0000011f: 	cltq
    00000121: 	shlq	$0x3, %rax
    00000125: 	movq	%rax, 0x20(%rsp)
    0000012a: 	leal	-0x3(%rdi), %eax
    0000012d: 	addq	$0x1, %rax
    00000131: 	addq	%rax, %rdx
    00000134: 	negq	%rax
    00000137: 	leaq	(,%rdx,8), %rcx
    0000013f: 	leaq	(,%rax,8), %r15
    00000147: 	movq	%rcx, 0x10(%rsp)
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp1622:
    00000150: 	movl	0x8(%rsp), %eax
    00000154: 	testl	%eax, %eax
    00000156: 	jle	.Ltmp1612 # Offset: 342
    0000015c: 	cmpl	$0x1, 0x30(%rsp)
    00000161: 	jle	.Ltmp1612 # Offset: 353
    00000167: 	movq	0x10(%rsp), %r8
    0000016c: 	movq	0x20(%rsp), %r13
    00000171: 	movq	0x28(%rsp), %r9
    00000176: 	movq	0x18(%rsp), %r12
    0000017b: 	movl	0x8(%rsp), %r11d
.Ltmp1614:
    00000180: 	leaq	(%r12,%r9), %rsi
    00000184: 	leaq	(%r9,%r13), %rcx
    00000188: 	subl	$0x1, %r11d
    0000018c: 	leaq	(%r15,%r8), %rdx
    00000190: 	addq	%rbx, %rsi
    00000193: 	addq	%rbx, %rcx
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1613:
    000001a0: 	movq	(%rbx,%rdx), %rdi
    000001a4: 	addq	0x8(%rdx,%rsi), %rdi
    000001a9: 	addq	0x10(%rbx,%rdx), %rdi
    000001ae: 	addq	0x8(%rdx,%rcx), %rdi
    000001b3: 	leaq	0x5(%rdi), %rax
    000001b7: 	addq	$0x2, %rdi
    000001bb: 	cmovnsq	%rdi, %rax
    000001bf: 	sarq	$0x2, %rax
    000001c3: 	subq	0x8(%rbp,%rdx), %rax
    000001c8: 	imulq	$0x71, %rax, %rax
    000001cc: 	sarq	$0x6, %rax
    000001d0: 	addq	0x8(%rbp,%rdx), %rax
    000001d5: 	movq	%rax, 0x8(%rbp,%rdx)
    000001da: 	addq	$0x8, %rdx
    000001de: 	cmpq	%r8, %rdx
    000001e1: 	jne	.Ltmp1613 # Offset: 481
    000001e3: 	addq	%r10, %r12
    000001e6: 	subq	%r10, %r9
    000001e9: 	addq	%r10, %r13
    000001ec: 	addq	%r10, %r8
    000001ef: 	testl	%r11d, %r11d
    000001f2: 	jne	.Ltmp1614 # Offset: 498
.Ltmp1612:
    000001f4: 	testq	%r14, %r14
    000001f7: 	je	.Ltmp1615 # Offset: 503
    000001fd: 	xorl	%r13d, %r13d
    00000200: 	xorl	%eax, %eax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1617:
    00000208: 	movq	(%rbx,%rax,8), %rcx
    0000020c: 	movq	(%rbp,%rax,8), %rdx
    00000211: 	movq	%rcx, %rsi
    00000214: 	subq	%rdx, %rsi
    00000217: 	js	.Ltmp1616 # Offset: 535
    00000219: 	addq	$0x1, %rax
    0000021d: 	addq	%rsi, %r13
    00000220: 	cmpq	%rax, %r14
    00000223: 	jne	.Ltmp1617 # Offset: 547
.Ltmp1623:
    00000225: 	xorl	%r12d, %r12d
    00000228: 	xorl	%eax, %eax
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1619:
    00000230: 	movq	(%rbx,%rax,8), %rcx
    00000234: 	movq	(%rbp,%rax,8), %rdx
    00000239: 	movq	%rcx, %rsi
    0000023c: 	subq	%rdx, %rsi
    0000023f: 	js	.Ltmp1618 # Offset: 575
    00000241: 	cmpq	%rsi, %r12
    00000244: 	cmovlq	%rsi, %r12
    00000248: 	addq	$0x1, %rax
    0000024c: 	cmpq	%rax, %r14
    0000024f: 	jne	.Ltmp1619 # Offset: 591
.Ltmp1624:
    00000251: 	movl	0x4(%rsp), %eax
    00000255: 	cmpl	%eax, 0xc0(%rsp)
    0000025c: 	jge	.Ltmp1620 # Offset: 604
    0000025e: 	testq	%r12, %r12
    00000261: 	jle	.Ltmp1621 # Offset: 609
    00000263: 	cmpq	$0x9, %r13
    00000267: 	jle	.Ltmp1621 # Offset: 615
.Ltmp1620:
    00000269: 	addl	$0x1, 0x4(%rsp)
    0000026e: 	movq	%rbp, %rax
    00000271: 	movl	0x4(%rsp), %ecx
    00000275: 	movq	%rbx, %rbp
    00000278: 	cmpl	0xc(%rsp), %ecx
    0000027c: 	je	.Ltmp1621 # Offset: 636
    0000027e: 	movq	%rax, %rbx
    00000281: 	jmp	.Ltmp1622 # Offset: 641
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1616:
    00000290: 	subq	%rcx, %rdx
    00000293: 	addq	$0x1, %rax
    00000297: 	addq	%rdx, %r13
    0000029a: 	cmpq	%rax, %r14
    0000029d: 	jne	.Ltmp1617 # Offset: 669
    000002a3: 	jmp	.Ltmp1623 # Offset: 675
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp1618:
    000002a8: 	subq	%rcx, %rdx
    000002ab: 	cmpq	%rdx, %r12
    000002ae: 	cmovlq	%rdx, %r12
    000002b2: 	addq	$0x1, %rax
    000002b6: 	cmpq	%rax, %r14
    000002b9: 	jne	.Ltmp1619 # Offset: 697
    000002bf: 	jmp	.Ltmp1624 # Offset: 703
.Ltmp1615:
    000002c1: 	movl	0x4(%rsp), %eax
    000002c5: 	cmpl	%eax, 0xc0(%rsp)
    000002cc: 	jl	.Ltmp1625 # Offset: 716
    000002ce: 	xorl	%r13d, %r13d
    000002d1: 	xorl	%r12d, %r12d
    000002d4: 	jmp	.Ltmp1620 # Offset: 724
.Ltmp1625:
    000002d6: 	xorl	%r12d, %r12d
    000002d9: 	xorl	%r13d, %r13d
.Ltmp1621:
    000002dc: 	callq	clock@PLT # Offset: 732
    000002e1: 	movl	0x34(%rsp), %ecx
    000002e5: 	pxor	%xmm0, %xmm0
    000002e9: 	movq	%rax, end_time(%rip)
    000002f0: 	subq	start_time(%rip), %rax
    000002f7: 	cvtsi2sd	%rax, %xmm0
    000002fc: 	movl	%ecx, %eax
    000002fe: 	divsd	DATAat0x49520(%rip), %xmm0
    00000306: 	movq	%xmm0, %rbx
    0000030b: 	shrl	$0x1f, %eax
    0000030e: 	addl	%ecx, %eax
    00000310: 	movl	0x40(%rsp), %ecx
    00000314: 	sarl	%eax
    00000316: 	movl	%ecx, %edx
    00000318: 	imull	%ecx, %eax
    0000031b: 	shrl	$0x1f, %edx
    0000031e: 	addl	%ecx, %edx
    00000320: 	movq	0x48(%rsp), %rcx
    00000325: 	sarl	%edx
    00000327: 	addl	%edx, %eax
    00000329: 	cltq
    0000032b: 	subq	(%rbp,%rax,8), %rcx
    00000330: 	movl	0x4(%rsp), %eax
    00000334: 	cmpl	%eax, iterations(%rip)
    0000033a: 	movq	%rcx, %rbp
    0000033d: 	jg	.Ltmp1626 # Offset: 829
    0000033f: 	cmpq	$0xa, %r13
    00000343: 	jle	.Ltmp1626 # Offset: 835
    00000345: 	cmpq	$0x1, %r12
    00000349: 	jle	.Ltmp1626 # Offset: 841
    0000034b: 	movq	0x38(%rsp), %rax
    00000350: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000357: 	movq	%r14, %rdi
    0000035a: 	movq	0x8(%rax), %rdx
    0000035e: 	movq	(%rax), %rsi
    00000361: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 865
    00000366: 	movl	$0x11, %edx
    0000036b: 	leaq	DATAat0x49199(%rip), %rsi
    00000372: 	movq	%rax, %rdi
    00000375: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 885
    0000037a: 	jmp	.Ltmp1627 # Offset: 890
.Ltmp1626:
    0000037c: 	movq	0x38(%rsp), %rax
    00000381: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000388: 	movq	%r14, %rdi
    0000038b: 	movq	0x8(%rax), %rdx
    0000038f: 	movq	(%rax), %rsi
    00000392: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 914
    00000397: 	movl	$0xa, %edx
    0000039c: 	leaq	DATAat0x491ab(%rip), %rsi
    000003a3: 	movq	%rax, %rdi
    000003a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 934
.Ltmp1627:
    000003ab: 	movl	$0x4, %edx
    000003b0: 	leaq	DATAat0x491b6(%rip), %rsi
    000003b7: 	movq	%r14, %rdi
    000003ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 954
    000003bf: 	movl	0x4(%rsp), %esi
    000003c3: 	movq	%r14, %rdi
    000003c6: 	callq	_ZNSolsEi@PLT # Offset: 966
    000003cb: 	movl	$0xb, %edx
    000003d0: 	leaq	DATAat0x491bb(%rip), %rsi
    000003d7: 	movq	%rax, %rdi
    000003da: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 986
    000003df: 	movl	$0xa, %edx
    000003e4: 	leaq	DATAat0x491c7(%rip), %rsi
    000003eb: 	movq	%r14, %rdi
    000003ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1006
    000003f3: 	movq	%r13, %rsi
    000003f6: 	movq	%r14, %rdi
    000003f9: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1017
    000003fe: 	movl	$0x7, %edx
    00000403: 	leaq	DATAat0x491d2(%rip), %rsi
    0000040a: 	movq	%rax, %r13
    0000040d: 	movq	%rax, %rdi
    00000410: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1040
    00000415: 	movq	%r12, %rsi
    00000418: 	movq	%r13, %rdi
    0000041b: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1051
    00000420: 	movl	$0x10, %edx
    00000425: 	leaq	DATAat0x491da(%rip), %rsi
    0000042c: 	movq	%rax, %r12
    0000042f: 	movq	%rax, %rdi
    00000432: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1074
    00000437: 	movq	%rbp, %rsi
    0000043a: 	movq	%r12, %rdi
    0000043d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1085
    00000442: 	movl	$0x8, %edx
    00000447: 	leaq	DATAat0x491eb(%rip), %rsi
    0000044e: 	movq	%rax, %rbp
    00000451: 	movq	%rax, %rdi
    00000454: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1108
    00000459: 	movq	%rbx, %xmm0
    0000045e: 	movq	%rbp, %rdi
    00000461: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1121
    00000466: 	movl	$0x2, %edx
    0000046b: 	leaq	DATAat0x491f4(%rip), %rsi
    00000472: 	movq	%rax, %rdi
    00000475: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1141
    0000047a: 	movl	0x44(%rsp), %eax
    0000047e: 	movl	%eax, iterations(%rip)
    00000484: 	movq	0x78(%rsp), %rax
    00000489: 	subq	%fs:0x28, %rax
    00000492: 	jne	.Ltmp1628 # Offset: 1170
    00000494: 	addq	$0x88, %rsp
    0000049b: 	popq	%rbx
    0000049c: 	popq	%rbp
    0000049d: 	popq	%r12
    0000049f: 	popq	%r13
    000004a1: 	popq	%r14
    000004a3: 	popq	%r15
    000004a5: 	retq # Offset: 1189
.Ltmp1611:
    000004a6: 	movl	$0x0, 0x4(%rsp)
    000004ae: 	xorl	%r12d, %r12d
    000004b1: 	xorl	%r13d, %r13d
    000004b4: 	jmp	.Ltmp1621 # Offset: 1204
.Ltmp1628:
    000004b9: 	callq	__stack_chk_fail@PLT # Offset: 1209
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll21jacobi_sor2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x2c040
  Size        : 0x6f4
  MaxSize     : 0x700
  Offset      : 0x2c040
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll21jacobi_sor2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	imull	%ebp, %ebx
    0000001d: 	subq	$0x98, %rsp
    00000024: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002c: 	movl	%edx, 0x44(%rsp)
    00000030: 	movl	%ebp, %edx
    00000032: 	movl	%ecx, 0x50(%rsp)
    00000036: 	leaq	0x60(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x1c(%rsp)
    00000040: 	movq	%r9, 0x48(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x88(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	movaps	%xmm0, 0x60(%rsp)
    0000005d: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000065: 	movaps	%xmm0, 0x70(%rsp)
    0000006a: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 106
    0000006f: 	movq	%rax, 0x58(%rsp)
    00000074: 	testl	%ebx, %ebx
    00000076: 	jle	.Ltmp1629 # Offset: 118
    00000078: 	movslq	%ebx, %rdx
    0000007b: 	movq	%r14, %rsi
    0000007e: 	movq	%r15, %rdi
    00000081: 	shlq	$0x3, %rdx
    00000085: 	callq	memmove@PLT # Offset: 133
.Ltmp1629:
    0000008a: 	movl	iterations(%rip), %eax
    00000090: 	movl	$0x2710, iterations(%rip)
    0000009a: 	movl	%eax, 0x54(%rsp)
    0000009e: 	callq	clock@PLT # Offset: 158
    000000a3: 	movq	%rax, start_time(%rip)
    000000aa: 	movl	iterations(%rip), %eax
    000000b0: 	movl	%eax, 0x3c(%rsp)
    000000b4: 	testl	%eax, %eax
    000000b6: 	jle	.Ltmp1630 # Offset: 182
    000000bc: 	movl	0x44(%rsp), %eax
    000000c0: 	movslq	%ebx, %rbx
    000000c3: 	movl	$0x0, 0x38(%rsp)
    000000cb: 	movq	%rbx, 0x8(%rsp)
    000000d0: 	movl	0x1c(%rsp), %ebx
    000000d4: 	subl	$0x1, %eax
    000000d7: 	movl	%eax, 0x18(%rsp)
    000000db: 	movl	0x50(%rsp), %eax
    000000df: 	addl	%ebx, %ebx
    000000e1: 	movl	%ebx, 0x40(%rsp)
    000000e5: 	leal	-0x4(%rax), %ecx
    000000e8: 	movl	%eax, %ebx
    000000ea: 	leal	-0x6(%rax), %eax
    000000ed: 	shrl	$0x2, %eax
    000000f0: 	movl	%ecx, 0x30(%rsp)
    000000f4: 	movl	%eax, %edx
    000000f6: 	leal	0x5(,%rax,4), %eax
    000000fd: 	movl	%eax, 0x34(%rsp)
    00000101: 	leaq	(,%rdx,4), %rcx
    00000109: 	leal	-0x1(%rbx), %eax
    0000010c: 	movq	%rcx, 0x28(%rsp)
    00000111: 	movl	%eax, 0x14(%rsp)
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp1643:
    00000118: 	cmpl	$0x1, 0x18(%rsp)
    0000011d: 	jle	.Ltmp1631 # Offset: 285
    00000123: 	leaq	0x20(%r15), %rax
    00000127: 	movl	0x40(%rsp), %r13d
    0000012c: 	movl	0x1c(%rsp), %ebp
    00000130: 	xorl	%r12d, %r12d
    00000133: 	movl	$0x1, 0x10(%rsp)
    0000013b: 	movq	%rax, 0x20(%rsp)
.Ltmp1635:
    00000140: 	addl	$0x1, 0x10(%rsp)
    00000145: 	cmpl	$0x1, 0x30(%rsp)
    0000014a: 	movl	$0x1, %ecx
    0000014f: 	jle	.Ltmp1632 # Offset: 335
    00000155: 	movslq	%ebp, %rax
    00000158: 	movslq	%r12d, %rdx
    0000015b: 	movq	0x20(%rsp), %rbx
    00000160: 	leaq	(,%rax,8), %r8
    00000168: 	leaq	(%r14,%rdx,8), %r11
    0000016c: 	movslq	%r13d, %rdx
    0000016f: 	addq	0x28(%rsp), %rax
    00000174: 	leaq	(%r15,%r8), %r9
    00000178: 	leaq	(%r14,%rdx,8), %r10
    0000017c: 	addq	%r14, %r8
    0000017f: 	leaq	(%rbx,%rax,8), %rbx
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1633:
    00000188: 	movq	0x10(%r8), %rdi
    0000018c: 	movq	0x18(%r8), %rax
    00000190: 	movq	(%r8), %rcx
    00000193: 	addq	0x8(%r11), %rcx
    00000197: 	movq	0x8(%r8), %rdx
    0000019b: 	addq	%rdi, %rcx
    0000019e: 	addq	0x10(%r11), %rdx
    000001a2: 	addq	0x18(%r11), %rdi
    000001a6: 	addq	0x20(%r8), %rdi
    000001aa: 	addq	%rax, %rdx
    000001ad: 	addq	0x18(%r10), %rdi
    000001b1: 	addq	0x20(%r11), %rax
    000001b5: 	leaq	0x5(%rdi), %rsi
    000001b9: 	addq	0x28(%r8), %rax
    000001bd: 	addq	$0x2, %rdi
    000001c1: 	movdqu	0x18(%r9), %xmm3
    000001c7: 	cmovnsq	%rdi, %rsi
    000001cb: 	movq	0x18(%r9), %rdi
    000001cf: 	addq	0x20(%r10), %rax
    000001d3: 	movdqu	0x8(%r9), %xmm5
    000001d9: 	sarq	$0x2, %rsi
    000001dd: 	subq	%rdi, %rsi
    000001e0: 	movq	0x20(%r9), %rdi
    000001e4: 	imulq	$0x71, %rsi, %rsi
    000001e8: 	sarq	$0x6, %rsi
    000001ec: 	movq	%rsi, %xmm0
    000001f1: 	leaq	0x5(%rax), %rsi
    000001f5: 	addq	$0x2, %rax
    000001f9: 	cmovsq	%rsi, %rax
    000001fd: 	addq	0x8(%r10), %rcx
    00000201: 	sarq	$0x2, %rax
    00000205: 	subq	%rdi, %rax
    00000208: 	imulq	$0x71, %rax, %rax
    0000020c: 	sarq	$0x6, %rax
    00000210: 	movq	%rax, %xmm2
    00000215: 	leaq	0x5(%rcx), %rax
    00000219: 	addq	$0x2, %rcx
    0000021d: 	cmovnsq	%rcx, %rax
    00000221: 	movq	0x8(%r9), %rcx
    00000225: 	addq	0x10(%r10), %rdx
    00000229: 	punpcklqdq	%xmm2, %xmm0
    0000022d: 	paddq	%xmm3, %xmm0
    00000231: 	sarq	$0x2, %rax
    00000235: 	movups	%xmm0, 0x18(%r9)
    0000023a: 	subq	%rcx, %rax
    0000023d: 	imulq	$0x71, %rax, %rax
    00000241: 	sarq	$0x6, %rax
    00000245: 	movq	%rax, %xmm1
    0000024a: 	leaq	0x5(%rdx), %rax
    0000024e: 	addq	$0x2, %rdx
    00000252: 	cmovnsq	%rdx, %rax
    00000256: 	movq	0x10(%r9), %rdx
    0000025a: 	addq	$0x20, %r9
    0000025e: 	addq	$0x20, %r11
    00000262: 	addq	$0x20, %r8
    00000266: 	addq	$0x20, %r10
    0000026a: 	sarq	$0x2, %rax
    0000026e: 	subq	%rdx, %rax
    00000271: 	imulq	$0x71, %rax, %rax
    00000275: 	sarq	$0x6, %rax
    00000279: 	movq	%rax, %xmm4
    0000027e: 	punpcklqdq	%xmm4, %xmm1
    00000282: 	paddq	%xmm5, %xmm1
    00000286: 	movups	%xmm1, -0x18(%r9)
    0000028b: 	cmpq	%rbx, %r9
    0000028e: 	jne	.Ltmp1633 # Offset: 654
    00000294: 	movl	0x34(%rsp), %ecx
.Ltmp1632:
    00000298: 	cmpl	0x14(%rsp), %ecx
    0000029c: 	jge	.Ltmp1634 # Offset: 668
    000002a2: 	leal	0x1(%rcx), %edi
    000002a5: 	leal	(%r12,%rcx), %eax
    000002a9: 	movl	0x14(%rsp), %ebx
    000002ad: 	leal	-0x1(%rbp,%rcx), %edx
    000002b1: 	leal	(%rdi,%rbp), %esi
    000002b4: 	cltq
    000002b6: 	movslq	%edx, %rdx
    000002b9: 	movslq	%esi, %rsi
    000002bc: 	leal	(%rbp,%rcx), %r8d
    000002c1: 	movq	(%r14,%rdx,8), %rdx
    000002c5: 	shlq	$0x3, %rsi
    000002c9: 	addq	(%r14,%rax,8), %rdx
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	leal	(%r13,%rcx), %eax
    000002d5: 	leaq	(%r14,%rsi), %r10
    000002d9: 	cltq
    000002db: 	addq	(%r10), %rdx
    000002de: 	leaq	(%r15,%r8,8), %r9
    000002e2: 	addq	(%r14,%rax,8), %rdx
    000002e6: 	leaq	0x5(%rdx), %rax
    000002ea: 	addq	$0x2, %rdx
    000002ee: 	cmovnsq	%rdx, %rax
    000002f2: 	sarq	$0x2, %rax
    000002f6: 	subq	(%r9), %rax
    000002f9: 	imulq	$0x71, %rax, %rax
    000002fd: 	sarq	$0x6, %rax
    00000301: 	addq	(%r9), %rax
    00000304: 	movq	%rax, (%r9)
    00000307: 	cmpl	%ebx, %edi
    00000309: 	jge	.Ltmp1634 # Offset: 777
    0000030f: 	leal	(%rdi,%r12), %edx
    00000313: 	movq	(%r14,%r8,8), %rax
    00000317: 	leal	0x2(%rcx), %r8d
    0000031b: 	addl	%r13d, %edi
    0000031e: 	movslq	%edx, %rdx
    00000321: 	movslq	%edi, %rdi
    00000324: 	addq	%r15, %rsi
    00000327: 	addq	(%r14,%rdx,8), %rax
    0000032b: 	leal	(%rbp,%r8), %edx
    00000330: 	movslq	%edx, %rdx
    00000333: 	shlq	$0x3, %rdx
    00000337: 	leaq	(%r14,%rdx), %r9
    0000033b: 	addq	(%r9), %rax
    0000033e: 	addq	(%r14,%rdi,8), %rax
    00000342: 	movq	%rax, %rdi
    00000345: 	leaq	0x5(%rax), %rax
    00000349: 	addq	$0x2, %rdi
    0000034d: 	cmovnsq	%rdi, %rax
    00000351: 	sarq	$0x2, %rax
    00000355: 	subq	(%rsi), %rax
    00000358: 	imulq	$0x71, %rax, %rax
    0000035c: 	sarq	$0x6, %rax
    00000360: 	addq	(%rsi), %rax
    00000363: 	movq	%rax, (%rsi)
    00000366: 	cmpl	%r8d, %ebx
    00000369: 	jle	.Ltmp1634 # Offset: 873
    0000036f: 	leal	(%r12,%r8), %esi
    00000373: 	movq	(%r10), %rax
    00000376: 	addl	%r13d, %r8d
    00000379: 	addq	%r15, %rdx
    0000037c: 	movslq	%esi, %rsi
    0000037f: 	movslq	%r8d, %r8
    00000382: 	addq	(%r14,%rsi,8), %rax
    00000386: 	leal	0x3(%rcx), %esi
    00000389: 	leal	(%rbp,%rsi), %edi
    0000038d: 	movslq	%edi, %rdi
    00000390: 	addq	(%r14,%rdi,8), %rax
    00000394: 	addq	(%r14,%r8,8), %rax
    00000398: 	leaq	(,%rdi,8), %r10
    000003a0: 	leaq	0x5(%rax), %rdi
    000003a4: 	addq	$0x2, %rax
    000003a8: 	cmovsq	%rdi, %rax
    000003ac: 	sarq	$0x2, %rax
    000003b0: 	subq	(%rdx), %rax
    000003b3: 	imulq	$0x71, %rax, %rax
    000003b7: 	sarq	$0x6, %rax
    000003bb: 	addq	(%rdx), %rax
    000003be: 	movq	%rax, (%rdx)
    000003c1: 	cmpl	%esi, %ebx
    000003c3: 	jle	.Ltmp1634 # Offset: 963
    000003c5: 	leal	(%r12,%rsi), %eax
    000003c9: 	movq	(%r9), %rdx
    000003cc: 	addl	%r13d, %esi
    000003cf: 	addq	%r15, %r10
    000003d2: 	cltq
    000003d4: 	movslq	%esi, %rsi
    000003d7: 	addq	(%r14,%rax,8), %rdx
    000003db: 	leal	0x4(%rbp,%rcx), %eax
    000003df: 	cltq
    000003e1: 	addq	(%r14,%rax,8), %rdx
    000003e5: 	addq	(%r14,%rsi,8), %rdx
    000003e9: 	leaq	0x5(%rdx), %rax
    000003ed: 	addq	$0x2, %rdx
    000003f1: 	cmovnsq	%rdx, %rax
    000003f5: 	sarq	$0x2, %rax
    000003f9: 	subq	(%r10), %rax
    000003fc: 	imulq	$0x71, %rax, %rax
    00000400: 	sarq	$0x6, %rax
    00000404: 	addq	(%r10), %rax
    00000407: 	movq	%rax, (%r10)
.Ltmp1634:
    0000040a: 	movl	0x1c(%rsp), %eax
    0000040e: 	movl	0x10(%rsp), %ebx
    00000412: 	addl	%eax, %r12d
    00000415: 	addl	%eax, %ebp
    00000417: 	addl	%eax, %r13d
    0000041a: 	cmpl	%ebx, 0x18(%rsp)
    0000041e: 	jne	.Ltmp1635 # Offset: 1054
.Ltmp1631:
    00000424: 	cmpq	$0x0, 0x8(%rsp)
    0000042a: 	je	.Ltmp1636 # Offset: 1066
    00000430: 	xorl	%r12d, %r12d
    00000433: 	xorl	%eax, %eax
    00000435: 	nopl	(%rax) # Size: 3
.Ltmp1638:
    00000438: 	movq	(%r14,%rax,8), %rcx
    0000043c: 	movq	(%r15,%rax,8), %rdx
    00000440: 	movq	%rcx, %rsi
    00000443: 	subq	%rdx, %rsi
    00000446: 	js	.Ltmp1637 # Offset: 1094
    00000448: 	addq	%rsi, %r12
    0000044b: 	addq	$0x1, %rax
    0000044f: 	cmpq	%rax, 0x8(%rsp)
    00000454: 	jne	.Ltmp1638 # Offset: 1108
.Ltmp1644:
    00000456: 	xorl	%ebp, %ebp
    00000458: 	xorl	%eax, %eax
    0000045a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1640:
    00000460: 	movq	(%r14,%rax,8), %rcx
    00000464: 	movq	(%r15,%rax,8), %rdx
    00000468: 	movq	%rcx, %rsi
    0000046b: 	subq	%rdx, %rsi
    0000046e: 	js	.Ltmp1639 # Offset: 1134
    00000470: 	cmpq	%rsi, %rbp
    00000473: 	cmovlq	%rsi, %rbp
    00000477: 	addq	$0x1, %rax
    0000047b: 	cmpq	%rax, 0x8(%rsp)
    00000480: 	jne	.Ltmp1640 # Offset: 1152
.Ltmp1645:
    00000482: 	movl	0x38(%rsp), %eax
    00000486: 	cmpl	%eax, 0xd0(%rsp)
    0000048d: 	jge	.Ltmp1641 # Offset: 1165
    0000048f: 	testq	%rbp, %rbp
    00000492: 	jle	.Ltmp1642 # Offset: 1170
    00000498: 	cmpq	$0x9, %r12
    0000049c: 	jle	.Ltmp1642 # Offset: 1180
.Ltmp1641:
    0000049e: 	addl	$0x1, 0x38(%rsp)
    000004a3: 	movq	%r15, %rax
    000004a6: 	movl	0x38(%rsp), %ebx
    000004aa: 	movq	%r14, %r15
    000004ad: 	cmpl	0x3c(%rsp), %ebx
    000004b1: 	je	.Ltmp1642 # Offset: 1201
    000004b3: 	movq	%rax, %r14
    000004b6: 	jmp	.Ltmp1643 # Offset: 1206
    000004bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1637:
    000004c0: 	subq	%rcx, %rdx
    000004c3: 	addq	$0x1, %rax
    000004c7: 	addq	%rdx, %r12
    000004ca: 	cmpq	%rax, 0x8(%rsp)
    000004cf: 	jne	.Ltmp1638 # Offset: 1231
    000004d5: 	jmp	.Ltmp1644 # Offset: 1237
    000004da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1639:
    000004e0: 	subq	%rcx, %rdx
    000004e3: 	cmpq	%rdx, %rbp
    000004e6: 	cmovlq	%rdx, %rbp
    000004ea: 	addq	$0x1, %rax
    000004ee: 	cmpq	%rax, 0x8(%rsp)
    000004f3: 	jne	.Ltmp1640 # Offset: 1267
    000004f9: 	jmp	.Ltmp1645 # Offset: 1273
.Ltmp1636:
    000004fb: 	movl	0x38(%rsp), %eax
    000004ff: 	cmpl	%eax, 0xd0(%rsp)
    00000506: 	jl	.Ltmp1646 # Offset: 1286
    00000508: 	xorl	%r12d, %r12d
    0000050b: 	xorl	%ebp, %ebp
    0000050d: 	jmp	.Ltmp1641 # Offset: 1293
.Ltmp1646:
    0000050f: 	xorl	%ebp, %ebp
    00000511: 	xorl	%r12d, %r12d
.Ltmp1642:
    00000514: 	callq	clock@PLT # Offset: 1300
    00000519: 	movl	0x44(%rsp), %ecx
    0000051d: 	pxor	%xmm0, %xmm0
    00000521: 	movq	0x58(%rsp), %r13
    00000526: 	movq	%rax, end_time(%rip)
    0000052d: 	subq	start_time(%rip), %rax
    00000534: 	cvtsi2sd	%rax, %xmm0
    00000539: 	movl	%ecx, %eax
    0000053b: 	divsd	DATAat0x49520(%rip), %xmm0
    00000543: 	movq	%xmm0, %rbx
    00000548: 	shrl	$0x1f, %eax
    0000054b: 	addl	%ecx, %eax
    0000054d: 	movl	0x50(%rsp), %ecx
    00000551: 	sarl	%eax
    00000553: 	movl	%ecx, %edx
    00000555: 	imull	%ecx, %eax
    00000558: 	shrl	$0x1f, %edx
    0000055b: 	addl	%ecx, %edx
    0000055d: 	sarl	%edx
    0000055f: 	addl	%edx, %eax
    00000561: 	cltq
    00000563: 	subq	(%r15,%rax,8), %r13
    00000567: 	movl	0x38(%rsp), %eax
    0000056b: 	cmpl	%eax, iterations(%rip)
    00000571: 	jg	.Ltmp1647 # Offset: 1393
    00000573: 	cmpq	$0xa, %r12
    00000577: 	jle	.Ltmp1647 # Offset: 1399
    00000579: 	cmpq	$0x1, %rbp
    0000057d: 	jle	.Ltmp1647 # Offset: 1405
    0000057f: 	movq	0x48(%rsp), %rax
    00000584: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000058b: 	movq	%r14, %rdi
    0000058e: 	movq	0x8(%rax), %rdx
    00000592: 	movq	(%rax), %rsi
    00000595: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1429
    0000059a: 	movl	$0x11, %edx
    0000059f: 	leaq	DATAat0x49199(%rip), %rsi
    000005a6: 	movq	%rax, %rdi
    000005a9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1449
    000005ae: 	jmp	.Ltmp1648 # Offset: 1454
.Ltmp1647:
    000005b0: 	movq	0x48(%rsp), %rax
    000005b5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000005bc: 	movq	%r14, %rdi
    000005bf: 	movq	0x8(%rax), %rdx
    000005c3: 	movq	(%rax), %rsi
    000005c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1478
    000005cb: 	movl	$0xa, %edx
    000005d0: 	leaq	DATAat0x491ab(%rip), %rsi
    000005d7: 	movq	%rax, %rdi
    000005da: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1498
.Ltmp1648:
    000005df: 	movl	$0x4, %edx
    000005e4: 	leaq	DATAat0x491b6(%rip), %rsi
    000005eb: 	movq	%r14, %rdi
    000005ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1518
    000005f3: 	movl	0x38(%rsp), %esi
    000005f7: 	movq	%r14, %rdi
    000005fa: 	callq	_ZNSolsEi@PLT # Offset: 1530
    000005ff: 	movl	$0xb, %edx
    00000604: 	leaq	DATAat0x491bb(%rip), %rsi
    0000060b: 	movq	%rax, %rdi
    0000060e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1550
    00000613: 	movl	$0xa, %edx
    00000618: 	leaq	DATAat0x491c7(%rip), %rsi
    0000061f: 	movq	%r14, %rdi
    00000622: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1570
    00000627: 	movq	%r12, %rsi
    0000062a: 	movq	%r14, %rdi
    0000062d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1581
    00000632: 	movl	$0x7, %edx
    00000637: 	leaq	DATAat0x491d2(%rip), %rsi
    0000063e: 	movq	%rax, %r12
    00000641: 	movq	%rax, %rdi
    00000644: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1604
    00000649: 	movq	%rbp, %rsi
    0000064c: 	movq	%r12, %rdi
    0000064f: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1615
    00000654: 	movl	$0x10, %edx
    00000659: 	leaq	DATAat0x491da(%rip), %rsi
    00000660: 	movq	%rax, %rbp
    00000663: 	movq	%rax, %rdi
    00000666: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1638
    0000066b: 	movq	%rbp, %rdi
    0000066e: 	movq	%r13, %rsi
    00000671: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1649
    00000676: 	movl	$0x8, %edx
    0000067b: 	leaq	DATAat0x491eb(%rip), %rsi
    00000682: 	movq	%rax, %rbp
    00000685: 	movq	%rax, %rdi
    00000688: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1672
    0000068d: 	movq	%rbx, %xmm0
    00000692: 	movq	%rbp, %rdi
    00000695: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1685
    0000069a: 	movl	$0x2, %edx
    0000069f: 	leaq	DATAat0x491f4(%rip), %rsi
    000006a6: 	movq	%rax, %rdi
    000006a9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1705
    000006ae: 	movl	0x54(%rsp), %eax
    000006b2: 	movl	%eax, iterations(%rip)
    000006b8: 	movq	0x88(%rsp), %rax
    000006c0: 	subq	%fs:0x28, %rax
    000006c9: 	jne	.Ltmp1649 # Offset: 1737
    000006cb: 	addq	$0x98, %rsp
    000006d2: 	popq	%rbx
    000006d3: 	popq	%rbp
    000006d4: 	popq	%r12
    000006d6: 	popq	%r13
    000006d8: 	popq	%r14
    000006da: 	popq	%r15
    000006dc: 	retq # Offset: 1756
.Ltmp1630:
    000006dd: 	movl	$0x0, 0x38(%rsp)
    000006e5: 	xorl	%ebp, %ebp
    000006e7: 	xorl	%r12d, %r12d
    000006ea: 	jmp	.Ltmp1642 # Offset: 1770
.Ltmp1649:
    000006ef: 	callq	__stack_chk_fail@PLT # Offset: 1775
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll21jacobi_sor2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x2c740
  Size        : 0x704
  MaxSize     : 0x710
  Offset      : 0x2c740
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%r8d, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%ecx, %r13d
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%edx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movl	%ebp, %esi
    0000001b: 	movq	%rdi, %rbx
    0000001e: 	subq	$0x98, %rsp
    00000025: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002d: 	movl	%edx, 0x44(%rsp)
    00000031: 	movl	%r13d, %edx
    00000034: 	movl	%ecx, 0x50(%rsp)
    00000038: 	leaq	0x60(%rsp), %rcx
    0000003d: 	movq	%r9, 0x48(%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0x88(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x60(%rsp)
    0000005a: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000062: 	movaps	%xmm0, 0x70(%rsp)
    00000067: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 103
    0000006c: 	movl	%ebp, %edi
    0000006e: 	imull	%r13d, %edi
    00000072: 	movq	%rax, 0x58(%rsp)
    00000077: 	movl	%edi, %ebp
    00000079: 	testl	%edi, %edi
    0000007b: 	jle	.Ltmp1650 # Offset: 123
    0000007d: 	movslq	%edi, %rdx
    00000080: 	movq	%rbx, %rsi
    00000083: 	movq	%r15, %rdi
    00000086: 	shlq	$0x3, %rdx
    0000008a: 	callq	memmove@PLT # Offset: 138
.Ltmp1650:
    0000008f: 	movl	iterations(%rip), %eax
    00000095: 	movl	$0x2710, iterations(%rip)
    0000009f: 	movl	%eax, 0x54(%rsp)
    000000a3: 	callq	clock@PLT # Offset: 163
    000000a8: 	movq	%rax, start_time(%rip)
    000000af: 	movl	iterations(%rip), %eax
    000000b5: 	movl	%eax, 0x3c(%rsp)
    000000b9: 	testl	%eax, %eax
    000000bb: 	jle	.Ltmp1651 # Offset: 187
    000000c1: 	movl	0x44(%rsp), %eax
    000000c5: 	movl	0x50(%rsp), %edi
    000000c9: 	movl	$0x0, 0x38(%rsp)
    000000d1: 	subl	$0x1, %eax
    000000d4: 	movl	%eax, 0x1c(%rsp)
    000000d8: 	leal	-0x4(%rdi), %eax
    000000db: 	movl	%eax, 0x30(%rsp)
    000000df: 	movslq	%ebp, %rax
    000000e2: 	movq	%rax, 0x8(%rsp)
    000000e7: 	leal	(%r14,%r14), %eax
    000000eb: 	movl	%eax, 0x40(%rsp)
    000000ef: 	leal	-0x6(%rdi), %eax
    000000f2: 	shrl	$0x2, %eax
    000000f5: 	movl	%eax, %edx
    000000f7: 	leal	0x5(,%rax,4), %eax
    000000fe: 	movl	%eax, 0x34(%rsp)
    00000102: 	leaq	(,%rdx,4), %rsi
    0000010a: 	leal	-0x1(%rdi), %eax
    0000010d: 	movq	%rsi, 0x28(%rsp)
    00000112: 	movl	%eax, 0x18(%rsp)
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1664:
    00000120: 	cmpl	$0x1, 0x1c(%rsp)
    00000125: 	jle	.Ltmp1652 # Offset: 293
    0000012b: 	leaq	0x20(%r15), %rax
    0000012f: 	movl	0x40(%rsp), %r13d
    00000134: 	movl	%r14d, %ebp
    00000137: 	xorl	%r12d, %r12d
    0000013a: 	movl	$0x1, 0x14(%rsp)
    00000142: 	movq	%rax, 0x20(%rsp)
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1656:
    00000150: 	addl	$0x1, 0x14(%rsp)
    00000155: 	cmpl	$0x1, 0x30(%rsp)
    0000015a: 	movl	$0x1, %ecx
    0000015f: 	jle	.Ltmp1653 # Offset: 351
    00000165: 	movslq	%ebp, %rax
    00000168: 	movslq	%r12d, %rsi
    0000016b: 	movq	0x20(%rsp), %r11
    00000170: 	leaq	(,%rax,8), %rdx
    00000178: 	leaq	(%rbx,%rsi,8), %rdi
    0000017c: 	movslq	%r13d, %rsi
    0000017f: 	addq	0x28(%rsp), %rax
    00000184: 	leaq	(%r15,%rdx), %rcx
    00000188: 	leaq	(%rbx,%rsi,8), %rsi
    0000018c: 	addq	%rbx, %rdx
    0000018f: 	leaq	(%r11,%rax,8), %r11
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1654:
    00000198: 	movq	0x10(%rdx), %rax
    0000019c: 	movq	0x18(%rdi), %r10
    000001a0: 	movq	0x18(%rdx), %r8
    000001a4: 	movdqu	0x18(%rcx), %xmm3
    000001a9: 	addq	%rax, %r10
    000001ac: 	addq	0x20(%rdx), %r10
    000001b0: 	addq	0x18(%rsi), %r10
    000001b4: 	leaq	0x5(%r10), %r9
    000001b8: 	addq	$0x2, %r10
    000001bc: 	movdqu	0x8(%rcx), %xmm5
    000001c1: 	cmovnsq	%r10, %r9
    000001c5: 	movq	0x18(%rcx), %r10
    000001c9: 	sarq	$0x2, %r9
    000001cd: 	subq	%r10, %r9
    000001d0: 	imulq	$0x71, %r9, %r9
    000001d4: 	sarq	$0x6, %r9
    000001d8: 	movq	%r9, %xmm0
    000001dd: 	movq	0x20(%rdi), %r9
    000001e1: 	addq	%r8, %r9
    000001e4: 	addq	0x28(%rdx), %r9
    000001e8: 	addq	0x20(%rsi), %r9
    000001ec: 	leaq	0x5(%r9), %r10
    000001f0: 	addq	$0x2, %r9
    000001f4: 	cmovnsq	%r9, %r10
    000001f8: 	movq	0x20(%rcx), %r9
    000001fc: 	sarq	$0x2, %r10
    00000200: 	subq	%r9, %r10
    00000203: 	movq	(%rdx), %r9
    00000206: 	addq	0x8(%rdi), %r9
    0000020a: 	imulq	$0x71, %r10, %r10
    0000020e: 	addq	%rax, %r9
    00000211: 	addq	0x8(%rsi), %r9
    00000215: 	leaq	0x5(%r9), %rax
    00000219: 	sarq	$0x6, %r10
    0000021d: 	addq	$0x2, %r9
    00000221: 	cmovnsq	%r9, %rax
    00000225: 	movq	0x8(%rcx), %r9
    00000229: 	movq	%r10, %xmm2
    0000022e: 	punpcklqdq	%xmm2, %xmm0
    00000232: 	sarq	$0x2, %rax
    00000236: 	paddq	%xmm3, %xmm0
    0000023a: 	subq	%r9, %rax
    0000023d: 	imulq	$0x71, %rax, %rax
    00000241: 	sarq	$0x6, %rax
    00000245: 	movq	%rax, %xmm1
    0000024a: 	movq	0x8(%rdx), %rax
    0000024e: 	addq	0x10(%rdi), %rax
    00000252: 	addq	%rax, %r8
    00000255: 	addq	0x10(%rsi), %r8
    00000259: 	movups	%xmm0, 0x18(%rcx)
    0000025d: 	leaq	0x5(%r8), %rax
    00000261: 	addq	$0x2, %r8
    00000265: 	cmovnsq	%r8, %rax
    00000269: 	movq	0x10(%rcx), %r8
    0000026d: 	addq	$0x20, %rcx
    00000271: 	addq	$0x20, %rdi
    00000275: 	addq	$0x20, %rdx
    00000279: 	addq	$0x20, %rsi
    0000027d: 	sarq	$0x2, %rax
    00000281: 	subq	%r8, %rax
    00000284: 	imulq	$0x71, %rax, %rax
    00000288: 	sarq	$0x6, %rax
    0000028c: 	movq	%rax, %xmm4
    00000291: 	punpcklqdq	%xmm4, %xmm1
    00000295: 	paddq	%xmm5, %xmm1
    00000299: 	movups	%xmm1, -0x18(%rcx)
    0000029d: 	cmpq	%r11, %rcx
    000002a0: 	jne	.Ltmp1654 # Offset: 672
    000002a6: 	movl	0x34(%rsp), %ecx
.Ltmp1653:
    000002aa: 	cmpl	0x18(%rsp), %ecx
    000002ae: 	jge	.Ltmp1655 # Offset: 686
    000002b4: 	leal	0x1(%rcx), %edi
    000002b7: 	leal	(%r12,%rcx), %eax
    000002bb: 	movl	0x18(%rsp), %r11d
    000002c0: 	leal	-0x1(%rbp,%rcx), %edx
    000002c4: 	leal	(%rdi,%rbp), %esi
    000002c7: 	cltq
    000002c9: 	movslq	%edx, %rdx
    000002cc: 	movslq	%esi, %rsi
    000002cf: 	leal	(%rbp,%rcx), %r8d
    000002d4: 	movq	(%rbx,%rdx,8), %rdx
    000002d8: 	shlq	$0x3, %rsi
    000002dc: 	addq	(%rbx,%rax,8), %rdx
    000002e0: 	movslq	%r8d, %r8
    000002e3: 	leal	(%r13,%rcx), %eax
    000002e8: 	leaq	(%rbx,%rsi), %r10
    000002ec: 	cltq
    000002ee: 	addq	(%r10), %rdx
    000002f1: 	leaq	(%r15,%r8,8), %r9
    000002f5: 	addq	(%rbx,%rax,8), %rdx
    000002f9: 	leaq	0x5(%rdx), %rax
    000002fd: 	addq	$0x2, %rdx
    00000301: 	cmovnsq	%rdx, %rax
    00000305: 	sarq	$0x2, %rax
    00000309: 	subq	(%r9), %rax
    0000030c: 	imulq	$0x71, %rax, %rax
    00000310: 	sarq	$0x6, %rax
    00000314: 	addq	(%r9), %rax
    00000317: 	movq	%rax, (%r9)
    0000031a: 	cmpl	%r11d, %edi
    0000031d: 	jge	.Ltmp1655 # Offset: 797
    00000323: 	leal	(%rdi,%r12), %edx
    00000327: 	movq	(%rbx,%r8,8), %rax
    0000032b: 	leal	0x2(%rcx), %r8d
    0000032f: 	addl	%r13d, %edi
    00000332: 	movslq	%edx, %rdx
    00000335: 	movslq	%edi, %rdi
    00000338: 	addq	%r15, %rsi
    0000033b: 	addq	(%rbx,%rdx,8), %rax
    0000033f: 	leal	(%rbp,%r8), %edx
    00000344: 	movslq	%edx, %rdx
    00000347: 	shlq	$0x3, %rdx
    0000034b: 	leaq	(%rbx,%rdx), %r9
    0000034f: 	addq	(%r9), %rax
    00000352: 	addq	(%rbx,%rdi,8), %rax
    00000356: 	movq	%rax, %rdi
    00000359: 	leaq	0x5(%rax), %rax
    0000035d: 	addq	$0x2, %rdi
    00000361: 	cmovnsq	%rdi, %rax
    00000365: 	sarq	$0x2, %rax
    00000369: 	subq	(%rsi), %rax
    0000036c: 	imulq	$0x71, %rax, %rax
    00000370: 	sarq	$0x6, %rax
    00000374: 	addq	(%rsi), %rax
    00000377: 	movq	%rax, (%rsi)
    0000037a: 	cmpl	%r8d, %r11d
    0000037d: 	jle	.Ltmp1655 # Offset: 893
    00000383: 	leal	(%r12,%r8), %esi
    00000387: 	movq	(%r10), %rax
    0000038a: 	addl	%r13d, %r8d
    0000038d: 	addq	%r15, %rdx
    00000390: 	movslq	%esi, %rsi
    00000393: 	movslq	%r8d, %r8
    00000396: 	addq	(%rbx,%rsi,8), %rax
    0000039a: 	leal	0x3(%rcx), %esi
    0000039d: 	leal	(%rbp,%rsi), %edi
    000003a1: 	movslq	%edi, %rdi
    000003a4: 	addq	(%rbx,%rdi,8), %rax
    000003a8: 	addq	(%rbx,%r8,8), %rax
    000003ac: 	leaq	(,%rdi,8), %r10
    000003b4: 	leaq	0x5(%rax), %rdi
    000003b8: 	addq	$0x2, %rax
    000003bc: 	cmovsq	%rdi, %rax
    000003c0: 	sarq	$0x2, %rax
    000003c4: 	subq	(%rdx), %rax
    000003c7: 	imulq	$0x71, %rax, %rax
    000003cb: 	sarq	$0x6, %rax
    000003cf: 	addq	(%rdx), %rax
    000003d2: 	movq	%rax, (%rdx)
    000003d5: 	cmpl	%esi, %r11d
    000003d8: 	jle	.Ltmp1655 # Offset: 984
    000003da: 	leal	(%r12,%rsi), %eax
    000003de: 	movq	(%r9), %rdx
    000003e1: 	addl	%r13d, %esi
    000003e4: 	addq	%r15, %r10
    000003e7: 	cltq
    000003e9: 	movslq	%esi, %rsi
    000003ec: 	addq	(%rbx,%rax,8), %rdx
    000003f0: 	leal	0x4(%rbp,%rcx), %eax
    000003f4: 	cltq
    000003f6: 	addq	(%rbx,%rax,8), %rdx
    000003fa: 	addq	(%rbx,%rsi,8), %rdx
    000003fe: 	leaq	0x5(%rdx), %rax
    00000402: 	addq	$0x2, %rdx
    00000406: 	cmovnsq	%rdx, %rax
    0000040a: 	sarq	$0x2, %rax
    0000040e: 	subq	(%r10), %rax
    00000411: 	imulq	$0x71, %rax, %rax
    00000415: 	sarq	$0x6, %rax
    00000419: 	addq	(%r10), %rax
    0000041c: 	movq	%rax, (%r10)
.Ltmp1655:
    0000041f: 	movl	0x14(%rsp), %edi
    00000423: 	addl	%r14d, %r12d
    00000426: 	addl	%r14d, %ebp
    00000429: 	addl	%r14d, %r13d
    0000042c: 	cmpl	%edi, 0x1c(%rsp)
    00000430: 	jne	.Ltmp1656 # Offset: 1072
.Ltmp1652:
    00000436: 	cmpq	$0x0, 0x8(%rsp)
    0000043c: 	je	.Ltmp1657 # Offset: 1084
    00000442: 	xorl	%r12d, %r12d
    00000445: 	xorl	%eax, %eax
    00000447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1659:
    00000450: 	movq	(%rbx,%rax,8), %rcx
    00000454: 	movq	(%r15,%rax,8), %rdx
    00000458: 	movq	%rcx, %rsi
    0000045b: 	subq	%rdx, %rsi
    0000045e: 	js	.Ltmp1658 # Offset: 1118
    00000460: 	addq	%rsi, %r12
    00000463: 	addq	$0x1, %rax
    00000467: 	cmpq	%rax, 0x8(%rsp)
    0000046c: 	jne	.Ltmp1659 # Offset: 1132
.Ltmp1665:
    0000046e: 	xorl	%ebp, %ebp
    00000470: 	xorl	%eax, %eax
    00000472: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1661:
    00000478: 	movq	(%rbx,%rax,8), %rcx
    0000047c: 	movq	(%r15,%rax,8), %rdx
    00000480: 	movq	%rcx, %rsi
    00000483: 	subq	%rdx, %rsi
    00000486: 	js	.Ltmp1660 # Offset: 1158
    00000488: 	cmpq	%rsi, %rbp
    0000048b: 	cmovlq	%rsi, %rbp
    0000048f: 	addq	$0x1, %rax
    00000493: 	cmpq	%rax, 0x8(%rsp)
    00000498: 	jne	.Ltmp1661 # Offset: 1176
.Ltmp1666:
    0000049a: 	movl	0x38(%rsp), %eax
    0000049e: 	cmpl	%eax, 0xd0(%rsp)
    000004a5: 	jge	.Ltmp1662 # Offset: 1189
    000004a7: 	testq	%rbp, %rbp
    000004aa: 	jle	.Ltmp1663 # Offset: 1194
    000004ac: 	cmpq	$0x9, %r12
    000004b0: 	jle	.Ltmp1663 # Offset: 1200
.Ltmp1662:
    000004b2: 	addl	$0x1, 0x38(%rsp)
    000004b7: 	movq	%r15, %rax
    000004ba: 	movl	0x38(%rsp), %edi
    000004be: 	movq	%rbx, %r15
    000004c1: 	cmpl	0x3c(%rsp), %edi
    000004c5: 	je	.Ltmp1663 # Offset: 1221
    000004c7: 	movq	%rax, %rbx
    000004ca: 	jmp	.Ltmp1664 # Offset: 1226
    000004cf: 	nop # Size: 1
.Ltmp1658:
    000004d0: 	subq	%rcx, %rdx
    000004d3: 	addq	$0x1, %rax
    000004d7: 	addq	%rdx, %r12
    000004da: 	cmpq	%rax, 0x8(%rsp)
    000004df: 	jne	.Ltmp1659 # Offset: 1247
    000004e5: 	jmp	.Ltmp1665 # Offset: 1253
    000004e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1660:
    000004f0: 	subq	%rcx, %rdx
    000004f3: 	cmpq	%rdx, %rbp
    000004f6: 	cmovlq	%rdx, %rbp
    000004fa: 	addq	$0x1, %rax
    000004fe: 	cmpq	%rax, 0x8(%rsp)
    00000503: 	jne	.Ltmp1661 # Offset: 1283
    00000509: 	jmp	.Ltmp1666 # Offset: 1289
.Ltmp1657:
    0000050b: 	movl	0x38(%rsp), %eax
    0000050f: 	cmpl	%eax, 0xd0(%rsp)
    00000516: 	jl	.Ltmp1667 # Offset: 1302
    00000518: 	xorl	%r12d, %r12d
    0000051b: 	xorl	%ebp, %ebp
    0000051d: 	jmp	.Ltmp1662 # Offset: 1309
.Ltmp1667:
    0000051f: 	xorl	%ebp, %ebp
    00000521: 	xorl	%r12d, %r12d
.Ltmp1663:
    00000524: 	callq	clock@PLT # Offset: 1316
    00000529: 	movl	0x44(%rsp), %edi
    0000052d: 	pxor	%xmm0, %xmm0
    00000531: 	movq	0x58(%rsp), %r13
    00000536: 	movq	%rax, end_time(%rip)
    0000053d: 	subq	start_time(%rip), %rax
    00000544: 	cvtsi2sd	%rax, %xmm0
    00000549: 	movl	%edi, %eax
    0000054b: 	divsd	DATAat0x49520(%rip), %xmm0
    00000553: 	movq	%xmm0, %rbx
    00000558: 	shrl	$0x1f, %eax
    0000055b: 	addl	%edi, %eax
    0000055d: 	movl	0x50(%rsp), %edi
    00000561: 	sarl	%eax
    00000563: 	movl	%edi, %edx
    00000565: 	imull	%edi, %eax
    00000568: 	shrl	$0x1f, %edx
    0000056b: 	addl	%edi, %edx
    0000056d: 	sarl	%edx
    0000056f: 	addl	%edx, %eax
    00000571: 	cltq
    00000573: 	subq	(%r15,%rax,8), %r13
    00000577: 	movl	0x38(%rsp), %eax
    0000057b: 	cmpl	%eax, iterations(%rip)
    00000581: 	jg	.Ltmp1668 # Offset: 1409
    00000583: 	cmpq	$0xa, %r12
    00000587: 	jle	.Ltmp1668 # Offset: 1415
    00000589: 	cmpq	$0x1, %rbp
    0000058d: 	jle	.Ltmp1668 # Offset: 1421
    0000058f: 	movq	0x48(%rsp), %rax
    00000594: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000059b: 	movq	%r14, %rdi
    0000059e: 	movq	0x8(%rax), %rdx
    000005a2: 	movq	(%rax), %rsi
    000005a5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1445
    000005aa: 	movl	$0x11, %edx
    000005af: 	leaq	DATAat0x49199(%rip), %rsi
    000005b6: 	movq	%rax, %rdi
    000005b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1465
    000005be: 	jmp	.Ltmp1669 # Offset: 1470
.Ltmp1668:
    000005c0: 	movq	0x48(%rsp), %rax
    000005c5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000005cc: 	movq	%r14, %rdi
    000005cf: 	movq	0x8(%rax), %rdx
    000005d3: 	movq	(%rax), %rsi
    000005d6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1494
    000005db: 	movl	$0xa, %edx
    000005e0: 	leaq	DATAat0x491ab(%rip), %rsi
    000005e7: 	movq	%rax, %rdi
    000005ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1514
.Ltmp1669:
    000005ef: 	movl	$0x4, %edx
    000005f4: 	leaq	DATAat0x491b6(%rip), %rsi
    000005fb: 	movq	%r14, %rdi
    000005fe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1534
    00000603: 	movl	0x38(%rsp), %esi
    00000607: 	movq	%r14, %rdi
    0000060a: 	callq	_ZNSolsEi@PLT # Offset: 1546
    0000060f: 	movl	$0xb, %edx
    00000614: 	leaq	DATAat0x491bb(%rip), %rsi
    0000061b: 	movq	%rax, %rdi
    0000061e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1566
    00000623: 	movl	$0xa, %edx
    00000628: 	leaq	DATAat0x491c7(%rip), %rsi
    0000062f: 	movq	%r14, %rdi
    00000632: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1586
    00000637: 	movq	%r12, %rsi
    0000063a: 	movq	%r14, %rdi
    0000063d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1597
    00000642: 	movl	$0x7, %edx
    00000647: 	leaq	DATAat0x491d2(%rip), %rsi
    0000064e: 	movq	%rax, %r12
    00000651: 	movq	%rax, %rdi
    00000654: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1620
    00000659: 	movq	%rbp, %rsi
    0000065c: 	movq	%r12, %rdi
    0000065f: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1631
    00000664: 	movl	$0x10, %edx
    00000669: 	leaq	DATAat0x491da(%rip), %rsi
    00000670: 	movq	%rax, %rbp
    00000673: 	movq	%rax, %rdi
    00000676: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1654
    0000067b: 	movq	%rbp, %rdi
    0000067e: 	movq	%r13, %rsi
    00000681: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 1665
    00000686: 	movl	$0x8, %edx
    0000068b: 	leaq	DATAat0x491eb(%rip), %rsi
    00000692: 	movq	%rax, %rbp
    00000695: 	movq	%rax, %rdi
    00000698: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1688
    0000069d: 	movq	%rbx, %xmm0
    000006a2: 	movq	%rbp, %rdi
    000006a5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1701
    000006aa: 	movl	$0x2, %edx
    000006af: 	leaq	DATAat0x491f4(%rip), %rsi
    000006b6: 	movq	%rax, %rdi
    000006b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1721
    000006be: 	movl	0x54(%rsp), %eax
    000006c2: 	movl	%eax, iterations(%rip)
    000006c8: 	movq	0x88(%rsp), %rax
    000006d0: 	subq	%fs:0x28, %rax
    000006d9: 	jne	.Ltmp1670 # Offset: 1753
    000006db: 	addq	$0x98, %rsp
    000006e2: 	popq	%rbx
    000006e3: 	popq	%rbp
    000006e4: 	popq	%r12
    000006e6: 	popq	%r13
    000006e8: 	popq	%r14
    000006ea: 	popq	%r15
    000006ec: 	retq # Offset: 1772
.Ltmp1651:
    000006ed: 	movl	$0x0, 0x38(%rsp)
    000006f5: 	xorl	%ebp, %ebp
    000006f7: 	xorl	%r12d, %r12d
    000006fa: 	jmp	.Ltmp1663 # Offset: 1786
.Ltmp1670:
    000006ff: 	callq	__stack_chk_fail@PLT # Offset: 1791
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x2ce50
  Size        : 0x3c5
  MaxSize     : 0x3d0
  Offset      : 0x2ce50
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	movl	%r15d, %esi
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdi, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	movl	%ecx, %ebx
    0000001c: 	imull	%ebx, %r15d
    00000020: 	subq	$0x68, %rsp
    00000024: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002c: 	movl	%edx, 0x8(%rsp)
    00000030: 	leaq	0x30(%rsp), %rcx
    00000035: 	movl	%ebx, %edx
    00000037: 	movslq	%r15d, %r13
    0000003a: 	movl	%r8d, 0x24(%rsp)
    0000003f: 	movq	%r9, 0x28(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x58(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	movaps	%xmm0, 0x30(%rsp)
    00000059: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000061: 	movaps	%xmm0, 0x40(%rsp)
    00000066: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 102
    0000006b: 	movq	%rax, 0x18(%rsp)
    00000070: 	testl	%r13d, %r13d
    00000073: 	jle	.Ltmp1671 # Offset: 115
    00000075: 	movslq	%r13d, %rdx
    00000078: 	movq	%r12, %rsi
    0000007b: 	movq	%r14, %rdi
    0000007e: 	shlq	$0x3, %rdx
    00000082: 	callq	memmove@PLT # Offset: 130
.Ltmp1671:
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	xorl	%r15d, %r15d
    00000090: 	movl	$0x2710, iterations(%rip)
    0000009a: 	movl	%eax, 0x20(%rsp)
    0000009e: 	callq	clock@PLT # Offset: 158
    000000a3: 	movq	%rax, start_time(%rip)
    000000aa: 	movl	iterations(%rip), %eax
    000000b0: 	movl	%eax, 0x10(%rsp)
    000000b4: 	testl	%eax, %eax
    000000b6: 	jle	.Ltmp1672 # Offset: 182
    000000bc: 	movq	%r14, %rax
    000000bf: 	movq	%r12, %rbp
    000000c2: 	movl	0x24(%rsp), %r12d
    000000c7: 	movl	%r15d, %r14d
    000000ca: 	movq	%rax, %r15
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1680:
    000000d0: 	movl	0x8(%rsp), %edx
    000000d4: 	movl	%r12d, %r8d
    000000d7: 	movl	%ebx, %ecx
    000000d9: 	movq	%r15, %rsi
    000000dc: 	movq	%rbp, %rdi
    000000df: 	callq	"_ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/1" # Offset: 223
    000000e4: 	testq	%r13, %r13
    000000e7: 	je	.Ltmp1673 # Offset: 231
    000000ed: 	xorl	%r8d, %r8d
    000000f0: 	xorl	%eax, %eax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1675:
    000000f8: 	movq	(%rbp,%rax,8), %rcx
    000000fd: 	movq	(%r15,%rax,8), %rdx
    00000101: 	movq	%rcx, %rsi
    00000104: 	subq	%rdx, %rsi
    00000107: 	js	.Ltmp1674 # Offset: 263
    0000010d: 	addq	$0x1, %rax
    00000111: 	addq	%rsi, %r8
    00000114: 	cmpq	%r13, %rax
    00000117: 	jne	.Ltmp1675 # Offset: 279
.Ltmp1682:
    00000119: 	xorl	%esi, %esi
    0000011b: 	xorl	%eax, %eax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1677:
    00000120: 	movq	(%rbp,%rax,8), %rcx
    00000125: 	movq	(%r15,%rax,8), %rdx
    00000129: 	movq	%rcx, %rdi
    0000012c: 	subq	%rdx, %rdi
    0000012f: 	js	.Ltmp1676 # Offset: 303
    00000131: 	cmpq	%rdi, %rsi
    00000134: 	cmovlq	%rdi, %rsi
    00000138: 	addq	$0x1, %rax
    0000013c: 	cmpq	%rax, %r13
    0000013f: 	jne	.Ltmp1677 # Offset: 319
.Ltmp1681:
    00000141: 	cmpl	%r14d, 0xa0(%rsp)
    00000149: 	jge	.Ltmp1678 # Offset: 329
    0000014b: 	testq	%rsi, %rsi
    0000014e: 	jle	.Ltmp1679 # Offset: 334
    00000154: 	cmpq	$0x9, %r8
    00000158: 	jle	.Ltmp1679 # Offset: 344
.Ltmp1678:
    0000015e: 	movq	%r15, %rax
    00000161: 	addl	$0x1, %r14d
    00000165: 	movq	%rbp, %r15
    00000168: 	cmpl	0x10(%rsp), %r14d
    0000016d: 	je	.Ltmp1679 # Offset: 365
    00000173: 	movq	%rax, %rbp
    00000176: 	jmp	.Ltmp1680 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1676:
    00000180: 	subq	%rcx, %rdx
    00000183: 	cmpq	%rdx, %rsi
    00000186: 	cmovlq	%rdx, %rsi
    0000018a: 	addq	$0x1, %rax
    0000018e: 	cmpq	%rax, %r13
    00000191: 	jne	.Ltmp1677 # Offset: 401
    00000193: 	jmp	.Ltmp1681 # Offset: 403
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp1674:
    00000198: 	subq	%rcx, %rdx
    0000019b: 	addq	$0x1, %rax
    0000019f: 	addq	%rdx, %r8
    000001a2: 	cmpq	%rax, %r13
    000001a5: 	jne	.Ltmp1675 # Offset: 421
    000001ab: 	jmp	.Ltmp1682 # Offset: 427
.Ltmp1673:
    000001b0: 	cmpl	%r14d, 0xa0(%rsp)
    000001b8: 	jl	.Ltmp1683 # Offset: 440
    000001ba: 	xorl	%r8d, %r8d
    000001bd: 	xorl	%esi, %esi
    000001bf: 	jmp	.Ltmp1678 # Offset: 447
.Ltmp1683:
    000001c1: 	movq	%r15, %rax
    000001c4: 	movl	%r14d, %r15d
    000001c7: 	movq	%rax, %r14
.Ltmp1672:
    000001ca: 	xorl	%ebp, %ebp
    000001cc: 	xorl	%r8d, %r8d
.Ltmp1687:
    000001cf: 	movq	%r8, 0x10(%rsp)
    000001d4: 	callq	clock@PLT # Offset: 468
    000001d9: 	movl	0x8(%rsp), %ecx
    000001dd: 	pxor	%xmm0, %xmm0
    000001e1: 	movl	%ebx, %edx
    000001e3: 	movq	%rax, end_time(%rip)
    000001ea: 	subq	start_time(%rip), %rax
    000001f1: 	shrl	$0x1f, %edx
    000001f4: 	cvtsi2sd	%rax, %xmm0
    000001f9: 	movl	%ecx, %eax
    000001fb: 	addl	%ebx, %edx
    000001fd: 	movq	0x18(%rsp), %r12
    00000202: 	shrl	$0x1f, %eax
    00000205: 	sarl	%edx
    00000207: 	movq	0x10(%rsp), %r8
    0000020c: 	divsd	DATAat0x49520(%rip), %xmm0
    00000214: 	addl	%ecx, %eax
    00000216: 	movq	%xmm0, %r13
    0000021b: 	sarl	%eax
    0000021d: 	imull	%ebx, %eax
    00000220: 	addl	%edx, %eax
    00000222: 	cltq
    00000224: 	subq	(%r14,%rax,8), %r12
    00000228: 	cmpl	%r15d, iterations(%rip)
    0000022f: 	jg	.Ltmp1684 # Offset: 559
    00000231: 	cmpq	$0xa, %r8
    00000235: 	jle	.Ltmp1684 # Offset: 565
    00000237: 	cmpq	$0x1, %rbp
    0000023b: 	jle	.Ltmp1684 # Offset: 571
    0000023d: 	movq	0x28(%rsp), %rax
    00000242: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000249: 	movq	%r8, 0x8(%rsp)
    0000024e: 	movq	%r14, %rdi
    00000251: 	movq	0x8(%rax), %rdx
    00000255: 	movq	(%rax), %rsi
    00000258: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 600
    0000025d: 	movl	$0x11, %edx
    00000262: 	leaq	DATAat0x49199(%rip), %rsi
    00000269: 	movq	%rax, %rdi
    0000026c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 620
    00000271: 	movq	0x8(%rsp), %r8
    00000276: 	jmp	.Ltmp1685 # Offset: 630
.Ltmp1684:
    00000278: 	movq	0x28(%rsp), %rax
    0000027d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000284: 	movq	%r8, 0x8(%rsp)
    00000289: 	movq	%r14, %rdi
    0000028c: 	movq	0x8(%rax), %rdx
    00000290: 	movq	(%rax), %rsi
    00000293: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 659
    00000298: 	movl	$0xa, %edx
    0000029d: 	leaq	DATAat0x491ab(%rip), %rsi
    000002a4: 	movq	%rax, %rdi
    000002a7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 679
    000002ac: 	movq	0x8(%rsp), %r8
.Ltmp1685:
    000002b1: 	movl	$0x4, %edx
    000002b6: 	movq	%r14, %rdi
    000002b9: 	movq	%r8, 0x8(%rsp)
    000002be: 	leaq	DATAat0x491b6(%rip), %rsi
    000002c5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 709
    000002ca: 	movq	%r14, %rdi
    000002cd: 	movl	%r15d, %esi
    000002d0: 	callq	_ZNSolsEi@PLT # Offset: 720
    000002d5: 	movl	$0xb, %edx
    000002da: 	leaq	DATAat0x491bb(%rip), %rsi
    000002e1: 	movq	%rax, %rdi
    000002e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 740
    000002e9: 	movl	$0xa, %edx
    000002ee: 	movq	%r14, %rdi
    000002f1: 	leaq	DATAat0x491c7(%rip), %rsi
    000002f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 760
    000002fd: 	movq	0x8(%rsp), %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 773
    0000030a: 	movl	$0x7, %edx
    0000030f: 	leaq	DATAat0x491d2(%rip), %rsi
    00000316: 	movq	%rax, %r14
    00000319: 	movq	%rax, %rdi
    0000031c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 796
    00000321: 	movq	%rbp, %rsi
    00000324: 	movq	%r14, %rdi
    00000327: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 807
    0000032c: 	movl	$0x10, %edx
    00000331: 	leaq	DATAat0x491da(%rip), %rsi
    00000338: 	movq	%rax, %rbp
    0000033b: 	movq	%rax, %rdi
    0000033e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 830
    00000343: 	movq	%rbp, %rdi
    00000346: 	movq	%r12, %rsi
    00000349: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 841
    0000034e: 	movl	$0x8, %edx
    00000353: 	leaq	DATAat0x491eb(%rip), %rsi
    0000035a: 	movq	%rax, %rbp
    0000035d: 	movq	%rax, %rdi
    00000360: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 864
    00000365: 	movq	%r13, %xmm0
    0000036a: 	movq	%rbp, %rdi
    0000036d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 877
    00000372: 	movl	$0x2, %edx
    00000377: 	leaq	DATAat0x491f4(%rip), %rsi
    0000037e: 	movq	%rax, %rdi
    00000381: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 897
    00000386: 	movl	0x20(%rsp), %eax
    0000038a: 	movl	%eax, iterations(%rip)
    00000390: 	movq	0x58(%rsp), %rax
    00000395: 	subq	%fs:0x28, %rax
    0000039e: 	jne	.Ltmp1686 # Offset: 926
    000003a0: 	addq	$0x68, %rsp
    000003a4: 	popq	%rbx
    000003a5: 	popq	%rbp
    000003a6: 	popq	%r12
    000003a8: 	popq	%r13
    000003aa: 	popq	%r14
    000003ac: 	popq	%r15
    000003ae: 	retq # Offset: 942
.Ltmp1679:
    000003af: 	movq	%r15, %rax
    000003b2: 	movq	%rsi, %rbp
    000003b5: 	movl	%r14d, %r15d
    000003b8: 	movq	%rax, %r14
    000003bb: 	jmp	.Ltmp1687 # Offset: 955
.Ltmp1686:
    000003c0: 	callq	__stack_chk_fail@PLT # Offset: 960
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z13testLaplace2DIll19jacobi_sor2D_simpleIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x2d220
  Size        : 0x307
  MaxSize     : 0x310
  Offset      : 0x2d220
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIll19jacobi_sor2D_simpleIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%r13d, %edx
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r14d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x78, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movq	%r9, 0x28(%rsp)
    00000034: 	leaq	0x40(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x68(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x40(%rsp)
    0000004e: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000056: 	movaps	%xmm0, 0x50(%rsp)
    0000005b: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 91
    00000060: 	movl	%r14d, %eax
    00000063: 	imull	%r13d, %eax
    00000067: 	testl	%eax, %eax
    00000069: 	jle	.Ltmp1688 # Offset: 105
    0000006b: 	cltq
    0000006d: 	movq	%rbx, %rsi
    00000070: 	movq	%rbp, %rdi
    00000073: 	leaq	(,%rax,8), %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp1688:
    00000080: 	callq	clock@PLT # Offset: 128
    00000085: 	movq	%rax, start_time(%rip)
    0000008c: 	movl	iterations(%rip), %eax
    00000092: 	movl	%eax, 0x14(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp1689 # Offset: 152
    0000009e: 	subl	$0x1, %r14d
    000000a2: 	leal	-0x1(%r13), %eax
    000000a6: 	cmpl	$0x1, %r14d
    000000aa: 	jle	.Ltmp1689 # Offset: 170
    000000b0: 	cmpl	$0x1, %eax
    000000b3: 	jle	.Ltmp1689 # Offset: 179
    000000b9: 	movslq	%r12d, %rdx
    000000bc: 	xorl	%r15d, %r15d
    000000bf: 	leaq	(,%rdx,8), %r11
    000000c7: 	movq	%r11, %rax
    000000ca: 	negq	%rax
    000000cd: 	movq	%rax, 0x8(%rsp)
    000000d2: 	leal	(%r12,%r12), %eax
    000000d6: 	cltq
    000000d8: 	shlq	$0x3, %rax
    000000dc: 	movq	%rax, 0x20(%rsp)
    000000e1: 	leal	-0x3(%r13), %eax
    000000e5: 	leaq	0x1(%rdx,%rax), %rax
    000000ea: 	shlq	$0x3, %rax
    000000ee: 	movq	%rax, 0x18(%rsp)
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1692:
    000000f8: 	movq	0x18(%rsp), %r8
    000000fd: 	movq	0x20(%rsp), %r13
    00000102: 	xorl	%r9d, %r9d
    00000105: 	movl	$0x1, %r12d
    0000010b: 	movq	0x8(%rsp), %r10
.Ltmp1691:
    00000110: 	movq	%r9, %rax
    00000113: 	leaq	(%r13,%r10), %rcx
    00000118: 	addq	%r11, %r9
    0000011b: 	addl	$0x1, %r12d
    0000011f: 	leaq	(%r10,%rax), %rsi
    00000123: 	movq	%r9, %rdx
    00000126: 	addq	%rbx, %rcx
    00000129: 	addq	%rbx, %rsi
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1690:
    00000130: 	movq	(%rbx,%rdx), %rdi
    00000134: 	addq	0x8(%rdx,%rsi), %rdi
    00000139: 	addq	0x10(%rbx,%rdx), %rdi
    0000013e: 	addq	0x8(%rdx,%rcx), %rdi
    00000143: 	leaq	0x5(%rdi), %rax
    00000147: 	addq	$0x2, %rdi
    0000014b: 	cmovnsq	%rdi, %rax
    0000014f: 	sarq	$0x2, %rax
    00000153: 	subq	0x8(%rbp,%rdx), %rax
    00000158: 	imulq	$0x71, %rax, %rax
    0000015c: 	sarq	$0x6, %rax
    00000160: 	addq	0x8(%rbp,%rdx), %rax
    00000165: 	movq	%rax, 0x8(%rbp,%rdx)
    0000016a: 	addq	$0x8, %rdx
    0000016e: 	cmpq	%rdx, %r8
    00000171: 	jne	.Ltmp1690 # Offset: 369
    00000173: 	subq	%r11, %r10
    00000176: 	addq	%r11, %r13
    00000179: 	addq	%r11, %r8
    0000017c: 	cmpl	%r12d, %r14d
    0000017f: 	jne	.Ltmp1691 # Offset: 383
    00000181: 	movq	%rbp, %rax
    00000184: 	addl	$0x1, %r15d
    00000188: 	movq	%rbx, %rbp
    0000018b: 	cmpl	0x14(%rsp), %r15d
    00000190: 	je	.Ltmp1689 # Offset: 400
    00000192: 	movq	%rax, %rbx
    00000195: 	jmp	.Ltmp1692 # Offset: 405
.Ltmp1689:
    0000019a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001a8: 	subq	$0x20, %rax
    000001ac: 	cmpq	%rax, %rbx
    000001af: 	je	.Ltmp1693 # Offset: 431
    000001b5: 	movq	0x28(%rsp), %rax
    000001ba: 	leaq	0x10(%rbx), %rdi
    000001be: 	movq	%rdi, (%rbx)
    000001c1: 	movq	(%rax), %rbp
    000001c4: 	movq	0x8(%rax), %r12
    000001c8: 	movq	%rbp, %rax
    000001cb: 	addq	%r12, %rax
    000001ce: 	je	.Ltmp1694 # Offset: 462
    000001d0: 	testq	%rbp, %rbp
    000001d3: 	je	.Ltmp1695 # Offset: 467
.Ltmp1694:
    000001d9: 	movq	%r12, 0x38(%rsp)
    000001de: 	cmpq	$0xf, %r12
    000001e2: 	ja	.Ltmp1696 # Offset: 482
    000001e8: 	cmpq	$0x1, %r12
    000001ec: 	jne	.Ltmp1697 # Offset: 492
    000001f2: 	movzbl	(%rbp), %eax
    000001f6: 	movb	%al, 0x10(%rbx)
.Ltmp1700:
    000001f9: 	movq	%r12, 0x8(%rbx)
    000001fd: 	movb	$0x0, (%rdi,%r12)
    00000202: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000209: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000210: 	addq	$0x20, %rax
    00000214: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000222: 	je	.Ltmp1698 # Offset: 546
.Ltmp1701:
    00000228: 	movq	-0x20(%rax), %rbp
    0000022c: 	callq	clock@PLT # Offset: 556
    00000231: 	movq	%rax, end_time(%rip)
    00000238: 	movq	0x68(%rsp), %rdx
    0000023d: 	subq	%fs:0x28, %rdx
    00000246: 	jne	.Ltmp1699 # Offset: 582
    0000024c: 	subq	start_time(%rip), %rax
    00000253: 	pxor	%xmm0, %xmm0
    00000257: 	movq	%rbp, %rdi
    0000025a: 	cvtsi2sd	%rax, %xmm0
    0000025f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000267: 	addq	$0x78, %rsp
    0000026b: 	popq	%rbx
    0000026c: 	popq	%rbp
    0000026d: 	popq	%r12
    0000026f: 	popq	%r13
    00000271: 	popq	%r14
    00000273: 	popq	%r15
    00000275: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 629
.Ltmp1696:
    0000027a: 	movq	%rbx, %rdi
    0000027d: 	leaq	0x38(%rsp), %rsi
    00000282: 	xorl	%edx, %edx
    00000284: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 644
    00000289: 	movq	%rax, (%rbx)
    0000028c: 	movq	%rax, %rdi
    0000028f: 	movq	0x38(%rsp), %rax
    00000294: 	movq	%rax, 0x10(%rbx)
.Ltmp1702:
    00000298: 	movq	%r12, %rdx
    0000029b: 	movq	%rbp, %rsi
    0000029e: 	callq	memcpy@PLT # Offset: 670
    000002a3: 	movq	0x38(%rsp), %r12
    000002a8: 	movq	(%rbx), %rdi
    000002ab: 	jmp	.Ltmp1700 # Offset: 683
.Ltmp1693:
    000002b0: 	movq	0x28(%rsp), %rsi
    000002b5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 700
    000002c1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002cf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d6: 	jne	.Ltmp1701 # Offset: 726
.Ltmp1698:
    000002dc: 	movq	-0x8(%rdx), %rax
    000002e0: 	addq	$0x200, %rax
    000002e6: 	jmp	.Ltmp1701 # Offset: 742
.Ltmp1697:
    000002eb: 	testq	%r12, %r12
    000002ee: 	je	.Ltmp1700 # Offset: 750
    000002f4: 	jmp	.Ltmp1702 # Offset: 756
.Ltmp1699:
    000002f6: 	callq	__stack_chk_fail@PLT # Offset: 758
.Ltmp1695:
    000002fb: 	leaq	DATAat0x49008(%rip), %rdi
    00000302: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 770
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIll19jacobi_sor2D_simpleIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIll20jacobi_sor2D_swappedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x2d530
  Size        : 0x2e7
  MaxSize     : 0x2f0
  Offset      : 0x2d530
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIll20jacobi_sor2D_swappedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%edx, %r13d
    00000010: 	movl	%r15d, %edx
    00000013: 	pushq	%r12
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r13d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x68, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movq	%r9, 0x18(%rsp)
    00000034: 	leaq	0x30(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x58(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x30(%rsp)
    0000004e: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000056: 	movaps	%xmm0, 0x40(%rsp)
    0000005b: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 91
    00000060: 	movl	%r13d, %eax
    00000063: 	imull	%r15d, %eax
    00000067: 	testl	%eax, %eax
    00000069: 	jle	.Ltmp1703 # Offset: 105
    0000006b: 	cltq
    0000006d: 	movq	%rbx, %rsi
    00000070: 	movq	%rbp, %rdi
    00000073: 	leaq	(,%rax,8), %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp1703:
    00000080: 	callq	clock@PLT # Offset: 128
    00000085: 	movq	%rax, start_time(%rip)
    0000008c: 	movl	iterations(%rip), %eax
    00000092: 	movl	%eax, 0xc(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp1704 # Offset: 152
    0000009e: 	subl	$0x1, %r15d
    000000a2: 	leal	-0x1(%r13), %r10d
    000000a6: 	cmpl	$0x1, %r15d
    000000aa: 	jle	.Ltmp1704 # Offset: 170
    000000b0: 	cmpl	$0x1, %r10d
    000000b4: 	jle	.Ltmp1704 # Offset: 180
    000000ba: 	movslq	%r12d, %r9
    000000bd: 	movl	$0x0, 0x8(%rsp)
    000000c5: 	leaq	0x8(,%r9,8), %rax
    000000cd: 	movq	%r9, %r11
    000000d0: 	leaq	(,%r9,8), %r8
    000000d8: 	movq	%rax, 0x10(%rsp)
    000000dd: 	negq	%r11
    000000e0: 	shlq	$0x3, %r11
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp1707:
    000000e8: 	movq	0x10(%rsp), %rax
    000000ed: 	leaq	(%rbx,%r8), %r13
    000000f1: 	movl	$0x1, %r12d
    000000f7: 	leaq	(%rbp,%rax), %r14
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1706:
    00000100: 	addl	$0x1, %r12d
    00000104: 	movq	%r13, %rdx
    00000107: 	movq	%r14, %rcx
    0000010a: 	movl	$0x1, %esi
    0000010f: 	nop # Size: 1
.Ltmp1705:
    00000110: 	movq	(%rdx), %rdi
    00000113: 	addq	0x8(%rdx,%r11), %rdi
    00000118: 	addl	$0x1, %esi
    0000011b: 	addq	0x10(%rdx), %rdi
    0000011f: 	addq	0x8(%rdx,%r9,8), %rdi
    00000124: 	leaq	0x5(%rdi), %rax
    00000128: 	addq	$0x2, %rdi
    0000012c: 	cmovnsq	%rdi, %rax
    00000130: 	addq	%r8, %rdx
    00000133: 	sarq	$0x2, %rax
    00000137: 	subq	(%rcx), %rax
    0000013a: 	imulq	$0x71, %rax, %rax
    0000013e: 	sarq	$0x6, %rax
    00000142: 	addq	(%rcx), %rax
    00000145: 	movq	%rax, (%rcx)
    00000148: 	addq	%r8, %rcx
    0000014b: 	cmpl	%r10d, %esi
    0000014e: 	jne	.Ltmp1705 # Offset: 334
    00000150: 	addq	$0x8, %r14
    00000154: 	addq	$0x8, %r13
    00000158: 	cmpl	%r12d, %r15d
    0000015b: 	jne	.Ltmp1706 # Offset: 347
    0000015d: 	addl	$0x1, 0x8(%rsp)
    00000162: 	movq	%rbp, %rax
    00000165: 	movl	0x8(%rsp), %esi
    00000169: 	movq	%rbx, %rbp
    0000016c: 	cmpl	0xc(%rsp), %esi
    00000170: 	je	.Ltmp1704 # Offset: 368
    00000172: 	movq	%rax, %rbx
    00000175: 	jmp	.Ltmp1707 # Offset: 373
.Ltmp1704:
    0000017a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000188: 	subq	$0x20, %rax
    0000018c: 	cmpq	%rax, %rbx
    0000018f: 	je	.Ltmp1708 # Offset: 399
    00000195: 	movq	0x18(%rsp), %rax
    0000019a: 	leaq	0x10(%rbx), %rdi
    0000019e: 	movq	%rdi, (%rbx)
    000001a1: 	movq	(%rax), %rbp
    000001a4: 	movq	0x8(%rax), %r12
    000001a8: 	movq	%rbp, %rax
    000001ab: 	addq	%r12, %rax
    000001ae: 	je	.Ltmp1709 # Offset: 430
    000001b0: 	testq	%rbp, %rbp
    000001b3: 	je	.Ltmp1710 # Offset: 435
.Ltmp1709:
    000001b9: 	movq	%r12, 0x28(%rsp)
    000001be: 	cmpq	$0xf, %r12
    000001c2: 	ja	.Ltmp1711 # Offset: 450
    000001c8: 	cmpq	$0x1, %r12
    000001cc: 	jne	.Ltmp1712 # Offset: 460
    000001d2: 	movzbl	(%rbp), %eax
    000001d6: 	movb	%al, 0x10(%rbx)
.Ltmp1715:
    000001d9: 	movq	%r12, 0x8(%rbx)
    000001dd: 	movb	$0x0, (%rdi,%r12)
    000001e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f0: 	addq	$0x20, %rax
    000001f4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000202: 	je	.Ltmp1713 # Offset: 514
.Ltmp1716:
    00000208: 	movq	-0x20(%rax), %rbp
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	%rax, end_time(%rip)
    00000218: 	movq	0x58(%rsp), %rdx
    0000021d: 	subq	%fs:0x28, %rdx
    00000226: 	jne	.Ltmp1714 # Offset: 550
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	pxor	%xmm0, %xmm0
    00000237: 	movq	%rbp, %rdi
    0000023a: 	cvtsi2sd	%rax, %xmm0
    0000023f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000247: 	addq	$0x68, %rsp
    0000024b: 	popq	%rbx
    0000024c: 	popq	%rbp
    0000024d: 	popq	%r12
    0000024f: 	popq	%r13
    00000251: 	popq	%r14
    00000253: 	popq	%r15
    00000255: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 597
.Ltmp1711:
    0000025a: 	movq	%rbx, %rdi
    0000025d: 	leaq	0x28(%rsp), %rsi
    00000262: 	xorl	%edx, %edx
    00000264: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 612
    00000269: 	movq	%rax, (%rbx)
    0000026c: 	movq	%rax, %rdi
    0000026f: 	movq	0x28(%rsp), %rax
    00000274: 	movq	%rax, 0x10(%rbx)
.Ltmp1717:
    00000278: 	movq	%r12, %rdx
    0000027b: 	movq	%rbp, %rsi
    0000027e: 	callq	memcpy@PLT # Offset: 638
    00000283: 	movq	0x28(%rsp), %r12
    00000288: 	movq	(%rbx), %rdi
    0000028b: 	jmp	.Ltmp1715 # Offset: 651
.Ltmp1708:
    00000290: 	movq	0x18(%rsp), %rsi
    00000295: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000029c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 668
    000002a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002b6: 	jne	.Ltmp1716 # Offset: 694
.Ltmp1713:
    000002bc: 	movq	-0x8(%rdx), %rax
    000002c0: 	addq	$0x200, %rax
    000002c6: 	jmp	.Ltmp1716 # Offset: 710
.Ltmp1712:
    000002cb: 	testq	%r12, %r12
    000002ce: 	je	.Ltmp1715 # Offset: 718
    000002d4: 	jmp	.Ltmp1717 # Offset: 724
.Ltmp1714:
    000002d6: 	callq	__stack_chk_fail@PLT # Offset: 726
.Ltmp1710:
    000002db: 	leaq	DATAat0x49008(%rip), %rdi
    000002e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 738
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIll20jacobi_sor2D_swappedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x2d820
  Size        : 0x34a
  MaxSize     : 0x350
  Offset      : 0x2d820
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%r13d, %edx
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r14d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x78, %rsp
    00000027: 	movdqa	DATAat0x49480(%rip), %xmm0
    0000002f: 	movq	%r9, 0x28(%rsp)
    00000034: 	leaq	0x40(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x68(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x40(%rsp)
    0000004e: 	movdqa	DATAat0x49490(%rip), %xmm0
    00000056: 	movaps	%xmm0, 0x50(%rsp)
    0000005b: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 91
    00000060: 	movl	%r14d, %eax
    00000063: 	imull	%r13d, %eax
    00000067: 	testl	%eax, %eax
    00000069: 	jle	.Ltmp1718 # Offset: 105
    0000006b: 	cltq
    0000006d: 	movq	%rbx, %rsi
    00000070: 	movq	%rbp, %rdi
    00000073: 	leaq	(,%rax,8), %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp1718:
    00000080: 	callq	clock@PLT # Offset: 128
    00000085: 	movq	%rax, start_time(%rip)
    0000008c: 	movl	iterations(%rip), %eax
    00000092: 	movl	%eax, 0x4(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp1719 # Offset: 152
    0000009e: 	leal	-0x2(%r14), %esi
    000000a2: 	leal	-0x1(%r13), %eax
    000000a6: 	movl	%esi, (%rsp)
    000000a9: 	testl	%esi, %esi
    000000ab: 	jle	.Ltmp1719 # Offset: 171
    000000b1: 	cmpl	$0x1, %eax
    000000b4: 	jle	.Ltmp1719 # Offset: 180
    000000ba: 	movl	%esi, %eax
    000000bc: 	movl	%r12d, %r10d
    000000bf: 	xorl	%r15d, %r15d
    000000c2: 	imull	%r12d, %eax
    000000c6: 	negl	%r10d
    000000c9: 	movslq	%r10d, %r10
    000000cc: 	shlq	$0x3, %r10
    000000d0: 	movl	%eax, %edx
    000000d2: 	subl	%r12d, %edx
    000000d5: 	movslq	%edx, %rdx
    000000d8: 	leaq	(,%rdx,8), %rsi
    000000e0: 	movslq	%eax, %rdx
    000000e3: 	addl	%r12d, %eax
    000000e6: 	cltq
    000000e8: 	movq	%rdx, %rcx
    000000eb: 	movq	%rsi, 0x18(%rsp)
    000000f0: 	shlq	$0x3, %rax
    000000f4: 	negq	%rcx
    000000f7: 	movq	%rax, 0x10(%rsp)
    000000fc: 	leal	-0x3(%r13), %eax
    00000100: 	leaq	(,%rcx,8), %rsi
    00000108: 	addq	$0x1, %rax
    0000010c: 	movq	%rsi, 0x20(%rsp)
    00000111: 	addq	%rax, %rdx
    00000114: 	negq	%rax
    00000117: 	leaq	(,%rdx,8), %rsi
    0000011f: 	leaq	(,%rax,8), %r14
    00000127: 	movq	%rsi, 0x8(%rsp)
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1722:
    00000130: 	movq	0x8(%rsp), %r8
    00000135: 	movq	0x10(%rsp), %r13
    0000013a: 	movq	0x20(%rsp), %r9
    0000013f: 	movq	0x18(%rsp), %r12
    00000144: 	movl	(%rsp), %r11d
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1721:
    00000150: 	leaq	(%r9,%r12), %rsi
    00000154: 	leaq	(%r13,%r9), %rcx
    00000159: 	subl	$0x1, %r11d
    0000015d: 	leaq	(%r14,%r8), %rdx
    00000161: 	addq	%rbx, %rsi
    00000164: 	addq	%rbx, %rcx
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1720:
    00000170: 	movq	(%rbx,%rdx), %rdi
    00000174: 	addq	0x8(%rdx,%rsi), %rdi
    00000179: 	addq	0x10(%rbx,%rdx), %rdi
    0000017e: 	addq	0x8(%rdx,%rcx), %rdi
    00000183: 	leaq	0x5(%rdi), %rax
    00000187: 	addq	$0x2, %rdi
    0000018b: 	cmovnsq	%rdi, %rax
    0000018f: 	sarq	$0x2, %rax
    00000193: 	subq	0x8(%rbp,%rdx), %rax
    00000198: 	imulq	$0x71, %rax, %rax
    0000019c: 	sarq	$0x6, %rax
    000001a0: 	addq	0x8(%rbp,%rdx), %rax
    000001a5: 	movq	%rax, 0x8(%rbp,%rdx)
    000001aa: 	addq	$0x8, %rdx
    000001ae: 	cmpq	%rdx, %r8
    000001b1: 	jne	.Ltmp1720 # Offset: 433
    000001b3: 	addq	%r10, %r12
    000001b6: 	subq	%r10, %r9
    000001b9: 	addq	%r10, %r13
    000001bc: 	addq	%r10, %r8
    000001bf: 	testl	%r11d, %r11d
    000001c2: 	jne	.Ltmp1721 # Offset: 450
    000001c4: 	movq	%rbp, %rax
    000001c7: 	addl	$0x1, %r15d
    000001cb: 	movq	%rbx, %rbp
    000001ce: 	cmpl	0x4(%rsp), %r15d
    000001d3: 	je	.Ltmp1719 # Offset: 467
    000001d5: 	movq	%rax, %rbx
    000001d8: 	jmp	.Ltmp1722 # Offset: 472
.Ltmp1719:
    000001dd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001eb: 	subq	$0x20, %rax
    000001ef: 	cmpq	%rax, %rbx
    000001f2: 	je	.Ltmp1723 # Offset: 498
    000001f8: 	movq	0x28(%rsp), %rax
    000001fd: 	leaq	0x10(%rbx), %rdi
    00000201: 	movq	%rdi, (%rbx)
    00000204: 	movq	(%rax), %rbp
    00000207: 	movq	0x8(%rax), %r12
    0000020b: 	movq	%rbp, %rax
    0000020e: 	addq	%r12, %rax
    00000211: 	je	.Ltmp1724 # Offset: 529
    00000213: 	testq	%rbp, %rbp
    00000216: 	je	.Ltmp1725 # Offset: 534
.Ltmp1724:
    0000021c: 	movq	%r12, 0x38(%rsp)
    00000221: 	cmpq	$0xf, %r12
    00000225: 	ja	.Ltmp1726 # Offset: 549
    0000022b: 	cmpq	$0x1, %r12
    0000022f: 	jne	.Ltmp1727 # Offset: 559
    00000235: 	movzbl	(%rbp), %eax
    00000239: 	movb	%al, 0x10(%rbx)
.Ltmp1730:
    0000023c: 	movq	%r12, 0x8(%rbx)
    00000240: 	movb	$0x0, (%rdi,%r12)
    00000245: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000253: 	addq	$0x20, %rax
    00000257: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000265: 	je	.Ltmp1728 # Offset: 613
.Ltmp1731:
    0000026b: 	movq	-0x20(%rax), %rbp
    0000026f: 	callq	clock@PLT # Offset: 623
    00000274: 	movq	%rax, end_time(%rip)
    0000027b: 	movq	0x68(%rsp), %rdx
    00000280: 	subq	%fs:0x28, %rdx
    00000289: 	jne	.Ltmp1729 # Offset: 649
    0000028f: 	subq	start_time(%rip), %rax
    00000296: 	pxor	%xmm0, %xmm0
    0000029a: 	movq	%rbp, %rdi
    0000029d: 	cvtsi2sd	%rax, %xmm0
    000002a2: 	divsd	DATAat0x49520(%rip), %xmm0
    000002aa: 	addq	$0x78, %rsp
    000002ae: 	popq	%rbx
    000002af: 	popq	%rbp
    000002b0: 	popq	%r12
    000002b2: 	popq	%r13
    000002b4: 	popq	%r14
    000002b6: 	popq	%r15
    000002b8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 696
.Ltmp1726:
    000002bd: 	movq	%rbx, %rdi
    000002c0: 	leaq	0x38(%rsp), %rsi
    000002c5: 	xorl	%edx, %edx
    000002c7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 711
    000002cc: 	movq	%rax, (%rbx)
    000002cf: 	movq	%rax, %rdi
    000002d2: 	movq	0x38(%rsp), %rax
    000002d7: 	movq	%rax, 0x10(%rbx)
.Ltmp1732:
    000002db: 	movq	%r12, %rdx
    000002de: 	movq	%rbp, %rsi
    000002e1: 	callq	memcpy@PLT # Offset: 737
    000002e6: 	movq	0x38(%rsp), %r12
    000002eb: 	movq	(%rbx), %rdi
    000002ee: 	jmp	.Ltmp1730 # Offset: 750
.Ltmp1723:
    000002f3: 	movq	0x28(%rsp), %rsi
    000002f8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002ff: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 767
    00000304: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000030b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000312: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000319: 	jne	.Ltmp1731 # Offset: 793
.Ltmp1728:
    0000031f: 	movq	-0x8(%rdx), %rax
    00000323: 	addq	$0x200, %rax
    00000329: 	jmp	.Ltmp1731 # Offset: 809
.Ltmp1727:
    0000032e: 	testq	%r12, %r12
    00000331: 	je	.Ltmp1730 # Offset: 817
    00000337: 	jmp	.Ltmp1732 # Offset: 823
.Ltmp1729:
    00000339: 	callq	__stack_chk_fail@PLT # Offset: 825
.Ltmp1725:
    0000033e: 	leaq	DATAat0x49008(%rip), %rdi
    00000345: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 837
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14max_differenceIlET_PKS0_S2_m" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x2db70
  Size        : 0x4f
  MaxSize     : 0x50
  Offset      : 0x2db70
  Section     : .text
  Orc Section : .local.text._Z14max_differenceIlET_PKS0_S2_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	xorl	%r9d, %r9d
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp1733 # Offset: 10
    0000000c: 	xorl	%eax, %eax
    0000000e: 	nop # Size: 2
.Ltmp1735:
    00000010: 	movq	(%rdi,%rax,8), %r8
    00000014: 	movq	(%rsi,%rax,8), %rcx
    00000018: 	movq	%r8, %r10
    0000001b: 	subq	%rcx, %r10
    0000001e: 	js	.Ltmp1734 # Offset: 30
    00000020: 	cmpq	%r10, %r9
    00000023: 	cmovlq	%r10, %r9
    00000027: 	addq	$0x1, %rax
    0000002b: 	cmpq	%rax, %rdx
    0000002e: 	jne	.Ltmp1735 # Offset: 46
.Ltmp1733:
    00000030: 	movq	%r9, %rax
    00000033: 	retq # Offset: 51
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1734:
    00000038: 	subq	%r8, %rcx
    0000003b: 	cmpq	%rcx, %r9
    0000003e: 	cmovlq	%rcx, %r9
    00000042: 	addq	$0x1, %rax
    00000046: 	cmpq	%rdx, %rax
    00000049: 	jne	.Ltmp1735 # Offset: 73
    0000004b: 	movq	%r9, %rax
    0000004e: 	retq # Offset: 78
DWARF CFI Instructions:
    <empty>
End of Function "_Z14max_differenceIlET_PKS0_S2_m"

Binary Function "_Z11TestOneTypeIllEvv" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x2dbc0
  Size        : 0x3018
  MaxSize     : 0x3020
  Offset      : 0x2dbc0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIllEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	DATAat0x493cc(%rip), %rsi
    0000000c: 	movq	%rsp, %rbp
    0000000f: 	pushq	%r15
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbx
    00000018: 	leaq	-0x100(%rbp), %rbx
    0000001f: 	movq	%rbx, %rdi
    00000022: 	subq	$0x168, %rsp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, -0x38(%rbp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	%rbx, -0x140(%rbp)
    00000043: 	movl	%eax, -0x184(%rbp)
    00000049: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 73
    0000004e: 	leaq	-0xe0(%rbp), %rdi
    00000055: 	leaq	DATAat0x493cc(%rip), %rsi
    0000005c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 92
    00000061: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    00000069: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm5
    00000071: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000078: 	leaq	-0x120(%rbp), %rsi
    0000007f: 	movaps	%xmm4, -0x120(%rbp)
    00000086: 	movaps	%xmm5, -0x110(%rbp)
    0000008d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 141
    00000092: 	movl	$0x16e3600, %edi
    00000097: 	callq	_Znam@PLT # Offset: 151
    0000009c: 	movl	$0x16e3600, %edi
    000000a1: 	movq	%rax, -0x128(%rbp)
    000000a8: 	movq	%rax, %r15
    000000ab: 	callq	_Znam@PLT # Offset: 171
    000000b0: 	movq	%rax, -0x130(%rbp)
    000000b7: 	movq	%rax, %r13
    000000ba: 	movl	iterations(%rip), %eax
    000000c0: 	movq	%rbx, %rsi
    000000c3: 	leaq	DATAat0x49238(%rip), %rdx
    000000ca: 	addl	$0x1, %eax
    000000cd: 	andl	$-0x2, %eax
    000000d0: 	movl	%eax, iterations(%rip)
    000000d6: 	leaq	-0x80(%rbp), %rax
    000000da: 	movq	%rax, %rdi
    000000dd: 	movq	%rax, -0x148(%rbp)
    000000e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 228
    000000e9: 	movdqa	DATAat0x49480(%rip), %xmm6
    000000f1: 	movdqa	DATAat0x49490(%rip), %xmm7
    000000f9: 	leaq	-0x60(%rbp), %rbx
    000000fd: 	movq	%r15, %rdi
    00000100: 	movq	%rbx, %rcx
    00000103: 	movl	$0x5dc, %edx
    00000108: 	movl	$0x7d0, %esi
    0000010d: 	movaps	%xmm6, -0x60(%rbp)
    00000111: 	movaps	%xmm7, -0x50(%rbp)
    00000115: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 277
    0000011a: 	movq	%r15, %rsi
    0000011d: 	movl	$0x16e3600, %edx
    00000122: 	movq	%r13, %rdi
    00000125: 	callq	memcpy@PLT # Offset: 293
    0000012a: 	callq	clock@PLT # Offset: 298
    0000012f: 	movq	%r13, %r10
    00000132: 	movq	%r15, %r9
    00000135: 	xorl	%r11d, %r11d
    00000138: 	movl	iterations(%rip), %r14d
    0000013f: 	movq	%rax, start_time(%rip)
    00000146: 	movl	$0x2ed0, %r8d
    0000014c: 	movq	-0x128(%rbp), %rsi
    00000153: 	testl	%r14d, %r14d
    00000156: 	jle	.Ltmp1736 # Offset: 342
.Ltmp1740:
    0000015c: 	movq	$-0x2ee0, %rax
    00000163: 	leaq	-0x2ee0(%r9), %r12
    0000016a: 	leaq	0x2ee0(%r9), %rdi
    00000171: 	movq	%rsi, %rdx
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp1738:
    00000178: 	movq	%rax, %rcx
    0000017b: 	movq	%r8, %rsi
    0000017e: 	movq	%rdx, %r15
    00000181: 	negq	%rcx
    00000184: 	subq	%rax, %rsi
.Ltmp1737:
    00000187: 	movq	(%r9,%rcx), %rdx
    0000018b: 	addq	0x8(%r12,%rcx), %rdx
    00000190: 	addq	0x10(%r9,%rcx), %rdx
    00000195: 	addq	0x8(%rdi,%rcx), %rdx
    0000019a: 	leaq	0x5(%rdx), %r13
    0000019e: 	addq	$0x2, %rdx
    000001a2: 	cmovsq	%r13, %rdx
    000001a6: 	sarq	$0x2, %rdx
    000001aa: 	movq	%rdx, 0x8(%r10,%rcx)
    000001af: 	addq	$0x8, %rcx
    000001b3: 	cmpq	%rsi, %rcx
    000001b6: 	jne	.Ltmp1737 # Offset: 438
    000001b8: 	subq	$0x2ee0, %rax
    000001be: 	movq	%r15, %rdx
    000001c1: 	cmpq	$-0x16e0720, %rax
    000001c7: 	jne	.Ltmp1738 # Offset: 455
    000001c9: 	addl	$0x1, %r11d
    000001cd: 	movq	%r10, %rax
    000001d0: 	movq	%r15, %rsi
    000001d3: 	movq	%r9, %r10
    000001d6: 	cmpl	%r14d, %r11d
    000001d9: 	je	.Ltmp1739 # Offset: 473
    000001db: 	movq	%rax, %r9
    000001de: 	jmp	.Ltmp1740 # Offset: 478
.Ltmp1739:
    000001e3: 	movq	%r15, -0x128(%rbp)
.Ltmp1736:
    000001ea: 	movq	-0x148(%rbp), %rsi
    000001f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 504
    000001fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000204: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000212: 	je	.Ltmp1741 # Offset: 530
.Ltmp1902:
    00000218: 	movq	-0x20(%rax), %r12
    0000021c: 	callq	clock@PLT # Offset: 540
    00000221: 	pxor	%xmm0, %xmm0
    00000225: 	movq	%rax, end_time(%rip)
    0000022c: 	movq	%r12, %rdi
    0000022f: 	subq	start_time(%rip), %rax
    00000236: 	cvtsi2sd	%rax, %xmm0
    0000023b: 	divsd	DATAat0x49520(%rip), %xmm0
    00000243: 	callq	_Z13record_resultdPKc # Offset: 579
    00000248: 	movq	-0x80(%rbp), %rdi
    0000024c: 	leaq	-0x70(%rbp), %rax
    00000250: 	movq	%rax, -0x138(%rbp)
    00000257: 	cmpq	%rax, %rdi
    0000025a: 	je	.Ltmp1742 # Offset: 602
    0000025c: 	movq	-0x70(%rbp), %rax
    00000260: 	leaq	0x1(%rax), %rsi
    00000264: 	callq	_ZdlPvm@PLT # Offset: 612
.Ltmp1742:
    00000269: 	movq	-0x140(%rbp), %rsi
    00000270: 	movq	-0x148(%rbp), %rdi
    00000277: 	leaq	DATAat0x4924a(%rip), %rdx
    0000027e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 638
    00000283: 	movq	-0x128(%rbp), %r12
    0000028a: 	movq	%rbx, %rcx
    0000028d: 	movl	$0x5dc, %edx
    00000292: 	movl	$0x7d0, %esi
    00000297: 	movdqa	DATAat0x49480(%rip), %xmm4
    0000029f: 	movdqa	DATAat0x49490(%rip), %xmm5
    000002a7: 	movq	%r12, %rdi
    000002aa: 	movaps	%xmm4, -0x60(%rbp)
    000002ae: 	movaps	%xmm5, -0x50(%rbp)
    000002b2: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 690
    000002b7: 	movq	-0x130(%rbp), %r15
    000002be: 	movl	$0x16e3600, %edx
    000002c3: 	movq	%r12, %rsi
    000002c6: 	movq	%r15, %rdi
    000002c9: 	callq	memcpy@PLT # Offset: 713
    000002ce: 	callq	clock@PLT # Offset: 718
    000002d3: 	movl	iterations(%rip), %r13d
    000002da: 	movq	%r15, %r11
    000002dd: 	xorl	%r10d, %r10d
    000002e0: 	movq	%rax, start_time(%rip)
    000002e7: 	movq	-0x128(%rbp), %rdx
    000002ee: 	testl	%r13d, %r13d
    000002f1: 	jle	.Ltmp1743 # Offset: 753
.Ltmp1747:
    000002f7: 	leaq	0x2ee8(%r11), %rsi
    000002fe: 	leaq	0x16e0720(%r12), %rdi
    00000306: 	movl	$0x1, %ecx
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1745:
    00000310: 	addl	$0x1, %ecx
    00000313: 	leaq	-0x16dd840(%rdi), %rax
    0000031a: 	movq	%rsi, %r8
    0000031d: 	movq	%rdx, %r15
.Ltmp1744:
    00000320: 	movq	(%rax), %rdx
    00000323: 	addq	-0x2ed8(%rax), %rdx
    0000032a: 	addq	0x10(%rax), %rdx
    0000032e: 	addq	0x2ee8(%rax), %rdx
    00000335: 	leaq	0x5(%rdx), %r9
    00000339: 	addq	$0x2, %rdx
    0000033d: 	cmovsq	%r9, %rdx
    00000341: 	addq	$0x2ee0, %rax
    00000347: 	addq	$0x2ee0, %r8
    0000034e: 	sarq	$0x2, %rdx
    00000352: 	movq	%rdx, -0x2ee0(%r8)
    00000359: 	cmpq	%rdi, %rax
    0000035c: 	jne	.Ltmp1744 # Offset: 860
    0000035e: 	movq	%r15, %rdx
    00000361: 	addq	$0x8, %rsi
    00000365: 	leaq	0x8(%rax), %rdi
    00000369: 	cmpl	$0x5db, %ecx
    0000036f: 	jne	.Ltmp1745 # Offset: 879
    00000371: 	addl	$0x1, %r10d
    00000375: 	movq	%r11, %rax
    00000378: 	movq	%r12, %r11
    0000037b: 	cmpl	%r13d, %r10d
    0000037e: 	je	.Ltmp1746 # Offset: 894
    00000380: 	movq	%rax, %r12
    00000383: 	jmp	.Ltmp1747 # Offset: 899
.Ltmp1746:
    00000388: 	movq	%r15, -0x128(%rbp)
.Ltmp1743:
    0000038f: 	movq	-0x148(%rbp), %rsi
    00000396: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000039d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 925
    000003a2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003a9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003b0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003b7: 	je	.Ltmp1748 # Offset: 951
.Ltmp1901:
    000003bd: 	movq	-0x20(%rax), %r12
    000003c1: 	callq	clock@PLT # Offset: 961
    000003c6: 	pxor	%xmm0, %xmm0
    000003ca: 	movq	%rax, end_time(%rip)
    000003d1: 	movq	%r12, %rdi
    000003d4: 	subq	start_time(%rip), %rax
    000003db: 	cvtsi2sd	%rax, %xmm0
    000003e0: 	divsd	DATAat0x49520(%rip), %xmm0
    000003e8: 	callq	_Z13record_resultdPKc # Offset: 1000
    000003ed: 	movq	-0x80(%rbp), %rdi
    000003f1: 	cmpq	-0x138(%rbp), %rdi
    000003f8: 	je	.Ltmp1749 # Offset: 1016
    000003fa: 	movq	-0x70(%rbp), %rax
    000003fe: 	leaq	0x1(%rax), %rsi
    00000402: 	callq	_ZdlPvm@PLT # Offset: 1026
.Ltmp1749:
    00000407: 	movq	-0x140(%rbp), %rsi
    0000040e: 	movq	-0x148(%rbp), %rdi
    00000415: 	leaq	DATAat0x4925d(%rip), %rdx
    0000041c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1052
    00000421: 	movq	-0x128(%rbp), %r15
    00000428: 	movq	%rbx, %rcx
    0000042b: 	movl	$0x5dc, %edx
    00000430: 	movl	$0x7d0, %esi
    00000435: 	movdqa	DATAat0x49480(%rip), %xmm6
    0000043d: 	movdqa	DATAat0x49490(%rip), %xmm7
    00000445: 	movq	%r15, %rdi
    00000448: 	movaps	%xmm6, -0x60(%rbp)
    0000044c: 	movaps	%xmm7, -0x50(%rbp)
    00000450: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 1104
    00000455: 	movq	-0x130(%rbp), %r13
    0000045c: 	movq	%r15, %rsi
    0000045f: 	movl	$0x16e3600, %edx
    00000464: 	movq	%r13, %rdi
    00000467: 	callq	memcpy@PLT # Offset: 1127
    0000046c: 	callq	clock@PLT # Offset: 1132
    00000471: 	movq	%r13, %r10
    00000474: 	movq	%r15, %r9
    00000477: 	xorl	%r11d, %r11d
    0000047a: 	movl	iterations(%rip), %r14d
    00000481: 	movq	%rax, start_time(%rip)
    00000488: 	movq	$-0x2ed0, %r8
    0000048f: 	movq	-0x128(%rbp), %rsi
    00000496: 	testl	%r14d, %r14d
    00000499: 	jle	.Ltmp1750 # Offset: 1177
.Ltmp1754:
    0000049f: 	movq	$-0x16dd840, %rax
    000004a6: 	leaq	-0x2ee0(%r9), %r12
    000004ad: 	leaq	0x2ee0(%r9), %rdi
    000004b4: 	movq	%rsi, %rdx
    000004b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1752:
    000004c0: 	movq	%rax, %rcx
    000004c3: 	movq	%r8, %rsi
    000004c6: 	movq	%rdx, %r15
    000004c9: 	negq	%rcx
    000004cc: 	subq	%rax, %rsi
.Ltmp1751:
    000004cf: 	movq	0x2ec8(%r9,%rcx), %rdx
    000004d7: 	addq	0x2ed0(%r12,%rcx), %rdx
    000004df: 	addq	0x2ed8(%r9,%rcx), %rdx
    000004e7: 	addq	0x2ed0(%rdi,%rcx), %rdx
    000004ef: 	leaq	0x5(%rdx), %r13
    000004f3: 	addq	$0x2, %rdx
    000004f7: 	cmovsq	%r13, %rdx
    000004fb: 	sarq	$0x2, %rdx
    000004ff: 	movq	%rdx, 0x2ed0(%r10,%rcx)
    00000507: 	subq	$0x8, %rcx
    0000050b: 	cmpq	%rcx, %rsi
    0000050e: 	jne	.Ltmp1751 # Offset: 1294
    00000510: 	movq	%r15, %rdx
    00000513: 	addq	$0x2ee0, %rax
    00000519: 	jne	.Ltmp1752 # Offset: 1305
    0000051b: 	addl	$0x1, %r11d
    0000051f: 	movq	%r10, %rax
    00000522: 	movq	%r15, %rsi
    00000525: 	movq	%r9, %r10
    00000528: 	cmpl	%r14d, %r11d
    0000052b: 	je	.Ltmp1753 # Offset: 1323
    0000052d: 	movq	%rax, %r9
    00000530: 	jmp	.Ltmp1754 # Offset: 1328
.Ltmp1753:
    00000535: 	movq	%r15, -0x128(%rbp)
.Ltmp1750:
    0000053c: 	movq	-0x148(%rbp), %rsi
    00000543: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000054a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1354
    0000054f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000556: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000055d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000564: 	je	.Ltmp1755 # Offset: 1380
.Ltmp1900:
    0000056a: 	movq	-0x20(%rax), %r12
    0000056e: 	callq	clock@PLT # Offset: 1390
    00000573: 	pxor	%xmm0, %xmm0
    00000577: 	movq	%rax, end_time(%rip)
    0000057e: 	movq	%r12, %rdi
    00000581: 	subq	start_time(%rip), %rax
    00000588: 	cvtsi2sd	%rax, %xmm0
    0000058d: 	divsd	DATAat0x49520(%rip), %xmm0
    00000595: 	callq	_Z13record_resultdPKc # Offset: 1429
    0000059a: 	movq	-0x80(%rbp), %rdi
    0000059e: 	cmpq	-0x138(%rbp), %rdi
    000005a5: 	je	.Ltmp1756 # Offset: 1445
    000005a7: 	movq	-0x70(%rbp), %rax
    000005ab: 	leaq	0x1(%rax), %rsi
    000005af: 	callq	_ZdlPvm@PLT # Offset: 1455
.Ltmp1756:
    000005b4: 	movq	-0x140(%rbp), %rsi
    000005bb: 	movq	-0x148(%rbp), %rdi
    000005c2: 	leaq	DATAat0x49271(%rip), %rdx
    000005c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1481
    000005ce: 	movq	-0x128(%rbp), %r15
    000005d5: 	movq	%rbx, %rcx
    000005d8: 	movl	$0x5dc, %edx
    000005dd: 	movl	$0x7d0, %esi
    000005e2: 	movdqa	DATAat0x49480(%rip), %xmm4
    000005ea: 	movdqa	DATAat0x49490(%rip), %xmm5
    000005f2: 	movq	%r15, %rdi
    000005f5: 	movaps	%xmm4, -0x60(%rbp)
    000005f9: 	movaps	%xmm5, -0x50(%rbp)
    000005fd: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 1533
    00000602: 	movq	-0x130(%rbp), %r13
    00000609: 	movq	%r15, %rsi
    0000060c: 	movl	$0x16e3600, %edx
    00000611: 	movq	%r13, %rdi
    00000614: 	callq	memcpy@PLT # Offset: 1556
    00000619: 	callq	clock@PLT # Offset: 1561
    0000061e: 	movq	%r13, %r10
    00000621: 	movq	%r15, %r9
    00000624: 	xorl	%r11d, %r11d
    00000627: 	movl	iterations(%rip), %r14d
    0000062e: 	movq	%rax, start_time(%rip)
    00000635: 	movq	$-0x2ed0, %r8
    0000063c: 	movq	-0x128(%rbp), %rsi
    00000643: 	testl	%r14d, %r14d
    00000646: 	jle	.Ltmp1757 # Offset: 1606
.Ltmp1761:
    0000064c: 	movq	$-0x2ee0, %rax
    00000653: 	leaq	-0x2ee0(%r9), %r12
    0000065a: 	leaq	0x2ee0(%r9), %rdi
    00000661: 	movq	%rsi, %rdx
    00000664: 	nopl	(%rax) # Size: 4
.Ltmp1759:
    00000668: 	movq	%rax, %rcx
    0000066b: 	movq	%r8, %rsi
    0000066e: 	movq	%rdx, %r15
    00000671: 	negq	%rcx
    00000674: 	subq	%rax, %rsi
.Ltmp1758:
    00000677: 	movq	0x2ec8(%r9,%rcx), %rdx
    0000067f: 	addq	0x2ed0(%r12,%rcx), %rdx
    00000687: 	addq	0x2ed8(%r9,%rcx), %rdx
    0000068f: 	addq	0x2ed0(%rdi,%rcx), %rdx
    00000697: 	leaq	0x5(%rdx), %r13
    0000069b: 	addq	$0x2, %rdx
    0000069f: 	cmovsq	%r13, %rdx
    000006a3: 	sarq	$0x2, %rdx
    000006a7: 	movq	%rdx, 0x2ed0(%r10,%rcx)
    000006af: 	subq	$0x8, %rcx
    000006b3: 	cmpq	%rcx, %rsi
    000006b6: 	jne	.Ltmp1758 # Offset: 1718
    000006b8: 	subq	$0x2ee0, %rax
    000006be: 	movq	%r15, %rdx
    000006c1: 	cmpq	$-0x16e0720, %rax
    000006c7: 	jne	.Ltmp1759 # Offset: 1735
    000006c9: 	addl	$0x1, %r11d
    000006cd: 	movq	%r10, %rax
    000006d0: 	movq	%r15, %rsi
    000006d3: 	movq	%r9, %r10
    000006d6: 	cmpl	%r14d, %r11d
    000006d9: 	je	.Ltmp1760 # Offset: 1753
    000006db: 	movq	%rax, %r9
    000006de: 	jmp	.Ltmp1761 # Offset: 1758
.Ltmp1760:
    000006e3: 	movq	%r15, -0x128(%rbp)
.Ltmp1757:
    000006ea: 	movq	-0x148(%rbp), %rsi
    000006f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000006f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1784
    000006fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000704: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000070b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000712: 	je	.Ltmp1762 # Offset: 1810
.Ltmp1899:
    00000718: 	movq	-0x20(%rax), %r12
    0000071c: 	callq	clock@PLT # Offset: 1820
    00000721: 	pxor	%xmm0, %xmm0
    00000725: 	movq	%rax, end_time(%rip)
    0000072c: 	movq	%r12, %rdi
    0000072f: 	subq	start_time(%rip), %rax
    00000736: 	cvtsi2sd	%rax, %xmm0
    0000073b: 	divsd	DATAat0x49520(%rip), %xmm0
    00000743: 	callq	_Z13record_resultdPKc # Offset: 1859
    00000748: 	movq	-0x80(%rbp), %rdi
    0000074c: 	cmpq	-0x138(%rbp), %rdi
    00000753: 	je	.Ltmp1763 # Offset: 1875
    00000755: 	movq	-0x70(%rbp), %rax
    00000759: 	leaq	0x1(%rax), %rsi
    0000075d: 	callq	_ZdlPvm@PLT # Offset: 1885
.Ltmp1763:
    00000762: 	movq	-0x140(%rbp), %rsi
    00000769: 	movq	-0x148(%rbp), %rdi
    00000770: 	leaq	DATAat0x49286(%rip), %rdx
    00000777: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1911
    0000077c: 	movq	-0x128(%rbp), %r15
    00000783: 	movq	%rbx, %rcx
    00000786: 	movl	$0x5dc, %edx
    0000078b: 	movl	$0x7d0, %esi
    00000790: 	movdqa	DATAat0x49480(%rip), %xmm6
    00000798: 	movdqa	DATAat0x49490(%rip), %xmm7
    000007a0: 	movq	%r15, %rdi
    000007a3: 	movaps	%xmm6, -0x60(%rbp)
    000007a7: 	movaps	%xmm7, -0x50(%rbp)
    000007ab: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 1963
    000007b0: 	movq	-0x130(%rbp), %r13
    000007b7: 	movq	%r15, %rsi
    000007ba: 	movl	$0x16e3600, %edx
    000007bf: 	movq	%r13, %rdi
    000007c2: 	callq	memcpy@PLT # Offset: 1986
    000007c7: 	callq	clock@PLT # Offset: 1991
    000007cc: 	movq	%r13, %r10
    000007cf: 	movq	%r15, %r9
    000007d2: 	xorl	%r11d, %r11d
    000007d5: 	movl	iterations(%rip), %r14d
    000007dc: 	movq	%rax, start_time(%rip)
    000007e3: 	movl	$0x2ed0, %r8d
    000007e9: 	movq	-0x128(%rbp), %rsi
    000007f0: 	testl	%r14d, %r14d
    000007f3: 	jle	.Ltmp1764 # Offset: 2035
.Ltmp1768:
    000007f9: 	movq	$-0x16dd840, %rax
    00000800: 	leaq	-0x2ee0(%r9), %r12
    00000807: 	leaq	0x2ee0(%r9), %rdi
    0000080e: 	movq	%rsi, %rdx
    00000811: 	nopl	(%rax) # Size: 7
.Ltmp1766:
    00000818: 	movq	%rax, %rcx
    0000081b: 	movq	%r8, %rsi
    0000081e: 	movq	%rdx, %r15
    00000821: 	negq	%rcx
    00000824: 	subq	%rax, %rsi
.Ltmp1765:
    00000827: 	movq	(%r9,%rcx), %rdx
    0000082b: 	addq	0x8(%r12,%rcx), %rdx
    00000830: 	addq	0x10(%r9,%rcx), %rdx
    00000835: 	addq	0x8(%rdi,%rcx), %rdx
    0000083a: 	leaq	0x5(%rdx), %r13
    0000083e: 	addq	$0x2, %rdx
    00000842: 	cmovsq	%r13, %rdx
    00000846: 	sarq	$0x2, %rdx
    0000084a: 	movq	%rdx, 0x8(%r10,%rcx)
    0000084f: 	addq	$0x8, %rcx
    00000853: 	cmpq	%rcx, %rsi
    00000856: 	jne	.Ltmp1765 # Offset: 2134
    00000858: 	movq	%r15, %rdx
    0000085b: 	addq	$0x2ee0, %rax
    00000861: 	jne	.Ltmp1766 # Offset: 2145
    00000863: 	addl	$0x1, %r11d
    00000867: 	movq	%r10, %rax
    0000086a: 	movq	%r15, %rsi
    0000086d: 	movq	%r9, %r10
    00000870: 	cmpl	%r14d, %r11d
    00000873: 	je	.Ltmp1767 # Offset: 2163
    00000875: 	movq	%rax, %r9
    00000878: 	jmp	.Ltmp1768 # Offset: 2168
.Ltmp1767:
    0000087d: 	movq	%r15, -0x128(%rbp)
.Ltmp1764:
    00000884: 	movq	-0x148(%rbp), %rsi
    0000088b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000892: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2194
    00000897: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000089e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000008a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ac: 	je	.Ltmp1769 # Offset: 2220
.Ltmp1898:
    000008b2: 	movq	-0x20(%rax), %r12
    000008b6: 	callq	clock@PLT # Offset: 2230
    000008bb: 	pxor	%xmm0, %xmm0
    000008bf: 	movq	%rax, end_time(%rip)
    000008c6: 	movq	%r12, %rdi
    000008c9: 	subq	start_time(%rip), %rax
    000008d0: 	cvtsi2sd	%rax, %xmm0
    000008d5: 	divsd	DATAat0x49520(%rip), %xmm0
    000008dd: 	callq	_Z13record_resultdPKc # Offset: 2269
    000008e2: 	movq	-0x80(%rbp), %rdi
    000008e6: 	cmpq	-0x138(%rbp), %rdi
    000008ed: 	je	.Ltmp1770 # Offset: 2285
    000008ef: 	movq	-0x70(%rbp), %rax
    000008f3: 	leaq	0x1(%rax), %rsi
    000008f7: 	callq	_ZdlPvm@PLT # Offset: 2295
.Ltmp1770:
    000008fc: 	movq	-0x140(%rbp), %rsi
    00000903: 	movq	-0x148(%rbp), %rdi
    0000090a: 	leaq	DATAat0x4929b(%rip), %rdx
    00000911: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2321
    00000916: 	movq	-0x128(%rbp), %r15
    0000091d: 	movq	%rbx, %rcx
    00000920: 	movl	$0x5dc, %edx
    00000925: 	movl	$0x7d0, %esi
    0000092a: 	movdqa	DATAat0x49480(%rip), %xmm4
    00000932: 	movdqa	DATAat0x49490(%rip), %xmm5
    0000093a: 	movq	%r15, %rdi
    0000093d: 	movaps	%xmm4, -0x60(%rbp)
    00000941: 	movaps	%xmm5, -0x50(%rbp)
    00000945: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 2373
    0000094a: 	movq	-0x130(%rbp), %r14
    00000951: 	movl	$0x16e3600, %edx
    00000956: 	movq	%r15, %rsi
    00000959: 	movq	%r14, %rdi
    0000095c: 	callq	memcpy@PLT # Offset: 2396
    00000961: 	callq	clock@PLT # Offset: 2401
    00000966: 	xorl	%edi, %edi
    00000968: 	movq	%rax, start_time(%rip)
    0000096f: 	movl	iterations(%rip), %eax
    00000975: 	movl	%eax, -0x150(%rbp)
    0000097b: 	testl	%eax, %eax
    0000097d: 	jle	.Ltmp1771 # Offset: 2429
    00000983: 	movq	-0x128(%rbp), %rax
    0000098a: 	movq	%rbx, -0x160(%rbp)
    00000991: 	movl	%edi, %r13d
    00000994: 	movq	%rax, -0x158(%rbp)
.Ltmp1775:
    0000099b: 	leaq	0x2ec8(%r15), %rax
    000009a2: 	leaq	0x2ee8(%r14), %rdx
    000009a9: 	leaq	0x16e0708(%r15), %r12
.Ltmp1773:
    000009b0: 	leaq	-0x2ec0(%rax), %r9
    000009b7: 	leaq	0x18(%rax), %r8
    000009bb: 	movq	%rdx, %r11
    000009be: 	leaq	0x2f00(%rax), %r10
.Ltmp1772:
    000009c5: 	movq	0x10(%r8), %rbx
    000009c9: 	movq	0x18(%r8), %rdi
    000009cd: 	movq	(%r8), %rsi
    000009d0: 	movq	0x8(%r8), %rcx
    000009d4: 	addq	(%r9), %rsi
    000009d7: 	addq	0x8(%r9), %rcx
    000009db: 	addq	%rdi, %rcx
    000009de: 	addq	%rbx, %rsi
    000009e1: 	addq	0x10(%r9), %rbx
    000009e5: 	addq	0x20(%r8), %rbx
    000009e9: 	addq	0x10(%r10), %rbx
    000009ed: 	addq	0x18(%r9), %rdi
    000009f1: 	movq	%rcx, -0x128(%rbp)
    000009f8: 	addq	0x28(%r8), %rdi
    000009fc: 	leaq	0x5(%rbx), %rcx
    00000a00: 	addq	$0x2, %rbx
    00000a04: 	cmovsq	%rcx, %rbx
    00000a08: 	addq	0x18(%r10), %rdi
    00000a0c: 	sarq	$0x2, %rbx
    00000a10: 	movq	%rbx, %rcx
    00000a13: 	leaq	0x5(%rdi), %rbx
    00000a17: 	addq	$0x2, %rdi
    00000a1b: 	cmovsq	%rbx, %rdi
    00000a1f: 	addq	(%r10), %rsi
    00000a22: 	movq	%rcx, %xmm0
    00000a27: 	movq	-0x128(%rbp), %rcx
    00000a2e: 	sarq	$0x2, %rdi
    00000a32: 	movq	%rdi, %xmm2
    00000a37: 	leaq	0x5(%rsi), %rdi
    00000a3b: 	addq	$0x2, %rsi
    00000a3f: 	cmovsq	%rdi, %rsi
    00000a43: 	addq	0x8(%r10), %rcx
    00000a47: 	punpcklqdq	%xmm2, %xmm0
    00000a4b: 	movups	%xmm0, 0x10(%r11)
    00000a50: 	sarq	$0x2, %rsi
    00000a54: 	movq	%rsi, %xmm1
    00000a59: 	leaq	0x5(%rcx), %rsi
    00000a5d: 	addq	$0x2, %rcx
    00000a61: 	cmovsq	%rsi, %rcx
    00000a65: 	addq	$0x20, %r9
    00000a69: 	addq	$0x20, %r8
    00000a6d: 	addq	$0x20, %r10
    00000a71: 	addq	$0x20, %r11
    00000a75: 	sarq	$0x2, %rcx
    00000a79: 	movq	%rcx, %xmm3
    00000a7e: 	punpcklqdq	%xmm3, %xmm1
    00000a82: 	movups	%xmm1, -0x20(%r11)
    00000a87: 	cmpq	%r9, %rax
    00000a8a: 	jne	.Ltmp1772 # Offset: 2698
    00000a90: 	movq	0x2ee8(%rax), %rcx
    00000a97: 	addq	0x2ed8(%rax), %rcx
    00000a9e: 	addq	(%rax), %rcx
    00000aa1: 	addq	0x5dc0(%rax), %rcx
    00000aa8: 	leaq	0x5(%rcx), %rsi
    00000aac: 	addq	$0x2, %rcx
    00000ab0: 	cmovsq	%rsi, %rcx
    00000ab4: 	sarq	$0x2, %rcx
    00000ab8: 	movq	%rcx, 0x2ec0(%rdx)
    00000abf: 	movq	0x2ef0(%rax), %rcx
    00000ac6: 	addq	0x2ee0(%rax), %rcx
    00000acd: 	addq	0x8(%rax), %rcx
    00000ad1: 	addq	0x5dc8(%rax), %rcx
    00000ad8: 	leaq	0x5(%rcx), %rsi
    00000adc: 	addq	$0x2, %rcx
    00000ae0: 	cmovsq	%rsi, %rcx
    00000ae4: 	addq	$0x2ee0, %rax
    00000aea: 	addq	$0x2ee0, %rdx
    00000af1: 	sarq	$0x2, %rcx
    00000af5: 	movq	%rcx, -0x18(%rdx)
    00000af9: 	cmpq	%rax, %r12
    00000afc: 	jne	.Ltmp1773 # Offset: 2812
    00000b02: 	movq	%r14, %rax
    00000b05: 	addl	$0x1, %r13d
    00000b09: 	movq	%r15, %r14
    00000b0c: 	cmpl	%r13d, -0x150(%rbp)
    00000b13: 	je	.Ltmp1774 # Offset: 2835
    00000b15: 	movq	%rax, %r15
    00000b18: 	jmp	.Ltmp1775 # Offset: 2840
.Ltmp1774:
    00000b1d: 	movq	-0x158(%rbp), %rax
    00000b24: 	movq	-0x160(%rbp), %rbx
    00000b2b: 	movq	%rax, -0x128(%rbp)
.Ltmp1771:
    00000b32: 	movq	-0x148(%rbp), %rsi
    00000b39: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000b40: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2880
    00000b45: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b4c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000b53: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b5a: 	je	.Ltmp1776 # Offset: 2906
.Ltmp1904:
    00000b60: 	movq	-0x20(%rax), %r12
    00000b64: 	callq	clock@PLT # Offset: 2916
    00000b69: 	pxor	%xmm0, %xmm0
    00000b6d: 	movq	%rax, end_time(%rip)
    00000b74: 	movq	%r12, %rdi
    00000b77: 	subq	start_time(%rip), %rax
    00000b7e: 	cvtsi2sd	%rax, %xmm0
    00000b83: 	divsd	DATAat0x49520(%rip), %xmm0
    00000b8b: 	callq	_Z13record_resultdPKc # Offset: 2955
    00000b90: 	movq	-0x80(%rbp), %rdi
    00000b94: 	cmpq	-0x138(%rbp), %rdi
    00000b9b: 	je	.Ltmp1777 # Offset: 2971
    00000b9d: 	movq	-0x70(%rbp), %rax
    00000ba1: 	leaq	0x1(%rax), %rsi
    00000ba5: 	callq	_ZdlPvm@PLT # Offset: 2981
.Ltmp1777:
    00000baa: 	movq	-0x140(%rbp), %rsi
    00000bb1: 	movq	-0x148(%rbp), %rdi
    00000bb8: 	leaq	DATAat0x492af(%rip), %rdx
    00000bbf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3007
    00000bc4: 	movq	%rbx, %rcx
    00000bc7: 	movl	$0x5dc, %edx
    00000bcc: 	movl	$0x7d0, %esi
    00000bd1: 	xorl	%r13d, %r13d
    00000bd4: 	movq	-0x128(%rbp), %r15
    00000bdb: 	movdqa	DATAat0x49480(%rip), %xmm6
    00000be3: 	movdqa	DATAat0x49490(%rip), %xmm7
    00000beb: 	movq	%r15, %rdi
    00000bee: 	movaps	%xmm6, -0x60(%rbp)
    00000bf2: 	movaps	%xmm7, -0x50(%rbp)
    00000bf6: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 3062
    00000bfb: 	movq	-0x130(%rbp), %r14
    00000c02: 	movl	$0x16e3600, %edx
    00000c07: 	movq	%r15, %rsi
    00000c0a: 	movq	%r14, %rdi
    00000c0d: 	callq	memcpy@PLT # Offset: 3085
    00000c12: 	callq	clock@PLT # Offset: 3090
    00000c17: 	movl	iterations(%rip), %r12d
    00000c1e: 	movq	%rax, start_time(%rip)
    00000c25: 	testl	%r12d, %r12d
    00000c28: 	jg	.Ltmp1778 # Offset: 3112
    00000c2a: 	jmp	.Ltmp1779 # Offset: 3114
    00000c2c: 	nopl	(%rax) # Size: 4
.Ltmp1780:
    00000c30: 	movq	%rax, %r15
.Ltmp1778:
    00000c33: 	movq	%r14, %rsi
    00000c36: 	movl	$0x5dc, %r8d
    00000c3c: 	movq	%r15, %rdi
    00000c3f: 	addl	$0x1, %r13d
    00000c43: 	movl	$0x5dc, %ecx
    00000c48: 	movl	$0x7d0, %edx
    00000c4d: 	callq	"_ZN18jacobi2D_unrolled2IllEclEPKlPliiii.isra.0/1" # Offset: 3149
    00000c52: 	movq	%r14, %rax
    00000c55: 	movq	%r15, %r14
    00000c58: 	cmpl	%r12d, %r13d
    00000c5b: 	jne	.Ltmp1780 # Offset: 3163
.Ltmp1779:
    00000c5d: 	movq	-0x148(%rbp), %rsi
    00000c64: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000c6b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3179
    00000c70: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c77: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000c7e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c85: 	je	.Ltmp1781 # Offset: 3205
.Ltmp1903:
    00000c8b: 	movq	-0x20(%rax), %r12
    00000c8f: 	callq	clock@PLT # Offset: 3215
    00000c94: 	pxor	%xmm0, %xmm0
    00000c98: 	movq	%rax, end_time(%rip)
    00000c9f: 	movq	%r12, %rdi
    00000ca2: 	subq	start_time(%rip), %rax
    00000ca9: 	cvtsi2sd	%rax, %xmm0
    00000cae: 	divsd	DATAat0x49520(%rip), %xmm0
    00000cb6: 	callq	_Z13record_resultdPKc # Offset: 3254
    00000cbb: 	movq	-0x80(%rbp), %rdi
    00000cbf: 	cmpq	-0x138(%rbp), %rdi
    00000cc6: 	je	.Ltmp1782 # Offset: 3270
    00000cc8: 	movq	-0x70(%rbp), %rax
    00000ccc: 	leaq	0x1(%rax), %rsi
    00000cd0: 	callq	_ZdlPvm@PLT # Offset: 3280
.Ltmp1782:
    00000cd5: 	movq	-0x140(%rbp), %rsi
    00000cdc: 	movq	-0x148(%rbp), %rdi
    00000ce3: 	leaq	DATAat0x492c4(%rip), %rdx
    00000cea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3306
    00000cef: 	movq	%rbx, %rcx
    00000cf2: 	movl	$0x5dc, %edx
    00000cf7: 	movl	$0x7d0, %esi
    00000cfc: 	xorl	%r13d, %r13d
    00000cff: 	movq	-0x128(%rbp), %r15
    00000d06: 	movdqa	DATAat0x49480(%rip), %xmm4
    00000d0e: 	movdqa	DATAat0x49490(%rip), %xmm5
    00000d16: 	movq	%r15, %rdi
    00000d19: 	movaps	%xmm4, -0x60(%rbp)
    00000d1d: 	movaps	%xmm5, -0x50(%rbp)
    00000d21: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 3361
    00000d26: 	movq	-0x130(%rbp), %r14
    00000d2d: 	movl	$0x16e3600, %edx
    00000d32: 	movq	%r15, %rsi
    00000d35: 	movq	%r14, %rdi
    00000d38: 	callq	memcpy@PLT # Offset: 3384
    00000d3d: 	callq	clock@PLT # Offset: 3389
    00000d42: 	movl	iterations(%rip), %r12d
    00000d49: 	movq	%rax, start_time(%rip)
    00000d50: 	testl	%r12d, %r12d
    00000d53: 	jg	.Ltmp1783 # Offset: 3411
    00000d55: 	jmp	.Ltmp1784 # Offset: 3413
    00000d57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1785:
    00000d60: 	movq	%rax, %r15
.Ltmp1783:
    00000d63: 	movq	%r14, %rsi
    00000d66: 	movl	$0x5dc, %r8d
    00000d6c: 	movq	%r15, %rdi
    00000d6f: 	addl	$0x1, %r13d
    00000d73: 	movl	$0x5dc, %ecx
    00000d78: 	movl	$0x7d0, %edx
    00000d7d: 	callq	"_ZN18jacobi2D_unrolled3IllEclEPKlPliiii.isra.0/1" # Offset: 3453
    00000d82: 	movq	%r14, %rax
    00000d85: 	movq	%r15, %r14
    00000d88: 	cmpl	%r12d, %r13d
    00000d8b: 	jne	.Ltmp1785 # Offset: 3467
.Ltmp1784:
    00000d8d: 	movq	-0x148(%rbp), %rsi
    00000d94: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000d9b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3483
    00000da0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000da7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000dae: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000db5: 	je	.Ltmp1786 # Offset: 3509
.Ltmp1897:
    00000dbb: 	movq	-0x20(%rax), %r12
    00000dbf: 	callq	clock@PLT # Offset: 3519
    00000dc4: 	pxor	%xmm0, %xmm0
    00000dc8: 	movq	%rax, end_time(%rip)
    00000dcf: 	movq	%r12, %rdi
    00000dd2: 	subq	start_time(%rip), %rax
    00000dd9: 	cvtsi2sd	%rax, %xmm0
    00000dde: 	divsd	DATAat0x49520(%rip), %xmm0
    00000de6: 	callq	_Z13record_resultdPKc # Offset: 3558
    00000deb: 	movq	-0x80(%rbp), %rdi
    00000def: 	cmpq	-0x138(%rbp), %rdi
    00000df6: 	je	.Ltmp1787 # Offset: 3574
    00000df8: 	movq	-0x70(%rbp), %rax
    00000dfc: 	leaq	0x1(%rax), %rsi
    00000e00: 	callq	_ZdlPvm@PLT # Offset: 3584
.Ltmp1787:
    00000e05: 	movq	-0x140(%rbp), %r15
    00000e0c: 	leaq	-0xc0(%rbp), %rdi
    00000e13: 	leaq	DATAat0x492d9(%rip), %rdx
    00000e1a: 	movq	%r15, %rsi
    00000e1d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3613
    00000e22: 	movl	iterations(%rip), %edx
    00000e28: 	xorl	%r8d, %r8d
    00000e2b: 	xorl	%ecx, %ecx
    00000e2d: 	movl	$0x2dc6c0, %esi
    00000e32: 	movq	-0xc0(%rbp), %rdi
    00000e39: 	callq	_Z9summarizePKciiii # Offset: 3641
    00000e3e: 	movq	-0x148(%rbp), %rdi
    00000e45: 	leaq	DATAat0x49238(%rip), %rdx
    00000e4c: 	movq	%r15, %rsi
    00000e4f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3663
    00000e54: 	movq	-0x128(%rbp), %r14
    00000e5b: 	movq	%rbx, %rcx
    00000e5e: 	movl	$0xfa, %edx
    00000e63: 	movl	$0x12c, %esi
    00000e68: 	movdqa	DATAat0x49480(%rip), %xmm6
    00000e70: 	movdqa	DATAat0x49490(%rip), %xmm7
    00000e78: 	movl	$0x7c0, %r13d
    00000e7e: 	movq	%r14, %rdi
    00000e81: 	movaps	%xmm6, -0x60(%rbp)
    00000e85: 	movaps	%xmm7, -0x50(%rbp)
    00000e89: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 3721
    00000e8e: 	movq	-0x130(%rbp), %r15
    00000e95: 	movl	$0x927c0, %edx
    00000e9a: 	movq	%r14, %rsi
    00000e9d: 	movq	%rax, -0x158(%rbp)
    00000ea4: 	movq	%r15, %rdi
    00000ea7: 	callq	memcpy@PLT # Offset: 3751
    00000eac: 	movl	iterations(%rip), %eax
    00000eb2: 	movl	$0x2710, iterations(%rip)
    00000ebc: 	movl	%eax, -0x178(%rbp)
    00000ec2: 	callq	clock@PLT # Offset: 3778
    00000ec7: 	movl	$0x0, -0x160(%rbp)
    00000ed1: 	movq	%rax, start_time(%rip)
    00000ed8: 	movl	iterations(%rip), %eax
    00000ede: 	movl	%eax, %edi
    00000ee0: 	testl	%eax, %eax
    00000ee2: 	jle	.Ltmp1788 # Offset: 3810
    00000ee8: 	movq	-0x128(%rbp), %rax
    00000eef: 	movq	%rbx, -0x170(%rbp)
    00000ef6: 	movl	%edi, %ebx
    00000ef8: 	movq	%r15, -0x128(%rbp)
    00000eff: 	xorl	%r15d, %r15d
    00000f02: 	movq	%rax, -0x168(%rbp)
    00000f09: 	nopl	(%rax) # Size: 7
.Ltmp1796:
    00000f10: 	movq	-0x128(%rbp), %rax
    00000f17: 	movq	$-0x7d0, %rcx
    00000f1e: 	leaq	-0x7d0(%r14), %r9
    00000f25: 	leaq	0x7d0(%r14), %r8
    00000f2c: 	nopl	(%rax) # Size: 4
.Ltmp1790:
    00000f30: 	movq	%rcx, %rdx
    00000f33: 	movq	%r13, %rsi
    00000f36: 	movq	%rax, %r10
    00000f39: 	negq	%rdx
    00000f3c: 	subq	%rcx, %rsi
.Ltmp1789:
    00000f3f: 	movq	(%r14,%rdx), %rax
    00000f43: 	addq	0x8(%r9,%rdx), %rax
    00000f48: 	addq	0x10(%r14,%rdx), %rax
    00000f4d: 	addq	0x8(%r8,%rdx), %rax
    00000f52: 	leaq	0x5(%rax), %rdi
    00000f56: 	addq	$0x2, %rax
    00000f5a: 	cmovsq	%rdi, %rax
    00000f5e: 	sarq	$0x2, %rax
    00000f62: 	movq	%rax, 0x8(%r10,%rdx)
    00000f67: 	addq	$0x8, %rdx
    00000f6b: 	cmpq	%rdx, %rsi
    00000f6e: 	jne	.Ltmp1789 # Offset: 3950
    00000f70: 	subq	$0x7d0, %rcx
    00000f77: 	movq	%r10, %rax
    00000f7a: 	cmpq	$-0x91ff0, %rcx
    00000f81: 	jne	.Ltmp1790 # Offset: 3969
    00000f83: 	movq	%r10, %rdi
    00000f86: 	xorl	%r12d, %r12d
    00000f89: 	xorl	%eax, %eax
    00000f8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1792:
    00000f90: 	movq	(%r14,%rax,8), %rcx
    00000f94: 	movq	(%rdi,%rax,8), %rdx
    00000f98: 	movq	%rcx, %rsi
    00000f9b: 	subq	%rdx, %rsi
    00000f9e: 	js	.Ltmp1791 # Offset: 3998
    00000fa0: 	addq	$0x1, %rax
    00000fa4: 	addq	%rsi, %r12
    00000fa7: 	cmpq	$0x124f8, %rax
    00000fad: 	jne	.Ltmp1792 # Offset: 4013
.Ltmp1797:
    00000faf: 	movq	%rdi, -0x128(%rbp)
    00000fb6: 	movq	%rdi, %rsi
    00000fb9: 	movl	$0x124f8, %edx
    00000fbe: 	movq	%r14, %rdi
    00000fc1: 	callq	_Z14max_differenceIlET_PKS0_S2_m # Offset: 4033
    00000fc6: 	cmpl	$0x1, %r15d
    00000fca: 	jle	.Ltmp1793 # Offset: 4042
    00000fcc: 	cmpq	$0x9, %r12
    00000fd0: 	jle	.Ltmp1794 # Offset: 4048
    00000fd2: 	testq	%rax, %rax
    00000fd5: 	jle	.Ltmp1794 # Offset: 4053
.Ltmp1793:
    00000fd7: 	addl	$0x1, %r15d
    00000fdb: 	movq	-0x128(%rbp), %rdx
    00000fe2: 	movq	%r14, -0x128(%rbp)
    00000fe9: 	cmpl	%ebx, %r15d
    00000fec: 	je	.Ltmp1795 # Offset: 4076
    00000ff2: 	movq	%rdx, %r14
    00000ff5: 	jmp	.Ltmp1796 # Offset: 4085
    00000ffa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1791:
    00001000: 	subq	%rcx, %rdx
    00001003: 	addq	$0x1, %rax
    00001007: 	addq	%rdx, %r12
    0000100a: 	cmpq	$0x124f8, %rax
    00001010: 	jne	.Ltmp1792 # Offset: 4112
    00001016: 	jmp	.Ltmp1797 # Offset: 4118
.Ltmp1794:
    00001018: 	movq	%rax, -0x150(%rbp)
    0000101f: 	movq	-0x168(%rbp), %rax
    00001026: 	movl	%r15d, -0x160(%rbp)
    0000102d: 	movq	-0x128(%rbp), %r15
    00001034: 	movq	%rax, -0x128(%rbp)
    0000103b: 	movq	-0x170(%rbp), %rbx
    00001042: 	movq	%r15, %r14
.Ltmp1896:
    00001045: 	callq	clock@PLT # Offset: 4165
    0000104a: 	pxor	%xmm0, %xmm0
    0000104e: 	movq	%rax, end_time(%rip)
    00001055: 	subq	start_time(%rip), %rax
    0000105c: 	cvtsi2sd	%rax, %xmm0
    00001061: 	movq	-0x158(%rbp), %rax
    00001068: 	subq	0x497c8(%r14), %rax
    0000106f: 	divsd	DATAat0x49520(%rip), %xmm0
    00001077: 	movq	%rax, %r14
    0000107a: 	movl	-0x160(%rbp), %eax
    00001080: 	cmpl	%eax, iterations(%rip)
    00001086: 	movq	%xmm0, %r13
    0000108b: 	jg	.Ltmp1798 # Offset: 4235
    00001091: 	movq	-0x78(%rbp), %rdx
    00001095: 	movq	-0x80(%rbp), %rsi
    00001099: 	cmpq	$0xa, %r12
    0000109d: 	jle	.Ltmp1799 # Offset: 4253
    000010a3: 	cmpq	$0x1, -0x150(%rbp)
    000010ab: 	jle	.Ltmp1799 # Offset: 4267
    000010b1: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000010b8: 	movq	%rax, %rdi
    000010bb: 	movq	%rax, -0x158(%rbp)
    000010c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4290
    000010c7: 	movq	%rax, %rdi
    000010ca: 	leaq	DATAat0x49199(%rip), %rsi
    000010d1: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 4305
.Ltmp1811:
    000010d6: 	movq	-0x158(%rbp), %r15
    000010dd: 	movl	$0x4, %edx
    000010e2: 	leaq	DATAat0x491b6(%rip), %rsi
    000010e9: 	movq	%r15, %rdi
    000010ec: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4332
    000010f1: 	movl	-0x160(%rbp), %esi
    000010f7: 	movq	%r15, %rdi
    000010fa: 	callq	_ZNSolsEi@PLT # Offset: 4346
    000010ff: 	movq	%rax, %rdi
    00001102: 	movl	$0xb, %edx
    00001107: 	leaq	DATAat0x491bb(%rip), %rsi
    0000110e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4366
    00001113: 	movl	$0xa, %edx
    00001118: 	leaq	DATAat0x491c7(%rip), %rsi
    0000111f: 	movq	%r15, %rdi
    00001122: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4386
    00001127: 	movq	%r12, %rsi
    0000112a: 	movq	%r15, %rdi
    0000112d: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 4397
    00001132: 	movl	$0x7, %edx
    00001137: 	leaq	DATAat0x491d2(%rip), %rsi
    0000113e: 	movq	%rax, %rdi
    00001141: 	movq	%rax, %r12
    00001144: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4420
    00001149: 	movq	-0x150(%rbp), %rsi
    00001150: 	movq	%r12, %rdi
    00001153: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 4435
    00001158: 	movl	$0x10, %edx
    0000115d: 	leaq	DATAat0x491da(%rip), %rsi
    00001164: 	movq	%rax, %rdi
    00001167: 	movq	%rax, %r12
    0000116a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4458
    0000116f: 	movq	%r14, %rsi
    00001172: 	movq	%r12, %rdi
    00001175: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 4469
    0000117a: 	movl	$0x8, %edx
    0000117f: 	leaq	DATAat0x491eb(%rip), %rsi
    00001186: 	movq	%rax, %rdi
    00001189: 	movq	%rax, %r12
    0000118c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4492
    00001191: 	movq	%r13, %xmm0
    00001196: 	movq	%r12, %rdi
    00001199: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 4505
    0000119e: 	movq	%rax, %rdi
    000011a1: 	movl	$0x2, %edx
    000011a6: 	leaq	DATAat0x491f4(%rip), %rsi
    000011ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4525
    000011b2: 	movl	-0x178(%rbp), %eax
    000011b8: 	movq	-0x80(%rbp), %rdi
    000011bc: 	movl	%eax, iterations(%rip)
    000011c2: 	cmpq	-0x138(%rbp), %rdi
    000011c9: 	je	.Ltmp1800 # Offset: 4553
    000011cb: 	movq	-0x70(%rbp), %rax
    000011cf: 	leaq	0x1(%rax), %rsi
    000011d3: 	callq	_ZdlPvm@PLT # Offset: 4563
.Ltmp1800:
    000011d8: 	movq	-0x140(%rbp), %rsi
    000011df: 	movq	-0x148(%rbp), %rdi
    000011e6: 	leaq	DATAat0x4924a(%rip), %rdx
    000011ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4589
    000011f2: 	movq	%rbx, %rcx
    000011f5: 	movl	$0xfa, %edx
    000011fa: 	movl	$0x12c, %esi
    000011ff: 	xorl	%r14d, %r14d
    00001202: 	movq	-0x128(%rbp), %r13
    00001209: 	movdqa	DATAat0x49480(%rip), %xmm4
    00001211: 	movdqa	DATAat0x49490(%rip), %xmm5
    00001219: 	movq	%r13, %rdi
    0000121c: 	movaps	%xmm4, -0x60(%rbp)
    00001220: 	movaps	%xmm5, -0x50(%rbp)
    00001224: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 4644
    00001229: 	movq	-0x130(%rbp), %r15
    00001230: 	movl	$0x927c0, %edx
    00001235: 	movq	%r13, %rsi
    00001238: 	movq	%rax, -0x160(%rbp)
    0000123f: 	movq	%r15, %rdi
    00001242: 	callq	memcpy@PLT # Offset: 4674
    00001247: 	movl	iterations(%rip), %eax
    0000124d: 	movl	$0x2710, iterations(%rip)
    00001257: 	movl	%eax, -0x170(%rbp)
    0000125d: 	callq	clock@PLT # Offset: 4701
    00001262: 	movq	%rax, start_time(%rip)
    00001269: 	movl	iterations(%rip), %eax
    0000126f: 	movl	%eax, %edi
    00001271: 	testl	%eax, %eax
    00001273: 	jle	.Ltmp1801 # Offset: 4723
    00001279: 	movq	-0x128(%rbp), %rax
    00001280: 	movq	%rbx, %r12
    00001283: 	movl	%edi, %ebx
    00001285: 	movq	%rax, -0x168(%rbp)
    0000128c: 	nopl	(%rax) # Size: 4
.Ltmp1809:
    00001290: 	leaq	0x7d8(%r15), %r8
    00001297: 	leaq	0x91ff0(%r13), %rsi
    0000129e: 	movl	$0x1, %edi
    000012a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1803:
    000012a8: 	addl	$0x1, %edi
    000012ab: 	leaq	-0x91820(%rsi), %rdx
    000012b2: 	movq	%r8, %rcx
.Ltmp1802:
    000012b5: 	movq	(%rdx), %rax
    000012b8: 	addq	-0x7c8(%rdx), %rax
    000012bf: 	addq	0x10(%rdx), %rax
    000012c3: 	addq	0x7d8(%rdx), %rax
    000012ca: 	leaq	0x5(%rax), %r9
    000012ce: 	addq	$0x2, %rax
    000012d2: 	cmovsq	%r9, %rax
    000012d6: 	addq	$0x7d0, %rdx
    000012dd: 	addq	$0x7d0, %rcx
    000012e4: 	sarq	$0x2, %rax
    000012e8: 	movq	%rax, -0x7d0(%rcx)
    000012ef: 	cmpq	%rdx, %rsi
    000012f2: 	jne	.Ltmp1802 # Offset: 4850
    000012f4: 	addq	$0x8, %r8
    000012f8: 	addq	$0x8, %rsi
    000012fc: 	cmpl	$0xf9, %edi
    00001302: 	jne	.Ltmp1803 # Offset: 4866
    00001304: 	xorl	%edi, %edi
    00001306: 	xorl	%eax, %eax
    00001308: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1805:
    00001310: 	movq	(%r13,%rax,8), %rcx
    00001315: 	movq	(%r15,%rax,8), %rdx
    00001319: 	movq	%rcx, %rsi
    0000131c: 	subq	%rdx, %rsi
    0000131f: 	js	.Ltmp1804 # Offset: 4895
    00001321: 	addq	$0x1, %rax
    00001325: 	addq	%rsi, %rdi
    00001328: 	cmpq	$0x124f8, %rax
    0000132e: 	jne	.Ltmp1805 # Offset: 4910
.Ltmp1810:
    00001330: 	movq	%rdi, -0x128(%rbp)
    00001337: 	movl	$0x124f8, %edx
    0000133c: 	movq	%r15, %rsi
    0000133f: 	movq	%r13, %rdi
    00001342: 	callq	_Z14max_differenceIlET_PKS0_S2_m # Offset: 4930
    00001347: 	cmpl	$0x1, %r14d
    0000134b: 	jle	.Ltmp1806 # Offset: 4939
    0000134d: 	cmpq	$0x9, -0x128(%rbp)
    00001355: 	jle	.Ltmp1807 # Offset: 4949
    0000135b: 	testq	%rax, %rax
    0000135e: 	jle	.Ltmp1807 # Offset: 4958
.Ltmp1806:
    00001364: 	addl	$0x1, %r14d
    00001368: 	movq	%r15, %rdx
    0000136b: 	movq	%r13, %r15
    0000136e: 	cmpl	%ebx, %r14d
    00001371: 	je	.Ltmp1808 # Offset: 4977
    00001377: 	movq	%rdx, %r13
    0000137a: 	jmp	.Ltmp1809 # Offset: 4986
    0000137f: 	nop # Size: 1
.Ltmp1804:
    00001380: 	subq	%rcx, %rdx
    00001383: 	addq	$0x1, %rax
    00001387: 	addq	%rdx, %rdi
    0000138a: 	cmpq	$0x124f8, %rax
    00001390: 	jne	.Ltmp1805 # Offset: 5008
    00001396: 	jmp	.Ltmp1810 # Offset: 5014
.Ltmp1788:
    00001398: 	callq	clock@PLT # Offset: 5016
    0000139d: 	pxor	%xmm0, %xmm0
    000013a1: 	xorl	%r12d, %r12d
    000013a4: 	movq	$0x0, -0x150(%rbp)
    000013af: 	movq	%rax, end_time(%rip)
    000013b6: 	subq	start_time(%rip), %rax
    000013bd: 	cvtsi2sd	%rax, %xmm0
    000013c2: 	movq	-0x130(%rbp), %rax
    000013c9: 	movq	-0x158(%rbp), %r14
    000013d0: 	divsd	DATAat0x49520(%rip), %xmm0
    000013d8: 	movq	%xmm0, %r13
    000013dd: 	subq	0x497c8(%rax), %r14
.Ltmp1798:
    000013e4: 	movq	-0x80(%rbp), %rsi
    000013e8: 	movq	-0x78(%rbp), %rdx
.Ltmp1799:
    000013ec: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000013f3: 	movq	%rax, %rdi
    000013f6: 	movq	%rax, -0x158(%rbp)
    000013fd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5117
    00001402: 	movq	%rax, %rdi
    00001405: 	leaq	DATAat0x491ab(%rip), %rsi
    0000140c: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5132
    00001411: 	jmp	.Ltmp1811 # Offset: 5137
.Ltmp1807:
    00001416: 	movq	%rax, -0x150(%rbp)
    0000141d: 	movq	%r12, %rbx
    00001420: 	movq	%r15, %r13
    00001423: 	movq	-0x168(%rbp), %rax
    0000142a: 	movq	-0x128(%rbp), %r12
    00001431: 	movq	%rax, -0x128(%rbp)
.Ltmp1864:
    00001438: 	callq	clock@PLT # Offset: 5176
    0000143d: 	pxor	%xmm0, %xmm0
    00001441: 	movq	%rax, end_time(%rip)
    00001448: 	subq	start_time(%rip), %rax
    0000144f: 	cvtsi2sd	%rax, %xmm0
    00001454: 	movq	-0x160(%rbp), %rax
    0000145b: 	subq	0x497c8(%r13), %rax
    00001462: 	divsd	DATAat0x49520(%rip), %xmm0
    0000146a: 	cmpl	iterations(%rip), %r14d
    00001471: 	movq	%xmm0, %r15
    00001476: 	movq	%rax, %r13
    00001479: 	jl	.Ltmp1812 # Offset: 5241
    0000147f: 	movq	-0x78(%rbp), %rdx
    00001483: 	movq	-0x80(%rbp), %rsi
    00001487: 	cmpq	$0xa, %r12
    0000148b: 	jle	.Ltmp1813 # Offset: 5259
    00001491: 	cmpq	$0x1, -0x150(%rbp)
    00001499: 	jle	.Ltmp1813 # Offset: 5273
    0000149f: 	movq	-0x158(%rbp), %rdi
    000014a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5286
    000014ab: 	movq	%rax, %rdi
    000014ae: 	leaq	DATAat0x49199(%rip), %rsi
    000014b5: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 5301
.Ltmp1863:
    000014ba: 	movq	-0x158(%rbp), %rdi
    000014c1: 	movl	$0x4, %edx
    000014c6: 	leaq	DATAat0x491b6(%rip), %rsi
    000014cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5325
    000014d2: 	movl	%r14d, %esi
    000014d5: 	movq	-0x158(%rbp), %r14
    000014dc: 	movq	%r14, %rdi
    000014df: 	callq	_ZNSolsEi@PLT # Offset: 5343
    000014e4: 	movq	%rax, %rdi
    000014e7: 	movl	$0xb, %edx
    000014ec: 	leaq	DATAat0x491bb(%rip), %rsi
    000014f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5363
    000014f8: 	movl	$0xa, %edx
    000014fd: 	leaq	DATAat0x491c7(%rip), %rsi
    00001504: 	movq	%r14, %rdi
    00001507: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5383
    0000150c: 	movq	%r12, %rsi
    0000150f: 	movq	%r14, %rdi
    00001512: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 5394
    00001517: 	movl	$0x7, %edx
    0000151c: 	leaq	DATAat0x491d2(%rip), %rsi
    00001523: 	movq	%rax, %rdi
    00001526: 	movq	%rax, %r12
    00001529: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5417
    0000152e: 	movq	-0x150(%rbp), %rsi
    00001535: 	movq	%r12, %rdi
    00001538: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 5432
    0000153d: 	movl	$0x10, %edx
    00001542: 	leaq	DATAat0x491da(%rip), %rsi
    00001549: 	movq	%rax, %rdi
    0000154c: 	movq	%rax, %r12
    0000154f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5455
    00001554: 	movq	%r13, %rsi
    00001557: 	movq	%r12, %rdi
    0000155a: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 5466
    0000155f: 	movl	$0x8, %edx
    00001564: 	leaq	DATAat0x491eb(%rip), %rsi
    0000156b: 	movq	%rax, %rdi
    0000156e: 	movq	%rax, %r12
    00001571: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5489
    00001576: 	movq	%r15, %xmm0
    0000157b: 	movq	%r12, %rdi
    0000157e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5502
    00001583: 	movq	%rax, %rdi
    00001586: 	movl	$0x2, %edx
    0000158b: 	leaq	DATAat0x491f4(%rip), %rsi
    00001592: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5522
    00001597: 	movl	-0x170(%rbp), %eax
    0000159d: 	movq	-0x80(%rbp), %rdi
    000015a1: 	movl	%eax, iterations(%rip)
    000015a7: 	cmpq	-0x138(%rbp), %rdi
    000015ae: 	je	.Ltmp1814 # Offset: 5550
    000015b0: 	movq	-0x70(%rbp), %rax
    000015b4: 	leaq	0x1(%rax), %rsi
    000015b8: 	callq	_ZdlPvm@PLT # Offset: 5560
.Ltmp1814:
    000015bd: 	movq	-0x140(%rbp), %rsi
    000015c4: 	leaq	DATAat0x4925d(%rip), %rdx
    000015cb: 	movq	%rbx, %rdi
    000015ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5582
    000015d3: 	subq	$0x8, %rsp
    000015d7: 	movq	%rbx, %r9
    000015da: 	movl	$0xfa, %ecx
    000015df: 	movl	$0x12c, %edx
    000015e4: 	pushq	$0x1
    000015e6: 	movq	-0x130(%rbp), %rsi
    000015ed: 	movl	$0xfa, %r8d
    000015f3: 	movq	-0x128(%rbp), %rdi
    000015fa: 	callq	_Z20convergenceLaplace2DIll17jacobi2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5626
    000015ff: 	movq	-0x60(%rbp), %rdi
    00001603: 	leaq	-0x50(%rbp), %rax
    00001607: 	popq	%r11
    00001609: 	movq	%rax, -0x150(%rbp)
    00001610: 	popq	%r12
    00001612: 	cmpq	%rax, %rdi
    00001615: 	je	.Ltmp1815 # Offset: 5653
    00001617: 	movq	-0x50(%rbp), %rax
    0000161b: 	leaq	0x1(%rax), %rsi
    0000161f: 	callq	_ZdlPvm@PLT # Offset: 5663
.Ltmp1815:
    00001624: 	movq	-0x140(%rbp), %rsi
    0000162b: 	leaq	DATAat0x49271(%rip), %rdx
    00001632: 	movq	%rbx, %rdi
    00001635: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5685
    0000163a: 	subq	$0x8, %rsp
    0000163e: 	movq	%rbx, %r9
    00001641: 	movl	$0xfa, %ecx
    00001646: 	movl	$0x12c, %edx
    0000164b: 	pushq	$0x1
    0000164d: 	movq	-0x130(%rbp), %rsi
    00001654: 	movl	$0xfa, %r8d
    0000165a: 	movq	-0x128(%rbp), %rdi
    00001661: 	callq	_Z20convergenceLaplace2DIll18jacobi2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5729
    00001666: 	popq	%r9
    00001668: 	movq	-0x60(%rbp), %rdi
    0000166c: 	popq	%r10
    0000166e: 	cmpq	-0x150(%rbp), %rdi
    00001675: 	je	.Ltmp1816 # Offset: 5749
    00001677: 	movq	-0x50(%rbp), %rax
    0000167b: 	leaq	0x1(%rax), %rsi
    0000167f: 	callq	_ZdlPvm@PLT # Offset: 5759
.Ltmp1816:
    00001684: 	movq	-0x140(%rbp), %rsi
    0000168b: 	leaq	DATAat0x49286(%rip), %rdx
    00001692: 	movq	%rbx, %rdi
    00001695: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5781
    0000169a: 	subq	$0x8, %rsp
    0000169e: 	movq	%rbx, %r9
    000016a1: 	movl	$0xfa, %ecx
    000016a6: 	movl	$0x12c, %edx
    000016ab: 	pushq	$0x1
    000016ad: 	movq	-0x130(%rbp), %rsi
    000016b4: 	movl	$0xfa, %r8d
    000016ba: 	movq	-0x128(%rbp), %rdi
    000016c1: 	callq	_Z20convergenceLaplace2DIll18jacobi2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5825
    000016c6: 	popq	%rdi
    000016c7: 	movq	-0x60(%rbp), %rdi
    000016cb: 	popq	%r8
    000016cd: 	cmpq	-0x150(%rbp), %rdi
    000016d4: 	je	.Ltmp1817 # Offset: 5844
    000016d6: 	movq	-0x50(%rbp), %rax
    000016da: 	leaq	0x1(%rax), %rsi
    000016de: 	callq	_ZdlPvm@PLT # Offset: 5854
.Ltmp1817:
    000016e3: 	movq	-0x140(%rbp), %rsi
    000016ea: 	leaq	DATAat0x4929b(%rip), %rdx
    000016f1: 	movq	%rbx, %rdi
    000016f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5876
    000016f9: 	subq	$0x8, %rsp
    000016fd: 	movq	%rbx, %r9
    00001700: 	movl	$0xfa, %ecx
    00001705: 	movl	$0x12c, %edx
    0000170a: 	pushq	$0x1
    0000170c: 	movq	-0x130(%rbp), %rsi
    00001713: 	movl	$0xfa, %r8d
    00001719: 	movq	-0x128(%rbp), %rdi
    00001720: 	callq	_Z20convergenceLaplace2DIll17jacobi2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 5920
    00001725: 	popq	%rcx
    00001726: 	movq	-0x60(%rbp), %rdi
    0000172a: 	popq	%rsi
    0000172b: 	cmpq	-0x150(%rbp), %rdi
    00001732: 	je	.Ltmp1818 # Offset: 5938
    00001734: 	movq	-0x50(%rbp), %rax
    00001738: 	leaq	0x1(%rax), %rsi
    0000173c: 	callq	_ZdlPvm@PLT # Offset: 5948
.Ltmp1818:
    00001741: 	movq	-0x140(%rbp), %rsi
    00001748: 	leaq	DATAat0x492af(%rip), %rdx
    0000174f: 	movq	%rbx, %rdi
    00001752: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5970
    00001757: 	subq	$0x8, %rsp
    0000175b: 	movq	%rbx, %r9
    0000175e: 	movl	$0xfa, %ecx
    00001763: 	movl	$0x12c, %edx
    00001768: 	pushq	$0x1
    0000176a: 	movq	-0x130(%rbp), %rsi
    00001771: 	movl	$0xfa, %r8d
    00001777: 	movq	-0x128(%rbp), %rdi
    0000177e: 	callq	_Z20convergenceLaplace2DIll18jacobi2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6014
    00001783: 	popq	%rax
    00001784: 	movq	-0x60(%rbp), %rdi
    00001788: 	popq	%rdx
    00001789: 	cmpq	-0x150(%rbp), %rdi
    00001790: 	je	.Ltmp1819 # Offset: 6032
    00001792: 	movq	-0x50(%rbp), %rax
    00001796: 	leaq	0x1(%rax), %rsi
    0000179a: 	callq	_ZdlPvm@PLT # Offset: 6042
.Ltmp1819:
    0000179f: 	movq	-0x140(%rbp), %rsi
    000017a6: 	leaq	DATAat0x492c4(%rip), %rdx
    000017ad: 	movq	%rbx, %rdi
    000017b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6064
    000017b5: 	subq	$0x8, %rsp
    000017b9: 	movq	%rbx, %r9
    000017bc: 	movl	$0xfa, %ecx
    000017c1: 	movl	$0x12c, %edx
    000017c6: 	pushq	$0x1
    000017c8: 	movq	-0x130(%rbp), %rsi
    000017cf: 	movl	$0xfa, %r8d
    000017d5: 	movq	-0x128(%rbp), %rdi
    000017dc: 	callq	_Z20convergenceLaplace2DIll18jacobi2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6108
    000017e1: 	popq	%r15
    000017e3: 	movq	-0x60(%rbp), %rdi
    000017e7: 	popq	%rax
    000017e8: 	cmpq	-0x150(%rbp), %rdi
    000017ef: 	je	.Ltmp1820 # Offset: 6127
    000017f1: 	movq	-0x50(%rbp), %rax
    000017f5: 	leaq	0x1(%rax), %rsi
    000017f9: 	callq	_ZdlPvm@PLT # Offset: 6137
.Ltmp1820:
    000017fe: 	movq	-0x140(%rbp), %rsi
    00001805: 	leaq	DATAat0x492f0(%rip), %rdx
    0000180c: 	movq	%rbx, %rdi
    0000180f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6159
    00001814: 	movq	-0x130(%rbp), %rsi
    0000181b: 	movq	-0x128(%rbp), %rdi
    00001822: 	movq	%rbx, %r9
    00001825: 	movl	$0x5dc, %r8d
    0000182b: 	movl	$0x5dc, %ecx
    00001830: 	movl	$0x7d0, %edx
    00001835: 	callq	_Z13testLaplace2DIll19jacobi_sor2D_simpleIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6197
    0000183a: 	movq	-0x60(%rbp), %rdi
    0000183e: 	cmpq	-0x150(%rbp), %rdi
    00001845: 	je	.Ltmp1821 # Offset: 6213
    00001847: 	movq	-0x50(%rbp), %rax
    0000184b: 	leaq	0x1(%rax), %rsi
    0000184f: 	callq	_ZdlPvm@PLT # Offset: 6223
.Ltmp1821:
    00001854: 	movq	-0x140(%rbp), %rsi
    0000185b: 	leaq	DATAat0x49306(%rip), %rdx
    00001862: 	movq	%rbx, %rdi
    00001865: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6245
    0000186a: 	movq	-0x130(%rbp), %rsi
    00001871: 	movq	-0x128(%rbp), %rdi
    00001878: 	movq	%rbx, %r9
    0000187b: 	movl	$0x5dc, %r8d
    00001881: 	movl	$0x5dc, %ecx
    00001886: 	movl	$0x7d0, %edx
    0000188b: 	callq	_Z13testLaplace2DIll20jacobi_sor2D_swappedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6283
    00001890: 	movq	-0x60(%rbp), %rdi
    00001894: 	cmpq	-0x150(%rbp), %rdi
    0000189b: 	je	.Ltmp1822 # Offset: 6299
    0000189d: 	movq	-0x50(%rbp), %rax
    000018a1: 	leaq	0x1(%rax), %rsi
    000018a5: 	callq	_ZdlPvm@PLT # Offset: 6309
.Ltmp1822:
    000018aa: 	movq	-0x140(%rbp), %rsi
    000018b1: 	movq	-0x148(%rbp), %rdi
    000018b8: 	leaq	DATAat0x4931d(%rip), %rdx
    000018bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6335
    000018c4: 	movq	-0x128(%rbp), %r15
    000018cb: 	movq	%rbx, %rcx
    000018ce: 	movl	$0x5dc, %edx
    000018d3: 	movl	$0x7d0, %esi
    000018d8: 	movdqa	DATAat0x49480(%rip), %xmm6
    000018e0: 	movdqa	DATAat0x49490(%rip), %xmm7
    000018e8: 	movq	%r15, %rdi
    000018eb: 	movaps	%xmm6, -0x60(%rbp)
    000018ef: 	movaps	%xmm7, -0x50(%rbp)
    000018f3: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 6387
    000018f8: 	movq	-0x130(%rbp), %r13
    000018ff: 	movq	%r15, %rsi
    00001902: 	movl	$0x16e3600, %edx
    00001907: 	movq	%r13, %rdi
    0000190a: 	callq	memcpy@PLT # Offset: 6410
    0000190f: 	callq	clock@PLT # Offset: 6415
    00001914: 	movq	%r13, %r10
    00001917: 	movq	%r15, %r9
    0000191a: 	xorl	%r11d, %r11d
    0000191d: 	movl	iterations(%rip), %r14d
    00001924: 	movq	%rax, start_time(%rip)
    0000192b: 	movq	$-0x2ed0, %r8
    00001932: 	movq	-0x128(%rbp), %rsi
    00001939: 	testl	%r14d, %r14d
    0000193c: 	jle	.Ltmp1823 # Offset: 6460
.Ltmp1827:
    00001942: 	movq	$-0x16dd840, %rax
    00001949: 	leaq	-0x2ee0(%r9), %r12
    00001950: 	leaq	0x2ee0(%r9), %rdi
    00001957: 	movq	%rsi, %rdx
    0000195a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1825:
    00001960: 	movq	%rax, %rcx
    00001963: 	movq	%r8, %rsi
    00001966: 	movq	%rdx, %r15
    00001969: 	negq	%rcx
    0000196c: 	subq	%rax, %rsi
.Ltmp1824:
    0000196f: 	movq	0x2ec8(%r9,%rcx), %r13
    00001977: 	addq	0x2ed0(%r12,%rcx), %r13
    0000197f: 	addq	0x2ed8(%r9,%rcx), %r13
    00001987: 	addq	0x2ed0(%rdi,%rcx), %r13
    0000198f: 	leaq	0x5(%r13), %rdx
    00001993: 	addq	$0x2, %r13
    00001997: 	cmovnsq	%r13, %rdx
    0000199b: 	sarq	$0x2, %rdx
    0000199f: 	subq	0x2ed0(%r10,%rcx), %rdx
    000019a7: 	imulq	$0x71, %rdx, %rdx
    000019ab: 	sarq	$0x6, %rdx
    000019af: 	addq	0x2ed0(%r10,%rcx), %rdx
    000019b7: 	movq	%rdx, 0x2ed0(%r10,%rcx)
    000019bf: 	subq	$0x8, %rcx
    000019c3: 	cmpq	%rcx, %rsi
    000019c6: 	jne	.Ltmp1824 # Offset: 6598
    000019c8: 	movq	%r15, %rdx
    000019cb: 	addq	$0x2ee0, %rax
    000019d1: 	jne	.Ltmp1825 # Offset: 6609
    000019d3: 	addl	$0x1, %r11d
    000019d7: 	movq	%r10, %rax
    000019da: 	movq	%r15, %rsi
    000019dd: 	movq	%r9, %r10
    000019e0: 	cmpl	%r14d, %r11d
    000019e3: 	je	.Ltmp1826 # Offset: 6627
    000019e5: 	movq	%rax, %r9
    000019e8: 	jmp	.Ltmp1827 # Offset: 6632
.Ltmp1826:
    000019ed: 	movq	%r15, -0x128(%rbp)
.Ltmp1823:
    000019f4: 	movq	-0x148(%rbp), %rsi
    000019fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a02: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6658
    00001a07: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a0e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001a15: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a1c: 	je	.Ltmp1828 # Offset: 6684
.Ltmp1905:
    00001a22: 	movq	-0x20(%rax), %r12
    00001a26: 	callq	clock@PLT # Offset: 6694
    00001a2b: 	pxor	%xmm0, %xmm0
    00001a2f: 	movq	%rax, end_time(%rip)
    00001a36: 	movq	%r12, %rdi
    00001a39: 	subq	start_time(%rip), %rax
    00001a40: 	cvtsi2sd	%rax, %xmm0
    00001a45: 	divsd	DATAat0x49520(%rip), %xmm0
    00001a4d: 	callq	_Z13record_resultdPKc # Offset: 6733
    00001a52: 	movq	-0x80(%rbp), %rdi
    00001a56: 	cmpq	-0x138(%rbp), %rdi
    00001a5d: 	je	.Ltmp1829 # Offset: 6749
    00001a5f: 	movq	-0x70(%rbp), %rax
    00001a63: 	leaq	0x1(%rax), %rsi
    00001a67: 	callq	_ZdlPvm@PLT # Offset: 6759
.Ltmp1829:
    00001a6c: 	movq	-0x140(%rbp), %rsi
    00001a73: 	movq	-0x148(%rbp), %rdi
    00001a7a: 	leaq	DATAat0x49335(%rip), %rdx
    00001a81: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6785
    00001a86: 	movq	-0x128(%rbp), %r15
    00001a8d: 	movq	%rbx, %rcx
    00001a90: 	movl	$0x5dc, %edx
    00001a95: 	movl	$0x7d0, %esi
    00001a9a: 	movdqa	DATAat0x49480(%rip), %xmm4
    00001aa2: 	movdqa	DATAat0x49490(%rip), %xmm5
    00001aaa: 	movq	%r15, %rdi
    00001aad: 	movaps	%xmm4, -0x60(%rbp)
    00001ab1: 	movaps	%xmm5, -0x50(%rbp)
    00001ab5: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 6837
    00001aba: 	movq	-0x130(%rbp), %r13
    00001ac1: 	movq	%r15, %rsi
    00001ac4: 	movl	$0x16e3600, %edx
    00001ac9: 	movq	%r13, %rdi
    00001acc: 	callq	memcpy@PLT # Offset: 6860
    00001ad1: 	callq	clock@PLT # Offset: 6865
    00001ad6: 	movq	%r13, %r10
    00001ad9: 	movq	%r15, %r9
    00001adc: 	xorl	%r11d, %r11d
    00001adf: 	movl	iterations(%rip), %r14d
    00001ae6: 	movq	%rax, start_time(%rip)
    00001aed: 	movq	$-0x2ed0, %r8
    00001af4: 	movq	-0x128(%rbp), %rsi
    00001afb: 	testl	%r14d, %r14d
    00001afe: 	jle	.Ltmp1830 # Offset: 6910
.Ltmp1834:
    00001b04: 	movq	$-0x2ee0, %rax
    00001b0b: 	leaq	-0x2ee0(%r9), %r12
    00001b12: 	leaq	0x2ee0(%r9), %rdi
    00001b19: 	movq	%rsi, %rdx
    00001b1c: 	nopl	(%rax) # Size: 4
.Ltmp1832:
    00001b20: 	movq	%rax, %rcx
    00001b23: 	movq	%r8, %rsi
    00001b26: 	movq	%rdx, %r15
    00001b29: 	negq	%rcx
    00001b2c: 	subq	%rax, %rsi
.Ltmp1831:
    00001b2f: 	movq	0x2ec8(%r9,%rcx), %r13
    00001b37: 	addq	0x2ed0(%r12,%rcx), %r13
    00001b3f: 	addq	0x2ed8(%r9,%rcx), %r13
    00001b47: 	addq	0x2ed0(%rdi,%rcx), %r13
    00001b4f: 	leaq	0x5(%r13), %rdx
    00001b53: 	addq	$0x2, %r13
    00001b57: 	cmovnsq	%r13, %rdx
    00001b5b: 	sarq	$0x2, %rdx
    00001b5f: 	subq	0x2ed0(%r10,%rcx), %rdx
    00001b67: 	imulq	$0x71, %rdx, %rdx
    00001b6b: 	sarq	$0x6, %rdx
    00001b6f: 	addq	0x2ed0(%r10,%rcx), %rdx
    00001b77: 	movq	%rdx, 0x2ed0(%r10,%rcx)
    00001b7f: 	subq	$0x8, %rcx
    00001b83: 	cmpq	%rcx, %rsi
    00001b86: 	jne	.Ltmp1831 # Offset: 7046
    00001b88: 	subq	$0x2ee0, %rax
    00001b8e: 	movq	%r15, %rdx
    00001b91: 	cmpq	$-0x16e0720, %rax
    00001b97: 	jne	.Ltmp1832 # Offset: 7063
    00001b99: 	addl	$0x1, %r11d
    00001b9d: 	movq	%r10, %rax
    00001ba0: 	movq	%r15, %rsi
    00001ba3: 	movq	%r9, %r10
    00001ba6: 	cmpl	%r14d, %r11d
    00001ba9: 	je	.Ltmp1833 # Offset: 7081
    00001bab: 	movq	%rax, %r9
    00001bae: 	jmp	.Ltmp1834 # Offset: 7086
.Ltmp1833:
    00001bb3: 	movq	%r15, -0x128(%rbp)
.Ltmp1830:
    00001bba: 	movq	-0x148(%rbp), %rsi
    00001bc1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001bc8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7112
    00001bcd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001bd4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001bdb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001be2: 	je	.Ltmp1835 # Offset: 7138
.Ltmp1907:
    00001be8: 	movq	-0x20(%rax), %r12
    00001bec: 	callq	clock@PLT # Offset: 7148
    00001bf1: 	pxor	%xmm0, %xmm0
    00001bf5: 	movq	%rax, end_time(%rip)
    00001bfc: 	movq	%r12, %rdi
    00001bff: 	subq	start_time(%rip), %rax
    00001c06: 	cvtsi2sd	%rax, %xmm0
    00001c0b: 	divsd	DATAat0x49520(%rip), %xmm0
    00001c13: 	callq	_Z13record_resultdPKc # Offset: 7187
    00001c18: 	movq	-0x80(%rbp), %rdi
    00001c1c: 	cmpq	-0x138(%rbp), %rdi
    00001c23: 	je	.Ltmp1836 # Offset: 7203
    00001c25: 	movq	-0x70(%rbp), %rax
    00001c29: 	leaq	0x1(%rax), %rsi
    00001c2d: 	callq	_ZdlPvm@PLT # Offset: 7213
.Ltmp1836:
    00001c32: 	movq	-0x140(%rbp), %rsi
    00001c39: 	leaq	DATAat0x4934e(%rip), %rdx
    00001c40: 	movq	%rbx, %rdi
    00001c43: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7235
    00001c48: 	movq	-0x130(%rbp), %rsi
    00001c4f: 	movq	-0x128(%rbp), %rdi
    00001c56: 	movq	%rbx, %r9
    00001c59: 	movl	$0x5dc, %r8d
    00001c5f: 	movl	$0x5dc, %ecx
    00001c64: 	movl	$0x7d0, %edx
    00001c69: 	callq	_Z13testLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7273
    00001c6e: 	movq	-0x60(%rbp), %rdi
    00001c72: 	cmpq	-0x150(%rbp), %rdi
    00001c79: 	je	.Ltmp1837 # Offset: 7289
    00001c7b: 	movq	-0x50(%rbp), %rax
    00001c7f: 	leaq	0x1(%rax), %rsi
    00001c83: 	callq	_ZdlPvm@PLT # Offset: 7299
.Ltmp1837:
    00001c88: 	movq	-0x140(%rbp), %rsi
    00001c8f: 	movq	-0x148(%rbp), %rdi
    00001c96: 	leaq	DATAat0x49367(%rip), %rdx
    00001c9d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7325
    00001ca2: 	movq	%rbx, %rcx
    00001ca5: 	movl	$0x5dc, %edx
    00001caa: 	movl	$0x7d0, %esi
    00001caf: 	xorl	%r13d, %r13d
    00001cb2: 	movq	-0x128(%rbp), %r15
    00001cb9: 	movdqa	DATAat0x49480(%rip), %xmm6
    00001cc1: 	movdqa	DATAat0x49490(%rip), %xmm7
    00001cc9: 	movq	%r15, %rdi
    00001ccc: 	movaps	%xmm6, -0x60(%rbp)
    00001cd0: 	movaps	%xmm7, -0x50(%rbp)
    00001cd4: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 7380
    00001cd9: 	movq	-0x130(%rbp), %r14
    00001ce0: 	movl	$0x16e3600, %edx
    00001ce5: 	movq	%r15, %rsi
    00001ce8: 	movq	%r14, %rdi
    00001ceb: 	callq	memcpy@PLT # Offset: 7403
    00001cf0: 	callq	clock@PLT # Offset: 7408
    00001cf5: 	movl	iterations(%rip), %r12d
    00001cfc: 	movq	%rax, start_time(%rip)
    00001d03: 	testl	%r12d, %r12d
    00001d06: 	jg	.Ltmp1838 # Offset: 7430
    00001d08: 	jmp	.Ltmp1839 # Offset: 7432
    00001d0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1840:
    00001d10: 	movq	%rax, %r15
.Ltmp1838:
    00001d13: 	movq	%r14, %rsi
    00001d16: 	movl	$0x5dc, %r8d
    00001d1c: 	movq	%r15, %rdi
    00001d1f: 	addl	$0x1, %r13d
    00001d23: 	movl	$0x5dc, %ecx
    00001d28: 	movl	$0x7d0, %edx
    00001d2d: 	callq	"_ZN21jacobi_sor2D_unrolledIllEclEPlS1_iiii.isra.0/1" # Offset: 7469
    00001d32: 	movq	%r14, %rax
    00001d35: 	movq	%r15, %r14
    00001d38: 	cmpl	%r12d, %r13d
    00001d3b: 	jne	.Ltmp1840 # Offset: 7483
.Ltmp1839:
    00001d3d: 	movq	-0x148(%rbp), %rsi
    00001d44: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001d4b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7499
    00001d50: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001d57: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001d5e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001d65: 	je	.Ltmp1841 # Offset: 7525
.Ltmp1906:
    00001d6b: 	movq	-0x20(%rax), %r12
    00001d6f: 	callq	clock@PLT # Offset: 7535
    00001d74: 	pxor	%xmm0, %xmm0
    00001d78: 	movq	%rax, end_time(%rip)
    00001d7f: 	movq	%r12, %rdi
    00001d82: 	subq	start_time(%rip), %rax
    00001d89: 	cvtsi2sd	%rax, %xmm0
    00001d8e: 	divsd	DATAat0x49520(%rip), %xmm0
    00001d96: 	callq	_Z13record_resultdPKc # Offset: 7574
    00001d9b: 	movq	-0x80(%rbp), %rdi
    00001d9f: 	cmpq	-0x138(%rbp), %rdi
    00001da6: 	je	.Ltmp1842 # Offset: 7590
    00001da8: 	movq	-0x70(%rbp), %rax
    00001dac: 	leaq	0x1(%rax), %rsi
    00001db0: 	callq	_ZdlPvm@PLT # Offset: 7600
.Ltmp1842:
    00001db5: 	movq	-0x140(%rbp), %rsi
    00001dbc: 	movq	-0x148(%rbp), %rdi
    00001dc3: 	leaq	DATAat0x4937f(%rip), %rdx
    00001dca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7626
    00001dcf: 	movq	%rbx, %rcx
    00001dd2: 	movl	$0x5dc, %edx
    00001dd7: 	movl	$0x7d0, %esi
    00001ddc: 	xorl	%r13d, %r13d
    00001ddf: 	movq	-0x128(%rbp), %r15
    00001de6: 	movdqa	DATAat0x49480(%rip), %xmm4
    00001dee: 	movdqa	DATAat0x49490(%rip), %xmm5
    00001df6: 	movq	%r15, %rdi
    00001df9: 	movaps	%xmm4, -0x60(%rbp)
    00001dfd: 	movaps	%xmm5, -0x50(%rbp)
    00001e01: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 7681
    00001e06: 	movq	-0x130(%rbp), %r14
    00001e0d: 	movl	$0x16e3600, %edx
    00001e12: 	movq	%r15, %rsi
    00001e15: 	movq	%r14, %rdi
    00001e18: 	callq	memcpy@PLT # Offset: 7704
    00001e1d: 	callq	clock@PLT # Offset: 7709
    00001e22: 	movl	iterations(%rip), %r12d
    00001e29: 	movq	%rax, start_time(%rip)
    00001e30: 	testl	%r12d, %r12d
    00001e33: 	jg	.Ltmp1843 # Offset: 7731
    00001e35: 	jmp	.Ltmp1844 # Offset: 7733
    00001e37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1845:
    00001e40: 	movq	%rax, %r15
.Ltmp1843:
    00001e43: 	movq	%r14, %rsi
    00001e46: 	movl	$0x5dc, %r8d
    00001e4c: 	movq	%r15, %rdi
    00001e4f: 	addl	$0x1, %r13d
    00001e53: 	movl	$0x5dc, %ecx
    00001e58: 	movl	$0x7d0, %edx
    00001e5d: 	callq	"_ZN22jacobi_sor2D_unrolled2IllEclEPlS1_iiii.isra.0/1" # Offset: 7773
    00001e62: 	movq	%r14, %rax
    00001e65: 	movq	%r15, %r14
    00001e68: 	cmpl	%r12d, %r13d
    00001e6b: 	jne	.Ltmp1845 # Offset: 7787
.Ltmp1844:
    00001e6d: 	movq	-0x148(%rbp), %rsi
    00001e74: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e7b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7803
    00001e80: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e87: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001e8e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e95: 	je	.Ltmp1846 # Offset: 7829
.Ltmp1909:
    00001e9b: 	movq	-0x20(%rax), %r12
    00001e9f: 	callq	clock@PLT # Offset: 7839
    00001ea4: 	pxor	%xmm0, %xmm0
    00001ea8: 	movq	%rax, end_time(%rip)
    00001eaf: 	movq	%r12, %rdi
    00001eb2: 	subq	start_time(%rip), %rax
    00001eb9: 	cvtsi2sd	%rax, %xmm0
    00001ebe: 	divsd	DATAat0x49520(%rip), %xmm0
    00001ec6: 	callq	_Z13record_resultdPKc # Offset: 7878
    00001ecb: 	movq	-0x80(%rbp), %rdi
    00001ecf: 	cmpq	-0x138(%rbp), %rdi
    00001ed6: 	je	.Ltmp1847 # Offset: 7894
    00001ed8: 	movq	-0x70(%rbp), %rax
    00001edc: 	leaq	0x1(%rax), %rsi
    00001ee0: 	callq	_ZdlPvm@PLT # Offset: 7904
.Ltmp1847:
    00001ee5: 	movq	-0x140(%rbp), %rsi
    00001eec: 	movq	-0x148(%rbp), %rdi
    00001ef3: 	leaq	DATAat0x49398(%rip), %rdx
    00001efa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7930
    00001eff: 	movq	%rbx, %rcx
    00001f02: 	movl	$0x5dc, %edx
    00001f07: 	movl	$0x7d0, %esi
    00001f0c: 	xorl	%r13d, %r13d
    00001f0f: 	movq	-0x128(%rbp), %r15
    00001f16: 	movdqa	DATAat0x49480(%rip), %xmm6
    00001f1e: 	movdqa	DATAat0x49490(%rip), %xmm7
    00001f26: 	movq	%r15, %rdi
    00001f29: 	movaps	%xmm6, -0x60(%rbp)
    00001f2d: 	movaps	%xmm7, -0x50(%rbp)
    00001f31: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 7985
    00001f36: 	movq	-0x130(%rbp), %r14
    00001f3d: 	movl	$0x16e3600, %edx
    00001f42: 	movq	%r15, %rsi
    00001f45: 	movq	%r14, %rdi
    00001f48: 	callq	memcpy@PLT # Offset: 8008
    00001f4d: 	callq	clock@PLT # Offset: 8013
    00001f52: 	movl	iterations(%rip), %r12d
    00001f59: 	movq	%rax, start_time(%rip)
    00001f60: 	testl	%r12d, %r12d
    00001f63: 	jg	.Ltmp1848 # Offset: 8035
    00001f65: 	jmp	.Ltmp1849 # Offset: 8037
    00001f67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1850:
    00001f70: 	movq	%rax, %r15
.Ltmp1848:
    00001f73: 	movq	%r14, %rsi
    00001f76: 	movl	$0x5dc, %r8d
    00001f7c: 	movq	%r15, %rdi
    00001f7f: 	addl	$0x1, %r13d
    00001f83: 	movl	$0x5dc, %ecx
    00001f88: 	movl	$0x7d0, %edx
    00001f8d: 	callq	"_ZN22jacobi_sor2D_unrolled3IllEclEPlS1_iiii.isra.0/1" # Offset: 8077
    00001f92: 	movq	%r14, %rax
    00001f95: 	movq	%r15, %r14
    00001f98: 	cmpl	%r12d, %r13d
    00001f9b: 	jne	.Ltmp1850 # Offset: 8091
.Ltmp1849:
    00001f9d: 	movq	-0x148(%rbp), %rsi
    00001fa4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001fab: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8107
    00001fb0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001fb7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001fbe: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001fc5: 	je	.Ltmp1851 # Offset: 8133
.Ltmp1908:
    00001fcb: 	movq	-0x20(%rax), %r12
    00001fcf: 	callq	clock@PLT # Offset: 8143
    00001fd4: 	pxor	%xmm0, %xmm0
    00001fd8: 	movq	%rax, end_time(%rip)
    00001fdf: 	movq	%r12, %rdi
    00001fe2: 	subq	start_time(%rip), %rax
    00001fe9: 	cvtsi2sd	%rax, %xmm0
    00001fee: 	divsd	DATAat0x49520(%rip), %xmm0
    00001ff6: 	callq	_Z13record_resultdPKc # Offset: 8182
    00001ffb: 	movq	-0x80(%rbp), %rdi
    00001fff: 	cmpq	-0x138(%rbp), %rdi
    00002006: 	je	.Ltmp1852 # Offset: 8198
    00002008: 	movq	-0x70(%rbp), %rax
    0000200c: 	leaq	0x1(%rax), %rsi
    00002010: 	callq	_ZdlPvm@PLT # Offset: 8208
.Ltmp1852:
    00002015: 	movq	-0x140(%rbp), %r15
    0000201c: 	leaq	-0xa0(%rbp), %rdi
    00002023: 	leaq	DATAat0x493b1(%rip), %rdx
    0000202a: 	movq	%r15, %rsi
    0000202d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8237
    00002032: 	movl	iterations(%rip), %edx
    00002038: 	xorl	%r8d, %r8d
    0000203b: 	xorl	%ecx, %ecx
    0000203d: 	movl	$0x2dc6c0, %esi
    00002042: 	movq	-0xa0(%rbp), %rdi
    00002049: 	callq	_Z9summarizePKciiii # Offset: 8265
    0000204e: 	movq	-0x148(%rbp), %rdi
    00002055: 	leaq	DATAat0x492f0(%rip), %rdx
    0000205c: 	movq	%r15, %rsi
    0000205f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8287
    00002064: 	movq	-0x128(%rbp), %r14
    0000206b: 	movq	%rbx, %rcx
    0000206e: 	movl	$0xfa, %edx
    00002073: 	movl	$0x12c, %esi
    00002078: 	movdqa	DATAat0x49480(%rip), %xmm4
    00002080: 	movdqa	DATAat0x49490(%rip), %xmm5
    00002088: 	movl	$0x7c0, %r13d
    0000208e: 	movq	%r14, %rdi
    00002091: 	movaps	%xmm4, -0x60(%rbp)
    00002095: 	movaps	%xmm5, -0x50(%rbp)
    00002099: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 8345
    0000209e: 	movq	-0x130(%rbp), %r15
    000020a5: 	movl	$0x927c0, %edx
    000020aa: 	movq	%r14, %rsi
    000020ad: 	movq	%rax, -0x170(%rbp)
    000020b4: 	movq	%r15, %rdi
    000020b7: 	callq	memcpy@PLT # Offset: 8375
    000020bc: 	movl	iterations(%rip), %eax
    000020c2: 	movl	$0x2710, iterations(%rip)
    000020cc: 	movl	%eax, -0x188(%rbp)
    000020d2: 	callq	clock@PLT # Offset: 8402
    000020d7: 	movl	$0x0, -0x160(%rbp)
    000020e1: 	movq	%rax, start_time(%rip)
    000020e8: 	movl	iterations(%rip), %eax
    000020ee: 	movl	%eax, %edi
    000020f0: 	testl	%eax, %eax
    000020f2: 	jle	.Ltmp1853 # Offset: 8434
    000020f8: 	movq	-0x128(%rbp), %rax
    000020ff: 	movq	%rbx, -0x180(%rbp)
    00002106: 	movl	%edi, %ebx
    00002108: 	movq	%r15, -0x128(%rbp)
    0000210f: 	xorl	%r15d, %r15d
    00002112: 	movq	%rax, -0x178(%rbp)
    00002119: 	nopl	(%rax) # Size: 7
.Ltmp1861:
    00002120: 	movq	-0x128(%rbp), %rax
    00002127: 	movq	$-0x7d0, %rcx
    0000212e: 	leaq	-0x7d0(%r14), %r9
    00002135: 	leaq	0x7d0(%r14), %r8
    0000213c: 	nopl	(%rax) # Size: 4
.Ltmp1855:
    00002140: 	movq	%rcx, %rdx
    00002143: 	movq	%r13, %rsi
    00002146: 	movq	%rax, %r10
    00002149: 	negq	%rdx
    0000214c: 	subq	%rcx, %rsi
.Ltmp1854:
    0000214f: 	movq	0x8(%r10,%rdx), %rax
    00002154: 	movq	(%r14,%rdx), %rdi
    00002158: 	addq	0x8(%r9,%rdx), %rdi
    0000215d: 	addq	0x10(%r14,%rdx), %rdi
    00002162: 	addq	0x8(%r8,%rdx), %rdi
    00002167: 	movq	%rax, -0x128(%rbp)
    0000216e: 	leaq	0x5(%rdi), %rax
    00002172: 	addq	$0x2, %rdi
    00002176: 	cmovnsq	%rdi, %rax
    0000217a: 	sarq	$0x2, %rax
    0000217e: 	subq	-0x128(%rbp), %rax
    00002185: 	imulq	$0x71, %rax, %rax
    00002189: 	sarq	$0x6, %rax
    0000218d: 	addq	-0x128(%rbp), %rax
    00002194: 	movq	%rax, 0x8(%r10,%rdx)
    00002199: 	addq	$0x8, %rdx
    0000219d: 	cmpq	%rdx, %rsi
    000021a0: 	jne	.Ltmp1854 # Offset: 8608
    000021a2: 	subq	$0x7d0, %rcx
    000021a9: 	movq	%r10, %rax
    000021ac: 	cmpq	$-0x91ff0, %rcx
    000021b3: 	jne	.Ltmp1855 # Offset: 8627
    000021b5: 	movq	%r10, %rdi
    000021b8: 	xorl	%r12d, %r12d
    000021bb: 	xorl	%eax, %eax
    000021bd: 	nopl	(%rax) # Size: 3
.Ltmp1857:
    000021c0: 	movq	(%r14,%rax,8), %rcx
    000021c4: 	movq	(%rdi,%rax,8), %rdx
    000021c8: 	movq	%rcx, %rsi
    000021cb: 	subq	%rdx, %rsi
    000021ce: 	js	.Ltmp1856 # Offset: 8654
    000021d0: 	addq	$0x1, %rax
    000021d4: 	addq	%rsi, %r12
    000021d7: 	cmpq	$0x124f8, %rax
    000021dd: 	jne	.Ltmp1857 # Offset: 8669
.Ltmp1862:
    000021df: 	movq	%rdi, -0x128(%rbp)
    000021e6: 	movq	%rdi, %rsi
    000021e9: 	movl	$0x124f8, %edx
    000021ee: 	movq	%r14, %rdi
    000021f1: 	callq	_Z14max_differenceIlET_PKS0_S2_m # Offset: 8689
    000021f6: 	cmpl	$0x1, %r15d
    000021fa: 	jle	.Ltmp1858 # Offset: 8698
    000021fc: 	cmpq	$0x9, %r12
    00002200: 	jle	.Ltmp1859 # Offset: 8704
    00002206: 	testq	%rax, %rax
    00002209: 	jle	.Ltmp1859 # Offset: 8713
.Ltmp1858:
    0000220f: 	addl	$0x1, %r15d
    00002213: 	movq	-0x128(%rbp), %rdx
    0000221a: 	movq	%r14, -0x128(%rbp)
    00002221: 	cmpl	%ebx, %r15d
    00002224: 	je	.Ltmp1860 # Offset: 8740
    0000222a: 	movq	%rdx, %r14
    0000222d: 	jmp	.Ltmp1861 # Offset: 8749
    00002232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1856:
    00002238: 	subq	%rcx, %rdx
    0000223b: 	addq	$0x1, %rax
    0000223f: 	addq	%rdx, %r12
    00002242: 	cmpq	$0x124f8, %rax
    00002248: 	jne	.Ltmp1857 # Offset: 8776
    0000224e: 	jmp	.Ltmp1862 # Offset: 8782
.Ltmp1801:
    00002250: 	callq	clock@PLT # Offset: 8784
    00002255: 	pxor	%xmm0, %xmm0
    00002259: 	xorl	%r12d, %r12d
    0000225c: 	movq	$0x0, -0x150(%rbp)
    00002267: 	movq	%rax, end_time(%rip)
    0000226e: 	subq	start_time(%rip), %rax
    00002275: 	cvtsi2sd	%rax, %xmm0
    0000227a: 	movq	-0x130(%rbp), %rax
    00002281: 	movq	-0x160(%rbp), %r13
    00002288: 	divsd	DATAat0x49520(%rip), %xmm0
    00002290: 	movq	%xmm0, %r15
    00002295: 	subq	0x497c8(%rax), %r13
.Ltmp1812:
    0000229c: 	movq	-0x80(%rbp), %rsi
    000022a0: 	movq	-0x78(%rbp), %rdx
.Ltmp1813:
    000022a4: 	movq	-0x158(%rbp), %rdi
    000022ab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8875
    000022b0: 	movq	%rax, %rdi
    000022b3: 	leaq	DATAat0x491ab(%rip), %rsi
    000022ba: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 8890
    000022bf: 	jmp	.Ltmp1863 # Offset: 8895
.Ltmp1808:
    000022c4: 	movq	%rax, -0x150(%rbp)
    000022cb: 	movq	-0x168(%rbp), %rax
    000022d2: 	movq	%r12, %rbx
    000022d5: 	movq	-0x128(%rbp), %r12
    000022dc: 	movq	%rax, -0x128(%rbp)
    000022e3: 	jmp	.Ltmp1864 # Offset: 8931
.Ltmp1859:
    000022e8: 	movq	%rax, -0x168(%rbp)
    000022ef: 	movq	-0x178(%rbp), %rax
    000022f6: 	movl	%r15d, -0x160(%rbp)
    000022fd: 	movq	-0x128(%rbp), %r15
    00002304: 	movq	%rax, -0x128(%rbp)
    0000230b: 	movq	-0x180(%rbp), %rbx
    00002312: 	movq	%r15, %r14
.Ltmp1895:
    00002315: 	callq	clock@PLT # Offset: 8981
    0000231a: 	pxor	%xmm0, %xmm0
    0000231e: 	movq	%rax, end_time(%rip)
    00002325: 	subq	start_time(%rip), %rax
    0000232c: 	cvtsi2sd	%rax, %xmm0
    00002331: 	movq	-0x170(%rbp), %rax
    00002338: 	subq	0x497c8(%r14), %rax
    0000233f: 	divsd	DATAat0x49520(%rip), %xmm0
    00002347: 	movq	%rax, %r14
    0000234a: 	movl	-0x160(%rbp), %eax
    00002350: 	cmpl	iterations(%rip), %eax
    00002356: 	movq	%xmm0, %r13
    0000235b: 	jl	.Ltmp1865 # Offset: 9051
    00002361: 	movq	-0x78(%rbp), %rdx
    00002365: 	movq	-0x80(%rbp), %rsi
    00002369: 	cmpq	$0xa, %r12
    0000236d: 	jle	.Ltmp1866 # Offset: 9069
    00002373: 	cmpq	$0x1, -0x168(%rbp)
    0000237b: 	jle	.Ltmp1866 # Offset: 9083
    00002381: 	movq	-0x158(%rbp), %rdi
    00002388: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9096
    0000238d: 	movq	%rax, %rdi
    00002390: 	leaq	DATAat0x49199(%rip), %rsi
    00002397: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 9111
.Ltmp1878:
    0000239c: 	movq	-0x158(%rbp), %r15
    000023a3: 	movl	$0x4, %edx
    000023a8: 	leaq	DATAat0x491b6(%rip), %rsi
    000023af: 	movq	%r15, %rdi
    000023b2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9138
    000023b7: 	movl	-0x160(%rbp), %esi
    000023bd: 	movq	%r15, %rdi
    000023c0: 	callq	_ZNSolsEi@PLT # Offset: 9152
    000023c5: 	movq	%rax, %rdi
    000023c8: 	movl	$0xb, %edx
    000023cd: 	leaq	DATAat0x491bb(%rip), %rsi
    000023d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9172
    000023d9: 	movl	$0xa, %edx
    000023de: 	leaq	DATAat0x491c7(%rip), %rsi
    000023e5: 	movq	%r15, %rdi
    000023e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9192
    000023ed: 	movq	%r12, %rsi
    000023f0: 	movq	%r15, %rdi
    000023f3: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 9203
    000023f8: 	movl	$0x7, %edx
    000023fd: 	leaq	DATAat0x491d2(%rip), %rsi
    00002404: 	movq	%rax, %rdi
    00002407: 	movq	%rax, %r12
    0000240a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9226
    0000240f: 	movq	-0x168(%rbp), %rsi
    00002416: 	movq	%r12, %rdi
    00002419: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 9241
    0000241e: 	movl	$0x10, %edx
    00002423: 	leaq	DATAat0x491da(%rip), %rsi
    0000242a: 	movq	%rax, %rdi
    0000242d: 	movq	%rax, %r12
    00002430: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9264
    00002435: 	movq	%r14, %rsi
    00002438: 	movq	%r12, %rdi
    0000243b: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 9275
    00002440: 	movl	$0x8, %edx
    00002445: 	leaq	DATAat0x491eb(%rip), %rsi
    0000244c: 	movq	%rax, %rdi
    0000244f: 	movq	%rax, %r12
    00002452: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9298
    00002457: 	movq	%r13, %xmm0
    0000245c: 	movq	%r12, %rdi
    0000245f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 9311
    00002464: 	movq	%rax, %rdi
    00002467: 	leaq	DATAat0x491f4(%rip), %rsi
    0000246e: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 9326
    00002473: 	movl	-0x188(%rbp), %eax
    00002479: 	movq	-0x80(%rbp), %rdi
    0000247d: 	movl	%eax, iterations(%rip)
    00002483: 	cmpq	-0x138(%rbp), %rdi
    0000248a: 	je	.Ltmp1867 # Offset: 9354
    0000248c: 	movq	-0x70(%rbp), %rax
    00002490: 	leaq	0x1(%rax), %rsi
    00002494: 	callq	_ZdlPvm@PLT # Offset: 9364
.Ltmp1867:
    00002499: 	movq	-0x140(%rbp), %rsi
    000024a0: 	movq	-0x148(%rbp), %rdi
    000024a7: 	leaq	DATAat0x49306(%rip), %rdx
    000024ae: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9390
    000024b3: 	movq	%rbx, %rcx
    000024b6: 	movl	$0xfa, %edx
    000024bb: 	movl	$0x12c, %esi
    000024c0: 	xorl	%r14d, %r14d
    000024c3: 	movq	-0x128(%rbp), %r13
    000024ca: 	movdqa	DATAat0x49480(%rip), %xmm6
    000024d2: 	movdqa	DATAat0x49490(%rip), %xmm7
    000024da: 	movq	%r13, %rdi
    000024dd: 	movaps	%xmm6, -0x60(%rbp)
    000024e1: 	movaps	%xmm7, -0x50(%rbp)
    000024e5: 	callq	_Z29laplace_initial_condition_setIlET_PS0_iiPKS0_ # Offset: 9445
    000024ea: 	movq	-0x130(%rbp), %r15
    000024f1: 	movl	$0x927c0, %edx
    000024f6: 	movq	%r13, %rsi
    000024f9: 	movq	%rax, -0x160(%rbp)
    00002500: 	movq	%r15, %rdi
    00002503: 	callq	memcpy@PLT # Offset: 9475
    00002508: 	movl	iterations(%rip), %eax
    0000250e: 	movl	$0x2710, iterations(%rip)
    00002518: 	movl	%eax, -0x170(%rbp)
    0000251e: 	callq	clock@PLT # Offset: 9502
    00002523: 	movq	%rax, start_time(%rip)
    0000252a: 	movl	iterations(%rip), %eax
    00002530: 	movl	%eax, %edi
    00002532: 	testl	%eax, %eax
    00002534: 	jle	.Ltmp1868 # Offset: 9524
    0000253a: 	movq	-0x128(%rbp), %rax
    00002541: 	movq	%rbx, %r12
    00002544: 	movl	%edi, %ebx
    00002546: 	movq	%rax, -0x168(%rbp)
    0000254d: 	nopl	(%rax) # Size: 3
.Ltmp1876:
    00002550: 	leaq	0x7d0(%r13), %r8
    00002557: 	leaq	0x91ff8(%r15), %rsi
    0000255e: 	movl	$0x1, %edi
    00002563: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1870:
    00002568: 	addl	$0x1, %edi
    0000256b: 	leaq	-0x91820(%rsi), %rcx
    00002572: 	movq	%r8, %rdx
.Ltmp1869:
    00002575: 	movq	(%rdx), %r9
    00002578: 	addq	-0x7c8(%rdx), %r9
    0000257f: 	addq	0x10(%rdx), %r9
    00002583: 	addq	0x7d8(%rdx), %r9
    0000258a: 	leaq	0x5(%r9), %rax
    0000258e: 	addq	$0x2, %r9
    00002592: 	cmovnsq	%r9, %rax
    00002596: 	addq	$0x7d0, %rcx
    0000259d: 	addq	$0x7d0, %rdx
    000025a4: 	sarq	$0x2, %rax
    000025a8: 	subq	-0x7d0(%rcx), %rax
    000025af: 	imulq	$0x71, %rax, %rax
    000025b3: 	sarq	$0x6, %rax
    000025b7: 	addq	-0x7d0(%rcx), %rax
    000025be: 	movq	%rax, -0x7d0(%rcx)
    000025c5: 	cmpq	%rcx, %rsi
    000025c8: 	jne	.Ltmp1869 # Offset: 9672
    000025ca: 	addq	$0x8, %r8
    000025ce: 	addq	$0x8, %rsi
    000025d2: 	cmpl	$0xf9, %edi
    000025d8: 	jne	.Ltmp1870 # Offset: 9688
    000025da: 	xorl	%edi, %edi
    000025dc: 	xorl	%eax, %eax
    000025de: 	nop # Size: 2
.Ltmp1872:
    000025e0: 	movq	(%r13,%rax,8), %rcx
    000025e5: 	movq	(%r15,%rax,8), %rdx
    000025e9: 	movq	%rcx, %rsi
    000025ec: 	subq	%rdx, %rsi
    000025ef: 	js	.Ltmp1871 # Offset: 9711
    000025f1: 	addq	$0x1, %rax
    000025f5: 	addq	%rsi, %rdi
    000025f8: 	cmpq	$0x124f8, %rax
    000025fe: 	jne	.Ltmp1872 # Offset: 9726
.Ltmp1877:
    00002600: 	movq	%rdi, -0x128(%rbp)
    00002607: 	movl	$0x124f8, %edx
    0000260c: 	movq	%r15, %rsi
    0000260f: 	movq	%r13, %rdi
    00002612: 	callq	_Z14max_differenceIlET_PKS0_S2_m # Offset: 9746
    00002617: 	cmpl	$0x1, %r14d
    0000261b: 	jle	.Ltmp1873 # Offset: 9755
    0000261d: 	cmpq	$0x9, -0x128(%rbp)
    00002625: 	jle	.Ltmp1874 # Offset: 9765
    0000262b: 	testq	%rax, %rax
    0000262e: 	jle	.Ltmp1874 # Offset: 9774
.Ltmp1873:
    00002634: 	addl	$0x1, %r14d
    00002638: 	movq	%r15, %rdx
    0000263b: 	movq	%r13, %r15
    0000263e: 	cmpl	%ebx, %r14d
    00002641: 	je	.Ltmp1875 # Offset: 9793
    00002647: 	movq	%rdx, %r13
    0000264a: 	jmp	.Ltmp1876 # Offset: 9802
    0000264f: 	nop # Size: 1
.Ltmp1871:
    00002650: 	subq	%rcx, %rdx
    00002653: 	addq	$0x1, %rax
    00002657: 	addq	%rdx, %rdi
    0000265a: 	cmpq	$0x124f8, %rax
    00002660: 	jne	.Ltmp1872 # Offset: 9824
    00002666: 	jmp	.Ltmp1877 # Offset: 9830
.Ltmp1853:
    00002668: 	callq	clock@PLT # Offset: 9832
    0000266d: 	pxor	%xmm0, %xmm0
    00002671: 	xorl	%r12d, %r12d
    00002674: 	movq	$0x0, -0x168(%rbp)
    0000267f: 	movq	%rax, end_time(%rip)
    00002686: 	subq	start_time(%rip), %rax
    0000268d: 	cvtsi2sd	%rax, %xmm0
    00002692: 	movq	-0x130(%rbp), %rax
    00002699: 	movq	-0x170(%rbp), %r14
    000026a0: 	divsd	DATAat0x49520(%rip), %xmm0
    000026a8: 	movq	%xmm0, %r13
    000026ad: 	subq	0x497c8(%rax), %r14
.Ltmp1865:
    000026b4: 	movq	-0x80(%rbp), %rsi
    000026b8: 	movq	-0x78(%rbp), %rdx
.Ltmp1866:
    000026bc: 	movq	-0x158(%rbp), %rdi
    000026c3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9923
    000026c8: 	movq	%rax, %rdi
    000026cb: 	leaq	DATAat0x491ab(%rip), %rsi
    000026d2: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 9938
    000026d7: 	jmp	.Ltmp1878 # Offset: 9943
.Ltmp1874:
    000026dc: 	movq	%rax, -0x148(%rbp)
    000026e3: 	movq	%r12, %rbx
    000026e6: 	movq	%r15, %r13
    000026e9: 	movq	-0x168(%rbp), %rax
    000026f0: 	movq	-0x128(%rbp), %r12
    000026f7: 	movq	%rax, -0x128(%rbp)
.Ltmp1894:
    000026fe: 	callq	clock@PLT # Offset: 9982
    00002703: 	pxor	%xmm0, %xmm0
    00002707: 	movq	%rax, end_time(%rip)
    0000270e: 	subq	start_time(%rip), %rax
    00002715: 	cvtsi2sd	%rax, %xmm0
    0000271a: 	movq	-0x160(%rbp), %rax
    00002721: 	subq	0x497c8(%r13), %rax
    00002728: 	divsd	DATAat0x49520(%rip), %xmm0
    00002730: 	cmpl	iterations(%rip), %r14d
    00002737: 	movq	%xmm0, %r15
    0000273c: 	movq	%rax, %r13
    0000273f: 	jl	.Ltmp1879 # Offset: 10047
    00002745: 	movq	-0x78(%rbp), %rdx
    00002749: 	movq	-0x80(%rbp), %rsi
    0000274d: 	cmpq	$0xa, %r12
    00002751: 	jle	.Ltmp1880 # Offset: 10065
    00002757: 	cmpq	$0x1, -0x148(%rbp)
    0000275f: 	jle	.Ltmp1880 # Offset: 10079
    00002765: 	movq	-0x158(%rbp), %rdi
    0000276c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10092
    00002771: 	movq	%rax, %rdi
    00002774: 	leaq	DATAat0x49199(%rip), %rsi
    0000277b: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 10107
.Ltmp1893:
    00002780: 	movq	-0x158(%rbp), %rdi
    00002787: 	movl	$0x4, %edx
    0000278c: 	leaq	DATAat0x491b6(%rip), %rsi
    00002793: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10131
    00002798: 	movl	%r14d, %esi
    0000279b: 	movq	-0x158(%rbp), %r14
    000027a2: 	movq	%r14, %rdi
    000027a5: 	callq	_ZNSolsEi@PLT # Offset: 10149
    000027aa: 	movq	%rax, %rdi
    000027ad: 	movl	$0xb, %edx
    000027b2: 	leaq	DATAat0x491bb(%rip), %rsi
    000027b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10169
    000027be: 	movl	$0xa, %edx
    000027c3: 	leaq	DATAat0x491c7(%rip), %rsi
    000027ca: 	movq	%r14, %rdi
    000027cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10189
    000027d2: 	movq	%r12, %rsi
    000027d5: 	movq	%r14, %rdi
    000027d8: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 10200
    000027dd: 	movl	$0x7, %edx
    000027e2: 	leaq	DATAat0x491d2(%rip), %rsi
    000027e9: 	movq	%rax, %rdi
    000027ec: 	movq	%rax, %r12
    000027ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10223
    000027f4: 	movq	-0x148(%rbp), %rsi
    000027fb: 	movq	%r12, %rdi
    000027fe: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 10238
    00002803: 	movl	$0x10, %edx
    00002808: 	leaq	DATAat0x491da(%rip), %rsi
    0000280f: 	movq	%rax, %rdi
    00002812: 	movq	%rax, %r12
    00002815: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10261
    0000281a: 	movq	%r13, %rsi
    0000281d: 	movq	%r12, %rdi
    00002820: 	callq	_ZNSo9_M_insertIlEERSoT_@PLT # Offset: 10272
    00002825: 	movl	$0x8, %edx
    0000282a: 	leaq	DATAat0x491eb(%rip), %rsi
    00002831: 	movq	%rax, %rdi
    00002834: 	movq	%rax, %r12
    00002837: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10295
    0000283c: 	movq	%r15, %xmm0
    00002841: 	movq	%r12, %rdi
    00002844: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 10308
    00002849: 	movq	%rax, %rdi
    0000284c: 	movl	$0x2, %edx
    00002851: 	leaq	DATAat0x491f4(%rip), %rsi
    00002858: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10328
    0000285d: 	movl	-0x170(%rbp), %eax
    00002863: 	movq	-0x80(%rbp), %rdi
    00002867: 	movl	%eax, iterations(%rip)
    0000286d: 	cmpq	-0x138(%rbp), %rdi
    00002874: 	je	.Ltmp1881 # Offset: 10356
    00002876: 	movq	-0x70(%rbp), %rax
    0000287a: 	leaq	0x1(%rax), %rsi
    0000287e: 	callq	_ZdlPvm@PLT # Offset: 10366
.Ltmp1881:
    00002883: 	movq	-0x140(%rbp), %rsi
    0000288a: 	leaq	DATAat0x4931d(%rip), %rdx
    00002891: 	movq	%rbx, %rdi
    00002894: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10388
    00002899: 	subq	$0x8, %rsp
    0000289d: 	movq	%rbx, %r9
    000028a0: 	movl	$0xfa, %ecx
    000028a5: 	movl	$0x12c, %edx
    000028aa: 	pushq	$0x1
    000028ac: 	movq	-0x130(%rbp), %rsi
    000028b3: 	movl	$0xfa, %r8d
    000028b9: 	movq	-0x128(%rbp), %rdi
    000028c0: 	callq	_Z20convergenceLaplace2DIll21jacobi_sor2D_reversedIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10432
    000028c5: 	popq	%r13
    000028c7: 	movq	-0x60(%rbp), %rdi
    000028cb: 	popq	%r14
    000028cd: 	cmpq	-0x150(%rbp), %rdi
    000028d4: 	je	.Ltmp1882 # Offset: 10452
    000028d6: 	movq	-0x50(%rbp), %rax
    000028da: 	leaq	0x1(%rax), %rsi
    000028de: 	callq	_ZdlPvm@PLT # Offset: 10462
.Ltmp1882:
    000028e3: 	movq	-0x140(%rbp), %rsi
    000028ea: 	leaq	DATAat0x49335(%rip), %rdx
    000028f1: 	movq	%rbx, %rdi
    000028f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10484
    000028f9: 	subq	$0x8, %rsp
    000028fd: 	movq	%rbx, %r9
    00002900: 	movl	$0xfa, %ecx
    00002905: 	movl	$0x12c, %edx
    0000290a: 	pushq	$0x1
    0000290c: 	movq	-0x130(%rbp), %rsi
    00002913: 	movl	$0xfa, %r8d
    00002919: 	movq	-0x128(%rbp), %rdi
    00002920: 	callq	_Z20convergenceLaplace2DIll22jacobi_sor2D_reversedXIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10528
    00002925: 	popq	%r11
    00002927: 	movq	-0x60(%rbp), %rdi
    0000292b: 	popq	%r12
    0000292d: 	cmpq	-0x150(%rbp), %rdi
    00002934: 	je	.Ltmp1883 # Offset: 10548
    00002936: 	movq	-0x50(%rbp), %rax
    0000293a: 	leaq	0x1(%rax), %rsi
    0000293e: 	callq	_ZdlPvm@PLT # Offset: 10558
.Ltmp1883:
    00002943: 	movq	-0x140(%rbp), %rsi
    0000294a: 	leaq	DATAat0x4934e(%rip), %rdx
    00002951: 	movq	%rbx, %rdi
    00002954: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10580
    00002959: 	subq	$0x8, %rsp
    0000295d: 	movq	%rbx, %r9
    00002960: 	movl	$0xfa, %ecx
    00002965: 	movl	$0x12c, %edx
    0000296a: 	pushq	$0x1
    0000296c: 	movq	-0x130(%rbp), %rsi
    00002973: 	movl	$0xfa, %r8d
    00002979: 	movq	-0x128(%rbp), %rdi
    00002980: 	callq	_Z20convergenceLaplace2DIll22jacobi_sor2D_reversedYIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10624
    00002985: 	popq	%r9
    00002987: 	movq	-0x60(%rbp), %rdi
    0000298b: 	popq	%r10
    0000298d: 	cmpq	-0x150(%rbp), %rdi
    00002994: 	je	.Ltmp1884 # Offset: 10644
    00002996: 	movq	-0x50(%rbp), %rax
    0000299a: 	leaq	0x1(%rax), %rsi
    0000299e: 	callq	_ZdlPvm@PLT # Offset: 10654
.Ltmp1884:
    000029a3: 	movq	-0x140(%rbp), %rsi
    000029aa: 	leaq	DATAat0x49367(%rip), %rdx
    000029b1: 	movq	%rbx, %rdi
    000029b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10676
    000029b9: 	subq	$0x8, %rsp
    000029bd: 	movq	%rbx, %r9
    000029c0: 	movl	$0xfa, %ecx
    000029c5: 	movl	$0x12c, %edx
    000029ca: 	pushq	$0x1
    000029cc: 	movq	-0x130(%rbp), %rsi
    000029d3: 	movl	$0xfa, %r8d
    000029d9: 	movq	-0x128(%rbp), %rdi
    000029e0: 	callq	_Z20convergenceLaplace2DIll21jacobi_sor2D_unrolledIllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10720
    000029e5: 	popq	%rdi
    000029e6: 	movq	-0x60(%rbp), %rdi
    000029ea: 	popq	%r8
    000029ec: 	cmpq	-0x150(%rbp), %rdi
    000029f3: 	je	.Ltmp1885 # Offset: 10739
    000029f5: 	movq	-0x50(%rbp), %rax
    000029f9: 	leaq	0x1(%rax), %rsi
    000029fd: 	callq	_ZdlPvm@PLT # Offset: 10749
.Ltmp1885:
    00002a02: 	movq	-0x140(%rbp), %rsi
    00002a09: 	leaq	DATAat0x4937f(%rip), %rdx
    00002a10: 	movq	%rbx, %rdi
    00002a13: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10771
    00002a18: 	subq	$0x8, %rsp
    00002a1c: 	movq	%rbx, %r9
    00002a1f: 	movl	$0xfa, %ecx
    00002a24: 	movl	$0x12c, %edx
    00002a29: 	pushq	$0x1
    00002a2b: 	movq	-0x130(%rbp), %rsi
    00002a32: 	movl	$0xfa, %r8d
    00002a38: 	movq	-0x128(%rbp), %rdi
    00002a3f: 	callq	_Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled2IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10815
    00002a44: 	popq	%rcx
    00002a45: 	movq	-0x60(%rbp), %rdi
    00002a49: 	popq	%rsi
    00002a4a: 	cmpq	-0x150(%rbp), %rdi
    00002a51: 	je	.Ltmp1886 # Offset: 10833
    00002a53: 	movq	-0x50(%rbp), %rax
    00002a57: 	leaq	0x1(%rax), %rsi
    00002a5b: 	callq	_ZdlPvm@PLT # Offset: 10843
.Ltmp1886:
    00002a60: 	movq	-0x140(%rbp), %rsi
    00002a67: 	leaq	DATAat0x49398(%rip), %rdx
    00002a6e: 	movq	%rbx, %rdi
    00002a71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10865
    00002a76: 	subq	$0x8, %rsp
    00002a7a: 	movq	%rbx, %r9
    00002a7d: 	movl	$0xfa, %ecx
    00002a82: 	movl	$0x12c, %edx
    00002a87: 	pushq	$0x1
    00002a89: 	movq	-0x130(%rbp), %rsi
    00002a90: 	movl	$0xfa, %r8d
    00002a96: 	movq	-0x128(%rbp), %rdi
    00002a9d: 	callq	_Z20convergenceLaplace2DIll22jacobi_sor2D_unrolled3IllEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 10909
    00002aa2: 	popq	%rax
    00002aa3: 	movq	-0x60(%rbp), %rdi
    00002aa7: 	popq	%rdx
    00002aa8: 	cmpq	-0x150(%rbp), %rdi
    00002aaf: 	je	.Ltmp1887 # Offset: 10927
    00002ab1: 	movq	-0x50(%rbp), %rax
    00002ab5: 	leaq	0x1(%rax), %rsi
    00002ab9: 	callq	_ZdlPvm@PLT # Offset: 10937
.Ltmp1887:
    00002abe: 	movl	-0x184(%rbp), %eax
    00002ac4: 	movq	-0xa0(%rbp), %rdi
    00002acb: 	movl	%eax, iterations(%rip)
    00002ad1: 	leaq	-0x90(%rbp), %rax
    00002ad8: 	cmpq	%rax, %rdi
    00002adb: 	je	.Ltmp1888 # Offset: 10971
    00002add: 	movq	-0x90(%rbp), %rax
    00002ae4: 	leaq	0x1(%rax), %rsi
    00002ae8: 	callq	_ZdlPvm@PLT # Offset: 10984
.Ltmp1888:
    00002aed: 	movq	-0xc0(%rbp), %rdi
    00002af4: 	leaq	-0xb0(%rbp), %rax
    00002afb: 	cmpq	%rax, %rdi
    00002afe: 	je	.Ltmp1889 # Offset: 11006
    00002b00: 	movq	-0xb0(%rbp), %rax
    00002b07: 	leaq	0x1(%rax), %rsi
    00002b0b: 	callq	_ZdlPvm@PLT # Offset: 11019
.Ltmp1889:
    00002b10: 	movq	-0x130(%rbp), %rdi
    00002b17: 	movl	$0x8, %esi
    00002b1c: 	callq	_ZdlPvm@PLT # Offset: 11036
    00002b21: 	movq	-0x128(%rbp), %rdi
    00002b28: 	movl	$0x8, %esi
    00002b2d: 	callq	_ZdlPvm@PLT # Offset: 11053
    00002b32: 	movq	-0xe0(%rbp), %rdi
    00002b39: 	leaq	-0xd0(%rbp), %rax
    00002b40: 	cmpq	%rax, %rdi
    00002b43: 	je	.Ltmp1890 # Offset: 11075
    00002b45: 	movq	-0xd0(%rbp), %rax
    00002b4c: 	leaq	0x1(%rax), %rsi
    00002b50: 	callq	_ZdlPvm@PLT # Offset: 11088
.Ltmp1890:
    00002b55: 	movq	-0x100(%rbp), %rdi
    00002b5c: 	leaq	-0xf0(%rbp), %rax
    00002b63: 	cmpq	%rax, %rdi
    00002b66: 	je	.Ltmp1891 # Offset: 11110
    00002b68: 	movq	-0xf0(%rbp), %rax
    00002b6f: 	leaq	0x1(%rax), %rsi
    00002b73: 	callq	_ZdlPvm@PLT # Offset: 11123
.Ltmp1891:
    00002b78: 	movq	-0x38(%rbp), %rax
    00002b7c: 	subq	%fs:0x28, %rax
    00002b85: 	jne	.Ltmp1892 # Offset: 11141
    00002b8b: 	leaq	-0x28(%rbp), %rsp
    00002b8f: 	popq	%rbx
    00002b90: 	popq	%r12
    00002b92: 	popq	%r13
    00002b94: 	popq	%r14
    00002b96: 	popq	%r15
    00002b98: 	popq	%rbp
    00002b99: 	retq # Offset: 11161
.Ltmp1868:
    00002b9a: 	callq	clock@PLT # Offset: 11162
    00002b9f: 	pxor	%xmm0, %xmm0
    00002ba3: 	xorl	%r12d, %r12d
    00002ba6: 	movq	$0x0, -0x148(%rbp)
    00002bb1: 	movq	%rax, end_time(%rip)
    00002bb8: 	subq	start_time(%rip), %rax
    00002bbf: 	cvtsi2sd	%rax, %xmm0
    00002bc4: 	movq	-0x130(%rbp), %rax
    00002bcb: 	movq	-0x160(%rbp), %r13
    00002bd2: 	divsd	DATAat0x49520(%rip), %xmm0
    00002bda: 	movq	%xmm0, %r15
    00002bdf: 	subq	0x497c8(%rax), %r13
.Ltmp1879:
    00002be6: 	movq	-0x80(%rbp), %rsi
    00002bea: 	movq	-0x78(%rbp), %rdx
.Ltmp1880:
    00002bee: 	movq	-0x158(%rbp), %rdi
    00002bf5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11253
    00002bfa: 	movq	%rax, %rdi
    00002bfd: 	leaq	DATAat0x491ab(%rip), %rsi
    00002c04: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 11268
    00002c09: 	jmp	.Ltmp1893 # Offset: 11273
.Ltmp1875:
    00002c0e: 	movq	%rax, -0x148(%rbp)
    00002c15: 	movq	-0x168(%rbp), %rax
    00002c1c: 	movq	%r12, %rbx
    00002c1f: 	movq	-0x128(%rbp), %r12
    00002c26: 	movq	%rax, -0x128(%rbp)
    00002c2d: 	jmp	.Ltmp1894 # Offset: 11309
.Ltmp1860:
    00002c32: 	movq	-0x178(%rbp), %rbx
    00002c39: 	movl	%r15d, -0x160(%rbp)
    00002c40: 	movq	%rax, -0x168(%rbp)
    00002c47: 	movq	%rbx, -0x128(%rbp)
    00002c4e: 	movq	-0x180(%rbp), %rbx
    00002c55: 	jmp	.Ltmp1895 # Offset: 11349
.Ltmp1795:
    00002c5a: 	movq	-0x168(%rbp), %rbx
    00002c61: 	movq	%rax, -0x150(%rbp)
    00002c68: 	movl	%r15d, -0x160(%rbp)
    00002c6f: 	movq	%rbx, -0x128(%rbp)
    00002c76: 	movq	-0x170(%rbp), %rbx
    00002c7d: 	jmp	.Ltmp1896 # Offset: 11389
.Ltmp1786:
    00002c82: 	movq	-0x8(%rdx), %rax
    00002c86: 	addq	$0x200, %rax
    00002c8c: 	jmp	.Ltmp1897 # Offset: 11404
.Ltmp1769:
    00002c91: 	movq	-0x8(%rdx), %rax
    00002c95: 	addq	$0x200, %rax
    00002c9b: 	jmp	.Ltmp1898 # Offset: 11419
.Ltmp1762:
    00002ca0: 	movq	-0x8(%rdx), %rax
    00002ca4: 	addq	$0x200, %rax
    00002caa: 	jmp	.Ltmp1899 # Offset: 11434
.Ltmp1755:
    00002caf: 	movq	-0x8(%rdx), %rax
    00002cb3: 	addq	$0x200, %rax
    00002cb9: 	jmp	.Ltmp1900 # Offset: 11449
.Ltmp1748:
    00002cbe: 	movq	-0x8(%rdx), %rax
    00002cc2: 	addq	$0x200, %rax
    00002cc8: 	jmp	.Ltmp1901 # Offset: 11464
.Ltmp1741:
    00002ccd: 	movq	-0x8(%rdx), %rax
    00002cd1: 	addq	$0x200, %rax
    00002cd7: 	jmp	.Ltmp1902 # Offset: 11479
.Ltmp1781:
    00002cdc: 	movq	-0x8(%rdx), %rax
    00002ce0: 	addq	$0x200, %rax
    00002ce6: 	jmp	.Ltmp1903 # Offset: 11494
.Ltmp1776:
    00002ceb: 	movq	-0x8(%rdx), %rax
    00002cef: 	addq	$0x200, %rax
    00002cf5: 	jmp	.Ltmp1904 # Offset: 11509
.Ltmp1828:
    00002cfa: 	movq	-0x8(%rdx), %rax
    00002cfe: 	addq	$0x200, %rax
    00002d04: 	jmp	.Ltmp1905 # Offset: 11524
.Ltmp1841:
    00002d09: 	movq	-0x8(%rdx), %rax
    00002d0d: 	addq	$0x200, %rax
    00002d13: 	jmp	.Ltmp1906 # Offset: 11539
.Ltmp1835:
    00002d18: 	movq	-0x8(%rdx), %rax
    00002d1c: 	addq	$0x200, %rax
    00002d22: 	jmp	.Ltmp1907 # Offset: 11554
.Ltmp1851:
    00002d27: 	movq	-0x8(%rdx), %rax
    00002d2b: 	addq	$0x200, %rax
    00002d31: 	jmp	.Ltmp1908 # Offset: 11569
.Ltmp1846:
    00002d36: 	movq	-0x8(%rdx), %rax
    00002d3a: 	addq	$0x200, %rax
    00002d40: 	jmp	.Ltmp1909 # Offset: 11584
.Ltmp1892:
    00002d45: 	callq	__stack_chk_fail@PLT # Offset: 11589
    00002d4a: 	endbr64
.Ltmp1924:
    00002d4e: 	movq	%rax, %rbx
    00002d51: 	jmp	.Ltmp1910 # Offset: 11601
    00002d56: 	endbr64
    00002d5a: 	movq	%rax, %rbx
    00002d5d: 	movq	-0x60(%rbp), %rdi
    00002d61: 	leaq	-0x50(%rbp), %rax
    00002d65: 	cmpq	%rax, %rdi
    00002d68: 	je	.Ltmp1911 # Offset: 11624
.Ltmp1923:
    00002d6a: 	movq	-0x50(%rbp), %rax
    00002d6e: 	leaq	0x1(%rax), %rsi
    00002d72: 	callq	_ZdlPvm@PLT # Offset: 11634
.Ltmp1911:
    00002d77: 	movq	-0xc0(%rbp), %rdi
    00002d7e: 	leaq	-0xb0(%rbp), %rax
    00002d85: 	cmpq	%rax, %rdi
    00002d88: 	jne	.Ltmp1912 # Offset: 11656
.Ltmp1915:
    00002d8e: 	movq	-0x130(%rbp), %rdi
    00002d95: 	movl	$0x8, %esi
    00002d9a: 	callq	_ZdlPvm@PLT # Offset: 11674
.Ltmp1930:
    00002d9f: 	movq	-0x128(%rbp), %rdi
    00002da6: 	movl	$0x8, %esi
    00002dab: 	callq	_ZdlPvm@PLT # Offset: 11691
.Ltmp1925:
    00002db0: 	movq	-0xe0(%rbp), %rdi
    00002db7: 	leaq	-0xd0(%rbp), %rax
    00002dbe: 	cmpq	%rax, %rdi
    00002dc1: 	je	.Ltmp1913 # Offset: 11713
    00002dc3: 	movq	-0xd0(%rbp), %rax
    00002dca: 	leaq	0x1(%rax), %rsi
    00002dce: 	callq	_ZdlPvm@PLT # Offset: 11726
.Ltmp1913:
    00002dd3: 	movq	-0x100(%rbp), %rdi
    00002dda: 	leaq	-0xf0(%rbp), %rax
    00002de1: 	cmpq	%rax, %rdi
    00002de4: 	je	.Ltmp1914 # Offset: 11748
    00002de6: 	movq	-0xf0(%rbp), %rax
    00002ded: 	leaq	0x1(%rax), %rsi
    00002df1: 	callq	_ZdlPvm@PLT # Offset: 11761
.Ltmp1914:
    00002df6: 	movq	%rbx, %rdi
    00002df9: 	callq	_Unwind_Resume@PLT # Offset: 11769
.Ltmp1910:
    00002dfe: 	movq	-0x80(%rbp), %rdi
    00002e02: 	cmpq	-0x138(%rbp), %rdi
    00002e09: 	je	.Ltmp1911 # Offset: 11785
    00002e0f: 	movq	-0x70(%rbp), %rax
    00002e13: 	leaq	0x1(%rax), %rsi
    00002e17: 	callq	_ZdlPvm@PLT # Offset: 11799
    00002e1c: 	jmp	.Ltmp1911 # Offset: 11804
.Ltmp1912:
    00002e21: 	movq	-0xb0(%rbp), %rax
    00002e28: 	leaq	0x1(%rax), %rsi
    00002e2c: 	callq	_ZdlPvm@PLT # Offset: 11820
    00002e31: 	jmp	.Ltmp1915 # Offset: 11825
    00002e36: 	endbr64
.Ltmp1917:
    00002e3a: 	movq	%rax, %rbx
    00002e3d: 	jmp	.Ltmp1916 # Offset: 11837
    00002e3f: 	endbr64
    00002e43: 	jmp	.Ltmp1917 # Offset: 11843
    00002e45: 	endbr64
.Ltmp1919:
    00002e49: 	movq	%rax, %rbx
    00002e4c: 	jmp	.Ltmp1918 # Offset: 11852
    00002e4e: 	endbr64
    00002e52: 	jmp	.Ltmp1919 # Offset: 11858
.Ltmp1916:
    00002e54: 	movq	-0x60(%rbp), %rdi
    00002e58: 	cmpq	-0x150(%rbp), %rdi
    00002e5f: 	je	.Ltmp1920 # Offset: 11871
    00002e61: 	movq	-0x50(%rbp), %rax
    00002e65: 	leaq	0x1(%rax), %rsi
    00002e69: 	callq	_ZdlPvm@PLT # Offset: 11881
.Ltmp1920:
    00002e6e: 	movq	-0xa0(%rbp), %rdi
    00002e75: 	leaq	-0x90(%rbp), %rax
    00002e7c: 	cmpq	%rax, %rdi
    00002e7f: 	je	.Ltmp1911 # Offset: 11903
    00002e85: 	movq	-0x90(%rbp), %rax
    00002e8c: 	leaq	0x1(%rax), %rsi
    00002e90: 	callq	_ZdlPvm@PLT # Offset: 11920
    00002e95: 	jmp	.Ltmp1911 # Offset: 11925
.Ltmp1918:
    00002e9a: 	movq	-0x80(%rbp), %rdi
    00002e9e: 	cmpq	-0x138(%rbp), %rdi
    00002ea5: 	je	.Ltmp1920 # Offset: 11941
    00002ea7: 	movq	-0x70(%rbp), %rax
    00002eab: 	leaq	0x1(%rax), %rsi
    00002eaf: 	callq	_ZdlPvm@PLT # Offset: 11951
    00002eb4: 	jmp	.Ltmp1920 # Offset: 11956
    00002eb6: 	endbr64
.Ltmp1922:
    00002eba: 	movq	%rax, %rbx
    00002ebd: 	jmp	.Ltmp1921 # Offset: 11965
    00002ebf: 	endbr64
    00002ec3: 	jmp	.Ltmp1922 # Offset: 11971
    00002ec5: 	endbr64
    00002ec9: 	jmp	.Ltmp1922 # Offset: 11977
    00002ecb: 	endbr64
    00002ecf: 	jmp	.Ltmp1922 # Offset: 11983
.Ltmp1921:
    00002ed1: 	movq	-0x60(%rbp), %rdi
    00002ed5: 	cmpq	-0x150(%rbp), %rdi
    00002edc: 	jne	.Ltmp1923 # Offset: 11996
    00002ee2: 	jmp	.Ltmp1911 # Offset: 12002
    00002ee7: 	endbr64
    00002eeb: 	jmp	.Ltmp1922 # Offset: 12011
    00002eed: 	endbr64
    00002ef1: 	jmp	.Ltmp1922 # Offset: 12017
    00002ef3: 	endbr64
    00002ef7: 	jmp	.Ltmp1922 # Offset: 12023
    00002ef9: 	endbr64
    00002efd: 	jmp	.Ltmp1924 # Offset: 12029
    00002f02: 	endbr64
    00002f06: 	movq	%rax, %rbx
    00002f09: 	jmp	.Ltmp1925 # Offset: 12041
    00002f0e: 	endbr64
.Ltmp1927:
    00002f12: 	movq	%rax, %rbx
    00002f15: 	jmp	.Ltmp1926 # Offset: 12053
    00002f17: 	endbr64
    00002f1b: 	jmp	.Ltmp1927 # Offset: 12059
    00002f1d: 	endbr64
    00002f21: 	jmp	.Ltmp1927 # Offset: 12065
    00002f23: 	endbr64
    00002f27: 	jmp	.Ltmp1927 # Offset: 12071
    00002f29: 	endbr64
    00002f2d: 	jmp	.Ltmp1917 # Offset: 12077
    00002f32: 	endbr64
    00002f36: 	jmp	.Ltmp1917 # Offset: 12086
    00002f3b: 	endbr64
    00002f3f: 	movq	%rax, %rbx
    00002f42: 	jmp	.Ltmp1928 # Offset: 12098
.Ltmp1926:
    00002f44: 	movq	-0x80(%rbp), %rdi
    00002f48: 	cmpq	-0x138(%rbp), %rdi
    00002f4f: 	je	.Ltmp1915 # Offset: 12111
.Ltmp1929:
    00002f55: 	movq	-0x70(%rbp), %rax
    00002f59: 	leaq	0x1(%rax), %rsi
    00002f5d: 	callq	_ZdlPvm@PLT # Offset: 12125
    00002f62: 	jmp	.Ltmp1915 # Offset: 12130
.Ltmp1928:
    00002f67: 	movq	-0x80(%rbp), %rdi
    00002f6b: 	leaq	-0x70(%rbp), %rax
    00002f6f: 	cmpq	%rax, %rdi
    00002f72: 	jne	.Ltmp1929 # Offset: 12146
    00002f74: 	jmp	.Ltmp1915 # Offset: 12148
    00002f79: 	endbr64
    00002f7d: 	jmp	.Ltmp1924 # Offset: 12157
    00002f82: 	endbr64
    00002f86: 	jmp	.Ltmp1922 # Offset: 12166
    00002f8b: 	endbr64
    00002f8f: 	jmp	.Ltmp1924 # Offset: 12175
    00002f94: 	endbr64
    00002f98: 	jmp	.Ltmp1924 # Offset: 12184
    00002f9d: 	endbr64
    00002fa1: 	jmp	.Ltmp1924 # Offset: 12193
    00002fa6: 	endbr64
    00002faa: 	movq	%rax, %rbx
    00002fad: 	jmp	.Ltmp1920 # Offset: 12205
    00002fb2: 	endbr64
    00002fb6: 	movq	%rax, %rbx
    00002fb9: 	jmp	.Ltmp1911 # Offset: 12217
    00002fbe: 	endbr64
    00002fc2: 	jmp	.Ltmp1927 # Offset: 12226
    00002fc7: 	endbr64
    00002fcb: 	jmp	.Ltmp1927 # Offset: 12235
    00002fd0: 	endbr64
    00002fd4: 	jmp	.Ltmp1927 # Offset: 12244
    00002fd9: 	endbr64
    00002fdd: 	jmp	.Ltmp1917 # Offset: 12253
    00002fe2: 	endbr64
    00002fe6: 	jmp	.Ltmp1917 # Offset: 12262
    00002feb: 	endbr64
    00002fef: 	movq	%rax, %rbx
    00002ff2: 	jmp	.Ltmp1915 # Offset: 12274
    00002ff7: 	endbr64
    00002ffb: 	jmp	.Ltmp1924 # Offset: 12283
    00003000: 	endbr64
    00003004: 	movq	%rax, %rbx
    00003007: 	jmp	.Ltmp1913 # Offset: 12295
    0000300c: 	endbr64
    00003010: 	movq	%rax, %rbx
    00003013: 	jmp	.Ltmp1930 # Offset: 12307
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIllEvv"

Binary Function "_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x30be0
  Size        : 0x238
  MaxSize     : 0x240
  Offset      : 0x30be0
  Section     : .text
  Orc Section : .local.text._Z29laplace_initial_condition_setIfET_PS0_iiPKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movl	%esi, %r13d
    00000009: 	pushq	%r12
    0000000b: 	imull	%edx, %r13d
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%esi, %ebx
    00000018: 	movslq	%r13d, %rdx
    0000001b: 	subq	$0x18, %rsp
    0000001f: 	movss	0x4(%rcx), %xmm1
    00000024: 	movss	(%rcx), %xmm0
    00000028: 	shlq	$0x2, %rdx
    0000002c: 	addss	%xmm1, %xmm0
    00000030: 	addss	0x8(%rcx), %xmm0
    00000035: 	addss	0xc(%rcx), %xmm0
    0000003a: 	mulss	DATAat0x49420(%rip), %xmm0
    00000042: 	je	.Ltmp1931 # Offset: 66
    00000044: 	xorl	%esi, %esi
    00000046: 	movss	%xmm0, 0xc(%rsp)
    0000004c: 	callq	memset@PLT # Offset: 76
    00000051: 	movss	0x4(%r12), %xmm1
    00000058: 	movss	0xc(%rsp), %xmm0
    0000005e: 	movq	%rax, %rdi
.Ltmp1931:
    00000061: 	testl	%ebx, %ebx
    00000063: 	jle	.Ltmp1932 # Offset: 99
    00000069: 	movslq	%ebp, %rcx
    0000006c: 	movq	%rdi, %rdx
    0000006f: 	xorl	%eax, %eax
    00000071: 	shlq	$0x2, %rcx
    00000075: 	cmpl	$0x1, %ebp
    00000078: 	jne	.Ltmp1933 # Offset: 120
    0000007e: 	nop # Size: 2
.Ltmp1934:
    00000080: 	addl	$0x1, %eax
    00000083: 	movss	%xmm1, (%rdx)
    00000087: 	addq	%rcx, %rdx
    0000008a: 	cmpl	%ebx, %eax
    0000008c: 	jne	.Ltmp1934 # Offset: 140
    0000008e: 	movss	0xc(%r12), %xmm1
    00000095: 	leaq	-0x4(%rdi,%rcx), %rdx
    0000009a: 	xorl	%eax, %eax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1935:
    000000a0: 	addl	$0x1, %eax
    000000a3: 	movss	%xmm1, (%rdx)
    000000a7: 	addq	%rcx, %rdx
    000000aa: 	cmpl	%eax, %ebx
    000000ac: 	jne	.Ltmp1935 # Offset: 172
    000000ae: 	subl	$0x1, %r13d
    000000b2: 	movss	0x8(%r12), %xmm2
    000000b9: 	movslq	%r13d, %r13
    000000bc: 	leaq	(%rdi,%r13,4), %rcx
.Ltmp1944:
    000000c0: 	leal	-0x1(%rbp), %esi
    000000c3: 	cmpl	$0x2, %esi
    000000c6: 	jbe	.Ltmp1936 # Offset: 198
    000000cc: 	movl	%ebp, %edx
    000000ce: 	movaps	%xmm2, %xmm1
    000000d1: 	movq	%rcx, %rax
    000000d4: 	shrl	$0x2, %edx
    000000d7: 	shufps	$0x0, %xmm1, %xmm1
    000000db: 	shlq	$0x4, %rdx
    000000df: 	addq	%rcx, %rdx
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1937:
    000000e8: 	movups	%xmm1, (%rax)
    000000eb: 	addq	$0x10, %rax
    000000ef: 	cmpq	%rdx, %rax
    000000f2: 	jne	.Ltmp1937 # Offset: 242
    000000f4: 	movl	%ebp, %eax
    000000f6: 	andl	$-0x4, %eax
    000000f9: 	movl	%eax, %edx
    000000fb: 	leaq	(%rcx,%rdx,4), %rcx
    000000ff: 	cmpl	%eax, %ebp
    00000101: 	je	.Ltmp1938 # Offset: 257
    00000107: 	addl	$0x1, %eax
    0000010a: 	movss	%xmm2, (%rcx)
    0000010e: 	addq	$0x4, %rcx
    00000112: 	cmpl	%eax, %ebp
    00000114: 	jle	.Ltmp1938 # Offset: 276
.Ltmp1946:
    0000011a: 	addl	$0x1, %eax
    0000011d: 	movss	%xmm2, (%rcx)
    00000121: 	cmpl	%eax, %ebp
    00000123: 	jle	.Ltmp1939 # Offset: 291
    00000125: 	movss	%xmm2, 0x4(%rcx)
.Ltmp1939:
    0000012a: 	movss	(%r12), %xmm2
    00000130: 	cmpl	$0x2, %esi
    00000133: 	jbe	.Ltmp1940 # Offset: 307
.Ltmp1945:
    00000139: 	movl	%ebp, %edx
    0000013b: 	movaps	%xmm2, %xmm1
    0000013e: 	movq	%rdi, %rax
    00000141: 	shrl	$0x2, %edx
    00000144: 	shufps	$0x0, %xmm1, %xmm1
    00000148: 	subl	$0x1, %edx
    0000014b: 	shlq	$0x4, %rdx
    0000014f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp1941:
    00000158: 	movups	%xmm1, (%rax)
    0000015b: 	addq	$0x10, %rax
    0000015f: 	cmpq	%rax, %rdx
    00000162: 	jne	.Ltmp1941 # Offset: 354
    00000164: 	movl	%ebp, %eax
    00000166: 	andl	$-0x4, %eax
    00000169: 	movl	%eax, %edx
    0000016b: 	leaq	(%rdi,%rdx,4), %rdi
    0000016f: 	cmpl	%ebp, %eax
    00000171: 	je	.Ltmp1942 # Offset: 369
.Ltmp1947:
    00000173: 	addl	$0x1, %eax
    00000176: 	movss	%xmm2, (%rdi)
    0000017a: 	addq	$0x4, %rdi
    0000017e: 	cmpl	%eax, %ebp
    00000180: 	jle	.Ltmp1942 # Offset: 384
.Ltmp1948:
    00000182: 	addl	$0x1, %eax
    00000185: 	movss	%xmm2, (%rdi)
    00000189: 	cmpl	%eax, %ebp
    0000018b: 	jle	.Ltmp1942 # Offset: 395
    0000018d: 	movss	%xmm2, 0x4(%rdi)
.Ltmp1942:
    00000192: 	addq	$0x18, %rsp
    00000196: 	popq	%rbx
    00000197: 	popq	%rbp
    00000198: 	popq	%r12
    0000019a: 	popq	%r13
    0000019c: 	retq # Offset: 412
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp1933:
    000001a0: 	addl	$0x1, %eax
    000001a3: 	movss	%xmm1, (%rdx)
    000001a7: 	addq	%rcx, %rdx
    000001aa: 	cmpl	%eax, %ebx
    000001ac: 	jne	.Ltmp1933 # Offset: 428
    000001ae: 	movss	0xc(%r12), %xmm1
    000001b5: 	leaq	-0x4(%rdi,%rcx), %rdx
    000001ba: 	xorl	%eax, %eax
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1943:
    000001c0: 	addl	$0x1, %eax
    000001c3: 	movss	%xmm1, (%rdx)
    000001c7: 	addq	%rcx, %rdx
    000001ca: 	cmpl	%eax, %ebx
    000001cc: 	jne	.Ltmp1943 # Offset: 460
.Ltmp1932:
    000001ce: 	subl	%ebp, %r13d
    000001d1: 	movss	0x8(%r12), %xmm2
    000001d8: 	movslq	%r13d, %r13
    000001db: 	leaq	(%rdi,%r13,4), %rcx
    000001df: 	testl	%ebp, %ebp
    000001e1: 	jg	.Ltmp1944 # Offset: 481
    000001e7: 	addq	$0x18, %rsp
    000001eb: 	popq	%rbx
    000001ec: 	popq	%rbp
    000001ed: 	popq	%r12
    000001ef: 	popq	%r13
    000001f1: 	retq # Offset: 497
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1938:
    000001f8: 	movss	(%r12), %xmm2
    000001fe: 	jmp	.Ltmp1945 # Offset: 510
.Ltmp1936:
    00000203: 	movss	%xmm2, (%rcx)
    00000207: 	movl	$0x1, %eax
    0000020c: 	addq	$0x4, %rcx
    00000210: 	cmpl	$0x1, %ebp
    00000213: 	jne	.Ltmp1946 # Offset: 531
    00000219: 	movss	(%r12), %xmm2
    0000021f: 	xorl	%eax, %eax
    00000221: 	jmp	.Ltmp1947 # Offset: 545
.Ltmp1940:
    00000226: 	movss	%xmm2, (%rdi)
    0000022a: 	movl	$0x1, %eax
    0000022f: 	addq	$0x4, %rdi
    00000233: 	jmp	.Ltmp1948 # Offset: 563
DWARF CFI Instructions:
    <empty>
End of Function "_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_"

Binary Function "_Z20convergenceLaplace2DIff17jacobi2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x30e20
  Size        : 0x9e0
  MaxSize     : 0x9e0
  Offset      : 0x30e20
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff17jacobi2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	subq	$0x108, %rsp
    00000021: 	movaps	DATAat0x494a0(%rip), %xmm0
    00000028: 	movl	%edx, 0xcc(%rsp)
    0000002f: 	movl	%ebp, %edx
    00000031: 	movl	%ecx, 0x40(%rsp)
    00000035: 	leaq	0xe0(%rsp), %rcx
    0000003d: 	movl	%r8d, 0x20(%rsp)
    00000042: 	movq	%r9, 0xd0(%rsp)
    0000004a: 	movq	%fs:0x28, %rax
    00000053: 	movq	%rax, 0xf8(%rsp)
    0000005b: 	xorl	%eax, %eax
    0000005d: 	movaps	%xmm0, 0xe0(%rsp)
    00000065: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 101
    0000006a: 	movl	%ebx, %edi
    0000006c: 	movss	%xmm0, 0xdc(%rsp)
    00000075: 	imull	%ebp, %edi
    00000078: 	movslq	%edi, %rbx
    0000007b: 	testl	%ebx, %ebx
    0000007d: 	jle	.Ltmp1949 # Offset: 125
    0000007f: 	movslq	%ebx, %rdx
    00000082: 	movq	%r14, %rsi
    00000085: 	movq	%r15, %rdi
    00000088: 	shlq	$0x2, %rdx
    0000008c: 	callq	memmove@PLT # Offset: 140
.Ltmp1949:
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movl	$0x2710, iterations(%rip)
    000000a1: 	movl	%eax, 0xd8(%rsp)
    000000a8: 	callq	clock@PLT # Offset: 168
    000000ad: 	movq	%rax, start_time(%rip)
    000000b4: 	movl	iterations(%rip), %eax
    000000ba: 	movl	%eax, 0x8c(%rsp)
    000000c1: 	testl	%eax, %eax
    000000c3: 	jle	.Ltmp1950 # Offset: 195
    000000c9: 	movl	0x20(%rsp), %edx
    000000cd: 	movl	0x40(%rsp), %r8d
    000000d2: 	pxor	%xmm1, %xmm1
    000000d6: 	movq	%r15, %r13
    000000d9: 	movl	0xcc(%rsp), %r11d
    000000e1: 	movq	%rbx, 0x58(%rsp)
    000000e6: 	movss	DATAat0x494c0(%rip), %xmm6
    000000ee: 	movl	%edx, %eax
    000000f0: 	leal	-0x2(%r8), %edi
    000000f4: 	movl	%edx, %r9d
    000000f7: 	movaps	DATAat0x49420(%rip), %xmm2
    000000fe: 	leal	-0x2(%r11), %esi
    00000102: 	negl	%eax
    00000104: 	movl	%edi, 0x44(%rsp)
    00000108: 	movaps	%xmm6, %xmm7
    0000010b: 	movl	%esi, 0x88(%rsp)
    00000112: 	imull	%edx, %esi
    00000115: 	cltq
    00000117: 	movss	DATAat0x49420(%rip), %xmm4
    0000011f: 	shlq	$0x2, %rax
    00000123: 	movl	$0x0, 0x60(%rsp)
    0000012b: 	movq	%rax, 0x38(%rsp)
    00000130: 	movslq	%esi, %rcx
    00000133: 	movl	%esi, 0xc8(%rsp)
    0000013a: 	movslq	%edi, %rsi
    0000013d: 	leaq	(%rcx,%rsi), %rax
    00000141: 	movq	%rsi, 0x80(%rsp)
    00000149: 	shlq	$0x2, %rax
    0000014d: 	movq	%rax, 0xb0(%rsp)
    00000155: 	leal	-0x3(%r11), %eax
    00000159: 	imull	%edx, %eax
    0000015c: 	movslq	%eax, %rdx
    0000015f: 	leaq	(%rsi,%rdx), %rax
    00000163: 	leaq	-0x4(,%rax,4), %rax
    0000016b: 	movq	%rax, 0xc0(%rsp)
    00000173: 	leal	-0x1(%r11), %eax
    00000177: 	imull	%r9d, %eax
    0000017b: 	cltq
    0000017d: 	addq	%rsi, %rax
    00000180: 	leaq	-0x4(,%rax,4), %rax
    00000188: 	movq	%rax, 0xa8(%rsp)
    00000190: 	movq	%rcx, %rax
    00000193: 	movl	%edi, %ecx
    00000195: 	subq	%rdx, %rax
    00000198: 	andl	$-0x4, %ecx
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	movl	%ecx, 0x4c(%rsp)
    000001a3: 	movq	%rax, 0xa0(%rsp)
    000001ab: 	leal	-0x3(%r8), %eax
    000001af: 	subl	%ecx, %r8d
    000001b2: 	movl	%eax, 0x48(%rsp)
    000001b6: 	movl	%edi, %eax
    000001b8: 	andl	$0x3, %edi
    000001bb: 	shrl	$0x2, %eax
    000001be: 	movl	%edi, 0x64(%rsp)
    000001c2: 	movq	%rbx, %rdi
    000001c5: 	subl	$0x1, %eax
    000001c8: 	andq	$-0x4, %rdi
    000001cc: 	movl	%r8d, 0x68(%rsp)
    000001d1: 	notq	%rax
    000001d4: 	movq	%rdi, 0x90(%rsp)
    000001dc: 	shlq	$0x4, %rax
    000001e0: 	movq	%rax, 0x50(%rsp)
    000001e5: 	movq	%rsi, %rax
    000001e8: 	negq	%rax
    000001eb: 	shlq	$0x2, %rax
    000001ef: 	movq	%rax, 0x70(%rsp)
    000001f4: 	leaq	-0x1(%rbx), %rax
    000001f8: 	movq	%rax, 0x98(%rsp)
    00000200: 	movq	%rbx, %rax
    00000203: 	shrq	$0x2, %rax
    00000207: 	shlq	$0x4, %rax
    0000020b: 	movq	%rax, 0xb8(%rsp)
    00000213: 	leal	-0x2(%r8), %eax
    00000217: 	movl	%eax, 0x6c(%rsp)
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1971:
    00000220: 	movl	0x88(%rsp), %ecx
    00000227: 	testl	%ecx, %ecx
    00000229: 	jle	.Ltmp1951 # Offset: 553
    0000022f: 	movl	0x44(%rsp), %edx
    00000233: 	testl	%edx, %edx
    00000235: 	jle	.Ltmp1951 # Offset: 565
    0000023b: 	movq	0xb0(%rsp), %rax
    00000243: 	movl	0x88(%rsp), %ebx
    0000024a: 	movq	0xc0(%rsp), %rdi
    00000252: 	movl	0xc8(%rsp), %ecx
    00000259: 	leaq	(%r13,%rax), %r8
    0000025e: 	addq	%r14, %rax
    00000261: 	movl	%ebx, 0x1c(%rsp)
    00000265: 	movss	DATAat0x49420(%rip), %xmm3
    0000026d: 	movq	DATAat0x49420(%rip), %xmm5
    00000275: 	movq	%rax, (%rsp)
    00000279: 	addq	%r14, %rdi
    0000027c: 	movq	0xa8(%rsp), %rax
    00000284: 	leaq	(%r14,%rax), %r15
    00000288: 	movq	0xa0(%rsp), %rax
    00000290: 	subq	%r14, %rax
    00000293: 	addq	$0x4, %rax
    00000297: 	movq	%rax, 0x30(%rsp)
    0000029c: 	movl	$0x4, %eax
    000002a1: 	subq	%r14, %rax
    000002a4: 	movq	%rax, 0x28(%rsp)
    000002a9: 	movq	0x70(%rsp), %rax
    000002ae: 	addq	$0x4, %rax
    000002b2: 	movq	%rax, 0x78(%rsp)
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1957:
    000002c0: 	movl	0x20(%rsp), %eax
    000002c4: 	movl	%ecx, %edx
    000002c6: 	subl	$0x1, 0x1c(%rsp)
    000002cb: 	subl	%eax, %edx
    000002cd: 	leal	(%rax,%rcx), %r12d
    000002d1: 	movq	0x30(%rsp), %rax
    000002d6: 	leaq	(%rax,%rdi), %r9
    000002da: 	movq	0x28(%rsp), %rax
    000002df: 	leaq	(%rax,%rdi), %rbx
    000002e3: 	addq	%r15, %rax
    000002e6: 	movq	%rax, 0x8(%rsp)
    000002eb: 	movq	%r8, %rax
    000002ee: 	subq	%rdi, %rax
    000002f1: 	movq	%rbx, 0x10(%rsp)
    000002f6: 	movq	(%rsp), %rbx
    000002fa: 	addq	$0x8, %rax
    000002fe: 	cmpq	$0x8, %rax
    00000302: 	movq	%r8, %rax
    00000305: 	leaq	-0x8(%rbx), %rsi
    00000309: 	seta	%r10b
    0000030d: 	subq	%r15, %rax
    00000310: 	addq	$0x8, %rax
    00000314: 	cmpq	$0x8, %rax
    00000318: 	seta	%al
    0000031b: 	andl	%r10d, %eax
    0000031e: 	cmpl	$0x3, 0x40(%rsp)
    00000323: 	setne	%r10b
    00000327: 	testb	%r10b, %al
    0000032a: 	je	.Ltmp1952 # Offset: 810
    00000330: 	movq	%r8, %rax
    00000333: 	subq	%rsi, %rax
    00000336: 	addq	$0x8, %rax
    0000033a: 	cmpq	$0x10, %rax
    0000033e: 	jbe	.Ltmp1952 # Offset: 830
    00000344: 	cmpl	$0x2, 0x48(%rsp)
    00000349: 	jbe	.Ltmp1953 # Offset: 841
    0000034f: 	movl	%edx, 0x24(%rsp)
    00000353: 	movq	0x50(%rsp), %rdx
    00000358: 	leaq	-0x8(%rdi), %rbp
    0000035c: 	xorl	%eax, %eax
    0000035e: 	subq	$0x10, %rbx
    00000362: 	leaq	-0x8(%r15), %r11
    00000366: 	leaq	-0xc(%r8), %r10
    0000036a: 	pxor	%xmm9, %xmm9
    0000036f: 	nop # Size: 1
.Ltmp1954:
    00000370: 	movups	(%rbp,%rax), %xmm0
    00000375: 	movups	(%rbx,%rax), %xmm8
    0000037a: 	shufps	$0x1b, %xmm0, %xmm0
    0000037e: 	shufps	$0x1b, %xmm8, %xmm8
    00000383: 	addps	%xmm8, %xmm0
    00000387: 	movups	(%rsi,%rax), %xmm8
    0000038c: 	shufps	$0x1b, %xmm8, %xmm8
    00000391: 	addps	%xmm8, %xmm0
    00000395: 	movups	(%r11,%rax), %xmm8
    0000039a: 	shufps	$0x1b, %xmm8, %xmm8
    0000039f: 	addps	%xmm8, %xmm0
    000003a3: 	addps	%xmm9, %xmm0
    000003a7: 	mulps	%xmm2, %xmm0
    000003aa: 	shufps	$0x1b, %xmm0, %xmm0
    000003ae: 	movups	%xmm0, (%r10,%rax)
    000003b3: 	subq	$0x10, %rax
    000003b7: 	cmpq	%rdx, %rax
    000003ba: 	jne	.Ltmp1954 # Offset: 954
    000003bc: 	movl	0x24(%rsp), %edx
    000003c0: 	movl	0x4c(%rsp), %esi
    000003c4: 	cmpl	%esi, 0x44(%rsp)
    000003c8: 	je	.Ltmp1955 # Offset: 968
    000003ce: 	cmpl	$0x3, 0x68(%rsp)
    000003d3: 	movl	0x6c(%rsp), %r11d
    000003d8: 	movl	0x64(%rsp), %eax
    000003dc: 	je	.Ltmp1956 # Offset: 988
.Ltmp1973:
    000003de: 	addl	$0x1, %esi
    000003e1: 	movq	0x10(%rsp), %rbx
    000003e6: 	negq	%rsi
    000003e9: 	shlq	$0x2, %rsi
    000003ed: 	addq	%r14, %rbx
    000003f0: 	leaq	0x4(%r9,%rsi), %r10
    000003f5: 	movq	(%rbx,%rsi), %xmm0
    000003fa: 	addq	%r13, %r9
    000003fd: 	movq	-0x8(%r14,%r10), %xmm10
    00000404: 	movq	(%r14,%r10), %xmm9
    0000040a: 	shufps	$0xe1, %xmm0, %xmm0
    0000040e: 	movq	0x8(%rsp), %r10
    00000413: 	shufps	$0xe1, %xmm10, %xmm10
    00000418: 	shufps	$0xe1, %xmm9, %xmm9
    0000041d: 	addps	%xmm10, %xmm0
    00000421: 	addq	%r14, %r10
    00000424: 	movq	(%r10,%rsi), %xmm8
    0000042a: 	addps	%xmm9, %xmm0
    0000042e: 	shufps	$0xe1, %xmm8, %xmm8
    00000433: 	addps	%xmm8, %xmm0
    00000437: 	xorps	%xmm8, %xmm8
    0000043b: 	addps	%xmm8, %xmm0
    0000043f: 	mulps	%xmm5, %xmm0
    00000442: 	shufps	$0xe1, %xmm0, %xmm0
    00000446: 	movlps	%xmm0, (%r9,%rsi)
    0000044b: 	movl	%r11d, %esi
    0000044e: 	andl	$-0x2, %esi
    00000451: 	subl	%esi, %eax
    00000453: 	cmpl	%r11d, %esi
    00000456: 	je	.Ltmp1955 # Offset: 1110
.Ltmp1956:
    00000458: 	addl	%eax, %edx
    0000045a: 	movslq	%edx, %rdx
    0000045d: 	movss	(%r14,%rdx,4), %xmm0
    00000463: 	leal	-0x1(%rcx,%rax), %edx
    00000467: 	movslq	%edx, %rdx
    0000046a: 	addss	(%r14,%rdx,4), %xmm0
    00000470: 	leal	0x1(%rcx,%rax), %edx
    00000474: 	movslq	%edx, %rdx
    00000477: 	addss	(%r14,%rdx,4), %xmm0
    0000047d: 	leal	(%rcx,%rax), %edx
    00000480: 	addl	%r12d, %eax
    00000483: 	cltq
    00000485: 	movslq	%edx, %rdx
    00000488: 	addss	(%r14,%rax,4), %xmm0
    0000048e: 	addss	%xmm1, %xmm0
    00000492: 	mulss	%xmm3, %xmm0
    00000496: 	movss	%xmm0, (%r13,%rdx,4)
.Ltmp1955:
    0000049d: 	movq	0x38(%rsp), %rax
    000004a2: 	addq	%rax, (%rsp)
    000004a6: 	subl	0x20(%rsp), %ecx
    000004aa: 	addq	%rax, %r8
    000004ad: 	addq	%rax, %rdi
    000004b0: 	addq	%rax, %r15
    000004b3: 	movl	0x1c(%rsp), %eax
    000004b7: 	testl	%eax, %eax
    000004b9: 	jne	.Ltmp1957 # Offset: 1209
.Ltmp1951:
    000004bf: 	cmpq	$0x0, 0x58(%rsp)
    000004c5: 	je	.Ltmp1958 # Offset: 1221
    000004cb: 	cmpq	$0x2, 0x98(%rsp)
    000004d4: 	jbe	.Ltmp1959 # Offset: 1236
    000004da: 	movaps	DATAat0x494b0(%rip), %xmm9
    000004e2: 	movq	0xb8(%rsp), %rdx
    000004ea: 	xorl	%eax, %eax
    000004ec: 	movaps	%xmm1, %xmm3
    000004ef: 	pxor	%xmm8, %xmm8
    000004f4: 	nopl	(%rax) # Size: 4
.Ltmp1960:
    000004f8: 	movups	(%r13,%rax), %xmm0
    000004fe: 	movups	(%r14,%rax), %xmm5
    00000503: 	addq	$0x10, %rax
    00000507: 	subps	%xmm0, %xmm5
    0000050a: 	movaps	%xmm5, %xmm0
    0000050d: 	movaps	%xmm5, %xmm10
    00000511: 	cmpltps	%xmm8, %xmm0
    00000516: 	xorps	%xmm9, %xmm10
    0000051a: 	andps	%xmm0, %xmm10
    0000051e: 	andnps	%xmm5, %xmm0
    00000521: 	orps	%xmm10, %xmm0
    00000525: 	addss	%xmm0, %xmm3
    00000529: 	movaps	%xmm0, %xmm5
    0000052c: 	shufps	$0x55, %xmm0, %xmm5
    00000530: 	addss	%xmm3, %xmm5
    00000534: 	movaps	%xmm0, %xmm3
    00000537: 	unpckhps	%xmm0, %xmm3
    0000053a: 	shufps	$0xff, %xmm0, %xmm0
    0000053e: 	addss	%xmm5, %xmm3
    00000542: 	addss	%xmm0, %xmm3
    00000546: 	cmpq	%rax, %rdx
    00000549: 	jne	.Ltmp1960 # Offset: 1353
    0000054b: 	movq	0x90(%rsp), %rax
    00000553: 	cmpq	%rax, 0x58(%rsp)
    00000558: 	je	.Ltmp1961 # Offset: 1368
.Ltmp1975:
    0000055a: 	movss	(%r14,%rax,4), %xmm0
    00000560: 	subss	(%r13,%rax,4), %xmm0
    00000567: 	leaq	(,%rax,4), %rdx
    0000056f: 	comiss	%xmm0, %xmm1
    00000572: 	jbe	.Ltmp1962 # Offset: 1394
    00000574: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp1962:
    0000057b: 	addss	%xmm0, %xmm3
    0000057f: 	leaq	0x1(%rax), %rcx
    00000583: 	cmpq	%rcx, 0x58(%rsp)
    00000588: 	jbe	.Ltmp1961 # Offset: 1416
    0000058a: 	movss	0x4(%r14,%rdx), %xmm0
    00000591: 	subss	0x4(%r13,%rdx), %xmm0
    00000598: 	comiss	%xmm0, %xmm1
    0000059b: 	jbe	.Ltmp1963 # Offset: 1435
    0000059d: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp1963:
    000005a4: 	addss	%xmm0, %xmm3
    000005a8: 	addq	$0x2, %rax
    000005ac: 	cmpq	%rax, 0x58(%rsp)
    000005b1: 	jbe	.Ltmp1961 # Offset: 1457
    000005b3: 	movss	0x8(%r14,%rdx), %xmm0
    000005ba: 	subss	0x8(%r13,%rdx), %xmm0
    000005c1: 	comiss	%xmm0, %xmm1
    000005c4: 	jbe	.Ltmp1964 # Offset: 1476
    000005c6: 	xorps	%xmm7, %xmm0
.Ltmp1964:
    000005c9: 	addss	%xmm0, %xmm3
.Ltmp1961:
    000005cd: 	movq	0x58(%rsp), %rdx
    000005d2: 	movaps	%xmm1, %xmm5
    000005d5: 	xorl	%eax, %eax
    000005d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1966:
    000005e0: 	movss	(%r14,%rax,4), %xmm0
    000005e6: 	subss	(%r13,%rax,4), %xmm0
    000005ed: 	comiss	%xmm0, %xmm1
    000005f0: 	jbe	.Ltmp1965 # Offset: 1520
    000005f2: 	xorps	%xmm6, %xmm0
.Ltmp1965:
    000005f5: 	maxss	%xmm5, %xmm0
    000005f9: 	addq	$0x1, %rax
    000005fd: 	movaps	%xmm0, %xmm5
    00000600: 	cmpq	%rax, %rdx
    00000603: 	jne	.Ltmp1966 # Offset: 1539
    00000605: 	movl	0x60(%rsp), %eax
    00000609: 	cmpl	%eax, 0x140(%rsp)
    00000610: 	jge	.Ltmp1967 # Offset: 1552
    00000612: 	movss	DATAat0x49548(%rip), %xmm0
    0000061a: 	comiss	%xmm3, %xmm0
    0000061d: 	ja	.Ltmp1968 # Offset: 1565
    00000623: 	ucomiss	%xmm3, %xmm3
    00000626: 	jp	.Ltmp1969 # Offset: 1574
    0000062c: 	movss	DATAat0x4954c(%rip), %xmm0
    00000634: 	comiss	%xmm5, %xmm0
    00000637: 	ja	.Ltmp1970 # Offset: 1591
    0000063d: 	ucomiss	%xmm5, %xmm5
    00000640: 	jp	.Ltmp1969 # Offset: 1600
.Ltmp1967:
    00000646: 	addl	$0x1, 0x60(%rsp)
    0000064b: 	movq	%r13, %rax
    0000064e: 	movl	0x60(%rsp), %edi
    00000652: 	movq	%r14, %r13
    00000655: 	cmpl	0x8c(%rsp), %edi
    0000065c: 	je	.Ltmp1968 # Offset: 1628
    00000662: 	movq	%rax, %r14
    00000665: 	jmp	.Ltmp1971 # Offset: 1637
    0000066a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1952:
    00000670: 	movq	0x70(%rsp), %rax
    00000675: 	movq	(%rsp), %rdx
    00000679: 	movq	0x78(%rsp), %rbx
    0000067e: 	addq	%rax, %rdx
    00000681: 	leaq	(%rax,%r8), %rsi
    00000685: 	movq	0x80(%rsp), %rax
    0000068d: 	leaq	(%rbx,%rdi), %r10
    00000691: 	leaq	(%rbx,%r15), %r9
    00000695: 	nopl	(%rax) # Size: 3
.Ltmp1972:
    00000698: 	movss	(%r10,%rax,4), %xmm0
    0000069e: 	addss	-0x4(%rdx,%rax,4), %xmm0
    000006a4: 	addss	0x4(%rdx,%rax,4), %xmm0
    000006aa: 	addss	(%r9,%rax,4), %xmm0
    000006b0: 	addss	%xmm1, %xmm0
    000006b4: 	mulss	%xmm4, %xmm0
    000006b8: 	movss	%xmm0, (%rsi,%rax,4)
    000006bd: 	subq	$0x1, %rax
    000006c1: 	testl	%eax, %eax
    000006c3: 	jg	.Ltmp1972 # Offset: 1731
    000006c5: 	jmp	.Ltmp1955 # Offset: 1733
.Ltmp1953:
    000006ca: 	movl	0x44(%rsp), %eax
    000006ce: 	xorl	%esi, %esi
    000006d0: 	movl	%eax, %r11d
    000006d3: 	jmp	.Ltmp1973 # Offset: 1747
.Ltmp1958:
    000006d8: 	movl	0x60(%rsp), %eax
    000006dc: 	cmpl	%eax, 0x140(%rsp)
    000006e3: 	jl	.Ltmp1974 # Offset: 1763
    000006e9: 	movaps	%xmm1, %xmm5
    000006ec: 	movaps	%xmm1, %xmm3
    000006ef: 	jmp	.Ltmp1967 # Offset: 1775
.Ltmp1959:
    000006f4: 	movaps	%xmm1, %xmm3
    000006f7: 	xorl	%eax, %eax
    000006f9: 	jmp	.Ltmp1975 # Offset: 1785
.Ltmp1968:
    000006fe: 	movq	%r13, %r15
.Ltmp1982:
    00000701: 	ucomiss	%xmm3, %xmm3
    00000704: 	setp	%r12b
    00000708: 	ucomiss	%xmm5, %xmm5
    0000070b: 	setp	%al
    0000070e: 	orl	%eax, %r12d
.Ltmp1981:
    00000711: 	movss	%xmm5, 0x8(%rsp)
    00000717: 	movss	%xmm3, (%rsp)
    0000071c: 	callq	clock@PLT # Offset: 1820
    00000721: 	movl	0xcc(%rsp), %edi
    00000728: 	pxor	%xmm0, %xmm0
    0000072c: 	movss	0xdc(%rsp), %xmm7
    00000735: 	movq	%rax, end_time(%rip)
    0000073c: 	subq	start_time(%rip), %rax
    00000743: 	cvtsi2sd	%rax, %xmm0
    00000748: 	movl	%edi, %eax
    0000074a: 	divsd	DATAat0x49520(%rip), %xmm0
    00000752: 	movss	(%rsp), %xmm3
    00000757: 	shrl	$0x1f, %eax
    0000075a: 	movss	0x8(%rsp), %xmm5
    00000760: 	movq	%xmm0, %rbx
    00000765: 	addl	%edi, %eax
    00000767: 	movl	0x40(%rsp), %edi
    0000076b: 	sarl	%eax
    0000076d: 	movl	%edi, %edx
    0000076f: 	imull	%edi, %eax
    00000772: 	shrl	$0x1f, %edx
    00000775: 	addl	%edi, %edx
    00000777: 	sarl	%edx
    00000779: 	addl	%edx, %eax
    0000077b: 	testb	%r12b, %r12b
    0000077e: 	cltq
    00000780: 	subss	(%r15,%rax,4), %xmm7
    00000786: 	movq	0xd0(%rsp), %rax
    0000078e: 	movq	0x8(%rax), %rdx
    00000792: 	movq	(%rax), %rsi
    00000795: 	movd	%xmm7, %ebp
    00000799: 	jne	.Ltmp1976 # Offset: 1945
    0000079f: 	movl	0x60(%rsp), %eax
    000007a3: 	cmpl	%eax, iterations(%rip)
    000007a9: 	jg	.Ltmp1977 # Offset: 1961
    000007ab: 	comiss	DATAat0x49548(%rip), %xmm3
    000007b2: 	jbe	.Ltmp1977 # Offset: 1970
    000007b4: 	comiss	DATAat0x4954c(%rip), %xmm5
    000007bb: 	ja	.Ltmp1978 # Offset: 1979
.Ltmp1977:
    000007c1: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000007c8: 	movss	%xmm5, 0x8(%rsp)
    000007ce: 	movq	%r12, %rdi
    000007d1: 	movss	%xmm3, (%rsp)
    000007d6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2006
    000007db: 	movl	$0xa, %edx
    000007e0: 	leaq	DATAat0x491ab(%rip), %rsi
    000007e7: 	movq	%rax, %rdi
    000007ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2026
    000007ef: 	movss	0x8(%rsp), %xmm5
    000007f5: 	movss	(%rsp), %xmm3
.Ltmp1980:
    000007fa: 	movl	$0x4, %edx
    000007ff: 	movq	%r12, %rdi
    00000802: 	movss	%xmm3, (%rsp)
    00000807: 	leaq	DATAat0x491b6(%rip), %rsi
    0000080e: 	movss	%xmm5, 0x8(%rsp)
    00000814: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2068
    00000819: 	movl	0x60(%rsp), %esi
    0000081d: 	movq	%r12, %rdi
    00000820: 	callq	_ZNSolsEi@PLT # Offset: 2080
    00000825: 	movl	$0xb, %edx
    0000082a: 	leaq	DATAat0x491bb(%rip), %rsi
    00000831: 	movq	%rax, %rdi
    00000834: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2100
    00000839: 	movl	$0xa, %edx
    0000083e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000845: 	movq	%r12, %rdi
    00000848: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2120
    0000084d: 	movss	(%rsp), %xmm3
    00000852: 	movq	%r12, %rdi
    00000855: 	pxor	%xmm0, %xmm0
    00000859: 	cvtss2sd	%xmm3, %xmm0
    0000085d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2141
    00000862: 	movl	$0x7, %edx
    00000867: 	leaq	DATAat0x491d2(%rip), %rsi
    0000086e: 	movq	%rax, %rdi
    00000871: 	movq	%rax, %r12
    00000874: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2164
    00000879: 	movss	0x8(%rsp), %xmm5
    0000087f: 	movq	%r12, %rdi
    00000882: 	pxor	%xmm0, %xmm0
    00000886: 	cvtss2sd	%xmm5, %xmm0
    0000088a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2186
    0000088f: 	movl	$0x10, %edx
    00000894: 	leaq	DATAat0x491da(%rip), %rsi
    0000089b: 	movq	%rax, %r12
    0000089e: 	movq	%rax, %rdi
    000008a1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2209
    000008a6: 	movd	%ebp, %xmm7
    000008aa: 	movq	%r12, %rdi
    000008ad: 	pxor	%xmm0, %xmm0
    000008b1: 	cvtss2sd	%xmm7, %xmm0
    000008b5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2229
    000008ba: 	movl	$0x8, %edx
    000008bf: 	leaq	DATAat0x491eb(%rip), %rsi
    000008c6: 	movq	%rax, %rbp
    000008c9: 	movq	%rax, %rdi
    000008cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2252
    000008d1: 	movq	%rbx, %xmm0
    000008d6: 	movq	%rbp, %rdi
    000008d9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2265
    000008de: 	movl	$0x2, %edx
    000008e3: 	leaq	DATAat0x491f4(%rip), %rsi
    000008ea: 	movq	%rax, %rdi
    000008ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2285
    000008f2: 	movl	0xd8(%rsp), %eax
    000008f9: 	movl	%eax, iterations(%rip)
    000008ff: 	movq	0xf8(%rsp), %rax
    00000907: 	subq	%fs:0x28, %rax
    00000910: 	jne	.Ltmp1979 # Offset: 2320
    00000916: 	addq	$0x108, %rsp
    0000091d: 	popq	%rbx
    0000091e: 	popq	%rbp
    0000091f: 	popq	%r12
    00000921: 	popq	%r13
    00000923: 	popq	%r14
    00000925: 	popq	%r15
    00000927: 	retq # Offset: 2343
.Ltmp1976:
    00000928: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    0000092f: 	movq	%r12, %rdi
    00000932: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2354
    00000937: 	movl	$0x10, %edx
    0000093c: 	leaq	DATAat0x493d4(%rip), %rsi
    00000943: 	movq	%rax, %rdi
    00000946: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2374
    0000094b: 	movss	(%rsp), %xmm3
    00000950: 	movss	0x8(%rsp), %xmm5
    00000956: 	jmp	.Ltmp1980 # Offset: 2390
.Ltmp1969:
    0000095b: 	movq	%r13, %r15
    0000095e: 	movl	$0x1, %r12d
    00000964: 	jmp	.Ltmp1981 # Offset: 2404
.Ltmp1978:
    00000969: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000970: 	movss	%xmm5, 0x8(%rsp)
    00000976: 	movq	%r12, %rdi
    00000979: 	movss	%xmm3, (%rsp)
    0000097e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2430
    00000983: 	movl	$0x11, %edx
    00000988: 	leaq	DATAat0x49199(%rip), %rsi
    0000098f: 	movq	%rax, %rdi
    00000992: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2450
    00000997: 	movss	(%rsp), %xmm3
    0000099c: 	movss	0x8(%rsp), %xmm5
    000009a2: 	jmp	.Ltmp1980 # Offset: 2466
.Ltmp1974:
    000009a7: 	movq	%r13, %r15
    000009aa: 	movaps	%xmm1, %xmm5
    000009ad: 	movaps	%xmm1, %xmm3
    000009b0: 	jmp	.Ltmp1982 # Offset: 2480
.Ltmp1970:
    000009b5: 	ucomiss	%xmm5, %xmm5
    000009b8: 	movq	%r13, %r15
    000009bb: 	setp	%r12b
    000009bf: 	jmp	.Ltmp1981 # Offset: 2495
.Ltmp1950:
    000009c4: 	pxor	%xmm5, %xmm5
    000009c8: 	movl	$0x0, 0x60(%rsp)
    000009d0: 	xorl	%r12d, %r12d
    000009d3: 	movaps	%xmm5, %xmm3
    000009d6: 	jmp	.Ltmp1981 # Offset: 2518
.Ltmp1979:
    000009db: 	callq	__stack_chk_fail@PLT # Offset: 2523
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff17jacobi2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff18jacobi2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x31800
  Size        : 0x97e
  MaxSize     : 0x980
  Offset      : 0x31800
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff18jacobi2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	movl	%r15d, %esi
    00000016: 	pushq	%r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0xf8, %rsp
    00000024: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002b: 	movl	%edx, 0xbc(%rsp)
    00000032: 	movl	%r14d, %edx
    00000035: 	movl	%ecx, 0x2c(%rsp)
    00000039: 	leaq	0xd0(%rsp), %rcx
    00000041: 	movl	%r8d, 0x28(%rsp)
    00000046: 	movq	%r9, 0xc0(%rsp)
    0000004e: 	movq	%fs:0x28, %rax
    00000057: 	movq	%rax, 0xe8(%rsp)
    0000005f: 	xorl	%eax, %eax
    00000061: 	movaps	%xmm0, 0xd0(%rsp)
    00000069: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 105
    0000006e: 	movl	%r15d, %esi
    00000071: 	movss	%xmm0, 0xcc(%rsp)
    0000007a: 	imull	%r14d, %esi
    0000007e: 	movl	%esi, %ebp
    00000080: 	testl	%esi, %esi
    00000082: 	jle	.Ltmp1983 # Offset: 130
    00000084: 	movslq	%esi, %rdx
    00000087: 	movq	%r13, %rdi
    0000008a: 	movq	%rbx, %rsi
    0000008d: 	shlq	$0x2, %rdx
    00000091: 	callq	memmove@PLT # Offset: 145
.Ltmp1983:
    00000096: 	movl	iterations(%rip), %eax
    0000009c: 	movl	$0x2710, iterations(%rip)
    000000a6: 	movl	%eax, 0xc8(%rsp)
    000000ad: 	callq	clock@PLT # Offset: 173
    000000b2: 	movq	%rax, start_time(%rip)
    000000b9: 	movl	iterations(%rip), %eax
    000000bf: 	movl	%eax, 0xb8(%rsp)
    000000c6: 	testl	%eax, %eax
    000000c8: 	jle	.Ltmp1984 # Offset: 200
    000000ce: 	movl	0xbc(%rsp), %eax
    000000d5: 	movl	0x2c(%rsp), %edx
    000000d9: 	movslq	%ebp, %rdi
    000000dc: 	movl	$0x0, 0x58(%rsp)
    000000e4: 	movq	%rdi, 0x50(%rsp)
    000000e9: 	movss	DATAat0x494c0(%rip), %xmm7
    000000f1: 	pxor	%xmm1, %xmm1
    000000f5: 	movss	DATAat0x49420(%rip), %xmm4
    000000fd: 	subl	$0x1, %eax
    00000100: 	leal	-0x2(%rdx), %esi
    00000103: 	movaps	DATAat0x49420(%rip), %xmm2
    0000010a: 	movaps	%xmm7, %xmm8
    0000010e: 	movl	%eax, 0x24(%rsp)
    00000112: 	movslq	0x28(%rsp), %rax
    00000117: 	movslq	%esi, %rcx
    0000011a: 	leaq	(,%rcx,4), %r11
    00000122: 	movq	%rcx, 0x70(%rsp)
    00000127: 	movq	%rax, %r15
    0000012a: 	leaq	(,%rax,4), %r12
    00000132: 	addq	%rcx, %rax
    00000135: 	movl	%esi, 0x34(%rsp)
    00000139: 	shlq	$0x2, %rax
    0000013d: 	movq	%r11, 0x90(%rsp)
    00000145: 	subq	$0x4, %r11
    00000149: 	movq	%rax, 0xa0(%rsp)
    00000151: 	subq	$0x8, %rax
    00000155: 	movq	%rax, 0xa8(%rsp)
    0000015d: 	leal	(%r15,%r15), %eax
    00000161: 	movl	%eax, 0x30(%rsp)
    00000165: 	cltq
    00000167: 	addq	%rcx, %rax
    0000016a: 	movl	%edx, %ecx
    0000016c: 	movq	%r11, 0x98(%rsp)
    00000174: 	leaq	-0xc(,%rax,4), %rax
    0000017c: 	movq	%rax, 0xb0(%rsp)
    00000184: 	leal	-0x3(%rdx), %eax
    00000187: 	movl	%esi, %edx
    00000189: 	movl	%eax, 0x40(%rsp)
    0000018d: 	movl	%esi, %eax
    0000018f: 	andl	$-0x4, %edx
    00000192: 	andl	$0x3, %esi
    00000195: 	shrl	$0x2, %eax
    00000198: 	subl	%edx, %ecx
    0000019a: 	movl	%esi, 0x5c(%rsp)
    0000019e: 	movq	%rdi, %rsi
    000001a1: 	subl	$0x1, %eax
    000001a4: 	andq	$-0x4, %rsi
    000001a8: 	movl	%edx, 0x44(%rsp)
    000001ac: 	notq	%rax
    000001af: 	movq	%rsi, 0x78(%rsp)
    000001b4: 	shlq	$0x4, %rax
    000001b8: 	movl	%ecx, 0x60(%rsp)
    000001bc: 	movq	%rax, 0x48(%rsp)
    000001c1: 	leaq	-0x1(%rdi), %rax
    000001c5: 	movq	%rax, 0x80(%rsp)
    000001cd: 	movq	%rdi, %rax
    000001d0: 	shrq	$0x2, %rax
    000001d4: 	shlq	$0x4, %rax
    000001d8: 	movq	%rax, 0x88(%rsp)
    000001e0: 	leal	-0x2(%rcx), %eax
    000001e3: 	movl	%eax, 0x64(%rsp)
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2005:
    000001f0: 	cmpl	$0x1, 0x24(%rsp)
    000001f5: 	jle	.Ltmp1985 # Offset: 501
    000001fb: 	movl	0x34(%rsp), %eax
    000001ff: 	testl	%eax, %eax
    00000201: 	jle	.Ltmp1985 # Offset: 513
    00000207: 	movq	0x98(%rsp), %rax
    0000020f: 	movl	$0x1, 0x1c(%rsp)
    00000217: 	xorps	%xmm6, %xmm6
    0000021a: 	leaq	(%rbx,%r12), %rsi
    0000021e: 	movq	0xa0(%rsp), %r15
    00000226: 	movl	0x28(%rsp), %r11d
    0000022b: 	addq	%rbx, %rax
    0000022e: 	movss	DATAat0x49420(%rip), %xmm3
    00000236: 	movq	DATAat0x49420(%rip), %xmm5
    0000023e: 	movq	%rax, 0x10(%rsp)
    00000243: 	movq	0xa8(%rsp), %rax
    0000024b: 	leaq	(%rbx,%rax), %r9
    0000024f: 	movq	0xb0(%rsp), %rax
    00000257: 	leaq	(%rbx,%rax), %r10
    0000025b: 	movq	%r13, %rax
    0000025e: 	subq	0x90(%rsp), %rax
    00000266: 	movq	%rax, 0x68(%rsp)
    0000026b: 	leaq	-0xc(%r13), %rax
    0000026f: 	movq	%rax, 0x38(%rsp)
    00000274: 	nopl	(%rax) # Size: 4
.Ltmp1991:
    00000278: 	movl	0x30(%rsp), %eax
    0000027c: 	movl	%r11d, %ecx
    0000027f: 	movq	%r15, %rdi
    00000282: 	subl	0x28(%rsp), %ecx
    00000286: 	subq	%r12, %rdi
    00000289: 	movl	%r11d, %edx
    0000028c: 	movq	0x10(%rsp), %r14
    00000291: 	addl	$0x1, 0x1c(%rsp)
    00000296: 	leal	(%rcx,%rax), %r11d
    0000029a: 	leaq	(%r13,%r15), %rax
    0000029f: 	movq	%rdi, 0x8(%rsp)
    000002a4: 	movq	%r15, %r8
    000002a7: 	movq	%rax, %rdi
    000002aa: 	addq	%r12, %r15
    000002ad: 	subq	%r9, %rdi
    000002b0: 	addq	$0x8, %rdi
    000002b4: 	cmpq	$0x10, %rdi
    000002b8: 	movq	%rax, %rdi
    000002bb: 	seta	%bpl
    000002bf: 	subq	%r14, %rdi
    000002c2: 	addq	$0x8, %rdi
    000002c6: 	cmpq	$0x8, %rdi
    000002ca: 	seta	%dil
    000002ce: 	andl	%ebp, %edi
    000002d0: 	cmpl	$0x3, 0x2c(%rsp)
    000002d5: 	setne	%bpl
    000002d9: 	testb	%bpl, %dil
    000002dc: 	je	.Ltmp1986 # Offset: 732
    000002e2: 	subq	%r10, %rax
    000002e5: 	cmpq	$0x8, %rax
    000002e9: 	jbe	.Ltmp1986 # Offset: 745
    000002ef: 	cmpl	$0x2, 0x40(%rsp)
    000002f4: 	jbe	.Ltmp1987 # Offset: 756
    000002fa: 	movq	0x38(%rsp), %rax
    000002ff: 	movl	%edx, 0x20(%rsp)
    00000303: 	subq	$0x8, %r14
    00000307: 	leaq	-0x8(%r9), %rbp
    0000030b: 	movq	0x48(%rsp), %rdx
    00000310: 	pxor	%xmm9, %xmm9
    00000315: 	leaq	(%rax,%r8), %rdi
    00000319: 	xorl	%eax, %eax
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1988:
    00000320: 	movups	(%r14,%rax), %xmm0
    00000325: 	movups	(%rbp,%rax), %xmm10
    0000032b: 	shufps	$0x1b, %xmm0, %xmm0
    0000032f: 	shufps	$0x1b, %xmm10, %xmm10
    00000334: 	addps	%xmm10, %xmm0
    00000338: 	movups	(%r9,%rax), %xmm10
    0000033d: 	shufps	$0x1b, %xmm10, %xmm10
    00000342: 	addps	%xmm10, %xmm0
    00000346: 	movups	(%r10,%rax), %xmm10
    0000034b: 	shufps	$0x1b, %xmm10, %xmm10
    00000350: 	addps	%xmm10, %xmm0
    00000354: 	addps	%xmm9, %xmm0
    00000358: 	mulps	%xmm2, %xmm0
    0000035b: 	shufps	$0x1b, %xmm0, %xmm0
    0000035f: 	movups	%xmm0, (%rdi,%rax)
    00000363: 	subq	$0x10, %rax
    00000367: 	cmpq	%rdx, %rax
    0000036a: 	jne	.Ltmp1988 # Offset: 874
    0000036c: 	movl	0x20(%rsp), %edx
    00000370: 	movl	0x44(%rsp), %eax
    00000374: 	leaq	(%rsi,%r12), %rdi
    00000378: 	cmpl	%eax, 0x34(%rsp)
    0000037c: 	je	.Ltmp1989 # Offset: 892
    00000382: 	cmpl	$0x3, 0x60(%rsp)
    00000387: 	movl	0x64(%rsp), %r14d
    0000038c: 	je	.Ltmp1990 # Offset: 908
    00000392: 	movl	%eax, %edi
    00000394: 	movl	0x5c(%rsp), %eax
    00000398: 	movl	%eax, 0x20(%rsp)
.Ltmp2007:
    0000039c: 	addl	$0x1, %edi
    0000039f: 	movq	0x8(%rsp), %rax
    000003a4: 	negq	%rdi
    000003a7: 	shlq	$0x2, %rdi
    000003ab: 	addq	%rbx, %rax
    000003ae: 	leaq	0x4(%r8,%rdi), %rbp
    000003b3: 	movq	(%rax,%rdi), %xmm0
    000003b8: 	addq	%r13, %r8
    000003bb: 	movl	0x20(%rsp), %eax
    000003bf: 	movq	-0x8(%rbx,%rbp), %xmm11
    000003c6: 	movq	(%rbx,%rbp), %xmm10
    000003cc: 	leaq	(%rbx,%r15), %rbp
    000003d0: 	shufps	$0xe1, %xmm0, %xmm0
    000003d4: 	movq	(%rbp,%rdi), %xmm9
    000003db: 	shufps	$0xe1, %xmm11, %xmm11
    000003e0: 	shufps	$0xe1, %xmm10, %xmm10
    000003e5: 	addps	%xmm11, %xmm0
    000003e9: 	shufps	$0xe1, %xmm9, %xmm9
    000003ee: 	addps	%xmm10, %xmm0
    000003f2: 	addps	%xmm9, %xmm0
    000003f6: 	addps	%xmm6, %xmm0
    000003f9: 	mulps	%xmm5, %xmm0
    000003fc: 	shufps	$0xe1, %xmm0, %xmm0
    00000400: 	movlps	%xmm0, (%r8,%rdi)
    00000405: 	movl	%r14d, %r8d
    00000408: 	leaq	(%rsi,%r12), %rdi
    0000040c: 	andl	$-0x2, %r8d
    00000410: 	subl	%r8d, %eax
    00000413: 	cmpl	%r14d, %r8d
    00000416: 	je	.Ltmp1989 # Offset: 1046
.Ltmp2008:
    00000418: 	addl	%eax, %ecx
    0000041a: 	leaq	(%rsi,%r12), %rdi
    0000041e: 	movslq	%ecx, %rcx
    00000421: 	movss	(%rbx,%rcx,4), %xmm0
    00000426: 	leal	-0x1(%rdx,%rax), %ecx
    0000042a: 	movslq	%ecx, %rcx
    0000042d: 	addss	(%rbx,%rcx,4), %xmm0
    00000432: 	leal	0x1(%rdx,%rax), %ecx
    00000436: 	addl	%eax, %edx
    00000438: 	addl	%r11d, %eax
    0000043b: 	movslq	%ecx, %rcx
    0000043e: 	cltq
    00000440: 	movslq	%edx, %rdx
    00000443: 	addss	(%rbx,%rcx,4), %xmm0
    00000448: 	addss	(%rbx,%rax,4), %xmm0
    0000044d: 	addss	%xmm1, %xmm0
    00000451: 	mulss	%xmm3, %xmm0
    00000455: 	movss	%xmm0, (%r13,%rdx,4)
.Ltmp1989:
    0000045c: 	addq	%r12, 0x10(%rsp)
    00000461: 	movl	0x1c(%rsp), %edx
    00000465: 	addq	%r12, %r9
    00000468: 	movq	%rdi, %rsi
    0000046b: 	addq	%r12, %r10
    0000046e: 	cmpl	%edx, 0x24(%rsp)
    00000472: 	jne	.Ltmp1991 # Offset: 1138
.Ltmp1985:
    00000478: 	cmpq	$0x0, 0x50(%rsp)
    0000047e: 	je	.Ltmp1992 # Offset: 1150
    00000484: 	cmpq	$0x2, 0x80(%rsp)
    0000048d: 	jbe	.Ltmp1993 # Offset: 1165
    00000493: 	movaps	DATAat0x494b0(%rip), %xmm9
    0000049b: 	movq	0x88(%rsp), %rdx
    000004a3: 	xorl	%eax, %eax
    000004a5: 	movaps	%xmm1, %xmm3
    000004a8: 	pxor	%xmm6, %xmm6
    000004ac: 	nopl	(%rax) # Size: 4
.Ltmp1994:
    000004b0: 	movups	(%r13,%rax), %xmm0
    000004b6: 	movups	(%rbx,%rax), %xmm5
    000004ba: 	addq	$0x10, %rax
    000004be: 	subps	%xmm0, %xmm5
    000004c1: 	movaps	%xmm5, %xmm0
    000004c4: 	movaps	%xmm5, %xmm10
    000004c8: 	cmpltps	%xmm6, %xmm0
    000004cc: 	xorps	%xmm9, %xmm10
    000004d0: 	andps	%xmm0, %xmm10
    000004d4: 	andnps	%xmm5, %xmm0
    000004d7: 	orps	%xmm10, %xmm0
    000004db: 	addss	%xmm0, %xmm3
    000004df: 	movaps	%xmm0, %xmm5
    000004e2: 	shufps	$0x55, %xmm0, %xmm5
    000004e6: 	addss	%xmm3, %xmm5
    000004ea: 	movaps	%xmm0, %xmm3
    000004ed: 	unpckhps	%xmm0, %xmm3
    000004f0: 	shufps	$0xff, %xmm0, %xmm0
    000004f4: 	addss	%xmm5, %xmm3
    000004f8: 	addss	%xmm0, %xmm3
    000004fc: 	cmpq	%rax, %rdx
    000004ff: 	jne	.Ltmp1994 # Offset: 1279
    00000501: 	movq	0x78(%rsp), %rax
    00000506: 	cmpq	%rax, 0x50(%rsp)
    0000050b: 	je	.Ltmp1995 # Offset: 1291
.Ltmp2010:
    0000050d: 	movss	(%rbx,%rax,4), %xmm0
    00000512: 	subss	(%r13,%rax,4), %xmm0
    00000519: 	leaq	(,%rax,4), %rdx
    00000521: 	comiss	%xmm0, %xmm1
    00000524: 	jbe	.Ltmp1996 # Offset: 1316
    00000526: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp1996:
    0000052d: 	addss	%xmm0, %xmm3
    00000531: 	leaq	0x1(%rax), %rcx
    00000535: 	cmpq	%rcx, 0x50(%rsp)
    0000053a: 	jbe	.Ltmp1995 # Offset: 1338
    0000053c: 	movss	0x4(%rbx,%rdx), %xmm0
    00000542: 	subss	0x4(%r13,%rdx), %xmm0
    00000549: 	comiss	%xmm0, %xmm1
    0000054c: 	jbe	.Ltmp1997 # Offset: 1356
    0000054e: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp1997:
    00000555: 	addss	%xmm0, %xmm3
    00000559: 	addq	$0x2, %rax
    0000055d: 	cmpq	%rax, 0x50(%rsp)
    00000562: 	jbe	.Ltmp1995 # Offset: 1378
    00000564: 	movss	0x8(%rbx,%rdx), %xmm0
    0000056a: 	subss	0x8(%r13,%rdx), %xmm0
    00000571: 	comiss	%xmm0, %xmm1
    00000574: 	jbe	.Ltmp1998 # Offset: 1396
    00000576: 	xorps	%xmm8, %xmm0
.Ltmp1998:
    0000057a: 	addss	%xmm0, %xmm3
.Ltmp1995:
    0000057e: 	movq	0x50(%rsp), %rdx
    00000583: 	movaps	%xmm1, %xmm5
    00000586: 	xorl	%eax, %eax
    00000588: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2000:
    00000590: 	movss	(%rbx,%rax,4), %xmm0
    00000595: 	subss	(%r13,%rax,4), %xmm0
    0000059c: 	comiss	%xmm0, %xmm1
    0000059f: 	jbe	.Ltmp1999 # Offset: 1439
    000005a1: 	xorps	%xmm7, %xmm0
.Ltmp1999:
    000005a4: 	maxss	%xmm5, %xmm0
    000005a8: 	addq	$0x1, %rax
    000005ac: 	movaps	%xmm0, %xmm5
    000005af: 	cmpq	%rax, %rdx
    000005b2: 	jne	.Ltmp2000 # Offset: 1458
    000005b4: 	movl	0x58(%rsp), %eax
    000005b8: 	cmpl	%eax, 0x130(%rsp)
    000005bf: 	jge	.Ltmp2001 # Offset: 1471
    000005c1: 	movss	DATAat0x49548(%rip), %xmm0
    000005c9: 	comiss	%xmm3, %xmm0
    000005cc: 	ja	.Ltmp2002 # Offset: 1484
    000005d2: 	ucomiss	%xmm3, %xmm3
    000005d5: 	jp	.Ltmp2003 # Offset: 1493
    000005db: 	movss	DATAat0x4954c(%rip), %xmm0
    000005e3: 	comiss	%xmm5, %xmm0
    000005e6: 	ja	.Ltmp2004 # Offset: 1510
    000005ec: 	ucomiss	%xmm5, %xmm5
    000005ef: 	jp	.Ltmp2003 # Offset: 1519
.Ltmp2001:
    000005f5: 	addl	$0x1, 0x58(%rsp)
    000005fa: 	movq	%r13, %rax
    000005fd: 	movl	0x58(%rsp), %esi
    00000601: 	movq	%rbx, %r13
    00000604: 	cmpl	0xb8(%rsp), %esi
    0000060b: 	je	.Ltmp2002 # Offset: 1547
    00000611: 	movq	%rax, %rbx
    00000614: 	jmp	.Ltmp2005 # Offset: 1556
    00000619: 	nopl	(%rax) # Size: 7
.Ltmp1986:
    00000620: 	movq	%rsi, %rdx
    00000623: 	movq	0x70(%rsp), %rax
    00000628: 	leaq	(%r12,%rsi), %rdi
    0000062c: 	addq	0x68(%rsp), %r8
    00000631: 	subq	%r12, %rdx
    00000634: 	nopl	(%rax) # Size: 4
.Ltmp2006:
    00000638: 	movss	(%rdx,%rax,4), %xmm0
    0000063d: 	addss	-0x4(%rsi,%rax,4), %xmm0
    00000643: 	addss	0x4(%rsi,%rax,4), %xmm0
    00000649: 	addss	(%rdi,%rax,4), %xmm0
    0000064e: 	addss	%xmm1, %xmm0
    00000652: 	mulss	%xmm4, %xmm0
    00000656: 	movss	%xmm0, (%r8,%rax,4)
    0000065c: 	subq	$0x1, %rax
    00000660: 	testl	%eax, %eax
    00000662: 	jg	.Ltmp2006 # Offset: 1634
    00000664: 	jmp	.Ltmp1989 # Offset: 1636
.Ltmp1987:
    00000669: 	movl	0x34(%rsp), %eax
    0000066d: 	xorl	%edi, %edi
    0000066f: 	movl	%eax, 0x20(%rsp)
    00000673: 	movl	%eax, %r14d
    00000676: 	jmp	.Ltmp2007 # Offset: 1654
.Ltmp1990:
    0000067b: 	movl	0x5c(%rsp), %eax
    0000067f: 	jmp	.Ltmp2008 # Offset: 1663
.Ltmp1992:
    00000684: 	movl	0x58(%rsp), %eax
    00000688: 	movaps	%xmm1, %xmm5
    0000068b: 	cmpl	%eax, 0x130(%rsp)
    00000692: 	jl	.Ltmp2009 # Offset: 1682
    00000694: 	movaps	%xmm1, %xmm3
    00000697: 	jmp	.Ltmp2001 # Offset: 1687
.Ltmp1993:
    0000069c: 	movaps	%xmm1, %xmm3
    0000069f: 	xorl	%eax, %eax
    000006a1: 	jmp	.Ltmp2010 # Offset: 1697
.Ltmp2009:
    000006a6: 	movaps	%xmm5, %xmm3
.Ltmp2002:
    000006a9: 	ucomiss	%xmm3, %xmm3
    000006ac: 	setp	%r12b
    000006b0: 	ucomiss	%xmm5, %xmm5
    000006b3: 	setp	%al
    000006b6: 	orl	%eax, %r12d
.Ltmp2016:
    000006b9: 	movss	%xmm5, 0x10(%rsp)
    000006bf: 	movss	%xmm3, 0x8(%rsp)
    000006c5: 	callq	clock@PLT # Offset: 1733
    000006ca: 	movl	0xbc(%rsp), %esi
    000006d1: 	pxor	%xmm0, %xmm0
    000006d5: 	movss	0xcc(%rsp), %xmm7
    000006de: 	movq	%rax, end_time(%rip)
    000006e5: 	subq	start_time(%rip), %rax
    000006ec: 	cvtsi2sd	%rax, %xmm0
    000006f1: 	movl	%esi, %eax
    000006f3: 	divsd	DATAat0x49520(%rip), %xmm0
    000006fb: 	movss	0x8(%rsp), %xmm3
    00000701: 	shrl	$0x1f, %eax
    00000704: 	movss	0x10(%rsp), %xmm5
    0000070a: 	movq	%xmm0, %rbx
    0000070f: 	addl	%esi, %eax
    00000711: 	movl	0x2c(%rsp), %esi
    00000715: 	sarl	%eax
    00000717: 	movl	%esi, %edx
    00000719: 	imull	%esi, %eax
    0000071c: 	shrl	$0x1f, %edx
    0000071f: 	addl	%esi, %edx
    00000721: 	sarl	%edx
    00000723: 	addl	%edx, %eax
    00000725: 	testb	%r12b, %r12b
    00000728: 	cltq
    0000072a: 	subss	(%r13,%rax,4), %xmm7
    00000731: 	movq	0xc0(%rsp), %rax
    00000739: 	movq	0x8(%rax), %rdx
    0000073d: 	movq	(%rax), %rsi
    00000740: 	movd	%xmm7, %ebp
    00000744: 	jne	.Ltmp2011 # Offset: 1860
    0000074a: 	movl	0x58(%rsp), %eax
    0000074e: 	cmpl	%eax, iterations(%rip)
    00000754: 	jg	.Ltmp2012 # Offset: 1876
    00000756: 	comiss	DATAat0x49548(%rip), %xmm3
    0000075d: 	jbe	.Ltmp2012 # Offset: 1885
    0000075f: 	comiss	DATAat0x4954c(%rip), %xmm5
    00000766: 	ja	.Ltmp2013 # Offset: 1894
.Ltmp2012:
    0000076c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000773: 	movss	%xmm5, 0x10(%rsp)
    00000779: 	movq	%r12, %rdi
    0000077c: 	movss	%xmm3, 0x8(%rsp)
    00000782: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1922
    00000787: 	movl	$0xa, %edx
    0000078c: 	leaq	DATAat0x491ab(%rip), %rsi
    00000793: 	movq	%rax, %rdi
    00000796: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1942
    0000079b: 	movss	0x10(%rsp), %xmm5
    000007a1: 	movss	0x8(%rsp), %xmm3
.Ltmp2015:
    000007a7: 	movl	$0x4, %edx
    000007ac: 	movq	%r12, %rdi
    000007af: 	leaq	DATAat0x491b6(%rip), %rsi
    000007b6: 	movss	%xmm5, 0x10(%rsp)
    000007bc: 	movss	%xmm3, 0x8(%rsp)
    000007c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1986
    000007c7: 	movl	0x58(%rsp), %esi
    000007cb: 	movq	%r12, %rdi
    000007ce: 	callq	_ZNSolsEi@PLT # Offset: 1998
    000007d3: 	movl	$0xb, %edx
    000007d8: 	leaq	DATAat0x491bb(%rip), %rsi
    000007df: 	movq	%rax, %rdi
    000007e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2018
    000007e7: 	movl	$0xa, %edx
    000007ec: 	leaq	DATAat0x491c7(%rip), %rsi
    000007f3: 	movq	%r12, %rdi
    000007f6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2038
    000007fb: 	movss	0x8(%rsp), %xmm3
    00000801: 	movq	%r12, %rdi
    00000804: 	pxor	%xmm0, %xmm0
    00000808: 	cvtss2sd	%xmm3, %xmm0
    0000080c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2060
    00000811: 	movl	$0x7, %edx
    00000816: 	leaq	DATAat0x491d2(%rip), %rsi
    0000081d: 	movq	%rax, %rdi
    00000820: 	movq	%rax, %r12
    00000823: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2083
    00000828: 	movss	0x10(%rsp), %xmm5
    0000082e: 	movq	%r12, %rdi
    00000831: 	pxor	%xmm0, %xmm0
    00000835: 	cvtss2sd	%xmm5, %xmm0
    00000839: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2105
    0000083e: 	movl	$0x10, %edx
    00000843: 	leaq	DATAat0x491da(%rip), %rsi
    0000084a: 	movq	%rax, %r12
    0000084d: 	movq	%rax, %rdi
    00000850: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2128
    00000855: 	movd	%ebp, %xmm7
    00000859: 	movq	%r12, %rdi
    0000085c: 	pxor	%xmm0, %xmm0
    00000860: 	cvtss2sd	%xmm7, %xmm0
    00000864: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2148
    00000869: 	movl	$0x8, %edx
    0000086e: 	leaq	DATAat0x491eb(%rip), %rsi
    00000875: 	movq	%rax, %rbp
    00000878: 	movq	%rax, %rdi
    0000087b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2171
    00000880: 	movq	%rbx, %xmm0
    00000885: 	movq	%rbp, %rdi
    00000888: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2184
    0000088d: 	movl	$0x2, %edx
    00000892: 	leaq	DATAat0x491f4(%rip), %rsi
    00000899: 	movq	%rax, %rdi
    0000089c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2204
    000008a1: 	movl	0xc8(%rsp), %eax
    000008a8: 	movl	%eax, iterations(%rip)
    000008ae: 	movq	0xe8(%rsp), %rax
    000008b6: 	subq	%fs:0x28, %rax
    000008bf: 	jne	.Ltmp2014 # Offset: 2239
    000008c5: 	addq	$0xf8, %rsp
    000008cc: 	popq	%rbx
    000008cd: 	popq	%rbp
    000008ce: 	popq	%r12
    000008d0: 	popq	%r13
    000008d2: 	popq	%r14
    000008d4: 	popq	%r15
    000008d6: 	retq # Offset: 2262
.Ltmp2011:
    000008d7: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000008de: 	movq	%r12, %rdi
    000008e1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2273
    000008e6: 	movl	$0x10, %edx
    000008eb: 	leaq	DATAat0x493d4(%rip), %rsi
    000008f2: 	movq	%rax, %rdi
    000008f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2293
    000008fa: 	movss	0x8(%rsp), %xmm3
    00000900: 	movss	0x10(%rsp), %xmm5
    00000906: 	jmp	.Ltmp2015 # Offset: 2310
.Ltmp2003:
    0000090b: 	movl	$0x1, %r12d
    00000911: 	jmp	.Ltmp2016 # Offset: 2321
.Ltmp2013:
    00000916: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    0000091d: 	movss	%xmm5, 0x10(%rsp)
    00000923: 	movq	%r12, %rdi
    00000926: 	movss	%xmm3, 0x8(%rsp)
    0000092c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2348
    00000931: 	movl	$0x11, %edx
    00000936: 	leaq	DATAat0x49199(%rip), %rsi
    0000093d: 	movq	%rax, %rdi
    00000940: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2368
    00000945: 	movss	0x8(%rsp), %xmm3
    0000094b: 	movss	0x10(%rsp), %xmm5
    00000951: 	jmp	.Ltmp2015 # Offset: 2385
.Ltmp2004:
    00000956: 	ucomiss	%xmm5, %xmm5
    00000959: 	setp	%r12b
    0000095d: 	jmp	.Ltmp2016 # Offset: 2397
.Ltmp1984:
    00000962: 	pxor	%xmm5, %xmm5
    00000966: 	movl	$0x0, 0x58(%rsp)
    0000096e: 	xorl	%r12d, %r12d
    00000971: 	movaps	%xmm5, %xmm3
    00000974: 	jmp	.Ltmp2016 # Offset: 2420
.Ltmp2014:
    00000979: 	callq	__stack_chk_fail@PLT # Offset: 2425
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff18jacobi2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff18jacobi2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x32180
  Size        : 0x910
  MaxSize     : 0x910
  Offset      : 0x32180
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff18jacobi2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%ecx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	subq	$0xe8, %rsp
    00000022: 	movaps	DATAat0x494a0(%rip), %xmm0
    00000029: 	movl	%edx, 0xac(%rsp)
    00000030: 	movl	%r14d, %edx
    00000033: 	movl	%ecx, 0x38(%rsp)
    00000037: 	leaq	0xc0(%rsp), %rcx
    0000003f: 	movl	%r8d, 0x14(%rsp)
    00000044: 	movq	%r9, 0xb0(%rsp)
    0000004c: 	movq	%fs:0x28, %rax
    00000055: 	movq	%rax, 0xd8(%rsp)
    0000005d: 	xorl	%eax, %eax
    0000005f: 	movaps	%xmm0, 0xc0(%rsp)
    00000067: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 103
    0000006c: 	movl	%ebx, %edi
    0000006e: 	movss	%xmm0, 0xbc(%rsp)
    00000077: 	imull	%r14d, %edi
    0000007b: 	movl	%edi, %ebx
    0000007d: 	testl	%edi, %edi
    0000007f: 	jle	.Ltmp2017 # Offset: 127
    00000081: 	movslq	%edi, %rdx
    00000084: 	movq	%rbp, %rsi
    00000087: 	movq	%r13, %rdi
    0000008a: 	shlq	$0x2, %rdx
    0000008e: 	callq	memmove@PLT # Offset: 142
.Ltmp2017:
    00000093: 	movl	iterations(%rip), %eax
    00000099: 	movl	$0x2710, iterations(%rip)
    000000a3: 	movl	%eax, 0xb8(%rsp)
    000000aa: 	callq	clock@PLT # Offset: 170
    000000af: 	movq	%rax, start_time(%rip)
    000000b6: 	movl	iterations(%rip), %eax
    000000bc: 	movl	%eax, 0x70(%rsp)
    000000c0: 	testl	%eax, %eax
    000000c2: 	jle	.Ltmp2018 # Offset: 194
    000000c8: 	movl	0x38(%rsp), %ecx
    000000cc: 	movl	0xac(%rsp), %eax
    000000d3: 	movl	$0x0, 0x4c(%rsp)
    000000db: 	movss	DATAat0x494c0(%rip), %xmm6
    000000e3: 	movl	0x14(%rsp), %r14d
    000000e8: 	movss	DATAat0x49420(%rip), %xmm3
    000000f0: 	pxor	%xmm1, %xmm1
    000000f4: 	movaps	%xmm6, %xmm7
    000000f7: 	leal	-0x1(%rcx), %esi
    000000fa: 	leal	-0x2(%rax), %edi
    000000fd: 	movaps	DATAat0x49420(%rip), %xmm2
    00000104: 	movl	%esi, 0x74(%rsp)
    00000108: 	movslq	%ebx, %rsi
    0000010b: 	movl	%eax, %ebx
    0000010d: 	subl	$0x3, %eax
    00000110: 	imull	%r14d, %eax
    00000114: 	movl	%edi, 0x6c(%rsp)
    00000118: 	imull	%r14d, %edi
    0000011c: 	movq	%rsi, 0x50(%rsp)
    00000121: 	movslq	%eax, %rdx
    00000124: 	subl	%edi, %eax
    00000126: 	movl	%edi, 0xa8(%rsp)
    0000012d: 	movq	%rdx, 0x98(%rsp)
    00000135: 	movslq	%edi, %rdx
    00000138: 	leal	-0x2(%rcx), %edi
    0000013b: 	movl	%eax, 0x3c(%rsp)
    0000013f: 	leal	-0x3(%rcx), %eax
    00000142: 	movl	%eax, 0x40(%rsp)
    00000146: 	movl	%edi, %eax
    00000148: 	shrl	$0x2, %eax
    0000014b: 	movl	%edi, 0x44(%rsp)
    0000014f: 	andl	$-0x4, %edi
    00000152: 	subl	$0x1, %eax
    00000155: 	movq	%rdx, 0x88(%rsp)
    0000015d: 	leal	-0x1(%rbx), %edx
    00000160: 	subl	%edi, %ecx
    00000162: 	addq	$0x1, %rax
    00000166: 	imull	%r14d, %edx
    0000016a: 	movl	%edi, 0x48(%rsp)
    0000016e: 	shlq	$0x4, %rax
    00000172: 	movl	%ecx, 0x5c(%rsp)
    00000176: 	movq	%rax, %r12
    00000179: 	leal	0x1(%rdi), %eax
    0000017c: 	movl	%eax, 0x58(%rsp)
    00000180: 	leaq	-0x1(%rsi), %rax
    00000184: 	movslq	%edx, %rbx
    00000187: 	movq	%r12, %r15
    0000018a: 	movq	%rax, 0x80(%rsp)
    00000192: 	movq	%rsi, %rax
    00000195: 	andq	$-0x4, %rsi
    00000199: 	shrq	$0x2, %rax
    0000019d: 	movq	%rbx, 0x90(%rsp)
    000001a5: 	shlq	$0x4, %rax
    000001a9: 	movq	%rsi, 0x78(%rsp)
    000001ae: 	movq	%rax, 0xa0(%rsp)
    000001b6: 	leal	-0x2(%rcx), %eax
    000001b9: 	movl	%eax, 0x68(%rsp)
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp2039:
    000001c0: 	movl	0x6c(%rsp), %edi
    000001c4: 	testl	%edi, %edi
    000001c6: 	jle	.Ltmp2019 # Offset: 454
    000001cc: 	cmpl	$0x1, 0x74(%rsp)
    000001d1: 	jle	.Ltmp2019 # Offset: 465
    000001d7: 	movl	0x14(%rsp), %eax
    000001db: 	movq	0x90(%rsp), %rbx
    000001e3: 	movl	%edi, 0x18(%rsp)
    000001e7: 	movq	0x88(%rsp), %r10
    000001ef: 	movl	0xa8(%rsp), %ecx
    000001f6: 	negl	%eax
    000001f8: 	movq	0x98(%rsp), %r11
    00000200: 	movq	%rbx, %r14
    00000203: 	movq	DATAat0x49420(%rip), %xmm5
    0000020b: 	cltq
    0000020d: 	movss	DATAat0x49420(%rip), %xmm4
    00000215: 	movq	%rax, 0x20(%rsp)
    0000021a: 	leaq	0x4(%r13), %rax
    0000021e: 	movq	%rax, 0x30(%rsp)
    00000223: 	leaq	0x8(%rbp), %rax
    00000227: 	movq	%rax, 0x8(%rsp)
    0000022c: 	movq	%r13, %rax
    0000022f: 	subq	%rbp, %rax
    00000232: 	movq	%rax, 0x28(%rsp)
    00000237: 	movl	0x40(%rsp), %eax
    0000023b: 	addq	$0x1, %rax
    0000023f: 	movq	%rax, 0x60(%rsp)
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp2025:
    00000248: 	movl	0x3c(%rsp), %eax
    0000024c: 	movq	0x30(%rsp), %rdi
    00000251: 	leaq	(,%r11,4), %rsi
    00000259: 	leaq	(,%r14,4), %r8
    00000261: 	subl	$0x1, 0x18(%rsp)
    00000266: 	leal	(%rcx,%rax), %edx
    00000269: 	movl	0x14(%rsp), %eax
    0000026d: 	leal	(%rax,%rcx), %r9d
    00000271: 	leaq	(,%r10,4), %rax
    00000279: 	addq	%rax, %rdi
    0000027c: 	cmpq	$0x10, 0x28(%rsp)
    00000282: 	seta	%bl
    00000285: 	cmpl	$0x3, 0x38(%rsp)
    0000028a: 	setne	%r12b
    0000028e: 	andl	%r12d, %ebx
    00000291: 	movb	%bl, 0x1f(%rsp)
    00000295: 	movq	0x8(%rsp), %rbx
    0000029a: 	leaq	(%rbx,%rsi), %r12
    0000029e: 	movq	%rdi, %rbx
    000002a1: 	subq	%r12, %rbx
    000002a4: 	cmpq	$0x8, %rbx
    000002a8: 	seta	%r12b
    000002ac: 	testb	%r12b, 0x1f(%rsp)
    000002b1: 	je	.Ltmp2020 # Offset: 689
    000002b7: 	movq	0x8(%rsp), %rbx
    000002bc: 	leaq	(%rbx,%r8), %r12
    000002c0: 	movq	%rdi, %rbx
    000002c3: 	subq	%r12, %rbx
    000002c6: 	cmpq	$0x8, %rbx
    000002ca: 	jbe	.Ltmp2020 # Offset: 714
    000002d0: 	cmpl	$0x2, 0x40(%rsp)
    000002d5: 	jbe	.Ltmp2021 # Offset: 725
    000002db: 	leaq	0x4(%rbp), %rbx
    000002df: 	leaq	(%rax,%rbp), %r12
    000002e3: 	pxor	%xmm8, %xmm8
    000002e8: 	addq	0x8(%rsp), %rax
    000002ed: 	addq	%rbx, %rsi
    000002f0: 	addq	%r8, %rbx
    000002f3: 	xorl	%r8d, %r8d
    000002f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2022:
    00000300: 	movups	(%rsi,%r8), %xmm0
    00000305: 	movups	(%r12,%r8), %xmm11
    0000030a: 	movups	(%rax,%r8), %xmm12
    0000030f: 	movups	(%rbx,%r8), %xmm13
    00000314: 	addps	%xmm11, %xmm0
    00000318: 	addps	%xmm12, %xmm0
    0000031c: 	addps	%xmm13, %xmm0
    00000320: 	addps	%xmm8, %xmm0
    00000324: 	mulps	%xmm2, %xmm0
    00000327: 	movups	%xmm0, (%rdi,%r8)
    0000032c: 	addq	$0x10, %r8
    00000330: 	cmpq	%r8, %r15
    00000333: 	jne	.Ltmp2022 # Offset: 819
    00000335: 	movl	0x48(%rsp), %esi
    00000339: 	cmpl	%esi, 0x44(%rsp)
    0000033d: 	je	.Ltmp2023 # Offset: 829
    00000343: 	cmpl	$0x3, 0x5c(%rsp)
    00000348: 	movl	0x68(%rsp), %ebx
    0000034c: 	movl	0x58(%rsp), %eax
    00000350: 	je	.Ltmp2024 # Offset: 848
.Ltmp2041:
    00000352: 	leaq	(%r10,%rsi), %r8
    00000356: 	leaq	0x1(%rsi,%r11), %r12
    0000035b: 	movq	(%rbp,%r8,4), %xmm8
    00000362: 	movq	(%rbp,%r12,4), %xmm0
    00000369: 	leaq	0x1(%r14,%rsi), %rsi
    0000036e: 	leaq	(,%r8,4), %rdi
    00000376: 	addps	%xmm8, %xmm0
    0000037a: 	movq	0x8(%rbp,%rdi), %xmm8
    00000381: 	addps	%xmm8, %xmm0
    00000385: 	movq	(%rbp,%rsi,4), %xmm8
    0000038c: 	movl	%ebx, %esi
    0000038e: 	andl	$-0x2, %esi
    00000391: 	addl	%esi, %eax
    00000393: 	addps	%xmm8, %xmm0
    00000397: 	xorps	%xmm8, %xmm8
    0000039b: 	addps	%xmm8, %xmm0
    0000039f: 	mulps	%xmm5, %xmm0
    000003a2: 	movlps	%xmm0, 0x4(%r13,%rdi)
    000003a8: 	cmpl	%esi, %ebx
    000003aa: 	je	.Ltmp2023 # Offset: 938
.Ltmp2024:
    000003ac: 	addl	%eax, %edx
    000003ae: 	movslq	%edx, %rdx
    000003b1: 	movss	(%rbp,%rdx,4), %xmm0
    000003b7: 	leal	-0x1(%rcx,%rax), %edx
    000003bb: 	movslq	%edx, %rdx
    000003be: 	addss	(%rbp,%rdx,4), %xmm0
    000003c4: 	leal	0x1(%rcx,%rax), %edx
    000003c8: 	movslq	%edx, %rdx
    000003cb: 	addss	(%rbp,%rdx,4), %xmm0
    000003d1: 	leal	(%rcx,%rax), %edx
    000003d4: 	addl	%r9d, %eax
    000003d7: 	cltq
    000003d9: 	movslq	%edx, %rdx
    000003dc: 	addss	(%rbp,%rax,4), %xmm0
    000003e2: 	addss	%xmm1, %xmm0
    000003e6: 	mulss	%xmm3, %xmm0
    000003ea: 	movss	%xmm0, (%r13,%rdx,4)
.Ltmp2023:
    000003f1: 	movq	0x20(%rsp), %rax
    000003f6: 	subl	0x14(%rsp), %ecx
    000003fa: 	addq	%rax, %r11
    000003fd: 	addq	%rax, %r10
    00000400: 	addq	%rax, %r14
    00000403: 	movl	0x18(%rsp), %eax
    00000407: 	testl	%eax, %eax
    00000409: 	jne	.Ltmp2025 # Offset: 1033
.Ltmp2019:
    0000040f: 	cmpq	$0x0, 0x50(%rsp)
    00000415: 	je	.Ltmp2026 # Offset: 1045
    0000041b: 	cmpq	$0x2, 0x80(%rsp)
    00000424: 	jbe	.Ltmp2027 # Offset: 1060
    0000042a: 	movaps	DATAat0x494b0(%rip), %xmm9
    00000432: 	movq	0xa0(%rsp), %rdx
    0000043a: 	xorl	%eax, %eax
    0000043c: 	movaps	%xmm1, %xmm4
    0000043f: 	pxor	%xmm8, %xmm8
    00000444: 	nopl	(%rax) # Size: 4
.Ltmp2028:
    00000448: 	movups	(%r13,%rax), %xmm0
    0000044e: 	movups	(%rbp,%rax), %xmm5
    00000453: 	addq	$0x10, %rax
    00000457: 	subps	%xmm0, %xmm5
    0000045a: 	movaps	%xmm5, %xmm0
    0000045d: 	movaps	%xmm5, %xmm10
    00000461: 	cmpltps	%xmm8, %xmm0
    00000466: 	xorps	%xmm9, %xmm10
    0000046a: 	andps	%xmm0, %xmm10
    0000046e: 	andnps	%xmm5, %xmm0
    00000471: 	orps	%xmm10, %xmm0
    00000475: 	addss	%xmm0, %xmm4
    00000479: 	movaps	%xmm0, %xmm5
    0000047c: 	shufps	$0x55, %xmm0, %xmm5
    00000480: 	addss	%xmm4, %xmm5
    00000484: 	movaps	%xmm0, %xmm4
    00000487: 	unpckhps	%xmm0, %xmm4
    0000048a: 	shufps	$0xff, %xmm0, %xmm0
    0000048e: 	addss	%xmm5, %xmm4
    00000492: 	addss	%xmm0, %xmm4
    00000496: 	cmpq	%rax, %rdx
    00000499: 	jne	.Ltmp2028 # Offset: 1177
    0000049b: 	movq	0x78(%rsp), %rax
    000004a0: 	cmpq	%rax, 0x50(%rsp)
    000004a5: 	je	.Ltmp2029 # Offset: 1189
.Ltmp2043:
    000004a7: 	movss	(%rbp,%rax,4), %xmm0
    000004ad: 	subss	(%r13,%rax,4), %xmm0
    000004b4: 	leaq	(,%rax,4), %rdx
    000004bc: 	comiss	%xmm0, %xmm1
    000004bf: 	jbe	.Ltmp2030 # Offset: 1215
    000004c1: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2030:
    000004c8: 	addss	%xmm0, %xmm4
    000004cc: 	leaq	0x1(%rax), %rcx
    000004d0: 	cmpq	%rcx, 0x50(%rsp)
    000004d5: 	jbe	.Ltmp2029 # Offset: 1237
    000004d7: 	movss	0x4(%rbp,%rdx), %xmm0
    000004dd: 	subss	0x4(%r13,%rdx), %xmm0
    000004e4: 	comiss	%xmm0, %xmm1
    000004e7: 	jbe	.Ltmp2031 # Offset: 1255
    000004e9: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2031:
    000004f0: 	addss	%xmm0, %xmm4
    000004f4: 	addq	$0x2, %rax
    000004f8: 	cmpq	%rax, 0x50(%rsp)
    000004fd: 	jbe	.Ltmp2029 # Offset: 1277
    000004ff: 	movss	0x8(%rbp,%rdx), %xmm0
    00000505: 	subss	0x8(%r13,%rdx), %xmm0
    0000050c: 	comiss	%xmm0, %xmm1
    0000050f: 	jbe	.Ltmp2032 # Offset: 1295
    00000511: 	xorps	%xmm7, %xmm0
.Ltmp2032:
    00000514: 	addss	%xmm0, %xmm4
.Ltmp2029:
    00000518: 	movq	0x50(%rsp), %rdx
    0000051d: 	movaps	%xmm1, %xmm5
    00000520: 	xorl	%eax, %eax
    00000522: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2034:
    00000528: 	movss	(%rbp,%rax,4), %xmm0
    0000052e: 	subss	(%r13,%rax,4), %xmm0
    00000535: 	comiss	%xmm0, %xmm1
    00000538: 	jbe	.Ltmp2033 # Offset: 1336
    0000053a: 	xorps	%xmm6, %xmm0
.Ltmp2033:
    0000053d: 	maxss	%xmm5, %xmm0
    00000541: 	addq	$0x1, %rax
    00000545: 	movaps	%xmm0, %xmm5
    00000548: 	cmpq	%rax, %rdx
    0000054b: 	jne	.Ltmp2034 # Offset: 1355
    0000054d: 	movl	0x4c(%rsp), %eax
    00000551: 	cmpl	%eax, 0x120(%rsp)
    00000558: 	jge	.Ltmp2035 # Offset: 1368
    0000055a: 	movss	DATAat0x49548(%rip), %xmm0
    00000562: 	comiss	%xmm4, %xmm0
    00000565: 	ja	.Ltmp2036 # Offset: 1381
    0000056b: 	ucomiss	%xmm4, %xmm4
    0000056e: 	jp	.Ltmp2037 # Offset: 1390
    00000574: 	movss	DATAat0x4954c(%rip), %xmm0
    0000057c: 	comiss	%xmm5, %xmm0
    0000057f: 	ja	.Ltmp2038 # Offset: 1407
    00000585: 	ucomiss	%xmm5, %xmm5
    00000588: 	jp	.Ltmp2037 # Offset: 1416
.Ltmp2035:
    0000058e: 	addl	$0x1, 0x4c(%rsp)
    00000593: 	movq	%r13, %rax
    00000596: 	movl	0x4c(%rsp), %edi
    0000059a: 	movq	%rbp, %r13
    0000059d: 	cmpl	0x70(%rsp), %edi
    000005a1: 	je	.Ltmp2036 # Offset: 1441
    000005a7: 	movq	%rax, %rbp
    000005aa: 	jmp	.Ltmp2039 # Offset: 1450
    000005af: 	nop # Size: 1
.Ltmp2020:
    000005b0: 	movq	0x60(%rsp), %rdi
    000005b5: 	subq	%rax, %rsi
    000005b8: 	subq	%rax, %r8
    000005bb: 	addq	%rbp, %rsi
    000005be: 	addq	%rbp, %r8
    000005c1: 	leaq	(%rdi,%r10), %rdx
    000005c5: 	shlq	$0x2, %rdx
    000005c9: 	nopl	(%rax) # Size: 7
.Ltmp2040:
    000005d0: 	movss	0x4(%rsi,%rax), %xmm0
    000005d6: 	addss	(%rbp,%rax), %xmm0
    000005dc: 	addss	0x8(%rbp,%rax), %xmm0
    000005e2: 	addss	0x4(%r8,%rax), %xmm0
    000005e9: 	addss	%xmm1, %xmm0
    000005ed: 	mulss	%xmm4, %xmm0
    000005f1: 	movss	%xmm0, 0x4(%r13,%rax)
    000005f8: 	addq	$0x4, %rax
    000005fc: 	cmpq	%rax, %rdx
    000005ff: 	jne	.Ltmp2040 # Offset: 1535
    00000601: 	jmp	.Ltmp2023 # Offset: 1537
.Ltmp2021:
    00000606: 	movl	0x44(%rsp), %ebx
    0000060a: 	xorl	%esi, %esi
    0000060c: 	movl	$0x1, %eax
    00000611: 	jmp	.Ltmp2041 # Offset: 1553
.Ltmp2026:
    00000616: 	movl	0x4c(%rsp), %eax
    0000061a: 	movaps	%xmm1, %xmm5
    0000061d: 	cmpl	%eax, 0x120(%rsp)
    00000624: 	jl	.Ltmp2042 # Offset: 1572
    00000626: 	movaps	%xmm1, %xmm4
    00000629: 	jmp	.Ltmp2035 # Offset: 1577
.Ltmp2027:
    0000062e: 	movaps	%xmm1, %xmm4
    00000631: 	xorl	%eax, %eax
    00000633: 	jmp	.Ltmp2043 # Offset: 1587
.Ltmp2042:
    00000638: 	movaps	%xmm5, %xmm4
.Ltmp2036:
    0000063b: 	ucomiss	%xmm4, %xmm4
    0000063e: 	setp	%r12b
    00000642: 	ucomiss	%xmm5, %xmm5
    00000645: 	setp	%al
    00000648: 	orl	%eax, %r12d
.Ltmp2049:
    0000064b: 	movss	%xmm5, 0x14(%rsp)
    00000651: 	movss	%xmm4, 0x8(%rsp)
    00000657: 	callq	clock@PLT # Offset: 1623
    0000065c: 	movl	0xac(%rsp), %edi
    00000663: 	pxor	%xmm0, %xmm0
    00000667: 	movss	0xbc(%rsp), %xmm7
    00000670: 	movq	%rax, end_time(%rip)
    00000677: 	subq	start_time(%rip), %rax
    0000067e: 	cvtsi2sd	%rax, %xmm0
    00000683: 	movl	%edi, %eax
    00000685: 	divsd	DATAat0x49520(%rip), %xmm0
    0000068d: 	movss	0x8(%rsp), %xmm4
    00000693: 	shrl	$0x1f, %eax
    00000696: 	movss	0x14(%rsp), %xmm5
    0000069c: 	movq	%xmm0, %rbx
    000006a1: 	addl	%edi, %eax
    000006a3: 	movl	0x38(%rsp), %edi
    000006a7: 	sarl	%eax
    000006a9: 	movl	%edi, %edx
    000006ab: 	imull	%edi, %eax
    000006ae: 	shrl	$0x1f, %edx
    000006b1: 	addl	%edi, %edx
    000006b3: 	sarl	%edx
    000006b5: 	addl	%edx, %eax
    000006b7: 	testb	%r12b, %r12b
    000006ba: 	cltq
    000006bc: 	subss	(%r13,%rax,4), %xmm7
    000006c3: 	movq	0xb0(%rsp), %rax
    000006cb: 	movq	0x8(%rax), %rdx
    000006cf: 	movq	(%rax), %rsi
    000006d2: 	movd	%xmm7, %ebp
    000006d6: 	jne	.Ltmp2044 # Offset: 1750
    000006dc: 	movl	0x4c(%rsp), %eax
    000006e0: 	cmpl	%eax, iterations(%rip)
    000006e6: 	jg	.Ltmp2045 # Offset: 1766
    000006e8: 	comiss	DATAat0x49548(%rip), %xmm4
    000006ef: 	jbe	.Ltmp2045 # Offset: 1775
    000006f1: 	comiss	DATAat0x4954c(%rip), %xmm5
    000006f8: 	ja	.Ltmp2046 # Offset: 1784
.Ltmp2045:
    000006fe: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000705: 	movss	%xmm5, 0x14(%rsp)
    0000070b: 	movq	%r12, %rdi
    0000070e: 	movss	%xmm4, 0x8(%rsp)
    00000714: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1812
    00000719: 	movl	$0xa, %edx
    0000071e: 	leaq	DATAat0x491ab(%rip), %rsi
    00000725: 	movq	%rax, %rdi
    00000728: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1832
    0000072d: 	movss	0x14(%rsp), %xmm5
    00000733: 	movss	0x8(%rsp), %xmm4
.Ltmp2048:
    00000739: 	movl	$0x4, %edx
    0000073e: 	movq	%r12, %rdi
    00000741: 	leaq	DATAat0x491b6(%rip), %rsi
    00000748: 	movss	%xmm5, 0x14(%rsp)
    0000074e: 	movss	%xmm4, 0x8(%rsp)
    00000754: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1876
    00000759: 	movl	0x4c(%rsp), %esi
    0000075d: 	movq	%r12, %rdi
    00000760: 	callq	_ZNSolsEi@PLT # Offset: 1888
    00000765: 	movl	$0xb, %edx
    0000076a: 	leaq	DATAat0x491bb(%rip), %rsi
    00000771: 	movq	%rax, %rdi
    00000774: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1908
    00000779: 	movl	$0xa, %edx
    0000077e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000785: 	movq	%r12, %rdi
    00000788: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1928
    0000078d: 	movss	0x8(%rsp), %xmm4
    00000793: 	movq	%r12, %rdi
    00000796: 	pxor	%xmm0, %xmm0
    0000079a: 	cvtss2sd	%xmm4, %xmm0
    0000079e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1950
    000007a3: 	movl	$0x7, %edx
    000007a8: 	leaq	DATAat0x491d2(%rip), %rsi
    000007af: 	movq	%rax, %rdi
    000007b2: 	movq	%rax, %r12
    000007b5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1973
    000007ba: 	movss	0x14(%rsp), %xmm5
    000007c0: 	movq	%r12, %rdi
    000007c3: 	pxor	%xmm0, %xmm0
    000007c7: 	cvtss2sd	%xmm5, %xmm0
    000007cb: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1995
    000007d0: 	movl	$0x10, %edx
    000007d5: 	leaq	DATAat0x491da(%rip), %rsi
    000007dc: 	movq	%rax, %r12
    000007df: 	movq	%rax, %rdi
    000007e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2018
    000007e7: 	movd	%ebp, %xmm7
    000007eb: 	movq	%r12, %rdi
    000007ee: 	pxor	%xmm0, %xmm0
    000007f2: 	cvtss2sd	%xmm7, %xmm0
    000007f6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2038
    000007fb: 	movl	$0x8, %edx
    00000800: 	leaq	DATAat0x491eb(%rip), %rsi
    00000807: 	movq	%rax, %rbp
    0000080a: 	movq	%rax, %rdi
    0000080d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2061
    00000812: 	movq	%rbx, %xmm0
    00000817: 	movq	%rbp, %rdi
    0000081a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2074
    0000081f: 	movl	$0x2, %edx
    00000824: 	leaq	DATAat0x491f4(%rip), %rsi
    0000082b: 	movq	%rax, %rdi
    0000082e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2094
    00000833: 	movl	0xb8(%rsp), %eax
    0000083a: 	movl	%eax, iterations(%rip)
    00000840: 	movq	0xd8(%rsp), %rax
    00000848: 	subq	%fs:0x28, %rax
    00000851: 	jne	.Ltmp2047 # Offset: 2129
    00000857: 	addq	$0xe8, %rsp
    0000085e: 	popq	%rbx
    0000085f: 	popq	%rbp
    00000860: 	popq	%r12
    00000862: 	popq	%r13
    00000864: 	popq	%r14
    00000866: 	popq	%r15
    00000868: 	retq # Offset: 2152
.Ltmp2044:
    00000869: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000870: 	movq	%r12, %rdi
    00000873: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2163
    00000878: 	movl	$0x10, %edx
    0000087d: 	leaq	DATAat0x493d4(%rip), %rsi
    00000884: 	movq	%rax, %rdi
    00000887: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2183
    0000088c: 	movss	0x8(%rsp), %xmm4
    00000892: 	movss	0x14(%rsp), %xmm5
    00000898: 	jmp	.Ltmp2048 # Offset: 2200
.Ltmp2037:
    0000089d: 	movl	$0x1, %r12d
    000008a3: 	jmp	.Ltmp2049 # Offset: 2211
.Ltmp2046:
    000008a8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000008af: 	movss	%xmm5, 0x14(%rsp)
    000008b5: 	movq	%r12, %rdi
    000008b8: 	movss	%xmm4, 0x8(%rsp)
    000008be: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2238
    000008c3: 	movl	$0x11, %edx
    000008c8: 	leaq	DATAat0x49199(%rip), %rsi
    000008cf: 	movq	%rax, %rdi
    000008d2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2258
    000008d7: 	movss	0x8(%rsp), %xmm4
    000008dd: 	movss	0x14(%rsp), %xmm5
    000008e3: 	jmp	.Ltmp2048 # Offset: 2275
.Ltmp2038:
    000008e8: 	ucomiss	%xmm5, %xmm5
    000008eb: 	setp	%r12b
    000008ef: 	jmp	.Ltmp2049 # Offset: 2287
.Ltmp2018:
    000008f4: 	pxor	%xmm5, %xmm5
    000008f8: 	movl	$0x0, 0x4c(%rsp)
    00000900: 	xorl	%r12d, %r12d
    00000903: 	movaps	%xmm5, %xmm4
    00000906: 	jmp	.Ltmp2049 # Offset: 2310
.Ltmp2047:
    0000090b: 	callq	__stack_chk_fail@PLT # Offset: 2315
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff18jacobi2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff17jacobi2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x32a90
  Size        : 0xce5
  MaxSize     : 0xcf0
  Offset      : 0x32a90
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff17jacobi2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	movl	%ebx, %esi
    00000018: 	imull	%r15d, %ebx
    0000001c: 	subq	$0xd8, %rsp
    00000023: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002a: 	movl	%edx, 0x9c(%rsp)
    00000031: 	movl	%r15d, %edx
    00000034: 	movl	%ecx, 0x34(%rsp)
    00000038: 	leaq	0xb0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x1c(%rsp)
    00000045: 	movq	%r9, 0xa0(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xc8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movq	%rdi, (%rsp)
    00000064: 	movaps	%xmm0, 0xb0(%rsp)
    0000006c: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 108
    00000071: 	testl	%ebx, %ebx
    00000073: 	movq	(%rsp), %r11
    00000077: 	movss	%xmm0, 0xac(%rsp)
    00000080: 	jle	.Ltmp2050 # Offset: 128
    00000082: 	movslq	%ebx, %rdx
    00000085: 	movq	%r11, %rsi
    00000088: 	movq	%r14, %rdi
    0000008b: 	shlq	$0x2, %rdx
    0000008f: 	callq	memmove@PLT # Offset: 143
    00000094: 	movq	(%rsp), %r11
.Ltmp2050:
    00000098: 	movl	iterations(%rip), %eax
    0000009e: 	movq	%r11, (%rsp)
    000000a2: 	movl	$0x2710, iterations(%rip)
    000000ac: 	movl	%eax, 0xa8(%rsp)
    000000b3: 	callq	clock@PLT # Offset: 179
    000000b8: 	movq	%rax, start_time(%rip)
    000000bf: 	movl	iterations(%rip), %eax
    000000c5: 	movl	%eax, 0x88(%rsp)
    000000cc: 	testl	%eax, %eax
    000000ce: 	jle	.Ltmp2051 # Offset: 206
    000000d4: 	movslq	%ebx, %rsi
    000000d7: 	movq	(%rsp), %r11
    000000db: 	pxor	%xmm3, %xmm3
    000000df: 	movq	%r14, %r15
    000000e2: 	movl	0x9c(%rsp), %eax
    000000e9: 	movq	%rsi, 0x58(%rsp)
    000000ee: 	movl	$0x0, 0x60(%rsp)
    000000f6: 	movaps	DATAat0x49420(%rip), %xmm2
    000000fd: 	subl	$0x1, %eax
    00000100: 	movl	%eax, 0x18(%rsp)
    00000104: 	movl	0x34(%rsp), %eax
    00000108: 	leal	-0x4(%rax), %edx
    0000010b: 	movl	%edx, 0x28(%rsp)
    0000010f: 	movl	0x1c(%rsp), %edx
    00000113: 	addl	%edx, %edx
    00000115: 	movl	%edx, 0x8c(%rsp)
    0000011c: 	leal	-0x6(%rax), %edx
    0000011f: 	movl	%edx, 0x30(%rsp)
    00000123: 	shrl	$0x2, %edx
    00000126: 	leal	0x1(%rdx), %ebx
    00000129: 	movl	%edx, 0x64(%rsp)
    0000012d: 	movl	%ebx, %eax
    0000012f: 	movl	%ebx, 0x3c(%rsp)
    00000133: 	andl	$-0x2, %ebx
    00000136: 	shrl	%eax
    00000138: 	leal	0x1(,%rbx,4), %ecx
    0000013f: 	movl	%ebx, 0x38(%rsp)
    00000143: 	subl	$0x1, %eax
    00000146: 	movl	%ecx, 0x98(%rsp)
    0000014d: 	addq	$0x1, %rax
    00000151: 	shlq	$0x5, %rax
    00000155: 	movq	%rax, 0x40(%rsp)
    0000015a: 	movl	%edx, %eax
    0000015c: 	shlq	$0x2, %rax
    00000160: 	movq	%rax, 0x70(%rsp)
    00000165: 	leal	0x5(,%rdx,4), %eax
    0000016c: 	subl	%ebx, %edx
    0000016e: 	movl	%eax, 0x2c(%rsp)
    00000172: 	leaq	-0x1(%rsi), %rax
    00000176: 	movq	%rax, 0x80(%rsp)
    0000017e: 	movq	%rsi, %rax
    00000181: 	andq	$-0x4, %rsi
    00000185: 	shrq	$0x2, %rax
    00000189: 	movq	%rsi, 0x78(%rsp)
    0000018e: 	shlq	$0x4, %rax
    00000192: 	movl	%edx, 0x68(%rsp)
    00000196: 	movq	%rax, 0x90(%rsp)
    0000019e: 	leal	(%rcx,%rdx,4), %eax
    000001a1: 	movl	%eax, 0x6c(%rsp)
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp2077:
    000001a8: 	cmpl	$0x1, 0x18(%rsp)
    000001ad: 	jle	.Ltmp2052 # Offset: 429
    000001b3: 	movl	0x38(%rsp), %ecx
    000001b7: 	movl	0x34(%rsp), %eax
    000001bb: 	movl	$0x1, (%rsp)
    000001c2: 	xorl	%r13d, %r13d
    000001c5: 	movq	DATAat0x49420(%rip), %xmm4
    000001cd: 	movl	0x1c(%rsp), %edx
    000001d1: 	movl	%r13d, %r14d
    000001d4: 	leaq	(,%rcx,4), %rbx
    000001dc: 	subl	$0x1, %eax
    000001df: 	movq	%rbx, 0x48(%rsp)
    000001e4: 	addq	$0x4, %rbx
    000001e8: 	movq	%rbx, 0x50(%rsp)
    000001ed: 	movl	%eax, 0x14(%rsp)
    000001f1: 	movl	0x8c(%rsp), %eax
    000001f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2063:
    00000200: 	addl	$0x1, (%rsp)
    00000204: 	cmpl	$0x1, 0x28(%rsp)
    00000209: 	movl	$0x1, %ecx
    0000020e: 	jle	.Ltmp2053 # Offset: 526
    00000214: 	movslq	%edx, %r10
    00000217: 	movslq	%r14d, %rbp
    0000021a: 	movslq	%eax, %rbx
    0000021d: 	leaq	0x4(,%r10,4), %rdi
    00000225: 	leaq	0x14(,%rbp,4), %r12
    0000022d: 	movq	%rbx, 0x8(%rsp)
    00000232: 	leaq	(%r15,%rdi), %rcx
    00000236: 	leaq	0x14(,%rbx,4), %r13
    0000023e: 	movq	%rcx, %r9
    00000241: 	leaq	(%r11,%r12), %rbx
    00000245: 	leaq	0xc(%r11,%rdi), %rsi
    0000024a: 	subq	%rbx, %r9
    0000024d: 	leaq	0x8(%r15,%rdi), %r8
    00000252: 	addq	$0xc, %r9
    00000256: 	cmpq	$0x18, %r9
    0000025a: 	movq	%rcx, %r9
    0000025d: 	seta	%bl
    00000260: 	subq	%rsi, %r9
    00000263: 	addq	$0x4, %r9
    00000267: 	cmpq	$0x18, %r9
    0000026b: 	seta	%r9b
    0000026f: 	andl	%ebx, %r9d
    00000272: 	cmpl	$0x3, 0x30(%rsp)
    00000277: 	seta	%bl
    0000027a: 	andl	%ebx, %r9d
    0000027d: 	movq	%r8, %rbx
    00000280: 	subq	%rsi, %rbx
    00000283: 	addq	$0x4, %rbx
    00000287: 	cmpq	$0x18, %rbx
    0000028b: 	seta	%bl
    0000028e: 	testb	%bl, %r9b
    00000291: 	je	.Ltmp2054 # Offset: 657
    00000297: 	leaq	(%r11,%r13), %rbx
    0000029b: 	movq	%rcx, %r9
    0000029e: 	subq	%rbx, %r9
    000002a1: 	addq	$0xc, %r9
    000002a5: 	cmpq	$0x18, %r9
    000002a9: 	jbe	.Ltmp2054 # Offset: 681
    000002af: 	leaq	-0x10(%r11,%r12), %r9
    000002b4: 	leaq	-0x10(%r11,%r13), %r12
    000002b9: 	movq	0x40(%rsp), %r13
    000002be: 	pxor	%xmm5, %xmm5
    000002c2: 	leaq	-0x4(%r11,%rdi), %rbx
    000002c7: 	xorl	%edi, %edi
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp2055:
    000002d0: 	movups	0x10(%rbx,%rdi), %xmm6
    000002d5: 	movups	(%r9,%rdi), %xmm1
    000002da: 	movups	(%rbx,%rdi), %xmm0
    000002de: 	movups	(%rbx,%rdi), %xmm7
    000002e2: 	movhps	0x10(%r9,%rdi), %xmm1
    000002e8: 	movups	0x10(%r9,%rdi), %xmm8
    000002ee: 	movlhps	%xmm6, %xmm0
    000002f1: 	shufps	$0xee, %xmm6, %xmm7
    000002f5: 	movq	0x10(%rsi,%rdi), %xmm6
    000002fb: 	addps	%xmm0, %xmm1
    000002fe: 	movups	(%r12,%rdi), %xmm0
    00000303: 	movhps	0x10(%r12,%rdi), %xmm0
    00000309: 	addps	%xmm7, %xmm1
    0000030c: 	addps	%xmm0, %xmm1
    0000030f: 	movq	(%rsi,%rdi), %xmm0
    00000314: 	movlhps	%xmm6, %xmm0
    00000317: 	movups	(%r9,%rdi), %xmm6
    0000031c: 	addps	%xmm5, %xmm1
    0000031f: 	shufps	$0xee, %xmm8, %xmm6
    00000324: 	addps	%xmm7, %xmm6
    00000327: 	movups	0x10(%r12,%rdi), %xmm7
    0000032d: 	mulps	%xmm2, %xmm1
    00000330: 	addps	%xmm6, %xmm0
    00000333: 	movups	(%r12,%rdi), %xmm6
    00000338: 	shufps	$0xee, %xmm7, %xmm6
    0000033c: 	addps	%xmm6, %xmm0
    0000033f: 	movq	%xmm1, (%rcx,%rdi)
    00000344: 	movhps	%xmm1, 0x10(%rcx,%rdi)
    00000349: 	addps	%xmm5, %xmm0
    0000034c: 	mulps	%xmm2, %xmm0
    0000034f: 	movq	%xmm0, (%r8,%rdi)
    00000355: 	movhps	%xmm0, 0x10(%r8,%rdi)
    0000035b: 	addq	$0x20, %rdi
    0000035f: 	cmpq	%rdi, %r13
    00000362: 	jne	.Ltmp2055 # Offset: 866
    00000368: 	movl	0x38(%rsp), %ebx
    0000036c: 	cmpl	%ebx, 0x3c(%rsp)
    00000370: 	je	.Ltmp2056 # Offset: 880
    00000376: 	cmpl	%ebx, 0x64(%rsp)
    0000037a: 	je	.Ltmp2057 # Offset: 890
    00000380: 	movq	0x48(%rsp), %rbx
    00000385: 	movq	0x8(%rsp), %rsi
    0000038a: 	xorps	%xmm5, %xmm5
    0000038d: 	leaq	0x1(%rbp,%rbx), %rcx
    00000392: 	leaq	0x1(%rsi,%rbx), %rsi
    00000397: 	leaq	(%r11,%rcx,4), %r9
    0000039b: 	leaq	(%r10,%rbx), %rcx
    0000039f: 	addq	0x50(%rsp), %r10
    000003a4: 	shlq	$0x2, %rcx
    000003a8: 	leaq	(%r11,%rsi,4), %rdi
    000003ac: 	leaq	(%r11,%r10,4), %r10
    000003b0: 	xorl	%esi, %esi
    000003b2: 	leaq	(%r11,%rcx), %r8
    000003b6: 	leaq	0x4(%r15,%rcx), %rbx
    000003bb: 	leaq	0xc(%r15,%rcx), %rbp
    000003c0: 	xorl	%ecx, %ecx
.Ltmp2058:
    000003c2: 	movq	0x8(%r8,%rcx), %xmm6
    000003c9: 	movq	0x8(%r9,%rcx), %xmm0
    000003d0: 	addl	$0x1, %esi
    000003d3: 	movq	(%r10,%rcx), %xmm1
    000003d9: 	movq	(%r8,%rcx), %xmm7
    000003df: 	addps	%xmm6, %xmm0
    000003e2: 	addps	%xmm1, %xmm0
    000003e5: 	movq	0x8(%rdi,%rcx), %xmm1
    000003eb: 	addps	%xmm1, %xmm0
    000003ee: 	movq	(%r9,%rcx), %xmm1
    000003f4: 	addps	%xmm7, %xmm1
    000003f7: 	addps	%xmm5, %xmm0
    000003fa: 	addps	%xmm6, %xmm1
    000003fd: 	movq	(%rdi,%rcx), %xmm6
    00000402: 	mulps	%xmm4, %xmm0
    00000405: 	addps	%xmm1, %xmm6
    00000408: 	addps	%xmm5, %xmm6
    0000040b: 	mulps	%xmm4, %xmm6
    0000040e: 	movlps	%xmm6, (%rbx,%rcx)
    00000412: 	movlps	%xmm0, (%rbp,%rcx)
    00000417: 	addq	$0x10, %rcx
    0000041b: 	cmpl	%esi, 0x68(%rsp)
    0000041f: 	ja	.Ltmp2058 # Offset: 1055
    00000421: 	movl	0x6c(%rsp), %ecx
.Ltmp2080:
    00000425: 	leal	0x2(%rax,%rcx), %r9d
    0000042a: 	leal	0x3(%rax,%rcx), %r10d
    0000042f: 	leal	0x1(%rcx), %esi
    00000432: 	movslq	%r9d, %r9
    00000435: 	leal	(%rax,%rcx), %edi
    00000438: 	movslq	%r10d, %r10
    0000043b: 	movss	(%r11,%r10,4), %xmm0
    00000441: 	movss	(%r11,%r9,4), %xmm1
    00000447: 	leal	(%rax,%rsi), %r8d
    0000044b: 	movslq	%edi, %rdi
    0000044e: 	movslq	%r8d, %r8
    00000451: 	addl	%edx, %esi
    00000453: 	movss	(%r11,%r8,4), %xmm5
    00000459: 	unpcklps	%xmm0, %xmm1
    0000045c: 	movss	(%r11,%rdi,4), %xmm0
    00000462: 	leal	-0x1(%rdx,%rcx), %edi
    00000466: 	movslq	%edi, %rdi
    00000469: 	movslq	%esi, %rsi
    0000046c: 	unpcklps	%xmm5, %xmm0
    0000046f: 	movlhps	%xmm1, %xmm0
    00000472: 	movups	(%r11,%rdi,4), %xmm1
    00000477: 	leal	(%r14,%rcx), %edi
    0000047b: 	addl	%edx, %ecx
    0000047d: 	movslq	%edi, %rdi
    00000480: 	movslq	%ecx, %rcx
    00000483: 	movups	(%r11,%rdi,4), %xmm5
    00000488: 	addps	%xmm5, %xmm1
    0000048b: 	movups	(%r11,%rsi,4), %xmm5
    00000490: 	addps	%xmm5, %xmm1
    00000493: 	addps	%xmm1, %xmm0
    00000496: 	pxor	%xmm1, %xmm1
    0000049a: 	addps	%xmm1, %xmm0
    0000049d: 	mulps	%xmm2, %xmm0
    000004a0: 	movups	%xmm0, (%r15,%rcx,4)
.Ltmp2056:
    000004a5: 	movl	0x2c(%rsp), %ecx
.Ltmp2053:
    000004a9: 	cmpl	0x14(%rsp), %ecx
    000004ad: 	jge	.Ltmp2059 # Offset: 1197
    000004b3: 	movslq	%ecx, %r9
    000004b6: 	movslq	%edx, %rsi
    000004b9: 	movl	0x34(%rsp), %edi
    000004bd: 	movslq	%eax, %r8
    000004c0: 	movq	%r15, %r13
    000004c3: 	leaq	(%rsi,%r9), %r12
    000004c7: 	addq	%r9, %r8
    000004ca: 	movslq	%r14d, %rsi
    000004cd: 	subq	%r11, %r13
    000004d0: 	addq	%r9, %rsi
    000004d3: 	leaq	0x4(,%r8,4), %r9
    000004db: 	subl	%ecx, %edi
    000004dd: 	cmpq	$0x10, %r13
    000004e1: 	movq	%r9, 0x20(%rsp)
    000004e6: 	leaq	(,%r12,4), %rbx
    000004ee: 	leaq	0x4(,%rsi,4), %rbp
    000004f6: 	seta	%r9b
    000004fa: 	cmpl	$0x2, %edi
    000004fd: 	leaq	(%r15,%rbx), %r10
    00000501: 	movq	%rsi, 0x8(%rsp)
    00000506: 	setne	%r13b
    0000050a: 	movq	%r10, %rsi
    0000050d: 	andl	%r13d, %r9d
    00000510: 	leaq	(%r11,%rbp), %r13
    00000514: 	subq	%r13, %rsi
    00000517: 	cmpq	$0x8, %rsi
    0000051b: 	seta	%r13b
    0000051f: 	testb	%r13b, %r9b
    00000522: 	je	.Ltmp2060 # Offset: 1314
    00000528: 	leaq	0x4(,%r8,4), %r9
    00000530: 	movq	%r10, %rsi
    00000533: 	leaq	(%r11,%r9), %r13
    00000537: 	subq	%r13, %rsi
    0000053a: 	cmpq	$0x8, %rsi
    0000053e: 	jbe	.Ltmp2060 # Offset: 1342
    00000544: 	leal	-0x2(%rdi), %r13d
    00000548: 	leal	-0x1(%rdi), %r9d
    0000054c: 	cmpl	$0x2, %r13d
    00000550: 	jbe	.Ltmp2061 # Offset: 1360
    00000556: 	movups	-0x4(%r11,%rbx), %xmm1
    0000055c: 	movups	0x4(%r11,%rbx), %xmm0
    00000562: 	leaq	0x4(,%r8,4), %rbx
    0000056a: 	addps	%xmm1, %xmm0
    0000056d: 	movups	-0x4(%r11,%rbp), %xmm1
    00000573: 	addps	%xmm1, %xmm0
    00000576: 	movups	-0x4(%r11,%rbx), %xmm1
    0000057c: 	addps	%xmm1, %xmm0
    0000057f: 	pxor	%xmm1, %xmm1
    00000583: 	addps	%xmm1, %xmm0
    00000586: 	mulps	%xmm2, %xmm0
    00000589: 	movups	%xmm0, (%r10)
    0000058d: 	movl	%r9d, %r10d
    00000590: 	andl	$-0x4, %r10d
    00000594: 	addl	%r10d, %ecx
    00000597: 	cmpl	%r9d, %r10d
    0000059a: 	je	.Ltmp2059 # Offset: 1434
    000005a0: 	subl	%r10d, %edi
    000005a3: 	leal	-0x1(%rdi), %r9d
    000005a7: 	cmpl	$0x2, %edi
    000005aa: 	je	.Ltmp2062 # Offset: 1450
.Ltmp2079:
    000005ac: 	movl	%r10d, %edi
    000005af: 	movq	0x8(%rsp), %rsi
    000005b4: 	leaq	(%rdi,%r12), %r10
    000005b8: 	leaq	(,%r10,4), %rbx
    000005c0: 	addq	%rdi, %rsi
    000005c3: 	addq	%r8, %rdi
    000005c6: 	movq	-0x4(%r11,%rbx), %xmm1
    000005cd: 	movq	0x4(%r11,%rbx), %xmm0
    000005d4: 	addps	%xmm1, %xmm0
    000005d7: 	movq	(%r11,%rsi,4), %xmm1
    000005dd: 	movl	%r9d, %esi
    000005e0: 	andl	$-0x2, %esi
    000005e3: 	addl	%esi, %ecx
    000005e5: 	addps	%xmm1, %xmm0
    000005e8: 	movq	(%r11,%rdi,4), %xmm1
    000005ee: 	addps	%xmm1, %xmm0
    000005f1: 	xorps	%xmm1, %xmm1
    000005f4: 	addps	%xmm1, %xmm0
    000005f7: 	movq	DATAat0x49420(%rip), %xmm1
    000005ff: 	mulps	%xmm1, %xmm0
    00000602: 	movlps	%xmm0, (%r15,%r10,4)
    00000607: 	cmpl	%r9d, %esi
    0000060a: 	je	.Ltmp2059 # Offset: 1546
.Ltmp2062:
    0000060c: 	leal	(%r14,%rcx), %esi
    00000610: 	leal	0x1(%rcx,%rdx), %r8d
    00000615: 	leal	-0x1(%rcx,%rdx), %edi
    00000619: 	movslq	%esi, %rsi
    0000061c: 	movslq	%r8d, %r8
    0000061f: 	movslq	%edi, %rdi
    00000622: 	movss	(%r11,%r8,4), %xmm0
    00000628: 	addss	(%r11,%rdi,4), %xmm0
    0000062e: 	addss	(%r11,%rsi,4), %xmm0
    00000634: 	leal	(%rdx,%rcx), %esi
    00000637: 	addl	%eax, %ecx
    00000639: 	movslq	%ecx, %rcx
    0000063c: 	movslq	%esi, %rsi
    0000063f: 	addss	(%r11,%rcx,4), %xmm0
    00000645: 	addss	%xmm3, %xmm0
    00000649: 	mulss	DATAat0x49420(%rip), %xmm0
    00000651: 	movss	%xmm0, (%r15,%rsi,4)
.Ltmp2059:
    00000657: 	movl	0x1c(%rsp), %ebx
    0000065b: 	movl	(%rsp), %esi
    0000065e: 	addl	%ebx, %r14d
    00000661: 	addl	%ebx, %edx
    00000663: 	addl	%ebx, %eax
    00000665: 	cmpl	%esi, 0x18(%rsp)
    00000669: 	jne	.Ltmp2063 # Offset: 1641
.Ltmp2052:
    0000066f: 	cmpq	$0x0, 0x58(%rsp)
    00000675: 	je	.Ltmp2064 # Offset: 1653
    0000067b: 	cmpq	$0x2, 0x80(%rsp)
    00000684: 	jbe	.Ltmp2065 # Offset: 1668
    0000068a: 	movaps	DATAat0x494b0(%rip), %xmm6
    00000691: 	xorl	%eax, %eax
    00000693: 	movaps	%xmm3, %xmm1
    00000696: 	pxor	%xmm5, %xmm5
    0000069a: 	movq	0x90(%rsp), %rdx
    000006a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2066:
    000006a8: 	movups	(%r15,%rax), %xmm7
    000006ad: 	movups	(%r11,%rax), %xmm4
    000006b2: 	addq	$0x10, %rax
    000006b6: 	subps	%xmm7, %xmm4
    000006b9: 	movaps	%xmm4, %xmm0
    000006bc: 	movaps	%xmm4, %xmm7
    000006bf: 	cmpltps	%xmm5, %xmm0
    000006c3: 	xorps	%xmm6, %xmm7
    000006c6: 	andps	%xmm0, %xmm7
    000006c9: 	andnps	%xmm4, %xmm0
    000006cc: 	orps	%xmm7, %xmm0
    000006cf: 	addss	%xmm0, %xmm1
    000006d3: 	movaps	%xmm0, %xmm4
    000006d6: 	shufps	$0x55, %xmm0, %xmm4
    000006da: 	addss	%xmm1, %xmm4
    000006de: 	movaps	%xmm0, %xmm1
    000006e1: 	unpckhps	%xmm0, %xmm1
    000006e4: 	shufps	$0xff, %xmm0, %xmm0
    000006e8: 	addss	%xmm4, %xmm1
    000006ec: 	addss	%xmm0, %xmm1
    000006f0: 	cmpq	%rdx, %rax
    000006f3: 	jne	.Ltmp2066 # Offset: 1779
    000006f5: 	movq	0x78(%rsp), %rax
    000006fa: 	cmpq	%rax, 0x58(%rsp)
    000006ff: 	je	.Ltmp2067 # Offset: 1791
.Ltmp2082:
    00000701: 	movss	(%r11,%rax,4), %xmm0
    00000707: 	subss	(%r15,%rax,4), %xmm0
    0000070d: 	leaq	(,%rax,4), %rdx
    00000715: 	comiss	%xmm0, %xmm3
    00000718: 	jbe	.Ltmp2068 # Offset: 1816
    0000071a: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2068:
    00000721: 	addss	%xmm0, %xmm1
    00000725: 	leaq	0x1(%rax), %rcx
    00000729: 	cmpq	%rcx, 0x58(%rsp)
    0000072e: 	jbe	.Ltmp2067 # Offset: 1838
    00000730: 	movss	0x4(%r11,%rdx), %xmm0
    00000737: 	subss	0x4(%r15,%rdx), %xmm0
    0000073e: 	comiss	%xmm0, %xmm3
    00000741: 	jbe	.Ltmp2069 # Offset: 1857
    00000743: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2069:
    0000074a: 	addss	%xmm0, %xmm1
    0000074e: 	addq	$0x2, %rax
    00000752: 	cmpq	%rax, 0x58(%rsp)
    00000757: 	jbe	.Ltmp2067 # Offset: 1879
    00000759: 	movss	0x8(%r11,%rdx), %xmm0
    00000760: 	subss	0x8(%r15,%rdx), %xmm0
    00000767: 	comiss	%xmm0, %xmm3
    0000076a: 	jbe	.Ltmp2070 # Offset: 1898
    0000076c: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2070:
    00000773: 	addss	%xmm0, %xmm1
.Ltmp2067:
    00000777: 	movq	0x58(%rsp), %rdx
    0000077c: 	movaps	%xmm3, %xmm4
    0000077f: 	xorl	%eax, %eax
    00000781: 	movss	DATAat0x494c0(%rip), %xmm5
    00000789: 	nopl	(%rax) # Size: 7
.Ltmp2072:
    00000790: 	movss	(%r11,%rax,4), %xmm0
    00000796: 	subss	(%r15,%rax,4), %xmm0
    0000079c: 	comiss	%xmm0, %xmm3
    0000079f: 	jbe	.Ltmp2071 # Offset: 1951
    000007a1: 	xorps	%xmm5, %xmm0
.Ltmp2071:
    000007a4: 	maxss	%xmm4, %xmm0
    000007a8: 	addq	$0x1, %rax
    000007ac: 	movaps	%xmm0, %xmm4
    000007af: 	cmpq	%rax, %rdx
    000007b2: 	jne	.Ltmp2072 # Offset: 1970
    000007b4: 	movl	0x60(%rsp), %eax
    000007b8: 	cmpl	%eax, 0x110(%rsp)
    000007bf: 	jge	.Ltmp2073 # Offset: 1983
    000007c1: 	movss	DATAat0x49548(%rip), %xmm0
    000007c9: 	comiss	%xmm1, %xmm0
    000007cc: 	ja	.Ltmp2074 # Offset: 1996
    000007d2: 	ucomiss	%xmm1, %xmm1
    000007d5: 	jp	.Ltmp2075 # Offset: 2005
    000007db: 	movss	DATAat0x4954c(%rip), %xmm0
    000007e3: 	comiss	%xmm4, %xmm0
    000007e6: 	ja	.Ltmp2076 # Offset: 2022
    000007ec: 	ucomiss	%xmm4, %xmm4
    000007ef: 	jp	.Ltmp2075 # Offset: 2031
.Ltmp2073:
    000007f5: 	addl	$0x1, 0x60(%rsp)
    000007fa: 	movq	%r15, %rax
    000007fd: 	movl	0x60(%rsp), %edx
    00000801: 	movq	%r11, %r15
    00000804: 	cmpl	0x88(%rsp), %edx
    0000080b: 	je	.Ltmp2074 # Offset: 2059
    00000811: 	movq	%rax, %r11
    00000814: 	jmp	.Ltmp2077 # Offset: 2068
    00000819: 	nopl	(%rax) # Size: 7
.Ltmp2054:
    00000820: 	subq	$0x4, %rdi
    00000824: 	addq	0x70(%rsp), %rbp
    00000829: 	leaq	-0x14(%r11,%r12), %rsi
    0000082e: 	leaq	(%r11,%rdi), %rcx
    00000832: 	leaq	-0x14(%r11,%r13), %r8
    00000837: 	pxor	%xmm7, %xmm7
    0000083b: 	addq	%r15, %rdi
    0000083e: 	leaq	0x10(%r11,%rbp,4), %r9
    00000843: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2078:
    00000848: 	movups	0x4(%rsi), %xmm5
    0000084c: 	movups	(%rcx), %xmm0
    0000084f: 	addq	$0x10, %rsi
    00000853: 	addq	$0x10, %rcx
    00000857: 	movss	0x10(%r8), %xmm1
    0000085d: 	movss	0x8(%r8), %xmm6
    00000863: 	addq	$0x10, %rdi
    00000867: 	addq	$0x10, %r8
    0000086b: 	addps	%xmm5, %xmm0
    0000086e: 	movups	-0x8(%rcx), %xmm5
    00000872: 	addps	%xmm5, %xmm0
    00000875: 	movss	-0x4(%r8), %xmm5
    0000087b: 	unpcklps	%xmm1, %xmm5
    0000087e: 	movss	-0xc(%r8), %xmm1
    00000884: 	unpcklps	%xmm6, %xmm1
    00000887: 	movlhps	%xmm5, %xmm1
    0000088a: 	addps	%xmm1, %xmm0
    0000088d: 	addps	%xmm7, %xmm0
    00000890: 	mulps	%xmm2, %xmm0
    00000893: 	movups	%xmm0, -0xc(%rdi)
    00000897: 	cmpq	%r9, %rsi
    0000089a: 	jne	.Ltmp2078 # Offset: 2202
    0000089c: 	jmp	.Ltmp2056 # Offset: 2204
    000008a1: 	nopl	(%rax) # Size: 7
.Ltmp2060:
    000008a8: 	leal	0x1(%rcx), %esi
    000008ab: 	movq	0x20(%rsp), %rbx
    000008b0: 	leal	-0x1(%rcx,%rdx), %r8d
    000008b5: 	movss	DATAat0x49420(%rip), %xmm1
    000008bd: 	leal	(%rsi,%rdx), %edi
    000008c0: 	movslq	%r8d, %r8
    000008c3: 	movl	0x14(%rsp), %r13d
    000008c8: 	movslq	%edi, %rdi
    000008cb: 	movss	(%r11,%r8,4), %xmm0
    000008d1: 	leaq	(%r11,%rdi,4), %r9
    000008d5: 	addss	(%r9), %xmm0
    000008da: 	addss	-0x4(%r11,%rbp), %xmm0
    000008e1: 	addss	-0x4(%r11,%rbx), %xmm0
    000008e8: 	addss	%xmm3, %xmm0
    000008ec: 	mulss	%xmm1, %xmm0
    000008f0: 	movss	%xmm0, (%r10)
    000008f5: 	cmpl	%r13d, %esi
    000008f8: 	jge	.Ltmp2059 # Offset: 2296
    000008fe: 	leal	0x2(%rcx), %r8d
    00000902: 	leal	(%rsi,%r14), %ebx
    00000906: 	addl	%eax, %esi
    00000908: 	movss	(%r11,%r12,4), %xmm0
    0000090e: 	leal	(%r8,%rdx), %r10d
    00000912: 	movslq	%ebx, %rbx
    00000915: 	movslq	%esi, %rsi
    00000918: 	movslq	%r10d, %r10
    0000091b: 	leaq	(%r11,%r10,4), %rbp
    0000091f: 	addss	(%rbp), %xmm0
    00000924: 	addss	(%r11,%rbx,4), %xmm0
    0000092a: 	addss	(%r11,%rsi,4), %xmm0
    00000930: 	addss	%xmm3, %xmm0
    00000934: 	mulss	%xmm1, %xmm0
    00000938: 	movss	%xmm0, (%r15,%rdi,4)
    0000093e: 	cmpl	%r13d, %r8d
    00000941: 	jge	.Ltmp2059 # Offset: 2369
    00000947: 	leal	0x3(%rcx), %esi
    0000094a: 	leal	(%r8,%r14), %ebx
    0000094e: 	addl	%eax, %r8d
    00000951: 	leal	(%rsi,%rdx), %edi
    00000954: 	movslq	%ebx, %rbx
    00000957: 	movslq	%r8d, %r8
    0000095a: 	movslq	%edi, %rdi
    0000095d: 	movss	(%r11,%rdi,4), %xmm0
    00000963: 	addss	(%r9), %xmm0
    00000968: 	addss	(%r11,%rbx,4), %xmm0
    0000096e: 	addss	(%r11,%r8,4), %xmm0
    00000974: 	addss	%xmm3, %xmm0
    00000978: 	mulss	%xmm1, %xmm0
    0000097c: 	movss	%xmm0, (%r15,%r10,4)
    00000982: 	cmpl	%r13d, %esi
    00000985: 	jge	.Ltmp2059 # Offset: 2437
    0000098b: 	leal	0x4(%rcx,%rdx), %ecx
    0000098f: 	leal	(%rsi,%r14), %r8d
    00000993: 	movslq	%ecx, %rcx
    00000996: 	movslq	%r8d, %r8
    00000999: 	movss	(%r11,%rcx,4), %xmm0
    0000099f: 	leal	(%rsi,%rax), %ecx
    000009a2: 	addss	(%rbp), %xmm0
    000009a7: 	movslq	%ecx, %rcx
    000009aa: 	addss	(%r11,%r8,4), %xmm0
    000009b0: 	addss	(%r11,%rcx,4), %xmm0
    000009b6: 	addss	%xmm3, %xmm0
    000009ba: 	mulss	%xmm1, %xmm0
    000009be: 	movss	%xmm0, (%r15,%rdi,4)
    000009c4: 	jmp	.Ltmp2059 # Offset: 2500
.Ltmp2061:
    000009c9: 	xorl	%r10d, %r10d
    000009cc: 	jmp	.Ltmp2079 # Offset: 2508
.Ltmp2057:
    000009d1: 	movl	0x98(%rsp), %ecx
    000009d8: 	jmp	.Ltmp2080 # Offset: 2520
.Ltmp2064:
    000009dd: 	movl	0x60(%rsp), %eax
    000009e1: 	cmpl	%eax, 0x110(%rsp)
    000009e8: 	jl	.Ltmp2081 # Offset: 2536
    000009ee: 	movaps	%xmm3, %xmm1
    000009f1: 	movaps	%xmm3, %xmm4
    000009f4: 	jmp	.Ltmp2073 # Offset: 2548
.Ltmp2065:
    000009f9: 	movaps	%xmm3, %xmm1
    000009fc: 	xorl	%eax, %eax
    000009fe: 	jmp	.Ltmp2082 # Offset: 2558
.Ltmp2074:
    00000a03: 	movq	%r15, %r14
.Ltmp2089:
    00000a06: 	ucomiss	%xmm1, %xmm1
    00000a09: 	setp	%r12b
    00000a0d: 	ucomiss	%xmm4, %xmm4
    00000a10: 	setp	%al
    00000a13: 	orl	%eax, %r12d
.Ltmp2088:
    00000a16: 	movss	%xmm4, 0x8(%rsp)
    00000a1c: 	movss	%xmm1, (%rsp)
    00000a21: 	callq	clock@PLT # Offset: 2593
    00000a26: 	movl	0x9c(%rsp), %edx
    00000a2d: 	pxor	%xmm0, %xmm0
    00000a31: 	movl	0x34(%rsp), %esi
    00000a35: 	movq	%rax, end_time(%rip)
    00000a3c: 	subq	start_time(%rip), %rax
    00000a43: 	cvtsi2sd	%rax, %xmm0
    00000a48: 	movl	%edx, %eax
    00000a4a: 	movss	0xac(%rsp), %xmm3
    00000a53: 	divsd	DATAat0x49520(%rip), %xmm0
    00000a5b: 	shrl	$0x1f, %eax
    00000a5e: 	movss	(%rsp), %xmm1
    00000a63: 	movss	0x8(%rsp), %xmm4
    00000a69: 	movq	%xmm0, %rbx
    00000a6e: 	addl	%edx, %eax
    00000a70: 	movl	%esi, %edx
    00000a72: 	sarl	%eax
    00000a74: 	shrl	$0x1f, %edx
    00000a77: 	imull	%esi, %eax
    00000a7a: 	addl	%esi, %edx
    00000a7c: 	sarl	%edx
    00000a7e: 	addl	%edx, %eax
    00000a80: 	testb	%r12b, %r12b
    00000a83: 	cltq
    00000a85: 	subss	(%r14,%rax,4), %xmm3
    00000a8b: 	movq	0xa0(%rsp), %rax
    00000a93: 	movq	0x8(%rax), %rdx
    00000a97: 	movq	(%rax), %rsi
    00000a9a: 	movd	%xmm3, %ebp
    00000a9e: 	jne	.Ltmp2083 # Offset: 2718
    00000aa4: 	movl	0x60(%rsp), %eax
    00000aa8: 	cmpl	%eax, iterations(%rip)
    00000aae: 	jg	.Ltmp2084 # Offset: 2734
    00000ab0: 	comiss	DATAat0x49548(%rip), %xmm1
    00000ab7: 	jbe	.Ltmp2084 # Offset: 2743
    00000ab9: 	comiss	DATAat0x4954c(%rip), %xmm4
    00000ac0: 	ja	.Ltmp2085 # Offset: 2752
.Ltmp2084:
    00000ac6: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000acd: 	movss	%xmm4, 0x8(%rsp)
    00000ad3: 	movq	%r12, %rdi
    00000ad6: 	movss	%xmm1, (%rsp)
    00000adb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2779
    00000ae0: 	movl	$0xa, %edx
    00000ae5: 	leaq	DATAat0x491ab(%rip), %rsi
    00000aec: 	movq	%rax, %rdi
    00000aef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2799
    00000af4: 	movss	0x8(%rsp), %xmm4
    00000afa: 	movss	(%rsp), %xmm1
.Ltmp2087:
    00000aff: 	movl	$0x4, %edx
    00000b04: 	movq	%r12, %rdi
    00000b07: 	movss	%xmm1, (%rsp)
    00000b0c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000b13: 	movss	%xmm4, 0x8(%rsp)
    00000b19: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2841
    00000b1e: 	movl	0x60(%rsp), %esi
    00000b22: 	movq	%r12, %rdi
    00000b25: 	callq	_ZNSolsEi@PLT # Offset: 2853
    00000b2a: 	movl	$0xb, %edx
    00000b2f: 	leaq	DATAat0x491bb(%rip), %rsi
    00000b36: 	movq	%rax, %rdi
    00000b39: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2873
    00000b3e: 	movl	$0xa, %edx
    00000b43: 	leaq	DATAat0x491c7(%rip), %rsi
    00000b4a: 	movq	%r12, %rdi
    00000b4d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2893
    00000b52: 	movss	(%rsp), %xmm1
    00000b57: 	movq	%r12, %rdi
    00000b5a: 	pxor	%xmm0, %xmm0
    00000b5e: 	cvtss2sd	%xmm1, %xmm0
    00000b62: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2914
    00000b67: 	movl	$0x7, %edx
    00000b6c: 	leaq	DATAat0x491d2(%rip), %rsi
    00000b73: 	movq	%rax, %rdi
    00000b76: 	movq	%rax, %r12
    00000b79: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2937
    00000b7e: 	movss	0x8(%rsp), %xmm4
    00000b84: 	movq	%r12, %rdi
    00000b87: 	pxor	%xmm0, %xmm0
    00000b8b: 	cvtss2sd	%xmm4, %xmm0
    00000b8f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2959
    00000b94: 	movl	$0x10, %edx
    00000b99: 	leaq	DATAat0x491da(%rip), %rsi
    00000ba0: 	movq	%rax, %r12
    00000ba3: 	movq	%rax, %rdi
    00000ba6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2982
    00000bab: 	movd	%ebp, %xmm3
    00000baf: 	movq	%r12, %rdi
    00000bb2: 	pxor	%xmm0, %xmm0
    00000bb6: 	cvtss2sd	%xmm3, %xmm0
    00000bba: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3002
    00000bbf: 	movl	$0x8, %edx
    00000bc4: 	leaq	DATAat0x491eb(%rip), %rsi
    00000bcb: 	movq	%rax, %rbp
    00000bce: 	movq	%rax, %rdi
    00000bd1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3025
    00000bd6: 	movq	%rbx, %xmm0
    00000bdb: 	movq	%rbp, %rdi
    00000bde: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3038
    00000be3: 	movl	$0x2, %edx
    00000be8: 	leaq	DATAat0x491f4(%rip), %rsi
    00000bef: 	movq	%rax, %rdi
    00000bf2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3058
    00000bf7: 	movl	0xa8(%rsp), %eax
    00000bfe: 	movl	%eax, iterations(%rip)
    00000c04: 	movq	0xc8(%rsp), %rax
    00000c0c: 	subq	%fs:0x28, %rax
    00000c15: 	jne	.Ltmp2086 # Offset: 3093
    00000c1b: 	addq	$0xd8, %rsp
    00000c22: 	popq	%rbx
    00000c23: 	popq	%rbp
    00000c24: 	popq	%r12
    00000c26: 	popq	%r13
    00000c28: 	popq	%r14
    00000c2a: 	popq	%r15
    00000c2c: 	retq # Offset: 3116
.Ltmp2083:
    00000c2d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c34: 	movq	%r12, %rdi
    00000c37: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3127
    00000c3c: 	movl	$0x10, %edx
    00000c41: 	leaq	DATAat0x493d4(%rip), %rsi
    00000c48: 	movq	%rax, %rdi
    00000c4b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3147
    00000c50: 	movss	(%rsp), %xmm1
    00000c55: 	movss	0x8(%rsp), %xmm4
    00000c5b: 	jmp	.Ltmp2087 # Offset: 3163
.Ltmp2075:
    00000c60: 	movq	%r15, %r14
    00000c63: 	movl	$0x1, %r12d
    00000c69: 	jmp	.Ltmp2088 # Offset: 3177
.Ltmp2085:
    00000c6e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c75: 	movss	%xmm4, 0x8(%rsp)
    00000c7b: 	movq	%r12, %rdi
    00000c7e: 	movss	%xmm1, (%rsp)
    00000c83: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3203
    00000c88: 	movl	$0x11, %edx
    00000c8d: 	leaq	DATAat0x49199(%rip), %rsi
    00000c94: 	movq	%rax, %rdi
    00000c97: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3223
    00000c9c: 	movss	(%rsp), %xmm1
    00000ca1: 	movss	0x8(%rsp), %xmm4
    00000ca7: 	jmp	.Ltmp2087 # Offset: 3239
.Ltmp2081:
    00000cac: 	movq	%r15, %r14
    00000caf: 	movaps	%xmm3, %xmm1
    00000cb2: 	movaps	%xmm3, %xmm4
    00000cb5: 	jmp	.Ltmp2089 # Offset: 3253
.Ltmp2076:
    00000cba: 	ucomiss	%xmm4, %xmm4
    00000cbd: 	movq	%r15, %r14
    00000cc0: 	setp	%r12b
    00000cc4: 	jmp	.Ltmp2088 # Offset: 3268
.Ltmp2051:
    00000cc9: 	pxor	%xmm4, %xmm4
    00000ccd: 	movl	$0x0, 0x60(%rsp)
    00000cd5: 	xorl	%r12d, %r12d
    00000cd8: 	movaps	%xmm4, %xmm1
    00000cdb: 	jmp	.Ltmp2088 # Offset: 3291
.Ltmp2086:
    00000ce0: 	callq	__stack_chk_fail@PLT # Offset: 3296
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff17jacobi2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff18jacobi2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x33780
  Size        : 0xd80
  MaxSize     : 0xd80
  Offset      : 0x33780
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff18jacobi2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	movl	%ebx, %esi
    00000018: 	imull	%r15d, %ebx
    0000001c: 	subq	$0xd8, %rsp
    00000023: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002a: 	movl	%edx, 0x9c(%rsp)
    00000031: 	movl	%r15d, %edx
    00000034: 	movl	%ecx, 0x34(%rsp)
    00000038: 	leaq	0xb0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x24(%rsp)
    00000045: 	movq	%r9, 0xa0(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xc8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movq	%rdi, 0x8(%rsp)
    00000065: 	movaps	%xmm0, 0xb0(%rsp)
    0000006d: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 109
    00000072: 	testl	%ebx, %ebx
    00000074: 	movq	0x8(%rsp), %r11
    00000079: 	movss	%xmm0, 0xac(%rsp)
    00000082: 	jle	.Ltmp2090 # Offset: 130
    00000084: 	movslq	%ebx, %rdx
    00000087: 	movq	%r11, %rsi
    0000008a: 	movq	%r14, %rdi
    0000008d: 	shlq	$0x2, %rdx
    00000091: 	callq	memmove@PLT # Offset: 145
    00000096: 	movq	0x8(%rsp), %r11
.Ltmp2090:
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	movq	%r11, 0x8(%rsp)
    000000a6: 	movl	$0x2710, iterations(%rip)
    000000b0: 	movl	%eax, 0xa8(%rsp)
    000000b7: 	callq	clock@PLT # Offset: 183
    000000bc: 	movq	%rax, start_time(%rip)
    000000c3: 	movl	iterations(%rip), %eax
    000000c9: 	movl	%eax, 0x88(%rsp)
    000000d0: 	testl	%eax, %eax
    000000d2: 	jle	.Ltmp2091 # Offset: 210
    000000d8: 	movl	0x9c(%rsp), %eax
    000000df: 	movslq	%ebx, %rcx
    000000e2: 	movl	0x24(%rsp), %ebx
    000000e6: 	movl	$0x0, 0x60(%rsp)
    000000ee: 	movq	%rcx, 0x58(%rsp)
    000000f3: 	movaps	DATAat0x49420(%rip), %xmm5
    000000fa: 	pxor	%xmm4, %xmm4
    000000fe: 	movss	DATAat0x494c0(%rip), %xmm8
    00000107: 	subl	$0x1, %eax
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	movq	0x8(%rsp), %r11
    00000111: 	movl	%eax, 0x20(%rsp)
    00000115: 	movl	0x34(%rsp), %eax
    00000119: 	movl	%ebx, 0x8c(%rsp)
    00000120: 	leal	-0x6(%rax), %ebx
    00000123: 	leal	-0x4(%rax), %edi
    00000126: 	movl	%ebx, 0x30(%rsp)
    0000012a: 	shrl	$0x2, %ebx
    0000012d: 	movl	%edi, 0x28(%rsp)
    00000131: 	leal	0x1(%rbx), %edi
    00000134: 	movl	%edi, %eax
    00000136: 	movl	%edi, 0x3c(%rsp)
    0000013a: 	andl	$-0x2, %edi
    0000013d: 	shrl	%eax
    0000013f: 	leal	0x1(,%rdi,4), %esi
    00000146: 	movl	%ebx, 0x64(%rsp)
    0000014a: 	subl	$0x1, %eax
    0000014d: 	movl	%edi, 0x38(%rsp)
    00000151: 	addq	$0x1, %rax
    00000155: 	movl	%esi, 0x98(%rsp)
    0000015c: 	shlq	$0x5, %rax
    00000160: 	movq	%rax, 0x40(%rsp)
    00000165: 	movl	%ebx, %eax
    00000167: 	shlq	$0x2, %rax
    0000016b: 	movq	%rax, 0x70(%rsp)
    00000170: 	leal	0x5(,%rbx,4), %eax
    00000177: 	subl	%edi, %ebx
    00000179: 	movl	%eax, 0x2c(%rsp)
    0000017d: 	leaq	-0x1(%rcx), %rax
    00000181: 	movq	%rax, 0x80(%rsp)
    00000189: 	movq	%rcx, %rax
    0000018c: 	andq	$-0x4, %rcx
    00000190: 	shrq	$0x2, %rax
    00000194: 	movq	%rcx, 0x78(%rsp)
    00000199: 	shlq	$0x4, %rax
    0000019d: 	movl	%ebx, 0x68(%rsp)
    000001a1: 	movq	%rax, 0x90(%rsp)
    000001a9: 	leal	(%rsi,%rbx,4), %eax
    000001ac: 	movl	%eax, 0x6c(%rsp)
.Ltmp2117:
    000001b0: 	cmpl	$0x1, 0x20(%rsp)
    000001b5: 	jle	.Ltmp2092 # Offset: 437
    000001bb: 	movl	0x38(%rsp), %edx
    000001bf: 	movl	0x34(%rsp), %eax
    000001c3: 	movl	$0x1, 0x8(%rsp)
    000001cb: 	xorl	%r15d, %r15d
    000001ce: 	movl	0x8c(%rsp), %r12d
    000001d6: 	movss	DATAat0x49420(%rip), %xmm6
    000001de: 	leaq	(,%rdx,4), %rbx
    000001e6: 	subl	$0x1, %eax
    000001e9: 	movq	DATAat0x49420(%rip), %xmm7
    000001f1: 	movq	%rbx, 0x48(%rsp)
    000001f6: 	addq	$0x4, %rbx
    000001fa: 	movq	%rbx, 0x50(%rsp)
    000001ff: 	movl	%eax, 0x1c(%rsp)
    00000203: 	movl	0x24(%rsp), %eax
    00000207: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2103:
    00000210: 	addl	$0x1, 0x8(%rsp)
    00000215: 	cmpl	$0x1, 0x28(%rsp)
    0000021a: 	movl	$0x1, %edx
    0000021f: 	jle	.Ltmp2093 # Offset: 543
    00000225: 	movslq	%eax, %r9
    00000228: 	movslq	%r15d, %r13
    0000022b: 	movslq	%r12d, %r10
    0000022e: 	leaq	0x4(,%r9,4), %rdx
    00000236: 	leaq	0x14(,%r13,4), %rbx
    0000023e: 	movq	%r10, 0x10(%rsp)
    00000243: 	leaq	(%r14,%rdx), %rcx
    00000247: 	leaq	0x14(,%r10,4), %rbp
    0000024f: 	movq	%rcx, %r8
    00000252: 	leaq	(%r11,%rbx), %r10
    00000256: 	leaq	0xc(%r11,%rdx), %rsi
    0000025b: 	subq	%r10, %r8
    0000025e: 	leaq	0x8(%r14,%rdx), %rdi
    00000263: 	addq	$0xc, %r8
    00000267: 	cmpq	$0x18, %r8
    0000026b: 	movq	%rcx, %r8
    0000026e: 	seta	%r10b
    00000272: 	subq	%rsi, %r8
    00000275: 	addq	$0x4, %r8
    00000279: 	cmpq	$0x18, %r8
    0000027d: 	seta	%r8b
    00000281: 	andl	%r10d, %r8d
    00000284: 	cmpl	$0x3, 0x30(%rsp)
    00000289: 	seta	%r10b
    0000028d: 	andl	%r10d, %r8d
    00000290: 	movq	%rdi, %r10
    00000293: 	subq	%rsi, %r10
    00000296: 	addq	$0x4, %r10
    0000029a: 	cmpq	$0x18, %r10
    0000029e: 	seta	%r10b
    000002a2: 	testb	%r10b, %r8b
    000002a5: 	je	.Ltmp2094 # Offset: 677
    000002ab: 	leaq	(%r11,%rbp), %r10
    000002af: 	movq	%rcx, %r8
    000002b2: 	subq	%r10, %r8
    000002b5: 	addq	$0xc, %r8
    000002b9: 	cmpq	$0x18, %r8
    000002bd: 	jbe	.Ltmp2094 # Offset: 701
    000002c3: 	leaq	-0x10(%r11,%rbx), %r8
    000002c8: 	leaq	-0x10(%r11,%rbp), %rbx
    000002cd: 	movq	0x40(%rsp), %rbp
    000002d2: 	pxor	%xmm2, %xmm2
    000002d6: 	leaq	-0x4(%r11,%rdx), %r10
    000002db: 	xorl	%edx, %edx
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp2095:
    000002e0: 	movups	0x10(%r10,%rdx), %xmm3
    000002e6: 	movups	(%r8,%rdx), %xmm1
    000002eb: 	movups	(%r10,%rdx), %xmm0
    000002f0: 	movups	(%r10,%rdx), %xmm9
    000002f5: 	movhps	0x10(%r8,%rdx), %xmm1
    000002fb: 	movups	0x10(%r8,%rdx), %xmm11
    00000301: 	movups	0x10(%rbx,%rdx), %xmm12
    00000307: 	movlhps	%xmm3, %xmm0
    0000030a: 	shufps	$0xee, %xmm3, %xmm9
    0000030f: 	movq	0x10(%rsi,%rdx), %xmm3
    00000315: 	addps	%xmm0, %xmm1
    00000318: 	movups	(%rbx,%rdx), %xmm0
    0000031c: 	movhps	0x10(%rbx,%rdx), %xmm0
    00000321: 	addps	%xmm9, %xmm1
    00000325: 	addps	%xmm0, %xmm1
    00000328: 	movq	(%rsi,%rdx), %xmm0
    0000032d: 	movlhps	%xmm3, %xmm0
    00000330: 	movups	(%r8,%rdx), %xmm3
    00000335: 	addps	%xmm2, %xmm1
    00000338: 	shufps	$0xee, %xmm11, %xmm3
    0000033d: 	addps	%xmm9, %xmm3
    00000341: 	mulps	%xmm5, %xmm1
    00000344: 	addps	%xmm3, %xmm0
    00000347: 	movups	(%rbx,%rdx), %xmm3
    0000034b: 	shufps	$0xee, %xmm12, %xmm3
    00000350: 	addps	%xmm3, %xmm0
    00000353: 	movq	%xmm1, (%rcx,%rdx)
    00000358: 	movhps	%xmm1, 0x10(%rcx,%rdx)
    0000035d: 	addps	%xmm2, %xmm0
    00000360: 	mulps	%xmm5, %xmm0
    00000363: 	movq	%xmm0, (%rdi,%rdx)
    00000368: 	movhps	%xmm0, 0x10(%rdi,%rdx)
    0000036d: 	addq	$0x20, %rdx
    00000371: 	cmpq	%rdx, %rbp
    00000374: 	jne	.Ltmp2095 # Offset: 884
    0000037a: 	movl	0x38(%rsp), %ebx
    0000037e: 	cmpl	%ebx, 0x3c(%rsp)
    00000382: 	je	.Ltmp2096 # Offset: 898
    00000388: 	cmpl	%ebx, 0x64(%rsp)
    0000038c: 	je	.Ltmp2097 # Offset: 908
    00000392: 	movq	0x48(%rsp), %rbx
    00000397: 	movq	0x10(%rsp), %rcx
    0000039c: 	xorps	%xmm1, %xmm1
    0000039f: 	movq	DATAat0x49420(%rip), %xmm3
    000003a7: 	leaq	0x1(%r13,%rbx), %rdx
    000003ac: 	leaq	0x1(%rcx,%rbx), %rcx
    000003b1: 	leaq	(%r11,%rdx,4), %r8
    000003b5: 	leaq	(%r9,%rbx), %rdx
    000003b9: 	addq	0x50(%rsp), %r9
    000003be: 	shlq	$0x2, %rdx
    000003c2: 	leaq	(%r11,%rcx,4), %rsi
    000003c6: 	leaq	(%r11,%r9,4), %r9
    000003ca: 	xorl	%ecx, %ecx
    000003cc: 	leaq	(%r11,%rdx), %rdi
    000003d0: 	leaq	0x4(%r14,%rdx), %r10
    000003d5: 	leaq	0xc(%r14,%rdx), %rbx
    000003da: 	xorl	%edx, %edx
.Ltmp2098:
    000003dc: 	movq	0x8(%rdi,%rdx), %xmm9
    000003e3: 	movq	0x8(%r8,%rdx), %xmm0
    000003ea: 	addl	$0x1, %ecx
    000003ed: 	movq	(%r9,%rdx), %xmm2
    000003f3: 	movq	(%rdi,%rdx), %xmm10
    000003f9: 	addps	%xmm9, %xmm0
    000003fd: 	addps	%xmm2, %xmm0
    00000400: 	movq	0x8(%rsi,%rdx), %xmm2
    00000406: 	addps	%xmm0, %xmm2
    00000409: 	movq	(%r8,%rdx), %xmm0
    0000040f: 	addps	%xmm10, %xmm0
    00000413: 	addps	%xmm1, %xmm2
    00000416: 	addps	%xmm9, %xmm0
    0000041a: 	movq	(%rsi,%rdx), %xmm9
    00000420: 	mulps	%xmm3, %xmm2
    00000423: 	addps	%xmm0, %xmm9
    00000427: 	addps	%xmm1, %xmm9
    0000042b: 	mulps	%xmm3, %xmm9
    0000042f: 	movlps	%xmm9, (%r10,%rdx)
    00000434: 	movlps	%xmm2, (%rbx,%rdx)
    00000438: 	addq	$0x10, %rdx
    0000043c: 	cmpl	%ecx, 0x68(%rsp)
    00000440: 	ja	.Ltmp2098 # Offset: 1088
    00000442: 	movl	0x6c(%rsp), %edx
.Ltmp2120:
    00000446: 	leal	0x1(%rdx), %esi
    00000449: 	leal	0x2(%rax,%rdx), %r9d
    0000044e: 	movss	DATAat0x49420(%rip), %xmm9
    00000457: 	leal	(%rax,%rdx), %r8d
    0000045b: 	leal	(%rax,%rsi), %edi
    0000045e: 	movslq	%r9d, %r9
    00000461: 	leaq	(%r11,%r9,4), %r10
    00000465: 	movslq	%r8d, %r8
    00000468: 	leal	(%r15,%rsi), %r9d
    0000046c: 	movslq	%edi, %rdi
    0000046f: 	movss	(%r11,%rdi,4), %xmm2
    00000475: 	movslq	%r9d, %r9
    00000478: 	addl	%r12d, %esi
    0000047b: 	leal	0x3(%rdx), %ecx
    0000047e: 	movss	(%r11,%r8,4), %xmm0
    00000484: 	movq	(%r11,%r9,4), %xmm1
    0000048a: 	movslq	%esi, %rsi
    0000048d: 	leal	-0x1(%rax,%rdx), %r9d
    00000492: 	movslq	%r9d, %r9
    00000495: 	unpcklps	%xmm2, %xmm0
    00000498: 	addps	%xmm0, %xmm1
    0000049b: 	movq	(%r10), %xmm0
    000004a0: 	addps	%xmm1, %xmm0
    000004a3: 	movq	(%r11,%rsi,4), %xmm1
    000004a9: 	leal	(%r15,%rcx), %esi
    000004ad: 	movslq	%esi, %rsi
    000004b0: 	addps	%xmm1, %xmm0
    000004b3: 	xorps	%xmm1, %xmm1
    000004b6: 	addps	%xmm1, %xmm0
    000004b9: 	movss	(%r11,%rsi,4), %xmm1
    000004bf: 	leal	0x4(%rax,%rdx), %esi
    000004c3: 	movslq	%esi, %rsi
    000004c6: 	addss	(%r10), %xmm1
    000004cb: 	addss	(%r11,%rsi,4), %xmm1
    000004d1: 	leal	(%r12,%rcx), %esi
    000004d5: 	addl	%eax, %ecx
    000004d7: 	mulps	%xmm3, %xmm0
    000004da: 	movslq	%esi, %rsi
    000004dd: 	movss	(%r11,%r9,4), %xmm3
    000004e3: 	movslq	%ecx, %rcx
    000004e6: 	addss	(%r11,%rsi,4), %xmm1
    000004ec: 	leal	(%r15,%rdx), %esi
    000004f0: 	addl	%r12d, %edx
    000004f3: 	movslq	%esi, %rsi
    000004f6: 	movslq	%edx, %rdx
    000004f9: 	addss	(%r11,%rsi,4), %xmm3
    000004ff: 	addss	%xmm4, %xmm1
    00000503: 	addss	%xmm3, %xmm2
    00000507: 	addss	(%r11,%rdx,4), %xmm2
    0000050d: 	mulss	%xmm9, %xmm1
    00000512: 	addss	%xmm4, %xmm2
    00000516: 	mulss	%xmm9, %xmm2
    0000051b: 	movss	%xmm2, (%r14,%r8,4)
    00000521: 	movlps	%xmm0, (%r14,%rdi,4)
    00000526: 	movss	%xmm1, (%r14,%rcx,4)
.Ltmp2096:
    0000052c: 	movl	0x2c(%rsp), %edx
.Ltmp2093:
    00000530: 	cmpl	0x1c(%rsp), %edx
    00000534: 	jge	.Ltmp2099 # Offset: 1332
    0000053a: 	movslq	%edx, %rdi
    0000053d: 	movslq	%eax, %rcx
    00000540: 	movslq	%r12d, %rbx
    00000543: 	movl	0x34(%rsp), %esi
    00000547: 	leaq	(%rcx,%rdi), %r13
    0000054b: 	movslq	%r15d, %rcx
    0000054e: 	addq	%rdi, %rbx
    00000551: 	addq	%rdi, %rcx
    00000554: 	movq	%r14, %rdi
    00000557: 	subl	%edx, %esi
    00000559: 	movq	%rbx, 0x10(%rsp)
    0000055e: 	subq	%r11, %rdi
    00000561: 	leaq	(,%r13,4), %r9
    00000569: 	leaq	0x4(,%rcx,4), %r10
    00000571: 	cmpq	$0x10, %rdi
    00000575: 	leaq	(%r14,%r9), %r8
    00000579: 	leaq	0x4(,%rbx,4), %rbx
    00000581: 	seta	%dil
    00000585: 	cmpl	$0x2, %esi
    00000588: 	setne	%bpl
    0000058c: 	andl	%ebp, %edi
    0000058e: 	leaq	(%r11,%r10), %rbp
    00000592: 	movb	%dil, 0x1b(%rsp)
    00000597: 	movq	%r8, %rdi
    0000059a: 	subq	%rbp, %rdi
    0000059d: 	cmpq	$0x8, %rdi
    000005a1: 	seta	%bpl
    000005a5: 	testb	%bpl, 0x1b(%rsp)
    000005aa: 	je	.Ltmp2100 # Offset: 1450
    000005b0: 	leaq	(%r11,%rbx), %rbp
    000005b4: 	movq	%r8, %rdi
    000005b7: 	subq	%rbp, %rdi
    000005ba: 	cmpq	$0x8, %rdi
    000005be: 	jbe	.Ltmp2100 # Offset: 1470
    000005c4: 	leal	-0x2(%rsi), %ebp
    000005c7: 	leal	-0x1(%rsi), %edi
    000005ca: 	cmpl	$0x2, %ebp
    000005cd: 	jbe	.Ltmp2101 # Offset: 1485
    000005d3: 	movups	-0x4(%r11,%r9), %xmm1
    000005d9: 	movups	0x4(%r11,%r9), %xmm0
    000005df: 	addps	%xmm1, %xmm0
    000005e2: 	movups	-0x4(%r11,%r10), %xmm1
    000005e8: 	addps	%xmm1, %xmm0
    000005eb: 	movups	-0x4(%r11,%rbx), %xmm1
    000005f1: 	addps	%xmm1, %xmm0
    000005f4: 	pxor	%xmm1, %xmm1
    000005f8: 	addps	%xmm1, %xmm0
    000005fb: 	mulps	%xmm5, %xmm0
    000005fe: 	movups	%xmm0, (%r8)
    00000602: 	movl	%edi, %r8d
    00000605: 	andl	$-0x4, %r8d
    00000609: 	addl	%r8d, %edx
    0000060c: 	cmpl	%edi, %r8d
    0000060f: 	je	.Ltmp2099 # Offset: 1551
    00000615: 	subl	%r8d, %esi
    00000618: 	leal	-0x1(%rsi), %edi
    0000061b: 	cmpl	$0x2, %esi
    0000061e: 	je	.Ltmp2102 # Offset: 1566
.Ltmp2119:
    00000620: 	movq	DATAat0x49420(%rip), %xmm3
    00000628: 	movl	%r8d, %esi
    0000062b: 	leaq	(%rsi,%r13), %r8
    0000062f: 	addq	%rsi, %rcx
    00000632: 	addq	0x10(%rsp), %rsi
    00000637: 	leaq	(,%r8,4), %r9
    0000063f: 	movq	-0x4(%r11,%r9), %xmm1
    00000646: 	movq	0x4(%r11,%r9), %xmm0
    0000064d: 	addps	%xmm1, %xmm0
    00000650: 	movq	(%r11,%rcx,4), %xmm1
    00000656: 	movl	%edi, %ecx
    00000658: 	andl	$-0x2, %ecx
    0000065b: 	addl	%ecx, %edx
    0000065d: 	addps	%xmm1, %xmm0
    00000660: 	movq	(%r11,%rsi,4), %xmm1
    00000666: 	addps	%xmm1, %xmm0
    00000669: 	xorps	%xmm1, %xmm1
    0000066c: 	addps	%xmm1, %xmm0
    0000066f: 	mulps	%xmm3, %xmm0
    00000672: 	movlps	%xmm0, (%r14,%r8,4)
    00000677: 	cmpl	%edi, %ecx
    00000679: 	je	.Ltmp2099 # Offset: 1657
.Ltmp2102:
    0000067b: 	leal	(%r15,%rdx), %ecx
    0000067f: 	leal	0x1(%rdx,%rax), %edi
    00000683: 	movss	DATAat0x49420(%rip), %xmm9
    0000068c: 	leal	-0x1(%rdx,%rax), %esi
    00000690: 	movslq	%ecx, %rcx
    00000693: 	movslq	%edi, %rdi
    00000696: 	movslq	%esi, %rsi
    00000699: 	movss	(%r11,%rdi,4), %xmm0
    0000069f: 	addss	(%r11,%rsi,4), %xmm0
    000006a5: 	addss	(%r11,%rcx,4), %xmm0
    000006ab: 	leal	(%rax,%rdx), %ecx
    000006ae: 	addl	%r12d, %edx
    000006b1: 	movslq	%edx, %rdx
    000006b4: 	movslq	%ecx, %rcx
    000006b7: 	addss	(%r11,%rdx,4), %xmm0
    000006bd: 	addss	%xmm4, %xmm0
    000006c1: 	mulss	%xmm9, %xmm0
    000006c6: 	movss	%xmm0, (%r14,%rcx,4)
.Ltmp2099:
    000006cc: 	movl	0x24(%rsp), %ebx
    000006d0: 	movl	0x8(%rsp), %edi
    000006d4: 	addl	%ebx, %r15d
    000006d7: 	addl	%ebx, %eax
    000006d9: 	addl	%ebx, %r12d
    000006dc: 	cmpl	%edi, 0x20(%rsp)
    000006e0: 	jne	.Ltmp2103 # Offset: 1760
.Ltmp2092:
    000006e6: 	cmpq	$0x0, 0x58(%rsp)
    000006ec: 	je	.Ltmp2104 # Offset: 1772
    000006f2: 	cmpq	$0x2, 0x80(%rsp)
    000006fb: 	jbe	.Ltmp2105 # Offset: 1787
    00000701: 	movaps	DATAat0x494b0(%rip), %xmm6
    00000708: 	xorl	%eax, %eax
    0000070a: 	movaps	%xmm4, %xmm1
    0000070d: 	pxor	%xmm3, %xmm3
    00000711: 	movq	0x90(%rsp), %rdx
    00000719: 	nopl	(%rax) # Size: 7
.Ltmp2106:
    00000720: 	movups	(%r14,%rax), %xmm7
    00000725: 	movups	(%r11,%rax), %xmm2
    0000072a: 	addq	$0x10, %rax
    0000072e: 	subps	%xmm7, %xmm2
    00000731: 	movaps	%xmm2, %xmm0
    00000734: 	movaps	%xmm2, %xmm7
    00000737: 	cmpltps	%xmm3, %xmm0
    0000073b: 	xorps	%xmm6, %xmm7
    0000073e: 	andps	%xmm0, %xmm7
    00000741: 	andnps	%xmm2, %xmm0
    00000744: 	orps	%xmm7, %xmm0
    00000747: 	addss	%xmm0, %xmm1
    0000074b: 	movaps	%xmm0, %xmm2
    0000074e: 	shufps	$0x55, %xmm0, %xmm2
    00000752: 	addss	%xmm1, %xmm2
    00000756: 	movaps	%xmm0, %xmm1
    00000759: 	unpckhps	%xmm0, %xmm1
    0000075c: 	shufps	$0xff, %xmm0, %xmm0
    00000760: 	addss	%xmm2, %xmm1
    00000764: 	addss	%xmm0, %xmm1
    00000768: 	cmpq	%rdx, %rax
    0000076b: 	jne	.Ltmp2106 # Offset: 1899
    0000076d: 	movq	0x78(%rsp), %rax
    00000772: 	cmpq	%rax, 0x58(%rsp)
    00000777: 	je	.Ltmp2107 # Offset: 1911
.Ltmp2122:
    00000779: 	movss	(%r11,%rax,4), %xmm0
    0000077f: 	subss	(%r14,%rax,4), %xmm0
    00000785: 	leaq	(,%rax,4), %rdx
    0000078d: 	comiss	%xmm0, %xmm4
    00000790: 	jbe	.Ltmp2108 # Offset: 1936
    00000792: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2108:
    00000799: 	addss	%xmm0, %xmm1
    0000079d: 	leaq	0x1(%rax), %rcx
    000007a1: 	cmpq	%rcx, 0x58(%rsp)
    000007a6: 	jbe	.Ltmp2107 # Offset: 1958
    000007a8: 	movss	0x4(%r11,%rdx), %xmm0
    000007af: 	subss	0x4(%r14,%rdx), %xmm0
    000007b6: 	comiss	%xmm0, %xmm4
    000007b9: 	jbe	.Ltmp2109 # Offset: 1977
    000007bb: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2109:
    000007c2: 	addss	%xmm0, %xmm1
    000007c6: 	addq	$0x2, %rax
    000007ca: 	cmpq	%rax, 0x58(%rsp)
    000007cf: 	jbe	.Ltmp2107 # Offset: 1999
    000007d1: 	movss	0x8(%r11,%rdx), %xmm0
    000007d8: 	subss	0x8(%r14,%rdx), %xmm0
    000007df: 	comiss	%xmm0, %xmm4
    000007e2: 	jbe	.Ltmp2110 # Offset: 2018
    000007e4: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2110:
    000007eb: 	addss	%xmm0, %xmm1
.Ltmp2107:
    000007ef: 	movq	0x58(%rsp), %rdx
    000007f4: 	movaps	%xmm4, %xmm2
    000007f7: 	xorl	%eax, %eax
    000007f9: 	nopl	(%rax) # Size: 7
.Ltmp2112:
    00000800: 	movss	(%r11,%rax,4), %xmm0
    00000806: 	subss	(%r14,%rax,4), %xmm0
    0000080c: 	comiss	%xmm0, %xmm4
    0000080f: 	jbe	.Ltmp2111 # Offset: 2063
    00000811: 	xorps	%xmm8, %xmm0
.Ltmp2111:
    00000815: 	maxss	%xmm2, %xmm0
    00000819: 	addq	$0x1, %rax
    0000081d: 	movaps	%xmm0, %xmm2
    00000820: 	cmpq	%rax, %rdx
    00000823: 	jne	.Ltmp2112 # Offset: 2083
    00000825: 	movl	0x60(%rsp), %eax
    00000829: 	cmpl	%eax, 0x110(%rsp)
    00000830: 	jge	.Ltmp2113 # Offset: 2096
    00000832: 	movss	DATAat0x49548(%rip), %xmm0
    0000083a: 	comiss	%xmm1, %xmm0
    0000083d: 	ja	.Ltmp2114 # Offset: 2109
    00000843: 	ucomiss	%xmm1, %xmm1
    00000846: 	jp	.Ltmp2115 # Offset: 2118
    0000084c: 	movss	DATAat0x4954c(%rip), %xmm0
    00000854: 	comiss	%xmm2, %xmm0
    00000857: 	ja	.Ltmp2116 # Offset: 2135
    0000085d: 	ucomiss	%xmm2, %xmm2
    00000860: 	jp	.Ltmp2115 # Offset: 2144
.Ltmp2113:
    00000866: 	addl	$0x1, 0x60(%rsp)
    0000086b: 	movq	%r14, %rax
    0000086e: 	movl	0x60(%rsp), %ebx
    00000872: 	movq	%r11, %r14
    00000875: 	cmpl	0x88(%rsp), %ebx
    0000087c: 	je	.Ltmp2114 # Offset: 2172
    00000882: 	movq	%rax, %r11
    00000885: 	jmp	.Ltmp2117 # Offset: 2181
    0000088a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2094:
    00000890: 	subq	$0x4, %rdx
    00000894: 	addq	0x70(%rsp), %r9
    00000899: 	leaq	-0x14(%r11,%rbx), %rsi
    0000089e: 	leaq	(%r11,%rdx), %rcx
    000008a2: 	leaq	-0x14(%r11,%rbp), %rdi
    000008a7: 	xorps	%xmm10, %xmm10
    000008ab: 	addq	%r14, %rdx
    000008ae: 	leaq	0x10(%r11,%r9,4), %r8
    000008b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2118:
    000008b8: 	movss	0x8(%rcx), %xmm9
    000008be: 	movss	0x4(%rcx), %xmm3
    000008c3: 	addq	$0x10, %rcx
    000008c7: 	addq	$0x10, %rsi
    000008cb: 	movq	-0x8(%rsi), %xmm0
    000008d0: 	movss	-0xc(%rsi), %xmm2
    000008d5: 	addq	$0x10, %rdi
    000008d9: 	addq	$0x10, %rdx
    000008dd: 	unpcklps	%xmm9, %xmm3
    000008e1: 	addss	-0x10(%rcx), %xmm2
    000008e6: 	movss	-0x4(%rcx), %xmm1
    000008eb: 	addps	%xmm0, %xmm3
    000008ee: 	movq	-0x4(%rcx), %xmm0
    000008f3: 	addss	%xmm9, %xmm2
    000008f8: 	addss	-0xc(%rdi), %xmm2
    000008fd: 	addps	%xmm0, %xmm3
    00000900: 	movq	-0x8(%rdi), %xmm0
    00000905: 	addss	%xmm4, %xmm2
    00000909: 	addps	%xmm0, %xmm3
    0000090c: 	movss	(%rsi), %xmm0
    00000910: 	addss	%xmm0, %xmm1
    00000914: 	addss	0x4(%rcx), %xmm1
    00000919: 	mulss	%xmm6, %xmm2
    0000091d: 	addss	(%rdi), %xmm1
    00000921: 	addps	%xmm10, %xmm3
    00000925: 	addss	%xmm4, %xmm1
    00000929: 	mulps	%xmm7, %xmm3
    0000092c: 	movss	%xmm2, -0xc(%rdx)
    00000931: 	mulss	%xmm6, %xmm1
    00000935: 	movlps	%xmm3, -0x8(%rdx)
    00000939: 	movss	%xmm1, (%rdx)
    0000093d: 	cmpq	%r8, %rcx
    00000940: 	jne	.Ltmp2118 # Offset: 2368
    00000946: 	jmp	.Ltmp2096 # Offset: 2374
    0000094b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2100:
    00000950: 	leal	0x1(%rdx), %ecx
    00000953: 	leal	-0x1(%rdx,%rax), %edi
    00000957: 	movl	0x1c(%rsp), %ebp
    0000095b: 	movss	DATAat0x49420(%rip), %xmm9
    00000964: 	leal	(%rcx,%rax), %esi
    00000967: 	movslq	%edi, %rdi
    0000096a: 	movslq	%esi, %rsi
    0000096d: 	movss	(%r11,%rdi,4), %xmm0
    00000973: 	leaq	(%r11,%rsi,4), %r9
    00000977: 	addss	(%r9), %xmm0
    0000097c: 	addss	-0x4(%r11,%r10), %xmm0
    00000983: 	addss	-0x4(%r11,%rbx), %xmm0
    0000098a: 	addss	%xmm4, %xmm0
    0000098e: 	mulss	%xmm9, %xmm0
    00000993: 	movss	%xmm0, (%r8)
    00000998: 	cmpl	%ebp, %ecx
    0000099a: 	jge	.Ltmp2099 # Offset: 2458
    000009a0: 	leal	0x2(%rdx), %edi
    000009a3: 	leal	(%rcx,%r15), %r10d
    000009a7: 	addl	%r12d, %ecx
    000009aa: 	movss	(%r11,%r13,4), %xmm0
    000009b0: 	leal	(%rdi,%rax), %r8d
    000009b4: 	movslq	%r10d, %r10
    000009b7: 	movslq	%ecx, %rcx
    000009ba: 	movslq	%r8d, %r8
    000009bd: 	leaq	(%r11,%r8,4), %rbx
    000009c1: 	addss	(%rbx), %xmm0
    000009c5: 	addss	(%r11,%r10,4), %xmm0
    000009cb: 	addss	(%r11,%rcx,4), %xmm0
    000009d1: 	addss	%xmm4, %xmm0
    000009d5: 	mulss	%xmm9, %xmm0
    000009da: 	movss	%xmm0, (%r14,%rsi,4)
    000009e0: 	cmpl	%ebp, %edi
    000009e2: 	jge	.Ltmp2099 # Offset: 2530
    000009e8: 	leal	0x3(%rdx), %ecx
    000009eb: 	leal	(%rdi,%r15), %r10d
    000009ef: 	addl	%r12d, %edi
    000009f2: 	leal	(%rcx,%rax), %esi
    000009f5: 	movslq	%r10d, %r10
    000009f8: 	movslq	%edi, %rdi
    000009fb: 	movslq	%esi, %rsi
    000009fe: 	movss	(%r11,%rsi,4), %xmm0
    00000a04: 	addss	(%r9), %xmm0
    00000a09: 	addss	(%r11,%r10,4), %xmm0
    00000a0f: 	addss	(%r11,%rdi,4), %xmm0
    00000a15: 	addss	%xmm4, %xmm0
    00000a19: 	mulss	%xmm9, %xmm0
    00000a1e: 	movss	%xmm0, (%r14,%r8,4)
    00000a24: 	cmpl	%ebp, %ecx
    00000a26: 	jge	.Ltmp2099 # Offset: 2598
    00000a2c: 	leal	0x4(%rdx,%rax), %edx
    00000a30: 	leal	(%rcx,%r15), %edi
    00000a34: 	movslq	%edx, %rdx
    00000a37: 	movslq	%edi, %rdi
    00000a3a: 	movss	(%r11,%rdx,4), %xmm0
    00000a40: 	leal	(%rcx,%r12), %edx
    00000a44: 	addss	(%rbx), %xmm0
    00000a48: 	movslq	%edx, %rdx
    00000a4b: 	addss	(%r11,%rdi,4), %xmm0
    00000a51: 	addss	(%r11,%rdx,4), %xmm0
    00000a57: 	addss	%xmm4, %xmm0
    00000a5b: 	mulss	%xmm9, %xmm0
    00000a60: 	movss	%xmm0, (%r14,%rsi,4)
    00000a66: 	jmp	.Ltmp2099 # Offset: 2662
.Ltmp2101:
    00000a6b: 	xorl	%r8d, %r8d
    00000a6e: 	jmp	.Ltmp2119 # Offset: 2670
.Ltmp2097:
    00000a73: 	movq	DATAat0x49420(%rip), %xmm3
    00000a7b: 	movl	0x98(%rsp), %edx
    00000a82: 	jmp	.Ltmp2120 # Offset: 2690
.Ltmp2104:
    00000a87: 	movl	0x60(%rsp), %eax
    00000a8b: 	movaps	%xmm4, %xmm1
    00000a8e: 	cmpl	%eax, 0x110(%rsp)
    00000a95: 	jl	.Ltmp2121 # Offset: 2709
    00000a97: 	movaps	%xmm4, %xmm2
    00000a9a: 	jmp	.Ltmp2113 # Offset: 2714
.Ltmp2105:
    00000a9f: 	movaps	%xmm4, %xmm1
    00000aa2: 	xorl	%eax, %eax
    00000aa4: 	jmp	.Ltmp2122 # Offset: 2724
.Ltmp2121:
    00000aa9: 	movaps	%xmm1, %xmm2
.Ltmp2114:
    00000aac: 	ucomiss	%xmm1, %xmm1
    00000aaf: 	setp	%r12b
    00000ab3: 	ucomiss	%xmm2, %xmm2
    00000ab6: 	setp	%al
    00000ab9: 	orl	%eax, %r12d
.Ltmp2128:
    00000abc: 	movss	%xmm2, 0x10(%rsp)
    00000ac2: 	movss	%xmm1, 0x8(%rsp)
    00000ac8: 	callq	clock@PLT # Offset: 2760
    00000acd: 	movl	0x9c(%rsp), %edi
    00000ad4: 	pxor	%xmm0, %xmm0
    00000ad8: 	movss	0xac(%rsp), %xmm6
    00000ae1: 	movq	%rax, end_time(%rip)
    00000ae8: 	subq	start_time(%rip), %rax
    00000aef: 	cvtsi2sd	%rax, %xmm0
    00000af4: 	movl	%edi, %eax
    00000af6: 	divsd	DATAat0x49520(%rip), %xmm0
    00000afe: 	movss	0x8(%rsp), %xmm1
    00000b04: 	shrl	$0x1f, %eax
    00000b07: 	movss	0x10(%rsp), %xmm2
    00000b0d: 	movq	%xmm0, %rbx
    00000b12: 	addl	%edi, %eax
    00000b14: 	movl	0x34(%rsp), %edi
    00000b18: 	sarl	%eax
    00000b1a: 	movl	%edi, %edx
    00000b1c: 	imull	%edi, %eax
    00000b1f: 	shrl	$0x1f, %edx
    00000b22: 	addl	%edi, %edx
    00000b24: 	sarl	%edx
    00000b26: 	addl	%edx, %eax
    00000b28: 	testb	%r12b, %r12b
    00000b2b: 	cltq
    00000b2d: 	subss	(%r14,%rax,4), %xmm6
    00000b33: 	movq	0xa0(%rsp), %rax
    00000b3b: 	movq	0x8(%rax), %rdx
    00000b3f: 	movq	(%rax), %rsi
    00000b42: 	movd	%xmm6, %ebp
    00000b46: 	jne	.Ltmp2123 # Offset: 2886
    00000b4c: 	movl	0x60(%rsp), %eax
    00000b50: 	cmpl	%eax, iterations(%rip)
    00000b56: 	jg	.Ltmp2124 # Offset: 2902
    00000b58: 	comiss	DATAat0x49548(%rip), %xmm1
    00000b5f: 	jbe	.Ltmp2124 # Offset: 2911
    00000b61: 	comiss	DATAat0x4954c(%rip), %xmm2
    00000b68: 	ja	.Ltmp2125 # Offset: 2920
.Ltmp2124:
    00000b6e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000b75: 	movss	%xmm2, 0x10(%rsp)
    00000b7b: 	movq	%r12, %rdi
    00000b7e: 	movss	%xmm1, 0x8(%rsp)
    00000b84: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2948
    00000b89: 	movl	$0xa, %edx
    00000b8e: 	leaq	DATAat0x491ab(%rip), %rsi
    00000b95: 	movq	%rax, %rdi
    00000b98: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2968
    00000b9d: 	movss	0x10(%rsp), %xmm2
    00000ba3: 	movss	0x8(%rsp), %xmm1
.Ltmp2127:
    00000ba9: 	movl	$0x4, %edx
    00000bae: 	movq	%r12, %rdi
    00000bb1: 	leaq	DATAat0x491b6(%rip), %rsi
    00000bb8: 	movss	%xmm2, 0x10(%rsp)
    00000bbe: 	movss	%xmm1, 0x8(%rsp)
    00000bc4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3012
    00000bc9: 	movl	0x60(%rsp), %esi
    00000bcd: 	movq	%r12, %rdi
    00000bd0: 	callq	_ZNSolsEi@PLT # Offset: 3024
    00000bd5: 	movl	$0xb, %edx
    00000bda: 	leaq	DATAat0x491bb(%rip), %rsi
    00000be1: 	movq	%rax, %rdi
    00000be4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3044
    00000be9: 	movl	$0xa, %edx
    00000bee: 	leaq	DATAat0x491c7(%rip), %rsi
    00000bf5: 	movq	%r12, %rdi
    00000bf8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3064
    00000bfd: 	movss	0x8(%rsp), %xmm1
    00000c03: 	movq	%r12, %rdi
    00000c06: 	pxor	%xmm0, %xmm0
    00000c0a: 	cvtss2sd	%xmm1, %xmm0
    00000c0e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3086
    00000c13: 	movl	$0x7, %edx
    00000c18: 	leaq	DATAat0x491d2(%rip), %rsi
    00000c1f: 	movq	%rax, %rdi
    00000c22: 	movq	%rax, %r12
    00000c25: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3109
    00000c2a: 	movss	0x10(%rsp), %xmm2
    00000c30: 	movq	%r12, %rdi
    00000c33: 	pxor	%xmm0, %xmm0
    00000c37: 	cvtss2sd	%xmm2, %xmm0
    00000c3b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3131
    00000c40: 	movl	$0x10, %edx
    00000c45: 	leaq	DATAat0x491da(%rip), %rsi
    00000c4c: 	movq	%rax, %r12
    00000c4f: 	movq	%rax, %rdi
    00000c52: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3154
    00000c57: 	movd	%ebp, %xmm6
    00000c5b: 	movq	%r12, %rdi
    00000c5e: 	pxor	%xmm0, %xmm0
    00000c62: 	cvtss2sd	%xmm6, %xmm0
    00000c66: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3174
    00000c6b: 	movl	$0x8, %edx
    00000c70: 	leaq	DATAat0x491eb(%rip), %rsi
    00000c77: 	movq	%rax, %rbp
    00000c7a: 	movq	%rax, %rdi
    00000c7d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3197
    00000c82: 	movq	%rbx, %xmm0
    00000c87: 	movq	%rbp, %rdi
    00000c8a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3210
    00000c8f: 	movl	$0x2, %edx
    00000c94: 	leaq	DATAat0x491f4(%rip), %rsi
    00000c9b: 	movq	%rax, %rdi
    00000c9e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3230
    00000ca3: 	movl	0xa8(%rsp), %eax
    00000caa: 	movl	%eax, iterations(%rip)
    00000cb0: 	movq	0xc8(%rsp), %rax
    00000cb8: 	subq	%fs:0x28, %rax
    00000cc1: 	jne	.Ltmp2126 # Offset: 3265
    00000cc7: 	addq	$0xd8, %rsp
    00000cce: 	popq	%rbx
    00000ccf: 	popq	%rbp
    00000cd0: 	popq	%r12
    00000cd2: 	popq	%r13
    00000cd4: 	popq	%r14
    00000cd6: 	popq	%r15
    00000cd8: 	retq # Offset: 3288
.Ltmp2123:
    00000cd9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000ce0: 	movq	%r12, %rdi
    00000ce3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3299
    00000ce8: 	movl	$0x10, %edx
    00000ced: 	leaq	DATAat0x493d4(%rip), %rsi
    00000cf4: 	movq	%rax, %rdi
    00000cf7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3319
    00000cfc: 	movss	0x8(%rsp), %xmm1
    00000d02: 	movss	0x10(%rsp), %xmm2
    00000d08: 	jmp	.Ltmp2127 # Offset: 3336
.Ltmp2115:
    00000d0d: 	movl	$0x1, %r12d
    00000d13: 	jmp	.Ltmp2128 # Offset: 3347
.Ltmp2125:
    00000d18: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000d1f: 	movss	%xmm2, 0x10(%rsp)
    00000d25: 	movq	%r12, %rdi
    00000d28: 	movss	%xmm1, 0x8(%rsp)
    00000d2e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3374
    00000d33: 	movl	$0x11, %edx
    00000d38: 	leaq	DATAat0x49199(%rip), %rsi
    00000d3f: 	movq	%rax, %rdi
    00000d42: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3394
    00000d47: 	movss	0x8(%rsp), %xmm1
    00000d4d: 	movss	0x10(%rsp), %xmm2
    00000d53: 	jmp	.Ltmp2127 # Offset: 3411
.Ltmp2116:
    00000d58: 	ucomiss	%xmm2, %xmm2
    00000d5b: 	setp	%r12b
    00000d5f: 	jmp	.Ltmp2128 # Offset: 3423
.Ltmp2091:
    00000d64: 	pxor	%xmm2, %xmm2
    00000d68: 	movl	$0x0, 0x60(%rsp)
    00000d70: 	xorl	%r12d, %r12d
    00000d73: 	movaps	%xmm2, %xmm1
    00000d76: 	jmp	.Ltmp2128 # Offset: 3446
.Ltmp2126:
    00000d7b: 	callq	__stack_chk_fail@PLT # Offset: 3451
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff18jacobi2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff18jacobi2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x34500
  Size        : 0x590
  MaxSize     : 0x590
  Offset      : 0x34500
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff18jacobi2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movl	%ecx, %r12d
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r14d, %esi
    0000001d: 	imull	%r12d, %r14d
    00000021: 	subq	$0x58, %rsp
    00000025: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002c: 	movl	%edx, 0x4(%rsp)
    00000030: 	leaq	0x30(%rsp), %rcx
    00000035: 	movl	%r12d, %edx
    00000038: 	movslq	%r14d, %rbp
    0000003b: 	movl	%r8d, 0x24(%rsp)
    00000040: 	movq	%r9, 0x28(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x48(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x30(%rsp)
    0000005a: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 90
    0000005f: 	movss	%xmm0, 0x20(%rsp)
    00000065: 	testl	%ebp, %ebp
    00000067: 	jle	.Ltmp2129 # Offset: 103
    00000069: 	movslq	%ebp, %rdx
    0000006c: 	movq	%r13, %rsi
    0000006f: 	movq	%rbx, %rdi
    00000072: 	shlq	$0x2, %rdx
    00000076: 	callq	memmove@PLT # Offset: 118
.Ltmp2129:
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	movl	$0x2710, iterations(%rip)
    0000008b: 	movl	%eax, 0x1c(%rsp)
    0000008f: 	callq	clock@PLT # Offset: 143
    00000094: 	movq	%rax, start_time(%rip)
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	movl	%eax, 0x18(%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp2130 # Offset: 167
    000000ad: 	leaq	-0x1(%rbp), %rax
    000000b1: 	movq	%rbp, %r11
    000000b4: 	movl	0x24(%rsp), %r14d
    000000b9: 	movq	%rbx, %rsi
    000000bc: 	movq	%rax, 0x8(%rsp)
    000000c1: 	movq	%rbp, %rax
    000000c4: 	shrq	$0x2, %r11
    000000c8: 	movq	%rbp, %rbx
    000000cb: 	andq	$-0x4, %rax
    000000cf: 	shlq	$0x4, %r11
    000000d3: 	xorl	%r15d, %r15d
    000000d6: 	pxor	%xmm15, %xmm15
    000000db: 	movq	%rax, 0x10(%rsp)
    000000e0: 	movq	%r11, %rbp
    000000e3: 	movss	DATAat0x494c0(%rip), %xmm14
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp2144:
    000000f0: 	movl	0x4(%rsp), %edx
    000000f4: 	movl	%r14d, %r8d
    000000f7: 	movl	%r12d, %ecx
    000000fa: 	movq	%r13, %rdi
    000000fd: 	callq	"_ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/1" # Offset: 253
    00000102: 	testq	%rbx, %rbx
    00000105: 	je	.Ltmp2131 # Offset: 261
    0000010b: 	cmpq	$0x2, 0x8(%rsp)
    00000111: 	jbe	.Ltmp2132 # Offset: 273
    00000117: 	movaps	DATAat0x494b0(%rip), %xmm6
    0000011e: 	xorl	%edx, %edx
    00000120: 	movaps	%xmm15, %xmm1
    00000124: 	pxor	%xmm5, %xmm5
    00000128: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2133:
    00000130: 	movups	(%r13,%rdx), %xmm2
    00000136: 	movups	(%rsi,%rdx), %xmm3
    0000013a: 	addq	$0x10, %rdx
    0000013e: 	subps	%xmm3, %xmm2
    00000141: 	movaps	%xmm2, %xmm0
    00000144: 	movaps	%xmm2, %xmm7
    00000147: 	cmpltps	%xmm5, %xmm0
    0000014b: 	xorps	%xmm6, %xmm7
    0000014e: 	andps	%xmm0, %xmm7
    00000151: 	andnps	%xmm2, %xmm0
    00000154: 	orps	%xmm7, %xmm0
    00000157: 	addss	%xmm0, %xmm1
    0000015b: 	movaps	%xmm0, %xmm2
    0000015e: 	shufps	$0x55, %xmm0, %xmm2
    00000162: 	addss	%xmm2, %xmm1
    00000166: 	movaps	%xmm0, %xmm2
    00000169: 	unpckhps	%xmm0, %xmm2
    0000016c: 	shufps	$0xff, %xmm0, %xmm0
    00000170: 	addss	%xmm2, %xmm1
    00000174: 	addss	%xmm0, %xmm1
    00000178: 	cmpq	%rbp, %rdx
    0000017b: 	jne	.Ltmp2133 # Offset: 379
    0000017d: 	movq	0x10(%rsp), %rax
    00000182: 	movq	%rax, %rdx
    00000185: 	cmpq	%rax, %rbx
    00000188: 	je	.Ltmp2134 # Offset: 392
.Ltmp2146:
    0000018a: 	movss	(%r13,%rdx,4), %xmm0
    00000191: 	subss	(%rsi,%rdx,4), %xmm0
    00000196: 	leaq	(,%rdx,4), %rcx
    0000019e: 	comiss	%xmm0, %xmm15
    000001a2: 	jbe	.Ltmp2135 # Offset: 418
    000001a4: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2135:
    000001ab: 	leaq	0x1(%rdx), %r8
    000001af: 	addss	%xmm0, %xmm1
    000001b3: 	cmpq	%r8, %rbx
    000001b6: 	jbe	.Ltmp2134 # Offset: 438
    000001b8: 	movss	0x4(%r13,%rcx), %xmm0
    000001bf: 	subss	0x4(%rsi,%rcx), %xmm0
    000001c5: 	comiss	%xmm0, %xmm15
    000001c9: 	jbe	.Ltmp2136 # Offset: 457
    000001cb: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2136:
    000001d2: 	addq	$0x2, %rdx
    000001d6: 	addss	%xmm0, %xmm1
    000001da: 	cmpq	%rdx, %rbx
    000001dd: 	jbe	.Ltmp2134 # Offset: 477
    000001df: 	movss	0x8(%r13,%rcx), %xmm0
    000001e6: 	subss	0x8(%rsi,%rcx), %xmm0
    000001ec: 	comiss	%xmm0, %xmm15
    000001f0: 	jbe	.Ltmp2137 # Offset: 496
    000001f2: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2137:
    000001f9: 	addss	%xmm0, %xmm1
.Ltmp2134:
    000001fd: 	movaps	%xmm15, %xmm2
    00000201: 	xorl	%edx, %edx
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2139:
    00000208: 	movss	(%r13,%rdx,4), %xmm0
    0000020f: 	subss	(%rsi,%rdx,4), %xmm0
    00000214: 	comiss	%xmm0, %xmm15
    00000218: 	jbe	.Ltmp2138 # Offset: 536
    0000021a: 	xorps	%xmm14, %xmm0
.Ltmp2138:
    0000021e: 	maxss	%xmm2, %xmm0
    00000222: 	addq	$0x1, %rdx
    00000226: 	movaps	%xmm0, %xmm2
    00000229: 	cmpq	%rdx, %rbx
    0000022c: 	jne	.Ltmp2139 # Offset: 556
    0000022e: 	cmpl	%r15d, 0x90(%rsp)
    00000236: 	jge	.Ltmp2140 # Offset: 566
    00000238: 	movss	DATAat0x49548(%rip), %xmm0
    00000240: 	comiss	%xmm1, %xmm0
    00000243: 	ja	.Ltmp2141 # Offset: 579
    00000245: 	ucomiss	%xmm1, %xmm1
    00000248: 	jp	.Ltmp2142 # Offset: 584
    0000024e: 	movss	DATAat0x4954c(%rip), %xmm0
    00000256: 	comiss	%xmm2, %xmm0
    00000259: 	ja	.Ltmp2143 # Offset: 601
    0000025f: 	ucomiss	%xmm2, %xmm2
    00000262: 	jp	.Ltmp2142 # Offset: 610
.Ltmp2140:
    00000268: 	movq	%rsi, %rdx
    0000026b: 	addl	$0x1, %r15d
    0000026f: 	movq	%r13, %rsi
    00000272: 	cmpl	0x18(%rsp), %r15d
    00000277: 	je	.Ltmp2141 # Offset: 631
    00000279: 	movq	%rdx, %r13
    0000027c: 	jmp	.Ltmp2144 # Offset: 636
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp2131:
    00000288: 	cmpl	%r15d, 0x90(%rsp)
    00000290: 	jl	.Ltmp2145 # Offset: 656
    00000296: 	movaps	%xmm15, %xmm2
    0000029a: 	movaps	%xmm15, %xmm1
    0000029e: 	jmp	.Ltmp2140 # Offset: 670
.Ltmp2132:
    000002a0: 	movaps	%xmm15, %xmm1
    000002a4: 	xorl	%edx, %edx
    000002a6: 	jmp	.Ltmp2146 # Offset: 678
.Ltmp2141:
    000002ab: 	movq	%rsi, %rbx
.Ltmp2153:
    000002ae: 	ucomiss	%xmm2, %xmm2
    000002b1: 	setp	%bpl
    000002b5: 	ucomiss	%xmm1, %xmm1
    000002b8: 	setp	%al
    000002bb: 	orl	%eax, %ebp
.Ltmp2152:
    000002bd: 	movss	%xmm1, 0x8(%rsp)
    000002c3: 	movss	%xmm2, 0x18(%rsp)
    000002c9: 	callq	clock@PLT # Offset: 713
    000002ce: 	movl	0x4(%rsp), %edi
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movl	%r12d, %edx
    000002d9: 	movq	%rax, end_time(%rip)
    000002e0: 	subq	start_time(%rip), %rax
    000002e7: 	shrl	$0x1f, %edx
    000002ea: 	cvtsi2sd	%rax, %xmm0
    000002ef: 	movl	%edi, %eax
    000002f1: 	addl	%r12d, %edx
    000002f4: 	movss	0x20(%rsp), %xmm4
    000002fa: 	shrl	$0x1f, %eax
    000002fd: 	sarl	%edx
    000002ff: 	divsd	DATAat0x49520(%rip), %xmm0
    00000307: 	movss	0x18(%rsp), %xmm2
    0000030d: 	addl	%edi, %eax
    0000030f: 	movss	0x8(%rsp), %xmm1
    00000315: 	movq	%xmm0, %r14
    0000031a: 	sarl	%eax
    0000031c: 	imull	%r12d, %eax
    00000320: 	addl	%edx, %eax
    00000322: 	testb	%bpl, %bpl
    00000325: 	cltq
    00000327: 	subss	(%rbx,%rax,4), %xmm4
    0000032c: 	movd	%xmm4, %ebx
    00000330: 	jne	.Ltmp2147 # Offset: 816
    00000336: 	movq	0x28(%rsp), %rax
    0000033b: 	cmpl	%r15d, iterations(%rip)
    00000342: 	movq	0x8(%rax), %rdx
    00000346: 	movq	(%rax), %rsi
    00000349: 	jg	.Ltmp2148 # Offset: 841
    0000034b: 	comiss	DATAat0x49548(%rip), %xmm1
    00000352: 	jbe	.Ltmp2148 # Offset: 850
    00000354: 	comiss	DATAat0x4954c(%rip), %xmm2
    0000035b: 	ja	.Ltmp2149 # Offset: 859
.Ltmp2148:
    00000361: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000368: 	movss	%xmm1, 0x18(%rsp)
    0000036e: 	movq	%rbp, %rdi
    00000371: 	movss	%xmm2, 0x4(%rsp)
    00000377: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 887
    0000037c: 	movl	$0xa, %edx
    00000381: 	leaq	DATAat0x491ab(%rip), %rsi
    00000388: 	movq	%rax, %rdi
    0000038b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 907
    00000390: 	movss	0x18(%rsp), %xmm1
    00000396: 	movss	0x4(%rsp), %xmm2
.Ltmp2151:
    0000039c: 	movl	$0x4, %edx
    000003a1: 	movq	%rbp, %rdi
    000003a4: 	leaq	DATAat0x491b6(%rip), %rsi
    000003ab: 	movss	%xmm2, 0x4(%rsp)
    000003b1: 	movss	%xmm1, 0x18(%rsp)
    000003b7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 951
    000003bc: 	movq	%rbp, %rdi
    000003bf: 	movl	%r15d, %esi
    000003c2: 	callq	_ZNSolsEi@PLT # Offset: 962
    000003c7: 	movl	$0xb, %edx
    000003cc: 	leaq	DATAat0x491bb(%rip), %rsi
    000003d3: 	movq	%rax, %rdi
    000003d6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 982
    000003db: 	movl	$0xa, %edx
    000003e0: 	leaq	DATAat0x491c7(%rip), %rsi
    000003e7: 	movq	%rbp, %rdi
    000003ea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1002
    000003ef: 	movss	0x18(%rsp), %xmm1
    000003f5: 	movq	%rbp, %rdi
    000003f8: 	pxor	%xmm0, %xmm0
    000003fc: 	cvtss2sd	%xmm1, %xmm0
    00000400: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1024
    00000405: 	movl	$0x7, %edx
    0000040a: 	leaq	DATAat0x491d2(%rip), %rsi
    00000411: 	movq	%rax, %rdi
    00000414: 	movq	%rax, %rbp
    00000417: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1047
    0000041c: 	movss	0x4(%rsp), %xmm2
    00000422: 	movq	%rbp, %rdi
    00000425: 	pxor	%xmm0, %xmm0
    00000429: 	cvtss2sd	%xmm2, %xmm0
    0000042d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1069
    00000432: 	movl	$0x10, %edx
    00000437: 	leaq	DATAat0x491da(%rip), %rsi
    0000043e: 	movq	%rax, %rbp
    00000441: 	movq	%rax, %rdi
    00000444: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1092
    00000449: 	movd	%ebx, %xmm4
    0000044d: 	movq	%rbp, %rdi
    00000450: 	pxor	%xmm0, %xmm0
    00000454: 	cvtss2sd	%xmm4, %xmm0
    00000458: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1112
    0000045d: 	movl	$0x8, %edx
    00000462: 	leaq	DATAat0x491eb(%rip), %rsi
    00000469: 	movq	%rax, %rbp
    0000046c: 	movq	%rax, %rdi
    0000046f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1135
    00000474: 	movq	%r14, %xmm0
    00000479: 	movq	%rbp, %rdi
    0000047c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1148
    00000481: 	movl	$0x2, %edx
    00000486: 	leaq	DATAat0x491f4(%rip), %rsi
    0000048d: 	movq	%rax, %rdi
    00000490: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1168
    00000495: 	movl	0x1c(%rsp), %eax
    00000499: 	movl	%eax, iterations(%rip)
    0000049f: 	movq	0x48(%rsp), %rax
    000004a4: 	subq	%fs:0x28, %rax
    000004ad: 	jne	.Ltmp2150 # Offset: 1197
    000004b3: 	addq	$0x58, %rsp
    000004b7: 	popq	%rbx
    000004b8: 	popq	%rbp
    000004b9: 	popq	%r12
    000004bb: 	popq	%r13
    000004bd: 	popq	%r14
    000004bf: 	popq	%r15
    000004c1: 	retq # Offset: 1217
.Ltmp2147:
    000004c2: 	movq	0x28(%rsp), %rax
    000004c7: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000004ce: 	movss	%xmm1, 0x18(%rsp)
    000004d4: 	movq	%rbp, %rdi
    000004d7: 	movss	%xmm2, 0x4(%rsp)
    000004dd: 	movq	0x8(%rax), %rdx
    000004e1: 	movq	(%rax), %rsi
    000004e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1252
    000004e9: 	movl	$0x10, %edx
    000004ee: 	leaq	DATAat0x493d4(%rip), %rsi
    000004f5: 	movq	%rax, %rdi
    000004f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1272
    000004fd: 	movss	0x4(%rsp), %xmm2
    00000503: 	movss	0x18(%rsp), %xmm1
    00000509: 	jmp	.Ltmp2151 # Offset: 1289
.Ltmp2142:
    0000050e: 	movq	%rsi, %rbx
    00000511: 	movl	$0x1, %ebp
    00000516: 	jmp	.Ltmp2152 # Offset: 1302
.Ltmp2149:
    0000051b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000522: 	movss	%xmm1, 0x18(%rsp)
    00000528: 	movq	%rbp, %rdi
    0000052b: 	movss	%xmm2, 0x4(%rsp)
    00000531: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1329
    00000536: 	movl	$0x11, %edx
    0000053b: 	leaq	DATAat0x49199(%rip), %rsi
    00000542: 	movq	%rax, %rdi
    00000545: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1349
    0000054a: 	movss	0x4(%rsp), %xmm2
    00000550: 	movss	0x18(%rsp), %xmm1
    00000556: 	jmp	.Ltmp2151 # Offset: 1366
.Ltmp2145:
    0000055b: 	movq	%rsi, %rbx
    0000055e: 	movaps	%xmm15, %xmm2
    00000562: 	movaps	%xmm15, %xmm1
    00000566: 	jmp	.Ltmp2153 # Offset: 1382
.Ltmp2143:
    0000056b: 	ucomiss	%xmm2, %xmm2
    0000056e: 	movq	%rsi, %rbx
    00000571: 	setp	%bpl
    00000575: 	jmp	.Ltmp2152 # Offset: 1397
.Ltmp2130:
    0000057a: 	pxor	%xmm2, %xmm2
    0000057e: 	xorl	%ebp, %ebp
    00000580: 	xorl	%r15d, %r15d
    00000583: 	movaps	%xmm2, %xmm1
    00000586: 	jmp	.Ltmp2152 # Offset: 1414
.Ltmp2150:
    0000058b: 	callq	__stack_chk_fail@PLT # Offset: 1419
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff18jacobi2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff21jacobi_sor2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x34a90
  Size        : 0xa20
  MaxSize     : 0xa20
  Offset      : 0x34a90
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff21jacobi_sor2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%edx, %ebx
    00000018: 	movl	%ebx, %esi
    0000001a: 	subq	$0x108, %rsp
    00000021: 	movaps	DATAat0x494a0(%rip), %xmm0
    00000028: 	movl	%edx, 0xcc(%rsp)
    0000002f: 	movl	%ebp, %edx
    00000031: 	movl	%ecx, 0x40(%rsp)
    00000035: 	leaq	0xe0(%rsp), %rcx
    0000003d: 	movl	%r8d, 0x30(%rsp)
    00000042: 	movq	%r9, 0xd0(%rsp)
    0000004a: 	movq	%fs:0x28, %rax
    00000053: 	movq	%rax, 0xf8(%rsp)
    0000005b: 	xorl	%eax, %eax
    0000005d: 	movaps	%xmm0, 0xe0(%rsp)
    00000065: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 101
    0000006a: 	movl	%ebx, %edi
    0000006c: 	movss	%xmm0, 0xdc(%rsp)
    00000075: 	imull	%ebp, %edi
    00000078: 	movl	%edi, %ebx
    0000007a: 	testl	%edi, %edi
    0000007c: 	jle	.Ltmp2154 # Offset: 124
    0000007e: 	movslq	%edi, %rdx
    00000081: 	movq	%r14, %rsi
    00000084: 	movq	%r15, %rdi
    00000087: 	shlq	$0x2, %rdx
    0000008b: 	callq	memmove@PLT # Offset: 139
.Ltmp2154:
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movl	$0x2710, iterations(%rip)
    000000a0: 	movl	%eax, 0xd8(%rsp)
    000000a7: 	callq	clock@PLT # Offset: 167
    000000ac: 	movq	%rax, start_time(%rip)
    000000b3: 	movl	iterations(%rip), %eax
    000000b9: 	movl	%eax, 0x84(%rsp)
    000000c0: 	testl	%eax, %eax
    000000c2: 	jle	.Ltmp2155 # Offset: 194
    000000c8: 	movl	0xcc(%rsp), %r8d
    000000d0: 	movslq	%ebx, %rcx
    000000d3: 	movl	0x30(%rsp), %ebx
    000000d7: 	movl	$0x0, 0x60(%rsp)
    000000df: 	movl	0x40(%rsp), %r9d
    000000e4: 	movq	%rcx, 0x58(%rsp)
    000000e9: 	pxor	%xmm1, %xmm1
    000000ed: 	movss	DATAat0x494c0(%rip), %xmm8
    000000f6: 	leal	-0x2(%r8), %edx
    000000fa: 	movl	%ebx, %eax
    000000fc: 	movaps	%xmm8, %xmm9
    00000100: 	movaps	DATAat0x49420(%rip), %xmm6
    00000107: 	movl	%edx, 0x80(%rsp)
    0000010e: 	imull	%ebx, %edx
    00000111: 	leal	-0x2(%r9), %edi
    00000115: 	negl	%eax
    00000117: 	movslq	%edi, %rsi
    0000011a: 	cltq
    0000011c: 	movl	%edi, 0x44(%rsp)
    00000120: 	movaps	DATAat0x49430(%rip), %xmm5
    00000127: 	leaq	(,%rax,4), %r13
    0000012f: 	movq	%rsi, 0x70(%rsp)
    00000134: 	movl	%edx, 0xc8(%rsp)
    0000013b: 	movslq	%edx, %rdx
    0000013e: 	leaq	(%rdx,%rsi), %rax
    00000142: 	shlq	$0x2, %rax
    00000146: 	movq	%rax, 0xa8(%rsp)
    0000014e: 	subq	$0x8, %rax
    00000152: 	movq	%rax, 0xb0(%rsp)
    0000015a: 	leal	-0x3(%r8), %eax
    0000015e: 	imull	%ebx, %eax
    00000161: 	cltq
    00000163: 	addq	%rsi, %rax
    00000166: 	leaq	-0x4(,%rax,4), %rax
    0000016e: 	movq	%rax, 0xc0(%rsp)
    00000176: 	leal	-0x1(%r8), %eax
    0000017a: 	imull	%ebx, %eax
    0000017d: 	movl	%edi, %ebx
    0000017f: 	andl	$-0x4, %ebx
    00000182: 	movl	%ebx, 0x4c(%rsp)
    00000186: 	cltq
    00000188: 	addq	%rsi, %rax
    0000018b: 	leaq	-0x4(,%rax,4), %rax
    00000193: 	movq	%rax, 0xb8(%rsp)
    0000019b: 	leaq	(,%rdx,4), %rax
    000001a3: 	movq	%rax, 0x98(%rsp)
    000001ab: 	leal	-0x3(%r9), %eax
    000001af: 	subl	%ebx, %r9d
    000001b2: 	movl	%eax, 0x48(%rsp)
    000001b6: 	movl	%edi, %eax
    000001b8: 	andl	$0x3, %edi
    000001bb: 	shrl	$0x2, %eax
    000001be: 	movl	%edi, 0x64(%rsp)
    000001c2: 	movq	%rcx, %rdi
    000001c5: 	subl	$0x1, %eax
    000001c8: 	andq	$-0x4, %rdi
    000001cc: 	movl	%r9d, 0x68(%rsp)
    000001d1: 	notq	%rax
    000001d4: 	movq	%rdi, 0x88(%rsp)
    000001dc: 	shlq	$0x4, %rax
    000001e0: 	movq	%rax, 0x50(%rsp)
    000001e5: 	movq	%rsi, %rax
    000001e8: 	negq	%rax
    000001eb: 	shlq	$0x2, %rax
    000001ef: 	movq	%rax, 0x78(%rsp)
    000001f4: 	leaq	-0x1(%rcx), %rax
    000001f8: 	movq	%rax, 0x90(%rsp)
    00000200: 	movq	%rcx, %rax
    00000203: 	shrq	$0x2, %rax
    00000207: 	shlq	$0x4, %rax
    0000020b: 	movq	%rax, 0xa0(%rsp)
    00000213: 	leal	-0x2(%r9), %eax
    00000217: 	movl	%eax, 0x6c(%rsp)
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2176:
    00000220: 	movl	0x80(%rsp), %ecx
    00000227: 	testl	%ecx, %ecx
    00000229: 	jle	.Ltmp2156 # Offset: 553
    0000022f: 	movl	0x44(%rsp), %edx
    00000233: 	testl	%edx, %edx
    00000235: 	jle	.Ltmp2156 # Offset: 565
    0000023b: 	movq	0xa8(%rsp), %rax
    00000243: 	movl	0xc8(%rsp), %ecx
    0000024a: 	movss	DATAat0x49420(%rip), %xmm3
    00000252: 	movss	DATAat0x49430(%rip), %xmm2
    0000025a: 	movq	DATAat0x49420(%rip), %xmm7
    00000262: 	leaq	(%r15,%rax), %r12
    00000266: 	movq	0xb0(%rsp), %rax
    0000026e: 	leaq	(%r14,%rax), %rdi
    00000272: 	movq	0xc0(%rsp), %rax
    0000027a: 	leaq	(%r14,%rax), %rbx
    0000027e: 	movq	0xb8(%rsp), %rax
    00000286: 	movq	%rbx, %r9
    00000289: 	addq	%r14, %rax
    0000028c: 	movq	%rax, 0x10(%rsp)
    00000291: 	movq	0x98(%rsp), %rax
    00000299: 	leaq	(%r15,%rax), %r8
    0000029d: 	leaq	(%r14,%rax), %rbp
    000002a1: 	movl	0x80(%rsp), %eax
    000002a8: 	movl	%eax, 0x2c(%rsp)
    000002ac: 	movl	$0x4, %eax
    000002b1: 	subq	%r14, %rax
    000002b4: 	movq	%rax, 0x38(%rsp)
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp2162:
    000002c0: 	movl	0x30(%rsp), %ebx
    000002c4: 	movl	%ecx, %eax
    000002c6: 	movq	0x10(%rsp), %rsi
    000002cb: 	subl	$0x1, 0x2c(%rsp)
    000002d0: 	subl	%ebx, %eax
    000002d2: 	movl	%eax, 0xc(%rsp)
    000002d6: 	leal	(%rbx,%rcx), %eax
    000002d9: 	movq	%r12, %rbx
    000002dc: 	movl	%eax, 0x28(%rsp)
    000002e0: 	movq	0x38(%rsp), %rax
    000002e5: 	subq	%r15, %rbx
    000002e8: 	leaq	(%rax,%r9), %rdx
    000002ec: 	addq	%rsi, %rax
    000002ef: 	movq	%rax, 0x20(%rsp)
    000002f4: 	movq	%r12, %rax
    000002f7: 	subq	%r9, %rax
    000002fa: 	movq	%rdx, 0x18(%rsp)
    000002ff: 	addq	$0x8, %rax
    00000303: 	cmpq	$0x8, %rax
    00000307: 	movq	%r12, %rax
    0000030a: 	seta	%dl
    0000030d: 	subq	%rdi, %rax
    00000310: 	addq	$0x8, %rax
    00000314: 	cmpq	$0x10, %rax
    00000318: 	seta	%al
    0000031b: 	andl	%edx, %eax
    0000031d: 	cmpl	$0x3, 0x40(%rsp)
    00000322: 	setne	%dl
    00000325: 	testb	%dl, %al
    00000327: 	je	.Ltmp2157 # Offset: 807
    0000032d: 	movq	%r12, %rax
    00000330: 	subq	%rsi, %rax
    00000333: 	addq	$0x8, %rax
    00000337: 	cmpq	$0x8, %rax
    0000033b: 	jbe	.Ltmp2157 # Offset: 827
    00000341: 	cmpl	$0x2, 0x48(%rsp)
    00000346: 	jbe	.Ltmp2158 # Offset: 838
    0000034c: 	movl	%ecx, 0x34(%rsp)
    00000350: 	movq	0x50(%rsp), %rcx
    00000355: 	leaq	-0xc(%r12), %rdx
    0000035a: 	xorl	%eax, %eax
    0000035c: 	leaq	-0x8(%r9), %r11
    00000360: 	leaq	-0x8(%rdi), %r10
    00000364: 	pxor	%xmm4, %xmm4
    00000368: 	subq	$0x8, %rsi
    0000036c: 	nopl	(%rax) # Size: 4
.Ltmp2159:
    00000370: 	movups	(%r11,%rax), %xmm0
    00000375: 	movups	(%r10,%rax), %xmm11
    0000037a: 	movups	(%rdx,%rax), %xmm10
    0000037f: 	shufps	$0x1b, %xmm11, %xmm11
    00000384: 	shufps	$0x1b, %xmm0, %xmm0
    00000388: 	addps	%xmm11, %xmm0
    0000038c: 	movups	(%rdi,%rax), %xmm11
    00000391: 	shufps	$0x1b, %xmm10, %xmm10
    00000396: 	shufps	$0x1b, %xmm11, %xmm11
    0000039b: 	addps	%xmm11, %xmm0
    0000039f: 	movups	(%rsi,%rax), %xmm11
    000003a4: 	shufps	$0x1b, %xmm11, %xmm11
    000003a9: 	addps	%xmm11, %xmm0
    000003ad: 	addps	%xmm4, %xmm0
    000003b0: 	mulps	%xmm6, %xmm0
    000003b3: 	subps	%xmm10, %xmm0
    000003b7: 	mulps	%xmm5, %xmm0
    000003ba: 	addps	%xmm10, %xmm0
    000003be: 	shufps	$0x1b, %xmm0, %xmm0
    000003c2: 	movups	%xmm0, (%rdx,%rax)
    000003c6: 	subq	$0x10, %rax
    000003ca: 	cmpq	%rax, %rcx
    000003cd: 	jne	.Ltmp2159 # Offset: 973
    000003cf: 	movl	0x34(%rsp), %ecx
    000003d3: 	movl	0x4c(%rsp), %edx
    000003d7: 	cmpl	%edx, 0x44(%rsp)
    000003db: 	je	.Ltmp2160 # Offset: 987
    000003e1: 	cmpl	$0x3, 0x68(%rsp)
    000003e6: 	movl	0x6c(%rsp), %r11d
    000003eb: 	movl	0x64(%rsp), %eax
    000003ef: 	je	.Ltmp2161 # Offset: 1007
.Ltmp2178:
    000003f5: 	addl	$0x1, %edx
    000003f8: 	negq	%rdx
    000003fb: 	shlq	$0x2, %rdx
    000003ff: 	leaq	(%rbx,%rdx), %rsi
    00000403: 	leaq	0x4(%rbx,%rdx), %r10
    00000408: 	movq	0x18(%rsp), %rbx
    0000040d: 	addq	%r15, %rsi
    00000410: 	movq	-0x8(%r14,%r10), %xmm12
    00000417: 	movq	(%r14,%r10), %xmm11
    0000041d: 	movq	(%rsi), %xmm4
    00000421: 	addq	%r14, %rbx
    00000424: 	movq	0x20(%rsp), %r10
    00000429: 	shufps	$0xe1, %xmm12, %xmm12
    0000042e: 	shufps	$0xe1, %xmm11, %xmm11
    00000433: 	shufps	$0xe1, %xmm4, %xmm4
    00000437: 	addq	%r14, %r10
    0000043a: 	movaps	%xmm4, %xmm0
    0000043d: 	movq	(%rbx,%rdx), %xmm4
    00000442: 	movq	(%r10,%rdx), %xmm10
    00000448: 	movl	%r11d, %edx
    0000044b: 	andl	$-0x2, %edx
    0000044e: 	shufps	$0xe1, %xmm4, %xmm4
    00000452: 	shufps	$0xe1, %xmm10, %xmm10
    00000457: 	subl	%edx, %eax
    00000459: 	addps	%xmm12, %xmm4
    0000045d: 	addps	%xmm11, %xmm4
    00000461: 	addps	%xmm10, %xmm4
    00000465: 	xorps	%xmm10, %xmm10
    00000469: 	addps	%xmm10, %xmm4
    0000046d: 	movq	DATAat0x49430(%rip), %xmm10
    00000476: 	mulps	%xmm7, %xmm4
    00000479: 	subps	%xmm0, %xmm4
    0000047c: 	mulps	%xmm10, %xmm4
    00000480: 	addps	%xmm0, %xmm4
    00000483: 	shufps	$0xe1, %xmm4, %xmm4
    00000487: 	movlps	%xmm4, (%rsi)
    0000048a: 	cmpl	%edx, %r11d
    0000048d: 	je	.Ltmp2160 # Offset: 1165
.Ltmp2161:
    0000048f: 	movl	0xc(%rsp), %esi
    00000493: 	leal	(%rcx,%rax), %edx
    00000496: 	movslq	%edx, %rdx
    00000499: 	addl	%eax, %esi
    0000049b: 	leaq	(%r15,%rdx,4), %rdx
    0000049f: 	movslq	%esi, %rsi
    000004a2: 	movss	(%rdx), %xmm4
    000004a6: 	movss	(%r14,%rsi,4), %xmm0
    000004ac: 	leal	-0x1(%rcx,%rax), %esi
    000004b0: 	movslq	%esi, %rsi
    000004b3: 	addss	(%r14,%rsi,4), %xmm0
    000004b9: 	leal	0x1(%rcx,%rax), %esi
    000004bd: 	addl	0x28(%rsp), %eax
    000004c1: 	movslq	%esi, %rsi
    000004c4: 	cltq
    000004c6: 	addss	(%r14,%rsi,4), %xmm0
    000004cc: 	addss	(%r14,%rax,4), %xmm0
    000004d2: 	addss	%xmm1, %xmm0
    000004d6: 	mulss	%xmm3, %xmm0
    000004da: 	subss	%xmm4, %xmm0
    000004de: 	mulss	%xmm2, %xmm0
    000004e2: 	addss	%xmm4, %xmm0
    000004e6: 	movss	%xmm0, (%rdx)
.Ltmp2160:
    000004ea: 	movl	0x2c(%rsp), %eax
    000004ee: 	addq	%r13, 0x10(%rsp)
    000004f3: 	addq	%r13, %r12
    000004f6: 	addq	%r13, %rdi
    000004f9: 	addq	%r13, %r9
    000004fc: 	subl	0x30(%rsp), %ecx
    00000500: 	addq	%r13, %r8
    00000503: 	addq	%r13, %rbp
    00000506: 	testl	%eax, %eax
    00000508: 	jne	.Ltmp2162 # Offset: 1288
.Ltmp2156:
    0000050e: 	cmpq	$0x0, 0x58(%rsp)
    00000514: 	je	.Ltmp2163 # Offset: 1300
    0000051a: 	cmpq	$0x2, 0x90(%rsp)
    00000523: 	jbe	.Ltmp2164 # Offset: 1315
    00000529: 	movaps	DATAat0x494b0(%rip), %xmm7
    00000530: 	xorl	%eax, %eax
    00000532: 	movaps	%xmm1, %xmm2
    00000535: 	pxor	%xmm4, %xmm4
    00000539: 	movq	0xa0(%rsp), %rdx
    00000541: 	nopl	(%rax) # Size: 7
.Ltmp2165:
    00000548: 	movups	(%r15,%rax), %xmm0
    0000054d: 	movups	(%r14,%rax), %xmm3
    00000552: 	addq	$0x10, %rax
    00000556: 	subps	%xmm0, %xmm3
    00000559: 	movaps	%xmm3, %xmm0
    0000055c: 	movaps	%xmm3, %xmm10
    00000560: 	cmpltps	%xmm4, %xmm0
    00000564: 	xorps	%xmm7, %xmm10
    00000568: 	andps	%xmm0, %xmm10
    0000056c: 	andnps	%xmm3, %xmm0
    0000056f: 	orps	%xmm10, %xmm0
    00000573: 	addss	%xmm0, %xmm2
    00000577: 	movaps	%xmm0, %xmm3
    0000057a: 	shufps	$0x55, %xmm0, %xmm3
    0000057e: 	addss	%xmm2, %xmm3
    00000582: 	movaps	%xmm0, %xmm2
    00000585: 	unpckhps	%xmm0, %xmm2
    00000588: 	shufps	$0xff, %xmm0, %xmm0
    0000058c: 	addss	%xmm3, %xmm2
    00000590: 	addss	%xmm0, %xmm2
    00000594: 	cmpq	%rax, %rdx
    00000597: 	jne	.Ltmp2165 # Offset: 1431
    00000599: 	movq	0x88(%rsp), %rax
    000005a1: 	cmpq	%rax, 0x58(%rsp)
    000005a6: 	je	.Ltmp2166 # Offset: 1446
.Ltmp2180:
    000005a8: 	movss	(%r14,%rax,4), %xmm0
    000005ae: 	subss	(%r15,%rax,4), %xmm0
    000005b4: 	leaq	(,%rax,4), %rdx
    000005bc: 	comiss	%xmm0, %xmm1
    000005bf: 	jbe	.Ltmp2167 # Offset: 1471
    000005c1: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2167:
    000005c8: 	addss	%xmm0, %xmm2
    000005cc: 	leaq	0x1(%rax), %rcx
    000005d0: 	cmpq	%rcx, 0x58(%rsp)
    000005d5: 	jbe	.Ltmp2166 # Offset: 1493
    000005d7: 	movss	0x4(%r14,%rdx), %xmm0
    000005de: 	subss	0x4(%r15,%rdx), %xmm0
    000005e5: 	comiss	%xmm0, %xmm1
    000005e8: 	jbe	.Ltmp2168 # Offset: 1512
    000005ea: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2168:
    000005f1: 	addss	%xmm0, %xmm2
    000005f5: 	addq	$0x2, %rax
    000005f9: 	cmpq	%rax, 0x58(%rsp)
    000005fe: 	jbe	.Ltmp2166 # Offset: 1534
    00000600: 	movss	0x8(%r14,%rdx), %xmm0
    00000607: 	subss	0x8(%r15,%rdx), %xmm0
    0000060e: 	comiss	%xmm0, %xmm1
    00000611: 	jbe	.Ltmp2169 # Offset: 1553
    00000613: 	xorps	%xmm9, %xmm0
.Ltmp2169:
    00000617: 	addss	%xmm0, %xmm2
.Ltmp2166:
    0000061b: 	movq	0x58(%rsp), %rdx
    00000620: 	movaps	%xmm1, %xmm3
    00000623: 	xorl	%eax, %eax
    00000625: 	nopl	(%rax) # Size: 3
.Ltmp2171:
    00000628: 	movss	(%r14,%rax,4), %xmm0
    0000062e: 	subss	(%r15,%rax,4), %xmm0
    00000634: 	comiss	%xmm0, %xmm1
    00000637: 	jbe	.Ltmp2170 # Offset: 1591
    00000639: 	xorps	%xmm8, %xmm0
.Ltmp2170:
    0000063d: 	maxss	%xmm3, %xmm0
    00000641: 	addq	$0x1, %rax
    00000645: 	movaps	%xmm0, %xmm3
    00000648: 	cmpq	%rax, %rdx
    0000064b: 	jne	.Ltmp2171 # Offset: 1611
    0000064d: 	movl	0x60(%rsp), %eax
    00000651: 	cmpl	%eax, 0x140(%rsp)
    00000658: 	jge	.Ltmp2172 # Offset: 1624
    0000065a: 	movss	DATAat0x49548(%rip), %xmm0
    00000662: 	comiss	%xmm2, %xmm0
    00000665: 	ja	.Ltmp2173 # Offset: 1637
    0000066b: 	ucomiss	%xmm2, %xmm2
    0000066e: 	jp	.Ltmp2174 # Offset: 1646
    00000674: 	movss	DATAat0x4954c(%rip), %xmm0
    0000067c: 	comiss	%xmm3, %xmm0
    0000067f: 	ja	.Ltmp2175 # Offset: 1663
    00000685: 	ucomiss	%xmm3, %xmm3
    00000688: 	jp	.Ltmp2174 # Offset: 1672
.Ltmp2172:
    0000068e: 	addl	$0x1, 0x60(%rsp)
    00000693: 	movq	%r15, %rax
    00000696: 	movl	0x60(%rsp), %edi
    0000069a: 	movq	%r14, %r15
    0000069d: 	cmpl	0x84(%rsp), %edi
    000006a4: 	je	.Ltmp2173 # Offset: 1700
    000006aa: 	movq	%rax, %r14
    000006ad: 	jmp	.Ltmp2176 # Offset: 1709
    000006b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2157:
    000006b8: 	movq	0x78(%rsp), %rax
    000006bd: 	leaq	0x4(%rax), %rdx
    000006c1: 	movq	0x70(%rsp), %rax
    000006c6: 	leaq	(%rdx,%r9), %rsi
    000006ca: 	addq	0x10(%rsp), %rdx
    000006cf: 	nop # Size: 1
.Ltmp2177:
    000006d0: 	movss	(%rsi,%rax,4), %xmm4
    000006d5: 	addss	-0x4(%rbp,%rax,4), %xmm4
    000006db: 	movss	0x4(%rbp,%rax,4), %xmm0
    000006e1: 	movss	(%r8,%rax,4), %xmm10
    000006e7: 	addss	%xmm4, %xmm0
    000006eb: 	addss	(%rdx,%rax,4), %xmm0
    000006f0: 	addss	%xmm1, %xmm0
    000006f4: 	mulss	%xmm3, %xmm0
    000006f8: 	subss	%xmm10, %xmm0
    000006fd: 	mulss	%xmm2, %xmm0
    00000701: 	addss	%xmm10, %xmm0
    00000706: 	movss	%xmm0, (%r8,%rax,4)
    0000070c: 	subq	$0x1, %rax
    00000710: 	testl	%eax, %eax
    00000712: 	jg	.Ltmp2177 # Offset: 1810
    00000714: 	jmp	.Ltmp2160 # Offset: 1812
.Ltmp2158:
    00000719: 	movl	0x44(%rsp), %eax
    0000071d: 	xorl	%edx, %edx
    0000071f: 	movl	%eax, %r11d
    00000722: 	jmp	.Ltmp2178 # Offset: 1826
.Ltmp2163:
    00000727: 	movl	0x60(%rsp), %eax
    0000072b: 	movaps	%xmm1, %xmm3
    0000072e: 	cmpl	%eax, 0x140(%rsp)
    00000735: 	jl	.Ltmp2179 # Offset: 1845
    00000737: 	movaps	%xmm1, %xmm2
    0000073a: 	jmp	.Ltmp2172 # Offset: 1850
.Ltmp2164:
    0000073f: 	movaps	%xmm1, %xmm2
    00000742: 	xorl	%eax, %eax
    00000744: 	jmp	.Ltmp2180 # Offset: 1860
.Ltmp2179:
    00000749: 	movaps	%xmm3, %xmm2
.Ltmp2173:
    0000074c: 	ucomiss	%xmm2, %xmm2
    0000074f: 	setp	%r12b
    00000753: 	ucomiss	%xmm3, %xmm3
    00000756: 	setp	%al
    00000759: 	orl	%eax, %r12d
.Ltmp2186:
    0000075c: 	movss	%xmm3, 0x28(%rsp)
    00000762: 	movss	%xmm2, 0xc(%rsp)
    00000768: 	callq	clock@PLT # Offset: 1896
    0000076d: 	movl	0xcc(%rsp), %edi
    00000774: 	pxor	%xmm0, %xmm0
    00000778: 	movss	0xdc(%rsp), %xmm7
    00000781: 	movq	%rax, end_time(%rip)
    00000788: 	subq	start_time(%rip), %rax
    0000078f: 	cvtsi2sd	%rax, %xmm0
    00000794: 	movl	%edi, %eax
    00000796: 	divsd	DATAat0x49520(%rip), %xmm0
    0000079e: 	movss	0xc(%rsp), %xmm2
    000007a4: 	shrl	$0x1f, %eax
    000007a7: 	movss	0x28(%rsp), %xmm3
    000007ad: 	movq	%xmm0, %rbx
    000007b2: 	addl	%edi, %eax
    000007b4: 	movl	0x40(%rsp), %edi
    000007b8: 	sarl	%eax
    000007ba: 	movl	%edi, %edx
    000007bc: 	imull	%edi, %eax
    000007bf: 	shrl	$0x1f, %edx
    000007c2: 	addl	%edi, %edx
    000007c4: 	sarl	%edx
    000007c6: 	addl	%edx, %eax
    000007c8: 	testb	%r12b, %r12b
    000007cb: 	cltq
    000007cd: 	subss	(%r15,%rax,4), %xmm7
    000007d3: 	movq	0xd0(%rsp), %rax
    000007db: 	movq	0x8(%rax), %rdx
    000007df: 	movq	(%rax), %rsi
    000007e2: 	movd	%xmm7, %ebp
    000007e6: 	jne	.Ltmp2181 # Offset: 2022
    000007ec: 	movl	0x60(%rsp), %eax
    000007f0: 	cmpl	%eax, iterations(%rip)
    000007f6: 	jg	.Ltmp2182 # Offset: 2038
    000007f8: 	comiss	DATAat0x49548(%rip), %xmm2
    000007ff: 	jbe	.Ltmp2182 # Offset: 2047
    00000801: 	comiss	DATAat0x4954c(%rip), %xmm3
    00000808: 	ja	.Ltmp2183 # Offset: 2056
.Ltmp2182:
    0000080e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000815: 	movss	%xmm3, 0x28(%rsp)
    0000081b: 	movq	%r12, %rdi
    0000081e: 	movss	%xmm2, 0xc(%rsp)
    00000824: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2084
    00000829: 	movl	$0xa, %edx
    0000082e: 	leaq	DATAat0x491ab(%rip), %rsi
    00000835: 	movq	%rax, %rdi
    00000838: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2104
    0000083d: 	movss	0x28(%rsp), %xmm3
    00000843: 	movss	0xc(%rsp), %xmm2
.Ltmp2185:
    00000849: 	movl	$0x4, %edx
    0000084e: 	movq	%r12, %rdi
    00000851: 	leaq	DATAat0x491b6(%rip), %rsi
    00000858: 	movss	%xmm3, 0x28(%rsp)
    0000085e: 	movss	%xmm2, 0xc(%rsp)
    00000864: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2148
    00000869: 	movl	0x60(%rsp), %esi
    0000086d: 	movq	%r12, %rdi
    00000870: 	callq	_ZNSolsEi@PLT # Offset: 2160
    00000875: 	movl	$0xb, %edx
    0000087a: 	leaq	DATAat0x491bb(%rip), %rsi
    00000881: 	movq	%rax, %rdi
    00000884: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2180
    00000889: 	movl	$0xa, %edx
    0000088e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000895: 	movq	%r12, %rdi
    00000898: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2200
    0000089d: 	movss	0xc(%rsp), %xmm2
    000008a3: 	movq	%r12, %rdi
    000008a6: 	pxor	%xmm0, %xmm0
    000008aa: 	cvtss2sd	%xmm2, %xmm0
    000008ae: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2222
    000008b3: 	movl	$0x7, %edx
    000008b8: 	leaq	DATAat0x491d2(%rip), %rsi
    000008bf: 	movq	%rax, %rdi
    000008c2: 	movq	%rax, %r12
    000008c5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2245
    000008ca: 	movss	0x28(%rsp), %xmm3
    000008d0: 	movq	%r12, %rdi
    000008d3: 	pxor	%xmm0, %xmm0
    000008d7: 	cvtss2sd	%xmm3, %xmm0
    000008db: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2267
    000008e0: 	movl	$0x10, %edx
    000008e5: 	leaq	DATAat0x491da(%rip), %rsi
    000008ec: 	movq	%rax, %r12
    000008ef: 	movq	%rax, %rdi
    000008f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2290
    000008f7: 	movd	%ebp, %xmm7
    000008fb: 	movq	%r12, %rdi
    000008fe: 	pxor	%xmm0, %xmm0
    00000902: 	cvtss2sd	%xmm7, %xmm0
    00000906: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2310
    0000090b: 	movl	$0x8, %edx
    00000910: 	leaq	DATAat0x491eb(%rip), %rsi
    00000917: 	movq	%rax, %rbp
    0000091a: 	movq	%rax, %rdi
    0000091d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2333
    00000922: 	movq	%rbx, %xmm0
    00000927: 	movq	%rbp, %rdi
    0000092a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2346
    0000092f: 	movl	$0x2, %edx
    00000934: 	leaq	DATAat0x491f4(%rip), %rsi
    0000093b: 	movq	%rax, %rdi
    0000093e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2366
    00000943: 	movl	0xd8(%rsp), %eax
    0000094a: 	movl	%eax, iterations(%rip)
    00000950: 	movq	0xf8(%rsp), %rax
    00000958: 	subq	%fs:0x28, %rax
    00000961: 	jne	.Ltmp2184 # Offset: 2401
    00000967: 	addq	$0x108, %rsp
    0000096e: 	popq	%rbx
    0000096f: 	popq	%rbp
    00000970: 	popq	%r12
    00000972: 	popq	%r13
    00000974: 	popq	%r14
    00000976: 	popq	%r15
    00000978: 	retq # Offset: 2424
.Ltmp2181:
    00000979: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000980: 	movq	%r12, %rdi
    00000983: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2435
    00000988: 	movl	$0x10, %edx
    0000098d: 	leaq	DATAat0x493d4(%rip), %rsi
    00000994: 	movq	%rax, %rdi
    00000997: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2455
    0000099c: 	movss	0xc(%rsp), %xmm2
    000009a2: 	movss	0x28(%rsp), %xmm3
    000009a8: 	jmp	.Ltmp2185 # Offset: 2472
.Ltmp2174:
    000009ad: 	movl	$0x1, %r12d
    000009b3: 	jmp	.Ltmp2186 # Offset: 2483
.Ltmp2183:
    000009b8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000009bf: 	movss	%xmm3, 0x28(%rsp)
    000009c5: 	movq	%r12, %rdi
    000009c8: 	movss	%xmm2, 0xc(%rsp)
    000009ce: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2510
    000009d3: 	movl	$0x11, %edx
    000009d8: 	leaq	DATAat0x49199(%rip), %rsi
    000009df: 	movq	%rax, %rdi
    000009e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2530
    000009e7: 	movss	0xc(%rsp), %xmm2
    000009ed: 	movss	0x28(%rsp), %xmm3
    000009f3: 	jmp	.Ltmp2185 # Offset: 2547
.Ltmp2175:
    000009f8: 	ucomiss	%xmm3, %xmm3
    000009fb: 	setp	%r12b
    000009ff: 	jmp	.Ltmp2186 # Offset: 2559
.Ltmp2155:
    00000a04: 	pxor	%xmm3, %xmm3
    00000a08: 	movl	$0x0, 0x60(%rsp)
    00000a10: 	xorl	%r12d, %r12d
    00000a13: 	movaps	%xmm3, %xmm2
    00000a16: 	jmp	.Ltmp2186 # Offset: 2582
.Ltmp2184:
    00000a1b: 	callq	__stack_chk_fail@PLT # Offset: 2587
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff21jacobi_sor2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x354b0
  Size        : 0x9f4
  MaxSize     : 0xa00
  Offset      : 0x354b0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff22jacobi_sor2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	movl	%ebx, %esi
    00000018: 	imull	%r14d, %ebx
    0000001c: 	subq	$0xe8, %rsp
    00000023: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002a: 	movl	%edx, 0xac(%rsp)
    00000031: 	movl	%r14d, %edx
    00000034: 	movl	%ecx, 0x34(%rsp)
    00000038: 	leaq	0xc0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x30(%rsp)
    00000045: 	movq	%r9, 0xb0(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xd8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movq	%rdi, 0x8(%rsp)
    00000065: 	movaps	%xmm0, 0xc0(%rsp)
    0000006d: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 109
    00000072: 	testl	%ebx, %ebx
    00000074: 	movq	0x8(%rsp), %r10
    00000079: 	movss	%xmm0, 0xbc(%rsp)
    00000082: 	jle	.Ltmp2187 # Offset: 130
    00000084: 	movslq	%ebx, %rdx
    00000087: 	movq	%r10, %rsi
    0000008a: 	movq	%r15, %rdi
    0000008d: 	shlq	$0x2, %rdx
    00000091: 	callq	memmove@PLT # Offset: 145
    00000096: 	movq	0x8(%rsp), %r10
.Ltmp2187:
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	movq	%r10, 0x8(%rsp)
    000000a6: 	movl	$0x2710, iterations(%rip)
    000000b0: 	movl	%eax, 0xb8(%rsp)
    000000b7: 	callq	clock@PLT # Offset: 183
    000000bc: 	movq	%rax, start_time(%rip)
    000000c3: 	movl	iterations(%rip), %eax
    000000c9: 	movl	%eax, 0xa8(%rsp)
    000000d0: 	testl	%eax, %eax
    000000d2: 	jle	.Ltmp2188 # Offset: 210
    000000d8: 	movl	0xac(%rsp), %eax
    000000df: 	movl	0x34(%rsp), %edx
    000000e3: 	movslq	%ebx, %rcx
    000000e6: 	movl	$0x0, 0x58(%rsp)
    000000ee: 	movq	%rcx, 0x50(%rsp)
    000000f3: 	movq	0x8(%rsp), %r10
    000000f8: 	pxor	%xmm1, %xmm1
    000000fc: 	movss	DATAat0x494c0(%rip), %xmm9
    00000105: 	subl	$0x1, %eax
    00000108: 	leal	-0x2(%rdx), %esi
    0000010b: 	movaps	DATAat0x49420(%rip), %xmm6
    00000112: 	movq	%r15, %r11
    00000115: 	movl	%eax, 0x2c(%rsp)
    00000119: 	movslq	0x30(%rsp), %rax
    0000011e: 	movaps	%xmm9, %xmm10
    00000122: 	movl	%esi, 0x3c(%rsp)
    00000126: 	movslq	%esi, %rsi
    00000129: 	movaps	DATAat0x49430(%rip), %xmm5
    00000130: 	movq	%rax, %rdi
    00000133: 	leaq	(,%rax,4), %r14
    0000013b: 	addq	%rsi, %rax
    0000013e: 	movq	%rsi, %rbx
    00000141: 	shlq	$0x2, %rax
    00000145: 	andl	$0x3, %ebx
    00000148: 	movq	%rsi, 0x68(%rsp)
    0000014d: 	movq	%rax, 0x88(%rsp)
    00000155: 	subq	$0x8, %rax
    00000159: 	movq	%rax, 0x90(%rsp)
    00000161: 	leaq	-0x4(,%rsi,4), %rax
    00000169: 	movq	%rax, 0x98(%rsp)
    00000171: 	leal	(%rdi,%rdi), %eax
    00000174: 	movl	%eax, 0x38(%rsp)
    00000178: 	cltq
    0000017a: 	addq	%rsi, %rax
    0000017d: 	movl	%ebx, 0x5c(%rsp)
    00000181: 	movq	%rcx, %rbx
    00000184: 	leaq	-0xc(,%rax,4), %rax
    0000018c: 	andq	$-0x4, %rbx
    00000190: 	movq	%rax, 0xa0(%rsp)
    00000198: 	leal	-0x3(%rdx), %eax
    0000019b: 	movl	%eax, 0x40(%rsp)
    0000019f: 	movl	%esi, %eax
    000001a1: 	andl	$-0x4, %esi
    000001a4: 	shrl	$0x2, %eax
    000001a7: 	subl	%esi, %edx
    000001a9: 	movl	%esi, 0x44(%rsp)
    000001ad: 	subl	$0x1, %eax
    000001b0: 	movq	%rbx, 0x70(%rsp)
    000001b5: 	notq	%rax
    000001b8: 	movl	%edx, 0x60(%rsp)
    000001bc: 	shlq	$0x4, %rax
    000001c0: 	movq	%rax, 0x48(%rsp)
    000001c5: 	leaq	-0x1(%rcx), %rax
    000001c9: 	movq	%rax, 0x78(%rsp)
    000001ce: 	movq	%rcx, %rax
    000001d1: 	shrq	$0x2, %rax
    000001d5: 	shlq	$0x4, %rax
    000001d9: 	movq	%rax, 0x80(%rsp)
    000001e1: 	leal	-0x2(%rdx), %eax
    000001e4: 	movl	%eax, 0x64(%rsp)
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2209:
    000001f0: 	cmpl	$0x1, 0x2c(%rsp)
    000001f5: 	jle	.Ltmp2189 # Offset: 501
    000001fb: 	movl	0x3c(%rsp), %eax
    000001ff: 	testl	%eax, %eax
    00000201: 	jle	.Ltmp2189 # Offset: 513
    00000207: 	movq	0x90(%rsp), %rax
    0000020f: 	movl	$0x1, 0x1c(%rsp)
    00000217: 	leaq	(%r11,%r14), %rbx
    0000021b: 	leaq	(%r10,%r14), %rsi
    0000021f: 	movl	0x30(%rsp), %r15d
    00000224: 	movss	DATAat0x49420(%rip), %xmm3
    0000022c: 	leaq	(%r10,%rax), %r8
    00000230: 	movq	0x98(%rsp), %rax
    00000238: 	movss	DATAat0x49430(%rip), %xmm2
    00000240: 	movq	DATAat0x49420(%rip), %xmm8
    00000249: 	movq	DATAat0x49430(%rip), %xmm7
    00000251: 	addq	%r10, %rax
    00000254: 	movq	%rax, 0x20(%rsp)
    00000259: 	movq	0xa0(%rsp), %rax
    00000261: 	leaq	(%r10,%rax), %r9
    00000265: 	movq	0x88(%rsp), %rax
    0000026d: 	movq	%rax, 0x8(%rsp)
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2195:
    00000278: 	movq	0x8(%rsp), %rdi
    0000027d: 	movl	0x38(%rsp), %eax
    00000281: 	movl	%r15d, %edx
    00000284: 	movl	%r15d, %ecx
    00000287: 	subl	0x30(%rsp), %edx
    0000028b: 	movq	0x20(%rsp), %r13
    00000290: 	movq	%rdi, %rbp
    00000293: 	leal	(%rax,%rdx), %r15d
    00000297: 	movq	%rdi, %r12
    0000029a: 	addl	$0x1, 0x1c(%rsp)
    0000029f: 	leaq	(%rdi,%r11), %rax
    000002a3: 	addq	%r14, %rdi
    000002a6: 	subq	%r14, %rbp
    000002a9: 	movq	%rdi, 0x8(%rsp)
    000002ae: 	movq	%rax, %rdi
    000002b1: 	subq	%r13, %rdi
    000002b4: 	movq	%rbp, 0x10(%rsp)
    000002b9: 	addq	$0x8, %rdi
    000002bd: 	cmpq	$0x8, %rdi
    000002c1: 	movq	%rax, %rdi
    000002c4: 	seta	%bpl
    000002c8: 	subq	%r8, %rdi
    000002cb: 	addq	$0x8, %rdi
    000002cf: 	cmpq	$0x10, %rdi
    000002d3: 	seta	%dil
    000002d7: 	andl	%ebp, %edi
    000002d9: 	cmpl	$0x3, 0x34(%rsp)
    000002de: 	setne	%bpl
    000002e2: 	testb	%bpl, %dil
    000002e5: 	je	.Ltmp2190 # Offset: 741
    000002eb: 	subq	%r9, %rax
    000002ee: 	cmpq	$0x8, %rax
    000002f2: 	jbe	.Ltmp2190 # Offset: 754
    000002f8: 	cmpl	$0x2, 0x40(%rsp)
    000002fd: 	jbe	.Ltmp2191 # Offset: 765
    00000303: 	movl	%edx, 0x28(%rsp)
    00000307: 	movq	0x48(%rsp), %rdx
    0000030c: 	leaq	-0xc(%r11,%r12), %rdi
    00000311: 	xorl	%eax, %eax
    00000313: 	subq	$0x8, %r13
    00000317: 	leaq	-0x8(%r8), %rbp
    0000031b: 	pxor	%xmm4, %xmm4
    0000031f: 	nop # Size: 1
.Ltmp2192:
    00000320: 	movups	(%r13,%rax), %xmm0
    00000326: 	movups	(%rbp,%rax), %xmm12
    0000032c: 	movups	(%rdi,%rax), %xmm11
    00000331: 	shufps	$0x1b, %xmm12, %xmm12
    00000336: 	shufps	$0x1b, %xmm0, %xmm0
    0000033a: 	addps	%xmm12, %xmm0
    0000033e: 	movups	(%r8,%rax), %xmm12
    00000343: 	shufps	$0x1b, %xmm11, %xmm11
    00000348: 	shufps	$0x1b, %xmm12, %xmm12
    0000034d: 	addps	%xmm12, %xmm0
    00000351: 	movups	(%r9,%rax), %xmm12
    00000356: 	shufps	$0x1b, %xmm12, %xmm12
    0000035b: 	addps	%xmm12, %xmm0
    0000035f: 	addps	%xmm4, %xmm0
    00000362: 	mulps	%xmm6, %xmm0
    00000365: 	subps	%xmm11, %xmm0
    00000369: 	mulps	%xmm5, %xmm0
    0000036c: 	addps	%xmm11, %xmm0
    00000370: 	shufps	$0x1b, %xmm0, %xmm0
    00000374: 	movups	%xmm0, (%rdi,%rax)
    00000378: 	subq	$0x10, %rax
    0000037c: 	cmpq	%rax, %rdx
    0000037f: 	jne	.Ltmp2192 # Offset: 895
    00000381: 	movl	0x28(%rsp), %edx
    00000385: 	movl	0x44(%rsp), %eax
    00000389: 	leaq	(%rsi,%r14), %rdi
    0000038d: 	cmpl	%eax, 0x3c(%rsp)
    00000391: 	je	.Ltmp2193 # Offset: 913
    00000397: 	cmpl	$0x3, 0x60(%rsp)
    0000039c: 	movl	0x64(%rsp), %r13d
    000003a1: 	je	.Ltmp2194 # Offset: 929
    000003a7: 	movl	%eax, %edi
    000003a9: 	movl	0x5c(%rsp), %eax
    000003ad: 	movl	%eax, 0x28(%rsp)
.Ltmp2211:
    000003b1: 	addl	$0x1, %edi
    000003b4: 	movq	0x10(%rsp), %rax
    000003b9: 	negq	%rdi
    000003bc: 	shlq	$0x2, %rdi
    000003c0: 	addq	%r10, %rax
    000003c3: 	leaq	(%rdi,%r12), %rbp
    000003c7: 	leaq	0x4(%r12,%rdi), %r12
    000003cc: 	addq	%r11, %rbp
    000003cf: 	movq	-0x8(%r10,%r12), %xmm13
    000003d6: 	movq	(%r10,%r12), %xmm12
    000003dc: 	movq	(%rbp), %xmm4
    000003e1: 	shufps	$0xe1, %xmm13, %xmm13
    000003e6: 	shufps	$0xe1, %xmm12, %xmm12
    000003eb: 	shufps	$0xe1, %xmm4, %xmm4
    000003ef: 	movaps	%xmm4, %xmm0
    000003f2: 	movq	(%rax,%rdi), %xmm4
    000003f7: 	movq	0x8(%rsp), %rax
    000003fc: 	shufps	$0xe1, %xmm4, %xmm4
    00000400: 	leaq	(%r10,%rax), %r12
    00000404: 	movl	0x28(%rsp), %eax
    00000408: 	addps	%xmm13, %xmm4
    0000040c: 	movq	(%r12,%rdi), %xmm11
    00000412: 	leaq	(%rsi,%r14), %rdi
    00000416: 	shufps	$0xe1, %xmm11, %xmm11
    0000041b: 	addps	%xmm12, %xmm4
    0000041f: 	addps	%xmm11, %xmm4
    00000423: 	xorps	%xmm11, %xmm11
    00000427: 	addps	%xmm11, %xmm4
    0000042b: 	mulps	%xmm8, %xmm4
    0000042f: 	subps	%xmm0, %xmm4
    00000432: 	mulps	%xmm7, %xmm4
    00000435: 	addps	%xmm0, %xmm4
    00000438: 	shufps	$0xe1, %xmm4, %xmm4
    0000043c: 	movlps	%xmm4, (%rbp)
    00000440: 	movl	%r13d, %ebp
    00000443: 	andl	$-0x2, %ebp
    00000446: 	subl	%ebp, %eax
    00000448: 	cmpl	%r13d, %ebp
    0000044b: 	je	.Ltmp2193 # Offset: 1099
.Ltmp2212:
    0000044d: 	addl	%eax, %edx
    0000044f: 	leal	(%rcx,%rax), %edi
    00000452: 	movslq	%edx, %rdx
    00000455: 	movslq	%edi, %rdi
    00000458: 	movss	(%r10,%rdx,4), %xmm0
    0000045e: 	leal	-0x1(%rcx,%rax), %edx
    00000462: 	leaq	(%r11,%rdi,4), %rdi
    00000466: 	movslq	%edx, %rdx
    00000469: 	movss	(%rdi), %xmm4
    0000046d: 	addss	(%r10,%rdx,4), %xmm0
    00000473: 	leal	0x1(%rcx,%rax), %edx
    00000477: 	addl	%r15d, %eax
    0000047a: 	movslq	%edx, %rdx
    0000047d: 	cltq
    0000047f: 	addss	(%r10,%rdx,4), %xmm0
    00000485: 	addss	(%r10,%rax,4), %xmm0
    0000048b: 	addss	%xmm1, %xmm0
    0000048f: 	mulss	%xmm3, %xmm0
    00000493: 	subss	%xmm4, %xmm0
    00000497: 	mulss	%xmm2, %xmm0
    0000049b: 	addss	%xmm4, %xmm0
    0000049f: 	movss	%xmm0, (%rdi)
    000004a3: 	leaq	(%rsi,%r14), %rdi
.Ltmp2193:
    000004a7: 	addq	%r14, 0x20(%rsp)
    000004ac: 	movl	0x1c(%rsp), %ecx
    000004b0: 	addq	%r14, %r8
    000004b3: 	addq	%r14, %rbx
    000004b6: 	movq	%rdi, %rsi
    000004b9: 	addq	%r14, %r9
    000004bc: 	cmpl	%ecx, 0x2c(%rsp)
    000004c0: 	jne	.Ltmp2195 # Offset: 1216
.Ltmp2189:
    000004c6: 	cmpq	$0x0, 0x50(%rsp)
    000004cc: 	je	.Ltmp2196 # Offset: 1228
    000004d2: 	cmpq	$0x2, 0x78(%rsp)
    000004d8: 	jbe	.Ltmp2197 # Offset: 1240
    000004de: 	movaps	DATAat0x494b0(%rip), %xmm7
    000004e5: 	xorl	%eax, %eax
    000004e7: 	movaps	%xmm1, %xmm2
    000004ea: 	pxor	%xmm4, %xmm4
    000004ee: 	movq	0x80(%rsp), %rdx
    000004f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2198:
    00000500: 	movups	(%r11,%rax), %xmm0
    00000505: 	movups	(%r10,%rax), %xmm3
    0000050a: 	addq	$0x10, %rax
    0000050e: 	subps	%xmm0, %xmm3
    00000511: 	movaps	%xmm3, %xmm0
    00000514: 	movaps	%xmm3, %xmm8
    00000518: 	cmpltps	%xmm4, %xmm0
    0000051c: 	xorps	%xmm7, %xmm8
    00000520: 	andps	%xmm0, %xmm8
    00000524: 	andnps	%xmm3, %xmm0
    00000527: 	orps	%xmm8, %xmm0
    0000052b: 	addss	%xmm0, %xmm2
    0000052f: 	movaps	%xmm0, %xmm3
    00000532: 	shufps	$0x55, %xmm0, %xmm3
    00000536: 	addss	%xmm2, %xmm3
    0000053a: 	movaps	%xmm0, %xmm2
    0000053d: 	unpckhps	%xmm0, %xmm2
    00000540: 	shufps	$0xff, %xmm0, %xmm0
    00000544: 	addss	%xmm3, %xmm2
    00000548: 	addss	%xmm0, %xmm2
    0000054c: 	cmpq	%rax, %rdx
    0000054f: 	jne	.Ltmp2198 # Offset: 1359
    00000551: 	movq	0x70(%rsp), %rax
    00000556: 	cmpq	%rax, 0x50(%rsp)
    0000055b: 	je	.Ltmp2199 # Offset: 1371
.Ltmp2214:
    0000055d: 	movss	(%r10,%rax,4), %xmm0
    00000563: 	subss	(%r11,%rax,4), %xmm0
    00000569: 	leaq	(,%rax,4), %rdx
    00000571: 	comiss	%xmm0, %xmm1
    00000574: 	jbe	.Ltmp2200 # Offset: 1396
    00000576: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2200:
    0000057d: 	addss	%xmm0, %xmm2
    00000581: 	leaq	0x1(%rax), %rcx
    00000585: 	cmpq	%rcx, 0x50(%rsp)
    0000058a: 	jbe	.Ltmp2199 # Offset: 1418
    0000058c: 	movss	0x4(%r10,%rdx), %xmm0
    00000593: 	subss	0x4(%r11,%rdx), %xmm0
    0000059a: 	comiss	%xmm0, %xmm1
    0000059d: 	jbe	.Ltmp2201 # Offset: 1437
    0000059f: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2201:
    000005a6: 	addss	%xmm0, %xmm2
    000005aa: 	addq	$0x2, %rax
    000005ae: 	cmpq	%rax, 0x50(%rsp)
    000005b3: 	jbe	.Ltmp2199 # Offset: 1459
    000005b5: 	movss	0x8(%r10,%rdx), %xmm0
    000005bc: 	subss	0x8(%r11,%rdx), %xmm0
    000005c3: 	comiss	%xmm0, %xmm1
    000005c6: 	jbe	.Ltmp2202 # Offset: 1478
    000005c8: 	xorps	%xmm10, %xmm0
.Ltmp2202:
    000005cc: 	addss	%xmm0, %xmm2
.Ltmp2199:
    000005d0: 	movq	0x50(%rsp), %rdx
    000005d5: 	movaps	%xmm1, %xmm3
    000005d8: 	xorl	%eax, %eax
    000005da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2204:
    000005e0: 	movss	(%r10,%rax,4), %xmm0
    000005e6: 	subss	(%r11,%rax,4), %xmm0
    000005ec: 	comiss	%xmm0, %xmm1
    000005ef: 	jbe	.Ltmp2203 # Offset: 1519
    000005f1: 	xorps	%xmm9, %xmm0
.Ltmp2203:
    000005f5: 	maxss	%xmm3, %xmm0
    000005f9: 	addq	$0x1, %rax
    000005fd: 	movaps	%xmm0, %xmm3
    00000600: 	cmpq	%rax, %rdx
    00000603: 	jne	.Ltmp2204 # Offset: 1539
    00000605: 	movl	0x58(%rsp), %eax
    00000609: 	cmpl	%eax, 0x120(%rsp)
    00000610: 	jge	.Ltmp2205 # Offset: 1552
    00000612: 	movss	DATAat0x49548(%rip), %xmm0
    0000061a: 	comiss	%xmm2, %xmm0
    0000061d: 	ja	.Ltmp2206 # Offset: 1565
    00000623: 	ucomiss	%xmm2, %xmm2
    00000626: 	jp	.Ltmp2207 # Offset: 1574
    0000062c: 	movss	DATAat0x4954c(%rip), %xmm0
    00000634: 	comiss	%xmm3, %xmm0
    00000637: 	ja	.Ltmp2208 # Offset: 1591
    0000063d: 	ucomiss	%xmm3, %xmm3
    00000640: 	jp	.Ltmp2207 # Offset: 1600
.Ltmp2205:
    00000646: 	addl	$0x1, 0x58(%rsp)
    0000064b: 	movq	%r11, %rax
    0000064e: 	movl	0x58(%rsp), %ebx
    00000652: 	movq	%r10, %r11
    00000655: 	cmpl	0xa8(%rsp), %ebx
    0000065c: 	je	.Ltmp2206 # Offset: 1628
    00000662: 	movq	%rax, %r10
    00000665: 	jmp	.Ltmp2209 # Offset: 1637
    0000066a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2190:
    00000670: 	movq	%rsi, %rdx
    00000673: 	movq	0x68(%rsp), %rax
    00000678: 	leaq	(%r14,%rsi), %rdi
    0000067c: 	subq	%r14, %rdx
    0000067f: 	nop # Size: 1
.Ltmp2210:
    00000680: 	movss	(%rdx,%rax,4), %xmm4
    00000685: 	addss	-0x4(%rsi,%rax,4), %xmm4
    0000068b: 	movss	0x4(%rsi,%rax,4), %xmm0
    00000691: 	movss	(%rbx,%rax,4), %xmm11
    00000697: 	addss	%xmm4, %xmm0
    0000069b: 	addss	(%rdi,%rax,4), %xmm0
    000006a0: 	addss	%xmm1, %xmm0
    000006a4: 	mulss	%xmm3, %xmm0
    000006a8: 	subss	%xmm11, %xmm0
    000006ad: 	mulss	%xmm2, %xmm0
    000006b1: 	addss	%xmm11, %xmm0
    000006b6: 	movss	%xmm0, (%rbx,%rax,4)
    000006bb: 	subq	$0x1, %rax
    000006bf: 	testl	%eax, %eax
    000006c1: 	jg	.Ltmp2210 # Offset: 1729
    000006c3: 	jmp	.Ltmp2193 # Offset: 1731
.Ltmp2191:
    000006c8: 	movl	0x3c(%rsp), %eax
    000006cc: 	xorl	%edi, %edi
    000006ce: 	movl	%eax, 0x28(%rsp)
    000006d2: 	movl	%eax, %r13d
    000006d5: 	jmp	.Ltmp2211 # Offset: 1749
.Ltmp2194:
    000006da: 	movl	0x5c(%rsp), %eax
    000006de: 	jmp	.Ltmp2212 # Offset: 1758
.Ltmp2196:
    000006e3: 	movl	0x58(%rsp), %eax
    000006e7: 	cmpl	%eax, 0x120(%rsp)
    000006ee: 	jl	.Ltmp2213 # Offset: 1774
    000006f4: 	movaps	%xmm1, %xmm3
    000006f7: 	movaps	%xmm1, %xmm2
    000006fa: 	jmp	.Ltmp2205 # Offset: 1786
.Ltmp2197:
    000006ff: 	movaps	%xmm1, %xmm2
    00000702: 	xorl	%eax, %eax
    00000704: 	jmp	.Ltmp2214 # Offset: 1796
.Ltmp2206:
    00000709: 	movq	%r11, %r15
.Ltmp2221:
    0000070c: 	ucomiss	%xmm2, %xmm2
    0000070f: 	setp	%r12b
    00000713: 	ucomiss	%xmm3, %xmm3
    00000716: 	setp	%al
    00000719: 	orl	%eax, %r12d
.Ltmp2220:
    0000071c: 	movss	%xmm3, 0x10(%rsp)
    00000722: 	movss	%xmm2, 0x8(%rsp)
    00000728: 	callq	clock@PLT # Offset: 1832
    0000072d: 	movl	0xac(%rsp), %esi
    00000734: 	pxor	%xmm0, %xmm0
    00000738: 	movss	0xbc(%rsp), %xmm7
    00000741: 	movq	%rax, end_time(%rip)
    00000748: 	subq	start_time(%rip), %rax
    0000074f: 	cvtsi2sd	%rax, %xmm0
    00000754: 	movl	%esi, %eax
    00000756: 	divsd	DATAat0x49520(%rip), %xmm0
    0000075e: 	movss	0x8(%rsp), %xmm2
    00000764: 	shrl	$0x1f, %eax
    00000767: 	movss	0x10(%rsp), %xmm3
    0000076d: 	movq	%xmm0, %rbx
    00000772: 	addl	%esi, %eax
    00000774: 	movl	0x34(%rsp), %esi
    00000778: 	sarl	%eax
    0000077a: 	movl	%esi, %edx
    0000077c: 	imull	%esi, %eax
    0000077f: 	shrl	$0x1f, %edx
    00000782: 	addl	%esi, %edx
    00000784: 	sarl	%edx
    00000786: 	addl	%edx, %eax
    00000788: 	testb	%r12b, %r12b
    0000078b: 	cltq
    0000078d: 	subss	(%r15,%rax,4), %xmm7
    00000793: 	movq	0xb0(%rsp), %rax
    0000079b: 	movq	0x8(%rax), %rdx
    0000079f: 	movq	(%rax), %rsi
    000007a2: 	movd	%xmm7, %ebp
    000007a6: 	jne	.Ltmp2215 # Offset: 1958
    000007ac: 	movl	0x58(%rsp), %eax
    000007b0: 	cmpl	%eax, iterations(%rip)
    000007b6: 	jg	.Ltmp2216 # Offset: 1974
    000007b8: 	comiss	DATAat0x49548(%rip), %xmm2
    000007bf: 	jbe	.Ltmp2216 # Offset: 1983
    000007c1: 	comiss	DATAat0x4954c(%rip), %xmm3
    000007c8: 	ja	.Ltmp2217 # Offset: 1992
.Ltmp2216:
    000007ce: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000007d5: 	movss	%xmm3, 0x10(%rsp)
    000007db: 	movq	%r12, %rdi
    000007de: 	movss	%xmm2, 0x8(%rsp)
    000007e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2020
    000007e9: 	movl	$0xa, %edx
    000007ee: 	leaq	DATAat0x491ab(%rip), %rsi
    000007f5: 	movq	%rax, %rdi
    000007f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2040
    000007fd: 	movss	0x10(%rsp), %xmm3
    00000803: 	movss	0x8(%rsp), %xmm2
.Ltmp2219:
    00000809: 	movl	$0x4, %edx
    0000080e: 	movq	%r12, %rdi
    00000811: 	leaq	DATAat0x491b6(%rip), %rsi
    00000818: 	movss	%xmm3, 0x10(%rsp)
    0000081e: 	movss	%xmm2, 0x8(%rsp)
    00000824: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2084
    00000829: 	movl	0x58(%rsp), %esi
    0000082d: 	movq	%r12, %rdi
    00000830: 	callq	_ZNSolsEi@PLT # Offset: 2096
    00000835: 	movl	$0xb, %edx
    0000083a: 	leaq	DATAat0x491bb(%rip), %rsi
    00000841: 	movq	%rax, %rdi
    00000844: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2116
    00000849: 	movl	$0xa, %edx
    0000084e: 	leaq	DATAat0x491c7(%rip), %rsi
    00000855: 	movq	%r12, %rdi
    00000858: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2136
    0000085d: 	movss	0x8(%rsp), %xmm2
    00000863: 	movq	%r12, %rdi
    00000866: 	pxor	%xmm0, %xmm0
    0000086a: 	cvtss2sd	%xmm2, %xmm0
    0000086e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2158
    00000873: 	movl	$0x7, %edx
    00000878: 	leaq	DATAat0x491d2(%rip), %rsi
    0000087f: 	movq	%rax, %rdi
    00000882: 	movq	%rax, %r12
    00000885: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2181
    0000088a: 	movss	0x10(%rsp), %xmm3
    00000890: 	movq	%r12, %rdi
    00000893: 	pxor	%xmm0, %xmm0
    00000897: 	cvtss2sd	%xmm3, %xmm0
    0000089b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2203
    000008a0: 	movl	$0x10, %edx
    000008a5: 	leaq	DATAat0x491da(%rip), %rsi
    000008ac: 	movq	%rax, %r12
    000008af: 	movq	%rax, %rdi
    000008b2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2226
    000008b7: 	movd	%ebp, %xmm7
    000008bb: 	movq	%r12, %rdi
    000008be: 	pxor	%xmm0, %xmm0
    000008c2: 	cvtss2sd	%xmm7, %xmm0
    000008c6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2246
    000008cb: 	movl	$0x8, %edx
    000008d0: 	leaq	DATAat0x491eb(%rip), %rsi
    000008d7: 	movq	%rax, %rbp
    000008da: 	movq	%rax, %rdi
    000008dd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2269
    000008e2: 	movq	%rbx, %xmm0
    000008e7: 	movq	%rbp, %rdi
    000008ea: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2282
    000008ef: 	movl	$0x2, %edx
    000008f4: 	leaq	DATAat0x491f4(%rip), %rsi
    000008fb: 	movq	%rax, %rdi
    000008fe: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2302
    00000903: 	movl	0xb8(%rsp), %eax
    0000090a: 	movl	%eax, iterations(%rip)
    00000910: 	movq	0xd8(%rsp), %rax
    00000918: 	subq	%fs:0x28, %rax
    00000921: 	jne	.Ltmp2218 # Offset: 2337
    00000927: 	addq	$0xe8, %rsp
    0000092e: 	popq	%rbx
    0000092f: 	popq	%rbp
    00000930: 	popq	%r12
    00000932: 	popq	%r13
    00000934: 	popq	%r14
    00000936: 	popq	%r15
    00000938: 	retq # Offset: 2360
.Ltmp2215:
    00000939: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000940: 	movq	%r12, %rdi
    00000943: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2371
    00000948: 	movl	$0x10, %edx
    0000094d: 	leaq	DATAat0x493d4(%rip), %rsi
    00000954: 	movq	%rax, %rdi
    00000957: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2391
    0000095c: 	movss	0x8(%rsp), %xmm2
    00000962: 	movss	0x10(%rsp), %xmm3
    00000968: 	jmp	.Ltmp2219 # Offset: 2408
.Ltmp2207:
    0000096d: 	movq	%r11, %r15
    00000970: 	movl	$0x1, %r12d
    00000976: 	jmp	.Ltmp2220 # Offset: 2422
.Ltmp2217:
    0000097b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000982: 	movss	%xmm3, 0x10(%rsp)
    00000988: 	movq	%r12, %rdi
    0000098b: 	movss	%xmm2, 0x8(%rsp)
    00000991: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2449
    00000996: 	movl	$0x11, %edx
    0000099b: 	leaq	DATAat0x49199(%rip), %rsi
    000009a2: 	movq	%rax, %rdi
    000009a5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2469
    000009aa: 	movss	0x8(%rsp), %xmm2
    000009b0: 	movss	0x10(%rsp), %xmm3
    000009b6: 	jmp	.Ltmp2219 # Offset: 2486
.Ltmp2213:
    000009bb: 	movq	%r11, %r15
    000009be: 	movaps	%xmm1, %xmm3
    000009c1: 	movaps	%xmm1, %xmm2
    000009c4: 	jmp	.Ltmp2221 # Offset: 2500
.Ltmp2208:
    000009c9: 	ucomiss	%xmm3, %xmm3
    000009cc: 	movq	%r11, %r15
    000009cf: 	setp	%r12b
    000009d3: 	jmp	.Ltmp2220 # Offset: 2515
.Ltmp2188:
    000009d8: 	pxor	%xmm3, %xmm3
    000009dc: 	movl	$0x0, 0x58(%rsp)
    000009e4: 	xorl	%r12d, %r12d
    000009e7: 	movaps	%xmm3, %xmm2
    000009ea: 	jmp	.Ltmp2220 # Offset: 2538
.Ltmp2218:
    000009ef: 	callq	__stack_chk_fail@PLT # Offset: 2543
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x35eb0
  Size        : 0x963
  MaxSize     : 0x970
  Offset      : 0x35eb0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%ecx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	imull	%r14d, %ebx
    0000001f: 	subq	$0xd8, %rsp
    00000026: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002d: 	movl	%edx, 0x9c(%rsp)
    00000034: 	movl	%r14d, %edx
    00000037: 	movl	%ecx, 0x28(%rsp)
    0000003b: 	leaq	0xb0(%rsp), %rcx
    00000043: 	movl	%r8d, 0xc(%rsp)
    00000048: 	movq	%r9, 0xa0(%rsp)
    00000050: 	movq	%fs:0x28, %rax
    00000059: 	movq	%rax, 0xc8(%rsp)
    00000061: 	xorl	%eax, %eax
    00000063: 	movaps	%xmm0, 0xb0(%rsp)
    0000006b: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 107
    00000070: 	movss	%xmm0, 0xac(%rsp)
    00000079: 	testl	%ebx, %ebx
    0000007b: 	jle	.Ltmp2222 # Offset: 123
    0000007d: 	movslq	%ebx, %rdx
    00000080: 	movq	%rbp, %rsi
    00000083: 	movq	%r13, %rdi
    00000086: 	shlq	$0x2, %rdx
    0000008a: 	callq	memmove@PLT # Offset: 138
.Ltmp2222:
    0000008f: 	movl	iterations(%rip), %eax
    00000095: 	movl	$0x2710, iterations(%rip)
    0000009f: 	movl	%eax, 0xa8(%rsp)
    000000a6: 	callq	clock@PLT # Offset: 166
    000000ab: 	movq	%rax, start_time(%rip)
    000000b2: 	movl	iterations(%rip), %eax
    000000b8: 	movl	%eax, 0x60(%rsp)
    000000bc: 	testl	%eax, %eax
    000000be: 	jle	.Ltmp2223 # Offset: 190
    000000c4: 	movl	0x9c(%rsp), %esi
    000000cb: 	movl	0x28(%rsp), %ecx
    000000cf: 	movl	$0x0, 0x3c(%rsp)
    000000d7: 	movss	DATAat0x494c0(%rip), %xmm9
    000000e0: 	movl	0xc(%rsp), %r14d
    000000e5: 	movaps	DATAat0x49420(%rip), %xmm4
    000000ec: 	pxor	%xmm1, %xmm1
    000000f0: 	movaps	%xmm9, %xmm10
    000000f4: 	leal	-0x2(%rsi), %eax
    000000f7: 	leal	-0x1(%rcx), %edi
    000000fa: 	movaps	DATAat0x49430(%rip), %xmm3
    00000101: 	movl	%eax, 0x5c(%rsp)
    00000105: 	imull	%r14d, %eax
    00000109: 	movl	%edi, 0x64(%rsp)
    0000010d: 	movslq	%ebx, %rdi
    00000110: 	movq	%rdi, 0x40(%rsp)
    00000115: 	movl	%eax, %ebx
    00000117: 	movl	%eax, 0x98(%rsp)
    0000011e: 	cltq
    00000120: 	movq	%rax, 0x90(%rsp)
    00000128: 	leal	-0x3(%rsi), %eax
    0000012b: 	imull	%r14d, %eax
    0000012f: 	movslq	%eax, %rdx
    00000132: 	subl	%ebx, %eax
    00000134: 	leal	-0x2(%rcx), %ebx
    00000137: 	movl	%eax, 0x2c(%rsp)
    0000013b: 	leal	-0x3(%rcx), %eax
    0000013e: 	movl	%eax, 0x30(%rsp)
    00000142: 	movl	%ebx, %eax
    00000144: 	shrl	$0x2, %eax
    00000147: 	movl	%ebx, 0x34(%rsp)
    0000014b: 	andl	$-0x4, %ebx
    0000014e: 	subl	$0x1, %eax
    00000151: 	movq	%rdx, 0x88(%rsp)
    00000159: 	leal	-0x1(%rsi), %edx
    0000015c: 	subl	%ebx, %ecx
    0000015e: 	addq	$0x1, %rax
    00000162: 	imull	%r14d, %edx
    00000166: 	movl	%ebx, 0x38(%rsp)
    0000016a: 	shlq	$0x4, %rax
    0000016e: 	movl	%ecx, 0x4c(%rsp)
    00000172: 	movq	%rax, %r12
    00000175: 	leal	0x1(%rbx), %eax
    00000178: 	movl	%eax, 0x48(%rsp)
    0000017c: 	leaq	-0x1(%rdi), %rax
    00000180: 	movslq	%edx, %rsi
    00000183: 	movq	%r12, %r15
    00000186: 	movq	%rax, 0x70(%rsp)
    0000018b: 	movq	%rdi, %rax
    0000018e: 	andq	$-0x4, %rdi
    00000192: 	shrq	$0x2, %rax
    00000196: 	movq	%rsi, 0x78(%rsp)
    0000019b: 	shlq	$0x4, %rax
    0000019f: 	movq	%rdi, 0x68(%rsp)
    000001a4: 	movq	%rax, 0x80(%rsp)
    000001ac: 	leal	-0x2(%rcx), %eax
    000001af: 	movl	%eax, 0x58(%rsp)
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2244:
    000001b8: 	movl	0x5c(%rsp), %edi
    000001bc: 	testl	%edi, %edi
    000001be: 	jle	.Ltmp2224 # Offset: 446
    000001c4: 	cmpl	$0x1, 0x64(%rsp)
    000001c9: 	jle	.Ltmp2224 # Offset: 457
    000001cf: 	movl	0xc(%rsp), %eax
    000001d3: 	movq	0x78(%rsp), %rbx
    000001d8: 	movl	%edi, 0x10(%rsp)
    000001dc: 	movq	0x88(%rsp), %r11
    000001e4: 	movq	0x90(%rsp), %r10
    000001ec: 	negl	%eax
    000001ee: 	movl	0x98(%rsp), %ecx
    000001f5: 	movss	DATAat0x49420(%rip), %xmm6
    000001fd: 	cltq
    000001ff: 	movq	%r11, %r14
    00000202: 	movss	DATAat0x49430(%rip), %xmm5
    0000020a: 	movq	DATAat0x49420(%rip), %xmm8
    00000213: 	movq	DATAat0x49430(%rip), %xmm7
    0000021b: 	movq	%rax, 0x18(%rsp)
    00000220: 	leaq	0x4(%r13), %rax
    00000224: 	movq	%rax, 0x20(%rsp)
    00000229: 	leaq	0x8(%rbp), %rax
    0000022d: 	movq	%rax, (%rsp)
    00000231: 	movl	0x30(%rsp), %eax
    00000235: 	addq	$0x1, %rax
    00000239: 	movq	%rax, 0x50(%rsp)
    0000023e: 	nop # Size: 2
.Ltmp2230:
    00000240: 	movq	%r13, %r11
    00000243: 	movl	0x2c(%rsp), %eax
    00000247: 	subl	$0x1, 0x10(%rsp)
    0000024c: 	leaq	(,%rbx,4), %r8
    00000254: 	subq	%rbp, %r11
    00000257: 	movq	0x20(%rsp), %rdi
    0000025c: 	cmpq	$0x10, %r11
    00000260: 	leal	(%rax,%rcx), %edx
    00000263: 	movl	0xc(%rsp), %eax
    00000267: 	seta	%r11b
    0000026b: 	cmpl	$0x3, 0x28(%rsp)
    00000270: 	setne	%r12b
    00000274: 	leal	(%rax,%rcx), %r9d
    00000278: 	leaq	(,%r10,4), %rax
    00000280: 	andl	%r12d, %r11d
    00000283: 	leaq	(%rdi,%rax), %rsi
    00000287: 	leaq	(,%r14,4), %rdi
    0000028f: 	movb	%r11b, 0x17(%rsp)
    00000294: 	movq	(%rsp), %r11
    00000298: 	leaq	(%r11,%rdi), %r12
    0000029c: 	movq	%rsi, %r11
    0000029f: 	subq	%r12, %r11
    000002a2: 	cmpq	$0x8, %r11
    000002a6: 	seta	%r12b
    000002aa: 	testb	%r12b, 0x17(%rsp)
    000002af: 	je	.Ltmp2225 # Offset: 687
    000002b5: 	movq	(%rsp), %r11
    000002b9: 	leaq	(%r11,%r8), %r12
    000002bd: 	movq	%rsi, %r11
    000002c0: 	subq	%r12, %r11
    000002c3: 	cmpq	$0x8, %r11
    000002c7: 	jbe	.Ltmp2225 # Offset: 711
    000002cd: 	cmpl	$0x2, 0x30(%rsp)
    000002d2: 	jbe	.Ltmp2226 # Offset: 722
    000002d8: 	leaq	0x4(%rbp), %r11
    000002dc: 	leaq	(%rbp,%rax), %r12
    000002e1: 	pxor	%xmm2, %xmm2
    000002e5: 	addq	(%rsp), %rax
    000002e9: 	addq	%r11, %rdi
    000002ec: 	addq	%r8, %r11
    000002ef: 	xorl	%r8d, %r8d
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2227:
    000002f8: 	movups	(%rdi,%r8), %xmm0
    000002fd: 	movups	(%r12,%r8), %xmm14
    00000302: 	movups	(%rax,%r8), %xmm15
    00000307: 	movups	(%r11,%r8), %xmm12
    0000030c: 	addps	%xmm14, %xmm0
    00000310: 	movups	(%rsi,%r8), %xmm13
    00000315: 	addps	%xmm15, %xmm0
    00000319: 	addps	%xmm12, %xmm0
    0000031d: 	addps	%xmm2, %xmm0
    00000320: 	mulps	%xmm4, %xmm0
    00000323: 	subps	%xmm13, %xmm0
    00000327: 	mulps	%xmm3, %xmm0
    0000032a: 	addps	%xmm13, %xmm0
    0000032e: 	movups	%xmm0, (%rsi,%r8)
    00000333: 	addq	$0x10, %r8
    00000337: 	cmpq	%r8, %r15
    0000033a: 	jne	.Ltmp2227 # Offset: 826
    0000033c: 	movl	0x38(%rsp), %edi
    00000340: 	cmpl	%edi, 0x34(%rsp)
    00000344: 	je	.Ltmp2228 # Offset: 836
    0000034a: 	cmpl	$0x3, 0x4c(%rsp)
    0000034f: 	movl	0x58(%rsp), %r11d
    00000354: 	movl	0x48(%rsp), %eax
    00000358: 	je	.Ltmp2229 # Offset: 856
.Ltmp2246:
    0000035a: 	leaq	0x1(%rdi,%r10), %rsi
    0000035f: 	leaq	0x1(%rdi,%r14), %r12
    00000364: 	shlq	$0x2, %rsi
    00000368: 	movq	(%rbp,%r12,4), %xmm0
    0000036f: 	movq	-0x4(%rbp,%rsi), %xmm11
    00000376: 	leaq	(%r13,%rsi), %r8
    0000037b: 	movq	(%r8), %xmm2
    00000380: 	addps	%xmm11, %xmm0
    00000384: 	movq	0x4(%rbp,%rsi), %xmm11
    0000038b: 	leaq	0x1(%rdi,%rbx), %rsi
    00000390: 	addps	%xmm11, %xmm0
    00000394: 	movq	(%rbp,%rsi,4), %xmm11
    0000039b: 	movl	%r11d, %esi
    0000039e: 	andl	$-0x2, %esi
    000003a1: 	addl	%esi, %eax
    000003a3: 	addps	%xmm11, %xmm0
    000003a7: 	xorps	%xmm11, %xmm11
    000003ab: 	addps	%xmm11, %xmm0
    000003af: 	mulps	%xmm8, %xmm0
    000003b3: 	subps	%xmm2, %xmm0
    000003b6: 	mulps	%xmm7, %xmm0
    000003b9: 	addps	%xmm2, %xmm0
    000003bc: 	movlps	%xmm0, (%r8)
    000003c0: 	cmpl	%esi, %r11d
    000003c3: 	je	.Ltmp2228 # Offset: 963
.Ltmp2229:
    000003c5: 	addl	%eax, %edx
    000003c7: 	leal	(%rcx,%rax), %esi
    000003ca: 	movslq	%edx, %rdx
    000003cd: 	movslq	%esi, %rsi
    000003d0: 	movss	(%rbp,%rdx,4), %xmm0
    000003d6: 	leal	-0x1(%rcx,%rax), %edx
    000003da: 	leaq	(%r13,%rsi,4), %rsi
    000003df: 	movslq	%edx, %rdx
    000003e2: 	movss	(%rsi), %xmm2
    000003e6: 	addss	(%rbp,%rdx,4), %xmm0
    000003ec: 	leal	0x1(%rcx,%rax), %edx
    000003f0: 	addl	%r9d, %eax
    000003f3: 	movslq	%edx, %rdx
    000003f6: 	cltq
    000003f8: 	addss	(%rbp,%rdx,4), %xmm0
    000003fe: 	addss	(%rbp,%rax,4), %xmm0
    00000404: 	addss	%xmm1, %xmm0
    00000408: 	mulss	%xmm6, %xmm0
    0000040c: 	subss	%xmm2, %xmm0
    00000410: 	mulss	%xmm5, %xmm0
    00000414: 	addss	%xmm2, %xmm0
    00000418: 	movss	%xmm0, (%rsi)
.Ltmp2228:
    0000041c: 	movq	0x18(%rsp), %rax
    00000421: 	subl	0xc(%rsp), %ecx
    00000425: 	addq	%rax, %r10
    00000428: 	addq	%rax, %r14
    0000042b: 	addq	%rax, %rbx
    0000042e: 	movl	0x10(%rsp), %eax
    00000432: 	testl	%eax, %eax
    00000434: 	jne	.Ltmp2230 # Offset: 1076
.Ltmp2224:
    0000043a: 	cmpq	$0x0, 0x40(%rsp)
    00000440: 	je	.Ltmp2231 # Offset: 1088
    00000446: 	cmpq	$0x2, 0x70(%rsp)
    0000044c: 	jbe	.Ltmp2232 # Offset: 1100
    00000452: 	movaps	DATAat0x494b0(%rip), %xmm7
    00000459: 	xorl	%eax, %eax
    0000045b: 	movaps	%xmm1, %xmm2
    0000045e: 	pxor	%xmm6, %xmm6
    00000462: 	movq	0x80(%rsp), %rdx
    0000046a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2233:
    00000470: 	movups	(%r13,%rax), %xmm0
    00000476: 	movups	(%rbp,%rax), %xmm5
    0000047b: 	addq	$0x10, %rax
    0000047f: 	subps	%xmm0, %xmm5
    00000482: 	movaps	%xmm5, %xmm0
    00000485: 	movaps	%xmm5, %xmm8
    00000489: 	cmpltps	%xmm6, %xmm0
    0000048d: 	xorps	%xmm7, %xmm8
    00000491: 	andps	%xmm0, %xmm8
    00000495: 	andnps	%xmm5, %xmm0
    00000498: 	orps	%xmm8, %xmm0
    0000049c: 	addss	%xmm0, %xmm2
    000004a0: 	movaps	%xmm0, %xmm5
    000004a3: 	shufps	$0x55, %xmm0, %xmm5
    000004a7: 	addss	%xmm2, %xmm5
    000004ab: 	movaps	%xmm0, %xmm2
    000004ae: 	unpckhps	%xmm0, %xmm2
    000004b1: 	shufps	$0xff, %xmm0, %xmm0
    000004b5: 	addss	%xmm5, %xmm2
    000004b9: 	addss	%xmm0, %xmm2
    000004bd: 	cmpq	%rax, %rdx
    000004c0: 	jne	.Ltmp2233 # Offset: 1216
    000004c2: 	movq	0x68(%rsp), %rax
    000004c7: 	cmpq	%rax, 0x40(%rsp)
    000004cc: 	je	.Ltmp2234 # Offset: 1228
.Ltmp2248:
    000004ce: 	movss	(%rbp,%rax,4), %xmm0
    000004d4: 	subss	(%r13,%rax,4), %xmm0
    000004db: 	leaq	(,%rax,4), %rdx
    000004e3: 	comiss	%xmm0, %xmm1
    000004e6: 	jbe	.Ltmp2235 # Offset: 1254
    000004e8: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2235:
    000004ef: 	addss	%xmm0, %xmm2
    000004f3: 	leaq	0x1(%rax), %rcx
    000004f7: 	cmpq	%rcx, 0x40(%rsp)
    000004fc: 	jbe	.Ltmp2234 # Offset: 1276
    000004fe: 	movss	0x4(%rbp,%rdx), %xmm0
    00000504: 	subss	0x4(%r13,%rdx), %xmm0
    0000050b: 	comiss	%xmm0, %xmm1
    0000050e: 	jbe	.Ltmp2236 # Offset: 1294
    00000510: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2236:
    00000517: 	addss	%xmm0, %xmm2
    0000051b: 	addq	$0x2, %rax
    0000051f: 	cmpq	%rax, 0x40(%rsp)
    00000524: 	jbe	.Ltmp2234 # Offset: 1316
    00000526: 	movss	0x8(%rbp,%rdx), %xmm0
    0000052c: 	subss	0x8(%r13,%rdx), %xmm0
    00000533: 	comiss	%xmm0, %xmm1
    00000536: 	jbe	.Ltmp2237 # Offset: 1334
    00000538: 	xorps	%xmm10, %xmm0
.Ltmp2237:
    0000053c: 	addss	%xmm0, %xmm2
.Ltmp2234:
    00000540: 	movq	0x40(%rsp), %rdx
    00000545: 	movaps	%xmm1, %xmm5
    00000548: 	xorl	%eax, %eax
    0000054a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2239:
    00000550: 	movss	(%rbp,%rax,4), %xmm0
    00000556: 	subss	(%r13,%rax,4), %xmm0
    0000055d: 	comiss	%xmm0, %xmm1
    00000560: 	jbe	.Ltmp2238 # Offset: 1376
    00000562: 	xorps	%xmm9, %xmm0
.Ltmp2238:
    00000566: 	maxss	%xmm5, %xmm0
    0000056a: 	addq	$0x1, %rax
    0000056e: 	movaps	%xmm0, %xmm5
    00000571: 	cmpq	%rax, %rdx
    00000574: 	jne	.Ltmp2239 # Offset: 1396
    00000576: 	movl	0x3c(%rsp), %eax
    0000057a: 	cmpl	%eax, 0x110(%rsp)
    00000581: 	jge	.Ltmp2240 # Offset: 1409
    00000583: 	movss	DATAat0x49548(%rip), %xmm0
    0000058b: 	comiss	%xmm2, %xmm0
    0000058e: 	ja	.Ltmp2241 # Offset: 1422
    00000594: 	ucomiss	%xmm2, %xmm2
    00000597: 	jp	.Ltmp2242 # Offset: 1431
    0000059d: 	movss	DATAat0x4954c(%rip), %xmm0
    000005a5: 	comiss	%xmm5, %xmm0
    000005a8: 	ja	.Ltmp2243 # Offset: 1448
    000005ae: 	ucomiss	%xmm5, %xmm5
    000005b1: 	jp	.Ltmp2242 # Offset: 1457
.Ltmp2240:
    000005b7: 	addl	$0x1, 0x3c(%rsp)
    000005bc: 	movq	%r13, %rax
    000005bf: 	movl	0x3c(%rsp), %ebx
    000005c3: 	movq	%rbp, %r13
    000005c6: 	cmpl	0x60(%rsp), %ebx
    000005ca: 	je	.Ltmp2241 # Offset: 1482
    000005d0: 	movq	%rax, %rbp
    000005d3: 	jmp	.Ltmp2244 # Offset: 1491
    000005d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2225:
    000005e0: 	movq	0x50(%rsp), %rdx
    000005e5: 	subq	%rax, %rdi
    000005e8: 	subq	%rax, %r8
    000005eb: 	movss	DATAat0x49420(%rip), %xmm12
    000005f4: 	movss	DATAat0x49430(%rip), %xmm11
    000005fd: 	addq	%rbp, %rdi
    00000600: 	addq	%rbp, %r8
    00000603: 	addq	%r10, %rdx
    00000606: 	shlq	$0x2, %rdx
    0000060a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2245:
    00000610: 	movss	0x4(%rdi,%rax), %xmm2
    00000616: 	addss	(%rbp,%rax), %xmm2
    0000061c: 	movss	0x8(%rbp,%rax), %xmm0
    00000622: 	movss	0x4(%r13,%rax), %xmm13
    00000629: 	addss	%xmm2, %xmm0
    0000062d: 	addss	0x4(%r8,%rax), %xmm0
    00000634: 	addss	%xmm1, %xmm0
    00000638: 	mulss	%xmm12, %xmm0
    0000063d: 	subss	%xmm13, %xmm0
    00000642: 	mulss	%xmm11, %xmm0
    00000647: 	addss	%xmm13, %xmm0
    0000064c: 	movss	%xmm0, 0x4(%r13,%rax)
    00000653: 	addq	$0x4, %rax
    00000657: 	cmpq	%rax, %rdx
    0000065a: 	jne	.Ltmp2245 # Offset: 1626
    0000065c: 	jmp	.Ltmp2228 # Offset: 1628
.Ltmp2226:
    00000661: 	movl	0x34(%rsp), %r11d
    00000666: 	xorl	%edi, %edi
    00000668: 	movl	$0x1, %eax
    0000066d: 	jmp	.Ltmp2246 # Offset: 1645
.Ltmp2231:
    00000672: 	movl	0x3c(%rsp), %eax
    00000676: 	movaps	%xmm1, %xmm5
    00000679: 	cmpl	%eax, 0x110(%rsp)
    00000680: 	jl	.Ltmp2247 # Offset: 1664
    00000682: 	movaps	%xmm1, %xmm2
    00000685: 	jmp	.Ltmp2240 # Offset: 1669
.Ltmp2232:
    0000068a: 	movaps	%xmm1, %xmm2
    0000068d: 	xorl	%eax, %eax
    0000068f: 	jmp	.Ltmp2248 # Offset: 1679
.Ltmp2247:
    00000694: 	movaps	%xmm5, %xmm2
.Ltmp2241:
    00000697: 	ucomiss	%xmm2, %xmm2
    0000069a: 	setp	%r12b
    0000069e: 	ucomiss	%xmm5, %xmm5
    000006a1: 	setp	%al
    000006a4: 	orl	%eax, %r12d
.Ltmp2254:
    000006a7: 	movss	%xmm5, 0xc(%rsp)
    000006ad: 	movss	%xmm2, (%rsp)
    000006b2: 	callq	clock@PLT # Offset: 1714
    000006b7: 	movl	0x9c(%rsp), %ecx
    000006be: 	pxor	%xmm0, %xmm0
    000006c2: 	movss	0xac(%rsp), %xmm7
    000006cb: 	movq	%rax, end_time(%rip)
    000006d2: 	subq	start_time(%rip), %rax
    000006d9: 	cvtsi2sd	%rax, %xmm0
    000006de: 	movl	%ecx, %eax
    000006e0: 	divsd	DATAat0x49520(%rip), %xmm0
    000006e8: 	movss	(%rsp), %xmm2
    000006ed: 	shrl	$0x1f, %eax
    000006f0: 	movss	0xc(%rsp), %xmm5
    000006f6: 	movq	%xmm0, %rbx
    000006fb: 	addl	%ecx, %eax
    000006fd: 	movl	0x28(%rsp), %ecx
    00000701: 	sarl	%eax
    00000703: 	movl	%ecx, %edx
    00000705: 	imull	%ecx, %eax
    00000708: 	shrl	$0x1f, %edx
    0000070b: 	addl	%ecx, %edx
    0000070d: 	sarl	%edx
    0000070f: 	addl	%edx, %eax
    00000711: 	testb	%r12b, %r12b
    00000714: 	cltq
    00000716: 	subss	(%r13,%rax,4), %xmm7
    0000071d: 	movq	0xa0(%rsp), %rax
    00000725: 	movq	0x8(%rax), %rdx
    00000729: 	movq	(%rax), %rsi
    0000072c: 	movd	%xmm7, %ebp
    00000730: 	jne	.Ltmp2249 # Offset: 1840
    00000736: 	movl	0x3c(%rsp), %eax
    0000073a: 	cmpl	%eax, iterations(%rip)
    00000740: 	jg	.Ltmp2250 # Offset: 1856
    00000742: 	comiss	DATAat0x49548(%rip), %xmm2
    00000749: 	jbe	.Ltmp2250 # Offset: 1865
    0000074b: 	comiss	DATAat0x4954c(%rip), %xmm5
    00000752: 	ja	.Ltmp2251 # Offset: 1874
.Ltmp2250:
    00000758: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    0000075f: 	movss	%xmm5, 0xc(%rsp)
    00000765: 	movq	%r12, %rdi
    00000768: 	movss	%xmm2, (%rsp)
    0000076d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1901
    00000772: 	movl	$0xa, %edx
    00000777: 	leaq	DATAat0x491ab(%rip), %rsi
    0000077e: 	movq	%rax, %rdi
    00000781: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1921
    00000786: 	movss	0xc(%rsp), %xmm5
    0000078c: 	movss	(%rsp), %xmm2
.Ltmp2253:
    00000791: 	movl	$0x4, %edx
    00000796: 	movq	%r12, %rdi
    00000799: 	movss	%xmm2, (%rsp)
    0000079e: 	leaq	DATAat0x491b6(%rip), %rsi
    000007a5: 	movss	%xmm5, 0xc(%rsp)
    000007ab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1963
    000007b0: 	movl	0x3c(%rsp), %esi
    000007b4: 	movq	%r12, %rdi
    000007b7: 	callq	_ZNSolsEi@PLT # Offset: 1975
    000007bc: 	movl	$0xb, %edx
    000007c1: 	leaq	DATAat0x491bb(%rip), %rsi
    000007c8: 	movq	%rax, %rdi
    000007cb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1995
    000007d0: 	movl	$0xa, %edx
    000007d5: 	leaq	DATAat0x491c7(%rip), %rsi
    000007dc: 	movq	%r12, %rdi
    000007df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2015
    000007e4: 	movss	(%rsp), %xmm2
    000007e9: 	movq	%r12, %rdi
    000007ec: 	pxor	%xmm0, %xmm0
    000007f0: 	cvtss2sd	%xmm2, %xmm0
    000007f4: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2036
    000007f9: 	movl	$0x7, %edx
    000007fe: 	leaq	DATAat0x491d2(%rip), %rsi
    00000805: 	movq	%rax, %rdi
    00000808: 	movq	%rax, %r12
    0000080b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2059
    00000810: 	movss	0xc(%rsp), %xmm5
    00000816: 	movq	%r12, %rdi
    00000819: 	pxor	%xmm0, %xmm0
    0000081d: 	cvtss2sd	%xmm5, %xmm0
    00000821: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2081
    00000826: 	movl	$0x10, %edx
    0000082b: 	leaq	DATAat0x491da(%rip), %rsi
    00000832: 	movq	%rax, %r12
    00000835: 	movq	%rax, %rdi
    00000838: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2104
    0000083d: 	movd	%ebp, %xmm7
    00000841: 	movq	%r12, %rdi
    00000844: 	pxor	%xmm0, %xmm0
    00000848: 	cvtss2sd	%xmm7, %xmm0
    0000084c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2124
    00000851: 	movl	$0x8, %edx
    00000856: 	leaq	DATAat0x491eb(%rip), %rsi
    0000085d: 	movq	%rax, %rbp
    00000860: 	movq	%rax, %rdi
    00000863: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2147
    00000868: 	movq	%rbx, %xmm0
    0000086d: 	movq	%rbp, %rdi
    00000870: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2160
    00000875: 	movl	$0x2, %edx
    0000087a: 	leaq	DATAat0x491f4(%rip), %rsi
    00000881: 	movq	%rax, %rdi
    00000884: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2180
    00000889: 	movl	0xa8(%rsp), %eax
    00000890: 	movl	%eax, iterations(%rip)
    00000896: 	movq	0xc8(%rsp), %rax
    0000089e: 	subq	%fs:0x28, %rax
    000008a7: 	jne	.Ltmp2252 # Offset: 2215
    000008ad: 	addq	$0xd8, %rsp
    000008b4: 	popq	%rbx
    000008b5: 	popq	%rbp
    000008b6: 	popq	%r12
    000008b8: 	popq	%r13
    000008ba: 	popq	%r14
    000008bc: 	popq	%r15
    000008be: 	retq # Offset: 2238
.Ltmp2249:
    000008bf: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    000008c6: 	movq	%r12, %rdi
    000008c9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2249
    000008ce: 	movl	$0x10, %edx
    000008d3: 	leaq	DATAat0x493d4(%rip), %rsi
    000008da: 	movq	%rax, %rdi
    000008dd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2269
    000008e2: 	movss	(%rsp), %xmm2
    000008e7: 	movss	0xc(%rsp), %xmm5
    000008ed: 	jmp	.Ltmp2253 # Offset: 2285
.Ltmp2242:
    000008f2: 	movl	$0x1, %r12d
    000008f8: 	jmp	.Ltmp2254 # Offset: 2296
.Ltmp2251:
    000008fd: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000904: 	movss	%xmm5, 0xc(%rsp)
    0000090a: 	movq	%r12, %rdi
    0000090d: 	movss	%xmm2, (%rsp)
    00000912: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2322
    00000917: 	movl	$0x11, %edx
    0000091c: 	leaq	DATAat0x49199(%rip), %rsi
    00000923: 	movq	%rax, %rdi
    00000926: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2342
    0000092b: 	movss	(%rsp), %xmm2
    00000930: 	movss	0xc(%rsp), %xmm5
    00000936: 	jmp	.Ltmp2253 # Offset: 2358
.Ltmp2243:
    0000093b: 	ucomiss	%xmm5, %xmm5
    0000093e: 	setp	%r12b
    00000942: 	jmp	.Ltmp2254 # Offset: 2370
.Ltmp2223:
    00000947: 	pxor	%xmm5, %xmm5
    0000094b: 	movl	$0x0, 0x3c(%rsp)
    00000953: 	xorl	%r12d, %r12d
    00000956: 	movaps	%xmm5, %xmm2
    00000959: 	jmp	.Ltmp2254 # Offset: 2393
.Ltmp2252:
    0000095e: 	callq	__stack_chk_fail@PLT # Offset: 2398
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff21jacobi_sor2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x36820
  Size        : 0xe63
  MaxSize     : 0xe70
  Offset      : 0x36820
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff21jacobi_sor2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xd8, %rsp
    00000023: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002a: 	movl	%edx, 0x9c(%rsp)
    00000031: 	movl	%ebp, %edx
    00000033: 	movl	%ecx, 0x34(%rsp)
    00000037: 	leaq	0xb0(%rsp), %rcx
    0000003f: 	movl	%r8d, 0x24(%rsp)
    00000044: 	movq	%r9, 0xa0(%rsp)
    0000004c: 	movq	%fs:0x28, %rax
    00000055: 	movq	%rax, 0xc8(%rsp)
    0000005d: 	xorl	%eax, %eax
    0000005f: 	movaps	%xmm0, 0xb0(%rsp)
    00000067: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 103
    0000006c: 	movl	%r14d, %edi
    0000006f: 	movss	%xmm0, 0xac(%rsp)
    00000078: 	imull	%ebp, %edi
    0000007b: 	movl	%edi, %ebp
    0000007d: 	testl	%edi, %edi
    0000007f: 	jle	.Ltmp2255 # Offset: 127
    00000081: 	movslq	%edi, %rdx
    00000084: 	movq	%rbx, %rsi
    00000087: 	movq	%r15, %rdi
    0000008a: 	shlq	$0x2, %rdx
    0000008e: 	callq	memmove@PLT # Offset: 142
.Ltmp2255:
    00000093: 	movl	iterations(%rip), %eax
    00000099: 	movl	$0x2710, iterations(%rip)
    000000a3: 	movl	%eax, 0xa8(%rsp)
    000000aa: 	callq	clock@PLT # Offset: 170
    000000af: 	movq	%rax, start_time(%rip)
    000000b6: 	movl	iterations(%rip), %eax
    000000bc: 	movl	%eax, 0x88(%rsp)
    000000c3: 	testl	%eax, %eax
    000000c5: 	jle	.Ltmp2256 # Offset: 197
    000000cb: 	movl	0x9c(%rsp), %eax
    000000d2: 	movslq	%ebp, %rdi
    000000d5: 	movl	$0x0, 0x60(%rsp)
    000000dd: 	pxor	%xmm3, %xmm3
    000000e1: 	movq	%rdi, 0x58(%rsp)
    000000e6: 	movaps	DATAat0x49420(%rip), %xmm1
    000000ed: 	subl	$0x1, %eax
    000000f0: 	movaps	DATAat0x49430(%rip), %xmm4
    000000f7: 	movl	%eax, 0x20(%rsp)
    000000fb: 	movl	0x34(%rsp), %eax
    000000ff: 	leal	-0x4(%rax), %ecx
    00000102: 	movl	%ecx, 0x28(%rsp)
    00000106: 	movl	0x24(%rsp), %ecx
    0000010a: 	addl	%ecx, %ecx
    0000010c: 	movl	%ecx, 0x8c(%rsp)
    00000113: 	leal	-0x6(%rax), %ecx
    00000116: 	movl	%ecx, 0x2c(%rsp)
    0000011a: 	shrl	$0x2, %ecx
    0000011d: 	leal	0x1(%rcx), %edx
    00000120: 	movl	%ecx, 0x64(%rsp)
    00000124: 	movl	%edx, %eax
    00000126: 	movl	%edx, 0x3c(%rsp)
    0000012a: 	andl	$-0x2, %edx
    0000012d: 	shrl	%eax
    0000012f: 	leal	0x1(,%rdx,4), %esi
    00000136: 	movl	%edx, 0x38(%rsp)
    0000013a: 	subl	$0x1, %eax
    0000013d: 	movl	%esi, 0x98(%rsp)
    00000144: 	addq	$0x1, %rax
    00000148: 	shlq	$0x5, %rax
    0000014c: 	movq	%rax, 0x40(%rsp)
    00000151: 	movl	%ecx, %eax
    00000153: 	shlq	$0x2, %rax
    00000157: 	movq	%rax, 0x70(%rsp)
    0000015c: 	leal	0x5(,%rcx,4), %eax
    00000163: 	subl	%edx, %ecx
    00000165: 	movl	%eax, 0x30(%rsp)
    00000169: 	leaq	-0x1(%rdi), %rax
    0000016d: 	movq	%rax, 0x80(%rsp)
    00000175: 	movq	%rdi, %rax
    00000178: 	andq	$-0x4, %rdi
    0000017c: 	shrq	$0x2, %rax
    00000180: 	movq	%rdi, 0x78(%rsp)
    00000185: 	shlq	$0x4, %rax
    00000189: 	movl	%ecx, 0x68(%rsp)
    0000018d: 	movq	%rax, 0x90(%rsp)
    00000195: 	leal	(%rsi,%rcx,4), %eax
    00000198: 	movl	%eax, 0x6c(%rsp)
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp2282:
    000001a0: 	cmpl	$0x1, 0x20(%rsp)
    000001a5: 	jle	.Ltmp2257 # Offset: 421
    000001ab: 	movl	0x34(%rsp), %eax
    000001af: 	movl	$0x1, 0x18(%rsp)
    000001b7: 	xorl	%r13d, %r13d
    000001ba: 	movl	0x8c(%rsp), %ecx
    000001c1: 	movl	0x24(%rsp), %edx
    000001c5: 	subl	$0x1, %eax
    000001c8: 	movaps	DATAat0x49430(%rip), %xmm2
    000001cf: 	movl	%eax, 0x1c(%rsp)
    000001d3: 	movl	0x38(%rsp), %eax
    000001d7: 	shlq	$0x2, %rax
    000001db: 	movq	%rax, 0x48(%rsp)
    000001e0: 	addq	$0x4, %rax
    000001e4: 	movq	%rax, 0x50(%rsp)
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp2268:
    000001f0: 	addl	$0x1, 0x18(%rsp)
    000001f5: 	cmpl	$0x1, 0x28(%rsp)
    000001fa: 	movl	$0x1, %eax
    000001ff: 	jle	.Ltmp2258 # Offset: 511
    00000205: 	movslq	%edx, %r10
    00000208: 	movslq	%r13d, %r14
    0000020b: 	leaq	0x4(,%r10,4), %rsi
    00000213: 	leaq	0x14(,%r14,4), %rbp
    0000021b: 	movq	%r14, 0x10(%rsp)
    00000220: 	movslq	%ecx, %r14
    00000223: 	leaq	(%r15,%rsi), %rax
    00000227: 	leaq	0xc(%rbx,%rsi), %rdi
    0000022c: 	movq	%rax, %r9
    0000022f: 	leaq	0x8(%r15,%rsi), %r8
    00000234: 	leaq	0x14(,%r14,4), %r12
    0000023c: 	subq	%rdi, %r9
    0000023f: 	addq	$0x4, %r9
    00000243: 	cmpq	$0x18, %r9
    00000247: 	movq	%r8, %r9
    0000024a: 	seta	%r11b
    0000024e: 	subq	%rdi, %r9
    00000251: 	addq	$0x4, %r9
    00000255: 	cmpq	$0x18, %r9
    00000259: 	seta	%r9b
    0000025d: 	andl	%r11d, %r9d
    00000260: 	cmpl	$0x3, 0x2c(%rsp)
    00000265: 	seta	%r11b
    00000269: 	andl	%r11d, %r9d
    0000026c: 	leaq	(%rbx,%rbp), %r11
    00000270: 	movb	%r9b, 0x8(%rsp)
    00000275: 	movq	%rax, %r9
    00000278: 	subq	%r11, %r9
    0000027b: 	leaq	0xc(%r9), %r11
    0000027f: 	cmpq	$0x18, %r11
    00000283: 	seta	%r11b
    00000287: 	testb	%r11b, 0x8(%rsp)
    0000028c: 	je	.Ltmp2259 # Offset: 652
    00000292: 	leaq	(%rbx,%r12), %r11
    00000296: 	movq	%rax, %r9
    00000299: 	subq	%r11, %r9
    0000029c: 	addq	$0xc, %r9
    000002a0: 	cmpq	$0x18, %r9
    000002a4: 	jbe	.Ltmp2259 # Offset: 676
    000002aa: 	leaq	-0x10(%rbx,%rbp), %r9
    000002af: 	leaq	-0x10(%rbx,%r12), %rbp
    000002b4: 	movq	0x40(%rsp), %r12
    000002b9: 	pxor	%xmm6, %xmm6
    000002bd: 	leaq	-0x4(%rbx,%rsi), %r11
    000002c2: 	xorl	%esi, %esi
    000002c4: 	nopl	(%rax) # Size: 4
.Ltmp2260:
    000002c8: 	movups	0x10(%rax), %xmm5
    000002cc: 	movups	(%rax), %xmm7
    000002cf: 	addq	$0x20, %rax
    000002d3: 	movups	(%r11,%rsi), %xmm8
    000002d8: 	movups	(%r11,%rsi), %xmm9
    000002dd: 	shufps	$0xee, %xmm5, %xmm7
    000002e1: 	movups	0x10(%r11,%rsi), %xmm5
    000002e7: 	movups	-0x20(%rax), %xmm0
    000002eb: 	movhps	0x10(%r11,%rsi), %xmm9
    000002f1: 	movups	0x10(%r9,%rsi), %xmm12
    000002f7: 	movups	0x10(%rbp,%rsi), %xmm13
    000002fd: 	shufps	$0xee, %xmm5, %xmm8
    00000302: 	movups	(%r9,%rsi), %xmm5
    00000307: 	movhps	-0x10(%rax), %xmm0
    0000030b: 	movhps	0x10(%r9,%rsi), %xmm5
    00000311: 	addps	%xmm9, %xmm5
    00000315: 	movups	(%rbp,%rsi), %xmm9
    0000031b: 	movhps	0x10(%rbp,%rsi), %xmm9
    00000321: 	addps	%xmm8, %xmm5
    00000325: 	addps	%xmm9, %xmm5
    00000329: 	movq	0x10(%rdi,%rsi), %xmm9
    00000330: 	addps	%xmm6, %xmm5
    00000333: 	mulps	%xmm1, %xmm5
    00000336: 	subps	%xmm0, %xmm5
    00000339: 	mulps	%xmm2, %xmm5
    0000033c: 	addps	%xmm0, %xmm5
    0000033f: 	movq	(%rdi,%rsi), %xmm0
    00000344: 	movlhps	%xmm9, %xmm0
    00000348: 	movups	(%r9,%rsi), %xmm9
    0000034d: 	shufps	$0xee, %xmm12, %xmm9
    00000352: 	addps	%xmm9, %xmm8
    00000356: 	addps	%xmm8, %xmm0
    0000035a: 	movups	(%rbp,%rsi), %xmm8
    00000360: 	movq	%xmm5, -0x20(%rax)
    00000365: 	movhps	%xmm5, -0x10(%rax)
    00000369: 	shufps	$0xee, %xmm13, %xmm8
    0000036e: 	addps	%xmm8, %xmm0
    00000372: 	addps	%xmm6, %xmm0
    00000375: 	mulps	%xmm1, %xmm0
    00000378: 	subps	%xmm7, %xmm0
    0000037b: 	mulps	%xmm2, %xmm0
    0000037e: 	addps	%xmm7, %xmm0
    00000381: 	movq	%xmm0, (%r8,%rsi)
    00000387: 	movhps	%xmm0, 0x10(%r8,%rsi)
    0000038d: 	addq	$0x20, %rsi
    00000391: 	cmpq	%rsi, %r12
    00000394: 	jne	.Ltmp2260 # Offset: 916
    0000039a: 	movl	0x38(%rsp), %eax
    0000039e: 	cmpl	%eax, 0x3c(%rsp)
    000003a2: 	je	.Ltmp2261 # Offset: 930
    000003a8: 	cmpl	%eax, 0x64(%rsp)
    000003ac: 	je	.Ltmp2262 # Offset: 940
    000003b2: 	movq	0x48(%rsp), %r11
    000003b7: 	movq	0x10(%rsp), %r8
    000003bc: 	xorps	%xmm8, %xmm8
    000003c0: 	movq	DATAat0x49420(%rip), %xmm6
    000003c8: 	movq	DATAat0x49430(%rip), %xmm7
    000003d0: 	leaq	0x1(%r8,%r11), %rsi
    000003d5: 	leaq	0x1(%r10,%r11), %rax
    000003da: 	addq	0x50(%rsp), %r10
    000003df: 	shlq	$0x2, %rax
    000003e3: 	leaq	(%rbx,%rsi,4), %r9
    000003e7: 	leaq	0x1(%r14,%r11), %rsi
    000003ec: 	leaq	(%r15,%rax), %rdi
    000003f0: 	leaq	-0x4(%rbx,%rax), %r8
    000003f5: 	leaq	(%rbx,%rsi,4), %r11
    000003f9: 	leaq	0x8(%r15,%rax), %rbp
    000003fe: 	xorl	%esi, %esi
    00000400: 	xorl	%eax, %eax
    00000402: 	leaq	(%rbx,%r10,4), %r10
.Ltmp2263:
    00000406: 	movq	0x8(%r8,%rax), %xmm10
    0000040d: 	movq	(%r10,%rax), %xmm11
    00000413: 	addl	$0x1, %esi
    00000416: 	movq	0x8(%r9,%rax), %xmm0
    0000041d: 	movq	0x8(%rdi,%rax), %xmm5
    00000423: 	movq	(%rdi,%rax), %xmm9
    00000429: 	addps	%xmm10, %xmm0
    0000042d: 	addps	%xmm11, %xmm0
    00000431: 	movq	0x8(%r11,%rax), %xmm11
    00000438: 	addps	%xmm11, %xmm0
    0000043c: 	movq	(%r8,%rax), %xmm11
    00000442: 	addps	%xmm8, %xmm0
    00000446: 	mulps	%xmm6, %xmm0
    00000449: 	subps	%xmm5, %xmm0
    0000044c: 	mulps	%xmm7, %xmm0
    0000044f: 	addps	%xmm5, %xmm0
    00000452: 	movq	(%r9,%rax), %xmm5
    00000458: 	addps	%xmm11, %xmm5
    0000045c: 	addps	%xmm10, %xmm5
    00000460: 	movq	(%r11,%rax), %xmm10
    00000466: 	addps	%xmm10, %xmm5
    0000046a: 	addps	%xmm8, %xmm5
    0000046e: 	mulps	%xmm6, %xmm5
    00000471: 	subps	%xmm9, %xmm5
    00000475: 	mulps	%xmm7, %xmm5
    00000478: 	addps	%xmm9, %xmm5
    0000047c: 	movlps	%xmm5, (%rdi,%rax)
    00000480: 	movlps	%xmm0, (%rbp,%rax)
    00000485: 	addq	$0x10, %rax
    00000489: 	cmpl	%esi, 0x68(%rsp)
    0000048d: 	ja	.Ltmp2263 # Offset: 1165
    00000493: 	movl	0x6c(%rsp), %eax
.Ltmp2285:
    00000497: 	leal	(%r13,%rax), %r10d
    0000049c: 	leal	0x1(%rax), %esi
    0000049f: 	movslq	%r10d, %r10
    000004a2: 	leal	0x2(%rax), %edi
    000004a5: 	leal	0x3(%rax), %r8d
    000004a9: 	movss	(%rbx,%r10,4), %xmm0
    000004af: 	leal	(%rdx,%rsi), %r10d
    000004b3: 	leal	(%rdx,%rax), %r9d
    000004b7: 	movslq	%r10d, %r10
    000004ba: 	movslq	%r9d, %r9
    000004bd: 	leaq	(%rbx,%r10,4), %rbp
    000004c1: 	leal	(%r13,%rsi), %r10d
    000004c6: 	addl	%ecx, %esi
    000004c8: 	movslq	%r10d, %r10
    000004cb: 	leaq	(%r15,%r9,4), %r11
    000004cf: 	movslq	%esi, %rsi
    000004d2: 	movss	(%rbx,%r10,4), %xmm6
    000004d8: 	leal	(%r13,%rdi), %r10d
    000004dd: 	addss	(%rbx,%r9,4), %xmm6
    000004e3: 	movslq	%r10d, %r10
    000004e6: 	leal	(%rdx,%rdi), %r9d
    000004ea: 	addl	%ecx, %edi
    000004ec: 	movss	(%rbx,%r10,4), %xmm5
    000004f2: 	leal	(%r13,%r8), %r10d
    000004f7: 	movslq	%r9d, %r9
    000004fa: 	addl	%ecx, %r8d
    000004fd: 	movslq	%r10d, %r10
    00000500: 	addss	(%rbp), %xmm5
    00000505: 	movslq	%edi, %rdi
    00000508: 	movslq	%r8d, %r8
    0000050b: 	movss	(%rbx,%r10,4), %xmm7
    00000511: 	leal	-0x1(%rdx,%rax), %r10d
    00000516: 	addl	%ecx, %eax
    00000518: 	addss	(%rbx,%r9,4), %xmm7
    0000051e: 	movslq	%r10d, %r10
    00000521: 	cltq
    00000523: 	addss	(%rbx,%r10,4), %xmm0
    00000529: 	unpcklps	%xmm7, %xmm5
    0000052c: 	movss	(%rbx,%rsi,4), %xmm7
    00000531: 	unpcklps	%xmm6, %xmm0
    00000534: 	movss	(%rbx,%rdi,4), %xmm6
    00000539: 	movlhps	%xmm5, %xmm0
    0000053c: 	movups	(%rbp), %xmm5
    00000540: 	addps	%xmm5, %xmm0
    00000543: 	movss	(%rbx,%r8,4), %xmm5
    00000549: 	unpcklps	%xmm5, %xmm6
    0000054c: 	movss	(%rbx,%rax,4), %xmm5
    00000551: 	unpcklps	%xmm7, %xmm5
    00000554: 	movups	(%r11), %xmm7
    00000558: 	movlhps	%xmm6, %xmm5
    0000055b: 	addps	%xmm5, %xmm0
    0000055e: 	pxor	%xmm5, %xmm5
    00000562: 	addps	%xmm5, %xmm0
    00000565: 	mulps	%xmm1, %xmm0
    00000568: 	subps	%xmm7, %xmm0
    0000056b: 	mulps	%xmm2, %xmm0
    0000056e: 	addps	%xmm7, %xmm0
    00000571: 	movups	%xmm0, (%r11)
.Ltmp2261:
    00000575: 	movl	0x30(%rsp), %eax
.Ltmp2258:
    00000579: 	cmpl	0x1c(%rsp), %eax
    0000057d: 	jge	.Ltmp2264 # Offset: 1405
    00000583: 	movslq	%eax, %r10
    00000586: 	movslq	%edx, %rsi
    00000589: 	movslq	%ecx, %r8
    0000058c: 	movl	0x34(%rsp), %edi
    00000590: 	leaq	(%rsi,%r10), %r12
    00000594: 	movslq	%r13d, %rsi
    00000597: 	addq	%r10, %r8
    0000059a: 	addq	%r10, %rsi
    0000059d: 	movq	%r15, %r10
    000005a0: 	subl	%eax, %edi
    000005a2: 	subq	%rbx, %r10
    000005a5: 	leaq	0x4(,%r8,4), %r14
    000005ad: 	leaq	(,%r12,4), %r11
    000005b5: 	movq	%rsi, 0x8(%rsp)
    000005ba: 	cmpq	$0x10, %r10
    000005be: 	leaq	0x4(,%rsi,4), %rbp
    000005c6: 	movq	%r14, 0x10(%rsp)
    000005cb: 	leaq	(%r15,%r11), %r9
    000005cf: 	seta	%r10b
    000005d3: 	cmpl	$0x2, %edi
    000005d6: 	movq	%r9, %rsi
    000005d9: 	setne	%r14b
    000005dd: 	andl	%r14d, %r10d
    000005e0: 	leaq	(%rbx,%rbp), %r14
    000005e4: 	subq	%r14, %rsi
    000005e7: 	cmpq	$0x8, %rsi
    000005eb: 	seta	%r14b
    000005ef: 	testb	%r14b, %r10b
    000005f2: 	je	.Ltmp2265 # Offset: 1522
    000005f8: 	leaq	0x4(,%r8,4), %rsi
    00000600: 	movq	%r9, %r10
    00000603: 	movq	%rsi, %r14
    00000606: 	addq	%rbx, %r14
    00000609: 	subq	%r14, %r10
    0000060c: 	cmpq	$0x8, %r10
    00000610: 	jbe	.Ltmp2265 # Offset: 1552
    00000616: 	leal	-0x2(%rdi), %r14d
    0000061a: 	leal	-0x1(%rdi), %r10d
    0000061e: 	cmpl	$0x2, %r14d
    00000622: 	jbe	.Ltmp2266 # Offset: 1570
    00000628: 	movups	-0x4(%rbx,%r11), %xmm6
    0000062e: 	movups	-0x4(%rbx,%rbp), %xmm0
    00000633: 	movups	0x4(%rbx,%r11), %xmm5
    00000639: 	addps	%xmm6, %xmm0
    0000063c: 	movups	(%r9), %xmm6
    00000640: 	addps	%xmm5, %xmm0
    00000643: 	movups	-0x4(%rbx,%rsi), %xmm5
    00000648: 	addps	%xmm5, %xmm0
    0000064b: 	pxor	%xmm5, %xmm5
    0000064f: 	addps	%xmm5, %xmm0
    00000652: 	mulps	DATAat0x49420(%rip), %xmm0
    00000659: 	subps	%xmm6, %xmm0
    0000065c: 	mulps	DATAat0x49430(%rip), %xmm0
    00000663: 	addps	%xmm6, %xmm0
    00000666: 	movups	%xmm0, (%r9)
    0000066a: 	movl	%r10d, %r9d
    0000066d: 	andl	$-0x4, %r9d
    00000671: 	addl	%r9d, %eax
    00000674: 	cmpl	%r10d, %r9d
    00000677: 	je	.Ltmp2264 # Offset: 1655
    0000067d: 	subl	%r9d, %edi
    00000680: 	leal	-0x1(%rdi), %r10d
    00000684: 	cmpl	$0x2, %edi
    00000687: 	je	.Ltmp2267 # Offset: 1671
.Ltmp2284:
    00000689: 	movl	%r9d, %edi
    0000068c: 	movq	0x8(%rsp), %rsi
    00000691: 	movq	DATAat0x49430(%rip), %xmm7
    00000699: 	leaq	(%rdi,%r12), %r9
    0000069d: 	shlq	$0x2, %r9
    000006a1: 	addq	%rdi, %rsi
    000006a4: 	addq	%r8, %rdi
    000006a7: 	movq	(%rbx,%rsi,4), %xmm0
    000006ac: 	movq	-0x4(%rbx,%r9), %xmm6
    000006b3: 	leaq	(%r15,%r9), %r11
    000006b7: 	movl	%r10d, %esi
    000006ba: 	movq	(%r11), %xmm5
    000006bf: 	andl	$-0x2, %esi
    000006c2: 	addps	%xmm6, %xmm0
    000006c5: 	movq	0x4(%rbx,%r9), %xmm6
    000006cc: 	addl	%esi, %eax
    000006ce: 	addps	%xmm6, %xmm0
    000006d1: 	movq	(%rbx,%rdi,4), %xmm6
    000006d6: 	addps	%xmm6, %xmm0
    000006d9: 	xorps	%xmm6, %xmm6
    000006dc: 	addps	%xmm6, %xmm0
    000006df: 	movq	DATAat0x49420(%rip), %xmm6
    000006e7: 	mulps	%xmm6, %xmm0
    000006ea: 	subps	%xmm5, %xmm0
    000006ed: 	mulps	%xmm7, %xmm0
    000006f0: 	addps	%xmm5, %xmm0
    000006f3: 	movlps	%xmm0, (%r11)
    000006f7: 	cmpl	%r10d, %esi
    000006fa: 	je	.Ltmp2264 # Offset: 1786
.Ltmp2267:
    000006fc: 	leal	(%rdx,%rax), %esi
    000006ff: 	movslq	%esi, %rsi
    00000702: 	leaq	(%r15,%rsi,4), %rdi
    00000706: 	leal	(%r13,%rax), %esi
    0000070b: 	movslq	%esi, %rsi
    0000070e: 	movss	(%rdi), %xmm5
    00000712: 	movss	(%rbx,%rsi,4), %xmm0
    00000717: 	leal	-0x1(%rax,%rdx), %esi
    0000071b: 	movslq	%esi, %rsi
    0000071e: 	addss	(%rbx,%rsi,4), %xmm0
    00000723: 	leal	0x1(%rax,%rdx), %esi
    00000727: 	addl	%ecx, %eax
    00000729: 	movslq	%esi, %rsi
    0000072c: 	cltq
    0000072e: 	addss	(%rbx,%rsi,4), %xmm0
    00000733: 	addss	(%rbx,%rax,4), %xmm0
    00000738: 	addss	%xmm3, %xmm0
    0000073c: 	mulss	DATAat0x49420(%rip), %xmm0
    00000744: 	subss	%xmm5, %xmm0
    00000748: 	mulss	DATAat0x49430(%rip), %xmm0
    00000750: 	addss	%xmm5, %xmm0
    00000754: 	movss	%xmm0, (%rdi)
.Ltmp2264:
    00000758: 	movl	0x24(%rsp), %eax
    0000075c: 	movl	0x18(%rsp), %edi
    00000760: 	addl	%eax, %r13d
    00000763: 	addl	%eax, %edx
    00000765: 	addl	%eax, %ecx
    00000767: 	cmpl	%edi, 0x20(%rsp)
    0000076b: 	jne	.Ltmp2268 # Offset: 1899
.Ltmp2257:
    00000771: 	cmpq	$0x0, 0x58(%rsp)
    00000777: 	je	.Ltmp2269 # Offset: 1911
    0000077d: 	cmpq	$0x2, 0x80(%rsp)
    00000786: 	jbe	.Ltmp2270 # Offset: 1926
    0000078c: 	movaps	DATAat0x494b0(%rip), %xmm7
    00000793: 	xorl	%eax, %eax
    00000795: 	movaps	%xmm3, %xmm2
    00000798: 	pxor	%xmm6, %xmm6
    0000079c: 	movq	0x90(%rsp), %rdx
    000007a4: 	nopl	(%rax) # Size: 4
.Ltmp2271:
    000007a8: 	movups	(%r15,%rax), %xmm0
    000007ad: 	movups	(%rbx,%rax), %xmm5
    000007b1: 	addq	$0x10, %rax
    000007b5: 	subps	%xmm0, %xmm5
    000007b8: 	movaps	%xmm5, %xmm0
    000007bb: 	movaps	%xmm5, %xmm8
    000007bf: 	cmpltps	%xmm6, %xmm0
    000007c3: 	xorps	%xmm7, %xmm8
    000007c7: 	andps	%xmm0, %xmm8
    000007cb: 	andnps	%xmm5, %xmm0
    000007ce: 	orps	%xmm8, %xmm0
    000007d2: 	addss	%xmm0, %xmm2
    000007d6: 	movaps	%xmm0, %xmm5
    000007d9: 	shufps	$0x55, %xmm0, %xmm5
    000007dd: 	addss	%xmm2, %xmm5
    000007e1: 	movaps	%xmm0, %xmm2
    000007e4: 	unpckhps	%xmm0, %xmm2
    000007e7: 	shufps	$0xff, %xmm0, %xmm0
    000007eb: 	addss	%xmm5, %xmm2
    000007ef: 	addss	%xmm0, %xmm2
    000007f3: 	cmpq	%rdx, %rax
    000007f6: 	jne	.Ltmp2271 # Offset: 2038
    000007f8: 	movq	0x78(%rsp), %rax
    000007fd: 	cmpq	%rax, 0x58(%rsp)
    00000802: 	je	.Ltmp2272 # Offset: 2050
.Ltmp2287:
    00000804: 	movss	(%rbx,%rax,4), %xmm0
    00000809: 	subss	(%r15,%rax,4), %xmm0
    0000080f: 	leaq	(,%rax,4), %rdx
    00000817: 	comiss	%xmm0, %xmm3
    0000081a: 	jbe	.Ltmp2273 # Offset: 2074
    0000081c: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2273:
    00000823: 	addss	%xmm0, %xmm2
    00000827: 	leaq	0x1(%rax), %rcx
    0000082b: 	cmpq	%rcx, 0x58(%rsp)
    00000830: 	jbe	.Ltmp2272 # Offset: 2096
    00000832: 	movss	0x4(%rbx,%rdx), %xmm0
    00000838: 	subss	0x4(%r15,%rdx), %xmm0
    0000083f: 	comiss	%xmm0, %xmm3
    00000842: 	jbe	.Ltmp2274 # Offset: 2114
    00000844: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2274:
    0000084b: 	addss	%xmm0, %xmm2
    0000084f: 	addq	$0x2, %rax
    00000853: 	cmpq	%rax, 0x58(%rsp)
    00000858: 	jbe	.Ltmp2272 # Offset: 2136
    0000085a: 	movss	0x8(%rbx,%rdx), %xmm0
    00000860: 	subss	0x8(%r15,%rdx), %xmm0
    00000867: 	comiss	%xmm0, %xmm3
    0000086a: 	jbe	.Ltmp2275 # Offset: 2154
    0000086c: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2275:
    00000873: 	addss	%xmm0, %xmm2
.Ltmp2272:
    00000877: 	movq	0x58(%rsp), %rdx
    0000087c: 	movaps	%xmm3, %xmm5
    0000087f: 	xorl	%eax, %eax
    00000881: 	movss	DATAat0x494c0(%rip), %xmm6
    00000889: 	nopl	(%rax) # Size: 7
.Ltmp2277:
    00000890: 	movss	(%rbx,%rax,4), %xmm0
    00000895: 	subss	(%r15,%rax,4), %xmm0
    0000089b: 	comiss	%xmm0, %xmm3
    0000089e: 	jbe	.Ltmp2276 # Offset: 2206
    000008a0: 	xorps	%xmm6, %xmm0
.Ltmp2276:
    000008a3: 	maxss	%xmm5, %xmm0
    000008a7: 	addq	$0x1, %rax
    000008ab: 	movaps	%xmm0, %xmm5
    000008ae: 	cmpq	%rax, %rdx
    000008b1: 	jne	.Ltmp2277 # Offset: 2225
    000008b3: 	movl	0x60(%rsp), %eax
    000008b7: 	cmpl	%eax, 0x110(%rsp)
    000008be: 	jge	.Ltmp2278 # Offset: 2238
    000008c0: 	movss	DATAat0x49548(%rip), %xmm0
    000008c8: 	comiss	%xmm2, %xmm0
    000008cb: 	ja	.Ltmp2279 # Offset: 2251
    000008d1: 	ucomiss	%xmm2, %xmm2
    000008d4: 	jp	.Ltmp2280 # Offset: 2260
    000008da: 	movss	DATAat0x4954c(%rip), %xmm0
    000008e2: 	comiss	%xmm5, %xmm0
    000008e5: 	ja	.Ltmp2281 # Offset: 2277
    000008eb: 	ucomiss	%xmm5, %xmm5
    000008ee: 	jp	.Ltmp2280 # Offset: 2286
.Ltmp2278:
    000008f4: 	addl	$0x1, 0x60(%rsp)
    000008f9: 	movq	%r15, %rax
    000008fc: 	movl	0x60(%rsp), %ecx
    00000900: 	movq	%rbx, %r15
    00000903: 	cmpl	0x88(%rsp), %ecx
    0000090a: 	je	.Ltmp2279 # Offset: 2314
    00000910: 	movq	%rax, %rbx
    00000913: 	jmp	.Ltmp2282 # Offset: 2323
    00000918: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2259:
    00000920: 	subq	$0x4, %rsi
    00000924: 	addq	0x70(%rsp), %r10
    00000929: 	leaq	-0x14(%rbx,%rbp), %rdi
    0000092e: 	leaq	(%r15,%rsi), %rax
    00000932: 	leaq	-0x14(%rbx,%r12), %r8
    00000937: 	pxor	%xmm5, %xmm5
    0000093b: 	addq	%rbx, %rsi
    0000093e: 	leaq	0x10(%rbx,%r10,4), %r9
    00000943: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2283:
    00000948: 	movss	0x4(%rdi), %xmm0
    0000094d: 	movss	0x8(%rdi), %xmm7
    00000952: 	addq	$0x10, %rsi
    00000956: 	addq	$0x10, %rax
    0000095a: 	addss	-0xc(%rsi), %xmm7
    0000095f: 	movss	0xc(%rdi), %xmm6
    00000964: 	addq	$0x10, %r8
    00000968: 	addq	$0x10, %rdi
    0000096c: 	movss	(%rdi), %xmm8
    00000971: 	addss	-0x10(%rsi), %xmm0
    00000976: 	addss	-0x4(%rsi), %xmm8
    0000097c: 	addss	-0x8(%rsi), %xmm6
    00000981: 	unpcklps	%xmm7, %xmm0
    00000984: 	movups	-0x8(%rsi), %xmm7
    00000988: 	unpcklps	%xmm8, %xmm6
    0000098c: 	movss	-0x8(%r8), %xmm8
    00000992: 	movlhps	%xmm6, %xmm0
    00000995: 	movss	(%r8), %xmm6
    0000099a: 	addps	%xmm7, %xmm0
    0000099d: 	movss	-0x4(%r8), %xmm7
    000009a3: 	unpcklps	%xmm6, %xmm7
    000009a6: 	movss	-0xc(%r8), %xmm6
    000009ac: 	unpcklps	%xmm8, %xmm6
    000009b0: 	movlhps	%xmm7, %xmm6
    000009b3: 	addps	%xmm6, %xmm0
    000009b6: 	movups	-0xc(%rax), %xmm6
    000009ba: 	addps	%xmm5, %xmm0
    000009bd: 	mulps	%xmm1, %xmm0
    000009c0: 	subps	%xmm6, %xmm0
    000009c3: 	mulps	%xmm4, %xmm0
    000009c6: 	addps	%xmm6, %xmm0
    000009c9: 	movups	%xmm0, -0xc(%rax)
    000009cd: 	cmpq	%rsi, %r9
    000009d0: 	jne	.Ltmp2283 # Offset: 2512
    000009d6: 	jmp	.Ltmp2261 # Offset: 2518
    000009db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2265:
    000009e0: 	leal	-0x1(%rax,%rdx), %esi
    000009e4: 	leal	0x1(%rax), %edi
    000009e7: 	movss	-0x4(%rbx,%rbp), %xmm0
    000009ed: 	movq	0x10(%rsp), %r14
    000009f2: 	movslq	%esi, %rsi
    000009f5: 	movss	DATAat0x49420(%rip), %xmm5
    000009fd: 	movss	(%r9), %xmm7
    00000a02: 	addss	(%rbx,%rsi,4), %xmm0
    00000a07: 	leal	(%rdi,%rdx), %esi
    00000a0a: 	movss	DATAat0x49430(%rip), %xmm6
    00000a12: 	movslq	%esi, %rsi
    00000a15: 	shlq	$0x2, %rsi
    00000a19: 	leaq	(%rbx,%rsi), %r8
    00000a1d: 	addss	(%r8), %xmm0
    00000a22: 	addss	-0x4(%rbx,%r14), %xmm0
    00000a29: 	movl	0x1c(%rsp), %r14d
    00000a2e: 	addss	%xmm3, %xmm0
    00000a32: 	mulss	%xmm5, %xmm0
    00000a36: 	subss	%xmm7, %xmm0
    00000a3a: 	mulss	%xmm6, %xmm0
    00000a3e: 	addss	%xmm7, %xmm0
    00000a42: 	movss	%xmm0, (%r9)
    00000a47: 	cmpl	%r14d, %edi
    00000a4a: 	jge	.Ltmp2264 # Offset: 2634
    00000a50: 	leal	(%rdi,%r13), %r9d
    00000a54: 	leal	0x2(%rax), %r10d
    00000a58: 	addl	%ecx, %edi
    00000a5a: 	addq	%r15, %rsi
    00000a5d: 	movslq	%r9d, %r9
    00000a60: 	movslq	%edi, %rdi
    00000a63: 	movss	(%rsi), %xmm7
    00000a67: 	movss	(%rbx,%r9,4), %xmm0
    00000a6d: 	leal	(%r10,%rdx), %r9d
    00000a71: 	addss	(%rbx,%r12,4), %xmm0
    00000a77: 	movslq	%r9d, %r9
    00000a7a: 	shlq	$0x2, %r9
    00000a7e: 	leaq	(%rbx,%r9), %r11
    00000a82: 	addss	(%r11), %xmm0
    00000a87: 	addss	(%rbx,%rdi,4), %xmm0
    00000a8c: 	addss	%xmm3, %xmm0
    00000a90: 	mulss	%xmm5, %xmm0
    00000a94: 	subss	%xmm7, %xmm0
    00000a98: 	mulss	%xmm6, %xmm0
    00000a9c: 	addss	%xmm7, %xmm0
    00000aa0: 	movss	%xmm0, (%rsi)
    00000aa4: 	cmpl	%r14d, %r10d
    00000aa7: 	jge	.Ltmp2264 # Offset: 2727
    00000aad: 	leal	(%r10,%r13), %esi
    00000ab1: 	addq	%r15, %r9
    00000ab4: 	movslq	%esi, %rsi
    00000ab7: 	movss	(%r9), %xmm7
    00000abc: 	movss	(%rbx,%rsi,4), %xmm0
    00000ac1: 	leal	0x3(%rax), %esi
    00000ac4: 	addss	(%r8), %xmm0
    00000ac9: 	leal	(%rsi,%rdx), %edi
    00000acc: 	movslq	%edi, %rdi
    00000acf: 	addss	(%rbx,%rdi,4), %xmm0
    00000ad4: 	leaq	(,%rdi,4), %r8
    00000adc: 	leal	(%r10,%rcx), %edi
    00000ae0: 	movslq	%edi, %rdi
    00000ae3: 	addss	(%rbx,%rdi,4), %xmm0
    00000ae8: 	addss	%xmm3, %xmm0
    00000aec: 	mulss	%xmm5, %xmm0
    00000af0: 	subss	%xmm7, %xmm0
    00000af4: 	mulss	%xmm6, %xmm0
    00000af8: 	addss	%xmm7, %xmm0
    00000afc: 	movss	%xmm0, (%r9)
    00000b01: 	cmpl	%r14d, %esi
    00000b04: 	jge	.Ltmp2264 # Offset: 2820
    00000b0a: 	leal	(%rsi,%r13), %edi
    00000b0e: 	leal	0x4(%rax,%rdx), %eax
    00000b12: 	addq	%r15, %r8
    00000b15: 	cltq
    00000b17: 	movslq	%edi, %rdi
    00000b1a: 	movss	(%r8), %xmm7
    00000b1f: 	movss	(%rbx,%rdi,4), %xmm0
    00000b24: 	addss	(%r11), %xmm0
    00000b29: 	addss	(%rbx,%rax,4), %xmm0
    00000b2e: 	leal	(%rsi,%rcx), %eax
    00000b31: 	cltq
    00000b33: 	addss	(%rbx,%rax,4), %xmm0
    00000b38: 	addss	%xmm3, %xmm0
    00000b3c: 	mulss	%xmm5, %xmm0
    00000b40: 	subss	%xmm7, %xmm0
    00000b44: 	mulss	%xmm6, %xmm0
    00000b48: 	addss	%xmm7, %xmm0
    00000b4c: 	movss	%xmm0, (%r8)
    00000b51: 	jmp	.Ltmp2264 # Offset: 2897
.Ltmp2266:
    00000b56: 	xorl	%r9d, %r9d
    00000b59: 	jmp	.Ltmp2284 # Offset: 2905
.Ltmp2262:
    00000b5e: 	movl	0x98(%rsp), %eax
    00000b65: 	jmp	.Ltmp2285 # Offset: 2917
.Ltmp2269:
    00000b6a: 	movl	0x60(%rsp), %eax
    00000b6e: 	movaps	%xmm3, %xmm2
    00000b71: 	cmpl	%eax, 0x110(%rsp)
    00000b78: 	jl	.Ltmp2286 # Offset: 2936
    00000b7a: 	movaps	%xmm3, %xmm5
    00000b7d: 	jmp	.Ltmp2278 # Offset: 2941
.Ltmp2270:
    00000b82: 	movaps	%xmm3, %xmm2
    00000b85: 	xorl	%eax, %eax
    00000b87: 	jmp	.Ltmp2287 # Offset: 2951
.Ltmp2286:
    00000b8c: 	movaps	%xmm2, %xmm5
.Ltmp2279:
    00000b8f: 	ucomiss	%xmm2, %xmm2
    00000b92: 	setp	%r12b
    00000b96: 	ucomiss	%xmm5, %xmm5
    00000b99: 	setp	%al
    00000b9c: 	orl	%eax, %r12d
.Ltmp2293:
    00000b9f: 	movss	%xmm5, 0x8(%rsp)
    00000ba5: 	movss	%xmm2, 0x18(%rsp)
    00000bab: 	callq	clock@PLT # Offset: 2987
    00000bb0: 	movl	0x9c(%rsp), %ecx
    00000bb7: 	pxor	%xmm0, %xmm0
    00000bbb: 	movss	0xac(%rsp), %xmm4
    00000bc4: 	movq	%rax, end_time(%rip)
    00000bcb: 	subq	start_time(%rip), %rax
    00000bd2: 	cvtsi2sd	%rax, %xmm0
    00000bd7: 	movl	%ecx, %eax
    00000bd9: 	divsd	DATAat0x49520(%rip), %xmm0
    00000be1: 	movss	0x18(%rsp), %xmm2
    00000be7: 	shrl	$0x1f, %eax
    00000bea: 	movss	0x8(%rsp), %xmm5
    00000bf0: 	movq	%xmm0, %rbx
    00000bf5: 	addl	%ecx, %eax
    00000bf7: 	movl	0x34(%rsp), %ecx
    00000bfb: 	sarl	%eax
    00000bfd: 	movl	%ecx, %edx
    00000bff: 	imull	%ecx, %eax
    00000c02: 	shrl	$0x1f, %edx
    00000c05: 	addl	%ecx, %edx
    00000c07: 	sarl	%edx
    00000c09: 	addl	%edx, %eax
    00000c0b: 	testb	%r12b, %r12b
    00000c0e: 	cltq
    00000c10: 	subss	(%r15,%rax,4), %xmm4
    00000c16: 	movq	0xa0(%rsp), %rax
    00000c1e: 	movq	0x8(%rax), %rdx
    00000c22: 	movq	(%rax), %rsi
    00000c25: 	movd	%xmm4, %ebp
    00000c29: 	jne	.Ltmp2288 # Offset: 3113
    00000c2f: 	movl	0x60(%rsp), %eax
    00000c33: 	cmpl	%eax, iterations(%rip)
    00000c39: 	jg	.Ltmp2289 # Offset: 3129
    00000c3b: 	comiss	DATAat0x49548(%rip), %xmm2
    00000c42: 	jbe	.Ltmp2289 # Offset: 3138
    00000c44: 	comiss	DATAat0x4954c(%rip), %xmm5
    00000c4b: 	ja	.Ltmp2290 # Offset: 3147
.Ltmp2289:
    00000c51: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c58: 	movss	%xmm5, 0x8(%rsp)
    00000c5e: 	movq	%r12, %rdi
    00000c61: 	movss	%xmm2, 0x18(%rsp)
    00000c67: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3175
    00000c6c: 	movl	$0xa, %edx
    00000c71: 	leaq	DATAat0x491ab(%rip), %rsi
    00000c78: 	movq	%rax, %rdi
    00000c7b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3195
    00000c80: 	movss	0x8(%rsp), %xmm5
    00000c86: 	movss	0x18(%rsp), %xmm2
.Ltmp2292:
    00000c8c: 	movl	$0x4, %edx
    00000c91: 	movq	%r12, %rdi
    00000c94: 	leaq	DATAat0x491b6(%rip), %rsi
    00000c9b: 	movss	%xmm5, 0x8(%rsp)
    00000ca1: 	movss	%xmm2, 0x18(%rsp)
    00000ca7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3239
    00000cac: 	movl	0x60(%rsp), %esi
    00000cb0: 	movq	%r12, %rdi
    00000cb3: 	callq	_ZNSolsEi@PLT # Offset: 3251
    00000cb8: 	movl	$0xb, %edx
    00000cbd: 	leaq	DATAat0x491bb(%rip), %rsi
    00000cc4: 	movq	%rax, %rdi
    00000cc7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3271
    00000ccc: 	movl	$0xa, %edx
    00000cd1: 	leaq	DATAat0x491c7(%rip), %rsi
    00000cd8: 	movq	%r12, %rdi
    00000cdb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3291
    00000ce0: 	movss	0x18(%rsp), %xmm2
    00000ce6: 	movq	%r12, %rdi
    00000ce9: 	pxor	%xmm0, %xmm0
    00000ced: 	cvtss2sd	%xmm2, %xmm0
    00000cf1: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3313
    00000cf6: 	movl	$0x7, %edx
    00000cfb: 	leaq	DATAat0x491d2(%rip), %rsi
    00000d02: 	movq	%rax, %rdi
    00000d05: 	movq	%rax, %r12
    00000d08: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3336
    00000d0d: 	movss	0x8(%rsp), %xmm5
    00000d13: 	movq	%r12, %rdi
    00000d16: 	pxor	%xmm0, %xmm0
    00000d1a: 	cvtss2sd	%xmm5, %xmm0
    00000d1e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3358
    00000d23: 	movl	$0x10, %edx
    00000d28: 	leaq	DATAat0x491da(%rip), %rsi
    00000d2f: 	movq	%rax, %r12
    00000d32: 	movq	%rax, %rdi
    00000d35: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3381
    00000d3a: 	movd	%ebp, %xmm4
    00000d3e: 	movq	%r12, %rdi
    00000d41: 	pxor	%xmm0, %xmm0
    00000d45: 	cvtss2sd	%xmm4, %xmm0
    00000d49: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3401
    00000d4e: 	movl	$0x8, %edx
    00000d53: 	leaq	DATAat0x491eb(%rip), %rsi
    00000d5a: 	movq	%rax, %rbp
    00000d5d: 	movq	%rax, %rdi
    00000d60: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3424
    00000d65: 	movq	%rbx, %xmm0
    00000d6a: 	movq	%rbp, %rdi
    00000d6d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3437
    00000d72: 	movl	$0x2, %edx
    00000d77: 	leaq	DATAat0x491f4(%rip), %rsi
    00000d7e: 	movq	%rax, %rdi
    00000d81: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3457
    00000d86: 	movl	0xa8(%rsp), %eax
    00000d8d: 	movl	%eax, iterations(%rip)
    00000d93: 	movq	0xc8(%rsp), %rax
    00000d9b: 	subq	%fs:0x28, %rax
    00000da4: 	jne	.Ltmp2291 # Offset: 3492
    00000daa: 	addq	$0xd8, %rsp
    00000db1: 	popq	%rbx
    00000db2: 	popq	%rbp
    00000db3: 	popq	%r12
    00000db5: 	popq	%r13
    00000db7: 	popq	%r14
    00000db9: 	popq	%r15
    00000dbb: 	retq # Offset: 3515
.Ltmp2288:
    00000dbc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000dc3: 	movq	%r12, %rdi
    00000dc6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3526
    00000dcb: 	movl	$0x10, %edx
    00000dd0: 	leaq	DATAat0x493d4(%rip), %rsi
    00000dd7: 	movq	%rax, %rdi
    00000dda: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3546
    00000ddf: 	movss	0x18(%rsp), %xmm2
    00000de5: 	movss	0x8(%rsp), %xmm5
    00000deb: 	jmp	.Ltmp2292 # Offset: 3563
.Ltmp2280:
    00000df0: 	movl	$0x1, %r12d
    00000df6: 	jmp	.Ltmp2293 # Offset: 3574
.Ltmp2290:
    00000dfb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000e02: 	movss	%xmm5, 0x8(%rsp)
    00000e08: 	movq	%r12, %rdi
    00000e0b: 	movss	%xmm2, 0x18(%rsp)
    00000e11: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3601
    00000e16: 	movl	$0x11, %edx
    00000e1b: 	leaq	DATAat0x49199(%rip), %rsi
    00000e22: 	movq	%rax, %rdi
    00000e25: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3621
    00000e2a: 	movss	0x18(%rsp), %xmm2
    00000e30: 	movss	0x8(%rsp), %xmm5
    00000e36: 	jmp	.Ltmp2292 # Offset: 3638
.Ltmp2281:
    00000e3b: 	ucomiss	%xmm5, %xmm5
    00000e3e: 	setp	%r12b
    00000e42: 	jmp	.Ltmp2293 # Offset: 3650
.Ltmp2256:
    00000e47: 	pxor	%xmm5, %xmm5
    00000e4b: 	movl	$0x0, 0x60(%rsp)
    00000e53: 	xorl	%r12d, %r12d
    00000e56: 	movaps	%xmm5, %xmm2
    00000e59: 	jmp	.Ltmp2293 # Offset: 3673
.Ltmp2291:
    00000e5e: 	callq	__stack_chk_fail@PLT # Offset: 3678
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff21jacobi_sor2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x37690
  Size        : 0xe36
  MaxSize     : 0xe40
  Offset      : 0x37690
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xd8, %rsp
    00000023: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002a: 	movl	%edx, 0x9c(%rsp)
    00000031: 	movl	%ebp, %edx
    00000033: 	movl	%ecx, 0x34(%rsp)
    00000037: 	leaq	0xb0(%rsp), %rcx
    0000003f: 	movl	%r8d, 0x24(%rsp)
    00000044: 	movq	%r9, 0xa0(%rsp)
    0000004c: 	movq	%fs:0x28, %rax
    00000055: 	movq	%rax, 0xc8(%rsp)
    0000005d: 	xorl	%eax, %eax
    0000005f: 	movaps	%xmm0, 0xb0(%rsp)
    00000067: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 103
    0000006c: 	movl	%r14d, %edi
    0000006f: 	movss	%xmm0, 0xac(%rsp)
    00000078: 	imull	%ebp, %edi
    0000007b: 	movl	%edi, %ebp
    0000007d: 	testl	%edi, %edi
    0000007f: 	jle	.Ltmp2294 # Offset: 127
    00000081: 	movslq	%edi, %rdx
    00000084: 	movq	%rbx, %rsi
    00000087: 	movq	%r15, %rdi
    0000008a: 	shlq	$0x2, %rdx
    0000008e: 	callq	memmove@PLT # Offset: 142
.Ltmp2294:
    00000093: 	movl	iterations(%rip), %eax
    00000099: 	movl	$0x2710, iterations(%rip)
    000000a3: 	movl	%eax, 0xa8(%rsp)
    000000aa: 	callq	clock@PLT # Offset: 170
    000000af: 	movq	%rax, start_time(%rip)
    000000b6: 	movl	iterations(%rip), %eax
    000000bc: 	movl	%eax, 0x88(%rsp)
    000000c3: 	testl	%eax, %eax
    000000c5: 	jle	.Ltmp2295 # Offset: 197
    000000cb: 	movl	0x9c(%rsp), %eax
    000000d2: 	movslq	%ebp, %rdi
    000000d5: 	movl	$0x0, 0x60(%rsp)
    000000dd: 	pxor	%xmm3, %xmm3
    000000e1: 	movq	%rdi, 0x58(%rsp)
    000000e6: 	movaps	DATAat0x49420(%rip), %xmm1
    000000ed: 	subl	$0x1, %eax
    000000f0: 	movaps	DATAat0x49430(%rip), %xmm4
    000000f7: 	movl	%eax, 0x20(%rsp)
    000000fb: 	movl	0x34(%rsp), %eax
    000000ff: 	leal	-0x4(%rax), %ecx
    00000102: 	movl	%ecx, 0x28(%rsp)
    00000106: 	movl	0x24(%rsp), %ecx
    0000010a: 	addl	%ecx, %ecx
    0000010c: 	movl	%ecx, 0x8c(%rsp)
    00000113: 	leal	-0x6(%rax), %ecx
    00000116: 	movl	%ecx, 0x2c(%rsp)
    0000011a: 	shrl	$0x2, %ecx
    0000011d: 	leal	0x1(%rcx), %edx
    00000120: 	movl	%ecx, 0x64(%rsp)
    00000124: 	movl	%edx, %eax
    00000126: 	movl	%edx, 0x3c(%rsp)
    0000012a: 	andl	$-0x2, %edx
    0000012d: 	shrl	%eax
    0000012f: 	leal	0x1(,%rdx,4), %esi
    00000136: 	movl	%edx, 0x38(%rsp)
    0000013a: 	subl	$0x1, %eax
    0000013d: 	movl	%esi, 0x98(%rsp)
    00000144: 	addq	$0x1, %rax
    00000148: 	shlq	$0x5, %rax
    0000014c: 	movq	%rax, 0x40(%rsp)
    00000151: 	movl	%ecx, %eax
    00000153: 	shlq	$0x2, %rax
    00000157: 	movq	%rax, 0x70(%rsp)
    0000015c: 	leal	0x5(,%rcx,4), %eax
    00000163: 	subl	%edx, %ecx
    00000165: 	movl	%eax, 0x30(%rsp)
    00000169: 	leaq	-0x1(%rdi), %rax
    0000016d: 	movq	%rax, 0x80(%rsp)
    00000175: 	movq	%rdi, %rax
    00000178: 	andq	$-0x4, %rdi
    0000017c: 	shrq	$0x2, %rax
    00000180: 	movq	%rdi, 0x78(%rsp)
    00000185: 	shlq	$0x4, %rax
    00000189: 	movl	%ecx, 0x68(%rsp)
    0000018d: 	movq	%rax, 0x90(%rsp)
    00000195: 	leal	(%rsi,%rcx,4), %eax
    00000198: 	movl	%eax, 0x6c(%rsp)
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp2321:
    000001a0: 	cmpl	$0x1, 0x20(%rsp)
    000001a5: 	jle	.Ltmp2296 # Offset: 421
    000001ab: 	movl	0x34(%rsp), %eax
    000001af: 	movl	$0x1, 0x18(%rsp)
    000001b7: 	xorl	%edx, %edx
    000001b9: 	movl	0x8c(%rsp), %ecx
    000001c0: 	movl	0x24(%rsp), %r13d
    000001c5: 	subl	$0x1, %eax
    000001c8: 	movaps	DATAat0x49430(%rip), %xmm2
    000001cf: 	movl	%eax, 0x1c(%rsp)
    000001d3: 	movl	0x38(%rsp), %eax
    000001d7: 	shlq	$0x2, %rax
    000001db: 	movq	%rax, 0x48(%rsp)
    000001e0: 	addq	$0x4, %rax
    000001e4: 	movq	%rax, 0x50(%rsp)
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp2307:
    000001f0: 	addl	$0x1, 0x18(%rsp)
    000001f5: 	cmpl	$0x1, 0x28(%rsp)
    000001fa: 	movl	$0x1, %eax
    000001ff: 	jle	.Ltmp2297 # Offset: 511
    00000205: 	movslq	%r13d, %r10
    00000208: 	movslq	%edx, %r14
    0000020b: 	leaq	0x4(,%r10,4), %rsi
    00000213: 	leaq	0x14(,%r14,4), %rbp
    0000021b: 	movq	%r14, 0x10(%rsp)
    00000220: 	movslq	%ecx, %r14
    00000223: 	leaq	(%r15,%rsi), %rax
    00000227: 	leaq	0xc(%rbx,%rsi), %rdi
    0000022c: 	movq	%rax, %r9
    0000022f: 	leaq	0x8(%r15,%rsi), %r8
    00000234: 	leaq	0x14(,%r14,4), %r12
    0000023c: 	subq	%rdi, %r9
    0000023f: 	addq	$0x4, %r9
    00000243: 	cmpq	$0x18, %r9
    00000247: 	movq	%r8, %r9
    0000024a: 	seta	%r11b
    0000024e: 	subq	%rdi, %r9
    00000251: 	addq	$0x4, %r9
    00000255: 	cmpq	$0x18, %r9
    00000259: 	seta	%r9b
    0000025d: 	andl	%r11d, %r9d
    00000260: 	cmpl	$0x3, 0x2c(%rsp)
    00000265: 	seta	%r11b
    00000269: 	andl	%r11d, %r9d
    0000026c: 	leaq	(%rbx,%rbp), %r11
    00000270: 	movb	%r9b, 0x8(%rsp)
    00000275: 	movq	%rax, %r9
    00000278: 	subq	%r11, %r9
    0000027b: 	leaq	0xc(%r9), %r11
    0000027f: 	cmpq	$0x18, %r11
    00000283: 	seta	%r11b
    00000287: 	testb	%r11b, 0x8(%rsp)
    0000028c: 	je	.Ltmp2298 # Offset: 652
    00000292: 	leaq	(%rbx,%r12), %r11
    00000296: 	movq	%rax, %r9
    00000299: 	subq	%r11, %r9
    0000029c: 	addq	$0xc, %r9
    000002a0: 	cmpq	$0x18, %r9
    000002a4: 	jbe	.Ltmp2298 # Offset: 676
    000002aa: 	leaq	-0x10(%rbx,%rbp), %r9
    000002af: 	leaq	-0x10(%rbx,%r12), %rbp
    000002b4: 	movq	0x40(%rsp), %r12
    000002b9: 	pxor	%xmm6, %xmm6
    000002bd: 	leaq	-0x4(%rbx,%rsi), %r11
    000002c2: 	xorl	%esi, %esi
    000002c4: 	nopl	(%rax) # Size: 4
.Ltmp2299:
    000002c8: 	movups	0x10(%rax), %xmm5
    000002cc: 	movups	(%rax), %xmm7
    000002cf: 	addq	$0x20, %rax
    000002d3: 	movups	(%r11,%rsi), %xmm8
    000002d8: 	movups	(%r11,%rsi), %xmm9
    000002dd: 	shufps	$0xee, %xmm5, %xmm7
    000002e1: 	movups	0x10(%r11,%rsi), %xmm5
    000002e7: 	movups	-0x20(%rax), %xmm0
    000002eb: 	movhps	0x10(%r11,%rsi), %xmm9
    000002f1: 	movups	0x10(%r9,%rsi), %xmm12
    000002f7: 	movups	0x10(%rbp,%rsi), %xmm13
    000002fd: 	shufps	$0xee, %xmm5, %xmm8
    00000302: 	movups	(%r9,%rsi), %xmm5
    00000307: 	movhps	-0x10(%rax), %xmm0
    0000030b: 	movhps	0x10(%r9,%rsi), %xmm5
    00000311: 	addps	%xmm9, %xmm5
    00000315: 	movups	(%rbp,%rsi), %xmm9
    0000031b: 	movhps	0x10(%rbp,%rsi), %xmm9
    00000321: 	addps	%xmm8, %xmm5
    00000325: 	addps	%xmm9, %xmm5
    00000329: 	movq	0x10(%rdi,%rsi), %xmm9
    00000330: 	addps	%xmm6, %xmm5
    00000333: 	mulps	%xmm1, %xmm5
    00000336: 	subps	%xmm0, %xmm5
    00000339: 	mulps	%xmm2, %xmm5
    0000033c: 	addps	%xmm0, %xmm5
    0000033f: 	movq	(%rdi,%rsi), %xmm0
    00000344: 	movlhps	%xmm9, %xmm0
    00000348: 	movups	(%r9,%rsi), %xmm9
    0000034d: 	shufps	$0xee, %xmm12, %xmm9
    00000352: 	addps	%xmm9, %xmm8
    00000356: 	addps	%xmm8, %xmm0
    0000035a: 	movups	(%rbp,%rsi), %xmm8
    00000360: 	movq	%xmm5, -0x20(%rax)
    00000365: 	movhps	%xmm5, -0x10(%rax)
    00000369: 	shufps	$0xee, %xmm13, %xmm8
    0000036e: 	addps	%xmm8, %xmm0
    00000372: 	addps	%xmm6, %xmm0
    00000375: 	mulps	%xmm1, %xmm0
    00000378: 	subps	%xmm7, %xmm0
    0000037b: 	mulps	%xmm2, %xmm0
    0000037e: 	addps	%xmm7, %xmm0
    00000381: 	movq	%xmm0, (%r8,%rsi)
    00000387: 	movhps	%xmm0, 0x10(%r8,%rsi)
    0000038d: 	addq	$0x20, %rsi
    00000391: 	cmpq	%rsi, %r12
    00000394: 	jne	.Ltmp2299 # Offset: 916
    0000039a: 	movl	0x38(%rsp), %eax
    0000039e: 	cmpl	%eax, 0x3c(%rsp)
    000003a2: 	je	.Ltmp2300 # Offset: 930
    000003a8: 	cmpl	%eax, 0x64(%rsp)
    000003ac: 	je	.Ltmp2301 # Offset: 940
    000003b2: 	movq	0x48(%rsp), %r11
    000003b7: 	movq	0x10(%rsp), %r8
    000003bc: 	xorps	%xmm8, %xmm8
    000003c0: 	movq	DATAat0x49420(%rip), %xmm6
    000003c8: 	movq	DATAat0x49430(%rip), %xmm7
    000003d0: 	leaq	0x1(%r8,%r11), %rsi
    000003d5: 	leaq	0x1(%r10,%r11), %rax
    000003da: 	addq	0x50(%rsp), %r10
    000003df: 	shlq	$0x2, %rax
    000003e3: 	leaq	(%rbx,%rsi,4), %r9
    000003e7: 	leaq	0x1(%r14,%r11), %rsi
    000003ec: 	leaq	(%r15,%rax), %rdi
    000003f0: 	leaq	-0x4(%rbx,%rax), %r8
    000003f5: 	leaq	(%rbx,%rsi,4), %r11
    000003f9: 	leaq	0x8(%r15,%rax), %rbp
    000003fe: 	xorl	%esi, %esi
    00000400: 	xorl	%eax, %eax
    00000402: 	leaq	(%rbx,%r10,4), %r10
.Ltmp2302:
    00000406: 	movq	0x8(%r8,%rax), %xmm10
    0000040d: 	movq	(%r10,%rax), %xmm11
    00000413: 	addl	$0x1, %esi
    00000416: 	movq	0x8(%r9,%rax), %xmm0
    0000041d: 	movq	0x8(%rdi,%rax), %xmm5
    00000423: 	movq	(%rdi,%rax), %xmm9
    00000429: 	addps	%xmm10, %xmm0
    0000042d: 	addps	%xmm11, %xmm0
    00000431: 	movq	0x8(%r11,%rax), %xmm11
    00000438: 	addps	%xmm11, %xmm0
    0000043c: 	movq	(%r8,%rax), %xmm11
    00000442: 	addps	%xmm8, %xmm0
    00000446: 	mulps	%xmm6, %xmm0
    00000449: 	subps	%xmm5, %xmm0
    0000044c: 	mulps	%xmm7, %xmm0
    0000044f: 	addps	%xmm5, %xmm0
    00000452: 	movq	(%r9,%rax), %xmm5
    00000458: 	addps	%xmm11, %xmm5
    0000045c: 	addps	%xmm10, %xmm5
    00000460: 	movq	(%r11,%rax), %xmm10
    00000466: 	addps	%xmm10, %xmm5
    0000046a: 	addps	%xmm8, %xmm5
    0000046e: 	mulps	%xmm6, %xmm5
    00000471: 	subps	%xmm9, %xmm5
    00000475: 	mulps	%xmm7, %xmm5
    00000478: 	addps	%xmm9, %xmm5
    0000047c: 	movlps	%xmm5, (%rdi,%rax)
    00000480: 	movlps	%xmm0, (%rbp,%rax)
    00000485: 	addq	$0x10, %rax
    00000489: 	cmpl	0x68(%rsp), %esi
    0000048d: 	jb	.Ltmp2302 # Offset: 1165
    00000493: 	movl	0x6c(%rsp), %eax
.Ltmp2324:
    00000497: 	leal	0x2(%rax), %edi
    0000049a: 	leal	0x3(%rax), %r8d
    0000049e: 	leal	(%r13,%rax), %esi
    000004a3: 	leal	(%rdx,%rdi), %r11d
    000004a7: 	addl	%ecx, %edi
    000004a9: 	movslq	%esi, %rsi
    000004ac: 	leal	(%rdx,%r8), %ebp
    000004b0: 	movslq	%r11d, %r11
    000004b3: 	addl	%ecx, %r8d
    000004b6: 	leaq	(%r15,%rsi,4), %r12
    000004ba: 	movslq	%ebp, %rbp
    000004bd: 	leal	0x1(%rax), %esi
    000004c0: 	movss	(%rbx,%r11,4), %xmm5
    000004c6: 	movss	(%rbx,%rbp,4), %xmm0
    000004cb: 	leal	(%rdx,%rax), %r9d
    000004cf: 	leal	(%rdx,%rsi), %r10d
    000004d3: 	movslq	%edi, %rdi
    000004d6: 	movslq	%r9d, %r9
    000004d9: 	movslq	%r10d, %r10
    000004dc: 	movslq	%r8d, %r8
    000004df: 	movss	(%rbx,%r10,4), %xmm6
    000004e5: 	unpcklps	%xmm0, %xmm5
    000004e8: 	movss	(%rbx,%r9,4), %xmm0
    000004ee: 	leal	-0x1(%r13,%rax), %r9d
    000004f3: 	movslq	%r9d, %r9
    000004f6: 	addl	%ecx, %eax
    000004f8: 	unpcklps	%xmm6, %xmm0
    000004fb: 	movss	(%rbx,%rdi,4), %xmm6
    00000500: 	cltq
    00000502: 	movlhps	%xmm5, %xmm0
    00000505: 	movups	(%rbx,%r9,4), %xmm5
    0000050a: 	leal	(%r13,%rsi), %r9d
    0000050f: 	addl	%ecx, %esi
    00000511: 	movslq	%r9d, %r9
    00000514: 	movslq	%esi, %rsi
    00000517: 	addps	%xmm5, %xmm0
    0000051a: 	movups	(%rbx,%r9,4), %xmm5
    0000051f: 	movss	(%rbx,%rsi,4), %xmm7
    00000524: 	addps	%xmm5, %xmm0
    00000527: 	movss	(%rbx,%r8,4), %xmm5
    0000052d: 	unpcklps	%xmm5, %xmm6
    00000530: 	movss	(%rbx,%rax,4), %xmm5
    00000535: 	unpcklps	%xmm7, %xmm5
    00000538: 	movups	(%r12), %xmm7
    0000053d: 	movlhps	%xmm6, %xmm5
    00000540: 	addps	%xmm5, %xmm0
    00000543: 	pxor	%xmm5, %xmm5
    00000547: 	addps	%xmm5, %xmm0
    0000054a: 	mulps	%xmm1, %xmm0
    0000054d: 	subps	%xmm7, %xmm0
    00000550: 	mulps	%xmm2, %xmm0
    00000553: 	addps	%xmm7, %xmm0
    00000556: 	movups	%xmm0, (%r12)
.Ltmp2300:
    0000055b: 	movl	0x30(%rsp), %eax
.Ltmp2297:
    0000055f: 	cmpl	0x1c(%rsp), %eax
    00000563: 	jge	.Ltmp2303 # Offset: 1379
    00000569: 	movslq	%eax, %r10
    0000056c: 	movslq	%r13d, %rsi
    0000056f: 	movslq	%ecx, %r8
    00000572: 	movl	0x34(%rsp), %edi
    00000576: 	leaq	(%rsi,%r10), %r12
    0000057a: 	movslq	%edx, %rsi
    0000057d: 	addq	%r10, %r8
    00000580: 	addq	%r10, %rsi
    00000583: 	movq	%r15, %r10
    00000586: 	subl	%eax, %edi
    00000588: 	subq	%rbx, %r10
    0000058b: 	leaq	0x4(,%r8,4), %r14
    00000593: 	leaq	(,%r12,4), %r11
    0000059b: 	movq	%rsi, 0x8(%rsp)
    000005a0: 	cmpq	$0x10, %r10
    000005a4: 	leaq	0x4(,%rsi,4), %rbp
    000005ac: 	movq	%r14, 0x10(%rsp)
    000005b1: 	leaq	(%r15,%r11), %r9
    000005b5: 	seta	%r10b
    000005b9: 	cmpl	$0x2, %edi
    000005bc: 	movq	%r9, %rsi
    000005bf: 	setne	%r14b
    000005c3: 	andl	%r14d, %r10d
    000005c6: 	leaq	(%rbx,%rbp), %r14
    000005ca: 	subq	%r14, %rsi
    000005cd: 	cmpq	$0x8, %rsi
    000005d1: 	seta	%r14b
    000005d5: 	testb	%r14b, %r10b
    000005d8: 	je	.Ltmp2304 # Offset: 1496
    000005de: 	leaq	0x4(,%r8,4), %rsi
    000005e6: 	movq	%r9, %r10
    000005e9: 	movq	%rsi, %r14
    000005ec: 	addq	%rbx, %r14
    000005ef: 	subq	%r14, %r10
    000005f2: 	cmpq	$0x8, %r10
    000005f6: 	jbe	.Ltmp2304 # Offset: 1526
    000005fc: 	leal	-0x2(%rdi), %r14d
    00000600: 	leal	-0x1(%rdi), %r10d
    00000604: 	cmpl	$0x2, %r14d
    00000608: 	jbe	.Ltmp2305 # Offset: 1544
    0000060e: 	movups	-0x4(%rbx,%r11), %xmm6
    00000614: 	movups	-0x4(%rbx,%rbp), %xmm0
    00000619: 	movups	0x4(%rbx,%r11), %xmm5
    0000061f: 	addps	%xmm6, %xmm0
    00000622: 	movups	(%r9), %xmm6
    00000626: 	addps	%xmm5, %xmm0
    00000629: 	movups	-0x4(%rbx,%rsi), %xmm5
    0000062e: 	addps	%xmm5, %xmm0
    00000631: 	pxor	%xmm5, %xmm5
    00000635: 	addps	%xmm5, %xmm0
    00000638: 	mulps	DATAat0x49420(%rip), %xmm0
    0000063f: 	subps	%xmm6, %xmm0
    00000642: 	mulps	DATAat0x49430(%rip), %xmm0
    00000649: 	addps	%xmm6, %xmm0
    0000064c: 	movups	%xmm0, (%r9)
    00000650: 	movl	%r10d, %r9d
    00000653: 	andl	$-0x4, %r9d
    00000657: 	addl	%r9d, %eax
    0000065a: 	cmpl	%r10d, %r9d
    0000065d: 	je	.Ltmp2303 # Offset: 1629
    00000663: 	subl	%r9d, %edi
    00000666: 	leal	-0x1(%rdi), %r10d
    0000066a: 	cmpl	$0x2, %edi
    0000066d: 	je	.Ltmp2306 # Offset: 1645
.Ltmp2323:
    0000066f: 	movl	%r9d, %edi
    00000672: 	movq	0x8(%rsp), %rsi
    00000677: 	movq	DATAat0x49430(%rip), %xmm7
    0000067f: 	leaq	(%rdi,%r12), %r9
    00000683: 	shlq	$0x2, %r9
    00000687: 	addq	%rdi, %rsi
    0000068a: 	addq	%r8, %rdi
    0000068d: 	movq	(%rbx,%rsi,4), %xmm0
    00000692: 	movq	-0x4(%rbx,%r9), %xmm6
    00000699: 	leaq	(%r15,%r9), %r11
    0000069d: 	movl	%r10d, %esi
    000006a0: 	movq	(%r11), %xmm5
    000006a5: 	andl	$-0x2, %esi
    000006a8: 	addps	%xmm6, %xmm0
    000006ab: 	movq	0x4(%rbx,%r9), %xmm6
    000006b2: 	addl	%esi, %eax
    000006b4: 	addps	%xmm6, %xmm0
    000006b7: 	movq	(%rbx,%rdi,4), %xmm6
    000006bc: 	addps	%xmm6, %xmm0
    000006bf: 	xorps	%xmm6, %xmm6
    000006c2: 	addps	%xmm6, %xmm0
    000006c5: 	movq	DATAat0x49420(%rip), %xmm6
    000006cd: 	mulps	%xmm6, %xmm0
    000006d0: 	subps	%xmm5, %xmm0
    000006d3: 	mulps	%xmm7, %xmm0
    000006d6: 	addps	%xmm5, %xmm0
    000006d9: 	movlps	%xmm0, (%r11)
    000006dd: 	cmpl	%r10d, %esi
    000006e0: 	je	.Ltmp2303 # Offset: 1760
.Ltmp2306:
    000006e2: 	leal	(%r13,%rax), %esi
    000006e7: 	movslq	%esi, %rsi
    000006ea: 	leaq	(%r15,%rsi,4), %rdi
    000006ee: 	leal	(%rdx,%rax), %esi
    000006f1: 	movslq	%esi, %rsi
    000006f4: 	movss	(%rdi), %xmm5
    000006f8: 	movss	(%rbx,%rsi,4), %xmm0
    000006fd: 	leal	-0x1(%rax,%r13), %esi
    00000702: 	movslq	%esi, %rsi
    00000705: 	addss	(%rbx,%rsi,4), %xmm0
    0000070a: 	leal	0x1(%rax,%r13), %esi
    0000070f: 	addl	%ecx, %eax
    00000711: 	movslq	%esi, %rsi
    00000714: 	cltq
    00000716: 	addss	(%rbx,%rsi,4), %xmm0
    0000071b: 	addss	(%rbx,%rax,4), %xmm0
    00000720: 	addss	%xmm3, %xmm0
    00000724: 	mulss	DATAat0x49420(%rip), %xmm0
    0000072c: 	subss	%xmm5, %xmm0
    00000730: 	mulss	DATAat0x49430(%rip), %xmm0
    00000738: 	addss	%xmm5, %xmm0
    0000073c: 	movss	%xmm0, (%rdi)
.Ltmp2303:
    00000740: 	movl	0x24(%rsp), %eax
    00000744: 	movl	0x18(%rsp), %edi
    00000748: 	addl	%eax, %edx
    0000074a: 	addl	%eax, %r13d
    0000074d: 	addl	%eax, %ecx
    0000074f: 	cmpl	%edi, 0x20(%rsp)
    00000753: 	jne	.Ltmp2307 # Offset: 1875
.Ltmp2296:
    00000759: 	cmpq	$0x0, 0x58(%rsp)
    0000075f: 	je	.Ltmp2308 # Offset: 1887
    00000765: 	cmpq	$0x2, 0x80(%rsp)
    0000076e: 	jbe	.Ltmp2309 # Offset: 1902
    00000774: 	movaps	DATAat0x494b0(%rip), %xmm7
    0000077b: 	xorl	%eax, %eax
    0000077d: 	movaps	%xmm3, %xmm2
    00000780: 	pxor	%xmm6, %xmm6
    00000784: 	movq	0x90(%rsp), %rdx
    0000078c: 	nopl	(%rax) # Size: 4
.Ltmp2310:
    00000790: 	movups	(%r15,%rax), %xmm0
    00000795: 	movups	(%rbx,%rax), %xmm5
    00000799: 	addq	$0x10, %rax
    0000079d: 	subps	%xmm0, %xmm5
    000007a0: 	movaps	%xmm5, %xmm0
    000007a3: 	movaps	%xmm5, %xmm8
    000007a7: 	cmpltps	%xmm6, %xmm0
    000007ab: 	xorps	%xmm7, %xmm8
    000007af: 	andps	%xmm0, %xmm8
    000007b3: 	andnps	%xmm5, %xmm0
    000007b6: 	orps	%xmm8, %xmm0
    000007ba: 	addss	%xmm0, %xmm2
    000007be: 	movaps	%xmm0, %xmm5
    000007c1: 	shufps	$0x55, %xmm0, %xmm5
    000007c5: 	addss	%xmm2, %xmm5
    000007c9: 	movaps	%xmm0, %xmm2
    000007cc: 	unpckhps	%xmm0, %xmm2
    000007cf: 	shufps	$0xff, %xmm0, %xmm0
    000007d3: 	addss	%xmm5, %xmm2
    000007d7: 	addss	%xmm0, %xmm2
    000007db: 	cmpq	%rdx, %rax
    000007de: 	jne	.Ltmp2310 # Offset: 2014
    000007e0: 	movq	0x78(%rsp), %rax
    000007e5: 	cmpq	%rax, 0x58(%rsp)
    000007ea: 	je	.Ltmp2311 # Offset: 2026
.Ltmp2326:
    000007ec: 	movss	(%rbx,%rax,4), %xmm0
    000007f1: 	subss	(%r15,%rax,4), %xmm0
    000007f7: 	leaq	(,%rax,4), %rdx
    000007ff: 	comiss	%xmm0, %xmm3
    00000802: 	jbe	.Ltmp2312 # Offset: 2050
    00000804: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2312:
    0000080b: 	addss	%xmm0, %xmm2
    0000080f: 	leaq	0x1(%rax), %rcx
    00000813: 	cmpq	%rcx, 0x58(%rsp)
    00000818: 	jbe	.Ltmp2311 # Offset: 2072
    0000081a: 	movss	0x4(%rbx,%rdx), %xmm0
    00000820: 	subss	0x4(%r15,%rdx), %xmm0
    00000827: 	comiss	%xmm0, %xmm3
    0000082a: 	jbe	.Ltmp2313 # Offset: 2090
    0000082c: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2313:
    00000833: 	addss	%xmm0, %xmm2
    00000837: 	addq	$0x2, %rax
    0000083b: 	cmpq	%rax, 0x58(%rsp)
    00000840: 	jbe	.Ltmp2311 # Offset: 2112
    00000842: 	movss	0x8(%rbx,%rdx), %xmm0
    00000848: 	subss	0x8(%r15,%rdx), %xmm0
    0000084f: 	comiss	%xmm0, %xmm3
    00000852: 	jbe	.Ltmp2314 # Offset: 2130
    00000854: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2314:
    0000085b: 	addss	%xmm0, %xmm2
.Ltmp2311:
    0000085f: 	movq	0x58(%rsp), %rdx
    00000864: 	movaps	%xmm3, %xmm5
    00000867: 	xorl	%eax, %eax
    00000869: 	movss	DATAat0x494c0(%rip), %xmm6
    00000871: 	nopl	(%rax) # Size: 7
.Ltmp2316:
    00000878: 	movss	(%rbx,%rax,4), %xmm0
    0000087d: 	subss	(%r15,%rax,4), %xmm0
    00000883: 	comiss	%xmm0, %xmm3
    00000886: 	jbe	.Ltmp2315 # Offset: 2182
    00000888: 	xorps	%xmm6, %xmm0
.Ltmp2315:
    0000088b: 	maxss	%xmm5, %xmm0
    0000088f: 	addq	$0x1, %rax
    00000893: 	movaps	%xmm0, %xmm5
    00000896: 	cmpq	%rax, %rdx
    00000899: 	jne	.Ltmp2316 # Offset: 2201
    0000089b: 	movl	0x60(%rsp), %eax
    0000089f: 	cmpl	%eax, 0x110(%rsp)
    000008a6: 	jge	.Ltmp2317 # Offset: 2214
    000008a8: 	movss	DATAat0x49548(%rip), %xmm0
    000008b0: 	comiss	%xmm2, %xmm0
    000008b3: 	ja	.Ltmp2318 # Offset: 2227
    000008b9: 	ucomiss	%xmm2, %xmm2
    000008bc: 	jp	.Ltmp2319 # Offset: 2236
    000008c2: 	movss	DATAat0x4954c(%rip), %xmm0
    000008ca: 	comiss	%xmm5, %xmm0
    000008cd: 	ja	.Ltmp2320 # Offset: 2253
    000008d3: 	ucomiss	%xmm5, %xmm5
    000008d6: 	jp	.Ltmp2319 # Offset: 2262
.Ltmp2317:
    000008dc: 	addl	$0x1, 0x60(%rsp)
    000008e1: 	movq	%r15, %rax
    000008e4: 	movl	0x60(%rsp), %ecx
    000008e8: 	movq	%rbx, %r15
    000008eb: 	cmpl	0x88(%rsp), %ecx
    000008f2: 	je	.Ltmp2318 # Offset: 2290
    000008f8: 	movq	%rax, %rbx
    000008fb: 	jmp	.Ltmp2321 # Offset: 2299
.Ltmp2298:
    00000900: 	subq	$0x4, %rsi
    00000904: 	addq	0x70(%rsp), %r10
    00000909: 	leaq	-0x14(%rbx,%rbp), %rdi
    0000090e: 	leaq	(%r15,%rsi), %rax
    00000912: 	leaq	-0x14(%rbx,%r12), %r8
    00000917: 	pxor	%xmm6, %xmm6
    0000091b: 	addq	%rbx, %rsi
    0000091e: 	leaq	0x10(%rbx,%r10,4), %r9
    00000923: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2322:
    00000928: 	movss	0x10(%rdi), %xmm0
    0000092d: 	movss	0xc(%rdi), %xmm5
    00000932: 	addq	$0x10, %rsi
    00000936: 	addq	$0x10, %rax
    0000093a: 	movss	0x8(%rdi), %xmm7
    0000093f: 	movss	0x8(%r8), %xmm8
    00000945: 	addq	$0x10, %rdi
    00000949: 	addq	$0x10, %r8
    0000094d: 	unpcklps	%xmm0, %xmm5
    00000950: 	movss	-0xc(%rdi), %xmm0
    00000955: 	unpcklps	%xmm7, %xmm0
    00000958: 	movups	-0x10(%rsi), %xmm7
    0000095c: 	movlhps	%xmm5, %xmm0
    0000095f: 	movss	(%r8), %xmm5
    00000964: 	addps	%xmm7, %xmm0
    00000967: 	movups	-0x8(%rsi), %xmm7
    0000096b: 	addps	%xmm7, %xmm0
    0000096e: 	movss	-0x4(%r8), %xmm7
    00000974: 	unpcklps	%xmm5, %xmm7
    00000977: 	movss	-0xc(%r8), %xmm5
    0000097d: 	unpcklps	%xmm8, %xmm5
    00000981: 	movlhps	%xmm7, %xmm5
    00000984: 	movups	-0xc(%rax), %xmm7
    00000988: 	addps	%xmm5, %xmm0
    0000098b: 	addps	%xmm6, %xmm0
    0000098e: 	mulps	%xmm1, %xmm0
    00000991: 	subps	%xmm7, %xmm0
    00000994: 	mulps	%xmm4, %xmm0
    00000997: 	addps	%xmm7, %xmm0
    0000099a: 	movups	%xmm0, -0xc(%rax)
    0000099e: 	cmpq	%rsi, %r9
    000009a1: 	jne	.Ltmp2322 # Offset: 2465
    000009a3: 	jmp	.Ltmp2300 # Offset: 2467
    000009a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2304:
    000009b0: 	leal	-0x1(%rax,%r13), %esi
    000009b5: 	leal	0x1(%rax), %edi
    000009b8: 	movss	-0x4(%rbx,%rbp), %xmm0
    000009be: 	movq	0x10(%rsp), %r14
    000009c3: 	movslq	%esi, %rsi
    000009c6: 	movss	DATAat0x49420(%rip), %xmm5
    000009ce: 	movss	(%r9), %xmm7
    000009d3: 	addss	(%rbx,%rsi,4), %xmm0
    000009d8: 	leal	(%rdi,%r13), %esi
    000009dc: 	movss	DATAat0x49430(%rip), %xmm6
    000009e4: 	movslq	%esi, %rsi
    000009e7: 	shlq	$0x2, %rsi
    000009eb: 	leaq	(%rbx,%rsi), %r8
    000009ef: 	addss	(%r8), %xmm0
    000009f4: 	addss	-0x4(%rbx,%r14), %xmm0
    000009fb: 	movl	0x1c(%rsp), %r14d
    00000a00: 	addss	%xmm3, %xmm0
    00000a04: 	mulss	%xmm5, %xmm0
    00000a08: 	subss	%xmm7, %xmm0
    00000a0c: 	mulss	%xmm6, %xmm0
    00000a10: 	addss	%xmm7, %xmm0
    00000a14: 	movss	%xmm0, (%r9)
    00000a19: 	cmpl	%r14d, %edi
    00000a1c: 	jge	.Ltmp2303 # Offset: 2588
    00000a22: 	leal	(%rdi,%rdx), %r9d
    00000a26: 	leal	0x2(%rax), %r10d
    00000a2a: 	addl	%ecx, %edi
    00000a2c: 	addq	%r15, %rsi
    00000a2f: 	movslq	%r9d, %r9
    00000a32: 	movslq	%edi, %rdi
    00000a35: 	movss	(%rsi), %xmm7
    00000a39: 	movss	(%rbx,%r9,4), %xmm0
    00000a3f: 	leal	(%r10,%r13), %r9d
    00000a43: 	addss	(%rbx,%r12,4), %xmm0
    00000a49: 	movslq	%r9d, %r9
    00000a4c: 	shlq	$0x2, %r9
    00000a50: 	leaq	(%rbx,%r9), %r11
    00000a54: 	addss	(%r11), %xmm0
    00000a59: 	addss	(%rbx,%rdi,4), %xmm0
    00000a5e: 	addss	%xmm3, %xmm0
    00000a62: 	mulss	%xmm5, %xmm0
    00000a66: 	subss	%xmm7, %xmm0
    00000a6a: 	mulss	%xmm6, %xmm0
    00000a6e: 	addss	%xmm7, %xmm0
    00000a72: 	movss	%xmm0, (%rsi)
    00000a76: 	cmpl	%r14d, %r10d
    00000a79: 	jge	.Ltmp2303 # Offset: 2681
    00000a7f: 	leal	(%r10,%rdx), %esi
    00000a83: 	addq	%r15, %r9
    00000a86: 	movslq	%esi, %rsi
    00000a89: 	movss	(%r9), %xmm7
    00000a8e: 	movss	(%rbx,%rsi,4), %xmm0
    00000a93: 	leal	0x3(%rax), %esi
    00000a96: 	addss	(%r8), %xmm0
    00000a9b: 	leal	(%rsi,%r13), %edi
    00000a9f: 	movslq	%edi, %rdi
    00000aa2: 	addss	(%rbx,%rdi,4), %xmm0
    00000aa7: 	leaq	(,%rdi,4), %r8
    00000aaf: 	leal	(%r10,%rcx), %edi
    00000ab3: 	movslq	%edi, %rdi
    00000ab6: 	addss	(%rbx,%rdi,4), %xmm0
    00000abb: 	addss	%xmm3, %xmm0
    00000abf: 	mulss	%xmm5, %xmm0
    00000ac3: 	subss	%xmm7, %xmm0
    00000ac7: 	mulss	%xmm6, %xmm0
    00000acb: 	addss	%xmm7, %xmm0
    00000acf: 	movss	%xmm0, (%r9)
    00000ad4: 	cmpl	%r14d, %esi
    00000ad7: 	jge	.Ltmp2303 # Offset: 2775
    00000add: 	leal	(%rsi,%rdx), %edi
    00000ae0: 	leal	0x4(%rax,%r13), %eax
    00000ae5: 	addq	%r15, %r8
    00000ae8: 	cltq
    00000aea: 	movslq	%edi, %rdi
    00000aed: 	movss	(%r8), %xmm7
    00000af2: 	movss	(%rbx,%rdi,4), %xmm0
    00000af7: 	addss	(%r11), %xmm0
    00000afc: 	addss	(%rbx,%rax,4), %xmm0
    00000b01: 	leal	(%rsi,%rcx), %eax
    00000b04: 	cltq
    00000b06: 	addss	(%rbx,%rax,4), %xmm0
    00000b0b: 	addss	%xmm3, %xmm0
    00000b0f: 	mulss	%xmm5, %xmm0
    00000b13: 	subss	%xmm7, %xmm0
    00000b17: 	mulss	%xmm6, %xmm0
    00000b1b: 	addss	%xmm7, %xmm0
    00000b1f: 	movss	%xmm0, (%r8)
    00000b24: 	jmp	.Ltmp2303 # Offset: 2852
.Ltmp2305:
    00000b29: 	xorl	%r9d, %r9d
    00000b2c: 	jmp	.Ltmp2323 # Offset: 2860
.Ltmp2301:
    00000b31: 	movl	0x98(%rsp), %eax
    00000b38: 	jmp	.Ltmp2324 # Offset: 2872
.Ltmp2308:
    00000b3d: 	movl	0x60(%rsp), %eax
    00000b41: 	movaps	%xmm3, %xmm2
    00000b44: 	cmpl	%eax, 0x110(%rsp)
    00000b4b: 	jl	.Ltmp2325 # Offset: 2891
    00000b4d: 	movaps	%xmm3, %xmm5
    00000b50: 	jmp	.Ltmp2317 # Offset: 2896
.Ltmp2309:
    00000b55: 	movaps	%xmm3, %xmm2
    00000b58: 	xorl	%eax, %eax
    00000b5a: 	jmp	.Ltmp2326 # Offset: 2906
.Ltmp2325:
    00000b5f: 	movaps	%xmm2, %xmm5
.Ltmp2318:
    00000b62: 	ucomiss	%xmm2, %xmm2
    00000b65: 	setp	%r12b
    00000b69: 	ucomiss	%xmm5, %xmm5
    00000b6c: 	setp	%al
    00000b6f: 	orl	%eax, %r12d
.Ltmp2332:
    00000b72: 	movss	%xmm5, 0x8(%rsp)
    00000b78: 	movss	%xmm2, 0x18(%rsp)
    00000b7e: 	callq	clock@PLT # Offset: 2942
    00000b83: 	movl	0x9c(%rsp), %ecx
    00000b8a: 	pxor	%xmm0, %xmm0
    00000b8e: 	movss	0xac(%rsp), %xmm4
    00000b97: 	movq	%rax, end_time(%rip)
    00000b9e: 	subq	start_time(%rip), %rax
    00000ba5: 	cvtsi2sd	%rax, %xmm0
    00000baa: 	movl	%ecx, %eax
    00000bac: 	divsd	DATAat0x49520(%rip), %xmm0
    00000bb4: 	movss	0x18(%rsp), %xmm2
    00000bba: 	shrl	$0x1f, %eax
    00000bbd: 	movss	0x8(%rsp), %xmm5
    00000bc3: 	movq	%xmm0, %rbx
    00000bc8: 	addl	%ecx, %eax
    00000bca: 	movl	0x34(%rsp), %ecx
    00000bce: 	sarl	%eax
    00000bd0: 	movl	%ecx, %edx
    00000bd2: 	imull	%ecx, %eax
    00000bd5: 	shrl	$0x1f, %edx
    00000bd8: 	addl	%ecx, %edx
    00000bda: 	sarl	%edx
    00000bdc: 	addl	%edx, %eax
    00000bde: 	testb	%r12b, %r12b
    00000be1: 	cltq
    00000be3: 	subss	(%r15,%rax,4), %xmm4
    00000be9: 	movq	0xa0(%rsp), %rax
    00000bf1: 	movq	0x8(%rax), %rdx
    00000bf5: 	movq	(%rax), %rsi
    00000bf8: 	movd	%xmm4, %ebp
    00000bfc: 	jne	.Ltmp2327 # Offset: 3068
    00000c02: 	movl	0x60(%rsp), %eax
    00000c06: 	cmpl	%eax, iterations(%rip)
    00000c0c: 	jg	.Ltmp2328 # Offset: 3084
    00000c0e: 	comiss	DATAat0x49548(%rip), %xmm2
    00000c15: 	jbe	.Ltmp2328 # Offset: 3093
    00000c17: 	comiss	DATAat0x4954c(%rip), %xmm5
    00000c1e: 	ja	.Ltmp2329 # Offset: 3102
.Ltmp2328:
    00000c24: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000c2b: 	movss	%xmm5, 0x8(%rsp)
    00000c31: 	movq	%r12, %rdi
    00000c34: 	movss	%xmm2, 0x18(%rsp)
    00000c3a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3130
    00000c3f: 	movl	$0xa, %edx
    00000c44: 	leaq	DATAat0x491ab(%rip), %rsi
    00000c4b: 	movq	%rax, %rdi
    00000c4e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3150
    00000c53: 	movss	0x8(%rsp), %xmm5
    00000c59: 	movss	0x18(%rsp), %xmm2
.Ltmp2331:
    00000c5f: 	movl	$0x4, %edx
    00000c64: 	movq	%r12, %rdi
    00000c67: 	leaq	DATAat0x491b6(%rip), %rsi
    00000c6e: 	movss	%xmm5, 0x8(%rsp)
    00000c74: 	movss	%xmm2, 0x18(%rsp)
    00000c7a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3194
    00000c7f: 	movl	0x60(%rsp), %esi
    00000c83: 	movq	%r12, %rdi
    00000c86: 	callq	_ZNSolsEi@PLT # Offset: 3206
    00000c8b: 	movl	$0xb, %edx
    00000c90: 	leaq	DATAat0x491bb(%rip), %rsi
    00000c97: 	movq	%rax, %rdi
    00000c9a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3226
    00000c9f: 	movl	$0xa, %edx
    00000ca4: 	leaq	DATAat0x491c7(%rip), %rsi
    00000cab: 	movq	%r12, %rdi
    00000cae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3246
    00000cb3: 	movss	0x18(%rsp), %xmm2
    00000cb9: 	movq	%r12, %rdi
    00000cbc: 	pxor	%xmm0, %xmm0
    00000cc0: 	cvtss2sd	%xmm2, %xmm0
    00000cc4: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3268
    00000cc9: 	movl	$0x7, %edx
    00000cce: 	leaq	DATAat0x491d2(%rip), %rsi
    00000cd5: 	movq	%rax, %rdi
    00000cd8: 	movq	%rax, %r12
    00000cdb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3291
    00000ce0: 	movss	0x8(%rsp), %xmm5
    00000ce6: 	movq	%r12, %rdi
    00000ce9: 	pxor	%xmm0, %xmm0
    00000ced: 	cvtss2sd	%xmm5, %xmm0
    00000cf1: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3313
    00000cf6: 	movl	$0x10, %edx
    00000cfb: 	leaq	DATAat0x491da(%rip), %rsi
    00000d02: 	movq	%rax, %r12
    00000d05: 	movq	%rax, %rdi
    00000d08: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3336
    00000d0d: 	movd	%ebp, %xmm4
    00000d11: 	movq	%r12, %rdi
    00000d14: 	pxor	%xmm0, %xmm0
    00000d18: 	cvtss2sd	%xmm4, %xmm0
    00000d1c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3356
    00000d21: 	movl	$0x8, %edx
    00000d26: 	leaq	DATAat0x491eb(%rip), %rsi
    00000d2d: 	movq	%rax, %rbp
    00000d30: 	movq	%rax, %rdi
    00000d33: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3379
    00000d38: 	movq	%rbx, %xmm0
    00000d3d: 	movq	%rbp, %rdi
    00000d40: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 3392
    00000d45: 	movl	$0x2, %edx
    00000d4a: 	leaq	DATAat0x491f4(%rip), %rsi
    00000d51: 	movq	%rax, %rdi
    00000d54: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3412
    00000d59: 	movl	0xa8(%rsp), %eax
    00000d60: 	movl	%eax, iterations(%rip)
    00000d66: 	movq	0xc8(%rsp), %rax
    00000d6e: 	subq	%fs:0x28, %rax
    00000d77: 	jne	.Ltmp2330 # Offset: 3447
    00000d7d: 	addq	$0xd8, %rsp
    00000d84: 	popq	%rbx
    00000d85: 	popq	%rbp
    00000d86: 	popq	%r12
    00000d88: 	popq	%r13
    00000d8a: 	popq	%r14
    00000d8c: 	popq	%r15
    00000d8e: 	retq # Offset: 3470
.Ltmp2327:
    00000d8f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000d96: 	movq	%r12, %rdi
    00000d99: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3481
    00000d9e: 	movl	$0x10, %edx
    00000da3: 	leaq	DATAat0x493d4(%rip), %rsi
    00000daa: 	movq	%rax, %rdi
    00000dad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3501
    00000db2: 	movss	0x18(%rsp), %xmm2
    00000db8: 	movss	0x8(%rsp), %xmm5
    00000dbe: 	jmp	.Ltmp2331 # Offset: 3518
.Ltmp2319:
    00000dc3: 	movl	$0x1, %r12d
    00000dc9: 	jmp	.Ltmp2332 # Offset: 3529
.Ltmp2329:
    00000dce: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r12
    00000dd5: 	movss	%xmm5, 0x8(%rsp)
    00000ddb: 	movq	%r12, %rdi
    00000dde: 	movss	%xmm2, 0x18(%rsp)
    00000de4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3556
    00000de9: 	movl	$0x11, %edx
    00000dee: 	leaq	DATAat0x49199(%rip), %rsi
    00000df5: 	movq	%rax, %rdi
    00000df8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3576
    00000dfd: 	movss	0x18(%rsp), %xmm2
    00000e03: 	movss	0x8(%rsp), %xmm5
    00000e09: 	jmp	.Ltmp2331 # Offset: 3593
.Ltmp2320:
    00000e0e: 	ucomiss	%xmm5, %xmm5
    00000e11: 	setp	%r12b
    00000e15: 	jmp	.Ltmp2332 # Offset: 3605
.Ltmp2295:
    00000e1a: 	pxor	%xmm5, %xmm5
    00000e1e: 	movl	$0x0, 0x60(%rsp)
    00000e26: 	xorl	%r12d, %r12d
    00000e29: 	movaps	%xmm5, %xmm2
    00000e2c: 	jmp	.Ltmp2332 # Offset: 3628
.Ltmp2330:
    00000e31: 	callq	__stack_chk_fail@PLT # Offset: 3633
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x384d0
  Size        : 0x583
  MaxSize     : 0x590
  Offset      : 0x384d0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movl	%ecx, %r12d
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r15d, %esi
    0000001d: 	imull	%r12d, %r15d
    00000021: 	subq	$0x58, %rsp
    00000025: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002c: 	movl	%edx, 0x4(%rsp)
    00000030: 	leaq	0x30(%rsp), %rcx
    00000035: 	movl	%r12d, %edx
    00000038: 	movslq	%r15d, %rbp
    0000003b: 	movl	%r8d, 0x8(%rsp)
    00000040: 	movq	%r9, 0x28(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x48(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x30(%rsp)
    0000005a: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 90
    0000005f: 	movss	%xmm0, 0x24(%rsp)
    00000065: 	testl	%ebp, %ebp
    00000067: 	jle	.Ltmp2333 # Offset: 103
    00000069: 	movslq	%ebp, %rdx
    0000006c: 	movq	%r13, %rsi
    0000006f: 	movq	%rbx, %rdi
    00000072: 	shlq	$0x2, %rdx
    00000076: 	callq	memmove@PLT # Offset: 118
.Ltmp2333:
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	movl	$0x2710, iterations(%rip)
    0000008b: 	movl	%eax, 0x20(%rsp)
    0000008f: 	callq	clock@PLT # Offset: 143
    00000094: 	movq	%rax, start_time(%rip)
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	movl	%eax, 0xc(%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp2334 # Offset: 167
    000000ad: 	leaq	-0x1(%rbp), %rax
    000000b1: 	movq	%rbp, %r11
    000000b4: 	xorl	%r15d, %r15d
    000000b7: 	movq	%rax, 0x10(%rsp)
    000000bc: 	movq	%rbp, %rax
    000000bf: 	shrq	$0x2, %r11
    000000c3: 	andq	$-0x4, %rax
    000000c7: 	shlq	$0x4, %r11
    000000cb: 	movq	%rax, 0x18(%rsp)
    000000d0: 	movq	%rbx, %rax
    000000d3: 	movq	%rbp, %rbx
    000000d6: 	movq	%r11, %rbp
    000000d9: 	movq	%rax, %r14
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp2348:
    000000e0: 	movl	0x8(%rsp), %r8d
    000000e5: 	movl	0x4(%rsp), %edx
    000000e9: 	movl	%r12d, %ecx
    000000ec: 	movq	%r14, %rsi
    000000ef: 	movq	%r13, %rdi
    000000f2: 	callq	"_ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/1" # Offset: 242
    000000f7: 	testq	%rbx, %rbx
    000000fa: 	pxor	%xmm3, %xmm3
    000000fe: 	movss	DATAat0x494c0(%rip), %xmm4
    00000106: 	je	.Ltmp2335 # Offset: 262
    0000010c: 	cmpq	$0x2, 0x10(%rsp)
    00000112: 	jbe	.Ltmp2336 # Offset: 274
    00000118: 	movaps	DATAat0x494b0(%rip), %xmm6
    0000011f: 	xorl	%edx, %edx
    00000121: 	movaps	%xmm3, %xmm1
    00000124: 	pxor	%xmm5, %xmm5
    00000128: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2337:
    00000130: 	movups	(%r14,%rdx), %xmm7
    00000135: 	movups	(%r13,%rdx), %xmm2
    0000013b: 	addq	$0x10, %rdx
    0000013f: 	subps	%xmm7, %xmm2
    00000142: 	movaps	%xmm2, %xmm0
    00000145: 	movaps	%xmm2, %xmm7
    00000148: 	cmpltps	%xmm5, %xmm0
    0000014c: 	xorps	%xmm6, %xmm7
    0000014f: 	andps	%xmm0, %xmm7
    00000152: 	andnps	%xmm2, %xmm0
    00000155: 	orps	%xmm7, %xmm0
    00000158: 	addss	%xmm0, %xmm1
    0000015c: 	movaps	%xmm0, %xmm2
    0000015f: 	shufps	$0x55, %xmm0, %xmm2
    00000163: 	addss	%xmm2, %xmm1
    00000167: 	movaps	%xmm0, %xmm2
    0000016a: 	unpckhps	%xmm0, %xmm2
    0000016d: 	shufps	$0xff, %xmm0, %xmm0
    00000171: 	addss	%xmm2, %xmm1
    00000175: 	addss	%xmm0, %xmm1
    00000179: 	cmpq	%rbp, %rdx
    0000017c: 	jne	.Ltmp2337 # Offset: 380
    0000017e: 	movq	0x18(%rsp), %rax
    00000183: 	movq	%rax, %rdx
    00000186: 	cmpq	%rax, %rbx
    00000189: 	je	.Ltmp2338 # Offset: 393
.Ltmp2350:
    0000018b: 	movss	(%r13,%rdx,4), %xmm0
    00000192: 	subss	(%r14,%rdx,4), %xmm0
    00000198: 	leaq	(,%rdx,4), %rcx
    000001a0: 	comiss	%xmm0, %xmm3
    000001a3: 	jbe	.Ltmp2339 # Offset: 419
    000001a5: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2339:
    000001ac: 	leaq	0x1(%rdx), %rsi
    000001b0: 	addss	%xmm0, %xmm1
    000001b4: 	cmpq	%rsi, %rbx
    000001b7: 	jbe	.Ltmp2338 # Offset: 439
    000001b9: 	movss	0x4(%r13,%rcx), %xmm0
    000001c0: 	subss	0x4(%r14,%rcx), %xmm0
    000001c7: 	comiss	%xmm0, %xmm3
    000001ca: 	jbe	.Ltmp2340 # Offset: 458
    000001cc: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2340:
    000001d3: 	addq	$0x2, %rdx
    000001d7: 	addss	%xmm0, %xmm1
    000001db: 	cmpq	%rdx, %rbx
    000001de: 	jbe	.Ltmp2338 # Offset: 478
    000001e0: 	movss	0x8(%r13,%rcx), %xmm0
    000001e7: 	subss	0x8(%r14,%rcx), %xmm0
    000001ee: 	comiss	%xmm0, %xmm3
    000001f1: 	jbe	.Ltmp2341 # Offset: 497
    000001f3: 	xorps	DATAat0x494c0(%rip), %xmm0
.Ltmp2341:
    000001fa: 	addss	%xmm0, %xmm1
.Ltmp2338:
    000001fe: 	movaps	%xmm3, %xmm2
    00000201: 	xorl	%edx, %edx
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2343:
    00000208: 	movss	(%r13,%rdx,4), %xmm0
    0000020f: 	subss	(%r14,%rdx,4), %xmm0
    00000215: 	comiss	%xmm0, %xmm3
    00000218: 	jbe	.Ltmp2342 # Offset: 536
    0000021a: 	xorps	%xmm4, %xmm0
.Ltmp2342:
    0000021d: 	maxss	%xmm2, %xmm0
    00000221: 	addq	$0x1, %rdx
    00000225: 	movaps	%xmm0, %xmm2
    00000228: 	cmpq	%rdx, %rbx
    0000022b: 	jne	.Ltmp2343 # Offset: 555
    0000022d: 	cmpl	%r15d, 0x90(%rsp)
    00000235: 	jge	.Ltmp2344 # Offset: 565
    00000237: 	movss	DATAat0x49548(%rip), %xmm0
    0000023f: 	comiss	%xmm1, %xmm0
    00000242: 	ja	.Ltmp2345 # Offset: 578
    00000244: 	ucomiss	%xmm1, %xmm1
    00000247: 	jp	.Ltmp2346 # Offset: 583
    0000024d: 	movss	DATAat0x4954c(%rip), %xmm0
    00000255: 	comiss	%xmm2, %xmm0
    00000258: 	ja	.Ltmp2347 # Offset: 600
    0000025e: 	ucomiss	%xmm2, %xmm2
    00000261: 	jp	.Ltmp2346 # Offset: 609
.Ltmp2344:
    00000267: 	movq	%r14, %rdx
    0000026a: 	addl	$0x1, %r15d
    0000026e: 	movq	%r13, %r14
    00000271: 	cmpl	0xc(%rsp), %r15d
    00000276: 	je	.Ltmp2345 # Offset: 630
    00000278: 	movq	%rdx, %r13
    0000027b: 	jmp	.Ltmp2348 # Offset: 635
.Ltmp2335:
    00000280: 	cmpl	%r15d, 0x90(%rsp)
    00000288: 	jl	.Ltmp2349 # Offset: 648
    0000028e: 	movaps	%xmm3, %xmm2
    00000291: 	movaps	%xmm3, %xmm1
    00000294: 	jmp	.Ltmp2344 # Offset: 660
.Ltmp2336:
    00000296: 	movaps	%xmm3, %xmm1
    00000299: 	xorl	%edx, %edx
    0000029b: 	jmp	.Ltmp2350 # Offset: 667
.Ltmp2345:
    000002a0: 	movq	%r14, %rbx
.Ltmp2357:
    000002a3: 	ucomiss	%xmm2, %xmm2
    000002a6: 	setp	%bpl
    000002aa: 	ucomiss	%xmm1, %xmm1
    000002ad: 	setp	%al
    000002b0: 	orl	%eax, %ebp
.Ltmp2356:
    000002b2: 	movss	%xmm1, 0xc(%rsp)
    000002b8: 	movss	%xmm2, 0x8(%rsp)
    000002be: 	callq	clock@PLT # Offset: 702
    000002c3: 	movl	0x4(%rsp), %edi
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	movl	%r12d, %edx
    000002ce: 	movq	%rax, end_time(%rip)
    000002d5: 	subq	start_time(%rip), %rax
    000002dc: 	shrl	$0x1f, %edx
    000002df: 	cvtsi2sd	%rax, %xmm0
    000002e4: 	movl	%edi, %eax
    000002e6: 	addl	%r12d, %edx
    000002e9: 	movss	0x24(%rsp), %xmm4
    000002ef: 	shrl	$0x1f, %eax
    000002f2: 	sarl	%edx
    000002f4: 	divsd	DATAat0x49520(%rip), %xmm0
    000002fc: 	movss	0x8(%rsp), %xmm2
    00000302: 	addl	%edi, %eax
    00000304: 	movss	0xc(%rsp), %xmm1
    0000030a: 	movq	%xmm0, %r14
    0000030f: 	sarl	%eax
    00000311: 	imull	%r12d, %eax
    00000315: 	addl	%edx, %eax
    00000317: 	testb	%bpl, %bpl
    0000031a: 	cltq
    0000031c: 	subss	(%rbx,%rax,4), %xmm4
    00000321: 	movd	%xmm4, %ebx
    00000325: 	jne	.Ltmp2351 # Offset: 805
    0000032b: 	movq	0x28(%rsp), %rax
    00000330: 	cmpl	%r15d, iterations(%rip)
    00000337: 	movq	0x8(%rax), %rdx
    0000033b: 	movq	(%rax), %rsi
    0000033e: 	jg	.Ltmp2352 # Offset: 830
    00000340: 	comiss	DATAat0x49548(%rip), %xmm1
    00000347: 	jbe	.Ltmp2352 # Offset: 839
    00000349: 	comiss	DATAat0x4954c(%rip), %xmm2
    00000350: 	ja	.Ltmp2353 # Offset: 848
.Ltmp2352:
    00000356: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000035d: 	movss	%xmm1, 0x8(%rsp)
    00000363: 	movq	%rbp, %rdi
    00000366: 	movss	%xmm2, 0x4(%rsp)
    0000036c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 876
    00000371: 	movl	$0xa, %edx
    00000376: 	leaq	DATAat0x491ab(%rip), %rsi
    0000037d: 	movq	%rax, %rdi
    00000380: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 896
    00000385: 	movss	0x8(%rsp), %xmm1
    0000038b: 	movss	0x4(%rsp), %xmm2
.Ltmp2355:
    00000391: 	movl	$0x4, %edx
    00000396: 	movq	%rbp, %rdi
    00000399: 	leaq	DATAat0x491b6(%rip), %rsi
    000003a0: 	movss	%xmm2, 0x4(%rsp)
    000003a6: 	movss	%xmm1, 0x8(%rsp)
    000003ac: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 940
    000003b1: 	movq	%rbp, %rdi
    000003b4: 	movl	%r15d, %esi
    000003b7: 	callq	_ZNSolsEi@PLT # Offset: 951
    000003bc: 	movl	$0xb, %edx
    000003c1: 	leaq	DATAat0x491bb(%rip), %rsi
    000003c8: 	movq	%rax, %rdi
    000003cb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 971
    000003d0: 	movl	$0xa, %edx
    000003d5: 	leaq	DATAat0x491c7(%rip), %rsi
    000003dc: 	movq	%rbp, %rdi
    000003df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 991
    000003e4: 	movss	0x8(%rsp), %xmm1
    000003ea: 	movq	%rbp, %rdi
    000003ed: 	pxor	%xmm0, %xmm0
    000003f1: 	cvtss2sd	%xmm1, %xmm0
    000003f5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1013
    000003fa: 	movl	$0x7, %edx
    000003ff: 	leaq	DATAat0x491d2(%rip), %rsi
    00000406: 	movq	%rax, %rdi
    00000409: 	movq	%rax, %rbp
    0000040c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1036
    00000411: 	movss	0x4(%rsp), %xmm2
    00000417: 	movq	%rbp, %rdi
    0000041a: 	pxor	%xmm0, %xmm0
    0000041e: 	cvtss2sd	%xmm2, %xmm0
    00000422: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1058
    00000427: 	movl	$0x10, %edx
    0000042c: 	leaq	DATAat0x491da(%rip), %rsi
    00000433: 	movq	%rax, %rbp
    00000436: 	movq	%rax, %rdi
    00000439: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1081
    0000043e: 	movd	%ebx, %xmm4
    00000442: 	movq	%rbp, %rdi
    00000445: 	pxor	%xmm0, %xmm0
    00000449: 	cvtss2sd	%xmm4, %xmm0
    0000044d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1101
    00000452: 	movl	$0x8, %edx
    00000457: 	leaq	DATAat0x491eb(%rip), %rsi
    0000045e: 	movq	%rax, %rbp
    00000461: 	movq	%rax, %rdi
    00000464: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1124
    00000469: 	movq	%r14, %xmm0
    0000046e: 	movq	%rbp, %rdi
    00000471: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1137
    00000476: 	movl	$0x2, %edx
    0000047b: 	leaq	DATAat0x491f4(%rip), %rsi
    00000482: 	movq	%rax, %rdi
    00000485: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1157
    0000048a: 	movl	0x20(%rsp), %eax
    0000048e: 	movl	%eax, iterations(%rip)
    00000494: 	movq	0x48(%rsp), %rax
    00000499: 	subq	%fs:0x28, %rax
    000004a2: 	jne	.Ltmp2354 # Offset: 1186
    000004a8: 	addq	$0x58, %rsp
    000004ac: 	popq	%rbx
    000004ad: 	popq	%rbp
    000004ae: 	popq	%r12
    000004b0: 	popq	%r13
    000004b2: 	popq	%r14
    000004b4: 	popq	%r15
    000004b6: 	retq # Offset: 1206
.Ltmp2351:
    000004b7: 	movq	0x28(%rsp), %rax
    000004bc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000004c3: 	movss	%xmm1, 0x8(%rsp)
    000004c9: 	movq	%rbp, %rdi
    000004cc: 	movss	%xmm2, 0x4(%rsp)
    000004d2: 	movq	0x8(%rax), %rdx
    000004d6: 	movq	(%rax), %rsi
    000004d9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1241
    000004de: 	movl	$0x10, %edx
    000004e3: 	leaq	DATAat0x493d4(%rip), %rsi
    000004ea: 	movq	%rax, %rdi
    000004ed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1261
    000004f2: 	movss	0x4(%rsp), %xmm2
    000004f8: 	movss	0x8(%rsp), %xmm1
    000004fe: 	jmp	.Ltmp2355 # Offset: 1278
.Ltmp2346:
    00000503: 	movq	%r14, %rbx
    00000506: 	movl	$0x1, %ebp
    0000050b: 	jmp	.Ltmp2356 # Offset: 1291
.Ltmp2353:
    00000510: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000517: 	movss	%xmm1, 0x8(%rsp)
    0000051d: 	movq	%rbp, %rdi
    00000520: 	movss	%xmm2, 0x4(%rsp)
    00000526: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1318
    0000052b: 	movl	$0x11, %edx
    00000530: 	leaq	DATAat0x49199(%rip), %rsi
    00000537: 	movq	%rax, %rdi
    0000053a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1338
    0000053f: 	movss	0x4(%rsp), %xmm2
    00000545: 	movss	0x8(%rsp), %xmm1
    0000054b: 	jmp	.Ltmp2355 # Offset: 1355
.Ltmp2349:
    00000550: 	movq	%r14, %rbx
    00000553: 	movaps	%xmm3, %xmm2
    00000556: 	movaps	%xmm3, %xmm1
    00000559: 	jmp	.Ltmp2357 # Offset: 1369
.Ltmp2347:
    0000055e: 	ucomiss	%xmm2, %xmm2
    00000561: 	movq	%r14, %rbx
    00000564: 	setp	%bpl
    00000568: 	jmp	.Ltmp2356 # Offset: 1384
.Ltmp2334:
    0000056d: 	pxor	%xmm2, %xmm2
    00000571: 	xorl	%ebp, %ebp
    00000573: 	xorl	%r15d, %r15d
    00000576: 	movaps	%xmm2, %xmm1
    00000579: 	jmp	.Ltmp2356 # Offset: 1401
.Ltmp2354:
    0000057e: 	callq	__stack_chk_fail@PLT # Offset: 1406
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z13testLaplace2DIff19jacobi_sor2D_simpleIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x38a60
  Size        : 0x5f8
  MaxSize     : 0x600
  Offset      : 0x38a60
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIff19jacobi_sor2D_simpleIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%r14d, %edx
    0000001c: 	movl	%ebx, %esi
    0000001e: 	subq	$0xa8, %rsp
    00000025: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002c: 	movl	%ecx, 0x28(%rsp)
    00000030: 	leaq	0x80(%rsp), %rcx
    00000038: 	movl	%r8d, 0x1c(%rsp)
    0000003d: 	movq	%r9, 0x68(%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0x98(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x80(%rsp)
    0000005d: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 93
    00000062: 	movl	%r14d, %eax
    00000065: 	imull	%ebx, %eax
    00000068: 	testl	%eax, %eax
    0000006a: 	jle	.Ltmp2358 # Offset: 106
    0000006c: 	cltq
    0000006e: 	movq	%rbp, %rsi
    00000071: 	movq	%r15, %rdi
    00000074: 	leaq	(,%rax,4), %rdx
    0000007c: 	callq	memmove@PLT # Offset: 124
.Ltmp2358:
    00000081: 	callq	clock@PLT # Offset: 129
    00000086: 	movq	%rax, start_time(%rip)
    0000008d: 	movl	iterations(%rip), %eax
    00000093: 	movl	%eax, 0x5c(%rsp)
    00000097: 	testl	%eax, %eax
    00000099: 	jle	.Ltmp2359 # Offset: 153
    0000009f: 	movl	0x28(%rsp), %esi
    000000a3: 	leal	-0x1(%rbx), %edi
    000000a6: 	movl	%edi, 0x2c(%rsp)
    000000aa: 	leal	-0x1(%rsi), %eax
    000000ad: 	cmpl	$0x1, %edi
    000000b0: 	jle	.Ltmp2359 # Offset: 176
    000000b6: 	cmpl	$0x1, %eax
    000000b9: 	jle	.Ltmp2359 # Offset: 185
    000000bf: 	movslq	0x1c(%rsp), %rax
    000000c4: 	leal	-0x2(%rsi), %edi
    000000c7: 	leal	-0x3(%rsi), %ebx
    000000ca: 	pxor	%xmm5, %xmm5
    000000ce: 	movl	%edi, 0x34(%rsp)
    000000d2: 	movaps	DATAat0x49420(%rip), %xmm2
    000000d9: 	movq	%rax, 0x8(%rsp)
    000000de: 	leaq	(,%rax,4), %r13
    000000e6: 	leal	(%rax,%rax), %eax
    000000e9: 	movaps	DATAat0x49430(%rip), %xmm1
    000000f0: 	cltq
    000000f2: 	movl	%ebx, 0x30(%rsp)
    000000f6: 	movq	0x8(%rsp), %r14
    000000fb: 	leaq	0x4(,%rax,4), %rax
    00000103: 	movl	$0x0, 0x58(%rsp)
    0000010b: 	movq	%rax, 0x60(%rsp)
    00000110: 	movl	%edi, %eax
    00000112: 	andl	$-0x4, %edi
    00000115: 	shrl	$0x2, %eax
    00000118: 	subl	%edi, %esi
    0000011a: 	movl	%edi, 0x40(%rsp)
    0000011e: 	subl	$0x1, %eax
    00000121: 	movl	%esi, 0x48(%rsp)
    00000125: 	addq	$0x1, %rax
    00000129: 	shlq	$0x4, %rax
    0000012d: 	movq	%rax, 0x38(%rsp)
    00000132: 	leal	0x1(%rdi), %eax
    00000135: 	leal	-0x2(%rsi), %edi
    00000138: 	movl	%eax, 0x44(%rsp)
    0000013c: 	movl	%ebx, %eax
    0000013e: 	leaq	0x4(,%rax,4), %rax
    00000146: 	movl	%edi, 0x4c(%rsp)
    0000014a: 	movq	%rax, 0x50(%rsp)
    0000014f: 	nop # Size: 1
.Ltmp2366:
    00000150: 	movq	0x60(%rsp), %rax
    00000155: 	movq	$0x0, (%rsp)
    0000015d: 	movq	%r13, %rdx
    00000160: 	leaq	0x8(%rbp), %rdi
    00000164: 	movl	$0x1, 0x18(%rsp)
    0000016c: 	movl	0x1c(%rsp), %r11d
    00000171: 	leaq	(%rbp,%rax), %r8
    00000176: 	leaq	0x4(%r15), %rax
    0000017a: 	movss	DATAat0x49420(%rip), %xmm4
    00000182: 	movss	DATAat0x49430(%rip), %xmm3
    0000018a: 	movq	DATAat0x49420(%rip), %xmm6
    00000192: 	movq	%rax, 0x20(%rsp)
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2365:
    000001a0: 	movl	0x1c(%rsp), %eax
    000001a4: 	movl	%r11d, %ecx
    000001a7: 	movl	%r11d, %esi
    000001aa: 	movq	%r15, %r10
    000001ad: 	subq	%rbp, %r10
    000001b0: 	addl	$0x1, 0x18(%rsp)
    000001b5: 	movq	%r14, %r9
    000001b8: 	addq	0x8(%rsp), %r14
    000001bd: 	subl	%eax, %ecx
    000001bf: 	leal	(%rcx,%rax,2), %r11d
    000001c3: 	movq	0x20(%rsp), %rax
    000001c8: 	addq	%rdx, %rax
    000001cb: 	cmpq	$0x10, %r10
    000001cf: 	seta	%r10b
    000001d3: 	cmpl	$0x3, 0x28(%rsp)
    000001d8: 	setne	%bl
    000001db: 	andl	%ebx, %r10d
    000001de: 	movq	%rax, %rbx
    000001e1: 	subq	%rdi, %rbx
    000001e4: 	cmpq	$0x8, %rbx
    000001e8: 	seta	%bl
    000001eb: 	testb	%bl, %r10b
    000001ee: 	je	.Ltmp2360 # Offset: 494
    000001f4: 	leaq	0x4(%r8), %rbx
    000001f8: 	movq	%rax, %r10
    000001fb: 	subq	%rbx, %r10
    000001fe: 	cmpq	$0x8, %r10
    00000202: 	jbe	.Ltmp2360 # Offset: 514
    00000208: 	cmpl	$0x2, 0x30(%rsp)
    0000020d: 	jbe	.Ltmp2361 # Offset: 525
    00000213: 	movq	%rdx, 0x10(%rsp)
    00000218: 	leaq	-0x4(%rdi), %rbx
    0000021c: 	xorl	%r12d, %r12d
    0000021f: 	addq	%r13, %rdi
    00000222: 	leaq	(%rbp,%rdx), %r10
    00000227: 	movq	0x38(%rsp), %rdx
    0000022c: 	pxor	%xmm7, %xmm7
.Ltmp2362:
    00000230: 	movups	(%rbx,%r12), %xmm0
    00000235: 	movups	(%r10,%r12), %xmm12
    0000023a: 	movups	(%rdi,%r12), %xmm13
    0000023f: 	movups	(%r8,%r12), %xmm14
    00000244: 	addps	%xmm12, %xmm0
    00000248: 	movups	(%rax,%r12), %xmm15
    0000024d: 	addps	%xmm13, %xmm0
    00000251: 	addps	%xmm14, %xmm0
    00000255: 	addps	%xmm7, %xmm0
    00000258: 	mulps	%xmm2, %xmm0
    0000025b: 	subps	%xmm15, %xmm0
    0000025f: 	mulps	%xmm1, %xmm0
    00000262: 	addps	%xmm15, %xmm0
    00000266: 	movups	%xmm0, (%rax,%r12)
    0000026b: 	addq	$0x10, %r12
    0000026f: 	cmpq	%rdx, %r12
    00000272: 	jne	.Ltmp2362 # Offset: 626
    00000274: 	movq	0x10(%rsp), %rdx
    00000279: 	movl	0x40(%rsp), %eax
    0000027d: 	leaq	(%r13,%rdx), %r10
    00000282: 	cmpl	%eax, 0x34(%rsp)
    00000286: 	je	.Ltmp2363 # Offset: 646
    0000028c: 	cmpl	$0x3, 0x48(%rsp)
    00000291: 	movl	0x4c(%rsp), %r12d
    00000296: 	je	.Ltmp2364 # Offset: 662
    0000029c: 	movl	%eax, %r10d
    0000029f: 	movl	0x44(%rsp), %eax
    000002a3: 	movl	%eax, 0x10(%rsp)
.Ltmp2368:
    000002a7: 	movq	(%rsp), %rax
    000002ab: 	leaq	0x1(%r9,%r10), %r9
    000002b0: 	shlq	$0x2, %r9
    000002b4: 	leaq	0x1(%rax,%r10), %rax
    000002b9: 	movq	-0x4(%rbp,%r9), %xmm8
    000002c0: 	leaq	(%r15,%r9), %rbx
    000002c4: 	movq	(%rbp,%rax,4), %xmm0
    000002ca: 	movq	(%rbx), %xmm7
    000002ce: 	movl	0x10(%rsp), %eax
    000002d2: 	addps	%xmm8, %xmm0
    000002d6: 	movq	0x4(%rbp,%r9), %xmm8
    000002dd: 	leaq	0x1(%r14,%r10), %r9
    000002e2: 	leaq	(%r13,%rdx), %r10
    000002e7: 	addps	%xmm8, %xmm0
    000002eb: 	movq	(%rbp,%r9,4), %xmm8
    000002f2: 	movl	%r12d, %r9d
    000002f5: 	andl	$-0x2, %r9d
    000002f9: 	addl	%r9d, %eax
    000002fc: 	addps	%xmm8, %xmm0
    00000300: 	xorps	%xmm8, %xmm8
    00000304: 	addps	%xmm8, %xmm0
    00000308: 	movq	DATAat0x49430(%rip), %xmm8
    00000311: 	mulps	%xmm6, %xmm0
    00000314: 	subps	%xmm7, %xmm0
    00000317: 	mulps	%xmm8, %xmm0
    0000031b: 	addps	%xmm7, %xmm0
    0000031e: 	movlps	%xmm0, (%rbx)
    00000321: 	cmpl	%r9d, %r12d
    00000324: 	je	.Ltmp2363 # Offset: 804
.Ltmp2369:
    00000326: 	addl	%eax, %ecx
    00000328: 	leal	(%rsi,%rax), %r9d
    0000032c: 	leaq	(%r13,%rdx), %r10
    00000331: 	movslq	%ecx, %rcx
    00000334: 	movslq	%r9d, %r9
    00000337: 	movss	(%rbp,%rcx,4), %xmm0
    0000033d: 	leal	-0x1(%rsi,%rax), %ecx
    00000341: 	leaq	(%r15,%r9,4), %r9
    00000345: 	movslq	%ecx, %rcx
    00000348: 	movss	(%r9), %xmm7
    0000034d: 	addss	(%rbp,%rcx,4), %xmm0
    00000353: 	leal	0x1(%rsi,%rax), %ecx
    00000357: 	addl	%r11d, %eax
    0000035a: 	movslq	%ecx, %rcx
    0000035d: 	cltq
    0000035f: 	addss	(%rbp,%rcx,4), %xmm0
    00000365: 	addss	(%rbp,%rax,4), %xmm0
    0000036b: 	addss	%xmm5, %xmm0
    0000036f: 	mulss	%xmm4, %xmm0
    00000373: 	subss	%xmm7, %xmm0
    00000377: 	mulss	%xmm3, %xmm0
    0000037b: 	addss	%xmm7, %xmm0
    0000037f: 	movss	%xmm0, (%r9)
.Ltmp2363:
    00000384: 	movq	0x8(%rsp), %rsi
    00000389: 	movl	0x18(%rsp), %ebx
    0000038d: 	movq	%r10, %rdx
    00000390: 	addq	%r13, %r8
    00000393: 	addq	%rsi, (%rsp)
    00000397: 	cmpl	%ebx, 0x2c(%rsp)
    0000039b: 	jne	.Ltmp2365 # Offset: 923
    000003a1: 	addl	$0x1, 0x58(%rsp)
    000003a6: 	movq	%r15, %rax
    000003a9: 	movl	0x58(%rsp), %edi
    000003ad: 	movq	%rbp, %r15
    000003b0: 	cmpl	0x5c(%rsp), %edi
    000003b4: 	je	.Ltmp2359 # Offset: 948
    000003ba: 	movq	%rax, %rbp
    000003bd: 	movq	%rsi, %r14
    000003c0: 	jmp	.Ltmp2366 # Offset: 960
    000003c5: 	nopl	(%rax) # Size: 3
.Ltmp2360:
    000003c8: 	movq	(%rsp), %rsi
    000003cc: 	negq	%r9
    000003cf: 	leaq	(%r13,%rdx), %r10
    000003d4: 	movss	DATAat0x49420(%rip), %xmm9
    000003dd: 	leaq	(,%r9,4), %rax
    000003e5: 	pxor	%xmm10, %xmm10
    000003ea: 	movss	DATAat0x49430(%rip), %xmm8
    000003f3: 	leaq	(%rax,%rsi,4), %rcx
    000003f7: 	movq	0x50(%rsp), %rsi
    000003fc: 	addq	%r10, %rax
    000003ff: 	addq	%rbp, %rcx
    00000402: 	addq	%rbp, %rax
    00000405: 	addq	%rdx, %rsi
    00000408: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2367:
    00000410: 	movss	0x4(%rcx,%rdx), %xmm7
    00000416: 	addss	(%rbp,%rdx), %xmm7
    0000041c: 	movss	0x8(%rbp,%rdx), %xmm0
    00000422: 	movss	0x4(%r15,%rdx), %xmm11
    00000429: 	addss	%xmm7, %xmm0
    0000042d: 	addss	0x4(%rax,%rdx), %xmm0
    00000433: 	addss	%xmm10, %xmm0
    00000438: 	mulss	%xmm9, %xmm0
    0000043d: 	subss	%xmm11, %xmm0
    00000442: 	mulss	%xmm8, %xmm0
    00000447: 	addss	%xmm11, %xmm0
    0000044c: 	movss	%xmm0, 0x4(%r15,%rdx)
    00000453: 	addq	$0x4, %rdx
    00000457: 	cmpq	%rdx, %rsi
    0000045a: 	jne	.Ltmp2367 # Offset: 1114
    0000045c: 	addq	%r13, %rdi
    0000045f: 	jmp	.Ltmp2363 # Offset: 1119
.Ltmp2361:
    00000464: 	movl	$0x1, 0x10(%rsp)
    0000046c: 	movl	0x34(%rsp), %r12d
    00000471: 	xorl	%r10d, %r10d
    00000474: 	addq	%r13, %rdi
    00000477: 	jmp	.Ltmp2368 # Offset: 1143
.Ltmp2364:
    0000047c: 	movl	0x44(%rsp), %eax
    00000480: 	jmp	.Ltmp2369 # Offset: 1152
.Ltmp2359:
    00000485: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000048c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000493: 	subq	$0x20, %rax
    00000497: 	cmpq	%rax, %rbx
    0000049a: 	je	.Ltmp2370 # Offset: 1178
    000004a0: 	movq	0x68(%rsp), %rax
    000004a5: 	leaq	0x10(%rbx), %rdi
    000004a9: 	movq	%rdi, (%rbx)
    000004ac: 	movq	(%rax), %rbp
    000004af: 	movq	0x8(%rax), %r12
    000004b3: 	movq	%rbp, %rax
    000004b6: 	addq	%r12, %rax
    000004b9: 	je	.Ltmp2371 # Offset: 1209
    000004bb: 	testq	%rbp, %rbp
    000004be: 	je	.Ltmp2372 # Offset: 1214
.Ltmp2371:
    000004c4: 	movq	%r12, 0x78(%rsp)
    000004c9: 	cmpq	$0xf, %r12
    000004cd: 	ja	.Ltmp2373 # Offset: 1229
    000004d3: 	cmpq	$0x1, %r12
    000004d7: 	jne	.Ltmp2374 # Offset: 1239
    000004dd: 	movzbl	(%rbp), %eax
    000004e1: 	movb	%al, 0x10(%rbx)
.Ltmp2377:
    000004e4: 	movq	%r12, 0x8(%rbx)
    000004e8: 	movb	$0x0, (%rdi,%r12)
    000004ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004f4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004fb: 	addq	$0x20, %rax
    000004ff: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000506: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000050d: 	je	.Ltmp2375 # Offset: 1293
.Ltmp2378:
    00000513: 	movq	-0x20(%rax), %rbp
    00000517: 	callq	clock@PLT # Offset: 1303
    0000051c: 	movq	%rax, end_time(%rip)
    00000523: 	movq	0x98(%rsp), %rdx
    0000052b: 	subq	%fs:0x28, %rdx
    00000534: 	jne	.Ltmp2376 # Offset: 1332
    0000053a: 	subq	start_time(%rip), %rax
    00000541: 	pxor	%xmm0, %xmm0
    00000545: 	movq	%rbp, %rdi
    00000548: 	cvtsi2sd	%rax, %xmm0
    0000054d: 	divsd	DATAat0x49520(%rip), %xmm0
    00000555: 	addq	$0xa8, %rsp
    0000055c: 	popq	%rbx
    0000055d: 	popq	%rbp
    0000055e: 	popq	%r12
    00000560: 	popq	%r13
    00000562: 	popq	%r14
    00000564: 	popq	%r15
    00000566: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1382
.Ltmp2373:
    0000056b: 	movq	%rbx, %rdi
    0000056e: 	leaq	0x78(%rsp), %rsi
    00000573: 	xorl	%edx, %edx
    00000575: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1397
    0000057a: 	movq	%rax, (%rbx)
    0000057d: 	movq	%rax, %rdi
    00000580: 	movq	0x78(%rsp), %rax
    00000585: 	movq	%rax, 0x10(%rbx)
.Ltmp2379:
    00000589: 	movq	%r12, %rdx
    0000058c: 	movq	%rbp, %rsi
    0000058f: 	callq	memcpy@PLT # Offset: 1423
    00000594: 	movq	0x78(%rsp), %r12
    00000599: 	movq	(%rbx), %rdi
    0000059c: 	jmp	.Ltmp2377 # Offset: 1436
.Ltmp2370:
    000005a1: 	movq	0x68(%rsp), %rsi
    000005a6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000005ad: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1453
    000005b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005b9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005c0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005c7: 	jne	.Ltmp2378 # Offset: 1479
.Ltmp2375:
    000005cd: 	movq	-0x8(%rdx), %rax
    000005d1: 	addq	$0x200, %rax
    000005d7: 	jmp	.Ltmp2378 # Offset: 1495
.Ltmp2374:
    000005dc: 	testq	%r12, %r12
    000005df: 	je	.Ltmp2377 # Offset: 1503
    000005e5: 	jmp	.Ltmp2379 # Offset: 1509
.Ltmp2376:
    000005e7: 	callq	__stack_chk_fail@PLT # Offset: 1511
.Ltmp2372:
    000005ec: 	leaq	DATAat0x49008(%rip), %rdi
    000005f3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1523
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIff19jacobi_sor2D_simpleIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIff20jacobi_sor2D_swappedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x39060
  Size        : 0x2d7
  MaxSize     : 0x2e0
  Offset      : 0x39060
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIff20jacobi_sor2D_swappedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%r13d, %edx
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r14d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x48, %rsp
    00000027: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002e: 	movq	%r9, 0x8(%rsp)
    00000033: 	leaq	0x20(%rsp), %rcx
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0x38(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	movaps	%xmm0, 0x20(%rsp)
    0000004d: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 77
    00000052: 	movl	%r14d, %eax
    00000055: 	imull	%r13d, %eax
    00000059: 	testl	%eax, %eax
    0000005b: 	jle	.Ltmp2380 # Offset: 91
    0000005d: 	cltq
    0000005f: 	movq	%rbx, %rsi
    00000062: 	movq	%rbp, %rdi
    00000065: 	leaq	(,%rax,4), %rdx
    0000006d: 	callq	memmove@PLT # Offset: 109
.Ltmp2380:
    00000072: 	callq	clock@PLT # Offset: 114
    00000077: 	movq	%rax, start_time(%rip)
    0000007e: 	movl	iterations(%rip), %eax
    00000084: 	movl	%eax, 0x4(%rsp)
    00000088: 	testl	%eax, %eax
    0000008a: 	jle	.Ltmp2381 # Offset: 138
    00000090: 	subl	$0x1, %r13d
    00000094: 	leal	-0x1(%r14), %r8d
    00000098: 	cmpl	$0x1, %r13d
    0000009c: 	jle	.Ltmp2381 # Offset: 156
    000000a2: 	cmpl	$0x1, %r8d
    000000a6: 	jle	.Ltmp2381 # Offset: 166
    000000ac: 	movslq	%r12d, %rdi
    000000af: 	movss	DATAat0x49420(%rip), %xmm4
    000000b7: 	xorl	%r14d, %r14d
    000000ba: 	pxor	%xmm5, %xmm5
    000000be: 	movq	%rdi, %r9
    000000c1: 	movss	DATAat0x49430(%rip), %xmm3
    000000c9: 	leaq	0x4(,%rdi,4), %r15
    000000d1: 	leaq	(,%rdi,4), %rsi
    000000d9: 	negq	%r9
    000000dc: 	shlq	$0x2, %r9
.Ltmp2384:
    000000e0: 	leaq	(%rbp,%r15), %r12
    000000e5: 	leaq	(%rbx,%rsi), %r11
    000000e9: 	movl	$0x1, %r10d
    000000ef: 	nop # Size: 1
.Ltmp2383:
    000000f0: 	addl	$0x1, %r10d
    000000f4: 	movq	%r11, %rax
    000000f7: 	movq	%r12, %rdx
    000000fa: 	movl	$0x1, %ecx
    000000ff: 	nop # Size: 1
.Ltmp2382:
    00000100: 	movss	0x4(%rax,%r9), %xmm1
    00000107: 	addss	(%rax), %xmm1
    0000010b: 	addl	$0x1, %ecx
    0000010e: 	movss	0x8(%rax), %xmm0
    00000113: 	movss	(%rdx), %xmm2
    00000117: 	addss	%xmm1, %xmm0
    0000011b: 	addss	0x4(%rax,%rdi,4), %xmm0
    00000121: 	addq	%rsi, %rax
    00000124: 	addss	%xmm5, %xmm0
    00000128: 	mulss	%xmm4, %xmm0
    0000012c: 	subss	%xmm2, %xmm0
    00000130: 	mulss	%xmm3, %xmm0
    00000134: 	addss	%xmm2, %xmm0
    00000138: 	movss	%xmm0, (%rdx)
    0000013c: 	addq	%rsi, %rdx
    0000013f: 	cmpl	%r8d, %ecx
    00000142: 	jne	.Ltmp2382 # Offset: 322
    00000144: 	addq	$0x4, %r12
    00000148: 	addq	$0x4, %r11
    0000014c: 	cmpl	%r10d, %r13d
    0000014f: 	jne	.Ltmp2383 # Offset: 335
    00000151: 	movq	%rbp, %rax
    00000154: 	addl	$0x1, %r14d
    00000158: 	movq	%rbx, %rbp
    0000015b: 	cmpl	0x4(%rsp), %r14d
    00000160: 	je	.Ltmp2381 # Offset: 352
    00000162: 	movq	%rax, %rbx
    00000165: 	jmp	.Ltmp2384 # Offset: 357
.Ltmp2381:
    0000016a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000171: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000178: 	subq	$0x20, %rax
    0000017c: 	cmpq	%rax, %rbx
    0000017f: 	je	.Ltmp2385 # Offset: 383
    00000185: 	movq	0x8(%rsp), %rax
    0000018a: 	leaq	0x10(%rbx), %rdi
    0000018e: 	movq	%rdi, (%rbx)
    00000191: 	movq	(%rax), %rbp
    00000194: 	movq	0x8(%rax), %r12
    00000198: 	movq	%rbp, %rax
    0000019b: 	addq	%r12, %rax
    0000019e: 	je	.Ltmp2386 # Offset: 414
    000001a0: 	testq	%rbp, %rbp
    000001a3: 	je	.Ltmp2387 # Offset: 419
.Ltmp2386:
    000001a9: 	movq	%r12, 0x18(%rsp)
    000001ae: 	cmpq	$0xf, %r12
    000001b2: 	ja	.Ltmp2388 # Offset: 434
    000001b8: 	cmpq	$0x1, %r12
    000001bc: 	jne	.Ltmp2389 # Offset: 444
    000001c2: 	movzbl	(%rbp), %eax
    000001c6: 	movb	%al, 0x10(%rbx)
.Ltmp2392:
    000001c9: 	movq	%r12, 0x8(%rbx)
    000001cd: 	movb	$0x0, (%rdi,%r12)
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001d9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e0: 	addq	$0x20, %rax
    000001e4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001eb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001f2: 	je	.Ltmp2390 # Offset: 498
.Ltmp2393:
    000001f8: 	movq	-0x20(%rax), %rbp
    000001fc: 	callq	clock@PLT # Offset: 508
    00000201: 	movq	%rax, end_time(%rip)
    00000208: 	movq	0x38(%rsp), %rdx
    0000020d: 	subq	%fs:0x28, %rdx
    00000216: 	jne	.Ltmp2391 # Offset: 534
    0000021c: 	subq	start_time(%rip), %rax
    00000223: 	pxor	%xmm0, %xmm0
    00000227: 	movq	%rbp, %rdi
    0000022a: 	cvtsi2sd	%rax, %xmm0
    0000022f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000237: 	addq	$0x48, %rsp
    0000023b: 	popq	%rbx
    0000023c: 	popq	%rbp
    0000023d: 	popq	%r12
    0000023f: 	popq	%r13
    00000241: 	popq	%r14
    00000243: 	popq	%r15
    00000245: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 581
.Ltmp2388:
    0000024a: 	movq	%rbx, %rdi
    0000024d: 	leaq	0x18(%rsp), %rsi
    00000252: 	xorl	%edx, %edx
    00000254: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 596
    00000259: 	movq	%rax, (%rbx)
    0000025c: 	movq	%rax, %rdi
    0000025f: 	movq	0x18(%rsp), %rax
    00000264: 	movq	%rax, 0x10(%rbx)
.Ltmp2394:
    00000268: 	movq	%r12, %rdx
    0000026b: 	movq	%rbp, %rsi
    0000026e: 	callq	memcpy@PLT # Offset: 622
    00000273: 	movq	0x18(%rsp), %r12
    00000278: 	movq	(%rbx), %rdi
    0000027b: 	jmp	.Ltmp2392 # Offset: 635
.Ltmp2385:
    00000280: 	movq	0x8(%rsp), %rsi
    00000285: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000028c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 652
    00000291: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000298: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a6: 	jne	.Ltmp2393 # Offset: 678
.Ltmp2390:
    000002ac: 	movq	-0x8(%rdx), %rax
    000002b0: 	addq	$0x200, %rax
    000002b6: 	jmp	.Ltmp2393 # Offset: 694
.Ltmp2389:
    000002bb: 	testq	%r12, %r12
    000002be: 	je	.Ltmp2392 # Offset: 702
    000002c4: 	jmp	.Ltmp2394 # Offset: 708
.Ltmp2391:
    000002c6: 	callq	__stack_chk_fail@PLT # Offset: 710
.Ltmp2387:
    000002cb: 	leaq	DATAat0x49008(%rip), %rdi
    000002d2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 722
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIff20jacobi_sor2D_swappedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x39340
  Size        : 0x5e0
  MaxSize     : 0x5e0
  Offset      : 0x39340
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%ecx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%r14d, %edx
    0000001c: 	movl	%ebx, %esi
    0000001e: 	subq	$0xb8, %rsp
    00000025: 	movaps	DATAat0x494a0(%rip), %xmm0
    0000002c: 	movl	%ecx, 0x30(%rsp)
    00000030: 	leaq	0x90(%rsp), %rcx
    00000038: 	movl	%r8d, 0x14(%rsp)
    0000003d: 	movq	%r9, 0x78(%rsp)
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0xa8(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	movaps	%xmm0, 0x90(%rsp)
    0000005d: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 93
    00000062: 	movl	%r14d, %eax
    00000065: 	imull	%ebx, %eax
    00000068: 	testl	%eax, %eax
    0000006a: 	jle	.Ltmp2395 # Offset: 106
    0000006c: 	cltq
    0000006e: 	movq	%r12, %rsi
    00000071: 	movq	%rbp, %rdi
    00000074: 	leaq	(,%rax,4), %rdx
    0000007c: 	callq	memmove@PLT # Offset: 124
.Ltmp2395:
    00000081: 	callq	clock@PLT # Offset: 129
    00000086: 	movq	%rax, start_time(%rip)
    0000008d: 	movl	iterations(%rip), %eax
    00000093: 	movl	%eax, 0x58(%rsp)
    00000097: 	testl	%eax, %eax
    00000099: 	jle	.Ltmp2396 # Offset: 153
    0000009f: 	leal	-0x2(%rbx), %edx
    000000a2: 	movl	0x30(%rsp), %ebx
    000000a6: 	movl	%edx, 0x54(%rsp)
    000000aa: 	leal	-0x1(%rbx), %eax
    000000ad: 	testl	%edx, %edx
    000000af: 	jle	.Ltmp2396 # Offset: 175
    000000b5: 	cmpl	$0x1, %eax
    000000b8: 	jle	.Ltmp2396 # Offset: 184
    000000be: 	movl	0x14(%rsp), %edi
    000000c2: 	movl	$0x0, 0x50(%rsp)
    000000ca: 	pxor	%xmm6, %xmm6
    000000ce: 	movss	DATAat0x49420(%rip), %xmm5
    000000d6: 	movaps	DATAat0x49420(%rip), %xmm3
    000000dd: 	movl	%edi, %ecx
    000000df: 	movaps	DATAat0x49430(%rip), %xmm2
    000000e6: 	imull	%edx, %ecx
    000000e9: 	movslq	%ecx, %rax
    000000ec: 	movl	%ecx, 0x5c(%rsp)
    000000f0: 	movq	%rax, 0x60(%rsp)
    000000f5: 	movl	%ecx, %eax
    000000f7: 	subl	%edi, %eax
    000000f9: 	movslq	%eax, %rdx
    000000fc: 	movq	%rdx, 0x68(%rsp)
    00000101: 	leal	(%rax,%rdi,2), %edx
    00000104: 	subl	%ecx, %eax
    00000106: 	leal	-0x2(%rbx), %ecx
    00000109: 	movl	%eax, 0x34(%rsp)
    0000010d: 	leal	-0x3(%rbx), %eax
    00000110: 	movslq	%edx, %rdi
    00000113: 	movl	%eax, 0x38(%rsp)
    00000117: 	movl	%ecx, %eax
    00000119: 	shrl	$0x2, %eax
    0000011c: 	movl	%ecx, 0x3c(%rsp)
    00000120: 	andl	$-0x4, %ecx
    00000123: 	subl	$0x1, %eax
    00000126: 	subl	%ecx, %ebx
    00000128: 	movq	%rdi, 0x70(%rsp)
    0000012d: 	addq	$0x1, %rax
    00000131: 	movl	%ecx, 0x40(%rsp)
    00000135: 	shlq	$0x4, %rax
    00000139: 	movl	%ebx, 0x48(%rsp)
    0000013d: 	movq	%rax, %r13
    00000140: 	leal	0x1(%rcx), %eax
    00000143: 	movl	%eax, 0x44(%rsp)
    00000147: 	leal	-0x2(%rbx), %eax
    0000014a: 	movq	%r13, %r15
    0000014d: 	movl	%eax, 0x4c(%rsp)
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp2403:
    00000158: 	movl	0x14(%rsp), %eax
    0000015c: 	movq	0x70(%rsp), %rbx
    00000161: 	pxor	%xmm7, %xmm7
    00000165: 	movq	0x68(%rsp), %r11
    0000016a: 	movq	0x60(%rsp), %r10
    0000016f: 	negl	%eax
    00000171: 	movl	0x5c(%rsp), %ecx
    00000175: 	movq	%rbx, %r14
    00000178: 	movss	DATAat0x49430(%rip), %xmm4
    00000180: 	movq	DATAat0x49420(%rip), %xmm9
    00000189: 	cltq
    0000018b: 	movq	DATAat0x49430(%rip), %xmm8
    00000194: 	movq	%rax, 0x20(%rsp)
    00000199: 	movl	0x54(%rsp), %eax
    0000019d: 	movl	%eax, 0x18(%rsp)
    000001a1: 	leaq	0x4(%rbp), %rax
    000001a5: 	movq	%rax, 0x28(%rsp)
    000001aa: 	leaq	0x8(%r12), %rax
    000001af: 	movq	%rax, 0x8(%rsp)
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp2402:
    000001b8: 	movq	%rbp, %rbx
    000001bb: 	movl	0x34(%rsp), %eax
    000001bf: 	subl	$0x1, 0x18(%rsp)
    000001c4: 	leaq	(,%r14,4), %r8
    000001cc: 	subq	%r12, %rbx
    000001cf: 	movq	0x28(%rsp), %rdi
    000001d4: 	cmpq	$0x10, %rbx
    000001d8: 	leal	(%rax,%rcx), %edx
    000001db: 	movl	0x14(%rsp), %eax
    000001df: 	seta	%bl
    000001e2: 	cmpl	$0x3, 0x30(%rsp)
    000001e7: 	setne	%r13b
    000001eb: 	leal	(%rax,%rcx), %r9d
    000001ef: 	leaq	(,%r10,4), %rax
    000001f7: 	andl	%r13d, %ebx
    000001fa: 	leaq	(%rdi,%rax), %rsi
    000001fe: 	leaq	(,%r11,4), %rdi
    00000206: 	movb	%bl, 0x1f(%rsp)
    0000020a: 	movq	0x8(%rsp), %rbx
    0000020f: 	leaq	(%rbx,%rdi), %r13
    00000213: 	movq	%rsi, %rbx
    00000216: 	subq	%r13, %rbx
    00000219: 	cmpq	$0x8, %rbx
    0000021d: 	seta	%r13b
    00000221: 	testb	%r13b, 0x1f(%rsp)
    00000226: 	je	.Ltmp2397 # Offset: 550
    0000022c: 	movq	0x8(%rsp), %rbx
    00000231: 	leaq	(%rbx,%r8), %r13
    00000235: 	movq	%rsi, %rbx
    00000238: 	subq	%r13, %rbx
    0000023b: 	cmpq	$0x8, %rbx
    0000023f: 	jbe	.Ltmp2397 # Offset: 575
    00000245: 	cmpl	$0x2, 0x38(%rsp)
    0000024a: 	jbe	.Ltmp2398 # Offset: 586
    00000250: 	leaq	0x4(%r12), %rbx
    00000255: 	leaq	(%r12,%rax), %r13
    00000259: 	pxor	%xmm1, %xmm1
    0000025d: 	addq	0x8(%rsp), %rax
    00000262: 	addq	%rbx, %rdi
    00000265: 	addq	%r8, %rbx
    00000268: 	xorl	%r8d, %r8d
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2399:
    00000270: 	movups	(%rdi,%r8), %xmm0
    00000275: 	movups	(%r13,%r8), %xmm13
    0000027b: 	movups	(%rax,%r8), %xmm14
    00000280: 	movups	(%rbx,%r8), %xmm15
    00000285: 	addps	%xmm13, %xmm0
    00000289: 	movups	(%rsi,%r8), %xmm11
    0000028e: 	addps	%xmm14, %xmm0
    00000292: 	addps	%xmm15, %xmm0
    00000296: 	addps	%xmm1, %xmm0
    00000299: 	mulps	%xmm3, %xmm0
    0000029c: 	subps	%xmm11, %xmm0
    000002a0: 	mulps	%xmm2, %xmm0
    000002a3: 	addps	%xmm11, %xmm0
    000002a7: 	movups	%xmm0, (%rsi,%r8)
    000002ac: 	addq	$0x10, %r8
    000002b0: 	cmpq	%r15, %r8
    000002b3: 	jne	.Ltmp2399 # Offset: 691
    000002b5: 	movl	0x40(%rsp), %edi
    000002b9: 	cmpl	%edi, 0x3c(%rsp)
    000002bd: 	je	.Ltmp2400 # Offset: 701
    000002c3: 	cmpl	$0x3, 0x48(%rsp)
    000002c8: 	movl	0x4c(%rsp), %ebx
    000002cc: 	movl	0x44(%rsp), %eax
    000002d0: 	je	.Ltmp2401 # Offset: 720
.Ltmp2405:
    000002d2: 	leaq	0x1(%rdi,%r10), %rsi
    000002d7: 	leaq	0x1(%rdi,%r11), %r13
    000002dc: 	shlq	$0x2, %rsi
    000002e0: 	movq	(%r12,%r13,4), %xmm0
    000002e6: 	movq	-0x4(%r12,%rsi), %xmm10
    000002ed: 	leaq	(%rbp,%rsi), %r8
    000002f2: 	movq	(%r8), %xmm1
    000002f7: 	addps	%xmm10, %xmm0
    000002fb: 	movq	0x4(%r12,%rsi), %xmm10
    00000302: 	leaq	0x1(%rdi,%r14), %rsi
    00000307: 	addps	%xmm10, %xmm0
    0000030b: 	movq	(%r12,%rsi,4), %xmm10
    00000311: 	movl	%ebx, %esi
    00000313: 	andl	$-0x2, %esi
    00000316: 	addl	%esi, %eax
    00000318: 	addps	%xmm10, %xmm0
    0000031c: 	xorps	%xmm10, %xmm10
    00000320: 	addps	%xmm10, %xmm0
    00000324: 	mulps	%xmm9, %xmm0
    00000328: 	subps	%xmm1, %xmm0
    0000032b: 	mulps	%xmm8, %xmm0
    0000032f: 	addps	%xmm1, %xmm0
    00000332: 	movlps	%xmm0, (%r8)
    00000336: 	cmpl	%esi, %ebx
    00000338: 	je	.Ltmp2400 # Offset: 824
.Ltmp2401:
    0000033a: 	addl	%eax, %edx
    0000033c: 	leal	(%rcx,%rax), %esi
    0000033f: 	movslq	%edx, %rdx
    00000342: 	movslq	%esi, %rsi
    00000345: 	movss	(%r12,%rdx,4), %xmm0
    0000034b: 	leal	-0x1(%rcx,%rax), %edx
    0000034f: 	leaq	(%rbp,%rsi,4), %rsi
    00000354: 	movslq	%edx, %rdx
    00000357: 	movss	(%rsi), %xmm1
    0000035b: 	addss	(%r12,%rdx,4), %xmm0
    00000361: 	leal	0x1(%rcx,%rax), %edx
    00000365: 	addl	%r9d, %eax
    00000368: 	movslq	%edx, %rdx
    0000036b: 	cltq
    0000036d: 	addss	(%r12,%rdx,4), %xmm0
    00000373: 	addss	(%r12,%rax,4), %xmm0
    00000379: 	addss	%xmm6, %xmm0
    0000037d: 	mulss	%xmm5, %xmm0
    00000381: 	subss	%xmm1, %xmm0
    00000385: 	mulss	%xmm4, %xmm0
    00000389: 	addss	%xmm1, %xmm0
    0000038d: 	movss	%xmm0, (%rsi)
.Ltmp2400:
    00000391: 	movq	0x20(%rsp), %rax
    00000396: 	subl	0x14(%rsp), %ecx
    0000039a: 	addq	%rax, %r10
    0000039d: 	addq	%rax, %r11
    000003a0: 	addq	%rax, %r14
    000003a3: 	movl	0x18(%rsp), %eax
    000003a7: 	testl	%eax, %eax
    000003a9: 	jne	.Ltmp2402 # Offset: 937
    000003af: 	addl	$0x1, 0x50(%rsp)
    000003b4: 	movq	%rbp, %rax
    000003b7: 	movl	0x50(%rsp), %ecx
    000003bb: 	movq	%r12, %rbp
    000003be: 	cmpl	0x58(%rsp), %ecx
    000003c2: 	je	.Ltmp2396 # Offset: 962
    000003c8: 	movq	%rax, %r12
    000003cb: 	jmp	.Ltmp2403 # Offset: 971
.Ltmp2397:
    000003d0: 	movl	0x38(%rsp), %edx
    000003d4: 	subq	%rax, %rdi
    000003d7: 	subq	%rax, %r8
    000003da: 	movss	DATAat0x49420(%rip), %xmm11
    000003e3: 	movss	DATAat0x49430(%rip), %xmm10
    000003ec: 	addq	%r12, %rdi
    000003ef: 	addq	%r12, %r8
    000003f2: 	leaq	0x1(%r10,%rdx), %rdx
    000003f7: 	shlq	$0x2, %rdx
    000003fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2404:
    00000400: 	movss	0x4(%rdi,%rax), %xmm1
    00000406: 	addss	(%r12,%rax), %xmm1
    0000040c: 	movss	0x8(%r12,%rax), %xmm0
    00000413: 	movss	0x4(%rbp,%rax), %xmm12
    0000041a: 	addss	%xmm1, %xmm0
    0000041e: 	addss	0x4(%r8,%rax), %xmm0
    00000425: 	addss	%xmm7, %xmm0
    00000429: 	mulss	%xmm11, %xmm0
    0000042e: 	subss	%xmm12, %xmm0
    00000433: 	mulss	%xmm10, %xmm0
    00000438: 	addss	%xmm12, %xmm0
    0000043d: 	movss	%xmm0, 0x4(%rbp,%rax)
    00000443: 	addq	$0x4, %rax
    00000447: 	cmpq	%rax, %rdx
    0000044a: 	jne	.Ltmp2404 # Offset: 1098
    0000044c: 	jmp	.Ltmp2400 # Offset: 1100
.Ltmp2398:
    00000451: 	movl	0x3c(%rsp), %ebx
    00000455: 	xorl	%edi, %edi
    00000457: 	movl	$0x1, %eax
    0000045c: 	jmp	.Ltmp2405 # Offset: 1116
.Ltmp2396:
    00000461: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000468: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000046f: 	subq	$0x20, %rax
    00000473: 	cmpq	%rax, %rbx
    00000476: 	je	.Ltmp2406 # Offset: 1142
    0000047c: 	movq	0x78(%rsp), %rax
    00000481: 	leaq	0x10(%rbx), %rdi
    00000485: 	movq	%rdi, (%rbx)
    00000488: 	movq	(%rax), %rbp
    0000048b: 	movq	0x8(%rax), %r12
    0000048f: 	movq	%rbp, %rax
    00000492: 	addq	%r12, %rax
    00000495: 	je	.Ltmp2407 # Offset: 1173
    00000497: 	testq	%rbp, %rbp
    0000049a: 	je	.Ltmp2408 # Offset: 1178
.Ltmp2407:
    000004a0: 	movq	%r12, 0x88(%rsp)
    000004a8: 	cmpq	$0xf, %r12
    000004ac: 	ja	.Ltmp2409 # Offset: 1196
    000004b2: 	cmpq	$0x1, %r12
    000004b6: 	jne	.Ltmp2410 # Offset: 1206
    000004bc: 	movzbl	(%rbp), %eax
    000004c0: 	movb	%al, 0x10(%rbx)
.Ltmp2413:
    000004c3: 	movq	%r12, 0x8(%rbx)
    000004c7: 	movb	$0x0, (%rdi,%r12)
    000004cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004d3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004da: 	addq	$0x20, %rax
    000004de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004e5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000004ec: 	je	.Ltmp2411 # Offset: 1260
.Ltmp2414:
    000004f2: 	movq	-0x20(%rax), %rbp
    000004f6: 	callq	clock@PLT # Offset: 1270
    000004fb: 	movq	%rax, end_time(%rip)
    00000502: 	movq	0xa8(%rsp), %rdx
    0000050a: 	subq	%fs:0x28, %rdx
    00000513: 	jne	.Ltmp2412 # Offset: 1299
    00000519: 	subq	start_time(%rip), %rax
    00000520: 	pxor	%xmm0, %xmm0
    00000524: 	movq	%rbp, %rdi
    00000527: 	cvtsi2sd	%rax, %xmm0
    0000052c: 	divsd	DATAat0x49520(%rip), %xmm0
    00000534: 	addq	$0xb8, %rsp
    0000053b: 	popq	%rbx
    0000053c: 	popq	%rbp
    0000053d: 	popq	%r12
    0000053f: 	popq	%r13
    00000541: 	popq	%r14
    00000543: 	popq	%r15
    00000545: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1349
.Ltmp2409:
    0000054a: 	movq	%rbx, %rdi
    0000054d: 	leaq	0x88(%rsp), %rsi
    00000555: 	xorl	%edx, %edx
    00000557: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1367
    0000055c: 	movq	%rax, (%rbx)
    0000055f: 	movq	%rax, %rdi
    00000562: 	movq	0x88(%rsp), %rax
    0000056a: 	movq	%rax, 0x10(%rbx)
.Ltmp2415:
    0000056e: 	movq	%r12, %rdx
    00000571: 	movq	%rbp, %rsi
    00000574: 	callq	memcpy@PLT # Offset: 1396
    00000579: 	movq	0x88(%rsp), %r12
    00000581: 	movq	(%rbx), %rdi
    00000584: 	jmp	.Ltmp2413 # Offset: 1412
.Ltmp2406:
    00000589: 	movq	0x78(%rsp), %rsi
    0000058e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000595: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1429
    0000059a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005a1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005a8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005af: 	jne	.Ltmp2414 # Offset: 1455
.Ltmp2411:
    000005b5: 	movq	-0x8(%rdx), %rax
    000005b9: 	addq	$0x200, %rax
    000005bf: 	jmp	.Ltmp2414 # Offset: 1471
.Ltmp2410:
    000005c4: 	testq	%r12, %r12
    000005c7: 	je	.Ltmp2413 # Offset: 1479
    000005cd: 	jmp	.Ltmp2415 # Offset: 1485
.Ltmp2412:
    000005cf: 	callq	__stack_chk_fail@PLT # Offset: 1487
.Ltmp2408:
    000005d4: 	leaq	DATAat0x49008(%rip), %rdi
    000005db: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1499
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14max_differenceIfET_PKS0_S2_m" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x39920
  Size        : 0x58
  MaxSize     : 0x60
  Offset      : 0x39920
  Section     : .text
  Orc Section : .local.text._Z14max_differenceIfET_PKS0_S2_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp2416 # Offset: 7
    00000009: 	pxor	%xmm2, %xmm2
    0000000d: 	xorl	%eax, %eax
    0000000f: 	movss	DATAat0x494c0(%rip), %xmm3
    00000017: 	movaps	%xmm2, %xmm1
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2418:
    00000020: 	movss	(%rdi,%rax,4), %xmm0
    00000025: 	subss	(%rsi,%rax,4), %xmm0
    0000002a: 	comiss	%xmm0, %xmm2
    0000002d: 	jbe	.Ltmp2417 # Offset: 45
    0000002f: 	xorps	%xmm3, %xmm0
.Ltmp2417:
    00000032: 	maxss	%xmm1, %xmm0
    00000036: 	addq	$0x1, %rax
    0000003a: 	movaps	%xmm0, %xmm1
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	jne	.Ltmp2418 # Offset: 64
    00000042: 	movaps	%xmm1, %xmm0
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2416:
    00000050: 	pxor	%xmm1, %xmm1
    00000054: 	movaps	%xmm1, %xmm0
    00000057: 	retq # Offset: 87
DWARF CFI Instructions:
    <empty>
End of Function "_Z14max_differenceIfET_PKS0_S2_m"

Binary Function "_Z11TestOneTypeIffEvv" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x39980
  Size        : 0x3c2b
  MaxSize     : 0x3c30
  Offset      : 0x39980
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIffEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	DATAat0x493e5(%rip), %rsi
    0000000c: 	movq	%rsp, %rbp
    0000000f: 	pushq	%r15
    00000011: 	pushq	%r14
    00000013: 	leaq	-0xe0(%rbp), %r15
    0000001a: 	pushq	%r13
    0000001c: 	movq	%r15, %rdi
    0000001f: 	pushq	%r12
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x168, %rsp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, -0x38(%rbp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	%r15, -0x158(%rbp)
    00000043: 	movl	%eax, -0x18c(%rbp)
    00000049: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 73
    0000004e: 	leaq	-0xc0(%rbp), %rdi
    00000055: 	leaq	DATAat0x493e5(%rip), %rsi
    0000005c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 92
    00000061: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    00000069: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    00000071: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000078: 	leaq	-0x110(%rbp), %rsi
    0000007f: 	movaps	%xmm2, -0x110(%rbp)
    00000086: 	movaps	%xmm4, -0x100(%rbp)
    0000008d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 141
    00000092: 	movl	$0xb71b00, %edi
    00000097: 	callq	_Znam@PLT # Offset: 151
    0000009c: 	movl	$0xb71b00, %edi
    000000a1: 	movq	%rax, -0x140(%rbp)
    000000a8: 	movq	%rax, %r14
    000000ab: 	callq	_Znam@PLT # Offset: 171
    000000b0: 	movq	%rax, -0x150(%rbp)
    000000b7: 	movq	%rax, %r13
    000000ba: 	movl	iterations(%rip), %eax
    000000c0: 	movq	%r15, %rsi
    000000c3: 	leaq	-0x60(%rbp), %rbx
    000000c7: 	leaq	DATAat0x49238(%rip), %rdx
    000000ce: 	addl	$0x1, %eax
    000000d1: 	movq	%rbx, %rdi
    000000d4: 	andl	$-0x2, %eax
    000000d7: 	movl	%eax, iterations(%rip)
    000000dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 221
    000000e2: 	leaq	-0x80(%rbp), %rax
    000000e6: 	movl	$0x5dc, %edx
    000000eb: 	movq	%r14, %rdi
    000000ee: 	xorl	%r15d, %r15d
    000000f1: 	movaps	DATAat0x494a0(%rip), %xmm3
    000000f8: 	movq	%rax, %rcx
    000000fb: 	movl	$0x7d0, %esi
    00000100: 	movq	%rax, -0x178(%rbp)
    00000107: 	movaps	%xmm3, -0x80(%rbp)
    0000010b: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 267
    00000110: 	movq	%r13, %rdi
    00000113: 	movl	$0xb71b00, %edx
    00000118: 	movq	%r14, %rsi
    0000011b: 	callq	memcpy@PLT # Offset: 283
    00000120: 	callq	clock@PLT # Offset: 288
    00000125: 	movq	%r13, %rdi
    00000128: 	movq	%r14, %rcx
    0000012b: 	movq	%rax, start_time(%rip)
    00000132: 	movl	iterations(%rip), %eax
    00000138: 	testl	%eax, %eax
    0000013a: 	jle	.Ltmp2419 # Offset: 314
    00000140: 	movss	DATAat0x49420(%rip), %xmm2
    00000148: 	pxor	%xmm3, %xmm3
    0000014c: 	pxor	%xmm5, %xmm5
    00000150: 	movaps	DATAat0x49420(%rip), %xmm6
    00000157: 	movq	DATAat0x49420(%rip), %xmm4
    0000015f: 	movq	%rbx, -0x130(%rbp)
    00000166: 	movq	%r14, %rsi
    00000169: 	movl	%eax, %ebx
.Ltmp2424:
    0000016b: 	leaq	0x8(%rcx), %rax
    0000016f: 	leaq	0x4(%rdi), %r14
    00000173: 	xorps	%xmm1, %xmm1
    00000176: 	movl	$0x1770, %edx
    0000017b: 	movq	%rsi, -0x120(%rbp)
    00000182: 	movq	$-0x1770, %r9
    00000189: 	movq	%rdx, %rsi
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp2422:
    00000190: 	leaq	(%r14,%rsi), %r10
    00000194: 	movq	%r10, %rdx
    00000197: 	subq	%rax, %rdx
    0000019a: 	cmpq	$0x2ee8, %rdx
    000001a1: 	jbe	.Ltmp2420 # Offset: 417
    000001a7: 	leaq	-0x4(%rax), %r13
    000001ab: 	leaq	(%rcx,%rsi), %r12
    000001af: 	xorl	%edx, %edx
    000001b1: 	leaq	0x1770(%rax), %r8
    000001b8: 	leaq	0x2edc(%rax), %r11
.Ltmp2421:
    000001bf: 	movups	(%r12,%rdx), %xmm7
    000001c4: 	movups	(%r13,%rdx), %xmm0
    000001ca: 	addps	%xmm7, %xmm0
    000001cd: 	movups	(%r8,%rdx), %xmm7
    000001d2: 	addps	%xmm7, %xmm0
    000001d5: 	movups	(%r11,%rdx), %xmm7
    000001da: 	addps	%xmm7, %xmm0
    000001dd: 	addps	%xmm5, %xmm0
    000001e0: 	mulps	%xmm6, %xmm0
    000001e3: 	movups	%xmm0, (%r10,%rdx)
    000001e8: 	addq	$0x10, %rdx
    000001ec: 	cmpq	$0x1760, %rdx
    000001f3: 	jne	.Ltmp2421 # Offset: 499
    000001f5: 	movq	0x2ec8(%rax), %xmm7
    000001fd: 	movq	0x175c(%rax), %xmm0
    00000205: 	addps	%xmm7, %xmm0
    00000208: 	movq	0x2ed0(%rax), %xmm7
    00000210: 	addps	%xmm7, %xmm0
    00000213: 	movq	0x463c(%rax), %xmm7
    0000021b: 	addps	%xmm7, %xmm0
    0000021e: 	addps	%xmm1, %xmm0
    00000221: 	mulps	%xmm4, %xmm0
    00000224: 	movlps	%xmm0, 0x1764(%rdi,%rsi)
    0000022c: 	addq	$0x1770, %rsi
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2426:
    00000238: 	movq	%r8, %rax
    0000023b: 	subq	$0x1770, %r9
    00000242: 	cmpq	$0xb70390, %rsi
    00000249: 	jne	.Ltmp2422 # Offset: 585
    0000024f: 	addl	$0x1, %r15d
    00000253: 	movq	%rdi, %rax
    00000256: 	movq	-0x120(%rbp), %rsi
    0000025d: 	movq	%rcx, %rdi
    00000260: 	cmpl	%ebx, %r15d
    00000263: 	je	.Ltmp2423 # Offset: 611
    00000265: 	movq	%rax, %rcx
    00000268: 	jmp	.Ltmp2424 # Offset: 616
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp2420:
    00000270: 	movq	%rsi, %rdx
    00000273: 	leaq	0x1770(%rsi), %rsi
    0000027a: 	movq	-0x120(%rbp), %r13
    00000281: 	leaq	-0x1770(%rdx,%r9), %r10
    00000289: 	leaq	(%rsi,%r9), %r8
    0000028d: 	leaq	0x1768(%rdx), %r11
    00000294: 	addq	%rcx, %r10
    00000297: 	addq	%rcx, %r8
.Ltmp2425:
    0000029a: 	movss	0x4(%r10,%rdx), %xmm0
    000002a1: 	addss	(%rcx,%rdx), %xmm0
    000002a6: 	addss	0x8(%rcx,%rdx), %xmm0
    000002ac: 	addss	0x4(%r8,%rdx), %xmm0
    000002b3: 	addss	%xmm3, %xmm0
    000002b7: 	mulss	%xmm2, %xmm0
    000002bb: 	movss	%xmm0, 0x4(%rdi,%rdx)
    000002c1: 	addq	$0x4, %rdx
    000002c5: 	cmpq	%r11, %rdx
    000002c8: 	jne	.Ltmp2425 # Offset: 712
    000002ca: 	movq	%r13, -0x120(%rbp)
    000002d1: 	leaq	0x1770(%rax), %r8
    000002d8: 	jmp	.Ltmp2426 # Offset: 728
.Ltmp2423:
    000002dd: 	movq	%rsi, -0x140(%rbp)
    000002e4: 	movq	-0x130(%rbp), %rbx
.Ltmp2419:
    000002eb: 	movq	%rbx, %rsi
    000002ee: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 757
    000002fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000301: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000308: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000030f: 	je	.Ltmp2427 # Offset: 783
.Ltmp2495:
    00000315: 	movq	-0x20(%rax), %r12
    00000319: 	callq	clock@PLT # Offset: 793
    0000031e: 	pxor	%xmm0, %xmm0
    00000322: 	movq	%rax, end_time(%rip)
    00000329: 	movq	%r12, %rdi
    0000032c: 	subq	start_time(%rip), %rax
    00000333: 	cvtsi2sd	%rax, %xmm0
    00000338: 	divsd	DATAat0x49520(%rip), %xmm0
    00000340: 	callq	_Z13record_resultdPKc # Offset: 832
    00000345: 	movq	-0x60(%rbp), %rdi
    00000349: 	leaq	-0x50(%rbp), %rax
    0000034d: 	movq	%rax, -0x148(%rbp)
    00000354: 	cmpq	%rax, %rdi
    00000357: 	je	.Ltmp2428 # Offset: 855
    00000359: 	movq	-0x50(%rbp), %rax
    0000035d: 	leaq	0x1(%rax), %rsi
    00000361: 	callq	_ZdlPvm@PLT # Offset: 865
.Ltmp2428:
    00000366: 	movq	-0x158(%rbp), %rsi
    0000036d: 	leaq	DATAat0x4924a(%rip), %rdx
    00000374: 	movq	%rbx, %rdi
    00000377: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 887
    0000037c: 	movq	-0x140(%rbp), %r14
    00000383: 	movl	$0x5dc, %edx
    00000388: 	movl	$0x7d0, %esi
    0000038d: 	movaps	DATAat0x494a0(%rip), %xmm2
    00000394: 	movq	-0x178(%rbp), %rcx
    0000039b: 	movq	%r14, %rdi
    0000039e: 	movaps	%xmm2, -0x80(%rbp)
    000003a2: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 930
    000003a7: 	movq	-0x150(%rbp), %rdi
    000003ae: 	movl	$0xb71b00, %edx
    000003b3: 	movq	%r14, %rsi
    000003b6: 	callq	memcpy@PLT # Offset: 950
    000003bb: 	callq	clock@PLT # Offset: 955
    000003c0: 	movl	iterations(%rip), %r11d
    000003c7: 	movq	%rax, start_time(%rip)
    000003ce: 	testl	%r11d, %r11d
    000003d1: 	jle	.Ltmp2429 # Offset: 977
    000003d7: 	movq	-0x140(%rbp), %rax
    000003de: 	pxor	%xmm4, %xmm4
    000003e2: 	xorl	%r8d, %r8d
    000003e5: 	movq	-0x150(%rbp), %r9
    000003ec: 	movss	DATAat0x49420(%rip), %xmm3
    000003f4: 	movss	%xmm4, -0x120(%rbp)
    000003fc: 	movq	%rax, %r10
    000003ff: 	movq	%rax, %rdi
.Ltmp2433:
    00000402: 	leaq	0x1774(%r9), %rcx
    00000409: 	leaq	0xb70390(%r10), %rax
    00000410: 	movl	$0x1, %edx
    00000415: 	movq	%rdi, %r14
    00000418: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2431:
    00000420: 	addl	$0x1, %edx
    00000423: 	leaq	-0xb6ec20(%rax), %rsi
    0000042a: 	movq	%rcx, %rdi
.Ltmp2430:
    0000042d: 	movss	-0x176c(%rsi), %xmm0
    00000435: 	addss	(%rsi), %xmm0
    00000439: 	addq	$0x1770, %rsi
    00000440: 	addq	$0x1770, %rdi
    00000447: 	addss	-0x1768(%rsi), %xmm0
    0000044f: 	addss	0x4(%rsi), %xmm0
    00000454: 	addss	-0x120(%rbp), %xmm0
    0000045c: 	mulss	%xmm3, %xmm0
    00000460: 	movss	%xmm0, -0x1770(%rdi)
    00000468: 	cmpq	%rsi, %rax
    0000046b: 	jne	.Ltmp2430 # Offset: 1131
    0000046d: 	addq	$0x4, %rcx
    00000471: 	addq	$0x4, %rax
    00000475: 	cmpl	$0x5db, %edx
    0000047b: 	jne	.Ltmp2431 # Offset: 1147
    0000047d: 	addl	$0x1, %r8d
    00000481: 	movq	%r9, %rax
    00000484: 	movq	%r14, %rdi
    00000487: 	movq	%r10, %r9
    0000048a: 	cmpl	%r11d, %r8d
    0000048d: 	je	.Ltmp2432 # Offset: 1165
    0000048f: 	movq	%rax, %r10
    00000492: 	jmp	.Ltmp2433 # Offset: 1170
.Ltmp2432:
    00000497: 	movq	%r14, -0x140(%rbp)
.Ltmp2429:
    0000049e: 	movq	%rbx, %rsi
    000004a1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004a8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1192
    000004ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004b4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004c2: 	je	.Ltmp2434 # Offset: 1218
.Ltmp2609:
    000004c8: 	movq	-0x20(%rax), %r12
    000004cc: 	callq	clock@PLT # Offset: 1228
    000004d1: 	pxor	%xmm0, %xmm0
    000004d5: 	movq	%rax, end_time(%rip)
    000004dc: 	movq	%r12, %rdi
    000004df: 	subq	start_time(%rip), %rax
    000004e6: 	cvtsi2sd	%rax, %xmm0
    000004eb: 	divsd	DATAat0x49520(%rip), %xmm0
    000004f3: 	callq	_Z13record_resultdPKc # Offset: 1267
    000004f8: 	movq	-0x60(%rbp), %rdi
    000004fc: 	cmpq	-0x148(%rbp), %rdi
    00000503: 	je	.Ltmp2435 # Offset: 1283
    00000505: 	movq	-0x50(%rbp), %rax
    00000509: 	leaq	0x1(%rax), %rsi
    0000050d: 	callq	_ZdlPvm@PLT # Offset: 1293
.Ltmp2435:
    00000512: 	movq	-0x158(%rbp), %rsi
    00000519: 	leaq	DATAat0x4925d(%rip), %rdx
    00000520: 	movq	%rbx, %rdi
    00000523: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1315
    00000528: 	movq	-0x140(%rbp), %r14
    0000052f: 	movl	$0x5dc, %edx
    00000534: 	movl	$0x7d0, %esi
    00000539: 	movaps	DATAat0x494a0(%rip), %xmm3
    00000540: 	movq	-0x178(%rbp), %rcx
    00000547: 	movq	%r14, %rdi
    0000054a: 	movaps	%xmm3, -0x80(%rbp)
    0000054e: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 1358
    00000553: 	movq	-0x150(%rbp), %r15
    0000055a: 	movl	$0xb71b00, %edx
    0000055f: 	movq	%r14, %rsi
    00000562: 	movq	%r15, %rdi
    00000565: 	callq	memcpy@PLT # Offset: 1381
    0000056a: 	callq	clock@PLT # Offset: 1386
    0000056f: 	movq	%r15, %r9
    00000572: 	movq	%r14, %rdi
    00000575: 	xorl	%r15d, %r15d
    00000578: 	movq	%rax, start_time(%rip)
    0000057f: 	movl	iterations(%rip), %eax
    00000585: 	testl	%eax, %eax
    00000587: 	jle	.Ltmp2436 # Offset: 1415
    0000058d: 	movss	DATAat0x49420(%rip), %xmm2
    00000595: 	pxor	%xmm3, %xmm3
    00000599: 	pxor	%xmm5, %xmm5
    0000059d: 	movaps	DATAat0x49420(%rip), %xmm6
    000005a4: 	movq	DATAat0x49420(%rip), %xmm4
    000005ac: 	movq	%rbx, -0x130(%rbp)
    000005b3: 	movq	%r14, %rsi
    000005b6: 	movl	%eax, %ebx
.Ltmp2441:
    000005b8: 	movq	%rsi, -0x120(%rbp)
    000005bf: 	movl	$0xb6ec20, %edx
    000005c4: 	xorps	%xmm1, %xmm1
    000005c7: 	leaq	0xb70388(%r9), %rcx
    000005ce: 	leaq	0xb6ec14(%rdi), %rax
    000005d5: 	movq	$-0xb6ec20, %r8
    000005dc: 	nopl	(%rax) # Size: 4
.Ltmp2439:
    000005e0: 	movq	%rcx, %rsi
    000005e3: 	subq	%rax, %rsi
    000005e6: 	addq	$0x8, %rsi
    000005ea: 	cmpq	$0x2ee8, %rsi
    000005f1: 	jbe	.Ltmp2437 # Offset: 1521
    000005f7: 	leaq	-0x8(%rax), %r14
    000005fb: 	leaq	0x1764(%rax), %r13
    00000602: 	xorl	%esi, %esi
    00000604: 	leaq	0x176c(%rax), %r12
    0000060b: 	leaq	0x2ed8(%rax), %r11
    00000612: 	leaq	-0xc(%rcx), %r10
.Ltmp2438:
    00000616: 	movups	(%r13,%rsi), %xmm0
    0000061c: 	movups	(%r14,%rsi), %xmm7
    00000621: 	shufps	$0x1b, %xmm0, %xmm0
    00000625: 	shufps	$0x1b, %xmm7, %xmm7
    00000629: 	addps	%xmm7, %xmm0
    0000062c: 	movups	(%r12,%rsi), %xmm7
    00000631: 	shufps	$0x1b, %xmm7, %xmm7
    00000635: 	addps	%xmm7, %xmm0
    00000638: 	movups	(%r11,%rsi), %xmm7
    0000063d: 	shufps	$0x1b, %xmm7, %xmm7
    00000641: 	addps	%xmm7, %xmm0
    00000644: 	addps	%xmm5, %xmm0
    00000647: 	mulps	%xmm6, %xmm0
    0000064a: 	shufps	$0x1b, %xmm0, %xmm0
    0000064e: 	movups	%xmm0, (%r10,%rsi)
    00000653: 	subq	$0x10, %rsi
    00000657: 	cmpq	$-0x1760, %rsi
    0000065e: 	jne	.Ltmp2438 # Offset: 1630
    00000660: 	movq	-0x1760(%rax), %xmm9
    00000669: 	movq	0xc(%rax), %xmm0
    0000066e: 	subq	$0x1770, %rdx
    00000675: 	movq	0x1780(%rax), %xmm7
    0000067d: 	movq	0x14(%rax), %xmm8
    00000683: 	shufps	$0xe1, %xmm0, %xmm0
    00000687: 	shufps	$0xe1, %xmm9, %xmm9
    0000068c: 	addps	%xmm9, %xmm0
    00000690: 	shufps	$0xe1, %xmm8, %xmm8
    00000695: 	shufps	$0xe1, %xmm7, %xmm7
    00000699: 	addps	%xmm8, %xmm0
    0000069d: 	addps	%xmm7, %xmm0
    000006a0: 	addps	%xmm1, %xmm0
    000006a3: 	mulps	%xmm4, %xmm0
    000006a6: 	shufps	$0xe1, %xmm0, %xmm0
    000006aa: 	movlps	%xmm0, -0x1764(%rcx)
    000006b1: 	nopl	(%rax) # Size: 7
.Ltmp2443:
    000006b8: 	subq	$0x1770, %rcx
    000006bf: 	subq	$0x1770, %rax
    000006c5: 	addq	$0x1770, %r8
    000006cc: 	testq	%rdx, %rdx
    000006cf: 	jne	.Ltmp2439 # Offset: 1743
    000006d5: 	addl	$0x1, %r15d
    000006d9: 	movq	%r9, %rax
    000006dc: 	movq	-0x120(%rbp), %rsi
    000006e3: 	movq	%rdi, %r9
    000006e6: 	cmpl	%ebx, %r15d
    000006e9: 	je	.Ltmp2440 # Offset: 1769
    000006ef: 	movq	%rax, %rdi
    000006f2: 	jmp	.Ltmp2441 # Offset: 1778
    000006f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2437:
    00000700: 	movq	%rdx, %rsi
    00000703: 	leaq	-0x1770(%rdx), %rdx
    0000070a: 	movq	-0x120(%rbp), %r14
    00000711: 	leaq	(%rdx,%r8), %r11
    00000715: 	leaq	0x1770(%r8,%rsi), %r10
    0000071d: 	leaq	-0x1768(%rsi), %r12
    00000724: 	addq	%rdi, %r11
    00000727: 	addq	%rdi, %r10
.Ltmp2442:
    0000072a: 	movss	0x1768(%r11,%rsi), %xmm0
    00000734: 	addss	0x1764(%rdi,%rsi), %xmm0
    0000073d: 	addss	0x176c(%rdi,%rsi), %xmm0
    00000746: 	addss	0x1768(%r10,%rsi), %xmm0
    00000750: 	addss	%xmm3, %xmm0
    00000754: 	mulss	%xmm2, %xmm0
    00000758: 	movss	%xmm0, 0x1768(%r9,%rsi)
    00000762: 	subq	$0x4, %rsi
    00000766: 	cmpq	%rsi, %r12
    00000769: 	jne	.Ltmp2442 # Offset: 1897
    0000076b: 	movq	%r14, -0x120(%rbp)
    00000772: 	jmp	.Ltmp2443 # Offset: 1906
.Ltmp2440:
    00000777: 	movq	%rsi, -0x140(%rbp)
    0000077e: 	movq	-0x130(%rbp), %rbx
.Ltmp2436:
    00000785: 	movq	%rbx, %rsi
    00000788: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000078f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1935
    00000794: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000079b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007a2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007a9: 	je	.Ltmp2444 # Offset: 1961
.Ltmp2608:
    000007af: 	movq	-0x20(%rax), %r12
    000007b3: 	callq	clock@PLT # Offset: 1971
    000007b8: 	pxor	%xmm0, %xmm0
    000007bc: 	movq	%rax, end_time(%rip)
    000007c3: 	movq	%r12, %rdi
    000007c6: 	subq	start_time(%rip), %rax
    000007cd: 	cvtsi2sd	%rax, %xmm0
    000007d2: 	divsd	DATAat0x49520(%rip), %xmm0
    000007da: 	callq	_Z13record_resultdPKc # Offset: 2010
    000007df: 	movq	-0x60(%rbp), %rdi
    000007e3: 	cmpq	-0x148(%rbp), %rdi
    000007ea: 	je	.Ltmp2445 # Offset: 2026
    000007ec: 	movq	-0x50(%rbp), %rax
    000007f0: 	leaq	0x1(%rax), %rsi
    000007f4: 	callq	_ZdlPvm@PLT # Offset: 2036
.Ltmp2445:
    000007f9: 	movq	-0x158(%rbp), %rsi
    00000800: 	leaq	DATAat0x49271(%rip), %rdx
    00000807: 	movq	%rbx, %rdi
    0000080a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2058
    0000080f: 	movq	-0x140(%rbp), %r14
    00000816: 	movl	$0x5dc, %edx
    0000081b: 	movl	$0x7d0, %esi
    00000820: 	movaps	DATAat0x494a0(%rip), %xmm2
    00000827: 	movq	-0x178(%rbp), %rcx
    0000082e: 	movq	%r14, %rdi
    00000831: 	movaps	%xmm2, -0x80(%rbp)
    00000835: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 2101
    0000083a: 	movq	-0x150(%rbp), %r15
    00000841: 	movl	$0xb71b00, %edx
    00000846: 	movq	%r14, %rsi
    00000849: 	movq	%r15, %rdi
    0000084c: 	callq	memcpy@PLT # Offset: 2124
    00000851: 	callq	clock@PLT # Offset: 2129
    00000856: 	movq	%r15, %r9
    00000859: 	movq	%r14, %rdi
    0000085c: 	xorl	%r15d, %r15d
    0000085f: 	movq	%rax, start_time(%rip)
    00000866: 	movl	iterations(%rip), %eax
    0000086c: 	testl	%eax, %eax
    0000086e: 	jle	.Ltmp2446 # Offset: 2158
    00000874: 	movss	DATAat0x49420(%rip), %xmm2
    0000087c: 	pxor	%xmm3, %xmm3
    00000880: 	pxor	%xmm5, %xmm5
    00000884: 	movaps	DATAat0x49420(%rip), %xmm6
    0000088b: 	movq	DATAat0x49420(%rip), %xmm4
    00000893: 	movq	%rbx, -0x130(%rbp)
    0000089a: 	movq	%r14, %rsi
    0000089d: 	movl	%eax, %ebx
.Ltmp2451:
    0000089f: 	movq	%rsi, -0x120(%rbp)
    000008a6: 	movl	$0x1770, %edx
    000008ab: 	xorps	%xmm1, %xmm1
    000008ae: 	leaq	0x2ed8(%r9), %rcx
    000008b5: 	leaq	0x1764(%rdi), %rax
    000008bc: 	movq	$-0x1770, %r8
    000008c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2449:
    000008c8: 	movq	%rcx, %rsi
    000008cb: 	subq	%rax, %rsi
    000008ce: 	addq	$0x8, %rsi
    000008d2: 	cmpq	$0x2ee8, %rsi
    000008d9: 	jbe	.Ltmp2447 # Offset: 2265
    000008df: 	leaq	-0x8(%rax), %r14
    000008e3: 	leaq	0x1764(%rax), %r13
    000008ea: 	xorl	%esi, %esi
    000008ec: 	leaq	0x176c(%rax), %r12
    000008f3: 	leaq	0x2ed8(%rax), %r11
    000008fa: 	leaq	-0xc(%rcx), %r10
.Ltmp2448:
    000008fe: 	movups	(%r13,%rsi), %xmm0
    00000904: 	movups	(%r14,%rsi), %xmm7
    00000909: 	shufps	$0x1b, %xmm0, %xmm0
    0000090d: 	shufps	$0x1b, %xmm7, %xmm7
    00000911: 	addps	%xmm7, %xmm0
    00000914: 	movups	(%r12,%rsi), %xmm7
    00000919: 	shufps	$0x1b, %xmm7, %xmm7
    0000091d: 	addps	%xmm7, %xmm0
    00000920: 	movups	(%r11,%rsi), %xmm7
    00000925: 	shufps	$0x1b, %xmm7, %xmm7
    00000929: 	addps	%xmm7, %xmm0
    0000092c: 	addps	%xmm5, %xmm0
    0000092f: 	mulps	%xmm6, %xmm0
    00000932: 	shufps	$0x1b, %xmm0, %xmm0
    00000936: 	movups	%xmm0, (%r10,%rsi)
    0000093b: 	subq	$0x10, %rsi
    0000093f: 	cmpq	$-0x1760, %rsi
    00000946: 	jne	.Ltmp2448 # Offset: 2374
    00000948: 	movq	-0x1760(%rax), %xmm9
    00000951: 	movq	0xc(%rax), %xmm0
    00000956: 	addq	$0x1770, %rdx
    0000095d: 	movq	0x1780(%rax), %xmm7
    00000965: 	movq	0x14(%rax), %xmm8
    0000096b: 	shufps	$0xe1, %xmm0, %xmm0
    0000096f: 	shufps	$0xe1, %xmm9, %xmm9
    00000974: 	addps	%xmm9, %xmm0
    00000978: 	shufps	$0xe1, %xmm8, %xmm8
    0000097d: 	shufps	$0xe1, %xmm7, %xmm7
    00000981: 	addps	%xmm8, %xmm0
    00000985: 	addps	%xmm7, %xmm0
    00000988: 	addps	%xmm1, %xmm0
    0000098b: 	mulps	%xmm4, %xmm0
    0000098e: 	shufps	$0xe1, %xmm0, %xmm0
    00000992: 	movlps	%xmm0, -0x1764(%rcx)
    00000999: 	nopl	(%rax) # Size: 7
.Ltmp2453:
    000009a0: 	addq	$0x1770, %rcx
    000009a7: 	addq	$0x1770, %rax
    000009ad: 	subq	$0x1770, %r8
    000009b4: 	cmpq	$0xb70390, %rdx
    000009bb: 	jne	.Ltmp2449 # Offset: 2491
    000009c1: 	addl	$0x1, %r15d
    000009c5: 	movq	%r9, %rax
    000009c8: 	movq	-0x120(%rbp), %rsi
    000009cf: 	movq	%rdi, %r9
    000009d2: 	cmpl	%ebx, %r15d
    000009d5: 	je	.Ltmp2450 # Offset: 2517
    000009db: 	movq	%rax, %rdi
    000009de: 	jmp	.Ltmp2451 # Offset: 2526
    000009e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2447:
    000009e8: 	movq	%rdx, %rsi
    000009eb: 	leaq	0x1770(%rdx), %rdx
    000009f2: 	movq	-0x120(%rbp), %r14
    000009f9: 	leaq	-0x1770(%r8,%rsi), %r11
    00000a01: 	leaq	(%rdx,%r8), %r10
    00000a05: 	leaq	-0x1768(%rsi), %r12
    00000a0c: 	addq	%rdi, %r11
    00000a0f: 	addq	%rdi, %r10
.Ltmp2452:
    00000a12: 	movss	0x1768(%r11,%rsi), %xmm0
    00000a1c: 	addss	0x1764(%rdi,%rsi), %xmm0
    00000a25: 	addss	0x176c(%rdi,%rsi), %xmm0
    00000a2e: 	addss	0x1768(%r10,%rsi), %xmm0
    00000a38: 	addss	%xmm3, %xmm0
    00000a3c: 	mulss	%xmm2, %xmm0
    00000a40: 	movss	%xmm0, 0x1768(%r9,%rsi)
    00000a4a: 	subq	$0x4, %rsi
    00000a4e: 	cmpq	%rsi, %r12
    00000a51: 	jne	.Ltmp2452 # Offset: 2641
    00000a53: 	movq	%r14, -0x120(%rbp)
    00000a5a: 	jmp	.Ltmp2453 # Offset: 2650
.Ltmp2450:
    00000a5f: 	movq	%rsi, -0x140(%rbp)
    00000a66: 	movq	-0x130(%rbp), %rbx
.Ltmp2446:
    00000a6d: 	movq	%rbx, %rsi
    00000a70: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000a77: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2679
    00000a7c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a83: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000a8a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a91: 	je	.Ltmp2454 # Offset: 2705
.Ltmp2607:
    00000a97: 	movq	-0x20(%rax), %r12
    00000a9b: 	callq	clock@PLT # Offset: 2715
    00000aa0: 	pxor	%xmm0, %xmm0
    00000aa4: 	movq	%rax, end_time(%rip)
    00000aab: 	movq	%r12, %rdi
    00000aae: 	subq	start_time(%rip), %rax
    00000ab5: 	cvtsi2sd	%rax, %xmm0
    00000aba: 	divsd	DATAat0x49520(%rip), %xmm0
    00000ac2: 	callq	_Z13record_resultdPKc # Offset: 2754
    00000ac7: 	movq	-0x60(%rbp), %rdi
    00000acb: 	cmpq	-0x148(%rbp), %rdi
    00000ad2: 	je	.Ltmp2455 # Offset: 2770
    00000ad4: 	movq	-0x50(%rbp), %rax
    00000ad8: 	leaq	0x1(%rax), %rsi
    00000adc: 	callq	_ZdlPvm@PLT # Offset: 2780
.Ltmp2455:
    00000ae1: 	movq	-0x158(%rbp), %rsi
    00000ae8: 	leaq	DATAat0x49286(%rip), %rdx
    00000aef: 	movq	%rbx, %rdi
    00000af2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2802
    00000af7: 	movq	-0x140(%rbp), %r14
    00000afe: 	movl	$0x5dc, %edx
    00000b03: 	movl	$0x7d0, %esi
    00000b08: 	movaps	DATAat0x494a0(%rip), %xmm4
    00000b0f: 	movq	-0x178(%rbp), %rcx
    00000b16: 	movq	%r14, %rdi
    00000b19: 	movaps	%xmm4, -0x80(%rbp)
    00000b1d: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 2845
    00000b22: 	movq	-0x150(%rbp), %r15
    00000b29: 	movq	%r14, %rsi
    00000b2c: 	movl	$0xb71b00, %edx
    00000b31: 	movq	%r15, %rdi
    00000b34: 	callq	memcpy@PLT # Offset: 2868
    00000b39: 	callq	clock@PLT # Offset: 2873
    00000b3e: 	movq	%r15, %r8
    00000b41: 	movq	%r14, %rsi
    00000b44: 	xorl	%r15d, %r15d
    00000b47: 	movq	%rax, start_time(%rip)
    00000b4e: 	movl	iterations(%rip), %eax
    00000b54: 	testl	%eax, %eax
    00000b56: 	jle	.Ltmp2456 # Offset: 2902
    00000b5c: 	movq	%r14, -0x130(%rbp)
    00000b63: 	pxor	%xmm5, %xmm5
    00000b67: 	pxor	%xmm3, %xmm3
    00000b6b: 	movaps	DATAat0x49420(%rip), %xmm6
    00000b72: 	movq	DATAat0x49420(%rip), %xmm4
    00000b7a: 	movss	DATAat0x49420(%rip), %xmm2
    00000b82: 	movq	%rbx, -0x138(%rbp)
    00000b89: 	movl	%eax, %ebx
.Ltmp2461:
    00000b8b: 	leaq	0xb6ec24(%r8), %rdx
    00000b92: 	leaq	0x4(%r8), %r13
    00000b96: 	xorps	%xmm1, %xmm1
    00000b99: 	movq	$-0xb6ec20, %rdi
    00000ba0: 	leaq	0xb6d4b8(%rsi), %rax
    00000ba7: 	leaq	0x1770(%rsi), %r9
    00000bae: 	nop # Size: 2
.Ltmp2459:
    00000bb0: 	movq	%rdx, %rcx
    00000bb3: 	subq	%rax, %rcx
    00000bb6: 	cmpq	$0x2ee8, %rcx
    00000bbd: 	jbe	.Ltmp2457 # Offset: 3005
    00000bc3: 	leaq	0x1768(%rax), %rcx
    00000bca: 	leaq	-0x4(%rax), %r12
    00000bce: 	movq	%rcx, %r14
    00000bd1: 	leaq	0x1770(%rax), %r11
    00000bd8: 	leaq	0x2edc(%rax), %r10
    00000bdf: 	xorl	%ecx, %ecx
.Ltmp2458:
    00000be1: 	movups	(%r14,%rcx), %xmm7
    00000be6: 	movups	(%r12,%rcx), %xmm0
    00000beb: 	addps	%xmm7, %xmm0
    00000bee: 	movaps	%xmm7, -0x120(%rbp)
    00000bf5: 	movups	(%r11,%rcx), %xmm7
    00000bfa: 	addps	%xmm7, %xmm0
    00000bfd: 	movups	(%r10,%rcx), %xmm7
    00000c02: 	addps	%xmm7, %xmm0
    00000c05: 	addps	%xmm5, %xmm0
    00000c08: 	mulps	%xmm6, %xmm0
    00000c0b: 	movups	%xmm0, (%rdx,%rcx)
    00000c0f: 	addq	$0x10, %rcx
    00000c13: 	cmpq	$0x1760, %rcx
    00000c1a: 	jne	.Ltmp2458 # Offset: 3098
    00000c1c: 	movq	0x175c(%rax), %xmm7
    00000c24: 	movq	0x2ec8(%rax), %xmm0
    00000c2c: 	addps	%xmm7, %xmm0
    00000c2f: 	movq	0x2ed0(%rax), %xmm7
    00000c37: 	addps	%xmm7, %xmm0
    00000c3a: 	movq	0x463c(%rax), %xmm7
    00000c42: 	addps	%xmm0, %xmm7
    00000c45: 	addps	%xmm1, %xmm7
    00000c48: 	mulps	%xmm4, %xmm7
    00000c4b: 	movlps	%xmm7, 0x1760(%rdx)
.Ltmp2462:
    00000c52: 	subq	$0x1770, %rdx
    00000c59: 	subq	$0x1770, %rax
    00000c5f: 	addq	$0x1770, %rdi
    00000c66: 	cmpq	%rdx, %r13
    00000c69: 	jne	.Ltmp2459 # Offset: 3177
    00000c6f: 	addl	$0x1, %r15d
    00000c73: 	movq	%r8, %rax
    00000c76: 	movq	%rsi, %r8
    00000c79: 	cmpl	%r15d, %ebx
    00000c7c: 	je	.Ltmp2460 # Offset: 3196
    00000c7e: 	movq	%rax, %rsi
    00000c81: 	jmp	.Ltmp2461 # Offset: 3201
    00000c86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2457:
    00000c90: 	movq	%rdi, %rcx
    00000c93: 	movl	$0x1768, %r10d
    00000c99: 	leaq	-0x1770(%rsi), %r11
    00000ca0: 	negq	%rcx
    00000ca3: 	subq	%rdi, %r10
.Ltmp2463:
    00000ca6: 	movss	0x4(%r11,%rcx), %xmm0
    00000cad: 	addss	(%rsi,%rcx), %xmm0
    00000cb2: 	addss	0x8(%rsi,%rcx), %xmm0
    00000cb8: 	addss	0x4(%r9,%rcx), %xmm0
    00000cbf: 	addss	%xmm3, %xmm0
    00000cc3: 	mulss	%xmm2, %xmm0
    00000cc7: 	movss	%xmm0, 0x4(%r8,%rcx)
    00000cce: 	addq	$0x4, %rcx
    00000cd2: 	cmpq	%r10, %rcx
    00000cd5: 	je	.Ltmp2462 # Offset: 3285
    00000cdb: 	jmp	.Ltmp2463 # Offset: 3291
.Ltmp2460:
    00000cdd: 	movq	-0x130(%rbp), %rax
    00000ce4: 	movq	-0x138(%rbp), %rbx
    00000ceb: 	movq	%rax, -0x140(%rbp)
.Ltmp2456:
    00000cf2: 	movq	%rbx, %rsi
    00000cf5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000cfc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3324
    00000d01: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d08: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000d0f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d16: 	je	.Ltmp2464 # Offset: 3350
.Ltmp2606:
    00000d1c: 	movq	-0x20(%rax), %r12
    00000d20: 	callq	clock@PLT # Offset: 3360
    00000d25: 	pxor	%xmm0, %xmm0
    00000d29: 	movq	%rax, end_time(%rip)
    00000d30: 	movq	%r12, %rdi
    00000d33: 	subq	start_time(%rip), %rax
    00000d3a: 	cvtsi2sd	%rax, %xmm0
    00000d3f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000d47: 	callq	_Z13record_resultdPKc # Offset: 3399
    00000d4c: 	movq	-0x60(%rbp), %rdi
    00000d50: 	cmpq	-0x148(%rbp), %rdi
    00000d57: 	je	.Ltmp2465 # Offset: 3415
    00000d59: 	movq	-0x50(%rbp), %rax
    00000d5d: 	leaq	0x1(%rax), %rsi
    00000d61: 	callq	_ZdlPvm@PLT # Offset: 3425
.Ltmp2465:
    00000d66: 	movq	-0x158(%rbp), %rsi
    00000d6d: 	leaq	DATAat0x4929b(%rip), %rdx
    00000d74: 	movq	%rbx, %rdi
    00000d77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3447
    00000d7c: 	movq	-0x140(%rbp), %r15
    00000d83: 	movaps	DATAat0x494a0(%rip), %xmm3
    00000d8a: 	movl	$0x5dc, %edx
    00000d8f: 	xorl	%r13d, %r13d
    00000d92: 	movq	-0x178(%rbp), %rcx
    00000d99: 	movl	$0x7d0, %esi
    00000d9e: 	movq	%r15, %rdi
    00000da1: 	movaps	%xmm3, -0x80(%rbp)
    00000da5: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 3493
    00000daa: 	movq	-0x150(%rbp), %r14
    00000db1: 	movl	$0xb71b00, %edx
    00000db6: 	movq	%r15, %rsi
    00000db9: 	movq	%r14, %rdi
    00000dbc: 	callq	memcpy@PLT # Offset: 3516
    00000dc1: 	callq	clock@PLT # Offset: 3521
    00000dc6: 	movl	iterations(%rip), %r12d
    00000dcd: 	movq	%rax, start_time(%rip)
    00000dd4: 	testl	%r12d, %r12d
    00000dd7: 	jle	.Ltmp2466 # Offset: 3543
    00000dd9: 	movq	-0x140(%rbp), %rax
    00000de0: 	movq	%rax, -0x120(%rbp)
    00000de7: 	jmp	.Ltmp2467 # Offset: 3559
.Ltmp2468:
    00000de9: 	movq	%rax, %r15
.Ltmp2467:
    00000dec: 	movq	%r14, %rsi
    00000def: 	movl	$0x5dc, %r8d
    00000df5: 	movq	%r15, %rdi
    00000df8: 	addl	$0x1, %r13d
    00000dfc: 	movl	$0x5dc, %ecx
    00000e01: 	movl	$0x7d0, %edx
    00000e06: 	callq	"_ZN17jacobi2D_unrolledIffEclEPKfPfiiii.isra.0/1" # Offset: 3590
    00000e0b: 	movq	%r14, %rax
    00000e0e: 	movq	%r15, %r14
    00000e11: 	cmpl	%r12d, %r13d
    00000e14: 	jne	.Ltmp2468 # Offset: 3604
    00000e16: 	movq	-0x120(%rbp), %rax
    00000e1d: 	movq	%rax, -0x140(%rbp)
.Ltmp2466:
    00000e24: 	movq	%rbx, %rsi
    00000e27: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000e2e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3630
    00000e33: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e3a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000e41: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e48: 	je	.Ltmp2469 # Offset: 3656
.Ltmp2605:
    00000e4e: 	movq	-0x20(%rax), %r12
    00000e52: 	callq	clock@PLT # Offset: 3666
    00000e57: 	pxor	%xmm0, %xmm0
    00000e5b: 	movq	%rax, end_time(%rip)
    00000e62: 	movq	%r12, %rdi
    00000e65: 	subq	start_time(%rip), %rax
    00000e6c: 	cvtsi2sd	%rax, %xmm0
    00000e71: 	divsd	DATAat0x49520(%rip), %xmm0
    00000e79: 	callq	_Z13record_resultdPKc # Offset: 3705
    00000e7e: 	movq	-0x60(%rbp), %rdi
    00000e82: 	cmpq	-0x148(%rbp), %rdi
    00000e89: 	je	.Ltmp2470 # Offset: 3721
    00000e8b: 	movq	-0x50(%rbp), %rax
    00000e8f: 	leaq	0x1(%rax), %rsi
    00000e93: 	callq	_ZdlPvm@PLT # Offset: 3731
.Ltmp2470:
    00000e98: 	movq	-0x158(%rbp), %rsi
    00000e9f: 	leaq	DATAat0x492af(%rip), %rdx
    00000ea6: 	movq	%rbx, %rdi
    00000ea9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3753
    00000eae: 	movq	-0x140(%rbp), %r14
    00000eb5: 	movaps	DATAat0x494a0(%rip), %xmm2
    00000ebc: 	movl	$0x5dc, %edx
    00000ec1: 	xorl	%r13d, %r13d
    00000ec4: 	movq	-0x178(%rbp), %rcx
    00000ecb: 	movl	$0x7d0, %esi
    00000ed0: 	movq	%r14, %rdi
    00000ed3: 	movaps	%xmm2, -0x80(%rbp)
    00000ed7: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 3799
    00000edc: 	movq	-0x150(%rbp), %r15
    00000ee3: 	movq	%r14, %rsi
    00000ee6: 	movl	$0xb71b00, %edx
    00000eeb: 	movq	%r15, %rdi
    00000eee: 	callq	memcpy@PLT # Offset: 3822
    00000ef3: 	callq	clock@PLT # Offset: 3827
    00000ef8: 	movl	iterations(%rip), %r12d
    00000eff: 	movq	%r15, %rsi
    00000f02: 	movq	-0x140(%rbp), %r15
    00000f09: 	movq	%rax, start_time(%rip)
    00000f10: 	testl	%r12d, %r12d
    00000f13: 	jg	.Ltmp2471 # Offset: 3859
    00000f15: 	jmp	.Ltmp2472 # Offset: 3861
    00000f17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2473:
    00000f20: 	movq	%rax, %r14
.Ltmp2471:
    00000f23: 	movl	$0x5dc, %r8d
    00000f29: 	movl	$0x5dc, %ecx
    00000f2e: 	movl	$0x7d0, %edx
    00000f33: 	movq	%r14, %rdi
    00000f36: 	callq	"_ZN18jacobi2D_unrolled2IffEclEPKfPfiiii.isra.0/1" # Offset: 3894
    00000f3b: 	addl	$0x1, %r13d
    00000f3f: 	movq	%rsi, %rax
    00000f42: 	movq	%r14, %rsi
    00000f45: 	cmpl	%r12d, %r13d
    00000f48: 	jne	.Ltmp2473 # Offset: 3912
    00000f4a: 	movq	%r15, -0x140(%rbp)
.Ltmp2472:
    00000f51: 	movq	%rbx, %rsi
    00000f54: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000f5b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3931
    00000f60: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000f67: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f6e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f75: 	je	.Ltmp2474 # Offset: 3957
.Ltmp2604:
    00000f7b: 	movq	-0x20(%rax), %r12
    00000f7f: 	callq	clock@PLT # Offset: 3967
    00000f84: 	pxor	%xmm0, %xmm0
    00000f88: 	movq	%rax, end_time(%rip)
    00000f8f: 	movq	%r12, %rdi
    00000f92: 	subq	start_time(%rip), %rax
    00000f99: 	cvtsi2sd	%rax, %xmm0
    00000f9e: 	divsd	DATAat0x49520(%rip), %xmm0
    00000fa6: 	callq	_Z13record_resultdPKc # Offset: 4006
    00000fab: 	movq	-0x60(%rbp), %rdi
    00000faf: 	cmpq	-0x148(%rbp), %rdi
    00000fb6: 	je	.Ltmp2475 # Offset: 4022
    00000fb8: 	movq	-0x50(%rbp), %rax
    00000fbc: 	leaq	0x1(%rax), %rsi
    00000fc0: 	callq	_ZdlPvm@PLT # Offset: 4032
.Ltmp2475:
    00000fc5: 	movq	-0x158(%rbp), %rsi
    00000fcc: 	leaq	DATAat0x492c4(%rip), %rdx
    00000fd3: 	movq	%rbx, %rdi
    00000fd6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4054
    00000fdb: 	movq	-0x140(%rbp), %r14
    00000fe2: 	movaps	DATAat0x494a0(%rip), %xmm4
    00000fe9: 	movl	$0x5dc, %edx
    00000fee: 	xorl	%r13d, %r13d
    00000ff1: 	movq	-0x178(%rbp), %rcx
    00000ff8: 	movl	$0x7d0, %esi
    00000ffd: 	movq	%r14, %rdi
    00001000: 	movaps	%xmm4, -0x80(%rbp)
    00001004: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 4100
    00001009: 	movq	-0x150(%rbp), %r15
    00001010: 	movq	%r14, %rsi
    00001013: 	movl	$0xb71b00, %edx
    00001018: 	movq	%r15, %rdi
    0000101b: 	callq	memcpy@PLT # Offset: 4123
    00001020: 	callq	clock@PLT # Offset: 4128
    00001025: 	movl	iterations(%rip), %r12d
    0000102c: 	movq	%r15, %rsi
    0000102f: 	movq	-0x140(%rbp), %r15
    00001036: 	movq	%rax, start_time(%rip)
    0000103d: 	testl	%r12d, %r12d
    00001040: 	jg	.Ltmp2476 # Offset: 4160
    00001042: 	jmp	.Ltmp2477 # Offset: 4162
    00001044: 	nopl	(%rax) # Size: 4
.Ltmp2478:
    00001048: 	movq	%rax, %r14
.Ltmp2476:
    0000104b: 	movl	$0x5dc, %r8d
    00001051: 	movl	$0x5dc, %ecx
    00001056: 	movl	$0x7d0, %edx
    0000105b: 	movq	%r14, %rdi
    0000105e: 	callq	"_ZN18jacobi2D_unrolled3IffEclEPKfPfiiii.isra.0/1" # Offset: 4190
    00001063: 	addl	$0x1, %r13d
    00001067: 	movq	%rsi, %rax
    0000106a: 	movq	%r14, %rsi
    0000106d: 	cmpl	%r12d, %r13d
    00001070: 	jne	.Ltmp2478 # Offset: 4208
    00001072: 	movq	%r15, -0x140(%rbp)
.Ltmp2477:
    00001079: 	movq	%rbx, %rsi
    0000107c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001083: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4227
    00001088: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000108f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001096: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000109d: 	je	.Ltmp2479 # Offset: 4253
.Ltmp2603:
    000010a3: 	movq	-0x20(%rax), %r12
    000010a7: 	callq	clock@PLT # Offset: 4263
    000010ac: 	pxor	%xmm0, %xmm0
    000010b0: 	movq	%rax, end_time(%rip)
    000010b7: 	movq	%r12, %rdi
    000010ba: 	subq	start_time(%rip), %rax
    000010c1: 	cvtsi2sd	%rax, %xmm0
    000010c6: 	divsd	DATAat0x49520(%rip), %xmm0
    000010ce: 	callq	_Z13record_resultdPKc # Offset: 4302
    000010d3: 	movq	-0x60(%rbp), %rdi
    000010d7: 	cmpq	-0x148(%rbp), %rdi
    000010de: 	je	.Ltmp2480 # Offset: 4318
    000010e0: 	movq	-0x50(%rbp), %rax
    000010e4: 	leaq	0x1(%rax), %rsi
    000010e8: 	callq	_ZdlPvm@PLT # Offset: 4328
.Ltmp2480:
    000010ed: 	movq	-0x158(%rbp), %r14
    000010f4: 	leaq	-0xa0(%rbp), %rdi
    000010fb: 	leaq	DATAat0x492d9(%rip), %rdx
    00001102: 	movq	%r14, %rsi
    00001105: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4357
    0000110a: 	movl	iterations(%rip), %edx
    00001110: 	xorl	%r8d, %r8d
    00001113: 	xorl	%ecx, %ecx
    00001115: 	movl	$0x2dc6c0, %esi
    0000111a: 	movq	-0xa0(%rbp), %rdi
    00001121: 	callq	_Z9summarizePKciiii # Offset: 4385
    00001126: 	leaq	DATAat0x49238(%rip), %rdx
    0000112d: 	movq	%r14, %rsi
    00001130: 	movq	%rbx, %rdi
    00001133: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4403
    00001138: 	movq	-0x140(%rbp), %r14
    0000113f: 	movl	$0xfa, %edx
    00001144: 	movl	$0x12c, %esi
    00001149: 	movaps	DATAat0x494a0(%rip), %xmm3
    00001150: 	movq	-0x178(%rbp), %rcx
    00001157: 	movq	%r14, %rdi
    0000115a: 	movaps	%xmm3, -0x80(%rbp)
    0000115e: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 4446
    00001163: 	movq	-0x150(%rbp), %rdi
    0000116a: 	movl	$0x493e0, %edx
    0000116f: 	movq	%r14, %rsi
    00001172: 	movss	%xmm0, -0x170(%rbp)
    0000117a: 	callq	memcpy@PLT # Offset: 4474
    0000117f: 	movl	iterations(%rip), %eax
    00001185: 	movl	$0x2710, iterations(%rip)
    0000118f: 	movl	%eax, -0x188(%rbp)
    00001195: 	callq	clock@PLT # Offset: 4501
    0000119a: 	movl	iterations(%rip), %r15d
    000011a1: 	movq	%rax, start_time(%rip)
    000011a8: 	testl	%r15d, %r15d
    000011ab: 	jle	.Ltmp2481 # Offset: 4523
    000011b1: 	movq	-0x140(%rbp), %rax
    000011b8: 	pxor	%xmm2, %xmm2
    000011bc: 	movq	-0x150(%rbp), %r13
    000011c3: 	xorl	%r14d, %r14d
    000011c6: 	movss	%xmm2, -0x120(%rbp)
    000011ce: 	movaps	DATAat0x49420(%rip), %xmm4
    000011d5: 	movaps	DATAat0x494b0(%rip), %xmm2
    000011dc: 	pxor	%xmm1, %xmm1
    000011e0: 	movss	DATAat0x49420(%rip), %xmm3
    000011e8: 	movq	%rax, %r12
    000011eb: 	movss	DATAat0x494c0(%rip), %xmm5
    000011f3: 	movq	%rax, %rdi
    000011f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2492:
    00001200: 	leaq	0x3ec(%r13), %rsi
    00001207: 	leaq	0x8(%r12), %rax
    0000120c: 	movq	%rdi, %r11
    0000120f: 	movq	$-0x3e8, %rcx
    00001216: 	leaq	0x3e8(%r12), %r9
    0000121e: 	nop # Size: 2
.Ltmp2484:
    00001220: 	movq	%rsi, %rdx
    00001223: 	subq	%rax, %rdx
    00001226: 	cmpq	$0x7d8, %rdx
    0000122d: 	jbe	.Ltmp2482 # Offset: 4653
    00001233: 	movq	%r12, %r8
    00001236: 	leaq	-0x4(%rax), %r10
    0000123a: 	leaq	0x3e8(%rax), %rdi
    00001241: 	xorl	%edx, %edx
    00001243: 	subq	%rcx, %r8
    00001246: 	addq	$0x7cc, %rax
.Ltmp2483:
    0000124c: 	movups	(%r10,%rdx), %xmm6
    00001251: 	movups	(%r8,%rdx), %xmm0
    00001256: 	movups	(%rdi,%rdx), %xmm7
    0000125a: 	addps	%xmm6, %xmm0
    0000125d: 	movups	(%rax,%rdx), %xmm6
    00001261: 	addps	%xmm7, %xmm0
    00001264: 	addps	%xmm6, %xmm0
    00001267: 	addps	%xmm1, %xmm0
    0000126a: 	mulps	%xmm4, %xmm0
    0000126d: 	movups	%xmm0, (%rsi,%rdx)
    00001271: 	addq	$0x10, %rdx
    00001275: 	cmpq	$0x3e0, %rdx
    0000127c: 	jne	.Ltmp2483 # Offset: 4732
    0000127e: 	nop # Size: 2
.Ltmp2494:
    00001280: 	subq	$0x3e8, %rcx
    00001287: 	addq	$0x3e8, %rsi
    0000128e: 	movq	%rdi, %rax
    00001291: 	cmpq	$-0x48ff8, %rcx
    00001298: 	jne	.Ltmp2484 # Offset: 4760
    0000129a: 	movss	-0x120(%rbp), %xmm6
    000012a2: 	movq	%r11, %rdi
    000012a5: 	xorl	%eax, %eax
    000012a7: 	movss	%xmm6, -0x138(%rbp)
    000012af: 	nop # Size: 1
.Ltmp2485:
    000012b0: 	movups	(%r13,%rax), %xmm7
    000012b6: 	movups	(%r12,%rax), %xmm6
    000012bb: 	addq	$0x10, %rax
    000012bf: 	subps	%xmm7, %xmm6
    000012c2: 	movaps	%xmm6, %xmm0
    000012c5: 	movaps	%xmm6, %xmm7
    000012c8: 	cmpltps	%xmm1, %xmm0
    000012cc: 	xorps	%xmm2, %xmm7
    000012cf: 	andps	%xmm0, %xmm7
    000012d2: 	andnps	%xmm6, %xmm0
    000012d5: 	movss	-0x138(%rbp), %xmm6
    000012dd: 	orps	%xmm7, %xmm0
    000012e0: 	addss	%xmm0, %xmm6
    000012e4: 	movaps	%xmm0, %xmm7
    000012e7: 	shufps	$0x55, %xmm0, %xmm7
    000012eb: 	addss	%xmm6, %xmm7
    000012ef: 	movaps	%xmm0, %xmm6
    000012f2: 	unpckhps	%xmm0, %xmm6
    000012f5: 	shufps	$0xff, %xmm0, %xmm0
    000012f9: 	addss	%xmm7, %xmm6
    000012fd: 	addss	%xmm0, %xmm6
    00001301: 	movss	%xmm6, -0x138(%rbp)
    00001309: 	cmpq	$0x493e0, %rax
    0000130f: 	jne	.Ltmp2485 # Offset: 4879
    00001311: 	movss	-0x120(%rbp), %xmm6
    00001319: 	xorl	%eax, %eax
    0000131b: 	movss	%xmm6, -0x130(%rbp)
    00001323: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2487:
    00001328: 	movss	(%r12,%rax,4), %xmm0
    0000132e: 	subss	(%r13,%rax,4), %xmm0
    00001335: 	movss	-0x120(%rbp), %xmm6
    0000133d: 	comiss	%xmm0, %xmm6
    00001340: 	jbe	.Ltmp2486 # Offset: 4928
    00001342: 	xorps	%xmm5, %xmm0
.Ltmp2486:
    00001345: 	maxss	-0x130(%rbp), %xmm0
    0000134d: 	addq	$0x1, %rax
    00001351: 	movss	%xmm0, -0x130(%rbp)
    00001359: 	cmpq	$0x124f8, %rax
    0000135f: 	jne	.Ltmp2487 # Offset: 4959
    00001361: 	cmpl	$0x1, %r14d
    00001365: 	jle	.Ltmp2488 # Offset: 4965
    00001367: 	movss	DATAat0x49548(%rip), %xmm0
    0000136f: 	movss	-0x138(%rbp), %xmm6
    00001377: 	comiss	%xmm6, %xmm0
    0000137a: 	ja	.Ltmp2489 # Offset: 4986
    00001380: 	ucomiss	%xmm6, %xmm6
    00001383: 	jp	.Ltmp2490 # Offset: 4995
    00001389: 	movss	DATAat0x4954c(%rip), %xmm0
    00001391: 	movss	-0x130(%rbp), %xmm6
    00001399: 	comiss	%xmm6, %xmm0
    0000139c: 	ja	.Ltmp2489 # Offset: 5020
    000013a2: 	ucomiss	%xmm6, %xmm6
    000013a5: 	jp	.Ltmp2490 # Offset: 5029
.Ltmp2488:
    000013ab: 	addl	$0x1, %r14d
    000013af: 	movq	%r13, %rax
    000013b2: 	movq	%r12, %r13
    000013b5: 	cmpl	%r15d, %r14d
    000013b8: 	je	.Ltmp2491 # Offset: 5048
    000013ba: 	movq	%rax, %r12
    000013bd: 	jmp	.Ltmp2492 # Offset: 5053
    000013c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2482:
    000013c8: 	movq	%rcx, %rdx
    000013cb: 	movl	$0x3e0, %edi
    000013d0: 	leaq	-0x3e8(%r12), %r8
    000013d8: 	negq	%rdx
    000013db: 	subq	%rcx, %rdi
.Ltmp2493:
    000013de: 	movss	0x4(%r8,%rdx), %xmm0
    000013e5: 	addss	(%r12,%rdx), %xmm0
    000013eb: 	addss	0x8(%r12,%rdx), %xmm0
    000013f2: 	addss	0x4(%r9,%rdx), %xmm0
    000013f9: 	addss	-0x120(%rbp), %xmm0
    00001401: 	mulss	%xmm3, %xmm0
    00001405: 	movss	%xmm0, 0x4(%r13,%rdx)
    0000140c: 	addq	$0x4, %rdx
    00001410: 	cmpq	%rdx, %rdi
    00001413: 	jne	.Ltmp2493 # Offset: 5139
    00001415: 	leaq	0x3e8(%rax), %rdi
    0000141c: 	jmp	.Ltmp2494 # Offset: 5148
.Ltmp2427:
    00001421: 	movq	-0x8(%rdx), %rax
    00001425: 	addq	$0x200, %rax
    0000142b: 	jmp	.Ltmp2495 # Offset: 5163
.Ltmp2491:
    00001430: 	movq	%rdi, -0x140(%rbp)
.Ltmp2610:
    00001437: 	callq	clock@PLT # Offset: 5175
    0000143c: 	movss	-0x138(%rbp), %xmm4
    00001444: 	pxor	%xmm0, %xmm0
    00001448: 	movss	-0x170(%rbp), %xmm2
    00001450: 	movq	%rax, end_time(%rip)
    00001457: 	subss	0x24be4(%r12), %xmm2
    00001461: 	subq	start_time(%rip), %rax
    00001468: 	ucomiss	%xmm4, %xmm4
    0000146b: 	cvtsi2sd	%rax, %xmm0
    00001470: 	divsd	DATAat0x49520(%rip), %xmm0
    00001478: 	movsd	%xmm0, -0x160(%rbp)
    00001480: 	movd	%xmm2, %r13d
    00001485: 	jp	.Ltmp2496 # Offset: 5253
    0000148b: 	movss	-0x130(%rbp), %xmm4
    00001493: 	ucomiss	%xmm4, %xmm4
    00001496: 	jp	.Ltmp2496 # Offset: 5270
    0000149c: 	cmpl	%r15d, iterations(%rip)
    000014a3: 	movq	-0x58(%rbp), %rdx
    000014a7: 	movq	-0x60(%rbp), %rsi
    000014ab: 	jg	.Ltmp2497 # Offset: 5291
    000014ad: 	movss	-0x138(%rbp), %xmm2
    000014b5: 	comiss	DATAat0x49548(%rip), %xmm2
    000014bc: 	jbe	.Ltmp2497 # Offset: 5308
    000014be: 	comiss	DATAat0x4954c(%rip), %xmm4
    000014c5: 	ja	.Ltmp2498 # Offset: 5317
.Ltmp2497:
    000014cb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000014d2: 	movq	%rax, %rdi
    000014d5: 	movq	%rax, -0x180(%rbp)
    000014dc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5340
    000014e1: 	movq	%rax, %rdi
    000014e4: 	movl	$0xa, %edx
    000014e9: 	leaq	DATAat0x491ab(%rip), %rsi
    000014f0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5360
.Ltmp2509:
    000014f5: 	movq	-0x180(%rbp), %r14
    000014fc: 	movl	$0x4, %edx
    00001501: 	leaq	DATAat0x491b6(%rip), %rsi
    00001508: 	movq	%r14, %rdi
    0000150b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5387
    00001510: 	movl	%r15d, %esi
    00001513: 	movq	%r14, %rdi
    00001516: 	callq	_ZNSolsEi@PLT # Offset: 5398
    0000151b: 	movq	%rax, %rdi
    0000151e: 	movl	$0xb, %edx
    00001523: 	leaq	DATAat0x491bb(%rip), %rsi
    0000152a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5418
    0000152f: 	movl	$0xa, %edx
    00001534: 	leaq	DATAat0x491c7(%rip), %rsi
    0000153b: 	movq	%r14, %rdi
    0000153e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5438
    00001543: 	pxor	%xmm0, %xmm0
    00001547: 	movq	%r14, %rdi
    0000154a: 	cvtss2sd	-0x138(%rbp), %xmm0
    00001552: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5458
    00001557: 	movl	$0x7, %edx
    0000155c: 	leaq	DATAat0x491d2(%rip), %rsi
    00001563: 	movq	%rax, %rdi
    00001566: 	movq	%rax, %r12
    00001569: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5481
    0000156e: 	pxor	%xmm0, %xmm0
    00001572: 	movq	%r12, %rdi
    00001575: 	cvtss2sd	-0x130(%rbp), %xmm0
    0000157d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5501
    00001582: 	movl	$0x10, %edx
    00001587: 	leaq	DATAat0x491da(%rip), %rsi
    0000158e: 	movq	%rax, %rdi
    00001591: 	movq	%rax, %r12
    00001594: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5524
    00001599: 	movd	%r13d, %xmm3
    0000159e: 	pxor	%xmm0, %xmm0
    000015a2: 	movq	%r12, %rdi
    000015a5: 	cvtss2sd	%xmm3, %xmm0
    000015a9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5545
    000015ae: 	movl	$0x8, %edx
    000015b3: 	leaq	DATAat0x491eb(%rip), %rsi
    000015ba: 	movq	%rax, %rdi
    000015bd: 	movq	%rax, %r12
    000015c0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5568
    000015c5: 	movsd	-0x160(%rbp), %xmm0
    000015cd: 	movq	%r12, %rdi
    000015d0: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5584
    000015d5: 	movq	%rax, %rdi
    000015d8: 	movl	$0x2, %edx
    000015dd: 	leaq	DATAat0x491f4(%rip), %rsi
    000015e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5604
    000015e9: 	movl	-0x188(%rbp), %eax
    000015ef: 	movq	-0x60(%rbp), %rdi
    000015f3: 	movl	%eax, iterations(%rip)
    000015f9: 	cmpq	-0x148(%rbp), %rdi
    00001600: 	je	.Ltmp2499 # Offset: 5632
    00001602: 	movq	-0x50(%rbp), %rax
    00001606: 	leaq	0x1(%rax), %rsi
    0000160a: 	callq	_ZdlPvm@PLT # Offset: 5642
.Ltmp2499:
    0000160f: 	movq	-0x158(%rbp), %rsi
    00001616: 	leaq	DATAat0x4924a(%rip), %rdx
    0000161d: 	movq	%rbx, %rdi
    00001620: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5664
    00001625: 	movq	-0x140(%rbp), %r14
    0000162c: 	movl	$0xfa, %edx
    00001631: 	movl	$0x12c, %esi
    00001636: 	movaps	DATAat0x494a0(%rip), %xmm2
    0000163d: 	movq	-0x178(%rbp), %rcx
    00001644: 	movq	%r14, %rdi
    00001647: 	movaps	%xmm2, -0x80(%rbp)
    0000164b: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 5707
    00001650: 	movq	-0x150(%rbp), %rdi
    00001657: 	movl	$0x493e0, %edx
    0000165c: 	movq	%r14, %rsi
    0000165f: 	movss	%xmm0, -0x188(%rbp)
    00001667: 	callq	memcpy@PLT # Offset: 5735
    0000166c: 	movl	iterations(%rip), %eax
    00001672: 	movl	$0x2710, iterations(%rip)
    0000167c: 	movl	%eax, -0x190(%rbp)
    00001682: 	callq	clock@PLT # Offset: 5762
    00001687: 	movl	iterations(%rip), %r12d
    0000168e: 	movq	%rax, start_time(%rip)
    00001695: 	testl	%r12d, %r12d
    00001698: 	jle	.Ltmp2500 # Offset: 5784
    0000169e: 	movq	-0x140(%rbp), %rax
    000016a5: 	xorl	%r14d, %r14d
    000016a8: 	pxor	%xmm4, %xmm4
    000016ac: 	movq	-0x150(%rbp), %r15
    000016b3: 	movss	DATAat0x49420(%rip), %xmm3
    000016bb: 	movaps	DATAat0x494b0(%rip), %xmm2
    000016c2: 	movq	%rax, -0x138(%rbp)
    000016c9: 	movq	%rax, %r13
    000016cc: 	nopl	(%rax) # Size: 4
.Ltmp2508:
    000016d0: 	movq	-0x138(%rbp), %r10
    000016d7: 	leaq	0x3ec(%r15), %rsi
    000016de: 	movl	$0x1, %ecx
    000016e3: 	leaq	0x48ff8(%r13), %rdi
    000016ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2502:
    000016f0: 	addl	$0x1, %ecx
    000016f3: 	leaq	-0x48c10(%rdi), %rax
    000016fa: 	movq	%rsi, %rdx
.Ltmp2501:
    000016fd: 	movss	-0x3e4(%rax), %xmm0
    00001705: 	addss	(%rax), %xmm0
    00001709: 	addq	$0x3e8, %rax
    0000170f: 	addq	$0x3e8, %rdx
    00001716: 	addss	-0x3e0(%rax), %xmm0
    0000171e: 	addss	0x4(%rax), %xmm0
    00001723: 	addss	-0x120(%rbp), %xmm0
    0000172b: 	mulss	%xmm3, %xmm0
    0000172f: 	movss	%xmm0, -0x3e8(%rdx)
    00001737: 	cmpq	%rdi, %rax
    0000173a: 	jne	.Ltmp2501 # Offset: 5946
    0000173c: 	addq	$0x4, %rsi
    00001740: 	leaq	0x4(%rax), %rdi
    00001744: 	cmpl	$0xf9, %ecx
    0000174a: 	jne	.Ltmp2502 # Offset: 5962
    0000174c: 	movss	-0x120(%rbp), %xmm5
    00001754: 	movq	%r10, %rdi
    00001757: 	xorl	%eax, %eax
    00001759: 	movss	%xmm5, -0x130(%rbp)
    00001761: 	nopl	(%rax) # Size: 7
.Ltmp2503:
    00001768: 	movups	(%r15,%rax), %xmm5
    0000176d: 	movups	(%r13,%rax), %xmm1
    00001773: 	addq	$0x10, %rax
    00001777: 	subps	%xmm5, %xmm1
    0000177a: 	movaps	%xmm1, %xmm0
    0000177d: 	movaps	%xmm1, %xmm5
    00001780: 	cmpltps	%xmm4, %xmm0
    00001784: 	xorps	%xmm2, %xmm5
    00001787: 	andps	%xmm0, %xmm5
    0000178a: 	andnps	%xmm1, %xmm0
    0000178d: 	movss	-0x130(%rbp), %xmm1
    00001795: 	orps	%xmm5, %xmm0
    00001798: 	addss	%xmm0, %xmm1
    0000179c: 	movaps	%xmm0, %xmm5
    0000179f: 	shufps	$0x55, %xmm0, %xmm5
    000017a3: 	addss	%xmm1, %xmm5
    000017a7: 	movaps	%xmm0, %xmm1
    000017aa: 	unpckhps	%xmm0, %xmm1
    000017ad: 	shufps	$0xff, %xmm0, %xmm0
    000017b1: 	addss	%xmm5, %xmm1
    000017b5: 	addss	%xmm0, %xmm1
    000017b9: 	movss	%xmm1, -0x130(%rbp)
    000017c1: 	cmpq	$0x493e0, %rax
    000017c7: 	jne	.Ltmp2503 # Offset: 6087
    000017c9: 	movq	%rdi, -0x138(%rbp)
    000017d0: 	movl	$0x124f8, %edx
    000017d5: 	movq	%r15, %rsi
    000017d8: 	movq	%r13, %rdi
    000017db: 	movaps	%xmm2, -0x170(%rbp)
    000017e2: 	movss	%xmm3, -0x140(%rbp)
    000017ea: 	callq	_Z14max_differenceIfET_PKS0_S2_m # Offset: 6122
    000017ef: 	cmpl	$0x1, %r14d
    000017f3: 	movaps	-0x170(%rbp), %xmm2
    000017fa: 	movss	-0x140(%rbp), %xmm3
    00001802: 	movss	%xmm0, -0x160(%rbp)
    0000180a: 	pxor	%xmm4, %xmm4
    0000180e: 	jle	.Ltmp2504 # Offset: 6158
    00001810: 	movss	DATAat0x49548(%rip), %xmm6
    00001818: 	movss	-0x130(%rbp), %xmm5
    00001820: 	comiss	%xmm5, %xmm6
    00001823: 	ja	.Ltmp2505 # Offset: 6179
    00001829: 	ucomiss	%xmm5, %xmm5
    0000182c: 	jp	.Ltmp2506 # Offset: 6188
    00001832: 	movss	DATAat0x4954c(%rip), %xmm5
    0000183a: 	comiss	%xmm0, %xmm5
    0000183d: 	ja	.Ltmp2505 # Offset: 6205
    00001843: 	ucomiss	%xmm0, %xmm0
    00001846: 	jp	.Ltmp2506 # Offset: 6214
.Ltmp2504:
    0000184c: 	addl	$0x1, %r14d
    00001850: 	movq	%r15, %rax
    00001853: 	movq	%r13, %r15
    00001856: 	cmpl	%r12d, %r14d
    00001859: 	je	.Ltmp2507 # Offset: 6233
    0000185f: 	movq	%rax, %r13
    00001862: 	jmp	.Ltmp2508 # Offset: 6242
.Ltmp2490:
    00001867: 	movq	%rdi, -0x140(%rbp)
    0000186e: 	movl	%r14d, %r15d
    00001871: 	callq	clock@PLT # Offset: 6257
    00001876: 	movss	-0x170(%rbp), %xmm4
    0000187e: 	pxor	%xmm0, %xmm0
    00001882: 	subss	0x24be4(%r13), %xmm4
    0000188b: 	movq	%rax, end_time(%rip)
    00001892: 	subq	start_time(%rip), %rax
    00001899: 	cvtsi2sd	%rax, %xmm0
    0000189e: 	divsd	DATAat0x49520(%rip), %xmm0
    000018a6: 	movsd	%xmm0, -0x160(%rbp)
    000018ae: 	movd	%xmm4, %r13d
.Ltmp2496:
    000018b3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000018ba: 	movq	-0x58(%rbp), %rdx
    000018be: 	movq	-0x60(%rbp), %rsi
    000018c2: 	movq	%rax, %rdi
    000018c5: 	movq	%rax, -0x180(%rbp)
    000018cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6348
    000018d1: 	movq	%rax, %rdi
    000018d4: 	leaq	DATAat0x493d4(%rip), %rsi
    000018db: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 6363
    000018e0: 	jmp	.Ltmp2509 # Offset: 6368
.Ltmp2506:
    000018e5: 	movq	-0x138(%rbp), %rax
    000018ec: 	movl	%r14d, %r12d
    000018ef: 	movq	%rax, -0x140(%rbp)
    000018f6: 	callq	clock@PLT # Offset: 6390
    000018fb: 	movss	-0x188(%rbp), %xmm3
    00001903: 	pxor	%xmm0, %xmm0
    00001907: 	subss	0x24be4(%r15), %xmm3
    00001910: 	movq	%rax, end_time(%rip)
    00001917: 	subq	start_time(%rip), %rax
    0000191e: 	cvtsi2sd	%rax, %xmm0
    00001923: 	divsd	DATAat0x49520(%rip), %xmm0
    0000192b: 	movsd	%xmm0, -0x138(%rbp)
    00001933: 	movd	%xmm3, %r15d
.Ltmp2569:
    00001938: 	movq	-0x58(%rbp), %rdx
    0000193c: 	movq	-0x60(%rbp), %rsi
    00001940: 	movq	-0x180(%rbp), %rdi
    00001947: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6471
    0000194c: 	movq	%rax, %rdi
    0000194f: 	movl	$0x10, %edx
    00001954: 	leaq	DATAat0x493d4(%rip), %rsi
    0000195b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6491
.Ltmp2572:
    00001960: 	movq	-0x180(%rbp), %r14
    00001967: 	movl	$0x4, %edx
    0000196c: 	leaq	DATAat0x491b6(%rip), %rsi
    00001973: 	movq	%r14, %rdi
    00001976: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6518
    0000197b: 	movl	%r12d, %esi
    0000197e: 	movq	%r14, %rdi
    00001981: 	callq	_ZNSolsEi@PLT # Offset: 6529
    00001986: 	movq	%rax, %rdi
    00001989: 	movl	$0xb, %edx
    0000198e: 	leaq	DATAat0x491bb(%rip), %rsi
    00001995: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6549
    0000199a: 	movl	$0xa, %edx
    0000199f: 	leaq	DATAat0x491c7(%rip), %rsi
    000019a6: 	movq	%r14, %rdi
    000019a9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6569
    000019ae: 	pxor	%xmm0, %xmm0
    000019b2: 	movq	%r14, %rdi
    000019b5: 	cvtss2sd	-0x130(%rbp), %xmm0
    000019bd: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6589
    000019c2: 	movl	$0x7, %edx
    000019c7: 	leaq	DATAat0x491d2(%rip), %rsi
    000019ce: 	movq	%rax, %rdi
    000019d1: 	movq	%rax, %r12
    000019d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6612
    000019d9: 	pxor	%xmm0, %xmm0
    000019dd: 	movq	%r12, %rdi
    000019e0: 	cvtss2sd	-0x160(%rbp), %xmm0
    000019e8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6632
    000019ed: 	movl	$0x10, %edx
    000019f2: 	leaq	DATAat0x491da(%rip), %rsi
    000019f9: 	movq	%rax, %rdi
    000019fc: 	movq	%rax, %r12
    000019ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6655
    00001a04: 	movd	%r15d, %xmm3
    00001a09: 	pxor	%xmm0, %xmm0
    00001a0d: 	movq	%r12, %rdi
    00001a10: 	cvtss2sd	%xmm3, %xmm0
    00001a14: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6676
    00001a19: 	movl	$0x8, %edx
    00001a1e: 	leaq	DATAat0x491eb(%rip), %rsi
    00001a25: 	movq	%rax, %rdi
    00001a28: 	movq	%rax, %r12
    00001a2b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6699
    00001a30: 	movsd	-0x138(%rbp), %xmm0
    00001a38: 	movq	%r12, %rdi
    00001a3b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6715
    00001a40: 	movq	%rax, %rdi
    00001a43: 	movl	$0x2, %edx
    00001a48: 	leaq	DATAat0x491f4(%rip), %rsi
    00001a4f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6735
    00001a54: 	movl	-0x190(%rbp), %eax
    00001a5a: 	movq	-0x60(%rbp), %rdi
    00001a5e: 	movl	%eax, iterations(%rip)
    00001a64: 	cmpq	-0x148(%rbp), %rdi
    00001a6b: 	je	.Ltmp2510 # Offset: 6763
    00001a6d: 	movq	-0x50(%rbp), %rax
    00001a71: 	leaq	0x1(%rax), %rsi
    00001a75: 	callq	_ZdlPvm@PLT # Offset: 6773
.Ltmp2510:
    00001a7a: 	movq	-0x158(%rbp), %rsi
    00001a81: 	leaq	DATAat0x4925d(%rip), %rdx
    00001a88: 	movq	%rbx, %rdi
    00001a8b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6795
    00001a90: 	subq	$0x8, %rsp
    00001a94: 	movq	%rbx, %r9
    00001a97: 	movl	$0xfa, %ecx
    00001a9c: 	movl	$0x12c, %edx
    00001aa1: 	pushq	$0x1
    00001aa3: 	movq	-0x150(%rbp), %rsi
    00001aaa: 	movl	$0xfa, %r8d
    00001ab0: 	movq	-0x140(%rbp), %rdi
    00001ab7: 	callq	_Z20convergenceLaplace2DIff17jacobi2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6839
    00001abc: 	popq	%r11
    00001abe: 	movq	-0x60(%rbp), %rdi
    00001ac2: 	popq	%r12
    00001ac4: 	cmpq	-0x148(%rbp), %rdi
    00001acb: 	je	.Ltmp2511 # Offset: 6859
    00001acd: 	movq	-0x50(%rbp), %rax
    00001ad1: 	leaq	0x1(%rax), %rsi
    00001ad5: 	callq	_ZdlPvm@PLT # Offset: 6869
.Ltmp2511:
    00001ada: 	movq	-0x158(%rbp), %rsi
    00001ae1: 	leaq	DATAat0x49271(%rip), %rdx
    00001ae8: 	movq	%rbx, %rdi
    00001aeb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6891
    00001af0: 	subq	$0x8, %rsp
    00001af4: 	movq	%rbx, %r9
    00001af7: 	movl	$0xfa, %ecx
    00001afc: 	movl	$0x12c, %edx
    00001b01: 	pushq	$0x1
    00001b03: 	movq	-0x150(%rbp), %rsi
    00001b0a: 	movl	$0xfa, %r8d
    00001b10: 	movq	-0x140(%rbp), %rdi
    00001b17: 	callq	_Z20convergenceLaplace2DIff18jacobi2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6935
    00001b1c: 	popq	%r9
    00001b1e: 	movq	-0x60(%rbp), %rdi
    00001b22: 	popq	%r10
    00001b24: 	cmpq	-0x148(%rbp), %rdi
    00001b2b: 	je	.Ltmp2512 # Offset: 6955
    00001b2d: 	movq	-0x50(%rbp), %rax
    00001b31: 	leaq	0x1(%rax), %rsi
    00001b35: 	callq	_ZdlPvm@PLT # Offset: 6965
.Ltmp2512:
    00001b3a: 	movq	-0x158(%rbp), %rsi
    00001b41: 	leaq	DATAat0x49286(%rip), %rdx
    00001b48: 	movq	%rbx, %rdi
    00001b4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6987
    00001b50: 	subq	$0x8, %rsp
    00001b54: 	movq	%rbx, %r9
    00001b57: 	movl	$0xfa, %ecx
    00001b5c: 	movl	$0x12c, %edx
    00001b61: 	pushq	$0x1
    00001b63: 	movq	-0x150(%rbp), %rsi
    00001b6a: 	movl	$0xfa, %r8d
    00001b70: 	movq	-0x140(%rbp), %rdi
    00001b77: 	callq	_Z20convergenceLaplace2DIff18jacobi2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7031
    00001b7c: 	popq	%rdi
    00001b7d: 	movq	-0x60(%rbp), %rdi
    00001b81: 	popq	%r8
    00001b83: 	cmpq	-0x148(%rbp), %rdi
    00001b8a: 	je	.Ltmp2513 # Offset: 7050
    00001b8c: 	movq	-0x50(%rbp), %rax
    00001b90: 	leaq	0x1(%rax), %rsi
    00001b94: 	callq	_ZdlPvm@PLT # Offset: 7060
.Ltmp2513:
    00001b99: 	movq	-0x158(%rbp), %rsi
    00001ba0: 	leaq	DATAat0x4929b(%rip), %rdx
    00001ba7: 	movq	%rbx, %rdi
    00001baa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7082
    00001baf: 	subq	$0x8, %rsp
    00001bb3: 	movq	%rbx, %r9
    00001bb6: 	movl	$0xfa, %ecx
    00001bbb: 	movl	$0x12c, %edx
    00001bc0: 	pushq	$0x1
    00001bc2: 	movq	-0x150(%rbp), %rsi
    00001bc9: 	movl	$0xfa, %r8d
    00001bcf: 	movq	-0x140(%rbp), %rdi
    00001bd6: 	callq	_Z20convergenceLaplace2DIff17jacobi2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7126
    00001bdb: 	popq	%rcx
    00001bdc: 	movq	-0x60(%rbp), %rdi
    00001be0: 	popq	%rsi
    00001be1: 	cmpq	-0x148(%rbp), %rdi
    00001be8: 	je	.Ltmp2514 # Offset: 7144
    00001bea: 	movq	-0x50(%rbp), %rax
    00001bee: 	leaq	0x1(%rax), %rsi
    00001bf2: 	callq	_ZdlPvm@PLT # Offset: 7154
.Ltmp2514:
    00001bf7: 	movq	-0x158(%rbp), %rsi
    00001bfe: 	leaq	DATAat0x492af(%rip), %rdx
    00001c05: 	movq	%rbx, %rdi
    00001c08: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7176
    00001c0d: 	subq	$0x8, %rsp
    00001c11: 	movq	%rbx, %r9
    00001c14: 	movl	$0xfa, %ecx
    00001c19: 	movl	$0x12c, %edx
    00001c1e: 	pushq	$0x1
    00001c20: 	movq	-0x150(%rbp), %rsi
    00001c27: 	movl	$0xfa, %r8d
    00001c2d: 	movq	-0x140(%rbp), %rdi
    00001c34: 	callq	_Z20convergenceLaplace2DIff18jacobi2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7220
    00001c39: 	popq	%rax
    00001c3a: 	movq	-0x60(%rbp), %rdi
    00001c3e: 	popq	%rdx
    00001c3f: 	cmpq	-0x148(%rbp), %rdi
    00001c46: 	je	.Ltmp2515 # Offset: 7238
    00001c48: 	movq	-0x50(%rbp), %rax
    00001c4c: 	leaq	0x1(%rax), %rsi
    00001c50: 	callq	_ZdlPvm@PLT # Offset: 7248
.Ltmp2515:
    00001c55: 	movq	-0x158(%rbp), %rsi
    00001c5c: 	leaq	DATAat0x492c4(%rip), %rdx
    00001c63: 	movq	%rbx, %rdi
    00001c66: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7270
    00001c6b: 	subq	$0x8, %rsp
    00001c6f: 	movq	%rbx, %r9
    00001c72: 	movl	$0xfa, %ecx
    00001c77: 	movl	$0x12c, %edx
    00001c7c: 	pushq	$0x1
    00001c7e: 	movq	-0x150(%rbp), %rsi
    00001c85: 	movl	$0xfa, %r8d
    00001c8b: 	movq	-0x140(%rbp), %rdi
    00001c92: 	callq	_Z20convergenceLaplace2DIff18jacobi2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7314
    00001c97: 	popq	%r15
    00001c99: 	movq	-0x60(%rbp), %rdi
    00001c9d: 	popq	%rax
    00001c9e: 	cmpq	-0x148(%rbp), %rdi
    00001ca5: 	je	.Ltmp2516 # Offset: 7333
    00001ca7: 	movq	-0x50(%rbp), %rax
    00001cab: 	leaq	0x1(%rax), %rsi
    00001caf: 	callq	_ZdlPvm@PLT # Offset: 7343
.Ltmp2516:
    00001cb4: 	movq	-0x158(%rbp), %rsi
    00001cbb: 	leaq	DATAat0x492f0(%rip), %rdx
    00001cc2: 	movq	%rbx, %rdi
    00001cc5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7365
    00001cca: 	movq	-0x150(%rbp), %rsi
    00001cd1: 	movq	-0x140(%rbp), %rdi
    00001cd8: 	movq	%rbx, %r9
    00001cdb: 	movl	$0x5dc, %r8d
    00001ce1: 	movl	$0x5dc, %ecx
    00001ce6: 	movl	$0x7d0, %edx
    00001ceb: 	callq	_Z13testLaplace2DIff19jacobi_sor2D_simpleIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7403
    00001cf0: 	movq	-0x60(%rbp), %rdi
    00001cf4: 	cmpq	-0x148(%rbp), %rdi
    00001cfb: 	je	.Ltmp2517 # Offset: 7419
    00001cfd: 	movq	-0x50(%rbp), %rax
    00001d01: 	leaq	0x1(%rax), %rsi
    00001d05: 	callq	_ZdlPvm@PLT # Offset: 7429
.Ltmp2517:
    00001d0a: 	movq	-0x158(%rbp), %rsi
    00001d11: 	leaq	DATAat0x49306(%rip), %rdx
    00001d18: 	movq	%rbx, %rdi
    00001d1b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7451
    00001d20: 	movq	-0x150(%rbp), %rsi
    00001d27: 	movq	-0x140(%rbp), %rdi
    00001d2e: 	movq	%rbx, %r9
    00001d31: 	movl	$0x5dc, %r8d
    00001d37: 	movl	$0x5dc, %ecx
    00001d3c: 	movl	$0x7d0, %edx
    00001d41: 	callq	_Z13testLaplace2DIff20jacobi_sor2D_swappedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7489
    00001d46: 	movq	-0x60(%rbp), %rdi
    00001d4a: 	cmpq	-0x148(%rbp), %rdi
    00001d51: 	je	.Ltmp2518 # Offset: 7505
    00001d53: 	movq	-0x50(%rbp), %rax
    00001d57: 	leaq	0x1(%rax), %rsi
    00001d5b: 	callq	_ZdlPvm@PLT # Offset: 7515
.Ltmp2518:
    00001d60: 	movq	-0x158(%rbp), %rsi
    00001d67: 	leaq	DATAat0x4931d(%rip), %rdx
    00001d6e: 	movq	%rbx, %rdi
    00001d71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7537
    00001d76: 	movq	-0x140(%rbp), %r14
    00001d7d: 	movl	$0x5dc, %edx
    00001d82: 	movl	$0x7d0, %esi
    00001d87: 	movaps	DATAat0x494a0(%rip), %xmm2
    00001d8e: 	movq	-0x178(%rbp), %rcx
    00001d95: 	movq	%r14, %rdi
    00001d98: 	movaps	%xmm2, -0x80(%rbp)
    00001d9c: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 7580
    00001da1: 	movq	-0x150(%rbp), %r15
    00001da8: 	movq	%r14, %rsi
    00001dab: 	movl	$0xb71b00, %edx
    00001db0: 	movq	%r15, %rdi
    00001db3: 	callq	memcpy@PLT # Offset: 7603
    00001db8: 	callq	clock@PLT # Offset: 7608
    00001dbd: 	movq	%r15, %rdi
    00001dc0: 	movq	%r14, %rsi
    00001dc3: 	xorl	%r15d, %r15d
    00001dc6: 	movq	%rax, start_time(%rip)
    00001dcd: 	movl	iterations(%rip), %eax
    00001dd3: 	testl	%eax, %eax
    00001dd5: 	jle	.Ltmp2519 # Offset: 7637
    00001ddb: 	movq	%r14, -0x138(%rbp)
    00001de2: 	movaps	DATAat0x49430(%rip), %xmm7
    00001de9: 	movaps	DATAat0x49420(%rip), %xmm8
    00001df1: 	movss	DATAat0x49420(%rip), %xmm3
    00001df9: 	movq	%rbx, -0x170(%rbp)
    00001e00: 	movl	%eax, %ebx
    00001e02: 	movq	DATAat0x49420(%rip), %xmm5
    00001e0a: 	movq	DATAat0x49430(%rip), %xmm4
.Ltmp2524:
    00001e12: 	movss	DATAat0x49430(%rip), %xmm1
    00001e1a: 	pxor	%xmm6, %xmm6
    00001e1e: 	xorps	%xmm2, %xmm2
    00001e21: 	leaq	0xb70388(%rdi), %rdx
    00001e28: 	leaq	0xb6ec14(%rsi), %rax
    00001e2f: 	movq	$-0xb6ec20, %r8
    00001e36: 	leaq	0x1770(%rsi), %r9
    00001e3d: 	nopl	(%rax) # Size: 3
.Ltmp2522:
    00001e40: 	movq	%rdx, %rcx
    00001e43: 	subq	%rax, %rcx
    00001e46: 	addq	$0x8, %rcx
    00001e4a: 	cmpq	$0x2ee8, %rcx
    00001e51: 	jbe	.Ltmp2520 # Offset: 7761
    00001e57: 	leaq	0x176c(%rax), %rcx
    00001e5e: 	leaq	-0xc(%rdx), %r10
    00001e62: 	movq	%rcx, %r14
    00001e65: 	leaq	-0x8(%rax), %r13
    00001e69: 	leaq	0x1764(%rax), %r12
    00001e70: 	xorl	%ecx, %ecx
    00001e72: 	leaq	0x2ed8(%rax), %r11
.Ltmp2521:
    00001e79: 	movups	(%r14,%rcx), %xmm0
    00001e7e: 	movups	(%r13,%rcx), %xmm10
    00001e84: 	movups	(%r10,%rcx), %xmm9
    00001e89: 	movaps	%xmm0, -0x130(%rbp)
    00001e90: 	movups	(%r12,%rcx), %xmm0
    00001e95: 	shufps	$0x1b, %xmm10, %xmm10
    00001e9a: 	shufps	$0x1b, %xmm9, %xmm9
    00001e9f: 	shufps	$0x1b, %xmm0, %xmm0
    00001ea3: 	addps	%xmm10, %xmm0
    00001ea7: 	movaps	-0x130(%rbp), %xmm10
    00001eaf: 	shufps	$0x1b, %xmm10, %xmm10
    00001eb4: 	addps	%xmm10, %xmm0
    00001eb8: 	movups	(%r11,%rcx), %xmm10
    00001ebd: 	shufps	$0x1b, %xmm10, %xmm10
    00001ec2: 	addps	%xmm10, %xmm0
    00001ec6: 	addps	%xmm6, %xmm0
    00001ec9: 	mulps	%xmm8, %xmm0
    00001ecd: 	subps	%xmm9, %xmm0
    00001ed1: 	mulps	%xmm7, %xmm0
    00001ed4: 	addps	%xmm9, %xmm0
    00001ed8: 	shufps	$0x1b, %xmm0, %xmm0
    00001edc: 	movups	%xmm0, (%r10,%rcx)
    00001ee1: 	subq	$0x10, %rcx
    00001ee5: 	cmpq	$-0x1760, %rcx
    00001eec: 	jne	.Ltmp2521 # Offset: 7916
    00001eee: 	movq	-0x1760(%rax), %xmm12
    00001ef7: 	movq	0xc(%rax), %xmm0
    00001efc: 	movq	0x1780(%rax), %xmm10
    00001f05: 	movq	0x14(%rax), %xmm11
    00001f0b: 	movq	-0x1764(%rdx), %xmm9
    00001f14: 	shufps	$0xe1, %xmm0, %xmm0
    00001f18: 	shufps	$0xe1, %xmm12, %xmm12
    00001f1d: 	addps	%xmm12, %xmm0
    00001f21: 	shufps	$0xe1, %xmm11, %xmm11
    00001f26: 	shufps	$0xe1, %xmm10, %xmm10
    00001f2b: 	movaps	%xmm9, %xmm13
    00001f2f: 	shufps	$0xe1, %xmm13, %xmm13
    00001f34: 	addps	%xmm11, %xmm0
    00001f38: 	addps	%xmm10, %xmm0
    00001f3c: 	addps	%xmm2, %xmm0
    00001f3f: 	movaps	%xmm0, %xmm9
    00001f43: 	mulps	%xmm5, %xmm9
    00001f47: 	subps	%xmm13, %xmm9
    00001f4b: 	mulps	%xmm4, %xmm9
    00001f4f: 	addps	%xmm13, %xmm9
    00001f53: 	shufps	$0xe1, %xmm9, %xmm9
    00001f58: 	movlps	%xmm9, -0x1764(%rdx)
.Ltmp2525:
    00001f60: 	subq	$0x1770, %rdx
    00001f67: 	subq	$0x1770, %rax
    00001f6d: 	addq	$0x1770, %r8
    00001f74: 	jne	.Ltmp2522 # Offset: 8052
    00001f7a: 	addl	$0x1, %r15d
    00001f7e: 	movq	%rdi, %rax
    00001f81: 	movq	%rsi, %rdi
    00001f84: 	cmpl	%r15d, %ebx
    00001f87: 	je	.Ltmp2523 # Offset: 8071
    00001f8d: 	movq	%rax, %rsi
    00001f90: 	jmp	.Ltmp2524 # Offset: 8080
    00001f95: 	nopl	(%rax) # Size: 3
.Ltmp2520:
    00001f98: 	movq	%r8, %rcx
    00001f9b: 	movq	$-0x1768, %r10
    00001fa2: 	leaq	-0x1770(%rsi), %r11
    00001fa9: 	negq	%rcx
    00001fac: 	subq	%r8, %r10
.Ltmp2526:
    00001faf: 	movss	0x1768(%r11,%rcx), %xmm9
    00001fb9: 	movss	0x1764(%rsi,%rcx), %xmm0
    00001fc2: 	movss	0x1768(%rdi,%rcx), %xmm10
    00001fcc: 	addss	%xmm9, %xmm0
    00001fd1: 	addss	0x176c(%rsi,%rcx), %xmm0
    00001fda: 	addss	0x1768(%r9,%rcx), %xmm0
    00001fe4: 	addss	-0x120(%rbp), %xmm0
    00001fec: 	mulss	%xmm3, %xmm0
    00001ff0: 	subss	%xmm10, %xmm0
    00001ff5: 	mulss	%xmm1, %xmm0
    00001ff9: 	addss	%xmm10, %xmm0
    00001ffe: 	movss	%xmm0, 0x1768(%rdi,%rcx)
    00002007: 	subq	$0x4, %rcx
    0000200b: 	cmpq	%r10, %rcx
    0000200e: 	je	.Ltmp2525 # Offset: 8206
    00002014: 	jmp	.Ltmp2526 # Offset: 8212
.Ltmp2523:
    00002016: 	movq	-0x138(%rbp), %rax
    0000201d: 	movq	-0x170(%rbp), %rbx
    00002024: 	movq	%rax, -0x140(%rbp)
.Ltmp2519:
    0000202b: 	movq	%rbx, %rsi
    0000202e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002035: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8245
    0000203a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002041: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002048: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000204f: 	je	.Ltmp2527 # Offset: 8271
.Ltmp2617:
    00002055: 	movq	-0x20(%rax), %r12
    00002059: 	callq	clock@PLT # Offset: 8281
    0000205e: 	pxor	%xmm0, %xmm0
    00002062: 	movq	%rax, end_time(%rip)
    00002069: 	movq	%r12, %rdi
    0000206c: 	subq	start_time(%rip), %rax
    00002073: 	cvtsi2sd	%rax, %xmm0
    00002078: 	divsd	DATAat0x49520(%rip), %xmm0
    00002080: 	callq	_Z13record_resultdPKc # Offset: 8320
    00002085: 	movq	-0x60(%rbp), %rdi
    00002089: 	cmpq	-0x148(%rbp), %rdi
    00002090: 	je	.Ltmp2528 # Offset: 8336
    00002092: 	movq	-0x50(%rbp), %rax
    00002096: 	leaq	0x1(%rax), %rsi
    0000209a: 	callq	_ZdlPvm@PLT # Offset: 8346
.Ltmp2528:
    0000209f: 	movq	-0x158(%rbp), %rsi
    000020a6: 	leaq	DATAat0x49335(%rip), %rdx
    000020ad: 	movq	%rbx, %rdi
    000020b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8368
    000020b5: 	movq	-0x140(%rbp), %r14
    000020bc: 	movl	$0x5dc, %edx
    000020c1: 	movl	$0x7d0, %esi
    000020c6: 	movaps	DATAat0x494a0(%rip), %xmm4
    000020cd: 	movq	-0x178(%rbp), %rcx
    000020d4: 	movq	%r14, %rdi
    000020d7: 	movaps	%xmm4, -0x80(%rbp)
    000020db: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 8411
    000020e0: 	movq	-0x150(%rbp), %r15
    000020e7: 	movq	%r14, %rsi
    000020ea: 	movl	$0xb71b00, %edx
    000020ef: 	movq	%r15, %rdi
    000020f2: 	callq	memcpy@PLT # Offset: 8434
    000020f7: 	callq	clock@PLT # Offset: 8439
    000020fc: 	movq	%r15, %rdi
    000020ff: 	movq	%r14, %rsi
    00002102: 	xorl	%r15d, %r15d
    00002105: 	movq	%rax, start_time(%rip)
    0000210c: 	movl	iterations(%rip), %eax
    00002112: 	testl	%eax, %eax
    00002114: 	jle	.Ltmp2529 # Offset: 8468
    0000211a: 	movq	%r14, -0x138(%rbp)
    00002121: 	movaps	DATAat0x49430(%rip), %xmm7
    00002128: 	movaps	DATAat0x49420(%rip), %xmm8
    00002130: 	movss	DATAat0x49420(%rip), %xmm3
    00002138: 	movq	%rbx, -0x170(%rbp)
    0000213f: 	movl	%eax, %ebx
    00002141: 	movq	DATAat0x49420(%rip), %xmm5
    00002149: 	movq	DATAat0x49430(%rip), %xmm4
.Ltmp2534:
    00002151: 	movss	DATAat0x49430(%rip), %xmm1
    00002159: 	pxor	%xmm6, %xmm6
    0000215d: 	xorps	%xmm2, %xmm2
    00002160: 	leaq	0x2ed8(%rdi), %rdx
    00002167: 	leaq	0x1764(%rsi), %rax
    0000216e: 	movq	$-0x1770, %r8
    00002175: 	leaq	0x1770(%rsi), %r9
    0000217c: 	nopl	(%rax) # Size: 4
.Ltmp2532:
    00002180: 	movq	%rdx, %rcx
    00002183: 	subq	%rax, %rcx
    00002186: 	addq	$0x8, %rcx
    0000218a: 	cmpq	$0x2ee8, %rcx
    00002191: 	jbe	.Ltmp2530 # Offset: 8593
    00002197: 	leaq	0x176c(%rax), %rcx
    0000219e: 	leaq	-0xc(%rdx), %r10
    000021a2: 	movq	%rcx, %r14
    000021a5: 	leaq	-0x8(%rax), %r13
    000021a9: 	leaq	0x1764(%rax), %r12
    000021b0: 	xorl	%ecx, %ecx
    000021b2: 	leaq	0x2ed8(%rax), %r11
.Ltmp2531:
    000021b9: 	movups	(%r14,%rcx), %xmm0
    000021be: 	movups	(%r13,%rcx), %xmm10
    000021c4: 	movups	(%r10,%rcx), %xmm9
    000021c9: 	movaps	%xmm0, -0x130(%rbp)
    000021d0: 	movups	(%r12,%rcx), %xmm0
    000021d5: 	shufps	$0x1b, %xmm10, %xmm10
    000021da: 	shufps	$0x1b, %xmm9, %xmm9
    000021df: 	shufps	$0x1b, %xmm0, %xmm0
    000021e3: 	addps	%xmm10, %xmm0
    000021e7: 	movaps	-0x130(%rbp), %xmm10
    000021ef: 	shufps	$0x1b, %xmm10, %xmm10
    000021f4: 	addps	%xmm10, %xmm0
    000021f8: 	movups	(%r11,%rcx), %xmm10
    000021fd: 	shufps	$0x1b, %xmm10, %xmm10
    00002202: 	addps	%xmm10, %xmm0
    00002206: 	addps	%xmm6, %xmm0
    00002209: 	mulps	%xmm8, %xmm0
    0000220d: 	subps	%xmm9, %xmm0
    00002211: 	mulps	%xmm7, %xmm0
    00002214: 	addps	%xmm9, %xmm0
    00002218: 	shufps	$0x1b, %xmm0, %xmm0
    0000221c: 	movups	%xmm0, (%r10,%rcx)
    00002221: 	subq	$0x10, %rcx
    00002225: 	cmpq	$-0x1760, %rcx
    0000222c: 	jne	.Ltmp2531 # Offset: 8748
    0000222e: 	movq	-0x1760(%rax), %xmm12
    00002237: 	movq	0xc(%rax), %xmm0
    0000223c: 	movq	0x1780(%rax), %xmm10
    00002245: 	movq	0x14(%rax), %xmm11
    0000224b: 	movq	-0x1764(%rdx), %xmm9
    00002254: 	shufps	$0xe1, %xmm0, %xmm0
    00002258: 	shufps	$0xe1, %xmm12, %xmm12
    0000225d: 	addps	%xmm12, %xmm0
    00002261: 	shufps	$0xe1, %xmm11, %xmm11
    00002266: 	shufps	$0xe1, %xmm10, %xmm10
    0000226b: 	movaps	%xmm9, %xmm13
    0000226f: 	shufps	$0xe1, %xmm13, %xmm13
    00002274: 	addps	%xmm11, %xmm0
    00002278: 	addps	%xmm10, %xmm0
    0000227c: 	addps	%xmm2, %xmm0
    0000227f: 	movaps	%xmm0, %xmm9
    00002283: 	mulps	%xmm5, %xmm9
    00002287: 	subps	%xmm13, %xmm9
    0000228b: 	mulps	%xmm4, %xmm9
    0000228f: 	addps	%xmm13, %xmm9
    00002293: 	shufps	$0xe1, %xmm9, %xmm9
    00002298: 	movlps	%xmm9, -0x1764(%rdx)
.Ltmp2535:
    000022a0: 	subq	$0x1770, %r8
    000022a7: 	addq	$0x1770, %rdx
    000022ae: 	addq	$0x1770, %rax
    000022b4: 	cmpq	$-0xb70390, %r8
    000022bb: 	jne	.Ltmp2532 # Offset: 8891
    000022c1: 	addl	$0x1, %r15d
    000022c5: 	movq	%rdi, %rax
    000022c8: 	movq	%rsi, %rdi
    000022cb: 	cmpl	%ebx, %r15d
    000022ce: 	je	.Ltmp2533 # Offset: 8910
    000022d4: 	movq	%rax, %rsi
    000022d7: 	jmp	.Ltmp2534 # Offset: 8919
    000022dc: 	nopl	(%rax) # Size: 4
.Ltmp2530:
    000022e0: 	movq	%r8, %rcx
    000022e3: 	movq	$-0x1768, %r10
    000022ea: 	leaq	-0x1770(%rsi), %r11
    000022f1: 	negq	%rcx
    000022f4: 	subq	%r8, %r10
.Ltmp2536:
    000022f7: 	movss	0x1768(%r11,%rcx), %xmm9
    00002301: 	movss	0x1764(%rsi,%rcx), %xmm0
    0000230a: 	movss	0x1768(%rdi,%rcx), %xmm10
    00002314: 	addss	%xmm9, %xmm0
    00002319: 	addss	0x176c(%rsi,%rcx), %xmm0
    00002322: 	addss	0x1768(%r9,%rcx), %xmm0
    0000232c: 	addss	-0x120(%rbp), %xmm0
    00002334: 	mulss	%xmm3, %xmm0
    00002338: 	subss	%xmm10, %xmm0
    0000233d: 	mulss	%xmm1, %xmm0
    00002341: 	addss	%xmm10, %xmm0
    00002346: 	movss	%xmm0, 0x1768(%rdi,%rcx)
    0000234f: 	subq	$0x4, %rcx
    00002353: 	cmpq	%r10, %rcx
    00002356: 	je	.Ltmp2535 # Offset: 9046
    0000235c: 	jmp	.Ltmp2536 # Offset: 9052
.Ltmp2533:
    0000235e: 	movq	-0x138(%rbp), %rax
    00002365: 	movq	-0x170(%rbp), %rbx
    0000236c: 	movq	%rax, -0x140(%rbp)
.Ltmp2529:
    00002373: 	movq	%rbx, %rsi
    00002376: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000237d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9085
    00002382: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002389: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002390: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002397: 	je	.Ltmp2537 # Offset: 9111
.Ltmp2615:
    0000239d: 	movq	-0x20(%rax), %r12
    000023a1: 	callq	clock@PLT # Offset: 9121
    000023a6: 	pxor	%xmm0, %xmm0
    000023aa: 	movq	%rax, end_time(%rip)
    000023b1: 	movq	%r12, %rdi
    000023b4: 	subq	start_time(%rip), %rax
    000023bb: 	cvtsi2sd	%rax, %xmm0
    000023c0: 	divsd	DATAat0x49520(%rip), %xmm0
    000023c8: 	callq	_Z13record_resultdPKc # Offset: 9160
    000023cd: 	movq	-0x60(%rbp), %rdi
    000023d1: 	cmpq	-0x148(%rbp), %rdi
    000023d8: 	je	.Ltmp2538 # Offset: 9176
    000023da: 	movq	-0x50(%rbp), %rax
    000023de: 	leaq	0x1(%rax), %rsi
    000023e2: 	callq	_ZdlPvm@PLT # Offset: 9186
.Ltmp2538:
    000023e7: 	movq	-0x158(%rbp), %rsi
    000023ee: 	leaq	DATAat0x4934e(%rip), %rdx
    000023f5: 	movq	%rbx, %rdi
    000023f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9208
    000023fd: 	movq	-0x150(%rbp), %rsi
    00002404: 	movq	-0x140(%rbp), %rdi
    0000240b: 	movq	%rbx, %r9
    0000240e: 	movl	$0x5dc, %r8d
    00002414: 	movl	$0x5dc, %ecx
    00002419: 	movl	$0x7d0, %edx
    0000241e: 	callq	_Z13testLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9246
    00002423: 	movq	-0x60(%rbp), %rdi
    00002427: 	cmpq	-0x148(%rbp), %rdi
    0000242e: 	je	.Ltmp2539 # Offset: 9262
    00002430: 	movq	-0x50(%rbp), %rax
    00002434: 	leaq	0x1(%rax), %rsi
    00002438: 	callq	_ZdlPvm@PLT # Offset: 9272
.Ltmp2539:
    0000243d: 	movq	-0x158(%rbp), %rsi
    00002444: 	leaq	DATAat0x49367(%rip), %rdx
    0000244b: 	movq	%rbx, %rdi
    0000244e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9294
    00002453: 	movq	-0x140(%rbp), %r15
    0000245a: 	movaps	DATAat0x494a0(%rip), %xmm3
    00002461: 	movl	$0x5dc, %edx
    00002466: 	xorl	%r13d, %r13d
    00002469: 	movq	-0x178(%rbp), %rcx
    00002470: 	movl	$0x7d0, %esi
    00002475: 	movq	%r15, %rdi
    00002478: 	movaps	%xmm3, -0x80(%rbp)
    0000247c: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 9340
    00002481: 	movq	-0x150(%rbp), %r14
    00002488: 	movl	$0xb71b00, %edx
    0000248d: 	movq	%r15, %rsi
    00002490: 	movq	%r14, %rdi
    00002493: 	callq	memcpy@PLT # Offset: 9363
    00002498: 	callq	clock@PLT # Offset: 9368
    0000249d: 	movl	iterations(%rip), %r12d
    000024a4: 	movq	%rax, start_time(%rip)
    000024ab: 	testl	%r12d, %r12d
    000024ae: 	jle	.Ltmp2540 # Offset: 9390
    000024b0: 	movq	-0x140(%rbp), %rax
    000024b7: 	movq	%rax, -0x130(%rbp)
    000024be: 	jmp	.Ltmp2541 # Offset: 9406
.Ltmp2542:
    000024c0: 	movq	%rax, %r15
.Ltmp2541:
    000024c3: 	movq	%r14, %rsi
    000024c6: 	movl	$0x5dc, %r8d
    000024cc: 	movq	%r15, %rdi
    000024cf: 	addl	$0x1, %r13d
    000024d3: 	movl	$0x5dc, %ecx
    000024d8: 	movl	$0x7d0, %edx
    000024dd: 	callq	"_ZN21jacobi_sor2D_unrolledIffEclEPfS1_iiii.isra.0/1" # Offset: 9437
    000024e2: 	movq	%r14, %rax
    000024e5: 	movq	%r15, %r14
    000024e8: 	cmpl	%r13d, %r12d
    000024eb: 	jne	.Ltmp2542 # Offset: 9451
    000024ed: 	movq	-0x130(%rbp), %rax
    000024f4: 	movq	%rax, -0x140(%rbp)
.Ltmp2540:
    000024fb: 	movq	%rbx, %rsi
    000024fe: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002505: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9477
    0000250a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002511: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002518: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000251f: 	je	.Ltmp2543 # Offset: 9503
.Ltmp2614:
    00002525: 	movq	-0x20(%rax), %r12
    00002529: 	callq	clock@PLT # Offset: 9513
    0000252e: 	pxor	%xmm0, %xmm0
    00002532: 	movq	%rax, end_time(%rip)
    00002539: 	movq	%r12, %rdi
    0000253c: 	subq	start_time(%rip), %rax
    00002543: 	cvtsi2sd	%rax, %xmm0
    00002548: 	divsd	DATAat0x49520(%rip), %xmm0
    00002550: 	callq	_Z13record_resultdPKc # Offset: 9552
    00002555: 	movq	-0x60(%rbp), %rdi
    00002559: 	cmpq	-0x148(%rbp), %rdi
    00002560: 	je	.Ltmp2544 # Offset: 9568
    00002562: 	movq	-0x50(%rbp), %rax
    00002566: 	leaq	0x1(%rax), %rsi
    0000256a: 	callq	_ZdlPvm@PLT # Offset: 9578
.Ltmp2544:
    0000256f: 	movq	-0x158(%rbp), %rsi
    00002576: 	leaq	DATAat0x4937f(%rip), %rdx
    0000257d: 	movq	%rbx, %rdi
    00002580: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9600
    00002585: 	movq	-0x140(%rbp), %r15
    0000258c: 	movaps	DATAat0x494a0(%rip), %xmm2
    00002593: 	movl	$0x5dc, %edx
    00002598: 	xorl	%r13d, %r13d
    0000259b: 	movq	-0x178(%rbp), %rcx
    000025a2: 	movl	$0x7d0, %esi
    000025a7: 	movq	%r15, %rdi
    000025aa: 	movaps	%xmm2, -0x80(%rbp)
    000025ae: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 9646
    000025b3: 	movq	-0x150(%rbp), %r14
    000025ba: 	movl	$0xb71b00, %edx
    000025bf: 	movq	%r15, %rsi
    000025c2: 	movq	%r14, %rdi
    000025c5: 	callq	memcpy@PLT # Offset: 9669
    000025ca: 	callq	clock@PLT # Offset: 9674
    000025cf: 	movl	iterations(%rip), %r12d
    000025d6: 	movq	%rax, start_time(%rip)
    000025dd: 	testl	%r12d, %r12d
    000025e0: 	jle	.Ltmp2545 # Offset: 9696
    000025e2: 	movq	-0x140(%rbp), %rax
    000025e9: 	movq	%rax, -0x130(%rbp)
    000025f0: 	jmp	.Ltmp2546 # Offset: 9712
.Ltmp2547:
    000025f2: 	movq	%rax, %r15
.Ltmp2546:
    000025f5: 	movq	%r14, %rsi
    000025f8: 	movl	$0x5dc, %r8d
    000025fe: 	movq	%r15, %rdi
    00002601: 	addl	$0x1, %r13d
    00002605: 	movl	$0x5dc, %ecx
    0000260a: 	movl	$0x7d0, %edx
    0000260f: 	callq	"_ZN22jacobi_sor2D_unrolled2IffEclEPfS1_iiii.isra.0/1" # Offset: 9743
    00002614: 	movq	%r14, %rax
    00002617: 	movq	%r15, %r14
    0000261a: 	cmpl	%r12d, %r13d
    0000261d: 	jne	.Ltmp2547 # Offset: 9757
    0000261f: 	movq	-0x130(%rbp), %rax
    00002626: 	movq	%rax, -0x140(%rbp)
.Ltmp2545:
    0000262d: 	movq	%rbx, %rsi
    00002630: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002637: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9783
    0000263c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002643: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000264a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002651: 	je	.Ltmp2548 # Offset: 9809
.Ltmp2613:
    00002657: 	movq	-0x20(%rax), %r12
    0000265b: 	callq	clock@PLT # Offset: 9819
    00002660: 	pxor	%xmm0, %xmm0
    00002664: 	movq	%rax, end_time(%rip)
    0000266b: 	movq	%r12, %rdi
    0000266e: 	subq	start_time(%rip), %rax
    00002675: 	cvtsi2sd	%rax, %xmm0
    0000267a: 	divsd	DATAat0x49520(%rip), %xmm0
    00002682: 	callq	_Z13record_resultdPKc # Offset: 9858
    00002687: 	movq	-0x60(%rbp), %rdi
    0000268b: 	cmpq	-0x148(%rbp), %rdi
    00002692: 	je	.Ltmp2549 # Offset: 9874
    00002694: 	movq	-0x50(%rbp), %rax
    00002698: 	leaq	0x1(%rax), %rsi
    0000269c: 	callq	_ZdlPvm@PLT # Offset: 9884
.Ltmp2549:
    000026a1: 	movq	-0x158(%rbp), %rsi
    000026a8: 	leaq	DATAat0x49398(%rip), %rdx
    000026af: 	movq	%rbx, %rdi
    000026b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9906
    000026b7: 	movq	-0x140(%rbp), %r15
    000026be: 	movaps	DATAat0x494a0(%rip), %xmm4
    000026c5: 	movl	$0x5dc, %edx
    000026ca: 	xorl	%r13d, %r13d
    000026cd: 	movq	-0x178(%rbp), %rcx
    000026d4: 	movl	$0x7d0, %esi
    000026d9: 	movq	%r15, %rdi
    000026dc: 	movaps	%xmm4, -0x80(%rbp)
    000026e0: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 9952
    000026e5: 	movq	-0x150(%rbp), %r14
    000026ec: 	movl	$0xb71b00, %edx
    000026f1: 	movq	%r15, %rsi
    000026f4: 	movq	%r14, %rdi
    000026f7: 	callq	memcpy@PLT # Offset: 9975
    000026fc: 	callq	clock@PLT # Offset: 9980
    00002701: 	movl	iterations(%rip), %r12d
    00002708: 	movq	%rax, start_time(%rip)
    0000270f: 	testl	%r12d, %r12d
    00002712: 	jle	.Ltmp2550 # Offset: 10002
    00002714: 	movq	-0x140(%rbp), %rax
    0000271b: 	movq	%rax, -0x130(%rbp)
    00002722: 	jmp	.Ltmp2551 # Offset: 10018
.Ltmp2552:
    00002724: 	movq	%rax, %r15
.Ltmp2551:
    00002727: 	movq	%r14, %rsi
    0000272a: 	movl	$0x5dc, %r8d
    00002730: 	movq	%r15, %rdi
    00002733: 	addl	$0x1, %r13d
    00002737: 	movl	$0x5dc, %ecx
    0000273c: 	movl	$0x7d0, %edx
    00002741: 	callq	"_ZN22jacobi_sor2D_unrolled3IffEclEPfS1_iiii.isra.0/1" # Offset: 10049
    00002746: 	movq	%r14, %rax
    00002749: 	movq	%r15, %r14
    0000274c: 	cmpl	%r12d, %r13d
    0000274f: 	jne	.Ltmp2552 # Offset: 10063
    00002751: 	movq	-0x130(%rbp), %rax
    00002758: 	movq	%rax, -0x140(%rbp)
.Ltmp2550:
    0000275f: 	movq	%rbx, %rsi
    00002762: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002769: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10089
    0000276e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002775: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000277c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002783: 	je	.Ltmp2553 # Offset: 10115
.Ltmp2612:
    00002789: 	movq	-0x20(%rax), %r12
    0000278d: 	callq	clock@PLT # Offset: 10125
    00002792: 	pxor	%xmm0, %xmm0
    00002796: 	movq	%rax, end_time(%rip)
    0000279d: 	movq	%r12, %rdi
    000027a0: 	subq	start_time(%rip), %rax
    000027a7: 	cvtsi2sd	%rax, %xmm0
    000027ac: 	divsd	DATAat0x49520(%rip), %xmm0
    000027b4: 	callq	_Z13record_resultdPKc # Offset: 10164
    000027b9: 	movq	-0x60(%rbp), %rdi
    000027bd: 	cmpq	-0x148(%rbp), %rdi
    000027c4: 	je	.Ltmp2554 # Offset: 10180
    000027c6: 	movq	-0x50(%rbp), %rax
    000027ca: 	leaq	0x1(%rax), %rsi
    000027ce: 	callq	_ZdlPvm@PLT # Offset: 10190
.Ltmp2554:
    000027d3: 	movq	-0x158(%rbp), %r14
    000027da: 	movq	-0x178(%rbp), %rdi
    000027e1: 	leaq	DATAat0x493b1(%rip), %rdx
    000027e8: 	movq	%r14, %rsi
    000027eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10219
    000027f0: 	movl	iterations(%rip), %edx
    000027f6: 	movq	-0x80(%rbp), %rdi
    000027fa: 	xorl	%r8d, %r8d
    000027fd: 	xorl	%ecx, %ecx
    000027ff: 	movl	$0x2dc6c0, %esi
    00002804: 	callq	_Z9summarizePKciiii # Offset: 10244
    00002809: 	leaq	DATAat0x492f0(%rip), %rdx
    00002810: 	movq	%r14, %rsi
    00002813: 	movq	%rbx, %rdi
    00002816: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10262
    0000281b: 	movq	-0x140(%rbp), %r14
    00002822: 	movl	$0xfa, %edx
    00002827: 	movl	$0x12c, %esi
    0000282c: 	movaps	DATAat0x494a0(%rip), %xmm3
    00002833: 	leaq	-0xf0(%rbp), %rax
    0000283a: 	movq	%rax, %rcx
    0000283d: 	movq	%r14, %rdi
    00002840: 	movaps	%xmm3, -0xf0(%rbp)
    00002847: 	movq	%rax, -0x188(%rbp)
    0000284e: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 10318
    00002853: 	movq	-0x150(%rbp), %rdi
    0000285a: 	movl	$0x493e0, %edx
    0000285f: 	movq	%r14, %rsi
    00002862: 	movss	%xmm0, -0x160(%rbp)
    0000286a: 	callq	memcpy@PLT # Offset: 10346
    0000286f: 	movl	iterations(%rip), %eax
    00002875: 	movl	$0x2710, iterations(%rip)
    0000287f: 	movl	%eax, -0x178(%rbp)
    00002885: 	callq	clock@PLT # Offset: 10373
    0000288a: 	movl	iterations(%rip), %r15d
    00002891: 	movq	%rax, start_time(%rip)
    00002898: 	testl	%r15d, %r15d
    0000289b: 	jle	.Ltmp2555 # Offset: 10395
    000028a1: 	movq	-0x140(%rbp), %rax
    000028a8: 	movq	-0x150(%rbp), %r13
    000028af: 	xorl	%r14d, %r14d
    000028b2: 	movss	DATAat0x494c0(%rip), %xmm7
    000028ba: 	movaps	DATAat0x494b0(%rip), %xmm2
    000028c1: 	movaps	DATAat0x49420(%rip), %xmm6
    000028c8: 	movaps	DATAat0x49430(%rip), %xmm5
    000028cf: 	movss	DATAat0x49420(%rip), %xmm4
    000028d7: 	movq	%rax, %r12
    000028da: 	movq	%rax, %rdi
    000028dd: 	movss	DATAat0x49430(%rip), %xmm3
    000028e5: 	nopl	(%rax) # Size: 3
.Ltmp2566:
    000028e8: 	leaq	0x3ec(%r13), %rsi
    000028ef: 	leaq	0x8(%r12), %rax
    000028f4: 	movq	%rdi, %r10
    000028f7: 	movq	$-0x3e8, %rcx
    000028fe: 	pxor	%xmm8, %xmm8
    00002903: 	leaq	0x3e8(%r12), %r9
    0000290b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2558:
    00002910: 	movq	%rsi, %rdx
    00002913: 	subq	%rax, %rdx
    00002916: 	cmpq	$0x7d8, %rdx
    0000291d: 	jbe	.Ltmp2556 # Offset: 10525
    00002923: 	movq	%r12, %r8
    00002926: 	leaq	-0x4(%rax), %r11
    0000292a: 	leaq	0x3e8(%rax), %rdi
    00002931: 	xorl	%edx, %edx
    00002933: 	subq	%rcx, %r8
    00002936: 	addq	$0x7cc, %rax
.Ltmp2557:
    0000293c: 	movups	(%r11,%rdx), %xmm1
    00002941: 	movups	(%r8,%rdx), %xmm0
    00002946: 	addps	%xmm1, %xmm0
    00002949: 	movups	(%rdi,%rdx), %xmm1
    0000294d: 	addps	%xmm1, %xmm0
    00002950: 	movups	(%rax,%rdx), %xmm1
    00002954: 	addps	%xmm1, %xmm0
    00002957: 	movups	(%rsi,%rdx), %xmm1
    0000295b: 	addps	%xmm8, %xmm0
    0000295f: 	mulps	%xmm6, %xmm0
    00002962: 	subps	%xmm1, %xmm0
    00002965: 	mulps	%xmm5, %xmm0
    00002968: 	addps	%xmm1, %xmm0
    0000296b: 	movups	%xmm0, (%rsi,%rdx)
    0000296f: 	addq	$0x10, %rdx
    00002973: 	cmpq	$0x3e0, %rdx
    0000297a: 	jne	.Ltmp2557 # Offset: 10618
    0000297c: 	nopl	(%rax) # Size: 4
.Ltmp2568:
    00002980: 	subq	$0x3e8, %rcx
    00002987: 	addq	$0x3e8, %rsi
    0000298e: 	movq	%rdi, %rax
    00002991: 	cmpq	$-0x48ff8, %rcx
    00002998: 	jne	.Ltmp2558 # Offset: 10648
    0000299e: 	movss	-0x120(%rbp), %xmm1
    000029a6: 	movq	%r10, %rdi
    000029a9: 	xorl	%eax, %eax
    000029ab: 	pxor	%xmm9, %xmm9
    000029b0: 	movss	%xmm1, -0x138(%rbp)
    000029b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2559:
    000029c0: 	movups	(%r13,%rax), %xmm0
    000029c6: 	movups	(%r12,%rax), %xmm1
    000029cb: 	addq	$0x10, %rax
    000029cf: 	subps	%xmm0, %xmm1
    000029d2: 	movaps	%xmm1, %xmm0
    000029d5: 	movaps	%xmm1, %xmm8
    000029d9: 	cmpltps	%xmm9, %xmm0
    000029de: 	xorps	%xmm2, %xmm8
    000029e2: 	andps	%xmm0, %xmm8
    000029e6: 	andnps	%xmm1, %xmm0
    000029e9: 	movss	-0x138(%rbp), %xmm1
    000029f1: 	orps	%xmm8, %xmm0
    000029f5: 	addss	%xmm0, %xmm1
    000029f9: 	movaps	%xmm0, %xmm8
    000029fd: 	shufps	$0x55, %xmm0, %xmm8
    00002a02: 	addss	%xmm1, %xmm8
    00002a07: 	movaps	%xmm0, %xmm1
    00002a0a: 	unpckhps	%xmm0, %xmm1
    00002a0d: 	shufps	$0xff, %xmm0, %xmm0
    00002a11: 	addss	%xmm8, %xmm1
    00002a16: 	addss	%xmm0, %xmm1
    00002a1a: 	movss	%xmm1, -0x138(%rbp)
    00002a22: 	cmpq	$0x493e0, %rax
    00002a28: 	jne	.Ltmp2559 # Offset: 10792
    00002a2a: 	movss	-0x120(%rbp), %xmm1
    00002a32: 	xorl	%eax, %eax
    00002a34: 	movss	%xmm1, -0x130(%rbp)
    00002a3c: 	nopl	(%rax) # Size: 4
.Ltmp2561:
    00002a40: 	movss	(%r12,%rax,4), %xmm0
    00002a46: 	subss	(%r13,%rax,4), %xmm0
    00002a4d: 	movss	-0x120(%rbp), %xmm1
    00002a55: 	comiss	%xmm0, %xmm1
    00002a58: 	jbe	.Ltmp2560 # Offset: 10840
    00002a5a: 	xorps	%xmm7, %xmm0
.Ltmp2560:
    00002a5d: 	maxss	-0x130(%rbp), %xmm0
    00002a65: 	addq	$0x1, %rax
    00002a69: 	movss	%xmm0, -0x130(%rbp)
    00002a71: 	cmpq	$0x124f8, %rax
    00002a77: 	jne	.Ltmp2561 # Offset: 10871
    00002a79: 	cmpl	$0x1, %r14d
    00002a7d: 	jle	.Ltmp2562 # Offset: 10877
    00002a7f: 	movss	DATAat0x49548(%rip), %xmm0
    00002a87: 	movss	-0x138(%rbp), %xmm1
    00002a8f: 	comiss	%xmm1, %xmm0
    00002a92: 	ja	.Ltmp2563 # Offset: 10898
    00002a98: 	ucomiss	%xmm1, %xmm1
    00002a9b: 	jp	.Ltmp2564 # Offset: 10907
    00002aa1: 	movss	DATAat0x4954c(%rip), %xmm0
    00002aa9: 	movss	-0x130(%rbp), %xmm1
    00002ab1: 	comiss	%xmm1, %xmm0
    00002ab4: 	ja	.Ltmp2563 # Offset: 10932
    00002aba: 	ucomiss	%xmm1, %xmm1
    00002abd: 	jp	.Ltmp2564 # Offset: 10941
.Ltmp2562:
    00002ac3: 	addl	$0x1, %r14d
    00002ac7: 	movq	%r13, %rax
    00002aca: 	movq	%r12, %r13
    00002acd: 	cmpl	%r15d, %r14d
    00002ad0: 	je	.Ltmp2565 # Offset: 10960
    00002ad6: 	movq	%rax, %r12
    00002ad9: 	jmp	.Ltmp2566 # Offset: 10969
    00002ade: 	nop # Size: 2
.Ltmp2556:
    00002ae0: 	movq	%rcx, %rdx
    00002ae3: 	movl	$0x3e0, %edi
    00002ae8: 	leaq	-0x3e8(%r12), %r8
    00002af0: 	movq	%r10, %r11
    00002af3: 	negq	%rdx
    00002af6: 	subq	%rcx, %rdi
.Ltmp2567:
    00002af9: 	movss	0x4(%r8,%rdx), %xmm1
    00002b00: 	addss	(%r12,%rdx), %xmm1
    00002b06: 	movss	0x8(%r12,%rdx), %xmm0
    00002b0d: 	movss	0x4(%r13,%rdx), %xmm9
    00002b14: 	addss	%xmm1, %xmm0
    00002b18: 	addss	0x4(%r9,%rdx), %xmm0
    00002b1f: 	addss	-0x120(%rbp), %xmm0
    00002b27: 	mulss	%xmm4, %xmm0
    00002b2b: 	subss	%xmm9, %xmm0
    00002b30: 	mulss	%xmm3, %xmm0
    00002b34: 	addss	%xmm9, %xmm0
    00002b39: 	movss	%xmm0, 0x4(%r13,%rdx)
    00002b40: 	addq	$0x4, %rdx
    00002b44: 	cmpq	%rdx, %rdi
    00002b47: 	jne	.Ltmp2567 # Offset: 11079
    00002b49: 	movq	%r11, %r10
    00002b4c: 	leaq	0x3e8(%rax), %rdi
    00002b53: 	jmp	.Ltmp2568 # Offset: 11091
.Ltmp2505:
    00002b58: 	movq	-0x138(%rbp), %rax
    00002b5f: 	movl	%r14d, %r12d
    00002b62: 	movq	%r15, %r13
    00002b65: 	movq	%rax, -0x140(%rbp)
.Ltmp2611:
    00002b6c: 	callq	clock@PLT # Offset: 11116
    00002b71: 	movss	-0x130(%rbp), %xmm4
    00002b79: 	pxor	%xmm0, %xmm0
    00002b7d: 	movss	-0x188(%rbp), %xmm2
    00002b85: 	subss	0x24be4(%r13), %xmm2
    00002b8e: 	movq	%rax, end_time(%rip)
    00002b95: 	subq	start_time(%rip), %rax
    00002b9c: 	ucomiss	%xmm4, %xmm4
    00002b9f: 	cvtsi2sd	%rax, %xmm0
    00002ba4: 	divsd	DATAat0x49520(%rip), %xmm0
    00002bac: 	movsd	%xmm0, -0x138(%rbp)
    00002bb4: 	movd	%xmm2, %r15d
    00002bb9: 	jp	.Ltmp2569 # Offset: 11193
    00002bbf: 	movss	-0x160(%rbp), %xmm4
    00002bc7: 	ucomiss	%xmm4, %xmm4
    00002bca: 	jp	.Ltmp2569 # Offset: 11210
    00002bd0: 	cmpl	%r12d, iterations(%rip)
    00002bd7: 	movq	-0x58(%rbp), %rdx
    00002bdb: 	movq	-0x60(%rbp), %rsi
    00002bdf: 	jg	.Ltmp2570 # Offset: 11231
    00002be1: 	movss	-0x130(%rbp), %xmm2
    00002be9: 	comiss	DATAat0x49548(%rip), %xmm2
    00002bf0: 	jbe	.Ltmp2570 # Offset: 11248
    00002bf2: 	comiss	DATAat0x4954c(%rip), %xmm4
    00002bf9: 	ja	.Ltmp2571 # Offset: 11257
.Ltmp2570:
    00002bff: 	movq	-0x180(%rbp), %rdi
    00002c06: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11270
    00002c0b: 	movq	%rax, %rdi
    00002c0e: 	movl	$0xa, %edx
    00002c13: 	leaq	DATAat0x491ab(%rip), %rsi
    00002c1a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11290
    00002c1f: 	jmp	.Ltmp2572 # Offset: 11295
.Ltmp2564:
    00002c24: 	movq	%rdi, -0x140(%rbp)
    00002c2b: 	movl	%r14d, %r15d
    00002c2e: 	callq	clock@PLT # Offset: 11310
    00002c33: 	movss	-0x160(%rbp), %xmm4
    00002c3b: 	pxor	%xmm0, %xmm0
    00002c3f: 	subss	0x24be4(%r13), %xmm4
    00002c48: 	movq	%rax, end_time(%rip)
    00002c4f: 	subq	start_time(%rip), %rax
    00002c56: 	cvtsi2sd	%rax, %xmm0
    00002c5b: 	divsd	DATAat0x49520(%rip), %xmm0
    00002c63: 	movsd	%xmm0, -0x170(%rbp)
    00002c6b: 	movd	%xmm4, %r13d
.Ltmp2583:
    00002c70: 	movq	-0x58(%rbp), %rdx
    00002c74: 	movq	-0x60(%rbp), %rsi
    00002c78: 	movq	-0x180(%rbp), %rdi
    00002c7f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11391
    00002c84: 	movq	%rax, %rdi
    00002c87: 	movl	$0x10, %edx
    00002c8c: 	leaq	DATAat0x493d4(%rip), %rsi
    00002c93: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11411
.Ltmp2586:
    00002c98: 	movq	-0x180(%rbp), %r14
    00002c9f: 	movl	$0x4, %edx
    00002ca4: 	leaq	DATAat0x491b6(%rip), %rsi
    00002cab: 	movq	%r14, %rdi
    00002cae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11438
    00002cb3: 	movl	%r15d, %esi
    00002cb6: 	movq	%r14, %rdi
    00002cb9: 	callq	_ZNSolsEi@PLT # Offset: 11449
    00002cbe: 	movq	%rax, %rdi
    00002cc1: 	movl	$0xb, %edx
    00002cc6: 	leaq	DATAat0x491bb(%rip), %rsi
    00002ccd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11469
    00002cd2: 	movl	$0xa, %edx
    00002cd7: 	leaq	DATAat0x491c7(%rip), %rsi
    00002cde: 	movq	%r14, %rdi
    00002ce1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11489
    00002ce6: 	pxor	%xmm0, %xmm0
    00002cea: 	movq	%r14, %rdi
    00002ced: 	cvtss2sd	-0x138(%rbp), %xmm0
    00002cf5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11509
    00002cfa: 	movl	$0x7, %edx
    00002cff: 	leaq	DATAat0x491d2(%rip), %rsi
    00002d06: 	movq	%rax, %rdi
    00002d09: 	movq	%rax, %r12
    00002d0c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11532
    00002d11: 	pxor	%xmm0, %xmm0
    00002d15: 	movq	%r12, %rdi
    00002d18: 	cvtss2sd	-0x130(%rbp), %xmm0
    00002d20: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11552
    00002d25: 	movl	$0x10, %edx
    00002d2a: 	leaq	DATAat0x491da(%rip), %rsi
    00002d31: 	movq	%rax, %rdi
    00002d34: 	movq	%rax, %r12
    00002d37: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11575
    00002d3c: 	movd	%r13d, %xmm4
    00002d41: 	pxor	%xmm0, %xmm0
    00002d45: 	movq	%r12, %rdi
    00002d48: 	cvtss2sd	%xmm4, %xmm0
    00002d4c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11596
    00002d51: 	movl	$0x8, %edx
    00002d56: 	leaq	DATAat0x491eb(%rip), %rsi
    00002d5d: 	movq	%rax, %rdi
    00002d60: 	movq	%rax, %r12
    00002d63: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11619
    00002d68: 	movsd	-0x170(%rbp), %xmm0
    00002d70: 	movq	%r12, %rdi
    00002d73: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11635
    00002d78: 	movq	%rax, %rdi
    00002d7b: 	movl	$0x2, %edx
    00002d80: 	leaq	DATAat0x491f4(%rip), %rsi
    00002d87: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11655
    00002d8c: 	movl	-0x178(%rbp), %eax
    00002d92: 	movq	-0x60(%rbp), %rdi
    00002d96: 	movl	%eax, iterations(%rip)
    00002d9c: 	cmpq	-0x148(%rbp), %rdi
    00002da3: 	je	.Ltmp2573 # Offset: 11683
    00002da5: 	movq	-0x50(%rbp), %rax
    00002da9: 	leaq	0x1(%rax), %rsi
    00002dad: 	callq	_ZdlPvm@PLT # Offset: 11693
.Ltmp2573:
    00002db2: 	movq	-0x158(%rbp), %rsi
    00002db9: 	leaq	DATAat0x49306(%rip), %rdx
    00002dc0: 	movq	%rbx, %rdi
    00002dc3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11715
    00002dc8: 	movq	-0x140(%rbp), %r14
    00002dcf: 	movl	$0xfa, %edx
    00002dd4: 	movl	$0x12c, %esi
    00002dd9: 	movaps	DATAat0x494a0(%rip), %xmm3
    00002de0: 	movq	-0x188(%rbp), %rcx
    00002de7: 	movq	%r14, %rdi
    00002dea: 	movaps	%xmm3, -0xf0(%rbp)
    00002df1: 	callq	_Z29laplace_initial_condition_setIfET_PS0_iiPKS0_ # Offset: 11761
    00002df6: 	movq	-0x150(%rbp), %rdi
    00002dfd: 	movl	$0x493e0, %edx
    00002e02: 	movq	%r14, %rsi
    00002e05: 	movss	%xmm0, -0x178(%rbp)
    00002e0d: 	callq	memcpy@PLT # Offset: 11789
    00002e12: 	movl	iterations(%rip), %eax
    00002e18: 	movl	$0x2710, iterations(%rip)
    00002e22: 	movl	%eax, -0x188(%rbp)
    00002e28: 	callq	clock@PLT # Offset: 11816
    00002e2d: 	movl	iterations(%rip), %r12d
    00002e34: 	movq	%rax, start_time(%rip)
    00002e3b: 	testl	%r12d, %r12d
    00002e3e: 	jle	.Ltmp2574 # Offset: 11838
    00002e44: 	movq	-0x140(%rbp), %rax
    00002e4b: 	movq	-0x150(%rbp), %r15
    00002e52: 	xorl	%r14d, %r14d
    00002e55: 	pxor	%xmm5, %xmm5
    00002e59: 	movss	DATAat0x49420(%rip), %xmm3
    00002e61: 	movaps	DATAat0x494b0(%rip), %xmm2
    00002e68: 	movq	%rax, -0x138(%rbp)
    00002e6f: 	movss	DATAat0x49430(%rip), %xmm4
    00002e77: 	movq	%rax, %r13
    00002e7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2582:
    00002e80: 	movq	-0x138(%rbp), %r11
    00002e87: 	leaq	0x3e8(%r13), %rdi
    00002e8e: 	movl	$0x1, %esi
    00002e93: 	leaq	0x48ffc(%r15), %rcx
    00002e9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2576:
    00002ea0: 	addl	$0x1, %esi
    00002ea3: 	leaq	-0x48c10(%rcx), %rdx
    00002eaa: 	movq	%rdi, %rax
.Ltmp2575:
    00002ead: 	movss	0x8(%rax), %xmm0
    00002eb2: 	movss	-0x3e4(%rax), %xmm1
    00002eba: 	addq	$0x3e8, %rdx
    00002ec1: 	addq	$0x3e8, %rax
    00002ec7: 	addss	-0x3e8(%rax), %xmm1
    00002ecf: 	movss	-0x3e8(%rdx), %xmm6
    00002ed7: 	addss	%xmm1, %xmm0
    00002edb: 	addss	0x4(%rax), %xmm0
    00002ee0: 	addss	-0x120(%rbp), %xmm0
    00002ee8: 	mulss	%xmm3, %xmm0
    00002eec: 	subss	%xmm6, %xmm0
    00002ef0: 	mulss	%xmm4, %xmm0
    00002ef4: 	addss	%xmm6, %xmm0
    00002ef8: 	movss	%xmm0, -0x3e8(%rdx)
    00002f00: 	cmpq	%rdx, %rcx
    00002f03: 	jne	.Ltmp2575 # Offset: 12035
    00002f05: 	addq	$0x4, %rdi
    00002f09: 	addq	$0x4, %rcx
    00002f0d: 	cmpl	$0xf9, %esi
    00002f13: 	jne	.Ltmp2576 # Offset: 12051
    00002f15: 	movss	-0x120(%rbp), %xmm6
    00002f1d: 	movq	%r11, %rdi
    00002f20: 	xorl	%eax, %eax
    00002f22: 	movss	%xmm6, -0x130(%rbp)
    00002f2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2577:
    00002f30: 	movups	(%r15,%rax), %xmm6
    00002f35: 	movups	(%r13,%rax), %xmm1
    00002f3b: 	addq	$0x10, %rax
    00002f3f: 	subps	%xmm6, %xmm1
    00002f42: 	movaps	%xmm1, %xmm0
    00002f45: 	movaps	%xmm1, %xmm6
    00002f48: 	cmpltps	%xmm5, %xmm0
    00002f4c: 	xorps	%xmm2, %xmm6
    00002f4f: 	andps	%xmm0, %xmm6
    00002f52: 	andnps	%xmm1, %xmm0
    00002f55: 	movss	-0x130(%rbp), %xmm1
    00002f5d: 	orps	%xmm6, %xmm0
    00002f60: 	addss	%xmm0, %xmm1
    00002f64: 	movaps	%xmm0, %xmm6
    00002f67: 	shufps	$0x55, %xmm0, %xmm6
    00002f6b: 	addss	%xmm1, %xmm6
    00002f6f: 	movaps	%xmm0, %xmm1
    00002f72: 	unpckhps	%xmm0, %xmm1
    00002f75: 	shufps	$0xff, %xmm0, %xmm0
    00002f79: 	addss	%xmm6, %xmm1
    00002f7d: 	addss	%xmm0, %xmm1
    00002f81: 	movss	%xmm1, -0x130(%rbp)
    00002f89: 	cmpq	$0x493e0, %rax
    00002f8f: 	jne	.Ltmp2577 # Offset: 12175
    00002f91: 	movq	%rdi, -0x138(%rbp)
    00002f98: 	movl	$0x124f8, %edx
    00002f9d: 	movq	%r15, %rsi
    00002fa0: 	movq	%r13, %rdi
    00002fa3: 	movaps	%xmm2, -0x170(%rbp)
    00002faa: 	movss	%xmm3, -0x140(%rbp)
    00002fb2: 	callq	_Z14max_differenceIfET_PKS0_S2_m # Offset: 12210
    00002fb7: 	cmpl	$0x1, %r14d
    00002fbb: 	pxor	%xmm5, %xmm5
    00002fbf: 	movss	-0x140(%rbp), %xmm3
    00002fc7: 	movss	DATAat0x49430(%rip), %xmm4
    00002fcf: 	movaps	-0x170(%rbp), %xmm2
    00002fd6: 	movss	%xmm0, -0x160(%rbp)
    00002fde: 	jle	.Ltmp2578 # Offset: 12254
    00002fe0: 	movss	DATAat0x49548(%rip), %xmm7
    00002fe8: 	movss	-0x130(%rbp), %xmm6
    00002ff0: 	comiss	%xmm6, %xmm7
    00002ff3: 	ja	.Ltmp2579 # Offset: 12275
    00002ff9: 	ucomiss	%xmm6, %xmm6
    00002ffc: 	jp	.Ltmp2580 # Offset: 12284
    00003002: 	movss	DATAat0x4954c(%rip), %xmm6
    0000300a: 	comiss	%xmm0, %xmm6
    0000300d: 	ja	.Ltmp2579 # Offset: 12301
    00003013: 	ucomiss	%xmm0, %xmm0
    00003016: 	jp	.Ltmp2580 # Offset: 12310
.Ltmp2578:
    0000301c: 	addl	$0x1, %r14d
    00003020: 	movq	%r15, %rax
    00003023: 	movq	%r13, %r15
    00003026: 	cmpl	%r14d, %r12d
    00003029: 	je	.Ltmp2581 # Offset: 12329
    0000302f: 	movq	%rax, %r13
    00003032: 	jmp	.Ltmp2582 # Offset: 12338
.Ltmp2563:
    00003037: 	movq	%rdi, -0x140(%rbp)
    0000303e: 	movl	%r14d, %r15d
    00003041: 	movq	%r13, %r12
.Ltmp2616:
    00003044: 	callq	clock@PLT # Offset: 12356
    00003049: 	movss	-0x138(%rbp), %xmm4
    00003051: 	pxor	%xmm0, %xmm0
    00003055: 	movss	-0x160(%rbp), %xmm3
    0000305d: 	movq	%rax, end_time(%rip)
    00003064: 	subss	0x24be4(%r12), %xmm3
    0000306e: 	subq	start_time(%rip), %rax
    00003075: 	ucomiss	%xmm4, %xmm4
    00003078: 	cvtsi2sd	%rax, %xmm0
    0000307d: 	divsd	DATAat0x49520(%rip), %xmm0
    00003085: 	movsd	%xmm0, -0x170(%rbp)
    0000308d: 	movd	%xmm3, %r13d
    00003092: 	jp	.Ltmp2583 # Offset: 12434
    00003098: 	movss	-0x130(%rbp), %xmm4
    000030a0: 	ucomiss	%xmm4, %xmm4
    000030a3: 	jp	.Ltmp2583 # Offset: 12451
    000030a9: 	cmpl	iterations(%rip), %r15d
    000030b0: 	movq	-0x58(%rbp), %rdx
    000030b4: 	movq	-0x60(%rbp), %rsi
    000030b8: 	jl	.Ltmp2584 # Offset: 12472
    000030ba: 	movss	-0x138(%rbp), %xmm3
    000030c2: 	comiss	DATAat0x49548(%rip), %xmm3
    000030c9: 	jbe	.Ltmp2584 # Offset: 12489
    000030cb: 	comiss	DATAat0x4954c(%rip), %xmm4
    000030d2: 	ja	.Ltmp2585 # Offset: 12498
.Ltmp2584:
    000030d8: 	movq	-0x180(%rbp), %rdi
    000030df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12511
    000030e4: 	movq	%rax, %rdi
    000030e7: 	movl	$0xa, %edx
    000030ec: 	leaq	DATAat0x491ab(%rip), %rsi
    000030f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12531
    000030f8: 	jmp	.Ltmp2586 # Offset: 12536
.Ltmp2581:
    000030fd: 	movq	-0x138(%rbp), %rax
    00003104: 	movq	%rax, -0x140(%rbp)
.Ltmp2618:
    0000310b: 	callq	clock@PLT # Offset: 12555
    00003110: 	movss	-0x130(%rbp), %xmm4
    00003118: 	pxor	%xmm0, %xmm0
    0000311c: 	movss	-0x178(%rbp), %xmm2
    00003124: 	subss	0x24be4(%r13), %xmm2
    0000312d: 	movq	%rax, end_time(%rip)
    00003134: 	subq	start_time(%rip), %rax
    0000313b: 	ucomiss	%xmm4, %xmm4
    0000313e: 	cvtsi2sd	%rax, %xmm0
    00003143: 	divsd	DATAat0x49520(%rip), %xmm0
    0000314b: 	movsd	%xmm0, -0x138(%rbp)
    00003153: 	movd	%xmm2, %r15d
    00003158: 	jp	.Ltmp2587 # Offset: 12632
    0000315e: 	movss	-0x160(%rbp), %xmm4
    00003166: 	ucomiss	%xmm4, %xmm4
    00003169: 	jp	.Ltmp2587 # Offset: 12649
    0000316f: 	cmpl	iterations(%rip), %r12d
    00003176: 	movq	-0x58(%rbp), %rdx
    0000317a: 	movq	-0x60(%rbp), %rsi
    0000317e: 	jl	.Ltmp2588 # Offset: 12670
    00003180: 	movss	-0x130(%rbp), %xmm3
    00003188: 	comiss	DATAat0x49548(%rip), %xmm3
    0000318f: 	jbe	.Ltmp2588 # Offset: 12687
    00003191: 	comiss	DATAat0x4954c(%rip), %xmm4
    00003198: 	ja	.Ltmp2589 # Offset: 12696
.Ltmp2588:
    0000319e: 	movq	-0x180(%rbp), %rdi
    000031a5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12709
    000031aa: 	movq	%rax, %rdi
    000031ad: 	movl	$0xa, %edx
    000031b2: 	leaq	DATAat0x491ab(%rip), %rsi
    000031b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12729
.Ltmp2602:
    000031be: 	movq	-0x180(%rbp), %r14
    000031c5: 	movl	$0x4, %edx
    000031ca: 	leaq	DATAat0x491b6(%rip), %rsi
    000031d1: 	movq	%r14, %rdi
    000031d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12756
    000031d9: 	movl	%r12d, %esi
    000031dc: 	movq	%r14, %rdi
    000031df: 	callq	_ZNSolsEi@PLT # Offset: 12767
    000031e4: 	movq	%rax, %rdi
    000031e7: 	movl	$0xb, %edx
    000031ec: 	leaq	DATAat0x491bb(%rip), %rsi
    000031f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12787
    000031f8: 	movl	$0xa, %edx
    000031fd: 	leaq	DATAat0x491c7(%rip), %rsi
    00003204: 	movq	%r14, %rdi
    00003207: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12807
    0000320c: 	pxor	%xmm0, %xmm0
    00003210: 	movq	%r14, %rdi
    00003213: 	cvtss2sd	-0x130(%rbp), %xmm0
    0000321b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12827
    00003220: 	movl	$0x7, %edx
    00003225: 	leaq	DATAat0x491d2(%rip), %rsi
    0000322c: 	movq	%rax, %rdi
    0000322f: 	movq	%rax, %r12
    00003232: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12850
    00003237: 	pxor	%xmm0, %xmm0
    0000323b: 	movq	%r12, %rdi
    0000323e: 	cvtss2sd	-0x160(%rbp), %xmm0
    00003246: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12870
    0000324b: 	movl	$0x10, %edx
    00003250: 	leaq	DATAat0x491da(%rip), %rsi
    00003257: 	movq	%rax, %rdi
    0000325a: 	movq	%rax, %r12
    0000325d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12893
    00003262: 	movd	%r15d, %xmm4
    00003267: 	pxor	%xmm0, %xmm0
    0000326b: 	movq	%r12, %rdi
    0000326e: 	cvtss2sd	%xmm4, %xmm0
    00003272: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12914
    00003277: 	movl	$0x8, %edx
    0000327c: 	leaq	DATAat0x491eb(%rip), %rsi
    00003283: 	movq	%rax, %rdi
    00003286: 	movq	%rax, %r12
    00003289: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12937
    0000328e: 	movsd	-0x138(%rbp), %xmm0
    00003296: 	movq	%r12, %rdi
    00003299: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12953
    0000329e: 	movq	%rax, %rdi
    000032a1: 	movl	$0x2, %edx
    000032a6: 	leaq	DATAat0x491f4(%rip), %rsi
    000032ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12973
    000032b2: 	movl	-0x188(%rbp), %eax
    000032b8: 	movq	-0x60(%rbp), %rdi
    000032bc: 	movl	%eax, iterations(%rip)
    000032c2: 	cmpq	-0x148(%rbp), %rdi
    000032c9: 	je	.Ltmp2590 # Offset: 13001
    000032cb: 	movq	-0x50(%rbp), %rax
    000032cf: 	leaq	0x1(%rax), %rsi
    000032d3: 	callq	_ZdlPvm@PLT # Offset: 13011
.Ltmp2590:
    000032d8: 	movq	-0x158(%rbp), %rsi
    000032df: 	leaq	DATAat0x4931d(%rip), %rdx
    000032e6: 	movq	%rbx, %rdi
    000032e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13033
    000032ee: 	subq	$0x8, %rsp
    000032f2: 	movq	%rbx, %r9
    000032f5: 	movl	$0xfa, %ecx
    000032fa: 	movl	$0x12c, %edx
    000032ff: 	pushq	$0x1
    00003301: 	movq	-0x150(%rbp), %rsi
    00003308: 	movl	$0xfa, %r8d
    0000330e: 	movq	-0x140(%rbp), %rdi
    00003315: 	callq	_Z20convergenceLaplace2DIff21jacobi_sor2D_reversedIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13077
    0000331a: 	popq	%r13
    0000331c: 	movq	-0x60(%rbp), %rdi
    00003320: 	popq	%r14
    00003322: 	cmpq	-0x148(%rbp), %rdi
    00003329: 	je	.Ltmp2591 # Offset: 13097
    0000332b: 	movq	-0x50(%rbp), %rax
    0000332f: 	leaq	0x1(%rax), %rsi
    00003333: 	callq	_ZdlPvm@PLT # Offset: 13107
.Ltmp2591:
    00003338: 	movq	-0x158(%rbp), %rsi
    0000333f: 	leaq	DATAat0x49335(%rip), %rdx
    00003346: 	movq	%rbx, %rdi
    00003349: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13129
    0000334e: 	subq	$0x8, %rsp
    00003352: 	movq	%rbx, %r9
    00003355: 	movl	$0xfa, %ecx
    0000335a: 	movl	$0x12c, %edx
    0000335f: 	pushq	$0x1
    00003361: 	movq	-0x150(%rbp), %rsi
    00003368: 	movl	$0xfa, %r8d
    0000336e: 	movq	-0x140(%rbp), %rdi
    00003375: 	callq	_Z20convergenceLaplace2DIff22jacobi_sor2D_reversedXIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13173
    0000337a: 	popq	%r11
    0000337c: 	movq	-0x60(%rbp), %rdi
    00003380: 	popq	%r12
    00003382: 	cmpq	-0x148(%rbp), %rdi
    00003389: 	je	.Ltmp2592 # Offset: 13193
    0000338b: 	movq	-0x50(%rbp), %rax
    0000338f: 	leaq	0x1(%rax), %rsi
    00003393: 	callq	_ZdlPvm@PLT # Offset: 13203
.Ltmp2592:
    00003398: 	movq	-0x158(%rbp), %rsi
    0000339f: 	leaq	DATAat0x4934e(%rip), %rdx
    000033a6: 	movq	%rbx, %rdi
    000033a9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13225
    000033ae: 	subq	$0x8, %rsp
    000033b2: 	movq	%rbx, %r9
    000033b5: 	movl	$0xfa, %ecx
    000033ba: 	movl	$0x12c, %edx
    000033bf: 	pushq	$0x1
    000033c1: 	movq	-0x150(%rbp), %rsi
    000033c8: 	movl	$0xfa, %r8d
    000033ce: 	movq	-0x140(%rbp), %rdi
    000033d5: 	callq	_Z20convergenceLaplace2DIff22jacobi_sor2D_reversedYIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13269
    000033da: 	popq	%r9
    000033dc: 	movq	-0x60(%rbp), %rdi
    000033e0: 	popq	%r10
    000033e2: 	cmpq	-0x148(%rbp), %rdi
    000033e9: 	je	.Ltmp2593 # Offset: 13289
    000033eb: 	movq	-0x50(%rbp), %rax
    000033ef: 	leaq	0x1(%rax), %rsi
    000033f3: 	callq	_ZdlPvm@PLT # Offset: 13299
.Ltmp2593:
    000033f8: 	movq	-0x158(%rbp), %rsi
    000033ff: 	leaq	DATAat0x49367(%rip), %rdx
    00003406: 	movq	%rbx, %rdi
    00003409: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13321
    0000340e: 	subq	$0x8, %rsp
    00003412: 	movq	%rbx, %r9
    00003415: 	movl	$0xfa, %ecx
    0000341a: 	movl	$0x12c, %edx
    0000341f: 	pushq	$0x1
    00003421: 	movq	-0x150(%rbp), %rsi
    00003428: 	movl	$0xfa, %r8d
    0000342e: 	movq	-0x140(%rbp), %rdi
    00003435: 	callq	_Z20convergenceLaplace2DIff21jacobi_sor2D_unrolledIffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13365
    0000343a: 	popq	%rdi
    0000343b: 	movq	-0x60(%rbp), %rdi
    0000343f: 	popq	%r8
    00003441: 	cmpq	-0x148(%rbp), %rdi
    00003448: 	je	.Ltmp2594 # Offset: 13384
    0000344a: 	movq	-0x50(%rbp), %rax
    0000344e: 	leaq	0x1(%rax), %rsi
    00003452: 	callq	_ZdlPvm@PLT # Offset: 13394
.Ltmp2594:
    00003457: 	movq	-0x158(%rbp), %rsi
    0000345e: 	leaq	DATAat0x4937f(%rip), %rdx
    00003465: 	movq	%rbx, %rdi
    00003468: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13416
    0000346d: 	subq	$0x8, %rsp
    00003471: 	movq	%rbx, %r9
    00003474: 	movl	$0xfa, %ecx
    00003479: 	movl	$0x12c, %edx
    0000347e: 	pushq	$0x1
    00003480: 	movq	-0x150(%rbp), %rsi
    00003487: 	movl	$0xfa, %r8d
    0000348d: 	movq	-0x140(%rbp), %rdi
    00003494: 	callq	_Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled2IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13460
    00003499: 	popq	%rcx
    0000349a: 	movq	-0x60(%rbp), %rdi
    0000349e: 	popq	%rsi
    0000349f: 	cmpq	-0x148(%rbp), %rdi
    000034a6: 	je	.Ltmp2595 # Offset: 13478
    000034a8: 	movq	-0x50(%rbp), %rax
    000034ac: 	leaq	0x1(%rax), %rsi
    000034b0: 	callq	_ZdlPvm@PLT # Offset: 13488
.Ltmp2595:
    000034b5: 	movq	-0x158(%rbp), %rsi
    000034bc: 	leaq	DATAat0x49398(%rip), %rdx
    000034c3: 	movq	%rbx, %rdi
    000034c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13510
    000034cb: 	subq	$0x8, %rsp
    000034cf: 	movq	%rbx, %r9
    000034d2: 	movl	$0xfa, %ecx
    000034d7: 	movl	$0x12c, %edx
    000034dc: 	pushq	$0x1
    000034de: 	movq	-0x150(%rbp), %rsi
    000034e5: 	movl	$0xfa, %r8d
    000034eb: 	movq	-0x140(%rbp), %rdi
    000034f2: 	callq	_Z20convergenceLaplace2DIff22jacobi_sor2D_unrolled3IffEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13554
    000034f7: 	popq	%rax
    000034f8: 	movq	-0x60(%rbp), %rdi
    000034fc: 	popq	%rdx
    000034fd: 	cmpq	-0x148(%rbp), %rdi
    00003504: 	je	.Ltmp2596 # Offset: 13572
    00003506: 	movq	-0x50(%rbp), %rax
    0000350a: 	leaq	0x1(%rax), %rsi
    0000350e: 	callq	_ZdlPvm@PLT # Offset: 13582
.Ltmp2596:
    00003513: 	movl	-0x18c(%rbp), %eax
    00003519: 	movq	-0x80(%rbp), %rdi
    0000351d: 	movl	%eax, iterations(%rip)
    00003523: 	leaq	-0x70(%rbp), %rax
    00003527: 	cmpq	%rax, %rdi
    0000352a: 	je	.Ltmp2597 # Offset: 13610
    0000352c: 	movq	-0x70(%rbp), %rax
    00003530: 	leaq	0x1(%rax), %rsi
    00003534: 	callq	_ZdlPvm@PLT # Offset: 13620
.Ltmp2597:
    00003539: 	movq	-0xa0(%rbp), %rdi
    00003540: 	leaq	-0x90(%rbp), %rax
    00003547: 	cmpq	%rax, %rdi
    0000354a: 	je	.Ltmp2598 # Offset: 13642
    0000354c: 	movq	-0x90(%rbp), %rax
    00003553: 	leaq	0x1(%rax), %rsi
    00003557: 	callq	_ZdlPvm@PLT # Offset: 13655
.Ltmp2598:
    0000355c: 	movq	-0x150(%rbp), %rdi
    00003563: 	movl	$0x4, %esi
    00003568: 	callq	_ZdlPvm@PLT # Offset: 13672
    0000356d: 	movq	-0x140(%rbp), %rdi
    00003574: 	movl	$0x4, %esi
    00003579: 	callq	_ZdlPvm@PLT # Offset: 13689
    0000357e: 	movq	-0xc0(%rbp), %rdi
    00003585: 	leaq	-0xb0(%rbp), %rax
    0000358c: 	cmpq	%rax, %rdi
    0000358f: 	je	.Ltmp2599 # Offset: 13711
    00003591: 	movq	-0xb0(%rbp), %rax
    00003598: 	leaq	0x1(%rax), %rsi
    0000359c: 	callq	_ZdlPvm@PLT # Offset: 13724
.Ltmp2599:
    000035a1: 	movq	-0xe0(%rbp), %rdi
    000035a8: 	leaq	-0xd0(%rbp), %rax
    000035af: 	cmpq	%rax, %rdi
    000035b2: 	je	.Ltmp2600 # Offset: 13746
    000035b4: 	movq	-0xd0(%rbp), %rax
    000035bb: 	leaq	0x1(%rax), %rsi
    000035bf: 	callq	_ZdlPvm@PLT # Offset: 13759
.Ltmp2600:
    000035c4: 	movq	-0x38(%rbp), %rax
    000035c8: 	subq	%fs:0x28, %rax
    000035d1: 	jne	.Ltmp2601 # Offset: 13777
    000035d7: 	leaq	-0x28(%rbp), %rsp
    000035db: 	popq	%rbx
    000035dc: 	popq	%r12
    000035de: 	popq	%r13
    000035e0: 	popq	%r14
    000035e2: 	popq	%r15
    000035e4: 	popq	%rbp
    000035e5: 	retq # Offset: 13797
.Ltmp2580:
    000035e6: 	movq	-0x138(%rbp), %rax
    000035ed: 	movl	%r14d, %r12d
    000035f0: 	movq	%rax, -0x140(%rbp)
    000035f7: 	callq	clock@PLT # Offset: 13815
    000035fc: 	movss	-0x178(%rbp), %xmm2
    00003604: 	pxor	%xmm0, %xmm0
    00003608: 	subss	0x24be4(%r15), %xmm2
    00003611: 	movq	%rax, end_time(%rip)
    00003618: 	subq	start_time(%rip), %rax
    0000361f: 	cvtsi2sd	%rax, %xmm0
    00003624: 	divsd	DATAat0x49520(%rip), %xmm0
    0000362c: 	movsd	%xmm0, -0x138(%rbp)
    00003634: 	movd	%xmm2, %r15d
.Ltmp2587:
    00003639: 	movq	-0x58(%rbp), %rdx
    0000363d: 	movq	-0x60(%rbp), %rsi
    00003641: 	movq	-0x180(%rbp), %rdi
    00003648: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 13896
    0000364d: 	movq	%rax, %rdi
    00003650: 	leaq	DATAat0x493d4(%rip), %rsi
    00003657: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 13911
    0000365c: 	jmp	.Ltmp2602 # Offset: 13916
.Ltmp2479:
    00003661: 	movq	-0x8(%rdx), %rax
    00003665: 	addq	$0x200, %rax
    0000366b: 	jmp	.Ltmp2603 # Offset: 13931
.Ltmp2474:
    00003670: 	movq	-0x8(%rdx), %rax
    00003674: 	addq	$0x200, %rax
    0000367a: 	jmp	.Ltmp2604 # Offset: 13946
.Ltmp2469:
    0000367f: 	movq	-0x8(%rdx), %rax
    00003683: 	addq	$0x200, %rax
    00003689: 	jmp	.Ltmp2605 # Offset: 13961
.Ltmp2464:
    0000368e: 	movq	-0x8(%rdx), %rax
    00003692: 	addq	$0x200, %rax
    00003698: 	jmp	.Ltmp2606 # Offset: 13976
.Ltmp2454:
    0000369d: 	movq	-0x8(%rdx), %rax
    000036a1: 	addq	$0x200, %rax
    000036a7: 	jmp	.Ltmp2607 # Offset: 13991
.Ltmp2444:
    000036ac: 	movq	-0x8(%rdx), %rax
    000036b0: 	addq	$0x200, %rax
    000036b6: 	jmp	.Ltmp2608 # Offset: 14006
.Ltmp2434:
    000036bb: 	movq	-0x8(%rdx), %rax
    000036bf: 	addq	$0x200, %rax
    000036c5: 	jmp	.Ltmp2609 # Offset: 14021
.Ltmp2489:
    000036ca: 	movq	%rdi, -0x140(%rbp)
    000036d1: 	movl	%r14d, %r15d
    000036d4: 	movq	%r13, %r12
    000036d7: 	jmp	.Ltmp2610 # Offset: 14039
.Ltmp2507:
    000036dc: 	movq	-0x138(%rbp), %rax
    000036e3: 	movq	%rax, -0x140(%rbp)
    000036ea: 	jmp	.Ltmp2611 # Offset: 14058
.Ltmp2553:
    000036ef: 	movq	-0x8(%rdx), %rax
    000036f3: 	addq	$0x200, %rax
    000036f9: 	jmp	.Ltmp2612 # Offset: 14073
.Ltmp2548:
    000036fe: 	movq	-0x8(%rdx), %rax
    00003702: 	addq	$0x200, %rax
    00003708: 	jmp	.Ltmp2613 # Offset: 14088
.Ltmp2543:
    0000370d: 	movq	-0x8(%rdx), %rax
    00003711: 	addq	$0x200, %rax
    00003717: 	jmp	.Ltmp2614 # Offset: 14103
.Ltmp2537:
    0000371c: 	movq	-0x8(%rdx), %rax
    00003720: 	addq	$0x200, %rax
    00003726: 	jmp	.Ltmp2615 # Offset: 14118
.Ltmp2565:
    0000372b: 	movq	%rdi, -0x140(%rbp)
    00003732: 	jmp	.Ltmp2616 # Offset: 14130
.Ltmp2527:
    00003737: 	movq	-0x8(%rdx), %rax
    0000373b: 	addq	$0x200, %rax
    00003741: 	jmp	.Ltmp2617 # Offset: 14145
.Ltmp2579:
    00003746: 	movq	-0x138(%rbp), %rax
    0000374d: 	movl	%r14d, %r12d
    00003750: 	movq	%r15, %r13
    00003753: 	movq	%rax, -0x140(%rbp)
    0000375a: 	jmp	.Ltmp2618 # Offset: 14170
.Ltmp2589:
    0000375f: 	movq	-0x180(%rbp), %rdi
    00003766: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14182
    0000376b: 	movq	%rax, %rdi
    0000376e: 	leaq	DATAat0x49199(%rip), %rsi
    00003775: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14197
    0000377a: 	jmp	.Ltmp2602 # Offset: 14202
.Ltmp2585:
    0000377f: 	movq	-0x180(%rbp), %rdi
    00003786: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14214
    0000378b: 	movq	%rax, %rdi
    0000378e: 	leaq	DATAat0x49199(%rip), %rsi
    00003795: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14229
    0000379a: 	jmp	.Ltmp2586 # Offset: 14234
.Ltmp2571:
    0000379f: 	movq	-0x180(%rbp), %rdi
    000037a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14246
    000037ab: 	movq	%rax, %rdi
    000037ae: 	leaq	DATAat0x49199(%rip), %rsi
    000037b5: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14261
    000037ba: 	jmp	.Ltmp2572 # Offset: 14266
.Ltmp2498:
    000037bf: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000037c6: 	movq	%rax, %rdi
    000037c9: 	movq	%rax, -0x180(%rbp)
    000037d0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14288
    000037d5: 	movq	%rax, %rdi
    000037d8: 	leaq	DATAat0x49199(%rip), %rsi
    000037df: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14303
    000037e4: 	jmp	.Ltmp2509 # Offset: 14308
.Ltmp2574:
    000037e9: 	callq	clock@PLT # Offset: 14313
    000037ee: 	pxor	%xmm0, %xmm0
    000037f2: 	movq	-0x58(%rbp), %rdx
    000037f6: 	xorl	%r12d, %r12d
    000037f9: 	movq	%rax, end_time(%rip)
    00003800: 	subq	start_time(%rip), %rax
    00003807: 	cvtsi2sd	%rax, %xmm0
    0000380c: 	movq	-0x150(%rbp), %rax
    00003813: 	movss	-0x178(%rbp), %xmm4
    0000381b: 	divsd	DATAat0x49520(%rip), %xmm0
    00003823: 	movss	-0x120(%rbp), %xmm3
    0000382b: 	movq	-0x60(%rbp), %rsi
    0000382f: 	movsd	%xmm0, -0x138(%rbp)
    00003837: 	subss	0x24be4(%rax), %xmm4
    0000383f: 	movss	%xmm3, -0x130(%rbp)
    00003847: 	movss	%xmm3, -0x160(%rbp)
    0000384f: 	movd	%xmm4, %r15d
    00003854: 	jmp	.Ltmp2588 # Offset: 14420
.Ltmp2601:
    00003859: 	callq	__stack_chk_fail@PLT # Offset: 14425
    0000385e: 	nop # Size: 2
.Ltmp2481:
    00003860: 	callq	clock@PLT # Offset: 14432
    00003865: 	pxor	%xmm0, %xmm0
    00003869: 	pxor	%xmm4, %xmm4
    0000386d: 	xorl	%r15d, %r15d
    00003870: 	movq	-0x58(%rbp), %rdx
    00003874: 	movq	-0x60(%rbp), %rsi
    00003878: 	movq	%rax, end_time(%rip)
    0000387f: 	subq	start_time(%rip), %rax
    00003886: 	movss	-0x170(%rbp), %xmm3
    0000388e: 	movss	%xmm4, -0x120(%rbp)
    00003896: 	cvtsi2sd	%rax, %xmm0
    0000389b: 	movq	-0x150(%rbp), %rax
    000038a2: 	divsd	DATAat0x49520(%rip), %xmm0
    000038aa: 	movss	%xmm4, -0x138(%rbp)
    000038b2: 	movsd	%xmm0, -0x160(%rbp)
    000038ba: 	subss	0x24be4(%rax), %xmm3
    000038c2: 	movss	%xmm4, -0x130(%rbp)
    000038ca: 	movd	%xmm3, %r13d
    000038cf: 	jmp	.Ltmp2497 # Offset: 14543
.Ltmp2500:
    000038d4: 	callq	clock@PLT # Offset: 14548
    000038d9: 	pxor	%xmm0, %xmm0
    000038dd: 	movq	-0x58(%rbp), %rdx
    000038e1: 	xorl	%r12d, %r12d
    000038e4: 	movq	%rax, end_time(%rip)
    000038eb: 	subq	start_time(%rip), %rax
    000038f2: 	cvtsi2sd	%rax, %xmm0
    000038f7: 	movq	-0x150(%rbp), %rax
    000038fe: 	movss	-0x188(%rbp), %xmm3
    00003906: 	divsd	DATAat0x49520(%rip), %xmm0
    0000390e: 	movss	-0x120(%rbp), %xmm2
    00003916: 	movq	-0x60(%rbp), %rsi
    0000391a: 	movsd	%xmm0, -0x138(%rbp)
    00003922: 	subss	0x24be4(%rax), %xmm3
    0000392a: 	movss	%xmm2, -0x130(%rbp)
    00003932: 	movss	%xmm2, -0x160(%rbp)
    0000393a: 	movd	%xmm3, %r15d
    0000393f: 	jmp	.Ltmp2570 # Offset: 14655
.Ltmp2555:
    00003944: 	callq	clock@PLT # Offset: 14660
    00003949: 	pxor	%xmm0, %xmm0
    0000394d: 	movq	-0x58(%rbp), %rdx
    00003951: 	xorl	%r15d, %r15d
    00003954: 	movq	%rax, end_time(%rip)
    0000395b: 	subq	start_time(%rip), %rax
    00003962: 	cvtsi2sd	%rax, %xmm0
    00003967: 	movq	-0x150(%rbp), %rax
    0000396e: 	movss	-0x160(%rbp), %xmm2
    00003976: 	divsd	DATAat0x49520(%rip), %xmm0
    0000397e: 	movss	-0x120(%rbp), %xmm4
    00003986: 	movq	-0x60(%rbp), %rsi
    0000398a: 	movsd	%xmm0, -0x170(%rbp)
    00003992: 	subss	0x24be4(%rax), %xmm2
    0000399a: 	movss	%xmm4, -0x130(%rbp)
    000039a2: 	movss	%xmm4, -0x138(%rbp)
    000039aa: 	movd	%xmm2, %r13d
    000039af: 	jmp	.Ltmp2584 # Offset: 14767
    000039b4: 	endbr64
.Ltmp2620:
    000039b8: 	movq	%rax, %rbx
    000039bb: 	jmp	.Ltmp2619 # Offset: 14779
    000039c0: 	endbr64
    000039c4: 	jmp	.Ltmp2620 # Offset: 14788
    000039c6: 	endbr64
    000039ca: 	jmp	.Ltmp2620 # Offset: 14794
    000039cc: 	endbr64
    000039d0: 	movq	%rax, %rbx
    000039d3: 	jmp	.Ltmp2621 # Offset: 14803
    000039d5: 	endbr64
    000039d9: 	movq	%rax, %rbx
    000039dc: 	jmp	.Ltmp2622 # Offset: 14812
.Ltmp2621:
    000039de: 	movq	-0x60(%rbp), %rdi
    000039e2: 	leaq	-0x50(%rbp), %rax
    000039e6: 	cmpq	%rax, %rdi
    000039e9: 	jne	.Ltmp2623 # Offset: 14825
.Ltmp2622:
    000039eb: 	movq	-0x150(%rbp), %rdi
    000039f2: 	movl	$0x4, %esi
    000039f7: 	callq	_ZdlPvm@PLT # Offset: 14839
.Ltmp2632:
    000039fc: 	movq	-0x140(%rbp), %rdi
    00003a03: 	movl	$0x4, %esi
    00003a08: 	callq	_ZdlPvm@PLT # Offset: 14856
.Ltmp2633:
    00003a0d: 	movq	-0xc0(%rbp), %rdi
    00003a14: 	leaq	-0xb0(%rbp), %rax
    00003a1b: 	cmpq	%rax, %rdi
    00003a1e: 	je	.Ltmp2624 # Offset: 14878
    00003a20: 	movq	-0xb0(%rbp), %rax
    00003a27: 	leaq	0x1(%rax), %rsi
    00003a2b: 	callq	_ZdlPvm@PLT # Offset: 14891
.Ltmp2624:
    00003a30: 	movq	-0xe0(%rbp), %rdi
    00003a37: 	leaq	-0xd0(%rbp), %rax
    00003a3e: 	cmpq	%rax, %rdi
    00003a41: 	je	.Ltmp2625 # Offset: 14913
    00003a43: 	movq	-0xd0(%rbp), %rax
    00003a4a: 	leaq	0x1(%rax), %rsi
    00003a4e: 	callq	_ZdlPvm@PLT # Offset: 14926
.Ltmp2625:
    00003a53: 	movq	%rbx, %rdi
    00003a56: 	callq	_Unwind_Resume@PLT # Offset: 14934
.Ltmp2619:
    00003a5b: 	movq	-0x60(%rbp), %rdi
    00003a5f: 	cmpq	-0x148(%rbp), %rdi
    00003a66: 	je	.Ltmp2622 # Offset: 14950
.Ltmp2623:
    00003a68: 	movq	-0x50(%rbp), %rax
    00003a6c: 	leaq	0x1(%rax), %rsi
    00003a70: 	callq	_ZdlPvm@PLT # Offset: 14960
    00003a75: 	jmp	.Ltmp2622 # Offset: 14965
    00003a7a: 	endbr64
    00003a7e: 	movq	%rax, %rbx
    00003a81: 	jmp	.Ltmp2624 # Offset: 14977
    00003a83: 	endbr64
    00003a87: 	jmp	.Ltmp2620 # Offset: 14983
    00003a8c: 	endbr64
    00003a90: 	jmp	.Ltmp2620 # Offset: 14992
    00003a95: 	endbr64
.Ltmp2631:
    00003a99: 	movq	%rax, %rbx
    00003a9c: 	jmp	.Ltmp2626 # Offset: 15004
    00003a9e: 	endbr64
.Ltmp2630:
    00003aa2: 	movq	%rax, %rbx
    00003aa5: 	jmp	.Ltmp2627 # Offset: 15013
.Ltmp2626:
    00003aa7: 	movq	-0x60(%rbp), %rdi
    00003aab: 	cmpq	-0x148(%rbp), %rdi
    00003ab2: 	je	.Ltmp2628 # Offset: 15026
    00003ab4: 	movq	-0x50(%rbp), %rax
    00003ab8: 	leaq	0x1(%rax), %rsi
    00003abc: 	callq	_ZdlPvm@PLT # Offset: 15036
.Ltmp2628:
    00003ac1: 	movq	-0x80(%rbp), %rdi
    00003ac5: 	leaq	-0x70(%rbp), %rax
    00003ac9: 	cmpq	%rax, %rdi
    00003acc: 	je	.Ltmp2629 # Offset: 15052
    00003ace: 	movq	-0x70(%rbp), %rax
    00003ad2: 	leaq	0x1(%rax), %rsi
    00003ad6: 	callq	_ZdlPvm@PLT # Offset: 15062
.Ltmp2629:
    00003adb: 	movq	-0xa0(%rbp), %rdi
    00003ae2: 	leaq	-0x90(%rbp), %rax
    00003ae9: 	cmpq	%rax, %rdi
    00003aec: 	je	.Ltmp2622 # Offset: 15084
    00003af2: 	movq	-0x90(%rbp), %rax
    00003af9: 	leaq	0x1(%rax), %rsi
    00003afd: 	callq	_ZdlPvm@PLT # Offset: 15101
    00003b02: 	jmp	.Ltmp2622 # Offset: 15106
.Ltmp2627:
    00003b07: 	movq	-0x60(%rbp), %rdi
    00003b0b: 	cmpq	-0x148(%rbp), %rdi
    00003b12: 	je	.Ltmp2629 # Offset: 15122
    00003b14: 	movq	-0x50(%rbp), %rax
    00003b18: 	leaq	0x1(%rax), %rsi
    00003b1c: 	callq	_ZdlPvm@PLT # Offset: 15132
    00003b21: 	jmp	.Ltmp2629 # Offset: 15137
    00003b23: 	endbr64
    00003b27: 	jmp	.Ltmp2620 # Offset: 15143
    00003b2c: 	endbr64
    00003b30: 	jmp	.Ltmp2620 # Offset: 15152
    00003b35: 	endbr64
    00003b39: 	jmp	.Ltmp2630 # Offset: 15161
    00003b3e: 	endbr64
    00003b42: 	jmp	.Ltmp2630 # Offset: 15170
    00003b47: 	endbr64
    00003b4b: 	jmp	.Ltmp2631 # Offset: 15179
    00003b50: 	endbr64
    00003b54: 	jmp	.Ltmp2631 # Offset: 15188
    00003b59: 	endbr64
    00003b5d: 	jmp	.Ltmp2631 # Offset: 15197
    00003b62: 	endbr64
    00003b66: 	jmp	.Ltmp2631 # Offset: 15206
    00003b6b: 	endbr64
    00003b6f: 	jmp	.Ltmp2631 # Offset: 15215
    00003b74: 	endbr64
    00003b78: 	movq	%rax, %rbx
    00003b7b: 	jmp	.Ltmp2629 # Offset: 15227
    00003b80: 	endbr64
    00003b84: 	movq	%rax, %rbx
    00003b87: 	jmp	.Ltmp2632 # Offset: 15239
    00003b8c: 	endbr64
    00003b90: 	movq	%rax, %rbx
    00003b93: 	jmp	.Ltmp2633 # Offset: 15251
    00003b98: 	endbr64
    00003b9c: 	jmp	.Ltmp2630 # Offset: 15260
    00003ba1: 	endbr64
    00003ba5: 	jmp	.Ltmp2630 # Offset: 15269
    00003baa: 	endbr64
    00003bae: 	jmp	.Ltmp2630 # Offset: 15278
    00003bb3: 	endbr64
    00003bb7: 	jmp	.Ltmp2630 # Offset: 15287
    00003bbc: 	endbr64
    00003bc0: 	jmp	.Ltmp2630 # Offset: 15296
    00003bc5: 	endbr64
    00003bc9: 	movq	%rax, %rbx
    00003bcc: 	jmp	.Ltmp2628 # Offset: 15308
    00003bd1: 	endbr64
    00003bd5: 	jmp	.Ltmp2630 # Offset: 15317
    00003bda: 	endbr64
    00003bde: 	jmp	.Ltmp2630 # Offset: 15326
    00003be3: 	endbr64
    00003be7: 	jmp	.Ltmp2630 # Offset: 15335
    00003bec: 	endbr64
    00003bf0: 	jmp	.Ltmp2630 # Offset: 15344
    00003bf5: 	endbr64
    00003bf9: 	jmp	.Ltmp2630 # Offset: 15353
    00003bfe: 	endbr64
    00003c02: 	jmp	.Ltmp2630 # Offset: 15362
    00003c07: 	endbr64
    00003c0b: 	jmp	.Ltmp2630 # Offset: 15371
    00003c10: 	endbr64
    00003c14: 	jmp	.Ltmp2630 # Offset: 15380
    00003c19: 	endbr64
    00003c1d: 	jmp	.Ltmp2631 # Offset: 15389
    00003c22: 	endbr64
    00003c26: 	jmp	.Ltmp2631 # Offset: 15398
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIffEvv"

Binary Function "_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x3d5b0
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x3d5b0
  Section     : .text
  Orc Section : .local.text._Z29laplace_initial_condition_setIdET_PS0_iiPKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movl	%esi, %r13d
    00000009: 	pushq	%r12
    0000000b: 	imull	%edx, %r13d
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%esi, %ebx
    00000018: 	movslq	%r13d, %rdx
    0000001b: 	subq	$0x18, %rsp
    0000001f: 	movsd	0x8(%rcx), %xmm1
    00000024: 	movsd	(%rcx), %xmm0
    00000028: 	shlq	$0x3, %rdx
    0000002c: 	addsd	%xmm1, %xmm0
    00000030: 	addsd	0x10(%rcx), %xmm0
    00000035: 	addsd	0x18(%rcx), %xmm0
    0000003a: 	mulsd	DATAat0x49400(%rip), %xmm0
    00000042: 	je	.Ltmp2634 # Offset: 66
    00000044: 	xorl	%esi, %esi
    00000046: 	movsd	%xmm0, 0x8(%rsp)
    0000004c: 	callq	memset@PLT # Offset: 76
    00000051: 	movsd	0x8(%r12), %xmm1
    00000058: 	movsd	0x8(%rsp), %xmm0
    0000005e: 	movq	%rax, %rdi
.Ltmp2634:
    00000061: 	testl	%ebx, %ebx
    00000063: 	jle	.Ltmp2635 # Offset: 99
    00000069: 	movslq	%ebp, %rcx
    0000006c: 	movq	%rdi, %rdx
    0000006f: 	xorl	%eax, %eax
    00000071: 	shlq	$0x3, %rcx
    00000075: 	cmpl	$0x1, %ebp
    00000078: 	jne	.Ltmp2636 # Offset: 120
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2637:
    00000080: 	addl	$0x1, %eax
    00000083: 	movsd	%xmm1, (%rdx)
    00000087: 	addq	%rcx, %rdx
    0000008a: 	cmpl	%ebx, %eax
    0000008c: 	jne	.Ltmp2637 # Offset: 140
    0000008e: 	movsd	0x18(%r12), %xmm1
    00000095: 	leaq	-0x8(%rdi,%rcx), %rdx
    0000009a: 	xorl	%eax, %eax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp2638:
    000000a0: 	addl	$0x1, %eax
    000000a3: 	movsd	%xmm1, (%rdx)
    000000a7: 	addq	%rcx, %rdx
    000000aa: 	cmpl	%eax, %ebx
    000000ac: 	jne	.Ltmp2638 # Offset: 172
    000000ae: 	subl	$0x1, %r13d
    000000b2: 	movsd	0x10(%r12), %xmm2
    000000b9: 	movslq	%r13d, %r13
    000000bc: 	leaq	(%rdi,%r13,8), %rcx
.Ltmp2641:
    000000c0: 	movsd	%xmm2, (%rcx)
    000000c4: 	movsd	(%r12), %xmm1
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2645:
    000000d0: 	movsd	%xmm1, (%rdi)
.Ltmp2640:
    000000d4: 	addq	$0x18, %rsp
    000000d8: 	popq	%rbx
    000000d9: 	popq	%rbp
    000000da: 	popq	%r12
    000000dc: 	popq	%r13
    000000de: 	retq # Offset: 222
    000000df: 	nop # Size: 1
.Ltmp2636:
    000000e0: 	addl	$0x1, %eax
    000000e3: 	movsd	%xmm1, (%rdx)
    000000e7: 	addq	%rcx, %rdx
    000000ea: 	cmpl	%eax, %ebx
    000000ec: 	jne	.Ltmp2636 # Offset: 236
    000000ee: 	movsd	0x18(%r12), %xmm1
    000000f5: 	leaq	-0x8(%rdi,%rcx), %rdx
    000000fa: 	xorl	%eax, %eax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2639:
    00000100: 	addl	$0x1, %eax
    00000103: 	movsd	%xmm1, (%rdx)
    00000107: 	addq	%rcx, %rdx
    0000010a: 	cmpl	%eax, %ebx
    0000010c: 	jne	.Ltmp2639 # Offset: 268
.Ltmp2635:
    0000010e: 	subl	%ebp, %r13d
    00000111: 	movsd	0x10(%r12), %xmm2
    00000118: 	movslq	%r13d, %r13
    0000011b: 	leaq	(%rdi,%r13,8), %rcx
    0000011f: 	testl	%ebp, %ebp
    00000121: 	jle	.Ltmp2640 # Offset: 289
    00000123: 	cmpl	$0x1, %ebp
    00000126: 	je	.Ltmp2641 # Offset: 294
    00000128: 	movl	%ebp, %edx
    0000012a: 	movapd	%xmm2, %xmm1
    0000012e: 	movq	%rcx, %rax
    00000131: 	shrl	%edx
    00000133: 	unpcklpd	%xmm1, %xmm1
    00000137: 	shlq	$0x4, %rdx
    0000013b: 	addq	%rcx, %rdx
    0000013e: 	nop # Size: 2
.Ltmp2642:
    00000140: 	movups	%xmm1, (%rax)
    00000143: 	addq	$0x10, %rax
    00000147: 	cmpq	%rdx, %rax
    0000014a: 	jne	.Ltmp2642 # Offset: 330
    0000014c: 	movl	%ebp, %eax
    0000014e: 	andl	$-0x2, %eax
    00000151: 	movl	%eax, %edx
    00000153: 	leaq	(%rcx,%rdx,8), %rdx
    00000157: 	cmpl	%eax, %ebp
    00000159: 	je	.Ltmp2643 # Offset: 345
    0000015b: 	movsd	%xmm2, (%rdx)
.Ltmp2643:
    0000015f: 	movl	%ebp, %edx
    00000161: 	movsd	(%r12), %xmm1
    00000167: 	movq	%rdi, %rax
    0000016a: 	shrl	%edx
    0000016c: 	subl	$0x1, %edx
    0000016f: 	movapd	%xmm1, %xmm2
    00000173: 	shlq	$0x4, %rdx
    00000177: 	unpcklpd	%xmm2, %xmm2
    0000017b: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp2644:
    00000180: 	movups	%xmm2, (%rax)
    00000183: 	addq	$0x10, %rax
    00000187: 	cmpq	%rax, %rdx
    0000018a: 	jne	.Ltmp2644 # Offset: 394
    0000018c: 	movl	%ebp, %eax
    0000018e: 	andl	$-0x2, %eax
    00000191: 	movl	%eax, %edx
    00000193: 	leaq	(%rdi,%rdx,8), %rdi
    00000197: 	cmpl	%ebp, %eax
    00000199: 	jne	.Ltmp2645 # Offset: 409
    0000019f: 	addq	$0x18, %rsp
    000001a3: 	popq	%rbx
    000001a4: 	popq	%rbp
    000001a5: 	popq	%r12
    000001a7: 	popq	%r13
    000001a9: 	retq # Offset: 425
DWARF CFI Instructions:
    <empty>
End of Function "_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_"

Binary Function "_Z20convergenceLaplace2DIdd17jacobi2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x3d760
  Size        : 0x825
  MaxSize     : 0x830
  Offset      : 0x3d760
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd17jacobi2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xe8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0xa0(%rsp)
    00000032: 	movl	%ebp, %edx
    00000034: 	movl	%ecx, 0x28(%rsp)
    00000038: 	leaq	0xb0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x10(%rsp)
    00000045: 	movq	%r9, 0x98(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xd8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movaps	%xmm0, 0xb0(%rsp)
    00000068: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000070: 	movaps	%xmm0, 0xc0(%rsp)
    00000078: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 120
    0000007d: 	movl	%r14d, %edi
    00000080: 	movsd	%xmm0, 0xa8(%rsp)
    00000089: 	imull	%ebp, %edi
    0000008c: 	movl	%edi, 0x64(%rsp)
    00000090: 	testl	%edi, %edi
    00000092: 	jle	.Ltmp2646 # Offset: 146
    00000094: 	movslq	%edi, %rdx
    00000097: 	movq	%rbx, %rsi
    0000009a: 	movq	%r15, %rdi
    0000009d: 	shlq	$0x3, %rdx
    000000a1: 	callq	memmove@PLT # Offset: 161
.Ltmp2646:
    000000a6: 	movl	iterations(%rip), %eax
    000000ac: 	movl	$0x2710, iterations(%rip)
    000000b6: 	movl	%eax, 0xa4(%rsp)
    000000bd: 	callq	clock@PLT # Offset: 189
    000000c2: 	movq	%rax, start_time(%rip)
    000000c9: 	movl	iterations(%rip), %eax
    000000cf: 	movl	%eax, 0x80(%rsp)
    000000d6: 	testl	%eax, %eax
    000000d8: 	jle	.Ltmp2647 # Offset: 216
    000000de: 	movl	0x10(%rsp), %edx
    000000e2: 	movl	0x28(%rsp), %eax
    000000e6: 	movl	$0x0, 0x3c(%rsp)
    000000ee: 	pxor	%xmm1, %xmm1
    000000f2: 	movl	0xa0(%rsp), %r10d
    000000fa: 	movslq	0x64(%rsp), %rcx
    000000ff: 	leal	-0x2(%rax), %edi
    00000102: 	movl	%edx, %eax
    00000104: 	movq	DATAat0x49500(%rip), %xmm6
    0000010c: 	movsd	DATAat0x49400(%rip), %xmm2
    00000114: 	negl	%eax
    00000116: 	leal	-0x2(%r10), %r14d
    0000011a: 	movslq	%edi, %rsi
    0000011d: 	movl	%edi, 0x2c(%rsp)
    00000121: 	cltq
    00000123: 	movl	%r14d, 0x60(%rsp)
    00000128: 	imull	%edx, %r14d
    0000012c: 	movapd	DATAat0x49400(%rip), %xmm4
    00000134: 	shlq	$0x3, %rax
    00000138: 	movq	%rsi, 0x58(%rsp)
    0000013d: 	movapd	%xmm6, %xmm7
    00000141: 	movapd	DATAat0x494f0(%rip), %xmm5
    00000149: 	movq	%rax, 0x20(%rsp)
    0000014e: 	leal	-0x3(%r10), %eax
    00000152: 	imull	%edx, %eax
    00000155: 	movq	%rcx, 0x40(%rsp)
    0000015a: 	movl	%r14d, 0x84(%rsp)
    00000162: 	cltq
    00000164: 	addq	%rsi, %rax
    00000167: 	leaq	-0x8(,%rax,8), %rax
    0000016f: 	movq	%rax, 0x78(%rsp)
    00000174: 	movslq	%r14d, %rax
    00000177: 	addq	%rsi, %rax
    0000017a: 	shlq	$0x3, %rax
    0000017e: 	movq	%rax, 0x70(%rsp)
    00000183: 	leal	-0x1(%r10), %eax
    00000187: 	imull	%edx, %eax
    0000018a: 	cltq
    0000018c: 	addq	%rsi, %rax
    0000018f: 	leaq	-0x8(,%rax,8), %rax
    00000197: 	movq	%rax, 0x88(%rsp)
    0000019f: 	movl	%edi, %eax
    000001a1: 	shrl	%eax
    000001a3: 	subl	$0x1, %eax
    000001a6: 	notq	%rax
    000001a9: 	shlq	$0x4, %rax
    000001ad: 	movq	%rax, 0x30(%rsp)
    000001b2: 	movl	%edi, %eax
    000001b4: 	andl	$-0x2, %edi
    000001b7: 	movl	%edi, 0x38(%rsp)
    000001bb: 	movl	%eax, %edi
    000001bd: 	movq	%rsi, %rax
    000001c0: 	movq	%rcx, %rsi
    000001c3: 	negq	%rax
    000001c6: 	andq	$-0x2, %rsi
    000001ca: 	andl	$0x1, %edi
    000001cd: 	shlq	$0x3, %rax
    000001d1: 	movq	%rsi, 0x68(%rsp)
    000001d6: 	leal	-0x1(%rdi), %r13d
    000001da: 	leal	0x1(%rdi), %r14d
    000001de: 	movq	%rax, 0x48(%rsp)
    000001e3: 	movq	%rcx, %rax
    000001e6: 	shrq	%rax
    000001e9: 	shlq	$0x4, %rax
    000001ed: 	movq	%rax, 0x90(%rsp)
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp2664:
    000001f8: 	movl	0x60(%rsp), %ecx
    000001fc: 	testl	%ecx, %ecx
    000001fe: 	jle	.Ltmp2648 # Offset: 510
    00000204: 	movl	0x2c(%rsp), %edx
    00000208: 	testl	%edx, %edx
    0000020a: 	jle	.Ltmp2648 # Offset: 522
    00000210: 	movq	0x78(%rsp), %rax
    00000215: 	movl	0x84(%rsp), %esi
    0000021c: 	pxor	%xmm3, %xmm3
    00000220: 	leaq	(%rbx,%rax), %r10
    00000224: 	movq	0x70(%rsp), %rax
    00000229: 	leaq	(%r15,%rax), %rbp
    0000022d: 	leaq	(%rbx,%rax), %r9
    00000231: 	movq	0x88(%rsp), %rax
    00000239: 	movq	%rbp, %r12
    0000023c: 	leaq	(%rbx,%rax), %r8
    00000240: 	movl	0x60(%rsp), %eax
    00000244: 	movl	%eax, 0x8(%rsp)
    00000248: 	movq	0x48(%rsp), %rax
    0000024d: 	addq	$0x8, %rax
    00000251: 	movq	%rax, 0x50(%rsp)
    00000256: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2652:
    00000260: 	movl	0x10(%rsp), %eax
    00000264: 	movl	%esi, %ecx
    00000266: 	subl	$0x1, 0x8(%rsp)
    0000026b: 	leaq	-0x10(%r9), %r11
    0000026f: 	subl	%eax, %ecx
    00000271: 	cmpq	%r12, %r10
    00000274: 	leal	(%rax,%rsi), %edx
    00000277: 	setne	%bpl
    0000027b: 	cmpq	%r8, %r12
    0000027e: 	setne	%al
    00000281: 	andl	%ebp, %eax
    00000283: 	cmpl	$0x3, 0x28(%rsp)
    00000288: 	setne	%bpl
    0000028c: 	testb	%bpl, %al
    0000028f: 	je	.Ltmp2649 # Offset: 655
    00000295: 	movq	%r12, %rax
    00000298: 	leaq	-0x8(%r12), %rbp
    0000029d: 	subq	%r11, %rax
    000002a0: 	movq	%rax, 0x18(%rsp)
    000002a5: 	xorl	%eax, %eax
    000002a7: 	cmpq	$0x10, 0x18(%rsp)
    000002ad: 	jbe	.Ltmp2649 # Offset: 685
    000002b3: 	movl	%edx, 0x18(%rsp)
    000002b7: 	movq	0x30(%rsp), %rdx
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp2650:
    000002c0: 	movupd	(%r10,%rax), %xmm0
    000002c6: 	movupd	(%r11,%rax), %xmm8
    000002cc: 	shufpd	$0x1, %xmm0, %xmm0
    000002d1: 	shufpd	$0x1, %xmm8, %xmm8
    000002d7: 	addpd	%xmm8, %xmm0
    000002dc: 	movupd	(%r9,%rax), %xmm8
    000002e2: 	shufpd	$0x1, %xmm8, %xmm8
    000002e8: 	addpd	%xmm8, %xmm0
    000002ed: 	movupd	(%r8,%rax), %xmm8
    000002f3: 	shufpd	$0x1, %xmm8, %xmm8
    000002f9: 	addpd	%xmm8, %xmm0
    000002fe: 	addpd	%xmm3, %xmm0
    00000302: 	mulpd	%xmm4, %xmm0
    00000306: 	shufpd	$0x1, %xmm0, %xmm0
    0000030b: 	movups	%xmm0, (%rbp,%rax)
    00000310: 	subq	$0x10, %rax
    00000314: 	cmpq	%rdx, %rax
    00000317: 	jne	.Ltmp2650 # Offset: 791
    00000319: 	movl	0x18(%rsp), %edx
    0000031d: 	movl	0x38(%rsp), %r11d
    00000322: 	cmpl	%r11d, 0x2c(%rsp)
    00000327: 	je	.Ltmp2651 # Offset: 807
    00000329: 	addl	%edi, %ecx
    0000032b: 	leal	(%rsi,%r13), %eax
    0000032f: 	addl	%edi, %edx
    00000331: 	cltq
    00000333: 	movslq	%ecx, %rcx
    00000336: 	movslq	%edx, %rdx
    00000339: 	movsd	(%rbx,%rcx,8), %xmm0
    0000033e: 	addsd	(%rbx,%rax,8), %xmm0
    00000343: 	leal	(%rsi,%r14), %eax
    00000347: 	cltq
    00000349: 	addsd	(%rbx,%rax,8), %xmm0
    0000034e: 	addsd	(%rbx,%rdx,8), %xmm0
    00000353: 	leal	(%rsi,%rdi), %eax
    00000356: 	cltq
    00000358: 	addsd	%xmm1, %xmm0
    0000035c: 	mulsd	%xmm2, %xmm0
    00000360: 	movsd	%xmm0, (%r15,%rax,8)
.Ltmp2651:
    00000366: 	movq	0x20(%rsp), %rax
    0000036b: 	subl	0x10(%rsp), %esi
    0000036f: 	addq	%rax, %r10
    00000372: 	addq	%rax, %r12
    00000375: 	addq	%rax, %r9
    00000378: 	addq	%rax, %r8
    0000037b: 	movl	0x8(%rsp), %eax
    0000037f: 	testl	%eax, %eax
    00000381: 	jne	.Ltmp2652 # Offset: 897
.Ltmp2648:
    00000387: 	cmpq	$0x0, 0x40(%rsp)
    0000038d: 	je	.Ltmp2653 # Offset: 909
    00000393: 	cmpl	$0x1, 0x64(%rsp)
    00000398: 	je	.Ltmp2654 # Offset: 920
    0000039e: 	movq	0x90(%rsp), %rdx
    000003a6: 	xorl	%eax, %eax
    000003a8: 	movapd	%xmm1, %xmm3
    000003ac: 	pxor	%xmm10, %xmm10
    000003b1: 	nopl	(%rax) # Size: 7
.Ltmp2655:
    000003b8: 	movupd	(%r15,%rax), %xmm0
    000003be: 	movupd	(%rbx,%rax), %xmm8
    000003c4: 	addq	$0x10, %rax
    000003c8: 	subpd	%xmm0, %xmm8
    000003cd: 	movapd	%xmm8, %xmm0
    000003d2: 	movapd	%xmm8, %xmm9
    000003d7: 	cmpltpd	%xmm10, %xmm0
    000003dd: 	xorpd	%xmm5, %xmm9
    000003e2: 	andpd	%xmm0, %xmm9
    000003e7: 	andnpd	%xmm8, %xmm0
    000003ec: 	orpd	%xmm9, %xmm0
    000003f1: 	addsd	%xmm0, %xmm3
    000003f5: 	unpckhpd	%xmm0, %xmm0
    000003f9: 	addsd	%xmm0, %xmm3
    000003fd: 	cmpq	%rax, %rdx
    00000400: 	jne	.Ltmp2655 # Offset: 1024
    00000402: 	movq	0x68(%rsp), %rax
    00000407: 	cmpq	%rax, 0x40(%rsp)
    0000040c: 	je	.Ltmp2656 # Offset: 1036
.Ltmp2667:
    0000040e: 	movsd	(%rbx,%rax,8), %xmm0
    00000413: 	subsd	(%r15,%rax,8), %xmm0
    00000419: 	comisd	%xmm0, %xmm1
    0000041d: 	jbe	.Ltmp2657 # Offset: 1053
    0000041f: 	xorpd	%xmm7, %xmm0
.Ltmp2657:
    00000423: 	addsd	%xmm0, %xmm3
.Ltmp2656:
    00000427: 	movq	0x40(%rsp), %rdx
    0000042c: 	movapd	%xmm1, %xmm8
    00000431: 	xorl	%eax, %eax
    00000433: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2659:
    00000438: 	movsd	(%rbx,%rax,8), %xmm0
    0000043d: 	subsd	(%r15,%rax,8), %xmm0
    00000443: 	comisd	%xmm0, %xmm1
    00000447: 	jbe	.Ltmp2658 # Offset: 1095
    00000449: 	xorpd	%xmm6, %xmm0
.Ltmp2658:
    0000044d: 	maxsd	%xmm8, %xmm0
    00000452: 	addq	$0x1, %rax
    00000456: 	movapd	%xmm0, %xmm8
    0000045b: 	cmpq	%rax, %rdx
    0000045e: 	jne	.Ltmp2659 # Offset: 1118
    00000460: 	movl	0x3c(%rsp), %eax
    00000464: 	cmpl	%eax, 0x120(%rsp)
    0000046b: 	jge	.Ltmp2660 # Offset: 1131
    0000046d: 	movsd	DATAat0x49538(%rip), %xmm0
    00000475: 	comisd	%xmm3, %xmm0
    00000479: 	ja	.Ltmp2661 # Offset: 1145
    0000047f: 	ucomisd	%xmm3, %xmm3
    00000483: 	jp	.Ltmp2662 # Offset: 1155
    00000489: 	movsd	DATAat0x49540(%rip), %xmm0
    00000491: 	comisd	%xmm8, %xmm0
    00000496: 	ja	.Ltmp2663 # Offset: 1174
    0000049c: 	ucomisd	%xmm8, %xmm8
    000004a1: 	jp	.Ltmp2662 # Offset: 1185
.Ltmp2660:
    000004a7: 	addl	$0x1, 0x3c(%rsp)
    000004ac: 	movq	%r15, %rax
    000004af: 	movl	0x3c(%rsp), %esi
    000004b3: 	movq	%rbx, %r15
    000004b6: 	cmpl	0x80(%rsp), %esi
    000004bd: 	je	.Ltmp2661 # Offset: 1213
    000004c3: 	movq	%rax, %rbx
    000004c6: 	jmp	.Ltmp2664 # Offset: 1222
    000004cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2649:
    000004d0: 	movq	0x50(%rsp), %rax
    000004d5: 	movq	0x48(%rsp), %rcx
    000004da: 	leaq	(%r10,%rax), %rbp
    000004de: 	leaq	(%r8,%rax), %r11
    000004e2: 	movq	0x58(%rsp), %rax
    000004e7: 	leaq	(%r9,%rcx), %rdx
    000004eb: 	addq	%r12, %rcx
    000004ee: 	nop # Size: 2
.Ltmp2665:
    000004f0: 	movsd	(%rbp,%rax,8), %xmm0
    000004f6: 	addsd	-0x8(%rdx,%rax,8), %xmm0
    000004fc: 	addsd	0x8(%rdx,%rax,8), %xmm0
    00000502: 	addsd	(%r11,%rax,8), %xmm0
    00000508: 	addsd	%xmm1, %xmm0
    0000050c: 	mulsd	%xmm2, %xmm0
    00000510: 	movsd	%xmm0, (%rcx,%rax,8)
    00000515: 	subq	$0x1, %rax
    00000519: 	testl	%eax, %eax
    0000051b: 	jg	.Ltmp2665 # Offset: 1307
    0000051d: 	jmp	.Ltmp2651 # Offset: 1309
.Ltmp2653:
    00000522: 	movl	0x3c(%rsp), %eax
    00000526: 	movapd	%xmm1, %xmm8
    0000052b: 	cmpl	%eax, 0x120(%rsp)
    00000532: 	jl	.Ltmp2666 # Offset: 1330
    00000534: 	movapd	%xmm1, %xmm3
    00000538: 	jmp	.Ltmp2660 # Offset: 1336
.Ltmp2654:
    0000053d: 	movapd	%xmm1, %xmm3
    00000541: 	xorl	%eax, %eax
    00000543: 	jmp	.Ltmp2667 # Offset: 1347
.Ltmp2666:
    00000548: 	movapd	%xmm8, %xmm3
.Ltmp2661:
    0000054d: 	ucomisd	%xmm3, %xmm3
    00000551: 	setp	%bpl
    00000555: 	ucomisd	%xmm8, %xmm8
    0000055a: 	setp	%al
    0000055d: 	orl	%eax, %ebp
.Ltmp2673:
    0000055f: 	movsd	%xmm8, 0x10(%rsp)
    00000566: 	movsd	%xmm3, 0x8(%rsp)
    0000056c: 	callq	clock@PLT # Offset: 1388
    00000571: 	movl	0xa0(%rsp), %edi
    00000578: 	pxor	%xmm0, %xmm0
    0000057c: 	movsd	0xa8(%rsp), %xmm7
    00000585: 	movq	%rax, end_time(%rip)
    0000058c: 	subq	start_time(%rip), %rax
    00000593: 	cvtsi2sd	%rax, %xmm0
    00000598: 	movl	%edi, %eax
    0000059a: 	divsd	DATAat0x49520(%rip), %xmm0
    000005a2: 	movsd	0x8(%rsp), %xmm3
    000005a8: 	shrl	$0x1f, %eax
    000005ab: 	movsd	0x10(%rsp), %xmm8
    000005b2: 	movq	%xmm0, %rbx
    000005b7: 	addl	%edi, %eax
    000005b9: 	movl	0x28(%rsp), %edi
    000005bd: 	sarl	%eax
    000005bf: 	movl	%edi, %edx
    000005c1: 	imull	%edi, %eax
    000005c4: 	shrl	$0x1f, %edx
    000005c7: 	addl	%edi, %edx
    000005c9: 	sarl	%edx
    000005cb: 	addl	%edx, %eax
    000005cd: 	testb	%bpl, %bpl
    000005d0: 	cltq
    000005d2: 	subsd	(%r15,%rax,8), %xmm7
    000005d8: 	movq	0x98(%rsp), %rax
    000005e0: 	movq	0x8(%rax), %rdx
    000005e4: 	movq	(%rax), %rsi
    000005e7: 	movq	%xmm7, %r12
    000005ec: 	jne	.Ltmp2668 # Offset: 1516
    000005f2: 	movl	0x3c(%rsp), %eax
    000005f6: 	cmpl	%eax, iterations(%rip)
    000005fc: 	jg	.Ltmp2669 # Offset: 1532
    000005fe: 	comisd	DATAat0x49538(%rip), %xmm3
    00000606: 	jbe	.Ltmp2669 # Offset: 1542
    00000608: 	comisd	DATAat0x49540(%rip), %xmm8
    00000611: 	ja	.Ltmp2670 # Offset: 1553
.Ltmp2669:
    00000617: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000061e: 	movsd	%xmm8, 0x10(%rsp)
    00000625: 	movq	%rbp, %rdi
    00000628: 	movsd	%xmm3, 0x8(%rsp)
    0000062e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1582
    00000633: 	movl	$0xa, %edx
    00000638: 	leaq	DATAat0x491ab(%rip), %rsi
    0000063f: 	movq	%rax, %rdi
    00000642: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1602
    00000647: 	movsd	0x10(%rsp), %xmm8
    0000064e: 	movsd	0x8(%rsp), %xmm3
.Ltmp2672:
    00000654: 	movl	$0x4, %edx
    00000659: 	movq	%rbp, %rdi
    0000065c: 	leaq	DATAat0x491b6(%rip), %rsi
    00000663: 	movsd	%xmm8, 0x10(%rsp)
    0000066a: 	movsd	%xmm3, 0x8(%rsp)
    00000670: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1648
    00000675: 	movl	0x3c(%rsp), %esi
    00000679: 	movq	%rbp, %rdi
    0000067c: 	callq	_ZNSolsEi@PLT # Offset: 1660
    00000681: 	movl	$0xb, %edx
    00000686: 	leaq	DATAat0x491bb(%rip), %rsi
    0000068d: 	movq	%rax, %rdi
    00000690: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1680
    00000695: 	movl	$0xa, %edx
    0000069a: 	leaq	DATAat0x491c7(%rip), %rsi
    000006a1: 	movq	%rbp, %rdi
    000006a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1700
    000006a9: 	movsd	0x8(%rsp), %xmm3
    000006af: 	movq	%rbp, %rdi
    000006b2: 	movapd	%xmm3, %xmm0
    000006b6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1718
    000006bb: 	movl	$0x7, %edx
    000006c0: 	leaq	DATAat0x491d2(%rip), %rsi
    000006c7: 	movq	%rax, %rdi
    000006ca: 	movq	%rax, %rbp
    000006cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1741
    000006d2: 	movsd	0x10(%rsp), %xmm8
    000006d9: 	movq	%rbp, %rdi
    000006dc: 	movapd	%xmm8, %xmm0
    000006e1: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1761
    000006e6: 	movl	$0x10, %edx
    000006eb: 	leaq	DATAat0x491da(%rip), %rsi
    000006f2: 	movq	%rax, %rbp
    000006f5: 	movq	%rax, %rdi
    000006f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1784
    000006fd: 	movq	%r12, %xmm0
    00000702: 	movq	%rbp, %rdi
    00000705: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1797
    0000070a: 	movl	$0x8, %edx
    0000070f: 	leaq	DATAat0x491eb(%rip), %rsi
    00000716: 	movq	%rax, %rbp
    00000719: 	movq	%rax, %rdi
    0000071c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1820
    00000721: 	movq	%rbx, %xmm0
    00000726: 	movq	%rbp, %rdi
    00000729: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1833
    0000072e: 	movl	$0x2, %edx
    00000733: 	leaq	DATAat0x491f4(%rip), %rsi
    0000073a: 	movq	%rax, %rdi
    0000073d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1853
    00000742: 	movl	0xa4(%rsp), %eax
    00000749: 	movl	%eax, iterations(%rip)
    0000074f: 	movq	0xd8(%rsp), %rax
    00000757: 	subq	%fs:0x28, %rax
    00000760: 	jne	.Ltmp2671 # Offset: 1888
    00000766: 	addq	$0xe8, %rsp
    0000076d: 	popq	%rbx
    0000076e: 	popq	%rbp
    0000076f: 	popq	%r12
    00000771: 	popq	%r13
    00000773: 	popq	%r14
    00000775: 	popq	%r15
    00000777: 	retq # Offset: 1911
.Ltmp2668:
    00000778: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000077f: 	movq	%rbp, %rdi
    00000782: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1922
    00000787: 	movl	$0x10, %edx
    0000078c: 	leaq	DATAat0x493d4(%rip), %rsi
    00000793: 	movq	%rax, %rdi
    00000796: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1942
    0000079b: 	movsd	0x8(%rsp), %xmm3
    000007a1: 	movsd	0x10(%rsp), %xmm8
    000007a8: 	jmp	.Ltmp2672 # Offset: 1960
.Ltmp2662:
    000007ad: 	movl	$0x1, %ebp
    000007b2: 	jmp	.Ltmp2673 # Offset: 1970
.Ltmp2670:
    000007b7: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000007be: 	movsd	%xmm8, 0x10(%rsp)
    000007c5: 	movq	%rbp, %rdi
    000007c8: 	movsd	%xmm3, 0x8(%rsp)
    000007ce: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1998
    000007d3: 	movl	$0x11, %edx
    000007d8: 	leaq	DATAat0x49199(%rip), %rsi
    000007df: 	movq	%rax, %rdi
    000007e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2018
    000007e7: 	movsd	0x8(%rsp), %xmm3
    000007ed: 	movsd	0x10(%rsp), %xmm8
    000007f4: 	jmp	.Ltmp2672 # Offset: 2036
.Ltmp2663:
    000007f9: 	ucomisd	%xmm8, %xmm8
    000007fe: 	setp	%bpl
    00000802: 	jmp	.Ltmp2673 # Offset: 2050
.Ltmp2647:
    00000807: 	pxor	%xmm8, %xmm8
    0000080c: 	movl	$0x0, 0x3c(%rsp)
    00000814: 	xorl	%ebp, %ebp
    00000816: 	movapd	%xmm8, %xmm3
    0000081b: 	jmp	.Ltmp2673 # Offset: 2075
.Ltmp2671:
    00000820: 	callq	__stack_chk_fail@PLT # Offset: 2080
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd17jacobi2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd18jacobi2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x3df90
  Size        : 0x80c
  MaxSize     : 0x810
  Offset      : 0x3df90
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd18jacobi2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	movl	%r15d, %esi
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xe8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0xa0(%rsp)
    00000032: 	movl	%ebp, %edx
    00000034: 	movl	%ecx, 0x30(%rsp)
    00000038: 	leaq	0xb0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x20(%rsp)
    00000045: 	movq	%r9, 0x98(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xd8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movaps	%xmm0, 0xb0(%rsp)
    00000068: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000070: 	movaps	%xmm0, 0xc0(%rsp)
    00000078: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 120
    0000007d: 	movl	%r15d, %edi
    00000080: 	movsd	%xmm0, 0xa8(%rsp)
    00000089: 	imull	%ebp, %edi
    0000008c: 	movl	%edi, 0x70(%rsp)
    00000090: 	testl	%edi, %edi
    00000092: 	jle	.Ltmp2674 # Offset: 146
    00000094: 	movslq	%edi, %rdx
    00000097: 	movq	%rbx, %rsi
    0000009a: 	movq	%r14, %rdi
    0000009d: 	shlq	$0x3, %rdx
    000000a1: 	callq	memmove@PLT # Offset: 161
.Ltmp2674:
    000000a6: 	movl	iterations(%rip), %eax
    000000ac: 	movl	$0x2710, iterations(%rip)
    000000b6: 	movl	%eax, 0xa4(%rsp)
    000000bd: 	callq	clock@PLT # Offset: 189
    000000c2: 	movq	%rax, start_time(%rip)
    000000c9: 	movl	iterations(%rip), %eax
    000000cf: 	movl	%eax, 0x74(%rsp)
    000000d3: 	testl	%eax, %eax
    000000d5: 	jle	.Ltmp2675 # Offset: 213
    000000db: 	movl	0xa0(%rsp), %eax
    000000e2: 	movslq	0x20(%rsp), %rdx
    000000e7: 	movl	$0x0, 0x44(%rsp)
    000000ef: 	pxor	%xmm1, %xmm1
    000000f3: 	movslq	0x70(%rsp), %rcx
    000000f8: 	movq	DATAat0x49500(%rip), %xmm6
    00000100: 	subl	$0x1, %eax
    00000103: 	leaq	(,%rdx,8), %r10
    0000010b: 	movsd	DATAat0x49400(%rip), %xmm2
    00000113: 	movapd	DATAat0x49400(%rip), %xmm4
    0000011b: 	movl	%eax, 0x14(%rsp)
    0000011f: 	movl	0x30(%rsp), %eax
    00000123: 	movapd	%xmm6, %xmm7
    00000127: 	movq	%rcx, 0x48(%rsp)
    0000012c: 	movapd	DATAat0x494f0(%rip), %xmm5
    00000134: 	leal	-0x2(%rax), %edi
    00000137: 	movq	%r10, 0x18(%rsp)
    0000013c: 	movslq	%edi, %r8
    0000013f: 	movl	%edi, 0x34(%rsp)
    00000143: 	leaq	(,%r8,8), %r9
    0000014b: 	movq	%r8, 0x60(%rsp)
    00000150: 	leaq	-0x8(%r9), %rax
    00000154: 	movq	%r9, 0x68(%rsp)
    00000159: 	movq	%rax, 0x90(%rsp)
    00000161: 	leaq	(%rdx,%r8), %rax
    00000165: 	shlq	$0x3, %rax
    00000169: 	movq	%rax, 0x80(%rsp)
    00000171: 	movl	%edi, %eax
    00000173: 	shrl	%eax
    00000175: 	subl	$0x1, %eax
    00000178: 	notq	%rax
    0000017b: 	shlq	$0x4, %rax
    0000017f: 	movq	%rax, 0x38(%rsp)
    00000184: 	movl	%edi, %eax
    00000186: 	andl	$-0x2, %edi
    00000189: 	movl	%edi, 0x40(%rsp)
    0000018d: 	movl	%eax, %edi
    0000018f: 	movq	%r10, %rax
    00000192: 	negq	%rax
    00000195: 	andl	$0x1, %edi
    00000198: 	subq	%r9, %rax
    0000019b: 	leal	-0x1(%rdi), %r15d
    0000019f: 	leal	0x1(%rdi), %r13d
    000001a3: 	movl	%edi, %esi
    000001a5: 	movq	%rax, 0x58(%rsp)
    000001aa: 	movq	%rdx, %rax
    000001ad: 	movq	%rcx, %rdi
    000001b0: 	subq	%r8, %rax
    000001b3: 	andq	$-0x2, %rdi
    000001b7: 	shlq	$0x3, %rax
    000001bb: 	movq	%rdi, 0x78(%rsp)
    000001c0: 	movq	%rax, 0x50(%rsp)
    000001c5: 	movq	%rcx, %rax
    000001c8: 	shrq	%rax
    000001cb: 	shlq	$0x4, %rax
    000001cf: 	movq	%rax, 0x88(%rsp)
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2692:
    000001e0: 	cmpl	$0x1, 0x14(%rsp)
    000001e5: 	jle	.Ltmp2676 # Offset: 485
    000001eb: 	movl	0x34(%rsp), %eax
    000001ef: 	testl	%eax, %eax
    000001f1: 	jle	.Ltmp2676 # Offset: 497
    000001f7: 	movq	0x18(%rsp), %rcx
    000001fc: 	movq	0x90(%rsp), %rax
    00000204: 	movl	$0x1, (%rsp)
    0000020b: 	pxor	%xmm3, %xmm3
    0000020f: 	leaq	(%rbx,%rax), %r9
    00000213: 	movq	0x80(%rsp), %rax
    0000021b: 	subq	$0x8, %rcx
    0000021f: 	movq	%rcx, 0x28(%rsp)
    00000224: 	leaq	(%r14,%rax), %rbp
    00000228: 	leaq	(%rbx,%rax), %rdi
    0000022c: 	movl	0x20(%rsp), %eax
    00000230: 	movl	%eax, %r8d
    00000233: 	addl	%eax, %eax
    00000235: 	movl	%eax, 0x24(%rsp)
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp2680:
    00000240: 	movl	0x24(%rsp), %eax
    00000244: 	movl	%r8d, %ecx
    00000247: 	subl	0x20(%rsp), %ecx
    0000024b: 	movl	%r8d, %edx
    0000024e: 	addl	$0x1, (%rsp)
    00000252: 	cmpq	%rbp, %r9
    00000255: 	leaq	-0x10(%rdi), %r11
    00000259: 	leal	(%rax,%rcx), %r8d
    0000025d: 	movq	0x28(%rsp), %rax
    00000262: 	setne	%r12b
    00000266: 	cmpl	$0x3, 0x30(%rsp)
    0000026b: 	leaq	(%rax,%rdi), %r10
    0000026f: 	setne	%al
    00000272: 	andl	%r12d, %eax
    00000275: 	cmpq	%r10, %rbp
    00000278: 	setne	%r12b
    0000027c: 	testb	%r12b, %al
    0000027f: 	je	.Ltmp2677 # Offset: 639
    00000285: 	movq	%rbp, %rax
    00000288: 	subq	%r11, %rax
    0000028b: 	cmpq	$0x10, %rax
    0000028f: 	jbe	.Ltmp2677 # Offset: 655
    00000295: 	movl	%edx, 0x8(%rsp)
    00000299: 	movq	0x38(%rsp), %rdx
    0000029e: 	leaq	-0x8(%rbp), %r12
    000002a2: 	xorl	%eax, %eax
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp2678:
    000002a8: 	movupd	(%r9,%rax), %xmm0
    000002ae: 	movupd	(%r11,%rax), %xmm8
    000002b4: 	shufpd	$0x1, %xmm0, %xmm0
    000002b9: 	shufpd	$0x1, %xmm8, %xmm8
    000002bf: 	addpd	%xmm8, %xmm0
    000002c4: 	movupd	(%rdi,%rax), %xmm8
    000002ca: 	shufpd	$0x1, %xmm8, %xmm8
    000002d0: 	addpd	%xmm8, %xmm0
    000002d5: 	movupd	(%r10,%rax), %xmm8
    000002db: 	shufpd	$0x1, %xmm8, %xmm8
    000002e1: 	addpd	%xmm8, %xmm0
    000002e6: 	addpd	%xmm3, %xmm0
    000002ea: 	mulpd	%xmm4, %xmm0
    000002ee: 	shufpd	$0x1, %xmm0, %xmm0
    000002f3: 	movups	%xmm0, (%r12,%rax)
    000002f8: 	subq	$0x10, %rax
    000002fc: 	cmpq	%rdx, %rax
    000002ff: 	jne	.Ltmp2678 # Offset: 767
    00000301: 	movl	0x8(%rsp), %edx
    00000305: 	movl	0x40(%rsp), %r11d
    0000030a: 	cmpl	%r11d, 0x34(%rsp)
    0000030f: 	je	.Ltmp2679 # Offset: 783
    00000311: 	leal	(%rdx,%r15), %eax
    00000315: 	addl	%esi, %ecx
    00000317: 	cltq
    00000319: 	movslq	%ecx, %rcx
    0000031c: 	movsd	(%rbx,%rcx,8), %xmm0
    00000321: 	addsd	(%rbx,%rax,8), %xmm0
    00000326: 	leal	(%rdx,%r13), %eax
    0000032a: 	addl	%esi, %edx
    0000032c: 	cltq
    0000032e: 	movslq	%edx, %rdx
    00000331: 	addsd	(%rbx,%rax,8), %xmm0
    00000336: 	leal	(%r8,%rsi), %eax
    0000033a: 	cltq
    0000033c: 	addsd	(%rbx,%rax,8), %xmm0
    00000341: 	addsd	%xmm1, %xmm0
    00000345: 	mulsd	%xmm2, %xmm0
    00000349: 	movsd	%xmm0, (%r14,%rdx,8)
.Ltmp2679:
    0000034f: 	movq	0x18(%rsp), %rax
    00000354: 	movl	(%rsp), %ecx
    00000357: 	addq	%rax, %r9
    0000035a: 	addq	%rax, %rbp
    0000035d: 	addq	%rax, %rdi
    00000360: 	cmpl	%ecx, 0x14(%rsp)
    00000364: 	jne	.Ltmp2680 # Offset: 868
.Ltmp2676:
    0000036a: 	cmpq	$0x0, 0x48(%rsp)
    00000370: 	je	.Ltmp2681 # Offset: 880
    00000376: 	cmpl	$0x1, 0x70(%rsp)
    0000037b: 	je	.Ltmp2682 # Offset: 891
    00000381: 	movq	0x88(%rsp), %rdx
    00000389: 	xorl	%eax, %eax
    0000038b: 	movapd	%xmm1, %xmm3
    0000038f: 	pxor	%xmm10, %xmm10
    00000394: 	nopl	(%rax) # Size: 4
.Ltmp2683:
    00000398: 	movupd	(%r14,%rax), %xmm0
    0000039e: 	movupd	(%rbx,%rax), %xmm8
    000003a4: 	addq	$0x10, %rax
    000003a8: 	subpd	%xmm0, %xmm8
    000003ad: 	movapd	%xmm8, %xmm0
    000003b2: 	movapd	%xmm8, %xmm9
    000003b7: 	cmpltpd	%xmm10, %xmm0
    000003bd: 	xorpd	%xmm5, %xmm9
    000003c2: 	andpd	%xmm0, %xmm9
    000003c7: 	andnpd	%xmm8, %xmm0
    000003cc: 	orpd	%xmm9, %xmm0
    000003d1: 	addsd	%xmm0, %xmm3
    000003d5: 	unpckhpd	%xmm0, %xmm0
    000003d9: 	addsd	%xmm0, %xmm3
    000003dd: 	cmpq	%rax, %rdx
    000003e0: 	jne	.Ltmp2683 # Offset: 992
    000003e2: 	movq	0x78(%rsp), %rax
    000003e7: 	cmpq	%rax, 0x48(%rsp)
    000003ec: 	je	.Ltmp2684 # Offset: 1004
.Ltmp2695:
    000003ee: 	movsd	(%rbx,%rax,8), %xmm0
    000003f3: 	subsd	(%r14,%rax,8), %xmm0
    000003f9: 	comisd	%xmm0, %xmm1
    000003fd: 	jbe	.Ltmp2685 # Offset: 1021
    000003ff: 	xorpd	%xmm7, %xmm0
.Ltmp2685:
    00000403: 	addsd	%xmm0, %xmm3
.Ltmp2684:
    00000407: 	movq	0x48(%rsp), %rdx
    0000040c: 	movapd	%xmm1, %xmm8
    00000411: 	xorl	%eax, %eax
    00000413: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2687:
    00000418: 	movsd	(%rbx,%rax,8), %xmm0
    0000041d: 	subsd	(%r14,%rax,8), %xmm0
    00000423: 	comisd	%xmm0, %xmm1
    00000427: 	jbe	.Ltmp2686 # Offset: 1063
    00000429: 	xorpd	%xmm6, %xmm0
.Ltmp2686:
    0000042d: 	maxsd	%xmm8, %xmm0
    00000432: 	addq	$0x1, %rax
    00000436: 	movapd	%xmm0, %xmm8
    0000043b: 	cmpq	%rax, %rdx
    0000043e: 	jne	.Ltmp2687 # Offset: 1086
    00000440: 	movl	0x44(%rsp), %eax
    00000444: 	cmpl	%eax, 0x120(%rsp)
    0000044b: 	jge	.Ltmp2688 # Offset: 1099
    0000044d: 	movsd	DATAat0x49538(%rip), %xmm0
    00000455: 	comisd	%xmm3, %xmm0
    00000459: 	ja	.Ltmp2689 # Offset: 1113
    0000045f: 	ucomisd	%xmm3, %xmm3
    00000463: 	jp	.Ltmp2690 # Offset: 1123
    00000469: 	movsd	DATAat0x49540(%rip), %xmm0
    00000471: 	comisd	%xmm8, %xmm0
    00000476: 	ja	.Ltmp2691 # Offset: 1142
    0000047c: 	ucomisd	%xmm8, %xmm8
    00000481: 	jp	.Ltmp2690 # Offset: 1153
.Ltmp2688:
    00000487: 	addl	$0x1, 0x44(%rsp)
    0000048c: 	movq	%r14, %rax
    0000048f: 	movl	0x44(%rsp), %edi
    00000493: 	movq	%rbx, %r14
    00000496: 	cmpl	0x74(%rsp), %edi
    0000049a: 	je	.Ltmp2689 # Offset: 1178
    000004a0: 	movq	%rax, %rbx
    000004a3: 	jmp	.Ltmp2692 # Offset: 1187
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2677:
    000004b0: 	movq	0x58(%rsp), %rax
    000004b5: 	movq	0x50(%rsp), %rcx
    000004ba: 	movq	%rdi, %rdx
    000004bd: 	leaq	(%rdi,%rax), %r11
    000004c1: 	movq	0x68(%rsp), %rax
    000004c6: 	leaq	(%rdi,%rcx), %r10
    000004ca: 	movq	%rbp, %rcx
    000004cd: 	subq	%rax, %rdx
    000004d0: 	subq	%rax, %rcx
    000004d3: 	movq	0x60(%rsp), %rax
    000004d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2693:
    000004e0: 	movsd	(%r11,%rax,8), %xmm0
    000004e6: 	addsd	-0x8(%rdx,%rax,8), %xmm0
    000004ec: 	addsd	0x8(%rdx,%rax,8), %xmm0
    000004f2: 	addsd	(%r10,%rax,8), %xmm0
    000004f8: 	addsd	%xmm1, %xmm0
    000004fc: 	mulsd	%xmm2, %xmm0
    00000500: 	movsd	%xmm0, (%rcx,%rax,8)
    00000505: 	subq	$0x1, %rax
    00000509: 	testl	%eax, %eax
    0000050b: 	jg	.Ltmp2693 # Offset: 1291
    0000050d: 	jmp	.Ltmp2679 # Offset: 1293
.Ltmp2681:
    00000512: 	movl	0x44(%rsp), %eax
    00000516: 	movapd	%xmm1, %xmm8
    0000051b: 	cmpl	%eax, 0x120(%rsp)
    00000522: 	jl	.Ltmp2694 # Offset: 1314
    00000524: 	movapd	%xmm1, %xmm3
    00000528: 	jmp	.Ltmp2688 # Offset: 1320
.Ltmp2682:
    0000052d: 	movapd	%xmm1, %xmm3
    00000531: 	xorl	%eax, %eax
    00000533: 	jmp	.Ltmp2695 # Offset: 1331
.Ltmp2694:
    00000538: 	movapd	%xmm8, %xmm3
.Ltmp2689:
    0000053d: 	ucomisd	%xmm3, %xmm3
    00000541: 	setp	%bpl
    00000545: 	ucomisd	%xmm8, %xmm8
    0000054a: 	setp	%al
    0000054d: 	orl	%eax, %ebp
.Ltmp2701:
    0000054f: 	movsd	%xmm8, 0x8(%rsp)
    00000556: 	movsd	%xmm3, (%rsp)
    0000055b: 	callq	clock@PLT # Offset: 1371
    00000560: 	movl	0xa0(%rsp), %edi
    00000567: 	pxor	%xmm0, %xmm0
    0000056b: 	movsd	0xa8(%rsp), %xmm7
    00000574: 	movq	%rax, end_time(%rip)
    0000057b: 	subq	start_time(%rip), %rax
    00000582: 	cvtsi2sd	%rax, %xmm0
    00000587: 	movl	%edi, %eax
    00000589: 	divsd	DATAat0x49520(%rip), %xmm0
    00000591: 	movsd	(%rsp), %xmm3
    00000596: 	shrl	$0x1f, %eax
    00000599: 	movsd	0x8(%rsp), %xmm8
    000005a0: 	movq	%xmm0, %rbx
    000005a5: 	addl	%edi, %eax
    000005a7: 	movl	0x30(%rsp), %edi
    000005ab: 	sarl	%eax
    000005ad: 	movl	%edi, %edx
    000005af: 	imull	%edi, %eax
    000005b2: 	shrl	$0x1f, %edx
    000005b5: 	addl	%edi, %edx
    000005b7: 	sarl	%edx
    000005b9: 	addl	%edx, %eax
    000005bb: 	testb	%bpl, %bpl
    000005be: 	cltq
    000005c0: 	subsd	(%r14,%rax,8), %xmm7
    000005c6: 	movq	0x98(%rsp), %rax
    000005ce: 	movq	0x8(%rax), %rdx
    000005d2: 	movq	(%rax), %rsi
    000005d5: 	movq	%xmm7, %r12
    000005da: 	jne	.Ltmp2696 # Offset: 1498
    000005e0: 	movl	0x44(%rsp), %eax
    000005e4: 	cmpl	%eax, iterations(%rip)
    000005ea: 	jg	.Ltmp2697 # Offset: 1514
    000005ec: 	comisd	DATAat0x49538(%rip), %xmm3
    000005f4: 	jbe	.Ltmp2697 # Offset: 1524
    000005f6: 	comisd	DATAat0x49540(%rip), %xmm8
    000005ff: 	ja	.Ltmp2698 # Offset: 1535
.Ltmp2697:
    00000605: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000060c: 	movsd	%xmm8, 0x8(%rsp)
    00000613: 	movq	%rbp, %rdi
    00000616: 	movsd	%xmm3, (%rsp)
    0000061b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1563
    00000620: 	movl	$0xa, %edx
    00000625: 	leaq	DATAat0x491ab(%rip), %rsi
    0000062c: 	movq	%rax, %rdi
    0000062f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1583
    00000634: 	movsd	0x8(%rsp), %xmm8
    0000063b: 	movsd	(%rsp), %xmm3
.Ltmp2700:
    00000640: 	movl	$0x4, %edx
    00000645: 	movq	%rbp, %rdi
    00000648: 	leaq	DATAat0x491b6(%rip), %rsi
    0000064f: 	movsd	%xmm8, 0x8(%rsp)
    00000656: 	movsd	%xmm3, (%rsp)
    0000065b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1627
    00000660: 	movl	0x44(%rsp), %esi
    00000664: 	movq	%rbp, %rdi
    00000667: 	callq	_ZNSolsEi@PLT # Offset: 1639
    0000066c: 	movl	$0xb, %edx
    00000671: 	leaq	DATAat0x491bb(%rip), %rsi
    00000678: 	movq	%rax, %rdi
    0000067b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1659
    00000680: 	movl	$0xa, %edx
    00000685: 	leaq	DATAat0x491c7(%rip), %rsi
    0000068c: 	movq	%rbp, %rdi
    0000068f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1679
    00000694: 	movsd	(%rsp), %xmm3
    00000699: 	movq	%rbp, %rdi
    0000069c: 	movapd	%xmm3, %xmm0
    000006a0: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1696
    000006a5: 	movl	$0x7, %edx
    000006aa: 	leaq	DATAat0x491d2(%rip), %rsi
    000006b1: 	movq	%rax, %rdi
    000006b4: 	movq	%rax, %rbp
    000006b7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1719
    000006bc: 	movsd	0x8(%rsp), %xmm8
    000006c3: 	movq	%rbp, %rdi
    000006c6: 	movapd	%xmm8, %xmm0
    000006cb: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1739
    000006d0: 	movl	$0x10, %edx
    000006d5: 	leaq	DATAat0x491da(%rip), %rsi
    000006dc: 	movq	%rax, %rbp
    000006df: 	movq	%rax, %rdi
    000006e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1762
    000006e7: 	movq	%r12, %xmm0
    000006ec: 	movq	%rbp, %rdi
    000006ef: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1775
    000006f4: 	movl	$0x8, %edx
    000006f9: 	leaq	DATAat0x491eb(%rip), %rsi
    00000700: 	movq	%rax, %rbp
    00000703: 	movq	%rax, %rdi
    00000706: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1798
    0000070b: 	movq	%rbx, %xmm0
    00000710: 	movq	%rbp, %rdi
    00000713: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1811
    00000718: 	movl	$0x2, %edx
    0000071d: 	leaq	DATAat0x491f4(%rip), %rsi
    00000724: 	movq	%rax, %rdi
    00000727: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1831
    0000072c: 	movl	0xa4(%rsp), %eax
    00000733: 	movl	%eax, iterations(%rip)
    00000739: 	movq	0xd8(%rsp), %rax
    00000741: 	subq	%fs:0x28, %rax
    0000074a: 	jne	.Ltmp2699 # Offset: 1866
    00000750: 	addq	$0xe8, %rsp
    00000757: 	popq	%rbx
    00000758: 	popq	%rbp
    00000759: 	popq	%r12
    0000075b: 	popq	%r13
    0000075d: 	popq	%r14
    0000075f: 	popq	%r15
    00000761: 	retq # Offset: 1889
.Ltmp2696:
    00000762: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000769: 	movq	%rbp, %rdi
    0000076c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1900
    00000771: 	movl	$0x10, %edx
    00000776: 	leaq	DATAat0x493d4(%rip), %rsi
    0000077d: 	movq	%rax, %rdi
    00000780: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1920
    00000785: 	movsd	(%rsp), %xmm3
    0000078a: 	movsd	0x8(%rsp), %xmm8
    00000791: 	jmp	.Ltmp2700 # Offset: 1937
.Ltmp2690:
    00000796: 	movl	$0x1, %ebp
    0000079b: 	jmp	.Ltmp2701 # Offset: 1947
.Ltmp2698:
    000007a0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000007a7: 	movsd	%xmm8, 0x8(%rsp)
    000007ae: 	movq	%rbp, %rdi
    000007b1: 	movsd	%xmm3, (%rsp)
    000007b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1974
    000007bb: 	movl	$0x11, %edx
    000007c0: 	leaq	DATAat0x49199(%rip), %rsi
    000007c7: 	movq	%rax, %rdi
    000007ca: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1994
    000007cf: 	movsd	(%rsp), %xmm3
    000007d4: 	movsd	0x8(%rsp), %xmm8
    000007db: 	jmp	.Ltmp2700 # Offset: 2011
.Ltmp2691:
    000007e0: 	ucomisd	%xmm8, %xmm8
    000007e5: 	setp	%bpl
    000007e9: 	jmp	.Ltmp2701 # Offset: 2025
.Ltmp2675:
    000007ee: 	pxor	%xmm8, %xmm8
    000007f3: 	movl	$0x0, 0x44(%rsp)
    000007fb: 	xorl	%ebp, %ebp
    000007fd: 	movapd	%xmm8, %xmm3
    00000802: 	jmp	.Ltmp2701 # Offset: 2050
.Ltmp2699:
    00000807: 	callq	__stack_chk_fail@PLT # Offset: 2055
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd18jacobi2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd18jacobi2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x3e7a0
  Size        : 0x878
  MaxSize     : 0x880
  Offset      : 0x3e7a0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd18jacobi2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	imull	%r15d, %ebx
    0000001f: 	subq	$0x108, %rsp
    00000026: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002e: 	movl	%edx, 0xc0(%rsp)
    00000035: 	movl	%r15d, %edx
    00000038: 	movl	%ecx, 0x40(%rsp)
    0000003c: 	leaq	0xd0(%rsp), %rcx
    00000044: 	movl	%r8d, 0x20(%rsp)
    00000049: 	movq	%r9, 0xb8(%rsp)
    00000051: 	movq	%fs:0x28, %rax
    0000005a: 	movq	%rax, 0xf8(%rsp)
    00000062: 	xorl	%eax, %eax
    00000064: 	movaps	%xmm0, 0xd0(%rsp)
    0000006c: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000074: 	movaps	%xmm0, 0xe0(%rsp)
    0000007c: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 124
    00000081: 	movl	%ebx, 0x64(%rsp)
    00000085: 	movsd	%xmm0, 0xc8(%rsp)
    0000008e: 	testl	%ebx, %ebx
    00000090: 	jle	.Ltmp2702 # Offset: 144
    00000092: 	movslq	%ebx, %rdx
    00000095: 	movq	%rbp, %rsi
    00000098: 	movq	%r14, %rdi
    0000009b: 	shlq	$0x3, %rdx
    0000009f: 	callq	memmove@PLT # Offset: 159
.Ltmp2702:
    000000a4: 	movl	iterations(%rip), %eax
    000000aa: 	movl	$0x2710, iterations(%rip)
    000000b4: 	movl	%eax, 0xc4(%rsp)
    000000bb: 	callq	clock@PLT # Offset: 187
    000000c0: 	movq	%rax, start_time(%rip)
    000000c7: 	movl	iterations(%rip), %eax
    000000cd: 	movl	%eax, 0x6c(%rsp)
    000000d1: 	testl	%eax, %eax
    000000d3: 	jle	.Ltmp2703 # Offset: 211
    000000d9: 	movl	0x40(%rsp), %r11d
    000000de: 	movl	0x20(%rsp), %edi
    000000e2: 	movl	$0x0, 0x60(%rsp)
    000000ea: 	pxor	%xmm1, %xmm1
    000000ee: 	movl	0xc0(%rsp), %edx
    000000f5: 	movslq	0x64(%rsp), %rsi
    000000fa: 	leal	-0x1(%r11), %eax
    000000fe: 	movq	DATAat0x49500(%rip), %xmm6
    00000106: 	movapd	DATAat0x49400(%rip), %xmm4
    0000010e: 	leal	-0x2(%rdx), %ecx
    00000111: 	movl	%eax, 0x98(%rsp)
    00000118: 	movl	%edi, %eax
    0000011a: 	movsd	DATAat0x49400(%rip), %xmm2
    00000122: 	negl	%eax
    00000124: 	movl	%ecx, 0x68(%rsp)
    00000128: 	imull	%edi, %ecx
    0000012b: 	movapd	DATAat0x494f0(%rip), %xmm5
    00000133: 	cltq
    00000135: 	movq	%rsi, 0x48(%rsp)
    0000013a: 	movapd	%xmm6, %xmm7
    0000013e: 	leaq	(,%rax,8), %rbx
    00000146: 	leal	-0x3(%rdx), %eax
    00000149: 	subl	$0x1, %edx
    0000014c: 	imull	%edi, %eax
    0000014f: 	movl	%ecx, 0x9c(%rsp)
    00000156: 	imull	%edi, %edx
    00000159: 	cltq
    0000015b: 	leaq	0x10(,%rax,8), %rax
    00000163: 	movslq	%edx, %rdx
    00000166: 	movq	%rax, 0x80(%rsp)
    0000016e: 	movslq	%ecx, %rax
    00000171: 	leaq	0x10(,%rdx,8), %rdi
    00000179: 	movq	%rax, %rdx
    0000017c: 	movq	%rdi, 0xa0(%rsp)
    00000184: 	leaq	0x8(,%rax,8), %rcx
    0000018c: 	leaq	0x10(,%rax,8), %rax
    00000194: 	negq	%rdx
    00000197: 	movq	%rax, 0x90(%rsp)
    0000019f: 	leaq	(,%rdx,8), %rdi
    000001a7: 	movq	%rcx, 0x88(%rsp)
    000001af: 	movq	%rdi, 0xb0(%rsp)
    000001b7: 	leal	-0x2(%r11), %edi
    000001bb: 	movl	%edi, %eax
    000001bd: 	movl	%edi, 0x44(%rsp)
    000001c1: 	shrl	%eax
    000001c3: 	subl	$0x1, %eax
    000001c6: 	addq	$0x1, %rax
    000001ca: 	shlq	$0x4, %rax
    000001ce: 	movq	%rax, 0x38(%rsp)
    000001d3: 	movl	%edi, %eax
    000001d5: 	andl	$-0x2, %edi
    000001d8: 	movl	%edi, %r13d
    000001db: 	movl	%eax, %edi
    000001dd: 	leal	-0x3(%r11), %eax
    000001e1: 	shlq	$0x3, %rax
    000001e5: 	orl	$0x1, %edi
    000001e8: 	leal	0x2(%r13), %r15d
    000001ec: 	movq	%rax, 0xa8(%rsp)
    000001f4: 	movq	%rsi, %rax
    000001f7: 	movl	%edi, %r12d
    000001fa: 	movq	%rsi, %rdi
    000001fd: 	shrq	%rax
    00000200: 	andq	$-0x2, %rdi
    00000204: 	shlq	$0x4, %rax
    00000208: 	movq	%rdi, 0x70(%rsp)
    0000020d: 	movq	%rax, 0x78(%rsp)
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2720:
    00000218: 	movl	0x68(%rsp), %eax
    0000021c: 	testl	%eax, %eax
    0000021e: 	jle	.Ltmp2704 # Offset: 542
    00000224: 	cmpl	$0x1, 0x98(%rsp)
    0000022c: 	jle	.Ltmp2704 # Offset: 556
    00000232: 	movq	0xa0(%rsp), %rsi
    0000023a: 	movl	%eax, 0x1c(%rsp)
    0000023e: 	movq	%r14, %rax
    00000241: 	pxor	%xmm3, %xmm3
    00000245: 	subq	%rbp, %rax
    00000248: 	movq	0x80(%rsp), %rdi
    00000250: 	movq	0xb0(%rsp), %rcx
    00000258: 	addq	%rbp, %rsi
    0000025b: 	movq	%rax, 0x30(%rsp)
    00000260: 	movq	$-0x10, %rax
    00000267: 	movq	%rsi, 0x10(%rsp)
    0000026c: 	movq	0x90(%rsp), %rsi
    00000274: 	addq	%rbp, %rdi
    00000277: 	subq	%rbp, %rax
    0000027a: 	movq	%rdi, 0x8(%rsp)
    0000027f: 	movq	0x88(%rsp), %rdi
    00000287: 	leaq	(%rbp,%rsi), %r8
    0000028c: 	movq	0xa8(%rsp), %rsi
    00000294: 	movq	%rcx, 0x28(%rsp)
    00000299: 	movq	%rax, 0x58(%rsp)
    0000029e: 	addq	%r14, %rdi
    000002a1: 	subq	%r14, %rsi
    000002a4: 	movq	%rsi, 0x50(%rsp)
    000002a9: 	movl	0x9c(%rsp), %esi
.Ltmp2708:
    000002b0: 	movl	0x20(%rsp), %eax
    000002b4: 	movl	%esi, %edx
    000002b6: 	subl	$0x1, 0x1c(%rsp)
    000002bb: 	subl	%eax, %edx
    000002bd: 	cmpq	$0x10, 0x30(%rsp)
    000002c3: 	leal	(%rax,%rsi), %ecx
    000002c6: 	seta	%r9b
    000002ca: 	cmpl	$0x3, 0x40(%rsp)
    000002cf: 	setne	%al
    000002d2: 	andl	%r9d, %eax
    000002d5: 	cmpq	0x8(%rsp), %rdi
    000002da: 	setne	%r9b
    000002de: 	testb	%r9b, %al
    000002e1: 	je	.Ltmp2705 # Offset: 737
    000002e7: 	cmpq	0x10(%rsp), %rdi
    000002ec: 	je	.Ltmp2705 # Offset: 748
    000002f2: 	movq	0x8(%rsp), %rax
    000002f7: 	movl	%edx, 0x24(%rsp)
    000002fb: 	leaq	-0x10(%r8), %r10
    000002ff: 	movq	0x38(%rsp), %rdx
    00000304: 	leaq	-0x8(%rax), %r11
    00000308: 	movq	0x10(%rsp), %rax
    0000030d: 	leaq	-0x8(%rax), %r9
    00000311: 	xorl	%eax, %eax
    00000313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2706:
    00000318: 	movupd	(%r11,%rax), %xmm0
    0000031e: 	movupd	(%r10,%rax), %xmm11
    00000324: 	movupd	(%r8,%rax), %xmm12
    0000032a: 	movupd	(%r9,%rax), %xmm13
    00000330: 	addpd	%xmm11, %xmm0
    00000335: 	addpd	%xmm12, %xmm0
    0000033a: 	addpd	%xmm13, %xmm0
    0000033f: 	addpd	%xmm3, %xmm0
    00000343: 	mulpd	%xmm4, %xmm0
    00000347: 	movups	%xmm0, (%rdi,%rax)
    0000034b: 	addq	$0x10, %rax
    0000034f: 	cmpq	%rax, %rdx
    00000352: 	jne	.Ltmp2706 # Offset: 850
    00000354: 	movl	0x24(%rsp), %edx
    00000358: 	cmpl	%r13d, 0x44(%rsp)
    0000035d: 	je	.Ltmp2707 # Offset: 861
    0000035f: 	addl	%r12d, %edx
    00000362: 	leal	(%rsi,%r13), %eax
    00000366: 	addl	%r12d, %ecx
    00000369: 	cltq
    0000036b: 	movslq	%edx, %rdx
    0000036e: 	movslq	%ecx, %rcx
    00000371: 	movsd	(%rbp,%rdx,8), %xmm0
    00000377: 	addsd	(%rbp,%rax,8), %xmm0
    0000037d: 	leal	(%rsi,%r15), %eax
    00000381: 	cltq
    00000383: 	addsd	(%rbp,%rax,8), %xmm0
    00000389: 	addsd	(%rbp,%rcx,8), %xmm0
    0000038f: 	leal	(%rsi,%r12), %eax
    00000393: 	cltq
    00000395: 	addsd	%xmm1, %xmm0
    00000399: 	mulsd	%xmm2, %xmm0
    0000039d: 	movsd	%xmm0, (%r14,%rax,8)
.Ltmp2707:
    000003a3: 	movl	0x1c(%rsp), %eax
    000003a7: 	addq	%rbx, 0x8(%rsp)
    000003ac: 	addq	%rbx, %rdi
    000003af: 	addq	%rbx, %r8
    000003b2: 	addq	%rbx, 0x10(%rsp)
    000003b7: 	subl	0x20(%rsp), %esi
    000003bb: 	subq	%rbx, 0x28(%rsp)
    000003c0: 	testl	%eax, %eax
    000003c2: 	jne	.Ltmp2708 # Offset: 962
.Ltmp2704:
    000003c8: 	cmpq	$0x0, 0x48(%rsp)
    000003ce: 	je	.Ltmp2709 # Offset: 974
    000003d4: 	cmpl	$0x1, 0x64(%rsp)
    000003d9: 	je	.Ltmp2710 # Offset: 985
    000003df: 	movq	0x78(%rsp), %rdx
    000003e4: 	xorl	%eax, %eax
    000003e6: 	movapd	%xmm1, %xmm3
    000003ea: 	pxor	%xmm10, %xmm10
    000003ef: 	nop # Size: 1
.Ltmp2711:
    000003f0: 	movupd	(%r14,%rax), %xmm0
    000003f6: 	movupd	(%rbp,%rax), %xmm8
    000003fd: 	addq	$0x10, %rax
    00000401: 	subpd	%xmm0, %xmm8
    00000406: 	movapd	%xmm8, %xmm0
    0000040b: 	movapd	%xmm8, %xmm9
    00000410: 	cmpltpd	%xmm10, %xmm0
    00000416: 	xorpd	%xmm5, %xmm9
    0000041b: 	andpd	%xmm0, %xmm9
    00000420: 	andnpd	%xmm8, %xmm0
    00000425: 	orpd	%xmm9, %xmm0
    0000042a: 	addsd	%xmm0, %xmm3
    0000042e: 	unpckhpd	%xmm0, %xmm0
    00000432: 	addsd	%xmm0, %xmm3
    00000436: 	cmpq	%rax, %rdx
    00000439: 	jne	.Ltmp2711 # Offset: 1081
    0000043b: 	movq	0x70(%rsp), %rax
    00000440: 	cmpq	%rax, 0x48(%rsp)
    00000445: 	je	.Ltmp2712 # Offset: 1093
.Ltmp2723:
    00000447: 	movsd	(%rbp,%rax,8), %xmm0
    0000044d: 	subsd	(%r14,%rax,8), %xmm0
    00000453: 	comisd	%xmm0, %xmm1
    00000457: 	jbe	.Ltmp2713 # Offset: 1111
    00000459: 	xorpd	%xmm7, %xmm0
.Ltmp2713:
    0000045d: 	addsd	%xmm0, %xmm3
.Ltmp2712:
    00000461: 	movq	0x48(%rsp), %rdx
    00000466: 	movapd	%xmm1, %xmm8
    0000046b: 	xorl	%eax, %eax
    0000046d: 	nopl	(%rax) # Size: 3
.Ltmp2715:
    00000470: 	movsd	(%rbp,%rax,8), %xmm0
    00000476: 	subsd	(%r14,%rax,8), %xmm0
    0000047c: 	comisd	%xmm0, %xmm1
    00000480: 	jbe	.Ltmp2714 # Offset: 1152
    00000482: 	xorpd	%xmm6, %xmm0
.Ltmp2714:
    00000486: 	maxsd	%xmm8, %xmm0
    0000048b: 	addq	$0x1, %rax
    0000048f: 	movapd	%xmm0, %xmm8
    00000494: 	cmpq	%rax, %rdx
    00000497: 	jne	.Ltmp2715 # Offset: 1175
    00000499: 	movl	0x60(%rsp), %eax
    0000049d: 	cmpl	%eax, 0x140(%rsp)
    000004a4: 	jge	.Ltmp2716 # Offset: 1188
    000004a6: 	movsd	DATAat0x49538(%rip), %xmm0
    000004ae: 	comisd	%xmm3, %xmm0
    000004b2: 	ja	.Ltmp2717 # Offset: 1202
    000004b8: 	ucomisd	%xmm3, %xmm3
    000004bc: 	jp	.Ltmp2718 # Offset: 1212
    000004c2: 	movsd	DATAat0x49540(%rip), %xmm0
    000004ca: 	comisd	%xmm8, %xmm0
    000004cf: 	ja	.Ltmp2719 # Offset: 1231
    000004d5: 	ucomisd	%xmm8, %xmm8
    000004da: 	jp	.Ltmp2718 # Offset: 1242
.Ltmp2716:
    000004e0: 	addl	$0x1, 0x60(%rsp)
    000004e5: 	movq	%r14, %rax
    000004e8: 	movl	0x60(%rsp), %edi
    000004ec: 	movq	%rbp, %r14
    000004ef: 	cmpl	0x6c(%rsp), %edi
    000004f3: 	je	.Ltmp2717 # Offset: 1267
    000004f9: 	movq	%rax, %rbp
    000004fc: 	jmp	.Ltmp2720 # Offset: 1276
    00000501: 	nopl	(%rax) # Size: 7
.Ltmp2705:
    00000508: 	movq	0x58(%rsp), %rcx
    0000050d: 	movq	0x50(%rsp), %rdx
    00000512: 	movq	0x8(%rsp), %r11
    00000517: 	leaq	(%r8,%rcx), %rax
    0000051b: 	leaq	(%rdi,%rdx), %r9
    0000051f: 	movq	%rcx, %rdx
    00000522: 	leaq	(%r11,%rcx), %rcx
    00000526: 	movq	0x10(%rsp), %r11
    0000052b: 	addq	%r11, %rdx
    0000052e: 	movq	0x28(%rsp), %r11
    00000533: 	addq	%r11, %rcx
    00000536: 	addq	%r11, %rdx
    00000539: 	addq	%rbp, %rcx
    0000053c: 	addq	%rbp, %rdx
    0000053f: 	nop # Size: 1
.Ltmp2721:
    00000540: 	movsd	0x8(%rcx,%rax), %xmm0
    00000546: 	addsd	(%rbp,%rax), %xmm0
    0000054c: 	addsd	0x10(%rbp,%rax), %xmm0
    00000552: 	addsd	0x8(%rdx,%rax), %xmm0
    00000558: 	addsd	%xmm1, %xmm0
    0000055c: 	mulsd	%xmm2, %xmm0
    00000560: 	movsd	%xmm0, 0x8(%r14,%rax)
    00000567: 	addq	$0x8, %rax
    0000056b: 	cmpq	%r9, %rax
    0000056e: 	jne	.Ltmp2721 # Offset: 1390
    00000570: 	jmp	.Ltmp2707 # Offset: 1392
.Ltmp2709:
    00000575: 	movl	0x60(%rsp), %eax
    00000579: 	movapd	%xmm1, %xmm8
    0000057e: 	cmpl	%eax, 0x140(%rsp)
    00000585: 	jl	.Ltmp2722 # Offset: 1413
    00000587: 	movapd	%xmm1, %xmm3
    0000058b: 	jmp	.Ltmp2716 # Offset: 1419
.Ltmp2710:
    00000590: 	movapd	%xmm1, %xmm3
    00000594: 	xorl	%eax, %eax
    00000596: 	jmp	.Ltmp2723 # Offset: 1430
.Ltmp2722:
    0000059b: 	movapd	%xmm8, %xmm3
.Ltmp2717:
    000005a0: 	ucomisd	%xmm3, %xmm3
    000005a4: 	setp	%bpl
    000005a8: 	ucomisd	%xmm8, %xmm8
    000005ad: 	setp	%al
    000005b0: 	orl	%eax, %ebp
.Ltmp2729:
    000005b2: 	movsd	%xmm8, 0x10(%rsp)
    000005b9: 	movsd	%xmm3, 0x8(%rsp)
    000005bf: 	callq	clock@PLT # Offset: 1471
    000005c4: 	movl	0xc0(%rsp), %edi
    000005cb: 	pxor	%xmm0, %xmm0
    000005cf: 	movsd	0xc8(%rsp), %xmm7
    000005d8: 	movq	%rax, end_time(%rip)
    000005df: 	subq	start_time(%rip), %rax
    000005e6: 	cvtsi2sd	%rax, %xmm0
    000005eb: 	movl	%edi, %eax
    000005ed: 	divsd	DATAat0x49520(%rip), %xmm0
    000005f5: 	movsd	0x8(%rsp), %xmm3
    000005fb: 	shrl	$0x1f, %eax
    000005fe: 	movsd	0x10(%rsp), %xmm8
    00000605: 	movq	%xmm0, %rbx
    0000060a: 	addl	%edi, %eax
    0000060c: 	movl	0x40(%rsp), %edi
    00000610: 	sarl	%eax
    00000612: 	movl	%edi, %edx
    00000614: 	imull	%edi, %eax
    00000617: 	shrl	$0x1f, %edx
    0000061a: 	addl	%edi, %edx
    0000061c: 	sarl	%edx
    0000061e: 	addl	%edx, %eax
    00000620: 	testb	%bpl, %bpl
    00000623: 	cltq
    00000625: 	subsd	(%r14,%rax,8), %xmm7
    0000062b: 	movq	0xb8(%rsp), %rax
    00000633: 	movq	0x8(%rax), %rdx
    00000637: 	movq	(%rax), %rsi
    0000063a: 	movq	%xmm7, %r12
    0000063f: 	jne	.Ltmp2724 # Offset: 1599
    00000645: 	movl	0x60(%rsp), %eax
    00000649: 	cmpl	%eax, iterations(%rip)
    0000064f: 	jg	.Ltmp2725 # Offset: 1615
    00000651: 	comisd	DATAat0x49538(%rip), %xmm3
    00000659: 	jbe	.Ltmp2725 # Offset: 1625
    0000065b: 	comisd	DATAat0x49540(%rip), %xmm8
    00000664: 	ja	.Ltmp2726 # Offset: 1636
.Ltmp2725:
    0000066a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000671: 	movsd	%xmm8, 0x10(%rsp)
    00000678: 	movq	%rbp, %rdi
    0000067b: 	movsd	%xmm3, 0x8(%rsp)
    00000681: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1665
    00000686: 	movl	$0xa, %edx
    0000068b: 	leaq	DATAat0x491ab(%rip), %rsi
    00000692: 	movq	%rax, %rdi
    00000695: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1685
    0000069a: 	movsd	0x10(%rsp), %xmm8
    000006a1: 	movsd	0x8(%rsp), %xmm3
.Ltmp2728:
    000006a7: 	movl	$0x4, %edx
    000006ac: 	movq	%rbp, %rdi
    000006af: 	leaq	DATAat0x491b6(%rip), %rsi
    000006b6: 	movsd	%xmm8, 0x10(%rsp)
    000006bd: 	movsd	%xmm3, 0x8(%rsp)
    000006c3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1731
    000006c8: 	movl	0x60(%rsp), %esi
    000006cc: 	movq	%rbp, %rdi
    000006cf: 	callq	_ZNSolsEi@PLT # Offset: 1743
    000006d4: 	movl	$0xb, %edx
    000006d9: 	leaq	DATAat0x491bb(%rip), %rsi
    000006e0: 	movq	%rax, %rdi
    000006e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1763
    000006e8: 	movl	$0xa, %edx
    000006ed: 	leaq	DATAat0x491c7(%rip), %rsi
    000006f4: 	movq	%rbp, %rdi
    000006f7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1783
    000006fc: 	movsd	0x8(%rsp), %xmm3
    00000702: 	movq	%rbp, %rdi
    00000705: 	movapd	%xmm3, %xmm0
    00000709: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1801
    0000070e: 	movl	$0x7, %edx
    00000713: 	leaq	DATAat0x491d2(%rip), %rsi
    0000071a: 	movq	%rax, %rdi
    0000071d: 	movq	%rax, %rbp
    00000720: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1824
    00000725: 	movsd	0x10(%rsp), %xmm8
    0000072c: 	movq	%rbp, %rdi
    0000072f: 	movapd	%xmm8, %xmm0
    00000734: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1844
    00000739: 	movl	$0x10, %edx
    0000073e: 	leaq	DATAat0x491da(%rip), %rsi
    00000745: 	movq	%rax, %rbp
    00000748: 	movq	%rax, %rdi
    0000074b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1867
    00000750: 	movq	%r12, %xmm0
    00000755: 	movq	%rbp, %rdi
    00000758: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1880
    0000075d: 	movl	$0x8, %edx
    00000762: 	leaq	DATAat0x491eb(%rip), %rsi
    00000769: 	movq	%rax, %rbp
    0000076c: 	movq	%rax, %rdi
    0000076f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1903
    00000774: 	movq	%rbx, %xmm0
    00000779: 	movq	%rbp, %rdi
    0000077c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1916
    00000781: 	movl	$0x2, %edx
    00000786: 	leaq	DATAat0x491f4(%rip), %rsi
    0000078d: 	movq	%rax, %rdi
    00000790: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1936
    00000795: 	movl	0xc4(%rsp), %eax
    0000079c: 	movl	%eax, iterations(%rip)
    000007a2: 	movq	0xf8(%rsp), %rax
    000007aa: 	subq	%fs:0x28, %rax
    000007b3: 	jne	.Ltmp2727 # Offset: 1971
    000007b9: 	addq	$0x108, %rsp
    000007c0: 	popq	%rbx
    000007c1: 	popq	%rbp
    000007c2: 	popq	%r12
    000007c4: 	popq	%r13
    000007c6: 	popq	%r14
    000007c8: 	popq	%r15
    000007ca: 	retq # Offset: 1994
.Ltmp2724:
    000007cb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000007d2: 	movq	%rbp, %rdi
    000007d5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2005
    000007da: 	movl	$0x10, %edx
    000007df: 	leaq	DATAat0x493d4(%rip), %rsi
    000007e6: 	movq	%rax, %rdi
    000007e9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2025
    000007ee: 	movsd	0x8(%rsp), %xmm3
    000007f4: 	movsd	0x10(%rsp), %xmm8
    000007fb: 	jmp	.Ltmp2728 # Offset: 2043
.Ltmp2718:
    00000800: 	movl	$0x1, %ebp
    00000805: 	jmp	.Ltmp2729 # Offset: 2053
.Ltmp2726:
    0000080a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000811: 	movsd	%xmm8, 0x10(%rsp)
    00000818: 	movq	%rbp, %rdi
    0000081b: 	movsd	%xmm3, 0x8(%rsp)
    00000821: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2081
    00000826: 	movl	$0x11, %edx
    0000082b: 	leaq	DATAat0x49199(%rip), %rsi
    00000832: 	movq	%rax, %rdi
    00000835: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2101
    0000083a: 	movsd	0x8(%rsp), %xmm3
    00000840: 	movsd	0x10(%rsp), %xmm8
    00000847: 	jmp	.Ltmp2728 # Offset: 2119
.Ltmp2719:
    0000084c: 	ucomisd	%xmm8, %xmm8
    00000851: 	setp	%bpl
    00000855: 	jmp	.Ltmp2729 # Offset: 2133
.Ltmp2703:
    0000085a: 	pxor	%xmm8, %xmm8
    0000085f: 	movl	$0x0, 0x60(%rsp)
    00000867: 	xorl	%ebp, %ebp
    00000869: 	movapd	%xmm8, %xmm3
    0000086e: 	jmp	.Ltmp2729 # Offset: 2158
.Ltmp2727:
    00000873: 	callq	__stack_chk_fail@PLT # Offset: 2163
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd18jacobi2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd17jacobi2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x3f020
  Size        : 0xa0d
  MaxSize     : 0xa10
  Offset      : 0x3f020
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd17jacobi2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	subq	$0xb8, %rsp
    00000022: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002a: 	movl	%edx, 0x70(%rsp)
    0000002e: 	movl	%r14d, %edx
    00000031: 	movl	%ecx, 0x38(%rsp)
    00000035: 	leaq	0x80(%rsp), %rcx
    0000003d: 	movl	%r8d, 0x24(%rsp)
    00000042: 	movq	%r9, 0x68(%rsp)
    00000047: 	movq	%fs:0x28, %rax
    00000050: 	movq	%rax, 0xa8(%rsp)
    00000058: 	xorl	%eax, %eax
    0000005a: 	movaps	%xmm0, 0x80(%rsp)
    00000062: 	movapd	DATAat0x494e0(%rip), %xmm0
    0000006a: 	movaps	%xmm0, 0x90(%rsp)
    00000072: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 114
    00000077: 	movl	%ebx, %esi
    00000079: 	imull	%r14d, %esi
    0000007d: 	movsd	%xmm0, 0x78(%rsp)
    00000083: 	movl	%esi, 0x4c(%rsp)
    00000087: 	testl	%esi, %esi
    00000089: 	jle	.Ltmp2730 # Offset: 137
    0000008b: 	movslq	%esi, %rdx
    0000008e: 	movq	%r15, %rdi
    00000091: 	movq	%r13, %rsi
    00000094: 	shlq	$0x3, %rdx
    00000098: 	callq	memmove@PLT # Offset: 152
.Ltmp2730:
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	movl	$0x2710, iterations(%rip)
    000000ad: 	movl	%eax, 0x74(%rsp)
    000000b1: 	callq	clock@PLT # Offset: 177
    000000b6: 	movq	%rax, start_time(%rip)
    000000bd: 	movl	iterations(%rip), %eax
    000000c3: 	movl	%eax, 0x50(%rsp)
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp2731 # Offset: 201
    000000cf: 	movl	0x70(%rsp), %eax
    000000d3: 	movl	0x24(%rsp), %edx
    000000d7: 	movl	$0x0, 0x48(%rsp)
    000000df: 	pxor	%xmm5, %xmm5
    000000e3: 	movapd	DATAat0x49400(%rip), %xmm4
    000000eb: 	movq	DATAat0x49500(%rip), %xmm7
    000000f3: 	movsd	DATAat0x49400(%rip), %xmm8
    000000fc: 	subl	$0x1, %eax
    000000ff: 	addl	%edx, %edx
    00000101: 	movl	%eax, 0x20(%rsp)
    00000105: 	movl	0x38(%rsp), %eax
    00000109: 	movl	%edx, 0x54(%rsp)
    0000010d: 	leal	-0x4(%rax), %esi
    00000110: 	subl	$0x6, %eax
    00000113: 	movl	%esi, 0x28(%rsp)
    00000117: 	movslq	0x4c(%rsp), %rsi
    0000011c: 	movl	%eax, %r11d
    0000011f: 	movl	%eax, 0x2c(%rsp)
    00000123: 	andl	$-0x4, %eax
    00000126: 	shrl	$0x2, %r11d
    0000012a: 	leal	0x1(%rax), %edx
    0000012d: 	leal	0x5(%rax), %r14d
    00000131: 	movq	%rsi, %rax
    00000134: 	movq	%rsi, 0x40(%rsp)
    00000139: 	shrq	%rax
    0000013c: 	andq	$-0x2, %rsi
    00000140: 	movl	%edx, 0x3c(%rsp)
    00000144: 	movl	%r11d, %r12d
    00000147: 	shlq	$0x4, %rax
    0000014b: 	movq	%rsi, 0x58(%rsp)
    00000150: 	movq	%rax, 0x60(%rsp)
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp2751:
    00000158: 	cmpl	$0x1, 0x20(%rsp)
    0000015d: 	jle	.Ltmp2732 # Offset: 349
    00000163: 	movl	0x38(%rsp), %eax
    00000167: 	movq	%r15, %rbx
    0000016a: 	movl	$0x1, (%rsp)
    00000171: 	xorl	%esi, %esi
    00000173: 	subq	%r13, %rbx
    00000176: 	movl	%r12d, 0x8(%rsp)
    0000017b: 	movl	0x24(%rsp), %edx
    0000017f: 	pxor	%xmm2, %xmm2
    00000183: 	subl	$0x1, %eax
    00000186: 	movq	%rbx, 0x30(%rsp)
    0000018b: 	movsd	DATAat0x49400(%rip), %xmm6
    00000193: 	movl	%eax, 0x1c(%rsp)
    00000197: 	movl	0x54(%rsp), %eax
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2739:
    000001a0: 	addl	$0x1, (%rsp)
    000001a4: 	cmpl	$0x1, 0x28(%rsp)
    000001a9: 	movl	$0x1, %ecx
    000001ae: 	jle	.Ltmp2733 # Offset: 430
    000001b4: 	cmpl	$0x3, 0x2c(%rsp)
    000001b9: 	jbe	.Ltmp2734 # Offset: 441
    000001bf: 	movslq	%esi, %rcx
    000001c2: 	movslq	%eax, %rdi
    000001c5: 	movl	0x8(%rsp), %r12d
    000001ca: 	movapd	%xmm4, %xmm3
    000001ce: 	leaq	0x8(%r13,%rcx,8), %r10
    000001d3: 	movslq	%edx, %rcx
    000001d6: 	leaq	0x8(%r13,%rdi,8), %r8
    000001db: 	xorl	%edi, %edi
    000001dd: 	shlq	$0x3, %rcx
    000001e1: 	leaq	(%r13,%rcx), %r9
    000001e6: 	leaq	0x8(%r15,%rcx), %rbp
    000001eb: 	leaq	0x20(%r13,%rcx), %rbx
    000001f0: 	leaq	0x18(%r15,%rcx), %r11
    000001f5: 	xorl	%ecx, %ecx
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2735:
    00000200: 	movupd	0x10(%r9,%rcx), %xmm1
    00000207: 	movupd	(%r9,%rcx), %xmm13
    0000020d: 	addl	$0x1, %edi
    00000210: 	movupd	0x10(%r10,%rcx), %xmm0
    00000217: 	movupd	0x10(%r9,%rcx), %xmm14
    0000021e: 	movupd	(%r8,%rcx), %xmm15
    00000224: 	addpd	%xmm1, %xmm0
    00000228: 	movupd	(%rbx,%rcx), %xmm1
    0000022d: 	addpd	%xmm1, %xmm0
    00000231: 	movupd	0x10(%r8,%rcx), %xmm1
    00000238: 	addpd	%xmm1, %xmm0
    0000023c: 	movupd	(%r10,%rcx), %xmm1
    00000242: 	addpd	%xmm13, %xmm1
    00000247: 	addpd	%xmm2, %xmm0
    0000024b: 	addpd	%xmm14, %xmm1
    00000250: 	mulpd	%xmm4, %xmm0
    00000254: 	addpd	%xmm15, %xmm1
    00000259: 	addpd	%xmm2, %xmm1
    0000025d: 	mulpd	%xmm4, %xmm1
    00000261: 	movups	%xmm1, (%rbp,%rcx)
    00000266: 	movups	%xmm0, (%r11,%rcx)
    0000026b: 	addq	$0x20, %rcx
    0000026f: 	cmpl	%r12d, %edi
    00000272: 	jb	.Ltmp2735 # Offset: 626
    00000274: 	movl	%r12d, 0x8(%rsp)
    00000279: 	movl	0x3c(%rsp), %ecx
.Ltmp2752:
    0000027d: 	leal	(%rsi,%rcx), %edi
    00000280: 	leal	0x2(%rax,%rcx), %r9d
    00000285: 	movslq	%edi, %rdi
    00000288: 	movslq	%r9d, %r9
    0000028b: 	leaq	(%r13,%rdi,8), %rbx
    00000290: 	leal	-0x1(%rdx,%rcx), %edi
    00000294: 	movsd	(%r13,%r9,8), %xmm0
    0000029b: 	movslq	%edi, %rdi
    0000029e: 	movupd	0x10(%rbx), %xmm1
    000002a3: 	movupd	(%rbx), %xmm9
    000002a8: 	leaq	(%r13,%rdi,8), %r11
    000002ad: 	leal	0x1(%rcx), %edi
    000002b0: 	movupd	0x10(%r11), %xmm11
    000002b6: 	leal	(%rdx,%rdi), %r8d
    000002ba: 	movupd	(%r11), %xmm10
    000002bf: 	addl	%eax, %edi
    000002c1: 	movslq	%r8d, %r8
    000002c4: 	movslq	%edi, %rdi
    000002c7: 	leaq	(%r13,%r8,8), %r10
    000002cc: 	addpd	%xmm11, %xmm1
    000002d1: 	movupd	0x10(%r10), %xmm12
    000002d7: 	leal	0x3(%rax,%rcx), %r8d
    000002dc: 	addpd	%xmm10, %xmm9
    000002e1: 	movupd	(%r10), %xmm10
    000002e6: 	movslq	%r8d, %r8
    000002e9: 	addpd	%xmm12, %xmm1
    000002ee: 	movhpd	(%r13,%r8,8), %xmm0
    000002f5: 	leal	(%rdx,%rcx), %r8d
    000002f9: 	addl	%eax, %ecx
    000002fb: 	movslq	%ecx, %rcx
    000002fe: 	addpd	%xmm10, %xmm9
    00000303: 	movslq	%r8d, %r8
    00000306: 	leaq	(%r15,%r8,8), %r8
    0000030a: 	addpd	%xmm1, %xmm0
    0000030e: 	movsd	(%r13,%rcx,8), %xmm1
    00000315: 	movl	%r14d, %ecx
    00000318: 	movhpd	(%r13,%rdi,8), %xmm1
    0000031f: 	addpd	%xmm9, %xmm1
    00000324: 	addpd	%xmm2, %xmm0
    00000328: 	addpd	%xmm2, %xmm1
    0000032c: 	mulpd	%xmm3, %xmm0
    00000330: 	mulpd	%xmm3, %xmm1
    00000334: 	movups	%xmm0, 0x10(%r8)
    00000339: 	movups	%xmm1, (%r8)
.Ltmp2733:
    0000033d: 	cmpl	0x1c(%rsp), %ecx
    00000341: 	jge	.Ltmp2736 # Offset: 833
    00000347: 	movslq	%ecx, %r9
    0000034a: 	movslq	%eax, %rbx
    0000034d: 	movl	0x38(%rsp), %edi
    00000351: 	movslq	%edx, %r11
    00000354: 	movslq	%esi, %r8
    00000357: 	addq	%r9, %r11
    0000035a: 	leaq	0x1(%r9,%r8), %r8
    0000035f: 	leaq	0x1(%r9,%rbx), %r9
    00000364: 	subl	%ecx, %edi
    00000366: 	shlq	$0x3, %r8
    0000036a: 	shlq	$0x3, %r9
    0000036e: 	cmpq	$0x10, 0x30(%rsp)
    00000374: 	leaq	(,%r11,8), %rbp
    0000037c: 	seta	%bl
    0000037f: 	cmpl	$0x2, %edi
    00000382: 	leaq	(%r15,%rbp), %r10
    00000386: 	setne	0x10(%rsp)
    0000038b: 	movzbl	0x10(%rsp), %r12d
    00000391: 	andl	%r12d, %ebx
    00000394: 	leaq	(%r13,%r8), %r12
    00000399: 	cmpq	%r12, %r10
    0000039c: 	setne	0x10(%rsp)
    000003a1: 	movzbl	0x10(%rsp), %r12d
    000003a7: 	testb	%bl, %r12b
    000003aa: 	je	.Ltmp2737 # Offset: 938
    000003b0: 	leaq	(%r13,%r9), %rbx
    000003b5: 	cmpq	%rbx, %r10
    000003b8: 	je	.Ltmp2737 # Offset: 952
    000003be: 	leaq	-0x8(%r13,%rbp), %rbx
    000003c3: 	leaq	0x8(%r13,%rbp), %rbp
    000003c8: 	subl	$0x1, %edi
    000003cb: 	movupd	(%rbp), %xmm3
    000003d0: 	movupd	(%rbx), %xmm0
    000003d4: 	leaq	-0x8(%r13,%r8), %r11
    000003d9: 	leaq	-0x8(%r13,%r9), %r8
    000003de: 	movl	%edi, %r9d
    000003e1: 	addpd	%xmm3, %xmm0
    000003e5: 	movupd	(%r11), %xmm3
    000003ea: 	shrl	%r9d
    000003ed: 	addpd	%xmm3, %xmm0
    000003f1: 	movupd	(%r8), %xmm3
    000003f6: 	addpd	%xmm3, %xmm0
    000003fa: 	addpd	%xmm2, %xmm0
    000003fe: 	mulpd	%xmm4, %xmm0
    00000402: 	movups	%xmm0, (%r10)
    00000406: 	cmpl	$0x1, %r9d
    0000040a: 	je	.Ltmp2738 # Offset: 1034
    0000040c: 	movupd	0x10(%rbx), %xmm1
    00000411: 	movupd	0x10(%rbp), %xmm0
    00000416: 	addpd	%xmm1, %xmm0
    0000041a: 	movupd	0x10(%r11), %xmm1
    00000420: 	addpd	%xmm1, %xmm0
    00000424: 	movupd	0x10(%r8), %xmm1
    0000042a: 	addpd	%xmm1, %xmm0
    0000042e: 	addpd	%xmm2, %xmm0
    00000432: 	mulpd	%xmm4, %xmm0
    00000436: 	movups	%xmm0, 0x10(%r10)
.Ltmp2738:
    0000043b: 	movl	%edi, %r8d
    0000043e: 	andl	$-0x2, %r8d
    00000442: 	addl	%r8d, %ecx
    00000445: 	cmpl	%edi, %r8d
    00000448: 	je	.Ltmp2736 # Offset: 1096
    0000044a: 	leal	(%rsi,%rcx), %edi
    0000044d: 	leal	0x1(%rdx,%rcx), %r9d
    00000452: 	leal	-0x1(%rdx,%rcx), %r8d
    00000457: 	movslq	%edi, %rdi
    0000045a: 	movslq	%r9d, %r9
    0000045d: 	movslq	%r8d, %r8
    00000460: 	movsd	(%r13,%r9,8), %xmm0
    00000467: 	addsd	(%r13,%r8,8), %xmm0
    0000046e: 	addsd	(%r13,%rdi,8), %xmm0
    00000475: 	leal	(%rdx,%rcx), %edi
    00000478: 	addl	%eax, %ecx
    0000047a: 	movslq	%ecx, %rcx
    0000047d: 	movslq	%edi, %rdi
    00000480: 	addsd	(%r13,%rcx,8), %xmm0
    00000487: 	addsd	%xmm5, %xmm0
    0000048b: 	mulsd	%xmm6, %xmm0
    0000048f: 	movsd	%xmm0, (%r15,%rdi,8)
.Ltmp2736:
    00000495: 	movl	0x24(%rsp), %ebx
    00000499: 	movl	(%rsp), %edi
    0000049c: 	addl	%ebx, %esi
    0000049e: 	addl	%ebx, %edx
    000004a0: 	addl	%ebx, %eax
    000004a2: 	cmpl	%edi, 0x20(%rsp)
    000004a6: 	jne	.Ltmp2739 # Offset: 1190
    000004ac: 	movl	0x8(%rsp), %r12d
.Ltmp2732:
    000004b1: 	cmpq	$0x0, 0x40(%rsp)
    000004b7: 	je	.Ltmp2740 # Offset: 1207
    000004bd: 	cmpl	$0x1, 0x4c(%rsp)
    000004c2: 	je	.Ltmp2741 # Offset: 1218
    000004c8: 	movq	0x60(%rsp), %rdx
    000004cd: 	xorl	%eax, %eax
    000004cf: 	movapd	%xmm5, %xmm1
    000004d3: 	pxor	%xmm6, %xmm6
    000004d7: 	movapd	DATAat0x494f0(%rip), %xmm9
.Ltmp2742:
    000004e0: 	movupd	(%r15,%rax), %xmm3
    000004e6: 	movupd	(%r13,%rax), %xmm2
    000004ed: 	addq	$0x10, %rax
    000004f1: 	subpd	%xmm3, %xmm2
    000004f5: 	movapd	%xmm2, %xmm0
    000004f9: 	movapd	%xmm2, %xmm3
    000004fd: 	cmpltpd	%xmm6, %xmm0
    00000502: 	xorpd	%xmm9, %xmm3
    00000507: 	andpd	%xmm0, %xmm3
    0000050b: 	andnpd	%xmm2, %xmm0
    0000050f: 	orpd	%xmm3, %xmm0
    00000513: 	addsd	%xmm0, %xmm1
    00000517: 	unpckhpd	%xmm0, %xmm0
    0000051b: 	addsd	%xmm0, %xmm1
    0000051f: 	cmpq	%rax, %rdx
    00000522: 	jne	.Ltmp2742 # Offset: 1314
    00000524: 	movq	0x58(%rsp), %rax
    00000529: 	cmpq	%rax, 0x40(%rsp)
    0000052e: 	je	.Ltmp2743 # Offset: 1326
.Ltmp2754:
    00000530: 	movsd	(%r13,%rax,8), %xmm0
    00000537: 	subsd	(%r15,%rax,8), %xmm0
    0000053d: 	comisd	%xmm0, %xmm5
    00000541: 	jbe	.Ltmp2744 # Offset: 1345
    00000543: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2744:
    0000054b: 	addsd	%xmm0, %xmm1
.Ltmp2743:
    0000054f: 	movq	0x40(%rsp), %rdx
    00000554: 	movapd	%xmm5, %xmm2
    00000558: 	xorl	%eax, %eax
    0000055a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2746:
    00000560: 	movsd	(%r13,%rax,8), %xmm0
    00000567: 	subsd	(%r15,%rax,8), %xmm0
    0000056d: 	comisd	%xmm0, %xmm5
    00000571: 	jbe	.Ltmp2745 # Offset: 1393
    00000573: 	xorpd	%xmm7, %xmm0
.Ltmp2745:
    00000577: 	maxsd	%xmm2, %xmm0
    0000057b: 	addq	$0x1, %rax
    0000057f: 	movapd	%xmm0, %xmm2
    00000583: 	cmpq	%rax, %rdx
    00000586: 	jne	.Ltmp2746 # Offset: 1414
    00000588: 	movl	0x48(%rsp), %eax
    0000058c: 	cmpl	%eax, 0xf0(%rsp)
    00000593: 	jge	.Ltmp2747 # Offset: 1427
    00000595: 	movsd	DATAat0x49538(%rip), %xmm0
    0000059d: 	comisd	%xmm1, %xmm0
    000005a1: 	ja	.Ltmp2748 # Offset: 1441
    000005a7: 	ucomisd	%xmm1, %xmm1
    000005ab: 	jp	.Ltmp2749 # Offset: 1451
    000005b1: 	movsd	DATAat0x49540(%rip), %xmm0
    000005b9: 	comisd	%xmm2, %xmm0
    000005bd: 	ja	.Ltmp2750 # Offset: 1469
    000005c3: 	ucomisd	%xmm2, %xmm2
    000005c7: 	jp	.Ltmp2749 # Offset: 1479
.Ltmp2747:
    000005cd: 	addl	$0x1, 0x48(%rsp)
    000005d2: 	movq	%r15, %rax
    000005d5: 	movl	0x48(%rsp), %esi
    000005d9: 	movq	%r13, %r15
    000005dc: 	cmpl	0x50(%rsp), %esi
    000005e0: 	je	.Ltmp2748 # Offset: 1504
    000005e6: 	movq	%rax, %r13
    000005e9: 	jmp	.Ltmp2751 # Offset: 1513
    000005ee: 	nop # Size: 2
.Ltmp2737:
    000005f0: 	leal	0x1(%rcx), %edi
    000005f3: 	leal	-0x1(%rdx,%rcx), %ebp
    000005f7: 	leal	(%rdi,%rdx), %ebx
    000005fa: 	movslq	%ebp, %rbp
    000005fd: 	movslq	%ebx, %rbx
    00000600: 	movsd	(%r13,%rbp,8), %xmm0
    00000607: 	leaq	(%r13,%rbx,8), %r12
    0000060c: 	addsd	(%r12), %xmm0
    00000612: 	addsd	-0x8(%r13,%r8), %xmm0
    00000619: 	movq	%r12, 0x10(%rsp)
    0000061e: 	addsd	-0x8(%r13,%r9), %xmm0
    00000625: 	movl	0x1c(%rsp), %r12d
    0000062a: 	addsd	%xmm5, %xmm0
    0000062e: 	mulsd	%xmm8, %xmm0
    00000633: 	movsd	%xmm0, (%r10)
    00000638: 	cmpl	%r12d, %edi
    0000063b: 	jge	.Ltmp2736 # Offset: 1595
    00000641: 	leal	0x2(%rcx), %r8d
    00000645: 	leal	(%rdi,%rsi), %r9d
    00000649: 	addl	%eax, %edi
    0000064b: 	movsd	(%r13,%r11,8), %xmm0
    00000652: 	leal	(%r8,%rdx), %r10d
    00000656: 	movslq	%r9d, %r9
    00000659: 	movslq	%edi, %rdi
    0000065c: 	movslq	%r10d, %r10
    0000065f: 	leaq	(%r13,%r10,8), %rbp
    00000664: 	addsd	(%rbp), %xmm0
    00000669: 	addsd	(%r13,%r9,8), %xmm0
    00000670: 	addsd	(%r13,%rdi,8), %xmm0
    00000677: 	addsd	%xmm5, %xmm0
    0000067b: 	mulsd	%xmm8, %xmm0
    00000680: 	movsd	%xmm0, (%r15,%rbx,8)
    00000686: 	movl	%r12d, %ebx
    00000689: 	cmpl	%r12d, %r8d
    0000068c: 	jge	.Ltmp2736 # Offset: 1676
    00000692: 	leal	0x3(%rcx), %edi
    00000695: 	leal	(%r8,%rsi), %r11d
    00000699: 	movq	0x10(%rsp), %r12
    0000069e: 	addl	%eax, %r8d
    000006a1: 	leal	(%rdx,%rdi), %r9d
    000006a5: 	movslq	%r11d, %r11
    000006a8: 	movslq	%r8d, %r8
    000006ab: 	movslq	%r9d, %r9
    000006ae: 	movsd	(%r13,%r9,8), %xmm0
    000006b5: 	addsd	(%r12), %xmm0
    000006bb: 	addsd	(%r13,%r11,8), %xmm0
    000006c2: 	addsd	(%r13,%r8,8), %xmm0
    000006c9: 	addsd	%xmm5, %xmm0
    000006cd: 	mulsd	%xmm8, %xmm0
    000006d2: 	movsd	%xmm0, (%r15,%r10,8)
    000006d8: 	cmpl	%edi, %ebx
    000006da: 	jle	.Ltmp2736 # Offset: 1754
    000006e0: 	leal	0x4(%rdx,%rcx), %ecx
    000006e4: 	leal	(%rsi,%rdi), %r8d
    000006e8: 	movslq	%ecx, %rcx
    000006eb: 	movslq	%r8d, %r8
    000006ee: 	movsd	(%r13,%rcx,8), %xmm0
    000006f5: 	leal	(%rax,%rdi), %ecx
    000006f8: 	addsd	(%rbp), %xmm0
    000006fd: 	movslq	%ecx, %rcx
    00000700: 	addsd	(%r13,%r8,8), %xmm0
    00000707: 	addsd	(%r13,%rcx,8), %xmm0
    0000070e: 	addsd	%xmm5, %xmm0
    00000712: 	mulsd	%xmm8, %xmm0
    00000717: 	movsd	%xmm0, (%r15,%r9,8)
    0000071d: 	jmp	.Ltmp2736 # Offset: 1821
.Ltmp2734:
    00000722: 	movl	$0x1, %ecx
    00000727: 	movapd	%xmm4, %xmm3
    0000072b: 	jmp	.Ltmp2752 # Offset: 1835
.Ltmp2740:
    00000730: 	movl	0x48(%rsp), %eax
    00000734: 	movapd	%xmm5, %xmm1
    00000738: 	cmpl	%eax, 0xf0(%rsp)
    0000073f: 	jl	.Ltmp2753 # Offset: 1855
    00000741: 	movapd	%xmm5, %xmm2
    00000745: 	jmp	.Ltmp2747 # Offset: 1861
.Ltmp2741:
    0000074a: 	movapd	%xmm5, %xmm1
    0000074e: 	xorl	%eax, %eax
    00000750: 	jmp	.Ltmp2754 # Offset: 1872
.Ltmp2753:
    00000755: 	movapd	%xmm1, %xmm2
.Ltmp2748:
    00000759: 	ucomisd	%xmm1, %xmm1
    0000075d: 	setp	%bpl
    00000761: 	ucomisd	%xmm2, %xmm2
    00000765: 	setp	%al
    00000768: 	orl	%eax, %ebp
.Ltmp2760:
    0000076a: 	movsd	%xmm2, 0x8(%rsp)
    00000770: 	movsd	%xmm1, (%rsp)
    00000775: 	callq	clock@PLT # Offset: 1909
    0000077a: 	movl	0x70(%rsp), %esi
    0000077e: 	pxor	%xmm0, %xmm0
    00000782: 	movsd	0x78(%rsp), %xmm7
    00000788: 	movq	%rax, end_time(%rip)
    0000078f: 	subq	start_time(%rip), %rax
    00000796: 	cvtsi2sd	%rax, %xmm0
    0000079b: 	movl	%esi, %eax
    0000079d: 	divsd	DATAat0x49520(%rip), %xmm0
    000007a5: 	movsd	(%rsp), %xmm1
    000007aa: 	shrl	$0x1f, %eax
    000007ad: 	movsd	0x8(%rsp), %xmm2
    000007b3: 	movq	%xmm0, %rbx
    000007b8: 	addl	%esi, %eax
    000007ba: 	movl	0x38(%rsp), %esi
    000007be: 	sarl	%eax
    000007c0: 	movl	%esi, %edx
    000007c2: 	imull	%esi, %eax
    000007c5: 	shrl	$0x1f, %edx
    000007c8: 	addl	%esi, %edx
    000007ca: 	sarl	%edx
    000007cc: 	addl	%edx, %eax
    000007ce: 	testb	%bpl, %bpl
    000007d1: 	cltq
    000007d3: 	subsd	(%r15,%rax,8), %xmm7
    000007d9: 	movq	0x68(%rsp), %rax
    000007de: 	movq	0x8(%rax), %rdx
    000007e2: 	movq	(%rax), %rsi
    000007e5: 	movq	%xmm7, %r12
    000007ea: 	jne	.Ltmp2755 # Offset: 2026
    000007f0: 	movl	0x48(%rsp), %eax
    000007f4: 	cmpl	%eax, iterations(%rip)
    000007fa: 	jg	.Ltmp2756 # Offset: 2042
    000007fc: 	comisd	DATAat0x49538(%rip), %xmm1
    00000804: 	jbe	.Ltmp2756 # Offset: 2052
    00000806: 	comisd	DATAat0x49540(%rip), %xmm2
    0000080e: 	ja	.Ltmp2757 # Offset: 2062
.Ltmp2756:
    00000814: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000081b: 	movsd	%xmm2, 0x8(%rsp)
    00000821: 	movq	%rbp, %rdi
    00000824: 	movsd	%xmm1, (%rsp)
    00000829: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2089
    0000082e: 	movl	$0xa, %edx
    00000833: 	leaq	DATAat0x491ab(%rip), %rsi
    0000083a: 	movq	%rax, %rdi
    0000083d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2109
    00000842: 	movsd	0x8(%rsp), %xmm2
    00000848: 	movsd	(%rsp), %xmm1
.Ltmp2759:
    0000084d: 	movl	$0x4, %edx
    00000852: 	movq	%rbp, %rdi
    00000855: 	movsd	%xmm1, (%rsp)
    0000085a: 	leaq	DATAat0x491b6(%rip), %rsi
    00000861: 	movsd	%xmm2, 0x8(%rsp)
    00000867: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2151
    0000086c: 	movl	0x48(%rsp), %esi
    00000870: 	movq	%rbp, %rdi
    00000873: 	callq	_ZNSolsEi@PLT # Offset: 2163
    00000878: 	movl	$0xb, %edx
    0000087d: 	leaq	DATAat0x491bb(%rip), %rsi
    00000884: 	movq	%rax, %rdi
    00000887: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2183
    0000088c: 	movl	$0xa, %edx
    00000891: 	leaq	DATAat0x491c7(%rip), %rsi
    00000898: 	movq	%rbp, %rdi
    0000089b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2203
    000008a0: 	movsd	(%rsp), %xmm1
    000008a5: 	movq	%rbp, %rdi
    000008a8: 	movapd	%xmm1, %xmm0
    000008ac: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2220
    000008b1: 	movl	$0x7, %edx
    000008b6: 	leaq	DATAat0x491d2(%rip), %rsi
    000008bd: 	movq	%rax, %rdi
    000008c0: 	movq	%rax, %rbp
    000008c3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2243
    000008c8: 	movsd	0x8(%rsp), %xmm2
    000008ce: 	movq	%rbp, %rdi
    000008d1: 	movapd	%xmm2, %xmm0
    000008d5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2261
    000008da: 	movl	$0x10, %edx
    000008df: 	leaq	DATAat0x491da(%rip), %rsi
    000008e6: 	movq	%rax, %rbp
    000008e9: 	movq	%rax, %rdi
    000008ec: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2284
    000008f1: 	movq	%r12, %xmm0
    000008f6: 	movq	%rbp, %rdi
    000008f9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2297
    000008fe: 	movl	$0x8, %edx
    00000903: 	leaq	DATAat0x491eb(%rip), %rsi
    0000090a: 	movq	%rax, %rbp
    0000090d: 	movq	%rax, %rdi
    00000910: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2320
    00000915: 	movq	%rbx, %xmm0
    0000091a: 	movq	%rbp, %rdi
    0000091d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2333
    00000922: 	movl	$0x2, %edx
    00000927: 	leaq	DATAat0x491f4(%rip), %rsi
    0000092e: 	movq	%rax, %rdi
    00000931: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2353
    00000936: 	movl	0x74(%rsp), %eax
    0000093a: 	movl	%eax, iterations(%rip)
    00000940: 	movq	0xa8(%rsp), %rax
    00000948: 	subq	%fs:0x28, %rax
    00000951: 	jne	.Ltmp2758 # Offset: 2385
    00000957: 	addq	$0xb8, %rsp
    0000095e: 	popq	%rbx
    0000095f: 	popq	%rbp
    00000960: 	popq	%r12
    00000962: 	popq	%r13
    00000964: 	popq	%r14
    00000966: 	popq	%r15
    00000968: 	retq # Offset: 2408
.Ltmp2755:
    00000969: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000970: 	movq	%rbp, %rdi
    00000973: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2419
    00000978: 	movl	$0x10, %edx
    0000097d: 	leaq	DATAat0x493d4(%rip), %rsi
    00000984: 	movq	%rax, %rdi
    00000987: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2439
    0000098c: 	movsd	(%rsp), %xmm1
    00000991: 	movsd	0x8(%rsp), %xmm2
    00000997: 	jmp	.Ltmp2759 # Offset: 2455
.Ltmp2749:
    0000099c: 	movl	$0x1, %ebp
    000009a1: 	jmp	.Ltmp2760 # Offset: 2465
.Ltmp2757:
    000009a6: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000009ad: 	movsd	%xmm2, 0x8(%rsp)
    000009b3: 	movq	%rbp, %rdi
    000009b6: 	movsd	%xmm1, (%rsp)
    000009bb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2491
    000009c0: 	movl	$0x11, %edx
    000009c5: 	leaq	DATAat0x49199(%rip), %rsi
    000009cc: 	movq	%rax, %rdi
    000009cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2511
    000009d4: 	movsd	(%rsp), %xmm1
    000009d9: 	movsd	0x8(%rsp), %xmm2
    000009df: 	jmp	.Ltmp2759 # Offset: 2527
.Ltmp2750:
    000009e4: 	ucomisd	%xmm2, %xmm2
    000009e8: 	setp	%bpl
    000009ec: 	jmp	.Ltmp2760 # Offset: 2540
.Ltmp2731:
    000009f1: 	pxor	%xmm2, %xmm2
    000009f5: 	movl	$0x0, 0x48(%rsp)
    000009fd: 	xorl	%ebp, %ebp
    000009ff: 	movapd	%xmm2, %xmm1
    00000a03: 	jmp	.Ltmp2760 # Offset: 2563
.Ltmp2758:
    00000a08: 	callq	__stack_chk_fail@PLT # Offset: 2568
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd17jacobi2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd18jacobi2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x3fa30
  Size        : 0xa26
  MaxSize     : 0xa30
  Offset      : 0x3fa30
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd18jacobi2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xb8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0x70(%rsp)
    0000002f: 	movl	%ebp, %edx
    00000031: 	movl	%ecx, 0x38(%rsp)
    00000035: 	leaq	0x80(%rsp), %rcx
    0000003d: 	movl	%r8d, 0x2c(%rsp)
    00000042: 	movq	%r9, 0x68(%rsp)
    00000047: 	movq	%fs:0x28, %rax
    00000050: 	movq	%rax, 0xa8(%rsp)
    00000058: 	xorl	%eax, %eax
    0000005a: 	movaps	%xmm0, 0x80(%rsp)
    00000062: 	movapd	DATAat0x494e0(%rip), %xmm0
    0000006a: 	movaps	%xmm0, 0x90(%rsp)
    00000072: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 114
    00000077: 	movl	%r14d, %edi
    0000007a: 	imull	%ebp, %edi
    0000007d: 	movsd	%xmm0, 0x78(%rsp)
    00000083: 	movl	%edi, 0x4c(%rsp)
    00000087: 	testl	%edi, %edi
    00000089: 	jle	.Ltmp2761 # Offset: 137
    0000008b: 	movslq	%edi, %rdx
    0000008e: 	movq	%rbx, %rsi
    00000091: 	movq	%r15, %rdi
    00000094: 	shlq	$0x3, %rdx
    00000098: 	callq	memmove@PLT # Offset: 152
.Ltmp2761:
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	movl	$0x2710, iterations(%rip)
    000000ad: 	movl	%eax, 0x74(%rsp)
    000000b1: 	callq	clock@PLT # Offset: 177
    000000b6: 	movq	%rax, start_time(%rip)
    000000bd: 	movl	iterations(%rip), %eax
    000000c3: 	movl	%eax, 0x50(%rsp)
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp2762 # Offset: 201
    000000cf: 	movl	0x70(%rsp), %eax
    000000d3: 	movl	0x2c(%rsp), %edx
    000000d7: 	movl	$0x0, 0x48(%rsp)
    000000df: 	pxor	%xmm4, %xmm4
    000000e3: 	movapd	DATAat0x49400(%rip), %xmm6
    000000eb: 	movq	DATAat0x49500(%rip), %xmm7
    000000f3: 	movsd	DATAat0x49400(%rip), %xmm8
    000000fc: 	subl	$0x1, %eax
    000000ff: 	addl	%edx, %edx
    00000101: 	movl	%eax, 0x28(%rsp)
    00000105: 	movl	0x38(%rsp), %eax
    00000109: 	movl	%edx, 0x54(%rsp)
    0000010d: 	leal	-0x4(%rax), %ecx
    00000110: 	subl	$0x6, %eax
    00000113: 	movl	%ecx, 0x30(%rsp)
    00000117: 	movslq	0x4c(%rsp), %rcx
    0000011c: 	movl	%eax, %r14d
    0000011f: 	movl	%eax, 0x34(%rsp)
    00000123: 	andl	$-0x4, %eax
    00000126: 	shrl	$0x2, %r14d
    0000012a: 	leal	0x1(%rax), %edx
    0000012d: 	leal	0x5(%rax), %r11d
    00000131: 	movq	%rcx, %rax
    00000134: 	movq	%rcx, 0x40(%rsp)
    00000139: 	shrq	%rax
    0000013c: 	andq	$-0x2, %rcx
    00000140: 	movl	%edx, 0x3c(%rsp)
    00000144: 	shlq	$0x4, %rax
    00000148: 	movq	%rcx, 0x58(%rsp)
    0000014d: 	movq	%rax, 0x60(%rsp)
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2782:
    00000158: 	cmpl	$0x1, 0x28(%rsp)
    0000015d: 	jle	.Ltmp2763 # Offset: 349
    00000163: 	movl	0x38(%rsp), %eax
    00000167: 	movl	%r14d, 0x10(%rsp)
    0000016c: 	xorl	%edx, %edx
    0000016e: 	pxor	%xmm3, %xmm3
    00000172: 	movl	$0x1, 0x8(%rsp)
    0000017a: 	movl	0x54(%rsp), %ecx
    0000017e: 	subl	$0x1, %eax
    00000181: 	movsd	DATAat0x49400(%rip), %xmm5
    00000189: 	movl	%eax, 0x24(%rsp)
    0000018d: 	movl	0x2c(%rsp), %eax
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp2770:
    00000198: 	addl	$0x1, 0x8(%rsp)
    0000019d: 	cmpl	$0x1, 0x30(%rsp)
    000001a2: 	movl	$0x1, %esi
    000001a7: 	jle	.Ltmp2764 # Offset: 423
    000001ad: 	cmpl	$0x3, 0x34(%rsp)
    000001b2: 	jbe	.Ltmp2765 # Offset: 434
    000001b8: 	movslq	%edx, %rsi
    000001bb: 	movslq	%ecx, %rdi
    000001be: 	movl	0x10(%rsp), %r14d
    000001c3: 	movapd	%xmm6, %xmm2
    000001c7: 	leaq	0x8(%rbx,%rsi,8), %r10
    000001cc: 	movslq	%eax, %rsi
    000001cf: 	leaq	0x8(%rbx,%rdi,8), %r8
    000001d4: 	xorl	%edi, %edi
    000001d6: 	shlq	$0x3, %rsi
    000001da: 	leaq	(%rbx,%rsi), %r9
    000001de: 	leaq	0x8(%r15,%rsi), %r13
    000001e3: 	leaq	0x20(%rbx,%rsi), %r12
    000001e8: 	leaq	0x18(%r15,%rsi), %rbp
    000001ed: 	xorl	%esi, %esi
    000001ef: 	nop # Size: 1
.Ltmp2766:
    000001f0: 	movupd	0x10(%r9,%rsi), %xmm1
    000001f7: 	movupd	(%r9,%rsi), %xmm10
    000001fd: 	addl	$0x1, %edi
    00000200: 	movupd	0x10(%r10,%rsi), %xmm0
    00000207: 	movupd	0x10(%r9,%rsi), %xmm11
    0000020e: 	movupd	(%r8,%rsi), %xmm12
    00000214: 	addpd	%xmm1, %xmm0
    00000218: 	movupd	(%r12,%rsi), %xmm1
    0000021e: 	addpd	%xmm1, %xmm0
    00000222: 	movupd	0x10(%r8,%rsi), %xmm1
    00000229: 	addpd	%xmm1, %xmm0
    0000022d: 	movupd	(%r10,%rsi), %xmm1
    00000233: 	addpd	%xmm10, %xmm1
    00000238: 	addpd	%xmm3, %xmm0
    0000023c: 	addpd	%xmm11, %xmm1
    00000241: 	mulpd	%xmm6, %xmm0
    00000245: 	addpd	%xmm12, %xmm1
    0000024a: 	addpd	%xmm3, %xmm1
    0000024e: 	mulpd	%xmm6, %xmm1
    00000252: 	movups	%xmm1, (%r13,%rsi)
    00000258: 	movups	%xmm0, (%rbp,%rsi)
    0000025d: 	addq	$0x20, %rsi
    00000261: 	cmpl	%r14d, %edi
    00000264: 	jb	.Ltmp2766 # Offset: 612
    00000266: 	movl	%r14d, 0x10(%rsp)
    0000026b: 	movl	0x3c(%rsp), %esi
.Ltmp2783:
    0000026f: 	leal	0x1(%rsi), %r8d
    00000273: 	leal	0x2(%rax,%rsi), %ebp
    00000277: 	leal	(%rax,%rsi), %r10d
    0000027b: 	leal	(%rax,%r8), %r9d
    0000027f: 	movslq	%ebp, %rbp
    00000282: 	leaq	(%rbx,%rbp,8), %r12
    00000286: 	movslq	%r10d, %r10
    00000289: 	leal	(%rdx,%r8), %ebp
    0000028d: 	movslq	%r9d, %r9
    00000290: 	movsd	(%rbx,%r9,8), %xmm9
    00000296: 	movslq	%ebp, %rbp
    00000299: 	addl	%ecx, %r8d
    0000029c: 	leal	0x3(%rsi), %edi
    0000029f: 	movsd	(%rbx,%r10,8), %xmm0
    000002a5: 	movupd	(%rbx,%rbp,8), %xmm1
    000002aa: 	movslq	%r8d, %r8
    000002ad: 	leal	-0x1(%rax,%rsi), %ebp
    000002b1: 	movslq	%ebp, %rbp
    000002b4: 	unpcklpd	%xmm9, %xmm0
    000002b9: 	addpd	%xmm0, %xmm1
    000002bd: 	movupd	(%r12), %xmm0
    000002c3: 	addpd	%xmm0, %xmm1
    000002c7: 	movupd	(%rbx,%r8,8), %xmm0
    000002cd: 	leal	(%rdx,%rdi), %r8d
    000002d1: 	movslq	%r8d, %r8
    000002d4: 	addpd	%xmm0, %xmm1
    000002d8: 	movsd	(%rbx,%r8,8), %xmm0
    000002de: 	leal	0x4(%rax,%rsi), %r8d
    000002e3: 	movslq	%r8d, %r8
    000002e6: 	addsd	(%r12), %xmm0
    000002ec: 	addsd	(%rbx,%r8,8), %xmm0
    000002f2: 	leal	(%rcx,%rdi), %r8d
    000002f6: 	addl	%eax, %edi
    000002f8: 	movslq	%r8d, %r8
    000002fb: 	addpd	%xmm3, %xmm1
    000002ff: 	movslq	%edi, %rdi
    00000302: 	addsd	(%rbx,%r8,8), %xmm0
    00000308: 	leal	(%rdx,%rsi), %r8d
    0000030c: 	addl	%ecx, %esi
    0000030e: 	movslq	%r8d, %r8
    00000311: 	movslq	%esi, %rsi
    00000314: 	mulpd	%xmm2, %xmm1
    00000318: 	movsd	(%rbx,%rbp,8), %xmm2
    0000031d: 	addsd	(%rbx,%r8,8), %xmm2
    00000323: 	addsd	%xmm4, %xmm0
    00000327: 	addsd	%xmm9, %xmm2
    0000032c: 	addsd	(%rbx,%rsi,8), %xmm2
    00000331: 	movl	%r11d, %esi
    00000334: 	mulsd	%xmm5, %xmm0
    00000338: 	addsd	%xmm4, %xmm2
    0000033c: 	mulsd	%xmm5, %xmm2
    00000340: 	movsd	%xmm2, (%r15,%r10,8)
    00000346: 	movups	%xmm1, (%r15,%r9,8)
    0000034b: 	movsd	%xmm0, (%r15,%rdi,8)
.Ltmp2764:
    00000351: 	cmpl	0x24(%rsp), %esi
    00000355: 	jge	.Ltmp2767 # Offset: 853
    0000035b: 	movslq	%esi, %r9
    0000035e: 	movslq	%ecx, %r12
    00000361: 	movslq	%eax, %rbp
    00000364: 	movslq	%edx, %r8
    00000367: 	addq	%r9, %rbp
    0000036a: 	leaq	0x1(%r9,%r8), %r8
    0000036f: 	movl	0x38(%rsp), %edi
    00000373: 	leaq	0x1(%r9,%r12), %r9
    00000378: 	movq	%r15, %r12
    0000037b: 	shlq	$0x3, %r8
    0000037f: 	leaq	(,%rbp,8), %r13
    00000387: 	subq	%rbx, %r12
    0000038a: 	subl	%esi, %edi
    0000038c: 	shlq	$0x3, %r9
    00000390: 	leaq	(%r15,%r13), %r10
    00000394: 	cmpq	$0x10, %r12
    00000398: 	seta	%r12b
    0000039c: 	cmpl	$0x2, %edi
    0000039f: 	setne	0x18(%rsp)
    000003a4: 	movzbl	0x18(%rsp), %r14d
    000003aa: 	andl	%r14d, %r12d
    000003ad: 	leaq	(%rbx,%r8), %r14
    000003b1: 	cmpq	%r14, %r10
    000003b4: 	setne	0x18(%rsp)
    000003b9: 	movzbl	0x18(%rsp), %r14d
    000003bf: 	testb	%r12b, %r14b
    000003c2: 	je	.Ltmp2768 # Offset: 962
    000003c8: 	leaq	(%rbx,%r9), %r12
    000003cc: 	cmpq	%r12, %r10
    000003cf: 	je	.Ltmp2768 # Offset: 975
    000003d5: 	leaq	-0x8(%rbx,%r13), %r12
    000003da: 	leaq	0x8(%rbx,%r13), %r13
    000003df: 	subl	$0x1, %edi
    000003e2: 	movupd	(%r13), %xmm2
    000003e8: 	movupd	(%r12), %xmm0
    000003ee: 	leaq	-0x8(%rbx,%r8), %rbp
    000003f3: 	leaq	-0x8(%rbx,%r9), %r8
    000003f8: 	movl	%edi, %r9d
    000003fb: 	addpd	%xmm2, %xmm0
    000003ff: 	movupd	(%rbp), %xmm2
    00000404: 	shrl	%r9d
    00000407: 	addpd	%xmm2, %xmm0
    0000040b: 	movupd	(%r8), %xmm2
    00000410: 	addpd	%xmm2, %xmm0
    00000414: 	addpd	%xmm3, %xmm0
    00000418: 	mulpd	%xmm6, %xmm0
    0000041c: 	movups	%xmm0, (%r10)
    00000420: 	cmpl	$0x1, %r9d
    00000424: 	je	.Ltmp2769 # Offset: 1060
    00000426: 	movupd	0x10(%r12), %xmm1
    0000042d: 	movupd	0x10(%r13), %xmm0
    00000433: 	addpd	%xmm1, %xmm0
    00000437: 	movupd	0x10(%rbp), %xmm1
    0000043c: 	addpd	%xmm1, %xmm0
    00000440: 	movupd	0x10(%r8), %xmm1
    00000446: 	addpd	%xmm1, %xmm0
    0000044a: 	addpd	%xmm3, %xmm0
    0000044e: 	mulpd	%xmm6, %xmm0
    00000452: 	movups	%xmm0, 0x10(%r10)
.Ltmp2769:
    00000457: 	movl	%edi, %r8d
    0000045a: 	andl	$-0x2, %r8d
    0000045e: 	addl	%r8d, %esi
    00000461: 	cmpl	%edi, %r8d
    00000464: 	je	.Ltmp2767 # Offset: 1124
    00000466: 	leal	(%rdx,%rsi), %edi
    00000469: 	leal	0x1(%rax,%rsi), %r9d
    0000046e: 	leal	-0x1(%rax,%rsi), %r8d
    00000473: 	movslq	%edi, %rdi
    00000476: 	movslq	%r9d, %r9
    00000479: 	movslq	%r8d, %r8
    0000047c: 	movsd	(%rbx,%r9,8), %xmm0
    00000482: 	addsd	(%rbx,%r8,8), %xmm0
    00000488: 	addsd	(%rbx,%rdi,8), %xmm0
    0000048d: 	leal	(%rax,%rsi), %edi
    00000490: 	addl	%ecx, %esi
    00000492: 	movslq	%esi, %rsi
    00000495: 	movslq	%edi, %rdi
    00000498: 	addsd	(%rbx,%rsi,8), %xmm0
    0000049d: 	addsd	%xmm4, %xmm0
    000004a1: 	mulsd	%xmm5, %xmm0
    000004a5: 	movsd	%xmm0, (%r15,%rdi,8)
.Ltmp2767:
    000004ab: 	movl	0x2c(%rsp), %edi
    000004af: 	movl	0x8(%rsp), %esi
    000004b3: 	addl	%edi, %edx
    000004b5: 	addl	%edi, %eax
    000004b7: 	addl	%edi, %ecx
    000004b9: 	cmpl	%esi, 0x28(%rsp)
    000004bd: 	jne	.Ltmp2770 # Offset: 1213
    000004c3: 	movl	0x10(%rsp), %r14d
.Ltmp2763:
    000004c8: 	cmpq	$0x0, 0x40(%rsp)
    000004ce: 	je	.Ltmp2771 # Offset: 1230
    000004d4: 	cmpl	$0x1, 0x4c(%rsp)
    000004d9: 	je	.Ltmp2772 # Offset: 1241
    000004df: 	movq	0x60(%rsp), %rdx
    000004e4: 	xorl	%eax, %eax
    000004e6: 	movapd	%xmm4, %xmm1
    000004ea: 	pxor	%xmm5, %xmm5
    000004ee: 	movapd	DATAat0x494f0(%rip), %xmm9
    000004f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2773:
    00000500: 	movupd	(%r15,%rax), %xmm3
    00000506: 	movupd	(%rbx,%rax), %xmm2
    0000050b: 	addq	$0x10, %rax
    0000050f: 	subpd	%xmm3, %xmm2
    00000513: 	movapd	%xmm2, %xmm0
    00000517: 	movapd	%xmm2, %xmm3
    0000051b: 	cmpltpd	%xmm5, %xmm0
    00000520: 	xorpd	%xmm9, %xmm3
    00000525: 	andpd	%xmm0, %xmm3
    00000529: 	andnpd	%xmm2, %xmm0
    0000052d: 	orpd	%xmm3, %xmm0
    00000531: 	addsd	%xmm0, %xmm1
    00000535: 	unpckhpd	%xmm0, %xmm0
    00000539: 	addsd	%xmm0, %xmm1
    0000053d: 	cmpq	%rax, %rdx
    00000540: 	jne	.Ltmp2773 # Offset: 1344
    00000542: 	movq	0x58(%rsp), %rax
    00000547: 	cmpq	%rax, 0x40(%rsp)
    0000054c: 	je	.Ltmp2774 # Offset: 1356
.Ltmp2785:
    0000054e: 	movsd	(%rbx,%rax,8), %xmm0
    00000553: 	subsd	(%r15,%rax,8), %xmm0
    00000559: 	comisd	%xmm0, %xmm4
    0000055d: 	jbe	.Ltmp2775 # Offset: 1373
    0000055f: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2775:
    00000567: 	addsd	%xmm0, %xmm1
.Ltmp2774:
    0000056b: 	movq	0x40(%rsp), %rdx
    00000570: 	movapd	%xmm4, %xmm2
    00000574: 	xorl	%eax, %eax
    00000576: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2777:
    00000580: 	movsd	(%rbx,%rax,8), %xmm0
    00000585: 	subsd	(%r15,%rax,8), %xmm0
    0000058b: 	comisd	%xmm0, %xmm4
    0000058f: 	jbe	.Ltmp2776 # Offset: 1423
    00000591: 	xorpd	%xmm7, %xmm0
.Ltmp2776:
    00000595: 	maxsd	%xmm2, %xmm0
    00000599: 	addq	$0x1, %rax
    0000059d: 	movapd	%xmm0, %xmm2
    000005a1: 	cmpq	%rax, %rdx
    000005a4: 	jne	.Ltmp2777 # Offset: 1444
    000005a6: 	movl	0x48(%rsp), %eax
    000005aa: 	cmpl	%eax, 0xf0(%rsp)
    000005b1: 	jge	.Ltmp2778 # Offset: 1457
    000005b3: 	movsd	DATAat0x49538(%rip), %xmm0
    000005bb: 	comisd	%xmm1, %xmm0
    000005bf: 	ja	.Ltmp2779 # Offset: 1471
    000005c5: 	ucomisd	%xmm1, %xmm1
    000005c9: 	jp	.Ltmp2780 # Offset: 1481
    000005cf: 	movsd	DATAat0x49540(%rip), %xmm0
    000005d7: 	comisd	%xmm2, %xmm0
    000005db: 	ja	.Ltmp2781 # Offset: 1499
    000005e1: 	ucomisd	%xmm2, %xmm2
    000005e5: 	jp	.Ltmp2780 # Offset: 1509
.Ltmp2778:
    000005eb: 	addl	$0x1, 0x48(%rsp)
    000005f0: 	movq	%r15, %rax
    000005f3: 	movl	0x48(%rsp), %ecx
    000005f7: 	movq	%rbx, %r15
    000005fa: 	cmpl	0x50(%rsp), %ecx
    000005fe: 	je	.Ltmp2779 # Offset: 1534
    00000604: 	movq	%rax, %rbx
    00000607: 	jmp	.Ltmp2782 # Offset: 1543
    0000060c: 	nopl	(%rax) # Size: 4
.Ltmp2768:
    00000610: 	leal	0x1(%rsi), %edi
    00000613: 	leal	-0x1(%rax,%rsi), %r13d
    00000618: 	leal	(%rdi,%rax), %r12d
    0000061c: 	movslq	%r13d, %r13
    0000061f: 	movslq	%r12d, %r12
    00000622: 	movsd	(%rbx,%r13,8), %xmm0
    00000628: 	leaq	(%rbx,%r12,8), %r14
    0000062c: 	addsd	(%r14), %xmm0
    00000631: 	addsd	-0x8(%rbx,%r8), %xmm0
    00000638: 	movq	%r14, 0x18(%rsp)
    0000063d: 	addsd	-0x8(%rbx,%r9), %xmm0
    00000644: 	movl	0x24(%rsp), %r14d
    00000649: 	addsd	%xmm4, %xmm0
    0000064d: 	mulsd	%xmm8, %xmm0
    00000652: 	movsd	%xmm0, (%r10)
    00000657: 	cmpl	%r14d, %edi
    0000065a: 	jge	.Ltmp2767 # Offset: 1626
    00000660: 	leal	0x2(%rsi), %r8d
    00000664: 	leal	(%rdi,%rdx), %r9d
    00000668: 	addl	%ecx, %edi
    0000066a: 	movsd	(%rbx,%rbp,8), %xmm0
    0000066f: 	leal	(%r8,%rax), %r10d
    00000673: 	movslq	%r9d, %r9
    00000676: 	movslq	%edi, %rdi
    00000679: 	movslq	%r10d, %r10
    0000067c: 	leaq	(%rbx,%r10,8), %r13
    00000680: 	addsd	(%r13), %xmm0
    00000686: 	addsd	(%rbx,%r9,8), %xmm0
    0000068c: 	addsd	(%rbx,%rdi,8), %xmm0
    00000691: 	addsd	%xmm4, %xmm0
    00000695: 	mulsd	%xmm8, %xmm0
    0000069a: 	movsd	%xmm0, (%r15,%r12,8)
    000006a0: 	cmpl	%r14d, %r8d
    000006a3: 	jge	.Ltmp2767 # Offset: 1699
    000006a9: 	leal	0x3(%rsi), %edi
    000006ac: 	leal	(%r8,%rdx), %ebp
    000006b0: 	movq	0x18(%rsp), %r12
    000006b5: 	addl	%ecx, %r8d
    000006b8: 	leal	(%rdi,%rax), %r9d
    000006bc: 	movslq	%ebp, %rbp
    000006bf: 	movslq	%r8d, %r8
    000006c2: 	movslq	%r9d, %r9
    000006c5: 	movsd	(%rbx,%r9,8), %xmm0
    000006cb: 	addsd	(%r12), %xmm0
    000006d1: 	addsd	(%rbx,%rbp,8), %xmm0
    000006d6: 	addsd	(%rbx,%r8,8), %xmm0
    000006dc: 	addsd	%xmm4, %xmm0
    000006e0: 	mulsd	%xmm8, %xmm0
    000006e5: 	movsd	%xmm0, (%r15,%r10,8)
    000006eb: 	cmpl	%r14d, %edi
    000006ee: 	jge	.Ltmp2767 # Offset: 1774
    000006f4: 	leal	0x4(%rax,%rsi), %esi
    000006f8: 	leal	(%rdi,%rdx), %r8d
    000006fc: 	movslq	%esi, %rsi
    000006ff: 	movslq	%r8d, %r8
    00000702: 	movsd	(%rbx,%rsi,8), %xmm0
    00000707: 	leal	(%rdi,%rcx), %esi
    0000070a: 	addsd	(%r13), %xmm0
    00000710: 	movslq	%esi, %rsi
    00000713: 	addsd	(%rbx,%r8,8), %xmm0
    00000719: 	addsd	(%rbx,%rsi,8), %xmm0
    0000071e: 	addsd	%xmm4, %xmm0
    00000722: 	mulsd	%xmm8, %xmm0
    00000727: 	movsd	%xmm0, (%r15,%r9,8)
    0000072d: 	jmp	.Ltmp2767 # Offset: 1837
.Ltmp2765:
    00000732: 	movl	$0x1, %esi
    00000737: 	movapd	%xmm6, %xmm2
    0000073b: 	jmp	.Ltmp2783 # Offset: 1851
.Ltmp2771:
    00000740: 	movl	0x48(%rsp), %eax
    00000744: 	movapd	%xmm4, %xmm1
    00000748: 	cmpl	%eax, 0xf0(%rsp)
    0000074f: 	jl	.Ltmp2784 # Offset: 1871
    00000751: 	movapd	%xmm4, %xmm2
    00000755: 	jmp	.Ltmp2778 # Offset: 1877
.Ltmp2772:
    0000075a: 	movapd	%xmm4, %xmm1
    0000075e: 	xorl	%eax, %eax
    00000760: 	jmp	.Ltmp2785 # Offset: 1888
.Ltmp2784:
    00000765: 	movapd	%xmm1, %xmm2
.Ltmp2779:
    00000769: 	ucomisd	%xmm1, %xmm1
    0000076d: 	setp	%bpl
    00000771: 	ucomisd	%xmm2, %xmm2
    00000775: 	setp	%al
    00000778: 	orl	%eax, %ebp
.Ltmp2791:
    0000077a: 	movsd	%xmm2, 0x10(%rsp)
    00000780: 	movsd	%xmm1, 0x8(%rsp)
    00000786: 	callq	clock@PLT # Offset: 1926
    0000078b: 	movl	0x70(%rsp), %ecx
    0000078f: 	pxor	%xmm0, %xmm0
    00000793: 	movsd	0x78(%rsp), %xmm7
    00000799: 	movq	%rax, end_time(%rip)
    000007a0: 	subq	start_time(%rip), %rax
    000007a7: 	cvtsi2sd	%rax, %xmm0
    000007ac: 	movl	%ecx, %eax
    000007ae: 	divsd	DATAat0x49520(%rip), %xmm0
    000007b6: 	movsd	0x8(%rsp), %xmm1
    000007bc: 	shrl	$0x1f, %eax
    000007bf: 	movsd	0x10(%rsp), %xmm2
    000007c5: 	movq	%xmm0, %rbx
    000007ca: 	addl	%ecx, %eax
    000007cc: 	movl	0x38(%rsp), %ecx
    000007d0: 	sarl	%eax
    000007d2: 	movl	%ecx, %edx
    000007d4: 	imull	%ecx, %eax
    000007d7: 	shrl	$0x1f, %edx
    000007da: 	addl	%ecx, %edx
    000007dc: 	sarl	%edx
    000007de: 	addl	%edx, %eax
    000007e0: 	testb	%bpl, %bpl
    000007e3: 	cltq
    000007e5: 	subsd	(%r15,%rax,8), %xmm7
    000007eb: 	movq	0x68(%rsp), %rax
    000007f0: 	movq	0x8(%rax), %rdx
    000007f4: 	movq	(%rax), %rsi
    000007f7: 	movq	%xmm7, %r12
    000007fc: 	jne	.Ltmp2786 # Offset: 2044
    00000802: 	movl	0x48(%rsp), %eax
    00000806: 	cmpl	%eax, iterations(%rip)
    0000080c: 	jg	.Ltmp2787 # Offset: 2060
    0000080e: 	comisd	DATAat0x49538(%rip), %xmm1
    00000816: 	jbe	.Ltmp2787 # Offset: 2070
    00000818: 	comisd	DATAat0x49540(%rip), %xmm2
    00000820: 	ja	.Ltmp2788 # Offset: 2080
.Ltmp2787:
    00000826: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000082d: 	movsd	%xmm2, 0x10(%rsp)
    00000833: 	movq	%rbp, %rdi
    00000836: 	movsd	%xmm1, 0x8(%rsp)
    0000083c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2108
    00000841: 	movl	$0xa, %edx
    00000846: 	leaq	DATAat0x491ab(%rip), %rsi
    0000084d: 	movq	%rax, %rdi
    00000850: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2128
    00000855: 	movsd	0x10(%rsp), %xmm2
    0000085b: 	movsd	0x8(%rsp), %xmm1
.Ltmp2790:
    00000861: 	movl	$0x4, %edx
    00000866: 	movq	%rbp, %rdi
    00000869: 	leaq	DATAat0x491b6(%rip), %rsi
    00000870: 	movsd	%xmm2, 0x10(%rsp)
    00000876: 	movsd	%xmm1, 0x8(%rsp)
    0000087c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2172
    00000881: 	movl	0x48(%rsp), %esi
    00000885: 	movq	%rbp, %rdi
    00000888: 	callq	_ZNSolsEi@PLT # Offset: 2184
    0000088d: 	movl	$0xb, %edx
    00000892: 	leaq	DATAat0x491bb(%rip), %rsi
    00000899: 	movq	%rax, %rdi
    0000089c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2204
    000008a1: 	movl	$0xa, %edx
    000008a6: 	leaq	DATAat0x491c7(%rip), %rsi
    000008ad: 	movq	%rbp, %rdi
    000008b0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2224
    000008b5: 	movsd	0x8(%rsp), %xmm1
    000008bb: 	movq	%rbp, %rdi
    000008be: 	movapd	%xmm1, %xmm0
    000008c2: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2242
    000008c7: 	movl	$0x7, %edx
    000008cc: 	leaq	DATAat0x491d2(%rip), %rsi
    000008d3: 	movq	%rax, %rdi
    000008d6: 	movq	%rax, %rbp
    000008d9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2265
    000008de: 	movsd	0x10(%rsp), %xmm2
    000008e4: 	movq	%rbp, %rdi
    000008e7: 	movapd	%xmm2, %xmm0
    000008eb: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2283
    000008f0: 	movl	$0x10, %edx
    000008f5: 	leaq	DATAat0x491da(%rip), %rsi
    000008fc: 	movq	%rax, %rbp
    000008ff: 	movq	%rax, %rdi
    00000902: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2306
    00000907: 	movq	%r12, %xmm0
    0000090c: 	movq	%rbp, %rdi
    0000090f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2319
    00000914: 	movl	$0x8, %edx
    00000919: 	leaq	DATAat0x491eb(%rip), %rsi
    00000920: 	movq	%rax, %rbp
    00000923: 	movq	%rax, %rdi
    00000926: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2342
    0000092b: 	movq	%rbx, %xmm0
    00000930: 	movq	%rbp, %rdi
    00000933: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2355
    00000938: 	movl	$0x2, %edx
    0000093d: 	leaq	DATAat0x491f4(%rip), %rsi
    00000944: 	movq	%rax, %rdi
    00000947: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2375
    0000094c: 	movl	0x74(%rsp), %eax
    00000950: 	movl	%eax, iterations(%rip)
    00000956: 	movq	0xa8(%rsp), %rax
    0000095e: 	subq	%fs:0x28, %rax
    00000967: 	jne	.Ltmp2789 # Offset: 2407
    0000096d: 	addq	$0xb8, %rsp
    00000974: 	popq	%rbx
    00000975: 	popq	%rbp
    00000976: 	popq	%r12
    00000978: 	popq	%r13
    0000097a: 	popq	%r14
    0000097c: 	popq	%r15
    0000097e: 	retq # Offset: 2430
.Ltmp2786:
    0000097f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000986: 	movq	%rbp, %rdi
    00000989: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2441
    0000098e: 	movl	$0x10, %edx
    00000993: 	leaq	DATAat0x493d4(%rip), %rsi
    0000099a: 	movq	%rax, %rdi
    0000099d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2461
    000009a2: 	movsd	0x8(%rsp), %xmm1
    000009a8: 	movsd	0x10(%rsp), %xmm2
    000009ae: 	jmp	.Ltmp2790 # Offset: 2478
.Ltmp2780:
    000009b3: 	movl	$0x1, %ebp
    000009b8: 	jmp	.Ltmp2791 # Offset: 2488
.Ltmp2788:
    000009bd: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000009c4: 	movsd	%xmm2, 0x10(%rsp)
    000009ca: 	movq	%rbp, %rdi
    000009cd: 	movsd	%xmm1, 0x8(%rsp)
    000009d3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2515
    000009d8: 	movl	$0x11, %edx
    000009dd: 	leaq	DATAat0x49199(%rip), %rsi
    000009e4: 	movq	%rax, %rdi
    000009e7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2535
    000009ec: 	movsd	0x8(%rsp), %xmm1
    000009f2: 	movsd	0x10(%rsp), %xmm2
    000009f8: 	jmp	.Ltmp2790 # Offset: 2552
.Ltmp2781:
    000009fd: 	ucomisd	%xmm2, %xmm2
    00000a01: 	setp	%bpl
    00000a05: 	jmp	.Ltmp2791 # Offset: 2565
.Ltmp2762:
    00000a0a: 	pxor	%xmm2, %xmm2
    00000a0e: 	movl	$0x0, 0x48(%rsp)
    00000a16: 	xorl	%ebp, %ebp
    00000a18: 	movapd	%xmm2, %xmm1
    00000a1c: 	jmp	.Ltmp2791 # Offset: 2588
.Ltmp2789:
    00000a21: 	callq	__stack_chk_fail@PLT # Offset: 2593
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd18jacobi2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd18jacobi2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x40460
  Size        : 0x555
  MaxSize     : 0x560
  Offset      : 0x40460
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd18jacobi2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movl	%ecx, %r12d
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r15d, %esi
    0000001d: 	imull	%r12d, %r15d
    00000021: 	subq	$0x78, %rsp
    00000025: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002d: 	movl	%edx, 0x8(%rsp)
    00000031: 	leaq	0x40(%rsp), %rcx
    00000036: 	movl	%r12d, %edx
    00000039: 	movl	%r8d, 0x10(%rsp)
    0000003e: 	movq	%r9, 0x38(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0x68(%rsp)
    00000051: 	xorl	%eax, %eax
    00000053: 	movaps	%xmm0, 0x40(%rsp)
    00000058: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000060: 	movaps	%xmm0, 0x50(%rsp)
    00000065: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 101
    0000006a: 	movl	%r15d, 0x28(%rsp)
    0000006f: 	movsd	%xmm0, 0x30(%rsp)
    00000075: 	testl	%r15d, %r15d
    00000078: 	jle	.Ltmp2792 # Offset: 120
    0000007a: 	movslq	%r15d, %rdx
    0000007d: 	movq	%r13, %rsi
    00000080: 	movq	%rbx, %rdi
    00000083: 	shlq	$0x3, %rdx
    00000087: 	callq	memmove@PLT # Offset: 135
.Ltmp2792:
    0000008c: 	movl	iterations(%rip), %eax
    00000092: 	movl	$0x2710, iterations(%rip)
    0000009c: 	movl	%eax, 0x2c(%rsp)
    000000a0: 	callq	clock@PLT # Offset: 160
    000000a5: 	movq	%rax, start_time(%rip)
    000000ac: 	movl	iterations(%rip), %eax
    000000b2: 	movl	%eax, 0x18(%rsp)
    000000b6: 	testl	%eax, %eax
    000000b8: 	jle	.Ltmp2793 # Offset: 184
    000000be: 	movslq	0x28(%rsp), %rbp
    000000c3: 	movq	DATAat0x49500(%rip), %xmm3
    000000cb: 	xorl	%r15d, %r15d
    000000ce: 	pxor	%xmm14, %xmm14
    000000d3: 	movapd	DATAat0x494f0(%rip), %xmm15
    000000dc: 	movq	%rbp, %r11
    000000df: 	movq	%rbp, %rax
    000000e2: 	movapd	%xmm3, %xmm13
    000000e7: 	andq	$-0x2, %rax
    000000eb: 	shrq	%r11
    000000ee: 	movq	%rax, 0x20(%rsp)
    000000f3: 	shlq	$0x4, %r11
    000000f7: 	movq	%rbx, %rax
    000000fa: 	movq	%rbp, %rbx
    000000fd: 	movq	%rax, %r14
    00000100: 	movq	%r11, %rbp
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2805:
    00000108: 	movl	0x10(%rsp), %r8d
    0000010d: 	movl	0x8(%rsp), %edx
    00000111: 	movl	%r12d, %ecx
    00000114: 	movq	%r14, %rsi
    00000117: 	movq	%r13, %rdi
    0000011a: 	callq	"_ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/1" # Offset: 282
    0000011f: 	testq	%rbx, %rbx
    00000122: 	movq	DATAat0x49500(%rip), %xmm3
    0000012a: 	je	.Ltmp2794 # Offset: 298
    00000130: 	cmpl	$0x1, 0x28(%rsp)
    00000135: 	je	.Ltmp2795 # Offset: 309
    0000013b: 	xorl	%edx, %edx
    0000013d: 	movapd	%xmm14, %xmm1
    00000142: 	pxor	%xmm6, %xmm6
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2796:
    00000150: 	movupd	(%r13,%rdx), %xmm2
    00000157: 	movupd	(%r14,%rdx), %xmm4
    0000015d: 	addq	$0x10, %rdx
    00000161: 	subpd	%xmm4, %xmm2
    00000165: 	movapd	%xmm2, %xmm0
    00000169: 	movapd	%xmm2, %xmm5
    0000016d: 	cmpltpd	%xmm6, %xmm0
    00000172: 	xorpd	%xmm15, %xmm5
    00000177: 	andpd	%xmm0, %xmm5
    0000017b: 	andnpd	%xmm2, %xmm0
    0000017f: 	orpd	%xmm5, %xmm0
    00000183: 	addsd	%xmm0, %xmm1
    00000187: 	unpckhpd	%xmm0, %xmm0
    0000018b: 	addsd	%xmm0, %xmm1
    0000018f: 	cmpq	%rdx, %rbp
    00000192: 	jne	.Ltmp2796 # Offset: 402
    00000194: 	movq	0x20(%rsp), %rdx
    00000199: 	cmpq	%rdx, %rbx
    0000019c: 	je	.Ltmp2797 # Offset: 412
.Ltmp2807:
    0000019e: 	movsd	(%r13,%rdx,8), %xmm0
    000001a5: 	subsd	(%r14,%rdx,8), %xmm0
    000001ab: 	comisd	%xmm0, %xmm14
    000001b0: 	jbe	.Ltmp2798 # Offset: 432
    000001b2: 	xorpd	%xmm13, %xmm0
.Ltmp2798:
    000001b7: 	addsd	%xmm0, %xmm1
.Ltmp2797:
    000001bb: 	movapd	%xmm14, %xmm2
    000001c0: 	xorl	%edx, %edx
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2800:
    000001c8: 	movsd	(%r13,%rdx,8), %xmm0
    000001cf: 	subsd	(%r14,%rdx,8), %xmm0
    000001d5: 	comisd	%xmm0, %xmm14
    000001da: 	jbe	.Ltmp2799 # Offset: 474
    000001dc: 	xorpd	%xmm3, %xmm0
.Ltmp2799:
    000001e0: 	maxsd	%xmm2, %xmm0
    000001e4: 	addq	$0x1, %rdx
    000001e8: 	movapd	%xmm0, %xmm2
    000001ec: 	cmpq	%rdx, %rbx
    000001ef: 	jne	.Ltmp2800 # Offset: 495
    000001f1: 	cmpl	%r15d, 0xb0(%rsp)
    000001f9: 	jge	.Ltmp2801 # Offset: 505
    000001fb: 	movsd	DATAat0x49538(%rip), %xmm7
    00000203: 	comisd	%xmm1, %xmm7
    00000207: 	ja	.Ltmp2802 # Offset: 519
    00000209: 	ucomisd	%xmm1, %xmm1
    0000020d: 	jp	.Ltmp2803 # Offset: 525
    00000213: 	movsd	DATAat0x49540(%rip), %xmm0
    0000021b: 	comisd	%xmm2, %xmm0
    0000021f: 	ja	.Ltmp2804 # Offset: 543
    00000225: 	ucomisd	%xmm2, %xmm2
    00000229: 	jp	.Ltmp2803 # Offset: 553
.Ltmp2801:
    0000022f: 	movq	%r14, %rdx
    00000232: 	addl	$0x1, %r15d
    00000236: 	movq	%r13, %r14
    00000239: 	cmpl	0x18(%rsp), %r15d
    0000023e: 	je	.Ltmp2802 # Offset: 574
    00000240: 	movq	%rdx, %r13
    00000243: 	jmp	.Ltmp2805 # Offset: 579
    00000248: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2794:
    00000250: 	cmpl	%r15d, 0xb0(%rsp)
    00000258: 	jl	.Ltmp2806 # Offset: 600
    0000025e: 	movapd	%xmm14, %xmm2
    00000263: 	movapd	%xmm14, %xmm1
    00000268: 	jmp	.Ltmp2801 # Offset: 616
.Ltmp2795:
    0000026a: 	movapd	%xmm14, %xmm1
    0000026f: 	xorl	%edx, %edx
    00000271: 	jmp	.Ltmp2807 # Offset: 625
.Ltmp2802:
    00000276: 	movq	%r14, %rbx
.Ltmp2814:
    00000279: 	ucomisd	%xmm2, %xmm2
    0000027d: 	setp	%bpl
    00000281: 	ucomisd	%xmm1, %xmm1
    00000285: 	setp	%al
    00000288: 	orl	%eax, %ebp
.Ltmp2813:
    0000028a: 	movsd	%xmm1, 0x18(%rsp)
    00000290: 	movsd	%xmm2, 0x10(%rsp)
    00000296: 	callq	clock@PLT # Offset: 662
    0000029b: 	movl	0x8(%rsp), %ecx
    0000029f: 	pxor	%xmm0, %xmm0
    000002a3: 	movl	%r12d, %edx
    000002a6: 	movq	%rax, end_time(%rip)
    000002ad: 	subq	start_time(%rip), %rax
    000002b4: 	shrl	$0x1f, %edx
    000002b7: 	cvtsi2sd	%rax, %xmm0
    000002bc: 	movl	%ecx, %eax
    000002be: 	addl	%r12d, %edx
    000002c1: 	movsd	0x30(%rsp), %xmm7
    000002c7: 	shrl	$0x1f, %eax
    000002ca: 	sarl	%edx
    000002cc: 	divsd	DATAat0x49520(%rip), %xmm0
    000002d4: 	movsd	0x10(%rsp), %xmm2
    000002da: 	addl	%ecx, %eax
    000002dc: 	movsd	0x18(%rsp), %xmm1
    000002e2: 	movq	%xmm0, %r14
    000002e7: 	sarl	%eax
    000002e9: 	imull	%r12d, %eax
    000002ed: 	addl	%edx, %eax
    000002ef: 	testb	%bpl, %bpl
    000002f2: 	cltq
    000002f4: 	subsd	(%rbx,%rax,8), %xmm7
    000002f9: 	movq	%xmm7, %rbx
    000002fe: 	jne	.Ltmp2808 # Offset: 766
    00000304: 	movq	0x38(%rsp), %rax
    00000309: 	cmpl	%r15d, iterations(%rip)
    00000310: 	movq	0x8(%rax), %rdx
    00000314: 	movq	(%rax), %rsi
    00000317: 	jg	.Ltmp2809 # Offset: 791
    00000319: 	comisd	DATAat0x49538(%rip), %xmm1
    00000321: 	jbe	.Ltmp2809 # Offset: 801
    00000323: 	comisd	DATAat0x49540(%rip), %xmm2
    0000032b: 	ja	.Ltmp2810 # Offset: 811
.Ltmp2809:
    00000331: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000338: 	movsd	%xmm1, 0x10(%rsp)
    0000033e: 	movq	%rbp, %rdi
    00000341: 	movsd	%xmm2, 0x8(%rsp)
    00000347: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 839
    0000034c: 	movl	$0xa, %edx
    00000351: 	leaq	DATAat0x491ab(%rip), %rsi
    00000358: 	movq	%rax, %rdi
    0000035b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 859
    00000360: 	movsd	0x10(%rsp), %xmm1
    00000366: 	movsd	0x8(%rsp), %xmm2
.Ltmp2812:
    0000036c: 	movl	$0x4, %edx
    00000371: 	movq	%rbp, %rdi
    00000374: 	leaq	DATAat0x491b6(%rip), %rsi
    0000037b: 	movsd	%xmm2, 0x8(%rsp)
    00000381: 	movsd	%xmm1, 0x10(%rsp)
    00000387: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 903
    0000038c: 	movq	%rbp, %rdi
    0000038f: 	movl	%r15d, %esi
    00000392: 	callq	_ZNSolsEi@PLT # Offset: 914
    00000397: 	movl	$0xb, %edx
    0000039c: 	leaq	DATAat0x491bb(%rip), %rsi
    000003a3: 	movq	%rax, %rdi
    000003a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 934
    000003ab: 	movl	$0xa, %edx
    000003b0: 	leaq	DATAat0x491c7(%rip), %rsi
    000003b7: 	movq	%rbp, %rdi
    000003ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 954
    000003bf: 	movsd	0x10(%rsp), %xmm1
    000003c5: 	movq	%rbp, %rdi
    000003c8: 	movapd	%xmm1, %xmm0
    000003cc: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 972
    000003d1: 	movl	$0x7, %edx
    000003d6: 	leaq	DATAat0x491d2(%rip), %rsi
    000003dd: 	movq	%rax, %rdi
    000003e0: 	movq	%rax, %rbp
    000003e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 995
    000003e8: 	movsd	0x8(%rsp), %xmm2
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	movapd	%xmm2, %xmm0
    000003f5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1013
    000003fa: 	movl	$0x10, %edx
    000003ff: 	leaq	DATAat0x491da(%rip), %rsi
    00000406: 	movq	%rax, %rbp
    00000409: 	movq	%rax, %rdi
    0000040c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1036
    00000411: 	movq	%rbx, %xmm0
    00000416: 	movq	%rbp, %rdi
    00000419: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1049
    0000041e: 	movl	$0x8, %edx
    00000423: 	leaq	DATAat0x491eb(%rip), %rsi
    0000042a: 	movq	%rax, %rbp
    0000042d: 	movq	%rax, %rdi
    00000430: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1072
    00000435: 	movq	%r14, %xmm0
    0000043a: 	movq	%rbp, %rdi
    0000043d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1085
    00000442: 	movl	$0x2, %edx
    00000447: 	leaq	DATAat0x491f4(%rip), %rsi
    0000044e: 	movq	%rax, %rdi
    00000451: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1105
    00000456: 	movl	0x2c(%rsp), %eax
    0000045a: 	movl	%eax, iterations(%rip)
    00000460: 	movq	0x68(%rsp), %rax
    00000465: 	subq	%fs:0x28, %rax
    0000046e: 	jne	.Ltmp2811 # Offset: 1134
    00000474: 	addq	$0x78, %rsp
    00000478: 	popq	%rbx
    00000479: 	popq	%rbp
    0000047a: 	popq	%r12
    0000047c: 	popq	%r13
    0000047e: 	popq	%r14
    00000480: 	popq	%r15
    00000482: 	retq # Offset: 1154
.Ltmp2808:
    00000483: 	movq	0x38(%rsp), %rax
    00000488: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000048f: 	movsd	%xmm1, 0x10(%rsp)
    00000495: 	movq	%rbp, %rdi
    00000498: 	movsd	%xmm2, 0x8(%rsp)
    0000049e: 	movq	0x8(%rax), %rdx
    000004a2: 	movq	(%rax), %rsi
    000004a5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1189
    000004aa: 	movl	$0x10, %edx
    000004af: 	leaq	DATAat0x493d4(%rip), %rsi
    000004b6: 	movq	%rax, %rdi
    000004b9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1209
    000004be: 	movsd	0x8(%rsp), %xmm2
    000004c4: 	movsd	0x10(%rsp), %xmm1
    000004ca: 	jmp	.Ltmp2812 # Offset: 1226
.Ltmp2803:
    000004cf: 	movq	%r14, %rbx
    000004d2: 	movl	$0x1, %ebp
    000004d7: 	jmp	.Ltmp2813 # Offset: 1239
.Ltmp2810:
    000004dc: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000004e3: 	movsd	%xmm1, 0x10(%rsp)
    000004e9: 	movq	%rbp, %rdi
    000004ec: 	movsd	%xmm2, 0x8(%rsp)
    000004f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1266
    000004f7: 	movl	$0x11, %edx
    000004fc: 	leaq	DATAat0x49199(%rip), %rsi
    00000503: 	movq	%rax, %rdi
    00000506: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1286
    0000050b: 	movsd	0x8(%rsp), %xmm2
    00000511: 	movsd	0x10(%rsp), %xmm1
    00000517: 	jmp	.Ltmp2812 # Offset: 1303
.Ltmp2806:
    0000051c: 	movq	%r14, %rbx
    0000051f: 	movapd	%xmm14, %xmm2
    00000524: 	movapd	%xmm14, %xmm1
    00000529: 	jmp	.Ltmp2814 # Offset: 1321
.Ltmp2804:
    0000052e: 	ucomisd	%xmm2, %xmm2
    00000532: 	movq	%r14, %rbx
    00000535: 	setp	%bpl
    00000539: 	jmp	.Ltmp2813 # Offset: 1337
.Ltmp2793:
    0000053e: 	pxor	%xmm2, %xmm2
    00000542: 	xorl	%ebp, %ebp
    00000544: 	xorl	%r15d, %r15d
    00000547: 	movapd	%xmm2, %xmm1
    0000054b: 	jmp	.Ltmp2813 # Offset: 1355
.Ltmp2811:
    00000550: 	callq	__stack_chk_fail@PLT # Offset: 1360
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd18jacobi2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd21jacobi_sor2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x409c0
  Size        : 0x86f
  MaxSize     : 0x870
  Offset      : 0x409c0
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd21jacobi_sor2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xe8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0xa0(%rsp)
    00000032: 	movl	%ebp, %edx
    00000034: 	movl	%ecx, 0x28(%rsp)
    00000038: 	leaq	0xb0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x10(%rsp)
    00000045: 	movq	%r9, 0x98(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xd8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movaps	%xmm0, 0xb0(%rsp)
    00000068: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000070: 	movaps	%xmm0, 0xc0(%rsp)
    00000078: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 120
    0000007d: 	movl	%r14d, %edi
    00000080: 	movsd	%xmm0, 0xa8(%rsp)
    00000089: 	imull	%ebp, %edi
    0000008c: 	movl	%edi, 0x64(%rsp)
    00000090: 	testl	%edi, %edi
    00000092: 	jle	.Ltmp2815 # Offset: 146
    00000094: 	movslq	%edi, %rdx
    00000097: 	movq	%rbx, %rsi
    0000009a: 	movq	%r15, %rdi
    0000009d: 	shlq	$0x3, %rdx
    000000a1: 	callq	memmove@PLT # Offset: 161
.Ltmp2815:
    000000a6: 	movl	iterations(%rip), %eax
    000000ac: 	movl	$0x2710, iterations(%rip)
    000000b6: 	movl	%eax, 0xa4(%rsp)
    000000bd: 	callq	clock@PLT # Offset: 189
    000000c2: 	movq	%rax, start_time(%rip)
    000000c9: 	movl	iterations(%rip), %eax
    000000cf: 	movl	%eax, 0x80(%rsp)
    000000d6: 	testl	%eax, %eax
    000000d8: 	jle	.Ltmp2816 # Offset: 216
    000000de: 	movl	0x10(%rsp), %esi
    000000e2: 	movl	0x28(%rsp), %eax
    000000e6: 	movl	$0x0, 0x3c(%rsp)
    000000ee: 	pxor	%xmm1, %xmm1
    000000f2: 	movl	0xa0(%rsp), %r14d
    000000fa: 	movslq	0x64(%rsp), %rdx
    000000ff: 	leal	-0x2(%rax), %edi
    00000102: 	movl	%esi, %eax
    00000104: 	movsd	DATAat0x49400(%rip), %xmm8
    0000010d: 	movsd	DATAat0x49410(%rip), %xmm7
    00000115: 	negl	%eax
    00000117: 	leal	-0x2(%r14), %ecx
    0000011b: 	movl	%edi, 0x2c(%rsp)
    0000011f: 	movapd	DATAat0x49400(%rip), %xmm6
    00000127: 	cltq
    00000129: 	movl	%ecx, 0x60(%rsp)
    0000012d: 	movapd	DATAat0x49410(%rip), %xmm5
    00000135: 	shlq	$0x3, %rax
    00000139: 	movq	%rdx, 0x40(%rsp)
    0000013e: 	movq	DATAat0x49500(%rip), %xmm9
    00000147: 	movq	%rax, 0x20(%rsp)
    0000014c: 	movl	%ecx, %eax
    0000014e: 	movl	%esi, %ecx
    00000150: 	imull	%esi, %eax
    00000153: 	movslq	%edi, %rsi
    00000156: 	movq	%rsi, 0x58(%rsp)
    0000015b: 	movl	%eax, 0x84(%rsp)
    00000162: 	cltq
    00000164: 	addq	%rsi, %rax
    00000167: 	shlq	$0x3, %rax
    0000016b: 	movq	%rax, 0x90(%rsp)
    00000173: 	leal	-0x3(%r14), %eax
    00000177: 	imull	%ecx, %eax
    0000017a: 	cltq
    0000017c: 	addq	%rsi, %rax
    0000017f: 	leaq	-0x8(,%rax,8), %rax
    00000187: 	movq	%rax, 0x70(%rsp)
    0000018c: 	leal	-0x1(%r14), %eax
    00000190: 	imull	%ecx, %eax
    00000193: 	cltq
    00000195: 	addq	%rsi, %rax
    00000198: 	leaq	-0x8(,%rax,8), %rax
    000001a0: 	movq	%rax, 0x78(%rsp)
    000001a5: 	movl	%edi, %eax
    000001a7: 	shrl	%eax
    000001a9: 	subl	$0x1, %eax
    000001ac: 	notq	%rax
    000001af: 	shlq	$0x4, %rax
    000001b3: 	movq	%rax, 0x30(%rsp)
    000001b8: 	movl	%edi, %eax
    000001ba: 	andl	$-0x2, %edi
    000001bd: 	movl	%edi, 0x38(%rsp)
    000001c1: 	movl	%eax, %edi
    000001c3: 	movq	%rsi, %rax
    000001c6: 	movq	%rdx, %rsi
    000001c9: 	negq	%rax
    000001cc: 	andq	$-0x2, %rsi
    000001d0: 	andl	$0x1, %edi
    000001d3: 	shlq	$0x3, %rax
    000001d7: 	movq	%rsi, 0x68(%rsp)
    000001dc: 	leal	-0x1(%rdi), %r13d
    000001e0: 	leal	0x1(%rdi), %r14d
    000001e4: 	movq	%rax, 0x48(%rsp)
    000001e9: 	movq	%rdx, %rax
    000001ec: 	shrq	%rax
    000001ef: 	shlq	$0x4, %rax
    000001f3: 	movq	%rax, 0x88(%rsp)
    000001fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2833:
    00000200: 	movl	0x60(%rsp), %ecx
    00000204: 	testl	%ecx, %ecx
    00000206: 	jle	.Ltmp2817 # Offset: 518
    0000020c: 	movl	0x2c(%rsp), %edx
    00000210: 	testl	%edx, %edx
    00000212: 	jle	.Ltmp2817 # Offset: 530
    00000218: 	movq	0x90(%rsp), %rax
    00000220: 	movl	0x84(%rsp), %esi
    00000227: 	pxor	%xmm4, %xmm4
    0000022b: 	movsd	DATAat0x49400(%rip), %xmm3
    00000233: 	movsd	DATAat0x49410(%rip), %xmm2
    0000023b: 	leaq	(%r15,%rax), %r12
    0000023f: 	leaq	(%rbx,%rax), %r11
    00000243: 	movq	0x70(%rsp), %rax
    00000248: 	leaq	(%rbx,%rax), %r10
    0000024c: 	movq	0x78(%rsp), %rax
    00000251: 	leaq	(%rbx,%rax), %r9
    00000255: 	movl	0x60(%rsp), %eax
    00000259: 	movl	%eax, 0x8(%rsp)
    0000025d: 	movq	0x48(%rsp), %rax
    00000262: 	addq	$0x8, %rax
    00000266: 	movq	%rax, 0x50(%rsp)
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2821:
    00000270: 	movl	0x10(%rsp), %eax
    00000274: 	movl	%esi, %ecx
    00000276: 	subl	$0x1, 0x8(%rsp)
    0000027b: 	leaq	-0x10(%r11), %rbp
    0000027f: 	subl	%eax, %ecx
    00000281: 	cmpq	%r12, %r9
    00000284: 	leal	(%rax,%rsi), %edx
    00000287: 	setne	%r8b
    0000028b: 	cmpq	%r12, %r10
    0000028e: 	setne	%al
    00000291: 	andl	%r8d, %eax
    00000294: 	cmpl	$0x3, 0x28(%rsp)
    00000299: 	setne	%r8b
    0000029d: 	testb	%r8b, %al
    000002a0: 	je	.Ltmp2818 # Offset: 672
    000002a6: 	movq	%r12, %rax
    000002a9: 	leaq	-0x8(%r12), %r8
    000002ae: 	subq	%rbp, %rax
    000002b1: 	movq	%rax, 0x18(%rsp)
    000002b6: 	xorl	%eax, %eax
    000002b8: 	cmpq	$0x10, 0x18(%rsp)
    000002be: 	jbe	.Ltmp2818 # Offset: 702
    000002c4: 	movl	%edx, 0x18(%rsp)
    000002c8: 	movq	0x30(%rsp), %rdx
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp2819:
    000002d0: 	movupd	(%r10,%rax), %xmm0
    000002d6: 	movupd	(%rbp,%rax), %xmm11
    000002dd: 	movupd	(%r8,%rax), %xmm10
    000002e3: 	shufpd	$0x1, %xmm11, %xmm11
    000002e9: 	shufpd	$0x1, %xmm0, %xmm0
    000002ee: 	addpd	%xmm11, %xmm0
    000002f3: 	movupd	(%r11,%rax), %xmm11
    000002f9: 	shufpd	$0x1, %xmm10, %xmm10
    000002ff: 	shufpd	$0x1, %xmm11, %xmm11
    00000305: 	addpd	%xmm11, %xmm0
    0000030a: 	movupd	(%r9,%rax), %xmm11
    00000310: 	shufpd	$0x1, %xmm11, %xmm11
    00000316: 	addpd	%xmm11, %xmm0
    0000031b: 	addpd	%xmm4, %xmm0
    0000031f: 	mulpd	%xmm6, %xmm0
    00000323: 	subpd	%xmm10, %xmm0
    00000328: 	mulpd	%xmm5, %xmm0
    0000032c: 	addpd	%xmm10, %xmm0
    00000331: 	shufpd	$0x1, %xmm0, %xmm0
    00000336: 	movups	%xmm0, (%r8,%rax)
    0000033b: 	subq	$0x10, %rax
    0000033f: 	cmpq	%rax, %rdx
    00000342: 	jne	.Ltmp2819 # Offset: 834
    00000344: 	movl	0x18(%rsp), %edx
    00000348: 	movl	0x38(%rsp), %r8d
    0000034d: 	cmpl	%r8d, 0x2c(%rsp)
    00000352: 	je	.Ltmp2820 # Offset: 850
    00000354: 	addl	%edi, %ecx
    00000356: 	addl	%edi, %edx
    00000358: 	leal	(%rsi,%rdi), %eax
    0000035b: 	movslq	%ecx, %rcx
    0000035e: 	movslq	%edx, %rdx
    00000361: 	cltq
    00000363: 	movsd	(%rbx,%rcx,8), %xmm0
    00000368: 	leal	(%rsi,%r13), %ecx
    0000036c: 	leaq	(%r15,%rax,8), %rax
    00000370: 	movslq	%ecx, %rcx
    00000373: 	movsd	(%rax), %xmm10
    00000378: 	addsd	(%rbx,%rcx,8), %xmm0
    0000037d: 	leal	(%rsi,%r14), %ecx
    00000381: 	movslq	%ecx, %rcx
    00000384: 	addsd	(%rbx,%rcx,8), %xmm0
    00000389: 	addsd	(%rbx,%rdx,8), %xmm0
    0000038e: 	addsd	%xmm1, %xmm0
    00000392: 	mulsd	%xmm3, %xmm0
    00000396: 	subsd	%xmm10, %xmm0
    0000039b: 	mulsd	%xmm2, %xmm0
    0000039f: 	addsd	%xmm10, %xmm0
    000003a4: 	movsd	%xmm0, (%rax)
.Ltmp2820:
    000003a8: 	movq	0x20(%rsp), %rax
    000003ad: 	subl	0x10(%rsp), %esi
    000003b1: 	addq	%rax, %r12
    000003b4: 	addq	%rax, %r11
    000003b7: 	addq	%rax, %r10
    000003ba: 	addq	%rax, %r9
    000003bd: 	movl	0x8(%rsp), %eax
    000003c1: 	testl	%eax, %eax
    000003c3: 	jne	.Ltmp2821 # Offset: 963
.Ltmp2817:
    000003c9: 	cmpq	$0x0, 0x40(%rsp)
    000003cf: 	je	.Ltmp2822 # Offset: 975
    000003d5: 	cmpl	$0x1, 0x64(%rsp)
    000003da: 	je	.Ltmp2823 # Offset: 986
    000003e0: 	movapd	DATAat0x494f0(%rip), %xmm10
    000003e9: 	xorl	%eax, %eax
    000003eb: 	movapd	%xmm1, %xmm2
    000003ef: 	pxor	%xmm4, %xmm4
    000003f3: 	movq	0x88(%rsp), %rdx
    000003fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2824:
    00000400: 	movupd	(%r15,%rax), %xmm0
    00000406: 	movupd	(%rbx,%rax), %xmm3
    0000040b: 	addq	$0x10, %rax
    0000040f: 	subpd	%xmm0, %xmm3
    00000413: 	movapd	%xmm3, %xmm0
    00000417: 	movapd	%xmm3, %xmm11
    0000041c: 	cmpltpd	%xmm4, %xmm0
    00000421: 	xorpd	%xmm10, %xmm11
    00000426: 	andpd	%xmm0, %xmm11
    0000042b: 	andnpd	%xmm3, %xmm0
    0000042f: 	orpd	%xmm11, %xmm0
    00000434: 	addsd	%xmm0, %xmm2
    00000438: 	unpckhpd	%xmm0, %xmm0
    0000043c: 	addsd	%xmm0, %xmm2
    00000440: 	cmpq	%rax, %rdx
    00000443: 	jne	.Ltmp2824 # Offset: 1091
    00000445: 	movq	0x68(%rsp), %rax
    0000044a: 	cmpq	%rax, 0x40(%rsp)
    0000044f: 	je	.Ltmp2825 # Offset: 1103
.Ltmp2836:
    00000451: 	movsd	(%rbx,%rax,8), %xmm0
    00000456: 	subsd	(%r15,%rax,8), %xmm0
    0000045c: 	comisd	%xmm0, %xmm1
    00000460: 	jbe	.Ltmp2826 # Offset: 1120
    00000462: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2826:
    0000046a: 	addsd	%xmm0, %xmm2
.Ltmp2825:
    0000046e: 	movq	0x40(%rsp), %rdx
    00000473: 	movapd	%xmm1, %xmm3
    00000477: 	xorl	%eax, %eax
    00000479: 	nopl	(%rax) # Size: 7
.Ltmp2828:
    00000480: 	movsd	(%rbx,%rax,8), %xmm0
    00000485: 	subsd	(%r15,%rax,8), %xmm0
    0000048b: 	comisd	%xmm0, %xmm1
    0000048f: 	jbe	.Ltmp2827 # Offset: 1167
    00000491: 	xorpd	%xmm9, %xmm0
.Ltmp2827:
    00000496: 	maxsd	%xmm3, %xmm0
    0000049a: 	addq	$0x1, %rax
    0000049e: 	movapd	%xmm0, %xmm3
    000004a2: 	cmpq	%rax, %rdx
    000004a5: 	jne	.Ltmp2828 # Offset: 1189
    000004a7: 	movl	0x3c(%rsp), %eax
    000004ab: 	cmpl	%eax, 0x120(%rsp)
    000004b2: 	jge	.Ltmp2829 # Offset: 1202
    000004b4: 	movsd	DATAat0x49538(%rip), %xmm0
    000004bc: 	comisd	%xmm2, %xmm0
    000004c0: 	ja	.Ltmp2830 # Offset: 1216
    000004c6: 	ucomisd	%xmm2, %xmm2
    000004ca: 	jp	.Ltmp2831 # Offset: 1226
    000004d0: 	movsd	DATAat0x49540(%rip), %xmm0
    000004d8: 	comisd	%xmm3, %xmm0
    000004dc: 	ja	.Ltmp2832 # Offset: 1244
    000004e2: 	ucomisd	%xmm3, %xmm3
    000004e6: 	jp	.Ltmp2831 # Offset: 1254
.Ltmp2829:
    000004ec: 	addl	$0x1, 0x3c(%rsp)
    000004f1: 	movq	%r15, %rax
    000004f4: 	movl	0x3c(%rsp), %esi
    000004f8: 	movq	%rbx, %r15
    000004fb: 	cmpl	0x80(%rsp), %esi
    00000502: 	je	.Ltmp2830 # Offset: 1282
    00000508: 	movq	%rax, %rbx
    0000050b: 	jmp	.Ltmp2833 # Offset: 1291
.Ltmp2818:
    00000510: 	movq	0x48(%rsp), %rax
    00000515: 	movq	0x50(%rsp), %r8
    0000051a: 	leaq	(%r12,%rax), %rcx
    0000051e: 	leaq	(%rax,%r11), %rdx
    00000522: 	movq	0x58(%rsp), %rax
    00000527: 	leaq	(%r10,%r8), %rbp
    0000052b: 	addq	%r9, %r8
    0000052e: 	nop # Size: 2
.Ltmp2834:
    00000530: 	movsd	(%rbp,%rax,8), %xmm10
    00000537: 	movsd	-0x8(%rdx,%rax,8), %xmm0
    0000053d: 	movsd	(%rcx,%rax,8), %xmm11
    00000543: 	addsd	%xmm10, %xmm0
    00000548: 	addsd	0x8(%rdx,%rax,8), %xmm0
    0000054e: 	addsd	(%r8,%rax,8), %xmm0
    00000554: 	addsd	%xmm1, %xmm0
    00000558: 	mulsd	%xmm8, %xmm0
    0000055d: 	subsd	%xmm11, %xmm0
    00000562: 	mulsd	%xmm7, %xmm0
    00000566: 	addsd	%xmm11, %xmm0
    0000056b: 	movsd	%xmm0, (%rcx,%rax,8)
    00000570: 	subq	$0x1, %rax
    00000574: 	testl	%eax, %eax
    00000576: 	jg	.Ltmp2834 # Offset: 1398
    00000578: 	jmp	.Ltmp2820 # Offset: 1400
.Ltmp2822:
    0000057d: 	movl	0x3c(%rsp), %eax
    00000581: 	movapd	%xmm1, %xmm3
    00000585: 	cmpl	%eax, 0x120(%rsp)
    0000058c: 	jl	.Ltmp2835 # Offset: 1420
    0000058e: 	movapd	%xmm1, %xmm2
    00000592: 	jmp	.Ltmp2829 # Offset: 1426
.Ltmp2823:
    00000597: 	movapd	%xmm1, %xmm2
    0000059b: 	xorl	%eax, %eax
    0000059d: 	jmp	.Ltmp2836 # Offset: 1437
.Ltmp2835:
    000005a2: 	movapd	%xmm3, %xmm2
.Ltmp2830:
    000005a6: 	ucomisd	%xmm2, %xmm2
    000005aa: 	setp	%bpl
    000005ae: 	ucomisd	%xmm3, %xmm3
    000005b2: 	setp	%al
    000005b5: 	orl	%eax, %ebp
.Ltmp2842:
    000005b7: 	movsd	%xmm3, 0x10(%rsp)
    000005bd: 	movsd	%xmm2, 0x8(%rsp)
    000005c3: 	callq	clock@PLT # Offset: 1475
    000005c8: 	movl	0xa0(%rsp), %edi
    000005cf: 	pxor	%xmm0, %xmm0
    000005d3: 	movsd	0xa8(%rsp), %xmm7
    000005dc: 	movq	%rax, end_time(%rip)
    000005e3: 	subq	start_time(%rip), %rax
    000005ea: 	cvtsi2sd	%rax, %xmm0
    000005ef: 	movl	%edi, %eax
    000005f1: 	divsd	DATAat0x49520(%rip), %xmm0
    000005f9: 	movsd	0x8(%rsp), %xmm2
    000005ff: 	shrl	$0x1f, %eax
    00000602: 	movsd	0x10(%rsp), %xmm3
    00000608: 	movq	%xmm0, %rbx
    0000060d: 	addl	%edi, %eax
    0000060f: 	movl	0x28(%rsp), %edi
    00000613: 	sarl	%eax
    00000615: 	movl	%edi, %edx
    00000617: 	imull	%edi, %eax
    0000061a: 	shrl	$0x1f, %edx
    0000061d: 	addl	%edi, %edx
    0000061f: 	sarl	%edx
    00000621: 	addl	%edx, %eax
    00000623: 	testb	%bpl, %bpl
    00000626: 	cltq
    00000628: 	subsd	(%r15,%rax,8), %xmm7
    0000062e: 	movq	0x98(%rsp), %rax
    00000636: 	movq	0x8(%rax), %rdx
    0000063a: 	movq	(%rax), %rsi
    0000063d: 	movq	%xmm7, %r12
    00000642: 	jne	.Ltmp2837 # Offset: 1602
    00000648: 	movl	0x3c(%rsp), %eax
    0000064c: 	cmpl	%eax, iterations(%rip)
    00000652: 	jg	.Ltmp2838 # Offset: 1618
    00000654: 	comisd	DATAat0x49538(%rip), %xmm2
    0000065c: 	jbe	.Ltmp2838 # Offset: 1628
    0000065e: 	comisd	DATAat0x49540(%rip), %xmm3
    00000666: 	ja	.Ltmp2839 # Offset: 1638
.Ltmp2838:
    0000066c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000673: 	movsd	%xmm3, 0x10(%rsp)
    00000679: 	movq	%rbp, %rdi
    0000067c: 	movsd	%xmm2, 0x8(%rsp)
    00000682: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1666
    00000687: 	movl	$0xa, %edx
    0000068c: 	leaq	DATAat0x491ab(%rip), %rsi
    00000693: 	movq	%rax, %rdi
    00000696: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1686
    0000069b: 	movsd	0x10(%rsp), %xmm3
    000006a1: 	movsd	0x8(%rsp), %xmm2
.Ltmp2841:
    000006a7: 	movl	$0x4, %edx
    000006ac: 	movq	%rbp, %rdi
    000006af: 	leaq	DATAat0x491b6(%rip), %rsi
    000006b6: 	movsd	%xmm3, 0x10(%rsp)
    000006bc: 	movsd	%xmm2, 0x8(%rsp)
    000006c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1730
    000006c7: 	movl	0x3c(%rsp), %esi
    000006cb: 	movq	%rbp, %rdi
    000006ce: 	callq	_ZNSolsEi@PLT # Offset: 1742
    000006d3: 	movl	$0xb, %edx
    000006d8: 	leaq	DATAat0x491bb(%rip), %rsi
    000006df: 	movq	%rax, %rdi
    000006e2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1762
    000006e7: 	movl	$0xa, %edx
    000006ec: 	leaq	DATAat0x491c7(%rip), %rsi
    000006f3: 	movq	%rbp, %rdi
    000006f6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1782
    000006fb: 	movsd	0x8(%rsp), %xmm2
    00000701: 	movq	%rbp, %rdi
    00000704: 	movapd	%xmm2, %xmm0
    00000708: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1800
    0000070d: 	movl	$0x7, %edx
    00000712: 	leaq	DATAat0x491d2(%rip), %rsi
    00000719: 	movq	%rax, %rdi
    0000071c: 	movq	%rax, %rbp
    0000071f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1823
    00000724: 	movsd	0x10(%rsp), %xmm3
    0000072a: 	movq	%rbp, %rdi
    0000072d: 	movapd	%xmm3, %xmm0
    00000731: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1841
    00000736: 	movl	$0x10, %edx
    0000073b: 	leaq	DATAat0x491da(%rip), %rsi
    00000742: 	movq	%rax, %rbp
    00000745: 	movq	%rax, %rdi
    00000748: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1864
    0000074d: 	movq	%r12, %xmm0
    00000752: 	movq	%rbp, %rdi
    00000755: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1877
    0000075a: 	movl	$0x8, %edx
    0000075f: 	leaq	DATAat0x491eb(%rip), %rsi
    00000766: 	movq	%rax, %rbp
    00000769: 	movq	%rax, %rdi
    0000076c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1900
    00000771: 	movq	%rbx, %xmm0
    00000776: 	movq	%rbp, %rdi
    00000779: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1913
    0000077e: 	movl	$0x2, %edx
    00000783: 	leaq	DATAat0x491f4(%rip), %rsi
    0000078a: 	movq	%rax, %rdi
    0000078d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1933
    00000792: 	movl	0xa4(%rsp), %eax
    00000799: 	movl	%eax, iterations(%rip)
    0000079f: 	movq	0xd8(%rsp), %rax
    000007a7: 	subq	%fs:0x28, %rax
    000007b0: 	jne	.Ltmp2840 # Offset: 1968
    000007b6: 	addq	$0xe8, %rsp
    000007bd: 	popq	%rbx
    000007be: 	popq	%rbp
    000007bf: 	popq	%r12
    000007c1: 	popq	%r13
    000007c3: 	popq	%r14
    000007c5: 	popq	%r15
    000007c7: 	retq # Offset: 1991
.Ltmp2837:
    000007c8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000007cf: 	movq	%rbp, %rdi
    000007d2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2002
    000007d7: 	movl	$0x10, %edx
    000007dc: 	leaq	DATAat0x493d4(%rip), %rsi
    000007e3: 	movq	%rax, %rdi
    000007e6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2022
    000007eb: 	movsd	0x8(%rsp), %xmm2
    000007f1: 	movsd	0x10(%rsp), %xmm3
    000007f7: 	jmp	.Ltmp2841 # Offset: 2039
.Ltmp2831:
    000007fc: 	movl	$0x1, %ebp
    00000801: 	jmp	.Ltmp2842 # Offset: 2049
.Ltmp2839:
    00000806: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000080d: 	movsd	%xmm3, 0x10(%rsp)
    00000813: 	movq	%rbp, %rdi
    00000816: 	movsd	%xmm2, 0x8(%rsp)
    0000081c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2076
    00000821: 	movl	$0x11, %edx
    00000826: 	leaq	DATAat0x49199(%rip), %rsi
    0000082d: 	movq	%rax, %rdi
    00000830: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2096
    00000835: 	movsd	0x8(%rsp), %xmm2
    0000083b: 	movsd	0x10(%rsp), %xmm3
    00000841: 	jmp	.Ltmp2841 # Offset: 2113
.Ltmp2832:
    00000846: 	ucomisd	%xmm3, %xmm3
    0000084a: 	setp	%bpl
    0000084e: 	jmp	.Ltmp2842 # Offset: 2126
.Ltmp2816:
    00000853: 	pxor	%xmm3, %xmm3
    00000857: 	movl	$0x0, 0x3c(%rsp)
    0000085f: 	xorl	%ebp, %ebp
    00000861: 	movapd	%xmm3, %xmm2
    00000865: 	jmp	.Ltmp2842 # Offset: 2149
.Ltmp2840:
    0000086a: 	callq	__stack_chk_fail@PLT # Offset: 2154
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd21jacobi_sor2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x41230
  Size        : 0x854
  MaxSize     : 0x860
  Offset      : 0x41230
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	movl	%r15d, %esi
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xe8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0xa0(%rsp)
    00000032: 	movl	%ebp, %edx
    00000034: 	movl	%ecx, 0x30(%rsp)
    00000038: 	leaq	0xb0(%rsp), %rcx
    00000040: 	movl	%r8d, 0x20(%rsp)
    00000045: 	movq	%r9, 0x98(%rsp)
    0000004d: 	movq	%fs:0x28, %rax
    00000056: 	movq	%rax, 0xd8(%rsp)
    0000005e: 	xorl	%eax, %eax
    00000060: 	movaps	%xmm0, 0xb0(%rsp)
    00000068: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000070: 	movaps	%xmm0, 0xc0(%rsp)
    00000078: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 120
    0000007d: 	movl	%r15d, %esi
    00000080: 	movsd	%xmm0, 0xa8(%rsp)
    00000089: 	imull	%ebp, %esi
    0000008c: 	movl	%esi, 0x70(%rsp)
    00000090: 	testl	%esi, %esi
    00000092: 	jle	.Ltmp2843 # Offset: 146
    00000094: 	movslq	%esi, %rdx
    00000097: 	movq	%r14, %rdi
    0000009a: 	movq	%rbx, %rsi
    0000009d: 	shlq	$0x3, %rdx
    000000a1: 	callq	memmove@PLT # Offset: 161
.Ltmp2843:
    000000a6: 	movl	iterations(%rip), %eax
    000000ac: 	movl	$0x2710, iterations(%rip)
    000000b6: 	movl	%eax, 0xa4(%rsp)
    000000bd: 	callq	clock@PLT # Offset: 189
    000000c2: 	movq	%rax, start_time(%rip)
    000000c9: 	movl	iterations(%rip), %eax
    000000cf: 	movl	%eax, 0x74(%rsp)
    000000d3: 	testl	%eax, %eax
    000000d5: 	jle	.Ltmp2844 # Offset: 213
    000000db: 	movl	0xa0(%rsp), %eax
    000000e2: 	movslq	0x20(%rsp), %rdx
    000000e7: 	movl	$0x0, 0x44(%rsp)
    000000ef: 	pxor	%xmm1, %xmm1
    000000f3: 	movslq	0x70(%rsp), %rdi
    000000f8: 	movsd	DATAat0x49410(%rip), %xmm7
    00000100: 	subl	$0x1, %eax
    00000103: 	leaq	(,%rdx,8), %r10
    0000010b: 	movsd	DATAat0x49400(%rip), %xmm8
    00000114: 	movapd	DATAat0x49400(%rip), %xmm6
    0000011c: 	movl	%eax, 0x14(%rsp)
    00000120: 	movl	0x30(%rsp), %eax
    00000124: 	movq	%rdi, 0x48(%rsp)
    00000129: 	movapd	DATAat0x49410(%rip), %xmm5
    00000131: 	leal	-0x2(%rax), %esi
    00000134: 	movq	%r10, 0x18(%rsp)
    00000139: 	movq	DATAat0x49500(%rip), %xmm9
    00000142: 	movslq	%esi, %rcx
    00000145: 	movl	%esi, 0x34(%rsp)
    00000149: 	leaq	(%rdx,%rcx), %rax
    0000014d: 	leaq	(,%rcx,8), %r11
    00000155: 	movq	%rcx, 0x68(%rsp)
    0000015a: 	shlq	$0x3, %rax
    0000015e: 	movq	%r11, 0x50(%rsp)
    00000163: 	movq	%rax, 0x90(%rsp)
    0000016b: 	leaq	-0x8(%r11), %rax
    0000016f: 	movq	%rax, 0x80(%rsp)
    00000177: 	movl	%esi, %eax
    00000179: 	shrl	%eax
    0000017b: 	subl	$0x1, %eax
    0000017e: 	notq	%rax
    00000181: 	shlq	$0x4, %rax
    00000185: 	movq	%rax, 0x38(%rsp)
    0000018a: 	movl	%esi, %eax
    0000018c: 	andl	$-0x2, %esi
    0000018f: 	movl	%esi, 0x40(%rsp)
    00000193: 	movl	%eax, %esi
    00000195: 	movq	%r10, %rax
    00000198: 	negq	%rax
    0000019b: 	andl	$0x1, %esi
    0000019e: 	subq	%r11, %rax
    000001a1: 	leal	-0x1(%rsi), %r15d
    000001a5: 	leal	0x1(%rsi), %r13d
    000001a9: 	movq	%rax, 0x60(%rsp)
    000001ae: 	movq	%rdx, %rax
    000001b1: 	subq	%rcx, %rax
    000001b4: 	shlq	$0x3, %rax
    000001b8: 	movq	%rax, 0x58(%rsp)
    000001bd: 	movq	%rdi, %rax
    000001c0: 	andq	$-0x2, %rdi
    000001c4: 	shrq	%rax
    000001c7: 	movq	%rdi, 0x78(%rsp)
    000001cc: 	shlq	$0x4, %rax
    000001d0: 	movq	%rax, 0x88(%rsp)
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2861:
    000001e0: 	cmpl	$0x1, 0x14(%rsp)
    000001e5: 	jle	.Ltmp2845 # Offset: 485
    000001eb: 	movl	0x34(%rsp), %eax
    000001ef: 	testl	%eax, %eax
    000001f1: 	jle	.Ltmp2845 # Offset: 497
    000001f7: 	movq	0x18(%rsp), %rdi
    000001fc: 	movq	0x90(%rsp), %rax
    00000204: 	movl	$0x1, (%rsp)
    0000020b: 	pxor	%xmm4, %xmm4
    0000020f: 	movsd	DATAat0x49400(%rip), %xmm3
    00000217: 	movsd	DATAat0x49410(%rip), %xmm2
    0000021f: 	leaq	(%r14,%rax), %r12
    00000223: 	leaq	(%rbx,%rax), %r8
    00000227: 	movq	0x80(%rsp), %rax
    0000022f: 	subq	$0x8, %rdi
    00000233: 	movq	%rdi, 0x28(%rsp)
    00000238: 	leaq	(%rbx,%rax), %r9
    0000023c: 	movl	0x20(%rsp), %eax
    00000240: 	movl	%eax, %r10d
    00000243: 	addl	%eax, %eax
    00000245: 	movl	%eax, 0x24(%rsp)
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp2849:
    00000250: 	movl	0x24(%rsp), %eax
    00000254: 	movl	%r10d, %ecx
    00000257: 	subl	0x20(%rsp), %ecx
    0000025b: 	movl	%r10d, %edx
    0000025e: 	addl	$0x1, (%rsp)
    00000262: 	cmpq	%r12, %r9
    00000265: 	leaq	-0x10(%r8), %rbp
    00000269: 	leal	(%rax,%rcx), %r10d
    0000026d: 	movq	0x28(%rsp), %rax
    00000272: 	setne	%dil
    00000276: 	cmpl	$0x3, 0x30(%rsp)
    0000027b: 	leaq	(%rax,%r8), %r11
    0000027f: 	setne	%al
    00000282: 	andl	%edi, %eax
    00000284: 	cmpq	%r11, %r12
    00000287: 	setne	%dil
    0000028b: 	testb	%dil, %al
    0000028e: 	je	.Ltmp2846 # Offset: 654
    00000294: 	movq	%r12, %rax
    00000297: 	subq	%rbp, %rax
    0000029a: 	cmpq	$0x10, %rax
    0000029e: 	jbe	.Ltmp2846 # Offset: 670
    000002a4: 	movl	%edx, 0x8(%rsp)
    000002a8: 	movq	0x38(%rsp), %rdx
    000002ad: 	leaq	-0x8(%r12), %rdi
    000002b2: 	xorl	%eax, %eax
    000002b4: 	nopl	(%rax) # Size: 4
.Ltmp2847:
    000002b8: 	movupd	(%r9,%rax), %xmm0
    000002be: 	movupd	(%rbp,%rax), %xmm11
    000002c5: 	movupd	(%rdi,%rax), %xmm10
    000002cb: 	shufpd	$0x1, %xmm11, %xmm11
    000002d1: 	shufpd	$0x1, %xmm0, %xmm0
    000002d6: 	addpd	%xmm11, %xmm0
    000002db: 	movupd	(%r8,%rax), %xmm11
    000002e1: 	shufpd	$0x1, %xmm10, %xmm10
    000002e7: 	shufpd	$0x1, %xmm11, %xmm11
    000002ed: 	addpd	%xmm11, %xmm0
    000002f2: 	movupd	(%r11,%rax), %xmm11
    000002f8: 	shufpd	$0x1, %xmm11, %xmm11
    000002fe: 	addpd	%xmm11, %xmm0
    00000303: 	addpd	%xmm4, %xmm0
    00000307: 	mulpd	%xmm6, %xmm0
    0000030b: 	subpd	%xmm10, %xmm0
    00000310: 	mulpd	%xmm5, %xmm0
    00000314: 	addpd	%xmm10, %xmm0
    00000319: 	shufpd	$0x1, %xmm0, %xmm0
    0000031e: 	movups	%xmm0, (%rdi,%rax)
    00000322: 	subq	$0x10, %rax
    00000326: 	cmpq	%rax, %rdx
    00000329: 	jne	.Ltmp2847 # Offset: 809
    0000032b: 	movl	0x8(%rsp), %edx
    0000032f: 	movl	0x40(%rsp), %edi
    00000333: 	cmpl	%edi, 0x34(%rsp)
    00000337: 	je	.Ltmp2848 # Offset: 823
    00000339: 	addl	%esi, %ecx
    0000033b: 	leal	(%rdx,%rsi), %eax
    0000033e: 	movslq	%ecx, %rcx
    00000341: 	cltq
    00000343: 	movsd	(%rbx,%rcx,8), %xmm0
    00000348: 	leal	(%rdx,%r15), %ecx
    0000034c: 	addl	%r13d, %edx
    0000034f: 	leaq	(%r14,%rax,8), %rax
    00000353: 	movslq	%edx, %rdx
    00000356: 	movslq	%ecx, %rcx
    00000359: 	movsd	(%rax), %xmm10
    0000035e: 	addsd	(%rbx,%rcx,8), %xmm0
    00000363: 	addsd	(%rbx,%rdx,8), %xmm0
    00000368: 	leal	(%r10,%rsi), %edx
    0000036c: 	movslq	%edx, %rdx
    0000036f: 	addsd	(%rbx,%rdx,8), %xmm0
    00000374: 	addsd	%xmm1, %xmm0
    00000378: 	mulsd	%xmm3, %xmm0
    0000037c: 	subsd	%xmm10, %xmm0
    00000381: 	mulsd	%xmm2, %xmm0
    00000385: 	addsd	%xmm10, %xmm0
    0000038a: 	movsd	%xmm0, (%rax)
.Ltmp2848:
    0000038e: 	movq	0x18(%rsp), %rax
    00000393: 	movl	(%rsp), %edi
    00000396: 	addq	%rax, %r12
    00000399: 	addq	%rax, %r8
    0000039c: 	addq	%rax, %r9
    0000039f: 	cmpl	%edi, 0x14(%rsp)
    000003a3: 	jne	.Ltmp2849 # Offset: 931
.Ltmp2845:
    000003a9: 	cmpq	$0x0, 0x48(%rsp)
    000003af: 	je	.Ltmp2850 # Offset: 943
    000003b5: 	cmpl	$0x1, 0x70(%rsp)
    000003ba: 	je	.Ltmp2851 # Offset: 954
    000003c0: 	movapd	DATAat0x494f0(%rip), %xmm10
    000003c9: 	xorl	%eax, %eax
    000003cb: 	movapd	%xmm1, %xmm2
    000003cf: 	pxor	%xmm4, %xmm4
    000003d3: 	movq	0x88(%rsp), %rdx
    000003db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2852:
    000003e0: 	movupd	(%r14,%rax), %xmm0
    000003e6: 	movupd	(%rbx,%rax), %xmm3
    000003eb: 	addq	$0x10, %rax
    000003ef: 	subpd	%xmm0, %xmm3
    000003f3: 	movapd	%xmm3, %xmm0
    000003f7: 	movapd	%xmm3, %xmm11
    000003fc: 	cmpltpd	%xmm4, %xmm0
    00000401: 	xorpd	%xmm10, %xmm11
    00000406: 	andpd	%xmm0, %xmm11
    0000040b: 	andnpd	%xmm3, %xmm0
    0000040f: 	orpd	%xmm11, %xmm0
    00000414: 	addsd	%xmm0, %xmm2
    00000418: 	unpckhpd	%xmm0, %xmm0
    0000041c: 	addsd	%xmm0, %xmm2
    00000420: 	cmpq	%rax, %rdx
    00000423: 	jne	.Ltmp2852 # Offset: 1059
    00000425: 	movq	0x78(%rsp), %rax
    0000042a: 	cmpq	%rax, 0x48(%rsp)
    0000042f: 	je	.Ltmp2853 # Offset: 1071
.Ltmp2864:
    00000431: 	movsd	(%rbx,%rax,8), %xmm0
    00000436: 	subsd	(%r14,%rax,8), %xmm0
    0000043c: 	comisd	%xmm0, %xmm1
    00000440: 	jbe	.Ltmp2854 # Offset: 1088
    00000442: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2854:
    0000044a: 	addsd	%xmm0, %xmm2
.Ltmp2853:
    0000044e: 	movq	0x48(%rsp), %rdx
    00000453: 	movapd	%xmm1, %xmm3
    00000457: 	xorl	%eax, %eax
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp2856:
    00000460: 	movsd	(%rbx,%rax,8), %xmm0
    00000465: 	subsd	(%r14,%rax,8), %xmm0
    0000046b: 	comisd	%xmm0, %xmm1
    0000046f: 	jbe	.Ltmp2855 # Offset: 1135
    00000471: 	xorpd	%xmm9, %xmm0
.Ltmp2855:
    00000476: 	maxsd	%xmm3, %xmm0
    0000047a: 	addq	$0x1, %rax
    0000047e: 	movapd	%xmm0, %xmm3
    00000482: 	cmpq	%rax, %rdx
    00000485: 	jne	.Ltmp2856 # Offset: 1157
    00000487: 	movl	0x44(%rsp), %eax
    0000048b: 	cmpl	%eax, 0x120(%rsp)
    00000492: 	jge	.Ltmp2857 # Offset: 1170
    00000494: 	movsd	DATAat0x49538(%rip), %xmm0
    0000049c: 	comisd	%xmm2, %xmm0
    000004a0: 	ja	.Ltmp2858 # Offset: 1184
    000004a6: 	ucomisd	%xmm2, %xmm2
    000004aa: 	jp	.Ltmp2859 # Offset: 1194
    000004b0: 	movsd	DATAat0x49540(%rip), %xmm0
    000004b8: 	comisd	%xmm3, %xmm0
    000004bc: 	ja	.Ltmp2860 # Offset: 1212
    000004c2: 	ucomisd	%xmm3, %xmm3
    000004c6: 	jp	.Ltmp2859 # Offset: 1222
.Ltmp2857:
    000004cc: 	addl	$0x1, 0x44(%rsp)
    000004d1: 	movq	%r14, %rax
    000004d4: 	movl	0x44(%rsp), %edi
    000004d8: 	movq	%rbx, %r14
    000004db: 	cmpl	0x74(%rsp), %edi
    000004df: 	je	.Ltmp2858 # Offset: 1247
    000004e5: 	movq	%rax, %rbx
    000004e8: 	jmp	.Ltmp2861 # Offset: 1256
    000004ed: 	nopl	(%rax) # Size: 3
.Ltmp2846:
    000004f0: 	movq	0x50(%rsp), %rax
    000004f5: 	movq	%r12, %rcx
    000004f8: 	movq	%r8, %rdx
    000004fb: 	movq	0x60(%rsp), %rdi
    00000500: 	subq	%rax, %rcx
    00000503: 	subq	%rax, %rdx
    00000506: 	movq	0x58(%rsp), %rax
    0000050b: 	leaq	(%rdi,%r8), %r11
    0000050f: 	leaq	(%rax,%r8), %rdi
    00000513: 	movq	0x68(%rsp), %rax
    00000518: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2862:
    00000520: 	movsd	(%r11,%rax,8), %xmm10
    00000526: 	movsd	-0x8(%rdx,%rax,8), %xmm0
    0000052c: 	movsd	(%rcx,%rax,8), %xmm11
    00000532: 	addsd	%xmm10, %xmm0
    00000537: 	addsd	0x8(%rdx,%rax,8), %xmm0
    0000053d: 	addsd	(%rdi,%rax,8), %xmm0
    00000542: 	addsd	%xmm1, %xmm0
    00000546: 	mulsd	%xmm8, %xmm0
    0000054b: 	subsd	%xmm11, %xmm0
    00000550: 	mulsd	%xmm7, %xmm0
    00000554: 	addsd	%xmm11, %xmm0
    00000559: 	movsd	%xmm0, (%rcx,%rax,8)
    0000055e: 	subq	$0x1, %rax
    00000562: 	testl	%eax, %eax
    00000564: 	jg	.Ltmp2862 # Offset: 1380
    00000566: 	jmp	.Ltmp2848 # Offset: 1382
.Ltmp2850:
    0000056b: 	movl	0x44(%rsp), %eax
    0000056f: 	movapd	%xmm1, %xmm3
    00000573: 	cmpl	%eax, 0x120(%rsp)
    0000057a: 	jl	.Ltmp2863 # Offset: 1402
    0000057c: 	movapd	%xmm1, %xmm2
    00000580: 	jmp	.Ltmp2857 # Offset: 1408
.Ltmp2851:
    00000585: 	movapd	%xmm1, %xmm2
    00000589: 	xorl	%eax, %eax
    0000058b: 	jmp	.Ltmp2864 # Offset: 1419
.Ltmp2863:
    00000590: 	movapd	%xmm3, %xmm2
.Ltmp2858:
    00000594: 	ucomisd	%xmm2, %xmm2
    00000598: 	setp	%bpl
    0000059c: 	ucomisd	%xmm3, %xmm3
    000005a0: 	setp	%al
    000005a3: 	orl	%eax, %ebp
.Ltmp2870:
    000005a5: 	movsd	%xmm3, 0x8(%rsp)
    000005ab: 	movsd	%xmm2, (%rsp)
    000005b0: 	callq	clock@PLT # Offset: 1456
    000005b5: 	movl	0xa0(%rsp), %esi
    000005bc: 	pxor	%xmm0, %xmm0
    000005c0: 	movsd	0xa8(%rsp), %xmm7
    000005c9: 	movq	%rax, end_time(%rip)
    000005d0: 	subq	start_time(%rip), %rax
    000005d7: 	cvtsi2sd	%rax, %xmm0
    000005dc: 	movl	%esi, %eax
    000005de: 	divsd	DATAat0x49520(%rip), %xmm0
    000005e6: 	movsd	(%rsp), %xmm2
    000005eb: 	shrl	$0x1f, %eax
    000005ee: 	movsd	0x8(%rsp), %xmm3
    000005f4: 	movq	%xmm0, %rbx
    000005f9: 	addl	%esi, %eax
    000005fb: 	movl	0x30(%rsp), %esi
    000005ff: 	sarl	%eax
    00000601: 	movl	%esi, %edx
    00000603: 	imull	%esi, %eax
    00000606: 	shrl	$0x1f, %edx
    00000609: 	addl	%esi, %edx
    0000060b: 	sarl	%edx
    0000060d: 	addl	%edx, %eax
    0000060f: 	testb	%bpl, %bpl
    00000612: 	cltq
    00000614: 	subsd	(%r14,%rax,8), %xmm7
    0000061a: 	movq	0x98(%rsp), %rax
    00000622: 	movq	0x8(%rax), %rdx
    00000626: 	movq	(%rax), %rsi
    00000629: 	movq	%xmm7, %r12
    0000062e: 	jne	.Ltmp2865 # Offset: 1582
    00000634: 	movl	0x44(%rsp), %eax
    00000638: 	cmpl	%eax, iterations(%rip)
    0000063e: 	jg	.Ltmp2866 # Offset: 1598
    00000640: 	comisd	DATAat0x49538(%rip), %xmm2
    00000648: 	jbe	.Ltmp2866 # Offset: 1608
    0000064a: 	comisd	DATAat0x49540(%rip), %xmm3
    00000652: 	ja	.Ltmp2867 # Offset: 1618
.Ltmp2866:
    00000658: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000065f: 	movsd	%xmm3, 0x8(%rsp)
    00000665: 	movq	%rbp, %rdi
    00000668: 	movsd	%xmm2, (%rsp)
    0000066d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1645
    00000672: 	movl	$0xa, %edx
    00000677: 	leaq	DATAat0x491ab(%rip), %rsi
    0000067e: 	movq	%rax, %rdi
    00000681: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1665
    00000686: 	movsd	0x8(%rsp), %xmm3
    0000068c: 	movsd	(%rsp), %xmm2
.Ltmp2869:
    00000691: 	movl	$0x4, %edx
    00000696: 	movq	%rbp, %rdi
    00000699: 	movsd	%xmm2, (%rsp)
    0000069e: 	leaq	DATAat0x491b6(%rip), %rsi
    000006a5: 	movsd	%xmm3, 0x8(%rsp)
    000006ab: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1707
    000006b0: 	movl	0x44(%rsp), %esi
    000006b4: 	movq	%rbp, %rdi
    000006b7: 	callq	_ZNSolsEi@PLT # Offset: 1719
    000006bc: 	movl	$0xb, %edx
    000006c1: 	leaq	DATAat0x491bb(%rip), %rsi
    000006c8: 	movq	%rax, %rdi
    000006cb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1739
    000006d0: 	movl	$0xa, %edx
    000006d5: 	leaq	DATAat0x491c7(%rip), %rsi
    000006dc: 	movq	%rbp, %rdi
    000006df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1759
    000006e4: 	movsd	(%rsp), %xmm2
    000006e9: 	movq	%rbp, %rdi
    000006ec: 	movapd	%xmm2, %xmm0
    000006f0: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1776
    000006f5: 	movl	$0x7, %edx
    000006fa: 	leaq	DATAat0x491d2(%rip), %rsi
    00000701: 	movq	%rax, %rdi
    00000704: 	movq	%rax, %rbp
    00000707: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1799
    0000070c: 	movsd	0x8(%rsp), %xmm3
    00000712: 	movq	%rbp, %rdi
    00000715: 	movapd	%xmm3, %xmm0
    00000719: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1817
    0000071e: 	movl	$0x10, %edx
    00000723: 	leaq	DATAat0x491da(%rip), %rsi
    0000072a: 	movq	%rax, %rbp
    0000072d: 	movq	%rax, %rdi
    00000730: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1840
    00000735: 	movq	%r12, %xmm0
    0000073a: 	movq	%rbp, %rdi
    0000073d: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1853
    00000742: 	movl	$0x8, %edx
    00000747: 	leaq	DATAat0x491eb(%rip), %rsi
    0000074e: 	movq	%rax, %rbp
    00000751: 	movq	%rax, %rdi
    00000754: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1876
    00000759: 	movq	%rbx, %xmm0
    0000075e: 	movq	%rbp, %rdi
    00000761: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1889
    00000766: 	movl	$0x2, %edx
    0000076b: 	leaq	DATAat0x491f4(%rip), %rsi
    00000772: 	movq	%rax, %rdi
    00000775: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1909
    0000077a: 	movl	0xa4(%rsp), %eax
    00000781: 	movl	%eax, iterations(%rip)
    00000787: 	movq	0xd8(%rsp), %rax
    0000078f: 	subq	%fs:0x28, %rax
    00000798: 	jne	.Ltmp2868 # Offset: 1944
    0000079e: 	addq	$0xe8, %rsp
    000007a5: 	popq	%rbx
    000007a6: 	popq	%rbp
    000007a7: 	popq	%r12
    000007a9: 	popq	%r13
    000007ab: 	popq	%r14
    000007ad: 	popq	%r15
    000007af: 	retq # Offset: 1967
.Ltmp2865:
    000007b0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000007b7: 	movq	%rbp, %rdi
    000007ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1978
    000007bf: 	movl	$0x10, %edx
    000007c4: 	leaq	DATAat0x493d4(%rip), %rsi
    000007cb: 	movq	%rax, %rdi
    000007ce: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1998
    000007d3: 	movsd	(%rsp), %xmm2
    000007d8: 	movsd	0x8(%rsp), %xmm3
    000007de: 	jmp	.Ltmp2869 # Offset: 2014
.Ltmp2859:
    000007e3: 	movl	$0x1, %ebp
    000007e8: 	jmp	.Ltmp2870 # Offset: 2024
.Ltmp2867:
    000007ed: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000007f4: 	movsd	%xmm3, 0x8(%rsp)
    000007fa: 	movq	%rbp, %rdi
    000007fd: 	movsd	%xmm2, (%rsp)
    00000802: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2050
    00000807: 	movl	$0x11, %edx
    0000080c: 	leaq	DATAat0x49199(%rip), %rsi
    00000813: 	movq	%rax, %rdi
    00000816: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2070
    0000081b: 	movsd	(%rsp), %xmm2
    00000820: 	movsd	0x8(%rsp), %xmm3
    00000826: 	jmp	.Ltmp2869 # Offset: 2086
.Ltmp2860:
    0000082b: 	ucomisd	%xmm3, %xmm3
    0000082f: 	setp	%bpl
    00000833: 	jmp	.Ltmp2870 # Offset: 2099
.Ltmp2844:
    00000838: 	pxor	%xmm3, %xmm3
    0000083c: 	movl	$0x0, 0x44(%rsp)
    00000844: 	xorl	%ebp, %ebp
    00000846: 	movapd	%xmm3, %xmm2
    0000084a: 	jmp	.Ltmp2870 # Offset: 2122
.Ltmp2868:
    0000084f: 	callq	__stack_chk_fail@PLT # Offset: 2127
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x41a90
  Size        : 0x8e3
  MaxSize     : 0x8f0
  Offset      : 0x41a90
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	movl	%ebx, %esi
    0000001b: 	imull	%r15d, %ebx
    0000001f: 	subq	$0x108, %rsp
    00000026: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002e: 	movl	%edx, 0xc0(%rsp)
    00000035: 	movl	%r15d, %edx
    00000038: 	movl	%ecx, 0x40(%rsp)
    0000003c: 	leaq	0xd0(%rsp), %rcx
    00000044: 	movl	%r8d, 0x20(%rsp)
    00000049: 	movq	%r9, 0xb8(%rsp)
    00000051: 	movq	%fs:0x28, %rax
    0000005a: 	movq	%rax, 0xf8(%rsp)
    00000062: 	xorl	%eax, %eax
    00000064: 	movaps	%xmm0, 0xd0(%rsp)
    0000006c: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000074: 	movaps	%xmm0, 0xe0(%rsp)
    0000007c: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 124
    00000081: 	movl	%ebx, 0x64(%rsp)
    00000085: 	movsd	%xmm0, 0xc8(%rsp)
    0000008e: 	testl	%ebx, %ebx
    00000090: 	jle	.Ltmp2871 # Offset: 144
    00000092: 	movslq	%ebx, %rdx
    00000095: 	movq	%rbp, %rsi
    00000098: 	movq	%r14, %rdi
    0000009b: 	shlq	$0x3, %rdx
    0000009f: 	callq	memmove@PLT # Offset: 159
.Ltmp2871:
    000000a4: 	movl	iterations(%rip), %eax
    000000aa: 	movl	$0x2710, iterations(%rip)
    000000b4: 	movl	%eax, 0xc4(%rsp)
    000000bb: 	callq	clock@PLT # Offset: 187
    000000c0: 	movq	%rax, start_time(%rip)
    000000c7: 	movl	iterations(%rip), %eax
    000000cd: 	movl	%eax, 0x6c(%rsp)
    000000d1: 	testl	%eax, %eax
    000000d3: 	jle	.Ltmp2872 # Offset: 211
    000000d9: 	movl	0x40(%rsp), %r11d
    000000de: 	movl	0x20(%rsp), %edi
    000000e2: 	movl	$0x0, 0x60(%rsp)
    000000ea: 	pxor	%xmm1, %xmm1
    000000ee: 	movl	0xc0(%rsp), %edx
    000000f5: 	movslq	0x64(%rsp), %rsi
    000000fa: 	leal	-0x1(%r11), %eax
    000000fe: 	movapd	DATAat0x49400(%rip), %xmm6
    00000106: 	movapd	DATAat0x49410(%rip), %xmm5
    0000010e: 	leal	-0x2(%rdx), %ecx
    00000111: 	movl	%eax, 0xa0(%rsp)
    00000118: 	movl	%edi, %eax
    0000011a: 	movsd	DATAat0x49400(%rip), %xmm4
    00000122: 	negl	%eax
    00000124: 	movl	%ecx, 0x68(%rsp)
    00000128: 	imull	%edi, %ecx
    0000012b: 	movsd	DATAat0x49410(%rip), %xmm3
    00000133: 	movq	DATAat0x49500(%rip), %xmm9
    0000013c: 	cltq
    0000013e: 	movq	%rsi, 0x48(%rsp)
    00000143: 	leaq	(,%rax,8), %rbx
    0000014b: 	leal	-0x3(%rdx), %eax
    0000014e: 	subl	$0x1, %edx
    00000151: 	imull	%edi, %eax
    00000154: 	movl	%ecx, 0xa4(%rsp)
    0000015b: 	imull	%edi, %edx
    0000015e: 	cltq
    00000160: 	leaq	0x10(,%rax,8), %rax
    00000168: 	movslq	%edx, %rdx
    0000016b: 	movq	%rax, 0x80(%rsp)
    00000173: 	movslq	%ecx, %rax
    00000176: 	leaq	0x10(,%rdx,8), %rdi
    0000017e: 	movq	%rax, %rdx
    00000181: 	movq	%rdi, 0x90(%rsp)
    00000189: 	leaq	0x8(,%rax,8), %rcx
    00000191: 	leaq	0x10(,%rax,8), %rax
    00000199: 	negq	%rdx
    0000019c: 	movq	%rax, 0x98(%rsp)
    000001a4: 	leaq	(,%rdx,8), %rdi
    000001ac: 	movq	%rcx, 0x88(%rsp)
    000001b4: 	movq	%rdi, 0xb0(%rsp)
    000001bc: 	leal	-0x2(%r11), %edi
    000001c0: 	movl	%edi, %eax
    000001c2: 	movl	%edi, 0x44(%rsp)
    000001c6: 	shrl	%eax
    000001c8: 	subl	$0x1, %eax
    000001cb: 	addq	$0x1, %rax
    000001cf: 	shlq	$0x4, %rax
    000001d3: 	movq	%rax, 0x38(%rsp)
    000001d8: 	movl	%edi, %eax
    000001da: 	andl	$-0x2, %edi
    000001dd: 	movl	%edi, %r13d
    000001e0: 	movl	%eax, %edi
    000001e2: 	leal	-0x3(%r11), %eax
    000001e6: 	orl	$0x1, %edi
    000001e9: 	shlq	$0x3, %rax
    000001ed: 	leal	0x2(%r13), %r15d
    000001f1: 	movq	%rax, 0xa8(%rsp)
    000001f9: 	movl	%edi, %r12d
    000001fc: 	movq	%rsi, %rax
    000001ff: 	movq	%rsi, %rdi
    00000202: 	shrq	%rax
    00000205: 	andq	$-0x2, %rdi
    00000209: 	shlq	$0x4, %rax
    0000020d: 	movq	%rdi, 0x70(%rsp)
    00000212: 	movq	%rax, 0x78(%rsp)
    00000217: 	movl	%r15d, %eax
    0000021a: 	movq	%rbx, %r15
    0000021d: 	movl	%eax, %ebx
    0000021f: 	nop # Size: 1
.Ltmp2889:
    00000220: 	movl	0x68(%rsp), %eax
    00000224: 	testl	%eax, %eax
    00000226: 	jle	.Ltmp2873 # Offset: 550
    0000022c: 	cmpl	$0x1, 0xa0(%rsp)
    00000234: 	jle	.Ltmp2873 # Offset: 564
    0000023a: 	movq	0x80(%rsp), %rsi
    00000242: 	movl	%eax, 0x1c(%rsp)
    00000246: 	movq	%r14, %rax
    00000249: 	pxor	%xmm2, %xmm2
    0000024d: 	subq	%rbp, %rax
    00000250: 	movsd	DATAat0x49410(%rip), %xmm7
    00000258: 	movsd	DATAat0x49400(%rip), %xmm8
    00000261: 	leaq	(%rbp,%rsi), %rdi
    00000266: 	movq	0x90(%rsp), %rsi
    0000026e: 	movq	%rax, 0x30(%rsp)
    00000273: 	movq	$-0x10, %rax
    0000027a: 	subq	%rbp, %rax
    0000027d: 	movq	%rdi, 0x8(%rsp)
    00000282: 	movq	0x88(%rsp), %rdi
    0000028a: 	addq	%rbp, %rsi
    0000028d: 	movq	%rax, 0x58(%rsp)
    00000292: 	movq	%rsi, 0x10(%rsp)
    00000297: 	movq	0x98(%rsp), %rsi
    0000029f: 	addq	%r14, %rdi
    000002a2: 	leaq	(%rbp,%rsi), %r8
    000002a7: 	movq	0xa8(%rsp), %rsi
    000002af: 	subq	%r14, %rsi
    000002b2: 	movq	%rsi, 0x50(%rsp)
    000002b7: 	movq	0xb0(%rsp), %rsi
    000002bf: 	movq	%rsi, 0x28(%rsp)
    000002c4: 	movl	0xa4(%rsp), %esi
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2877:
    000002d0: 	movl	0x20(%rsp), %eax
    000002d4: 	movl	%esi, %edx
    000002d6: 	subl	$0x1, 0x1c(%rsp)
    000002db: 	subl	%eax, %edx
    000002dd: 	cmpq	$0x10, 0x30(%rsp)
    000002e3: 	leal	(%rax,%rsi), %ecx
    000002e6: 	seta	%r9b
    000002ea: 	cmpl	$0x3, 0x40(%rsp)
    000002ef: 	setne	%al
    000002f2: 	andl	%r9d, %eax
    000002f5: 	cmpq	0x8(%rsp), %rdi
    000002fa: 	setne	%r9b
    000002fe: 	testb	%r9b, %al
    00000301: 	je	.Ltmp2874 # Offset: 769
    00000307: 	cmpq	0x10(%rsp), %rdi
    0000030c: 	je	.Ltmp2874 # Offset: 780
    00000312: 	movq	0x8(%rsp), %rax
    00000317: 	movl	%edx, 0x24(%rsp)
    0000031b: 	leaq	-0x10(%r8), %r10
    0000031f: 	movq	0x38(%rsp), %rdx
    00000324: 	leaq	-0x8(%rax), %r11
    00000328: 	movq	0x10(%rsp), %rax
    0000032d: 	leaq	-0x8(%rax), %r9
    00000331: 	xorl	%eax, %eax
    00000333: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2875:
    00000338: 	movupd	(%r11,%rax), %xmm0
    0000033e: 	movupd	(%r10,%rax), %xmm12
    00000344: 	movupd	(%r8,%rax), %xmm13
    0000034a: 	movupd	(%r9,%rax), %xmm14
    00000350: 	addpd	%xmm12, %xmm0
    00000355: 	movupd	(%rdi,%rax), %xmm15
    0000035b: 	addpd	%xmm13, %xmm0
    00000360: 	addpd	%xmm14, %xmm0
    00000365: 	addpd	%xmm2, %xmm0
    00000369: 	mulpd	%xmm6, %xmm0
    0000036d: 	subpd	%xmm15, %xmm0
    00000372: 	mulpd	%xmm5, %xmm0
    00000376: 	addpd	%xmm15, %xmm0
    0000037b: 	movups	%xmm0, (%rdi,%rax)
    0000037f: 	addq	$0x10, %rax
    00000383: 	cmpq	%rax, %rdx
    00000386: 	jne	.Ltmp2875 # Offset: 902
    00000388: 	movl	0x24(%rsp), %edx
    0000038c: 	cmpl	%r13d, 0x44(%rsp)
    00000391: 	je	.Ltmp2876 # Offset: 913
    00000393: 	addl	%r12d, %edx
    00000396: 	addl	%r12d, %ecx
    00000399: 	leal	(%rsi,%r12), %eax
    0000039d: 	movslq	%edx, %rdx
    000003a0: 	movslq	%ecx, %rcx
    000003a3: 	cltq
    000003a5: 	movsd	(%rbp,%rdx,8), %xmm0
    000003ab: 	leal	(%rsi,%r13), %edx
    000003af: 	leaq	(%r14,%rax,8), %rax
    000003b3: 	movslq	%edx, %rdx
    000003b6: 	movsd	(%rax), %xmm10
    000003bb: 	addsd	(%rbp,%rdx,8), %xmm0
    000003c1: 	leal	(%rsi,%rbx), %edx
    000003c4: 	movslq	%edx, %rdx
    000003c7: 	addsd	(%rbp,%rdx,8), %xmm0
    000003cd: 	addsd	(%rbp,%rcx,8), %xmm0
    000003d3: 	addsd	%xmm1, %xmm0
    000003d7: 	mulsd	%xmm4, %xmm0
    000003db: 	subsd	%xmm10, %xmm0
    000003e0: 	mulsd	%xmm3, %xmm0
    000003e4: 	addsd	%xmm10, %xmm0
    000003e9: 	movsd	%xmm0, (%rax)
.Ltmp2876:
    000003ed: 	movl	0x1c(%rsp), %eax
    000003f1: 	addq	%r15, 0x8(%rsp)
    000003f6: 	addq	%r15, %rdi
    000003f9: 	addq	%r15, %r8
    000003fc: 	addq	%r15, 0x10(%rsp)
    00000401: 	subl	0x20(%rsp), %esi
    00000405: 	subq	%r15, 0x28(%rsp)
    0000040a: 	testl	%eax, %eax
    0000040c: 	jne	.Ltmp2877 # Offset: 1036
.Ltmp2873:
    00000412: 	cmpq	$0x0, 0x48(%rsp)
    00000418: 	je	.Ltmp2878 # Offset: 1048
    0000041e: 	cmpl	$0x1, 0x64(%rsp)
    00000423: 	je	.Ltmp2879 # Offset: 1059
    00000429: 	movq	0x78(%rsp), %rdx
    0000042e: 	xorl	%eax, %eax
    00000430: 	movapd	%xmm1, %xmm2
    00000434: 	pxor	%xmm8, %xmm8
    00000439: 	movapd	DATAat0x494f0(%rip), %xmm10
    00000442: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2880:
    00000448: 	movupd	(%r14,%rax), %xmm0
    0000044e: 	movupd	(%rbp,%rax), %xmm7
    00000454: 	addq	$0x10, %rax
    00000458: 	subpd	%xmm0, %xmm7
    0000045c: 	movapd	%xmm7, %xmm0
    00000460: 	movapd	%xmm7, %xmm11
    00000465: 	cmpltpd	%xmm8, %xmm0
    0000046b: 	xorpd	%xmm10, %xmm11
    00000470: 	andpd	%xmm0, %xmm11
    00000475: 	andnpd	%xmm7, %xmm0
    00000479: 	orpd	%xmm11, %xmm0
    0000047e: 	addsd	%xmm0, %xmm2
    00000482: 	unpckhpd	%xmm0, %xmm0
    00000486: 	addsd	%xmm0, %xmm2
    0000048a: 	cmpq	%rax, %rdx
    0000048d: 	jne	.Ltmp2880 # Offset: 1165
    0000048f: 	movq	0x70(%rsp), %rax
    00000494: 	cmpq	%rax, 0x48(%rsp)
    00000499: 	je	.Ltmp2881 # Offset: 1177
.Ltmp2892:
    0000049b: 	movsd	(%rbp,%rax,8), %xmm0
    000004a1: 	subsd	(%r14,%rax,8), %xmm0
    000004a7: 	comisd	%xmm0, %xmm1
    000004ab: 	jbe	.Ltmp2882 # Offset: 1195
    000004ad: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2882:
    000004b5: 	addsd	%xmm0, %xmm2
.Ltmp2881:
    000004b9: 	movq	0x48(%rsp), %rdx
    000004be: 	movapd	%xmm1, %xmm7
    000004c2: 	xorl	%eax, %eax
    000004c4: 	nopl	(%rax) # Size: 4
.Ltmp2884:
    000004c8: 	movsd	(%rbp,%rax,8), %xmm0
    000004ce: 	subsd	(%r14,%rax,8), %xmm0
    000004d4: 	comisd	%xmm0, %xmm1
    000004d8: 	jbe	.Ltmp2883 # Offset: 1240
    000004da: 	xorpd	%xmm9, %xmm0
.Ltmp2883:
    000004df: 	maxsd	%xmm7, %xmm0
    000004e3: 	addq	$0x1, %rax
    000004e7: 	movapd	%xmm0, %xmm7
    000004eb: 	cmpq	%rax, %rdx
    000004ee: 	jne	.Ltmp2884 # Offset: 1262
    000004f0: 	movl	0x60(%rsp), %eax
    000004f4: 	cmpl	%eax, 0x140(%rsp)
    000004fb: 	jge	.Ltmp2885 # Offset: 1275
    000004fd: 	movsd	DATAat0x49538(%rip), %xmm0
    00000505: 	comisd	%xmm2, %xmm0
    00000509: 	ja	.Ltmp2886 # Offset: 1289
    0000050f: 	ucomisd	%xmm2, %xmm2
    00000513: 	jp	.Ltmp2887 # Offset: 1299
    00000519: 	movsd	DATAat0x49540(%rip), %xmm0
    00000521: 	comisd	%xmm7, %xmm0
    00000525: 	ja	.Ltmp2888 # Offset: 1317
    0000052b: 	ucomisd	%xmm7, %xmm7
    0000052f: 	jp	.Ltmp2887 # Offset: 1327
.Ltmp2885:
    00000535: 	addl	$0x1, 0x60(%rsp)
    0000053a: 	movq	%r14, %rax
    0000053d: 	movl	0x60(%rsp), %edi
    00000541: 	movq	%rbp, %r14
    00000544: 	cmpl	0x6c(%rsp), %edi
    00000548: 	je	.Ltmp2886 # Offset: 1352
    0000054e: 	movq	%rax, %rbp
    00000551: 	jmp	.Ltmp2889 # Offset: 1361
    00000556: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2874:
    00000560: 	movq	0x58(%rsp), %rcx
    00000565: 	movq	0x50(%rsp), %rdx
    0000056a: 	movq	0x8(%rsp), %r11
    0000056f: 	leaq	(%r8,%rcx), %rax
    00000573: 	leaq	(%rdi,%rdx), %r9
    00000577: 	movq	%rcx, %rdx
    0000057a: 	leaq	(%r11,%rcx), %rcx
    0000057e: 	movq	0x10(%rsp), %r11
    00000583: 	addq	%r11, %rdx
    00000586: 	movq	0x28(%rsp), %r11
    0000058b: 	addq	%r11, %rcx
    0000058e: 	addq	%r11, %rdx
    00000591: 	addq	%rbp, %rcx
    00000594: 	addq	%rbp, %rdx
    00000597: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2890:
    000005a0: 	movsd	0x8(%rcx,%rax), %xmm10
    000005a7: 	movsd	(%rbp,%rax), %xmm0
    000005ad: 	movsd	0x8(%r14,%rax), %xmm11
    000005b4: 	addsd	%xmm10, %xmm0
    000005b9: 	addsd	0x10(%rbp,%rax), %xmm0
    000005bf: 	addsd	0x8(%rdx,%rax), %xmm0
    000005c5: 	addsd	%xmm1, %xmm0
    000005c9: 	mulsd	%xmm8, %xmm0
    000005ce: 	subsd	%xmm11, %xmm0
    000005d3: 	mulsd	%xmm7, %xmm0
    000005d7: 	addsd	%xmm11, %xmm0
    000005dc: 	movsd	%xmm0, 0x8(%r14,%rax)
    000005e3: 	addq	$0x8, %rax
    000005e7: 	cmpq	%r9, %rax
    000005ea: 	jne	.Ltmp2890 # Offset: 1514
    000005ec: 	jmp	.Ltmp2876 # Offset: 1516
.Ltmp2878:
    000005f1: 	movl	0x60(%rsp), %eax
    000005f5: 	movapd	%xmm1, %xmm7
    000005f9: 	cmpl	%eax, 0x140(%rsp)
    00000600: 	jl	.Ltmp2891 # Offset: 1536
    00000602: 	movapd	%xmm1, %xmm2
    00000606: 	jmp	.Ltmp2885 # Offset: 1542
.Ltmp2879:
    0000060b: 	movapd	%xmm1, %xmm2
    0000060f: 	xorl	%eax, %eax
    00000611: 	jmp	.Ltmp2892 # Offset: 1553
.Ltmp2891:
    00000616: 	movapd	%xmm7, %xmm2
.Ltmp2886:
    0000061a: 	ucomisd	%xmm2, %xmm2
    0000061e: 	setp	%bpl
    00000622: 	ucomisd	%xmm7, %xmm7
    00000626: 	setp	%al
    00000629: 	orl	%eax, %ebp
.Ltmp2898:
    0000062b: 	movsd	%xmm7, 0x10(%rsp)
    00000631: 	movsd	%xmm2, 0x8(%rsp)
    00000637: 	callq	clock@PLT # Offset: 1591
    0000063c: 	movl	0xc0(%rsp), %edi
    00000643: 	pxor	%xmm0, %xmm0
    00000647: 	movsd	0xc8(%rsp), %xmm5
    00000650: 	movq	%rax, end_time(%rip)
    00000657: 	subq	start_time(%rip), %rax
    0000065e: 	cvtsi2sd	%rax, %xmm0
    00000663: 	movl	%edi, %eax
    00000665: 	divsd	DATAat0x49520(%rip), %xmm0
    0000066d: 	movsd	0x8(%rsp), %xmm2
    00000673: 	shrl	$0x1f, %eax
    00000676: 	movsd	0x10(%rsp), %xmm7
    0000067c: 	movq	%xmm0, %rbx
    00000681: 	addl	%edi, %eax
    00000683: 	movl	0x40(%rsp), %edi
    00000687: 	sarl	%eax
    00000689: 	movl	%edi, %edx
    0000068b: 	imull	%edi, %eax
    0000068e: 	shrl	$0x1f, %edx
    00000691: 	addl	%edi, %edx
    00000693: 	sarl	%edx
    00000695: 	addl	%edx, %eax
    00000697: 	testb	%bpl, %bpl
    0000069a: 	cltq
    0000069c: 	subsd	(%r14,%rax,8), %xmm5
    000006a2: 	movq	0xb8(%rsp), %rax
    000006aa: 	movq	0x8(%rax), %rdx
    000006ae: 	movq	(%rax), %rsi
    000006b1: 	movq	%xmm5, %r12
    000006b6: 	jne	.Ltmp2893 # Offset: 1718
    000006bc: 	movl	0x60(%rsp), %eax
    000006c0: 	cmpl	%eax, iterations(%rip)
    000006c6: 	jg	.Ltmp2894 # Offset: 1734
    000006c8: 	comisd	DATAat0x49538(%rip), %xmm2
    000006d0: 	jbe	.Ltmp2894 # Offset: 1744
    000006d2: 	comisd	DATAat0x49540(%rip), %xmm7
    000006da: 	ja	.Ltmp2895 # Offset: 1754
.Ltmp2894:
    000006e0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000006e7: 	movsd	%xmm7, 0x10(%rsp)
    000006ed: 	movq	%rbp, %rdi
    000006f0: 	movsd	%xmm2, 0x8(%rsp)
    000006f6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1782
    000006fb: 	movl	$0xa, %edx
    00000700: 	leaq	DATAat0x491ab(%rip), %rsi
    00000707: 	movq	%rax, %rdi
    0000070a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1802
    0000070f: 	movsd	0x10(%rsp), %xmm7
    00000715: 	movsd	0x8(%rsp), %xmm2
.Ltmp2897:
    0000071b: 	movl	$0x4, %edx
    00000720: 	movq	%rbp, %rdi
    00000723: 	leaq	DATAat0x491b6(%rip), %rsi
    0000072a: 	movsd	%xmm7, 0x10(%rsp)
    00000730: 	movsd	%xmm2, 0x8(%rsp)
    00000736: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1846
    0000073b: 	movl	0x60(%rsp), %esi
    0000073f: 	movq	%rbp, %rdi
    00000742: 	callq	_ZNSolsEi@PLT # Offset: 1858
    00000747: 	movl	$0xb, %edx
    0000074c: 	leaq	DATAat0x491bb(%rip), %rsi
    00000753: 	movq	%rax, %rdi
    00000756: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1878
    0000075b: 	movl	$0xa, %edx
    00000760: 	leaq	DATAat0x491c7(%rip), %rsi
    00000767: 	movq	%rbp, %rdi
    0000076a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1898
    0000076f: 	movsd	0x8(%rsp), %xmm2
    00000775: 	movq	%rbp, %rdi
    00000778: 	movapd	%xmm2, %xmm0
    0000077c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1916
    00000781: 	movl	$0x7, %edx
    00000786: 	leaq	DATAat0x491d2(%rip), %rsi
    0000078d: 	movq	%rax, %rdi
    00000790: 	movq	%rax, %rbp
    00000793: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1939
    00000798: 	movsd	0x10(%rsp), %xmm7
    0000079e: 	movq	%rbp, %rdi
    000007a1: 	movapd	%xmm7, %xmm0
    000007a5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1957
    000007aa: 	movl	$0x10, %edx
    000007af: 	leaq	DATAat0x491da(%rip), %rsi
    000007b6: 	movq	%rax, %rbp
    000007b9: 	movq	%rax, %rdi
    000007bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1980
    000007c1: 	movq	%r12, %xmm0
    000007c6: 	movq	%rbp, %rdi
    000007c9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1993
    000007ce: 	movl	$0x8, %edx
    000007d3: 	leaq	DATAat0x491eb(%rip), %rsi
    000007da: 	movq	%rax, %rbp
    000007dd: 	movq	%rax, %rdi
    000007e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2016
    000007e5: 	movq	%rbx, %xmm0
    000007ea: 	movq	%rbp, %rdi
    000007ed: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2029
    000007f2: 	movl	$0x2, %edx
    000007f7: 	leaq	DATAat0x491f4(%rip), %rsi
    000007fe: 	movq	%rax, %rdi
    00000801: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2049
    00000806: 	movl	0xc4(%rsp), %eax
    0000080d: 	movl	%eax, iterations(%rip)
    00000813: 	movq	0xf8(%rsp), %rax
    0000081b: 	subq	%fs:0x28, %rax
    00000824: 	jne	.Ltmp2896 # Offset: 2084
    0000082a: 	addq	$0x108, %rsp
    00000831: 	popq	%rbx
    00000832: 	popq	%rbp
    00000833: 	popq	%r12
    00000835: 	popq	%r13
    00000837: 	popq	%r14
    00000839: 	popq	%r15
    0000083b: 	retq # Offset: 2107
.Ltmp2893:
    0000083c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000843: 	movq	%rbp, %rdi
    00000846: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2118
    0000084b: 	movl	$0x10, %edx
    00000850: 	leaq	DATAat0x493d4(%rip), %rsi
    00000857: 	movq	%rax, %rdi
    0000085a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2138
    0000085f: 	movsd	0x8(%rsp), %xmm2
    00000865: 	movsd	0x10(%rsp), %xmm7
    0000086b: 	jmp	.Ltmp2897 # Offset: 2155
.Ltmp2887:
    00000870: 	movl	$0x1, %ebp
    00000875: 	jmp	.Ltmp2898 # Offset: 2165
.Ltmp2895:
    0000087a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000881: 	movsd	%xmm7, 0x10(%rsp)
    00000887: 	movq	%rbp, %rdi
    0000088a: 	movsd	%xmm2, 0x8(%rsp)
    00000890: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2192
    00000895: 	movl	$0x11, %edx
    0000089a: 	leaq	DATAat0x49199(%rip), %rsi
    000008a1: 	movq	%rax, %rdi
    000008a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2212
    000008a9: 	movsd	0x8(%rsp), %xmm2
    000008af: 	movsd	0x10(%rsp), %xmm7
    000008b5: 	jmp	.Ltmp2897 # Offset: 2229
.Ltmp2888:
    000008ba: 	ucomisd	%xmm7, %xmm7
    000008be: 	setp	%bpl
    000008c2: 	jmp	.Ltmp2898 # Offset: 2242
.Ltmp2872:
    000008c7: 	pxor	%xmm7, %xmm7
    000008cb: 	movl	$0x0, 0x60(%rsp)
    000008d3: 	xorl	%ebp, %ebp
    000008d5: 	movapd	%xmm7, %xmm2
    000008d9: 	jmp	.Ltmp2898 # Offset: 2265
.Ltmp2896:
    000008de: 	callq	__stack_chk_fail@PLT # Offset: 2270
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd21jacobi_sor2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x42380
  Size        : 0xaf0
  MaxSize     : 0xaf0
  Offset      : 0x42380
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd21jacobi_sor2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xa8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0x60(%rsp)
    0000002f: 	movl	%ebp, %edx
    00000031: 	movl	%ecx, 0x28(%rsp)
    00000035: 	leaq	0x70(%rsp), %rcx
    0000003a: 	movl	%r8d, 0x1c(%rsp)
    0000003f: 	movq	%r9, 0x58(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x98(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	movaps	%xmm0, 0x70(%rsp)
    0000005c: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000064: 	movaps	%xmm0, 0x80(%rsp)
    0000006c: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 108
    00000071: 	movl	%r14d, %edi
    00000074: 	imull	%ebp, %edi
    00000077: 	movsd	%xmm0, 0x68(%rsp)
    0000007d: 	movl	%edi, 0x3c(%rsp)
    00000081: 	testl	%edi, %edi
    00000083: 	jle	.Ltmp2899 # Offset: 131
    00000085: 	movslq	%edi, %rdx
    00000088: 	movq	%rbx, %rsi
    0000008b: 	movq	%r15, %rdi
    0000008e: 	shlq	$0x3, %rdx
    00000092: 	callq	memmove@PLT # Offset: 146
.Ltmp2899:
    00000097: 	movl	iterations(%rip), %eax
    0000009d: 	movl	$0x2710, iterations(%rip)
    000000a7: 	movl	%eax, 0x64(%rsp)
    000000ab: 	callq	clock@PLT # Offset: 171
    000000b0: 	movq	%rax, start_time(%rip)
    000000b7: 	movl	iterations(%rip), %eax
    000000bd: 	movl	%eax, 0x40(%rsp)
    000000c1: 	testl	%eax, %eax
    000000c3: 	jle	.Ltmp2900 # Offset: 195
    000000c9: 	movl	0x60(%rsp), %eax
    000000cd: 	movl	0x1c(%rsp), %edx
    000000d1: 	movl	$0x0, 0x38(%rsp)
    000000d9: 	pxor	%xmm4, %xmm4
    000000dd: 	movapd	DATAat0x49400(%rip), %xmm2
    000000e5: 	movapd	DATAat0x49410(%rip), %xmm7
    000000ed: 	subl	$0x1, %eax
    000000f0: 	addl	%edx, %edx
    000000f2: 	movl	%eax, 0x18(%rsp)
    000000f6: 	movl	0x28(%rsp), %eax
    000000fa: 	movl	%edx, 0x44(%rsp)
    000000fe: 	leal	-0x4(%rax), %ecx
    00000101: 	subl	$0x6, %eax
    00000104: 	movl	%ecx, 0x20(%rsp)
    00000108: 	movslq	0x3c(%rsp), %rcx
    0000010d: 	movl	%eax, %r14d
    00000110: 	movl	%eax, 0x24(%rsp)
    00000114: 	andl	$-0x4, %eax
    00000117: 	shrl	$0x2, %r14d
    0000011b: 	leal	0x1(%rax), %edx
    0000011e: 	leal	0x5(%rax), %r11d
    00000122: 	movq	%rcx, %rax
    00000125: 	movq	%rcx, 0x30(%rsp)
    0000012a: 	shrq	%rax
    0000012d: 	andq	$-0x2, %rcx
    00000131: 	movl	%edx, 0x2c(%rsp)
    00000135: 	shlq	$0x4, %rax
    00000139: 	movq	%rcx, 0x48(%rsp)
    0000013e: 	movq	%rax, 0x50(%rsp)
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2920:
    00000148: 	cmpl	$0x1, 0x18(%rsp)
    0000014d: 	jle	.Ltmp2901 # Offset: 333
    00000153: 	movl	0x28(%rsp), %eax
    00000157: 	movl	0x44(%rsp), %ecx
    0000015b: 	movl	%r14d, 0x8(%rsp)
    00000160: 	xorl	%edx, %edx
    00000162: 	movl	$0x1, (%rsp)
    00000169: 	movapd	DATAat0x49410(%rip), %xmm3
    00000171: 	subl	$0x1, %eax
    00000174: 	movsd	DATAat0x49400(%rip), %xmm6
    0000017c: 	movsd	DATAat0x49410(%rip), %xmm5
    00000184: 	movl	%eax, 0x14(%rsp)
    00000188: 	movl	0x1c(%rsp), %eax
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp2908:
    00000190: 	addl	$0x1, (%rsp)
    00000194: 	cmpl	$0x1, 0x20(%rsp)
    00000199: 	movl	$0x1, %esi
    0000019e: 	jle	.Ltmp2902 # Offset: 414
    000001a4: 	cmpl	$0x3, 0x24(%rsp)
    000001a9: 	jbe	.Ltmp2903 # Offset: 425
    000001af: 	movslq	%edx, %rdi
    000001b2: 	movslq	%eax, %rsi
    000001b5: 	movl	0x8(%rsp), %r14d
    000001ba: 	movapd	%xmm2, %xmm9
    000001bf: 	leaq	0x8(%rbx,%rdi,8), %rbp
    000001c4: 	leaq	0x8(,%rsi,8), %rsi
    000001cc: 	movslq	%ecx, %rdi
    000001cf: 	leaq	(%r15,%rsi), %r8
    000001d3: 	leaq	-0x8(%rbx,%rsi), %r10
    000001d8: 	movapd	%xmm3, %xmm8
    000001dd: 	leaq	0x8(%rbx,%rdi,8), %r9
    000001e2: 	leaq	0x18(%rbx,%rsi), %r13
    000001e7: 	pxor	%xmm10, %xmm10
    000001ec: 	xorl	%edi, %edi
    000001ee: 	leaq	0x10(%r15,%rsi), %r12
    000001f3: 	xorl	%esi, %esi
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp2904:
    000001f8: 	movupd	0x10(%r10,%rsi), %xmm1
    000001ff: 	movupd	0x10(%rbp,%rsi), %xmm0
    00000205: 	addl	$0x1, %edi
    00000208: 	movupd	(%rbp,%rsi), %xmm15
    0000020f: 	movupd	(%r9,%rsi), %xmm12
    00000215: 	addpd	%xmm1, %xmm0
    00000219: 	movupd	(%r13,%rsi), %xmm1
    00000220: 	movupd	(%r8,%rsi), %xmm13
    00000226: 	addpd	%xmm1, %xmm0
    0000022a: 	movupd	0x10(%r9,%rsi), %xmm1
    00000231: 	addpd	%xmm1, %xmm0
    00000235: 	movupd	0x10(%r8,%rsi), %xmm1
    0000023c: 	addpd	%xmm10, %xmm0
    00000241: 	mulpd	%xmm2, %xmm0
    00000245: 	subpd	%xmm1, %xmm0
    00000249: 	mulpd	%xmm3, %xmm0
    0000024d: 	addpd	%xmm1, %xmm0
    00000251: 	movupd	(%r10,%rsi), %xmm1
    00000257: 	addpd	%xmm15, %xmm1
    0000025c: 	movupd	0x10(%r10,%rsi), %xmm15
    00000263: 	addpd	%xmm15, %xmm1
    00000268: 	addpd	%xmm12, %xmm1
    0000026d: 	addpd	%xmm10, %xmm1
    00000272: 	mulpd	%xmm2, %xmm1
    00000276: 	subpd	%xmm13, %xmm1
    0000027b: 	mulpd	%xmm3, %xmm1
    0000027f: 	addpd	%xmm13, %xmm1
    00000284: 	movups	%xmm1, (%r8,%rsi)
    00000289: 	movups	%xmm0, (%r12,%rsi)
    0000028e: 	addq	$0x20, %rsi
    00000292: 	cmpl	%r14d, %edi
    00000295: 	jb	.Ltmp2904 # Offset: 661
    0000029b: 	movl	%r14d, 0x8(%rsp)
    000002a0: 	movl	0x2c(%rsp), %esi
.Ltmp2921:
    000002a4: 	leal	(%rax,%rsi), %edi
    000002a7: 	leal	0x2(%rsi), %r8d
    000002ab: 	pxor	%xmm10, %xmm10
    000002b0: 	movslq	%edi, %rdi
    000002b3: 	leal	(%rax,%r8), %r9d
    000002b7: 	leaq	(%r15,%rdi,8), %r10
    000002bb: 	leal	0x1(%rsi), %edi
    000002be: 	movslq	%r9d, %r9
    000002c1: 	leal	(%rax,%rdi), %ebp
    000002c4: 	leaq	(%r15,%r9,8), %r9
    000002c8: 	movupd	(%r10), %xmm13
    000002cd: 	movslq	%ebp, %rbp
    000002d0: 	movupd	(%rbx,%rbp,8), %xmm11
    000002d6: 	leal	(%rdx,%r8), %ebp
    000002da: 	addl	%ecx, %r8d
    000002dd: 	movslq	%ebp, %rbp
    000002e0: 	movslq	%r8d, %r8
    000002e3: 	movupd	(%rbx,%rbp,8), %xmm1
    000002e8: 	leal	0x3(%rsi,%rax), %ebp
    000002ec: 	movslq	%ebp, %rbp
    000002ef: 	addpd	%xmm11, %xmm1
    000002f4: 	movupd	(%rbx,%rbp,8), %xmm0
    000002f9: 	leal	(%rdx,%rsi), %ebp
    000002fc: 	movslq	%ebp, %rbp
    000002ff: 	addpd	%xmm0, %xmm1
    00000303: 	movupd	(%rbx,%r8,8), %xmm0
    00000309: 	leal	(%rdx,%rdi), %r8d
    0000030d: 	addl	%ecx, %edi
    0000030f: 	movslq	%r8d, %r8
    00000312: 	movslq	%edi, %rdi
    00000315: 	addpd	%xmm0, %xmm1
    00000319: 	movupd	(%r9), %xmm0
    0000031e: 	addpd	%xmm10, %xmm1
    00000323: 	mulpd	%xmm9, %xmm1
    00000328: 	subpd	%xmm0, %xmm1
    0000032c: 	mulpd	%xmm8, %xmm1
    00000331: 	addpd	%xmm0, %xmm1
    00000335: 	movsd	(%rbx,%rbp,8), %xmm0
    0000033a: 	movhpd	(%rbx,%r8,8), %xmm0
    00000340: 	leal	-0x1(%rsi,%rax), %r8d
    00000345: 	addl	%ecx, %esi
    00000347: 	movslq	%r8d, %r8
    0000034a: 	movslq	%esi, %rsi
    0000034d: 	movupd	(%rbx,%r8,8), %xmm12
    00000353: 	addpd	%xmm12, %xmm0
    00000358: 	addpd	%xmm11, %xmm0
    0000035d: 	movsd	(%rbx,%rsi,8), %xmm11
    00000363: 	movl	%r11d, %esi
    00000366: 	movhpd	(%rbx,%rdi,8), %xmm11
    0000036c: 	addpd	%xmm11, %xmm0
    00000371: 	addpd	%xmm10, %xmm0
    00000376: 	mulpd	%xmm9, %xmm0
    0000037b: 	subpd	%xmm13, %xmm0
    00000380: 	mulpd	%xmm8, %xmm0
    00000385: 	addpd	%xmm13, %xmm0
    0000038a: 	movups	%xmm0, (%r10)
    0000038e: 	movups	%xmm1, (%r9)
.Ltmp2902:
    00000392: 	cmpl	0x14(%rsp), %esi
    00000396: 	jge	.Ltmp2905 # Offset: 918
    0000039c: 	movslq	%esi, %r10
    0000039f: 	movslq	%ecx, %r12
    000003a2: 	movslq	%eax, %rbp
    000003a5: 	movslq	%edx, %r9
    000003a8: 	addq	%r10, %rbp
    000003ab: 	leaq	0x1(%r10,%r9), %r9
    000003b0: 	movl	0x28(%rsp), %edi
    000003b4: 	leaq	0x1(%r10,%r12), %r10
    000003b9: 	movq	%r15, %r12
    000003bc: 	shlq	$0x3, %r9
    000003c0: 	leaq	(,%rbp,8), %r13
    000003c8: 	subq	%rbx, %r12
    000003cb: 	subl	%esi, %edi
    000003cd: 	shlq	$0x3, %r10
    000003d1: 	leaq	(%r15,%r13), %r8
    000003d5: 	cmpq	$0x10, %r12
    000003d9: 	seta	%r12b
    000003dd: 	cmpl	$0x2, %edi
    000003e0: 	setne	0x13(%rsp)
    000003e5: 	movzbl	0x13(%rsp), %r14d
    000003eb: 	andl	%r14d, %r12d
    000003ee: 	leaq	(%rbx,%r9), %r14
    000003f2: 	cmpq	%r14, %r8
    000003f5: 	setne	0x13(%rsp)
    000003fa: 	movzbl	0x13(%rsp), %r14d
    00000400: 	testb	%r12b, %r14b
    00000403: 	je	.Ltmp2906 # Offset: 1027
    00000409: 	leaq	(%rbx,%r10), %r12
    0000040d: 	cmpq	%r12, %r8
    00000410: 	je	.Ltmp2906 # Offset: 1040
    00000416: 	leaq	-0x8(%rbx,%r9), %rbp
    0000041b: 	leaq	-0x8(%rbx,%r13), %r12
    00000420: 	movupd	(%r8), %xmm9
    00000425: 	subl	$0x1, %edi
    00000428: 	movupd	(%r12), %xmm1
    0000042e: 	movupd	(%rbp), %xmm0
    00000433: 	leaq	0x8(%rbx,%r13), %r13
    00000438: 	leaq	-0x8(%rbx,%r10), %r9
    0000043d: 	movl	%edi, %r10d
    00000440: 	addpd	%xmm1, %xmm0
    00000444: 	movupd	(%r13), %xmm1
    0000044a: 	shrl	%r10d
    0000044d: 	addpd	%xmm1, %xmm0
    00000451: 	movupd	(%r9), %xmm1
    00000456: 	addpd	%xmm1, %xmm0
    0000045a: 	pxor	%xmm1, %xmm1
    0000045e: 	addpd	%xmm1, %xmm0
    00000462: 	mulpd	%xmm2, %xmm0
    00000466: 	subpd	%xmm9, %xmm0
    0000046b: 	mulpd	%xmm7, %xmm0
    0000046f: 	addpd	%xmm9, %xmm0
    00000474: 	movups	%xmm0, (%r8)
    00000478: 	cmpl	$0x1, %r10d
    0000047c: 	je	.Ltmp2907 # Offset: 1148
    0000047e: 	movupd	0x10(%rbp), %xmm8
    00000484: 	movupd	0x10(%r12), %xmm0
    0000048b: 	addpd	%xmm8, %xmm0
    00000490: 	movupd	0x10(%r13), %xmm8
    00000496: 	addpd	%xmm8, %xmm0
    0000049b: 	movupd	0x10(%r9), %xmm8
    000004a1: 	addpd	%xmm8, %xmm0
    000004a6: 	addpd	%xmm1, %xmm0
    000004aa: 	movupd	0x10(%r8), %xmm1
    000004b0: 	mulpd	%xmm2, %xmm0
    000004b4: 	subpd	%xmm1, %xmm0
    000004b8: 	mulpd	%xmm7, %xmm0
    000004bc: 	addpd	%xmm1, %xmm0
    000004c0: 	movups	%xmm0, 0x10(%r8)
.Ltmp2907:
    000004c5: 	movl	%edi, %r8d
    000004c8: 	andl	$-0x2, %r8d
    000004cc: 	addl	%r8d, %esi
    000004cf: 	cmpl	%edi, %r8d
    000004d2: 	je	.Ltmp2905 # Offset: 1234
    000004d4: 	leal	(%rax,%rsi), %edi
    000004d7: 	movslq	%edi, %rdi
    000004da: 	leaq	(%r15,%rdi,8), %r8
    000004de: 	leal	(%rdx,%rsi), %edi
    000004e1: 	movslq	%edi, %rdi
    000004e4: 	movsd	(%r8), %xmm1
    000004e9: 	movsd	(%rbx,%rdi,8), %xmm0
    000004ee: 	leal	-0x1(%rax,%rsi), %edi
    000004f2: 	movslq	%edi, %rdi
    000004f5: 	addsd	(%rbx,%rdi,8), %xmm0
    000004fa: 	leal	0x1(%rax,%rsi), %edi
    000004fe: 	addl	%ecx, %esi
    00000500: 	movslq	%edi, %rdi
    00000503: 	movslq	%esi, %rsi
    00000506: 	addsd	(%rbx,%rdi,8), %xmm0
    0000050b: 	addsd	(%rbx,%rsi,8), %xmm0
    00000510: 	addsd	%xmm4, %xmm0
    00000514: 	mulsd	%xmm6, %xmm0
    00000518: 	subsd	%xmm1, %xmm0
    0000051c: 	mulsd	%xmm5, %xmm0
    00000520: 	addsd	%xmm1, %xmm0
    00000524: 	movsd	%xmm0, (%r8)
.Ltmp2905:
    00000529: 	movl	0x1c(%rsp), %edi
    0000052d: 	movl	(%rsp), %esi
    00000530: 	addl	%edi, %edx
    00000532: 	addl	%edi, %eax
    00000534: 	addl	%edi, %ecx
    00000536: 	cmpl	%esi, 0x18(%rsp)
    0000053a: 	jne	.Ltmp2908 # Offset: 1338
    00000540: 	movl	0x8(%rsp), %r14d
.Ltmp2901:
    00000545: 	cmpq	$0x0, 0x30(%rsp)
    0000054b: 	je	.Ltmp2909 # Offset: 1355
    00000551: 	cmpl	$0x1, 0x3c(%rsp)
    00000556: 	je	.Ltmp2910 # Offset: 1366
    0000055c: 	movq	0x50(%rsp), %rdx
    00000561: 	xorl	%eax, %eax
    00000563: 	movapd	%xmm4, %xmm1
    00000567: 	pxor	%xmm6, %xmm6
    0000056b: 	movapd	DATAat0x494f0(%rip), %xmm8
    00000574: 	nopl	(%rax) # Size: 4
.Ltmp2911:
    00000578: 	movupd	(%r15,%rax), %xmm5
    0000057e: 	movupd	(%rbx,%rax), %xmm3
    00000583: 	addq	$0x10, %rax
    00000587: 	subpd	%xmm5, %xmm3
    0000058b: 	movapd	%xmm3, %xmm0
    0000058f: 	movapd	%xmm3, %xmm5
    00000593: 	cmpltpd	%xmm6, %xmm0
    00000598: 	xorpd	%xmm8, %xmm5
    0000059d: 	andpd	%xmm0, %xmm5
    000005a1: 	andnpd	%xmm3, %xmm0
    000005a5: 	orpd	%xmm5, %xmm0
    000005a9: 	addsd	%xmm0, %xmm1
    000005ad: 	unpckhpd	%xmm0, %xmm0
    000005b1: 	addsd	%xmm0, %xmm1
    000005b5: 	cmpq	%rax, %rdx
    000005b8: 	jne	.Ltmp2911 # Offset: 1464
    000005ba: 	movq	0x48(%rsp), %rax
    000005bf: 	cmpq	%rax, 0x30(%rsp)
    000005c4: 	je	.Ltmp2912 # Offset: 1476
.Ltmp2923:
    000005c6: 	movsd	(%rbx,%rax,8), %xmm0
    000005cb: 	subsd	(%r15,%rax,8), %xmm0
    000005d1: 	comisd	%xmm0, %xmm4
    000005d5: 	jbe	.Ltmp2913 # Offset: 1493
    000005d7: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2913:
    000005df: 	addsd	%xmm0, %xmm1
.Ltmp2912:
    000005e3: 	movq	DATAat0x49500(%rip), %xmm5
    000005eb: 	movq	0x30(%rsp), %rdx
    000005f0: 	movapd	%xmm4, %xmm3
    000005f4: 	xorl	%eax, %eax
    000005f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2915:
    00000600: 	movsd	(%rbx,%rax,8), %xmm0
    00000605: 	subsd	(%r15,%rax,8), %xmm0
    0000060b: 	comisd	%xmm0, %xmm4
    0000060f: 	jbe	.Ltmp2914 # Offset: 1551
    00000611: 	xorpd	%xmm5, %xmm0
.Ltmp2914:
    00000615: 	maxsd	%xmm3, %xmm0
    00000619: 	addq	$0x1, %rax
    0000061d: 	movapd	%xmm0, %xmm3
    00000621: 	cmpq	%rax, %rdx
    00000624: 	jne	.Ltmp2915 # Offset: 1572
    00000626: 	movl	0x38(%rsp), %eax
    0000062a: 	cmpl	%eax, 0xe0(%rsp)
    00000631: 	jge	.Ltmp2916 # Offset: 1585
    00000633: 	movsd	DATAat0x49538(%rip), %xmm0
    0000063b: 	comisd	%xmm1, %xmm0
    0000063f: 	ja	.Ltmp2917 # Offset: 1599
    00000645: 	ucomisd	%xmm1, %xmm1
    00000649: 	jp	.Ltmp2918 # Offset: 1609
    0000064f: 	movsd	DATAat0x49540(%rip), %xmm0
    00000657: 	comisd	%xmm3, %xmm0
    0000065b: 	ja	.Ltmp2919 # Offset: 1627
    00000661: 	ucomisd	%xmm3, %xmm3
    00000665: 	jp	.Ltmp2918 # Offset: 1637
.Ltmp2916:
    0000066b: 	addl	$0x1, 0x38(%rsp)
    00000670: 	movq	%r15, %rax
    00000673: 	movl	0x38(%rsp), %ecx
    00000677: 	movq	%rbx, %r15
    0000067a: 	cmpl	0x40(%rsp), %ecx
    0000067e: 	je	.Ltmp2917 # Offset: 1662
    00000684: 	movq	%rax, %rbx
    00000687: 	jmp	.Ltmp2920 # Offset: 1671
    0000068c: 	nopl	(%rax) # Size: 4
.Ltmp2906:
    00000690: 	leal	-0x1(%rsi,%rax), %edi
    00000694: 	movsd	(%r8), %xmm1
    00000699: 	movl	0x14(%rsp), %r14d
    0000069e: 	movsd	-0x8(%rbx,%r9), %xmm0
    000006a5: 	movslq	%edi, %rdi
    000006a8: 	leal	0x1(%rsi), %r9d
    000006ac: 	addsd	(%rbx,%rdi,8), %xmm0
    000006b1: 	leal	(%r9,%rax), %edi
    000006b5: 	movslq	%edi, %rdi
    000006b8: 	shlq	$0x3, %rdi
    000006bc: 	leaq	(%rbx,%rdi), %r12
    000006c0: 	addsd	(%r12), %xmm0
    000006c6: 	addsd	-0x8(%rbx,%r10), %xmm0
    000006cd: 	addsd	%xmm4, %xmm0
    000006d1: 	mulsd	%xmm6, %xmm0
    000006d5: 	subsd	%xmm1, %xmm0
    000006d9: 	mulsd	%xmm5, %xmm0
    000006dd: 	addsd	%xmm1, %xmm0
    000006e1: 	movsd	%xmm0, (%r8)
    000006e6: 	cmpl	%r14d, %r9d
    000006e9: 	jge	.Ltmp2905 # Offset: 1769
    000006ef: 	leal	(%r9,%rdx), %r8d
    000006f3: 	leal	0x2(%rsi), %r10d
    000006f7: 	addl	%ecx, %r9d
    000006fa: 	addq	%r15, %rdi
    000006fd: 	movslq	%r8d, %r8
    00000700: 	movslq	%r9d, %r9
    00000703: 	movsd	(%rdi), %xmm1
    00000707: 	movsd	(%rbx,%r8,8), %xmm0
    0000070d: 	leal	(%r10,%rax), %r8d
    00000711: 	addsd	(%rbx,%rbp,8), %xmm0
    00000716: 	movslq	%r8d, %r8
    00000719: 	shlq	$0x3, %r8
    0000071d: 	leaq	(%rbx,%r8), %r13
    00000721: 	addsd	(%r13), %xmm0
    00000727: 	addsd	(%rbx,%r9,8), %xmm0
    0000072d: 	addsd	%xmm4, %xmm0
    00000731: 	mulsd	%xmm6, %xmm0
    00000735: 	subsd	%xmm1, %xmm0
    00000739: 	mulsd	%xmm5, %xmm0
    0000073d: 	addsd	%xmm1, %xmm0
    00000741: 	movsd	%xmm0, (%rdi)
    00000745: 	cmpl	%r14d, %r10d
    00000748: 	jge	.Ltmp2905 # Offset: 1864
    0000074e: 	leal	(%r10,%rdx), %edi
    00000752: 	addq	%r15, %r8
    00000755: 	movslq	%edi, %rdi
    00000758: 	movsd	(%r8), %xmm1
    0000075d: 	movsd	(%rbx,%rdi,8), %xmm0
    00000762: 	leal	0x3(%rsi), %edi
    00000765: 	addsd	(%r12), %xmm0
    0000076b: 	leal	(%rdi,%rax), %r9d
    0000076f: 	movslq	%r9d, %r9
    00000772: 	addsd	(%rbx,%r9,8), %xmm0
    00000778: 	leaq	(,%r9,8), %rbp
    00000780: 	leal	(%r10,%rcx), %r9d
    00000784: 	movslq	%r9d, %r9
    00000787: 	addsd	(%rbx,%r9,8), %xmm0
    0000078d: 	addsd	%xmm4, %xmm0
    00000791: 	mulsd	%xmm6, %xmm0
    00000795: 	subsd	%xmm1, %xmm0
    00000799: 	mulsd	%xmm5, %xmm0
    0000079d: 	addsd	%xmm1, %xmm0
    000007a1: 	movsd	%xmm0, (%r8)
    000007a6: 	cmpl	%r14d, %edi
    000007a9: 	jge	.Ltmp2905 # Offset: 1961
    000007af: 	leal	(%rdi,%rdx), %r8d
    000007b3: 	leal	0x4(%rsi,%rax), %esi
    000007b7: 	addq	%r15, %rbp
    000007ba: 	movslq	%esi, %rsi
    000007bd: 	movslq	%r8d, %r8
    000007c0: 	movsd	(%rbp), %xmm1
    000007c5: 	movsd	(%rbx,%r8,8), %xmm0
    000007cb: 	addsd	(%r13), %xmm0
    000007d1: 	addsd	(%rbx,%rsi,8), %xmm0
    000007d6: 	leal	(%rdi,%rcx), %esi
    000007d9: 	movslq	%esi, %rsi
    000007dc: 	addsd	(%rbx,%rsi,8), %xmm0
    000007e1: 	addsd	%xmm4, %xmm0
    000007e5: 	mulsd	%xmm6, %xmm0
    000007e9: 	subsd	%xmm1, %xmm0
    000007ed: 	mulsd	%xmm5, %xmm0
    000007f1: 	addsd	%xmm1, %xmm0
    000007f5: 	movsd	%xmm0, (%rbp)
    000007fa: 	jmp	.Ltmp2905 # Offset: 2042
.Ltmp2903:
    000007ff: 	movl	$0x1, %esi
    00000804: 	movapd	%xmm2, %xmm9
    00000809: 	movapd	%xmm7, %xmm8
    0000080e: 	jmp	.Ltmp2921 # Offset: 2062
.Ltmp2909:
    00000813: 	movl	0x38(%rsp), %eax
    00000817: 	movapd	%xmm4, %xmm1
    0000081b: 	cmpl	%eax, 0xe0(%rsp)
    00000822: 	jl	.Ltmp2922 # Offset: 2082
    00000824: 	movapd	%xmm4, %xmm3
    00000828: 	jmp	.Ltmp2916 # Offset: 2088
.Ltmp2910:
    0000082d: 	movapd	%xmm4, %xmm1
    00000831: 	xorl	%eax, %eax
    00000833: 	jmp	.Ltmp2923 # Offset: 2099
.Ltmp2922:
    00000838: 	movapd	%xmm1, %xmm3
.Ltmp2917:
    0000083c: 	ucomisd	%xmm1, %xmm1
    00000840: 	setp	%bpl
    00000844: 	ucomisd	%xmm3, %xmm3
    00000848: 	setp	%al
    0000084b: 	orl	%eax, %ebp
.Ltmp2929:
    0000084d: 	movsd	%xmm3, 0x8(%rsp)
    00000853: 	movsd	%xmm1, (%rsp)
    00000858: 	callq	clock@PLT # Offset: 2136
    0000085d: 	movl	0x60(%rsp), %ecx
    00000861: 	pxor	%xmm0, %xmm0
    00000865: 	movsd	0x68(%rsp), %xmm7
    0000086b: 	movq	%rax, end_time(%rip)
    00000872: 	subq	start_time(%rip), %rax
    00000879: 	cvtsi2sd	%rax, %xmm0
    0000087e: 	movl	%ecx, %eax
    00000880: 	divsd	DATAat0x49520(%rip), %xmm0
    00000888: 	movsd	(%rsp), %xmm1
    0000088d: 	shrl	$0x1f, %eax
    00000890: 	movsd	0x8(%rsp), %xmm3
    00000896: 	movq	%xmm0, %rbx
    0000089b: 	addl	%ecx, %eax
    0000089d: 	movl	0x28(%rsp), %ecx
    000008a1: 	sarl	%eax
    000008a3: 	movl	%ecx, %edx
    000008a5: 	imull	%ecx, %eax
    000008a8: 	shrl	$0x1f, %edx
    000008ab: 	addl	%ecx, %edx
    000008ad: 	sarl	%edx
    000008af: 	addl	%edx, %eax
    000008b1: 	testb	%bpl, %bpl
    000008b4: 	cltq
    000008b6: 	subsd	(%r15,%rax,8), %xmm7
    000008bc: 	movq	0x58(%rsp), %rax
    000008c1: 	movq	0x8(%rax), %rdx
    000008c5: 	movq	(%rax), %rsi
    000008c8: 	movq	%xmm7, %r12
    000008cd: 	jne	.Ltmp2924 # Offset: 2253
    000008d3: 	movl	0x38(%rsp), %eax
    000008d7: 	cmpl	%eax, iterations(%rip)
    000008dd: 	jg	.Ltmp2925 # Offset: 2269
    000008df: 	comisd	DATAat0x49538(%rip), %xmm1
    000008e7: 	jbe	.Ltmp2925 # Offset: 2279
    000008e9: 	comisd	DATAat0x49540(%rip), %xmm3
    000008f1: 	ja	.Ltmp2926 # Offset: 2289
.Ltmp2925:
    000008f7: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000008fe: 	movsd	%xmm3, 0x8(%rsp)
    00000904: 	movq	%rbp, %rdi
    00000907: 	movsd	%xmm1, (%rsp)
    0000090c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2316
    00000911: 	movl	$0xa, %edx
    00000916: 	leaq	DATAat0x491ab(%rip), %rsi
    0000091d: 	movq	%rax, %rdi
    00000920: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2336
    00000925: 	movsd	0x8(%rsp), %xmm3
    0000092b: 	movsd	(%rsp), %xmm1
.Ltmp2928:
    00000930: 	movl	$0x4, %edx
    00000935: 	movq	%rbp, %rdi
    00000938: 	movsd	%xmm1, (%rsp)
    0000093d: 	leaq	DATAat0x491b6(%rip), %rsi
    00000944: 	movsd	%xmm3, 0x8(%rsp)
    0000094a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2378
    0000094f: 	movl	0x38(%rsp), %esi
    00000953: 	movq	%rbp, %rdi
    00000956: 	callq	_ZNSolsEi@PLT # Offset: 2390
    0000095b: 	movl	$0xb, %edx
    00000960: 	leaq	DATAat0x491bb(%rip), %rsi
    00000967: 	movq	%rax, %rdi
    0000096a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2410
    0000096f: 	movl	$0xa, %edx
    00000974: 	leaq	DATAat0x491c7(%rip), %rsi
    0000097b: 	movq	%rbp, %rdi
    0000097e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2430
    00000983: 	movsd	(%rsp), %xmm1
    00000988: 	movq	%rbp, %rdi
    0000098b: 	movapd	%xmm1, %xmm0
    0000098f: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2447
    00000994: 	movl	$0x7, %edx
    00000999: 	leaq	DATAat0x491d2(%rip), %rsi
    000009a0: 	movq	%rax, %rdi
    000009a3: 	movq	%rax, %rbp
    000009a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2470
    000009ab: 	movsd	0x8(%rsp), %xmm3
    000009b1: 	movq	%rbp, %rdi
    000009b4: 	movapd	%xmm3, %xmm0
    000009b8: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2488
    000009bd: 	movl	$0x10, %edx
    000009c2: 	leaq	DATAat0x491da(%rip), %rsi
    000009c9: 	movq	%rax, %rbp
    000009cc: 	movq	%rax, %rdi
    000009cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2511
    000009d4: 	movq	%r12, %xmm0
    000009d9: 	movq	%rbp, %rdi
    000009dc: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2524
    000009e1: 	movl	$0x8, %edx
    000009e6: 	leaq	DATAat0x491eb(%rip), %rsi
    000009ed: 	movq	%rax, %rbp
    000009f0: 	movq	%rax, %rdi
    000009f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2547
    000009f8: 	movq	%rbx, %xmm0
    000009fd: 	movq	%rbp, %rdi
    00000a00: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2560
    00000a05: 	movl	$0x2, %edx
    00000a0a: 	leaq	DATAat0x491f4(%rip), %rsi
    00000a11: 	movq	%rax, %rdi
    00000a14: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2580
    00000a19: 	movl	0x64(%rsp), %eax
    00000a1d: 	movl	%eax, iterations(%rip)
    00000a23: 	movq	0x98(%rsp), %rax
    00000a2b: 	subq	%fs:0x28, %rax
    00000a34: 	jne	.Ltmp2927 # Offset: 2612
    00000a3a: 	addq	$0xa8, %rsp
    00000a41: 	popq	%rbx
    00000a42: 	popq	%rbp
    00000a43: 	popq	%r12
    00000a45: 	popq	%r13
    00000a47: 	popq	%r14
    00000a49: 	popq	%r15
    00000a4b: 	retq # Offset: 2635
.Ltmp2924:
    00000a4c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000a53: 	movq	%rbp, %rdi
    00000a56: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2646
    00000a5b: 	movl	$0x10, %edx
    00000a60: 	leaq	DATAat0x493d4(%rip), %rsi
    00000a67: 	movq	%rax, %rdi
    00000a6a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2666
    00000a6f: 	movsd	(%rsp), %xmm1
    00000a74: 	movsd	0x8(%rsp), %xmm3
    00000a7a: 	jmp	.Ltmp2928 # Offset: 2682
.Ltmp2918:
    00000a7f: 	movl	$0x1, %ebp
    00000a84: 	jmp	.Ltmp2929 # Offset: 2692
.Ltmp2926:
    00000a89: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000a90: 	movsd	%xmm3, 0x8(%rsp)
    00000a96: 	movq	%rbp, %rdi
    00000a99: 	movsd	%xmm1, (%rsp)
    00000a9e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2718
    00000aa3: 	movl	$0x11, %edx
    00000aa8: 	leaq	DATAat0x49199(%rip), %rsi
    00000aaf: 	movq	%rax, %rdi
    00000ab2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2738
    00000ab7: 	movsd	(%rsp), %xmm1
    00000abc: 	movsd	0x8(%rsp), %xmm3
    00000ac2: 	jmp	.Ltmp2928 # Offset: 2754
.Ltmp2919:
    00000ac7: 	ucomisd	%xmm3, %xmm3
    00000acb: 	setp	%bpl
    00000acf: 	jmp	.Ltmp2929 # Offset: 2767
.Ltmp2900:
    00000ad4: 	pxor	%xmm3, %xmm3
    00000ad8: 	movl	$0x0, 0x38(%rsp)
    00000ae0: 	xorl	%ebp, %ebp
    00000ae2: 	movapd	%xmm3, %xmm1
    00000ae6: 	jmp	.Ltmp2929 # Offset: 2790
.Ltmp2927:
    00000aeb: 	callq	__stack_chk_fail@PLT # Offset: 2795
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd21jacobi_sor2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x42e70
  Size        : 0xad3
  MaxSize     : 0xae0
  Offset      : 0x42e70
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%edx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%r14d, %esi
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0xa8, %rsp
    00000023: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002b: 	movl	%edx, 0x60(%rsp)
    0000002f: 	movl	%ebp, %edx
    00000031: 	movl	%ecx, 0x24(%rsp)
    00000035: 	leaq	0x70(%rsp), %rcx
    0000003a: 	movl	%r8d, 0x18(%rsp)
    0000003f: 	movq	%r9, 0x58(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x98(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	movaps	%xmm0, 0x70(%rsp)
    0000005c: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000064: 	movaps	%xmm0, 0x80(%rsp)
    0000006c: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 108
    00000071: 	movl	%r14d, %edi
    00000074: 	imull	%ebp, %edi
    00000077: 	movsd	%xmm0, 0x68(%rsp)
    0000007d: 	movl	%edi, 0x3c(%rsp)
    00000081: 	testl	%edi, %edi
    00000083: 	jle	.Ltmp2930 # Offset: 131
    00000085: 	movslq	%edi, %rdx
    00000088: 	movq	%rbx, %rsi
    0000008b: 	movq	%r15, %rdi
    0000008e: 	shlq	$0x3, %rdx
    00000092: 	callq	memmove@PLT # Offset: 146
.Ltmp2930:
    00000097: 	movl	iterations(%rip), %eax
    0000009d: 	movl	$0x2710, iterations(%rip)
    000000a7: 	movl	%eax, 0x64(%rsp)
    000000ab: 	callq	clock@PLT # Offset: 171
    000000b0: 	movq	%rax, start_time(%rip)
    000000b7: 	movl	iterations(%rip), %eax
    000000bd: 	movl	%eax, 0x40(%rsp)
    000000c1: 	testl	%eax, %eax
    000000c3: 	jle	.Ltmp2931 # Offset: 195
    000000c9: 	movl	0x60(%rsp), %eax
    000000cd: 	movl	0x18(%rsp), %esi
    000000d1: 	movl	$0x0, 0x38(%rsp)
    000000d9: 	pxor	%xmm4, %xmm4
    000000dd: 	movapd	DATAat0x49400(%rip), %xmm2
    000000e5: 	movapd	DATAat0x49410(%rip), %xmm7
    000000ed: 	subl	$0x1, %eax
    000000f0: 	addl	%esi, %esi
    000000f2: 	movl	%eax, 0x14(%rsp)
    000000f6: 	movl	0x24(%rsp), %eax
    000000fa: 	movl	%esi, 0x44(%rsp)
    000000fe: 	leal	-0x4(%rax), %edi
    00000101: 	subl	$0x6, %eax
    00000104: 	movl	%eax, %esi
    00000106: 	movl	%edi, 0x1c(%rsp)
    0000010a: 	movslq	0x3c(%rsp), %rdi
    0000010f: 	shrl	$0x2, %esi
    00000112: 	movl	%eax, 0x20(%rsp)
    00000116: 	andl	$-0x4, %eax
    00000119: 	movl	%esi, 0x28(%rsp)
    0000011d: 	leal	0x5(%rax), %r14d
    00000121: 	leal	0x1(%rax), %esi
    00000124: 	movq	%rdi, %rax
    00000127: 	shrq	%rax
    0000012a: 	movq	%rdi, 0x30(%rsp)
    0000012f: 	andq	$-0x2, %rdi
    00000133: 	shlq	$0x4, %rax
    00000137: 	movl	%esi, 0x2c(%rsp)
    0000013b: 	movq	%rax, 0x50(%rsp)
    00000140: 	movq	%rdi, 0x48(%rsp)
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp2951:
    00000148: 	cmpl	$0x1, 0x14(%rsp)
    0000014d: 	jle	.Ltmp2932 # Offset: 333
    00000153: 	movl	0x24(%rsp), %eax
    00000157: 	movl	$0x1, (%rsp)
    0000015e: 	xorl	%r8d, %r8d
    00000161: 	movl	0x44(%rsp), %r9d
    00000166: 	movl	0x18(%rsp), %r10d
    0000016b: 	subl	$0x1, %eax
    0000016e: 	movapd	DATAat0x49410(%rip), %xmm3
    00000176: 	movsd	DATAat0x49400(%rip), %xmm6
    0000017e: 	movl	%eax, 0x8(%rsp)
    00000182: 	movsd	DATAat0x49410(%rip), %xmm5
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2939:
    00000190: 	addl	$0x1, (%rsp)
    00000194: 	cmpl	$0x1, 0x1c(%rsp)
    00000199: 	movl	$0x1, %eax
    0000019e: 	jle	.Ltmp2933 # Offset: 414
    000001a4: 	cmpl	$0x3, 0x20(%rsp)
    000001a9: 	jbe	.Ltmp2934 # Offset: 425
    000001af: 	movslq	%r8d, %rdx
    000001b2: 	movslq	%r10d, %rax
    000001b5: 	movl	0x28(%rsp), %r13d
    000001ba: 	movapd	%xmm2, %xmm9
    000001bf: 	leaq	0x8(%rbx,%rdx,8), %r11
    000001c4: 	leaq	0x8(,%rax,8), %rax
    000001cc: 	movslq	%r9d, %rdx
    000001cf: 	leaq	(%r15,%rax), %rcx
    000001d3: 	leaq	-0x8(%rbx,%rax), %rdi
    000001d8: 	movapd	%xmm3, %xmm8
    000001dd: 	leaq	0x8(%rbx,%rdx,8), %rsi
    000001e2: 	leaq	0x18(%rbx,%rax), %r12
    000001e7: 	pxor	%xmm10, %xmm10
    000001ec: 	xorl	%edx, %edx
    000001ee: 	leaq	0x10(%r15,%rax), %rbp
    000001f3: 	xorl	%eax, %eax
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp2935:
    000001f8: 	movupd	0x10(%rdi,%rax), %xmm1
    000001fe: 	movupd	(%r11,%rax), %xmm14
    00000204: 	addl	$0x1, %edx
    00000207: 	movupd	0x10(%r11,%rax), %xmm0
    0000020e: 	movupd	0x10(%rdi,%rax), %xmm15
    00000215: 	addpd	%xmm1, %xmm0
    00000219: 	movupd	(%r12,%rax), %xmm1
    0000021f: 	addpd	%xmm1, %xmm0
    00000223: 	movupd	0x10(%rsi,%rax), %xmm1
    00000229: 	addpd	%xmm1, %xmm0
    0000022d: 	movupd	0x10(%rcx,%rax), %xmm1
    00000233: 	addpd	%xmm10, %xmm0
    00000238: 	mulpd	%xmm2, %xmm0
    0000023c: 	subpd	%xmm1, %xmm0
    00000240: 	mulpd	%xmm3, %xmm0
    00000244: 	addpd	%xmm1, %xmm0
    00000248: 	movupd	(%rdi,%rax), %xmm1
    0000024d: 	addpd	%xmm14, %xmm1
    00000252: 	movupd	(%rsi,%rax), %xmm14
    00000258: 	addpd	%xmm15, %xmm1
    0000025d: 	movupd	(%rcx,%rax), %xmm15
    00000263: 	addpd	%xmm14, %xmm1
    00000268: 	addpd	%xmm10, %xmm1
    0000026d: 	mulpd	%xmm2, %xmm1
    00000271: 	subpd	%xmm15, %xmm1
    00000276: 	mulpd	%xmm3, %xmm1
    0000027a: 	addpd	%xmm15, %xmm1
    0000027f: 	movups	%xmm1, (%rcx,%rax)
    00000283: 	movups	%xmm0, (%rbp,%rax)
    00000288: 	addq	$0x20, %rax
    0000028c: 	cmpl	%r13d, %edx
    0000028f: 	jb	.Ltmp2935 # Offset: 655
    00000295: 	movl	0x2c(%rsp), %eax
.Ltmp2952:
    00000299: 	leal	(%r10,%rax), %edx
    0000029d: 	leal	-0x1(%rax,%r10), %r11d
    000002a2: 	pxor	%xmm10, %xmm10
    000002a7: 	movslq	%edx, %rdx
    000002aa: 	leal	0x2(%rax), %esi
    000002ad: 	leal	0x3(%rax), %ecx
    000002b0: 	movslq	%r11d, %r11
    000002b3: 	leaq	(%r15,%rdx,8), %rdi
    000002b7: 	leal	0x1(%rax), %edx
    000002ba: 	leaq	(%rbx,%r11,8), %r13
    000002be: 	leal	(%r8,%rsi), %ebp
    000002c2: 	addl	%r9d, %esi
    000002c5: 	movupd	(%rdi), %xmm12
    000002ca: 	leal	(%r10,%rdx), %r11d
    000002ce: 	movslq	%ebp, %rbp
    000002d1: 	movupd	0x10(%r13), %xmm1
    000002d7: 	movslq	%esi, %rsi
    000002da: 	movslq	%r11d, %r11
    000002dd: 	movsd	(%rbx,%rbp,8), %xmm0
    000002e2: 	movupd	(%r13), %xmm11
    000002e8: 	leaq	(%rbx,%r11,8), %r12
    000002ec: 	leal	(%r8,%rcx), %r11d
    000002f0: 	addl	%r9d, %ecx
    000002f3: 	movslq	%r11d, %r11
    000002f6: 	movslq	%ecx, %rcx
    000002f9: 	movhpd	(%rbx,%r11,8), %xmm0
    000002ff: 	addpd	%xmm1, %xmm0
    00000303: 	movupd	0x10(%r12), %xmm1
    0000030a: 	addpd	%xmm1, %xmm0
    0000030e: 	movsd	(%rbx,%rsi,8), %xmm1
    00000313: 	leal	(%r8,%rax), %esi
    00000317: 	addl	%r9d, %eax
    0000031a: 	movslq	%esi, %rsi
    0000031d: 	cltq
    0000031f: 	movhpd	(%rbx,%rcx,8), %xmm1
    00000324: 	leal	(%r8,%rdx), %ecx
    00000328: 	addl	%r9d, %edx
    0000032b: 	addpd	%xmm1, %xmm0
    0000032f: 	movupd	0x10(%rdi), %xmm1
    00000334: 	movslq	%ecx, %rcx
    00000337: 	movslq	%edx, %rdx
    0000033a: 	addpd	%xmm10, %xmm0
    0000033f: 	mulpd	%xmm9, %xmm0
    00000344: 	subpd	%xmm1, %xmm0
    00000348: 	mulpd	%xmm8, %xmm0
    0000034d: 	addpd	%xmm1, %xmm0
    00000351: 	movsd	(%rbx,%rsi,8), %xmm1
    00000356: 	movhpd	(%rbx,%rcx,8), %xmm1
    0000035b: 	addpd	%xmm11, %xmm1
    00000360: 	movupd	(%r12), %xmm11
    00000366: 	addpd	%xmm11, %xmm1
    0000036b: 	movsd	(%rbx,%rax,8), %xmm11
    00000371: 	movl	%r14d, %eax
    00000374: 	movhpd	(%rbx,%rdx,8), %xmm11
    0000037a: 	movups	%xmm0, 0x10(%rdi)
    0000037e: 	addpd	%xmm11, %xmm1
    00000383: 	addpd	%xmm10, %xmm1
    00000388: 	mulpd	%xmm9, %xmm1
    0000038d: 	subpd	%xmm12, %xmm1
    00000392: 	mulpd	%xmm8, %xmm1
    00000397: 	addpd	%xmm12, %xmm1
    0000039c: 	movups	%xmm1, (%rdi)
.Ltmp2933:
    0000039f: 	cmpl	0x8(%rsp), %eax
    000003a3: 	jge	.Ltmp2936 # Offset: 931
    000003a9: 	movslq	%eax, %rdi
    000003ac: 	movslq	%r9d, %rbp
    000003af: 	movslq	%r10d, %r11
    000003b2: 	movslq	%r8d, %rsi
    000003b5: 	addq	%rdi, %r11
    000003b8: 	leaq	0x1(%rdi,%rsi), %rsi
    000003bd: 	movl	0x24(%rsp), %edx
    000003c1: 	leaq	0x1(%rdi,%rbp), %rdi
    000003c6: 	movq	%r15, %rbp
    000003c9: 	shlq	$0x3, %rsi
    000003cd: 	leaq	(,%r11,8), %r12
    000003d5: 	subq	%rbx, %rbp
    000003d8: 	subl	%eax, %edx
    000003da: 	shlq	$0x3, %rdi
    000003de: 	leaq	(%r15,%r12), %rcx
    000003e2: 	cmpq	$0x10, %rbp
    000003e6: 	seta	%bpl
    000003ea: 	cmpl	$0x2, %edx
    000003ed: 	setne	%r13b
    000003f1: 	andl	%r13d, %ebp
    000003f4: 	leaq	(%rbx,%rsi), %r13
    000003f8: 	cmpq	%r13, %rcx
    000003fb: 	setne	%r13b
    000003ff: 	testb	%r13b, %bpl
    00000402: 	je	.Ltmp2937 # Offset: 1026
    00000408: 	leaq	(%rbx,%rdi), %rbp
    0000040c: 	cmpq	%rbp, %rcx
    0000040f: 	je	.Ltmp2937 # Offset: 1039
    00000415: 	leaq	-0x8(%rbx,%rsi), %r11
    0000041a: 	leaq	-0x8(%rbx,%r12), %rbp
    0000041f: 	movupd	(%rcx), %xmm13
    00000424: 	subl	$0x1, %edx
    00000427: 	movupd	(%rbp), %xmm1
    0000042c: 	movupd	(%r11), %xmm0
    00000431: 	leaq	0x8(%rbx,%r12), %r12
    00000436: 	leaq	-0x8(%rbx,%rdi), %rsi
    0000043b: 	movl	%edx, %edi
    0000043d: 	addpd	%xmm1, %xmm0
    00000441: 	movupd	(%r12), %xmm1
    00000447: 	shrl	%edi
    00000449: 	addpd	%xmm1, %xmm0
    0000044d: 	movupd	(%rsi), %xmm1
    00000451: 	addpd	%xmm1, %xmm0
    00000455: 	pxor	%xmm1, %xmm1
    00000459: 	addpd	%xmm1, %xmm0
    0000045d: 	mulpd	%xmm2, %xmm0
    00000461: 	subpd	%xmm13, %xmm0
    00000466: 	mulpd	%xmm7, %xmm0
    0000046a: 	addpd	%xmm13, %xmm0
    0000046f: 	movups	%xmm0, (%rcx)
    00000472: 	cmpl	$0x1, %edi
    00000475: 	je	.Ltmp2938 # Offset: 1141
    00000477: 	movupd	0x10(%r11), %xmm8
    0000047d: 	movupd	0x10(%rbp), %xmm0
    00000482: 	addpd	%xmm8, %xmm0
    00000487: 	movupd	0x10(%r12), %xmm8
    0000048e: 	addpd	%xmm8, %xmm0
    00000493: 	movupd	0x10(%rsi), %xmm8
    00000499: 	addpd	%xmm8, %xmm0
    0000049e: 	addpd	%xmm1, %xmm0
    000004a2: 	movupd	0x10(%rcx), %xmm1
    000004a7: 	mulpd	%xmm2, %xmm0
    000004ab: 	subpd	%xmm1, %xmm0
    000004af: 	mulpd	%xmm7, %xmm0
    000004b3: 	addpd	%xmm1, %xmm0
    000004b7: 	movups	%xmm0, 0x10(%rcx)
.Ltmp2938:
    000004bb: 	movl	%edx, %ecx
    000004bd: 	andl	$-0x2, %ecx
    000004c0: 	addl	%ecx, %eax
    000004c2: 	cmpl	%edx, %ecx
    000004c4: 	je	.Ltmp2936 # Offset: 1220
    000004c6: 	leal	(%r10,%rax), %edx
    000004ca: 	movslq	%edx, %rdx
    000004cd: 	leaq	(%r15,%rdx,8), %rcx
    000004d1: 	leal	(%r8,%rax), %edx
    000004d5: 	movslq	%edx, %rdx
    000004d8: 	movsd	(%rcx), %xmm1
    000004dc: 	movsd	(%rbx,%rdx,8), %xmm0
    000004e1: 	leal	-0x1(%r10,%rax), %edx
    000004e6: 	movslq	%edx, %rdx
    000004e9: 	addsd	(%rbx,%rdx,8), %xmm0
    000004ee: 	leal	0x1(%r10,%rax), %edx
    000004f3: 	addl	%r9d, %eax
    000004f6: 	movslq	%edx, %rdx
    000004f9: 	cltq
    000004fb: 	addsd	(%rbx,%rdx,8), %xmm0
    00000500: 	addsd	(%rbx,%rax,8), %xmm0
    00000505: 	addsd	%xmm4, %xmm0
    00000509: 	mulsd	%xmm6, %xmm0
    0000050d: 	subsd	%xmm1, %xmm0
    00000511: 	mulsd	%xmm5, %xmm0
    00000515: 	addsd	%xmm1, %xmm0
    00000519: 	movsd	%xmm0, (%rcx)
.Ltmp2936:
    0000051d: 	movl	0x18(%rsp), %eax
    00000521: 	movl	(%rsp), %edi
    00000524: 	addl	%eax, %r8d
    00000527: 	addl	%eax, %r10d
    0000052a: 	addl	%eax, %r9d
    0000052d: 	cmpl	%edi, 0x14(%rsp)
    00000531: 	jne	.Ltmp2939 # Offset: 1329
.Ltmp2932:
    00000537: 	cmpq	$0x0, 0x30(%rsp)
    0000053d: 	je	.Ltmp2940 # Offset: 1341
    00000543: 	cmpl	$0x1, 0x3c(%rsp)
    00000548: 	je	.Ltmp2941 # Offset: 1352
    0000054e: 	movq	0x50(%rsp), %rdx
    00000553: 	xorl	%eax, %eax
    00000555: 	movapd	%xmm4, %xmm1
    00000559: 	pxor	%xmm6, %xmm6
    0000055d: 	movapd	DATAat0x494f0(%rip), %xmm8
    00000566: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2942:
    00000570: 	movupd	(%r15,%rax), %xmm5
    00000576: 	movupd	(%rbx,%rax), %xmm3
    0000057b: 	addq	$0x10, %rax
    0000057f: 	subpd	%xmm5, %xmm3
    00000583: 	movapd	%xmm3, %xmm0
    00000587: 	movapd	%xmm3, %xmm5
    0000058b: 	cmpltpd	%xmm6, %xmm0
    00000590: 	xorpd	%xmm8, %xmm5
    00000595: 	andpd	%xmm0, %xmm5
    00000599: 	andnpd	%xmm3, %xmm0
    0000059d: 	orpd	%xmm5, %xmm0
    000005a1: 	addsd	%xmm0, %xmm1
    000005a5: 	unpckhpd	%xmm0, %xmm0
    000005a9: 	addsd	%xmm0, %xmm1
    000005ad: 	cmpq	%rax, %rdx
    000005b0: 	jne	.Ltmp2942 # Offset: 1456
    000005b2: 	movq	0x48(%rsp), %rax
    000005b7: 	cmpq	%rax, 0x30(%rsp)
    000005bc: 	je	.Ltmp2943 # Offset: 1468
.Ltmp2954:
    000005be: 	movsd	(%rbx,%rax,8), %xmm0
    000005c3: 	subsd	(%r15,%rax,8), %xmm0
    000005c9: 	comisd	%xmm0, %xmm4
    000005cd: 	jbe	.Ltmp2944 # Offset: 1485
    000005cf: 	xorpd	DATAat0x49500(%rip), %xmm0
.Ltmp2944:
    000005d7: 	addsd	%xmm0, %xmm1
.Ltmp2943:
    000005db: 	movq	DATAat0x49500(%rip), %xmm5
    000005e3: 	movq	0x30(%rsp), %rdx
    000005e8: 	movapd	%xmm4, %xmm3
    000005ec: 	xorl	%eax, %eax
    000005ee: 	nop # Size: 2
.Ltmp2946:
    000005f0: 	movsd	(%rbx,%rax,8), %xmm0
    000005f5: 	subsd	(%r15,%rax,8), %xmm0
    000005fb: 	comisd	%xmm0, %xmm4
    000005ff: 	jbe	.Ltmp2945 # Offset: 1535
    00000601: 	xorpd	%xmm5, %xmm0
.Ltmp2945:
    00000605: 	maxsd	%xmm3, %xmm0
    00000609: 	addq	$0x1, %rax
    0000060d: 	movapd	%xmm0, %xmm3
    00000611: 	cmpq	%rax, %rdx
    00000614: 	jne	.Ltmp2946 # Offset: 1556
    00000616: 	movl	0x38(%rsp), %eax
    0000061a: 	cmpl	%eax, 0xe0(%rsp)
    00000621: 	jge	.Ltmp2947 # Offset: 1569
    00000623: 	movsd	DATAat0x49538(%rip), %xmm0
    0000062b: 	comisd	%xmm1, %xmm0
    0000062f: 	ja	.Ltmp2948 # Offset: 1583
    00000635: 	ucomisd	%xmm1, %xmm1
    00000639: 	jp	.Ltmp2949 # Offset: 1593
    0000063f: 	movsd	DATAat0x49540(%rip), %xmm0
    00000647: 	comisd	%xmm3, %xmm0
    0000064b: 	ja	.Ltmp2950 # Offset: 1611
    00000651: 	ucomisd	%xmm3, %xmm3
    00000655: 	jp	.Ltmp2949 # Offset: 1621
.Ltmp2947:
    0000065b: 	addl	$0x1, 0x38(%rsp)
    00000660: 	movq	%r15, %rax
    00000663: 	movl	0x38(%rsp), %edi
    00000667: 	movq	%rbx, %r15
    0000066a: 	cmpl	0x40(%rsp), %edi
    0000066e: 	je	.Ltmp2948 # Offset: 1646
    00000674: 	movq	%rax, %rbx
    00000677: 	jmp	.Ltmp2951 # Offset: 1655
    0000067c: 	nopl	(%rax) # Size: 4
.Ltmp2937:
    00000680: 	leal	-0x1(%rax,%r10), %edx
    00000685: 	movsd	-0x8(%rbx,%rsi), %xmm0
    0000068b: 	leal	0x1(%rax), %esi
    0000068e: 	movsd	(%rcx), %xmm1
    00000692: 	movslq	%edx, %rdx
    00000695: 	movl	0x8(%rsp), %r13d
    0000069a: 	addsd	(%rbx,%rdx,8), %xmm0
    0000069f: 	leal	(%rsi,%r10), %edx
    000006a3: 	movslq	%edx, %rdx
    000006a6: 	shlq	$0x3, %rdx
    000006aa: 	leaq	(%rbx,%rdx), %rbp
    000006ae: 	addsd	(%rbp), %xmm0
    000006b3: 	addsd	-0x8(%rbx,%rdi), %xmm0
    000006b9: 	addsd	%xmm4, %xmm0
    000006bd: 	mulsd	%xmm6, %xmm0
    000006c1: 	subsd	%xmm1, %xmm0
    000006c5: 	mulsd	%xmm5, %xmm0
    000006c9: 	addsd	%xmm1, %xmm0
    000006cd: 	movsd	%xmm0, (%rcx)
    000006d1: 	cmpl	%r13d, %esi
    000006d4: 	jge	.Ltmp2936 # Offset: 1748
    000006da: 	leal	(%rsi,%r8), %ecx
    000006de: 	leal	0x2(%rax), %edi
    000006e1: 	addl	%r9d, %esi
    000006e4: 	addq	%r15, %rdx
    000006e7: 	movslq	%ecx, %rcx
    000006ea: 	movslq	%esi, %rsi
    000006ed: 	movsd	(%rdx), %xmm1
    000006f1: 	movsd	(%rbx,%rcx,8), %xmm0
    000006f6: 	leal	(%rdi,%r10), %ecx
    000006fa: 	addsd	(%rbx,%r11,8), %xmm0
    00000700: 	movslq	%ecx, %rcx
    00000703: 	shlq	$0x3, %rcx
    00000707: 	leaq	(%rbx,%rcx), %r12
    0000070b: 	addsd	(%r12), %xmm0
    00000711: 	addsd	(%rbx,%rsi,8), %xmm0
    00000716: 	addsd	%xmm4, %xmm0
    0000071a: 	mulsd	%xmm6, %xmm0
    0000071e: 	subsd	%xmm1, %xmm0
    00000722: 	mulsd	%xmm5, %xmm0
    00000726: 	addsd	%xmm1, %xmm0
    0000072a: 	movsd	%xmm0, (%rdx)
    0000072e: 	cmpl	%r13d, %edi
    00000731: 	jge	.Ltmp2936 # Offset: 1841
    00000737: 	leal	(%rdi,%r8), %edx
    0000073b: 	addq	%r15, %rcx
    0000073e: 	movslq	%edx, %rdx
    00000741: 	movsd	(%rcx), %xmm1
    00000745: 	movsd	(%rbx,%rdx,8), %xmm0
    0000074a: 	leal	0x3(%rax), %edx
    0000074d: 	addsd	(%rbp), %xmm0
    00000752: 	leal	(%rdx,%r10), %esi
    00000756: 	movslq	%esi, %rsi
    00000759: 	addsd	(%rbx,%rsi,8), %xmm0
    0000075e: 	leaq	(,%rsi,8), %r11
    00000766: 	leal	(%rdi,%r9), %esi
    0000076a: 	movslq	%esi, %rsi
    0000076d: 	addsd	(%rbx,%rsi,8), %xmm0
    00000772: 	addsd	%xmm4, %xmm0
    00000776: 	mulsd	%xmm6, %xmm0
    0000077a: 	subsd	%xmm1, %xmm0
    0000077e: 	mulsd	%xmm5, %xmm0
    00000782: 	addsd	%xmm1, %xmm0
    00000786: 	movsd	%xmm0, (%rcx)
    0000078a: 	cmpl	%r13d, %edx
    0000078d: 	jge	.Ltmp2936 # Offset: 1933
    00000793: 	leal	(%rdx,%r8), %ecx
    00000797: 	leal	0x4(%rax,%r10), %eax
    0000079c: 	addq	%r15, %r11
    0000079f: 	cltq
    000007a1: 	movslq	%ecx, %rcx
    000007a4: 	movsd	(%r11), %xmm1
    000007a9: 	movsd	(%rbx,%rcx,8), %xmm0
    000007ae: 	addsd	(%r12), %xmm0
    000007b4: 	addsd	(%rbx,%rax,8), %xmm0
    000007b9: 	leal	(%rdx,%r9), %eax
    000007bd: 	cltq
    000007bf: 	addsd	(%rbx,%rax,8), %xmm0
    000007c4: 	addsd	%xmm4, %xmm0
    000007c8: 	mulsd	%xmm6, %xmm0
    000007cc: 	subsd	%xmm1, %xmm0
    000007d0: 	mulsd	%xmm5, %xmm0
    000007d4: 	addsd	%xmm1, %xmm0
    000007d8: 	movsd	%xmm0, (%r11)
    000007dd: 	jmp	.Ltmp2936 # Offset: 2013
.Ltmp2934:
    000007e2: 	movl	$0x1, %eax
    000007e7: 	movapd	%xmm2, %xmm9
    000007ec: 	movapd	%xmm7, %xmm8
    000007f1: 	jmp	.Ltmp2952 # Offset: 2033
.Ltmp2940:
    000007f6: 	movl	0x38(%rsp), %eax
    000007fa: 	movapd	%xmm4, %xmm1
    000007fe: 	cmpl	%eax, 0xe0(%rsp)
    00000805: 	jl	.Ltmp2953 # Offset: 2053
    00000807: 	movapd	%xmm4, %xmm3
    0000080b: 	jmp	.Ltmp2947 # Offset: 2059
.Ltmp2941:
    00000810: 	movapd	%xmm4, %xmm1
    00000814: 	xorl	%eax, %eax
    00000816: 	jmp	.Ltmp2954 # Offset: 2070
.Ltmp2953:
    0000081b: 	movapd	%xmm1, %xmm3
.Ltmp2948:
    0000081f: 	ucomisd	%xmm1, %xmm1
    00000823: 	setp	%bpl
    00000827: 	ucomisd	%xmm3, %xmm3
    0000082b: 	setp	%al
    0000082e: 	orl	%eax, %ebp
.Ltmp2960:
    00000830: 	movsd	%xmm3, 0x8(%rsp)
    00000836: 	movsd	%xmm1, (%rsp)
    0000083b: 	callq	clock@PLT # Offset: 2107
    00000840: 	movl	0x60(%rsp), %edi
    00000844: 	pxor	%xmm0, %xmm0
    00000848: 	movsd	0x68(%rsp), %xmm7
    0000084e: 	movq	%rax, end_time(%rip)
    00000855: 	subq	start_time(%rip), %rax
    0000085c: 	cvtsi2sd	%rax, %xmm0
    00000861: 	movl	%edi, %eax
    00000863: 	divsd	DATAat0x49520(%rip), %xmm0
    0000086b: 	movsd	(%rsp), %xmm1
    00000870: 	shrl	$0x1f, %eax
    00000873: 	movsd	0x8(%rsp), %xmm3
    00000879: 	movq	%xmm0, %rbx
    0000087e: 	addl	%edi, %eax
    00000880: 	movl	0x24(%rsp), %edi
    00000884: 	sarl	%eax
    00000886: 	movl	%edi, %edx
    00000888: 	imull	%edi, %eax
    0000088b: 	shrl	$0x1f, %edx
    0000088e: 	addl	%edi, %edx
    00000890: 	sarl	%edx
    00000892: 	addl	%edx, %eax
    00000894: 	testb	%bpl, %bpl
    00000897: 	cltq
    00000899: 	subsd	(%r15,%rax,8), %xmm7
    0000089f: 	movq	0x58(%rsp), %rax
    000008a4: 	movq	0x8(%rax), %rdx
    000008a8: 	movq	(%rax), %rsi
    000008ab: 	movq	%xmm7, %r12
    000008b0: 	jne	.Ltmp2955 # Offset: 2224
    000008b6: 	movl	0x38(%rsp), %eax
    000008ba: 	cmpl	%eax, iterations(%rip)
    000008c0: 	jg	.Ltmp2956 # Offset: 2240
    000008c2: 	comisd	DATAat0x49538(%rip), %xmm1
    000008ca: 	jbe	.Ltmp2956 # Offset: 2250
    000008cc: 	comisd	DATAat0x49540(%rip), %xmm3
    000008d4: 	ja	.Ltmp2957 # Offset: 2260
.Ltmp2956:
    000008da: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000008e1: 	movsd	%xmm3, 0x8(%rsp)
    000008e7: 	movq	%rbp, %rdi
    000008ea: 	movsd	%xmm1, (%rsp)
    000008ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2287
    000008f4: 	movl	$0xa, %edx
    000008f9: 	leaq	DATAat0x491ab(%rip), %rsi
    00000900: 	movq	%rax, %rdi
    00000903: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2307
    00000908: 	movsd	0x8(%rsp), %xmm3
    0000090e: 	movsd	(%rsp), %xmm1
.Ltmp2959:
    00000913: 	movl	$0x4, %edx
    00000918: 	movq	%rbp, %rdi
    0000091b: 	movsd	%xmm1, (%rsp)
    00000920: 	leaq	DATAat0x491b6(%rip), %rsi
    00000927: 	movsd	%xmm3, 0x8(%rsp)
    0000092d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2349
    00000932: 	movl	0x38(%rsp), %esi
    00000936: 	movq	%rbp, %rdi
    00000939: 	callq	_ZNSolsEi@PLT # Offset: 2361
    0000093e: 	movl	$0xb, %edx
    00000943: 	leaq	DATAat0x491bb(%rip), %rsi
    0000094a: 	movq	%rax, %rdi
    0000094d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2381
    00000952: 	movl	$0xa, %edx
    00000957: 	leaq	DATAat0x491c7(%rip), %rsi
    0000095e: 	movq	%rbp, %rdi
    00000961: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2401
    00000966: 	movsd	(%rsp), %xmm1
    0000096b: 	movq	%rbp, %rdi
    0000096e: 	movapd	%xmm1, %xmm0
    00000972: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2418
    00000977: 	movl	$0x7, %edx
    0000097c: 	leaq	DATAat0x491d2(%rip), %rsi
    00000983: 	movq	%rax, %rdi
    00000986: 	movq	%rax, %rbp
    00000989: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2441
    0000098e: 	movsd	0x8(%rsp), %xmm3
    00000994: 	movq	%rbp, %rdi
    00000997: 	movapd	%xmm3, %xmm0
    0000099b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2459
    000009a0: 	movl	$0x10, %edx
    000009a5: 	leaq	DATAat0x491da(%rip), %rsi
    000009ac: 	movq	%rax, %rbp
    000009af: 	movq	%rax, %rdi
    000009b2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2482
    000009b7: 	movq	%r12, %xmm0
    000009bc: 	movq	%rbp, %rdi
    000009bf: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2495
    000009c4: 	movl	$0x8, %edx
    000009c9: 	leaq	DATAat0x491eb(%rip), %rsi
    000009d0: 	movq	%rax, %rbp
    000009d3: 	movq	%rax, %rdi
    000009d6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2518
    000009db: 	movq	%rbx, %xmm0
    000009e0: 	movq	%rbp, %rdi
    000009e3: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 2531
    000009e8: 	movl	$0x2, %edx
    000009ed: 	leaq	DATAat0x491f4(%rip), %rsi
    000009f4: 	movq	%rax, %rdi
    000009f7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2551
    000009fc: 	movl	0x64(%rsp), %eax
    00000a00: 	movl	%eax, iterations(%rip)
    00000a06: 	movq	0x98(%rsp), %rax
    00000a0e: 	subq	%fs:0x28, %rax
    00000a17: 	jne	.Ltmp2958 # Offset: 2583
    00000a1d: 	addq	$0xa8, %rsp
    00000a24: 	popq	%rbx
    00000a25: 	popq	%rbp
    00000a26: 	popq	%r12
    00000a28: 	popq	%r13
    00000a2a: 	popq	%r14
    00000a2c: 	popq	%r15
    00000a2e: 	retq # Offset: 2606
.Ltmp2955:
    00000a2f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000a36: 	movq	%rbp, %rdi
    00000a39: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2617
    00000a3e: 	movl	$0x10, %edx
    00000a43: 	leaq	DATAat0x493d4(%rip), %rsi
    00000a4a: 	movq	%rax, %rdi
    00000a4d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2637
    00000a52: 	movsd	(%rsp), %xmm1
    00000a57: 	movsd	0x8(%rsp), %xmm3
    00000a5d: 	jmp	.Ltmp2959 # Offset: 2653
.Ltmp2949:
    00000a62: 	movl	$0x1, %ebp
    00000a67: 	jmp	.Ltmp2960 # Offset: 2663
.Ltmp2957:
    00000a6c: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000a73: 	movsd	%xmm3, 0x8(%rsp)
    00000a79: 	movq	%rbp, %rdi
    00000a7c: 	movsd	%xmm1, (%rsp)
    00000a81: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2689
    00000a86: 	movl	$0x11, %edx
    00000a8b: 	leaq	DATAat0x49199(%rip), %rsi
    00000a92: 	movq	%rax, %rdi
    00000a95: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2709
    00000a9a: 	movsd	(%rsp), %xmm1
    00000a9f: 	movsd	0x8(%rsp), %xmm3
    00000aa5: 	jmp	.Ltmp2959 # Offset: 2725
.Ltmp2950:
    00000aaa: 	ucomisd	%xmm3, %xmm3
    00000aae: 	setp	%bpl
    00000ab2: 	jmp	.Ltmp2960 # Offset: 2738
.Ltmp2931:
    00000ab7: 	pxor	%xmm3, %xmm3
    00000abb: 	movl	$0x0, 0x38(%rsp)
    00000ac3: 	xorl	%ebp, %ebp
    00000ac5: 	movapd	%xmm3, %xmm1
    00000ac9: 	jmp	.Ltmp2960 # Offset: 2761
.Ltmp2958:
    00000ace: 	callq	__stack_chk_fail@PLT # Offset: 2766
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x43950
  Size        : 0x530
  MaxSize     : 0x530
  Offset      : 0x43950
  Section     : .text
  Orc Section : .local.text._Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movl	%ecx, %r12d
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movl	%r15d, %esi
    0000001d: 	imull	%r12d, %r15d
    00000021: 	subq	$0x78, %rsp
    00000025: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002d: 	movl	%edx, 0x8(%rsp)
    00000031: 	leaq	0x40(%rsp), %rcx
    00000036: 	movl	%r12d, %edx
    00000039: 	movl	%r8d, 0x10(%rsp)
    0000003e: 	movq	%r9, 0x38(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0x68(%rsp)
    00000051: 	xorl	%eax, %eax
    00000053: 	movaps	%xmm0, 0x40(%rsp)
    00000058: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000060: 	movaps	%xmm0, 0x50(%rsp)
    00000065: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 101
    0000006a: 	movl	%r15d, 0x28(%rsp)
    0000006f: 	movsd	%xmm0, 0x30(%rsp)
    00000075: 	testl	%r15d, %r15d
    00000078: 	jle	.Ltmp2961 # Offset: 120
    0000007a: 	movslq	%r15d, %rdx
    0000007d: 	movq	%r13, %rsi
    00000080: 	movq	%rbx, %rdi
    00000083: 	shlq	$0x3, %rdx
    00000087: 	callq	memmove@PLT # Offset: 135
.Ltmp2961:
    0000008c: 	movl	iterations(%rip), %eax
    00000092: 	movl	$0x2710, iterations(%rip)
    0000009c: 	movl	%eax, 0x2c(%rsp)
    000000a0: 	callq	clock@PLT # Offset: 160
    000000a5: 	movq	%rax, start_time(%rip)
    000000ac: 	movl	iterations(%rip), %eax
    000000b2: 	movl	%eax, 0x18(%rsp)
    000000b6: 	testl	%eax, %eax
    000000b8: 	jle	.Ltmp2962 # Offset: 184
    000000be: 	movslq	0x28(%rsp), %rbp
    000000c3: 	xorl	%r15d, %r15d
    000000c6: 	movq	%rbp, %r11
    000000c9: 	movq	%rbp, %rax
    000000cc: 	andq	$-0x2, %rax
    000000d0: 	shrq	%r11
    000000d3: 	movq	%rax, 0x20(%rsp)
    000000d8: 	shlq	$0x4, %r11
    000000dc: 	movq	%rbx, %rax
    000000df: 	movq	%rbp, %rbx
    000000e2: 	movq	%rax, %r14
    000000e5: 	movq	%r11, %rbp
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2974:
    000000f0: 	movl	0x10(%rsp), %r8d
    000000f5: 	movl	0x8(%rsp), %edx
    000000f9: 	movl	%r12d, %ecx
    000000fc: 	movq	%r14, %rsi
    000000ff: 	movq	%r13, %rdi
    00000102: 	callq	"_ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/1" # Offset: 258
    00000107: 	movq	DATAat0x49500(%rip), %xmm5
    0000010f: 	testq	%rbx, %rbx
    00000112: 	pxor	%xmm3, %xmm3
    00000116: 	movapd	DATAat0x494f0(%rip), %xmm4
    0000011e: 	movapd	%xmm5, %xmm6
    00000122: 	je	.Ltmp2963 # Offset: 290
    00000128: 	cmpl	$0x1, 0x28(%rsp)
    0000012d: 	je	.Ltmp2964 # Offset: 301
    00000133: 	xorl	%edx, %edx
    00000135: 	movapd	%xmm3, %xmm1
    00000139: 	pxor	%xmm8, %xmm8
    0000013e: 	nop # Size: 2
.Ltmp2965:
    00000140: 	movupd	(%r14,%rdx), %xmm7
    00000146: 	movupd	(%r13,%rdx), %xmm2
    0000014d: 	addq	$0x10, %rdx
    00000151: 	subpd	%xmm7, %xmm2
    00000155: 	movapd	%xmm2, %xmm0
    00000159: 	movapd	%xmm2, %xmm7
    0000015d: 	cmpltpd	%xmm8, %xmm0
    00000163: 	xorpd	%xmm4, %xmm7
    00000167: 	andpd	%xmm0, %xmm7
    0000016b: 	andnpd	%xmm2, %xmm0
    0000016f: 	orpd	%xmm7, %xmm0
    00000173: 	addsd	%xmm0, %xmm1
    00000177: 	unpckhpd	%xmm0, %xmm0
    0000017b: 	addsd	%xmm0, %xmm1
    0000017f: 	cmpq	%rdx, %rbp
    00000182: 	jne	.Ltmp2965 # Offset: 386
    00000184: 	movq	0x20(%rsp), %rdx
    00000189: 	cmpq	%rdx, %rbx
    0000018c: 	je	.Ltmp2966 # Offset: 396
.Ltmp2976:
    0000018e: 	movsd	(%r13,%rdx,8), %xmm0
    00000195: 	subsd	(%r14,%rdx,8), %xmm0
    0000019b: 	comisd	%xmm0, %xmm3
    0000019f: 	jbe	.Ltmp2967 # Offset: 415
    000001a1: 	xorpd	%xmm6, %xmm0
.Ltmp2967:
    000001a5: 	addsd	%xmm0, %xmm1
.Ltmp2966:
    000001a9: 	movapd	%xmm3, %xmm2
    000001ad: 	xorl	%edx, %edx
    000001af: 	nop # Size: 1
.Ltmp2969:
    000001b0: 	movsd	(%r13,%rdx,8), %xmm0
    000001b7: 	subsd	(%r14,%rdx,8), %xmm0
    000001bd: 	comisd	%xmm0, %xmm3
    000001c1: 	jbe	.Ltmp2968 # Offset: 449
    000001c3: 	xorpd	%xmm5, %xmm0
.Ltmp2968:
    000001c7: 	maxsd	%xmm2, %xmm0
    000001cb: 	addq	$0x1, %rdx
    000001cf: 	movapd	%xmm0, %xmm2
    000001d3: 	cmpq	%rdx, %rbx
    000001d6: 	jne	.Ltmp2969 # Offset: 470
    000001d8: 	cmpl	%r15d, 0xb0(%rsp)
    000001e0: 	jge	.Ltmp2970 # Offset: 480
    000001e2: 	movsd	DATAat0x49538(%rip), %xmm7
    000001ea: 	comisd	%xmm1, %xmm7
    000001ee: 	ja	.Ltmp2971 # Offset: 494
    000001f0: 	ucomisd	%xmm1, %xmm1
    000001f4: 	jp	.Ltmp2972 # Offset: 500
    000001fa: 	movsd	DATAat0x49540(%rip), %xmm0
    00000202: 	comisd	%xmm2, %xmm0
    00000206: 	ja	.Ltmp2973 # Offset: 518
    0000020c: 	ucomisd	%xmm2, %xmm2
    00000210: 	jp	.Ltmp2972 # Offset: 528
.Ltmp2970:
    00000216: 	movq	%r14, %rdx
    00000219: 	addl	$0x1, %r15d
    0000021d: 	movq	%r13, %r14
    00000220: 	cmpl	0x18(%rsp), %r15d
    00000225: 	je	.Ltmp2971 # Offset: 549
    00000227: 	movq	%rdx, %r13
    0000022a: 	jmp	.Ltmp2974 # Offset: 554
    0000022f: 	nop # Size: 1
.Ltmp2963:
    00000230: 	cmpl	%r15d, 0xb0(%rsp)
    00000238: 	jl	.Ltmp2975 # Offset: 568
    0000023e: 	movapd	%xmm3, %xmm2
    00000242: 	movapd	%xmm3, %xmm1
    00000246: 	jmp	.Ltmp2970 # Offset: 582
.Ltmp2964:
    00000248: 	movapd	%xmm3, %xmm1
    0000024c: 	xorl	%edx, %edx
    0000024e: 	jmp	.Ltmp2976 # Offset: 590
.Ltmp2971:
    00000253: 	movq	%r14, %rbx
.Ltmp2983:
    00000256: 	ucomisd	%xmm2, %xmm2
    0000025a: 	setp	%bpl
    0000025e: 	ucomisd	%xmm1, %xmm1
    00000262: 	setp	%al
    00000265: 	orl	%eax, %ebp
.Ltmp2982:
    00000267: 	movsd	%xmm1, 0x18(%rsp)
    0000026d: 	movsd	%xmm2, 0x10(%rsp)
    00000273: 	callq	clock@PLT # Offset: 627
    00000278: 	movl	0x8(%rsp), %ecx
    0000027c: 	pxor	%xmm0, %xmm0
    00000280: 	movl	%r12d, %edx
    00000283: 	movq	%rax, end_time(%rip)
    0000028a: 	subq	start_time(%rip), %rax
    00000291: 	shrl	$0x1f, %edx
    00000294: 	cvtsi2sd	%rax, %xmm0
    00000299: 	movl	%ecx, %eax
    0000029b: 	addl	%r12d, %edx
    0000029e: 	movsd	0x30(%rsp), %xmm6
    000002a4: 	shrl	$0x1f, %eax
    000002a7: 	sarl	%edx
    000002a9: 	divsd	DATAat0x49520(%rip), %xmm0
    000002b1: 	movsd	0x10(%rsp), %xmm2
    000002b7: 	addl	%ecx, %eax
    000002b9: 	movsd	0x18(%rsp), %xmm1
    000002bf: 	movq	%xmm0, %r14
    000002c4: 	sarl	%eax
    000002c6: 	imull	%r12d, %eax
    000002ca: 	addl	%edx, %eax
    000002cc: 	testb	%bpl, %bpl
    000002cf: 	cltq
    000002d1: 	subsd	(%rbx,%rax,8), %xmm6
    000002d6: 	movq	%xmm6, %rbx
    000002db: 	jne	.Ltmp2977 # Offset: 731
    000002e1: 	movq	0x38(%rsp), %rax
    000002e6: 	cmpl	%r15d, iterations(%rip)
    000002ed: 	movq	0x8(%rax), %rdx
    000002f1: 	movq	(%rax), %rsi
    000002f4: 	jg	.Ltmp2978 # Offset: 756
    000002f6: 	comisd	DATAat0x49538(%rip), %xmm1
    000002fe: 	jbe	.Ltmp2978 # Offset: 766
    00000300: 	comisd	DATAat0x49540(%rip), %xmm2
    00000308: 	ja	.Ltmp2979 # Offset: 776
.Ltmp2978:
    0000030e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00000315: 	movsd	%xmm1, 0x10(%rsp)
    0000031b: 	movq	%rbp, %rdi
    0000031e: 	movsd	%xmm2, 0x8(%rsp)
    00000324: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 804
    00000329: 	movl	$0xa, %edx
    0000032e: 	leaq	DATAat0x491ab(%rip), %rsi
    00000335: 	movq	%rax, %rdi
    00000338: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 824
    0000033d: 	movsd	0x10(%rsp), %xmm1
    00000343: 	movsd	0x8(%rsp), %xmm2
.Ltmp2981:
    00000349: 	movl	$0x4, %edx
    0000034e: 	movq	%rbp, %rdi
    00000351: 	leaq	DATAat0x491b6(%rip), %rsi
    00000358: 	movsd	%xmm2, 0x8(%rsp)
    0000035e: 	movsd	%xmm1, 0x10(%rsp)
    00000364: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 868
    00000369: 	movq	%rbp, %rdi
    0000036c: 	movl	%r15d, %esi
    0000036f: 	callq	_ZNSolsEi@PLT # Offset: 879
    00000374: 	movl	$0xb, %edx
    00000379: 	leaq	DATAat0x491bb(%rip), %rsi
    00000380: 	movq	%rax, %rdi
    00000383: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 899
    00000388: 	movl	$0xa, %edx
    0000038d: 	leaq	DATAat0x491c7(%rip), %rsi
    00000394: 	movq	%rbp, %rdi
    00000397: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 919
    0000039c: 	movsd	0x10(%rsp), %xmm1
    000003a2: 	movq	%rbp, %rdi
    000003a5: 	movapd	%xmm1, %xmm0
    000003a9: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 937
    000003ae: 	movl	$0x7, %edx
    000003b3: 	leaq	DATAat0x491d2(%rip), %rsi
    000003ba: 	movq	%rax, %rdi
    000003bd: 	movq	%rax, %rbp
    000003c0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 960
    000003c5: 	movsd	0x8(%rsp), %xmm2
    000003cb: 	movq	%rbp, %rdi
    000003ce: 	movapd	%xmm2, %xmm0
    000003d2: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 978
    000003d7: 	movl	$0x10, %edx
    000003dc: 	leaq	DATAat0x491da(%rip), %rsi
    000003e3: 	movq	%rax, %rbp
    000003e6: 	movq	%rax, %rdi
    000003e9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1001
    000003ee: 	movq	%rbx, %xmm0
    000003f3: 	movq	%rbp, %rdi
    000003f6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1014
    000003fb: 	movl	$0x8, %edx
    00000400: 	leaq	DATAat0x491eb(%rip), %rsi
    00000407: 	movq	%rax, %rbp
    0000040a: 	movq	%rax, %rdi
    0000040d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1037
    00000412: 	movq	%r14, %xmm0
    00000417: 	movq	%rbp, %rdi
    0000041a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 1050
    0000041f: 	movl	$0x2, %edx
    00000424: 	leaq	DATAat0x491f4(%rip), %rsi
    0000042b: 	movq	%rax, %rdi
    0000042e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1070
    00000433: 	movl	0x2c(%rsp), %eax
    00000437: 	movl	%eax, iterations(%rip)
    0000043d: 	movq	0x68(%rsp), %rax
    00000442: 	subq	%fs:0x28, %rax
    0000044b: 	jne	.Ltmp2980 # Offset: 1099
    00000451: 	addq	$0x78, %rsp
    00000455: 	popq	%rbx
    00000456: 	popq	%rbp
    00000457: 	popq	%r12
    00000459: 	popq	%r13
    0000045b: 	popq	%r14
    0000045d: 	popq	%r15
    0000045f: 	retq # Offset: 1119
.Ltmp2977:
    00000460: 	movq	0x38(%rsp), %rax
    00000465: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    0000046c: 	movsd	%xmm1, 0x10(%rsp)
    00000472: 	movq	%rbp, %rdi
    00000475: 	movsd	%xmm2, 0x8(%rsp)
    0000047b: 	movq	0x8(%rax), %rdx
    0000047f: 	movq	(%rax), %rsi
    00000482: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1154
    00000487: 	movl	$0x10, %edx
    0000048c: 	leaq	DATAat0x493d4(%rip), %rsi
    00000493: 	movq	%rax, %rdi
    00000496: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1174
    0000049b: 	movsd	0x8(%rsp), %xmm2
    000004a1: 	movsd	0x10(%rsp), %xmm1
    000004a7: 	jmp	.Ltmp2981 # Offset: 1191
.Ltmp2972:
    000004ac: 	movq	%r14, %rbx
    000004af: 	movl	$0x1, %ebp
    000004b4: 	jmp	.Ltmp2982 # Offset: 1204
.Ltmp2979:
    000004b9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    000004c0: 	movsd	%xmm1, 0x10(%rsp)
    000004c6: 	movq	%rbp, %rdi
    000004c9: 	movsd	%xmm2, 0x8(%rsp)
    000004cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1231
    000004d4: 	movl	$0x11, %edx
    000004d9: 	leaq	DATAat0x49199(%rip), %rsi
    000004e0: 	movq	%rax, %rdi
    000004e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1251
    000004e8: 	movsd	0x8(%rsp), %xmm2
    000004ee: 	movsd	0x10(%rsp), %xmm1
    000004f4: 	jmp	.Ltmp2981 # Offset: 1268
.Ltmp2975:
    000004f9: 	movq	%r14, %rbx
    000004fc: 	movapd	%xmm3, %xmm2
    00000500: 	movapd	%xmm3, %xmm1
    00000504: 	jmp	.Ltmp2983 # Offset: 1284
.Ltmp2973:
    00000509: 	ucomisd	%xmm2, %xmm2
    0000050d: 	movq	%r14, %rbx
    00000510: 	setp	%bpl
    00000514: 	jmp	.Ltmp2982 # Offset: 1300
.Ltmp2962:
    00000519: 	pxor	%xmm2, %xmm2
    0000051d: 	xorl	%ebp, %ebp
    0000051f: 	xorl	%r15d, %r15d
    00000522: 	movapd	%xmm2, %xmm1
    00000526: 	jmp	.Ltmp2982 # Offset: 1318
.Ltmp2980:
    0000052b: 	callq	__stack_chk_fail@PLT # Offset: 1323
DWARF CFI Instructions:
    <empty>
End of Function "_Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"

Binary Function "_Z13testLaplace2DIdd19jacobi_sor2D_simpleIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x43e80
  Size        : 0x52a
  MaxSize     : 0x530
  Offset      : 0x43e80
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIdd19jacobi_sor2D_simpleIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%ecx, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	movl	%r14d, %edx
    00000018: 	pushq	%rbx
    00000019: 	movl	%ebp, %esi
    0000001b: 	movq	%rdi, %rbx
    0000001e: 	subq	$0xb8, %rsp
    00000025: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002d: 	movl	%ecx, 0x2c(%rsp)
    00000031: 	leaq	0x80(%rsp), %rcx
    00000039: 	movl	%r8d, 0x28(%rsp)
    0000003e: 	movq	%r9, 0x68(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0xa8(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	movaps	%xmm0, 0x80(%rsp)
    0000005e: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000066: 	movaps	%xmm0, 0x90(%rsp)
    0000006e: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 110
    00000073: 	movl	%r14d, %eax
    00000076: 	imull	%ebp, %eax
    00000079: 	testl	%eax, %eax
    0000007b: 	jle	.Ltmp2984 # Offset: 123
    0000007d: 	cltq
    0000007f: 	movq	%rbx, %rsi
    00000082: 	movq	%r15, %rdi
    00000085: 	leaq	(,%rax,8), %rdx
    0000008d: 	callq	memmove@PLT # Offset: 141
.Ltmp2984:
    00000092: 	callq	clock@PLT # Offset: 146
    00000097: 	movq	%rax, start_time(%rip)
    0000009e: 	movl	iterations(%rip), %eax
    000000a4: 	movl	%eax, 0x5c(%rsp)
    000000a8: 	testl	%eax, %eax
    000000aa: 	jle	.Ltmp2985 # Offset: 170
    000000b0: 	movl	0x2c(%rsp), %edi
    000000b4: 	leal	-0x1(%rbp), %esi
    000000b7: 	movl	%esi, 0x38(%rsp)
    000000bb: 	leal	-0x1(%rdi), %eax
    000000be: 	cmpl	$0x1, %esi
    000000c1: 	jle	.Ltmp2985 # Offset: 193
    000000c7: 	cmpl	$0x1, %eax
    000000ca: 	jle	.Ltmp2985 # Offset: 202
    000000d0: 	movslq	0x28(%rsp), %rax
    000000d5: 	movl	$0x0, 0x58(%rsp)
    000000dd: 	pxor	%xmm3, %xmm3
    000000e1: 	movapd	DATAat0x49400(%rip), %xmm5
    000000e9: 	movapd	DATAat0x49410(%rip), %xmm4
    000000f1: 	leaq	(,%rax,8), %r12
    000000f9: 	shlq	$0x4, %rax
    000000fd: 	movsd	DATAat0x49400(%rip), %xmm2
    00000105: 	leaq	0x8(%r12), %rsi
    0000010a: 	movq	%rax, 0x10(%rsp)
    0000010f: 	movq	%rsi, 0x50(%rsp)
    00000114: 	movq	%r12, %rsi
    00000117: 	negq	%rsi
    0000011a: 	movq	%rsi, 0x60(%rsp)
    0000011f: 	leal	-0x2(%rdi), %esi
    00000122: 	movl	%esi, %eax
    00000124: 	movl	%esi, 0x3c(%rsp)
    00000128: 	shrl	%eax
    0000012a: 	subl	$0x1, %eax
    0000012d: 	addq	$0x1, %rax
    00000131: 	shlq	$0x4, %rax
    00000135: 	movq	%rax, 0x30(%rsp)
    0000013a: 	movl	%esi, %eax
    0000013c: 	andl	$-0x2, %esi
    0000013f: 	movl	%esi, %r14d
    00000142: 	movl	%eax, %esi
    00000144: 	leal	0x2(%r14), %eax
    00000148: 	orl	$0x1, %esi
    0000014b: 	movl	%eax, 0x4(%rsp)
    0000014f: 	leal	-0x3(%rdi), %eax
    00000152: 	movl	%esi, %r13d
    00000155: 	leaq	0x8(,%rax,8), %rax
    0000015d: 	movq	%rax, 0x48(%rsp)
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2990:
    00000168: 	movq	0x50(%rsp), %rsi
    0000016d: 	movq	$-0x10, %rdx
    00000174: 	movl	$0x1, 0x18(%rsp)
    0000017c: 	leaq	0x10(%rbx), %rax
    00000180: 	subq	%rbx, %rdx
    00000183: 	movl	0x28(%rsp), %r8d
    00000188: 	movsd	DATAat0x49410(%rip), %xmm1
    00000190: 	pxor	%xmm6, %xmm6
    00000194: 	leaq	(%r15,%rsi), %rdi
    00000198: 	movq	%rdx, 0x40(%rsp)
    0000019d: 	movq	0x60(%rsp), %rsi
    000001a2: 	movq	%rsi, 0x20(%rsp)
    000001a7: 	movq	%r12, %rsi
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2989:
    000001b0: 	movl	0x28(%rsp), %r11d
    000001b5: 	movq	%r15, %r9
    000001b8: 	movq	0x10(%rsp), %r10
    000001bd: 	movl	%r8d, %ecx
    000001c0: 	subq	%rbx, %r9
    000001c3: 	addl	$0x1, 0x18(%rsp)
    000001c8: 	movl	%r8d, %edx
    000001cb: 	subl	%r11d, %ecx
    000001ce: 	cmpq	$0x10, %r9
    000001d2: 	leal	(%rcx,%r11,2), %r8d
    000001d6: 	leaq	(%rax,%r10), %r11
    000001da: 	seta	%r10b
    000001de: 	cmpl	$0x3, 0x2c(%rsp)
    000001e3: 	setne	%r9b
    000001e7: 	movq	%r11, 0x8(%rsp)
    000001ec: 	andl	%r10d, %r9d
    000001ef: 	cmpq	%rax, %rdi
    000001f2: 	setne	%r10b
    000001f6: 	testb	%r10b, %r9b
    000001f9: 	je	.Ltmp2986 # Offset: 505
    000001ff: 	cmpq	%r11, %rdi
    00000202: 	je	.Ltmp2986 # Offset: 514
    00000208: 	movq	0x10(%rsp), %r9
    0000020d: 	movq	%r11, %r10
    00000210: 	movl	%edx, 0x1c(%rsp)
    00000214: 	leaq	-0x8(%rax), %rbp
    00000218: 	movq	0x30(%rsp), %rdx
    0000021d: 	leaq	(%rbx,%rsi), %r11
    00000221: 	subq	%r12, %r10
    00000224: 	pxor	%xmm7, %xmm7
    00000228: 	leaq	-0x8(%rax,%r9), %r9
    0000022d: 	xorl	%eax, %eax
    0000022f: 	nop # Size: 1
.Ltmp2987:
    00000230: 	movupd	(%rbp,%rax), %xmm0
    00000236: 	movupd	(%r11,%rax), %xmm11
    0000023c: 	movupd	(%r10,%rax), %xmm12
    00000242: 	movupd	(%r9,%rax), %xmm13
    00000248: 	addpd	%xmm11, %xmm0
    0000024d: 	movupd	(%rdi,%rax), %xmm14
    00000253: 	addpd	%xmm12, %xmm0
    00000258: 	addpd	%xmm13, %xmm0
    0000025d: 	addpd	%xmm7, %xmm0
    00000261: 	mulpd	%xmm5, %xmm0
    00000265: 	subpd	%xmm14, %xmm0
    0000026a: 	mulpd	%xmm4, %xmm0
    0000026e: 	addpd	%xmm14, %xmm0
    00000273: 	movups	%xmm0, (%rdi,%rax)
    00000277: 	addq	$0x10, %rax
    0000027b: 	cmpq	%rdx, %rax
    0000027e: 	jne	.Ltmp2987 # Offset: 638
    00000280: 	movl	0x1c(%rsp), %edx
    00000284: 	leaq	(%r12,%rsi), %r9
    00000288: 	cmpl	%r14d, 0x3c(%rsp)
    0000028d: 	je	.Ltmp2988 # Offset: 653
    0000028f: 	addl	%r13d, %ecx
    00000292: 	leal	(%rdx,%r13), %eax
    00000296: 	movslq	%ecx, %rcx
    00000299: 	cltq
    0000029b: 	movsd	(%rbx,%rcx,8), %xmm0
    000002a0: 	leal	(%rdx,%r14), %ecx
    000002a4: 	addl	0x4(%rsp), %edx
    000002a8: 	leaq	(%r15,%rax,8), %rax
    000002ac: 	movslq	%edx, %rdx
    000002af: 	movslq	%ecx, %rcx
    000002b2: 	movsd	(%rax), %xmm7
    000002b6: 	addsd	(%rbx,%rcx,8), %xmm0
    000002bb: 	addsd	(%rbx,%rdx,8), %xmm0
    000002c0: 	leal	(%r8,%r13), %edx
    000002c4: 	movslq	%edx, %rdx
    000002c7: 	addsd	(%rbx,%rdx,8), %xmm0
    000002cc: 	addsd	%xmm3, %xmm0
    000002d0: 	mulsd	%xmm2, %xmm0
    000002d4: 	subsd	%xmm7, %xmm0
    000002d8: 	mulsd	%xmm1, %xmm0
    000002dc: 	addsd	%xmm7, %xmm0
    000002e0: 	movsd	%xmm0, (%rax)
.Ltmp2988:
    000002e4: 	movq	0x8(%rsp), %rax
    000002e9: 	subq	%r12, 0x20(%rsp)
    000002ee: 	addq	%r12, %rdi
    000002f1: 	movq	%r9, %rsi
    000002f4: 	movl	0x18(%rsp), %edx
    000002f8: 	subq	%r12, %rax
    000002fb: 	cmpl	%edx, 0x38(%rsp)
    000002ff: 	jne	.Ltmp2989 # Offset: 767
    00000305: 	addl	$0x1, 0x58(%rsp)
    0000030a: 	movq	%r15, %rax
    0000030d: 	movl	0x58(%rsp), %edi
    00000311: 	movq	%rbx, %r15
    00000314: 	cmpl	0x5c(%rsp), %edi
    00000318: 	je	.Ltmp2985 # Offset: 792
    0000031e: 	movq	%rax, %rbx
    00000321: 	jmp	.Ltmp2990 # Offset: 801
    00000326: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2986:
    00000330: 	movq	0x20(%rsp), %r10
    00000335: 	movq	0x48(%rsp), %rcx
    0000033a: 	leaq	(%r12,%rsi), %r9
    0000033e: 	movsd	DATAat0x49400(%rip), %xmm9
    00000347: 	addq	0x40(%rsp), %rax
    0000034c: 	leaq	(%r9,%r10), %rdx
    00000350: 	addq	%r10, %rax
    00000353: 	addq	%rsi, %rcx
    00000356: 	movsd	DATAat0x49410(%rip), %xmm8
    0000035f: 	addq	%rbx, %rdx
    00000362: 	addq	%rbx, %rax
    00000365: 	nopl	(%rax) # Size: 3
.Ltmp2991:
    00000368: 	movsd	0x8(%rax,%rsi), %xmm7
    0000036e: 	addsd	(%rbx,%rsi), %xmm7
    00000373: 	movsd	0x10(%rbx,%rsi), %xmm0
    00000379: 	movsd	0x8(%r15,%rsi), %xmm10
    00000380: 	addsd	%xmm7, %xmm0
    00000384: 	addsd	0x8(%rdx,%rsi), %xmm0
    0000038a: 	addsd	%xmm6, %xmm0
    0000038e: 	mulsd	%xmm9, %xmm0
    00000393: 	subsd	%xmm10, %xmm0
    00000398: 	mulsd	%xmm8, %xmm0
    0000039d: 	addsd	%xmm10, %xmm0
    000003a2: 	movsd	%xmm0, 0x8(%r15,%rsi)
    000003a9: 	addq	$0x8, %rsi
    000003ad: 	cmpq	%rcx, %rsi
    000003b0: 	jne	.Ltmp2991 # Offset: 944
    000003b2: 	jmp	.Ltmp2988 # Offset: 946
.Ltmp2985:
    000003b7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003c5: 	subq	$0x20, %rax
    000003c9: 	cmpq	%rax, %rbx
    000003cc: 	je	.Ltmp2992 # Offset: 972
    000003d2: 	movq	0x68(%rsp), %rax
    000003d7: 	leaq	0x10(%rbx), %rdi
    000003db: 	movq	%rdi, (%rbx)
    000003de: 	movq	(%rax), %rbp
    000003e1: 	movq	0x8(%rax), %r12
    000003e5: 	movq	%rbp, %rax
    000003e8: 	addq	%r12, %rax
    000003eb: 	je	.Ltmp2993 # Offset: 1003
    000003ed: 	testq	%rbp, %rbp
    000003f0: 	je	.Ltmp2994 # Offset: 1008
.Ltmp2993:
    000003f6: 	movq	%r12, 0x78(%rsp)
    000003fb: 	cmpq	$0xf, %r12
    000003ff: 	ja	.Ltmp2995 # Offset: 1023
    00000405: 	cmpq	$0x1, %r12
    00000409: 	jne	.Ltmp2996 # Offset: 1033
    0000040f: 	movzbl	(%rbp), %eax
    00000413: 	movb	%al, 0x10(%rbx)
.Ltmp2999:
    00000416: 	movq	%r12, 0x8(%rbx)
    0000041a: 	movb	$0x0, (%rdi,%r12)
    0000041f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000426: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000042d: 	addq	$0x20, %rax
    00000431: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000438: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000043f: 	je	.Ltmp2997 # Offset: 1087
.Ltmp3000:
    00000445: 	movq	-0x20(%rax), %rbp
    00000449: 	callq	clock@PLT # Offset: 1097
    0000044e: 	movq	%rax, end_time(%rip)
    00000455: 	movq	0xa8(%rsp), %rdx
    0000045d: 	subq	%fs:0x28, %rdx
    00000466: 	jne	.Ltmp2998 # Offset: 1126
    0000046c: 	subq	start_time(%rip), %rax
    00000473: 	pxor	%xmm0, %xmm0
    00000477: 	movq	%rbp, %rdi
    0000047a: 	cvtsi2sd	%rax, %xmm0
    0000047f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000487: 	addq	$0xb8, %rsp
    0000048e: 	popq	%rbx
    0000048f: 	popq	%rbp
    00000490: 	popq	%r12
    00000492: 	popq	%r13
    00000494: 	popq	%r14
    00000496: 	popq	%r15
    00000498: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1176
.Ltmp2995:
    0000049d: 	movq	%rbx, %rdi
    000004a0: 	leaq	0x78(%rsp), %rsi
    000004a5: 	xorl	%edx, %edx
    000004a7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1191
    000004ac: 	movq	%rax, (%rbx)
    000004af: 	movq	%rax, %rdi
    000004b2: 	movq	0x78(%rsp), %rax
    000004b7: 	movq	%rax, 0x10(%rbx)
.Ltmp3001:
    000004bb: 	movq	%r12, %rdx
    000004be: 	movq	%rbp, %rsi
    000004c1: 	callq	memcpy@PLT # Offset: 1217
    000004c6: 	movq	0x78(%rsp), %r12
    000004cb: 	movq	(%rbx), %rdi
    000004ce: 	jmp	.Ltmp2999 # Offset: 1230
.Ltmp2992:
    000004d3: 	movq	0x68(%rsp), %rsi
    000004d8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004df: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1247
    000004e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004eb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004f2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004f9: 	jne	.Ltmp3000 # Offset: 1273
.Ltmp2997:
    000004ff: 	movq	-0x8(%rdx), %rax
    00000503: 	addq	$0x200, %rax
    00000509: 	jmp	.Ltmp3000 # Offset: 1289
.Ltmp2996:
    0000050e: 	testq	%r12, %r12
    00000511: 	je	.Ltmp2999 # Offset: 1297
    00000517: 	jmp	.Ltmp3001 # Offset: 1303
.Ltmp2998:
    00000519: 	callq	__stack_chk_fail@PLT # Offset: 1305
.Ltmp2994:
    0000051e: 	leaq	DATAat0x49008(%rip), %rdi
    00000525: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1317
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIdd19jacobi_sor2D_simpleIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIdd20jacobi_sor2D_swappedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x443b0
  Size        : 0x2e7
  MaxSize     : 0x2f0
  Offset      : 0x443b0
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIdd20jacobi_sor2D_swappedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movl	%ecx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%r13d, %edx
    00000015: 	movl	%r8d, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	movl	%r14d, %esi
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x58, %rsp
    00000027: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002f: 	movq	%r9, 0x8(%rsp)
    00000034: 	leaq	0x20(%rsp), %rcx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x48(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm0, 0x20(%rsp)
    0000004e: 	movapd	DATAat0x494e0(%rip), %xmm0
    00000056: 	movaps	%xmm0, 0x30(%rsp)
    0000005b: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 91
    00000060: 	movl	%r14d, %eax
    00000063: 	imull	%r13d, %eax
    00000067: 	testl	%eax, %eax
    00000069: 	jle	.Ltmp3002 # Offset: 105
    0000006b: 	cltq
    0000006d: 	movq	%rbx, %rsi
    00000070: 	movq	%rbp, %rdi
    00000073: 	leaq	(,%rax,8), %rdx
    0000007b: 	callq	memmove@PLT # Offset: 123
.Ltmp3002:
    00000080: 	callq	clock@PLT # Offset: 128
    00000085: 	movq	%rax, start_time(%rip)
    0000008c: 	movl	iterations(%rip), %eax
    00000092: 	movl	%eax, 0x4(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp3003 # Offset: 152
    0000009e: 	subl	$0x1, %r13d
    000000a2: 	leal	-0x1(%r14), %r8d
    000000a6: 	cmpl	$0x1, %r13d
    000000aa: 	jle	.Ltmp3003 # Offset: 170
    000000b0: 	cmpl	$0x1, %r8d
    000000b4: 	jle	.Ltmp3003 # Offset: 180
    000000ba: 	movslq	%r12d, %rdi
    000000bd: 	movsd	DATAat0x49400(%rip), %xmm4
    000000c5: 	xorl	%r14d, %r14d
    000000c8: 	pxor	%xmm5, %xmm5
    000000cc: 	movq	%rdi, %r9
    000000cf: 	movsd	DATAat0x49410(%rip), %xmm3
    000000d7: 	leaq	0x8(,%rdi,8), %r15
    000000df: 	leaq	(,%rdi,8), %rsi
    000000e7: 	negq	%r9
    000000ea: 	shlq	$0x3, %r9
    000000ee: 	nop # Size: 2
.Ltmp3006:
    000000f0: 	leaq	(%rbp,%r15), %r12
    000000f5: 	leaq	(%rbx,%rsi), %r11
    000000f9: 	movl	$0x1, %r10d
    000000ff: 	nop # Size: 1
.Ltmp3005:
    00000100: 	addl	$0x1, %r10d
    00000104: 	movq	%r11, %rax
    00000107: 	movq	%r12, %rdx
    0000010a: 	movl	$0x1, %ecx
    0000010f: 	nop # Size: 1
.Ltmp3004:
    00000110: 	movsd	0x8(%rax,%r9), %xmm1
    00000117: 	addsd	(%rax), %xmm1
    0000011b: 	addl	$0x1, %ecx
    0000011e: 	movsd	0x10(%rax), %xmm0
    00000123: 	movsd	(%rdx), %xmm2
    00000127: 	addsd	%xmm1, %xmm0
    0000012b: 	addsd	0x8(%rax,%rdi,8), %xmm0
    00000131: 	addq	%rsi, %rax
    00000134: 	addsd	%xmm5, %xmm0
    00000138: 	mulsd	%xmm4, %xmm0
    0000013c: 	subsd	%xmm2, %xmm0
    00000140: 	mulsd	%xmm3, %xmm0
    00000144: 	addsd	%xmm2, %xmm0
    00000148: 	movsd	%xmm0, (%rdx)
    0000014c: 	addq	%rsi, %rdx
    0000014f: 	cmpl	%r8d, %ecx
    00000152: 	jne	.Ltmp3004 # Offset: 338
    00000154: 	addq	$0x8, %r12
    00000158: 	addq	$0x8, %r11
    0000015c: 	cmpl	%r10d, %r13d
    0000015f: 	jne	.Ltmp3005 # Offset: 351
    00000161: 	movq	%rbp, %rax
    00000164: 	addl	$0x1, %r14d
    00000168: 	movq	%rbx, %rbp
    0000016b: 	cmpl	0x4(%rsp), %r14d
    00000170: 	je	.Ltmp3003 # Offset: 368
    00000172: 	movq	%rax, %rbx
    00000175: 	jmp	.Ltmp3006 # Offset: 373
.Ltmp3003:
    0000017a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000188: 	subq	$0x20, %rax
    0000018c: 	cmpq	%rax, %rbx
    0000018f: 	je	.Ltmp3007 # Offset: 399
    00000195: 	movq	0x8(%rsp), %rax
    0000019a: 	leaq	0x10(%rbx), %rdi
    0000019e: 	movq	%rdi, (%rbx)
    000001a1: 	movq	(%rax), %rbp
    000001a4: 	movq	0x8(%rax), %r12
    000001a8: 	movq	%rbp, %rax
    000001ab: 	addq	%r12, %rax
    000001ae: 	je	.Ltmp3008 # Offset: 430
    000001b0: 	testq	%rbp, %rbp
    000001b3: 	je	.Ltmp3009 # Offset: 435
.Ltmp3008:
    000001b9: 	movq	%r12, 0x18(%rsp)
    000001be: 	cmpq	$0xf, %r12
    000001c2: 	ja	.Ltmp3010 # Offset: 450
    000001c8: 	cmpq	$0x1, %r12
    000001cc: 	jne	.Ltmp3011 # Offset: 460
    000001d2: 	movzbl	(%rbp), %eax
    000001d6: 	movb	%al, 0x10(%rbx)
.Ltmp3014:
    000001d9: 	movq	%r12, 0x8(%rbx)
    000001dd: 	movb	$0x0, (%rdi,%r12)
    000001e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f0: 	addq	$0x20, %rax
    000001f4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000202: 	je	.Ltmp3012 # Offset: 514
.Ltmp3015:
    00000208: 	movq	-0x20(%rax), %rbp
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	%rax, end_time(%rip)
    00000218: 	movq	0x48(%rsp), %rdx
    0000021d: 	subq	%fs:0x28, %rdx
    00000226: 	jne	.Ltmp3013 # Offset: 550
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	pxor	%xmm0, %xmm0
    00000237: 	movq	%rbp, %rdi
    0000023a: 	cvtsi2sd	%rax, %xmm0
    0000023f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000247: 	addq	$0x58, %rsp
    0000024b: 	popq	%rbx
    0000024c: 	popq	%rbp
    0000024d: 	popq	%r12
    0000024f: 	popq	%r13
    00000251: 	popq	%r14
    00000253: 	popq	%r15
    00000255: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 597
.Ltmp3010:
    0000025a: 	movq	%rbx, %rdi
    0000025d: 	leaq	0x18(%rsp), %rsi
    00000262: 	xorl	%edx, %edx
    00000264: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 612
    00000269: 	movq	%rax, (%rbx)
    0000026c: 	movq	%rax, %rdi
    0000026f: 	movq	0x18(%rsp), %rax
    00000274: 	movq	%rax, 0x10(%rbx)
.Ltmp3016:
    00000278: 	movq	%r12, %rdx
    0000027b: 	movq	%rbp, %rsi
    0000027e: 	callq	memcpy@PLT # Offset: 638
    00000283: 	movq	0x18(%rsp), %r12
    00000288: 	movq	(%rbx), %rdi
    0000028b: 	jmp	.Ltmp3014 # Offset: 651
.Ltmp3007:
    00000290: 	movq	0x8(%rsp), %rsi
    00000295: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000029c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 668
    000002a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002b6: 	jne	.Ltmp3015 # Offset: 694
.Ltmp3012:
    000002bc: 	movq	-0x8(%rdx), %rax
    000002c0: 	addq	$0x200, %rax
    000002c6: 	jmp	.Ltmp3015 # Offset: 710
.Ltmp3011:
    000002cb: 	testq	%r12, %r12
    000002ce: 	je	.Ltmp3014 # Offset: 718
    000002d4: 	jmp	.Ltmp3016 # Offset: 724
.Ltmp3013:
    000002d6: 	callq	__stack_chk_fail@PLT # Offset: 726
.Ltmp3009:
    000002db: 	leaq	DATAat0x49008(%rip), %rdi
    000002e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 738
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIdd20jacobi_sor2D_swappedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x446a0
  Size        : 0x5b5
  MaxSize     : 0x5c0
  Offset      : 0x446a0
  Section     : .text
  Orc Section : .local.text._Z13testLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%edx, %r13d
    00000010: 	movl	%r15d, %edx
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	movl	%r13d, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0xd8, %rsp
    00000027: 	movapd	DATAat0x494d0(%rip), %xmm0
    0000002f: 	movl	%ecx, 0x30(%rsp)
    00000033: 	leaq	0xa0(%rsp), %rcx
    0000003b: 	movl	%r8d, 0x18(%rsp)
    00000040: 	movq	%r9, 0x88(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0xc8(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	movaps	%xmm0, 0xa0(%rsp)
    00000063: 	movapd	DATAat0x494e0(%rip), %xmm0
    0000006b: 	movaps	%xmm0, 0xb0(%rsp)
    00000073: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 115
    00000078: 	movl	%r15d, %eax
    0000007b: 	imull	%r13d, %eax
    0000007f: 	testl	%eax, %eax
    00000081: 	jle	.Ltmp3017 # Offset: 129
    00000083: 	cltq
    00000085: 	movq	%rbx, %rsi
    00000088: 	movq	%r12, %rdi
    0000008b: 	leaq	(,%rax,8), %rdx
    00000093: 	callq	memmove@PLT # Offset: 147
.Ltmp3017:
    00000098: 	callq	clock@PLT # Offset: 152
    0000009d: 	movq	%rax, start_time(%rip)
    000000a4: 	movl	iterations(%rip), %eax
    000000aa: 	movl	%eax, 0x64(%rsp)
    000000ae: 	testl	%eax, %eax
    000000b0: 	jle	.Ltmp3018 # Offset: 176
    000000b6: 	movl	0x30(%rsp), %ecx
    000000ba: 	leal	-0x2(%r13), %edi
    000000be: 	movl	%edi, 0x4c(%rsp)
    000000c2: 	leal	-0x1(%rcx), %eax
    000000c5: 	testl	%edi, %edi
    000000c7: 	jle	.Ltmp3018 # Offset: 199
    000000cd: 	cmpl	$0x1, %eax
    000000d0: 	jle	.Ltmp3018 # Offset: 208
    000000d6: 	movl	0x18(%rsp), %edi
    000000da: 	movl	$0x0, 0x48(%rsp)
    000000e2: 	pxor	%xmm3, %xmm3
    000000e6: 	movapd	DATAat0x49400(%rip), %xmm5
    000000ee: 	movapd	DATAat0x49410(%rip), %xmm4
    000000f6: 	movl	%edi, %eax
    000000f8: 	movsd	DATAat0x49400(%rip), %xmm2
    00000100: 	movsd	DATAat0x49410(%rip), %xmm1
    00000108: 	negl	%eax
    0000010a: 	cltq
    0000010c: 	leaq	(,%rax,8), %rbp
    00000114: 	leal	-0x3(%r13), %eax
    00000118: 	imull	%edi, %eax
    0000011b: 	movslq	%eax, %rdx
    0000011e: 	addl	%edi, %eax
    00000120: 	leaq	0x10(,%rdx,8), %rsi
    00000128: 	movl	%eax, 0x60(%rsp)
    0000012c: 	movq	%rsi, 0x50(%rsp)
    00000131: 	movl	%eax, %esi
    00000133: 	cltq
    00000135: 	leaq	0x8(,%rax,8), %rdx
    0000013d: 	addl	%esi, %edi
    0000013f: 	movq	%rdx, 0x58(%rsp)
    00000144: 	movslq	%edi, %rdx
    00000147: 	leaq	0x10(,%rdx,8), %rdi
    0000014f: 	movq	%rax, %rdx
    00000152: 	leaq	0x10(,%rax,8), %rax
    0000015a: 	negq	%rdx
    0000015d: 	movq	%rdi, 0x68(%rsp)
    00000162: 	leaq	(,%rdx,8), %rdi
    0000016a: 	movq	%rax, 0x70(%rsp)
    0000016f: 	movq	%rdi, 0x80(%rsp)
    00000177: 	leal	-0x2(%rcx), %edi
    0000017a: 	movl	%edi, %eax
    0000017c: 	movl	%edi, 0x34(%rsp)
    00000180: 	shrl	%eax
    00000182: 	subl	$0x1, %eax
    00000185: 	addq	$0x1, %rax
    00000189: 	shlq	$0x4, %rax
    0000018d: 	movq	%rax, 0x28(%rsp)
    00000192: 	movl	%edi, %eax
    00000194: 	andl	$-0x2, %edi
    00000197: 	movl	%edi, %r14d
    0000019a: 	movl	%eax, %edi
    0000019c: 	leal	-0x3(%rcx), %eax
    0000019f: 	shlq	$0x3, %rax
    000001a3: 	orl	$0x1, %edi
    000001a6: 	leal	0x2(%r14), %r15d
    000001aa: 	movq	%rax, 0x78(%rsp)
    000001af: 	movl	%edi, %r13d
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3023:
    000001b8: 	movq	0x50(%rsp), %rax
    000001bd: 	movl	0x60(%rsp), %esi
    000001c1: 	pxor	%xmm8, %xmm8
    000001c6: 	movsd	DATAat0x49400(%rip), %xmm7
    000001ce: 	movsd	DATAat0x49410(%rip), %xmm6
    000001d6: 	addq	%rbx, %rax
    000001d9: 	movq	%rax, (%rsp)
    000001dd: 	movq	0x58(%rsp), %rax
    000001e2: 	leaq	(%r12,%rax), %rdi
    000001e6: 	movq	0x68(%rsp), %rax
    000001eb: 	addq	%rbx, %rax
    000001ee: 	movq	%rax, 0x8(%rsp)
    000001f3: 	movq	0x70(%rsp), %rax
    000001f8: 	leaq	(%rbx,%rax), %r8
    000001fc: 	movq	0x78(%rsp), %rax
    00000201: 	subq	%r12, %rax
    00000204: 	movq	%rax, 0x38(%rsp)
    00000209: 	movq	0x80(%rsp), %rax
    00000211: 	movq	%rax, 0x20(%rsp)
    00000216: 	movl	0x4c(%rsp), %eax
    0000021a: 	movl	%eax, 0x14(%rsp)
    0000021e: 	movq	$-0x10, %rax
    00000225: 	subq	%rbx, %rax
    00000228: 	movq	%rax, 0x40(%rsp)
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp3022:
    00000230: 	movl	0x18(%rsp), %eax
    00000234: 	movl	%esi, %edx
    00000236: 	subl	$0x1, 0x14(%rsp)
    0000023b: 	subl	%eax, %edx
    0000023d: 	leal	(%rsi,%rax), %ecx
    00000240: 	movq	%r12, %rax
    00000243: 	subq	%rbx, %rax
    00000246: 	cmpq	$0x10, %rax
    0000024a: 	seta	%r9b
    0000024e: 	cmpl	$0x3, 0x30(%rsp)
    00000253: 	setne	%al
    00000256: 	andl	%r9d, %eax
    00000259: 	cmpq	(%rsp), %rdi
    0000025d: 	setne	%r9b
    00000261: 	testb	%r9b, %al
    00000264: 	je	.Ltmp3019 # Offset: 612
    0000026a: 	cmpq	0x8(%rsp), %rdi
    0000026f: 	je	.Ltmp3019 # Offset: 623
    00000275: 	movq	(%rsp), %rax
    00000279: 	movl	%edx, 0x1c(%rsp)
    0000027d: 	leaq	-0x10(%r8), %r10
    00000281: 	pxor	%xmm9, %xmm9
    00000286: 	movq	0x28(%rsp), %rdx
    0000028b: 	leaq	-0x8(%rax), %r11
    0000028f: 	movq	0x8(%rsp), %rax
    00000294: 	leaq	-0x8(%rax), %r9
    00000298: 	xorl	%eax, %eax
    0000029a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3020:
    000002a0: 	movupd	(%r11,%rax), %xmm0
    000002a6: 	movupd	(%r10,%rax), %xmm11
    000002ac: 	movupd	(%r8,%rax), %xmm12
    000002b2: 	movupd	(%r9,%rax), %xmm13
    000002b8: 	addpd	%xmm11, %xmm0
    000002bd: 	movupd	(%rdi,%rax), %xmm14
    000002c3: 	addpd	%xmm12, %xmm0
    000002c8: 	addpd	%xmm13, %xmm0
    000002cd: 	addpd	%xmm9, %xmm0
    000002d2: 	mulpd	%xmm5, %xmm0
    000002d6: 	subpd	%xmm14, %xmm0
    000002db: 	mulpd	%xmm4, %xmm0
    000002df: 	addpd	%xmm14, %xmm0
    000002e4: 	movups	%xmm0, (%rdi,%rax)
    000002e8: 	addq	$0x10, %rax
    000002ec: 	cmpq	%rdx, %rax
    000002ef: 	jne	.Ltmp3020 # Offset: 751
    000002f1: 	movl	0x1c(%rsp), %edx
    000002f5: 	cmpl	%r14d, 0x34(%rsp)
    000002fa: 	je	.Ltmp3021 # Offset: 762
    000002fc: 	addl	%r13d, %edx
    000002ff: 	addl	%r13d, %ecx
    00000302: 	leal	(%rsi,%r13), %eax
    00000306: 	movslq	%edx, %rdx
    00000309: 	movslq	%ecx, %rcx
    0000030c: 	cltq
    0000030e: 	movsd	(%rbx,%rdx,8), %xmm0
    00000313: 	leal	(%rsi,%r14), %edx
    00000317: 	leaq	(%r12,%rax,8), %rax
    0000031b: 	movslq	%edx, %rdx
    0000031e: 	movsd	(%rax), %xmm9
    00000323: 	addsd	(%rbx,%rdx,8), %xmm0
    00000328: 	leal	(%rsi,%r15), %edx
    0000032c: 	movslq	%edx, %rdx
    0000032f: 	addsd	(%rbx,%rdx,8), %xmm0
    00000334: 	addsd	(%rbx,%rcx,8), %xmm0
    00000339: 	addsd	%xmm3, %xmm0
    0000033d: 	mulsd	%xmm2, %xmm0
    00000341: 	subsd	%xmm9, %xmm0
    00000346: 	mulsd	%xmm1, %xmm0
    0000034a: 	addsd	%xmm9, %xmm0
    0000034f: 	movsd	%xmm0, (%rax)
.Ltmp3021:
    00000353: 	movl	0x14(%rsp), %eax
    00000357: 	addq	%rbp, (%rsp)
    0000035b: 	addq	%rbp, %rdi
    0000035e: 	addq	%rbp, %r8
    00000361: 	addq	%rbp, 0x8(%rsp)
    00000366: 	subl	0x18(%rsp), %esi
    0000036a: 	subq	%rbp, 0x20(%rsp)
    0000036f: 	testl	%eax, %eax
    00000371: 	jne	.Ltmp3022 # Offset: 881
    00000377: 	addl	$0x1, 0x48(%rsp)
    0000037c: 	movq	%r12, %rax
    0000037f: 	movl	0x48(%rsp), %esi
    00000383: 	movq	%rbx, %r12
    00000386: 	cmpl	0x64(%rsp), %esi
    0000038a: 	je	.Ltmp3018 # Offset: 906
    00000390: 	movq	%rax, %rbx
    00000393: 	jmp	.Ltmp3023 # Offset: 915
    00000398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3019:
    000003a0: 	movq	0x40(%rsp), %rcx
    000003a5: 	movq	0x38(%rsp), %rdx
    000003aa: 	movq	(%rsp), %r11
    000003ae: 	leaq	(%rcx,%r8), %rax
    000003b2: 	leaq	(%rdi,%rdx), %r9
    000003b6: 	movq	%rcx, %rdx
    000003b9: 	leaq	(%r11,%rcx), %rcx
    000003bd: 	movq	0x8(%rsp), %r11
    000003c2: 	addq	%r11, %rdx
    000003c5: 	movq	0x20(%rsp), %r11
    000003ca: 	addq	%r11, %rcx
    000003cd: 	addq	%r11, %rdx
    000003d0: 	addq	%rbx, %rcx
    000003d3: 	addq	%rbx, %rdx
    000003d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3024:
    000003e0: 	movsd	0x8(%rcx,%rax), %xmm9
    000003e7: 	movsd	(%rbx,%rax), %xmm0
    000003ec: 	movsd	0x8(%r12,%rax), %xmm10
    000003f3: 	addsd	%xmm9, %xmm0
    000003f8: 	addsd	0x10(%rbx,%rax), %xmm0
    000003fe: 	addsd	0x8(%rdx,%rax), %xmm0
    00000404: 	addsd	%xmm8, %xmm0
    00000409: 	mulsd	%xmm7, %xmm0
    0000040d: 	subsd	%xmm10, %xmm0
    00000412: 	mulsd	%xmm6, %xmm0
    00000416: 	addsd	%xmm10, %xmm0
    0000041b: 	movsd	%xmm0, 0x8(%r12,%rax)
    00000422: 	addq	$0x8, %rax
    00000426: 	cmpq	%r9, %rax
    00000429: 	jne	.Ltmp3024 # Offset: 1065
    0000042b: 	jmp	.Ltmp3021 # Offset: 1067
.Ltmp3018:
    00000430: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000437: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000043e: 	subq	$0x20, %rax
    00000442: 	cmpq	%rax, %rbx
    00000445: 	je	.Ltmp3025 # Offset: 1093
    0000044b: 	movq	0x88(%rsp), %rax
    00000453: 	leaq	0x10(%rbx), %rdi
    00000457: 	movq	%rdi, (%rbx)
    0000045a: 	movq	(%rax), %rbp
    0000045d: 	movq	0x8(%rax), %r12
    00000461: 	movq	%rbp, %rax
    00000464: 	addq	%r12, %rax
    00000467: 	je	.Ltmp3026 # Offset: 1127
    00000469: 	testq	%rbp, %rbp
    0000046c: 	je	.Ltmp3027 # Offset: 1132
.Ltmp3026:
    00000472: 	movq	%r12, 0x98(%rsp)
    0000047a: 	cmpq	$0xf, %r12
    0000047e: 	ja	.Ltmp3028 # Offset: 1150
    00000484: 	cmpq	$0x1, %r12
    00000488: 	jne	.Ltmp3029 # Offset: 1160
    0000048e: 	movzbl	(%rbp), %eax
    00000492: 	movb	%al, 0x10(%rbx)
.Ltmp3032:
    00000495: 	movq	%r12, 0x8(%rbx)
    00000499: 	movb	$0x0, (%rdi,%r12)
    0000049e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004ac: 	addq	$0x20, %rax
    000004b0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004b7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000004be: 	je	.Ltmp3030 # Offset: 1214
.Ltmp3033:
    000004c4: 	movq	-0x20(%rax), %rbp
    000004c8: 	callq	clock@PLT # Offset: 1224
    000004cd: 	movq	%rax, end_time(%rip)
    000004d4: 	movq	0xc8(%rsp), %rdx
    000004dc: 	subq	%fs:0x28, %rdx
    000004e5: 	jne	.Ltmp3031 # Offset: 1253
    000004eb: 	subq	start_time(%rip), %rax
    000004f2: 	pxor	%xmm0, %xmm0
    000004f6: 	movq	%rbp, %rdi
    000004f9: 	cvtsi2sd	%rax, %xmm0
    000004fe: 	divsd	DATAat0x49520(%rip), %xmm0
    00000506: 	addq	$0xd8, %rsp
    0000050d: 	popq	%rbx
    0000050e: 	popq	%rbp
    0000050f: 	popq	%r12
    00000511: 	popq	%r13
    00000513: 	popq	%r14
    00000515: 	popq	%r15
    00000517: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1303
.Ltmp3028:
    0000051c: 	movq	%rbx, %rdi
    0000051f: 	leaq	0x98(%rsp), %rsi
    00000527: 	xorl	%edx, %edx
    00000529: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1321
    0000052e: 	movq	%rax, (%rbx)
    00000531: 	movq	%rax, %rdi
    00000534: 	movq	0x98(%rsp), %rax
    0000053c: 	movq	%rax, 0x10(%rbx)
.Ltmp3034:
    00000540: 	movq	%r12, %rdx
    00000543: 	movq	%rbp, %rsi
    00000546: 	callq	memcpy@PLT # Offset: 1350
    0000054b: 	movq	0x98(%rsp), %r12
    00000553: 	movq	(%rbx), %rdi
    00000556: 	jmp	.Ltmp3032 # Offset: 1366
.Ltmp3025:
    0000055b: 	movq	0x88(%rsp), %rsi
    00000563: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000056a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1386
    0000056f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000576: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000057d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000584: 	jne	.Ltmp3033 # Offset: 1412
.Ltmp3030:
    0000058a: 	movq	-0x8(%rdx), %rax
    0000058e: 	addq	$0x200, %rax
    00000594: 	jmp	.Ltmp3033 # Offset: 1428
.Ltmp3029:
    00000599: 	testq	%r12, %r12
    0000059c: 	je	.Ltmp3032 # Offset: 1436
    000005a2: 	jmp	.Ltmp3034 # Offset: 1442
.Ltmp3031:
    000005a4: 	callq	__stack_chk_fail@PLT # Offset: 1444
.Ltmp3027:
    000005a9: 	leaq	DATAat0x49008(%rip), %rdi
    000005b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1456
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14max_differenceIdET_PKS0_S2_m" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x44c60
  Size        : 0x59
  MaxSize     : 0x60
  Offset      : 0x44c60
  Section     : .text
  Orc Section : .local.text._Z14max_differenceIdET_PKS0_S2_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp3035 # Offset: 7
    00000009: 	pxor	%xmm2, %xmm2
    0000000d: 	movq	DATAat0x49500(%rip), %xmm3
    00000015: 	xorl	%eax, %eax
    00000017: 	movapd	%xmm2, %xmm1
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3037:
    00000020: 	movsd	(%rdi,%rax,8), %xmm0
    00000025: 	subsd	(%rsi,%rax,8), %xmm0
    0000002a: 	comisd	%xmm0, %xmm2
    0000002e: 	jbe	.Ltmp3036 # Offset: 46
    00000030: 	xorpd	%xmm3, %xmm0
.Ltmp3036:
    00000034: 	maxsd	%xmm1, %xmm0
    00000038: 	addq	$0x1, %rax
    0000003c: 	movapd	%xmm0, %xmm1
    00000040: 	cmpq	%rax, %rdx
    00000043: 	jne	.Ltmp3037 # Offset: 67
    00000045: 	movapd	%xmm1, %xmm0
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3035:
    00000050: 	pxor	%xmm1, %xmm1
    00000054: 	movapd	%xmm1, %xmm0
    00000058: 	retq # Offset: 88
DWARF CFI Instructions:
    <empty>
End of Function "_Z14max_differenceIdET_PKS0_S2_m"

Binary Function "_Z11TestOneTypeIddEvv" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x44cc0
  Size        : 0x3c2f
  MaxSize     : 0x3c2f
  Offset      : 0x44cc0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIddEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	DATAat0x493eb(%rip), %rsi
    0000000c: 	movq	%rsp, %rbp
    0000000f: 	pushq	%r15
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbx
    00000018: 	leaq	-0x100(%rbp), %rbx
    0000001f: 	movq	%rbx, %rdi
    00000022: 	subq	$0x188, %rsp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, -0x38(%rbp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	%rbx, -0x168(%rbp)
    00000043: 	movl	%eax, -0x1a4(%rbp)
    00000049: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 73
    0000004e: 	leaq	-0xe0(%rbp), %rdi
    00000055: 	leaq	DATAat0x493eb(%rip), %rsi
    0000005c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 92
    00000061: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    00000069: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000070: 	leaq	-0x120(%rbp), %rsi
    00000077: 	movaps	%xmm4, -0x120(%rbp)
    0000007e: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    00000086: 	movaps	%xmm4, -0x110(%rbp)
    0000008d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 141
    00000092: 	movl	$0x16e3600, %edi
    00000097: 	callq	_Znam@PLT # Offset: 151
    0000009c: 	movl	$0x16e3600, %edi
    000000a1: 	movq	%rax, -0x160(%rbp)
    000000a8: 	movq	%rax, %r15
    000000ab: 	callq	_Znam@PLT # Offset: 171
    000000b0: 	movq	%rax, %r12
    000000b3: 	movl	iterations(%rip), %eax
    000000b9: 	leaq	DATAat0x49238(%rip), %rdx
    000000c0: 	movq	%rbx, %rsi
    000000c3: 	addl	$0x1, %eax
    000000c6: 	andl	$-0x2, %eax
    000000c9: 	movl	%eax, iterations(%rip)
    000000cf: 	leaq	-0x80(%rbp), %rax
    000000d3: 	movq	%rax, %rdi
    000000d6: 	movq	%rax, -0x170(%rbp)
    000000dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 221
    000000e2: 	leaq	-0x60(%rbp), %rbx
    000000e6: 	movl	$0x5dc, %edx
    000000eb: 	movq	%r15, %rdi
    000000ee: 	xorl	%r14d, %r14d
    000000f1: 	movapd	DATAat0x494d0(%rip), %xmm4
    000000f9: 	movq	%rbx, %rcx
    000000fc: 	movl	$0x7d0, %esi
    00000101: 	movaps	%xmm4, -0x60(%rbp)
    00000105: 	movapd	DATAat0x494e0(%rip), %xmm4
    0000010d: 	movaps	%xmm4, -0x50(%rbp)
    00000111: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 273
    00000116: 	movl	$0x16e3600, %edx
    0000011b: 	movq	%r15, %rsi
    0000011e: 	movq	%r12, %rdi
    00000121: 	callq	memcpy@PLT # Offset: 289
    00000126: 	callq	clock@PLT # Offset: 294
    0000012b: 	movq	%r12, %r9
    0000012e: 	movq	%r15, %rdx
    00000131: 	movq	%rax, start_time(%rip)
    00000138: 	movl	iterations(%rip), %eax
    0000013e: 	testl	%eax, %eax
    00000140: 	jle	.Ltmp3038 # Offset: 320
    00000146: 	movapd	DATAat0x49400(%rip), %xmm4
    0000014e: 	pxor	%xmm3, %xmm3
    00000152: 	pxor	%xmm2, %xmm2
    00000156: 	movq	%r15, %rdi
    00000159: 	movsd	DATAat0x49400(%rip), %xmm1
    00000161: 	movq	%rbx, -0x130(%rbp)
    00000168: 	movl	%eax, %ebx
.Ltmp3043:
    0000016a: 	leaq	0x2ee8(%r9), %r8
    00000171: 	leaq	0x10(%rdx), %rax
    00000175: 	movq	%rdi, %r15
    00000178: 	movq	$-0x2ee0, %rcx
    0000017f: 	leaq	0x2ee0(%rdx), %r10
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3041:
    00000190: 	movq	%r8, %rsi
    00000193: 	subq	%rax, %rsi
    00000196: 	cmpq	$0x5dc0, %rsi
    0000019d: 	jbe	.Ltmp3039 # Offset: 413
    000001a3: 	movq	%rdx, %r11
    000001a6: 	leaq	-0x8(%rax), %r13
    000001aa: 	leaq	0x2ee0(%rax), %rdi
    000001b1: 	xorl	%esi, %esi
    000001b3: 	subq	%rcx, %r11
    000001b6: 	addq	$0x5db8, %rax
.Ltmp3040:
    000001bc: 	movupd	(%r13,%rsi), %xmm5
    000001c3: 	movupd	(%r11,%rsi), %xmm0
    000001c9: 	addpd	%xmm5, %xmm0
    000001cd: 	movupd	(%rdi,%rsi), %xmm5
    000001d2: 	addpd	%xmm5, %xmm0
    000001d6: 	movupd	(%rax,%rsi), %xmm5
    000001db: 	addpd	%xmm5, %xmm0
    000001df: 	addpd	%xmm3, %xmm0
    000001e3: 	mulpd	%xmm4, %xmm0
    000001e7: 	movups	%xmm0, (%r8,%rsi)
    000001ec: 	addq	$0x10, %rsi
    000001f0: 	cmpq	$0x2ed0, %rsi
    000001f7: 	jne	.Ltmp3040 # Offset: 503
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp3045:
    00000200: 	subq	$0x2ee0, %rcx
    00000207: 	addq	$0x2ee0, %r8
    0000020e: 	movq	%rdi, %rax
    00000211: 	cmpq	$-0x16e0720, %rcx
    00000218: 	jne	.Ltmp3041 # Offset: 536
    0000021e: 	addl	$0x1, %r14d
    00000222: 	movq	%r9, %rax
    00000225: 	movq	%r15, %rdi
    00000228: 	movq	%rdx, %r9
    0000022b: 	cmpl	%ebx, %r14d
    0000022e: 	je	.Ltmp3042 # Offset: 558
    00000230: 	movq	%rax, %rdx
    00000233: 	jmp	.Ltmp3043 # Offset: 563
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3039:
    00000240: 	movq	%rcx, %rsi
    00000243: 	movl	$0x2ed0, %edi
    00000248: 	leaq	-0x2ee0(%rdx), %r11
    0000024f: 	negq	%rsi
    00000252: 	subq	%rcx, %rdi
.Ltmp3044:
    00000255: 	movsd	0x8(%r11,%rsi), %xmm0
    0000025c: 	addsd	(%rdx,%rsi), %xmm0
    00000261: 	addsd	0x10(%rdx,%rsi), %xmm0
    00000267: 	addsd	0x8(%r10,%rsi), %xmm0
    0000026e: 	addsd	%xmm2, %xmm0
    00000272: 	mulsd	%xmm1, %xmm0
    00000276: 	movsd	%xmm0, 0x8(%r9,%rsi)
    0000027d: 	addq	$0x8, %rsi
    00000281: 	cmpq	%rsi, %rdi
    00000284: 	jne	.Ltmp3044 # Offset: 644
    00000286: 	leaq	0x2ee0(%rax), %rdi
    0000028d: 	jmp	.Ltmp3045 # Offset: 653
.Ltmp3042:
    00000292: 	movq	%r15, -0x160(%rbp)
    00000299: 	movq	-0x130(%rbp), %rbx
.Ltmp3038:
    000002a0: 	movq	-0x170(%rbp), %rsi
    000002a7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002ae: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 686
    000002b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ba: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002c1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c8: 	je	.Ltmp3046 # Offset: 712
.Ltmp3237:
    000002ce: 	movq	-0x20(%rax), %r13
    000002d2: 	callq	clock@PLT # Offset: 722
    000002d7: 	pxor	%xmm0, %xmm0
    000002db: 	movq	%rax, end_time(%rip)
    000002e2: 	movq	%r13, %rdi
    000002e5: 	subq	start_time(%rip), %rax
    000002ec: 	cvtsi2sd	%rax, %xmm0
    000002f1: 	divsd	DATAat0x49520(%rip), %xmm0
    000002f9: 	callq	_Z13record_resultdPKc # Offset: 761
    000002fe: 	movq	-0x80(%rbp), %rdi
    00000302: 	leaq	-0x70(%rbp), %rax
    00000306: 	movq	%rax, -0x150(%rbp)
    0000030d: 	cmpq	%rax, %rdi
    00000310: 	je	.Ltmp3047 # Offset: 784
    00000312: 	movq	-0x70(%rbp), %rax
    00000316: 	leaq	0x1(%rax), %rsi
    0000031a: 	callq	_ZdlPvm@PLT # Offset: 794
.Ltmp3047:
    0000031f: 	movq	-0x168(%rbp), %rsi
    00000326: 	movq	-0x170(%rbp), %rdi
    0000032d: 	leaq	DATAat0x4924a(%rip), %rdx
    00000334: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 820
    00000339: 	movapd	DATAat0x494d0(%rip), %xmm4
    00000341: 	movq	-0x160(%rbp), %r15
    00000348: 	movq	%rbx, %rcx
    0000034b: 	movl	$0x5dc, %edx
    00000350: 	movl	$0x7d0, %esi
    00000355: 	movaps	%xmm4, -0x60(%rbp)
    00000359: 	movapd	DATAat0x494e0(%rip), %xmm4
    00000361: 	movq	%r15, %rdi
    00000364: 	movaps	%xmm4, -0x50(%rbp)
    00000368: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 872
    0000036d: 	movl	$0x16e3600, %edx
    00000372: 	movq	%r15, %rsi
    00000375: 	movq	%r12, %rdi
    00000378: 	callq	memcpy@PLT # Offset: 888
    0000037d: 	callq	clock@PLT # Offset: 893
    00000382: 	movl	iterations(%rip), %r11d
    00000389: 	movq	%rax, start_time(%rip)
    00000390: 	testl	%r11d, %r11d
    00000393: 	jle	.Ltmp3048 # Offset: 915
    00000399: 	movq	-0x160(%rbp), %rax
    000003a0: 	pxor	%xmm4, %xmm4
    000003a4: 	movq	%r12, %r9
    000003a7: 	xorl	%r8d, %r8d
    000003aa: 	movsd	DATAat0x49400(%rip), %xmm3
    000003b2: 	movsd	%xmm4, -0x130(%rbp)
    000003ba: 	movq	%rax, %r10
    000003bd: 	movq	%rax, %rdi
.Ltmp3052:
    000003c0: 	leaq	0x2ee8(%r9), %rcx
    000003c7: 	leaq	0x16e0720(%r10), %rsi
    000003ce: 	movl	$0x1, %edx
    000003d3: 	movq	%rdi, %r15
    000003d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3050:
    000003e0: 	addl	$0x1, %edx
    000003e3: 	leaq	-0x16dd840(%rsi), %rax
    000003ea: 	movq	%rcx, %rdi
.Ltmp3049:
    000003ed: 	movsd	-0x2ed8(%rax), %xmm0
    000003f5: 	addsd	(%rax), %xmm0
    000003f9: 	addq	$0x2ee0, %rax
    000003ff: 	addq	$0x2ee0, %rdi
    00000406: 	addsd	-0x2ed0(%rax), %xmm0
    0000040e: 	addsd	0x8(%rax), %xmm0
    00000413: 	addsd	-0x130(%rbp), %xmm0
    0000041b: 	mulsd	%xmm3, %xmm0
    0000041f: 	movsd	%xmm0, -0x2ee0(%rdi)
    00000427: 	cmpq	%rsi, %rax
    0000042a: 	jne	.Ltmp3049 # Offset: 1066
    0000042c: 	addq	$0x8, %rcx
    00000430: 	leaq	0x8(%rax), %rsi
    00000434: 	cmpl	$0x5db, %edx
    0000043a: 	jne	.Ltmp3050 # Offset: 1082
    0000043c: 	addl	$0x1, %r8d
    00000440: 	movq	%r9, %rax
    00000443: 	movq	%r15, %rdi
    00000446: 	movq	%r10, %r9
    00000449: 	cmpl	%r11d, %r8d
    0000044c: 	je	.Ltmp3051 # Offset: 1100
    0000044e: 	movq	%rax, %r10
    00000451: 	jmp	.Ltmp3052 # Offset: 1105
.Ltmp3051:
    00000456: 	movq	%r15, -0x160(%rbp)
.Ltmp3048:
    0000045d: 	movq	-0x170(%rbp), %rsi
    00000464: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000046b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1131
    00000470: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000477: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000047e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000485: 	je	.Ltmp3053 # Offset: 1157
.Ltmp3236:
    0000048b: 	movq	-0x20(%rax), %r13
    0000048f: 	callq	clock@PLT # Offset: 1167
    00000494: 	pxor	%xmm0, %xmm0
    00000498: 	movq	%rax, end_time(%rip)
    0000049f: 	movq	%r13, %rdi
    000004a2: 	subq	start_time(%rip), %rax
    000004a9: 	cvtsi2sd	%rax, %xmm0
    000004ae: 	divsd	DATAat0x49520(%rip), %xmm0
    000004b6: 	callq	_Z13record_resultdPKc # Offset: 1206
    000004bb: 	movq	-0x80(%rbp), %rdi
    000004bf: 	cmpq	-0x150(%rbp), %rdi
    000004c6: 	je	.Ltmp3054 # Offset: 1222
    000004c8: 	movq	-0x70(%rbp), %rax
    000004cc: 	leaq	0x1(%rax), %rsi
    000004d0: 	callq	_ZdlPvm@PLT # Offset: 1232
.Ltmp3054:
    000004d5: 	movq	-0x168(%rbp), %rsi
    000004dc: 	movq	-0x170(%rbp), %rdi
    000004e3: 	leaq	DATAat0x4925d(%rip), %rdx
    000004ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1258
    000004ef: 	movapd	DATAat0x494d0(%rip), %xmm4
    000004f7: 	movq	-0x160(%rbp), %r15
    000004fe: 	movq	%rbx, %rcx
    00000501: 	movl	$0x5dc, %edx
    00000506: 	movl	$0x7d0, %esi
    0000050b: 	movaps	%xmm4, -0x60(%rbp)
    0000050f: 	movapd	DATAat0x494e0(%rip), %xmm4
    00000517: 	movq	%r15, %rdi
    0000051a: 	movaps	%xmm4, -0x50(%rbp)
    0000051e: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 1310
    00000523: 	movq	%r15, %rsi
    00000526: 	movq	%r12, %rdi
    00000529: 	movl	$0x16e3600, %edx
    0000052e: 	callq	memcpy@PLT # Offset: 1326
    00000533: 	callq	clock@PLT # Offset: 1331
    00000538: 	movl	iterations(%rip), %ecx
    0000053e: 	movq	%r15, %rsi
    00000541: 	movq	%r12, %rdi
    00000544: 	movq	%rax, start_time(%rip)
    0000054b: 	movq	%r15, %rax
    0000054e: 	xorl	%r15d, %r15d
    00000551: 	testl	%ecx, %ecx
    00000553: 	jle	.Ltmp3055 # Offset: 1363
    00000559: 	movq	%rax, -0x160(%rbp)
    00000560: 	pxor	%xmm2, %xmm2
    00000564: 	pxor	%xmm3, %xmm3
    00000568: 	movsd	DATAat0x49400(%rip), %xmm1
    00000570: 	movapd	DATAat0x49400(%rip), %xmm4
    00000578: 	movq	%rbx, -0x178(%rbp)
    0000057f: 	movl	%ecx, %ebx
.Ltmp3060:
    00000581: 	leaq	0x16dd828(%rsi), %rdx
    00000588: 	movq	$-0x16dd840, %rax
    0000058f: 	leaq	0x2ed0(%rdi), %r13
    00000596: 	leaq	0x2ee0(%rsi), %r8
    0000059d: 	leaq	0x2ec8(%rdi), %r14
    000005a4: 	nopl	(%rax) # Size: 4
.Ltmp3058:
    000005a8: 	movq	%r13, %r9
    000005ab: 	movq	%rax, %rcx
    000005ae: 	subq	%rax, %r9
    000005b1: 	negq	%rcx
    000005b4: 	subq	%rdx, %r9
    000005b7: 	cmpq	$0x5dc0, %r9
    000005be: 	jbe	.Ltmp3056 # Offset: 1470
    000005c4: 	movq	%rax, -0x148(%rbp)
    000005cb: 	leaq	0x2ed8(%rdx), %rcx
    000005d2: 	movq	%r14, %r9
    000005d5: 	leaq	0x2ee8(%rdx), %r11
    000005dc: 	movq	%rcx, -0x140(%rbp)
    000005e3: 	leaq	0x5dc0(%rdx), %r10
    000005ea: 	subq	%rax, %r9
    000005ed: 	xorl	%ecx, %ecx
.Ltmp3057:
    000005ef: 	movq	-0x140(%rbp), %rax
    000005f6: 	movupd	(%rax,%rcx), %xmm5
    000005fb: 	movapd	%xmm5, %xmm0
    000005ff: 	movaps	%xmm5, -0x130(%rbp)
    00000606: 	shufpd	$0x1, %xmm5, %xmm0
    0000060b: 	movupd	(%rdx,%rcx), %xmm5
    00000610: 	shufpd	$0x1, %xmm5, %xmm5
    00000615: 	addpd	%xmm5, %xmm0
    00000619: 	movupd	(%r11,%rcx), %xmm5
    0000061f: 	shufpd	$0x1, %xmm5, %xmm5
    00000624: 	addpd	%xmm5, %xmm0
    00000628: 	movupd	(%r10,%rcx), %xmm5
    0000062e: 	shufpd	$0x1, %xmm5, %xmm5
    00000633: 	addpd	%xmm5, %xmm0
    00000637: 	addpd	%xmm3, %xmm0
    0000063b: 	mulpd	%xmm4, %xmm0
    0000063f: 	shufpd	$0x1, %xmm0, %xmm0
    00000644: 	movups	%xmm0, (%r9,%rcx)
    00000649: 	subq	$0x10, %rcx
    0000064d: 	cmpq	$-0x2ed0, %rcx
    00000654: 	jne	.Ltmp3057 # Offset: 1620
    00000656: 	movq	-0x148(%rbp), %rax
    0000065d: 	nopl	(%rax) # Size: 3
.Ltmp3061:
    00000660: 	subq	$0x2ee0, %rdx
    00000667: 	addq	$0x2ee0, %rax
    0000066d: 	jne	.Ltmp3058 # Offset: 1645
    00000673: 	addl	$0x1, %r15d
    00000677: 	movq	%rdi, %rax
    0000067a: 	movq	%rsi, %rdi
    0000067d: 	cmpl	%ebx, %r15d
    00000680: 	je	.Ltmp3059 # Offset: 1664
    00000682: 	movq	%rax, %rsi
    00000685: 	jmp	.Ltmp3060 # Offset: 1669
    0000068a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3056:
    00000690: 	movq	$-0x2ed0, %r9
    00000697: 	leaq	-0x2ee0(%rsi), %r10
    0000069e: 	subq	%rax, %r9
.Ltmp3062:
    000006a1: 	movsd	0x2ed0(%r10,%rcx), %xmm0
    000006ab: 	addsd	0x2ec8(%rsi,%rcx), %xmm0
    000006b4: 	addsd	0x2ed8(%rsi,%rcx), %xmm0
    000006bd: 	addsd	0x2ed0(%r8,%rcx), %xmm0
    000006c7: 	addsd	%xmm2, %xmm0
    000006cb: 	mulsd	%xmm1, %xmm0
    000006cf: 	movsd	%xmm0, 0x2ed0(%rdi,%rcx)
    000006d8: 	subq	$0x8, %rcx
    000006dc: 	cmpq	%rcx, %r9
    000006df: 	je	.Ltmp3061 # Offset: 1759
    000006e5: 	jmp	.Ltmp3062 # Offset: 1765
.Ltmp3059:
    000006e7: 	movq	-0x178(%rbp), %rbx
.Ltmp3055:
    000006ee: 	movq	-0x170(%rbp), %rsi
    000006f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000006fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1788
    00000701: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000708: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000070f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000716: 	je	.Ltmp3063 # Offset: 1814
.Ltmp3235:
    0000071c: 	movq	-0x20(%rax), %r13
    00000720: 	callq	clock@PLT # Offset: 1824
    00000725: 	pxor	%xmm0, %xmm0
    00000729: 	movq	%rax, end_time(%rip)
    00000730: 	movq	%r13, %rdi
    00000733: 	subq	start_time(%rip), %rax
    0000073a: 	cvtsi2sd	%rax, %xmm0
    0000073f: 	divsd	DATAat0x49520(%rip), %xmm0
    00000747: 	callq	_Z13record_resultdPKc # Offset: 1863
    0000074c: 	movq	-0x80(%rbp), %rdi
    00000750: 	cmpq	-0x150(%rbp), %rdi
    00000757: 	je	.Ltmp3064 # Offset: 1879
    00000759: 	movq	-0x70(%rbp), %rax
    0000075d: 	leaq	0x1(%rax), %rsi
    00000761: 	callq	_ZdlPvm@PLT # Offset: 1889
.Ltmp3064:
    00000766: 	movq	-0x168(%rbp), %rsi
    0000076d: 	movq	-0x170(%rbp), %rdi
    00000774: 	leaq	DATAat0x49271(%rip), %rdx
    0000077b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1915
    00000780: 	movapd	DATAat0x494d0(%rip), %xmm4
    00000788: 	movq	-0x160(%rbp), %r15
    0000078f: 	movq	%rbx, %rcx
    00000792: 	movl	$0x5dc, %edx
    00000797: 	movl	$0x7d0, %esi
    0000079c: 	movaps	%xmm4, -0x60(%rbp)
    000007a0: 	movapd	DATAat0x494e0(%rip), %xmm4
    000007a8: 	movq	%r15, %rdi
    000007ab: 	movaps	%xmm4, -0x50(%rbp)
    000007af: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 1967
    000007b4: 	movq	%r15, %rsi
    000007b7: 	movq	%r12, %rdi
    000007ba: 	movl	$0x16e3600, %edx
    000007bf: 	callq	memcpy@PLT # Offset: 1983
    000007c4: 	callq	clock@PLT # Offset: 1988
    000007c9: 	movl	iterations(%rip), %ecx
    000007cf: 	movq	%r15, %rsi
    000007d2: 	movq	%r12, %rdi
    000007d5: 	movq	%rax, start_time(%rip)
    000007dc: 	movq	%r15, %rax
    000007df: 	xorl	%r15d, %r15d
    000007e2: 	testl	%ecx, %ecx
    000007e4: 	jle	.Ltmp3065 # Offset: 2020
    000007ea: 	movq	%rax, -0x148(%rbp)
    000007f1: 	pxor	%xmm2, %xmm2
    000007f5: 	pxor	%xmm3, %xmm3
    000007f9: 	movsd	DATAat0x49400(%rip), %xmm1
    00000801: 	movapd	DATAat0x49400(%rip), %xmm4
    00000809: 	movq	%rbx, -0x178(%rbp)
    00000810: 	movl	%ecx, %ebx
.Ltmp3070:
    00000812: 	leaq	0x2ec8(%rsi), %rdx
    00000819: 	movq	$-0x2ee0, %rax
    00000820: 	leaq	0x2ed0(%rdi), %r13
    00000827: 	leaq	0x2ee0(%rsi), %r8
    0000082e: 	leaq	0x2ec8(%rdi), %r14
    00000835: 	nopl	(%rax) # Size: 3
.Ltmp3068:
    00000838: 	movq	%r13, %r9
    0000083b: 	movq	%rax, %rcx
    0000083e: 	subq	%rax, %r9
    00000841: 	negq	%rcx
    00000844: 	subq	%rdx, %r9
    00000847: 	cmpq	$0x5dc0, %r9
    0000084e: 	jbe	.Ltmp3066 # Offset: 2126
    00000854: 	leaq	0x2ed8(%rdx), %rcx
    0000085b: 	movq	%r14, %r9
    0000085e: 	movq	%rax, -0x140(%rbp)
    00000865: 	leaq	0x2ee8(%rdx), %r11
    0000086c: 	movq	%rcx, -0x130(%rbp)
    00000873: 	subq	%rax, %r9
    00000876: 	movq	-0x130(%rbp), %rax
    0000087d: 	xorl	%ecx, %ecx
    0000087f: 	leaq	0x5dc0(%rdx), %r10
.Ltmp3067:
    00000886: 	movupd	(%rax,%rcx), %xmm5
    0000088b: 	movapd	%xmm5, %xmm0
    0000088f: 	movaps	%xmm5, -0x130(%rbp)
    00000896: 	shufpd	$0x1, %xmm5, %xmm0
    0000089b: 	movupd	(%rdx,%rcx), %xmm5
    000008a0: 	shufpd	$0x1, %xmm5, %xmm5
    000008a5: 	addpd	%xmm5, %xmm0
    000008a9: 	movupd	(%r11,%rcx), %xmm5
    000008af: 	shufpd	$0x1, %xmm5, %xmm5
    000008b4: 	addpd	%xmm5, %xmm0
    000008b8: 	movupd	(%r10,%rcx), %xmm5
    000008be: 	shufpd	$0x1, %xmm5, %xmm5
    000008c3: 	addpd	%xmm5, %xmm0
    000008c7: 	addpd	%xmm3, %xmm0
    000008cb: 	mulpd	%xmm4, %xmm0
    000008cf: 	shufpd	$0x1, %xmm0, %xmm0
    000008d4: 	movups	%xmm0, (%r9,%rcx)
    000008d9: 	subq	$0x10, %rcx
    000008dd: 	cmpq	$-0x2ed0, %rcx
    000008e4: 	jne	.Ltmp3067 # Offset: 2276
    000008e6: 	movq	-0x140(%rbp), %rax
    000008ed: 	nopl	(%rax) # Size: 3
.Ltmp3071:
    000008f0: 	subq	$0x2ee0, %rax
    000008f6: 	addq	$0x2ee0, %rdx
    000008fd: 	cmpq	$-0x16e0720, %rax
    00000903: 	jne	.Ltmp3068 # Offset: 2307
    00000909: 	addl	$0x1, %r15d
    0000090d: 	movq	%rdi, %rax
    00000910: 	movq	%rsi, %rdi
    00000913: 	cmpl	%ebx, %r15d
    00000916: 	je	.Ltmp3069 # Offset: 2326
    00000918: 	movq	%rax, %rsi
    0000091b: 	jmp	.Ltmp3070 # Offset: 2331
.Ltmp3066:
    00000920: 	movq	$-0x2ed0, %r9
    00000927: 	leaq	-0x2ee0(%rsi), %r10
    0000092e: 	subq	%rax, %r9
.Ltmp3072:
    00000931: 	movsd	0x2ed0(%r10,%rcx), %xmm0
    0000093b: 	addsd	0x2ec8(%rsi,%rcx), %xmm0
    00000944: 	addsd	0x2ed8(%rsi,%rcx), %xmm0
    0000094d: 	addsd	0x2ed0(%r8,%rcx), %xmm0
    00000957: 	addsd	%xmm2, %xmm0
    0000095b: 	mulsd	%xmm1, %xmm0
    0000095f: 	movsd	%xmm0, 0x2ed0(%rdi,%rcx)
    00000968: 	subq	$0x8, %rcx
    0000096c: 	cmpq	%r9, %rcx
    0000096f: 	je	.Ltmp3071 # Offset: 2415
    00000975: 	jmp	.Ltmp3072 # Offset: 2421
.Ltmp3069:
    00000977: 	movq	-0x148(%rbp), %rax
    0000097e: 	movq	-0x178(%rbp), %rbx
    00000985: 	movq	%rax, -0x160(%rbp)
.Ltmp3065:
    0000098c: 	movq	-0x170(%rbp), %rsi
    00000993: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000099a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2458
    0000099f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009a6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000009ad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009b4: 	je	.Ltmp3073 # Offset: 2484
.Ltmp3234:
    000009ba: 	movq	-0x20(%rax), %r13
    000009be: 	callq	clock@PLT # Offset: 2494
    000009c3: 	pxor	%xmm0, %xmm0
    000009c7: 	movq	%rax, end_time(%rip)
    000009ce: 	movq	%r13, %rdi
    000009d1: 	subq	start_time(%rip), %rax
    000009d8: 	cvtsi2sd	%rax, %xmm0
    000009dd: 	divsd	DATAat0x49520(%rip), %xmm0
    000009e5: 	callq	_Z13record_resultdPKc # Offset: 2533
    000009ea: 	movq	-0x80(%rbp), %rdi
    000009ee: 	cmpq	-0x150(%rbp), %rdi
    000009f5: 	je	.Ltmp3074 # Offset: 2549
    000009f7: 	movq	-0x70(%rbp), %rax
    000009fb: 	leaq	0x1(%rax), %rsi
    000009ff: 	callq	_ZdlPvm@PLT # Offset: 2559
.Ltmp3074:
    00000a04: 	movq	-0x168(%rbp), %rsi
    00000a0b: 	movq	-0x170(%rbp), %rdi
    00000a12: 	leaq	DATAat0x49286(%rip), %rdx
    00000a19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2585
    00000a1e: 	movapd	DATAat0x494d0(%rip), %xmm4
    00000a26: 	movq	-0x160(%rbp), %r15
    00000a2d: 	movq	%rbx, %rcx
    00000a30: 	movl	$0x5dc, %edx
    00000a35: 	movl	$0x7d0, %esi
    00000a3a: 	movaps	%xmm4, -0x60(%rbp)
    00000a3e: 	movapd	DATAat0x494e0(%rip), %xmm4
    00000a46: 	movq	%r15, %rdi
    00000a49: 	movaps	%xmm4, -0x50(%rbp)
    00000a4d: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 2637
    00000a52: 	movl	$0x16e3600, %edx
    00000a57: 	movq	%r15, %rsi
    00000a5a: 	movq	%r12, %rdi
    00000a5d: 	callq	memcpy@PLT # Offset: 2653
    00000a62: 	callq	clock@PLT # Offset: 2658
    00000a67: 	movl	iterations(%rip), %edi
    00000a6d: 	movq	%r15, %rdx
    00000a70: 	movq	%r12, %r8
    00000a73: 	movq	%rax, start_time(%rip)
    00000a7a: 	movq	%r15, %rax
    00000a7d: 	xorl	%r15d, %r15d
    00000a80: 	testl	%edi, %edi
    00000a82: 	jle	.Ltmp3075 # Offset: 2690
    00000a88: 	movapd	DATAat0x49400(%rip), %xmm4
    00000a90: 	pxor	%xmm3, %xmm3
    00000a94: 	pxor	%xmm2, %xmm2
    00000a98: 	movq	%rax, %rsi
    00000a9b: 	movsd	DATAat0x49400(%rip), %xmm1
    00000aa3: 	movq	%rbx, -0x140(%rbp)
    00000aaa: 	movl	%edi, %ebx
.Ltmp3080:
    00000aac: 	movq	%rsi, -0x130(%rbp)
    00000ab3: 	leaq	0x16dd848(%r8), %rdi
    00000aba: 	leaq	0x16da970(%rdx), %rax
    00000ac1: 	movq	$-0x16dd840, %rcx
    00000ac8: 	leaq	0x2ee0(%rdx), %r9
    00000acf: 	nop # Size: 1
.Ltmp3078:
    00000ad0: 	movq	%rdi, %rsi
    00000ad3: 	subq	%rax, %rsi
    00000ad6: 	cmpq	$0x5dc0, %rsi
    00000add: 	jbe	.Ltmp3076 # Offset: 2781
    00000ae3: 	movq	%rdx, %r13
    00000ae6: 	leaq	-0x8(%rax), %r14
    00000aea: 	leaq	0x2ee0(%rax), %r11
    00000af1: 	xorl	%esi, %esi
    00000af3: 	subq	%rcx, %r13
    00000af6: 	leaq	0x5db8(%rax), %r10
.Ltmp3077:
    00000afd: 	movupd	(%r14,%rsi), %xmm5
    00000b03: 	movupd	(%r13,%rsi), %xmm0
    00000b0a: 	addpd	%xmm5, %xmm0
    00000b0e: 	movupd	(%r11,%rsi), %xmm5
    00000b14: 	addpd	%xmm5, %xmm0
    00000b18: 	movupd	(%r10,%rsi), %xmm5
    00000b1e: 	addpd	%xmm5, %xmm0
    00000b22: 	addpd	%xmm3, %xmm0
    00000b26: 	mulpd	%xmm4, %xmm0
    00000b2a: 	movups	%xmm0, (%rdi,%rsi)
    00000b2e: 	addq	$0x10, %rsi
    00000b32: 	cmpq	$0x2ed0, %rsi
    00000b39: 	jne	.Ltmp3077 # Offset: 2873
    00000b3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3082:
    00000b40: 	subq	$0x2ee0, %rdi
    00000b47: 	subq	$0x2ee0, %rax
    00000b4d: 	addq	$0x2ee0, %rcx
    00000b54: 	jne	.Ltmp3078 # Offset: 2900
    00000b5a: 	addl	$0x1, %r15d
    00000b5e: 	movq	%r8, %rax
    00000b61: 	movq	-0x130(%rbp), %rsi
    00000b68: 	movq	%rdx, %r8
    00000b6b: 	cmpl	%r15d, %ebx
    00000b6e: 	je	.Ltmp3079 # Offset: 2926
    00000b70: 	movq	%rax, %rdx
    00000b73: 	jmp	.Ltmp3080 # Offset: 2931
    00000b78: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3076:
    00000b80: 	movq	%rcx, %rsi
    00000b83: 	movl	$0x2ed0, %r10d
    00000b89: 	movq	-0x130(%rbp), %r14
    00000b90: 	leaq	-0x2ee0(%rdx), %r11
    00000b97: 	negq	%rsi
    00000b9a: 	subq	%rcx, %r10
.Ltmp3081:
    00000b9d: 	movsd	0x8(%r11,%rsi), %xmm0
    00000ba4: 	addsd	(%rdx,%rsi), %xmm0
    00000ba9: 	addsd	0x10(%rdx,%rsi), %xmm0
    00000baf: 	addsd	0x8(%r9,%rsi), %xmm0
    00000bb6: 	addsd	%xmm2, %xmm0
    00000bba: 	mulsd	%xmm1, %xmm0
    00000bbe: 	movsd	%xmm0, 0x8(%r8,%rsi)
    00000bc5: 	addq	$0x8, %rsi
    00000bc9: 	cmpq	%rsi, %r10
    00000bcc: 	jne	.Ltmp3081 # Offset: 3020
    00000bce: 	movq	%r14, -0x130(%rbp)
    00000bd5: 	jmp	.Ltmp3082 # Offset: 3029
.Ltmp3079:
    00000bda: 	movq	%rsi, -0x160(%rbp)
    00000be1: 	movq	-0x140(%rbp), %rbx
.Ltmp3075:
    00000be8: 	movq	-0x170(%rbp), %rsi
    00000bef: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000bf6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3062
    00000bfb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c02: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000c09: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c10: 	je	.Ltmp3083 # Offset: 3088
.Ltmp3233:
    00000c16: 	movq	-0x20(%rax), %r13
    00000c1a: 	callq	clock@PLT # Offset: 3098
    00000c1f: 	pxor	%xmm0, %xmm0
    00000c23: 	movq	%rax, end_time(%rip)
    00000c2a: 	movq	%r13, %rdi
    00000c2d: 	subq	start_time(%rip), %rax
    00000c34: 	cvtsi2sd	%rax, %xmm0
    00000c39: 	divsd	DATAat0x49520(%rip), %xmm0
    00000c41: 	callq	_Z13record_resultdPKc # Offset: 3137
    00000c46: 	movq	-0x80(%rbp), %rdi
    00000c4a: 	cmpq	-0x150(%rbp), %rdi
    00000c51: 	je	.Ltmp3084 # Offset: 3153
    00000c53: 	movq	-0x70(%rbp), %rax
    00000c57: 	leaq	0x1(%rax), %rsi
    00000c5b: 	callq	_ZdlPvm@PLT # Offset: 3163
.Ltmp3084:
    00000c60: 	movq	-0x168(%rbp), %rsi
    00000c67: 	movq	-0x170(%rbp), %rdi
    00000c6e: 	leaq	DATAat0x4929b(%rip), %rdx
    00000c75: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3189
    00000c7a: 	movq	-0x160(%rbp), %r13
    00000c81: 	movq	%rbx, %rcx
    00000c84: 	movq	%r12, %r15
    00000c87: 	xorl	%r14d, %r14d
    00000c8a: 	movapd	DATAat0x494d0(%rip), %xmm4
    00000c92: 	movl	$0x5dc, %edx
    00000c97: 	movl	$0x7d0, %esi
    00000c9c: 	movq	%r13, %rdi
    00000c9f: 	movaps	%xmm4, -0x60(%rbp)
    00000ca3: 	movapd	DATAat0x494e0(%rip), %xmm4
    00000cab: 	movaps	%xmm4, -0x50(%rbp)
    00000caf: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 3247
    00000cb4: 	movq	%r12, %rdi
    00000cb7: 	movl	$0x16e3600, %edx
    00000cbc: 	movq	%r13, %rsi
    00000cbf: 	callq	memcpy@PLT # Offset: 3263
    00000cc4: 	callq	clock@PLT # Offset: 3268
    00000cc9: 	movq	%rax, start_time(%rip)
    00000cd0: 	movl	iterations(%rip), %eax
    00000cd6: 	movl	%eax, %edi
    00000cd8: 	testl	%eax, %eax
    00000cda: 	jle	.Ltmp3085 # Offset: 3290
    00000cdc: 	movq	-0x160(%rbp), %rax
    00000ce3: 	movq	%r13, -0x130(%rbp)
    00000cea: 	movq	%rbx, %r13
    00000ced: 	movl	%edi, %ebx
    00000cef: 	movq	-0x130(%rbp), %rdi
    00000cf6: 	movq	%rax, -0x140(%rbp)
    00000cfd: 	jmp	.Ltmp3086 # Offset: 3325
.Ltmp3087:
    00000cff: 	movq	%rdx, -0x130(%rbp)
    00000d06: 	movq	%rdx, %rdi
.Ltmp3086:
    00000d09: 	movl	$0x7d0, %edx
    00000d0e: 	movq	%r15, %rsi
    00000d11: 	movl	$0x5dc, %r8d
    00000d17: 	movl	$0x5dc, %ecx
    00000d1c: 	callq	"_ZN17jacobi2D_unrolledIddEclEPKdPdiiii.isra.0/1" # Offset: 3356
    00000d21: 	addl	$0x1, %r14d
    00000d25: 	movq	%r15, %rdx
    00000d28: 	movq	-0x130(%rbp), %r15
    00000d2f: 	cmpl	%ebx, %r14d
    00000d32: 	jne	.Ltmp3087 # Offset: 3378
    00000d34: 	movq	-0x140(%rbp), %rax
    00000d3b: 	movq	%r13, %rbx
    00000d3e: 	movq	%rax, -0x160(%rbp)
.Ltmp3085:
    00000d45: 	movq	-0x170(%rbp), %rsi
    00000d4c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000d53: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3411
    00000d58: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d5f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000d66: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d6d: 	je	.Ltmp3088 # Offset: 3437
.Ltmp3232:
    00000d73: 	movq	-0x20(%rax), %r13
    00000d77: 	callq	clock@PLT # Offset: 3447
    00000d7c: 	pxor	%xmm0, %xmm0
    00000d80: 	movq	%rax, end_time(%rip)
    00000d87: 	movq	%r13, %rdi
    00000d8a: 	subq	start_time(%rip), %rax
    00000d91: 	cvtsi2sd	%rax, %xmm0
    00000d96: 	divsd	DATAat0x49520(%rip), %xmm0
    00000d9e: 	callq	_Z13record_resultdPKc # Offset: 3486
    00000da3: 	movq	-0x80(%rbp), %rdi
    00000da7: 	cmpq	-0x150(%rbp), %rdi
    00000dae: 	je	.Ltmp3089 # Offset: 3502
    00000db0: 	movq	-0x70(%rbp), %rax
    00000db4: 	leaq	0x1(%rax), %rsi
    00000db8: 	callq	_ZdlPvm@PLT # Offset: 3512
.Ltmp3089:
    00000dbd: 	movq	-0x168(%rbp), %rsi
    00000dc4: 	movq	-0x170(%rbp), %rdi
    00000dcb: 	leaq	DATAat0x492af(%rip), %rdx
    00000dd2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3538
    00000dd7: 	movq	-0x160(%rbp), %r13
    00000dde: 	movq	%rbx, %rcx
    00000de1: 	movq	%r12, %r15
    00000de4: 	xorl	%r14d, %r14d
    00000de7: 	movapd	DATAat0x494d0(%rip), %xmm4
    00000def: 	movl	$0x5dc, %edx
    00000df4: 	movl	$0x7d0, %esi
    00000df9: 	movq	%r13, %rdi
    00000dfc: 	movaps	%xmm4, -0x60(%rbp)
    00000e00: 	movapd	DATAat0x494e0(%rip), %xmm4
    00000e08: 	movaps	%xmm4, -0x50(%rbp)
    00000e0c: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 3596
    00000e11: 	movq	%r12, %rdi
    00000e14: 	movl	$0x16e3600, %edx
    00000e19: 	movq	%r13, %rsi
    00000e1c: 	callq	memcpy@PLT # Offset: 3612
    00000e21: 	callq	clock@PLT # Offset: 3617
    00000e26: 	movq	%rax, start_time(%rip)
    00000e2d: 	movl	iterations(%rip), %eax
    00000e33: 	movl	%eax, %edi
    00000e35: 	testl	%eax, %eax
    00000e37: 	jle	.Ltmp3090 # Offset: 3639
    00000e39: 	movq	-0x160(%rbp), %rax
    00000e40: 	movq	%r13, -0x130(%rbp)
    00000e47: 	movq	%rbx, %r13
    00000e4a: 	movl	%edi, %ebx
    00000e4c: 	movq	-0x130(%rbp), %rdi
    00000e53: 	movq	%rax, -0x140(%rbp)
    00000e5a: 	jmp	.Ltmp3091 # Offset: 3674
.Ltmp3092:
    00000e5c: 	movq	%rdx, -0x130(%rbp)
    00000e63: 	movq	%rdx, %rdi
.Ltmp3091:
    00000e66: 	movl	$0x7d0, %edx
    00000e6b: 	movq	%r15, %rsi
    00000e6e: 	movl	$0x5dc, %r8d
    00000e74: 	movl	$0x5dc, %ecx
    00000e79: 	callq	"_ZN18jacobi2D_unrolled2IddEclEPKdPdiiii.isra.0/1" # Offset: 3705
    00000e7e: 	addl	$0x1, %r14d
    00000e82: 	movq	%r15, %rdx
    00000e85: 	movq	-0x130(%rbp), %r15
    00000e8c: 	cmpl	%ebx, %r14d
    00000e8f: 	jne	.Ltmp3092 # Offset: 3727
    00000e91: 	movq	-0x140(%rbp), %rax
    00000e98: 	movq	%r13, %rbx
    00000e9b: 	movq	%rax, -0x160(%rbp)
.Ltmp3090:
    00000ea2: 	movq	-0x170(%rbp), %rsi
    00000ea9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000eb0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3760
    00000eb5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ebc: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000ec3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000eca: 	je	.Ltmp3093 # Offset: 3786
.Ltmp3231:
    00000ed0: 	movq	-0x20(%rax), %r13
    00000ed4: 	callq	clock@PLT # Offset: 3796
    00000ed9: 	pxor	%xmm0, %xmm0
    00000edd: 	movq	%rax, end_time(%rip)
    00000ee4: 	movq	%r13, %rdi
    00000ee7: 	subq	start_time(%rip), %rax
    00000eee: 	cvtsi2sd	%rax, %xmm0
    00000ef3: 	divsd	DATAat0x49520(%rip), %xmm0
    00000efb: 	callq	_Z13record_resultdPKc # Offset: 3835
    00000f00: 	movq	-0x80(%rbp), %rdi
    00000f04: 	cmpq	-0x150(%rbp), %rdi
    00000f0b: 	je	.Ltmp3094 # Offset: 3851
    00000f0d: 	movq	-0x70(%rbp), %rax
    00000f11: 	leaq	0x1(%rax), %rsi
    00000f15: 	callq	_ZdlPvm@PLT # Offset: 3861
.Ltmp3094:
    00000f1a: 	movq	-0x168(%rbp), %rsi
    00000f21: 	movq	-0x170(%rbp), %rdi
    00000f28: 	leaq	DATAat0x492c4(%rip), %rdx
    00000f2f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3887
    00000f34: 	movq	-0x160(%rbp), %r13
    00000f3b: 	movq	%rbx, %rcx
    00000f3e: 	movq	%r12, %r15
    00000f41: 	xorl	%r14d, %r14d
    00000f44: 	movapd	DATAat0x494d0(%rip), %xmm4
    00000f4c: 	movl	$0x5dc, %edx
    00000f51: 	movl	$0x7d0, %esi
    00000f56: 	movq	%r13, %rdi
    00000f59: 	movaps	%xmm4, -0x60(%rbp)
    00000f5d: 	movapd	DATAat0x494e0(%rip), %xmm4
    00000f65: 	movaps	%xmm4, -0x50(%rbp)
    00000f69: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 3945
    00000f6e: 	movq	%r12, %rdi
    00000f71: 	movl	$0x16e3600, %edx
    00000f76: 	movq	%r13, %rsi
    00000f79: 	callq	memcpy@PLT # Offset: 3961
    00000f7e: 	callq	clock@PLT # Offset: 3966
    00000f83: 	movq	%rax, start_time(%rip)
    00000f8a: 	movl	iterations(%rip), %eax
    00000f90: 	movl	%eax, %edi
    00000f92: 	testl	%eax, %eax
    00000f94: 	jle	.Ltmp3095 # Offset: 3988
    00000f96: 	movq	-0x160(%rbp), %rax
    00000f9d: 	movq	%r13, -0x130(%rbp)
    00000fa4: 	movq	%rbx, %r13
    00000fa7: 	movl	%edi, %ebx
    00000fa9: 	movq	-0x130(%rbp), %rdi
    00000fb0: 	movq	%rax, -0x140(%rbp)
    00000fb7: 	jmp	.Ltmp3096 # Offset: 4023
.Ltmp3097:
    00000fb9: 	movq	%rdx, -0x130(%rbp)
    00000fc0: 	movq	%rdx, %rdi
.Ltmp3096:
    00000fc3: 	movl	$0x7d0, %edx
    00000fc8: 	movq	%r15, %rsi
    00000fcb: 	movl	$0x5dc, %r8d
    00000fd1: 	movl	$0x5dc, %ecx
    00000fd6: 	callq	"_ZN18jacobi2D_unrolled3IddEclEPKdPdiiii.isra.0/1" # Offset: 4054
    00000fdb: 	addl	$0x1, %r14d
    00000fdf: 	movq	%r15, %rdx
    00000fe2: 	movq	-0x130(%rbp), %r15
    00000fe9: 	cmpl	%ebx, %r14d
    00000fec: 	jne	.Ltmp3097 # Offset: 4076
    00000fee: 	movq	-0x140(%rbp), %rax
    00000ff5: 	movq	%r13, %rbx
    00000ff8: 	movq	%rax, -0x160(%rbp)
.Ltmp3095:
    00000fff: 	movq	-0x170(%rbp), %rsi
    00001006: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000100d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4109
    00001012: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001019: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001020: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001027: 	je	.Ltmp3098 # Offset: 4135
.Ltmp3230:
    0000102d: 	movq	-0x20(%rax), %r13
    00001031: 	callq	clock@PLT # Offset: 4145
    00001036: 	pxor	%xmm0, %xmm0
    0000103a: 	movq	%rax, end_time(%rip)
    00001041: 	movq	%r13, %rdi
    00001044: 	subq	start_time(%rip), %rax
    0000104b: 	cvtsi2sd	%rax, %xmm0
    00001050: 	divsd	DATAat0x49520(%rip), %xmm0
    00001058: 	callq	_Z13record_resultdPKc # Offset: 4184
    0000105d: 	movq	-0x80(%rbp), %rdi
    00001061: 	cmpq	-0x150(%rbp), %rdi
    00001068: 	je	.Ltmp3099 # Offset: 4200
    0000106a: 	movq	-0x70(%rbp), %rax
    0000106e: 	leaq	0x1(%rax), %rsi
    00001072: 	callq	_ZdlPvm@PLT # Offset: 4210
.Ltmp3099:
    00001077: 	movq	-0x168(%rbp), %r15
    0000107e: 	leaq	-0xc0(%rbp), %rdi
    00001085: 	leaq	DATAat0x492d9(%rip), %rdx
    0000108c: 	movq	%r15, %rsi
    0000108f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4239
    00001094: 	movl	iterations(%rip), %edx
    0000109a: 	xorl	%r8d, %r8d
    0000109d: 	xorl	%ecx, %ecx
    0000109f: 	movl	$0x2dc6c0, %esi
    000010a4: 	movq	-0xc0(%rbp), %rdi
    000010ab: 	callq	_Z9summarizePKciiii # Offset: 4267
    000010b0: 	movq	-0x170(%rbp), %rdi
    000010b7: 	leaq	DATAat0x49238(%rip), %rdx
    000010be: 	movq	%r15, %rsi
    000010c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4289
    000010c6: 	movapd	DATAat0x494d0(%rip), %xmm4
    000010ce: 	movq	-0x160(%rbp), %r15
    000010d5: 	movq	%rbx, %rcx
    000010d8: 	movl	$0xfa, %edx
    000010dd: 	movl	$0x12c, %esi
    000010e2: 	movaps	%xmm4, -0x60(%rbp)
    000010e6: 	movapd	DATAat0x494e0(%rip), %xmm4
    000010ee: 	movq	%r15, %rdi
    000010f1: 	movaps	%xmm4, -0x50(%rbp)
    000010f5: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 4341
    000010fa: 	movl	$0x927c0, %edx
    000010ff: 	movq	%r15, %rsi
    00001102: 	movq	%r12, %rdi
    00001105: 	movsd	%xmm0, -0x180(%rbp)
    0000110d: 	callq	memcpy@PLT # Offset: 4365
    00001112: 	movl	iterations(%rip), %eax
    00001118: 	movl	$0x2710, iterations(%rip)
    00001122: 	movl	%eax, -0x190(%rbp)
    00001128: 	callq	clock@PLT # Offset: 4392
    0000112d: 	movq	%rax, start_time(%rip)
    00001134: 	movl	iterations(%rip), %eax
    0000113a: 	movl	%eax, -0x178(%rbp)
    00001140: 	testl	%eax, %eax
    00001142: 	jle	.Ltmp3100 # Offset: 4418
    00001148: 	pxor	%xmm4, %xmm4
    0000114c: 	movq	-0x160(%rbp), %r13
    00001153: 	movapd	DATAat0x494f0(%rip), %xmm2
    0000115b: 	movq	%r12, %r14
    0000115e: 	movsd	%xmm4, -0x130(%rbp)
    00001166: 	movl	-0x178(%rbp), %edi
    0000116c: 	movapd	DATAat0x49400(%rip), %xmm4
    00001174: 	xorl	%r15d, %r15d
    00001177: 	movsd	DATAat0x49400(%rip), %xmm3
    0000117f: 	movq	DATAat0x49500(%rip), %xmm5
    00001187: 	pxor	%xmm1, %xmm1
    0000118b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3111:
    00001190: 	leaq	0x7d8(%r14), %rsi
    00001197: 	leaq	0x10(%r13), %rax
    0000119b: 	movl	%edi, %r11d
    0000119e: 	movq	$-0x7d0, %rcx
    000011a5: 	leaq	0x7d0(%r13), %r10
    000011ac: 	nopl	(%rax) # Size: 4
.Ltmp3103:
    000011b0: 	movq	%rsi, %rdx
    000011b3: 	subq	%rax, %rdx
    000011b6: 	cmpq	$0xfa0, %rdx
    000011bd: 	jbe	.Ltmp3101 # Offset: 4541
    000011c3: 	movq	%r13, %r8
    000011c6: 	leaq	-0x8(%rax), %r9
    000011ca: 	leaq	0x7d0(%rax), %rdi
    000011d1: 	xorl	%edx, %edx
    000011d3: 	subq	%rcx, %r8
    000011d6: 	addq	$0xf98, %rax
.Ltmp3102:
    000011dc: 	movupd	(%r9,%rdx), %xmm6
    000011e2: 	movupd	(%r8,%rdx), %xmm0
    000011e8: 	movupd	(%rax,%rdx), %xmm7
    000011ed: 	addpd	%xmm6, %xmm0
    000011f1: 	movupd	(%rdi,%rdx), %xmm6
    000011f6: 	addpd	%xmm6, %xmm0
    000011fa: 	addpd	%xmm7, %xmm0
    000011fe: 	addpd	%xmm1, %xmm0
    00001202: 	mulpd	%xmm4, %xmm0
    00001206: 	movups	%xmm0, (%rsi,%rdx)
    0000120a: 	addq	$0x10, %rdx
    0000120e: 	cmpq	$0x7c0, %rdx
    00001215: 	jne	.Ltmp3102 # Offset: 4629
    00001217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3113:
    00001220: 	subq	$0x7d0, %rcx
    00001227: 	addq	$0x7d0, %rsi
    0000122e: 	movq	%rdi, %rax
    00001231: 	cmpq	$-0x91ff0, %rcx
    00001238: 	jne	.Ltmp3103 # Offset: 4664
    0000123e: 	movsd	-0x130(%rbp), %xmm6
    00001246: 	xorl	%eax, %eax
    00001248: 	movl	%r11d, %esi
    0000124b: 	movsd	%xmm6, -0x148(%rbp)
    00001253: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3104:
    00001258: 	movupd	(%r14,%rax), %xmm7
    0000125e: 	movupd	(%r13,%rax), %xmm6
    00001265: 	addq	$0x10, %rax
    00001269: 	subpd	%xmm7, %xmm6
    0000126d: 	movapd	%xmm6, %xmm0
    00001271: 	movapd	%xmm6, %xmm7
    00001275: 	cmpltpd	%xmm1, %xmm0
    0000127a: 	xorpd	%xmm2, %xmm7
    0000127e: 	andpd	%xmm0, %xmm7
    00001282: 	andnpd	%xmm6, %xmm0
    00001286: 	movsd	-0x148(%rbp), %xmm6
    0000128e: 	orpd	%xmm7, %xmm0
    00001292: 	addsd	%xmm0, %xmm6
    00001296: 	unpckhpd	%xmm0, %xmm0
    0000129a: 	addsd	%xmm6, %xmm0
    0000129e: 	movsd	%xmm0, -0x148(%rbp)
    000012a6: 	cmpq	$0x927c0, %rax
    000012ac: 	jne	.Ltmp3104 # Offset: 4780
    000012ae: 	movsd	-0x130(%rbp), %xmm6
    000012b6: 	xorl	%eax, %eax
    000012b8: 	movsd	%xmm6, -0x140(%rbp)
.Ltmp3106:
    000012c0: 	movsd	(%r13,%rax,8), %xmm0
    000012c7: 	subsd	(%r14,%rax,8), %xmm0
    000012cd: 	movsd	-0x130(%rbp), %xmm7
    000012d5: 	comisd	%xmm0, %xmm7
    000012d9: 	jbe	.Ltmp3105 # Offset: 4825
    000012db: 	xorpd	%xmm5, %xmm0
.Ltmp3105:
    000012df: 	maxsd	-0x140(%rbp), %xmm0
    000012e7: 	addq	$0x1, %rax
    000012eb: 	movsd	%xmm0, -0x140(%rbp)
    000012f3: 	cmpq	$0x124f8, %rax
    000012f9: 	jne	.Ltmp3106 # Offset: 4857
    000012fb: 	movl	%esi, %edi
    000012fd: 	cmpl	$0x1, %r15d
    00001301: 	jle	.Ltmp3107 # Offset: 4865
    00001303: 	movsd	DATAat0x49538(%rip), %xmm0
    0000130b: 	movsd	-0x148(%rbp), %xmm6
    00001313: 	comisd	%xmm6, %xmm0
    00001317: 	ja	.Ltmp3108 # Offset: 4887
    0000131d: 	ucomisd	%xmm6, %xmm6
    00001321: 	jp	.Ltmp3109 # Offset: 4897
    00001327: 	movsd	DATAat0x49540(%rip), %xmm0
    0000132f: 	movsd	-0x140(%rbp), %xmm6
    00001337: 	comisd	%xmm6, %xmm0
    0000133b: 	ja	.Ltmp3108 # Offset: 4923
    0000133d: 	ucomisd	%xmm6, %xmm6
    00001341: 	jp	.Ltmp3109 # Offset: 4929
.Ltmp3107:
    00001347: 	addl	$0x1, %r15d
    0000134b: 	movq	%r14, %rax
    0000134e: 	movq	%r13, %r14
    00001351: 	cmpl	%edi, %r15d
    00001354: 	je	.Ltmp3110 # Offset: 4948
    00001356: 	movq	%rax, %r13
    00001359: 	jmp	.Ltmp3111 # Offset: 4953
    0000135e: 	nop # Size: 2
.Ltmp3101:
    00001360: 	movq	%rcx, %rdx
    00001363: 	movl	$0x7c0, %edi
    00001368: 	leaq	-0x7d0(%r13), %r8
    0000136f: 	negq	%rdx
    00001372: 	subq	%rcx, %rdi
.Ltmp3112:
    00001375: 	movsd	0x8(%r8,%rdx), %xmm0
    0000137c: 	addsd	(%r13,%rdx), %xmm0
    00001383: 	addsd	0x10(%r13,%rdx), %xmm0
    0000138a: 	addsd	0x8(%r10,%rdx), %xmm0
    00001391: 	addsd	-0x130(%rbp), %xmm0
    00001399: 	mulsd	%xmm3, %xmm0
    0000139d: 	movsd	%xmm0, 0x8(%r14,%rdx)
    000013a4: 	addq	$0x8, %rdx
    000013a8: 	cmpq	%rdi, %rdx
    000013ab: 	jne	.Ltmp3112 # Offset: 5035
    000013ad: 	leaq	0x7d0(%rax), %rdi
    000013b4: 	jmp	.Ltmp3113 # Offset: 5044
.Ltmp3108:
    000013b9: 	movl	%r15d, -0x178(%rbp)
    000013c0: 	movq	%r14, %r13
.Ltmp3110:
    000013c3: 	callq	clock@PLT # Offset: 5059
    000013c8: 	movsd	-0x180(%rbp), %xmm4
    000013d0: 	pxor	%xmm0, %xmm0
    000013d4: 	subsd	0x497c8(%r13), %xmm4
    000013dd: 	movq	%rax, end_time(%rip)
    000013e4: 	subq	start_time(%rip), %rax
    000013eb: 	cvtsi2sd	%rax, %xmm0
    000013f0: 	divsd	DATAat0x49520(%rip), %xmm0
    000013f8: 	movsd	%xmm0, -0x188(%rbp)
    00001400: 	movq	%xmm4, %r13
    00001405: 	movsd	-0x148(%rbp), %xmm4
    0000140d: 	ucomisd	%xmm4, %xmm4
    00001411: 	jnp	.Ltmp3114 # Offset: 5137
.Ltmp3125:
    00001417: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    0000141e: 	movq	-0x78(%rbp), %rdx
    00001422: 	movq	-0x80(%rbp), %rsi
    00001426: 	movq	%r15, %rdi
    00001429: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5161
    0000142e: 	movq	%rax, %rdi
    00001431: 	movl	$0x10, %edx
    00001436: 	leaq	DATAat0x493d4(%rip), %rsi
    0000143d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5181
.Ltmp3128:
    00001442: 	movl	$0x4, %edx
    00001447: 	leaq	DATAat0x491b6(%rip), %rsi
    0000144e: 	movq	%r15, %rdi
    00001451: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5201
    00001456: 	movl	-0x178(%rbp), %esi
    0000145c: 	movq	%r15, %rdi
    0000145f: 	callq	_ZNSolsEi@PLT # Offset: 5215
    00001464: 	movq	%rax, %rdi
    00001467: 	movl	$0xb, %edx
    0000146c: 	leaq	DATAat0x491bb(%rip), %rsi
    00001473: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5235
    00001478: 	movl	$0xa, %edx
    0000147d: 	leaq	DATAat0x491c7(%rip), %rsi
    00001484: 	movq	%r15, %rdi
    00001487: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5255
    0000148c: 	movsd	-0x148(%rbp), %xmm0
    00001494: 	movq	%r15, %rdi
    00001497: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5271
    0000149c: 	movl	$0x7, %edx
    000014a1: 	leaq	DATAat0x491d2(%rip), %rsi
    000014a8: 	movq	%rax, %rdi
    000014ab: 	movq	%rax, %r14
    000014ae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5294
    000014b3: 	movsd	-0x140(%rbp), %xmm0
    000014bb: 	movq	%r14, %rdi
    000014be: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5310
    000014c3: 	movl	$0x10, %edx
    000014c8: 	leaq	DATAat0x491da(%rip), %rsi
    000014cf: 	movq	%rax, %rdi
    000014d2: 	movq	%rax, %r14
    000014d5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5333
    000014da: 	movq	%r13, %xmm0
    000014df: 	movq	%r14, %rdi
    000014e2: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5346
    000014e7: 	movl	$0x8, %edx
    000014ec: 	leaq	DATAat0x491eb(%rip), %rsi
    000014f3: 	movq	%rax, %rdi
    000014f6: 	movq	%rax, %r13
    000014f9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5369
    000014fe: 	movsd	-0x188(%rbp), %xmm0
    00001506: 	movq	%r13, %rdi
    00001509: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 5385
    0000150e: 	movq	%rax, %rdi
    00001511: 	movl	$0x2, %edx
    00001516: 	leaq	DATAat0x491f4(%rip), %rsi
    0000151d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5405
    00001522: 	movl	-0x190(%rbp), %eax
    00001528: 	movq	-0x80(%rbp), %rdi
    0000152c: 	movl	%eax, iterations(%rip)
    00001532: 	cmpq	-0x150(%rbp), %rdi
    00001539: 	je	.Ltmp3115 # Offset: 5433
    0000153b: 	movq	-0x70(%rbp), %rax
    0000153f: 	leaq	0x1(%rax), %rsi
    00001543: 	callq	_ZdlPvm@PLT # Offset: 5443
.Ltmp3115:
    00001548: 	movq	-0x168(%rbp), %rsi
    0000154f: 	movq	-0x170(%rbp), %rdi
    00001556: 	leaq	DATAat0x4924a(%rip), %rdx
    0000155d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5469
    00001562: 	movapd	DATAat0x494d0(%rip), %xmm4
    0000156a: 	movq	-0x160(%rbp), %r14
    00001571: 	movq	%rbx, %rcx
    00001574: 	movl	$0xfa, %edx
    00001579: 	movl	$0x12c, %esi
    0000157e: 	movaps	%xmm4, -0x60(%rbp)
    00001582: 	movapd	DATAat0x494e0(%rip), %xmm4
    0000158a: 	movq	%r14, %rdi
    0000158d: 	movaps	%xmm4, -0x50(%rbp)
    00001591: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 5521
    00001596: 	movl	$0x927c0, %edx
    0000159b: 	movq	%r14, %rsi
    0000159e: 	movq	%r12, %rdi
    000015a1: 	movsd	%xmm0, -0x1a0(%rbp)
    000015a9: 	callq	memcpy@PLT # Offset: 5545
    000015ae: 	movl	iterations(%rip), %eax
    000015b4: 	movl	$0x2710, iterations(%rip)
    000015be: 	movl	%eax, -0x1a8(%rbp)
    000015c4: 	callq	clock@PLT # Offset: 5572
    000015c9: 	movq	%rax, start_time(%rip)
    000015d0: 	movl	iterations(%rip), %eax
    000015d6: 	movl	%eax, -0x188(%rbp)
    000015dc: 	testl	%eax, %eax
    000015de: 	jle	.Ltmp3116 # Offset: 5598
    000015e4: 	movq	-0x160(%rbp), %rax
    000015eb: 	movq	%r12, %r13
    000015ee: 	xorl	%r14d, %r14d
    000015f1: 	movq	%r12, -0x198(%rbp)
    000015f8: 	movl	%r14d, -0x148(%rbp)
    000015ff: 	movsd	DATAat0x49400(%rip), %xmm3
    00001607: 	movq	%r13, %r14
    0000160a: 	movq	%rbx, %r13
    0000160d: 	movq	%rax, -0x190(%rbp)
    00001614: 	movq	%rax, %r12
    00001617: 	movl	-0x188(%rbp), %ebx
    0000161d: 	pxor	%xmm4, %xmm4
    00001621: 	movapd	DATAat0x494f0(%rip), %xmm2
    00001629: 	movl	-0x148(%rbp), %eax
    0000162f: 	nop # Size: 1
.Ltmp3124:
    00001630: 	leaq	0x7d8(%r14), %r9
    00001637: 	leaq	0x91ff0(%r12), %rdx
    0000163f: 	movl	$0x1, %esi
    00001644: 	movl	%eax, %edi
    00001646: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3118:
    00001650: 	addl	$0x1, %esi
    00001653: 	leaq	-0x91820(%rdx), %rax
    0000165a: 	movq	%r9, %rcx
.Ltmp3117:
    0000165d: 	movsd	-0x7c8(%rax), %xmm0
    00001665: 	addsd	(%rax), %xmm0
    00001669: 	addq	$0x7d0, %rax
    0000166f: 	addq	$0x7d0, %rcx
    00001676: 	addsd	-0x7c0(%rax), %xmm0
    0000167e: 	addsd	0x8(%rax), %xmm0
    00001683: 	addsd	-0x130(%rbp), %xmm0
    0000168b: 	mulsd	%xmm3, %xmm0
    0000168f: 	movsd	%xmm0, -0x7d0(%rcx)
    00001697: 	cmpq	%rax, %rdx
    0000169a: 	jne	.Ltmp3117 # Offset: 5786
    0000169c: 	addq	$0x8, %r9
    000016a0: 	addq	$0x8, %rdx
    000016a4: 	cmpl	$0xf9, %esi
    000016aa: 	jne	.Ltmp3118 # Offset: 5802
    000016ac: 	movsd	-0x130(%rbp), %xmm5
    000016b4: 	xorl	%eax, %eax
    000016b6: 	movsd	%xmm5, -0x140(%rbp)
    000016be: 	nop # Size: 2
.Ltmp3119:
    000016c0: 	movupd	(%r14,%rax), %xmm5
    000016c6: 	movupd	(%r12,%rax), %xmm1
    000016cc: 	addq	$0x10, %rax
    000016d0: 	subpd	%xmm5, %xmm1
    000016d4: 	movapd	%xmm1, %xmm0
    000016d8: 	movapd	%xmm1, %xmm5
    000016dc: 	cmpltpd	%xmm4, %xmm0
    000016e1: 	xorpd	%xmm2, %xmm5
    000016e5: 	andpd	%xmm0, %xmm5
    000016e9: 	andnpd	%xmm1, %xmm0
    000016ed: 	movsd	-0x140(%rbp), %xmm1
    000016f5: 	orpd	%xmm5, %xmm0
    000016f9: 	addsd	%xmm0, %xmm1
    000016fd: 	unpckhpd	%xmm0, %xmm0
    00001701: 	addsd	%xmm1, %xmm0
    00001705: 	movsd	%xmm0, -0x140(%rbp)
    0000170d: 	cmpq	$0x927c0, %rax
    00001713: 	jne	.Ltmp3119 # Offset: 5907
    00001715: 	movl	%edi, -0x148(%rbp)
    0000171b: 	movl	$0x124f8, %edx
    00001720: 	movq	%r14, %rsi
    00001723: 	movq	%r12, %rdi
    00001726: 	movsd	%xmm3, -0x178(%rbp)
    0000172e: 	movaps	%xmm2, -0x160(%rbp)
    00001735: 	callq	_Z14max_differenceIdET_PKS0_S2_m # Offset: 5941
    0000173a: 	cmpl	$0x1, -0x148(%rbp)
    00001741: 	pxor	%xmm4, %xmm4
    00001745: 	movapd	-0x160(%rbp), %xmm2
    0000174d: 	movsd	-0x178(%rbp), %xmm3
    00001755: 	movsd	%xmm0, -0x180(%rbp)
    0000175d: 	jle	.Ltmp3120 # Offset: 5981
    0000175f: 	movsd	DATAat0x49538(%rip), %xmm6
    00001767: 	movsd	-0x140(%rbp), %xmm5
    0000176f: 	comisd	%xmm5, %xmm6
    00001773: 	ja	.Ltmp3121 # Offset: 6003
    00001779: 	ucomisd	%xmm5, %xmm5
    0000177d: 	jp	.Ltmp3122 # Offset: 6013
    00001783: 	movsd	DATAat0x49540(%rip), %xmm5
    0000178b: 	comisd	%xmm0, %xmm5
    0000178f: 	ja	.Ltmp3121 # Offset: 6031
    00001795: 	ucomisd	%xmm0, %xmm0
    00001799: 	jp	.Ltmp3122 # Offset: 6041
.Ltmp3120:
    0000179f: 	addl	$0x1, -0x148(%rbp)
    000017a6: 	movl	-0x148(%rbp), %edi
    000017ac: 	movq	%r14, %rax
    000017af: 	movq	%r12, %r14
    000017b2: 	cmpl	%ebx, %edi
    000017b4: 	je	.Ltmp3123 # Offset: 6068
    000017ba: 	movq	%rax, %r12
    000017bd: 	movl	%edi, %eax
    000017bf: 	jmp	.Ltmp3124 # Offset: 6079
.Ltmp3114:
    000017c4: 	movsd	-0x140(%rbp), %xmm4
    000017cc: 	ucomisd	%xmm4, %xmm4
    000017d0: 	jp	.Ltmp3125 # Offset: 6096
    000017d6: 	movl	-0x178(%rbp), %eax
    000017dc: 	cmpl	%eax, iterations(%rip)
    000017e2: 	movq	-0x78(%rbp), %rdx
    000017e6: 	movq	-0x80(%rbp), %rsi
    000017ea: 	jg	.Ltmp3126 # Offset: 6122
    000017ec: 	movsd	-0x148(%rbp), %xmm4
    000017f4: 	comisd	DATAat0x49538(%rip), %xmm4
    000017fc: 	jbe	.Ltmp3126 # Offset: 6140
    000017fe: 	movsd	-0x140(%rbp), %xmm4
    00001806: 	comisd	DATAat0x49540(%rip), %xmm4
    0000180e: 	ja	.Ltmp3127 # Offset: 6158
.Ltmp3126:
    00001814: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    0000181b: 	movq	%r15, %rdi
    0000181e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6174
    00001823: 	movq	%rax, %rdi
    00001826: 	movl	$0xa, %edx
    0000182b: 	leaq	DATAat0x491ab(%rip), %rsi
    00001832: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6194
    00001837: 	jmp	.Ltmp3128 # Offset: 6199
.Ltmp3123:
    0000183c: 	movq	-0x190(%rbp), %rax
    00001843: 	movq	%r12, %rdi
    00001846: 	movq	%r13, %rbx
    00001849: 	movq	-0x198(%rbp), %r12
    00001850: 	movq	%rax, -0x160(%rbp)
.Ltmp3196:
    00001857: 	movq	%rdi, -0x178(%rbp)
    0000185e: 	callq	clock@PLT # Offset: 6238
    00001863: 	movq	-0x178(%rbp), %rdi
    0000186a: 	pxor	%xmm0, %xmm0
    0000186e: 	movsd	-0x1a0(%rbp), %xmm4
    00001876: 	movq	%rax, end_time(%rip)
    0000187d: 	subq	start_time(%rip), %rax
    00001884: 	cvtsi2sd	%rax, %xmm0
    00001889: 	subsd	0x497c8(%rdi), %xmm4
    00001891: 	divsd	DATAat0x49520(%rip), %xmm0
    00001899: 	movsd	%xmm0, -0x148(%rbp)
    000018a1: 	movsd	%xmm4, -0x178(%rbp)
    000018a9: 	movsd	-0x140(%rbp), %xmm4
    000018b1: 	ucomisd	%xmm4, %xmm4
    000018b5: 	jp	.Ltmp3129 # Offset: 6325
    000018bb: 	movsd	-0x180(%rbp), %xmm4
    000018c3: 	ucomisd	%xmm4, %xmm4
    000018c7: 	jp	.Ltmp3129 # Offset: 6343
    000018cd: 	movl	-0x188(%rbp), %eax
    000018d3: 	cmpl	%eax, iterations(%rip)
    000018d9: 	movq	-0x78(%rbp), %rdx
    000018dd: 	movq	-0x80(%rbp), %rsi
    000018e1: 	jg	.Ltmp3130 # Offset: 6369
    000018e3: 	movsd	-0x140(%rbp), %xmm4
    000018eb: 	comisd	DATAat0x49538(%rip), %xmm4
    000018f3: 	jbe	.Ltmp3130 # Offset: 6387
    000018f5: 	movsd	-0x180(%rbp), %xmm4
    000018fd: 	comisd	DATAat0x49540(%rip), %xmm4
    00001905: 	ja	.Ltmp3131 # Offset: 6405
.Ltmp3130:
    0000190b: 	movq	%r15, %rdi
    0000190e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6414
    00001913: 	movq	%rax, %rdi
    00001916: 	movl	$0xa, %edx
    0000191b: 	leaq	DATAat0x491ab(%rip), %rsi
    00001922: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6434
.Ltmp3147:
    00001927: 	movl	$0x4, %edx
    0000192c: 	leaq	DATAat0x491b6(%rip), %rsi
    00001933: 	movq	%r15, %rdi
    00001936: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6454
    0000193b: 	movl	-0x188(%rbp), %esi
    00001941: 	movq	%r15, %rdi
    00001944: 	callq	_ZNSolsEi@PLT # Offset: 6468
    00001949: 	movq	%rax, %rdi
    0000194c: 	movl	$0xb, %edx
    00001951: 	leaq	DATAat0x491bb(%rip), %rsi
    00001958: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6488
    0000195d: 	movl	$0xa, %edx
    00001962: 	leaq	DATAat0x491c7(%rip), %rsi
    00001969: 	movq	%r15, %rdi
    0000196c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6508
    00001971: 	movsd	-0x140(%rbp), %xmm0
    00001979: 	movq	%r15, %rdi
    0000197c: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6524
    00001981: 	movl	$0x7, %edx
    00001986: 	leaq	DATAat0x491d2(%rip), %rsi
    0000198d: 	movq	%rax, %rdi
    00001990: 	movq	%rax, %r13
    00001993: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6547
    00001998: 	movsd	-0x180(%rbp), %xmm0
    000019a0: 	movq	%r13, %rdi
    000019a3: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6563
    000019a8: 	movl	$0x10, %edx
    000019ad: 	leaq	DATAat0x491da(%rip), %rsi
    000019b4: 	movq	%rax, %rdi
    000019b7: 	movq	%rax, %r13
    000019ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6586
    000019bf: 	movsd	-0x178(%rbp), %xmm0
    000019c7: 	movq	%r13, %rdi
    000019ca: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6602
    000019cf: 	movl	$0x8, %edx
    000019d4: 	leaq	DATAat0x491eb(%rip), %rsi
    000019db: 	movq	%rax, %rdi
    000019de: 	movq	%rax, %r13
    000019e1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6625
    000019e6: 	movsd	-0x148(%rbp), %xmm0
    000019ee: 	movq	%r13, %rdi
    000019f1: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 6641
    000019f6: 	movq	%rax, %rdi
    000019f9: 	movl	$0x2, %edx
    000019fe: 	leaq	DATAat0x491f4(%rip), %rsi
    00001a05: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6661
    00001a0a: 	movl	-0x1a8(%rbp), %eax
    00001a10: 	movq	-0x80(%rbp), %rdi
    00001a14: 	movl	%eax, iterations(%rip)
    00001a1a: 	cmpq	-0x150(%rbp), %rdi
    00001a21: 	je	.Ltmp3132 # Offset: 6689
    00001a23: 	movq	-0x70(%rbp), %rax
    00001a27: 	leaq	0x1(%rax), %rsi
    00001a2b: 	callq	_ZdlPvm@PLT # Offset: 6699
.Ltmp3132:
    00001a30: 	movq	-0x168(%rbp), %rsi
    00001a37: 	leaq	DATAat0x4925d(%rip), %rdx
    00001a3e: 	movq	%rbx, %rdi
    00001a41: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6721
    00001a46: 	subq	$0x8, %rsp
    00001a4a: 	movq	%rbx, %r9
    00001a4d: 	movl	$0xfa, %r8d
    00001a53: 	movq	%r12, %rsi
    00001a56: 	pushq	$0x1
    00001a58: 	movl	$0xfa, %ecx
    00001a5d: 	movl	$0x12c, %edx
    00001a62: 	movq	-0x160(%rbp), %rdi
    00001a69: 	callq	_Z20convergenceLaplace2DIdd17jacobi2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6761
    00001a6e: 	movq	-0x60(%rbp), %rdi
    00001a72: 	popq	%r14
    00001a74: 	popq	%rax
    00001a75: 	leaq	-0x50(%rbp), %rax
    00001a79: 	movq	%rax, -0x178(%rbp)
    00001a80: 	cmpq	%rax, %rdi
    00001a83: 	je	.Ltmp3133 # Offset: 6787
    00001a85: 	movq	-0x50(%rbp), %rax
    00001a89: 	leaq	0x1(%rax), %rsi
    00001a8d: 	callq	_ZdlPvm@PLT # Offset: 6797
.Ltmp3133:
    00001a92: 	movq	-0x168(%rbp), %rsi
    00001a99: 	leaq	DATAat0x49271(%rip), %rdx
    00001aa0: 	movq	%rbx, %rdi
    00001aa3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6819
    00001aa8: 	subq	$0x8, %rsp
    00001aac: 	movq	%rbx, %r9
    00001aaf: 	movl	$0xfa, %r8d
    00001ab5: 	movq	%r12, %rsi
    00001ab8: 	pushq	$0x1
    00001aba: 	movl	$0xfa, %ecx
    00001abf: 	movl	$0x12c, %edx
    00001ac4: 	movq	-0x160(%rbp), %rdi
    00001acb: 	callq	_Z20convergenceLaplace2DIdd18jacobi2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6859
    00001ad0: 	popq	%r11
    00001ad2: 	movq	-0x60(%rbp), %rdi
    00001ad6: 	popq	%r13
    00001ad8: 	cmpq	-0x178(%rbp), %rdi
    00001adf: 	je	.Ltmp3134 # Offset: 6879
    00001ae1: 	movq	-0x50(%rbp), %rax
    00001ae5: 	leaq	0x1(%rax), %rsi
    00001ae9: 	callq	_ZdlPvm@PLT # Offset: 6889
.Ltmp3134:
    00001aee: 	movq	-0x168(%rbp), %rsi
    00001af5: 	leaq	DATAat0x49286(%rip), %rdx
    00001afc: 	movq	%rbx, %rdi
    00001aff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6911
    00001b04: 	subq	$0x8, %rsp
    00001b08: 	movq	%rbx, %r9
    00001b0b: 	movl	$0xfa, %r8d
    00001b11: 	movq	%r12, %rsi
    00001b14: 	pushq	$0x1
    00001b16: 	movl	$0xfa, %ecx
    00001b1b: 	movl	$0x12c, %edx
    00001b20: 	movq	-0x160(%rbp), %rdi
    00001b27: 	callq	_Z20convergenceLaplace2DIdd18jacobi2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 6951
    00001b2c: 	popq	%r9
    00001b2e: 	movq	-0x60(%rbp), %rdi
    00001b32: 	popq	%r10
    00001b34: 	cmpq	-0x178(%rbp), %rdi
    00001b3b: 	je	.Ltmp3135 # Offset: 6971
    00001b3d: 	movq	-0x50(%rbp), %rax
    00001b41: 	leaq	0x1(%rax), %rsi
    00001b45: 	callq	_ZdlPvm@PLT # Offset: 6981
.Ltmp3135:
    00001b4a: 	movq	-0x168(%rbp), %rsi
    00001b51: 	leaq	DATAat0x4929b(%rip), %rdx
    00001b58: 	movq	%rbx, %rdi
    00001b5b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7003
    00001b60: 	subq	$0x8, %rsp
    00001b64: 	movq	%rbx, %r9
    00001b67: 	movl	$0xfa, %r8d
    00001b6d: 	movq	%r12, %rsi
    00001b70: 	pushq	$0x1
    00001b72: 	movl	$0xfa, %ecx
    00001b77: 	movl	$0x12c, %edx
    00001b7c: 	movq	-0x160(%rbp), %rdi
    00001b83: 	callq	_Z20convergenceLaplace2DIdd17jacobi2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7043
    00001b88: 	popq	%rdi
    00001b89: 	movq	-0x60(%rbp), %rdi
    00001b8d: 	popq	%r8
    00001b8f: 	cmpq	-0x178(%rbp), %rdi
    00001b96: 	je	.Ltmp3136 # Offset: 7062
    00001b98: 	movq	-0x50(%rbp), %rax
    00001b9c: 	leaq	0x1(%rax), %rsi
    00001ba0: 	callq	_ZdlPvm@PLT # Offset: 7072
.Ltmp3136:
    00001ba5: 	movq	-0x168(%rbp), %rsi
    00001bac: 	leaq	DATAat0x492af(%rip), %rdx
    00001bb3: 	movq	%rbx, %rdi
    00001bb6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7094
    00001bbb: 	subq	$0x8, %rsp
    00001bbf: 	movq	%rbx, %r9
    00001bc2: 	movl	$0xfa, %r8d
    00001bc8: 	movq	%r12, %rsi
    00001bcb: 	pushq	$0x1
    00001bcd: 	movl	$0xfa, %ecx
    00001bd2: 	movl	$0x12c, %edx
    00001bd7: 	movq	-0x160(%rbp), %rdi
    00001bde: 	callq	_Z20convergenceLaplace2DIdd18jacobi2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7134
    00001be3: 	popq	%rcx
    00001be4: 	movq	-0x60(%rbp), %rdi
    00001be8: 	popq	%rsi
    00001be9: 	cmpq	-0x178(%rbp), %rdi
    00001bf0: 	je	.Ltmp3137 # Offset: 7152
    00001bf2: 	movq	-0x50(%rbp), %rax
    00001bf6: 	leaq	0x1(%rax), %rsi
    00001bfa: 	callq	_ZdlPvm@PLT # Offset: 7162
.Ltmp3137:
    00001bff: 	movq	-0x168(%rbp), %rsi
    00001c06: 	leaq	DATAat0x492c4(%rip), %rdx
    00001c0d: 	movq	%rbx, %rdi
    00001c10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7184
    00001c15: 	subq	$0x8, %rsp
    00001c19: 	movq	%rbx, %r9
    00001c1c: 	movl	$0xfa, %r8d
    00001c22: 	movq	%r12, %rsi
    00001c25: 	pushq	$0x1
    00001c27: 	movl	$0xfa, %ecx
    00001c2c: 	movl	$0x12c, %edx
    00001c31: 	movq	-0x160(%rbp), %rdi
    00001c38: 	callq	_Z20convergenceLaplace2DIdd18jacobi2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 7224
    00001c3d: 	popq	%rax
    00001c3e: 	movq	-0x60(%rbp), %rdi
    00001c42: 	popq	%rdx
    00001c43: 	cmpq	-0x178(%rbp), %rdi
    00001c4a: 	je	.Ltmp3138 # Offset: 7242
    00001c4c: 	movq	-0x50(%rbp), %rax
    00001c50: 	leaq	0x1(%rax), %rsi
    00001c54: 	callq	_ZdlPvm@PLT # Offset: 7252
.Ltmp3138:
    00001c59: 	movq	-0x168(%rbp), %rsi
    00001c60: 	leaq	DATAat0x492f0(%rip), %rdx
    00001c67: 	movq	%rbx, %rdi
    00001c6a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7274
    00001c6f: 	movq	%rbx, %r9
    00001c72: 	movl	$0x5dc, %ecx
    00001c77: 	movl	$0x7d0, %edx
    00001c7c: 	movq	%r12, %rsi
    00001c7f: 	movq	-0x160(%rbp), %rdi
    00001c86: 	movl	$0x5dc, %r8d
    00001c8c: 	callq	_Z13testLaplace2DIdd19jacobi_sor2D_simpleIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7308
    00001c91: 	movq	-0x60(%rbp), %rdi
    00001c95: 	cmpq	-0x178(%rbp), %rdi
    00001c9c: 	je	.Ltmp3139 # Offset: 7324
    00001c9e: 	movq	-0x50(%rbp), %rax
    00001ca2: 	leaq	0x1(%rax), %rsi
    00001ca6: 	callq	_ZdlPvm@PLT # Offset: 7334
.Ltmp3139:
    00001cab: 	movq	-0x168(%rbp), %rsi
    00001cb2: 	leaq	DATAat0x49306(%rip), %rdx
    00001cb9: 	movq	%rbx, %rdi
    00001cbc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7356
    00001cc1: 	movq	%rbx, %r9
    00001cc4: 	movl	$0x5dc, %ecx
    00001cc9: 	movl	$0x7d0, %edx
    00001cce: 	movq	%r12, %rsi
    00001cd1: 	movq	-0x160(%rbp), %rdi
    00001cd8: 	movl	$0x5dc, %r8d
    00001cde: 	callq	_Z13testLaplace2DIdd20jacobi_sor2D_swappedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7390
    00001ce3: 	movq	-0x60(%rbp), %rdi
    00001ce7: 	cmpq	-0x178(%rbp), %rdi
    00001cee: 	je	.Ltmp3140 # Offset: 7406
    00001cf0: 	movq	-0x50(%rbp), %rax
    00001cf4: 	leaq	0x1(%rax), %rsi
    00001cf8: 	callq	_ZdlPvm@PLT # Offset: 7416
.Ltmp3140:
    00001cfd: 	movq	-0x168(%rbp), %rsi
    00001d04: 	movq	-0x170(%rbp), %rdi
    00001d0b: 	leaq	DATAat0x4931d(%rip), %rdx
    00001d12: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7442
    00001d17: 	movapd	DATAat0x494d0(%rip), %xmm4
    00001d1f: 	movq	-0x160(%rbp), %r14
    00001d26: 	movq	%rbx, %rcx
    00001d29: 	movl	$0x5dc, %edx
    00001d2e: 	movl	$0x7d0, %esi
    00001d33: 	movaps	%xmm4, -0x60(%rbp)
    00001d37: 	movapd	DATAat0x494e0(%rip), %xmm4
    00001d3f: 	movq	%r14, %rdi
    00001d42: 	movaps	%xmm4, -0x50(%rbp)
    00001d46: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 7494
    00001d4b: 	movq	%r14, %rsi
    00001d4e: 	movq	%r12, %rdi
    00001d51: 	movl	$0x16e3600, %edx
    00001d56: 	callq	memcpy@PLT # Offset: 7510
    00001d5b: 	callq	clock@PLT # Offset: 7515
    00001d60: 	movl	iterations(%rip), %ecx
    00001d66: 	movq	%r14, %rsi
    00001d69: 	movq	%r12, %rdi
    00001d6c: 	movq	%rax, start_time(%rip)
    00001d73: 	movq	%r14, %rax
    00001d76: 	xorl	%r14d, %r14d
    00001d79: 	testl	%ecx, %ecx
    00001d7b: 	jle	.Ltmp3141 # Offset: 7547
    00001d81: 	movq	%rax, -0x148(%rbp)
    00001d88: 	movapd	DATAat0x49400(%rip), %xmm6
    00001d90: 	pxor	%xmm4, %xmm4
    00001d94: 	movapd	DATAat0x49410(%rip), %xmm5
    00001d9c: 	movsd	DATAat0x49400(%rip), %xmm3
    00001da4: 	movq	%rbx, -0x180(%rbp)
    00001dab: 	movl	%ecx, %ebx
    00001dad: 	movsd	DATAat0x49410(%rip), %xmm2
.Ltmp3146:
    00001db5: 	leaq	0x16dd828(%rsi), %rax
    00001dbc: 	leaq	0x16e0708(%rdi), %rcx
    00001dc3: 	movq	$-0x16dd840, %r8
    00001dca: 	leaq	0x2ee0(%rsi), %r9
    00001dd1: 	nopl	(%rax) # Size: 7
.Ltmp3144:
    00001dd8: 	leaq	0x8(%rcx), %rdx
    00001ddc: 	subq	%rax, %rdx
    00001ddf: 	cmpq	$0x5dc0, %rdx
    00001de6: 	jbe	.Ltmp3142 # Offset: 7654
    00001dec: 	leaq	0x2ed8(%rax), %rdx
    00001df3: 	leaq	0x2ee8(%rax), %r11
    00001dfa: 	movq	%rdx, %r13
    00001dfd: 	leaq	0x5dc0(%rax), %r10
    00001e04: 	xorl	%edx, %edx
.Ltmp3143:
    00001e06: 	movupd	(%r13,%rdx), %xmm7
    00001e0d: 	movupd	(%rcx,%rdx), %xmm1
    00001e12: 	movapd	%xmm7, %xmm0
    00001e16: 	movaps	%xmm7, -0x140(%rbp)
    00001e1d: 	shufpd	$0x1, %xmm1, %xmm1
    00001e22: 	shufpd	$0x1, %xmm7, %xmm0
    00001e27: 	movupd	(%rax,%rdx), %xmm7
    00001e2c: 	shufpd	$0x1, %xmm7, %xmm7
    00001e31: 	addpd	%xmm7, %xmm0
    00001e35: 	movupd	(%r11,%rdx), %xmm7
    00001e3b: 	shufpd	$0x1, %xmm7, %xmm7
    00001e40: 	addpd	%xmm7, %xmm0
    00001e44: 	movupd	(%r10,%rdx), %xmm7
    00001e4a: 	shufpd	$0x1, %xmm7, %xmm7
    00001e4f: 	addpd	%xmm7, %xmm0
    00001e53: 	addpd	%xmm4, %xmm0
    00001e57: 	mulpd	%xmm6, %xmm0
    00001e5b: 	subpd	%xmm1, %xmm0
    00001e5f: 	mulpd	%xmm5, %xmm0
    00001e63: 	addpd	%xmm1, %xmm0
    00001e67: 	shufpd	$0x1, %xmm0, %xmm0
    00001e6c: 	movups	%xmm0, (%rcx,%rdx)
    00001e70: 	subq	$0x10, %rdx
    00001e74: 	cmpq	$-0x2ed0, %rdx
    00001e7b: 	jne	.Ltmp3143 # Offset: 7803
    00001e7d: 	nopl	(%rax) # Size: 3
.Ltmp3148:
    00001e80: 	subq	$0x2ee0, %rax
    00001e86: 	subq	$0x2ee0, %rcx
    00001e8d: 	addq	$0x2ee0, %r8
    00001e94: 	jne	.Ltmp3144 # Offset: 7828
    00001e9a: 	addl	$0x1, %r14d
    00001e9e: 	movq	%rdi, %rax
    00001ea1: 	movq	%rsi, %rdi
    00001ea4: 	cmpl	%r14d, %ebx
    00001ea7: 	je	.Ltmp3145 # Offset: 7847
    00001ead: 	movq	%rax, %rsi
    00001eb0: 	jmp	.Ltmp3146 # Offset: 7856
.Ltmp3122:
    00001eb5: 	movq	-0x190(%rbp), %rax
    00001ebc: 	movq	%r13, %rbx
    00001ebf: 	movq	%r14, %r13
    00001ec2: 	movl	-0x148(%rbp), %r14d
    00001ec9: 	movq	-0x198(%rbp), %r12
    00001ed0: 	movq	%rax, -0x160(%rbp)
    00001ed7: 	callq	clock@PLT # Offset: 7895
    00001edc: 	movl	%r14d, -0x188(%rbp)
    00001ee3: 	pxor	%xmm0, %xmm0
    00001ee7: 	movsd	-0x1a0(%rbp), %xmm4
    00001eef: 	subsd	0x497c8(%r13), %xmm4
    00001ef8: 	movq	%rax, end_time(%rip)
    00001eff: 	subq	start_time(%rip), %rax
    00001f06: 	cvtsi2sd	%rax, %xmm0
    00001f0b: 	divsd	DATAat0x49520(%rip), %xmm0
    00001f13: 	movsd	%xmm0, -0x148(%rbp)
    00001f1b: 	movsd	%xmm4, -0x178(%rbp)
.Ltmp3129:
    00001f23: 	movq	-0x78(%rbp), %rdx
    00001f27: 	movq	-0x80(%rbp), %rsi
    00001f2b: 	movq	%r15, %rdi
    00001f2e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7982
    00001f33: 	movq	%rax, %rdi
    00001f36: 	movl	$0x10, %edx
    00001f3b: 	leaq	DATAat0x493d4(%rip), %rsi
    00001f42: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8002
    00001f47: 	jmp	.Ltmp3147 # Offset: 8007
    00001f4c: 	nopl	(%rax) # Size: 4
.Ltmp3142:
    00001f50: 	movq	%r8, %rdx
    00001f53: 	movq	$-0x2ed0, %r10
    00001f5a: 	leaq	-0x2ee0(%rsi), %r11
    00001f61: 	negq	%rdx
    00001f64: 	subq	%r8, %r10
.Ltmp3149:
    00001f67: 	movsd	0x2ed0(%r11,%rdx), %xmm1
    00001f71: 	addsd	0x2ec8(%rsi,%rdx), %xmm1
    00001f7a: 	movsd	0x2ed8(%rsi,%rdx), %xmm0
    00001f83: 	movsd	0x2ed0(%rdi,%rdx), %xmm7
    00001f8c: 	addsd	%xmm1, %xmm0
    00001f90: 	addsd	0x2ed0(%r9,%rdx), %xmm0
    00001f9a: 	addsd	-0x130(%rbp), %xmm0
    00001fa2: 	mulsd	%xmm3, %xmm0
    00001fa6: 	subsd	%xmm7, %xmm0
    00001faa: 	mulsd	%xmm2, %xmm0
    00001fae: 	addsd	%xmm7, %xmm0
    00001fb2: 	movsd	%xmm0, 0x2ed0(%rdi,%rdx)
    00001fbb: 	subq	$0x8, %rdx
    00001fbf: 	cmpq	%r10, %rdx
    00001fc2: 	je	.Ltmp3148 # Offset: 8130
    00001fc8: 	jmp	.Ltmp3149 # Offset: 8136
.Ltmp3145:
    00001fca: 	movq	-0x148(%rbp), %rax
    00001fd1: 	movq	-0x180(%rbp), %rbx
    00001fd8: 	movq	%rax, -0x160(%rbp)
.Ltmp3141:
    00001fdf: 	movq	-0x170(%rbp), %rsi
    00001fe6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001fed: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8173
    00001ff2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ff9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002000: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002007: 	je	.Ltmp3150 # Offset: 8199
.Ltmp3195:
    0000200d: 	movq	-0x20(%rax), %r13
    00002011: 	callq	clock@PLT # Offset: 8209
    00002016: 	pxor	%xmm0, %xmm0
    0000201a: 	movq	%rax, end_time(%rip)
    00002021: 	movq	%r13, %rdi
    00002024: 	subq	start_time(%rip), %rax
    0000202b: 	cvtsi2sd	%rax, %xmm0
    00002030: 	divsd	DATAat0x49520(%rip), %xmm0
    00002038: 	callq	_Z13record_resultdPKc # Offset: 8248
    0000203d: 	movq	-0x80(%rbp), %rdi
    00002041: 	cmpq	-0x150(%rbp), %rdi
    00002048: 	je	.Ltmp3151 # Offset: 8264
    0000204a: 	movq	-0x70(%rbp), %rax
    0000204e: 	leaq	0x1(%rax), %rsi
    00002052: 	callq	_ZdlPvm@PLT # Offset: 8274
.Ltmp3151:
    00002057: 	movq	-0x168(%rbp), %rsi
    0000205e: 	movq	-0x170(%rbp), %rdi
    00002065: 	leaq	DATAat0x49335(%rip), %rdx
    0000206c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8300
    00002071: 	movapd	DATAat0x494d0(%rip), %xmm4
    00002079: 	movq	-0x160(%rbp), %r14
    00002080: 	movq	%rbx, %rcx
    00002083: 	movl	$0x5dc, %edx
    00002088: 	movl	$0x7d0, %esi
    0000208d: 	movaps	%xmm4, -0x60(%rbp)
    00002091: 	movapd	DATAat0x494e0(%rip), %xmm4
    00002099: 	movq	%r14, %rdi
    0000209c: 	movaps	%xmm4, -0x50(%rbp)
    000020a0: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 8352
    000020a5: 	movq	%r14, %rsi
    000020a8: 	movq	%r12, %rdi
    000020ab: 	movl	$0x16e3600, %edx
    000020b0: 	callq	memcpy@PLT # Offset: 8368
    000020b5: 	callq	clock@PLT # Offset: 8373
    000020ba: 	movl	iterations(%rip), %ecx
    000020c0: 	movq	%r14, %rsi
    000020c3: 	movq	%r12, %rdi
    000020c6: 	movq	%rax, start_time(%rip)
    000020cd: 	movq	%r14, %rax
    000020d0: 	xorl	%r14d, %r14d
    000020d3: 	testl	%ecx, %ecx
    000020d5: 	jle	.Ltmp3152 # Offset: 8405
    000020db: 	movq	%rax, -0x148(%rbp)
    000020e2: 	movapd	DATAat0x49400(%rip), %xmm6
    000020ea: 	pxor	%xmm4, %xmm4
    000020ee: 	movapd	DATAat0x49410(%rip), %xmm5
    000020f6: 	movsd	DATAat0x49400(%rip), %xmm3
    000020fe: 	movq	%rbx, -0x180(%rbp)
    00002105: 	movl	%ecx, %ebx
    00002107: 	movsd	DATAat0x49410(%rip), %xmm2
.Ltmp3157:
    0000210f: 	leaq	0x2ec8(%rsi), %rax
    00002116: 	leaq	0x5da8(%rdi), %rcx
    0000211d: 	movq	$-0x2ee0, %r8
    00002124: 	leaq	0x2ee0(%rsi), %r9
    0000212b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3155:
    00002130: 	leaq	0x8(%rcx), %rdx
    00002134: 	subq	%rax, %rdx
    00002137: 	cmpq	$0x5dc0, %rdx
    0000213e: 	jbe	.Ltmp3153 # Offset: 8510
    00002144: 	leaq	0x2ed8(%rax), %rdx
    0000214b: 	leaq	0x2ee8(%rax), %r11
    00002152: 	movq	%rdx, %r13
    00002155: 	leaq	0x5dc0(%rax), %r10
    0000215c: 	xorl	%edx, %edx
.Ltmp3154:
    0000215e: 	movupd	(%r13,%rdx), %xmm7
    00002165: 	movupd	(%rcx,%rdx), %xmm1
    0000216a: 	movapd	%xmm7, %xmm0
    0000216e: 	movaps	%xmm7, -0x140(%rbp)
    00002175: 	shufpd	$0x1, %xmm1, %xmm1
    0000217a: 	shufpd	$0x1, %xmm7, %xmm0
    0000217f: 	movupd	(%rax,%rdx), %xmm7
    00002184: 	shufpd	$0x1, %xmm7, %xmm7
    00002189: 	addpd	%xmm7, %xmm0
    0000218d: 	movupd	(%r11,%rdx), %xmm7
    00002193: 	shufpd	$0x1, %xmm7, %xmm7
    00002198: 	addpd	%xmm7, %xmm0
    0000219c: 	movupd	(%r10,%rdx), %xmm7
    000021a2: 	shufpd	$0x1, %xmm7, %xmm7
    000021a7: 	addpd	%xmm7, %xmm0
    000021ab: 	addpd	%xmm4, %xmm0
    000021af: 	mulpd	%xmm6, %xmm0
    000021b3: 	subpd	%xmm1, %xmm0
    000021b7: 	mulpd	%xmm5, %xmm0
    000021bb: 	addpd	%xmm1, %xmm0
    000021bf: 	shufpd	$0x1, %xmm0, %xmm0
    000021c4: 	movups	%xmm0, (%rcx,%rdx)
    000021c8: 	subq	$0x10, %rdx
    000021cc: 	cmpq	$-0x2ed0, %rdx
    000021d3: 	jne	.Ltmp3154 # Offset: 8659
    000021d5: 	nopl	(%rax) # Size: 3
.Ltmp3158:
    000021d8: 	subq	$0x2ee0, %r8
    000021df: 	addq	$0x2ee0, %rax
    000021e5: 	addq	$0x2ee0, %rcx
    000021ec: 	cmpq	$-0x16e0720, %r8
    000021f3: 	jne	.Ltmp3155 # Offset: 8691
    000021f9: 	addl	$0x1, %r14d
    000021fd: 	movq	%rdi, %rax
    00002200: 	movq	%rsi, %rdi
    00002203: 	cmpl	%ebx, %r14d
    00002206: 	je	.Ltmp3156 # Offset: 8710
    0000220c: 	movq	%rax, %rsi
    0000220f: 	jmp	.Ltmp3157 # Offset: 8719
    00002214: 	nopl	(%rax) # Size: 4
.Ltmp3153:
    00002218: 	movq	%r8, %rdx
    0000221b: 	movq	$-0x2ed0, %r10
    00002222: 	leaq	-0x2ee0(%rsi), %r11
    00002229: 	negq	%rdx
    0000222c: 	subq	%r8, %r10
.Ltmp3159:
    0000222f: 	movsd	0x2ed0(%r11,%rdx), %xmm1
    00002239: 	addsd	0x2ec8(%rsi,%rdx), %xmm1
    00002242: 	movsd	0x2ed8(%rsi,%rdx), %xmm0
    0000224b: 	movsd	0x2ed0(%rdi,%rdx), %xmm7
    00002254: 	addsd	%xmm1, %xmm0
    00002258: 	addsd	0x2ed0(%r9,%rdx), %xmm0
    00002262: 	addsd	-0x130(%rbp), %xmm0
    0000226a: 	mulsd	%xmm3, %xmm0
    0000226e: 	subsd	%xmm7, %xmm0
    00002272: 	mulsd	%xmm2, %xmm0
    00002276: 	addsd	%xmm7, %xmm0
    0000227a: 	movsd	%xmm0, 0x2ed0(%rdi,%rdx)
    00002283: 	subq	$0x8, %rdx
    00002287: 	cmpq	%rdx, %r10
    0000228a: 	je	.Ltmp3158 # Offset: 8842
    00002290: 	jmp	.Ltmp3159 # Offset: 8848
.Ltmp3156:
    00002292: 	movq	-0x148(%rbp), %rax
    00002299: 	movq	-0x180(%rbp), %rbx
    000022a0: 	movq	%rax, -0x160(%rbp)
.Ltmp3152:
    000022a7: 	movq	-0x170(%rbp), %rsi
    000022ae: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000022b5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8885
    000022ba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000022c1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000022c8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000022cf: 	je	.Ltmp3160 # Offset: 8911
.Ltmp3194:
    000022d5: 	movq	-0x20(%rax), %r13
    000022d9: 	callq	clock@PLT # Offset: 8921
    000022de: 	pxor	%xmm0, %xmm0
    000022e2: 	movq	%rax, end_time(%rip)
    000022e9: 	movq	%r13, %rdi
    000022ec: 	subq	start_time(%rip), %rax
    000022f3: 	cvtsi2sd	%rax, %xmm0
    000022f8: 	divsd	DATAat0x49520(%rip), %xmm0
    00002300: 	callq	_Z13record_resultdPKc # Offset: 8960
    00002305: 	movq	-0x80(%rbp), %rdi
    00002309: 	cmpq	-0x150(%rbp), %rdi
    00002310: 	je	.Ltmp3161 # Offset: 8976
    00002312: 	movq	-0x70(%rbp), %rax
    00002316: 	leaq	0x1(%rax), %rsi
    0000231a: 	callq	_ZdlPvm@PLT # Offset: 8986
.Ltmp3161:
    0000231f: 	movq	-0x168(%rbp), %rsi
    00002326: 	leaq	DATAat0x4934e(%rip), %rdx
    0000232d: 	movq	%rbx, %rdi
    00002330: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9008
    00002335: 	movq	%rbx, %r9
    00002338: 	movl	$0x5dc, %ecx
    0000233d: 	movl	$0x7d0, %edx
    00002342: 	movq	%r12, %rsi
    00002345: 	movq	-0x160(%rbp), %rdi
    0000234c: 	movl	$0x5dc, %r8d
    00002352: 	callq	_Z13testLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9042
    00002357: 	movq	-0x60(%rbp), %rdi
    0000235b: 	cmpq	-0x178(%rbp), %rdi
    00002362: 	je	.Ltmp3162 # Offset: 9058
    00002364: 	movq	-0x50(%rbp), %rax
    00002368: 	leaq	0x1(%rax), %rsi
    0000236c: 	callq	_ZdlPvm@PLT # Offset: 9068
.Ltmp3162:
    00002371: 	movq	-0x168(%rbp), %rsi
    00002378: 	movq	-0x170(%rbp), %rdi
    0000237f: 	leaq	DATAat0x49367(%rip), %rdx
    00002386: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9094
    0000238b: 	movq	%rbx, %rcx
    0000238e: 	movl	$0x5dc, %edx
    00002393: 	movl	$0x7d0, %esi
    00002398: 	xorl	%r14d, %r14d
    0000239b: 	movapd	DATAat0x494d0(%rip), %xmm4
    000023a3: 	movq	-0x160(%rbp), %r13
    000023aa: 	movaps	%xmm4, -0x60(%rbp)
    000023ae: 	movapd	DATAat0x494e0(%rip), %xmm4
    000023b6: 	movq	%r13, %rdi
    000023b9: 	movaps	%xmm4, -0x50(%rbp)
    000023bd: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 9149
    000023c2: 	movq	%r12, %rdi
    000023c5: 	movl	$0x16e3600, %edx
    000023ca: 	movq	%r13, %rsi
    000023cd: 	callq	memcpy@PLT # Offset: 9165
    000023d2: 	callq	clock@PLT # Offset: 9170
    000023d7: 	movl	iterations(%rip), %edi
    000023dd: 	movq	%rax, start_time(%rip)
    000023e4: 	movq	%r12, %rax
    000023e7: 	movl	%edi, %ecx
    000023e9: 	testl	%edi, %edi
    000023eb: 	jle	.Ltmp3163 # Offset: 9195
    000023ed: 	movq	-0x160(%rbp), %rdi
    000023f4: 	movq	%r12, -0x180(%rbp)
    000023fb: 	movl	%r14d, %r12d
    000023fe: 	movq	%rbx, %r14
    00002401: 	movl	%ecx, -0x140(%rbp)
    00002407: 	movq	%rax, %rbx
    0000240a: 	movq	%rdi, -0x148(%rbp)
    00002411: 	jmp	.Ltmp3164 # Offset: 9233
.Ltmp3165:
    00002413: 	movq	%rdx, %r13
.Ltmp3164:
    00002416: 	movl	$0x7d0, %edx
    0000241b: 	movq	%rbx, %rsi
    0000241e: 	movl	$0x5dc, %ecx
    00002423: 	movq	%r13, %rdi
    00002426: 	movl	$0x5dc, %r8d
    0000242c: 	addl	$0x1, %r12d
    00002430: 	callq	"_ZN21jacobi_sor2D_unrolledIddEclEPdS1_iiii.isra.0/1" # Offset: 9264
    00002435: 	movq	%rbx, %rdx
    00002438: 	movq	%r13, %rbx
    0000243b: 	cmpl	%r12d, -0x140(%rbp)
    00002442: 	jne	.Ltmp3165 # Offset: 9282
    00002444: 	movq	-0x148(%rbp), %rax
    0000244b: 	movq	-0x180(%rbp), %r12
    00002452: 	movq	%r14, %rbx
    00002455: 	movq	%rax, -0x160(%rbp)
.Ltmp3163:
    0000245c: 	movq	-0x170(%rbp), %rsi
    00002463: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000246a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9322
    0000246f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002476: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000247d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002484: 	je	.Ltmp3166 # Offset: 9348
.Ltmp3193:
    0000248a: 	movq	-0x20(%rax), %r13
    0000248e: 	callq	clock@PLT # Offset: 9358
    00002493: 	pxor	%xmm0, %xmm0
    00002497: 	movq	%rax, end_time(%rip)
    0000249e: 	movq	%r13, %rdi
    000024a1: 	subq	start_time(%rip), %rax
    000024a8: 	cvtsi2sd	%rax, %xmm0
    000024ad: 	divsd	DATAat0x49520(%rip), %xmm0
    000024b5: 	callq	_Z13record_resultdPKc # Offset: 9397
    000024ba: 	movq	-0x80(%rbp), %rdi
    000024be: 	cmpq	-0x150(%rbp), %rdi
    000024c5: 	je	.Ltmp3167 # Offset: 9413
    000024c7: 	movq	-0x70(%rbp), %rax
    000024cb: 	leaq	0x1(%rax), %rsi
    000024cf: 	callq	_ZdlPvm@PLT # Offset: 9423
.Ltmp3167:
    000024d4: 	movq	-0x168(%rbp), %rsi
    000024db: 	movq	-0x170(%rbp), %rdi
    000024e2: 	leaq	DATAat0x4937f(%rip), %rdx
    000024e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9449
    000024ee: 	movq	%rbx, %rcx
    000024f1: 	movl	$0x5dc, %edx
    000024f6: 	movl	$0x7d0, %esi
    000024fb: 	xorl	%r14d, %r14d
    000024fe: 	movapd	DATAat0x494d0(%rip), %xmm4
    00002506: 	movq	-0x160(%rbp), %r13
    0000250d: 	movaps	%xmm4, -0x60(%rbp)
    00002511: 	movapd	DATAat0x494e0(%rip), %xmm4
    00002519: 	movq	%r13, %rdi
    0000251c: 	movaps	%xmm4, -0x50(%rbp)
    00002520: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 9504
    00002525: 	movq	%r12, %rdi
    00002528: 	movl	$0x16e3600, %edx
    0000252d: 	movq	%r13, %rsi
    00002530: 	callq	memcpy@PLT # Offset: 9520
    00002535: 	callq	clock@PLT # Offset: 9525
    0000253a: 	movl	iterations(%rip), %edi
    00002540: 	movq	%rax, start_time(%rip)
    00002547: 	movl	%edi, %ecx
    00002549: 	testl	%edi, %edi
    0000254b: 	jle	.Ltmp3168 # Offset: 9547
    0000254d: 	movq	-0x160(%rbp), %rdi
    00002554: 	movq	%r13, -0x140(%rbp)
    0000255b: 	movq	%rbx, %r13
    0000255e: 	movl	%ecx, %ebx
    00002560: 	movq	%r12, -0x180(%rbp)
    00002567: 	movq	%rdi, -0x148(%rbp)
    0000256e: 	movq	-0x140(%rbp), %rdi
    00002575: 	jmp	.Ltmp3169 # Offset: 9589
.Ltmp3170:
    00002577: 	movq	%rdx, -0x140(%rbp)
    0000257e: 	movq	%rdx, %rdi
.Ltmp3169:
    00002581: 	movl	$0x7d0, %edx
    00002586: 	movq	%r12, %rsi
    00002589: 	movl	$0x5dc, %r8d
    0000258f: 	movl	$0x5dc, %ecx
    00002594: 	callq	"_ZN22jacobi_sor2D_unrolled2IddEclEPdS1_iiii.isra.0/1" # Offset: 9620
    00002599: 	addl	$0x1, %r14d
    0000259d: 	movq	%r12, %rdx
    000025a0: 	movq	-0x140(%rbp), %r12
    000025a7: 	cmpl	%ebx, %r14d
    000025aa: 	jne	.Ltmp3170 # Offset: 9642
    000025ac: 	movq	-0x148(%rbp), %rax
    000025b3: 	movq	-0x180(%rbp), %r12
    000025ba: 	movq	%r13, %rbx
    000025bd: 	movq	%rax, -0x160(%rbp)
.Ltmp3168:
    000025c4: 	movq	-0x170(%rbp), %rsi
    000025cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000025d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9682
    000025d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000025de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000025e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000025ec: 	je	.Ltmp3171 # Offset: 9708
.Ltmp3192:
    000025f2: 	movq	-0x20(%rax), %r13
    000025f6: 	callq	clock@PLT # Offset: 9718
    000025fb: 	pxor	%xmm0, %xmm0
    000025ff: 	movq	%rax, end_time(%rip)
    00002606: 	movq	%r13, %rdi
    00002609: 	subq	start_time(%rip), %rax
    00002610: 	cvtsi2sd	%rax, %xmm0
    00002615: 	divsd	DATAat0x49520(%rip), %xmm0
    0000261d: 	callq	_Z13record_resultdPKc # Offset: 9757
    00002622: 	movq	-0x80(%rbp), %rdi
    00002626: 	cmpq	-0x150(%rbp), %rdi
    0000262d: 	je	.Ltmp3172 # Offset: 9773
    0000262f: 	movq	-0x70(%rbp), %rax
    00002633: 	leaq	0x1(%rax), %rsi
    00002637: 	callq	_ZdlPvm@PLT # Offset: 9783
.Ltmp3172:
    0000263c: 	movq	-0x168(%rbp), %rsi
    00002643: 	movq	-0x170(%rbp), %rdi
    0000264a: 	leaq	DATAat0x49398(%rip), %rdx
    00002651: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9809
    00002656: 	movq	%rbx, %rcx
    00002659: 	movl	$0x5dc, %edx
    0000265e: 	movl	$0x7d0, %esi
    00002663: 	xorl	%r14d, %r14d
    00002666: 	movapd	DATAat0x494d0(%rip), %xmm4
    0000266e: 	movq	-0x160(%rbp), %r13
    00002675: 	movaps	%xmm4, -0x60(%rbp)
    00002679: 	movapd	DATAat0x494e0(%rip), %xmm4
    00002681: 	movq	%r13, %rdi
    00002684: 	movaps	%xmm4, -0x50(%rbp)
    00002688: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 9864
    0000268d: 	movq	%r12, %rdi
    00002690: 	movl	$0x16e3600, %edx
    00002695: 	movq	%r13, %rsi
    00002698: 	callq	memcpy@PLT # Offset: 9880
    0000269d: 	callq	clock@PLT # Offset: 9885
    000026a2: 	movl	iterations(%rip), %edi
    000026a8: 	movq	%rax, start_time(%rip)
    000026af: 	movq	%r12, %rax
    000026b2: 	movl	%edi, %ecx
    000026b4: 	testl	%edi, %edi
    000026b6: 	jle	.Ltmp3173 # Offset: 9910
    000026b8: 	movq	-0x160(%rbp), %rdi
    000026bf: 	movq	%r12, -0x180(%rbp)
    000026c6: 	movl	%r14d, %r12d
    000026c9: 	movq	%rbx, %r14
    000026cc: 	movl	%ecx, -0x140(%rbp)
    000026d2: 	movq	%rax, %rbx
    000026d5: 	movq	%rdi, -0x148(%rbp)
    000026dc: 	jmp	.Ltmp3174 # Offset: 9948
.Ltmp3175:
    000026de: 	movq	%rdx, %r13
.Ltmp3174:
    000026e1: 	movl	$0x7d0, %edx
    000026e6: 	movq	%rbx, %rsi
    000026e9: 	movl	$0x5dc, %ecx
    000026ee: 	movq	%r13, %rdi
    000026f1: 	movl	$0x5dc, %r8d
    000026f7: 	addl	$0x1, %r12d
    000026fb: 	callq	"_ZN22jacobi_sor2D_unrolled3IddEclEPdS1_iiii.isra.0/1" # Offset: 9979
    00002700: 	movq	%rbx, %rdx
    00002703: 	movq	%r13, %rbx
    00002706: 	cmpl	-0x140(%rbp), %r12d
    0000270d: 	jne	.Ltmp3175 # Offset: 9997
    0000270f: 	movq	-0x148(%rbp), %rax
    00002716: 	movq	-0x180(%rbp), %r12
    0000271d: 	movq	%r14, %rbx
    00002720: 	movq	%rax, -0x160(%rbp)
.Ltmp3173:
    00002727: 	movq	-0x170(%rbp), %rsi
    0000272e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002735: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10037
    0000273a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002741: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002748: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000274f: 	je	.Ltmp3176 # Offset: 10063
.Ltmp3227:
    00002755: 	movq	-0x20(%rax), %r13
    00002759: 	callq	clock@PLT # Offset: 10073
    0000275e: 	pxor	%xmm0, %xmm0
    00002762: 	movq	%rax, end_time(%rip)
    00002769: 	movq	%r13, %rdi
    0000276c: 	subq	start_time(%rip), %rax
    00002773: 	cvtsi2sd	%rax, %xmm0
    00002778: 	divsd	DATAat0x49520(%rip), %xmm0
    00002780: 	callq	_Z13record_resultdPKc # Offset: 10112
    00002785: 	movq	-0x80(%rbp), %rdi
    00002789: 	cmpq	-0x150(%rbp), %rdi
    00002790: 	je	.Ltmp3177 # Offset: 10128
    00002792: 	movq	-0x70(%rbp), %rax
    00002796: 	leaq	0x1(%rax), %rsi
    0000279a: 	callq	_ZdlPvm@PLT # Offset: 10138
.Ltmp3177:
    0000279f: 	movq	-0x168(%rbp), %r14
    000027a6: 	leaq	-0xa0(%rbp), %rdi
    000027ad: 	leaq	DATAat0x493b1(%rip), %rdx
    000027b4: 	movq	%r14, %rsi
    000027b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10167
    000027bc: 	movl	iterations(%rip), %edx
    000027c2: 	xorl	%r8d, %r8d
    000027c5: 	xorl	%ecx, %ecx
    000027c7: 	movl	$0x2dc6c0, %esi
    000027cc: 	movq	-0xa0(%rbp), %rdi
    000027d3: 	callq	_Z9summarizePKciiii # Offset: 10195
    000027d8: 	movq	-0x170(%rbp), %rdi
    000027df: 	leaq	DATAat0x492f0(%rip), %rdx
    000027e6: 	movq	%r14, %rsi
    000027e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10217
    000027ee: 	movapd	DATAat0x494d0(%rip), %xmm4
    000027f6: 	movq	-0x160(%rbp), %r14
    000027fd: 	movq	%rbx, %rcx
    00002800: 	movl	$0xfa, %edx
    00002805: 	movl	$0x12c, %esi
    0000280a: 	movaps	%xmm4, -0x60(%rbp)
    0000280e: 	movapd	DATAat0x494e0(%rip), %xmm4
    00002816: 	movq	%r14, %rdi
    00002819: 	movaps	%xmm4, -0x50(%rbp)
    0000281d: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 10269
    00002822: 	movl	$0x927c0, %edx
    00002827: 	movq	%r14, %rsi
    0000282a: 	movq	%r12, %rdi
    0000282d: 	movsd	%xmm0, -0x190(%rbp)
    00002835: 	callq	memcpy@PLT # Offset: 10293
    0000283a: 	movl	iterations(%rip), %eax
    00002840: 	movl	$0x2710, iterations(%rip)
    0000284a: 	movl	%eax, -0x198(%rbp)
    00002850: 	callq	clock@PLT # Offset: 10320
    00002855: 	movq	%rax, start_time(%rip)
    0000285c: 	movl	iterations(%rip), %eax
    00002862: 	movl	%eax, -0x180(%rbp)
    00002868: 	testl	%eax, %eax
    0000286a: 	jle	.Ltmp3178 # Offset: 10346
    00002870: 	movq	%r12, -0x188(%rbp)
    00002877: 	movq	%r12, %r14
    0000287a: 	movq	-0x160(%rbp), %r13
    00002881: 	xorl	%r11d, %r11d
    00002884: 	movapd	DATAat0x494f0(%rip), %xmm2
    0000288c: 	movapd	DATAat0x49400(%rip), %xmm7
    00002894: 	movapd	DATAat0x49410(%rip), %xmm6
    0000289c: 	movl	-0x180(%rbp), %r12d
    000028a3: 	movsd	DATAat0x49400(%rip), %xmm5
    000028ab: 	movsd	DATAat0x49410(%rip), %xmm4
    000028b3: 	movq	DATAat0x49500(%rip), %xmm8
    000028bc: 	nopl	(%rax) # Size: 4
.Ltmp3189:
    000028c0: 	leaq	0x7d8(%r14), %rsi
    000028c7: 	leaq	0x10(%r13), %rax
    000028cb: 	pxor	%xmm3, %xmm3
    000028cf: 	movq	$-0x7d0, %rcx
    000028d6: 	leaq	0x7d0(%r13), %r10
    000028dd: 	nopl	(%rax) # Size: 3
.Ltmp3181:
    000028e0: 	movq	%rsi, %rdx
    000028e3: 	subq	%rax, %rdx
    000028e6: 	cmpq	$0xfa0, %rdx
    000028ed: 	jbe	.Ltmp3179 # Offset: 10477
    000028f3: 	movq	%r13, %r8
    000028f6: 	leaq	-0x8(%rax), %r9
    000028fa: 	leaq	0x7d0(%rax), %rdi
    00002901: 	xorl	%edx, %edx
    00002903: 	subq	%rcx, %r8
    00002906: 	addq	$0xf98, %rax
.Ltmp3180:
    0000290c: 	movupd	(%r9,%rdx), %xmm1
    00002912: 	movupd	(%r8,%rdx), %xmm0
    00002918: 	addpd	%xmm1, %xmm0
    0000291c: 	movupd	(%rdi,%rdx), %xmm1
    00002921: 	addpd	%xmm1, %xmm0
    00002925: 	movupd	(%rax,%rdx), %xmm1
    0000292a: 	addpd	%xmm1, %xmm0
    0000292e: 	movupd	(%rsi,%rdx), %xmm1
    00002933: 	addpd	%xmm3, %xmm0
    00002937: 	mulpd	%xmm7, %xmm0
    0000293b: 	subpd	%xmm1, %xmm0
    0000293f: 	mulpd	%xmm6, %xmm0
    00002943: 	addpd	%xmm1, %xmm0
    00002947: 	movups	%xmm0, (%rsi,%rdx)
    0000294b: 	addq	$0x10, %rdx
    0000294f: 	cmpq	$0x7c0, %rdx
    00002956: 	jne	.Ltmp3180 # Offset: 10582
    00002958: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3191:
    00002960: 	subq	$0x7d0, %rcx
    00002967: 	addq	$0x7d0, %rsi
    0000296e: 	movq	%rdi, %rax
    00002971: 	cmpq	$-0x91ff0, %rcx
    00002978: 	jne	.Ltmp3181 # Offset: 10616
    0000297e: 	movsd	-0x130(%rbp), %xmm3
    00002986: 	xorl	%eax, %eax
    00002988: 	pxor	%xmm9, %xmm9
    0000298d: 	movsd	%xmm3, -0x148(%rbp)
    00002995: 	nopl	(%rax) # Size: 3
.Ltmp3182:
    00002998: 	movupd	(%r14,%rax), %xmm3
    0000299e: 	movupd	(%r13,%rax), %xmm1
    000029a5: 	addq	$0x10, %rax
    000029a9: 	subpd	%xmm3, %xmm1
    000029ad: 	movapd	%xmm1, %xmm0
    000029b1: 	movapd	%xmm1, %xmm3
    000029b5: 	cmpltpd	%xmm9, %xmm0
    000029bb: 	xorpd	%xmm2, %xmm3
    000029bf: 	andpd	%xmm0, %xmm3
    000029c3: 	andnpd	%xmm1, %xmm0
    000029c7: 	movsd	-0x148(%rbp), %xmm1
    000029cf: 	orpd	%xmm3, %xmm0
    000029d3: 	addsd	%xmm0, %xmm1
    000029d7: 	unpckhpd	%xmm0, %xmm0
    000029db: 	addsd	%xmm1, %xmm0
    000029df: 	movsd	%xmm0, -0x148(%rbp)
    000029e7: 	cmpq	$0x927c0, %rax
    000029ed: 	jne	.Ltmp3182 # Offset: 10733
    000029ef: 	movsd	-0x130(%rbp), %xmm3
    000029f7: 	xorl	%eax, %eax
    000029f9: 	movsd	%xmm3, -0x140(%rbp)
    00002a01: 	nopl	(%rax) # Size: 7
.Ltmp3184:
    00002a08: 	movsd	(%r13,%rax,8), %xmm0
    00002a0f: 	subsd	(%r14,%rax,8), %xmm0
    00002a15: 	movsd	-0x130(%rbp), %xmm3
    00002a1d: 	comisd	%xmm0, %xmm3
    00002a21: 	jbe	.Ltmp3183 # Offset: 10785
    00002a23: 	xorpd	%xmm8, %xmm0
.Ltmp3183:
    00002a28: 	maxsd	-0x140(%rbp), %xmm0
    00002a30: 	addq	$0x1, %rax
    00002a34: 	movsd	%xmm0, -0x140(%rbp)
    00002a3c: 	cmpq	$0x124f8, %rax
    00002a42: 	jne	.Ltmp3184 # Offset: 10818
    00002a44: 	cmpl	$0x1, %r11d
    00002a48: 	jle	.Ltmp3185 # Offset: 10824
    00002a4a: 	movsd	DATAat0x49538(%rip), %xmm0
    00002a52: 	movsd	-0x148(%rbp), %xmm3
    00002a5a: 	comisd	%xmm3, %xmm0
    00002a5e: 	ja	.Ltmp3186 # Offset: 10846
    00002a64: 	ucomisd	%xmm3, %xmm3
    00002a68: 	jp	.Ltmp3187 # Offset: 10856
    00002a6e: 	movsd	DATAat0x49540(%rip), %xmm0
    00002a76: 	movsd	-0x140(%rbp), %xmm3
    00002a7e: 	comisd	%xmm3, %xmm0
    00002a82: 	ja	.Ltmp3186 # Offset: 10882
    00002a88: 	ucomisd	%xmm3, %xmm3
    00002a8c: 	jp	.Ltmp3187 # Offset: 10892
.Ltmp3185:
    00002a92: 	addl	$0x1, %r11d
    00002a96: 	movq	%r14, %rax
    00002a99: 	movq	%r13, %r14
    00002a9c: 	cmpl	%r12d, %r11d
    00002a9f: 	je	.Ltmp3188 # Offset: 10911
    00002aa5: 	movq	%rax, %r13
    00002aa8: 	jmp	.Ltmp3189 # Offset: 10920
    00002aad: 	nopl	(%rax) # Size: 3
.Ltmp3179:
    00002ab0: 	movq	%rcx, %rdx
    00002ab3: 	movl	$0x7c0, %edi
    00002ab8: 	leaq	-0x7d0(%r13), %r8
    00002abf: 	negq	%rdx
    00002ac2: 	subq	%rcx, %rdi
.Ltmp3190:
    00002ac5: 	movsd	0x8(%r8,%rdx), %xmm1
    00002acc: 	addsd	(%r13,%rdx), %xmm1
    00002ad3: 	movsd	0x10(%r13,%rdx), %xmm0
    00002ada: 	movsd	0x8(%r14,%rdx), %xmm9
    00002ae1: 	addsd	%xmm1, %xmm0
    00002ae5: 	addsd	0x8(%r10,%rdx), %xmm0
    00002aec: 	addsd	-0x130(%rbp), %xmm0
    00002af4: 	mulsd	%xmm5, %xmm0
    00002af8: 	subsd	%xmm9, %xmm0
    00002afd: 	mulsd	%xmm4, %xmm0
    00002b01: 	addsd	%xmm9, %xmm0
    00002b06: 	movsd	%xmm0, 0x8(%r14,%rdx)
    00002b0d: 	addq	$0x8, %rdx
    00002b11: 	cmpq	%rdx, %rdi
    00002b14: 	jne	.Ltmp3190 # Offset: 11028
    00002b16: 	leaq	0x7d0(%rax), %rdi
    00002b1d: 	jmp	.Ltmp3191 # Offset: 11037
.Ltmp3171:
    00002b22: 	movq	-0x8(%rdx), %rax
    00002b26: 	addq	$0x200, %rax
    00002b2c: 	jmp	.Ltmp3192 # Offset: 11052
.Ltmp3166:
    00002b31: 	movq	-0x8(%rdx), %rax
    00002b35: 	addq	$0x200, %rax
    00002b3b: 	jmp	.Ltmp3193 # Offset: 11067
.Ltmp3160:
    00002b40: 	movq	-0x8(%rdx), %rax
    00002b44: 	addq	$0x200, %rax
    00002b4a: 	jmp	.Ltmp3194 # Offset: 11082
.Ltmp3150:
    00002b4f: 	movq	-0x8(%rdx), %rax
    00002b53: 	addq	$0x200, %rax
    00002b59: 	jmp	.Ltmp3195 # Offset: 11097
.Ltmp3121:
    00002b5e: 	movq	-0x190(%rbp), %rax
    00002b65: 	movq	%r13, %rbx
    00002b68: 	movq	%r14, %r13
    00002b6b: 	movl	-0x148(%rbp), %r14d
    00002b72: 	movq	-0x198(%rbp), %r12
    00002b79: 	movq	%r13, %rdi
    00002b7c: 	movq	%rax, -0x160(%rbp)
    00002b83: 	movl	%r14d, -0x188(%rbp)
    00002b8a: 	jmp	.Ltmp3196 # Offset: 11146
.Ltmp3187:
    00002b8f: 	movl	%r11d, -0x180(%rbp)
    00002b96: 	movq	-0x188(%rbp), %r12
    00002b9d: 	callq	clock@PLT # Offset: 11165
    00002ba2: 	movsd	-0x190(%rbp), %xmm4
    00002baa: 	pxor	%xmm0, %xmm0
    00002bae: 	subsd	0x497c8(%r14), %xmm4
    00002bb7: 	movq	%rax, end_time(%rip)
    00002bbe: 	subq	start_time(%rip), %rax
    00002bc5: 	cvtsi2sd	%rax, %xmm0
    00002bca: 	divsd	DATAat0x49520(%rip), %xmm0
    00002bd2: 	movsd	%xmm0, -0x188(%rbp)
    00002bda: 	movq	%xmm4, %r14
.Ltmp3207:
    00002bdf: 	movq	-0x78(%rbp), %rdx
    00002be3: 	movq	-0x80(%rbp), %rsi
    00002be7: 	movq	%r15, %rdi
    00002bea: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11242
    00002bef: 	movq	%rax, %rdi
    00002bf2: 	leaq	DATAat0x493d4(%rip), %rsi
    00002bf9: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 11257
.Ltmp3210:
    00002bfe: 	movl	$0x4, %edx
    00002c03: 	leaq	DATAat0x491b6(%rip), %rsi
    00002c0a: 	movq	%r15, %rdi
    00002c0d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11277
    00002c12: 	movl	-0x180(%rbp), %esi
    00002c18: 	movq	%r15, %rdi
    00002c1b: 	callq	_ZNSolsEi@PLT # Offset: 11291
    00002c20: 	movq	%rax, %rdi
    00002c23: 	movl	$0xb, %edx
    00002c28: 	leaq	DATAat0x491bb(%rip), %rsi
    00002c2f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11311
    00002c34: 	movl	$0xa, %edx
    00002c39: 	leaq	DATAat0x491c7(%rip), %rsi
    00002c40: 	movq	%r15, %rdi
    00002c43: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11331
    00002c48: 	movsd	-0x148(%rbp), %xmm0
    00002c50: 	movq	%r15, %rdi
    00002c53: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11347
    00002c58: 	movl	$0x7, %edx
    00002c5d: 	leaq	DATAat0x491d2(%rip), %rsi
    00002c64: 	movq	%rax, %rdi
    00002c67: 	movq	%rax, %r13
    00002c6a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11370
    00002c6f: 	movsd	-0x140(%rbp), %xmm0
    00002c77: 	movq	%r13, %rdi
    00002c7a: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11386
    00002c7f: 	movl	$0x10, %edx
    00002c84: 	leaq	DATAat0x491da(%rip), %rsi
    00002c8b: 	movq	%rax, %rdi
    00002c8e: 	movq	%rax, %r13
    00002c91: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11409
    00002c96: 	movq	%r14, %xmm0
    00002c9b: 	movq	%r13, %rdi
    00002c9e: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11422
    00002ca3: 	movl	$0x8, %edx
    00002ca8: 	leaq	DATAat0x491eb(%rip), %rsi
    00002caf: 	movq	%rax, %rdi
    00002cb2: 	movq	%rax, %r13
    00002cb5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11445
    00002cba: 	movsd	-0x188(%rbp), %xmm0
    00002cc2: 	movq	%r13, %rdi
    00002cc5: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 11461
    00002cca: 	movq	%rax, %rdi
    00002ccd: 	movl	$0x2, %edx
    00002cd2: 	leaq	DATAat0x491f4(%rip), %rsi
    00002cd9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 11481
    00002cde: 	movl	-0x198(%rbp), %eax
    00002ce4: 	movq	-0x80(%rbp), %rdi
    00002ce8: 	movl	%eax, iterations(%rip)
    00002cee: 	cmpq	-0x150(%rbp), %rdi
    00002cf5: 	je	.Ltmp3197 # Offset: 11509
    00002cf7: 	movq	-0x70(%rbp), %rax
    00002cfb: 	leaq	0x1(%rax), %rsi
    00002cff: 	callq	_ZdlPvm@PLT # Offset: 11519
.Ltmp3197:
    00002d04: 	movq	-0x168(%rbp), %rsi
    00002d0b: 	movq	-0x170(%rbp), %rdi
    00002d12: 	leaq	DATAat0x49306(%rip), %rdx
    00002d19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11545
    00002d1e: 	movapd	DATAat0x494d0(%rip), %xmm4
    00002d26: 	movq	-0x160(%rbp), %r14
    00002d2d: 	movq	%rbx, %rcx
    00002d30: 	movl	$0xfa, %edx
    00002d35: 	movl	$0x12c, %esi
    00002d3a: 	movaps	%xmm4, -0x60(%rbp)
    00002d3e: 	movapd	DATAat0x494e0(%rip), %xmm4
    00002d46: 	movq	%r14, %rdi
    00002d49: 	movaps	%xmm4, -0x50(%rbp)
    00002d4d: 	callq	_Z29laplace_initial_condition_setIdET_PS0_iiPKS0_ # Offset: 11597
    00002d52: 	movl	$0x927c0, %edx
    00002d57: 	movq	%r14, %rsi
    00002d5a: 	movq	%r12, %rdi
    00002d5d: 	movsd	%xmm0, -0x1a0(%rbp)
    00002d65: 	callq	memcpy@PLT # Offset: 11621
    00002d6a: 	movl	iterations(%rip), %eax
    00002d70: 	movl	$0x2710, iterations(%rip)
    00002d7a: 	movl	%eax, -0x1a8(%rbp)
    00002d80: 	callq	clock@PLT # Offset: 11648
    00002d85: 	movq	%rax, start_time(%rip)
    00002d8c: 	movl	iterations(%rip), %eax
    00002d92: 	movl	%eax, -0x188(%rbp)
    00002d98: 	testl	%eax, %eax
    00002d9a: 	jle	.Ltmp3198 # Offset: 11674
    00002da0: 	movq	-0x160(%rbp), %rax
    00002da7: 	xorl	%r13d, %r13d
    00002daa: 	movq	%r12, -0x198(%rbp)
    00002db1: 	movq	%r12, %r14
    00002db4: 	movl	%r13d, -0x148(%rbp)
    00002dbb: 	movq	%rbx, %r13
    00002dbe: 	pxor	%xmm5, %xmm5
    00002dc2: 	movsd	DATAat0x49400(%rip), %xmm3
    00002dca: 	movq	%rax, -0x190(%rbp)
    00002dd1: 	movq	%rax, %r12
    00002dd4: 	movapd	DATAat0x494f0(%rip), %xmm2
    00002ddc: 	movsd	DATAat0x49410(%rip), %xmm4
    00002de4: 	movl	-0x188(%rbp), %ebx
    00002dea: 	movl	-0x148(%rbp), %eax
.Ltmp3206:
    00002df0: 	leaq	0x7d0(%r12), %r9
    00002df8: 	leaq	0x91ff8(%r14), %rcx
    00002dff: 	movl	$0x1, %esi
    00002e04: 	movl	%eax, %edi
    00002e06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3200:
    00002e10: 	addl	$0x1, %esi
    00002e13: 	leaq	-0x91820(%rcx), %rdx
    00002e1a: 	movq	%r9, %rax
.Ltmp3199:
    00002e1d: 	movsd	0x10(%rax), %xmm0
    00002e22: 	movsd	-0x7c8(%rax), %xmm1
    00002e2a: 	addq	$0x7d0, %rdx
    00002e31: 	addq	$0x7d0, %rax
    00002e37: 	addsd	-0x7d0(%rax), %xmm1
    00002e3f: 	movsd	-0x7d0(%rdx), %xmm6
    00002e47: 	addsd	%xmm1, %xmm0
    00002e4b: 	addsd	0x8(%rax), %xmm0
    00002e50: 	addsd	-0x130(%rbp), %xmm0
    00002e58: 	mulsd	%xmm3, %xmm0
    00002e5c: 	subsd	%xmm6, %xmm0
    00002e60: 	mulsd	%xmm4, %xmm0
    00002e64: 	addsd	%xmm6, %xmm0
    00002e68: 	movsd	%xmm0, -0x7d0(%rdx)
    00002e70: 	cmpq	%rdx, %rcx
    00002e73: 	jne	.Ltmp3199 # Offset: 11891
    00002e75: 	addq	$0x8, %r9
    00002e79: 	addq	$0x8, %rcx
    00002e7d: 	cmpl	$0xf9, %esi
    00002e83: 	jne	.Ltmp3200 # Offset: 11907
    00002e85: 	movsd	-0x130(%rbp), %xmm6
    00002e8d: 	xorl	%eax, %eax
    00002e8f: 	movsd	%xmm6, -0x140(%rbp)
    00002e97: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3201:
    00002ea0: 	movupd	(%r14,%rax), %xmm6
    00002ea6: 	movupd	(%r12,%rax), %xmm1
    00002eac: 	addq	$0x10, %rax
    00002eb0: 	subpd	%xmm6, %xmm1
    00002eb4: 	movapd	%xmm1, %xmm0
    00002eb8: 	movapd	%xmm1, %xmm6
    00002ebc: 	cmpltpd	%xmm5, %xmm0
    00002ec1: 	xorpd	%xmm2, %xmm6
    00002ec5: 	andpd	%xmm0, %xmm6
    00002ec9: 	andnpd	%xmm1, %xmm0
    00002ecd: 	movsd	-0x140(%rbp), %xmm1
    00002ed5: 	orpd	%xmm6, %xmm0
    00002ed9: 	addsd	%xmm0, %xmm1
    00002edd: 	unpckhpd	%xmm0, %xmm0
    00002ee1: 	addsd	%xmm1, %xmm0
    00002ee5: 	movsd	%xmm0, -0x140(%rbp)
    00002eed: 	cmpq	$0x927c0, %rax
    00002ef3: 	jne	.Ltmp3201 # Offset: 12019
    00002ef5: 	movl	%edi, -0x148(%rbp)
    00002efb: 	movl	$0x124f8, %edx
    00002f00: 	movq	%r14, %rsi
    00002f03: 	movq	%r12, %rdi
    00002f06: 	movsd	%xmm3, -0x170(%rbp)
    00002f0e: 	movaps	%xmm2, -0x160(%rbp)
    00002f15: 	callq	_Z14max_differenceIdET_PKS0_S2_m # Offset: 12053
    00002f1a: 	movq	DATAat0x49410(%rip), %rax
    00002f21: 	cmpl	$0x1, -0x148(%rbp)
    00002f28: 	pxor	%xmm5, %xmm5
    00002f2c: 	movapd	-0x160(%rbp), %xmm2
    00002f34: 	movsd	-0x170(%rbp), %xmm3
    00002f3c: 	movsd	%xmm0, -0x180(%rbp)
    00002f44: 	movq	%rax, %xmm4
    00002f49: 	jle	.Ltmp3202 # Offset: 12105
    00002f4b: 	movsd	DATAat0x49538(%rip), %xmm7
    00002f53: 	movsd	-0x140(%rbp), %xmm6
    00002f5b: 	comisd	%xmm6, %xmm7
    00002f5f: 	ja	.Ltmp3203 # Offset: 12127
    00002f65: 	ucomisd	%xmm6, %xmm6
    00002f69: 	jp	.Ltmp3204 # Offset: 12137
    00002f6f: 	movsd	DATAat0x49540(%rip), %xmm6
    00002f77: 	comisd	%xmm0, %xmm6
    00002f7b: 	ja	.Ltmp3203 # Offset: 12155
    00002f81: 	ucomisd	%xmm0, %xmm0
    00002f85: 	jp	.Ltmp3204 # Offset: 12165
.Ltmp3202:
    00002f8b: 	addl	$0x1, -0x148(%rbp)
    00002f92: 	movl	-0x148(%rbp), %edi
    00002f98: 	movq	%r14, %rax
    00002f9b: 	movq	%r12, %r14
    00002f9e: 	cmpl	%edi, %ebx
    00002fa0: 	je	.Ltmp3205 # Offset: 12192
    00002fa6: 	movq	%rax, %r12
    00002fa9: 	movl	%edi, %eax
    00002fab: 	jmp	.Ltmp3206 # Offset: 12203
.Ltmp3186:
    00002fb0: 	movl	%r11d, -0x180(%rbp)
    00002fb7: 	movq	-0x188(%rbp), %r12
    00002fbe: 	movq	%r14, %r13
.Ltmp3228:
    00002fc1: 	callq	clock@PLT # Offset: 12225
    00002fc6: 	movsd	-0x190(%rbp), %xmm4
    00002fce: 	pxor	%xmm0, %xmm0
    00002fd2: 	subsd	0x497c8(%r13), %xmm4
    00002fdb: 	movq	%rax, end_time(%rip)
    00002fe2: 	subq	start_time(%rip), %rax
    00002fe9: 	cvtsi2sd	%rax, %xmm0
    00002fee: 	divsd	DATAat0x49520(%rip), %xmm0
    00002ff6: 	movsd	%xmm0, -0x188(%rbp)
    00002ffe: 	movq	%xmm4, %r14
    00003003: 	movsd	-0x148(%rbp), %xmm4
    0000300b: 	ucomisd	%xmm4, %xmm4
    0000300f: 	jp	.Ltmp3207 # Offset: 12303
    00003015: 	movsd	-0x140(%rbp), %xmm4
    0000301d: 	ucomisd	%xmm4, %xmm4
    00003021: 	jp	.Ltmp3207 # Offset: 12321
    00003027: 	movl	-0x180(%rbp), %eax
    0000302d: 	cmpl	iterations(%rip), %eax
    00003033: 	movq	-0x78(%rbp), %rdx
    00003037: 	movq	-0x80(%rbp), %rsi
    0000303b: 	jl	.Ltmp3208 # Offset: 12347
    0000303d: 	movsd	-0x148(%rbp), %xmm4
    00003045: 	comisd	DATAat0x49538(%rip), %xmm4
    0000304d: 	jbe	.Ltmp3208 # Offset: 12365
    0000304f: 	movsd	-0x140(%rbp), %xmm4
    00003057: 	comisd	DATAat0x49540(%rip), %xmm4
    0000305f: 	ja	.Ltmp3209 # Offset: 12383
.Ltmp3208:
    00003065: 	movq	%r15, %rdi
    00003068: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12392
    0000306d: 	movq	%rax, %rdi
    00003070: 	movl	$0xa, %edx
    00003075: 	leaq	DATAat0x491ab(%rip), %rsi
    0000307c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12412
    00003081: 	jmp	.Ltmp3210 # Offset: 12417
.Ltmp3205:
    00003086: 	movq	-0x190(%rbp), %rax
    0000308d: 	movq	%r12, %rdi
    00003090: 	movq	%r13, %rbx
    00003093: 	movq	-0x198(%rbp), %r12
    0000309a: 	movq	%rax, -0x160(%rbp)
.Ltmp3229:
    000030a1: 	movq	%rdi, -0x130(%rbp)
    000030a8: 	callq	clock@PLT # Offset: 12456
    000030ad: 	movq	-0x130(%rbp), %rdi
    000030b4: 	pxor	%xmm0, %xmm0
    000030b8: 	movsd	-0x1a0(%rbp), %xmm4
    000030c0: 	movq	%rax, end_time(%rip)
    000030c7: 	subq	start_time(%rip), %rax
    000030ce: 	cvtsi2sd	%rax, %xmm0
    000030d3: 	subsd	0x497c8(%rdi), %xmm4
    000030db: 	divsd	DATAat0x49520(%rip), %xmm0
    000030e3: 	movsd	%xmm0, -0x148(%rbp)
    000030eb: 	movsd	%xmm4, -0x170(%rbp)
    000030f3: 	movsd	-0x140(%rbp), %xmm4
    000030fb: 	ucomisd	%xmm4, %xmm4
    000030ff: 	jp	.Ltmp3211 # Offset: 12543
    00003105: 	movsd	-0x180(%rbp), %xmm4
    0000310d: 	ucomisd	%xmm4, %xmm4
    00003111: 	jp	.Ltmp3211 # Offset: 12561
    00003117: 	movl	-0x188(%rbp), %eax
    0000311d: 	cmpl	iterations(%rip), %eax
    00003123: 	movq	-0x78(%rbp), %rdx
    00003127: 	movq	-0x80(%rbp), %rsi
    0000312b: 	jl	.Ltmp3212 # Offset: 12587
    0000312d: 	movsd	-0x140(%rbp), %xmm4
    00003135: 	comisd	DATAat0x49538(%rip), %xmm4
    0000313d: 	jbe	.Ltmp3212 # Offset: 12605
    0000313f: 	movsd	-0x180(%rbp), %xmm4
    00003147: 	comisd	DATAat0x49540(%rip), %xmm4
    0000314f: 	ja	.Ltmp3213 # Offset: 12623
.Ltmp3212:
    00003155: 	movq	%r15, %rdi
    00003158: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12632
    0000315d: 	movq	%rax, %rdi
    00003160: 	movl	$0xa, %edx
    00003165: 	leaq	DATAat0x491ab(%rip), %rsi
    0000316c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12652
.Ltmp3226:
    00003171: 	movl	$0x4, %edx
    00003176: 	leaq	DATAat0x491b6(%rip), %rsi
    0000317d: 	movq	%r15, %rdi
    00003180: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12672
    00003185: 	movl	-0x188(%rbp), %esi
    0000318b: 	movq	%r15, %rdi
    0000318e: 	callq	_ZNSolsEi@PLT # Offset: 12686
    00003193: 	movq	%rax, %rdi
    00003196: 	movl	$0xb, %edx
    0000319b: 	leaq	DATAat0x491bb(%rip), %rsi
    000031a2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12706
    000031a7: 	movl	$0xa, %edx
    000031ac: 	leaq	DATAat0x491c7(%rip), %rsi
    000031b3: 	movq	%r15, %rdi
    000031b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12726
    000031bb: 	movsd	-0x140(%rbp), %xmm0
    000031c3: 	movq	%r15, %rdi
    000031c6: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12742
    000031cb: 	movl	$0x7, %edx
    000031d0: 	leaq	DATAat0x491d2(%rip), %rsi
    000031d7: 	movq	%rax, %rdi
    000031da: 	movq	%rax, %r14
    000031dd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12765
    000031e2: 	movsd	-0x180(%rbp), %xmm0
    000031ea: 	movq	%r14, %rdi
    000031ed: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12781
    000031f2: 	movl	$0x10, %edx
    000031f7: 	leaq	DATAat0x491da(%rip), %rsi
    000031fe: 	movq	%rax, %rdi
    00003201: 	movq	%rax, %r14
    00003204: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12804
    00003209: 	movsd	-0x170(%rbp), %xmm0
    00003211: 	movq	%r14, %rdi
    00003214: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12820
    00003219: 	movl	$0x8, %edx
    0000321e: 	leaq	DATAat0x491eb(%rip), %rsi
    00003225: 	movq	%rax, %rdi
    00003228: 	movq	%rax, %r13
    0000322b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12843
    00003230: 	movsd	-0x148(%rbp), %xmm0
    00003238: 	movq	%r13, %rdi
    0000323b: 	callq	_ZNSo9_M_insertIdEERSoT_@PLT # Offset: 12859
    00003240: 	movq	%rax, %rdi
    00003243: 	movl	$0x2, %edx
    00003248: 	leaq	DATAat0x491f4(%rip), %rsi
    0000324f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 12879
    00003254: 	movl	-0x1a8(%rbp), %eax
    0000325a: 	movq	-0x80(%rbp), %rdi
    0000325e: 	movl	%eax, iterations(%rip)
    00003264: 	cmpq	-0x150(%rbp), %rdi
    0000326b: 	je	.Ltmp3214 # Offset: 12907
    0000326d: 	movq	-0x70(%rbp), %rax
    00003271: 	leaq	0x1(%rax), %rsi
    00003275: 	callq	_ZdlPvm@PLT # Offset: 12917
.Ltmp3214:
    0000327a: 	movq	-0x168(%rbp), %rsi
    00003281: 	leaq	DATAat0x4931d(%rip), %rdx
    00003288: 	movq	%rbx, %rdi
    0000328b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12939
    00003290: 	subq	$0x8, %rsp
    00003294: 	movq	%rbx, %r9
    00003297: 	movl	$0xfa, %r8d
    0000329d: 	movq	%r12, %rsi
    000032a0: 	pushq	$0x1
    000032a2: 	movl	$0xfa, %ecx
    000032a7: 	movl	$0x12c, %edx
    000032ac: 	movq	-0x160(%rbp), %rdi
    000032b3: 	callq	_Z20convergenceLaplace2DIdd21jacobi_sor2D_reversedIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 12979
    000032b8: 	popq	%r14
    000032ba: 	movq	-0x60(%rbp), %rdi
    000032be: 	popq	%r15
    000032c0: 	cmpq	-0x178(%rbp), %rdi
    000032c7: 	je	.Ltmp3215 # Offset: 12999
    000032c9: 	movq	-0x50(%rbp), %rax
    000032cd: 	leaq	0x1(%rax), %rsi
    000032d1: 	callq	_ZdlPvm@PLT # Offset: 13009
.Ltmp3215:
    000032d6: 	movq	-0x168(%rbp), %rsi
    000032dd: 	leaq	DATAat0x49335(%rip), %rdx
    000032e4: 	movq	%rbx, %rdi
    000032e7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13031
    000032ec: 	subq	$0x8, %rsp
    000032f0: 	movq	%rbx, %r9
    000032f3: 	movl	$0xfa, %r8d
    000032f9: 	movq	%r12, %rsi
    000032fc: 	pushq	$0x1
    000032fe: 	movl	$0xfa, %ecx
    00003303: 	movl	$0x12c, %edx
    00003308: 	movq	-0x160(%rbp), %rdi
    0000330f: 	callq	_Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedXIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13071
    00003314: 	popq	%r11
    00003316: 	movq	-0x60(%rbp), %rdi
    0000331a: 	popq	%r13
    0000331c: 	cmpq	-0x178(%rbp), %rdi
    00003323: 	je	.Ltmp3216 # Offset: 13091
    00003325: 	movq	-0x50(%rbp), %rax
    00003329: 	leaq	0x1(%rax), %rsi
    0000332d: 	callq	_ZdlPvm@PLT # Offset: 13101
.Ltmp3216:
    00003332: 	movq	-0x168(%rbp), %rsi
    00003339: 	leaq	DATAat0x4934e(%rip), %rdx
    00003340: 	movq	%rbx, %rdi
    00003343: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13123
    00003348: 	subq	$0x8, %rsp
    0000334c: 	movq	%rbx, %r9
    0000334f: 	movl	$0xfa, %r8d
    00003355: 	movq	%r12, %rsi
    00003358: 	pushq	$0x1
    0000335a: 	movl	$0xfa, %ecx
    0000335f: 	movl	$0x12c, %edx
    00003364: 	movq	-0x160(%rbp), %rdi
    0000336b: 	callq	_Z20convergenceLaplace2DIdd22jacobi_sor2D_reversedYIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13163
    00003370: 	popq	%r9
    00003372: 	movq	-0x60(%rbp), %rdi
    00003376: 	popq	%r10
    00003378: 	cmpq	-0x178(%rbp), %rdi
    0000337f: 	je	.Ltmp3217 # Offset: 13183
    00003381: 	movq	-0x50(%rbp), %rax
    00003385: 	leaq	0x1(%rax), %rsi
    00003389: 	callq	_ZdlPvm@PLT # Offset: 13193
.Ltmp3217:
    0000338e: 	movq	-0x168(%rbp), %rsi
    00003395: 	leaq	DATAat0x49367(%rip), %rdx
    0000339c: 	movq	%rbx, %rdi
    0000339f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13215
    000033a4: 	subq	$0x8, %rsp
    000033a8: 	movq	%rbx, %r9
    000033ab: 	movl	$0xfa, %r8d
    000033b1: 	movq	%r12, %rsi
    000033b4: 	pushq	$0x1
    000033b6: 	movl	$0xfa, %ecx
    000033bb: 	movl	$0x12c, %edx
    000033c0: 	movq	-0x160(%rbp), %rdi
    000033c7: 	callq	_Z20convergenceLaplace2DIdd21jacobi_sor2D_unrolledIddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13255
    000033cc: 	popq	%rdi
    000033cd: 	movq	-0x60(%rbp), %rdi
    000033d1: 	popq	%r8
    000033d3: 	cmpq	-0x178(%rbp), %rdi
    000033da: 	je	.Ltmp3218 # Offset: 13274
    000033dc: 	movq	-0x50(%rbp), %rax
    000033e0: 	leaq	0x1(%rax), %rsi
    000033e4: 	callq	_ZdlPvm@PLT # Offset: 13284
.Ltmp3218:
    000033e9: 	movq	-0x168(%rbp), %rsi
    000033f0: 	leaq	DATAat0x4937f(%rip), %rdx
    000033f7: 	movq	%rbx, %rdi
    000033fa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13306
    000033ff: 	subq	$0x8, %rsp
    00003403: 	movq	%rbx, %r9
    00003406: 	movl	$0xfa, %r8d
    0000340c: 	movq	%r12, %rsi
    0000340f: 	pushq	$0x1
    00003411: 	movl	$0xfa, %ecx
    00003416: 	movl	$0x12c, %edx
    0000341b: 	movq	-0x160(%rbp), %rdi
    00003422: 	callq	_Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled2IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13346
    00003427: 	popq	%rcx
    00003428: 	movq	-0x60(%rbp), %rdi
    0000342c: 	popq	%rsi
    0000342d: 	cmpq	-0x178(%rbp), %rdi
    00003434: 	je	.Ltmp3219 # Offset: 13364
    00003436: 	movq	-0x50(%rbp), %rax
    0000343a: 	leaq	0x1(%rax), %rsi
    0000343e: 	callq	_ZdlPvm@PLT # Offset: 13374
.Ltmp3219:
    00003443: 	movq	-0x168(%rbp), %rsi
    0000344a: 	leaq	DATAat0x49398(%rip), %rdx
    00003451: 	movq	%rbx, %rdi
    00003454: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13396
    00003459: 	subq	$0x8, %rsp
    0000345d: 	movq	%rbx, %r9
    00003460: 	movl	$0xfa, %r8d
    00003466: 	movq	%r12, %rsi
    00003469: 	pushq	$0x1
    0000346b: 	movl	$0xfa, %ecx
    00003470: 	movl	$0x12c, %edx
    00003475: 	movq	-0x160(%rbp), %rdi
    0000347c: 	callq	_Z20convergenceLaplace2DIdd22jacobi_sor2D_unrolled3IddEEvPT_S3_iiiT1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi # Offset: 13436
    00003481: 	popq	%rax
    00003482: 	movq	-0x60(%rbp), %rdi
    00003486: 	popq	%rdx
    00003487: 	cmpq	-0x178(%rbp), %rdi
    0000348e: 	je	.Ltmp3220 # Offset: 13454
    00003490: 	movq	-0x50(%rbp), %rax
    00003494: 	leaq	0x1(%rax), %rsi
    00003498: 	callq	_ZdlPvm@PLT # Offset: 13464
.Ltmp3220:
    0000349d: 	movl	-0x1a4(%rbp), %eax
    000034a3: 	movq	-0xa0(%rbp), %rdi
    000034aa: 	movl	%eax, iterations(%rip)
    000034b0: 	leaq	-0x90(%rbp), %rax
    000034b7: 	cmpq	%rax, %rdi
    000034ba: 	je	.Ltmp3221 # Offset: 13498
    000034bc: 	movq	-0x90(%rbp), %rax
    000034c3: 	leaq	0x1(%rax), %rsi
    000034c7: 	callq	_ZdlPvm@PLT # Offset: 13511
.Ltmp3221:
    000034cc: 	movq	-0xc0(%rbp), %rdi
    000034d3: 	leaq	-0xb0(%rbp), %rax
    000034da: 	cmpq	%rax, %rdi
    000034dd: 	je	.Ltmp3222 # Offset: 13533
    000034df: 	movq	-0xb0(%rbp), %rax
    000034e6: 	leaq	0x1(%rax), %rsi
    000034ea: 	callq	_ZdlPvm@PLT # Offset: 13546
.Ltmp3222:
    000034ef: 	movl	$0x8, %esi
    000034f4: 	movq	%r12, %rdi
    000034f7: 	callq	_ZdlPvm@PLT # Offset: 13559
    000034fc: 	movq	-0x160(%rbp), %rdi
    00003503: 	movl	$0x8, %esi
    00003508: 	callq	_ZdlPvm@PLT # Offset: 13576
    0000350d: 	movq	-0xe0(%rbp), %rdi
    00003514: 	leaq	-0xd0(%rbp), %rax
    0000351b: 	cmpq	%rax, %rdi
    0000351e: 	je	.Ltmp3223 # Offset: 13598
    00003520: 	movq	-0xd0(%rbp), %rax
    00003527: 	leaq	0x1(%rax), %rsi
    0000352b: 	callq	_ZdlPvm@PLT # Offset: 13611
.Ltmp3223:
    00003530: 	movq	-0x100(%rbp), %rdi
    00003537: 	leaq	-0xf0(%rbp), %rax
    0000353e: 	cmpq	%rax, %rdi
    00003541: 	je	.Ltmp3224 # Offset: 13633
    00003543: 	movq	-0xf0(%rbp), %rax
    0000354a: 	leaq	0x1(%rax), %rsi
    0000354e: 	callq	_ZdlPvm@PLT # Offset: 13646
.Ltmp3224:
    00003553: 	movq	-0x38(%rbp), %rax
    00003557: 	subq	%fs:0x28, %rax
    00003560: 	jne	.Ltmp3225 # Offset: 13664
    00003566: 	leaq	-0x28(%rbp), %rsp
    0000356a: 	popq	%rbx
    0000356b: 	popq	%r12
    0000356d: 	popq	%r13
    0000356f: 	popq	%r14
    00003571: 	popq	%r15
    00003573: 	popq	%rbp
    00003574: 	retq # Offset: 13684
.Ltmp3204:
    00003575: 	movq	-0x190(%rbp), %rax
    0000357c: 	movq	%r13, %rbx
    0000357f: 	movl	-0x148(%rbp), %r13d
    00003586: 	movq	-0x198(%rbp), %r12
    0000358d: 	movq	%rax, -0x160(%rbp)
    00003594: 	callq	clock@PLT # Offset: 13716
    00003599: 	movl	%r13d, -0x188(%rbp)
    000035a0: 	pxor	%xmm0, %xmm0
    000035a4: 	movsd	-0x1a0(%rbp), %xmm4
    000035ac: 	subsd	0x497c8(%r14), %xmm4
    000035b5: 	movq	%rax, end_time(%rip)
    000035bc: 	subq	start_time(%rip), %rax
    000035c3: 	cvtsi2sd	%rax, %xmm0
    000035c8: 	divsd	DATAat0x49520(%rip), %xmm0
    000035d0: 	movsd	%xmm0, -0x148(%rbp)
    000035d8: 	movsd	%xmm4, -0x170(%rbp)
.Ltmp3211:
    000035e0: 	movq	-0x78(%rbp), %rdx
    000035e4: 	movq	-0x80(%rbp), %rsi
    000035e8: 	movq	%r15, %rdi
    000035eb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 13803
    000035f0: 	movq	%rax, %rdi
    000035f3: 	leaq	DATAat0x493d4(%rip), %rsi
    000035fa: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 13818
    000035ff: 	jmp	.Ltmp3226 # Offset: 13823
.Ltmp3176:
    00003604: 	movq	-0x8(%rdx), %rax
    00003608: 	addq	$0x200, %rax
    0000360e: 	jmp	.Ltmp3227 # Offset: 13838
.Ltmp3188:
    00003613: 	movq	-0x188(%rbp), %r12
    0000361a: 	jmp	.Ltmp3228 # Offset: 13850
.Ltmp3203:
    0000361f: 	movq	-0x190(%rbp), %rax
    00003626: 	movq	%r13, %rbx
    00003629: 	movl	-0x148(%rbp), %r13d
    00003630: 	movq	%r14, %rdi
    00003633: 	movq	-0x198(%rbp), %r12
    0000363a: 	movq	%rax, -0x160(%rbp)
    00003641: 	movl	%r13d, -0x188(%rbp)
    00003648: 	jmp	.Ltmp3229 # Offset: 13896
.Ltmp3109:
    0000364d: 	callq	clock@PLT # Offset: 13901
    00003652: 	pxor	%xmm0, %xmm0
    00003656: 	movsd	-0x180(%rbp), %xmm4
    0000365e: 	subsd	0x497c8(%r14), %xmm4
    00003667: 	movq	%rax, end_time(%rip)
    0000366e: 	subq	start_time(%rip), %rax
    00003675: 	cvtsi2sd	%rax, %xmm0
    0000367a: 	movl	%r15d, -0x178(%rbp)
    00003681: 	divsd	DATAat0x49520(%rip), %xmm0
    00003689: 	movq	%xmm4, %r13
    0000368e: 	movsd	%xmm0, -0x188(%rbp)
    00003696: 	jmp	.Ltmp3125 # Offset: 13974
.Ltmp3098:
    0000369b: 	movq	-0x8(%rdx), %rax
    0000369f: 	addq	$0x200, %rax
    000036a5: 	jmp	.Ltmp3230 # Offset: 13989
.Ltmp3093:
    000036aa: 	movq	-0x8(%rdx), %rax
    000036ae: 	addq	$0x200, %rax
    000036b4: 	jmp	.Ltmp3231 # Offset: 14004
.Ltmp3088:
    000036b9: 	movq	-0x8(%rdx), %rax
    000036bd: 	addq	$0x200, %rax
    000036c3: 	jmp	.Ltmp3232 # Offset: 14019
.Ltmp3083:
    000036c8: 	movq	-0x8(%rdx), %rax
    000036cc: 	addq	$0x200, %rax
    000036d2: 	jmp	.Ltmp3233 # Offset: 14034
.Ltmp3073:
    000036d7: 	movq	-0x8(%rdx), %rax
    000036db: 	addq	$0x200, %rax
    000036e1: 	jmp	.Ltmp3234 # Offset: 14049
.Ltmp3063:
    000036e6: 	movq	-0x8(%rdx), %rax
    000036ea: 	addq	$0x200, %rax
    000036f0: 	jmp	.Ltmp3235 # Offset: 14064
.Ltmp3053:
    000036f5: 	movq	-0x8(%rdx), %rax
    000036f9: 	addq	$0x200, %rax
    000036ff: 	jmp	.Ltmp3236 # Offset: 14079
.Ltmp3046:
    00003704: 	movq	-0x8(%rdx), %rax
    00003708: 	addq	$0x200, %rax
    0000370e: 	jmp	.Ltmp3237 # Offset: 14094
.Ltmp3213:
    00003713: 	movq	%r15, %rdi
    00003716: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14102
    0000371b: 	movq	%rax, %rdi
    0000371e: 	leaq	DATAat0x49199(%rip), %rsi
    00003725: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14117
    0000372a: 	jmp	.Ltmp3226 # Offset: 14122
.Ltmp3209:
    0000372f: 	movq	%r15, %rdi
    00003732: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14130
    00003737: 	movq	%rax, %rdi
    0000373a: 	leaq	DATAat0x49199(%rip), %rsi
    00003741: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14145
    00003746: 	jmp	.Ltmp3210 # Offset: 14150
.Ltmp3131:
    0000374b: 	movq	%r15, %rdi
    0000374e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14158
    00003753: 	movq	%rax, %rdi
    00003756: 	leaq	DATAat0x49199(%rip), %rsi
    0000375d: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14173
    00003762: 	jmp	.Ltmp3147 # Offset: 14178
.Ltmp3127:
    00003767: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    0000376e: 	movq	%r15, %rdi
    00003771: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 14193
    00003776: 	movq	%rax, %rdi
    00003779: 	leaq	DATAat0x49199(%rip), %rsi
    00003780: 	callq	"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.isra.0/1" # Offset: 14208
    00003785: 	jmp	.Ltmp3128 # Offset: 14213
.Ltmp3198:
    0000378a: 	callq	clock@PLT # Offset: 14218
    0000378f: 	pxor	%xmm0, %xmm0
    00003793: 	movq	-0x78(%rbp), %rdx
    00003797: 	movsd	-0x1a0(%rbp), %xmm4
    0000379f: 	subsd	0x497c8(%r12), %xmm4
    000037a9: 	movq	-0x80(%rbp), %rsi
    000037ad: 	movq	%rax, end_time(%rip)
    000037b4: 	subq	start_time(%rip), %rax
    000037bb: 	movl	$0x0, -0x188(%rbp)
    000037c5: 	cvtsi2sd	%rax, %xmm0
    000037ca: 	divsd	DATAat0x49520(%rip), %xmm0
    000037d2: 	movsd	%xmm0, -0x148(%rbp)
    000037da: 	movsd	%xmm4, -0x170(%rbp)
    000037e2: 	movsd	-0x130(%rbp), %xmm4
    000037ea: 	movsd	%xmm4, -0x140(%rbp)
    000037f2: 	movsd	%xmm4, -0x180(%rbp)
    000037fa: 	jmp	.Ltmp3212 # Offset: 14330
.Ltmp3225:
    000037ff: 	callq	__stack_chk_fail@PLT # Offset: 14335
    00003804: 	nopl	(%rax) # Size: 4
.Ltmp3100:
    00003808: 	callq	clock@PLT # Offset: 14344
    0000380d: 	pxor	%xmm0, %xmm0
    00003811: 	movq	-0x78(%rbp), %rdx
    00003815: 	movsd	-0x180(%rbp), %xmm4
    0000381d: 	subsd	0x497c8(%r12), %xmm4
    00003827: 	movq	-0x80(%rbp), %rsi
    0000382b: 	movq	%rax, end_time(%rip)
    00003832: 	subq	start_time(%rip), %rax
    00003839: 	movl	$0x0, -0x178(%rbp)
    00003843: 	cvtsi2sd	%rax, %xmm0
    00003848: 	divsd	DATAat0x49520(%rip), %xmm0
    00003850: 	movsd	%xmm0, -0x188(%rbp)
    00003858: 	movq	%xmm4, %r13
    0000385d: 	pxor	%xmm4, %xmm4
    00003861: 	movsd	%xmm4, -0x130(%rbp)
    00003869: 	movsd	%xmm4, -0x148(%rbp)
    00003871: 	movsd	%xmm4, -0x140(%rbp)
    00003879: 	jmp	.Ltmp3126 # Offset: 14457
.Ltmp3116:
    0000387e: 	callq	clock@PLT # Offset: 14462
    00003883: 	pxor	%xmm0, %xmm0
    00003887: 	movq	-0x78(%rbp), %rdx
    0000388b: 	movsd	-0x1a0(%rbp), %xmm4
    00003893: 	subsd	0x497c8(%r12), %xmm4
    0000389d: 	movq	-0x80(%rbp), %rsi
    000038a1: 	movq	%rax, end_time(%rip)
    000038a8: 	subq	start_time(%rip), %rax
    000038af: 	movl	$0x0, -0x188(%rbp)
    000038b9: 	cvtsi2sd	%rax, %xmm0
    000038be: 	divsd	DATAat0x49520(%rip), %xmm0
    000038c6: 	movsd	%xmm0, -0x148(%rbp)
    000038ce: 	movsd	%xmm4, -0x178(%rbp)
    000038d6: 	movsd	-0x130(%rbp), %xmm4
    000038de: 	movsd	%xmm4, -0x140(%rbp)
    000038e6: 	movsd	%xmm4, -0x180(%rbp)
    000038ee: 	jmp	.Ltmp3130 # Offset: 14574
.Ltmp3178:
    000038f3: 	callq	clock@PLT # Offset: 14579
    000038f8: 	pxor	%xmm0, %xmm0
    000038fc: 	movq	-0x78(%rbp), %rdx
    00003900: 	movsd	-0x190(%rbp), %xmm4
    00003908: 	subsd	0x497c8(%r12), %xmm4
    00003912: 	movq	-0x80(%rbp), %rsi
    00003916: 	movq	%rax, end_time(%rip)
    0000391d: 	subq	start_time(%rip), %rax
    00003924: 	movl	$0x0, -0x180(%rbp)
    0000392e: 	cvtsi2sd	%rax, %xmm0
    00003933: 	divsd	DATAat0x49520(%rip), %xmm0
    0000393b: 	movsd	%xmm0, -0x188(%rbp)
    00003943: 	movq	%xmm4, %r14
    00003948: 	movsd	-0x130(%rbp), %xmm4
    00003950: 	movsd	%xmm4, -0x140(%rbp)
    00003958: 	movsd	%xmm4, -0x148(%rbp)
    00003960: 	jmp	.Ltmp3208 # Offset: 14688
    00003965: 	endbr64
.Ltmp3239:
    00003969: 	movq	%rax, %rbx
    0000396c: 	jmp	.Ltmp3238 # Offset: 14700
    0000396e: 	endbr64
    00003972: 	jmp	.Ltmp3239 # Offset: 14706
    00003974: 	endbr64
.Ltmp3252:
    00003978: 	movq	%rax, %rbx
    0000397b: 	jmp	.Ltmp3240 # Offset: 14715
    00003980: 	endbr64
    00003984: 	movq	%rax, %rbx
    00003987: 	jmp	.Ltmp3241 # Offset: 14727
    00003989: 	endbr64
    0000398d: 	movq	%rax, %rbx
    00003990: 	jmp	.Ltmp3242 # Offset: 14736
    00003992: 	endbr64
    00003996: 	movq	%rax, %rbx
    00003999: 	jmp	.Ltmp3243 # Offset: 14745
.Ltmp3238:
    0000399b: 	movq	-0x60(%rbp), %rdi
    0000399f: 	cmpq	-0x178(%rbp), %rdi
    000039a6: 	je	.Ltmp3244 # Offset: 14758
.Ltmp3253:
    000039a8: 	movq	-0x50(%rbp), %rax
    000039ac: 	leaq	0x1(%rax), %rsi
    000039b0: 	callq	_ZdlPvm@PLT # Offset: 14768
.Ltmp3244:
    000039b5: 	movq	-0xc0(%rbp), %rdi
    000039bc: 	leaq	-0xb0(%rbp), %rax
    000039c3: 	cmpq	%rax, %rdi
    000039c6: 	je	.Ltmp3241 # Offset: 14790
    000039c8: 	movq	-0xb0(%rbp), %rax
    000039cf: 	leaq	0x1(%rax), %rsi
    000039d3: 	callq	_ZdlPvm@PLT # Offset: 14803
    000039d8: 	jmp	.Ltmp3241 # Offset: 14808
.Ltmp3242:
    000039da: 	movq	-0x80(%rbp), %rdi
    000039de: 	leaq	-0x70(%rbp), %rax
    000039e2: 	cmpq	%rax, %rdi
    000039e5: 	je	.Ltmp3241 # Offset: 14821
.Ltmp3247:
    000039e7: 	movq	-0x70(%rbp), %rax
    000039eb: 	leaq	0x1(%rax), %rsi
    000039ef: 	callq	_ZdlPvm@PLT # Offset: 14831
.Ltmp3241:
    000039f4: 	movl	$0x8, %esi
    000039f9: 	movq	%r12, %rdi
    000039fc: 	callq	_ZdlPvm@PLT # Offset: 14844
.Ltmp3243:
    00003a01: 	movq	-0x160(%rbp), %rdi
    00003a08: 	movl	$0x8, %esi
    00003a0d: 	callq	_ZdlPvm@PLT # Offset: 14861
.Ltmp3256:
    00003a12: 	movq	-0xe0(%rbp), %rdi
    00003a19: 	leaq	-0xd0(%rbp), %rax
    00003a20: 	cmpq	%rax, %rdi
    00003a23: 	je	.Ltmp3245 # Offset: 14883
    00003a25: 	movq	-0xd0(%rbp), %rax
    00003a2c: 	leaq	0x1(%rax), %rsi
    00003a30: 	callq	_ZdlPvm@PLT # Offset: 14896
.Ltmp3245:
    00003a35: 	movq	-0x100(%rbp), %rdi
    00003a3c: 	leaq	-0xf0(%rbp), %rax
    00003a43: 	cmpq	%rax, %rdi
    00003a46: 	je	.Ltmp3246 # Offset: 14918
    00003a48: 	movq	-0xf0(%rbp), %rax
    00003a4f: 	leaq	0x1(%rax), %rsi
    00003a53: 	callq	_ZdlPvm@PLT # Offset: 14931
.Ltmp3246:
    00003a58: 	movq	%rbx, %rdi
    00003a5b: 	callq	_Unwind_Resume@PLT # Offset: 14939
.Ltmp3240:
    00003a60: 	movq	-0x80(%rbp), %rdi
    00003a64: 	cmpq	-0x150(%rbp), %rdi
    00003a6b: 	jne	.Ltmp3247 # Offset: 14955
    00003a71: 	jmp	.Ltmp3241 # Offset: 14961
    00003a73: 	endbr64
    00003a77: 	jmp	.Ltmp3239 # Offset: 14967
    00003a7c: 	endbr64
    00003a80: 	jmp	.Ltmp3239 # Offset: 14976
    00003a85: 	endbr64
.Ltmp3250:
    00003a89: 	movq	%rax, %rbx
    00003a8c: 	jmp	.Ltmp3248 # Offset: 14988
    00003a8e: 	endbr64
    00003a92: 	movq	%rax, %rbx
    00003a95: 	jmp	.Ltmp3249 # Offset: 14997
.Ltmp3257:
    00003a97: 	movq	-0x80(%rbp), %rdi
    00003a9b: 	cmpq	-0x150(%rbp), %rdi
    00003aa2: 	je	.Ltmp3249 # Offset: 15010
    00003aa4: 	movq	-0x70(%rbp), %rax
    00003aa8: 	leaq	0x1(%rax), %rsi
    00003aac: 	callq	_ZdlPvm@PLT # Offset: 15020
.Ltmp3249:
    00003ab1: 	movq	-0xa0(%rbp), %rdi
    00003ab8: 	leaq	-0x90(%rbp), %rax
    00003abf: 	cmpq	%rax, %rdi
    00003ac2: 	je	.Ltmp3244 # Offset: 15042
    00003ac8: 	movq	-0x90(%rbp), %rax
    00003acf: 	leaq	0x1(%rax), %rsi
    00003ad3: 	callq	_ZdlPvm@PLT # Offset: 15059
    00003ad8: 	jmp	.Ltmp3244 # Offset: 15064
.Ltmp3248:
    00003add: 	movq	-0x80(%rbp), %rdi
    00003ae1: 	cmpq	-0x150(%rbp), %rdi
    00003ae8: 	je	.Ltmp3244 # Offset: 15080
    00003aee: 	movq	-0x70(%rbp), %rax
    00003af2: 	leaq	0x1(%rax), %rsi
    00003af6: 	callq	_ZdlPvm@PLT # Offset: 15094
    00003afb: 	jmp	.Ltmp3244 # Offset: 15099
    00003b00: 	endbr64
    00003b04: 	jmp	.Ltmp3250 # Offset: 15108
    00003b06: 	endbr64
    00003b0a: 	movq	%rax, %rbx
    00003b0d: 	jmp	.Ltmp3251 # Offset: 15117
    00003b0f: 	endbr64
    00003b13: 	jmp	.Ltmp3252 # Offset: 15123
    00003b18: 	endbr64
    00003b1c: 	jmp	.Ltmp3252 # Offset: 15132
.Ltmp3251:
    00003b21: 	movq	-0x60(%rbp), %rdi
    00003b25: 	leaq	-0x50(%rbp), %rax
    00003b29: 	cmpq	%rax, %rdi
    00003b2c: 	jne	.Ltmp3253 # Offset: 15148
    00003b32: 	jmp	.Ltmp3244 # Offset: 15154
    00003b37: 	endbr64
.Ltmp3255:
    00003b3b: 	movq	%rax, %rbx
    00003b3e: 	jmp	.Ltmp3254 # Offset: 15166
    00003b40: 	endbr64
    00003b44: 	jmp	.Ltmp3255 # Offset: 15172
    00003b46: 	endbr64
    00003b4a: 	jmp	.Ltmp3255 # Offset: 15178
    00003b4c: 	endbr64
    00003b50: 	jmp	.Ltmp3255 # Offset: 15184
.Ltmp3254:
    00003b52: 	movq	-0x60(%rbp), %rdi
    00003b56: 	cmpq	-0x178(%rbp), %rdi
    00003b5d: 	je	.Ltmp3249 # Offset: 15197
    00003b63: 	movq	-0x50(%rbp), %rax
    00003b67: 	leaq	0x1(%rax), %rsi
    00003b6b: 	callq	_ZdlPvm@PLT # Offset: 15211
    00003b70: 	jmp	.Ltmp3249 # Offset: 15216
    00003b75: 	endbr64
    00003b79: 	jmp	.Ltmp3255 # Offset: 15225
    00003b7b: 	endbr64
    00003b7f: 	movq	%rax, %rbx
    00003b82: 	jmp	.Ltmp3256 # Offset: 15234
    00003b87: 	endbr64
    00003b8b: 	movq	%rax, %rbx
    00003b8e: 	jmp	.Ltmp3245 # Offset: 15246
    00003b93: 	endbr64
    00003b97: 	movq	%rax, %rbx
    00003b9a: 	jmp	.Ltmp3244 # Offset: 15258
    00003b9f: 	endbr64
    00003ba3: 	jmp	.Ltmp3252 # Offset: 15267
    00003ba8: 	endbr64
    00003bac: 	jmp	.Ltmp3252 # Offset: 15276
    00003bb1: 	endbr64
    00003bb5: 	jmp	.Ltmp3252 # Offset: 15285
    00003bba: 	endbr64
    00003bbe: 	jmp	.Ltmp3252 # Offset: 15294
    00003bc3: 	endbr64
    00003bc7: 	jmp	.Ltmp3250 # Offset: 15303
    00003bcc: 	endbr64
.Ltmp3258:
    00003bd0: 	movq	%rax, %rbx
    00003bd3: 	jmp	.Ltmp3257 # Offset: 15315
    00003bd8: 	endbr64
    00003bdc: 	jmp	.Ltmp3239 # Offset: 15324
    00003be1: 	endbr64
    00003be5: 	jmp	.Ltmp3239 # Offset: 15333
    00003bea: 	endbr64
    00003bee: 	jmp	.Ltmp3239 # Offset: 15342
    00003bf3: 	endbr64
    00003bf7: 	jmp	.Ltmp3250 # Offset: 15351
    00003bfc: 	endbr64
    00003c00: 	jmp	.Ltmp3250 # Offset: 15360
    00003c05: 	endbr64
    00003c09: 	jmp	.Ltmp3258 # Offset: 15369
    00003c0b: 	endbr64
    00003c0f: 	jmp	.Ltmp3255 # Offset: 15375
    00003c14: 	endbr64
    00003c18: 	jmp	.Ltmp3250 # Offset: 15384
    00003c1d: 	endbr64
    00003c21: 	jmp	.Ltmp3239 # Offset: 15393
    00003c26: 	endbr64
    00003c2a: 	jmp	.Ltmp3250 # Offset: 15402
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIddEvv"

Binary Function "_fini" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x488f0
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x488f0
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 165 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2756 instructions were shortened
BOLT-INFO: removed 192 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 160 out of 201 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x205f5c
